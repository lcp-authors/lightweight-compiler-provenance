
../repos/findutils/locate/locate:     file format elf32-littlearm


Disassembly of section .init:

00011828 <.init>:
   11828:	push	{r3, lr}
   1182c:	bl	11d4c <__assert_fail@plt+0x48>
   11830:	pop	{r3, pc}

Disassembly of section .plt:

00011834 <pthread_mutex_unlock@plt-0x14>:
   11834:	push	{lr}		; (str lr, [sp, #-4]!)
   11838:	ldr	lr, [pc, #4]	; 11844 <pthread_mutex_unlock@plt-0x4>
   1183c:	add	lr, pc, lr
   11840:	ldr	pc, [lr, #8]!
   11844:			; <UNDEFINED> instruction: 0x0002a7bc

00011848 <pthread_mutex_unlock@plt>:
   11848:	add	ip, pc, #0, 12
   1184c:	add	ip, ip, #172032	; 0x2a000
   11850:	ldr	pc, [ip, #1980]!	; 0x7bc

00011854 <fdopen@plt>:
   11854:	add	ip, pc, #0, 12
   11858:	add	ip, ip, #172032	; 0x2a000
   1185c:	ldr	pc, [ip, #1972]!	; 0x7b4

00011860 <calloc@plt>:
   11860:	add	ip, pc, #0, 12
   11864:	add	ip, ip, #172032	; 0x2a000
   11868:	ldr	pc, [ip, #1964]!	; 0x7ac

0001186c <wctype@plt>:
   1186c:	add	ip, pc, #0, 12
   11870:	add	ip, ip, #172032	; 0x2a000
   11874:	ldr	pc, [ip, #1956]!	; 0x7a4

00011878 <raise@plt>:
   11878:	add	ip, pc, #0, 12
   1187c:	add	ip, ip, #172032	; 0x2a000
   11880:	ldr	pc, [ip, #1948]!	; 0x79c

00011884 <wcrtomb@plt>:
   11884:	add	ip, pc, #0, 12
   11888:	add	ip, ip, #172032	; 0x2a000
   1188c:	ldr	pc, [ip, #1940]!	; 0x794

00011890 <iswctype@plt>:
   11890:	add	ip, pc, #0, 12
   11894:	add	ip, ip, #172032	; 0x2a000
   11898:	ldr	pc, [ip, #1932]!	; 0x78c

0001189c <strcmp@plt>:
   1189c:	add	ip, pc, #0, 12
   118a0:	add	ip, ip, #172032	; 0x2a000
   118a4:	ldr	pc, [ip, #1924]!	; 0x784

000118a8 <printf@plt>:
   118a8:	add	ip, pc, #0, 12
   118ac:	add	ip, ip, #172032	; 0x2a000
   118b0:	ldr	pc, [ip, #1916]!	; 0x77c

000118b4 <pthread_mutex_destroy@plt>:
   118b4:	add	ip, pc, #0, 12
   118b8:	add	ip, ip, #172032	; 0x2a000
   118bc:	ldr	pc, [ip, #1908]!	; 0x774

000118c0 <fflush@plt>:
   118c0:	add	ip, pc, #0, 12
   118c4:	add	ip, ip, #172032	; 0x2a000
   118c8:	ldr	pc, [ip, #1900]!	; 0x76c

000118cc <wcwidth@plt>:
   118cc:	add	ip, pc, #0, 12
   118d0:	add	ip, ip, #172032	; 0x2a000
   118d4:	ldr	pc, [ip, #1892]!	; 0x764

000118d8 <getuid@plt>:
   118d8:	add	ip, pc, #0, 12
   118dc:	add	ip, ip, #172032	; 0x2a000
   118e0:	ldr	pc, [ip, #1884]!	; 0x75c

000118e4 <memmove@plt>:
   118e4:	add	ip, pc, #0, 12
   118e8:	add	ip, ip, #172032	; 0x2a000
   118ec:	ldr	pc, [ip, #1876]!	; 0x754

000118f0 <free@plt>:
   118f0:	add	ip, pc, #0, 12
   118f4:	add	ip, ip, #172032	; 0x2a000
   118f8:	ldr	pc, [ip, #1868]!	; 0x74c

000118fc <pthread_mutex_lock@plt>:
   118fc:	add	ip, pc, #0, 12
   11900:	add	ip, ip, #172032	; 0x2a000
   11904:	ldr	pc, [ip, #1860]!	; 0x744

00011908 <ferror@plt>:
   11908:	add	ip, pc, #0, 12
   1190c:	add	ip, ip, #172032	; 0x2a000
   11910:	ldr	pc, [ip, #1852]!	; 0x73c

00011914 <strndup@plt>:
   11914:	add	ip, pc, #0, 12
   11918:	add	ip, ip, #172032	; 0x2a000
   1191c:	ldr	pc, [ip, #1844]!	; 0x734

00011920 <_exit@plt>:
   11920:	add	ip, pc, #0, 12
   11924:	add	ip, ip, #172032	; 0x2a000
   11928:	ldr	pc, [ip, #1836]!	; 0x72c

0001192c <memcpy@plt>:
   1192c:	add	ip, pc, #0, 12
   11930:	add	ip, ip, #172032	; 0x2a000
   11934:	ldr	pc, [ip, #1828]!	; 0x724

00011938 <tolower@plt>:
   11938:	add	ip, pc, #0, 12
   1193c:	add	ip, ip, #172032	; 0x2a000
   11940:	ldr	pc, [ip, #1820]!	; 0x71c

00011944 <pthread_mutex_init@plt>:
   11944:	add	ip, pc, #0, 12
   11948:	add	ip, ip, #172032	; 0x2a000
   1194c:	ldr	pc, [ip, #1812]!	; 0x714

00011950 <towlower@plt>:
   11950:	add	ip, pc, #0, 12
   11954:	add	ip, ip, #172032	; 0x2a000
   11958:	ldr	pc, [ip, #1804]!	; 0x70c

0001195c <mbsinit@plt>:
   1195c:	add	ip, pc, #0, 12
   11960:	add	ip, ip, #172032	; 0x2a000
   11964:	ldr	pc, [ip, #1796]!	; 0x704

00011968 <time@plt>:
   11968:	add	ip, pc, #0, 12
   1196c:	add	ip, ip, #172032	; 0x2a000
   11970:	ldr	pc, [ip, #1788]!	; 0x6fc

00011974 <memcmp@plt>:
   11974:	add	ip, pc, #0, 12
   11978:	add	ip, ip, #172032	; 0x2a000
   1197c:	ldr	pc, [ip, #1780]!	; 0x6f4

00011980 <dcgettext@plt>:
   11980:	add	ip, pc, #0, 12
   11984:	add	ip, ip, #172032	; 0x2a000
   11988:	ldr	pc, [ip, #1772]!	; 0x6ec

0001198c <realloc@plt>:
   1198c:	add	ip, pc, #0, 12
   11990:	add	ip, ip, #172032	; 0x2a000
   11994:	ldr	pc, [ip, #1764]!	; 0x6e4

00011998 <textdomain@plt>:
   11998:	add	ip, pc, #0, 12
   1199c:	add	ip, ip, #172032	; 0x2a000
   119a0:	ldr	pc, [ip, #1756]!	; 0x6dc

000119a4 <iswcntrl@plt>:
   119a4:	add	ip, pc, #0, 12
   119a8:	add	ip, ip, #172032	; 0x2a000
   119ac:	ldr	pc, [ip, #1748]!	; 0x6d4

000119b0 <geteuid@plt>:
   119b0:	add	ip, pc, #0, 12
   119b4:	add	ip, ip, #172032	; 0x2a000
   119b8:	ldr	pc, [ip, #1740]!	; 0x6cc

000119bc <iswprint@plt>:
   119bc:	add	ip, pc, #0, 12
   119c0:	add	ip, ip, #172032	; 0x2a000
   119c4:	ldr	pc, [ip, #1732]!	; 0x6c4

000119c8 <setgroups@plt>:
   119c8:	add	ip, pc, #0, 12
   119cc:	add	ip, ip, #172032	; 0x2a000
   119d0:	ldr	pc, [ip, #1724]!	; 0x6bc

000119d4 <__fxstat64@plt>:
   119d4:	add	ip, pc, #0, 12
   119d8:	add	ip, ip, #172032	; 0x2a000
   119dc:	ldr	pc, [ip, #1716]!	; 0x6b4

000119e0 <fwrite@plt>:
   119e0:	add	ip, pc, #0, 12
   119e4:	add	ip, ip, #172032	; 0x2a000
   119e8:	ldr	pc, [ip, #1708]!	; 0x6ac

000119ec <lseek64@plt>:
   119ec:	add	ip, pc, #0, 12
   119f0:	add	ip, ip, #172032	; 0x2a000
   119f4:	ldr	pc, [ip, #1700]!	; 0x6a4

000119f8 <__ctype_get_mb_cur_max@plt>:
   119f8:	add	ip, pc, #0, 12
   119fc:	add	ip, ip, #172032	; 0x2a000
   11a00:	ldr	pc, [ip, #1692]!	; 0x69c

00011a04 <fread@plt>:
   11a04:	add	ip, pc, #0, 12
   11a08:	add	ip, ip, #172032	; 0x2a000
   11a0c:	ldr	pc, [ip, #1684]!	; 0x694

00011a10 <__fpending@plt>:
   11a10:	add	ip, pc, #0, 12
   11a14:	add	ip, ip, #172032	; 0x2a000
   11a18:	ldr	pc, [ip, #1676]!	; 0x68c

00011a1c <mbrtowc@plt>:
   11a1c:	add	ip, pc, #0, 12
   11a20:	add	ip, ip, #172032	; 0x2a000
   11a24:	ldr	pc, [ip, #1668]!	; 0x684

00011a28 <error@plt>:
   11a28:	add	ip, pc, #0, 12
   11a2c:	add	ip, ip, #172032	; 0x2a000
   11a30:	ldr	pc, [ip, #1660]!	; 0x67c

00011a34 <fnmatch@plt>:
   11a34:	add	ip, pc, #0, 12
   11a38:	add	ip, ip, #172032	; 0x2a000
   11a3c:	ldr	pc, [ip, #1652]!	; 0x674

00011a40 <open64@plt>:
   11a40:	add	ip, pc, #0, 12
   11a44:	add	ip, ip, #172032	; 0x2a000
   11a48:	ldr	pc, [ip, #1644]!	; 0x66c

00011a4c <getenv@plt>:
   11a4c:	add	ip, pc, #0, 12
   11a50:	add	ip, ip, #172032	; 0x2a000
   11a54:	ldr	pc, [ip, #1636]!	; 0x664

00011a58 <setgid@plt>:
   11a58:	add	ip, pc, #0, 12
   11a5c:	add	ip, ip, #172032	; 0x2a000
   11a60:	ldr	pc, [ip, #1628]!	; 0x65c

00011a64 <malloc@plt>:
   11a64:	add	ip, pc, #0, 12
   11a68:	add	ip, ip, #172032	; 0x2a000
   11a6c:	ldr	pc, [ip, #1620]!	; 0x654

00011a70 <__libc_start_main@plt>:
   11a70:	add	ip, pc, #0, 12
   11a74:	add	ip, ip, #172032	; 0x2a000
   11a78:	ldr	pc, [ip, #1612]!	; 0x64c

00011a7c <strftime@plt>:
   11a7c:	add	ip, pc, #0, 12
   11a80:	add	ip, ip, #172032	; 0x2a000
   11a84:	ldr	pc, [ip, #1604]!	; 0x644

00011a88 <__freading@plt>:
   11a88:	add	ip, pc, #0, 12
   11a8c:	add	ip, ip, #172032	; 0x2a000
   11a90:	ldr	pc, [ip, #1596]!	; 0x63c

00011a94 <localtime@plt>:
   11a94:	add	ip, pc, #0, 12
   11a98:	add	ip, ip, #172032	; 0x2a000
   11a9c:	ldr	pc, [ip, #1588]!	; 0x634

00011aa0 <__ctype_tolower_loc@plt>:
   11aa0:	add	ip, pc, #0, 12
   11aa4:	add	ip, ip, #172032	; 0x2a000
   11aa8:	ldr	pc, [ip, #1580]!	; 0x62c

00011aac <__gmon_start__@plt>:
   11aac:	add	ip, pc, #0, 12
   11ab0:	add	ip, ip, #172032	; 0x2a000
   11ab4:	ldr	pc, [ip, #1572]!	; 0x624

00011ab8 <getopt_long@plt>:
   11ab8:	add	ip, pc, #0, 12
   11abc:	add	ip, ip, #172032	; 0x2a000
   11ac0:	ldr	pc, [ip, #1564]!	; 0x61c

00011ac4 <__ctype_b_loc@plt>:
   11ac4:	add	ip, pc, #0, 12
   11ac8:	add	ip, ip, #172032	; 0x2a000
   11acc:	ldr	pc, [ip, #1556]!	; 0x614

00011ad0 <exit@plt>:
   11ad0:	add	ip, pc, #0, 12
   11ad4:	add	ip, ip, #172032	; 0x2a000
   11ad8:	ldr	pc, [ip, #1548]!	; 0x60c

00011adc <feof@plt>:
   11adc:	add	ip, pc, #0, 12
   11ae0:	add	ip, ip, #172032	; 0x2a000
   11ae4:	ldr	pc, [ip, #1540]!	; 0x604

00011ae8 <strtoul@plt>:
   11ae8:	add	ip, pc, #0, 12
   11aec:	add	ip, ip, #172032	; 0x2a000
   11af0:	ldr	pc, [ip, #1532]!	; 0x5fc

00011af4 <strlen@plt>:
   11af4:	add	ip, pc, #0, 12
   11af8:	add	ip, ip, #172032	; 0x2a000
   11afc:	ldr	pc, [ip, #1524]!	; 0x5f4

00011b00 <strchr@plt>:
   11b00:	add	ip, pc, #0, 12
   11b04:	add	ip, ip, #172032	; 0x2a000
   11b08:	ldr	pc, [ip, #1516]!	; 0x5ec

00011b0c <fprintf@plt>:
   11b0c:	add	ip, pc, #0, 12
   11b10:	add	ip, ip, #172032	; 0x2a000
   11b14:	ldr	pc, [ip, #1508]!	; 0x5e4

00011b18 <ungetc@plt>:
   11b18:	add	ip, pc, #0, 12
   11b1c:	add	ip, ip, #172032	; 0x2a000
   11b20:	ldr	pc, [ip, #1500]!	; 0x5dc

00011b24 <__errno_location@plt>:
   11b24:	add	ip, pc, #0, 12
   11b28:	add	ip, ip, #172032	; 0x2a000
   11b2c:	ldr	pc, [ip, #1492]!	; 0x5d4

00011b30 <iswalnum@plt>:
   11b30:	add	ip, pc, #0, 12
   11b34:	add	ip, ip, #172032	; 0x2a000
   11b38:	ldr	pc, [ip, #1484]!	; 0x5cc

00011b3c <strncasecmp@plt>:
   11b3c:	add	ip, pc, #0, 12
   11b40:	add	ip, ip, #172032	; 0x2a000
   11b44:	ldr	pc, [ip, #1476]!	; 0x5c4

00011b48 <__cxa_atexit@plt>:
   11b48:	add	ip, pc, #0, 12
   11b4c:	add	ip, ip, #172032	; 0x2a000
   11b50:	ldr	pc, [ip, #1468]!	; 0x5bc

00011b54 <getgid@plt>:
   11b54:	add	ip, pc, #0, 12
   11b58:	add	ip, ip, #172032	; 0x2a000
   11b5c:	ldr	pc, [ip, #1460]!	; 0x5b4

00011b60 <memset@plt>:
   11b60:	add	ip, pc, #0, 12
   11b64:	add	ip, ip, #172032	; 0x2a000
   11b68:	ldr	pc, [ip, #1452]!	; 0x5ac

00011b6c <putchar@plt>:
   11b6c:	add	ip, pc, #0, 12
   11b70:	add	ip, ip, #172032	; 0x2a000
   11b74:	ldr	pc, [ip, #1444]!	; 0x5a4

00011b78 <btowc@plt>:
   11b78:	add	ip, pc, #0, 12
   11b7c:	add	ip, ip, #172032	; 0x2a000
   11b80:	ldr	pc, [ip, #1436]!	; 0x59c

00011b84 <fgetc@plt>:
   11b84:	add	ip, pc, #0, 12
   11b88:	add	ip, ip, #172032	; 0x2a000
   11b8c:	ldr	pc, [ip, #1428]!	; 0x594

00011b90 <fileno@plt>:
   11b90:	add	ip, pc, #0, 12
   11b94:	add	ip, ip, #172032	; 0x2a000
   11b98:	ldr	pc, [ip, #1420]!	; 0x58c

00011b9c <difftime@plt>:
   11b9c:	add	ip, pc, #0, 12
   11ba0:	add	ip, ip, #172032	; 0x2a000
   11ba4:	ldr	pc, [ip, #1412]!	; 0x584

00011ba8 <strtoumax@plt>:
   11ba8:	add	ip, pc, #0, 12
   11bac:	add	ip, ip, #172032	; 0x2a000
   11bb0:	ldr	pc, [ip, #1404]!	; 0x57c

00011bb4 <memchr@plt>:
   11bb4:	add	ip, pc, #0, 12
   11bb8:	add	ip, ip, #172032	; 0x2a000
   11bbc:	ldr	pc, [ip, #1396]!	; 0x574

00011bc0 <fclose@plt>:
   11bc0:	add	ip, pc, #0, 12
   11bc4:	add	ip, ip, #172032	; 0x2a000
   11bc8:	ldr	pc, [ip, #1388]!	; 0x56c

00011bcc <strnlen@plt>:
   11bcc:	add	ip, pc, #0, 12
   11bd0:	add	ip, ip, #172032	; 0x2a000
   11bd4:	ldr	pc, [ip, #1380]!	; 0x564

00011bd8 <fseeko64@plt>:
   11bd8:	add	ip, pc, #0, 12
   11bdc:	add	ip, ip, #172032	; 0x2a000
   11be0:	ldr	pc, [ip, #1372]!	; 0x55c

00011be4 <fcntl64@plt>:
   11be4:	add	ip, pc, #0, 12
   11be8:	add	ip, ip, #172032	; 0x2a000
   11bec:	ldr	pc, [ip, #1364]!	; 0x554

00011bf0 <setlocale@plt>:
   11bf0:	add	ip, pc, #0, 12
   11bf4:	add	ip, ip, #172032	; 0x2a000
   11bf8:	ldr	pc, [ip, #1356]!	; 0x54c

00011bfc <toupper@plt>:
   11bfc:	add	ip, pc, #0, 12
   11c00:	add	ip, ip, #172032	; 0x2a000
   11c04:	ldr	pc, [ip, #1348]!	; 0x544

00011c08 <strrchr@plt>:
   11c08:	add	ip, pc, #0, 12
   11c0c:	add	ip, ip, #172032	; 0x2a000
   11c10:	ldr	pc, [ip, #1340]!	; 0x53c

00011c14 <nl_langinfo@plt>:
   11c14:	add	ip, pc, #0, 12
   11c18:	add	ip, ip, #172032	; 0x2a000
   11c1c:	ldr	pc, [ip, #1332]!	; 0x534

00011c20 <fputc@plt>:
   11c20:	add	ip, pc, #0, 12
   11c24:	add	ip, ip, #172032	; 0x2a000
   11c28:	ldr	pc, [ip, #1324]!	; 0x52c

00011c2c <setuid@plt>:
   11c2c:	add	ip, pc, #0, 12
   11c30:	add	ip, ip, #172032	; 0x2a000
   11c34:	ldr	pc, [ip, #1316]!	; 0x524

00011c38 <localeconv@plt>:
   11c38:	add	ip, pc, #0, 12
   11c3c:	add	ip, ip, #172032	; 0x2a000
   11c40:	ldr	pc, [ip, #1308]!	; 0x51c

00011c44 <clearerr@plt>:
   11c44:	add	ip, pc, #0, 12
   11c48:	add	ip, ip, #172032	; 0x2a000
   11c4c:	ldr	pc, [ip, #1300]!	; 0x514

00011c50 <sprintf@plt>:
   11c50:	add	ip, pc, #0, 12
   11c54:	add	ip, ip, #172032	; 0x2a000
   11c58:	ldr	pc, [ip, #1292]!	; 0x50c

00011c5c <putc@plt>:
   11c5c:	add	ip, pc, #0, 12
   11c60:	add	ip, ip, #172032	; 0x2a000
   11c64:	ldr	pc, [ip, #1284]!	; 0x504

00011c68 <strpbrk@plt>:
   11c68:	add	ip, pc, #0, 12
   11c6c:	add	ip, ip, #172032	; 0x2a000
   11c70:	ldr	pc, [ip, #1276]!	; 0x4fc

00011c74 <bindtextdomain@plt>:
   11c74:	add	ip, pc, #0, 12
   11c78:	add	ip, ip, #172032	; 0x2a000
   11c7c:	ldr	pc, [ip, #1268]!	; 0x4f4

00011c80 <getdelim@plt>:
   11c80:	add	ip, pc, #0, 12
   11c84:	add	ip, ip, #172032	; 0x2a000
   11c88:	ldr	pc, [ip, #1260]!	; 0x4ec

00011c8c <__xstat64@plt>:
   11c8c:	add	ip, pc, #0, 12
   11c90:	add	ip, ip, #172032	; 0x2a000
   11c94:	ldr	pc, [ip, #1252]!	; 0x4e4

00011c98 <isatty@plt>:
   11c98:	add	ip, pc, #0, 12
   11c9c:	add	ip, ip, #172032	; 0x2a000
   11ca0:	ldr	pc, [ip, #1244]!	; 0x4dc

00011ca4 <towupper@plt>:
   11ca4:	add	ip, pc, #0, 12
   11ca8:	add	ip, ip, #172032	; 0x2a000
   11cac:	ldr	pc, [ip, #1236]!	; 0x4d4

00011cb0 <fputs@plt>:
   11cb0:	add	ip, pc, #0, 12
   11cb4:	add	ip, ip, #172032	; 0x2a000
   11cb8:	ldr	pc, [ip, #1228]!	; 0x4cc

00011cbc <strncmp@plt>:
   11cbc:	add	ip, pc, #0, 12
   11cc0:	add	ip, ip, #172032	; 0x2a000
   11cc4:	ldr	pc, [ip, #1220]!	; 0x4c4

00011cc8 <abort@plt>:
   11cc8:	add	ip, pc, #0, 12
   11ccc:	add	ip, ip, #172032	; 0x2a000
   11cd0:	ldr	pc, [ip, #1212]!	; 0x4bc

00011cd4 <getc@plt>:
   11cd4:	add	ip, pc, #0, 12
   11cd8:	add	ip, ip, #172032	; 0x2a000
   11cdc:	ldr	pc, [ip, #1204]!	; 0x4b4

00011ce0 <close@plt>:
   11ce0:	add	ip, pc, #0, 12
   11ce4:	add	ip, ip, #172032	; 0x2a000
   11ce8:	ldr	pc, [ip, #1196]!	; 0x4ac

00011cec <__lxstat64@plt>:
   11cec:	add	ip, pc, #0, 12
   11cf0:	add	ip, ip, #172032	; 0x2a000
   11cf4:	ldr	pc, [ip, #1188]!	; 0x4a4

00011cf8 <dcngettext@plt>:
   11cf8:	add	ip, pc, #0, 12
   11cfc:	add	ip, ip, #172032	; 0x2a000
   11d00:	ldr	pc, [ip, #1180]!	; 0x49c

00011d04 <__assert_fail@plt>:
   11d04:	add	ip, pc, #0, 12
   11d08:	add	ip, ip, #172032	; 0x2a000
   11d0c:	ldr	pc, [ip, #1172]!	; 0x494

Disassembly of section .text:

00011d10 <.text>:
   11d10:	mov	fp, #0
   11d14:	mov	lr, #0
   11d18:	pop	{r1}		; (ldr r1, [sp], #4)
   11d1c:	mov	r2, sp
   11d20:	push	{r2}		; (str r2, [sp, #-4]!)
   11d24:	push	{r0}		; (str r0, [sp, #-4]!)
   11d28:	ldr	ip, [pc, #16]	; 11d40 <__assert_fail@plt+0x3c>
   11d2c:	push	{ip}		; (str ip, [sp, #-4]!)
   11d30:	ldr	r0, [pc, #12]	; 11d44 <__assert_fail@plt+0x40>
   11d34:	ldr	r3, [pc, #12]	; 11d48 <__assert_fail@plt+0x44>
   11d38:	bl	11a70 <__libc_start_main@plt>
   11d3c:	bl	11cc8 <abort@plt>
   11d40:	andeq	r9, r2, r8, asr r5
   11d44:	andeq	r1, r1, r0, lsl #28
   11d48:	strdeq	r9, [r2], -r8
   11d4c:	ldr	r3, [pc, #20]	; 11d68 <__assert_fail@plt+0x64>
   11d50:	ldr	r2, [pc, #20]	; 11d6c <__assert_fail@plt+0x68>
   11d54:	add	r3, pc, r3
   11d58:	ldr	r2, [r3, r2]
   11d5c:	cmp	r2, #0
   11d60:	bxeq	lr
   11d64:	b	11aac <__gmon_start__@plt>
   11d68:	andeq	sl, r2, r4, lsr #5
   11d6c:	andeq	r0, r0, r4, lsr #3
   11d70:	ldr	r0, [pc, #24]	; 11d90 <__assert_fail@plt+0x8c>
   11d74:	ldr	r3, [pc, #24]	; 11d94 <__assert_fail@plt+0x90>
   11d78:	cmp	r3, r0
   11d7c:	bxeq	lr
   11d80:	ldr	r3, [pc, #16]	; 11d98 <__assert_fail@plt+0x94>
   11d84:	cmp	r3, #0
   11d88:	bxeq	lr
   11d8c:	bx	r3
   11d90:	andeq	ip, r3, r4, lsl #4
   11d94:	andeq	ip, r3, r4, lsl #4
   11d98:	andeq	r0, r0, r0
   11d9c:	ldr	r0, [pc, #36]	; 11dc8 <__assert_fail@plt+0xc4>
   11da0:	ldr	r1, [pc, #36]	; 11dcc <__assert_fail@plt+0xc8>
   11da4:	sub	r1, r1, r0
   11da8:	asr	r1, r1, #2
   11dac:	add	r1, r1, r1, lsr #31
   11db0:	asrs	r1, r1, #1
   11db4:	bxeq	lr
   11db8:	ldr	r3, [pc, #16]	; 11dd0 <__assert_fail@plt+0xcc>
   11dbc:	cmp	r3, #0
   11dc0:	bxeq	lr
   11dc4:	bx	r3
   11dc8:	andeq	ip, r3, r4, lsl #4
   11dcc:	andeq	ip, r3, r4, lsl #4
   11dd0:	andeq	r0, r0, r0
   11dd4:	push	{r4, lr}
   11dd8:	ldr	r4, [pc, #24]	; 11df8 <__assert_fail@plt+0xf4>
   11ddc:	ldrb	r3, [r4]
   11de0:	cmp	r3, #0
   11de4:	popne	{r4, pc}
   11de8:	bl	11d70 <__assert_fail@plt+0x6c>
   11dec:	mov	r3, #1
   11df0:	strb	r3, [r4]
   11df4:	pop	{r4, pc}
   11df8:	andeq	ip, r3, r4, lsr #4
   11dfc:	b	11d9c <__assert_fail@plt+0x98>
   11e00:	push	{r4, r5, r6, sl, fp, lr}
   11e04:	add	fp, sp, #16
   11e08:	mov	r4, r1
   11e0c:	mov	r5, r0
   11e10:	bl	11e30 <__assert_fail@plt+0x12c>
   11e14:	mov	r6, r0
   11e18:	bl	11e7c <__assert_fail@plt+0x178>
   11e1c:	mov	r0, r5
   11e20:	mov	r1, r4
   11e24:	mov	r2, r6
   11e28:	pop	{r4, r5, r6, sl, fp, lr}
   11e2c:	b	11fa0 <__assert_fail@plt+0x29c>
   11e30:	push	{r4, r5, r6, sl, fp, lr}
   11e34:	add	fp, sp, #16
   11e38:	mov	r5, #0
   11e3c:	movw	r6, #41560	; 0xa258
   11e40:	movt	r6, #2
   11e44:	b	11e58 <__assert_fail@plt+0x154>
   11e48:	add	r5, r5, #1
   11e4c:	cmp	r5, #1
   11e50:	mvnhi	r0, #0
   11e54:	pophi	{r4, r5, r6, sl, fp, pc}
   11e58:	ldr	r4, [r6, r5, lsl #2]
   11e5c:	mov	r0, r4
   11e60:	bl	12be4 <__assert_fail@plt+0xee0>
   11e64:	cmp	r0, #0
   11e68:	blt	11e48 <__assert_fail@plt+0x144>
   11e6c:	movw	r1, #49704	; 0xc228
   11e70:	movt	r1, #3
   11e74:	str	r4, [r1]
   11e78:	pop	{r4, r5, r6, sl, fp, pc}
   11e7c:	push	{r4, r5, r6, sl, fp, lr}
   11e80:	add	fp, sp, #16
   11e84:	sub	sp, sp, #8
   11e88:	bl	119b0 <geteuid@plt>
   11e8c:	mov	r5, r0
   11e90:	bl	118d8 <getuid@plt>
   11e94:	mov	r6, r0
   11e98:	bl	11b54 <getgid@plt>
   11e9c:	mov	r4, r0
   11ea0:	cmp	r5, #0
   11ea4:	bne	11ec0 <__assert_fail@plt+0x1bc>
   11ea8:	str	r4, [sp, #4]
   11eac:	add	r1, sp, #4
   11eb0:	mov	r0, #1
   11eb4:	bl	119c8 <setgroups@plt>
   11eb8:	cmp	r0, #0
   11ebc:	bne	11f68 <__assert_fail@plt+0x264>
   11ec0:	cmp	r6, r5
   11ec4:	cmpne	r6, #0
   11ec8:	beq	11f00 <__assert_fail@plt+0x1fc>
   11ecc:	bl	11b24 <__errno_location@plt>
   11ed0:	mov	r5, r0
   11ed4:	mov	r0, #0
   11ed8:	str	r0, [r5]
   11edc:	bl	118d8 <getuid@plt>
   11ee0:	bl	11c2c <setuid@plt>
   11ee4:	cmp	r0, #0
   11ee8:	bne	11f74 <__assert_fail@plt+0x270>
   11eec:	mov	r6, #0
   11ef0:	mov	r0, #0
   11ef4:	bl	11c2c <setuid@plt>
   11ef8:	cmp	r0, #0
   11efc:	beq	11f80 <__assert_fail@plt+0x27c>
   11f00:	bl	11b24 <__errno_location@plt>
   11f04:	mov	r1, #0
   11f08:	str	r1, [r0]
   11f0c:	mov	r0, r4
   11f10:	bl	11a58 <setgid@plt>
   11f14:	cmp	r0, #0
   11f18:	subeq	sp, fp, #16
   11f1c:	popeq	{r4, r5, r6, sl, fp, pc}
   11f20:	movw	r1, #38473	; 0x9649
   11f24:	movt	r1, #2
   11f28:	mov	r0, #0
   11f2c:	mov	r2, #5
   11f30:	bl	11980 <dcgettext@plt>
   11f34:	mov	r4, r0
   11f38:	bl	11b24 <__errno_location@plt>
   11f3c:	ldr	r5, [r0]
   11f40:	mov	r0, #0
   11f44:	mov	r1, #8
   11f48:	mov	r2, r4
   11f4c:	bl	189b0 <__assert_fail@plt+0x6cac>
   11f50:	mov	r3, r0
   11f54:	movw	r2, #44964	; 0xafa4
   11f58:	movt	r2, #2
   11f5c:	mov	r0, #1
   11f60:	mov	r1, r5
   11f64:	bl	11a28 <error@plt>
   11f68:	movw	r1, #38376	; 0x95e8
   11f6c:	movt	r1, #2
   11f70:	b	11f28 <__assert_fail@plt+0x224>
   11f74:	movw	r1, #38408	; 0x9608
   11f78:	movt	r1, #2
   11f7c:	b	11f28 <__assert_fail@plt+0x224>
   11f80:	movw	r1, #38441	; 0x9629
   11f84:	movt	r1, #2
   11f88:	mov	r0, #0
   11f8c:	mov	r2, #5
   11f90:	bl	11980 <dcgettext@plt>
   11f94:	mov	r4, r0
   11f98:	str	r6, [r5]
   11f9c:	b	11f38 <__assert_fail@plt+0x234>
   11fa0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   11fa4:	add	fp, sp, #28
   11fa8:	sub	sp, sp, #4
   11fac:	vpush	{d8-d11}
   11fb0:	sub	sp, sp, #256	; 0x100
   11fb4:	str	r2, [sp, #76]	; 0x4c
   11fb8:	mov	r7, r1
   11fbc:	mov	r9, r0
   11fc0:	ldr	r0, [r1]
   11fc4:	cmp	r0, #0
   11fc8:	movweq	r0, #39866	; 0x9bba
   11fcc:	movteq	r0, #2
   11fd0:	bl	1741c <__assert_fail@plt+0x5718>
   11fd4:	movw	r1, #41527	; 0xa237
   11fd8:	movt	r1, #2
   11fdc:	mov	r0, #6
   11fe0:	bl	11bf0 <setlocale@plt>
   11fe4:	movw	r4, #42089	; 0xa469
   11fe8:	movt	r4, #2
   11fec:	movw	r1, #38506	; 0x966a
   11ff0:	movt	r1, #2
   11ff4:	mov	r0, r4
   11ff8:	bl	11c74 <bindtextdomain@plt>
   11ffc:	mov	r0, r4
   12000:	bl	11998 <textdomain@plt>
   12004:	mov	r0, #0
   12008:	bl	174e0 <__assert_fail@plt+0x57dc>
   1200c:	movw	r1, #49708	; 0xc22c
   12010:	movt	r1, #3
   12014:	str	r0, [r1]
   12018:	movw	r0, #20276	; 0x4f34
   1201c:	movt	r0, #1
   12020:	bl	2955c <__assert_fail@plt+0x17858>
   12024:	cmp	r0, #0
   12028:	bne	12b8c <__assert_fail@plt+0xe88>
   1202c:	movw	r0, #11308	; 0x2c2c
   12030:	movt	r0, #1
   12034:	bl	2955c <__assert_fail@plt+0x17858>
   12038:	cmp	r0, #0
   1203c:	bne	12b8c <__assert_fail@plt+0xe88>
   12040:	movw	r0, #49728	; 0xc240
   12044:	movt	r0, #3
   12048:	mov	r1, #1
   1204c:	vmov.i32	q8, #0	; 0x00000000
   12050:	strb	r1, [r0]
   12054:	movw	r0, #49712	; 0xc230
   12058:	movt	r0, #3
   1205c:	vst1.64	{d16-d17}, [r0]
   12060:	movw	r0, #38565	; 0x96a5
   12064:	movt	r0, #2
   12068:	bl	11a4c <getenv@plt>
   1206c:	str	r0, [sp, #96]	; 0x60
   12070:	movw	r0, #49732	; 0xc244
   12074:	movt	r0, #3
   12078:	mov	r1, #0
   1207c:	str	r1, [r0]
   12080:	mvn	r8, #0
   12084:	add	sl, sp, #136	; 0x88
   12088:	movw	r5, #38577	; 0x96b1
   1208c:	movt	r5, #2
   12090:	movw	r4, #41572	; 0xa264
   12094:	movt	r4, #2
   12098:	mov	r0, #0
   1209c:	str	r0, [sp, #92]	; 0x5c
   120a0:	mov	r0, #0
   120a4:	str	r0, [sp, #108]	; 0x6c
   120a8:	mov	r0, #0
   120ac:	str	r0, [sp, #60]	; 0x3c
   120b0:	mov	r0, #0
   120b4:	str	r0, [sp, #100]	; 0x64
   120b8:	mov	r0, #0
   120bc:	str	r0, [sp, #112]	; 0x70
   120c0:	mov	r0, #0
   120c4:	str	r0, [sp, #88]	; 0x58
   120c8:	mov	r0, #0
   120cc:	str	r0, [sp, #80]	; 0x50
   120d0:	mov	r0, #0
   120d4:	str	r0, [sp, #104]	; 0x68
   120d8:	mov	r0, #0
   120dc:	b	120e4 <__assert_fail@plt+0x3e0>
   120e0:	mov	r0, #1
   120e4:	str	r0, [sp, #84]	; 0x54
   120e8:	b	120f8 <__assert_fail@plt+0x3f4>
   120ec:	movw	r1, #49740	; 0xc24c
   120f0:	movt	r1, #3
   120f4:	strb	r0, [r1]
   120f8:	str	r8, [sp, #136]	; 0x88
   120fc:	str	sl, [sp]
   12100:	mov	r0, r9
   12104:	mov	r1, r7
   12108:	mov	r2, r5
   1210c:	mov	r3, r4
   12110:	bl	11ab8 <getopt_long@plt>
   12114:	mov	r6, r0
   12118:	sub	r0, r0, #48	; 0x30
   1211c:	cmp	r0, #209	; 0xd1
   12120:	bhi	125ac <__assert_fail@plt+0x8a8>
   12124:	add	r1, pc, #0
   12128:	ldr	pc, [r1, r0, lsl #2]
   1212c:	andeq	r2, r1, r0, asr r5
   12130:	andeq	r2, r1, r8, lsr fp
   12134:	andeq	r2, r1, r8, lsr fp
   12138:	andeq	r2, r1, r8, lsr fp
   1213c:	andeq	r2, r1, r8, lsr fp
   12140:	andeq	r2, r1, r8, lsr fp
   12144:	andeq	r2, r1, r8, lsr fp
   12148:	andeq	r2, r1, r8, lsr fp
   1214c:	andeq	r2, r1, r8, lsr fp
   12150:	andeq	r2, r1, r8, lsr fp
   12154:	andeq	r2, r1, r8, lsr fp
   12158:	andeq	r2, r1, r8, lsr fp
   1215c:	andeq	r2, r1, r8, lsr fp
   12160:	andeq	r2, r1, r8, lsr fp
   12164:	andeq	r2, r1, r8, lsr fp
   12168:	andeq	r2, r1, r8, lsr fp
   1216c:	andeq	r2, r1, r8, lsr fp
   12170:	andeq	r2, r1, r0, ror #1
   12174:	andeq	r2, r1, r8, lsr fp
   12178:	andeq	r2, r1, r8, lsr fp
   1217c:	andeq	r2, r1, r8, lsr fp
   12180:	andeq	r2, r1, r4, ror r5
   12184:	andeq	r2, r1, r8, lsr fp
   12188:	andeq	r2, r1, r8, lsr fp
   1218c:	andeq	r2, r1, r4, ror r4
   12190:	andeq	r2, r1, r8, lsr fp
   12194:	andeq	r2, r1, r8, lsr fp
   12198:	andeq	r2, r1, r8, lsr fp
   1219c:	strdeq	r2, [r1], -r0
   121a0:	andeq	r2, r1, r8, lsr fp
   121a4:	andeq	r2, r1, r8, lsr fp
   121a8:	andeq	r2, r1, r8, lsr fp
   121ac:	andeq	r2, r1, r4, ror r4
   121b0:	andeq	r2, r1, r8, lsr fp
   121b4:	andeq	r2, r1, r8, lsr fp
   121b8:	strdeq	r2, [r1], -r8
   121bc:	andeq	r2, r1, r8, lsr fp
   121c0:	andeq	r2, r1, r8, lsr fp
   121c4:	andeq	r2, r1, r8, lsr fp
   121c8:	andeq	r2, r1, r8, lsr fp
   121cc:	andeq	r2, r1, r8, lsr fp
   121d0:	andeq	r2, r1, r8, lsr fp
   121d4:	andeq	r2, r1, r8, lsr fp
   121d8:	andeq	r2, r1, r8, lsr fp
   121dc:	andeq	r2, r1, r8, lsr fp
   121e0:	andeq	r2, r1, r8, lsr fp
   121e4:	andeq	r2, r1, r8, lsr fp
   121e8:	andeq	r2, r1, r8, lsr fp
   121ec:	andeq	r2, r1, r8, lsr fp
   121f0:	andeq	r2, r1, r8, lsr fp
   121f4:	ldrdeq	r2, [r1], -r8
   121f8:	andeq	r2, r1, r0, lsr r5
   121fc:			; <UNDEFINED> instruction: 0x000124bc
   12200:	andeq	r2, r1, ip, lsl r5
   12204:	andeq	r2, r1, r8, lsr fp
   12208:	andeq	r2, r1, r8, lsr fp
   1220c:	andeq	r2, r1, r0, asr #22
   12210:	andeq	r2, r1, r8, lsl #11
   12214:	andeq	r2, r1, r8, lsr fp
   12218:	andeq	r2, r1, r8, lsr fp
   1221c:	andeq	r2, r1, ip, ror r4
   12220:	strdeq	r2, [r1], -r8
   12224:	andeq	r2, r1, r8, lsr fp
   12228:	andeq	r2, r1, r8, lsr fp
   1222c:	andeq	r2, r1, r4, ror #9
   12230:	andeq	r2, r1, r8, lsr fp
   12234:	muleq	r1, r4, r5
   12238:	strdeq	r2, [r1], -r8
   1223c:	andeq	r2, r1, r8, lsr fp
   12240:	andeq	r2, r1, r8, lsr fp
   12244:	andeq	r2, r1, r0, ror #11
   12248:	andeq	r2, r1, r0, lsr #11
   1224c:	andeq	r2, r1, r8, lsr fp
   12250:	andeq	r2, r1, r8, lsr fp
   12254:	andeq	r2, r1, r8, lsr fp
   12258:	andeq	r2, r1, r8, lsr fp
   1225c:	andeq	r2, r1, r8, lsr fp
   12260:	andeq	r2, r1, r8, lsr fp
   12264:	andeq	r2, r1, r8, lsr fp
   12268:	andeq	r2, r1, r8, lsr fp
   1226c:	andeq	r2, r1, r8, lsr fp
   12270:	andeq	r2, r1, r8, lsr fp
   12274:	andeq	r2, r1, r8, lsr fp
   12278:	andeq	r2, r1, r8, lsr fp
   1227c:	andeq	r2, r1, r8, lsr fp
   12280:	andeq	r2, r1, r8, lsr fp
   12284:	andeq	r2, r1, r8, lsr fp
   12288:	andeq	r2, r1, r8, lsr fp
   1228c:	andeq	r2, r1, r8, lsr fp
   12290:	andeq	r2, r1, r8, lsr fp
   12294:	andeq	r2, r1, r8, lsr fp
   12298:	andeq	r2, r1, r8, lsr fp
   1229c:	andeq	r2, r1, r8, lsr fp
   122a0:	andeq	r2, r1, r8, lsr fp
   122a4:	andeq	r2, r1, r8, lsr fp
   122a8:	andeq	r2, r1, r8, lsr fp
   122ac:	andeq	r2, r1, r8, lsr fp
   122b0:	andeq	r2, r1, r8, lsr fp
   122b4:	andeq	r2, r1, r8, lsr fp
   122b8:	andeq	r2, r1, r8, lsr fp
   122bc:	andeq	r2, r1, r8, lsr fp
   122c0:	andeq	r2, r1, r8, lsr fp
   122c4:	andeq	r2, r1, r8, lsr fp
   122c8:	andeq	r2, r1, r8, lsr fp
   122cc:	andeq	r2, r1, r8, lsr fp
   122d0:	andeq	r2, r1, r8, lsr fp
   122d4:	andeq	r2, r1, r8, lsr fp
   122d8:	andeq	r2, r1, r8, lsr fp
   122dc:	andeq	r2, r1, r8, lsr fp
   122e0:	andeq	r2, r1, r8, lsr fp
   122e4:	andeq	r2, r1, r8, lsr fp
   122e8:	andeq	r2, r1, r8, lsr fp
   122ec:	andeq	r2, r1, r8, lsr fp
   122f0:	andeq	r2, r1, r8, lsr fp
   122f4:	andeq	r2, r1, r8, lsr fp
   122f8:	andeq	r2, r1, r8, lsr fp
   122fc:	andeq	r2, r1, r8, lsr fp
   12300:	andeq	r2, r1, r8, lsr fp
   12304:	andeq	r2, r1, r8, lsr fp
   12308:	andeq	r2, r1, r8, lsr fp
   1230c:	andeq	r2, r1, r8, lsr fp
   12310:	andeq	r2, r1, r8, lsr fp
   12314:	andeq	r2, r1, r8, lsr fp
   12318:	andeq	r2, r1, r8, lsr fp
   1231c:	andeq	r2, r1, r8, lsr fp
   12320:	andeq	r2, r1, r8, lsr fp
   12324:	andeq	r2, r1, r8, lsr fp
   12328:	andeq	r2, r1, r8, lsr fp
   1232c:	andeq	r2, r1, r8, lsr fp
   12330:	andeq	r2, r1, r8, lsr fp
   12334:	andeq	r2, r1, r8, lsr fp
   12338:	andeq	r2, r1, r8, lsr fp
   1233c:	andeq	r2, r1, r8, lsr fp
   12340:	andeq	r2, r1, r8, lsr fp
   12344:	andeq	r2, r1, r8, lsr fp
   12348:	andeq	r2, r1, r8, lsr fp
   1234c:	andeq	r2, r1, r8, lsr fp
   12350:	andeq	r2, r1, r8, lsr fp
   12354:	andeq	r2, r1, r8, lsr fp
   12358:	andeq	r2, r1, r8, lsr fp
   1235c:	andeq	r2, r1, r8, lsr fp
   12360:	andeq	r2, r1, r8, lsr fp
   12364:	andeq	r2, r1, r8, lsr fp
   12368:	andeq	r2, r1, r8, lsr fp
   1236c:	andeq	r2, r1, r8, lsr fp
   12370:	andeq	r2, r1, r8, lsr fp
   12374:	andeq	r2, r1, r8, lsr fp
   12378:	andeq	r2, r1, r8, lsr fp
   1237c:	andeq	r2, r1, r8, lsr fp
   12380:	andeq	r2, r1, r8, lsr fp
   12384:	andeq	r2, r1, r8, lsr fp
   12388:	andeq	r2, r1, r8, lsr fp
   1238c:	andeq	r2, r1, r8, lsr fp
   12390:	andeq	r2, r1, r8, lsr fp
   12394:	andeq	r2, r1, r8, lsr fp
   12398:	andeq	r2, r1, r8, lsr fp
   1239c:	andeq	r2, r1, r8, lsr fp
   123a0:	andeq	r2, r1, r8, lsr fp
   123a4:	andeq	r2, r1, r8, lsr fp
   123a8:	andeq	r2, r1, r8, lsr fp
   123ac:	andeq	r2, r1, r8, lsr fp
   123b0:	andeq	r2, r1, r8, lsr fp
   123b4:	andeq	r2, r1, r8, lsr fp
   123b8:	andeq	r2, r1, r8, lsr fp
   123bc:	andeq	r2, r1, r8, lsr fp
   123c0:	andeq	r2, r1, r8, lsr fp
   123c4:	andeq	r2, r1, r8, lsr fp
   123c8:	andeq	r2, r1, r8, lsr fp
   123cc:	andeq	r2, r1, r8, lsr fp
   123d0:	andeq	r2, r1, r8, lsr fp
   123d4:	andeq	r2, r1, r8, lsr fp
   123d8:	andeq	r2, r1, r8, lsr fp
   123dc:	andeq	r2, r1, r8, lsr fp
   123e0:	andeq	r2, r1, r8, lsr fp
   123e4:	andeq	r2, r1, r8, lsr fp
   123e8:	andeq	r2, r1, r8, lsr fp
   123ec:	andeq	r2, r1, r8, lsr fp
   123f0:	andeq	r2, r1, r8, lsr fp
   123f4:	andeq	r2, r1, r8, lsr fp
   123f8:	andeq	r2, r1, r8, lsr fp
   123fc:	andeq	r2, r1, r8, lsr fp
   12400:	andeq	r2, r1, r8, lsr fp
   12404:	andeq	r2, r1, r8, lsr fp
   12408:	andeq	r2, r1, r8, lsr fp
   1240c:	andeq	r2, r1, r8, lsr fp
   12410:	andeq	r2, r1, r8, lsr fp
   12414:	andeq	r2, r1, r8, lsr fp
   12418:	andeq	r2, r1, r8, lsr fp
   1241c:	andeq	r2, r1, r8, lsr fp
   12420:	andeq	r2, r1, r8, lsr fp
   12424:	andeq	r2, r1, r8, lsr fp
   12428:	andeq	r2, r1, r8, lsr fp
   1242c:	andeq	r2, r1, r8, lsr fp
   12430:	andeq	r2, r1, r8, lsr fp
   12434:	andeq	r2, r1, r8, lsr fp
   12438:	andeq	r2, r1, r8, lsr fp
   1243c:	andeq	r2, r1, r8, lsr fp
   12440:	andeq	r2, r1, r8, lsr fp
   12444:	andeq	r2, r1, r8, lsr fp
   12448:	andeq	r2, r1, r8, lsr fp
   1244c:	andeq	r2, r1, r8, lsr fp
   12450:	andeq	r2, r1, r8, lsr fp
   12454:	andeq	r2, r1, r8, lsr fp
   12458:	andeq	r2, r1, r8, lsr fp
   1245c:	andeq	r2, r1, r8, lsr fp
   12460:	andeq	r2, r1, r8, lsr fp
   12464:	andeq	r2, r1, r8, lsr fp
   12468:	andeq	r2, r1, r8, lsr fp
   1246c:	andeq	r2, r1, r4, lsl #10
   12470:	andeq	r2, r1, ip, lsr r5
   12474:	mov	r0, #1
   12478:	b	120ec <__assert_fail@plt+0x3e8>
   1247c:	movw	r0, #49696	; 0xc220
   12480:	movt	r0, #3
   12484:	ldr	r0, [r0]
   12488:	str	r0, [sp, #128]	; 0x80
   1248c:	mov	r1, #0
   12490:	str	r1, [sp]
   12494:	add	r1, sp, #128	; 0x80
   12498:	mov	r2, #10
   1249c:	movw	r3, #49712	; 0xc230
   124a0:	movt	r3, #3
   124a4:	bl	19a84 <__assert_fail@plt+0x7d80>
   124a8:	cmp	r0, #0
   124ac:	bne	12b48 <__assert_fail@plt+0xe44>
   124b0:	mov	r0, #1
   124b4:	str	r0, [sp, #112]	; 0x70
   124b8:	b	120f8 <__assert_fail@plt+0x3f4>
   124bc:	movw	r0, #49696	; 0xc220
   124c0:	movt	r0, #3
   124c4:	ldr	r0, [r0]
   124c8:	str	r0, [sp, #96]	; 0x60
   124cc:	cmp	r0, #0
   124d0:	bne	120f8 <__assert_fail@plt+0x3f4>
   124d4:	b	12b6c <__assert_fail@plt+0xe68>
   124d8:	mov	r0, #1
   124dc:	str	r0, [sp, #100]	; 0x64
   124e0:	b	120f8 <__assert_fail@plt+0x3f4>
   124e4:	mov	r0, #1
   124e8:	str	r0, [sp, #108]	; 0x6c
   124ec:	b	120f8 <__assert_fail@plt+0x3f4>
   124f0:	mov	r0, #0
   124f4:	b	120ec <__assert_fail@plt+0x3e8>
   124f8:	mov	r0, #1
   124fc:	str	r0, [sp, #104]	; 0x68
   12500:	b	120f8 <__assert_fail@plt+0x3f4>
   12504:	movw	r0, #49696	; 0xc220
   12508:	movt	r0, #3
   1250c:	ldr	r0, [r0]
   12510:	bl	14ba4 <__assert_fail@plt+0x2ea0>
   12514:	str	r0, [sp, #80]	; 0x50
   12518:	b	120f8 <__assert_fail@plt+0x3f4>
   1251c:	mov	r0, #1
   12520:	movw	r1, #49732	; 0xc244
   12524:	movt	r1, #3
   12528:	str	r0, [r1]
   1252c:	b	120f8 <__assert_fail@plt+0x3f4>
   12530:	mov	r0, #1
   12534:	str	r0, [sp, #60]	; 0x3c
   12538:	b	120f8 <__assert_fail@plt+0x3f4>
   1253c:	movw	r0, #49696	; 0xc220
   12540:	movt	r0, #3
   12544:	ldr	r0, [r0]
   12548:	bl	12cdc <__assert_fail@plt+0xfd8>
   1254c:	b	120f8 <__assert_fail@plt+0x3f4>
   12550:	movw	r0, #49728	; 0xc240
   12554:	movt	r0, #3
   12558:	mov	r1, #0
   1255c:	strb	r1, [r0]
   12560:	mov	r0, #1
   12564:	movw	r1, #49736	; 0xc248
   12568:	movt	r1, #3
   1256c:	strb	r0, [r1]
   12570:	b	120f8 <__assert_fail@plt+0x3f4>
   12574:	movw	r0, #49732	; 0xc244
   12578:	movt	r0, #3
   1257c:	mov	r1, #2
   12580:	str	r1, [r0]
   12584:	b	120f8 <__assert_fail@plt+0x3f4>
   12588:	mov	r0, #1
   1258c:	str	r0, [sp, #92]	; 0x5c
   12590:	b	120f8 <__assert_fail@plt+0x3f4>
   12594:	mov	r0, #1
   12598:	str	r0, [sp, #88]	; 0x58
   1259c:	b	120f8 <__assert_fail@plt+0x3f4>
   125a0:	mov	r0, #0
   125a4:	str	r0, [sp, #100]	; 0x64
   125a8:	b	120f8 <__assert_fail@plt+0x3f4>
   125ac:	cmn	r6, #1
   125b0:	bne	12b38 <__assert_fail@plt+0xe34>
   125b4:	ldr	r0, [sp, #76]	; 0x4c
   125b8:	cmp	r0, #0
   125bc:	blt	125f4 <__assert_fail@plt+0x8f0>
   125c0:	ldr	r4, [sp, #96]	; 0x60
   125c4:	cmp	r4, #0
   125c8:	ldr	r6, [sp, #112]	; 0x70
   125cc:	beq	125fc <__assert_fail@plt+0x8f8>
   125d0:	bl	11ce0 <close@plt>
   125d4:	mvn	r0, #0
   125d8:	str	r0, [sp, #76]	; 0x4c
   125dc:	b	125fc <__assert_fail@plt+0x8f8>
   125e0:	movw	r0, #39866	; 0x9bba
   125e4:	movt	r0, #2
   125e8:	bl	14700 <__assert_fail@plt+0x29fc>
   125ec:	mov	r4, #0
   125f0:	b	12af8 <__assert_fail@plt+0xdf4>
   125f4:	ldr	r4, [sp, #96]	; 0x60
   125f8:	ldr	r6, [sp, #112]	; 0x70
   125fc:	ldr	r1, [sp, #104]	; 0x68
   12600:	ldr	r0, [sp, #60]	; 0x3c
   12604:	orrs	r0, r1, r0
   12608:	ldr	r0, [sp, #108]	; 0x6c
   1260c:	movweq	r0, #1
   12610:	str	r0, [sp, #108]	; 0x6c
   12614:	movw	r0, #49680	; 0xc210
   12618:	movt	r0, #3
   1261c:	cmp	r1, #0
   12620:	beq	12634 <__assert_fail@plt+0x930>
   12624:	ldr	r0, [r0]
   12628:	subs	r0, r0, r9
   1262c:	moveq	r6, r0
   12630:	b	12648 <__assert_fail@plt+0x944>
   12634:	ldr	r0, [r0]
   12638:	cmp	r0, r9
   1263c:	ldreq	r0, [sp, #60]	; 0x3c
   12640:	cmpeq	r0, #0
   12644:	beq	12bb8 <__assert_fail@plt+0xeb4>
   12648:	mov	r0, #1
   1264c:	bl	11c98 <isatty@plt>
   12650:	sub	r0, r0, #1
   12654:	clz	r0, r0
   12658:	lsr	r0, r0, #5
   1265c:	movw	r1, #49741	; 0xc24d
   12660:	movt	r1, #3
   12664:	strb	r0, [r1]
   12668:	cmp	r4, #0
   1266c:	beq	12690 <__assert_fail@plt+0x98c>
   12670:	sub	r0, fp, #76	; 0x4c
   12674:	str	r0, [sp]
   12678:	movw	r1, #44952	; 0xaf98
   1267c:	movt	r1, #2
   12680:	sub	r3, fp, #72	; 0x48
   12684:	mov	r0, r4
   12688:	mov	r2, #1
   1268c:	bl	14d88 <__assert_fail@plt+0x3084>
   12690:	add	r0, sl, #48	; 0x30
   12694:	str	r0, [sp, #56]	; 0x38
   12698:	mov	r5, #0
   1269c:	vmov.i32	q5, #0	; 0x00000000
   126a0:	movw	r0, #49744	; 0xc250
   126a4:	movt	r0, #3
   126a8:	add	r0, r0, #16
   126ac:	str	r0, [sp, #72]	; 0x48
   126b0:	vldr	d9, [pc, #648]	; 12940 <__assert_fail@plt+0xc3c>
   126b4:	mov	r0, #0
   126b8:	str	r0, [sp, #52]	; 0x34
   126bc:	str	r7, [sp, #68]	; 0x44
   126c0:	str	r9, [sp, #64]	; 0x40
   126c4:	str	r6, [sp, #112]	; 0x70
   126c8:	cmp	r6, #0
   126cc:	beq	126f0 <__assert_fail@plt+0x9ec>
   126d0:	movw	r0, #49712	; 0xc230
   126d4:	movt	r0, #3
   126d8:	mov	r3, r0
   126dc:	ldr	r0, [r0]
   126e0:	ldmib	r3, {r1, r2, r3}
   126e4:	subs	r0, r2, r0
   126e8:	sbcs	r0, r3, r1
   126ec:	bcs	12a68 <__assert_fail@plt+0xd64>
   126f0:	ldr	r0, [sp, #72]	; 0x48
   126f4:	vst1.64	{d10-d11}, [r0]
   126f8:	movw	r0, #49744	; 0xc250
   126fc:	movt	r0, #3
   12700:	mov	r1, #32
   12704:	vst1.64	{d10-d11}, [r0], r1
   12708:	vst1.64	{d10-d11}, [r0]
   1270c:	cmp	r4, #0
   12710:	beq	12764 <__assert_fail@plt+0xa60>
   12714:	mov	r6, #0
   12718:	ldr	r1, [fp, #-76]	; 0xffffffb4
   1271c:	cmp	r1, #0
   12720:	beq	12790 <__assert_fail@plt+0xa8c>
   12724:	cmp	r1, #1
   12728:	bne	127b4 <__assert_fail@plt+0xab0>
   1272c:	ldr	r0, [fp, #-72]	; 0xffffffb8
   12730:	ldrb	r0, [r4, r0]
   12734:	cmp	r0, #45	; 0x2d
   12738:	bne	1279c <__assert_fail@plt+0xa98>
   1273c:	ldr	r0, [sp, #52]	; 0x34
   12740:	tst	r0, #1
   12744:	bne	12b0c <__assert_fail@plt+0xe08>
   12748:	mov	r6, #0
   1274c:	mov	r0, #1
   12750:	str	r0, [sp, #52]	; 0x34
   12754:	movw	r9, #38743	; 0x9757
   12758:	movt	r9, #2
   1275c:	mov	r5, #0
   12760:	b	127dc <__assert_fail@plt+0xad8>
   12764:	ldr	r0, [sp, #76]	; 0x4c
   12768:	cmn	r0, #1
   1276c:	beq	12a68 <__assert_fail@plt+0xd64>
   12770:	movw	r1, #49704	; 0xc228
   12774:	movt	r1, #3
   12778:	ldr	r9, [r1]
   1277c:	mov	r6, #0
   12780:	mov	r5, r0
   12784:	mvn	r0, #0
   12788:	str	r0, [sp, #76]	; 0x4c
   1278c:	b	127dc <__assert_fail@plt+0xad8>
   12790:	movw	r9, #38324	; 0x95b4
   12794:	movt	r9, #2
   12798:	b	127c8 <__assert_fail@plt+0xac4>
   1279c:	ldr	r0, [fp, #-72]	; 0xffffffb8
   127a0:	ldrb	r0, [r4, r0]
   127a4:	cmp	r0, #46	; 0x2e
   127a8:	movw	r9, #38324	; 0x95b4
   127ac:	movt	r9, #2
   127b0:	beq	127c8 <__assert_fail@plt+0xac4>
   127b4:	ldr	r0, [fp, #-72]	; 0xffffffb8
   127b8:	add	r0, r4, r0
   127bc:	bl	11914 <strndup@plt>
   127c0:	mov	r9, r0
   127c4:	mov	r6, r0
   127c8:	mov	r0, r9
   127cc:	bl	12be4 <__assert_fail@plt+0xee0>
   127d0:	cmn	r0, #1
   127d4:	ble	12ac4 <__assert_fail@plt+0xdc0>
   127d8:	mov	r5, r0
   127dc:	mov	r0, r5
   127e0:	add	r4, sp, #136	; 0x88
   127e4:	mov	r1, r4
   127e8:	bl	29584 <__assert_fail@plt+0x17880>
   127ec:	cmp	r0, #0
   127f0:	str	r6, [sp, #116]	; 0x74
   127f4:	beq	12838 <__assert_fail@plt+0xb34>
   127f8:	bl	11b24 <__errno_location@plt>
   127fc:	ldr	r4, [r0]
   12800:	mov	r8, #0
   12804:	mov	r0, #0
   12808:	mov	r1, #8
   1280c:	mov	r2, r9
   12810:	bl	189b0 <__assert_fail@plt+0x6cac>
   12814:	mov	r3, r0
   12818:	mov	r0, #0
   1281c:	mov	r1, r4
   12820:	movw	r2, #44964	; 0xafa4
   12824:	movt	r2, #2
   12828:	bl	11a28 <error@plt>
   1282c:	mov	sl, #0
   12830:	mov	r7, #0
   12834:	b	12978 <__assert_fail@plt+0xc74>
   12838:	ldr	r0, [sp, #56]	; 0x38
   1283c:	ldr	sl, [r0]
   12840:	ldr	r7, [r0, #4]
   12844:	add	r6, sp, #120	; 0x78
   12848:	mov	r0, r6
   1284c:	mov	r1, r4
   12850:	bl	190a0 <__assert_fail@plt+0x739c>
   12854:	ldr	r0, [sp, #120]	; 0x78
   12858:	ldr	r1, [sp, #124]	; 0x7c
   1285c:	str	r1, [sp, #132]	; 0x84
   12860:	str	r0, [sp, #128]	; 0x80
   12864:	mov	r0, r6
   12868:	bl	11968 <time@plt>
   1286c:	cmn	r0, #1
   12870:	beq	12948 <__assert_fail@plt+0xc44>
   12874:	ldr	r1, [sp, #216]	; 0xd8
   12878:	ldr	r0, [sp, #120]	; 0x78
   1287c:	bl	11b9c <difftime@plt>
   12880:	vmov.f64	d8, d0
   12884:	movw	r0, #49584	; 0xc1b0
   12888:	movt	r0, #3
   1288c:	ldr	r0, [r0]
   12890:	movw	r1, #20864	; 0x5180
   12894:	movt	r1, #1
   12898:	mul	r0, r0, r1
   1289c:	vmov	s0, r0
   128a0:	vcvt.f64.u32	d16, s0
   128a4:	vcmpe.f64	d8, d16
   128a8:	vmrs	APSR_nzcv, fpscr
   128ac:	ble	12974 <__assert_fail@plt+0xc70>
   128b0:	mov	r0, #0
   128b4:	movw	r1, #38775	; 0x9777
   128b8:	movt	r1, #2
   128bc:	mov	r2, #5
   128c0:	bl	11980 <dcgettext@plt>
   128c4:	str	r0, [sp, #48]	; 0x30
   128c8:	mov	r0, #0
   128cc:	mov	r1, #8
   128d0:	mov	r2, r9
   128d4:	bl	189b0 <__assert_fail@plt+0x6cac>
   128d8:	str	r0, [sp, #44]	; 0x2c
   128dc:	movw	r0, #49584	; 0xc1b0
   128e0:	movt	r0, #3
   128e4:	ldr	r8, [r0]
   128e8:	mov	r0, #0
   128ec:	movw	r6, #41940	; 0xa3d4
   128f0:	movt	r6, #2
   128f4:	mov	r1, r6
   128f8:	mov	r2, #5
   128fc:	bl	11980 <dcgettext@plt>
   12900:	mov	r4, r0
   12904:	mov	r0, #0
   12908:	mov	r1, r6
   1290c:	mov	r2, #5
   12910:	bl	11980 <dcgettext@plt>
   12914:	vdiv.f64	d16, d8, d9
   12918:	str	r0, [sp, #16]
   1291c:	vstr	d16, [sp, #8]
   12920:	str	r8, [sp]
   12924:	str	r4, [sp, #4]
   12928:	mov	r0, #0
   1292c:	mov	r1, #0
   12930:	ldr	r2, [sp, #48]	; 0x30
   12934:	ldr	r3, [sp, #44]	; 0x2c
   12938:	bl	11a28 <error@plt>
   1293c:	b	12974 <__assert_fail@plt+0xc70>
   12940:	andeq	r0, r0, r0
   12944:	rscsmi	r1, r5, r0, lsl #16
   12948:	bl	11b24 <__errno_location@plt>
   1294c:	ldr	r4, [r0]
   12950:	mov	r0, #0
   12954:	movw	r1, #38751	; 0x975f
   12958:	movt	r1, #2
   1295c:	mov	r2, #5
   12960:	bl	11980 <dcgettext@plt>
   12964:	mov	r2, r0
   12968:	mov	r0, #0
   1296c:	mov	r1, r4
   12970:	bl	11a28 <error@plt>
   12974:	mov	r8, #1
   12978:	mov	r0, r5
   1297c:	movw	r1, #42069	; 0xa455
   12980:	movt	r1, #2
   12984:	bl	11854 <fdopen@plt>
   12988:	cmp	r0, #0
   1298c:	beq	12ac4 <__assert_fail@plt+0xdc0>
   12990:	mov	r4, r0
   12994:	movw	r0, #49680	; 0xc210
   12998:	movt	r0, #3
   1299c:	ldr	r1, [r0]
   129a0:	ldr	r0, [sp, #84]	; 0x54
   129a4:	str	r0, [sp, #32]
   129a8:	ldr	r0, [sp, #88]	; 0x58
   129ac:	str	r0, [sp, #36]	; 0x24
   129b0:	ldr	r0, [sp, #80]	; 0x50
   129b4:	str	r0, [sp, #40]	; 0x28
   129b8:	cmp	r8, #0
   129bc:	add	r0, sp, #128	; 0x80
   129c0:	movne	r8, r0
   129c4:	str	sl, [sp]
   129c8:	stmib	sp, {r7, r8}
   129cc:	ldr	r0, [sp, #92]	; 0x5c
   129d0:	str	r0, [sp, #12]
   129d4:	ldr	r0, [sp, #108]	; 0x6c
   129d8:	str	r0, [sp, #16]
   129dc:	ldr	r0, [sp, #100]	; 0x64
   129e0:	str	r0, [sp, #20]
   129e4:	ldr	r6, [sp, #112]	; 0x70
   129e8:	str	r6, [sp, #24]
   129ec:	ldr	r0, [sp, #104]	; 0x68
   129f0:	str	r0, [sp, #28]
   129f4:	ldr	r0, [sp, #64]	; 0x40
   129f8:	sub	r0, r0, r1
   129fc:	ldr	r2, [sp, #68]	; 0x44
   12a00:	add	r1, r2, r1, lsl #2
   12a04:	mov	r2, r9
   12a08:	mov	r3, r4
   12a0c:	bl	12dfc <__assert_fail@plt+0x10f8>
   12a10:	mov	r5, r0
   12a14:	mov	r0, r4
   12a18:	bl	11bc0 <fclose@plt>
   12a1c:	cmn	r0, #1
   12a20:	beq	12ac4 <__assert_fail@plt+0xdc0>
   12a24:	ldr	r0, [sp, #116]	; 0x74
   12a28:	cmp	r0, #0
   12a2c:	beq	12a34 <__assert_fail@plt+0xd30>
   12a30:	bl	1a22c <__assert_fail@plt+0x8528>
   12a34:	ldr	r4, [sp, #96]	; 0x60
   12a38:	cmp	r4, #0
   12a3c:	beq	12a68 <__assert_fail@plt+0xd64>
   12a40:	sub	r0, fp, #76	; 0x4c
   12a44:	str	r0, [sp]
   12a48:	mov	r0, r4
   12a4c:	movw	r1, #44952	; 0xaf98
   12a50:	movt	r1, #2
   12a54:	mov	r2, #0
   12a58:	sub	r3, fp, #72	; 0x48
   12a5c:	bl	14d88 <__assert_fail@plt+0x3084>
   12a60:	cmp	r0, #0
   12a64:	bne	126c8 <__assert_fail@plt+0x9c4>
   12a68:	ldr	r0, [sp, #60]	; 0x3c
   12a6c:	cmp	r0, #0
   12a70:	beq	12a84 <__assert_fail@plt+0xd80>
   12a74:	movw	r0, #38843	; 0x97bb
   12a78:	movt	r0, #2
   12a7c:	mov	r1, r5
   12a80:	bl	118a8 <printf@plt>
   12a84:	mov	r4, #0
   12a88:	cmp	r5, #0
   12a8c:	bne	12af8 <__assert_fail@plt+0xdf4>
   12a90:	clz	r0, r6
   12a94:	lsr	r0, r0, #5
   12a98:	movw	r1, #49712	; 0xc230
   12a9c:	movt	r1, #3
   12aa0:	ldrd	r2, [r1]
   12aa4:	orrs	r1, r2, r3
   12aa8:	movwne	r1, #1
   12aac:	orr	r0, r0, r1
   12ab0:	ldr	r1, [sp, #104]	; 0x68
   12ab4:	clz	r1, r1
   12ab8:	lsr	r1, r1, #5
   12abc:	and	r4, r1, r0
   12ac0:	b	12af8 <__assert_fail@plt+0xdf4>
   12ac4:	bl	11b24 <__errno_location@plt>
   12ac8:	ldr	r5, [r0]
   12acc:	mov	r4, #0
   12ad0:	mov	r0, #0
   12ad4:	mov	r1, #8
   12ad8:	mov	r2, r9
   12adc:	bl	189b0 <__assert_fail@plt+0x6cac>
   12ae0:	mov	r3, r0
   12ae4:	movw	r2, #44964	; 0xafa4
   12ae8:	movt	r2, #2
   12aec:	mov	r0, #0
   12af0:	mov	r1, r5
   12af4:	bl	11a28 <error@plt>
   12af8:	mov	r0, r4
   12afc:	sub	sp, fp, #64	; 0x40
   12b00:	vpop	{d8-d11}
   12b04:	add	sp, sp, #4
   12b08:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12b0c:	mov	r4, #0
   12b10:	movw	r1, #38680	; 0x9718
   12b14:	movt	r1, #2
   12b18:	mov	r0, #0
   12b1c:	mov	r2, #5
   12b20:	bl	11980 <dcgettext@plt>
   12b24:	mov	r2, r0
   12b28:	mov	r0, #0
   12b2c:	mov	r1, #0
   12b30:	bl	11a28 <error@plt>
   12b34:	b	12af8 <__assert_fail@plt+0xdf4>
   12b38:	mov	r0, #1
   12b3c:	bl	12c3c <__assert_fail@plt+0xf38>
   12b40:	mov	r0, #0
   12b44:	bl	12c3c <__assert_fail@plt+0xf38>
   12b48:	movw	r1, #49696	; 0xc220
   12b4c:	movt	r1, #3
   12b50:	ldr	r2, [r1]
   12b54:	ldr	r1, [sp, #136]	; 0x88
   12b58:	str	r2, [sp]
   12b5c:	uxtb	r2, r6
   12b60:	movw	r3, #41572	; 0xa264
   12b64:	movt	r3, #2
   12b68:	bl	199c0 <__assert_fail@plt+0x7cbc>
   12b6c:	movw	r0, #38598	; 0x96c6
   12b70:	movt	r0, #2
   12b74:	movw	r1, #38613	; 0x96d5
   12b78:	movt	r1, #2
   12b7c:	movw	r3, #38622	; 0x96de
   12b80:	movt	r3, #2
   12b84:	movw	r2, #1613	; 0x64d
   12b88:	bl	11d04 <__assert_fail@plt>
   12b8c:	bl	11b24 <__errno_location@plt>
   12b90:	ldr	r4, [r0]
   12b94:	movw	r1, #38530	; 0x9682
   12b98:	movt	r1, #2
   12b9c:	mov	r0, #0
   12ba0:	mov	r2, #5
   12ba4:	bl	11980 <dcgettext@plt>
   12ba8:	mov	r2, r0
   12bac:	mov	r0, #1
   12bb0:	mov	r1, r4
   12bb4:	bl	11a28 <error@plt>
   12bb8:	movw	r1, #38654	; 0x96fe
   12bbc:	movt	r1, #2
   12bc0:	mov	r0, #0
   12bc4:	mov	r2, #5
   12bc8:	bl	11980 <dcgettext@plt>
   12bcc:	mov	r2, r0
   12bd0:	mov	r0, #0
   12bd4:	mov	r1, #0
   12bd8:	bl	11a28 <error@plt>
   12bdc:	mov	r0, #1
   12be0:	bl	12c3c <__assert_fail@plt+0xf38>
   12be4:	push	{r4, sl, fp, lr}
   12be8:	add	fp, sp, #8
   12bec:	mov	r1, #131072	; 0x20000
   12bf0:	bl	1501c <__assert_fail@plt+0x3318>
   12bf4:	mov	r4, r0
   12bf8:	cmp	r0, #0
   12bfc:	blt	12c24 <__assert_fail@plt+0xf20>
   12c00:	mov	r0, r4
   12c04:	mov	r1, #2
   12c08:	mov	r2, #1
   12c0c:	bl	19fe0 <__assert_fail@plt+0x82dc>
   12c10:	cmp	r0, #0
   12c14:	beq	12c24 <__assert_fail@plt+0xf20>
   12c18:	mov	r0, r4
   12c1c:	bl	11ce0 <close@plt>
   12c20:	mvn	r4, #0
   12c24:	mov	r0, r4
   12c28:	pop	{r4, sl, fp, pc}
   12c2c:	movw	r0, #49708	; 0xc22c
   12c30:	movt	r0, #3
   12c34:	ldr	r0, [r0]
   12c38:	b	1a22c <__assert_fail@plt+0x8528>
   12c3c:	push	{fp, lr}
   12c40:	mov	fp, sp
   12c44:	mov	r4, r0
   12c48:	cmp	r0, #0
   12c4c:	bne	12c9c <__assert_fail@plt+0xf98>
   12c50:	movw	r6, #49692	; 0xc21c
   12c54:	movt	r6, #3
   12c58:	ldr	r5, [r6]
   12c5c:	movw	r1, #39037	; 0x987d
   12c60:	movt	r1, #2
   12c64:	mov	r0, #0
   12c68:	mov	r2, #5
   12c6c:	bl	11980 <dcgettext@plt>
   12c70:	mov	r1, r0
   12c74:	movw	r7, #49820	; 0xc29c
   12c78:	movt	r7, #3
   12c7c:	ldr	r2, [r7]
   12c80:	mov	r0, r5
   12c84:	bl	11b0c <fprintf@plt>
   12c88:	ldr	r0, [r6]
   12c8c:	ldr	r1, [r7]
   12c90:	bl	14e24 <__assert_fail@plt+0x3120>
   12c94:	mov	r0, r4
   12c98:	bl	11ad0 <exit@plt>
   12c9c:	movw	r0, #49688	; 0xc218
   12ca0:	movt	r0, #3
   12ca4:	ldr	r5, [r0]
   12ca8:	movw	r1, #38998	; 0x9856
   12cac:	movt	r1, #2
   12cb0:	mov	r0, #0
   12cb4:	mov	r2, #5
   12cb8:	bl	11980 <dcgettext@plt>
   12cbc:	mov	r1, r0
   12cc0:	movw	r0, #49820	; 0xc29c
   12cc4:	movt	r0, #3
   12cc8:	ldr	r2, [r0]
   12ccc:	mov	r0, r5
   12cd0:	bl	11b0c <fprintf@plt>
   12cd4:	mov	r0, r4
   12cd8:	bl	11ad0 <exit@plt>
   12cdc:	push	{r4, r5, r6, sl, fp, lr}
   12ce0:	add	fp, sp, #16
   12ce4:	sub	sp, sp, #8
   12ce8:	mov	r4, r0
   12cec:	ldrb	r0, [r0]
   12cf0:	cmp	r0, #0
   12cf4:	beq	12dd8 <__assert_fail@plt+0x10d4>
   12cf8:	bl	11b24 <__errno_location@plt>
   12cfc:	mov	r5, r0
   12d00:	mov	r0, #0
   12d04:	str	r0, [r5]
   12d08:	add	r1, sp, #4
   12d0c:	mov	r0, r4
   12d10:	mov	r2, #10
   12d14:	bl	11ae8 <strtoul@plt>
   12d18:	cmp	r0, #0
   12d1c:	beq	12d8c <__assert_fail@plt+0x1088>
   12d20:	cmn	r0, #1
   12d24:	ldreq	r1, [r5]
   12d28:	cmpeq	r1, #34	; 0x22
   12d2c:	beq	12d98 <__assert_fail@plt+0x1094>
   12d30:	ldr	r1, [sp, #4]
   12d34:	ldrb	r1, [r1]
   12d38:	cmp	r1, #0
   12d3c:	movweq	r1, #49584	; 0xc1b0
   12d40:	movteq	r1, #3
   12d44:	streq	r0, [r1]
   12d48:	subeq	sp, fp, #16
   12d4c:	popeq	{r4, r5, r6, sl, fp, pc}
   12d50:	movw	r1, #39514	; 0x9a5a
   12d54:	movt	r1, #2
   12d58:	mov	r0, #0
   12d5c:	mov	r2, #5
   12d60:	bl	11980 <dcgettext@plt>
   12d64:	mov	r5, r0
   12d68:	mov	r0, #0
   12d6c:	mov	r1, #8
   12d70:	mov	r2, r4
   12d74:	bl	189b0 <__assert_fail@plt+0x6cac>
   12d78:	mov	r3, r0
   12d7c:	mov	r0, #1
   12d80:	mov	r1, #0
   12d84:	mov	r2, r5
   12d88:	bl	11a28 <error@plt>
   12d8c:	ldr	r1, [r5]
   12d90:	cmp	r1, #22
   12d94:	bne	12d30 <__assert_fail@plt+0x102c>
   12d98:	ldr	r5, [r5]
   12d9c:	movw	r1, #39514	; 0x9a5a
   12da0:	movt	r1, #2
   12da4:	mov	r0, #0
   12da8:	mov	r2, #5
   12dac:	bl	11980 <dcgettext@plt>
   12db0:	mov	r6, r0
   12db4:	mov	r0, #0
   12db8:	mov	r1, #8
   12dbc:	mov	r2, r4
   12dc0:	bl	189b0 <__assert_fail@plt+0x6cac>
   12dc4:	mov	r3, r0
   12dc8:	mov	r0, #1
   12dcc:	mov	r1, r5
   12dd0:	mov	r2, r6
   12dd4:	bl	11a28 <error@plt>
   12dd8:	movw	r1, #39453	; 0x9a1d
   12ddc:	movt	r1, #2
   12de0:	mov	r0, #0
   12de4:	mov	r2, #5
   12de8:	bl	11980 <dcgettext@plt>
   12dec:	mov	r2, r0
   12df0:	mov	r0, #1
   12df4:	mov	r1, #0
   12df8:	bl	11a28 <error@plt>
   12dfc:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12e00:	add	fp, sp, #28
   12e04:	sub	sp, sp, #4
   12e08:	vpush	{d8-d9}
   12e0c:	sub	sp, sp, #336	; 0x150
   12e10:	mov	r8, r2
   12e14:	str	r1, [sp, #28]
   12e18:	str	r0, [sp, #32]
   12e1c:	movw	r0, #49792	; 0xc280
   12e20:	movt	r0, #3
   12e24:	mov	r5, #0
   12e28:	str	r5, [r0]
   12e2c:	movw	r0, #49796	; 0xc284
   12e30:	movt	r0, #3
   12e34:	str	r5, [r0]
   12e38:	movw	r0, #49800	; 0xc288
   12e3c:	movt	r0, #3
   12e40:	str	r5, [r0]
   12e44:	movw	r0, #49804	; 0xc28c
   12e48:	movt	r0, #3
   12e4c:	strb	r5, [r0]
   12e50:	str	r5, [sp, #72]	; 0x48
   12e54:	str	r5, [sp, #44]	; 0x2c
   12e58:	str	r5, [sp, #48]	; 0x30
   12e5c:	str	r2, [sp, #68]	; 0x44
   12e60:	str	r3, [sp, #64]	; 0x40
   12e64:	mov	r0, #128	; 0x80
   12e68:	str	r0, [sp, #56]	; 0x38
   12e6c:	movw	r4, #49732	; 0xc244
   12e70:	movt	r4, #3
   12e74:	ldr	sl, [r4]
   12e78:	mov	r0, #128	; 0x80
   12e7c:	bl	195cc <__assert_fail@plt+0x78c8>
   12e80:	mov	r6, r0
   12e84:	str	r0, [sp, #52]	; 0x34
   12e88:	ldr	r3, [sp, #64]	; 0x40
   12e8c:	mov	r1, #1
   12e90:	mov	r2, #2
   12e94:	bl	11a04 <fread@plt>
   12e98:	mov	r7, r0
   12e9c:	str	r5, [sp, #36]	; 0x24
   12ea0:	ldr	r0, [sp, #68]	; 0x44
   12ea4:	add	r3, sp, #36	; 0x24
   12ea8:	mov	r1, r6
   12eac:	mov	r2, r7
   12eb0:	bl	135d4 <__assert_fail@plt+0x18d0>
   12eb4:	ldr	r6, [fp, #48]	; 0x30
   12eb8:	ldr	r1, [fp, #20]
   12ebc:	cmp	r1, #0
   12ec0:	orrne	r6, r6, #4194304	; 0x400000
   12ec4:	ldr	r1, [fp, #24]
   12ec8:	cmp	r0, #0
   12ecc:	beq	12f24 <__assert_fail@plt+0x1220>
   12ed0:	ldr	r7, [sp, #36]	; 0x24
   12ed4:	cmp	r7, #2
   12ed8:	blt	12f94 <__assert_fail@plt+0x1290>
   12edc:	mov	r4, #0
   12ee0:	movw	r1, #39564	; 0x9a8c
   12ee4:	movt	r1, #2
   12ee8:	mov	r0, #0
   12eec:	mov	r2, #5
   12ef0:	bl	11980 <dcgettext@plt>
   12ef4:	mov	r5, r0
   12ef8:	ldr	r2, [sp, #68]	; 0x44
   12efc:	mov	r0, #0
   12f00:	mov	r1, #8
   12f04:	bl	189b0 <__assert_fail@plt+0x6cac>
   12f08:	mov	r3, r0
   12f0c:	str	r7, [sp]
   12f10:	mov	r0, #0
   12f14:	mov	r1, #0
   12f18:	mov	r2, r5
   12f1c:	bl	11a28 <error@plt>
   12f20:	b	13508 <__assert_fail@plt+0x1804>
   12f24:	add	r0, sp, #40	; 0x28
   12f28:	mov	r4, #0
   12f2c:	mov	r1, #10
   12f30:	mov	r2, #0
   12f34:	bl	138a0 <__assert_fail@plt+0x1b9c>
   12f38:	ldr	r0, [sp, #52]	; 0x34
   12f3c:	ldr	r3, [sp, #64]	; 0x40
   12f40:	add	r0, r0, r7
   12f44:	rsb	r2, r7, #10
   12f48:	mov	r1, #1
   12f4c:	bl	11a04 <fread@plt>
   12f50:	add	r9, r0, r7
   12f54:	ldr	r0, [sp, #52]	; 0x34
   12f58:	mov	r1, r9
   12f5c:	bl	138ec <__assert_fail@plt+0x1be8>
   12f60:	cmp	r0, #0
   12f64:	beq	13004 <__assert_fail@plt+0x1300>
   12f68:	movw	r0, #14076	; 0x36fc
   12f6c:	movt	r0, #1
   12f70:	mov	r1, #0
   12f74:	bl	136ac <__assert_fail@plt+0x19a8>
   12f78:	movw	r0, #39873	; 0x9bc1
   12f7c:	movt	r0, #2
   12f80:	str	r0, [sp, #4]
   12f84:	str	sl, [sp, #12]
   12f88:	mov	r0, #0
   12f8c:	str	r0, [sp, #8]
   12f90:	b	13098 <__assert_fail@plt+0x1394>
   12f94:	cmp	r7, #1
   12f98:	bne	12fd4 <__assert_fail@plt+0x12d0>
   12f9c:	ldr	r0, [r4]
   12fa0:	cmp	r0, #2
   12fa4:	bne	1351c <__assert_fail@plt+0x1818>
   12fa8:	mov	r4, #0
   12fac:	movw	r1, #39637	; 0x9ad5
   12fb0:	movt	r1, #2
   12fb4:	mov	r0, #0
   12fb8:	mov	r2, #5
   12fbc:	bl	11980 <dcgettext@plt>
   12fc0:	mov	r2, r0
   12fc4:	mov	r0, #0
   12fc8:	mov	r1, #0
   12fcc:	bl	11a28 <error@plt>
   12fd0:	b	13508 <__assert_fail@plt+0x1804>
   12fd4:	str	sl, [sp, #12]
   12fd8:	movw	r0, #14076	; 0x36fc
   12fdc:	movt	r0, #1
   12fe0:	mov	r1, #0
   12fe4:	str	r1, [sp, #8]
   12fe8:	mov	r1, #0
   12fec:	bl	136ac <__assert_fail@plt+0x19a8>
   12ff0:	mov	r4, #1
   12ff4:	movw	r0, #39865	; 0x9bb9
   12ff8:	movt	r0, #2
   12ffc:	str	r0, [sp, #4]
   13000:	b	13098 <__assert_fail@plt+0x1394>
   13004:	add	r7, sp, #40	; 0x28
   13008:	mov	r4, #0
   1300c:	mov	r0, r7
   13010:	mov	r1, #256	; 0x100
   13014:	mov	r2, #0
   13018:	bl	138a0 <__assert_fail@plt+0x1b9c>
   1301c:	cmp	r9, #256	; 0x100
   13020:	bge	13048 <__assert_fail@plt+0x1344>
   13024:	ldr	r0, [sp, #52]	; 0x34
   13028:	ldr	r3, [sp, #64]	; 0x40
   1302c:	add	r0, r0, r9
   13030:	rsb	r2, r9, #256	; 0x100
   13034:	mov	r1, #1
   13038:	bl	11a04 <fread@plt>
   1303c:	add	r0, r0, r9
   13040:	cmp	r0, #256	; 0x100
   13044:	bne	13598 <__assert_fail@plt+0x1894>
   13048:	ldr	r0, [sp, #52]	; 0x34
   1304c:	ldrb	r1, [r0, r4, lsl #1]!
   13050:	add	r2, r7, r4
   13054:	strb	r1, [r2, #36]	; 0x24
   13058:	ldrb	r0, [r0, #1]
   1305c:	strb	r0, [r2, #164]	; 0xa4
   13060:	add	r4, r4, #1
   13064:	cmp	r4, #128	; 0x80
   13068:	bne	13048 <__assert_fail@plt+0x1344>
   1306c:	movw	r0, #14628	; 0x3924
   13070:	movt	r0, #1
   13074:	mov	r4, #0
   13078:	mov	r1, #0
   1307c:	bl	136ac <__assert_fail@plt+0x19a8>
   13080:	mov	r0, #1
   13084:	str	r0, [sp, #8]
   13088:	movw	r0, #39941	; 0x9c05
   1308c:	movt	r0, #2
   13090:	str	r0, [sp, #4]
   13094:	str	sl, [sp, #12]
   13098:	str	r4, [sp, #16]
   1309c:	ldr	r0, [fp, #28]
   130a0:	cmp	r0, #0
   130a4:	beq	130b8 <__assert_fail@plt+0x13b4>
   130a8:	movw	r0, #15072	; 0x3ae0
   130ac:	movt	r0, #1
   130b0:	mov	r1, #0
   130b4:	bl	136ac <__assert_fail@plt+0x19a8>
   130b8:	ldr	r0, [sp, #32]
   130bc:	cmp	r0, #1
   130c0:	blt	13204 <__assert_fail@plt+0x1500>
   130c4:	movw	r0, #15500	; 0x3c8c
   130c8:	movt	r0, #1
   130cc:	movw	r2, #15536	; 0x3cb0
   130d0:	movt	r2, #1
   130d4:	ldr	r1, [fp, #20]
   130d8:	cmp	r1, #0
   130dc:	movne	r2, r0
   130e0:	str	r2, [sp, #24]
   130e4:	movw	r0, #15316	; 0x3bd4
   130e8:	movt	r0, #1
   130ec:	movw	r1, #15408	; 0x3c30
   130f0:	movt	r1, #1
   130f4:	movne	r1, r0
   130f8:	str	r1, [sp, #20]
   130fc:	mov	r4, #0
   13100:	mov	r7, #1
   13104:	vmov.i32	q4, #0	; 0x00000000
   13108:	mov	r5, #0
   1310c:	movw	r0, #49804	; 0xc28c
   13110:	movt	r0, #3
   13114:	strb	r7, [r0]
   13118:	ldr	r0, [sp, #28]
   1311c:	ldr	r8, [r0, r5, lsl #2]
   13120:	ldr	r0, [fp, #44]	; 0x2c
   13124:	cmp	r0, #0
   13128:	beq	131a4 <__assert_fail@plt+0x14a0>
   1312c:	mov	r0, #32
   13130:	bl	195cc <__assert_fail@plt+0x78c8>
   13134:	mov	r9, r0
   13138:	add	r0, r0, #16
   1313c:	vst1.32	{d8-d9}, [r0]
   13140:	mov	sl, r9
   13144:	mov	r0, #20
   13148:	vst1.32	{d8-d9}, [sl], r0
   1314c:	mov	r0, r6
   13150:	bl	1a67c <__assert_fail@plt+0x8978>
   13154:	mov	r0, #100	; 0x64
   13158:	str	r0, [r9, #4]
   1315c:	mov	r0, #100	; 0x64
   13160:	bl	195cc <__assert_fail@plt+0x78c8>
   13164:	str	r0, [r9]
   13168:	str	r6, [r9, #12]
   1316c:	str	r4, [r9, #16]
   13170:	str	r4, [sl]
   13174:	mov	r0, r8
   13178:	bl	11af4 <strlen@plt>
   1317c:	mov	r1, r0
   13180:	mov	r0, r8
   13184:	mov	r2, r9
   13188:	bl	1a418 <__assert_fail@plt+0x8714>
   1318c:	cmp	r0, #0
   13190:	bne	13580 <__assert_fail@plt+0x187c>
   13194:	movw	r0, #15104	; 0x3b00
   13198:	movt	r0, #1
   1319c:	mov	r1, r9
   131a0:	b	131f0 <__assert_fail@plt+0x14ec>
   131a4:	mov	r0, r8
   131a8:	bl	13b54 <__assert_fail@plt+0x1e50>
   131ac:	cmp	r0, #0
   131b0:	beq	131cc <__assert_fail@plt+0x14c8>
   131b4:	ldr	r0, [fp, #20]
   131b8:	cmp	r0, #0
   131bc:	beq	131e4 <__assert_fail@plt+0x14e0>
   131c0:	movw	r0, #15220	; 0x3b74
   131c4:	movt	r0, #1
   131c8:	b	131ec <__assert_fail@plt+0x14e8>
   131cc:	bl	119f8 <__ctype_get_mb_cur_max@plt>
   131d0:	cmp	r0, #1
   131d4:	ldr	r0, [sp, #24]
   131d8:	ldr	r1, [sp, #20]
   131dc:	moveq	r0, r1
   131e0:	b	131ec <__assert_fail@plt+0x14e8>
   131e4:	movw	r0, #15268	; 0x3ba4
   131e8:	movt	r0, #1
   131ec:	mov	r1, r8
   131f0:	bl	136ac <__assert_fail@plt+0x19a8>
   131f4:	add	r5, r5, #1
   131f8:	ldr	r0, [sp, #32]
   131fc:	cmp	r5, r0
   13200:	blt	1310c <__assert_fail@plt+0x1408>
   13204:	movw	r0, #49796	; 0xc284
   13208:	movt	r0, #3
   1320c:	ldr	r5, [r0]
   13210:	ldr	r0, [sp, #12]
   13214:	cmp	r0, #2
   13218:	beq	13258 <__assert_fail@plt+0x1554>
   1321c:	cmp	r0, #1
   13220:	ldr	r6, [fp, #36]	; 0x24
   13224:	bne	132a8 <__assert_fail@plt+0x15a4>
   13228:	mov	r0, #1
   1322c:	movw	r1, #49804	; 0xc28c
   13230:	movt	r1, #3
   13234:	strb	r0, [r1]
   13238:	movw	r0, #49740	; 0xc24c
   1323c:	movt	r0, #3
   13240:	ldrb	r0, [r0]
   13244:	cmp	r0, #0
   13248:	beq	1328c <__assert_fail@plt+0x1588>
   1324c:	movw	r0, #15620	; 0x3d04
   13250:	movt	r0, #1
   13254:	b	132a0 <__assert_fail@plt+0x159c>
   13258:	mov	r0, #1
   1325c:	movw	r1, #49804	; 0xc28c
   13260:	movt	r1, #3
   13264:	strb	r0, [r1]
   13268:	movw	r0, #49740	; 0xc24c
   1326c:	movt	r0, #3
   13270:	ldrb	r0, [r0]
   13274:	cmp	r0, #0
   13278:	ldr	r6, [fp, #36]	; 0x24
   1327c:	beq	13298 <__assert_fail@plt+0x1594>
   13280:	movw	r0, #15716	; 0x3d64
   13284:	movt	r0, #1
   13288:	b	132a0 <__assert_fail@plt+0x159c>
   1328c:	movw	r0, #15572	; 0x3cd4
   13290:	movt	r0, #1
   13294:	b	132a0 <__assert_fail@plt+0x159c>
   13298:	movw	r0, #15668	; 0x3d34
   1329c:	movt	r0, #1
   132a0:	mov	r1, #0
   132a4:	bl	136ac <__assert_fail@plt+0x19a8>
   132a8:	cmp	r6, #0
   132ac:	beq	132c4 <__assert_fail@plt+0x15c0>
   132b0:	movw	r0, #15764	; 0x3d94
   132b4:	movt	r0, #1
   132b8:	movw	r1, #49744	; 0xc250
   132bc:	movt	r1, #3
   132c0:	bl	136ac <__assert_fail@plt+0x19a8>
   132c4:	ldr	r4, [fp, #32]
   132c8:	ldr	r0, [fp, #24]
   132cc:	cmp	r0, #0
   132d0:	beq	13304 <__assert_fail@plt+0x1600>
   132d4:	movw	r0, #49728	; 0xc240
   132d8:	movt	r0, #3
   132dc:	ldrb	r0, [r0]
   132e0:	cmp	r0, #1
   132e4:	bne	132f4 <__assert_fail@plt+0x15f0>
   132e8:	movw	r0, #16032	; 0x3ea0
   132ec:	movt	r0, #1
   132f0:	b	132fc <__assert_fail@plt+0x15f8>
   132f4:	movw	r0, #16144	; 0x3f10
   132f8:	movt	r0, #1
   132fc:	mov	r1, #0
   13300:	bl	136ac <__assert_fail@plt+0x19a8>
   13304:	cmp	r4, #0
   13308:	beq	13318 <__assert_fail@plt+0x1614>
   1330c:	movw	r0, #16208	; 0x3f50
   13310:	movt	r0, #1
   13314:	b	13320 <__assert_fail@plt+0x161c>
   13318:	movw	r0, #16264	; 0x3f88
   1331c:	movt	r0, #1
   13320:	movw	r1, #49712	; 0xc230
   13324:	movt	r1, #3
   13328:	bl	136ac <__assert_fail@plt+0x19a8>
   1332c:	ldr	r0, [sp, #32]
   13330:	cmp	r0, #2
   13334:	blt	13368 <__assert_fail@plt+0x1664>
   13338:	ldr	r1, [fp, #40]	; 0x28
   1333c:	ldr	r0, [r5, #8]
   13340:	movw	r2, #49800	; 0xc288
   13344:	movt	r2, #3
   13348:	str	r0, [r2]
   1334c:	movw	r2, #16392	; 0x4008
   13350:	movt	r2, #1
   13354:	movw	r0, #16296	; 0x3fa8
   13358:	movt	r0, #1
   1335c:	cmp	r1, #0
   13360:	moveq	r0, r2
   13364:	b	13370 <__assert_fail@plt+0x166c>
   13368:	movw	r0, #16488	; 0x4068
   1336c:	movt	r0, #1
   13370:	ldr	r5, [sp, #16]
   13374:	movw	r4, #49808	; 0xc290
   13378:	movt	r4, #3
   1337c:	str	r0, [r4]
   13380:	cmp	r6, #0
   13384:	beq	133a8 <__assert_fail@plt+0x16a4>
   13388:	movw	r1, #39945	; 0x9c09
   1338c:	movt	r1, #2
   13390:	mov	r0, #0
   13394:	mov	r2, #5
   13398:	bl	11980 <dcgettext@plt>
   1339c:	ldr	r1, [sp, #68]	; 0x44
   133a0:	ldr	r2, [sp, #4]
   133a4:	bl	118a8 <printf@plt>
   133a8:	ldr	r0, [sp, #64]	; 0x40
   133ac:	bl	11cd4 <getc@plt>
   133b0:	str	r0, [sp, #40]	; 0x28
   133b4:	cmp	r5, #0
   133b8:	cmnne	r0, #1
   133bc:	bne	133cc <__assert_fail@plt+0x16c8>
   133c0:	cmn	r0, #1
   133c4:	bne	133dc <__assert_fail@plt+0x16d8>
   133c8:	b	133fc <__assert_fail@plt+0x16f8>
   133cc:	ldr	r1, [sp, #64]	; 0x40
   133d0:	bl	11b18 <ungetc@plt>
   133d4:	mov	r0, #0
   133d8:	str	r0, [sp, #40]	; 0x28
   133dc:	add	r5, sp, #40	; 0x28
   133e0:	ldr	r1, [r4]
   133e4:	mov	r0, r5
   133e8:	blx	r1
   133ec:	cmp	r0, #8
   133f0:	ldrne	r0, [sp, #40]	; 0x28
   133f4:	cmnne	r0, #1
   133f8:	bne	133e0 <__assert_fail@plt+0x16dc>
   133fc:	cmp	r6, #0
   13400:	beq	134b4 <__assert_fail@plt+0x17b0>
   13404:	ldr	r4, [fp, #12]
   13408:	ldr	r5, [fp, #8]
   1340c:	ldr	r0, [sp, #8]
   13410:	cmp	r0, #0
   13414:	beq	13498 <__assert_fail@plt+0x1794>
   13418:	movw	r1, #39979	; 0x9c2b
   1341c:	movt	r1, #2
   13420:	mov	r0, #0
   13424:	mov	r2, #5
   13428:	bl	11980 <dcgettext@plt>
   1342c:	mov	r6, r0
   13430:	movw	r1, #40034	; 0x9c62
   13434:	movt	r1, #2
   13438:	mov	r0, #0
   1343c:	mov	r2, #5
   13440:	bl	11980 <dcgettext@plt>
   13444:	mov	r1, r0
   13448:	ldr	r0, [sp, #72]	; 0x48
   1344c:	cmp	r0, #2
   13450:	beq	13470 <__assert_fail@plt+0x176c>
   13454:	cmp	r0, #1
   13458:	bne	13480 <__assert_fail@plt+0x177c>
   1345c:	movw	r0, #44964	; 0xafa4
   13460:	movt	r0, #2
   13464:	mov	r1, r6
   13468:	bl	118a8 <printf@plt>
   1346c:	b	13498 <__assert_fail@plt+0x1794>
   13470:	movw	r0, #44964	; 0xafa4
   13474:	movt	r0, #2
   13478:	bl	118a8 <printf@plt>
   1347c:	b	13498 <__assert_fail@plt+0x1794>
   13480:	movw	r1, #40086	; 0x9c96
   13484:	movt	r1, #2
   13488:	mov	r0, #0
   1348c:	mov	r2, #5
   13490:	bl	11980 <dcgettext@plt>
   13494:	bl	118a8 <printf@plt>
   13498:	ldr	r2, [fp, #16]
   1349c:	orrs	r0, r5, r4
   134a0:	cmpeq	r2, #0
   134a4:	beq	134b4 <__assert_fail@plt+0x17b0>
   134a8:	ldr	r0, [sp, #32]
   134ac:	mov	r1, r5
   134b0:	bl	14088 <__assert_fail@plt+0x2384>
   134b4:	ldr	r0, [sp, #64]	; 0x40
   134b8:	bl	11908 <ferror@plt>
   134bc:	cmp	r0, #0
   134c0:	beq	134fc <__assert_fail@plt+0x17f8>
   134c4:	bl	11b24 <__errno_location@plt>
   134c8:	ldr	r5, [r0]
   134cc:	ldr	r2, [sp, #68]	; 0x44
   134d0:	mov	r4, #0
   134d4:	mov	r0, #0
   134d8:	mov	r1, #8
   134dc:	bl	189b0 <__assert_fail@plt+0x6cac>
   134e0:	mov	r3, r0
   134e4:	movw	r2, #44964	; 0xafa4
   134e8:	movt	r2, #2
   134ec:	mov	r0, #0
   134f0:	mov	r1, r5
   134f4:	bl	11a28 <error@plt>
   134f8:	b	13508 <__assert_fail@plt+0x1804>
   134fc:	movw	r0, #49712	; 0xc230
   13500:	movt	r0, #3
   13504:	ldr	r4, [r0, #8]
   13508:	mov	r0, r4
   1350c:	sub	sp, fp, #48	; 0x30
   13510:	vpop	{d8-d9}
   13514:	add	sp, sp, #4
   13518:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1351c:	ldr	r0, [fp, #36]	; 0x24
   13520:	orrs	r0, r0, r1
   13524:	cmpne	sl, #1
   13528:	bne	13538 <__assert_fail@plt+0x1834>
   1352c:	mov	r0, #1
   13530:	str	r0, [sp, #12]
   13534:	b	12fd8 <__assert_fail@plt+0x12d4>
   13538:	mov	r0, #1
   1353c:	str	r0, [sp, #12]
   13540:	movw	r1, #39809	; 0x9b81
   13544:	movt	r1, #2
   13548:	mov	r0, #0
   1354c:	mov	r2, #5
   13550:	bl	11980 <dcgettext@plt>
   13554:	mov	r7, r0
   13558:	ldr	r2, [sp, #68]	; 0x44
   1355c:	mov	r0, #0
   13560:	mov	r1, #8
   13564:	bl	189b0 <__assert_fail@plt+0x6cac>
   13568:	mov	r3, r0
   1356c:	mov	r0, #0
   13570:	mov	r1, #0
   13574:	mov	r2, r7
   13578:	bl	11a28 <error@plt>
   1357c:	b	12fd8 <__assert_fail@plt+0x12d4>
   13580:	mov	r3, r0
   13584:	movw	r2, #44964	; 0xafa4
   13588:	movt	r2, #2
   1358c:	mov	r0, #1
   13590:	mov	r1, #0
   13594:	bl	11a28 <error@plt>
   13598:	movw	r1, #39886	; 0x9bce
   1359c:	movt	r1, #2
   135a0:	mov	r0, #0
   135a4:	mov	r2, #5
   135a8:	bl	11980 <dcgettext@plt>
   135ac:	mov	r4, r0
   135b0:	mov	r0, #0
   135b4:	mov	r1, #8
   135b8:	mov	r2, r8
   135bc:	bl	189b0 <__assert_fail@plt+0x6cac>
   135c0:	mov	r3, r0
   135c4:	mov	r0, #1
   135c8:	mov	r1, #0
   135cc:	mov	r2, r4
   135d0:	bl	11a28 <error@plt>
   135d4:	push	{r4, r5, r6, r7, fp, lr}
   135d8:	add	fp, sp, #16
   135dc:	sub	sp, sp, #8
   135e0:	cmp	r2, #3
   135e4:	bcs	1368c <__assert_fail@plt+0x1988>
   135e8:	mov	r4, #0
   135ec:	cmp	r2, #2
   135f0:	bne	13680 <__assert_fail@plt+0x197c>
   135f4:	mov	r5, r1
   135f8:	mov	r6, r0
   135fc:	ldrb	r0, [r1, #1]
   13600:	cmp	r0, #0
   13604:	bne	13680 <__assert_fail@plt+0x197c>
   13608:	mov	r7, r3
   1360c:	bl	11ac4 <__ctype_b_loc@plt>
   13610:	ldrb	r1, [r5]
   13614:	ldr	r0, [r0]
   13618:	add	r0, r0, r1, lsl #1
   1361c:	ldrb	r0, [r0, #1]
   13620:	tst	r0, #8
   13624:	beq	13680 <__assert_fail@plt+0x197c>
   13628:	sub	r0, r1, #48	; 0x30
   1362c:	str	r0, [r7]
   13630:	mov	r4, #1
   13634:	cmp	r1, #50	; 0x32
   13638:	bcc	13680 <__assert_fail@plt+0x197c>
   1363c:	movw	r1, #40228	; 0x9d24
   13640:	movt	r1, #2
   13644:	mov	r0, #0
   13648:	mov	r2, #5
   1364c:	bl	11980 <dcgettext@plt>
   13650:	mov	r7, r0
   13654:	mov	r0, #0
   13658:	mov	r1, #8
   1365c:	mov	r2, r6
   13660:	bl	189b0 <__assert_fail@plt+0x6cac>
   13664:	mov	r3, r0
   13668:	ldrb	r0, [r5, #1]
   1366c:	str	r0, [sp]
   13670:	mov	r0, #0
   13674:	mov	r1, #0
   13678:	mov	r2, r7
   1367c:	bl	11a28 <error@plt>
   13680:	mov	r0, r4
   13684:	sub	sp, fp, #16
   13688:	pop	{r4, r5, r6, r7, fp, pc}
   1368c:	movw	r0, #40144	; 0x9cd0
   13690:	movt	r0, #2
   13694:	movw	r1, #38613	; 0x96d5
   13698:	movt	r1, #2
   1369c:	movw	r3, #40153	; 0x9cd9
   136a0:	movt	r3, #2
   136a4:	movw	r2, #935	; 0x3a7
   136a8:	bl	11d04 <__assert_fail@plt>
   136ac:	push	{r4, r5, fp, lr}
   136b0:	add	fp, sp, #8
   136b4:	mov	r4, r1
   136b8:	mov	r5, r0
   136bc:	mov	r0, #12
   136c0:	bl	195cc <__assert_fail@plt+0x78c8>
   136c4:	mov	r1, #0
   136c8:	str	r5, [r0]
   136cc:	str	r4, [r0, #4]
   136d0:	str	r1, [r0, #8]
   136d4:	movw	r1, #49796	; 0xc284
   136d8:	movt	r1, #3
   136dc:	ldr	r2, [r1]
   136e0:	movw	r3, #49792	; 0xc280
   136e4:	movt	r3, #3
   136e8:	cmp	r2, #0
   136ec:	addne	r3, r2, #8
   136f0:	str	r0, [r3]
   136f4:	str	r0, [r1]
   136f8:	pop	{r4, r5, fp, pc}
   136fc:	push	{r4, r5, fp, lr}
   13700:	add	fp, sp, #8
   13704:	mov	r4, r0
   13708:	ldr	r0, [r0]
   1370c:	cmp	r0, #128	; 0x80
   13710:	bne	13720 <__assert_fail@plt+0x1a1c>
   13714:	ldr	r0, [r4, #24]
   13718:	bl	143f0 <__assert_fail@plt+0x26ec>
   1371c:	b	13730 <__assert_fail@plt+0x1a2c>
   13720:	blt	13730 <__assert_fail@plt+0x1a2c>
   13724:	sub	r1, r0, #256	; 0x100
   13728:	ldr	r0, [r4, #4]
   1372c:	b	13734 <__assert_fail@plt+0x1a30>
   13730:	ldr	r1, [r4, #4]
   13734:	add	r3, r1, r0
   13738:	str	r3, [r4, #4]
   1373c:	cmp	r3, #0
   13740:	blt	13824 <__assert_fail@plt+0x1b20>
   13744:	ldr	r0, [r4, #8]
   13748:	cmp	r3, r0
   1374c:	bgt	13824 <__assert_fail@plt+0x1b20>
   13750:	ldr	r2, [r4, #24]
   13754:	add	r0, r4, #12
   13758:	add	r1, r4, #16
   1375c:	bl	1441c <__assert_fail@plt+0x2718>
   13760:	cmp	r0, #1
   13764:	movlt	r0, #8
   13768:	poplt	{r4, r5, fp, pc}
   1376c:	mov	r5, r0
   13770:	ldr	r0, [r4, #24]
   13774:	bl	11cd4 <getc@plt>
   13778:	str	r0, [r4]
   1377c:	ldr	r0, [r4, #4]
   13780:	add	r0, r0, r5
   13784:	subs	r0, r0, #1
   13788:	str	r0, [r4, #8]
   1378c:	bgt	137cc <__assert_fail@plt+0x1ac8>
   13790:	movw	r1, #40365	; 0x9dad
   13794:	movt	r1, #2
   13798:	mov	r0, #0
   1379c:	mov	r2, #5
   137a0:	bl	11980 <dcgettext@plt>
   137a4:	mov	r5, r0
   137a8:	ldr	r2, [r4, #28]
   137ac:	mov	r0, #0
   137b0:	mov	r1, #8
   137b4:	bl	189b0 <__assert_fail@plt+0x6cac>
   137b8:	mov	r3, r0
   137bc:	mov	r0, #1
   137c0:	mov	r1, #0
   137c4:	mov	r2, r5
   137c8:	bl	11a28 <error@plt>
   137cc:	ldr	r2, [r4, #8]
   137d0:	ldr	r0, [r4, #12]
   137d4:	add	r1, r0, r2
   137d8:	ldrb	r3, [r1, #-1]
   137dc:	cmp	r3, #0
   137e0:	beq	13860 <__assert_fail@plt+0x1b5c>
   137e4:	ldrb	r2, [r0, r2]
   137e8:	cmp	r2, #0
   137ec:	bne	13880 <__assert_fail@plt+0x1b7c>
   137f0:	ldrb	r1, [r1, #1]
   137f4:	cmp	r1, #0
   137f8:	streq	r0, [r4, #20]
   137fc:	moveq	r0, #1
   13800:	popeq	{r4, r5, fp, pc}
   13804:	movw	r0, #40489	; 0x9e29
   13808:	movt	r0, #2
   1380c:	movw	r1, #38613	; 0x96d5
   13810:	movt	r1, #2
   13814:	movw	r3, #40419	; 0x9de3
   13818:	movt	r3, #2
   1381c:	movw	r2, #570	; 0x23a
   13820:	bl	11d04 <__assert_fail@plt>
   13824:	movw	r1, #40365	; 0x9dad
   13828:	movt	r1, #2
   1382c:	mov	r0, #0
   13830:	mov	r2, #5
   13834:	bl	11980 <dcgettext@plt>
   13838:	mov	r5, r0
   1383c:	ldr	r2, [r4, #28]
   13840:	mov	r0, #0
   13844:	mov	r1, #8
   13848:	bl	189b0 <__assert_fail@plt+0x6cac>
   1384c:	mov	r3, r0
   13850:	mov	r0, #1
   13854:	mov	r1, #0
   13858:	mov	r2, r5
   1385c:	bl	11a28 <error@plt>
   13860:	movw	r0, #40406	; 0x9dd6
   13864:	movt	r0, #2
   13868:	movw	r1, #38613	; 0x96d5
   1386c:	movt	r1, #2
   13870:	movw	r3, #40419	; 0x9de3
   13874:	movt	r3, #2
   13878:	mov	r2, #568	; 0x238
   1387c:	bl	11d04 <__assert_fail@plt>
   13880:	movw	r0, #40476	; 0x9e1c
   13884:	movt	r0, #2
   13888:	movw	r1, #38613	; 0x96d5
   1388c:	movt	r1, #2
   13890:	movw	r3, #40419	; 0x9de3
   13894:	movt	r3, #2
   13898:	movw	r2, #569	; 0x239
   1389c:	bl	11d04 <__assert_fail@plt>
   138a0:	push	{r4, sl, fp, lr}
   138a4:	add	fp, sp, #8
   138a8:	mov	r4, r0
   138ac:	mvn	r0, r1
   138b0:	cmp	r0, r2
   138b4:	bcc	138e4 <__assert_fail@plt+0x1be0>
   138b8:	add	r0, r2, r1
   138bc:	mov	r1, r4
   138c0:	ldr	r2, [r1, #16]!
   138c4:	cmp	r2, r0
   138c8:	popcs	{r4, sl, fp, pc}
   138cc:	str	r0, [r4, #16]
   138d0:	ldr	r0, [r4, #12]
   138d4:	mov	r2, #1
   138d8:	bl	1969c <__assert_fail@plt+0x7998>
   138dc:	str	r0, [r4, #12]
   138e0:	pop	{r4, sl, fp, pc}
   138e4:	mov	r0, r4
   138e8:	bl	144ec <__assert_fail@plt+0x27e8>
   138ec:	mov	r2, #0
   138f0:	cmp	r1, #10
   138f4:	bcc	1391c <__assert_fail@plt+0x1c18>
   138f8:	push	{fp, lr}
   138fc:	mov	fp, sp
   13900:	movw	r1, #41945	; 0xa3d9
   13904:	movt	r1, #2
   13908:	mov	r2, #10
   1390c:	bl	11974 <memcmp@plt>
   13910:	clz	r0, r0
   13914:	lsr	r2, r0, #5
   13918:	pop	{fp, lr}
   1391c:	mov	r0, r2
   13920:	bx	lr
   13924:	push	{r4, r5, r6, sl, fp, lr}
   13928:	add	fp, sp, #16
   1392c:	mov	r4, r0
   13930:	ldr	r0, [r0]
   13934:	cmn	r0, #1
   13938:	moveq	r6, #8
   1393c:	moveq	r0, r6
   13940:	popeq	{r4, r5, r6, sl, fp, pc}
   13944:	cmp	r0, #30
   13948:	bne	139b4 <__assert_fail@plt+0x1cb0>
   1394c:	ldr	r5, [r4, #4]
   13950:	ldr	r2, [r4, #8]
   13954:	ldr	r0, [r4, #24]
   13958:	ldr	r1, [r4, #28]
   1395c:	sub	r3, r5, #14
   13960:	str	r3, [r4, #4]
   13964:	cmp	r5, #13
   13968:	subgt	r2, r2, r3
   1396c:	add	r3, r4, #32
   13970:	bl	14570 <__assert_fail@plt+0x286c>
   13974:	rsb	r1, r5, #14
   13978:	cmp	r0, r1
   1397c:	blt	13aa0 <__assert_fail@plt+0x1d9c>
   13980:	ldr	r1, [r4, #4]
   13984:	add	r0, r1, r0
   13988:	str	r0, [r4, #4]
   1398c:	cmn	r0, #1
   13990:	bgt	139cc <__assert_fail@plt+0x1cc8>
   13994:	movw	r0, #40705	; 0x9f01
   13998:	movt	r0, #2
   1399c:	movw	r1, #38613	; 0x96d5
   139a0:	movt	r1, #2
   139a4:	movw	r3, #40653	; 0x9ecd
   139a8:	movt	r3, #2
   139ac:	mov	r2, #480	; 0x1e0
   139b0:	bl	11d04 <__assert_fail@plt>
   139b4:	ldr	r1, [r4, #4]
   139b8:	add	r0, r0, r1
   139bc:	sub	r0, r0, #14
   139c0:	str	r0, [r4, #4]
   139c4:	cmn	r0, #1
   139c8:	ble	13ac0 <__assert_fail@plt+0x1dbc>
   139cc:	ldr	r5, [r4, #4]
   139d0:	ldr	r0, [r4, #24]
   139d4:	bl	11cd4 <getc@plt>
   139d8:	str	r0, [r4]
   139dc:	cmp	r0, #31
   139e0:	blt	13a6c <__assert_fail@plt+0x1d68>
   139e4:	cmp	r0, #127	; 0x7f
   139e8:	bgt	13a0c <__assert_fail@plt+0x1d08>
   139ec:	mov	r6, #1
   139f0:	mov	r0, r4
   139f4:	mov	r1, r5
   139f8:	mov	r2, #1
   139fc:	bl	138a0 <__assert_fail@plt+0x1b9c>
   13a00:	ldr	r0, [r4]
   13a04:	mov	r1, r5
   13a08:	b	13a4c <__assert_fail@plt+0x1d48>
   13a0c:	mov	r6, #2
   13a10:	mov	r0, r4
   13a14:	mov	r1, r5
   13a18:	mov	r2, #2
   13a1c:	bl	138a0 <__assert_fail@plt+0x1b9c>
   13a20:	ldr	r0, [r4]
   13a24:	ldr	r1, [r4, #12]
   13a28:	and	r0, r0, #127	; 0x7f
   13a2c:	str	r0, [r4]
   13a30:	add	r0, r4, r0
   13a34:	ldrb	r0, [r0, #36]	; 0x24
   13a38:	strb	r0, [r1, r5]
   13a3c:	ldr	r0, [r4]
   13a40:	add	r0, r4, r0
   13a44:	ldrb	r0, [r0, #164]	; 0xa4
   13a48:	add	r1, r5, #1
   13a4c:	ldr	r2, [r4, #12]
   13a50:	strb	r0, [r2, r1]
   13a54:	ldr	r0, [r4, #24]
   13a58:	bl	11cd4 <getc@plt>
   13a5c:	str	r0, [r4]
   13a60:	add	r5, r5, r6
   13a64:	cmp	r0, #30
   13a68:	bgt	139e4 <__assert_fail@plt+0x1ce0>
   13a6c:	mov	r6, #1
   13a70:	mov	r0, r4
   13a74:	mov	r1, r5
   13a78:	mov	r2, #1
   13a7c:	bl	138a0 <__assert_fail@plt+0x1b9c>
   13a80:	ldr	r0, [r4, #12]
   13a84:	mov	r1, #0
   13a88:	strb	r1, [r0, r5]
   13a8c:	str	r5, [r4, #8]
   13a90:	ldr	r0, [r4, #12]
   13a94:	str	r0, [r4, #20]
   13a98:	mov	r0, r6
   13a9c:	pop	{r4, r5, r6, sl, fp, pc}
   13aa0:	movw	r0, #40638	; 0x9ebe
   13aa4:	movt	r0, #2
   13aa8:	movw	r1, #38613	; 0x96d5
   13aac:	movt	r1, #2
   13ab0:	movw	r3, #40653	; 0x9ecd
   13ab4:	movt	r3, #2
   13ab8:	movw	r2, #478	; 0x1de
   13abc:	bl	11d04 <__assert_fail@plt>
   13ac0:	movw	r0, #40705	; 0x9f01
   13ac4:	movt	r0, #2
   13ac8:	movw	r1, #38613	; 0x96d5
   13acc:	movt	r1, #2
   13ad0:	movw	r3, #40653	; 0x9ecd
   13ad4:	movt	r3, #2
   13ad8:	movw	r2, #485	; 0x1e5
   13adc:	bl	11d04 <__assert_fail@plt>
   13ae0:	push	{r4, sl, fp, lr}
   13ae4:	add	fp, sp, #8
   13ae8:	mov	r4, r0
   13aec:	ldr	r0, [r0, #12]
   13af0:	bl	14e90 <__assert_fail@plt+0x318c>
   13af4:	str	r0, [r4, #20]
   13af8:	mov	r0, #1
   13afc:	pop	{r4, sl, fp, pc}
   13b00:	push	{r4, r5, fp, lr}
   13b04:	add	fp, sp, #8
   13b08:	sub	sp, sp, #8
   13b0c:	mov	r4, r1
   13b10:	ldr	r5, [r0, #20]
   13b14:	mov	r0, r5
   13b18:	bl	11af4 <strlen@plt>
   13b1c:	mov	r2, r0
   13b20:	mov	r0, #0
   13b24:	str	r2, [sp]
   13b28:	str	r0, [sp, #4]
   13b2c:	mov	r0, r4
   13b30:	mov	r1, r5
   13b34:	mov	r3, #0
   13b38:	bl	1b8ec <__assert_fail@plt+0x9be8>
   13b3c:	mov	r1, #2
   13b40:	cmp	r0, #0
   13b44:	movwlt	r1, #4
   13b48:	mov	r0, r1
   13b4c:	sub	sp, fp, #8
   13b50:	pop	{r4, r5, fp, pc}
   13b54:	push	{fp, lr}
   13b58:	mov	fp, sp
   13b5c:	movw	r1, #40726	; 0x9f16
   13b60:	movt	r1, #2
   13b64:	bl	11c68 <strpbrk@plt>
   13b68:	cmp	r0, #0
   13b6c:	movwne	r0, #1
   13b70:	pop	{fp, pc}
   13b74:	push	{fp, lr}
   13b78:	mov	fp, sp
   13b7c:	mov	r2, r1
   13b80:	ldr	r1, [r0, #20]
   13b84:	mov	r0, r2
   13b88:	mov	r2, #16
   13b8c:	bl	11a34 <fnmatch@plt>
   13b90:	mov	r1, #4
   13b94:	cmp	r0, #0
   13b98:	movweq	r1, #2
   13b9c:	mov	r0, r1
   13ba0:	pop	{fp, pc}
   13ba4:	push	{fp, lr}
   13ba8:	mov	fp, sp
   13bac:	mov	r2, r1
   13bb0:	ldr	r1, [r0, #20]
   13bb4:	mov	r0, r2
   13bb8:	mov	r2, #0
   13bbc:	bl	11a34 <fnmatch@plt>
   13bc0:	mov	r1, #4
   13bc4:	cmp	r0, #0
   13bc8:	movweq	r1, #2
   13bcc:	mov	r0, r1
   13bd0:	pop	{fp, pc}
   13bd4:	push	{r4, r5, fp, lr}
   13bd8:	add	fp, sp, #8
   13bdc:	mov	r4, r1
   13be0:	mov	r5, r0
   13be4:	bl	119f8 <__ctype_get_mb_cur_max@plt>
   13be8:	cmp	r0, #1
   13bec:	bne	13c10 <__assert_fail@plt+0x1f0c>
   13bf0:	ldr	r0, [r5, #20]
   13bf4:	mov	r1, r4
   13bf8:	bl	27068 <__assert_fail@plt+0x15364>
   13bfc:	mov	r1, #2
   13c00:	cmp	r0, #0
   13c04:	movweq	r1, #4
   13c08:	mov	r0, r1
   13c0c:	pop	{r4, r5, fp, pc}
   13c10:	movw	r0, #40732	; 0x9f1c
   13c14:	movt	r0, #2
   13c18:	movw	r1, #38613	; 0x96d5
   13c1c:	movt	r1, #2
   13c20:	movw	r3, #40748	; 0x9f2c
   13c24:	movt	r3, #2
   13c28:	movw	r2, #714	; 0x2ca
   13c2c:	bl	11d04 <__assert_fail@plt>
   13c30:	push	{r4, r5, fp, lr}
   13c34:	add	fp, sp, #8
   13c38:	mov	r4, r1
   13c3c:	mov	r5, r0
   13c40:	bl	119f8 <__ctype_get_mb_cur_max@plt>
   13c44:	cmp	r0, #1
   13c48:	bne	13c6c <__assert_fail@plt+0x1f68>
   13c4c:	ldr	r0, [r5, #20]
   13c50:	mov	r1, r4
   13c54:	bl	27cd0 <__assert_fail@plt+0x15fcc>
   13c58:	mov	r1, #2
   13c5c:	cmp	r0, #0
   13c60:	movweq	r1, #4
   13c64:	mov	r0, r1
   13c68:	pop	{r4, r5, fp, pc}
   13c6c:	movw	r0, #40732	; 0x9f1c
   13c70:	movt	r0, #2
   13c74:	movw	r1, #38613	; 0x96d5
   13c78:	movt	r1, #2
   13c7c:	movw	r3, #40821	; 0x9f75
   13c80:	movt	r3, #2
   13c84:	movw	r2, #690	; 0x2b2
   13c88:	bl	11d04 <__assert_fail@plt>
   13c8c:	push	{fp, lr}
   13c90:	mov	fp, sp
   13c94:	ldr	r0, [r0, #20]
   13c98:	bl	15b5c <__assert_fail@plt+0x3e58>
   13c9c:	mov	r1, #2
   13ca0:	cmp	r0, #0
   13ca4:	movweq	r1, #4
   13ca8:	mov	r0, r1
   13cac:	pop	{fp, pc}
   13cb0:	push	{fp, lr}
   13cb4:	mov	fp, sp
   13cb8:	ldr	r0, [r0, #20]
   13cbc:	bl	16830 <__assert_fail@plt+0x4b2c>
   13cc0:	mov	r1, #2
   13cc4:	cmp	r0, #0
   13cc8:	movweq	r1, #4
   13ccc:	mov	r0, r1
   13cd0:	pop	{fp, pc}
   13cd4:	push	{fp, lr}
   13cd8:	mov	fp, sp
   13cdc:	sub	sp, sp, #104	; 0x68
   13ce0:	ldr	r0, [r0, #12]
   13ce4:	mov	r1, sp
   13ce8:	bl	29574 <__assert_fail@plt+0x17870>
   13cec:	mov	r1, #4
   13cf0:	cmp	r0, #0
   13cf4:	movweq	r1, #1
   13cf8:	mov	r0, r1
   13cfc:	mov	sp, fp
   13d00:	pop	{fp, pc}
   13d04:	push	{fp, lr}
   13d08:	mov	fp, sp
   13d0c:	sub	sp, sp, #104	; 0x68
   13d10:	ldr	r0, [r0, #12]
   13d14:	mov	r1, sp
   13d18:	bl	29594 <__assert_fail@plt+0x17890>
   13d1c:	mov	r1, #4
   13d20:	cmp	r0, #0
   13d24:	movweq	r1, #1
   13d28:	mov	r0, r1
   13d2c:	mov	sp, fp
   13d30:	pop	{fp, pc}
   13d34:	push	{fp, lr}
   13d38:	mov	fp, sp
   13d3c:	sub	sp, sp, #104	; 0x68
   13d40:	ldr	r0, [r0, #12]
   13d44:	mov	r1, sp
   13d48:	bl	29574 <__assert_fail@plt+0x17870>
   13d4c:	mov	r1, #1
   13d50:	cmp	r0, #0
   13d54:	movweq	r1, #4
   13d58:	mov	r0, r1
   13d5c:	mov	sp, fp
   13d60:	pop	{fp, pc}
   13d64:	push	{fp, lr}
   13d68:	mov	fp, sp
   13d6c:	sub	sp, sp, #104	; 0x68
   13d70:	ldr	r0, [r0, #12]
   13d74:	mov	r1, sp
   13d78:	bl	29594 <__assert_fail@plt+0x17890>
   13d7c:	mov	r1, #1
   13d80:	cmp	r0, #0
   13d84:	movweq	r1, #4
   13d88:	mov	r0, r1
   13d8c:	mov	sp, fp
   13d90:	pop	{fp, pc}
   13d94:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13d98:	add	fp, sp, #28
   13d9c:	sub	sp, sp, #4
   13da0:	mov	r9, r1
   13da4:	ldr	r5, [r0, #12]
   13da8:	mov	r0, r5
   13dac:	bl	11af4 <strlen@plt>
   13db0:	add	r7, r9, #8
   13db4:	ldm	r7, {r1, r2, r3, r7}
   13db8:	adds	r1, r1, #1
   13dbc:	adc	r2, r2, #0
   13dc0:	adds	r0, r3, r0
   13dc4:	adc	r3, r7, #0
   13dc8:	str	r1, [r9, #8]
   13dcc:	str	r2, [r9, #12]
   13dd0:	str	r0, [r9, #16]
   13dd4:	str	r3, [r9, #20]
   13dd8:	ldrb	r1, [r5]
   13ddc:	cmp	r1, #0
   13de0:	beq	13e94 <__assert_fail@plt+0x2190>
   13de4:	add	r5, r5, #1
   13de8:	mov	r6, #0
   13dec:	mov	r8, #1
   13df0:	mov	r4, #0
   13df4:	mov	sl, #0
   13df8:	sxtb	r0, r1
   13dfc:	cmp	r0, #0
   13e00:	movwlt	sl, #1
   13e04:	uxtb	r7, r1
   13e08:	cmp	r7, #10
   13e0c:	mov	r2, #1
   13e10:	mov	r0, #1
   13e14:	beq	13e38 <__assert_fail@plt+0x2134>
   13e18:	bl	11ac4 <__ctype_b_loc@plt>
   13e1c:	ldr	r0, [r0]
   13e20:	add	r0, r0, r7, lsl #1
   13e24:	ldrb	r0, [r0, #1]
   13e28:	tst	r0, #32
   13e2c:	movne	r4, r8
   13e30:	mov	r2, r4
   13e34:	mov	r0, r6
   13e38:	ldrb	r1, [r5], #1
   13e3c:	cmp	r1, #0
   13e40:	mov	r6, r0
   13e44:	mov	r4, r2
   13e48:	bne	13df8 <__assert_fail@plt+0x20f4>
   13e4c:	cmp	sl, #0
   13e50:	beq	13e64 <__assert_fail@plt+0x2160>
   13e54:	ldrd	r4, [r9, #40]	; 0x28
   13e58:	adds	r4, r4, #1
   13e5c:	adc	r5, r5, #0
   13e60:	strd	r4, [r9, #40]	; 0x28
   13e64:	cmp	r2, #0
   13e68:	beq	13e7c <__assert_fail@plt+0x2178>
   13e6c:	ldrd	r2, [r9, #24]
   13e70:	adds	r2, r2, #1
   13e74:	adc	r3, r3, #0
   13e78:	strd	r2, [r9, #24]
   13e7c:	cmp	r0, #0
   13e80:	beq	13e94 <__assert_fail@plt+0x2190>
   13e84:	ldrd	r0, [r9, #32]
   13e88:	adds	r0, r0, #1
   13e8c:	adc	r1, r1, #0
   13e90:	strd	r0, [r9, #32]
   13e94:	mov	r0, #1
   13e98:	sub	sp, fp, #28
   13e9c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13ea0:	push	{fp, lr}
   13ea4:	mov	fp, sp
   13ea8:	sub	sp, sp, #8
   13eac:	movw	r1, #49741	; 0xc24d
   13eb0:	movt	r1, #3
   13eb4:	ldrb	r2, [r1]
   13eb8:	movw	r1, #49708	; 0xc22c
   13ebc:	movt	r1, #3
   13ec0:	ldr	r1, [r1]
   13ec4:	movw	r3, #49692	; 0xc21c
   13ec8:	movt	r3, #3
   13ecc:	ldr	ip, [r3]
   13ed0:	ldr	r0, [r0, #12]
   13ed4:	str	r0, [sp]
   13ed8:	movw	r3, #44964	; 0xafa4
   13edc:	movt	r3, #2
   13ee0:	mov	r0, ip
   13ee4:	bl	147b0 <__assert_fail@plt+0x2aac>
   13ee8:	movw	r0, #49736	; 0xc248
   13eec:	movt	r0, #3
   13ef0:	ldrb	r1, [r0]
   13ef4:	mov	r0, #10
   13ef8:	cmp	r1, #0
   13efc:	movwne	r0, #0
   13f00:	bl	11b6c <putchar@plt>
   13f04:	mov	r0, #1
   13f08:	mov	sp, fp
   13f0c:	pop	{fp, pc}
   13f10:	push	{fp, lr}
   13f14:	mov	fp, sp
   13f18:	movw	r1, #49692	; 0xc21c
   13f1c:	movt	r1, #3
   13f20:	ldr	r1, [r1]
   13f24:	ldr	r0, [r0, #12]
   13f28:	bl	11cb0 <fputs@plt>
   13f2c:	movw	r0, #49736	; 0xc248
   13f30:	movt	r0, #3
   13f34:	ldrb	r1, [r0]
   13f38:	mov	r0, #10
   13f3c:	cmp	r1, #0
   13f40:	movwne	r0, #0
   13f44:	bl	11b6c <putchar@plt>
   13f48:	mov	r0, #1
   13f4c:	pop	{fp, pc}
   13f50:	push	{r4, r5, fp, lr}
   13f54:	add	fp, sp, #8
   13f58:	ldr	ip, [r1]
   13f5c:	ldr	r3, [r1, #4]
   13f60:	ldr	r0, [r1, #8]
   13f64:	ldr	r2, [r1, #12]
   13f68:	adds	r4, r0, #1
   13f6c:	adc	r5, r2, #0
   13f70:	strd	r4, [r1, #8]
   13f74:	mov	r0, #8
   13f78:	subs	r1, r4, ip
   13f7c:	sbcs	r1, r5, r3
   13f80:	movwcc	r0, #1
   13f84:	pop	{r4, r5, fp, pc}
   13f88:	ldr	r0, [r1, #8]
   13f8c:	ldr	r3, [r1, #12]
   13f90:	adds	r0, r0, #1
   13f94:	adc	r3, r3, #0
   13f98:	str	r0, [r1, #8]
   13f9c:	str	r3, [r1, #12]
   13fa0:	mov	r0, #1
   13fa4:	bx	lr
   13fa8:	push	{r4, r5, fp, lr}
   13fac:	add	fp, sp, #8
   13fb0:	mov	r4, r0
   13fb4:	movw	r5, #49800	; 0xc288
   13fb8:	movt	r5, #3
   13fbc:	ldr	r3, [r5]
   13fc0:	movw	r0, #49792	; 0xc280
   13fc4:	movt	r0, #3
   13fc8:	ldr	r0, [r0]
   13fcc:	mov	r1, #3
   13fd0:	mov	r2, r4
   13fd4:	bl	14520 <__assert_fail@plt+0x281c>
   13fd8:	cmp	r0, #1
   13fdc:	movweq	r0, #4
   13fe0:	tst	r0, #12
   13fe4:	popne	{r4, r5, fp, pc}
   13fe8:	ldr	r0, [r5]
   13fec:	mov	r1, #1
   13ff0:	mov	r2, r4
   13ff4:	mov	r3, #0
   13ff8:	bl	14520 <__assert_fail@plt+0x281c>
   13ffc:	cmp	r0, #1
   14000:	movweq	r0, #2
   14004:	pop	{r4, r5, fp, pc}
   14008:	push	{r4, r5, fp, lr}
   1400c:	add	fp, sp, #8
   14010:	mov	r4, r0
   14014:	movw	r5, #49800	; 0xc288
   14018:	movt	r5, #3
   1401c:	ldr	r3, [r5]
   14020:	movw	r0, #49792	; 0xc280
   14024:	movt	r0, #3
   14028:	ldr	r0, [r0]
   1402c:	mov	r1, #5
   14030:	mov	r2, r4
   14034:	bl	14520 <__assert_fail@plt+0x281c>
   14038:	cmp	r0, #1
   1403c:	movweq	r0, #4
   14040:	tst	r0, #12
   14044:	popne	{r4, r5, fp, pc}
   14048:	ldr	r0, [r5]
   1404c:	mov	r1, #1
   14050:	mov	r2, r4
   14054:	mov	r3, #0
   14058:	bl	14520 <__assert_fail@plt+0x281c>
   1405c:	cmp	r0, #1
   14060:	movweq	r0, #2
   14064:	pop	{r4, r5, fp, pc}
   14068:	mov	r2, r0
   1406c:	movw	r0, #49792	; 0xc280
   14070:	movt	r0, #3
   14074:	ldr	r0, [r0]
   14078:	mov	r1, #3
   1407c:	mov	r3, #0
   14080:	b	14520 <__assert_fail@plt+0x281c>
   14084:	nop	{0}
   14088:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1408c:	add	fp, sp, #28
   14090:	sub	sp, sp, #588	; 0x24c
   14094:	sub	sp, sp, #2048	; 0x800
   14098:	mov	r8, r1
   1409c:	str	r0, [sp, #20]
   140a0:	cmp	r2, #0
   140a4:	beq	1414c <__assert_fail@plt+0x2448>
   140a8:	mov	r7, r2
   140ac:	mov	r0, r2
   140b0:	bl	11a94 <localtime@plt>
   140b4:	cmp	r0, #0
   140b8:	beq	1414c <__assert_fail@plt+0x2448>
   140bc:	mov	r6, r0
   140c0:	sub	r0, fp, #684	; 0x2ac
   140c4:	movw	r2, #40896	; 0x9fc0
   140c8:	movt	r2, #2
   140cc:	mov	r1, #20
   140d0:	mov	r3, r6
   140d4:	bl	11a7c <strftime@plt>
   140d8:	cmp	r0, #19
   140dc:	bne	14368 <__assert_fail@plt+0x2664>
   140e0:	ldrb	r0, [fp, #-665]	; 0xfffffd67
   140e4:	cmp	r0, #0
   140e8:	bne	14388 <__assert_fail@plt+0x2684>
   140ec:	ldrb	r0, [fp, #-666]	; 0xfffffd66
   140f0:	cmp	r0, #0
   140f4:	beq	143a8 <__assert_fail@plt+0x26a4>
   140f8:	movw	r1, #41053	; 0xa05d
   140fc:	movt	r1, #2
   14100:	mov	r0, #0
   14104:	mov	r2, #5
   14108:	bl	11980 <dcgettext@plt>
   1410c:	ldr	r2, [r7, #4]
   14110:	sub	r5, fp, #684	; 0x2ac
   14114:	mov	r1, r5
   14118:	bl	118a8 <printf@plt>
   1411c:	movw	r2, #41092	; 0xa084
   14120:	movt	r2, #2
   14124:	mov	r0, r5
   14128:	mov	r1, #20
   1412c:	mov	r3, r6
   14130:	bl	11a7c <strftime@plt>
   14134:	cmp	r0, #5
   14138:	bne	143c8 <__assert_fail@plt+0x26c4>
   1413c:	movw	r0, #43295	; 0xa91f
   14140:	movt	r0, #2
   14144:	sub	r1, fp, #684	; 0x2ac
   14148:	bl	118a8 <printf@plt>
   1414c:	mov	r0, #5
   14150:	str	r0, [sp]
   14154:	mov	r7, #0
   14158:	movw	r1, #41108	; 0xa094
   1415c:	movt	r1, #2
   14160:	movw	r2, #41139	; 0xa0b3
   14164:	movt	r2, #2
   14168:	mov	r0, #0
   1416c:	mov	r3, r8
   14170:	bl	11cf8 <dcngettext@plt>
   14174:	mov	r5, r0
   14178:	mov	r9, #1
   1417c:	str	r9, [sp]
   14180:	stmib	sp, {r7, r9}
   14184:	str	r7, [sp, #12]
   14188:	sub	r6, fp, #684	; 0x2ac
   1418c:	mov	r0, r8
   14190:	mov	r1, #0
   14194:	mov	r2, r6
   14198:	mov	r3, #0
   1419c:	bl	15068 <__assert_fail@plt+0x3364>
   141a0:	mov	r1, r0
   141a4:	mov	r0, r5
   141a8:	bl	118a8 <printf@plt>
   141ac:	movw	r0, #49804	; 0xc28c
   141b0:	movt	r0, #3
   141b4:	ldrb	r0, [r0]
   141b8:	movw	r2, #41171	; 0xa0d3
   141bc:	movt	r2, #2
   141c0:	movw	r1, #41195	; 0xa0eb
   141c4:	movt	r1, #2
   141c8:	cmp	r0, #0
   141cc:	movne	r1, r2
   141d0:	mov	r0, #0
   141d4:	mov	r2, #5
   141d8:	bl	11980 <dcgettext@plt>
   141dc:	mov	r5, r0
   141e0:	movw	sl, #49744	; 0xc250
   141e4:	movt	sl, #3
   141e8:	ldrd	r0, [sl, #8]
   141ec:	str	r9, [sp]
   141f0:	stmib	sp, {r7, r9}
   141f4:	str	r7, [sp, #12]
   141f8:	mov	r2, r6
   141fc:	mov	r3, #0
   14200:	bl	15068 <__assert_fail@plt+0x3364>
   14204:	mov	r1, r0
   14208:	mov	r0, r5
   1420c:	bl	118a8 <printf@plt>
   14210:	movw	r1, #41214	; 0xa0fe
   14214:	movt	r1, #2
   14218:	mov	r0, #0
   1421c:	mov	r2, #5
   14220:	bl	11980 <dcgettext@plt>
   14224:	str	r0, [sp, #16]
   14228:	ldrd	r0, [sl, #16]
   1422c:	str	r9, [sp]
   14230:	stmib	sp, {r7, r9}
   14234:	str	r7, [sp, #12]
   14238:	mov	r2, r6
   1423c:	mov	r3, #0
   14240:	bl	15068 <__assert_fail@plt+0x3364>
   14244:	mov	r6, r0
   14248:	ldrd	r0, [sl, #24]
   1424c:	str	r9, [sp]
   14250:	stmib	sp, {r7, r9}
   14254:	str	r7, [sp, #12]
   14258:	add	r2, sp, #1328	; 0x530
   1425c:	mov	r3, #0
   14260:	bl	15068 <__assert_fail@plt+0x3364>
   14264:	mov	r5, r0
   14268:	ldrd	r0, [sl, #32]
   1426c:	str	r9, [sp]
   14270:	stmib	sp, {r7, r9}
   14274:	str	r7, [sp, #12]
   14278:	add	r2, sp, #676	; 0x2a4
   1427c:	mov	r3, #0
   14280:	bl	15068 <__assert_fail@plt+0x3364>
   14284:	mov	r4, r0
   14288:	ldrd	r0, [sl, #40]	; 0x28
   1428c:	str	r9, [sp]
   14290:	stmib	sp, {r7, r9}
   14294:	str	r7, [sp, #12]
   14298:	add	r2, sp, #24
   1429c:	mov	r3, #0
   142a0:	bl	15068 <__assert_fail@plt+0x3364>
   142a4:	str	r0, [sp]
   142a8:	ldr	r0, [sp, #16]
   142ac:	mov	r1, r6
   142b0:	mov	r2, r5
   142b4:	mov	r3, r4
   142b8:	bl	118a8 <printf@plt>
   142bc:	ldr	r0, [sp, #20]
   142c0:	cmp	r0, #0
   142c4:	bne	14358 <__assert_fail@plt+0x2654>
   142c8:	movw	r0, #49804	; 0xc28c
   142cc:	movt	r0, #3
   142d0:	ldrb	r0, [r0]
   142d4:	cmp	r0, #1
   142d8:	bne	142e8 <__assert_fail@plt+0x25e4>
   142dc:	movw	r1, #41394	; 0xa1b2
   142e0:	movt	r1, #2
   142e4:	b	14348 <__assert_fail@plt+0x2644>
   142e8:	ldrd	r0, [sl, #16]
   142ec:	orrs	r0, r0, r1
   142f0:	beq	14340 <__assert_fail@plt+0x263c>
   142f4:	movw	r1, #41482	; 0xa20a
   142f8:	movt	r1, #2
   142fc:	mov	r0, #0
   14300:	mov	r2, #5
   14304:	bl	11980 <dcgettext@plt>
   14308:	mov	r4, r0
   1430c:	ldrd	r0, [sl, #16]
   14310:	bl	292d0 <__assert_fail@plt+0x175cc>
   14314:	vldr	d16, [pc, #204]	; 143e8 <__assert_fail@plt+0x26e4>
   14318:	vmov	s0, r8
   1431c:	vcvt.f64.u32	d17, s0
   14320:	vmov	d18, r0, r1
   14324:	vsub.f64	d17, d18, d17
   14328:	vmul.f64	d16, d17, d16
   1432c:	vdiv.f64	d16, d16, d18
   14330:	vmov	r2, r3, d16
   14334:	mov	r0, r4
   14338:	bl	118a8 <printf@plt>
   1433c:	b	14358 <__assert_fail@plt+0x2654>
   14340:	movw	r1, #41528	; 0xa238
   14344:	movt	r1, #2
   14348:	mov	r0, #0
   1434c:	mov	r2, #5
   14350:	bl	11980 <dcgettext@plt>
   14354:	bl	118a8 <printf@plt>
   14358:	mov	r0, #10
   1435c:	bl	11b6c <putchar@plt>
   14360:	sub	sp, fp, #28
   14364:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14368:	movw	r0, #40914	; 0x9fd2
   1436c:	movt	r0, #2
   14370:	movw	r1, #38613	; 0x96d5
   14374:	movt	r1, #2
   14378:	movw	r3, #40940	; 0x9fec
   1437c:	movt	r3, #2
   14380:	movw	r2, #845	; 0x34d
   14384:	bl	11d04 <__assert_fail@plt>
   14388:	movw	r0, #40995	; 0xa023
   1438c:	movt	r0, #2
   14390:	movw	r1, #38613	; 0x96d5
   14394:	movt	r1, #2
   14398:	movw	r3, #40940	; 0x9fec
   1439c:	movt	r3, #2
   143a0:	movw	r2, #846	; 0x34e
   143a4:	bl	11d04 <__assert_fail@plt>
   143a8:	movw	r0, #41024	; 0xa040
   143ac:	movt	r0, #2
   143b0:	movw	r1, #38613	; 0x96d5
   143b4:	movt	r1, #2
   143b8:	movw	r3, #40940	; 0x9fec
   143bc:	movt	r3, #2
   143c0:	movw	r2, #847	; 0x34f
   143c4:	bl	11d04 <__assert_fail@plt>
   143c8:	movw	r0, #41095	; 0xa087
   143cc:	movt	r0, #2
   143d0:	movw	r1, #38613	; 0x96d5
   143d4:	movt	r1, #2
   143d8:	movw	r3, #40940	; 0x9fec
   143dc:	movt	r3, #2
   143e0:	movw	r2, #851	; 0x353
   143e4:	bl	11d04 <__assert_fail@plt>
   143e8:	andeq	r0, r0, r0
   143ec:	subsmi	r0, r9, r0
   143f0:	push	{r4, r5, fp, lr}
   143f4:	add	fp, sp, #8
   143f8:	mov	r4, r0
   143fc:	bl	11b84 <fgetc@plt>
   14400:	mov	r5, r0
   14404:	mov	r0, r4
   14408:	bl	11b84 <fgetc@plt>
   1440c:	uxtb	r0, r0
   14410:	orr	r0, r0, r5, lsl #8
   14414:	sxth	r0, r0
   14418:	pop	{r4, r5, fp, pc}
   1441c:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   14420:	add	fp, sp, #24
   14424:	sub	sp, sp, #8
   14428:	mov	r5, r3
   1442c:	mov	r3, r2
   14430:	mov	r8, r1
   14434:	mov	r6, r0
   14438:	mov	r0, #0
   1443c:	str	r0, [sp, #4]
   14440:	str	r0, [sp]
   14444:	add	r0, sp, #4
   14448:	mov	r1, sp
   1444c:	mov	r2, #0
   14450:	bl	11c80 <getdelim@plt>
   14454:	mov	r4, r0
   14458:	cmp	r0, #0
   1445c:	blt	144b8 <__assert_fail@plt+0x27b4>
   14460:	ldr	r0, [sp, #4]
   14464:	cmp	r0, #0
   14468:	beq	144cc <__assert_fail@plt+0x27c8>
   1446c:	add	r0, r4, r5
   14470:	add	r7, r0, #1
   14474:	ldr	r0, [r8]
   14478:	cmp	r7, r0
   1447c:	bls	1449c <__assert_fail@plt+0x2798>
   14480:	ldr	r0, [r6]
   14484:	mov	r1, r7
   14488:	bl	1a388 <__assert_fail@plt+0x8684>
   1448c:	cmp	r0, #0
   14490:	beq	144c4 <__assert_fail@plt+0x27c0>
   14494:	str	r7, [r8]
   14498:	str	r0, [r6]
   1449c:	ldr	r0, [r6]
   144a0:	add	r0, r0, r5
   144a4:	ldr	r1, [sp, #4]
   144a8:	add	r2, r4, #1
   144ac:	bl	1192c <memcpy@plt>
   144b0:	ldr	r0, [sp, #4]
   144b4:	bl	1a22c <__assert_fail@plt+0x8528>
   144b8:	mov	r0, r4
   144bc:	sub	sp, fp, #24
   144c0:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   144c4:	mvn	r4, #0
   144c8:	b	144b8 <__assert_fail@plt+0x27b4>
   144cc:	movw	r0, #40502	; 0x9e36
   144d0:	movt	r0, #2
   144d4:	movw	r1, #38613	; 0x96d5
   144d8:	movt	r1, #2
   144dc:	movw	r3, #40512	; 0x9e40
   144e0:	movt	r3, #2
   144e4:	mov	r2, #245	; 0xf5
   144e8:	bl	11d04 <__assert_fail@plt>
   144ec:	push	{fp, lr}
   144f0:	mov	fp, sp
   144f4:	mov	r4, r0
   144f8:	movw	r1, #40569	; 0x9e79
   144fc:	movt	r1, #2
   14500:	mov	r0, #0
   14504:	mov	r2, #5
   14508:	bl	11980 <dcgettext@plt>
   1450c:	mov	r2, r0
   14510:	ldr	r3, [r4, #28]
   14514:	mov	r0, #1
   14518:	mov	r1, #0
   1451c:	bl	11a28 <error@plt>
   14520:	push	{r4, r5, r6, r7, fp, lr}
   14524:	add	fp, sp, #16
   14528:	mov	r4, r1
   1452c:	cmp	r0, r3
   14530:	cmpne	r4, #0
   14534:	bne	14540 <__assert_fail@plt+0x283c>
   14538:	mov	r0, r4
   1453c:	pop	{r4, r5, r6, r7, fp, pc}
   14540:	mov	r5, r3
   14544:	mov	r6, r2
   14548:	mov	r7, r0
   1454c:	ldr	r2, [r7]
   14550:	ldr	r1, [r7, #4]
   14554:	mov	r0, r6
   14558:	blx	r2
   1455c:	ldr	r7, [r7, #8]
   14560:	cmp	r7, r5
   14564:	andsne	r1, r0, r4
   14568:	bne	1454c <__assert_fail@plt+0x2848>
   1456c:	pop	{r4, r5, r6, r7, fp, pc}
   14570:	push	{r4, r5, r6, r7, fp, lr}
   14574:	add	fp, sp, #16
   14578:	sub	sp, sp, #8
   1457c:	mov	r6, r3
   14580:	mov	r7, r2
   14584:	mov	r4, r1
   14588:	mov	r5, r0
   1458c:	bl	11c44 <clearerr@plt>
   14590:	add	r0, sp, #4
   14594:	mov	r1, #4
   14598:	mov	r2, #1
   1459c:	mov	r3, r5
   145a0:	bl	11a04 <fread@plt>
   145a4:	cmp	r0, #1
   145a8:	bne	145c8 <__assert_fail@plt+0x28c4>
   145ac:	add	r0, sp, #4
   145b0:	mov	r1, r7
   145b4:	mov	r2, r6
   145b8:	mov	r3, r4
   145bc:	bl	14644 <__assert_fail@plt+0x2940>
   145c0:	sub	sp, fp, #16
   145c4:	pop	{r4, r5, r6, r7, fp, pc}
   145c8:	mov	r0, #0
   145cc:	mov	r1, #8
   145d0:	mov	r2, r4
   145d4:	bl	189b0 <__assert_fail@plt+0x6cac>
   145d8:	mov	r4, r0
   145dc:	mov	r0, r5
   145e0:	bl	11adc <feof@plt>
   145e4:	cmp	r0, #0
   145e8:	bne	1461c <__assert_fail@plt+0x2918>
   145ec:	bl	11b24 <__errno_location@plt>
   145f0:	ldr	r5, [r0]
   145f4:	movw	r1, #41976	; 0xa3f8
   145f8:	movt	r1, #2
   145fc:	mov	r0, #0
   14600:	mov	r2, #5
   14604:	bl	11980 <dcgettext@plt>
   14608:	mov	r2, r0
   1460c:	mov	r0, #1
   14610:	mov	r1, r5
   14614:	mov	r3, r4
   14618:	bl	11a28 <error@plt>
   1461c:	movw	r1, #41955	; 0xa3e3
   14620:	movt	r1, #2
   14624:	mov	r0, #0
   14628:	mov	r2, #5
   1462c:	bl	11980 <dcgettext@plt>
   14630:	mov	r2, r0
   14634:	mov	r0, #1
   14638:	mov	r1, #0
   1463c:	mov	r3, r4
   14640:	bl	11a28 <error@plt>
   14644:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   14648:	add	fp, sp, #24
   1464c:	mov	r8, r3
   14650:	mov	r4, r2
   14654:	mov	r6, r1
   14658:	ldr	r7, [r0]
   1465c:	mov	r0, r7
   14660:	bl	146f8 <__assert_fail@plt+0x29f4>
   14664:	mov	r5, r0
   14668:	ldr	r0, [r4]
   1466c:	cmp	r0, #2
   14670:	beq	146d0 <__assert_fail@plt+0x29cc>
   14674:	cmp	r0, #0
   14678:	bne	146d4 <__assert_fail@plt+0x29d0>
   1467c:	cmp	r7, r6
   14680:	ble	146dc <__assert_fail@plt+0x29d8>
   14684:	cmp	r5, r6
   14688:	bgt	146d4 <__assert_fail@plt+0x29d0>
   1468c:	movw	r1, #42005	; 0xa415
   14690:	movt	r1, #2
   14694:	mov	r0, #0
   14698:	mov	r2, #5
   1469c:	bl	11980 <dcgettext@plt>
   146a0:	mov	r6, r0
   146a4:	mov	r0, #0
   146a8:	mov	r1, #8
   146ac:	mov	r2, r8
   146b0:	bl	189b0 <__assert_fail@plt+0x6cac>
   146b4:	mov	r3, r0
   146b8:	mov	r0, #0
   146bc:	mov	r1, #0
   146c0:	mov	r2, r6
   146c4:	bl	11a28 <error@plt>
   146c8:	mov	r0, #2
   146cc:	str	r0, [r4]
   146d0:	mov	r7, r5
   146d4:	mov	r0, r7
   146d8:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   146dc:	cmp	r5, r6
   146e0:	movgt	r0, #1
   146e4:	strgt	r0, [r4]
   146e8:	movgt	r0, r7
   146ec:	popgt	{r4, r5, r6, r7, r8, sl, fp, pc}
   146f0:	mov	r0, r7
   146f4:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   146f8:	rev	r0, r0
   146fc:	bx	lr
   14700:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   14704:	add	fp, sp, #24
   14708:	sub	sp, sp, #16
   1470c:	mov	r8, r0
   14710:	movw	r0, #49688	; 0xc218
   14714:	movt	r0, #3
   14718:	ldr	r0, [r0]
   1471c:	bl	1a1c4 <__assert_fail@plt+0x84c0>
   14720:	movw	r0, #49692	; 0xc21c
   14724:	movt	r0, #3
   14728:	ldr	r6, [r0]
   1472c:	movw	r0, #49588	; 0xc1b4
   14730:	movt	r0, #3
   14734:	ldr	r5, [r0]
   14738:	mov	r9, #0
   1473c:	movw	r1, #42099	; 0xa473
   14740:	movt	r1, #2
   14744:	mov	r0, #0
   14748:	mov	r2, #5
   1474c:	bl	11980 <dcgettext@plt>
   14750:	mov	r7, r0
   14754:	movw	r1, #42114	; 0xa482
   14758:	movt	r1, #2
   1475c:	mov	r0, #0
   14760:	mov	r2, #5
   14764:	bl	11980 <dcgettext@plt>
   14768:	mov	r4, r0
   1476c:	movw	r1, #42129	; 0xa491
   14770:	movt	r1, #2
   14774:	mov	r0, #0
   14778:	mov	r2, #5
   1477c:	bl	11980 <dcgettext@plt>
   14780:	str	r7, [sp]
   14784:	str	r4, [sp, #4]
   14788:	str	r0, [sp, #8]
   1478c:	str	r9, [sp, #12]
   14790:	movw	r2, #42085	; 0xa465
   14794:	movt	r2, #2
   14798:	mov	r0, r6
   1479c:	mov	r1, r8
   147a0:	mov	r3, r5
   147a4:	bl	194e0 <__assert_fail@plt+0x77dc>
   147a8:	sub	sp, fp, #24
   147ac:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   147b0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   147b4:	add	fp, sp, #28
   147b8:	sub	sp, sp, #12
   147bc:	sub	sp, sp, #8192	; 0x2000
   147c0:	mov	r9, r3
   147c4:	mov	sl, r0
   147c8:	ldr	r7, [fp, #8]
   147cc:	cmp	r2, #0
   147d0:	beq	14870 <__assert_fail@plt+0x2b6c>
   147d4:	mov	r8, r1
   147d8:	str	r1, [sp]
   147dc:	add	r4, sp, #8
   147e0:	mov	r0, r4
   147e4:	mov	r1, #8192	; 0x2000
   147e8:	mov	r2, r7
   147ec:	mvn	r3, #0
   147f0:	bl	175e0 <__assert_fail@plt+0x58dc>
   147f4:	mov	r5, r0
   147f8:	cmp	r0, #8192	; 0x2000
   147fc:	mov	r6, r4
   14800:	bcc	1482c <__assert_fail@plt+0x2b28>
   14804:	add	r4, r5, #1
   14808:	mov	r0, r4
   1480c:	bl	195cc <__assert_fail@plt+0x78c8>
   14810:	mov	r6, r0
   14814:	str	r8, [sp]
   14818:	mov	r1, r4
   1481c:	add	r4, sp, #8
   14820:	mov	r2, r7
   14824:	mvn	r3, #0
   14828:	bl	175e0 <__assert_fail@plt+0x58dc>
   1482c:	mov	r0, r6
   14830:	mov	r1, r5
   14834:	bl	14888 <__assert_fail@plt+0x2b84>
   14838:	mov	r1, #0
   1483c:	strb	r1, [r6, r0]
   14840:	mov	r0, sl
   14844:	mov	r1, r9
   14848:	mov	r2, r6
   1484c:	bl	11b0c <fprintf@plt>
   14850:	mov	r5, r0
   14854:	cmp	r6, r4
   14858:	beq	14864 <__assert_fail@plt+0x2b60>
   1485c:	mov	r0, r6
   14860:	bl	1a22c <__assert_fail@plt+0x8528>
   14864:	mov	r0, r5
   14868:	sub	sp, fp, #28
   1486c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14870:	mov	r0, sl
   14874:	mov	r1, r9
   14878:	mov	r2, r7
   1487c:	sub	sp, fp, #28
   14880:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   14884:	b	11b0c <fprintf@plt>
   14888:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1488c:	add	fp, sp, #28
   14890:	sub	sp, sp, #20
   14894:	mov	r5, r1
   14898:	mov	sl, r0
   1489c:	bl	119f8 <__ctype_get_mb_cur_max@plt>
   148a0:	cmp	r0, #1
   148a4:	bhi	148bc <__assert_fail@plt+0x2bb8>
   148a8:	mov	r0, sl
   148ac:	mov	r1, r5
   148b0:	sub	sp, fp, #28
   148b4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   148b8:	b	14b48 <__assert_fail@plt+0x2e44>
   148bc:	cmp	r5, #1
   148c0:	mov	r4, sl
   148c4:	blt	14b3c <__assert_fail@plt+0x2e38>
   148c8:	add	r6, sl, r5
   148cc:	mov	r3, #0
   148d0:	add	r8, sp, #4
   148d4:	add	r9, sp, #8
   148d8:	mov	r4, sl
   148dc:	mov	r7, sl
   148e0:	ldrb	r0, [r7]
   148e4:	sub	r1, r0, #32
   148e8:	cmp	r1, #94	; 0x5e
   148ec:	bhi	14a88 <__assert_fail@plt+0x2d84>
   148f0:	add	r2, pc, #0
   148f4:	ldr	pc, [r2, r1, lsl #2]
   148f8:	andeq	r4, r1, r4, ror sl
   148fc:	andeq	r4, r1, r4, ror sl
   14900:	andeq	r4, r1, r4, ror sl
   14904:	andeq	r4, r1, r4, ror sl
   14908:	andeq	r4, r1, r8, lsl #21
   1490c:	andeq	r4, r1, r4, ror sl
   14910:	andeq	r4, r1, r4, ror sl
   14914:	andeq	r4, r1, r4, ror sl
   14918:	andeq	r4, r1, r4, ror sl
   1491c:	andeq	r4, r1, r4, ror sl
   14920:	andeq	r4, r1, r4, ror sl
   14924:	andeq	r4, r1, r4, ror sl
   14928:	andeq	r4, r1, r4, ror sl
   1492c:	andeq	r4, r1, r4, ror sl
   14930:	andeq	r4, r1, r4, ror sl
   14934:	andeq	r4, r1, r4, ror sl
   14938:	andeq	r4, r1, r4, ror sl
   1493c:	andeq	r4, r1, r4, ror sl
   14940:	andeq	r4, r1, r4, ror sl
   14944:	andeq	r4, r1, r4, ror sl
   14948:	andeq	r4, r1, r4, ror sl
   1494c:	andeq	r4, r1, r4, ror sl
   14950:	andeq	r4, r1, r4, ror sl
   14954:	andeq	r4, r1, r4, ror sl
   14958:	andeq	r4, r1, r4, ror sl
   1495c:	andeq	r4, r1, r4, ror sl
   14960:	andeq	r4, r1, r4, ror sl
   14964:	andeq	r4, r1, r4, ror sl
   14968:	andeq	r4, r1, r4, ror sl
   1496c:	andeq	r4, r1, r4, ror sl
   14970:	andeq	r4, r1, r4, ror sl
   14974:	andeq	r4, r1, r4, ror sl
   14978:	andeq	r4, r1, r8, lsl #21
   1497c:	andeq	r4, r1, r4, ror sl
   14980:	andeq	r4, r1, r4, ror sl
   14984:	andeq	r4, r1, r4, ror sl
   14988:	andeq	r4, r1, r4, ror sl
   1498c:	andeq	r4, r1, r4, ror sl
   14990:	andeq	r4, r1, r4, ror sl
   14994:	andeq	r4, r1, r4, ror sl
   14998:	andeq	r4, r1, r4, ror sl
   1499c:	andeq	r4, r1, r4, ror sl
   149a0:	andeq	r4, r1, r4, ror sl
   149a4:	andeq	r4, r1, r4, ror sl
   149a8:	andeq	r4, r1, r4, ror sl
   149ac:	andeq	r4, r1, r4, ror sl
   149b0:	andeq	r4, r1, r4, ror sl
   149b4:	andeq	r4, r1, r4, ror sl
   149b8:	andeq	r4, r1, r4, ror sl
   149bc:	andeq	r4, r1, r4, ror sl
   149c0:	andeq	r4, r1, r4, ror sl
   149c4:	andeq	r4, r1, r4, ror sl
   149c8:	andeq	r4, r1, r4, ror sl
   149cc:	andeq	r4, r1, r4, ror sl
   149d0:	andeq	r4, r1, r4, ror sl
   149d4:	andeq	r4, r1, r4, ror sl
   149d8:	andeq	r4, r1, r4, ror sl
   149dc:	andeq	r4, r1, r4, ror sl
   149e0:	andeq	r4, r1, r4, ror sl
   149e4:	andeq	r4, r1, r4, ror sl
   149e8:	andeq	r4, r1, r4, ror sl
   149ec:	andeq	r4, r1, r4, ror sl
   149f0:	andeq	r4, r1, r4, ror sl
   149f4:	andeq	r4, r1, r4, ror sl
   149f8:	andeq	r4, r1, r8, lsl #21
   149fc:	andeq	r4, r1, r4, ror sl
   14a00:	andeq	r4, r1, r4, ror sl
   14a04:	andeq	r4, r1, r4, ror sl
   14a08:	andeq	r4, r1, r4, ror sl
   14a0c:	andeq	r4, r1, r4, ror sl
   14a10:	andeq	r4, r1, r4, ror sl
   14a14:	andeq	r4, r1, r4, ror sl
   14a18:	andeq	r4, r1, r4, ror sl
   14a1c:	andeq	r4, r1, r4, ror sl
   14a20:	andeq	r4, r1, r4, ror sl
   14a24:	andeq	r4, r1, r4, ror sl
   14a28:	andeq	r4, r1, r4, ror sl
   14a2c:	andeq	r4, r1, r4, ror sl
   14a30:	andeq	r4, r1, r4, ror sl
   14a34:	andeq	r4, r1, r4, ror sl
   14a38:	andeq	r4, r1, r4, ror sl
   14a3c:	andeq	r4, r1, r4, ror sl
   14a40:	andeq	r4, r1, r4, ror sl
   14a44:	andeq	r4, r1, r4, ror sl
   14a48:	andeq	r4, r1, r4, ror sl
   14a4c:	andeq	r4, r1, r4, ror sl
   14a50:	andeq	r4, r1, r4, ror sl
   14a54:	andeq	r4, r1, r4, ror sl
   14a58:	andeq	r4, r1, r4, ror sl
   14a5c:	andeq	r4, r1, r4, ror sl
   14a60:	andeq	r4, r1, r4, ror sl
   14a64:	andeq	r4, r1, r4, ror sl
   14a68:	andeq	r4, r1, r4, ror sl
   14a6c:	andeq	r4, r1, r4, ror sl
   14a70:	andeq	r4, r1, r4, ror sl
   14a74:	strb	r0, [r4], #1
   14a78:	add	r7, r7, #1
   14a7c:	cmp	r7, r6
   14a80:	bcc	148e0 <__assert_fail@plt+0x2bdc>
   14a84:	b	14b3c <__assert_fail@plt+0x2e38>
   14a88:	str	r3, [sp, #12]
   14a8c:	str	r3, [sp, #8]
   14a90:	sub	r2, r6, r7
   14a94:	mov	r0, r8
   14a98:	mov	r1, r7
   14a9c:	mov	r3, r9
   14aa0:	bl	1a328 <__assert_fail@plt+0x8624>
   14aa4:	cmp	r0, #0
   14aa8:	beq	14ac4 <__assert_fail@plt+0x2dc0>
   14aac:	mov	r5, r0
   14ab0:	cmn	r0, #2
   14ab4:	beq	14b1c <__assert_fail@plt+0x2e18>
   14ab8:	cmn	r5, #1
   14abc:	bne	14ac8 <__assert_fail@plt+0x2dc4>
   14ac0:	b	14b24 <__assert_fail@plt+0x2e20>
   14ac4:	mov	r5, #1
   14ac8:	ldr	r0, [sp, #4]
   14acc:	bl	118cc <wcwidth@plt>
   14ad0:	cmp	r0, #0
   14ad4:	blt	14afc <__assert_fail@plt+0x2df8>
   14ad8:	mov	r0, r5
   14adc:	mov	r1, r4
   14ae0:	mov	r2, r7
   14ae4:	ldrb	r3, [r2], #1
   14ae8:	strb	r3, [r1], #1
   14aec:	subs	r0, r0, #1
   14af0:	bne	14ae4 <__assert_fail@plt+0x2de0>
   14af4:	add	r4, r4, r5
   14af8:	b	14b04 <__assert_fail@plt+0x2e00>
   14afc:	mov	r0, #63	; 0x3f
   14b00:	strb	r0, [r4], #1
   14b04:	add	r7, r7, r5
   14b08:	mov	r0, r9
   14b0c:	bl	1195c <mbsinit@plt>
   14b10:	cmp	r0, #0
   14b14:	beq	14a90 <__assert_fail@plt+0x2d8c>
   14b18:	b	14b30 <__assert_fail@plt+0x2e2c>
   14b1c:	mov	r7, r6
   14b20:	b	14b28 <__assert_fail@plt+0x2e24>
   14b24:	add	r7, r7, #1
   14b28:	mov	r0, #63	; 0x3f
   14b2c:	strb	r0, [r4], #1
   14b30:	mov	r3, #0
   14b34:	cmp	r7, r6
   14b38:	bcc	148e0 <__assert_fail@plt+0x2bdc>
   14b3c:	sub	r0, r4, sl
   14b40:	sub	sp, fp, #28
   14b44:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14b48:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   14b4c:	add	fp, sp, #24
   14b50:	mov	r8, r1
   14b54:	cmp	r1, #1
   14b58:	blt	14b98 <__assert_fail@plt+0x2e94>
   14b5c:	mov	r5, r0
   14b60:	add	r7, r0, r8
   14b64:	bl	11ac4 <__ctype_b_loc@plt>
   14b68:	mov	r6, r0
   14b6c:	mov	r9, #63	; 0x3f
   14b70:	ldr	r4, [r6]
   14b74:	ldrb	r0, [r5]
   14b78:	bl	14ba0 <__assert_fail@plt+0x2e9c>
   14b7c:	add	r0, r4, r0, lsl #1
   14b80:	ldrb	r0, [r0, #1]
   14b84:	tst	r0, #64	; 0x40
   14b88:	strbeq	r9, [r5]
   14b8c:	add	r5, r5, #1
   14b90:	cmp	r5, r7
   14b94:	bcc	14b70 <__assert_fail@plt+0x2e6c>
   14b98:	mov	r0, r8
   14b9c:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   14ba0:	bx	lr
   14ba4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   14ba8:	add	fp, sp, #28
   14bac:	sub	sp, sp, #12
   14bb0:	mov	r8, r0
   14bb4:	movw	sl, #42144	; 0xa4a0
   14bb8:	movt	sl, #2
   14bbc:	add	r4, sl, #8
   14bc0:	mov	r6, #0
   14bc4:	mov	r7, #0
   14bc8:	ldr	r5, [r4, #-8]
   14bcc:	mov	r0, r5
   14bd0:	mov	r1, r8
   14bd4:	bl	1189c <strcmp@plt>
   14bd8:	cmp	r0, #0
   14bdc:	beq	14ca0 <__assert_fail@plt+0x2f9c>
   14be0:	mov	r0, r5
   14be4:	bl	18c54 <__assert_fail@plt+0x6f50>
   14be8:	bl	11af4 <strlen@plt>
   14bec:	add	r0, r7, r0
   14bf0:	add	r7, r0, #2
   14bf4:	add	r4, r4, #12
   14bf8:	add	r6, r6, #1
   14bfc:	cmp	r6, #13
   14c00:	bcc	14bc8 <__assert_fail@plt+0x2ec4>
   14c04:	str	r8, [sp, #8]
   14c08:	add	r0, r7, #1
   14c0c:	bl	195cc <__assert_fail@plt+0x78c8>
   14c10:	mov	r6, r0
   14c14:	mov	r4, #0
   14c18:	movw	r8, #8236	; 0x202c
   14c1c:	mov	r9, #0
   14c20:	str	r0, [sp, #4]
   14c24:	cmp	r9, #0
   14c28:	strhne	r8, [r6]
   14c2c:	strbne	r4, [r6, #2]!
   14c30:	ldr	r0, [sl, -r9]
   14c34:	bl	18c54 <__assert_fail@plt+0x6f50>
   14c38:	mov	r7, r0
   14c3c:	bl	11af4 <strlen@plt>
   14c40:	mov	r5, r0
   14c44:	add	r2, r0, #1
   14c48:	mov	r0, r6
   14c4c:	mov	r1, r7
   14c50:	bl	1192c <memcpy@plt>
   14c54:	add	r6, r6, r5
   14c58:	sub	r9, r9, #12
   14c5c:	cmn	r9, #156	; 0x9c
   14c60:	bne	14c24 <__assert_fail@plt+0x2f20>
   14c64:	movw	r1, #42303	; 0xa53f
   14c68:	movt	r1, #2
   14c6c:	mov	r0, #0
   14c70:	mov	r2, #5
   14c74:	bl	11980 <dcgettext@plt>
   14c78:	mov	r5, r0
   14c7c:	ldr	r0, [sp, #8]
   14c80:	bl	18c54 <__assert_fail@plt+0x6f50>
   14c84:	mov	r3, r0
   14c88:	ldr	r0, [sp, #4]
   14c8c:	str	r0, [sp]
   14c90:	mov	r0, #1
   14c94:	mov	r1, #0
   14c98:	mov	r2, r5
   14c9c:	bl	11a28 <error@plt>
   14ca0:	ldr	r0, [r4]
   14ca4:	sub	sp, fp, #28
   14ca8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14cac:	mov	r1, r0
   14cb0:	mov	r0, #0
   14cb4:	cmp	r1, #12
   14cb8:	addls	r0, r1, r1, lsl #1
   14cbc:	movwls	r1, #42144	; 0xa4a0
   14cc0:	movtls	r1, #2
   14cc4:	ldrls	r0, [r1, r0, lsl #2]
   14cc8:	bx	lr
   14ccc:	mov	r1, r0
   14cd0:	mvn	r0, #0
   14cd4:	cmp	r1, #12
   14cd8:	bxhi	lr
   14cdc:	add	r0, r1, r1, lsl #1
   14ce0:	movw	r1, #42144	; 0xa4a0
   14ce4:	movt	r1, #2
   14ce8:	add	r0, r1, r0, lsl #2
   14cec:	ldr	r0, [r0, #8]
   14cf0:	bx	lr
   14cf4:	mov	r1, r0
   14cf8:	mov	r0, #0
   14cfc:	cmp	r1, #12
   14d00:	bxhi	lr
   14d04:	add	r0, r1, r1, lsl #1
   14d08:	movw	r1, #42144	; 0xa4a0
   14d0c:	movt	r1, #2
   14d10:	add	r0, r1, r0, lsl #2
   14d14:	ldr	r0, [r0, #4]
   14d18:	bx	lr
   14d1c:	push	{r4, sl, fp, lr}
   14d20:	add	fp, sp, #8
   14d24:	mov	lr, r0
   14d28:	mvn	r0, #0
   14d2c:	cmp	lr, #12
   14d30:	bhi	14d84 <__assert_fail@plt+0x3080>
   14d34:	cmp	lr, #0
   14d38:	popeq	{r4, sl, fp, pc}
   14d3c:	add	r2, lr, lr, lsl #1
   14d40:	movw	r3, #42144	; 0xa4a0
   14d44:	movt	r3, #2
   14d48:	add	r2, r3, r2, lsl #2
   14d4c:	ldr	ip, [r2, #8]
   14d50:	add	r2, r3, #4
   14d54:	mov	r3, #0
   14d58:	ldr	r4, [r2]
   14d5c:	tst	r4, r1
   14d60:	beq	14d74 <__assert_fail@plt+0x3070>
   14d64:	ldr	r4, [r2, #4]
   14d68:	cmp	ip, r4
   14d6c:	moveq	r0, r3
   14d70:	popeq	{r4, sl, fp, pc}
   14d74:	add	r2, r2, #12
   14d78:	add	r3, r3, #1
   14d7c:	cmp	r3, lr
   14d80:	bcc	14d58 <__assert_fail@plt+0x3054>
   14d84:	pop	{r4, sl, fp, pc}
   14d88:	push	{r4, r5, fp, lr}
   14d8c:	add	fp, sp, #8
   14d90:	ldr	r5, [fp, #8]
   14d94:	cmp	r2, #0
   14d98:	beq	14dac <__assert_fail@plt+0x30a8>
   14d9c:	mov	r2, #0
   14da0:	str	r2, [r3]
   14da4:	str	r2, [r5]
   14da8:	b	14dd4 <__assert_fail@plt+0x30d0>
   14dac:	ldr	r2, [r5]
   14db0:	ldr	r4, [r3]
   14db4:	add	r2, r4, r2
   14db8:	str	r2, [r3]
   14dbc:	ldrb	r4, [r0, r2]
   14dc0:	cmp	r4, #0
   14dc4:	moveq	r0, #0
   14dc8:	popeq	{r4, r5, fp, pc}
   14dcc:	add	r2, r2, #1
   14dd0:	str	r2, [r3]
   14dd4:	ldr	r2, [r3]
   14dd8:	add	r0, r0, r2
   14ddc:	bl	14dec <__assert_fail@plt+0x30e8>
   14de0:	str	r0, [r5]
   14de4:	mov	r0, #1
   14de8:	pop	{r4, r5, fp, pc}
   14dec:	push	{r4, sl, fp, lr}
   14df0:	add	fp, sp, #8
   14df4:	mov	r4, r0
   14df8:	ldrb	r0, [r1]
   14dfc:	cmp	r0, #0
   14e00:	beq	14e18 <__assert_fail@plt+0x3114>
   14e04:	mov	r0, r4
   14e08:	bl	11c68 <strpbrk@plt>
   14e0c:	cmp	r0, #0
   14e10:	subne	r0, r0, r4
   14e14:	popne	{r4, sl, fp, pc}
   14e18:	mov	r0, r4
   14e1c:	pop	{r4, sl, fp, lr}
   14e20:	b	11af4 <strlen@plt>
   14e24:	push	{r4, r5, fp, lr}
   14e28:	add	fp, sp, #8
   14e2c:	sub	sp, sp, #16
   14e30:	mov	r4, r1
   14e34:	mov	r5, r0
   14e38:	movw	r1, #42464	; 0xa5e0
   14e3c:	movt	r1, #2
   14e40:	mov	r0, #0
   14e44:	mov	r2, #5
   14e48:	bl	11980 <dcgettext@plt>
   14e4c:	mov	r1, r0
   14e50:	movw	r0, #42756	; 0xa704
   14e54:	movt	r0, #2
   14e58:	movw	r2, #42709	; 0xa6d5
   14e5c:	movt	r2, #2
   14e60:	movw	r3, #42085	; 0xa465
   14e64:	movt	r3, #2
   14e68:	str	r3, [sp]
   14e6c:	str	r2, [sp, #4]
   14e70:	str	r0, [sp, #8]
   14e74:	movw	r2, #42670	; 0xa6ae
   14e78:	movt	r2, #2
   14e7c:	mov	r0, r5
   14e80:	mov	r3, r4
   14e84:	bl	11b0c <fprintf@plt>
   14e88:	sub	sp, fp, #8
   14e8c:	pop	{r4, r5, fp, pc}
   14e90:	sub	r0, r0, #1
   14e94:	ldrb	r3, [r0, #1]!
   14e98:	cmp	r3, #47	; 0x2f
   14e9c:	beq	14e94 <__assert_fail@plt+0x3190>
   14ea0:	mov	r2, #0
   14ea4:	mov	r1, r0
   14ea8:	b	14ec4 <__assert_fail@plt+0x31c0>
   14eac:	cmp	r3, #0
   14eb0:	bxeq	lr
   14eb4:	tst	r2, #1
   14eb8:	movne	r0, r1
   14ebc:	mov	r2, #0
   14ec0:	ldrb	r3, [r1, #1]!
   14ec4:	uxtb	r3, r3
   14ec8:	cmp	r3, #47	; 0x2f
   14ecc:	bne	14eac <__assert_fail@plt+0x31a8>
   14ed0:	mov	r2, #1
   14ed4:	ldrb	r3, [r1, #1]!
   14ed8:	b	14ec4 <__assert_fail@plt+0x31c0>
   14edc:	push	{r4, sl, fp, lr}
   14ee0:	add	fp, sp, #8
   14ee4:	mov	r4, r0
   14ee8:	bl	11af4 <strlen@plt>
   14eec:	mov	r1, r0
   14ef0:	sub	r2, r4, #1
   14ef4:	mov	r0, r1
   14ef8:	cmp	r1, #2
   14efc:	popcc	{r4, sl, fp, pc}
   14f00:	ldrb	r3, [r2, r0]
   14f04:	sub	r1, r0, #1
   14f08:	cmp	r3, #47	; 0x2f
   14f0c:	beq	14ef4 <__assert_fail@plt+0x31f0>
   14f10:	pop	{r4, sl, fp, pc}
   14f14:	movw	r1, #49812	; 0xc294
   14f18:	movt	r1, #3
   14f1c:	str	r0, [r1]
   14f20:	bx	lr
   14f24:	movw	r1, #49816	; 0xc298
   14f28:	movt	r1, #3
   14f2c:	strb	r0, [r1]
   14f30:	bx	lr
   14f34:	push	{r4, r5, r6, sl, fp, lr}
   14f38:	add	fp, sp, #16
   14f3c:	sub	sp, sp, #8
   14f40:	movw	r0, #49692	; 0xc21c
   14f44:	movt	r0, #3
   14f48:	ldr	r0, [r0]
   14f4c:	bl	28b60 <__assert_fail@plt+0x16e5c>
   14f50:	cmp	r0, #0
   14f54:	beq	14f7c <__assert_fail@plt+0x3278>
   14f58:	movw	r0, #49816	; 0xc298
   14f5c:	movt	r0, #3
   14f60:	ldrb	r0, [r0]
   14f64:	cmp	r0, #0
   14f68:	beq	14f9c <__assert_fail@plt+0x3298>
   14f6c:	bl	11b24 <__errno_location@plt>
   14f70:	ldr	r0, [r0]
   14f74:	cmp	r0, #32
   14f78:	bne	14f9c <__assert_fail@plt+0x3298>
   14f7c:	movw	r0, #49688	; 0xc218
   14f80:	movt	r0, #3
   14f84:	ldr	r0, [r0]
   14f88:	bl	28b60 <__assert_fail@plt+0x16e5c>
   14f8c:	cmp	r0, #0
   14f90:	subeq	sp, fp, #16
   14f94:	popeq	{r4, r5, r6, sl, fp, pc}
   14f98:	b	1500c <__assert_fail@plt+0x3308>
   14f9c:	movw	r1, #42778	; 0xa71a
   14fa0:	movt	r1, #2
   14fa4:	mov	r0, #0
   14fa8:	mov	r2, #5
   14fac:	bl	11980 <dcgettext@plt>
   14fb0:	mov	r4, r0
   14fb4:	movw	r0, #49812	; 0xc294
   14fb8:	movt	r0, #3
   14fbc:	ldr	r6, [r0]
   14fc0:	bl	11b24 <__errno_location@plt>
   14fc4:	ldr	r5, [r0]
   14fc8:	cmp	r6, #0
   14fcc:	bne	14fe8 <__assert_fail@plt+0x32e4>
   14fd0:	movw	r2, #44964	; 0xafa4
   14fd4:	movt	r2, #2
   14fd8:	mov	r0, #0
   14fdc:	mov	r1, r5
   14fe0:	mov	r3, r4
   14fe4:	b	15008 <__assert_fail@plt+0x3304>
   14fe8:	mov	r0, r6
   14fec:	bl	18b04 <__assert_fail@plt+0x6e00>
   14ff0:	mov	r3, r0
   14ff4:	str	r4, [sp]
   14ff8:	movw	r2, #42790	; 0xa726
   14ffc:	movt	r2, #2
   15000:	mov	r0, #0
   15004:	mov	r1, r5
   15008:	bl	11a28 <error@plt>
   1500c:	movw	r0, #49592	; 0xc1b8
   15010:	movt	r0, #3
   15014:	ldr	r0, [r0]
   15018:	bl	11920 <_exit@plt>
   1501c:	sub	sp, sp, #8
   15020:	push	{fp, lr}
   15024:	mov	fp, sp
   15028:	sub	sp, sp, #8
   1502c:	str	r3, [fp, #12]
   15030:	str	r2, [fp, #8]
   15034:	mov	r2, #0
   15038:	tst	r1, #64	; 0x40
   1503c:	addne	r2, fp, #8
   15040:	orrne	r2, r2, #4
   15044:	strne	r2, [sp, #4]
   15048:	ldrne	r2, [fp, #8]
   1504c:	bl	11a40 <open64@plt>
   15050:	bl	190f0 <__assert_fail@plt+0x73ec>
   15054:	mov	sp, fp
   15058:	pop	{fp, lr}
   1505c:	add	sp, sp, #8
   15060:	bx	lr
   15064:	andeq	r0, r0, r0
   15068:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1506c:	add	fp, sp, #28
   15070:	sub	sp, sp, #4
   15074:	vpush	{d8-d9}
   15078:	sub	sp, sp, #48	; 0x30
   1507c:	mov	r5, r3
   15080:	mov	r7, r2
   15084:	str	r1, [sp, #44]	; 0x2c
   15088:	str	r0, [sp, #40]	; 0x28
   1508c:	bl	11c38 <localeconv@plt>
   15090:	mov	r4, r0
   15094:	ldr	r6, [r0]
   15098:	mov	r0, r6
   1509c:	bl	11af4 <strlen@plt>
   150a0:	sub	r1, r0, #1
   150a4:	movw	r2, #38741	; 0x9755
   150a8:	movt	r2, #2
   150ac:	cmp	r1, #16
   150b0:	movcc	r2, r6
   150b4:	str	r2, [sp, #4]
   150b8:	movcs	r0, #1
   150bc:	str	r0, [sp, #8]
   150c0:	ldr	r6, [r4, #4]
   150c4:	ldr	r4, [r4, #8]
   150c8:	mov	r0, r6
   150cc:	bl	11af4 <strlen@plt>
   150d0:	movw	r1, #41527	; 0xa237
   150d4:	movt	r1, #2
   150d8:	cmp	r0, #17
   150dc:	movcc	r1, r6
   150e0:	movw	r0, #647	; 0x287
   150e4:	str	r7, [sp, #28]
   150e8:	add	r0, r7, r0
   150ec:	str	r0, [sp, #32]
   150f0:	ands	r0, r5, #32
   150f4:	str	r0, [sp, #20]
   150f8:	mov	r6, #1000	; 0x3e8
   150fc:	movwne	r6, #1024	; 0x400
   15100:	and	r7, r5, #3
   15104:	ldr	r3, [fp, #20]
   15108:	ldr	r2, [fp, #16]
   1510c:	ldr	r8, [fp, #12]
   15110:	ldr	sl, [fp, #8]
   15114:	subs	r0, sl, r2
   15118:	sbcs	r0, r8, r3
   1511c:	str	r5, [sp, #36]	; 0x24
   15120:	str	r4, [sp, #16]
   15124:	str	r1, [sp, #12]
   15128:	str	r7, [sp, #24]
   1512c:	bcs	15228 <__assert_fail@plt+0x3524>
   15130:	orrs	r0, sl, r8
   15134:	beq	1531c <__assert_fail@plt+0x3618>
   15138:	mov	r0, r2
   1513c:	mov	r1, r3
   15140:	mov	r2, sl
   15144:	mov	r3, r8
   15148:	bl	29344 <__assert_fail@plt+0x17640>
   1514c:	ldr	r2, [fp, #16]
   15150:	ldr	r3, [fp, #20]
   15154:	mov	r5, r0
   15158:	mov	r7, r1
   1515c:	umull	r0, r1, r0, sl
   15160:	mla	r1, r5, r8, r1
   15164:	mla	r1, r7, sl, r1
   15168:	subs	r0, r2, r0
   1516c:	sbc	r1, r3, r1
   15170:	orrs	r0, r0, r1
   15174:	bne	1531c <__assert_fail@plt+0x3618>
   15178:	ldr	sl, [sp, #40]	; 0x28
   1517c:	mov	r0, sl
   15180:	ldr	r4, [sp, #44]	; 0x2c
   15184:	mov	r1, r4
   15188:	mov	r2, r5
   1518c:	mov	r3, r7
   15190:	mov	r8, r7
   15194:	bl	29344 <__assert_fail@plt+0x17640>
   15198:	mov	r9, r0
   1519c:	mov	r7, r1
   151a0:	umull	r0, r1, r0, r5
   151a4:	mla	r1, r9, r8, r1
   151a8:	mla	r1, r7, r5, r1
   151ac:	subs	r0, sl, r0
   151b0:	sbc	r1, r4, r1
   151b4:	add	r1, r1, r1, lsl #2
   151b8:	mov	r2, #10
   151bc:	umull	r0, r2, r0, r2
   151c0:	str	r0, [sp, #44]	; 0x2c
   151c4:	add	sl, r2, r1, lsl #1
   151c8:	mov	r1, sl
   151cc:	mov	r2, r5
   151d0:	mov	r3, r8
   151d4:	bl	29344 <__assert_fail@plt+0x17640>
   151d8:	mov	r4, r0
   151dc:	umull	r0, r2, r0, r5
   151e0:	mla	r2, r4, r8, r2
   151e4:	mla	r1, r1, r5, r2
   151e8:	ldr	r2, [sp, #44]	; 0x2c
   151ec:	subs	r0, r2, r0
   151f0:	sbc	r1, sl, r1
   151f4:	lsl	r1, r1, #1
   151f8:	orr	r1, r1, r0, lsr #31
   151fc:	mov	r2, #2
   15200:	subs	r3, r5, r0, lsl #1
   15204:	sbcs	r3, r8, r1
   15208:	movwcc	r2, #3
   1520c:	orr	sl, r1, r0, lsl #1
   15210:	cmp	sl, #0
   15214:	movwne	sl, #1
   15218:	rsbs	r0, r5, r0, lsl #1
   1521c:	sbcs	r0, r1, r8
   15220:	movcs	sl, r2
   15224:	b	152b0 <__assert_fail@plt+0x35ac>
   15228:	mov	r0, sl
   1522c:	mov	r1, r8
   15230:	bl	29344 <__assert_fail@plt+0x17640>
   15234:	ldr	r2, [fp, #16]
   15238:	ldr	r3, [fp, #20]
   1523c:	mov	r4, r0
   15240:	mov	r5, r1
   15244:	umull	r0, r1, r0, r2
   15248:	mla	r1, r4, r3, r1
   1524c:	mla	r1, r5, r2, r1
   15250:	subs	r0, sl, r0
   15254:	sbc	r1, r8, r1
   15258:	orrs	r0, r0, r1
   1525c:	bne	1531c <__assert_fail@plt+0x3618>
   15260:	ldr	r1, [sp, #40]	; 0x28
   15264:	umull	r9, r0, r4, r1
   15268:	ldr	r2, [sp, #44]	; 0x2c
   1526c:	mla	r0, r4, r2, r0
   15270:	mla	r7, r5, r1, r0
   15274:	mov	r0, r9
   15278:	mov	r1, r7
   1527c:	mov	r2, r4
   15280:	mov	r3, r5
   15284:	bl	29344 <__assert_fail@plt+0x17640>
   15288:	ldr	r2, [fp, #16]
   1528c:	ldr	r3, [fp, #20]
   15290:	ldr	r5, [sp, #44]	; 0x2c
   15294:	eor	r1, r1, r5
   15298:	ldr	r5, [sp, #40]	; 0x28
   1529c:	eor	r0, r0, r5
   152a0:	orrs	r0, r0, r1
   152a4:	bne	1531c <__assert_fail@plt+0x3618>
   152a8:	mov	sl, #0
   152ac:	mov	r4, #0
   152b0:	ldr	r0, [sp, #36]	; 0x24
   152b4:	ands	ip, r0, #16
   152b8:	mvn	r5, #0
   152bc:	beq	152d0 <__assert_fail@plt+0x35cc>
   152c0:	mov	r5, #0
   152c4:	subs	r0, r9, r6
   152c8:	sbcs	r0, r7, #0
   152cc:	bcs	1551c <__assert_fail@plt+0x3818>
   152d0:	ldr	r3, [sp, #32]
   152d4:	mov	r8, r9
   152d8:	ldr	r9, [sp, #24]
   152dc:	cmp	r9, #0
   152e0:	beq	15670 <__assert_fail@plt+0x396c>
   152e4:	cmp	r9, #1
   152e8:	bne	15510 <__assert_fail@plt+0x380c>
   152ec:	mov	r0, #0
   152f0:	rsbs	r1, sl, #0
   152f4:	sbc	r0, r0, #0
   152f8:	and	r2, r8, #1
   152fc:	eor	r1, r2, r1
   15300:	orrs	r0, r1, r0
   15304:	addne	r4, r4, #1
   15308:	cmp	r4, #5
   1530c:	ldr	r9, [sp, #32]
   15310:	ldr	sl, [sp, #28]
   15314:	bgt	15684 <__assert_fail@plt+0x3980>
   15318:	b	156e0 <__assert_fail@plt+0x39dc>
   1531c:	mov	r0, r2
   15320:	mov	r1, r3
   15324:	bl	292d0 <__assert_fail@plt+0x175cc>
   15328:	vmov	d8, r0, r1
   1532c:	ldr	r0, [sp, #40]	; 0x28
   15330:	ldr	r1, [sp, #44]	; 0x2c
   15334:	bl	292d0 <__assert_fail@plt+0x175cc>
   15338:	mov	r5, r0
   1533c:	mov	r7, r1
   15340:	mov	r0, sl
   15344:	mov	r1, r8
   15348:	bl	292d0 <__assert_fail@plt+0x175cc>
   1534c:	vmov	d16, r0, r1
   15350:	vmov	d17, r5, r7
   15354:	vdiv.f64	d16, d16, d8
   15358:	vmul.f64	d0, d16, d17
   1535c:	ldr	r8, [sp, #36]	; 0x24
   15360:	tst	r8, #16
   15364:	bne	153a4 <__assert_fail@plt+0x36a0>
   15368:	ldr	r0, [sp, #24]
   1536c:	bl	157f0 <__assert_fail@plt+0x3aec>
   15370:	vmov	r2, r3, d0
   15374:	movw	r1, #42797	; 0xa72d
   15378:	movt	r1, #2
   1537c:	ldr	sl, [sp, #28]
   15380:	mov	r0, sl
   15384:	bl	11c50 <sprintf@plt>
   15388:	mov	r0, sl
   1538c:	bl	11af4 <strlen@plt>
   15390:	mov	r2, r0
   15394:	mov	r7, #0
   15398:	mvn	r5, #0
   1539c:	ldr	r9, [sp, #32]
   153a0:	b	15484 <__assert_fail@plt+0x3780>
   153a4:	vmov.f64	d16, #112	; 0x3f800000  1.0
   153a8:	vmov	s2, r6
   153ac:	vcvt.f64.u32	d17, s2
   153b0:	mov	r5, #0
   153b4:	vmul.f64	d16, d16, d17
   153b8:	add	r5, r5, #1
   153bc:	cmp	r5, #7
   153c0:	vmulls.f64	d18, d16, d17
   153c4:	vcmpels.f64	d18, d0
   153c8:	vmrsls	APSR_nzcv, fpscr
   153cc:	bls	153b4 <__assert_fail@plt+0x36b0>
   153d0:	vdiv.f64	d8, d0, d16
   153d4:	ldr	r9, [sp, #24]
   153d8:	mov	r0, r9
   153dc:	vmov.f64	d0, d8
   153e0:	bl	157f0 <__assert_fail@plt+0x3aec>
   153e4:	vmov	r2, r3, d0
   153e8:	movw	r1, #42803	; 0xa733
   153ec:	movt	r1, #2
   153f0:	ldr	sl, [sp, #28]
   153f4:	mov	r0, sl
   153f8:	bl	11c50 <sprintf@plt>
   153fc:	mov	r0, #3
   15400:	ldr	r1, [sp, #20]
   15404:	cmp	r1, #0
   15408:	movwne	r0, #2
   1540c:	ldr	r7, [sp, #8]
   15410:	add	r4, r0, r7
   15414:	mov	r0, sl
   15418:	bl	11af4 <strlen@plt>
   1541c:	cmp	r4, r0
   15420:	ldr	r4, [sp, #32]
   15424:	bcc	15448 <__assert_fail@plt+0x3744>
   15428:	mov	r2, r0
   1542c:	add	r7, r7, #1
   15430:	tst	r8, #8
   15434:	beq	15480 <__assert_fail@plt+0x377c>
   15438:	add	r0, sl, r2
   1543c:	ldrb	r0, [r0, #-1]
   15440:	cmp	r0, #48	; 0x30
   15444:	bne	15480 <__assert_fail@plt+0x377c>
   15448:	vmov.f64	d9, #36	; 0x41200000  10.0
   1544c:	vmul.f64	d0, d8, d9
   15450:	mov	r0, r9
   15454:	bl	157f0 <__assert_fail@plt+0x3aec>
   15458:	vdiv.f64	d16, d0, d9
   1545c:	vmov	r2, r3, d16
   15460:	movw	r1, #42797	; 0xa72d
   15464:	movt	r1, #2
   15468:	mov	r0, sl
   1546c:	bl	11c50 <sprintf@plt>
   15470:	mov	r0, sl
   15474:	bl	11af4 <strlen@plt>
   15478:	mov	r2, r0
   1547c:	mov	r7, #0
   15480:	mov	r9, r4
   15484:	sub	r4, r9, r2
   15488:	mov	r0, r4
   1548c:	mov	r1, sl
   15490:	bl	118e4 <memmove@plt>
   15494:	sub	r0, r9, r7
   15498:	tst	r8, #4
   1549c:	beq	154b8 <__assert_fail@plt+0x37b4>
   154a0:	sub	r1, r0, r4
   154a4:	mov	r0, r4
   154a8:	ldr	r2, [sp, #16]
   154ac:	ldr	r3, [sp, #12]
   154b0:	bl	15878 <__assert_fail@plt+0x3b74>
   154b4:	mov	r4, r0
   154b8:	ldr	r3, [fp, #20]
   154bc:	ldr	r7, [fp, #16]
   154c0:	tst	r8, #128	; 0x80
   154c4:	beq	15640 <__assert_fail@plt+0x393c>
   154c8:	cmn	r5, #1
   154cc:	bgt	155d8 <__assert_fail@plt+0x38d4>
   154d0:	mov	r5, #0
   154d4:	subs	r0, r7, #2
   154d8:	sbcs	r0, r3, #0
   154dc:	bcc	155d8 <__assert_fail@plt+0x38d4>
   154e0:	mov	r0, #0
   154e4:	mov	r1, #1
   154e8:	mov	r5, #0
   154ec:	cmp	r5, #7
   154f0:	beq	155d4 <__assert_fail@plt+0x38d0>
   154f4:	add	r5, r5, #1
   154f8:	umull	r1, r2, r1, r6
   154fc:	mla	r0, r0, r6, r2
   15500:	subs	r2, r1, r7
   15504:	sbcs	r2, r0, r3
   15508:	bcc	154ec <__assert_fail@plt+0x37e8>
   1550c:	b	155d8 <__assert_fail@plt+0x38d4>
   15510:	ldr	r9, [sp, #32]
   15514:	ldr	sl, [sp, #28]
   15518:	b	156e0 <__assert_fail@plt+0x39dc>
   1551c:	str	ip, [sp, #44]	; 0x2c
   15520:	mov	r5, #0
   15524:	mov	r0, r9
   15528:	mov	r1, r7
   1552c:	mov	r2, r6
   15530:	mov	r3, #0
   15534:	bl	29344 <__assert_fail@plt+0x17640>
   15538:	mov	r8, r0
   1553c:	mov	r7, r1
   15540:	mls	r0, r0, r6, r9
   15544:	add	r0, r0, r0, lsl #2
   15548:	add	r0, r4, r0, lsl #1
   1554c:	udiv	r4, r0, r6
   15550:	mls	r0, r4, r6, r0
   15554:	lsl	r0, r0, #1
   15558:	add	r0, r0, sl, lsr #1
   1555c:	cmp	r0, r6
   15560:	bcs	15578 <__assert_fail@plt+0x3874>
   15564:	add	r1, r0, sl
   15568:	cmn	r0, sl
   1556c:	movwne	r1, #1
   15570:	mov	sl, r1
   15574:	b	15588 <__assert_fail@plt+0x3884>
   15578:	add	r0, r0, sl
   1557c:	cmp	r6, r0
   15580:	mov	sl, #2
   15584:	movwcc	sl, #3
   15588:	add	r5, r5, #1
   1558c:	cmp	r5, #7
   15590:	bhi	155a4 <__assert_fail@plt+0x38a0>
   15594:	subs	r0, r8, r6
   15598:	sbcs	r0, r7, #0
   1559c:	mov	r9, r8
   155a0:	bcs	15524 <__assert_fail@plt+0x3820>
   155a4:	rsbs	r0, r8, #9
   155a8:	rscs	r0, r7, #0
   155ac:	bcc	1565c <__assert_fail@plt+0x3958>
   155b0:	ldr	r9, [sp, #24]
   155b4:	cmp	r9, #1
   155b8:	ldr	ip, [sp, #44]	; 0x2c
   155bc:	bne	15734 <__assert_fail@plt+0x3a30>
   155c0:	and	r0, r4, #1
   155c4:	add	r0, sl, r0
   155c8:	cmp	r0, #2
   155cc:	bhi	15744 <__assert_fail@plt+0x3a40>
   155d0:	b	15778 <__assert_fail@plt+0x3a74>
   155d4:	mov	r5, #8
   155d8:	and	r0, r8, #256	; 0x100
   155dc:	tst	r8, #64	; 0x40
   155e0:	orrsne	r1, r5, r0
   155e4:	movne	r1, #32
   155e8:	strbne	r1, [sl, #647]	; 0x287
   155ec:	addne	r9, sl, #648	; 0x288
   155f0:	cmp	r5, #0
   155f4:	beq	1561c <__assert_fail@plt+0x3918>
   155f8:	ldr	r1, [sp, #20]
   155fc:	cmp	r1, #0
   15600:	moveq	r1, #107	; 0x6b
   15604:	cmpeq	r5, #1
   15608:	beq	15618 <__assert_fail@plt+0x3914>
   1560c:	movw	r1, #42884	; 0xa784
   15610:	movt	r1, #2
   15614:	ldrb	r1, [r1, r5]
   15618:	strb	r1, [r9], #1
   1561c:	cmp	r0, #0
   15620:	beq	15640 <__assert_fail@plt+0x393c>
   15624:	ldr	r0, [sp, #20]
   15628:	cmp	r0, #0
   1562c:	cmpne	r5, #0
   15630:	movne	r0, #105	; 0x69
   15634:	strbne	r0, [r9], #1
   15638:	mov	r0, #66	; 0x42
   1563c:	strb	r0, [r9], #1
   15640:	mov	r0, #0
   15644:	strb	r0, [r9]
   15648:	mov	r0, r4
   1564c:	sub	sp, fp, #48	; 0x30
   15650:	vpop	{d8-d9}
   15654:	add	sp, sp, #4
   15658:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1565c:	ldr	r3, [sp, #32]
   15660:	ldr	r9, [sp, #24]
   15664:	ldr	ip, [sp, #44]	; 0x2c
   15668:	cmp	r9, #0
   1566c:	bne	152e4 <__assert_fail@plt+0x35e0>
   15670:	add	r0, r4, sl
   15674:	cmp	r0, #1
   15678:	ldr	r9, [sp, #32]
   1567c:	ldr	sl, [sp, #28]
   15680:	blt	156e0 <__assert_fail@plt+0x39dc>
   15684:	adds	r8, r8, #1
   15688:	adc	r7, r7, #0
   1568c:	cmp	r5, #7
   15690:	bgt	156e0 <__assert_fail@plt+0x39dc>
   15694:	cmp	ip, #0
   15698:	beq	156e0 <__assert_fail@plt+0x39dc>
   1569c:	eor	r0, r8, r6
   156a0:	orrs	r0, r0, r7
   156a4:	addeq	r5, r5, #1
   156a8:	moveq	r7, #0
   156ac:	moveq	r8, #1
   156b0:	ldreq	r0, [sp, #36]	; 0x24
   156b4:	tsteq	r0, #8
   156b8:	bne	156e0 <__assert_fail@plt+0x39dc>
   156bc:	mov	r0, #48	; 0x30
   156c0:	strb	r0, [r3, #-1]!
   156c4:	ldr	r2, [sp, #8]
   156c8:	sub	r3, r3, r2
   156cc:	mov	r0, r3
   156d0:	ldr	r1, [sp, #4]
   156d4:	mov	r4, r3
   156d8:	bl	1192c <memcpy@plt>
   156dc:	mov	r3, r4
   156e0:	str	r3, [sp, #44]	; 0x2c
   156e4:	mov	r4, r3
   156e8:	mov	r0, r8
   156ec:	mov	r1, r7
   156f0:	mov	r2, #10
   156f4:	mov	r3, #0
   156f8:	bl	29344 <__assert_fail@plt+0x17640>
   156fc:	add	r2, r0, r0, lsl #2
   15700:	sub	r2, r8, r2, lsl #1
   15704:	orr	r2, r2, #48	; 0x30
   15708:	strb	r2, [r4, #-1]!
   1570c:	rsbs	r2, r8, #9
   15710:	rscs	r2, r7, #0
   15714:	mov	r8, r0
   15718:	mov	r7, r1
   1571c:	bcc	156e8 <__assert_fail@plt+0x39e4>
   15720:	ldr	r8, [sp, #36]	; 0x24
   15724:	ldr	r0, [sp, #44]	; 0x2c
   15728:	tst	r8, #4
   1572c:	bne	154a0 <__assert_fail@plt+0x379c>
   15730:	b	154b8 <__assert_fail@plt+0x37b4>
   15734:	cmp	r9, #0
   15738:	bne	15778 <__assert_fail@plt+0x3a74>
   1573c:	cmp	sl, #0
   15740:	beq	15778 <__assert_fail@plt+0x3a74>
   15744:	adds	r0, r8, #1
   15748:	adc	r1, r7, #0
   1574c:	add	r4, r4, #1
   15750:	mov	sl, #0
   15754:	cmp	r4, #10
   15758:	bne	15778 <__assert_fail@plt+0x3a74>
   1575c:	mov	r4, #0
   15760:	rsbs	r2, r0, #9
   15764:	rscs	r2, r1, #0
   15768:	mov	r8, r0
   1576c:	mov	r7, r1
   15770:	mov	sl, #0
   15774:	bcc	157d0 <__assert_fail@plt+0x3acc>
   15778:	ldr	r0, [sp, #36]	; 0x24
   1577c:	tst	r0, #8
   15780:	beq	15794 <__assert_fail@plt+0x3a90>
   15784:	cmp	r4, #0
   15788:	bne	15794 <__assert_fail@plt+0x3a90>
   1578c:	ldr	r3, [sp, #32]
   15790:	b	157c0 <__assert_fail@plt+0x3abc>
   15794:	add	r0, r4, #48	; 0x30
   15798:	ldr	r1, [sp, #28]
   1579c:	strb	r0, [r1, #646]!	; 0x286
   157a0:	ldr	r2, [sp, #8]
   157a4:	sub	r4, r1, r2
   157a8:	mov	r0, r4
   157ac:	ldr	r1, [sp, #4]
   157b0:	bl	1192c <memcpy@plt>
   157b4:	mov	r3, r4
   157b8:	ldr	ip, [sp, #44]	; 0x2c
   157bc:	mov	sl, #0
   157c0:	mov	r4, #0
   157c4:	cmp	r9, #0
   157c8:	bne	152e4 <__assert_fail@plt+0x35e0>
   157cc:	b	15670 <__assert_fail@plt+0x396c>
   157d0:	mov	sl, #0
   157d4:	ldr	r3, [sp, #32]
   157d8:	mov	r8, #10
   157dc:	mov	r7, #0
   157e0:	cmp	r9, #0
   157e4:	bne	152e4 <__assert_fail@plt+0x35e0>
   157e8:	b	15670 <__assert_fail@plt+0x396c>
   157ec:	nop	{0}
   157f0:	push	{r4, r5, r6, sl, fp, lr}
   157f4:	add	fp, sp, #16
   157f8:	vpush	{d8}
   157fc:	vmov.f64	d8, d0
   15800:	cmp	r0, #1
   15804:	beq	15860 <__assert_fail@plt+0x3b5c>
   15808:	vldr	d16, [pc, #96]	; 15870 <__assert_fail@plt+0x3b6c>
   1580c:	vcmpe.f64	d8, d16
   15810:	vmrs	APSR_nzcv, fpscr
   15814:	bpl	15860 <__assert_fail@plt+0x3b5c>
   15818:	mov	r4, r0
   1581c:	vmov	r0, r1, d8
   15820:	bl	29390 <__assert_fail@plt+0x1768c>
   15824:	mov	r5, r0
   15828:	mov	r6, r1
   1582c:	bl	292d0 <__assert_fail@plt+0x175cc>
   15830:	mov	r2, #0
   15834:	vmov	d16, r0, r1
   15838:	vcmp.f64	d16, d8
   1583c:	vmrs	APSR_nzcv, fpscr
   15840:	movwne	r2, #1
   15844:	clz	r0, r4
   15848:	lsr	r0, r0, #5
   1584c:	and	r0, r0, r2
   15850:	adds	r0, r0, r5
   15854:	adc	r1, r6, #0
   15858:	bl	292d0 <__assert_fail@plt+0x175cc>
   1585c:	vmov	d8, r0, r1
   15860:	vorr	d0, d8, d8
   15864:	vpop	{d8}
   15868:	pop	{r4, r5, r6, sl, fp, pc}
   1586c:	nop	{0}
   15870:	andeq	r0, r0, r0
   15874:	mvnsmi	r0, #0
   15878:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1587c:	add	fp, sp, #28
   15880:	sub	sp, sp, #52	; 0x34
   15884:	mov	r5, r3
   15888:	mov	r9, r2
   1588c:	mov	r6, r1
   15890:	mov	r4, r0
   15894:	mov	r0, r3
   15898:	bl	11af4 <strlen@plt>
   1589c:	str	r0, [sp, #4]
   158a0:	add	sl, sp, #8
   158a4:	mov	r0, sl
   158a8:	mov	r1, r4
   158ac:	mov	r2, r6
   158b0:	bl	1192c <memcpy@plt>
   158b4:	add	r0, r4, r6
   158b8:	ldrb	r7, [r9]
   158bc:	cmp	r7, #255	; 0xff
   158c0:	mov	r8, r7
   158c4:	moveq	r8, r6
   158c8:	cmp	r7, #0
   158cc:	mvneq	r8, #0
   158d0:	cmp	r8, r6
   158d4:	movhi	r8, r6
   158d8:	sub	r4, r0, r8
   158dc:	sub	r6, r6, r8
   158e0:	add	r1, sl, r6
   158e4:	mov	r0, r4
   158e8:	mov	r2, r8
   158ec:	bl	1192c <memcpy@plt>
   158f0:	cmp	r6, #0
   158f4:	beq	15984 <__assert_fail@plt+0x3c80>
   158f8:	clz	r0, r7
   158fc:	lsr	sl, r0, #5
   15900:	ldr	r0, [sp, #4]
   15904:	rsb	r0, r0, #0
   15908:	str	r0, [sp]
   1590c:	ldr	r0, [sp]
   15910:	add	r4, r4, r0
   15914:	mov	r0, r4
   15918:	mov	r1, r5
   1591c:	ldr	r2, [sp, #4]
   15920:	bl	1192c <memcpy@plt>
   15924:	tst	sl, #1
   15928:	addeq	r9, r9, #1
   1592c:	mov	sl, r5
   15930:	ldrb	r5, [r9]
   15934:	cmp	r5, #255	; 0xff
   15938:	mov	r7, r5
   1593c:	moveq	r7, r6
   15940:	cmp	r5, #0
   15944:	moveq	r7, r8
   15948:	cmp	r6, r7
   1594c:	movcc	r7, r6
   15950:	sub	r4, r4, r7
   15954:	sub	r6, r6, r7
   15958:	add	r0, sp, #8
   1595c:	add	r1, r0, r6
   15960:	mov	r0, r4
   15964:	mov	r2, r7
   15968:	bl	1192c <memcpy@plt>
   1596c:	clz	r0, r5
   15970:	mov	r5, sl
   15974:	lsr	sl, r0, #5
   15978:	cmp	r6, #0
   1597c:	mov	r8, r7
   15980:	bne	1590c <__assert_fail@plt+0x3c08>
   15984:	mov	r0, r4
   15988:	sub	sp, fp, #28
   1598c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15990:	push	{r4, sl, fp, lr}
   15994:	add	fp, sp, #8
   15998:	mov	r4, r2
   1599c:	mov	r2, r1
   159a0:	mov	r1, r4
   159a4:	bl	159c4 <__assert_fail@plt+0x3cc0>
   159a8:	ldrd	r2, [r4]
   159ac:	orrs	r1, r2, r3
   159b0:	popne	{r4, sl, fp, pc}
   159b4:	bl	15b30 <__assert_fail@plt+0x3e2c>
   159b8:	strd	r0, [r4]
   159bc:	mov	r0, #4
   159c0:	pop	{r4, sl, fp, pc}
   159c4:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   159c8:	add	fp, sp, #24
   159cc:	sub	sp, sp, #8
   159d0:	mov	r8, r2
   159d4:	mov	r5, r1
   159d8:	cmp	r0, #0
   159dc:	bne	15a08 <__assert_fail@plt+0x3d04>
   159e0:	movw	r0, #42809	; 0xa739
   159e4:	movt	r0, #2
   159e8:	bl	11a4c <getenv@plt>
   159ec:	cmp	r0, #0
   159f0:	bne	15a08 <__assert_fail@plt+0x3d04>
   159f4:	movw	r0, #42820	; 0xa744
   159f8:	movt	r0, #2
   159fc:	bl	11a4c <getenv@plt>
   15a00:	cmp	r0, #0
   15a04:	beq	15b18 <__assert_fail@plt+0x3e14>
   15a08:	mov	r6, r0
   15a0c:	ldrb	r4, [r6], #1
   15a10:	cmp	r4, #39	; 0x27
   15a14:	movne	r6, r0
   15a18:	movw	r1, #42896	; 0xa790
   15a1c:	movt	r1, #2
   15a20:	movw	r7, #42908	; 0xa79c
   15a24:	movt	r7, #2
   15a28:	mov	r0, r6
   15a2c:	mov	r2, r7
   15a30:	mov	r3, #4
   15a34:	bl	284e8 <__assert_fail@plt+0x167e4>
   15a38:	sub	r1, r4, #39	; 0x27
   15a3c:	clz	r1, r1
   15a40:	lsr	r1, r1, #5
   15a44:	lsl	r4, r1, #2
   15a48:	cmp	r0, #0
   15a4c:	blt	15a6c <__assert_fail@plt+0x3d68>
   15a50:	mov	r1, #0
   15a54:	mov	r2, #1
   15a58:	str	r2, [r5]
   15a5c:	str	r1, [r5, #4]
   15a60:	ldr	r0, [r7, r0, lsl #2]
   15a64:	orr	r0, r0, r4
   15a68:	b	15ae0 <__assert_fail@plt+0x3ddc>
   15a6c:	movw	r0, #42830	; 0xa74e
   15a70:	movt	r0, #2
   15a74:	str	r0, [sp]
   15a78:	add	r1, sp, #4
   15a7c:	mov	r7, #0
   15a80:	mov	r0, r6
   15a84:	mov	r2, #0
   15a88:	mov	r3, r5
   15a8c:	bl	19a84 <__assert_fail@plt+0x7d80>
   15a90:	cmp	r0, #0
   15a94:	strne	r7, [r8]
   15a98:	subne	sp, fp, #24
   15a9c:	popne	{r4, r5, r6, r7, r8, sl, fp, pc}
   15aa0:	ldrb	r0, [r6]
   15aa4:	sub	r0, r0, #48	; 0x30
   15aa8:	uxtb	r0, r0
   15aac:	cmp	r0, #10
   15ab0:	bcc	15adc <__assert_fail@plt+0x3dd8>
   15ab4:	ldr	r1, [sp, #4]
   15ab8:	cmp	r1, r6
   15abc:	beq	15af0 <__assert_fail@plt+0x3dec>
   15ac0:	add	r0, r6, #1
   15ac4:	ldrb	r2, [r6, #1]
   15ac8:	sub	r2, r2, #48	; 0x30
   15acc:	uxtb	r2, r2
   15ad0:	cmp	r2, #10
   15ad4:	mov	r6, r0
   15ad8:	bcs	15ab8 <__assert_fail@plt+0x3db4>
   15adc:	mov	r0, r4
   15ae0:	str	r0, [r8]
   15ae4:	mov	r0, #0
   15ae8:	sub	sp, fp, #24
   15aec:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   15af0:	ldrb	r2, [r1, #-1]
   15af4:	orr	r0, r4, #384	; 0x180
   15af8:	cmp	r2, #66	; 0x42
   15afc:	mov	r2, r0
   15b00:	orrne	r2, r4, #128	; 0x80
   15b04:	bne	15b28 <__assert_fail@plt+0x3e24>
   15b08:	ldrb	r1, [r1, #-2]
   15b0c:	cmp	r1, #105	; 0x69
   15b10:	orreq	r0, r2, #32
   15b14:	b	15ae0 <__assert_fail@plt+0x3ddc>
   15b18:	bl	15b30 <__assert_fail@plt+0x3e2c>
   15b1c:	strd	r0, [r5]
   15b20:	mov	r0, #0
   15b24:	b	15ae0 <__assert_fail@plt+0x3ddc>
   15b28:	orr	r0, r2, #32
   15b2c:	b	15ae0 <__assert_fail@plt+0x3ddc>
   15b30:	push	{fp, lr}
   15b34:	mov	fp, sp
   15b38:	movw	r0, #42866	; 0xa772
   15b3c:	movt	r0, #2
   15b40:	bl	11a4c <getenv@plt>
   15b44:	mov	r1, #512	; 0x200
   15b48:	cmp	r0, #0
   15b4c:	movweq	r1, #1024	; 0x400
   15b50:	mov	r0, r1
   15b54:	mov	r1, #0
   15b58:	pop	{fp, pc}
   15b5c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   15b60:	add	fp, sp, #28
   15b64:	sub	sp, sp, #388	; 0x184
   15b68:	mov	r5, r1
   15b6c:	str	r0, [sp, #20]
   15b70:	bl	119f8 <__ctype_get_mb_cur_max@plt>
   15b74:	cmp	r0, #2
   15b78:	bcc	15f64 <__assert_fail@plt+0x4260>
   15b7c:	mov	r6, #0
   15b80:	str	r6, [fp, #-80]	; 0xffffffb0
   15b84:	str	r6, [fp, #-84]	; 0xffffffac
   15b88:	strb	r6, [fp, #-88]	; 0xffffffa8
   15b8c:	str	r5, [fp, #-72]	; 0xffffffb8
   15b90:	strb	r6, [fp, #-76]	; 0xffffffb4
   15b94:	sub	r4, fp, #88	; 0x58
   15b98:	mov	r0, r4
   15b9c:	bl	1723c <__assert_fail@plt+0x5538>
   15ba0:	ldrb	r0, [fp, #-64]	; 0xffffffc0
   15ba4:	cmp	r0, #0
   15ba8:	beq	15bb8 <__assert_fail@plt+0x3eb4>
   15bac:	ldr	r0, [fp, #-60]	; 0xffffffc4
   15bb0:	cmp	r0, #0
   15bb4:	beq	16124 <__assert_fail@plt+0x4420>
   15bb8:	add	r1, r4, #16
   15bbc:	str	r6, [fp, #-136]	; 0xffffff78
   15bc0:	str	r6, [fp, #-140]	; 0xffffff74
   15bc4:	strb	r6, [fp, #-144]	; 0xffffff70
   15bc8:	str	r5, [fp, #-128]	; 0xffffff80
   15bcc:	strb	r6, [fp, #-132]	; 0xffffff7c
   15bd0:	sub	r0, fp, #184	; 0xb8
   15bd4:	bl	28e58 <__assert_fail@plt+0x17154>
   15bd8:	ldrb	r0, [fp, #-176]	; 0xffffff50
   15bdc:	cmp	r0, #0
   15be0:	beq	15bf0 <__assert_fail@plt+0x3eec>
   15be4:	ldr	r0, [fp, #-172]	; 0xffffff54
   15be8:	bl	11950 <towlower@plt>
   15bec:	str	r0, [fp, #-172]	; 0xffffff54
   15bf0:	mov	r4, #0
   15bf4:	str	r4, [sp, #184]	; 0xb8
   15bf8:	str	r4, [sp, #180]	; 0xb4
   15bfc:	strb	r4, [sp, #176]	; 0xb0
   15c00:	ldr	r0, [sp, #20]
   15c04:	str	r0, [sp, #192]	; 0xc0
   15c08:	strb	r4, [sp, #188]	; 0xbc
   15c0c:	add	r0, sp, #176	; 0xb0
   15c10:	bl	1723c <__assert_fail@plt+0x5538>
   15c14:	ldrb	r0, [sp, #200]	; 0xc8
   15c18:	cmp	r0, #0
   15c1c:	beq	15c2c <__assert_fail@plt+0x3f28>
   15c20:	ldr	r0, [sp, #204]	; 0xcc
   15c24:	cmp	r0, #0
   15c28:	beq	16130 <__assert_fail@plt+0x442c>
   15c2c:	add	r0, sp, #176	; 0xb0
   15c30:	add	r0, r0, #16
   15c34:	str	r0, [sp, #12]
   15c38:	add	r0, sp, #24
   15c3c:	add	r0, r0, #4
   15c40:	str	r0, [sp, #4]
   15c44:	mov	sl, #0
   15c48:	mov	r0, #1
   15c4c:	str	r0, [sp, #8]
   15c50:	sub	r9, fp, #144	; 0x90
   15c54:	mov	r6, #0
   15c58:	mov	r7, #0
   15c5c:	mov	r1, #0
   15c60:	mov	r4, r7
   15c64:	add	r0, r6, r6, lsl #2
   15c68:	cmp	r7, r0
   15c6c:	bcc	15d1c <__assert_fail@plt+0x4018>
   15c70:	ldr	r0, [sp, #8]
   15c74:	tst	r0, #1
   15c78:	beq	15d1c <__assert_fail@plt+0x4018>
   15c7c:	cmp	r6, #10
   15c80:	bcc	15d1c <__assert_fail@plt+0x4018>
   15c84:	subs	r0, r4, r1
   15c88:	beq	15ccc <__assert_fail@plt+0x3fc8>
   15c8c:	sub	r7, r1, r4
   15c90:	mov	r0, r9
   15c94:	bl	1723c <__assert_fail@plt+0x5538>
   15c98:	ldrb	r0, [fp, #-120]	; 0xffffff88
   15c9c:	cmp	r0, #0
   15ca0:	beq	15cb0 <__assert_fail@plt+0x3fac>
   15ca4:	ldr	r0, [fp, #-116]	; 0xffffff8c
   15ca8:	cmp	r0, #0
   15cac:	beq	15ccc <__assert_fail@plt+0x3fc8>
   15cb0:	strb	sl, [fp, #-132]	; 0xffffff7c
   15cb4:	ldr	r0, [fp, #-128]	; 0xffffff80
   15cb8:	ldr	r1, [fp, #-124]	; 0xffffff84
   15cbc:	add	r0, r0, r1
   15cc0:	str	r0, [fp, #-128]	; 0xffffff80
   15cc4:	adds	r7, r7, #1
   15cc8:	bne	15c90 <__assert_fail@plt+0x3f8c>
   15ccc:	mov	r0, r9
   15cd0:	bl	1723c <__assert_fail@plt+0x5538>
   15cd4:	ldrb	r0, [fp, #-120]	; 0xffffff88
   15cd8:	cmp	r0, #0
   15cdc:	beq	15d18 <__assert_fail@plt+0x4014>
   15ce0:	ldr	r0, [fp, #-116]	; 0xffffff8c
   15ce4:	cmp	r0, #0
   15ce8:	mov	r1, r4
   15cec:	bne	15d1c <__assert_fail@plt+0x4018>
   15cf0:	ldr	r0, [sp, #20]
   15cf4:	mov	r1, r5
   15cf8:	add	r2, sp, #80	; 0x50
   15cfc:	bl	16150 <__assert_fail@plt+0x444c>
   15d00:	mov	r1, #0
   15d04:	str	r1, [sp, #8]
   15d08:	cmp	r0, #0
   15d0c:	mov	r1, r4
   15d10:	beq	15d1c <__assert_fail@plt+0x4018>
   15d14:	b	16144 <__assert_fail@plt+0x4440>
   15d18:	mov	r1, r4
   15d1c:	str	r1, [sp, #16]
   15d20:	add	r0, sp, #136	; 0x88
   15d24:	ldr	r1, [sp, #12]
   15d28:	bl	28e58 <__assert_fail@plt+0x17154>
   15d2c:	ldrb	r0, [sp, #144]	; 0x90
   15d30:	cmp	r0, #0
   15d34:	beq	15d44 <__assert_fail@plt+0x4040>
   15d38:	ldr	r0, [sp, #148]	; 0x94
   15d3c:	bl	11950 <towlower@plt>
   15d40:	str	r0, [sp, #148]	; 0x94
   15d44:	add	r7, r4, #1
   15d48:	ldrb	r0, [sp, #144]	; 0x90
   15d4c:	cmp	r0, #0
   15d50:	ldrbne	r0, [fp, #-176]	; 0xffffff50
   15d54:	cmpne	r0, #0
   15d58:	bne	15d84 <__assert_fail@plt+0x4080>
   15d5c:	ldr	r2, [sp, #140]	; 0x8c
   15d60:	ldr	r0, [fp, #-180]	; 0xffffff4c
   15d64:	cmp	r2, r0
   15d68:	bne	15f20 <__assert_fail@plt+0x421c>
   15d6c:	ldr	r1, [fp, #-184]	; 0xffffff48
   15d70:	ldr	r0, [sp, #136]	; 0x88
   15d74:	bl	11974 <memcmp@plt>
   15d78:	cmp	r0, #0
   15d7c:	bne	15f20 <__assert_fail@plt+0x421c>
   15d80:	b	15d94 <__assert_fail@plt+0x4090>
   15d84:	ldr	r0, [fp, #-172]	; 0xffffff54
   15d88:	ldr	r1, [sp, #148]	; 0x94
   15d8c:	cmp	r1, r0
   15d90:	bne	15f20 <__assert_fail@plt+0x421c>
   15d94:	add	r2, sp, #176	; 0xb0
   15d98:	mov	r0, r2
   15d9c:	mov	r1, #48	; 0x30
   15da0:	vld1.64	{d16-d17}, [r0], r1
   15da4:	ldr	r1, [sp, #12]
   15da8:	vld1.64	{d18-d19}, [r1]
   15dac:	add	r3, sp, #80	; 0x50
   15db0:	add	r1, r3, #16
   15db4:	add	r2, r2, #32
   15db8:	vld1.64	{d20-d21}, [r2]
   15dbc:	vldr	d22, [r0]
   15dc0:	vst1.64	{d18-d19}, [r1]
   15dc4:	add	r0, r3, #32
   15dc8:	vst1.64	{d20-d21}, [r0]
   15dcc:	mov	r0, r3
   15dd0:	mov	r1, #12
   15dd4:	vst1.64	{d16-d17}, [r0], r1
   15dd8:	strb	sl, [r0]
   15ddc:	str	r5, [sp, #40]	; 0x28
   15de0:	strb	sl, [sp, #24]
   15de4:	vstr	d22, [sp, #128]	; 0x80
   15de8:	ldr	r0, [sp, #96]	; 0x60
   15dec:	ldr	r1, [sp, #100]	; 0x64
   15df0:	add	r0, r0, r1
   15df4:	str	r0, [sp, #96]	; 0x60
   15df8:	ldr	r0, [sp, #4]
   15dfc:	str	sl, [r0]
   15e00:	str	sl, [r0, #4]
   15e04:	strb	sl, [sp, #36]	; 0x24
   15e08:	add	r0, sp, #24
   15e0c:	bl	1723c <__assert_fail@plt+0x5538>
   15e10:	ldrb	r0, [sp, #48]	; 0x30
   15e14:	cmp	r0, #0
   15e18:	beq	15e28 <__assert_fail@plt+0x4124>
   15e1c:	ldr	r0, [sp, #52]	; 0x34
   15e20:	cmp	r0, #0
   15e24:	beq	1614c <__assert_fail@plt+0x4448>
   15e28:	strb	sl, [sp, #36]	; 0x24
   15e2c:	ldr	r0, [sp, #40]	; 0x28
   15e30:	ldr	r1, [sp, #44]	; 0x2c
   15e34:	add	r0, r0, r1
   15e38:	str	r0, [sp, #40]	; 0x28
   15e3c:	add	r0, sp, #24
   15e40:	bl	1723c <__assert_fail@plt+0x5538>
   15e44:	ldrb	r0, [sp, #48]	; 0x30
   15e48:	cmp	r0, #0
   15e4c:	beq	15e5c <__assert_fail@plt+0x4158>
   15e50:	ldr	r0, [sp, #52]	; 0x34
   15e54:	cmp	r0, #0
   15e58:	beq	1613c <__assert_fail@plt+0x4438>
   15e5c:	add	r7, r4, #2
   15e60:	add	r0, sp, #80	; 0x50
   15e64:	bl	1723c <__assert_fail@plt+0x5538>
   15e68:	ldr	r0, [sp, #108]	; 0x6c
   15e6c:	ldrb	r1, [sp, #104]	; 0x68
   15e70:	cmp	r0, #0
   15e74:	bne	15e80 <__assert_fail@plt+0x417c>
   15e78:	cmp	r1, #0
   15e7c:	bne	1612c <__assert_fail@plt+0x4428>
   15e80:	cmp	r1, #0
   15e84:	ldrbne	r1, [sp, #48]	; 0x30
   15e88:	cmpne	r1, #0
   15e8c:	bne	15eb8 <__assert_fail@plt+0x41b4>
   15e90:	ldr	r2, [sp, #100]	; 0x64
   15e94:	ldr	r0, [sp, #44]	; 0x2c
   15e98:	cmp	r2, r0
   15e9c:	bne	15f20 <__assert_fail@plt+0x421c>
   15ea0:	ldr	r1, [sp, #40]	; 0x28
   15ea4:	ldr	r0, [sp, #96]	; 0x60
   15ea8:	bl	11974 <memcmp@plt>
   15eac:	cmp	r0, #0
   15eb0:	beq	15ed0 <__assert_fail@plt+0x41cc>
   15eb4:	b	15f20 <__assert_fail@plt+0x421c>
   15eb8:	bl	11950 <towlower@plt>
   15ebc:	mov	r4, r0
   15ec0:	ldr	r0, [sp, #52]	; 0x34
   15ec4:	bl	11950 <towlower@plt>
   15ec8:	cmp	r4, r0
   15ecc:	bne	15f20 <__assert_fail@plt+0x421c>
   15ed0:	strb	sl, [sp, #92]	; 0x5c
   15ed4:	strb	sl, [sp, #36]	; 0x24
   15ed8:	ldr	r0, [sp, #96]	; 0x60
   15edc:	ldr	r1, [sp, #100]	; 0x64
   15ee0:	add	r0, r0, r1
   15ee4:	str	r0, [sp, #96]	; 0x60
   15ee8:	ldr	r0, [sp, #40]	; 0x28
   15eec:	ldr	r1, [sp, #44]	; 0x2c
   15ef0:	add	r0, r0, r1
   15ef4:	str	r0, [sp, #40]	; 0x28
   15ef8:	add	r0, sp, #24
   15efc:	bl	1723c <__assert_fail@plt+0x5538>
   15f00:	add	r7, r7, #1
   15f04:	ldrb	r0, [sp, #48]	; 0x30
   15f08:	cmp	r0, #0
   15f0c:	beq	15e60 <__assert_fail@plt+0x415c>
   15f10:	ldr	r0, [sp, #52]	; 0x34
   15f14:	cmp	r0, #0
   15f18:	bne	15e60 <__assert_fail@plt+0x415c>
   15f1c:	b	1613c <__assert_fail@plt+0x4438>
   15f20:	add	r6, r6, #1
   15f24:	mov	r4, #0
   15f28:	strb	r4, [sp, #188]	; 0xbc
   15f2c:	ldr	r0, [sp, #192]	; 0xc0
   15f30:	ldr	r1, [sp, #196]	; 0xc4
   15f34:	add	r0, r0, r1
   15f38:	str	r0, [sp, #192]	; 0xc0
   15f3c:	add	r0, sp, #176	; 0xb0
   15f40:	bl	1723c <__assert_fail@plt+0x5538>
   15f44:	ldrb	r0, [sp, #200]	; 0xc8
   15f48:	cmp	r0, #0
   15f4c:	ldr	r1, [sp, #16]
   15f50:	beq	15c60 <__assert_fail@plt+0x3f5c>
   15f54:	ldr	r0, [sp, #204]	; 0xcc
   15f58:	cmp	r0, #0
   15f5c:	bne	15c60 <__assert_fail@plt+0x3f5c>
   15f60:	b	16130 <__assert_fail@plt+0x442c>
   15f64:	ldrb	r7, [r5]
   15f68:	cmp	r7, #0
   15f6c:	beq	16124 <__assert_fail@plt+0x4420>
   15f70:	bl	11ac4 <__ctype_b_loc@plt>
   15f74:	mov	r9, r0
   15f78:	ldr	r0, [r0]
   15f7c:	add	r0, r0, r7, lsl #1
   15f80:	ldrb	r0, [r0, #1]
   15f84:	tst	r0, #1
   15f88:	beq	15f98 <__assert_fail@plt+0x4294>
   15f8c:	bl	11aa0 <__ctype_tolower_loc@plt>
   15f90:	ldr	r0, [r0]
   15f94:	ldrb	r7, [r0, r7, lsl #2]
   15f98:	ldr	r0, [sp, #20]
   15f9c:	ldrb	r0, [r0]
   15fa0:	cmp	r0, #0
   15fa4:	beq	1612c <__assert_fail@plt+0x4428>
   15fa8:	mov	r0, #0
   15fac:	str	r0, [sp, #8]
   15fb0:	mov	r0, #1
   15fb4:	str	r0, [sp, #12]
   15fb8:	mov	r8, r5
   15fbc:	str	r5, [sp, #16]
   15fc0:	mov	r5, #0
   15fc4:	mov	sl, #0
   15fc8:	str	r7, [sp, #4]
   15fcc:	str	r9, [sp]
   15fd0:	add	r0, sl, sl, lsl #2
   15fd4:	cmp	r5, r0
   15fd8:	cmpcs	sl, #10
   15fdc:	bcs	160a8 <__assert_fail@plt+0x43a4>
   15fe0:	ldr	r0, [sp, #20]
   15fe4:	ldrb	r6, [r0]
   15fe8:	ldr	r4, [r9]
   15fec:	add	r0, r4, r6, lsl #1
   15ff0:	ldrb	r0, [r0, #1]
   15ff4:	tst	r0, #1
   15ff8:	beq	16008 <__assert_fail@plt+0x4304>
   15ffc:	bl	11aa0 <__ctype_tolower_loc@plt>
   16000:	ldr	r0, [r0]
   16004:	ldr	r6, [r0, r6, lsl #2]
   16008:	cmp	r6, r7
   1600c:	bne	16084 <__assert_fail@plt+0x4380>
   16010:	mov	r7, #1
   16014:	ldrb	r9, [r8, r7]
   16018:	cmp	r9, #0
   1601c:	beq	16124 <__assert_fail@plt+0x4420>
   16020:	ldr	r0, [sp, #20]
   16024:	ldrb	r6, [r0, r7]
   16028:	cmp	r6, #0
   1602c:	beq	1612c <__assert_fail@plt+0x4428>
   16030:	add	r0, r4, r6, lsl #1
   16034:	ldrb	r0, [r0, #1]
   16038:	tst	r0, #1
   1603c:	beq	1604c <__assert_fail@plt+0x4348>
   16040:	bl	11aa0 <__ctype_tolower_loc@plt>
   16044:	ldr	r0, [r0]
   16048:	ldr	r6, [r0, r6, lsl #2]
   1604c:	add	r0, r4, r9, lsl #1
   16050:	ldrb	r0, [r0, #1]
   16054:	tst	r0, #1
   16058:	beq	16068 <__assert_fail@plt+0x4364>
   1605c:	bl	11aa0 <__ctype_tolower_loc@plt>
   16060:	ldr	r0, [r0]
   16064:	ldr	r9, [r0, r9, lsl #2]
   16068:	add	r7, r7, #1
   1606c:	cmp	r6, r9
   16070:	beq	16014 <__assert_fail@plt+0x4310>
   16074:	add	r5, r5, r7
   16078:	ldr	r7, [sp, #4]
   1607c:	ldr	r9, [sp]
   16080:	b	16088 <__assert_fail@plt+0x4384>
   16084:	add	r5, r5, #1
   16088:	add	sl, sl, #1
   1608c:	ldr	r1, [sp, #20]
   16090:	ldrb	r0, [r1, #1]!
   16094:	str	r1, [sp, #20]
   16098:	mov	r4, #0
   1609c:	cmp	r0, #0
   160a0:	bne	15fd0 <__assert_fail@plt+0x42cc>
   160a4:	b	16130 <__assert_fail@plt+0x442c>
   160a8:	ldr	r0, [sp, #12]
   160ac:	tst	r0, #1
   160b0:	beq	15fe0 <__assert_fail@plt+0x42dc>
   160b4:	ldr	r4, [sp, #16]
   160b8:	cmp	r4, #0
   160bc:	beq	160e4 <__assert_fail@plt+0x43e0>
   160c0:	ldr	r0, [sp, #8]
   160c4:	sub	r1, r5, r0
   160c8:	mov	r0, r4
   160cc:	bl	11bcc <strnlen@plt>
   160d0:	ldrb	r0, [r4, r0]!
   160d4:	str	r4, [sp, #16]
   160d8:	cmp	r0, #0
   160dc:	str	r5, [sp, #8]
   160e0:	bne	15fe0 <__assert_fail@plt+0x42dc>
   160e4:	mov	r4, r8
   160e8:	mov	r0, r8
   160ec:	bl	11af4 <strlen@plt>
   160f0:	mov	r2, r0
   160f4:	ldr	r0, [sp, #20]
   160f8:	mov	r1, r8
   160fc:	sub	r3, fp, #88	; 0x58
   16100:	bl	16568 <__assert_fail@plt+0x4864>
   16104:	mov	r1, #0
   16108:	str	r1, [sp, #16]
   1610c:	cmp	r0, #0
   16110:	mov	r0, #0
   16114:	str	r0, [sp, #12]
   16118:	beq	15fe0 <__assert_fail@plt+0x42dc>
   1611c:	ldr	r4, [fp, #-88]	; 0xffffffa8
   16120:	b	16130 <__assert_fail@plt+0x442c>
   16124:	ldr	r4, [sp, #20]
   16128:	b	16130 <__assert_fail@plt+0x442c>
   1612c:	mov	r4, #0
   16130:	mov	r0, r4
   16134:	sub	sp, fp, #28
   16138:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1613c:	ldr	r4, [sp, #192]	; 0xc0
   16140:	b	16130 <__assert_fail@plt+0x442c>
   16144:	ldr	r4, [sp, #80]	; 0x50
   16148:	b	16130 <__assert_fail@plt+0x442c>
   1614c:	bl	11cc8 <abort@plt>
   16150:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   16154:	add	fp, sp, #28
   16158:	sub	sp, sp, #172	; 0xac
   1615c:	mov	r9, r2
   16160:	mov	r4, r1
   16164:	mov	r5, r0
   16168:	mov	r0, r1
   1616c:	bl	1677c <__assert_fail@plt+0x4a78>
   16170:	mov	r6, r0
   16174:	mov	r7, #0
   16178:	movw	r0, #47662	; 0xba2e
   1617c:	movt	r0, #744	; 0x2e8
   16180:	cmp	r6, r0
   16184:	bhi	16558 <__assert_fail@plt+0x4854>
   16188:	mov	r0, #44	; 0x2c
   1618c:	mul	r0, r6, r0
   16190:	cmp	r0, #4016	; 0xfb0
   16194:	bhi	161bc <__assert_fail@plt+0x44b8>
   16198:	add	r0, r0, #22
   1619c:	bic	r0, r0, #7
   161a0:	sub	r0, sp, r0
   161a4:	add	r1, r0, #15
   161a8:	bic	r8, r1, #15
   161ac:	mov	sp, r0
   161b0:	cmp	r8, #0
   161b4:	bne	161cc <__assert_fail@plt+0x44c8>
   161b8:	b	16558 <__assert_fail@plt+0x4854>
   161bc:	bl	28d94 <__assert_fail@plt+0x17090>
   161c0:	mov	r8, r0
   161c4:	cmp	r8, #0
   161c8:	beq	16558 <__assert_fail@plt+0x4854>
   161cc:	str	r5, [fp, #-196]	; 0xffffff3c
   161d0:	mov	sl, #0
   161d4:	str	sl, [fp, #-80]	; 0xffffffb0
   161d8:	str	sl, [fp, #-84]	; 0xffffffac
   161dc:	strb	sl, [fp, #-88]	; 0xffffffa8
   161e0:	str	r4, [fp, #-72]	; 0xffffffb8
   161e4:	strb	sl, [fp, #-76]	; 0xffffffb4
   161e8:	sub	r4, fp, #88	; 0x58
   161ec:	mov	r0, r4
   161f0:	bl	1723c <__assert_fail@plt+0x5538>
   161f4:	add	r0, r6, r6, lsl #2
   161f8:	add	r0, r8, r0, lsl #3
   161fc:	str	r0, [fp, #-188]	; 0xffffff44
   16200:	ldrb	r0, [fp, #-64]	; 0xffffffc0
   16204:	cmp	r0, #0
   16208:	beq	16218 <__assert_fail@plt+0x4514>
   1620c:	ldr	r0, [fp, #-60]	; 0xffffffc4
   16210:	cmp	r0, #0
   16214:	beq	16280 <__assert_fail@plt+0x457c>
   16218:	add	r4, r4, #16
   1621c:	sub	r7, fp, #88	; 0x58
   16220:	mov	r5, r8
   16224:	mov	r0, r5
   16228:	mov	r1, r4
   1622c:	bl	28e58 <__assert_fail@plt+0x17154>
   16230:	ldrb	r0, [r5, #8]
   16234:	cmp	r0, #0
   16238:	beq	16248 <__assert_fail@plt+0x4544>
   1623c:	ldr	r0, [r5, #12]
   16240:	bl	11950 <towlower@plt>
   16244:	str	r0, [r5, #12]
   16248:	strb	sl, [fp, #-76]	; 0xffffffb4
   1624c:	ldr	r0, [fp, #-72]	; 0xffffffb8
   16250:	ldr	r1, [fp, #-68]	; 0xffffffbc
   16254:	add	r0, r0, r1
   16258:	str	r0, [fp, #-72]	; 0xffffffb8
   1625c:	mov	r0, r7
   16260:	bl	1723c <__assert_fail@plt+0x5538>
   16264:	add	r5, r5, #40	; 0x28
   16268:	ldr	r0, [fp, #-60]	; 0xffffffc4
   1626c:	ldrb	r1, [fp, #-64]	; 0xffffffc0
   16270:	cmp	r1, #0
   16274:	beq	16224 <__assert_fail@plt+0x4520>
   16278:	cmp	r0, #0
   1627c:	bne	16224 <__assert_fail@plt+0x4520>
   16280:	str	r9, [fp, #-200]	; 0xffffff38
   16284:	mov	r0, #1
   16288:	ldr	r3, [fp, #-188]	; 0xffffff44
   1628c:	str	r0, [r3, #4]
   16290:	str	r6, [fp, #-192]	; 0xffffff40
   16294:	cmp	r6, #3
   16298:	bcc	16360 <__assert_fail@plt+0x465c>
   1629c:	mov	r4, #2
   162a0:	mov	r5, #0
   162a4:	add	r0, r4, r4, lsl #2
   162a8:	add	r0, r8, r0, lsl #3
   162ac:	sub	r7, r0, #28
   162b0:	sub	sl, r0, #40	; 0x28
   162b4:	sub	r6, r0, #36	; 0x24
   162b8:	ldrb	r9, [r0, #-32]	; 0xffffffe0
   162bc:	cmp	r9, #0
   162c0:	bne	162d8 <__assert_fail@plt+0x45d4>
   162c4:	b	16300 <__assert_fail@plt+0x45fc>
   162c8:	ldr	r0, [r3, r5, lsl #2]
   162cc:	sub	r5, r5, r0
   162d0:	cmp	r9, #0
   162d4:	beq	16300 <__assert_fail@plt+0x45fc>
   162d8:	add	r0, r5, r5, lsl #2
   162dc:	add	r0, r8, r0, lsl #3
   162e0:	ldrb	r1, [r0, #8]
   162e4:	cmp	r1, #0
   162e8:	beq	16300 <__assert_fail@plt+0x45fc>
   162ec:	ldr	r0, [r0, #12]
   162f0:	ldr	r1, [r7]
   162f4:	cmp	r1, r0
   162f8:	bne	16330 <__assert_fail@plt+0x462c>
   162fc:	b	16344 <__assert_fail@plt+0x4640>
   16300:	add	r0, r5, r5, lsl #2
   16304:	add	r1, r8, r0, lsl #3
   16308:	ldr	r1, [r1, #4]
   1630c:	ldr	r2, [r6]
   16310:	cmp	r2, r1
   16314:	bne	16330 <__assert_fail@plt+0x462c>
   16318:	ldr	r1, [r8, r0, lsl #3]
   1631c:	ldr	r0, [sl]
   16320:	bl	11974 <memcmp@plt>
   16324:	ldr	r3, [fp, #-188]	; 0xffffff44
   16328:	cmp	r0, #0
   1632c:	beq	16344 <__assert_fail@plt+0x4640>
   16330:	cmp	r5, #0
   16334:	bne	162c8 <__assert_fail@plt+0x45c4>
   16338:	mov	r5, #0
   1633c:	mov	r0, r4
   16340:	b	1634c <__assert_fail@plt+0x4648>
   16344:	add	r5, r5, #1
   16348:	sub	r0, r4, r5
   1634c:	str	r0, [r3, r4, lsl #2]
   16350:	add	r4, r4, #1
   16354:	ldr	r0, [fp, #-192]	; 0xffffff40
   16358:	cmp	r4, r0
   1635c:	bne	162a4 <__assert_fail@plt+0x45a0>
   16360:	mov	r5, #0
   16364:	ldr	r0, [fp, #-200]	; 0xffffff38
   16368:	str	r5, [r0]
   1636c:	str	r5, [fp, #-80]	; 0xffffffb0
   16370:	str	r5, [fp, #-84]	; 0xffffffac
   16374:	str	r5, [fp, #-136]	; 0xffffff78
   16378:	str	r5, [fp, #-140]	; 0xffffff74
   1637c:	strb	r5, [fp, #-88]	; 0xffffffa8
   16380:	ldr	r0, [fp, #-196]	; 0xffffff3c
   16384:	str	r0, [fp, #-72]	; 0xffffffb8
   16388:	strb	r5, [fp, #-76]	; 0xffffffb4
   1638c:	str	r0, [fp, #-128]	; 0xffffff80
   16390:	strb	r5, [fp, #-144]	; 0xffffff70
   16394:	strb	r5, [fp, #-132]	; 0xffffff7c
   16398:	sub	r4, fp, #144	; 0x90
   1639c:	mov	r0, r4
   163a0:	bl	1723c <__assert_fail@plt+0x5538>
   163a4:	ldrb	r0, [fp, #-120]	; 0xffffff88
   163a8:	cmp	r0, #0
   163ac:	beq	163bc <__assert_fail@plt+0x46b8>
   163b0:	ldr	r0, [fp, #-116]	; 0xffffff8c
   163b4:	cmp	r0, #0
   163b8:	beq	1654c <__assert_fail@plt+0x4848>
   163bc:	add	r6, r4, #16
   163c0:	sub	r9, fp, #184	; 0xb8
   163c4:	sub	r7, fp, #144	; 0x90
   163c8:	sub	r4, fp, #88	; 0x58
   163cc:	mov	sl, #0
   163d0:	str	r6, [fp, #-196]	; 0xffffff3c
   163d4:	mov	r0, r9
   163d8:	mov	r1, r6
   163dc:	bl	28e58 <__assert_fail@plt+0x17154>
   163e0:	ldrb	r0, [fp, #-176]	; 0xffffff50
   163e4:	cmp	r0, #0
   163e8:	beq	163f8 <__assert_fail@plt+0x46f4>
   163ec:	ldr	r0, [fp, #-172]	; 0xffffff54
   163f0:	bl	11950 <towlower@plt>
   163f4:	str	r0, [fp, #-172]	; 0xffffff54
   163f8:	add	r0, sl, sl, lsl #2
   163fc:	add	r1, r8, r0, lsl #3
   16400:	ldrb	r2, [r1, #8]
   16404:	cmp	r2, #0
   16408:	ldrbne	r2, [fp, #-176]	; 0xffffff50
   1640c:	cmpne	r2, #0
   16410:	bne	16498 <__assert_fail@plt+0x4794>
   16414:	ldr	r2, [r1, #4]
   16418:	ldr	r1, [fp, #-180]	; 0xffffff4c
   1641c:	cmp	r2, r1
   16420:	bne	16438 <__assert_fail@plt+0x4734>
   16424:	ldr	r0, [r8, r0, lsl #3]
   16428:	ldr	r1, [fp, #-184]	; 0xffffff48
   1642c:	bl	11974 <memcmp@plt>
   16430:	cmp	r0, #0
   16434:	beq	164a8 <__assert_fail@plt+0x47a4>
   16438:	cmp	sl, #0
   1643c:	beq	164d0 <__assert_fail@plt+0x47cc>
   16440:	ldr	r0, [fp, #-188]	; 0xffffff44
   16444:	ldr	r6, [r0, sl, lsl #2]
   16448:	sub	sl, sl, r6
   1644c:	cmp	r6, #0
   16450:	beq	16490 <__assert_fail@plt+0x478c>
   16454:	mov	r0, r4
   16458:	bl	1723c <__assert_fail@plt+0x5538>
   1645c:	ldrb	r0, [fp, #-64]	; 0xffffffc0
   16460:	cmp	r0, #0
   16464:	beq	16474 <__assert_fail@plt+0x4770>
   16468:	ldr	r0, [fp, #-60]	; 0xffffffc4
   1646c:	cmp	r0, #0
   16470:	beq	16564 <__assert_fail@plt+0x4860>
   16474:	strb	r5, [fp, #-76]	; 0xffffffb4
   16478:	ldr	r0, [fp, #-72]	; 0xffffffb8
   1647c:	ldr	r1, [fp, #-68]	; 0xffffffbc
   16480:	add	r0, r0, r1
   16484:	str	r0, [fp, #-72]	; 0xffffffb8
   16488:	subs	r6, r6, #1
   1648c:	bne	16454 <__assert_fail@plt+0x4750>
   16490:	ldr	r6, [fp, #-196]	; 0xffffff3c
   16494:	b	1651c <__assert_fail@plt+0x4818>
   16498:	ldr	r0, [r1, #12]
   1649c:	ldr	r1, [fp, #-172]	; 0xffffff54
   164a0:	cmp	r0, r1
   164a4:	bne	16438 <__assert_fail@plt+0x4734>
   164a8:	strb	r5, [fp, #-132]	; 0xffffff7c
   164ac:	ldr	r0, [fp, #-128]	; 0xffffff80
   164b0:	ldr	r1, [fp, #-124]	; 0xffffff84
   164b4:	add	r0, r0, r1
   164b8:	str	r0, [fp, #-128]	; 0xffffff80
   164bc:	add	sl, sl, #1
   164c0:	ldr	r0, [fp, #-192]	; 0xffffff40
   164c4:	cmp	sl, r0
   164c8:	bne	1651c <__assert_fail@plt+0x4818>
   164cc:	b	16540 <__assert_fail@plt+0x483c>
   164d0:	mov	r0, r4
   164d4:	bl	1723c <__assert_fail@plt+0x5538>
   164d8:	ldrb	r0, [fp, #-64]	; 0xffffffc0
   164dc:	cmp	r0, #0
   164e0:	beq	164f0 <__assert_fail@plt+0x47ec>
   164e4:	ldr	r0, [fp, #-60]	; 0xffffffc4
   164e8:	cmp	r0, #0
   164ec:	beq	16564 <__assert_fail@plt+0x4860>
   164f0:	mov	sl, #0
   164f4:	strb	sl, [fp, #-76]	; 0xffffffb4
   164f8:	strb	sl, [fp, #-132]	; 0xffffff7c
   164fc:	ldr	r0, [fp, #-72]	; 0xffffffb8
   16500:	ldr	r1, [fp, #-68]	; 0xffffffbc
   16504:	add	r0, r0, r1
   16508:	str	r0, [fp, #-72]	; 0xffffffb8
   1650c:	ldr	r0, [fp, #-128]	; 0xffffff80
   16510:	ldr	r1, [fp, #-124]	; 0xffffff84
   16514:	add	r0, r0, r1
   16518:	str	r0, [fp, #-128]	; 0xffffff80
   1651c:	mov	r0, r7
   16520:	bl	1723c <__assert_fail@plt+0x5538>
   16524:	ldrb	r0, [fp, #-120]	; 0xffffff88
   16528:	cmp	r0, #0
   1652c:	beq	163d4 <__assert_fail@plt+0x46d0>
   16530:	ldr	r0, [fp, #-116]	; 0xffffff8c
   16534:	cmp	r0, #0
   16538:	bne	163d4 <__assert_fail@plt+0x46d0>
   1653c:	b	1654c <__assert_fail@plt+0x4848>
   16540:	ldr	r0, [fp, #-72]	; 0xffffffb8
   16544:	ldr	r1, [fp, #-200]	; 0xffffff38
   16548:	str	r0, [r1]
   1654c:	mov	r0, r8
   16550:	bl	28e04 <__assert_fail@plt+0x17100>
   16554:	mov	r7, #1
   16558:	mov	r0, r7
   1655c:	sub	sp, fp, #28
   16560:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   16564:	bl	11cc8 <abort@plt>
   16568:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1656c:	add	fp, sp, #28
   16570:	sub	sp, sp, #20
   16574:	mov	r5, #0
   16578:	cmn	r2, #-536870911	; 0xe0000001
   1657c:	bhi	16770 <__assert_fail@plt+0x4a6c>
   16580:	mov	r8, r3
   16584:	mov	r7, r2
   16588:	mov	r6, r1
   1658c:	str	r0, [fp, #-44]	; 0xffffffd4
   16590:	lsl	r0, r2, #2
   16594:	cmp	r0, #4016	; 0xfb0
   16598:	bhi	165c0 <__assert_fail@plt+0x48bc>
   1659c:	add	r0, r0, #22
   165a0:	bic	r0, r0, #7
   165a4:	sub	r0, sp, r0
   165a8:	add	r1, r0, #15
   165ac:	bic	r4, r1, #15
   165b0:	mov	sp, r0
   165b4:	cmp	r4, #0
   165b8:	bne	165d0 <__assert_fail@plt+0x48cc>
   165bc:	b	16770 <__assert_fail@plt+0x4a6c>
   165c0:	bl	28d94 <__assert_fail@plt+0x17090>
   165c4:	mov	r4, r0
   165c8:	cmp	r4, #0
   165cc:	beq	16770 <__assert_fail@plt+0x4a6c>
   165d0:	str	r8, [fp, #-48]	; 0xffffffd0
   165d4:	mov	r0, #1
   165d8:	str	r0, [r4, #4]
   165dc:	cmp	r7, #3
   165e0:	str	r7, [fp, #-36]	; 0xffffffdc
   165e4:	bcc	16688 <__assert_fail@plt+0x4984>
   165e8:	mov	r5, #0
   165ec:	mov	r7, #2
   165f0:	bl	11ac4 <__ctype_b_loc@plt>
   165f4:	str	r0, [fp, #-40]	; 0xffffffd8
   165f8:	add	r0, r6, r7
   165fc:	ldrb	r9, [r0, #-1]
   16600:	ldr	r0, [fp, #-40]	; 0xffffffd8
   16604:	ldr	sl, [r0]
   16608:	add	r0, sl, r9, lsl #1
   1660c:	ldrb	r0, [r0, #1]
   16610:	tst	r0, #1
   16614:	beq	16630 <__assert_fail@plt+0x492c>
   16618:	bl	11aa0 <__ctype_tolower_loc@plt>
   1661c:	ldr	r0, [r0]
   16620:	ldrb	r9, [r0, r9, lsl #2]
   16624:	b	16630 <__assert_fail@plt+0x492c>
   16628:	ldr	r0, [r4, r5, lsl #2]
   1662c:	sub	r5, r5, r0
   16630:	ldrb	r8, [r6, r5]
   16634:	add	r0, sl, r8, lsl #1
   16638:	ldrb	r0, [r0, #1]
   1663c:	tst	r0, #1
   16640:	beq	16650 <__assert_fail@plt+0x494c>
   16644:	bl	11aa0 <__ctype_tolower_loc@plt>
   16648:	ldr	r0, [r0]
   1664c:	ldr	r8, [r0, r8, lsl #2]
   16650:	cmp	r9, r8
   16654:	beq	1666c <__assert_fail@plt+0x4968>
   16658:	cmp	r5, #0
   1665c:	bne	16628 <__assert_fail@plt+0x4924>
   16660:	mov	r5, #0
   16664:	mov	r0, r7
   16668:	b	16674 <__assert_fail@plt+0x4970>
   1666c:	add	r5, r5, #1
   16670:	sub	r0, r7, r5
   16674:	ldr	r1, [fp, #-36]	; 0xffffffdc
   16678:	str	r0, [r4, r7, lsl #2]
   1667c:	add	r7, r7, #1
   16680:	cmp	r7, r1
   16684:	bne	165f8 <__assert_fail@plt+0x48f4>
   16688:	mov	sl, #0
   1668c:	ldr	r0, [fp, #-48]	; 0xffffffd0
   16690:	str	sl, [r0]
   16694:	ldr	r0, [fp, #-44]	; 0xffffffd4
   16698:	ldrb	r7, [r0]
   1669c:	cmp	r7, #0
   166a0:	beq	16764 <__assert_fail@plt+0x4a60>
   166a4:	bl	11ac4 <__ctype_b_loc@plt>
   166a8:	ldr	r9, [r0]
   166ac:	ldr	r8, [fp, #-44]	; 0xffffffd4
   166b0:	str	r8, [fp, #-40]	; 0xffffffd8
   166b4:	ldrb	r5, [r6, sl]
   166b8:	add	r0, r9, r5, lsl #1
   166bc:	ldrb	r0, [r0, #1]
   166c0:	tst	r0, #1
   166c4:	beq	166d4 <__assert_fail@plt+0x49d0>
   166c8:	bl	11aa0 <__ctype_tolower_loc@plt>
   166cc:	ldr	r0, [r0]
   166d0:	ldr	r5, [r0, r5, lsl #2]
   166d4:	uxtb	r7, r7
   166d8:	add	r0, r9, r7, lsl #1
   166dc:	ldrb	r0, [r0, #1]
   166e0:	tst	r0, #1
   166e4:	beq	166f4 <__assert_fail@plt+0x49f0>
   166e8:	bl	11aa0 <__ctype_tolower_loc@plt>
   166ec:	ldr	r0, [r0]
   166f0:	ldr	r7, [r0, r7, lsl #2]
   166f4:	cmp	r5, r7
   166f8:	bne	16714 <__assert_fail@plt+0x4a10>
   166fc:	add	sl, sl, #1
   16700:	ldr	r0, [fp, #-36]	; 0xffffffdc
   16704:	cmp	sl, r0
   16708:	beq	16758 <__assert_fail@plt+0x4a54>
   1670c:	add	r8, r8, #1
   16710:	b	16748 <__assert_fail@plt+0x4a44>
   16714:	cmp	sl, #0
   16718:	beq	16734 <__assert_fail@plt+0x4a30>
   1671c:	ldr	r0, [r4, sl, lsl #2]
   16720:	sub	sl, sl, r0
   16724:	ldr	r1, [fp, #-40]	; 0xffffffd8
   16728:	add	r1, r1, r0
   1672c:	str	r1, [fp, #-40]	; 0xffffffd8
   16730:	b	16748 <__assert_fail@plt+0x4a44>
   16734:	add	r8, r8, #1
   16738:	ldr	r0, [fp, #-40]	; 0xffffffd8
   1673c:	add	r0, r0, #1
   16740:	str	r0, [fp, #-40]	; 0xffffffd8
   16744:	mov	sl, #0
   16748:	ldrb	r7, [r8]
   1674c:	cmp	r7, #0
   16750:	bne	166b4 <__assert_fail@plt+0x49b0>
   16754:	b	16764 <__assert_fail@plt+0x4a60>
   16758:	ldr	r0, [fp, #-48]	; 0xffffffd0
   1675c:	ldr	r1, [fp, #-40]	; 0xffffffd8
   16760:	str	r1, [r0]
   16764:	mov	r0, r4
   16768:	bl	28e04 <__assert_fail@plt+0x17100>
   1676c:	mov	r5, #1
   16770:	mov	r0, r5
   16774:	sub	sp, fp, #28
   16778:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1677c:	push	{r4, r5, r6, sl, fp, lr}
   16780:	add	fp, sp, #16
   16784:	sub	sp, sp, #56	; 0x38
   16788:	mov	r5, r0
   1678c:	bl	119f8 <__ctype_get_mb_cur_max@plt>
   16790:	cmp	r0, #2
   16794:	bcc	16820 <__assert_fail@plt+0x4b1c>
   16798:	mov	r4, #0
   1679c:	str	r4, [sp, #8]
   167a0:	str	r4, [sp, #4]
   167a4:	strb	r4, [sp]
   167a8:	str	r5, [sp, #16]
   167ac:	strb	r4, [sp, #12]
   167b0:	mov	r0, sp
   167b4:	bl	1723c <__assert_fail@plt+0x5538>
   167b8:	ldrb	r0, [sp, #24]
   167bc:	cmp	r0, #0
   167c0:	beq	167d0 <__assert_fail@plt+0x4acc>
   167c4:	ldr	r0, [sp, #28]
   167c8:	cmp	r0, #0
   167cc:	beq	16814 <__assert_fail@plt+0x4b10>
   167d0:	mov	r6, #0
   167d4:	mov	r5, sp
   167d8:	mov	r4, #0
   167dc:	strb	r6, [sp, #12]
   167e0:	ldr	r0, [sp, #16]
   167e4:	ldr	r1, [sp, #20]
   167e8:	add	r0, r0, r1
   167ec:	str	r0, [sp, #16]
   167f0:	mov	r0, r5
   167f4:	bl	1723c <__assert_fail@plt+0x5538>
   167f8:	add	r4, r4, #1
   167fc:	ldr	r0, [sp, #28]
   16800:	ldrb	r1, [sp, #24]
   16804:	cmp	r1, #0
   16808:	beq	167dc <__assert_fail@plt+0x4ad8>
   1680c:	cmp	r0, #0
   16810:	bne	167dc <__assert_fail@plt+0x4ad8>
   16814:	mov	r0, r4
   16818:	sub	sp, fp, #16
   1681c:	pop	{r4, r5, r6, sl, fp, pc}
   16820:	mov	r0, r5
   16824:	sub	sp, fp, #16
   16828:	pop	{r4, r5, r6, sl, fp, lr}
   1682c:	b	11af4 <strlen@plt>
   16830:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   16834:	add	fp, sp, #28
   16838:	sub	sp, sp, #300	; 0x12c
   1683c:	mov	r5, r1
   16840:	mov	r6, r0
   16844:	bl	119f8 <__ctype_get_mb_cur_max@plt>
   16848:	cmp	r0, #2
   1684c:	bcc	16bdc <__assert_fail@plt+0x4ed8>
   16850:	mov	r4, #0
   16854:	str	r4, [fp, #-80]	; 0xffffffb0
   16858:	str	r4, [fp, #-84]	; 0xffffffac
   1685c:	strb	r4, [fp, #-88]	; 0xffffffa8
   16860:	str	r5, [fp, #-72]	; 0xffffffb8
   16864:	strb	r4, [fp, #-76]	; 0xffffffb4
   16868:	sub	r0, fp, #88	; 0x58
   1686c:	bl	1723c <__assert_fail@plt+0x5538>
   16870:	ldrb	r0, [fp, #-64]	; 0xffffffc0
   16874:	cmp	r0, #0
   16878:	beq	16888 <__assert_fail@plt+0x4b84>
   1687c:	ldr	r0, [fp, #-60]	; 0xffffffc4
   16880:	cmp	r0, #0
   16884:	beq	16cdc <__assert_fail@plt+0x4fd8>
   16888:	str	r4, [fp, #-136]	; 0xffffff78
   1688c:	str	r4, [fp, #-140]	; 0xffffff74
   16890:	str	r4, [sp, #136]	; 0x88
   16894:	str	r4, [sp, #132]	; 0x84
   16898:	strb	r4, [fp, #-144]	; 0xffffff70
   1689c:	str	r5, [fp, #-128]	; 0xffffff80
   168a0:	strb	r4, [fp, #-132]	; 0xffffff7c
   168a4:	str	r6, [sp, #144]	; 0x90
   168a8:	strb	r4, [sp, #128]	; 0x80
   168ac:	strb	r4, [sp, #140]	; 0x8c
   168b0:	add	r7, sp, #128	; 0x80
   168b4:	mov	r0, r7
   168b8:	bl	1723c <__assert_fail@plt+0x5538>
   168bc:	ldrb	r0, [sp, #152]	; 0x98
   168c0:	cmp	r0, #0
   168c4:	beq	168d4 <__assert_fail@plt+0x4bd0>
   168c8:	ldr	r0, [sp, #156]	; 0x9c
   168cc:	cmp	r0, #0
   168d0:	beq	16ce8 <__assert_fail@plt+0x4fe4>
   168d4:	add	r0, sp, #16
   168d8:	add	r0, r0, #4
   168dc:	str	r0, [sp, #4]
   168e0:	mov	r0, #1
   168e4:	str	r0, [sp, #8]
   168e8:	mov	r8, #0
   168ec:	add	r0, r7, #16
   168f0:	str	r0, [sp]
   168f4:	mov	r0, #0
   168f8:	str	r0, [sp, #12]
   168fc:	mov	sl, #0
   16900:	mov	r9, #0
   16904:	mov	r4, sl
   16908:	add	r0, r9, r9, lsl #2
   1690c:	cmp	sl, r0
   16910:	bcc	169d0 <__assert_fail@plt+0x4ccc>
   16914:	ldr	r0, [sp, #8]
   16918:	tst	r0, #1
   1691c:	beq	169d0 <__assert_fail@plt+0x4ccc>
   16920:	cmp	r9, #10
   16924:	bcc	169d0 <__assert_fail@plt+0x4ccc>
   16928:	mov	sl, r7
   1692c:	ldr	r1, [sp, #12]
   16930:	subs	r0, r4, r1
   16934:	beq	16978 <__assert_fail@plt+0x4c74>
   16938:	sub	r7, r1, r4
   1693c:	sub	r0, fp, #144	; 0x90
   16940:	bl	1723c <__assert_fail@plt+0x5538>
   16944:	ldrb	r0, [fp, #-120]	; 0xffffff88
   16948:	cmp	r0, #0
   1694c:	beq	1695c <__assert_fail@plt+0x4c58>
   16950:	ldr	r0, [fp, #-116]	; 0xffffff8c
   16954:	cmp	r0, #0
   16958:	beq	16978 <__assert_fail@plt+0x4c74>
   1695c:	strb	r8, [fp, #-132]	; 0xffffff7c
   16960:	ldr	r0, [fp, #-128]	; 0xffffff80
   16964:	ldr	r1, [fp, #-124]	; 0xffffff84
   16968:	add	r0, r0, r1
   1696c:	str	r0, [fp, #-128]	; 0xffffff80
   16970:	adds	r7, r7, #1
   16974:	bne	1693c <__assert_fail@plt+0x4c38>
   16978:	sub	r0, fp, #144	; 0x90
   1697c:	bl	1723c <__assert_fail@plt+0x5538>
   16980:	ldrb	r0, [fp, #-120]	; 0xffffff88
   16984:	cmp	r0, #0
   16988:	beq	169c8 <__assert_fail@plt+0x4cc4>
   1698c:	ldr	r0, [fp, #-116]	; 0xffffff8c
   16990:	cmp	r0, #0
   16994:	str	r4, [sp, #12]
   16998:	mov	r7, sl
   1699c:	bne	169d0 <__assert_fail@plt+0x4ccc>
   169a0:	mov	r0, r6
   169a4:	mov	r1, r5
   169a8:	add	r2, sp, #72	; 0x48
   169ac:	bl	16d10 <__assert_fail@plt+0x500c>
   169b0:	mov	r1, #0
   169b4:	str	r1, [sp, #8]
   169b8:	cmp	r0, #0
   169bc:	str	r4, [sp, #12]
   169c0:	beq	169d0 <__assert_fail@plt+0x4ccc>
   169c4:	b	16d04 <__assert_fail@plt+0x5000>
   169c8:	str	r4, [sp, #12]
   169cc:	mov	r7, sl
   169d0:	add	sl, r4, #1
   169d4:	ldrb	r0, [sp, #152]	; 0x98
   169d8:	cmp	r0, #0
   169dc:	ldrbne	r0, [fp, #-64]	; 0xffffffc0
   169e0:	cmpne	r0, #0
   169e4:	bne	16a10 <__assert_fail@plt+0x4d0c>
   169e8:	ldr	r2, [sp, #148]	; 0x94
   169ec:	ldr	r0, [fp, #-68]	; 0xffffffbc
   169f0:	cmp	r2, r0
   169f4:	bne	16b9c <__assert_fail@plt+0x4e98>
   169f8:	ldr	r1, [fp, #-72]	; 0xffffffb8
   169fc:	ldr	r0, [sp, #144]	; 0x90
   16a00:	bl	11974 <memcmp@plt>
   16a04:	cmp	r0, #0
   16a08:	bne	16b9c <__assert_fail@plt+0x4e98>
   16a0c:	b	16a20 <__assert_fail@plt+0x4d1c>
   16a10:	ldr	r0, [fp, #-60]	; 0xffffffc4
   16a14:	ldr	r1, [sp, #156]	; 0x9c
   16a18:	cmp	r1, r0
   16a1c:	bne	16b9c <__assert_fail@plt+0x4e98>
   16a20:	mov	r0, r7
   16a24:	mov	r1, #48	; 0x30
   16a28:	vld1.64	{d16-d17}, [r0], r1
   16a2c:	ldr	r1, [sp]
   16a30:	vld1.64	{d18-d19}, [r1]
   16a34:	add	r3, sp, #72	; 0x48
   16a38:	add	r1, r3, #16
   16a3c:	add	r2, r7, #32
   16a40:	vld1.64	{d20-d21}, [r2]
   16a44:	vldr	d22, [r0]
   16a48:	vst1.64	{d18-d19}, [r1]
   16a4c:	add	r0, r3, #32
   16a50:	vst1.64	{d20-d21}, [r0]
   16a54:	mov	r0, r3
   16a58:	mov	r1, #12
   16a5c:	vst1.64	{d16-d17}, [r0], r1
   16a60:	strb	r8, [r0]
   16a64:	str	r5, [sp, #32]
   16a68:	strb	r8, [sp, #16]
   16a6c:	vstr	d22, [sp, #120]	; 0x78
   16a70:	ldr	r0, [sp, #88]	; 0x58
   16a74:	ldr	r1, [sp, #92]	; 0x5c
   16a78:	add	r0, r0, r1
   16a7c:	str	r0, [sp, #88]	; 0x58
   16a80:	ldr	r0, [sp, #4]
   16a84:	str	r8, [r0]
   16a88:	str	r8, [r0, #4]
   16a8c:	strb	r8, [sp, #28]
   16a90:	add	r0, sp, #16
   16a94:	bl	1723c <__assert_fail@plt+0x5538>
   16a98:	ldrb	r0, [sp, #40]	; 0x28
   16a9c:	cmp	r0, #0
   16aa0:	beq	16ab0 <__assert_fail@plt+0x4dac>
   16aa4:	ldr	r0, [sp, #44]	; 0x2c
   16aa8:	cmp	r0, #0
   16aac:	beq	16d0c <__assert_fail@plt+0x5008>
   16ab0:	strb	r8, [sp, #28]
   16ab4:	ldr	r0, [sp, #32]
   16ab8:	ldr	r1, [sp, #36]	; 0x24
   16abc:	add	r0, r0, r1
   16ac0:	str	r0, [sp, #32]
   16ac4:	add	r0, sp, #16
   16ac8:	bl	1723c <__assert_fail@plt+0x5538>
   16acc:	ldrb	r0, [sp, #40]	; 0x28
   16ad0:	cmp	r0, #0
   16ad4:	beq	16ae4 <__assert_fail@plt+0x4de0>
   16ad8:	ldr	r0, [sp, #44]	; 0x2c
   16adc:	cmp	r0, #0
   16ae0:	beq	16cf4 <__assert_fail@plt+0x4ff0>
   16ae4:	add	sl, r4, #2
   16ae8:	add	r0, sp, #72	; 0x48
   16aec:	bl	1723c <__assert_fail@plt+0x5538>
   16af0:	ldr	r0, [sp, #100]	; 0x64
   16af4:	ldrb	r1, [sp, #96]	; 0x60
   16af8:	cmp	r0, #0
   16afc:	bne	16b08 <__assert_fail@plt+0x4e04>
   16b00:	cmp	r1, #0
   16b04:	bne	16ce4 <__assert_fail@plt+0x4fe0>
   16b08:	cmp	r1, #0
   16b0c:	ldrbne	r1, [sp, #40]	; 0x28
   16b10:	cmpne	r1, #0
   16b14:	bne	16b40 <__assert_fail@plt+0x4e3c>
   16b18:	ldr	r2, [sp, #92]	; 0x5c
   16b1c:	ldr	r0, [sp, #36]	; 0x24
   16b20:	cmp	r2, r0
   16b24:	bne	16b9c <__assert_fail@plt+0x4e98>
   16b28:	ldr	r1, [sp, #32]
   16b2c:	ldr	r0, [sp, #88]	; 0x58
   16b30:	bl	11974 <memcmp@plt>
   16b34:	cmp	r0, #0
   16b38:	beq	16b4c <__assert_fail@plt+0x4e48>
   16b3c:	b	16b9c <__assert_fail@plt+0x4e98>
   16b40:	ldr	r1, [sp, #44]	; 0x2c
   16b44:	cmp	r0, r1
   16b48:	bne	16b9c <__assert_fail@plt+0x4e98>
   16b4c:	strb	r8, [sp, #84]	; 0x54
   16b50:	strb	r8, [sp, #28]
   16b54:	ldr	r0, [sp, #88]	; 0x58
   16b58:	ldr	r1, [sp, #92]	; 0x5c
   16b5c:	add	r0, r0, r1
   16b60:	str	r0, [sp, #88]	; 0x58
   16b64:	ldr	r0, [sp, #32]
   16b68:	ldr	r1, [sp, #36]	; 0x24
   16b6c:	add	r0, r0, r1
   16b70:	str	r0, [sp, #32]
   16b74:	add	r0, sp, #16
   16b78:	bl	1723c <__assert_fail@plt+0x5538>
   16b7c:	add	sl, sl, #1
   16b80:	ldrb	r0, [sp, #40]	; 0x28
   16b84:	cmp	r0, #0
   16b88:	beq	16ae8 <__assert_fail@plt+0x4de4>
   16b8c:	ldr	r0, [sp, #44]	; 0x2c
   16b90:	cmp	r0, #0
   16b94:	bne	16ae8 <__assert_fail@plt+0x4de4>
   16b98:	b	16cf4 <__assert_fail@plt+0x4ff0>
   16b9c:	add	r9, r9, #1
   16ba0:	mov	r4, #0
   16ba4:	strb	r4, [sp, #140]	; 0x8c
   16ba8:	ldr	r0, [sp, #144]	; 0x90
   16bac:	ldr	r1, [sp, #148]	; 0x94
   16bb0:	add	r0, r0, r1
   16bb4:	str	r0, [sp, #144]	; 0x90
   16bb8:	mov	r0, r7
   16bbc:	bl	1723c <__assert_fail@plt+0x5538>
   16bc0:	ldrb	r0, [sp, #152]	; 0x98
   16bc4:	cmp	r0, #0
   16bc8:	beq	16904 <__assert_fail@plt+0x4c00>
   16bcc:	ldr	r0, [sp, #156]	; 0x9c
   16bd0:	cmp	r0, #0
   16bd4:	bne	16904 <__assert_fail@plt+0x4c00>
   16bd8:	b	16ce8 <__assert_fail@plt+0x4fe4>
   16bdc:	ldrb	r9, [r5]
   16be0:	cmp	r9, #0
   16be4:	beq	16cdc <__assert_fail@plt+0x4fd8>
   16be8:	ldrb	r0, [r6]
   16bec:	cmp	r0, #0
   16bf0:	beq	16ce4 <__assert_fail@plt+0x4fe0>
   16bf4:	mov	r3, #1
   16bf8:	mov	ip, #0
   16bfc:	mov	sl, r5
   16c00:	mov	r7, #0
   16c04:	mov	r8, #0
   16c08:	add	r0, r8, r8, lsl #2
   16c0c:	cmp	r7, r0
   16c10:	bcc	16c84 <__assert_fail@plt+0x4f80>
   16c14:	tst	r3, #1
   16c18:	beq	16c84 <__assert_fail@plt+0x4f80>
   16c1c:	cmp	r8, #10
   16c20:	bcc	16c84 <__assert_fail@plt+0x4f80>
   16c24:	cmp	sl, #0
   16c28:	beq	16c50 <__assert_fail@plt+0x4f4c>
   16c2c:	sub	r1, r7, ip
   16c30:	mov	r0, sl
   16c34:	mov	r4, r3
   16c38:	bl	11bcc <strnlen@plt>
   16c3c:	mov	r3, r4
   16c40:	ldrb	r0, [sl, r0]!
   16c44:	cmp	r0, #0
   16c48:	mov	ip, r7
   16c4c:	bne	16c84 <__assert_fail@plt+0x4f80>
   16c50:	mov	r0, r5
   16c54:	mov	r4, ip
   16c58:	bl	11af4 <strlen@plt>
   16c5c:	mov	r2, r0
   16c60:	mov	r0, r6
   16c64:	mov	r1, r5
   16c68:	sub	r3, fp, #88	; 0x58
   16c6c:	bl	170e4 <__assert_fail@plt+0x53e0>
   16c70:	mov	ip, r4
   16c74:	mov	r3, #0
   16c78:	cmp	r0, #0
   16c7c:	mov	sl, #0
   16c80:	bne	16cfc <__assert_fail@plt+0x4ff8>
   16c84:	ldrb	r0, [r6]
   16c88:	cmp	r0, r9
   16c8c:	bne	16cc0 <__assert_fail@plt+0x4fbc>
   16c90:	mov	r0, #1
   16c94:	ldrb	r1, [r5, r0]
   16c98:	cmp	r1, #0
   16c9c:	beq	16cdc <__assert_fail@plt+0x4fd8>
   16ca0:	ldrb	r2, [r6, r0]
   16ca4:	cmp	r2, #0
   16ca8:	beq	16ce4 <__assert_fail@plt+0x4fe0>
   16cac:	add	r0, r0, #1
   16cb0:	cmp	r2, r1
   16cb4:	beq	16c94 <__assert_fail@plt+0x4f90>
   16cb8:	add	r7, r7, r0
   16cbc:	b	16cc4 <__assert_fail@plt+0x4fc0>
   16cc0:	add	r7, r7, #1
   16cc4:	add	r8, r8, #1
   16cc8:	ldrb	r0, [r6, #1]!
   16ccc:	mov	r4, #0
   16cd0:	cmp	r0, #0
   16cd4:	bne	16c08 <__assert_fail@plt+0x4f04>
   16cd8:	b	16ce8 <__assert_fail@plt+0x4fe4>
   16cdc:	mov	r4, r6
   16ce0:	b	16ce8 <__assert_fail@plt+0x4fe4>
   16ce4:	mov	r4, #0
   16ce8:	mov	r0, r4
   16cec:	sub	sp, fp, #28
   16cf0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   16cf4:	ldr	r4, [sp, #144]	; 0x90
   16cf8:	b	16ce8 <__assert_fail@plt+0x4fe4>
   16cfc:	ldr	r4, [fp, #-88]	; 0xffffffa8
   16d00:	b	16ce8 <__assert_fail@plt+0x4fe4>
   16d04:	ldr	r4, [sp, #72]	; 0x48
   16d08:	b	16ce8 <__assert_fail@plt+0x4fe4>
   16d0c:	bl	11cc8 <abort@plt>
   16d10:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   16d14:	add	fp, sp, #28
   16d18:	sub	sp, sp, #132	; 0x84
   16d1c:	mov	r5, r2
   16d20:	mov	r4, r1
   16d24:	mov	r8, r0
   16d28:	mov	r0, r1
   16d2c:	bl	1677c <__assert_fail@plt+0x4a78>
   16d30:	mov	r6, r0
   16d34:	mov	r7, #0
   16d38:	movw	r0, #47662	; 0xba2e
   16d3c:	movt	r0, #744	; 0x2e8
   16d40:	cmp	r6, r0
   16d44:	bhi	170d4 <__assert_fail@plt+0x53d0>
   16d48:	mov	r0, #44	; 0x2c
   16d4c:	mul	r0, r6, r0
   16d50:	cmp	r0, #4016	; 0xfb0
   16d54:	bhi	16d7c <__assert_fail@plt+0x5078>
   16d58:	add	r0, r0, #22
   16d5c:	bic	r0, r0, #7
   16d60:	sub	r0, sp, r0
   16d64:	add	r1, r0, #15
   16d68:	bic	sl, r1, #15
   16d6c:	mov	sp, r0
   16d70:	cmp	sl, #0
   16d74:	bne	16d8c <__assert_fail@plt+0x5088>
   16d78:	b	170d4 <__assert_fail@plt+0x53d0>
   16d7c:	bl	28d94 <__assert_fail@plt+0x17090>
   16d80:	mov	sl, r0
   16d84:	cmp	sl, #0
   16d88:	beq	170d4 <__assert_fail@plt+0x53d0>
   16d8c:	str	r5, [fp, #-156]	; 0xffffff64
   16d90:	mov	r9, #0
   16d94:	str	r9, [fp, #-80]	; 0xffffffb0
   16d98:	str	r9, [fp, #-84]	; 0xffffffac
   16d9c:	strb	r9, [fp, #-88]	; 0xffffffa8
   16da0:	str	r4, [fp, #-72]	; 0xffffffb8
   16da4:	strb	r9, [fp, #-76]	; 0xffffffb4
   16da8:	sub	r4, fp, #88	; 0x58
   16dac:	mov	r0, r4
   16db0:	bl	1723c <__assert_fail@plt+0x5538>
   16db4:	add	r0, r6, r6, lsl #2
   16db8:	add	r0, sl, r0, lsl #3
   16dbc:	str	r0, [fp, #-148]	; 0xffffff6c
   16dc0:	ldrb	r0, [fp, #-64]	; 0xffffffc0
   16dc4:	cmp	r0, #0
   16dc8:	beq	16dd8 <__assert_fail@plt+0x50d4>
   16dcc:	ldr	r0, [fp, #-60]	; 0xffffffc4
   16dd0:	cmp	r0, #0
   16dd4:	beq	16e28 <__assert_fail@plt+0x5124>
   16dd8:	add	r4, r4, #16
   16ddc:	sub	r7, fp, #88	; 0x58
   16de0:	mov	r5, sl
   16de4:	mov	r0, r5
   16de8:	mov	r1, r4
   16dec:	bl	28e58 <__assert_fail@plt+0x17154>
   16df0:	strb	r9, [fp, #-76]	; 0xffffffb4
   16df4:	ldr	r0, [fp, #-72]	; 0xffffffb8
   16df8:	ldr	r1, [fp, #-68]	; 0xffffffbc
   16dfc:	add	r0, r0, r1
   16e00:	str	r0, [fp, #-72]	; 0xffffffb8
   16e04:	mov	r0, r7
   16e08:	bl	1723c <__assert_fail@plt+0x5538>
   16e0c:	add	r5, r5, #40	; 0x28
   16e10:	ldr	r0, [fp, #-60]	; 0xffffffc4
   16e14:	ldrb	r1, [fp, #-64]	; 0xffffffc0
   16e18:	cmp	r1, #0
   16e1c:	beq	16de4 <__assert_fail@plt+0x50e0>
   16e20:	cmp	r0, #0
   16e24:	bne	16de4 <__assert_fail@plt+0x50e0>
   16e28:	str	r8, [fp, #-160]	; 0xffffff60
   16e2c:	mov	r0, #1
   16e30:	ldr	r3, [fp, #-148]	; 0xffffff6c
   16e34:	str	r0, [r3, #4]
   16e38:	str	r6, [fp, #-152]	; 0xffffff68
   16e3c:	cmp	r6, #3
   16e40:	bcc	16f08 <__assert_fail@plt+0x5204>
   16e44:	mov	r4, #2
   16e48:	mov	r5, #0
   16e4c:	add	r0, r4, r4, lsl #2
   16e50:	add	r0, sl, r0, lsl #3
   16e54:	sub	r7, r0, #28
   16e58:	sub	r9, r0, #40	; 0x28
   16e5c:	sub	r6, r0, #36	; 0x24
   16e60:	ldrb	r8, [r0, #-32]	; 0xffffffe0
   16e64:	cmp	r8, #0
   16e68:	bne	16e80 <__assert_fail@plt+0x517c>
   16e6c:	b	16ea8 <__assert_fail@plt+0x51a4>
   16e70:	ldr	r0, [r3, r5, lsl #2]
   16e74:	sub	r5, r5, r0
   16e78:	cmp	r8, #0
   16e7c:	beq	16ea8 <__assert_fail@plt+0x51a4>
   16e80:	add	r0, r5, r5, lsl #2
   16e84:	add	r0, sl, r0, lsl #3
   16e88:	ldrb	r1, [r0, #8]
   16e8c:	cmp	r1, #0
   16e90:	beq	16ea8 <__assert_fail@plt+0x51a4>
   16e94:	ldr	r0, [r0, #12]
   16e98:	ldr	r1, [r7]
   16e9c:	cmp	r1, r0
   16ea0:	bne	16ed8 <__assert_fail@plt+0x51d4>
   16ea4:	b	16eec <__assert_fail@plt+0x51e8>
   16ea8:	add	r0, r5, r5, lsl #2
   16eac:	add	r1, sl, r0, lsl #3
   16eb0:	ldr	r1, [r1, #4]
   16eb4:	ldr	r2, [r6]
   16eb8:	cmp	r2, r1
   16ebc:	bne	16ed8 <__assert_fail@plt+0x51d4>
   16ec0:	ldr	r1, [sl, r0, lsl #3]
   16ec4:	ldr	r0, [r9]
   16ec8:	bl	11974 <memcmp@plt>
   16ecc:	ldr	r3, [fp, #-148]	; 0xffffff6c
   16ed0:	cmp	r0, #0
   16ed4:	beq	16eec <__assert_fail@plt+0x51e8>
   16ed8:	cmp	r5, #0
   16edc:	bne	16e70 <__assert_fail@plt+0x516c>
   16ee0:	mov	r5, #0
   16ee4:	mov	r0, r4
   16ee8:	b	16ef4 <__assert_fail@plt+0x51f0>
   16eec:	add	r5, r5, #1
   16ef0:	sub	r0, r4, r5
   16ef4:	str	r0, [r3, r4, lsl #2]
   16ef8:	add	r4, r4, #1
   16efc:	ldr	r0, [fp, #-152]	; 0xffffff68
   16f00:	cmp	r4, r0
   16f04:	bne	16e4c <__assert_fail@plt+0x5148>
   16f08:	mov	r5, #0
   16f0c:	ldr	r8, [fp, #-156]	; 0xffffff64
   16f10:	str	r5, [r8]
   16f14:	str	r5, [fp, #-80]	; 0xffffffb0
   16f18:	str	r5, [fp, #-84]	; 0xffffffac
   16f1c:	str	r5, [fp, #-136]	; 0xffffff78
   16f20:	str	r5, [fp, #-140]	; 0xffffff74
   16f24:	strb	r5, [fp, #-88]	; 0xffffffa8
   16f28:	ldr	r0, [fp, #-160]	; 0xffffff60
   16f2c:	str	r0, [fp, #-72]	; 0xffffffb8
   16f30:	strb	r5, [fp, #-76]	; 0xffffffb4
   16f34:	str	r0, [fp, #-128]	; 0xffffff80
   16f38:	strb	r5, [fp, #-144]	; 0xffffff70
   16f3c:	strb	r5, [fp, #-132]	; 0xffffff7c
   16f40:	sub	r0, fp, #144	; 0x90
   16f44:	bl	1723c <__assert_fail@plt+0x5538>
   16f48:	ldrb	r1, [fp, #-120]	; 0xffffff88
   16f4c:	ldr	r0, [fp, #-116]	; 0xffffff8c
   16f50:	cmp	r0, #0
   16f54:	bne	16f60 <__assert_fail@plt+0x525c>
   16f58:	cmp	r1, #0
   16f5c:	bne	170c8 <__assert_fail@plt+0x53c4>
   16f60:	clz	r1, r1
   16f64:	lsr	r1, r1, #5
   16f68:	sub	r9, fp, #144	; 0x90
   16f6c:	sub	r4, fp, #88	; 0x58
   16f70:	mov	r7, #0
   16f74:	add	r3, r7, r7, lsl #2
   16f78:	add	r2, sl, r3, lsl #3
   16f7c:	tst	r1, #1
   16f80:	bne	16fa0 <__assert_fail@plt+0x529c>
   16f84:	ldrb	r1, [r2, #8]
   16f88:	cmp	r1, #0
   16f8c:	beq	16fa0 <__assert_fail@plt+0x529c>
   16f90:	ldr	r1, [r2, #12]
   16f94:	cmp	r1, r0
   16f98:	bne	16fc4 <__assert_fail@plt+0x52c0>
   16f9c:	b	17020 <__assert_fail@plt+0x531c>
   16fa0:	ldr	r2, [r2, #4]
   16fa4:	ldr	r0, [fp, #-124]	; 0xffffff84
   16fa8:	cmp	r2, r0
   16fac:	bne	16fc4 <__assert_fail@plt+0x52c0>
   16fb0:	ldr	r0, [sl, r3, lsl #3]
   16fb4:	ldr	r1, [fp, #-128]	; 0xffffff80
   16fb8:	bl	11974 <memcmp@plt>
   16fbc:	cmp	r0, #0
   16fc0:	beq	17020 <__assert_fail@plt+0x531c>
   16fc4:	cmp	r7, #0
   16fc8:	beq	17048 <__assert_fail@plt+0x5344>
   16fcc:	ldr	r0, [fp, #-148]	; 0xffffff6c
   16fd0:	ldr	r6, [r0, r7, lsl #2]
   16fd4:	sub	r7, r7, r6
   16fd8:	cmp	r6, #0
   16fdc:	beq	17094 <__assert_fail@plt+0x5390>
   16fe0:	mov	r0, r4
   16fe4:	bl	1723c <__assert_fail@plt+0x5538>
   16fe8:	ldrb	r0, [fp, #-64]	; 0xffffffc0
   16fec:	cmp	r0, #0
   16ff0:	beq	17000 <__assert_fail@plt+0x52fc>
   16ff4:	ldr	r0, [fp, #-60]	; 0xffffffc4
   16ff8:	cmp	r0, #0
   16ffc:	beq	170e0 <__assert_fail@plt+0x53dc>
   17000:	strb	r5, [fp, #-76]	; 0xffffffb4
   17004:	ldr	r0, [fp, #-72]	; 0xffffffb8
   17008:	ldr	r1, [fp, #-68]	; 0xffffffbc
   1700c:	add	r0, r0, r1
   17010:	str	r0, [fp, #-72]	; 0xffffffb8
   17014:	subs	r6, r6, #1
   17018:	bne	16fe0 <__assert_fail@plt+0x52dc>
   1701c:	b	17094 <__assert_fail@plt+0x5390>
   17020:	strb	r5, [fp, #-132]	; 0xffffff7c
   17024:	ldr	r0, [fp, #-128]	; 0xffffff80
   17028:	ldr	r1, [fp, #-124]	; 0xffffff84
   1702c:	add	r0, r0, r1
   17030:	str	r0, [fp, #-128]	; 0xffffff80
   17034:	add	r7, r7, #1
   17038:	ldr	r0, [fp, #-152]	; 0xffffff68
   1703c:	cmp	r7, r0
   17040:	bne	17094 <__assert_fail@plt+0x5390>
   17044:	b	170c0 <__assert_fail@plt+0x53bc>
   17048:	mov	r0, r4
   1704c:	bl	1723c <__assert_fail@plt+0x5538>
   17050:	ldrb	r0, [fp, #-64]	; 0xffffffc0
   17054:	cmp	r0, #0
   17058:	beq	17068 <__assert_fail@plt+0x5364>
   1705c:	ldr	r0, [fp, #-60]	; 0xffffffc4
   17060:	cmp	r0, #0
   17064:	beq	170e0 <__assert_fail@plt+0x53dc>
   17068:	mov	r7, #0
   1706c:	strb	r7, [fp, #-76]	; 0xffffffb4
   17070:	strb	r7, [fp, #-132]	; 0xffffff7c
   17074:	ldr	r0, [fp, #-72]	; 0xffffffb8
   17078:	ldr	r1, [fp, #-68]	; 0xffffffbc
   1707c:	add	r0, r0, r1
   17080:	str	r0, [fp, #-72]	; 0xffffffb8
   17084:	ldr	r0, [fp, #-128]	; 0xffffff80
   17088:	ldr	r1, [fp, #-124]	; 0xffffff84
   1708c:	add	r0, r0, r1
   17090:	str	r0, [fp, #-128]	; 0xffffff80
   17094:	mov	r0, r9
   17098:	bl	1723c <__assert_fail@plt+0x5538>
   1709c:	ldrb	r2, [fp, #-120]	; 0xffffff88
   170a0:	clz	r0, r2
   170a4:	lsr	r1, r0, #5
   170a8:	ldr	r0, [fp, #-116]	; 0xffffff8c
   170ac:	cmp	r0, #0
   170b0:	bne	16f74 <__assert_fail@plt+0x5270>
   170b4:	cmp	r2, #0
   170b8:	beq	16f74 <__assert_fail@plt+0x5270>
   170bc:	b	170c8 <__assert_fail@plt+0x53c4>
   170c0:	ldr	r0, [fp, #-72]	; 0xffffffb8
   170c4:	str	r0, [r8]
   170c8:	mov	r0, sl
   170cc:	bl	28e04 <__assert_fail@plt+0x17100>
   170d0:	mov	r7, #1
   170d4:	mov	r0, r7
   170d8:	sub	sp, fp, #28
   170dc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   170e0:	bl	11cc8 <abort@plt>
   170e4:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   170e8:	add	fp, sp, #24
   170ec:	mov	r4, #0
   170f0:	cmn	r2, #-536870911	; 0xe0000001
   170f4:	bhi	17230 <__assert_fail@plt+0x552c>
   170f8:	mov	r8, r3
   170fc:	mov	r5, r2
   17100:	mov	r6, r1
   17104:	mov	r7, r0
   17108:	lsl	r0, r2, #2
   1710c:	cmp	r0, #4016	; 0xfb0
   17110:	bhi	17138 <__assert_fail@plt+0x5434>
   17114:	add	r0, r0, #22
   17118:	bic	r0, r0, #7
   1711c:	sub	r1, sp, r0
   17120:	add	r0, r1, #15
   17124:	bic	r0, r0, #15
   17128:	mov	sp, r1
   1712c:	cmp	r0, #0
   17130:	bne	17144 <__assert_fail@plt+0x5440>
   17134:	b	17230 <__assert_fail@plt+0x552c>
   17138:	bl	28d94 <__assert_fail@plt+0x17090>
   1713c:	cmp	r0, #0
   17140:	beq	17230 <__assert_fail@plt+0x552c>
   17144:	mov	r1, #1
   17148:	str	r1, [r0, #4]
   1714c:	cmp	r5, #3
   17150:	bcc	171b4 <__assert_fail@plt+0x54b0>
   17154:	mov	r1, #2
   17158:	mov	r2, #0
   1715c:	ldrb	r4, [r6, r2]
   17160:	add	r3, r6, r1
   17164:	ldrb	r3, [r3, #-1]
   17168:	cmp	r3, r4
   1716c:	bne	17188 <__assert_fail@plt+0x5484>
   17170:	b	1719c <__assert_fail@plt+0x5498>
   17174:	ldr	r4, [r0, r2, lsl #2]
   17178:	sub	r2, r2, r4
   1717c:	ldrb	r4, [r6, r2]
   17180:	cmp	r3, r4
   17184:	beq	1719c <__assert_fail@plt+0x5498>
   17188:	cmp	r2, #0
   1718c:	bne	17174 <__assert_fail@plt+0x5470>
   17190:	mov	r2, #0
   17194:	mov	r3, r1
   17198:	b	171a4 <__assert_fail@plt+0x54a0>
   1719c:	add	r2, r2, #1
   171a0:	sub	r3, r1, r2
   171a4:	str	r3, [r0, r1, lsl #2]
   171a8:	add	r1, r1, #1
   171ac:	cmp	r1, r5
   171b0:	bne	1715c <__assert_fail@plt+0x5458>
   171b4:	mov	r1, #0
   171b8:	str	r1, [r8]
   171bc:	ldrb	r3, [r7]
   171c0:	cmp	r3, #0
   171c4:	beq	17228 <__assert_fail@plt+0x5524>
   171c8:	mov	r2, r7
   171cc:	ldrb	r4, [r6, r1]
   171d0:	uxtb	r3, r3
   171d4:	cmp	r4, r3
   171d8:	bne	171f0 <__assert_fail@plt+0x54ec>
   171dc:	add	r1, r1, #1
   171e0:	cmp	r1, r5
   171e4:	beq	17224 <__assert_fail@plt+0x5520>
   171e8:	add	r7, r7, #1
   171ec:	b	17214 <__assert_fail@plt+0x5510>
   171f0:	cmp	r1, #0
   171f4:	beq	17208 <__assert_fail@plt+0x5504>
   171f8:	ldr	r3, [r0, r1, lsl #2]
   171fc:	sub	r1, r1, r3
   17200:	add	r2, r2, r3
   17204:	b	17214 <__assert_fail@plt+0x5510>
   17208:	add	r7, r7, #1
   1720c:	add	r2, r2, #1
   17210:	mov	r1, #0
   17214:	ldrb	r3, [r7]
   17218:	cmp	r3, #0
   1721c:	bne	171cc <__assert_fail@plt+0x54c8>
   17220:	b	17228 <__assert_fail@plt+0x5524>
   17224:	str	r2, [r8]
   17228:	bl	28e04 <__assert_fail@plt+0x17100>
   1722c:	mov	r4, #1
   17230:	mov	r0, r4
   17234:	sub	sp, fp, #24
   17238:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   1723c:	push	{r4, r5, r6, r7, fp, lr}
   17240:	add	fp, sp, #16
   17244:	mov	r4, r0
   17248:	ldrb	r0, [r0, #12]
   1724c:	cmp	r0, #0
   17250:	popne	{r4, r5, r6, r7, fp, pc}
   17254:	ldrb	r0, [r4]
   17258:	cmp	r0, #0
   1725c:	bne	172a8 <__assert_fail@plt+0x55a4>
   17260:	ldr	r0, [r4, #16]
   17264:	ldrb	r0, [r0]
   17268:	bl	28ea8 <__assert_fail@plt+0x171a4>
   1726c:	cmp	r0, #0
   17270:	beq	17290 <__assert_fail@plt+0x558c>
   17274:	mov	r0, #1
   17278:	str	r0, [r4, #20]
   1727c:	ldr	r1, [r4, #16]
   17280:	ldrb	r1, [r1]
   17284:	strb	r0, [r4, #24]
   17288:	str	r1, [r4, #28]
   1728c:	b	17360 <__assert_fail@plt+0x565c>
   17290:	add	r0, r4, #4
   17294:	bl	1195c <mbsinit@plt>
   17298:	cmp	r0, #0
   1729c:	beq	1736c <__assert_fail@plt+0x5668>
   172a0:	mov	r0, #1
   172a4:	strb	r0, [r4]
   172a8:	ldr	r7, [r4, #16]
   172ac:	bl	119f8 <__ctype_get_mb_cur_max@plt>
   172b0:	mov	r1, r0
   172b4:	mov	r0, r7
   172b8:	bl	190c0 <__assert_fail@plt+0x73bc>
   172bc:	mov	r2, r0
   172c0:	add	r6, r4, #28
   172c4:	add	r5, r4, #4
   172c8:	mov	r0, r6
   172cc:	mov	r1, r7
   172d0:	mov	r3, r5
   172d4:	bl	1a328 <__assert_fail@plt+0x8624>
   172d8:	str	r0, [r4, #20]
   172dc:	cmn	r0, #2
   172e0:	beq	1734c <__assert_fail@plt+0x5648>
   172e4:	cmp	r0, #0
   172e8:	beq	17308 <__assert_fail@plt+0x5604>
   172ec:	cmn	r0, #1
   172f0:	bne	1732c <__assert_fail@plt+0x5628>
   172f4:	mov	r0, #0
   172f8:	strb	r0, [r4, #24]
   172fc:	mov	r0, #1
   17300:	str	r0, [r4, #20]
   17304:	b	17360 <__assert_fail@plt+0x565c>
   17308:	mov	r0, #1
   1730c:	str	r0, [r4, #20]
   17310:	ldr	r0, [r4, #16]
   17314:	ldrb	r0, [r0]
   17318:	cmp	r0, #0
   1731c:	bne	1738c <__assert_fail@plt+0x5688>
   17320:	ldr	r0, [r6]
   17324:	cmp	r0, #0
   17328:	bne	173ac <__assert_fail@plt+0x56a8>
   1732c:	mov	r0, #1
   17330:	strb	r0, [r4, #24]
   17334:	mov	r0, r5
   17338:	bl	1195c <mbsinit@plt>
   1733c:	cmp	r0, #0
   17340:	movne	r0, #0
   17344:	strbne	r0, [r4]
   17348:	b	17360 <__assert_fail@plt+0x565c>
   1734c:	ldr	r0, [r4, #16]
   17350:	bl	11af4 <strlen@plt>
   17354:	str	r0, [r4, #20]
   17358:	mov	r0, #0
   1735c:	strb	r0, [r4, #24]
   17360:	mov	r0, #1
   17364:	strb	r0, [r4, #12]
   17368:	pop	{r4, r5, r6, r7, fp, pc}
   1736c:	movw	r0, #42916	; 0xa7a4
   17370:	movt	r0, #2
   17374:	movw	r1, #42939	; 0xa7bb
   17378:	movt	r1, #2
   1737c:	movw	r3, #42951	; 0xa7c7
   17380:	movt	r3, #2
   17384:	mov	r2, #143	; 0x8f
   17388:	bl	11d04 <__assert_fail@plt>
   1738c:	movw	r0, #42999	; 0xa7f7
   17390:	movt	r0, #2
   17394:	movw	r1, #42939	; 0xa7bb
   17398:	movt	r1, #2
   1739c:	movw	r3, #42951	; 0xa7c7
   173a0:	movt	r3, #2
   173a4:	mov	r2, #171	; 0xab
   173a8:	bl	11d04 <__assert_fail@plt>
   173ac:	movw	r0, #43022	; 0xa80e
   173b0:	movt	r0, #2
   173b4:	movw	r1, #42939	; 0xa7bb
   173b8:	movt	r1, #2
   173bc:	movw	r3, #42951	; 0xa7c7
   173c0:	movt	r3, #2
   173c4:	mov	r2, #172	; 0xac
   173c8:	bl	11d04 <__assert_fail@plt>
   173cc:	ldr	r2, [r0, #16]
   173d0:	add	r1, r2, r1
   173d4:	str	r1, [r0, #16]
   173d8:	bx	lr
   173dc:	ldrb	r3, [r1]
   173e0:	mov	r2, r0
   173e4:	strb	r3, [r2], #4
   173e8:	cmp	r3, #0
   173ec:	beq	173fc <__assert_fail@plt+0x56f8>
   173f0:	ldmib	r1, {r3, ip}
   173f4:	stm	r2, {r3, ip}
   173f8:	b	17408 <__assert_fail@plt+0x5704>
   173fc:	mov	r3, #0
   17400:	str	r3, [r2]
   17404:	str	r3, [r2, #4]
   17408:	ldrb	r2, [r1, #12]
   1740c:	strb	r2, [r0, #12]
   17410:	add	r0, r0, #16
   17414:	add	r1, r1, #16
   17418:	b	28e58 <__assert_fail@plt+0x17154>
   1741c:	push	{r4, r5, fp, lr}
   17420:	add	fp, sp, #8
   17424:	cmp	r0, #0
   17428:	beq	174bc <__assert_fail@plt+0x57b8>
   1742c:	mov	r4, r0
   17430:	mov	r1, #47	; 0x2f
   17434:	bl	11c08 <strrchr@plt>
   17438:	cmp	r0, #0
   1743c:	mov	r5, r4
   17440:	addne	r5, r0, #1
   17444:	sub	r0, r5, r4
   17448:	cmp	r0, #7
   1744c:	blt	174a0 <__assert_fail@plt+0x579c>
   17450:	sub	r0, r5, #7
   17454:	movw	r1, #43096	; 0xa858
   17458:	movt	r1, #2
   1745c:	mov	r2, #7
   17460:	bl	11cbc <strncmp@plt>
   17464:	cmp	r0, #0
   17468:	bne	174a0 <__assert_fail@plt+0x579c>
   1746c:	movw	r1, #43104	; 0xa860
   17470:	movt	r1, #2
   17474:	mov	r0, r5
   17478:	mov	r2, #3
   1747c:	bl	11cbc <strncmp@plt>
   17480:	cmp	r0, #0
   17484:	beq	17490 <__assert_fail@plt+0x578c>
   17488:	mov	r4, r5
   1748c:	b	174a0 <__assert_fail@plt+0x579c>
   17490:	add	r4, r5, #3
   17494:	movw	r0, #49672	; 0xc208
   17498:	movt	r0, #3
   1749c:	str	r4, [r0]
   174a0:	movw	r0, #49676	; 0xc20c
   174a4:	movt	r0, #3
   174a8:	str	r4, [r0]
   174ac:	movw	r0, #49820	; 0xc29c
   174b0:	movt	r0, #3
   174b4:	str	r4, [r0]
   174b8:	pop	{r4, r5, fp, pc}
   174bc:	movw	r0, #49688	; 0xc218
   174c0:	movt	r0, #3
   174c4:	ldr	r3, [r0]
   174c8:	movw	r0, #43040	; 0xa820
   174cc:	movt	r0, #2
   174d0:	mov	r1, #55	; 0x37
   174d4:	mov	r2, #1
   174d8:	bl	119e0 <fwrite@plt>
   174dc:	bl	11cc8 <abort@plt>
   174e0:	push	{r4, r5, r6, sl, fp, lr}
   174e4:	add	fp, sp, #16
   174e8:	mov	r4, r0
   174ec:	movw	r0, #49824	; 0xc2a0
   174f0:	movt	r0, #3
   174f4:	cmp	r4, #0
   174f8:	moveq	r4, r0
   174fc:	bl	11b24 <__errno_location@plt>
   17500:	mov	r5, r0
   17504:	ldr	r6, [r0]
   17508:	mov	r0, r4
   1750c:	mov	r1, #48	; 0x30
   17510:	bl	198c0 <__assert_fail@plt+0x7bbc>
   17514:	str	r6, [r5]
   17518:	pop	{r4, r5, r6, sl, fp, pc}
   1751c:	movw	r1, #49824	; 0xc2a0
   17520:	movt	r1, #3
   17524:	cmp	r0, #0
   17528:	movne	r1, r0
   1752c:	ldr	r0, [r1]
   17530:	bx	lr
   17534:	movw	r2, #49824	; 0xc2a0
   17538:	movt	r2, #3
   1753c:	cmp	r0, #0
   17540:	movne	r2, r0
   17544:	str	r1, [r2]
   17548:	bx	lr
   1754c:	movw	r3, #49824	; 0xc2a0
   17550:	movt	r3, #3
   17554:	cmp	r0, #0
   17558:	movne	r3, r0
   1755c:	ubfx	r0, r1, #5, #3
   17560:	add	r0, r3, r0, lsl #2
   17564:	ldr	r3, [r0, #8]
   17568:	and	r1, r1, #31
   1756c:	eor	r2, r2, r3, lsr r1
   17570:	and	r2, r2, #1
   17574:	eor	r2, r3, r2, lsl r1
   17578:	str	r2, [r0, #8]
   1757c:	mov	r0, #1
   17580:	and	r0, r0, r3, lsr r1
   17584:	bx	lr
   17588:	movw	r2, #49824	; 0xc2a0
   1758c:	movt	r2, #3
   17590:	cmp	r0, #0
   17594:	movne	r2, r0
   17598:	ldr	r0, [r2, #4]
   1759c:	str	r1, [r2, #4]
   175a0:	bx	lr
   175a4:	movw	r3, #49824	; 0xc2a0
   175a8:	movt	r3, #3
   175ac:	cmp	r0, #0
   175b0:	movne	r3, r0
   175b4:	mov	r0, #10
   175b8:	str	r0, [r3]
   175bc:	cmp	r1, #0
   175c0:	cmpne	r2, #0
   175c4:	bne	175d4 <__assert_fail@plt+0x58d0>
   175c8:	push	{fp, lr}
   175cc:	mov	fp, sp
   175d0:	bl	11cc8 <abort@plt>
   175d4:	str	r1, [r3, #40]	; 0x28
   175d8:	str	r2, [r3, #44]	; 0x2c
   175dc:	bx	lr
   175e0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   175e4:	add	fp, sp, #28
   175e8:	sub	sp, sp, #20
   175ec:	mov	r8, r3
   175f0:	mov	r9, r2
   175f4:	mov	sl, r1
   175f8:	mov	r7, r0
   175fc:	ldr	r0, [fp, #8]
   17600:	movw	r5, #49824	; 0xc2a0
   17604:	movt	r5, #3
   17608:	cmp	r0, #0
   1760c:	movne	r5, r0
   17610:	bl	11b24 <__errno_location@plt>
   17614:	mov	r4, r0
   17618:	ldm	r5, {r0, r1}
   1761c:	ldr	r2, [r5, #40]	; 0x28
   17620:	ldr	r3, [r5, #44]	; 0x2c
   17624:	ldr	r6, [r4]
   17628:	add	r5, r5, #8
   1762c:	stm	sp, {r0, r1, r5}
   17630:	str	r2, [sp, #12]
   17634:	str	r3, [sp, #16]
   17638:	mov	r0, r7
   1763c:	mov	r1, sl
   17640:	mov	r2, r9
   17644:	mov	r3, r8
   17648:	bl	17658 <__assert_fail@plt+0x5954>
   1764c:	str	r6, [r4]
   17650:	sub	sp, fp, #28
   17654:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   17658:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1765c:	add	fp, sp, #28
   17660:	sub	sp, sp, #156	; 0x9c
   17664:	mov	r9, r3
   17668:	str	r2, [fp, #-84]	; 0xffffffac
   1766c:	mov	r6, r1
   17670:	mov	r7, r0
   17674:	ldr	r0, [fp, #12]
   17678:	and	r1, r0, #4
   1767c:	str	r1, [sp, #32]
   17680:	and	r1, r0, #1
   17684:	str	r1, [sp, #36]	; 0x24
   17688:	ubfx	sl, r0, #1, #1
   1768c:	bl	119f8 <__ctype_get_mb_cur_max@plt>
   17690:	str	r0, [sp, #40]	; 0x28
   17694:	ldr	r0, [fp, #24]
   17698:	str	r0, [sp, #76]	; 0x4c
   1769c:	ldr	r0, [fp, #20]
   176a0:	str	r0, [sp, #68]	; 0x44
   176a4:	ldr	r0, [fp, #8]
   176a8:	str	r0, [fp, #-60]	; 0xffffffc4
   176ac:	mov	r0, #0
   176b0:	str	r0, [sp, #72]	; 0x48
   176b4:	mov	r0, #0
   176b8:	str	r0, [sp, #92]	; 0x5c
   176bc:	mov	r0, #0
   176c0:	str	r0, [fp, #-72]	; 0xffffffb8
   176c4:	mov	r0, #0
   176c8:	mov	r1, #0
   176cc:	str	r1, [fp, #-56]	; 0xffffffc8
   176d0:	mov	r1, #0
   176d4:	str	r1, [sp, #56]	; 0x38
   176d8:	mov	r5, #1
   176dc:	str	r7, [sp, #80]	; 0x50
   176e0:	mov	r4, r6
   176e4:	ldr	r6, [fp, #-60]	; 0xffffffc4
   176e8:	cmp	r6, #10
   176ec:	bhi	18654 <__assert_fail@plt+0x6950>
   176f0:	add	r1, pc, #20
   176f4:	mov	r8, #0
   176f8:	mov	r2, #1
   176fc:	mov	r3, #0
   17700:	ldr	ip, [fp, #-84]	; 0xffffffac
   17704:	mov	lr, r9
   17708:	ldr	pc, [r1, r6, lsl #2]
   1770c:	andeq	r7, r1, r4, ror #15
   17710:	andeq	r7, r1, r4, lsl r8
   17714:	ldrdeq	r7, [r1], -r4
   17718:	andeq	r7, r1, ip, asr #15
   1771c:	andeq	r7, r1, r8, lsl #16
   17720:	andeq	r7, r1, r8, ror #16
   17724:	strdeq	r7, [r1], -r4
   17728:	andeq	r7, r1, r4, asr #17
   1772c:	andeq	r7, r1, r8, lsr r7
   17730:	andeq	r7, r1, r8, lsr r7
   17734:	andeq	r7, r1, r0, ror #14
   17738:	movw	r0, #43186	; 0xa8b2
   1773c:	movt	r0, #2
   17740:	mov	r1, r6
   17744:	bl	18c60 <__assert_fail@plt+0x6f5c>
   17748:	str	r0, [sp, #68]	; 0x44
   1774c:	movw	r0, #40417	; 0x9de1
   17750:	movt	r0, #2
   17754:	mov	r1, r6
   17758:	bl	18c60 <__assert_fail@plt+0x6f5c>
   1775c:	str	r0, [sp, #76]	; 0x4c
   17760:	mov	r8, #0
   17764:	tst	sl, #1
   17768:	bne	177a0 <__assert_fail@plt+0x5a9c>
   1776c:	ldr	r0, [sp, #68]	; 0x44
   17770:	ldrb	r0, [r0]
   17774:	cmp	r0, #0
   17778:	beq	177a0 <__assert_fail@plt+0x5a9c>
   1777c:	ldr	r1, [sp, #68]	; 0x44
   17780:	add	r1, r1, #1
   17784:	mov	r8, #0
   17788:	cmp	r8, r4
   1778c:	strbcc	r0, [r7, r8]
   17790:	ldrb	r0, [r1, r8]
   17794:	add	r8, r8, #1
   17798:	cmp	r0, #0
   1779c:	bne	17788 <__assert_fail@plt+0x5a84>
   177a0:	ldr	r6, [sp, #76]	; 0x4c
   177a4:	mov	r0, r6
   177a8:	bl	11af4 <strlen@plt>
   177ac:	str	r0, [fp, #-72]	; 0xffffffb8
   177b0:	str	r6, [sp, #92]	; 0x5c
   177b4:	mov	r2, #1
   177b8:	mov	r3, sl
   177bc:	ldr	ip, [fp, #-84]	; 0xffffffac
   177c0:	mov	lr, r9
   177c4:	ldr	r6, [fp, #-60]	; 0xffffffc4
   177c8:	b	178c4 <__assert_fail@plt+0x5bc0>
   177cc:	mov	r0, #1
   177d0:	b	17814 <__assert_fail@plt+0x5b10>
   177d4:	tst	sl, #1
   177d8:	bne	17814 <__assert_fail@plt+0x5b10>
   177dc:	mov	r2, r0
   177e0:	b	1783c <__assert_fail@plt+0x5b38>
   177e4:	mov	r6, #0
   177e8:	mov	r8, #0
   177ec:	mov	r2, r0
   177f0:	b	178c0 <__assert_fail@plt+0x5bbc>
   177f4:	mov	r0, #1
   177f8:	str	r0, [fp, #-72]	; 0xffffffb8
   177fc:	mov	r8, #0
   17800:	mov	r6, #5
   17804:	b	17880 <__assert_fail@plt+0x5b7c>
   17808:	mov	r2, #1
   1780c:	tst	sl, #1
   17810:	beq	1783c <__assert_fail@plt+0x5b38>
   17814:	mov	r1, #1
   17818:	str	r1, [fp, #-72]	; 0xffffffb8
   1781c:	mov	r8, #0
   17820:	mov	r6, #2
   17824:	movw	r1, #40417	; 0x9de1
   17828:	movt	r1, #2
   1782c:	str	r1, [sp, #92]	; 0x5c
   17830:	mov	r2, r0
   17834:	mov	r3, #1
   17838:	b	178c4 <__assert_fail@plt+0x5bc0>
   1783c:	mov	r8, #1
   17840:	mov	r6, #2
   17844:	cmp	r4, #0
   17848:	movne	r0, #39	; 0x27
   1784c:	strbne	r0, [r7]
   17850:	movw	r0, #40417	; 0x9de1
   17854:	movt	r0, #2
   17858:	str	r0, [sp, #92]	; 0x5c
   1785c:	mov	r0, #1
   17860:	str	r0, [fp, #-72]	; 0xffffffb8
   17864:	b	178c0 <__assert_fail@plt+0x5bbc>
   17868:	mov	r6, #5
   1786c:	tst	sl, #1
   17870:	beq	17898 <__assert_fail@plt+0x5b94>
   17874:	mov	r0, #1
   17878:	str	r0, [fp, #-72]	; 0xffffffb8
   1787c:	mov	r8, #0
   17880:	movw	r0, #43184	; 0xa8b0
   17884:	movt	r0, #2
   17888:	str	r0, [sp, #92]	; 0x5c
   1788c:	mov	r2, #1
   17890:	mov	r3, #1
   17894:	b	178c4 <__assert_fail@plt+0x5bc0>
   17898:	cmp	r4, #0
   1789c:	movne	r0, #34	; 0x22
   178a0:	strbne	r0, [r7]
   178a4:	mov	r8, #1
   178a8:	movw	r0, #43184	; 0xa8b0
   178ac:	movt	r0, #2
   178b0:	str	r0, [sp, #92]	; 0x5c
   178b4:	mov	r0, #1
   178b8:	str	r0, [fp, #-72]	; 0xffffffb8
   178bc:	mov	r2, #1
   178c0:	mov	r3, #0
   178c4:	ldr	r0, [fp, #16]
   178c8:	cmp	r0, #0
   178cc:	movwne	r0, #1
   178d0:	and	r0, r0, r3
   178d4:	str	r0, [fp, #-88]	; 0xffffffa8
   178d8:	ldr	r0, [fp, #-72]	; 0xffffffb8
   178dc:	cmp	r0, #0
   178e0:	movwne	r0, #1
   178e4:	and	r1, r0, r3
   178e8:	and	r1, r2, r1
   178ec:	str	r1, [sp, #48]	; 0x30
   178f0:	str	r6, [fp, #-60]	; 0xffffffc4
   178f4:	subs	r6, r6, #2
   178f8:	clz	r1, r6
   178fc:	lsr	r1, r1, #5
   17900:	and	r1, r1, r3
   17904:	str	r1, [sp, #60]	; 0x3c
   17908:	str	r6, [fp, #-80]	; 0xffffffb0
   1790c:	mov	r1, r6
   17910:	movwne	r1, #1
   17914:	str	r3, [fp, #-76]	; 0xffffffb4
   17918:	eor	r3, r3, #1
   1791c:	str	r3, [sp, #88]	; 0x58
   17920:	orr	r3, r1, r3
   17924:	str	r3, [sp, #64]	; 0x40
   17928:	and	r1, r1, r2
   1792c:	str	r1, [fp, #-68]	; 0xffffffbc
   17930:	and	r0, r0, r1
   17934:	str	r0, [fp, #-64]	; 0xffffffc0
   17938:	str	r2, [sp, #84]	; 0x54
   1793c:	eor	r0, r2, #1
   17940:	str	r0, [sp, #52]	; 0x34
   17944:	mov	r6, #0
   17948:	cmn	lr, #1
   1794c:	beq	1795c <__assert_fail@plt+0x5c58>
   17950:	cmp	r6, lr
   17954:	bne	17968 <__assert_fail@plt+0x5c64>
   17958:	b	184d4 <__assert_fail@plt+0x67d0>
   1795c:	ldrb	r0, [ip, r6]
   17960:	cmp	r0, #0
   17964:	beq	184d4 <__assert_fail@plt+0x67d0>
   17968:	str	r5, [fp, #-48]	; 0xffffffd0
   1796c:	mov	sl, #0
   17970:	ldr	r0, [fp, #-64]	; 0xffffffc0
   17974:	cmp	r0, #0
   17978:	beq	179ac <__assert_fail@plt+0x5ca8>
   1797c:	ldr	r0, [fp, #-72]	; 0xffffffb8
   17980:	add	r5, r6, r0
   17984:	cmp	r0, #2
   17988:	bcc	179a4 <__assert_fail@plt+0x5ca0>
   1798c:	cmn	lr, #1
   17990:	bne	179a4 <__assert_fail@plt+0x5ca0>
   17994:	mov	r0, ip
   17998:	bl	11af4 <strlen@plt>
   1799c:	ldr	ip, [fp, #-84]	; 0xffffffac
   179a0:	mov	lr, r0
   179a4:	cmp	r5, lr
   179a8:	bls	179b8 <__assert_fail@plt+0x5cb4>
   179ac:	mov	r0, #0
   179b0:	str	r0, [fp, #-52]	; 0xffffffcc
   179b4:	b	17a04 <__assert_fail@plt+0x5d00>
   179b8:	mov	r5, r4
   179bc:	mov	r4, lr
   179c0:	add	r0, ip, r6
   179c4:	ldr	r1, [sp, #92]	; 0x5c
   179c8:	ldr	r2, [fp, #-72]	; 0xffffffb8
   179cc:	bl	11974 <memcmp@plt>
   179d0:	cmp	r0, #0
   179d4:	mov	r1, r0
   179d8:	movwne	r1, #1
   179dc:	ldr	r2, [sp, #88]	; 0x58
   179e0:	orr	r1, r1, r2
   179e4:	tst	r1, #1
   179e8:	beq	18598 <__assert_fail@plt+0x6894>
   179ec:	clz	r0, r0
   179f0:	lsr	r0, r0, #5
   179f4:	str	r0, [fp, #-52]	; 0xffffffcc
   179f8:	ldr	ip, [fp, #-84]	; 0xffffffac
   179fc:	mov	lr, r4
   17a00:	mov	r4, r5
   17a04:	ldrb	r5, [ip, r6]
   17a08:	cmp	r5, #126	; 0x7e
   17a0c:	bhi	17dc8 <__assert_fail@plt+0x60c4>
   17a10:	mov	r9, #1
   17a14:	mov	r2, #110	; 0x6e
   17a18:	mov	r0, #97	; 0x61
   17a1c:	add	r3, pc, #4
   17a20:	mov	r1, #0
   17a24:	ldr	pc, [r3, r5, lsl #2]
   17a28:	andeq	r7, r1, r0, asr #25
   17a2c:	andeq	r7, r1, r8, asr #27
   17a30:	andeq	r7, r1, r8, asr #27
   17a34:	andeq	r7, r1, r8, asr #27
   17a38:	andeq	r7, r1, r8, asr #27
   17a3c:	andeq	r7, r1, r8, asr #27
   17a40:	andeq	r7, r1, r8, asr #27
   17a44:	andeq	r7, r1, ip, lsl #29
   17a48:	andeq	r7, r1, r0, lsr #25
   17a4c:	muleq	r1, r8, ip
   17a50:	andeq	r7, r1, ip, lsr #25
   17a54:	andeq	r7, r1, r0, lsr sp
   17a58:	muleq	r1, r0, ip
   17a5c:	andeq	r7, r1, r8, lsr #25
   17a60:	andeq	r7, r1, r8, asr #27
   17a64:	andeq	r7, r1, r8, asr #27
   17a68:	andeq	r7, r1, r8, asr #27
   17a6c:	andeq	r7, r1, r8, asr #27
   17a70:	andeq	r7, r1, r8, asr #27
   17a74:	andeq	r7, r1, r8, asr #27
   17a78:	andeq	r7, r1, r8, asr #27
   17a7c:	andeq	r7, r1, r8, asr #27
   17a80:	andeq	r7, r1, r8, asr #27
   17a84:	andeq	r7, r1, r8, asr #27
   17a88:	andeq	r7, r1, r8, asr #27
   17a8c:	andeq	r7, r1, r8, asr #27
   17a90:	andeq	r7, r1, r8, asr #27
   17a94:	andeq	r7, r1, r8, asr #27
   17a98:	andeq	r7, r1, r8, asr #27
   17a9c:	andeq	r7, r1, r8, asr #27
   17aa0:	andeq	r7, r1, r8, asr #27
   17aa4:	andeq	r7, r1, r8, asr #27
   17aa8:	andeq	r7, r1, ip, lsr lr
   17aac:	andeq	r7, r1, r0, asr #28
   17ab0:	andeq	r7, r1, r0, asr #28
   17ab4:	andeq	r7, r1, r8, lsr ip
   17ab8:	andeq	r7, r1, r0, asr #28
   17abc:	andeq	r7, r1, r4, lsr #24
   17ac0:	andeq	r7, r1, r0, asr #28
   17ac4:	andeq	r7, r1, r8, lsr sp
   17ac8:	andeq	r7, r1, r0, asr #28
   17acc:	andeq	r7, r1, r0, asr #28
   17ad0:	andeq	r7, r1, r0, asr #28
   17ad4:	andeq	r7, r1, r4, lsr #24
   17ad8:	andeq	r7, r1, r4, lsr #24
   17adc:	andeq	r7, r1, r4, lsr #24
   17ae0:	andeq	r7, r1, r4, lsr #24
   17ae4:	andeq	r7, r1, r4, lsr #24
   17ae8:	andeq	r7, r1, r4, lsr #24
   17aec:	andeq	r7, r1, r4, lsr #24
   17af0:	andeq	r7, r1, r4, lsr #24
   17af4:	andeq	r7, r1, r4, lsr #24
   17af8:	andeq	r7, r1, r4, lsr #24
   17afc:	andeq	r7, r1, r4, lsr #24
   17b00:	andeq	r7, r1, r4, lsr #24
   17b04:	andeq	r7, r1, r4, lsr #24
   17b08:	andeq	r7, r1, r4, lsr #24
   17b0c:	andeq	r7, r1, r4, lsr #24
   17b10:	andeq	r7, r1, r4, lsr #24
   17b14:	andeq	r7, r1, r0, asr #28
   17b18:	andeq	r7, r1, r0, asr #28
   17b1c:	andeq	r7, r1, r0, asr #28
   17b20:	andeq	r7, r1, r0, asr #28
   17b24:	andeq	r7, r1, r0, lsl #26
   17b28:	andeq	r7, r1, r8, asr #27
   17b2c:	andeq	r7, r1, r4, lsr #24
   17b30:	andeq	r7, r1, r4, lsr #24
   17b34:	andeq	r7, r1, r4, lsr #24
   17b38:	andeq	r7, r1, r4, lsr #24
   17b3c:	andeq	r7, r1, r4, lsr #24
   17b40:	andeq	r7, r1, r4, lsr #24
   17b44:	andeq	r7, r1, r4, lsr #24
   17b48:	andeq	r7, r1, r4, lsr #24
   17b4c:	andeq	r7, r1, r4, lsr #24
   17b50:	andeq	r7, r1, r4, lsr #24
   17b54:	andeq	r7, r1, r4, lsr #24
   17b58:	andeq	r7, r1, r4, lsr #24
   17b5c:	andeq	r7, r1, r4, lsr #24
   17b60:	andeq	r7, r1, r4, lsr #24
   17b64:	andeq	r7, r1, r4, lsr #24
   17b68:	andeq	r7, r1, r4, lsr #24
   17b6c:	andeq	r7, r1, r4, lsr #24
   17b70:	andeq	r7, r1, r4, lsr #24
   17b74:	andeq	r7, r1, r4, lsr #24
   17b78:	andeq	r7, r1, r4, lsr #24
   17b7c:	andeq	r7, r1, r4, lsr #24
   17b80:	andeq	r7, r1, r4, lsr #24
   17b84:	andeq	r7, r1, r4, lsr #24
   17b88:	andeq	r7, r1, r4, lsr #24
   17b8c:	andeq	r7, r1, r4, lsr #24
   17b90:	andeq	r7, r1, r4, lsr #24
   17b94:	andeq	r7, r1, r0, asr #28
   17b98:	andeq	r7, r1, ip, ror #24
   17b9c:	andeq	r7, r1, r4, lsr #24
   17ba0:	andeq	r7, r1, r0, asr #28
   17ba4:	andeq	r7, r1, r4, lsr #24
   17ba8:	andeq	r7, r1, r0, asr #28
   17bac:	andeq	r7, r1, r4, lsr #24
   17bb0:	andeq	r7, r1, r4, lsr #24
   17bb4:	andeq	r7, r1, r4, lsr #24
   17bb8:	andeq	r7, r1, r4, lsr #24
   17bbc:	andeq	r7, r1, r4, lsr #24
   17bc0:	andeq	r7, r1, r4, lsr #24
   17bc4:	andeq	r7, r1, r4, lsr #24
   17bc8:	andeq	r7, r1, r4, lsr #24
   17bcc:	andeq	r7, r1, r4, lsr #24
   17bd0:	andeq	r7, r1, r4, lsr #24
   17bd4:	andeq	r7, r1, r4, lsr #24
   17bd8:	andeq	r7, r1, r4, lsr #24
   17bdc:	andeq	r7, r1, r4, lsr #24
   17be0:	andeq	r7, r1, r4, lsr #24
   17be4:	andeq	r7, r1, r4, lsr #24
   17be8:	andeq	r7, r1, r4, lsr #24
   17bec:	andeq	r7, r1, r4, lsr #24
   17bf0:	andeq	r7, r1, r4, lsr #24
   17bf4:	andeq	r7, r1, r4, lsr #24
   17bf8:	andeq	r7, r1, r4, lsr #24
   17bfc:	andeq	r7, r1, r4, lsr #24
   17c00:	andeq	r7, r1, r4, lsr #24
   17c04:	andeq	r7, r1, r4, lsr #24
   17c08:	andeq	r7, r1, r4, lsr #24
   17c0c:	andeq	r7, r1, r4, lsr #24
   17c10:	andeq	r7, r1, r4, lsr #24
   17c14:	andeq	r7, r1, ip, asr #24
   17c18:	andeq	r7, r1, r0, asr #28
   17c1c:	andeq	r7, r1, ip, asr #24
   17c20:	andeq	r7, r1, r8, lsr ip
   17c24:	ldr	r0, [fp, #-68]	; 0xffffffbc
   17c28:	cmp	r0, #0
   17c2c:	beq	17ea0 <__assert_fail@plt+0x619c>
   17c30:	ldr	r0, [fp, #16]
   17c34:	b	17ea4 <__assert_fail@plt+0x61a0>
   17c38:	mov	r9, #0
   17c3c:	cmp	r6, #0
   17c40:	beq	17e3c <__assert_fail@plt+0x6138>
   17c44:	mov	sl, #0
   17c48:	b	17c24 <__assert_fail@plt+0x5f20>
   17c4c:	mov	r9, #0
   17c50:	cmn	lr, #1
   17c54:	beq	17e20 <__assert_fail@plt+0x611c>
   17c58:	cmp	r6, #0
   17c5c:	bne	17c44 <__assert_fail@plt+0x5f40>
   17c60:	cmp	lr, #1
   17c64:	beq	17e3c <__assert_fail@plt+0x6138>
   17c68:	b	17c44 <__assert_fail@plt+0x5f40>
   17c6c:	ldr	r0, [fp, #-60]	; 0xffffffc4
   17c70:	cmp	r0, #2
   17c74:	bne	17e68 <__assert_fail@plt+0x6164>
   17c78:	ldr	r0, [fp, #-76]	; 0xffffffb4
   17c7c:	tst	r0, #1
   17c80:	bne	185b0 <__assert_fail@plt+0x68ac>
   17c84:	mov	sl, #0
   17c88:	mov	r0, #92	; 0x5c
   17c8c:	b	17e7c <__assert_fail@plt+0x6178>
   17c90:	mov	r0, #102	; 0x66
   17c94:	b	17e8c <__assert_fail@plt+0x6188>
   17c98:	mov	r2, #116	; 0x74
   17c9c:	b	17cac <__assert_fail@plt+0x5fa8>
   17ca0:	mov	r0, #98	; 0x62
   17ca4:	b	17e8c <__assert_fail@plt+0x6188>
   17ca8:	mov	r2, #114	; 0x72
   17cac:	ldr	r0, [sp, #64]	; 0x40
   17cb0:	tst	r0, #1
   17cb4:	mov	r0, r2
   17cb8:	bne	17e8c <__assert_fail@plt+0x6188>
   17cbc:	b	185b0 <__assert_fail@plt+0x68ac>
   17cc0:	ldr	r0, [sp, #84]	; 0x54
   17cc4:	tst	r0, #1
   17cc8:	beq	17f7c <__assert_fail@plt+0x6278>
   17ccc:	ldr	r0, [fp, #-76]	; 0xffffffb4
   17cd0:	tst	r0, #1
   17cd4:	bne	185b0 <__assert_fail@plt+0x68ac>
   17cd8:	ldr	r0, [fp, #-60]	; 0xffffffc4
   17cdc:	cmp	r0, #2
   17ce0:	ldr	r0, [fp, #-80]	; 0xffffffb0
   17ce4:	movwne	r0, #1
   17ce8:	ldr	r2, [fp, #-56]	; 0xffffffc8
   17cec:	orr	r0, r0, r2
   17cf0:	tst	r0, #1
   17cf4:	beq	18370 <__assert_fail@plt+0x666c>
   17cf8:	mov	r0, r8
   17cfc:	b	183a4 <__assert_fail@plt+0x66a0>
   17d00:	mov	sl, #0
   17d04:	mov	r5, #63	; 0x3f
   17d08:	ldr	r0, [fp, #-60]	; 0xffffffc4
   17d0c:	cmp	r0, #5
   17d10:	beq	18130 <__assert_fail@plt+0x642c>
   17d14:	cmp	r0, #2
   17d18:	bne	181d0 <__assert_fail@plt+0x64cc>
   17d1c:	ldr	r0, [fp, #-76]	; 0xffffffb4
   17d20:	tst	r0, #1
   17d24:	mov	r9, #0
   17d28:	beq	17c24 <__assert_fail@plt+0x5f20>
   17d2c:	b	185b0 <__assert_fail@plt+0x68ac>
   17d30:	mov	r0, #118	; 0x76
   17d34:	b	17e8c <__assert_fail@plt+0x6188>
   17d38:	mov	r5, #39	; 0x27
   17d3c:	mov	r0, #1
   17d40:	str	r0, [sp, #56]	; 0x38
   17d44:	ldr	r0, [fp, #-60]	; 0xffffffc4
   17d48:	cmp	r0, #2
   17d4c:	bne	17f9c <__assert_fail@plt+0x6298>
   17d50:	ldr	r0, [fp, #-76]	; 0xffffffb4
   17d54:	tst	r0, #1
   17d58:	bne	185b0 <__assert_fail@plt+0x68ac>
   17d5c:	ldr	r2, [sp, #72]	; 0x48
   17d60:	cmp	r2, #0
   17d64:	mov	r0, r2
   17d68:	movwne	r0, #1
   17d6c:	clz	r1, r4
   17d70:	lsr	r1, r1, #5
   17d74:	orrs	r0, r0, r1
   17d78:	moveq	r2, r4
   17d7c:	str	r2, [sp, #72]	; 0x48
   17d80:	moveq	r4, r0
   17d84:	cmp	r8, r4
   17d88:	movcc	r0, #39	; 0x27
   17d8c:	strbcc	r0, [r7, r8]
   17d90:	add	r0, r8, #1
   17d94:	cmp	r0, r4
   17d98:	movcc	r1, #92	; 0x5c
   17d9c:	strbcc	r1, [r7, r0]
   17da0:	add	r0, r8, #2
   17da4:	cmp	r0, r4
   17da8:	movcc	r1, #39	; 0x27
   17dac:	strbcc	r1, [r7, r0]
   17db0:	add	r8, r8, #3
   17db4:	mov	r0, #0
   17db8:	str	r0, [fp, #-56]	; 0xffffffc8
   17dbc:	mov	sl, #0
   17dc0:	mov	r9, #1
   17dc4:	b	17c24 <__assert_fail@plt+0x5f20>
   17dc8:	str	r4, [sp, #24]
   17dcc:	ldr	r0, [sp, #40]	; 0x28
   17dd0:	cmp	r0, #1
   17dd4:	bne	17fa4 <__assert_fail@plt+0x62a0>
   17dd8:	str	lr, [sp, #28]
   17ddc:	bl	11ac4 <__ctype_b_loc@plt>
   17de0:	ldr	ip, [fp, #-84]	; 0xffffffac
   17de4:	ldr	r0, [r0]
   17de8:	add	r0, r0, r5, lsl #1
   17dec:	ldrb	r0, [r0, #1]
   17df0:	ubfx	r9, r0, #6, #1
   17df4:	mov	r1, #1
   17df8:	ldr	r4, [sp, #24]
   17dfc:	ldr	r0, [sp, #52]	; 0x34
   17e00:	orr	r0, r9, r0
   17e04:	mov	r2, r1
   17e08:	cmp	r1, #1
   17e0c:	bhi	181d8 <__assert_fail@plt+0x64d4>
   17e10:	tst	r0, #1
   17e14:	beq	181d8 <__assert_fail@plt+0x64d4>
   17e18:	ldr	lr, [sp, #28]
   17e1c:	b	17c24 <__assert_fail@plt+0x5f20>
   17e20:	cmp	r6, #0
   17e24:	ldrbeq	r0, [ip, #1]
   17e28:	cmpeq	r0, #0
   17e2c:	beq	17e3c <__assert_fail@plt+0x6138>
   17e30:	mvn	lr, #0
   17e34:	mov	sl, #0
   17e38:	b	17c24 <__assert_fail@plt+0x5f20>
   17e3c:	mov	r1, #1
   17e40:	ldr	r0, [fp, #-60]	; 0xffffffc4
   17e44:	cmp	r0, #2
   17e48:	bne	17e60 <__assert_fail@plt+0x615c>
   17e4c:	ldr	r0, [fp, #-76]	; 0xffffffb4
   17e50:	tst	r0, #1
   17e54:	mov	r9, r1
   17e58:	beq	17c24 <__assert_fail@plt+0x5f20>
   17e5c:	b	185b0 <__assert_fail@plt+0x68ac>
   17e60:	mov	r9, r1
   17e64:	b	17c24 <__assert_fail@plt+0x5f20>
   17e68:	mov	sl, #0
   17e6c:	mov	r0, #92	; 0x5c
   17e70:	ldr	r1, [sp, #48]	; 0x30
   17e74:	cmp	r1, #0
   17e78:	beq	17e8c <__assert_fail@plt+0x6188>
   17e7c:	mov	r9, #0
   17e80:	cmp	sl, #0
   17e84:	beq	1843c <__assert_fail@plt+0x6738>
   17e88:	b	18478 <__assert_fail@plt+0x6774>
   17e8c:	mov	r9, #0
   17e90:	ldr	r1, [sp, #84]	; 0x54
   17e94:	tst	r1, #1
   17e98:	mov	sl, #0
   17e9c:	bne	17edc <__assert_fail@plt+0x61d8>
   17ea0:	ldr	r0, [fp, #-88]	; 0xffffffa8
   17ea4:	cmp	r0, #0
   17ea8:	mov	r0, r5
   17eac:	beq	17ed0 <__assert_fail@plt+0x61cc>
   17eb0:	ubfx	r0, r5, #5, #3
   17eb4:	ldr	r1, [fp, #16]
   17eb8:	ldr	r0, [r1, r0, lsl #2]
   17ebc:	and	r1, r5, #31
   17ec0:	mov	r2, #1
   17ec4:	tst	r0, r2, lsl r1
   17ec8:	mov	r0, r5
   17ecc:	bne	17edc <__assert_fail@plt+0x61d8>
   17ed0:	ldr	r1, [fp, #-52]	; 0xffffffcc
   17ed4:	cmp	r1, #0
   17ed8:	beq	18434 <__assert_fail@plt+0x6730>
   17edc:	ldr	r1, [fp, #-76]	; 0xffffffb4
   17ee0:	tst	r1, #1
   17ee4:	bne	185b0 <__assert_fail@plt+0x68ac>
   17ee8:	ldr	r1, [fp, #-60]	; 0xffffffc4
   17eec:	cmp	r1, #2
   17ef0:	ldr	r1, [fp, #-80]	; 0xffffffb0
   17ef4:	movwne	r1, #1
   17ef8:	ldr	r2, [fp, #-56]	; 0xffffffc8
   17efc:	orr	r1, r1, r2
   17f00:	tst	r1, #1
   17f04:	beq	17f10 <__assert_fail@plt+0x620c>
   17f08:	ldr	r5, [fp, #-48]	; 0xffffffd0
   17f0c:	b	17f4c <__assert_fail@plt+0x6248>
   17f10:	cmp	r8, r4
   17f14:	movcc	r1, #39	; 0x27
   17f18:	strbcc	r1, [r7, r8]
   17f1c:	add	r1, r8, #1
   17f20:	cmp	r1, r4
   17f24:	ldr	r5, [fp, #-48]	; 0xffffffd0
   17f28:	movcc	r2, #36	; 0x24
   17f2c:	strbcc	r2, [r7, r1]
   17f30:	add	r1, r8, #2
   17f34:	cmp	r1, r4
   17f38:	movcc	r2, #39	; 0x27
   17f3c:	strbcc	r2, [r7, r1]
   17f40:	add	r8, r8, #3
   17f44:	mov	r1, #1
   17f48:	str	r1, [fp, #-56]	; 0xffffffc8
   17f4c:	cmp	r8, r4
   17f50:	movcc	r1, #92	; 0x5c
   17f54:	strbcc	r1, [r7, r8]
   17f58:	add	r8, r8, #1
   17f5c:	cmp	r8, r4
   17f60:	strbcc	r0, [r7, r8]
   17f64:	and	r5, r5, r9
   17f68:	add	r8, r8, #1
   17f6c:	add	r6, r6, #1
   17f70:	cmn	lr, #1
   17f74:	bne	17950 <__assert_fail@plt+0x5c4c>
   17f78:	b	1795c <__assert_fail@plt+0x5c58>
   17f7c:	mov	r9, #0
   17f80:	ldr	r0, [sp, #36]	; 0x24
   17f84:	cmp	r0, #0
   17f88:	mov	sl, #0
   17f8c:	mov	r5, #0
   17f90:	beq	17ea0 <__assert_fail@plt+0x619c>
   17f94:	ldr	r5, [fp, #-48]	; 0xffffffd0
   17f98:	b	17f6c <__assert_fail@plt+0x6268>
   17f9c:	mov	r9, #1
   17fa0:	b	17c24 <__assert_fail@plt+0x5f20>
   17fa4:	mov	r0, #0
   17fa8:	str	r0, [fp, #-36]	; 0xffffffdc
   17fac:	str	r0, [fp, #-40]	; 0xffffffd8
   17fb0:	cmn	lr, #1
   17fb4:	bne	17fc8 <__assert_fail@plt+0x62c4>
   17fb8:	mov	r0, ip
   17fbc:	bl	11af4 <strlen@plt>
   17fc0:	ldr	ip, [fp, #-84]	; 0xffffffac
   17fc4:	mov	lr, r0
   17fc8:	add	r0, ip, r6
   17fcc:	str	r0, [sp, #20]
   17fd0:	mov	r9, #1
   17fd4:	mov	r7, #0
   17fd8:	sub	r4, fp, #40	; 0x28
   17fdc:	str	lr, [sp, #28]
   17fe0:	str	r7, [sp, #44]	; 0x2c
   17fe4:	add	r7, r7, r6
   17fe8:	add	r1, ip, r7
   17fec:	sub	r2, lr, r7
   17ff0:	sub	r0, fp, #44	; 0x2c
   17ff4:	mov	r3, r4
   17ff8:	bl	1a328 <__assert_fail@plt+0x8624>
   17ffc:	cmp	r0, #0
   18000:	beq	184c0 <__assert_fail@plt+0x67bc>
   18004:	cmn	r0, #1
   18008:	beq	18480 <__assert_fail@plt+0x677c>
   1800c:	cmn	r0, #2
   18010:	ldr	lr, [sp, #28]
   18014:	beq	18488 <__assert_fail@plt+0x6784>
   18018:	cmp	r0, #2
   1801c:	mov	r1, #0
   18020:	movwcc	r1, #1
   18024:	ldr	r2, [sp, #60]	; 0x3c
   18028:	eor	r2, r2, #1
   1802c:	orrs	r1, r2, r1
   18030:	ldr	r4, [sp, #24]
   18034:	bne	180f4 <__assert_fail@plt+0x63f0>
   18038:	ldr	r1, [sp, #44]	; 0x2c
   1803c:	ldr	r2, [sp, #20]
   18040:	add	r1, r2, r1
   18044:	mov	r2, #1
   18048:	ldrb	r3, [r1, r2]
   1804c:	sub	r3, r3, #91	; 0x5b
   18050:	cmp	r3, #33	; 0x21
   18054:	bhi	180e8 <__assert_fail@plt+0x63e4>
   18058:	add	r7, pc, #0
   1805c:	ldr	pc, [r7, r3, lsl #2]
   18060:	andeq	r8, r1, r8, lsr #11
   18064:	andeq	r8, r1, r8, lsr #11
   18068:	andeq	r8, r1, r8, ror #1
   1806c:	andeq	r8, r1, r8, lsr #11
   18070:	andeq	r8, r1, r8, ror #1
   18074:	andeq	r8, r1, r8, lsr #11
   18078:	andeq	r8, r1, r8, ror #1
   1807c:	andeq	r8, r1, r8, ror #1
   18080:	andeq	r8, r1, r8, ror #1
   18084:	andeq	r8, r1, r8, ror #1
   18088:	andeq	r8, r1, r8, ror #1
   1808c:	andeq	r8, r1, r8, ror #1
   18090:	andeq	r8, r1, r8, ror #1
   18094:	andeq	r8, r1, r8, ror #1
   18098:	andeq	r8, r1, r8, ror #1
   1809c:	andeq	r8, r1, r8, ror #1
   180a0:	andeq	r8, r1, r8, ror #1
   180a4:	andeq	r8, r1, r8, ror #1
   180a8:	andeq	r8, r1, r8, ror #1
   180ac:	andeq	r8, r1, r8, ror #1
   180b0:	andeq	r8, r1, r8, ror #1
   180b4:	andeq	r8, r1, r8, ror #1
   180b8:	andeq	r8, r1, r8, ror #1
   180bc:	andeq	r8, r1, r8, ror #1
   180c0:	andeq	r8, r1, r8, ror #1
   180c4:	andeq	r8, r1, r8, ror #1
   180c8:	andeq	r8, r1, r8, ror #1
   180cc:	andeq	r8, r1, r8, ror #1
   180d0:	andeq	r8, r1, r8, ror #1
   180d4:	andeq	r8, r1, r8, ror #1
   180d8:	andeq	r8, r1, r8, ror #1
   180dc:	andeq	r8, r1, r8, ror #1
   180e0:	andeq	r8, r1, r8, ror #1
   180e4:	andeq	r8, r1, r8, lsr #11
   180e8:	add	r2, r2, #1
   180ec:	cmp	r2, r0
   180f0:	bcc	18048 <__assert_fail@plt+0x6344>
   180f4:	ldr	r7, [sp, #44]	; 0x2c
   180f8:	add	r7, r0, r7
   180fc:	ldr	r0, [fp, #-44]	; 0xffffffd4
   18100:	bl	119bc <iswprint@plt>
   18104:	cmp	r0, #0
   18108:	movwne	r0, #1
   1810c:	and	r9, r9, r0
   18110:	sub	r4, fp, #40	; 0x28
   18114:	mov	r0, r4
   18118:	bl	1195c <mbsinit@plt>
   1811c:	ldr	lr, [sp, #28]
   18120:	cmp	r0, #0
   18124:	ldr	ip, [fp, #-84]	; 0xffffffac
   18128:	beq	17fe0 <__assert_fail@plt+0x62dc>
   1812c:	b	184c8 <__assert_fail@plt+0x67c4>
   18130:	ldr	r0, [sp, #32]
   18134:	cmp	r0, #0
   18138:	beq	181d0 <__assert_fail@plt+0x64cc>
   1813c:	add	r0, r6, #2
   18140:	cmp	r0, lr
   18144:	bcs	181d0 <__assert_fail@plt+0x64cc>
   18148:	add	r1, ip, r6
   1814c:	ldrb	r1, [r1, #1]
   18150:	cmp	r1, #63	; 0x3f
   18154:	bne	181d0 <__assert_fail@plt+0x64cc>
   18158:	ldrb	r9, [ip, r0]
   1815c:	sub	r2, r9, #33	; 0x21
   18160:	cmp	r2, #29
   18164:	bhi	181d0 <__assert_fail@plt+0x64cc>
   18168:	mov	r3, #1
   1816c:	movw	r1, #20929	; 0x51c1
   18170:	movt	r1, #14336	; 0x3800
   18174:	tst	r1, r3, lsl r2
   18178:	beq	181d0 <__assert_fail@plt+0x64cc>
   1817c:	ldr	r1, [fp, #-76]	; 0xffffffb4
   18180:	tst	r1, #1
   18184:	bne	185b0 <__assert_fail@plt+0x68ac>
   18188:	cmp	r8, r4
   1818c:	movcc	r1, #63	; 0x3f
   18190:	strbcc	r1, [r7, r8]
   18194:	add	r2, r8, #1
   18198:	cmp	r2, r4
   1819c:	movcc	r1, #34	; 0x22
   181a0:	strbcc	r1, [r7, r2]
   181a4:	add	r2, r8, #2
   181a8:	cmp	r2, r4
   181ac:	movcc	r1, #34	; 0x22
   181b0:	strbcc	r1, [r7, r2]
   181b4:	add	r2, r8, #3
   181b8:	cmp	r2, r4
   181bc:	movcc	r1, #63	; 0x3f
   181c0:	strbcc	r1, [r7, r2]
   181c4:	add	r8, r8, #4
   181c8:	mov	r6, r0
   181cc:	mov	r5, r9
   181d0:	mov	r9, #0
   181d4:	b	17c24 <__assert_fail@plt+0x5f20>
   181d8:	add	r1, r2, r6
   181dc:	str	r1, [sp, #44]	; 0x2c
   181e0:	add	r1, r6, #1
   181e4:	mov	r3, #0
   181e8:	ldr	lr, [sp, #28]
   181ec:	ldr	r6, [fp, #-60]	; 0xffffffc4
   181f0:	tst	r0, #1
   181f4:	bne	182e8 <__assert_fail@plt+0x65e4>
   181f8:	ldr	r2, [fp, #-76]	; 0xffffffb4
   181fc:	tst	r2, #1
   18200:	bne	185b0 <__assert_fail@plt+0x68ac>
   18204:	cmp	r6, #2
   18208:	ldr	r3, [fp, #-80]	; 0xffffffb0
   1820c:	movwne	r3, #1
   18210:	ldr	r2, [fp, #-56]	; 0xffffffc8
   18214:	orr	r3, r3, r2
   18218:	tst	r3, #1
   1821c:	bne	18258 <__assert_fail@plt+0x6554>
   18220:	cmp	r8, r4
   18224:	movcc	r2, #39	; 0x27
   18228:	strbcc	r2, [r7, r8]
   1822c:	add	r3, r8, #1
   18230:	cmp	r3, r4
   18234:	movcc	r2, #36	; 0x24
   18238:	strbcc	r2, [r7, r3]
   1823c:	add	r3, r8, #2
   18240:	cmp	r3, r4
   18244:	movcc	r2, #39	; 0x27
   18248:	strbcc	r2, [r7, r3]
   1824c:	add	r8, r8, #3
   18250:	mov	r2, #1
   18254:	str	r2, [fp, #-56]	; 0xffffffc8
   18258:	cmp	r8, r4
   1825c:	movcc	r2, #92	; 0x5c
   18260:	strbcc	r2, [r7, r8]
   18264:	add	r3, r8, #1
   18268:	cmp	r3, r4
   1826c:	bcs	1828c <__assert_fail@plt+0x6588>
   18270:	and	r7, r5, #192	; 0xc0
   18274:	mov	r2, #48	; 0x30
   18278:	orr	r7, r2, r7, lsr #6
   1827c:	ldr	r6, [sp, #80]	; 0x50
   18280:	strb	r7, [r6, r3]
   18284:	ldr	r6, [fp, #-60]	; 0xffffffc4
   18288:	ldr	r7, [sp, #80]	; 0x50
   1828c:	add	r3, r8, #2
   18290:	cmp	r3, r4
   18294:	bcs	182b4 <__assert_fail@plt+0x65b0>
   18298:	lsr	r7, r5, #3
   1829c:	mov	r2, #6
   182a0:	bfi	r7, r2, #3, #29
   182a4:	ldr	r6, [sp, #80]	; 0x50
   182a8:	strb	r7, [r6, r3]
   182ac:	ldr	r6, [fp, #-60]	; 0xffffffc4
   182b0:	ldr	r7, [sp, #80]	; 0x50
   182b4:	mov	r2, #6
   182b8:	bfi	r5, r2, #3, #29
   182bc:	add	r8, r8, #3
   182c0:	mov	r3, #1
   182c4:	b	1830c <__assert_fail@plt+0x6608>
   182c8:	ldr	r7, [sp, #80]	; 0x50
   182cc:	cmp	r8, r4
   182d0:	strbcc	r5, [r7, r8]
   182d4:	ldrb	r5, [ip, r1]
   182d8:	add	r1, r1, #1
   182dc:	add	r8, r8, #1
   182e0:	tst	r0, #1
   182e4:	beq	181f8 <__assert_fail@plt+0x64f4>
   182e8:	ldr	r2, [fp, #-52]	; 0xffffffcc
   182ec:	tst	r2, #1
   182f0:	beq	18304 <__assert_fail@plt+0x6600>
   182f4:	cmp	r8, r4
   182f8:	movcc	r2, #92	; 0x5c
   182fc:	strbcc	r2, [r7, r8]
   18300:	add	r8, r8, #1
   18304:	mov	r2, #0
   18308:	str	r2, [fp, #-52]	; 0xffffffcc
   1830c:	and	sl, r3, #1
   18310:	ldr	r2, [sp, #44]	; 0x2c
   18314:	cmp	r2, r1
   18318:	bls	18424 <__assert_fail@plt+0x6720>
   1831c:	cmp	sl, #0
   18320:	movwne	sl, #1
   18324:	ldr	r2, [fp, #-56]	; 0xffffffc8
   18328:	mvn	r7, r2
   1832c:	orr	r7, r7, sl
   18330:	tst	r7, #1
   18334:	bne	182c8 <__assert_fail@plt+0x65c4>
   18338:	cmp	r8, r4
   1833c:	ldrcc	r7, [sp, #80]	; 0x50
   18340:	movcc	r2, #39	; 0x27
   18344:	strbcc	r2, [r7, r8]
   18348:	add	r7, r8, #1
   1834c:	cmp	r7, r4
   18350:	ldrcc	r6, [sp, #80]	; 0x50
   18354:	movcc	r2, #39	; 0x27
   18358:	strbcc	r2, [r6, r7]
   1835c:	ldrcc	r6, [fp, #-60]	; 0xffffffc4
   18360:	add	r8, r8, #2
   18364:	mov	r2, #0
   18368:	str	r2, [fp, #-56]	; 0xffffffc8
   1836c:	b	182c8 <__assert_fail@plt+0x65c4>
   18370:	cmp	r8, r4
   18374:	movcc	r0, #39	; 0x27
   18378:	strbcc	r0, [r7, r8]
   1837c:	add	r0, r8, #1
   18380:	cmp	r0, r4
   18384:	movcc	r1, #36	; 0x24
   18388:	strbcc	r1, [r7, r0]
   1838c:	add	r0, r8, #2
   18390:	cmp	r0, r4
   18394:	movcc	r1, #39	; 0x27
   18398:	strbcc	r1, [r7, r0]
   1839c:	add	r0, r8, #3
   183a0:	mov	r2, #1
   183a4:	cmp	r0, r4
   183a8:	movcc	r1, #92	; 0x5c
   183ac:	strbcc	r1, [r7, r0]
   183b0:	str	r2, [fp, #-56]	; 0xffffffc8
   183b4:	add	r8, r0, #1
   183b8:	ldr	r1, [fp, #-60]	; 0xffffffc4
   183bc:	cmp	r1, #2
   183c0:	beq	18414 <__assert_fail@plt+0x6710>
   183c4:	add	r1, r6, #1
   183c8:	mov	r9, #0
   183cc:	mov	sl, #1
   183d0:	mov	r5, #48	; 0x30
   183d4:	cmp	r1, lr
   183d8:	bcs	17c24 <__assert_fail@plt+0x5f20>
   183dc:	ldrb	r1, [ip, r1]
   183e0:	sub	r1, r1, #48	; 0x30
   183e4:	uxtb	r1, r1
   183e8:	cmp	r1, #9
   183ec:	bhi	17c24 <__assert_fail@plt+0x5f20>
   183f0:	cmp	r8, r4
   183f4:	movcc	r1, #48	; 0x30
   183f8:	strbcc	r1, [r7, r8]
   183fc:	add	r1, r0, #2
   18400:	cmp	r1, r4
   18404:	movcc	r2, #48	; 0x30
   18408:	strbcc	r2, [r7, r1]
   1840c:	add	r8, r0, #3
   18410:	b	17c24 <__assert_fail@plt+0x5f20>
   18414:	mov	r0, #48	; 0x30
   18418:	mov	sl, #1
   1841c:	mov	r9, #0
   18420:	b	17ed0 <__assert_fail@plt+0x61cc>
   18424:	sub	r6, r1, #1
   18428:	cmp	sl, #0
   1842c:	movwne	sl, #1
   18430:	mov	r0, r5
   18434:	cmp	sl, #0
   18438:	bne	18478 <__assert_fail@plt+0x6774>
   1843c:	ldr	r1, [fp, #-56]	; 0xffffffc8
   18440:	tst	r1, #1
   18444:	beq	18478 <__assert_fail@plt+0x6774>
   18448:	cmp	r8, r4
   1844c:	ldr	r5, [fp, #-48]	; 0xffffffd0
   18450:	movcc	r1, #39	; 0x27
   18454:	strbcc	r1, [r7, r8]
   18458:	add	r1, r8, #1
   1845c:	cmp	r1, r4
   18460:	movcc	r2, #39	; 0x27
   18464:	strbcc	r2, [r7, r1]
   18468:	add	r8, r8, #2
   1846c:	mov	r1, #0
   18470:	str	r1, [fp, #-56]	; 0xffffffc8
   18474:	b	17f5c <__assert_fail@plt+0x6258>
   18478:	ldr	r5, [fp, #-48]	; 0xffffffd0
   1847c:	b	17f5c <__assert_fail@plt+0x6258>
   18480:	mov	r9, #0
   18484:	b	184c0 <__assert_fail@plt+0x67bc>
   18488:	mov	r9, #0
   1848c:	cmp	r7, lr
   18490:	bcs	184c0 <__assert_fail@plt+0x67bc>
   18494:	ldr	ip, [fp, #-84]	; 0xffffffac
   18498:	ldr	r7, [sp, #44]	; 0x2c
   1849c:	ldr	r0, [sp, #20]
   184a0:	ldrb	r0, [r0, r7]
   184a4:	cmp	r0, #0
   184a8:	beq	184c8 <__assert_fail@plt+0x67c4>
   184ac:	add	r7, r7, #1
   184b0:	add	r0, r6, r7
   184b4:	cmp	r0, lr
   184b8:	bcc	1849c <__assert_fail@plt+0x6798>
   184bc:	b	184c8 <__assert_fail@plt+0x67c4>
   184c0:	ldr	ip, [fp, #-84]	; 0xffffffac
   184c4:	ldr	r7, [sp, #44]	; 0x2c
   184c8:	mov	r1, r7
   184cc:	ldr	r7, [sp, #80]	; 0x50
   184d0:	b	17df8 <__assert_fail@plt+0x60f4>
   184d4:	ldr	r1, [fp, #-60]	; 0xffffffc4
   184d8:	eor	r0, r1, #2
   184dc:	orr	r0, r0, r8
   184e0:	clz	r0, r0
   184e4:	lsr	r0, r0, #5
   184e8:	ldr	r2, [fp, #-76]	; 0xffffffb4
   184ec:	tst	r2, r0
   184f0:	bne	185b0 <__assert_fail@plt+0x68ac>
   184f4:	cmp	r1, #2
   184f8:	ldr	r0, [fp, #-80]	; 0xffffffb0
   184fc:	movwne	r0, #1
   18500:	orr	r0, r2, r0
   18504:	tst	r0, #1
   18508:	ldreq	r0, [sp, #56]	; 0x38
   1850c:	eoreq	r0, r0, #1
   18510:	tsteq	r0, #1
   18514:	bne	18548 <__assert_fail@plt+0x6844>
   18518:	mov	r9, lr
   1851c:	tst	r5, #1
   18520:	bne	18618 <__assert_fail@plt+0x6914>
   18524:	ldr	r0, [sp, #72]	; 0x48
   18528:	cmp	r0, #0
   1852c:	beq	18548 <__assert_fail@plt+0x6844>
   18530:	mov	r5, #0
   18534:	cmp	r4, #0
   18538:	ldr	r0, [sp, #84]	; 0x54
   1853c:	mov	sl, r2
   18540:	ldr	r6, [sp, #72]	; 0x48
   18544:	beq	176e0 <__assert_fail@plt+0x59dc>
   18548:	ldr	r1, [sp, #92]	; 0x5c
   1854c:	clz	r0, r1
   18550:	lsr	r0, r0, #5
   18554:	orr	r0, r0, r2
   18558:	tst	r0, #1
   1855c:	bne	18588 <__assert_fail@plt+0x6884>
   18560:	ldrb	r0, [r1]
   18564:	cmp	r0, #0
   18568:	beq	18588 <__assert_fail@plt+0x6884>
   1856c:	add	r1, r1, #1
   18570:	cmp	r8, r4
   18574:	strbcc	r0, [r7, r8]
   18578:	add	r8, r8, #1
   1857c:	ldrb	r0, [r1], #1
   18580:	cmp	r0, #0
   18584:	bne	18570 <__assert_fail@plt+0x686c>
   18588:	cmp	r8, r4
   1858c:	movcc	r0, #0
   18590:	strbcc	r0, [r7, r8]
   18594:	b	1860c <__assert_fail@plt+0x6908>
   18598:	ldr	ip, [fp, #-84]	; 0xffffffac
   1859c:	mov	lr, r4
   185a0:	mov	r4, r5
   185a4:	b	185b0 <__assert_fail@plt+0x68ac>
   185a8:	ldr	r7, [sp, #80]	; 0x50
   185ac:	ldr	ip, [fp, #-84]	; 0xffffffac
   185b0:	mov	r0, #0
   185b4:	ldr	r1, [fp, #12]
   185b8:	bic	r1, r1, #2
   185bc:	ldr	r2, [sp, #84]	; 0x54
   185c0:	tst	r2, #1
   185c4:	ldr	r3, [fp, #-60]	; 0xffffffc4
   185c8:	mov	r2, r3
   185cc:	movwne	r2, #4
   185d0:	cmp	r3, #2
   185d4:	movne	r2, r3
   185d8:	str	r2, [sp]
   185dc:	str	r1, [sp, #4]
   185e0:	str	r0, [sp, #8]
   185e4:	ldr	r0, [sp, #68]	; 0x44
   185e8:	str	r0, [sp, #12]
   185ec:	ldr	r0, [sp, #76]	; 0x4c
   185f0:	str	r0, [sp, #16]
   185f4:	mov	r0, r7
   185f8:	mov	r1, r4
   185fc:	mov	r2, ip
   18600:	mov	r3, lr
   18604:	bl	17658 <__assert_fail@plt+0x5954>
   18608:	mov	r8, r0
   1860c:	mov	r0, r8
   18610:	sub	sp, fp, #28
   18614:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   18618:	mov	r0, #5
   1861c:	str	r0, [sp]
   18620:	ldr	r0, [fp, #12]
   18624:	str	r0, [sp, #4]
   18628:	ldr	r0, [fp, #16]
   1862c:	str	r0, [sp, #8]
   18630:	ldr	r0, [sp, #68]	; 0x44
   18634:	str	r0, [sp, #12]
   18638:	ldr	r0, [sp, #76]	; 0x4c
   1863c:	str	r0, [sp, #16]
   18640:	mov	r0, r7
   18644:	ldr	r1, [sp, #72]	; 0x48
   18648:	ldr	r2, [fp, #-84]	; 0xffffffac
   1864c:	mov	r3, r9
   18650:	b	18604 <__assert_fail@plt+0x6900>
   18654:	bl	11cc8 <abort@plt>
   18658:	mov	r3, r2
   1865c:	mov	r2, #0
   18660:	b	18664 <__assert_fail@plt+0x6960>
   18664:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   18668:	add	fp, sp, #28
   1866c:	sub	sp, sp, #36	; 0x24
   18670:	mov	r4, r2
   18674:	str	r2, [sp, #24]
   18678:	mov	r5, r1
   1867c:	mov	r6, r0
   18680:	str	r0, [sp, #20]
   18684:	movw	r8, #49824	; 0xc2a0
   18688:	movt	r8, #3
   1868c:	cmp	r3, #0
   18690:	movne	r8, r3
   18694:	bl	11b24 <__errno_location@plt>
   18698:	str	r0, [sp, #28]
   1869c:	ldm	r8, {r3, r9}
   186a0:	ldr	r1, [r8, #40]	; 0x28
   186a4:	ldr	r2, [r8, #44]	; 0x2c
   186a8:	ldr	r7, [r0]
   186ac:	str	r7, [sp, #32]
   186b0:	add	sl, r8, #8
   186b4:	cmp	r4, #0
   186b8:	orreq	r9, r9, #1
   186bc:	stm	sp, {r3, r9, sl}
   186c0:	str	r1, [sp, #12]
   186c4:	str	r2, [sp, #16]
   186c8:	mov	r0, #0
   186cc:	mov	r1, #0
   186d0:	mov	r2, r6
   186d4:	mov	r3, r5
   186d8:	mov	r7, r5
   186dc:	bl	17658 <__assert_fail@plt+0x5954>
   186e0:	mov	r5, r0
   186e4:	add	r4, r0, #1
   186e8:	mov	r0, r4
   186ec:	bl	19608 <__assert_fail@plt+0x7904>
   186f0:	mov	r6, r0
   186f4:	ldr	r0, [r8]
   186f8:	ldr	r1, [r8, #40]	; 0x28
   186fc:	ldr	r2, [r8, #44]	; 0x2c
   18700:	stm	sp, {r0, r9, sl}
   18704:	str	r1, [sp, #12]
   18708:	str	r2, [sp, #16]
   1870c:	mov	r0, r6
   18710:	mov	r1, r4
   18714:	ldr	r2, [sp, #20]
   18718:	mov	r3, r7
   1871c:	bl	17658 <__assert_fail@plt+0x5954>
   18720:	ldr	r0, [sp, #24]
   18724:	ldr	r1, [sp, #32]
   18728:	ldr	r2, [sp, #28]
   1872c:	str	r1, [r2]
   18730:	cmp	r0, #0
   18734:	strne	r5, [r0]
   18738:	mov	r0, r6
   1873c:	sub	sp, fp, #28
   18740:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   18744:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   18748:	add	fp, sp, #24
   1874c:	movw	r8, #49600	; 0xc1c0
   18750:	movt	r8, #3
   18754:	ldr	r4, [r8]
   18758:	movw	r5, #49604	; 0xc1c4
   1875c:	movt	r5, #3
   18760:	ldr	r0, [r5]
   18764:	cmp	r0, #2
   18768:	blt	18794 <__assert_fail@plt+0x6a90>
   1876c:	add	r7, r4, #12
   18770:	mov	r6, #0
   18774:	ldr	r0, [r7, r6, lsl #3]
   18778:	bl	1a22c <__assert_fail@plt+0x8528>
   1877c:	add	r0, r6, #1
   18780:	ldr	r1, [r5]
   18784:	add	r2, r6, #2
   18788:	cmp	r2, r1
   1878c:	mov	r6, r0
   18790:	blt	18774 <__assert_fail@plt+0x6a70>
   18794:	ldr	r0, [r4, #4]
   18798:	movw	r7, #49872	; 0xc2d0
   1879c:	movt	r7, #3
   187a0:	cmp	r0, r7
   187a4:	beq	187bc <__assert_fail@plt+0x6ab8>
   187a8:	bl	1a22c <__assert_fail@plt+0x8528>
   187ac:	movw	r0, #49608	; 0xc1c8
   187b0:	movt	r0, #3
   187b4:	mov	r6, #256	; 0x100
   187b8:	strd	r6, [r0]
   187bc:	movw	r6, #49608	; 0xc1c8
   187c0:	movt	r6, #3
   187c4:	cmp	r4, r6
   187c8:	beq	187d8 <__assert_fail@plt+0x6ad4>
   187cc:	mov	r0, r4
   187d0:	bl	1a22c <__assert_fail@plt+0x8528>
   187d4:	str	r6, [r8]
   187d8:	mov	r0, #1
   187dc:	str	r0, [r5]
   187e0:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   187e4:	movw	r3, #49824	; 0xc2a0
   187e8:	movt	r3, #3
   187ec:	mvn	r2, #0
   187f0:	b	187f4 <__assert_fail@plt+0x6af0>
   187f4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   187f8:	add	fp, sp, #28
   187fc:	sub	sp, sp, #44	; 0x2c
   18800:	mov	r7, r3
   18804:	str	r2, [sp, #36]	; 0x24
   18808:	str	r1, [sp, #32]
   1880c:	mov	r5, r0
   18810:	bl	11b24 <__errno_location@plt>
   18814:	cmp	r5, #0
   18818:	blt	18984 <__assert_fail@plt+0x6c80>
   1881c:	cmn	r5, #-2147483647	; 0x80000001
   18820:	beq	18984 <__assert_fail@plt+0x6c80>
   18824:	movw	r4, #49600	; 0xc1c0
   18828:	movt	r4, #3
   1882c:	ldr	r6, [r4]
   18830:	str	r0, [sp, #28]
   18834:	ldr	r0, [r0]
   18838:	str	r0, [sp, #24]
   1883c:	movw	r8, #49604	; 0xc1c4
   18840:	movt	r8, #3
   18844:	ldr	r1, [r8]
   18848:	cmp	r1, r5
   1884c:	ble	18858 <__assert_fail@plt+0x6b54>
   18850:	mov	sl, r6
   18854:	b	188c0 <__assert_fail@plt+0x6bbc>
   18858:	str	r1, [fp, #-32]	; 0xffffffe0
   1885c:	mov	r0, #8
   18860:	str	r0, [sp]
   18864:	movw	r9, #49608	; 0xc1c8
   18868:	movt	r9, #3
   1886c:	subs	r0, r6, r9
   18870:	movne	r0, r6
   18874:	add	r2, r5, #1
   18878:	sub	r2, r2, r1
   1887c:	sub	r1, fp, #32
   18880:	mvn	r3, #-2147483648	; 0x80000000
   18884:	bl	196f0 <__assert_fail@plt+0x79ec>
   18888:	mov	sl, r0
   1888c:	str	r0, [r4]
   18890:	cmp	r6, r9
   18894:	ldrdeq	r0, [r9]
   18898:	stmeq	sl, {r0, r1}
   1889c:	ldr	r1, [r8]
   188a0:	add	r0, sl, r1, lsl #3
   188a4:	ldr	r2, [fp, #-32]	; 0xffffffe0
   188a8:	sub	r1, r2, r1
   188ac:	lsl	r2, r1, #3
   188b0:	mov	r1, #0
   188b4:	bl	11b60 <memset@plt>
   188b8:	ldr	r0, [fp, #-32]	; 0xffffffe0
   188bc:	str	r0, [r8]
   188c0:	mov	r9, sl
   188c4:	ldr	r6, [r9, r5, lsl #3]!
   188c8:	ldr	r4, [r9, #4]!
   188cc:	ldm	r7, {r0, r1}
   188d0:	ldr	r2, [r7, #40]	; 0x28
   188d4:	ldr	r3, [r7, #44]	; 0x2c
   188d8:	orr	r8, r1, #1
   188dc:	add	r1, r7, #8
   188e0:	stm	sp, {r0, r8}
   188e4:	str	r1, [sp, #20]
   188e8:	add	r0, sp, #8
   188ec:	stm	r0, {r1, r2, r3}
   188f0:	mov	r0, r4
   188f4:	mov	r1, r6
   188f8:	ldr	r2, [sp, #32]
   188fc:	ldr	r3, [sp, #36]	; 0x24
   18900:	bl	17658 <__assert_fail@plt+0x5954>
   18904:	cmp	r6, r0
   18908:	bhi	1896c <__assert_fail@plt+0x6c68>
   1890c:	add	r6, r0, #1
   18910:	str	r6, [sl, r5, lsl #3]
   18914:	movw	r0, #49872	; 0xc2d0
   18918:	movt	r0, #3
   1891c:	cmp	r4, r0
   18920:	beq	1892c <__assert_fail@plt+0x6c28>
   18924:	mov	r0, r4
   18928:	bl	1a22c <__assert_fail@plt+0x8528>
   1892c:	mov	r0, r6
   18930:	bl	19608 <__assert_fail@plt+0x7904>
   18934:	mov	r4, r0
   18938:	str	r0, [r9]
   1893c:	ldr	r0, [r7]
   18940:	ldr	r1, [r7, #40]	; 0x28
   18944:	ldr	r2, [r7, #44]	; 0x2c
   18948:	stm	sp, {r0, r8}
   1894c:	ldr	r0, [sp, #20]
   18950:	add	r3, sp, #8
   18954:	stm	r3, {r0, r1, r2}
   18958:	mov	r0, r4
   1895c:	mov	r1, r6
   18960:	ldr	r2, [sp, #32]
   18964:	ldr	r3, [sp, #36]	; 0x24
   18968:	bl	17658 <__assert_fail@plt+0x5954>
   1896c:	ldr	r0, [sp, #28]
   18970:	ldr	r1, [sp, #24]
   18974:	str	r1, [r0]
   18978:	mov	r0, r4
   1897c:	sub	sp, fp, #28
   18980:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   18984:	bl	11cc8 <abort@plt>
   18988:	movw	r3, #49824	; 0xc2a0
   1898c:	movt	r3, #3
   18990:	b	187f4 <__assert_fail@plt+0x6af0>
   18994:	mov	r1, r0
   18998:	mov	r0, #0
   1899c:	b	187e4 <__assert_fail@plt+0x6ae0>
   189a0:	mov	r2, r1
   189a4:	mov	r1, r0
   189a8:	mov	r0, #0
   189ac:	b	18988 <__assert_fail@plt+0x6c84>
   189b0:	push	{r4, r5, r6, sl, fp, lr}
   189b4:	add	fp, sp, #16
   189b8:	sub	sp, sp, #48	; 0x30
   189bc:	mov	r4, r2
   189c0:	mov	r5, r0
   189c4:	mov	r6, sp
   189c8:	mov	r0, r6
   189cc:	bl	189ec <__assert_fail@plt+0x6ce8>
   189d0:	mov	r0, r5
   189d4:	mov	r1, r4
   189d8:	mvn	r2, #0
   189dc:	mov	r3, r6
   189e0:	bl	187f4 <__assert_fail@plt+0x6af0>
   189e4:	sub	sp, fp, #16
   189e8:	pop	{r4, r5, r6, sl, fp, pc}
   189ec:	vmov.i32	q8, #0	; 0x00000000
   189f0:	mov	r2, #32
   189f4:	mov	r3, r0
   189f8:	vst1.32	{d16-d17}, [r3], r2
   189fc:	vst1.32	{d16-d17}, [r3]
   18a00:	add	r2, r0, #16
   18a04:	vst1.32	{d16-d17}, [r2]
   18a08:	cmp	r1, #10
   18a0c:	strne	r1, [r0]
   18a10:	bxne	lr
   18a14:	push	{fp, lr}
   18a18:	mov	fp, sp
   18a1c:	bl	11cc8 <abort@plt>
   18a20:	push	{r4, r5, r6, r7, fp, lr}
   18a24:	add	fp, sp, #16
   18a28:	sub	sp, sp, #48	; 0x30
   18a2c:	mov	r4, r3
   18a30:	mov	r5, r2
   18a34:	mov	r6, r0
   18a38:	mov	r7, sp
   18a3c:	mov	r0, r7
   18a40:	bl	189ec <__assert_fail@plt+0x6ce8>
   18a44:	mov	r0, r6
   18a48:	mov	r1, r5
   18a4c:	mov	r2, r4
   18a50:	mov	r3, r7
   18a54:	bl	187f4 <__assert_fail@plt+0x6af0>
   18a58:	sub	sp, fp, #16
   18a5c:	pop	{r4, r5, r6, r7, fp, pc}
   18a60:	mov	r2, r1
   18a64:	mov	r1, r0
   18a68:	mov	r0, #0
   18a6c:	b	189b0 <__assert_fail@plt+0x6cac>
   18a70:	mov	r3, r2
   18a74:	mov	r2, r1
   18a78:	mov	r1, r0
   18a7c:	mov	r0, #0
   18a80:	b	18a20 <__assert_fail@plt+0x6d1c>
   18a84:	push	{r4, r5, r6, sl, fp, lr}
   18a88:	add	fp, sp, #16
   18a8c:	sub	sp, sp, #48	; 0x30
   18a90:	mov	r4, r1
   18a94:	mov	r5, r0
   18a98:	mov	r0, #32
   18a9c:	movw	r1, #49824	; 0xc2a0
   18aa0:	movt	r1, #3
   18aa4:	add	r3, r1, #16
   18aa8:	vld1.64	{d16-d17}, [r1], r0
   18aac:	mov	r6, sp
   18ab0:	vld1.64	{d18-d19}, [r3]
   18ab4:	add	r3, r6, #16
   18ab8:	vld1.64	{d20-d21}, [r1]
   18abc:	vst1.64	{d18-d19}, [r3]
   18ac0:	mov	r1, r6
   18ac4:	vst1.64	{d16-d17}, [r1], r0
   18ac8:	vst1.64	{d20-d21}, [r1]
   18acc:	mov	r0, r6
   18ad0:	mov	r1, r2
   18ad4:	mov	r2, #1
   18ad8:	bl	1754c <__assert_fail@plt+0x5848>
   18adc:	mov	r0, #0
   18ae0:	mov	r1, r5
   18ae4:	mov	r2, r4
   18ae8:	mov	r3, r6
   18aec:	bl	187f4 <__assert_fail@plt+0x6af0>
   18af0:	sub	sp, fp, #16
   18af4:	pop	{r4, r5, r6, sl, fp, pc}
   18af8:	mov	r2, r1
   18afc:	mvn	r1, #0
   18b00:	b	18a84 <__assert_fail@plt+0x6d80>
   18b04:	mov	r1, #58	; 0x3a
   18b08:	b	18af8 <__assert_fail@plt+0x6df4>
   18b0c:	mov	r2, #58	; 0x3a
   18b10:	b	18a84 <__assert_fail@plt+0x6d80>
   18b14:	push	{r4, r5, r6, sl, fp, lr}
   18b18:	add	fp, sp, #16
   18b1c:	sub	sp, sp, #48	; 0x30
   18b20:	mov	r4, r2
   18b24:	mov	r5, r0
   18b28:	mov	r6, sp
   18b2c:	mov	r0, r6
   18b30:	bl	189ec <__assert_fail@plt+0x6ce8>
   18b34:	mov	r0, r6
   18b38:	mov	r1, #58	; 0x3a
   18b3c:	mov	r2, #1
   18b40:	bl	1754c <__assert_fail@plt+0x5848>
   18b44:	mov	r0, r5
   18b48:	mov	r1, r4
   18b4c:	mvn	r2, #0
   18b50:	mov	r3, r6
   18b54:	bl	187f4 <__assert_fail@plt+0x6af0>
   18b58:	sub	sp, fp, #16
   18b5c:	pop	{r4, r5, r6, sl, fp, pc}
   18b60:	push	{fp, lr}
   18b64:	mov	fp, sp
   18b68:	sub	sp, sp, #8
   18b6c:	mvn	ip, #0
   18b70:	str	ip, [sp]
   18b74:	bl	18b80 <__assert_fail@plt+0x6e7c>
   18b78:	mov	sp, fp
   18b7c:	pop	{fp, pc}
   18b80:	push	{r4, r5, r6, r7, fp, lr}
   18b84:	add	fp, sp, #16
   18b88:	sub	sp, sp, #48	; 0x30
   18b8c:	mov	r7, r3
   18b90:	mov	r5, r0
   18b94:	mov	r0, #32
   18b98:	movw	r3, #49824	; 0xc2a0
   18b9c:	movt	r3, #3
   18ba0:	add	r4, r3, #16
   18ba4:	vld1.64	{d16-d17}, [r3], r0
   18ba8:	mov	r6, sp
   18bac:	vld1.64	{d18-d19}, [r4]
   18bb0:	add	r4, r6, #16
   18bb4:	vld1.64	{d20-d21}, [r3]
   18bb8:	vst1.64	{d18-d19}, [r4]
   18bbc:	mov	r3, r6
   18bc0:	vst1.64	{d16-d17}, [r3], r0
   18bc4:	vst1.64	{d20-d21}, [r3]
   18bc8:	mov	r0, r6
   18bcc:	bl	175a4 <__assert_fail@plt+0x58a0>
   18bd0:	ldr	r2, [fp, #8]
   18bd4:	mov	r0, r5
   18bd8:	mov	r1, r7
   18bdc:	mov	r3, r6
   18be0:	bl	187f4 <__assert_fail@plt+0x6af0>
   18be4:	sub	sp, fp, #16
   18be8:	pop	{r4, r5, r6, r7, fp, pc}
   18bec:	mov	r3, r2
   18bf0:	mov	r2, r1
   18bf4:	mov	r1, r0
   18bf8:	mov	r0, #0
   18bfc:	b	18b60 <__assert_fail@plt+0x6e5c>
   18c00:	push	{fp, lr}
   18c04:	mov	fp, sp
   18c08:	sub	sp, sp, #8
   18c0c:	mov	ip, r2
   18c10:	mov	r2, r1
   18c14:	mov	r1, r0
   18c18:	str	r3, [sp]
   18c1c:	mov	r0, #0
   18c20:	mov	r3, ip
   18c24:	bl	18b80 <__assert_fail@plt+0x6e7c>
   18c28:	mov	sp, fp
   18c2c:	pop	{fp, pc}
   18c30:	movw	r3, #49616	; 0xc1d0
   18c34:	movt	r3, #3
   18c38:	b	187f4 <__assert_fail@plt+0x6af0>
   18c3c:	mov	r2, r1
   18c40:	mov	r1, r0
   18c44:	mov	r0, #0
   18c48:	b	18c30 <__assert_fail@plt+0x6f2c>
   18c4c:	mvn	r2, #0
   18c50:	b	18c30 <__assert_fail@plt+0x6f2c>
   18c54:	mov	r1, r0
   18c58:	mov	r0, #0
   18c5c:	b	18c4c <__assert_fail@plt+0x6f48>
   18c60:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   18c64:	add	fp, sp, #24
   18c68:	sub	sp, sp, #16
   18c6c:	mov	r4, r1
   18c70:	mov	r5, r0
   18c74:	mov	r7, #0
   18c78:	mov	r0, #0
   18c7c:	mov	r1, r5
   18c80:	mov	r2, #5
   18c84:	bl	11980 <dcgettext@plt>
   18c88:	cmp	r0, r5
   18c8c:	beq	18c98 <__assert_fail@plt+0x6f94>
   18c90:	sub	sp, fp, #24
   18c94:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   18c98:	bl	28d5c <__assert_fail@plt+0x17058>
   18c9c:	mov	r6, r0
   18ca0:	mov	r8, #56	; 0x38
   18ca4:	mov	r0, #45	; 0x2d
   18ca8:	stm	sp, {r0, r8}
   18cac:	str	r7, [sp, #8]
   18cb0:	str	r7, [sp, #12]
   18cb4:	mov	r0, r6
   18cb8:	mov	r1, #85	; 0x55
   18cbc:	mov	r2, #84	; 0x54
   18cc0:	mov	r3, #70	; 0x46
   18cc4:	bl	18d5c <__assert_fail@plt+0x7058>
   18cc8:	cmp	r0, #0
   18ccc:	beq	18ce8 <__assert_fail@plt+0x6fe4>
   18cd0:	ldrb	r1, [r5]
   18cd4:	movw	r2, #43188	; 0xa8b4
   18cd8:	movt	r2, #2
   18cdc:	movw	r0, #43192	; 0xa8b8
   18ce0:	movt	r0, #2
   18ce4:	b	18d2c <__assert_fail@plt+0x7028>
   18ce8:	mov	r0, #48	; 0x30
   18cec:	mov	r1, #51	; 0x33
   18cf0:	str	r8, [sp]
   18cf4:	stmib	sp, {r0, r1}
   18cf8:	str	r0, [sp, #12]
   18cfc:	mov	r0, r6
   18d00:	mov	r1, #71	; 0x47
   18d04:	mov	r2, #66	; 0x42
   18d08:	mov	r3, #49	; 0x31
   18d0c:	bl	18d5c <__assert_fail@plt+0x7058>
   18d10:	cmp	r0, #0
   18d14:	beq	18d3c <__assert_fail@plt+0x7038>
   18d18:	ldrb	r1, [r5]
   18d1c:	movw	r2, #43196	; 0xa8bc
   18d20:	movt	r2, #2
   18d24:	movw	r0, #43200	; 0xa8c0
   18d28:	movt	r0, #2
   18d2c:	cmp	r1, #96	; 0x60
   18d30:	moveq	r0, r2
   18d34:	sub	sp, fp, #24
   18d38:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   18d3c:	movw	r1, #43184	; 0xa8b0
   18d40:	movt	r1, #2
   18d44:	movw	r0, #40417	; 0x9de1
   18d48:	movt	r0, #2
   18d4c:	cmp	r4, #9
   18d50:	moveq	r0, r1
   18d54:	sub	sp, fp, #24
   18d58:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   18d5c:	push	{r4, r5, r6, r7, fp, lr}
   18d60:	add	fp, sp, #16
   18d64:	sub	sp, sp, #16
   18d68:	mov	r4, r3
   18d6c:	mov	r5, r2
   18d70:	mov	r7, r1
   18d74:	mov	r6, r0
   18d78:	mov	r0, r1
   18d7c:	bl	28af0 <__assert_fail@plt+0x16dec>
   18d80:	ldrb	r1, [r6]
   18d84:	cmp	r0, #0
   18d88:	andne	r1, r1, #223	; 0xdf
   18d8c:	mov	r0, #0
   18d90:	cmp	r1, r7
   18d94:	bne	18dd4 <__assert_fail@plt+0x70d0>
   18d98:	cmp	r7, #0
   18d9c:	moveq	r0, #1
   18da0:	subeq	sp, fp, #16
   18da4:	popeq	{r4, r5, r6, r7, fp, pc}
   18da8:	ldr	r0, [fp, #20]
   18dac:	ldr	r1, [fp, #16]
   18db0:	ldr	r2, [fp, #12]
   18db4:	ldr	r3, [fp, #8]
   18db8:	str	r2, [sp]
   18dbc:	str	r1, [sp, #4]
   18dc0:	str	r0, [sp, #8]
   18dc4:	mov	r0, r6
   18dc8:	mov	r1, r5
   18dcc:	mov	r2, r4
   18dd0:	bl	18ddc <__assert_fail@plt+0x70d8>
   18dd4:	sub	sp, fp, #16
   18dd8:	pop	{r4, r5, r6, r7, fp, pc}
   18ddc:	push	{r4, r5, r6, r7, fp, lr}
   18de0:	add	fp, sp, #16
   18de4:	sub	sp, sp, #8
   18de8:	mov	r4, r3
   18dec:	mov	r5, r2
   18df0:	mov	r7, r1
   18df4:	mov	r6, r0
   18df8:	mov	r0, r1
   18dfc:	bl	28af0 <__assert_fail@plt+0x16dec>
   18e00:	ldrb	r1, [r6, #1]
   18e04:	cmp	r0, #0
   18e08:	andne	r1, r1, #223	; 0xdf
   18e0c:	mov	r0, #0
   18e10:	cmp	r1, r7
   18e14:	bne	18e4c <__assert_fail@plt+0x7148>
   18e18:	cmp	r7, #0
   18e1c:	moveq	r0, #1
   18e20:	subeq	sp, fp, #16
   18e24:	popeq	{r4, r5, r6, r7, fp, pc}
   18e28:	ldr	r0, [fp, #16]
   18e2c:	ldr	r1, [fp, #12]
   18e30:	ldr	r3, [fp, #8]
   18e34:	str	r1, [sp]
   18e38:	str	r0, [sp, #4]
   18e3c:	mov	r0, r6
   18e40:	mov	r1, r5
   18e44:	mov	r2, r4
   18e48:	bl	18e54 <__assert_fail@plt+0x7150>
   18e4c:	sub	sp, fp, #16
   18e50:	pop	{r4, r5, r6, r7, fp, pc}
   18e54:	push	{r4, r5, r6, r7, fp, lr}
   18e58:	add	fp, sp, #16
   18e5c:	sub	sp, sp, #8
   18e60:	mov	r4, r3
   18e64:	mov	r5, r2
   18e68:	mov	r7, r1
   18e6c:	mov	r6, r0
   18e70:	mov	r0, r1
   18e74:	bl	28af0 <__assert_fail@plt+0x16dec>
   18e78:	ldrb	r1, [r6, #2]
   18e7c:	cmp	r0, #0
   18e80:	andne	r1, r1, #223	; 0xdf
   18e84:	mov	r0, #0
   18e88:	cmp	r1, r7
   18e8c:	bne	18ebc <__assert_fail@plt+0x71b8>
   18e90:	cmp	r7, #0
   18e94:	moveq	r0, #1
   18e98:	subeq	sp, fp, #16
   18e9c:	popeq	{r4, r5, r6, r7, fp, pc}
   18ea0:	ldr	r0, [fp, #12]
   18ea4:	ldr	r3, [fp, #8]
   18ea8:	str	r0, [sp]
   18eac:	mov	r0, r6
   18eb0:	mov	r1, r5
   18eb4:	mov	r2, r4
   18eb8:	bl	18ec4 <__assert_fail@plt+0x71c0>
   18ebc:	sub	sp, fp, #16
   18ec0:	pop	{r4, r5, r6, r7, fp, pc}
   18ec4:	push	{r4, r5, r6, r7, fp, lr}
   18ec8:	add	fp, sp, #16
   18ecc:	mov	r4, r3
   18ed0:	mov	r5, r2
   18ed4:	mov	r7, r1
   18ed8:	mov	r6, r0
   18edc:	mov	r0, r1
   18ee0:	bl	28af0 <__assert_fail@plt+0x16dec>
   18ee4:	ldrb	r1, [r6, #3]
   18ee8:	ldr	r3, [fp, #8]
   18eec:	cmp	r0, #0
   18ef0:	andne	r1, r1, #223	; 0xdf
   18ef4:	mov	r0, #0
   18ef8:	cmp	r1, r7
   18efc:	popne	{r4, r5, r6, r7, fp, pc}
   18f00:	cmp	r7, #0
   18f04:	beq	18f1c <__assert_fail@plt+0x7218>
   18f08:	mov	r0, r6
   18f0c:	mov	r1, r5
   18f10:	mov	r2, r4
   18f14:	pop	{r4, r5, r6, r7, fp, lr}
   18f18:	b	18f24 <__assert_fail@plt+0x7220>
   18f1c:	mov	r0, #1
   18f20:	pop	{r4, r5, r6, r7, fp, pc}
   18f24:	push	{r4, r5, r6, r7, fp, lr}
   18f28:	add	fp, sp, #16
   18f2c:	mov	r4, r3
   18f30:	mov	r5, r2
   18f34:	mov	r7, r1
   18f38:	mov	r6, r0
   18f3c:	mov	r0, r1
   18f40:	bl	28af0 <__assert_fail@plt+0x16dec>
   18f44:	ldrb	r1, [r6, #4]
   18f48:	cmp	r0, #0
   18f4c:	andne	r1, r1, #223	; 0xdf
   18f50:	mov	r0, #0
   18f54:	cmp	r1, r7
   18f58:	popne	{r4, r5, r6, r7, fp, pc}
   18f5c:	cmp	r7, #0
   18f60:	beq	18f78 <__assert_fail@plt+0x7274>
   18f64:	mov	r0, r6
   18f68:	mov	r1, r5
   18f6c:	mov	r2, r4
   18f70:	pop	{r4, r5, r6, r7, fp, lr}
   18f74:	b	18f80 <__assert_fail@plt+0x727c>
   18f78:	mov	r0, #1
   18f7c:	pop	{r4, r5, r6, r7, fp, pc}
   18f80:	push	{r4, r5, r6, sl, fp, lr}
   18f84:	add	fp, sp, #16
   18f88:	mov	r4, r2
   18f8c:	mov	r6, r1
   18f90:	mov	r5, r0
   18f94:	mov	r0, r1
   18f98:	bl	28af0 <__assert_fail@plt+0x16dec>
   18f9c:	ldrb	r1, [r5, #5]
   18fa0:	cmp	r0, #0
   18fa4:	andne	r1, r1, #223	; 0xdf
   18fa8:	mov	r0, #0
   18fac:	cmp	r1, r6
   18fb0:	popne	{r4, r5, r6, sl, fp, pc}
   18fb4:	cmp	r6, #0
   18fb8:	beq	18fcc <__assert_fail@plt+0x72c8>
   18fbc:	mov	r0, r5
   18fc0:	mov	r1, r4
   18fc4:	pop	{r4, r5, r6, sl, fp, lr}
   18fc8:	b	18fd4 <__assert_fail@plt+0x72d0>
   18fcc:	mov	r0, #1
   18fd0:	pop	{r4, r5, r6, sl, fp, pc}
   18fd4:	push	{r4, r5, fp, lr}
   18fd8:	add	fp, sp, #8
   18fdc:	mov	r5, r1
   18fe0:	mov	r4, r0
   18fe4:	mov	r0, r1
   18fe8:	bl	28af0 <__assert_fail@plt+0x16dec>
   18fec:	ldrb	r1, [r4, #6]
   18ff0:	cmp	r0, #0
   18ff4:	andne	r1, r1, #223	; 0xdf
   18ff8:	mov	r0, #0
   18ffc:	cmp	r1, r5
   19000:	popne	{r4, r5, fp, pc}
   19004:	cmp	r5, #0
   19008:	beq	19018 <__assert_fail@plt+0x7314>
   1900c:	mov	r0, r4
   19010:	pop	{r4, r5, fp, lr}
   19014:	b	19020 <__assert_fail@plt+0x731c>
   19018:	mov	r0, #1
   1901c:	pop	{r4, r5, fp, pc}
   19020:	push	{r4, sl, fp, lr}
   19024:	add	fp, sp, #8
   19028:	mov	r4, r0
   1902c:	mov	r0, #0
   19030:	bl	28af0 <__assert_fail@plt+0x16dec>
   19034:	ldrb	r1, [r4, #7]
   19038:	cmp	r0, #0
   1903c:	beq	19054 <__assert_fail@plt+0x7350>
   19040:	tst	r1, #223	; 0xdf
   19044:	moveq	r0, #1
   19048:	popeq	{r4, sl, fp, pc}
   1904c:	mov	r0, #0
   19050:	pop	{r4, sl, fp, pc}
   19054:	cmp	r1, #0
   19058:	moveq	r0, #1
   1905c:	popeq	{r4, sl, fp, pc}
   19060:	mov	r0, #0
   19064:	pop	{r4, sl, fp, pc}
   19068:	ldr	r0, [r0, #76]	; 0x4c
   1906c:	bx	lr
   19070:	ldr	r0, [r0, #92]	; 0x5c
   19074:	bx	lr
   19078:	ldr	r0, [r0, #84]	; 0x54
   1907c:	bx	lr
   19080:	mov	r0, #0
   19084:	bx	lr
   19088:	ldrd	r2, [r1, #72]	; 0x48
   1908c:	stm	r0, {r2, r3}
   19090:	bx	lr
   19094:	ldrd	r2, [r1, #88]	; 0x58
   19098:	stm	r0, {r2, r3}
   1909c:	bx	lr
   190a0:	ldrd	r2, [r1, #80]	; 0x50
   190a4:	stm	r0, {r2, r3}
   190a8:	bx	lr
   190ac:	mvn	r1, #0
   190b0:	str	r1, [r0]
   190b4:	str	r1, [r0, #4]
   190b8:	bx	lr
   190bc:	bx	lr
   190c0:	push	{r4, r5, fp, lr}
   190c4:	add	fp, sp, #8
   190c8:	mov	r4, r1
   190cc:	mov	r5, r0
   190d0:	mov	r1, #0
   190d4:	mov	r2, r4
   190d8:	bl	11bb4 <memchr@plt>
   190dc:	rsb	r1, r5, #1
   190e0:	cmp	r0, #0
   190e4:	addne	r4, r1, r0
   190e8:	mov	r0, r4
   190ec:	pop	{r4, r5, fp, pc}
   190f0:	push	{r4, r5, r6, r7, fp, lr}
   190f4:	add	fp, sp, #16
   190f8:	mov	r4, r0
   190fc:	cmp	r0, #2
   19100:	movhi	r0, r4
   19104:	pophi	{r4, r5, r6, r7, fp, pc}
   19108:	mov	r0, r4
   1910c:	bl	28f78 <__assert_fail@plt+0x17274>
   19110:	mov	r5, r0
   19114:	bl	11b24 <__errno_location@plt>
   19118:	mov	r6, r0
   1911c:	ldr	r7, [r0]
   19120:	mov	r0, r4
   19124:	bl	11ce0 <close@plt>
   19128:	str	r7, [r6]
   1912c:	mov	r0, r5
   19130:	pop	{r4, r5, r6, r7, fp, pc}
   19134:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   19138:	add	fp, sp, #24
   1913c:	sub	sp, sp, #32
   19140:	mov	r4, r2
   19144:	mov	r5, r0
   19148:	ldr	r7, [fp, #12]
   1914c:	ldr	r6, [fp, #8]
   19150:	cmp	r1, #0
   19154:	beq	19174 <__assert_fail@plt+0x7470>
   19158:	mov	r2, r1
   1915c:	str	r3, [sp]
   19160:	movw	r1, #43288	; 0xa918
   19164:	movt	r1, #2
   19168:	mov	r0, r5
   1916c:	mov	r3, r4
   19170:	b	19184 <__assert_fail@plt+0x7480>
   19174:	movw	r1, #43300	; 0xa924
   19178:	movt	r1, #2
   1917c:	mov	r0, r5
   19180:	mov	r2, r4
   19184:	bl	11b0c <fprintf@plt>
   19188:	movw	r1, #43307	; 0xa92b
   1918c:	movt	r1, #2
   19190:	mov	r0, #0
   19194:	mov	r2, #5
   19198:	bl	11980 <dcgettext@plt>
   1919c:	mov	r2, r0
   191a0:	movw	r1, #44003	; 0xabe3
   191a4:	movt	r1, #2
   191a8:	mov	r0, r5
   191ac:	movw	r3, #2022	; 0x7e6
   191b0:	bl	11b0c <fprintf@plt>
   191b4:	mov	r0, #10
   191b8:	mov	r1, r5
   191bc:	bl	11c20 <fputc@plt>
   191c0:	movw	r1, #43311	; 0xa92f
   191c4:	movt	r1, #2
   191c8:	mov	r0, #0
   191cc:	mov	r2, #5
   191d0:	bl	11980 <dcgettext@plt>
   191d4:	mov	r1, r0
   191d8:	movw	r2, #43482	; 0xa9da
   191dc:	movt	r2, #2
   191e0:	mov	r0, r5
   191e4:	bl	11b0c <fprintf@plt>
   191e8:	mov	r0, #10
   191ec:	mov	r1, r5
   191f0:	bl	11c20 <fputc@plt>
   191f4:	cmp	r7, #9
   191f8:	bhi	19234 <__assert_fail@plt+0x7530>
   191fc:	add	r0, pc, #0
   19200:	ldr	pc, [r0, r7, lsl #2]
   19204:	andeq	r9, r1, ip, lsr #4
   19208:	andeq	r9, r1, r0, asr #4
   1920c:	andeq	r9, r1, ip, ror #4
   19210:	muleq	r1, r8, r2
   19214:	andeq	r9, r1, r0, asr #5
   19218:	andeq	r9, r1, ip, ror #5
   1921c:	andeq	r9, r1, r0, lsr #6
   19220:	andeq	r9, r1, r0, ror #6
   19224:	strdeq	r9, [r1], -ip
   19228:	andeq	r9, r1, r4, lsr #7
   1922c:	sub	sp, fp, #24
   19230:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   19234:	movw	r1, #43835	; 0xab3b
   19238:	movt	r1, #2
   1923c:	b	193ac <__assert_fail@plt+0x76a8>
   19240:	movw	r1, #43516	; 0xa9fc
   19244:	movt	r1, #2
   19248:	mov	r0, #0
   1924c:	mov	r2, #5
   19250:	bl	11980 <dcgettext@plt>
   19254:	mov	r1, r0
   19258:	ldr	r2, [r6]
   1925c:	mov	r0, r5
   19260:	sub	sp, fp, #24
   19264:	pop	{r4, r5, r6, r7, r8, sl, fp, lr}
   19268:	b	11b0c <fprintf@plt>
   1926c:	movw	r1, #43532	; 0xaa0c
   19270:	movt	r1, #2
   19274:	mov	r0, #0
   19278:	mov	r2, #5
   1927c:	bl	11980 <dcgettext@plt>
   19280:	mov	r1, r0
   19284:	ldm	r6, {r2, r3}
   19288:	mov	r0, r5
   1928c:	sub	sp, fp, #24
   19290:	pop	{r4, r5, r6, r7, r8, sl, fp, lr}
   19294:	b	11b0c <fprintf@plt>
   19298:	movw	r1, #43555	; 0xaa23
   1929c:	movt	r1, #2
   192a0:	mov	r0, #0
   192a4:	mov	r2, #5
   192a8:	bl	11980 <dcgettext@plt>
   192ac:	mov	r1, r0
   192b0:	ldm	r6, {r2, r3}
   192b4:	ldr	r0, [r6, #8]
   192b8:	str	r0, [sp]
   192bc:	b	19358 <__assert_fail@plt+0x7654>
   192c0:	movw	r1, #43583	; 0xaa3f
   192c4:	movt	r1, #2
   192c8:	mov	r0, #0
   192cc:	mov	r2, #5
   192d0:	bl	11980 <dcgettext@plt>
   192d4:	mov	r1, r0
   192d8:	ldm	r6, {r2, r3}
   192dc:	ldr	r0, [r6, #8]
   192e0:	ldr	r7, [r6, #12]
   192e4:	stm	sp, {r0, r7}
   192e8:	b	19358 <__assert_fail@plt+0x7654>
   192ec:	movw	r1, #43615	; 0xaa5f
   192f0:	movt	r1, #2
   192f4:	mov	r0, #0
   192f8:	mov	r2, #5
   192fc:	bl	11980 <dcgettext@plt>
   19300:	mov	r1, r0
   19304:	ldm	r6, {r2, r3}
   19308:	ldr	r0, [r6, #8]
   1930c:	ldr	r7, [r6, #12]
   19310:	ldr	r6, [r6, #16]
   19314:	stm	sp, {r0, r7}
   19318:	str	r6, [sp, #8]
   1931c:	b	19358 <__assert_fail@plt+0x7654>
   19320:	movw	r1, #43651	; 0xaa83
   19324:	movt	r1, #2
   19328:	mov	r0, #0
   1932c:	mov	r2, #5
   19330:	bl	11980 <dcgettext@plt>
   19334:	mov	r1, r0
   19338:	ldm	r6, {r2, r3}
   1933c:	ldr	r0, [r6, #8]
   19340:	ldr	r7, [r6, #12]
   19344:	ldr	r4, [r6, #16]
   19348:	ldr	r6, [r6, #20]
   1934c:	stm	sp, {r0, r7}
   19350:	str	r4, [sp, #8]
   19354:	str	r6, [sp, #12]
   19358:	mov	r0, r5
   1935c:	b	1944c <__assert_fail@plt+0x7748>
   19360:	movw	r1, #43691	; 0xaaab
   19364:	movt	r1, #2
   19368:	mov	r0, #0
   1936c:	mov	r2, #5
   19370:	bl	11980 <dcgettext@plt>
   19374:	mov	ip, r0
   19378:	ldm	r6, {r2, r3}
   1937c:	ldr	r0, [r6, #8]
   19380:	ldr	r7, [r6, #12]
   19384:	ldr	r4, [r6, #16]
   19388:	ldr	r1, [r6, #20]
   1938c:	ldr	r6, [r6, #24]
   19390:	stm	sp, {r0, r7}
   19394:	str	r4, [sp, #8]
   19398:	str	r1, [sp, #12]
   1939c:	str	r6, [sp, #16]
   193a0:	b	19444 <__assert_fail@plt+0x7740>
   193a4:	movw	r1, #43783	; 0xab07
   193a8:	movt	r1, #2
   193ac:	mov	r0, #0
   193b0:	mov	r2, #5
   193b4:	bl	11980 <dcgettext@plt>
   193b8:	mov	ip, r0
   193bc:	ldr	r2, [r6]
   193c0:	ldr	r3, [r6, #4]
   193c4:	ldr	r0, [r6, #8]
   193c8:	ldr	r7, [r6, #12]
   193cc:	ldr	r4, [r6, #16]
   193d0:	ldr	r1, [r6, #20]
   193d4:	ldr	lr, [r6, #24]
   193d8:	ldr	r8, [r6, #28]
   193dc:	ldr	r6, [r6, #32]
   193e0:	stm	sp, {r0, r7}
   193e4:	str	r4, [sp, #8]
   193e8:	str	r1, [sp, #12]
   193ec:	str	lr, [sp, #16]
   193f0:	str	r8, [sp, #20]
   193f4:	str	r6, [sp, #24]
   193f8:	b	19444 <__assert_fail@plt+0x7740>
   193fc:	movw	r1, #43735	; 0xaad7
   19400:	movt	r1, #2
   19404:	mov	r0, #0
   19408:	mov	r2, #5
   1940c:	bl	11980 <dcgettext@plt>
   19410:	mov	ip, r0
   19414:	ldm	r6, {r2, r3}
   19418:	ldr	r0, [r6, #8]
   1941c:	ldr	r7, [r6, #12]
   19420:	ldr	r4, [r6, #16]
   19424:	ldr	r1, [r6, #20]
   19428:	ldr	lr, [r6, #24]
   1942c:	ldr	r6, [r6, #28]
   19430:	stm	sp, {r0, r7}
   19434:	str	r4, [sp, #8]
   19438:	str	r1, [sp, #12]
   1943c:	str	lr, [sp, #16]
   19440:	str	r6, [sp, #20]
   19444:	mov	r0, r5
   19448:	mov	r1, ip
   1944c:	bl	11b0c <fprintf@plt>
   19450:	sub	sp, fp, #24
   19454:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   19458:	push	{r4, sl, fp, lr}
   1945c:	add	fp, sp, #8
   19460:	sub	sp, sp, #8
   19464:	mov	lr, #0
   19468:	ldr	ip, [fp, #8]
   1946c:	ldr	r4, [ip, lr, lsl #2]
   19470:	add	lr, lr, #1
   19474:	cmp	r4, #0
   19478:	bne	1946c <__assert_fail@plt+0x7768>
   1947c:	sub	r4, lr, #1
   19480:	str	ip, [sp]
   19484:	str	r4, [sp, #4]
   19488:	bl	19134 <__assert_fail@plt+0x7430>
   1948c:	sub	sp, fp, #8
   19490:	pop	{r4, sl, fp, pc}
   19494:	push	{r4, r5, fp, lr}
   19498:	add	fp, sp, #8
   1949c:	sub	sp, sp, #48	; 0x30
   194a0:	mov	ip, #0
   194a4:	ldr	r4, [fp, #8]
   194a8:	add	lr, sp, #8
   194ac:	ldr	r5, [r4]
   194b0:	str	r5, [lr, ip, lsl #2]
   194b4:	cmp	r5, #0
   194b8:	beq	194cc <__assert_fail@plt+0x77c8>
   194bc:	add	ip, ip, #1
   194c0:	add	r4, r4, #4
   194c4:	cmp	ip, #10
   194c8:	bcc	194ac <__assert_fail@plt+0x77a8>
   194cc:	str	lr, [sp]
   194d0:	str	ip, [sp, #4]
   194d4:	bl	19134 <__assert_fail@plt+0x7430>
   194d8:	sub	sp, fp, #8
   194dc:	pop	{r4, r5, fp, pc}
   194e0:	push	{fp, lr}
   194e4:	mov	fp, sp
   194e8:	sub	sp, sp, #8
   194ec:	add	ip, fp, #8
   194f0:	str	ip, [sp, #4]
   194f4:	str	ip, [sp]
   194f8:	bl	19494 <__assert_fail@plt+0x7790>
   194fc:	mov	sp, fp
   19500:	pop	{fp, pc}
   19504:	push	{fp, lr}
   19508:	mov	fp, sp
   1950c:	movw	r0, #49692	; 0xc21c
   19510:	movt	r0, #3
   19514:	ldr	r1, [r0]
   19518:	mov	r0, #10
   1951c:	bl	11c20 <fputc@plt>
   19520:	movw	r1, #43895	; 0xab77
   19524:	movt	r1, #2
   19528:	mov	r0, #0
   1952c:	mov	r2, #5
   19530:	bl	11980 <dcgettext@plt>
   19534:	movw	r1, #42756	; 0xa704
   19538:	movt	r1, #2
   1953c:	bl	118a8 <printf@plt>
   19540:	movw	r1, #43915	; 0xab8b
   19544:	movt	r1, #2
   19548:	mov	r0, #0
   1954c:	mov	r2, #5
   19550:	bl	11980 <dcgettext@plt>
   19554:	movw	r1, #42085	; 0xa465
   19558:	movt	r1, #2
   1955c:	movw	r2, #42670	; 0xa6ae
   19560:	movt	r2, #2
   19564:	bl	118a8 <printf@plt>
   19568:	movw	r1, #43935	; 0xab9f
   1956c:	movt	r1, #2
   19570:	mov	r0, #0
   19574:	mov	r2, #5
   19578:	bl	11980 <dcgettext@plt>
   1957c:	movw	r1, #43974	; 0xabc6
   19580:	movt	r1, #2
   19584:	pop	{fp, lr}
   19588:	b	118a8 <printf@plt>
   1958c:	b	19590 <__assert_fail@plt+0x788c>
   19590:	push	{r4, r5, r6, sl, fp, lr}
   19594:	add	fp, sp, #16
   19598:	mov	r4, r2
   1959c:	mov	r5, r1
   195a0:	mov	r6, r0
   195a4:	bl	1a3dc <__assert_fail@plt+0x86d8>
   195a8:	cmp	r0, #0
   195ac:	popne	{r4, r5, r6, sl, fp, pc}
   195b0:	cmp	r6, #0
   195b4:	beq	195c8 <__assert_fail@plt+0x78c4>
   195b8:	cmp	r5, #0
   195bc:	cmpne	r4, #0
   195c0:	bne	195c8 <__assert_fail@plt+0x78c4>
   195c4:	pop	{r4, r5, r6, sl, fp, pc}
   195c8:	bl	1997c <__assert_fail@plt+0x7c78>
   195cc:	push	{fp, lr}
   195d0:	mov	fp, sp
   195d4:	bl	1a2f8 <__assert_fail@plt+0x85f4>
   195d8:	bl	195e0 <__assert_fail@plt+0x78dc>
   195dc:	pop	{fp, pc}
   195e0:	cmp	r0, #0
   195e4:	bxne	lr
   195e8:	push	{fp, lr}
   195ec:	mov	fp, sp
   195f0:	bl	1997c <__assert_fail@plt+0x7c78>
   195f4:	push	{fp, lr}
   195f8:	mov	fp, sp
   195fc:	bl	28d28 <__assert_fail@plt+0x17024>
   19600:	bl	195e0 <__assert_fail@plt+0x78dc>
   19604:	pop	{fp, pc}
   19608:	b	195cc <__assert_fail@plt+0x78c8>
   1960c:	push	{r4, r5, fp, lr}
   19610:	add	fp, sp, #8
   19614:	mov	r4, r1
   19618:	mov	r5, r0
   1961c:	bl	1a388 <__assert_fail@plt+0x8684>
   19620:	cmp	r0, #0
   19624:	popne	{r4, r5, fp, pc}
   19628:	cmp	r5, #0
   1962c:	beq	1963c <__assert_fail@plt+0x7938>
   19630:	cmp	r4, #0
   19634:	bne	1963c <__assert_fail@plt+0x7938>
   19638:	pop	{r4, r5, fp, pc}
   1963c:	bl	1997c <__assert_fail@plt+0x7c78>
   19640:	push	{fp, lr}
   19644:	mov	fp, sp
   19648:	bl	28d2c <__assert_fail@plt+0x17028>
   1964c:	bl	195e0 <__assert_fail@plt+0x78dc>
   19650:	pop	{fp, pc}
   19654:	push	{fp, lr}
   19658:	mov	fp, sp
   1965c:	bl	28d3c <__assert_fail@plt+0x17038>
   19660:	bl	195e0 <__assert_fail@plt+0x78dc>
   19664:	pop	{fp, pc}
   19668:	push	{fp, lr}
   1966c:	mov	fp, sp
   19670:	mov	r2, r1
   19674:	mov	r1, r0
   19678:	mov	r0, #0
   1967c:	bl	19590 <__assert_fail@plt+0x788c>
   19680:	pop	{fp, pc}
   19684:	mov	r2, r1
   19688:	mov	r1, r0
   1968c:	mov	r0, #0
   19690:	b	19654 <__assert_fail@plt+0x7950>
   19694:	mov	r2, #1
   19698:	b	1969c <__assert_fail@plt+0x7998>
   1969c:	push	{r4, r5, fp, lr}
   196a0:	add	fp, sp, #8
   196a4:	mov	r4, r1
   196a8:	ldr	r5, [r1]
   196ac:	cmp	r0, #0
   196b0:	beq	196c8 <__assert_fail@plt+0x79c4>
   196b4:	mov	r1, #1
   196b8:	add	r1, r1, r5, lsr #1
   196bc:	adds	r5, r5, r1
   196c0:	bcc	196e0 <__assert_fail@plt+0x79dc>
   196c4:	bl	1997c <__assert_fail@plt+0x7c78>
   196c8:	cmp	r5, #0
   196cc:	bne	196e0 <__assert_fail@plt+0x79dc>
   196d0:	mov	r1, #64	; 0x40
   196d4:	udiv	r5, r1, r2
   196d8:	cmp	r2, #64	; 0x40
   196dc:	addhi	r5, r5, #1
   196e0:	mov	r1, r5
   196e4:	bl	19590 <__assert_fail@plt+0x788c>
   196e8:	str	r5, [r4]
   196ec:	pop	{r4, r5, fp, pc}
   196f0:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   196f4:	add	fp, sp, #24
   196f8:	mov	r8, r1
   196fc:	ldr	r6, [r1]
   19700:	add	r1, r6, r6, asr #1
   19704:	cmp	r1, r6
   19708:	mvnvs	r1, #-2147483648	; 0x80000000
   1970c:	cmp	r1, r3
   19710:	mov	r5, r1
   19714:	movgt	r5, r3
   19718:	cmn	r3, #1
   1971c:	movle	r5, r1
   19720:	ldr	r4, [fp, #8]
   19724:	cmn	r4, #1
   19728:	ble	19750 <__assert_fail@plt+0x7a4c>
   1972c:	cmp	r4, #0
   19730:	beq	197a4 <__assert_fail@plt+0x7aa0>
   19734:	cmn	r5, #1
   19738:	ble	19778 <__assert_fail@plt+0x7a74>
   1973c:	mvn	r7, #-2147483648	; 0x80000000
   19740:	udiv	r1, r7, r4
   19744:	cmp	r1, r5
   19748:	bge	197a4 <__assert_fail@plt+0x7aa0>
   1974c:	b	197b4 <__assert_fail@plt+0x7ab0>
   19750:	cmn	r5, #1
   19754:	ble	19794 <__assert_fail@plt+0x7a90>
   19758:	cmn	r4, #1
   1975c:	beq	197a4 <__assert_fail@plt+0x7aa0>
   19760:	mov	r1, #-2147483648	; 0x80000000
   19764:	sdiv	r1, r1, r4
   19768:	mvn	r7, #-2147483648	; 0x80000000
   1976c:	cmp	r1, r5
   19770:	bge	197a4 <__assert_fail@plt+0x7aa0>
   19774:	b	197b4 <__assert_fail@plt+0x7ab0>
   19778:	beq	197a4 <__assert_fail@plt+0x7aa0>
   1977c:	mov	r1, #-2147483648	; 0x80000000
   19780:	sdiv	r1, r1, r5
   19784:	mvn	r7, #-2147483648	; 0x80000000
   19788:	cmp	r1, r4
   1978c:	bge	197a4 <__assert_fail@plt+0x7aa0>
   19790:	b	197b4 <__assert_fail@plt+0x7ab0>
   19794:	mvn	r7, #-2147483648	; 0x80000000
   19798:	sdiv	r1, r7, r4
   1979c:	cmp	r5, r1
   197a0:	blt	197b4 <__assert_fail@plt+0x7ab0>
   197a4:	mul	r1, r5, r4
   197a8:	mov	r7, #64	; 0x40
   197ac:	cmp	r1, #63	; 0x3f
   197b0:	bgt	197bc <__assert_fail@plt+0x7ab8>
   197b4:	sdiv	r5, r7, r4
   197b8:	mul	r1, r5, r4
   197bc:	cmp	r0, #0
   197c0:	moveq	r7, #0
   197c4:	streq	r7, [r8]
   197c8:	sub	r7, r5, r6
   197cc:	cmp	r7, r2
   197d0:	bge	1987c <__assert_fail@plt+0x7b78>
   197d4:	add	r5, r6, r2
   197d8:	mov	r1, #0
   197dc:	cmp	r5, r3
   197e0:	mov	r2, #0
   197e4:	movwgt	r2, #1
   197e8:	cmn	r3, #1
   197ec:	movwgt	r1, #1
   197f0:	cmp	r5, r6
   197f4:	bvs	19864 <__assert_fail@plt+0x7b60>
   197f8:	ands	r1, r1, r2
   197fc:	bne	19864 <__assert_fail@plt+0x7b60>
   19800:	cmn	r4, #1
   19804:	ble	1982c <__assert_fail@plt+0x7b28>
   19808:	cmp	r4, #0
   1980c:	beq	19878 <__assert_fail@plt+0x7b74>
   19810:	cmn	r5, #1
   19814:	ble	19850 <__assert_fail@plt+0x7b4c>
   19818:	mvn	r1, #-2147483648	; 0x80000000
   1981c:	udiv	r1, r1, r4
   19820:	cmp	r1, r5
   19824:	bge	19878 <__assert_fail@plt+0x7b74>
   19828:	b	19864 <__assert_fail@plt+0x7b60>
   1982c:	cmn	r5, #1
   19830:	ble	19868 <__assert_fail@plt+0x7b64>
   19834:	cmn	r4, #1
   19838:	beq	19878 <__assert_fail@plt+0x7b74>
   1983c:	mov	r1, #-2147483648	; 0x80000000
   19840:	sdiv	r1, r1, r4
   19844:	cmp	r1, r5
   19848:	bge	19878 <__assert_fail@plt+0x7b74>
   1984c:	b	19864 <__assert_fail@plt+0x7b60>
   19850:	beq	19878 <__assert_fail@plt+0x7b74>
   19854:	mov	r1, #-2147483648	; 0x80000000
   19858:	sdiv	r1, r1, r5
   1985c:	cmp	r1, r4
   19860:	bge	19878 <__assert_fail@plt+0x7b74>
   19864:	bl	1997c <__assert_fail@plt+0x7c78>
   19868:	mvn	r1, #-2147483648	; 0x80000000
   1986c:	sdiv	r1, r1, r4
   19870:	cmp	r5, r1
   19874:	blt	19864 <__assert_fail@plt+0x7b60>
   19878:	mul	r1, r5, r4
   1987c:	bl	1960c <__assert_fail@plt+0x7908>
   19880:	str	r5, [r8]
   19884:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   19888:	mov	r1, #1
   1988c:	b	19890 <__assert_fail@plt+0x7b8c>
   19890:	push	{fp, lr}
   19894:	mov	fp, sp
   19898:	bl	19f8c <__assert_fail@plt+0x8288>
   1989c:	bl	195e0 <__assert_fail@plt+0x78dc>
   198a0:	pop	{fp, pc}
   198a4:	mov	r1, #1
   198a8:	b	198ac <__assert_fail@plt+0x7ba8>
   198ac:	push	{fp, lr}
   198b0:	mov	fp, sp
   198b4:	bl	28d38 <__assert_fail@plt+0x17034>
   198b8:	bl	195e0 <__assert_fail@plt+0x78dc>
   198bc:	pop	{fp, pc}
   198c0:	push	{r4, r5, r6, sl, fp, lr}
   198c4:	add	fp, sp, #16
   198c8:	mov	r4, r1
   198cc:	mov	r5, r0
   198d0:	mov	r0, r1
   198d4:	bl	195cc <__assert_fail@plt+0x78c8>
   198d8:	mov	r6, r0
   198dc:	mov	r1, r5
   198e0:	mov	r2, r4
   198e4:	bl	1192c <memcpy@plt>
   198e8:	mov	r0, r6
   198ec:	pop	{r4, r5, r6, sl, fp, pc}
   198f0:	push	{r4, r5, r6, sl, fp, lr}
   198f4:	add	fp, sp, #16
   198f8:	mov	r4, r1
   198fc:	mov	r5, r0
   19900:	mov	r0, r1
   19904:	bl	195f4 <__assert_fail@plt+0x78f0>
   19908:	mov	r6, r0
   1990c:	mov	r1, r5
   19910:	mov	r2, r4
   19914:	bl	1192c <memcpy@plt>
   19918:	mov	r0, r6
   1991c:	pop	{r4, r5, r6, sl, fp, pc}
   19920:	push	{r4, r5, r6, sl, fp, lr}
   19924:	add	fp, sp, #16
   19928:	mov	r4, r1
   1992c:	mov	r5, r0
   19930:	add	r0, r1, #1
   19934:	bl	195f4 <__assert_fail@plt+0x78f0>
   19938:	mov	r6, r0
   1993c:	mov	r0, #0
   19940:	strb	r0, [r6, r4]
   19944:	mov	r0, r6
   19948:	mov	r1, r5
   1994c:	mov	r2, r4
   19950:	bl	1192c <memcpy@plt>
   19954:	mov	r0, r6
   19958:	pop	{r4, r5, r6, sl, fp, pc}
   1995c:	push	{r4, sl, fp, lr}
   19960:	add	fp, sp, #8
   19964:	mov	r4, r0
   19968:	bl	11af4 <strlen@plt>
   1996c:	add	r1, r0, #1
   19970:	mov	r0, r4
   19974:	pop	{r4, sl, fp, lr}
   19978:	b	198c0 <__assert_fail@plt+0x7bbc>
   1997c:	push	{fp, lr}
   19980:	mov	fp, sp
   19984:	movw	r0, #49592	; 0xc1b8
   19988:	movt	r0, #3
   1998c:	ldr	r4, [r0]
   19990:	movw	r1, #44050	; 0xac12
   19994:	movt	r1, #2
   19998:	mov	r0, #0
   1999c:	mov	r2, #5
   199a0:	bl	11980 <dcgettext@plt>
   199a4:	mov	r3, r0
   199a8:	movw	r2, #44964	; 0xafa4
   199ac:	movt	r2, #2
   199b0:	mov	r0, r4
   199b4:	mov	r1, #0
   199b8:	bl	11a28 <error@plt>
   199bc:	bl	11cc8 <abort@plt>
   199c0:	push	{fp, lr}
   199c4:	mov	fp, sp
   199c8:	sub	sp, sp, #8
   199cc:	movw	ip, #49592	; 0xc1b8
   199d0:	movt	ip, #3
   199d4:	ldr	ip, [ip]
   199d8:	str	ip, [sp, #4]
   199dc:	ldr	ip, [fp, #8]
   199e0:	str	ip, [sp]
   199e4:	bl	199ec <__assert_fail@plt+0x7ce8>
   199e8:	bl	11cc8 <abort@plt>
   199ec:	push	{r4, r5, r6, r7, fp, lr}
   199f0:	add	fp, sp, #16
   199f4:	sub	sp, sp, #16
   199f8:	sub	r0, r0, #1
   199fc:	cmp	r0, #4
   19a00:	bcs	19a80 <__assert_fail@plt+0x7d7c>
   19a04:	mov	r5, r1
   19a08:	ldr	r4, [fp, #12]
   19a0c:	ldr	r6, [fp, #8]
   19a10:	movw	r1, #44164	; 0xac84
   19a14:	movt	r1, #2
   19a18:	ldr	r1, [r1, r0, lsl #2]
   19a1c:	cmn	r5, #1
   19a20:	ble	19a34 <__assert_fail@plt+0x7d30>
   19a24:	ldr	r7, [r3, r5, lsl #4]
   19a28:	movw	r5, #44067	; 0xac23
   19a2c:	movt	r5, #2
   19a30:	b	19a50 <__assert_fail@plt+0x7d4c>
   19a34:	mov	r0, #0
   19a38:	strb	r0, [sp, #15]
   19a3c:	strb	r2, [sp, #14]
   19a40:	movw	r0, #44067	; 0xac23
   19a44:	movt	r0, #2
   19a48:	sub	r5, r0, r5
   19a4c:	add	r7, sp, #14
   19a50:	mov	r0, #0
   19a54:	mov	r2, #5
   19a58:	bl	11980 <dcgettext@plt>
   19a5c:	mov	r2, r0
   19a60:	str	r7, [sp]
   19a64:	str	r6, [sp, #4]
   19a68:	mov	r0, r4
   19a6c:	mov	r1, #0
   19a70:	mov	r3, r5
   19a74:	bl	11a28 <error@plt>
   19a78:	sub	sp, fp, #16
   19a7c:	pop	{r4, r5, r6, r7, fp, pc}
   19a80:	bl	11cc8 <abort@plt>
   19a84:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   19a88:	add	fp, sp, #28
   19a8c:	sub	sp, sp, #20
   19a90:	cmp	r2, #37	; 0x25
   19a94:	bcs	19ec4 <__assert_fail@plt+0x81c0>
   19a98:	mov	r5, r2
   19a9c:	mov	r6, r1
   19aa0:	mov	r4, r0
   19aa4:	str	r3, [sp, #4]
   19aa8:	ldr	sl, [fp, #8]
   19aac:	bl	11b24 <__errno_location@plt>
   19ab0:	mov	r7, r0
   19ab4:	mov	r0, #0
   19ab8:	str	r0, [r7]
   19abc:	bl	11ac4 <__ctype_b_loc@plt>
   19ac0:	ldr	r1, [r0]
   19ac4:	mov	r2, r4
   19ac8:	ldrb	r0, [r2], #1
   19acc:	add	r3, r1, r0, lsl #1
   19ad0:	ldrb	r3, [r3, #1]
   19ad4:	tst	r3, #32
   19ad8:	bne	19ac8 <__assert_fail@plt+0x7dc4>
   19adc:	add	r9, sp, #16
   19ae0:	cmp	r6, #0
   19ae4:	movne	r9, r6
   19ae8:	mov	r8, #4
   19aec:	cmp	r0, #45	; 0x2d
   19af0:	beq	19eb8 <__assert_fail@plt+0x81b4>
   19af4:	mov	r0, r4
   19af8:	mov	r1, r9
   19afc:	mov	r2, r5
   19b00:	bl	11ba8 <strtoumax@plt>
   19b04:	str	r1, [sp, #12]
   19b08:	str	r0, [sp, #8]
   19b0c:	ldr	r6, [r9]
   19b10:	cmp	r6, r4
   19b14:	beq	19b3c <__assert_fail@plt+0x7e38>
   19b18:	ldr	r0, [r7]
   19b1c:	cmp	r0, #0
   19b20:	beq	19b70 <__assert_fail@plt+0x7e6c>
   19b24:	cmp	r0, #34	; 0x22
   19b28:	bne	19eb8 <__assert_fail@plt+0x81b4>
   19b2c:	mov	r8, #1
   19b30:	cmp	sl, #0
   19b34:	bne	19b7c <__assert_fail@plt+0x7e78>
   19b38:	b	19ea8 <__assert_fail@plt+0x81a4>
   19b3c:	cmp	sl, #0
   19b40:	ldrbne	r1, [r6]
   19b44:	cmpne	r1, #0
   19b48:	beq	19eb8 <__assert_fail@plt+0x81b4>
   19b4c:	mov	r0, sl
   19b50:	bl	11b00 <strchr@plt>
   19b54:	cmp	r0, #0
   19b58:	beq	19eb8 <__assert_fail@plt+0x81b4>
   19b5c:	mov	r8, #0
   19b60:	str	r8, [sp, #12]
   19b64:	mov	r0, #1
   19b68:	str	r0, [sp, #8]
   19b6c:	b	19b7c <__assert_fail@plt+0x7e78>
   19b70:	mov	r8, r0
   19b74:	cmp	sl, #0
   19b78:	beq	19ea8 <__assert_fail@plt+0x81a4>
   19b7c:	ldrb	r4, [r6]
   19b80:	cmp	r4, #0
   19b84:	beq	19ea8 <__assert_fail@plt+0x81a4>
   19b88:	mov	r0, sl
   19b8c:	mov	r1, r4
   19b90:	bl	11b00 <strchr@plt>
   19b94:	cmp	r0, #0
   19b98:	beq	19da8 <__assert_fail@plt+0x80a4>
   19b9c:	sub	r0, r4, #69	; 0x45
   19ba0:	mov	r7, #1
   19ba4:	mov	r5, #1024	; 0x400
   19ba8:	cmp	r0, #47	; 0x2f
   19bac:	bhi	19ca4 <__assert_fail@plt+0x7fa0>
   19bb0:	add	r1, pc, #0
   19bb4:	ldr	pc, [r1, r0, lsl #2]
   19bb8:	andeq	r9, r1, r8, ror ip
   19bbc:	andeq	r9, r1, r4, lsr #25
   19bc0:	andeq	r9, r1, r8, ror ip
   19bc4:	andeq	r9, r1, r4, lsr #25
   19bc8:	andeq	r9, r1, r4, lsr #25
   19bcc:	andeq	r9, r1, r4, lsr #25
   19bd0:	andeq	r9, r1, r8, ror ip
   19bd4:	andeq	r9, r1, r4, lsr #25
   19bd8:	andeq	r9, r1, r8, ror ip
   19bdc:	andeq	r9, r1, r4, lsr #25
   19be0:	andeq	r9, r1, r4, lsr #25
   19be4:	andeq	r9, r1, r8, ror ip
   19be8:	andeq	r9, r1, r4, lsr #25
   19bec:	andeq	r9, r1, r4, lsr #25
   19bf0:	andeq	r9, r1, r4, lsr #25
   19bf4:	andeq	r9, r1, r8, ror ip
   19bf8:	andeq	r9, r1, r4, lsr #25
   19bfc:	andeq	r9, r1, r4, lsr #25
   19c00:	andeq	r9, r1, r4, lsr #25
   19c04:	andeq	r9, r1, r4, lsr #25
   19c08:	andeq	r9, r1, r8, ror ip
   19c0c:	andeq	r9, r1, r8, ror ip
   19c10:	andeq	r9, r1, r4, lsr #25
   19c14:	andeq	r9, r1, r4, lsr #25
   19c18:	andeq	r9, r1, r4, lsr #25
   19c1c:	andeq	r9, r1, r4, lsr #25
   19c20:	andeq	r9, r1, r4, lsr #25
   19c24:	andeq	r9, r1, r4, lsr #25
   19c28:	andeq	r9, r1, r4, lsr #25
   19c2c:	andeq	r9, r1, r4, lsr #25
   19c30:	andeq	r9, r1, r4, lsr #25
   19c34:	andeq	r9, r1, r4, lsr #25
   19c38:	andeq	r9, r1, r4, lsr #25
   19c3c:	andeq	r9, r1, r4, lsr #25
   19c40:	andeq	r9, r1, r8, ror ip
   19c44:	andeq	r9, r1, r4, lsr #25
   19c48:	andeq	r9, r1, r4, lsr #25
   19c4c:	andeq	r9, r1, r4, lsr #25
   19c50:	andeq	r9, r1, r8, ror ip
   19c54:	andeq	r9, r1, r4, lsr #25
   19c58:	andeq	r9, r1, r8, ror ip
   19c5c:	andeq	r9, r1, r4, lsr #25
   19c60:	andeq	r9, r1, r4, lsr #25
   19c64:	andeq	r9, r1, r4, lsr #25
   19c68:	andeq	r9, r1, r4, lsr #25
   19c6c:	andeq	r9, r1, r4, lsr #25
   19c70:	andeq	r9, r1, r4, lsr #25
   19c74:	andeq	r9, r1, r8, ror ip
   19c78:	mov	r0, sl
   19c7c:	mov	r1, #48	; 0x30
   19c80:	bl	11b00 <strchr@plt>
   19c84:	cmp	r0, #0
   19c88:	beq	19ca4 <__assert_fail@plt+0x7fa0>
   19c8c:	ldrb	r0, [r6, #1]
   19c90:	cmp	r0, #66	; 0x42
   19c94:	cmpne	r0, #68	; 0x44
   19c98:	bne	19dc0 <__assert_fail@plt+0x80bc>
   19c9c:	mov	r7, #2
   19ca0:	mov	r5, #1000	; 0x3e8
   19ca4:	sub	r1, r4, #66	; 0x42
   19ca8:	cmp	r1, #53	; 0x35
   19cac:	bhi	19da8 <__assert_fail@plt+0x80a4>
   19cb0:	mov	r0, #0
   19cb4:	add	r2, pc, #0
   19cb8:	ldr	pc, [r2, r1, lsl #2]
   19cbc:	andeq	r9, r1, ip, lsr #28
   19cc0:	andeq	r9, r1, r8, lsr #27
   19cc4:	andeq	r9, r1, r8, lsr #27
   19cc8:	andeq	r9, r1, r8, lsr lr
   19ccc:	andeq	r9, r1, r8, lsr #27
   19cd0:	muleq	r1, r4, sp
   19cd4:	andeq	r9, r1, r8, lsr #27
   19cd8:	andeq	r9, r1, r8, lsr #27
   19cdc:	andeq	r9, r1, r8, lsr #27
   19ce0:	ldrdeq	r9, [r1], -ip
   19ce4:	andeq	r9, r1, r8, lsr #27
   19ce8:	strdeq	r9, [r1], -r0
   19cec:	andeq	r9, r1, r8, lsr #27
   19cf0:	andeq	r9, r1, r8, lsr #27
   19cf4:	andeq	r9, r1, ip, asr #28
   19cf8:	andeq	r9, r1, r8, lsr #27
   19cfc:	andeq	r9, r1, r8, lsr #27
   19d00:	andeq	r9, r1, r8, lsr #27
   19d04:	andeq	r9, r1, r4, lsl #28
   19d08:	andeq	r9, r1, r8, lsr #27
   19d0c:	andeq	r9, r1, r8, lsr #27
   19d10:	andeq	r9, r1, r8, lsr #27
   19d14:	andeq	r9, r1, r8, lsr #27
   19d18:	andeq	r9, r1, r0, ror #28
   19d1c:	andeq	r9, r1, r8, lsl lr
   19d20:	andeq	r9, r1, r8, lsr #27
   19d24:	andeq	r9, r1, r8, lsr #27
   19d28:	andeq	r9, r1, r8, lsr #27
   19d2c:	andeq	r9, r1, r8, lsr #27
   19d30:	andeq	r9, r1, r8, lsr #27
   19d34:	andeq	r9, r1, r8, lsr #27
   19d38:	andeq	r9, r1, r8, lsr #27
   19d3c:	andeq	r9, r1, r4, ror lr
   19d40:	andeq	r9, r1, ip, lsl #29
   19d44:	andeq	r9, r1, r8, lsr #27
   19d48:	andeq	r9, r1, r8, lsr #27
   19d4c:	andeq	r9, r1, r8, lsr #27
   19d50:	muleq	r1, r4, sp
   19d54:	andeq	r9, r1, r8, lsr #27
   19d58:	andeq	r9, r1, r8, lsr #27
   19d5c:	andeq	r9, r1, r8, lsr #27
   19d60:	ldrdeq	r9, [r1], -ip
   19d64:	andeq	r9, r1, r8, lsr #27
   19d68:	strdeq	r9, [r1], -r0
   19d6c:	andeq	r9, r1, r8, lsr #27
   19d70:	andeq	r9, r1, r8, lsr #27
   19d74:	andeq	r9, r1, r8, lsr #27
   19d78:	andeq	r9, r1, r8, lsr #27
   19d7c:	andeq	r9, r1, r8, lsr #27
   19d80:	andeq	r9, r1, r8, lsr #27
   19d84:	andeq	r9, r1, r4, lsl #28
   19d88:	andeq	r9, r1, r8, lsr #27
   19d8c:	andeq	r9, r1, r8, lsr #27
   19d90:	andeq	r9, r1, r0, lsl #29
   19d94:	add	r0, sp, #8
   19d98:	mov	r1, r5
   19d9c:	mov	r2, #3
   19da0:	bl	19f44 <__assert_fail@plt+0x8240>
   19da4:	b	19e8c <__assert_fail@plt+0x8188>
   19da8:	ldr	r0, [sp, #8]
   19dac:	ldr	r1, [sp, #12]
   19db0:	ldr	r2, [sp, #4]
   19db4:	strd	r0, [r2]
   19db8:	orr	r8, r8, #2
   19dbc:	b	19eb8 <__assert_fail@plt+0x81b4>
   19dc0:	cmp	r0, #105	; 0x69
   19dc4:	bne	19ca4 <__assert_fail@plt+0x7fa0>
   19dc8:	ldrb	r0, [r6, #2]
   19dcc:	mov	r7, #1
   19dd0:	cmp	r0, #66	; 0x42
   19dd4:	movweq	r7, #3
   19dd8:	b	19ca4 <__assert_fail@plt+0x7fa0>
   19ddc:	add	r0, sp, #8
   19de0:	mov	r1, r5
   19de4:	mov	r2, #1
   19de8:	bl	19f44 <__assert_fail@plt+0x8240>
   19dec:	b	19e8c <__assert_fail@plt+0x8188>
   19df0:	add	r0, sp, #8
   19df4:	mov	r1, r5
   19df8:	mov	r2, #2
   19dfc:	bl	19f44 <__assert_fail@plt+0x8240>
   19e00:	b	19e8c <__assert_fail@plt+0x8188>
   19e04:	add	r0, sp, #8
   19e08:	mov	r1, r5
   19e0c:	mov	r2, #4
   19e10:	bl	19f44 <__assert_fail@plt+0x8240>
   19e14:	b	19e8c <__assert_fail@plt+0x8188>
   19e18:	add	r0, sp, #8
   19e1c:	mov	r1, r5
   19e20:	mov	r2, #7
   19e24:	bl	19f44 <__assert_fail@plt+0x8240>
   19e28:	b	19e8c <__assert_fail@plt+0x8188>
   19e2c:	add	r0, sp, #8
   19e30:	mov	r1, #1024	; 0x400
   19e34:	b	19e88 <__assert_fail@plt+0x8184>
   19e38:	add	r0, sp, #8
   19e3c:	mov	r1, r5
   19e40:	mov	r2, #6
   19e44:	bl	19f44 <__assert_fail@plt+0x8240>
   19e48:	b	19e8c <__assert_fail@plt+0x8188>
   19e4c:	add	r0, sp, #8
   19e50:	mov	r1, r5
   19e54:	mov	r2, #5
   19e58:	bl	19f44 <__assert_fail@plt+0x8240>
   19e5c:	b	19e8c <__assert_fail@plt+0x8188>
   19e60:	add	r0, sp, #8
   19e64:	mov	r1, r5
   19e68:	mov	r2, #8
   19e6c:	bl	19f44 <__assert_fail@plt+0x8240>
   19e70:	b	19e8c <__assert_fail@plt+0x8188>
   19e74:	add	r0, sp, #8
   19e78:	mov	r1, #512	; 0x200
   19e7c:	b	19e88 <__assert_fail@plt+0x8184>
   19e80:	add	r0, sp, #8
   19e84:	mov	r1, #2
   19e88:	bl	19ee4 <__assert_fail@plt+0x81e0>
   19e8c:	ldr	r1, [r9]
   19e90:	add	r2, r1, r7
   19e94:	str	r2, [r9]
   19e98:	ldrb	r1, [r1, r7]
   19e9c:	orr	r8, r0, r8
   19ea0:	cmp	r1, #0
   19ea4:	orrne	r8, r8, #2
   19ea8:	ldr	r0, [sp, #8]
   19eac:	ldr	r1, [sp, #12]
   19eb0:	ldr	r2, [sp, #4]
   19eb4:	strd	r0, [r2]
   19eb8:	mov	r0, r8
   19ebc:	sub	sp, fp, #28
   19ec0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   19ec4:	movw	r0, #44180	; 0xac94
   19ec8:	movt	r0, #2
   19ecc:	movw	r1, #44218	; 0xacba
   19ed0:	movt	r1, #2
   19ed4:	movw	r3, #44230	; 0xacc6
   19ed8:	movt	r3, #2
   19edc:	mov	r2, #84	; 0x54
   19ee0:	bl	11d04 <__assert_fail@plt>
   19ee4:	push	{r4, r5, r6, r8, r9, sl, fp, lr}
   19ee8:	add	fp, sp, #24
   19eec:	mov	r4, r1
   19ef0:	mov	r5, r0
   19ef4:	asr	r6, r1, #31
   19ef8:	mvn	r0, #0
   19efc:	mvn	r1, #0
   19f00:	mov	r2, r4
   19f04:	mov	r3, r6
   19f08:	bl	29344 <__assert_fail@plt+0x17640>
   19f0c:	ldrd	r8, [r5]
   19f10:	mov	r2, #0
   19f14:	subs	r0, r0, r8
   19f18:	sbcs	r0, r1, r9
   19f1c:	movwcc	r2, #1
   19f20:	umull	r1, r0, r8, r4
   19f24:	mla	r0, r8, r6, r0
   19f28:	mla	r3, r9, r4, r0
   19f2c:	cmp	r2, #0
   19f30:	mvnne	r3, #0
   19f34:	mvnne	r1, #0
   19f38:	stm	r5, {r1, r3}
   19f3c:	mov	r0, r2
   19f40:	pop	{r4, r5, r6, r8, r9, sl, fp, pc}
   19f44:	push	{r4, r5, r6, r7, fp, lr}
   19f48:	add	fp, sp, #16
   19f4c:	cmp	r2, #0
   19f50:	moveq	r6, #0
   19f54:	moveq	r0, r6
   19f58:	popeq	{r4, r5, r6, r7, fp, pc}
   19f5c:	mov	r4, r2
   19f60:	mov	r5, r1
   19f64:	mov	r7, r0
   19f68:	mov	r6, #0
   19f6c:	mov	r0, r7
   19f70:	mov	r1, r5
   19f74:	bl	19ee4 <__assert_fail@plt+0x81e0>
   19f78:	orr	r6, r0, r6
   19f7c:	subs	r4, r4, #1
   19f80:	bne	19f6c <__assert_fail@plt+0x8268>
   19f84:	mov	r0, r6
   19f88:	pop	{r4, r5, r6, r7, fp, pc}
   19f8c:	clz	r2, r1
   19f90:	lsr	r2, r2, #5
   19f94:	clz	r3, r0
   19f98:	lsr	r3, r3, #5
   19f9c:	orrs	r2, r3, r2
   19fa0:	movwne	r1, #1
   19fa4:	movwne	r0, #1
   19fa8:	cmp	r1, #0
   19fac:	beq	19fdc <__assert_fail@plt+0x82d8>
   19fb0:	mvn	r2, #-2147483648	; 0x80000000
   19fb4:	udiv	r2, r2, r1
   19fb8:	cmp	r2, r0
   19fbc:	bcs	19fdc <__assert_fail@plt+0x82d8>
   19fc0:	push	{fp, lr}
   19fc4:	mov	fp, sp
   19fc8:	bl	11b24 <__errno_location@plt>
   19fcc:	mov	r1, #12
   19fd0:	str	r1, [r0]
   19fd4:	mov	r0, #0
   19fd8:	pop	{fp, pc}
   19fdc:	b	11860 <calloc@plt>
   19fe0:	sub	sp, sp, #8
   19fe4:	push	{fp, lr}
   19fe8:	mov	fp, sp
   19fec:	sub	sp, sp, #8
   19ff0:	str	r3, [fp, #12]
   19ff4:	str	r2, [fp, #8]
   19ff8:	add	r2, fp, #8
   19ffc:	str	r2, [sp, #4]
   1a000:	cmp	r1, #11
   1a004:	bhi	1a044 <__assert_fail@plt+0x8340>
   1a008:	mov	r2, #1
   1a00c:	movw	r3, #1300	; 0x514
   1a010:	tst	r3, r2, lsl r1
   1a014:	bne	1a094 <__assert_fail@plt+0x8390>
   1a018:	movw	r3, #2570	; 0xa0a
   1a01c:	tst	r3, r2, lsl r1
   1a020:	bne	1a06c <__assert_fail@plt+0x8368>
   1a024:	cmp	r1, #0
   1a028:	bne	1a044 <__assert_fail@plt+0x8340>
   1a02c:	ldr	r1, [sp, #4]
   1a030:	add	r2, r1, #4
   1a034:	str	r2, [sp, #4]
   1a038:	ldr	r1, [r1]
   1a03c:	bl	1a0b8 <__assert_fail@plt+0x83b4>
   1a040:	b	1a0a8 <__assert_fail@plt+0x83a4>
   1a044:	sub	r2, r1, #1024	; 0x400
   1a048:	cmp	r2, #10
   1a04c:	bhi	1a094 <__assert_fail@plt+0x8390>
   1a050:	mov	ip, #1
   1a054:	movw	r3, #645	; 0x285
   1a058:	tst	r3, ip, lsl r2
   1a05c:	bne	1a094 <__assert_fail@plt+0x8390>
   1a060:	movw	r3, #1282	; 0x502
   1a064:	tst	r3, ip, lsl r2
   1a068:	beq	1a074 <__assert_fail@plt+0x8370>
   1a06c:	bl	11be4 <fcntl64@plt>
   1a070:	b	1a0a8 <__assert_fail@plt+0x83a4>
   1a074:	cmp	r2, #6
   1a078:	bne	1a094 <__assert_fail@plt+0x8390>
   1a07c:	ldr	r1, [sp, #4]
   1a080:	add	r2, r1, #4
   1a084:	str	r2, [sp, #4]
   1a088:	ldr	r1, [r1]
   1a08c:	bl	1a0c4 <__assert_fail@plt+0x83c0>
   1a090:	b	1a0a8 <__assert_fail@plt+0x83a4>
   1a094:	ldr	r2, [sp, #4]
   1a098:	add	r3, r2, #4
   1a09c:	str	r3, [sp, #4]
   1a0a0:	ldr	r2, [r2]
   1a0a4:	bl	11be4 <fcntl64@plt>
   1a0a8:	mov	sp, fp
   1a0ac:	pop	{fp, lr}
   1a0b0:	add	sp, sp, #8
   1a0b4:	bx	lr
   1a0b8:	mov	r2, r1
   1a0bc:	mov	r1, #0
   1a0c0:	b	11be4 <fcntl64@plt>
   1a0c4:	push	{r4, r5, r6, r7, fp, lr}
   1a0c8:	add	fp, sp, #16
   1a0cc:	mov	r5, r1
   1a0d0:	mov	r6, r0
   1a0d4:	movw	r7, #50128	; 0xc3d0
   1a0d8:	movt	r7, #3
   1a0dc:	ldr	r0, [r7]
   1a0e0:	cmp	r0, #0
   1a0e4:	blt	1a148 <__assert_fail@plt+0x8444>
   1a0e8:	mov	r0, r6
   1a0ec:	movw	r1, #1030	; 0x406
   1a0f0:	mov	r2, r5
   1a0f4:	bl	11be4 <fcntl64@plt>
   1a0f8:	mov	r4, r0
   1a0fc:	cmn	r0, #1
   1a100:	bgt	1a134 <__assert_fail@plt+0x8430>
   1a104:	bl	11b24 <__errno_location@plt>
   1a108:	ldr	r0, [r0]
   1a10c:	cmp	r0, #22
   1a110:	bne	1a134 <__assert_fail@plt+0x8430>
   1a114:	mov	r0, r6
   1a118:	mov	r1, r5
   1a11c:	bl	1a0b8 <__assert_fail@plt+0x83b4>
   1a120:	mov	r4, r0
   1a124:	cmp	r0, #0
   1a128:	blt	1a198 <__assert_fail@plt+0x8494>
   1a12c:	mvn	r0, #0
   1a130:	b	1a138 <__assert_fail@plt+0x8434>
   1a134:	mov	r0, #1
   1a138:	str	r0, [r7]
   1a13c:	cmp	r4, #0
   1a140:	bge	1a160 <__assert_fail@plt+0x845c>
   1a144:	b	1a198 <__assert_fail@plt+0x8494>
   1a148:	mov	r0, r6
   1a14c:	mov	r1, r5
   1a150:	bl	1a0b8 <__assert_fail@plt+0x83b4>
   1a154:	mov	r4, r0
   1a158:	cmp	r4, #0
   1a15c:	blt	1a198 <__assert_fail@plt+0x8494>
   1a160:	ldr	r0, [r7]
   1a164:	cmn	r0, #1
   1a168:	bne	1a198 <__assert_fail@plt+0x8494>
   1a16c:	mov	r0, r4
   1a170:	mov	r1, #1
   1a174:	bl	11be4 <fcntl64@plt>
   1a178:	cmp	r0, #0
   1a17c:	blt	1a1a0 <__assert_fail@plt+0x849c>
   1a180:	orr	r2, r0, #1
   1a184:	mov	r0, r4
   1a188:	mov	r1, #2
   1a18c:	bl	11be4 <fcntl64@plt>
   1a190:	cmn	r0, #1
   1a194:	beq	1a1a0 <__assert_fail@plt+0x849c>
   1a198:	mov	r0, r4
   1a19c:	pop	{r4, r5, r6, r7, fp, pc}
   1a1a0:	bl	11b24 <__errno_location@plt>
   1a1a4:	mov	r5, r0
   1a1a8:	ldr	r6, [r0]
   1a1ac:	mov	r0, r4
   1a1b0:	bl	11ce0 <close@plt>
   1a1b4:	str	r6, [r5]
   1a1b8:	mvn	r4, #0
   1a1bc:	mov	r0, r4
   1a1c0:	pop	{r4, r5, r6, r7, fp, pc}
   1a1c4:	push	{r4, sl, fp, lr}
   1a1c8:	add	fp, sp, #8
   1a1cc:	mov	r4, r0
   1a1d0:	cmp	r0, #0
   1a1d4:	beq	1a1ec <__assert_fail@plt+0x84e8>
   1a1d8:	mov	r0, r4
   1a1dc:	bl	11a88 <__freading@plt>
   1a1e0:	cmp	r0, #0
   1a1e4:	movne	r0, r4
   1a1e8:	blne	1a1f8 <__assert_fail@plt+0x84f4>
   1a1ec:	mov	r0, r4
   1a1f0:	pop	{r4, sl, fp, lr}
   1a1f4:	b	118c0 <fflush@plt>
   1a1f8:	ldrb	r1, [r0, #1]
   1a1fc:	tst	r1, #1
   1a200:	bxeq	lr
   1a204:	push	{fp, lr}
   1a208:	mov	fp, sp
   1a20c:	sub	sp, sp, #8
   1a210:	mov	r1, #1
   1a214:	str	r1, [sp]
   1a218:	mov	r2, #0
   1a21c:	mov	r3, #0
   1a220:	bl	1a254 <__assert_fail@plt+0x8550>
   1a224:	mov	sp, fp
   1a228:	pop	{fp, pc}
   1a22c:	push	{r4, r5, r6, sl, fp, lr}
   1a230:	add	fp, sp, #16
   1a234:	mov	r4, r0
   1a238:	bl	11b24 <__errno_location@plt>
   1a23c:	mov	r5, r0
   1a240:	ldr	r6, [r0]
   1a244:	mov	r0, r4
   1a248:	bl	118f0 <free@plt>
   1a24c:	str	r6, [r5]
   1a250:	pop	{r4, r5, r6, sl, fp, pc}
   1a254:	push	{r4, r5, r6, r7, fp, lr}
   1a258:	add	fp, sp, #16
   1a25c:	sub	sp, sp, #8
   1a260:	mov	r5, r3
   1a264:	mov	r6, r2
   1a268:	mov	r4, r0
   1a26c:	ldr	r0, [r0, #4]
   1a270:	ldr	r1, [r4, #8]
   1a274:	cmp	r1, r0
   1a278:	bne	1a294 <__assert_fail@plt+0x8590>
   1a27c:	ldrd	r0, [r4, #16]
   1a280:	cmp	r1, r0
   1a284:	bne	1a294 <__assert_fail@plt+0x8590>
   1a288:	ldr	r0, [r4, #36]	; 0x24
   1a28c:	cmp	r0, #0
   1a290:	beq	1a2ac <__assert_fail@plt+0x85a8>
   1a294:	mov	r0, r4
   1a298:	mov	r2, r6
   1a29c:	mov	r3, r5
   1a2a0:	sub	sp, fp, #16
   1a2a4:	pop	{r4, r5, r6, r7, fp, lr}
   1a2a8:	b	11bd8 <fseeko64@plt>
   1a2ac:	ldr	r7, [fp, #8]
   1a2b0:	mov	r0, r4
   1a2b4:	bl	11b90 <fileno@plt>
   1a2b8:	str	r7, [sp]
   1a2bc:	mov	r2, r6
   1a2c0:	mov	r3, r5
   1a2c4:	bl	119ec <lseek64@plt>
   1a2c8:	and	r2, r0, r1
   1a2cc:	cmn	r2, #1
   1a2d0:	mvneq	r0, #0
   1a2d4:	subeq	sp, fp, #16
   1a2d8:	popeq	{r4, r5, r6, r7, fp, pc}
   1a2dc:	strd	r0, [r4, #80]	; 0x50
   1a2e0:	ldr	r0, [r4]
   1a2e4:	bic	r0, r0, #16
   1a2e8:	str	r0, [r4]
   1a2ec:	mov	r0, #0
   1a2f0:	sub	sp, fp, #16
   1a2f4:	pop	{r4, r5, r6, r7, fp, pc}
   1a2f8:	cmp	r0, #0
   1a2fc:	movweq	r0, #1
   1a300:	cmn	r0, #1
   1a304:	ble	1a30c <__assert_fail@plt+0x8608>
   1a308:	b	11a64 <malloc@plt>
   1a30c:	push	{fp, lr}
   1a310:	mov	fp, sp
   1a314:	bl	11b24 <__errno_location@plt>
   1a318:	mov	r1, #12
   1a31c:	str	r1, [r0]
   1a320:	mov	r0, #0
   1a324:	pop	{fp, pc}
   1a328:	push	{r4, r5, r6, r7, fp, lr}
   1a32c:	add	fp, sp, #16
   1a330:	sub	sp, sp, #8
   1a334:	mov	r7, r2
   1a338:	mov	r4, r1
   1a33c:	add	r5, sp, #4
   1a340:	cmp	r0, #0
   1a344:	movne	r5, r0
   1a348:	mov	r0, r5
   1a34c:	bl	11a1c <mbrtowc@plt>
   1a350:	mov	r6, r0
   1a354:	cmp	r7, #0
   1a358:	beq	1a37c <__assert_fail@plt+0x8678>
   1a35c:	cmn	r6, #2
   1a360:	bcc	1a37c <__assert_fail@plt+0x8678>
   1a364:	mov	r0, #0
   1a368:	bl	28ca8 <__assert_fail@plt+0x16fa4>
   1a36c:	cmp	r0, #0
   1a370:	ldrbeq	r0, [r4]
   1a374:	streq	r0, [r5]
   1a378:	moveq	r6, #1
   1a37c:	mov	r0, r6
   1a380:	sub	sp, fp, #16
   1a384:	pop	{r4, r5, r6, r7, fp, pc}
   1a388:	push	{fp, lr}
   1a38c:	mov	fp, sp
   1a390:	cmp	r0, #0
   1a394:	beq	1a3b0 <__assert_fail@plt+0x86ac>
   1a398:	cmp	r1, #0
   1a39c:	beq	1a3bc <__assert_fail@plt+0x86b8>
   1a3a0:	cmn	r1, #1
   1a3a4:	ble	1a3c8 <__assert_fail@plt+0x86c4>
   1a3a8:	pop	{fp, lr}
   1a3ac:	b	1198c <realloc@plt>
   1a3b0:	mov	r0, r1
   1a3b4:	pop	{fp, lr}
   1a3b8:	b	1a2f8 <__assert_fail@plt+0x85f4>
   1a3bc:	bl	1a22c <__assert_fail@plt+0x8528>
   1a3c0:	mov	r0, #0
   1a3c4:	pop	{fp, pc}
   1a3c8:	bl	11b24 <__errno_location@plt>
   1a3cc:	mov	r1, #12
   1a3d0:	str	r1, [r0]
   1a3d4:	mov	r0, #0
   1a3d8:	pop	{fp, pc}
   1a3dc:	cmp	r2, #0
   1a3e0:	beq	1a410 <__assert_fail@plt+0x870c>
   1a3e4:	mvn	r3, #0
   1a3e8:	udiv	r3, r3, r2
   1a3ec:	cmp	r3, r1
   1a3f0:	bcs	1a410 <__assert_fail@plt+0x870c>
   1a3f4:	push	{fp, lr}
   1a3f8:	mov	fp, sp
   1a3fc:	bl	11b24 <__errno_location@plt>
   1a400:	mov	r1, #12
   1a404:	str	r1, [r0]
   1a408:	mov	r0, #0
   1a40c:	pop	{fp, pc}
   1a410:	mul	r1, r2, r1
   1a414:	b	1a388 <__assert_fail@plt+0x8684>
   1a418:	push	{fp, lr}
   1a41c:	mov	fp, sp
   1a420:	mov	ip, r1
   1a424:	mov	lr, r0
   1a428:	movw	r0, #50132	; 0xc3d4
   1a42c:	movt	r0, #3
   1a430:	ldr	r3, [r0]
   1a434:	mov	r0, #16
   1a438:	and	r0, r0, r3, lsr #21
   1a43c:	ldrb	r1, [r2, #28]
   1a440:	and	r1, r1, #111	; 0x6f
   1a444:	orr	r0, r1, r0
   1a448:	orr	r0, r0, #128	; 0x80
   1a44c:	strb	r0, [r2, #28]
   1a450:	mov	r0, r2
   1a454:	mov	r1, lr
   1a458:	mov	r2, ip
   1a45c:	bl	1a494 <__assert_fail@plt+0x8790>
   1a460:	cmp	r0, #0
   1a464:	moveq	r0, #0
   1a468:	popeq	{fp, pc}
   1a46c:	movw	r1, #44696	; 0xae98
   1a470:	movt	r1, #2
   1a474:	ldr	r0, [r1, r0, lsl #2]
   1a478:	movw	r1, #44312	; 0xad18
   1a47c:	movt	r1, #2
   1a480:	add	r1, r1, r0
   1a484:	mov	r0, #0
   1a488:	mov	r2, #5
   1a48c:	pop	{fp, lr}
   1a490:	b	11980 <dcgettext@plt>
   1a494:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   1a498:	add	fp, sp, #24
   1a49c:	sub	sp, sp, #96	; 0x60
   1a4a0:	mov	r6, r3
   1a4a4:	mov	r7, r2
   1a4a8:	mov	r8, r1
   1a4ac:	mov	r4, r0
   1a4b0:	mov	r0, #0
   1a4b4:	str	r0, [fp, #-28]	; 0xffffffe4
   1a4b8:	str	r0, [r4, #8]
   1a4bc:	str	r3, [r4, #12]
   1a4c0:	str	r0, [r4, #24]
   1a4c4:	ldrb	r0, [r4, #28]
   1a4c8:	and	r0, r0, #144	; 0x90
   1a4cc:	strb	r0, [r4, #28]
   1a4d0:	ldr	r5, [r4]
   1a4d4:	ldr	r0, [r4, #4]
   1a4d8:	cmp	r0, #159	; 0x9f
   1a4dc:	bls	1a630 <__assert_fail@plt+0x892c>
   1a4e0:	mov	r0, #160	; 0xa0
   1a4e4:	str	r0, [r4, #8]
   1a4e8:	mov	r0, r5
   1a4ec:	mov	r1, r7
   1a4f0:	bl	1bba8 <__assert_fail@plt+0x9ea4>
   1a4f4:	str	r0, [fp, #-28]	; 0xffffffe4
   1a4f8:	cmp	r0, #0
   1a4fc:	bne	1a530 <__assert_fail@plt+0x882c>
   1a500:	movw	r1, #0
   1a504:	movt	r1, #0
   1a508:	movw	r2, #0
   1a50c:	movt	r2, #0
   1a510:	orrs	r1, r2, r1
   1a514:	beq	1a530 <__assert_fail@plt+0x882c>
   1a518:	add	r0, r5, #136	; 0x88
   1a51c:	mov	r1, #0
   1a520:	bl	11944 <pthread_mutex_init@plt>
   1a524:	cmp	r0, #0
   1a528:	bne	1a65c <__assert_fail@plt+0x8958>
   1a52c:	ldr	r0, [fp, #-28]	; 0xffffffe4
   1a530:	cmp	r0, #0
   1a534:	bne	1a664 <__assert_fail@plt+0x8960>
   1a538:	ldr	r3, [r4, #20]
   1a53c:	str	r5, [sp, #4]
   1a540:	ubfx	r0, r6, #22, #1
   1a544:	str	r0, [sp]
   1a548:	add	r0, sp, #8
   1a54c:	mov	r1, r8
   1a550:	mov	r2, r7
   1a554:	bl	1bd54 <__assert_fail@plt+0xa050>
   1a558:	str	r0, [fp, #-28]	; 0xffffffe4
   1a55c:	cmp	r0, #0
   1a560:	bne	1a5fc <__assert_fail@plt+0x88f8>
   1a564:	mov	r0, #0
   1a568:	str	r0, [r4, #24]
   1a56c:	add	r0, sp, #8
   1a570:	sub	r3, fp, #28
   1a574:	mov	r1, r4
   1a578:	mov	r2, r6
   1a57c:	bl	1bf28 <__assert_fail@plt+0xa224>
   1a580:	str	r0, [r5, #52]	; 0x34
   1a584:	cmp	r0, #0
   1a588:	beq	1a5fc <__assert_fail@plt+0x88f8>
   1a58c:	mov	r0, r4
   1a590:	bl	1bffc <__assert_fail@plt+0xa2f8>
   1a594:	str	r0, [fp, #-28]	; 0xffffffe4
   1a598:	cmp	r0, #0
   1a59c:	bne	1a5fc <__assert_fail@plt+0x88f8>
   1a5a0:	ands	r0, r6, #4194304	; 0x400000
   1a5a4:	bne	1a5c8 <__assert_fail@plt+0x88c4>
   1a5a8:	ldrb	r0, [r5, #88]	; 0x58
   1a5ac:	ands	r0, r0, #4
   1a5b0:	beq	1a5c8 <__assert_fail@plt+0x88c4>
   1a5b4:	ldr	r0, [r4, #20]
   1a5b8:	cmp	r0, #0
   1a5bc:	bne	1a5c8 <__assert_fail@plt+0x88c4>
   1a5c0:	mov	r0, r5
   1a5c4:	bl	1c218 <__assert_fail@plt+0xa514>
   1a5c8:	mov	r0, r5
   1a5cc:	bl	1c3b4 <__assert_fail@plt+0xa6b0>
   1a5d0:	str	r0, [fp, #-28]	; 0xffffffe4
   1a5d4:	mov	r0, r4
   1a5d8:	bl	1bea4 <__assert_fail@plt+0xa1a0>
   1a5dc:	add	r0, sp, #8
   1a5e0:	bl	1bef4 <__assert_fail@plt+0xa1f0>
   1a5e4:	ldr	r0, [fp, #-28]	; 0xffffffe4
   1a5e8:	cmp	r0, #0
   1a5ec:	bne	1a60c <__assert_fail@plt+0x8908>
   1a5f0:	ldr	r0, [fp, #-28]	; 0xffffffe4
   1a5f4:	sub	sp, fp, #24
   1a5f8:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   1a5fc:	mov	r0, r4
   1a600:	bl	1bea4 <__assert_fail@plt+0xa1a0>
   1a604:	add	r0, sp, #8
   1a608:	bl	1bef4 <__assert_fail@plt+0xa1f0>
   1a60c:	movw	r0, #0
   1a610:	movt	r0, #0
   1a614:	movw	r1, #0
   1a618:	movt	r1, #0
   1a61c:	orrs	r0, r1, r0
   1a620:	beq	1a664 <__assert_fail@plt+0x8960>
   1a624:	add	r0, r5, #136	; 0x88
   1a628:	bl	118b4 <pthread_mutex_destroy@plt>
   1a62c:	b	1a664 <__assert_fail@plt+0x8960>
   1a630:	mov	r9, #160	; 0xa0
   1a634:	mov	r0, r5
   1a638:	mov	r1, #160	; 0xa0
   1a63c:	bl	1a388 <__assert_fail@plt+0x8684>
   1a640:	cmp	r0, #0
   1a644:	moveq	r0, #12
   1a648:	subeq	sp, fp, #24
   1a64c:	popeq	{r4, r5, r6, r7, r8, r9, fp, pc}
   1a650:	mov	r5, r0
   1a654:	stm	r4, {r0, r9}
   1a658:	b	1a4e0 <__assert_fail@plt+0x87dc>
   1a65c:	mov	r0, #12
   1a660:	str	r0, [fp, #-28]	; 0xffffffe4
   1a664:	mov	r0, r5
   1a668:	bl	1acc8 <__assert_fail@plt+0x8fc4>
   1a66c:	mov	r0, #0
   1a670:	str	r0, [r4]
   1a674:	str	r0, [r4, #4]
   1a678:	b	1a5f0 <__assert_fail@plt+0x88ec>
   1a67c:	movw	r2, #50132	; 0xc3d4
   1a680:	movt	r2, #3
   1a684:	ldr	r1, [r2]
   1a688:	str	r0, [r2]
   1a68c:	mov	r0, r1
   1a690:	bx	lr
   1a694:	push	{r4, r5, r6, sl, fp, lr}
   1a698:	add	fp, sp, #16
   1a69c:	mov	r4, r0
   1a6a0:	ldr	r6, [r0]
   1a6a4:	ldr	r5, [r0, #16]
   1a6a8:	mov	r0, r5
   1a6ac:	mov	r1, #0
   1a6b0:	mov	r2, #256	; 0x100
   1a6b4:	bl	11b60 <memset@plt>
   1a6b8:	ldr	r1, [r6, #36]	; 0x24
   1a6bc:	mov	r0, r4
   1a6c0:	mov	r2, r5
   1a6c4:	bl	1a730 <__assert_fail@plt+0x8a2c>
   1a6c8:	ldr	r0, [r6, #36]	; 0x24
   1a6cc:	ldr	r1, [r6, #40]	; 0x28
   1a6d0:	cmp	r0, r1
   1a6d4:	beq	1a6e4 <__assert_fail@plt+0x89e0>
   1a6d8:	mov	r0, r4
   1a6dc:	mov	r2, r5
   1a6e0:	bl	1a730 <__assert_fail@plt+0x8a2c>
   1a6e4:	ldr	r0, [r6, #36]	; 0x24
   1a6e8:	ldr	r1, [r6, #44]	; 0x2c
   1a6ec:	cmp	r0, r1
   1a6f0:	beq	1a700 <__assert_fail@plt+0x89fc>
   1a6f4:	mov	r0, r4
   1a6f8:	mov	r2, r5
   1a6fc:	bl	1a730 <__assert_fail@plt+0x8a2c>
   1a700:	ldr	r0, [r6, #36]	; 0x24
   1a704:	ldr	r1, [r6, #48]	; 0x30
   1a708:	cmp	r0, r1
   1a70c:	beq	1a71c <__assert_fail@plt+0x8a18>
   1a710:	mov	r0, r4
   1a714:	mov	r2, r5
   1a718:	bl	1a730 <__assert_fail@plt+0x8a2c>
   1a71c:	ldrb	r0, [r4, #28]
   1a720:	orr	r0, r0, #8
   1a724:	strb	r0, [r4, #28]
   1a728:	mov	r0, #0
   1a72c:	pop	{r4, r5, r6, sl, fp, pc}
   1a730:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1a734:	add	fp, sp, #28
   1a738:	sub	sp, sp, #308	; 0x134
   1a73c:	str	r2, [sp, #28]
   1a740:	str	r0, [sp, #16]
   1a744:	ldr	r8, [r0]
   1a748:	ldr	r0, [r8, #92]	; 0x5c
   1a74c:	mov	sl, #0
   1a750:	cmp	r0, #1
   1a754:	ldreq	r0, [sp, #16]
   1a758:	ldrbeq	r0, [r0, #14]
   1a75c:	ubfxeq	sl, r0, #6, #1
   1a760:	ldr	r0, [r1, #8]
   1a764:	cmp	r0, #1
   1a768:	blt	1aaa4 <__assert_fail@plt+0x8da0>
   1a76c:	add	r0, sp, #32
   1a770:	add	r0, r0, #1
   1a774:	str	r0, [sp]
   1a778:	mov	r4, #1
   1a77c:	movw	r0, #1
   1a780:	movt	r0, #32
   1a784:	add	r0, r0, #254	; 0xfe
   1a788:	str	r0, [sp, #4]
   1a78c:	mov	r2, #0
   1a790:	str	r1, [sp, #8]
   1a794:	str	r8, [sp, #20]
   1a798:	ldr	r0, [r1, #12]
   1a79c:	str	r2, [sp, #12]
   1a7a0:	ldr	r9, [r0, r2, lsl #2]
   1a7a4:	ldr	r0, [r8]
   1a7a8:	add	r1, r0, r9, lsl #3
   1a7ac:	ldrb	r5, [r1, #4]
   1a7b0:	cmp	r5, #1
   1a7b4:	beq	1a83c <__assert_fail@plt+0x8b38>
   1a7b8:	cmp	r5, #6
   1a7bc:	beq	1a93c <__assert_fail@plt+0x8c38>
   1a7c0:	cmp	r5, #3
   1a7c4:	bne	1a9c0 <__assert_fail@plt+0x8cbc>
   1a7c8:	mov	r7, #0
   1a7cc:	ldr	r5, [sp, #28]
   1a7d0:	mov	r6, #0
   1a7d4:	str	r9, [sp, #24]
   1a7d8:	ldr	r0, [r8]
   1a7dc:	ldr	r0, [r0, r9, lsl #3]
   1a7e0:	ldr	r9, [r0, r6, lsl #2]
   1a7e4:	mov	r8, #0
   1a7e8:	b	1a800 <__assert_fail@plt+0x8afc>
   1a7ec:	add	r0, r7, r8
   1a7f0:	bl	11938 <tolower@plt>
   1a7f4:	ldr	r1, [sp, #28]
   1a7f8:	strb	r4, [r1, r0]
   1a7fc:	b	1a810 <__assert_fail@plt+0x8b0c>
   1a800:	tst	r9, r4, lsl r8
   1a804:	strbne	r4, [r5, r8]
   1a808:	cmpne	sl, #0
   1a80c:	bne	1a7ec <__assert_fail@plt+0x8ae8>
   1a810:	add	r8, r8, #1
   1a814:	cmp	r8, #32
   1a818:	bne	1a800 <__assert_fail@plt+0x8afc>
   1a81c:	add	r5, r5, #32
   1a820:	add	r6, r6, #1
   1a824:	add	r7, r7, #32
   1a828:	cmp	r6, #8
   1a82c:	ldr	r8, [sp, #20]
   1a830:	ldr	r9, [sp, #24]
   1a834:	bne	1a7d8 <__assert_fail@plt+0x8ad4>
   1a838:	b	1aa8c <__assert_fail@plt+0x8d88>
   1a83c:	ldrb	r0, [r0, r9, lsl #3]
   1a840:	ldr	r1, [sp, #28]
   1a844:	strb	r4, [r1, r0]
   1a848:	cmp	sl, #0
   1a84c:	beq	1a85c <__assert_fail@plt+0x8b58>
   1a850:	bl	11938 <tolower@plt>
   1a854:	ldr	r1, [sp, #28]
   1a858:	strb	r4, [r1, r0]
   1a85c:	ldr	r0, [sp, #16]
   1a860:	ldrb	r0, [r0, #14]
   1a864:	tst	r0, #64	; 0x40
   1a868:	beq	1aa8c <__assert_fail@plt+0x8d88>
   1a86c:	ldr	r0, [r8, #92]	; 0x5c
   1a870:	cmp	r0, #2
   1a874:	blt	1aa8c <__assert_fail@plt+0x8d88>
   1a878:	ldr	r0, [r8]
   1a87c:	ldrb	r0, [r0, r9, lsl #3]
   1a880:	strb	r0, [sp, #32]
   1a884:	ldr	r0, [r8, #8]
   1a888:	add	r1, r9, #1
   1a88c:	cmp	r1, r0
   1a890:	ldr	r0, [sp]
   1a894:	add	r5, sp, #32
   1a898:	bcs	1a8e4 <__assert_fail@plt+0x8be0>
   1a89c:	ldr	r0, [sp]
   1a8a0:	ldr	r1, [r8]
   1a8a4:	add	r1, r1, r9, lsl #3
   1a8a8:	ldr	r2, [r1, #12]
   1a8ac:	ldr	r3, [sp, #4]
   1a8b0:	and	r2, r2, r3
   1a8b4:	movw	r3, #1
   1a8b8:	movt	r3, #32
   1a8bc:	cmp	r2, r3
   1a8c0:	bne	1a8e4 <__assert_fail@plt+0x8be0>
   1a8c4:	ldrb	r1, [r1, #8]
   1a8c8:	strb	r1, [r0], #1
   1a8cc:	add	r1, r9, #1
   1a8d0:	ldr	r2, [r8, #8]
   1a8d4:	add	r3, r9, #2
   1a8d8:	cmp	r3, r2
   1a8dc:	mov	r9, r1
   1a8e0:	bcc	1a8a0 <__assert_fail@plt+0x8b9c>
   1a8e4:	mov	r1, #0
   1a8e8:	str	r1, [fp, #-44]	; 0xffffffd4
   1a8ec:	str	r1, [fp, #-48]	; 0xffffffd0
   1a8f0:	sub	r6, r0, r5
   1a8f4:	sub	r0, fp, #36	; 0x24
   1a8f8:	mov	r1, r5
   1a8fc:	mov	r2, r6
   1a900:	sub	r3, fp, #48	; 0x30
   1a904:	bl	1a328 <__assert_fail@plt+0x8624>
   1a908:	cmp	r0, r6
   1a90c:	bne	1aa8c <__assert_fail@plt+0x8d88>
   1a910:	ldr	r0, [fp, #-36]	; 0xffffffdc
   1a914:	bl	11950 <towlower@plt>
   1a918:	mov	r1, r0
   1a91c:	mov	r0, r5
   1a920:	sub	r2, fp, #48	; 0x30
   1a924:	bl	11884 <wcrtomb@plt>
   1a928:	cmn	r0, #1
   1a92c:	ldrbne	r0, [sp, #32]
   1a930:	ldrne	r1, [sp, #28]
   1a934:	strbne	r4, [r1, r0]
   1a938:	b	1aa8c <__assert_fail@plt+0x8d88>
   1a93c:	ldr	r6, [r0, r9, lsl #3]
   1a940:	ldr	r0, [r8, #92]	; 0x5c
   1a944:	cmp	r0, #2
   1a948:	blt	1a9d8 <__assert_fail@plt+0x8cd4>
   1a94c:	ldr	r0, [r6, #36]	; 0x24
   1a950:	cmp	r0, #0
   1a954:	bne	1a96c <__assert_fail@plt+0x8c68>
   1a958:	ldrb	r0, [r6, #16]
   1a95c:	tst	r0, #1
   1a960:	ldreq	r0, [r6, #32]
   1a964:	cmpeq	r0, #0
   1a968:	beq	1a9d8 <__assert_fail@plt+0x8cd4>
   1a96c:	mov	r0, #0
   1a970:	strb	r0, [fp, #-48]	; 0xffffffd0
   1a974:	add	r5, sp, #32
   1a978:	mov	r0, #0
   1a97c:	str	r0, [sp, #36]	; 0x24
   1a980:	str	r0, [sp, #32]
   1a984:	mov	r0, #0
   1a988:	sub	r1, fp, #48	; 0x30
   1a98c:	mov	r2, #1
   1a990:	mov	r3, r5
   1a994:	bl	1a328 <__assert_fail@plt+0x8624>
   1a998:	cmn	r0, #2
   1a99c:	ldrbeq	r0, [fp, #-48]	; 0xffffffd0
   1a9a0:	ldreq	r1, [sp, #28]
   1a9a4:	strbeq	r4, [r1, r0]
   1a9a8:	ldrb	r0, [fp, #-48]	; 0xffffffd0
   1a9ac:	add	r0, r0, #1
   1a9b0:	strb	r0, [fp, #-48]	; 0xffffffd0
   1a9b4:	tst	r0, #255	; 0xff
   1a9b8:	bne	1a978 <__assert_fail@plt+0x8c74>
   1a9bc:	b	1aa8c <__assert_fail@plt+0x8d88>
   1a9c0:	cmp	r5, #7
   1a9c4:	bhi	1aa8c <__assert_fail@plt+0x8d88>
   1a9c8:	mov	r0, #164	; 0xa4
   1a9cc:	tst	r0, r4, lsl r5
   1a9d0:	beq	1aa8c <__assert_fail@plt+0x8d88>
   1a9d4:	b	1aaac <__assert_fail@plt+0x8da8>
   1a9d8:	ldr	r0, [r6, #20]
   1a9dc:	cmp	r0, #1
   1a9e0:	blt	1aa8c <__assert_fail@plt+0x8d88>
   1a9e4:	mov	r9, #0
   1a9e8:	mov	r0, #0
   1a9ec:	str	r0, [fp, #-44]	; 0xffffffd4
   1a9f0:	str	r0, [fp, #-48]	; 0xffffffd0
   1a9f4:	ldr	r0, [r6]
   1a9f8:	ldr	r1, [r0, r9, lsl #2]
   1a9fc:	add	r5, sp, #32
   1aa00:	mov	r0, r5
   1aa04:	sub	r2, fp, #48	; 0x30
   1aa08:	bl	11884 <wcrtomb@plt>
   1aa0c:	cmn	r0, #1
   1aa10:	beq	1aa34 <__assert_fail@plt+0x8d30>
   1aa14:	ldrb	r0, [sp, #32]
   1aa18:	ldr	r1, [sp, #28]
   1aa1c:	strb	r4, [r1, r0]
   1aa20:	cmp	sl, #0
   1aa24:	beq	1aa34 <__assert_fail@plt+0x8d30>
   1aa28:	bl	11938 <tolower@plt>
   1aa2c:	ldr	r1, [sp, #28]
   1aa30:	strb	r4, [r1, r0]
   1aa34:	ldr	r0, [sp, #16]
   1aa38:	ldrb	r0, [r0, #14]
   1aa3c:	tst	r0, #64	; 0x40
   1aa40:	beq	1aa7c <__assert_fail@plt+0x8d78>
   1aa44:	ldr	r0, [r8, #92]	; 0x5c
   1aa48:	cmp	r0, #2
   1aa4c:	blt	1aa7c <__assert_fail@plt+0x8d78>
   1aa50:	ldr	r0, [r6]
   1aa54:	ldr	r0, [r0, r9, lsl #2]
   1aa58:	bl	11950 <towlower@plt>
   1aa5c:	mov	r1, r0
   1aa60:	mov	r0, r5
   1aa64:	sub	r2, fp, #48	; 0x30
   1aa68:	bl	11884 <wcrtomb@plt>
   1aa6c:	cmn	r0, #1
   1aa70:	ldrbne	r0, [sp, #32]
   1aa74:	ldrne	r1, [sp, #28]
   1aa78:	strbne	r4, [r1, r0]
   1aa7c:	add	r9, r9, #1
   1aa80:	ldr	r0, [r6, #20]
   1aa84:	cmp	r9, r0
   1aa88:	blt	1a9e8 <__assert_fail@plt+0x8ce4>
   1aa8c:	ldr	r1, [sp, #8]
   1aa90:	ldr	r0, [r1, #8]
   1aa94:	ldr	r2, [sp, #12]
   1aa98:	add	r2, r2, #1
   1aa9c:	cmp	r2, r0
   1aaa0:	blt	1a798 <__assert_fail@plt+0x8a94>
   1aaa4:	sub	sp, fp, #28
   1aaa8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1aaac:	ldr	r0, [sp, #28]
   1aab0:	mov	r1, #1
   1aab4:	mov	r2, #256	; 0x100
   1aab8:	bl	11b60 <memset@plt>
   1aabc:	cmp	r5, #2
   1aac0:	ldreq	r1, [sp, #16]
   1aac4:	ldrbeq	r0, [r1, #28]
   1aac8:	orreq	r0, r0, #1
   1aacc:	strbeq	r0, [r1, #28]
   1aad0:	sub	sp, fp, #28
   1aad4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1aad8:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   1aadc:	add	fp, sp, #24
   1aae0:	mov	r7, r2
   1aae4:	mov	r8, r1
   1aae8:	mov	r4, r0
   1aaec:	mov	r0, #0
   1aaf0:	str	r0, [r4]
   1aaf4:	str	r0, [r4, #4]
   1aaf8:	str	r0, [r4, #8]
   1aafc:	mov	r0, #256	; 0x100
   1ab00:	bl	1a2f8 <__assert_fail@plt+0x85f4>
   1ab04:	str	r0, [r4, #16]
   1ab08:	cmp	r0, #0
   1ab0c:	beq	1abbc <__assert_fail@plt+0x8eb8>
   1ab10:	movw	r0, #45820	; 0xb2fc
   1ab14:	movt	r0, #3
   1ab18:	tst	r7, #1
   1ab1c:	movweq	r0, #710	; 0x2c6
   1ab20:	movteq	r0, #257	; 0x101
   1ab24:	and	r1, r7, #2
   1ab28:	orr	r5, r0, r1, lsl #21
   1ab2c:	tst	r7, #4
   1ab30:	bne	1ab44 <__assert_fail@plt+0x8e40>
   1ab34:	ldrb	r0, [r4, #28]
   1ab38:	and	r0, r0, #127	; 0x7f
   1ab3c:	strb	r0, [r4, #28]
   1ab40:	b	1ab60 <__assert_fail@plt+0x8e5c>
   1ab44:	ldrb	r0, [r4, #28]
   1ab48:	orr	r0, r0, #128	; 0x80
   1ab4c:	strb	r0, [r4, #28]
   1ab50:	movw	r0, #45758	; 0xb2be
   1ab54:	movt	r0, #323	; 0x143
   1ab58:	and	r0, r5, r0
   1ab5c:	orr	r5, r0, #256	; 0x100
   1ab60:	mov	r6, #0
   1ab64:	str	r6, [r4, #20]
   1ab68:	and	r0, r7, #8
   1ab6c:	ldrb	r1, [r4, #28]
   1ab70:	and	r1, r1, #239	; 0xef
   1ab74:	orr	r0, r1, r0, lsl #1
   1ab78:	strb	r0, [r4, #28]
   1ab7c:	mov	r0, r8
   1ab80:	bl	11af4 <strlen@plt>
   1ab84:	mov	r2, r0
   1ab88:	mov	r0, r4
   1ab8c:	mov	r1, r8
   1ab90:	mov	r3, r5
   1ab94:	bl	1a494 <__assert_fail@plt+0x8790>
   1ab98:	mov	r5, r0
   1ab9c:	cmp	r0, #16
   1aba0:	movweq	r5, #8
   1aba4:	cmp	r5, #0
   1aba8:	bne	1abc8 <__assert_fail@plt+0x8ec4>
   1abac:	mov	r0, r4
   1abb0:	bl	1a694 <__assert_fail@plt+0x8990>
   1abb4:	mov	r0, r6
   1abb8:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   1abbc:	mov	r6, #12
   1abc0:	mov	r0, r6
   1abc4:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   1abc8:	ldr	r0, [r4, #16]
   1abcc:	bl	1a22c <__assert_fail@plt+0x8528>
   1abd0:	str	r6, [r4, #16]
   1abd4:	mov	r0, r5
   1abd8:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   1abdc:	push	{r4, r5, r6, r7, fp, lr}
   1abe0:	add	fp, sp, #16
   1abe4:	cmp	r0, #17
   1abe8:	bcs	1ac5c <__assert_fail@plt+0x8f58>
   1abec:	mov	r5, r3
   1abf0:	mov	r4, r2
   1abf4:	movw	r1, #44696	; 0xae98
   1abf8:	movt	r1, #2
   1abfc:	ldr	r0, [r1, r0, lsl #2]
   1ac00:	movw	r1, #44312	; 0xad18
   1ac04:	movt	r1, #2
   1ac08:	add	r1, r1, r0
   1ac0c:	mov	r0, #0
   1ac10:	mov	r2, #5
   1ac14:	bl	11980 <dcgettext@plt>
   1ac18:	mov	r6, r0
   1ac1c:	bl	11af4 <strlen@plt>
   1ac20:	add	r7, r0, #1
   1ac24:	cmp	r5, #0
   1ac28:	beq	1ac44 <__assert_fail@plt+0x8f40>
   1ac2c:	cmp	r7, r5
   1ac30:	mov	r2, r7
   1ac34:	bhi	1ac4c <__assert_fail@plt+0x8f48>
   1ac38:	mov	r0, r4
   1ac3c:	mov	r1, r6
   1ac40:	bl	1192c <memcpy@plt>
   1ac44:	mov	r0, r7
   1ac48:	pop	{r4, r5, r6, r7, fp, pc}
   1ac4c:	sub	r2, r5, #1
   1ac50:	mov	r0, #0
   1ac54:	strb	r0, [r4, r2]
   1ac58:	b	1ac38 <__assert_fail@plt+0x8f34>
   1ac5c:	bl	11cc8 <abort@plt>
   1ac60:	push	{r4, r5, fp, lr}
   1ac64:	add	fp, sp, #8
   1ac68:	mov	r4, r0
   1ac6c:	ldr	r5, [r0]
   1ac70:	cmp	r5, #0
   1ac74:	beq	1aca0 <__assert_fail@plt+0x8f9c>
   1ac78:	movw	r0, #0
   1ac7c:	movt	r0, #0
   1ac80:	movw	r1, #0
   1ac84:	movt	r1, #0
   1ac88:	orrs	r0, r1, r0
   1ac8c:	beq	1ac98 <__assert_fail@plt+0x8f94>
   1ac90:	add	r0, r5, #136	; 0x88
   1ac94:	bl	118b4 <pthread_mutex_destroy@plt>
   1ac98:	mov	r0, r5
   1ac9c:	bl	1acc8 <__assert_fail@plt+0x8fc4>
   1aca0:	mov	r5, #0
   1aca4:	str	r5, [r4]
   1aca8:	str	r5, [r4, #4]
   1acac:	ldr	r0, [r4, #16]
   1acb0:	bl	1a22c <__assert_fail@plt+0x8528>
   1acb4:	str	r5, [r4, #16]
   1acb8:	ldr	r0, [r4, #20]
   1acbc:	bl	1a22c <__assert_fail@plt+0x8528>
   1acc0:	str	r5, [r4, #20]
   1acc4:	pop	{r4, r5, fp, pc}
   1acc8:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   1accc:	add	fp, sp, #24
   1acd0:	mov	r8, r0
   1acd4:	ldr	r0, [r0]
   1acd8:	cmp	r0, #0
   1acdc:	ldrne	r0, [r8, #8]
   1ace0:	cmpne	r0, #0
   1ace4:	beq	1ad10 <__assert_fail@plt+0x900c>
   1ace8:	mov	r5, #0
   1acec:	mov	r6, #0
   1acf0:	ldr	r0, [r8]
   1acf4:	add	r0, r0, r5
   1acf8:	bl	1bae0 <__assert_fail@plt+0x9ddc>
   1acfc:	add	r5, r5, #8
   1ad00:	add	r6, r6, #1
   1ad04:	ldr	r0, [r8, #8]
   1ad08:	cmp	r6, r0
   1ad0c:	bcc	1acf0 <__assert_fail@plt+0x8fec>
   1ad10:	ldr	r0, [r8, #12]
   1ad14:	bl	1a22c <__assert_fail@plt+0x8528>
   1ad18:	ldr	r0, [r8, #8]
   1ad1c:	cmp	r0, #0
   1ad20:	beq	1ad7c <__assert_fail@plt+0x9078>
   1ad24:	mov	r5, #0
   1ad28:	mov	r6, #8
   1ad2c:	ldr	r0, [r8, #24]
   1ad30:	cmp	r0, #0
   1ad34:	beq	1ad40 <__assert_fail@plt+0x903c>
   1ad38:	ldr	r0, [r0, r6]
   1ad3c:	bl	1a22c <__assert_fail@plt+0x8528>
   1ad40:	ldr	r0, [r8, #28]
   1ad44:	cmp	r0, #0
   1ad48:	beq	1ad54 <__assert_fail@plt+0x9050>
   1ad4c:	ldr	r0, [r0, r6]
   1ad50:	bl	1a22c <__assert_fail@plt+0x8528>
   1ad54:	ldr	r0, [r8, #20]
   1ad58:	cmp	r0, #0
   1ad5c:	beq	1ad68 <__assert_fail@plt+0x9064>
   1ad60:	ldr	r0, [r0, r6]
   1ad64:	bl	1a22c <__assert_fail@plt+0x8528>
   1ad68:	add	r6, r6, #12
   1ad6c:	add	r5, r5, #1
   1ad70:	ldr	r0, [r8, #8]
   1ad74:	cmp	r5, r0
   1ad78:	bcc	1ad2c <__assert_fail@plt+0x9028>
   1ad7c:	ldr	r0, [r8, #20]
   1ad80:	bl	1a22c <__assert_fail@plt+0x8528>
   1ad84:	ldr	r0, [r8, #24]
   1ad88:	bl	1a22c <__assert_fail@plt+0x8528>
   1ad8c:	ldr	r0, [r8, #28]
   1ad90:	bl	1a22c <__assert_fail@plt+0x8528>
   1ad94:	ldr	r0, [r8]
   1ad98:	bl	1a22c <__assert_fail@plt+0x8528>
   1ad9c:	ldr	r0, [r8, #32]
   1ada0:	cmp	r0, #0
   1ada4:	beq	1ae00 <__assert_fail@plt+0x90fc>
   1ada8:	mov	r5, #0
   1adac:	ldr	r6, [r8, #32]
   1adb0:	add	r0, r5, r5, lsl #1
   1adb4:	ldr	r0, [r6, r0, lsl #2]!
   1adb8:	add	r7, r6, #8
   1adbc:	cmp	r0, #1
   1adc0:	blt	1ade4 <__assert_fail@plt+0x90e0>
   1adc4:	mov	r4, #0
   1adc8:	ldr	r0, [r7]
   1adcc:	ldr	r0, [r0, r4, lsl #2]
   1add0:	bl	1bb10 <__assert_fail@plt+0x9e0c>
   1add4:	add	r4, r4, #1
   1add8:	ldr	r0, [r6]
   1addc:	cmp	r4, r0
   1ade0:	blt	1adc8 <__assert_fail@plt+0x90c4>
   1ade4:	ldr	r0, [r7]
   1ade8:	bl	1a22c <__assert_fail@plt+0x8528>
   1adec:	add	r0, r5, #1
   1adf0:	ldr	r1, [r8, #68]	; 0x44
   1adf4:	cmp	r5, r1
   1adf8:	mov	r5, r0
   1adfc:	bcc	1adac <__assert_fail@plt+0x90a8>
   1ae00:	ldr	r0, [r8, #32]
   1ae04:	bl	1a22c <__assert_fail@plt+0x8528>
   1ae08:	ldr	r0, [r8, #60]	; 0x3c
   1ae0c:	movw	r1, #44764	; 0xaedc
   1ae10:	movt	r1, #2
   1ae14:	cmp	r0, r1
   1ae18:	beq	1ae20 <__assert_fail@plt+0x911c>
   1ae1c:	bl	1a22c <__assert_fail@plt+0x8528>
   1ae20:	ldr	r0, [r8, #132]	; 0x84
   1ae24:	bl	1a22c <__assert_fail@plt+0x8528>
   1ae28:	mov	r0, r8
   1ae2c:	pop	{r4, r5, r6, r7, r8, sl, fp, lr}
   1ae30:	b	1a22c <__assert_fail@plt+0x8528>
   1ae34:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1ae38:	add	fp, sp, #28
   1ae3c:	sub	sp, sp, #28
   1ae40:	mov	r7, #2
   1ae44:	ldr	sl, [fp, #8]
   1ae48:	cmp	sl, #7
   1ae4c:	bhi	1af20 <__assert_fail@plt+0x921c>
   1ae50:	mov	r6, r3
   1ae54:	mov	r9, r2
   1ae58:	mov	r4, r1
   1ae5c:	mov	r5, r0
   1ae60:	ldr	r0, [r0]
   1ae64:	str	r0, [sp, #24]
   1ae68:	tst	sl, #4
   1ae6c:	bne	1ae84 <__assert_fail@plt+0x9180>
   1ae70:	mov	r0, r4
   1ae74:	bl	11af4 <strlen@plt>
   1ae78:	mov	r7, r0
   1ae7c:	mov	r8, #0
   1ae80:	b	1ae8c <__assert_fail@plt+0x9188>
   1ae84:	ldr	r8, [r6]
   1ae88:	ldr	r7, [r6, #4]
   1ae8c:	movw	r0, #0
   1ae90:	movt	r0, #0
   1ae94:	movw	r1, #0
   1ae98:	movt	r1, #0
   1ae9c:	orrs	r0, r1, r0
   1aea0:	str	r0, [sp, #20]
   1aea4:	beq	1aeb4 <__assert_fail@plt+0x91b0>
   1aea8:	ldr	r0, [sp, #24]
   1aeac:	add	r0, r0, #136	; 0x88
   1aeb0:	bl	118fc <pthread_mutex_lock@plt>
   1aeb4:	ldrb	r0, [r5, #28]
   1aeb8:	tst	r0, #16
   1aebc:	bne	1aed0 <__assert_fail@plt+0x91cc>
   1aec0:	str	r7, [sp]
   1aec4:	stmib	sp, {r7, r9}
   1aec8:	str	r6, [sp, #12]
   1aecc:	b	1aee4 <__assert_fail@plt+0x91e0>
   1aed0:	mov	r0, #0
   1aed4:	str	r7, [sp]
   1aed8:	str	r7, [sp, #4]
   1aedc:	str	r0, [sp, #8]
   1aee0:	str	r0, [sp, #12]
   1aee4:	str	sl, [sp, #16]
   1aee8:	mov	r0, r5
   1aeec:	mov	r1, r4
   1aef0:	mov	r2, r7
   1aef4:	mov	r3, r8
   1aef8:	bl	1af2c <__assert_fail@plt+0x9228>
   1aefc:	mov	r7, r0
   1af00:	ldr	r0, [sp, #20]
   1af04:	cmp	r0, #0
   1af08:	beq	1af18 <__assert_fail@plt+0x9214>
   1af0c:	ldr	r0, [sp, #24]
   1af10:	add	r0, r0, #136	; 0x88
   1af14:	bl	11848 <pthread_mutex_unlock@plt>
   1af18:	cmp	r7, #0
   1af1c:	movwne	r7, #1
   1af20:	mov	r0, r7
   1af24:	sub	sp, fp, #28
   1af28:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1af2c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1af30:	add	fp, sp, #28
   1af34:	sub	sp, sp, #212	; 0xd4
   1af38:	mov	r6, r3
   1af3c:	str	r2, [sp, #60]	; 0x3c
   1af40:	str	r1, [sp, #36]	; 0x24
   1af44:	mov	sl, r0
   1af48:	ldr	r8, [r0]
   1af4c:	add	r0, sp, #64	; 0x40
   1af50:	mov	r7, #0
   1af54:	mov	r1, #0
   1af58:	mov	r2, #136	; 0x88
   1af5c:	bl	11b60 <memset@plt>
   1af60:	str	r8, [sp, #148]	; 0x94
   1af64:	ldr	r1, [sl, #16]
   1af68:	ldr	r0, [fp, #16]
   1af6c:	ldr	ip, [fp, #8]
   1af70:	cmp	r1, #0
   1af74:	mov	r5, #0
   1af78:	beq	1af94 <__assert_fail@plt+0x9290>
   1af7c:	ldrb	r2, [sl, #28]
   1af80:	and	r2, r2, #9
   1af84:	cmp	r2, #8
   1af88:	movne	r1, #0
   1af8c:	subs	r5, r6, ip
   1af90:	movne	r5, r1
   1af94:	str	r6, [sp, #44]	; 0x2c
   1af98:	ldr	r1, [sl, #8]
   1af9c:	ldr	r2, [sl, #24]
   1afa0:	mvn	r3, r2
   1afa4:	cmp	r2, r0
   1afa8:	addcc	r7, r3, r0
   1afac:	mov	r9, #1
   1afb0:	cmp	r1, #0
   1afb4:	beq	1b4b0 <__assert_fail@plt+0x97ac>
   1afb8:	ldr	r1, [r8, #36]	; 0x24
   1afbc:	cmp	r1, #0
   1afc0:	ldrne	r2, [r8, #40]	; 0x28
   1afc4:	cmpne	r2, #0
   1afc8:	beq	1b4b0 <__assert_fail@plt+0x97ac>
   1afcc:	ldr	r3, [r8, #44]	; 0x2c
   1afd0:	cmp	r3, #0
   1afd4:	ldrne	r6, [r8, #48]	; 0x30
   1afd8:	cmpne	r6, #0
   1afdc:	beq	1b4b0 <__assert_fail@plt+0x97ac>
   1afe0:	ldr	lr, [sl, #20]
   1afe4:	ldr	r1, [r1, #8]
   1afe8:	cmp	r1, #0
   1afec:	bne	1affc <__assert_fail@plt+0x92f8>
   1aff0:	ldr	r1, [r2, #8]
   1aff4:	cmp	r1, #0
   1aff8:	beq	1b57c <__assert_fail@plt+0x9878>
   1affc:	mov	r6, ip
   1b000:	ldr	r0, [fp, #16]
   1b004:	mov	r4, r7
   1b008:	subs	r0, r0, r7
   1b00c:	str	r0, [sp, #48]	; 0x30
   1b010:	mov	r0, #1
   1b014:	str	r0, [sp, #40]	; 0x28
   1b018:	bne	1b02c <__assert_fail@plt+0x9328>
   1b01c:	ldr	r0, [r8, #76]	; 0x4c
   1b020:	cmp	r0, #0
   1b024:	movwne	r0, #1
   1b028:	str	r0, [sp, #40]	; 0x28
   1b02c:	ldr	r0, [r8, #8]
   1b030:	ldr	r1, [sl, #12]
   1b034:	str	r8, [sp, #8]
   1b038:	str	lr, [sp, #56]	; 0x38
   1b03c:	str	lr, [sp]
   1b040:	ubfx	r1, r1, #22, #1
   1b044:	str	r1, [sp, #4]
   1b048:	add	r3, r0, #1
   1b04c:	add	r0, sp, #64	; 0x40
   1b050:	ldr	r7, [sp, #36]	; 0x24
   1b054:	mov	r1, r7
   1b058:	ldr	r2, [sp, #60]	; 0x3c
   1b05c:	bl	21814 <__assert_fail@plt+0xfb10>
   1b060:	cmp	r0, #0
   1b064:	bne	1b6c0 <__assert_fail@plt+0x99bc>
   1b068:	ldr	r1, [fp, #24]
   1b06c:	ldr	r0, [fp, #12]
   1b070:	str	r0, [sp, #116]	; 0x74
   1b074:	str	r0, [sp, #120]	; 0x78
   1b078:	str	sl, [sp, #32]
   1b07c:	ldrb	r0, [sl, #28]
   1b080:	lsr	r0, r0, #7
   1b084:	strb	r0, [sp, #141]	; 0x8d
   1b088:	ldr	r0, [r8, #76]	; 0x4c
   1b08c:	lsl	r2, r0, #1
   1b090:	add	r0, sp, #64	; 0x40
   1b094:	bl	218c4 <__assert_fail@plt+0xfbc0>
   1b098:	cmp	r0, #0
   1b09c:	bne	1b6c0 <__assert_fail@plt+0x99bc>
   1b0a0:	ldr	r0, [sp, #48]	; 0x30
   1b0a4:	cmp	r0, #1
   1b0a8:	bhi	1b0b8 <__assert_fail@plt+0x93b4>
   1b0ac:	ldrb	r0, [r8, #88]	; 0x58
   1b0b0:	tst	r0, #2
   1b0b4:	beq	1b0e0 <__assert_fail@plt+0x93dc>
   1b0b8:	mov	r9, #12
   1b0bc:	ldr	r0, [sp, #100]	; 0x64
   1b0c0:	cmn	r0, #-1073741822	; 0xc0000002
   1b0c4:	bhi	1b490 <__assert_fail@plt+0x978c>
   1b0c8:	mov	r1, #4
   1b0cc:	add	r0, r1, r0, lsl #2
   1b0d0:	bl	1a2f8 <__assert_fail@plt+0x85f4>
   1b0d4:	str	r0, [sp, #164]	; 0xa4
   1b0d8:	cmp	r0, #0
   1b0dc:	beq	1b490 <__assert_fail@plt+0x978c>
   1b0e0:	str	r4, [sp, #16]
   1b0e4:	ldr	r4, [sp, #44]	; 0x2c
   1b0e8:	str	r4, [fp, #-36]	; 0xffffffdc
   1b0ec:	mov	r0, #4
   1b0f0:	ldr	r1, [fp, #24]
   1b0f4:	tst	r1, #1
   1b0f8:	mov	r1, #4
   1b0fc:	movweq	r1, #6
   1b100:	str	r1, [sp, #124]	; 0x7c
   1b104:	cmp	r6, r4
   1b108:	mov	lr, #1
   1b10c:	mvnlt	lr, #0
   1b110:	mov	r1, r8
   1b114:	mov	r8, r6
   1b118:	movlt	r8, r4
   1b11c:	mov	sl, r4
   1b120:	movlt	sl, r6
   1b124:	str	r1, [sp, #52]	; 0x34
   1b128:	ldr	ip, [r1, #92]	; 0x5c
   1b12c:	cmp	r5, #0
   1b130:	beq	1b17c <__assert_fail@plt+0x9478>
   1b134:	cmp	ip, #1
   1b138:	ldr	r2, [sp, #60]	; 0x3c
   1b13c:	ldr	r3, [sp, #56]	; 0x38
   1b140:	beq	1b160 <__assert_fail@plt+0x945c>
   1b144:	ldr	r0, [sp, #32]
   1b148:	ldr	r0, [r0, #12]
   1b14c:	and	r0, r0, #4194304	; 0x400000
   1b150:	orr	r0, r3, r0
   1b154:	clz	r0, r0
   1b158:	lsr	r0, r0, #5
   1b15c:	lsl	r0, r0, #2
   1b160:	cmp	r3, #0
   1b164:	mov	r1, r3
   1b168:	movwne	r1, #1
   1b16c:	cmp	r6, r4
   1b170:	orrge	r1, r1, #2
   1b174:	orr	r0, r1, r0
   1b178:	b	1b188 <__assert_fail@plt+0x9484>
   1b17c:	mov	r0, #8
   1b180:	ldr	r2, [sp, #60]	; 0x3c
   1b184:	ldr	r3, [sp, #56]	; 0x38
   1b188:	ldr	r1, [fp, #-36]	; 0xffffffdc
   1b18c:	cmp	r1, sl
   1b190:	cmpge	r8, r1
   1b194:	blt	1b488 <__assert_fail@plt+0x9784>
   1b198:	sub	r1, fp, #36	; 0x24
   1b19c:	cmp	r6, r4
   1b1a0:	movwlt	r1, #0
   1b1a4:	str	r1, [sp, #28]
   1b1a8:	sub	r4, r0, #4
   1b1ac:	add	r9, sp, #64	; 0x40
   1b1b0:	str	ip, [sp, #44]	; 0x2c
   1b1b4:	str	lr, [sp, #24]
   1b1b8:	str	r4, [sp, #20]
   1b1bc:	cmp	r4, #4
   1b1c0:	bhi	1b224 <__assert_fail@plt+0x9520>
   1b1c4:	add	r0, pc, #0
   1b1c8:	ldr	pc, [r0, r4, lsl #2]
   1b1cc:	andeq	fp, r1, r0, ror #3
   1b1d0:	andeq	fp, r1, r0, ror #3
   1b1d4:	andeq	fp, r1, r8, lsr #5
   1b1d8:	ldrdeq	fp, [r1], -r8
   1b1dc:	andeq	fp, r1, r4, lsl r3
   1b1e0:	ldr	r0, [fp, #-36]	; 0xffffffdc
   1b1e4:	cmp	r0, sl
   1b1e8:	blt	1b488 <__assert_fail@plt+0x9784>
   1b1ec:	mov	r1, #0
   1b1f0:	cmp	r0, r2
   1b1f4:	ldrblt	r1, [r7, r0]
   1b1f8:	cmp	r3, #0
   1b1fc:	ldrbne	r1, [r3, r1]
   1b200:	ldrb	r1, [r5, r1]
   1b204:	cmp	r1, #0
   1b208:	bne	1b314 <__assert_fail@plt+0x9610>
   1b20c:	sub	r1, r0, #1
   1b210:	str	r1, [fp, #-36]	; 0xffffffdc
   1b214:	cmp	r0, sl
   1b218:	mov	r0, r1
   1b21c:	bgt	1b1ec <__assert_fail@plt+0x94e8>
   1b220:	b	1b488 <__assert_fail@plt+0x9784>
   1b224:	ldr	r0, [sp, #88]	; 0x58
   1b228:	ldr	r2, [sp, #96]	; 0x60
   1b22c:	ldr	r1, [fp, #-36]	; 0xffffffdc
   1b230:	sub	r0, r1, r0
   1b234:	cmp	r0, r2
   1b238:	bcs	1b27c <__assert_fail@plt+0x9578>
   1b23c:	mov	r1, #0
   1b240:	ldr	r2, [sp, #92]	; 0x5c
   1b244:	cmp	r0, r2
   1b248:	ldrcc	r1, [sp, #68]	; 0x44
   1b24c:	ldrbcc	r1, [r1, r0]
   1b250:	ldrb	r0, [r5, r1]
   1b254:	cmp	r0, #0
   1b258:	bne	1b314 <__assert_fail@plt+0x9610>
   1b25c:	ldr	r0, [fp, #-36]	; 0xffffffdc
   1b260:	add	r0, r0, lr
   1b264:	str	r0, [fp, #-36]	; 0xffffffdc
   1b268:	cmp	r0, sl
   1b26c:	blt	1b488 <__assert_fail@plt+0x9784>
   1b270:	cmp	r0, r8
   1b274:	ble	1b224 <__assert_fail@plt+0x9520>
   1b278:	b	1b488 <__assert_fail@plt+0x9784>
   1b27c:	mov	r0, r9
   1b280:	ldr	r2, [fp, #24]
   1b284:	bl	2194c <__assert_fail@plt+0xfc48>
   1b288:	cmp	r0, #0
   1b28c:	bne	1b6c8 <__assert_fail@plt+0x99c4>
   1b290:	ldr	r0, [sp, #88]	; 0x58
   1b294:	ldr	r1, [fp, #-36]	; 0xffffffdc
   1b298:	sub	r0, r1, r0
   1b29c:	add	r9, sp, #64	; 0x40
   1b2a0:	ldr	lr, [sp, #24]
   1b2a4:	b	1b23c <__assert_fail@plt+0x9538>
   1b2a8:	ldr	r0, [fp, #-36]	; 0xffffffdc
   1b2ac:	cmp	r0, r8
   1b2b0:	bge	1b308 <__assert_fail@plt+0x9604>
   1b2b4:	ldrb	r1, [r7, r0]
   1b2b8:	ldrb	r1, [r5, r1]
   1b2bc:	cmp	r1, #0
   1b2c0:	bne	1b308 <__assert_fail@plt+0x9604>
   1b2c4:	add	r0, r0, #1
   1b2c8:	str	r0, [fp, #-36]	; 0xffffffdc
   1b2cc:	cmp	r0, r8
   1b2d0:	blt	1b2b4 <__assert_fail@plt+0x95b0>
   1b2d4:	b	1b308 <__assert_fail@plt+0x9604>
   1b2d8:	ldr	r0, [fp, #-36]	; 0xffffffdc
   1b2dc:	cmp	r0, r8
   1b2e0:	bge	1b308 <__assert_fail@plt+0x9604>
   1b2e4:	ldrb	r1, [r7, r0]
   1b2e8:	ldrb	r1, [r3, r1]
   1b2ec:	ldrb	r1, [r5, r1]
   1b2f0:	cmp	r1, #0
   1b2f4:	bne	1b308 <__assert_fail@plt+0x9604>
   1b2f8:	add	r0, r0, #1
   1b2fc:	str	r0, [fp, #-36]	; 0xffffffdc
   1b300:	cmp	r0, r8
   1b304:	blt	1b2e4 <__assert_fail@plt+0x95e0>
   1b308:	ldr	r1, [fp, #-36]	; 0xffffffdc
   1b30c:	cmp	r1, r8
   1b310:	beq	1b468 <__assert_fail@plt+0x9764>
   1b314:	ldr	r1, [fp, #-36]	; 0xffffffdc
   1b318:	mov	r0, r9
   1b31c:	ldr	r2, [fp, #24]
   1b320:	bl	2194c <__assert_fail@plt+0xfc48>
   1b324:	cmp	r0, #0
   1b328:	bne	1b6c8 <__assert_fail@plt+0x99c4>
   1b32c:	ldr	r0, [sp, #44]	; 0x2c
   1b330:	cmp	r0, #1
   1b334:	add	r9, sp, #64	; 0x40
   1b338:	ldrne	r0, [sp, #92]	; 0x5c
   1b33c:	cmpne	r0, #0
   1b340:	bne	1b3c4 <__assert_fail@plt+0x96c0>
   1b344:	mov	r0, #0
   1b348:	str	r0, [sp, #172]	; 0xac
   1b34c:	str	r0, [sp, #184]	; 0xb8
   1b350:	str	r0, [sp, #168]	; 0xa8
   1b354:	mov	r0, r9
   1b358:	ldr	r1, [sp, #40]	; 0x28
   1b35c:	ldr	r2, [sp, #28]
   1b360:	bl	21f78 <__assert_fail@plt+0x10274>
   1b364:	cmn	r0, #1
   1b368:	mov	r4, r9
   1b36c:	beq	1b42c <__assert_fail@plt+0x9728>
   1b370:	mov	r2, r0
   1b374:	cmn	r0, #2
   1b378:	beq	1b6d0 <__assert_fail@plt+0x99cc>
   1b37c:	str	r2, [sp, #156]	; 0x9c
   1b380:	ldr	r0, [sp, #48]	; 0x30
   1b384:	cmp	r0, #2
   1b388:	bcc	1b3d8 <__assert_fail@plt+0x96d4>
   1b38c:	ldr	r0, [sp, #32]
   1b390:	ldrb	r0, [r0, #28]
   1b394:	ands	r0, r0, #16
   1b398:	bne	1b3d8 <__assert_fail@plt+0x96d4>
   1b39c:	ldr	r0, [sp, #164]	; 0xa4
   1b3a0:	ldr	r1, [r0, r2, lsl #2]
   1b3a4:	add	r0, sp, #64	; 0x40
   1b3a8:	bl	222ec <__assert_fail@plt+0x105e8>
   1b3ac:	str	r0, [sp, #160]	; 0xa0
   1b3b0:	ldr	r0, [sp, #52]	; 0x34
   1b3b4:	ldrb	r0, [r0, #88]	; 0x58
   1b3b8:	tst	r0, #1
   1b3bc:	beq	1b3fc <__assert_fail@plt+0x96f8>
   1b3c0:	b	1b40c <__assert_fail@plt+0x9708>
   1b3c4:	ldr	r0, [sp, #72]	; 0x48
   1b3c8:	ldr	r0, [r0]
   1b3cc:	cmn	r0, #1
   1b3d0:	bne	1b344 <__assert_fail@plt+0x9640>
   1b3d4:	b	1b438 <__assert_fail@plt+0x9734>
   1b3d8:	ldr	r0, [sp, #52]	; 0x34
   1b3dc:	ldr	r0, [r0, #76]	; 0x4c
   1b3e0:	cmp	r0, #0
   1b3e4:	beq	1b4bc <__assert_fail@plt+0x97b8>
   1b3e8:	ldr	r0, [sp, #164]	; 0xa4
   1b3ec:	ldr	r1, [r0, r2, lsl #2]
   1b3f0:	add	r0, sp, #64	; 0x40
   1b3f4:	bl	222ec <__assert_fail@plt+0x105e8>
   1b3f8:	str	r0, [sp, #160]	; 0xa0
   1b3fc:	ldr	r0, [sp, #52]	; 0x34
   1b400:	ldr	r0, [r0, #76]	; 0x4c
   1b404:	cmp	r0, #0
   1b408:	beq	1b4bc <__assert_fail@plt+0x97b8>
   1b40c:	add	r0, sp, #64	; 0x40
   1b410:	bl	22364 <__assert_fail@plt+0x10660>
   1b414:	cmp	r0, #0
   1b418:	beq	1b4bc <__assert_fail@plt+0x97b8>
   1b41c:	mov	r9, r0
   1b420:	cmp	r0, #1
   1b424:	add	r4, sp, #64	; 0x40
   1b428:	bne	1b48c <__assert_fail@plt+0x9788>
   1b42c:	mov	r0, r4
   1b430:	bl	22584 <__assert_fail@plt+0x10880>
   1b434:	mov	r9, r4
   1b438:	ldr	r0, [fp, #-36]	; 0xffffffdc
   1b43c:	ldr	lr, [sp, #24]
   1b440:	add	r0, r0, lr
   1b444:	str	r0, [fp, #-36]	; 0xffffffdc
   1b448:	cmp	r0, sl
   1b44c:	blt	1b488 <__assert_fail@plt+0x9784>
   1b450:	cmp	r8, r0
   1b454:	ldr	r2, [sp, #60]	; 0x3c
   1b458:	ldr	r4, [sp, #20]
   1b45c:	ldr	r3, [sp, #56]	; 0x38
   1b460:	bge	1b1bc <__assert_fail@plt+0x94b8>
   1b464:	b	1b488 <__assert_fail@plt+0x9784>
   1b468:	mov	r0, #0
   1b46c:	cmp	r1, r2
   1b470:	ldrblt	r0, [r7, r1]
   1b474:	cmp	r3, #0
   1b478:	ldrbne	r0, [r3, r0]
   1b47c:	ldrb	r0, [r5, r0]
   1b480:	cmp	r0, #0
   1b484:	bne	1b314 <__assert_fail@plt+0x9610>
   1b488:	mov	r9, #1
   1b48c:	ldr	r8, [sp, #52]	; 0x34
   1b490:	ldr	r0, [sp, #164]	; 0xa4
   1b494:	bl	1a22c <__assert_fail@plt+0x8528>
   1b498:	ldr	r0, [r8, #76]	; 0x4c
   1b49c:	cmp	r0, #0
   1b4a0:	addne	r0, sp, #64	; 0x40
   1b4a4:	blne	228ac <__assert_fail@plt+0x10ba8>
   1b4a8:	add	r0, sp, #64	; 0x40
   1b4ac:	bl	1bef4 <__assert_fail@plt+0xa1f0>
   1b4b0:	mov	r0, r9
   1b4b4:	sub	sp, fp, #28
   1b4b8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1b4bc:	ldr	sl, [sp, #48]	; 0x30
   1b4c0:	cmp	sl, #0
   1b4c4:	beq	1b5b8 <__assert_fail@plt+0x98b4>
   1b4c8:	cmp	sl, #1
   1b4cc:	ldr	r8, [sp, #52]	; 0x34
   1b4d0:	ldr	r6, [sp, #16]
   1b4d4:	ldr	r4, [fp, #16]
   1b4d8:	beq	1b4f8 <__assert_fail@plt+0x97f4>
   1b4dc:	mvn	r0, r6
   1b4e0:	add	r0, r0, r4
   1b4e4:	lsl	r2, r0, #3
   1b4e8:	ldr	r0, [fp, #20]
   1b4ec:	add	r0, r0, #8
   1b4f0:	mov	r1, #255	; 0xff
   1b4f4:	bl	11b60 <memset@plt>
   1b4f8:	mov	r0, #0
   1b4fc:	ldr	r1, [sp, #156]	; 0x9c
   1b500:	ldr	r2, [fp, #20]
   1b504:	stm	r2, {r0, r1}
   1b508:	cmp	sl, #2
   1b50c:	bcc	1b560 <__assert_fail@plt+0x985c>
   1b510:	ldr	r0, [sp, #32]
   1b514:	ldrb	r0, [r0, #28]
   1b518:	ands	r0, r0, #16
   1b51c:	bne	1b560 <__assert_fail@plt+0x985c>
   1b520:	ldrb	r1, [r8, #88]	; 0x58
   1b524:	mov	r0, #0
   1b528:	tst	r1, #1
   1b52c:	beq	1b540 <__assert_fail@plt+0x983c>
   1b530:	ldr	r1, [r8, #76]	; 0x4c
   1b534:	mov	r0, #0
   1b538:	cmp	r1, #0
   1b53c:	movwgt	r0, #1
   1b540:	str	r0, [sp]
   1b544:	add	r1, sp, #64	; 0x40
   1b548:	ldr	r0, [sp, #32]
   1b54c:	mov	r2, sl
   1b550:	ldr	r3, [fp, #20]
   1b554:	bl	2262c <__assert_fail@plt+0x10928>
   1b558:	cmp	r0, #0
   1b55c:	bne	1b6c0 <__assert_fail@plt+0x99bc>
   1b560:	ldr	r0, [fp, #20]
   1b564:	add	r0, r0, #4
   1b568:	add	r1, sp, #64	; 0x40
   1b56c:	add	lr, r1, #32
   1b570:	ldrb	r2, [sp, #140]	; 0x8c
   1b574:	mov	r3, r4
   1b578:	b	1b604 <__assert_fail@plt+0x9900>
   1b57c:	ldr	r1, [r3, #8]
   1b580:	cmp	r1, #0
   1b584:	beq	1b594 <__assert_fail@plt+0x9890>
   1b588:	ldrsb	r1, [sl, #28]
   1b58c:	cmp	r1, #0
   1b590:	blt	1affc <__assert_fail@plt+0x92f8>
   1b594:	mov	r6, #0
   1b598:	ldr	r0, [sp, #44]	; 0x2c
   1b59c:	cmp	r0, #0
   1b5a0:	beq	1b5c0 <__assert_fail@plt+0x98bc>
   1b5a4:	cmp	ip, #0
   1b5a8:	mov	r0, #0
   1b5ac:	str	r0, [sp, #44]	; 0x2c
   1b5b0:	bne	1b4b0 <__assert_fail@plt+0x97ac>
   1b5b4:	b	1b000 <__assert_fail@plt+0x92fc>
   1b5b8:	mov	r9, #0
   1b5bc:	b	1b48c <__assert_fail@plt+0x9788>
   1b5c0:	mov	r0, #0
   1b5c4:	str	r0, [sp, #44]	; 0x2c
   1b5c8:	b	1b000 <__assert_fail@plt+0x92fc>
   1b5cc:	ldr	ip, [sp, #76]	; 0x4c
   1b5d0:	ldr	r5, [sp, #92]	; 0x5c
   1b5d4:	cmp	r7, r5
   1b5d8:	mov	r1, lr
   1b5dc:	addne	r1, ip, r7, lsl #2
   1b5e0:	ldr	r1, [r1]
   1b5e4:	str	r1, [r0, #-4]
   1b5e8:	ldr	r1, [r0]
   1b5ec:	cmp	r1, r5
   1b5f0:	mov	r4, lr
   1b5f4:	addne	r4, ip, r1, lsl #2
   1b5f8:	ldr	r1, [r4]
   1b5fc:	str	r1, [r0]
   1b600:	b	1b618 <__assert_fail@plt+0x9914>
   1b604:	ldr	r7, [r0, #-4]
   1b608:	cmn	r7, #1
   1b60c:	beq	1b62c <__assert_fail@plt+0x9928>
   1b610:	cmp	r2, #0
   1b614:	bne	1b5cc <__assert_fail@plt+0x98c8>
   1b618:	ldmda	r0, {r1, r7}
   1b61c:	ldr	r5, [fp, #-36]	; 0xffffffdc
   1b620:	add	r1, r1, r5
   1b624:	add	r7, r7, r5
   1b628:	stmda	r0, {r1, r7}
   1b62c:	add	r0, r0, #8
   1b630:	sub	r3, r3, #1
   1b634:	cmp	r6, r3
   1b638:	bne	1b604 <__assert_fail@plt+0x9900>
   1b63c:	cmp	r6, #0
   1b640:	ldr	r4, [fp, #20]
   1b644:	ble	1b658 <__assert_fail@plt+0x9954>
   1b648:	add	r0, r4, sl, lsl #3
   1b64c:	lsl	r2, r6, #3
   1b650:	mov	r1, #255	; 0xff
   1b654:	bl	11b60 <memset@plt>
   1b658:	ldr	r0, [r8, #132]	; 0x84
   1b65c:	mov	r9, #0
   1b660:	cmp	r0, #0
   1b664:	beq	1b490 <__assert_fail@plt+0x978c>
   1b668:	cmp	sl, #2
   1b66c:	bcc	1b490 <__assert_fail@plt+0x978c>
   1b670:	ldr	r1, [fp, #16]
   1b674:	sub	r1, r1, #1
   1b678:	sub	r1, r1, r6
   1b67c:	mov	r2, #0
   1b680:	ldr	r3, [r0, r2, lsl #2]
   1b684:	cmp	r2, r3
   1b688:	beq	1b6ac <__assert_fail@plt+0x99a8>
   1b68c:	add	r7, r4, r2, lsl #3
   1b690:	add	r3, r4, r3, lsl #3
   1b694:	ldr	r3, [r3, #8]
   1b698:	str	r3, [r7, #8]
   1b69c:	ldr	r3, [r0, r2, lsl #2]
   1b6a0:	add	r3, r4, r3, lsl #3
   1b6a4:	ldr	r3, [r3, #12]
   1b6a8:	str	r3, [r7, #12]
   1b6ac:	add	r2, r2, #1
   1b6b0:	cmp	r1, r2
   1b6b4:	bne	1b680 <__assert_fail@plt+0x997c>
   1b6b8:	mov	r9, #0
   1b6bc:	b	1b490 <__assert_fail@plt+0x978c>
   1b6c0:	mov	r9, r0
   1b6c4:	b	1b490 <__assert_fail@plt+0x978c>
   1b6c8:	mov	r9, r0
   1b6cc:	b	1b48c <__assert_fail@plt+0x9788>
   1b6d0:	mov	r9, #12
   1b6d4:	b	1b48c <__assert_fail@plt+0x9788>
   1b6d8:	push	{fp, lr}
   1b6dc:	mov	fp, sp
   1b6e0:	sub	sp, sp, #16
   1b6e4:	mov	ip, #1
   1b6e8:	str	ip, [sp, #12]
   1b6ec:	str	r2, [sp, #4]
   1b6f0:	mov	ip, #0
   1b6f4:	str	ip, [sp]
   1b6f8:	ldr	ip, [fp, #8]
   1b6fc:	str	ip, [sp, #8]
   1b700:	bl	1b70c <__assert_fail@plt+0x9a08>
   1b704:	mov	sp, fp
   1b708:	pop	{fp, pc}
   1b70c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1b710:	add	fp, sp, #28
   1b714:	sub	sp, sp, #36	; 0x24
   1b718:	mvn	r7, #0
   1b71c:	cmp	r3, #0
   1b720:	blt	1b8bc <__assert_fail@plt+0x9bb8>
   1b724:	mov	r9, r3
   1b728:	mov	r8, r2
   1b72c:	cmp	r3, r2
   1b730:	bgt	1b8bc <__assert_fail@plt+0x9bb8>
   1b734:	mov	r5, r0
   1b738:	str	r1, [sp, #28]
   1b73c:	ldr	r0, [fp, #8]
   1b740:	add	r0, r0, r9
   1b744:	ldr	r4, [r5]
   1b748:	cmp	r0, r8
   1b74c:	mov	r6, r8
   1b750:	bicle	r6, r0, r0, asr #31
   1b754:	movw	r0, #0
   1b758:	movt	r0, #0
   1b75c:	movw	r1, #0
   1b760:	movt	r1, #0
   1b764:	orrs	r0, r1, r0
   1b768:	str	r0, [sp, #32]
   1b76c:	beq	1b778 <__assert_fail@plt+0x9a74>
   1b770:	add	r0, r4, #136	; 0x88
   1b774:	bl	118fc <pthread_mutex_lock@plt>
   1b778:	str	r4, [sp, #20]
   1b77c:	ldr	r4, [fp, #16]
   1b780:	ldrb	r0, [r5, #28]
   1b784:	ubfx	r1, r0, #5, #2
   1b788:	str	r1, [sp, #24]
   1b78c:	cmp	r6, r9
   1b790:	ble	1b7ac <__assert_fail@plt+0x9aa8>
   1b794:	tst	r0, #8
   1b798:	bne	1b7ac <__assert_fail@plt+0x9aa8>
   1b79c:	ldr	r0, [r5, #16]
   1b7a0:	cmp	r0, #0
   1b7a4:	movne	r0, r5
   1b7a8:	blne	1a694 <__assert_fail@plt+0x8990>
   1b7ac:	mov	r7, #1
   1b7b0:	mov	sl, #0
   1b7b4:	cmp	r4, #0
   1b7b8:	beq	1b7f0 <__assert_fail@plt+0x9aec>
   1b7bc:	ldrb	r0, [r5, #28]
   1b7c0:	ands	r1, r0, #16
   1b7c4:	bne	1b7f0 <__assert_fail@plt+0x9aec>
   1b7c8:	and	r0, r0, #6
   1b7cc:	cmp	r0, #4
   1b7d0:	bne	1b7e4 <__assert_fail@plt+0x9ae0>
   1b7d4:	ldr	r7, [r4]
   1b7d8:	ldr	r0, [r5, #24]
   1b7dc:	cmp	r7, r0
   1b7e0:	bls	1b8dc <__assert_fail@plt+0x9bd8>
   1b7e4:	ldr	r0, [r5, #24]
   1b7e8:	add	r7, r0, #1
   1b7ec:	mov	sl, r4
   1b7f0:	lsl	r0, r7, #3
   1b7f4:	bl	1a2f8 <__assert_fail@plt+0x85f4>
   1b7f8:	cmp	r0, #0
   1b7fc:	beq	1b8c8 <__assert_fail@plt+0x9bc4>
   1b800:	mov	r4, r0
   1b804:	ldr	r0, [fp, #12]
   1b808:	str	r6, [sp]
   1b80c:	stmib	sp, {r0, r7}
   1b810:	str	r4, [sp, #12]
   1b814:	ldr	r0, [sp, #24]
   1b818:	str	r0, [sp, #16]
   1b81c:	mov	r0, r5
   1b820:	ldr	r1, [sp, #28]
   1b824:	mov	r2, r8
   1b828:	mov	r3, r9
   1b82c:	bl	1af2c <__assert_fail@plt+0x9228>
   1b830:	cmp	r0, #0
   1b834:	beq	1b848 <__assert_fail@plt+0x9b44>
   1b838:	mvn	r7, #1
   1b83c:	cmp	r0, #1
   1b840:	mvneq	r7, #0
   1b844:	b	1b89c <__assert_fail@plt+0x9b98>
   1b848:	cmp	sl, #0
   1b84c:	beq	1b880 <__assert_fail@plt+0x9b7c>
   1b850:	ldrb	r0, [r5, #28]
   1b854:	ubfx	r3, r0, #1, #2
   1b858:	mov	r0, sl
   1b85c:	mov	r1, r4
   1b860:	mov	r2, r7
   1b864:	bl	216bc <__assert_fail@plt+0xf9b8>
   1b868:	ldrb	r1, [r5, #28]
   1b86c:	and	r1, r1, #249	; 0xf9
   1b870:	bfi	r1, r0, #1, #2
   1b874:	strb	r1, [r5, #28]
   1b878:	tst	r0, #3
   1b87c:	beq	1b898 <__assert_fail@plt+0x9b94>
   1b880:	ldr	r0, [fp, #20]
   1b884:	cmp	r0, #0
   1b888:	ldreq	r7, [r4]
   1b88c:	ldrne	r0, [r4, #4]
   1b890:	subne	r7, r0, r9
   1b894:	b	1b89c <__assert_fail@plt+0x9b98>
   1b898:	mvn	r7, #1
   1b89c:	ldr	r5, [sp, #32]
   1b8a0:	mov	r0, r4
   1b8a4:	bl	1a22c <__assert_fail@plt+0x8528>
   1b8a8:	cmp	r5, #0
   1b8ac:	beq	1b8bc <__assert_fail@plt+0x9bb8>
   1b8b0:	ldr	r0, [sp, #20]
   1b8b4:	add	r0, r0, #136	; 0x88
   1b8b8:	bl	11848 <pthread_mutex_unlock@plt>
   1b8bc:	mov	r0, r7
   1b8c0:	sub	sp, fp, #28
   1b8c4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1b8c8:	mvn	r7, #1
   1b8cc:	ldr	r5, [sp, #32]
   1b8d0:	cmp	r5, #0
   1b8d4:	bne	1b8b0 <__assert_fail@plt+0x9bac>
   1b8d8:	b	1b8bc <__assert_fail@plt+0x9bb8>
   1b8dc:	cmp	r7, #1
   1b8e0:	movwlt	r4, #0
   1b8e4:	movwlt	r7, #1
   1b8e8:	b	1b7ec <__assert_fail@plt+0x9ae8>
   1b8ec:	push	{fp, lr}
   1b8f0:	mov	fp, sp
   1b8f4:	sub	sp, sp, #16
   1b8f8:	mov	ip, #0
   1b8fc:	str	ip, [sp, #12]
   1b900:	str	r2, [sp, #4]
   1b904:	ldr	ip, [fp, #12]
   1b908:	str	ip, [sp, #8]
   1b90c:	ldr	ip, [fp, #8]
   1b910:	str	ip, [sp]
   1b914:	bl	1b70c <__assert_fail@plt+0x9a08>
   1b918:	mov	sp, fp
   1b91c:	pop	{fp, pc}
   1b920:	push	{fp, lr}
   1b924:	mov	fp, sp
   1b928:	sub	sp, sp, #24
   1b92c:	mov	ip, #1
   1b930:	str	ip, [sp, #20]
   1b934:	mov	ip, #0
   1b938:	str	ip, [sp, #8]
   1b93c:	ldr	ip, [fp, #20]
   1b940:	str	ip, [sp, #16]
   1b944:	ldr	ip, [fp, #16]
   1b948:	str	ip, [sp, #12]
   1b94c:	ldr	ip, [fp, #12]
   1b950:	str	ip, [sp, #4]
   1b954:	ldr	ip, [fp, #8]
   1b958:	str	ip, [sp]
   1b95c:	bl	1b968 <__assert_fail@plt+0x9c64>
   1b960:	mov	sp, fp
   1b964:	pop	{fp, pc}
   1b968:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1b96c:	add	fp, sp, #28
   1b970:	sub	sp, sp, #20
   1b974:	mov	r6, r2
   1b978:	mov	r8, r1
   1b97c:	mov	r1, r0
   1b980:	ldr	r4, [fp, #8]
   1b984:	orr	r0, r4, r2
   1b988:	ldr	r2, [fp, #24]
   1b98c:	orr	r0, r0, r2
   1b990:	cmp	r0, #0
   1b994:	blt	1ba48 <__assert_fail@plt+0x9d44>
   1b998:	adds	sl, r6, r4
   1b99c:	bvs	1ba48 <__assert_fail@plt+0x9d44>
   1b9a0:	mov	r5, #0
   1b9a4:	cmp	r4, #1
   1b9a8:	blt	1b9fc <__assert_fail@plt+0x9cf8>
   1b9ac:	mov	r9, r3
   1b9b0:	cmp	r6, #1
   1b9b4:	blt	1ba04 <__assert_fail@plt+0x9d00>
   1b9b8:	mov	r0, sl
   1b9bc:	mov	r5, r1
   1b9c0:	bl	1a2f8 <__assert_fail@plt+0x85f4>
   1b9c4:	cmp	r0, #0
   1b9c8:	beq	1ba48 <__assert_fail@plt+0x9d44>
   1b9cc:	mov	r7, r0
   1b9d0:	mov	r1, r8
   1b9d4:	mov	r2, r6
   1b9d8:	bl	1192c <memcpy@plt>
   1b9dc:	add	r0, r7, r6
   1b9e0:	mov	r1, r9
   1b9e4:	mov	r2, r4
   1b9e8:	bl	1192c <memcpy@plt>
   1b9ec:	ldr	r2, [fp, #24]
   1b9f0:	mov	r1, r5
   1b9f4:	mov	r5, r7
   1b9f8:	b	1ba08 <__assert_fail@plt+0x9d04>
   1b9fc:	mov	r7, r8
   1ba00:	b	1ba08 <__assert_fail@plt+0x9d04>
   1ba04:	mov	r7, r9
   1ba08:	ldr	r0, [fp, #28]
   1ba0c:	add	r6, fp, #12
   1ba10:	ldm	r6, {r3, r4, r6}
   1ba14:	str	r4, [sp]
   1ba18:	stmib	sp, {r2, r6}
   1ba1c:	str	r0, [sp, #12]
   1ba20:	mov	r0, r1
   1ba24:	mov	r1, r7
   1ba28:	mov	r2, sl
   1ba2c:	bl	1b70c <__assert_fail@plt+0x9a08>
   1ba30:	mov	r4, r0
   1ba34:	mov	r0, r5
   1ba38:	bl	1a22c <__assert_fail@plt+0x8528>
   1ba3c:	mov	r0, r4
   1ba40:	sub	sp, fp, #28
   1ba44:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1ba48:	mvn	r0, #1
   1ba4c:	sub	sp, fp, #28
   1ba50:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1ba54:	push	{fp, lr}
   1ba58:	mov	fp, sp
   1ba5c:	sub	sp, sp, #24
   1ba60:	mov	ip, #0
   1ba64:	str	ip, [sp, #20]
   1ba68:	ldr	ip, [fp, #24]
   1ba6c:	str	ip, [sp, #16]
   1ba70:	ldr	ip, [fp, #20]
   1ba74:	str	ip, [sp, #12]
   1ba78:	ldr	ip, [fp, #16]
   1ba7c:	str	ip, [sp, #8]
   1ba80:	ldr	ip, [fp, #12]
   1ba84:	str	ip, [sp, #4]
   1ba88:	ldr	ip, [fp, #8]
   1ba8c:	str	ip, [sp]
   1ba90:	bl	1b968 <__assert_fail@plt+0x9c64>
   1ba94:	mov	sp, fp
   1ba98:	pop	{fp, pc}
   1ba9c:	ldrb	ip, [r0, #28]
   1baa0:	bic	ip, ip, #6
   1baa4:	cmp	r2, #0
   1baa8:	beq	1bac8 <__assert_fail@plt+0x9dc4>
   1baac:	push	{fp, lr}
   1bab0:	mov	fp, sp
   1bab4:	ldr	lr, [fp, #8]
   1bab8:	orr	ip, ip, #2
   1babc:	strb	ip, [r0, #28]
   1bac0:	stm	r1, {r2, r3, lr}
   1bac4:	pop	{fp, pc}
   1bac8:	strb	ip, [r0, #28]
   1bacc:	mov	r0, #0
   1bad0:	str	r0, [r1]
   1bad4:	str	r0, [r1, #4]
   1bad8:	str	r0, [r1, #8]
   1badc:	bx	lr
   1bae0:	ldr	r1, [r0, #4]
   1bae4:	movw	r2, #255	; 0xff
   1bae8:	movt	r2, #4
   1baec:	and	r1, r1, r2
   1baf0:	cmp	r1, #6
   1baf4:	bne	1bb00 <__assert_fail@plt+0x9dfc>
   1baf8:	ldr	r0, [r0]
   1bafc:	b	1bb70 <__assert_fail@plt+0x9e6c>
   1bb00:	cmp	r1, #3
   1bb04:	bxne	lr
   1bb08:	ldr	r0, [r0]
   1bb0c:	b	1a22c <__assert_fail@plt+0x8528>
   1bb10:	push	{r4, sl, fp, lr}
   1bb14:	add	fp, sp, #8
   1bb18:	mov	r4, r0
   1bb1c:	ldr	r0, [r0, #24]
   1bb20:	bl	1a22c <__assert_fail@plt+0x8528>
   1bb24:	ldr	r0, [r4, #36]	; 0x24
   1bb28:	bl	1a22c <__assert_fail@plt+0x8528>
   1bb2c:	ldr	r0, [r4, #40]	; 0x28
   1bb30:	add	r1, r4, #4
   1bb34:	cmp	r0, r1
   1bb38:	beq	1bb4c <__assert_fail@plt+0x9e48>
   1bb3c:	ldr	r0, [r0, #8]
   1bb40:	bl	1a22c <__assert_fail@plt+0x8528>
   1bb44:	ldr	r0, [r4, #40]	; 0x28
   1bb48:	bl	1a22c <__assert_fail@plt+0x8528>
   1bb4c:	ldr	r0, [r4, #12]
   1bb50:	bl	1a22c <__assert_fail@plt+0x8528>
   1bb54:	ldr	r0, [r4, #48]	; 0x30
   1bb58:	bl	1a22c <__assert_fail@plt+0x8528>
   1bb5c:	ldr	r0, [r4, #44]	; 0x2c
   1bb60:	bl	1a22c <__assert_fail@plt+0x8528>
   1bb64:	mov	r0, r4
   1bb68:	pop	{r4, sl, fp, lr}
   1bb6c:	b	1a22c <__assert_fail@plt+0x8528>
   1bb70:	push	{r4, sl, fp, lr}
   1bb74:	add	fp, sp, #8
   1bb78:	mov	r4, r0
   1bb7c:	ldr	r0, [r0]
   1bb80:	bl	1a22c <__assert_fail@plt+0x8528>
   1bb84:	ldr	r0, [r4, #4]
   1bb88:	bl	1a22c <__assert_fail@plt+0x8528>
   1bb8c:	ldr	r0, [r4, #8]
   1bb90:	bl	1a22c <__assert_fail@plt+0x8528>
   1bb94:	ldr	r0, [r4, #12]
   1bb98:	bl	1a22c <__assert_fail@plt+0x8528>
   1bb9c:	mov	r0, r4
   1bba0:	pop	{r4, sl, fp, lr}
   1bba4:	b	1a22c <__assert_fail@plt+0x8528>
   1bba8:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   1bbac:	add	fp, sp, #24
   1bbb0:	mov	r5, r1
   1bbb4:	mov	r9, r0
   1bbb8:	mov	r1, #0
   1bbbc:	mov	r2, #160	; 0xa0
   1bbc0:	bl	11b60 <memset@plt>
   1bbc4:	mov	r0, #31
   1bbc8:	str	r0, [r9, #64]	; 0x40
   1bbcc:	movw	r0, #43689	; 0xaaa9
   1bbd0:	movt	r0, #2730	; 0xaaa
   1bbd4:	cmp	r5, r0
   1bbd8:	bhi	1bd4c <__assert_fail@plt+0xa048>
   1bbdc:	add	r0, r5, #1
   1bbe0:	str	r0, [r9, #4]
   1bbe4:	lsl	r0, r0, #3
   1bbe8:	bl	1a2f8 <__assert_fail@plt+0x85f4>
   1bbec:	str	r0, [r9]
   1bbf0:	mov	r0, #1
   1bbf4:	mov	r6, r0
   1bbf8:	lsl	r0, r0, #1
   1bbfc:	cmp	r6, r5
   1bc00:	bls	1bbf4 <__assert_fail@plt+0x9ef0>
   1bc04:	mov	r0, #12
   1bc08:	mov	r1, r6
   1bc0c:	bl	19f8c <__assert_fail@plt+0x8288>
   1bc10:	str	r0, [r9, #32]
   1bc14:	sub	r0, r6, #1
   1bc18:	str	r0, [r9, #68]	; 0x44
   1bc1c:	bl	119f8 <__ctype_get_mb_cur_max@plt>
   1bc20:	str	r0, [r9, #92]	; 0x5c
   1bc24:	mov	r0, #14
   1bc28:	bl	11c14 <nl_langinfo@plt>
   1bc2c:	ldrb	r1, [r0]
   1bc30:	orr	r1, r1, #32
   1bc34:	cmp	r1, #117	; 0x75
   1bc38:	bne	1bc84 <__assert_fail@plt+0x9f80>
   1bc3c:	ldrb	r1, [r0, #1]
   1bc40:	orr	r1, r1, #32
   1bc44:	cmp	r1, #116	; 0x74
   1bc48:	bne	1bc84 <__assert_fail@plt+0x9f80>
   1bc4c:	ldrb	r1, [r0, #2]
   1bc50:	orr	r1, r1, #32
   1bc54:	cmp	r1, #102	; 0x66
   1bc58:	bne	1bc84 <__assert_fail@plt+0x9f80>
   1bc5c:	ldrb	r1, [r0, #3]!
   1bc60:	cmp	r1, #45	; 0x2d
   1bc64:	addeq	r0, r0, #1
   1bc68:	movw	r1, #44812	; 0xaf0c
   1bc6c:	movt	r1, #2
   1bc70:	bl	1189c <strcmp@plt>
   1bc74:	cmp	r0, #0
   1bc78:	ldrbeq	r0, [r9, #88]	; 0x58
   1bc7c:	orreq	r0, r0, #4
   1bc80:	strbeq	r0, [r9, #88]	; 0x58
   1bc84:	ldrb	r0, [r9, #88]	; 0x58
   1bc88:	and	r1, r0, #247	; 0xf7
   1bc8c:	strb	r1, [r9, #88]	; 0x58
   1bc90:	ldr	r1, [r9, #92]	; 0x5c
   1bc94:	cmp	r1, #2
   1bc98:	blt	1bd30 <__assert_fail@plt+0xa02c>
   1bc9c:	tst	r0, #4
   1bca0:	bne	1bd24 <__assert_fail@plt+0xa020>
   1bca4:	mov	r8, #1
   1bca8:	mov	r0, #32
   1bcac:	mov	r1, #1
   1bcb0:	bl	19f8c <__assert_fail@plt+0x8288>
   1bcb4:	str	r0, [r9, #60]	; 0x3c
   1bcb8:	cmp	r0, #0
   1bcbc:	beq	1bd4c <__assert_fail@plt+0xa048>
   1bcc0:	mov	r7, #0
   1bcc4:	mov	r6, #0
   1bcc8:	mov	r4, #0
   1bccc:	add	r5, r7, r4
   1bcd0:	mov	r0, r5
   1bcd4:	bl	11b78 <btowc@plt>
   1bcd8:	cmn	r0, #1
   1bcdc:	ldrne	r1, [r9, #60]	; 0x3c
   1bce0:	ldrne	r2, [r1, r6, lsl #2]
   1bce4:	orrne	r2, r2, r8, lsl r4
   1bce8:	strne	r2, [r1, r6, lsl #2]
   1bcec:	cmp	r5, #127	; 0x7f
   1bcf0:	bhi	1bd04 <__assert_fail@plt+0xa000>
   1bcf4:	cmp	r5, r0
   1bcf8:	ldrbne	r0, [r9, #88]	; 0x58
   1bcfc:	orrne	r0, r0, #8
   1bd00:	strbne	r0, [r9, #88]	; 0x58
   1bd04:	add	r4, r4, #1
   1bd08:	cmp	r4, #32
   1bd0c:	bne	1bccc <__assert_fail@plt+0x9fc8>
   1bd10:	add	r6, r6, #1
   1bd14:	add	r7, r7, #32
   1bd18:	cmp	r6, #8
   1bd1c:	bne	1bcc8 <__assert_fail@plt+0x9fc4>
   1bd20:	b	1bd30 <__assert_fail@plt+0xa02c>
   1bd24:	movw	r0, #44764	; 0xaedc
   1bd28:	movt	r0, #2
   1bd2c:	str	r0, [r9, #60]	; 0x3c
   1bd30:	ldr	r0, [r9]
   1bd34:	cmp	r0, #0
   1bd38:	ldrne	r1, [r9, #32]
   1bd3c:	movne	r0, #0
   1bd40:	cmpne	r1, #0
   1bd44:	moveq	r0, #12
   1bd48:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   1bd4c:	mov	r0, #12
   1bd50:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   1bd54:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   1bd58:	add	fp, sp, #24
   1bd5c:	sub	sp, sp, #8
   1bd60:	mov	r8, r3
   1bd64:	mov	r5, r2
   1bd68:	mov	r7, r1
   1bd6c:	mov	r4, r0
   1bd70:	vmov.i32	q8, #0	; 0x00000000
   1bd74:	mov	r0, #80	; 0x50
   1bd78:	mov	r1, r4
   1bd7c:	vst1.32	{d16-d17}, [r1], r0
   1bd80:	mov	r0, #0
   1bd84:	str	r0, [r1]
   1bd88:	add	r0, r4, #64	; 0x40
   1bd8c:	vst1.32	{d16-d17}, [r0]
   1bd90:	add	r0, r4, #48	; 0x30
   1bd94:	vst1.32	{d16-d17}, [r0]
   1bd98:	add	r0, r4, #32
   1bd9c:	vst1.32	{d16-d17}, [r0]
   1bda0:	add	r0, r4, #16
   1bda4:	vst1.32	{d16-d17}, [r0]
   1bda8:	ldr	r6, [fp, #12]
   1bdac:	str	r6, [sp, #4]
   1bdb0:	ldr	r9, [fp, #8]
   1bdb4:	str	r9, [sp]
   1bdb8:	mov	r0, r7
   1bdbc:	mov	r1, r2
   1bdc0:	mov	r2, r4
   1bdc4:	bl	1c598 <__assert_fail@plt+0xa894>
   1bdc8:	cmp	r5, #1
   1bdcc:	blt	1bde4 <__assert_fail@plt+0xa0e0>
   1bdd0:	add	r1, r5, #1
   1bdd4:	mov	r0, r4
   1bdd8:	bl	1c5f0 <__assert_fail@plt+0xa8ec>
   1bddc:	cmp	r0, #0
   1bde0:	bne	1be9c <__assert_fail@plt+0xa198>
   1bde4:	ldrb	r0, [r4, #75]	; 0x4b
   1bde8:	cmp	r0, #0
   1bdec:	ldrne	r7, [r4, #4]
   1bdf0:	str	r7, [r4, #4]
   1bdf4:	ldr	r0, [r6, #92]	; 0x5c
   1bdf8:	cmp	r9, #0
   1bdfc:	beq	1be58 <__assert_fail@plt+0xa154>
   1be00:	cmp	r0, #2
   1be04:	blt	1be6c <__assert_fail@plt+0xa168>
   1be08:	mov	r0, r4
   1be0c:	bl	1c694 <__assert_fail@plt+0xa990>
   1be10:	cmp	r0, #0
   1be14:	bne	1be9c <__assert_fail@plt+0xa198>
   1be18:	ldr	r1, [r4, #32]
   1be1c:	mov	r0, #0
   1be20:	cmp	r1, r5
   1be24:	bge	1be9c <__assert_fail@plt+0xa198>
   1be28:	ldr	r2, [r4, #28]
   1be2c:	ldr	r1, [r4, #36]	; 0x24
   1be30:	ldr	r3, [r6, #92]	; 0x5c
   1be34:	add	r2, r3, r2
   1be38:	cmp	r1, r2
   1be3c:	bgt	1be9c <__assert_fail@plt+0xa198>
   1be40:	lsl	r1, r1, #1
   1be44:	mov	r0, r4
   1be48:	bl	1c5f0 <__assert_fail@plt+0xa8ec>
   1be4c:	cmp	r0, #0
   1be50:	beq	1be08 <__assert_fail@plt+0xa104>
   1be54:	b	1be9c <__assert_fail@plt+0xa198>
   1be58:	cmp	r0, #2
   1be5c:	blt	1be78 <__assert_fail@plt+0xa174>
   1be60:	mov	r0, r4
   1be64:	bl	1ccc8 <__assert_fail@plt+0xafc4>
   1be68:	b	1be98 <__assert_fail@plt+0xa194>
   1be6c:	mov	r0, r4
   1be70:	bl	1cc5c <__assert_fail@plt+0xaf58>
   1be74:	b	1be98 <__assert_fail@plt+0xa194>
   1be78:	cmp	r8, #0
   1be7c:	beq	1be8c <__assert_fail@plt+0xa188>
   1be80:	mov	r0, r4
   1be84:	bl	1ce58 <__assert_fail@plt+0xb154>
   1be88:	b	1be98 <__assert_fail@plt+0xa194>
   1be8c:	ldr	r0, [r4, #36]	; 0x24
   1be90:	str	r0, [r4, #28]
   1be94:	str	r0, [r4, #32]
   1be98:	mov	r0, #0
   1be9c:	sub	sp, fp, #24
   1bea0:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   1bea4:	push	{r4, r5, fp, lr}
   1bea8:	add	fp, sp, #8
   1beac:	ldr	r4, [r0]
   1beb0:	ldr	r0, [r4, #56]	; 0x38
   1beb4:	cmp	r0, #0
   1beb8:	beq	1bed0 <__assert_fail@plt+0xa1cc>
   1bebc:	ldr	r5, [r0]
   1bec0:	bl	1a22c <__assert_fail@plt+0x8528>
   1bec4:	cmp	r5, #0
   1bec8:	mov	r0, r5
   1becc:	bne	1bebc <__assert_fail@plt+0xa1b8>
   1bed0:	mov	r0, #31
   1bed4:	str	r0, [r4, #64]	; 0x40
   1bed8:	mov	r5, #0
   1bedc:	str	r5, [r4, #52]	; 0x34
   1bee0:	str	r5, [r4, #56]	; 0x38
   1bee4:	ldr	r0, [r4, #16]
   1bee8:	bl	1a22c <__assert_fail@plt+0x8528>
   1beec:	str	r5, [r4, #16]
   1bef0:	pop	{r4, r5, fp, pc}
   1bef4:	push	{r4, sl, fp, lr}
   1bef8:	add	fp, sp, #8
   1befc:	mov	r4, r0
   1bf00:	ldr	r0, [r0, #8]
   1bf04:	bl	1a22c <__assert_fail@plt+0x8528>
   1bf08:	ldr	r0, [r4, #12]
   1bf0c:	bl	1a22c <__assert_fail@plt+0x8528>
   1bf10:	ldrb	r0, [r4, #75]	; 0x4b
   1bf14:	cmp	r0, #0
   1bf18:	popeq	{r4, sl, fp, pc}
   1bf1c:	ldr	r0, [r4, #4]
   1bf20:	pop	{r4, sl, fp, lr}
   1bf24:	b	1a22c <__assert_fail@plt+0x8528>
   1bf28:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1bf2c:	add	fp, sp, #28
   1bf30:	sub	sp, sp, #20
   1bf34:	mov	r8, r3
   1bf38:	mov	r4, r2
   1bf3c:	mov	r7, r1
   1bf40:	mov	r5, r0
   1bf44:	ldr	r9, [r1]
   1bf48:	str	r2, [r9, #128]	; 0x80
   1bf4c:	orr	r2, r2, #8388608	; 0x800000
   1bf50:	add	sl, sp, #12
   1bf54:	mov	r0, sl
   1bf58:	mov	r1, r5
   1bf5c:	bl	1ceb8 <__assert_fail@plt+0xb1b4>
   1bf60:	mov	r6, #0
   1bf64:	stm	sp, {r6, r8}
   1bf68:	mov	r0, r5
   1bf6c:	mov	r1, r7
   1bf70:	mov	r2, sl
   1bf74:	mov	r3, r4
   1bf78:	bl	1ced8 <__assert_fail@plt+0xb1d4>
   1bf7c:	mov	r7, r0
   1bf80:	cmp	r0, #0
   1bf84:	bne	1bf94 <__assert_fail@plt+0xa290>
   1bf88:	ldr	r0, [r8]
   1bf8c:	cmp	r0, #0
   1bf90:	bne	1bfe0 <__assert_fail@plt+0xa2dc>
   1bf94:	mov	r0, r9
   1bf98:	mov	r1, #0
   1bf9c:	mov	r2, #0
   1bfa0:	mov	r3, #2
   1bfa4:	bl	1d044 <__assert_fail@plt+0xb340>
   1bfa8:	mov	r4, r0
   1bfac:	cmp	r7, #0
   1bfb0:	beq	1bfd0 <__assert_fail@plt+0xa2cc>
   1bfb4:	mov	r0, r9
   1bfb8:	mov	r1, r7
   1bfbc:	mov	r2, r4
   1bfc0:	mov	r3, #16
   1bfc4:	bl	1d044 <__assert_fail@plt+0xb340>
   1bfc8:	mov	r6, r0
   1bfcc:	b	1bfd4 <__assert_fail@plt+0xa2d0>
   1bfd0:	mov	r6, r4
   1bfd4:	cmp	r4, #0
   1bfd8:	cmpne	r6, #0
   1bfdc:	beq	1bfec <__assert_fail@plt+0xa2e8>
   1bfe0:	mov	r0, r6
   1bfe4:	sub	sp, fp, #28
   1bfe8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1bfec:	mov	r0, #12
   1bff0:	str	r0, [r8]
   1bff4:	mov	r6, #0
   1bff8:	b	1bfe0 <__assert_fail@plt+0xa2dc>
   1bffc:	push	{r4, r5, r6, r7, fp, lr}
   1c000:	add	fp, sp, #16
   1c004:	mov	r6, r0
   1c008:	ldr	r4, [r0]
   1c00c:	ldr	r0, [r4, #4]
   1c010:	lsl	r0, r0, #2
   1c014:	bl	1a2f8 <__assert_fail@plt+0x85f4>
   1c018:	str	r0, [r4, #12]
   1c01c:	ldr	r0, [r4, #4]
   1c020:	lsl	r0, r0, #2
   1c024:	bl	1a2f8 <__assert_fail@plt+0x85f4>
   1c028:	str	r0, [r4, #16]
   1c02c:	ldr	r0, [r4, #4]
   1c030:	add	r0, r0, r0, lsl #1
   1c034:	lsl	r0, r0, #2
   1c038:	bl	1a2f8 <__assert_fail@plt+0x85f4>
   1c03c:	str	r0, [r4, #20]
   1c040:	ldr	r0, [r4, #4]
   1c044:	add	r0, r0, r0, lsl #1
   1c048:	lsl	r0, r0, #2
   1c04c:	bl	1a2f8 <__assert_fail@plt+0x85f4>
   1c050:	str	r0, [r4, #24]
   1c054:	ldr	r1, [r4, #12]
   1c058:	mov	r7, #12
   1c05c:	cmp	r1, #0
   1c060:	ldrne	r1, [r4, #16]
   1c064:	cmpne	r1, #0
   1c068:	beq	1c07c <__assert_fail@plt+0xa378>
   1c06c:	cmp	r0, #0
   1c070:	ldrne	r0, [r4, #20]
   1c074:	cmpne	r0, #0
   1c078:	bne	1c084 <__assert_fail@plt+0xa380>
   1c07c:	mov	r0, r7
   1c080:	pop	{r4, r5, r6, r7, fp, pc}
   1c084:	ldr	r0, [r6, #24]
   1c088:	lsl	r0, r0, #2
   1c08c:	bl	1a2f8 <__assert_fail@plt+0x85f4>
   1c090:	str	r0, [r4, #132]	; 0x84
   1c094:	cmp	r0, #0
   1c098:	beq	1c13c <__assert_fail@plt+0xa438>
   1c09c:	ldr	r0, [r6, #24]
   1c0a0:	cmp	r0, #0
   1c0a4:	beq	1c0c4 <__assert_fail@plt+0xa3c0>
   1c0a8:	ldr	r0, [r4, #132]	; 0x84
   1c0ac:	mov	r1, #0
   1c0b0:	str	r1, [r0, r1, lsl #2]
   1c0b4:	add	r1, r1, #1
   1c0b8:	ldr	r2, [r6, #24]
   1c0bc:	cmp	r1, r2
   1c0c0:	bcc	1c0b0 <__assert_fail@plt+0xa3ac>
   1c0c4:	ldr	r0, [r4, #52]	; 0x34
   1c0c8:	movw	r1, #65492	; 0xffd4
   1c0cc:	movt	r1, #1
   1c0d0:	mov	r2, r4
   1c0d4:	bl	1ff54 <__assert_fail@plt+0xe250>
   1c0d8:	ldr	r1, [r6, #24]
   1c0dc:	mov	r0, #0
   1c0e0:	cmp	r1, #0
   1c0e4:	beq	1c120 <__assert_fail@plt+0xa41c>
   1c0e8:	ldr	r2, [r4, #132]	; 0x84
   1c0ec:	ldr	r3, [r2]
   1c0f0:	cmp	r3, #0
   1c0f4:	bne	1c124 <__assert_fail@plt+0xa420>
   1c0f8:	mov	r3, #1
   1c0fc:	mov	r0, r3
   1c100:	ldr	r1, [r6, #24]
   1c104:	cmp	r3, r1
   1c108:	bcs	1c124 <__assert_fail@plt+0xa420>
   1c10c:	ldr	r5, [r2, r0, lsl #2]
   1c110:	add	r3, r0, #1
   1c114:	cmp	r0, r5
   1c118:	beq	1c0fc <__assert_fail@plt+0xa3f8>
   1c11c:	b	1c124 <__assert_fail@plt+0xa420>
   1c120:	mov	r1, #0
   1c124:	cmp	r0, r1
   1c128:	bne	1c13c <__assert_fail@plt+0xa438>
   1c12c:	ldr	r0, [r4, #132]	; 0x84
   1c130:	bl	1a22c <__assert_fail@plt+0x8528>
   1c134:	mov	r0, #0
   1c138:	str	r0, [r4, #132]	; 0x84
   1c13c:	ldr	r0, [r4, #52]	; 0x34
   1c140:	movw	r1, #108	; 0x6c
   1c144:	movt	r1, #2
   1c148:	mov	r2, r6
   1c14c:	bl	1da7c <__assert_fail@plt+0xbd78>
   1c150:	cmp	r0, #0
   1c154:	bne	1c214 <__assert_fail@plt+0xa510>
   1c158:	ldr	r0, [r4, #52]	; 0x34
   1c15c:	movw	r1, #244	; 0xf4
   1c160:	movt	r1, #2
   1c164:	mov	r2, r4
   1c168:	bl	1da7c <__assert_fail@plt+0xbd78>
   1c16c:	cmp	r0, #0
   1c170:	bne	1c214 <__assert_fail@plt+0xa510>
   1c174:	ldr	r0, [r4, #52]	; 0x34
   1c178:	movw	r1, #384	; 0x180
   1c17c:	movt	r1, #2
   1c180:	mov	r2, r4
   1c184:	bl	1ff54 <__assert_fail@plt+0xe250>
   1c188:	ldr	r0, [r4, #52]	; 0x34
   1c18c:	movw	r1, #484	; 0x1e4
   1c190:	movt	r1, #2
   1c194:	mov	r2, r4
   1c198:	bl	1ff54 <__assert_fail@plt+0xe250>
   1c19c:	cmp	r0, #0
   1c1a0:	bne	1c214 <__assert_fail@plt+0xa510>
   1c1a4:	mov	r0, r4
   1c1a8:	bl	202f8 <__assert_fail@plt+0xe5f4>
   1c1ac:	cmp	r0, #0
   1c1b0:	popne	{r4, r5, r6, r7, fp, pc}
   1c1b4:	ldrb	r0, [r6, #28]
   1c1b8:	tst	r0, #16
   1c1bc:	bne	1c1d4 <__assert_fail@plt+0xa4d0>
   1c1c0:	ldr	r0, [r6, #24]
   1c1c4:	cmp	r0, #0
   1c1c8:	ldrbne	r0, [r4, #88]	; 0x58
   1c1cc:	tstne	r0, #1
   1c1d0:	bne	1c1e0 <__assert_fail@plt+0xa4dc>
   1c1d4:	ldr	r0, [r4, #76]	; 0x4c
   1c1d8:	cmp	r0, #0
   1c1dc:	beq	1c208 <__assert_fail@plt+0xa504>
   1c1e0:	ldr	r0, [r4, #8]
   1c1e4:	add	r0, r0, r0, lsl #1
   1c1e8:	lsl	r0, r0, #2
   1c1ec:	bl	1a2f8 <__assert_fail@plt+0x85f4>
   1c1f0:	str	r0, [r4, #28]
   1c1f4:	cmp	r0, #0
   1c1f8:	beq	1c07c <__assert_fail@plt+0xa378>
   1c1fc:	mov	r0, r4
   1c200:	pop	{r4, r5, r6, r7, fp, lr}
   1c204:	b	203b4 <__assert_fail@plt+0xe6b0>
   1c208:	mov	r7, #0
   1c20c:	mov	r0, r7
   1c210:	pop	{r4, r5, r6, r7, fp, pc}
   1c214:	pop	{r4, r5, r6, r7, fp, pc}
   1c218:	push	{r4, r5, r6, r7, fp, lr}
   1c21c:	add	fp, sp, #16
   1c220:	ldr	r1, [r0, #8]
   1c224:	cmp	r1, #0
   1c228:	beq	1c308 <__assert_fail@plt+0xa604>
   1c22c:	ldr	r3, [r0]
   1c230:	mov	r5, #0
   1c234:	mov	ip, #1
   1c238:	mov	lr, #139	; 0x8b
   1c23c:	mov	r2, #0
   1c240:	mov	r4, #0
   1c244:	add	r1, r3, r4, lsl #3
   1c248:	ldrb	r6, [r1, #4]
   1c24c:	sub	r6, r6, #1
   1c250:	cmp	r6, #11
   1c254:	bhi	1c3b0 <__assert_fail@plt+0xa6ac>
   1c258:	add	r7, pc, #0
   1c25c:	ldr	pc, [r7, r6, lsl #2]
   1c260:	andeq	ip, r1, r8, ror #5
   1c264:	muleq	r1, r0, r2
   1c268:	andeq	ip, r1, r4, lsr #5
   1c26c:	muleq	r1, r0, r2
   1c270:	andeq	ip, r1, r0, lsl #6
   1c274:	andeq	ip, r1, ip, lsr #7
   1c278:			; <UNDEFINED> instruction: 0x0001c3b0
   1c27c:	muleq	r1, r0, r2
   1c280:	muleq	r1, r0, r2
   1c284:	muleq	r1, r0, r2
   1c288:	muleq	r1, r0, r2
   1c28c:	andeq	ip, r1, r8, asr #5
   1c290:	ldr	r1, [r0, #8]
   1c294:	add	r4, r4, #1
   1c298:	cmp	r4, r1
   1c29c:	bcc	1c244 <__assert_fail@plt+0xa540>
   1c2a0:	b	1c310 <__assert_fail@plt+0xa60c>
   1c2a4:	ldr	r1, [r3, r4, lsl #3]
   1c2a8:	mov	r6, #4
   1c2ac:	ldr	r7, [r1, r6, lsl #2]
   1c2b0:	cmp	r7, #0
   1c2b4:	popne	{r4, r5, r6, r7, fp, pc}
   1c2b8:	add	r6, r6, #1
   1c2bc:	cmp	r6, #7
   1c2c0:	bls	1c2ac <__assert_fail@plt+0xa5a8>
   1c2c4:	b	1c290 <__assert_fail@plt+0xa58c>
   1c2c8:	ldr	r1, [r3, r4, lsl #3]
   1c2cc:	sub	r1, r1, #16
   1c2d0:	ror	r1, r1, #4
   1c2d4:	cmp	r1, #7
   1c2d8:	bhi	1c3ac <__assert_fail@plt+0xa6a8>
   1c2dc:	tst	lr, ip, lsl r1
   1c2e0:	bne	1c290 <__assert_fail@plt+0xa58c>
   1c2e4:	b	1c3ac <__assert_fail@plt+0xa6a8>
   1c2e8:	ldrsb	r1, [r1]
   1c2ec:	cmp	r1, #0
   1c2f0:	mov	r1, #0
   1c2f4:	movwlt	r1, #1
   1c2f8:	orr	r2, r2, r1
   1c2fc:	b	1c290 <__assert_fail@plt+0xa58c>
   1c300:	mov	r5, #1
   1c304:	b	1c290 <__assert_fail@plt+0xa58c>
   1c308:	mov	r2, #0
   1c30c:	mov	r5, #0
   1c310:	tst	r2, #1
   1c314:	tsteq	r5, #1
   1c318:	beq	1c37c <__assert_fail@plt+0xa678>
   1c31c:	ldr	r1, [r0, #8]
   1c320:	cmp	r1, #0
   1c324:	beq	1c37c <__assert_fail@plt+0xa678>
   1c328:	mov	r2, #0
   1c32c:	mov	r3, #7
   1c330:	ldr	r1, [r0]
   1c334:	add	r4, r1, r2, lsl #3
   1c338:	ldr	r1, [r4, #4]
   1c33c:	uxtb	r6, r1
   1c340:	cmp	r6, #5
   1c344:	beq	1c364 <__assert_fail@plt+0xa660>
   1c348:	cmp	r6, #1
   1c34c:	bne	1c36c <__assert_fail@plt+0xa668>
   1c350:	ldrsb	r7, [r4]
   1c354:	cmn	r7, #1
   1c358:	bgt	1c36c <__assert_fail@plt+0xa668>
   1c35c:	bic	r1, r1, #2097152	; 0x200000
   1c360:	b	1c368 <__assert_fail@plt+0xa664>
   1c364:	bfi	r1, r3, #0, #8
   1c368:	str	r1, [r4, #4]
   1c36c:	ldr	r1, [r0, #8]
   1c370:	add	r2, r2, #1
   1c374:	cmp	r2, r1
   1c378:	bcc	1c330 <__assert_fail@plt+0xa62c>
   1c37c:	mov	r1, #1
   1c380:	str	r1, [r0, #92]	; 0x5c
   1c384:	ldr	r1, [r0, #76]	; 0x4c
   1c388:	mov	r2, #0
   1c38c:	cmp	r1, #0
   1c390:	movwgt	r2, #1
   1c394:	orr	r1, r5, r2
   1c398:	and	r1, r1, #1
   1c39c:	ldrb	r2, [r0, #88]	; 0x58
   1c3a0:	and	r2, r2, #249	; 0xf9
   1c3a4:	orr	r1, r2, r1, lsl #1
   1c3a8:	strb	r1, [r0, #88]	; 0x58
   1c3ac:	pop	{r4, r5, r6, r7, fp, pc}
   1c3b0:	bl	11cc8 <abort@plt>
   1c3b4:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   1c3b8:	add	fp, sp, #24
   1c3bc:	sub	sp, sp, #16
   1c3c0:	mov	r9, r0
   1c3c4:	ldr	r0, [r0, #24]
   1c3c8:	ldr	r1, [r9, #52]	; 0x34
   1c3cc:	ldr	r1, [r1, #12]
   1c3d0:	ldr	r1, [r1, #28]
   1c3d4:	str	r1, [r9, #72]	; 0x48
   1c3d8:	add	r1, r1, r1, lsl #1
   1c3dc:	add	r1, r0, r1, lsl #2
   1c3e0:	mov	r0, sp
   1c3e4:	bl	210f8 <__assert_fail@plt+0xf3f4>
   1c3e8:	str	r0, [sp, #12]
   1c3ec:	cmp	r0, #0
   1c3f0:	bne	1c590 <__assert_fail@plt+0xa88c>
   1c3f4:	ldr	r0, [r9, #76]	; 0x4c
   1c3f8:	cmp	r0, #1
   1c3fc:	ldrge	r0, [sp, #4]
   1c400:	cmpge	r0, #1
   1c404:	blt	1c4d0 <__assert_fail@plt+0xa7cc>
   1c408:	mov	r7, #0
   1c40c:	mov	r8, sp
   1c410:	ldr	r3, [sp, #8]
   1c414:	ldr	r1, [r3, r7, lsl #2]
   1c418:	ldr	r6, [r9]
   1c41c:	add	r2, r6, r1, lsl #3
   1c420:	ldrb	ip, [r2, #4]
   1c424:	cmp	ip, #4
   1c428:	bne	1c4c0 <__assert_fail@plt+0xa7bc>
   1c42c:	mov	r5, #0
   1c430:	cmp	r0, #1
   1c434:	blt	1c468 <__assert_fail@plt+0xa764>
   1c438:	ldr	r4, [r3, r5, lsl #2]
   1c43c:	add	r2, r6, r4, lsl #3
   1c440:	ldrb	r2, [r2, #4]
   1c444:	cmp	r2, #9
   1c448:	bne	1c45c <__assert_fail@plt+0xa758>
   1c44c:	ldr	r2, [r6, r1, lsl #3]
   1c450:	ldr	r4, [r6, r4, lsl #3]
   1c454:	cmp	r4, r2
   1c458:	beq	1c468 <__assert_fail@plt+0xa764>
   1c45c:	add	r5, r5, #1
   1c460:	cmp	r5, r0
   1c464:	blt	1c438 <__assert_fail@plt+0xa734>
   1c468:	cmp	r5, r0
   1c46c:	beq	1c4c0 <__assert_fail@plt+0xa7bc>
   1c470:	cmp	ip, #4
   1c474:	bne	1c4c0 <__assert_fail@plt+0xa7bc>
   1c478:	ldr	r0, [r9, #20]
   1c47c:	add	r1, r1, r1, lsl #1
   1c480:	add	r0, r0, r1, lsl #2
   1c484:	ldr	r0, [r0, #8]
   1c488:	ldr	r6, [r0]
   1c48c:	mov	r0, r8
   1c490:	mov	r1, r6
   1c494:	bl	21174 <__assert_fail@plt+0xf470>
   1c498:	cmp	r0, #0
   1c49c:	bne	1c4c0 <__assert_fail@plt+0xa7bc>
   1c4a0:	ldr	r0, [r9, #24]
   1c4a4:	add	r1, r6, r6, lsl #1
   1c4a8:	add	r1, r0, r1, lsl #2
   1c4ac:	mov	r0, r8
   1c4b0:	bl	20cf4 <__assert_fail@plt+0xeff0>
   1c4b4:	mov	r7, #0
   1c4b8:	cmp	r0, #0
   1c4bc:	bne	1c590 <__assert_fail@plt+0xa88c>
   1c4c0:	add	r7, r7, #1
   1c4c4:	ldr	r0, [sp, #4]
   1c4c8:	cmp	r7, r0
   1c4cc:	blt	1c410 <__assert_fail@plt+0xa70c>
   1c4d0:	add	r0, sp, #12
   1c4d4:	mov	r2, sp
   1c4d8:	mov	r1, r9
   1c4dc:	mov	r3, #0
   1c4e0:	bl	211e0 <__assert_fail@plt+0xf4dc>
   1c4e4:	str	r0, [r9, #36]	; 0x24
   1c4e8:	cmp	r0, #0
   1c4ec:	beq	1c56c <__assert_fail@plt+0xa868>
   1c4f0:	ldrsb	r1, [r0, #52]	; 0x34
   1c4f4:	cmn	r1, #1
   1c4f8:	ble	1c50c <__assert_fail@plt+0xa808>
   1c4fc:	str	r0, [r9, #40]	; 0x28
   1c500:	str	r0, [r9, #44]	; 0x2c
   1c504:	str	r0, [r9, #48]	; 0x30
   1c508:	b	1c584 <__assert_fail@plt+0xa880>
   1c50c:	add	r5, sp, #12
   1c510:	mov	r6, sp
   1c514:	mov	r0, r5
   1c518:	mov	r1, r9
   1c51c:	mov	r2, r6
   1c520:	mov	r3, #1
   1c524:	bl	211e0 <__assert_fail@plt+0xf4dc>
   1c528:	str	r0, [r9, #40]	; 0x28
   1c52c:	mov	r0, r5
   1c530:	mov	r1, r9
   1c534:	mov	r2, r6
   1c538:	mov	r3, #2
   1c53c:	bl	211e0 <__assert_fail@plt+0xf4dc>
   1c540:	str	r0, [r9, #44]	; 0x2c
   1c544:	mov	r0, r5
   1c548:	mov	r1, r9
   1c54c:	mov	r2, r6
   1c550:	mov	r3, #6
   1c554:	bl	211e0 <__assert_fail@plt+0xf4dc>
   1c558:	str	r0, [r9, #48]	; 0x30
   1c55c:	ldr	r1, [r9, #40]	; 0x28
   1c560:	cmp	r1, #0
   1c564:	cmpne	r0, #0
   1c568:	bne	1c578 <__assert_fail@plt+0xa874>
   1c56c:	ldr	r0, [sp, #12]
   1c570:	sub	sp, fp, #24
   1c574:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   1c578:	ldr	r0, [r9, #44]	; 0x2c
   1c57c:	cmp	r0, #0
   1c580:	beq	1c56c <__assert_fail@plt+0xa868>
   1c584:	ldr	r0, [sp, #8]
   1c588:	bl	1a22c <__assert_fail@plt+0x8528>
   1c58c:	mov	r0, #0
   1c590:	sub	sp, fp, #24
   1c594:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   1c598:	str	r1, [r2, #48]	; 0x30
   1c59c:	str	r0, [r2]
   1c5a0:	str	r1, [r2, #44]	; 0x2c
   1c5a4:	str	r3, [r2, #64]	; 0x40
   1c5a8:	ldr	r0, [sp]
   1c5ac:	strb	r0, [r2, #72]	; 0x48
   1c5b0:	cmp	r3, #0
   1c5b4:	movwne	r3, #1
   1c5b8:	orr	r0, r3, r0
   1c5bc:	strb	r0, [r2, #75]	; 0x4b
   1c5c0:	ldr	r0, [sp, #4]
   1c5c4:	ldr	r3, [r0, #92]	; 0x5c
   1c5c8:	str	r3, [r2, #80]	; 0x50
   1c5cc:	ldrb	r3, [r0, #88]	; 0x58
   1c5d0:	ubfx	r3, r3, #2, #1
   1c5d4:	strb	r3, [r2, #73]	; 0x49
   1c5d8:	ldrb	r0, [r0, #88]	; 0x58
   1c5dc:	str	r1, [r2, #56]	; 0x38
   1c5e0:	str	r1, [r2, #52]	; 0x34
   1c5e4:	ubfx	r0, r0, #3, #1
   1c5e8:	strb	r0, [r2, #74]	; 0x4a
   1c5ec:	bx	lr
   1c5f0:	push	{r4, r5, r6, r7, fp, lr}
   1c5f4:	add	fp, sp, #16
   1c5f8:	mov	r4, r1
   1c5fc:	mov	r5, r0
   1c600:	ldr	r0, [r0, #80]	; 0x50
   1c604:	cmp	r0, #2
   1c608:	blt	1c654 <__assert_fail@plt+0xa950>
   1c60c:	mov	r6, #12
   1c610:	cmn	r4, #-1073741823	; 0xc0000001
   1c614:	bhi	1c680 <__assert_fail@plt+0xa97c>
   1c618:	ldr	r0, [r5, #8]
   1c61c:	lsl	r7, r4, #2
   1c620:	mov	r1, r7
   1c624:	bl	1a388 <__assert_fail@plt+0x8684>
   1c628:	cmp	r0, #0
   1c62c:	beq	1c680 <__assert_fail@plt+0xa97c>
   1c630:	str	r0, [r5, #8]
   1c634:	ldr	r0, [r5, #12]
   1c638:	cmp	r0, #0
   1c63c:	beq	1c654 <__assert_fail@plt+0xa950>
   1c640:	mov	r1, r7
   1c644:	bl	1a388 <__assert_fail@plt+0x8684>
   1c648:	cmp	r0, #0
   1c64c:	beq	1c680 <__assert_fail@plt+0xa97c>
   1c650:	str	r0, [r5, #12]
   1c654:	ldrb	r0, [r5, #75]	; 0x4b
   1c658:	cmp	r0, #0
   1c65c:	beq	1c678 <__assert_fail@plt+0xa974>
   1c660:	ldr	r0, [r5, #4]
   1c664:	mov	r1, r4
   1c668:	bl	1a388 <__assert_fail@plt+0x8684>
   1c66c:	cmp	r0, #0
   1c670:	beq	1c688 <__assert_fail@plt+0xa984>
   1c674:	str	r0, [r5, #4]
   1c678:	str	r4, [r5, #36]	; 0x24
   1c67c:	mov	r6, #0
   1c680:	mov	r0, r6
   1c684:	pop	{r4, r5, r6, r7, fp, pc}
   1c688:	mov	r6, #12
   1c68c:	mov	r0, r6
   1c690:	pop	{r4, r5, r6, r7, fp, pc}
   1c694:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1c698:	add	fp, sp, #28
   1c69c:	sub	sp, sp, #92	; 0x5c
   1c6a0:	mov	r6, r0
   1c6a4:	ldrb	r0, [r0, #74]	; 0x4a
   1c6a8:	ldr	sl, [r6, #28]
   1c6ac:	ldr	r5, [r6, #36]	; 0x24
   1c6b0:	ldr	r1, [r6, #48]	; 0x30
   1c6b4:	cmp	r5, r1
   1c6b8:	movgt	r5, r1
   1c6bc:	cmp	r0, #0
   1c6c0:	str	r6, [sp]
   1c6c4:	bne	1c6e0 <__assert_fail@plt+0xa9dc>
   1c6c8:	ldr	r0, [r6, #64]	; 0x40
   1c6cc:	cmp	r0, #0
   1c6d0:	bne	1c6e0 <__assert_fail@plt+0xa9dc>
   1c6d4:	ldrb	r0, [r6, #76]	; 0x4c
   1c6d8:	cmp	r0, #0
   1c6dc:	beq	1c6e8 <__assert_fail@plt+0xa9e4>
   1c6e0:	ldr	ip, [r6, #32]
   1c6e4:	b	1c900 <__assert_fail@plt+0xabfc>
   1c6e8:	cmp	r5, sl
   1c6ec:	ble	1c6fc <__assert_fail@plt+0xa9f8>
   1c6f0:	add	r8, r6, #16
   1c6f4:	mov	r9, r5
   1c6f8:	b	1c754 <__assert_fail@plt+0xaa50>
   1c6fc:	mov	ip, sl
   1c700:	b	1cc28 <__assert_fail@plt+0xaf24>
   1c704:	add	r0, r4, #1
   1c708:	cmp	r0, #2
   1c70c:	bcc	1c724 <__assert_fail@plt+0xaa20>
   1c710:	ldr	r1, [sp]
   1c714:	ldr	r0, [r1, #36]	; 0x24
   1c718:	ldr	r1, [r1, #48]	; 0x30
   1c71c:	cmp	r0, r1
   1c720:	blt	1c8bc <__assert_fail@plt+0xabb8>
   1c724:	ldr	r1, [sp]
   1c728:	ldr	r0, [r1, #4]
   1c72c:	strb	r6, [r0, r7]
   1c730:	ldr	r0, [r1, #8]
   1c734:	str	r6, [r0, r7, lsl #2]
   1c738:	add	sl, r7, #1
   1c73c:	cmn	r4, #1
   1c740:	bne	1c898 <__assert_fail@plt+0xab94>
   1c744:	ldr	r0, [fp, #-40]	; 0xffffffd8
   1c748:	ldr	r1, [fp, #-36]	; 0xffffffdc
   1c74c:	stm	r8, {r0, r1}
   1c750:	b	1c898 <__assert_fail@plt+0xab94>
   1c754:	ldr	r0, [r6]
   1c758:	ldr	r1, [r6, #24]
   1c75c:	add	r1, r1, sl
   1c760:	ldrb	r6, [r0, r1]
   1c764:	tst	r6, #128	; 0x80
   1c768:	bne	1c7b0 <__assert_fail@plt+0xaaac>
   1c76c:	mov	r0, r8
   1c770:	mov	r4, sl
   1c774:	bl	1195c <mbsinit@plt>
   1c778:	cmp	r0, #0
   1c77c:	beq	1c7b0 <__assert_fail@plt+0xaaac>
   1c780:	mov	r0, r6
   1c784:	bl	11ca4 <towupper@plt>
   1c788:	mov	sl, r4
   1c78c:	cmp	r0, #127	; 0x7f
   1c790:	bhi	1c7b0 <__assert_fail@plt+0xaaac>
   1c794:	ldr	r2, [sp]
   1c798:	ldr	r1, [r2, #4]
   1c79c:	strb	r0, [r1, sl]
   1c7a0:	ldr	r1, [r2, #8]
   1c7a4:	str	r0, [r1, sl, lsl #2]
   1c7a8:	add	sl, sl, #1
   1c7ac:	b	1c898 <__assert_fail@plt+0xab94>
   1c7b0:	ldm	r8, {r0, r1}
   1c7b4:	str	r1, [fp, #-36]	; 0xffffffdc
   1c7b8:	str	r0, [fp, #-40]	; 0xffffffd8
   1c7bc:	sub	r2, r5, sl
   1c7c0:	ldr	r1, [sp]
   1c7c4:	ldr	r0, [r1]
   1c7c8:	ldr	r1, [r1, #24]
   1c7cc:	add	r0, r0, r1
   1c7d0:	mov	r7, sl
   1c7d4:	add	r1, r0, sl
   1c7d8:	add	r0, sp, #12
   1c7dc:	mov	r3, r8
   1c7e0:	bl	1a328 <__assert_fail@plt+0x8624>
   1c7e4:	mov	r4, r0
   1c7e8:	sub	r0, r0, #1
   1c7ec:	cmn	r0, #4
   1c7f0:	bhi	1c704 <__assert_fail@plt+0xaa00>
   1c7f4:	ldr	r0, [sp, #12]
   1c7f8:	bl	11ca4 <towupper@plt>
   1c7fc:	mov	r6, r0
   1c800:	ldr	r0, [sp, #12]
   1c804:	cmp	r6, r0
   1c808:	add	sl, sp, #16
   1c80c:	bne	1c830 <__assert_fail@plt+0xab2c>
   1c810:	ldr	r5, [sp]
   1c814:	ldr	r1, [r5]
   1c818:	ldr	r0, [r5, #4]
   1c81c:	ldr	r2, [r5, #24]
   1c820:	add	r0, r0, r7
   1c824:	add	r1, r1, r2
   1c828:	add	r1, r1, r7
   1c82c:	b	1c858 <__assert_fail@plt+0xab54>
   1c830:	mov	r0, sl
   1c834:	mov	r1, r6
   1c838:	sub	r2, fp, #40	; 0x28
   1c83c:	bl	11884 <wcrtomb@plt>
   1c840:	cmp	r4, r0
   1c844:	bne	1c8ac <__assert_fail@plt+0xaba8>
   1c848:	ldr	r5, [sp]
   1c84c:	ldr	r0, [r5, #4]
   1c850:	add	r0, r0, r7
   1c854:	mov	r1, sl
   1c858:	mov	r2, r4
   1c85c:	bl	1192c <memcpy@plt>
   1c860:	ldr	r0, [r5, #8]
   1c864:	str	r6, [r0, r7, lsl #2]
   1c868:	add	r6, r4, r7
   1c86c:	add	sl, r7, #1
   1c870:	cmp	sl, r6
   1c874:	mov	r5, r9
   1c878:	bge	1c898 <__assert_fail@plt+0xab94>
   1c87c:	mvn	r1, #3
   1c880:	add	r2, r1, r4, lsl #2
   1c884:	add	r0, r0, r7, lsl #2
   1c888:	add	r0, r0, #4
   1c88c:	mov	r1, #255	; 0xff
   1c890:	bl	11b60 <memset@plt>
   1c894:	mov	sl, r6
   1c898:	cmp	r5, sl
   1c89c:	mov	ip, sl
   1c8a0:	ldr	r6, [sp]
   1c8a4:	bgt	1c754 <__assert_fail@plt+0xaa50>
   1c8a8:	b	1cc28 <__assert_fail@plt+0xaf24>
   1c8ac:	mov	ip, r7
   1c8b0:	mov	sl, r7
   1c8b4:	ldr	r6, [sp]
   1c8b8:	b	1c908 <__assert_fail@plt+0xac04>
   1c8bc:	ldr	r0, [fp, #-40]	; 0xffffffd8
   1c8c0:	ldr	r1, [fp, #-36]	; 0xffffffdc
   1c8c4:	stm	r8, {r0, r1}
   1c8c8:	mov	ip, r7
   1c8cc:	mov	sl, r7
   1c8d0:	ldr	r6, [sp]
   1c8d4:	b	1cc28 <__assert_fail@plt+0xaf24>
   1c8d8:	mvn	r1, #3
   1c8dc:	add	r2, r1, r5, lsl #2
   1c8e0:	add	r0, r0, sl, lsl #2
   1c8e4:	add	r0, r0, #4
   1c8e8:	mov	r1, #255	; 0xff
   1c8ec:	mov	r5, ip
   1c8f0:	bl	11b60 <memset@plt>
   1c8f4:	mov	ip, r5
   1c8f8:	mov	sl, r4
   1c8fc:	ldr	r5, [sp, #4]
   1c900:	cmp	sl, r5
   1c904:	bge	1cc28 <__assert_fail@plt+0xaf24>
   1c908:	mov	r3, r6
   1c90c:	ldr	r0, [r6, #16]!
   1c910:	ldr	r1, [r6, #4]
   1c914:	str	r0, [fp, #-40]	; 0xffffffd8
   1c918:	str	r1, [fp, #-36]	; 0xffffffdc
   1c91c:	str	r5, [sp, #4]
   1c920:	sub	r2, r5, sl
   1c924:	ldr	r0, [r6, #48]	; 0x30
   1c928:	cmp	r0, #0
   1c92c:	bne	1c9f4 <__assert_fail@plt+0xacf0>
   1c930:	ldr	r0, [r3]
   1c934:	ldr	r1, [r3, #24]
   1c938:	add	r0, r0, r1
   1c93c:	add	r4, r0, ip
   1c940:	mov	r9, ip
   1c944:	add	r0, sp, #8
   1c948:	mov	r1, r4
   1c94c:	mov	r3, r6
   1c950:	bl	1a328 <__assert_fail@plt+0x8624>
   1c954:	mov	r5, r0
   1c958:	sub	r8, r0, #1
   1c95c:	cmn	r8, #4
   1c960:	bhi	1ca50 <__assert_fail@plt+0xad4c>
   1c964:	ldr	r0, [sp, #8]
   1c968:	bl	11ca4 <towupper@plt>
   1c96c:	mov	r7, r0
   1c970:	ldr	r0, [sp, #8]
   1c974:	cmp	r7, r0
   1c978:	bne	1c990 <__assert_fail@plt+0xac8c>
   1c97c:	ldr	r6, [sp]
   1c980:	ldr	r0, [r6, #4]
   1c984:	add	r0, r0, sl
   1c988:	mov	r1, r4
   1c98c:	b	1c9b8 <__assert_fail@plt+0xacb4>
   1c990:	add	r0, sp, #16
   1c994:	sub	r2, fp, #40	; 0x28
   1c998:	mov	r1, r7
   1c99c:	bl	11884 <wcrtomb@plt>
   1c9a0:	cmp	r0, r5
   1c9a4:	bne	1cacc <__assert_fail@plt+0xadc8>
   1c9a8:	ldr	r6, [sp]
   1c9ac:	ldr	r0, [r6, #4]
   1c9b0:	add	r0, r0, sl
   1c9b4:	add	r1, sp, #16
   1c9b8:	mov	r2, r5
   1c9bc:	bl	1192c <memcpy@plt>
   1c9c0:	ldrb	r0, [r6, #76]	; 0x4c
   1c9c4:	cmp	r0, #0
   1c9c8:	mov	ip, r9
   1c9cc:	bne	1cbf4 <__assert_fail@plt+0xaef0>
   1c9d0:	ldr	r0, [r6, #8]
   1c9d4:	str	r7, [r0, sl, lsl #2]
   1c9d8:	add	r4, r5, sl
   1c9dc:	add	ip, r5, ip
   1c9e0:	add	r1, sl, #1
   1c9e4:	cmp	r1, r4
   1c9e8:	blt	1c8d8 <__assert_fail@plt+0xabd4>
   1c9ec:	mov	sl, r1
   1c9f0:	b	1c8fc <__assert_fail@plt+0xabf8>
   1c9f4:	add	r4, sp, #16
   1c9f8:	cmp	r2, #1
   1c9fc:	ldrge	r1, [sp]
   1ca00:	ldrge	r1, [r1, #80]	; 0x50
   1ca04:	cmpge	r1, #1
   1ca08:	blt	1c940 <__assert_fail@plt+0xac3c>
   1ca0c:	mov	r1, #0
   1ca10:	add	r4, sp, #16
   1ca14:	ldr	r5, [sp]
   1ca18:	ldr	r3, [r5]
   1ca1c:	ldr	r7, [r5, #24]
   1ca20:	add	r3, r3, r7
   1ca24:	add	r3, r3, ip
   1ca28:	ldrb	r3, [r3, r1]
   1ca2c:	ldrb	r3, [r0, r3]
   1ca30:	strb	r3, [r4, r1]
   1ca34:	add	r1, r1, #1
   1ca38:	cmp	r1, r2
   1ca3c:	bge	1c940 <__assert_fail@plt+0xac3c>
   1ca40:	ldr	r3, [r5, #80]	; 0x50
   1ca44:	cmp	r1, r3
   1ca48:	blt	1ca18 <__assert_fail@plt+0xad14>
   1ca4c:	b	1c940 <__assert_fail@plt+0xac3c>
   1ca50:	add	r0, r5, #1
   1ca54:	cmp	r0, #2
   1ca58:	mov	ip, r9
   1ca5c:	ldr	r3, [sp]
   1ca60:	bcc	1ca74 <__assert_fail@plt+0xad70>
   1ca64:	ldr	r0, [r3, #36]	; 0x24
   1ca68:	ldr	r1, [r3, #48]	; 0x30
   1ca6c:	cmp	r0, r1
   1ca70:	blt	1cc18 <__assert_fail@plt+0xaf14>
   1ca74:	ldr	r0, [r3]
   1ca78:	ldr	r2, [r3, #24]
   1ca7c:	ldr	r1, [r3, #64]	; 0x40
   1ca80:	add	r2, r2, ip
   1ca84:	ldrb	r0, [r0, r2]
   1ca88:	cmp	r1, #0
   1ca8c:	ldrbne	r0, [r1, r0]
   1ca90:	ldr	r2, [sp]
   1ca94:	ldr	r1, [r2, #4]
   1ca98:	strb	r0, [r1, sl]
   1ca9c:	ldrb	r1, [r2, #76]	; 0x4c
   1caa0:	cmp	r1, #0
   1caa4:	ldrne	r1, [r2, #12]
   1caa8:	strne	ip, [r1, sl, lsl #2]
   1caac:	ldr	r1, [r2, #8]
   1cab0:	str	r0, [r1, sl, lsl #2]
   1cab4:	add	sl, sl, #1
   1cab8:	add	ip, ip, #1
   1cabc:	cmn	r5, #1
   1cac0:	beq	1cc48 <__assert_fail@plt+0xaf44>
   1cac4:	ldr	r6, [sp]
   1cac8:	b	1c8fc <__assert_fail@plt+0xabf8>
   1cacc:	mov	r2, r0
   1cad0:	cmn	r0, #1
   1cad4:	beq	1c97c <__assert_fail@plt+0xac78>
   1cad8:	mov	ip, r9
   1cadc:	add	r1, r2, sl
   1cae0:	ldr	r3, [sp]
   1cae4:	ldr	r0, [r3, #36]	; 0x24
   1cae8:	cmp	r1, r0
   1caec:	bhi	1cc18 <__assert_fail@plt+0xaf14>
   1caf0:	str	r1, [sp, #4]
   1caf4:	ldr	r1, [r3, #12]
   1caf8:	cmp	r1, #0
   1cafc:	mov	r6, r3
   1cb00:	bne	1cb20 <__assert_fail@plt+0xae1c>
   1cb04:	lsl	r0, r0, #2
   1cb08:	mov	r4, r2
   1cb0c:	bl	1a2f8 <__assert_fail@plt+0x85f4>
   1cb10:	mov	r2, r4
   1cb14:	str	r0, [r6, #12]
   1cb18:	cmp	r0, #0
   1cb1c:	beq	1cc3c <__assert_fail@plt+0xaf38>
   1cb20:	ldrb	r0, [r6, #76]	; 0x4c
   1cb24:	cmp	r0, #0
   1cb28:	bne	1cb54 <__assert_fail@plt+0xae50>
   1cb2c:	cmp	sl, #0
   1cb30:	beq	1cb4c <__assert_fail@plt+0xae48>
   1cb34:	ldr	r0, [r6, #12]
   1cb38:	mov	r1, #0
   1cb3c:	str	r1, [r0, r1, lsl #2]
   1cb40:	add	r1, r1, #1
   1cb44:	cmp	sl, r1
   1cb48:	bne	1cb3c <__assert_fail@plt+0xae38>
   1cb4c:	mov	r0, #1
   1cb50:	strb	r0, [r6, #76]	; 0x4c
   1cb54:	ldr	r0, [r6, #4]
   1cb58:	add	r0, r0, sl
   1cb5c:	add	r1, sp, #16
   1cb60:	mov	r4, r2
   1cb64:	bl	1192c <memcpy@plt>
   1cb68:	ldr	r1, [r6, #8]
   1cb6c:	str	r7, [r1, sl, lsl #2]
   1cb70:	ldr	r0, [r6, #12]
   1cb74:	mov	ip, r9
   1cb78:	str	r9, [r0, sl, lsl #2]
   1cb7c:	cmp	r4, #2
   1cb80:	bcc	1cbb8 <__assert_fail@plt+0xaeb4>
   1cb84:	add	r0, r0, sl, lsl #2
   1cb88:	add	r1, r1, sl, lsl #2
   1cb8c:	mov	r2, #1
   1cb90:	mvn	r3, #0
   1cb94:	cmp	r2, r5
   1cb98:	mov	r7, r8
   1cb9c:	movcc	r7, r2
   1cba0:	add	r7, r7, ip
   1cba4:	str	r7, [r0, r2, lsl #2]
   1cba8:	str	r3, [r1, r2, lsl #2]
   1cbac:	add	r2, r2, #1
   1cbb0:	cmp	r4, r2
   1cbb4:	bne	1cb94 <__assert_fail@plt+0xae90>
   1cbb8:	sub	r1, r4, r5
   1cbbc:	ldr	r0, [r6, #48]	; 0x30
   1cbc0:	ldr	r2, [r6, #52]	; 0x34
   1cbc4:	add	r0, r0, r1
   1cbc8:	str	r0, [r6, #48]	; 0x30
   1cbcc:	cmp	r2, ip
   1cbd0:	ldrgt	r2, [r6, #56]	; 0x38
   1cbd4:	addgt	r1, r2, r1
   1cbd8:	strgt	r1, [r6, #56]	; 0x38
   1cbdc:	add	ip, r5, ip
   1cbe0:	ldr	r5, [r6, #36]	; 0x24
   1cbe4:	cmp	r5, r0
   1cbe8:	movgt	r5, r0
   1cbec:	ldr	sl, [sp, #4]
   1cbf0:	b	1c900 <__assert_fail@plt+0xabfc>
   1cbf4:	ldr	r0, [r6, #12]
   1cbf8:	add	r0, r0, sl, lsl #2
   1cbfc:	mov	r1, ip
   1cc00:	mov	r2, r5
   1cc04:	str	r1, [r0], #4
   1cc08:	add	r1, r1, #1
   1cc0c:	subs	r2, r2, #1
   1cc10:	bne	1cc04 <__assert_fail@plt+0xaf00>
   1cc14:	b	1c9d0 <__assert_fail@plt+0xaccc>
   1cc18:	ldr	r0, [fp, #-40]	; 0xffffffd8
   1cc1c:	ldr	r1, [fp, #-36]	; 0xffffffdc
   1cc20:	stm	r6, {r0, r1}
   1cc24:	mov	r6, r3
   1cc28:	str	sl, [r6, #28]
   1cc2c:	str	ip, [r6, #32]
   1cc30:	mov	r0, #0
   1cc34:	sub	sp, fp, #28
   1cc38:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1cc3c:	mov	r0, #12
   1cc40:	sub	sp, fp, #28
   1cc44:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1cc48:	ldr	r0, [fp, #-40]	; 0xffffffd8
   1cc4c:	ldr	r1, [fp, #-36]	; 0xffffffdc
   1cc50:	stm	r6, {r0, r1}
   1cc54:	ldr	r6, [sp]
   1cc58:	b	1c8fc <__assert_fail@plt+0xabf8>
   1cc5c:	push	{r4, r5, r6, sl, fp, lr}
   1cc60:	add	fp, sp, #16
   1cc64:	mov	r4, r0
   1cc68:	ldr	r5, [r0, #28]
   1cc6c:	ldr	r6, [r0, #36]	; 0x24
   1cc70:	ldr	r0, [r0, #48]	; 0x30
   1cc74:	cmp	r6, r0
   1cc78:	movgt	r6, r0
   1cc7c:	cmp	r5, r6
   1cc80:	bge	1ccbc <__assert_fail@plt+0xafb8>
   1cc84:	ldr	r0, [r4]
   1cc88:	ldr	r2, [r4, #24]
   1cc8c:	ldr	r1, [r4, #64]	; 0x40
   1cc90:	add	r0, r0, r2
   1cc94:	ldrb	r0, [r0, r5]
   1cc98:	cmp	r1, #0
   1cc9c:	ldrbne	r0, [r1, r0]
   1cca0:	bl	11bfc <toupper@plt>
   1cca4:	ldr	r1, [r4, #4]
   1cca8:	strb	r0, [r1, r5]
   1ccac:	add	r5, r5, #1
   1ccb0:	cmp	r5, r6
   1ccb4:	blt	1cc84 <__assert_fail@plt+0xaf80>
   1ccb8:	mov	r5, r6
   1ccbc:	str	r5, [r4, #28]
   1ccc0:	str	r5, [r4, #32]
   1ccc4:	pop	{r4, r5, r6, sl, fp, pc}
   1ccc8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1cccc:	add	fp, sp, #28
   1ccd0:	sub	sp, sp, #68	; 0x44
   1ccd4:	mov	r4, r0
   1ccd8:	ldr	r6, [r0, #28]
   1ccdc:	ldr	r7, [r0, #36]	; 0x24
   1cce0:	ldr	r0, [r0, #48]	; 0x30
   1cce4:	cmp	r7, r0
   1cce8:	movgt	r7, r0
   1ccec:	cmp	r7, r6
   1ccf0:	ble	1ce44 <__assert_fail@plt+0xb140>
   1ccf4:	add	r8, r4, #16
   1ccf8:	mov	r5, sp
   1ccfc:	sub	r2, r7, r6
   1cd00:	ldm	r8, {r9, sl}
   1cd04:	ldr	r0, [r4, #64]	; 0x40
   1cd08:	cmp	r0, #0
   1cd0c:	bne	1cdcc <__assert_fail@plt+0xb0c8>
   1cd10:	ldr	r0, [r4]
   1cd14:	ldr	r1, [r4, #24]
   1cd18:	add	r0, r0, r1
   1cd1c:	add	r1, r0, r6
   1cd20:	mov	r0, r5
   1cd24:	mov	r3, r8
   1cd28:	bl	1a328 <__assert_fail@plt+0x8624>
   1cd2c:	add	r1, r0, #1
   1cd30:	cmp	r1, #2
   1cd34:	bcc	1cd50 <__assert_fail@plt+0xb04c>
   1cd38:	cmn	r0, #2
   1cd3c:	bne	1cd7c <__assert_fail@plt+0xb078>
   1cd40:	ldr	r0, [r4, #36]	; 0x24
   1cd44:	ldr	r1, [r4, #48]	; 0x30
   1cd48:	cmp	r0, r1
   1cd4c:	blt	1ce40 <__assert_fail@plt+0xb13c>
   1cd50:	ldr	r0, [r4]
   1cd54:	ldr	r1, [r4, #24]
   1cd58:	add	r1, r1, r6
   1cd5c:	ldrb	r0, [r0, r1]
   1cd60:	str	r0, [sp]
   1cd64:	ldr	r1, [r4, #64]	; 0x40
   1cd68:	cmp	r1, #0
   1cd6c:	ldrbne	r0, [r1, r0]
   1cd70:	strne	r0, [sp]
   1cd74:	stm	r8, {r9, sl}
   1cd78:	mov	r0, #1
   1cd7c:	mov	r9, r5
   1cd80:	ldr	r3, [r4, #8]
   1cd84:	ldr	r1, [sp]
   1cd88:	str	r1, [r3, r6, lsl #2]
   1cd8c:	add	r5, r0, r6
   1cd90:	add	r1, r6, #1
   1cd94:	cmp	r1, r5
   1cd98:	bge	1cdb8 <__assert_fail@plt+0xb0b4>
   1cd9c:	mvn	r1, #3
   1cda0:	add	r2, r1, r0, lsl #2
   1cda4:	add	r0, r3, r6, lsl #2
   1cda8:	add	r0, r0, #4
   1cdac:	mov	r1, #255	; 0xff
   1cdb0:	bl	11b60 <memset@plt>
   1cdb4:	mov	r1, r5
   1cdb8:	cmp	r7, r1
   1cdbc:	mov	r6, r1
   1cdc0:	mov	r5, r9
   1cdc4:	bgt	1ccfc <__assert_fail@plt+0xaff8>
   1cdc8:	b	1ce48 <__assert_fail@plt+0xb144>
   1cdcc:	cmp	r2, #1
   1cdd0:	add	r1, sp, #4
   1cdd4:	blt	1cd20 <__assert_fail@plt+0xb01c>
   1cdd8:	ldr	r0, [r4, #80]	; 0x50
   1cddc:	cmp	r0, #1
   1cde0:	add	r1, sp, #4
   1cde4:	blt	1cd20 <__assert_fail@plt+0xb01c>
   1cde8:	mov	lr, r5
   1cdec:	mov	r0, #0
   1cdf0:	ldm	r4, {r1, ip}
   1cdf4:	ldr	r5, [r4, #24]
   1cdf8:	ldr	r3, [r4, #64]	; 0x40
   1cdfc:	add	r1, r1, r5
   1ce00:	add	r1, r1, r6
   1ce04:	ldrb	r1, [r1, r0]
   1ce08:	ldrb	r1, [r3, r1]
   1ce0c:	add	r3, ip, r6
   1ce10:	strb	r1, [r3, r0]
   1ce14:	add	r3, sp, #4
   1ce18:	strb	r1, [r3, r0]
   1ce1c:	add	r0, r0, #1
   1ce20:	cmp	r0, r2
   1ce24:	bge	1ce34 <__assert_fail@plt+0xb130>
   1ce28:	ldr	r1, [r4, #80]	; 0x50
   1ce2c:	cmp	r0, r1
   1ce30:	blt	1cdf0 <__assert_fail@plt+0xb0ec>
   1ce34:	add	r1, sp, #4
   1ce38:	mov	r5, lr
   1ce3c:	b	1cd20 <__assert_fail@plt+0xb01c>
   1ce40:	stm	r8, {r9, sl}
   1ce44:	mov	r1, r6
   1ce48:	str	r1, [r4, #28]
   1ce4c:	str	r1, [r4, #32]
   1ce50:	sub	sp, fp, #28
   1ce54:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1ce58:	ldr	r1, [r0, #28]
   1ce5c:	ldr	ip, [r0, #36]	; 0x24
   1ce60:	ldr	r3, [r0, #48]	; 0x30
   1ce64:	cmp	ip, r3
   1ce68:	movgt	ip, r3
   1ce6c:	cmp	r1, ip
   1ce70:	bge	1ceac <__assert_fail@plt+0xb1a8>
   1ce74:	push	{r4, sl, fp, lr}
   1ce78:	add	fp, sp, #8
   1ce7c:	ldm	r0, {r3, lr}
   1ce80:	ldr	r2, [r0, #24]
   1ce84:	ldr	r4, [r0, #64]	; 0x40
   1ce88:	add	r2, r3, r2
   1ce8c:	ldrb	r2, [r2, r1]
   1ce90:	ldrb	r2, [r4, r2]
   1ce94:	strb	r2, [lr, r1]
   1ce98:	add	r1, r1, #1
   1ce9c:	cmp	r1, ip
   1cea0:	blt	1ce7c <__assert_fail@plt+0xb178>
   1cea4:	mov	r1, ip
   1cea8:	pop	{r4, sl, fp, lr}
   1ceac:	str	r1, [r0, #28]
   1ceb0:	str	r1, [r0, #32]
   1ceb4:	bx	lr
   1ceb8:	push	{r4, sl, fp, lr}
   1cebc:	add	fp, sp, #8
   1cec0:	mov	r4, r1
   1cec4:	bl	1d07c <__assert_fail@plt+0xb378>
   1cec8:	ldr	r1, [r4, #40]	; 0x28
   1cecc:	add	r0, r1, r0
   1ced0:	str	r0, [r4, #40]	; 0x28
   1ced4:	pop	{r4, sl, fp, pc}
   1ced8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1cedc:	add	fp, sp, #28
   1cee0:	sub	sp, sp, #28
   1cee4:	mov	r5, r2
   1cee8:	mov	sl, r0
   1ceec:	ldr	r4, [r1]
   1cef0:	ldr	r0, [r4, #84]	; 0x54
   1cef4:	str	r0, [sp, #12]
   1cef8:	ldr	r7, [fp, #12]
   1cefc:	str	r7, [sp, #4]
   1cf00:	ldr	r8, [fp, #8]
   1cf04:	str	r8, [sp]
   1cf08:	mov	r0, sl
   1cf0c:	str	r1, [sp, #16]
   1cf10:	str	r3, [sp, #20]
   1cf14:	bl	1d90c <__assert_fail@plt+0xbc08>
   1cf18:	mov	r6, r0
   1cf1c:	cmp	r0, #0
   1cf20:	bne	1cf30 <__assert_fail@plt+0xb22c>
   1cf24:	ldr	r0, [r7]
   1cf28:	cmp	r0, #0
   1cf2c:	bne	1d018 <__assert_fail@plt+0xb314>
   1cf30:	ldr	r0, [sp, #20]
   1cf34:	orr	r7, r0, #8388608	; 0x800000
   1cf38:	ldrb	r0, [r5, #4]
   1cf3c:	cmp	r0, #10
   1cf40:	bne	1cffc <__assert_fail@plt+0xb2f8>
   1cf44:	mov	r0, r5
   1cf48:	mov	r1, sl
   1cf4c:	mov	r2, r7
   1cf50:	bl	1ceb8 <__assert_fail@plt+0xb1b4>
   1cf54:	ldrb	r0, [r5, #4]
   1cf58:	orr	r1, r0, #8
   1cf5c:	mov	r2, #0
   1cf60:	cmp	r1, #10
   1cf64:	bne	1cf88 <__assert_fail@plt+0xb284>
   1cf68:	mov	r0, r4
   1cf6c:	mov	r1, r6
   1cf70:	mov	r3, #10
   1cf74:	bl	1d044 <__assert_fail@plt+0xb340>
   1cf78:	mov	r6, r0
   1cf7c:	cmp	r0, #0
   1cf80:	bne	1cf38 <__assert_fail@plt+0xb234>
   1cf84:	b	1d00c <__assert_fail@plt+0xb308>
   1cf88:	cmp	r8, #0
   1cf8c:	beq	1cf98 <__assert_fail@plt+0xb294>
   1cf90:	cmp	r0, #9
   1cf94:	beq	1cf68 <__assert_fail@plt+0xb264>
   1cf98:	ldr	r0, [r4, #84]	; 0x54
   1cf9c:	str	r0, [sp, #24]
   1cfa0:	ldr	r0, [sp, #12]
   1cfa4:	str	r0, [r4, #84]	; 0x54
   1cfa8:	mov	r9, r8
   1cfac:	str	r8, [sp]
   1cfb0:	ldr	r8, [fp, #12]
   1cfb4:	str	r8, [sp, #4]
   1cfb8:	mov	r0, sl
   1cfbc:	ldr	r1, [sp, #16]
   1cfc0:	mov	r2, r5
   1cfc4:	ldr	r3, [sp, #20]
   1cfc8:	bl	1d90c <__assert_fail@plt+0xbc08>
   1cfcc:	mov	r2, r0
   1cfd0:	cmp	r0, #0
   1cfd4:	bne	1cfe4 <__assert_fail@plt+0xb2e0>
   1cfd8:	ldr	r0, [r8]
   1cfdc:	cmp	r0, #0
   1cfe0:	bne	1d020 <__assert_fail@plt+0xb31c>
   1cfe4:	ldr	r0, [r4, #84]	; 0x54
   1cfe8:	ldr	r1, [sp, #24]
   1cfec:	orr	r0, r0, r1
   1cff0:	str	r0, [r4, #84]	; 0x54
   1cff4:	mov	r8, r9
   1cff8:	b	1cf68 <__assert_fail@plt+0xb264>
   1cffc:	mov	r4, r6
   1d000:	mov	r0, r4
   1d004:	sub	sp, fp, #28
   1d008:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1d00c:	mov	r0, #12
   1d010:	ldr	r1, [fp, #12]
   1d014:	str	r0, [r1]
   1d018:	mov	r4, #0
   1d01c:	b	1d000 <__assert_fail@plt+0xb2fc>
   1d020:	cmp	r6, #0
   1d024:	beq	1d018 <__assert_fail@plt+0xb314>
   1d028:	movw	r1, #56052	; 0xdaf4
   1d02c:	movt	r1, #1
   1d030:	mov	r4, #0
   1d034:	mov	r0, r6
   1d038:	mov	r2, #0
   1d03c:	bl	1da7c <__assert_fail@plt+0xbd78>
   1d040:	b	1d000 <__assert_fail@plt+0xb2fc>
   1d044:	push	{fp, lr}
   1d048:	mov	fp, sp
   1d04c:	sub	sp, sp, #8
   1d050:	mov	ip, #0
   1d054:	str	ip, [sp]
   1d058:	uxtb	ip, r3
   1d05c:	ldr	r3, [sp, #4]
   1d060:	bfc	r3, #0, #23
   1d064:	orr	r3, r3, ip
   1d068:	str	r3, [sp, #4]
   1d06c:	mov	r3, sp
   1d070:	bl	1e0bc <__assert_fail@plt+0xc3b8>
   1d074:	mov	sp, fp
   1d078:	pop	{fp, pc}
   1d07c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1d080:	add	fp, sp, #28
   1d084:	sub	sp, sp, #12
   1d088:	mov	r7, r1
   1d08c:	mov	sl, r0
   1d090:	ldr	r0, [r1, #40]	; 0x28
   1d094:	ldr	r1, [r1, #56]	; 0x38
   1d098:	cmp	r1, r0
   1d09c:	ble	1d178 <__assert_fail@plt+0xb474>
   1d0a0:	mov	r9, r2
   1d0a4:	ldr	r1, [r7, #4]
   1d0a8:	ldrb	r6, [r1, r0]
   1d0ac:	mov	r5, sl
   1d0b0:	strb	r6, [r5], #4
   1d0b4:	ldr	r4, [r5]
   1d0b8:	bic	r0, r4, #6291456	; 0x600000
   1d0bc:	str	r0, [r5]
   1d0c0:	ldr	r0, [r7, #80]	; 0x50
   1d0c4:	movw	r8, #65280	; 0xff00
   1d0c8:	movt	r8, #65439	; 0xff9f
   1d0cc:	cmp	r0, #2
   1d0d0:	blt	1d0f4 <__assert_fail@plt+0xb3f0>
   1d0d4:	ldr	r1, [r7, #28]
   1d0d8:	ldr	r0, [r7, #40]	; 0x28
   1d0dc:	cmp	r0, r1
   1d0e0:	beq	1d0f4 <__assert_fail@plt+0xb3f0>
   1d0e4:	ldr	r1, [r7, #8]
   1d0e8:	ldr	r0, [r1, r0, lsl #2]
   1d0ec:	cmn	r0, #1
   1d0f0:	beq	1d5ac <__assert_fail@plt+0xb8a8>
   1d0f4:	cmp	r6, #92	; 0x5c
   1d0f8:	bne	1d188 <__assert_fail@plt+0xb484>
   1d0fc:	ldr	r0, [r7, #40]	; 0x28
   1d100:	ldr	r1, [r7, #48]	; 0x30
   1d104:	add	r0, r0, #1
   1d108:	cmp	r0, r1
   1d10c:	bge	1d1dc <__assert_fail@plt+0xb4d8>
   1d110:	mov	r0, r7
   1d114:	bl	1d830 <__assert_fail@plt+0xbb2c>
   1d118:	mov	r6, r0
   1d11c:	strb	r0, [sl]
   1d120:	and	r0, r4, r8
   1d124:	orr	r4, r0, #1
   1d128:	str	r4, [sl, #4]
   1d12c:	ldr	r0, [r7, #80]	; 0x50
   1d130:	cmp	r0, #2
   1d134:	blt	1d400 <__assert_fail@plt+0xb6fc>
   1d138:	ldr	r0, [r7, #40]	; 0x28
   1d13c:	add	r1, r0, #1
   1d140:	mov	r0, r7
   1d144:	bl	1d8f0 <__assert_fail@plt+0xbbec>
   1d148:	mov	r7, r0
   1d14c:	bl	11b30 <iswalnum@plt>
   1d150:	cmp	r0, #0
   1d154:	movwne	r0, #1
   1d158:	sub	r1, r7, #95	; 0x5f
   1d15c:	clz	r1, r1
   1d160:	lsr	r1, r1, #5
   1d164:	orr	r0, r1, r0
   1d168:	ldr	r1, [r5]
   1d16c:	bic	r1, r1, #4194304	; 0x400000
   1d170:	orr	r0, r1, r0, lsl #22
   1d174:	b	1d420 <__assert_fail@plt+0xb71c>
   1d178:	mov	r0, #2
   1d17c:	strb	r0, [sl, #4]
   1d180:	mov	r8, #0
   1d184:	b	1d824 <__assert_fail@plt+0xbb20>
   1d188:	and	r0, r4, r8
   1d18c:	orr	r4, r0, #1
   1d190:	str	r4, [r5]
   1d194:	ldr	r0, [r7, #80]	; 0x50
   1d198:	cmp	r0, #2
   1d19c:	blt	1d1e8 <__assert_fail@plt+0xb4e4>
   1d1a0:	ldr	r1, [r7, #40]	; 0x28
   1d1a4:	mov	r0, r7
   1d1a8:	bl	1d8f0 <__assert_fail@plt+0xbbec>
   1d1ac:	mov	r4, r0
   1d1b0:	bl	11b30 <iswalnum@plt>
   1d1b4:	cmp	r0, #0
   1d1b8:	movwne	r0, #1
   1d1bc:	sub	r1, r4, #95	; 0x5f
   1d1c0:	clz	r1, r1
   1d1c4:	lsr	r1, r1, #5
   1d1c8:	orr	r0, r1, r0
   1d1cc:	ldr	r1, [r5]
   1d1d0:	bic	r1, r1, #4194304	; 0x400000
   1d1d4:	orr	r0, r1, r0, lsl #22
   1d1d8:	b	1d208 <__assert_fail@plt+0xb504>
   1d1dc:	and	r0, r4, r8
   1d1e0:	orr	r0, r0, #36	; 0x24
   1d1e4:	b	1d5b8 <__assert_fail@plt+0xb8b4>
   1d1e8:	bl	11ac4 <__ctype_b_loc@plt>
   1d1ec:	ldr	r0, [r0]
   1d1f0:	add	r0, r0, r6, lsl #1
   1d1f4:	ldrh	r0, [r0]
   1d1f8:	ubfx	r0, r0, #3, #1
   1d1fc:	cmp	r6, #95	; 0x5f
   1d200:	movweq	r0, #1
   1d204:	orr	r0, r4, r0, lsl #22
   1d208:	str	r0, [r5]
   1d20c:	sub	r1, r6, #10
   1d210:	mov	r8, #1
   1d214:	cmp	r1, #115	; 0x73
   1d218:	bhi	1d824 <__assert_fail@plt+0xbb20>
   1d21c:	add	r2, pc, #0
   1d220:	ldr	pc, [r2, r1, lsl #2]
   1d224:	strdeq	sp, [r1], -r4
   1d228:	andeq	sp, r1, r4, lsr #16
   1d22c:	andeq	sp, r1, r4, lsr #16
   1d230:	andeq	sp, r1, r4, lsr #16
   1d234:	andeq	sp, r1, r4, lsr #16
   1d238:	andeq	sp, r1, r4, lsr #16
   1d23c:	andeq	sp, r1, r4, lsr #16
   1d240:	andeq	sp, r1, r4, lsr #16
   1d244:	andeq	sp, r1, r4, lsr #16
   1d248:	andeq	sp, r1, r4, lsr #16
   1d24c:	andeq	sp, r1, r4, lsr #16
   1d250:	andeq	sp, r1, r4, lsr #16
   1d254:	andeq	sp, r1, r4, lsr #16
   1d258:	andeq	sp, r1, r4, lsr #16
   1d25c:	andeq	sp, r1, r4, lsr #16
   1d260:	andeq	sp, r1, r4, lsr #16
   1d264:	andeq	sp, r1, r4, lsr #16
   1d268:	andeq	sp, r1, r4, lsr #16
   1d26c:	andeq	sp, r1, r4, lsr #16
   1d270:	andeq	sp, r1, r4, lsr #16
   1d274:	andeq	sp, r1, r4, lsr #16
   1d278:	andeq	sp, r1, r4, lsr #16
   1d27c:	andeq	sp, r1, r4, lsr #16
   1d280:	andeq	sp, r1, r4, lsr #16
   1d284:	andeq	sp, r1, r4, lsr #16
   1d288:	andeq	sp, r1, r4, lsr #16
   1d28c:	andeq	sp, r1, r4, asr #11
   1d290:	andeq	sp, r1, r4, lsr #16
   1d294:	andeq	sp, r1, r4, lsr #16
   1d298:	andeq	sp, r1, r4, lsr #16
   1d29c:	andeq	sp, r1, r4, lsr #12
   1d2a0:	andeq	sp, r1, r0, lsr r6
   1d2a4:	andeq	sp, r1, ip, lsr r6
   1d2a8:	andeq	sp, r1, r4, asr #12
   1d2ac:	andeq	sp, r1, r4, lsr #16
   1d2b0:	andeq	sp, r1, r4, lsr #16
   1d2b4:	andeq	sp, r1, r4, asr r6
   1d2b8:	andeq	sp, r1, r4, lsr #16
   1d2bc:	andeq	sp, r1, r4, lsr #16
   1d2c0:	andeq	sp, r1, r4, lsr #16
   1d2c4:	andeq	sp, r1, r4, lsr #16
   1d2c8:	andeq	sp, r1, r4, lsr #16
   1d2cc:	andeq	sp, r1, r4, lsr #16
   1d2d0:	andeq	sp, r1, r4, lsr #16
   1d2d4:	andeq	sp, r1, r4, lsr #16
   1d2d8:	andeq	sp, r1, r4, lsr #16
   1d2dc:	andeq	sp, r1, r4, lsr #16
   1d2e0:	andeq	sp, r1, r4, lsr #16
   1d2e4:	andeq	sp, r1, r4, lsr #16
   1d2e8:	andeq	sp, r1, r4, lsr #16
   1d2ec:	andeq	sp, r1, r4, lsr #16
   1d2f0:	andeq	sp, r1, r4, lsr #16
   1d2f4:	andeq	sp, r1, r4, lsr #16
   1d2f8:	andeq	sp, r1, ip, asr r6
   1d2fc:	andeq	sp, r1, r4, lsr #16
   1d300:	andeq	sp, r1, r4, lsr #16
   1d304:	andeq	sp, r1, r4, lsr #16
   1d308:	andeq	sp, r1, r4, lsr #16
   1d30c:	andeq	sp, r1, r4, lsr #16
   1d310:	andeq	sp, r1, r4, lsr #16
   1d314:	andeq	sp, r1, r4, lsr #16
   1d318:	andeq	sp, r1, r4, lsr #16
   1d31c:	andeq	sp, r1, r4, lsr #16
   1d320:	andeq	sp, r1, r4, lsr #16
   1d324:	andeq	sp, r1, r4, lsr #16
   1d328:	andeq	sp, r1, r4, lsr #16
   1d32c:	andeq	sp, r1, r4, lsr #16
   1d330:	andeq	sp, r1, r4, lsr #16
   1d334:	andeq	sp, r1, r4, lsr #16
   1d338:	andeq	sp, r1, r4, lsr #16
   1d33c:	andeq	sp, r1, r4, lsr #16
   1d340:	andeq	sp, r1, r4, lsr #16
   1d344:	andeq	sp, r1, r4, lsr #16
   1d348:	andeq	sp, r1, r4, lsr #16
   1d34c:	andeq	sp, r1, r4, lsr #16
   1d350:	andeq	sp, r1, r4, lsr #16
   1d354:	andeq	sp, r1, r4, lsr #16
   1d358:	andeq	sp, r1, r4, lsr #16
   1d35c:	andeq	sp, r1, r4, lsr #16
   1d360:	andeq	sp, r1, r4, lsr #16
   1d364:	andeq	sp, r1, r4, lsr #16
   1d368:	andeq	sp, r1, ip, ror #12
   1d36c:	andeq	sp, r1, r4, lsr #16
   1d370:	andeq	sp, r1, r4, lsr #16
   1d374:	andeq	sp, r1, r4, ror r6
   1d378:	andeq	sp, r1, r4, lsr #16
   1d37c:	andeq	sp, r1, r4, lsr #16
   1d380:	andeq	sp, r1, r4, lsr #16
   1d384:	andeq	sp, r1, r4, lsr #16
   1d388:	andeq	sp, r1, r4, lsr #16
   1d38c:	andeq	sp, r1, r4, lsr #16
   1d390:	andeq	sp, r1, r4, lsr #16
   1d394:	andeq	sp, r1, r4, lsr #16
   1d398:	andeq	sp, r1, r4, lsr #16
   1d39c:	andeq	sp, r1, r4, lsr #16
   1d3a0:	andeq	sp, r1, r4, lsr #16
   1d3a4:	andeq	sp, r1, r4, lsr #16
   1d3a8:	andeq	sp, r1, r4, lsr #16
   1d3ac:	andeq	sp, r1, r4, lsr #16
   1d3b0:	andeq	sp, r1, r4, lsr #16
   1d3b4:	andeq	sp, r1, r4, lsr #16
   1d3b8:	andeq	sp, r1, r4, lsr #16
   1d3bc:	andeq	sp, r1, r4, lsr #16
   1d3c0:	andeq	sp, r1, r4, lsr #16
   1d3c4:	andeq	sp, r1, r4, lsr #16
   1d3c8:	andeq	sp, r1, r4, lsr #16
   1d3cc:	andeq	sp, r1, r4, lsr #16
   1d3d0:	andeq	sp, r1, r4, lsr #16
   1d3d4:	andeq	sp, r1, r4, lsr #16
   1d3d8:	andeq	sp, r1, r4, lsr #16
   1d3dc:	andeq	sp, r1, r4, lsr #16
   1d3e0:	andeq	sp, r1, r4, lsr #16
   1d3e4:	andeq	sp, r1, r4, lsr #16
   1d3e8:	muleq	r1, ip, r6
   1d3ec:	andeq	sp, r1, ip, lsr #13
   1d3f0:	andeq	sp, r1, r0, asr #13
   1d3f4:	tst	r9, #2048	; 0x800
   1d3f8:	bne	1d6b8 <__assert_fail@plt+0xb9b4>
   1d3fc:	b	1d824 <__assert_fail@plt+0xbb20>
   1d400:	bl	11ac4 <__ctype_b_loc@plt>
   1d404:	ldr	r0, [r0]
   1d408:	add	r0, r0, r6, lsl #1
   1d40c:	ldrh	r0, [r0]
   1d410:	ubfx	r0, r0, #3, #1
   1d414:	cmp	r6, #95	; 0x5f
   1d418:	movweq	r0, #1
   1d41c:	orr	r0, r4, r0, lsl #22
   1d420:	str	r0, [r5]
   1d424:	sub	r1, r6, #39	; 0x27
   1d428:	mov	r8, #2
   1d42c:	cmp	r1, #86	; 0x56
   1d430:	bhi	1d824 <__assert_fail@plt+0xbb20>
   1d434:	add	r2, pc, #0
   1d438:	ldr	pc, [r2, r1, lsl #2]
   1d43c:	strdeq	sp, [r1], -ip
   1d440:	andeq	sp, r1, ip, lsl #14
   1d444:	andeq	sp, r1, ip, lsl r7
   1d448:	andeq	sp, r1, r4, lsr #16
   1d44c:	andeq	sp, r1, ip, lsr #14
   1d450:	andeq	sp, r1, r4, lsr #16
   1d454:	andeq	sp, r1, r4, lsr #16
   1d458:	andeq	sp, r1, r4, lsr #16
   1d45c:	andeq	sp, r1, r4, lsr #16
   1d460:	andeq	sp, r1, r4, lsr #16
   1d464:	muleq	r1, r8, r5
   1d468:	muleq	r1, r8, r5
   1d46c:	muleq	r1, r8, r5
   1d470:	muleq	r1, r8, r5
   1d474:	muleq	r1, r8, r5
   1d478:	muleq	r1, r8, r5
   1d47c:	muleq	r1, r8, r5
   1d480:	muleq	r1, r8, r5
   1d484:	muleq	r1, r8, r5
   1d488:	andeq	sp, r1, r4, lsr #16
   1d48c:	andeq	sp, r1, r4, lsr #16
   1d490:	andeq	sp, r1, r4, asr #14
   1d494:	andeq	sp, r1, r4, lsr #16
   1d498:	andeq	sp, r1, r4, asr r7
   1d49c:	andeq	sp, r1, r4, ror #14
   1d4a0:	andeq	sp, r1, r4, lsr #16
   1d4a4:	andeq	sp, r1, r4, lsr #16
   1d4a8:	andeq	sp, r1, ip, ror r7
   1d4ac:	andeq	sp, r1, r4, lsr #16
   1d4b0:	andeq	sp, r1, r4, lsr #16
   1d4b4:	andeq	sp, r1, r4, lsr #16
   1d4b8:	andeq	sp, r1, r4, lsr #16
   1d4bc:	andeq	sp, r1, r4, lsr #16
   1d4c0:	andeq	sp, r1, r4, lsr #16
   1d4c4:	andeq	sp, r1, r4, lsr #16
   1d4c8:	andeq	sp, r1, r4, lsr #16
   1d4cc:	andeq	sp, r1, r4, lsr #16
   1d4d0:	andeq	sp, r1, r4, lsr #16
   1d4d4:	andeq	sp, r1, r4, lsr #16
   1d4d8:	andeq	sp, r1, r4, lsr #16
   1d4dc:	andeq	sp, r1, r4, lsr #16
   1d4e0:	andeq	sp, r1, r4, lsr #16
   1d4e4:	andeq	sp, r1, r4, lsr #16
   1d4e8:	andeq	sp, r1, r4, lsr #16
   1d4ec:	andeq	sp, r1, ip, lsl #15
   1d4f0:	andeq	sp, r1, r4, lsr #16
   1d4f4:	andeq	sp, r1, r4, lsr #16
   1d4f8:	andeq	sp, r1, r4, lsr #16
   1d4fc:	muleq	r1, ip, r7
   1d500:	andeq	sp, r1, r4, lsr #16
   1d504:	andeq	sp, r1, r4, lsr #16
   1d508:	andeq	sp, r1, r4, lsr #16
   1d50c:	andeq	sp, r1, r4, lsr #16
   1d510:	andeq	sp, r1, r4, lsr #16
   1d514:	andeq	sp, r1, r4, lsr #16
   1d518:	andeq	sp, r1, r4, lsr #16
   1d51c:	andeq	sp, r1, r4, lsr #16
   1d520:	andeq	sp, r1, ip, lsr #15
   1d524:	andeq	sp, r1, r4, lsr #16
   1d528:			; <UNDEFINED> instruction: 0x0001d7bc
   1d52c:	andeq	sp, r1, r4, lsr #16
   1d530:	andeq	sp, r1, r4, lsr #16
   1d534:	andeq	sp, r1, r4, lsr #16
   1d538:	andeq	sp, r1, r4, lsr #16
   1d53c:	andeq	sp, r1, r4, lsr #16
   1d540:	andeq	sp, r1, r4, lsr #16
   1d544:	andeq	sp, r1, r4, lsr #16
   1d548:	andeq	sp, r1, r4, lsr #16
   1d54c:	andeq	sp, r1, r4, lsr #16
   1d550:	andeq	sp, r1, r4, lsr #16
   1d554:	andeq	sp, r1, r4, lsr #16
   1d558:	andeq	sp, r1, r4, lsr #16
   1d55c:	andeq	sp, r1, r4, lsr #16
   1d560:	andeq	sp, r1, r4, lsr #16
   1d564:	andeq	sp, r1, r4, lsr #16
   1d568:	andeq	sp, r1, r4, lsr #16
   1d56c:	andeq	sp, r1, ip, asr #15
   1d570:	andeq	sp, r1, r4, lsr #16
   1d574:	andeq	sp, r1, r4, lsr #16
   1d578:	andeq	sp, r1, r4, lsr #16
   1d57c:	ldrdeq	sp, [r1], -ip
   1d580:	andeq	sp, r1, r4, lsr #16
   1d584:	andeq	sp, r1, r4, lsr #16
   1d588:	andeq	sp, r1, r4, lsr #16
   1d58c:	andeq	sp, r1, ip, ror #15
   1d590:	andeq	sp, r1, r0, lsl #16
   1d594:	andeq	sp, r1, ip, lsl #16
   1d598:	tst	r9, #16384	; 0x4000
   1d59c:	bne	1d824 <__assert_fail@plt+0xbb20>
   1d5a0:	sub	r1, r6, #49	; 0x31
   1d5a4:	mov	r2, #4
   1d5a8:	b	1d68c <__assert_fail@plt+0xb988>
   1d5ac:	and	r0, r4, r8
   1d5b0:	orr	r0, r0, #1
   1d5b4:	orr	r0, r0, #2097152	; 0x200000
   1d5b8:	str	r0, [r5]
   1d5bc:	mov	r8, #1
   1d5c0:	b	1d824 <__assert_fail@plt+0xbb20>
   1d5c4:	tst	r9, #8
   1d5c8:	bne	1d610 <__assert_fail@plt+0xb90c>
   1d5cc:	ldr	r0, [r7, #40]	; 0x28
   1d5d0:	ldr	r1, [r7, #48]	; 0x30
   1d5d4:	add	r0, r0, #1
   1d5d8:	cmp	r0, r1
   1d5dc:	beq	1d610 <__assert_fail@plt+0xb90c>
   1d5e0:	str	r0, [r7, #40]	; 0x28
   1d5e4:	add	r0, sp, #4
   1d5e8:	mov	r1, r7
   1d5ec:	mov	r2, r9
   1d5f0:	bl	1d07c <__assert_fail@plt+0xb378>
   1d5f4:	ldr	r0, [r7, #40]	; 0x28
   1d5f8:	sub	r0, r0, #1
   1d5fc:	str	r0, [r7, #40]	; 0x28
   1d600:	ldrb	r0, [sp, #8]
   1d604:	sub	r0, r0, #9
   1d608:	cmp	r0, #1
   1d60c:	bhi	1d824 <__assert_fail@plt+0xbb20>
   1d610:	mov	r0, #32
   1d614:	str	r0, [sl]
   1d618:	mov	r0, #12
   1d61c:	strb	r0, [sl, #4]
   1d620:	b	1d824 <__assert_fail@plt+0xbb20>
   1d624:	tst	r9, #8192	; 0x2000
   1d628:	bne	1d714 <__assert_fail@plt+0xba10>
   1d62c:	b	1d824 <__assert_fail@plt+0xbb20>
   1d630:	tst	r9, #8192	; 0x2000
   1d634:	bne	1d724 <__assert_fail@plt+0xba20>
   1d638:	b	1d824 <__assert_fail@plt+0xbb20>
   1d63c:	mov	r1, #11
   1d640:	b	1d81c <__assert_fail@plt+0xbb18>
   1d644:	movw	r1, #1026	; 0x402
   1d648:	tst	r9, r1
   1d64c:	bne	1d824 <__assert_fail@plt+0xbb20>
   1d650:	b	1d73c <__assert_fail@plt+0xba38>
   1d654:	mov	r1, #5
   1d658:	b	1d81c <__assert_fail@plt+0xbb18>
   1d65c:	movw	r1, #1026	; 0x402
   1d660:	tst	r9, r1
   1d664:	bne	1d824 <__assert_fail@plt+0xbb20>
   1d668:	b	1d774 <__assert_fail@plt+0xba70>
   1d66c:	mov	r1, #20
   1d670:	b	1d81c <__assert_fail@plt+0xbb18>
   1d674:	movw	r1, #8
   1d678:	movt	r1, #128	; 0x80
   1d67c:	tst	r9, r1
   1d680:	beq	1d6d0 <__assert_fail@plt+0xb9cc>
   1d684:	mov	r1, #16
   1d688:	mov	r2, #12
   1d68c:	bfi	r0, r2, #0, #8
   1d690:	str	r1, [sl]
   1d694:	str	r0, [sl, #4]
   1d698:	b	1d824 <__assert_fail@plt+0xbb20>
   1d69c:	and	r1, r9, #4608	; 0x1200
   1d6a0:	cmp	r1, #4608	; 0x1200
   1d6a4:	beq	1d7f8 <__assert_fail@plt+0xbaf4>
   1d6a8:	b	1d824 <__assert_fail@plt+0xbb20>
   1d6ac:	and	r1, r9, #33792	; 0x8400
   1d6b0:	cmp	r1, #32768	; 0x8000
   1d6b4:	bne	1d824 <__assert_fail@plt+0xbb20>
   1d6b8:	mov	r1, #10
   1d6bc:	b	1d81c <__assert_fail@plt+0xbb18>
   1d6c0:	and	r1, r9, #4608	; 0x1200
   1d6c4:	cmp	r1, #4608	; 0x1200
   1d6c8:	beq	1d818 <__assert_fail@plt+0xbb14>
   1d6cc:	b	1d824 <__assert_fail@plt+0xbb20>
   1d6d0:	ldr	r1, [r7, #40]	; 0x28
   1d6d4:	cmp	r1, #0
   1d6d8:	beq	1d684 <__assert_fail@plt+0xb980>
   1d6dc:	tst	r9, #2048	; 0x800
   1d6e0:	beq	1d824 <__assert_fail@plt+0xbb20>
   1d6e4:	ldr	r2, [r7, #4]
   1d6e8:	add	r1, r2, r1
   1d6ec:	ldrb	r1, [r1, #-1]
   1d6f0:	cmp	r1, #10
   1d6f4:	beq	1d684 <__assert_fail@plt+0xb980>
   1d6f8:	b	1d824 <__assert_fail@plt+0xbb20>
   1d6fc:	tst	r9, #524288	; 0x80000
   1d700:	bne	1d824 <__assert_fail@plt+0xbb20>
   1d704:	mov	r1, #128	; 0x80
   1d708:	b	1d688 <__assert_fail@plt+0xb984>
   1d70c:	tst	r9, #8192	; 0x2000
   1d710:	bne	1d824 <__assert_fail@plt+0xbb20>
   1d714:	mov	r1, #8
   1d718:	b	1d81c <__assert_fail@plt+0xbb18>
   1d71c:	tst	r9, #8192	; 0x2000
   1d720:	bne	1d824 <__assert_fail@plt+0xbb20>
   1d724:	mov	r1, #9
   1d728:	b	1d81c <__assert_fail@plt+0xbb18>
   1d72c:	movw	r1, #1026	; 0x402
   1d730:	and	r1, r9, r1
   1d734:	cmp	r1, #2
   1d738:	bne	1d824 <__assert_fail@plt+0xbb20>
   1d73c:	mov	r1, #18
   1d740:	b	1d81c <__assert_fail@plt+0xbb18>
   1d744:	tst	r9, #524288	; 0x80000
   1d748:	bne	1d824 <__assert_fail@plt+0xbb20>
   1d74c:	mov	r1, #6
   1d750:	b	1d688 <__assert_fail@plt+0xb984>
   1d754:	tst	r9, #524288	; 0x80000
   1d758:	bne	1d824 <__assert_fail@plt+0xbb20>
   1d75c:	mov	r1, #9
   1d760:	b	1d688 <__assert_fail@plt+0xb984>
   1d764:	movw	r1, #1026	; 0x402
   1d768:	and	r1, r9, r1
   1d76c:	cmp	r1, #2
   1d770:	bne	1d824 <__assert_fail@plt+0xbb20>
   1d774:	mov	r1, #19
   1d778:	b	1d81c <__assert_fail@plt+0xbb18>
   1d77c:	tst	r9, #524288	; 0x80000
   1d780:	bne	1d824 <__assert_fail@plt+0xbb20>
   1d784:	mov	r1, #512	; 0x200
   1d788:	b	1d688 <__assert_fail@plt+0xb984>
   1d78c:	tst	r9, #524288	; 0x80000
   1d790:	bne	1d824 <__assert_fail@plt+0xbb20>
   1d794:	mov	r1, #35	; 0x23
   1d798:	b	1d81c <__assert_fail@plt+0xbb18>
   1d79c:	tst	r9, #524288	; 0x80000
   1d7a0:	bne	1d824 <__assert_fail@plt+0xbb20>
   1d7a4:	mov	r1, #33	; 0x21
   1d7a8:	b	1d81c <__assert_fail@plt+0xbb18>
   1d7ac:	tst	r9, #524288	; 0x80000
   1d7b0:	bne	1d824 <__assert_fail@plt+0xbb20>
   1d7b4:	mov	r1, #64	; 0x40
   1d7b8:	b	1d688 <__assert_fail@plt+0xb984>
   1d7bc:	tst	r9, #524288	; 0x80000
   1d7c0:	bne	1d824 <__assert_fail@plt+0xbb20>
   1d7c4:	mov	r1, #256	; 0x100
   1d7c8:	b	1d688 <__assert_fail@plt+0xb984>
   1d7cc:	tst	r9, #524288	; 0x80000
   1d7d0:	bne	1d824 <__assert_fail@plt+0xbb20>
   1d7d4:	mov	r1, #34	; 0x22
   1d7d8:	b	1d81c <__assert_fail@plt+0xbb18>
   1d7dc:	tst	r9, #524288	; 0x80000
   1d7e0:	bne	1d824 <__assert_fail@plt+0xbb20>
   1d7e4:	mov	r1, #32
   1d7e8:	b	1d81c <__assert_fail@plt+0xbb18>
   1d7ec:	and	r1, r9, #4608	; 0x1200
   1d7f0:	cmp	r1, #512	; 0x200
   1d7f4:	bne	1d824 <__assert_fail@plt+0xbb20>
   1d7f8:	mov	r1, #23
   1d7fc:	b	1d81c <__assert_fail@plt+0xbb18>
   1d800:	tst	r9, #33792	; 0x8400
   1d804:	bne	1d824 <__assert_fail@plt+0xbb20>
   1d808:	b	1d6b8 <__assert_fail@plt+0xb9b4>
   1d80c:	and	r1, r9, #4608	; 0x1200
   1d810:	cmp	r1, #512	; 0x200
   1d814:	bne	1d824 <__assert_fail@plt+0xbb20>
   1d818:	mov	r1, #24
   1d81c:	bfi	r0, r1, #0, #8
   1d820:	str	r0, [r5]
   1d824:	mov	r0, r8
   1d828:	sub	sp, fp, #28
   1d82c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1d830:	ldrb	r1, [r0, #75]	; 0x4b
   1d834:	cmp	r1, #0
   1d838:	bne	1d858 <__assert_fail@plt+0xbb54>
   1d83c:	ldr	r1, [r0, #4]
   1d840:	ldr	r0, [r0, #40]	; 0x28
   1d844:	add	r0, r1, r0
   1d848:	add	r0, r0, #1
   1d84c:	ldrb	r3, [r0]
   1d850:	uxtb	r0, r3
   1d854:	bx	lr
   1d858:	ldr	r1, [r0, #80]	; 0x50
   1d85c:	cmp	r1, #2
   1d860:	blt	1d898 <__assert_fail@plt+0xbb94>
   1d864:	ldr	r2, [r0, #8]
   1d868:	ldr	r3, [r0, #40]	; 0x28
   1d86c:	add	ip, r3, #1
   1d870:	ldr	r1, [r2, ip, lsl #2]
   1d874:	cmn	r1, #1
   1d878:	beq	1d8e4 <__assert_fail@plt+0xbbe0>
   1d87c:	ldr	r1, [r0, #28]
   1d880:	add	r3, r3, #2
   1d884:	cmp	r1, r3
   1d888:	beq	1d898 <__assert_fail@plt+0xbb94>
   1d88c:	ldr	r1, [r2, r3, lsl #2]
   1d890:	cmn	r1, #1
   1d894:	beq	1d8e4 <__assert_fail@plt+0xbbe0>
   1d898:	push	{fp, lr}
   1d89c:	mov	fp, sp
   1d8a0:	ldrb	lr, [r0, #76]	; 0x4c
   1d8a4:	ldr	r1, [r0, #40]	; 0x28
   1d8a8:	add	ip, r1, #1
   1d8ac:	cmp	lr, #0
   1d8b0:	mov	r3, ip
   1d8b4:	ldrne	r3, [r0, #12]
   1d8b8:	ldrne	r3, [r3, ip, lsl #2]
   1d8bc:	ldr	r1, [r0]
   1d8c0:	ldr	r2, [r0, #24]
   1d8c4:	add	r2, r2, r3
   1d8c8:	add	r1, r1, r2
   1d8cc:	ldrsb	r3, [r1]
   1d8d0:	cmp	lr, #0
   1d8d4:	pop	{fp, lr}
   1d8d8:	beq	1d850 <__assert_fail@plt+0xbb4c>
   1d8dc:	cmn	r3, #1
   1d8e0:	bgt	1d850 <__assert_fail@plt+0xbb4c>
   1d8e4:	ldr	r0, [r0, #4]
   1d8e8:	add	r0, r0, ip
   1d8ec:	b	1d84c <__assert_fail@plt+0xbb48>
   1d8f0:	ldr	r2, [r0, #80]	; 0x50
   1d8f4:	cmp	r2, #1
   1d8f8:	ldrne	r0, [r0, #8]
   1d8fc:	ldrne	r0, [r0, r1, lsl #2]
   1d900:	ldreq	r0, [r0, #4]
   1d904:	ldrbeq	r0, [r0, r1]
   1d908:	bx	lr
   1d90c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1d910:	add	fp, sp, #28
   1d914:	sub	sp, sp, #20
   1d918:	mov	r6, r2
   1d91c:	mov	r7, r1
   1d920:	mov	r1, r0
   1d924:	ldr	r0, [r7]
   1d928:	str	r0, [sp, #8]
   1d92c:	ldr	r5, [fp, #12]
   1d930:	str	r5, [sp, #4]
   1d934:	ldr	r4, [fp, #8]
   1d938:	str	r4, [sp]
   1d93c:	str	r1, [sp, #12]
   1d940:	mov	r0, r1
   1d944:	mov	r1, r7
   1d948:	str	r3, [sp, #16]
   1d94c:	bl	1db0c <__assert_fail@plt+0xbe08>
   1d950:	cmp	r0, #0
   1d954:	bne	1d97c <__assert_fail@plt+0xbc78>
   1d958:	ldr	r1, [r5]
   1d95c:	cmp	r1, #0
   1d960:	beq	1d97c <__assert_fail@plt+0xbc78>
   1d964:	mov	r6, #0
   1d968:	b	1da48 <__assert_fail@plt+0xbd44>
   1d96c:	cmp	r5, #0
   1d970:	movne	r8, r5
   1d974:	mov	r0, r8
   1d978:	mov	r4, r9
   1d97c:	mov	r5, r0
   1d980:	ldrb	r0, [r6, #4]
   1d984:	orr	r1, r0, #8
   1d988:	cmp	r1, #10
   1d98c:	beq	1da44 <__assert_fail@plt+0xbd40>
   1d990:	cmp	r4, #0
   1d994:	beq	1d9a0 <__assert_fail@plt+0xbc9c>
   1d998:	cmp	r0, #9
   1d99c:	beq	1da44 <__assert_fail@plt+0xbd40>
   1d9a0:	mov	r9, r4
   1d9a4:	str	r4, [sp]
   1d9a8:	ldr	sl, [fp, #12]
   1d9ac:	str	sl, [sp, #4]
   1d9b0:	ldr	r0, [sp, #12]
   1d9b4:	mov	r1, r7
   1d9b8:	mov	r2, r6
   1d9bc:	ldr	r3, [sp, #16]
   1d9c0:	bl	1db0c <__assert_fail@plt+0xbe08>
   1d9c4:	mov	r8, r0
   1d9c8:	cmp	r0, #0
   1d9cc:	bne	1d9dc <__assert_fail@plt+0xbcd8>
   1d9d0:	ldr	r0, [sl]
   1d9d4:	cmp	r0, #0
   1d9d8:	bne	1da54 <__assert_fail@plt+0xbd50>
   1d9dc:	cmp	r5, #0
   1d9e0:	cmpne	r8, #0
   1d9e4:	beq	1d96c <__assert_fail@plt+0xbc68>
   1d9e8:	ldr	r0, [sp, #8]
   1d9ec:	mov	r1, r5
   1d9f0:	mov	r2, r8
   1d9f4:	mov	r3, #16
   1d9f8:	bl	1d044 <__assert_fail@plt+0xb340>
   1d9fc:	cmp	r0, #0
   1da00:	mov	r4, r9
   1da04:	bne	1d97c <__assert_fail@plt+0xbc78>
   1da08:	movw	r4, #56052	; 0xdaf4
   1da0c:	movt	r4, #1
   1da10:	mov	r6, #0
   1da14:	mov	r0, r8
   1da18:	mov	r1, r4
   1da1c:	mov	r2, #0
   1da20:	bl	1da7c <__assert_fail@plt+0xbd78>
   1da24:	mov	r0, r5
   1da28:	mov	r1, r4
   1da2c:	mov	r2, #0
   1da30:	bl	1da7c <__assert_fail@plt+0xbd78>
   1da34:	mov	r0, #12
   1da38:	ldr	r1, [fp, #12]
   1da3c:	str	r0, [r1]
   1da40:	b	1da48 <__assert_fail@plt+0xbd44>
   1da44:	mov	r6, r5
   1da48:	mov	r0, r6
   1da4c:	sub	sp, fp, #28
   1da50:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1da54:	cmp	r5, #0
   1da58:	mov	r6, #0
   1da5c:	beq	1da48 <__assert_fail@plt+0xbd44>
   1da60:	movw	r1, #56052	; 0xdaf4
   1da64:	movt	r1, #1
   1da68:	mov	r6, #0
   1da6c:	mov	r0, r5
   1da70:	mov	r2, #0
   1da74:	bl	1da7c <__assert_fail@plt+0xbd78>
   1da78:	b	1da48 <__assert_fail@plt+0xbd44>
   1da7c:	push	{r4, r5, r6, sl, fp, lr}
   1da80:	add	fp, sp, #16
   1da84:	mov	r4, r2
   1da88:	mov	r5, r1
   1da8c:	b	1da94 <__assert_fail@plt+0xbd90>
   1da90:	ldr	r0, [r6, #8]
   1da94:	mov	r6, r0
   1da98:	ldr	r0, [r0, #4]
   1da9c:	cmp	r0, #0
   1daa0:	bne	1da94 <__assert_fail@plt+0xbd90>
   1daa4:	ldr	r0, [r6, #8]
   1daa8:	cmp	r0, #0
   1daac:	bne	1da90 <__assert_fail@plt+0xbd8c>
   1dab0:	mov	r0, r4
   1dab4:	mov	r1, r6
   1dab8:	blx	r5
   1dabc:	cmp	r0, #0
   1dac0:	bne	1daf0 <__assert_fail@plt+0xbdec>
   1dac4:	ldr	r1, [r6]
   1dac8:	cmp	r1, #0
   1dacc:	popeq	{r4, r5, r6, sl, fp, pc}
   1dad0:	ldr	r0, [r1, #8]
   1dad4:	cmp	r0, r6
   1dad8:	mov	r6, r1
   1dadc:	beq	1dab0 <__assert_fail@plt+0xbdac>
   1dae0:	cmp	r0, #0
   1dae4:	mov	r6, r1
   1dae8:	beq	1dab0 <__assert_fail@plt+0xbdac>
   1daec:	b	1da94 <__assert_fail@plt+0xbd90>
   1daf0:	pop	{r4, r5, r6, sl, fp, pc}
   1daf4:	push	{fp, lr}
   1daf8:	mov	fp, sp
   1dafc:	add	r0, r1, #20
   1db00:	bl	1bae0 <__assert_fail@plt+0x9ddc>
   1db04:	mov	r0, #0
   1db08:	pop	{fp, pc}
   1db0c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1db10:	add	fp, sp, #28
   1db14:	sub	sp, sp, #12
   1db18:	mov	r9, r3
   1db1c:	mov	r5, r2
   1db20:	mov	r6, r1
   1db24:	mov	sl, r0
   1db28:	and	ip, r3, #16
   1db2c:	and	r8, r3, #32
   1db30:	and	r0, r3, #16777216	; 0x1000000
   1db34:	str	r0, [sp, #8]
   1db38:	ldr	r3, [fp, #12]
   1db3c:	ldr	r4, [fp, #8]
   1db40:	mvn	r1, #0
   1db44:	b	1db68 <__assert_fail@plt+0xbe64>
   1db48:	mov	r0, r5
   1db4c:	mov	r1, sl
   1db50:	mov	r2, r9
   1db54:	mov	r7, ip
   1db58:	bl	1ceb8 <__assert_fail@plt+0xb1b4>
   1db5c:	mvn	r1, #0
   1db60:	mov	ip, r7
   1db64:	ldr	r3, [fp, #12]
   1db68:	ldr	r0, [r5, #4]
   1db6c:	uxtab	r1, r1, r0
   1db70:	ldr	r7, [r6]
   1db74:	cmp	r1, #35	; 0x23
   1db78:	bhi	1dc20 <__assert_fail@plt+0xbf1c>
   1db7c:	add	r2, pc, #0
   1db80:	ldr	pc, [r2, r1, lsl #2]
   1db84:	andeq	sp, r1, r8, ror #25
   1db88:	andeq	lr, r1, r0, lsr #1
   1db8c:	andeq	sp, r1, r0, lsr #24
   1db90:	andeq	sp, r1, r4, lsr #27
   1db94:	andeq	sp, r1, r0, lsl #28
   1db98:	andeq	sp, r1, r0, lsr #24
   1db9c:	andeq	sp, r1, r0, lsr #24
   1dba0:	andeq	sp, r1, r4, asr #28
   1dba4:	andeq	sp, r1, r0, lsr ip
   1dba8:	andeq	lr, r1, r0, lsr #1
   1dbac:	andeq	sp, r1, r0, lsr #24
   1dbb0:	andeq	sp, r1, ip, ror #28
   1dbb4:	andeq	sp, r1, r0, lsr #24
   1dbb8:	andeq	sp, r1, r0, lsr #24
   1dbbc:	andeq	sp, r1, r0, lsr #24
   1dbc0:	andeq	sp, r1, r0, lsr #24
   1dbc4:	andeq	sp, r1, r0, lsr #24
   1dbc8:	andeq	sp, r1, r0, lsr #24
   1dbcc:	andeq	sp, r1, r0, lsr #24
   1dbd0:	andeq	sp, r1, ip, lsr #29
   1dbd4:	andeq	sp, r1, r0, lsr #24
   1dbd8:	andeq	sp, r1, r0, lsr #24
   1dbdc:	andeq	sp, r1, r4, lsl ip
   1dbe0:	andeq	sp, r1, r0, asr #24
   1dbe4:	andeq	sp, r1, r0, lsr #24
   1dbe8:	andeq	sp, r1, r0, lsr #24
   1dbec:	andeq	sp, r1, r0, lsr #24
   1dbf0:	andeq	sp, r1, r0, lsr #24
   1dbf4:	andeq	sp, r1, r0, lsr #24
   1dbf8:	andeq	sp, r1, r0, lsr #24
   1dbfc:	andeq	sp, r1, r0, lsr #24
   1dc00:	andeq	sp, r1, r8, ror ip
   1dc04:	andeq	sp, r1, r8, ror ip
   1dc08:	andeq	sp, r1, ip, lsr #25
   1dc0c:	andeq	sp, r1, ip, lsr #25
   1dc10:	andeq	sp, r1, r4, lsr #31
   1dc14:	ldr	r1, [sp, #8]
   1dc18:	cmp	r1, #0
   1dc1c:	bne	1e070 <__assert_fail@plt+0xc36c>
   1dc20:	cmp	r8, #0
   1dc24:	bne	1e070 <__assert_fail@plt+0xc36c>
   1dc28:	cmp	ip, #0
   1dc2c:	bne	1db48 <__assert_fail@plt+0xbe44>
   1dc30:	tst	r9, #131072	; 0x20000
   1dc34:	uxtbeq	r1, r0
   1dc38:	cmpeq	r1, #9
   1dc3c:	beq	1dfb0 <__assert_fail@plt+0xc2ac>
   1dc40:	mov	r1, #1
   1dc44:	bfi	r0, r1, #0, #8
   1dc48:	str	r0, [r5, #4]
   1dc4c:	mov	r4, #0
   1dc50:	mov	r0, r7
   1dc54:	mov	r1, #0
   1dc58:	mov	r2, #0
   1dc5c:	mov	r3, r5
   1dc60:	bl	1e0bc <__assert_fail@plt+0xc3b8>
   1dc64:	mov	r6, r0
   1dc68:	cmp	r0, #0
   1dc6c:	mov	r8, sl
   1dc70:	bne	1dee4 <__assert_fail@plt+0xc1e0>
   1dc74:	b	1e024 <__assert_fail@plt+0xc320>
   1dc78:	mov	r8, sl
   1dc7c:	ldr	r1, [sl, #64]	; 0x40
   1dc80:	mvn	r2, #32
   1dc84:	uxtab	r0, r2, r0
   1dc88:	clz	r0, r0
   1dc8c:	lsr	r0, r0, #5
   1dc90:	stm	sp, {r0, r3}
   1dc94:	movw	r2, #44814	; 0xaf0e
   1dc98:	movt	r2, #2
   1dc9c:	mov	r4, r3
   1dca0:	movw	r3, #44820	; 0xaf14
   1dca4:	movt	r3, #2
   1dca8:	b	1dcdc <__assert_fail@plt+0xbfd8>
   1dcac:	mov	r8, sl
   1dcb0:	ldr	r1, [sl, #64]	; 0x40
   1dcb4:	mvn	r2, #34	; 0x22
   1dcb8:	uxtab	r0, r2, r0
   1dcbc:	clz	r0, r0
   1dcc0:	lsr	r0, r0, #5
   1dcc4:	stm	sp, {r0, r3}
   1dcc8:	movw	r2, #44822	; 0xaf16
   1dccc:	movt	r2, #2
   1dcd0:	mov	r4, r3
   1dcd4:	movw	r3, #41527	; 0xa237
   1dcd8:	movt	r3, #2
   1dcdc:	mov	r0, r7
   1dce0:	bl	1e878 <__assert_fail@plt+0xcb74>
   1dce4:	b	1decc <__assert_fail@plt+0xc1c8>
   1dce8:	mov	r4, #0
   1dcec:	mov	r0, r7
   1dcf0:	mov	r1, #0
   1dcf4:	mov	r2, #0
   1dcf8:	mov	r3, r5
   1dcfc:	bl	1e0bc <__assert_fail@plt+0xc3b8>
   1dd00:	cmp	r0, #0
   1dd04:	beq	1e024 <__assert_fail@plt+0xc320>
   1dd08:	mov	r6, r0
   1dd0c:	ldr	r0, [r7, #92]	; 0x5c
   1dd10:	cmp	r0, #2
   1dd14:	mov	r8, sl
   1dd18:	blt	1dee4 <__assert_fail@plt+0xc1e0>
   1dd1c:	ldr	r0, [r8, #40]	; 0x28
   1dd20:	ldr	r1, [r8, #56]	; 0x38
   1dd24:	cmp	r1, r0
   1dd28:	ble	1dee4 <__assert_fail@plt+0xc1e0>
   1dd2c:	ldr	r1, [r8, #28]
   1dd30:	cmp	r0, r1
   1dd34:	beq	1dee4 <__assert_fail@plt+0xc1e0>
   1dd38:	ldr	r1, [r8, #8]
   1dd3c:	ldr	r0, [r1, r0, lsl #2]
   1dd40:	cmn	r0, #1
   1dd44:	bne	1dee4 <__assert_fail@plt+0xc1e0>
   1dd48:	mov	r0, r5
   1dd4c:	mov	r1, r8
   1dd50:	mov	r2, r9
   1dd54:	bl	1ceb8 <__assert_fail@plt+0xb1b4>
   1dd58:	mov	r0, r7
   1dd5c:	mov	r1, #0
   1dd60:	mov	r2, #0
   1dd64:	mov	r3, r5
   1dd68:	bl	1e0bc <__assert_fail@plt+0xc3b8>
   1dd6c:	mov	r4, r0
   1dd70:	mov	r0, r7
   1dd74:	mov	r1, r6
   1dd78:	mov	r2, r4
   1dd7c:	mov	r3, #16
   1dd80:	bl	1d044 <__assert_fail@plt+0xb340>
   1dd84:	cmp	r4, #0
   1dd88:	ldr	r1, [fp, #12]
   1dd8c:	movne	r6, r0
   1dd90:	cmpne	r0, #0
   1dd94:	bne	1dd1c <__assert_fail@plt+0xc018>
   1dd98:	mov	r0, #12
   1dd9c:	str	r0, [r1]
   1dda0:	b	1e0a0 <__assert_fail@plt+0xc39c>
   1dda4:	ldr	r0, [r5]
   1dda8:	mov	r1, #1
   1ddac:	ldr	r2, [r7, #84]	; 0x54
   1ddb0:	tst	r2, r1, lsl r0
   1ddb4:	beq	1e0b0 <__assert_fail@plt+0xc3ac>
   1ddb8:	lsl	r0, r1, r0
   1ddbc:	ldr	r1, [r7, #80]	; 0x50
   1ddc0:	orr	r0, r1, r0
   1ddc4:	str	r0, [r7, #80]	; 0x50
   1ddc8:	mov	r4, #0
   1ddcc:	mov	r0, r7
   1ddd0:	mov	r1, #0
   1ddd4:	mov	r2, #0
   1ddd8:	mov	r3, r5
   1dddc:	bl	1e0bc <__assert_fail@plt+0xc3b8>
   1dde0:	cmp	r0, #0
   1dde4:	beq	1e024 <__assert_fail@plt+0xc320>
   1dde8:	mov	r6, r0
   1ddec:	mov	r8, sl
   1ddf0:	ldr	r0, [r7, #76]	; 0x4c
   1ddf4:	add	r0, r0, #1
   1ddf8:	str	r0, [r7, #76]	; 0x4c
   1ddfc:	b	1de34 <__assert_fail@plt+0xc130>
   1de00:	mov	r4, #0
   1de04:	mov	r0, r7
   1de08:	mov	r1, #0
   1de0c:	mov	r2, #0
   1de10:	mov	r3, r5
   1de14:	bl	1e0bc <__assert_fail@plt+0xc3b8>
   1de18:	cmp	r0, #0
   1de1c:	beq	1e024 <__assert_fail@plt+0xc320>
   1de20:	mov	r6, r0
   1de24:	ldr	r0, [r7, #92]	; 0x5c
   1de28:	cmp	r0, #2
   1de2c:	mov	r8, sl
   1de30:	blt	1dee4 <__assert_fail@plt+0xc1e0>
   1de34:	ldrb	r0, [r7, #88]	; 0x58
   1de38:	orr	r0, r0, #2
   1de3c:	strb	r0, [r7, #88]	; 0x58
   1de40:	b	1dee4 <__assert_fail@plt+0xc1e0>
   1de44:	add	r0, r4, #1
   1de48:	stm	sp, {r0, r3}
   1de4c:	mov	r8, sl
   1de50:	mov	r0, sl
   1de54:	mov	r1, r6
   1de58:	mov	r2, r5
   1de5c:	mov	r4, r3
   1de60:	mov	r3, r9
   1de64:	bl	1e164 <__assert_fail@plt+0xc460>
   1de68:	b	1decc <__assert_fail@plt+0xc1c8>
   1de6c:	ldr	r0, [r5]
   1de70:	movw	r1, #783	; 0x30f
   1de74:	tst	r0, r1
   1de78:	beq	1de90 <__assert_fail@plt+0xc18c>
   1de7c:	ldrb	r0, [r7, #88]	; 0x58
   1de80:	tst	r0, #16
   1de84:	moveq	r0, r7
   1de88:	bleq	1e79c <__assert_fail@plt+0xca98>
   1de8c:	ldr	r0, [r5]
   1de90:	cmp	r0, #256	; 0x100
   1de94:	beq	1dfbc <__assert_fail@plt+0xc2b8>
   1de98:	cmp	r0, #512	; 0x200
   1de9c:	bne	1e034 <__assert_fail@plt+0xc330>
   1dea0:	mov	r6, #10
   1dea4:	mov	r0, #5
   1dea8:	b	1dfc4 <__assert_fail@plt+0xc2c0>
   1deac:	str	r3, [sp]
   1deb0:	mov	r8, sl
   1deb4:	mov	r0, sl
   1deb8:	mov	r1, r7
   1debc:	mov	r2, r5
   1dec0:	mov	r4, r3
   1dec4:	mov	r3, r9
   1dec8:	bl	1e278 <__assert_fail@plt+0xc574>
   1decc:	mov	r6, r0
   1ded0:	cmp	r0, #0
   1ded4:	bne	1dee4 <__assert_fail@plt+0xc1e0>
   1ded8:	ldr	r0, [r4]
   1dedc:	cmp	r0, #0
   1dee0:	bne	1e0a0 <__assert_fail@plt+0xc39c>
   1dee4:	mov	r0, r5
   1dee8:	mov	r1, r8
   1deec:	mov	r2, r9
   1def0:	bl	1ceb8 <__assert_fail@plt+0xb1b4>
   1def4:	mov	r4, #1
   1def8:	movw	r8, #2048	; 0x800
   1defc:	movt	r8, #140	; 0x8c
   1df00:	ldr	r2, [fp, #12]
   1df04:	ldrb	r0, [r5, #4]
   1df08:	cmp	r0, #23
   1df0c:	bhi	1df9c <__assert_fail@plt+0xc298>
   1df10:	tst	r8, r4, lsl r0
   1df14:	beq	1df9c <__assert_fail@plt+0xc298>
   1df18:	str	r9, [sp]
   1df1c:	str	r2, [sp, #4]
   1df20:	mov	r0, r6
   1df24:	mov	r1, sl
   1df28:	mov	r2, r7
   1df2c:	mov	r3, r5
   1df30:	bl	1ea68 <__assert_fail@plt+0xcd64>
   1df34:	ldr	r2, [fp, #12]
   1df38:	cmp	r0, #0
   1df3c:	bne	1df4c <__assert_fail@plt+0xc248>
   1df40:	ldr	r1, [r2]
   1df44:	cmp	r1, #0
   1df48:	bne	1e07c <__assert_fail@plt+0xc378>
   1df4c:	ldr	r1, [sp, #8]
   1df50:	cmp	r1, #0
   1df54:	mov	r6, r0
   1df58:	beq	1df04 <__assert_fail@plt+0xc200>
   1df5c:	ldrb	r1, [r5, #4]
   1df60:	cmp	r1, #23
   1df64:	beq	1df74 <__assert_fail@plt+0xc270>
   1df68:	cmp	r1, #11
   1df6c:	mov	r6, r0
   1df70:	bne	1df04 <__assert_fail@plt+0xc200>
   1df74:	cmp	r0, #0
   1df78:	beq	1df90 <__assert_fail@plt+0xc28c>
   1df7c:	movw	r1, #56052	; 0xdaf4
   1df80:	movt	r1, #1
   1df84:	mov	r2, #0
   1df88:	bl	1da7c <__assert_fail@plt+0xbd78>
   1df8c:	ldr	r2, [fp, #12]
   1df90:	mov	r0, #13
   1df94:	str	r0, [r2]
   1df98:	b	1e0a0 <__assert_fail@plt+0xc39c>
   1df9c:	mov	r4, r6
   1dfa0:	b	1e0a4 <__assert_fail@plt+0xc3a0>
   1dfa4:	mov	r0, #5
   1dfa8:	str	r0, [r3]
   1dfac:	b	1e0a0 <__assert_fail@plt+0xc39c>
   1dfb0:	mov	r0, #16
   1dfb4:	str	r0, [r3]
   1dfb8:	b	1e0a0 <__assert_fail@plt+0xc39c>
   1dfbc:	mov	r6, #9
   1dfc0:	mov	r0, #6
   1dfc4:	str	r0, [r5]
   1dfc8:	mov	r4, #0
   1dfcc:	mov	r0, r7
   1dfd0:	mov	r1, #0
   1dfd4:	mov	r2, #0
   1dfd8:	mov	r3, r5
   1dfdc:	bl	1e0bc <__assert_fail@plt+0xc3b8>
   1dfe0:	mov	r8, r0
   1dfe4:	str	r6, [r5]
   1dfe8:	mov	r0, r7
   1dfec:	mov	r1, #0
   1dff0:	mov	r2, #0
   1dff4:	mov	r3, r5
   1dff8:	bl	1e0bc <__assert_fail@plt+0xc3b8>
   1dffc:	mov	r1, r0
   1e000:	mov	r0, r7
   1e004:	mov	r7, r1
   1e008:	mov	r1, r8
   1e00c:	mov	r2, r7
   1e010:	mov	r3, #10
   1e014:	bl	1d044 <__assert_fail@plt+0xb340>
   1e018:	cmp	r8, #0
   1e01c:	cmpne	r7, #0
   1e020:	bne	1e04c <__assert_fail@plt+0xc348>
   1e024:	mov	r0, #12
   1e028:	ldr	r1, [fp, #12]
   1e02c:	str	r0, [r1]
   1e030:	b	1e0a4 <__assert_fail@plt+0xc3a0>
   1e034:	mov	r4, #0
   1e038:	mov	r0, r7
   1e03c:	mov	r1, #0
   1e040:	mov	r2, #0
   1e044:	mov	r3, r5
   1e048:	bl	1e0bc <__assert_fail@plt+0xc3b8>
   1e04c:	mov	r6, r0
   1e050:	cmp	r0, #0
   1e054:	beq	1e024 <__assert_fail@plt+0xc320>
   1e058:	mov	r0, r5
   1e05c:	mov	r1, sl
   1e060:	mov	r2, r9
   1e064:	bl	1ceb8 <__assert_fail@plt+0xb1b4>
   1e068:	mov	r4, r6
   1e06c:	b	1e0a4 <__assert_fail@plt+0xc3a0>
   1e070:	mov	r0, #13
   1e074:	str	r0, [r3]
   1e078:	b	1e0a0 <__assert_fail@plt+0xc39c>
   1e07c:	cmp	r6, #0
   1e080:	beq	1e0a0 <__assert_fail@plt+0xc39c>
   1e084:	movw	r1, #56052	; 0xdaf4
   1e088:	movt	r1, #1
   1e08c:	mov	r4, #0
   1e090:	mov	r0, r6
   1e094:	mov	r2, #0
   1e098:	bl	1da7c <__assert_fail@plt+0xbd78>
   1e09c:	b	1e0a4 <__assert_fail@plt+0xc3a0>
   1e0a0:	mov	r4, #0
   1e0a4:	mov	r0, r4
   1e0a8:	sub	sp, fp, #28
   1e0ac:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1e0b0:	mov	r0, #6
   1e0b4:	ldr	r1, [fp, #12]
   1e0b8:	b	1dd9c <__assert_fail@plt+0xc098>
   1e0bc:	push	{r4, r5, r6, r7, fp, lr}
   1e0c0:	add	fp, sp, #16
   1e0c4:	mov	r6, r3
   1e0c8:	mov	r4, r2
   1e0cc:	mov	r5, r1
   1e0d0:	mov	r7, r0
   1e0d4:	ldr	r0, [r0, #64]	; 0x40
   1e0d8:	cmp	r0, #31
   1e0dc:	beq	1e138 <__assert_fail@plt+0xc434>
   1e0e0:	ldr	r0, [r7, #56]	; 0x38
   1e0e4:	ldr	r1, [r7, #64]	; 0x40
   1e0e8:	add	r2, r1, #1
   1e0ec:	str	r2, [r7, #64]	; 0x40
   1e0f0:	add	r0, r0, r1, lsl #5
   1e0f4:	mov	r1, #0
   1e0f8:	str	r1, [r0, #4]!
   1e0fc:	str	r5, [r0, #4]
   1e100:	str	r4, [r0, #8]
   1e104:	ldm	r6, {r2, r3}
   1e108:	str	r1, [r0, #12]
   1e10c:	str	r1, [r0, #16]
   1e110:	mvn	r1, #0
   1e114:	str	r1, [r0, #28]
   1e118:	str	r2, [r0, #20]
   1e11c:	bic	r1, r3, #786432	; 0xc0000
   1e120:	str	r1, [r0, #24]
   1e124:	cmp	r5, #0
   1e128:	strne	r0, [r5]
   1e12c:	cmp	r4, #0
   1e130:	strne	r0, [r4]
   1e134:	pop	{r4, r5, r6, r7, fp, pc}
   1e138:	mov	r0, #996	; 0x3e4
   1e13c:	bl	1a2f8 <__assert_fail@plt+0x85f4>
   1e140:	cmp	r0, #0
   1e144:	moveq	r0, #0
   1e148:	popeq	{r4, r5, r6, r7, fp, pc}
   1e14c:	ldr	r1, [r7, #56]	; 0x38
   1e150:	str	r1, [r0]
   1e154:	mov	r1, #0
   1e158:	str	r1, [r7, #64]	; 0x40
   1e15c:	str	r0, [r7, #56]	; 0x38
   1e160:	b	1e0e0 <__assert_fail@plt+0xc3dc>
   1e164:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1e168:	add	fp, sp, #28
   1e16c:	sub	sp, sp, #12
   1e170:	mov	r5, r3
   1e174:	mov	r6, r2
   1e178:	mov	r7, r1
   1e17c:	mov	r4, r0
   1e180:	ldr	r8, [r1]
   1e184:	ldr	sl, [r1, #24]
   1e188:	add	r0, sl, #1
   1e18c:	str	r0, [r1, #24]
   1e190:	orr	r2, r3, #8388608	; 0x800000
   1e194:	mov	r0, r6
   1e198:	mov	r1, r4
   1e19c:	bl	1ceb8 <__assert_fail@plt+0xb1b4>
   1e1a0:	ldrb	r0, [r6, #4]
   1e1a4:	mov	r1, #0
   1e1a8:	ldr	r9, [fp, #12]
   1e1ac:	cmp	r0, #9
   1e1b0:	beq	1e1fc <__assert_fail@plt+0xc4f8>
   1e1b4:	ldr	r0, [fp, #8]
   1e1b8:	stm	sp, {r0, r9}
   1e1bc:	mov	r0, r4
   1e1c0:	mov	r1, r7
   1e1c4:	mov	r2, r6
   1e1c8:	mov	r3, r5
   1e1cc:	bl	1ced8 <__assert_fail@plt+0xb1d4>
   1e1d0:	mov	r1, r0
   1e1d4:	ldr	r0, [r9]
   1e1d8:	mov	r5, #0
   1e1dc:	cmp	r0, #0
   1e1e0:	bne	1e234 <__assert_fail@plt+0xc530>
   1e1e4:	ldrb	r0, [r6, #4]
   1e1e8:	cmp	r0, #9
   1e1ec:	bne	1e24c <__assert_fail@plt+0xc548>
   1e1f0:	ldr	r0, [r9]
   1e1f4:	cmp	r0, #0
   1e1f8:	bne	1e234 <__assert_fail@plt+0xc530>
   1e1fc:	cmp	sl, #8
   1e200:	ldrls	r0, [r8, #84]	; 0x54
   1e204:	movls	r2, #1
   1e208:	orrls	r0, r0, r2, lsl sl
   1e20c:	strls	r0, [r8, #84]	; 0x54
   1e210:	mov	r5, #0
   1e214:	mov	r0, r8
   1e218:	mov	r2, #0
   1e21c:	mov	r3, #17
   1e220:	bl	1d044 <__assert_fail@plt+0xb340>
   1e224:	cmp	r0, #0
   1e228:	beq	1e240 <__assert_fail@plt+0xc53c>
   1e22c:	str	sl, [r0, #20]
   1e230:	mov	r5, r0
   1e234:	mov	r0, r5
   1e238:	sub	sp, fp, #28
   1e23c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1e240:	mov	r0, #12
   1e244:	str	r0, [r9]
   1e248:	b	1e234 <__assert_fail@plt+0xc530>
   1e24c:	cmp	r1, #0
   1e250:	beq	1e26c <__assert_fail@plt+0xc568>
   1e254:	movw	r2, #56052	; 0xdaf4
   1e258:	movt	r2, #1
   1e25c:	mov	r0, r1
   1e260:	mov	r1, r2
   1e264:	mov	r2, #0
   1e268:	bl	1da7c <__assert_fail@plt+0xbd78>
   1e26c:	mov	r0, #8
   1e270:	str	r0, [r9]
   1e274:	b	1e234 <__assert_fail@plt+0xc530>
   1e278:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1e27c:	add	fp, sp, #28
   1e280:	sub	sp, sp, #124	; 0x7c
   1e284:	mov	r8, r3
   1e288:	mov	r6, r2
   1e28c:	mov	r9, r1
   1e290:	mov	r7, r0
   1e294:	mov	r5, #0
   1e298:	str	r5, [fp, #-32]	; 0xffffffe0
   1e29c:	str	r5, [fp, #-36]	; 0xffffffdc
   1e2a0:	mov	r0, #32
   1e2a4:	mov	r1, #1
   1e2a8:	bl	19f8c <__assert_fail@plt+0x8288>
   1e2ac:	mov	r4, r0
   1e2b0:	mov	r0, #40	; 0x28
   1e2b4:	mov	r1, #1
   1e2b8:	bl	19f8c <__assert_fail@plt+0x8288>
   1e2bc:	mov	sl, r0
   1e2c0:	cmp	r4, #0
   1e2c4:	cmpne	sl, #0
   1e2c8:	beq	1e754 <__assert_fail@plt+0xca50>
   1e2cc:	mov	r0, r6
   1e2d0:	mov	r1, r7
   1e2d4:	mov	r2, r8
   1e2d8:	bl	1ed9c <__assert_fail@plt+0xd098>
   1e2dc:	mov	r5, r0
   1e2e0:	ldrb	r0, [r6, #4]
   1e2e4:	cmp	r0, #25
   1e2e8:	beq	1e2fc <__assert_fail@plt+0xc5f8>
   1e2ec:	cmp	r0, #2
   1e2f0:	beq	1e74c <__assert_fail@plt+0xca48>
   1e2f4:	mov	r0, #0
   1e2f8:	b	1e34c <__assert_fail@plt+0xc648>
   1e2fc:	ldrb	r0, [sl, #16]
   1e300:	orr	r0, r0, #1
   1e304:	strb	r0, [sl, #16]
   1e308:	tst	r8, #256	; 0x100
   1e30c:	beq	1e31c <__assert_fail@plt+0xc618>
   1e310:	mov	r0, r4
   1e314:	mov	r1, #10
   1e318:	bl	1ef10 <__assert_fail@plt+0xd20c>
   1e31c:	ldr	r0, [r7, #40]	; 0x28
   1e320:	add	r0, r0, r5
   1e324:	str	r0, [r7, #40]	; 0x28
   1e328:	mov	r0, r6
   1e32c:	mov	r1, r7
   1e330:	mov	r2, r8
   1e334:	bl	1ed9c <__assert_fail@plt+0xd098>
   1e338:	mov	r5, r0
   1e33c:	ldrb	r0, [r6, #4]
   1e340:	cmp	r0, #2
   1e344:	beq	1e74c <__assert_fail@plt+0xca48>
   1e348:	mov	r0, #1
   1e34c:	str	r0, [sp, #20]
   1e350:	ldr	r0, [r6, #4]
   1e354:	uxtb	r1, r0
   1e358:	cmp	r1, #21
   1e35c:	moveq	r1, #1
   1e360:	bfieq	r0, r1, #0, #8
   1e364:	streq	r0, [r6, #4]
   1e368:	str	sl, [sp, #24]
   1e36c:	mov	r0, #3
   1e370:	str	r0, [fp, #-44]	; 0xffffffd4
   1e374:	add	r0, sp, #68	; 0x44
   1e378:	str	r0, [fp, #-40]	; 0xffffffd8
   1e37c:	mov	r0, #1
   1e380:	str	r8, [sp]
   1e384:	str	r0, [sp, #4]
   1e388:	sub	r0, fp, #44	; 0x2c
   1e38c:	mov	r1, r7
   1e390:	mov	r2, r6
   1e394:	mov	r3, r5
   1e398:	bl	1ef34 <__assert_fail@plt+0xd230>
   1e39c:	cmp	r0, #0
   1e3a0:	bne	1e73c <__assert_fail@plt+0xca38>
   1e3a4:	mov	r0, #0
   1e3a8:	str	r0, [sp, #16]
   1e3ac:	mov	r0, r6
   1e3b0:	mov	r1, r7
   1e3b4:	mov	r2, r8
   1e3b8:	bl	1ed9c <__assert_fail@plt+0xd098>
   1e3bc:	mov	sl, r0
   1e3c0:	ldr	r5, [fp, #-44]	; 0xffffffd4
   1e3c4:	cmp	r5, #2
   1e3c8:	beq	1e430 <__assert_fail@plt+0xc72c>
   1e3cc:	cmp	r5, #4
   1e3d0:	bne	1e3f4 <__assert_fail@plt+0xc6f0>
   1e3d4:	ldr	r0, [r7, #64]	; 0x40
   1e3d8:	ldr	r1, [fp, #-40]	; 0xffffffd8
   1e3dc:	stm	sp, {r1, r8}
   1e3e0:	mov	r1, r4
   1e3e4:	ldr	r2, [sp, #24]
   1e3e8:	sub	r3, fp, #36	; 0x24
   1e3ec:	bl	1f2d0 <__assert_fail@plt+0xd5cc>
   1e3f0:	b	1e43c <__assert_fail@plt+0xc738>
   1e3f4:	ldrb	r0, [r6, #4]
   1e3f8:	cmp	r0, #22
   1e3fc:	beq	1e49c <__assert_fail@plt+0xc798>
   1e400:	cmp	r0, #2
   1e404:	beq	1e738 <__assert_fail@plt+0xca34>
   1e408:	cmp	r5, #1
   1e40c:	beq	1e55c <__assert_fail@plt+0xc858>
   1e410:	cmp	r5, #2
   1e414:	beq	1e430 <__assert_fail@plt+0xc72c>
   1e418:	cmp	r5, #3
   1e41c:	bne	1e58c <__assert_fail@plt+0xc888>
   1e420:	ldr	r1, [fp, #-40]	; 0xffffffd8
   1e424:	mov	r0, r4
   1e428:	bl	1f298 <__assert_fail@plt+0xd594>
   1e42c:	b	1e43c <__assert_fail@plt+0xc738>
   1e430:	ldr	r1, [fp, #-40]	; 0xffffffd8
   1e434:	mov	r0, r4
   1e438:	bl	1f260 <__assert_fail@plt+0xd55c>
   1e43c:	ldr	r1, [fp, #8]
   1e440:	str	r0, [r1]
   1e444:	cmp	r0, #0
   1e448:	bne	1e744 <__assert_fail@plt+0xca40>
   1e44c:	ldrb	r0, [r6, #4]
   1e450:	cmp	r0, #21
   1e454:	beq	1e5c4 <__assert_fail@plt+0xc8c0>
   1e458:	cmp	r0, #2
   1e45c:	beq	1e738 <__assert_fail@plt+0xca34>
   1e460:	mov	r0, #3
   1e464:	str	r0, [fp, #-44]	; 0xffffffd4
   1e468:	add	r0, sp, #68	; 0x44
   1e46c:	str	r0, [fp, #-40]	; 0xffffffd8
   1e470:	str	r8, [sp]
   1e474:	mov	r0, #0
   1e478:	str	r0, [sp, #4]
   1e47c:	sub	r0, fp, #44	; 0x2c
   1e480:	mov	r1, r7
   1e484:	mov	r2, r6
   1e488:	mov	r3, sl
   1e48c:	bl	1ef34 <__assert_fail@plt+0xd230>
   1e490:	cmp	r0, #0
   1e494:	beq	1e3ac <__assert_fail@plt+0xc6a8>
   1e498:	b	1e73c <__assert_fail@plt+0xca38>
   1e49c:	ldr	r0, [r7, #40]	; 0x28
   1e4a0:	add	r0, r0, sl
   1e4a4:	str	r0, [r7, #40]	; 0x28
   1e4a8:	add	r0, sp, #28
   1e4ac:	mov	r1, r7
   1e4b0:	mov	r2, r8
   1e4b4:	bl	1ed9c <__assert_fail@plt+0xd098>
   1e4b8:	mov	r3, r0
   1e4bc:	ldrb	r0, [sp, #32]
   1e4c0:	cmp	r0, #21
   1e4c4:	beq	1e540 <__assert_fail@plt+0xc83c>
   1e4c8:	cmp	r0, #2
   1e4cc:	sub	r1, fp, #52	; 0x34
   1e4d0:	beq	1e738 <__assert_fail@plt+0xca34>
   1e4d4:	mov	r0, #3
   1e4d8:	str	r0, [fp, #-52]	; 0xffffffcc
   1e4dc:	add	r0, sp, #36	; 0x24
   1e4e0:	str	r0, [fp, #-48]	; 0xffffffd0
   1e4e4:	str	r8, [sp]
   1e4e8:	mov	r0, #1
   1e4ec:	str	r0, [sp, #4]
   1e4f0:	mov	r0, r1
   1e4f4:	mov	r5, r1
   1e4f8:	mov	r1, r7
   1e4fc:	add	r2, sp, #28
   1e500:	bl	1ef34 <__assert_fail@plt+0xd230>
   1e504:	cmp	r0, #0
   1e508:	bne	1e73c <__assert_fail@plt+0xca38>
   1e50c:	mov	r0, r6
   1e510:	mov	r1, r7
   1e514:	mov	r2, r8
   1e518:	bl	1ed9c <__assert_fail@plt+0xd098>
   1e51c:	mov	sl, r0
   1e520:	stm	sp, {r5, r9}
   1e524:	str	r8, [sp, #8]
   1e528:	mov	r0, r4
   1e52c:	ldr	r1, [sp, #24]
   1e530:	sub	r2, fp, #32
   1e534:	sub	r3, fp, #44	; 0x2c
   1e538:	bl	1f03c <__assert_fail@plt+0xd338>
   1e53c:	b	1e43c <__assert_fail@plt+0xc738>
   1e540:	ldr	r0, [r7, #40]	; 0x28
   1e544:	sub	r0, r0, sl
   1e548:	str	r0, [r7, #40]	; 0x28
   1e54c:	mov	r0, #1
   1e550:	strb	r0, [r6, #4]
   1e554:	cmp	r5, #1
   1e558:	bne	1e410 <__assert_fail@plt+0xc70c>
   1e55c:	ldr	r5, [sp, #24]
   1e560:	ldr	r0, [r5, #20]
   1e564:	ldr	r1, [sp, #16]
   1e568:	cmp	r1, r0
   1e56c:	beq	1e59c <__assert_fail@plt+0xc898>
   1e570:	ldr	r0, [r5]
   1e574:	ldr	r1, [r5, #20]
   1e578:	add	r2, r1, #1
   1e57c:	ldr	r3, [fp, #-40]	; 0xffffffd8
   1e580:	str	r2, [r5, #20]
   1e584:	str	r3, [r0, r1, lsl #2]
   1e588:	b	1e44c <__assert_fail@plt+0xc748>
   1e58c:	ldrb	r1, [fp, #-40]	; 0xffffffd8
   1e590:	mov	r0, r4
   1e594:	bl	1ef10 <__assert_fail@plt+0xd20c>
   1e598:	b	1e44c <__assert_fail@plt+0xc748>
   1e59c:	mov	r1, #1
   1e5a0:	orr	r0, r1, r0, lsl #1
   1e5a4:	str	r0, [sp, #16]
   1e5a8:	lsl	r1, r0, #2
   1e5ac:	ldr	r0, [r5]
   1e5b0:	bl	1a388 <__assert_fail@plt+0x8684>
   1e5b4:	cmp	r0, #0
   1e5b8:	beq	1e774 <__assert_fail@plt+0xca70>
   1e5bc:	str	r0, [r5]
   1e5c0:	b	1e570 <__assert_fail@plt+0xc86c>
   1e5c4:	ldr	r0, [r7, #40]	; 0x28
   1e5c8:	add	r0, r0, sl
   1e5cc:	str	r0, [r7, #40]	; 0x28
   1e5d0:	ldr	r0, [sp, #20]
   1e5d4:	cmp	r0, #0
   1e5d8:	movne	r0, r4
   1e5dc:	blne	1fb38 <__assert_fail@plt+0xde34>
   1e5e0:	ldr	r0, [r9, #92]	; 0x5c
   1e5e4:	cmp	r0, #2
   1e5e8:	ldr	sl, [sp, #24]
   1e5ec:	blt	1e5fc <__assert_fail@plt+0xc8f8>
   1e5f0:	ldr	r1, [r9, #60]	; 0x3c
   1e5f4:	mov	r0, r4
   1e5f8:	bl	1fb58 <__assert_fail@plt+0xde54>
   1e5fc:	ldr	r0, [sl, #20]
   1e600:	cmp	r0, #0
   1e604:	bne	1e62c <__assert_fail@plt+0xc928>
   1e608:	ldr	r0, [sl, #24]
   1e60c:	cmp	r0, #0
   1e610:	bne	1e62c <__assert_fail@plt+0xc928>
   1e614:	ldr	r0, [sl, #28]
   1e618:	cmp	r0, #0
   1e61c:	bne	1e62c <__assert_fail@plt+0xc928>
   1e620:	ldr	r0, [sl, #32]
   1e624:	cmp	r0, #0
   1e628:	beq	1e6e8 <__assert_fail@plt+0xc9e4>
   1e62c:	ldrb	r0, [r9, #88]	; 0x58
   1e630:	orr	r0, r0, #2
   1e634:	strb	r0, [r9, #88]	; 0x58
   1e638:	str	sl, [sp, #68]	; 0x44
   1e63c:	ldr	r7, [sp, #72]	; 0x48
   1e640:	mov	r0, #6
   1e644:	strb	r0, [sp, #72]	; 0x48
   1e648:	mov	r6, #0
   1e64c:	add	r3, sp, #68	; 0x44
   1e650:	mov	r0, r9
   1e654:	mov	r1, #0
   1e658:	mov	r2, #0
   1e65c:	bl	1e0bc <__assert_fail@plt+0xc3b8>
   1e660:	cmp	r0, #0
   1e664:	beq	1e778 <__assert_fail@plt+0xca74>
   1e668:	mov	r5, r0
   1e66c:	bic	r0, r7, #255	; 0xff
   1e670:	ldr	r1, [r4, r6, lsl #2]
   1e674:	cmp	r1, #0
   1e678:	bne	1e694 <__assert_fail@plt+0xc990>
   1e67c:	add	r6, r6, #1
   1e680:	cmp	r6, #7
   1e684:	bls	1e670 <__assert_fail@plt+0xc96c>
   1e688:	mov	r0, r4
   1e68c:	bl	1a22c <__assert_fail@plt+0x8528>
   1e690:	b	1e6dc <__assert_fail@plt+0xc9d8>
   1e694:	str	r4, [sp, #68]	; 0x44
   1e698:	orr	r0, r0, #3
   1e69c:	str	r0, [sp, #72]	; 0x48
   1e6a0:	add	r3, sp, #68	; 0x44
   1e6a4:	mov	r0, r9
   1e6a8:	mov	r1, #0
   1e6ac:	mov	r2, #0
   1e6b0:	bl	1e0bc <__assert_fail@plt+0xc3b8>
   1e6b4:	cmp	r0, #0
   1e6b8:	beq	1e778 <__assert_fail@plt+0xca74>
   1e6bc:	mov	r1, r0
   1e6c0:	mov	r0, r9
   1e6c4:	mov	r2, r5
   1e6c8:	mov	r3, #10
   1e6cc:	bl	1d044 <__assert_fail@plt+0xb340>
   1e6d0:	mov	r5, r0
   1e6d4:	cmp	r0, #0
   1e6d8:	beq	1e778 <__assert_fail@plt+0xca74>
   1e6dc:	mov	r0, r5
   1e6e0:	sub	sp, fp, #28
   1e6e4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1e6e8:	ldr	r0, [r9, #92]	; 0x5c
   1e6ec:	cmp	r0, #2
   1e6f0:	blt	1e70c <__assert_fail@plt+0xca08>
   1e6f4:	ldr	r0, [sl, #36]	; 0x24
   1e6f8:	cmp	r0, #0
   1e6fc:	bne	1e62c <__assert_fail@plt+0xc928>
   1e700:	ldrb	r0, [sl, #16]
   1e704:	tst	r0, #1
   1e708:	bne	1e62c <__assert_fail@plt+0xc928>
   1e70c:	mov	r0, sl
   1e710:	bl	1bb70 <__assert_fail@plt+0x9e6c>
   1e714:	str	r4, [sp, #68]	; 0x44
   1e718:	mov	r0, #3
   1e71c:	strb	r0, [sp, #72]	; 0x48
   1e720:	add	r3, sp, #68	; 0x44
   1e724:	mov	r0, r9
   1e728:	mov	r1, #0
   1e72c:	mov	r2, #0
   1e730:	bl	1e0bc <__assert_fail@plt+0xc3b8>
   1e734:	b	1e6d0 <__assert_fail@plt+0xc9cc>
   1e738:	mov	r0, #7
   1e73c:	ldr	r1, [fp, #8]
   1e740:	str	r0, [r1]
   1e744:	ldr	sl, [sp, #24]
   1e748:	b	1e784 <__assert_fail@plt+0xca80>
   1e74c:	mov	r0, #2
   1e750:	b	1e77c <__assert_fail@plt+0xca78>
   1e754:	mov	r0, r4
   1e758:	bl	1a22c <__assert_fail@plt+0x8528>
   1e75c:	mov	r0, sl
   1e760:	bl	1a22c <__assert_fail@plt+0x8528>
   1e764:	mov	r0, #12
   1e768:	ldr	r1, [fp, #8]
   1e76c:	str	r0, [r1]
   1e770:	b	1e6dc <__assert_fail@plt+0xc9d8>
   1e774:	mov	sl, r5
   1e778:	mov	r0, #12
   1e77c:	ldr	r1, [fp, #8]
   1e780:	str	r0, [r1]
   1e784:	mov	r0, r4
   1e788:	bl	1a22c <__assert_fail@plt+0x8528>
   1e78c:	mov	r0, sl
   1e790:	bl	1bb70 <__assert_fail@plt+0x9e6c>
   1e794:	mov	r5, #0
   1e798:	b	1e6dc <__assert_fail@plt+0xc9d8>
   1e79c:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   1e7a0:	add	fp, sp, #24
   1e7a4:	mov	r4, r0
   1e7a8:	ldrb	r0, [r0, #88]	; 0x58
   1e7ac:	orr	r1, r0, #16
   1e7b0:	strb	r1, [r4, #88]	; 0x58
   1e7b4:	tst	r0, #8
   1e7b8:	bne	1e7f4 <__assert_fail@plt+0xcaf0>
   1e7bc:	movw	r1, #0
   1e7c0:	movt	r1, #1023	; 0x3ff
   1e7c4:	mov	r2, #0
   1e7c8:	mvn	r3, #2013265921	; 0x78000001
   1e7cc:	mvn	r7, #-134217727	; 0xf8000001
   1e7d0:	str	r2, [r4, #96]	; 0x60
   1e7d4:	add	r2, r4, #100	; 0x64
   1e7d8:	stm	r2, {r1, r3, r7}
   1e7dc:	tst	r0, #4
   1e7e0:	beq	1e800 <__assert_fail@plt+0xcafc>
   1e7e4:	vmov.i32	q8, #0	; 0x00000000
   1e7e8:	add	r0, r4, #112	; 0x70
   1e7ec:	vst1.32	{d16-d17}, [r0]
   1e7f0:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   1e7f4:	mov	r5, #0
   1e7f8:	mov	r8, #0
   1e7fc:	b	1e808 <__assert_fail@plt+0xcb04>
   1e800:	mov	r8, #4
   1e804:	mov	r5, #128	; 0x80
   1e808:	bl	11ac4 <__ctype_b_loc@plt>
   1e80c:	ldr	r0, [r0]
   1e810:	add	r6, r0, r5, lsl #1
   1e814:	mov	r1, #1
   1e818:	b	1e830 <__assert_fail@plt+0xcb2c>
   1e81c:	add	r6, r6, #64	; 0x40
   1e820:	add	r8, r8, #1
   1e824:	add	r5, r5, #32
   1e828:	cmp	r8, #8
   1e82c:	popeq	{r4, r5, r6, r7, r8, sl, fp, pc}
   1e830:	add	r0, r4, r8, lsl #2
   1e834:	add	r2, r0, #96	; 0x60
   1e838:	mov	r3, #0
   1e83c:	mov	r0, r6
   1e840:	add	r7, r5, r3
   1e844:	cmp	r7, #95	; 0x5f
   1e848:	beq	1e858 <__assert_fail@plt+0xcb54>
   1e84c:	ldrh	r7, [r0]
   1e850:	ands	r7, r7, #8
   1e854:	beq	1e864 <__assert_fail@plt+0xcb60>
   1e858:	ldr	r7, [r2]
   1e85c:	orr	r7, r7, r1, lsl r3
   1e860:	str	r7, [r2]
   1e864:	add	r0, r0, #2
   1e868:	add	r3, r3, #1
   1e86c:	cmp	r3, #32
   1e870:	bne	1e840 <__assert_fail@plt+0xcb3c>
   1e874:	b	1e81c <__assert_fail@plt+0xcb18>
   1e878:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1e87c:	add	fp, sp, #28
   1e880:	sub	sp, sp, #20
   1e884:	mov	r8, r3
   1e888:	mov	r6, r2
   1e88c:	mov	r4, r1
   1e890:	mov	r9, r0
   1e894:	mov	r7, #0
   1e898:	str	r7, [sp, #16]
   1e89c:	mov	r0, #32
   1e8a0:	mov	r1, #1
   1e8a4:	bl	19f8c <__assert_fail@plt+0x8288>
   1e8a8:	ldr	r1, [fp, #12]
   1e8ac:	cmp	r0, #0
   1e8b0:	beq	1ea20 <__assert_fail@plt+0xcd1c>
   1e8b4:	mov	r5, r0
   1e8b8:	mov	r0, #40	; 0x28
   1e8bc:	mov	r1, #1
   1e8c0:	bl	19f8c <__assert_fail@plt+0x8288>
   1e8c4:	cmp	r0, #0
   1e8c8:	beq	1ea2c <__assert_fail@plt+0xcd28>
   1e8cc:	mov	sl, r0
   1e8d0:	ldr	r1, [fp, #8]
   1e8d4:	ldrb	r0, [r0, #16]
   1e8d8:	and	r0, r0, #254	; 0xfe
   1e8dc:	orr	r0, r0, r1
   1e8e0:	strb	r0, [sl, #16]
   1e8e4:	mov	r7, #0
   1e8e8:	stm	sp, {r6, r7}
   1e8ec:	add	r3, sp, #16
   1e8f0:	mov	r0, r4
   1e8f4:	mov	r1, r5
   1e8f8:	mov	r2, sl
   1e8fc:	bl	1f2d0 <__assert_fail@plt+0xd5cc>
   1e900:	cmp	r0, #0
   1e904:	bne	1ea48 <__assert_fail@plt+0xcd44>
   1e908:	ldrb	r0, [r8]
   1e90c:	cmp	r0, #0
   1e910:	beq	1e930 <__assert_fail@plt+0xcc2c>
   1e914:	add	r4, r8, #1
   1e918:	uxtb	r1, r0
   1e91c:	mov	r0, r5
   1e920:	bl	1ef10 <__assert_fail@plt+0xd20c>
   1e924:	ldrb	r0, [r4], #1
   1e928:	cmp	r0, #0
   1e92c:	bne	1e918 <__assert_fail@plt+0xcc14>
   1e930:	ldr	r0, [fp, #8]
   1e934:	cmp	r0, #0
   1e938:	movne	r0, r5
   1e93c:	blne	1fb38 <__assert_fail@plt+0xde34>
   1e940:	ldr	r0, [r9, #92]	; 0x5c
   1e944:	cmp	r0, #2
   1e948:	blt	1e958 <__assert_fail@plt+0xcc54>
   1e94c:	ldr	r1, [r9, #60]	; 0x3c
   1e950:	mov	r0, r5
   1e954:	bl	1fb58 <__assert_fail@plt+0xde54>
   1e958:	str	r5, [sp, #8]
   1e95c:	ldr	r4, [sp, #12]
   1e960:	bfc	r4, #0, #23
   1e964:	orr	r0, r4, #3
   1e968:	str	r0, [sp, #12]
   1e96c:	mov	r7, #0
   1e970:	add	r3, sp, #8
   1e974:	mov	r0, r9
   1e978:	mov	r1, #0
   1e97c:	mov	r2, #0
   1e980:	bl	1e0bc <__assert_fail@plt+0xc3b8>
   1e984:	cmp	r0, #0
   1e988:	beq	1ea04 <__assert_fail@plt+0xcd00>
   1e98c:	mov	r6, r0
   1e990:	ldr	r0, [r9, #92]	; 0x5c
   1e994:	cmp	r0, #2
   1e998:	blt	1e9ec <__assert_fail@plt+0xcce8>
   1e99c:	str	sl, [sp, #8]
   1e9a0:	orr	r0, r4, #6
   1e9a4:	str	r0, [sp, #12]
   1e9a8:	ldrb	r0, [r9, #88]	; 0x58
   1e9ac:	orr	r0, r0, #2
   1e9b0:	strb	r0, [r9, #88]	; 0x58
   1e9b4:	add	r3, sp, #8
   1e9b8:	mov	r0, r9
   1e9bc:	mov	r1, #0
   1e9c0:	mov	r2, #0
   1e9c4:	bl	1e0bc <__assert_fail@plt+0xc3b8>
   1e9c8:	cmp	r0, #0
   1e9cc:	beq	1ea04 <__assert_fail@plt+0xcd00>
   1e9d0:	mov	r2, r0
   1e9d4:	mov	r0, r9
   1e9d8:	mov	r1, r6
   1e9dc:	mov	r3, #10
   1e9e0:	bl	1d044 <__assert_fail@plt+0xb340>
   1e9e4:	mov	r7, r0
   1e9e8:	b	1e9f8 <__assert_fail@plt+0xccf4>
   1e9ec:	mov	r0, sl
   1e9f0:	bl	1bb70 <__assert_fail@plt+0x9e6c>
   1e9f4:	mov	r7, r6
   1e9f8:	mov	r0, r7
   1e9fc:	sub	sp, fp, #28
   1ea00:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1ea04:	mov	r0, r5
   1ea08:	bl	1a22c <__assert_fail@plt+0x8528>
   1ea0c:	mov	r0, sl
   1ea10:	bl	1bb70 <__assert_fail@plt+0x9e6c>
   1ea14:	mov	r0, #12
   1ea18:	ldr	r1, [fp, #12]
   1ea1c:	b	1ea24 <__assert_fail@plt+0xcd20>
   1ea20:	mov	r0, #12
   1ea24:	str	r0, [r1]
   1ea28:	b	1e9f8 <__assert_fail@plt+0xccf4>
   1ea2c:	mov	r0, r5
   1ea30:	bl	1a22c <__assert_fail@plt+0x8528>
   1ea34:	mov	r0, #12
   1ea38:	ldr	r1, [fp, #12]
   1ea3c:	str	r0, [r1]
   1ea40:	mov	r7, #0
   1ea44:	b	1e9f8 <__assert_fail@plt+0xccf4>
   1ea48:	mov	r6, r0
   1ea4c:	mov	r0, r5
   1ea50:	bl	1a22c <__assert_fail@plt+0x8528>
   1ea54:	mov	r0, sl
   1ea58:	bl	1bb70 <__assert_fail@plt+0x9e6c>
   1ea5c:	ldr	r0, [fp, #12]
   1ea60:	str	r6, [r0]
   1ea64:	b	1e9f8 <__assert_fail@plt+0xccf4>
   1ea68:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1ea6c:	add	fp, sp, #28
   1ea70:	sub	sp, sp, #20
   1ea74:	mov	r7, r3
   1ea78:	mov	r5, r2
   1ea7c:	mov	r8, r1
   1ea80:	mov	r4, r0
   1ea84:	ldrb	r0, [r3, #4]
   1ea88:	ldr	r1, [fp, #12]
   1ea8c:	str	r1, [sp, #16]
   1ea90:	ldr	sl, [fp, #8]
   1ea94:	cmp	r0, #23
   1ea98:	bne	1eaf0 <__assert_fail@plt+0xcdec>
   1ea9c:	ldr	r0, [r7]
   1eaa0:	str	r0, [sp, #12]
   1eaa4:	ldr	r0, [r7, #4]
   1eaa8:	str	r0, [sp, #8]
   1eaac:	ldr	r0, [r8, #40]	; 0x28
   1eab0:	str	r0, [sp, #4]
   1eab4:	mov	r0, r8
   1eab8:	mov	r1, r7
   1eabc:	mov	r2, sl
   1eac0:	bl	1fdac <__assert_fail@plt+0xe0a8>
   1eac4:	cmn	r0, #1
   1eac8:	bne	1eb0c <__assert_fail@plt+0xce08>
   1eacc:	ldrb	r0, [r7, #4]
   1ead0:	cmp	r0, #1
   1ead4:	bne	1eae8 <__assert_fail@plt+0xcde4>
   1ead8:	ldrb	r0, [r7]
   1eadc:	mov	r6, #0
   1eae0:	cmp	r0, #44	; 0x2c
   1eae4:	beq	1eb18 <__assert_fail@plt+0xce14>
   1eae8:	mov	r0, #10
   1eaec:	b	1ed60 <__assert_fail@plt+0xd05c>
   1eaf0:	mvn	r9, #0
   1eaf4:	cmp	r0, #19
   1eaf8:	movweq	r9, #1
   1eafc:	sub	r0, r0, #18
   1eb00:	clz	r0, r0
   1eb04:	lsr	r6, r0, #5
   1eb08:	b	1ebb0 <__assert_fail@plt+0xceac>
   1eb0c:	mov	r6, r0
   1eb10:	cmn	r0, #2
   1eb14:	beq	1eb38 <__assert_fail@plt+0xce34>
   1eb18:	ldrb	r0, [r7, #4]
   1eb1c:	cmp	r0, #24
   1eb20:	mov	r9, r6
   1eb24:	beq	1eb80 <__assert_fail@plt+0xce7c>
   1eb28:	cmp	r0, #1
   1eb2c:	ldrbeq	r0, [r7]
   1eb30:	cmpeq	r0, #44	; 0x2c
   1eb34:	beq	1eb64 <__assert_fail@plt+0xce60>
   1eb38:	tst	sl, #2097152	; 0x200000
   1eb3c:	beq	1ed78 <__assert_fail@plt+0xd074>
   1eb40:	ldr	r0, [sp, #4]
   1eb44:	str	r0, [r8, #40]	; 0x28
   1eb48:	ldr	r0, [sp, #12]
   1eb4c:	str	r0, [r7]
   1eb50:	ldr	r0, [sp, #8]
   1eb54:	str	r0, [r7, #4]
   1eb58:	mov	r0, #1
   1eb5c:	strb	r0, [r7, #4]
   1eb60:	b	1ed6c <__assert_fail@plt+0xd068>
   1eb64:	mov	r0, r8
   1eb68:	mov	r1, r7
   1eb6c:	mov	r2, sl
   1eb70:	bl	1fdac <__assert_fail@plt+0xe0a8>
   1eb74:	mov	r9, r0
   1eb78:	cmn	r0, #2
   1eb7c:	beq	1eb38 <__assert_fail@plt+0xce34>
   1eb80:	cmn	r9, #1
   1eb84:	beq	1eb90 <__assert_fail@plt+0xce8c>
   1eb88:	cmp	r6, r9
   1eb8c:	bgt	1eae8 <__assert_fail@plt+0xcde4>
   1eb90:	ldrb	r0, [r7, #4]
   1eb94:	cmp	r0, #24
   1eb98:	bne	1eae8 <__assert_fail@plt+0xcde4>
   1eb9c:	cmn	r9, #1
   1eba0:	mov	r0, r9
   1eba4:	moveq	r0, r6
   1eba8:	cmp	r0, #32768	; 0x8000
   1ebac:	bge	1ed94 <__assert_fail@plt+0xd090>
   1ebb0:	mov	r0, r7
   1ebb4:	mov	r1, r8
   1ebb8:	mov	r2, sl
   1ebbc:	bl	1ceb8 <__assert_fail@plt+0xb1b4>
   1ebc0:	cmp	r4, #0
   1ebc4:	beq	1ed68 <__assert_fail@plt+0xd064>
   1ebc8:	orrs	r0, r9, r6
   1ebcc:	beq	1ecc0 <__assert_fail@plt+0xcfbc>
   1ebd0:	mov	r8, #0
   1ebd4:	cmp	r6, #1
   1ebd8:	bge	1ecd8 <__assert_fail@plt+0xcfd4>
   1ebdc:	ldrb	r0, [r4, #24]
   1ebe0:	cmp	r0, #17
   1ebe4:	bne	1ebfc <__assert_fail@plt+0xcef8>
   1ebe8:	ldr	r2, [r4, #20]
   1ebec:	movw	r1, #65328	; 0xff30
   1ebf0:	movt	r1, #1
   1ebf4:	mov	r0, r4
   1ebf8:	bl	1da7c <__assert_fail@plt+0xbd78>
   1ebfc:	mov	r3, #10
   1ec00:	cmn	r9, #1
   1ec04:	movweq	r3, #11
   1ec08:	mov	r0, r5
   1ec0c:	mov	r1, r4
   1ec10:	mov	r2, #0
   1ec14:	bl	1d044 <__assert_fail@plt+0xb340>
   1ec18:	cmp	r0, #0
   1ec1c:	beq	1ed5c <__assert_fail@plt+0xd058>
   1ec20:	mov	r7, r0
   1ec24:	add	r0, r6, #2
   1ec28:	cmp	r0, r9
   1ec2c:	ble	1ec54 <__assert_fail@plt+0xcf50>
   1ec30:	cmp	r8, #0
   1ec34:	beq	1ecb8 <__assert_fail@plt+0xcfb4>
   1ec38:	mov	r0, r5
   1ec3c:	mov	r1, r8
   1ec40:	mov	r2, r7
   1ec44:	mov	r3, #16
   1ec48:	sub	sp, fp, #28
   1ec4c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1ec50:	b	1d044 <__assert_fail@plt+0xb340>
   1ec54:	add	r6, r6, #1
   1ec58:	mov	r0, r4
   1ec5c:	mov	r1, r5
   1ec60:	bl	1fe54 <__assert_fail@plt+0xe150>
   1ec64:	mov	r4, r0
   1ec68:	mov	r0, r5
   1ec6c:	mov	r1, r7
   1ec70:	mov	r2, r4
   1ec74:	mov	r3, #16
   1ec78:	bl	1d044 <__assert_fail@plt+0xb340>
   1ec7c:	cmp	r4, #0
   1ec80:	movne	r1, r0
   1ec84:	cmpne	r0, #0
   1ec88:	beq	1ed5c <__assert_fail@plt+0xd058>
   1ec8c:	mov	r0, r5
   1ec90:	mov	r2, #0
   1ec94:	mov	r3, #10
   1ec98:	bl	1d044 <__assert_fail@plt+0xb340>
   1ec9c:	cmp	r0, #0
   1eca0:	beq	1ed5c <__assert_fail@plt+0xd058>
   1eca4:	mov	r7, r0
   1eca8:	add	r6, r6, #1
   1ecac:	cmp	r6, r9
   1ecb0:	blt	1ec58 <__assert_fail@plt+0xcf54>
   1ecb4:	b	1ec30 <__assert_fail@plt+0xcf2c>
   1ecb8:	mov	r4, r7
   1ecbc:	b	1ed6c <__assert_fail@plt+0xd068>
   1ecc0:	movw	r1, #56052	; 0xdaf4
   1ecc4:	movt	r1, #1
   1ecc8:	mov	r0, r4
   1eccc:	mov	r2, #0
   1ecd0:	bl	1da7c <__assert_fail@plt+0xbd78>
   1ecd4:	b	1ed68 <__assert_fail@plt+0xd064>
   1ecd8:	bne	1ed04 <__assert_fail@plt+0xd000>
   1ecdc:	mov	r8, r4
   1ece0:	cmp	r6, r9
   1ece4:	beq	1ed54 <__assert_fail@plt+0xd050>
   1ece8:	mov	r0, r4
   1ecec:	mov	r1, r5
   1ecf0:	bl	1fe54 <__assert_fail@plt+0xe150>
   1ecf4:	mov	r4, r0
   1ecf8:	cmp	r0, #0
   1ecfc:	bne	1ebdc <__assert_fail@plt+0xced8>
   1ed00:	b	1ed5c <__assert_fail@plt+0xd058>
   1ed04:	mov	r7, #1
   1ed08:	mov	r8, r4
   1ed0c:	mov	r0, r4
   1ed10:	mov	r1, r5
   1ed14:	bl	1fe54 <__assert_fail@plt+0xe150>
   1ed18:	mov	r4, r0
   1ed1c:	mov	r0, r5
   1ed20:	mov	r1, r8
   1ed24:	mov	r2, r4
   1ed28:	mov	r3, #16
   1ed2c:	bl	1d044 <__assert_fail@plt+0xb340>
   1ed30:	cmp	r4, #0
   1ed34:	movne	r8, r0
   1ed38:	cmpne	r0, #0
   1ed3c:	beq	1ed5c <__assert_fail@plt+0xd058>
   1ed40:	add	r7, r7, #1
   1ed44:	cmp	r7, r6
   1ed48:	blt	1ed0c <__assert_fail@plt+0xd008>
   1ed4c:	cmp	r6, r9
   1ed50:	bne	1ece8 <__assert_fail@plt+0xcfe4>
   1ed54:	mov	r4, r8
   1ed58:	b	1ed6c <__assert_fail@plt+0xd068>
   1ed5c:	mov	r0, #12
   1ed60:	ldr	r1, [sp, #16]
   1ed64:	str	r0, [r1]
   1ed68:	mov	r4, #0
   1ed6c:	mov	r0, r4
   1ed70:	sub	sp, fp, #28
   1ed74:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1ed78:	ldrb	r0, [r7, #4]
   1ed7c:	mov	r1, #10
   1ed80:	cmp	r0, #2
   1ed84:	movweq	r1, #9
   1ed88:	ldr	r0, [sp, #16]
   1ed8c:	str	r1, [r0]
   1ed90:	b	1ed68 <__assert_fail@plt+0xd064>
   1ed94:	mov	r0, #15
   1ed98:	b	1ed60 <__assert_fail@plt+0xd05c>
   1ed9c:	push	{r4, sl, fp, lr}
   1eda0:	add	fp, sp, #8
   1eda4:	ldr	ip, [r1, #40]	; 0x28
   1eda8:	ldr	r3, [r1, #56]	; 0x38
   1edac:	cmp	r3, ip
   1edb0:	ble	1ee30 <__assert_fail@plt+0xd12c>
   1edb4:	ldr	r3, [r1, #4]
   1edb8:	ldrb	ip, [r3, ip]
   1edbc:	strb	ip, [r0]
   1edc0:	ldr	r3, [r1, #80]	; 0x50
   1edc4:	cmp	r3, #2
   1edc8:	blt	1edec <__assert_fail@plt+0xd0e8>
   1edcc:	ldr	lr, [r1, #28]
   1edd0:	ldr	r4, [r1, #40]	; 0x28
   1edd4:	cmp	r4, lr
   1edd8:	beq	1edec <__assert_fail@plt+0xd0e8>
   1eddc:	ldr	r3, [r1, #8]
   1ede0:	ldr	r3, [r3, r4, lsl #2]
   1ede4:	cmn	r3, #1
   1ede8:	beq	1eedc <__assert_fail@plt+0xd1d8>
   1edec:	tst	r2, #1
   1edf0:	beq	1ee44 <__assert_fail@plt+0xd140>
   1edf4:	cmp	ip, #92	; 0x5c
   1edf8:	bne	1ee44 <__assert_fail@plt+0xd140>
   1edfc:	ldr	r2, [r1, #40]	; 0x28
   1ee00:	ldr	r3, [r1, #48]	; 0x30
   1ee04:	add	r2, r2, #1
   1ee08:	cmp	r2, r3
   1ee0c:	bge	1eedc <__assert_fail@plt+0xd1d8>
   1ee10:	str	r2, [r1, #40]	; 0x28
   1ee14:	ldr	r1, [r1, #4]
   1ee18:	ldrb	r2, [r1, r2]
   1ee1c:	mov	r1, #1
   1ee20:	strb	r1, [r0, #4]
   1ee24:	strb	r2, [r0]
   1ee28:	mov	r0, r1
   1ee2c:	pop	{r4, sl, fp, pc}
   1ee30:	mov	r1, #2
   1ee34:	strb	r1, [r0, #4]
   1ee38:	mov	r1, #0
   1ee3c:	mov	r0, r1
   1ee40:	pop	{r4, sl, fp, pc}
   1ee44:	cmp	ip, #92	; 0x5c
   1ee48:	bgt	1ee9c <__assert_fail@plt+0xd198>
   1ee4c:	cmp	ip, #45	; 0x2d
   1ee50:	beq	1eeb4 <__assert_fail@plt+0xd1b0>
   1ee54:	cmp	ip, #91	; 0x5b
   1ee58:	bne	1eedc <__assert_fail@plt+0xd1d8>
   1ee5c:	ldr	r3, [r1, #40]	; 0x28
   1ee60:	ldr	r4, [r1, #48]	; 0x30
   1ee64:	add	r3, r3, #1
   1ee68:	cmp	r3, r4
   1ee6c:	bge	1eed0 <__assert_fail@plt+0xd1cc>
   1ee70:	ldr	r1, [r1, #4]
   1ee74:	ldrb	r1, [r1, r3]
   1ee78:	strb	r1, [r0]
   1ee7c:	cmp	r1, #61	; 0x3d
   1ee80:	beq	1eeec <__assert_fail@plt+0xd1e8>
   1ee84:	cmp	r1, #58	; 0x3a
   1ee88:	beq	1eef4 <__assert_fail@plt+0xd1f0>
   1ee8c:	cmp	r1, #46	; 0x2e
   1ee90:	bne	1eed8 <__assert_fail@plt+0xd1d4>
   1ee94:	mov	r1, #26
   1ee98:	b	1ef00 <__assert_fail@plt+0xd1fc>
   1ee9c:	cmp	ip, #93	; 0x5d
   1eea0:	beq	1eebc <__assert_fail@plt+0xd1b8>
   1eea4:	cmp	ip, #94	; 0x5e
   1eea8:	bne	1eedc <__assert_fail@plt+0xd1d8>
   1eeac:	mov	r1, #25
   1eeb0:	b	1eec0 <__assert_fail@plt+0xd1bc>
   1eeb4:	mov	r1, #22
   1eeb8:	b	1eec0 <__assert_fail@plt+0xd1bc>
   1eebc:	mov	r1, #21
   1eec0:	strb	r1, [r0, #4]
   1eec4:	mov	r1, #1
   1eec8:	mov	r0, r1
   1eecc:	pop	{r4, sl, fp, pc}
   1eed0:	mov	r1, #0
   1eed4:	strb	r1, [r0]
   1eed8:	strb	ip, [r0]
   1eedc:	mov	r1, #1
   1eee0:	strb	r1, [r0, #4]
   1eee4:	mov	r0, r1
   1eee8:	pop	{r4, sl, fp, pc}
   1eeec:	mov	r1, #28
   1eef0:	b	1ef00 <__assert_fail@plt+0xd1fc>
   1eef4:	tst	r2, #4
   1eef8:	beq	1eed8 <__assert_fail@plt+0xd1d4>
   1eefc:	mov	r1, #30
   1ef00:	strb	r1, [r0, #4]
   1ef04:	mov	r1, #2
   1ef08:	mov	r0, r1
   1ef0c:	pop	{r4, sl, fp, pc}
   1ef10:	asr	r2, r1, #31
   1ef14:	add	r2, r1, r2, lsr #27
   1ef18:	asr	r2, r2, #5
   1ef1c:	ldr	ip, [r0, r2, lsl #2]
   1ef20:	and	r1, r1, #31
   1ef24:	mov	r3, #1
   1ef28:	orr	r1, ip, r3, lsl r1
   1ef2c:	str	r1, [r0, r2, lsl #2]
   1ef30:	bx	lr
   1ef34:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   1ef38:	add	fp, sp, #24
   1ef3c:	sub	sp, sp, #8
   1ef40:	mov	r5, r3
   1ef44:	mov	r8, r2
   1ef48:	mov	r6, r1
   1ef4c:	mov	r9, r0
   1ef50:	ldr	r7, [r1, #40]	; 0x28
   1ef54:	mov	r0, r1
   1ef58:	mov	r1, r7
   1ef5c:	bl	1fb7c <__assert_fail@plt+0xde78>
   1ef60:	cmp	r0, #2
   1ef64:	blt	1ef9c <__assert_fail@plt+0xd298>
   1ef68:	mov	r4, r0
   1ef6c:	mov	r0, #1
   1ef70:	str	r0, [r9]
   1ef74:	mov	r0, r6
   1ef78:	mov	r1, r7
   1ef7c:	bl	1d8f0 <__assert_fail@plt+0xbbec>
   1ef80:	str	r0, [r9, #4]
   1ef84:	ldr	r0, [r6, #40]	; 0x28
   1ef88:	add	r0, r0, r4
   1ef8c:	str	r0, [r6, #40]	; 0x28
   1ef90:	mov	r0, #0
   1ef94:	sub	sp, fp, #24
   1ef98:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   1ef9c:	ldr	r0, [fp, #12]
   1efa0:	ldr	r2, [fp, #8]
   1efa4:	add	r1, r7, r5
   1efa8:	str	r1, [r6, #40]	; 0x28
   1efac:	ldrb	r1, [r8, #4]
   1efb0:	sub	r1, r1, #22
   1efb4:	cmp	r1, #8
   1efb8:	bhi	1f024 <__assert_fail@plt+0xd320>
   1efbc:	add	r3, pc, #0
   1efc0:	ldr	pc, [r3, r1, lsl #2]
   1efc4:	andeq	pc, r1, r0
   1efc8:	andeq	pc, r1, r4, lsr #32
   1efcc:	andeq	pc, r1, r4, lsr #32
   1efd0:	andeq	pc, r1, r4, lsr #32
   1efd4:	andeq	lr, r1, r8, ror #31
   1efd8:	andeq	pc, r1, r4, lsr #32
   1efdc:	andeq	lr, r1, r8, ror #31
   1efe0:	andeq	pc, r1, r4, lsr #32
   1efe4:	andeq	lr, r1, r8, ror #31
   1efe8:	mov	r0, r9
   1efec:	mov	r1, r6
   1eff0:	mov	r2, r8
   1eff4:	sub	sp, fp, #24
   1eff8:	pop	{r4, r5, r6, r7, r8, r9, fp, lr}
   1effc:	b	1fbd8 <__assert_fail@plt+0xded4>
   1f000:	cmp	r0, #0
   1f004:	bne	1f024 <__assert_fail@plt+0xd320>
   1f008:	mov	r0, sp
   1f00c:	mov	r1, r6
   1f010:	bl	1ed9c <__assert_fail@plt+0xd098>
   1f014:	ldrb	r1, [sp, #4]
   1f018:	mov	r0, #11
   1f01c:	cmp	r1, #21
   1f020:	bne	1f034 <__assert_fail@plt+0xd330>
   1f024:	mov	r0, #0
   1f028:	str	r0, [r9]
   1f02c:	ldrb	r1, [r8]
   1f030:	strb	r1, [r9, #4]
   1f034:	sub	sp, fp, #24
   1f038:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   1f03c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1f040:	add	fp, sp, #28
   1f044:	sub	sp, sp, #12
   1f048:	mov	sl, r0
   1f04c:	ldr	r7, [r3]
   1f050:	mov	r0, #11
   1f054:	cmp	r7, #2
   1f058:	cmpne	r7, #4
   1f05c:	beq	1f074 <__assert_fail@plt+0xd370>
   1f060:	ldr	r8, [fp, #8]
   1f064:	ldr	r5, [r8]
   1f068:	cmp	r5, #2
   1f06c:	cmpne	r5, #4
   1f070:	bne	1f07c <__assert_fail@plt+0xd378>
   1f074:	sub	sp, fp, #28
   1f078:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1f07c:	mov	r6, r3
   1f080:	mov	r9, r2
   1f084:	mov	r4, r1
   1f088:	cmp	r7, #3
   1f08c:	bne	1f0a0 <__assert_fail@plt+0xd39c>
   1f090:	ldr	r0, [r6, #4]
   1f094:	bl	11af4 <strlen@plt>
   1f098:	cmp	r0, #1
   1f09c:	bhi	1f1e8 <__assert_fail@plt+0xd4e4>
   1f0a0:	cmp	r5, #3
   1f0a4:	bne	1f0b8 <__assert_fail@plt+0xd3b4>
   1f0a8:	ldr	r0, [r8, #4]
   1f0ac:	bl	11af4 <strlen@plt>
   1f0b0:	cmp	r0, #1
   1f0b4:	bhi	1f1e8 <__assert_fail@plt+0xd4e4>
   1f0b8:	cmp	r7, #3
   1f0bc:	beq	1f0d0 <__assert_fail@plt+0xd3cc>
   1f0c0:	mov	r0, #0
   1f0c4:	cmp	r7, #0
   1f0c8:	ldrbeq	r0, [r6, #4]
   1f0cc:	b	1f0d8 <__assert_fail@plt+0xd3d4>
   1f0d0:	ldr	r0, [r6, #4]
   1f0d4:	ldrb	r0, [r0]
   1f0d8:	stmib	sp, {r4, r9}
   1f0dc:	cmp	r5, #3
   1f0e0:	beq	1f0f4 <__assert_fail@plt+0xd3f0>
   1f0e4:	mov	r9, #0
   1f0e8:	cmp	r5, #0
   1f0ec:	ldrbeq	r9, [r8, #4]
   1f0f0:	b	1f0fc <__assert_fail@plt+0xd3f8>
   1f0f4:	ldr	r1, [r8, #4]
   1f0f8:	ldrb	r9, [r1]
   1f0fc:	ldr	r4, [fp, #12]
   1f100:	cmp	r7, #3
   1f104:	cmpne	r7, #0
   1f108:	bne	1f11c <__assert_fail@plt+0xd418>
   1f10c:	mov	r1, r4
   1f110:	bl	1fd9c <__assert_fail@plt+0xe098>
   1f114:	mov	r7, r0
   1f118:	b	1f120 <__assert_fail@plt+0xd41c>
   1f11c:	ldr	r7, [r6, #4]
   1f120:	ldr	r0, [r8]
   1f124:	cmp	r0, #3
   1f128:	cmpne	r0, #0
   1f12c:	bne	1f144 <__assert_fail@plt+0xd440>
   1f130:	mov	r0, r9
   1f134:	mov	r1, r4
   1f138:	bl	1fd9c <__assert_fail@plt+0xe098>
   1f13c:	mov	r6, r0
   1f140:	b	1f148 <__assert_fail@plt+0xd444>
   1f144:	ldr	r6, [r8, #4]
   1f148:	ldr	r1, [sp, #8]
   1f14c:	ldr	r5, [sp, #4]
   1f150:	mov	r0, #3
   1f154:	cmn	r7, #1
   1f158:	cmnne	r6, #1
   1f15c:	beq	1f074 <__assert_fail@plt+0xd370>
   1f160:	ldr	r0, [fp, #16]
   1f164:	tst	r0, #65536	; 0x10000
   1f168:	beq	1f178 <__assert_fail@plt+0xd474>
   1f16c:	cmp	r7, r6
   1f170:	mov	r0, #11
   1f174:	bhi	1f074 <__assert_fail@plt+0xd370>
   1f178:	ldr	r0, [r4, #92]	; 0x5c
   1f17c:	cmp	r0, #2
   1f180:	blt	1f1b4 <__assert_fail@plt+0xd4b0>
   1f184:	ldr	r0, [r5, #32]
   1f188:	ldr	r1, [r1]
   1f18c:	cmp	r1, r0
   1f190:	beq	1f1f4 <__assert_fail@plt+0xd4f0>
   1f194:	ldr	r0, [r5, #4]
   1f198:	ldr	r1, [r5, #32]
   1f19c:	str	r7, [r0, r1, lsl #2]
   1f1a0:	ldr	r0, [r5, #8]
   1f1a4:	ldr	r1, [r5, #32]
   1f1a8:	add	r2, r1, #1
   1f1ac:	str	r2, [r5, #32]
   1f1b0:	str	r6, [r0, r1, lsl #2]
   1f1b4:	mov	r5, #0
   1f1b8:	cmp	r7, r5
   1f1bc:	cmpls	r5, r6
   1f1c0:	bhi	1f1d0 <__assert_fail@plt+0xd4cc>
   1f1c4:	mov	r0, sl
   1f1c8:	mov	r1, r5
   1f1cc:	bl	1ef10 <__assert_fail@plt+0xd20c>
   1f1d0:	add	r5, r5, #1
   1f1d4:	cmp	r5, #256	; 0x100
   1f1d8:	bne	1f1b8 <__assert_fail@plt+0xd4b4>
   1f1dc:	mov	r0, #0
   1f1e0:	sub	sp, fp, #28
   1f1e4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1f1e8:	mov	r0, #3
   1f1ec:	sub	sp, fp, #28
   1f1f0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1f1f4:	mov	r1, #1
   1f1f8:	orr	r8, r1, r0, lsl #1
   1f1fc:	lsl	r4, r8, #2
   1f200:	ldr	r0, [r5, #4]
   1f204:	mov	r1, r4
   1f208:	bl	1a388 <__assert_fail@plt+0x8684>
   1f20c:	mov	r9, r0
   1f210:	ldr	r0, [r5, #8]
   1f214:	mov	r1, r4
   1f218:	bl	1a388 <__assert_fail@plt+0x8684>
   1f21c:	mov	r4, r0
   1f220:	cmp	r9, #0
   1f224:	cmpne	r4, #0
   1f228:	bne	1f248 <__assert_fail@plt+0xd544>
   1f22c:	mov	r0, r9
   1f230:	bl	1a22c <__assert_fail@plt+0x8528>
   1f234:	mov	r0, r4
   1f238:	bl	1a22c <__assert_fail@plt+0x8528>
   1f23c:	mov	r0, #12
   1f240:	sub	sp, fp, #28
   1f244:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1f248:	ldr	r5, [sp, #4]
   1f24c:	str	r9, [r5, #4]
   1f250:	str	r4, [r5, #8]
   1f254:	ldr	r0, [sp, #8]
   1f258:	str	r8, [r0]
   1f25c:	b	1f194 <__assert_fail@plt+0xd490>
   1f260:	push	{r4, r5, fp, lr}
   1f264:	add	fp, sp, #8
   1f268:	mov	r5, r1
   1f26c:	mov	r4, r0
   1f270:	mov	r0, r1
   1f274:	bl	11af4 <strlen@plt>
   1f278:	cmp	r0, #1
   1f27c:	movne	r0, #3
   1f280:	popne	{r4, r5, fp, pc}
   1f284:	ldrb	r1, [r5]
   1f288:	mov	r0, r4
   1f28c:	bl	1ef10 <__assert_fail@plt+0xd20c>
   1f290:	mov	r0, #0
   1f294:	pop	{r4, r5, fp, pc}
   1f298:	push	{r4, r5, fp, lr}
   1f29c:	add	fp, sp, #8
   1f2a0:	mov	r5, r1
   1f2a4:	mov	r4, r0
   1f2a8:	mov	r0, r1
   1f2ac:	bl	11af4 <strlen@plt>
   1f2b0:	cmp	r0, #1
   1f2b4:	movne	r0, #3
   1f2b8:	popne	{r4, r5, fp, pc}
   1f2bc:	ldrb	r1, [r5]
   1f2c0:	mov	r0, r4
   1f2c4:	bl	1ef10 <__assert_fail@plt+0xd20c>
   1f2c8:	mov	r0, #0
   1f2cc:	pop	{r4, r5, fp, pc}
   1f2d0:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   1f2d4:	add	fp, sp, #24
   1f2d8:	mov	r5, r3
   1f2dc:	mov	r7, r2
   1f2e0:	mov	r4, r1
   1f2e4:	mov	r8, r0
   1f2e8:	ldr	r6, [fp, #8]
   1f2ec:	ldrb	r0, [fp, #14]
   1f2f0:	tst	r0, #64	; 0x40
   1f2f4:	beq	1f330 <__assert_fail@plt+0xd62c>
   1f2f8:	movw	r1, #44828	; 0xaf1c
   1f2fc:	movt	r1, #2
   1f300:	mov	r0, r6
   1f304:	bl	1189c <strcmp@plt>
   1f308:	cmp	r0, #0
   1f30c:	beq	1f328 <__assert_fail@plt+0xd624>
   1f310:	movw	r1, #44834	; 0xaf22
   1f314:	movt	r1, #2
   1f318:	mov	r0, r6
   1f31c:	bl	1189c <strcmp@plt>
   1f320:	cmp	r0, #0
   1f324:	bne	1f330 <__assert_fail@plt+0xd62c>
   1f328:	movw	r6, #44840	; 0xaf28
   1f32c:	movt	r6, #2
   1f330:	ldr	r0, [r7, #36]	; 0x24
   1f334:	ldr	r1, [r5]
   1f338:	cmp	r1, r0
   1f33c:	beq	1f84c <__assert_fail@plt+0xdb48>
   1f340:	mov	r0, r6
   1f344:	bl	1186c <wctype@plt>
   1f348:	ldr	r1, [r7, #12]
   1f34c:	ldr	r2, [r7, #36]	; 0x24
   1f350:	add	r3, r2, #1
   1f354:	str	r3, [r7, #36]	; 0x24
   1f358:	str	r0, [r1, r2, lsl #2]
   1f35c:	movw	r1, #44814	; 0xaf0e
   1f360:	movt	r1, #2
   1f364:	mov	r0, r6
   1f368:	bl	1189c <strcmp@plt>
   1f36c:	cmp	r0, #0
   1f370:	beq	1f4d4 <__assert_fail@plt+0xd7d0>
   1f374:	movw	r1, #44846	; 0xaf2e
   1f378:	movt	r1, #2
   1f37c:	mov	r0, r6
   1f380:	bl	1189c <strcmp@plt>
   1f384:	cmp	r0, #0
   1f388:	beq	1f524 <__assert_fail@plt+0xd820>
   1f38c:	movw	r1, #44834	; 0xaf22
   1f390:	movt	r1, #2
   1f394:	mov	r0, r6
   1f398:	bl	1189c <strcmp@plt>
   1f39c:	cmp	r0, #0
   1f3a0:	beq	1f574 <__assert_fail@plt+0xd870>
   1f3a4:	movw	r1, #44822	; 0xaf16
   1f3a8:	movt	r1, #2
   1f3ac:	mov	r0, r6
   1f3b0:	bl	1189c <strcmp@plt>
   1f3b4:	cmp	r0, #0
   1f3b8:	beq	1f5c8 <__assert_fail@plt+0xd8c4>
   1f3bc:	movw	r1, #44840	; 0xaf28
   1f3c0:	movt	r1, #2
   1f3c4:	mov	r0, r6
   1f3c8:	bl	1189c <strcmp@plt>
   1f3cc:	cmp	r0, #0
   1f3d0:	beq	1f61c <__assert_fail@plt+0xd918>
   1f3d4:	movw	r1, #44871	; 0xaf47
   1f3d8:	movt	r1, #2
   1f3dc:	mov	r0, r6
   1f3e0:	bl	1189c <strcmp@plt>
   1f3e4:	cmp	r0, #0
   1f3e8:	beq	1f670 <__assert_fail@plt+0xd96c>
   1f3ec:	movw	r1, #38939	; 0x981b
   1f3f0:	movt	r1, #2
   1f3f4:	mov	r0, r6
   1f3f8:	bl	1189c <strcmp@plt>
   1f3fc:	cmp	r0, #0
   1f400:	beq	1f6c4 <__assert_fail@plt+0xd9c0>
   1f404:	movw	r1, #44828	; 0xaf1c
   1f408:	movt	r1, #2
   1f40c:	mov	r0, r6
   1f410:	bl	1189c <strcmp@plt>
   1f414:	cmp	r0, #0
   1f418:	beq	1f714 <__assert_fail@plt+0xda10>
   1f41c:	movw	r1, #44852	; 0xaf34
   1f420:	movt	r1, #2
   1f424:	mov	r0, r6
   1f428:	bl	1189c <strcmp@plt>
   1f42c:	cmp	r0, #0
   1f430:	beq	1f764 <__assert_fail@plt+0xda60>
   1f434:	movw	r1, #44858	; 0xaf3a
   1f438:	movt	r1, #2
   1f43c:	mov	r0, r6
   1f440:	bl	1189c <strcmp@plt>
   1f444:	cmp	r0, #0
   1f448:	beq	1f7b0 <__assert_fail@plt+0xdaac>
   1f44c:	movw	r1, #44864	; 0xaf40
   1f450:	movt	r1, #2
   1f454:	mov	r0, r6
   1f458:	bl	1189c <strcmp@plt>
   1f45c:	cmp	r0, #0
   1f460:	beq	1f800 <__assert_fail@plt+0xdafc>
   1f464:	movw	r1, #44870	; 0xaf46
   1f468:	movt	r1, #2
   1f46c:	mov	r0, r6
   1f470:	bl	1189c <strcmp@plt>
   1f474:	mov	r1, r0
   1f478:	mov	r0, #4
   1f47c:	cmp	r1, #0
   1f480:	popne	{r4, r5, r6, r7, r8, r9, fp, pc}
   1f484:	bl	11ac4 <__ctype_b_loc@plt>
   1f488:	mov	r6, r0
   1f48c:	cmp	r8, #0
   1f490:	bne	1fa88 <__assert_fail@plt+0xdd84>
   1f494:	mov	r7, #0
   1f498:	mov	r5, #0
   1f49c:	ldr	r0, [r6]
   1f4a0:	add	r0, r0, r7
   1f4a4:	ldrb	r0, [r0, #1]
   1f4a8:	tst	r0, #16
   1f4ac:	beq	1f4bc <__assert_fail@plt+0xd7b8>
   1f4b0:	mov	r0, r4
   1f4b4:	mov	r1, r5
   1f4b8:	bl	1ef10 <__assert_fail@plt+0xd20c>
   1f4bc:	add	r7, r7, #2
   1f4c0:	add	r5, r5, #1
   1f4c4:	mov	r0, #0
   1f4c8:	cmp	r5, #256	; 0x100
   1f4cc:	bne	1f49c <__assert_fail@plt+0xd798>
   1f4d0:	b	1f848 <__assert_fail@plt+0xdb44>
   1f4d4:	bl	11ac4 <__ctype_b_loc@plt>
   1f4d8:	mov	r6, r0
   1f4dc:	cmp	r8, #0
   1f4e0:	bne	1f878 <__assert_fail@plt+0xdb74>
   1f4e4:	mov	r7, #0
   1f4e8:	mov	r5, #0
   1f4ec:	b	1f504 <__assert_fail@plt+0xd800>
   1f4f0:	add	r7, r7, #2
   1f4f4:	add	r5, r5, #1
   1f4f8:	cmp	r5, #256	; 0x100
   1f4fc:	moveq	r0, #0
   1f500:	popeq	{r4, r5, r6, r7, r8, r9, fp, pc}
   1f504:	ldr	r0, [r6]
   1f508:	ldrb	r0, [r0, r7]
   1f50c:	tst	r0, #8
   1f510:	beq	1f4f0 <__assert_fail@plt+0xd7ec>
   1f514:	mov	r0, r4
   1f518:	mov	r1, r5
   1f51c:	bl	1ef10 <__assert_fail@plt+0xd20c>
   1f520:	b	1f4f0 <__assert_fail@plt+0xd7ec>
   1f524:	bl	11ac4 <__ctype_b_loc@plt>
   1f528:	mov	r6, r0
   1f52c:	cmp	r8, #0
   1f530:	bne	1f8b0 <__assert_fail@plt+0xdbac>
   1f534:	mov	r7, #0
   1f538:	mov	r5, #0
   1f53c:	b	1f554 <__assert_fail@plt+0xd850>
   1f540:	add	r7, r7, #2
   1f544:	add	r5, r5, #1
   1f548:	cmp	r5, #256	; 0x100
   1f54c:	moveq	r0, #0
   1f550:	popeq	{r4, r5, r6, r7, r8, r9, fp, pc}
   1f554:	ldr	r0, [r6]
   1f558:	ldrb	r0, [r0, r7]
   1f55c:	tst	r0, #2
   1f560:	beq	1f540 <__assert_fail@plt+0xd83c>
   1f564:	mov	r0, r4
   1f568:	mov	r1, r5
   1f56c:	bl	1ef10 <__assert_fail@plt+0xd20c>
   1f570:	b	1f540 <__assert_fail@plt+0xd83c>
   1f574:	bl	11ac4 <__ctype_b_loc@plt>
   1f578:	mov	r6, r0
   1f57c:	cmp	r8, #0
   1f580:	bne	1f8e8 <__assert_fail@plt+0xdbe4>
   1f584:	mov	r7, #0
   1f588:	mov	r5, #0
   1f58c:	b	1f5a4 <__assert_fail@plt+0xd8a0>
   1f590:	add	r7, r7, #2
   1f594:	add	r5, r5, #1
   1f598:	cmp	r5, #256	; 0x100
   1f59c:	moveq	r0, #0
   1f5a0:	popeq	{r4, r5, r6, r7, r8, r9, fp, pc}
   1f5a4:	ldr	r0, [r6]
   1f5a8:	add	r0, r0, r7
   1f5ac:	ldrb	r0, [r0, #1]
   1f5b0:	tst	r0, #2
   1f5b4:	beq	1f590 <__assert_fail@plt+0xd88c>
   1f5b8:	mov	r0, r4
   1f5bc:	mov	r1, r5
   1f5c0:	bl	1ef10 <__assert_fail@plt+0xd20c>
   1f5c4:	b	1f590 <__assert_fail@plt+0xd88c>
   1f5c8:	bl	11ac4 <__ctype_b_loc@plt>
   1f5cc:	mov	r6, r0
   1f5d0:	cmp	r8, #0
   1f5d4:	bne	1f924 <__assert_fail@plt+0xdc20>
   1f5d8:	mov	r7, #0
   1f5dc:	mov	r5, #0
   1f5e0:	b	1f5f8 <__assert_fail@plt+0xd8f4>
   1f5e4:	add	r7, r7, #2
   1f5e8:	add	r5, r5, #1
   1f5ec:	cmp	r5, #256	; 0x100
   1f5f0:	moveq	r0, #0
   1f5f4:	popeq	{r4, r5, r6, r7, r8, r9, fp, pc}
   1f5f8:	ldr	r0, [r6]
   1f5fc:	add	r0, r0, r7
   1f600:	ldrb	r0, [r0, #1]
   1f604:	tst	r0, #32
   1f608:	beq	1f5e4 <__assert_fail@plt+0xd8e0>
   1f60c:	mov	r0, r4
   1f610:	mov	r1, r5
   1f614:	bl	1ef10 <__assert_fail@plt+0xd20c>
   1f618:	b	1f5e4 <__assert_fail@plt+0xd8e0>
   1f61c:	bl	11ac4 <__ctype_b_loc@plt>
   1f620:	mov	r6, r0
   1f624:	cmp	r8, #0
   1f628:	bne	1f960 <__assert_fail@plt+0xdc5c>
   1f62c:	mov	r7, #0
   1f630:	mov	r5, #0
   1f634:	b	1f64c <__assert_fail@plt+0xd948>
   1f638:	add	r7, r7, #2
   1f63c:	add	r5, r5, #1
   1f640:	cmp	r5, #256	; 0x100
   1f644:	moveq	r0, #0
   1f648:	popeq	{r4, r5, r6, r7, r8, r9, fp, pc}
   1f64c:	ldr	r0, [r6]
   1f650:	add	r0, r0, r7
   1f654:	ldrb	r0, [r0, #1]
   1f658:	tst	r0, #4
   1f65c:	beq	1f638 <__assert_fail@plt+0xd934>
   1f660:	mov	r0, r4
   1f664:	mov	r1, r5
   1f668:	bl	1ef10 <__assert_fail@plt+0xd20c>
   1f66c:	b	1f638 <__assert_fail@plt+0xd934>
   1f670:	bl	11ac4 <__ctype_b_loc@plt>
   1f674:	mov	r6, r0
   1f678:	cmp	r8, #0
   1f67c:	bne	1f99c <__assert_fail@plt+0xdc98>
   1f680:	mov	r7, #0
   1f684:	mov	r5, #0
   1f688:	b	1f6a0 <__assert_fail@plt+0xd99c>
   1f68c:	add	r7, r7, #2
   1f690:	add	r5, r5, #1
   1f694:	cmp	r5, #256	; 0x100
   1f698:	moveq	r0, #0
   1f69c:	popeq	{r4, r5, r6, r7, r8, r9, fp, pc}
   1f6a0:	ldr	r0, [r6]
   1f6a4:	add	r0, r0, r7
   1f6a8:	ldrb	r0, [r0, #1]
   1f6ac:	tst	r0, #8
   1f6b0:	beq	1f68c <__assert_fail@plt+0xd988>
   1f6b4:	mov	r0, r4
   1f6b8:	mov	r1, r5
   1f6bc:	bl	1ef10 <__assert_fail@plt+0xd20c>
   1f6c0:	b	1f68c <__assert_fail@plt+0xd988>
   1f6c4:	bl	11ac4 <__ctype_b_loc@plt>
   1f6c8:	mov	r6, r0
   1f6cc:	cmp	r8, #0
   1f6d0:	bne	1f9d8 <__assert_fail@plt+0xdcd4>
   1f6d4:	mov	r7, #0
   1f6d8:	mov	r5, #0
   1f6dc:	ldr	r0, [r6]
   1f6e0:	add	r0, r0, r7
   1f6e4:	ldrb	r0, [r0, #1]
   1f6e8:	tst	r0, #64	; 0x40
   1f6ec:	beq	1f6fc <__assert_fail@plt+0xd9f8>
   1f6f0:	mov	r0, r4
   1f6f4:	mov	r1, r5
   1f6f8:	bl	1ef10 <__assert_fail@plt+0xd20c>
   1f6fc:	add	r7, r7, #2
   1f700:	add	r5, r5, #1
   1f704:	mov	r0, #0
   1f708:	cmp	r5, #256	; 0x100
   1f70c:	bne	1f6dc <__assert_fail@plt+0xd9d8>
   1f710:	b	1f848 <__assert_fail@plt+0xdb44>
   1f714:	bl	11ac4 <__ctype_b_loc@plt>
   1f718:	mov	r6, r0
   1f71c:	cmp	r8, #0
   1f720:	bne	1fa14 <__assert_fail@plt+0xdd10>
   1f724:	mov	r7, #0
   1f728:	mov	r5, #0
   1f72c:	ldr	r0, [r6]
   1f730:	add	r0, r0, r7
   1f734:	ldrb	r0, [r0, #1]
   1f738:	tst	r0, #1
   1f73c:	beq	1f74c <__assert_fail@plt+0xda48>
   1f740:	mov	r0, r4
   1f744:	mov	r1, r5
   1f748:	bl	1ef10 <__assert_fail@plt+0xd20c>
   1f74c:	add	r7, r7, #2
   1f750:	add	r5, r5, #1
   1f754:	mov	r0, #0
   1f758:	cmp	r5, #256	; 0x100
   1f75c:	bne	1f72c <__assert_fail@plt+0xda28>
   1f760:	b	1f848 <__assert_fail@plt+0xdb44>
   1f764:	bl	11ac4 <__ctype_b_loc@plt>
   1f768:	mov	r6, r0
   1f76c:	cmp	r8, #0
   1f770:	bne	1fa50 <__assert_fail@plt+0xdd4c>
   1f774:	mov	r7, #0
   1f778:	mov	r5, #0
   1f77c:	ldr	r0, [r6]
   1f780:	ldrb	r0, [r0, r7]
   1f784:	tst	r0, #1
   1f788:	beq	1f798 <__assert_fail@plt+0xda94>
   1f78c:	mov	r0, r4
   1f790:	mov	r1, r5
   1f794:	bl	1ef10 <__assert_fail@plt+0xd20c>
   1f798:	add	r7, r7, #2
   1f79c:	add	r5, r5, #1
   1f7a0:	mov	r0, #0
   1f7a4:	cmp	r5, #256	; 0x100
   1f7a8:	bne	1f77c <__assert_fail@plt+0xda78>
   1f7ac:	b	1f848 <__assert_fail@plt+0xdb44>
   1f7b0:	bl	11ac4 <__ctype_b_loc@plt>
   1f7b4:	mov	r6, r0
   1f7b8:	cmp	r8, #0
   1f7bc:	bne	1fac4 <__assert_fail@plt+0xddc0>
   1f7c0:	mov	r7, #0
   1f7c4:	mov	r5, #0
   1f7c8:	ldr	r0, [r6]
   1f7cc:	add	r0, r0, r7
   1f7d0:	ldrsh	r0, [r0]
   1f7d4:	cmn	r0, #1
   1f7d8:	bgt	1f7e8 <__assert_fail@plt+0xdae4>
   1f7dc:	mov	r0, r4
   1f7e0:	mov	r1, r5
   1f7e4:	bl	1ef10 <__assert_fail@plt+0xd20c>
   1f7e8:	add	r7, r7, #2
   1f7ec:	add	r5, r5, #1
   1f7f0:	mov	r0, #0
   1f7f4:	cmp	r5, #256	; 0x100
   1f7f8:	bne	1f7c8 <__assert_fail@plt+0xdac4>
   1f7fc:	b	1f848 <__assert_fail@plt+0xdb44>
   1f800:	bl	11ac4 <__ctype_b_loc@plt>
   1f804:	mov	r6, r0
   1f808:	cmp	r8, #0
   1f80c:	bne	1fb00 <__assert_fail@plt+0xddfc>
   1f810:	mov	r7, #0
   1f814:	mov	r5, #0
   1f818:	ldr	r0, [r6]
   1f81c:	ldrb	r0, [r0, r7]
   1f820:	tst	r0, #4
   1f824:	beq	1f834 <__assert_fail@plt+0xdb30>
   1f828:	mov	r0, r4
   1f82c:	mov	r1, r5
   1f830:	bl	1ef10 <__assert_fail@plt+0xd20c>
   1f834:	add	r7, r7, #2
   1f838:	add	r5, r5, #1
   1f83c:	mov	r0, #0
   1f840:	cmp	r5, #256	; 0x100
   1f844:	bne	1f818 <__assert_fail@plt+0xdb14>
   1f848:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   1f84c:	mov	r1, #1
   1f850:	orr	r9, r1, r0, lsl #1
   1f854:	lsl	r1, r9, #2
   1f858:	ldr	r0, [r7, #12]
   1f85c:	bl	1a388 <__assert_fail@plt+0x8684>
   1f860:	cmp	r0, #0
   1f864:	moveq	r0, #12
   1f868:	popeq	{r4, r5, r6, r7, r8, r9, fp, pc}
   1f86c:	str	r0, [r7, #12]
   1f870:	str	r9, [r5]
   1f874:	b	1f340 <__assert_fail@plt+0xd63c>
   1f878:	mov	r5, #0
   1f87c:	ldr	r0, [r6]
   1f880:	ldrb	r0, [r0, r5]
   1f884:	tst	r0, #8
   1f888:	beq	1f898 <__assert_fail@plt+0xdb94>
   1f88c:	ldrb	r1, [r8]
   1f890:	mov	r0, r4
   1f894:	bl	1ef10 <__assert_fail@plt+0xd20c>
   1f898:	add	r8, r8, #1
   1f89c:	add	r5, r5, #2
   1f8a0:	mov	r0, #0
   1f8a4:	cmp	r5, #512	; 0x200
   1f8a8:	bne	1f87c <__assert_fail@plt+0xdb78>
   1f8ac:	b	1f848 <__assert_fail@plt+0xdb44>
   1f8b0:	mov	r5, #0
   1f8b4:	ldr	r0, [r6]
   1f8b8:	ldrb	r0, [r0, r5]
   1f8bc:	tst	r0, #2
   1f8c0:	beq	1f8d0 <__assert_fail@plt+0xdbcc>
   1f8c4:	ldrb	r1, [r8]
   1f8c8:	mov	r0, r4
   1f8cc:	bl	1ef10 <__assert_fail@plt+0xd20c>
   1f8d0:	add	r8, r8, #1
   1f8d4:	add	r5, r5, #2
   1f8d8:	mov	r0, #0
   1f8dc:	cmp	r5, #512	; 0x200
   1f8e0:	bne	1f8b4 <__assert_fail@plt+0xdbb0>
   1f8e4:	b	1f848 <__assert_fail@plt+0xdb44>
   1f8e8:	mov	r5, #0
   1f8ec:	ldr	r0, [r6]
   1f8f0:	add	r0, r0, r5
   1f8f4:	ldrb	r0, [r0, #1]
   1f8f8:	tst	r0, #2
   1f8fc:	beq	1f90c <__assert_fail@plt+0xdc08>
   1f900:	ldrb	r1, [r8]
   1f904:	mov	r0, r4
   1f908:	bl	1ef10 <__assert_fail@plt+0xd20c>
   1f90c:	add	r8, r8, #1
   1f910:	add	r5, r5, #2
   1f914:	mov	r0, #0
   1f918:	cmp	r5, #512	; 0x200
   1f91c:	bne	1f8ec <__assert_fail@plt+0xdbe8>
   1f920:	b	1f848 <__assert_fail@plt+0xdb44>
   1f924:	mov	r5, #0
   1f928:	ldr	r0, [r6]
   1f92c:	add	r0, r0, r5
   1f930:	ldrb	r0, [r0, #1]
   1f934:	tst	r0, #32
   1f938:	beq	1f948 <__assert_fail@plt+0xdc44>
   1f93c:	ldrb	r1, [r8]
   1f940:	mov	r0, r4
   1f944:	bl	1ef10 <__assert_fail@plt+0xd20c>
   1f948:	add	r8, r8, #1
   1f94c:	add	r5, r5, #2
   1f950:	mov	r0, #0
   1f954:	cmp	r5, #512	; 0x200
   1f958:	bne	1f928 <__assert_fail@plt+0xdc24>
   1f95c:	b	1f848 <__assert_fail@plt+0xdb44>
   1f960:	mov	r5, #0
   1f964:	ldr	r0, [r6]
   1f968:	add	r0, r0, r5
   1f96c:	ldrb	r0, [r0, #1]
   1f970:	tst	r0, #4
   1f974:	beq	1f984 <__assert_fail@plt+0xdc80>
   1f978:	ldrb	r1, [r8]
   1f97c:	mov	r0, r4
   1f980:	bl	1ef10 <__assert_fail@plt+0xd20c>
   1f984:	add	r8, r8, #1
   1f988:	add	r5, r5, #2
   1f98c:	mov	r0, #0
   1f990:	cmp	r5, #512	; 0x200
   1f994:	bne	1f964 <__assert_fail@plt+0xdc60>
   1f998:	b	1f848 <__assert_fail@plt+0xdb44>
   1f99c:	mov	r5, #0
   1f9a0:	ldr	r0, [r6]
   1f9a4:	add	r0, r0, r5
   1f9a8:	ldrb	r0, [r0, #1]
   1f9ac:	tst	r0, #8
   1f9b0:	beq	1f9c0 <__assert_fail@plt+0xdcbc>
   1f9b4:	ldrb	r1, [r8]
   1f9b8:	mov	r0, r4
   1f9bc:	bl	1ef10 <__assert_fail@plt+0xd20c>
   1f9c0:	add	r8, r8, #1
   1f9c4:	add	r5, r5, #2
   1f9c8:	mov	r0, #0
   1f9cc:	cmp	r5, #512	; 0x200
   1f9d0:	bne	1f9a0 <__assert_fail@plt+0xdc9c>
   1f9d4:	b	1f848 <__assert_fail@plt+0xdb44>
   1f9d8:	mov	r5, #0
   1f9dc:	ldr	r0, [r6]
   1f9e0:	add	r0, r0, r5
   1f9e4:	ldrb	r0, [r0, #1]
   1f9e8:	tst	r0, #64	; 0x40
   1f9ec:	beq	1f9fc <__assert_fail@plt+0xdcf8>
   1f9f0:	ldrb	r1, [r8]
   1f9f4:	mov	r0, r4
   1f9f8:	bl	1ef10 <__assert_fail@plt+0xd20c>
   1f9fc:	add	r8, r8, #1
   1fa00:	add	r5, r5, #2
   1fa04:	mov	r0, #0
   1fa08:	cmp	r5, #512	; 0x200
   1fa0c:	bne	1f9dc <__assert_fail@plt+0xdcd8>
   1fa10:	b	1f848 <__assert_fail@plt+0xdb44>
   1fa14:	mov	r5, #0
   1fa18:	ldr	r0, [r6]
   1fa1c:	add	r0, r0, r5
   1fa20:	ldrb	r0, [r0, #1]
   1fa24:	tst	r0, #1
   1fa28:	beq	1fa38 <__assert_fail@plt+0xdd34>
   1fa2c:	ldrb	r1, [r8]
   1fa30:	mov	r0, r4
   1fa34:	bl	1ef10 <__assert_fail@plt+0xd20c>
   1fa38:	add	r8, r8, #1
   1fa3c:	add	r5, r5, #2
   1fa40:	mov	r0, #0
   1fa44:	cmp	r5, #512	; 0x200
   1fa48:	bne	1fa18 <__assert_fail@plt+0xdd14>
   1fa4c:	b	1f848 <__assert_fail@plt+0xdb44>
   1fa50:	mov	r5, #0
   1fa54:	ldr	r0, [r6]
   1fa58:	ldrb	r0, [r0, r5]
   1fa5c:	tst	r0, #1
   1fa60:	beq	1fa70 <__assert_fail@plt+0xdd6c>
   1fa64:	ldrb	r1, [r8]
   1fa68:	mov	r0, r4
   1fa6c:	bl	1ef10 <__assert_fail@plt+0xd20c>
   1fa70:	add	r8, r8, #1
   1fa74:	add	r5, r5, #2
   1fa78:	mov	r0, #0
   1fa7c:	cmp	r5, #512	; 0x200
   1fa80:	bne	1fa54 <__assert_fail@plt+0xdd50>
   1fa84:	b	1f848 <__assert_fail@plt+0xdb44>
   1fa88:	mov	r5, #0
   1fa8c:	ldr	r0, [r6]
   1fa90:	add	r0, r0, r5
   1fa94:	ldrb	r0, [r0, #1]
   1fa98:	tst	r0, #16
   1fa9c:	beq	1faac <__assert_fail@plt+0xdda8>
   1faa0:	ldrb	r1, [r8]
   1faa4:	mov	r0, r4
   1faa8:	bl	1ef10 <__assert_fail@plt+0xd20c>
   1faac:	add	r8, r8, #1
   1fab0:	add	r5, r5, #2
   1fab4:	mov	r0, #0
   1fab8:	cmp	r5, #512	; 0x200
   1fabc:	bne	1fa8c <__assert_fail@plt+0xdd88>
   1fac0:	b	1f848 <__assert_fail@plt+0xdb44>
   1fac4:	mov	r5, #0
   1fac8:	ldr	r0, [r6]
   1facc:	add	r0, r0, r5
   1fad0:	ldrsh	r0, [r0]
   1fad4:	cmn	r0, #1
   1fad8:	bgt	1fae8 <__assert_fail@plt+0xdde4>
   1fadc:	ldrb	r1, [r8]
   1fae0:	mov	r0, r4
   1fae4:	bl	1ef10 <__assert_fail@plt+0xd20c>
   1fae8:	add	r8, r8, #1
   1faec:	add	r5, r5, #2
   1faf0:	mov	r0, #0
   1faf4:	cmp	r5, #512	; 0x200
   1faf8:	bne	1fac8 <__assert_fail@plt+0xddc4>
   1fafc:	b	1f848 <__assert_fail@plt+0xdb44>
   1fb00:	mov	r5, #0
   1fb04:	ldr	r0, [r6]
   1fb08:	ldrb	r0, [r0, r5]
   1fb0c:	tst	r0, #4
   1fb10:	beq	1fb20 <__assert_fail@plt+0xde1c>
   1fb14:	ldrb	r1, [r8]
   1fb18:	mov	r0, r4
   1fb1c:	bl	1ef10 <__assert_fail@plt+0xd20c>
   1fb20:	add	r8, r8, #1
   1fb24:	add	r5, r5, #2
   1fb28:	mov	r0, #0
   1fb2c:	cmp	r5, #512	; 0x200
   1fb30:	bne	1fb04 <__assert_fail@plt+0xde00>
   1fb34:	b	1f848 <__assert_fail@plt+0xdb44>
   1fb38:	mov	r1, #0
   1fb3c:	ldr	r2, [r0, r1, lsl #2]
   1fb40:	mvn	r2, r2
   1fb44:	str	r2, [r0, r1, lsl #2]
   1fb48:	add	r1, r1, #1
   1fb4c:	cmp	r1, #8
   1fb50:	bne	1fb3c <__assert_fail@plt+0xde38>
   1fb54:	bx	lr
   1fb58:	mov	r2, #0
   1fb5c:	ldr	ip, [r1, r2, lsl #2]
   1fb60:	ldr	r3, [r0, r2, lsl #2]
   1fb64:	and	r3, r3, ip
   1fb68:	str	r3, [r0, r2, lsl #2]
   1fb6c:	add	r2, r2, #1
   1fb70:	cmp	r2, #8
   1fb74:	bne	1fb5c <__assert_fail@plt+0xde58>
   1fb78:	bx	lr
   1fb7c:	push	{fp, lr}
   1fb80:	mov	fp, sp
   1fb84:	mov	lr, r0
   1fb88:	ldr	r3, [r0, #80]	; 0x50
   1fb8c:	mov	r0, #1
   1fb90:	cmp	r3, #1
   1fb94:	beq	1fbd4 <__assert_fail@plt+0xded0>
   1fb98:	ldr	ip, [lr, #28]
   1fb9c:	add	r3, r1, #1
   1fba0:	cmp	r3, ip
   1fba4:	bge	1fbd4 <__assert_fail@plt+0xded0>
   1fba8:	ldr	r0, [lr, #8]
   1fbac:	add	ip, r0, r1, lsl #2
   1fbb0:	mov	r0, #1
   1fbb4:	ldr	r3, [ip, r0, lsl #2]
   1fbb8:	cmn	r3, #1
   1fbbc:	popne	{fp, pc}
   1fbc0:	add	r0, r0, #1
   1fbc4:	add	r3, r1, r0
   1fbc8:	ldr	r2, [lr, #28]
   1fbcc:	cmp	r3, r2
   1fbd0:	blt	1fbb4 <__assert_fail@plt+0xdeb0>
   1fbd4:	pop	{fp, pc}
   1fbd8:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   1fbdc:	add	fp, sp, #24
   1fbe0:	mov	r7, r1
   1fbe4:	mov	r9, r0
   1fbe8:	ldr	r0, [r1, #40]	; 0x28
   1fbec:	ldr	r1, [r1, #56]	; 0x38
   1fbf0:	mov	r8, #7
   1fbf4:	cmp	r1, r0
   1fbf8:	ble	1fcc0 <__assert_fail@plt+0xdfbc>
   1fbfc:	mov	r6, r2
   1fc00:	ldrb	r5, [r2]
   1fc04:	mov	r4, #0
   1fc08:	ldrb	r0, [r6, #4]
   1fc0c:	cmp	r0, #30
   1fc10:	bne	1fc20 <__assert_fail@plt+0xdf1c>
   1fc14:	mov	r0, r7
   1fc18:	bl	1fcc8 <__assert_fail@plt+0xdfc4>
   1fc1c:	b	1fc34 <__assert_fail@plt+0xdf30>
   1fc20:	ldr	r0, [r7, #4]
   1fc24:	ldr	r1, [r7, #40]	; 0x28
   1fc28:	add	r2, r1, #1
   1fc2c:	str	r2, [r7, #40]	; 0x28
   1fc30:	ldrb	r0, [r0, r1]
   1fc34:	ldr	r1, [r7, #40]	; 0x28
   1fc38:	ldr	r2, [r7, #56]	; 0x38
   1fc3c:	cmp	r2, r1
   1fc40:	ble	1fcc0 <__assert_fail@plt+0xdfbc>
   1fc44:	cmp	r0, r5
   1fc48:	bne	1fc5c <__assert_fail@plt+0xdf58>
   1fc4c:	ldr	r2, [r7, #4]
   1fc50:	ldrb	r2, [r2, r1]
   1fc54:	cmp	r2, #93	; 0x5d
   1fc58:	beq	1fc78 <__assert_fail@plt+0xdf74>
   1fc5c:	ldr	r1, [r9, #4]
   1fc60:	strb	r0, [r1, r4]
   1fc64:	add	r0, r4, #1
   1fc68:	cmp	r4, #30
   1fc6c:	mov	r4, r0
   1fc70:	bls	1fc08 <__assert_fail@plt+0xdf04>
   1fc74:	b	1fcc0 <__assert_fail@plt+0xdfbc>
   1fc78:	add	r0, r1, #1
   1fc7c:	str	r0, [r7, #40]	; 0x28
   1fc80:	ldr	r0, [r9, #4]
   1fc84:	mov	r8, #0
   1fc88:	strb	r8, [r0, r4]
   1fc8c:	ldrb	r0, [r6, #4]
   1fc90:	cmp	r0, #30
   1fc94:	beq	1fcb0 <__assert_fail@plt+0xdfac>
   1fc98:	cmp	r0, #28
   1fc9c:	beq	1fcb8 <__assert_fail@plt+0xdfb4>
   1fca0:	cmp	r0, #26
   1fca4:	bne	1fcc0 <__assert_fail@plt+0xdfbc>
   1fca8:	mov	r0, #3
   1fcac:	b	1fcbc <__assert_fail@plt+0xdfb8>
   1fcb0:	mov	r0, #4
   1fcb4:	b	1fcbc <__assert_fail@plt+0xdfb8>
   1fcb8:	mov	r0, #2
   1fcbc:	str	r0, [r9]
   1fcc0:	mov	r0, r8
   1fcc4:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   1fcc8:	push	{r4, r5, r6, sl, fp, lr}
   1fccc:	add	fp, sp, #16
   1fcd0:	mov	r4, r0
   1fcd4:	ldrb	r0, [r0, #75]	; 0x4b
   1fcd8:	cmp	r0, #0
   1fcdc:	bne	1fcfc <__assert_fail@plt+0xdff8>
   1fce0:	ldr	r0, [r4, #4]
   1fce4:	ldr	r1, [r4, #40]	; 0x28
   1fce8:	add	r2, r1, #1
   1fcec:	str	r2, [r4, #40]	; 0x28
   1fcf0:	ldrb	r6, [r0, r1]
   1fcf4:	uxtb	r0, r6
   1fcf8:	pop	{r4, r5, r6, sl, fp, pc}
   1fcfc:	ldrb	r0, [r4, #76]	; 0x4c
   1fd00:	cmp	r0, #0
   1fd04:	beq	1fd68 <__assert_fail@plt+0xe064>
   1fd08:	ldr	r0, [r4, #28]
   1fd0c:	ldr	r5, [r4, #40]	; 0x28
   1fd10:	cmp	r5, r0
   1fd14:	beq	1fd28 <__assert_fail@plt+0xe024>
   1fd18:	ldr	r0, [r4, #8]
   1fd1c:	ldr	r0, [r0, r5, lsl #2]
   1fd20:	cmn	r0, #1
   1fd24:	beq	1fd84 <__assert_fail@plt+0xe080>
   1fd28:	ldr	r0, [r4]
   1fd2c:	ldr	r1, [r4, #12]
   1fd30:	ldr	r2, [r4, #24]
   1fd34:	ldr	r1, [r1, r5, lsl #2]
   1fd38:	add	r1, r2, r1
   1fd3c:	add	r0, r0, r1
   1fd40:	ldrsb	r6, [r0]
   1fd44:	cmn	r6, #1
   1fd48:	ble	1fd84 <__assert_fail@plt+0xe080>
   1fd4c:	mov	r0, r4
   1fd50:	mov	r1, r5
   1fd54:	bl	1fb7c <__assert_fail@plt+0xde78>
   1fd58:	add	r0, r0, r5
   1fd5c:	str	r0, [r4, #40]	; 0x28
   1fd60:	uxtb	r0, r6
   1fd64:	pop	{r4, r5, r6, sl, fp, pc}
   1fd68:	ldr	r0, [r4]
   1fd6c:	ldr	r1, [r4, #24]
   1fd70:	ldr	r2, [r4, #40]	; 0x28
   1fd74:	add	r3, r2, #1
   1fd78:	str	r3, [r4, #40]	; 0x28
   1fd7c:	add	r1, r2, r1
   1fd80:	b	1fcf0 <__assert_fail@plt+0xdfec>
   1fd84:	add	r0, r5, #1
   1fd88:	str	r0, [r4, #40]	; 0x28
   1fd8c:	ldr	r0, [r4, #4]
   1fd90:	ldrb	r6, [r0, r5]
   1fd94:	uxtb	r0, r6
   1fd98:	pop	{r4, r5, r6, sl, fp, pc}
   1fd9c:	ldr	r1, [r1, #92]	; 0x5c
   1fda0:	cmp	r1, #2
   1fda4:	bxlt	lr
   1fda8:	b	11b78 <btowc@plt>
   1fdac:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   1fdb0:	add	fp, sp, #24
   1fdb4:	mov	r4, r2
   1fdb8:	mov	r5, r1
   1fdbc:	mov	r6, r0
   1fdc0:	mvn	r0, #0
   1fdc4:	movw	r8, #32816	; 0x8030
   1fdc8:	b	1fde0 <__assert_fail@plt+0xe0dc>
   1fdcc:	add	r0, r7, r7, lsl #2
   1fdd0:	add	r1, r1, r0, lsl #1
   1fdd4:	sub	r0, r1, #48	; 0x30
   1fdd8:	cmp	r1, r8
   1fddc:	movwgt	r0, #32768	; 0x8000
   1fde0:	mov	r7, r0
   1fde4:	mov	r0, r5
   1fde8:	mov	r1, r6
   1fdec:	mov	r2, r4
   1fdf0:	bl	1ceb8 <__assert_fail@plt+0xb1b4>
   1fdf4:	ldrb	r2, [r5, #4]
   1fdf8:	cmp	r2, #24
   1fdfc:	beq	1fe4c <__assert_fail@plt+0xe148>
   1fe00:	cmp	r2, #2
   1fe04:	beq	1fe48 <__assert_fail@plt+0xe144>
   1fe08:	ldrb	r1, [r5]
   1fe0c:	cmp	r1, #44	; 0x2c
   1fe10:	beq	1fe4c <__assert_fail@plt+0xe148>
   1fe14:	mvn	r0, #1
   1fe18:	cmp	r1, #48	; 0x30
   1fe1c:	bcc	1fde0 <__assert_fail@plt+0xe0dc>
   1fe20:	cmp	r2, #1
   1fe24:	bne	1fde0 <__assert_fail@plt+0xe0dc>
   1fe28:	cmn	r7, #2
   1fe2c:	beq	1fde0 <__assert_fail@plt+0xe0dc>
   1fe30:	cmp	r1, #57	; 0x39
   1fe34:	bhi	1fde0 <__assert_fail@plt+0xe0dc>
   1fe38:	cmn	r7, #1
   1fe3c:	bne	1fdcc <__assert_fail@plt+0xe0c8>
   1fe40:	sub	r0, r1, #48	; 0x30
   1fe44:	b	1fde0 <__assert_fail@plt+0xe0dc>
   1fe48:	mvn	r7, #1
   1fe4c:	mov	r0, r7
   1fe50:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   1fe54:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   1fe58:	add	fp, sp, #24
   1fe5c:	sub	sp, sp, #8
   1fe60:	mov	r8, r1
   1fe64:	mov	r5, r0
   1fe68:	mov	r3, r0
   1fe6c:	ldr	r7, [r3], #20
   1fe70:	mov	r6, #0
   1fe74:	mov	r0, r1
   1fe78:	mov	r1, #0
   1fe7c:	mov	r2, #0
   1fe80:	bl	1e0bc <__assert_fail@plt+0xc3b8>
   1fe84:	str	r0, [sp, #4]
   1fe88:	cmp	r0, #0
   1fe8c:	beq	1ff24 <__assert_fail@plt+0xe220>
   1fe90:	add	r4, sp, #4
   1fe94:	mov	r6, #0
   1fe98:	str	r7, [r0]
   1fe9c:	ldr	r0, [r4]
   1fea0:	ldr	r1, [r0, #24]
   1fea4:	orr	r1, r1, #262144	; 0x40000
   1fea8:	str	r1, [r0, #24]
   1feac:	ldr	r0, [r5, #4]
   1feb0:	ldr	r7, [r4]
   1feb4:	cmp	r0, #0
   1feb8:	beq	1fec8 <__assert_fail@plt+0xe1c4>
   1febc:	add	r4, r7, #4
   1fec0:	mov	r5, r0
   1fec4:	b	1fefc <__assert_fail@plt+0xe1f8>
   1fec8:	mov	r1, #0
   1fecc:	mov	r0, r5
   1fed0:	ldr	r5, [r5, #8]
   1fed4:	cmp	r5, r1
   1fed8:	cmpne	r5, #0
   1fedc:	bne	1fef8 <__assert_fail@plt+0xe1f4>
   1fee0:	ldr	r7, [r7]
   1fee4:	ldr	r5, [r0]
   1fee8:	cmp	r5, #0
   1feec:	mov	r1, r0
   1fef0:	bne	1fecc <__assert_fail@plt+0xe1c8>
   1fef4:	b	1ff20 <__assert_fail@plt+0xe21c>
   1fef8:	add	r4, r7, #8
   1fefc:	add	r3, r5, #20
   1ff00:	mov	r0, r8
   1ff04:	mov	r1, #0
   1ff08:	mov	r2, #0
   1ff0c:	bl	1e0bc <__assert_fail@plt+0xc3b8>
   1ff10:	str	r0, [r4]
   1ff14:	cmp	r0, #0
   1ff18:	bne	1fe98 <__assert_fail@plt+0xe194>
   1ff1c:	b	1ff24 <__assert_fail@plt+0xe220>
   1ff20:	ldr	r6, [sp, #4]
   1ff24:	mov	r0, r6
   1ff28:	sub	sp, fp, #24
   1ff2c:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   1ff30:	ldr	r2, [r1, #24]
   1ff34:	uxtb	r3, r2
   1ff38:	cmp	r3, #17
   1ff3c:	ldreq	r3, [r1, #20]
   1ff40:	cmpeq	r3, r0
   1ff44:	orreq	r0, r2, #524288	; 0x80000
   1ff48:	streq	r0, [r1, #24]
   1ff4c:	mov	r0, #0
   1ff50:	bx	lr
   1ff54:	push	{r4, r5, r6, r7, fp, lr}
   1ff58:	add	fp, sp, #16
   1ff5c:	mov	r4, r2
   1ff60:	mov	r5, r1
   1ff64:	mov	r6, r0
   1ff68:	mov	r0, r2
   1ff6c:	mov	r1, r6
   1ff70:	blx	r5
   1ff74:	cmp	r0, #0
   1ff78:	popne	{r4, r5, r6, r7, fp, pc}
   1ff7c:	ldr	r7, [r6, #4]
   1ff80:	cmp	r7, #0
   1ff84:	bne	1ffb8 <__assert_fail@plt+0xe2b4>
   1ff88:	mov	r1, #0
   1ff8c:	b	1ffa4 <__assert_fail@plt+0xe2a0>
   1ff90:	ldr	r6, [r0]
   1ff94:	cmp	r6, #0
   1ff98:	mov	r1, r0
   1ff9c:	moveq	r0, #0
   1ffa0:	popeq	{r4, r5, r6, r7, fp, pc}
   1ffa4:	mov	r0, r6
   1ffa8:	ldr	r7, [r6, #8]
   1ffac:	cmp	r7, r1
   1ffb0:	cmpne	r7, #0
   1ffb4:	beq	1ff90 <__assert_fail@plt+0xe28c>
   1ffb8:	mov	r0, r4
   1ffbc:	mov	r1, r7
   1ffc0:	blx	r5
   1ffc4:	cmp	r0, #0
   1ffc8:	mov	r6, r7
   1ffcc:	beq	1ff7c <__assert_fail@plt+0xe278>
   1ffd0:	pop	{r4, r5, r6, r7, fp, pc}
   1ffd4:	ldrb	r2, [r1, #24]
   1ffd8:	cmp	r2, #17
   1ffdc:	beq	20010 <__assert_fail@plt+0xe30c>
   1ffe0:	cmp	r2, #4
   1ffe4:	bne	20064 <__assert_fail@plt+0xe360>
   1ffe8:	ldr	r2, [r0, #132]	; 0x84
   1ffec:	cmp	r2, #0
   1fff0:	beq	20064 <__assert_fail@plt+0xe360>
   1fff4:	ldr	r3, [r1, #20]
   1fff8:	ldr	r2, [r2, r3, lsl #2]
   1fffc:	str	r2, [r1, #20]
   20000:	ldr	r1, [r0, #80]	; 0x50
   20004:	mov	r3, #1
   20008:	orr	r1, r1, r3, lsl r2
   2000c:	b	20060 <__assert_fail@plt+0xe35c>
   20010:	ldr	r2, [r1, #4]
   20014:	cmp	r2, #0
   20018:	beq	20064 <__assert_fail@plt+0xe360>
   2001c:	ldrb	r3, [r2, #24]
   20020:	cmp	r3, #17
   20024:	bne	20064 <__assert_fail@plt+0xe360>
   20028:	ldr	r3, [r2, #4]
   2002c:	ldr	r2, [r2, #20]
   20030:	str	r3, [r1, #4]
   20034:	cmp	r3, #0
   20038:	strne	r1, [r3]
   2003c:	ldr	r1, [r1, #20]
   20040:	ldr	r3, [r0, #132]	; 0x84
   20044:	ldr	r1, [r3, r1, lsl #2]
   20048:	str	r1, [r3, r2, lsl #2]
   2004c:	cmp	r2, #31
   20050:	bgt	20064 <__assert_fail@plt+0xe360>
   20054:	ldr	r1, [r0, #80]	; 0x50
   20058:	mov	r3, #1
   2005c:	bic	r1, r1, r3, lsl r2
   20060:	str	r1, [r0, #80]	; 0x50
   20064:	mov	r0, #0
   20068:	bx	lr
   2006c:	push	{r4, r5, fp, lr}
   20070:	add	fp, sp, #8
   20074:	sub	sp, sp, #8
   20078:	mov	r4, r1
   2007c:	mov	r5, r0
   20080:	mov	r0, #0
   20084:	str	r0, [sp, #4]
   20088:	ldr	r2, [r1, #4]
   2008c:	cmp	r2, #0
   20090:	beq	200b8 <__assert_fail@plt+0xe3b4>
   20094:	ldrb	r0, [r2, #24]
   20098:	cmp	r0, #17
   2009c:	bne	200b8 <__assert_fail@plt+0xe3b4>
   200a0:	add	r0, sp, #4
   200a4:	mov	r1, r5
   200a8:	bl	2047c <__assert_fail@plt+0xe778>
   200ac:	str	r0, [r4, #4]
   200b0:	cmp	r0, #0
   200b4:	strne	r4, [r0]
   200b8:	ldr	r2, [r4, #8]
   200bc:	cmp	r2, #0
   200c0:	beq	200e8 <__assert_fail@plt+0xe3e4>
   200c4:	ldrb	r0, [r2, #24]
   200c8:	cmp	r0, #17
   200cc:	bne	200e8 <__assert_fail@plt+0xe3e4>
   200d0:	add	r0, sp, #4
   200d4:	mov	r1, r5
   200d8:	bl	2047c <__assert_fail@plt+0xe778>
   200dc:	str	r0, [r4, #8]
   200e0:	cmp	r0, #0
   200e4:	strne	r4, [r0]
   200e8:	ldr	r0, [sp, #4]
   200ec:	sub	sp, fp, #8
   200f0:	pop	{r4, r5, fp, pc}
   200f4:	push	{r4, r5, fp, lr}
   200f8:	add	fp, sp, #8
   200fc:	mov	r4, r1
   20100:	mov	r5, r0
   20104:	ldr	r2, [r1, #24]
   20108:	uxtb	r0, r2
   2010c:	cmp	r0, #16
   20110:	bne	20130 <__assert_fail@plt+0xe42c>
   20114:	ldr	r0, [r4, #4]
   20118:	ldr	r1, [r0, #12]
   2011c:	str	r1, [r4, #12]
   20120:	ldr	r0, [r0, #28]
   20124:	str	r0, [r4, #28]
   20128:	mov	r0, #0
   2012c:	pop	{r4, r5, fp, pc}
   20130:	str	r4, [r4, #12]
   20134:	ldr	r1, [r4, #20]
   20138:	mov	r0, r5
   2013c:	bl	20598 <__assert_fail@plt+0xe894>
   20140:	str	r0, [r4, #28]
   20144:	cmn	r0, #1
   20148:	moveq	r0, #12
   2014c:	popeq	{r4, r5, fp, pc}
   20150:	mov	r1, r0
   20154:	ldrb	r2, [r4, #24]
   20158:	mov	r0, #0
   2015c:	cmp	r2, #12
   20160:	popne	{r4, r5, fp, pc}
   20164:	ldr	r2, [r5]
   20168:	add	r1, r2, r1, lsl #3
   2016c:	ldr	r2, [r1, #4]
   20170:	ldr	r3, [r4, #20]
   20174:	bfi	r2, r3, #8, #10
   20178:	str	r2, [r1, #4]
   2017c:	pop	{r4, r5, fp, pc}
   20180:	ldrb	r0, [r1, #24]
   20184:	cmp	r0, #16
   20188:	beq	2019c <__assert_fail@plt+0xe498>
   2018c:	cmp	r0, #11
   20190:	bne	201b8 <__assert_fail@plt+0xe4b4>
   20194:	ldr	r0, [r1, #4]
   20198:	b	201d8 <__assert_fail@plt+0xe4d4>
   2019c:	ldmib	r1, {r0, r2}
   201a0:	ldr	r3, [r2, #12]
   201a4:	str	r3, [r0, #16]
   201a8:	ldr	r0, [r1, #16]
   201ac:	str	r0, [r2, #16]
   201b0:	mov	r0, #0
   201b4:	bx	lr
   201b8:	ldr	r0, [r1, #4]
   201bc:	cmp	r0, #0
   201c0:	ldrne	r2, [r1, #16]
   201c4:	strne	r2, [r0, #16]
   201c8:	ldr	r0, [r1, #8]
   201cc:	cmp	r0, #0
   201d0:	beq	201dc <__assert_fail@plt+0xe4d8>
   201d4:	ldr	r1, [r1, #16]
   201d8:	str	r1, [r0, #16]
   201dc:	mov	r0, #0
   201e0:	bx	lr
   201e4:	ldr	ip, [r1, #28]
   201e8:	ldrb	r2, [r1, #24]
   201ec:	sub	r2, r2, #2
   201f0:	cmp	r2, #14
   201f4:	bhi	202ac <__assert_fail@plt+0xe5a8>
   201f8:	add	r3, pc, #0
   201fc:	ldr	pc, [r3, r2, lsl #2]
   20200:	strdeq	r0, [r2], -r0	; <UNPREDICTABLE>
   20204:	andeq	r0, r2, ip, lsr #5
   20208:	andeq	r0, r2, r0, asr #5
   2020c:	andeq	r0, r2, ip, lsr #5
   20210:	andeq	r0, r2, ip, lsr #5
   20214:	andeq	r0, r2, ip, lsr #5
   20218:	andeq	r0, r2, ip, lsr r2
   2021c:	andeq	r0, r2, ip, lsr r2
   20220:	andeq	r0, r2, r4, asr r2
   20224:	andeq	r0, r2, r4, asr r2
   20228:	andeq	r0, r2, ip, lsr r2
   2022c:	andeq	r0, r2, ip, lsr #5
   20230:	andeq	r0, r2, ip, lsr #5
   20234:	andeq	r0, r2, ip, lsr #5
   20238:	strdeq	r0, [r2], -r0	; <UNPREDICTABLE>
   2023c:	ldr	r0, [r0, #20]
   20240:	add	r2, ip, ip, lsl #1
   20244:	add	r0, r0, r2, lsl #2
   20248:	ldr	r1, [r1, #16]
   2024c:	ldr	r1, [r1, #28]
   20250:	b	207e0 <__assert_fail@plt+0xeadc>
   20254:	push	{fp, lr}
   20258:	mov	fp, sp
   2025c:	ldrb	r2, [r0, #88]	; 0x58
   20260:	orr	r2, r2, #1
   20264:	strb	r2, [r0, #88]	; 0x58
   20268:	add	r3, r1, #16
   2026c:	ldr	lr, [r1, #4]
   20270:	ldr	r1, [r1, #8]
   20274:	cmp	r1, #0
   20278:	mov	r2, r3
   2027c:	addne	r2, r1, #12
   20280:	ldr	r1, [r2]
   20284:	ldr	r2, [r1, #28]
   20288:	cmp	lr, #0
   2028c:	addne	r3, lr, #12
   20290:	ldr	r1, [r3]
   20294:	ldr	r1, [r1, #28]
   20298:	ldr	r0, [r0, #20]
   2029c:	add	r3, ip, ip, lsl #1
   202a0:	add	r0, r0, r3, lsl #2
   202a4:	pop	{fp, lr}
   202a8:	b	20768 <__assert_fail@plt+0xea64>
   202ac:	ldr	r0, [r0, #12]
   202b0:	ldr	r1, [r1, #16]
   202b4:	ldr	r1, [r1, #28]
   202b8:	str	r1, [r0, ip, lsl #2]
   202bc:	b	202f0 <__assert_fail@plt+0xe5ec>
   202c0:	ldr	r3, [r0, #12]
   202c4:	ldr	r2, [r1, #16]
   202c8:	ldr	r2, [r2, #28]
   202cc:	str	r2, [r3, ip, lsl #2]
   202d0:	ldrb	r1, [r1, #24]
   202d4:	cmp	r1, #4
   202d8:	bne	202f0 <__assert_fail@plt+0xe5ec>
   202dc:	ldr	r0, [r0, #20]
   202e0:	add	r1, ip, ip, lsl #1
   202e4:	add	r0, r0, r1, lsl #2
   202e8:	mov	r1, r2
   202ec:	b	207e0 <__assert_fail@plt+0xeadc>
   202f0:	mov	r0, #0
   202f4:	bx	lr
   202f8:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   202fc:	add	fp, sp, #24
   20300:	sub	sp, sp, #16
   20304:	mov	r4, r0
   20308:	ldr	r0, [r0, #8]
   2030c:	cmp	r0, #0
   20310:	beq	203a8 <__assert_fail@plt+0xe6a4>
   20314:	mov	r7, #0
   20318:	add	r8, sp, #4
   2031c:	mov	r6, #0
   20320:	ldr	r0, [r4, #24]
   20324:	add	r5, r6, r6, lsl #1
   20328:	add	r0, r0, r5, lsl #2
   2032c:	ldr	r0, [r0, #4]
   20330:	cmp	r0, #0
   20334:	beq	20340 <__assert_fail@plt+0xe63c>
   20338:	mov	r0, r7
   2033c:	b	20380 <__assert_fail@plt+0xe67c>
   20340:	mov	r0, r8
   20344:	mov	r1, r4
   20348:	mov	r2, r6
   2034c:	mov	r3, #1
   20350:	bl	2082c <__assert_fail@plt+0xeb28>
   20354:	cmp	r0, #0
   20358:	bne	203ac <__assert_fail@plt+0xe6a8>
   2035c:	ldr	r0, [r4, #24]
   20360:	add	r0, r0, r5, lsl #2
   20364:	ldr	r0, [r0, #4]
   20368:	cmp	r0, #0
   2036c:	mov	r0, r7
   20370:	bne	20380 <__assert_fail@plt+0xe67c>
   20374:	ldr	r0, [sp, #12]
   20378:	bl	1a22c <__assert_fail@plt+0x8528>
   2037c:	mov	r0, #1
   20380:	ldr	r1, [r4, #8]
   20384:	add	r2, r6, #1
   20388:	subs	r3, r2, r1
   2038c:	mov	r6, r3
   20390:	movne	r6, r2
   20394:	movwne	r3, #1
   20398:	and	r7, r0, r3
   2039c:	tst	r0, #1
   203a0:	cmpeq	r2, r1
   203a4:	bne	20320 <__assert_fail@plt+0xe61c>
   203a8:	mov	r0, #0
   203ac:	sub	sp, fp, #24
   203b0:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   203b4:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   203b8:	add	fp, sp, #24
   203bc:	mov	r4, r0
   203c0:	ldr	r0, [r0, #8]
   203c4:	cmp	r0, #0
   203c8:	beq	20474 <__assert_fail@plt+0xe770>
   203cc:	mov	r0, #0
   203d0:	mov	r1, #0
   203d4:	mov	r2, #0
   203d8:	ldr	r3, [r4, #28]
   203dc:	str	r0, [r3, r1]!
   203e0:	str	r0, [r3, #4]
   203e4:	str	r0, [r3, #8]
   203e8:	add	r1, r1, #12
   203ec:	add	r2, r2, #1
   203f0:	ldr	r3, [r4, #8]
   203f4:	cmp	r2, r3
   203f8:	bcc	203d8 <__assert_fail@plt+0xe6d4>
   203fc:	cmp	r3, #0
   20400:	beq	20474 <__assert_fail@plt+0xe770>
   20404:	mov	r5, #0
   20408:	ldr	r0, [r4, #24]
   2040c:	add	r8, r5, r5, lsl #1
   20410:	add	r0, r0, r8, lsl #2
   20414:	ldr	r1, [r0, #4]
   20418:	cmp	r1, #1
   2041c:	blt	20464 <__assert_fail@plt+0xe760>
   20420:	ldr	r7, [r0, #8]
   20424:	mov	r6, #0
   20428:	ldr	r0, [r7, r6, lsl #2]
   2042c:	add	r0, r0, r0, lsl #1
   20430:	ldr	r1, [r4, #28]
   20434:	add	r0, r1, r0, lsl #2
   20438:	mov	r1, r5
   2043c:	bl	21098 <__assert_fail@plt+0xf394>
   20440:	cmp	r0, #0
   20444:	moveq	r0, #12
   20448:	popeq	{r4, r5, r6, r7, r8, sl, fp, pc}
   2044c:	add	r6, r6, #1
   20450:	ldr	r0, [r4, #24]
   20454:	add	r0, r0, r8, lsl #2
   20458:	ldr	r0, [r0, #4]
   2045c:	cmp	r6, r0
   20460:	blt	20428 <__assert_fail@plt+0xe724>
   20464:	add	r5, r5, #1
   20468:	ldr	r0, [r4, #8]
   2046c:	cmp	r5, r0
   20470:	bcc	20408 <__assert_fail@plt+0xe704>
   20474:	mov	r0, #0
   20478:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   2047c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   20480:	add	fp, sp, #28
   20484:	sub	sp, sp, #4
   20488:	mov	r9, r2
   2048c:	mov	r8, r0
   20490:	ldr	r5, [r2, #4]
   20494:	ldr	r6, [r1]
   20498:	cmp	r5, #0
   2049c:	ldrbne	r0, [r1, #28]
   204a0:	andsne	r0, r0, #16
   204a4:	bne	20570 <__assert_fail@plt+0xe86c>
   204a8:	mov	r0, r6
   204ac:	mov	r1, #0
   204b0:	mov	r2, #0
   204b4:	mov	r3, #8
   204b8:	bl	1d044 <__assert_fail@plt+0xb340>
   204bc:	mov	sl, r0
   204c0:	mov	r0, r6
   204c4:	mov	r1, #0
   204c8:	mov	r2, #0
   204cc:	mov	r3, #9
   204d0:	bl	1d044 <__assert_fail@plt+0xb340>
   204d4:	mov	r4, r0
   204d8:	cmp	r5, #0
   204dc:	mov	r7, r0
   204e0:	beq	204fc <__assert_fail@plt+0xe7f8>
   204e4:	mov	r0, r6
   204e8:	mov	r1, r5
   204ec:	mov	r2, r4
   204f0:	mov	r3, #16
   204f4:	bl	1d044 <__assert_fail@plt+0xb340>
   204f8:	mov	r7, r0
   204fc:	mov	r0, r6
   20500:	mov	r1, sl
   20504:	mov	r2, r7
   20508:	mov	r3, #16
   2050c:	bl	1d044 <__assert_fail@plt+0xb340>
   20510:	cmp	r4, #0
   20514:	beq	20524 <__assert_fail@plt+0xe820>
   20518:	cmp	sl, #0
   2051c:	cmpne	r7, #0
   20520:	bne	20534 <__assert_fail@plt+0xe830>
   20524:	mov	r0, #12
   20528:	str	r0, [r8]
   2052c:	mov	r5, #0
   20530:	b	2058c <__assert_fail@plt+0xe888>
   20534:	mov	r5, r0
   20538:	cmp	r0, #0
   2053c:	beq	20524 <__assert_fail@plt+0xe820>
   20540:	ldr	r0, [r9, #20]
   20544:	str	r0, [r4, #20]
   20548:	str	r0, [sl, #20]
   2054c:	ldr	r0, [r4, #24]
   20550:	ldr	r1, [r9, #24]
   20554:	lsr	r1, r1, #19
   20558:	bfi	r0, r1, #19, #1
   2055c:	str	r0, [r4, #24]
   20560:	ldr	r0, [sl, #24]
   20564:	bfi	r0, r1, #19, #1
   20568:	str	r0, [sl, #24]
   2056c:	b	2058c <__assert_fail@plt+0xe888>
   20570:	ldr	r0, [r9, #20]
   20574:	cmp	r0, #31
   20578:	bgt	2058c <__assert_fail@plt+0xe888>
   2057c:	ldr	r1, [r6, #80]	; 0x50
   20580:	mov	r2, #1
   20584:	tst	r1, r2, lsl r0
   20588:	bne	204a8 <__assert_fail@plt+0xe7a4>
   2058c:	mov	r0, r5
   20590:	sub	sp, fp, #28
   20594:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   20598:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2059c:	add	fp, sp, #28
   205a0:	sub	sp, sp, #12
   205a4:	mov	r5, r2
   205a8:	mov	r9, r1
   205ac:	mov	r4, r0
   205b0:	ldr	r7, [r0, #4]
   205b4:	ldr	r0, [r0, #8]
   205b8:	cmp	r0, r7
   205bc:	bcs	2068c <__assert_fail@plt+0xe988>
   205c0:	ldr	r0, [r4]
   205c4:	ldr	r1, [r4, #8]
   205c8:	str	r9, [r0, r1, lsl #3]!
   205cc:	str	r5, [r0, #4]
   205d0:	ldr	r0, [r4]
   205d4:	ldr	r1, [r4, #8]
   205d8:	add	r0, r0, r1, lsl #3
   205dc:	ldr	r1, [r0, #4]
   205e0:	bfc	r1, #8, #10
   205e4:	str	r1, [r0, #4]
   205e8:	uxtb	r1, r5
   205ec:	cmp	r1, #5
   205f0:	bne	20604 <__assert_fail@plt+0xe900>
   205f4:	ldr	r2, [r4, #92]	; 0x5c
   205f8:	mov	r0, #1048576	; 0x100000
   205fc:	cmp	r2, #1
   20600:	bgt	20614 <__assert_fail@plt+0xe910>
   20604:	sub	r0, r1, #6
   20608:	clz	r0, r0
   2060c:	lsr	r0, r0, #5
   20610:	lsl	r0, r0, #20
   20614:	ldr	r1, [r4]
   20618:	ldr	r2, [r4, #8]
   2061c:	add	r1, r1, r2, lsl #3
   20620:	ldr	r2, [r1, #4]
   20624:	bic	r2, r2, #1048576	; 0x100000
   20628:	orr	r0, r2, r0
   2062c:	str	r0, [r1, #4]
   20630:	ldr	r0, [r4, #8]
   20634:	ldr	r1, [r4, #12]
   20638:	mvn	r2, #0
   2063c:	str	r2, [r1, r0, lsl #2]
   20640:	ldr	r0, [r4, #8]
   20644:	ldr	r1, [r4, #20]
   20648:	add	r0, r0, r0, lsl #1
   2064c:	mov	r2, #0
   20650:	str	r2, [r1, r0, lsl #2]!
   20654:	str	r2, [r1, #4]
   20658:	str	r2, [r1, #8]
   2065c:	ldr	r0, [r4, #8]
   20660:	ldr	r1, [r4, #24]
   20664:	add	r0, r0, r0, lsl #1
   20668:	str	r2, [r1, r0, lsl #2]!
   2066c:	str	r2, [r1, #4]
   20670:	str	r2, [r1, #8]
   20674:	ldr	r6, [r4, #8]
   20678:	add	r0, r6, #1
   2067c:	str	r0, [r4, #8]
   20680:	mov	r0, r6
   20684:	sub	sp, fp, #28
   20688:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2068c:	lsl	r1, r7, #1
   20690:	mvn	r6, #0
   20694:	movw	r0, #21845	; 0x5555
   20698:	movt	r0, #5461	; 0x1555
   2069c:	cmp	r1, r0
   206a0:	bhi	20680 <__assert_fail@plt+0xe97c>
   206a4:	str	r1, [sp, #8]
   206a8:	ldr	r0, [r4]
   206ac:	lsl	r1, r7, #4
   206b0:	bl	1a388 <__assert_fail@plt+0x8684>
   206b4:	cmp	r0, #0
   206b8:	beq	20680 <__assert_fail@plt+0xe97c>
   206bc:	str	r0, [r4]
   206c0:	ldr	r0, [r4, #12]
   206c4:	lsl	r8, r7, #3
   206c8:	mov	r1, r8
   206cc:	bl	1a388 <__assert_fail@plt+0x8684>
   206d0:	str	r0, [sp, #4]
   206d4:	ldr	r0, [r4, #16]
   206d8:	mov	r1, r8
   206dc:	bl	1a388 <__assert_fail@plt+0x8684>
   206e0:	mov	r2, r0
   206e4:	ldr	r0, [r4, #20]
   206e8:	add	r1, r7, r7, lsl #1
   206ec:	mov	r7, r2
   206f0:	lsl	r8, r1, #3
   206f4:	mov	r1, r8
   206f8:	bl	1a388 <__assert_fail@plt+0x8684>
   206fc:	mov	sl, r0
   20700:	ldr	r0, [r4, #24]
   20704:	mov	r1, r8
   20708:	bl	1a388 <__assert_fail@plt+0x8684>
   2070c:	mov	r8, r0
   20710:	ldr	r0, [sp, #4]
   20714:	cmp	r0, #0
   20718:	beq	20728 <__assert_fail@plt+0xea24>
   2071c:	cmp	r7, #0
   20720:	cmpne	sl, #0
   20724:	bne	20748 <__assert_fail@plt+0xea44>
   20728:	bl	1a22c <__assert_fail@plt+0x8528>
   2072c:	mov	r0, r7
   20730:	bl	1a22c <__assert_fail@plt+0x8528>
   20734:	mov	r0, sl
   20738:	bl	1a22c <__assert_fail@plt+0x8528>
   2073c:	mov	r0, r8
   20740:	bl	1a22c <__assert_fail@plt+0x8528>
   20744:	b	20680 <__assert_fail@plt+0xe97c>
   20748:	cmp	r8, #0
   2074c:	beq	20728 <__assert_fail@plt+0xea24>
   20750:	add	r1, r4, #12
   20754:	stm	r1, {r0, r7, sl}
   20758:	str	r8, [r4, #24]
   2075c:	ldr	r0, [sp, #8]
   20760:	str	r0, [r4, #4]
   20764:	b	205c0 <__assert_fail@plt+0xe8bc>
   20768:	push	{r4, r5, r6, sl, fp, lr}
   2076c:	add	fp, sp, #16
   20770:	mov	r5, r2
   20774:	mov	r4, r1
   20778:	mov	r6, r0
   2077c:	mov	r0, #2
   20780:	str	r0, [r6]
   20784:	mov	r0, #8
   20788:	bl	1a2f8 <__assert_fail@plt+0x85f4>
   2078c:	str	r0, [r6, #8]
   20790:	cmp	r0, #0
   20794:	moveq	r0, #12
   20798:	popeq	{r4, r5, r6, sl, fp, pc}
   2079c:	cmp	r4, r5
   207a0:	bne	207bc <__assert_fail@plt+0xeab8>
   207a4:	mov	r0, #1
   207a8:	str	r0, [r6, #4]
   207ac:	ldr	r0, [r6, #8]
   207b0:	str	r4, [r0]
   207b4:	mov	r0, #0
   207b8:	pop	{r4, r5, r6, sl, fp, pc}
   207bc:	mov	r0, #2
   207c0:	str	r0, [r6, #4]
   207c4:	ldr	r0, [r6, #8]
   207c8:	cmp	r4, r5
   207cc:	stmlt	r0, {r4, r5}
   207d0:	strge	r5, [r0]
   207d4:	strge	r4, [r0, #4]
   207d8:	mov	r0, #0
   207dc:	pop	{r4, r5, r6, sl, fp, pc}
   207e0:	push	{r4, r5, fp, lr}
   207e4:	add	fp, sp, #8
   207e8:	mov	r5, r1
   207ec:	mov	r4, r0
   207f0:	mov	r0, #1
   207f4:	str	r0, [r4]
   207f8:	str	r0, [r4, #4]
   207fc:	mov	r0, #4
   20800:	bl	1a2f8 <__assert_fail@plt+0x85f4>
   20804:	str	r0, [r4, #8]
   20808:	cmp	r0, #0
   2080c:	strne	r5, [r0]
   20810:	movne	r0, #0
   20814:	popne	{r4, r5, fp, pc}
   20818:	mov	r0, #0
   2081c:	str	r0, [r4]
   20820:	str	r0, [r4, #4]
   20824:	mov	r0, #12
   20828:	pop	{r4, r5, fp, pc}
   2082c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   20830:	add	fp, sp, #28
   20834:	sub	sp, sp, #44	; 0x2c
   20838:	mov	r8, r3
   2083c:	mov	r6, r2
   20840:	mov	r5, r1
   20844:	mov	r7, r0
   20848:	ldr	r0, [r1, #20]
   2084c:	add	r4, r2, r2, lsl #1
   20850:	add	r0, r0, r4, lsl #2
   20854:	ldr	r0, [r0, #4]
   20858:	add	r1, r0, #1
   2085c:	add	r0, sp, #32
   20860:	bl	20a38 <__assert_fail@plt+0xed34>
   20864:	cmp	r0, #0
   20868:	bne	20a30 <__assert_fail@plt+0xed2c>
   2086c:	ldr	r0, [sp, #36]	; 0x24
   20870:	ldr	r1, [sp, #40]	; 0x28
   20874:	add	r2, r0, #1
   20878:	str	r2, [sp, #36]	; 0x24
   2087c:	str	r6, [r1, r0, lsl #2]
   20880:	ldr	r0, [r5, #24]
   20884:	add	r0, r0, r4, lsl #2
   20888:	mvn	r1, #0
   2088c:	str	r1, [r0, #4]
   20890:	ldr	r1, [r5]
   20894:	add	r0, r1, r6, lsl #3
   20898:	ldr	r0, [r0, #4]
   2089c:	ubfx	r0, r0, #8, #10
   208a0:	cmp	r0, #0
   208a4:	beq	208f4 <__assert_fail@plt+0xebf0>
   208a8:	ldr	r2, [r5, #20]
   208ac:	add	r2, r2, r4, lsl #2
   208b0:	ldr	r3, [r2, #4]
   208b4:	cmp	r3, #0
   208b8:	beq	208f4 <__assert_fail@plt+0xebf0>
   208bc:	ldr	r2, [r2, #8]
   208c0:	ldr	r2, [r2]
   208c4:	add	r1, r1, r2, lsl #3
   208c8:	ldrb	r1, [r1, #6]
   208cc:	tst	r1, #4
   208d0:	bne	208f4 <__assert_fail@plt+0xebf0>
   208d4:	str	r0, [sp]
   208d8:	mov	r0, r5
   208dc:	mov	r1, r6
   208e0:	mov	r2, r6
   208e4:	mov	r3, r6
   208e8:	bl	20a68 <__assert_fail@plt+0xed64>
   208ec:	cmp	r0, #0
   208f0:	bne	20a30 <__assert_fail@plt+0xed2c>
   208f4:	ldr	r0, [r5]
   208f8:	add	r0, r0, r6, lsl #3
   208fc:	ldrb	r0, [r0, #4]
   20900:	tst	r0, #8
   20904:	beq	20a04 <__assert_fail@plt+0xed00>
   20908:	ldr	r0, [r5, #20]
   2090c:	add	r1, r0, r4, lsl #2
   20910:	ldr	r1, [r1, #4]
   20914:	cmp	r1, #1
   20918:	blt	20a04 <__assert_fail@plt+0xed00>
   2091c:	str	r8, [sp, #8]
   20920:	str	r7, [sp, #12]
   20924:	mov	r8, #0
   20928:	add	r7, sp, #16
   2092c:	add	sl, sp, #32
   20930:	mov	r6, #0
   20934:	add	r0, r0, r4, lsl #2
   20938:	ldr	r0, [r0, #8]
   2093c:	ldr	r2, [r0, r6, lsl #2]
   20940:	add	r9, r2, r2, lsl #1
   20944:	ldr	r0, [r5, #24]
   20948:	add	r0, r0, r9, lsl #2
   2094c:	ldr	r1, [r0, #4]
   20950:	cmn	r1, #1
   20954:	beq	209bc <__assert_fail@plt+0xecb8>
   20958:	cmp	r1, #0
   2095c:	bne	2097c <__assert_fail@plt+0xec78>
   20960:	mov	r0, r7
   20964:	mov	r1, r5
   20968:	mov	r3, #0
   2096c:	bl	2082c <__assert_fail@plt+0xeb28>
   20970:	cmp	r0, #0
   20974:	beq	2098c <__assert_fail@plt+0xec88>
   20978:	b	20a30 <__assert_fail@plt+0xed2c>
   2097c:	vldr	d16, [r0]
   20980:	ldr	r0, [r0, #8]
   20984:	str	r0, [sp, #24]
   20988:	vstr	d16, [sp, #16]
   2098c:	mov	r0, sl
   20990:	mov	r1, r7
   20994:	bl	20cf4 <__assert_fail@plt+0xeff0>
   20998:	cmp	r0, #0
   2099c:	bne	20a30 <__assert_fail@plt+0xed2c>
   209a0:	ldr	r0, [r5, #24]
   209a4:	add	r0, r0, r9, lsl #2
   209a8:	ldr	r0, [r0, #4]
   209ac:	cmp	r0, #0
   209b0:	bne	209c0 <__assert_fail@plt+0xecbc>
   209b4:	ldr	r0, [sp, #24]
   209b8:	bl	1a22c <__assert_fail@plt+0x8528>
   209bc:	mov	r8, #1
   209c0:	ldr	r0, [r5, #20]
   209c4:	add	r1, r0, r4, lsl #2
   209c8:	ldr	r1, [r1, #4]
   209cc:	add	r6, r6, #1
   209d0:	cmp	r6, r1
   209d4:	blt	20934 <__assert_fail@plt+0xec30>
   209d8:	tst	r8, #1
   209dc:	ldr	r7, [sp, #12]
   209e0:	ldr	r0, [sp, #8]
   209e4:	beq	20a04 <__assert_fail@plt+0xed00>
   209e8:	cmp	r0, #0
   209ec:	bne	20a04 <__assert_fail@plt+0xed00>
   209f0:	ldr	r0, [r5, #24]
   209f4:	add	r0, r0, r4, lsl #2
   209f8:	mov	r1, #0
   209fc:	str	r1, [r0, #4]
   20a00:	b	20a1c <__assert_fail@plt+0xed18>
   20a04:	ldr	r0, [r5, #24]
   20a08:	vldr	d16, [sp, #32]
   20a0c:	add	r0, r0, r4, lsl #2
   20a10:	ldr	r1, [sp, #40]	; 0x28
   20a14:	str	r1, [r0, #8]
   20a18:	vstr	d16, [r0]
   20a1c:	ldr	r0, [sp, #40]	; 0x28
   20a20:	vldr	d16, [sp, #32]
   20a24:	str	r0, [r7, #8]
   20a28:	vstr	d16, [r7]
   20a2c:	mov	r0, #0
   20a30:	sub	sp, fp, #28
   20a34:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   20a38:	push	{r4, r5, fp, lr}
   20a3c:	add	fp, sp, #8
   20a40:	mov	r4, r0
   20a44:	mov	r5, #0
   20a48:	stm	r0, {r1, r5}
   20a4c:	lsl	r0, r1, #2
   20a50:	bl	1a2f8 <__assert_fail@plt+0x85f4>
   20a54:	str	r0, [r4, #8]
   20a58:	cmp	r0, #0
   20a5c:	movweq	r5, #12
   20a60:	mov	r0, r5
   20a64:	pop	{r4, r5, fp, pc}
   20a68:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   20a6c:	add	fp, sp, #28
   20a70:	sub	sp, sp, #20
   20a74:	str	r3, [sp, #8]
   20a78:	mov	r8, r2
   20a7c:	mov	sl, r1
   20a80:	mov	r5, r0
   20a84:	ldr	r0, [fp, #8]
   20a88:	str	r0, [sp, #16]
   20a8c:	ldr	r0, [r5]
   20a90:	add	r0, r0, sl, lsl #3
   20a94:	ldrb	r1, [r0, #4]!
   20a98:	cmp	r1, #4
   20a9c:	bne	20b18 <__assert_fail@plt+0xee14>
   20aa0:	ldr	r0, [r5, #12]
   20aa4:	ldr	r1, [r5, #20]
   20aa8:	ldr	r4, [r0, sl, lsl #2]
   20aac:	add	r6, r8, r8, lsl #1
   20ab0:	add	r0, r1, r6, lsl #2
   20ab4:	mov	r1, #0
   20ab8:	str	r1, [r0, #4]
   20abc:	mov	r0, r5
   20ac0:	mov	r1, r4
   20ac4:	ldr	r2, [sp, #16]
   20ac8:	bl	20e88 <__assert_fail@plt+0xf184>
   20acc:	mov	r9, #12
   20ad0:	cmn	r0, #1
   20ad4:	beq	20cd8 <__assert_fail@plt+0xefd4>
   20ad8:	mov	r7, r0
   20adc:	ldr	r0, [r5, #12]
   20ae0:	ldr	r1, [r0, sl, lsl #2]
   20ae4:	str	r1, [r0, r8, lsl #2]
   20ae8:	ldr	r0, [r5, #20]
   20aec:	add	r0, r0, r6, lsl #2
   20af0:	mov	r1, r7
   20af4:	bl	20f10 <__assert_fail@plt+0xf20c>
   20af8:	mov	r1, #0
   20afc:	cmp	r0, #0
   20b00:	mov	sl, r4
   20b04:	mov	r8, r7
   20b08:	beq	20cd8 <__assert_fail@plt+0xefd4>
   20b0c:	cmp	r1, #0
   20b10:	beq	20a8c <__assert_fail@plt+0xed88>
   20b14:	b	20cb8 <__assert_fail@plt+0xefb4>
   20b18:	ldr	r1, [r5, #20]
   20b1c:	add	r7, sl, sl, lsl #1
   20b20:	add	r3, r1, r7, lsl #2
   20b24:	ldr	r2, [r3, #4]
   20b28:	cmp	r2, #0
   20b2c:	beq	20cc8 <__assert_fail@plt+0xefc4>
   20b30:	ldr	r3, [r3, #8]
   20b34:	ldr	r9, [r3]
   20b38:	add	r4, r8, r8, lsl #1
   20b3c:	add	r6, r1, r4, lsl #2
   20b40:	mov	r1, #0
   20b44:	str	r1, [r6, #4]
   20b48:	cmp	r2, #1
   20b4c:	bne	20b88 <__assert_fail@plt+0xee84>
   20b50:	ldr	r1, [sp, #8]
   20b54:	cmp	sl, r1
   20b58:	bne	20bc0 <__assert_fail@plt+0xeebc>
   20b5c:	cmp	r8, sl
   20b60:	beq	20bc0 <__assert_fail@plt+0xeebc>
   20b64:	mov	r0, r6
   20b68:	mov	r1, r9
   20b6c:	bl	20f10 <__assert_fail@plt+0xf20c>
   20b70:	cmp	r0, #0
   20b74:	mov	r1, #1
   20b78:	movwne	r1, #2
   20b7c:	cmp	r1, #0
   20b80:	beq	20a8c <__assert_fail@plt+0xed88>
   20b84:	b	20cb8 <__assert_fail@plt+0xefb4>
   20b88:	str	r4, [sp, #12]
   20b8c:	mov	r0, r5
   20b90:	mov	r1, r9
   20b94:	ldr	r4, [sp, #16]
   20b98:	mov	r2, r4
   20b9c:	bl	21018 <__assert_fail@plt+0xf314>
   20ba0:	cmn	r0, #1
   20ba4:	beq	20c00 <__assert_fail@plt+0xeefc>
   20ba8:	mov	r1, r0
   20bac:	mov	r0, r6
   20bb0:	bl	20f10 <__assert_fail@plt+0xf20c>
   20bb4:	cmp	r0, #0
   20bb8:	bne	20c64 <__assert_fail@plt+0xef60>
   20bbc:	b	20cec <__assert_fail@plt+0xefe8>
   20bc0:	ldr	r0, [r0]
   20bc4:	ubfx	r0, r0, #8, #10
   20bc8:	ldr	r2, [sp, #16]
   20bcc:	orr	r2, r0, r2
   20bd0:	mov	r0, r5
   20bd4:	mov	r1, r9
   20bd8:	str	r2, [sp, #16]
   20bdc:	bl	20e88 <__assert_fail@plt+0xf184>
   20be0:	mov	sl, r9
   20be4:	mov	r9, #12
   20be8:	cmn	r0, #1
   20bec:	beq	20cd8 <__assert_fail@plt+0xefd4>
   20bf0:	mov	r8, r0
   20bf4:	ldr	r0, [r5, #20]
   20bf8:	add	r0, r0, r4, lsl #2
   20bfc:	b	20ca0 <__assert_fail@plt+0xef9c>
   20c00:	mov	r0, r5
   20c04:	mov	r8, r9
   20c08:	mov	r1, r9
   20c0c:	mov	r2, r4
   20c10:	bl	20e88 <__assert_fail@plt+0xf184>
   20c14:	mov	r9, #12
   20c18:	cmn	r0, #1
   20c1c:	beq	20cd8 <__assert_fail@plt+0xefd4>
   20c20:	mov	r6, r0
   20c24:	ldr	r0, [r5, #20]
   20c28:	ldr	r1, [sp, #12]
   20c2c:	add	r0, r0, r1, lsl #2
   20c30:	mov	r1, r6
   20c34:	bl	20f10 <__assert_fail@plt+0xf20c>
   20c38:	cmp	r0, #0
   20c3c:	beq	20cd8 <__assert_fail@plt+0xefd4>
   20c40:	ldr	r4, [sp, #16]
   20c44:	str	r4, [sp]
   20c48:	mov	r0, r5
   20c4c:	mov	r1, r8
   20c50:	mov	r2, r6
   20c54:	ldr	r3, [sp, #8]
   20c58:	bl	20a68 <__assert_fail@plt+0xed64>
   20c5c:	cmp	r0, #0
   20c60:	bne	20ce4 <__assert_fail@plt+0xefe0>
   20c64:	ldr	r0, [r5, #20]
   20c68:	add	r0, r0, r7, lsl #2
   20c6c:	ldr	r0, [r0, #8]
   20c70:	ldr	sl, [r0, #4]
   20c74:	mov	r0, r5
   20c78:	mov	r1, sl
   20c7c:	mov	r2, r4
   20c80:	bl	20e88 <__assert_fail@plt+0xf184>
   20c84:	mov	r9, #12
   20c88:	cmn	r0, #1
   20c8c:	beq	20cd8 <__assert_fail@plt+0xefd4>
   20c90:	mov	r8, r0
   20c94:	ldr	r0, [r5, #20]
   20c98:	ldr	r1, [sp, #12]
   20c9c:	add	r0, r0, r1, lsl #2
   20ca0:	mov	r1, r8
   20ca4:	bl	20f10 <__assert_fail@plt+0xf20c>
   20ca8:	mov	r1, #0
   20cac:	cmp	r0, #0
   20cb0:	bne	20b0c <__assert_fail@plt+0xee08>
   20cb4:	b	20cd8 <__assert_fail@plt+0xefd4>
   20cb8:	mov	r9, #12
   20cbc:	cmp	r1, #2
   20cc0:	moveq	r9, #0
   20cc4:	b	20cd8 <__assert_fail@plt+0xefd4>
   20cc8:	ldr	r0, [r5, #12]
   20ccc:	ldr	r1, [r0, sl, lsl #2]
   20cd0:	str	r1, [r0, r8, lsl #2]
   20cd4:	mov	r9, #0
   20cd8:	mov	r0, r9
   20cdc:	sub	sp, fp, #28
   20ce0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   20ce4:	mov	r9, r0
   20ce8:	b	20cd8 <__assert_fail@plt+0xefd4>
   20cec:	mov	r9, #12
   20cf0:	b	20cd8 <__assert_fail@plt+0xefd4>
   20cf4:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   20cf8:	add	fp, sp, #24
   20cfc:	mov	r8, #0
   20d00:	cmp	r1, #0
   20d04:	beq	20e60 <__assert_fail@plt+0xf15c>
   20d08:	mov	r6, r1
   20d0c:	ldr	r1, [r1, #4]
   20d10:	cmp	r1, #0
   20d14:	beq	20e60 <__assert_fail@plt+0xf15c>
   20d18:	mov	r9, r0
   20d1c:	ldr	r2, [r0]
   20d20:	ldr	r0, [r0, #4]
   20d24:	add	r3, r0, r1, lsl #1
   20d28:	cmp	r2, r3
   20d2c:	bge	20d58 <__assert_fail@plt+0xf054>
   20d30:	add	r7, r2, r1
   20d34:	lsl	r1, r7, #3
   20d38:	ldr	r0, [r9, #8]
   20d3c:	bl	1a388 <__assert_fail@plt+0x8684>
   20d40:	cmp	r0, #0
   20d44:	beq	20e7c <__assert_fail@plt+0xf178>
   20d48:	str	r0, [r9, #8]
   20d4c:	lsl	r0, r7, #1
   20d50:	str	r0, [r9]
   20d54:	ldr	r0, [r9, #4]
   20d58:	ldr	r2, [r6, #4]
   20d5c:	cmp	r0, #0
   20d60:	beq	20e68 <__assert_fail@plt+0xf164>
   20d64:	add	r7, r0, r2, lsl #1
   20d68:	sub	r1, r0, #1
   20d6c:	sub	r0, r2, #1
   20d70:	orr	r2, r0, r1
   20d74:	cmp	r2, #0
   20d78:	blt	20dc4 <__assert_fail@plt+0xf0c0>
   20d7c:	ldr	r2, [r6, #8]
   20d80:	ldr	r3, [r9, #8]
   20d84:	ldr	r4, [r2, r0, lsl #2]
   20d88:	ldr	r5, [r3, r1, lsl #2]
   20d8c:	cmp	r5, r4
   20d90:	bne	20da0 <__assert_fail@plt+0xf09c>
   20d94:	sub	r1, r1, #1
   20d98:	sub	r0, r0, #1
   20d9c:	b	20db8 <__assert_fail@plt+0xf0b4>
   20da0:	bge	20db4 <__assert_fail@plt+0xf0b0>
   20da4:	sub	r7, r7, #1
   20da8:	str	r4, [r3, r7, lsl #2]
   20dac:	sub	r0, r0, #1
   20db0:	b	20db8 <__assert_fail@plt+0xf0b4>
   20db4:	sub	r1, r1, #1
   20db8:	orr	r5, r0, r1
   20dbc:	cmn	r5, #1
   20dc0:	bgt	20d84 <__assert_fail@plt+0xf080>
   20dc4:	cmp	r0, #0
   20dc8:	blt	20de8 <__assert_fail@plt+0xf0e4>
   20dcc:	add	r2, r0, #1
   20dd0:	sub	r7, r7, r2
   20dd4:	ldr	r0, [r9, #8]
   20dd8:	add	r0, r0, r7, lsl #2
   20ddc:	ldr	r1, [r6, #8]
   20de0:	lsl	r2, r2, #2
   20de4:	bl	1192c <memcpy@plt>
   20de8:	ldr	r1, [r6, #4]
   20dec:	ldr	r0, [r9, #4]
   20df0:	add	r1, r0, r1, lsl #1
   20df4:	sub	r1, r1, #1
   20df8:	sub	r2, r1, r7
   20dfc:	adds	r2, r2, #1
   20e00:	beq	20e60 <__assert_fail@plt+0xf15c>
   20e04:	add	r3, r2, r0
   20e08:	str	r3, [r9, #4]
   20e0c:	sub	r3, r0, #1
   20e10:	ldr	r0, [r9, #8]
   20e14:	ldr	r6, [r0, r3, lsl #2]
   20e18:	ldr	r5, [r0, r1, lsl #2]
   20e1c:	cmp	r5, r6
   20e20:	ble	20e3c <__assert_fail@plt+0xf138>
   20e24:	add	r6, r2, r3
   20e28:	str	r5, [r0, r6, lsl #2]
   20e2c:	subs	r2, r2, #1
   20e30:	sub	r1, r1, #1
   20e34:	bne	20e14 <__assert_fail@plt+0xf110>
   20e38:	b	20e60 <__assert_fail@plt+0xf15c>
   20e3c:	add	r5, r2, r3
   20e40:	str	r6, [r0, r5, lsl #2]
   20e44:	sub	r6, r3, #1
   20e48:	cmp	r3, #0
   20e4c:	mov	r3, r6
   20e50:	bgt	20e14 <__assert_fail@plt+0xf110>
   20e54:	add	r1, r0, r7, lsl #2
   20e58:	lsl	r2, r2, #2
   20e5c:	bl	1192c <memcpy@plt>
   20e60:	mov	r0, r8
   20e64:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   20e68:	str	r2, [r9, #4]
   20e6c:	ldr	r0, [r9, #8]
   20e70:	ldr	r2, [r6, #4]
   20e74:	ldr	r1, [r6, #8]
   20e78:	b	20e58 <__assert_fail@plt+0xf154>
   20e7c:	mov	r8, #12
   20e80:	mov	r0, r8
   20e84:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   20e88:	push	{r4, r5, r6, sl, fp, lr}
   20e8c:	add	fp, sp, #16
   20e90:	mov	r6, r2
   20e94:	mov	r4, r1
   20e98:	mov	r5, r0
   20e9c:	ldr	r0, [r0]
   20ea0:	ldr	r1, [r0, r1, lsl #3]!
   20ea4:	ldr	r2, [r0, #4]
   20ea8:	mov	r0, r5
   20eac:	bl	20598 <__assert_fail@plt+0xe894>
   20eb0:	cmn	r0, #1
   20eb4:	ldrne	r1, [r5]
   20eb8:	addne	r1, r1, r0, lsl #3
   20ebc:	ldrne	r2, [r1, #4]
   20ec0:	bfine	r2, r6, #8, #10
   20ec4:	strne	r2, [r1, #4]
   20ec8:	ldrne	r1, [r5]
   20ecc:	addne	r2, r1, r4, lsl #3
   20ed0:	ldrne	r2, [r2, #4]
   20ed4:	movwne	r3, #65280	; 0xff00
   20ed8:	movtne	r3, #3
   20edc:	andne	r2, r2, r3
   20ee0:	addne	r1, r1, r0, lsl #3
   20ee4:	ldrne	r3, [r1, #4]
   20ee8:	orrne	r2, r2, r3
   20eec:	strne	r2, [r1, #4]
   20ef0:	ldrne	r1, [r5]
   20ef4:	addne	r1, r1, r0, lsl #3
   20ef8:	ldrne	r2, [r1, #4]
   20efc:	orrne	r2, r2, #262144	; 0x40000
   20f00:	strne	r2, [r1, #4]
   20f04:	ldrne	r1, [r5, #16]
   20f08:	strne	r4, [r1, r0, lsl #2]
   20f0c:	pop	{r4, r5, r6, sl, fp, pc}
   20f10:	push	{r4, r5, fp, lr}
   20f14:	add	fp, sp, #8
   20f18:	mov	r5, r1
   20f1c:	mov	r4, r0
   20f20:	ldr	r2, [r0]
   20f24:	cmp	r2, #0
   20f28:	beq	20f54 <__assert_fail@plt+0xf250>
   20f2c:	ldr	r1, [r4, #4]
   20f30:	cmp	r1, #0
   20f34:	bne	20f6c <__assert_fail@plt+0xf268>
   20f38:	ldr	r0, [r4, #8]
   20f3c:	str	r5, [r0]
   20f40:	ldr	r0, [r4, #4]
   20f44:	add	r0, r0, #1
   20f48:	str	r0, [r4, #4]
   20f4c:	mov	r0, #1
   20f50:	pop	{r4, r5, fp, pc}
   20f54:	mov	r0, r4
   20f58:	mov	r1, r5
   20f5c:	bl	207e0 <__assert_fail@plt+0xeadc>
   20f60:	clz	r0, r0
   20f64:	lsr	r0, r0, #5
   20f68:	pop	{r4, r5, fp, pc}
   20f6c:	cmp	r2, r1
   20f70:	bne	20f9c <__assert_fail@plt+0xf298>
   20f74:	lsl	r0, r2, #1
   20f78:	str	r0, [r4]
   20f7c:	ldr	r0, [r4, #8]
   20f80:	lsl	r1, r2, #3
   20f84:	bl	1a388 <__assert_fail@plt+0x8684>
   20f88:	cmp	r0, #0
   20f8c:	moveq	r0, #0
   20f90:	popeq	{r4, r5, fp, pc}
   20f94:	str	r0, [r4, #8]
   20f98:	ldr	r1, [r4, #4]
   20f9c:	ldr	ip, [r4, #8]
   20fa0:	ldr	r2, [ip]
   20fa4:	cmp	r2, r5
   20fa8:	ble	20fe0 <__assert_fail@plt+0xf2dc>
   20fac:	cmp	r1, #1
   20fb0:	blt	21010 <__assert_fail@plt+0xf30c>
   20fb4:	add	r2, ip, r1, lsl #2
   20fb8:	add	r1, r1, #1
   20fbc:	mov	r3, r2
   20fc0:	ldr	r0, [r3, #-4]!
   20fc4:	str	r0, [r2]
   20fc8:	sub	r1, r1, #1
   20fcc:	cmp	r1, #1
   20fd0:	mov	r2, r3
   20fd4:	bgt	20fc0 <__assert_fail@plt+0xf2bc>
   20fd8:	sub	r1, r1, #1
   20fdc:	b	21010 <__assert_fail@plt+0xf30c>
   20fe0:	add	r2, ip, r1, lsl #2
   20fe4:	ldr	r3, [r2, #-4]
   20fe8:	cmp	r3, r5
   20fec:	ble	21010 <__assert_fail@plt+0xf30c>
   20ff0:	sub	r1, r1, #2
   20ff4:	str	r3, [r2]
   20ff8:	ldr	r3, [r2, #-8]
   20ffc:	sub	r2, r2, #4
   21000:	sub	r1, r1, #1
   21004:	cmp	r3, r5
   21008:	bgt	20ff4 <__assert_fail@plt+0xf2f0>
   2100c:	add	r1, r1, #2
   21010:	str	r5, [ip, r1, lsl #2]
   21014:	b	20f40 <__assert_fail@plt+0xf23c>
   21018:	push	{r4, r5, fp, lr}
   2101c:	add	fp, sp, #8
   21020:	mov	ip, r0
   21024:	ldr	r3, [r0, #8]
   21028:	sub	lr, r3, #1
   2102c:	mvn	r0, #0
   21030:	cmp	lr, #1
   21034:	blt	2108c <__assert_fail@plt+0xf388>
   21038:	ldr	r4, [ip]
   2103c:	add	r4, r4, lr, lsl #3
   21040:	ldr	r5, [r4, #4]
   21044:	ands	r4, r5, #262144	; 0x40000
   21048:	beq	2108c <__assert_fail@plt+0xf388>
   2104c:	ldr	r4, [ip, #16]
   21050:	sub	lr, r4, #4
   21054:	ldr	r4, [lr, r3, lsl #2]
   21058:	cmp	r4, r1
   2105c:	ubfxeq	r4, r5, #8, #10
   21060:	cmpeq	r4, r2
   21064:	beq	21090 <__assert_fail@plt+0xf38c>
   21068:	sub	r4, r3, #2
   2106c:	cmp	r4, #1
   21070:	poplt	{r4, r5, fp, pc}
   21074:	ldr	r4, [ip]
   21078:	add	r4, r4, r3, lsl #3
   2107c:	ldr	r5, [r4, #-12]
   21080:	ands	r4, r5, #262144	; 0x40000
   21084:	sub	r3, r3, #1
   21088:	bne	21054 <__assert_fail@plt+0xf350>
   2108c:	pop	{r4, r5, fp, pc}
   21090:	sub	r0, r3, #1
   21094:	pop	{r4, r5, fp, pc}
   21098:	push	{r4, r5, fp, lr}
   2109c:	add	fp, sp, #8
   210a0:	mov	r4, r1
   210a4:	mov	r5, r0
   210a8:	ldr	r0, [r0]
   210ac:	ldr	r1, [r5, #4]
   210b0:	cmp	r0, r1
   210b4:	bne	210e0 <__assert_fail@plt+0xf3dc>
   210b8:	mov	r1, #2
   210bc:	add	r0, r1, r0, lsl #1
   210c0:	str	r0, [r5]
   210c4:	lsl	r1, r0, #2
   210c8:	ldr	r0, [r5, #8]
   210cc:	bl	1a388 <__assert_fail@plt+0x8684>
   210d0:	cmp	r0, #0
   210d4:	moveq	r0, #0
   210d8:	popeq	{r4, r5, fp, pc}
   210dc:	str	r0, [r5, #8]
   210e0:	ldmib	r5, {r0, r1}
   210e4:	add	r2, r0, #1
   210e8:	str	r2, [r5, #4]
   210ec:	str	r4, [r1, r0, lsl #2]
   210f0:	mov	r0, #1
   210f4:	pop	{r4, r5, fp, pc}
   210f8:	push	{r4, r5, fp, lr}
   210fc:	add	fp, sp, #8
   21100:	mov	r5, r1
   21104:	mov	r4, r0
   21108:	ldr	r0, [r1, #4]
   2110c:	str	r0, [r4, #4]
   21110:	ldr	r1, [r1, #4]
   21114:	cmp	r1, #1
   21118:	blt	2114c <__assert_fail@plt+0xf448>
   2111c:	str	r0, [r4]
   21120:	lsl	r0, r0, #2
   21124:	bl	1a2f8 <__assert_fail@plt+0x85f4>
   21128:	str	r0, [r4, #8]
   2112c:	cmp	r0, #0
   21130:	beq	21160 <__assert_fail@plt+0xf45c>
   21134:	ldr	r2, [r5, #4]
   21138:	ldr	r1, [r5, #8]
   2113c:	lsl	r2, r2, #2
   21140:	bl	1192c <memcpy@plt>
   21144:	mov	r0, #0
   21148:	pop	{r4, r5, fp, pc}
   2114c:	mov	r0, #0
   21150:	str	r0, [r4]
   21154:	str	r0, [r4, #4]
   21158:	str	r0, [r4, #8]
   2115c:	pop	{r4, r5, fp, pc}
   21160:	mov	r0, #0
   21164:	str	r0, [r4]
   21168:	str	r0, [r4, #4]
   2116c:	mov	r0, #12
   21170:	pop	{r4, r5, fp, pc}
   21174:	mov	ip, r0
   21178:	ldr	r0, [r0, #4]
   2117c:	cmp	r0, #1
   21180:	movlt	r0, #0
   21184:	bxlt	lr
   21188:	push	{r4, r5, r6, r7, fp, lr}
   2118c:	add	fp, sp, #16
   21190:	subs	r2, r0, #1
   21194:	mov	r0, #0
   21198:	mov	r3, #0
   2119c:	beq	211cc <__assert_fail@plt+0xf4c8>
   211a0:	ldr	lr, [ip, #8]
   211a4:	mov	r3, #0
   211a8:	mov	r4, #1
   211ac:	add	r5, r2, r3
   211b0:	lsr	r6, r5, #1
   211b4:	ldr	r7, [lr, r6, lsl #2]
   211b8:	cmp	r7, r1
   211bc:	movge	r2, r6
   211c0:	addlt	r3, r4, r5, lsr #1
   211c4:	cmp	r3, r2
   211c8:	bcc	211ac <__assert_fail@plt+0xf4a8>
   211cc:	ldr	r2, [ip, #8]
   211d0:	ldr	r2, [r2, r3, lsl #2]
   211d4:	cmp	r2, r1
   211d8:	addeq	r0, r3, #1
   211dc:	pop	{r4, r5, r6, r7, fp, pc}
   211e0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   211e4:	add	fp, sp, #28
   211e8:	sub	sp, sp, #12
   211ec:	mov	r6, r1
   211f0:	ldr	r1, [r2, #4]
   211f4:	cmp	r1, #0
   211f8:	beq	212c0 <__assert_fail@plt+0xf5bc>
   211fc:	mov	r5, r3
   21200:	mov	sl, r2
   21204:	str	r0, [sp, #4]
   21208:	mov	r0, r2
   2120c:	mov	r1, r3
   21210:	bl	212d4 <__assert_fail@plt+0xf5d0>
   21214:	mov	r4, r0
   21218:	ldr	r0, [r6, #32]
   2121c:	str	r6, [sp, #8]
   21220:	ldr	r1, [r6, #68]	; 0x44
   21224:	and	r1, r1, r4
   21228:	add	r1, r1, r1, lsl #1
   2122c:	mov	r6, r0
   21230:	ldr	r2, [r6, r1, lsl #2]!
   21234:	cmp	r2, #1
   21238:	blt	2128c <__assert_fail@plt+0xf588>
   2123c:	add	r0, r0, r1, lsl #2
   21240:	ldr	r8, [r0, #8]
   21244:	mov	r9, #0
   21248:	ldr	r7, [r8, r9, lsl #2]
   2124c:	ldr	r0, [r7]
   21250:	cmp	r0, r4
   21254:	bne	2127c <__assert_fail@plt+0xf578>
   21258:	ldrb	r0, [r7, #52]	; 0x34
   2125c:	and	r0, r0, #15
   21260:	cmp	r0, r5
   21264:	bne	2127c <__assert_fail@plt+0xf578>
   21268:	ldr	r0, [r7, #40]	; 0x28
   2126c:	mov	r1, sl
   21270:	bl	21300 <__assert_fail@plt+0xf5fc>
   21274:	cmp	r0, #0
   21278:	bne	212c8 <__assert_fail@plt+0xf5c4>
   2127c:	ldr	r0, [r6]
   21280:	add	r9, r9, #1
   21284:	cmp	r9, r0
   21288:	blt	21248 <__assert_fail@plt+0xf544>
   2128c:	ldr	r0, [sp, #8]
   21290:	mov	r1, sl
   21294:	mov	r2, r5
   21298:	mov	r3, r4
   2129c:	bl	21360 <__assert_fail@plt+0xf65c>
   212a0:	mov	r7, r0
   212a4:	cmp	r0, #0
   212a8:	bne	212c8 <__assert_fail@plt+0xf5c4>
   212ac:	mov	r0, #12
   212b0:	ldr	r1, [sp, #4]
   212b4:	str	r0, [r1]
   212b8:	mov	r7, #0
   212bc:	b	212c8 <__assert_fail@plt+0xf5c4>
   212c0:	mov	r7, #0
   212c4:	str	r7, [r0]
   212c8:	mov	r0, r7
   212cc:	sub	sp, fp, #28
   212d0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   212d4:	mov	r2, r0
   212d8:	ldr	r3, [r0, #4]
   212dc:	add	r0, r3, r1
   212e0:	cmp	r3, #1
   212e4:	bxlt	lr
   212e8:	ldr	r1, [r2, #8]
   212ec:	ldr	r2, [r1], #4
   212f0:	add	r0, r2, r0
   212f4:	subs	r3, r3, #1
   212f8:	bne	212ec <__assert_fail@plt+0xf5e8>
   212fc:	bx	lr
   21300:	push	{fp, lr}
   21304:	mov	fp, sp
   21308:	mov	lr, r0
   2130c:	mov	r0, #0
   21310:	cmp	lr, #0
   21314:	cmpne	r1, #0
   21318:	beq	2135c <__assert_fail@plt+0xf658>
   2131c:	ldr	ip, [lr, #4]
   21320:	ldr	r3, [r1, #4]
   21324:	cmp	ip, r3
   21328:	popne	{fp, pc}
   2132c:	sub	r3, ip, #1
   21330:	add	r2, r3, #1
   21334:	cmp	r2, #1
   21338:	movlt	r0, #1
   2133c:	poplt	{fp, pc}
   21340:	ldr	r2, [r1, #8]
   21344:	ldr	ip, [r2, r3, lsl #2]
   21348:	ldr	r2, [lr, #8]
   2134c:	ldr	r2, [r2, r3, lsl #2]
   21350:	sub	r3, r3, #1
   21354:	cmp	r2, ip
   21358:	beq	21330 <__assert_fail@plt+0xf62c>
   2135c:	pop	{fp, pc}
   21360:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   21364:	add	fp, sp, #28
   21368:	sub	sp, sp, #20
   2136c:	mov	r8, r3
   21370:	mov	r9, r2
   21374:	mov	r7, r1
   21378:	mov	r6, r0
   2137c:	mov	r0, #56	; 0x38
   21380:	mov	r1, #1
   21384:	bl	19f8c <__assert_fail@plt+0x8288>
   21388:	cmp	r0, #0
   2138c:	beq	21558 <__assert_fail@plt+0xf854>
   21390:	mov	r4, r0
   21394:	add	r5, r0, #4
   21398:	mov	r0, r5
   2139c:	mov	r1, r7
   213a0:	bl	210f8 <__assert_fail@plt+0xf3f4>
   213a4:	cmp	r0, #0
   213a8:	bne	21560 <__assert_fail@plt+0xf85c>
   213ac:	str	r8, [sp, #4]
   213b0:	str	r5, [r4, #40]	; 0x28
   213b4:	and	r0, r9, #15
   213b8:	ldrb	r1, [r4, #52]	; 0x34
   213bc:	and	r1, r1, #240	; 0xf0
   213c0:	orr	r0, r1, r0
   213c4:	strb	r0, [r4, #52]	; 0x34
   213c8:	ldr	r0, [r7, #4]
   213cc:	cmp	r0, #1
   213d0:	blt	2152c <__assert_fail@plt+0xf828>
   213d4:	mov	r3, r5
   213d8:	and	r0, r9, #4
   213dc:	str	r0, [sp]
   213e0:	and	r0, r9, #2
   213e4:	str	r0, [sp, #8]
   213e8:	and	r0, r9, #1
   213ec:	str	r0, [sp, #16]
   213f0:	mov	r8, #0
   213f4:	movw	r0, #65280	; 0xff00
   213f8:	movt	r0, #3
   213fc:	add	sl, r0, #255	; 0xff
   21400:	mov	r9, #0
   21404:	str	r5, [sp, #12]
   21408:	ldr	r0, [r7, #8]
   2140c:	ldr	r0, [r0, r8, lsl #2]
   21410:	ldr	r1, [r6]
   21414:	add	r0, r1, r0, lsl #3
   21418:	ldr	r5, [r0, #4]
   2141c:	and	r0, r5, sl
   21420:	cmp	r0, #1
   21424:	beq	2151c <__assert_fail@plt+0xf818>
   21428:	movw	r0, #65280	; 0xff00
   2142c:	movt	r0, #3
   21430:	and	r0, r5, r0
   21434:	mov	r1, #32
   21438:	and	r1, r1, r5, lsr #15
   2143c:	ldrb	r2, [r4, #52]	; 0x34
   21440:	orr	r1, r2, r1
   21444:	strb	r1, [r4, #52]	; 0x34
   21448:	uxtb	r2, r5
   2144c:	cmp	r2, #2
   21450:	beq	21464 <__assert_fail@plt+0xf760>
   21454:	cmp	r2, #4
   21458:	bne	21470 <__assert_fail@plt+0xf76c>
   2145c:	mov	r2, #64	; 0x40
   21460:	b	21468 <__assert_fail@plt+0xf764>
   21464:	mov	r2, #16
   21468:	orr	r1, r1, r2
   2146c:	strb	r1, [r4, #52]	; 0x34
   21470:	cmp	r0, #0
   21474:	beq	2151c <__assert_fail@plt+0xf818>
   21478:	ldr	r0, [r4, #40]	; 0x28
   2147c:	cmp	r0, r3
   21480:	bne	214bc <__assert_fail@plt+0xf7b8>
   21484:	mov	r0, #12
   21488:	bl	1a2f8 <__assert_fail@plt+0x85f4>
   2148c:	cmp	r0, #0
   21490:	beq	21550 <__assert_fail@plt+0xf84c>
   21494:	str	r0, [r4, #40]	; 0x28
   21498:	mov	r1, r7
   2149c:	bl	210f8 <__assert_fail@plt+0xf3f4>
   214a0:	cmp	r0, #0
   214a4:	bne	21550 <__assert_fail@plt+0xf84c>
   214a8:	ldrb	r0, [r4, #52]	; 0x34
   214ac:	orr	r0, r0, #128	; 0x80
   214b0:	strb	r0, [r4, #52]	; 0x34
   214b4:	mov	r9, #0
   214b8:	ldr	r3, [sp, #12]
   214bc:	ldr	r0, [sp, #16]
   214c0:	cmp	r0, #0
   214c4:	bne	214d0 <__assert_fail@plt+0xf7cc>
   214c8:	ands	r0, r5, #256	; 0x100
   214cc:	bne	21508 <__assert_fail@plt+0xf804>
   214d0:	ldr	r0, [sp, #16]
   214d4:	cmp	r0, #0
   214d8:	andsne	r0, r5, #512	; 0x200
   214dc:	bne	21508 <__assert_fail@plt+0xf804>
   214e0:	ldr	r0, [sp, #8]
   214e4:	cmp	r0, #0
   214e8:	bne	214f4 <__assert_fail@plt+0xf7f0>
   214ec:	ands	r0, r5, #4096	; 0x1000
   214f0:	bne	21508 <__assert_fail@plt+0xf804>
   214f4:	ldr	r0, [sp]
   214f8:	cmp	r0, #0
   214fc:	bne	2151c <__assert_fail@plt+0xf818>
   21500:	ands	r0, r5, #16384	; 0x4000
   21504:	beq	2151c <__assert_fail@plt+0xf818>
   21508:	sub	r1, r8, r9
   2150c:	mov	r0, r3
   21510:	bl	2156c <__assert_fail@plt+0xf868>
   21514:	ldr	r3, [sp, #12]
   21518:	add	r9, r9, #1
   2151c:	ldr	r0, [r7, #4]
   21520:	add	r8, r8, #1
   21524:	cmp	r8, r0
   21528:	blt	21408 <__assert_fail@plt+0xf704>
   2152c:	mov	r0, r6
   21530:	mov	r1, r4
   21534:	ldr	r2, [sp, #4]
   21538:	bl	215b4 <__assert_fail@plt+0xf8b0>
   2153c:	cmp	r0, #0
   21540:	bne	21550 <__assert_fail@plt+0xf84c>
   21544:	mov	r0, r4
   21548:	sub	sp, fp, #28
   2154c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   21550:	mov	r0, r4
   21554:	bl	1bb10 <__assert_fail@plt+0x9e0c>
   21558:	mov	r4, #0
   2155c:	b	21544 <__assert_fail@plt+0xf840>
   21560:	mov	r0, r4
   21564:	bl	1a22c <__assert_fail@plt+0x8528>
   21568:	b	21558 <__assert_fail@plt+0xf854>
   2156c:	cmp	r1, #0
   21570:	ldrge	r2, [r0, #4]
   21574:	cmpge	r2, r1
   21578:	bgt	21580 <__assert_fail@plt+0xf87c>
   2157c:	bx	lr
   21580:	sub	r2, r2, #1
   21584:	str	r2, [r0, #4]
   21588:	cmp	r2, r1
   2158c:	bxle	lr
   21590:	ldr	r2, [r0, #8]
   21594:	add	r3, r2, r1, lsl #2
   21598:	ldr	r3, [r3, #4]
   2159c:	str	r3, [r2, r1, lsl #2]
   215a0:	add	r1, r1, #1
   215a4:	ldr	r3, [r0, #4]
   215a8:	cmp	r1, r3
   215ac:	blt	21594 <__assert_fail@plt+0xf890>
   215b0:	b	2157c <__assert_fail@plt+0xf878>
   215b4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   215b8:	add	fp, sp, #28
   215bc:	sub	sp, sp, #4
   215c0:	mov	r9, r2
   215c4:	mov	r4, r1
   215c8:	mov	r7, r0
   215cc:	str	r2, [r1]
   215d0:	ldr	r1, [r1, #8]
   215d4:	add	r5, r4, #16
   215d8:	mov	r0, r5
   215dc:	bl	20a38 <__assert_fail@plt+0xed34>
   215e0:	mov	r8, #12
   215e4:	cmp	r0, #0
   215e8:	bne	2167c <__assert_fail@plt+0xf978>
   215ec:	ldr	r0, [r4, #8]
   215f0:	cmp	r0, #1
   215f4:	blt	21638 <__assert_fail@plt+0xf934>
   215f8:	mov	r6, #0
   215fc:	ldr	r0, [r4, #12]
   21600:	ldr	r1, [r0, r6, lsl #2]
   21604:	ldr	r0, [r7]
   21608:	add	r0, r0, r1, lsl #3
   2160c:	ldrb	r0, [r0, #4]
   21610:	tst	r0, #8
   21614:	bne	21628 <__assert_fail@plt+0xf924>
   21618:	mov	r0, r5
   2161c:	bl	21098 <__assert_fail@plt+0xf394>
   21620:	cmp	r0, #0
   21624:	beq	2167c <__assert_fail@plt+0xf978>
   21628:	ldr	r0, [r4, #8]
   2162c:	add	r6, r6, #1
   21630:	cmp	r6, r0
   21634:	blt	215fc <__assert_fail@plt+0xf8f8>
   21638:	ldr	sl, [r7, #32]
   2163c:	ldr	r0, [r7, #68]	; 0x44
   21640:	and	r0, r0, r9
   21644:	add	r7, r0, r0, lsl #1
   21648:	mov	r6, sl
   2164c:	ldr	r1, [r6, r7, lsl #2]!
   21650:	mov	r5, r6
   21654:	ldr	r0, [r5, #4]!
   21658:	cmp	r0, r1
   2165c:	ble	21688 <__assert_fail@plt+0xf984>
   21660:	add	r0, sl, r7, lsl #2
   21664:	ldr	r0, [r0, #8]
   21668:	ldr	r1, [r6]
   2166c:	add	r2, r1, #1
   21670:	str	r2, [r6]
   21674:	str	r4, [r0, r1, lsl #2]
   21678:	mov	r8, #0
   2167c:	mov	r0, r8
   21680:	sub	sp, fp, #28
   21684:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   21688:	add	r9, sl, r7, lsl #2
   2168c:	ldr	r0, [r9, #8]!
   21690:	mov	r2, #2
   21694:	add	r1, r2, r1, lsl #1
   21698:	str	r1, [sp]
   2169c:	lsl	r1, r1, #2
   216a0:	bl	1a388 <__assert_fail@plt+0x8684>
   216a4:	cmp	r0, #0
   216a8:	beq	2167c <__assert_fail@plt+0xf978>
   216ac:	str	r0, [r9]
   216b0:	ldr	r0, [sp]
   216b4:	str	r0, [r5]
   216b8:	b	21660 <__assert_fail@plt+0xf95c>
   216bc:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   216c0:	add	fp, sp, #28
   216c4:	sub	sp, sp, #4
   216c8:	mov	r5, r2
   216cc:	mov	sl, r1
   216d0:	mov	r4, r0
   216d4:	add	r8, r2, #1
   216d8:	cmp	r3, #1
   216dc:	beq	21730 <__assert_fail@plt+0xfa2c>
   216e0:	mov	r6, #2
   216e4:	cmp	r3, #0
   216e8:	bne	21740 <__assert_fail@plt+0xfa3c>
   216ec:	lsl	r6, r8, #2
   216f0:	mov	r0, r6
   216f4:	bl	1a2f8 <__assert_fail@plt+0x85f4>
   216f8:	str	r0, [r4, #4]
   216fc:	mov	r7, #0
   21700:	cmp	r0, #0
   21704:	beq	217f4 <__assert_fail@plt+0xfaf0>
   21708:	mov	r0, r6
   2170c:	bl	1a2f8 <__assert_fail@plt+0x85f4>
   21710:	str	r0, [r4, #8]
   21714:	cmp	r0, #0
   21718:	beq	21800 <__assert_fail@plt+0xfafc>
   2171c:	str	r8, [r4]
   21720:	mov	r6, #1
   21724:	cmp	r5, #1
   21728:	bge	21748 <__assert_fail@plt+0xfa44>
   2172c:	b	217c0 <__assert_fail@plt+0xfabc>
   21730:	ldr	r0, [r4]
   21734:	mov	r6, #1
   21738:	cmp	r8, r0
   2173c:	bhi	21774 <__assert_fail@plt+0xfa70>
   21740:	cmp	r5, #1
   21744:	blt	217c0 <__assert_fail@plt+0xfabc>
   21748:	add	r0, sl, #4
   2174c:	ldmib	r4, {r1, r2}
   21750:	mov	r3, r5
   21754:	ldr	r7, [r0, #-4]
   21758:	str	r7, [r1], #4
   2175c:	ldr	r7, [r0]
   21760:	str	r7, [r2], #4
   21764:	add	r0, r0, #8
   21768:	subs	r3, r3, #1
   2176c:	bne	21754 <__assert_fail@plt+0xfa50>
   21770:	b	217c4 <__assert_fail@plt+0xfac0>
   21774:	ldr	r0, [r4, #4]
   21778:	lsl	r9, r8, #2
   2177c:	mov	r1, r9
   21780:	bl	1a388 <__assert_fail@plt+0x8684>
   21784:	mov	r7, #0
   21788:	str	r0, [sp]
   2178c:	cmp	r0, #0
   21790:	beq	217f4 <__assert_fail@plt+0xfaf0>
   21794:	ldr	r0, [r4, #8]
   21798:	mov	r1, r9
   2179c:	bl	1a388 <__assert_fail@plt+0x8684>
   217a0:	cmp	r0, #0
   217a4:	beq	2180c <__assert_fail@plt+0xfb08>
   217a8:	str	r8, [r4]
   217ac:	ldr	r1, [sp]
   217b0:	str	r1, [r4, #4]
   217b4:	str	r0, [r4, #8]
   217b8:	cmp	r5, #1
   217bc:	bge	21748 <__assert_fail@plt+0xfa44>
   217c0:	mov	r5, #0
   217c4:	ldr	r0, [r4]
   217c8:	cmp	r5, r0
   217cc:	bcs	217f0 <__assert_fail@plt+0xfaec>
   217d0:	ldmib	r4, {r0, r1}
   217d4:	mvn	r2, #0
   217d8:	str	r2, [r1, r5, lsl #2]
   217dc:	str	r2, [r0, r5, lsl #2]
   217e0:	add	r5, r5, #1
   217e4:	ldr	r3, [r4]
   217e8:	cmp	r5, r3
   217ec:	bcc	217d8 <__assert_fail@plt+0xfad4>
   217f0:	mov	r7, r6
   217f4:	mov	r0, r7
   217f8:	sub	sp, fp, #28
   217fc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   21800:	ldr	r0, [r4, #4]
   21804:	bl	1a22c <__assert_fail@plt+0x8528>
   21808:	b	217f4 <__assert_fail@plt+0xfaf0>
   2180c:	ldr	r0, [sp]
   21810:	b	21804 <__assert_fail@plt+0xfb00>
   21814:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   21818:	add	fp, sp, #24
   2181c:	sub	sp, sp, #8
   21820:	mov	r7, r3
   21824:	mov	r4, r2
   21828:	mov	r8, r1
   2182c:	mov	r5, r0
   21830:	ldr	r9, [fp, #16]
   21834:	ldr	r6, [r9, #92]	; 0x5c
   21838:	str	r9, [sp, #4]
   2183c:	ldr	r0, [fp, #12]
   21840:	str	r0, [sp]
   21844:	ldr	r3, [fp, #8]
   21848:	mov	r0, r1
   2184c:	mov	r1, r2
   21850:	mov	r2, r5
   21854:	bl	1c598 <__assert_fail@plt+0xa894>
   21858:	cmp	r6, r7
   2185c:	movgt	r7, r6
   21860:	add	r1, r4, #1
   21864:	cmp	r1, r7
   21868:	movge	r1, r7
   2186c:	mov	r0, r5
   21870:	bl	1c5f0 <__assert_fail@plt+0xa8ec>
   21874:	cmp	r0, #0
   21878:	bne	218bc <__assert_fail@plt+0xfbb8>
   2187c:	add	r1, r9, #96	; 0x60
   21880:	str	r1, [r5, #68]	; 0x44
   21884:	ldrb	r1, [r9, #88]	; 0x58
   21888:	ubfx	r1, r1, #4, #1
   2188c:	strb	r1, [r5, #78]	; 0x4e
   21890:	ldrb	r1, [r5, #75]	; 0x4b
   21894:	cmp	r1, #0
   21898:	beq	218a4 <__assert_fail@plt+0xfba0>
   2189c:	mov	r4, #0
   218a0:	b	218b4 <__assert_fail@plt+0xfbb0>
   218a4:	str	r8, [r5, #4]
   218a8:	ldr	r1, [r9, #92]	; 0x5c
   218ac:	cmp	r1, #1
   218b0:	movwgt	r4, #0
   218b4:	str	r4, [r5, #28]
   218b8:	str	r4, [r5, #32]
   218bc:	sub	sp, fp, #24
   218c0:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   218c4:	push	{r4, r5, r6, sl, fp, lr}
   218c8:	add	fp, sp, #16
   218cc:	mov	r4, r2
   218d0:	mov	r5, r0
   218d4:	mvn	r0, #0
   218d8:	str	r1, [r5, #88]	; 0x58
   218dc:	str	r0, [r5, #92]	; 0x5c
   218e0:	cmp	r2, #1
   218e4:	blt	21930 <__assert_fail@plt+0xfc2c>
   218e8:	mov	r6, #12
   218ec:	movw	r0, #43690	; 0xaaaa
   218f0:	movt	r0, #2730	; 0xaaa
   218f4:	cmp	r4, r0
   218f8:	bhi	21928 <__assert_fail@plt+0xfc24>
   218fc:	add	r0, r4, r4, lsl #1
   21900:	lsl	r0, r0, #3
   21904:	bl	1a2f8 <__assert_fail@plt+0x85f4>
   21908:	str	r0, [r5, #116]	; 0x74
   2190c:	lsl	r0, r4, #2
   21910:	bl	1a2f8 <__assert_fail@plt+0x85f4>
   21914:	str	r0, [r5, #132]	; 0x84
   21918:	cmp	r0, #0
   2191c:	ldrne	r0, [r5, #116]	; 0x74
   21920:	cmpne	r0, #0
   21924:	bne	21930 <__assert_fail@plt+0xfc2c>
   21928:	mov	r0, r6
   2192c:	pop	{r4, r5, r6, sl, fp, pc}
   21930:	mov	r0, #1
   21934:	str	r0, [r5, #120]	; 0x78
   21938:	str	r4, [r5, #112]	; 0x70
   2193c:	str	r4, [r5, #128]	; 0x80
   21940:	mov	r6, #0
   21944:	mov	r0, r6
   21948:	pop	{r4, r5, r6, sl, fp, pc}
   2194c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   21950:	add	fp, sp, #28
   21954:	sub	sp, sp, #28
   21958:	mov	r6, r2
   2195c:	mov	r7, r1
   21960:	mov	r4, r0
   21964:	ldr	r0, [r0, #24]
   21968:	cmp	r0, r1
   2196c:	ble	21ad8 <__assert_fail@plt+0xfdd4>
   21970:	ldr	r0, [r4, #80]	; 0x50
   21974:	cmp	r0, #2
   21978:	movge	r0, #0
   2197c:	strge	r0, [r4, #16]
   21980:	strge	r0, [r4, #20]
   21984:	mov	r0, #0
   21988:	str	r0, [r4, #24]
   2198c:	str	r0, [r4, #28]
   21990:	str	r0, [r4, #32]
   21994:	strb	r0, [r4, #76]	; 0x4c
   21998:	mov	r0, #4
   2199c:	tst	r6, #1
   219a0:	movweq	r0, #6
   219a4:	ldr	r1, [r4, #44]	; 0x2c
   219a8:	ldr	r2, [r4, #52]	; 0x34
   219ac:	str	r1, [r4, #48]	; 0x30
   219b0:	str	r2, [r4, #56]	; 0x38
   219b4:	str	r0, [r4, #60]	; 0x3c
   219b8:	ldrb	r0, [r4, #75]	; 0x4b
   219bc:	cmp	r0, #0
   219c0:	mov	r5, r7
   219c4:	ldreq	r0, [r4]
   219c8:	streq	r0, [r4, #4]
   219cc:	moveq	r5, r7
   219d0:	cmp	r5, #0
   219d4:	beq	21a60 <__assert_fail@plt+0xfd5c>
   219d8:	ldr	r0, [r4, #32]
   219dc:	cmp	r5, r0
   219e0:	bge	21ae8 <__assert_fail@plt+0xfde4>
   219e4:	ldrb	r0, [r4, #76]	; 0x4c
   219e8:	cmp	r0, #0
   219ec:	bne	21c1c <__assert_fail@plt+0xff18>
   219f0:	sub	r1, r5, #1
   219f4:	mov	r0, r4
   219f8:	mov	r2, r6
   219fc:	bl	228d0 <__assert_fail@plt+0x10bcc>
   21a00:	str	r0, [r4, #60]	; 0x3c
   21a04:	ldr	r0, [r4, #80]	; 0x50
   21a08:	cmp	r0, #2
   21a0c:	blt	21a28 <__assert_fail@plt+0xfd24>
   21a10:	ldr	r0, [r4, #8]
   21a14:	ldr	r2, [r4, #28]
   21a18:	add	r1, r0, r5, lsl #2
   21a1c:	sub	r2, r2, r5
   21a20:	lsl	r2, r2, #2
   21a24:	bl	118e4 <memmove@plt>
   21a28:	ldrb	r0, [r4, #75]	; 0x4b
   21a2c:	cmp	r0, #0
   21a30:	bne	21d10 <__assert_fail@plt+0x1000c>
   21a34:	ldr	r0, [r4, #28]
   21a38:	ldr	r1, [r4, #32]
   21a3c:	sub	r0, r0, r5
   21a40:	sub	r1, r1, r5
   21a44:	str	r0, [r4, #28]
   21a48:	str	r1, [r4, #32]
   21a4c:	ldrb	r0, [r4, #75]	; 0x4b
   21a50:	cmp	r0, #0
   21a54:	ldreq	r0, [r4, #4]
   21a58:	addeq	r0, r0, r5
   21a5c:	streq	r0, [r4, #4]
   21a60:	str	r7, [r4, #24]
   21a64:	ldr	r0, [r4, #48]	; 0x30
   21a68:	ldr	r1, [r4, #56]	; 0x38
   21a6c:	ldr	r2, [r4, #80]	; 0x50
   21a70:	sub	r0, r0, r5
   21a74:	str	r0, [r4, #48]	; 0x30
   21a78:	sub	r1, r1, r5
   21a7c:	str	r1, [r4, #56]	; 0x38
   21a80:	cmp	r2, #2
   21a84:	blt	21aac <__assert_fail@plt+0xfda8>
   21a88:	ldrb	r0, [r4, #72]	; 0x48
   21a8c:	cmp	r0, #0
   21a90:	beq	21ac0 <__assert_fail@plt+0xfdbc>
   21a94:	mov	r0, r4
   21a98:	bl	1c694 <__assert_fail@plt+0xa990>
   21a9c:	cmp	r0, #0
   21aa0:	beq	21ac8 <__assert_fail@plt+0xfdc4>
   21aa4:	sub	sp, fp, #28
   21aa8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   21aac:	ldrb	r1, [r4, #75]	; 0x4b
   21ab0:	cmp	r1, #0
   21ab4:	bne	21d28 <__assert_fail@plt+0x10024>
   21ab8:	str	r0, [r4, #28]
   21abc:	b	21ac8 <__assert_fail@plt+0xfdc4>
   21ac0:	mov	r0, r4
   21ac4:	bl	1ccc8 <__assert_fail@plt+0xafc4>
   21ac8:	mov	r0, #0
   21acc:	str	r0, [r4, #40]	; 0x28
   21ad0:	sub	sp, fp, #28
   21ad4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   21ad8:	sub	r5, r7, r0
   21adc:	cmp	r5, #0
   21ae0:	bne	219d8 <__assert_fail@plt+0xfcd4>
   21ae4:	b	21a60 <__assert_fail@plt+0xfd5c>
   21ae8:	ldr	r9, [r4, #28]
   21aec:	ldrb	r0, [r4, #76]	; 0x4c
   21af0:	cmp	r0, #0
   21af4:	bne	21ea0 <__assert_fail@plt+0x1019c>
   21af8:	mov	r0, #0
   21afc:	str	r0, [r4, #28]
   21b00:	ldr	r1, [r4, #80]	; 0x50
   21b04:	cmp	r1, #2
   21b08:	blt	21d40 <__assert_fail@plt+0x1003c>
   21b0c:	mvn	r0, #0
   21b10:	str	r0, [sp, #24]
   21b14:	ldrb	r0, [r4, #73]	; 0x49
   21b18:	cmp	r0, #0
   21b1c:	beq	21bd0 <__assert_fail@plt+0xfecc>
   21b20:	ldr	r2, [r4]
   21b24:	ldr	r0, [r4, #24]
   21b28:	add	r0, r2, r0
   21b2c:	add	r8, r0, r5
   21b30:	sub	r1, r5, r1
   21b34:	add	r1, r0, r1
   21b38:	cmp	r1, r2
   21b3c:	movcc	r1, r2
   21b40:	mov	sl, r8
   21b44:	sub	sl, sl, #1
   21b48:	cmp	sl, r1
   21b4c:	bcc	21bc4 <__assert_fail@plt+0xfec0>
   21b50:	ldrb	r2, [sl]
   21b54:	and	r2, r2, #192	; 0xc0
   21b58:	cmp	r2, #128	; 0x80
   21b5c:	beq	21b44 <__assert_fail@plt+0xfe40>
   21b60:	ldr	r1, [r4, #48]	; 0x30
   21b64:	add	r3, r0, r1
   21b68:	sub	r2, r3, sl
   21b6c:	ldr	r0, [r4, #64]	; 0x40
   21b70:	cmp	r0, #0
   21b74:	mov	r1, sl
   21b78:	bne	21f28 <__assert_fail@plt+0x10224>
   21b7c:	mov	r0, #0
   21b80:	str	r0, [sp, #20]
   21b84:	str	r0, [sp, #16]
   21b88:	add	r0, sp, #12
   21b8c:	add	r3, sp, #16
   21b90:	bl	1a328 <__assert_fail@plt+0x8624>
   21b94:	sub	r1, r8, sl
   21b98:	cmp	r0, r1
   21b9c:	bcc	21bc4 <__assert_fail@plt+0xfec0>
   21ba0:	cmn	r0, #3
   21ba4:	bhi	21bc4 <__assert_fail@plt+0xfec0>
   21ba8:	mov	r2, #0
   21bac:	str	r2, [r4, #16]
   21bb0:	str	r2, [r4, #20]
   21bb4:	sub	r0, r0, r1
   21bb8:	str	r0, [r4, #28]
   21bbc:	ldr	r0, [sp, #12]
   21bc0:	str	r0, [sp, #24]
   21bc4:	ldr	r8, [sp, #24]
   21bc8:	cmn	r8, #1
   21bcc:	bne	21bf4 <__assert_fail@plt+0xfef0>
   21bd0:	add	r2, sp, #24
   21bd4:	mov	r0, r4
   21bd8:	mov	r1, r7
   21bdc:	bl	2299c <__assert_fail@plt+0x10c98>
   21be0:	sub	r0, r0, r7
   21be4:	str	r0, [r4, #28]
   21be8:	ldr	r8, [sp, #24]
   21bec:	cmn	r8, #1
   21bf0:	beq	21e64 <__assert_fail@plt+0x10160>
   21bf4:	ldrb	r0, [r4, #78]	; 0x4e
   21bf8:	cmp	r0, #0
   21bfc:	bne	21f04 <__assert_fail@plt+0x10200>
   21c00:	mov	r0, #0
   21c04:	cmp	r8, #10
   21c08:	bne	21e74 <__assert_fail@plt+0x10170>
   21c0c:	ldrb	r0, [r4, #77]	; 0x4d
   21c10:	cmp	r0, #0
   21c14:	movwne	r0, #2
   21c18:	b	21e74 <__assert_fail@plt+0x10170>
   21c1c:	ldr	r8, [r4, #12]
   21c20:	ldr	r9, [r4, #28]
   21c24:	mov	r0, #0
   21c28:	mov	r1, r9
   21c2c:	add	r2, r0, r1
   21c30:	add	r2, r2, r2, lsr #31
   21c34:	asr	sl, r2, #1
   21c38:	ldr	r2, [r8, sl, lsl #2]
   21c3c:	cmp	r2, r5
   21c40:	mov	r3, sl
   21c44:	bgt	21c54 <__assert_fail@plt+0xff50>
   21c48:	bge	21c60 <__assert_fail@plt+0xff5c>
   21c4c:	add	r0, sl, #1
   21c50:	mov	r3, r1
   21c54:	cmp	r0, r3
   21c58:	mov	r1, r3
   21c5c:	blt	21c2c <__assert_fail@plt+0xff28>
   21c60:	cmp	r2, r5
   21c64:	addlt	sl, sl, #1
   21c68:	sub	r1, sl, #1
   21c6c:	mov	r0, r4
   21c70:	mov	r2, r6
   21c74:	bl	228d0 <__assert_fail@plt+0x10bcc>
   21c78:	str	r0, [r4, #60]	; 0x3c
   21c7c:	cmp	r9, r5
   21c80:	ble	21c94 <__assert_fail@plt+0xff90>
   21c84:	cmp	sl, r5
   21c88:	ldreq	r0, [r8, sl, lsl #2]
   21c8c:	cmpeq	r0, r5
   21c90:	beq	21df0 <__assert_fail@plt+0x100ec>
   21c94:	mov	r0, #0
   21c98:	strb	r0, [r4, #76]	; 0x4c
   21c9c:	sub	r0, r5, r7
   21ca0:	ldr	r1, [r4, #44]	; 0x2c
   21ca4:	ldr	r2, [r4, #52]	; 0x34
   21ca8:	add	r1, r0, r1
   21cac:	str	r1, [r4, #48]	; 0x30
   21cb0:	add	r0, r0, r2
   21cb4:	str	r0, [r4, #56]	; 0x38
   21cb8:	sub	r1, r8, #4
   21cbc:	mov	r0, sl
   21cc0:	cmp	sl, #1
   21cc4:	blt	21cd8 <__assert_fail@plt+0xffd4>
   21cc8:	ldr	r2, [r1, r0, lsl #2]
   21ccc:	sub	sl, r0, #1
   21cd0:	cmp	r2, r5
   21cd4:	beq	21cbc <__assert_fail@plt+0xffb8>
   21cd8:	cmp	r0, r9
   21cdc:	bge	21cfc <__assert_fail@plt+0xfff8>
   21ce0:	ldr	r1, [r4, #8]
   21ce4:	ldr	r2, [r1, r0, lsl #2]
   21ce8:	cmn	r2, #1
   21cec:	bne	21cfc <__assert_fail@plt+0xfff8>
   21cf0:	add	r0, r0, #1
   21cf4:	cmp	r0, r9
   21cf8:	blt	21ce4 <__assert_fail@plt+0xffe0>
   21cfc:	cmp	r0, r9
   21d00:	bne	21d8c <__assert_fail@plt+0x10088>
   21d04:	mov	r0, #0
   21d08:	str	r0, [r4, #28]
   21d0c:	b	21e84 <__assert_fail@plt+0x10180>
   21d10:	ldr	r0, [r4, #4]
   21d14:	ldr	r2, [r4, #28]
   21d18:	add	r1, r0, r5
   21d1c:	sub	r2, r2, r5
   21d20:	bl	118e4 <memmove@plt>
   21d24:	b	21a34 <__assert_fail@plt+0xfd30>
   21d28:	ldrb	r0, [r4, #72]	; 0x48
   21d2c:	cmp	r0, #0
   21d30:	beq	21dd8 <__assert_fail@plt+0x100d4>
   21d34:	mov	r0, r4
   21d38:	bl	1cc5c <__assert_fail@plt+0xaf58>
   21d3c:	b	21ac8 <__assert_fail@plt+0xfdc4>
   21d40:	ldr	r2, [r4]
   21d44:	ldr	r3, [r4, #24]
   21d48:	ldr	r1, [r4, #64]	; 0x40
   21d4c:	add	r3, r5, r3
   21d50:	add	r2, r2, r3
   21d54:	ldrb	r6, [r2, #-1]
   21d58:	str	r0, [r4, #32]
   21d5c:	cmp	r1, #0
   21d60:	ldrbne	r6, [r1, r6]
   21d64:	ldr	r0, [r4, #68]	; 0x44
   21d68:	mov	r1, r6
   21d6c:	bl	22a48 <__assert_fail@plt+0x10d44>
   21d70:	mov	r1, #1
   21d74:	cmp	r0, #0
   21d78:	moveq	r1, #0
   21d7c:	cmpeq	r6, #10
   21d80:	beq	21e90 <__assert_fail@plt+0x1018c>
   21d84:	str	r1, [r4, #60]	; 0x3c
   21d88:	b	21a4c <__assert_fail@plt+0xfd48>
   21d8c:	ldr	r0, [r8, r0, lsl #2]
   21d90:	subs	r0, r0, r5
   21d94:	str	r0, [r4, #28]
   21d98:	beq	21e84 <__assert_fail@plt+0x10180>
   21d9c:	ldr	r2, [r4, #28]
   21da0:	cmp	r2, #1
   21da4:	blt	21dc8 <__assert_fail@plt+0x100c4>
   21da8:	ldr	r0, [r4, #8]
   21dac:	mov	r1, #0
   21db0:	mvn	r3, #0
   21db4:	str	r3, [r0, r1, lsl #2]
   21db8:	add	r1, r1, #1
   21dbc:	ldr	r2, [r4, #28]
   21dc0:	cmp	r1, r2
   21dc4:	blt	21db4 <__assert_fail@plt+0x100b0>
   21dc8:	ldr	r0, [r4, #4]
   21dcc:	mov	r1, #255	; 0xff
   21dd0:	bl	11b60 <memset@plt>
   21dd4:	b	21e84 <__assert_fail@plt+0x10180>
   21dd8:	ldr	r0, [r4, #64]	; 0x40
   21ddc:	cmp	r0, #0
   21de0:	beq	21ac8 <__assert_fail@plt+0xfdc4>
   21de4:	mov	r0, r4
   21de8:	bl	1ce58 <__assert_fail@plt+0xb154>
   21dec:	b	21ac8 <__assert_fail@plt+0xfdc4>
   21df0:	ldr	r0, [r4, #8]
   21df4:	add	r1, r0, r5, lsl #2
   21df8:	sub	r2, r9, r5
   21dfc:	lsl	r2, r2, #2
   21e00:	bl	118e4 <memmove@plt>
   21e04:	ldr	r0, [r4, #4]
   21e08:	ldr	r2, [r4, #28]
   21e0c:	add	r1, r0, r5
   21e10:	sub	r2, r2, r5
   21e14:	bl	118e4 <memmove@plt>
   21e18:	ldr	r0, [r4, #28]
   21e1c:	ldr	r1, [r4, #32]
   21e20:	sub	r0, r0, r5
   21e24:	sub	r1, r1, r5
   21e28:	str	r0, [r4, #28]
   21e2c:	str	r1, [r4, #32]
   21e30:	cmp	r0, #1
   21e34:	blt	21a4c <__assert_fail@plt+0xfd48>
   21e38:	ldr	r0, [r4, #12]
   21e3c:	add	r1, r0, r5, lsl #2
   21e40:	mov	r2, #0
   21e44:	ldr	r3, [r1, r2, lsl #2]
   21e48:	sub	r3, r3, r5
   21e4c:	str	r3, [r0, r2, lsl #2]
   21e50:	add	r2, r2, #1
   21e54:	ldr	r3, [r4, #28]
   21e58:	cmp	r2, r3
   21e5c:	blt	21e44 <__assert_fail@plt+0x10140>
   21e60:	b	21a4c <__assert_fail@plt+0xfd48>
   21e64:	sub	r1, r9, #1
   21e68:	mov	r0, r4
   21e6c:	mov	r2, r6
   21e70:	bl	228d0 <__assert_fail@plt+0x10bcc>
   21e74:	str	r0, [r4, #60]	; 0x3c
   21e78:	ldr	r0, [r4, #28]
   21e7c:	cmp	r0, #0
   21e80:	bne	21ec8 <__assert_fail@plt+0x101c4>
   21e84:	ldr	r0, [r4, #28]
   21e88:	str	r0, [r4, #32]
   21e8c:	b	21a4c <__assert_fail@plt+0xfd48>
   21e90:	ldrb	r1, [r4, #77]	; 0x4d
   21e94:	cmp	r1, #0
   21e98:	movwne	r1, #2
   21e9c:	b	21d84 <__assert_fail@plt+0x10080>
   21ea0:	mov	r0, #0
   21ea4:	strb	r0, [r4, #76]	; 0x4c
   21ea8:	sub	r0, r5, r7
   21eac:	ldr	r1, [r4, #44]	; 0x2c
   21eb0:	ldr	r2, [r4, #52]	; 0x34
   21eb4:	add	r1, r0, r1
   21eb8:	str	r1, [r4, #48]	; 0x30
   21ebc:	add	r0, r0, r2
   21ec0:	str	r0, [r4, #56]	; 0x38
   21ec4:	b	21af8 <__assert_fail@plt+0xfdf4>
   21ec8:	ldr	r2, [r4, #28]
   21ecc:	cmp	r2, #1
   21ed0:	blt	21ef4 <__assert_fail@plt+0x101f0>
   21ed4:	ldr	r0, [r4, #8]
   21ed8:	mov	r1, #0
   21edc:	mvn	r3, #0
   21ee0:	str	r3, [r0, r1, lsl #2]
   21ee4:	add	r1, r1, #1
   21ee8:	ldr	r2, [r4, #28]
   21eec:	cmp	r1, r2
   21ef0:	blt	21ee0 <__assert_fail@plt+0x101dc>
   21ef4:	ldrb	r0, [r4, #75]	; 0x4b
   21ef8:	cmp	r0, #0
   21efc:	bne	21dc8 <__assert_fail@plt+0x100c4>
   21f00:	b	21e84 <__assert_fail@plt+0x10180>
   21f04:	mov	r0, r8
   21f08:	bl	11b30 <iswalnum@plt>
   21f0c:	mov	r1, r0
   21f10:	mov	r0, #1
   21f14:	cmp	r8, #95	; 0x5f
   21f18:	beq	21e74 <__assert_fail@plt+0x10170>
   21f1c:	cmp	r1, #0
   21f20:	beq	21c00 <__assert_fail@plt+0xfefc>
   21f24:	b	21e74 <__assert_fail@plt+0x10170>
   21f28:	cmp	r2, #1
   21f2c:	blt	21f70 <__assert_fail@plt+0x1026c>
   21f30:	sub	r1, sl, #1
   21f34:	sub	r1, r1, r3
   21f38:	cmn	r1, #7
   21f3c:	mvnle	r1, #6
   21f40:	mvn	r3, #1
   21f44:	sub	ip, r3, r1
   21f48:	add	r1, sp, #6
   21f4c:	ldrb	r3, [sl, ip]
   21f50:	ldrb	r3, [r0, r3]
   21f54:	strb	r3, [r1, ip]
   21f58:	sub	lr, ip, #1
   21f5c:	add	r3, ip, #1
   21f60:	cmp	r3, #1
   21f64:	mov	ip, lr
   21f68:	bgt	21f4c <__assert_fail@plt+0x10248>
   21f6c:	b	21b7c <__assert_fail@plt+0xfe78>
   21f70:	add	r1, sp, #6
   21f74:	b	21b7c <__assert_fail@plt+0xfe78>
   21f78:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   21f7c:	add	fp, sp, #28
   21f80:	sub	sp, sp, #20
   21f84:	mov	sl, r2
   21f88:	str	r1, [sp, #12]
   21f8c:	mov	r7, r0
   21f90:	ldr	r5, [r0, #84]	; 0x54
   21f94:	ldr	r8, [r0, #40]	; 0x28
   21f98:	mov	r0, #0
   21f9c:	str	r0, [sp, #16]
   21fa0:	cmp	r2, #0
   21fa4:	str	r2, [sp, #4]
   21fa8:	movwne	sl, #1
   21fac:	ldr	r4, [r5, #36]	; 0x24
   21fb0:	ldrsb	r0, [r4, #52]	; 0x34
   21fb4:	cmn	r0, #1
   21fb8:	bgt	22024 <__assert_fail@plt+0x10320>
   21fbc:	ldr	r2, [r7, #88]	; 0x58
   21fc0:	sub	r1, r8, #1
   21fc4:	mov	r0, r7
   21fc8:	bl	228d0 <__assert_fail@plt+0x10bcc>
   21fcc:	tst	r0, #1
   21fd0:	bne	22020 <__assert_fail@plt+0x1031c>
   21fd4:	mov	r3, r0
   21fd8:	cmp	r0, #0
   21fdc:	beq	22024 <__assert_fail@plt+0x10320>
   21fe0:	ands	r1, r3, #2
   21fe4:	and	r0, r3, #4
   21fe8:	cmpne	r0, #0
   21fec:	bne	2207c <__assert_fail@plt+0x10378>
   21ff0:	cmp	r1, #0
   21ff4:	bne	2208c <__assert_fail@plt+0x10388>
   21ff8:	cmp	r0, #0
   21ffc:	beq	22024 <__assert_fail@plt+0x10320>
   22000:	ldr	r2, [r4, #40]	; 0x28
   22004:	add	r0, sp, #16
   22008:	mov	r1, r5
   2200c:	bl	211e0 <__assert_fail@plt+0xf4dc>
   22010:	mov	r4, r0
   22014:	cmp	r4, #0
   22018:	bne	2202c <__assert_fail@plt+0x10328>
   2201c:	b	22230 <__assert_fail@plt+0x1052c>
   22020:	ldr	r4, [r5, #40]	; 0x28
   22024:	cmp	r4, #0
   22028:	beq	22230 <__assert_fail@plt+0x1052c>
   2202c:	ldr	r0, [r7, #100]	; 0x64
   22030:	cmp	r0, #0
   22034:	beq	22048 <__assert_fail@plt+0x10344>
   22038:	str	r4, [r0, r8, lsl #2]
   2203c:	ldr	r0, [r5, #76]	; 0x4c
   22040:	cmp	r0, #0
   22044:	bne	22260 <__assert_fail@plt+0x1055c>
   22048:	ldrb	r0, [r4, #52]	; 0x34
   2204c:	tst	r0, #16
   22050:	bne	22238 <__assert_fail@plt+0x10534>
   22054:	mov	r0, #0
   22058:	str	r0, [sp, #8]
   2205c:	mvn	r6, #0
   22060:	str	r8, [sp]
   22064:	ldr	r0, [r7, #40]	; 0x28
   22068:	ldr	r1, [r7, #56]	; 0x38
   2206c:	cmp	r1, r0
   22070:	ble	2220c <__assert_fail@plt+0x10508>
   22074:	add	r8, sp, #16
   22078:	b	220f8 <__assert_fail@plt+0x103f4>
   2207c:	ldr	r4, [r5, #48]	; 0x30
   22080:	cmp	r4, #0
   22084:	bne	2202c <__assert_fail@plt+0x10328>
   22088:	b	22230 <__assert_fail@plt+0x1052c>
   2208c:	ldr	r4, [r5, #44]	; 0x2c
   22090:	cmp	r4, #0
   22094:	bne	2202c <__assert_fail@plt+0x10328>
   22098:	b	22230 <__assert_fail@plt+0x1052c>
   2209c:	ldr	r2, [r7, #48]	; 0x30
   220a0:	cmp	r1, r2
   220a4:	bge	2210c <__assert_fail@plt+0x10408>
   220a8:	b	220b8 <__assert_fail@plt+0x103b4>
   220ac:	ldr	r2, [r7, #48]	; 0x30
   220b0:	cmp	r1, r2
   220b4:	bge	22118 <__assert_fail@plt+0x10414>
   220b8:	add	r1, r0, #2
   220bc:	mov	r0, r7
   220c0:	bl	22df4 <__assert_fail@plt+0x110f0>
   220c4:	str	r0, [sp, #16]
   220c8:	cmp	r0, #0
   220cc:	beq	22118 <__assert_fail@plt+0x10414>
   220d0:	b	22230 <__assert_fail@plt+0x1052c>
   220d4:	cmp	r9, r4
   220d8:	ldr	r0, [sp]
   220dc:	moveq	r0, r5
   220e0:	str	r0, [sp]
   220e4:	sub	r0, r9, r4
   220e8:	clz	r0, r0
   220ec:	lsr	r0, r0, #5
   220f0:	and	sl, sl, r0
   220f4:	b	221ac <__assert_fail@plt+0x104a8>
   220f8:	mov	r9, r4
   220fc:	add	r5, r0, #1
   22100:	ldr	r1, [r7, #36]	; 0x24
   22104:	cmp	r5, r1
   22108:	bge	2209c <__assert_fail@plt+0x10398>
   2210c:	ldr	r1, [r7, #28]
   22110:	cmp	r5, r1
   22114:	bge	220ac <__assert_fail@plt+0x103a8>
   22118:	mov	r0, r8
   2211c:	mov	r1, r7
   22120:	mov	r2, r9
   22124:	bl	22ec8 <__assert_fail@plt+0x111c4>
   22128:	mov	r4, r0
   2212c:	ldr	r0, [r7, #100]	; 0x64
   22130:	cmp	r0, #0
   22134:	beq	2214c <__assert_fail@plt+0x10448>
   22138:	mov	r0, r8
   2213c:	mov	r1, r7
   22140:	mov	r2, r4
   22144:	bl	22f78 <__assert_fail@plt+0x11274>
   22148:	mov	r4, r0
   2214c:	cmp	r4, #0
   22150:	bne	221a0 <__assert_fail@plt+0x1049c>
   22154:	ldr	r0, [sp, #16]
   22158:	cmp	r0, #0
   2215c:	bne	22230 <__assert_fail@plt+0x1052c>
   22160:	ldr	r0, [sp, #8]
   22164:	clz	r0, r0
   22168:	lsr	r0, r0, #5
   2216c:	ldr	r1, [sp, #12]
   22170:	orr	r0, r0, r1
   22174:	cmp	r0, #1
   22178:	bne	2220c <__assert_fail@plt+0x10508>
   2217c:	ldr	r0, [r7, #100]	; 0x64
   22180:	cmp	r0, #0
   22184:	beq	2220c <__assert_fail@plt+0x10508>
   22188:	mov	r0, r8
   2218c:	mov	r1, r7
   22190:	bl	230c4 <__assert_fail@plt+0x113c0>
   22194:	mov	r4, r0
   22198:	cmp	r0, #0
   2219c:	beq	2220c <__assert_fail@plt+0x10508>
   221a0:	tst	sl, #1
   221a4:	bne	220d4 <__assert_fail@plt+0x103d0>
   221a8:	mov	sl, #0
   221ac:	ldrb	r0, [r4, #52]	; 0x34
   221b0:	tst	r0, #16
   221b4:	beq	221fc <__assert_fail@plt+0x104f8>
   221b8:	sxtb	r0, r0
   221bc:	cmn	r0, #1
   221c0:	bgt	221dc <__assert_fail@plt+0x104d8>
   221c4:	ldr	r2, [r7, #40]	; 0x28
   221c8:	mov	r0, r7
   221cc:	mov	r1, r4
   221d0:	bl	222ec <__assert_fail@plt+0x105e8>
   221d4:	cmp	r0, #0
   221d8:	beq	221fc <__assert_fail@plt+0x104f8>
   221dc:	ldr	r6, [r7, #40]	; 0x28
   221e0:	ldr	r0, [sp, #12]
   221e4:	cmp	r0, #0
   221e8:	beq	22224 <__assert_fail@plt+0x10520>
   221ec:	mov	r0, #0
   221f0:	str	r0, [sp, #4]
   221f4:	mov	r0, #1
   221f8:	str	r0, [sp, #8]
   221fc:	ldr	r0, [r7, #40]	; 0x28
   22200:	ldr	r1, [r7, #56]	; 0x38
   22204:	cmp	r1, r0
   22208:	bgt	220f8 <__assert_fail@plt+0x103f4>
   2220c:	ldr	r2, [sp, #4]
   22210:	cmp	r2, #0
   22214:	ldrne	r0, [r2]
   22218:	ldrne	r1, [sp]
   2221c:	addne	r0, r0, r1
   22220:	strne	r0, [r2]
   22224:	mov	r0, r6
   22228:	sub	sp, fp, #28
   2222c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   22230:	mvn	r6, #1
   22234:	b	22224 <__assert_fail@plt+0x10520>
   22238:	sxtb	r0, r0
   2223c:	cmn	r0, #1
   22240:	ble	222b0 <__assert_fail@plt+0x105ac>
   22244:	mov	r0, #1
   22248:	str	r0, [sp, #8]
   2224c:	ldr	r0, [sp, #12]
   22250:	cmp	r0, #0
   22254:	mov	r6, r8
   22258:	bne	22060 <__assert_fail@plt+0x1035c>
   2225c:	b	222e4 <__assert_fail@plt+0x105e0>
   22260:	add	r5, r4, #4
   22264:	mov	sl, #0
   22268:	mov	r0, r7
   2226c:	mov	r1, r5
   22270:	mov	r2, #0
   22274:	bl	22a70 <__assert_fail@plt+0x10d6c>
   22278:	str	r0, [sp, #16]
   2227c:	cmp	r0, #0
   22280:	bne	222a8 <__assert_fail@plt+0x105a4>
   22284:	ldrb	r0, [r4, #52]	; 0x34
   22288:	tst	r0, #64	; 0x40
   2228c:	beq	22048 <__assert_fail@plt+0x10344>
   22290:	mov	r0, r7
   22294:	mov	r1, r5
   22298:	bl	22afc <__assert_fail@plt+0x10df8>
   2229c:	str	r0, [sp, #16]
   222a0:	cmp	r0, #0
   222a4:	beq	22048 <__assert_fail@plt+0x10344>
   222a8:	mov	r6, r0
   222ac:	b	22224 <__assert_fail@plt+0x10520>
   222b0:	mov	r0, r7
   222b4:	mov	r1, r4
   222b8:	mov	r2, r8
   222bc:	bl	222ec <__assert_fail@plt+0x105e8>
   222c0:	cmp	r0, #0
   222c4:	mov	r6, r8
   222c8:	mvneq	r6, #0
   222cc:	movwne	r0, #1
   222d0:	str	r0, [sp, #8]
   222d4:	beq	22060 <__assert_fail@plt+0x1035c>
   222d8:	ldr	r0, [sp, #12]
   222dc:	cmp	r0, #0
   222e0:	bne	22060 <__assert_fail@plt+0x1035c>
   222e4:	mov	r6, r8
   222e8:	b	22224 <__assert_fail@plt+0x10520>
   222ec:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   222f0:	add	fp, sp, #24
   222f4:	mov	r3, r2
   222f8:	mov	r8, r1
   222fc:	mov	r6, r0
   22300:	ldr	r2, [r0, #88]	; 0x58
   22304:	mov	r1, r3
   22308:	bl	228d0 <__assert_fail@plt+0x10bcc>
   2230c:	mov	r9, r0
   22310:	ldr	r0, [r8, #8]
   22314:	cmp	r0, #1
   22318:	blt	22358 <__assert_fail@plt+0x10654>
   2231c:	ldr	r4, [r8, #12]
   22320:	ldr	r6, [r6, #84]	; 0x54
   22324:	mov	r5, #0
   22328:	ldr	r7, [r4, r5, lsl #2]
   2232c:	mov	r0, r6
   22330:	mov	r1, r7
   22334:	mov	r2, r9
   22338:	bl	25794 <__assert_fail@plt+0x13a90>
   2233c:	cmp	r0, #0
   22340:	movne	r0, r7
   22344:	popne	{r4, r5, r6, r7, r8, r9, fp, pc}
   22348:	add	r5, r5, #1
   2234c:	ldr	r0, [r8, #8]
   22350:	cmp	r5, r0
   22354:	blt	22328 <__assert_fail@plt+0x10624>
   22358:	mov	r7, #0
   2235c:	mov	r0, r7
   22360:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   22364:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   22368:	add	fp, sp, #28
   2236c:	sub	sp, sp, #44	; 0x2c
   22370:	ldr	r7, [r0, #92]	; 0x5c
   22374:	cmn	r7, #-1073741822	; 0xc0000002
   22378:	bhi	22574 <__assert_fail@plt+0x10870>
   2237c:	ldr	r5, [r0, #84]	; 0x54
   22380:	str	r0, [sp, #12]
   22384:	ldr	sl, [r0, #96]	; 0x60
   22388:	mov	r0, #4
   2238c:	add	r6, r0, r7, lsl #2
   22390:	mov	r0, r6
   22394:	bl	1a2f8 <__assert_fail@plt+0x85f4>
   22398:	mov	r4, #12
   2239c:	cmp	r0, #0
   223a0:	beq	22544 <__assert_fail@plt+0x10840>
   223a4:	mov	r9, r0
   223a8:	ldr	r0, [r5, #76]	; 0x4c
   223ac:	cmp	r0, #0
   223b0:	beq	223d8 <__assert_fail@plt+0x106d4>
   223b4:	mov	r0, r6
   223b8:	bl	1a2f8 <__assert_fail@plt+0x85f4>
   223bc:	cmp	r0, #0
   223c0:	beq	22548 <__assert_fail@plt+0x10844>
   223c4:	mov	r8, r0
   223c8:	str	r5, [sp, #8]
   223cc:	add	r4, sp, #16
   223d0:	mov	r5, sl
   223d4:	b	22440 <__assert_fail@plt+0x1073c>
   223d8:	str	r7, [sp]
   223dc:	add	r4, sp, #16
   223e0:	mov	r8, #0
   223e4:	mov	r0, r4
   223e8:	mov	r1, r9
   223ec:	mov	r2, #0
   223f0:	mov	r3, sl
   223f4:	bl	25808 <__assert_fail@plt+0x13b04>
   223f8:	ldr	r0, [sp, #12]
   223fc:	mov	r1, r4
   22400:	bl	25828 <__assert_fail@plt+0x13b24>
   22404:	mov	r4, r0
   22408:	ldr	r0, [sp, #40]	; 0x28
   2240c:	bl	1a22c <__assert_fail@plt+0x8528>
   22410:	cmp	r4, #0
   22414:	bne	2254c <__assert_fail@plt+0x10848>
   22418:	ldr	r0, [r9]
   2241c:	cmp	r0, #0
   22420:	bne	22528 <__assert_fail@plt+0x10824>
   22424:	mov	r4, #1
   22428:	b	2254c <__assert_fail@plt+0x10848>
   2242c:	mov	r0, sl
   22430:	mov	r2, r7
   22434:	bl	222ec <__assert_fail@plt+0x105e8>
   22438:	mov	r4, r5
   2243c:	mov	r5, r0
   22440:	add	sl, r7, #1
   22444:	lsl	r2, sl, #2
   22448:	mov	r0, r8
   2244c:	mov	r1, #0
   22450:	bl	11b60 <memset@plt>
   22454:	str	r7, [sp]
   22458:	mov	r0, r4
   2245c:	mov	r1, r9
   22460:	mov	r6, r8
   22464:	mov	r2, r8
   22468:	mov	r8, r5
   2246c:	mov	r3, r5
   22470:	bl	25808 <__assert_fail@plt+0x13b04>
   22474:	ldr	r0, [sp, #12]
   22478:	mov	r5, r4
   2247c:	mov	r1, r4
   22480:	bl	25828 <__assert_fail@plt+0x13b24>
   22484:	mov	r4, r0
   22488:	ldr	r0, [sp, #40]	; 0x28
   2248c:	bl	1a22c <__assert_fail@plt+0x8528>
   22490:	cmp	r4, #0
   22494:	bne	2257c <__assert_fail@plt+0x10878>
   22498:	mov	r1, r9
   2249c:	ldr	r0, [r9]
   224a0:	cmp	r0, #0
   224a4:	ldreq	r0, [r6]
   224a8:	cmpeq	r0, #0
   224ac:	bne	224fc <__assert_fail@plt+0x107f8>
   224b0:	mov	r4, #1
   224b4:	cmp	r7, #1
   224b8:	blt	22568 <__assert_fail@plt+0x10864>
   224bc:	sub	r7, r7, #1
   224c0:	ldr	sl, [sp, #12]
   224c4:	ldr	r0, [sl, #100]	; 0x64
   224c8:	mov	r9, r1
   224cc:	mov	r8, r6
   224d0:	ldr	r1, [r0, r7, lsl #2]
   224d4:	cmp	r1, #0
   224d8:	ldrbne	r2, [r1, #52]	; 0x34
   224dc:	tstne	r2, #16
   224e0:	bne	2242c <__assert_fail@plt+0x10728>
   224e4:	sub	r1, r7, #1
   224e8:	add	r2, r7, #1
   224ec:	cmp	r2, #2
   224f0:	mov	r7, r1
   224f4:	bge	224d0 <__assert_fail@plt+0x107cc>
   224f8:	b	2254c <__assert_fail@plt+0x10848>
   224fc:	ldr	r0, [sp, #8]
   22500:	mov	r9, r1
   22504:	mov	r2, r6
   22508:	mov	r3, sl
   2250c:	bl	25934 <__assert_fail@plt+0x13c30>
   22510:	mov	r4, r0
   22514:	mov	r0, r6
   22518:	bl	1a22c <__assert_fail@plt+0x8528>
   2251c:	cmp	r4, #0
   22520:	mov	sl, r8
   22524:	bne	22548 <__assert_fail@plt+0x10844>
   22528:	ldr	r4, [sp, #12]
   2252c:	ldr	r0, [r4, #100]	; 0x64
   22530:	bl	1a22c <__assert_fail@plt+0x8528>
   22534:	str	r7, [r4, #92]	; 0x5c
   22538:	str	sl, [r4, #96]	; 0x60
   2253c:	str	r9, [r4, #100]	; 0x64
   22540:	mov	r4, #0
   22544:	mov	r9, #0
   22548:	mov	r8, #0
   2254c:	mov	r0, r9
   22550:	bl	1a22c <__assert_fail@plt+0x8528>
   22554:	mov	r0, r8
   22558:	bl	1a22c <__assert_fail@plt+0x8528>
   2255c:	mov	r0, r4
   22560:	sub	sp, fp, #28
   22564:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   22568:	mov	r9, r1
   2256c:	mov	r8, r6
   22570:	b	2254c <__assert_fail@plt+0x10848>
   22574:	mov	r4, #12
   22578:	b	2255c <__assert_fail@plt+0x10858>
   2257c:	mov	r8, r6
   22580:	b	2254c <__assert_fail@plt+0x10848>
   22584:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   22588:	add	fp, sp, #24
   2258c:	mov	r8, r0
   22590:	ldr	r0, [r0, #124]	; 0x7c
   22594:	cmp	r0, #1
   22598:	blt	2261c <__assert_fail@plt+0x10918>
   2259c:	mov	r7, #0
   225a0:	ldr	r0, [r8, #132]	; 0x84
   225a4:	ldr	r5, [r0, r7, lsl #2]
   225a8:	ldr	r0, [r5, #16]
   225ac:	cmp	r0, #1
   225b0:	blt	225e0 <__assert_fail@plt+0x108dc>
   225b4:	mov	r4, #0
   225b8:	ldr	r0, [r5, #20]
   225bc:	ldr	r6, [r0, r4, lsl #2]
   225c0:	ldr	r0, [r6, #16]
   225c4:	bl	1a22c <__assert_fail@plt+0x8528>
   225c8:	mov	r0, r6
   225cc:	bl	1a22c <__assert_fail@plt+0x8528>
   225d0:	add	r4, r4, #1
   225d4:	ldr	r0, [r5, #16]
   225d8:	cmp	r4, r0
   225dc:	blt	225b8 <__assert_fail@plt+0x108b4>
   225e0:	ldr	r0, [r5, #20]
   225e4:	bl	1a22c <__assert_fail@plt+0x8528>
   225e8:	ldr	r0, [r5, #8]
   225ec:	cmp	r0, #0
   225f0:	beq	22604 <__assert_fail@plt+0x10900>
   225f4:	ldr	r0, [r0, #8]
   225f8:	bl	1a22c <__assert_fail@plt+0x8528>
   225fc:	ldr	r0, [r5, #8]
   22600:	bl	1a22c <__assert_fail@plt+0x8528>
   22604:	mov	r0, r5
   22608:	bl	1a22c <__assert_fail@plt+0x8528>
   2260c:	add	r7, r7, #1
   22610:	ldr	r0, [r8, #124]	; 0x7c
   22614:	cmp	r7, r0
   22618:	blt	225a0 <__assert_fail@plt+0x1089c>
   2261c:	mov	r0, #0
   22620:	str	r0, [r8, #108]	; 0x6c
   22624:	str	r0, [r8, #124]	; 0x7c
   22628:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   2262c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   22630:	add	fp, sp, #28
   22634:	sub	sp, sp, #204	; 0xcc
   22638:	mov	r5, r3
   2263c:	mov	r6, r2
   22640:	mov	r8, r1
   22644:	ldr	r4, [r0]
   22648:	movw	r0, #44800	; 0xaf00
   2264c:	movt	r0, #2
   22650:	vldr	d16, [r0]
   22654:	ldr	r0, [r0, #8]
   22658:	str	r0, [fp, #-56]	; 0xffffffc8
   2265c:	vstr	d16, [fp, #-64]	; 0xffffffc0
   22660:	add	r0, sp, #28
   22664:	bl	269d0 <__assert_fail@plt+0x14ccc>
   22668:	mov	r7, #0
   2266c:	ldr	r0, [fp, #8]
   22670:	cmp	r0, #0
   22674:	mov	r9, #0
   22678:	beq	2269c <__assert_fail@plt+0x10998>
   2267c:	ldr	r0, [fp, #-60]	; 0xffffffc4
   22680:	add	r0, r0, r0, lsl #1
   22684:	lsl	r0, r0, #3
   22688:	bl	1a2f8 <__assert_fail@plt+0x85f4>
   2268c:	str	r0, [fp, #-56]	; 0xffffffc8
   22690:	cmp	r0, #0
   22694:	beq	228a0 <__assert_fail@plt+0x10b9c>
   22698:	sub	r9, fp, #64	; 0x40
   2269c:	ldr	sl, [r4, #72]	; 0x48
   226a0:	str	r7, [fp, #-44]	; 0xffffffd4
   226a4:	str	r7, [fp, #-48]	; 0xffffffd0
   226a8:	str	r7, [fp, #-40]	; 0xffffffd8
   226ac:	add	r0, sp, #28
   226b0:	mov	r1, r6
   226b4:	bl	269e8 <__assert_fail@plt+0x14ce4>
   226b8:	cmp	r0, #0
   226bc:	beq	22890 <__assert_fail@plt+0x10b8c>
   226c0:	str	r4, [sp, #20]
   226c4:	str	r8, [sp, #24]
   226c8:	add	r0, sp, #28
   226cc:	bl	26ac0 <__assert_fail@plt+0x14dbc>
   226d0:	mov	r4, r0
   226d4:	lsl	r2, r6, #3
   226d8:	mov	r1, r5
   226dc:	bl	1192c <memcpy@plt>
   226e0:	ldr	r8, [r5]
   226e4:	ldr	r0, [r5, #4]
   226e8:	str	r8, [fp, #-32]	; 0xffffffe0
   226ec:	cmp	r8, r0
   226f0:	bgt	22864 <__assert_fail@plt+0x10b60>
   226f4:	clz	r0, r6
   226f8:	lsr	r0, r0, #5
   226fc:	clz	r1, r9
   22700:	lsr	r1, r1, #5
   22704:	orr	r0, r1, r0
   22708:	str	r0, [sp, #16]
   2270c:	ldr	r7, [sp, #24]
   22710:	str	r8, [sp]
   22714:	str	r6, [sp, #4]
   22718:	ldr	r0, [sp, #20]
   2271c:	mov	r1, r5
   22720:	mov	r2, r4
   22724:	mov	r3, sl
   22728:	bl	26ac8 <__assert_fail@plt+0x14dc4>
   2272c:	ldr	r0, [r5, #4]
   22730:	cmp	r8, r0
   22734:	ldreq	r0, [r7, #96]	; 0x60
   22738:	cmpeq	sl, r0
   2273c:	beq	2275c <__assert_fail@plt+0x10a58>
   22740:	cmp	r9, #0
   22744:	beq	227c4 <__assert_fail@plt+0x10ac0>
   22748:	sub	r0, fp, #48	; 0x30
   2274c:	mov	r1, sl
   22750:	bl	21174 <__assert_fail@plt+0xf470>
   22754:	cmp	r0, #0
   22758:	beq	227c4 <__assert_fail@plt+0x10ac0>
   2275c:	ldr	r0, [sp, #16]
   22760:	cmp	r0, #0
   22764:	bne	22864 <__assert_fail@plt+0x10b60>
   22768:	mov	r0, #0
   2276c:	ldr	r1, [r5, r0, lsl #3]
   22770:	cmp	r1, #0
   22774:	blt	22788 <__assert_fail@plt+0x10a84>
   22778:	add	r1, r5, r0, lsl #3
   2277c:	ldr	r1, [r1, #4]
   22780:	cmn	r1, #1
   22784:	beq	22798 <__assert_fail@plt+0x10a94>
   22788:	add	r0, r0, #1
   2278c:	cmp	r0, r6
   22790:	bcc	2276c <__assert_fail@plt+0x10a68>
   22794:	b	22864 <__assert_fail@plt+0x10b60>
   22798:	str	r4, [sp]
   2279c:	sub	r0, fp, #48	; 0x30
   227a0:	str	r0, [sp, #4]
   227a4:	mov	r0, r9
   227a8:	sub	r1, fp, #32
   227ac:	mov	r2, r6
   227b0:	mov	r3, r5
   227b4:	bl	26b7c <__assert_fail@plt+0x14e78>
   227b8:	mov	sl, r0
   227bc:	cmn	r0, #1
   227c0:	ble	22864 <__assert_fail@plt+0x10b60>
   227c4:	sub	r0, fp, #32
   227c8:	stm	sp, {r0, sl}
   227cc:	sub	r0, fp, #48	; 0x30
   227d0:	str	r0, [sp, #8]
   227d4:	str	r9, [sp, #12]
   227d8:	mov	r0, r7
   227dc:	mov	r1, r6
   227e0:	mov	r2, r5
   227e4:	mov	r3, r4
   227e8:	bl	26c34 <__assert_fail@plt+0x14f30>
   227ec:	mov	sl, r0
   227f0:	cmn	r0, #1
   227f4:	ble	2280c <__assert_fail@plt+0x10b08>
   227f8:	ldr	r0, [r5, #4]
   227fc:	ldr	r8, [fp, #-32]	; 0xffffffe0
   22800:	cmp	r8, r0
   22804:	ble	22710 <__assert_fail@plt+0x10a0c>
   22808:	b	22864 <__assert_fail@plt+0x10b60>
   2280c:	cmn	sl, #2
   22810:	beq	22888 <__assert_fail@plt+0x10b84>
   22814:	str	r4, [sp]
   22818:	sub	r0, fp, #48	; 0x30
   2281c:	str	r0, [sp, #4]
   22820:	mov	r0, r9
   22824:	sub	r1, fp, #32
   22828:	mov	r2, r6
   2282c:	mov	r3, r5
   22830:	bl	26b7c <__assert_fail@plt+0x14e78>
   22834:	mov	sl, r0
   22838:	cmn	r0, #1
   2283c:	bgt	227f8 <__assert_fail@plt+0x10af4>
   22840:	ldr	r0, [fp, #-40]	; 0xffffffd8
   22844:	bl	1a22c <__assert_fail@plt+0x8528>
   22848:	add	r0, sp, #28
   2284c:	bl	26a3c <__assert_fail@plt+0x14d38>
   22850:	mov	r0, r9
   22854:	bl	26a58 <__assert_fail@plt+0x14d54>
   22858:	mov	r0, #1
   2285c:	sub	sp, fp, #28
   22860:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   22864:	ldr	r0, [fp, #-40]	; 0xffffffd8
   22868:	bl	1a22c <__assert_fail@plt+0x8528>
   2286c:	add	r0, sp, #28
   22870:	bl	26a3c <__assert_fail@plt+0x14d38>
   22874:	mov	r0, r9
   22878:	bl	26a58 <__assert_fail@plt+0x14d54>
   2287c:	mov	r0, #0
   22880:	sub	sp, fp, #28
   22884:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   22888:	ldr	r0, [fp, #-40]	; 0xffffffd8
   2288c:	bl	1a22c <__assert_fail@plt+0x8528>
   22890:	add	r0, sp, #28
   22894:	bl	26a3c <__assert_fail@plt+0x14d38>
   22898:	mov	r0, r9
   2289c:	bl	26a58 <__assert_fail@plt+0x14d54>
   228a0:	mov	r0, #12
   228a4:	sub	sp, fp, #28
   228a8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   228ac:	push	{r4, sl, fp, lr}
   228b0:	add	fp, sp, #8
   228b4:	mov	r4, r0
   228b8:	bl	22584 <__assert_fail@plt+0x10880>
   228bc:	ldr	r0, [r4, #132]	; 0x84
   228c0:	bl	1a22c <__assert_fail@plt+0x8528>
   228c4:	ldr	r0, [r4, #116]	; 0x74
   228c8:	pop	{r4, sl, fp, lr}
   228cc:	b	1a22c <__assert_fail@plt+0x8528>
   228d0:	push	{r4, r5, fp, lr}
   228d4:	add	fp, sp, #8
   228d8:	mov	r4, r0
   228dc:	cmn	r1, #1
   228e0:	ldrle	r0, [r4, #60]	; 0x3c
   228e4:	pople	{r4, r5, fp, pc}
   228e8:	ldr	r0, [r4, #48]	; 0x30
   228ec:	cmp	r0, r1
   228f0:	beq	22990 <__assert_fail@plt+0x10c8c>
   228f4:	ldr	r0, [r4, #80]	; 0x50
   228f8:	cmp	r0, #2
   228fc:	blt	22950 <__assert_fail@plt+0x10c4c>
   22900:	ldr	r0, [r4, #8]
   22904:	b	2291c <__assert_fail@plt+0x10c18>
   22908:	sub	r2, r1, #1
   2290c:	cmp	r1, #0
   22910:	mov	r1, r2
   22914:	ldrle	r0, [r4, #60]	; 0x3c
   22918:	pople	{r4, r5, fp, pc}
   2291c:	ldr	r5, [r0, r1, lsl #2]
   22920:	cmn	r5, #1
   22924:	beq	22908 <__assert_fail@plt+0x10c04>
   22928:	ldrb	r0, [r4, #78]	; 0x4e
   2292c:	cmp	r0, #0
   22930:	beq	22974 <__assert_fail@plt+0x10c70>
   22934:	mov	r0, r5
   22938:	bl	11b30 <iswalnum@plt>
   2293c:	mov	r1, r0
   22940:	mov	r0, #1
   22944:	cmp	r5, #95	; 0x5f
   22948:	bne	2296c <__assert_fail@plt+0x10c68>
   2294c:	b	2298c <__assert_fail@plt+0x10c88>
   22950:	ldr	r2, [r4, #4]
   22954:	ldr	r0, [r4, #68]	; 0x44
   22958:	ldrb	r5, [r2, r1]
   2295c:	mov	r1, r5
   22960:	bl	22a48 <__assert_fail@plt+0x10d44>
   22964:	mov	r1, r0
   22968:	mov	r0, #1
   2296c:	cmp	r1, #0
   22970:	bne	2298c <__assert_fail@plt+0x10c88>
   22974:	mov	r0, #0
   22978:	cmp	r5, #10
   2297c:	popne	{r4, r5, fp, pc}
   22980:	ldrb	r0, [r4, #77]	; 0x4d
   22984:	cmp	r0, #0
   22988:	movwne	r0, #2
   2298c:	pop	{r4, r5, fp, pc}
   22990:	and	r0, r2, #2
   22994:	eor	r0, r0, #10
   22998:	pop	{r4, r5, fp, pc}
   2299c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   229a0:	add	fp, sp, #28
   229a4:	sub	sp, sp, #12
   229a8:	str	r2, [sp, #4]
   229ac:	mov	sl, r1
   229b0:	mov	r7, r0
   229b4:	ldr	r0, [r0, #24]
   229b8:	ldr	r1, [r7, #32]
   229bc:	add	r5, r1, r0
   229c0:	mvn	r1, #0
   229c4:	cmp	r5, sl
   229c8:	bge	22a34 <__assert_fail@plt+0x10d30>
   229cc:	add	r4, r7, #16
   229d0:	b	229f4 <__assert_fail@plt+0x10cf0>
   229d4:	mov	r1, #0
   229d8:	cmp	r6, #0
   229dc:	cmpne	r0, #0
   229e0:	ldrne	r0, [r7]
   229e4:	ldrbne	r1, [r0, r5]
   229e8:	stm	r4, {r8, r9}
   229ec:	mov	r0, #1
   229f0:	b	22a28 <__assert_fail@plt+0x10d24>
   229f4:	ldr	r0, [r7]
   229f8:	ldr	r2, [r7, #44]	; 0x2c
   229fc:	add	r1, r0, r5
   22a00:	sub	r6, r2, r5
   22a04:	ldm	r4, {r8, r9}
   22a08:	add	r0, sp, #8
   22a0c:	mov	r2, r6
   22a10:	mov	r3, r4
   22a14:	bl	1a328 <__assert_fail@plt+0x8624>
   22a18:	sub	r1, r0, #1
   22a1c:	cmn	r1, #3
   22a20:	bcs	229d4 <__assert_fail@plt+0x10cd0>
   22a24:	ldr	r1, [sp, #8]
   22a28:	add	r5, r0, r5
   22a2c:	cmp	r5, sl
   22a30:	blt	229f4 <__assert_fail@plt+0x10cf0>
   22a34:	ldr	r0, [sp, #4]
   22a38:	str	r1, [r0]
   22a3c:	mov	r0, r5
   22a40:	sub	sp, fp, #28
   22a44:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   22a48:	asr	r2, r1, #31
   22a4c:	add	r2, r1, r2, lsr #27
   22a50:	asr	r2, r2, #5
   22a54:	ldr	r0, [r0, r2, lsl #2]
   22a58:	and	r1, r1, #31
   22a5c:	mov	r2, #1
   22a60:	and	r0, r0, r2, lsl r1
   22a64:	cmp	r0, #0
   22a68:	movwne	r0, #1
   22a6c:	bx	lr
   22a70:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   22a74:	add	fp, sp, #24
   22a78:	mov	r6, r0
   22a7c:	ldr	r0, [r1, #4]
   22a80:	cmp	r0, #1
   22a84:	blt	22af4 <__assert_fail@plt+0x10df0>
   22a88:	mov	r8, r2
   22a8c:	mov	r5, r1
   22a90:	ldr	r7, [r6, #84]	; 0x54
   22a94:	mov	r4, #0
   22a98:	mov	r9, #1
   22a9c:	ldr	r0, [r5, #8]
   22aa0:	ldr	r1, [r0, r4, lsl #2]
   22aa4:	ldr	r0, [r7]
   22aa8:	add	r2, r0, r1, lsl #3
   22aac:	ldrb	r2, [r2, #4]
   22ab0:	cmp	r2, #8
   22ab4:	bne	22ae4 <__assert_fail@plt+0x10de0>
   22ab8:	ldr	r0, [r0, r1, lsl #3]
   22abc:	cmp	r0, #31
   22ac0:	bgt	22ae4 <__assert_fail@plt+0x10de0>
   22ac4:	ldr	r2, [r7, #80]	; 0x50
   22ac8:	tst	r2, r9, lsl r0
   22acc:	beq	22ae4 <__assert_fail@plt+0x10de0>
   22ad0:	mov	r0, r6
   22ad4:	mov	r2, r8
   22ad8:	bl	23138 <__assert_fail@plt+0x11434>
   22adc:	cmp	r0, #0
   22ae0:	popne	{r4, r5, r6, r7, r8, r9, fp, pc}
   22ae4:	add	r4, r4, #1
   22ae8:	ldr	r0, [r5, #4]
   22aec:	cmp	r4, r0
   22af0:	blt	22a9c <__assert_fail@plt+0x10d98>
   22af4:	mov	r0, #0
   22af8:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   22afc:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   22b00:	add	fp, sp, #28
   22b04:	sub	sp, sp, #52	; 0x34
   22b08:	mov	r5, r0
   22b0c:	ldr	r0, [r1, #4]
   22b10:	cmp	r0, #1
   22b14:	blt	22dd4 <__assert_fail@plt+0x110d0>
   22b18:	mov	r8, r1
   22b1c:	ldr	r9, [r5, #84]	; 0x54
   22b20:	ldr	r0, [r5, #40]	; 0x28
   22b24:	str	r0, [sp, #32]
   22b28:	mov	sl, #0
   22b2c:	str	r1, [sp, #4]
   22b30:	str	r9, [sp, #16]
   22b34:	ldr	r0, [r8, #8]
   22b38:	ldr	r4, [r0, sl, lsl #2]
   22b3c:	ldr	r0, [r9]
   22b40:	add	r0, r0, r4, lsl #3
   22b44:	ldr	r6, [r0, #4]
   22b48:	uxtb	r0, r6
   22b4c:	cmp	r0, #4
   22b50:	bne	22dc4 <__assert_fail@plt+0x110c0>
   22b54:	movw	r0, #65280	; 0xff00
   22b58:	movt	r0, #3
   22b5c:	tst	r6, r0
   22b60:	beq	22bb4 <__assert_fail@plt+0x10eb0>
   22b64:	ldr	r2, [r5, #88]	; 0x58
   22b68:	mov	r0, r5
   22b6c:	ldr	r1, [sp, #32]
   22b70:	bl	228d0 <__assert_fail@plt+0x10bcc>
   22b74:	and	r1, r0, #1
   22b78:	tst	r6, #1024	; 0x400
   22b7c:	beq	22b88 <__assert_fail@plt+0x10e84>
   22b80:	cmp	r1, #0
   22b84:	beq	22dc4 <__assert_fail@plt+0x110c0>
   22b88:	tst	r6, #2048	; 0x800
   22b8c:	cmpne	r1, #0
   22b90:	bne	22dc4 <__assert_fail@plt+0x110c0>
   22b94:	tst	r6, #8192	; 0x2000
   22b98:	beq	22ba4 <__assert_fail@plt+0x10ea0>
   22b9c:	ands	r1, r0, #2
   22ba0:	beq	22dc4 <__assert_fail@plt+0x110c0>
   22ba4:	tst	r6, #32768	; 0x8000
   22ba8:	beq	22bb4 <__assert_fail@plt+0x10eb0>
   22bac:	ands	r0, r0, #8
   22bb0:	beq	22dc4 <__assert_fail@plt+0x110c0>
   22bb4:	ldr	r6, [r5, #108]	; 0x6c
   22bb8:	mov	r0, r5
   22bbc:	mov	r1, r4
   22bc0:	ldr	r2, [sp, #32]
   22bc4:	bl	231c4 <__assert_fail@plt+0x114c0>
   22bc8:	str	r0, [fp, #-32]	; 0xffffffe0
   22bcc:	cmp	r0, #0
   22bd0:	bne	22ddc <__assert_fail@plt+0x110d8>
   22bd4:	ldr	r0, [r5, #108]	; 0x6c
   22bd8:	cmp	r6, r0
   22bdc:	bge	22dc4 <__assert_fail@plt+0x110c0>
   22be0:	add	r0, r6, r6, lsl #1
   22be4:	lsl	r7, r0, #3
   22be8:	str	r4, [sp, #8]
   22bec:	ldr	r0, [r5, #116]	; 0x74
   22bf0:	ldr	r1, [r0, r7]
   22bf4:	cmp	r1, r4
   22bf8:	bne	22db0 <__assert_fail@plt+0x110ac>
   22bfc:	add	r0, r0, r7
   22c00:	ldr	r1, [r0, #4]
   22c04:	ldr	r2, [sp, #32]
   22c08:	cmp	r1, r2
   22c0c:	bne	22db0 <__assert_fail@plt+0x110ac>
   22c10:	ldr	r2, [r0, #8]
   22c14:	ldr	r3, [r0, #12]
   22c18:	ldr	r0, [r9, #24]
   22c1c:	str	r0, [sp, #28]
   22c20:	cmp	r3, r2
   22c24:	bne	22c3c <__assert_fail@plt+0x10f38>
   22c28:	ldr	r0, [r9, #20]
   22c2c:	add	r1, r4, r4, lsl #1
   22c30:	add	r0, r0, r1, lsl #2
   22c34:	ldr	r0, [r0, #8]
   22c38:	b	22c44 <__assert_fail@plt+0x10f40>
   22c3c:	ldr	r0, [r9, #12]
   22c40:	add	r0, r0, r4, lsl #2
   22c44:	ldr	r0, [r0]
   22c48:	add	r9, r0, r0, lsl #1
   22c4c:	ldr	r4, [sp, #32]
   22c50:	str	r3, [sp, #20]
   22c54:	add	r0, r3, r4
   22c58:	str	r2, [sp, #24]
   22c5c:	sub	r8, r0, r2
   22c60:	sub	r1, r8, #1
   22c64:	ldr	r2, [r5, #88]	; 0x58
   22c68:	mov	r0, r5
   22c6c:	bl	228d0 <__assert_fail@plt+0x10bcc>
   22c70:	mov	r3, r0
   22c74:	ldr	r0, [r5, #100]	; 0x64
   22c78:	ldr	r1, [r0, r4, lsl #2]
   22c7c:	ldr	r0, [r0, r8, lsl #2]
   22c80:	cmp	r1, #0
   22c84:	ldrne	r1, [r1, #8]
   22c88:	moveq	r1, #0
   22c8c:	str	r1, [sp, #12]
   22c90:	add	r4, sp, #36	; 0x24
   22c94:	ldr	r1, [sp, #28]
   22c98:	add	r2, r1, r9, lsl #2
   22c9c:	cmp	r0, #0
   22ca0:	str	r2, [sp, #28]
   22ca4:	beq	22d14 <__assert_fail@plt+0x11010>
   22ca8:	mov	r9, r3
   22cac:	ldr	r1, [r0, #40]	; 0x28
   22cb0:	mov	r0, r4
   22cb4:	bl	23574 <__assert_fail@plt+0x11870>
   22cb8:	str	r0, [fp, #-32]	; 0xffffffe0
   22cbc:	cmp	r0, #0
   22cc0:	ldr	r1, [sp, #16]
   22cc4:	bne	22de8 <__assert_fail@plt+0x110e4>
   22cc8:	sub	r0, fp, #32
   22ccc:	mov	r2, r4
   22cd0:	mov	r3, r9
   22cd4:	bl	211e0 <__assert_fail@plt+0xf4dc>
   22cd8:	ldr	r1, [r5, #100]	; 0x64
   22cdc:	str	r0, [r1, r8, lsl #2]
   22ce0:	ldr	r0, [sp, #44]	; 0x2c
   22ce4:	bl	1a22c <__assert_fail@plt+0x8528>
   22ce8:	ldr	r0, [r5, #100]	; 0x64
   22cec:	ldr	r0, [r0, r8, lsl #2]
   22cf0:	cmp	r0, #0
   22cf4:	bne	22d04 <__assert_fail@plt+0x11000>
   22cf8:	ldr	r0, [fp, #-32]	; 0xffffffe0
   22cfc:	cmp	r0, #0
   22d00:	bne	22ddc <__assert_fail@plt+0x110d8>
   22d04:	ldr	r8, [sp, #4]
   22d08:	ldr	r4, [sp, #8]
   22d0c:	ldr	r9, [sp, #16]
   22d10:	b	22d50 <__assert_fail@plt+0x1104c>
   22d14:	sub	r0, fp, #32
   22d18:	ldr	r9, [sp, #16]
   22d1c:	mov	r1, r9
   22d20:	bl	211e0 <__assert_fail@plt+0xf4dc>
   22d24:	ldr	r1, [r5, #100]	; 0x64
   22d28:	str	r0, [r1, r8, lsl #2]
   22d2c:	ldr	r0, [r5, #100]	; 0x64
   22d30:	ldr	r0, [r0, r8, lsl #2]
   22d34:	cmp	r0, #0
   22d38:	ldr	r8, [sp, #4]
   22d3c:	ldr	r4, [sp, #8]
   22d40:	bne	22d50 <__assert_fail@plt+0x1104c>
   22d44:	ldr	r0, [fp, #-32]	; 0xffffffe0
   22d48:	cmp	r0, #0
   22d4c:	bne	22ddc <__assert_fail@plt+0x110d8>
   22d50:	ldr	r0, [sp, #24]
   22d54:	ldr	r1, [sp, #20]
   22d58:	cmp	r1, r0
   22d5c:	bne	22db0 <__assert_fail@plt+0x110ac>
   22d60:	ldr	r0, [r5, #100]	; 0x64
   22d64:	ldr	r1, [sp, #32]
   22d68:	ldr	r0, [r0, r1, lsl #2]
   22d6c:	ldr	r0, [r0, #8]
   22d70:	ldr	r1, [sp, #12]
   22d74:	cmp	r0, r1
   22d78:	ble	22db0 <__assert_fail@plt+0x110ac>
   22d7c:	mov	r0, r5
   22d80:	ldr	r1, [sp, #28]
   22d84:	ldr	r2, [sp, #32]
   22d88:	bl	22a70 <__assert_fail@plt+0x10d6c>
   22d8c:	str	r0, [fp, #-32]	; 0xffffffe0
   22d90:	cmp	r0, #0
   22d94:	bne	22ddc <__assert_fail@plt+0x110d8>
   22d98:	mov	r0, r5
   22d9c:	ldr	r1, [sp, #28]
   22da0:	bl	22afc <__assert_fail@plt+0x10df8>
   22da4:	str	r0, [fp, #-32]	; 0xffffffe0
   22da8:	cmp	r0, #0
   22dac:	bne	22ddc <__assert_fail@plt+0x110d8>
   22db0:	add	r7, r7, #24
   22db4:	add	r6, r6, #1
   22db8:	ldr	r0, [r5, #108]	; 0x6c
   22dbc:	cmp	r6, r0
   22dc0:	blt	22bec <__assert_fail@plt+0x10ee8>
   22dc4:	ldr	r0, [r8, #4]
   22dc8:	add	sl, sl, #1
   22dcc:	cmp	sl, r0
   22dd0:	blt	22b34 <__assert_fail@plt+0x10e30>
   22dd4:	mov	r0, #0
   22dd8:	str	r0, [fp, #-32]	; 0xffffffe0
   22ddc:	ldr	r0, [fp, #-32]	; 0xffffffe0
   22de0:	sub	sp, fp, #28
   22de4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   22de8:	ldr	r0, [sp, #44]	; 0x2c
   22dec:	bl	1a22c <__assert_fail@plt+0x8528>
   22df0:	b	22ddc <__assert_fail@plt+0x110d8>
   22df4:	push	{r4, r5, fp, lr}
   22df8:	add	fp, sp, #8
   22dfc:	mov	r4, r0
   22e00:	ldr	r0, [r0, #36]	; 0x24
   22e04:	mov	r5, #12
   22e08:	cmn	r0, #-536870910	; 0xe0000002
   22e0c:	bhi	22ec0 <__assert_fail@plt+0x111bc>
   22e10:	ldr	r2, [r4, #48]	; 0x30
   22e14:	cmp	r2, r0, lsl #1
   22e18:	lslge	r2, r0, #1
   22e1c:	cmp	r2, r1
   22e20:	movle	r2, r1
   22e24:	mov	r0, r4
   22e28:	mov	r1, r2
   22e2c:	bl	1c5f0 <__assert_fail@plt+0xa8ec>
   22e30:	cmp	r0, #0
   22e34:	popne	{r4, r5, fp, pc}
   22e38:	ldr	r0, [r4, #100]	; 0x64
   22e3c:	cmp	r0, #0
   22e40:	beq	22e60 <__assert_fail@plt+0x1115c>
   22e44:	ldr	r1, [r4, #36]	; 0x24
   22e48:	mov	r2, #4
   22e4c:	add	r1, r2, r1, lsl #2
   22e50:	bl	1a388 <__assert_fail@plt+0x8684>
   22e54:	cmp	r0, #0
   22e58:	beq	22ec0 <__assert_fail@plt+0x111bc>
   22e5c:	str	r0, [r4, #100]	; 0x64
   22e60:	ldr	r0, [r4, #80]	; 0x50
   22e64:	ldrb	r1, [r4, #72]	; 0x48
   22e68:	cmp	r1, #0
   22e6c:	beq	22e8c <__assert_fail@plt+0x11188>
   22e70:	cmp	r0, #2
   22e74:	blt	22ea0 <__assert_fail@plt+0x1119c>
   22e78:	mov	r0, r4
   22e7c:	bl	1c694 <__assert_fail@plt+0xa990>
   22e80:	cmp	r0, #0
   22e84:	popne	{r4, r5, fp, pc}
   22e88:	b	22ebc <__assert_fail@plt+0x111b8>
   22e8c:	cmp	r0, #2
   22e90:	blt	22eac <__assert_fail@plt+0x111a8>
   22e94:	mov	r0, r4
   22e98:	bl	1ccc8 <__assert_fail@plt+0xafc4>
   22e9c:	b	22ebc <__assert_fail@plt+0x111b8>
   22ea0:	mov	r0, r4
   22ea4:	bl	1cc5c <__assert_fail@plt+0xaf58>
   22ea8:	b	22ebc <__assert_fail@plt+0x111b8>
   22eac:	ldr	r0, [r4, #64]	; 0x40
   22eb0:	cmp	r0, #0
   22eb4:	movne	r0, r4
   22eb8:	blne	1ce58 <__assert_fail@plt+0xb154>
   22ebc:	mov	r5, #0
   22ec0:	mov	r0, r5
   22ec4:	pop	{r4, r5, fp, pc}
   22ec8:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   22ecc:	add	fp, sp, #24
   22ed0:	mov	r6, r2
   22ed4:	mov	r4, r1
   22ed8:	mov	r5, r0
   22edc:	ldrb	r0, [r2, #52]	; 0x34
   22ee0:	tst	r0, #32
   22ee4:	bne	22f5c <__assert_fail@plt+0x11258>
   22ee8:	ldr	r0, [r4, #4]
   22eec:	ldr	r1, [r4, #40]	; 0x28
   22ef0:	add	r2, r1, #1
   22ef4:	str	r2, [r4, #40]	; 0x28
   22ef8:	ldrb	r7, [r0, r1]
   22efc:	ldr	r0, [r6, #44]	; 0x2c
   22f00:	cmp	r0, #0
   22f04:	ldrne	r0, [r0, r7, lsl #2]
   22f08:	popne	{r4, r5, r6, r7, r8, sl, fp, pc}
   22f0c:	ldr	r8, [r6, #48]	; 0x30
   22f10:	cmp	r8, #0
   22f14:	bne	22f3c <__assert_fail@plt+0x11238>
   22f18:	ldr	r0, [r4, #84]	; 0x54
   22f1c:	mov	r1, r6
   22f20:	bl	24d20 <__assert_fail@plt+0x1301c>
   22f24:	cmp	r0, #0
   22f28:	bne	22efc <__assert_fail@plt+0x111f8>
   22f2c:	mov	r0, #12
   22f30:	str	r0, [r5]
   22f34:	mov	r0, #0
   22f38:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   22f3c:	ldr	r0, [r4, #40]	; 0x28
   22f40:	ldr	r2, [r4, #88]	; 0x58
   22f44:	sub	r1, r0, #1
   22f48:	mov	r0, r4
   22f4c:	bl	228d0 <__assert_fail@plt+0x10bcc>
   22f50:	bfi	r7, r0, #8, #1
   22f54:	ldr	r0, [r8, r7, lsl #2]
   22f58:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   22f5c:	mov	r0, r4
   22f60:	mov	r1, r6
   22f64:	bl	24b5c <__assert_fail@plt+0x12e58>
   22f68:	str	r0, [r5]
   22f6c:	cmp	r0, #0
   22f70:	beq	22ee8 <__assert_fail@plt+0x111e4>
   22f74:	b	22f34 <__assert_fail@plt+0x11230>
   22f78:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   22f7c:	add	fp, sp, #24
   22f80:	sub	sp, sp, #16
   22f84:	mov	r7, r2
   22f88:	mov	r4, r1
   22f8c:	mov	r8, r0
   22f90:	ldr	r5, [r1, #40]	; 0x28
   22f94:	ldr	r6, [r1, #84]	; 0x54
   22f98:	ldr	r0, [r1, #100]	; 0x64
   22f9c:	ldr	r1, [r1, #104]	; 0x68
   22fa0:	cmp	r5, r1
   22fa4:	ble	22fb4 <__assert_fail@plt+0x112b0>
   22fa8:	str	r7, [r0, r5, lsl #2]
   22fac:	str	r5, [r4, #104]	; 0x68
   22fb0:	b	23050 <__assert_fail@plt+0x1134c>
   22fb4:	ldr	r1, [r0, r5, lsl #2]
   22fb8:	cmp	r1, #0
   22fbc:	beq	22ff0 <__assert_fail@plt+0x112ec>
   22fc0:	ldr	r0, [r0, r5, lsl #2]
   22fc4:	ldr	r2, [r0, #40]	; 0x28
   22fc8:	cmp	r7, #0
   22fcc:	beq	22ff8 <__assert_fail@plt+0x112f4>
   22fd0:	ldr	r9, [r7, #40]	; 0x28
   22fd4:	mov	r0, sp
   22fd8:	mov	r1, r9
   22fdc:	bl	23574 <__assert_fail@plt+0x11870>
   22fe0:	str	r0, [r8]
   22fe4:	cmp	r0, #0
   22fe8:	beq	2300c <__assert_fail@plt+0x11308>
   22fec:	b	230bc <__assert_fail@plt+0x113b8>
   22ff0:	str	r7, [r0, r5, lsl #2]
   22ff4:	b	23050 <__assert_fail@plt+0x1134c>
   22ff8:	vldr	d16, [r2]
   22ffc:	ldr	r0, [r2, #8]
   23000:	str	r0, [sp, #8]
   23004:	vstr	d16, [sp]
   23008:	mov	r9, #0
   2300c:	ldr	r0, [r4, #40]	; 0x28
   23010:	ldr	r2, [r4, #88]	; 0x58
   23014:	sub	r1, r0, #1
   23018:	mov	r0, r4
   2301c:	bl	228d0 <__assert_fail@plt+0x10bcc>
   23020:	mov	r3, r0
   23024:	mov	r2, sp
   23028:	mov	r0, r8
   2302c:	mov	r1, r6
   23030:	bl	211e0 <__assert_fail@plt+0xf4dc>
   23034:	mov	r7, r0
   23038:	ldr	r0, [r4, #100]	; 0x64
   2303c:	str	r7, [r0, r5, lsl #2]
   23040:	cmp	r9, #0
   23044:	beq	23050 <__assert_fail@plt+0x1134c>
   23048:	ldr	r0, [sp, #8]
   2304c:	bl	1a22c <__assert_fail@plt+0x8528>
   23050:	cmp	r7, #0
   23054:	ldrne	r0, [r6, #76]	; 0x4c
   23058:	cmpne	r0, #0
   2305c:	bne	2306c <__assert_fail@plt+0x11368>
   23060:	mov	r0, r7
   23064:	sub	sp, fp, #24
   23068:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   2306c:	add	r6, r7, #4
   23070:	mov	r0, r4
   23074:	mov	r1, r6
   23078:	mov	r2, r5
   2307c:	bl	22a70 <__assert_fail@plt+0x10d6c>
   23080:	str	r0, [r8]
   23084:	cmp	r0, #0
   23088:	bne	230bc <__assert_fail@plt+0x113b8>
   2308c:	ldrb	r0, [r7, #52]	; 0x34
   23090:	tst	r0, #64	; 0x40
   23094:	beq	23060 <__assert_fail@plt+0x1135c>
   23098:	mov	r0, r4
   2309c:	mov	r1, r6
   230a0:	bl	22afc <__assert_fail@plt+0x10df8>
   230a4:	str	r0, [r8]
   230a8:	cmp	r0, #0
   230ac:	mov	r7, #0
   230b0:	ldreq	r0, [r4, #100]	; 0x64
   230b4:	ldreq	r7, [r0, r5, lsl #2]
   230b8:	b	23060 <__assert_fail@plt+0x1135c>
   230bc:	mov	r7, #0
   230c0:	b	23060 <__assert_fail@plt+0x1135c>
   230c4:	push	{r4, r5, r6, sl, fp, lr}
   230c8:	add	fp, sp, #16
   230cc:	mov	r4, r1
   230d0:	mov	r6, r0
   230d4:	b	230f8 <__assert_fail@plt+0x113f4>
   230d8:	mov	r0, r6
   230dc:	mov	r1, r4
   230e0:	mov	r2, #0
   230e4:	bl	22f78 <__assert_fail@plt+0x11274>
   230e8:	cmp	r0, #0
   230ec:	ldreq	r1, [r6]
   230f0:	cmpeq	r1, #0
   230f4:	popne	{r4, r5, r6, sl, fp, pc}
   230f8:	ldr	r1, [r4, #40]	; 0x28
   230fc:	ldr	r0, [r4, #104]	; 0x68
   23100:	cmp	r1, r0
   23104:	movge	r0, #0
   23108:	popge	{r4, r5, r6, sl, fp, pc}
   2310c:	add	r2, r1, #1
   23110:	ldr	r3, [r4, #40]	; 0x28
   23114:	ldr	r5, [r4, #100]	; 0x64
   23118:	add	r3, r3, #1
   2311c:	str	r3, [r4, #40]	; 0x28
   23120:	add	r1, r5, r1, lsl #2
   23124:	ldr	r1, [r1, #4]
   23128:	cmp	r1, #0
   2312c:	mov	r1, r2
   23130:	beq	23100 <__assert_fail@plt+0x113fc>
   23134:	b	230d8 <__assert_fail@plt+0x113d4>
   23138:	push	{r4, r5, r6, r7, fp, lr}
   2313c:	add	fp, sp, #16
   23140:	mov	r4, r2
   23144:	mov	r6, r1
   23148:	mov	r5, r0
   2314c:	ldr	r0, [r0, #124]	; 0x7c
   23150:	ldr	r7, [r5, #128]	; 0x80
   23154:	cmp	r0, r7
   23158:	beq	231a0 <__assert_fail@plt+0x1149c>
   2315c:	mov	r0, #1
   23160:	mov	r1, #24
   23164:	bl	19f8c <__assert_fail@plt+0x8288>
   23168:	ldr	r1, [r5, #124]	; 0x7c
   2316c:	ldr	r2, [r5, #132]	; 0x84
   23170:	str	r0, [r2, r1, lsl #2]
   23174:	ldr	r0, [r5, #132]	; 0x84
   23178:	ldr	r0, [r0, r1, lsl #2]
   2317c:	cmp	r0, #0
   23180:	strne	r6, [r0, #4]
   23184:	addne	r1, r1, #1
   23188:	strne	r1, [r5, #124]	; 0x7c
   2318c:	strne	r4, [r0]
   23190:	movne	r0, #0
   23194:	popne	{r4, r5, r6, r7, fp, pc}
   23198:	mov	r0, #12
   2319c:	pop	{r4, r5, r6, r7, fp, pc}
   231a0:	ldr	r0, [r5, #132]	; 0x84
   231a4:	lsl	r1, r7, #3
   231a8:	bl	1a388 <__assert_fail@plt+0x8684>
   231ac:	cmp	r0, #0
   231b0:	beq	23198 <__assert_fail@plt+0x11494>
   231b4:	lsl	r1, r7, #1
   231b8:	str	r1, [r5, #128]	; 0x80
   231bc:	str	r0, [r5, #132]	; 0x84
   231c0:	b	2315c <__assert_fail@plt+0x11458>
   231c4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   231c8:	add	fp, sp, #28
   231cc:	sub	sp, sp, #52	; 0x34
   231d0:	str	r1, [sp, #36]	; 0x24
   231d4:	mov	r4, r0
   231d8:	ldr	r5, [r0, #4]
   231dc:	ldr	r6, [r0, #84]	; 0x54
   231e0:	str	r2, [fp, #-36]	; 0xffffffdc
   231e4:	mov	r1, r2
   231e8:	bl	237a4 <__assert_fail@plt+0x11aa0>
   231ec:	cmn	r0, #1
   231f0:	beq	23220 <__assert_fail@plt+0x1151c>
   231f4:	ldr	r1, [r4, #116]	; 0x74
   231f8:	add	r0, r0, r0, lsl #1
   231fc:	add	r0, r1, r0, lsl #3
   23200:	ldr	r2, [sp, #36]	; 0x24
   23204:	ldr	r1, [r0]
   23208:	cmp	r1, r2
   2320c:	beq	23554 <__assert_fail@plt+0x11850>
   23210:	ldrb	r1, [r0, #20]
   23214:	add	r0, r0, #24
   23218:	cmp	r1, #0
   2321c:	bne	23204 <__assert_fail@plt+0x11500>
   23220:	ldr	r0, [r4, #124]	; 0x7c
   23224:	cmp	r0, #1
   23228:	blt	23554 <__assert_fail@plt+0x11850>
   2322c:	mov	ip, r6
   23230:	ldr	r0, [r6]
   23234:	ldr	r1, [sp, #36]	; 0x24
   23238:	ldr	r2, [r0, r1, lsl #3]
   2323c:	mov	r6, #0
   23240:	str	r4, [sp, #28]
   23244:	mov	r3, r5
   23248:	str	ip, [sp, #24]
   2324c:	str	r2, [sp, #20]
   23250:	b	233fc <__assert_fail@plt+0x116f8>
   23254:	ldr	ip, [sp, #24]
   23258:	ldr	r2, [sp, #20]
   2325c:	b	2329c <__assert_fail@plt+0x11598>
   23260:	ldr	r0, [r4, #48]	; 0x30
   23264:	cmp	r6, r0
   23268:	bge	23540 <__assert_fail@plt+0x1183c>
   2326c:	mov	r9, r6
   23270:	add	r1, r6, #1
   23274:	mov	r0, r4
   23278:	bl	22df4 <__assert_fail@plt+0x110f0>
   2327c:	cmp	r0, #0
   23280:	bne	23564 <__assert_fail@plt+0x11860>
   23284:	ldr	r3, [r4, #4]
   23288:	ldr	r7, [sp, #32]
   2328c:	mov	r6, r9
   23290:	ldr	ip, [sp, #24]
   23294:	ldr	r2, [sp, #20]
   23298:	b	232b4 <__assert_fail@plt+0x115b0>
   2329c:	ldr	r0, [r7]
   232a0:	cmp	r5, r0
   232a4:	ble	232cc <__assert_fail@plt+0x115c8>
   232a8:	ldr	r0, [r4, #28]
   232ac:	cmp	r6, r0
   232b0:	bge	23260 <__assert_fail@plt+0x1155c>
   232b4:	ldrb	r0, [r3, r6]
   232b8:	add	r1, r3, r5
   232bc:	ldrb	r1, [r1, #-1]
   232c0:	cmp	r0, r1
   232c4:	bne	23540 <__assert_fail@plt+0x1183c>
   232c8:	add	r6, r6, #1
   232cc:	ldr	r0, [r4, #100]	; 0x64
   232d0:	ldr	r0, [r0, r5, lsl #2]
   232d4:	cmp	r0, #0
   232d8:	beq	233e0 <__assert_fail@plt+0x116dc>
   232dc:	mov	r9, r6
   232e0:	mov	sl, r3
   232e4:	add	r1, r0, #4
   232e8:	mov	r0, ip
   232ec:	mov	r3, #9
   232f0:	bl	2395c <__assert_fail@plt+0x11c58>
   232f4:	cmn	r0, #1
   232f8:	beq	233cc <__assert_fail@plt+0x116c8>
   232fc:	mov	r4, r0
   23300:	ldr	r1, [sp, #32]
   23304:	ldr	r0, [r1, #8]
   23308:	cmp	r0, #0
   2330c:	bne	23338 <__assert_fail@plt+0x11634>
   23310:	ldr	r0, [r1]
   23314:	sub	r0, r5, r0
   23318:	add	r1, r0, #1
   2331c:	mov	r8, #12
   23320:	mov	r0, #12
   23324:	bl	19f8c <__assert_fail@plt+0x8288>
   23328:	ldr	r1, [sp, #32]
   2332c:	str	r0, [r1, #8]
   23330:	cmp	r0, #0
   23334:	beq	23558 <__assert_fail@plt+0x11854>
   23338:	ldr	r3, [r1]
   2333c:	ldr	r2, [r1, #4]
   23340:	ldr	r1, [r1, #8]
   23344:	stm	sp, {r4, r5}
   23348:	mov	r0, #9
   2334c:	str	r0, [sp, #8]
   23350:	ldr	r0, [sp, #28]
   23354:	bl	239b0 <__assert_fail@plt+0x11cac>
   23358:	ldr	r7, [sp, #32]
   2335c:	cmp	r0, #1
   23360:	mov	r3, sl
   23364:	mov	r6, r9
   23368:	ldr	ip, [sp, #24]
   2336c:	ldr	r2, [sp, #20]
   23370:	beq	233e0 <__assert_fail@plt+0x116dc>
   23374:	mov	r8, r0
   23378:	cmp	r0, #0
   2337c:	bne	23558 <__assert_fail@plt+0x11854>
   23380:	mov	r0, r7
   23384:	mov	r1, r4
   23388:	mov	r2, r5
   2338c:	bl	23d84 <__assert_fail@plt+0x12080>
   23390:	cmp	r0, #0
   23394:	beq	2356c <__assert_fail@plt+0x11868>
   23398:	mov	r2, r0
   2339c:	ldr	r0, [fp, #-36]	; 0xffffffdc
   233a0:	str	r0, [sp]
   233a4:	ldr	r4, [sp, #28]
   233a8:	mov	r0, r4
   233ac:	mov	r1, r7
   233b0:	ldr	r3, [sp, #36]	; 0x24
   233b4:	bl	238c4 <__assert_fail@plt+0x11bc0>
   233b8:	cmp	r0, #1
   233bc:	bhi	23564 <__assert_fail@plt+0x11860>
   233c0:	ldr	r3, [r4, #4]
   233c4:	ldr	r7, [sp, #32]
   233c8:	b	233d4 <__assert_fail@plt+0x116d0>
   233cc:	ldr	r7, [sp, #32]
   233d0:	mov	r3, sl
   233d4:	mov	r6, r9
   233d8:	ldr	ip, [sp, #24]
   233dc:	ldr	r2, [sp, #20]
   233e0:	add	r1, r5, #1
   233e4:	ldr	r0, [fp, #-36]	; 0xffffffdc
   233e8:	cmp	r5, r0
   233ec:	mov	r5, r1
   233f0:	ldr	r4, [sp, #28]
   233f4:	blt	2329c <__assert_fail@plt+0x11598>
   233f8:	b	23540 <__assert_fail@plt+0x1183c>
   233fc:	ldr	r0, [r4, #132]	; 0x84
   23400:	ldr	r7, [r0, r6, lsl #2]
   23404:	ldr	r0, [r7, #4]
   23408:	ldr	r1, [ip]
   2340c:	ldr	r0, [r1, r0, lsl #3]
   23410:	cmp	r0, r2
   23414:	str	r6, [sp, #16]
   23418:	bne	23540 <__assert_fail@plt+0x1183c>
   2341c:	ldr	r5, [r7]
   23420:	ldr	r0, [r7, #16]
   23424:	cmp	r0, #1
   23428:	str	r7, [sp, #32]
   2342c:	mov	sl, #0
   23430:	blt	23440 <__assert_fail@plt+0x1173c>
   23434:	ldr	r6, [fp, #-36]	; 0xffffffdc
   23438:	mov	r9, r5
   2343c:	b	23474 <__assert_fail@plt+0x11770>
   23440:	ldr	r6, [fp, #-36]	; 0xffffffdc
   23444:	b	23518 <__assert_fail@plt+0x11814>
   23448:	ldr	r0, [r4, #48]	; 0x30
   2344c:	cmp	r1, r0
   23450:	bgt	23514 <__assert_fail@plt+0x11810>
   23454:	mov	r7, r6
   23458:	mov	r0, r4
   2345c:	bl	23830 <__assert_fail@plt+0x11b2c>
   23460:	cmp	r0, #0
   23464:	bne	23564 <__assert_fail@plt+0x11860>
   23468:	ldr	r3, [r4, #4]
   2346c:	mov	r6, r7
   23470:	b	234a4 <__assert_fail@plt+0x117a0>
   23474:	ldr	r0, [r7, #20]
   23478:	ldr	r2, [r0, sl, lsl #2]
   2347c:	ldr	r0, [r2, #4]
   23480:	str	r0, [fp, #-32]	; 0xffffffe0
   23484:	sub	r5, r0, r9
   23488:	cmp	r5, #1
   2348c:	blt	234d0 <__assert_fail@plt+0x117cc>
   23490:	add	r1, r5, r6
   23494:	ldr	r0, [r4, #28]
   23498:	cmp	r1, r0
   2349c:	str	r2, [sp, #40]	; 0x28
   234a0:	bgt	23448 <__assert_fail@plt+0x11744>
   234a4:	add	r0, r3, r6
   234a8:	add	r1, r3, r9
   234ac:	mov	r8, r6
   234b0:	mov	r2, r5
   234b4:	mov	r7, r3
   234b8:	bl	11974 <memcmp@plt>
   234bc:	mov	r3, r7
   234c0:	cmp	r0, #0
   234c4:	ldr	r7, [sp, #32]
   234c8:	ldr	r2, [sp, #40]	; 0x28
   234cc:	bne	23514 <__assert_fail@plt+0x11810>
   234d0:	ldr	r0, [fp, #-36]	; 0xffffffdc
   234d4:	str	r0, [sp]
   234d8:	mov	r0, r4
   234dc:	mov	r1, r7
   234e0:	ldr	r3, [sp, #36]	; 0x24
   234e4:	bl	238c4 <__assert_fail@plt+0x11bc0>
   234e8:	cmp	r0, #1
   234ec:	bhi	23564 <__assert_fail@plt+0x11860>
   234f0:	add	r6, r5, r6
   234f4:	add	sl, sl, #1
   234f8:	ldr	r3, [r4, #4]
   234fc:	ldr	r0, [r7, #16]
   23500:	cmp	sl, r0
   23504:	ldr	r5, [fp, #-32]	; 0xffffffe0
   23508:	mov	r9, r5
   2350c:	blt	23474 <__assert_fail@plt+0x11770>
   23510:	b	23518 <__assert_fail@plt+0x11814>
   23514:	mov	r5, r9
   23518:	ldr	r0, [r7, #16]
   2351c:	cmp	sl, r0
   23520:	blt	23538 <__assert_fail@plt+0x11834>
   23524:	cmp	sl, #0
   23528:	addne	r5, r5, #1
   2352c:	ldr	r0, [fp, #-36]	; 0xffffffdc
   23530:	cmp	r5, r0
   23534:	ble	23254 <__assert_fail@plt+0x11550>
   23538:	ldr	ip, [sp, #24]
   2353c:	ldr	r2, [sp, #20]
   23540:	ldr	r6, [sp, #16]
   23544:	add	r6, r6, #1
   23548:	ldr	r0, [r4, #124]	; 0x7c
   2354c:	cmp	r6, r0
   23550:	blt	233fc <__assert_fail@plt+0x116f8>
   23554:	mov	r8, #0
   23558:	mov	r0, r8
   2355c:	sub	sp, fp, #28
   23560:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   23564:	mov	r8, r0
   23568:	b	23558 <__assert_fail@plt+0x11854>
   2356c:	mov	r8, #12
   23570:	b	23558 <__assert_fail@plt+0x11854>
   23574:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   23578:	add	fp, sp, #28
   2357c:	sub	sp, sp, #4
   23580:	mov	sl, r2
   23584:	mov	r8, r0
   23588:	cmp	r1, #0
   2358c:	beq	235c4 <__assert_fail@plt+0x118c0>
   23590:	mov	r6, r1
   23594:	ldr	r0, [r1, #4]
   23598:	cmp	sl, #0
   2359c:	beq	235b0 <__assert_fail@plt+0x118ac>
   235a0:	cmp	r0, #1
   235a4:	ldrge	r1, [sl, #4]
   235a8:	cmpge	r1, #1
   235ac:	bge	23604 <__assert_fail@plt+0x11900>
   235b0:	cmp	r0, #1
   235b4:	blt	235c4 <__assert_fail@plt+0x118c0>
   235b8:	mov	r0, r8
   235bc:	mov	r1, r6
   235c0:	b	235e0 <__assert_fail@plt+0x118dc>
   235c4:	cmp	sl, #0
   235c8:	beq	235ec <__assert_fail@plt+0x118e8>
   235cc:	ldr	r0, [sl, #4]
   235d0:	cmp	r0, #1
   235d4:	blt	235ec <__assert_fail@plt+0x118e8>
   235d8:	mov	r0, r8
   235dc:	mov	r1, sl
   235e0:	sub	sp, fp, #28
   235e4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   235e8:	b	210f8 <__assert_fail@plt+0xf3f4>
   235ec:	mov	r0, #0
   235f0:	str	r0, [r8]
   235f4:	str	r0, [r8, #4]
   235f8:	str	r0, [r8, #8]
   235fc:	sub	sp, fp, #28
   23600:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   23604:	add	r0, r1, r0
   23608:	str	r0, [r8]
   2360c:	lsl	r0, r0, #2
   23610:	bl	1a2f8 <__assert_fail@plt+0x85f4>
   23614:	str	r0, [r8, #8]
   23618:	cmp	r0, #0
   2361c:	beq	23798 <__assert_fail@plt+0x11a94>
   23620:	ldr	r2, [sl, #4]
   23624:	mov	r4, #0
   23628:	cmp	r2, #0
   2362c:	mov	r0, #0
   23630:	movwgt	r0, #1
   23634:	ldr	r3, [r6, #4]
   23638:	cmp	r3, #1
   2363c:	blt	236fc <__assert_fail@plt+0x119f8>
   23640:	mov	r9, #0
   23644:	cmp	r2, #1
   23648:	blt	2370c <__assert_fail@plt+0x11a08>
   2364c:	mov	ip, #0
   23650:	mov	r0, #0
   23654:	mov	r4, ip
   23658:	mov	r7, r0
   2365c:	ldr	r0, [sl, #8]
   23660:	ldr	r1, [r0, r4, lsl #2]
   23664:	ldr	r0, [r6, #8]
   23668:	ldr	r5, [r0, r9, lsl #2]
   2366c:	cmp	r5, r1
   23670:	ble	236b0 <__assert_fail@plt+0x119ac>
   23674:	ldr	r0, [r8, #8]
   23678:	str	r1, [r0, r7, lsl #2]
   2367c:	ldr	r2, [sl, #4]
   23680:	add	r1, r4, #1
   23684:	cmp	r2, r1
   23688:	mov	r0, #0
   2368c:	movwgt	r0, #1
   23690:	ldr	r3, [r6, #4]
   23694:	cmp	r3, r9
   23698:	ble	23738 <__assert_fail@plt+0x11a34>
   2369c:	add	r7, r7, #1
   236a0:	cmp	r2, r1
   236a4:	mov	r4, r1
   236a8:	bgt	2365c <__assert_fail@plt+0x11958>
   236ac:	b	23710 <__assert_fail@plt+0x11a0c>
   236b0:	ldr	r0, [r8, #8]
   236b4:	str	r5, [r0, r7, lsl #2]
   236b8:	add	lr, r4, #1
   236bc:	cmp	r5, r1
   236c0:	mov	ip, r4
   236c4:	moveq	ip, lr
   236c8:	ldr	r2, [sl, #4]
   236cc:	cmp	r2, ip
   236d0:	mov	r0, #0
   236d4:	movwgt	r0, #1
   236d8:	add	r9, r9, #1
   236dc:	ldr	r3, [r6, #4]
   236e0:	cmp	r3, r9
   236e4:	ble	23780 <__assert_fail@plt+0x11a7c>
   236e8:	add	r0, r7, #1
   236ec:	cmp	r2, ip
   236f0:	bgt	23654 <__assert_fail@plt+0x11950>
   236f4:	add	r7, r7, #1
   236f8:	b	23710 <__assert_fail@plt+0x11a0c>
   236fc:	mov	r6, #0
   23700:	cmp	r0, #0
   23704:	bne	23748 <__assert_fail@plt+0x11a44>
   23708:	b	23770 <__assert_fail@plt+0x11a6c>
   2370c:	mov	r7, #0
   23710:	ldr	r0, [r8, #8]
   23714:	add	r0, r0, r7, lsl #2
   23718:	ldr	r1, [r6, #8]
   2371c:	add	r1, r1, r9, lsl #2
   23720:	sub	r2, r3, r9
   23724:	lsl	r2, r2, #2
   23728:	bl	1192c <memcpy@plt>
   2372c:	sub	r0, r7, r9
   23730:	ldr	r1, [r6, #4]
   23734:	b	2376c <__assert_fail@plt+0x11a68>
   23738:	add	r6, r7, #1
   2373c:	add	r4, r4, #1
   23740:	cmp	r0, #0
   23744:	beq	23770 <__assert_fail@plt+0x11a6c>
   23748:	ldr	r0, [r8, #8]
   2374c:	add	r0, r0, r6, lsl #2
   23750:	ldr	r1, [sl, #8]
   23754:	add	r1, r1, r4, lsl #2
   23758:	sub	r2, r2, r4
   2375c:	lsl	r2, r2, #2
   23760:	bl	1192c <memcpy@plt>
   23764:	sub	r0, r6, r4
   23768:	ldr	r1, [sl, #4]
   2376c:	add	r6, r0, r1
   23770:	str	r6, [r8, #4]
   23774:	mov	r0, #0
   23778:	sub	sp, fp, #28
   2377c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   23780:	cmp	r5, r1
   23784:	moveq	r4, lr
   23788:	add	r6, r7, #1
   2378c:	cmp	r0, #0
   23790:	bne	23748 <__assert_fail@plt+0x11a44>
   23794:	b	23770 <__assert_fail@plt+0x11a6c>
   23798:	mov	r0, #12
   2379c:	sub	sp, fp, #28
   237a0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   237a4:	push	{r4, r5, r6, r7, fp, lr}
   237a8:	add	fp, sp, #16
   237ac:	mov	ip, r0
   237b0:	ldr	lr, [r0, #108]	; 0x6c
   237b4:	cmp	lr, #1
   237b8:	blt	2381c <__assert_fail@plt+0x11b18>
   237bc:	ldr	r2, [ip, #116]	; 0x74
   237c0:	mov	r0, #0
   237c4:	mov	r3, #1
   237c8:	mov	r4, lr
   237cc:	add	r5, r0, r4
   237d0:	add	r5, r5, r5, lsr #31
   237d4:	asr	r6, r5, #1
   237d8:	add	r7, r6, r6, lsl #1
   237dc:	add	r7, r2, r7, lsl #3
   237e0:	ldr	r7, [r7, #4]
   237e4:	cmp	r7, r1
   237e8:	addlt	r0, r3, r5, asr #1
   237ec:	movge	r4, r6
   237f0:	cmp	r0, r4
   237f4:	blt	237cc <__assert_fail@plt+0x11ac8>
   237f8:	cmp	r0, lr
   237fc:	bge	23828 <__assert_fail@plt+0x11b24>
   23800:	ldr	r2, [ip, #116]	; 0x74
   23804:	add	r3, r0, r0, lsl #1
   23808:	add	r2, r2, r3, lsl #3
   2380c:	ldr	r2, [r2, #4]
   23810:	cmp	r2, r1
   23814:	mvnne	r0, #0
   23818:	pop	{r4, r5, r6, r7, fp, pc}
   2381c:	mov	r0, #0
   23820:	cmp	r0, lr
   23824:	blt	23800 <__assert_fail@plt+0x11afc>
   23828:	mvn	r0, #0
   2382c:	pop	{r4, r5, r6, r7, fp, pc}
   23830:	push	{r4, r5, r6, r7, fp, lr}
   23834:	add	fp, sp, #16
   23838:	mov	r4, r1
   2383c:	mov	r5, r0
   23840:	ldr	r0, [r0, #36]	; 0x24
   23844:	ldr	r7, [r5, #104]	; 0x68
   23848:	cmp	r0, r1
   2384c:	ldrle	r1, [r5, #48]	; 0x30
   23850:	cmple	r0, r1
   23854:	blt	238a4 <__assert_fail@plt+0x11ba0>
   23858:	ldr	r0, [r5, #28]
   2385c:	cmp	r0, r4
   23860:	ldrle	r1, [r5, #48]	; 0x30
   23864:	cmple	r0, r1
   23868:	blt	238a4 <__assert_fail@plt+0x11ba0>
   2386c:	mov	r6, #0
   23870:	cmp	r7, r4
   23874:	bge	238bc <__assert_fail@plt+0x11bb8>
   23878:	sub	r0, r4, r7
   2387c:	lsl	r2, r0, #2
   23880:	ldr	r0, [r5, #100]	; 0x64
   23884:	add	r0, r0, r7, lsl #2
   23888:	add	r0, r0, #4
   2388c:	mov	r6, #0
   23890:	mov	r1, #0
   23894:	bl	11b60 <memset@plt>
   23898:	str	r4, [r5, #104]	; 0x68
   2389c:	mov	r0, r6
   238a0:	pop	{r4, r5, r6, r7, fp, pc}
   238a4:	add	r1, r4, #1
   238a8:	mov	r0, r5
   238ac:	bl	22df4 <__assert_fail@plt+0x110f0>
   238b0:	mov	r6, r0
   238b4:	cmp	r0, #0
   238b8:	beq	2386c <__assert_fail@plt+0x11b68>
   238bc:	mov	r0, r6
   238c0:	pop	{r4, r5, r6, r7, fp, pc}
   238c4:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   238c8:	add	fp, sp, #24
   238cc:	sub	sp, sp, #16
   238d0:	mov	r7, r3
   238d4:	mov	r6, r2
   238d8:	mov	r8, r1
   238dc:	mov	r4, r0
   238e0:	ldr	r2, [r2]
   238e4:	ldr	r3, [r6, #4]
   238e8:	mov	r0, #8
   238ec:	str	r0, [sp, #8]
   238f0:	ldr	r5, [fp, #8]
   238f4:	str	r5, [sp, #4]
   238f8:	str	r7, [sp]
   238fc:	add	r1, r6, #8
   23900:	mov	r0, r4
   23904:	bl	239b0 <__assert_fail@plt+0x11cac>
   23908:	cmp	r0, #0
   2390c:	beq	23918 <__assert_fail@plt+0x11c14>
   23910:	sub	sp, fp, #24
   23914:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   23918:	ldr	r3, [r8]
   2391c:	ldr	r0, [r6, #4]
   23920:	str	r0, [sp]
   23924:	mov	r0, r4
   23928:	mov	r1, r7
   2392c:	mov	r2, r5
   23930:	bl	23e04 <__assert_fail@plt+0x12100>
   23934:	cmp	r0, #0
   23938:	bne	23910 <__assert_fail@plt+0x11c0c>
   2393c:	ldr	r0, [r6, #4]
   23940:	add	r0, r0, r5
   23944:	ldr	r1, [r8]
   23948:	sub	r1, r0, r1
   2394c:	mov	r0, r4
   23950:	sub	sp, fp, #24
   23954:	pop	{r4, r5, r6, r7, r8, sl, fp, lr}
   23958:	b	23830 <__assert_fail@plt+0x11b2c>
   2395c:	push	{r4, r5, fp, lr}
   23960:	add	fp, sp, #8
   23964:	ldr	r4, [r1, #4]
   23968:	cmp	r4, #1
   2396c:	blt	239a8 <__assert_fail@plt+0x11ca4>
   23970:	ldr	ip, [r0]
   23974:	ldr	lr, [r1, #8]
   23978:	mov	r4, #0
   2397c:	ldr	r0, [lr, r4, lsl #2]
   23980:	add	r5, ip, r0, lsl #3
   23984:	ldrb	r5, [r5, #4]
   23988:	cmp	r5, r3
   2398c:	ldreq	r5, [ip, r0, lsl #3]
   23990:	cmpeq	r5, r2
   23994:	popeq	{r4, r5, fp, pc}
   23998:	add	r4, r4, #1
   2399c:	ldr	r0, [r1, #4]
   239a0:	cmp	r4, r0
   239a4:	blt	2397c <__assert_fail@plt+0x11c78>
   239a8:	mvn	r0, #0
   239ac:	pop	{r4, r5, fp, pc}
   239b0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   239b4:	add	fp, sp, #28
   239b8:	sub	sp, sp, #44	; 0x2c
   239bc:	mov	sl, r3
   239c0:	mov	r8, r2
   239c4:	mov	r7, r1
   239c8:	mov	r4, r0
   239cc:	ldr	r1, [r0, #84]	; 0x54
   239d0:	mov	r0, #0
   239d4:	str	r0, [fp, #-32]	; 0xffffffe0
   239d8:	str	r1, [sp, #20]
   239dc:	ldr	r0, [r1]
   239e0:	ldr	r0, [r0, r2, lsl #3]
   239e4:	str	r0, [sp, #16]
   239e8:	ldr	r0, [r4, #120]	; 0x78
   239ec:	ldr	r1, [fp, #12]
   239f0:	add	r0, r0, r1
   239f4:	ldr	r5, [r7, #4]
   239f8:	cmp	r5, r0
   239fc:	ble	23d1c <__assert_fail@plt+0x12018>
   23a00:	ldr	r0, [r4, #40]	; 0x28
   23a04:	str	r0, [sp, #12]
   23a08:	ldr	r2, [r4, #88]	; 0x58
   23a0c:	ldr	r0, [r4, #100]	; 0x64
   23a10:	str	r0, [sp, #8]
   23a14:	ldr	r6, [r7]
   23a18:	ldr	r0, [r7, #8]
   23a1c:	str	r0, [r4, #100]	; 0x64
   23a20:	cmp	r6, #0
   23a24:	moveq	r6, sl
   23a28:	str	r6, [r4, #40]	; 0x28
   23a2c:	sub	r1, r6, #1
   23a30:	mov	r0, r4
   23a34:	bl	228d0 <__assert_fail@plt+0x10bcc>
   23a38:	mov	r9, r0
   23a3c:	cmp	r6, sl
   23a40:	mov	r5, r4
   23a44:	bne	23a84 <__assert_fail@plt+0x11d80>
   23a48:	add	r0, sp, #24
   23a4c:	mov	r1, r8
   23a50:	bl	207e0 <__assert_fail@plt+0xeadc>
   23a54:	str	r0, [fp, #-32]	; 0xffffffe0
   23a58:	cmp	r0, #0
   23a5c:	bne	23d7c <__assert_fail@plt+0x12078>
   23a60:	add	r1, sp, #24
   23a64:	ldr	r0, [sp, #20]
   23a68:	ldr	r2, [sp, #16]
   23a6c:	ldr	r3, [fp, #16]
   23a70:	bl	23f00 <__assert_fail@plt+0x121fc>
   23a74:	str	r0, [fp, #-32]	; 0xffffffe0
   23a78:	cmp	r0, #0
   23a7c:	beq	23aec <__assert_fail@plt+0x11de8>
   23a80:	b	23d0c <__assert_fail@plt+0x12008>
   23a84:	ldr	r0, [r5, #100]	; 0x64
   23a88:	ldr	r8, [r0, r6, lsl #2]
   23a8c:	cmp	r8, #0
   23a90:	beq	23ab4 <__assert_fail@plt+0x11db0>
   23a94:	ldrb	r0, [r8, #52]	; 0x34
   23a98:	tst	r0, #64	; 0x40
   23a9c:	bne	23ac8 <__assert_fail@plt+0x11dc4>
   23aa0:	mov	r0, #0
   23aa4:	str	r0, [sp, #28]
   23aa8:	str	r0, [sp, #24]
   23aac:	str	r0, [sp, #32]
   23ab0:	b	23ae0 <__assert_fail@plt+0x11ddc>
   23ab4:	mov	r8, #0
   23ab8:	str	r8, [sp, #28]
   23abc:	str	r8, [sp, #24]
   23ac0:	str	r8, [sp, #32]
   23ac4:	b	23b54 <__assert_fail@plt+0x11e50>
   23ac8:	add	r1, r8, #4
   23acc:	add	r0, sp, #24
   23ad0:	bl	210f8 <__assert_fail@plt+0xf3f4>
   23ad4:	str	r0, [fp, #-32]	; 0xffffffe0
   23ad8:	cmp	r0, #0
   23adc:	bne	23d7c <__assert_fail@plt+0x12078>
   23ae0:	ldrb	r0, [r8, #52]	; 0x34
   23ae4:	tst	r0, #64	; 0x40
   23ae8:	beq	23b54 <__assert_fail@plt+0x11e50>
   23aec:	ldr	r0, [sp, #28]
   23af0:	cmp	r0, #0
   23af4:	beq	23b20 <__assert_fail@plt+0x11e1c>
   23af8:	ldr	r0, [fp, #16]
   23afc:	str	r0, [sp]
   23b00:	add	r1, sp, #24
   23b04:	mov	r0, r5
   23b08:	mov	r2, r6
   23b0c:	ldr	r3, [sp, #16]
   23b10:	bl	23ff8 <__assert_fail@plt+0x122f4>
   23b14:	str	r0, [fp, #-32]	; 0xffffffe0
   23b18:	cmp	r0, #0
   23b1c:	bne	23d0c <__assert_fail@plt+0x12008>
   23b20:	sub	r0, fp, #32
   23b24:	add	r2, sp, #24
   23b28:	ldr	r1, [sp, #20]
   23b2c:	mov	r3, r9
   23b30:	bl	211e0 <__assert_fail@plt+0xf4dc>
   23b34:	mov	r8, r0
   23b38:	cmp	r0, #0
   23b3c:	bne	23b4c <__assert_fail@plt+0x11e48>
   23b40:	ldr	r0, [fp, #-32]	; 0xffffffe0
   23b44:	cmp	r0, #0
   23b48:	bne	23d0c <__assert_fail@plt+0x12008>
   23b4c:	ldr	r0, [r5, #100]	; 0x64
   23b50:	str	r8, [r0, r6, lsl #2]
   23b54:	ldr	r0, [fp, #12]
   23b58:	cmp	r6, r0
   23b5c:	bge	23cb0 <__assert_fail@plt+0x11fac>
   23b60:	str	r7, [sp, #4]
   23b64:	add	r7, r6, #1
   23b68:	add	r4, sp, #24
   23b6c:	mov	sl, #0
   23b70:	sub	r6, r7, #1
   23b74:	ldr	r0, [r5, #120]	; 0x78
   23b78:	cmp	sl, r0
   23b7c:	bgt	23cac <__assert_fail@plt+0x11fa8>
   23b80:	mov	r0, #0
   23b84:	str	r0, [sp, #28]
   23b88:	ldr	r0, [r5, #100]	; 0x64
   23b8c:	ldr	r0, [r0, r7, lsl #2]
   23b90:	cmp	r0, #0
   23b94:	beq	23bb0 <__assert_fail@plt+0x11eac>
   23b98:	add	r1, r0, #4
   23b9c:	mov	r0, r4
   23ba0:	bl	20cf4 <__assert_fail@plt+0xeff0>
   23ba4:	str	r0, [fp, #-32]	; 0xffffffe0
   23ba8:	cmp	r0, #0
   23bac:	bne	23d0c <__assert_fail@plt+0x12008>
   23bb0:	cmp	r8, #0
   23bb4:	beq	23bd8 <__assert_fail@plt+0x11ed4>
   23bb8:	add	r2, r8, #16
   23bbc:	mov	r0, r5
   23bc0:	mov	r1, r6
   23bc4:	mov	r3, r4
   23bc8:	bl	2428c <__assert_fail@plt+0x12588>
   23bcc:	str	r0, [fp, #-32]	; 0xffffffe0
   23bd0:	cmp	r0, #0
   23bd4:	bne	23d0c <__assert_fail@plt+0x12008>
   23bd8:	ldr	r0, [sp, #28]
   23bdc:	cmp	r0, #0
   23be0:	beq	23c40 <__assert_fail@plt+0x11f3c>
   23be4:	mov	r8, r6
   23be8:	mov	r9, r5
   23bec:	ldr	r0, [sp, #20]
   23bf0:	mov	r1, r4
   23bf4:	ldr	r6, [sp, #16]
   23bf8:	mov	r2, r6
   23bfc:	ldr	r5, [fp, #16]
   23c00:	mov	r3, r5
   23c04:	bl	23f00 <__assert_fail@plt+0x121fc>
   23c08:	str	r0, [fp, #-32]	; 0xffffffe0
   23c0c:	cmp	r0, #0
   23c10:	bne	23d0c <__assert_fail@plt+0x12008>
   23c14:	str	r5, [sp]
   23c18:	mov	r5, r9
   23c1c:	mov	r0, r9
   23c20:	mov	r1, r4
   23c24:	mov	r2, r7
   23c28:	mov	r3, r6
   23c2c:	bl	23ff8 <__assert_fail@plt+0x122f4>
   23c30:	str	r0, [fp, #-32]	; 0xffffffe0
   23c34:	cmp	r0, #0
   23c38:	mov	r6, r8
   23c3c:	bne	23d0c <__assert_fail@plt+0x12008>
   23c40:	ldr	r2, [r5, #88]	; 0x58
   23c44:	mov	r0, r5
   23c48:	mov	r1, r6
   23c4c:	bl	228d0 <__assert_fail@plt+0x10bcc>
   23c50:	mov	r3, r0
   23c54:	sub	r0, fp, #32
   23c58:	ldr	r1, [sp, #20]
   23c5c:	mov	r2, r4
   23c60:	bl	211e0 <__assert_fail@plt+0xf4dc>
   23c64:	mov	r8, r0
   23c68:	cmp	r0, #0
   23c6c:	bne	23c7c <__assert_fail@plt+0x11f78>
   23c70:	ldr	r0, [fp, #-32]	; 0xffffffe0
   23c74:	cmp	r0, #0
   23c78:	bne	23d0c <__assert_fail@plt+0x12008>
   23c7c:	ldr	r0, [r5, #100]	; 0x64
   23c80:	str	r8, [r0, r7, lsl #2]
   23c84:	cmp	r8, #0
   23c88:	mov	r1, #0
   23c8c:	addeq	r1, sl, #1
   23c90:	add	r0, r7, #1
   23c94:	ldr	r2, [fp, #12]
   23c98:	cmp	r7, r2
   23c9c:	mov	r7, r0
   23ca0:	mov	sl, r1
   23ca4:	blt	23b70 <__assert_fail@plt+0x11e6c>
   23ca8:	sub	r6, r0, #1
   23cac:	ldr	r7, [sp, #4]
   23cb0:	ldr	r0, [sp, #32]
   23cb4:	bl	1a22c <__assert_fail@plt+0x8528>
   23cb8:	ldr	r0, [r5, #100]	; 0x64
   23cbc:	ldr	r1, [fp, #12]
   23cc0:	ldr	r0, [r0, r1, lsl #2]
   23cc4:	str	r6, [r7]
   23cc8:	ldr	r1, [sp, #12]
   23ccc:	str	r1, [r5, #40]	; 0x28
   23cd0:	ldr	r1, [sp, #8]
   23cd4:	str	r1, [r5, #100]	; 0x64
   23cd8:	cmp	r0, #0
   23cdc:	beq	23cfc <__assert_fail@plt+0x11ff8>
   23ce0:	ldr	r1, [fp, #8]
   23ce4:	add	r0, r0, #4
   23ce8:	bl	21174 <__assert_fail@plt+0xf470>
   23cec:	mov	r4, #0
   23cf0:	cmp	r0, #0
   23cf4:	moveq	r4, #1
   23cf8:	b	23d00 <__assert_fail@plt+0x11ffc>
   23cfc:	mov	r4, #1
   23d00:	mov	r0, r4
   23d04:	sub	sp, fp, #28
   23d08:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   23d0c:	ldr	r0, [sp, #32]
   23d10:	bl	1a22c <__assert_fail@plt+0x8528>
   23d14:	ldr	r4, [fp, #-32]	; 0xffffffe0
   23d18:	b	23d00 <__assert_fail@plt+0x11ffc>
   23d1c:	str	r4, [sp, #12]
   23d20:	mvn	r1, #-2147483648	; 0x80000000
   23d24:	sub	r1, r1, r5
   23d28:	mov	r4, #12
   23d2c:	cmp	r1, r0
   23d30:	ble	23d00 <__assert_fail@plt+0x11ffc>
   23d34:	add	r6, r0, #1
   23d38:	add	r1, r6, r5
   23d3c:	cmn	r1, #-1073741823	; 0xc0000001
   23d40:	bhi	23d00 <__assert_fail@plt+0x11ffc>
   23d44:	ldr	r0, [r7, #8]
   23d48:	mov	r9, r1
   23d4c:	lsl	r1, r1, #2
   23d50:	bl	1a388 <__assert_fail@plt+0x8684>
   23d54:	cmp	r0, #0
   23d58:	beq	23d00 <__assert_fail@plt+0x11ffc>
   23d5c:	str	r9, [r7, #4]
   23d60:	str	r0, [r7, #8]
   23d64:	add	r0, r0, r5, lsl #2
   23d68:	lsl	r2, r6, #2
   23d6c:	mov	r1, #0
   23d70:	bl	11b60 <memset@plt>
   23d74:	ldr	r4, [sp, #12]
   23d78:	b	23a00 <__assert_fail@plt+0x11cfc>
   23d7c:	mov	r4, r0
   23d80:	b	23d00 <__assert_fail@plt+0x11ffc>
   23d84:	push	{r4, r5, r6, r7, fp, lr}
   23d88:	add	fp, sp, #16
   23d8c:	mov	r5, r2
   23d90:	mov	r6, r1
   23d94:	mov	r4, r0
   23d98:	ldr	r0, [r0, #12]
   23d9c:	ldr	r1, [r4, #16]
   23da0:	cmp	r1, r0
   23da4:	beq	23dd8 <__assert_fail@plt+0x120d4>
   23da8:	mov	r0, #1
   23dac:	mov	r1, #20
   23db0:	bl	19f8c <__assert_fail@plt+0x8288>
   23db4:	cmp	r0, #0
   23db8:	ldrne	r1, [r4, #16]
   23dbc:	ldrne	r2, [r4, #20]
   23dc0:	strne	r0, [r2, r1, lsl #2]
   23dc4:	strne	r6, [r0]
   23dc8:	strne	r5, [r0, #4]
   23dcc:	addne	r1, r1, #1
   23dd0:	strne	r1, [r4, #16]
   23dd4:	pop	{r4, r5, r6, r7, fp, pc}
   23dd8:	mov	r1, #1
   23ddc:	orr	r7, r1, r0, lsl #1
   23de0:	lsl	r1, r7, #2
   23de4:	ldr	r0, [r4, #20]
   23de8:	bl	1a388 <__assert_fail@plt+0x8684>
   23dec:	cmp	r0, #0
   23df0:	moveq	r0, #0
   23df4:	popeq	{r4, r5, r6, r7, fp, pc}
   23df8:	str	r7, [r4, #12]
   23dfc:	str	r0, [r4, #20]
   23e00:	b	23da8 <__assert_fail@plt+0x120a4>
   23e04:	push	{r4, r5, r6, r7, fp, lr}
   23e08:	add	fp, sp, #16
   23e0c:	mov	r5, r3
   23e10:	mov	r6, r2
   23e14:	mov	r7, r1
   23e18:	mov	r4, r0
   23e1c:	ldr	r1, [r0, #108]	; 0x6c
   23e20:	ldr	r2, [r0, #112]	; 0x70
   23e24:	cmp	r1, r2
   23e28:	blt	23e78 <__assert_fail@plt+0x12174>
   23e2c:	ldr	r0, [r4, #116]	; 0x74
   23e30:	add	r1, r2, r2, lsl #1
   23e34:	lsl	r1, r1, #4
   23e38:	bl	1a388 <__assert_fail@plt+0x8684>
   23e3c:	cmp	r0, #0
   23e40:	beq	23ef0 <__assert_fail@plt+0x121ec>
   23e44:	str	r0, [r4, #116]	; 0x74
   23e48:	ldr	r1, [r4, #108]	; 0x6c
   23e4c:	ldr	r2, [r4, #112]	; 0x70
   23e50:	add	r1, r1, r1, lsl #1
   23e54:	add	r0, r0, r1, lsl #3
   23e58:	add	r1, r2, r2, lsl #1
   23e5c:	lsl	r2, r1, #3
   23e60:	mov	r1, #0
   23e64:	bl	11b60 <memset@plt>
   23e68:	ldr	r1, [r4, #108]	; 0x6c
   23e6c:	ldr	r0, [r4, #112]	; 0x70
   23e70:	lsl	r0, r0, #1
   23e74:	str	r0, [r4, #112]	; 0x70
   23e78:	ldr	r2, [fp, #8]
   23e7c:	cmp	r1, #1
   23e80:	blt	23ea4 <__assert_fail@plt+0x121a0>
   23e84:	ldr	r0, [r4, #116]	; 0x74
   23e88:	sub	r3, r1, #1
   23e8c:	add	r3, r3, r3, lsl #1
   23e90:	add	r0, r0, r3, lsl #3
   23e94:	ldr	r3, [r0, #4]
   23e98:	cmp	r3, r6
   23e9c:	moveq	r3, #1
   23ea0:	strbeq	r3, [r0, #20]
   23ea4:	ldr	r3, [r4, #116]	; 0x74
   23ea8:	add	r0, r1, r1, lsl #1
   23eac:	str	r7, [r3, r0, lsl #3]!
   23eb0:	mov	r0, #0
   23eb4:	cmp	r2, r5
   23eb8:	mov	r7, #0
   23ebc:	mvneq	r7, #0
   23ec0:	str	r6, [r3, #4]
   23ec4:	str	r5, [r3, #8]
   23ec8:	str	r2, [r3, #12]
   23ecc:	str	r7, [r3, #16]
   23ed0:	add	r1, r1, #1
   23ed4:	str	r1, [r4, #108]	; 0x6c
   23ed8:	strb	r0, [r3, #20]
   23edc:	sub	r1, r2, r5
   23ee0:	ldr	r2, [r4, #120]	; 0x78
   23ee4:	cmp	r2, r1
   23ee8:	strlt	r1, [r4, #120]	; 0x78
   23eec:	pop	{r4, r5, r6, r7, fp, pc}
   23ef0:	ldr	r0, [r4, #116]	; 0x74
   23ef4:	bl	1a22c <__assert_fail@plt+0x8528>
   23ef8:	mov	r0, #12
   23efc:	pop	{r4, r5, r6, r7, fp, pc}
   23f00:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   23f04:	add	fp, sp, #28
   23f08:	sub	sp, sp, #20
   23f0c:	mov	r9, r3
   23f10:	mov	sl, r2
   23f14:	mov	r4, r1
   23f18:	mov	r7, r0
   23f1c:	ldr	r1, [r1, #4]
   23f20:	add	r0, sp, #8
   23f24:	bl	20a38 <__assert_fail@plt+0xed34>
   23f28:	cmp	r0, #0
   23f2c:	bne	23ff0 <__assert_fail@plt+0x122ec>
   23f30:	ldr	r0, [r4, #4]
   23f34:	cmp	r0, #1
   23f38:	blt	23fb8 <__assert_fail@plt+0x122b4>
   23f3c:	mov	r8, #0
   23f40:	ldr	r0, [r4, #8]
   23f44:	ldr	r5, [r0, r8, lsl #2]
   23f48:	add	r0, r5, r5, lsl #1
   23f4c:	ldr	r1, [r7, #24]
   23f50:	add	r6, r1, r0, lsl #2
   23f54:	mov	r0, r7
   23f58:	mov	r1, r6
   23f5c:	mov	r2, sl
   23f60:	mov	r3, r9
   23f64:	bl	2395c <__assert_fail@plt+0x11c58>
   23f68:	cmn	r0, #1
   23f6c:	beq	23f94 <__assert_fail@plt+0x12290>
   23f70:	str	r9, [sp]
   23f74:	mov	r0, r7
   23f78:	add	r1, sp, #8
   23f7c:	mov	r2, r5
   23f80:	mov	r3, sl
   23f84:	bl	24448 <__assert_fail@plt+0x12744>
   23f88:	cmp	r0, #0
   23f8c:	beq	23fa8 <__assert_fail@plt+0x122a4>
   23f90:	b	23fe0 <__assert_fail@plt+0x122dc>
   23f94:	add	r0, sp, #8
   23f98:	mov	r1, r6
   23f9c:	bl	20cf4 <__assert_fail@plt+0xeff0>
   23fa0:	cmp	r0, #0
   23fa4:	bne	23fe0 <__assert_fail@plt+0x122dc>
   23fa8:	ldr	r0, [r4, #4]
   23fac:	add	r8, r8, #1
   23fb0:	cmp	r8, r0
   23fb4:	blt	23f40 <__assert_fail@plt+0x1223c>
   23fb8:	ldr	r0, [r4, #8]
   23fbc:	bl	1a22c <__assert_fail@plt+0x8528>
   23fc0:	vldr	d16, [sp, #8]
   23fc4:	ldr	r0, [sp, #16]
   23fc8:	str	r0, [r4, #8]
   23fcc:	vstr	d16, [r4]
   23fd0:	mov	r5, #0
   23fd4:	mov	r0, r5
   23fd8:	sub	sp, fp, #28
   23fdc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   23fe0:	mov	r5, r0
   23fe4:	ldr	r0, [sp, #16]
   23fe8:	bl	1a22c <__assert_fail@plt+0x8528>
   23fec:	b	23fd4 <__assert_fail@plt+0x122d0>
   23ff0:	mov	r5, r0
   23ff4:	b	23fd4 <__assert_fail@plt+0x122d0>
   23ff8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   23ffc:	add	fp, sp, #28
   24000:	sub	sp, sp, #44	; 0x2c
   24004:	str	r3, [sp, #8]
   24008:	mov	r6, r2
   2400c:	mov	r7, r1
   24010:	ldr	r8, [r0, #84]	; 0x54
   24014:	str	r0, [sp, #20]
   24018:	mov	r1, r2
   2401c:	bl	237a4 <__assert_fail@plt+0x11aa0>
   24020:	mov	r1, #0
   24024:	cmn	r0, #1
   24028:	beq	24280 <__assert_fail@plt+0x1257c>
   2402c:	add	r1, r0, r0, lsl #1
   24030:	add	sl, sp, #28
   24034:	str	r8, [sp, #12]
   24038:	str	r7, [sp, #24]
   2403c:	str	r1, [sp, #4]
   24040:	b	24048 <__assert_fail@plt+0x12344>
   24044:	ldr	r1, [sp, #4]
   24048:	ldr	r0, [sp, #20]
   2404c:	ldr	r0, [r0, #116]	; 0x74
   24050:	add	r0, r0, r1, lsl #3
   24054:	add	r0, r0, #12
   24058:	mov	r9, r0
   2405c:	ldr	r1, [r0, #-12]
   24060:	mov	r0, r7
   24064:	bl	21174 <__assert_fail@plt+0xf470>
   24068:	cmp	r0, #0
   2406c:	beq	24230 <__assert_fail@plt+0x1252c>
   24070:	ldmda	r9, {r0, r1}
   24074:	add	r1, r1, r6
   24078:	sub	r5, r1, r0
   2407c:	cmp	r5, r6
   24080:	bne	24120 <__assert_fail@plt+0x1241c>
   24084:	mov	r5, r6
   24088:	ldr	r0, [r8, #20]
   2408c:	ldr	r1, [r9, #-12]
   24090:	add	r1, r1, r1, lsl #1
   24094:	add	r0, r0, r1, lsl #2
   24098:	ldr	r0, [r0, #8]
   2409c:	ldr	r4, [r0]
   240a0:	mov	r0, r7
   240a4:	mov	r1, r4
   240a8:	bl	21174 <__assert_fail@plt+0xf470>
   240ac:	mov	r1, #4
   240b0:	cmp	r0, #0
   240b4:	bne	24110 <__assert_fail@plt+0x1240c>
   240b8:	mov	r6, r8
   240bc:	mov	r0, sl
   240c0:	mov	r1, r4
   240c4:	bl	207e0 <__assert_fail@plt+0xeadc>
   240c8:	mov	r8, r0
   240cc:	str	r0, [fp, #-32]	; 0xffffffe0
   240d0:	mov	r0, r6
   240d4:	mov	r1, sl
   240d8:	ldr	r2, [sp, #8]
   240dc:	ldr	r3, [fp, #8]
   240e0:	bl	23f00 <__assert_fail@plt+0x121fc>
   240e4:	mov	r6, r0
   240e8:	mov	r0, r7
   240ec:	mov	r1, sl
   240f0:	bl	20cf4 <__assert_fail@plt+0xeff0>
   240f4:	mov	r4, r0
   240f8:	ldr	r0, [sp, #36]	; 0x24
   240fc:	bl	1a22c <__assert_fail@plt+0x8528>
   24100:	orr	r0, r6, r8
   24104:	orrs	r0, r0, r4
   24108:	mov	r1, #2
   2410c:	bne	24244 <__assert_fail@plt+0x12540>
   24110:	ldr	r8, [sp, #12]
   24114:	mov	r6, r5
   24118:	add	sl, sp, #28
   2411c:	b	24220 <__assert_fail@plt+0x1251c>
   24120:	ldr	r0, [sp, #20]
   24124:	ldr	r0, [r0, #100]	; 0x64
   24128:	ldr	r0, [r0, r5, lsl #2]
   2412c:	ldr	r1, [r9, #-12]
   24130:	ldr	r2, [r8, #12]
   24134:	ldr	r7, [r2, r1, lsl #2]
   24138:	cmp	r0, #0
   2413c:	beq	241b0 <__assert_fail@plt+0x124ac>
   24140:	add	r4, r0, #4
   24144:	mov	r0, r4
   24148:	mov	r1, r7
   2414c:	bl	21174 <__assert_fail@plt+0xf470>
   24150:	mov	r1, #4
   24154:	add	sl, sp, #28
   24158:	cmp	r0, #0
   2415c:	bne	24220 <__assert_fail@plt+0x1251c>
   24160:	mov	r0, sl
   24164:	mov	r1, r4
   24168:	bl	210f8 <__assert_fail@plt+0xf3f4>
   2416c:	mov	r4, r0
   24170:	str	r0, [fp, #-32]	; 0xffffffe0
   24174:	mov	r0, sl
   24178:	mov	r1, r7
   2417c:	bl	20f10 <__assert_fail@plt+0xf20c>
   24180:	cmp	r4, #0
   24184:	bne	24190 <__assert_fail@plt+0x1248c>
   24188:	cmp	r0, #0
   2418c:	bne	241cc <__assert_fail@plt+0x124c8>
   24190:	ldr	r0, [sp, #36]	; 0x24
   24194:	bl	1a22c <__assert_fail@plt+0x8528>
   24198:	cmp	r4, #0
   2419c:	movweq	r4, #12
   241a0:	str	r4, [fp, #-32]	; 0xffffffe0
   241a4:	mov	r1, #1
   241a8:	str	r4, [sp, #16]
   241ac:	b	24220 <__assert_fail@plt+0x1251c>
   241b0:	add	sl, sp, #28
   241b4:	mov	r0, sl
   241b8:	mov	r1, r7
   241bc:	bl	207e0 <__assert_fail@plt+0xeadc>
   241c0:	str	r0, [fp, #-32]	; 0xffffffe0
   241c4:	cmp	r0, #0
   241c8:	bne	24264 <__assert_fail@plt+0x12560>
   241cc:	sub	r0, fp, #32
   241d0:	mov	r1, r8
   241d4:	mov	r2, sl
   241d8:	bl	24550 <__assert_fail@plt+0x1284c>
   241dc:	ldr	r4, [sp, #20]
   241e0:	ldr	r1, [r4, #100]	; 0x64
   241e4:	str	r0, [r1, r5, lsl #2]
   241e8:	ldr	r0, [sp, #36]	; 0x24
   241ec:	bl	1a22c <__assert_fail@plt+0x8528>
   241f0:	ldr	r0, [r4, #100]	; 0x64
   241f4:	ldr	r0, [r0, r5, lsl #2]
   241f8:	clz	r0, r0
   241fc:	lsr	r0, r0, #5
   24200:	ldr	r2, [fp, #-32]	; 0xffffffe0
   24204:	cmp	r2, #0
   24208:	mov	r1, r2
   2420c:	movwne	r1, #1
   24210:	ands	r1, r0, r1
   24214:	ldr	r0, [sp, #16]
   24218:	movne	r0, r2
   2421c:	str	r0, [sp, #16]
   24220:	ldr	r7, [sp, #24]
   24224:	cmp	r1, #0
   24228:	cmpne	r1, #4
   2422c:	bne	2426c <__assert_fail@plt+0x12568>
   24230:	add	r0, r9, #24
   24234:	ldrb	r1, [r9, #8]
   24238:	cmp	r1, #0
   2423c:	bne	24058 <__assert_fail@plt+0x12354>
   24240:	b	2427c <__assert_fail@plt+0x12578>
   24244:	cmp	r6, #0
   24248:	movne	r4, r6
   2424c:	cmp	r8, #0
   24250:	movne	r4, r8
   24254:	str	r4, [fp, #-32]	; 0xffffffe0
   24258:	mov	r1, #1
   2425c:	str	r4, [sp, #16]
   24260:	b	24110 <__assert_fail@plt+0x1240c>
   24264:	mov	r1, #1
   24268:	b	2421c <__assert_fail@plt+0x12518>
   2426c:	cmp	r1, #2
   24270:	beq	24044 <__assert_fail@plt+0x12340>
   24274:	ldr	r1, [sp, #16]
   24278:	b	24280 <__assert_fail@plt+0x1257c>
   2427c:	mov	r1, #0
   24280:	mov	r0, r1
   24284:	sub	sp, fp, #28
   24288:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2428c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   24290:	add	fp, sp, #28
   24294:	sub	sp, sp, #36	; 0x24
   24298:	str	r0, [sp, #12]
   2429c:	ldr	r5, [r0, #84]	; 0x54
   242a0:	mov	r0, #0
   242a4:	str	r0, [sp, #32]
   242a8:	str	r0, [sp, #20]
   242ac:	str	r0, [sp, #16]
   242b0:	str	r0, [sp, #24]
   242b4:	ldr	r0, [r2, #4]
   242b8:	cmp	r0, #1
   242bc:	blt	24408 <__assert_fail@plt+0x12704>
   242c0:	mov	sl, r3
   242c4:	mov	r4, r2
   242c8:	mov	r6, r1
   242cc:	mov	r7, #0
   242d0:	str	r1, [sp, #8]
   242d4:	str	r2, [sp, #4]
   242d8:	str	r3, [sp]
   242dc:	ldr	r0, [r4, #8]
   242e0:	ldr	r8, [r0, r7, lsl #2]
   242e4:	ldr	r0, [r5]
   242e8:	add	r0, r0, r8, lsl #3
   242ec:	ldrb	r0, [r0, #6]
   242f0:	tst	r0, #16
   242f4:	bne	24318 <__assert_fail@plt+0x12614>
   242f8:	ldr	r0, [r5]
   242fc:	add	r1, r0, r8, lsl #3
   24300:	ldr	r0, [sp, #12]
   24304:	mov	r2, r6
   24308:	bl	24a28 <__assert_fail@plt+0x12d24>
   2430c:	cmp	r0, #0
   24310:	bne	243e0 <__assert_fail@plt+0x126dc>
   24314:	b	243f8 <__assert_fail@plt+0x126f4>
   24318:	mov	r0, r5
   2431c:	mov	r1, r8
   24320:	ldr	r9, [sp, #12]
   24324:	mov	r2, r9
   24328:	mov	r3, r6
   2432c:	bl	24754 <__assert_fail@plt+0x12a50>
   24330:	cmp	r0, #2
   24334:	blt	243d8 <__assert_fail@plt+0x126d4>
   24338:	add	r4, r0, r6
   2433c:	ldr	r0, [r9, #100]	; 0x64
   24340:	ldr	r0, [r0, r4, lsl #2]
   24344:	ldr	r1, [r5, #12]
   24348:	ldr	r2, [r1, r8, lsl #2]
   2434c:	mov	r1, #0
   24350:	str	r1, [sp, #20]
   24354:	cmp	r0, #0
   24358:	mov	sl, r9
   2435c:	add	r6, sp, #16
   24360:	beq	24384 <__assert_fail@plt+0x12680>
   24364:	add	r1, r0, #4
   24368:	mov	r0, r6
   2436c:	mov	r9, r2
   24370:	bl	20cf4 <__assert_fail@plt+0xeff0>
   24374:	mov	r2, r9
   24378:	str	r0, [sp, #32]
   2437c:	cmp	r0, #0
   24380:	bne	24430 <__assert_fail@plt+0x1272c>
   24384:	mov	r0, r6
   24388:	mov	r1, r2
   2438c:	bl	20f10 <__assert_fail@plt+0xf20c>
   24390:	cmp	r0, #0
   24394:	beq	2441c <__assert_fail@plt+0x12718>
   24398:	mov	r2, r6
   2439c:	add	r0, sp, #32
   243a0:	mov	r1, r5
   243a4:	bl	24550 <__assert_fail@plt+0x1284c>
   243a8:	ldr	r1, [sl, #100]	; 0x64
   243ac:	str	r0, [r1, r4, lsl #2]
   243b0:	ldr	r0, [sl, #100]	; 0x64
   243b4:	ldr	r0, [r0, r4, lsl #2]
   243b8:	cmp	r0, #0
   243bc:	ldr	sl, [sp]
   243c0:	ldmib	sp, {r4, r6}
   243c4:	bne	243e0 <__assert_fail@plt+0x126dc>
   243c8:	ldr	r9, [sp, #32]
   243cc:	cmp	r9, #0
   243d0:	beq	243e0 <__assert_fail@plt+0x126dc>
   243d4:	b	24434 <__assert_fail@plt+0x12730>
   243d8:	cmp	r0, #0
   243dc:	beq	242f8 <__assert_fail@plt+0x125f4>
   243e0:	ldr	r0, [r5, #12]
   243e4:	ldr	r1, [r0, r8, lsl #2]
   243e8:	mov	r0, sl
   243ec:	bl	20f10 <__assert_fail@plt+0xf20c>
   243f0:	cmp	r0, #0
   243f4:	beq	2441c <__assert_fail@plt+0x12718>
   243f8:	ldr	r0, [r4, #4]
   243fc:	add	r7, r7, #1
   24400:	cmp	r7, r0
   24404:	blt	242dc <__assert_fail@plt+0x125d8>
   24408:	ldr	r0, [sp, #24]
   2440c:	bl	1a22c <__assert_fail@plt+0x8528>
   24410:	mov	r0, #0
   24414:	sub	sp, fp, #28
   24418:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2441c:	ldr	r0, [sp, #24]
   24420:	bl	1a22c <__assert_fail@plt+0x8528>
   24424:	mov	r0, #12
   24428:	sub	sp, fp, #28
   2442c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   24430:	mov	r9, r0
   24434:	ldr	r0, [sp, #24]
   24438:	bl	1a22c <__assert_fail@plt+0x8528>
   2443c:	mov	r0, r9
   24440:	sub	sp, fp, #28
   24444:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   24448:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   2444c:	add	fp, sp, #24
   24450:	sub	sp, sp, #8
   24454:	mov	r5, r3
   24458:	mov	r7, r2
   2445c:	mov	r4, r1
   24460:	mov	r6, r0
   24464:	mov	r0, r1
   24468:	mov	r1, r2
   2446c:	bl	21174 <__assert_fail@plt+0xf470>
   24470:	cmp	r0, #0
   24474:	beq	24484 <__assert_fail@plt+0x12780>
   24478:	mov	r0, #0
   2447c:	sub	sp, fp, #24
   24480:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   24484:	ldr	r8, [fp, #8]
   24488:	ldr	r0, [r6]
   2448c:	add	r1, r0, r7, lsl #3
   24490:	ldrb	r1, [r1, #4]
   24494:	cmp	r1, r8
   24498:	ldreq	r0, [r0, r7, lsl #3]
   2449c:	cmpeq	r0, r5
   244a0:	beq	24528 <__assert_fail@plt+0x12824>
   244a4:	mov	r0, r4
   244a8:	mov	r1, r7
   244ac:	bl	20f10 <__assert_fail@plt+0xf20c>
   244b0:	cmp	r0, #0
   244b4:	beq	24544 <__assert_fail@plt+0x12840>
   244b8:	ldr	r0, [r6, #20]
   244bc:	add	r7, r7, r7, lsl #1
   244c0:	add	r0, r0, r7, lsl #2
   244c4:	ldr	r1, [r0, #4]
   244c8:	cmp	r1, #2
   244cc:	beq	244dc <__assert_fail@plt+0x127d8>
   244d0:	cmp	r1, #0
   244d4:	bne	24500 <__assert_fail@plt+0x127fc>
   244d8:	b	24478 <__assert_fail@plt+0x12774>
   244dc:	ldr	r0, [r0, #8]
   244e0:	ldr	r2, [r0, #4]
   244e4:	str	r8, [sp]
   244e8:	mov	r0, r6
   244ec:	mov	r1, r4
   244f0:	mov	r3, r5
   244f4:	bl	24448 <__assert_fail@plt+0x12744>
   244f8:	cmp	r0, #0
   244fc:	bne	2447c <__assert_fail@plt+0x12778>
   24500:	ldr	r0, [r6, #20]
   24504:	add	r0, r0, r7, lsl #2
   24508:	ldr	r0, [r0, #8]
   2450c:	ldr	r7, [r0]
   24510:	mov	r0, r4
   24514:	mov	r1, r7
   24518:	bl	21174 <__assert_fail@plt+0xf470>
   2451c:	cmp	r0, #0
   24520:	beq	24488 <__assert_fail@plt+0x12784>
   24524:	b	24478 <__assert_fail@plt+0x12774>
   24528:	cmp	r8, #9
   2452c:	bne	24478 <__assert_fail@plt+0x12774>
   24530:	mov	r0, r4
   24534:	mov	r1, r7
   24538:	bl	20f10 <__assert_fail@plt+0xf20c>
   2453c:	cmp	r0, #0
   24540:	bne	24478 <__assert_fail@plt+0x12774>
   24544:	mov	r0, #12
   24548:	sub	sp, fp, #24
   2454c:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   24550:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   24554:	add	fp, sp, #28
   24558:	sub	sp, sp, #4
   2455c:	mov	r9, r1
   24560:	ldr	r1, [r2, #4]
   24564:	cmp	r1, #0
   24568:	beq	2460c <__assert_fail@plt+0x12908>
   2456c:	mov	sl, r2
   24570:	str	r0, [sp]
   24574:	mov	r6, #0
   24578:	mov	r0, r2
   2457c:	mov	r1, #0
   24580:	bl	212d4 <__assert_fail@plt+0xf5d0>
   24584:	mov	r7, r0
   24588:	ldr	r0, [r9, #32]
   2458c:	ldr	r1, [r9, #68]	; 0x44
   24590:	and	r1, r1, r7
   24594:	add	r1, r1, r1, lsl #1
   24598:	mov	r5, r0
   2459c:	ldr	r2, [r5, r1, lsl #2]!
   245a0:	cmp	r2, #1
   245a4:	blt	245e4 <__assert_fail@plt+0x128e0>
   245a8:	add	r0, r0, r1, lsl #2
   245ac:	ldr	r8, [r0, #8]
   245b0:	ldr	r4, [r8, r6, lsl #2]
   245b4:	ldr	r0, [r4]
   245b8:	cmp	r7, r0
   245bc:	bne	245d4 <__assert_fail@plt+0x128d0>
   245c0:	add	r0, r4, #4
   245c4:	mov	r1, sl
   245c8:	bl	21300 <__assert_fail@plt+0xf5fc>
   245cc:	cmp	r0, #0
   245d0:	bne	24600 <__assert_fail@plt+0x128fc>
   245d4:	ldr	r0, [r5]
   245d8:	add	r6, r6, #1
   245dc:	cmp	r6, r0
   245e0:	blt	245b0 <__assert_fail@plt+0x128ac>
   245e4:	mov	r0, r9
   245e8:	mov	r1, sl
   245ec:	mov	r2, r7
   245f0:	bl	2462c <__assert_fail@plt+0x12928>
   245f4:	mov	r4, r0
   245f8:	cmp	r0, #0
   245fc:	beq	24618 <__assert_fail@plt+0x12914>
   24600:	mov	r0, r4
   24604:	sub	sp, fp, #28
   24608:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2460c:	mov	r4, #0
   24610:	str	r4, [r0]
   24614:	b	24600 <__assert_fail@plt+0x128fc>
   24618:	mov	r0, #12
   2461c:	ldr	r1, [sp]
   24620:	str	r0, [r1]
   24624:	mov	r4, #0
   24628:	b	24600 <__assert_fail@plt+0x128fc>
   2462c:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   24630:	add	fp, sp, #24
   24634:	mov	r8, r2
   24638:	mov	r7, r1
   2463c:	mov	r9, r0
   24640:	mov	r0, #56	; 0x38
   24644:	mov	r1, #1
   24648:	bl	19f8c <__assert_fail@plt+0x8288>
   2464c:	cmp	r0, #0
   24650:	beq	24748 <__assert_fail@plt+0x12a44>
   24654:	mov	r4, r0
   24658:	add	r5, r0, #4
   2465c:	mov	r0, r5
   24660:	mov	r1, r7
   24664:	bl	210f8 <__assert_fail@plt+0xf3f4>
   24668:	cmp	r0, #0
   2466c:	bne	24734 <__assert_fail@plt+0x12a30>
   24670:	str	r5, [r4, #40]	; 0x28
   24674:	ldr	r0, [r7, #4]
   24678:	cmp	r0, #1
   2467c:	blt	24714 <__assert_fail@plt+0x12a10>
   24680:	mov	r0, #0
   24684:	movw	ip, #65280	; 0xff00
   24688:	movt	ip, #3
   2468c:	add	r2, ip, #255	; 0xff
   24690:	mov	lr, #32
   24694:	ldr	r1, [r7, #8]
   24698:	ldr	r1, [r1, r0, lsl #2]
   2469c:	ldr	r3, [r9]
   246a0:	add	r5, r3, r1, lsl #3
   246a4:	ldr	r3, [r5, #4]!
   246a8:	and	r1, r3, r2
   246ac:	cmp	r1, #1
   246b0:	beq	24704 <__assert_fail@plt+0x12a00>
   246b4:	and	r1, lr, r3, lsr #15
   246b8:	ldrb	r6, [r4, #52]	; 0x34
   246bc:	orr	r1, r6, r1
   246c0:	strb	r1, [r4, #52]	; 0x34
   246c4:	uxtb	r3, r3
   246c8:	cmp	r3, #12
   246cc:	beq	246fc <__assert_fail@plt+0x129f8>
   246d0:	cmp	r3, #4
   246d4:	beq	246e8 <__assert_fail@plt+0x129e4>
   246d8:	cmp	r3, #2
   246dc:	bne	246f0 <__assert_fail@plt+0x129ec>
   246e0:	orr	r1, r1, #16
   246e4:	b	24700 <__assert_fail@plt+0x129fc>
   246e8:	orr	r1, r1, #64	; 0x40
   246ec:	b	24700 <__assert_fail@plt+0x129fc>
   246f0:	ldr	r3, [r5]
   246f4:	tst	r3, ip
   246f8:	beq	24704 <__assert_fail@plt+0x12a00>
   246fc:	orr	r1, r1, #128	; 0x80
   24700:	strb	r1, [r4, #52]	; 0x34
   24704:	ldr	r1, [r7, #4]
   24708:	add	r0, r0, #1
   2470c:	cmp	r0, r1
   24710:	blt	24694 <__assert_fail@plt+0x12990>
   24714:	mov	r0, r9
   24718:	mov	r1, r4
   2471c:	mov	r2, r8
   24720:	bl	215b4 <__assert_fail@plt+0xf8b0>
   24724:	cmp	r0, #0
   24728:	bne	24740 <__assert_fail@plt+0x12a3c>
   2472c:	mov	r0, r4
   24730:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   24734:	mov	r0, r4
   24738:	bl	1a22c <__assert_fail@plt+0x8528>
   2473c:	b	24748 <__assert_fail@plt+0x12a44>
   24740:	mov	r0, r4
   24744:	bl	1bb10 <__assert_fail@plt+0x9e0c>
   24748:	mov	r4, #0
   2474c:	mov	r0, r4
   24750:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   24754:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   24758:	add	fp, sp, #28
   2475c:	sub	sp, sp, #4
   24760:	mov	sl, r3
   24764:	mov	r7, r2
   24768:	mov	r5, r0
   2476c:	ldr	r6, [r0]
   24770:	add	r0, r6, r1, lsl #3
   24774:	ldrb	r8, [r0, #4]
   24778:	cmp	r8, #7
   2477c:	beq	2491c <__assert_fail@plt+0x12c18>
   24780:	mov	r4, r1
   24784:	mov	r0, r7
   24788:	mov	r1, sl
   2478c:	bl	1fb7c <__assert_fail@plt+0xde78>
   24790:	mov	r9, r0
   24794:	mov	r2, #0
   24798:	cmp	r8, #5
   2479c:	bne	247e0 <__assert_fail@plt+0x12adc>
   247a0:	cmp	r9, #2
   247a4:	blt	24908 <__assert_fail@plt+0x12c04>
   247a8:	ldr	r0, [r5, #128]	; 0x80
   247ac:	tst	r0, #64	; 0x40
   247b0:	bne	247c4 <__assert_fail@plt+0x12ac0>
   247b4:	ldr	r1, [r7, #4]
   247b8:	ldrb	r1, [r1, sl]
   247bc:	cmp	r1, #10
   247c0:	beq	24908 <__assert_fail@plt+0x12c04>
   247c4:	tst	r0, #128	; 0x80
   247c8:	beq	24904 <__assert_fail@plt+0x12c00>
   247cc:	ldr	r0, [r7, #4]
   247d0:	ldrb	r0, [r0, sl]
   247d4:	cmp	r0, #0
   247d8:	movne	r2, r9
   247dc:	b	24908 <__assert_fail@plt+0x12c04>
   247e0:	cmp	r8, #6
   247e4:	bne	24908 <__assert_fail@plt+0x12c04>
   247e8:	cmp	r9, #2
   247ec:	blt	24908 <__assert_fail@plt+0x12c04>
   247f0:	ldr	r4, [r6, r4, lsl #3]
   247f4:	ldr	r0, [r4, #32]
   247f8:	cmp	r0, #0
   247fc:	bne	24818 <__assert_fail@plt+0x12b14>
   24800:	ldr	r0, [r4, #36]	; 0x24
   24804:	cmp	r0, #0
   24808:	bne	24818 <__assert_fail@plt+0x12b14>
   2480c:	ldr	r0, [r4, #20]
   24810:	cmp	r0, #0
   24814:	beq	24914 <__assert_fail@plt+0x12c10>
   24818:	mov	r0, r7
   2481c:	mov	r1, sl
   24820:	bl	1d8f0 <__assert_fail@plt+0xbbec>
   24824:	mov	r6, r0
   24828:	ldr	r0, [r4, #20]
   2482c:	cmp	r0, #1
   24830:	blt	24858 <__assert_fail@plt+0x12b54>
   24834:	ldr	r0, [r4]
   24838:	mov	r1, #0
   2483c:	ldr	r2, [r0, r1, lsl #2]
   24840:	cmp	r6, r2
   24844:	beq	248d8 <__assert_fail@plt+0x12bd4>
   24848:	add	r1, r1, #1
   2484c:	ldr	r2, [r4, #20]
   24850:	cmp	r1, r2
   24854:	blt	2483c <__assert_fail@plt+0x12b38>
   24858:	ldr	r0, [r4, #36]	; 0x24
   2485c:	cmp	r0, #1
   24860:	blt	24890 <__assert_fail@plt+0x12b8c>
   24864:	mov	r5, #0
   24868:	ldr	r0, [r4, #12]
   2486c:	ldr	r1, [r0, r5, lsl #2]
   24870:	mov	r0, r6
   24874:	bl	11890 <iswctype@plt>
   24878:	cmp	r0, #0
   2487c:	bne	248d8 <__assert_fail@plt+0x12bd4>
   24880:	add	r5, r5, #1
   24884:	ldr	r0, [r4, #36]	; 0x24
   24888:	cmp	r5, r0
   2488c:	blt	24868 <__assert_fail@plt+0x12b64>
   24890:	ldr	r0, [r4, #32]
   24894:	cmp	r0, #1
   24898:	blt	248d0 <__assert_fail@plt+0x12bcc>
   2489c:	ldr	r0, [r4, #4]
   248a0:	mov	r1, #0
   248a4:	ldr	r2, [r0, r1, lsl #2]
   248a8:	cmp	r2, r6
   248ac:	bhi	248c0 <__assert_fail@plt+0x12bbc>
   248b0:	ldr	r2, [r4, #8]
   248b4:	ldr	r2, [r2, r1, lsl #2]
   248b8:	cmp	r6, r2
   248bc:	bls	248d8 <__assert_fail@plt+0x12bd4>
   248c0:	add	r1, r1, #1
   248c4:	ldr	r2, [r4, #32]
   248c8:	cmp	r1, r2
   248cc:	blt	248a4 <__assert_fail@plt+0x12ba0>
   248d0:	mov	r0, #0
   248d4:	b	248dc <__assert_fail@plt+0x12bd8>
   248d8:	mov	r0, r9
   248dc:	ldrb	r1, [r4, #16]
   248e0:	tst	r1, #1
   248e4:	mov	r2, #0
   248e8:	bne	248f4 <__assert_fail@plt+0x12bf0>
   248ec:	mov	r2, r0
   248f0:	b	24908 <__assert_fail@plt+0x12c04>
   248f4:	cmp	r0, #0
   248f8:	bgt	24908 <__assert_fail@plt+0x12c04>
   248fc:	cmp	r9, #1
   24900:	movle	r9, #1
   24904:	mov	r2, r9
   24908:	mov	r0, r2
   2490c:	sub	sp, fp, #28
   24910:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   24914:	mov	r6, #0
   24918:	b	24828 <__assert_fail@plt+0x12b24>
   2491c:	ldr	r0, [r7, #4]
   24920:	ldrb	r5, [r0, sl]
   24924:	mov	r2, #0
   24928:	cmp	r5, #194	; 0xc2
   2492c:	bcc	24908 <__assert_fail@plt+0x12c04>
   24930:	ldr	r1, [r7, #48]	; 0x30
   24934:	add	r2, sl, #2
   24938:	cmp	r2, r1
   2493c:	ble	24948 <__assert_fail@plt+0x12c44>
   24940:	mov	r2, #0
   24944:	b	24908 <__assert_fail@plt+0x12c04>
   24948:	add	r0, r0, sl
   2494c:	ldrb	r3, [r0, #1]
   24950:	cmp	r5, #223	; 0xdf
   24954:	bhi	24974 <__assert_fail@plt+0x12c70>
   24958:	mov	r2, #2
   2495c:	cmp	r3, #191	; 0xbf
   24960:	movwhi	r2, #0
   24964:	sxtb	r0, r3
   24968:	cmn	r0, #1
   2496c:	movwgt	r2, #0
   24970:	b	24908 <__assert_fail@plt+0x12c04>
   24974:	cmp	r5, #239	; 0xef
   24978:	bhi	24994 <__assert_fail@plt+0x12c90>
   2497c:	mov	r2, #3
   24980:	cmp	r5, #224	; 0xe0
   24984:	bne	249f0 <__assert_fail@plt+0x12cec>
   24988:	cmp	r3, #160	; 0xa0
   2498c:	bcc	24940 <__assert_fail@plt+0x12c3c>
   24990:	b	249f0 <__assert_fail@plt+0x12cec>
   24994:	cmp	r5, #247	; 0xf7
   24998:	bhi	249b4 <__assert_fail@plt+0x12cb0>
   2499c:	mov	r2, #4
   249a0:	cmp	r5, #240	; 0xf0
   249a4:	bne	249f0 <__assert_fail@plt+0x12cec>
   249a8:	cmp	r3, #144	; 0x90
   249ac:	bcc	24940 <__assert_fail@plt+0x12c3c>
   249b0:	b	249f0 <__assert_fail@plt+0x12cec>
   249b4:	cmp	r5, #251	; 0xfb
   249b8:	bhi	249d4 <__assert_fail@plt+0x12cd0>
   249bc:	mov	r2, #5
   249c0:	cmp	r5, #248	; 0xf8
   249c4:	bne	249f0 <__assert_fail@plt+0x12cec>
   249c8:	cmp	r3, #136	; 0x88
   249cc:	bcc	24940 <__assert_fail@plt+0x12c3c>
   249d0:	b	249f0 <__assert_fail@plt+0x12cec>
   249d4:	cmp	r5, #253	; 0xfd
   249d8:	bhi	24940 <__assert_fail@plt+0x12c3c>
   249dc:	mov	r2, #6
   249e0:	cmp	r5, #252	; 0xfc
   249e4:	bne	249f0 <__assert_fail@plt+0x12cec>
   249e8:	cmp	r3, #132	; 0x84
   249ec:	bcc	24940 <__assert_fail@plt+0x12c3c>
   249f0:	add	r3, r2, sl
   249f4:	cmp	r3, r1
   249f8:	bgt	24940 <__assert_fail@plt+0x12c3c>
   249fc:	mov	r1, #1
   24a00:	ldrb	r3, [r0, r1]
   24a04:	sxtb	r7, r3
   24a08:	cmn	r7, #1
   24a0c:	bgt	24940 <__assert_fail@plt+0x12c3c>
   24a10:	cmp	r3, #191	; 0xbf
   24a14:	bhi	24940 <__assert_fail@plt+0x12c3c>
   24a18:	add	r1, r1, #1
   24a1c:	cmp	r1, r2
   24a20:	bcc	24a00 <__assert_fail@plt+0x12cfc>
   24a24:	b	24908 <__assert_fail@plt+0x12c04>
   24a28:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   24a2c:	add	fp, sp, #24
   24a30:	mov	r6, r0
   24a34:	ldr	r7, [r1, #4]
   24a38:	mvn	r0, #0
   24a3c:	uxtab	r0, r0, r7
   24a40:	mov	r8, #0
   24a44:	cmp	r0, #6
   24a48:	bhi	24b54 <__assert_fail@plt+0x12e50>
   24a4c:	mov	r5, r2
   24a50:	ldr	r2, [r6, #4]
   24a54:	ldrb	r2, [r2, r5]
   24a58:	sxtb	r3, r2
   24a5c:	add	r4, pc, #0
   24a60:	ldr	pc, [r4, r0, lsl #2]
   24a64:	andeq	r4, r2, r0, lsl #21
   24a68:	andeq	r4, r2, r4, asr fp
   24a6c:	muleq	r2, r4, sl
   24a70:	andeq	r4, r2, r4, asr fp
   24a74:			; <UNDEFINED> instruction: 0x00024ab4
   24a78:	andeq	r4, r2, r4, asr fp
   24a7c:	andeq	r4, r2, ip, lsr #21
   24a80:	ldrb	r0, [r1]
   24a84:	uxtb	r1, r3
   24a88:	cmp	r0, r1
   24a8c:	beq	24ae8 <__assert_fail@plt+0x12de4>
   24a90:	b	24b54 <__assert_fail@plt+0x12e50>
   24a94:	ldr	r0, [r1]
   24a98:	mov	r1, r2
   24a9c:	bl	22a48 <__assert_fail@plt+0x10d44>
   24aa0:	cmp	r0, #0
   24aa4:	bne	24ae8 <__assert_fail@plt+0x12de4>
   24aa8:	b	24b54 <__assert_fail@plt+0x12e50>
   24aac:	cmp	r3, #0
   24ab0:	blt	24b54 <__assert_fail@plt+0x12e50>
   24ab4:	cmp	r2, #0
   24ab8:	beq	24ad8 <__assert_fail@plt+0x12dd4>
   24abc:	cmp	r2, #10
   24ac0:	bne	24ae8 <__assert_fail@plt+0x12de4>
   24ac4:	ldr	r0, [r6, #84]	; 0x54
   24ac8:	ldrb	r0, [r0, #128]	; 0x80
   24acc:	tst	r0, #64	; 0x40
   24ad0:	bne	24ae8 <__assert_fail@plt+0x12de4>
   24ad4:	b	24b54 <__assert_fail@plt+0x12e50>
   24ad8:	ldr	r0, [r6, #84]	; 0x54
   24adc:	ldrb	r0, [r0, #128]	; 0x80
   24ae0:	tst	r0, #128	; 0x80
   24ae4:	bne	24b54 <__assert_fail@plt+0x12e50>
   24ae8:	movw	r0, #65280	; 0xff00
   24aec:	movt	r0, #3
   24af0:	tst	r7, r0
   24af4:	beq	24b50 <__assert_fail@plt+0x12e4c>
   24af8:	ldr	r2, [r6, #88]	; 0x58
   24afc:	mov	r0, r6
   24b00:	mov	r1, r5
   24b04:	bl	228d0 <__assert_fail@plt+0x10bcc>
   24b08:	and	r1, r0, #1
   24b0c:	tst	r7, #1024	; 0x400
   24b10:	beq	24b1c <__assert_fail@plt+0x12e18>
   24b14:	cmp	r1, #0
   24b18:	beq	24b54 <__assert_fail@plt+0x12e50>
   24b1c:	tst	r7, #2048	; 0x800
   24b20:	cmpne	r1, #0
   24b24:	bne	24b54 <__assert_fail@plt+0x12e50>
   24b28:	tst	r7, #8192	; 0x2000
   24b2c:	beq	24b38 <__assert_fail@plt+0x12e34>
   24b30:	ands	r1, r0, #2
   24b34:	beq	24b54 <__assert_fail@plt+0x12e50>
   24b38:	and	r1, r7, #32768	; 0x8000
   24b3c:	mov	r2, #1
   24b40:	eor	r1, r2, r1, lsr #15
   24b44:	and	r0, r0, #8
   24b48:	orr	r0, r1, r0, lsr #3
   24b4c:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   24b50:	mov	r8, #1
   24b54:	mov	r0, r8
   24b58:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   24b5c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   24b60:	add	fp, sp, #28
   24b64:	sub	sp, sp, #20
   24b68:	mov	r5, r0
   24b6c:	ldr	r0, [r1, #8]
   24b70:	cmp	r0, #1
   24b74:	blt	24d14 <__assert_fail@plt+0x13010>
   24b78:	mov	r4, r1
   24b7c:	ldr	sl, [r5, #84]	; 0x54
   24b80:	mov	r8, #0
   24b84:	movw	r9, #65280	; 0xff00
   24b88:	movt	r9, #3
   24b8c:	ldr	r0, [r4, #12]
   24b90:	ldr	r7, [r0, r8, lsl #2]
   24b94:	ldr	r0, [sl]
   24b98:	add	r0, r0, r7, lsl #3
   24b9c:	ldr	r6, [r0, #4]
   24ba0:	tst	r6, #1048576	; 0x100000
   24ba4:	beq	24d04 <__assert_fail@plt+0x13000>
   24ba8:	tst	r6, r9
   24bac:	beq	24c00 <__assert_fail@plt+0x12efc>
   24bb0:	ldr	r1, [r5, #40]	; 0x28
   24bb4:	ldr	r2, [r5, #88]	; 0x58
   24bb8:	mov	r0, r5
   24bbc:	bl	228d0 <__assert_fail@plt+0x10bcc>
   24bc0:	and	r1, r0, #1
   24bc4:	tst	r6, #1024	; 0x400
   24bc8:	beq	24bd4 <__assert_fail@plt+0x12ed0>
   24bcc:	cmp	r1, #0
   24bd0:	beq	24d04 <__assert_fail@plt+0x13000>
   24bd4:	tst	r6, #2048	; 0x800
   24bd8:	cmpne	r1, #0
   24bdc:	bne	24d04 <__assert_fail@plt+0x13000>
   24be0:	tst	r6, #8192	; 0x2000
   24be4:	beq	24bf0 <__assert_fail@plt+0x12eec>
   24be8:	ands	r1, r0, #2
   24bec:	beq	24d04 <__assert_fail@plt+0x13000>
   24bf0:	tst	r6, #32768	; 0x8000
   24bf4:	beq	24c00 <__assert_fail@plt+0x12efc>
   24bf8:	ands	r0, r0, #8
   24bfc:	beq	24d04 <__assert_fail@plt+0x13000>
   24c00:	ldr	r3, [r5, #40]	; 0x28
   24c04:	mov	r0, sl
   24c08:	mov	r1, r7
   24c0c:	mov	r2, r5
   24c10:	bl	24754 <__assert_fail@plt+0x12a50>
   24c14:	cmp	r0, #0
   24c18:	beq	24d04 <__assert_fail@plt+0x13000>
   24c1c:	ldr	r1, [r5, #40]	; 0x28
   24c20:	ldr	r2, [r5, #120]	; 0x78
   24c24:	cmp	r2, r0
   24c28:	movlt	r2, r0
   24c2c:	str	r2, [r5, #120]	; 0x78
   24c30:	add	r6, r1, r0
   24c34:	mov	r0, r5
   24c38:	mov	r1, r6
   24c3c:	bl	23830 <__assert_fail@plt+0x11b2c>
   24c40:	str	r0, [sp, #16]
   24c44:	cmp	r0, #0
   24c48:	bne	24d18 <__assert_fail@plt+0x13014>
   24c4c:	ldr	r0, [r5, #100]	; 0x64
   24c50:	ldr	r9, [r0, r6, lsl #2]
   24c54:	ldr	r0, [sl, #12]
   24c58:	ldr	r1, [sl, #24]
   24c5c:	ldr	r0, [r0, r7, lsl #2]
   24c60:	add	r0, r0, r0, lsl #1
   24c64:	add	r2, r1, r0, lsl #2
   24c68:	cmp	r9, #0
   24c6c:	beq	24c90 <__assert_fail@plt+0x12f8c>
   24c70:	ldr	r1, [r9, #40]	; 0x28
   24c74:	mov	r7, sp
   24c78:	mov	r0, r7
   24c7c:	bl	23574 <__assert_fail@plt+0x11870>
   24c80:	str	r0, [sp, #16]
   24c84:	cmp	r0, #0
   24c88:	beq	24ca4 <__assert_fail@plt+0x12fa0>
   24c8c:	b	24d18 <__assert_fail@plt+0x13014>
   24c90:	vldr	d16, [r2]
   24c94:	ldr	r0, [r2, #8]
   24c98:	str	r0, [sp, #8]
   24c9c:	vstr	d16, [sp]
   24ca0:	mov	r7, sp
   24ca4:	ldr	r2, [r5, #88]	; 0x58
   24ca8:	sub	r1, r6, #1
   24cac:	mov	r0, r5
   24cb0:	bl	228d0 <__assert_fail@plt+0x10bcc>
   24cb4:	mov	r3, r0
   24cb8:	add	r0, sp, #16
   24cbc:	mov	r1, sl
   24cc0:	mov	r2, r7
   24cc4:	bl	211e0 <__assert_fail@plt+0xf4dc>
   24cc8:	ldr	r1, [r5, #100]	; 0x64
   24ccc:	str	r0, [r1, r6, lsl #2]
   24cd0:	cmp	r9, #0
   24cd4:	beq	24ce0 <__assert_fail@plt+0x12fdc>
   24cd8:	ldr	r0, [sp, #8]
   24cdc:	bl	1a22c <__assert_fail@plt+0x8528>
   24ce0:	ldr	r0, [r5, #100]	; 0x64
   24ce4:	ldr	r0, [r0, r6, lsl #2]
   24ce8:	cmp	r0, #0
   24cec:	movw	r9, #65280	; 0xff00
   24cf0:	movt	r9, #3
   24cf4:	bne	24d04 <__assert_fail@plt+0x13000>
   24cf8:	ldr	r0, [sp, #16]
   24cfc:	cmp	r0, #0
   24d00:	bne	24d18 <__assert_fail@plt+0x13014>
   24d04:	add	r8, r8, #1
   24d08:	ldr	r0, [r4, #8]
   24d0c:	cmp	r8, r0
   24d10:	blt	24b8c <__assert_fail@plt+0x12e88>
   24d14:	mov	r0, #0
   24d18:	sub	sp, fp, #28
   24d1c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   24d20:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   24d24:	add	fp, sp, #28
   24d28:	sub	sp, sp, #68	; 0x44
   24d2c:	sub	sp, sp, #14336	; 0x3800
   24d30:	mov	r4, r1
   24d34:	mov	r7, r0
   24d38:	mov	r6, #0
   24d3c:	str	r6, [r1, #44]	; 0x2c
   24d40:	str	r6, [r1, #48]	; 0x30
   24d44:	sub	lr, fp, #4096	; 0x1000
   24d48:	sub	r2, lr, #2128	; 0x850
   24d4c:	add	r3, sp, #16
   24d50:	bl	251d0 <__assert_fail@plt+0x134cc>
   24d54:	cmp	r0, #0
   24d58:	ble	250e8 <__assert_fail@plt+0x133e4>
   24d5c:	mov	r5, r0
   24d60:	str	r4, [sp, #4]
   24d64:	add	r1, r0, #1
   24d68:	sub	r0, fp, #3120	; 0xc30
   24d6c:	bl	20a38 <__assert_fail@plt+0xed34>
   24d70:	str	r0, [fp, #-36]	; 0xffffffdc
   24d74:	cmp	r0, #0
   24d78:	bne	250b4 <__assert_fail@plt+0x133b0>
   24d7c:	sub	r0, fp, #3152	; 0xc50
   24d80:	bl	25700 <__assert_fail@plt+0x139fc>
   24d84:	sub	r9, fp, #3120	; 0xc30
   24d88:	sub	lr, fp, #1024	; 0x400
   24d8c:	sub	r6, lr, #36	; 0x24
   24d90:	mov	sl, #0
   24d94:	mov	r0, #0
   24d98:	str	r0, [sp, #8]
   24d9c:	str	r5, [sp, #12]
   24da0:	mov	r0, #0
   24da4:	str	r0, [fp, #-3116]	; 0xfffff3d4
   24da8:	add	r0, sl, sl, lsl #1
   24dac:	sub	lr, fp, #4096	; 0x1000
   24db0:	sub	r1, lr, #2128	; 0x850
   24db4:	add	r0, r1, r0, lsl #2
   24db8:	mov	r4, r0
   24dbc:	ldr	r1, [r4, #4]!
   24dc0:	cmp	r1, #1
   24dc4:	blt	24e28 <__assert_fail@plt+0x13124>
   24dc8:	ldr	r5, [r0, #8]
   24dcc:	mov	r6, #0
   24dd0:	ldr	r1, [fp, #-36]	; 0xffffffdc
   24dd4:	ldr	r0, [r5, r6, lsl #2]
   24dd8:	ldr	r2, [r7, #12]
   24ddc:	ldr	r0, [r2, r0, lsl #2]
   24de0:	cmn	r0, #1
   24de4:	beq	24e08 <__assert_fail@plt+0x13104>
   24de8:	ldr	r1, [r7, #24]
   24dec:	add	r0, r0, r0, lsl #1
   24df0:	add	r1, r1, r0, lsl #2
   24df4:	mov	r0, r9
   24df8:	bl	20cf4 <__assert_fail@plt+0xeff0>
   24dfc:	mov	r1, #0
   24e00:	cmp	r0, #0
   24e04:	bne	250ac <__assert_fail@plt+0x133a8>
   24e08:	ldr	r0, [r4]
   24e0c:	add	r6, r6, #1
   24e10:	cmp	r6, r0
   24e14:	blt	24dd4 <__assert_fail@plt+0x130d0>
   24e18:	str	r1, [fp, #-36]	; 0xffffffdc
   24e1c:	ldr	r5, [sp, #12]
   24e20:	sub	lr, fp, #1024	; 0x400
   24e24:	sub	r6, lr, #36	; 0x24
   24e28:	sub	r0, fp, #36	; 0x24
   24e2c:	mov	r1, r7
   24e30:	mov	r2, r9
   24e34:	mov	r3, #0
   24e38:	bl	211e0 <__assert_fail@plt+0xf4dc>
   24e3c:	mov	r8, r0
   24e40:	str	r0, [r6, sl, lsl #2]
   24e44:	cmp	r0, #0
   24e48:	bne	24e58 <__assert_fail@plt+0x13154>
   24e4c:	ldr	r0, [fp, #-36]	; 0xffffffdc
   24e50:	cmp	r0, #0
   24e54:	bne	250b4 <__assert_fail@plt+0x133b0>
   24e58:	ldrsb	r0, [r8, #52]	; 0x34
   24e5c:	cmn	r0, #1
   24e60:	ble	24e84 <__assert_fail@plt+0x13180>
   24e64:	sub	lr, fp, #2048	; 0x800
   24e68:	sub	r0, lr, #36	; 0x24
   24e6c:	str	r8, [r0, sl, lsl #2]
   24e70:	ldr	r0, [r6, sl, lsl #2]
   24e74:	sub	lr, fp, #3072	; 0xc00
   24e78:	sub	r1, lr, #36	; 0x24
   24e7c:	str	r0, [r1, sl, lsl #2]
   24e80:	b	24f10 <__assert_fail@plt+0x1320c>
   24e84:	sub	r0, fp, #36	; 0x24
   24e88:	mov	r1, r7
   24e8c:	mov	r2, r9
   24e90:	mov	r3, #1
   24e94:	bl	211e0 <__assert_fail@plt+0xf4dc>
   24e98:	sub	lr, fp, #2048	; 0x800
   24e9c:	sub	r1, lr, #36	; 0x24
   24ea0:	str	r0, [r1, sl, lsl #2]
   24ea4:	cmp	r0, #0
   24ea8:	bne	24eb8 <__assert_fail@plt+0x131b4>
   24eac:	ldr	r1, [fp, #-36]	; 0xffffffdc
   24eb0:	cmp	r1, #0
   24eb4:	bne	250b4 <__assert_fail@plt+0x133b0>
   24eb8:	cmp	r8, r0
   24ebc:	beq	24edc <__assert_fail@plt+0x131d8>
   24ec0:	ldr	r0, [r7, #92]	; 0x5c
   24ec4:	cmp	r0, #1
   24ec8:	mov	r0, #0
   24ecc:	movwgt	r0, #1
   24ed0:	ldr	r1, [sp, #8]
   24ed4:	orr	r1, r1, r0
   24ed8:	str	r1, [sp, #8]
   24edc:	sub	r0, fp, #36	; 0x24
   24ee0:	mov	r1, r7
   24ee4:	mov	r2, r9
   24ee8:	mov	r3, #2
   24eec:	bl	211e0 <__assert_fail@plt+0xf4dc>
   24ef0:	sub	lr, fp, #3072	; 0xc00
   24ef4:	sub	r1, lr, #36	; 0x24
   24ef8:	str	r0, [r1, sl, lsl #2]
   24efc:	cmp	r0, #0
   24f00:	bne	24f10 <__assert_fail@plt+0x1320c>
   24f04:	ldr	r0, [fp, #-36]	; 0xffffffdc
   24f08:	cmp	r0, #0
   24f0c:	bne	250b4 <__assert_fail@plt+0x133b0>
   24f10:	add	r0, sp, #16
   24f14:	add	r1, r0, sl, lsl #5
   24f18:	sub	r0, fp, #3152	; 0xc50
   24f1c:	bl	25710 <__assert_fail@plt+0x13a0c>
   24f20:	add	sl, sl, #1
   24f24:	cmp	sl, r5
   24f28:	blt	24da0 <__assert_fail@plt+0x1309c>
   24f2c:	ldr	r0, [sp, #8]
   24f30:	tst	r0, #1
   24f34:	bne	2510c <__assert_fail@plt+0x13408>
   24f38:	mov	r0, #4
   24f3c:	mov	r1, #256	; 0x100
   24f40:	bl	19f8c <__assert_fail@plt+0x8288>
   24f44:	mov	r8, r0
   24f48:	ldr	r0, [sp, #4]
   24f4c:	str	r8, [r0, #44]	; 0x2c
   24f50:	cmp	r8, #0
   24f54:	beq	250b4 <__assert_fail@plt+0x133b0>
   24f58:	mov	r0, #0
   24f5c:	mov	r1, #0
   24f60:	add	r5, sp, #16
   24f64:	mov	r9, r5
   24f68:	sub	r2, fp, #3152	; 0xc50
   24f6c:	ldr	r2, [r2, r1, lsl #2]
   24f70:	cmp	r2, #0
   24f74:	beq	24fec <__assert_fail@plt+0x132e8>
   24f78:	add	r3, r7, r1, lsl #2
   24f7c:	add	ip, r3, #96	; 0x60
   24f80:	lsl	r4, r1, #5
   24f84:	mov	r6, #1
   24f88:	b	24fcc <__assert_fail@plt+0x132c8>
   24f8c:	mov	lr, #0
   24f90:	ldr	r3, [r9, lr, lsl #3]
   24f94:	add	lr, lr, #4
   24f98:	tst	r3, r6
   24f9c:	beq	24f90 <__assert_fail@plt+0x1328c>
   24fa0:	ldr	r3, [ip]
   24fa4:	tst	r3, r6
   24fa8:	sub	r3, fp, #2048	; 0x800
   24fac:	sub	r3, r3, #36	; 0x24
   24fb0:	sub	r5, fp, #1024	; 0x400
   24fb4:	sub	r5, r5, #36	; 0x24
   24fb8:	moveq	r3, r5
   24fbc:	add	r3, r3, lr
   24fc0:	ldr	r3, [r3, #-4]
   24fc4:	str	r3, [r8, r4, lsl #2]
   24fc8:	b	24fd4 <__assert_fail@plt+0x132d0>
   24fcc:	tst	r2, #1
   24fd0:	bne	24f8c <__assert_fail@plt+0x13288>
   24fd4:	add	r4, r4, #1
   24fd8:	lsr	r3, r2, #1
   24fdc:	lsl	r6, r6, #1
   24fe0:	cmp	r0, r2, lsr #1
   24fe4:	mov	r2, r3
   24fe8:	bne	24fcc <__assert_fail@plt+0x132c8>
   24fec:	add	r9, r9, #4
   24ff0:	add	r1, r1, #1
   24ff4:	cmp	r1, #8
   24ff8:	bne	24f68 <__assert_fail@plt+0x13264>
   24ffc:	sub	r0, fp, #3152	; 0xc50
   25000:	mov	r1, #10
   25004:	bl	22a48 <__assert_fail@plt+0x10d44>
   25008:	cmp	r0, #0
   2500c:	beq	2506c <__assert_fail@plt+0x13368>
   25010:	ldr	r0, [sp, #12]
   25014:	cmp	r0, #1
   25018:	blt	2506c <__assert_fail@plt+0x13368>
   2501c:	mov	r4, #0
   25020:	add	r5, sp, #16
   25024:	mov	r0, r5
   25028:	mov	r1, #10
   2502c:	bl	22a48 <__assert_fail@plt+0x10d44>
   25030:	cmp	r0, #0
   25034:	bne	25050 <__assert_fail@plt+0x1334c>
   25038:	add	r5, r5, #32
   2503c:	add	r4, r4, #1
   25040:	ldr	r0, [sp, #12]
   25044:	cmp	r4, r0
   25048:	blt	25024 <__assert_fail@plt+0x13320>
   2504c:	b	2506c <__assert_fail@plt+0x13368>
   25050:	sub	lr, fp, #3072	; 0xc00
   25054:	sub	r0, lr, #36	; 0x24
   25058:	ldr	r0, [r0, r4, lsl #2]
   2505c:	str	r0, [r8, #40]	; 0x28
   25060:	ldr	r1, [sp, #8]
   25064:	tst	r1, #1
   25068:	strne	r0, [r8, #1064]	; 0x428
   2506c:	ldr	r0, [fp, #-3112]	; 0xfffff3d8
   25070:	bl	1a22c <__assert_fail@plt+0x8528>
   25074:	mov	r6, #1
   25078:	ldr	r5, [sp, #12]
   2507c:	cmp	r5, #1
   25080:	blt	250a0 <__assert_fail@plt+0x1339c>
   25084:	sub	lr, fp, #4096	; 0x1000
   25088:	sub	r0, lr, #2128	; 0x850
   2508c:	add	r4, r0, #8
   25090:	ldr	r0, [r4], #12
   25094:	bl	1a22c <__assert_fail@plt+0x8528>
   25098:	subs	r5, r5, #1
   2509c:	bne	25090 <__assert_fail@plt+0x1338c>
   250a0:	mov	r0, r6
   250a4:	sub	sp, fp, #28
   250a8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   250ac:	str	r0, [fp, #-36]	; 0xffffffdc
   250b0:	ldr	r5, [sp, #12]
   250b4:	ldr	r0, [fp, #-3112]	; 0xfffff3d8
   250b8:	bl	1a22c <__assert_fail@plt+0x8528>
   250bc:	mov	r6, #0
   250c0:	cmp	r5, #1
   250c4:	blt	250a0 <__assert_fail@plt+0x1339c>
   250c8:	sub	lr, fp, #4096	; 0x1000
   250cc:	sub	r0, lr, #2128	; 0x850
   250d0:	add	r4, r0, #8
   250d4:	ldr	r0, [r4], #12
   250d8:	bl	1a22c <__assert_fail@plt+0x8528>
   250dc:	subs	r5, r5, #1
   250e0:	bne	250d4 <__assert_fail@plt+0x133d0>
   250e4:	b	250a0 <__assert_fail@plt+0x1339c>
   250e8:	bne	250a0 <__assert_fail@plt+0x1339c>
   250ec:	mov	r0, #4
   250f0:	mov	r1, #256	; 0x100
   250f4:	bl	19f8c <__assert_fail@plt+0x8288>
   250f8:	mov	r6, r0
   250fc:	str	r0, [r4, #44]	; 0x2c
   25100:	cmp	r0, #0
   25104:	movwne	r6, #1
   25108:	b	250a0 <__assert_fail@plt+0x1339c>
   2510c:	mov	r0, #4
   25110:	mov	r1, #512	; 0x200
   25114:	bl	19f8c <__assert_fail@plt+0x8288>
   25118:	mov	r8, r0
   2511c:	ldr	r0, [sp, #4]
   25120:	str	r8, [r0, #48]	; 0x30
   25124:	cmp	r8, #0
   25128:	beq	250b4 <__assert_fail@plt+0x133b0>
   2512c:	sub	ip, r6, #4
   25130:	sub	lr, fp, #2048	; 0x800
   25134:	sub	r0, lr, #36	; 0x24
   25138:	sub	lr, r0, #4
   2513c:	mov	r2, #0
   25140:	add	r3, sp, #16
   25144:	mov	r7, #0
   25148:	sub	r0, fp, #3152	; 0xc50
   2514c:	ldr	r5, [r0, r7, lsl #2]
   25150:	cmp	r5, #0
   25154:	beq	251bc <__assert_fail@plt+0x134b8>
   25158:	lsl	r0, r7, #5
   2515c:	mov	r1, #1
   25160:	b	2519c <__assert_fail@plt+0x13498>
   25164:	mov	r4, r3
   25168:	mov	sl, ip
   2516c:	mov	r9, lr
   25170:	add	sl, sl, #4
   25174:	add	r9, r9, #4
   25178:	ldr	r6, [r4], #32
   2517c:	tst	r6, r1
   25180:	beq	25170 <__assert_fail@plt+0x1346c>
   25184:	ldr	r4, [sl]
   25188:	mov	r6, r8
   2518c:	str	r4, [r6, r0, lsl #2]!
   25190:	ldr	r4, [r9]
   25194:	str	r4, [r6, #1024]	; 0x400
   25198:	b	251a4 <__assert_fail@plt+0x134a0>
   2519c:	tst	r5, #1
   251a0:	bne	25164 <__assert_fail@plt+0x13460>
   251a4:	add	r0, r0, #1
   251a8:	lsr	r4, r5, #1
   251ac:	lsl	r1, r1, #1
   251b0:	cmp	r2, r5, lsr #1
   251b4:	mov	r5, r4
   251b8:	bne	2519c <__assert_fail@plt+0x13498>
   251bc:	add	r3, r3, #4
   251c0:	add	r7, r7, #1
   251c4:	cmp	r7, #8
   251c8:	bne	25148 <__assert_fail@plt+0x13444>
   251cc:	b	24ffc <__assert_fail@plt+0x132f8>
   251d0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   251d4:	add	fp, sp, #28
   251d8:	sub	sp, sp, #148	; 0x94
   251dc:	str	r3, [sp, #40]	; 0x28
   251e0:	str	r2, [sp, #36]	; 0x24
   251e4:	mov	r8, r1
   251e8:	mov	sl, r0
   251ec:	sub	r7, fp, #64	; 0x40
   251f0:	mov	r0, r7
   251f4:	bl	25700 <__assert_fail@plt+0x139fc>
   251f8:	ldr	r0, [r8, #8]
   251fc:	cmp	r0, #1
   25200:	blt	256bc <__assert_fail@plt+0x139b8>
   25204:	add	r4, sl, #96	; 0x60
   25208:	mov	r6, #0
   2520c:	add	r5, sp, #80	; 0x50
   25210:	mov	r0, #0
   25214:	str	r0, [sp, #44]	; 0x2c
   25218:	str	r8, [sp, #16]
   2521c:	stm	sp, {r4, sl}
   25220:	ldr	r0, [r8, #12]
   25224:	ldr	r0, [r0, r6, lsl #2]
   25228:	ldr	r1, [sl]
   2522c:	add	r3, r1, r0, lsl #3
   25230:	ldr	r9, [r3, #4]!
   25234:	uxtb	r2, r9
   25238:	cmp	r2, #1
   2523c:	str	r2, [sp, #32]
   25240:	bne	2531c <__assert_fail@plt+0x13618>
   25244:	str	r3, [sp, #12]
   25248:	str	r0, [sp, #28]
   2524c:	str	r1, [sp, #24]
   25250:	ldrb	r1, [r1, r0, lsl #3]
   25254:	mov	r0, r7
   25258:	bl	1ef10 <__assert_fail@plt+0xd20c>
   2525c:	movw	r0, #65280	; 0xff00
   25260:	movt	r0, #3
   25264:	ands	r0, r9, r0
   25268:	beq	254b8 <__assert_fail@plt+0x137b4>
   2526c:	tst	r9, #8192	; 0x2000
   25270:	beq	252a4 <__assert_fail@plt+0x135a0>
   25274:	mov	r0, r7
   25278:	mov	r1, #10
   2527c:	bl	22a48 <__assert_fail@plt+0x10d44>
   25280:	str	r0, [sp, #8]
   25284:	mov	r0, r7
   25288:	bl	25700 <__assert_fail@plt+0x139fc>
   2528c:	ldr	r0, [sp, #8]
   25290:	cmp	r0, #0
   25294:	beq	25694 <__assert_fail@plt+0x13990>
   25298:	mov	r0, r7
   2529c:	mov	r1, #10
   252a0:	bl	1ef10 <__assert_fail@plt+0xd20c>
   252a4:	tst	r9, #32768	; 0x8000
   252a8:	bne	25478 <__assert_fail@plt+0x13774>
   252ac:	tst	r9, #1024	; 0x400
   252b0:	beq	2540c <__assert_fail@plt+0x13708>
   252b4:	ldr	r0, [sp, #32]
   252b8:	cmp	r0, #1
   252bc:	bne	252d0 <__assert_fail@plt+0x135cc>
   252c0:	ldr	r0, [sp, #12]
   252c4:	ldrb	r0, [r0, #2]
   252c8:	tst	r0, #64	; 0x40
   252cc:	beq	25478 <__assert_fail@plt+0x13774>
   252d0:	mov	ip, r6
   252d4:	ldr	r0, [sl, #92]	; 0x5c
   252d8:	cmp	r0, #1
   252dc:	ble	253d8 <__assert_fail@plt+0x136d4>
   252e0:	ldr	r1, [sl, #60]	; 0x3c
   252e4:	mov	r0, #0
   252e8:	mov	r2, #0
   252ec:	ldr	r3, [r4, r2, lsl #2]
   252f0:	ldr	r6, [r1, r2, lsl #2]
   252f4:	mvn	r6, r6
   252f8:	orr	r3, r3, r6
   252fc:	ldr	r6, [r7, r2, lsl #2]
   25300:	and	r3, r6, r3
   25304:	str	r3, [r7, r2, lsl #2]
   25308:	orr	r0, r3, r0
   2530c:	add	r2, r2, #1
   25310:	cmp	r2, #8
   25314:	bne	252ec <__assert_fail@plt+0x135e8>
   25318:	b	25400 <__assert_fail@plt+0x136fc>
   2531c:	cmp	r2, #7
   25320:	beq	25350 <__assert_fail@plt+0x1364c>
   25324:	cmp	r2, #5
   25328:	beq	25374 <__assert_fail@plt+0x13670>
   2532c:	cmp	r2, #3
   25330:	bne	25694 <__assert_fail@plt+0x13990>
   25334:	str	r3, [sp, #12]
   25338:	str	r0, [sp, #28]
   2533c:	str	r1, [sp, #24]
   25340:	ldr	r1, [r1, r0, lsl #3]
   25344:	mov	r0, r7
   25348:	bl	25710 <__assert_fail@plt+0x13a0c>
   2534c:	b	2525c <__assert_fail@plt+0x13558>
   25350:	str	r3, [sp, #12]
   25354:	str	r1, [sp, #24]
   25358:	str	r0, [sp, #28]
   2535c:	mvn	r0, #0
   25360:	str	r0, [fp, #-52]	; 0xffffffcc
   25364:	str	r0, [fp, #-56]	; 0xffffffc8
   25368:	str	r0, [fp, #-60]	; 0xffffffc4
   2536c:	str	r0, [fp, #-64]	; 0xffffffc0
   25370:	b	253a4 <__assert_fail@plt+0x136a0>
   25374:	str	r3, [sp, #12]
   25378:	str	r1, [sp, #24]
   2537c:	str	r0, [sp, #28]
   25380:	ldr	r0, [sl, #92]	; 0x5c
   25384:	cmp	r0, #2
   25388:	blt	2539c <__assert_fail@plt+0x13698>
   2538c:	ldr	r1, [sl, #60]	; 0x3c
   25390:	mov	r0, r7
   25394:	bl	25710 <__assert_fail@plt+0x13a0c>
   25398:	b	253a4 <__assert_fail@plt+0x136a0>
   2539c:	mov	r0, r7
   253a0:	bl	25734 <__assert_fail@plt+0x13a30>
   253a4:	ldrb	r0, [sl, #128]	; 0x80
   253a8:	tst	r0, #64	; 0x40
   253ac:	bne	253bc <__assert_fail@plt+0x136b8>
   253b0:	mov	r0, r7
   253b4:	mov	r1, #10
   253b8:	bl	2575c <__assert_fail@plt+0x13a58>
   253bc:	ldrb	r0, [sl, #128]	; 0x80
   253c0:	tst	r0, #128	; 0x80
   253c4:	beq	2525c <__assert_fail@plt+0x13558>
   253c8:	mov	r0, r7
   253cc:	mov	r1, #0
   253d0:	bl	2575c <__assert_fail@plt+0x13a58>
   253d4:	b	2525c <__assert_fail@plt+0x13558>
   253d8:	mov	r0, #0
   253dc:	mov	r1, #0
   253e0:	ldr	r2, [r4, r1, lsl #2]
   253e4:	ldr	r3, [r7, r1, lsl #2]
   253e8:	and	r2, r3, r2
   253ec:	str	r2, [r7, r1, lsl #2]
   253f0:	orr	r0, r2, r0
   253f4:	add	r1, r1, #1
   253f8:	cmp	r1, #8
   253fc:	bne	253e0 <__assert_fail@plt+0x136dc>
   25400:	cmp	r0, #0
   25404:	mov	r6, ip
   25408:	beq	25694 <__assert_fail@plt+0x13990>
   2540c:	tst	r9, #2048	; 0x800
   25410:	beq	254b8 <__assert_fail@plt+0x137b4>
   25414:	ldr	r0, [sp, #32]
   25418:	cmp	r0, #1
   2541c:	bne	25430 <__assert_fail@plt+0x1372c>
   25420:	ldr	r0, [sp, #12]
   25424:	ldrb	r0, [r0, #2]
   25428:	tst	r0, #64	; 0x40
   2542c:	bne	25478 <__assert_fail@plt+0x13774>
   25430:	ldr	r0, [sl, #92]	; 0x5c
   25434:	mov	ip, r6
   25438:	cmp	r0, #1
   2543c:	ble	25484 <__assert_fail@plt+0x13780>
   25440:	ldr	r1, [sl, #60]	; 0x3c
   25444:	mov	r0, #0
   25448:	mov	r2, #0
   2544c:	ldr	r3, [r4, r2, lsl #2]
   25450:	ldr	r6, [r1, r2, lsl #2]
   25454:	and	r3, r6, r3
   25458:	ldr	r6, [r7, r2, lsl #2]
   2545c:	bic	r3, r6, r3
   25460:	str	r3, [r7, r2, lsl #2]
   25464:	orr	r0, r3, r0
   25468:	add	r2, r2, #1
   2546c:	cmp	r2, #8
   25470:	bne	2544c <__assert_fail@plt+0x13748>
   25474:	b	254ac <__assert_fail@plt+0x137a8>
   25478:	mov	r0, r7
   2547c:	bl	25700 <__assert_fail@plt+0x139fc>
   25480:	b	25694 <__assert_fail@plt+0x13990>
   25484:	mov	r0, #0
   25488:	mov	r1, #0
   2548c:	ldr	r2, [r4, r1, lsl #2]
   25490:	ldr	r3, [r7, r1, lsl #2]
   25494:	bic	r2, r3, r2
   25498:	str	r2, [r7, r1, lsl #2]
   2549c:	orr	r0, r2, r0
   254a0:	add	r1, r1, #1
   254a4:	cmp	r1, #8
   254a8:	bne	2548c <__assert_fail@plt+0x13788>
   254ac:	cmp	r0, #0
   254b0:	mov	r6, ip
   254b4:	beq	25694 <__assert_fail@plt+0x13990>
   254b8:	str	r6, [sp, #20]
   254bc:	ldr	r9, [sp, #44]	; 0x2c
   254c0:	mov	r6, #0
   254c4:	cmp	r9, #1
   254c8:	blt	2561c <__assert_fail@plt+0x13918>
   254cc:	ldr	sl, [sp, #40]	; 0x28
   254d0:	ldr	r4, [sp, #32]
   254d4:	cmp	r4, #1
   254d8:	bne	254fc <__assert_fail@plt+0x137f8>
   254dc:	ldr	r0, [sp, #28]
   254e0:	ldr	r1, [sp, #24]
   254e4:	ldrb	r1, [r1, r0, lsl #3]
   254e8:	ldr	r0, [sp, #40]	; 0x28
   254ec:	add	r0, r0, r6, lsl #5
   254f0:	bl	22a48 <__assert_fail@plt+0x10d44>
   254f4:	cmp	r0, #0
   254f8:	beq	2560c <__assert_fail@plt+0x13908>
   254fc:	mov	r0, #0
   25500:	mov	r1, #0
   25504:	ldr	r2, [r7, r1, lsl #2]
   25508:	ldr	r3, [sl, r1, lsl #2]
   2550c:	and	r2, r3, r2
   25510:	str	r2, [r5, r1, lsl #2]
   25514:	orr	r0, r2, r0
   25518:	add	r1, r1, #1
   2551c:	cmp	r1, #8
   25520:	bne	25504 <__assert_fail@plt+0x13800>
   25524:	cmp	r0, #0
   25528:	beq	2560c <__assert_fail@plt+0x13908>
   2552c:	mov	r8, r9
   25530:	mov	r9, #0
   25534:	mov	r0, #0
   25538:	mov	r1, #0
   2553c:	add	r5, sp, #48	; 0x30
   25540:	ldr	r2, [r7, r1, lsl #2]
   25544:	ldr	r3, [sl, r1, lsl #2]
   25548:	bic	r4, r3, r2
   2554c:	str	r4, [r5, r1, lsl #2]
   25550:	bic	r2, r2, r3
   25554:	str	r2, [r7, r1, lsl #2]
   25558:	orr	r9, r2, r9
   2555c:	orr	r0, r4, r0
   25560:	add	r1, r1, #1
   25564:	cmp	r1, #8
   25568:	bne	25540 <__assert_fail@plt+0x1383c>
   2556c:	cmp	r0, #0
   25570:	beq	255c0 <__assert_fail@plt+0x138bc>
   25574:	ldr	r4, [sp, #40]	; 0x28
   25578:	add	r0, r4, r8, lsl #5
   2557c:	add	r1, sp, #48	; 0x30
   25580:	bl	25780 <__assert_fail@plt+0x13a7c>
   25584:	add	r0, r4, r6, lsl #5
   25588:	add	r5, sp, #80	; 0x50
   2558c:	mov	r1, r5
   25590:	bl	25780 <__assert_fail@plt+0x13a7c>
   25594:	add	r0, r8, r8, lsl #1
   25598:	ldr	r2, [sp, #36]	; 0x24
   2559c:	add	r0, r2, r0, lsl #2
   255a0:	add	r1, r6, r6, lsl #1
   255a4:	add	r1, r2, r1, lsl #2
   255a8:	bl	210f8 <__assert_fail@plt+0xf3f4>
   255ac:	cmp	r0, #0
   255b0:	bne	256d0 <__assert_fail@plt+0x139cc>
   255b4:	add	r8, r8, #1
   255b8:	str	r8, [sp, #44]	; 0x2c
   255bc:	b	255c8 <__assert_fail@plt+0x138c4>
   255c0:	str	r8, [sp, #44]	; 0x2c
   255c4:	add	r5, sp, #80	; 0x50
   255c8:	ldr	r8, [sp, #16]
   255cc:	ldr	r0, [r8, #12]
   255d0:	ldr	r1, [sp, #20]
   255d4:	ldr	r1, [r0, r1, lsl #2]
   255d8:	add	r0, r6, r6, lsl #1
   255dc:	ldr	r2, [sp, #36]	; 0x24
   255e0:	add	r0, r2, r0, lsl #2
   255e4:	bl	20f10 <__assert_fail@plt+0xf20c>
   255e8:	cmp	r0, #0
   255ec:	beq	256d4 <__assert_fail@plt+0x139d0>
   255f0:	cmp	r9, #0
   255f4:	mov	r0, #0
   255f8:	movweq	r0, #17
   255fc:	cmp	r0, #0
   25600:	bne	25674 <__assert_fail@plt+0x13970>
   25604:	ldr	r9, [sp, #44]	; 0x2c
   25608:	ldr	r4, [sp, #32]
   2560c:	add	sl, sl, #32
   25610:	add	r6, r6, #1
   25614:	cmp	r6, r9
   25618:	blt	254d4 <__assert_fail@plt+0x137d0>
   2561c:	cmp	r6, r9
   25620:	bne	25688 <__assert_fail@plt+0x13984>
   25624:	ldr	r0, [sp, #40]	; 0x28
   25628:	add	r0, r0, r9, lsl #5
   2562c:	mov	r1, r7
   25630:	bl	25780 <__assert_fail@plt+0x13a7c>
   25634:	ldr	r0, [r8, #12]
   25638:	ldr	r6, [sp, #20]
   2563c:	ldr	r1, [r0, r6, lsl #2]
   25640:	add	r0, r9, r9, lsl #1
   25644:	ldr	r2, [sp, #36]	; 0x24
   25648:	add	r0, r2, r0, lsl #2
   2564c:	bl	207e0 <__assert_fail@plt+0xeadc>
   25650:	cmp	r0, #0
   25654:	ldr	sl, [sp, #4]
   25658:	bne	256d8 <__assert_fail@plt+0x139d4>
   2565c:	mov	r0, r7
   25660:	bl	25700 <__assert_fail@plt+0x139fc>
   25664:	add	r9, r9, #1
   25668:	str	r9, [sp, #44]	; 0x2c
   2566c:	ldr	r4, [sp]
   25670:	b	25694 <__assert_fail@plt+0x13990>
   25674:	cmp	r0, #17
   25678:	bne	256a8 <__assert_fail@plt+0x139a4>
   2567c:	ldr	r9, [sp, #44]	; 0x2c
   25680:	cmp	r6, r9
   25684:	beq	25624 <__assert_fail@plt+0x13920>
   25688:	str	r9, [sp, #44]	; 0x2c
   2568c:	ldm	sp, {r4, sl}
   25690:	ldr	r6, [sp, #20]
   25694:	ldr	r0, [r8, #8]
   25698:	add	r6, r6, #1
   2569c:	cmp	r6, r0
   256a0:	blt	25220 <__assert_fail@plt+0x1351c>
   256a4:	b	256c4 <__assert_fail@plt+0x139c0>
   256a8:	cmp	r9, #0
   256ac:	ldm	sp, {r4, sl}
   256b0:	ldr	r6, [sp, #20]
   256b4:	bne	25694 <__assert_fail@plt+0x13990>
   256b8:	b	256c4 <__assert_fail@plt+0x139c0>
   256bc:	mov	r0, #0
   256c0:	str	r0, [sp, #44]	; 0x2c
   256c4:	ldr	r0, [sp, #44]	; 0x2c
   256c8:	sub	sp, fp, #28
   256cc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   256d0:	str	r8, [sp, #44]	; 0x2c
   256d4:	ldr	r9, [sp, #44]	; 0x2c
   256d8:	cmp	r9, #1
   256dc:	blt	256f8 <__assert_fail@plt+0x139f4>
   256e0:	ldr	r0, [sp, #36]	; 0x24
   256e4:	add	r5, r0, #8
   256e8:	ldr	r0, [r5], #12
   256ec:	bl	1a22c <__assert_fail@plt+0x8528>
   256f0:	subs	r9, r9, #1
   256f4:	bne	256e8 <__assert_fail@plt+0x139e4>
   256f8:	mvn	r0, #0
   256fc:	b	256c0 <__assert_fail@plt+0x139bc>
   25700:	vmov.i32	q8, #0	; 0x00000000
   25704:	vst1.32	{d16-d17}, [r0]!
   25708:	vst1.32	{d16-d17}, [r0]
   2570c:	bx	lr
   25710:	mov	r2, #0
   25714:	ldr	ip, [r1, r2, lsl #2]
   25718:	ldr	r3, [r0, r2, lsl #2]
   2571c:	orr	r3, r3, ip
   25720:	str	r3, [r0, r2, lsl #2]
   25724:	add	r2, r2, #1
   25728:	cmp	r2, #8
   2572c:	bne	25714 <__assert_fail@plt+0x13a10>
   25730:	bx	lr
   25734:	mvn	r1, #0
   25738:	str	r1, [r0]
   2573c:	str	r1, [r0, #4]
   25740:	str	r1, [r0, #8]
   25744:	str	r1, [r0, #12]
   25748:	str	r1, [r0, #16]
   2574c:	str	r1, [r0, #20]
   25750:	str	r1, [r0, #24]
   25754:	str	r1, [r0, #28]
   25758:	bx	lr
   2575c:	asr	r2, r1, #31
   25760:	add	r2, r1, r2, lsr #27
   25764:	asr	r2, r2, #5
   25768:	ldr	ip, [r0, r2, lsl #2]
   2576c:	and	r1, r1, #31
   25770:	mov	r3, #1
   25774:	bic	r1, ip, r3, lsl r1
   25778:	str	r1, [r0, r2, lsl #2]
   2577c:	bx	lr
   25780:	vld1.32	{d16-d17}, [r1]!
   25784:	vld1.32	{d18-d19}, [r1]
   25788:	vst1.32	{d16-d17}, [r0]!
   2578c:	vst1.32	{d18-d19}, [r0]
   25790:	bx	lr
   25794:	ldr	r0, [r0]
   25798:	add	r0, r0, r1, lsl #3
   2579c:	ldr	r1, [r0, #4]
   257a0:	uxtb	r3, r1
   257a4:	mov	r0, #0
   257a8:	cmp	r3, #2
   257ac:	bne	25804 <__assert_fail@plt+0x13b00>
   257b0:	movw	r3, #65280	; 0xff00
   257b4:	movt	r3, #3
   257b8:	tst	r1, r3
   257bc:	moveq	r0, #1
   257c0:	bxeq	lr
   257c4:	ands	ip, r2, #1
   257c8:	bne	257d4 <__assert_fail@plt+0x13ad0>
   257cc:	ands	r3, r1, #1024	; 0x400
   257d0:	bne	25804 <__assert_fail@plt+0x13b00>
   257d4:	cmp	ip, #0
   257d8:	andsne	r3, r1, #2048	; 0x800
   257dc:	bne	25804 <__assert_fail@plt+0x13b00>
   257e0:	tst	r2, #2
   257e4:	bne	257f0 <__assert_fail@plt+0x13aec>
   257e8:	ands	r3, r1, #8192	; 0x2000
   257ec:	bxne	lr
   257f0:	and	r0, r1, #32768	; 0x8000
   257f4:	mov	r1, #1
   257f8:	eor	r0, r1, r0, lsr #15
   257fc:	and	r1, r2, #8
   25800:	orr	r0, r0, r1, lsr #3
   25804:	bx	lr
   25808:	stm	r0, {r1, r2, r3}
   2580c:	mov	r1, #0
   25810:	str	r1, [r0, #24]
   25814:	str	r1, [r0, #20]
   25818:	str	r1, [r0, #16]
   2581c:	ldr	r1, [sp]
   25820:	str	r1, [r0, #12]
   25824:	bx	lr
   25828:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2582c:	add	fp, sp, #28
   25830:	sub	sp, sp, #12
   25834:	mov	sl, r1
   25838:	mov	r6, r0
   2583c:	ldr	r1, [r1, #8]
   25840:	ldr	r5, [sl, #12]
   25844:	mov	r0, sp
   25848:	bl	207e0 <__assert_fail@plt+0xeadc>
   2584c:	cmp	r0, #0
   25850:	bne	2592c <__assert_fail@plt+0x13c28>
   25854:	mov	r3, sp
   25858:	mov	r0, r6
   2585c:	mov	r1, sl
   25860:	mov	r2, r5
   25864:	bl	259e0 <__assert_fail@plt+0x13cdc>
   25868:	cmp	r0, #0
   2586c:	bne	258f8 <__assert_fail@plt+0x13bf4>
   25870:	mov	r9, #0
   25874:	mov	r8, sp
   25878:	mov	r1, #0
   2587c:	cmp	r5, #1
   25880:	blt	25900 <__assert_fail@plt+0x13bfc>
   25884:	ldr	r0, [sl]
   25888:	ldr	r2, [r0, r5, lsl #2]
   2588c:	cmp	r2, #0
   25890:	mov	r4, #0
   25894:	addeq	r4, r1, #1
   25898:	ldr	r1, [r6, #120]	; 0x78
   2589c:	cmp	r4, r1
   258a0:	bgt	25908 <__assert_fail@plt+0x13c04>
   258a4:	str	r9, [sp, #4]
   258a8:	ldr	r0, [r6, #100]	; 0x64
   258ac:	sub	r5, r5, #1
   258b0:	ldr	r0, [r0, r5, lsl #2]
   258b4:	cmp	r0, #0
   258b8:	beq	258d8 <__assert_fail@plt+0x13bd4>
   258bc:	mov	r0, r6
   258c0:	mov	r1, sl
   258c4:	mov	r2, r5
   258c8:	mov	r3, r8
   258cc:	bl	25b08 <__assert_fail@plt+0x13e04>
   258d0:	cmp	r0, #0
   258d4:	bne	258f8 <__assert_fail@plt+0x13bf4>
   258d8:	mov	r0, r6
   258dc:	mov	r1, sl
   258e0:	mov	r2, r5
   258e4:	mov	r3, r8
   258e8:	bl	259e0 <__assert_fail@plt+0x13cdc>
   258ec:	cmp	r0, #0
   258f0:	mov	r1, r4
   258f4:	beq	2587c <__assert_fail@plt+0x13b78>
   258f8:	mov	r7, r0
   258fc:	b	25918 <__assert_fail@plt+0x13c14>
   25900:	mov	r7, #0
   25904:	b	25918 <__assert_fail@plt+0x13c14>
   25908:	lsl	r2, r5, #2
   2590c:	mov	r7, #0
   25910:	mov	r1, #0
   25914:	bl	11b60 <memset@plt>
   25918:	ldr	r0, [sp, #8]
   2591c:	bl	1a22c <__assert_fail@plt+0x8528>
   25920:	mov	r0, r7
   25924:	sub	sp, fp, #28
   25928:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2592c:	mov	r7, r0
   25930:	b	25920 <__assert_fail@plt+0x13c1c>
   25934:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   25938:	add	fp, sp, #28
   2593c:	sub	sp, sp, #20
   25940:	cmp	r3, #1
   25944:	blt	259d4 <__assert_fail@plt+0x13cd0>
   25948:	mov	r4, r3
   2594c:	mov	r5, r2
   25950:	mov	r6, r1
   25954:	mov	sl, r0
   25958:	mov	r7, #0
   2595c:	add	r8, sp, #4
   25960:	add	r9, sp, #16
   25964:	ldr	r0, [r5, r7, lsl #2]
   25968:	ldr	r1, [r6, r7, lsl #2]
   2596c:	cmp	r1, #0
   25970:	beq	259c4 <__assert_fail@plt+0x13cc0>
   25974:	cmp	r0, #0
   25978:	beq	259c8 <__assert_fail@plt+0x13cc4>
   2597c:	add	r1, r1, #4
   25980:	add	r2, r0, #4
   25984:	mov	r0, r8
   25988:	bl	23574 <__assert_fail@plt+0x11870>
   2598c:	str	r0, [sp, #16]
   25990:	cmp	r0, #0
   25994:	bne	259d8 <__assert_fail@plt+0x13cd4>
   25998:	mov	r0, r9
   2599c:	mov	r1, sl
   259a0:	mov	r2, r8
   259a4:	bl	24550 <__assert_fail@plt+0x1284c>
   259a8:	str	r0, [r6, r7, lsl #2]
   259ac:	ldr	r0, [sp, #12]
   259b0:	bl	1a22c <__assert_fail@plt+0x8528>
   259b4:	ldr	r0, [sp, #16]
   259b8:	cmp	r0, #0
   259bc:	beq	259c8 <__assert_fail@plt+0x13cc4>
   259c0:	b	259d8 <__assert_fail@plt+0x13cd4>
   259c4:	str	r0, [r6, r7, lsl #2]
   259c8:	add	r7, r7, #1
   259cc:	cmp	r7, r4
   259d0:	blt	25964 <__assert_fail@plt+0x13c60>
   259d4:	mov	r0, #0
   259d8:	sub	sp, fp, #28
   259dc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   259e0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   259e4:	add	fp, sp, #28
   259e8:	sub	sp, sp, #12
   259ec:	mov	sl, r2
   259f0:	mov	r8, r1
   259f4:	mov	r6, r0
   259f8:	ldr	r9, [r0, #84]	; 0x54
   259fc:	mov	r0, #0
   25a00:	str	r0, [sp, #8]
   25a04:	ldr	r1, [r6, #100]	; 0x64
   25a08:	ldr	r7, [r1, r2, lsl #2]
   25a0c:	cmp	r7, #0
   25a10:	mov	r4, r7
   25a14:	addne	r4, r4, #4
   25a18:	ldr	r1, [r3, #4]
   25a1c:	cmp	r1, #0
   25a20:	beq	25ab0 <__assert_fail@plt+0x13dac>
   25a24:	mov	r5, r3
   25a28:	cmp	r7, #0
   25a2c:	beq	25a80 <__assert_fail@plt+0x13d7c>
   25a30:	mov	r0, r9
   25a34:	mov	r1, r5
   25a38:	mov	r2, r4
   25a3c:	bl	25c4c <__assert_fail@plt+0x13f48>
   25a40:	str	r0, [sp, #8]
   25a44:	cmp	r0, #0
   25a48:	bne	25ad8 <__assert_fail@plt+0x13dd4>
   25a4c:	ldr	r0, [r8, #20]
   25a50:	cmp	r0, #0
   25a54:	beq	25a80 <__assert_fail@plt+0x13d7c>
   25a58:	ldr	r0, [r6, #116]	; 0x74
   25a5c:	stm	sp, {r0, sl}
   25a60:	add	r3, r8, #16
   25a64:	mov	r0, r9
   25a68:	mov	r1, r5
   25a6c:	mov	r2, r4
   25a70:	bl	25d24 <__assert_fail@plt+0x14020>
   25a74:	str	r0, [sp, #8]
   25a78:	cmp	r0, #0
   25a7c:	bne	25ad8 <__assert_fail@plt+0x13dd4>
   25a80:	add	r0, sp, #8
   25a84:	mov	r1, r9
   25a88:	mov	r2, r5
   25a8c:	bl	24550 <__assert_fail@plt+0x1284c>
   25a90:	ldr	r1, [r8]
   25a94:	str	r0, [r1, sl, lsl #2]
   25a98:	ldr	r0, [sp, #8]
   25a9c:	cmp	r0, #0
   25aa0:	bne	25ad8 <__assert_fail@plt+0x13dd4>
   25aa4:	cmp	r7, #0
   25aa8:	bne	25ac0 <__assert_fail@plt+0x13dbc>
   25aac:	b	25ad4 <__assert_fail@plt+0x13dd0>
   25ab0:	ldr	r1, [r8]
   25ab4:	str	r0, [r1, sl, lsl #2]
   25ab8:	cmp	r7, #0
   25abc:	beq	25ad4 <__assert_fail@plt+0x13dd0>
   25ac0:	ldr	r0, [r6, #100]	; 0x64
   25ac4:	ldr	r0, [r0, sl, lsl #2]
   25ac8:	ldrb	r0, [r0, #52]	; 0x34
   25acc:	tst	r0, #64	; 0x40
   25ad0:	bne	25ae0 <__assert_fail@plt+0x13ddc>
   25ad4:	mov	r0, #0
   25ad8:	sub	sp, fp, #28
   25adc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   25ae0:	mov	r0, r6
   25ae4:	mov	r1, r8
   25ae8:	mov	r2, sl
   25aec:	mov	r3, r4
   25af0:	bl	25f68 <__assert_fail@plt+0x14264>
   25af4:	str	r0, [sp, #8]
   25af8:	cmp	r0, #0
   25afc:	moveq	r0, #0
   25b00:	sub	sp, fp, #28
   25b04:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   25b08:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   25b0c:	add	fp, sp, #28
   25b10:	sub	sp, sp, #20
   25b14:	str	r3, [sp, #12]
   25b18:	mov	sl, r0
   25b1c:	ldr	r0, [r0, #100]	; 0x64
   25b20:	ldr	r7, [r0, r2, lsl #2]
   25b24:	ldr	r0, [r7, #20]
   25b28:	cmp	r0, #1
   25b2c:	blt	25c34 <__assert_fail@plt+0x13f30>
   25b30:	mov	r5, r2
   25b34:	mov	r6, r1
   25b38:	ldr	r8, [sl, #84]	; 0x54
   25b3c:	add	r0, r1, #16
   25b40:	str	r0, [sp, #8]
   25b44:	add	r0, r2, #1
   25b48:	str	r0, [sp, #16]
   25b4c:	mov	r9, #0
   25b50:	ldr	r0, [r7, #24]
   25b54:	ldr	r4, [r0, r9, lsl #2]
   25b58:	ldr	r0, [r8]
   25b5c:	add	r0, r0, r4, lsl #3
   25b60:	ldrb	r0, [r0, #6]
   25b64:	tst	r0, #16
   25b68:	beq	25b90 <__assert_fail@plt+0x13e8c>
   25b6c:	ldr	r0, [r6, #12]
   25b70:	str	r0, [sp]
   25b74:	mov	r0, sl
   25b78:	mov	r1, r6
   25b7c:	mov	r2, r4
   25b80:	mov	r3, r5
   25b84:	bl	26950 <__assert_fail@plt+0x14c4c>
   25b88:	cmp	r0, #0
   25b8c:	bne	25be0 <__assert_fail@plt+0x13edc>
   25b90:	ldr	r0, [r8]
   25b94:	add	r1, r0, r4, lsl #3
   25b98:	mov	r0, sl
   25b9c:	mov	r2, r5
   25ba0:	bl	24a28 <__assert_fail@plt+0x12d24>
   25ba4:	cmp	r0, #0
   25ba8:	beq	25c24 <__assert_fail@plt+0x13f20>
   25bac:	ldr	r0, [r6]
   25bb0:	ldr	r1, [sp, #16]
   25bb4:	ldr	r0, [r0, r1, lsl #2]
   25bb8:	cmp	r0, #0
   25bbc:	beq	25c24 <__assert_fail@plt+0x13f20>
   25bc0:	ldr	r1, [r8, #12]
   25bc4:	ldr	r1, [r1, r4, lsl #2]
   25bc8:	add	r0, r0, #4
   25bcc:	bl	21174 <__assert_fail@plt+0xf470>
   25bd0:	mov	r1, r0
   25bd4:	mov	r0, #1
   25bd8:	cmp	r1, #0
   25bdc:	beq	25c24 <__assert_fail@plt+0x13f20>
   25be0:	ldr	r1, [r6, #20]
   25be4:	cmp	r1, #0
   25be8:	beq	25c10 <__assert_fail@plt+0x13f0c>
   25bec:	ldr	r1, [r8, #12]
   25bf0:	ldr	r2, [r1, r4, lsl #2]
   25bf4:	stm	sp, {r4, r5}
   25bf8:	add	r3, r0, r5
   25bfc:	mov	r0, sl
   25c00:	ldr	r1, [sp, #8]
   25c04:	bl	265e8 <__assert_fail@plt+0x148e4>
   25c08:	cmp	r0, #0
   25c0c:	bne	25c24 <__assert_fail@plt+0x13f20>
   25c10:	ldr	r0, [sp, #12]
   25c14:	mov	r1, r4
   25c18:	bl	20f10 <__assert_fail@plt+0xf20c>
   25c1c:	cmp	r0, #0
   25c20:	beq	25c40 <__assert_fail@plt+0x13f3c>
   25c24:	add	r9, r9, #1
   25c28:	ldr	r0, [r7, #20]
   25c2c:	cmp	r9, r0
   25c30:	blt	25b50 <__assert_fail@plt+0x13e4c>
   25c34:	mov	r0, #0
   25c38:	sub	sp, fp, #28
   25c3c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   25c40:	mov	r0, #12
   25c44:	sub	sp, fp, #28
   25c48:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   25c4c:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   25c50:	add	fp, sp, #24
   25c54:	sub	sp, sp, #8
   25c58:	mov	r8, r2
   25c5c:	mov	r5, r1
   25c60:	mov	r6, r0
   25c64:	mov	r0, #0
   25c68:	str	r0, [sp, #4]
   25c6c:	add	r0, sp, #4
   25c70:	mov	r1, r6
   25c74:	mov	r2, r5
   25c78:	bl	24550 <__assert_fail@plt+0x1284c>
   25c7c:	ldr	r9, [sp, #4]
   25c80:	cmp	r9, #0
   25c84:	bne	25d10 <__assert_fail@plt+0x1400c>
   25c88:	mov	r7, r0
   25c8c:	ldr	r0, [r7, #28]!
   25c90:	cmp	r0, #0
   25c94:	bne	25cfc <__assert_fail@plt+0x13ff8>
   25c98:	ldr	r1, [r5, #4]
   25c9c:	mov	r0, r7
   25ca0:	bl	20a38 <__assert_fail@plt+0xed34>
   25ca4:	str	r0, [sp, #4]
   25ca8:	mov	r9, #12
   25cac:	cmp	r0, #0
   25cb0:	bne	25d10 <__assert_fail@plt+0x1400c>
   25cb4:	ldr	r0, [r5, #4]
   25cb8:	cmp	r0, #1
   25cbc:	blt	25cfc <__assert_fail@plt+0x13ff8>
   25cc0:	mov	r4, #0
   25cc4:	ldr	r0, [r5, #8]
   25cc8:	ldr	r0, [r0, r4, lsl #2]
   25ccc:	add	r0, r0, r0, lsl #1
   25cd0:	ldr	r1, [r6, #28]
   25cd4:	add	r1, r1, r0, lsl #2
   25cd8:	mov	r0, r7
   25cdc:	bl	20cf4 <__assert_fail@plt+0xeff0>
   25ce0:	cmp	r0, #0
   25ce4:	bne	25d1c <__assert_fail@plt+0x14018>
   25ce8:	add	r4, r4, #1
   25cec:	ldr	r1, [r5, #4]
   25cf0:	cmp	r4, r1
   25cf4:	blt	25cc4 <__assert_fail@plt+0x13fc0>
   25cf8:	str	r0, [sp, #4]
   25cfc:	mov	r0, r5
   25d00:	mov	r1, r8
   25d04:	mov	r2, r7
   25d08:	bl	26254 <__assert_fail@plt+0x14550>
   25d0c:	mov	r9, r0
   25d10:	mov	r0, r9
   25d14:	sub	sp, fp, #24
   25d18:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   25d1c:	str	r0, [sp, #4]
   25d20:	b	25d10 <__assert_fail@plt+0x1400c>
   25d24:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   25d28:	add	fp, sp, #28
   25d2c:	sub	sp, sp, #12
   25d30:	str	r2, [sp, #4]
   25d34:	mov	r6, r0
   25d38:	ldr	r0, [r3, #4]
   25d3c:	cmp	r0, #1
   25d40:	blt	25f5c <__assert_fail@plt+0x14258>
   25d44:	mov	r4, r3
   25d48:	mov	r9, r1
   25d4c:	mov	r8, #0
   25d50:	str	r6, [sp]
   25d54:	str	r3, [sp, #8]
   25d58:	ldr	r0, [r4, #8]
   25d5c:	ldr	r0, [r0, r8, lsl #2]
   25d60:	add	r0, r0, r0, lsl #1
   25d64:	ldr	r1, [fp, #8]
   25d68:	add	r1, r1, r0, lsl #3
   25d6c:	ldr	r2, [r1, #8]
   25d70:	ldr	r3, [fp, #12]
   25d74:	cmp	r2, r3
   25d78:	bge	25f4c <__assert_fail@plt+0x14248>
   25d7c:	ldr	r1, [r1, #4]
   25d80:	ldr	r2, [fp, #12]
   25d84:	cmp	r1, r2
   25d88:	blt	25f4c <__assert_fail@plt+0x14248>
   25d8c:	ldr	r1, [fp, #8]
   25d90:	ldr	r2, [r1, r0, lsl #3]!
   25d94:	ldr	r0, [r6]
   25d98:	ldr	sl, [r0, r2, lsl #3]
   25d9c:	ldr	r1, [r1, #12]
   25da0:	ldr	r2, [fp, #12]
   25da4:	cmp	r1, r2
   25da8:	bne	25edc <__assert_fail@plt+0x141d8>
   25dac:	ldr	r1, [r9, #4]
   25db0:	cmp	r1, #1
   25db4:	blt	25f4c <__assert_fail@plt+0x14248>
   25db8:	ldmib	r9, {r2, r3}
   25dbc:	mvn	ip, #0
   25dc0:	mov	r7, #0
   25dc4:	mvn	r1, #0
   25dc8:	ldr	r5, [r3, r7, lsl #2]
   25dcc:	add	r4, r0, r5, lsl #3
   25dd0:	ldrb	r4, [r4, #4]
   25dd4:	cmp	r4, #9
   25dd8:	beq	25df4 <__assert_fail@plt+0x140f0>
   25ddc:	cmp	r4, #8
   25de0:	bne	25e00 <__assert_fail@plt+0x140fc>
   25de4:	ldr	r4, [r0, r5, lsl #3]
   25de8:	cmp	sl, r4
   25dec:	moveq	r1, r5
   25df0:	b	25e00 <__assert_fail@plt+0x140fc>
   25df4:	ldr	r4, [r0, r5, lsl #3]
   25df8:	cmp	sl, r4
   25dfc:	moveq	ip, r5
   25e00:	add	r7, r7, #1
   25e04:	cmp	r7, r2
   25e08:	blt	25dc8 <__assert_fail@plt+0x140c4>
   25e0c:	cmp	r1, #0
   25e10:	blt	25e38 <__assert_fail@plt+0x14134>
   25e14:	mov	r0, r6
   25e18:	mov	r2, r9
   25e1c:	ldr	r3, [sp, #4]
   25e20:	mov	r4, ip
   25e24:	bl	26440 <__assert_fail@plt+0x1473c>
   25e28:	mov	ip, r4
   25e2c:	ldr	r6, [sp]
   25e30:	cmp	r0, #0
   25e34:	bne	25f60 <__assert_fail@plt+0x1425c>
   25e38:	cmp	ip, #0
   25e3c:	ldr	r4, [sp, #8]
   25e40:	ldrge	r0, [r9, #4]
   25e44:	cmpge	r0, #1
   25e48:	blt	25f4c <__assert_fail@plt+0x14248>
   25e4c:	mov	sl, #0
   25e50:	ldr	r0, [r9, #8]
   25e54:	ldr	r4, [r0, sl, lsl #2]
   25e58:	add	r5, r4, r4, lsl #1
   25e5c:	ldr	r0, [r6, #28]
   25e60:	add	r0, r0, r5, lsl #2
   25e64:	mov	r1, ip
   25e68:	mov	r7, ip
   25e6c:	bl	21174 <__assert_fail@plt+0xf470>
   25e70:	cmp	r0, #0
   25e74:	beq	25e80 <__assert_fail@plt+0x1417c>
   25e78:	mov	ip, r7
   25e7c:	b	25ec4 <__assert_fail@plt+0x141c0>
   25e80:	ldr	r0, [r6, #24]
   25e84:	add	r0, r0, r5, lsl #2
   25e88:	mov	r5, r7
   25e8c:	mov	r1, r7
   25e90:	bl	21174 <__assert_fail@plt+0xf470>
   25e94:	cmp	r0, #0
   25e98:	bne	25ec0 <__assert_fail@plt+0x141bc>
   25e9c:	mov	r0, r6
   25ea0:	mov	r1, r4
   25ea4:	mov	r2, r9
   25ea8:	ldr	r3, [sp, #4]
   25eac:	bl	26440 <__assert_fail@plt+0x1473c>
   25eb0:	cmp	r0, #0
   25eb4:	bne	25f60 <__assert_fail@plt+0x1425c>
   25eb8:	sub	sl, sl, #1
   25ebc:	ldr	r6, [sp]
   25ec0:	mov	ip, r5
   25ec4:	ldr	r0, [r9, #4]
   25ec8:	add	sl, sl, #1
   25ecc:	cmp	sl, r0
   25ed0:	ldr	r4, [sp, #8]
   25ed4:	blt	25e50 <__assert_fail@plt+0x1414c>
   25ed8:	b	25f4c <__assert_fail@plt+0x14248>
   25edc:	ldr	r0, [r9, #4]
   25ee0:	cmp	r0, #1
   25ee4:	blt	25f4c <__assert_fail@plt+0x14248>
   25ee8:	mov	r5, #0
   25eec:	ldr	r0, [r9, #8]
   25ef0:	ldr	r1, [r0, r5, lsl #2]
   25ef4:	ldr	r0, [r6]
   25ef8:	add	r2, r0, r1, lsl #3
   25efc:	ldr	r2, [r2, #4]
   25f00:	and	r2, r2, #254	; 0xfe
   25f04:	orr	r2, r2, #1
   25f08:	cmp	r2, #9
   25f0c:	ldreq	r0, [r0, r1, lsl #3]
   25f10:	cmpeq	sl, r0
   25f14:	beq	25f2c <__assert_fail@plt+0x14228>
   25f18:	ldr	r0, [r9, #4]
   25f1c:	add	r5, r5, #1
   25f20:	cmp	r5, r0
   25f24:	blt	25eec <__assert_fail@plt+0x141e8>
   25f28:	b	25f4c <__assert_fail@plt+0x14248>
   25f2c:	mov	r0, r6
   25f30:	mov	r2, r9
   25f34:	ldr	r3, [sp, #4]
   25f38:	bl	26440 <__assert_fail@plt+0x1473c>
   25f3c:	ldr	r6, [sp]
   25f40:	cmp	r0, #0
   25f44:	beq	25f18 <__assert_fail@plt+0x14214>
   25f48:	b	25f60 <__assert_fail@plt+0x1425c>
   25f4c:	add	r8, r8, #1
   25f50:	ldr	r0, [r4, #4]
   25f54:	cmp	r8, r0
   25f58:	blt	25d58 <__assert_fail@plt+0x14054>
   25f5c:	mov	r0, #0
   25f60:	sub	sp, fp, #28
   25f64:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   25f68:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   25f6c:	add	fp, sp, #28
   25f70:	sub	sp, sp, #84	; 0x54
   25f74:	mov	r4, r3
   25f78:	mov	r7, r2
   25f7c:	str	r1, [sp, #52]	; 0x34
   25f80:	ldr	r1, [r0, #84]	; 0x54
   25f84:	str	r1, [sp, #48]	; 0x30
   25f88:	str	r0, [sp, #44]	; 0x2c
   25f8c:	mov	r1, r2
   25f90:	bl	237a4 <__assert_fail@plt+0x11aa0>
   25f94:	str	r0, [sp, #20]
   25f98:	mov	sl, #0
   25f9c:	cmn	r0, #1
   25fa0:	beq	26238 <__assert_fail@plt+0x14534>
   25fa4:	str	sl, [sp, #56]	; 0x38
   25fa8:	str	r4, [sp, #24]
   25fac:	ldr	r0, [r4, #4]
   25fb0:	cmp	r0, #1
   25fb4:	blt	26238 <__assert_fail@plt+0x14534>
   25fb8:	add	r0, r7, #1
   25fbc:	str	r0, [sp, #8]
   25fc0:	add	r0, sp, #56	; 0x38
   25fc4:	add	r0, r0, #16
   25fc8:	str	r0, [sp, #28]
   25fcc:	ldr	r2, [sp, #52]	; 0x34
   25fd0:	add	r0, r2, #16
   25fd4:	str	r0, [sp, #32]
   25fd8:	ldr	r0, [sp, #20]
   25fdc:	add	r0, r0, r0, lsl #1
   25fe0:	str	r0, [sp, #16]
   25fe4:	lsl	r0, r0, #3
   25fe8:	str	r0, [sp, #12]
   25fec:	mov	r1, #0
   25ff0:	ldr	sl, [sp, #24]
   25ff4:	ldr	r3, [sp, #48]	; 0x30
   25ff8:	str	r7, [sp, #40]	; 0x28
   25ffc:	ldr	r0, [sl, #8]
   26000:	str	r1, [sp, #36]	; 0x24
   26004:	ldr	r9, [r0, r1, lsl #2]
   26008:	ldr	r0, [r3]
   2600c:	add	r0, r0, r9, lsl #3
   26010:	ldrb	r0, [r0, #4]
   26014:	ldr	r1, [r2, #8]
   26018:	cmp	r9, r1
   2601c:	bne	26038 <__assert_fail@plt+0x14334>
   26020:	cmp	r0, #4
   26024:	bne	2620c <__assert_fail@plt+0x14508>
   26028:	ldr	r0, [r2, #12]
   2602c:	cmp	r0, r7
   26030:	bne	26040 <__assert_fail@plt+0x1433c>
   26034:	b	2620c <__assert_fail@plt+0x14508>
   26038:	cmp	r0, #4
   2603c:	bne	2620c <__assert_fail@plt+0x14508>
   26040:	ldr	r0, [sp, #44]	; 0x2c
   26044:	ldr	r0, [r0, #116]	; 0x74
   26048:	ldr	r1, [sp, #16]
   2604c:	add	r5, r0, r1, lsl #3
   26050:	ldr	r4, [sp, #12]
   26054:	ldr	r8, [sp, #20]
   26058:	b	26070 <__assert_fail@plt+0x1436c>
   2605c:	mov	r0, r5
   26060:	ldr	r7, [sp, #40]	; 0x28
   26064:	ldr	r2, [sp, #52]	; 0x34
   26068:	ldr	r3, [sp, #48]	; 0x30
   2606c:	b	261f4 <__assert_fail@plt+0x144f0>
   26070:	ldr	r0, [r5]
   26074:	cmp	r0, r9
   26078:	bne	261f0 <__assert_fail@plt+0x144ec>
   2607c:	ldr	r0, [r5, #8]
   26080:	ldr	r1, [r5, #12]
   26084:	subs	r0, r1, r0
   26088:	add	r6, r0, r7
   2608c:	beq	2609c <__assert_fail@plt+0x14398>
   26090:	ldr	r0, [r3, #12]
   26094:	add	r0, r0, r9, lsl #2
   26098:	b	260ac <__assert_fail@plt+0x143a8>
   2609c:	ldr	r0, [r3, #20]
   260a0:	add	r1, r9, r9, lsl #1
   260a4:	add	r0, r0, r1, lsl #2
   260a8:	ldr	r0, [r0, #8]
   260ac:	ldr	r1, [r2, #12]
   260b0:	cmp	r6, r1
   260b4:	bgt	261f0 <__assert_fail@plt+0x144ec>
   260b8:	ldr	r1, [r2]
   260bc:	ldr	r1, [r1, r6, lsl #2]
   260c0:	cmp	r1, #0
   260c4:	beq	261f0 <__assert_fail@plt+0x144ec>
   260c8:	ldr	r7, [r0]
   260cc:	add	r0, r1, #4
   260d0:	mov	r1, r7
   260d4:	bl	21174 <__assert_fail@plt+0xf470>
   260d8:	cmp	r0, #0
   260dc:	beq	2605c <__assert_fail@plt+0x14358>
   260e0:	str	r7, [sp]
   260e4:	str	r6, [sp, #4]
   260e8:	ldr	r0, [sp, #44]	; 0x2c
   260ec:	ldr	r1, [sp, #32]
   260f0:	mov	r2, r9
   260f4:	ldr	r7, [sp, #40]	; 0x28
   260f8:	mov	r3, r7
   260fc:	bl	265e8 <__assert_fail@plt+0x148e4>
   26100:	cmp	r0, #0
   26104:	mov	r0, r5
   26108:	ldr	r2, [sp, #52]	; 0x34
   2610c:	ldr	r3, [sp, #48]	; 0x30
   26110:	bne	261f4 <__assert_fail@plt+0x144f0>
   26114:	ldr	r0, [sp, #56]	; 0x38
   26118:	cmp	r0, #0
   2611c:	bne	26150 <__assert_fail@plt+0x1444c>
   26120:	mov	r0, r2
   26124:	mov	r1, #12
   26128:	vld1.32	{d16-d17}, [r0], r1
   2612c:	vld1.32	{d18-d19}, [r0]
   26130:	add	r0, sp, #56	; 0x38
   26134:	vst1.64	{d16-d17}, [r0], r1
   26138:	vst1.32	{d18-d19}, [r0]
   2613c:	ldr	r0, [sp, #28]
   26140:	ldr	r1, [sp, #32]
   26144:	bl	210f8 <__assert_fail@plt+0xf3f4>
   26148:	cmp	r0, #0
   2614c:	bne	26244 <__assert_fail@plt+0x14540>
   26150:	str	r7, [sp, #68]	; 0x44
   26154:	str	r9, [sp, #64]	; 0x40
   26158:	ldr	r0, [sp, #28]
   2615c:	mov	r1, r8
   26160:	bl	20f10 <__assert_fail@plt+0xf20c>
   26164:	cmp	r0, #0
   26168:	beq	2624c <__assert_fail@plt+0x14548>
   2616c:	mov	r0, r7
   26170:	ldr	r7, [sp, #56]	; 0x38
   26174:	ldr	r5, [r7, r0, lsl #2]
   26178:	ldr	r0, [sp, #44]	; 0x2c
   2617c:	add	r1, sp, #56	; 0x38
   26180:	bl	25828 <__assert_fail@plt+0x13b24>
   26184:	cmp	r0, #0
   26188:	bne	26244 <__assert_fail@plt+0x14540>
   2618c:	ldr	r0, [sp, #52]	; 0x34
   26190:	ldr	r1, [r0, #4]
   26194:	cmp	r1, #0
   26198:	beq	261b4 <__assert_fail@plt+0x144b0>
   2619c:	ldr	r0, [sp, #48]	; 0x30
   261a0:	mov	r2, r7
   261a4:	ldr	r3, [sp, #8]
   261a8:	bl	25934 <__assert_fail@plt+0x13c30>
   261ac:	cmp	r0, #0
   261b0:	bne	26244 <__assert_fail@plt+0x14540>
   261b4:	ldr	r0, [sp, #40]	; 0x28
   261b8:	str	r5, [r7, r0, lsl #2]
   261bc:	mov	r7, r0
   261c0:	ldr	r5, [sp, #28]
   261c4:	mov	r0, r5
   261c8:	mov	r1, r8
   261cc:	bl	21174 <__assert_fail@plt+0xf470>
   261d0:	sub	r1, r0, #1
   261d4:	mov	r0, r5
   261d8:	bl	2156c <__assert_fail@plt+0xf868>
   261dc:	ldr	r0, [sp, #44]	; 0x2c
   261e0:	ldr	r0, [r0, #116]	; 0x74
   261e4:	add	r0, r0, r4
   261e8:	ldr	sl, [sp, #24]
   261ec:	b	26064 <__assert_fail@plt+0x14360>
   261f0:	mov	r0, r5
   261f4:	add	r4, r4, #24
   261f8:	add	r5, r0, #24
   261fc:	add	r8, r8, #1
   26200:	ldrb	r0, [r0, #20]
   26204:	cmp	r0, #0
   26208:	bne	26070 <__assert_fail@plt+0x1436c>
   2620c:	ldr	r1, [sp, #36]	; 0x24
   26210:	add	r1, r1, #1
   26214:	ldr	r0, [sl, #4]
   26218:	cmp	r1, r0
   2621c:	blt	25ffc <__assert_fail@plt+0x142f8>
   26220:	mov	sl, #0
   26224:	ldr	r0, [sp, #56]	; 0x38
   26228:	cmp	r0, #0
   2622c:	beq	26238 <__assert_fail@plt+0x14534>
   26230:	ldr	r0, [sp, #80]	; 0x50
   26234:	bl	1a22c <__assert_fail@plt+0x8528>
   26238:	mov	r0, sl
   2623c:	sub	sp, fp, #28
   26240:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   26244:	mov	sl, r0
   26248:	b	26224 <__assert_fail@plt+0x14520>
   2624c:	mov	sl, #12
   26250:	b	26224 <__assert_fail@plt+0x14520>
   26254:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   26258:	add	fp, sp, #28
   2625c:	sub	sp, sp, #4
   26260:	mov	r9, r2
   26264:	mov	r8, r0
   26268:	ldr	r2, [r1, #4]
   2626c:	mov	r0, #0
   26270:	cmp	r2, #0
   26274:	beq	2642c <__assert_fail@plt+0x14728>
   26278:	mov	sl, r1
   2627c:	ldr	r1, [r9, #4]
   26280:	cmp	r1, #0
   26284:	beq	2642c <__assert_fail@plt+0x14728>
   26288:	add	r0, r1, r2
   2628c:	ldm	r8, {r1, r2}
   26290:	add	r2, r2, r0
   26294:	cmp	r2, r1
   26298:	ble	262bc <__assert_fail@plt+0x145b8>
   2629c:	add	r4, r1, r0
   262a0:	lsl	r1, r4, #2
   262a4:	ldr	r0, [r8, #8]
   262a8:	bl	1a388 <__assert_fail@plt+0x8684>
   262ac:	cmp	r0, #0
   262b0:	beq	26434 <__assert_fail@plt+0x14730>
   262b4:	str	r4, [r8]
   262b8:	str	r0, [r8, #8]
   262bc:	ldr	r1, [r8, #4]
   262c0:	ldr	r6, [sl, #4]
   262c4:	ldr	r0, [sl, #8]
   262c8:	add	r3, r6, r1
   262cc:	ldr	r5, [r9, #4]
   262d0:	ldr	r2, [r9, #8]
   262d4:	add	ip, r3, r5
   262d8:	sub	r7, r1, #1
   262dc:	sub	r3, r5, #1
   262e0:	sub	r4, r6, #1
   262e4:	ldr	r1, [r2, r3, lsl #2]
   262e8:	ldr	r6, [r0, r4, lsl #2]
   262ec:	cmp	r6, r1
   262f0:	beq	2630c <__assert_fail@plt+0x14608>
   262f4:	blt	2633c <__assert_fail@plt+0x14638>
   262f8:	sub	r1, r4, #1
   262fc:	cmp	r4, #0
   26300:	mov	r4, r1
   26304:	bgt	262e4 <__assert_fail@plt+0x145e0>
   26308:	b	2638c <__assert_fail@plt+0x14688>
   2630c:	cmp	r7, #0
   26310:	blt	2636c <__assert_fail@plt+0x14668>
   26314:	ldr	r5, [r8, #8]
   26318:	mov	r1, r7
   2631c:	ldr	r7, [r5, r1, lsl #2]
   26320:	cmp	r7, r6
   26324:	ble	26348 <__assert_fail@plt+0x14644>
   26328:	sub	r7, r1, #1
   2632c:	cmp	r1, #0
   26330:	mov	r1, r7
   26334:	bgt	2631c <__assert_fail@plt+0x14618>
   26338:	b	2636c <__assert_fail@plt+0x14668>
   2633c:	subs	r3, r3, #1
   26340:	bge	262e4 <__assert_fail@plt+0x145e0>
   26344:	b	2638c <__assert_fail@plt+0x14688>
   26348:	ldr	r7, [r8, #8]
   2634c:	ldr	r7, [r7, r1, lsl #2]
   26350:	cmp	r7, r6
   26354:	mov	r7, r1
   26358:	bne	2636c <__assert_fail@plt+0x14668>
   2635c:	mov	r7, r1
   26360:	cmp	r4, #1
   26364:	bge	26380 <__assert_fail@plt+0x1467c>
   26368:	b	2638c <__assert_fail@plt+0x14688>
   2636c:	ldr	r1, [r8, #8]
   26370:	sub	ip, ip, #1
   26374:	str	r6, [r1, ip, lsl #2]
   26378:	cmp	r4, #1
   2637c:	blt	2638c <__assert_fail@plt+0x14688>
   26380:	subs	r3, r3, #1
   26384:	sub	r4, r4, #1
   26388:	bge	262e4 <__assert_fail@plt+0x145e0>
   2638c:	ldr	r1, [sl, #4]
   26390:	ldr	r7, [r8, #4]
   26394:	add	r0, r7, r1
   26398:	ldr	r3, [r9, #4]
   2639c:	add	r0, r0, r3
   263a0:	sub	r0, r0, #1
   263a4:	sub	r6, r0, ip
   263a8:	add	r2, r6, #1
   263ac:	add	r5, r2, r7
   263b0:	str	r5, [r8, #4]
   263b4:	cmp	r7, #1
   263b8:	cmpge	r6, #0
   263bc:	blt	26418 <__assert_fail@plt+0x14714>
   263c0:	add	r3, r7, r3
   263c4:	add	r1, r3, r1
   263c8:	sub	r3, r1, ip
   263cc:	ldr	r1, [r8, #8]
   263d0:	add	r3, r1, r3, lsl #2
   263d4:	sub	r7, r7, #1
   263d8:	ldr	r6, [r1, r7, lsl #2]
   263dc:	ldr	r5, [r1, r0, lsl #2]
   263e0:	cmp	r5, r6
   263e4:	bgt	26400 <__assert_fail@plt+0x146fc>
   263e8:	str	r6, [r3, r7, lsl #2]
   263ec:	sub	r6, r7, #1
   263f0:	cmp	r7, #0
   263f4:	mov	r7, r6
   263f8:	bgt	263d8 <__assert_fail@plt+0x146d4>
   263fc:	b	26418 <__assert_fail@plt+0x14714>
   26400:	str	r5, [r3, r7, lsl #2]
   26404:	sub	r3, r3, #4
   26408:	subs	r2, r2, #1
   2640c:	sub	r0, r0, #1
   26410:	bne	263d8 <__assert_fail@plt+0x146d4>
   26414:	mov	r2, #0
   26418:	ldr	r0, [r8, #8]
   2641c:	add	r1, r0, ip, lsl #2
   26420:	lsl	r2, r2, #2
   26424:	bl	1192c <memcpy@plt>
   26428:	mov	r0, #0
   2642c:	sub	sp, fp, #28
   26430:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   26434:	mov	r0, #12
   26438:	sub	sp, fp, #28
   2643c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   26440:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   26444:	add	fp, sp, #28
   26448:	sub	sp, sp, #28
   2644c:	str	r3, [sp]
   26450:	mov	r7, r1
   26454:	str	r0, [sp, #12]
   26458:	ldr	r0, [r0, #28]
   2645c:	mov	r8, #0
   26460:	str	r8, [sp, #20]
   26464:	str	r8, [sp, #16]
   26468:	str	r8, [sp, #24]
   2646c:	add	r1, r1, r1, lsl #1
   26470:	add	r1, r0, r1, lsl #2
   26474:	mov	r4, r1
   26478:	ldr	r0, [r4, #4]!
   2647c:	cmp	r0, #1
   26480:	blt	265cc <__assert_fail@plt+0x148c8>
   26484:	str	r2, [sp, #4]
   26488:	str	r1, [sp, #8]
   2648c:	add	r9, r1, #8
   26490:	mov	r6, #0
   26494:	ldr	r0, [r9]
   26498:	ldr	r0, [r0, r6, lsl #2]
   2649c:	cmp	r0, r7
   264a0:	beq	26560 <__assert_fail@plt+0x1485c>
   264a4:	ldr	r1, [sp, #12]
   264a8:	ldr	r1, [r1]
   264ac:	add	r1, r1, r0, lsl #3
   264b0:	ldrb	r1, [r1, #4]
   264b4:	tst	r1, #8
   264b8:	beq	26560 <__assert_fail@plt+0x1485c>
   264bc:	ldr	r1, [sp, #12]
   264c0:	ldr	r1, [r1, #20]
   264c4:	add	r5, r0, r0, lsl #1
   264c8:	add	r0, r1, r5, lsl #2
   264cc:	ldr	r1, [r0, #4]
   264d0:	ldr	r0, [r0, #8]
   264d4:	ldr	r8, [r0]
   264d8:	mvn	sl, #0
   264dc:	cmp	r1, #2
   264e0:	ldrge	sl, [r0, #4]
   264e4:	ldr	r0, [sp, #8]
   264e8:	mov	r1, r8
   264ec:	bl	21174 <__assert_fail@plt+0xf470>
   264f0:	cmp	r0, #0
   264f4:	beq	2652c <__assert_fail@plt+0x14828>
   264f8:	cmp	sl, #1
   264fc:	blt	26560 <__assert_fail@plt+0x1485c>
   26500:	ldr	r0, [sp, #8]
   26504:	mov	r1, sl
   26508:	bl	21174 <__assert_fail@plt+0xf470>
   2650c:	cmp	r0, #0
   26510:	bne	26560 <__assert_fail@plt+0x1485c>
   26514:	ldr	r0, [sp, #4]
   26518:	mov	r1, sl
   2651c:	bl	21174 <__assert_fail@plt+0xf470>
   26520:	cmp	r0, #0
   26524:	bne	26540 <__assert_fail@plt+0x1483c>
   26528:	b	26560 <__assert_fail@plt+0x1485c>
   2652c:	ldr	r0, [sp, #4]
   26530:	mov	r1, r8
   26534:	bl	21174 <__assert_fail@plt+0xf470>
   26538:	cmp	r0, #0
   2653c:	beq	264f8 <__assert_fail@plt+0x147f4>
   26540:	ldr	r0, [sp, #12]
   26544:	ldr	r0, [r0, #28]
   26548:	add	r2, r0, r5, lsl #2
   2654c:	add	r0, sp, #16
   26550:	ldr	r1, [sp]
   26554:	bl	26254 <__assert_fail@plt+0x14550>
   26558:	cmp	r0, #0
   2655c:	bne	265e0 <__assert_fail@plt+0x148dc>
   26560:	add	r6, r6, #1
   26564:	ldr	r0, [r4]
   26568:	cmp	r6, r0
   2656c:	blt	26494 <__assert_fail@plt+0x14790>
   26570:	cmp	r0, #1
   26574:	mov	r8, #0
   26578:	ldr	r5, [sp, #4]
   2657c:	blt	265cc <__assert_fail@plt+0x148c8>
   26580:	mov	r7, #0
   26584:	add	sl, sp, #16
   26588:	ldr	r0, [r9]
   2658c:	ldr	r6, [r0, r7, lsl #2]
   26590:	mov	r0, sl
   26594:	mov	r1, r6
   26598:	bl	21174 <__assert_fail@plt+0xf470>
   2659c:	cmp	r0, #0
   265a0:	bne	265bc <__assert_fail@plt+0x148b8>
   265a4:	mov	r0, r5
   265a8:	mov	r1, r6
   265ac:	bl	21174 <__assert_fail@plt+0xf470>
   265b0:	sub	r1, r0, #1
   265b4:	mov	r0, r5
   265b8:	bl	2156c <__assert_fail@plt+0xf868>
   265bc:	ldr	r0, [r4]
   265c0:	add	r7, r7, #1
   265c4:	cmp	r7, r0
   265c8:	blt	26588 <__assert_fail@plt+0x14884>
   265cc:	ldr	r0, [sp, #24]
   265d0:	bl	1a22c <__assert_fail@plt+0x8528>
   265d4:	mov	r0, r8
   265d8:	sub	sp, fp, #28
   265dc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   265e0:	mov	r8, r0
   265e4:	b	265cc <__assert_fail@plt+0x148c8>
   265e8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   265ec:	add	fp, sp, #28
   265f0:	sub	sp, sp, #20
   265f4:	str	r2, [sp, #12]
   265f8:	mov	r6, r1
   265fc:	mov	r7, r0
   26600:	str	r3, [sp, #16]
   26604:	mov	r1, r3
   26608:	bl	237a4 <__assert_fail@plt+0x11aa0>
   2660c:	str	r0, [sp, #8]
   26610:	ldr	r1, [fp, #12]
   26614:	mov	r0, r7
   26618:	bl	237a4 <__assert_fail@plt+0x11aa0>
   2661c:	mov	r4, r0
   26620:	ldr	r0, [r6, #4]
   26624:	cmp	r0, #1
   26628:	blt	266ac <__assert_fail@plt+0x149a8>
   2662c:	ldr	sl, [r7, #84]	; 0x54
   26630:	mov	r5, #0
   26634:	ldr	r0, [r6, #8]
   26638:	ldr	r1, [r0, r5, lsl #2]
   2663c:	add	r0, r1, r1, lsl #1
   26640:	ldr	r2, [r7, #116]	; 0x74
   26644:	ldr	r0, [r2, r0, lsl #3]
   26648:	ldr	r2, [sl]
   2664c:	ldr	r9, [r2, r0, lsl #3]
   26650:	ldr	r0, [sp, #16]
   26654:	str	r0, [sp]
   26658:	ldr	r0, [sp, #8]
   2665c:	str	r0, [sp, #4]
   26660:	mov	r0, r7
   26664:	mov	r2, r9
   26668:	ldr	r3, [sp, #12]
   2666c:	bl	266c4 <__assert_fail@plt+0x149c0>
   26670:	mov	r8, r0
   26674:	ldr	r0, [r6, #8]
   26678:	ldr	r1, [r0, r5, lsl #2]
   2667c:	ldr	r0, [fp, #12]
   26680:	stm	sp, {r0, r4}
   26684:	mov	r0, r7
   26688:	mov	r2, r9
   2668c:	ldr	r3, [fp, #8]
   26690:	bl	266c4 <__assert_fail@plt+0x149c0>
   26694:	cmp	r0, r8
   26698:	bne	266b8 <__assert_fail@plt+0x149b4>
   2669c:	add	r5, r5, #1
   266a0:	ldr	r0, [r6, #4]
   266a4:	cmp	r5, r0
   266a8:	blt	26634 <__assert_fail@plt+0x14930>
   266ac:	mov	r0, #0
   266b0:	sub	sp, fp, #28
   266b4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   266b8:	mov	r0, #1
   266bc:	sub	sp, fp, #28
   266c0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   266c4:	push	{r4, r5, fp, lr}
   266c8:	add	fp, sp, #8
   266cc:	sub	sp, sp, #8
   266d0:	ldr	r4, [r0, #116]	; 0x74
   266d4:	add	r1, r1, r1, lsl #1
   266d8:	add	r4, r4, r1, lsl #3
   266dc:	ldr	ip, [r4, #8]
   266e0:	mvn	r1, #0
   266e4:	ldr	lr, [fp, #8]
   266e8:	cmp	ip, lr
   266ec:	bgt	2673c <__assert_fail@plt+0x14a38>
   266f0:	ldr	r4, [r4, #12]
   266f4:	mov	r1, #1
   266f8:	cmp	r4, lr
   266fc:	blt	2673c <__assert_fail@plt+0x14a38>
   26700:	sub	r1, r4, lr
   26704:	clz	r1, r1
   26708:	lsr	r4, r1, #5
   2670c:	mov	r5, #1
   26710:	lsl	r1, r4, #1
   26714:	cmp	ip, lr
   26718:	orreq	r1, r5, r4, lsl #1
   2671c:	cmp	r1, #0
   26720:	beq	26738 <__assert_fail@plt+0x14a34>
   26724:	ldr	r5, [fp, #12]
   26728:	str	r5, [sp]
   2672c:	bl	26748 <__assert_fail@plt+0x14a44>
   26730:	sub	sp, fp, #8
   26734:	pop	{r4, r5, fp, pc}
   26738:	mov	r1, #0
   2673c:	mov	r0, r1
   26740:	sub	sp, fp, #8
   26744:	pop	{r4, r5, fp, pc}
   26748:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2674c:	add	fp, sp, #28
   26750:	sub	sp, sp, #36	; 0x24
   26754:	mov	r6, r2
   26758:	mov	r5, r1
   2675c:	mov	r7, r0
   26760:	ldr	r4, [r0, #84]	; 0x54
   26764:	ldr	r0, [r4, #24]
   26768:	str	r3, [sp, #32]
   2676c:	add	r1, r3, r3, lsl #1
   26770:	add	r0, r0, r1, lsl #2
   26774:	mov	r2, r0
   26778:	ldr	r1, [r2, #4]!
   2677c:	str	r2, [sp, #24]
   26780:	cmp	r1, #1
   26784:	blt	2691c <__assert_fail@plt+0x14c18>
   26788:	mov	r1, #1
   2678c:	mvn	r2, r1, lsl r6
   26790:	str	r2, [sp, #16]
   26794:	lsl	r1, r1, r6
   26798:	str	r1, [sp, #20]
   2679c:	mov	sl, #0
   267a0:	cmp	r6, #31
   267a4:	mov	r1, #0
   267a8:	movwgt	r1, #1
   267ac:	and	r2, r5, #2
   267b0:	str	r2, [sp, #8]
   267b4:	orr	r1, r1, r2, lsr #1
   267b8:	str	r1, [sp, #12]
   267bc:	add	r0, r0, #8
   267c0:	str	r0, [sp, #28]
   267c4:	and	r0, r5, #1
   267c8:	str	r0, [sp, #4]
   267cc:	ldr	r0, [sp, #28]
   267d0:	ldr	r0, [r0]
   267d4:	ldr	r8, [r0, sl, lsl #2]
   267d8:	ldr	r0, [r4]
   267dc:	add	r1, r0, r8, lsl #3
   267e0:	ldrb	r1, [r1, #4]
   267e4:	cmp	r1, #9
   267e8:	beq	268d4 <__assert_fail@plt+0x14bd0>
   267ec:	cmp	r1, #8
   267f0:	beq	268f0 <__assert_fail@plt+0x14bec>
   267f4:	cmp	r1, #4
   267f8:	bne	26908 <__assert_fail@plt+0x14c04>
   267fc:	ldr	r0, [fp, #8]
   26800:	cmn	r0, #1
   26804:	beq	26908 <__assert_fail@plt+0x14c04>
   26808:	ldr	r0, [r7, #116]	; 0x74
   2680c:	ldr	r1, [fp, #8]
   26810:	add	r1, r1, r1, lsl #1
   26814:	add	r0, r0, r1, lsl #3
   26818:	add	r9, r0, #16
   2681c:	ldr	r0, [r9, #-16]
   26820:	cmp	r0, r8
   26824:	bne	268c0 <__assert_fail@plt+0x14bbc>
   26828:	cmp	r6, #31
   2682c:	bgt	26840 <__assert_fail@plt+0x14b3c>
   26830:	ldr	r0, [r9]
   26834:	ldr	r1, [sp, #20]
   26838:	tst	r0, r1
   2683c:	beq	268c0 <__assert_fail@plt+0x14bbc>
   26840:	ldr	r0, [r4, #20]
   26844:	add	r1, r8, r8, lsl #1
   26848:	add	r0, r0, r1, lsl #2
   2684c:	ldr	r0, [r0, #8]
   26850:	ldr	r3, [r0]
   26854:	ldr	r0, [sp, #32]
   26858:	cmp	r3, r0
   2685c:	beq	26928 <__assert_fail@plt+0x14c24>
   26860:	ldr	r0, [fp, #8]
   26864:	str	r0, [sp]
   26868:	mov	r0, r7
   2686c:	mov	r1, r5
   26870:	mov	r2, r6
   26874:	bl	26748 <__assert_fail@plt+0x14a44>
   26878:	cmp	r0, #0
   2687c:	beq	26894 <__assert_fail@plt+0x14b90>
   26880:	cmn	r0, #1
   26884:	beq	2693c <__assert_fail@plt+0x14c38>
   26888:	cmp	r6, #31
   2688c:	ble	268b0 <__assert_fail@plt+0x14bac>
   26890:	b	268c0 <__assert_fail@plt+0x14bbc>
   26894:	ldr	r0, [sp, #12]
   26898:	cmp	r0, #0
   2689c:	beq	268b0 <__assert_fail@plt+0x14bac>
   268a0:	ldr	r0, [sp, #8]
   268a4:	cmp	r0, #0
   268a8:	beq	268c0 <__assert_fail@plt+0x14bbc>
   268ac:	b	26938 <__assert_fail@plt+0x14c34>
   268b0:	ldr	r0, [r9]
   268b4:	ldr	r1, [sp, #16]
   268b8:	and	r0, r0, r1
   268bc:	str	r0, [r9]
   268c0:	ldrb	r0, [r9, #4]
   268c4:	add	r9, r9, #24
   268c8:	cmp	r0, #0
   268cc:	bne	2681c <__assert_fail@plt+0x14b18>
   268d0:	b	26908 <__assert_fail@plt+0x14c04>
   268d4:	ldr	r1, [sp, #8]
   268d8:	cmp	r1, #0
   268dc:	beq	26908 <__assert_fail@plt+0x14c04>
   268e0:	ldr	r0, [r0, r8, lsl #3]
   268e4:	cmp	r0, r6
   268e8:	bne	26908 <__assert_fail@plt+0x14c04>
   268ec:	b	26938 <__assert_fail@plt+0x14c34>
   268f0:	ldr	r1, [sp, #4]
   268f4:	cmp	r1, #0
   268f8:	beq	26908 <__assert_fail@plt+0x14c04>
   268fc:	ldr	r0, [r0, r8, lsl #3]
   26900:	cmp	r0, r6
   26904:	beq	26944 <__assert_fail@plt+0x14c40>
   26908:	ldr	r0, [sp, #24]
   2690c:	ldr	r0, [r0]
   26910:	add	sl, sl, #1
   26914:	cmp	sl, r0
   26918:	blt	267cc <__assert_fail@plt+0x14ac8>
   2691c:	ubfx	r0, r5, #1, #1
   26920:	sub	sp, fp, #28
   26924:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   26928:	ldr	r0, [sp, #4]
   2692c:	rsb	r0, r0, #0
   26930:	sub	sp, fp, #28
   26934:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   26938:	mov	r0, #0
   2693c:	sub	sp, fp, #28
   26940:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   26944:	mvn	r0, #0
   26948:	sub	sp, fp, #28
   2694c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   26950:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   26954:	add	fp, sp, #24
   26958:	mov	r7, r3
   2695c:	mov	r5, r2
   26960:	mov	r8, r1
   26964:	mov	r2, r0
   26968:	ldr	r6, [r0, #84]	; 0x54
   2696c:	mov	r0, r6
   26970:	mov	r1, r5
   26974:	bl	24754 <__assert_fail@plt+0x12a50>
   26978:	mov	r4, r0
   2697c:	cmp	r0, #1
   26980:	blt	269bc <__assert_fail@plt+0x14cb8>
   26984:	ldr	r1, [fp, #8]
   26988:	add	r0, r4, r7
   2698c:	cmp	r0, r1
   26990:	bgt	269bc <__assert_fail@plt+0x14cb8>
   26994:	ldr	r1, [r8]
   26998:	ldr	r0, [r1, r0, lsl #2]
   2699c:	cmp	r0, #0
   269a0:	beq	269c4 <__assert_fail@plt+0x14cc0>
   269a4:	ldr	r1, [r6, #12]
   269a8:	ldr	r1, [r1, r5, lsl #2]
   269ac:	add	r0, r0, #4
   269b0:	bl	21174 <__assert_fail@plt+0xf470>
   269b4:	cmp	r0, #0
   269b8:	moveq	r4, #0
   269bc:	mov	r0, r4
   269c0:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   269c4:	mov	r4, #0
   269c8:	mov	r0, r4
   269cc:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   269d0:	mov	r1, #16
   269d4:	mov	r2, #0
   269d8:	add	r3, r0, #12
   269dc:	str	r2, [r0]
   269e0:	stmib	r0, {r1, r3}
   269e4:	bx	lr
   269e8:	push	{r4, sl, fp, lr}
   269ec:	add	fp, sp, #8
   269f0:	mov	r4, r0
   269f4:	ldr	r0, [r0]
   269f8:	cmp	r0, r1
   269fc:	bcs	26a30 <__assert_fail@plt+0x14d2c>
   26a00:	add	r2, r4, #12
   26a04:	mov	r0, r4
   26a08:	mov	r3, #8
   26a0c:	bl	28be8 <__assert_fail@plt+0x16ee4>
   26a10:	mov	r1, r0
   26a14:	mov	r0, #1
   26a18:	cmp	r1, #0
   26a1c:	popne	{r4, sl, fp, pc}
   26a20:	mov	r0, r4
   26a24:	bl	26f38 <__assert_fail@plt+0x15234>
   26a28:	mov	r0, #0
   26a2c:	pop	{r4, sl, fp, pc}
   26a30:	str	r1, [r4]
   26a34:	mov	r0, #1
   26a38:	pop	{r4, sl, fp, pc}
   26a3c:	push	{r4, sl, fp, lr}
   26a40:	add	fp, sp, #8
   26a44:	mov	r4, r0
   26a48:	bl	26f60 <__assert_fail@plt+0x1525c>
   26a4c:	mov	r0, r4
   26a50:	pop	{r4, sl, fp, lr}
   26a54:	b	269d0 <__assert_fail@plt+0x14ccc>
   26a58:	cmp	r0, #0
   26a5c:	bxeq	lr
   26a60:	push	{r4, r5, r6, sl, fp, lr}
   26a64:	add	fp, sp, #16
   26a68:	mov	r4, r0
   26a6c:	ldr	r1, [r0]
   26a70:	ldr	r0, [r0, #8]
   26a74:	cmp	r1, #1
   26a78:	blt	26ab8 <__assert_fail@plt+0x14db4>
   26a7c:	mov	r5, #0
   26a80:	mov	r6, #0
   26a84:	add	r0, r0, r5
   26a88:	ldr	r0, [r0, #20]
   26a8c:	bl	1a22c <__assert_fail@plt+0x8528>
   26a90:	ldr	r0, [r4, #8]
   26a94:	add	r0, r0, r5
   26a98:	ldr	r0, [r0, #8]
   26a9c:	bl	1a22c <__assert_fail@plt+0x8528>
   26aa0:	add	r5, r5, #24
   26aa4:	add	r6, r6, #1
   26aa8:	ldr	r1, [r4]
   26aac:	ldr	r0, [r4, #8]
   26ab0:	cmp	r6, r1
   26ab4:	blt	26a84 <__assert_fail@plt+0x14d80>
   26ab8:	pop	{r4, r5, r6, sl, fp, lr}
   26abc:	b	1a22c <__assert_fail@plt+0x8528>
   26ac0:	ldr	r0, [r0, #8]
   26ac4:	bx	lr
   26ac8:	push	{r4, r5, fp, lr}
   26acc:	add	fp, sp, #8
   26ad0:	ldr	r4, [r0]
   26ad4:	add	r0, r4, r3, lsl #3
   26ad8:	ldr	r0, [r0, #4]
   26adc:	uxtb	r5, r0
   26ae0:	ldr	lr, [fp, #12]
   26ae4:	ldr	ip, [fp, #8]
   26ae8:	cmp	r5, #9
   26aec:	beq	26b18 <__assert_fail@plt+0x14e14>
   26af0:	cmp	r5, #8
   26af4:	bne	26b14 <__assert_fail@plt+0x14e10>
   26af8:	ldr	r0, [r4, r3, lsl #3]
   26afc:	add	r0, r0, #1
   26b00:	cmp	r0, lr
   26b04:	strlt	ip, [r1, r0, lsl #3]!
   26b08:	mvnlt	r0, #0
   26b0c:	strlt	r0, [r1, #4]
   26b10:	poplt	{r4, r5, fp, pc}
   26b14:	pop	{r4, r5, fp, pc}
   26b18:	ldr	r3, [r4, r3, lsl #3]
   26b1c:	add	r3, r3, #1
   26b20:	cmp	r3, lr
   26b24:	popge	{r4, r5, fp, pc}
   26b28:	ldr	r4, [r1, r3, lsl #3]
   26b2c:	cmp	r4, ip
   26b30:	bge	26b50 <__assert_fail@plt+0x14e4c>
   26b34:	add	r0, r1, r3, lsl #3
   26b38:	str	ip, [r0, #4]
   26b3c:	lsl	r3, lr, #3
   26b40:	mov	r0, r2
   26b44:	mov	r2, r3
   26b48:	pop	{r4, r5, fp, lr}
   26b4c:	b	1192c <memcpy@plt>
   26b50:	tst	r0, #524288	; 0x80000
   26b54:	ldrne	r0, [r2, r3, lsl #3]
   26b58:	cmnne	r0, #1
   26b5c:	bne	26b6c <__assert_fail@plt+0x14e68>
   26b60:	add	r0, r1, r3, lsl #3
   26b64:	str	ip, [r0, #4]
   26b68:	pop	{r4, r5, fp, pc}
   26b6c:	lsl	r3, lr, #3
   26b70:	mov	r0, r1
   26b74:	mov	r1, r2
   26b78:	b	26b44 <__assert_fail@plt+0x14e40>
   26b7c:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   26b80:	add	fp, sp, #24
   26b84:	mov	r4, r0
   26b88:	mvn	r0, #0
   26b8c:	cmp	r4, #0
   26b90:	beq	26c30 <__assert_fail@plt+0x14f2c>
   26b94:	mov	r5, r2
   26b98:	ldr	r2, [r4]
   26b9c:	cmp	r2, #0
   26ba0:	popeq	{r4, r5, r6, r7, r8, r9, fp, pc}
   26ba4:	ldr	r9, [fp, #12]
   26ba8:	ldr	r8, [fp, #8]
   26bac:	sub	r0, r2, #1
   26bb0:	str	r0, [r4]
   26bb4:	ldr	r2, [r4, #8]
   26bb8:	add	r6, r0, r0, lsl #1
   26bbc:	ldr	r0, [r2, r6, lsl #3]!
   26bc0:	str	r0, [r1]
   26bc4:	ldr	r1, [r2, #8]
   26bc8:	lsl	r7, r5, #3
   26bcc:	mov	r0, r3
   26bd0:	mov	r2, r7
   26bd4:	bl	1192c <memcpy@plt>
   26bd8:	ldr	r0, [r4, #8]
   26bdc:	add	r0, r0, r6, lsl #3
   26be0:	ldr	r0, [r0, #8]
   26be4:	add	r1, r0, r5, lsl #3
   26be8:	mov	r0, r8
   26bec:	mov	r2, r7
   26bf0:	bl	1192c <memcpy@plt>
   26bf4:	ldr	r0, [r9, #8]
   26bf8:	bl	1a22c <__assert_fail@plt+0x8528>
   26bfc:	ldr	r0, [r4, #8]
   26c00:	add	r0, r0, r6, lsl #3
   26c04:	ldr	r0, [r0, #8]
   26c08:	bl	1a22c <__assert_fail@plt+0x8528>
   26c0c:	ldr	r0, [r4, #8]
   26c10:	add	r0, r0, r6, lsl #3
   26c14:	vldr	d16, [r0, #12]
   26c18:	ldr	r0, [r0, #20]
   26c1c:	str	r0, [r9, #8]
   26c20:	vstr	d16, [r9]
   26c24:	ldr	r0, [r4, #8]
   26c28:	add	r0, r0, r6, lsl #3
   26c2c:	ldr	r0, [r0, #4]
   26c30:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   26c34:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   26c38:	add	fp, sp, #28
   26c3c:	sub	sp, sp, #20
   26c40:	mov	r9, r3
   26c44:	mov	r5, r0
   26c48:	ldr	r4, [r0, #84]	; 0x54
   26c4c:	ldr	r3, [r4]
   26c50:	ldr	sl, [fp, #12]
   26c54:	add	r0, r3, sl, lsl #3
   26c58:	ldr	r7, [r0, #4]
   26c5c:	ldr	r0, [fp, #16]
   26c60:	ldr	r6, [fp, #8]
   26c64:	tst	r7, #8
   26c68:	bne	26d24 <__assert_fail@plt+0x15020>
   26c6c:	tst	r7, #1048576	; 0x100000
   26c70:	bne	26dc4 <__assert_fail@plt+0x150c0>
   26c74:	mov	ip, r1
   26c78:	mov	r9, r6
   26c7c:	uxtb	r1, r7
   26c80:	cmp	r1, #4
   26c84:	bne	26de8 <__assert_fail@plt+0x150e4>
   26c88:	ldr	r0, [r3, sl, lsl #3]
   26c8c:	add	r0, r0, #1
   26c90:	mov	r7, #0
   26c94:	mov	r6, ip
   26c98:	cmp	r0, ip
   26c9c:	mov	r3, r2
   26ca0:	movlt	r1, r3
   26ca4:	ldrlt	r2, [r1, r0, lsl #3]!
   26ca8:	ldrlt	r1, [r1, #4]
   26cac:	sublt	r7, r1, r2
   26cb0:	ldr	r1, [fp, #20]
   26cb4:	cmp	r1, #0
   26cb8:	beq	26e6c <__assert_fail@plt+0x15168>
   26cbc:	mvn	r8, #0
   26cc0:	cmp	r0, r6
   26cc4:	bge	26ed8 <__assert_fail@plt+0x151d4>
   26cc8:	ldr	r1, [r3, r0, lsl #3]
   26ccc:	cmn	r1, #1
   26cd0:	beq	26ed8 <__assert_fail@plt+0x151d4>
   26cd4:	add	r0, r3, r0, lsl #3
   26cd8:	ldr	r0, [r0, #4]
   26cdc:	cmn	r0, #1
   26ce0:	beq	26ed8 <__assert_fail@plt+0x151d4>
   26ce4:	cmp	r7, #0
   26ce8:	beq	26ee4 <__assert_fail@plt+0x151e0>
   26cec:	mov	r0, r9
   26cf0:	ldr	r2, [r9]
   26cf4:	ldr	r0, [r5, #28]
   26cf8:	sub	r0, r0, r2
   26cfc:	cmp	r0, r7
   26d00:	blt	26ed8 <__assert_fail@plt+0x151d4>
   26d04:	ldr	r3, [r5, #4]
   26d08:	add	r0, r3, r1
   26d0c:	add	r1, r3, r2
   26d10:	mov	r2, r7
   26d14:	bl	11974 <memcmp@plt>
   26d18:	cmp	r0, #0
   26d1c:	bne	26ed8 <__assert_fail@plt+0x151d4>
   26d20:	b	26e74 <__assert_fail@plt+0x15170>
   26d24:	str	r1, [sp, #12]
   26d28:	str	r2, [sp, #16]
   26d2c:	ldr	r2, [r6]
   26d30:	ldr	r1, [r5, #100]	; 0x64
   26d34:	ldr	r5, [r1, r2, lsl #2]
   26d38:	ldr	r4, [r4, #20]
   26d3c:	mov	r1, sl
   26d40:	bl	21174 <__assert_fail@plt+0xf470>
   26d44:	cmp	r0, #0
   26d48:	bne	26d64 <__assert_fail@plt+0x15060>
   26d4c:	ldr	r0, [fp, #16]
   26d50:	mov	r1, sl
   26d54:	bl	20f10 <__assert_fail@plt+0xf20c>
   26d58:	mvn	r8, #1
   26d5c:	cmp	r0, #0
   26d60:	beq	26ed8 <__assert_fail@plt+0x151d4>
   26d64:	add	r0, sl, sl, lsl #1
   26d68:	add	r1, r4, r0, lsl #2
   26d6c:	mov	r0, r1
   26d70:	ldr	r2, [r0, #4]!
   26d74:	cmp	r2, #1
   26d78:	blt	26e10 <__assert_fail@plt+0x1510c>
   26d7c:	add	sl, r5, #4
   26d80:	ldr	r7, [r1, #8]
   26d84:	ldr	r6, [r0]
   26d88:	mov	r5, #0
   26d8c:	mvn	r8, #0
   26d90:	ldr	r4, [r7, r5, lsl #2]
   26d94:	mov	r0, sl
   26d98:	mov	r1, r4
   26d9c:	bl	21174 <__assert_fail@plt+0xf470>
   26da0:	cmp	r0, #0
   26da4:	beq	26db4 <__assert_fail@plt+0x150b0>
   26da8:	cmn	r8, #1
   26dac:	bne	26e18 <__assert_fail@plt+0x15114>
   26db0:	mov	r8, r4
   26db4:	add	r5, r5, #1
   26db8:	cmp	r5, r6
   26dbc:	blt	26d90 <__assert_fail@plt+0x1508c>
   26dc0:	b	26ed8 <__assert_fail@plt+0x151d4>
   26dc4:	mov	r9, r6
   26dc8:	ldr	r3, [r6]
   26dcc:	mov	r0, r4
   26dd0:	mov	r1, sl
   26dd4:	mov	r2, r5
   26dd8:	bl	24754 <__assert_fail@plt+0x12a50>
   26ddc:	mov	r7, r0
   26de0:	cmp	r0, #0
   26de4:	bne	26e74 <__assert_fail@plt+0x15170>
   26de8:	ldr	r0, [r4]
   26dec:	add	r1, r0, sl, lsl #3
   26df0:	ldr	r2, [r9]
   26df4:	mov	r0, r5
   26df8:	bl	24a28 <__assert_fail@plt+0x12d24>
   26dfc:	mvn	r8, #0
   26e00:	mov	r7, #1
   26e04:	cmp	r0, #0
   26e08:	bne	26e74 <__assert_fail@plt+0x15170>
   26e0c:	b	26ed8 <__assert_fail@plt+0x151d4>
   26e10:	mvn	r8, #0
   26e14:	b	26ed8 <__assert_fail@plt+0x151d4>
   26e18:	ldr	r5, [fp, #16]
   26e1c:	mov	r0, r5
   26e20:	mov	r1, r8
   26e24:	bl	21174 <__assert_fail@plt+0xf470>
   26e28:	cmp	r0, #0
   26e2c:	bne	26ed4 <__assert_fail@plt+0x151d0>
   26e30:	ldr	r0, [fp, #20]
   26e34:	cmp	r0, #0
   26e38:	beq	26ed8 <__assert_fail@plt+0x151d4>
   26e3c:	ldr	r1, [fp, #8]
   26e40:	ldr	r1, [r1]
   26e44:	ldr	r2, [sp, #16]
   26e48:	stm	sp, {r2, r9}
   26e4c:	str	r5, [sp, #8]
   26e50:	mov	r2, r4
   26e54:	ldr	r3, [sp, #12]
   26e58:	bl	26f78 <__assert_fail@plt+0x15274>
   26e5c:	mvn	r4, #1
   26e60:	cmp	r0, #0
   26e64:	movne	r8, r4
   26e68:	b	26ed8 <__assert_fail@plt+0x151d4>
   26e6c:	cmp	r7, #0
   26e70:	beq	26ee4 <__assert_fail@plt+0x151e0>
   26e74:	ldr	r0, [r4, #12]
   26e78:	ldr	r4, [r0, sl, lsl #2]
   26e7c:	ldr	r0, [r9]
   26e80:	add	r0, r0, r7
   26e84:	str	r0, [r9]
   26e88:	ldr	r1, [fp, #20]
   26e8c:	cmp	r1, #0
   26e90:	beq	26ec8 <__assert_fail@plt+0x151c4>
   26e94:	ldr	r1, [r5, #92]	; 0x5c
   26e98:	mvn	r8, #0
   26e9c:	cmp	r0, r1
   26ea0:	bgt	26ed8 <__assert_fail@plt+0x151d4>
   26ea4:	ldr	r1, [r5, #100]	; 0x64
   26ea8:	ldr	r0, [r1, r0, lsl #2]
   26eac:	cmp	r0, #0
   26eb0:	beq	26ed8 <__assert_fail@plt+0x151d4>
   26eb4:	add	r0, r0, #4
   26eb8:	mov	r1, r4
   26ebc:	bl	21174 <__assert_fail@plt+0xf470>
   26ec0:	cmp	r0, #0
   26ec4:	beq	26ed8 <__assert_fail@plt+0x151d4>
   26ec8:	mov	r0, #0
   26ecc:	ldr	r1, [fp, #16]
   26ed0:	str	r0, [r1, #4]
   26ed4:	mov	r8, r4
   26ed8:	mov	r0, r8
   26edc:	sub	sp, fp, #28
   26ee0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   26ee4:	ldr	r0, [fp, #16]
   26ee8:	mov	r1, sl
   26eec:	bl	20f10 <__assert_fail@plt+0xf20c>
   26ef0:	cmp	r0, #0
   26ef4:	beq	26f30 <__assert_fail@plt+0x1522c>
   26ef8:	ldr	r0, [r4, #20]
   26efc:	add	r1, sl, sl, lsl #1
   26f00:	add	r0, r0, r1, lsl #2
   26f04:	ldr	r0, [r0, #8]
   26f08:	ldr	r8, [r0]
   26f0c:	ldr	r0, [r9]
   26f10:	ldr	r1, [r5, #100]	; 0x64
   26f14:	ldr	r0, [r1, r0, lsl #2]
   26f18:	add	r0, r0, #4
   26f1c:	mov	r1, r8
   26f20:	bl	21174 <__assert_fail@plt+0xf470>
   26f24:	cmp	r0, #0
   26f28:	bne	26ed8 <__assert_fail@plt+0x151d4>
   26f2c:	b	26de8 <__assert_fail@plt+0x150e4>
   26f30:	mvn	r8, #1
   26f34:	b	26ed8 <__assert_fail@plt+0x151d4>
   26f38:	push	{r4, sl, fp, lr}
   26f3c:	add	fp, sp, #8
   26f40:	mov	r4, r0
   26f44:	bl	26f60 <__assert_fail@plt+0x1525c>
   26f48:	mov	r0, #0
   26f4c:	add	r1, r4, #12
   26f50:	mvn	r2, #0
   26f54:	stm	r4, {r0, r2}
   26f58:	str	r1, [r4, #8]
   26f5c:	pop	{r4, sl, fp, pc}
   26f60:	mov	r1, r0
   26f64:	ldr	r0, [r0, #8]
   26f68:	add	r1, r1, #12
   26f6c:	cmp	r0, r1
   26f70:	bxeq	lr
   26f74:	b	1a22c <__assert_fail@plt+0x8528>
   26f78:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   26f7c:	add	fp, sp, #28
   26f80:	sub	sp, sp, #12
   26f84:	mov	r6, r3
   26f88:	mov	r9, r2
   26f8c:	mov	r5, r1
   26f90:	mov	r4, r0
   26f94:	ldr	r7, [r0]
   26f98:	ldr	r1, [r0, #4]
   26f9c:	add	r0, r7, #1
   26fa0:	str	r0, [r4]
   26fa4:	ldr	r2, [fp, #16]
   26fa8:	str	r2, [sp, #8]
   26fac:	ldr	r2, [fp, #12]
   26fb0:	str	r2, [sp, #4]
   26fb4:	ldr	sl, [fp, #8]
   26fb8:	cmp	r0, r1
   26fbc:	bne	26fe8 <__assert_fail@plt+0x152e4>
   26fc0:	ldr	r0, [r4, #8]
   26fc4:	add	r1, r1, r1, lsl #1
   26fc8:	lsl	r1, r1, #4
   26fcc:	bl	1a388 <__assert_fail@plt+0x8684>
   26fd0:	cmp	r0, #0
   26fd4:	beq	2705c <__assert_fail@plt+0x15358>
   26fd8:	str	r0, [r4, #8]
   26fdc:	ldr	r0, [r4, #4]
   26fe0:	lsl	r0, r0, #1
   26fe4:	str	r0, [r4, #4]
   26fe8:	ldr	r0, [r4, #8]
   26fec:	add	r8, r7, r7, lsl #1
   26ff0:	str	r5, [r0, r8, lsl #3]!
   26ff4:	str	r9, [r0, #4]
   26ff8:	lsl	r0, r6, #4
   26ffc:	bl	1a2f8 <__assert_fail@plt+0x85f4>
   27000:	ldr	r1, [r4, #8]
   27004:	add	r1, r1, r8, lsl #3
   27008:	str	r0, [r1, #8]
   2700c:	cmp	r0, #0
   27010:	beq	2705c <__assert_fail@plt+0x15358>
   27014:	lsl	r5, r6, #3
   27018:	mov	r1, sl
   2701c:	mov	r2, r5
   27020:	bl	1192c <memcpy@plt>
   27024:	ldr	r0, [r4, #8]
   27028:	add	r0, r0, r8, lsl #3
   2702c:	ldr	r0, [r0, #8]
   27030:	add	r0, r0, r6, lsl #3
   27034:	ldr	r1, [sp, #4]
   27038:	mov	r2, r5
   2703c:	bl	1192c <memcpy@plt>
   27040:	ldr	r0, [r4, #8]
   27044:	add	r0, r0, r8, lsl #3
   27048:	add	r0, r0, #12
   2704c:	ldr	r1, [sp, #8]
   27050:	sub	sp, fp, #28
   27054:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   27058:	b	210f8 <__assert_fail@plt+0xf3f4>
   2705c:	mov	r0, #12
   27060:	sub	sp, fp, #28
   27064:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   27068:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2706c:	add	fp, sp, #28
   27070:	sub	sp, sp, #4
   27074:	mov	r8, r1
   27078:	mov	r9, r0
   2707c:	ldrb	r0, [r0]
   27080:	cmp	r0, #0
   27084:	beq	2712c <__assert_fail@plt+0x15428>
   27088:	mov	sl, #1
   2708c:	mov	r7, #0
   27090:	ldrb	r4, [r8, r7]
   27094:	cmp	r4, #0
   27098:	beq	27104 <__assert_fail@plt+0x15400>
   2709c:	uxtb	r5, r0
   270a0:	bl	11ac4 <__ctype_b_loc@plt>
   270a4:	ldr	r6, [r0]
   270a8:	add	r0, r6, r5, lsl #1
   270ac:	ldrb	r0, [r0, #1]
   270b0:	tst	r0, #1
   270b4:	beq	270c4 <__assert_fail@plt+0x153c0>
   270b8:	bl	11aa0 <__ctype_tolower_loc@plt>
   270bc:	ldr	r0, [r0]
   270c0:	ldr	r5, [r0, r5, lsl #2]
   270c4:	add	r0, r6, r4, lsl #1
   270c8:	ldrb	r0, [r0, #1]
   270cc:	tst	r0, #1
   270d0:	beq	270e0 <__assert_fail@plt+0x153dc>
   270d4:	bl	11aa0 <__ctype_tolower_loc@plt>
   270d8:	ldr	r0, [r0]
   270dc:	ldr	r4, [r0, r4, lsl #2]
   270e0:	sub	r0, r5, r4
   270e4:	clz	r0, r0
   270e8:	lsr	r0, r0, #5
   270ec:	and	sl, sl, r0
   270f0:	add	r0, r9, r7
   270f4:	ldrb	r0, [r0, #1]
   270f8:	add	r7, r7, #1
   270fc:	cmp	r0, #0
   27100:	bne	27090 <__assert_fail@plt+0x1538c>
   27104:	add	r1, r8, r7
   27108:	ldrb	r2, [r1]
   2710c:	cmp	r2, #0
   27110:	mov	r0, r9
   27114:	movwne	r0, #0
   27118:	tst	sl, #1
   2711c:	cmpeq	r2, #0
   27120:	beq	27144 <__assert_fail@plt+0x15440>
   27124:	sub	sp, fp, #28
   27128:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2712c:	ldrb	r0, [r8]
   27130:	cmp	r0, #0
   27134:	movne	r9, #0
   27138:	mov	r0, r9
   2713c:	sub	sp, fp, #28
   27140:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   27144:	sub	r3, r1, r8
   27148:	sub	r1, r3, #1
   2714c:	add	r0, r9, #1
   27150:	mov	r2, r8
   27154:	sub	sp, fp, #28
   27158:	cmp	r3, #31
   2715c:	bhi	27168 <__assert_fail@plt+0x15464>
   27160:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   27164:	b	27170 <__assert_fail@plt+0x1546c>
   27168:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2716c:	b	2757c <__assert_fail@plt+0x15878>
   27170:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   27174:	add	fp, sp, #28
   27178:	sub	sp, sp, #44	; 0x2c
   2717c:	mov	r6, r3
   27180:	mov	r5, r2
   27184:	mov	r8, r1
   27188:	mov	r7, r0
   2718c:	sub	r2, fp, #32
   27190:	mov	r0, r5
   27194:	mov	r1, r3
   27198:	bl	27a80 <__assert_fail@plt+0x15d7c>
   2719c:	mov	r4, r0
   271a0:	ldr	r9, [fp, #-32]	; 0xffffffe0
   271a4:	add	r1, r5, r9
   271a8:	str	r5, [sp, #32]
   271ac:	mov	r0, r5
   271b0:	mov	r2, r4
   271b4:	bl	11b3c <strncasecmp@plt>
   271b8:	cmp	r0, #0
   271bc:	beq	2737c <__assert_fail@plt+0x15678>
   271c0:	sub	r0, r6, r4
   271c4:	cmp	r4, r0
   271c8:	movcs	r0, r4
   271cc:	add	r0, r0, #1
   271d0:	str	r0, [sp, #16]
   271d4:	str	r0, [fp, #-32]	; 0xffffffe0
   271d8:	add	r0, r7, r8
   271dc:	sub	r2, r6, r8
   271e0:	mov	r5, #0
   271e4:	mov	r1, #0
   271e8:	bl	11bb4 <memchr@plt>
   271ec:	cmp	r6, #0
   271f0:	beq	27570 <__assert_fail@plt+0x1586c>
   271f4:	str	r4, [sp, #28]
   271f8:	cmp	r0, #0
   271fc:	bne	27570 <__assert_fail@plt+0x1586c>
   27200:	ldr	r0, [sp, #28]
   27204:	ldr	r1, [sp, #32]
   27208:	add	r0, r1, r0
   2720c:	str	r0, [sp, #36]	; 0x24
   27210:	sub	sl, r1, #1
   27214:	sub	r0, r7, #1
   27218:	str	r0, [sp, #12]
   2721c:	mov	r0, #0
   27220:	str	r0, [sp, #32]
   27224:	mov	r4, r6
   27228:	str	r7, [sp, #20]
   2722c:	str	r4, [sp, #24]
   27230:	mov	r8, r6
   27234:	ldr	r0, [sp, #28]
   27238:	cmp	r0, r6
   2723c:	bcs	272c0 <__assert_fail@plt+0x155bc>
   27240:	ldr	r0, [sp, #20]
   27244:	ldr	r1, [sp, #32]
   27248:	add	r0, r0, r1
   2724c:	ldr	r1, [sp, #28]
   27250:	add	r9, r0, r1
   27254:	bl	11ac4 <__ctype_b_loc@plt>
   27258:	ldr	r7, [r0]
   2725c:	mov	r6, #0
   27260:	ldr	r0, [sp, #36]	; 0x24
   27264:	ldrb	r4, [r0, r6]
   27268:	add	r0, r7, r4, lsl #1
   2726c:	ldrb	r0, [r0, #1]
   27270:	tst	r0, #1
   27274:	beq	27284 <__assert_fail@plt+0x15580>
   27278:	bl	11aa0 <__ctype_tolower_loc@plt>
   2727c:	ldr	r0, [r0]
   27280:	ldr	r4, [r0, r4, lsl #2]
   27284:	ldrb	r5, [r9, r6]
   27288:	add	r0, r7, r5, lsl #1
   2728c:	ldrb	r0, [r0, #1]
   27290:	tst	r0, #1
   27294:	beq	272a4 <__assert_fail@plt+0x155a0>
   27298:	bl	11aa0 <__ctype_tolower_loc@plt>
   2729c:	ldr	r0, [r0]
   272a0:	ldr	r5, [r0, r5, lsl #2]
   272a4:	cmp	r4, r5
   272a8:	bne	27334 <__assert_fail@plt+0x15630>
   272ac:	add	r6, r6, #1
   272b0:	ldr	r0, [sp, #28]
   272b4:	add	r0, r0, r6
   272b8:	cmp	r0, r8
   272bc:	bcc	27260 <__assert_fail@plt+0x1555c>
   272c0:	ldr	r0, [sp, #32]
   272c4:	ldr	r1, [sp, #12]
   272c8:	add	r5, r1, r0
   272cc:	ldr	r9, [sp, #28]
   272d0:	cmp	r9, #0
   272d4:	beq	27558 <__assert_fail@plt+0x15854>
   272d8:	bl	11ac4 <__ctype_b_loc@plt>
   272dc:	ldrb	r4, [sl, r9]
   272e0:	ldr	r6, [r0]
   272e4:	add	r0, r6, r4, lsl #1
   272e8:	ldrb	r0, [r0, #1]
   272ec:	tst	r0, #1
   272f0:	beq	27300 <__assert_fail@plt+0x155fc>
   272f4:	bl	11aa0 <__ctype_tolower_loc@plt>
   272f8:	ldr	r0, [r0]
   272fc:	ldr	r4, [r0, r4, lsl #2]
   27300:	ldrb	r7, [r5, r9]
   27304:	add	r0, r6, r7, lsl #1
   27308:	ldrb	r0, [r0, #1]
   2730c:	tst	r0, #1
   27310:	beq	27320 <__assert_fail@plt+0x1561c>
   27314:	bl	11aa0 <__ctype_tolower_loc@plt>
   27318:	ldr	r0, [r0]
   2731c:	ldr	r7, [r0, r7, lsl #2]
   27320:	sub	r9, r9, #1
   27324:	cmp	r4, r7
   27328:	beq	272d0 <__assert_fail@plt+0x155cc>
   2732c:	ldr	r1, [sp, #16]
   27330:	b	27338 <__assert_fail@plt+0x15634>
   27334:	add	r1, r6, #1
   27338:	ldr	r7, [sp, #20]
   2733c:	ldr	r3, [sp, #24]
   27340:	add	r0, r7, r3
   27344:	ldr	r2, [sp, #32]
   27348:	add	r2, r1, r2
   2734c:	mov	r6, r8
   27350:	str	r2, [sp, #32]
   27354:	add	r4, r2, r8
   27358:	sub	r2, r4, r3
   2735c:	mov	r5, #0
   27360:	mov	r1, #0
   27364:	bl	11bb4 <memchr@plt>
   27368:	cmp	r4, #0
   2736c:	beq	27570 <__assert_fail@plt+0x1586c>
   27370:	cmp	r0, #0
   27374:	beq	2722c <__assert_fail@plt+0x15528>
   27378:	b	27570 <__assert_fail@plt+0x1586c>
   2737c:	add	r0, r7, r8
   27380:	sub	r2, r6, r8
   27384:	mov	r5, #0
   27388:	mov	r1, #0
   2738c:	bl	11bb4 <memchr@plt>
   27390:	cmp	r6, #0
   27394:	beq	27570 <__assert_fail@plt+0x1586c>
   27398:	str	r9, [sp, #12]
   2739c:	str	r4, [sp, #28]
   273a0:	cmp	r0, #0
   273a4:	bne	27570 <__assert_fail@plt+0x1586c>
   273a8:	ldr	r0, [sp, #12]
   273ac:	sub	r0, r6, r0
   273b0:	str	r0, [sp, #8]
   273b4:	ldr	r0, [sp, #32]
   273b8:	sub	r0, r0, #1
   273bc:	str	r0, [sp, #36]	; 0x24
   273c0:	sub	r0, r7, #1
   273c4:	str	r0, [sp, #4]
   273c8:	ldr	r0, [sp, #28]
   273cc:	rsb	r0, r0, #0
   273d0:	str	r0, [sp]
   273d4:	mov	r0, #0
   273d8:	str	r0, [sp, #24]
   273dc:	mov	r4, r6
   273e0:	mov	r8, #0
   273e4:	str	r7, [sp, #20]
   273e8:	str	r4, [sp, #16]
   273ec:	ldr	r5, [sp, #28]
   273f0:	cmp	r5, r8
   273f4:	movcc	r5, r8
   273f8:	mov	sl, r6
   273fc:	cmp	r5, r6
   27400:	bcs	27470 <__assert_fail@plt+0x1576c>
   27404:	ldr	r0, [sp, #20]
   27408:	ldr	r1, [sp, #24]
   2740c:	add	r9, r0, r1
   27410:	bl	11ac4 <__ctype_b_loc@plt>
   27414:	ldr	r4, [r0]
   27418:	ldr	r0, [sp, #32]
   2741c:	ldrb	r7, [r0, r5]
   27420:	add	r0, r4, r7, lsl #1
   27424:	ldrb	r0, [r0, #1]
   27428:	tst	r0, #1
   2742c:	beq	2743c <__assert_fail@plt+0x15738>
   27430:	bl	11aa0 <__ctype_tolower_loc@plt>
   27434:	ldr	r0, [r0]
   27438:	ldr	r7, [r0, r7, lsl #2]
   2743c:	ldrb	r6, [r9, r5]
   27440:	add	r0, r4, r6, lsl #1
   27444:	ldrb	r0, [r0, #1]
   27448:	tst	r0, #1
   2744c:	beq	2745c <__assert_fail@plt+0x15758>
   27450:	bl	11aa0 <__ctype_tolower_loc@plt>
   27454:	ldr	r0, [r0]
   27458:	ldr	r6, [r0, r6, lsl #2]
   2745c:	cmp	r7, r6
   27460:	bne	27504 <__assert_fail@plt+0x15800>
   27464:	add	r5, r5, #1
   27468:	cmp	r5, sl
   2746c:	bcc	27418 <__assert_fail@plt+0x15714>
   27470:	ldr	r0, [sp, #4]
   27474:	ldr	r1, [sp, #24]
   27478:	add	r5, r0, r1
   2747c:	ldr	r0, [sp, #28]
   27480:	mov	r6, r0
   27484:	cmp	r8, r0
   27488:	bcs	274e4 <__assert_fail@plt+0x157e0>
   2748c:	bl	11ac4 <__ctype_b_loc@plt>
   27490:	ldr	r1, [sp, #36]	; 0x24
   27494:	ldrb	r4, [r1, r6]
   27498:	ldr	r7, [r0]
   2749c:	add	r0, r7, r4, lsl #1
   274a0:	ldrb	r0, [r0, #1]
   274a4:	tst	r0, #1
   274a8:	beq	274b8 <__assert_fail@plt+0x157b4>
   274ac:	bl	11aa0 <__ctype_tolower_loc@plt>
   274b0:	ldr	r0, [r0]
   274b4:	ldr	r4, [r0, r4, lsl #2]
   274b8:	ldrb	r9, [r5, r6]
   274bc:	add	r0, r7, r9, lsl #1
   274c0:	ldrb	r0, [r0, #1]
   274c4:	tst	r0, #1
   274c8:	beq	274d8 <__assert_fail@plt+0x157d4>
   274cc:	bl	11aa0 <__ctype_tolower_loc@plt>
   274d0:	ldr	r0, [r0]
   274d4:	ldr	r9, [r0, r9, lsl #2]
   274d8:	sub	r0, r6, #1
   274dc:	cmp	r4, r9
   274e0:	beq	27480 <__assert_fail@plt+0x1577c>
   274e4:	add	r0, r8, #1
   274e8:	cmp	r6, r0
   274ec:	ldr	r8, [sp, #8]
   274f0:	ldr	r1, [sp, #12]
   274f4:	mov	r6, sl
   274f8:	ldr	r7, [sp, #20]
   274fc:	bcs	2751c <__assert_fail@plt+0x15818>
   27500:	b	27568 <__assert_fail@plt+0x15864>
   27504:	ldr	r0, [sp]
   27508:	add	r0, r0, r5
   2750c:	add	r1, r0, #1
   27510:	mov	r8, #0
   27514:	mov	r6, sl
   27518:	ldr	r7, [sp, #20]
   2751c:	ldr	r3, [sp, #16]
   27520:	add	r0, r7, r3
   27524:	ldr	r2, [sp, #24]
   27528:	add	r2, r1, r2
   2752c:	str	r2, [sp, #24]
   27530:	add	r4, r2, r6
   27534:	sub	r2, r4, r3
   27538:	mov	r5, #0
   2753c:	mov	r1, #0
   27540:	bl	11bb4 <memchr@plt>
   27544:	cmp	r4, #0
   27548:	beq	27570 <__assert_fail@plt+0x1586c>
   2754c:	cmp	r0, #0
   27550:	beq	273e8 <__assert_fail@plt+0x156e4>
   27554:	b	27570 <__assert_fail@plt+0x1586c>
   27558:	ldr	r0, [sp, #20]
   2755c:	ldr	r1, [sp, #32]
   27560:	add	r5, r0, r1
   27564:	b	27570 <__assert_fail@plt+0x1586c>
   27568:	ldr	r0, [sp, #24]
   2756c:	add	r5, r7, r0
   27570:	mov	r0, r5
   27574:	sub	sp, fp, #28
   27578:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2757c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   27580:	add	fp, sp, #28
   27584:	sub	sp, sp, #60	; 0x3c
   27588:	sub	sp, sp, #1024	; 0x400
   2758c:	mov	r9, r3
   27590:	mov	r3, r2
   27594:	mov	r8, r1
   27598:	str	r0, [sp, #32]
   2759c:	sub	r2, fp, #36	; 0x24
   275a0:	str	r3, [sp, #44]	; 0x2c
   275a4:	mov	r0, r3
   275a8:	mov	r1, r9
   275ac:	bl	27a80 <__assert_fail@plt+0x15d7c>
   275b0:	str	r0, [sp, #36]	; 0x24
   275b4:	mov	r0, #0
   275b8:	add	sl, sp, #52	; 0x34
   275bc:	str	r9, [sl, r0, lsl #2]
   275c0:	add	r0, r0, #1
   275c4:	cmp	r0, #256	; 0x100
   275c8:	bne	275bc <__assert_fail@plt+0x158b8>
   275cc:	cmp	r9, #0
   275d0:	beq	27618 <__assert_fail@plt+0x15914>
   275d4:	sub	r5, r9, #1
   275d8:	bl	11ac4 <__ctype_b_loc@plt>
   275dc:	ldr	r6, [r0]
   275e0:	ldr	r7, [sp, #44]	; 0x2c
   275e4:	ldrb	r4, [r7]
   275e8:	add	r0, r6, r4, lsl #1
   275ec:	ldrb	r0, [r0, #1]
   275f0:	tst	r0, #1
   275f4:	beq	27604 <__assert_fail@plt+0x15900>
   275f8:	bl	11aa0 <__ctype_tolower_loc@plt>
   275fc:	ldr	r0, [r0]
   27600:	ldr	r4, [r0, r4, lsl #2]
   27604:	str	r5, [sl, r4, lsl #2]
   27608:	sub	r5, r5, #1
   2760c:	add	r7, r7, #1
   27610:	cmn	r5, #1
   27614:	bne	275e4 <__assert_fail@plt+0x158e0>
   27618:	ldr	r5, [fp, #-36]	; 0xffffffdc
   2761c:	ldr	r0, [sp, #44]	; 0x2c
   27620:	add	r1, r0, r5
   27624:	ldr	r4, [sp, #36]	; 0x24
   27628:	mov	r2, r4
   2762c:	bl	11b3c <strncasecmp@plt>
   27630:	cmp	r0, #0
   27634:	str	r9, [sp, #20]
   27638:	beq	27838 <__assert_fail@plt+0x15b34>
   2763c:	sub	r0, r9, r4
   27640:	cmp	r4, r0
   27644:	movcs	r0, r4
   27648:	add	r0, r0, #1
   2764c:	str	r0, [sp, #24]
   27650:	str	r0, [fp, #-36]	; 0xffffffdc
   27654:	ldr	r0, [sp, #32]
   27658:	add	r0, r0, r8
   2765c:	sub	r2, r9, r8
   27660:	mov	r6, #0
   27664:	mov	r1, #0
   27668:	bl	11bb4 <memchr@plt>
   2766c:	cmp	r9, #0
   27670:	beq	27a68 <__assert_fail@plt+0x15d64>
   27674:	cmp	r0, #0
   27678:	bne	27a68 <__assert_fail@plt+0x15d64>
   2767c:	ldr	r0, [sp, #36]	; 0x24
   27680:	ldr	r1, [sp, #44]	; 0x2c
   27684:	add	r0, r1, r0
   27688:	str	r0, [sp, #40]	; 0x28
   2768c:	sub	sl, r1, #1
   27690:	ldr	r0, [sp, #32]
   27694:	sub	r0, r0, #1
   27698:	str	r0, [sp, #16]
   2769c:	ldr	r4, [sp, #20]
   276a0:	sub	r0, r4, #1
   276a4:	str	r0, [sp, #48]	; 0x30
   276a8:	bl	11ac4 <__ctype_b_loc@plt>
   276ac:	ldr	r9, [r0]
   276b0:	mov	r8, #0
   276b4:	mov	r5, r4
   276b8:	ldr	r0, [sp, #32]
   276bc:	add	r7, r0, r5
   276c0:	ldrb	r4, [r7, #-1]
   276c4:	add	r0, r9, r4, lsl #1
   276c8:	ldrb	r0, [r0, #1]
   276cc:	tst	r0, #1
   276d0:	beq	276e0 <__assert_fail@plt+0x159dc>
   276d4:	bl	11aa0 <__ctype_tolower_loc@plt>
   276d8:	ldr	r0, [r0]
   276dc:	ldr	r4, [r0, r4, lsl #2]
   276e0:	add	r0, sp, #52	; 0x34
   276e4:	ldr	r0, [r0, r4, lsl #2]
   276e8:	cmp	r0, #0
   276ec:	bne	27800 <__assert_fail@plt+0x15afc>
   276f0:	str	r7, [sp, #28]
   276f4:	str	r5, [sp, #44]	; 0x2c
   276f8:	mov	r7, sl
   276fc:	ldr	r0, [sp, #36]	; 0x24
   27700:	ldr	r1, [sp, #48]	; 0x30
   27704:	cmp	r0, r1
   27708:	bcs	27784 <__assert_fail@plt+0x15a80>
   2770c:	ldr	r0, [sp, #32]
   27710:	add	r0, r0, r8
   27714:	ldr	r1, [sp, #36]	; 0x24
   27718:	add	sl, r0, r1
   2771c:	mov	r6, #0
   27720:	ldr	r0, [sp, #40]	; 0x28
   27724:	ldrb	r5, [r0, r6]
   27728:	add	r0, r9, r5, lsl #1
   2772c:	ldrb	r0, [r0, #1]
   27730:	tst	r0, #1
   27734:	beq	27744 <__assert_fail@plt+0x15a40>
   27738:	bl	11aa0 <__ctype_tolower_loc@plt>
   2773c:	ldr	r0, [r0]
   27740:	ldr	r5, [r0, r5, lsl #2]
   27744:	ldrb	r4, [sl, r6]
   27748:	add	r0, r9, r4, lsl #1
   2774c:	ldrb	r0, [r0, #1]
   27750:	tst	r0, #1
   27754:	beq	27764 <__assert_fail@plt+0x15a60>
   27758:	bl	11aa0 <__ctype_tolower_loc@plt>
   2775c:	ldr	r0, [r0]
   27760:	ldr	r4, [r0, r4, lsl #2]
   27764:	cmp	r5, r4
   27768:	bne	277f0 <__assert_fail@plt+0x15aec>
   2776c:	add	r6, r6, #1
   27770:	ldr	r0, [sp, #36]	; 0x24
   27774:	add	r0, r0, r6
   27778:	ldr	r1, [sp, #48]	; 0x30
   2777c:	cmp	r0, r1
   27780:	bcc	27720 <__assert_fail@plt+0x15a1c>
   27784:	ldr	r0, [sp, #16]
   27788:	add	r5, r0, r8
   2778c:	ldr	r6, [sp, #36]	; 0x24
   27790:	mov	sl, r7
   27794:	cmp	r6, #0
   27798:	beq	27a60 <__assert_fail@plt+0x15d5c>
   2779c:	ldrb	r7, [sl, r6]
   277a0:	add	r0, r9, r7, lsl #1
   277a4:	ldrb	r0, [r0, #1]
   277a8:	tst	r0, #1
   277ac:	beq	277bc <__assert_fail@plt+0x15ab8>
   277b0:	bl	11aa0 <__ctype_tolower_loc@plt>
   277b4:	ldr	r0, [r0]
   277b8:	ldr	r7, [r0, r7, lsl #2]
   277bc:	ldrb	r4, [r5, r6]
   277c0:	add	r0, r9, r4, lsl #1
   277c4:	ldrb	r0, [r0, #1]
   277c8:	tst	r0, #1
   277cc:	beq	277dc <__assert_fail@plt+0x15ad8>
   277d0:	bl	11aa0 <__ctype_tolower_loc@plt>
   277d4:	ldr	r0, [r0]
   277d8:	ldr	r4, [r0, r4, lsl #2]
   277dc:	sub	r6, r6, #1
   277e0:	cmp	r7, r4
   277e4:	beq	27794 <__assert_fail@plt+0x15a90>
   277e8:	ldr	r0, [sp, #24]
   277ec:	b	277f8 <__assert_fail@plt+0x15af4>
   277f0:	add	r0, r6, #1
   277f4:	mov	sl, r7
   277f8:	ldr	r5, [sp, #44]	; 0x2c
   277fc:	ldr	r7, [sp, #28]
   27800:	add	r8, r0, r8
   27804:	ldr	r0, [sp, #20]
   27808:	add	r4, r8, r0
   2780c:	sub	r2, r4, r5
   27810:	mov	r6, #0
   27814:	mov	r0, r7
   27818:	mov	r1, #0
   2781c:	bl	11bb4 <memchr@plt>
   27820:	cmp	r4, #0
   27824:	beq	27a68 <__assert_fail@plt+0x15d64>
   27828:	cmp	r0, #0
   2782c:	mov	r5, r4
   27830:	beq	276b8 <__assert_fail@plt+0x159b4>
   27834:	b	27a68 <__assert_fail@plt+0x15d64>
   27838:	str	r5, [sp, #16]
   2783c:	ldr	r0, [sp, #32]
   27840:	add	r0, r0, r8
   27844:	sub	r2, r9, r8
   27848:	mov	r6, #0
   2784c:	mov	r1, #0
   27850:	bl	11bb4 <memchr@plt>
   27854:	cmp	r9, #0
   27858:	beq	27a68 <__assert_fail@plt+0x15d64>
   2785c:	cmp	r0, #0
   27860:	ldr	r8, [sp, #16]
   27864:	bne	27a68 <__assert_fail@plt+0x15d64>
   27868:	ldr	r4, [sp, #20]
   2786c:	sub	r5, r4, r8
   27870:	ldr	r0, [sp, #44]	; 0x2c
   27874:	sub	r0, r0, #1
   27878:	str	r0, [sp, #48]	; 0x30
   2787c:	ldr	r0, [sp, #32]
   27880:	sub	r0, r0, #1
   27884:	str	r0, [sp, #8]
   27888:	ldr	r0, [sp, #36]	; 0x24
   2788c:	rsb	r0, r0, #0
   27890:	str	r0, [sp, #4]
   27894:	sub	r0, r4, #1
   27898:	str	r0, [sp, #40]	; 0x28
   2789c:	bl	11ac4 <__ctype_b_loc@plt>
   278a0:	ldr	r7, [r0]
   278a4:	mov	sl, #0
   278a8:	mov	r9, #0
   278ac:	str	r5, [sp, #12]
   278b0:	ldr	r0, [sp, #32]
   278b4:	str	r4, [sp, #28]
   278b8:	add	r0, r0, r4
   278bc:	str	r0, [sp, #24]
   278c0:	ldrb	r4, [r0, #-1]
   278c4:	add	r0, r7, r4, lsl #1
   278c8:	ldrb	r0, [r0, #1]
   278cc:	tst	r0, #1
   278d0:	beq	278e0 <__assert_fail@plt+0x15bdc>
   278d4:	bl	11aa0 <__ctype_tolower_loc@plt>
   278d8:	ldr	r0, [r0]
   278dc:	ldr	r4, [r0, r4, lsl #2]
   278e0:	add	r0, sp, #52	; 0x34
   278e4:	ldr	r1, [r0, r4, lsl #2]
   278e8:	cmp	r1, #0
   278ec:	beq	2790c <__assert_fail@plt+0x15c08>
   278f0:	cmp	r1, r8
   278f4:	mov	r0, r1
   278f8:	movcc	r0, r5
   278fc:	cmp	r9, #0
   27900:	moveq	r0, r1
   27904:	mov	r9, #0
   27908:	b	27a28 <__assert_fail@plt+0x15d24>
   2790c:	ldr	r6, [sp, #36]	; 0x24
   27910:	cmp	r6, r9
   27914:	movcc	r6, r9
   27918:	ldr	r0, [sp, #40]	; 0x28
   2791c:	cmp	r6, r0
   27920:	bcs	27988 <__assert_fail@plt+0x15c84>
   27924:	ldr	r0, [sp, #32]
   27928:	add	r8, r0, sl
   2792c:	ldr	r0, [sp, #44]	; 0x2c
   27930:	ldrb	r4, [r0, r6]
   27934:	add	r0, r7, r4, lsl #1
   27938:	ldrb	r0, [r0, #1]
   2793c:	tst	r0, #1
   27940:	beq	27950 <__assert_fail@plt+0x15c4c>
   27944:	bl	11aa0 <__ctype_tolower_loc@plt>
   27948:	ldr	r0, [r0]
   2794c:	ldr	r4, [r0, r4, lsl #2]
   27950:	ldrb	r5, [r8, r6]
   27954:	add	r0, r7, r5, lsl #1
   27958:	ldrb	r0, [r0, #1]
   2795c:	tst	r0, #1
   27960:	beq	27970 <__assert_fail@plt+0x15c6c>
   27964:	bl	11aa0 <__ctype_tolower_loc@plt>
   27968:	ldr	r0, [r0]
   2796c:	ldr	r5, [r0, r5, lsl #2]
   27970:	cmp	r4, r5
   27974:	bne	27a10 <__assert_fail@plt+0x15d0c>
   27978:	add	r6, r6, #1
   2797c:	ldr	r0, [sp, #40]	; 0x28
   27980:	cmp	r6, r0
   27984:	bcc	2792c <__assert_fail@plt+0x15c28>
   27988:	ldr	r0, [sp, #8]
   2798c:	add	r5, r0, sl
   27990:	ldr	r0, [sp, #36]	; 0x24
   27994:	mov	r6, r0
   27998:	cmp	r9, r0
   2799c:	bcs	279f0 <__assert_fail@plt+0x15cec>
   279a0:	ldr	r0, [sp, #48]	; 0x30
   279a4:	ldrb	r8, [r0, r6]
   279a8:	add	r0, r7, r8, lsl #1
   279ac:	ldrb	r0, [r0, #1]
   279b0:	tst	r0, #1
   279b4:	beq	279c4 <__assert_fail@plt+0x15cc0>
   279b8:	bl	11aa0 <__ctype_tolower_loc@plt>
   279bc:	ldr	r0, [r0]
   279c0:	ldr	r8, [r0, r8, lsl #2]
   279c4:	ldrb	r4, [r5, r6]
   279c8:	add	r0, r7, r4, lsl #1
   279cc:	ldrb	r0, [r0, #1]
   279d0:	tst	r0, #1
   279d4:	beq	279e4 <__assert_fail@plt+0x15ce0>
   279d8:	bl	11aa0 <__ctype_tolower_loc@plt>
   279dc:	ldr	r0, [r0]
   279e0:	ldr	r4, [r0, r4, lsl #2]
   279e4:	sub	r0, r6, #1
   279e8:	cmp	r8, r4
   279ec:	beq	27994 <__assert_fail@plt+0x15c90>
   279f0:	add	r0, r9, #1
   279f4:	cmp	r6, r0
   279f8:	ldr	r5, [sp, #12]
   279fc:	mov	r9, r5
   27a00:	ldr	r8, [sp, #16]
   27a04:	mov	r0, r8
   27a08:	bcs	27a28 <__assert_fail@plt+0x15d24>
   27a0c:	b	27a74 <__assert_fail@plt+0x15d70>
   27a10:	ldr	r0, [sp, #4]
   27a14:	add	r0, r0, r6
   27a18:	add	r0, r0, #1
   27a1c:	mov	r9, #0
   27a20:	ldr	r8, [sp, #16]
   27a24:	ldr	r5, [sp, #12]
   27a28:	add	sl, r0, sl
   27a2c:	ldr	r0, [sp, #20]
   27a30:	add	r4, sl, r0
   27a34:	ldr	r0, [sp, #28]
   27a38:	sub	r2, r4, r0
   27a3c:	mov	r6, #0
   27a40:	ldr	r0, [sp, #24]
   27a44:	mov	r1, #0
   27a48:	bl	11bb4 <memchr@plt>
   27a4c:	cmp	r4, #0
   27a50:	beq	27a68 <__assert_fail@plt+0x15d64>
   27a54:	cmp	r0, #0
   27a58:	beq	278b0 <__assert_fail@plt+0x15bac>
   27a5c:	b	27a68 <__assert_fail@plt+0x15d64>
   27a60:	ldr	r0, [sp, #32]
   27a64:	add	r6, r0, r8
   27a68:	mov	r0, r6
   27a6c:	sub	sp, fp, #28
   27a70:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   27a74:	ldr	r0, [sp, #32]
   27a78:	add	r6, r0, sl
   27a7c:	b	27a68 <__assert_fail@plt+0x15d64>
   27a80:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   27a84:	add	fp, sp, #28
   27a88:	sub	sp, sp, #20
   27a8c:	mov	r6, r1
   27a90:	str	r0, [sp, #16]
   27a94:	cmp	r1, #3
   27a98:	bcs	27ab0 <__assert_fail@plt+0x15dac>
   27a9c:	mov	r0, #1
   27aa0:	str	r0, [r2]
   27aa4:	sub	r0, r6, #1
   27aa8:	sub	sp, fp, #28
   27aac:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   27ab0:	str	r2, [sp]
   27ab4:	bl	11ac4 <__ctype_b_loc@plt>
   27ab8:	ldr	r2, [r0]
   27abc:	mov	r0, #0
   27ac0:	mvn	r4, #0
   27ac4:	mov	r5, #1
   27ac8:	mov	r7, #1
   27acc:	mov	r1, #1
   27ad0:	str	r2, [sp, #4]
   27ad4:	str	r6, [sp, #12]
   27ad8:	mov	r6, r0
   27adc:	ldr	r0, [sp, #16]
   27ae0:	ldrb	r9, [r0, r5]
   27ae4:	add	r0, r2, r9, lsl #1
   27ae8:	ldrb	r0, [r0, #1]
   27aec:	tst	r0, #1
   27af0:	str	r1, [sp, #8]
   27af4:	beq	27b08 <__assert_fail@plt+0x15e04>
   27af8:	bl	11aa0 <__ctype_tolower_loc@plt>
   27afc:	ldr	r2, [sp, #4]
   27b00:	ldr	r0, [r0]
   27b04:	ldrb	r9, [r0, r9, lsl #2]
   27b08:	mov	sl, r4
   27b0c:	add	r0, r4, r7
   27b10:	ldr	r1, [sp, #16]
   27b14:	ldrb	r8, [r1, r0]
   27b18:	add	r0, r2, r8, lsl #1
   27b1c:	ldrb	r0, [r0, #1]
   27b20:	tst	r0, #1
   27b24:	beq	27b38 <__assert_fail@plt+0x15e34>
   27b28:	bl	11aa0 <__ctype_tolower_loc@plt>
   27b2c:	ldr	r2, [sp, #4]
   27b30:	ldr	r0, [r0]
   27b34:	ldrb	r8, [r0, r8, lsl #2]
   27b38:	cmp	r9, r8
   27b3c:	bcs	27b54 <__assert_fail@plt+0x15e50>
   27b40:	mov	r4, sl
   27b44:	sub	r1, r5, sl
   27b48:	mov	r7, #1
   27b4c:	mov	r0, r5
   27b50:	b	27b80 <__assert_fail@plt+0x15e7c>
   27b54:	bne	27b70 <__assert_fail@plt+0x15e6c>
   27b58:	ldr	r1, [sp, #8]
   27b5c:	cmp	r7, r1
   27b60:	bne	27b88 <__assert_fail@plt+0x15e84>
   27b64:	add	r0, r6, r1
   27b68:	mov	r7, #1
   27b6c:	b	27b90 <__assert_fail@plt+0x15e8c>
   27b70:	add	r0, r6, #1
   27b74:	mov	r1, #1
   27b78:	mov	r7, #1
   27b7c:	mov	r4, r6
   27b80:	ldr	r6, [sp, #12]
   27b84:	b	27b98 <__assert_fail@plt+0x15e94>
   27b88:	add	r7, r7, #1
   27b8c:	mov	r0, r6
   27b90:	ldr	r6, [sp, #12]
   27b94:	mov	r4, sl
   27b98:	add	r5, r0, r7
   27b9c:	cmp	r5, r6
   27ba0:	bcc	27ad8 <__assert_fail@plt+0x15dd4>
   27ba4:	str	r4, [sp, #4]
   27ba8:	ldr	r0, [sp]
   27bac:	str	r1, [r0]
   27bb0:	cmp	r6, #2
   27bb4:	bcc	27ca4 <__assert_fail@plt+0x15fa0>
   27bb8:	bl	11ac4 <__ctype_b_loc@plt>
   27bbc:	ldr	r3, [r0]
   27bc0:	mov	r0, #0
   27bc4:	mvn	r5, #0
   27bc8:	mov	r7, #1
   27bcc:	mov	r8, #1
   27bd0:	mov	r9, #1
   27bd4:	str	r3, [sp, #8]
   27bd8:	mov	r4, r0
   27bdc:	ldr	r0, [sp, #16]
   27be0:	ldrb	r6, [r0, r7]
   27be4:	add	r0, r3, r6, lsl #1
   27be8:	ldrb	r0, [r0, #1]
   27bec:	tst	r0, #1
   27bf0:	beq	27c04 <__assert_fail@plt+0x15f00>
   27bf4:	bl	11aa0 <__ctype_tolower_loc@plt>
   27bf8:	ldr	r3, [sp, #8]
   27bfc:	ldr	r0, [r0]
   27c00:	ldrb	r6, [r0, r6, lsl #2]
   27c04:	mov	sl, r5
   27c08:	add	r0, r5, r8
   27c0c:	ldr	r1, [sp, #16]
   27c10:	ldrb	r5, [r1, r0]
   27c14:	add	r0, r3, r5, lsl #1
   27c18:	ldrb	r0, [r0, #1]
   27c1c:	tst	r0, #1
   27c20:	beq	27c34 <__assert_fail@plt+0x15f30>
   27c24:	bl	11aa0 <__ctype_tolower_loc@plt>
   27c28:	ldr	r3, [sp, #8]
   27c2c:	ldr	r0, [r0]
   27c30:	ldrb	r5, [r0, r5, lsl #2]
   27c34:	cmp	r5, r6
   27c38:	bcs	27c50 <__assert_fail@plt+0x15f4c>
   27c3c:	mov	r5, sl
   27c40:	sub	r9, r7, sl
   27c44:	mov	r8, #1
   27c48:	mov	r0, r7
   27c4c:	b	27c7c <__assert_fail@plt+0x15f78>
   27c50:	cmp	r6, r5
   27c54:	bne	27c6c <__assert_fail@plt+0x15f68>
   27c58:	cmp	r8, r9
   27c5c:	bne	27c84 <__assert_fail@plt+0x15f80>
   27c60:	add	r0, r4, r9
   27c64:	mov	r8, #1
   27c68:	b	27c8c <__assert_fail@plt+0x15f88>
   27c6c:	add	r0, r4, #1
   27c70:	mov	r9, #1
   27c74:	mov	r8, #1
   27c78:	mov	r5, r4
   27c7c:	ldr	r1, [sp, #12]
   27c80:	b	27c94 <__assert_fail@plt+0x15f90>
   27c84:	add	r8, r8, #1
   27c88:	mov	r0, r4
   27c8c:	ldr	r1, [sp, #12]
   27c90:	mov	r5, sl
   27c94:	add	r7, r0, r8
   27c98:	cmp	r7, r1
   27c9c:	bcc	27bd8 <__assert_fail@plt+0x15ed4>
   27ca0:	b	27cac <__assert_fail@plt+0x15fa8>
   27ca4:	mvn	r5, #0
   27ca8:	mov	r9, #1
   27cac:	ldr	r0, [sp, #4]
   27cb0:	add	r0, r0, #1
   27cb4:	add	r1, r5, #1
   27cb8:	cmp	r1, r0
   27cbc:	ldrcs	r0, [sp]
   27cc0:	strcs	r9, [r0]
   27cc4:	movcs	r0, r1
   27cc8:	sub	sp, fp, #28
   27ccc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   27cd0:	push	{r4, r5, r6, sl, fp, lr}
   27cd4:	add	fp, sp, #16
   27cd8:	mov	r4, r0
   27cdc:	ldrb	r3, [r0]
   27ce0:	cmp	r3, #0
   27ce4:	beq	27d60 <__assert_fail@plt+0x1605c>
   27ce8:	mov	r2, #1
   27cec:	mov	r0, #0
   27cf0:	ldrb	r6, [r1, r0]
   27cf4:	cmp	r6, #0
   27cf8:	uxtbne	r3, r3
   27cfc:	subne	r3, r3, r6
   27d00:	clzne	r3, r3
   27d04:	lsrne	r3, r3, #5
   27d08:	andne	r2, r2, r3
   27d0c:	addne	r3, r4, r0
   27d10:	ldrbne	r3, [r3, #1]
   27d14:	addne	r0, r0, #1
   27d18:	cmpne	r3, #0
   27d1c:	bne	27cf0 <__assert_fail@plt+0x15fec>
   27d20:	add	r6, r1, r0
   27d24:	ldrb	r3, [r6]
   27d28:	cmp	r3, #0
   27d2c:	mov	r0, r4
   27d30:	movwne	r0, #0
   27d34:	tst	r2, #1
   27d38:	cmpeq	r3, #0
   27d3c:	bne	27d5c <__assert_fail@plt+0x16058>
   27d40:	sub	r5, r6, r1
   27d44:	ldrb	r1, [r1]
   27d48:	add	r0, r4, #1
   27d4c:	bl	11b00 <strchr@plt>
   27d50:	cmp	r5, #1
   27d54:	cmpne	r0, #0
   27d58:	bne	27d74 <__assert_fail@plt+0x16070>
   27d5c:	pop	{r4, r5, r6, sl, fp, pc}
   27d60:	ldrb	r0, [r1]
   27d64:	cmp	r0, #0
   27d68:	movne	r4, #0
   27d6c:	mov	r0, r4
   27d70:	pop	{r4, r5, r6, sl, fp, pc}
   27d74:	add	r1, r4, r5
   27d78:	subs	r1, r1, r0
   27d7c:	movwcc	r1, #1
   27d80:	sub	r2, r6, r5
   27d84:	mov	r3, r5
   27d88:	cmp	r5, #31
   27d8c:	bhi	27d98 <__assert_fail@plt+0x16094>
   27d90:	pop	{r4, r5, r6, sl, fp, lr}
   27d94:	b	27da0 <__assert_fail@plt+0x1609c>
   27d98:	pop	{r4, r5, r6, sl, fp, lr}
   27d9c:	b	28044 <__assert_fail@plt+0x16340>
   27da0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   27da4:	add	fp, sp, #28
   27da8:	sub	sp, sp, #36	; 0x24
   27dac:	mov	r4, r3
   27db0:	mov	r7, r2
   27db4:	mov	r8, r1
   27db8:	mov	r6, r0
   27dbc:	add	r2, sp, #32
   27dc0:	mov	r0, r7
   27dc4:	mov	r1, r3
   27dc8:	bl	28390 <__assert_fail@plt+0x1668c>
   27dcc:	mov	r5, r0
   27dd0:	ldr	r9, [sp, #32]
   27dd4:	add	r1, r7, r9
   27dd8:	mov	r0, r7
   27ddc:	mov	r2, r5
   27de0:	bl	11974 <memcmp@plt>
   27de4:	cmp	r0, #0
   27de8:	str	r6, [sp, #24]
   27dec:	str	r5, [sp, #20]
   27df0:	beq	27ef8 <__assert_fail@plt+0x161f4>
   27df4:	sub	r0, r4, r5
   27df8:	cmp	r5, r0
   27dfc:	movcs	r0, r5
   27e00:	add	r9, r0, #1
   27e04:	str	r9, [sp, #32]
   27e08:	add	r0, r6, r8
   27e0c:	sub	r2, r4, r8
   27e10:	mov	r1, #0
   27e14:	str	r1, [sp, #28]
   27e18:	mov	r1, #0
   27e1c:	bl	11bb4 <memchr@plt>
   27e20:	cmp	r0, #0
   27e24:	bne	28038 <__assert_fail@plt+0x16334>
   27e28:	cmp	r4, #0
   27e2c:	ldr	r1, [sp, #24]
   27e30:	ldr	r2, [sp, #20]
   27e34:	beq	28038 <__assert_fail@plt+0x16334>
   27e38:	add	r8, r7, r2
   27e3c:	sub	r7, r7, #1
   27e40:	sub	r0, r1, #1
   27e44:	str	r0, [sp, #16]
   27e48:	mov	sl, #0
   27e4c:	mov	ip, r4
   27e50:	cmp	r2, r4
   27e54:	bcs	27e84 <__assert_fail@plt+0x16180>
   27e58:	add	r0, r1, sl
   27e5c:	add	r5, r0, r2
   27e60:	mov	r0, #0
   27e64:	ldrb	r3, [r5, r0]
   27e68:	ldrb	r6, [r8, r0]
   27e6c:	cmp	r6, r3
   27e70:	bne	27eb4 <__assert_fail@plt+0x161b0>
   27e74:	add	r0, r0, #1
   27e78:	add	r3, r2, r0
   27e7c:	cmp	r3, r4
   27e80:	bcc	27e64 <__assert_fail@plt+0x16160>
   27e84:	ldr	r0, [sp, #16]
   27e88:	add	r0, r0, sl
   27e8c:	cmp	r2, #0
   27e90:	beq	28020 <__assert_fail@plt+0x1631c>
   27e94:	sub	r3, r2, #1
   27e98:	ldrb	r6, [r0, r2]
   27e9c:	ldrb	r2, [r7, r2]
   27ea0:	cmp	r2, r6
   27ea4:	mov	r2, r3
   27ea8:	beq	27e8c <__assert_fail@plt+0x16188>
   27eac:	mov	r2, r9
   27eb0:	b	27eb8 <__assert_fail@plt+0x161b4>
   27eb4:	add	r2, r0, #1
   27eb8:	add	r0, r1, ip
   27ebc:	add	sl, r2, sl
   27ec0:	add	r6, sl, r4
   27ec4:	sub	r2, r6, ip
   27ec8:	mov	r1, #0
   27ecc:	str	r1, [sp, #28]
   27ed0:	mov	r1, #0
   27ed4:	bl	11bb4 <memchr@plt>
   27ed8:	cmp	r0, #0
   27edc:	bne	28038 <__assert_fail@plt+0x16334>
   27ee0:	cmp	r6, #0
   27ee4:	mov	ip, r6
   27ee8:	ldr	r1, [sp, #24]
   27eec:	ldr	r2, [sp, #20]
   27ef0:	bne	27e50 <__assert_fail@plt+0x1614c>
   27ef4:	b	28038 <__assert_fail@plt+0x16334>
   27ef8:	add	r0, r6, r8
   27efc:	sub	r2, r4, r8
   27f00:	mov	r1, #0
   27f04:	bl	11bb4 <memchr@plt>
   27f08:	cmp	r4, #0
   27f0c:	beq	28028 <__assert_fail@plt+0x16324>
   27f10:	mov	r1, #0
   27f14:	str	r1, [sp, #28]
   27f18:	str	r9, [sp, #16]
   27f1c:	cmp	r0, #0
   27f20:	ldr	ip, [sp, #24]
   27f24:	ldr	r5, [sp, #20]
   27f28:	bne	28038 <__assert_fail@plt+0x16334>
   27f2c:	ldr	r0, [sp, #16]
   27f30:	sub	r0, r4, r0
   27f34:	str	r0, [sp, #12]
   27f38:	sub	sl, r7, #1
   27f3c:	sub	r0, ip, #1
   27f40:	str	r0, [sp, #8]
   27f44:	rsb	r0, r5, #0
   27f48:	str	r0, [sp, #4]
   27f4c:	mov	r8, #0
   27f50:	mov	r1, r4
   27f54:	mov	r9, #0
   27f58:	cmp	r5, r8
   27f5c:	mov	r0, r5
   27f60:	movcc	r0, r8
   27f64:	cmp	r0, r4
   27f68:	bcs	27f8c <__assert_fail@plt+0x16288>
   27f6c:	add	r2, ip, r9
   27f70:	ldrb	r3, [r2, r0]
   27f74:	ldrb	r6, [r7, r0]
   27f78:	cmp	r6, r3
   27f7c:	bne	27fd0 <__assert_fail@plt+0x162cc>
   27f80:	add	r0, r0, #1
   27f84:	cmp	r0, r4
   27f88:	bcc	27f70 <__assert_fail@plt+0x1626c>
   27f8c:	ldr	r0, [sp, #8]
   27f90:	add	r0, r0, r9
   27f94:	mov	r3, r5
   27f98:	mov	r2, r3
   27f9c:	cmp	r8, r3
   27fa0:	bcs	27fb8 <__assert_fail@plt+0x162b4>
   27fa4:	sub	r3, r2, #1
   27fa8:	ldrb	r6, [r0, r2]
   27fac:	ldrb	r5, [sl, r2]
   27fb0:	cmp	r5, r6
   27fb4:	beq	27f98 <__assert_fail@plt+0x16294>
   27fb8:	add	r0, r8, #1
   27fbc:	cmp	r2, r0
   27fc0:	ldr	r2, [sp, #16]
   27fc4:	ldr	r8, [sp, #12]
   27fc8:	bcs	27fe0 <__assert_fail@plt+0x162dc>
   27fcc:	b	28030 <__assert_fail@plt+0x1632c>
   27fd0:	ldr	r2, [sp, #4]
   27fd4:	add	r0, r2, r0
   27fd8:	add	r2, r0, #1
   27fdc:	mov	r8, #0
   27fe0:	add	r0, ip, r1
   27fe4:	add	r9, r2, r9
   27fe8:	add	r6, r9, r4
   27fec:	sub	r2, r6, r1
   27ff0:	mov	r1, #0
   27ff4:	bl	11bb4 <memchr@plt>
   27ff8:	cmp	r6, #0
   27ffc:	beq	28028 <__assert_fail@plt+0x16324>
   28000:	mov	r1, #0
   28004:	str	r1, [sp, #28]
   28008:	cmp	r0, #0
   2800c:	mov	r1, r6
   28010:	ldr	ip, [sp, #24]
   28014:	ldr	r5, [sp, #20]
   28018:	beq	27f58 <__assert_fail@plt+0x16254>
   2801c:	b	28038 <__assert_fail@plt+0x16334>
   28020:	add	r0, r1, sl
   28024:	b	28034 <__assert_fail@plt+0x16330>
   28028:	mov	r0, #0
   2802c:	b	28034 <__assert_fail@plt+0x16330>
   28030:	add	r0, ip, r9
   28034:	str	r0, [sp, #28]
   28038:	ldr	r0, [sp, #28]
   2803c:	sub	sp, fp, #28
   28040:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   28044:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   28048:	add	fp, sp, #28
   2804c:	sub	sp, sp, #44	; 0x2c
   28050:	sub	sp, sp, #1024	; 0x400
   28054:	mov	r4, r3
   28058:	mov	r3, r2
   2805c:	mov	r8, r1
   28060:	str	r0, [sp, #32]
   28064:	sub	r2, fp, #36	; 0x24
   28068:	str	r3, [sp, #20]
   2806c:	mov	r0, r3
   28070:	mov	r1, r4
   28074:	bl	28390 <__assert_fail@plt+0x1668c>
   28078:	mov	r3, r0
   2807c:	mov	r0, #0
   28080:	add	r6, sp, #36	; 0x24
   28084:	str	r4, [r6, r0, lsl #2]
   28088:	add	r0, r0, #1
   2808c:	cmp	r0, #256	; 0x100
   28090:	bne	28084 <__assert_fail@plt+0x16380>
   28094:	cmp	r4, #0
   28098:	ldr	r0, [sp, #20]
   2809c:	beq	280bc <__assert_fail@plt+0x163b8>
   280a0:	sub	r7, r4, #1
   280a4:	mov	r1, r0
   280a8:	ldrb	r2, [r1], #1
   280ac:	str	r7, [r6, r2, lsl #2]
   280b0:	sub	r7, r7, #1
   280b4:	cmn	r7, #1
   280b8:	bne	280a8 <__assert_fail@plt+0x163a4>
   280bc:	ldr	r7, [fp, #-36]	; 0xffffffdc
   280c0:	add	r1, r0, r7
   280c4:	mov	r2, r3
   280c8:	mov	r5, r3
   280cc:	bl	11974 <memcmp@plt>
   280d0:	cmp	r0, #0
   280d4:	str	r5, [sp, #28]
   280d8:	str	r4, [sp, #24]
   280dc:	beq	28204 <__assert_fail@plt+0x16500>
   280e0:	sub	r0, r4, r5
   280e4:	cmp	r5, r0
   280e8:	movcs	r0, r5
   280ec:	add	r0, r0, #1
   280f0:	str	r0, [sp, #16]
   280f4:	str	r0, [fp, #-36]	; 0xffffffdc
   280f8:	ldr	r0, [sp, #32]
   280fc:	add	r0, r0, r8
   28100:	sub	r2, r4, r8
   28104:	mov	r5, #0
   28108:	mov	r1, #0
   2810c:	bl	11bb4 <memchr@plt>
   28110:	cmp	r4, #0
   28114:	beq	28378 <__assert_fail@plt+0x16674>
   28118:	cmp	r0, #0
   2811c:	ldr	r3, [sp, #28]
   28120:	ldr	r0, [sp, #20]
   28124:	bne	28378 <__assert_fail@plt+0x16674>
   28128:	add	sl, r0, r3
   2812c:	sub	r9, r0, #1
   28130:	ldr	r0, [sp, #32]
   28134:	sub	r0, r0, #1
   28138:	str	r0, [sp, #20]
   2813c:	ldr	r1, [sp, #24]
   28140:	sub	r8, r1, #1
   28144:	mov	r4, #0
   28148:	ldr	r0, [sp, #32]
   2814c:	add	r0, r0, r1
   28150:	ldrb	r2, [r0, #-1]
   28154:	ldr	r2, [r6, r2, lsl #2]
   28158:	cmp	r2, #0
   2815c:	beq	2819c <__assert_fail@plt+0x16498>
   28160:	add	r4, r2, r4
   28164:	ldr	r2, [sp, #24]
   28168:	add	r6, r4, r2
   2816c:	sub	r2, r6, r1
   28170:	mov	r5, #0
   28174:	mov	r1, #0
   28178:	bl	11bb4 <memchr@plt>
   2817c:	cmp	r6, #0
   28180:	beq	28378 <__assert_fail@plt+0x16674>
   28184:	cmp	r0, #0
   28188:	mov	r1, r6
   2818c:	ldr	r3, [sp, #28]
   28190:	add	r6, sp, #36	; 0x24
   28194:	beq	28148 <__assert_fail@plt+0x16444>
   28198:	b	28378 <__assert_fail@plt+0x16674>
   2819c:	cmp	r3, r8
   281a0:	bcs	281d4 <__assert_fail@plt+0x164d0>
   281a4:	ldr	r2, [sp, #32]
   281a8:	add	r2, r2, r4
   281ac:	add	r7, r2, r3
   281b0:	mov	r2, #0
   281b4:	ldrb	r6, [r7, r2]
   281b8:	ldrb	r5, [sl, r2]
   281bc:	add	r2, r2, #1
   281c0:	cmp	r5, r6
   281c4:	bne	28160 <__assert_fail@plt+0x1645c>
   281c8:	add	r6, r3, r2
   281cc:	cmp	r6, r8
   281d0:	bcc	281b4 <__assert_fail@plt+0x164b0>
   281d4:	ldr	r2, [sp, #20]
   281d8:	add	r2, r2, r4
   281dc:	cmp	r3, #0
   281e0:	beq	28370 <__assert_fail@plt+0x1666c>
   281e4:	sub	r6, r3, #1
   281e8:	ldrb	r5, [r2, r3]
   281ec:	ldrb	r3, [r9, r3]
   281f0:	cmp	r3, r5
   281f4:	mov	r3, r6
   281f8:	beq	281dc <__assert_fail@plt+0x164d8>
   281fc:	ldr	r2, [sp, #16]
   28200:	b	28160 <__assert_fail@plt+0x1645c>
   28204:	ldr	r0, [sp, #32]
   28208:	add	r0, r0, r8
   2820c:	sub	r2, r4, r8
   28210:	mov	r5, #0
   28214:	mov	r1, #0
   28218:	bl	11bb4 <memchr@plt>
   2821c:	cmp	r4, #0
   28220:	beq	28378 <__assert_fail@plt+0x16674>
   28224:	str	r7, [sp, #16]
   28228:	cmp	r0, #0
   2822c:	ldr	r4, [sp, #28]
   28230:	ldr	r1, [sp, #20]
   28234:	bne	28378 <__assert_fail@plt+0x16674>
   28238:	ldr	r0, [sp, #16]
   2823c:	ldr	ip, [sp, #24]
   28240:	sub	r0, ip, r0
   28244:	str	r0, [sp, #12]
   28248:	sub	r8, r1, #1
   2824c:	ldr	r0, [sp, #32]
   28250:	sub	r0, r0, #1
   28254:	str	r0, [sp, #8]
   28258:	rsb	r0, r4, #0
   2825c:	str	r0, [sp, #4]
   28260:	sub	r7, ip, #1
   28264:	mov	sl, #0
   28268:	mov	r9, #0
   2826c:	ldr	r0, [sp, #32]
   28270:	add	r0, r0, ip
   28274:	ldrb	r2, [r0, #-1]
   28278:	ldr	r3, [r6, r2, lsl #2]
   2827c:	cmp	r3, #0
   28280:	beq	282a8 <__assert_fail@plt+0x165a4>
   28284:	ldr	r1, [sp, #16]
   28288:	cmp	r3, r1
   2828c:	mov	r2, r3
   28290:	ldr	r1, [sp, #12]
   28294:	movcc	r2, r1
   28298:	cmp	sl, #0
   2829c:	moveq	r2, r3
   282a0:	mov	sl, #0
   282a4:	b	28320 <__assert_fail@plt+0x1661c>
   282a8:	cmp	r4, sl
   282ac:	mov	r2, r4
   282b0:	movcc	r2, sl
   282b4:	cmp	r2, r7
   282b8:	bcs	282e0 <__assert_fail@plt+0x165dc>
   282bc:	ldr	r3, [sp, #32]
   282c0:	add	r3, r3, r9
   282c4:	ldrb	r6, [r3, r2]
   282c8:	ldrb	r5, [r1, r2]
   282cc:	cmp	r5, r6
   282d0:	bne	28360 <__assert_fail@plt+0x1665c>
   282d4:	add	r2, r2, #1
   282d8:	cmp	r2, r7
   282dc:	bcc	282c4 <__assert_fail@plt+0x165c0>
   282e0:	ldr	r1, [sp, #8]
   282e4:	add	r2, r1, r9
   282e8:	mov	r6, r4
   282ec:	mov	r3, r6
   282f0:	cmp	sl, r6
   282f4:	bcs	2830c <__assert_fail@plt+0x16608>
   282f8:	sub	r6, r3, #1
   282fc:	ldrb	r5, [r2, r3]
   28300:	ldrb	r4, [r8, r3]
   28304:	cmp	r4, r5
   28308:	beq	282ec <__assert_fail@plt+0x165e8>
   2830c:	add	r2, sl, #1
   28310:	cmp	r3, r2
   28314:	ldr	r2, [sp, #16]
   28318:	ldr	sl, [sp, #12]
   2831c:	bcc	28384 <__assert_fail@plt+0x16680>
   28320:	add	r9, r2, r9
   28324:	ldr	r1, [sp, #24]
   28328:	add	r6, r9, r1
   2832c:	sub	r2, r6, ip
   28330:	mov	r5, #0
   28334:	mov	r1, #0
   28338:	bl	11bb4 <memchr@plt>
   2833c:	cmp	r6, #0
   28340:	beq	28378 <__assert_fail@plt+0x16674>
   28344:	cmp	r0, #0
   28348:	mov	ip, r6
   2834c:	ldr	r4, [sp, #28]
   28350:	add	r6, sp, #36	; 0x24
   28354:	ldr	r1, [sp, #20]
   28358:	beq	2826c <__assert_fail@plt+0x16568>
   2835c:	b	28378 <__assert_fail@plt+0x16674>
   28360:	ldr	r1, [sp, #4]
   28364:	add	r2, r1, r2
   28368:	add	r2, r2, #1
   2836c:	b	282a0 <__assert_fail@plt+0x1659c>
   28370:	ldr	r0, [sp, #32]
   28374:	add	r5, r0, r4
   28378:	mov	r0, r5
   2837c:	sub	sp, fp, #28
   28380:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   28384:	ldr	r0, [sp, #32]
   28388:	add	r5, r0, r9
   2838c:	b	28378 <__assert_fail@plt+0x16674>
   28390:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   28394:	add	fp, sp, #24
   28398:	cmp	r1, #3
   2839c:	movcc	r0, #1
   283a0:	strcc	r0, [r2]
   283a4:	subcc	r0, r1, #1
   283a8:	popcc	{r4, r5, r6, r7, r8, sl, fp, pc}
   283ac:	mvn	r8, #0
   283b0:	mov	r6, #0
   283b4:	mov	r3, #1
   283b8:	mov	ip, #1
   283bc:	mov	r5, #1
   283c0:	ldrb	r7, [r0, r3]
   283c4:	add	r4, r5, r8
   283c8:	ldrb	r4, [r0, r4]
   283cc:	cmp	r7, r4
   283d0:	bcs	283e4 <__assert_fail@plt+0x166e0>
   283d4:	sub	ip, r3, r8
   283d8:	mov	r5, #1
   283dc:	mov	r6, r3
   283e0:	b	28418 <__assert_fail@plt+0x16714>
   283e4:	bne	283fc <__assert_fail@plt+0x166f8>
   283e8:	cmp	r5, ip
   283ec:	bne	28414 <__assert_fail@plt+0x16710>
   283f0:	add	r6, ip, r6
   283f4:	mov	r5, #1
   283f8:	b	28418 <__assert_fail@plt+0x16714>
   283fc:	add	r3, r6, #1
   28400:	mov	r5, #1
   28404:	mov	r8, r6
   28408:	mov	r6, r3
   2840c:	mov	ip, #1
   28410:	b	28418 <__assert_fail@plt+0x16714>
   28414:	add	r5, r5, #1
   28418:	add	r3, r5, r6
   2841c:	cmp	r3, r1
   28420:	bcc	283c0 <__assert_fail@plt+0x166bc>
   28424:	str	ip, [r2]
   28428:	cmp	r1, #2
   2842c:	bcc	284b0 <__assert_fail@plt+0x167ac>
   28430:	mvn	ip, #0
   28434:	mov	r4, #0
   28438:	mov	r5, #1
   2843c:	mov	lr, #1
   28440:	mov	r3, #1
   28444:	ldrb	r6, [r0, r5]
   28448:	add	r7, r3, ip
   2844c:	ldrb	r7, [r0, r7]
   28450:	cmp	r7, r6
   28454:	bcs	28468 <__assert_fail@plt+0x16764>
   28458:	sub	lr, r5, ip
   2845c:	mov	r3, #1
   28460:	mov	r4, r5
   28464:	b	284a0 <__assert_fail@plt+0x1679c>
   28468:	cmp	r6, r7
   2846c:	bne	28484 <__assert_fail@plt+0x16780>
   28470:	cmp	r3, lr
   28474:	bne	2849c <__assert_fail@plt+0x16798>
   28478:	add	r4, lr, r4
   2847c:	mov	r3, #1
   28480:	b	284a0 <__assert_fail@plt+0x1679c>
   28484:	add	r7, r4, #1
   28488:	mov	r3, #1
   2848c:	mov	ip, r4
   28490:	mov	r4, r7
   28494:	mov	lr, #1
   28498:	b	284a0 <__assert_fail@plt+0x1679c>
   2849c:	add	r3, r3, #1
   284a0:	add	r5, r3, r4
   284a4:	cmp	r5, r1
   284a8:	bcc	28444 <__assert_fail@plt+0x16740>
   284ac:	b	284b8 <__assert_fail@plt+0x167b4>
   284b0:	mov	lr, #1
   284b4:	mvn	ip, #0
   284b8:	add	r0, r8, #1
   284bc:	add	r1, ip, #1
   284c0:	cmp	r1, r0
   284c4:	strcs	lr, [r2]
   284c8:	movcs	r0, r1
   284cc:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   284d0:	push	{fp, lr}
   284d4:	mov	fp, sp
   284d8:	movw	r0, #49592	; 0xc1b8
   284dc:	movt	r0, #3
   284e0:	ldr	r0, [r0]
   284e4:	bl	11ad0 <exit@plt>
   284e8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   284ec:	add	fp, sp, #28
   284f0:	sub	sp, sp, #12
   284f4:	mov	r4, r3
   284f8:	mov	r6, r2
   284fc:	mov	r5, r1
   28500:	mov	sl, r0
   28504:	bl	11af4 <strlen@plt>
   28508:	ldr	r8, [r5]
   2850c:	cmp	r8, #0
   28510:	beq	285cc <__assert_fail@plt+0x168c8>
   28514:	mov	r7, r0
   28518:	add	r9, r5, #4
   2851c:	mov	r0, #0
   28520:	str	r0, [sp]
   28524:	mvn	r0, #0
   28528:	str	r0, [sp, #8]
   2852c:	str	r6, [sp, #4]
   28530:	mov	r5, #0
   28534:	mov	r0, r8
   28538:	mov	r1, sl
   2853c:	mov	r2, r7
   28540:	bl	11cbc <strncmp@plt>
   28544:	cmp	r0, #0
   28548:	bne	285a0 <__assert_fail@plt+0x1689c>
   2854c:	mov	r0, r8
   28550:	bl	11af4 <strlen@plt>
   28554:	cmp	r0, r7
   28558:	beq	285d0 <__assert_fail@plt+0x168cc>
   2855c:	ldr	r0, [sp, #8]
   28560:	cmn	r0, #1
   28564:	beq	2859c <__assert_fail@plt+0x16898>
   28568:	ldr	r0, [sp, #4]
   2856c:	cmp	r0, #0
   28570:	beq	28590 <__assert_fail@plt+0x1688c>
   28574:	ldr	r1, [sp, #8]
   28578:	mla	r0, r1, r4, r0
   2857c:	mov	r1, r6
   28580:	mov	r2, r4
   28584:	bl	11974 <memcmp@plt>
   28588:	cmp	r0, #0
   2858c:	beq	285a0 <__assert_fail@plt+0x1689c>
   28590:	mov	r0, #1
   28594:	str	r0, [sp]
   28598:	b	285a0 <__assert_fail@plt+0x1689c>
   2859c:	str	r5, [sp, #8]
   285a0:	add	r6, r6, r4
   285a4:	ldr	r8, [r9, r5, lsl #2]
   285a8:	add	r5, r5, #1
   285ac:	cmp	r8, #0
   285b0:	bne	28534 <__assert_fail@plt+0x16830>
   285b4:	ldr	r0, [sp]
   285b8:	tst	r0, #1
   285bc:	ldr	r0, [sp, #8]
   285c0:	mvnne	r0, #1
   285c4:	sub	sp, fp, #28
   285c8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   285cc:	mvn	r5, #0
   285d0:	mov	r0, r5
   285d4:	sub	sp, fp, #28
   285d8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   285dc:	push	{r4, r5, r6, sl, fp, lr}
   285e0:	add	fp, sp, #16
   285e4:	sub	sp, sp, #8
   285e8:	mov	r4, r1
   285ec:	mov	r5, r0
   285f0:	movw	r0, #44877	; 0xaf4d
   285f4:	movt	r0, #2
   285f8:	movw	r1, #44904	; 0xaf68
   285fc:	movt	r1, #2
   28600:	cmn	r2, #1
   28604:	moveq	r1, r0
   28608:	mov	r0, #0
   2860c:	mov	r2, #5
   28610:	bl	11980 <dcgettext@plt>
   28614:	mov	r6, r0
   28618:	mov	r0, #0
   2861c:	mov	r1, #8
   28620:	mov	r2, r4
   28624:	bl	189b0 <__assert_fail@plt+0x6cac>
   28628:	mov	r4, r0
   2862c:	mov	r0, #1
   28630:	mov	r1, r5
   28634:	bl	18c4c <__assert_fail@plt+0x6f48>
   28638:	str	r0, [sp]
   2863c:	mov	r0, #0
   28640:	mov	r1, #0
   28644:	mov	r2, r6
   28648:	mov	r3, r4
   2864c:	bl	11a28 <error@plt>
   28650:	sub	sp, fp, #16
   28654:	pop	{r4, r5, r6, sl, fp, pc}
   28658:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2865c:	add	fp, sp, #28
   28660:	sub	sp, sp, #4
   28664:	mov	r9, r2
   28668:	mov	r5, r1
   2866c:	mov	r7, r0
   28670:	mov	r8, #0
   28674:	movw	r1, #44933	; 0xaf85
   28678:	movt	r1, #2
   2867c:	mov	r0, #0
   28680:	mov	r2, #5
   28684:	bl	11980 <dcgettext@plt>
   28688:	movw	sl, #49688	; 0xc218
   2868c:	movt	sl, #3
   28690:	ldr	r1, [sl]
   28694:	bl	11cb0 <fputs@plt>
   28698:	ldr	r6, [r7]
   2869c:	cmp	r6, #0
   286a0:	bne	286b8 <__assert_fail@plt+0x169b4>
   286a4:	ldr	r1, [sl]
   286a8:	mov	r0, #10
   286ac:	sub	sp, fp, #28
   286b0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   286b4:	b	11c5c <putc@plt>
   286b8:	add	r4, r7, #4
   286bc:	mov	r7, #0
   286c0:	str	r4, [sp]
   286c4:	cmp	r8, #0
   286c8:	beq	2870c <__assert_fail@plt+0x16a08>
   286cc:	mov	r0, r7
   286d0:	mov	r1, r5
   286d4:	mov	r2, r9
   286d8:	bl	11974 <memcmp@plt>
   286dc:	cmp	r0, #0
   286e0:	bne	2870c <__assert_fail@plt+0x16a08>
   286e4:	ldr	r4, [sl]
   286e8:	mov	r0, r6
   286ec:	bl	18c54 <__assert_fail@plt+0x6f50>
   286f0:	mov	r2, r0
   286f4:	mov	r0, r4
   286f8:	ldr	r4, [sp]
   286fc:	movw	r1, #44962	; 0xafa2
   28700:	movt	r1, #2
   28704:	bl	11b0c <fprintf@plt>
   28708:	b	28730 <__assert_fail@plt+0x16a2c>
   2870c:	ldr	r7, [sl]
   28710:	mov	r0, r6
   28714:	bl	18c54 <__assert_fail@plt+0x6f50>
   28718:	mov	r2, r0
   2871c:	mov	r0, r7
   28720:	movw	r1, #44954	; 0xaf9a
   28724:	movt	r1, #2
   28728:	bl	11b0c <fprintf@plt>
   2872c:	mov	r7, r5
   28730:	add	r5, r5, r9
   28734:	ldr	r6, [r4, -r8, lsl #2]
   28738:	sub	r8, r8, #1
   2873c:	cmp	r6, #0
   28740:	bne	286c4 <__assert_fail@plt+0x169c0>
   28744:	b	286a4 <__assert_fail@plt+0x169a0>
   28748:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   2874c:	add	fp, sp, #24
   28750:	mov	r4, r3
   28754:	mov	r5, r2
   28758:	mov	r7, r1
   2875c:	mov	r6, r0
   28760:	ldr	r8, [fp, #8]
   28764:	mov	r0, r1
   28768:	mov	r1, r2
   2876c:	mov	r2, r3
   28770:	mov	r3, r8
   28774:	bl	284e8 <__assert_fail@plt+0x167e4>
   28778:	mov	r2, r0
   2877c:	cmn	r0, #1
   28780:	ble	2878c <__assert_fail@plt+0x16a88>
   28784:	mov	r0, r2
   28788:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   2878c:	ldr	r9, [fp, #12]
   28790:	mov	r0, r6
   28794:	mov	r1, r7
   28798:	bl	285dc <__assert_fail@plt+0x168d8>
   2879c:	mov	r0, r5
   287a0:	mov	r1, r4
   287a4:	mov	r2, r8
   287a8:	bl	28658 <__assert_fail@plt+0x16954>
   287ac:	blx	r9
   287b0:	mvn	r2, #0
   287b4:	mov	r0, r2
   287b8:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   287bc:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   287c0:	add	fp, sp, #24
   287c4:	ldr	r6, [r1]
   287c8:	cmp	r6, #0
   287cc:	beq	28830 <__assert_fail@plt+0x16b2c>
   287d0:	mov	r4, r3
   287d4:	mov	r7, r2
   287d8:	mov	r8, r1
   287dc:	mov	r9, r0
   287e0:	mov	r1, r2
   287e4:	mov	r2, r3
   287e8:	bl	11974 <memcmp@plt>
   287ec:	cmp	r0, #0
   287f0:	beq	28828 <__assert_fail@plt+0x16b24>
   287f4:	add	r7, r7, r4
   287f8:	add	r5, r8, #4
   287fc:	ldr	r6, [r5]
   28800:	cmp	r6, #0
   28804:	beq	28830 <__assert_fail@plt+0x16b2c>
   28808:	mov	r0, r9
   2880c:	mov	r1, r7
   28810:	mov	r2, r4
   28814:	bl	11974 <memcmp@plt>
   28818:	add	r7, r7, r4
   2881c:	add	r5, r5, #4
   28820:	cmp	r0, #0
   28824:	bne	287fc <__assert_fail@plt+0x16af8>
   28828:	mov	r0, r6
   2882c:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   28830:	mov	r6, #0
   28834:	mov	r0, r6
   28838:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   2883c:	mov	r1, r0
   28840:	sub	r2, r0, #65	; 0x41
   28844:	mov	r0, #1
   28848:	cmp	r2, #26
   2884c:	subcs	r2, r1, #97	; 0x61
   28850:	cmpcs	r2, #26
   28854:	bcs	2885c <__assert_fail@plt+0x16b58>
   28858:	bx	lr
   2885c:	sub	r1, r1, #48	; 0x30
   28860:	cmp	r1, #10
   28864:	movcs	r0, #0
   28868:	bx	lr
   2886c:	mov	r1, r0
   28870:	sub	r2, r0, #65	; 0x41
   28874:	mov	r0, #1
   28878:	cmp	r2, #26
   2887c:	subcs	r1, r1, #97	; 0x61
   28880:	cmpcs	r1, #26
   28884:	movcs	r0, #0
   28888:	bx	lr
   2888c:	mov	r1, #0
   28890:	cmp	r0, #128	; 0x80
   28894:	movwcc	r1, #1
   28898:	mov	r0, r1
   2889c:	bx	lr
   288a0:	sub	r1, r0, #9
   288a4:	clz	r1, r1
   288a8:	lsr	r1, r1, #5
   288ac:	sub	r0, r0, #32
   288b0:	clz	r0, r0
   288b4:	lsr	r0, r0, #5
   288b8:	orr	r0, r0, r1
   288bc:	bx	lr
   288c0:	mov	r1, r0
   288c4:	mov	r0, #1
   288c8:	cmp	r1, #32
   288cc:	bxcc	lr
   288d0:	cmp	r1, #127	; 0x7f
   288d4:	movne	r0, #0
   288d8:	bx	lr
   288dc:	sub	r1, r0, #48	; 0x30
   288e0:	mov	r0, #0
   288e4:	cmp	r1, #10
   288e8:	movwcc	r0, #1
   288ec:	bx	lr
   288f0:	sub	r1, r0, #33	; 0x21
   288f4:	mov	r0, #0
   288f8:	cmp	r1, #94	; 0x5e
   288fc:	movwcc	r0, #1
   28900:	bx	lr
   28904:	sub	r1, r0, #97	; 0x61
   28908:	mov	r0, #0
   2890c:	cmp	r1, #26
   28910:	movwcc	r0, #1
   28914:	bx	lr
   28918:	sub	r1, r0, #32
   2891c:	mov	r0, #0
   28920:	cmp	r1, #95	; 0x5f
   28924:	movwcc	r0, #1
   28928:	bx	lr
   2892c:	sub	r1, r0, #33	; 0x21
   28930:	cmp	r1, #93	; 0x5d
   28934:	bhi	28ac0 <__assert_fail@plt+0x16dbc>
   28938:	mov	r0, #1
   2893c:	add	r2, pc, #0
   28940:	ldr	pc, [r2, r1, lsl #2]
   28944:			; <UNDEFINED> instruction: 0x00028abc
   28948:			; <UNDEFINED> instruction: 0x00028abc
   2894c:			; <UNDEFINED> instruction: 0x00028abc
   28950:			; <UNDEFINED> instruction: 0x00028abc
   28954:			; <UNDEFINED> instruction: 0x00028abc
   28958:			; <UNDEFINED> instruction: 0x00028abc
   2895c:			; <UNDEFINED> instruction: 0x00028abc
   28960:			; <UNDEFINED> instruction: 0x00028abc
   28964:			; <UNDEFINED> instruction: 0x00028abc
   28968:			; <UNDEFINED> instruction: 0x00028abc
   2896c:			; <UNDEFINED> instruction: 0x00028abc
   28970:			; <UNDEFINED> instruction: 0x00028abc
   28974:			; <UNDEFINED> instruction: 0x00028abc
   28978:			; <UNDEFINED> instruction: 0x00028abc
   2897c:			; <UNDEFINED> instruction: 0x00028abc
   28980:	andeq	r8, r2, r0, asr #21
   28984:	andeq	r8, r2, r0, asr #21
   28988:	andeq	r8, r2, r0, asr #21
   2898c:	andeq	r8, r2, r0, asr #21
   28990:	andeq	r8, r2, r0, asr #21
   28994:	andeq	r8, r2, r0, asr #21
   28998:	andeq	r8, r2, r0, asr #21
   2899c:	andeq	r8, r2, r0, asr #21
   289a0:	andeq	r8, r2, r0, asr #21
   289a4:	andeq	r8, r2, r0, asr #21
   289a8:			; <UNDEFINED> instruction: 0x00028abc
   289ac:			; <UNDEFINED> instruction: 0x00028abc
   289b0:			; <UNDEFINED> instruction: 0x00028abc
   289b4:			; <UNDEFINED> instruction: 0x00028abc
   289b8:			; <UNDEFINED> instruction: 0x00028abc
   289bc:			; <UNDEFINED> instruction: 0x00028abc
   289c0:			; <UNDEFINED> instruction: 0x00028abc
   289c4:	andeq	r8, r2, r0, asr #21
   289c8:	andeq	r8, r2, r0, asr #21
   289cc:	andeq	r8, r2, r0, asr #21
   289d0:	andeq	r8, r2, r0, asr #21
   289d4:	andeq	r8, r2, r0, asr #21
   289d8:	andeq	r8, r2, r0, asr #21
   289dc:	andeq	r8, r2, r0, asr #21
   289e0:	andeq	r8, r2, r0, asr #21
   289e4:	andeq	r8, r2, r0, asr #21
   289e8:	andeq	r8, r2, r0, asr #21
   289ec:	andeq	r8, r2, r0, asr #21
   289f0:	andeq	r8, r2, r0, asr #21
   289f4:	andeq	r8, r2, r0, asr #21
   289f8:	andeq	r8, r2, r0, asr #21
   289fc:	andeq	r8, r2, r0, asr #21
   28a00:	andeq	r8, r2, r0, asr #21
   28a04:	andeq	r8, r2, r0, asr #21
   28a08:	andeq	r8, r2, r0, asr #21
   28a0c:	andeq	r8, r2, r0, asr #21
   28a10:	andeq	r8, r2, r0, asr #21
   28a14:	andeq	r8, r2, r0, asr #21
   28a18:	andeq	r8, r2, r0, asr #21
   28a1c:	andeq	r8, r2, r0, asr #21
   28a20:	andeq	r8, r2, r0, asr #21
   28a24:	andeq	r8, r2, r0, asr #21
   28a28:	andeq	r8, r2, r0, asr #21
   28a2c:			; <UNDEFINED> instruction: 0x00028abc
   28a30:			; <UNDEFINED> instruction: 0x00028abc
   28a34:			; <UNDEFINED> instruction: 0x00028abc
   28a38:			; <UNDEFINED> instruction: 0x00028abc
   28a3c:			; <UNDEFINED> instruction: 0x00028abc
   28a40:			; <UNDEFINED> instruction: 0x00028abc
   28a44:	andeq	r8, r2, r0, asr #21
   28a48:	andeq	r8, r2, r0, asr #21
   28a4c:	andeq	r8, r2, r0, asr #21
   28a50:	andeq	r8, r2, r0, asr #21
   28a54:	andeq	r8, r2, r0, asr #21
   28a58:	andeq	r8, r2, r0, asr #21
   28a5c:	andeq	r8, r2, r0, asr #21
   28a60:	andeq	r8, r2, r0, asr #21
   28a64:	andeq	r8, r2, r0, asr #21
   28a68:	andeq	r8, r2, r0, asr #21
   28a6c:	andeq	r8, r2, r0, asr #21
   28a70:	andeq	r8, r2, r0, asr #21
   28a74:	andeq	r8, r2, r0, asr #21
   28a78:	andeq	r8, r2, r0, asr #21
   28a7c:	andeq	r8, r2, r0, asr #21
   28a80:	andeq	r8, r2, r0, asr #21
   28a84:	andeq	r8, r2, r0, asr #21
   28a88:	andeq	r8, r2, r0, asr #21
   28a8c:	andeq	r8, r2, r0, asr #21
   28a90:	andeq	r8, r2, r0, asr #21
   28a94:	andeq	r8, r2, r0, asr #21
   28a98:	andeq	r8, r2, r0, asr #21
   28a9c:	andeq	r8, r2, r0, asr #21
   28aa0:	andeq	r8, r2, r0, asr #21
   28aa4:	andeq	r8, r2, r0, asr #21
   28aa8:	andeq	r8, r2, r0, asr #21
   28aac:			; <UNDEFINED> instruction: 0x00028abc
   28ab0:			; <UNDEFINED> instruction: 0x00028abc
   28ab4:			; <UNDEFINED> instruction: 0x00028abc
   28ab8:			; <UNDEFINED> instruction: 0x00028abc
   28abc:	bx	lr
   28ac0:	mov	r0, #0
   28ac4:	bx	lr
   28ac8:	sub	r0, r0, #9
   28acc:	cmp	r0, #23
   28ad0:	movhi	r0, #0
   28ad4:	bxhi	lr
   28ad8:	bic	r0, r0, #-16777216	; 0xff000000
   28adc:	movw	r1, #31
   28ae0:	movt	r1, #128	; 0x80
   28ae4:	mov	r2, #1
   28ae8:	and	r0, r2, r1, lsr r0
   28aec:	bx	lr
   28af0:	sub	r1, r0, #65	; 0x41
   28af4:	mov	r0, #0
   28af8:	cmp	r1, #26
   28afc:	movwcc	r0, #1
   28b00:	bx	lr
   28b04:	mov	r1, r0
   28b08:	sub	r2, r0, #48	; 0x30
   28b0c:	mov	r0, #1
   28b10:	cmp	r2, #22
   28b14:	bhi	28b2c <__assert_fail@plt+0x16e28>
   28b18:	mov	ip, #1
   28b1c:	movw	r3, #1023	; 0x3ff
   28b20:	movt	r3, #126	; 0x7e
   28b24:	tst	r3, ip, lsl r2
   28b28:	bxne	lr
   28b2c:	sub	r1, r1, #97	; 0x61
   28b30:	cmp	r1, #6
   28b34:	movcs	r0, #0
   28b38:	bxcs	lr
   28b3c:	bx	lr
   28b40:	sub	r1, r0, #65	; 0x41
   28b44:	cmp	r1, #26
   28b48:	addcc	r0, r0, #32
   28b4c:	bx	lr
   28b50:	sub	r1, r0, #97	; 0x61
   28b54:	cmp	r1, #26
   28b58:	subcc	r0, r0, #32
   28b5c:	bx	lr
   28b60:	push	{r4, r5, r6, sl, fp, lr}
   28b64:	add	fp, sp, #16
   28b68:	mov	r4, r0
   28b6c:	bl	11a10 <__fpending@plt>
   28b70:	mov	r5, r0
   28b74:	mov	r0, r4
   28b78:	bl	11908 <ferror@plt>
   28b7c:	mov	r6, r0
   28b80:	mov	r0, r4
   28b84:	bl	11bc0 <fclose@plt>
   28b88:	cmp	r6, #0
   28b8c:	beq	28bac <__assert_fail@plt+0x16ea8>
   28b90:	mvn	r4, #0
   28b94:	cmp	r0, #0
   28b98:	bne	28be0 <__assert_fail@plt+0x16edc>
   28b9c:	bl	11b24 <__errno_location@plt>
   28ba0:	mov	r1, #0
   28ba4:	str	r1, [r0]
   28ba8:	b	28be0 <__assert_fail@plt+0x16edc>
   28bac:	cmp	r0, #0
   28bb0:	mov	r4, r0
   28bb4:	mvnne	r4, #0
   28bb8:	cmp	r5, #0
   28bbc:	bne	28be0 <__assert_fail@plt+0x16edc>
   28bc0:	cmp	r0, #0
   28bc4:	beq	28be0 <__assert_fail@plt+0x16edc>
   28bc8:	bl	11b24 <__errno_location@plt>
   28bcc:	ldr	r0, [r0]
   28bd0:	subs	r4, r0, #9
   28bd4:	mvnne	r4, #0
   28bd8:	mov	r0, r4
   28bdc:	pop	{r4, r5, r6, sl, fp, pc}
   28be0:	mov	r0, r4
   28be4:	pop	{r4, r5, r6, sl, fp, pc}
   28be8:	push	{r4, r5, r6, r7, fp, lr}
   28bec:	add	fp, sp, #16
   28bf0:	mov	r5, r1
   28bf4:	mov	r4, r0
   28bf8:	ldr	r0, [r0, #4]
   28bfc:	cmp	r0, r1
   28c00:	strcs	r5, [r4]
   28c04:	movcs	r0, #1
   28c08:	popcs	{r4, r5, r6, r7, fp, pc}
   28c0c:	mov	r6, r3
   28c10:	cmp	r3, #0
   28c14:	beq	28c3c <__assert_fail@plt+0x16f38>
   28c18:	mvn	r0, #0
   28c1c:	udiv	r0, r0, r6
   28c20:	cmp	r0, r5
   28c24:	bcs	28c3c <__assert_fail@plt+0x16f38>
   28c28:	bl	11b24 <__errno_location@plt>
   28c2c:	mov	r1, #12
   28c30:	str	r1, [r0]
   28c34:	mov	r0, #0
   28c38:	pop	{r4, r5, r6, r7, fp, pc}
   28c3c:	mul	r1, r6, r5
   28c40:	ldr	r0, [r4, #8]
   28c44:	cmp	r0, r2
   28c48:	beq	28c60 <__assert_fail@plt+0x16f5c>
   28c4c:	bl	1a388 <__assert_fail@plt+0x8684>
   28c50:	mov	r7, r0
   28c54:	cmp	r0, #0
   28c58:	bne	28c90 <__assert_fail@plt+0x16f8c>
   28c5c:	b	28ca0 <__assert_fail@plt+0x16f9c>
   28c60:	mov	r0, r1
   28c64:	bl	1a2f8 <__assert_fail@plt+0x85f4>
   28c68:	cmp	r0, #0
   28c6c:	beq	28ca0 <__assert_fail@plt+0x16f9c>
   28c70:	mov	r7, r0
   28c74:	ldr	r1, [r4, #8]
   28c78:	cmp	r1, #0
   28c7c:	beq	28c90 <__assert_fail@plt+0x16f8c>
   28c80:	ldr	r0, [r4]
   28c84:	mul	r2, r0, r6
   28c88:	mov	r0, r7
   28c8c:	bl	1192c <memcpy@plt>
   28c90:	str	r5, [r4]
   28c94:	stmib	r4, {r5, r7}
   28c98:	mov	r0, #1
   28c9c:	pop	{r4, r5, r6, r7, fp, pc}
   28ca0:	mov	r0, #0
   28ca4:	pop	{r4, r5, r6, r7, fp, pc}
   28ca8:	push	{r4, sl, fp, lr}
   28cac:	add	fp, sp, #8
   28cb0:	sub	sp, sp, #264	; 0x108
   28cb4:	add	r1, sp, #7
   28cb8:	movw	r2, #257	; 0x101
   28cbc:	bl	28ed0 <__assert_fail@plt+0x171cc>
   28cc0:	mov	r4, #0
   28cc4:	cmp	r0, #0
   28cc8:	bne	28d00 <__assert_fail@plt+0x16ffc>
   28ccc:	add	r0, sp, #7
   28cd0:	movw	r1, #44967	; 0xafa7
   28cd4:	movt	r1, #2
   28cd8:	bl	1189c <strcmp@plt>
   28cdc:	cmp	r0, #0
   28ce0:	beq	28d00 <__assert_fail@plt+0x16ffc>
   28ce4:	add	r0, sp, #7
   28ce8:	movw	r1, #44969	; 0xafa9
   28cec:	movt	r1, #2
   28cf0:	bl	1189c <strcmp@plt>
   28cf4:	mov	r4, r0
   28cf8:	cmp	r0, #0
   28cfc:	movwne	r4, #1
   28d00:	mov	r0, r4
   28d04:	sub	sp, fp, #8
   28d08:	pop	{r4, sl, fp, pc}
   28d0c:	push	{fp, lr}
   28d10:	mov	fp, sp
   28d14:	bl	11b24 <__errno_location@plt>
   28d18:	mov	r1, #12
   28d1c:	str	r1, [r0]
   28d20:	mov	r0, #0
   28d24:	pop	{fp, pc}
   28d28:	b	1a2f8 <__assert_fail@plt+0x85f4>
   28d2c:	cmp	r1, #0
   28d30:	orreq	r1, r1, #1
   28d34:	b	1a388 <__assert_fail@plt+0x8684>
   28d38:	b	19f8c <__assert_fail@plt+0x8288>
   28d3c:	clz	r3, r2
   28d40:	lsr	ip, r3, #5
   28d44:	clz	r3, r1
   28d48:	lsr	r3, r3, #5
   28d4c:	orrs	r3, r3, ip
   28d50:	movwne	r1, #1
   28d54:	movwne	r2, #1
   28d58:	b	1a3dc <__assert_fail@plt+0x86d8>
   28d5c:	push	{fp, lr}
   28d60:	mov	fp, sp
   28d64:	mov	r0, #14
   28d68:	bl	11c14 <nl_langinfo@plt>
   28d6c:	movw	r1, #41527	; 0xa237
   28d70:	movt	r1, #2
   28d74:	cmp	r0, #0
   28d78:	movne	r1, r0
   28d7c:	ldrb	r2, [r1]
   28d80:	movw	r0, #44975	; 0xafaf
   28d84:	movt	r0, #2
   28d88:	cmp	r2, #0
   28d8c:	movne	r0, r1
   28d90:	pop	{fp, pc}
   28d94:	push	{r4, sl, fp, lr}
   28d98:	add	fp, sp, #8
   28d9c:	mov	r4, #0
   28da0:	adds	r0, r0, #16
   28da4:	adc	r1, r4, #0
   28da8:	rsb	r2, r1, #0
   28dac:	eors	r2, r2, r1
   28db0:	movwne	r2, #1
   28db4:	cmp	r0, #0
   28db8:	blt	28dd8 <__assert_fail@plt+0x170d4>
   28dbc:	cmp	r2, #0
   28dc0:	asreq	r2, r0, #31
   28dc4:	eoreq	r3, r0, r0
   28dc8:	andeq	r2, r2, #1
   28dcc:	eoreq	r1, r1, r2
   28dd0:	orrseq	r1, r3, r1
   28dd4:	beq	28de0 <__assert_fail@plt+0x170dc>
   28dd8:	mov	r0, r4
   28ddc:	pop	{r4, sl, fp, pc}
   28de0:	bl	11a64 <malloc@plt>
   28de4:	cmp	r0, #0
   28de8:	addne	r4, r0, #8
   28dec:	movne	r1, #8
   28df0:	bfine	r4, r1, #0, #4
   28df4:	subne	r0, r4, r0
   28df8:	strbne	r0, [r4, #-1]
   28dfc:	mov	r0, r4
   28e00:	pop	{r4, sl, fp, pc}
   28e04:	tst	r0, #7
   28e08:	bne	28e20 <__assert_fail@plt+0x1711c>
   28e0c:	tst	r0, #8
   28e10:	bxeq	lr
   28e14:	ldrb	r1, [r0, #-1]
   28e18:	sub	r0, r0, r1
   28e1c:	b	1a22c <__assert_fail@plt+0x8528>
   28e20:	push	{fp, lr}
   28e24:	mov	fp, sp
   28e28:	bl	11cc8 <abort@plt>
   28e2c:	push	{r4, sl, fp, lr}
   28e30:	add	fp, sp, #8
   28e34:	mov	r4, r0
   28e38:	bl	118cc <wcwidth@plt>
   28e3c:	cmn	r0, #1
   28e40:	popgt	{r4, sl, fp, pc}
   28e44:	mov	r0, r4
   28e48:	bl	119a4 <iswcntrl@plt>
   28e4c:	clz	r0, r0
   28e50:	lsr	r0, r0, #5
   28e54:	pop	{r4, sl, fp, pc}
   28e58:	push	{r4, r5, r6, sl, fp, lr}
   28e5c:	add	fp, sp, #16
   28e60:	mov	r5, r1
   28e64:	mov	r4, r0
   28e68:	ldr	r6, [r1], #16
   28e6c:	cmp	r6, r1
   28e70:	bne	28e84 <__assert_fail@plt+0x17180>
   28e74:	ldr	r2, [r5, #4]
   28e78:	add	r6, r4, #16
   28e7c:	mov	r0, r6
   28e80:	bl	1192c <memcpy@plt>
   28e84:	str	r6, [r4]
   28e88:	ldr	r0, [r5, #4]
   28e8c:	str	r0, [r4, #4]
   28e90:	ldrb	r0, [r5, #8]
   28e94:	strb	r0, [r4, #8]
   28e98:	cmp	r0, #0
   28e9c:	ldrne	r0, [r5, #12]
   28ea0:	strne	r0, [r4, #12]
   28ea4:	pop	{r4, r5, r6, sl, fp, pc}
   28ea8:	ubfx	r1, r0, #5, #3
   28eac:	movw	r2, #44984	; 0xafb8
   28eb0:	movt	r2, #2
   28eb4:	ldr	r1, [r2, r1, lsl #2]
   28eb8:	and	r0, r0, #31
   28ebc:	mov	r2, #1
   28ec0:	and	r0, r1, r2, lsl r0
   28ec4:	cmp	r0, #0
   28ec8:	movwne	r0, #1
   28ecc:	bx	lr
   28ed0:	b	28ed4 <__assert_fail@plt+0x171d0>
   28ed4:	push	{r4, r5, r6, r7, fp, lr}
   28ed8:	add	fp, sp, #16
   28edc:	mov	r6, r2
   28ee0:	mov	r4, r1
   28ee4:	bl	28f70 <__assert_fail@plt+0x1726c>
   28ee8:	cmp	r0, #0
   28eec:	beq	28f1c <__assert_fail@plt+0x17218>
   28ef0:	mov	r7, r0
   28ef4:	bl	11af4 <strlen@plt>
   28ef8:	cmp	r0, r6
   28efc:	bcs	28f3c <__assert_fail@plt+0x17238>
   28f00:	add	r2, r0, #1
   28f04:	mov	r0, r4
   28f08:	mov	r1, r7
   28f0c:	bl	1192c <memcpy@plt>
   28f10:	mov	r5, #0
   28f14:	mov	r0, r5
   28f18:	pop	{r4, r5, r6, r7, fp, pc}
   28f1c:	mov	r5, #22
   28f20:	cmp	r6, #0
   28f24:	movne	r0, #0
   28f28:	strbne	r0, [r4]
   28f2c:	movne	r0, r5
   28f30:	popne	{r4, r5, r6, r7, fp, pc}
   28f34:	mov	r0, r5
   28f38:	pop	{r4, r5, r6, r7, fp, pc}
   28f3c:	mov	r5, #34	; 0x22
   28f40:	cmp	r6, #0
   28f44:	beq	28f64 <__assert_fail@plt+0x17260>
   28f48:	sub	r6, r6, #1
   28f4c:	mov	r0, r4
   28f50:	mov	r1, r7
   28f54:	mov	r2, r6
   28f58:	bl	1192c <memcpy@plt>
   28f5c:	mov	r0, #0
   28f60:	strb	r0, [r4, r6]
   28f64:	mov	r0, r5
   28f68:	pop	{r4, r5, r6, r7, fp, pc}
   28f6c:	b	28f70 <__assert_fail@plt+0x1726c>
   28f70:	mov	r1, #0
   28f74:	b	11bf0 <setlocale@plt>
   28f78:	mov	r1, #0
   28f7c:	mov	r2, #3
   28f80:	b	19fe0 <__assert_fail@plt+0x82dc>
   28f84:	eor	r1, r1, #-2147483648	; 0x80000000
   28f88:	b	28f90 <__assert_fail@plt+0x1728c>
   28f8c:	eor	r3, r3, #-2147483648	; 0x80000000
   28f90:	push	{r4, r5, lr}
   28f94:	lsl	r4, r1, #1
   28f98:	lsl	r5, r3, #1
   28f9c:	teq	r4, r5
   28fa0:	teqeq	r0, r2
   28fa4:	orrsne	ip, r4, r0
   28fa8:	orrsne	ip, r5, r2
   28fac:	mvnsne	ip, r4, asr #21
   28fb0:	mvnsne	ip, r5, asr #21
   28fb4:	beq	291a0 <__assert_fail@plt+0x1749c>
   28fb8:	lsr	r4, r4, #21
   28fbc:	rsbs	r5, r4, r5, lsr #21
   28fc0:	rsblt	r5, r5, #0
   28fc4:	ble	28fe4 <__assert_fail@plt+0x172e0>
   28fc8:	add	r4, r4, r5
   28fcc:	eor	r2, r0, r2
   28fd0:	eor	r3, r1, r3
   28fd4:	eor	r0, r2, r0
   28fd8:	eor	r1, r3, r1
   28fdc:	eor	r2, r0, r2
   28fe0:	eor	r3, r1, r3
   28fe4:	cmp	r5, #54	; 0x36
   28fe8:	pophi	{r4, r5, pc}
   28fec:	tst	r1, #-2147483648	; 0x80000000
   28ff0:	lsl	r1, r1, #12
   28ff4:	mov	ip, #1048576	; 0x100000
   28ff8:	orr	r1, ip, r1, lsr #12
   28ffc:	beq	29008 <__assert_fail@plt+0x17304>
   29000:	rsbs	r0, r0, #0
   29004:	rsc	r1, r1, #0
   29008:	tst	r3, #-2147483648	; 0x80000000
   2900c:	lsl	r3, r3, #12
   29010:	orr	r3, ip, r3, lsr #12
   29014:	beq	29020 <__assert_fail@plt+0x1731c>
   29018:	rsbs	r2, r2, #0
   2901c:	rsc	r3, r3, #0
   29020:	teq	r4, r5
   29024:	beq	29188 <__assert_fail@plt+0x17484>
   29028:	sub	r4, r4, #1
   2902c:	rsbs	lr, r5, #32
   29030:	blt	2904c <__assert_fail@plt+0x17348>
   29034:	lsl	ip, r2, lr
   29038:	adds	r0, r0, r2, lsr r5
   2903c:	adc	r1, r1, #0
   29040:	adds	r0, r0, r3, lsl lr
   29044:	adcs	r1, r1, r3, asr r5
   29048:	b	29068 <__assert_fail@plt+0x17364>
   2904c:	sub	r5, r5, #32
   29050:	add	lr, lr, #32
   29054:	cmp	r2, #1
   29058:	lsl	ip, r3, lr
   2905c:	orrcs	ip, ip, #2
   29060:	adds	r0, r0, r3, asr r5
   29064:	adcs	r1, r1, r3, asr #31
   29068:	and	r5, r1, #-2147483648	; 0x80000000
   2906c:	bpl	2907c <__assert_fail@plt+0x17378>
   29070:	rsbs	ip, ip, #0
   29074:	rscs	r0, r0, #0
   29078:	rsc	r1, r1, #0
   2907c:	cmp	r1, #1048576	; 0x100000
   29080:	bcc	290c0 <__assert_fail@plt+0x173bc>
   29084:	cmp	r1, #2097152	; 0x200000
   29088:	bcc	290a8 <__assert_fail@plt+0x173a4>
   2908c:	lsrs	r1, r1, #1
   29090:	rrxs	r0, r0
   29094:	rrx	ip, ip
   29098:	add	r4, r4, #1
   2909c:	lsl	r2, r4, #21
   290a0:	cmn	r2, #4194304	; 0x400000
   290a4:	bcs	29200 <__assert_fail@plt+0x174fc>
   290a8:	cmp	ip, #-2147483648	; 0x80000000
   290ac:	lsrseq	ip, r0, #1
   290b0:	adcs	r0, r0, #0
   290b4:	adc	r1, r1, r4, lsl #20
   290b8:	orr	r1, r1, r5
   290bc:	pop	{r4, r5, pc}
   290c0:	lsls	ip, ip, #1
   290c4:	adcs	r0, r0, r0
   290c8:	adc	r1, r1, r1
   290cc:	tst	r1, #1048576	; 0x100000
   290d0:	sub	r4, r4, #1
   290d4:	bne	290a8 <__assert_fail@plt+0x173a4>
   290d8:	teq	r1, #0
   290dc:	moveq	r1, r0
   290e0:	moveq	r0, #0
   290e4:	clz	r3, r1
   290e8:	addeq	r3, r3, #32
   290ec:	sub	r3, r3, #11
   290f0:	subs	r2, r3, #32
   290f4:	bge	29118 <__assert_fail@plt+0x17414>
   290f8:	adds	r2, r2, #12
   290fc:	ble	29114 <__assert_fail@plt+0x17410>
   29100:	add	ip, r2, #20
   29104:	rsb	r2, r2, #12
   29108:	lsl	r0, r1, ip
   2910c:	lsr	r1, r1, r2
   29110:	b	29128 <__assert_fail@plt+0x17424>
   29114:	add	r2, r2, #20
   29118:	rsble	ip, r2, #32
   2911c:	lsl	r1, r1, r2
   29120:	orrle	r1, r1, r0, lsr ip
   29124:	lslle	r0, r0, r2
   29128:	subs	r4, r4, r3
   2912c:	addge	r1, r1, r4, lsl #20
   29130:	orrge	r1, r1, r5
   29134:	popge	{r4, r5, pc}
   29138:	mvn	r4, r4
   2913c:	subs	r4, r4, #31
   29140:	bge	2917c <__assert_fail@plt+0x17478>
   29144:	adds	r4, r4, #12
   29148:	bgt	29164 <__assert_fail@plt+0x17460>
   2914c:	add	r4, r4, #20
   29150:	rsb	r2, r4, #32
   29154:	lsr	r0, r0, r4
   29158:	orr	r0, r0, r1, lsl r2
   2915c:	orr	r1, r5, r1, lsr r4
   29160:	pop	{r4, r5, pc}
   29164:	rsb	r4, r4, #12
   29168:	rsb	r2, r4, #32
   2916c:	lsr	r0, r0, r2
   29170:	orr	r0, r0, r1, lsl r4
   29174:	mov	r1, r5
   29178:	pop	{r4, r5, pc}
   2917c:	lsr	r0, r1, r4
   29180:	mov	r1, r5
   29184:	pop	{r4, r5, pc}
   29188:	teq	r4, #0
   2918c:	eor	r3, r3, #1048576	; 0x100000
   29190:	eoreq	r1, r1, #1048576	; 0x100000
   29194:	addeq	r4, r4, #1
   29198:	subne	r5, r5, #1
   2919c:	b	29028 <__assert_fail@plt+0x17324>
   291a0:	mvns	ip, r4, asr #21
   291a4:	mvnsne	ip, r5, asr #21
   291a8:	beq	29210 <__assert_fail@plt+0x1750c>
   291ac:	teq	r4, r5
   291b0:	teqeq	r0, r2
   291b4:	beq	291c8 <__assert_fail@plt+0x174c4>
   291b8:	orrs	ip, r4, r0
   291bc:	moveq	r1, r3
   291c0:	moveq	r0, r2
   291c4:	pop	{r4, r5, pc}
   291c8:	teq	r1, r3
   291cc:	movne	r1, #0
   291d0:	movne	r0, #0
   291d4:	popne	{r4, r5, pc}
   291d8:	lsrs	ip, r4, #21
   291dc:	bne	291f0 <__assert_fail@plt+0x174ec>
   291e0:	lsls	r0, r0, #1
   291e4:	adcs	r1, r1, r1
   291e8:	orrcs	r1, r1, #-2147483648	; 0x80000000
   291ec:	pop	{r4, r5, pc}
   291f0:	adds	r4, r4, #4194304	; 0x400000
   291f4:	addcc	r1, r1, #1048576	; 0x100000
   291f8:	popcc	{r4, r5, pc}
   291fc:	and	r5, r1, #-2147483648	; 0x80000000
   29200:	orr	r1, r5, #2130706432	; 0x7f000000
   29204:	orr	r1, r1, #15728640	; 0xf00000
   29208:	mov	r0, #0
   2920c:	pop	{r4, r5, pc}
   29210:	mvns	ip, r4, asr #21
   29214:	movne	r1, r3
   29218:	movne	r0, r2
   2921c:	mvnseq	ip, r5, asr #21
   29220:	movne	r3, r1
   29224:	movne	r2, r0
   29228:	orrs	r4, r0, r1, lsl #12
   2922c:	orrseq	r5, r2, r3, lsl #12
   29230:	teqeq	r1, r3
   29234:	orrne	r1, r1, #524288	; 0x80000
   29238:	pop	{r4, r5, pc}
   2923c:	teq	r0, #0
   29240:	moveq	r1, #0
   29244:	bxeq	lr
   29248:	push	{r4, r5, lr}
   2924c:	mov	r4, #1024	; 0x400
   29250:	add	r4, r4, #50	; 0x32
   29254:	mov	r5, #0
   29258:	mov	r1, #0
   2925c:	b	290d8 <__assert_fail@plt+0x173d4>
   29260:	teq	r0, #0
   29264:	moveq	r1, #0
   29268:	bxeq	lr
   2926c:	push	{r4, r5, lr}
   29270:	mov	r4, #1024	; 0x400
   29274:	add	r4, r4, #50	; 0x32
   29278:	ands	r5, r0, #-2147483648	; 0x80000000
   2927c:	rsbmi	r0, r0, #0
   29280:	mov	r1, #0
   29284:	b	290d8 <__assert_fail@plt+0x173d4>
   29288:	lsls	r2, r0, #1
   2928c:	asr	r1, r2, #3
   29290:	rrx	r1, r1
   29294:	lsl	r0, r2, #28
   29298:	andsne	r3, r2, #-16777216	; 0xff000000
   2929c:	teqne	r3, #-16777216	; 0xff000000
   292a0:	eorne	r1, r1, #939524096	; 0x38000000
   292a4:	bxne	lr
   292a8:	bics	r2, r2, #-16777216	; 0xff000000
   292ac:	bxeq	lr
   292b0:	teq	r3, #-16777216	; 0xff000000
   292b4:	orreq	r1, r1, #524288	; 0x80000
   292b8:	bxeq	lr
   292bc:	push	{r4, r5, lr}
   292c0:	mov	r4, #896	; 0x380
   292c4:	and	r5, r1, #-2147483648	; 0x80000000
   292c8:	bic	r1, r1, #-2147483648	; 0x80000000
   292cc:	b	290d8 <__assert_fail@plt+0x173d4>
   292d0:	orrs	r2, r0, r1
   292d4:	bxeq	lr
   292d8:	push	{r4, r5, lr}
   292dc:	mov	r5, #0
   292e0:	b	29300 <__assert_fail@plt+0x175fc>
   292e4:	orrs	r2, r0, r1
   292e8:	bxeq	lr
   292ec:	push	{r4, r5, lr}
   292f0:	ands	r5, r1, #-2147483648	; 0x80000000
   292f4:	bpl	29300 <__assert_fail@plt+0x175fc>
   292f8:	rsbs	r0, r0, #0
   292fc:	rsc	r1, r1, #0
   29300:	mov	r4, #1024	; 0x400
   29304:	add	r4, r4, #50	; 0x32
   29308:	lsrs	ip, r1, #22
   2930c:	beq	2907c <__assert_fail@plt+0x17378>
   29310:	mov	r2, #3
   29314:	lsrs	ip, ip, #3
   29318:	addne	r2, r2, #3
   2931c:	lsrs	ip, ip, #3
   29320:	addne	r2, r2, #3
   29324:	add	r2, r2, ip, lsr #3
   29328:	rsb	r3, r2, #32
   2932c:	lsl	ip, r0, r3
   29330:	lsr	r0, r0, r2
   29334:	orr	r0, r0, r1, lsl r3
   29338:	lsr	r1, r1, r2
   2933c:	add	r4, r4, r2
   29340:	b	2907c <__assert_fail@plt+0x17378>
   29344:	cmp	r3, #0
   29348:	cmpeq	r2, #0
   2934c:	bne	29364 <__assert_fail@plt+0x17660>
   29350:	cmp	r1, #0
   29354:	cmpeq	r0, #0
   29358:	mvnne	r1, #0
   2935c:	mvnne	r0, #0
   29360:	b	29380 <__assert_fail@plt+0x1767c>
   29364:	sub	sp, sp, #8
   29368:	push	{sp, lr}
   2936c:	bl	293d0 <__assert_fail@plt+0x176cc>
   29370:	ldr	lr, [sp, #4]
   29374:	add	sp, sp, #8
   29378:	pop	{r2, r3}
   2937c:	bx	lr
   29380:	push	{r1, lr}
   29384:	mov	r0, #8
   29388:	bl	11878 <raise@plt>
   2938c:	pop	{r1, pc}
   29390:	vmov	d6, r0, r1
   29394:	vldr	d7, [pc, #36]	; 293c0 <__assert_fail@plt+0x176bc>
   29398:	vldr	d5, [pc, #40]	; 293c8 <__assert_fail@plt+0x176c4>
   2939c:	vmul.f64	d7, d6, d7
   293a0:	vcvt.u32.f64	s14, d7
   293a4:	vcvt.f64.u32	d4, s14
   293a8:	vmov	r1, s14
   293ac:	vmls.f64	d6, d4, d5
   293b0:	vcvt.u32.f64	s15, d6
   293b4:	vmov	r0, s15
   293b8:	bx	lr
   293bc:	nop			; (mov r0, r0)
   293c0:	andeq	r0, r0, r0
   293c4:	ldclcc	0, cr0, [r0]
   293c8:	andeq	r0, r0, r0
   293cc:	mvnsmi	r0, r0
   293d0:	cmp	r1, r3
   293d4:	cmpeq	r0, r2
   293d8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   293dc:	mov	r4, r0
   293e0:	movcc	r0, #0
   293e4:	mov	r5, r1
   293e8:	ldr	lr, [sp, #36]	; 0x24
   293ec:	movcc	r1, r0
   293f0:	bcc	294ec <__assert_fail@plt+0x177e8>
   293f4:	cmp	r3, #0
   293f8:	clzeq	ip, r2
   293fc:	clzne	ip, r3
   29400:	addeq	ip, ip, #32
   29404:	cmp	r5, #0
   29408:	clzeq	r1, r4
   2940c:	addeq	r1, r1, #32
   29410:	clzne	r1, r5
   29414:	sub	ip, ip, r1
   29418:	sub	sl, ip, #32
   2941c:	lsl	r9, r3, ip
   29420:	rsb	fp, ip, #32
   29424:	orr	r9, r9, r2, lsl sl
   29428:	orr	r9, r9, r2, lsr fp
   2942c:	lsl	r8, r2, ip
   29430:	cmp	r5, r9
   29434:	cmpeq	r4, r8
   29438:	movcc	r0, #0
   2943c:	movcc	r1, r0
   29440:	bcc	2945c <__assert_fail@plt+0x17758>
   29444:	mov	r0, #1
   29448:	subs	r4, r4, r8
   2944c:	lsl	r1, r0, sl
   29450:	orr	r1, r1, r0, lsr fp
   29454:	lsl	r0, r0, ip
   29458:	sbc	r5, r5, r9
   2945c:	cmp	ip, #0
   29460:	beq	294ec <__assert_fail@plt+0x177e8>
   29464:	lsr	r6, r8, #1
   29468:	orr	r6, r6, r9, lsl #31
   2946c:	lsr	r7, r9, #1
   29470:	mov	r2, ip
   29474:	b	29498 <__assert_fail@plt+0x17794>
   29478:	subs	r3, r4, r6
   2947c:	sbc	r8, r5, r7
   29480:	adds	r3, r3, r3
   29484:	adc	r8, r8, r8
   29488:	adds	r4, r3, #1
   2948c:	adc	r5, r8, #0
   29490:	subs	r2, r2, #1
   29494:	beq	294b4 <__assert_fail@plt+0x177b0>
   29498:	cmp	r5, r7
   2949c:	cmpeq	r4, r6
   294a0:	bcs	29478 <__assert_fail@plt+0x17774>
   294a4:	adds	r4, r4, r4
   294a8:	adc	r5, r5, r5
   294ac:	subs	r2, r2, #1
   294b0:	bne	29498 <__assert_fail@plt+0x17794>
   294b4:	lsr	r3, r4, ip
   294b8:	orr	r3, r3, r5, lsl fp
   294bc:	lsr	r2, r5, ip
   294c0:	orr	r3, r3, r5, lsr sl
   294c4:	adds	r0, r0, r4
   294c8:	mov	r4, r3
   294cc:	lsl	r3, r2, ip
   294d0:	orr	r3, r3, r4, lsl sl
   294d4:	lsl	ip, r4, ip
   294d8:	orr	r3, r3, r4, lsr fp
   294dc:	adc	r1, r1, r5
   294e0:	subs	r0, r0, ip
   294e4:	mov	r5, r2
   294e8:	sbc	r1, r1, r3
   294ec:	cmp	lr, #0
   294f0:	strdne	r4, [lr]
   294f4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   294f8:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   294fc:	mov	r7, r0
   29500:	ldr	r6, [pc, #72]	; 29550 <__assert_fail@plt+0x1784c>
   29504:	ldr	r5, [pc, #72]	; 29554 <__assert_fail@plt+0x17850>
   29508:	add	r6, pc, r6
   2950c:	add	r5, pc, r5
   29510:	sub	r6, r6, r5
   29514:	mov	r8, r1
   29518:	mov	r9, r2
   2951c:	bl	11828 <pthread_mutex_unlock@plt-0x20>
   29520:	asrs	r6, r6, #2
   29524:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   29528:	mov	r4, #0
   2952c:	add	r4, r4, #1
   29530:	ldr	r3, [r5], #4
   29534:	mov	r2, r9
   29538:	mov	r1, r8
   2953c:	mov	r0, r7
   29540:	blx	r3
   29544:	cmp	r6, r4
   29548:	bne	2952c <__assert_fail@plt+0x17828>
   2954c:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   29550:	strdeq	r2, [r1], -ip
   29554:	strdeq	r2, [r1], -r4
   29558:	bx	lr
   2955c:	ldr	r3, [pc, #12]	; 29570 <__assert_fail@plt+0x1786c>
   29560:	mov	r1, #0
   29564:	add	r3, pc, r3
   29568:	ldr	r2, [r3]
   2956c:	b	11b48 <__cxa_atexit@plt>
   29570:	andeq	r2, r1, r0, asr #24
   29574:	mov	r2, r1
   29578:	mov	r1, r0
   2957c:	mov	r0, #3
   29580:	b	11c8c <__xstat64@plt>
   29584:	mov	r2, r1
   29588:	mov	r1, r0
   2958c:	mov	r0, #3
   29590:	b	119d4 <__fxstat64@plt>
   29594:	mov	r2, r1
   29598:	mov	r1, r0
   2959c:	mov	r0, #3
   295a0:	b	11cec <__lxstat64@plt>

Disassembly of section .fini:

000295a4 <.fini>:
   295a4:	push	{r3, lr}
   295a8:	pop	{r3, pc}
