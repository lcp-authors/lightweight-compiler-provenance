
../repos/coreutils/src/od:     file format elf32-littlearm


Disassembly of section .init:

00010ef0 <.init>:
   10ef0:	push	{r3, lr}
   10ef4:	bl	128bc <__assert_fail@plt+0x16b8>
   10ef8:	pop	{r3, pc}

Disassembly of section .plt:

00010efc <calloc@plt-0x14>:
   10efc:	push	{lr}		; (str lr, [sp, #-4]!)
   10f00:	ldr	lr, [pc, #4]	; 10f0c <calloc@plt-0x4>
   10f04:	add	lr, pc, lr
   10f08:	ldr	pc, [lr, #8]!
   10f0c:	strdeq	fp, [r1], -r4

00010f10 <calloc@plt>:
   10f10:	add	ip, pc, #0, 12
   10f14:	add	ip, ip, #110592	; 0x1b000
   10f18:	ldr	pc, [ip, #244]!	; 0xf4

00010f1c <fputs_unlocked@plt>:
   10f1c:	add	ip, pc, #0, 12
   10f20:	add	ip, ip, #110592	; 0x1b000
   10f24:	ldr	pc, [ip, #236]!	; 0xec

00010f28 <raise@plt>:
   10f28:	add	ip, pc, #0, 12
   10f2c:	add	ip, ip, #110592	; 0x1b000
   10f30:	ldr	pc, [ip, #228]!	; 0xe4

00010f34 <strcmp@plt>:
   10f34:	add	ip, pc, #0, 12
   10f38:	add	ip, ip, #110592	; 0x1b000
   10f3c:	ldr	pc, [ip, #220]!	; 0xdc

00010f40 <fflush@plt>:
   10f40:	add	ip, pc, #0, 12
   10f44:	add	ip, ip, #110592	; 0x1b000
   10f48:	ldr	pc, [ip, #212]!	; 0xd4

00010f4c <free@plt>:
   10f4c:	add	ip, pc, #0, 12
   10f50:	add	ip, ip, #110592	; 0x1b000
   10f54:	ldr	pc, [ip, #204]!	; 0xcc

00010f58 <ferror@plt>:
   10f58:	add	ip, pc, #0, 12
   10f5c:	add	ip, ip, #110592	; 0x1b000
   10f60:	ldr	pc, [ip, #196]!	; 0xc4

00010f64 <_exit@plt>:
   10f64:	add	ip, pc, #0, 12
   10f68:	add	ip, ip, #110592	; 0x1b000
   10f6c:	ldr	pc, [ip, #188]!	; 0xbc

00010f70 <memcpy@plt>:
   10f70:	add	ip, pc, #0, 12
   10f74:	add	ip, ip, #110592	; 0x1b000
   10f78:	ldr	pc, [ip, #180]!	; 0xb4

00010f7c <__strtoull_internal@plt>:
   10f7c:	add	ip, pc, #0, 12
   10f80:	add	ip, ip, #110592	; 0x1b000
   10f84:	ldr	pc, [ip, #172]!	; 0xac

00010f88 <mbsinit@plt>:
   10f88:	add	ip, pc, #0, 12
   10f8c:	add	ip, ip, #110592	; 0x1b000
   10f90:	ldr	pc, [ip, #164]!	; 0xa4

00010f94 <strtold@plt>:
   10f94:	add	ip, pc, #0, 12
   10f98:	add	ip, ip, #110592	; 0x1b000
   10f9c:	ldr	pc, [ip, #156]!	; 0x9c

00010fa0 <fwrite_unlocked@plt>:
   10fa0:	add	ip, pc, #0, 12
   10fa4:	add	ip, ip, #110592	; 0x1b000
   10fa8:	ldr	pc, [ip, #148]!	; 0x94

00010fac <memcmp@plt>:
   10fac:	add	ip, pc, #0, 12
   10fb0:	add	ip, ip, #110592	; 0x1b000
   10fb4:	ldr	pc, [ip, #140]!	; 0x8c

00010fb8 <fputc_unlocked@plt>:
   10fb8:	add	ip, pc, #0, 12
   10fbc:	add	ip, ip, #110592	; 0x1b000
   10fc0:	ldr	pc, [ip, #132]!	; 0x84

00010fc4 <dcgettext@plt>:
   10fc4:	add	ip, pc, #0, 12
   10fc8:	add	ip, ip, #110592	; 0x1b000
   10fcc:	ldr	pc, [ip, #124]!	; 0x7c

00010fd0 <realloc@plt>:
   10fd0:	add	ip, pc, #0, 12
   10fd4:	add	ip, ip, #110592	; 0x1b000
   10fd8:	ldr	pc, [ip, #116]!	; 0x74

00010fdc <textdomain@plt>:
   10fdc:	add	ip, pc, #0, 12
   10fe0:	add	ip, ip, #110592	; 0x1b000
   10fe4:	ldr	pc, [ip, #108]!	; 0x6c

00010fe8 <iswprint@plt>:
   10fe8:	add	ip, pc, #0, 12
   10fec:	add	ip, ip, #110592	; 0x1b000
   10ff0:	ldr	pc, [ip, #100]!	; 0x64

00010ff4 <__fxstat64@plt>:
   10ff4:	add	ip, pc, #0, 12
   10ff8:	add	ip, ip, #110592	; 0x1b000
   10ffc:	ldr	pc, [ip, #92]!	; 0x5c

00011000 <fwrite@plt>:
   11000:	add	ip, pc, #0, 12
   11004:	add	ip, ip, #110592	; 0x1b000
   11008:	ldr	pc, [ip, #84]!	; 0x54

0001100c <lseek64@plt>:
   1100c:	add	ip, pc, #0, 12
   11010:	add	ip, ip, #110592	; 0x1b000
   11014:	ldr	pc, [ip, #76]!	; 0x4c

00011018 <__ctype_get_mb_cur_max@plt>:
   11018:	add	ip, pc, #0, 12
   1101c:	add	ip, ip, #110592	; 0x1b000
   11020:	ldr	pc, [ip, #68]!	; 0x44

00011024 <__fpending@plt>:
   11024:	add	ip, pc, #0, 12
   11028:	add	ip, ip, #110592	; 0x1b000
   1102c:	ldr	pc, [ip, #60]!	; 0x3c

00011030 <mbrtowc@plt>:
   11030:	add	ip, pc, #0, 12
   11034:	add	ip, ip, #110592	; 0x1b000
   11038:	ldr	pc, [ip, #52]!	; 0x34

0001103c <error@plt>:
   1103c:	add	ip, pc, #0, 12
   11040:	add	ip, ip, #110592	; 0x1b000
   11044:	ldr	pc, [ip, #44]!	; 0x2c

00011048 <strtof@plt>:
   11048:	add	ip, pc, #0, 12
   1104c:	add	ip, ip, #110592	; 0x1b000
   11050:	ldr	pc, [ip, #36]!	; 0x24

00011054 <puts@plt>:
   11054:	add	ip, pc, #0, 12
   11058:	add	ip, ip, #110592	; 0x1b000
   1105c:	ldr	pc, [ip, #28]!

00011060 <malloc@plt>:
   11060:	add	ip, pc, #0, 12
   11064:	add	ip, ip, #110592	; 0x1b000
   11068:	ldr	pc, [ip, #20]!

0001106c <__libc_start_main@plt>:
   1106c:	add	ip, pc, #0, 12
   11070:	add	ip, ip, #110592	; 0x1b000
   11074:	ldr	pc, [ip, #12]!

00011078 <__vfprintf_chk@plt>:
   11078:	add	ip, pc, #0, 12
   1107c:	add	ip, ip, #110592	; 0x1b000
   11080:	ldr	pc, [ip, #4]!

00011084 <__freading@plt>:
   11084:	add	ip, pc, #0, 12
   11088:	add	ip, ip, #106496	; 0x1a000
   1108c:	ldr	pc, [ip, #4092]!	; 0xffc

00011090 <__gmon_start__@plt>:
   11090:	add	ip, pc, #0, 12
   11094:	add	ip, ip, #106496	; 0x1a000
   11098:	ldr	pc, [ip, #4084]!	; 0xff4

0001109c <getopt_long@plt>:
   1109c:	add	ip, pc, #0, 12
   110a0:	add	ip, ip, #106496	; 0x1a000
   110a4:	ldr	pc, [ip, #4076]!	; 0xfec

000110a8 <__ctype_b_loc@plt>:
   110a8:	add	ip, pc, #0, 12
   110ac:	add	ip, ip, #106496	; 0x1a000
   110b0:	ldr	pc, [ip, #4068]!	; 0xfe4

000110b4 <exit@plt>:
   110b4:	add	ip, pc, #0, 12
   110b8:	add	ip, ip, #106496	; 0x1a000
   110bc:	ldr	pc, [ip, #4060]!	; 0xfdc

000110c0 <strlen@plt>:
   110c0:	add	ip, pc, #0, 12
   110c4:	add	ip, ip, #106496	; 0x1a000
   110c8:	ldr	pc, [ip, #4052]!	; 0xfd4

000110cc <strchr@plt>:
   110cc:	add	ip, pc, #0, 12
   110d0:	add	ip, ip, #106496	; 0x1a000
   110d4:	ldr	pc, [ip, #4044]!	; 0xfcc

000110d8 <__errno_location@plt>:
   110d8:	add	ip, pc, #0, 12
   110dc:	add	ip, ip, #106496	; 0x1a000
   110e0:	ldr	pc, [ip, #4036]!	; 0xfc4

000110e4 <__sprintf_chk@plt>:
   110e4:	add	ip, pc, #0, 12
   110e8:	add	ip, ip, #106496	; 0x1a000
   110ec:	ldr	pc, [ip, #4028]!	; 0xfbc

000110f0 <__cxa_atexit@plt>:
   110f0:	add	ip, pc, #0, 12
   110f4:	add	ip, ip, #106496	; 0x1a000
   110f8:	ldr	pc, [ip, #4020]!	; 0xfb4

000110fc <setvbuf@plt>:
   110fc:	add	ip, pc, #0, 12
   11100:	add	ip, ip, #106496	; 0x1a000
   11104:	ldr	pc, [ip, #4012]!	; 0xfac

00011108 <memset@plt>:
   11108:	add	ip, pc, #0, 12
   1110c:	add	ip, ip, #106496	; 0x1a000
   11110:	ldr	pc, [ip, #4004]!	; 0xfa4

00011114 <fgetc@plt>:
   11114:	add	ip, pc, #0, 12
   11118:	add	ip, ip, #106496	; 0x1a000
   1111c:	ldr	pc, [ip, #3996]!	; 0xf9c

00011120 <__printf_chk@plt>:
   11120:	add	ip, pc, #0, 12
   11124:	add	ip, ip, #106496	; 0x1a000
   11128:	ldr	pc, [ip, #3988]!	; 0xf94

0001112c <strtod@plt>:
   1112c:	add	ip, pc, #0, 12
   11130:	add	ip, ip, #106496	; 0x1a000
   11134:	ldr	pc, [ip, #3980]!	; 0xf8c

00011138 <fileno@plt>:
   11138:	add	ip, pc, #0, 12
   1113c:	add	ip, ip, #106496	; 0x1a000
   11140:	ldr	pc, [ip, #3972]!	; 0xf84

00011144 <__fprintf_chk@plt>:
   11144:	add	ip, pc, #0, 12
   11148:	add	ip, ip, #106496	; 0x1a000
   1114c:	ldr	pc, [ip, #3964]!	; 0xf7c

00011150 <fclose@plt>:
   11150:	add	ip, pc, #0, 12
   11154:	add	ip, ip, #106496	; 0x1a000
   11158:	ldr	pc, [ip, #3956]!	; 0xf74

0001115c <fseeko64@plt>:
   1115c:	add	ip, pc, #0, 12
   11160:	add	ip, ip, #106496	; 0x1a000
   11164:	ldr	pc, [ip, #3948]!	; 0xf6c

00011168 <__overflow@plt>:
   11168:	add	ip, pc, #0, 12
   1116c:	add	ip, ip, #106496	; 0x1a000
   11170:	ldr	pc, [ip, #3940]!	; 0xf64

00011174 <setlocale@plt>:
   11174:	add	ip, pc, #0, 12
   11178:	add	ip, ip, #106496	; 0x1a000
   1117c:	ldr	pc, [ip, #3932]!	; 0xf5c

00011180 <strrchr@plt>:
   11180:	add	ip, pc, #0, 12
   11184:	add	ip, ip, #106496	; 0x1a000
   11188:	ldr	pc, [ip, #3924]!	; 0xf54

0001118c <nl_langinfo@plt>:
   1118c:	add	ip, pc, #0, 12
   11190:	add	ip, ip, #106496	; 0x1a000
   11194:	ldr	pc, [ip, #3916]!	; 0xf4c

00011198 <__fread_unlocked_chk@plt>:
   11198:	add	ip, pc, #0, 12
   1119c:	add	ip, ip, #106496	; 0x1a000
   111a0:	ldr	pc, [ip, #3908]!	; 0xf44

000111a4 <localeconv@plt>:
   111a4:	add	ip, pc, #0, 12
   111a8:	add	ip, ip, #106496	; 0x1a000
   111ac:	ldr	pc, [ip, #3900]!	; 0xf3c

000111b0 <clearerr_unlocked@plt>:
   111b0:	add	ip, pc, #0, 12
   111b4:	add	ip, ip, #106496	; 0x1a000
   111b8:	ldr	pc, [ip, #3892]!	; 0xf34

000111bc <fopen64@plt>:
   111bc:	add	ip, pc, #0, 12
   111c0:	add	ip, ip, #106496	; 0x1a000
   111c4:	ldr	pc, [ip, #3884]!	; 0xf2c

000111c8 <bindtextdomain@plt>:
   111c8:	add	ip, pc, #0, 12
   111cc:	add	ip, ip, #106496	; 0x1a000
   111d0:	ldr	pc, [ip, #3876]!	; 0xf24

000111d4 <fread_unlocked@plt>:
   111d4:	add	ip, pc, #0, 12
   111d8:	add	ip, ip, #106496	; 0x1a000
   111dc:	ldr	pc, [ip, #3868]!	; 0xf1c

000111e0 <strncmp@plt>:
   111e0:	add	ip, pc, #0, 12
   111e4:	add	ip, ip, #106496	; 0x1a000
   111e8:	ldr	pc, [ip, #3860]!	; 0xf14

000111ec <abort@plt>:
   111ec:	add	ip, pc, #0, 12
   111f0:	add	ip, ip, #106496	; 0x1a000
   111f4:	ldr	pc, [ip, #3852]!	; 0xf0c

000111f8 <__snprintf_chk@plt>:
   111f8:	add	ip, pc, #0, 12
   111fc:	add	ip, ip, #106496	; 0x1a000
   11200:	ldr	pc, [ip, #3844]!	; 0xf04

00011204 <__assert_fail@plt>:
   11204:	add	ip, pc, #0, 12
   11208:	add	ip, ip, #106496	; 0x1a000
   1120c:	ldr	pc, [ip, #3836]!	; 0xefc

Disassembly of section .text:

00011210 <.text>:
   11210:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   11214:	mov	fp, r0
   11218:	sub	sp, sp, #60	; 0x3c
   1121c:	ldr	r0, [r1]
   11220:	mov	sl, r1
   11224:	bl	15860 <__assert_fail@plt+0x465c>
   11228:	ldr	r1, [pc, #3988]	; 121c4 <__assert_fail@plt+0xfc0>
   1122c:	mov	r0, #6
   11230:	bl	11174 <setlocale@plt>
   11234:	ldr	r1, [pc, #3980]	; 121c8 <__assert_fail@plt+0xfc4>
   11238:	ldr	r0, [pc, #3980]	; 121cc <__assert_fail@plt+0xfc8>
   1123c:	bl	111c8 <bindtextdomain@plt>
   11240:	ldr	r0, [pc, #3972]	; 121cc <__assert_fail@plt+0xfc8>
   11244:	bl	10fdc <textdomain@plt>
   11248:	ldr	r0, [pc, #3968]	; 121d0 <__assert_fail@plt+0xfcc>
   1124c:	bl	19358 <__assert_fail@plt+0x8154>
   11250:	ldr	r3, [pc, #3964]	; 121d4 <__assert_fail@plt+0xfd0>
   11254:	mov	r1, #0
   11258:	add	r2, r3, #36	; 0x24
   1125c:	str	r1, [r3, #4]!
   11260:	cmp	r3, r2
   11264:	bne	1125c <__assert_fail@plt+0x58>
   11268:	ldr	r4, [pc, #3944]	; 121d8 <__assert_fail@plt+0xfd4>
   1126c:	mov	ip, #1
   11270:	mov	r0, #2
   11274:	mov	r3, r4
   11278:	mov	r2, #0
   1127c:	add	r1, r4, #92	; 0x5c
   11280:	str	ip, [r4, #28]
   11284:	str	r0, [r4, #32]
   11288:	mov	ip, #4
   1128c:	mov	r0, #5
   11290:	str	ip, [r4, #40]	; 0x28
   11294:	str	r0, [r3, #56]!	; 0x38
   11298:	str	r2, [r3, #4]!
   1129c:	cmp	r1, r3
   112a0:	bne	11298 <__assert_fail@plt+0x94>
   112a4:	mov	r3, #0
   112a8:	str	r3, [sp, #16]
   112ac:	mov	r6, r3
   112b0:	str	r3, [sp, #28]
   112b4:	add	r3, sp, #40	; 0x28
   112b8:	str	r3, [sp, #24]
   112bc:	mov	r3, #6
   112c0:	str	r3, [r4, #76]	; 0x4c
   112c4:	mov	r3, #7
   112c8:	str	r3, [r4, #92]	; 0x5c
   112cc:	str	r3, [r4]
   112d0:	mov	r3, #8
   112d4:	ldr	r8, [pc, #3840]	; 121dc <__assert_fail@plt+0xfd8>
   112d8:	str	r3, [r4, #4]
   112dc:	ldr	r5, [pc, #3836]	; 121e0 <__assert_fail@plt+0xfdc>
   112e0:	mov	r3, sl
   112e4:	str	r2, [r4, #12]
   112e8:	str	r2, [r4, #16]
   112ec:	str	r2, [r4, #20]
   112f0:	strb	r2, [r4, #110]	; 0x6e
   112f4:	mov	sl, fp
   112f8:	ldr	r2, [pc, #3812]	; 121e4 <__assert_fail@plt+0xfe0>
   112fc:	mov	r9, #1
   11300:	mov	fp, r3
   11304:	add	r1, r8, #244	; 0xf4
   11308:	str	r1, [sp, #32]
   1130c:	str	r2, [r4, #120]	; 0x78
   11310:	ldr	r3, [sp, #24]
   11314:	mvn	ip, #0
   11318:	str	r3, [sp]
   1131c:	ldr	r2, [pc, #3780]	; 121e8 <__assert_fail@plt+0xfe4>
   11320:	mov	r3, r8
   11324:	mov	r1, fp
   11328:	mov	r0, sl
   1132c:	str	ip, [sp, #40]	; 0x28
   11330:	bl	1109c <getopt_long@plt>
   11334:	cmn	r0, #1
   11338:	beq	11b6c <__assert_fail@plt+0x968>
   1133c:	add	r0, r0, #3
   11340:	cmp	r0, #260	; 0x104
   11344:	ldrls	pc, [pc, r0, lsl #2]
   11348:	b	11b38 <__assert_fail@plt+0x934>
   1134c:	andeq	r1, r1, r4, ror sl
   11350:	andeq	r1, r1, ip, ror #20
   11354:	andeq	r1, r1, r8, lsr fp
   11358:	andeq	r1, r1, r8, lsr fp
   1135c:	andeq	r1, r1, r8, lsr fp
   11360:	andeq	r1, r1, r8, lsr fp
   11364:	andeq	r1, r1, r8, lsr fp
   11368:	andeq	r1, r1, r8, lsr fp
   1136c:	andeq	r1, r1, r8, lsr fp
   11370:	andeq	r1, r1, r8, lsr fp
   11374:	andeq	r1, r1, r8, lsr fp
   11378:	andeq	r1, r1, r8, lsr fp
   1137c:	andeq	r1, r1, r8, lsr fp
   11380:	andeq	r1, r1, r8, lsr fp
   11384:	andeq	r1, r1, r8, lsr fp
   11388:	andeq	r1, r1, r8, lsr fp
   1138c:	andeq	r1, r1, r8, lsr fp
   11390:	andeq	r1, r1, r8, lsr fp
   11394:	andeq	r1, r1, r8, lsr fp
   11398:	andeq	r1, r1, r8, lsr fp
   1139c:	andeq	r1, r1, r8, lsr fp
   113a0:	andeq	r1, r1, r8, lsr fp
   113a4:	andeq	r1, r1, r8, lsr fp
   113a8:	andeq	r1, r1, r8, lsr fp
   113ac:	andeq	r1, r1, r8, lsr fp
   113b0:	andeq	r1, r1, r8, lsr fp
   113b4:	andeq	r1, r1, r8, lsr fp
   113b8:	andeq	r1, r1, r8, lsr fp
   113bc:	andeq	r1, r1, r8, lsr fp
   113c0:	andeq	r1, r1, r8, lsr fp
   113c4:	andeq	r1, r1, r8, lsr fp
   113c8:	andeq	r1, r1, r8, lsr fp
   113cc:	andeq	r1, r1, r8, lsr fp
   113d0:	andeq	r1, r1, r8, lsr fp
   113d4:	andeq	r1, r1, r8, lsr fp
   113d8:	andeq	r1, r1, r8, lsr fp
   113dc:	andeq	r1, r1, r8, lsr fp
   113e0:	andeq	r1, r1, r8, lsr fp
   113e4:	andeq	r1, r1, r8, lsr fp
   113e8:	andeq	r1, r1, r8, lsr fp
   113ec:	andeq	r1, r1, r8, lsr fp
   113f0:	andeq	r1, r1, r8, lsr fp
   113f4:	andeq	r1, r1, r8, lsr fp
   113f8:	andeq	r1, r1, r8, lsr fp
   113fc:	andeq	r1, r1, r8, lsr fp
   11400:	andeq	r1, r1, r8, lsr fp
   11404:	andeq	r1, r1, r8, lsr fp
   11408:	andeq	r1, r1, r8, lsr fp
   1140c:	andeq	r1, r1, r8, lsr fp
   11410:	andeq	r1, r1, r8, lsr fp
   11414:	andeq	r1, r1, r8, lsr fp
   11418:	andeq	r1, r1, r8, lsr fp
   1141c:	andeq	r1, r1, r8, lsr fp
   11420:	andeq	r1, r1, r8, lsr fp
   11424:	andeq	r1, r1, r8, lsr fp
   11428:	andeq	r1, r1, r8, lsr fp
   1142c:	andeq	r1, r1, r8, lsr fp
   11430:	andeq	r1, r1, r8, lsr fp
   11434:	andeq	r1, r1, r8, lsr fp
   11438:	andeq	r1, r1, r8, lsr fp
   1143c:	andeq	r1, r1, r8, lsr fp
   11440:	andeq	r1, r1, r8, lsr fp
   11444:	andeq	r1, r1, r8, lsr fp
   11448:	andeq	r1, r1, r8, lsr fp
   1144c:	andeq	r1, r1, r8, lsr fp
   11450:	andeq	r1, r1, r8, lsr fp
   11454:	andeq	r1, r1, r8, lsr fp
   11458:	andeq	r1, r1, r8, lsr fp
   1145c:	andeq	r1, r1, ip, lsr #20
   11460:	andeq	r1, r1, r8, lsl sl
   11464:	andeq	r1, r1, r8, lsr fp
   11468:	andeq	r1, r1, r4, lsl #20
   1146c:	andeq	r1, r1, r8, lsr fp
   11470:	strdeq	r1, [r1], -r0
   11474:	andeq	r1, r1, r8, lsr fp
   11478:	muleq	r1, r8, r9
   1147c:	andeq	r1, r1, r4, lsl #19
   11480:	andeq	r1, r1, r8, lsr fp
   11484:	andeq	r1, r1, r8, lsr fp
   11488:	andeq	r1, r1, r4, lsl #19
   1148c:	andeq	r1, r1, r8, lsr fp
   11490:	andeq	r1, r1, ip, lsr #19
   11494:	andeq	r1, r1, r0, ror r9
   11498:	andeq	r1, r1, r8, lsr fp
   1149c:	andeq	r1, r1, r8, lsr fp
   114a0:	andeq	r1, r1, r8, lsr fp
   114a4:	andeq	r1, r1, ip, lsl #18
   114a8:	andeq	r1, r1, r8, lsr fp
   114ac:	andeq	r1, r1, r8, lsr fp
   114b0:	andeq	r1, r1, r8, lsr fp
   114b4:	andeq	r1, r1, r8, lsr fp
   114b8:	muleq	r1, r8, r9
   114bc:	andeq	r1, r1, r8, lsr fp
   114c0:	andeq	r1, r1, r8, lsr fp
   114c4:	andeq	r1, r1, r8, lsr fp
   114c8:	andeq	r1, r1, r8, lsr fp
   114cc:	andeq	r1, r1, r8, lsr fp
   114d0:	andeq	r1, r1, r8, lsr fp
   114d4:	andeq	r1, r1, r8, lsr fp
   114d8:	andeq	r1, r1, r8, lsr fp
   114dc:	strdeq	r1, [r1], -r8
   114e0:	andeq	r1, r1, r4, ror #17
   114e4:	ldrdeq	r1, [r1], -r0
   114e8:			; <UNDEFINED> instruction: 0x000118bc
   114ec:	strdeq	r1, [r1], -r0
   114f0:	andeq	r1, r1, r8, lsr #17
   114f4:	andeq	r1, r1, r8, lsr fp
   114f8:	muleq	r1, r4, r8
   114fc:	andeq	r1, r1, r0, lsl #17
   11500:	andeq	r1, r1, r4, asr r8
   11504:	andeq	r1, r1, r8, lsr fp
   11508:	andeq	r1, r1, r4, lsl #19
   1150c:	andeq	r1, r1, r8, lsr fp
   11510:	andeq	r1, r1, r8, lsr fp
   11514:	andeq	r1, r1, r8, lsl sl
   11518:	andeq	r1, r1, r8, lsr fp
   1151c:	andeq	r1, r1, r8, lsr fp
   11520:	andeq	r1, r1, r8, lsr fp
   11524:	andeq	r1, r1, r0, asr #16
   11528:	andeq	r1, r1, r8, lsr #16
   1152c:	andeq	r1, r1, r8, lsr fp
   11530:	andeq	r1, r1, r4, lsl r8
   11534:			; <UNDEFINED> instruction: 0x000117bc
   11538:	muleq	r1, r4, r8
   1153c:	andeq	r1, r1, r8, lsr fp
   11540:	andeq	r1, r1, r8, lsr fp
   11544:	andeq	r1, r1, r8, lsr fp
   11548:	andeq	r1, r1, r8, lsr fp
   1154c:	andeq	r1, r1, r8, lsr fp
   11550:	andeq	r1, r1, r8, lsr fp
   11554:	andeq	r1, r1, r8, lsr fp
   11558:	andeq	r1, r1, r8, lsr fp
   1155c:	andeq	r1, r1, r8, lsr fp
   11560:	andeq	r1, r1, r8, lsr fp
   11564:	andeq	r1, r1, r8, lsr fp
   11568:	andeq	r1, r1, r8, lsr fp
   1156c:	andeq	r1, r1, r8, lsr fp
   11570:	andeq	r1, r1, r8, lsr fp
   11574:	andeq	r1, r1, r8, lsr fp
   11578:	andeq	r1, r1, r8, lsr fp
   1157c:	andeq	r1, r1, r8, lsr fp
   11580:	andeq	r1, r1, r8, lsr fp
   11584:	andeq	r1, r1, r8, lsr fp
   11588:	andeq	r1, r1, r8, lsr fp
   1158c:	andeq	r1, r1, r8, lsr fp
   11590:	andeq	r1, r1, r8, lsr fp
   11594:	andeq	r1, r1, r8, lsr fp
   11598:	andeq	r1, r1, r8, lsr fp
   1159c:	andeq	r1, r1, r8, lsr fp
   115a0:	andeq	r1, r1, r8, lsr fp
   115a4:	andeq	r1, r1, r8, lsr fp
   115a8:	andeq	r1, r1, r8, lsr fp
   115ac:	andeq	r1, r1, r8, lsr fp
   115b0:	andeq	r1, r1, r8, lsr fp
   115b4:	andeq	r1, r1, r8, lsr fp
   115b8:	andeq	r1, r1, r8, lsr fp
   115bc:	andeq	r1, r1, r8, lsr fp
   115c0:	andeq	r1, r1, r8, lsr fp
   115c4:	andeq	r1, r1, r8, lsr fp
   115c8:	andeq	r1, r1, r8, lsr fp
   115cc:	andeq	r1, r1, r8, lsr fp
   115d0:	andeq	r1, r1, r8, lsr fp
   115d4:	andeq	r1, r1, r8, lsr fp
   115d8:	andeq	r1, r1, r8, lsr fp
   115dc:	andeq	r1, r1, r8, lsr fp
   115e0:	andeq	r1, r1, r8, lsr fp
   115e4:	andeq	r1, r1, r8, lsr fp
   115e8:	andeq	r1, r1, r8, lsr fp
   115ec:	andeq	r1, r1, r8, lsr fp
   115f0:	andeq	r1, r1, r8, lsr fp
   115f4:	andeq	r1, r1, r8, lsr fp
   115f8:	andeq	r1, r1, r8, lsr fp
   115fc:	andeq	r1, r1, r8, lsr fp
   11600:	andeq	r1, r1, r8, lsr fp
   11604:	andeq	r1, r1, r8, lsr fp
   11608:	andeq	r1, r1, r8, lsr fp
   1160c:	andeq	r1, r1, r8, lsr fp
   11610:	andeq	r1, r1, r8, lsr fp
   11614:	andeq	r1, r1, r8, lsr fp
   11618:	andeq	r1, r1, r8, lsr fp
   1161c:	andeq	r1, r1, r8, lsr fp
   11620:	andeq	r1, r1, r8, lsr fp
   11624:	andeq	r1, r1, r8, lsr fp
   11628:	andeq	r1, r1, r8, lsr fp
   1162c:	andeq	r1, r1, r8, lsr fp
   11630:	andeq	r1, r1, r8, lsr fp
   11634:	andeq	r1, r1, r8, lsr fp
   11638:	andeq	r1, r1, r8, lsr fp
   1163c:	andeq	r1, r1, r8, lsr fp
   11640:	andeq	r1, r1, r8, lsr fp
   11644:	andeq	r1, r1, r8, lsr fp
   11648:	andeq	r1, r1, r8, lsr fp
   1164c:	andeq	r1, r1, r8, lsr fp
   11650:	andeq	r1, r1, r8, lsr fp
   11654:	andeq	r1, r1, r8, lsr fp
   11658:	andeq	r1, r1, r8, lsr fp
   1165c:	andeq	r1, r1, r8, lsr fp
   11660:	andeq	r1, r1, r8, lsr fp
   11664:	andeq	r1, r1, r8, lsr fp
   11668:	andeq	r1, r1, r8, lsr fp
   1166c:	andeq	r1, r1, r8, lsr fp
   11670:	andeq	r1, r1, r8, lsr fp
   11674:	andeq	r1, r1, r8, lsr fp
   11678:	andeq	r1, r1, r8, lsr fp
   1167c:	andeq	r1, r1, r8, lsr fp
   11680:	andeq	r1, r1, r8, lsr fp
   11684:	andeq	r1, r1, r8, lsr fp
   11688:	andeq	r1, r1, r8, lsr fp
   1168c:	andeq	r1, r1, r8, lsr fp
   11690:	andeq	r1, r1, r8, lsr fp
   11694:	andeq	r1, r1, r8, lsr fp
   11698:	andeq	r1, r1, r8, lsr fp
   1169c:	andeq	r1, r1, r8, lsr fp
   116a0:	andeq	r1, r1, r8, lsr fp
   116a4:	andeq	r1, r1, r8, lsr fp
   116a8:	andeq	r1, r1, r8, lsr fp
   116ac:	andeq	r1, r1, r8, lsr fp
   116b0:	andeq	r1, r1, r8, lsr fp
   116b4:	andeq	r1, r1, r8, lsr fp
   116b8:	andeq	r1, r1, r8, lsr fp
   116bc:	andeq	r1, r1, r8, lsr fp
   116c0:	andeq	r1, r1, r8, lsr fp
   116c4:	andeq	r1, r1, r8, lsr fp
   116c8:	andeq	r1, r1, r8, lsr fp
   116cc:	andeq	r1, r1, r8, lsr fp
   116d0:	andeq	r1, r1, r8, lsr fp
   116d4:	andeq	r1, r1, r8, lsr fp
   116d8:	andeq	r1, r1, r8, lsr fp
   116dc:	andeq	r1, r1, r8, lsr fp
   116e0:	andeq	r1, r1, r8, lsr fp
   116e4:	andeq	r1, r1, r8, lsr fp
   116e8:	andeq	r1, r1, r8, lsr fp
   116ec:	andeq	r1, r1, r8, lsr fp
   116f0:	andeq	r1, r1, r8, lsr fp
   116f4:	andeq	r1, r1, r8, lsr fp
   116f8:	andeq	r1, r1, r8, lsr fp
   116fc:	andeq	r1, r1, r8, lsr fp
   11700:	andeq	r1, r1, r8, lsr fp
   11704:	andeq	r1, r1, r8, lsr fp
   11708:	andeq	r1, r1, r8, lsr fp
   1170c:	andeq	r1, r1, r8, lsr fp
   11710:	andeq	r1, r1, r8, lsr fp
   11714:	andeq	r1, r1, r8, lsr fp
   11718:	andeq	r1, r1, r8, lsr fp
   1171c:	andeq	r1, r1, r8, lsr fp
   11720:	andeq	r1, r1, r8, lsr fp
   11724:	andeq	r1, r1, r8, lsr fp
   11728:	andeq	r1, r1, r8, lsr fp
   1172c:	andeq	r1, r1, r8, lsr fp
   11730:	andeq	r1, r1, r8, lsr fp
   11734:	andeq	r1, r1, r8, lsr fp
   11738:	andeq	r1, r1, r8, lsr fp
   1173c:	andeq	r1, r1, r8, lsr fp
   11740:	andeq	r1, r1, r8, lsr fp
   11744:	andeq	r1, r1, r8, lsr fp
   11748:	andeq	r1, r1, r8, lsr fp
   1174c:	andeq	r1, r1, r8, lsr fp
   11750:	andeq	r1, r1, r8, lsr fp
   11754:	andeq	r1, r1, r8, lsr fp
   11758:			; <UNDEFINED> instruction: 0x000117b0
   1175c:	andeq	r1, r1, r0, ror #14
   11760:	ldr	r3, [pc, #2692]	; 121ec <__assert_fail@plt+0xfe8>
   11764:	mov	r1, #1
   11768:	str	r1, [sp, #8]
   1176c:	ldr	r3, [r3]
   11770:	mov	r2, #4
   11774:	ldr	r0, [pc, #2676]	; 121f0 <__assert_fail@plt+0xfec>
   11778:	stm	sp, {r2, r3}
   1177c:	ldr	r3, [sp, #32]
   11780:	ldr	r2, [pc, #2668]	; 121f4 <__assert_fail@plt+0xff0>
   11784:	ldr	r1, [r5]
   11788:	bl	150a8 <__assert_fail@plt+0x3ea4>
   1178c:	ldr	r3, [pc, #2792]	; 1227c <__assert_fail@plt+0x1078>
   11790:	add	r0, r3, r0, lsl #2
   11794:	ldr	r3, [r0, #796]	; 0x31c
   11798:	cmp	r3, #0
   1179c:	beq	117a8 <__assert_fail@plt+0x5a4>
   117a0:	cmp	r3, #1
   117a4:	bne	11310 <__assert_fail@plt+0x10c>
   117a8:	strb	r3, [r4, #8]
   117ac:	b	11310 <__assert_fail@plt+0x10c>
   117b0:	mov	r3, #1
   117b4:	strb	r3, [r4, #156]	; 0x9c
   117b8:	b	11310 <__assert_fail@plt+0x10c>
   117bc:	ldr	r0, [r5]
   117c0:	cmp	r0, #0
   117c4:	beq	11b40 <__assert_fail@plt+0x93c>
   117c8:	ldr	r3, [pc, #2548]	; 121c4 <__assert_fail@plt+0xfc0>
   117cc:	mov	r1, #0
   117d0:	str	r3, [sp]
   117d4:	mov	r2, #10
   117d8:	add	r3, sp, #48	; 0x30
   117dc:	bl	18478 <__assert_fail@plt+0x7274>
   117e0:	subs	r1, r0, #0
   117e4:	bne	12808 <__assert_fail@plt+0x1604>
   117e8:	ldrd	r2, [sp, #48]	; 0x30
   117ec:	mov	r7, #0
   117f0:	mvn	r6, #0
   117f4:	cmp	r3, r7
   117f8:	cmpeq	r2, r6
   117fc:	bhi	12820 <__assert_fail@plt+0x161c>
   11800:	mov	r3, #1
   11804:	str	r2, [sp, #28]
   11808:	str	r3, [sp, #16]
   1180c:	mov	r6, r3
   11810:	b	11310 <__assert_fail@plt+0x10c>
   11814:	ldr	r3, [pc, #2524]	; 121f8 <__assert_fail@plt+0xff4>
   11818:	mov	r2, #0
   1181c:	mov	r6, #1
   11820:	strb	r2, [r3]
   11824:	b	11310 <__assert_fail@plt+0x10c>
   11828:	ldr	r0, [r5]
   1182c:	bl	13798 <__assert_fail@plt+0x2594>
   11830:	mov	r6, #1
   11834:	and	r9, r9, r0
   11838:	uxtb	r9, r9
   1183c:	b	11310 <__assert_fail@plt+0x10c>
   11840:	ldr	r0, [pc, #2484]	; 121fc <__assert_fail@plt+0xff8>
   11844:	bl	13798 <__assert_fail@plt+0x2594>
   11848:	and	r9, r9, r0
   1184c:	uxtb	r9, r9
   11850:	b	11310 <__assert_fail@plt+0x10c>
   11854:	ldr	r3, [pc, #2468]	; 12200 <__assert_fail@plt+0xffc>
   11858:	mov	r2, #0
   1185c:	str	r3, [sp]
   11860:	mov	r1, r2
   11864:	ldr	r3, [pc, #2456]	; 12204 <__assert_fail@plt+0x1000>
   11868:	ldr	r0, [r5]
   1186c:	bl	18478 <__assert_fail@plt+0x7274>
   11870:	cmp	r0, #0
   11874:	bne	12868 <__assert_fail@plt+0x1664>
   11878:	mov	r6, #1
   1187c:	b	11310 <__assert_fail@plt+0x10c>
   11880:	ldr	r0, [pc, #2432]	; 12208 <__assert_fail@plt+0x1004>
   11884:	bl	13798 <__assert_fail@plt+0x2594>
   11888:	and	r9, r9, r0
   1188c:	uxtb	r9, r9
   11890:	b	11310 <__assert_fail@plt+0x10c>
   11894:	ldr	r0, [pc, #2416]	; 1220c <__assert_fail@plt+0x1008>
   11898:	bl	13798 <__assert_fail@plt+0x2594>
   1189c:	and	r9, r9, r0
   118a0:	uxtb	r9, r9
   118a4:	b	11310 <__assert_fail@plt+0x10c>
   118a8:	ldr	r0, [pc, #2400]	; 12210 <__assert_fail@plt+0x100c>
   118ac:	bl	13798 <__assert_fail@plt+0x2594>
   118b0:	and	r9, r9, r0
   118b4:	uxtb	r9, r9
   118b8:	b	11310 <__assert_fail@plt+0x10c>
   118bc:	ldr	r0, [pc, #2384]	; 12214 <__assert_fail@plt+0x1010>
   118c0:	bl	13798 <__assert_fail@plt+0x2594>
   118c4:	and	r9, r9, r0
   118c8:	uxtb	r9, r9
   118cc:	b	11310 <__assert_fail@plt+0x10c>
   118d0:	ldr	r0, [pc, #2368]	; 12218 <__assert_fail@plt+0x1014>
   118d4:	bl	13798 <__assert_fail@plt+0x2594>
   118d8:	and	r9, r9, r0
   118dc:	uxtb	r9, r9
   118e0:	b	11310 <__assert_fail@plt+0x10c>
   118e4:	ldr	r0, [pc, #2352]	; 1221c <__assert_fail@plt+0x1018>
   118e8:	bl	13798 <__assert_fail@plt+0x2594>
   118ec:	and	r9, r9, r0
   118f0:	uxtb	r9, r9
   118f4:	b	11310 <__assert_fail@plt+0x10c>
   118f8:	ldr	r0, [pc, #2336]	; 12220 <__assert_fail@plt+0x101c>
   118fc:	bl	13798 <__assert_fail@plt+0x2594>
   11900:	and	r9, r9, r0
   11904:	uxtb	r9, r9
   11908:	b	11310 <__assert_fail@plt+0x10c>
   1190c:	ldr	r0, [r5]
   11910:	cmp	r0, #0
   11914:	moveq	r3, #3
   11918:	streq	r3, [r4, #152]	; 0x98
   1191c:	beq	1195c <__assert_fail@plt+0x758>
   11920:	ldr	r3, [pc, #2264]	; 12200 <__assert_fail@plt+0xffc>
   11924:	mov	r2, #0
   11928:	str	r3, [sp]
   1192c:	mov	r1, r2
   11930:	add	r3, sp, #48	; 0x30
   11934:	bl	18478 <__assert_fail@plt+0x7274>
   11938:	subs	r1, r0, #0
   1193c:	bne	12850 <__assert_fail@plt+0x164c>
   11940:	ldrd	r2, [sp, #48]	; 0x30
   11944:	mov	r7, #0
   11948:	mvn	r6, #0
   1194c:	cmp	r3, r7
   11950:	cmpeq	r2, r6
   11954:	bhi	12820 <__assert_fail@plt+0x161c>
   11958:	str	r2, [r4, #152]	; 0x98
   1195c:	mov	r3, #1
   11960:	strb	r3, [r4, #110]	; 0x6e
   11964:	mov	r3, #1
   11968:	mov	r6, r3
   1196c:	b	11310 <__assert_fail@plt+0x10c>
   11970:	ldr	r0, [pc, #2220]	; 12224 <__assert_fail@plt+0x1020>
   11974:	bl	13798 <__assert_fail@plt+0x2594>
   11978:	and	r9, r9, r0
   1197c:	uxtb	r9, r9
   11980:	b	11310 <__assert_fail@plt+0x10c>
   11984:	ldr	r0, [pc, #2204]	; 12228 <__assert_fail@plt+0x1024>
   11988:	bl	13798 <__assert_fail@plt+0x2594>
   1198c:	and	r9, r9, r0
   11990:	uxtb	r9, r9
   11994:	b	11310 <__assert_fail@plt+0x10c>
   11998:	ldr	r0, [pc, #2188]	; 1222c <__assert_fail@plt+0x1028>
   1199c:	bl	13798 <__assert_fail@plt+0x2594>
   119a0:	and	r9, r9, r0
   119a4:	uxtb	r9, r9
   119a8:	b	11310 <__assert_fail@plt+0x10c>
   119ac:	ldr	r3, [pc, #2124]	; 12200 <__assert_fail@plt+0xffc>
   119b0:	mov	r2, #0
   119b4:	mov	ip, #1
   119b8:	str	r3, [sp]
   119bc:	mov	r1, r2
   119c0:	ldr	r3, [pc, #2152]	; 12230 <__assert_fail@plt+0x102c>
   119c4:	ldr	r0, [r5]
   119c8:	strb	ip, [r4, #109]	; 0x6d
   119cc:	bl	18478 <__assert_fail@plt+0x7274>
   119d0:	cmp	r0, #0
   119d4:	beq	11878 <__assert_fail@plt+0x674>
   119d8:	ldr	r2, [r5]
   119dc:	ldr	r3, [pc, #2040]	; 121dc <__assert_fail@plt+0xfd8>
   119e0:	str	r2, [sp]
   119e4:	ldr	r1, [sp, #40]	; 0x28
   119e8:	mov	r2, #78	; 0x4e
   119ec:	bl	18330 <__assert_fail@plt+0x712c>
   119f0:	ldr	r0, [pc, #2108]	; 12234 <__assert_fail@plt+0x1030>
   119f4:	bl	13798 <__assert_fail@plt+0x2594>
   119f8:	and	r9, r9, r0
   119fc:	uxtb	r9, r9
   11a00:	b	11310 <__assert_fail@plt+0x10c>
   11a04:	ldr	r0, [pc, #2092]	; 12238 <__assert_fail@plt+0x1034>
   11a08:	bl	13798 <__assert_fail@plt+0x2594>
   11a0c:	and	r9, r9, r0
   11a10:	uxtb	r9, r9
   11a14:	b	11310 <__assert_fail@plt+0x10c>
   11a18:	ldr	r0, [pc, #2076]	; 1223c <__assert_fail@plt+0x1038>
   11a1c:	bl	13798 <__assert_fail@plt+0x2594>
   11a20:	and	r9, r9, r0
   11a24:	uxtb	r9, r9
   11a28:	b	11310 <__assert_fail@plt+0x10c>
   11a2c:	ldr	r3, [r5]
   11a30:	ldrb	r3, [r3]
   11a34:	cmp	r3, #110	; 0x6e
   11a38:	beq	11dac <__assert_fail@plt+0xba8>
   11a3c:	bls	11b58 <__assert_fail@plt+0x954>
   11a40:	cmp	r3, #111	; 0x6f
   11a44:	beq	11da4 <__assert_fail@plt+0xba0>
   11a48:	cmp	r3, #120	; 0x78
   11a4c:	bne	11d7c <__assert_fail@plt+0xb78>
   11a50:	mov	r2, #16
   11a54:	mov	r3, #6
   11a58:	ldr	r1, [pc, #1924]	; 121e4 <__assert_fail@plt+0xfe0>
   11a5c:	str	r2, [r4, #4]
   11a60:	str	r1, [r4, #120]	; 0x78
   11a64:	str	r3, [r4]
   11a68:	b	11878 <__assert_fail@plt+0x674>
   11a6c:	mov	r0, #0
   11a70:	bl	149bc <__assert_fail@plt+0x37b8>
   11a74:	ldr	r1, [pc, #2092]	; 122a8 <__assert_fail@plt+0x10a4>
   11a78:	ldr	r2, [pc, #1984]	; 12240 <__assert_fail@plt+0x103c>
   11a7c:	ldr	r3, [pc, #1984]	; 12244 <__assert_fail@plt+0x1040>
   11a80:	mov	r4, #0
   11a84:	ldr	r0, [r1]
   11a88:	ldr	r3, [r3]
   11a8c:	ldr	r1, [pc, #1972]	; 12248 <__assert_fail@plt+0x1044>
   11a90:	stm	sp, {r2, r4}
   11a94:	ldr	r2, [pc, #1968]	; 1224c <__assert_fail@plt+0x1048>
   11a98:	bl	17b5c <__assert_fail@plt+0x6958>
   11a9c:	mov	r0, r4
   11aa0:	bl	110b4 <exit@plt>
   11aa4:	ldrb	r2, [r4, #156]	; 0x9c
   11aa8:	cmp	r2, #0
   11aac:	moveq	r8, #3
   11ab0:	beq	11c08 <__assert_fail@plt+0xa04>
   11ab4:	add	r3, r3, #1
   11ab8:	ldr	r1, [sp, #24]
   11abc:	ldr	r0, [sl, r3, lsl #2]
   11ac0:	bl	12ae4 <__assert_fail@plt+0x18e0>
   11ac4:	cmp	r0, #0
   11ac8:	bne	1276c <__assert_fail@plt+0x1568>
   11acc:	mov	r8, #3
   11ad0:	ldrb	r3, [r4, #156]	; 0x9c
   11ad4:	cmp	r3, #0
   11ad8:	beq	11c08 <__assert_fail@plt+0xa04>
   11adc:	mov	r2, #5
   11ae0:	ldr	r1, [pc, #1896]	; 12250 <__assert_fail@plt+0x104c>
   11ae4:	mov	r0, #0
   11ae8:	bl	10fc4 <dcgettext@plt>
   11aec:	ldr	r3, [r5]
   11af0:	add	r3, r3, #1
   11af4:	mov	r4, r0
   11af8:	ldr	r0, [sl, r3, lsl #2]
   11afc:	bl	17720 <__assert_fail@plt+0x651c>
   11b00:	mov	r1, #0
   11b04:	mov	r2, r4
   11b08:	mov	r3, r0
   11b0c:	mov	r0, r1
   11b10:	bl	1103c <error@plt>
   11b14:	mov	r2, #5
   11b18:	ldr	r1, [pc, #1844]	; 12254 <__assert_fail@plt+0x1050>
   11b1c:	mov	r0, #0
   11b20:	bl	10fc4 <dcgettext@plt>
   11b24:	mov	r1, #0
   11b28:	ldr	r2, [pc, #1832]	; 12258 <__assert_fail@plt+0x1054>
   11b2c:	mov	r3, r0
   11b30:	mov	r0, r1
   11b34:	bl	1103c <error@plt>
   11b38:	mov	r0, #1
   11b3c:	bl	149bc <__assert_fail@plt+0x37b8>
   11b40:	mov	r3, #1
   11b44:	str	r3, [sp, #16]
   11b48:	mov	r6, r3
   11b4c:	mov	r3, #32
   11b50:	str	r3, [sp, #28]
   11b54:	b	11310 <__assert_fail@plt+0x10c>
   11b58:	cmp	r3, #100	; 0x64
   11b5c:	bne	11d7c <__assert_fail@plt+0xb78>
   11b60:	mov	r2, #10
   11b64:	mov	r3, #7
   11b68:	b	11a58 <__assert_fail@plt+0x854>
   11b6c:	mov	r3, fp
   11b70:	cmp	r9, #0
   11b74:	mov	fp, sl
   11b78:	mov	sl, r3
   11b7c:	beq	11d70 <__assert_fail@plt+0xb6c>
   11b80:	ldrb	r3, [r4, #110]	; 0x6e
   11b84:	cmp	r3, #0
   11b88:	beq	11bb8 <__assert_fail@plt+0x9b4>
   11b8c:	ldr	r3, [r4, #12]
   11b90:	cmp	r3, #0
   11b94:	movne	r2, #5
   11b98:	ldrne	r1, [pc, #1724]	; 1225c <__assert_fail@plt+0x1058>
   11b9c:	beq	11bb8 <__assert_fail@plt+0x9b4>
   11ba0:	mov	r0, #0
   11ba4:	bl	10fc4 <dcgettext@plt>
   11ba8:	mov	r1, #0
   11bac:	mov	r2, r0
   11bb0:	mov	r0, #1
   11bb4:	bl	1103c <error@plt>
   11bb8:	ldr	r5, [pc, #1696]	; 12260 <__assert_fail@plt+0x105c>
   11bbc:	cmp	r6, #0
   11bc0:	ldr	r3, [r5]
   11bc4:	sub	r8, fp, r3
   11bc8:	beq	11dc4 <__assert_fail@plt+0xbc0>
   11bcc:	ldrb	r2, [r4, #156]	; 0x9c
   11bd0:	cmp	r2, #0
   11bd4:	beq	11c08 <__assert_fail@plt+0xa04>
   11bd8:	cmp	r8, #2
   11bdc:	beq	12418 <__assert_fail@plt+0x1214>
   11be0:	cmp	r8, #3
   11be4:	beq	11aa4 <__assert_fail@plt+0x8a0>
   11be8:	cmp	r8, #1
   11bec:	beq	126dc <__assert_fail@plt+0x14d8>
   11bf0:	ldrb	r3, [r4, #156]	; 0x9c
   11bf4:	cmp	r8, #1
   11bf8:	movle	r3, #0
   11bfc:	andgt	r3, r3, #1
   11c00:	cmp	r3, #0
   11c04:	bne	11adc <__assert_fail@plt+0x8d8>
   11c08:	mov	r2, #0
   11c0c:	mov	r3, #0
   11c10:	mov	r6, r2
   11c14:	mov	r7, r3
   11c18:	ldrb	r3, [r4, #157]	; 0x9d
   11c1c:	cmp	r3, #0
   11c20:	beq	11c50 <__assert_fail@plt+0xa4c>
   11c24:	ldr	r3, [pc, #1592]	; 12264 <__assert_fail@plt+0x1060>
   11c28:	ldr	r2, [r4, #120]	; 0x78
   11c2c:	cmp	r2, r3
   11c30:	moveq	r2, #8
   11c34:	ldreq	r3, [pc, #1580]	; 12268 <__assert_fail@plt+0x1064>
   11c38:	ldrne	r3, [pc, #1580]	; 1226c <__assert_fail@plt+0x1068>
   11c3c:	streq	r3, [r4, #120]	; 0x78
   11c40:	moveq	r3, #7
   11c44:	streq	r2, [r4, #4]
   11c48:	streq	r3, [r4]
   11c4c:	strne	r3, [r4, #120]	; 0x78
   11c50:	ldrb	r3, [r4, #109]	; 0x6d
   11c54:	cmp	r3, #0
   11c58:	beq	11c7c <__assert_fail@plt+0xa78>
   11c5c:	ldrd	r0, [r4, #136]	; 0x88
   11c60:	ldrd	r2, [r4, #144]	; 0x90
   11c64:	adds	r2, r2, r0
   11c68:	adc	r3, r3, r1
   11c6c:	cmp	r1, r3
   11c70:	cmpeq	r0, r2
   11c74:	strd	r2, [r4, #160]	; 0xa0
   11c78:	bhi	127fc <__assert_fail@plt+0x15f8>
   11c7c:	ldr	r3, [r4, #12]
   11c80:	cmp	r3, #0
   11c84:	beq	123c0 <__assert_fail@plt+0x11bc>
   11c88:	cmp	r8, #0
   11c8c:	ldrgt	r3, [r5]
   11c90:	ldrle	r3, [pc, #1496]	; 12270 <__assert_fail@plt+0x106c>
   11c94:	addgt	sl, sl, r3, lsl #2
   11c98:	strle	r3, [r4, #96]	; 0x60
   11c9c:	strgt	sl, [r4, #96]	; 0x60
   11ca0:	bl	140e4 <__assert_fail@plt+0x2ee0>
   11ca4:	ldr	r3, [r4, #104]	; 0x68
   11ca8:	cmp	r3, #0
   11cac:	mov	r8, r0
   11cb0:	mov	r5, r0
   11cb4:	beq	11ee0 <__assert_fail@plt+0xcdc>
   11cb8:	ldrd	r0, [r4, #136]	; 0x88
   11cbc:	bl	14310 <__assert_fail@plt+0x310c>
   11cc0:	ldr	r3, [r4, #104]	; 0x68
   11cc4:	cmp	r3, #0
   11cc8:	and	r0, r0, r8
   11ccc:	uxtb	r5, r0
   11cd0:	str	r5, [sp, #32]
   11cd4:	beq	11ee0 <__assert_fail@plt+0xcdc>
   11cd8:	ldrb	r3, [r4, #157]	; 0x9d
   11cdc:	cmp	r3, #0
   11ce0:	moveq	r2, #0
   11ce4:	moveq	r3, #0
   11ce8:	beq	11d00 <__assert_fail@plt+0xafc>
   11cec:	ldrd	r2, [r4, #136]	; 0x88
   11cf0:	subs	r0, r6, r2
   11cf4:	sbc	r1, r7, r3
   11cf8:	mov	r2, r0
   11cfc:	mov	r3, r1
   11d00:	ldr	r8, [r4, #12]
   11d04:	ldr	fp, [r4, #20]
   11d08:	mov	r5, #0
   11d0c:	mov	r6, #1
   11d10:	mov	r7, r9
   11d14:	strd	r2, [r4, #128]	; 0x80
   11d18:	cmp	r5, r8
   11d1c:	beq	11ef8 <__assert_fail@plt+0xcf4>
   11d20:	add	r3, fp, r5, lsl #5
   11d24:	ldr	r2, [pc, #1360]	; 1227c <__assert_fail@plt+0x1078>
   11d28:	ldr	r3, [r3, #4]
   11d2c:	mov	r0, r6
   11d30:	add	r3, r2, r3, lsl #2
   11d34:	ldr	sl, [r3, #460]	; 0x1cc
   11d38:	mov	r9, sl
   11d3c:	b	11d44 <__assert_fail@plt+0xb40>
   11d40:	mov	r9, r1
   11d44:	mov	r1, r9
   11d48:	bl	18f20 <__assert_fail@plt+0x7d1c>
   11d4c:	mov	r0, r9
   11d50:	cmp	r1, #0
   11d54:	bne	11d40 <__assert_fail@plt+0xb3c>
   11d58:	mov	r1, r9
   11d5c:	mov	r0, sl
   11d60:	bl	18d34 <__assert_fail@plt+0x7b30>
   11d64:	add	r5, r5, #1
   11d68:	mul	r6, r6, r0
   11d6c:	b	11d18 <__assert_fail@plt+0xb14>
   11d70:	mov	r0, #1
   11d74:	add	sp, sp, #60	; 0x3c
   11d78:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   11d7c:	mov	r2, #5
   11d80:	ldr	r1, [pc, #1260]	; 12274 <__assert_fail@plt+0x1070>
   11d84:	mov	r0, #0
   11d88:	bl	10fc4 <dcgettext@plt>
   11d8c:	ldr	r3, [r5]
   11d90:	mov	r1, #0
   11d94:	ldrb	r3, [r3]
   11d98:	mov	r2, r0
   11d9c:	mov	r0, #1
   11da0:	bl	1103c <error@plt>
   11da4:	mov	r2, #8
   11da8:	b	11b64 <__assert_fail@plt+0x960>
   11dac:	ldr	r2, [pc, #1200]	; 12264 <__assert_fail@plt+0x1060>
   11db0:	mov	r3, #0
   11db4:	str	r2, [r4, #120]	; 0x78
   11db8:	str	r3, [r4]
   11dbc:	mov	r6, #1
   11dc0:	b	11310 <__assert_fail@plt+0x10c>
   11dc4:	cmp	r8, #2
   11dc8:	beq	12418 <__assert_fail@plt+0x1214>
   11dcc:	cmp	r8, #3
   11dd0:	beq	11aa4 <__assert_fail@plt+0x8a0>
   11dd4:	cmp	r8, #1
   11dd8:	bne	11bf0 <__assert_fail@plt+0x9ec>
   11ddc:	ldrb	r2, [r4, #156]	; 0x9c
   11de0:	cmp	r2, #0
   11de4:	bne	126dc <__assert_fail@plt+0x14d8>
   11de8:	ldr	r2, [sl, r3, lsl #2]
   11dec:	ldrb	r2, [r2]
   11df0:	cmp	r2, #43	; 0x2b
   11df4:	beq	126dc <__assert_fail@plt+0x14d8>
   11df8:	mov	r2, #0
   11dfc:	mov	r3, #0
   11e00:	mov	r6, r2
   11e04:	mov	r7, r3
   11e08:	mov	r8, #1
   11e0c:	b	11c18 <__assert_fail@plt+0xa14>
   11e10:	ldr	r6, [sp, #36]	; 0x24
   11e14:	sub	r0, sl, #1
   11e18:	add	r3, sp, #56	; 0x38
   11e1c:	mov	r1, fp
   11e20:	add	r0, r0, fp
   11e24:	add	r6, r3, r6
   11e28:	bl	18d34 <__assert_fail@plt+0x7b30>
   11e2c:	ldr	r6, [r6, #-8]
   11e30:	ldr	r5, [sp, #24]
   11e34:	mov	r1, #0
   11e38:	ldr	r9, [sp, #28]
   11e3c:	mul	r2, fp, r0
   11e40:	add	r0, r6, sl
   11e44:	sub	r2, r2, sl
   11e48:	bl	11108 <memset@plt>
   11e4c:	eor	r3, r5, #1
   11e50:	str	r6, [sp]
   11e54:	add	r2, sp, #56	; 0x38
   11e58:	ldrd	r6, [sp, #16]
   11e5c:	add	r3, r2, r3, lsl #2
   11e60:	mov	r2, sl
   11e64:	ldr	r3, [r3, #-8]
   11e68:	mov	r0, r6
   11e6c:	mov	r1, r7
   11e70:	bl	14658 <__assert_fail@plt+0x3454>
   11e74:	ldr	r3, [sp, #40]	; 0x28
   11e78:	adds	r0, r6, r3
   11e7c:	adc	r1, r7, #0
   11e80:	strd	r0, [sp, #16]
   11e84:	ldrd	r6, [sp, #16]
   11e88:	ldr	r3, [r4, #120]	; 0x78
   11e8c:	mov	r2, #10
   11e90:	mov	r0, r6
   11e94:	mov	r1, r7
   11e98:	blx	r3
   11e9c:	ldrb	r3, [r4, #109]	; 0x6d
   11ea0:	cmp	r3, #0
   11ea4:	beq	11ec8 <__assert_fail@plt+0xcc4>
   11ea8:	ldrd	r2, [r4, #160]	; 0xa0
   11eac:	cmp	r7, r3
   11eb0:	cmpeq	r6, r2
   11eb4:	bcc	11ec8 <__assert_fail@plt+0xcc4>
   11eb8:	mov	r0, #0
   11ebc:	bl	14210 <__assert_fail@plt+0x300c>
   11ec0:	and	r9, r9, r0
   11ec4:	uxtb	r9, r9
   11ec8:	ldr	r0, [sp, #48]	; 0x30
   11ecc:	bl	154d0 <__assert_fail@plt+0x42cc>
   11ed0:	mov	r0, r9
   11ed4:	ldr	r3, [sp, #32]
   11ed8:	and	r3, r3, r0
   11edc:	and	r5, r3, #1
   11ee0:	ldrb	r3, [r4, #108]	; 0x6c
   11ee4:	cmp	r3, #0
   11ee8:	bne	123cc <__assert_fail@plt+0x11c8>
   11eec:	eor	r3, r5, #1
   11ef0:	uxtb	r0, r3
   11ef4:	b	11d74 <__assert_fail@plt+0xb70>
   11ef8:	ldr	r3, [sp, #16]
   11efc:	mov	r9, r7
   11f00:	cmp	r3, #0
   11f04:	beq	12160 <__assert_fail@plt+0xf5c>
   11f08:	ldr	r5, [sp, #28]
   11f0c:	cmp	r5, #0
   11f10:	beq	11f2c <__assert_fail@plt+0xd28>
   11f14:	mov	r1, r6
   11f18:	mov	r0, r5
   11f1c:	bl	18f20 <__assert_fail@plt+0x7d1c>
   11f20:	cmp	r1, #0
   11f24:	streq	r5, [r4, #112]	; 0x70
   11f28:	beq	11f58 <__assert_fail@plt+0xd54>
   11f2c:	mov	r2, #5
   11f30:	ldr	r1, [pc, #832]	; 12278 <__assert_fail@plt+0x1074>
   11f34:	mov	r0, #0
   11f38:	bl	10fc4 <dcgettext@plt>
   11f3c:	mov	r1, #0
   11f40:	str	r6, [sp]
   11f44:	ldr	r3, [sp, #28]
   11f48:	mov	r2, r0
   11f4c:	mov	r0, r1
   11f50:	bl	1103c <error@plt>
   11f54:	str	r6, [r4, #112]	; 0x70
   11f58:	ldr	r5, [r4, #20]
   11f5c:	ldr	r3, [r4, #112]	; 0x70
   11f60:	add	r5, r5, #4
   11f64:	mov	r8, #0
   11f68:	mov	fp, r5
   11f6c:	str	r5, [sp, #16]
   11f70:	mov	r6, r8
   11f74:	ldr	sl, [r4, #12]
   11f78:	mov	r7, r3
   11f7c:	mov	r5, r3
   11f80:	b	11fb4 <__assert_fail@plt+0xdb0>
   11f84:	ldr	r2, [fp, #-32]	; 0xffffffe0
   11f88:	ldr	r3, [pc, #748]	; 1227c <__assert_fail@plt+0x1078>
   11f8c:	mov	r0, r5
   11f90:	add	r2, r3, r2, lsl #2
   11f94:	add	r8, r8, #1
   11f98:	ldr	r1, [r2, #460]	; 0x1cc
   11f9c:	bl	18d34 <__assert_fail@plt+0x7b30>
   11fa0:	ldr	r2, [fp, #-12]
   11fa4:	add	r2, r2, #1
   11fa8:	mul	r0, r2, r0
   11fac:	cmp	r6, r0
   11fb0:	movcc	r6, r0
   11fb4:	cmp	r8, sl
   11fb8:	add	fp, fp, #32
   11fbc:	bne	11f84 <__assert_fail@plt+0xd80>
   11fc0:	ldr	r5, [sp, #16]
   11fc4:	mov	r3, r6
   11fc8:	mov	sl, #0
   11fcc:	mov	r6, r8
   11fd0:	str	r9, [sp, #16]
   11fd4:	mov	r8, r3
   11fd8:	mov	r9, sl
   11fdc:	ldr	fp, [pc, #664]	; 1227c <__assert_fail@plt+0x1078>
   11fe0:	mov	sl, r5
   11fe4:	mov	r5, r7
   11fe8:	b	12014 <__assert_fail@plt+0xe10>
   11fec:	ldr	r3, [sl, #-32]	; 0xffffffe0
   11ff0:	mov	r0, r5
   11ff4:	add	r9, r9, #1
   11ff8:	add	r3, fp, r3, lsl #2
   11ffc:	ldr	r1, [r3, #460]	; 0x1cc
   12000:	bl	18d34 <__assert_fail@plt+0x7b30>
   12004:	ldr	r3, [sl, #-12]
   12008:	mul	r3, r3, r0
   1200c:	sub	r3, r8, r3
   12010:	str	r3, [sl, #-8]
   12014:	cmp	r6, r9
   12018:	add	sl, sl, #32
   1201c:	bne	11fec <__assert_fail@plt+0xde8>
   12020:	ldrb	r6, [r4, #110]	; 0x6e
   12024:	ldr	r9, [sp, #16]
   12028:	cmp	r6, #0
   1202c:	beq	12184 <__assert_fail@plt+0xf80>
   12030:	ldr	r3, [r4, #152]	; 0x98
   12034:	cmp	r3, #100	; 0x64
   12038:	movcc	r3, #100	; 0x64
   1203c:	mov	r0, r3
   12040:	str	r3, [sp, #40]	; 0x28
   12044:	bl	17c58 <__assert_fail@plt+0x6a54>
   12048:	ldrd	r8, [r4, #136]	; 0x88
   1204c:	mov	fp, r0
   12050:	ldrb	r5, [r4, #109]	; 0x6d
   12054:	cmp	r5, #0
   12058:	beq	120d0 <__assert_fail@plt+0xecc>
   1205c:	ldrd	r2, [r4, #160]	; 0xa0
   12060:	ldr	r0, [r4, #152]	; 0x98
   12064:	mov	r1, #0
   12068:	cmp	r1, r3
   1206c:	cmpeq	r0, r2
   12070:	bhi	127bc <__assert_fail@plt+0x15b8>
   12074:	subs	r2, r2, r0
   12078:	sbc	r3, r3, r1
   1207c:	cmp	r3, r9
   12080:	cmpeq	r2, r8
   12084:	bls	127bc <__assert_fail@plt+0x15b8>
   12088:	mov	r5, #0
   1208c:	b	120d0 <__assert_fail@plt+0xecc>
   12090:	add	r0, sp, #48	; 0x30
   12094:	bl	145e0 <__assert_fail@plt+0x33dc>
   12098:	ldr	sl, [sp, #48]	; 0x30
   1209c:	adds	r8, r8, #1
   120a0:	adc	r9, r9, #0
   120a4:	cmp	sl, #0
   120a8:	and	r6, r6, r0
   120ac:	blt	12408 <__assert_fail@plt+0x1204>
   120b0:	bl	110a8 <__ctype_b_loc@plt>
   120b4:	lsl	r3, sl, #1
   120b8:	ldr	r2, [r0]
   120bc:	ldrh	r3, [r2, r3]
   120c0:	tst	r3, #16384	; 0x4000
   120c4:	beq	12050 <__assert_fail@plt+0xe4c>
   120c8:	strb	sl, [fp, r5]
   120cc:	add	r5, r5, #1
   120d0:	ldr	r3, [r4, #152]	; 0x98
   120d4:	cmp	r5, r3
   120d8:	bcc	12090 <__assert_fail@plt+0xe8c>
   120dc:	b	12134 <__assert_fail@plt+0xf30>
   120e0:	mov	r0, fp
   120e4:	ldr	r1, [sp, #24]
   120e8:	bl	17ddc <__assert_fail@plt+0x6bd8>
   120ec:	mov	fp, r0
   120f0:	add	r0, sp, #48	; 0x30
   120f4:	bl	145e0 <__assert_fail@plt+0x33dc>
   120f8:	ldr	sl, [sp, #48]	; 0x30
   120fc:	adds	r8, r8, #1
   12100:	adc	r9, r9, #0
   12104:	cmp	sl, #0
   12108:	and	r6, r6, r0
   1210c:	blt	12408 <__assert_fail@plt+0x1204>
   12110:	beq	12550 <__assert_fail@plt+0x134c>
   12114:	bl	110a8 <__ctype_b_loc@plt>
   12118:	lsl	r3, sl, #1
   1211c:	ldr	r2, [r0]
   12120:	ldrh	r3, [r2, r3]
   12124:	tst	r3, #16384	; 0x4000
   12128:	beq	12050 <__assert_fail@plt+0xe4c>
   1212c:	strb	sl, [fp, r5]
   12130:	add	r5, r5, #1
   12134:	ldrb	r3, [r4, #109]	; 0x6d
   12138:	cmp	r3, #0
   1213c:	beq	12150 <__assert_fail@plt+0xf4c>
   12140:	ldrd	r2, [r4, #160]	; 0xa0
   12144:	cmp	r9, r3
   12148:	cmpeq	r8, r2
   1214c:	bcs	12550 <__assert_fail@plt+0x134c>
   12150:	ldr	r3, [sp, #40]	; 0x28
   12154:	cmp	r3, r5
   12158:	bne	120f0 <__assert_fail@plt+0xeec>
   1215c:	b	120e0 <__assert_fail@plt+0xedc>
   12160:	cmp	r6, #15
   12164:	strgt	r6, [r4, #112]	; 0x70
   12168:	bgt	11f58 <__assert_fail@plt+0xd54>
   1216c:	mov	r1, r6
   12170:	mov	r0, #16
   12174:	bl	18f40 <__assert_fail@plt+0x7d3c>
   12178:	mul	r0, r6, r0
   1217c:	str	r0, [r4, #112]	; 0x70
   12180:	b	11f58 <__assert_fail@plt+0xd54>
   12184:	mov	r1, r7
   12188:	mov	r0, #2
   1218c:	bl	17d40 <__assert_fail@plt+0x6b3c>
   12190:	ldr	r3, [r4, #112]	; 0x70
   12194:	ldrb	r5, [r4, #109]	; 0x6d
   12198:	cmp	r5, #0
   1219c:	str	r0, [sp, #48]	; 0x30
   121a0:	add	r0, r0, r3
   121a4:	ldrd	r2, [r4, #136]	; 0x88
   121a8:	str	r0, [sp, #52]	; 0x34
   121ac:	strd	r2, [sp, #16]
   121b0:	bne	1244c <__assert_fail@plt+0x1248>
   121b4:	mov	r6, r5
   121b8:	mov	sl, r2
   121bc:	mov	fp, r3
   121c0:	b	12300 <__assert_fail@plt+0x10fc>
   121c4:	andeq	sl, r1, r0, asr #8
   121c8:	andeq	sl, r1, ip, ror #14
   121cc:	andeq	sl, r1, r4, asr #13
   121d0:	andeq	r5, r1, r0, lsr #3
   121d4:	andeq	ip, r2, r4, lsr #3
   121d8:	muleq	r2, r0, r1
   121dc:	andeq	r9, r1, r4, lsr #11
   121e0:	andeq	ip, r2, r8, lsl #3
   121e4:	andeq	r2, r1, ip, lsr #19
   121e8:	andeq	r9, r1, r4, ror #12
   121ec:	andeq	ip, r2, r0, lsr #2
   121f0:	ldrdeq	sl, [r1], -ip
   121f4:	andeq	r9, r1, r0, lsr #13
   121f8:	andeq	ip, r2, r8, lsl r1
   121fc:	andeq	sl, r1, r4, lsl r8
   12200:	andeq	r9, r1, r8, lsl #13
   12204:	andeq	ip, r2, r8, lsl r2
   12208:	andeq	sl, r1, r4, lsl #16
   1220c:	andeq	sl, r1, r8, lsl r8
   12210:	strdeq	sl, [r1], -ip
   12214:	strdeq	sl, [r1], -r4
   12218:	andeq	sl, r1, r0, ror pc
   1221c:	andeq	sl, r1, ip, ror #15
   12220:	andeq	sl, r1, r8, ror #15
   12224:	andeq	sl, r1, ip, lsl #16
   12228:	andeq	sl, r1, r8, lsl #16
   1222c:	andeq	sl, r1, r0, lsl #16
   12230:	andeq	ip, r2, r0, lsr #4
   12234:	strdeq	sl, [r1], -r8
   12238:	strdeq	sl, [r1], -r0
   1223c:	andeq	sl, r1, r0, lsl r8
   12240:	andeq	sl, r1, ip, lsl r8
   12244:	andeq	ip, r2, ip, lsl r1
   12248:	andeq	r9, r1, ip, lsl #18
   1224c:	andeq	sl, r1, r0, asr #13
   12250:	andeq	sl, r1, ip, asr r8
   12254:	andeq	sl, r1, r0, ror r8
   12258:	andeq	sl, r1, r4, lsl #21
   1225c:	andeq	sl, r1, ip, lsr #16
   12260:	andeq	ip, r2, r0, ror r1
   12264:	andeq	r2, r1, r8, lsr #19
   12268:	strdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   1226c:	andeq	r4, r1, r4, lsl #19
   12270:	andeq	r9, r1, ip, lsr #13
   12274:	andeq	sl, r1, r4, lsl #15
   12278:	andeq	sl, r1, ip, asr #17
   1227c:	andeq	r9, r1, ip, ror r3
   12280:	andeq	sl, r1, r8, asr #17
   12284:	andeq	ip, r2, r0, lsl #3
   12288:	muleq	r1, ip, r8
   1228c:	andeq	r9, r1, ip, lsl #17
   12290:	andeq	r9, r1, r4, lsl #17
   12294:	muleq	r1, r4, r8
   12298:	andeq	r9, r1, r8, lsl #17
   1229c:	muleq	r1, r0, r8
   122a0:	andeq	r9, r1, r0, lsl #17
   122a4:	andeq	r9, r1, ip, ror r8
   122a8:	andeq	ip, r2, r4, lsl #3
   122ac:	andeq	r0, r0, sl, lsl #11
   122b0:	andeq	r0, r0, ip, ror r5
   122b4:	strdeq	sl, [r1], -ip
   122b8:	andeq	r9, r1, r8, lsl #14
   122bc:			; <UNDEFINED> instruction: 0x000196b4
   122c0:	andeq	sl, r1, r0, lsr #17
   122c4:	andeq	sl, r1, ip, asr #15
   122c8:	andeq	r9, r1, r4, lsr #11
   122cc:	bne	127d4 <__assert_fail@plt+0x15d0>
   122d0:	eor	r5, r5, #1
   122d4:	add	r3, sp, #56	; 0x38
   122d8:	lsl	r6, r5, #2
   122dc:	add	r3, r3, r6
   122e0:	str	r8, [sp]
   122e4:	mov	r0, sl
   122e8:	ldr	r3, [r3, #-8]
   122ec:	mov	r1, fp
   122f0:	bl	14658 <__assert_fail@plt+0x3454>
   122f4:	ldr	r3, [sp, #40]	; 0x28
   122f8:	adds	sl, sl, r3
   122fc:	adc	fp, fp, #0
   12300:	add	r3, sp, #56	; 0x38
   12304:	add	r3, r3, r6
   12308:	ldr	r2, [sp, #24]
   1230c:	ldr	r8, [r3, #-8]
   12310:	ldr	r0, [r4, #112]	; 0x70
   12314:	mov	r1, r8
   12318:	bl	14510 <__assert_fail@plt+0x330c>
   1231c:	ldr	r2, [sp, #40]	; 0x28
   12320:	ldr	r3, [r4, #112]	; 0x70
   12324:	cmp	r2, r3
   12328:	and	r9, r9, r0
   1232c:	uxtb	r9, r9
   12330:	bcs	122cc <__assert_fail@plt+0x10c8>
   12334:	strd	sl, [sp, #16]
   12338:	mov	sl, r2
   1233c:	cmp	sl, #0
   12340:	beq	11e84 <__assert_fail@plt+0xc80>
   12344:	ldr	r3, [r4, #12]
   12348:	ldr	r2, [r4, #20]
   1234c:	str	r9, [sp, #28]
   12350:	mov	r7, #0
   12354:	mov	fp, #1
   12358:	mov	r8, r3
   1235c:	mov	r9, r2
   12360:	str	r5, [sp, #24]
   12364:	str	r6, [sp, #36]	; 0x24
   12368:	cmp	r7, r8
   1236c:	beq	11e10 <__assert_fail@plt+0xc0c>
   12370:	add	r3, r9, r7, lsl #5
   12374:	ldr	r2, [pc, #-256]	; 1227c <__assert_fail@plt+0x1078>
   12378:	ldr	r3, [r3, #4]
   1237c:	mov	r0, fp
   12380:	add	r3, r2, r3, lsl #2
   12384:	ldr	r5, [r3, #460]	; 0x1cc
   12388:	mov	r6, r5
   1238c:	b	12394 <__assert_fail@plt+0x1190>
   12390:	mov	r6, r1
   12394:	mov	r1, r6
   12398:	bl	18f20 <__assert_fail@plt+0x7d1c>
   1239c:	mov	r0, r6
   123a0:	cmp	r1, #0
   123a4:	bne	12390 <__assert_fail@plt+0x118c>
   123a8:	mov	r1, r6
   123ac:	mov	r0, r5
   123b0:	bl	18d34 <__assert_fail@plt+0x7b30>
   123b4:	add	r7, r7, #1
   123b8:	mul	fp, fp, r0
   123bc:	b	12368 <__assert_fail@plt+0x1164>
   123c0:	ldr	r0, [pc, #-328]	; 12280 <__assert_fail@plt+0x107c>
   123c4:	bl	13798 <__assert_fail@plt+0x2594>
   123c8:	b	11c88 <__assert_fail@plt+0xa84>
   123cc:	ldr	r3, [pc, #-336]	; 12284 <__assert_fail@plt+0x1080>
   123d0:	ldr	r0, [r3]
   123d4:	bl	153d0 <__assert_fail@plt+0x41cc>
   123d8:	cmn	r0, #1
   123dc:	bne	11eec <__assert_fail@plt+0xce8>
   123e0:	bl	110d8 <__errno_location@plt>
   123e4:	mov	r2, #5
   123e8:	ldr	r1, [pc, #-360]	; 12288 <__assert_fail@plt+0x1084>
   123ec:	ldr	r4, [r0]
   123f0:	mov	r0, #0
   123f4:	bl	10fc4 <dcgettext@plt>
   123f8:	mov	r1, r4
   123fc:	mov	r2, r0
   12400:	mov	r0, #1
   12404:	bl	1103c <error@plt>
   12408:	mov	r0, fp
   1240c:	bl	154d0 <__assert_fail@plt+0x42cc>
   12410:	mov	r0, r6
   12414:	b	11ed4 <__assert_fail@plt+0xcd0>
   12418:	ldrb	r2, [r4, #156]	; 0x9c
   1241c:	add	r3, r3, #1
   12420:	cmp	r2, #0
   12424:	bne	124fc <__assert_fail@plt+0x12f8>
   12428:	ldr	r2, [sl, r3, lsl #2]
   1242c:	ldrb	r2, [r2]
   12430:	cmp	r2, #43	; 0x2b
   12434:	beq	124fc <__assert_fail@plt+0x12f8>
   12438:	sub	r2, r2, #48	; 0x30
   1243c:	cmp	r2, #9
   12440:	bls	124fc <__assert_fail@plt+0x12f8>
   12444:	mov	r8, #2
   12448:	b	11c08 <__assert_fail@plt+0xa04>
   1244c:	mov	r9, r5
   12450:	mov	r7, r6
   12454:	mov	r5, r6
   12458:	ldrd	sl, [sp, #16]
   1245c:	b	124dc <__assert_fail@plt+0x12d8>
   12460:	lsl	r8, r5, #2
   12464:	add	ip, sp, #56	; 0x38
   12468:	subs	r2, r2, sl
   1246c:	add	ip, ip, r8
   12470:	ldr	r0, [r4, #112]	; 0x70
   12474:	sbc	r3, r3, fp
   12478:	cmp	r7, r3
   1247c:	ldr	r6, [ip, #-8]
   12480:	cmpeq	r0, r2
   12484:	movhi	r0, r2
   12488:	mov	r1, r6
   1248c:	ldr	r2, [sp, #24]
   12490:	bl	14510 <__assert_fail@plt+0x330c>
   12494:	ldr	r2, [sp, #40]	; 0x28
   12498:	ldr	r3, [r4, #112]	; 0x70
   1249c:	cmp	r2, r3
   124a0:	and	r9, r9, r0
   124a4:	uxtb	r9, r9
   124a8:	bcc	12714 <__assert_fail@plt+0x1510>
   124ac:	bne	127e8 <__assert_fail@plt+0x15e4>
   124b0:	eor	r5, r5, #1
   124b4:	add	r3, sp, #56	; 0x38
   124b8:	add	r3, r3, r5, lsl #2
   124bc:	str	r6, [sp]
   124c0:	mov	r0, sl
   124c4:	ldr	r3, [r3, #-8]
   124c8:	mov	r1, fp
   124cc:	bl	14658 <__assert_fail@plt+0x3454>
   124d0:	ldr	r3, [sp, #40]	; 0x28
   124d4:	adds	sl, sl, r3
   124d8:	adc	fp, fp, #0
   124dc:	ldrd	r2, [r4, #160]	; 0xa0
   124e0:	cmp	r3, fp
   124e4:	cmpeq	r2, sl
   124e8:	bhi	12460 <__assert_fail@plt+0x125c>
   124ec:	mov	r3, #0
   124f0:	strd	sl, [sp, #16]
   124f4:	str	r3, [sp, #40]	; 0x28
   124f8:	b	11e84 <__assert_fail@plt+0xc80>
   124fc:	ldr	r0, [sl, r3, lsl #2]
   12500:	add	r1, sp, #48	; 0x30
   12504:	bl	12ae4 <__assert_fail@plt+0x18e0>
   12508:	cmp	r0, #0
   1250c:	beq	12724 <__assert_fail@plt+0x1520>
   12510:	ldrb	r3, [r4, #156]	; 0x9c
   12514:	cmp	r3, #0
   12518:	bne	1272c <__assert_fail@plt+0x1528>
   1251c:	ldr	r1, [r5]
   12520:	ldrd	r2, [sp, #48]	; 0x30
   12524:	add	r0, r1, #1
   12528:	ldr	r1, [sl, r1, lsl #2]
   1252c:	strd	r2, [r4, #136]	; 0x88
   12530:	mov	r2, #0
   12534:	mov	r3, #0
   12538:	str	r1, [sl, r0, lsl #2]
   1253c:	mov	r6, r2
   12540:	mov	r7, r3
   12544:	mov	r8, #1
   12548:	add	sl, sl, #4
   1254c:	b	11c18 <__assert_fail@plt+0xa14>
   12550:	mvn	r0, r5
   12554:	mov	r1, #0
   12558:	mov	r3, #0
   1255c:	adds	r0, r0, r8
   12560:	mvn	r1, r1
   12564:	strb	r3, [fp, r5]
   12568:	adc	r1, r1, r9
   1256c:	ldr	r3, [r4, #120]	; 0x78
   12570:	mov	r2, #32
   12574:	blx	r3
   12578:	sub	r5, fp, #1
   1257c:	ldrb	r1, [r5, #1]!
   12580:	cmp	r1, #0
   12584:	str	r1, [sp, #48]	; 0x30
   12588:	beq	126a8 <__assert_fail@plt+0x14a4>
   1258c:	sub	r3, r1, #7
   12590:	cmp	r3, #6
   12594:	ldrls	pc, [pc, r3, lsl #2]
   12598:	b	1267c <__assert_fail@plt+0x1478>
   1259c:	andeq	r2, r1, r0, ror #12
   125a0:	andeq	r2, r1, r4, asr #12
   125a4:	andeq	r2, r1, r8, lsr #12
   125a8:	andeq	r2, r1, ip, lsl #12
   125ac:	strdeq	r2, [r1], -r0
   125b0:	ldrdeq	r2, [r1], -r4
   125b4:			; <UNDEFINED> instruction: 0x000125b8
   125b8:	ldr	r3, [pc, #-792]	; 122a8 <__assert_fail@plt+0x10a4>
   125bc:	mov	r2, #2
   125c0:	mov	r1, #1
   125c4:	ldr	r3, [r3]
   125c8:	ldr	r0, [pc, #-836]	; 1228c <__assert_fail@plt+0x1088>
   125cc:	bl	10fa0 <fwrite_unlocked@plt>
   125d0:	b	1257c <__assert_fail@plt+0x1378>
   125d4:	ldr	r3, [pc, #-820]	; 122a8 <__assert_fail@plt+0x10a4>
   125d8:	mov	r2, #2
   125dc:	mov	r1, #1
   125e0:	ldr	r3, [r3]
   125e4:	ldr	r0, [pc, #-860]	; 12290 <__assert_fail@plt+0x108c>
   125e8:	bl	10fa0 <fwrite_unlocked@plt>
   125ec:	b	1257c <__assert_fail@plt+0x1378>
   125f0:	ldr	r3, [pc, #-848]	; 122a8 <__assert_fail@plt+0x10a4>
   125f4:	mov	r2, #2
   125f8:	mov	r1, #1
   125fc:	ldr	r3, [r3]
   12600:	ldr	r0, [pc, #-884]	; 12294 <__assert_fail@plt+0x1090>
   12604:	bl	10fa0 <fwrite_unlocked@plt>
   12608:	b	1257c <__assert_fail@plt+0x1378>
   1260c:	ldr	r3, [pc, #-876]	; 122a8 <__assert_fail@plt+0x10a4>
   12610:	mov	r2, #2
   12614:	mov	r1, #1
   12618:	ldr	r3, [r3]
   1261c:	ldr	r0, [pc, #-908]	; 12298 <__assert_fail@plt+0x1094>
   12620:	bl	10fa0 <fwrite_unlocked@plt>
   12624:	b	1257c <__assert_fail@plt+0x1378>
   12628:	ldr	r3, [pc, #-904]	; 122a8 <__assert_fail@plt+0x10a4>
   1262c:	mov	r2, #2
   12630:	mov	r1, #1
   12634:	ldr	r3, [r3]
   12638:	ldr	r0, [pc, #-932]	; 1229c <__assert_fail@plt+0x1098>
   1263c:	bl	10fa0 <fwrite_unlocked@plt>
   12640:	b	1257c <__assert_fail@plt+0x1378>
   12644:	ldr	r3, [pc, #-932]	; 122a8 <__assert_fail@plt+0x10a4>
   12648:	mov	r2, #2
   1264c:	mov	r1, #1
   12650:	ldr	r3, [r3]
   12654:	ldr	r0, [pc, #-956]	; 122a0 <__assert_fail@plt+0x109c>
   12658:	bl	10fa0 <fwrite_unlocked@plt>
   1265c:	b	1257c <__assert_fail@plt+0x1378>
   12660:	ldr	r3, [pc, #-960]	; 122a8 <__assert_fail@plt+0x10a4>
   12664:	mov	r2, #2
   12668:	mov	r1, #1
   1266c:	ldr	r3, [r3]
   12670:	ldr	r0, [pc, #-980]	; 122a4 <__assert_fail@plt+0x10a0>
   12674:	bl	10fa0 <fwrite_unlocked@plt>
   12678:	b	1257c <__assert_fail@plt+0x1378>
   1267c:	ldr	r3, [pc, #-988]	; 122a8 <__assert_fail@plt+0x10a4>
   12680:	ldr	r0, [r3]
   12684:	ldr	r3, [r0, #20]
   12688:	ldr	r2, [r0, #24]
   1268c:	cmp	r3, r2
   12690:	addcc	r2, r3, #1
   12694:	strcc	r2, [r0, #20]
   12698:	strbcc	r1, [r3]
   1269c:	bcc	1257c <__assert_fail@plt+0x1378>
   126a0:	bl	11168 <__overflow@plt>
   126a4:	b	1257c <__assert_fail@plt+0x1378>
   126a8:	ldr	r3, [pc, #-1032]	; 122a8 <__assert_fail@plt+0x10a4>
   126ac:	ldr	r0, [r3]
   126b0:	ldr	r3, [r0, #20]
   126b4:	ldr	r2, [r0, #24]
   126b8:	cmp	r3, r2
   126bc:	addcc	r1, r3, #1
   126c0:	movcc	r2, #10
   126c4:	strcc	r1, [r0, #20]
   126c8:	strbcc	r2, [r3]
   126cc:	bcc	12050 <__assert_fail@plt+0xe4c>
   126d0:	mov	r1, #10
   126d4:	bl	11168 <__overflow@plt>
   126d8:	b	12050 <__assert_fail@plt+0xe4c>
   126dc:	ldr	r0, [sl, r3, lsl #2]
   126e0:	ldr	r1, [sp, #24]
   126e4:	bl	12ae4 <__assert_fail@plt+0x18e0>
   126e8:	cmp	r0, #0
   126ec:	beq	11df8 <__assert_fail@plt+0xbf4>
   126f0:	ldrd	r2, [sp, #40]	; 0x28
   126f4:	add	sl, sl, #4
   126f8:	mov	r8, #0
   126fc:	strd	r2, [r4, #136]	; 0x88
   12700:	mov	r2, #0
   12704:	mov	r3, #0
   12708:	mov	r6, r2
   1270c:	mov	r7, r3
   12710:	b	11c18 <__assert_fail@plt+0xa14>
   12714:	strd	sl, [sp, #16]
   12718:	mov	r6, r8
   1271c:	mov	sl, r2
   12720:	b	1233c <__assert_fail@plt+0x1138>
   12724:	mov	r8, #2
   12728:	b	11ad0 <__assert_fail@plt+0x8cc>
   1272c:	ldr	r3, [r5]
   12730:	ldr	r1, [sp, #24]
   12734:	ldr	r0, [sl, r3, lsl #2]
   12738:	bl	12ae4 <__assert_fail@plt+0x18e0>
   1273c:	cmp	r0, #0
   12740:	beq	1251c <__assert_fail@plt+0x1318>
   12744:	ldrd	r2, [sp, #40]	; 0x28
   12748:	mov	r1, #1
   1274c:	add	sl, sl, #8
   12750:	strd	r2, [r4, #136]	; 0x88
   12754:	ldrd	r2, [sp, #48]	; 0x30
   12758:	strb	r1, [r4, #157]	; 0x9d
   1275c:	mov	r8, #0
   12760:	mov	r6, r2
   12764:	mov	r7, r3
   12768:	b	11c18 <__assert_fail@plt+0xa14>
   1276c:	ldr	r3, [r5]
   12770:	add	r1, sp, #48	; 0x30
   12774:	add	r3, r3, #2
   12778:	ldr	r0, [sl, r3, lsl #2]
   1277c:	bl	12ae4 <__assert_fail@plt+0x18e0>
   12780:	cmp	r0, #0
   12784:	beq	11acc <__assert_fail@plt+0x8c8>
   12788:	ldr	r1, [r5]
   1278c:	ldrd	r2, [sp, #40]	; 0x28
   12790:	add	r0, r1, #2
   12794:	ldr	r1, [sl, r1, lsl #2]
   12798:	strd	r2, [r4, #136]	; 0x88
   1279c:	ldrd	r2, [sp, #48]	; 0x30
   127a0:	mov	r8, #1
   127a4:	str	r1, [sl, r0, lsl #2]
   127a8:	strb	r8, [r4, #157]	; 0x9d
   127ac:	add	sl, sl, #8
   127b0:	mov	r6, r2
   127b4:	mov	r7, r3
   127b8:	b	11c18 <__assert_fail@plt+0xa14>
   127bc:	mov	r0, fp
   127c0:	bl	154d0 <__assert_fail@plt+0x42cc>
   127c4:	mov	r0, #0
   127c8:	bl	14210 <__assert_fail@plt+0x300c>
   127cc:	and	r6, r6, r0
   127d0:	b	12410 <__assert_fail@plt+0x120c>
   127d4:	ldr	r3, [pc, #-1312]	; 122bc <__assert_fail@plt+0x10b8>
   127d8:	ldr	r2, [pc, #-1332]	; 122ac <__assert_fail@plt+0x10a8>
   127dc:	ldr	r1, [pc, #-1324]	; 122b8 <__assert_fail@plt+0x10b4>
   127e0:	ldr	r0, [pc, #-1332]	; 122b4 <__assert_fail@plt+0x10b0>
   127e4:	bl	11204 <__assert_fail@plt>
   127e8:	ldr	r3, [pc, #-1332]	; 122bc <__assert_fail@plt+0x10b8>
   127ec:	ldr	r2, [pc, #-1348]	; 122b0 <__assert_fail@plt+0x10ac>
   127f0:	ldr	r1, [pc, #-1344]	; 122b8 <__assert_fail@plt+0x10b4>
   127f4:	ldr	r0, [pc, #-1352]	; 122b4 <__assert_fail@plt+0x10b0>
   127f8:	bl	11204 <__assert_fail@plt>
   127fc:	mov	r2, #5
   12800:	ldr	r1, [pc, #-1352]	; 122c0 <__assert_fail@plt+0x10bc>
   12804:	b	11ba0 <__assert_fail@plt+0x99c>
   12808:	ldr	r2, [r5]
   1280c:	ldr	r3, [pc, #-1356]	; 122c8 <__assert_fail@plt+0x10c4>
   12810:	str	r2, [sp]
   12814:	ldr	r1, [sp, #40]	; 0x28
   12818:	mov	r2, #119	; 0x77
   1281c:	bl	18330 <__assert_fail@plt+0x712c>
   12820:	mov	r2, #5
   12824:	mov	r6, r1
   12828:	ldr	r1, [pc, #-1388]	; 122c4 <__assert_fail@plt+0x10c0>
   1282c:	bl	10fc4 <dcgettext@plt>
   12830:	mov	r4, r0
   12834:	ldr	r0, [r5]
   12838:	bl	17720 <__assert_fail@plt+0x651c>
   1283c:	mov	r2, r4
   12840:	mov	r1, r6
   12844:	mov	r3, r0
   12848:	mov	r0, #1
   1284c:	bl	1103c <error@plt>
   12850:	ldr	r2, [r5]
   12854:	ldr	r3, [pc, #-1428]	; 122c8 <__assert_fail@plt+0x10c4>
   12858:	str	r2, [sp]
   1285c:	ldr	r1, [sp, #40]	; 0x28
   12860:	mov	r2, #83	; 0x53
   12864:	bl	18330 <__assert_fail@plt+0x712c>
   12868:	ldr	r2, [r5]
   1286c:	ldr	r3, [pc, #-1452]	; 122c8 <__assert_fail@plt+0x10c4>
   12870:	str	r2, [sp]
   12874:	ldr	r1, [sp, #40]	; 0x28
   12878:	mov	r2, #106	; 0x6a
   1287c:	bl	18330 <__assert_fail@plt+0x712c>
   12880:	mov	fp, #0
   12884:	mov	lr, #0
   12888:	pop	{r1}		; (ldr r1, [sp], #4)
   1288c:	mov	r2, sp
   12890:	push	{r2}		; (str r2, [sp, #-4]!)
   12894:	push	{r0}		; (str r0, [sp, #-4]!)
   12898:	ldr	ip, [pc, #16]	; 128b0 <__assert_fail@plt+0x16ac>
   1289c:	push	{ip}		; (str ip, [sp, #-4]!)
   128a0:	ldr	r0, [pc, #12]	; 128b4 <__assert_fail@plt+0x16b0>
   128a4:	ldr	r3, [pc, #12]	; 128b8 <__assert_fail@plt+0x16b4>
   128a8:	bl	1106c <__libc_start_main@plt>
   128ac:	bl	111ec <abort@plt>
   128b0:	andeq	r9, r1, r4, asr r3
   128b4:	andeq	r1, r1, r0, lsl r2
   128b8:	strdeq	r9, [r1], -r4
   128bc:	ldr	r3, [pc, #20]	; 128d8 <__assert_fail@plt+0x16d4>
   128c0:	ldr	r2, [pc, #20]	; 128dc <__assert_fail@plt+0x16d8>
   128c4:	add	r3, pc, r3
   128c8:	ldr	r2, [r3, r2]
   128cc:	cmp	r2, #0
   128d0:	bxeq	lr
   128d4:	b	11090 <__gmon_start__@plt>
   128d8:	andeq	r9, r1, r4, lsr r7
   128dc:	andeq	r0, r0, ip, lsl #2
   128e0:	ldr	r3, [pc, #28]	; 12904 <__assert_fail@plt+0x1700>
   128e4:	ldr	r0, [pc, #28]	; 12908 <__assert_fail@plt+0x1704>
   128e8:	sub	r3, r3, r0
   128ec:	cmp	r3, #6
   128f0:	bxls	lr
   128f4:	ldr	r3, [pc, #16]	; 1290c <__assert_fail@plt+0x1708>
   128f8:	cmp	r3, #0
   128fc:	bxeq	lr
   12900:	bx	r3
   12904:	andeq	ip, r2, fp, ror #2
   12908:	andeq	ip, r2, r8, ror #2
   1290c:	andeq	r0, r0, r0
   12910:	ldr	r1, [pc, #36]	; 1293c <__assert_fail@plt+0x1738>
   12914:	ldr	r0, [pc, #36]	; 12940 <__assert_fail@plt+0x173c>
   12918:	sub	r1, r1, r0
   1291c:	asr	r1, r1, #2
   12920:	add	r1, r1, r1, lsr #31
   12924:	asrs	r1, r1, #1
   12928:	bxeq	lr
   1292c:	ldr	r3, [pc, #16]	; 12944 <__assert_fail@plt+0x1740>
   12930:	cmp	r3, #0
   12934:	bxeq	lr
   12938:	bx	r3
   1293c:	andeq	ip, r2, r8, ror #2
   12940:	andeq	ip, r2, r8, ror #2
   12944:	andeq	r0, r0, r0
   12948:	push	{r4, lr}
   1294c:	ldr	r4, [pc, #24]	; 1296c <__assert_fail@plt+0x1768>
   12950:	ldrb	r3, [r4]
   12954:	cmp	r3, #0
   12958:	popne	{r4, pc}
   1295c:	bl	128e0 <__assert_fail@plt+0x16dc>
   12960:	mov	r3, #1
   12964:	strb	r3, [r4]
   12968:	pop	{r4, pc}
   1296c:	andeq	ip, r2, ip, lsl #3
   12970:	ldr	r0, [pc, #40]	; 129a0 <__assert_fail@plt+0x179c>
   12974:	ldr	r3, [r0]
   12978:	cmp	r3, #0
   1297c:	bne	12984 <__assert_fail@plt+0x1780>
   12980:	b	12910 <__assert_fail@plt+0x170c>
   12984:	ldr	r3, [pc, #24]	; 129a4 <__assert_fail@plt+0x17a0>
   12988:	cmp	r3, #0
   1298c:	beq	12980 <__assert_fail@plt+0x177c>
   12990:	push	{r4, lr}
   12994:	blx	r3
   12998:	pop	{r4, lr}
   1299c:	b	12910 <__assert_fail@plt+0x170c>
   129a0:	andeq	fp, r2, r4, lsl pc
   129a4:	andeq	r0, r0, r0
   129a8:	bx	lr
   129ac:	ldr	ip, [pc, #292]	; 12ad8 <__assert_fail@plt+0x18d4>
   129b0:	push	{r4, r5, r6, r7, r8, r9, lr}
   129b4:	sub	sp, sp, #36	; 0x24
   129b8:	ldr	r3, [ip, #4]
   129bc:	add	r4, sp, #32
   129c0:	ldr	r5, [ip]
   129c4:	mov	lr, #0
   129c8:	cmp	r3, #10
   129cc:	strb	r2, [r4, #-5]!
   129d0:	mov	r6, r0
   129d4:	mov	r7, r1
   129d8:	strb	lr, [sp, #28]
   129dc:	sub	r5, r4, r5
   129e0:	beq	12a58 <__assert_fail@plt+0x1854>
   129e4:	cmp	r3, #16
   129e8:	beq	12aa4 <__assert_fail@plt+0x18a0>
   129ec:	cmp	r3, #8
   129f0:	beq	12a2c <__assert_fail@plt+0x1828>
   129f4:	cmp	r4, r5
   129f8:	movhi	r0, r4
   129fc:	movhi	r3, #48	; 0x30
   12a00:	bls	12a14 <__assert_fail@plt+0x1810>
   12a04:	strb	r3, [r0, #-1]!
   12a08:	cmp	r5, r0
   12a0c:	bne	12a04 <__assert_fail@plt+0x1800>
   12a10:	mov	r4, r5
   12a14:	ldr	r3, [pc, #192]	; 12adc <__assert_fail@plt+0x18d8>
   12a18:	mov	r0, r4
   12a1c:	ldr	r1, [r3]
   12a20:	bl	10f1c <fputs_unlocked@plt>
   12a24:	add	sp, sp, #36	; 0x24
   12a28:	pop	{r4, r5, r6, r7, r8, r9, pc}
   12a2c:	lsr	r2, r6, #3
   12a30:	orr	r2, r2, r7, lsl #29
   12a34:	lsr	r1, r7, #3
   12a38:	and	r3, r6, #7
   12a3c:	mov	r7, r1
   12a40:	mov	r6, r2
   12a44:	add	r3, r3, #48	; 0x30
   12a48:	orrs	r2, r6, r7
   12a4c:	strb	r3, [r4, #-1]!
   12a50:	bne	12a2c <__assert_fail@plt+0x1828>
   12a54:	b	129f4 <__assert_fail@plt+0x17f0>
   12a58:	mov	r8, #10
   12a5c:	mov	r9, #0
   12a60:	mov	r0, r6
   12a64:	mov	r1, r7
   12a68:	mov	r2, r8
   12a6c:	mov	r3, r9
   12a70:	bl	19180 <__assert_fail@plt+0x7f7c>
   12a74:	mov	r0, r6
   12a78:	mov	r1, r7
   12a7c:	mov	r3, r9
   12a80:	add	ip, r2, #48	; 0x30
   12a84:	strb	ip, [r4, #-1]!
   12a88:	mov	r2, r8
   12a8c:	bl	19180 <__assert_fail@plt+0x7f7c>
   12a90:	mov	r6, r0
   12a94:	mov	r7, r1
   12a98:	orrs	r3, r6, r7
   12a9c:	bne	12a60 <__assert_fail@plt+0x185c>
   12aa0:	b	129f4 <__assert_fail@plt+0x17f0>
   12aa4:	ldr	r0, [pc, #52]	; 12ae0 <__assert_fail@plt+0x18dc>
   12aa8:	and	r2, r6, #15
   12aac:	add	r2, r0, r2
   12ab0:	lsr	r3, r6, #4
   12ab4:	orr	r3, r3, r7, lsl #28
   12ab8:	lsr	r1, r7, #4
   12abc:	ldrb	r2, [r2]
   12ac0:	mov	r6, r3
   12ac4:	mov	r7, r1
   12ac8:	orrs	r3, r6, r7
   12acc:	strb	r2, [r4, #-1]!
   12ad0:	bne	12aa8 <__assert_fail@plt+0x18a4>
   12ad4:	b	129f4 <__assert_fail@plt+0x17f0>
   12ad8:	muleq	r2, r0, r1
   12adc:	andeq	ip, r2, r4, lsl #3
   12ae0:			; <UNDEFINED> instruction: 0x000196bc
   12ae4:	push	{r4, r5, lr}
   12ae8:	mov	r4, r0
   12aec:	ldrb	r0, [r0]
   12af0:	sub	sp, sp, #12
   12af4:	cmp	r0, #0
   12af8:	beq	12b40 <__assert_fail@plt+0x193c>
   12afc:	cmp	r0, #43	; 0x2b
   12b00:	addeq	r4, r4, #1
   12b04:	mov	r5, r1
   12b08:	mov	r0, r4
   12b0c:	mov	r1, #46	; 0x2e
   12b10:	bl	110cc <strchr@plt>
   12b14:	cmp	r0, #0
   12b18:	movne	r2, #10
   12b1c:	beq	12b48 <__assert_fail@plt+0x1944>
   12b20:	ldr	r1, [pc, #72]	; 12b70 <__assert_fail@plt+0x196c>
   12b24:	mov	r3, r5
   12b28:	str	r1, [sp]
   12b2c:	mov	r0, r4
   12b30:	mov	r1, #0
   12b34:	bl	18478 <__assert_fail@plt+0x7274>
   12b38:	clz	r0, r0
   12b3c:	lsr	r0, r0, #5
   12b40:	add	sp, sp, #12
   12b44:	pop	{r4, r5, pc}
   12b48:	ldrb	r3, [r4]
   12b4c:	cmp	r3, #48	; 0x30
   12b50:	movne	r2, #8
   12b54:	bne	12b20 <__assert_fail@plt+0x191c>
   12b58:	ldrb	r2, [r4, #1]
   12b5c:	and	r2, r2, #223	; 0xdf
   12b60:	cmp	r2, #88	; 0x58
   12b64:	movne	r2, #8
   12b68:	moveq	r2, #16
   12b6c:	b	12b20 <__assert_fail@plt+0x191c>
   12b70:	ldrdeq	r9, [r1], -r0
   12b74:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12b78:	mov	r5, #0
   12b7c:	mov	r7, r5
   12b80:	mov	r5, #0
   12b84:	sub	sp, sp, #36	; 0x24
   12b88:	mov	r4, r1
   12b8c:	cmp	r7, r5
   12b90:	cmpeq	r0, r1
   12b94:	strd	r4, [sp, #8]
   12b98:	ldr	r4, [sp, #76]	; 0x4c
   12b9c:	bls	12c74 <__assert_fail@plt+0x1a70>
   12ba0:	asr	r9, r4, #31
   12ba4:	mov	fp, r9
   12ba8:	subs	r8, r0, #1
   12bac:	mov	sl, r4
   12bb0:	mul	r3, r8, fp
   12bb4:	sbc	r9, r7, #0
   12bb8:	strd	sl, [sp, #16]
   12bbc:	umull	sl, fp, r8, r4
   12bc0:	mla	r3, r4, r9, r3
   12bc4:	mov	r6, r0
   12bc8:	add	r5, r2, r0
   12bcc:	strd	r6, [sp]
   12bd0:	mov	r8, r4
   12bd4:	add	fp, r3, fp
   12bd8:	ldrd	r6, [sp]
   12bdc:	mov	r4, r5
   12be0:	b	12c44 <__assert_fail@plt+0x1a40>
   12be4:	cmp	r2, #32
   12be8:	strbhi	r2, [sp, #28]
   12bec:	ldrls	r3, [pc, #136]	; 12c7c <__assert_fail@plt+0x1a78>
   12bf0:	addhi	r2, sp, #28
   12bf4:	addls	r2, r3, r2, lsl #2
   12bf8:	movhi	r3, #0
   12bfc:	strbhi	r3, [sp, #29]
   12c00:	sub	r1, r8, r5
   12c04:	ldrd	r8, [sp, #16]
   12c08:	ldr	r3, [sp, #72]	; 0x48
   12c0c:	subs	r6, r6, #1
   12c10:	add	r1, r1, r3
   12c14:	sbc	r7, r7, #0
   12c18:	ldr	r0, [pc, #96]	; 12c80 <__assert_fail@plt+0x1a7c>
   12c1c:	subs	r8, sl, r8
   12c20:	sbc	r9, fp, r9
   12c24:	bl	1825c <__assert_fail@plt+0x7058>
   12c28:	ldrd	r2, [sp, #8]
   12c2c:	mov	sl, r8
   12c30:	mov	fp, r9
   12c34:	cmp	r3, r7
   12c38:	cmpeq	r2, r6
   12c3c:	mov	r8, r5
   12c40:	bcs	12c74 <__assert_fail@plt+0x1a70>
   12c44:	ldrd	r2, [sp]
   12c48:	mov	r0, sl
   12c4c:	mov	r1, fp
   12c50:	bl	19180 <__assert_fail@plt+0x7f7c>
   12c54:	rsb	r2, r6, #0
   12c58:	ldrb	r2, [r4, r2]
   12c5c:	and	r2, r2, #127	; 0x7f
   12c60:	cmp	r2, #127	; 0x7f
   12c64:	mov	r5, r0
   12c68:	bne	12be4 <__assert_fail@plt+0x19e0>
   12c6c:	ldr	r2, [pc, #16]	; 12c84 <__assert_fail@plt+0x1a80>
   12c70:	b	12c00 <__assert_fail@plt+0x19fc>
   12c74:	add	sp, sp, #36	; 0x24
   12c78:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12c7c:	andeq	r9, r1, ip, ror r3
   12c80:	ldrdeq	r9, [r1], -r8
   12c84:	ldrdeq	r9, [r1], -r4
   12c88:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12c8c:	mov	r5, #0
   12c90:	mov	r7, #0
   12c94:	sub	sp, sp, #44	; 0x2c
   12c98:	mov	r6, r1
   12c9c:	cmp	r5, r7
   12ca0:	mov	r4, r0
   12ca4:	cmpeq	r0, r6
   12ca8:	strd	r4, [sp, #8]
   12cac:	mov	r1, r5
   12cb0:	strd	r6, [sp, #16]
   12cb4:	ldr	r5, [sp, #84]	; 0x54
   12cb8:	bls	12d84 <__assert_fail@plt+0x1b80>
   12cbc:	asr	r7, r5, #31
   12cc0:	mov	fp, r7
   12cc4:	mov	r6, r0
   12cc8:	subs	r0, r0, #1
   12ccc:	mov	sl, r5
   12cd0:	mov	r9, r3
   12cd4:	mul	r3, r0, fp
   12cd8:	mov	r7, r1
   12cdc:	sbc	r1, r1, #0
   12ce0:	strd	sl, [sp, #24]
   12ce4:	umull	sl, fp, r0, r5
   12ce8:	mla	r3, r5, r1, r3
   12cec:	str	r2, [sp, #4]
   12cf0:	add	fp, r3, fp
   12cf4:	ldrd	r2, [sp, #8]
   12cf8:	mov	r0, sl
   12cfc:	mov	r1, fp
   12d00:	bl	19180 <__assert_fail@plt+0x7f7c>
   12d04:	ldr	r3, [pc, #140]	; 12d98 <__assert_fail@plt+0x1b94>
   12d08:	subs	r6, r6, #1
   12d0c:	sbc	r7, r7, #0
   12d10:	ldrb	r3, [r3, #8]
   12d14:	cmp	r3, #0
   12d18:	ldr	r3, [sp, #80]	; 0x50
   12d1c:	sub	r1, r5, r0
   12d20:	mov	r8, r0
   12d24:	add	r1, r1, r3
   12d28:	beq	12d8c <__assert_fail@plt+0x1b88>
   12d2c:	ldr	r4, [sp, #4]
   12d30:	add	r2, sp, #32
   12d34:	add	ip, r4, #8
   12d38:	mov	r3, ip
   12d3c:	ldrb	r0, [r3, #-1]!
   12d40:	cmp	r4, r3
   12d44:	strb	r0, [r2], #1
   12d48:	bne	12d3c <__assert_fail@plt+0x1b38>
   12d4c:	ldrd	r2, [sp, #32]
   12d50:	ldrd	r4, [sp, #24]
   12d54:	mov	r0, r9
   12d58:	str	ip, [sp, #4]
   12d5c:	subs	r4, sl, r4
   12d60:	sbc	r5, fp, r5
   12d64:	bl	1825c <__assert_fail@plt+0x7058>
   12d68:	ldrd	r2, [sp, #16]
   12d6c:	mov	fp, r5
   12d70:	mov	sl, r4
   12d74:	cmp	r7, r3
   12d78:	cmpeq	r6, r2
   12d7c:	mov	r5, r8
   12d80:	bhi	12cf4 <__assert_fail@plt+0x1af0>
   12d84:	add	sp, sp, #44	; 0x2c
   12d88:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12d8c:	ldr	ip, [sp, #4]
   12d90:	ldrd	r2, [ip], #8
   12d94:	b	12d50 <__assert_fail@plt+0x1b4c>
   12d98:	muleq	r2, r0, r1
   12d9c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12da0:	mov	r5, #0
   12da4:	mov	r7, #0
   12da8:	sub	sp, sp, #44	; 0x2c
   12dac:	mov	r8, r0
   12db0:	mov	r9, r5
   12db4:	mov	r6, r1
   12db8:	cmp	r5, r7
   12dbc:	cmpeq	r0, r1
   12dc0:	strd	r8, [sp]
   12dc4:	strd	r6, [sp, #8]
   12dc8:	ldr	r4, [sp, #84]	; 0x54
   12dcc:	bls	12e90 <__assert_fail@plt+0x1c8c>
   12dd0:	asr	r7, r4, #31
   12dd4:	subs	r0, r0, #1
   12dd8:	mov	r6, r4
   12ddc:	str	r3, [sp, #28]
   12de0:	mul	r3, r0, r7
   12de4:	sbc	r1, r5, #0
   12de8:	strd	r6, [sp, #16]
   12dec:	umull	r6, r7, r0, r4
   12df0:	mla	r3, r4, r1, r3
   12df4:	ldr	sl, [pc, #168]	; 12ea4 <__assert_fail@plt+0x1ca0>
   12df8:	add	r7, r3, r7
   12dfc:	str	r2, [sp, #24]
   12e00:	ldrd	r2, [sp]
   12e04:	mov	r0, r6
   12e08:	mov	r1, r7
   12e0c:	bl	19180 <__assert_fail@plt+0x7f7c>
   12e10:	ldrb	r2, [sl, #8]
   12e14:	subs	r8, r8, #1
   12e18:	ldr	r3, [sp, #80]	; 0x50
   12e1c:	sbc	r9, r9, #0
   12e20:	cmp	r2, #0
   12e24:	sub	r1, r4, r0
   12e28:	mov	fp, r0
   12e2c:	add	r1, r1, r3
   12e30:	beq	12e98 <__assert_fail@plt+0x1c94>
   12e34:	ldr	r3, [sp, #24]
   12e38:	add	r0, sp, #36	; 0x24
   12e3c:	add	ip, r3, #4
   12e40:	mov	r2, ip
   12e44:	mov	r5, r3
   12e48:	ldrb	r3, [r2, #-1]!
   12e4c:	cmp	r5, r2
   12e50:	strb	r3, [r0], #1
   12e54:	bne	12e48 <__assert_fail@plt+0x1c44>
   12e58:	ldr	r2, [sp, #36]	; 0x24
   12e5c:	ldrd	r4, [sp, #16]
   12e60:	ldr	r0, [sp, #28]
   12e64:	str	ip, [sp, #24]
   12e68:	subs	r4, r6, r4
   12e6c:	sbc	r5, r7, r5
   12e70:	bl	1825c <__assert_fail@plt+0x7058>
   12e74:	ldrd	r2, [sp, #8]
   12e78:	mov	r6, r4
   12e7c:	mov	r7, r5
   12e80:	cmp	r9, r3
   12e84:	cmpeq	r8, r2
   12e88:	mov	r4, fp
   12e8c:	bhi	12e00 <__assert_fail@plt+0x1bfc>
   12e90:	add	sp, sp, #44	; 0x2c
   12e94:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12e98:	ldr	ip, [sp, #24]
   12e9c:	ldr	r2, [ip], #4
   12ea0:	b	12e5c <__assert_fail@plt+0x1c58>
   12ea4:	muleq	r2, r0, r1
   12ea8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12eac:	mov	r5, #0
   12eb0:	mov	r7, #0
   12eb4:	sub	sp, sp, #44	; 0x2c
   12eb8:	mov	r8, r0
   12ebc:	mov	r9, r5
   12ec0:	mov	r6, r1
   12ec4:	cmp	r5, r7
   12ec8:	cmpeq	r0, r1
   12ecc:	strd	r8, [sp]
   12ed0:	strd	r6, [sp, #8]
   12ed4:	ldr	r4, [sp, #84]	; 0x54
   12ed8:	bls	12f9c <__assert_fail@plt+0x1d98>
   12edc:	asr	r7, r4, #31
   12ee0:	subs	r0, r0, #1
   12ee4:	mov	r6, r4
   12ee8:	str	r3, [sp, #28]
   12eec:	mul	r3, r0, r7
   12ef0:	sbc	r1, r5, #0
   12ef4:	strd	r6, [sp, #16]
   12ef8:	umull	r6, r7, r0, r4
   12efc:	mla	r3, r4, r1, r3
   12f00:	ldr	sl, [pc, #168]	; 12fb0 <__assert_fail@plt+0x1dac>
   12f04:	add	r7, r3, r7
   12f08:	str	r2, [sp, #24]
   12f0c:	ldrd	r2, [sp]
   12f10:	mov	r0, r6
   12f14:	mov	r1, r7
   12f18:	bl	19180 <__assert_fail@plt+0x7f7c>
   12f1c:	ldrb	r2, [sl, #8]
   12f20:	subs	r8, r8, #1
   12f24:	ldr	r3, [sp, #80]	; 0x50
   12f28:	sbc	r9, r9, #0
   12f2c:	cmp	r2, #0
   12f30:	sub	r1, r4, r0
   12f34:	mov	fp, r0
   12f38:	add	r1, r1, r3
   12f3c:	beq	12fa4 <__assert_fail@plt+0x1da0>
   12f40:	ldr	r3, [sp, #24]
   12f44:	add	r0, sp, #36	; 0x24
   12f48:	add	ip, r3, #4
   12f4c:	mov	r2, ip
   12f50:	mov	r5, r3
   12f54:	ldrb	r3, [r2, #-1]!
   12f58:	cmp	r5, r2
   12f5c:	strb	r3, [r0], #1
   12f60:	bne	12f54 <__assert_fail@plt+0x1d50>
   12f64:	ldr	r2, [sp, #36]	; 0x24
   12f68:	ldrd	r4, [sp, #16]
   12f6c:	ldr	r0, [sp, #28]
   12f70:	str	ip, [sp, #24]
   12f74:	subs	r4, r6, r4
   12f78:	sbc	r5, r7, r5
   12f7c:	bl	1825c <__assert_fail@plt+0x7058>
   12f80:	ldrd	r2, [sp, #8]
   12f84:	mov	r6, r4
   12f88:	mov	r7, r5
   12f8c:	cmp	r9, r3
   12f90:	cmpeq	r8, r2
   12f94:	mov	r4, fp
   12f98:	bhi	12f0c <__assert_fail@plt+0x1d08>
   12f9c:	add	sp, sp, #44	; 0x2c
   12fa0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12fa4:	ldr	ip, [sp, #24]
   12fa8:	ldr	r2, [ip], #4
   12fac:	b	12f68 <__assert_fail@plt+0x1d64>
   12fb0:	muleq	r2, r0, r1
   12fb4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12fb8:	mov	r5, #0
   12fbc:	mov	r7, #0
   12fc0:	sub	sp, sp, #44	; 0x2c
   12fc4:	mov	r4, r0
   12fc8:	mov	r6, r1
   12fcc:	cmp	r5, r7
   12fd0:	cmpeq	r0, r1
   12fd4:	strd	r4, [sp, #8]
   12fd8:	strd	r6, [sp, #16]
   12fdc:	ldr	r4, [sp, #84]	; 0x54
   12fe0:	bls	130b8 <__assert_fail@plt+0x1eb4>
   12fe4:	asr	r7, r4, #31
   12fe8:	mov	fp, r7
   12fec:	mov	r6, r0
   12ff0:	subs	r0, r0, #1
   12ff4:	mov	sl, r4
   12ff8:	str	r3, [sp, #36]	; 0x24
   12ffc:	mul	r3, r0, fp
   13000:	sbc	r1, r5, #0
   13004:	strd	sl, [sp, #24]
   13008:	umull	sl, fp, r0, r4
   1300c:	mla	r3, r4, r1, r3
   13010:	mov	r7, r5
   13014:	add	fp, r3, fp
   13018:	mov	r5, r2
   1301c:	strd	r6, [sp]
   13020:	ldrd	r2, [sp, #8]
   13024:	mov	r0, sl
   13028:	mov	r1, fp
   1302c:	bl	19180 <__assert_fail@plt+0x7f7c>
   13030:	ldr	r3, [pc, #136]	; 130c0 <__assert_fail@plt+0x1ebc>
   13034:	bic	ip, r8, #255	; 0xff
   13038:	ldrd	r6, [sp, #24]
   1303c:	ldrb	r2, [r3, #8]
   13040:	ldr	r3, [sp, #80]	; 0x50
   13044:	add	r5, r5, #2
   13048:	mov	r9, r0
   1304c:	ldrd	r0, [sp]
   13050:	subs	r0, r0, #1
   13054:	sbc	r1, r1, #0
   13058:	cmp	r2, #0
   1305c:	strd	r0, [sp]
   13060:	ldrbne	r2, [r5, #-1]
   13064:	ldrbne	r0, [r5, #-2]
   13068:	sub	r1, r4, r9
   1306c:	orrne	r2, r2, ip
   13070:	bicne	r2, r2, #65280	; 0xff00
   13074:	orrne	r2, r2, r0, lsl #8
   13078:	movne	r8, r2
   1307c:	ldrheq	r2, [r5, #-2]
   13080:	add	r1, r1, r3
   13084:	uxthne	r2, r2
   13088:	ldr	r0, [sp, #36]	; 0x24
   1308c:	subs	r6, sl, r6
   13090:	sbc	r7, fp, r7
   13094:	bl	1825c <__assert_fail@plt+0x7058>
   13098:	ldrd	r2, [sp, #16]
   1309c:	ldrd	r0, [sp]
   130a0:	mov	sl, r6
   130a4:	mov	fp, r7
   130a8:	cmp	r1, r3
   130ac:	cmpeq	r0, r2
   130b0:	mov	r4, r9
   130b4:	bhi	13020 <__assert_fail@plt+0x1e1c>
   130b8:	add	sp, sp, #44	; 0x2c
   130bc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   130c0:	muleq	r2, r0, r1
   130c4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   130c8:	mov	r5, #0
   130cc:	mov	r7, #0
   130d0:	sub	sp, sp, #44	; 0x2c
   130d4:	mov	r4, r0
   130d8:	mov	r6, r1
   130dc:	cmp	r5, r7
   130e0:	cmpeq	r0, r1
   130e4:	strd	r4, [sp, #8]
   130e8:	strd	r6, [sp, #16]
   130ec:	ldr	r4, [sp, #84]	; 0x54
   130f0:	bls	131c8 <__assert_fail@plt+0x1fc4>
   130f4:	asr	r7, r4, #31
   130f8:	mov	fp, r7
   130fc:	mov	r6, r0
   13100:	subs	r0, r0, #1
   13104:	mov	sl, r4
   13108:	str	r3, [sp, #36]	; 0x24
   1310c:	mul	r3, r0, fp
   13110:	sbc	r1, r5, #0
   13114:	strd	sl, [sp, #24]
   13118:	umull	sl, fp, r0, r4
   1311c:	mla	r3, r4, r1, r3
   13120:	mov	r7, r5
   13124:	add	fp, r3, fp
   13128:	mov	r5, r2
   1312c:	strd	r6, [sp]
   13130:	ldrd	r2, [sp, #8]
   13134:	mov	r0, sl
   13138:	mov	r1, fp
   1313c:	bl	19180 <__assert_fail@plt+0x7f7c>
   13140:	ldr	r3, [pc, #136]	; 131d0 <__assert_fail@plt+0x1fcc>
   13144:	bic	ip, r8, #255	; 0xff
   13148:	ldrd	r6, [sp, #24]
   1314c:	ldrb	r2, [r3, #8]
   13150:	ldr	r3, [sp, #80]	; 0x50
   13154:	add	r5, r5, #2
   13158:	mov	r9, r0
   1315c:	ldrd	r0, [sp]
   13160:	subs	r0, r0, #1
   13164:	sbc	r1, r1, #0
   13168:	cmp	r2, #0
   1316c:	strd	r0, [sp]
   13170:	ldrbne	r2, [r5, #-1]
   13174:	ldrbne	r0, [r5, #-2]
   13178:	sub	r1, r4, r9
   1317c:	orrne	r2, r2, ip
   13180:	bicne	r2, r2, #65280	; 0xff00
   13184:	orrne	r2, r2, r0, lsl #8
   13188:	movne	r8, r2
   1318c:	ldrsheq	r2, [r5, #-2]
   13190:	add	r1, r1, r3
   13194:	sxthne	r2, r2
   13198:	ldr	r0, [sp, #36]	; 0x24
   1319c:	subs	r6, sl, r6
   131a0:	sbc	r7, fp, r7
   131a4:	bl	1825c <__assert_fail@plt+0x7058>
   131a8:	ldrd	r2, [sp, #16]
   131ac:	ldrd	r0, [sp]
   131b0:	mov	sl, r6
   131b4:	mov	fp, r7
   131b8:	cmp	r1, r3
   131bc:	cmpeq	r0, r2
   131c0:	mov	r4, r9
   131c4:	bhi	13130 <__assert_fail@plt+0x1f2c>
   131c8:	add	sp, sp, #44	; 0x2c
   131cc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   131d0:	muleq	r2, r0, r1
   131d4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   131d8:	mov	r5, #0
   131dc:	mov	r7, #0
   131e0:	sub	sp, sp, #36	; 0x24
   131e4:	mov	r8, r0
   131e8:	mov	r9, r5
   131ec:	mov	r6, r1
   131f0:	cmp	r5, r7
   131f4:	cmpeq	r0, r1
   131f8:	strd	r8, [sp, #8]
   131fc:	strd	r6, [sp, #16]
   13200:	ldr	r4, [sp, #76]	; 0x4c
   13204:	bls	13298 <__assert_fail@plt+0x2094>
   13208:	asr	r7, r4, #31
   1320c:	subs	r0, r0, #1
   13210:	mov	r6, r4
   13214:	mov	sl, r3
   13218:	mul	r3, r0, r7
   1321c:	sbc	r1, r5, #0
   13220:	strd	r6, [sp, #24]
   13224:	umull	r6, r7, r0, r4
   13228:	mla	r3, r4, r1, r3
   1322c:	str	r2, [sp, #4]
   13230:	add	r7, r3, r7
   13234:	ldrd	r2, [sp, #8]
   13238:	mov	r0, r6
   1323c:	mov	r1, r7
   13240:	bl	19180 <__assert_fail@plt+0x7f7c>
   13244:	ldr	r3, [sp, #72]	; 0x48
   13248:	subs	r8, r8, #1
   1324c:	sbc	r9, r9, #0
   13250:	sub	r1, r4, r0
   13254:	add	r1, r1, r3
   13258:	ldr	r3, [sp, #4]
   1325c:	ldrd	r4, [sp, #24]
   13260:	mov	fp, r0
   13264:	ldrb	r2, [r3], #1
   13268:	subs	r4, r6, r4
   1326c:	mov	r0, sl
   13270:	sbc	r5, r7, r5
   13274:	str	r3, [sp, #4]
   13278:	bl	1825c <__assert_fail@plt+0x7058>
   1327c:	ldrd	r2, [sp, #16]
   13280:	mov	r6, r4
   13284:	mov	r7, r5
   13288:	cmp	r9, r3
   1328c:	cmpeq	r8, r2
   13290:	mov	r4, fp
   13294:	bhi	13234 <__assert_fail@plt+0x2030>
   13298:	add	sp, sp, #36	; 0x24
   1329c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   132a0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   132a4:	mov	r5, #0
   132a8:	mov	r7, #0
   132ac:	sub	sp, sp, #36	; 0x24
   132b0:	mov	r8, r0
   132b4:	mov	r9, r5
   132b8:	mov	r6, r1
   132bc:	cmp	r5, r7
   132c0:	cmpeq	r0, r1
   132c4:	strd	r8, [sp, #8]
   132c8:	strd	r6, [sp, #16]
   132cc:	ldr	r4, [sp, #76]	; 0x4c
   132d0:	bls	13364 <__assert_fail@plt+0x2160>
   132d4:	asr	r7, r4, #31
   132d8:	subs	r0, r0, #1
   132dc:	mov	r6, r4
   132e0:	mov	sl, r3
   132e4:	mul	r3, r0, r7
   132e8:	sbc	r1, r5, #0
   132ec:	strd	r6, [sp, #24]
   132f0:	umull	r6, r7, r0, r4
   132f4:	mla	r3, r4, r1, r3
   132f8:	str	r2, [sp, #4]
   132fc:	add	r7, r3, r7
   13300:	ldrd	r2, [sp, #8]
   13304:	mov	r0, r6
   13308:	mov	r1, r7
   1330c:	bl	19180 <__assert_fail@plt+0x7f7c>
   13310:	ldr	r3, [sp, #72]	; 0x48
   13314:	subs	r8, r8, #1
   13318:	sbc	r9, r9, #0
   1331c:	sub	r1, r4, r0
   13320:	add	r1, r1, r3
   13324:	ldr	r3, [sp, #4]
   13328:	ldrd	r4, [sp, #24]
   1332c:	mov	fp, r0
   13330:	ldrsb	r2, [r3], #1
   13334:	subs	r4, r6, r4
   13338:	mov	r0, sl
   1333c:	sbc	r5, r7, r5
   13340:	str	r3, [sp, #4]
   13344:	bl	1825c <__assert_fail@plt+0x7058>
   13348:	ldrd	r2, [sp, #16]
   1334c:	mov	r6, r4
   13350:	mov	r7, r5
   13354:	cmp	r9, r3
   13358:	cmpeq	r8, r2
   1335c:	mov	r4, fp
   13360:	bhi	13300 <__assert_fail@plt+0x20fc>
   13364:	add	sp, sp, #36	; 0x24
   13368:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1336c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13370:	mov	r5, #0
   13374:	mov	r9, r5
   13378:	mov	r5, #0
   1337c:	sub	sp, sp, #84	; 0x54
   13380:	mov	r4, r1
   13384:	mov	r8, r0
   13388:	cmp	r9, r5
   1338c:	cmpeq	r0, r1
   13390:	strd	r4, [sp, #8]
   13394:	strd	r8, [sp]
   13398:	ldr	r4, [sp, #124]	; 0x7c
   1339c:	bls	134a4 <__assert_fail@plt+0x22a0>
   133a0:	asr	r3, r4, #31
   133a4:	mov	fp, r3
   133a8:	mov	r6, r2
   133ac:	subs	r2, r0, #1
   133b0:	sbc	r3, r9, #0
   133b4:	mov	sl, r4
   133b8:	mov	r1, r3
   133bc:	mul	r3, r2, fp
   133c0:	strd	sl, [sp, #16]
   133c4:	umull	sl, fp, r2, r4
   133c8:	mla	r3, r4, r1, r3
   133cc:	lsl	r2, r8, #3
   133d0:	add	fp, r3, fp
   133d4:	add	r3, r8, #1
   133d8:	str	r0, [sp, #36]	; 0x24
   133dc:	str	r2, [sp, #28]
   133e0:	str	r3, [sp, #32]
   133e4:	str	r6, [sp, #24]
   133e8:	ldrd	r2, [sp]
   133ec:	mov	r0, sl
   133f0:	mov	r1, fp
   133f4:	bl	19180 <__assert_fail@plt+0x7f7c>
   133f8:	ldr	r3, [pc, #200]	; 134c8 <__assert_fail@plt+0x22c4>
   133fc:	ldr	r2, [sp, #120]	; 0x78
   13400:	ldrb	r3, [r3, #8]
   13404:	cmp	r3, #0
   13408:	sub	r4, r4, r0
   1340c:	mov	r5, r0
   13410:	add	r4, r4, r2
   13414:	beq	134ac <__assert_fail@plt+0x22a8>
   13418:	ldr	r2, [sp, #36]	; 0x24
   1341c:	ldr	r3, [sp, #32]
   13420:	sub	r0, r2, r8
   13424:	ldr	r6, [sp, #24]
   13428:	sub	r3, r3, r8
   1342c:	add	r0, r6, r0, lsl #3
   13430:	add	r3, r6, r3, lsl #3
   13434:	add	r2, sp, #40	; 0x28
   13438:	ldrb	r1, [r3, #-1]!
   1343c:	cmp	r3, r0
   13440:	strb	r1, [r2], #1
   13444:	bne	13438 <__assert_fail@plt+0x2234>
   13448:	vldr	d0, [sp, #40]	; 0x28
   1344c:	str	r6, [sp, #24]
   13450:	mov	r3, #0
   13454:	mov	r1, #40	; 0x28
   13458:	mov	r2, r3
   1345c:	subs	r8, r8, #1
   13460:	add	r0, sp, r1
   13464:	sbc	r9, r9, #0
   13468:	bl	15710 <__assert_fail@plt+0x450c>
   1346c:	ldrd	r6, [sp, #16]
   13470:	add	r2, sp, #40	; 0x28
   13474:	mov	r1, r4
   13478:	subs	r6, sl, r6
   1347c:	ldr	r0, [pc, #72]	; 134cc <__assert_fail@plt+0x22c8>
   13480:	sbc	r7, fp, r7
   13484:	bl	1825c <__assert_fail@plt+0x7058>
   13488:	ldrd	r2, [sp, #8]
   1348c:	mov	sl, r6
   13490:	mov	fp, r7
   13494:	cmp	r3, r9
   13498:	cmpeq	r2, r8
   1349c:	mov	r4, r5
   134a0:	bcc	133e8 <__assert_fail@plt+0x21e4>
   134a4:	add	sp, sp, #84	; 0x54
   134a8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   134ac:	ldr	r2, [sp, #28]
   134b0:	rsb	r3, r8, r8, lsl #29
   134b4:	add	r3, r2, r3, lsl #3
   134b8:	ldr	r2, [sp, #24]
   134bc:	add	r3, r2, r3
   134c0:	vldr	d0, [r3]
   134c4:	b	13450 <__assert_fail@plt+0x224c>
   134c8:	muleq	r2, r0, r1
   134cc:	ldrdeq	r9, [r1], -r8
   134d0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   134d4:	mov	r5, #0
   134d8:	mov	r9, r5
   134dc:	mov	r5, #0
   134e0:	sub	sp, sp, #84	; 0x54
   134e4:	mov	r4, r1
   134e8:	mov	r8, r0
   134ec:	cmp	r9, r5
   134f0:	cmpeq	r0, r1
   134f4:	strd	r4, [sp, #8]
   134f8:	strd	r8, [sp]
   134fc:	ldr	r4, [sp, #124]	; 0x7c
   13500:	bls	13608 <__assert_fail@plt+0x2404>
   13504:	asr	r3, r4, #31
   13508:	mov	fp, r3
   1350c:	mov	r6, r2
   13510:	subs	r2, r0, #1
   13514:	sbc	r3, r9, #0
   13518:	mov	sl, r4
   1351c:	mov	r1, r3
   13520:	mul	r3, r2, fp
   13524:	strd	sl, [sp, #16]
   13528:	umull	sl, fp, r2, r4
   1352c:	mla	r3, r4, r1, r3
   13530:	lsl	r2, r8, #3
   13534:	add	fp, r3, fp
   13538:	add	r3, r8, #1
   1353c:	str	r0, [sp, #36]	; 0x24
   13540:	str	r2, [sp, #28]
   13544:	str	r3, [sp, #32]
   13548:	str	r6, [sp, #24]
   1354c:	ldrd	r2, [sp]
   13550:	mov	r0, sl
   13554:	mov	r1, fp
   13558:	bl	19180 <__assert_fail@plt+0x7f7c>
   1355c:	ldr	r3, [pc, #200]	; 1362c <__assert_fail@plt+0x2428>
   13560:	ldr	r2, [sp, #120]	; 0x78
   13564:	ldrb	r3, [r3, #8]
   13568:	cmp	r3, #0
   1356c:	sub	r4, r4, r0
   13570:	mov	r5, r0
   13574:	add	r4, r4, r2
   13578:	beq	13610 <__assert_fail@plt+0x240c>
   1357c:	ldr	r2, [sp, #36]	; 0x24
   13580:	ldr	r3, [sp, #32]
   13584:	sub	r0, r2, r8
   13588:	ldr	r6, [sp, #24]
   1358c:	sub	r3, r3, r8
   13590:	add	r0, r6, r0, lsl #3
   13594:	add	r3, r6, r3, lsl #3
   13598:	add	r2, sp, #40	; 0x28
   1359c:	ldrb	r1, [r3, #-1]!
   135a0:	cmp	r3, r0
   135a4:	strb	r1, [r2], #1
   135a8:	bne	1359c <__assert_fail@plt+0x2398>
   135ac:	vldr	d0, [sp, #40]	; 0x28
   135b0:	str	r6, [sp, #24]
   135b4:	mov	r3, #0
   135b8:	mov	r1, #40	; 0x28
   135bc:	mov	r2, r3
   135c0:	subs	r8, r8, #1
   135c4:	add	r0, sp, r1
   135c8:	sbc	r9, r9, #0
   135cc:	bl	15288 <__assert_fail@plt+0x4084>
   135d0:	ldrd	r6, [sp, #16]
   135d4:	add	r2, sp, #40	; 0x28
   135d8:	mov	r1, r4
   135dc:	subs	r6, sl, r6
   135e0:	ldr	r0, [pc, #72]	; 13630 <__assert_fail@plt+0x242c>
   135e4:	sbc	r7, fp, r7
   135e8:	bl	1825c <__assert_fail@plt+0x7058>
   135ec:	ldrd	r2, [sp, #8]
   135f0:	mov	sl, r6
   135f4:	mov	fp, r7
   135f8:	cmp	r3, r9
   135fc:	cmpeq	r2, r8
   13600:	mov	r4, r5
   13604:	bcc	1354c <__assert_fail@plt+0x2348>
   13608:	add	sp, sp, #84	; 0x54
   1360c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13610:	ldr	r2, [sp, #28]
   13614:	rsb	r3, r8, r8, lsl #29
   13618:	add	r3, r2, r3, lsl #3
   1361c:	ldr	r2, [sp, #24]
   13620:	add	r3, r2, r3
   13624:	vldr	d0, [r3]
   13628:	b	135b4 <__assert_fail@plt+0x23b0>
   1362c:	muleq	r2, r0, r1
   13630:	ldrdeq	r9, [r1], -r8
   13634:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13638:	mov	r5, #0
   1363c:	mov	r9, r5
   13640:	mov	r5, #0
   13644:	sub	sp, sp, #76	; 0x4c
   13648:	mov	r4, r1
   1364c:	mov	r8, r0
   13650:	cmp	r9, r5
   13654:	cmpeq	r0, r1
   13658:	strd	r4, [sp, #8]
   1365c:	strd	r8, [sp]
   13660:	ldr	r4, [sp, #116]	; 0x74
   13664:	bls	1376c <__assert_fail@plt+0x2568>
   13668:	asr	r3, r4, #31
   1366c:	mov	fp, r3
   13670:	mov	r6, r2
   13674:	subs	r2, r0, #1
   13678:	sbc	r3, r9, #0
   1367c:	mov	sl, r4
   13680:	mov	r1, r3
   13684:	mul	r3, r2, fp
   13688:	strd	sl, [sp, #16]
   1368c:	umull	sl, fp, r2, r4
   13690:	mla	r3, r4, r1, r3
   13694:	lsl	r2, r8, #2
   13698:	add	fp, r3, fp
   1369c:	add	r3, r8, #1
   136a0:	str	r0, [sp, #36]	; 0x24
   136a4:	str	r2, [sp, #28]
   136a8:	str	r3, [sp, #32]
   136ac:	str	r6, [sp, #24]
   136b0:	ldrd	r2, [sp]
   136b4:	mov	r0, sl
   136b8:	mov	r1, fp
   136bc:	bl	19180 <__assert_fail@plt+0x7f7c>
   136c0:	ldr	r3, [pc, #200]	; 13790 <__assert_fail@plt+0x258c>
   136c4:	ldr	r2, [sp, #112]	; 0x70
   136c8:	ldrb	r3, [r3, #8]
   136cc:	cmp	r3, #0
   136d0:	sub	r4, r4, r0
   136d4:	mov	r5, r0
   136d8:	add	r4, r4, r2
   136dc:	beq	13774 <__assert_fail@plt+0x2570>
   136e0:	ldr	r2, [sp, #36]	; 0x24
   136e4:	ldr	r3, [sp, #32]
   136e8:	sub	r1, r2, r8
   136ec:	ldr	r6, [sp, #24]
   136f0:	sub	r3, r3, r8
   136f4:	add	r1, r6, r1, lsl #2
   136f8:	add	r3, r6, r3, lsl #2
   136fc:	add	r2, sp, #40	; 0x28
   13700:	ldrb	r0, [r3, #-1]!
   13704:	cmp	r3, r1
   13708:	strb	r0, [r2], #1
   1370c:	bne	13700 <__assert_fail@plt+0x24fc>
   13710:	vldr	s0, [sp, #40]	; 0x28
   13714:	str	r6, [sp, #24]
   13718:	mov	r3, #0
   1371c:	mov	r2, r3
   13720:	subs	r8, r8, #1
   13724:	mov	r1, #31
   13728:	add	r0, sp, #40	; 0x28
   1372c:	sbc	r9, r9, #0
   13730:	bl	155c8 <__assert_fail@plt+0x43c4>
   13734:	ldrd	r6, [sp, #16]
   13738:	add	r2, sp, #40	; 0x28
   1373c:	mov	r1, r4
   13740:	subs	r6, sl, r6
   13744:	ldr	r0, [pc, #72]	; 13794 <__assert_fail@plt+0x2590>
   13748:	sbc	r7, fp, r7
   1374c:	bl	1825c <__assert_fail@plt+0x7058>
   13750:	ldrd	r2, [sp, #8]
   13754:	mov	sl, r6
   13758:	mov	fp, r7
   1375c:	cmp	r3, r9
   13760:	cmpeq	r2, r8
   13764:	mov	r4, r5
   13768:	bcc	136b0 <__assert_fail@plt+0x24ac>
   1376c:	add	sp, sp, #76	; 0x4c
   13770:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13774:	ldr	r2, [sp, #28]
   13778:	rsb	r3, r8, r8, lsl #30
   1377c:	add	r3, r2, r3, lsl #2
   13780:	ldr	r2, [sp, #24]
   13784:	add	r3, r2, r3
   13788:	vldr	s0, [r3]
   1378c:	b	13718 <__assert_fail@plt+0x2514>
   13790:	muleq	r2, r0, r1
   13794:	ldrdeq	r9, [r1], -r8
   13798:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1379c:	subs	fp, r0, #0
   137a0:	sub	sp, sp, #20
   137a4:	beq	13e58 <__assert_fail@plt+0x2c54>
   137a8:	ldrb	r3, [fp]
   137ac:	cmp	r3, #0
   137b0:	beq	139dc <__assert_fail@plt+0x27d8>
   137b4:	ldr	r6, [pc, #1712]	; 13e6c <__assert_fail@plt+0x2c68>
   137b8:	ldr	sl, [pc, #1712]	; 13e70 <__assert_fail@plt+0x2c6c>
   137bc:	mov	r7, fp
   137c0:	ldr	r3, [r6, #12]
   137c4:	str	fp, [sp, #8]
   137c8:	ldr	r2, [r6, #16]
   137cc:	cmp	r2, r3
   137d0:	bls	13a88 <__assert_fail@plt+0x2884>
   137d4:	ldr	r4, [r6, #20]
   137d8:	adds	r4, r4, r3, lsl #5
   137dc:	beq	13e1c <__assert_fail@plt+0x2c18>
   137e0:	ldrb	r2, [r7]
   137e4:	sub	r3, r2, #97	; 0x61
   137e8:	cmp	r3, #23
   137ec:	ldrls	pc, [pc, r3, lsl #2]
   137f0:	b	13a00 <__assert_fail@plt+0x27fc>
   137f4:	andeq	r3, r1, r8, ror #19
   137f8:	andeq	r3, r1, r0, lsl #20
   137fc:	andeq	r3, r1, r0, lsl #19
   13800:	andeq	r3, r1, r8, lsr #18
   13804:	andeq	r3, r1, r0, lsl #20
   13808:	andeq	r3, r1, r4, asr r8
   1380c:	andeq	r3, r1, r0, lsl #20
   13810:	andeq	r3, r1, r0, lsl #20
   13814:	andeq	r3, r1, r0, lsl #20
   13818:	andeq	r3, r1, r0, lsl #20
   1381c:	andeq	r3, r1, r0, lsl #20
   13820:	andeq	r3, r1, r0, lsl #20
   13824:	andeq	r3, r1, r0, lsl #20
   13828:	andeq	r3, r1, r0, lsl #20
   1382c:	andeq	r3, r1, r8, lsr #18
   13830:	andeq	r3, r1, r0, lsl #20
   13834:	andeq	r3, r1, r0, lsl #20
   13838:	andeq	r3, r1, r0, lsl #20
   1383c:	andeq	r3, r1, r0, lsl #20
   13840:	andeq	r3, r1, r0, lsl #20
   13844:	andeq	r3, r1, r8, lsr #18
   13848:	andeq	r3, r1, r0, lsl #20
   1384c:	andeq	r3, r1, r0, lsl #20
   13850:	andeq	r3, r1, r8, lsr #18
   13854:	ldrb	r2, [r7, #1]
   13858:	cmp	r2, #70	; 0x46
   1385c:	beq	13d28 <__assert_fail@plt+0x2b24>
   13860:	cmp	r2, #76	; 0x4c
   13864:	beq	13a48 <__assert_fail@plt+0x2844>
   13868:	cmp	r2, #68	; 0x44
   1386c:	beq	13a48 <__assert_fail@plt+0x2844>
   13870:	sub	r2, r2, #48	; 0x30
   13874:	cmp	r2, #9
   13878:	add	r1, r7, #1
   1387c:	bhi	13e00 <__assert_fail@plt+0x2bfc>
   13880:	add	r0, r7, #2
   13884:	mov	r9, #0
   13888:	b	138a0 <__assert_fail@plt+0x269c>
   1388c:	mov	r2, r3
   13890:	mvn	r3, r3
   13894:	umull	ip, r3, sl, r3
   13898:	cmp	r9, r3, lsr #3
   1389c:	bhi	13d54 <__assert_fail@plt+0x2b50>
   138a0:	ldrb	r3, [r0]
   138a4:	add	r9, r9, r9, lsl #2
   138a8:	mov	r5, r0
   138ac:	sub	r3, r3, #48	; 0x30
   138b0:	cmp	r3, #9
   138b4:	add	r9, r2, r9, lsl #1
   138b8:	add	r0, r0, #1
   138bc:	bls	1388c <__assert_fail@plt+0x2688>
   138c0:	cmp	r1, r5
   138c4:	ldreq	r8, [r6, #92]	; 0x5c
   138c8:	beq	13a50 <__assert_fail@plt+0x284c>
   138cc:	cmp	r9, #8
   138d0:	bhi	138e4 <__assert_fail@plt+0x26e0>
   138d4:	add	r3, r6, r9, lsl #2
   138d8:	ldr	r8, [r3, #60]	; 0x3c
   138dc:	cmp	r8, #0
   138e0:	bne	13a50 <__assert_fail@plt+0x284c>
   138e4:	ldr	fp, [sp, #8]
   138e8:	ldr	r1, [pc, #1412]	; 13e74 <__assert_fail@plt+0x2c70>
   138ec:	mov	r2, #5
   138f0:	mov	r0, #0
   138f4:	bl	10fc4 <dcgettext@plt>
   138f8:	mov	r4, r0
   138fc:	mov	r0, fp
   13900:	bl	17720 <__assert_fail@plt+0x651c>
   13904:	mov	r1, #0
   13908:	mov	r2, r4
   1390c:	str	r9, [sp]
   13910:	mov	r3, r0
   13914:	mov	r0, r1
   13918:	bl	1103c <error@plt>
   1391c:	mov	r0, #0
   13920:	add	sp, sp, #20
   13924:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13928:	ldrb	r1, [r7, #1]
   1392c:	sub	r3, r1, #67	; 0x43
   13930:	cmp	r3, #16
   13934:	ldrls	pc, [pc, r3, lsl #2]
   13938:	b	13ca8 <__assert_fail@plt+0x2aa4>
   1393c:	andeq	r3, r1, r8, lsr #22
   13940:	andeq	r3, r1, r8, lsr #25
   13944:	andeq	r3, r1, r8, lsr #25
   13948:	andeq	r3, r1, r8, lsr #25
   1394c:	andeq	r3, r1, r8, lsr #25
   13950:	andeq	r3, r1, r8, lsr #25
   13954:	andeq	r3, r1, r8, lsr #21
   13958:	andeq	r3, r1, r8, lsr #25
   1395c:	andeq	r3, r1, r8, lsr #25
   13960:	andeq	r3, r1, r8, lsr #21
   13964:	andeq	r3, r1, r8, lsr #25
   13968:	andeq	r3, r1, r8, lsr #25
   1396c:	andeq	r3, r1, r8, lsr #25
   13970:	andeq	r3, r1, r8, lsr #25
   13974:	andeq	r3, r1, r8, lsr #25
   13978:	andeq	r3, r1, r8, lsr #25
   1397c:	andeq	r3, r1, r8, lsl fp
   13980:	ldr	r3, [pc, #1264]	; 13e78 <__assert_fail@plt+0x2c74>
   13984:	add	r5, r7, #1
   13988:	mov	r9, #3
   1398c:	mov	r2, #6
   13990:	mov	r8, #1
   13994:	stm	r4, {r2, r8}
   13998:	str	r3, [r4, #8]
   1399c:	str	r9, [r4, #24]
   139a0:	ldrb	r3, [r5]
   139a4:	cmp	r3, #122	; 0x7a
   139a8:	addeq	r5, r5, #1
   139ac:	moveq	r3, #1
   139b0:	movne	r3, #0
   139b4:	cmp	r7, r5
   139b8:	strb	r3, [r4, #21]
   139bc:	beq	13e30 <__assert_fail@plt+0x2c2c>
   139c0:	ldrb	r2, [r5]
   139c4:	ldr	r4, [r6, #12]
   139c8:	mov	r7, r5
   139cc:	add	r3, r4, #1
   139d0:	cmp	r2, #0
   139d4:	str	r3, [r6, #12]
   139d8:	bne	137c8 <__assert_fail@plt+0x25c4>
   139dc:	mov	r0, #1
   139e0:	add	sp, sp, #20
   139e4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   139e8:	add	r5, r7, #1
   139ec:	mov	r9, #3
   139f0:	ldr	r3, [pc, #1156]	; 13e7c <__assert_fail@plt+0x2c78>
   139f4:	mov	r2, #5
   139f8:	mov	r8, #1
   139fc:	b	13994 <__assert_fail@plt+0x2790>
   13a00:	mov	r2, #5
   13a04:	ldr	r1, [pc, #1140]	; 13e80 <__assert_fail@plt+0x2c7c>
   13a08:	mov	r0, #0
   13a0c:	ldr	fp, [sp, #8]
   13a10:	bl	10fc4 <dcgettext@plt>
   13a14:	ldrb	r5, [r7]
   13a18:	mov	r4, r0
   13a1c:	mov	r0, fp
   13a20:	bl	17720 <__assert_fail@plt+0x651c>
   13a24:	mov	r1, #0
   13a28:	mov	r3, r5
   13a2c:	mov	r2, r4
   13a30:	str	r0, [sp]
   13a34:	mov	r0, r1
   13a38:	bl	1103c <error@plt>
   13a3c:	mov	r0, #0
   13a40:	add	sp, sp, #20
   13a44:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13a48:	ldr	r8, [r6, #92]	; 0x5c
   13a4c:	add	r5, r7, #2
   13a50:	bl	111a4 <localeconv@plt>
   13a54:	ldr	r0, [r0]
   13a58:	ldrb	r3, [r0]
   13a5c:	cmp	r3, #0
   13a60:	moveq	r0, #1
   13a64:	beq	13a6c <__assert_fail@plt+0x2868>
   13a68:	bl	110c0 <strlen@plt>
   13a6c:	cmp	r8, #7
   13a70:	beq	13d34 <__assert_fail@plt+0x2b30>
   13a74:	cmp	r8, #8
   13a78:	beq	13d44 <__assert_fail@plt+0x2b40>
   13a7c:	cmp	r8, #6
   13a80:	beq	13c98 <__assert_fail@plt+0x2a94>
   13a84:	bl	111ec <abort@plt>
   13a88:	mov	r2, #32
   13a8c:	ldr	r1, [pc, #1008]	; 13e84 <__assert_fail@plt+0x2c80>
   13a90:	ldr	r0, [r6, #20]
   13a94:	bl	17d60 <__assert_fail@plt+0x6b5c>
   13a98:	ldr	r3, [r6, #12]
   13a9c:	mov	r4, r0
   13aa0:	str	r0, [r6, #20]
   13aa4:	b	137d8 <__assert_fail@plt+0x25d4>
   13aa8:	ldr	r8, [r6, #40]	; 0x28
   13aac:	add	r5, r7, #2
   13ab0:	mov	r9, #4
   13ab4:	sub	r2, r2, #100	; 0x64
   13ab8:	cmp	r2, #20
   13abc:	ldrls	pc, [pc, r2, lsl #2]
   13ac0:	b	13a84 <__assert_fail@plt+0x2880>
   13ac4:	andeq	r3, r1, r8, lsl ip
   13ac8:	andeq	r3, r1, r4, lsl #21
   13acc:	andeq	r3, r1, r4, lsl #21
   13ad0:	andeq	r3, r1, r4, lsl #21
   13ad4:	andeq	r3, r1, r4, lsl #21
   13ad8:	andeq	r3, r1, r4, lsl #21
   13adc:	andeq	r3, r1, r4, lsl #21
   13ae0:	andeq	r3, r1, r4, lsl #21
   13ae4:	andeq	r3, r1, r4, lsl #21
   13ae8:	andeq	r3, r1, r4, lsl #21
   13aec:	andeq	r3, r1, r4, lsl #21
   13af0:	andeq	r3, r1, ip, asr #23
   13af4:	andeq	r3, r1, r4, lsl #21
   13af8:	andeq	r3, r1, r4, lsl #21
   13afc:	andeq	r3, r1, r4, lsl #21
   13b00:	andeq	r3, r1, r4, lsl #21
   13b04:	andeq	r3, r1, r4, lsl #21
   13b08:	andeq	r3, r1, r4, lsl #23
   13b0c:	andeq	r3, r1, r4, lsl #21
   13b10:	andeq	r3, r1, r4, lsl #21
   13b14:	andeq	r3, r1, r8, lsr fp
   13b18:	add	r5, r7, #2
   13b1c:	ldr	r8, [r6, #32]
   13b20:	mov	r9, #2
   13b24:	b	13ab4 <__assert_fail@plt+0x28b0>
   13b28:	add	r5, r7, #2
   13b2c:	ldr	r8, [r6, #28]
   13b30:	mov	r9, #1
   13b34:	b	13ab4 <__assert_fail@plt+0x28b0>
   13b38:	ldr	r3, [pc, #840]	; 13e88 <__assert_fail@plt+0x2c84>
   13b3c:	cmp	r8, #5
   13b40:	add	r9, r3, r9, lsl #2
   13b44:	add	fp, r4, #12
   13b48:	ldr	r9, [r9, #380]	; 0x17c
   13b4c:	beq	13dec <__assert_fail@plt+0x2be8>
   13b50:	ldr	r2, [pc, #820]	; 13e8c <__assert_fail@plt+0x2c88>
   13b54:	cmp	r8, #4
   13b58:	ldr	r3, [pc, #816]	; 13e90 <__assert_fail@plt+0x2c8c>
   13b5c:	moveq	r3, r2
   13b60:	str	r3, [sp, #4]
   13b64:	mov	r2, #9
   13b68:	str	r9, [sp]
   13b6c:	ldr	r3, [pc, #800]	; 13e94 <__assert_fail@plt+0x2c90>
   13b70:	mov	r1, #1
   13b74:	mov	r0, fp
   13b78:	bl	110e4 <__sprintf_chk@plt>
   13b7c:	mov	r2, #3
   13b80:	b	13c5c <__assert_fail@plt+0x2a58>
   13b84:	ldr	r3, [pc, #764]	; 13e88 <__assert_fail@plt+0x2c84>
   13b88:	cmp	r8, #5
   13b8c:	add	r9, r3, r9, lsl #2
   13b90:	add	fp, r4, #12
   13b94:	ldr	r9, [r9, #312]	; 0x138
   13b98:	beq	13de4 <__assert_fail@plt+0x2be0>
   13b9c:	ldr	r2, [pc, #756]	; 13e98 <__assert_fail@plt+0x2c94>
   13ba0:	cmp	r8, #4
   13ba4:	ldr	r3, [pc, #752]	; 13e9c <__assert_fail@plt+0x2c98>
   13ba8:	moveq	r3, r2
   13bac:	str	r3, [sp]
   13bb0:	mov	r2, #9
   13bb4:	ldr	r3, [pc, #740]	; 13ea0 <__assert_fail@plt+0x2c9c>
   13bb8:	mov	r1, #1
   13bbc:	mov	r0, fp
   13bc0:	bl	110e4 <__sprintf_chk@plt>
   13bc4:	mov	r2, #1
   13bc8:	b	13c5c <__assert_fail@plt+0x2a58>
   13bcc:	ldr	r3, [pc, #692]	; 13e88 <__assert_fail@plt+0x2c84>
   13bd0:	cmp	r8, #5
   13bd4:	add	r9, r3, r9, lsl #2
   13bd8:	add	fp, r4, #12
   13bdc:	ldr	r9, [r9, #244]	; 0xf4
   13be0:	beq	13ddc <__assert_fail@plt+0x2bd8>
   13be4:	ldr	r2, [pc, #696]	; 13ea4 <__assert_fail@plt+0x2ca0>
   13be8:	cmp	r8, #4
   13bec:	ldr	r3, [pc, #692]	; 13ea8 <__assert_fail@plt+0x2ca4>
   13bf0:	moveq	r3, r2
   13bf4:	str	r3, [sp, #4]
   13bf8:	mov	r2, #9
   13bfc:	str	r9, [sp]
   13c00:	ldr	r3, [pc, #652]	; 13e94 <__assert_fail@plt+0x2c90>
   13c04:	mov	r1, #1
   13c08:	mov	r0, fp
   13c0c:	bl	110e4 <__sprintf_chk@plt>
   13c10:	mov	r2, #2
   13c14:	b	13c5c <__assert_fail@plt+0x2a58>
   13c18:	ldr	r3, [pc, #616]	; 13e88 <__assert_fail@plt+0x2c84>
   13c1c:	cmp	r8, #5
   13c20:	add	r9, r3, r9, lsl #2
   13c24:	add	fp, r4, #12
   13c28:	ldr	r9, [r9, #176]	; 0xb0
   13c2c:	beq	13dd4 <__assert_fail@plt+0x2bd0>
   13c30:	ldr	r2, [pc, #628]	; 13eac <__assert_fail@plt+0x2ca8>
   13c34:	cmp	r8, #4
   13c38:	ldr	r3, [pc, #624]	; 13eb0 <__assert_fail@plt+0x2cac>
   13c3c:	moveq	r3, r2
   13c40:	str	r3, [sp]
   13c44:	mov	r2, #9
   13c48:	ldr	r3, [pc, #592]	; 13ea0 <__assert_fail@plt+0x2c9c>
   13c4c:	mov	r1, #1
   13c50:	mov	r0, fp
   13c54:	bl	110e4 <__sprintf_chk@plt>
   13c58:	mov	r2, #0
   13c5c:	mov	r0, fp
   13c60:	str	r2, [sp, #12]
   13c64:	bl	110c0 <strlen@plt>
   13c68:	ldr	r2, [sp, #12]
   13c6c:	cmp	r0, #8
   13c70:	bhi	13e44 <__assert_fail@plt+0x2c40>
   13c74:	sub	r3, r8, #1
   13c78:	cmp	r3, #4
   13c7c:	ldrls	pc, [pc, r3, lsl #2]
   13c80:	b	13a84 <__assert_fail@plt+0x2880>
   13c84:	andeq	r3, r1, r0, asr #27
   13c88:	andeq	r3, r1, ip, lsr #27
   13c8c:	andeq	r3, r1, r4, lsr #27
   13c90:	muleq	r1, ip, sp
   13c94:	muleq	r1, r4, sp
   13c98:	add	r9, r0, #14
   13c9c:	ldr	r3, [pc, #528]	; 13eb4 <__assert_fail@plt+0x2cb0>
   13ca0:	mov	r2, #4
   13ca4:	b	13994 <__assert_fail@plt+0x2790>
   13ca8:	sub	r1, r1, #48	; 0x30
   13cac:	cmp	r1, #9
   13cb0:	add	r0, r7, #1
   13cb4:	bhi	13e0c <__assert_fail@plt+0x2c08>
   13cb8:	add	ip, r7, #2
   13cbc:	mov	r9, #0
   13cc0:	b	13cd8 <__assert_fail@plt+0x2ad4>
   13cc4:	mov	r1, r3
   13cc8:	mvn	r3, r3
   13ccc:	umull	lr, r3, sl, r3
   13cd0:	cmp	r9, r3, lsr #3
   13cd4:	bhi	13d54 <__assert_fail@plt+0x2b50>
   13cd8:	ldrb	r3, [ip]
   13cdc:	add	r9, r9, r9, lsl #2
   13ce0:	mov	r5, ip
   13ce4:	sub	r3, r3, #48	; 0x30
   13ce8:	cmp	r3, #9
   13cec:	add	r9, r1, r9, lsl #1
   13cf0:	add	ip, ip, #1
   13cf4:	bls	13cc4 <__assert_fail@plt+0x2ac0>
   13cf8:	cmp	r0, r5
   13cfc:	beq	13df4 <__assert_fail@plt+0x2bf0>
   13d00:	cmp	r9, #8
   13d04:	bhi	13d18 <__assert_fail@plt+0x2b14>
   13d08:	add	r3, r6, r9, lsl #2
   13d0c:	ldr	r8, [r3, #24]
   13d10:	cmp	r8, #0
   13d14:	bne	13ab4 <__assert_fail@plt+0x28b0>
   13d18:	ldr	fp, [sp, #8]
   13d1c:	mov	r2, #5
   13d20:	ldr	r1, [pc, #400]	; 13eb8 <__assert_fail@plt+0x2cb4>
   13d24:	b	138f0 <__assert_fail@plt+0x26ec>
   13d28:	add	r5, r7, #2
   13d2c:	ldr	r8, [r6, #76]	; 0x4c
   13d30:	b	13a50 <__assert_fail@plt+0x284c>
   13d34:	add	r9, r0, #23
   13d38:	ldr	r3, [pc, #380]	; 13ebc <__assert_fail@plt+0x2cb8>
   13d3c:	mov	r2, #4
   13d40:	b	13994 <__assert_fail@plt+0x2790>
   13d44:	add	r9, r0, #23
   13d48:	ldr	r3, [pc, #368]	; 13ec0 <__assert_fail@plt+0x2cbc>
   13d4c:	mov	r2, #4
   13d50:	b	13994 <__assert_fail@plt+0x2790>
   13d54:	mov	r2, #5
   13d58:	ldr	r1, [pc, #356]	; 13ec4 <__assert_fail@plt+0x2cc0>
   13d5c:	mov	r0, #0
   13d60:	ldr	fp, [sp, #8]
   13d64:	bl	10fc4 <dcgettext@plt>
   13d68:	mov	r4, r0
   13d6c:	mov	r0, fp
   13d70:	bl	17720 <__assert_fail@plt+0x651c>
   13d74:	mov	r1, #0
   13d78:	mov	r2, r4
   13d7c:	mov	r3, r0
   13d80:	mov	r0, r1
   13d84:	bl	1103c <error@plt>
   13d88:	mov	r0, #0
   13d8c:	add	sp, sp, #20
   13d90:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13d94:	ldr	r3, [pc, #300]	; 13ec8 <__assert_fail@plt+0x2cc4>
   13d98:	b	13994 <__assert_fail@plt+0x2790>
   13d9c:	ldr	r3, [pc, #296]	; 13ecc <__assert_fail@plt+0x2cc8>
   13da0:	b	13994 <__assert_fail@plt+0x2790>
   13da4:	ldr	r3, [pc, #292]	; 13ed0 <__assert_fail@plt+0x2ccc>
   13da8:	b	13994 <__assert_fail@plt+0x2790>
   13dac:	ldr	r1, [pc, #288]	; 13ed4 <__assert_fail@plt+0x2cd0>
   13db0:	cmp	r2, #0
   13db4:	ldr	r3, [pc, #284]	; 13ed8 <__assert_fail@plt+0x2cd4>
   13db8:	moveq	r3, r1
   13dbc:	b	13994 <__assert_fail@plt+0x2790>
   13dc0:	ldr	r1, [pc, #276]	; 13edc <__assert_fail@plt+0x2cd8>
   13dc4:	cmp	r2, #0
   13dc8:	ldr	r3, [pc, #272]	; 13ee0 <__assert_fail@plt+0x2cdc>
   13dcc:	moveq	r3, r1
   13dd0:	b	13994 <__assert_fail@plt+0x2790>
   13dd4:	ldr	r3, [pc, #264]	; 13ee4 <__assert_fail@plt+0x2ce0>
   13dd8:	b	13c40 <__assert_fail@plt+0x2a3c>
   13ddc:	ldr	r3, [pc, #260]	; 13ee8 <__assert_fail@plt+0x2ce4>
   13de0:	b	13bf4 <__assert_fail@plt+0x29f0>
   13de4:	ldr	r3, [pc, #256]	; 13eec <__assert_fail@plt+0x2ce8>
   13de8:	b	13bac <__assert_fail@plt+0x29a8>
   13dec:	ldr	r3, [pc, #252]	; 13ef0 <__assert_fail@plt+0x2cec>
   13df0:	b	13b60 <__assert_fail@plt+0x295c>
   13df4:	ldr	r8, [r6, #40]	; 0x28
   13df8:	mov	r9, #4
   13dfc:	b	13ab4 <__assert_fail@plt+0x28b0>
   13e00:	ldr	r8, [r6, #92]	; 0x5c
   13e04:	mov	r5, r1
   13e08:	b	13a50 <__assert_fail@plt+0x284c>
   13e0c:	ldr	r8, [r6, #40]	; 0x28
   13e10:	mov	r5, r0
   13e14:	mov	r9, #4
   13e18:	b	13ab4 <__assert_fail@plt+0x28b0>
   13e1c:	ldr	r3, [pc, #208]	; 13ef4 <__assert_fail@plt+0x2cf0>
   13e20:	mov	r2, #648	; 0x288
   13e24:	ldr	r1, [pc, #204]	; 13ef8 <__assert_fail@plt+0x2cf4>
   13e28:	ldr	r0, [pc, #204]	; 13efc <__assert_fail@plt+0x2cf8>
   13e2c:	bl	11204 <__assert_fail@plt>
   13e30:	ldr	r3, [pc, #200]	; 13f00 <__assert_fail@plt+0x2cfc>
   13e34:	ldr	r2, [pc, #200]	; 13f04 <__assert_fail@plt+0x2d00>
   13e38:	ldr	r1, [pc, #184]	; 13ef8 <__assert_fail@plt+0x2cf4>
   13e3c:	ldr	r0, [pc, #196]	; 13f08 <__assert_fail@plt+0x2d04>
   13e40:	bl	11204 <__assert_fail@plt>
   13e44:	ldr	r3, [pc, #168]	; 13ef4 <__assert_fail@plt+0x2cf0>
   13e48:	ldr	r2, [pc, #188]	; 13f0c <__assert_fail@plt+0x2d08>
   13e4c:	ldr	r1, [pc, #164]	; 13ef8 <__assert_fail@plt+0x2cf4>
   13e50:	ldr	r0, [pc, #184]	; 13f10 <__assert_fail@plt+0x2d0c>
   13e54:	bl	11204 <__assert_fail@plt>
   13e58:	ldr	r3, [pc, #160]	; 13f00 <__assert_fail@plt+0x2cfc>
   13e5c:	ldr	r2, [pc, #176]	; 13f14 <__assert_fail@plt+0x2d10>
   13e60:	ldr	r1, [pc, #144]	; 13ef8 <__assert_fail@plt+0x2cf4>
   13e64:	ldr	r0, [pc, #172]	; 13f18 <__assert_fail@plt+0x2d14>
   13e68:	bl	11204 <__assert_fail@plt>
   13e6c:	muleq	r2, r0, r1
   13e70:	stclgt	12, cr12, [ip], {205}	; 0xcd
   13e74:	andeq	r9, r1, r8, asr #15
   13e78:	andeq	r3, r1, ip, lsl pc
   13e7c:	andeq	r2, r1, r4, ror fp
   13e80:	andeq	r9, r1, ip, lsl r8
   13e84:	andeq	ip, r2, r0, lsr #3
   13e88:	andeq	r9, r1, ip, ror r3
   13e8c:	andeq	r9, r1, r4, lsl #14
   13e90:	andeq	sl, r1, r0, lsr #19
   13e94:	andeq	r9, r1, r8, lsl #15
   13e98:	strdeq	r9, [r1], -r8
   13e9c:	strdeq	r9, [r1], -ip
   13ea0:	andeq	r9, r1, r0, lsl #15
   13ea4:	andeq	r9, r1, ip, ror #13
   13ea8:	strdeq	r9, [r1], -r0
   13eac:	andeq	r9, r1, r0, ror #13
   13eb0:	andeq	r9, r1, r4, ror #13
   13eb4:	andeq	r3, r1, r4, lsr r6
   13eb8:	andeq	r9, r1, r0, lsr r7
   13ebc:	ldrdeq	r3, [r1], -r0
   13ec0:	andeq	r3, r1, ip, ror #6
   13ec4:	andeq	r9, r1, r4, asr r8
   13ec8:	andeq	r2, r1, r8, lsl #25
   13ecc:	muleq	r1, ip, sp
   13ed0:	andeq	r2, r1, r8, lsr #29
   13ed4:	andeq	r3, r1, r4, asr #1
   13ed8:			; <UNDEFINED> instruction: 0x00012fb4
   13edc:	andeq	r3, r1, r0, lsr #5
   13ee0:	ldrdeq	r3, [r1], -r4
   13ee4:	ldrdeq	r9, [r1], -ip
   13ee8:	andeq	r9, r1, r8, ror #13
   13eec:	strdeq	r9, [r1], -r4
   13ef0:	andeq	r9, r1, r0, lsl #14
   13ef4:	andeq	r9, r1, r8, lsl r4
   13ef8:	andeq	r9, r1, r8, lsl #14
   13efc:	andeq	r9, r1, r0, lsr #14
   13f00:	andeq	r9, r1, r0, lsl #8
   13f04:	andeq	r0, r0, r5, ror #7
   13f08:	andeq	r9, r1, r8, asr #16
   13f0c:	andeq	r0, r0, fp, ror #5
   13f10:	muleq	r1, r4, r7
   13f14:	ldrdeq	r0, [r0], -r9
   13f18:	andeq	r9, r1, r4, lsl r7
   13f1c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13f20:	mov	r5, #0
   13f24:	mov	r7, r5
   13f28:	mov	r5, #0
   13f2c:	sub	sp, sp, #52	; 0x34
   13f30:	mov	r4, r1
   13f34:	cmp	r7, r5
   13f38:	cmpeq	r0, r1
   13f3c:	strd	r4, [sp, #24]
   13f40:	ldr	r4, [sp, #92]	; 0x5c
   13f44:	bls	14034 <__assert_fail@plt+0x2e30>
   13f48:	mov	r8, r4
   13f4c:	asr	r9, r4, #31
   13f50:	mov	r6, r0
   13f54:	strd	r8, [sp, #16]
   13f58:	ldr	r3, [sp, #20]
   13f5c:	subs	r8, r0, #1
   13f60:	sbc	r9, r7, #0
   13f64:	mul	r3, r8, r3
   13f68:	strd	r6, [sp, #8]
   13f6c:	mov	r7, r9
   13f70:	umull	r8, r9, r8, r4
   13f74:	mla	r3, r4, r7, r3
   13f78:	ldrd	r6, [sp, #8]
   13f7c:	add	r9, r3, r9
   13f80:	add	sl, r2, r0
   13f84:	str	sl, [sp, #32]
   13f88:	ldrd	r2, [sp, #8]
   13f8c:	mov	r0, r8
   13f90:	mov	r1, r9
   13f94:	bl	19180 <__assert_fail@plt+0x7f7c>
   13f98:	ldr	r2, [sp, #32]
   13f9c:	rsb	r3, r6, #0
   13fa0:	ldrb	r3, [r2, r3]
   13fa4:	mov	r5, r0
   13fa8:	cmp	r3, #13
   13fac:	ldrls	pc, [pc, r3, lsl #2]
   13fb0:	b	14074 <__assert_fail@plt+0x2e70>
   13fb4:	andeq	r4, r1, ip, lsr r0
   13fb8:	andeq	r4, r1, r4, ror r0
   13fbc:	andeq	r4, r1, r4, ror r0
   13fc0:	andeq	r4, r1, r4, ror r0
   13fc4:	andeq	r4, r1, r4, ror r0
   13fc8:	andeq	r4, r1, r4, ror r0
   13fcc:	andeq	r4, r1, r4, ror r0
   13fd0:	andeq	r3, r1, ip, ror #31
   13fd4:	andeq	r4, r1, ip, rrx
   13fd8:	andeq	r4, r1, r4, rrx
   13fdc:	andeq	r4, r1, ip, asr r0
   13fe0:	andeq	r4, r1, r4, asr r0
   13fe4:	andeq	r4, r1, ip, asr #32
   13fe8:	andeq	r4, r1, r4, asr #32
   13fec:	ldr	r2, [pc, #196]	; 140b8 <__assert_fail@plt+0x2eb4>
   13ff0:	ldrd	sl, [sp, #16]
   13ff4:	ldr	r3, [sp, #88]	; 0x58
   13ff8:	subs	r6, r6, #1
   13ffc:	sub	r1, r4, r5
   14000:	add	r1, r1, r3
   14004:	sbc	r7, r7, #0
   14008:	ldr	r0, [pc, #172]	; 140bc <__assert_fail@plt+0x2eb8>
   1400c:	subs	sl, r8, sl
   14010:	sbc	fp, r9, fp
   14014:	bl	1825c <__assert_fail@plt+0x7058>
   14018:	ldrd	r2, [sp, #24]
   1401c:	mov	r8, sl
   14020:	mov	r9, fp
   14024:	cmp	r3, r7
   14028:	cmpeq	r2, r6
   1402c:	mov	r4, r5
   14030:	bcc	13f88 <__assert_fail@plt+0x2d84>
   14034:	add	sp, sp, #52	; 0x34
   14038:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1403c:	ldr	r2, [pc, #124]	; 140c0 <__assert_fail@plt+0x2ebc>
   14040:	b	13ff0 <__assert_fail@plt+0x2dec>
   14044:	ldr	r2, [pc, #120]	; 140c4 <__assert_fail@plt+0x2ec0>
   14048:	b	13ff0 <__assert_fail@plt+0x2dec>
   1404c:	ldr	r2, [pc, #116]	; 140c8 <__assert_fail@plt+0x2ec4>
   14050:	b	13ff0 <__assert_fail@plt+0x2dec>
   14054:	ldr	r2, [pc, #112]	; 140cc <__assert_fail@plt+0x2ec8>
   14058:	b	13ff0 <__assert_fail@plt+0x2dec>
   1405c:	ldr	r2, [pc, #108]	; 140d0 <__assert_fail@plt+0x2ecc>
   14060:	b	13ff0 <__assert_fail@plt+0x2dec>
   14064:	ldr	r2, [pc, #104]	; 140d4 <__assert_fail@plt+0x2ed0>
   14068:	b	13ff0 <__assert_fail@plt+0x2dec>
   1406c:	ldr	r2, [pc, #100]	; 140d8 <__assert_fail@plt+0x2ed4>
   14070:	b	13ff0 <__assert_fail@plt+0x2dec>
   14074:	str	r3, [sp, #36]	; 0x24
   14078:	bl	110a8 <__ctype_b_loc@plt>
   1407c:	ldr	r3, [sp, #36]	; 0x24
   14080:	mov	r2, #4
   14084:	mov	r1, #1
   14088:	lsl	ip, r3, #1
   1408c:	ldr	lr, [r0]
   14090:	add	r0, sp, #44	; 0x2c
   14094:	ldrh	ip, [lr, ip]
   14098:	str	r3, [sp]
   1409c:	ldr	r3, [pc, #56]	; 140dc <__assert_fail@plt+0x2ed8>
   140a0:	tst	ip, #16384	; 0x4000
   140a4:	ldr	ip, [pc, #52]	; 140e0 <__assert_fail@plt+0x2edc>
   140a8:	movne	r3, ip
   140ac:	bl	110e4 <__sprintf_chk@plt>
   140b0:	add	r2, sp, #44	; 0x2c
   140b4:	b	13ff0 <__assert_fail@plt+0x2dec>
   140b8:	andeq	r9, r1, ip, ror r8
   140bc:	ldrdeq	r9, [r1], -r8
   140c0:	andeq	r9, r1, r8, ror r8
   140c4:	andeq	r9, r1, ip, lsl #17
   140c8:	andeq	r9, r1, r4, lsl #17
   140cc:	muleq	r1, r4, r8
   140d0:	andeq	r9, r1, r8, lsl #17
   140d4:	muleq	r1, r0, r8
   140d8:	andeq	r9, r1, r0, lsl #17
   140dc:	andeq	r9, r1, r0, ror r8
   140e0:	andeq	r9, r1, ip, ror #16
   140e4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   140e8:	mov	sl, #1
   140ec:	ldr	r4, [pc, #260]	; 141f8 <__assert_fail@plt+0x2ff4>
   140f0:	ldr	r6, [pc, #260]	; 141fc <__assert_fail@plt+0x2ff8>
   140f4:	ldr	r9, [pc, #260]	; 14200 <__assert_fail@plt+0x2ffc>
   140f8:	ldr	r7, [pc, #260]	; 14204 <__assert_fail@plt+0x3000>
   140fc:	ldr	r8, [pc, #260]	; 14208 <__assert_fail@plt+0x3004>
   14100:	sub	sp, sp, #12
   14104:	mov	fp, #3
   14108:	ldr	r3, [r4, #96]	; 0x60
   1410c:	mov	r1, r6
   14110:	add	r2, r3, #4
   14114:	ldr	r5, [r3]
   14118:	subs	r0, r5, #0
   1411c:	str	r5, [r4, #100]	; 0x64
   14120:	beq	14194 <__assert_fail@plt+0x2f90>
   14124:	str	r2, [r4, #96]	; 0x60
   14128:	bl	10f34 <strcmp@plt>
   1412c:	mov	r2, #5
   14130:	mov	r1, r7
   14134:	cmp	r0, #0
   14138:	bne	14160 <__assert_fail@plt+0x2f5c>
   1413c:	bl	10fc4 <dcgettext@plt>
   14140:	ldr	r5, [r8]
   14144:	mov	r3, #1
   14148:	str	r5, [r4, #104]	; 0x68
   1414c:	strb	r3, [r4, #108]	; 0x6c
   14150:	str	r0, [r4, #100]	; 0x64
   14154:	cmp	r5, #0
   14158:	beq	14108 <__assert_fail@plt+0x2f04>
   1415c:	b	1417c <__assert_fail@plt+0x2f78>
   14160:	mov	r0, r5
   14164:	mov	r1, r9
   14168:	bl	111bc <fopen64@plt>
   1416c:	cmp	r0, #0
   14170:	mov	r5, r0
   14174:	str	r0, [r4, #104]	; 0x68
   14178:	beq	141a0 <__assert_fail@plt+0x2f9c>
   1417c:	ldrb	r3, [r4, #109]	; 0x6d
   14180:	cmp	r3, #0
   14184:	beq	14194 <__assert_fail@plt+0x2f90>
   14188:	ldrb	r3, [r4, #110]	; 0x6e
   1418c:	cmp	r3, #0
   14190:	beq	141dc <__assert_fail@plt+0x2fd8>
   14194:	mov	r0, sl
   14198:	add	sp, sp, #12
   1419c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   141a0:	bl	110d8 <__errno_location@plt>
   141a4:	ldr	r2, [r4, #100]	; 0x64
   141a8:	mov	r1, fp
   141ac:	mov	sl, #0
   141b0:	ldr	r3, [r0]
   141b4:	mov	r0, r5
   141b8:	str	r3, [sp, #4]
   141bc:	bl	1759c <__assert_fail@plt+0x6398>
   141c0:	ldr	r2, [pc, #68]	; 1420c <__assert_fail@plt+0x3008>
   141c4:	ldr	r1, [sp, #4]
   141c8:	mov	r3, r0
   141cc:	mov	r0, r5
   141d0:	bl	1103c <error@plt>
   141d4:	ldr	r5, [r4, #104]	; 0x68
   141d8:	b	14154 <__assert_fail@plt+0x2f50>
   141dc:	mov	r0, r5
   141e0:	mov	r1, r3
   141e4:	mov	r2, #2
   141e8:	bl	110fc <setvbuf@plt>
   141ec:	mov	r0, sl
   141f0:	add	sp, sp, #12
   141f4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   141f8:	muleq	r2, r0, r1
   141fc:	muleq	r1, r8, r8
   14200:	andeq	r9, r1, ip, lsr #17
   14204:	muleq	r1, ip, r8
   14208:	andeq	ip, r2, r0, lsl #3
   1420c:	andeq	sl, r1, r4, lsl #21
   14210:	push	{r4, r5, r6, lr}
   14214:	ldr	r5, [pc, #224]	; 142fc <__assert_fail@plt+0x30f8>
   14218:	ldr	r6, [r5, #104]	; 0x68
   1421c:	cmp	r6, #0
   14220:	moveq	r0, #1
   14224:	beq	1426c <__assert_fail@plt+0x3068>
   14228:	ldr	r3, [r5, #96]	; 0x60
   1422c:	ldr	r2, [r6]
   14230:	mov	r4, r0
   14234:	tst	r2, #32
   14238:	ldr	r1, [pc, #192]	; 14300 <__assert_fail@plt+0x30fc>
   1423c:	ldr	r0, [r3, #-4]
   14240:	moveq	r4, #0
   14244:	bl	10f34 <strcmp@plt>
   14248:	cmp	r0, #0
   1424c:	mov	r0, r6
   14250:	bne	142a8 <__assert_fail@plt+0x30a4>
   14254:	bl	111b0 <clearerr_unlocked@plt>
   14258:	cmp	r4, #0
   1425c:	moveq	r0, #1
   14260:	bne	142d0 <__assert_fail@plt+0x30cc>
   14264:	mov	r3, #0
   14268:	str	r3, [r5, #104]	; 0x68
   1426c:	ldr	r3, [pc, #144]	; 14304 <__assert_fail@plt+0x3100>
   14270:	ldr	r3, [r3]
   14274:	ldr	r3, [r3]
   14278:	tst	r3, #32
   1427c:	popeq	{r4, r5, r6, pc}
   14280:	mov	r2, #5
   14284:	ldr	r1, [pc, #124]	; 14308 <__assert_fail@plt+0x3104>
   14288:	mov	r0, #0
   1428c:	bl	10fc4 <dcgettext@plt>
   14290:	mov	r1, #0
   14294:	mov	r2, r0
   14298:	mov	r0, r1
   1429c:	bl	1103c <error@plt>
   142a0:	mov	r0, #0
   142a4:	pop	{r4, r5, r6, pc}
   142a8:	bl	153d0 <__assert_fail@plt+0x41cc>
   142ac:	cmp	r0, #0
   142b0:	beq	14258 <__assert_fail@plt+0x3054>
   142b4:	cmp	r4, #0
   142b8:	bne	142d0 <__assert_fail@plt+0x30cc>
   142bc:	bl	110d8 <__errno_location@plt>
   142c0:	ldr	r4, [r0]
   142c4:	cmp	r4, #0
   142c8:	moveq	r0, #1
   142cc:	beq	14264 <__assert_fail@plt+0x3060>
   142d0:	ldr	r2, [r5, #100]	; 0x64
   142d4:	mov	r1, #3
   142d8:	mov	r0, #0
   142dc:	bl	1759c <__assert_fail@plt+0x6398>
   142e0:	mov	r1, r4
   142e4:	ldr	r2, [pc, #32]	; 1430c <__assert_fail@plt+0x3108>
   142e8:	mov	r3, r0
   142ec:	mov	r0, #0
   142f0:	bl	1103c <error@plt>
   142f4:	mov	r0, #0
   142f8:	b	14264 <__assert_fail@plt+0x3060>
   142fc:	muleq	r2, r0, r1
   14300:	muleq	r1, r8, r8
   14304:	andeq	ip, r2, r4, lsl #3
   14308:			; <UNDEFINED> instruction: 0x000198b0
   1430c:	andeq	sl, r1, r4, lsl #21
   14310:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   14314:	mov	r4, r0
   14318:	mov	r5, r1
   1431c:	sub	sp, sp, #8256	; 0x2040
   14320:	orrs	r3, r4, r5
   14324:	sub	sp, sp, #52	; 0x34
   14328:	beq	144d8 <__assert_fail@plt+0x32d4>
   1432c:	ldr	r7, [pc, #464]	; 14504 <__assert_fail@plt+0x3300>
   14330:	ldr	r6, [r7, #104]	; 0x68
   14334:	cmp	r6, #0
   14338:	beq	14464 <__assert_fail@plt+0x3260>
   1433c:	mov	sl, #1
   14340:	mov	r8, sl
   14344:	mov	fp, #0
   14348:	mov	r9, #8192	; 0x2000
   1434c:	mov	r0, r6
   14350:	bl	11138 <fileno@plt>
   14354:	add	r2, sp, #8
   14358:	mov	r1, r0
   1435c:	mov	r0, #3
   14360:	bl	10ff4 <__fxstat64@plt>
   14364:	cmp	r0, #0
   14368:	bne	14484 <__assert_fail@plt+0x3280>
   1436c:	ldr	r3, [sp, #24]
   14370:	and	r3, r3, #53248	; 0xd000
   14374:	cmp	r3, #32768	; 0x8000
   14378:	beq	14408 <__assert_fail@plt+0x3204>
   1437c:	str	r8, [sp]
   14380:	mov	r0, r6
   14384:	mov	r2, r4
   14388:	mov	r3, r5
   1438c:	bl	15528 <__assert_fail@plt+0x4324>
   14390:	cmp	r0, #0
   14394:	beq	143f8 <__assert_fail@plt+0x31f4>
   14398:	mov	r6, #8192	; 0x2000
   1439c:	mov	r3, #0
   143a0:	cmp	r3, r5
   143a4:	cmpeq	r6, r4
   143a8:	ldr	r2, [r7, #104]	; 0x68
   143ac:	movhi	r6, r4
   143b0:	str	r2, [sp]
   143b4:	mov	r3, r6
   143b8:	mov	r2, r8
   143bc:	mov	r1, r9
   143c0:	add	r0, sp, #112	; 0x70
   143c4:	bl	11198 <__fread_unlocked_chk@plt>
   143c8:	subs	r4, r4, r0
   143cc:	sbc	r5, r5, #0
   143d0:	cmp	r6, r0
   143d4:	beq	143f0 <__assert_fail@plt+0x31ec>
   143d8:	ldr	r3, [r7, #104]	; 0x68
   143dc:	ldr	r3, [r3]
   143e0:	tst	r3, #32
   143e4:	bne	144b8 <__assert_fail@plt+0x32b4>
   143e8:	tst	r3, #16
   143ec:	bne	144cc <__assert_fail@plt+0x32c8>
   143f0:	orrs	r3, r4, r5
   143f4:	bne	1439c <__assert_fail@plt+0x3198>
   143f8:	mov	r0, sl
   143fc:	add	sp, sp, #8256	; 0x2040
   14400:	add	sp, sp, #52	; 0x34
   14404:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14408:	ldr	r2, [sp, #64]	; 0x40
   1440c:	ldrd	r0, [sp, #56]	; 0x38
   14410:	sub	r3, r2, #1
   14414:	cmn	r3, #-536870911	; 0xe0000001
   14418:	movhi	r2, #512	; 0x200
   1441c:	cmp	r2, r0
   14420:	asr	r3, r2, #31
   14424:	sbcs	r3, r3, r1
   14428:	bge	14398 <__assert_fail@plt+0x3194>
   1442c:	cmp	r1, r5
   14430:	cmpeq	r0, r4
   14434:	bcs	144e0 <__assert_fail@plt+0x32dc>
   14438:	subs	r4, r4, r0
   1443c:	sbc	r5, r5, r1
   14440:	mov	r0, fp
   14444:	bl	14210 <__assert_fail@plt+0x300c>
   14448:	and	sl, sl, r0
   1444c:	bl	140e4 <__assert_fail@plt+0x2ee0>
   14450:	ldr	r6, [r7, #104]	; 0x68
   14454:	uxtb	sl, sl
   14458:	cmp	r6, #0
   1445c:	and	sl, sl, r0
   14460:	bne	1434c <__assert_fail@plt+0x3148>
   14464:	mov	r2, #5
   14468:	ldr	r1, [pc, #152]	; 14508 <__assert_fail@plt+0x3304>
   1446c:	mov	r0, #0
   14470:	bl	10fc4 <dcgettext@plt>
   14474:	mov	r1, #0
   14478:	mov	r2, r0
   1447c:	mov	r0, #1
   14480:	bl	1103c <error@plt>
   14484:	bl	110d8 <__errno_location@plt>
   14488:	ldr	r2, [r7, #100]	; 0x64
   1448c:	mov	r1, #3
   14490:	mov	sl, #0
   14494:	ldr	r6, [r0]
   14498:	mov	r0, fp
   1449c:	bl	1759c <__assert_fail@plt+0x6398>
   144a0:	ldr	r2, [pc, #100]	; 1450c <__assert_fail@plt+0x3308>
   144a4:	mov	r1, r6
   144a8:	mov	r3, r0
   144ac:	mov	r0, fp
   144b0:	bl	1103c <error@plt>
   144b4:	b	14440 <__assert_fail@plt+0x323c>
   144b8:	mov	sl, #0
   144bc:	mov	r0, sl
   144c0:	add	sp, sp, #8256	; 0x2040
   144c4:	add	sp, sp, #52	; 0x34
   144c8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   144cc:	orrs	r3, r4, r5
   144d0:	bne	14440 <__assert_fail@plt+0x323c>
   144d4:	b	143f8 <__assert_fail@plt+0x31f4>
   144d8:	mov	sl, #1
   144dc:	b	143f8 <__assert_fail@plt+0x31f4>
   144e0:	mov	r1, #1
   144e4:	mov	r2, r4
   144e8:	mov	r3, r5
   144ec:	mov	r0, r6
   144f0:	str	r1, [sp]
   144f4:	bl	15528 <__assert_fail@plt+0x4324>
   144f8:	cmp	r0, #0
   144fc:	movne	sl, #0
   14500:	b	143f8 <__assert_fail@plt+0x31f4>
   14504:	muleq	r2, r0, r1
   14508:			; <UNDEFINED> instruction: 0x000198bc
   1450c:	andeq	sl, r1, r4, lsl #21
   14510:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   14514:	subs	r7, r0, #0
   14518:	beq	145b8 <__assert_fail@plt+0x33b4>
   1451c:	ldr	r6, [pc, #168]	; 145cc <__assert_fail@plt+0x33c8>
   14520:	ldr	r3, [r6, #112]	; 0x70
   14524:	cmp	r7, r3
   14528:	bhi	145b8 <__assert_fail@plt+0x33b4>
   1452c:	ldr	r3, [r6, #104]	; 0x68
   14530:	mov	r0, #0
   14534:	cmp	r3, r0
   14538:	mov	r4, r2
   1453c:	str	r0, [r2]
   14540:	beq	145b0 <__assert_fail@plt+0x33ac>
   14544:	mov	r5, #1
   14548:	mov	r8, r1
   1454c:	mov	r9, r5
   14550:	b	14580 <__assert_fail@plt+0x337c>
   14554:	bl	110d8 <__errno_location@plt>
   14558:	ldr	r0, [r0]
   1455c:	bl	14210 <__assert_fail@plt+0x300c>
   14560:	mov	sl, r0
   14564:	bl	140e4 <__assert_fail@plt+0x2ee0>
   14568:	ldr	r3, [r6, #104]	; 0x68
   1456c:	cmp	r3, #0
   14570:	and	r0, r0, sl
   14574:	and	r5, r5, r0
   14578:	beq	145a8 <__assert_fail@plt+0x33a4>
   1457c:	ldr	r0, [r4]
   14580:	sub	sl, r7, r0
   14584:	mov	r2, sl
   14588:	add	r0, r8, r0
   1458c:	mov	r1, r9
   14590:	bl	111d4 <fread_unlocked@plt>
   14594:	ldr	r3, [r4]
   14598:	cmp	sl, r0
   1459c:	add	r0, r3, r0
   145a0:	str	r0, [r4]
   145a4:	bne	14554 <__assert_fail@plt+0x3350>
   145a8:	mov	r0, r5
   145ac:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   145b0:	mov	r5, #1
   145b4:	b	145a8 <__assert_fail@plt+0x33a4>
   145b8:	ldr	r3, [pc, #16]	; 145d0 <__assert_fail@plt+0x33cc>
   145bc:	ldr	r2, [pc, #16]	; 145d4 <__assert_fail@plt+0x33d0>
   145c0:	ldr	r1, [pc, #16]	; 145d8 <__assert_fail@plt+0x33d4>
   145c4:	ldr	r0, [pc, #16]	; 145dc <__assert_fail@plt+0x33d8>
   145c8:	bl	11204 <__assert_fail@plt>
   145cc:	muleq	r2, r0, r1
   145d0:	andeq	r9, r1, ip, lsr r5
   145d4:	andeq	r0, r0, sp, lsl #10
   145d8:	andeq	r9, r1, r8, lsl #14
   145dc:	andeq	r9, r1, r4, ror #17
   145e0:	push	{r4, r5, r6, r7, r8, lr}
   145e4:	mvn	r2, #0
   145e8:	ldr	r7, [pc, #100]	; 14654 <__assert_fail@plt+0x3450>
   145ec:	str	r2, [r0]
   145f0:	ldr	r3, [r7, #104]	; 0x68
   145f4:	cmp	r3, #0
   145f8:	beq	1464c <__assert_fail@plt+0x3448>
   145fc:	mov	r6, r0
   14600:	mov	r5, #1
   14604:	b	14630 <__assert_fail@plt+0x342c>
   14608:	bl	110d8 <__errno_location@plt>
   1460c:	ldr	r0, [r0]
   14610:	bl	14210 <__assert_fail@plt+0x300c>
   14614:	mov	r4, r0
   14618:	bl	140e4 <__assert_fail@plt+0x2ee0>
   1461c:	ldr	r3, [r7, #104]	; 0x68
   14620:	cmp	r3, #0
   14624:	and	r0, r0, r4
   14628:	and	r5, r5, r0
   1462c:	beq	14644 <__assert_fail@plt+0x3440>
   14630:	mov	r0, r3
   14634:	bl	11114 <fgetc@plt>
   14638:	cmn	r0, #1
   1463c:	str	r0, [r6]
   14640:	beq	14608 <__assert_fail@plt+0x3404>
   14644:	mov	r0, r5
   14648:	pop	{r4, r5, r6, r7, r8, pc}
   1464c:	mov	r5, #1
   14650:	b	14644 <__assert_fail@plt+0x3440>
   14654:	muleq	r2, r0, r1
   14658:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1465c:	sub	sp, sp, #20
   14660:	mov	r9, r2
   14664:	strd	r0, [sp, #8]
   14668:	ldr	r1, [pc, #612]	; 148d4 <__assert_fail@plt+0x36d0>
   1466c:	ldrb	r1, [r1]
   14670:	cmp	r1, #0
   14674:	bne	14864 <__assert_fail@plt+0x3660>
   14678:	ldr	r5, [pc, #600]	; 148d8 <__assert_fail@plt+0x36d4>
   1467c:	ldr	r3, [r5, #12]
   14680:	mov	r6, #0
   14684:	cmp	r3, r6
   14688:	strb	r6, [r5, #116]	; 0x74
   1468c:	beq	148b4 <__assert_fail@plt+0x36b0>
   14690:	ldr	r7, [pc, #580]	; 148dc <__assert_fail@plt+0x36d8>
   14694:	b	14720 <__assert_fail@plt+0x351c>
   14698:	ldr	r3, [r5, #120]	; 0x78
   1469c:	mov	r2, #0
   146a0:	ldrd	r0, [sp, #8]
   146a4:	blx	r3
   146a8:	ldr	ip, [r5, #20]
   146ac:	ldr	r2, [sp, #56]	; 0x38
   146b0:	add	ip, ip, r4
   146b4:	add	r3, ip, #12
   146b8:	ldr	r0, [ip, #28]
   146bc:	mov	r1, r8
   146c0:	str	r0, [sp, #4]
   146c4:	ldr	lr, [ip, #24]
   146c8:	mov	r0, sl
   146cc:	str	lr, [sp]
   146d0:	ldr	fp, [ip, #8]
   146d4:	blx	fp
   146d8:	ldr	r3, [r5, #20]
   146dc:	add	r4, r3, r4
   146e0:	ldrb	r3, [r4, #21]
   146e4:	cmp	r3, #0
   146e8:	bne	14780 <__assert_fail@plt+0x357c>
   146ec:	ldr	r0, [r7]
   146f0:	ldr	r3, [r0, #20]
   146f4:	ldr	r2, [r0, #24]
   146f8:	cmp	r3, r2
   146fc:	addcc	r1, r3, #1
   14700:	movcc	r2, #10
   14704:	strcc	r1, [r0, #20]
   14708:	strbcc	r2, [r3]
   1470c:	bcs	148c8 <__assert_fail@plt+0x36c4>
   14710:	ldr	r3, [r5, #12]
   14714:	add	r6, r6, #1
   14718:	cmp	r3, r6
   1471c:	bls	148b4 <__assert_fail@plt+0x36b0>
   14720:	ldr	r3, [r5, #20]
   14724:	lsl	r4, r6, #5
   14728:	add	r3, r3, r4
   1472c:	ldr	r2, [pc, #428]	; 148e0 <__assert_fail@plt+0x36dc>
   14730:	ldr	r3, [r3, #4]
   14734:	ldr	r8, [r5, #112]	; 0x70
   14738:	add	r3, r2, r3, lsl #2
   1473c:	mov	r0, r8
   14740:	ldr	fp, [r3, #460]	; 0x1cc
   14744:	mov	r1, fp
   14748:	bl	18d34 <__assert_fail@plt+0x7b30>
   1474c:	mov	r1, fp
   14750:	mov	sl, r0
   14754:	sub	r0, r8, r9
   14758:	bl	18d34 <__assert_fail@plt+0x7b30>
   1475c:	cmp	r6, #0
   14760:	mov	r8, r0
   14764:	beq	14698 <__assert_fail@plt+0x3494>
   14768:	ldr	r3, [pc, #372]	; 148e4 <__assert_fail@plt+0x36e0>
   1476c:	ldr	r2, [r5]
   14770:	ldr	r1, [pc, #368]	; 148e8 <__assert_fail@plt+0x36e4>
   14774:	mov	r0, #1
   14778:	bl	11120 <__printf_chk@plt>
   1477c:	b	146a8 <__assert_fail@plt+0x34a4>
   14780:	ldr	r0, [r4, #28]
   14784:	mov	r1, sl
   14788:	mul	r0, r0, r8
   1478c:	bl	18f40 <__assert_fail@plt+0x7d3c>
   14790:	ldr	r2, [r4, #24]
   14794:	ldr	r3, [pc, #328]	; 148e4 <__assert_fail@plt+0x36e0>
   14798:	ldr	r1, [pc, #328]	; 148e8 <__assert_fail@plt+0x36e4>
   1479c:	mla	r2, r2, r8, r0
   147a0:	mov	r0, #1
   147a4:	bl	11120 <__printf_chk@plt>
   147a8:	ldr	r3, [r7]
   147ac:	mov	r2, #3
   147b0:	mov	r1, #1
   147b4:	ldr	r0, [pc, #304]	; 148ec <__assert_fail@plt+0x36e8>
   147b8:	bl	10fa0 <fwrite_unlocked@plt>
   147bc:	cmp	r9, #0
   147c0:	beq	14834 <__assert_fail@plt+0x3630>
   147c4:	bl	110a8 <__ctype_b_loc@plt>
   147c8:	ldr	r3, [sp, #56]	; 0x38
   147cc:	mov	r8, #46	; 0x2e
   147d0:	add	sl, r3, r9
   147d4:	mov	r4, r3
   147d8:	mov	fp, r0
   147dc:	b	147e8 <__assert_fail@plt+0x35e4>
   147e0:	cmp	r4, sl
   147e4:	beq	14834 <__assert_fail@plt+0x3630>
   147e8:	ldrb	r2, [r4], #1
   147ec:	ldr	r0, [fp]
   147f0:	mov	r1, r8
   147f4:	lsl	r3, r2, #1
   147f8:	ldrh	r3, [r0, r3]
   147fc:	ldr	r0, [r7]
   14800:	tst	r3, #16384	; 0x4000
   14804:	ldr	ip, [r0, #24]
   14808:	ldr	r3, [r0, #20]
   1480c:	moveq	r2, #46	; 0x2e
   14810:	movne	r1, r2
   14814:	add	lr, r3, #1
   14818:	cmp	r3, ip
   1481c:	strcc	lr, [r0, #20]
   14820:	strbcc	r2, [r3]
   14824:	bcc	147e0 <__assert_fail@plt+0x35dc>
   14828:	bl	11168 <__overflow@plt>
   1482c:	cmp	r4, sl
   14830:	bne	147e8 <__assert_fail@plt+0x35e4>
   14834:	ldr	r0, [r7]
   14838:	ldr	r3, [r0, #20]
   1483c:	ldr	r2, [r0, #24]
   14840:	cmp	r3, r2
   14844:	addcc	r1, r3, #1
   14848:	movcc	r2, #60	; 0x3c
   1484c:	strcc	r1, [r0, #20]
   14850:	strbcc	r2, [r3]
   14854:	bcc	146ec <__assert_fail@plt+0x34e8>
   14858:	mov	r1, #60	; 0x3c
   1485c:	bl	11168 <__overflow@plt>
   14860:	b	146ec <__assert_fail@plt+0x34e8>
   14864:	ldr	r1, [pc, #104]	; 148d4 <__assert_fail@plt+0x36d0>
   14868:	ldr	r5, [pc, #104]	; 148d8 <__assert_fail@plt+0x36d4>
   1486c:	ldrb	r1, [r1, #1]
   14870:	cmp	r1, #0
   14874:	bne	1467c <__assert_fail@plt+0x3478>
   14878:	ldr	r1, [r5, #112]	; 0x70
   1487c:	cmp	r1, r2
   14880:	bne	1467c <__assert_fail@plt+0x3478>
   14884:	mov	r0, r3
   14888:	ldr	r1, [sp, #56]	; 0x38
   1488c:	bl	10fac <memcmp@plt>
   14890:	cmp	r0, #0
   14894:	bne	1467c <__assert_fail@plt+0x3478>
   14898:	ldrb	r3, [r5, #116]	; 0x74
   1489c:	cmp	r3, #0
   148a0:	bne	148b4 <__assert_fail@plt+0x36b0>
   148a4:	ldr	r0, [pc, #68]	; 148f0 <__assert_fail@plt+0x36ec>
   148a8:	bl	11054 <puts@plt>
   148ac:	mov	r3, #1
   148b0:	strb	r3, [r5, #116]	; 0x74
   148b4:	ldr	r2, [pc, #24]	; 148d4 <__assert_fail@plt+0x36d0>
   148b8:	mov	r3, #0
   148bc:	strb	r3, [r2, #1]
   148c0:	add	sp, sp, #20
   148c4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   148c8:	mov	r1, #10
   148cc:	bl	11168 <__overflow@plt>
   148d0:	b	14710 <__assert_fail@plt+0x350c>
   148d4:	andeq	ip, r2, r8, lsl r1
   148d8:	muleq	r2, r0, r1
   148dc:	andeq	ip, r2, r4, lsl #3
   148e0:	andeq	r9, r1, ip, ror r3
   148e4:	andeq	sl, r1, r0, asr #8
   148e8:	ldrdeq	r9, [r1], -r8
   148ec:	andeq	r9, r1, r8, lsl #18
   148f0:	andeq	r9, r1, r4, lsl #18
   148f4:	push	{r4, r5, r6, r7, r8, lr}
   148f8:	mov	r6, r0
   148fc:	ldr	r5, [pc, #124]	; 14980 <__assert_fail@plt+0x377c>
   14900:	mov	r4, r2
   14904:	mov	r7, r1
   14908:	ldr	r0, [r5]
   1490c:	ldr	r3, [r0, #20]
   14910:	ldr	r2, [r0, #24]
   14914:	cmp	r3, r2
   14918:	addcc	r1, r3, #1
   1491c:	movcc	r2, #40	; 0x28
   14920:	strcc	r1, [r0, #20]
   14924:	strbcc	r2, [r3]
   14928:	bcs	14968 <__assert_fail@plt+0x3764>
   1492c:	mov	r0, r6
   14930:	mov	r1, r7
   14934:	mov	r2, #41	; 0x29
   14938:	bl	129ac <__assert_fail@plt+0x17a8>
   1493c:	cmp	r4, #0
   14940:	popeq	{r4, r5, r6, r7, r8, pc}
   14944:	ldr	r0, [r5]
   14948:	ldr	r3, [r0, #20]
   1494c:	ldr	r2, [r0, #24]
   14950:	cmp	r3, r2
   14954:	bcs	14974 <__assert_fail@plt+0x3770>
   14958:	add	r2, r3, #1
   1495c:	str	r2, [r0, #20]
   14960:	strb	r4, [r3]
   14964:	pop	{r4, r5, r6, r7, r8, pc}
   14968:	mov	r1, #40	; 0x28
   1496c:	bl	11168 <__overflow@plt>
   14970:	b	1492c <__assert_fail@plt+0x3728>
   14974:	mov	r1, r4
   14978:	pop	{r4, r5, r6, r7, r8, lr}
   1497c:	b	11168 <__overflow@plt>
   14980:	andeq	ip, r2, r4, lsl #3
   14984:	push	{r4, r5, r6, lr}
   14988:	mov	r6, r2
   1498c:	mov	r2, #32
   14990:	mov	r4, r0
   14994:	mov	r5, r1
   14998:	bl	129ac <__assert_fail@plt+0x17a8>
   1499c:	ldr	r3, [pc, #20]	; 149b8 <__assert_fail@plt+0x37b4>
   149a0:	mov	r2, r6
   149a4:	ldrd	r0, [r3, #128]	; 0x80
   149a8:	adds	r0, r0, r4
   149ac:	adc	r1, r1, r5
   149b0:	pop	{r4, r5, r6, lr}
   149b4:	b	148f4 <__assert_fail@plt+0x36f0>
   149b8:	muleq	r2, r0, r1
   149bc:	subs	r5, r0, #0
   149c0:	push	{r7, lr}
   149c4:	sub	sp, sp, #64	; 0x40
   149c8:	beq	14a04 <__assert_fail@plt+0x3800>
   149cc:	ldr	r3, [pc, #908]	; 14d60 <__assert_fail@plt+0x3b5c>
   149d0:	mov	r2, #5
   149d4:	ldr	r1, [pc, #904]	; 14d64 <__assert_fail@plt+0x3b60>
   149d8:	mov	r0, #0
   149dc:	ldr	r4, [r3]
   149e0:	bl	10fc4 <dcgettext@plt>
   149e4:	ldr	r3, [pc, #892]	; 14d68 <__assert_fail@plt+0x3b64>
   149e8:	mov	r1, #1
   149ec:	ldr	r3, [r3]
   149f0:	mov	r2, r0
   149f4:	mov	r0, r4
   149f8:	bl	11144 <__fprintf_chk@plt>
   149fc:	mov	r0, r5
   14a00:	bl	110b4 <exit@plt>
   14a04:	mov	r2, #5
   14a08:	ldr	r1, [pc, #860]	; 14d6c <__assert_fail@plt+0x3b68>
   14a0c:	bl	10fc4 <dcgettext@plt>
   14a10:	ldr	r3, [pc, #848]	; 14d68 <__assert_fail@plt+0x3b64>
   14a14:	ldr	r6, [pc, #852]	; 14d70 <__assert_fail@plt+0x3b6c>
   14a18:	ldr	r4, [pc, #852]	; 14d74 <__assert_fail@plt+0x3b70>
   14a1c:	ldr	r3, [r3]
   14a20:	mov	r2, r3
   14a24:	str	r3, [sp]
   14a28:	mov	r1, r0
   14a2c:	mov	r0, #1
   14a30:	bl	11120 <__printf_chk@plt>
   14a34:	mov	r2, #5
   14a38:	ldr	r1, [pc, #824]	; 14d78 <__assert_fail@plt+0x3b74>
   14a3c:	mov	r0, r5
   14a40:	bl	10fc4 <dcgettext@plt>
   14a44:	ldr	r1, [r6]
   14a48:	bl	10f1c <fputs_unlocked@plt>
   14a4c:	mov	r2, #5
   14a50:	ldr	r1, [pc, #804]	; 14d7c <__assert_fail@plt+0x3b78>
   14a54:	mov	r0, r5
   14a58:	bl	10fc4 <dcgettext@plt>
   14a5c:	ldr	r1, [r6]
   14a60:	bl	10f1c <fputs_unlocked@plt>
   14a64:	mov	r2, #5
   14a68:	ldr	r1, [pc, #784]	; 14d80 <__assert_fail@plt+0x3b7c>
   14a6c:	mov	r0, r5
   14a70:	bl	10fc4 <dcgettext@plt>
   14a74:	ldr	r1, [r6]
   14a78:	bl	10f1c <fputs_unlocked@plt>
   14a7c:	mov	r2, #5
   14a80:	ldr	r1, [pc, #764]	; 14d84 <__assert_fail@plt+0x3b80>
   14a84:	mov	r0, r5
   14a88:	bl	10fc4 <dcgettext@plt>
   14a8c:	ldr	r1, [r6]
   14a90:	bl	10f1c <fputs_unlocked@plt>
   14a94:	mov	r2, #5
   14a98:	ldr	r1, [pc, #744]	; 14d88 <__assert_fail@plt+0x3b84>
   14a9c:	mov	r0, r5
   14aa0:	bl	10fc4 <dcgettext@plt>
   14aa4:	ldr	r1, [r6]
   14aa8:	bl	10f1c <fputs_unlocked@plt>
   14aac:	mov	r2, #5
   14ab0:	ldr	r1, [pc, #724]	; 14d8c <__assert_fail@plt+0x3b88>
   14ab4:	mov	r0, r5
   14ab8:	bl	10fc4 <dcgettext@plt>
   14abc:	ldr	r1, [r6]
   14ac0:	bl	10f1c <fputs_unlocked@plt>
   14ac4:	mov	r2, #5
   14ac8:	ldr	r1, [pc, #704]	; 14d90 <__assert_fail@plt+0x3b8c>
   14acc:	mov	r0, r5
   14ad0:	bl	10fc4 <dcgettext@plt>
   14ad4:	ldr	r1, [r6]
   14ad8:	bl	10f1c <fputs_unlocked@plt>
   14adc:	mov	r2, #5
   14ae0:	ldr	r1, [pc, #684]	; 14d94 <__assert_fail@plt+0x3b90>
   14ae4:	mov	r0, r5
   14ae8:	bl	10fc4 <dcgettext@plt>
   14aec:	ldr	r1, [r6]
   14af0:	bl	10f1c <fputs_unlocked@plt>
   14af4:	mov	r2, #5
   14af8:	ldr	r1, [pc, #664]	; 14d98 <__assert_fail@plt+0x3b94>
   14afc:	mov	r0, r5
   14b00:	bl	10fc4 <dcgettext@plt>
   14b04:	ldr	r1, [r6]
   14b08:	bl	10f1c <fputs_unlocked@plt>
   14b0c:	mov	r2, #5
   14b10:	ldr	r1, [pc, #644]	; 14d9c <__assert_fail@plt+0x3b98>
   14b14:	mov	r0, r5
   14b18:	bl	10fc4 <dcgettext@plt>
   14b1c:	ldr	r1, [r6]
   14b20:	bl	10f1c <fputs_unlocked@plt>
   14b24:	mov	r2, #5
   14b28:	ldr	r1, [pc, #624]	; 14da0 <__assert_fail@plt+0x3b9c>
   14b2c:	mov	r0, r5
   14b30:	bl	10fc4 <dcgettext@plt>
   14b34:	ldr	r1, [r6]
   14b38:	bl	10f1c <fputs_unlocked@plt>
   14b3c:	mov	r2, #5
   14b40:	ldr	r1, [pc, #604]	; 14da4 <__assert_fail@plt+0x3ba0>
   14b44:	mov	r0, r5
   14b48:	bl	10fc4 <dcgettext@plt>
   14b4c:	ldr	r1, [r6]
   14b50:	bl	10f1c <fputs_unlocked@plt>
   14b54:	mov	r2, #5
   14b58:	ldr	r1, [pc, #584]	; 14da8 <__assert_fail@plt+0x3ba4>
   14b5c:	mov	r0, r5
   14b60:	bl	10fc4 <dcgettext@plt>
   14b64:	ldr	r1, [r6]
   14b68:	bl	10f1c <fputs_unlocked@plt>
   14b6c:	mov	r2, #5
   14b70:	ldr	r1, [pc, #564]	; 14dac <__assert_fail@plt+0x3ba8>
   14b74:	mov	r0, r5
   14b78:	bl	10fc4 <dcgettext@plt>
   14b7c:	ldr	r1, [r6]
   14b80:	bl	10f1c <fputs_unlocked@plt>
   14b84:	mov	r2, #5
   14b88:	ldr	r1, [pc, #544]	; 14db0 <__assert_fail@plt+0x3bac>
   14b8c:	mov	r0, r5
   14b90:	bl	10fc4 <dcgettext@plt>
   14b94:	ldr	r1, [r6]
   14b98:	bl	10f1c <fputs_unlocked@plt>
   14b9c:	ldm	r4!, {r0, r1, r2, r3}
   14ba0:	add	lr, sp, #8
   14ba4:	stmia	lr!, {r0, r1, r2, r3}
   14ba8:	ldm	r4!, {r0, r1, r2, r3}
   14bac:	ldr	ip, [sp, #8]
   14bb0:	stmia	lr!, {r0, r1, r2, r3}
   14bb4:	cmp	ip, #0
   14bb8:	ldm	r4!, {r0, r1, r2, r3}
   14bbc:	stmia	lr!, {r0, r1, r2, r3}
   14bc0:	ldm	r4, {r0, r1}
   14bc4:	addeq	r4, sp, #8
   14bc8:	stm	lr, {r0, r1}
   14bcc:	beq	14bfc <__assert_fail@plt+0x39f8>
   14bd0:	ldr	r7, [pc, #476]	; 14db4 <__assert_fail@plt+0x3bb0>
   14bd4:	add	r4, sp, #8
   14bd8:	b	14be8 <__assert_fail@plt+0x39e4>
   14bdc:	ldr	ip, [r4, #8]!
   14be0:	cmp	ip, #0
   14be4:	beq	14bfc <__assert_fail@plt+0x39f8>
   14be8:	mov	r1, ip
   14bec:	mov	r0, r7
   14bf0:	bl	10f34 <strcmp@plt>
   14bf4:	cmp	r0, #0
   14bf8:	bne	14bdc <__assert_fail@plt+0x39d8>
   14bfc:	ldr	r4, [r4, #4]
   14c00:	mov	r2, #5
   14c04:	cmp	r4, #0
   14c08:	ldr	r1, [pc, #424]	; 14db8 <__assert_fail@plt+0x3bb4>
   14c0c:	beq	14cb4 <__assert_fail@plt+0x3ab0>
   14c10:	mov	r0, #0
   14c14:	bl	10fc4 <dcgettext@plt>
   14c18:	ldr	r3, [pc, #412]	; 14dbc <__assert_fail@plt+0x3bb8>
   14c1c:	ldr	r2, [pc, #412]	; 14dc0 <__assert_fail@plt+0x3bbc>
   14c20:	mov	r1, r0
   14c24:	mov	r0, #1
   14c28:	bl	11120 <__printf_chk@plt>
   14c2c:	mov	r1, #0
   14c30:	mov	r0, #5
   14c34:	bl	11174 <setlocale@plt>
   14c38:	cmp	r0, #0
   14c3c:	ldreq	r7, [pc, #368]	; 14db4 <__assert_fail@plt+0x3bb0>
   14c40:	beq	14c5c <__assert_fail@plt+0x3a58>
   14c44:	mov	r2, #3
   14c48:	ldr	r1, [pc, #372]	; 14dc4 <__assert_fail@plt+0x3bc0>
   14c4c:	bl	111e0 <strncmp@plt>
   14c50:	ldr	r7, [pc, #348]	; 14db4 <__assert_fail@plt+0x3bb0>
   14c54:	cmp	r0, #0
   14c58:	bne	14d44 <__assert_fail@plt+0x3b40>
   14c5c:	mov	r2, #5
   14c60:	ldr	r1, [pc, #352]	; 14dc8 <__assert_fail@plt+0x3bc4>
   14c64:	mov	r0, #0
   14c68:	bl	10fc4 <dcgettext@plt>
   14c6c:	ldr	r3, [pc, #320]	; 14db4 <__assert_fail@plt+0x3bb0>
   14c70:	ldr	r2, [pc, #324]	; 14dbc <__assert_fail@plt+0x3bb8>
   14c74:	mov	r1, r0
   14c78:	mov	r0, #1
   14c7c:	bl	11120 <__printf_chk@plt>
   14c80:	mov	r2, #5
   14c84:	ldr	r1, [pc, #320]	; 14dcc <__assert_fail@plt+0x3bc8>
   14c88:	mov	r0, #0
   14c8c:	bl	10fc4 <dcgettext@plt>
   14c90:	ldr	r2, [pc, #312]	; 14dd0 <__assert_fail@plt+0x3bcc>
   14c94:	cmp	r4, r7
   14c98:	ldr	r3, [pc, #308]	; 14dd4 <__assert_fail@plt+0x3bd0>
   14c9c:	movne	r3, r2
   14ca0:	mov	r1, r0
   14ca4:	mov	r2, r4
   14ca8:	mov	r0, #1
   14cac:	bl	11120 <__printf_chk@plt>
   14cb0:	b	149fc <__assert_fail@plt+0x37f8>
   14cb4:	mov	r0, r4
   14cb8:	bl	10fc4 <dcgettext@plt>
   14cbc:	ldr	r3, [pc, #248]	; 14dbc <__assert_fail@plt+0x3bb8>
   14cc0:	ldr	r2, [pc, #248]	; 14dc0 <__assert_fail@plt+0x3bbc>
   14cc4:	mov	r1, r0
   14cc8:	mov	r0, #1
   14ccc:	bl	11120 <__printf_chk@plt>
   14cd0:	mov	r1, r4
   14cd4:	mov	r0, #5
   14cd8:	bl	11174 <setlocale@plt>
   14cdc:	cmp	r0, #0
   14ce0:	beq	14cf8 <__assert_fail@plt+0x3af4>
   14ce4:	mov	r2, #3
   14ce8:	ldr	r1, [pc, #212]	; 14dc4 <__assert_fail@plt+0x3bc0>
   14cec:	bl	111e0 <strncmp@plt>
   14cf0:	cmp	r0, #0
   14cf4:	bne	14d3c <__assert_fail@plt+0x3b38>
   14cf8:	mov	r2, #5
   14cfc:	ldr	r1, [pc, #196]	; 14dc8 <__assert_fail@plt+0x3bc4>
   14d00:	mov	r0, #0
   14d04:	bl	10fc4 <dcgettext@plt>
   14d08:	ldr	r3, [pc, #164]	; 14db4 <__assert_fail@plt+0x3bb0>
   14d0c:	ldr	r2, [pc, #168]	; 14dbc <__assert_fail@plt+0x3bb8>
   14d10:	mov	r4, r3
   14d14:	mov	r1, r0
   14d18:	mov	r0, #1
   14d1c:	bl	11120 <__printf_chk@plt>
   14d20:	ldr	r1, [pc, #164]	; 14dcc <__assert_fail@plt+0x3bc8>
   14d24:	mov	r2, #5
   14d28:	mov	r0, #0
   14d2c:	bl	10fc4 <dcgettext@plt>
   14d30:	ldr	r3, [pc, #156]	; 14dd4 <__assert_fail@plt+0x3bd0>
   14d34:	mov	r1, r0
   14d38:	b	14ca4 <__assert_fail@plt+0x3aa0>
   14d3c:	ldr	r7, [pc, #112]	; 14db4 <__assert_fail@plt+0x3bb0>
   14d40:	mov	r4, r7
   14d44:	mov	r2, #5
   14d48:	ldr	r1, [pc, #136]	; 14dd8 <__assert_fail@plt+0x3bd4>
   14d4c:	mov	r0, #0
   14d50:	bl	10fc4 <dcgettext@plt>
   14d54:	ldr	r1, [r6]
   14d58:	bl	10f1c <fputs_unlocked@plt>
   14d5c:	b	14c5c <__assert_fail@plt+0x3a58>
   14d60:	andeq	ip, r2, r8, ror r1
   14d64:	andeq	r9, r1, r0, lsl r9
   14d68:	andeq	ip, r2, r0, asr #4
   14d6c:	andeq	r9, r1, r8, lsr r9
   14d70:	andeq	ip, r2, r4, lsl #3
   14d74:	andeq	r9, r1, ip, ror #10
   14d78:	ldrdeq	r9, [r1], -ip
   14d7c:	muleq	r1, r4, sl
   14d80:	andeq	r9, r1, ip, asr #21
   14d84:	andeq	r9, r1, r4, asr ip
   14d88:	andeq	r9, r1, r0, lsr #25
   14d8c:	andeq	r9, r1, r0, asr #27
   14d90:	andeq	r9, r1, r8, ror #31
   14d94:	andeq	sl, r1, r8, lsl r0
   14d98:	andeq	sl, r1, r0, asr r0
   14d9c:	andeq	sl, r1, ip, lsl #3
   14da0:	andeq	sl, r1, r0, lsr #5
   14da4:	andeq	sl, r1, r8, asr #6
   14da8:	andeq	sl, r1, r4, asr #8
   14dac:	andeq	sl, r1, r8, lsr r5
   14db0:	muleq	r1, r8, r5
   14db4:	andeq	r9, r1, ip, lsl #18
   14db8:	andeq	sl, r1, r0, lsl #13
   14dbc:	muleq	r1, r8, r6
   14dc0:	andeq	sl, r1, r0, asr #13
   14dc4:	ldrdeq	sl, [r1], -r0
   14dc8:	andeq	sl, r1, ip, lsl r7
   14dcc:	andeq	sl, r1, r8, lsr r7
   14dd0:	andeq	sl, r1, r0, asr #8
   14dd4:	andeq	sl, r1, r4, lsr #18
   14dd8:	ldrdeq	sl, [r1], -r4
   14ddc:	mov	r0, #1
   14de0:	b	149bc <__assert_fail@plt+0x37b8>
   14de4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   14de8:	mov	r5, r1
   14dec:	sub	sp, sp, #12
   14df0:	mov	r4, r2
   14df4:	str	r2, [sp]
   14df8:	mov	r7, r3
   14dfc:	mov	sl, r0
   14e00:	bl	110c0 <strlen@plt>
   14e04:	ldr	fp, [r5]
   14e08:	cmp	fp, #0
   14e0c:	beq	14ed4 <__assert_fail@plt+0x3cd0>
   14e10:	mov	r3, #0
   14e14:	mov	r8, r0
   14e18:	str	r3, [sp, #4]
   14e1c:	mov	r6, r3
   14e20:	mvn	r9, #0
   14e24:	b	14e50 <__assert_fail@plt+0x3c4c>
   14e28:	bl	10fac <memcmp@plt>
   14e2c:	ldr	r3, [sp, #4]
   14e30:	cmp	r0, #0
   14e34:	movne	r3, #1
   14e38:	str	r3, [sp, #4]
   14e3c:	ldr	fp, [r5, #4]!
   14e40:	add	r6, r6, #1
   14e44:	cmp	fp, #0
   14e48:	add	r4, r4, r7
   14e4c:	beq	14eac <__assert_fail@plt+0x3ca8>
   14e50:	mov	r2, r8
   14e54:	mov	r1, sl
   14e58:	mov	r0, fp
   14e5c:	bl	111e0 <strncmp@plt>
   14e60:	cmp	r0, #0
   14e64:	mov	r0, fp
   14e68:	bne	14e3c <__assert_fail@plt+0x3c38>
   14e6c:	bl	110c0 <strlen@plt>
   14e70:	ldr	r3, [sp]
   14e74:	mov	r2, r7
   14e78:	mov	r1, r4
   14e7c:	cmp	r8, r0
   14e80:	mla	r0, r7, r9, r3
   14e84:	beq	14ec4 <__assert_fail@plt+0x3cc0>
   14e88:	cmn	r9, #1
   14e8c:	moveq	r9, r6
   14e90:	beq	14e3c <__assert_fail@plt+0x3c38>
   14e94:	ldr	r3, [sp]
   14e98:	cmp	r3, #0
   14e9c:	bne	14e28 <__assert_fail@plt+0x3c24>
   14ea0:	mov	r3, #1
   14ea4:	str	r3, [sp, #4]
   14ea8:	b	14e3c <__assert_fail@plt+0x3c38>
   14eac:	ldr	r3, [sp, #4]
   14eb0:	cmp	r3, #0
   14eb4:	mvnne	r9, #1
   14eb8:	mov	r0, r9
   14ebc:	add	sp, sp, #12
   14ec0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14ec4:	mov	r9, r6
   14ec8:	mov	r0, r9
   14ecc:	add	sp, sp, #12
   14ed0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14ed4:	mvn	r9, #0
   14ed8:	b	14eb8 <__assert_fail@plt+0x3cb4>
   14edc:	push	{r4, r5, r6, lr}
   14ee0:	mov	r6, r0
   14ee4:	ldr	r0, [r1]
   14ee8:	cmp	r0, #0
   14eec:	beq	14f24 <__assert_fail@plt+0x3d20>
   14ef0:	mov	r4, r1
   14ef4:	mov	r5, #0
   14ef8:	b	14f0c <__assert_fail@plt+0x3d08>
   14efc:	ldr	r0, [r4, #4]!
   14f00:	add	r5, r5, #1
   14f04:	cmp	r0, #0
   14f08:	beq	14f24 <__assert_fail@plt+0x3d20>
   14f0c:	mov	r1, r6
   14f10:	bl	10f34 <strcmp@plt>
   14f14:	cmp	r0, #0
   14f18:	bne	14efc <__assert_fail@plt+0x3cf8>
   14f1c:	mov	r0, r5
   14f20:	pop	{r4, r5, r6, pc}
   14f24:	mvn	r0, #0
   14f28:	pop	{r4, r5, r6, pc}
   14f2c:	cmn	r2, #1
   14f30:	push	{r4, r5, r6, lr}
   14f34:	mov	r2, #5
   14f38:	sub	sp, sp, #8
   14f3c:	mov	r4, r1
   14f40:	mov	r5, r0
   14f44:	ldreq	r1, [pc, #76]	; 14f98 <__assert_fail@plt+0x3d94>
   14f48:	ldrne	r1, [pc, #76]	; 14f9c <__assert_fail@plt+0x3d98>
   14f4c:	mov	r0, #0
   14f50:	bl	10fc4 <dcgettext@plt>
   14f54:	mov	r2, r4
   14f58:	mov	r1, #8
   14f5c:	mov	r6, r0
   14f60:	mov	r0, #0
   14f64:	bl	17474 <__assert_fail@plt+0x6270>
   14f68:	mov	r1, r5
   14f6c:	mov	r4, r0
   14f70:	mov	r0, #1
   14f74:	bl	17710 <__assert_fail@plt+0x650c>
   14f78:	mov	r1, #0
   14f7c:	mov	r3, r4
   14f80:	mov	r2, r6
   14f84:	str	r0, [sp]
   14f88:	mov	r0, r1
   14f8c:	bl	1103c <error@plt>
   14f90:	add	sp, sp, #8
   14f94:	pop	{r4, r5, r6, pc}
   14f98:	andeq	sl, r1, ip, lsl sl
   14f9c:	andeq	sl, r1, r8, lsr sl
   14fa0:	push	{r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   14fa4:	mov	r6, r0
   14fa8:	ldr	r9, [pc, #232]	; 15098 <__assert_fail@plt+0x3e94>
   14fac:	mov	r4, r1
   14fb0:	mov	r7, r2
   14fb4:	ldr	r1, [pc, #224]	; 1509c <__assert_fail@plt+0x3e98>
   14fb8:	mov	r2, #5
   14fbc:	mov	r0, #0
   14fc0:	bl	10fc4 <dcgettext@plt>
   14fc4:	ldr	r1, [r9]
   14fc8:	bl	10f1c <fputs_unlocked@plt>
   14fcc:	ldr	fp, [r6]
   14fd0:	cmp	fp, #0
   14fd4:	movne	r8, #0
   14fd8:	movne	r5, r8
   14fdc:	movne	sl, #1
   14fe0:	bne	15020 <__assert_fail@plt+0x3e1c>
   14fe4:	b	15064 <__assert_fail@plt+0x3e60>
   14fe8:	mov	r0, fp
   14fec:	ldr	r8, [r9]
   14ff0:	bl	17720 <__assert_fail@plt+0x651c>
   14ff4:	ldr	r2, [pc, #164]	; 150a0 <__assert_fail@plt+0x3e9c>
   14ff8:	mov	r1, sl
   14ffc:	mov	r3, r0
   15000:	mov	r0, r8
   15004:	bl	11144 <__fprintf_chk@plt>
   15008:	mov	r8, r4
   1500c:	ldr	fp, [r6, #4]!
   15010:	add	r5, r5, #1
   15014:	cmp	fp, #0
   15018:	add	r4, r4, r7
   1501c:	beq	15064 <__assert_fail@plt+0x3e60>
   15020:	cmp	r5, #0
   15024:	mov	r1, r4
   15028:	mov	r2, r7
   1502c:	mov	r0, r8
   15030:	beq	14fe8 <__assert_fail@plt+0x3de4>
   15034:	bl	10fac <memcmp@plt>
   15038:	cmp	r0, #0
   1503c:	bne	14fe8 <__assert_fail@plt+0x3de4>
   15040:	mov	r0, fp
   15044:	ldr	fp, [r9]
   15048:	bl	17720 <__assert_fail@plt+0x651c>
   1504c:	ldr	r2, [pc, #80]	; 150a4 <__assert_fail@plt+0x3ea0>
   15050:	mov	r1, sl
   15054:	mov	r3, r0
   15058:	mov	r0, fp
   1505c:	bl	11144 <__fprintf_chk@plt>
   15060:	b	1500c <__assert_fail@plt+0x3e08>
   15064:	ldr	r0, [r9]
   15068:	ldr	r3, [r0, #20]
   1506c:	ldr	r2, [r0, #24]
   15070:	cmp	r3, r2
   15074:	bcs	1508c <__assert_fail@plt+0x3e88>
   15078:	add	r1, r3, #1
   1507c:	mov	r2, #10
   15080:	str	r1, [r0, #20]
   15084:	strb	r2, [r3]
   15088:	pop	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1508c:	mov	r1, #10
   15090:	pop	{r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   15094:	b	11168 <__overflow@plt>
   15098:	andeq	ip, r2, r8, ror r1
   1509c:	andeq	sl, r1, r8, asr sl
   150a0:	andeq	sl, r1, r0, ror sl
   150a4:	andeq	sl, r1, r8, ror sl
   150a8:	push	{r4, r5, r6, r7, r8, lr}
   150ac:	mov	r7, r0
   150b0:	ldrb	ip, [sp, #32]
   150b4:	mov	r5, r1
   150b8:	mov	r4, r2
   150bc:	cmp	ip, #0
   150c0:	mov	r6, r3
   150c4:	beq	15114 <__assert_fail@plt+0x3f10>
   150c8:	ldr	r3, [sp, #24]
   150cc:	mov	r2, r6
   150d0:	mov	r1, r4
   150d4:	mov	r0, r5
   150d8:	bl	14de4 <__assert_fail@plt+0x3be0>
   150dc:	cmp	r0, #0
   150e0:	popge	{r4, r5, r6, r7, r8, pc}
   150e4:	mov	r2, r0
   150e8:	mov	r1, r5
   150ec:	mov	r0, r7
   150f0:	bl	14f2c <__assert_fail@plt+0x3d28>
   150f4:	mov	r0, r4
   150f8:	ldr	r2, [sp, #24]
   150fc:	mov	r1, r6
   15100:	bl	14fa0 <__assert_fail@plt+0x3d9c>
   15104:	ldr	r3, [sp, #28]
   15108:	blx	r3
   1510c:	mvn	r0, #0
   15110:	pop	{r4, r5, r6, r7, r8, pc}
   15114:	mov	r1, r2
   15118:	mov	r0, r5
   1511c:	bl	14edc <__assert_fail@plt+0x3cd8>
   15120:	cmp	r0, #0
   15124:	popge	{r4, r5, r6, r7, r8, pc}
   15128:	b	150e4 <__assert_fail@plt+0x3ee0>
   1512c:	push	{r4, r5, r6, r7, r8, lr}
   15130:	ldr	r7, [r1]
   15134:	cmp	r7, #0
   15138:	beq	15178 <__assert_fail@plt+0x3f74>
   1513c:	mov	r6, r3
   15140:	mov	r8, r0
   15144:	mov	r4, r2
   15148:	mov	r5, r1
   1514c:	b	1515c <__assert_fail@plt+0x3f58>
   15150:	ldr	r7, [r5, #4]!
   15154:	cmp	r7, #0
   15158:	beq	15178 <__assert_fail@plt+0x3f74>
   1515c:	mov	r1, r4
   15160:	mov	r2, r6
   15164:	mov	r0, r8
   15168:	bl	10fac <memcmp@plt>
   1516c:	add	r4, r4, r6
   15170:	cmp	r0, #0
   15174:	bne	15150 <__assert_fail@plt+0x3f4c>
   15178:	mov	r0, r7
   1517c:	pop	{r4, r5, r6, r7, r8, pc}
   15180:	ldr	r3, [pc, #4]	; 1518c <__assert_fail@plt+0x3f88>
   15184:	str	r0, [r3]
   15188:	bx	lr
   1518c:	andeq	ip, r2, r8, lsr r2
   15190:	ldr	r3, [pc, #4]	; 1519c <__assert_fail@plt+0x3f98>
   15194:	strb	r0, [r3, #4]
   15198:	bx	lr
   1519c:	andeq	ip, r2, r8, lsr r2
   151a0:	ldr	r3, [pc, #192]	; 15268 <__assert_fail@plt+0x4064>
   151a4:	push	{r4, r5, r6, lr}
   151a8:	sub	sp, sp, #8
   151ac:	ldr	r0, [r3]
   151b0:	bl	18af0 <__assert_fail@plt+0x78ec>
   151b4:	cmp	r0, #0
   151b8:	beq	151dc <__assert_fail@plt+0x3fd8>
   151bc:	ldr	r4, [pc, #168]	; 1526c <__assert_fail@plt+0x4068>
   151c0:	ldrb	r3, [r4, #4]
   151c4:	cmp	r3, #0
   151c8:	beq	151f8 <__assert_fail@plt+0x3ff4>
   151cc:	bl	110d8 <__errno_location@plt>
   151d0:	ldr	r3, [r0]
   151d4:	cmp	r3, #32
   151d8:	bne	151f8 <__assert_fail@plt+0x3ff4>
   151dc:	ldr	r3, [pc, #140]	; 15270 <__assert_fail@plt+0x406c>
   151e0:	ldr	r0, [r3]
   151e4:	bl	18af0 <__assert_fail@plt+0x78ec>
   151e8:	cmp	r0, #0
   151ec:	bne	15240 <__assert_fail@plt+0x403c>
   151f0:	add	sp, sp, #8
   151f4:	pop	{r4, r5, r6, pc}
   151f8:	mov	r2, #5
   151fc:	ldr	r1, [pc, #112]	; 15274 <__assert_fail@plt+0x4070>
   15200:	mov	r0, #0
   15204:	bl	10fc4 <dcgettext@plt>
   15208:	ldr	r4, [r4]
   1520c:	cmp	r4, #0
   15210:	mov	r5, r0
   15214:	beq	1524c <__assert_fail@plt+0x4048>
   15218:	bl	110d8 <__errno_location@plt>
   1521c:	ldr	r6, [r0]
   15220:	mov	r0, r4
   15224:	bl	17588 <__assert_fail@plt+0x6384>
   15228:	mov	r1, r6
   1522c:	str	r5, [sp]
   15230:	ldr	r2, [pc, #64]	; 15278 <__assert_fail@plt+0x4074>
   15234:	mov	r3, r0
   15238:	mov	r0, #0
   1523c:	bl	1103c <error@plt>
   15240:	ldr	r3, [pc, #52]	; 1527c <__assert_fail@plt+0x4078>
   15244:	ldr	r0, [r3]
   15248:	bl	10f64 <_exit@plt>
   1524c:	bl	110d8 <__errno_location@plt>
   15250:	mov	r3, r5
   15254:	ldr	r2, [pc, #36]	; 15280 <__assert_fail@plt+0x407c>
   15258:	ldr	r1, [r0]
   1525c:	mov	r0, r4
   15260:	bl	1103c <error@plt>
   15264:	b	15240 <__assert_fail@plt+0x403c>
   15268:	andeq	ip, r2, r4, lsl #3
   1526c:	andeq	ip, r2, r8, lsr r2
   15270:	andeq	ip, r2, r8, ror r1
   15274:			; <UNDEFINED> instruction: 0x000198b0
   15278:	andeq	sl, r1, r0, lsl #21
   1527c:	andeq	ip, r2, r4, lsr #2
   15280:	andeq	sl, r1, r4, lsl #21
   15284:	andeq	r0, r0, r0
   15288:	vcmpe.f64	d0, #0.0
   1528c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   15290:	vldr	d7, [pc, #304]	; 153c8 <__assert_fail@plt+0x41c4>
   15294:	vpush	{d8}
   15298:	vmrs	APSR_nzcv, fpscr
   1529c:	mov	r6, r0
   152a0:	and	r4, r2, #1
   152a4:	sub	sp, sp, #44	; 0x2c
   152a8:	vnegmi.f64	d6, d0
   152ac:	vmovpl.f64	d6, d0
   152b0:	add	r0, sp, #40	; 0x28
   152b4:	mov	r7, #37	; 0x25
   152b8:	mov	r5, r1
   152bc:	vcmpe.f64	d6, d7
   152c0:	lsr	r1, r2, #1
   152c4:	mov	sl, r3
   152c8:	mov	r3, #45	; 0x2d
   152cc:	strb	r3, [r0, #-11]!
   152d0:	strb	r7, [sp, #28]
   152d4:	tst	r2, #16
   152d8:	add	lr, r0, r4
   152dc:	and	r1, r1, #1
   152e0:	lsr	r3, r2, #2
   152e4:	mov	r7, #43	; 0x2b
   152e8:	strb	r7, [r0, r4]
   152ec:	and	r3, r3, #1
   152f0:	add	r0, lr, r1
   152f4:	moveq	ip, #103	; 0x67
   152f8:	movne	ip, #71	; 0x47
   152fc:	mov	r4, #32
   15300:	vmrs	APSR_nzcv, fpscr
   15304:	lsr	r2, r2, #3
   15308:	strb	r4, [lr, r1]
   1530c:	and	r2, r2, #1
   15310:	add	lr, r0, r3
   15314:	mov	r4, #48	; 0x30
   15318:	strb	r4, [r0, r3]
   1531c:	add	r3, lr, r2
   15320:	mov	r0, #42	; 0x2a
   15324:	strb	r0, [lr, r2]
   15328:	mov	r1, #0
   1532c:	mov	r2, #46	; 0x2e
   15330:	vmov.f64	d8, d0
   15334:	movmi	r4, #1
   15338:	movpl	r4, #15
   1533c:	strb	r0, [r3, #2]
   15340:	strb	r2, [r3, #1]
   15344:	add	r9, sp, #28
   15348:	strb	ip, [r3, #3]
   1534c:	mvn	r8, #0
   15350:	strb	r1, [r3, #4]
   15354:	mov	r7, #1
   15358:	b	15360 <__assert_fail@plt+0x415c>
   1535c:	add	r4, r4, #1
   15360:	mov	r2, r7
   15364:	mov	r3, r8
   15368:	vstr	d8, [sp, #16]
   1536c:	str	r4, [sp, #8]
   15370:	stm	sp, {r9, sl}
   15374:	mov	r1, r5
   15378:	mov	r0, r6
   1537c:	bl	111f8 <__snprintf_chk@plt>
   15380:	cmp	r4, #16
   15384:	movle	r2, #0
   15388:	movgt	r2, #1
   1538c:	orrs	r3, r2, r0, lsr #31
   15390:	mov	fp, r0
   15394:	bne	153b8 <__assert_fail@plt+0x41b4>
   15398:	cmp	r5, r0
   1539c:	bls	1535c <__assert_fail@plt+0x4158>
   153a0:	mov	r1, #0
   153a4:	mov	r0, r6
   153a8:	bl	1112c <strtod@plt>
   153ac:	vcmp.f64	d8, d0
   153b0:	vmrs	APSR_nzcv, fpscr
   153b4:	bne	1535c <__assert_fail@plt+0x4158>
   153b8:	mov	r0, fp
   153bc:	add	sp, sp, #44	; 0x2c
   153c0:	vpop	{d8}
   153c4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   153c8:	andeq	r0, r0, r0
   153cc:	andseq	r0, r0, r0
   153d0:	push	{r4, r5, lr}
   153d4:	sub	sp, sp, #12
   153d8:	mov	r4, r0
   153dc:	bl	11138 <fileno@plt>
   153e0:	cmp	r0, #0
   153e4:	mov	r0, r4
   153e8:	blt	15464 <__assert_fail@plt+0x4260>
   153ec:	bl	11084 <__freading@plt>
   153f0:	cmp	r0, #0
   153f4:	bne	15430 <__assert_fail@plt+0x422c>
   153f8:	mov	r0, r4
   153fc:	bl	15470 <__assert_fail@plt+0x426c>
   15400:	cmp	r0, #0
   15404:	beq	15460 <__assert_fail@plt+0x425c>
   15408:	bl	110d8 <__errno_location@plt>
   1540c:	mov	r5, r0
   15410:	mov	r0, r4
   15414:	ldr	r4, [r5]
   15418:	bl	11150 <fclose@plt>
   1541c:	cmp	r4, #0
   15420:	mvnne	r0, #0
   15424:	strne	r4, [r5]
   15428:	add	sp, sp, #12
   1542c:	pop	{r4, r5, pc}
   15430:	mov	r0, r4
   15434:	bl	11138 <fileno@plt>
   15438:	mov	r3, #1
   1543c:	str	r3, [sp]
   15440:	mov	r2, #0
   15444:	mov	r3, #0
   15448:	bl	1100c <lseek64@plt>
   1544c:	mvn	r3, #0
   15450:	mvn	r2, #0
   15454:	cmp	r1, r3
   15458:	cmpeq	r0, r2
   1545c:	bne	153f8 <__assert_fail@plt+0x41f4>
   15460:	mov	r0, r4
   15464:	add	sp, sp, #12
   15468:	pop	{r4, r5, lr}
   1546c:	b	11150 <fclose@plt>
   15470:	push	{r4, lr}
   15474:	subs	r4, r0, #0
   15478:	sub	sp, sp, #8
   1547c:	beq	15498 <__assert_fail@plt+0x4294>
   15480:	bl	11084 <__freading@plt>
   15484:	cmp	r0, #0
   15488:	beq	15498 <__assert_fail@plt+0x4294>
   1548c:	ldr	r3, [r4]
   15490:	tst	r3, #256	; 0x100
   15494:	bne	154a8 <__assert_fail@plt+0x42a4>
   15498:	mov	r0, r4
   1549c:	add	sp, sp, #8
   154a0:	pop	{r4, lr}
   154a4:	b	10f40 <fflush@plt>
   154a8:	mov	r3, #1
   154ac:	str	r3, [sp]
   154b0:	mov	r2, #0
   154b4:	mov	r3, #0
   154b8:	mov	r0, r4
   154bc:	bl	15528 <__assert_fail@plt+0x4324>
   154c0:	mov	r0, r4
   154c4:	add	sp, sp, #8
   154c8:	pop	{r4, lr}
   154cc:	b	10f40 <fflush@plt>
   154d0:	push	{r4, r5, lr}
   154d4:	sub	sp, sp, #12
   154d8:	mov	r5, r0
   154dc:	bl	110d8 <__errno_location@plt>
   154e0:	mov	r2, #0
   154e4:	mov	r4, r0
   154e8:	ldr	r3, [r0]
   154ec:	str	r2, [r4]
   154f0:	mov	r0, r5
   154f4:	str	r3, [sp]
   154f8:	str	r3, [sp, #4]
   154fc:	bl	10f4c <free@plt>
   15500:	ldr	r3, [r4]
   15504:	add	r2, sp, #8
   15508:	cmp	r3, #0
   1550c:	moveq	r3, #4
   15510:	movne	r3, #0
   15514:	add	r3, r2, r3
   15518:	ldr	r3, [r3, #-8]
   1551c:	str	r3, [r4]
   15520:	add	sp, sp, #12
   15524:	pop	{r4, r5, pc}
   15528:	push	{r4, r5, r6, r7, r8, lr}
   1552c:	sub	sp, sp, #8
   15530:	ldmib	r0, {ip, lr}
   15534:	mov	r4, r0
   15538:	ldr	r5, [sp, #32]
   1553c:	cmp	lr, ip
   15540:	beq	15558 <__assert_fail@plt+0x4354>
   15544:	str	r5, [sp, #32]
   15548:	mov	r0, r4
   1554c:	add	sp, sp, #8
   15550:	pop	{r4, r5, r6, r7, r8, lr}
   15554:	b	1115c <fseeko64@plt>
   15558:	ldr	lr, [r0, #20]
   1555c:	ldr	ip, [r0, #16]
   15560:	cmp	lr, ip
   15564:	bne	15544 <__assert_fail@plt+0x4340>
   15568:	ldr	r8, [r0, #36]	; 0x24
   1556c:	cmp	r8, #0
   15570:	bne	15544 <__assert_fail@plt+0x4340>
   15574:	mov	r6, r2
   15578:	mov	r7, r3
   1557c:	bl	11138 <fileno@plt>
   15580:	mov	r2, r6
   15584:	mov	r3, r7
   15588:	str	r5, [sp]
   1558c:	bl	1100c <lseek64@plt>
   15590:	mvn	r3, #0
   15594:	mvn	r2, #0
   15598:	cmp	r1, r3
   1559c:	cmpeq	r0, r2
   155a0:	beq	155c0 <__assert_fail@plt+0x43bc>
   155a4:	ldr	r3, [r4]
   155a8:	strd	r0, [r4, #80]	; 0x50
   155ac:	mov	r0, r8
   155b0:	bic	r3, r3, #16
   155b4:	str	r3, [r4]
   155b8:	add	sp, sp, #8
   155bc:	pop	{r4, r5, r6, r7, r8, pc}
   155c0:	mvn	r0, #0
   155c4:	b	155b8 <__assert_fail@plt+0x43b4>
   155c8:	vcmpe.f32	s0, #0.0
   155cc:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   155d0:	vldr	s15, [pc, #308]	; 1570c <__assert_fail@plt+0x4508>
   155d4:	vpush	{d8-d9}
   155d8:	vmrs	APSR_nzcv, fpscr
   155dc:	mov	r6, r0
   155e0:	and	r4, r2, #1
   155e4:	sub	sp, sp, #44	; 0x2c
   155e8:	vnegmi.f32	s14, s0
   155ec:	vmovpl.f32	s14, s0
   155f0:	add	r0, sp, #40	; 0x28
   155f4:	mov	r7, #37	; 0x25
   155f8:	mov	r5, r1
   155fc:	vcmpe.f32	s14, s15
   15600:	lsr	r1, r2, #1
   15604:	mov	sl, r3
   15608:	mov	r3, #45	; 0x2d
   1560c:	strb	r3, [r0, #-11]!
   15610:	strb	r7, [sp, #28]
   15614:	tst	r2, #16
   15618:	add	lr, r0, r4
   1561c:	and	r1, r1, #1
   15620:	lsr	r3, r2, #2
   15624:	mov	r7, #43	; 0x2b
   15628:	strb	r7, [r0, r4]
   1562c:	and	r3, r3, #1
   15630:	add	r0, lr, r1
   15634:	moveq	ip, #103	; 0x67
   15638:	movne	ip, #71	; 0x47
   1563c:	mov	r4, #32
   15640:	vmrs	APSR_nzcv, fpscr
   15644:	lsr	r2, r2, #3
   15648:	strb	r4, [lr, r1]
   1564c:	and	r2, r2, #1
   15650:	add	lr, r0, r3
   15654:	mov	r4, #48	; 0x30
   15658:	strb	r4, [r0, r3]
   1565c:	add	r3, lr, r2
   15660:	mov	r0, #42	; 0x2a
   15664:	strb	r0, [lr, r2]
   15668:	mov	r1, #0
   1566c:	mov	r2, #46	; 0x2e
   15670:	vmov.f32	s18, s0
   15674:	vcvt.f64.f32	d8, s0
   15678:	movmi	r4, #1
   1567c:	movpl	r4, #6
   15680:	strb	r0, [r3, #2]
   15684:	strb	r2, [r3, #1]
   15688:	add	r9, sp, #28
   1568c:	strb	ip, [r3, #3]
   15690:	mvn	r8, #0
   15694:	strb	r1, [r3, #4]
   15698:	mov	r7, #1
   1569c:	b	156a4 <__assert_fail@plt+0x44a0>
   156a0:	add	r4, r4, #1
   156a4:	mov	r2, r7
   156a8:	mov	r3, r8
   156ac:	vstr	d8, [sp, #16]
   156b0:	str	r4, [sp, #8]
   156b4:	stm	sp, {r9, sl}
   156b8:	mov	r1, r5
   156bc:	mov	r0, r6
   156c0:	bl	111f8 <__snprintf_chk@plt>
   156c4:	cmp	r4, #8
   156c8:	movle	r2, #0
   156cc:	movgt	r2, #1
   156d0:	orrs	r3, r2, r0, lsr #31
   156d4:	mov	fp, r0
   156d8:	bne	156fc <__assert_fail@plt+0x44f8>
   156dc:	cmp	r5, r0
   156e0:	bls	156a0 <__assert_fail@plt+0x449c>
   156e4:	mov	r1, #0
   156e8:	mov	r0, r6
   156ec:	bl	11048 <strtof@plt>
   156f0:	vcmp.f32	s18, s0
   156f4:	vmrs	APSR_nzcv, fpscr
   156f8:	bne	156a0 <__assert_fail@plt+0x449c>
   156fc:	mov	r0, fp
   15700:	add	sp, sp, #44	; 0x2c
   15704:	vpop	{d8-d9}
   15708:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1570c:	addeq	r0, r0, r0
   15710:	vcmpe.f64	d0, #0.0
   15714:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   15718:	vpush	{d8}
   1571c:	vldr	d7, [pc, #308]	; 15858 <__assert_fail@plt+0x4654>
   15720:	vmrs	APSR_nzcv, fpscr
   15724:	mov	r6, r0
   15728:	sub	sp, sp, #44	; 0x2c
   1572c:	add	r0, sp, #40	; 0x28
   15730:	vnegmi.f64	d6, d0
   15734:	vmovpl.f64	d6, d0
   15738:	and	r4, r2, #1
   1573c:	mov	r7, #37	; 0x25
   15740:	mov	r5, r1
   15744:	vcmpe.f64	d6, d7
   15748:	lsr	r1, r2, #1
   1574c:	mov	sl, r3
   15750:	mov	r3, #45	; 0x2d
   15754:	strb	r3, [r0, #-11]!
   15758:	strb	r7, [sp, #28]
   1575c:	add	lr, r0, r4
   15760:	and	r1, r1, #1
   15764:	lsr	r3, r2, #2
   15768:	mov	r7, #43	; 0x2b
   1576c:	strb	r7, [r0, r4]
   15770:	tst	r2, #16
   15774:	add	r0, lr, r1
   15778:	and	r3, r3, #1
   1577c:	mov	r4, #32
   15780:	lsr	r2, r2, #3
   15784:	strb	r4, [lr, r1]
   15788:	and	r2, r2, #1
   1578c:	add	lr, r0, r3
   15790:	mov	r4, #48	; 0x30
   15794:	moveq	ip, #103	; 0x67
   15798:	movne	ip, #71	; 0x47
   1579c:	vmrs	APSR_nzcv, fpscr
   157a0:	strb	r4, [r0, r3]
   157a4:	add	r3, lr, r2
   157a8:	mov	r0, #42	; 0x2a
   157ac:	strb	r0, [lr, r2]
   157b0:	mov	r2, #46	; 0x2e
   157b4:	mov	r1, #0
   157b8:	strb	r2, [r3, #1]
   157bc:	mov	r2, #76	; 0x4c
   157c0:	vmov.f64	d8, d0
   157c4:	movmi	r4, #1
   157c8:	movpl	r4, #15
   157cc:	strb	r0, [r3, #2]
   157d0:	strb	r2, [r3, #3]
   157d4:	add	r9, sp, #28
   157d8:	strb	ip, [r3, #4]
   157dc:	mvn	r8, #0
   157e0:	strb	r1, [r3, #5]
   157e4:	mov	r7, #1
   157e8:	b	157f0 <__assert_fail@plt+0x45ec>
   157ec:	add	r4, r4, #1
   157f0:	mov	r2, r7
   157f4:	mov	r3, r8
   157f8:	vstr	d8, [sp, #16]
   157fc:	str	r4, [sp, #8]
   15800:	stm	sp, {r9, sl}
   15804:	mov	r1, r5
   15808:	mov	r0, r6
   1580c:	bl	111f8 <__snprintf_chk@plt>
   15810:	cmp	r4, #16
   15814:	movle	r2, #0
   15818:	movgt	r2, #1
   1581c:	orrs	r3, r2, r0, lsr #31
   15820:	mov	fp, r0
   15824:	bne	15848 <__assert_fail@plt+0x4644>
   15828:	cmp	r5, r0
   1582c:	bls	157ec <__assert_fail@plt+0x45e8>
   15830:	mov	r1, #0
   15834:	mov	r0, r6
   15838:	bl	10f94 <strtold@plt>
   1583c:	vcmp.f64	d8, d0
   15840:	vmrs	APSR_nzcv, fpscr
   15844:	bne	157ec <__assert_fail@plt+0x45e8>
   15848:	mov	r0, fp
   1584c:	add	sp, sp, #44	; 0x2c
   15850:	vpop	{d8}
   15854:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15858:	andeq	r0, r0, r0
   1585c:	andseq	r0, r0, r0
   15860:	push	{r4, r5, r6, lr}
   15864:	subs	r4, r0, #0
   15868:	beq	158dc <__assert_fail@plt+0x46d8>
   1586c:	mov	r1, #47	; 0x2f
   15870:	bl	11180 <strrchr@plt>
   15874:	subs	r5, r0, #0
   15878:	beq	158c8 <__assert_fail@plt+0x46c4>
   1587c:	add	r6, r5, #1
   15880:	sub	r3, r6, r4
   15884:	cmp	r3, #6
   15888:	ble	158c8 <__assert_fail@plt+0x46c4>
   1588c:	mov	r2, #7
   15890:	ldr	r1, [pc, #96]	; 158f8 <__assert_fail@plt+0x46f4>
   15894:	sub	r0, r5, #6
   15898:	bl	111e0 <strncmp@plt>
   1589c:	cmp	r0, #0
   158a0:	bne	158c8 <__assert_fail@plt+0x46c4>
   158a4:	mov	r2, #3
   158a8:	ldr	r1, [pc, #76]	; 158fc <__assert_fail@plt+0x46f8>
   158ac:	mov	r0, r6
   158b0:	bl	111e0 <strncmp@plt>
   158b4:	cmp	r0, #0
   158b8:	movne	r4, r6
   158bc:	ldreq	r3, [pc, #60]	; 15900 <__assert_fail@plt+0x46fc>
   158c0:	addeq	r4, r5, #4
   158c4:	streq	r4, [r3]
   158c8:	ldr	r2, [pc, #52]	; 15904 <__assert_fail@plt+0x4700>
   158cc:	ldr	r3, [pc, #52]	; 15908 <__assert_fail@plt+0x4704>
   158d0:	str	r4, [r2]
   158d4:	str	r4, [r3]
   158d8:	pop	{r4, r5, r6, pc}
   158dc:	ldr	r3, [pc, #40]	; 1590c <__assert_fail@plt+0x4708>
   158e0:	mov	r2, #55	; 0x37
   158e4:	mov	r1, #1
   158e8:	ldr	r3, [r3]
   158ec:	ldr	r0, [pc, #28]	; 15910 <__assert_fail@plt+0x470c>
   158f0:	bl	11000 <fwrite@plt>
   158f4:	bl	111ec <abort@plt>
   158f8:	andeq	sl, r1, r0, asr #21
   158fc:	andeq	sl, r1, r8, asr #21
   15900:	andeq	ip, r2, r8, ror #2
   15904:	andeq	ip, r2, r0, asr #4
   15908:	andeq	ip, r2, ip, ror #2
   1590c:	andeq	ip, r2, r8, ror r1
   15910:	andeq	sl, r1, r8, lsl #21
   15914:	push	{r4, r5, r6, lr}
   15918:	mov	r2, #48	; 0x30
   1591c:	mov	r4, r1
   15920:	mov	r1, #0
   15924:	mov	r5, r0
   15928:	bl	11108 <memset@plt>
   1592c:	cmp	r4, #10
   15930:	beq	15940 <__assert_fail@plt+0x473c>
   15934:	str	r4, [r5]
   15938:	mov	r0, r5
   1593c:	pop	{r4, r5, r6, pc}
   15940:	bl	111ec <abort@plt>
   15944:	push	{r4, r5, r6, lr}
   15948:	mov	r4, r0
   1594c:	mov	r5, r1
   15950:	bl	18b6c <__assert_fail@plt+0x7968>
   15954:	ldrb	r3, [r0]
   15958:	bic	r3, r3, #32
   1595c:	cmp	r3, #85	; 0x55
   15960:	bne	159c0 <__assert_fail@plt+0x47bc>
   15964:	ldrb	r3, [r0, #1]
   15968:	bic	r3, r3, #32
   1596c:	cmp	r3, #84	; 0x54
   15970:	bne	159fc <__assert_fail@plt+0x47f8>
   15974:	ldrb	r3, [r0, #2]
   15978:	bic	r3, r3, #32
   1597c:	cmp	r3, #70	; 0x46
   15980:	bne	159fc <__assert_fail@plt+0x47f8>
   15984:	ldrb	r3, [r0, #3]
   15988:	cmp	r3, #45	; 0x2d
   1598c:	bne	159fc <__assert_fail@plt+0x47f8>
   15990:	ldrb	r3, [r0, #4]
   15994:	cmp	r3, #56	; 0x38
   15998:	bne	159fc <__assert_fail@plt+0x47f8>
   1599c:	ldrb	r3, [r0, #5]
   159a0:	cmp	r3, #0
   159a4:	bne	159fc <__assert_fail@plt+0x47f8>
   159a8:	ldrb	r2, [r4]
   159ac:	ldr	r3, [pc, #152]	; 15a4c <__assert_fail@plt+0x4848>
   159b0:	ldr	r0, [pc, #152]	; 15a50 <__assert_fail@plt+0x484c>
   159b4:	cmp	r2, #96	; 0x60
   159b8:	movne	r0, r3
   159bc:	pop	{r4, r5, r6, pc}
   159c0:	cmp	r3, #71	; 0x47
   159c4:	bne	159fc <__assert_fail@plt+0x47f8>
   159c8:	ldrb	r3, [r0, #1]
   159cc:	bic	r3, r3, #32
   159d0:	cmp	r3, #66	; 0x42
   159d4:	bne	159fc <__assert_fail@plt+0x47f8>
   159d8:	ldrb	r3, [r0, #2]
   159dc:	cmp	r3, #49	; 0x31
   159e0:	bne	159fc <__assert_fail@plt+0x47f8>
   159e4:	ldrb	r3, [r0, #3]
   159e8:	cmp	r3, #56	; 0x38
   159ec:	bne	159fc <__assert_fail@plt+0x47f8>
   159f0:	ldrb	r3, [r0, #4]
   159f4:	cmp	r3, #48	; 0x30
   159f8:	beq	15a10 <__assert_fail@plt+0x480c>
   159fc:	ldr	r3, [pc, #80]	; 15a54 <__assert_fail@plt+0x4850>
   15a00:	cmp	r5, #9
   15a04:	ldr	r0, [pc, #76]	; 15a58 <__assert_fail@plt+0x4854>
   15a08:	movne	r0, r3
   15a0c:	pop	{r4, r5, r6, pc}
   15a10:	ldrb	r3, [r0, #5]
   15a14:	cmp	r3, #51	; 0x33
   15a18:	bne	159fc <__assert_fail@plt+0x47f8>
   15a1c:	ldrb	r3, [r0, #6]
   15a20:	cmp	r3, #48	; 0x30
   15a24:	bne	159fc <__assert_fail@plt+0x47f8>
   15a28:	ldrb	r3, [r0, #7]
   15a2c:	cmp	r3, #0
   15a30:	bne	159fc <__assert_fail@plt+0x47f8>
   15a34:	ldrb	r2, [r4]
   15a38:	ldr	r3, [pc, #28]	; 15a5c <__assert_fail@plt+0x4858>
   15a3c:	ldr	r0, [pc, #28]	; 15a60 <__assert_fail@plt+0x485c>
   15a40:	cmp	r2, #96	; 0x60
   15a44:	movne	r0, r3
   15a48:	pop	{r4, r5, r6, pc}
   15a4c:	andeq	sl, r1, r4, lsr #22
   15a50:	andeq	sl, r1, r0, lsr #22
   15a54:	andeq	sl, r1, r4, lsr fp
   15a58:	andeq	sl, r1, r0, lsr fp
   15a5c:	andeq	sl, r1, ip, lsr #22
   15a60:	andeq	sl, r1, r8, lsr #22
   15a64:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   15a68:	sub	sp, sp, #116	; 0x74
   15a6c:	mov	sl, r0
   15a70:	str	r3, [sp, #24]
   15a74:	mov	r3, #1
   15a78:	mov	r8, r1
   15a7c:	str	r2, [sp, #56]	; 0x38
   15a80:	str	r3, [sp, #36]	; 0x24
   15a84:	bl	11018 <__ctype_get_mb_cur_max@plt>
   15a88:	ldr	r3, [sp, #156]	; 0x9c
   15a8c:	mov	fp, r8
   15a90:	mov	r2, #0
   15a94:	lsr	r3, r3, #1
   15a98:	and	r3, r3, #1
   15a9c:	str	r2, [sp, #68]	; 0x44
   15aa0:	str	r3, [sp, #28]
   15aa4:	str	r2, [sp, #40]	; 0x28
   15aa8:	str	r2, [sp, #44]	; 0x2c
   15aac:	str	r2, [sp, #52]	; 0x34
   15ab0:	str	r2, [sp, #64]	; 0x40
   15ab4:	str	r2, [sp, #72]	; 0x48
   15ab8:	str	sl, [sp, #32]
   15abc:	str	r0, [sp, #76]	; 0x4c
   15ac0:	ldr	r3, [sp, #152]	; 0x98
   15ac4:	cmp	r3, #10
   15ac8:	ldrls	pc, [pc, r3, lsl #2]
   15acc:	b	16c8c <__assert_fail@plt+0x5a88>
   15ad0:	strdeq	r5, [r1], -ip
   15ad4:	andeq	r5, r1, r4, ror #27
   15ad8:	andeq	r5, r1, r8, lsl #28
   15adc:	andeq	r5, r1, ip, lsr #28
   15ae0:	andeq	r5, r1, r8, asr pc
   15ae4:	andeq	r5, r1, ip, lsr #30
   15ae8:	andeq	r5, r1, r4, lsl #30
   15aec:	andeq	r5, r1, r0, asr #28
   15af0:	andeq	r5, r1, r8, asr lr
   15af4:	andeq	r5, r1, r8, asr lr
   15af8:	andeq	r5, r1, r8, asr lr
   15afc:	mov	r3, #0
   15b00:	mov	r7, r3
   15b04:	str	r3, [sp, #28]
   15b08:	ldr	r3, [sp, #44]	; 0x2c
   15b0c:	mov	sl, #0
   15b10:	eor	r3, r3, #1
   15b14:	str	r3, [sp, #60]	; 0x3c
   15b18:	ldr	r3, [sp, #24]
   15b1c:	cmn	r3, #1
   15b20:	beq	16084 <__assert_fail@plt+0x4e80>
   15b24:	ldr	r3, [sp, #24]
   15b28:	subs	r5, r3, sl
   15b2c:	movne	r5, #1
   15b30:	cmp	r5, #0
   15b34:	beq	1609c <__assert_fail@plt+0x4e98>
   15b38:	ldr	r3, [sp, #152]	; 0x98
   15b3c:	ldr	r8, [sp, #44]	; 0x2c
   15b40:	cmp	r3, #2
   15b44:	moveq	r8, #0
   15b48:	andne	r8, r8, #1
   15b4c:	ldr	r3, [sp, #52]	; 0x34
   15b50:	adds	r9, r3, #0
   15b54:	movne	r9, #1
   15b58:	ands	r6, r9, r8
   15b5c:	beq	16504 <__assert_fail@plt+0x5300>
   15b60:	ldr	r2, [sp, #52]	; 0x34
   15b64:	ldr	r1, [sp, #24]
   15b68:	cmp	r2, #1
   15b6c:	mov	r3, r2
   15b70:	movls	r3, #0
   15b74:	movhi	r3, #1
   15b78:	cmn	r1, #1
   15b7c:	movne	r3, #0
   15b80:	cmp	r3, #0
   15b84:	add	r4, sl, r2
   15b88:	beq	15b98 <__assert_fail@plt+0x4994>
   15b8c:	ldr	r0, [sp, #56]	; 0x38
   15b90:	bl	110c0 <strlen@plt>
   15b94:	str	r0, [sp, #24]
   15b98:	ldr	r3, [sp, #24]
   15b9c:	cmp	r3, r4
   15ba0:	ldr	r3, [sp, #56]	; 0x38
   15ba4:	add	r3, r3, sl
   15ba8:	str	r3, [sp, #48]	; 0x30
   15bac:	bcc	16510 <__assert_fail@plt+0x530c>
   15bb0:	mov	r0, r3
   15bb4:	ldr	r2, [sp, #52]	; 0x34
   15bb8:	ldr	r1, [sp, #64]	; 0x40
   15bbc:	bl	10fac <memcmp@plt>
   15bc0:	cmp	r0, #0
   15bc4:	bne	16510 <__assert_fail@plt+0x530c>
   15bc8:	ldr	r3, [sp, #28]
   15bcc:	cmp	r3, #0
   15bd0:	bne	16d8c <__assert_fail@plt+0x5b88>
   15bd4:	ldr	r3, [sp, #48]	; 0x30
   15bd8:	ldrb	r4, [r3]
   15bdc:	cmp	r4, #126	; 0x7e
   15be0:	ldrls	pc, [pc, r4, lsl #2]
   15be4:	b	164a4 <__assert_fail@plt+0x52a0>
   15be8:	andeq	r6, r1, r8, asr #5
   15bec:	andeq	r6, r1, r4, lsr #9
   15bf0:	andeq	r6, r1, r4, lsr #9
   15bf4:	andeq	r6, r1, r4, lsr #9
   15bf8:	andeq	r6, r1, r4, lsr #9
   15bfc:	andeq	r6, r1, r4, lsr #9
   15c00:	andeq	r6, r1, r4, lsr #9
   15c04:	andeq	r6, r1, ip, lsr #5
   15c08:	muleq	r1, r0, r2
   15c0c:	andeq	r6, r1, ip, lsl #9
   15c10:	strdeq	r6, [r1], -r0
   15c14:	ldrdeq	r6, [r1], -r4
   15c18:	andeq	r6, r1, r8, ror #8
   15c1c:	andeq	r6, r1, r4, asr #8
   15c20:	andeq	r6, r1, r4, lsr #9
   15c24:	andeq	r6, r1, r4, lsr #9
   15c28:	andeq	r6, r1, r4, lsr #9
   15c2c:	andeq	r6, r1, r4, lsr #9
   15c30:	andeq	r6, r1, r4, lsr #9
   15c34:	andeq	r6, r1, r4, lsr #9
   15c38:	andeq	r6, r1, r4, lsr #9
   15c3c:	andeq	r6, r1, r4, lsr #9
   15c40:	andeq	r6, r1, r4, lsr #9
   15c44:	andeq	r6, r1, r4, lsr #9
   15c48:	andeq	r6, r1, r4, lsr #9
   15c4c:	andeq	r6, r1, r4, lsr #9
   15c50:	andeq	r6, r1, r4, lsr #9
   15c54:	andeq	r6, r1, r4, lsr #9
   15c58:	andeq	r6, r1, r4, lsr #9
   15c5c:	andeq	r6, r1, r4, lsr #9
   15c60:	andeq	r6, r1, r4, lsr #9
   15c64:	andeq	r6, r1, r4, lsr #9
   15c68:	andeq	r6, r1, r4, lsl #9
   15c6c:			; <UNDEFINED> instruction: 0x000163b8
   15c70:			; <UNDEFINED> instruction: 0x000163b8
   15c74:	andeq	r5, r1, r8, asr #31
   15c78:			; <UNDEFINED> instruction: 0x000163b8
   15c7c:	andeq	r6, r1, r0, asr r4
   15c80:			; <UNDEFINED> instruction: 0x000163b8
   15c84:	andeq	r6, r1, r4, lsr #8
   15c88:			; <UNDEFINED> instruction: 0x000163b8
   15c8c:			; <UNDEFINED> instruction: 0x000163b8
   15c90:			; <UNDEFINED> instruction: 0x000163b8
   15c94:	andeq	r6, r1, r0, asr r4
   15c98:	andeq	r6, r1, r0, asr r4
   15c9c:	andeq	r6, r1, r0, asr r4
   15ca0:	andeq	r6, r1, r0, asr r4
   15ca4:	andeq	r6, r1, r0, asr r4
   15ca8:	andeq	r6, r1, r0, asr r4
   15cac:	andeq	r6, r1, r0, asr r4
   15cb0:	andeq	r6, r1, r0, asr r4
   15cb4:	andeq	r6, r1, r0, asr r4
   15cb8:	andeq	r6, r1, r0, asr r4
   15cbc:	andeq	r6, r1, r0, asr r4
   15cc0:	andeq	r6, r1, r0, asr r4
   15cc4:	andeq	r6, r1, r0, asr r4
   15cc8:	andeq	r6, r1, r0, asr r4
   15ccc:	andeq	r6, r1, r0, asr r4
   15cd0:	andeq	r6, r1, r0, asr r4
   15cd4:			; <UNDEFINED> instruction: 0x000163b8
   15cd8:			; <UNDEFINED> instruction: 0x000163b8
   15cdc:			; <UNDEFINED> instruction: 0x000163b8
   15ce0:			; <UNDEFINED> instruction: 0x000163b8
   15ce4:	strdeq	r6, [r1], -r4
   15ce8:	andeq	r6, r1, r4, lsr #9
   15cec:	andeq	r6, r1, r0, asr r4
   15cf0:	andeq	r6, r1, r0, asr r4
   15cf4:	andeq	r6, r1, r0, asr r4
   15cf8:	andeq	r6, r1, r0, asr r4
   15cfc:	andeq	r6, r1, r0, asr r4
   15d00:	andeq	r6, r1, r0, asr r4
   15d04:	andeq	r6, r1, r0, asr r4
   15d08:	andeq	r6, r1, r0, asr r4
   15d0c:	andeq	r6, r1, r0, asr r4
   15d10:	andeq	r6, r1, r0, asr r4
   15d14:	andeq	r6, r1, r0, asr r4
   15d18:	andeq	r6, r1, r0, asr r4
   15d1c:	andeq	r6, r1, r0, asr r4
   15d20:	andeq	r6, r1, r0, asr r4
   15d24:	andeq	r6, r1, r0, asr r4
   15d28:	andeq	r6, r1, r0, asr r4
   15d2c:	andeq	r6, r1, r0, asr r4
   15d30:	andeq	r6, r1, r0, asr r4
   15d34:	andeq	r6, r1, r0, asr r4
   15d38:	andeq	r6, r1, r0, asr r4
   15d3c:	andeq	r6, r1, r0, asr r4
   15d40:	andeq	r6, r1, r0, asr r4
   15d44:	andeq	r6, r1, r0, asr r4
   15d48:	andeq	r6, r1, r0, asr r4
   15d4c:	andeq	r6, r1, r0, asr r4
   15d50:	andeq	r6, r1, r0, asr r4
   15d54:			; <UNDEFINED> instruction: 0x000163b8
   15d58:	andeq	r6, r1, r4, lsl r1
   15d5c:	andeq	r6, r1, r0, asr r4
   15d60:			; <UNDEFINED> instruction: 0x000163b8
   15d64:	andeq	r6, r1, r0, asr r4
   15d68:			; <UNDEFINED> instruction: 0x000163b8
   15d6c:	andeq	r6, r1, r0, asr r4
   15d70:	andeq	r6, r1, r0, asr r4
   15d74:	andeq	r6, r1, r0, asr r4
   15d78:	andeq	r6, r1, r0, asr r4
   15d7c:	andeq	r6, r1, r0, asr r4
   15d80:	andeq	r6, r1, r0, asr r4
   15d84:	andeq	r6, r1, r0, asr r4
   15d88:	andeq	r6, r1, r0, asr r4
   15d8c:	andeq	r6, r1, r0, asr r4
   15d90:	andeq	r6, r1, r0, asr r4
   15d94:	andeq	r6, r1, r0, asr r4
   15d98:	andeq	r6, r1, r0, asr r4
   15d9c:	andeq	r6, r1, r0, asr r4
   15da0:	andeq	r6, r1, r0, asr r4
   15da4:	andeq	r6, r1, r0, asr r4
   15da8:	andeq	r6, r1, r0, asr r4
   15dac:	andeq	r6, r1, r0, asr r4
   15db0:	andeq	r6, r1, r0, asr r4
   15db4:	andeq	r6, r1, r0, asr r4
   15db8:	andeq	r6, r1, r0, asr r4
   15dbc:	andeq	r6, r1, r0, asr r4
   15dc0:	andeq	r6, r1, r0, asr r4
   15dc4:	andeq	r6, r1, r0, asr r4
   15dc8:	andeq	r6, r1, r0, asr r4
   15dcc:	andeq	r6, r1, r0, asr r4
   15dd0:	andeq	r6, r1, r0, asr r4
   15dd4:	andeq	r5, r1, r8, lsr #31
   15dd8:			; <UNDEFINED> instruction: 0x000163b8
   15ddc:	andeq	r5, r1, r8, lsr #31
   15de0:	andeq	r5, r1, r8, asr #31
   15de4:	mov	r3, #1
   15de8:	str	r3, [sp, #28]
   15dec:	str	r3, [sp, #52]	; 0x34
   15df0:	ldr	r3, [pc, #4000]	; 16d98 <__assert_fail@plt+0x5b94>
   15df4:	mov	r7, #0
   15df8:	str	r3, [sp, #64]	; 0x40
   15dfc:	mov	r3, #2
   15e00:	str	r3, [sp, #152]	; 0x98
   15e04:	b	15b08 <__assert_fail@plt+0x4904>
   15e08:	ldr	r3, [sp, #28]
   15e0c:	cmp	r3, #0
   15e10:	beq	15f6c <__assert_fail@plt+0x4d68>
   15e14:	mov	r3, #1
   15e18:	str	r3, [sp, #52]	; 0x34
   15e1c:	ldr	r3, [pc, #3956]	; 16d98 <__assert_fail@plt+0x5b94>
   15e20:	mov	r7, #0
   15e24:	str	r3, [sp, #64]	; 0x40
   15e28:	b	15b08 <__assert_fail@plt+0x4904>
   15e2c:	mov	r3, #1
   15e30:	str	r3, [sp, #44]	; 0x2c
   15e34:	str	r3, [sp, #52]	; 0x34
   15e38:	str	r3, [sp, #28]
   15e3c:	b	15df0 <__assert_fail@plt+0x4bec>
   15e40:	mov	r3, #0
   15e44:	str	r3, [sp, #28]
   15e48:	mov	r3, #1
   15e4c:	str	r3, [sp, #44]	; 0x2c
   15e50:	mov	r7, #0
   15e54:	b	15b08 <__assert_fail@plt+0x4904>
   15e58:	ldr	r3, [sp, #152]	; 0x98
   15e5c:	cmp	r3, #10
   15e60:	beq	15ea4 <__assert_fail@plt+0x4ca0>
   15e64:	mov	r2, #5
   15e68:	ldr	r1, [pc, #3884]	; 16d9c <__assert_fail@plt+0x5b98>
   15e6c:	mov	r0, #0
   15e70:	bl	10fc4 <dcgettext@plt>
   15e74:	ldr	r2, [pc, #3872]	; 16d9c <__assert_fail@plt+0x5b98>
   15e78:	cmp	r0, r2
   15e7c:	str	r0, [sp, #164]	; 0xa4
   15e80:	beq	16e88 <__assert_fail@plt+0x5c84>
   15e84:	mov	r2, #5
   15e88:	ldr	r1, [pc, #3848]	; 16d98 <__assert_fail@plt+0x5b94>
   15e8c:	mov	r0, #0
   15e90:	bl	10fc4 <dcgettext@plt>
   15e94:	ldr	r2, [pc, #3836]	; 16d98 <__assert_fail@plt+0x5b94>
   15e98:	cmp	r0, r2
   15e9c:	str	r0, [sp, #168]	; 0xa8
   15ea0:	beq	16e78 <__assert_fail@plt+0x5c74>
   15ea4:	ldr	r7, [sp, #28]
   15ea8:	cmp	r7, #0
   15eac:	movne	r7, #0
   15eb0:	bne	15ee4 <__assert_fail@plt+0x4ce0>
   15eb4:	ldr	r3, [sp, #164]	; 0xa4
   15eb8:	ldrb	r3, [r3]
   15ebc:	cmp	r3, #0
   15ec0:	beq	16e98 <__assert_fail@plt+0x5c94>
   15ec4:	ldr	r2, [sp, #164]	; 0xa4
   15ec8:	ldr	r1, [sp, #32]
   15ecc:	cmp	fp, r7
   15ed0:	strbhi	r3, [r1, r7]
   15ed4:	ldrb	r3, [r2, #1]!
   15ed8:	add	r7, r7, #1
   15edc:	cmp	r3, #0
   15ee0:	bne	15ecc <__assert_fail@plt+0x4cc8>
   15ee4:	ldr	r0, [sp, #168]	; 0xa8
   15ee8:	bl	110c0 <strlen@plt>
   15eec:	ldr	r3, [sp, #168]	; 0xa8
   15ef0:	str	r3, [sp, #64]	; 0x40
   15ef4:	mov	r3, #1
   15ef8:	str	r3, [sp, #44]	; 0x2c
   15efc:	str	r0, [sp, #52]	; 0x34
   15f00:	b	15b08 <__assert_fail@plt+0x4904>
   15f04:	mov	r3, #1
   15f08:	str	r3, [sp, #44]	; 0x2c
   15f0c:	str	r3, [sp, #52]	; 0x34
   15f10:	str	r3, [sp, #28]
   15f14:	ldr	r3, [pc, #3716]	; 16da0 <__assert_fail@plt+0x5b9c>
   15f18:	mov	r7, #0
   15f1c:	str	r3, [sp, #64]	; 0x40
   15f20:	mov	r3, #5
   15f24:	str	r3, [sp, #152]	; 0x98
   15f28:	b	15b08 <__assert_fail@plt+0x4904>
   15f2c:	ldr	r3, [sp, #28]
   15f30:	cmp	r3, #0
   15f34:	beq	16c34 <__assert_fail@plt+0x5a30>
   15f38:	ldr	r3, [sp, #28]
   15f3c:	mov	r7, #0
   15f40:	str	r3, [sp, #44]	; 0x2c
   15f44:	mov	r3, #1
   15f48:	str	r3, [sp, #52]	; 0x34
   15f4c:	ldr	r3, [pc, #3660]	; 16da0 <__assert_fail@plt+0x5b9c>
   15f50:	str	r3, [sp, #64]	; 0x40
   15f54:	b	15b08 <__assert_fail@plt+0x4904>
   15f58:	ldr	r3, [sp, #28]
   15f5c:	cmp	r3, #0
   15f60:	mov	r3, #1
   15f64:	streq	r3, [sp, #44]	; 0x2c
   15f68:	bne	15dec <__assert_fail@plt+0x4be8>
   15f6c:	cmp	fp, #0
   15f70:	beq	16c64 <__assert_fail@plt+0x5a60>
   15f74:	ldr	r3, [sp, #32]
   15f78:	mov	r2, #39	; 0x27
   15f7c:	mov	r7, #1
   15f80:	strb	r2, [r3]
   15f84:	mov	r3, #0
   15f88:	str	r3, [sp, #28]
   15f8c:	mov	r3, #1
   15f90:	str	r3, [sp, #52]	; 0x34
   15f94:	ldr	r3, [pc, #3580]	; 16d98 <__assert_fail@plt+0x5b94>
   15f98:	str	r3, [sp, #64]	; 0x40
   15f9c:	mov	r3, #2
   15fa0:	str	r3, [sp, #152]	; 0x98
   15fa4:	b	15b08 <__assert_fail@plt+0x4904>
   15fa8:	ldr	r3, [sp, #24]
   15fac:	cmn	r3, #1
   15fb0:	beq	16bc8 <__assert_fail@plt+0x59c4>
   15fb4:	ldr	r3, [sp, #24]
   15fb8:	subs	r3, r3, #1
   15fbc:	movne	r3, #1
   15fc0:	cmp	r3, #0
   15fc4:	bne	15fd0 <__assert_fail@plt+0x4dcc>
   15fc8:	cmp	sl, #0
   15fcc:	beq	163bc <__assert_fail@plt+0x51b8>
   15fd0:	ldr	r3, [sp, #152]	; 0x98
   15fd4:	mov	r5, #0
   15fd8:	sub	r2, r3, #2
   15fdc:	mov	r8, r5
   15fe0:	clz	r2, r2
   15fe4:	lsr	r2, r2, #5
   15fe8:	ldr	r3, [sp, #60]	; 0x3c
   15fec:	ldr	r1, [sp, #28]
   15ff0:	orr	r3, r2, r3
   15ff4:	eor	r3, r3, #1
   15ff8:	orr	r3, r1, r3
   15ffc:	tst	r3, #255	; 0xff
   16000:	bne	1672c <__assert_fail@plt+0x5528>
   16004:	cmp	r6, #0
   16008:	bne	16158 <__assert_fail@plt+0x4f54>
   1600c:	ldr	r3, [sp, #40]	; 0x28
   16010:	eor	r8, r8, #1
   16014:	and	r8, r8, r3
   16018:	add	sl, sl, #1
   1601c:	uxtb	r6, r8
   16020:	cmp	r6, #0
   16024:	beq	16058 <__assert_fail@plt+0x4e54>
   16028:	cmp	fp, r7
   1602c:	movhi	r2, #39	; 0x27
   16030:	ldrhi	r3, [sp, #32]
   16034:	strbhi	r2, [r3, r7]
   16038:	add	r3, r7, #1
   1603c:	cmp	fp, r3
   16040:	movhi	r1, #39	; 0x27
   16044:	ldrhi	r2, [sp, #32]
   16048:	add	r7, r7, #2
   1604c:	strbhi	r1, [r2, r3]
   16050:	mov	r3, #0
   16054:	str	r3, [sp, #40]	; 0x28
   16058:	cmp	r7, fp
   1605c:	ldrcc	r3, [sp, #32]
   16060:	strbcc	r4, [r3, r7]
   16064:	ldr	r3, [sp, #36]	; 0x24
   16068:	cmp	r5, #0
   1606c:	moveq	r3, #0
   16070:	str	r3, [sp, #36]	; 0x24
   16074:	ldr	r3, [sp, #24]
   16078:	add	r7, r7, #1
   1607c:	cmn	r3, #1
   16080:	bne	15b24 <__assert_fail@plt+0x4920>
   16084:	ldr	r3, [sp, #56]	; 0x38
   16088:	ldrb	r5, [r3, sl]
   1608c:	adds	r5, r5, #0
   16090:	movne	r5, #1
   16094:	cmp	r5, #0
   16098:	bne	15b38 <__assert_fail@plt+0x4934>
   1609c:	ldr	r3, [sp, #152]	; 0x98
   160a0:	ldr	r1, [sp, #28]
   160a4:	sub	r3, r3, #2
   160a8:	clz	r3, r3
   160ac:	lsr	r3, r3, #5
   160b0:	and	r9, r1, r3
   160b4:	cmp	r7, #0
   160b8:	movne	r2, #0
   160bc:	andeq	r2, r9, #1
   160c0:	cmp	r2, #0
   160c4:	bne	16aa0 <__assert_fail@plt+0x589c>
   160c8:	eor	r2, r1, #1
   160cc:	ands	r3, r3, r2
   160d0:	beq	16f5c <__assert_fail@plt+0x5d58>
   160d4:	ldr	r2, [sp, #68]	; 0x44
   160d8:	cmp	r2, #0
   160dc:	beq	16f48 <__assert_fail@plt+0x5d44>
   160e0:	ldr	r3, [sp, #36]	; 0x24
   160e4:	cmp	r3, #0
   160e8:	bne	16f00 <__assert_fail@plt+0x5cfc>
   160ec:	ldr	r2, [sp, #72]	; 0x48
   160f0:	clz	r3, fp
   160f4:	cmp	r2, #0
   160f8:	lsr	r3, r3, #5
   160fc:	moveq	r3, #0
   16100:	cmp	r3, #0
   16104:	beq	16ea0 <__assert_fail@plt+0x5c9c>
   16108:	str	r3, [sp, #68]	; 0x44
   1610c:	ldr	fp, [sp, #72]	; 0x48
   16110:	b	15ac0 <__assert_fail@plt+0x48bc>
   16114:	ldr	r3, [sp, #152]	; 0x98
   16118:	cmp	r3, #2
   1611c:	beq	16770 <__assert_fail@plt+0x556c>
   16120:	ldr	r3, [sp, #44]	; 0x2c
   16124:	ldr	r2, [sp, #28]
   16128:	and	r2, r3, r2
   1612c:	ands	r2, r9, r2
   16130:	bne	1677c <__assert_fail@plt+0x5578>
   16134:	mov	r4, #92	; 0x5c
   16138:	mov	r3, r4
   1613c:	ldr	r1, [sp, #44]	; 0x2c
   16140:	cmp	r1, #0
   16144:	moveq	r5, #0
   16148:	moveq	r8, r1
   1614c:	beq	15fe8 <__assert_fail@plt+0x4de4>
   16150:	mov	r4, r3
   16154:	mov	r5, #0
   16158:	ldr	r3, [sp, #28]
   1615c:	cmp	r3, #0
   16160:	bne	16764 <__assert_fail@plt+0x5560>
   16164:	ldr	r3, [sp, #40]	; 0x28
   16168:	eor	r9, r3, #1
   1616c:	and	r9, r9, r2
   16170:	ands	r9, r9, #255	; 0xff
   16174:	beq	161b8 <__assert_fail@plt+0x4fb4>
   16178:	cmp	fp, r7
   1617c:	movhi	r2, #39	; 0x27
   16180:	ldrhi	r3, [sp, #32]
   16184:	str	r9, [sp, #40]	; 0x28
   16188:	strbhi	r2, [r3, r7]
   1618c:	add	r3, r7, #1
   16190:	cmp	fp, r3
   16194:	movhi	r1, #36	; 0x24
   16198:	ldrhi	r2, [sp, #32]
   1619c:	strbhi	r1, [r2, r3]
   161a0:	add	r3, r7, #2
   161a4:	cmp	fp, r3
   161a8:	add	r7, r7, #3
   161ac:	ldrhi	r2, [sp, #32]
   161b0:	movhi	r1, #39	; 0x27
   161b4:	strbhi	r1, [r2, r3]
   161b8:	cmp	fp, r7
   161bc:	movhi	r2, #92	; 0x5c
   161c0:	ldrhi	r3, [sp, #32]
   161c4:	add	sl, sl, #1
   161c8:	strbhi	r2, [r3, r7]
   161cc:	add	r7, r7, #1
   161d0:	b	16058 <__assert_fail@plt+0x4e54>
   161d4:	ldr	r3, [sp, #152]	; 0x98
   161d8:	mov	r4, #11
   161dc:	sub	r2, r3, #2
   161e0:	mov	r3, #118	; 0x76
   161e4:	clz	r2, r2
   161e8:	lsr	r2, r2, #5
   161ec:	b	1613c <__assert_fail@plt+0x4f38>
   161f0:	mov	r4, #10
   161f4:	mov	r3, #110	; 0x6e
   161f8:	ldr	r2, [sp, #152]	; 0x98
   161fc:	ldr	r1, [sp, #28]
   16200:	sub	r2, r2, #2
   16204:	clz	r2, r2
   16208:	lsr	r2, r2, #5
   1620c:	ands	r1, r1, r2
   16210:	beq	1613c <__assert_fail@plt+0x4f38>
   16214:	ldr	sl, [sp, #32]
   16218:	mov	r8, fp
   1621c:	mov	r2, r1
   16220:	mov	r3, #2
   16224:	str	r3, [sp, #152]	; 0x98
   16228:	ldr	r9, [sp, #44]	; 0x2c
   1622c:	ldr	r3, [sp, #152]	; 0x98
   16230:	and	r9, r9, r2
   16234:	tst	r9, #255	; 0xff
   16238:	movne	r3, #4
   1623c:	str	r3, [sp, #152]	; 0x98
   16240:	ldr	r3, [sp, #156]	; 0x9c
   16244:	mov	ip, #0
   16248:	bic	r3, r3, #2
   1624c:	str	r3, [sp, #4]
   16250:	ldr	r3, [sp, #168]	; 0xa8
   16254:	ldr	r2, [sp, #56]	; 0x38
   16258:	str	r3, [sp, #16]
   1625c:	ldr	r3, [sp, #164]	; 0xa4
   16260:	mov	r1, r8
   16264:	str	r3, [sp, #12]
   16268:	ldr	r3, [sp, #152]	; 0x98
   1626c:	mov	r0, sl
   16270:	str	r3, [sp]
   16274:	str	ip, [sp, #8]
   16278:	ldr	r3, [sp, #24]
   1627c:	bl	15a64 <__assert_fail@plt+0x4860>
   16280:	mov	fp, r0
   16284:	mov	r0, fp
   16288:	add	sp, sp, #116	; 0x74
   1628c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   16290:	ldr	r3, [sp, #152]	; 0x98
   16294:	mov	r4, #8
   16298:	sub	r2, r3, #2
   1629c:	mov	r3, #98	; 0x62
   162a0:	clz	r2, r2
   162a4:	lsr	r2, r2, #5
   162a8:	b	1613c <__assert_fail@plt+0x4f38>
   162ac:	ldr	r3, [sp, #152]	; 0x98
   162b0:	mov	r4, #7
   162b4:	sub	r2, r3, #2
   162b8:	mov	r3, #97	; 0x61
   162bc:	clz	r2, r2
   162c0:	lsr	r2, r2, #5
   162c4:	b	1613c <__assert_fail@plt+0x4f38>
   162c8:	ldr	r3, [sp, #44]	; 0x2c
   162cc:	cmp	r3, #0
   162d0:	beq	16ab4 <__assert_fail@plt+0x58b0>
   162d4:	ldr	r3, [sp, #28]
   162d8:	cmp	r3, #0
   162dc:	bne	16d8c <__assert_fail@plt+0x5b88>
   162e0:	ldr	r3, [sp, #152]	; 0x98
   162e4:	sub	r2, r3, #2
   162e8:	ldr	r3, [sp, #40]	; 0x28
   162ec:	clz	r2, r2
   162f0:	eor	r3, r3, #1
   162f4:	lsr	r2, r2, #5
   162f8:	ands	r3, r2, r3
   162fc:	moveq	r1, r7
   16300:	beq	16344 <__assert_fail@plt+0x5140>
   16304:	cmp	fp, r7
   16308:	movhi	r0, #39	; 0x27
   1630c:	ldrhi	r1, [sp, #32]
   16310:	str	r3, [sp, #40]	; 0x28
   16314:	strbhi	r0, [r1, r7]
   16318:	add	r1, r7, #1
   1631c:	cmp	fp, r1
   16320:	movhi	ip, #36	; 0x24
   16324:	ldrhi	r0, [sp, #32]
   16328:	strbhi	ip, [r0, r1]
   1632c:	add	r1, r7, #2
   16330:	cmp	fp, r1
   16334:	movhi	ip, #39	; 0x27
   16338:	ldrhi	r0, [sp, #32]
   1633c:	strbhi	ip, [r0, r1]
   16340:	add	r1, r7, #3
   16344:	cmp	fp, r1
   16348:	movhi	r0, #92	; 0x5c
   1634c:	ldrhi	r3, [sp, #32]
   16350:	add	r7, r1, #1
   16354:	strbhi	r0, [r3, r1]
   16358:	cmp	r8, #0
   1635c:	beq	16ca0 <__assert_fail@plt+0x5a9c>
   16360:	ldr	r0, [sp, #24]
   16364:	add	r3, sl, #1
   16368:	cmp	r3, r0
   1636c:	bcs	16bdc <__assert_fail@plt+0x59d8>
   16370:	ldr	r0, [sp, #56]	; 0x38
   16374:	ldrb	r3, [r0, r3]
   16378:	sub	r3, r3, #48	; 0x30
   1637c:	cmp	r3, #9
   16380:	bhi	16bdc <__assert_fail@plt+0x59d8>
   16384:	cmp	fp, r7
   16388:	movhi	r3, #48	; 0x30
   1638c:	ldrhi	r0, [sp, #32]
   16390:	ldr	r5, [sp, #28]
   16394:	mov	r4, #48	; 0x30
   16398:	strbhi	r3, [r0, r7]
   1639c:	add	r3, r1, #2
   163a0:	cmp	fp, r3
   163a4:	movhi	r0, #48	; 0x30
   163a8:	ldrhi	ip, [sp, #32]
   163ac:	add	r7, r1, #3
   163b0:	strbhi	r0, [ip, r3]
   163b4:	b	15fe8 <__assert_fail@plt+0x4de4>
   163b8:	mov	r5, #0
   163bc:	ldr	r3, [sp, #152]	; 0x98
   163c0:	sub	r2, r3, #2
   163c4:	ldr	r3, [sp, #28]
   163c8:	clz	r2, r2
   163cc:	lsr	r2, r2, #5
   163d0:	ands	r8, r3, r2
   163d4:	beq	15fe8 <__assert_fail@plt+0x4de4>
   163d8:	mov	r3, r8
   163dc:	mov	r2, r3
   163e0:	mov	r3, #2
   163e4:	ldr	sl, [sp, #32]
   163e8:	mov	r8, fp
   163ec:	str	r3, [sp, #152]	; 0x98
   163f0:	b	16228 <__assert_fail@plt+0x5024>
   163f4:	ldr	r3, [sp, #152]	; 0x98
   163f8:	cmp	r3, #2
   163fc:	beq	16b20 <__assert_fail@plt+0x591c>
   16400:	cmp	r3, #5
   16404:	beq	16ae0 <__assert_fail@plt+0x58dc>
   16408:	mov	r5, #0
   1640c:	sub	r2, r3, #2
   16410:	mov	r8, r5
   16414:	clz	r2, r2
   16418:	mov	r4, #63	; 0x3f
   1641c:	lsr	r2, r2, #5
   16420:	b	15fe8 <__assert_fail@plt+0x4de4>
   16424:	ldr	r3, [sp, #152]	; 0x98
   16428:	cmp	r3, #2
   1642c:	beq	16b40 <__assert_fail@plt+0x593c>
   16430:	mov	r2, #0
   16434:	str	r5, [sp, #68]	; 0x44
   16438:	mov	r8, r2
   1643c:	mov	r4, #39	; 0x27
   16440:	b	15fe8 <__assert_fail@plt+0x4de4>
   16444:	mov	r4, #13
   16448:	mov	r3, #114	; 0x72
   1644c:	b	161f8 <__assert_fail@plt+0x4ff4>
   16450:	ldr	r3, [sp, #152]	; 0x98
   16454:	mov	r8, #0
   16458:	sub	r2, r3, #2
   1645c:	clz	r2, r2
   16460:	lsr	r2, r2, #5
   16464:	b	15fe8 <__assert_fail@plt+0x4de4>
   16468:	ldr	r3, [sp, #152]	; 0x98
   1646c:	mov	r4, #12
   16470:	sub	r2, r3, #2
   16474:	mov	r3, #102	; 0x66
   16478:	clz	r2, r2
   1647c:	lsr	r2, r2, #5
   16480:	b	1613c <__assert_fail@plt+0x4f38>
   16484:	mov	r5, r6
   16488:	b	163bc <__assert_fail@plt+0x51b8>
   1648c:	ldr	r3, [sp, #152]	; 0x98
   16490:	sub	r2, r3, #2
   16494:	mov	r3, #116	; 0x74
   16498:	clz	r2, r2
   1649c:	lsr	r2, r2, #5
   164a0:	b	1613c <__assert_fail@plt+0x4f38>
   164a4:	ldr	r8, [sp, #76]	; 0x4c
   164a8:	cmp	r8, #1
   164ac:	bne	1695c <__assert_fail@plt+0x5758>
   164b0:	bl	110a8 <__ctype_b_loc@plt>
   164b4:	sxth	r3, r4
   164b8:	mov	ip, r8
   164bc:	lsl	r3, r3, #1
   164c0:	ldr	r2, [r0]
   164c4:	ldrh	r3, [r2, r3]
   164c8:	and	r3, r3, #16384	; 0x4000
   164cc:	cmp	r3, #0
   164d0:	movne	r5, #1
   164d4:	moveq	r5, #0
   164d8:	moveq	r3, #1
   164dc:	movne	r3, #0
   164e0:	ldr	r2, [sp, #44]	; 0x2c
   164e4:	and	r3, r3, r2
   164e8:	ands	r8, r3, #255	; 0xff
   164ec:	bne	167f0 <__assert_fail@plt+0x55ec>
   164f0:	ldr	r3, [sp, #152]	; 0x98
   164f4:	sub	r2, r3, #2
   164f8:	clz	r2, r2
   164fc:	lsr	r2, r2, #5
   16500:	b	15fe8 <__assert_fail@plt+0x4de4>
   16504:	ldr	r3, [sp, #56]	; 0x38
   16508:	add	r3, r3, sl
   1650c:	str	r3, [sp, #48]	; 0x30
   16510:	ldr	r3, [sp, #48]	; 0x30
   16514:	mov	r6, #0
   16518:	ldrb	r4, [r3]
   1651c:	cmp	r4, #126	; 0x7e
   16520:	ldrls	pc, [pc, r4, lsl #2]
   16524:	b	164a4 <__assert_fail@plt+0x52a0>
   16528:	andeq	r6, r1, r8, asr #5
   1652c:	andeq	r6, r1, r4, lsr #9
   16530:	andeq	r6, r1, r4, lsr #9
   16534:	andeq	r6, r1, r4, lsr #9
   16538:	andeq	r6, r1, r4, lsr #9
   1653c:	andeq	r6, r1, r4, lsr #9
   16540:	andeq	r6, r1, r4, lsr #9
   16544:	andeq	r6, r1, ip, lsr #5
   16548:	muleq	r1, r0, r2
   1654c:	andeq	r6, r1, r4, lsr #14
   16550:	strdeq	r6, [r1], -r0
   16554:	ldrdeq	r6, [r1], -r4
   16558:	andeq	r6, r1, r8, ror #8
   1655c:	andeq	r6, r1, r4, asr #8
   16560:	andeq	r6, r1, r4, lsr #9
   16564:	andeq	r6, r1, r4, lsr #9
   16568:	andeq	r6, r1, r4, lsr #9
   1656c:	andeq	r6, r1, r4, lsr #9
   16570:	andeq	r6, r1, r4, lsr #9
   16574:	andeq	r6, r1, r4, lsr #9
   16578:	andeq	r6, r1, r4, lsr #9
   1657c:	andeq	r6, r1, r4, lsr #9
   16580:	andeq	r6, r1, r4, lsr #9
   16584:	andeq	r6, r1, r4, lsr #9
   16588:	andeq	r6, r1, r4, lsr #9
   1658c:	andeq	r6, r1, r4, lsr #9
   16590:	andeq	r6, r1, r4, lsr #9
   16594:	andeq	r6, r1, r4, lsr #9
   16598:	andeq	r6, r1, r4, lsr #9
   1659c:	andeq	r6, r1, r4, lsr #9
   165a0:	andeq	r6, r1, r4, lsr #9
   165a4:	andeq	r6, r1, r4, lsr #9
   165a8:			; <UNDEFINED> instruction: 0x000163bc
   165ac:			; <UNDEFINED> instruction: 0x000163b8
   165b0:			; <UNDEFINED> instruction: 0x000163b8
   165b4:	andeq	r5, r1, r8, asr #31
   165b8:			; <UNDEFINED> instruction: 0x000163b8
   165bc:	andeq	r6, r1, r0, asr r4
   165c0:			; <UNDEFINED> instruction: 0x000163b8
   165c4:	andeq	r6, r1, r4, lsr #8
   165c8:			; <UNDEFINED> instruction: 0x000163b8
   165cc:			; <UNDEFINED> instruction: 0x000163b8
   165d0:			; <UNDEFINED> instruction: 0x000163b8
   165d4:	andeq	r6, r1, r0, asr r4
   165d8:	andeq	r6, r1, r0, asr r4
   165dc:	andeq	r6, r1, r0, asr r4
   165e0:	andeq	r6, r1, r0, asr r4
   165e4:	andeq	r6, r1, r0, asr r4
   165e8:	andeq	r6, r1, r0, asr r4
   165ec:	andeq	r6, r1, r0, asr r4
   165f0:	andeq	r6, r1, r0, asr r4
   165f4:	andeq	r6, r1, r0, asr r4
   165f8:	andeq	r6, r1, r0, asr r4
   165fc:	andeq	r6, r1, r0, asr r4
   16600:	andeq	r6, r1, r0, asr r4
   16604:	andeq	r6, r1, r0, asr r4
   16608:	andeq	r6, r1, r0, asr r4
   1660c:	andeq	r6, r1, r0, asr r4
   16610:	andeq	r6, r1, r0, asr r4
   16614:			; <UNDEFINED> instruction: 0x000163b8
   16618:			; <UNDEFINED> instruction: 0x000163b8
   1661c:			; <UNDEFINED> instruction: 0x000163b8
   16620:			; <UNDEFINED> instruction: 0x000163b8
   16624:	strdeq	r6, [r1], -r4
   16628:	andeq	r6, r1, r4, lsr #9
   1662c:	andeq	r6, r1, r0, asr r4
   16630:	andeq	r6, r1, r0, asr r4
   16634:	andeq	r6, r1, r0, asr r4
   16638:	andeq	r6, r1, r0, asr r4
   1663c:	andeq	r6, r1, r0, asr r4
   16640:	andeq	r6, r1, r0, asr r4
   16644:	andeq	r6, r1, r0, asr r4
   16648:	andeq	r6, r1, r0, asr r4
   1664c:	andeq	r6, r1, r0, asr r4
   16650:	andeq	r6, r1, r0, asr r4
   16654:	andeq	r6, r1, r0, asr r4
   16658:	andeq	r6, r1, r0, asr r4
   1665c:	andeq	r6, r1, r0, asr r4
   16660:	andeq	r6, r1, r0, asr r4
   16664:	andeq	r6, r1, r0, asr r4
   16668:	andeq	r6, r1, r0, asr r4
   1666c:	andeq	r6, r1, r0, asr r4
   16670:	andeq	r6, r1, r0, asr r4
   16674:	andeq	r6, r1, r0, asr r4
   16678:	andeq	r6, r1, r0, asr r4
   1667c:	andeq	r6, r1, r0, asr r4
   16680:	andeq	r6, r1, r0, asr r4
   16684:	andeq	r6, r1, r0, asr r4
   16688:	andeq	r6, r1, r0, asr r4
   1668c:	andeq	r6, r1, r0, asr r4
   16690:	andeq	r6, r1, r0, asr r4
   16694:			; <UNDEFINED> instruction: 0x000163b8
   16698:	andeq	r6, r1, r4, lsl r1
   1669c:	andeq	r6, r1, r0, asr r4
   166a0:			; <UNDEFINED> instruction: 0x000163b8
   166a4:	andeq	r6, r1, r0, asr r4
   166a8:			; <UNDEFINED> instruction: 0x000163b8
   166ac:	andeq	r6, r1, r0, asr r4
   166b0:	andeq	r6, r1, r0, asr r4
   166b4:	andeq	r6, r1, r0, asr r4
   166b8:	andeq	r6, r1, r0, asr r4
   166bc:	andeq	r6, r1, r0, asr r4
   166c0:	andeq	r6, r1, r0, asr r4
   166c4:	andeq	r6, r1, r0, asr r4
   166c8:	andeq	r6, r1, r0, asr r4
   166cc:	andeq	r6, r1, r0, asr r4
   166d0:	andeq	r6, r1, r0, asr r4
   166d4:	andeq	r6, r1, r0, asr r4
   166d8:	andeq	r6, r1, r0, asr r4
   166dc:	andeq	r6, r1, r0, asr r4
   166e0:	andeq	r6, r1, r0, asr r4
   166e4:	andeq	r6, r1, r0, asr r4
   166e8:	andeq	r6, r1, r0, asr r4
   166ec:	andeq	r6, r1, r0, asr r4
   166f0:	andeq	r6, r1, r0, asr r4
   166f4:	andeq	r6, r1, r0, asr r4
   166f8:	andeq	r6, r1, r0, asr r4
   166fc:	andeq	r6, r1, r0, asr r4
   16700:	andeq	r6, r1, r0, asr r4
   16704:	andeq	r6, r1, r0, asr r4
   16708:	andeq	r6, r1, r0, asr r4
   1670c:	andeq	r6, r1, r0, asr r4
   16710:	andeq	r6, r1, r0, asr r4
   16714:	andeq	r5, r1, r8, lsr #31
   16718:			; <UNDEFINED> instruction: 0x000163b8
   1671c:	andeq	r5, r1, r8, lsr #31
   16720:	andeq	r5, r1, r8, asr #31
   16724:	mov	r3, #116	; 0x74
   16728:	b	161f8 <__assert_fail@plt+0x4ff4>
   1672c:	ldr	r3, [sp, #160]	; 0xa0
   16730:	cmp	r3, #0
   16734:	beq	16004 <__assert_fail@plt+0x4e00>
   16738:	lsr	r3, r4, #5
   1673c:	ldr	r0, [sp, #160]	; 0xa0
   16740:	uxtb	r3, r3
   16744:	and	r1, r4, #31
   16748:	ldr	r0, [r0, r3, lsl #2]
   1674c:	lsr	r3, r0, r1
   16750:	tst	r3, #1
   16754:	beq	16004 <__assert_fail@plt+0x4e00>
   16758:	ldr	r3, [sp, #28]
   1675c:	cmp	r3, #0
   16760:	beq	16164 <__assert_fail@plt+0x4f60>
   16764:	ldr	sl, [sp, #32]
   16768:	mov	r8, fp
   1676c:	b	16228 <__assert_fail@plt+0x5024>
   16770:	ldr	r3, [sp, #28]
   16774:	cmp	r3, #0
   16778:	bne	16ccc <__assert_fail@plt+0x5ac8>
   1677c:	add	sl, sl, #1
   16780:	ldr	r6, [sp, #40]	; 0x28
   16784:	mov	r5, #0
   16788:	mov	r4, #92	; 0x5c
   1678c:	b	16020 <__assert_fail@plt+0x4e1c>
   16790:	cmp	r9, r8
   16794:	bne	16a04 <__assert_fail@plt+0x5800>
   16798:	ldr	r0, [sp, #100]	; 0x64
   1679c:	bl	10fe8 <iswprint@plt>
   167a0:	add	r5, r5, r4
   167a4:	cmp	r0, #0
   167a8:	add	r0, sp, #104	; 0x68
   167ac:	moveq	r6, #0
   167b0:	bl	10f88 <mbsinit@plt>
   167b4:	cmp	r0, #0
   167b8:	beq	16998 <__assert_fail@plt+0x5794>
   167bc:	mov	r2, r6
   167c0:	mov	ip, r5
   167c4:	eor	r5, r2, #1
   167c8:	ldr	r4, [sp, #80]	; 0x50
   167cc:	ldr	r6, [sp, #84]	; 0x54
   167d0:	ldr	r7, [sp, #88]	; 0x58
   167d4:	uxtb	r5, r5
   167d8:	cmp	ip, #1
   167dc:	bls	16cdc <__assert_fail@plt+0x5ad8>
   167e0:	ldr	r3, [sp, #44]	; 0x2c
   167e4:	and	r8, r3, r5
   167e8:	mov	r5, r2
   167ec:	uxtb	r8, r8
   167f0:	add	r2, sl, ip
   167f4:	ldr	r0, [sp, #48]	; 0x30
   167f8:	mov	r1, #0
   167fc:	str	r5, [sp, #48]	; 0x30
   16800:	ldr	r9, [sp, #28]
   16804:	ldr	ip, [sp, #40]	; 0x28
   16808:	ldr	r3, [sp, #32]
   1680c:	ldr	r5, [sp, #152]	; 0x98
   16810:	b	168cc <__assert_fail@plt+0x56c8>
   16814:	cmp	r9, #0
   16818:	bne	16bf0 <__assert_fail@plt+0x59ec>
   1681c:	eor	r1, ip, #1
   16820:	cmp	r5, #2
   16824:	movne	r1, #0
   16828:	andeq	r1, r1, #1
   1682c:	cmp	r1, #0
   16830:	beq	16868 <__assert_fail@plt+0x5664>
   16834:	cmp	fp, r7
   16838:	movhi	ip, #39	; 0x27
   1683c:	strbhi	ip, [r3, r7]
   16840:	add	ip, r7, #1
   16844:	cmp	fp, ip
   16848:	movhi	lr, #36	; 0x24
   1684c:	strbhi	lr, [r3, ip]
   16850:	add	ip, r7, #2
   16854:	cmp	fp, ip
   16858:	movhi	lr, #39	; 0x27
   1685c:	strbhi	lr, [r3, ip]
   16860:	add	r7, r7, #3
   16864:	mov	ip, r1
   16868:	cmp	fp, r7
   1686c:	movhi	r1, #92	; 0x5c
   16870:	strbhi	r1, [r3, r7]
   16874:	add	r1, r7, #1
   16878:	cmp	fp, r1
   1687c:	lsrhi	lr, r4, #6
   16880:	addhi	lr, lr, #48	; 0x30
   16884:	strbhi	lr, [r3, r1]
   16888:	add	lr, r7, #2
   1688c:	cmp	fp, lr
   16890:	lsrhi	r1, r4, #3
   16894:	andhi	r1, r1, #7
   16898:	addhi	r1, r1, #48	; 0x30
   1689c:	add	sl, sl, #1
   168a0:	strbhi	r1, [r3, lr]
   168a4:	and	r4, r4, #7
   168a8:	cmp	r2, sl
   168ac:	add	r4, r4, #48	; 0x30
   168b0:	add	r7, r7, #3
   168b4:	bls	16c14 <__assert_fail@plt+0x5a10>
   168b8:	mov	r1, r8
   168bc:	cmp	fp, r7
   168c0:	strbhi	r4, [r3, r7]
   168c4:	ldrb	r4, [r0, #1]!
   168c8:	add	r7, r7, #1
   168cc:	cmp	r8, #0
   168d0:	bne	16814 <__assert_fail@plt+0x5610>
   168d4:	cmp	r6, #0
   168d8:	bne	16928 <__assert_fail@plt+0x5724>
   168dc:	eor	r6, r1, #1
   168e0:	and	r6, r6, ip
   168e4:	add	sl, sl, #1
   168e8:	cmp	r2, sl
   168ec:	uxtb	r6, r6
   168f0:	bls	16950 <__assert_fail@plt+0x574c>
   168f4:	cmp	r6, #0
   168f8:	beq	168bc <__assert_fail@plt+0x56b8>
   168fc:	cmp	fp, r7
   16900:	movhi	ip, #39	; 0x27
   16904:	strbhi	ip, [r3, r7]
   16908:	add	ip, r7, #1
   1690c:	cmp	fp, ip
   16910:	movhi	lr, #39	; 0x27
   16914:	strbhi	lr, [r3, ip]
   16918:	add	r7, r7, #2
   1691c:	mov	r6, r8
   16920:	mov	ip, r8
   16924:	b	168bc <__assert_fail@plt+0x56b8>
   16928:	cmp	fp, r7
   1692c:	eor	r6, r1, #1
   16930:	movhi	lr, #92	; 0x5c
   16934:	and	r6, r6, ip
   16938:	add	sl, sl, #1
   1693c:	strbhi	lr, [r3, r7]
   16940:	cmp	r2, sl
   16944:	add	r7, r7, #1
   16948:	uxtb	r6, r6
   1694c:	bhi	168f4 <__assert_fail@plt+0x56f0>
   16950:	str	ip, [sp, #40]	; 0x28
   16954:	ldr	r5, [sp, #48]	; 0x30
   16958:	b	16020 <__assert_fail@plt+0x4e1c>
   1695c:	ldr	r3, [sp, #24]
   16960:	cmn	r3, #1
   16964:	mov	r3, #0
   16968:	str	r3, [sp, #104]	; 0x68
   1696c:	str	r3, [sp, #108]	; 0x6c
   16970:	beq	16c90 <__assert_fail@plt+0x5a8c>
   16974:	mov	r2, r5
   16978:	mov	r3, #0
   1697c:	str	r7, [sp, #88]	; 0x58
   16980:	ldr	r7, [sp, #152]	; 0x98
   16984:	str	r5, [sp, #92]	; 0x5c
   16988:	str	r6, [sp, #84]	; 0x54
   1698c:	mov	r5, r3
   16990:	mov	r6, r2
   16994:	str	r4, [sp, #80]	; 0x50
   16998:	ldr	r3, [sp, #56]	; 0x38
   1699c:	add	r9, sl, r5
   169a0:	add	r8, r3, r9
   169a4:	ldr	r3, [sp, #24]
   169a8:	mov	r1, r8
   169ac:	sub	r2, r3, r9
   169b0:	add	r0, sp, #100	; 0x64
   169b4:	add	r3, sp, #104	; 0x68
   169b8:	bl	18ba0 <__assert_fail@plt+0x799c>
   169bc:	subs	r4, r0, #0
   169c0:	beq	16d68 <__assert_fail@plt+0x5b64>
   169c4:	cmn	r4, #1
   169c8:	beq	16d48 <__assert_fail@plt+0x5b44>
   169cc:	cmn	r4, #2
   169d0:	beq	16ce8 <__assert_fail@plt+0x5ae4>
   169d4:	ldr	r2, [sp, #28]
   169d8:	cmp	r7, #2
   169dc:	movne	r2, #0
   169e0:	andeq	r2, r2, #1
   169e4:	cmp	r2, #0
   169e8:	beq	16798 <__assert_fail@plt+0x5594>
   169ec:	cmp	r4, #1
   169f0:	beq	16798 <__assert_fail@plt+0x5594>
   169f4:	sub	r3, r4, #1
   169f8:	add	r9, r3, r9
   169fc:	ldr	r3, [sp, #56]	; 0x38
   16a00:	add	r9, r3, r9
   16a04:	ldrb	r3, [r8, #1]!
   16a08:	sub	r3, r3, #91	; 0x5b
   16a0c:	cmp	r3, #33	; 0x21
   16a10:	ldrls	pc, [pc, r3, lsl #2]
   16a14:	b	16790 <__assert_fail@plt+0x558c>
   16a18:	andeq	r6, r1, r0, lsr #21
   16a1c:	andeq	r6, r1, r0, lsr #21
   16a20:	muleq	r1, r0, r7
   16a24:	andeq	r6, r1, r0, lsr #21
   16a28:	muleq	r1, r0, r7
   16a2c:	andeq	r6, r1, r0, lsr #21
   16a30:	muleq	r1, r0, r7
   16a34:	muleq	r1, r0, r7
   16a38:	muleq	r1, r0, r7
   16a3c:	muleq	r1, r0, r7
   16a40:	muleq	r1, r0, r7
   16a44:	muleq	r1, r0, r7
   16a48:	muleq	r1, r0, r7
   16a4c:	muleq	r1, r0, r7
   16a50:	muleq	r1, r0, r7
   16a54:	muleq	r1, r0, r7
   16a58:	muleq	r1, r0, r7
   16a5c:	muleq	r1, r0, r7
   16a60:	muleq	r1, r0, r7
   16a64:	muleq	r1, r0, r7
   16a68:	muleq	r1, r0, r7
   16a6c:	muleq	r1, r0, r7
   16a70:	muleq	r1, r0, r7
   16a74:	muleq	r1, r0, r7
   16a78:	muleq	r1, r0, r7
   16a7c:	muleq	r1, r0, r7
   16a80:	muleq	r1, r0, r7
   16a84:	muleq	r1, r0, r7
   16a88:	muleq	r1, r0, r7
   16a8c:	muleq	r1, r0, r7
   16a90:	muleq	r1, r0, r7
   16a94:	muleq	r1, r0, r7
   16a98:	muleq	r1, r0, r7
   16a9c:	andeq	r6, r1, r0, lsr #21
   16aa0:	mov	r3, #2
   16aa4:	ldr	sl, [sp, #32]
   16aa8:	mov	r8, fp
   16aac:	str	r3, [sp, #152]	; 0x98
   16ab0:	b	16228 <__assert_fail@plt+0x5024>
   16ab4:	ldr	r3, [sp, #156]	; 0x9c
   16ab8:	tst	r3, #1
   16abc:	bne	16be8 <__assert_fail@plt+0x59e4>
   16ac0:	ldr	r3, [sp, #152]	; 0x98
   16ac4:	ldr	r4, [sp, #44]	; 0x2c
   16ac8:	sub	r2, r3, #2
   16acc:	mov	r5, #0
   16ad0:	clz	r2, r2
   16ad4:	mov	r8, r4
   16ad8:	lsr	r2, r2, #5
   16adc:	b	15fe8 <__assert_fail@plt+0x4de4>
   16ae0:	ldr	r3, [sp, #156]	; 0x9c
   16ae4:	ands	r9, r3, #4
   16ae8:	beq	16c20 <__assert_fail@plt+0x5a1c>
   16aec:	ldr	r2, [sp, #24]
   16af0:	add	r3, sl, #2
   16af4:	cmp	r3, r2
   16af8:	bcs	16b0c <__assert_fail@plt+0x5908>
   16afc:	ldr	r2, [sp, #48]	; 0x30
   16b00:	ldrb	r4, [r2, #1]
   16b04:	cmp	r4, #63	; 0x3f
   16b08:	beq	16da8 <__assert_fail@plt+0x5ba4>
   16b0c:	mov	r2, #0
   16b10:	mov	r8, r2
   16b14:	mov	r5, r2
   16b18:	mov	r4, #63	; 0x3f
   16b1c:	b	15fe8 <__assert_fail@plt+0x4de4>
   16b20:	ldr	r3, [sp, #28]
   16b24:	cmp	r3, #0
   16b28:	bne	16e4c <__assert_fail@plt+0x5c48>
   16b2c:	mov	r2, r5
   16b30:	mov	r8, r3
   16b34:	mov	r5, #0
   16b38:	mov	r4, #63	; 0x3f
   16b3c:	b	15fe8 <__assert_fail@plt+0x4de4>
   16b40:	ldr	r3, [sp, #28]
   16b44:	cmp	r3, #0
   16b48:	bne	16e4c <__assert_fail@plt+0x5c48>
   16b4c:	ldr	r2, [sp, #72]	; 0x48
   16b50:	adds	r3, fp, #0
   16b54:	movne	r3, #1
   16b58:	cmp	r2, #0
   16b5c:	movne	r3, #0
   16b60:	cmp	r3, #0
   16b64:	strne	fp, [sp, #72]	; 0x48
   16b68:	movne	fp, #0
   16b6c:	bne	16ba8 <__assert_fail@plt+0x59a4>
   16b70:	cmp	fp, r7
   16b74:	movhi	r2, #39	; 0x27
   16b78:	ldrhi	r3, [sp, #32]
   16b7c:	strbhi	r2, [r3, r7]
   16b80:	add	r3, r7, #1
   16b84:	cmp	fp, r3
   16b88:	movhi	r1, #92	; 0x5c
   16b8c:	ldrhi	r2, [sp, #32]
   16b90:	strbhi	r1, [r2, r3]
   16b94:	add	r3, r7, #2
   16b98:	cmp	fp, r3
   16b9c:	movhi	r1, #39	; 0x27
   16ba0:	ldrhi	r2, [sp, #32]
   16ba4:	strbhi	r1, [r2, r3]
   16ba8:	ldr	r3, [sp, #28]
   16bac:	add	r7, r7, #3
   16bb0:	mov	r2, r5
   16bb4:	mov	r8, r3
   16bb8:	str	r5, [sp, #68]	; 0x44
   16bbc:	str	r3, [sp, #40]	; 0x28
   16bc0:	mov	r4, #39	; 0x27
   16bc4:	b	15fe8 <__assert_fail@plt+0x4de4>
   16bc8:	ldr	r3, [sp, #56]	; 0x38
   16bcc:	ldrb	r3, [r3, #1]
   16bd0:	adds	r3, r3, #0
   16bd4:	movne	r3, #1
   16bd8:	b	15fc0 <__assert_fail@plt+0x4dbc>
   16bdc:	ldr	r5, [sp, #28]
   16be0:	mov	r4, #48	; 0x30
   16be4:	b	15fe8 <__assert_fail@plt+0x4de4>
   16be8:	add	sl, sl, #1
   16bec:	b	15b18 <__assert_fail@plt+0x4914>
   16bf0:	mov	sl, r3
   16bf4:	ldr	r3, [sp, #28]
   16bf8:	mov	r8, fp
   16bfc:	str	r3, [sp, #44]	; 0x2c
   16c00:	ldr	r3, [sp, #152]	; 0x98
   16c04:	sub	r2, r3, #2
   16c08:	clz	r2, r2
   16c0c:	lsr	r2, r2, #5
   16c10:	b	16228 <__assert_fail@plt+0x5024>
   16c14:	str	ip, [sp, #40]	; 0x28
   16c18:	ldr	r5, [sp, #48]	; 0x30
   16c1c:	b	16058 <__assert_fail@plt+0x4e54>
   16c20:	mov	r2, r9
   16c24:	mov	r8, r9
   16c28:	mov	r5, #0
   16c2c:	mov	r4, #63	; 0x3f
   16c30:	b	15fe8 <__assert_fail@plt+0x4de4>
   16c34:	cmp	fp, #0
   16c38:	beq	16cb0 <__assert_fail@plt+0x5aac>
   16c3c:	ldr	r1, [sp, #32]
   16c40:	mov	r3, #34	; 0x22
   16c44:	mov	r2, #1
   16c48:	strb	r3, [r1]
   16c4c:	ldr	r3, [pc, #332]	; 16da0 <__assert_fail@plt+0x5b9c>
   16c50:	str	r2, [sp, #52]	; 0x34
   16c54:	mov	r7, r2
   16c58:	str	r2, [sp, #44]	; 0x2c
   16c5c:	str	r3, [sp, #64]	; 0x40
   16c60:	b	15b08 <__assert_fail@plt+0x4904>
   16c64:	ldr	r3, [pc, #300]	; 16d98 <__assert_fail@plt+0x5b94>
   16c68:	str	r3, [sp, #64]	; 0x40
   16c6c:	mov	r3, #0
   16c70:	str	r3, [sp, #28]
   16c74:	mov	r3, #1
   16c78:	str	r3, [sp, #52]	; 0x34
   16c7c:	mov	r7, r3
   16c80:	mov	r3, #2
   16c84:	str	r3, [sp, #152]	; 0x98
   16c88:	b	15b08 <__assert_fail@plt+0x4904>
   16c8c:	bl	111ec <abort@plt>
   16c90:	ldr	r0, [sp, #56]	; 0x38
   16c94:	bl	110c0 <strlen@plt>
   16c98:	str	r0, [sp, #24]
   16c9c:	b	16974 <__assert_fail@plt+0x5770>
   16ca0:	mov	r5, r8
   16ca4:	mov	r4, #48	; 0x30
   16ca8:	ldr	r8, [sp, #44]	; 0x2c
   16cac:	b	15fe8 <__assert_fail@plt+0x4de4>
   16cb0:	mov	r3, #1
   16cb4:	str	r3, [sp, #52]	; 0x34
   16cb8:	mov	r7, r3
   16cbc:	str	r3, [sp, #44]	; 0x2c
   16cc0:	ldr	r3, [pc, #216]	; 16da0 <__assert_fail@plt+0x5b9c>
   16cc4:	str	r3, [sp, #64]	; 0x40
   16cc8:	b	15b08 <__assert_fail@plt+0x4904>
   16ccc:	ldr	sl, [sp, #32]
   16cd0:	mov	r8, fp
   16cd4:	mov	r2, r3
   16cd8:	b	16228 <__assert_fail@plt+0x5024>
   16cdc:	mov	r3, r5
   16ce0:	mov	r5, r2
   16ce4:	b	164e0 <__assert_fail@plt+0x52dc>
   16ce8:	ldr	r1, [sp, #24]
   16cec:	mov	r2, r5
   16cf0:	cmp	r1, r9
   16cf4:	mov	ip, r5
   16cf8:	ldr	r4, [sp, #80]	; 0x50
   16cfc:	ldr	r5, [sp, #92]	; 0x5c
   16d00:	ldr	r6, [sp, #84]	; 0x54
   16d04:	ldr	r7, [sp, #88]	; 0x58
   16d08:	bls	16d3c <__assert_fail@plt+0x5b38>
   16d0c:	ldrb	r3, [r8]
   16d10:	cmp	r3, #0
   16d14:	bne	16d28 <__assert_fail@plt+0x5b24>
   16d18:	b	16d40 <__assert_fail@plt+0x5b3c>
   16d1c:	ldrb	r3, [r8, #1]!
   16d20:	cmp	r3, #0
   16d24:	beq	16e40 <__assert_fail@plt+0x5c3c>
   16d28:	add	r2, r2, #1
   16d2c:	add	r3, sl, r2
   16d30:	cmp	r1, r3
   16d34:	bhi	16d1c <__assert_fail@plt+0x5b18>
   16d38:	mov	ip, r2
   16d3c:	mov	r3, #0
   16d40:	mov	r2, r3
   16d44:	b	167d8 <__assert_fail@plt+0x55d4>
   16d48:	mov	r3, #0
   16d4c:	mov	ip, r5
   16d50:	ldr	r4, [sp, #80]	; 0x50
   16d54:	ldr	r5, [sp, #92]	; 0x5c
   16d58:	ldr	r6, [sp, #84]	; 0x54
   16d5c:	ldr	r7, [sp, #88]	; 0x58
   16d60:	mov	r2, r3
   16d64:	b	167d8 <__assert_fail@plt+0x55d4>
   16d68:	mov	r3, r6
   16d6c:	mov	ip, r5
   16d70:	eor	r5, r3, #1
   16d74:	mov	r2, r6
   16d78:	ldr	r4, [sp, #80]	; 0x50
   16d7c:	ldr	r6, [sp, #84]	; 0x54
   16d80:	ldr	r7, [sp, #88]	; 0x58
   16d84:	uxtb	r5, r5
   16d88:	b	167d8 <__assert_fail@plt+0x55d4>
   16d8c:	ldr	sl, [sp, #32]
   16d90:	mov	r8, fp
   16d94:	b	16bfc <__assert_fail@plt+0x59f8>
   16d98:	andeq	sl, r1, r4, lsr fp
   16d9c:	andeq	sl, r1, r8, lsr fp
   16da0:	andeq	sl, r1, r0, lsr fp
   16da4:	stmdacc	r0, {r0, r6, r7, r8, ip, lr}
   16da8:	ldr	r2, [sp, #56]	; 0x38
   16dac:	ldrb	r1, [r2, r3]
   16db0:	sub	r2, r1, #33	; 0x21
   16db4:	uxtb	r2, r2
   16db8:	cmp	r2, #29
   16dbc:	bhi	16e5c <__assert_fail@plt+0x5c58>
   16dc0:	ldr	r0, [pc, #-36]	; 16da4 <__assert_fail@plt+0x5ba0>
   16dc4:	mov	ip, #1
   16dc8:	ands	r2, r0, ip, lsl r2
   16dcc:	beq	16e6c <__assert_fail@plt+0x5c68>
   16dd0:	ldr	r2, [sp, #28]
   16dd4:	cmp	r2, #0
   16dd8:	bne	16f6c <__assert_fail@plt+0x5d68>
   16ddc:	cmp	fp, r7
   16de0:	ldr	r8, [sp, #28]
   16de4:	ldrhi	r2, [sp, #32]
   16de8:	mov	sl, r3
   16dec:	mov	r5, r8
   16df0:	strbhi	r4, [r2, r7]
   16df4:	add	r2, r7, #1
   16df8:	cmp	fp, r2
   16dfc:	movhi	r0, #34	; 0x22
   16e00:	ldrhi	ip, [sp, #32]
   16e04:	mov	r4, r1
   16e08:	strbhi	r0, [ip, r2]
   16e0c:	add	r2, r7, #2
   16e10:	cmp	fp, r2
   16e14:	movhi	r0, #34	; 0x22
   16e18:	ldrhi	ip, [sp, #32]
   16e1c:	strbhi	r0, [ip, r2]
   16e20:	add	r2, r7, #3
   16e24:	cmp	fp, r2
   16e28:	movhi	r0, #63	; 0x3f
   16e2c:	ldrhi	ip, [sp, #32]
   16e30:	add	r7, r7, #4
   16e34:	strbhi	r0, [ip, r2]
   16e38:	mov	r2, r8
   16e3c:	b	15fe8 <__assert_fail@plt+0x4de4>
   16e40:	mov	ip, r2
   16e44:	mov	r2, r3
   16e48:	b	167d8 <__assert_fail@plt+0x55d4>
   16e4c:	ldr	sl, [sp, #32]
   16e50:	mov	r8, fp
   16e54:	ldr	r2, [sp, #28]
   16e58:	b	16228 <__assert_fail@plt+0x5024>
   16e5c:	mov	r2, #0
   16e60:	mov	r8, r2
   16e64:	mov	r5, r2
   16e68:	b	15fe8 <__assert_fail@plt+0x4de4>
   16e6c:	mov	r8, r2
   16e70:	mov	r5, #0
   16e74:	b	15fe8 <__assert_fail@plt+0x4de4>
   16e78:	ldr	r1, [sp, #152]	; 0x98
   16e7c:	bl	15944 <__assert_fail@plt+0x4740>
   16e80:	str	r0, [sp, #168]	; 0xa8
   16e84:	b	15ea4 <__assert_fail@plt+0x4ca0>
   16e88:	ldr	r1, [sp, #152]	; 0x98
   16e8c:	bl	15944 <__assert_fail@plt+0x4740>
   16e90:	str	r0, [sp, #164]	; 0xa4
   16e94:	b	15e84 <__assert_fail@plt+0x4c80>
   16e98:	ldr	r7, [sp, #28]
   16e9c:	b	15ee4 <__assert_fail@plt+0x4ce0>
   16ea0:	ldr	sl, [sp, #32]
   16ea4:	ldr	r2, [sp, #68]	; 0x44
   16ea8:	mov	r8, fp
   16eac:	mov	fp, r7
   16eb0:	ldr	r3, [sp, #64]	; 0x40
   16eb4:	cmp	r3, #0
   16eb8:	moveq	r2, #0
   16ebc:	andne	r2, r2, #1
   16ec0:	cmp	r2, #0
   16ec4:	beq	16ef0 <__assert_fail@plt+0x5cec>
   16ec8:	mov	r2, r3
   16ecc:	ldrb	r3, [r3]
   16ed0:	cmp	r3, #0
   16ed4:	beq	16ef0 <__assert_fail@plt+0x5cec>
   16ed8:	cmp	r8, fp
   16edc:	strbhi	r3, [sl, fp]
   16ee0:	ldrb	r3, [r2, #1]!
   16ee4:	add	fp, fp, #1
   16ee8:	cmp	r3, #0
   16eec:	bne	16ed8 <__assert_fail@plt+0x5cd4>
   16ef0:	cmp	r8, fp
   16ef4:	movhi	r3, #0
   16ef8:	strbhi	r3, [sl, fp]
   16efc:	b	16284 <__assert_fail@plt+0x5080>
   16f00:	ldr	r3, [sp, #168]	; 0xa8
   16f04:	ldr	sl, [sp, #32]
   16f08:	str	r3, [sp, #16]
   16f0c:	ldr	r3, [sp, #164]	; 0xa4
   16f10:	mov	ip, #5
   16f14:	str	r3, [sp, #12]
   16f18:	ldr	r3, [sp, #160]	; 0xa0
   16f1c:	ldr	r2, [sp, #56]	; 0x38
   16f20:	str	r3, [sp, #8]
   16f24:	ldr	r3, [sp, #156]	; 0x9c
   16f28:	ldr	r1, [sp, #72]	; 0x48
   16f2c:	str	r3, [sp, #4]
   16f30:	mov	r0, sl
   16f34:	ldr	r3, [sp, #24]
   16f38:	str	ip, [sp]
   16f3c:	bl	15a64 <__assert_fail@plt+0x4860>
   16f40:	mov	fp, r0
   16f44:	b	16284 <__assert_fail@plt+0x5080>
   16f48:	mov	r8, fp
   16f4c:	ldr	sl, [sp, #32]
   16f50:	mov	fp, r7
   16f54:	mov	r2, r3
   16f58:	b	16eb0 <__assert_fail@plt+0x5cac>
   16f5c:	mov	r8, fp
   16f60:	ldr	sl, [sp, #32]
   16f64:	mov	fp, r7
   16f68:	b	16eb0 <__assert_fail@plt+0x5cac>
   16f6c:	ldr	sl, [sp, #32]
   16f70:	mov	r8, fp
   16f74:	b	16240 <__assert_fail@plt+0x503c>
   16f78:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   16f7c:	sub	sp, sp, #52	; 0x34
   16f80:	mov	r4, r0
   16f84:	mov	r5, r3
   16f88:	mov	sl, r1
   16f8c:	mov	fp, r2
   16f90:	bl	110d8 <__errno_location@plt>
   16f94:	ldr	r7, [pc, #412]	; 17138 <__assert_fail@plt+0x5f34>
   16f98:	cmn	r4, #-2147483647	; 0x80000001
   16f9c:	ldr	r6, [r7]
   16fa0:	mov	r8, r0
   16fa4:	movne	r0, #0
   16fa8:	moveq	r0, #1
   16fac:	ldr	r3, [r8]
   16fb0:	orrs	r0, r0, r4, lsr #31
   16fb4:	str	r3, [sp, #24]
   16fb8:	bne	17134 <__assert_fail@plt+0x5f30>
   16fbc:	ldr	r2, [r7, #4]
   16fc0:	cmp	r4, r2
   16fc4:	blt	17024 <__assert_fail@plt+0x5e20>
   16fc8:	add	r9, r7, #8
   16fcc:	cmp	r6, r9
   16fd0:	str	r2, [sp, #44]	; 0x2c
   16fd4:	beq	17104 <__assert_fail@plt+0x5f00>
   16fd8:	mov	r3, #8
   16fdc:	sub	r2, r4, r2
   16fe0:	mov	r0, r6
   16fe4:	str	r3, [sp]
   16fe8:	add	r2, r2, #1
   16fec:	mvn	r3, #-2147483648	; 0x80000000
   16ff0:	add	r1, sp, #44	; 0x2c
   16ff4:	bl	17de4 <__assert_fail@plt+0x6be0>
   16ff8:	mov	r6, r0
   16ffc:	str	r0, [r7]
   17000:	ldr	r0, [r7, #4]
   17004:	ldr	r2, [sp, #44]	; 0x2c
   17008:	mov	r1, #0
   1700c:	sub	r2, r2, r0
   17010:	add	r0, r6, r0, lsl #3
   17014:	lsl	r2, r2, #3
   17018:	bl	11108 <memset@plt>
   1701c:	ldr	r3, [sp, #44]	; 0x2c
   17020:	str	r3, [r7, #4]
   17024:	add	r3, r6, r4, lsl #3
   17028:	ldr	r1, [r5, #4]
   1702c:	ldr	r7, [r3, #4]
   17030:	ldr	r9, [r6, r4, lsl #3]
   17034:	ldr	r2, [r5, #40]	; 0x28
   17038:	ldr	ip, [r5, #44]	; 0x2c
   1703c:	add	r0, r5, #8
   17040:	str	r3, [sp, #28]
   17044:	ldr	r3, [r5]
   17048:	orr	r1, r1, #1
   1704c:	mov	lr, r0
   17050:	str	r1, [sp, #32]
   17054:	str	r0, [sp, #36]	; 0x24
   17058:	str	r1, [sp, #4]
   1705c:	str	r2, [sp, #12]
   17060:	str	r3, [sp]
   17064:	mov	r0, r7
   17068:	mov	r1, r9
   1706c:	str	ip, [sp, #16]
   17070:	str	lr, [sp, #8]
   17074:	mov	r3, fp
   17078:	mov	r2, sl
   1707c:	bl	15a64 <__assert_fail@plt+0x4860>
   17080:	cmp	r9, r0
   17084:	bhi	170f0 <__assert_fail@plt+0x5eec>
   17088:	ldr	r3, [pc, #172]	; 1713c <__assert_fail@plt+0x5f38>
   1708c:	add	r9, r0, #1
   17090:	cmp	r7, r3
   17094:	str	r9, [r6, r4, lsl #3]
   17098:	beq	170a4 <__assert_fail@plt+0x5ea0>
   1709c:	mov	r0, r7
   170a0:	bl	154d0 <__assert_fail@plt+0x42cc>
   170a4:	mov	r0, r9
   170a8:	bl	17c80 <__assert_fail@plt+0x6a7c>
   170ac:	ldr	lr, [sp, #28]
   170b0:	ldr	ip, [r5, #44]	; 0x2c
   170b4:	ldr	r4, [r5, #40]	; 0x28
   170b8:	mov	r3, fp
   170bc:	mov	r2, sl
   170c0:	mov	r1, r9
   170c4:	str	r0, [lr, #4]
   170c8:	ldr	lr, [r5]
   170cc:	ldr	r5, [sp, #36]	; 0x24
   170d0:	str	ip, [sp, #16]
   170d4:	str	r5, [sp, #8]
   170d8:	ldr	r5, [sp, #32]
   170dc:	str	r4, [sp, #12]
   170e0:	str	r5, [sp, #4]
   170e4:	str	lr, [sp]
   170e8:	mov	r7, r0
   170ec:	bl	15a64 <__assert_fail@plt+0x4860>
   170f0:	ldr	r3, [sp, #24]
   170f4:	mov	r0, r7
   170f8:	str	r3, [r8]
   170fc:	add	sp, sp, #52	; 0x34
   17100:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   17104:	mov	r3, #8
   17108:	sub	r2, r4, r2
   1710c:	str	r3, [sp]
   17110:	add	r1, sp, #44	; 0x2c
   17114:	add	r2, r2, #1
   17118:	mvn	r3, #-2147483648	; 0x80000000
   1711c:	bl	17de4 <__assert_fail@plt+0x6be0>
   17120:	mov	r6, r0
   17124:	ldm	r9, {r0, r1}
   17128:	str	r6, [r7]
   1712c:	stm	r6, {r0, r1}
   17130:	b	17000 <__assert_fail@plt+0x5dfc>
   17134:	bl	111ec <abort@plt>
   17138:	andeq	ip, r2, r8, lsr #2
   1713c:	andeq	ip, r2, r4, asr #4
   17140:	push	{r4, r5, r6, lr}
   17144:	mov	r5, r0
   17148:	bl	110d8 <__errno_location@plt>
   1714c:	cmp	r5, #0
   17150:	mov	r1, #48	; 0x30
   17154:	mov	r4, r0
   17158:	ldr	r0, [pc, #16]	; 17170 <__assert_fail@plt+0x5f6c>
   1715c:	ldr	r6, [r4]
   17160:	movne	r0, r5
   17164:	bl	180e0 <__assert_fail@plt+0x6edc>
   17168:	str	r6, [r4]
   1716c:	pop	{r4, r5, r6, pc}
   17170:	andeq	ip, r2, r4, asr #6
   17174:	ldr	r3, [pc, #12]	; 17188 <__assert_fail@plt+0x5f84>
   17178:	cmp	r0, #0
   1717c:	moveq	r0, r3
   17180:	ldr	r0, [r0]
   17184:	bx	lr
   17188:	andeq	ip, r2, r4, asr #6
   1718c:	ldr	r3, [pc, #12]	; 171a0 <__assert_fail@plt+0x5f9c>
   17190:	cmp	r0, #0
   17194:	moveq	r0, r3
   17198:	str	r1, [r0]
   1719c:	bx	lr
   171a0:	andeq	ip, r2, r4, asr #6
   171a4:	ldr	r3, [pc, #52]	; 171e0 <__assert_fail@plt+0x5fdc>
   171a8:	cmp	r0, #0
   171ac:	moveq	r0, r3
   171b0:	add	r3, r0, #8
   171b4:	push	{lr}		; (str lr, [sp, #-4]!)
   171b8:	lsr	lr, r1, #5
   171bc:	and	r1, r1, #31
   171c0:	ldr	ip, [r3, lr, lsl #2]
   171c4:	lsr	r0, ip, r1
   171c8:	eor	r2, r2, r0
   171cc:	and	r2, r2, #1
   171d0:	and	r0, r0, #1
   171d4:	eor	r1, ip, r2, lsl r1
   171d8:	str	r1, [r3, lr, lsl #2]
   171dc:	pop	{pc}		; (ldr pc, [sp], #4)
   171e0:	andeq	ip, r2, r4, asr #6
   171e4:	ldr	r3, [pc, #16]	; 171fc <__assert_fail@plt+0x5ff8>
   171e8:	cmp	r0, #0
   171ec:	movne	r3, r0
   171f0:	ldr	r0, [r3, #4]
   171f4:	str	r1, [r3, #4]
   171f8:	bx	lr
   171fc:	andeq	ip, r2, r4, asr #6
   17200:	ldr	r3, [pc, #44]	; 17234 <__assert_fail@plt+0x6030>
   17204:	cmp	r0, #0
   17208:	moveq	r0, r3
   1720c:	mov	ip, #10
   17210:	cmp	r2, #0
   17214:	cmpne	r1, #0
   17218:	str	ip, [r0]
   1721c:	beq	1722c <__assert_fail@plt+0x6028>
   17220:	str	r1, [r0, #40]	; 0x28
   17224:	str	r2, [r0, #44]	; 0x2c
   17228:	bx	lr
   1722c:	push	{r4, lr}
   17230:	bl	111ec <abort@plt>
   17234:	andeq	ip, r2, r4, asr #6
   17238:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   1723c:	sub	sp, sp, #24
   17240:	ldr	ip, [pc, #108]	; 172b4 <__assert_fail@plt+0x60b0>
   17244:	ldr	r4, [sp, #56]	; 0x38
   17248:	mov	r9, r2
   1724c:	cmp	r4, #0
   17250:	moveq	r4, ip
   17254:	mov	sl, r3
   17258:	mov	r7, r0
   1725c:	mov	r8, r1
   17260:	bl	110d8 <__errno_location@plt>
   17264:	ldr	r3, [r4, #44]	; 0x2c
   17268:	mov	r1, r8
   1726c:	ldr	r6, [r0]
   17270:	str	r3, [sp, #16]
   17274:	ldr	r2, [r4, #40]	; 0x28
   17278:	add	r3, r4, #8
   1727c:	str	r3, [sp, #8]
   17280:	str	r2, [sp, #12]
   17284:	ldr	r2, [r4, #4]
   17288:	mov	r5, r0
   1728c:	str	r2, [sp, #4]
   17290:	ldr	ip, [r4]
   17294:	mov	r3, sl
   17298:	mov	r2, r9
   1729c:	mov	r0, r7
   172a0:	str	ip, [sp]
   172a4:	bl	15a64 <__assert_fail@plt+0x4860>
   172a8:	str	r6, [r5]
   172ac:	add	sp, sp, #24
   172b0:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   172b4:	andeq	ip, r2, r4, asr #6
   172b8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   172bc:	cmp	r3, #0
   172c0:	sub	sp, sp, #44	; 0x2c
   172c4:	ldr	r4, [pc, #192]	; 1738c <__assert_fail@plt+0x6188>
   172c8:	mov	r6, r2
   172cc:	movne	r4, r3
   172d0:	mov	r9, r1
   172d4:	mov	r8, r0
   172d8:	bl	110d8 <__errno_location@plt>
   172dc:	ldr	r3, [r4, #44]	; 0x2c
   172e0:	ldr	r5, [r4, #4]
   172e4:	add	sl, r4, #8
   172e8:	cmp	r6, #0
   172ec:	orreq	r5, r5, #1
   172f0:	mov	r1, #0
   172f4:	ldr	r2, [r0]
   172f8:	str	r3, [sp, #16]
   172fc:	ldr	r3, [r4, #40]	; 0x28
   17300:	stmib	sp, {r5, sl}
   17304:	str	r3, [sp, #12]
   17308:	ldr	r3, [r4]
   1730c:	mov	r7, r0
   17310:	str	r2, [sp, #28]
   17314:	str	r3, [sp]
   17318:	mov	r2, r8
   1731c:	mov	r3, r9
   17320:	mov	r0, r1
   17324:	bl	15a64 <__assert_fail@plt+0x4860>
   17328:	add	r1, r0, #1
   1732c:	mov	fp, r0
   17330:	mov	r0, r1
   17334:	str	r1, [sp, #36]	; 0x24
   17338:	bl	17c80 <__assert_fail@plt+0x6a7c>
   1733c:	ldr	r3, [r4, #44]	; 0x2c
   17340:	mov	r2, r8
   17344:	str	r3, [sp, #16]
   17348:	ldr	r3, [r4, #40]	; 0x28
   1734c:	str	r5, [sp, #4]
   17350:	str	r3, [sp, #12]
   17354:	str	sl, [sp, #8]
   17358:	ldr	ip, [r4]
   1735c:	ldr	r1, [sp, #36]	; 0x24
   17360:	mov	r3, r9
   17364:	str	ip, [sp]
   17368:	str	r0, [sp, #32]
   1736c:	bl	15a64 <__assert_fail@plt+0x4860>
   17370:	ldr	r2, [sp, #28]
   17374:	cmp	r6, #0
   17378:	str	r2, [r7]
   1737c:	ldr	r0, [sp, #32]
   17380:	strne	fp, [r6]
   17384:	add	sp, sp, #44	; 0x2c
   17388:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1738c:	andeq	ip, r2, r4, asr #6
   17390:	mov	r3, r2
   17394:	mov	r2, #0
   17398:	b	172b8 <__assert_fail@plt+0x60b4>
   1739c:	push	{r4, r5, r6, r7, r8, lr}
   173a0:	ldr	r6, [pc, #116]	; 1741c <__assert_fail@plt+0x6218>
   173a4:	ldr	r3, [r6, #4]
   173a8:	ldr	r7, [r6]
   173ac:	cmp	r3, #1
   173b0:	movgt	r5, r7
   173b4:	movgt	r4, #1
   173b8:	ble	173d8 <__assert_fail@plt+0x61d4>
   173bc:	ldr	r0, [r5, #12]
   173c0:	bl	154d0 <__assert_fail@plt+0x42cc>
   173c4:	ldr	r3, [r6, #4]
   173c8:	add	r4, r4, #1
   173cc:	cmp	r3, r4
   173d0:	add	r5, r5, #8
   173d4:	bgt	173bc <__assert_fail@plt+0x61b8>
   173d8:	ldr	r0, [r7, #4]
   173dc:	ldr	r4, [pc, #60]	; 17420 <__assert_fail@plt+0x621c>
   173e0:	cmp	r0, r4
   173e4:	beq	173f8 <__assert_fail@plt+0x61f4>
   173e8:	bl	154d0 <__assert_fail@plt+0x42cc>
   173ec:	mov	r3, #256	; 0x100
   173f0:	str	r4, [r6, #12]
   173f4:	str	r3, [r6, #8]
   173f8:	ldr	r4, [pc, #36]	; 17424 <__assert_fail@plt+0x6220>
   173fc:	cmp	r7, r4
   17400:	beq	17410 <__assert_fail@plt+0x620c>
   17404:	mov	r0, r7
   17408:	bl	154d0 <__assert_fail@plt+0x42cc>
   1740c:	str	r4, [r6]
   17410:	mov	r3, #1
   17414:	str	r3, [r6, #4]
   17418:	pop	{r4, r5, r6, r7, r8, pc}
   1741c:	andeq	ip, r2, r8, lsr #2
   17420:	andeq	ip, r2, r4, asr #4
   17424:	andeq	ip, r2, r0, lsr r1
   17428:	ldr	r3, [pc, #4]	; 17434 <__assert_fail@plt+0x6230>
   1742c:	mvn	r2, #0
   17430:	b	16f78 <__assert_fail@plt+0x5d74>
   17434:	andeq	ip, r2, r4, asr #6
   17438:	ldr	r3, [pc]	; 17440 <__assert_fail@plt+0x623c>
   1743c:	b	16f78 <__assert_fail@plt+0x5d74>
   17440:	andeq	ip, r2, r4, asr #6
   17444:	mov	r1, r0
   17448:	ldr	r3, [pc, #8]	; 17458 <__assert_fail@plt+0x6254>
   1744c:	mvn	r2, #0
   17450:	mov	r0, #0
   17454:	b	16f78 <__assert_fail@plt+0x5d74>
   17458:	andeq	ip, r2, r4, asr #6
   1745c:	mov	r2, r1
   17460:	ldr	r3, [pc, #8]	; 17470 <__assert_fail@plt+0x626c>
   17464:	mov	r1, r0
   17468:	mov	r0, #0
   1746c:	b	16f78 <__assert_fail@plt+0x5d74>
   17470:	andeq	ip, r2, r4, asr #6
   17474:	push	{r4, r5, lr}
   17478:	sub	sp, sp, #52	; 0x34
   1747c:	mov	r5, r2
   17480:	mov	r4, r0
   17484:	mov	r0, sp
   17488:	bl	15914 <__assert_fail@plt+0x4710>
   1748c:	mov	r3, sp
   17490:	mov	r1, r5
   17494:	mov	r0, r4
   17498:	mvn	r2, #0
   1749c:	bl	16f78 <__assert_fail@plt+0x5d74>
   174a0:	add	sp, sp, #52	; 0x34
   174a4:	pop	{r4, r5, pc}
   174a8:	push	{r4, r5, r6, lr}
   174ac:	sub	sp, sp, #48	; 0x30
   174b0:	mov	r5, r2
   174b4:	mov	r6, r3
   174b8:	mov	r4, r0
   174bc:	mov	r0, sp
   174c0:	bl	15914 <__assert_fail@plt+0x4710>
   174c4:	mov	r3, sp
   174c8:	mov	r2, r6
   174cc:	mov	r1, r5
   174d0:	mov	r0, r4
   174d4:	bl	16f78 <__assert_fail@plt+0x5d74>
   174d8:	add	sp, sp, #48	; 0x30
   174dc:	pop	{r4, r5, r6, pc}
   174e0:	mov	r2, r1
   174e4:	mov	r1, r0
   174e8:	mov	r0, #0
   174ec:	b	17474 <__assert_fail@plt+0x6270>
   174f0:	mov	r3, r2
   174f4:	mov	r2, r1
   174f8:	mov	r1, r0
   174fc:	mov	r0, #0
   17500:	b	174a8 <__assert_fail@plt+0x62a4>
   17504:	push	{r4, r5, r6, r7, r8, lr}
   17508:	mov	r7, r0
   1750c:	ldr	lr, [pc, #100]	; 17578 <__assert_fail@plt+0x6374>
   17510:	mov	r8, r1
   17514:	mov	r4, r2
   17518:	ldm	lr!, {r0, r1, r2, r3}
   1751c:	sub	sp, sp, #48	; 0x30
   17520:	mov	ip, sp
   17524:	lsr	r5, r4, #5
   17528:	stmia	ip!, {r0, r1, r2, r3}
   1752c:	add	r6, sp, #8
   17530:	ldm	lr!, {r0, r1, r2, r3}
   17534:	and	r4, r4, #31
   17538:	stmia	ip!, {r0, r1, r2, r3}
   1753c:	ldm	lr, {r0, r1, r2, r3}
   17540:	stm	ip, {r0, r1, r2, r3}
   17544:	mov	r2, r8
   17548:	ldr	lr, [r6, r5, lsl #2]
   1754c:	mov	r1, r7
   17550:	mov	r3, sp
   17554:	lsr	ip, lr, r4
   17558:	eor	ip, ip, #1
   1755c:	and	ip, ip, #1
   17560:	mov	r0, #0
   17564:	eor	r4, lr, ip, lsl r4
   17568:	str	r4, [r6, r5, lsl #2]
   1756c:	bl	16f78 <__assert_fail@plt+0x5d74>
   17570:	add	sp, sp, #48	; 0x30
   17574:	pop	{r4, r5, r6, r7, r8, pc}
   17578:	andeq	ip, r2, r4, asr #6
   1757c:	mov	r2, r1
   17580:	mvn	r1, #0
   17584:	b	17504 <__assert_fail@plt+0x6300>
   17588:	mov	r2, #58	; 0x3a
   1758c:	mvn	r1, #0
   17590:	b	17504 <__assert_fail@plt+0x6300>
   17594:	mov	r2, #58	; 0x3a
   17598:	b	17504 <__assert_fail@plt+0x6300>
   1759c:	push	{r4, r5, r6, r7, lr}
   175a0:	sub	sp, sp, #100	; 0x64
   175a4:	mov	r6, r0
   175a8:	mov	r0, sp
   175ac:	mov	r7, r2
   175b0:	bl	15914 <__assert_fail@plt+0x4710>
   175b4:	mov	ip, sp
   175b8:	add	lr, sp, #48	; 0x30
   175bc:	ldm	ip!, {r0, r1, r2, r3}
   175c0:	stmia	lr!, {r0, r1, r2, r3}
   175c4:	ldm	ip!, {r0, r1, r2, r3}
   175c8:	ldr	r5, [sp, #60]	; 0x3c
   175cc:	stmia	lr!, {r0, r1, r2, r3}
   175d0:	mvn	r4, r5
   175d4:	ldm	ip, {r0, r1, r2, r3}
   175d8:	and	ip, r4, #67108864	; 0x4000000
   175dc:	eor	ip, ip, r5
   175e0:	str	ip, [sp, #60]	; 0x3c
   175e4:	stm	lr, {r0, r1, r2, r3}
   175e8:	mov	r1, r7
   175ec:	mov	r0, r6
   175f0:	add	r3, sp, #48	; 0x30
   175f4:	mvn	r2, #0
   175f8:	bl	16f78 <__assert_fail@plt+0x5d74>
   175fc:	add	sp, sp, #100	; 0x64
   17600:	pop	{r4, r5, r6, r7, pc}
   17604:	push	{r4, r5, r6, r7, r8, lr}
   17608:	mov	r5, r1
   1760c:	ldr	lr, [pc, #100]	; 17678 <__assert_fail@plt+0x6474>
   17610:	mov	r4, r2
   17614:	mov	r7, r0
   17618:	mov	r8, r3
   1761c:	ldm	lr!, {r0, r1, r2, r3}
   17620:	sub	sp, sp, #48	; 0x30
   17624:	mov	ip, sp
   17628:	mov	r6, #10
   1762c:	stmia	ip!, {r0, r1, r2, r3}
   17630:	cmp	r4, #0
   17634:	cmpne	r5, #0
   17638:	ldm	lr!, {r0, r1, r2, r3}
   1763c:	str	r6, [sp]
   17640:	stmia	ip!, {r0, r1, r2, r3}
   17644:	ldm	lr, {r0, r1, r2, r3}
   17648:	stm	ip, {r0, r1, r2, r3}
   1764c:	beq	17674 <__assert_fail@plt+0x6470>
   17650:	mov	r3, sp
   17654:	mov	r1, r8
   17658:	mov	r0, r7
   1765c:	ldr	r2, [sp, #72]	; 0x48
   17660:	str	r5, [sp, #40]	; 0x28
   17664:	str	r4, [sp, #44]	; 0x2c
   17668:	bl	16f78 <__assert_fail@plt+0x5d74>
   1766c:	add	sp, sp, #48	; 0x30
   17670:	pop	{r4, r5, r6, r7, r8, pc}
   17674:	bl	111ec <abort@plt>
   17678:	andeq	ip, r2, r4, asr #6
   1767c:	push	{lr}		; (str lr, [sp, #-4]!)
   17680:	sub	sp, sp, #12
   17684:	mvn	ip, #0
   17688:	str	ip, [sp]
   1768c:	bl	17604 <__assert_fail@plt+0x6400>
   17690:	add	sp, sp, #12
   17694:	pop	{pc}		; (ldr pc, [sp], #4)
   17698:	push	{lr}		; (str lr, [sp, #-4]!)
   1769c:	sub	sp, sp, #12
   176a0:	mvn	ip, #0
   176a4:	mov	r3, r2
   176a8:	str	ip, [sp]
   176ac:	mov	r2, r1
   176b0:	mov	r1, r0
   176b4:	mov	r0, #0
   176b8:	bl	17604 <__assert_fail@plt+0x6400>
   176bc:	add	sp, sp, #12
   176c0:	pop	{pc}		; (ldr pc, [sp], #4)
   176c4:	push	{lr}		; (str lr, [sp, #-4]!)
   176c8:	sub	sp, sp, #12
   176cc:	str	r3, [sp]
   176d0:	mov	r3, r2
   176d4:	mov	r2, r1
   176d8:	mov	r1, r0
   176dc:	mov	r0, #0
   176e0:	bl	17604 <__assert_fail@plt+0x6400>
   176e4:	add	sp, sp, #12
   176e8:	pop	{pc}		; (ldr pc, [sp], #4)
   176ec:	ldr	r3, [pc]	; 176f4 <__assert_fail@plt+0x64f0>
   176f0:	b	16f78 <__assert_fail@plt+0x5d74>
   176f4:	andeq	ip, r2, r8, lsr r1
   176f8:	mov	r2, r1
   176fc:	ldr	r3, [pc, #8]	; 1770c <__assert_fail@plt+0x6508>
   17700:	mov	r1, r0
   17704:	mov	r0, #0
   17708:	b	16f78 <__assert_fail@plt+0x5d74>
   1770c:	andeq	ip, r2, r8, lsr r1
   17710:	ldr	r3, [pc, #4]	; 1771c <__assert_fail@plt+0x6518>
   17714:	mvn	r2, #0
   17718:	b	16f78 <__assert_fail@plt+0x5d74>
   1771c:	andeq	ip, r2, r8, lsr r1
   17720:	mov	r1, r0
   17724:	ldr	r3, [pc, #8]	; 17734 <__assert_fail@plt+0x6530>
   17728:	mvn	r2, #0
   1772c:	mov	r0, #0
   17730:	b	16f78 <__assert_fail@plt+0x5d74>
   17734:	andeq	ip, r2, r8, lsr r1
   17738:	push	{r4, r5, r6, lr}
   1773c:	sub	sp, sp, #32
   17740:	cmp	r1, #0
   17744:	mov	r4, r0
   17748:	ldr	r5, [sp, #48]	; 0x30
   1774c:	ldr	r6, [sp, #52]	; 0x34
   17750:	beq	17a68 <__assert_fail@plt+0x6864>
   17754:	stm	sp, {r2, r3}
   17758:	mov	r3, r1
   1775c:	ldr	r2, [pc, #808]	; 17a8c <__assert_fail@plt+0x6888>
   17760:	mov	r1, #1
   17764:	bl	11144 <__fprintf_chk@plt>
   17768:	mov	r2, #5
   1776c:	ldr	r1, [pc, #796]	; 17a90 <__assert_fail@plt+0x688c>
   17770:	mov	r0, #0
   17774:	bl	10fc4 <dcgettext@plt>
   17778:	ldr	r3, [pc, #788]	; 17a94 <__assert_fail@plt+0x6890>
   1777c:	ldr	r2, [pc, #788]	; 17a98 <__assert_fail@plt+0x6894>
   17780:	str	r3, [sp]
   17784:	mov	r1, #1
   17788:	mov	r3, r0
   1778c:	mov	r0, r4
   17790:	bl	11144 <__fprintf_chk@plt>
   17794:	mov	r1, r4
   17798:	mov	r0, #10
   1779c:	bl	10fb8 <fputc_unlocked@plt>
   177a0:	mov	r2, #5
   177a4:	ldr	r1, [pc, #752]	; 17a9c <__assert_fail@plt+0x6898>
   177a8:	mov	r0, #0
   177ac:	bl	10fc4 <dcgettext@plt>
   177b0:	mov	r1, #1
   177b4:	ldr	r3, [pc, #740]	; 17aa0 <__assert_fail@plt+0x689c>
   177b8:	mov	r2, r0
   177bc:	mov	r0, r4
   177c0:	bl	11144 <__fprintf_chk@plt>
   177c4:	mov	r1, r4
   177c8:	mov	r0, #10
   177cc:	bl	10fb8 <fputc_unlocked@plt>
   177d0:	cmp	r6, #9
   177d4:	ldrls	pc, [pc, r6, lsl #2]
   177d8:	b	17a80 <__assert_fail@plt+0x687c>
   177dc:	andeq	r7, r1, r0, ror #16
   177e0:	andeq	r7, r1, r8, ror #16
   177e4:	muleq	r1, r4, r8
   177e8:	andeq	r7, r1, r8, asr #17
   177ec:	andeq	r7, r1, r4, lsl #18
   177f0:	andeq	r7, r1, r0, asr #18
   177f4:	andeq	r7, r1, ip, ror r9
   177f8:	andeq	r7, r1, r0, asr #19
   177fc:	andeq	r7, r1, r0, lsl sl
   17800:	andeq	r7, r1, r4, lsl #16
   17804:	ldr	r1, [pc, #664]	; 17aa4 <__assert_fail@plt+0x68a0>
   17808:	mov	r2, #5
   1780c:	mov	r0, #0
   17810:	bl	10fc4 <dcgettext@plt>
   17814:	ldr	ip, [r5, #32]
   17818:	ldr	r1, [r5, #28]
   1781c:	ldr	r2, [r5, #24]
   17820:	ldr	r3, [r5]
   17824:	ldr	r6, [r5, #20]
   17828:	str	ip, [sp, #28]
   1782c:	ldr	lr, [r5, #16]
   17830:	str	r1, [sp, #24]
   17834:	ldr	ip, [r5, #12]
   17838:	str	r2, [sp, #20]
   1783c:	ldr	r1, [r5, #8]
   17840:	ldr	r2, [r5, #4]
   17844:	str	r6, [sp, #16]
   17848:	stmib	sp, {r1, ip, lr}
   1784c:	mov	r1, #1
   17850:	str	r2, [sp]
   17854:	mov	r2, r0
   17858:	mov	r0, r4
   1785c:	bl	11144 <__fprintf_chk@plt>
   17860:	add	sp, sp, #32
   17864:	pop	{r4, r5, r6, pc}
   17868:	mov	r2, #5
   1786c:	ldr	r1, [pc, #564]	; 17aa8 <__assert_fail@plt+0x68a4>
   17870:	mov	r0, #0
   17874:	bl	10fc4 <dcgettext@plt>
   17878:	ldr	r3, [r5]
   1787c:	mov	r1, #1
   17880:	mov	r2, r0
   17884:	mov	r0, r4
   17888:	add	sp, sp, #32
   1788c:	pop	{r4, r5, r6, lr}
   17890:	b	11144 <__fprintf_chk@plt>
   17894:	mov	r2, #5
   17898:	ldr	r1, [pc, #524]	; 17aac <__assert_fail@plt+0x68a8>
   1789c:	mov	r0, #0
   178a0:	bl	10fc4 <dcgettext@plt>
   178a4:	ldr	r2, [r5, #4]
   178a8:	ldr	r3, [r5]
   178ac:	mov	r1, #1
   178b0:	str	r2, [sp, #48]	; 0x30
   178b4:	mov	r2, r0
   178b8:	mov	r0, r4
   178bc:	add	sp, sp, #32
   178c0:	pop	{r4, r5, r6, lr}
   178c4:	b	11144 <__fprintf_chk@plt>
   178c8:	mov	r2, #5
   178cc:	ldr	r1, [pc, #476]	; 17ab0 <__assert_fail@plt+0x68ac>
   178d0:	mov	r0, #0
   178d4:	bl	10fc4 <dcgettext@plt>
   178d8:	ldr	r1, [r5, #8]
   178dc:	ldr	r2, [r5, #4]
   178e0:	ldr	r3, [r5]
   178e4:	str	r1, [sp, #52]	; 0x34
   178e8:	str	r2, [sp, #48]	; 0x30
   178ec:	mov	r1, #1
   178f0:	mov	r2, r0
   178f4:	mov	r0, r4
   178f8:	add	sp, sp, #32
   178fc:	pop	{r4, r5, r6, lr}
   17900:	b	11144 <__fprintf_chk@plt>
   17904:	mov	r2, #5
   17908:	ldr	r1, [pc, #420]	; 17ab4 <__assert_fail@plt+0x68b0>
   1790c:	mov	r0, #0
   17910:	bl	10fc4 <dcgettext@plt>
   17914:	ldr	r1, [r5, #8]
   17918:	ldr	ip, [r5, #12]
   1791c:	ldr	r2, [r5, #4]
   17920:	ldr	r3, [r5]
   17924:	stmib	sp, {r1, ip}
   17928:	str	r2, [sp]
   1792c:	mov	r1, #1
   17930:	mov	r2, r0
   17934:	mov	r0, r4
   17938:	bl	11144 <__fprintf_chk@plt>
   1793c:	b	17860 <__assert_fail@plt+0x665c>
   17940:	mov	r2, #5
   17944:	ldr	r1, [pc, #364]	; 17ab8 <__assert_fail@plt+0x68b4>
   17948:	mov	r0, #0
   1794c:	bl	10fc4 <dcgettext@plt>
   17950:	add	r1, r5, #8
   17954:	ldr	r2, [r5, #4]
   17958:	ldm	r1, {r1, ip, lr}
   1795c:	ldr	r3, [r5]
   17960:	str	r2, [sp]
   17964:	stmib	sp, {r1, ip, lr}
   17968:	mov	r1, #1
   1796c:	mov	r2, r0
   17970:	mov	r0, r4
   17974:	bl	11144 <__fprintf_chk@plt>
   17978:	b	17860 <__assert_fail@plt+0x665c>
   1797c:	mov	r2, #5
   17980:	ldr	r1, [pc, #308]	; 17abc <__assert_fail@plt+0x68b8>
   17984:	mov	r0, #0
   17988:	bl	10fc4 <dcgettext@plt>
   1798c:	add	r1, r5, #8
   17990:	ldr	r2, [r5, #4]
   17994:	ldm	r1, {r1, ip, lr}
   17998:	ldr	r6, [r5, #20]
   1799c:	ldr	r3, [r5]
   179a0:	stmib	sp, {r1, ip, lr}
   179a4:	mov	r1, #1
   179a8:	str	r2, [sp]
   179ac:	str	r6, [sp, #16]
   179b0:	mov	r2, r0
   179b4:	mov	r0, r4
   179b8:	bl	11144 <__fprintf_chk@plt>
   179bc:	b	17860 <__assert_fail@plt+0x665c>
   179c0:	mov	r2, #5
   179c4:	ldr	r1, [pc, #244]	; 17ac0 <__assert_fail@plt+0x68bc>
   179c8:	mov	r0, #0
   179cc:	bl	10fc4 <dcgettext@plt>
   179d0:	ldr	r2, [r5, #24]
   179d4:	ldr	r3, [r5]
   179d8:	ldr	r6, [r5, #20]
   179dc:	ldr	lr, [r5, #16]
   179e0:	ldr	ip, [r5, #12]
   179e4:	str	r2, [sp, #20]
   179e8:	ldr	r1, [r5, #8]
   179ec:	ldr	r2, [r5, #4]
   179f0:	str	r6, [sp, #16]
   179f4:	stmib	sp, {r1, ip, lr}
   179f8:	mov	r1, #1
   179fc:	str	r2, [sp]
   17a00:	mov	r2, r0
   17a04:	mov	r0, r4
   17a08:	bl	11144 <__fprintf_chk@plt>
   17a0c:	b	17860 <__assert_fail@plt+0x665c>
   17a10:	mov	r2, #5
   17a14:	ldr	r1, [pc, #168]	; 17ac4 <__assert_fail@plt+0x68c0>
   17a18:	mov	r0, #0
   17a1c:	bl	10fc4 <dcgettext@plt>
   17a20:	ldr	r1, [r5, #28]
   17a24:	ldr	r2, [r5, #24]
   17a28:	ldr	r3, [r5]
   17a2c:	ldr	r6, [r5, #20]
   17a30:	ldr	lr, [r5, #16]
   17a34:	str	r1, [sp, #24]
   17a38:	ldr	ip, [r5, #12]
   17a3c:	str	r2, [sp, #20]
   17a40:	ldr	r1, [r5, #8]
   17a44:	ldr	r2, [r5, #4]
   17a48:	str	r6, [sp, #16]
   17a4c:	stmib	sp, {r1, ip, lr}
   17a50:	mov	r1, #1
   17a54:	str	r2, [sp]
   17a58:	mov	r2, r0
   17a5c:	mov	r0, r4
   17a60:	bl	11144 <__fprintf_chk@plt>
   17a64:	b	17860 <__assert_fail@plt+0x665c>
   17a68:	str	r3, [sp]
   17a6c:	mov	r1, #1
   17a70:	mov	r3, r2
   17a74:	ldr	r2, [pc, #76]	; 17ac8 <__assert_fail@plt+0x68c4>
   17a78:	bl	11144 <__fprintf_chk@plt>
   17a7c:	b	17768 <__assert_fail@plt+0x6564>
   17a80:	mov	r2, #5
   17a84:	ldr	r1, [pc, #64]	; 17acc <__assert_fail@plt+0x68c8>
   17a88:	b	1780c <__assert_fail@plt+0x6608>
   17a8c:	andeq	sl, r1, r0, lsr #23
   17a90:			; <UNDEFINED> instruction: 0x0001abb4
   17a94:	andeq	r0, r0, r6, ror #15
   17a98:	andeq	sl, r1, ip, lsl #29
   17a9c:			; <UNDEFINED> instruction: 0x0001abb8
   17aa0:	andeq	sl, r1, r4, ror #24
   17aa4:	muleq	r1, r4, sp
   17aa8:	andeq	sl, r1, r8, lsl #25
   17aac:	muleq	r1, r8, ip
   17ab0:			; <UNDEFINED> instruction: 0x0001acb0
   17ab4:	andeq	sl, r1, ip, asr #25
   17ab8:	andeq	sl, r1, ip, ror #25
   17abc:	andeq	sl, r1, r0, lsl sp
   17ac0:	andeq	sl, r1, r8, lsr sp
   17ac4:	andeq	sl, r1, r4, ror #26
   17ac8:	andeq	sl, r1, ip, lsr #23
   17acc:	andeq	sl, r1, r8, asr #27
   17ad0:	push	{r4, r5, lr}
   17ad4:	sub	sp, sp, #12
   17ad8:	ldr	r5, [sp, #24]
   17adc:	ldr	ip, [r5]
   17ae0:	cmp	ip, #0
   17ae4:	beq	17b00 <__assert_fail@plt+0x68fc>
   17ae8:	mov	lr, r5
   17aec:	mov	ip, #0
   17af0:	ldr	r4, [lr, #4]!
   17af4:	add	ip, ip, #1
   17af8:	cmp	r4, #0
   17afc:	bne	17af0 <__assert_fail@plt+0x68ec>
   17b00:	stm	sp, {r5, ip}
   17b04:	bl	17738 <__assert_fail@plt+0x6534>
   17b08:	add	sp, sp, #12
   17b0c:	pop	{r4, r5, pc}
   17b10:	push	{r4, r5, lr}
   17b14:	sub	sp, sp, #52	; 0x34
   17b18:	add	r5, sp, #4
   17b1c:	ldr	r4, [sp, #64]	; 0x40
   17b20:	mov	ip, #0
   17b24:	sub	r4, r4, #4
   17b28:	ldr	lr, [r4, #4]!
   17b2c:	cmp	lr, #0
   17b30:	str	lr, [r5, #4]!
   17b34:	beq	17b44 <__assert_fail@plt+0x6940>
   17b38:	add	ip, ip, #1
   17b3c:	cmp	ip, #10
   17b40:	bne	17b28 <__assert_fail@plt+0x6924>
   17b44:	add	lr, sp, #8
   17b48:	str	ip, [sp, #4]
   17b4c:	str	lr, [sp]
   17b50:	bl	17738 <__assert_fail@plt+0x6534>
   17b54:	add	sp, sp, #52	; 0x34
   17b58:	pop	{r4, r5, pc}
   17b5c:	push	{r3}		; (str r3, [sp, #-4]!)
   17b60:	push	{r4, lr}
   17b64:	sub	sp, sp, #60	; 0x3c
   17b68:	add	lr, sp, #56	; 0x38
   17b6c:	add	r3, sp, #72	; 0x48
   17b70:	str	r3, [lr, #-44]!	; 0xffffffd4
   17b74:	add	r4, sp, #68	; 0x44
   17b78:	mov	r3, #0
   17b7c:	ldr	ip, [r4, #4]!
   17b80:	cmp	ip, #0
   17b84:	str	ip, [lr, #4]!
   17b88:	beq	17b98 <__assert_fail@plt+0x6994>
   17b8c:	add	r3, r3, #1
   17b90:	cmp	r3, #10
   17b94:	bne	17b7c <__assert_fail@plt+0x6978>
   17b98:	add	ip, sp, #16
   17b9c:	str	r3, [sp, #4]
   17ba0:	str	ip, [sp]
   17ba4:	ldr	r3, [sp, #68]	; 0x44
   17ba8:	bl	17738 <__assert_fail@plt+0x6534>
   17bac:	add	sp, sp, #60	; 0x3c
   17bb0:	pop	{r4, lr}
   17bb4:	add	sp, sp, #4
   17bb8:	bx	lr
   17bbc:	ldr	r3, [pc, #116]	; 17c38 <__assert_fail@plt+0x6a34>
   17bc0:	push	{r4, lr}
   17bc4:	mov	r0, #10
   17bc8:	ldr	r1, [r3]
   17bcc:	bl	10fb8 <fputc_unlocked@plt>
   17bd0:	mov	r2, #5
   17bd4:	ldr	r1, [pc, #96]	; 17c3c <__assert_fail@plt+0x6a38>
   17bd8:	mov	r0, #0
   17bdc:	bl	10fc4 <dcgettext@plt>
   17be0:	ldr	r2, [pc, #88]	; 17c40 <__assert_fail@plt+0x6a3c>
   17be4:	mov	r1, r0
   17be8:	mov	r0, #1
   17bec:	bl	11120 <__printf_chk@plt>
   17bf0:	mov	r2, #5
   17bf4:	ldr	r1, [pc, #72]	; 17c44 <__assert_fail@plt+0x6a40>
   17bf8:	mov	r0, #0
   17bfc:	bl	10fc4 <dcgettext@plt>
   17c00:	ldr	r3, [pc, #64]	; 17c48 <__assert_fail@plt+0x6a44>
   17c04:	ldr	r2, [pc, #64]	; 17c4c <__assert_fail@plt+0x6a48>
   17c08:	mov	r1, r0
   17c0c:	mov	r0, #1
   17c10:	bl	11120 <__printf_chk@plt>
   17c14:	mov	r2, #5
   17c18:	ldr	r1, [pc, #48]	; 17c50 <__assert_fail@plt+0x6a4c>
   17c1c:	mov	r0, #0
   17c20:	bl	10fc4 <dcgettext@plt>
   17c24:	ldr	r2, [pc, #40]	; 17c54 <__assert_fail@plt+0x6a50>
   17c28:	pop	{r4, lr}
   17c2c:	mov	r1, r0
   17c30:	mov	r0, #1
   17c34:	b	11120 <__printf_chk@plt>
   17c38:	andeq	ip, r2, r4, lsl #3
   17c3c:	andeq	sl, r1, r4, lsl #28
   17c40:	andeq	sl, r1, r8, lsl lr
   17c44:	andeq	sl, r1, r0, lsr lr
   17c48:	muleq	r1, r8, r6
   17c4c:	andeq	sl, r1, r0, asr #13
   17c50:	andeq	sl, r1, r4, asr #28
   17c54:	andeq	sl, r1, ip, ror #28
   17c58:	push	{r4, lr}
   17c5c:	bl	18a68 <__assert_fail@plt+0x7864>
   17c60:	cmp	r0, #0
   17c64:	popne	{r4, pc}
   17c68:	bl	181a0 <__assert_fail@plt+0x6f9c>
   17c6c:	push	{r4, lr}
   17c70:	bl	18a68 <__assert_fail@plt+0x7864>
   17c74:	cmp	r0, #0
   17c78:	popne	{r4, pc}
   17c7c:	bl	181a0 <__assert_fail@plt+0x6f9c>
   17c80:	push	{r4, lr}
   17c84:	bl	18a68 <__assert_fail@plt+0x7864>
   17c88:	cmp	r0, #0
   17c8c:	popne	{r4, pc}
   17c90:	bl	181a0 <__assert_fail@plt+0x6f9c>
   17c94:	push	{r4, r5, r6, lr}
   17c98:	mov	r5, r0
   17c9c:	mov	r4, r1
   17ca0:	bl	18a94 <__assert_fail@plt+0x7890>
   17ca4:	cmp	r0, #0
   17ca8:	popne	{r4, r5, r6, pc}
   17cac:	adds	r4, r4, #0
   17cb0:	movne	r4, #1
   17cb4:	cmp	r5, #0
   17cb8:	orreq	r4, r4, #1
   17cbc:	cmp	r4, #0
   17cc0:	popeq	{r4, r5, r6, pc}
   17cc4:	bl	181a0 <__assert_fail@plt+0x6f9c>
   17cc8:	push	{r4, lr}
   17ccc:	cmp	r1, #0
   17cd0:	orreq	r1, r1, #1
   17cd4:	bl	18a94 <__assert_fail@plt+0x7890>
   17cd8:	cmp	r0, #0
   17cdc:	popne	{r4, pc}
   17ce0:	bl	181a0 <__assert_fail@plt+0x6f9c>
   17ce4:	push	{r4, r5, r6, lr}
   17ce8:	mov	r6, r0
   17cec:	mov	r5, r1
   17cf0:	mov	r4, r2
   17cf4:	bl	18bf4 <__assert_fail@plt+0x79f0>
   17cf8:	cmp	r0, #0
   17cfc:	popne	{r4, r5, r6, pc}
   17d00:	cmp	r6, #0
   17d04:	beq	17d14 <__assert_fail@plt+0x6b10>
   17d08:	cmp	r5, #0
   17d0c:	cmpne	r4, #0
   17d10:	popeq	{r4, r5, r6, pc}
   17d14:	bl	181a0 <__assert_fail@plt+0x6f9c>
   17d18:	b	17ce4 <__assert_fail@plt+0x6ae0>
   17d1c:	cmp	r2, #0
   17d20:	cmpne	r1, #0
   17d24:	moveq	r2, #1
   17d28:	moveq	r1, r2
   17d2c:	push	{r4, lr}
   17d30:	bl	18bf4 <__assert_fail@plt+0x79f0>
   17d34:	cmp	r0, #0
   17d38:	popne	{r4, pc}
   17d3c:	bl	181a0 <__assert_fail@plt+0x6f9c>
   17d40:	mov	r2, r1
   17d44:	mov	r1, r0
   17d48:	mov	r0, #0
   17d4c:	b	17ce4 <__assert_fail@plt+0x6ae0>
   17d50:	mov	r2, r1
   17d54:	mov	r1, r0
   17d58:	mov	r0, #0
   17d5c:	b	17d1c <__assert_fail@plt+0x6b18>
   17d60:	push	{r4, r5, r6, lr}
   17d64:	subs	r6, r0, #0
   17d68:	sub	sp, sp, #8
   17d6c:	mov	r5, r1
   17d70:	ldr	r4, [r1]
   17d74:	beq	17db0 <__assert_fail@plt+0x6bac>
   17d78:	lsr	r1, r4, #1
   17d7c:	add	r3, r1, #1
   17d80:	mvn	r3, r3
   17d84:	cmp	r4, r3
   17d88:	bhi	17dac <__assert_fail@plt+0x6ba8>
   17d8c:	add	r4, r4, #1
   17d90:	add	r4, r4, r1
   17d94:	mov	r0, r6
   17d98:	mov	r1, r4
   17d9c:	bl	17ce4 <__assert_fail@plt+0x6ae0>
   17da0:	str	r4, [r5]
   17da4:	add	sp, sp, #8
   17da8:	pop	{r4, r5, r6, pc}
   17dac:	bl	181a0 <__assert_fail@plt+0x6f9c>
   17db0:	cmp	r4, #0
   17db4:	bne	17d94 <__assert_fail@plt+0x6b90>
   17db8:	mov	r1, r2
   17dbc:	mov	r0, #64	; 0x40
   17dc0:	str	r2, [sp, #4]
   17dc4:	bl	18d34 <__assert_fail@plt+0x7b30>
   17dc8:	ldr	r2, [sp, #4]
   17dcc:	cmp	r0, #0
   17dd0:	movne	r4, r0
   17dd4:	addeq	r4, r0, #1
   17dd8:	b	17d94 <__assert_fail@plt+0x6b90>
   17ddc:	mov	r2, #1
   17de0:	b	17d60 <__assert_fail@plt+0x6b5c>
   17de4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   17de8:	sub	sp, sp, #12
   17dec:	ldr	r6, [r1]
   17df0:	mov	sl, r1
   17df4:	mov	r9, r0
   17df8:	asrs	r4, r6, #1
   17dfc:	mov	r5, r2
   17e00:	mov	fp, r3
   17e04:	ldr	r7, [sp, #48]	; 0x30
   17e08:	bmi	17f74 <__assert_fail@plt+0x6d70>
   17e0c:	mvn	r3, #-2147483648	; 0x80000000
   17e10:	sub	r3, r3, r4
   17e14:	cmp	r6, r3
   17e18:	movle	r3, #0
   17e1c:	movgt	r3, #1
   17e20:	mvn	r8, fp
   17e24:	cmp	r3, #0
   17e28:	addeq	r4, r4, r6
   17e2c:	mvnne	r4, #-2147483648	; 0x80000000
   17e30:	lsr	r8, r8, #31
   17e34:	cmp	fp, r4
   17e38:	movge	r3, #0
   17e3c:	andlt	r3, r8, #1
   17e40:	cmp	r3, #0
   17e44:	beq	17f2c <__assert_fail@plt+0x6d28>
   17e48:	cmp	r7, #0
   17e4c:	blt	17ffc <__assert_fail@plt+0x6df8>
   17e50:	bne	17ff4 <__assert_fail@plt+0x6df0>
   17e54:	mov	r2, #64	; 0x40
   17e58:	mov	r1, r7
   17e5c:	mov	r0, r2
   17e60:	str	r2, [sp, #4]
   17e64:	bl	18f40 <__assert_fail@plt+0x7d3c>
   17e68:	ldr	r2, [sp, #4]
   17e6c:	mov	r1, r7
   17e70:	mov	r4, r0
   17e74:	mov	r0, r2
   17e78:	bl	19160 <__assert_fail@plt+0x7f5c>
   17e7c:	ldr	r2, [sp, #4]
   17e80:	sub	r1, r2, r1
   17e84:	cmp	r9, #0
   17e88:	sub	r3, r4, r6
   17e8c:	streq	r9, [sl]
   17e90:	cmp	r3, r5
   17e94:	bge	17f18 <__assert_fail@plt+0x6d14>
   17e98:	cmp	r5, #0
   17e9c:	blt	17f88 <__assert_fail@plt+0x6d84>
   17ea0:	cmp	r6, #0
   17ea4:	blt	17ec4 <__assert_fail@plt+0x6cc0>
   17ea8:	mvn	r3, #-2147483648	; 0x80000000
   17eac:	sub	r3, r3, r5
   17eb0:	cmp	r6, r3
   17eb4:	movle	r3, #0
   17eb8:	movgt	r3, #1
   17ebc:	cmp	r3, #0
   17ec0:	bne	18084 <__assert_fail@plt+0x6e80>
   17ec4:	add	r5, r6, r5
   17ec8:	cmp	fp, r5
   17ecc:	movge	r8, #0
   17ed0:	andlt	r8, r8, #1
   17ed4:	cmp	r8, #0
   17ed8:	mov	r4, r5
   17edc:	bne	18084 <__assert_fail@plt+0x6e80>
   17ee0:	cmp	r7, #0
   17ee4:	blt	17f9c <__assert_fail@plt+0x6d98>
   17ee8:	beq	17f14 <__assert_fail@plt+0x6d10>
   17eec:	cmp	r5, #0
   17ef0:	blt	18044 <__assert_fail@plt+0x6e40>
   17ef4:	mov	r1, r7
   17ef8:	mvn	r0, #-2147483648	; 0x80000000
   17efc:	bl	18f40 <__assert_fail@plt+0x7d3c>
   17f00:	cmp	r5, r0
   17f04:	movle	r0, #0
   17f08:	movgt	r0, #1
   17f0c:	cmp	r0, #0
   17f10:	bne	18084 <__assert_fail@plt+0x6e80>
   17f14:	mul	r1, r5, r7
   17f18:	mov	r0, r9
   17f1c:	bl	17c94 <__assert_fail@plt+0x6a90>
   17f20:	str	r4, [sl]
   17f24:	add	sp, sp, #12
   17f28:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   17f2c:	cmp	r7, #0
   17f30:	blt	17fc8 <__assert_fail@plt+0x6dc4>
   17f34:	beq	17e54 <__assert_fail@plt+0x6c50>
   17f38:	cmp	r4, #0
   17f3c:	blt	18004 <__assert_fail@plt+0x6e00>
   17f40:	mov	r1, r7
   17f44:	mvn	r0, #-2147483648	; 0x80000000
   17f48:	bl	18f40 <__assert_fail@plt+0x7d3c>
   17f4c:	cmp	r0, r4
   17f50:	movge	r0, #0
   17f54:	movlt	r0, #1
   17f58:	cmp	r0, #0
   17f5c:	mvnne	r2, #-2147483648	; 0x80000000
   17f60:	bne	17e58 <__assert_fail@plt+0x6c54>
   17f64:	mul	r1, r7, r4
   17f68:	cmp	r1, #63	; 0x3f
   17f6c:	bgt	17e84 <__assert_fail@plt+0x6c80>
   17f70:	b	17e54 <__assert_fail@plt+0x6c50>
   17f74:	rsb	r3, r4, #-2147483648	; 0x80000000
   17f78:	cmp	r6, r3
   17f7c:	movge	r3, #0
   17f80:	movlt	r3, #1
   17f84:	b	17e20 <__assert_fail@plt+0x6c1c>
   17f88:	rsb	r3, r5, #-2147483648	; 0x80000000
   17f8c:	cmp	r6, r3
   17f90:	movge	r3, #0
   17f94:	movlt	r3, #1
   17f98:	b	17ebc <__assert_fail@plt+0x6cb8>
   17f9c:	cmp	r5, #0
   17fa0:	blt	18028 <__assert_fail@plt+0x6e24>
   17fa4:	cmn	r7, #1
   17fa8:	beq	17f14 <__assert_fail@plt+0x6d10>
   17fac:	mov	r1, r7
   17fb0:	mov	r0, #-2147483648	; 0x80000000
   17fb4:	bl	18f40 <__assert_fail@plt+0x7d3c>
   17fb8:	cmp	r5, r0
   17fbc:	movle	r0, #0
   17fc0:	movgt	r0, #1
   17fc4:	b	17f0c <__assert_fail@plt+0x6d08>
   17fc8:	cmp	r4, #0
   17fcc:	blt	18068 <__assert_fail@plt+0x6e64>
   17fd0:	cmn	r7, #1
   17fd4:	beq	17f64 <__assert_fail@plt+0x6d60>
   17fd8:	mov	r1, r7
   17fdc:	mov	r0, #-2147483648	; 0x80000000
   17fe0:	bl	18f40 <__assert_fail@plt+0x7d3c>
   17fe4:	cmp	r0, r4
   17fe8:	movge	r0, #0
   17fec:	movlt	r0, #1
   17ff0:	b	17f58 <__assert_fail@plt+0x6d54>
   17ff4:	mov	r4, fp
   17ff8:	b	17f40 <__assert_fail@plt+0x6d3c>
   17ffc:	mov	r4, fp
   18000:	b	17fd0 <__assert_fail@plt+0x6dcc>
   18004:	cmn	r4, #1
   18008:	beq	17f64 <__assert_fail@plt+0x6d60>
   1800c:	mov	r1, r4
   18010:	mov	r0, #-2147483648	; 0x80000000
   18014:	bl	18f40 <__assert_fail@plt+0x7d3c>
   18018:	cmp	r7, r0
   1801c:	movle	r0, #0
   18020:	movgt	r0, #1
   18024:	b	17f58 <__assert_fail@plt+0x6d54>
   18028:	mov	r1, r7
   1802c:	mvn	r0, #-2147483648	; 0x80000000
   18030:	bl	18f40 <__assert_fail@plt+0x7d3c>
   18034:	cmp	r5, r0
   18038:	movge	r0, #0
   1803c:	movlt	r0, #1
   18040:	b	17f0c <__assert_fail@plt+0x6d08>
   18044:	cmn	r5, #1
   18048:	beq	17f14 <__assert_fail@plt+0x6d10>
   1804c:	mov	r1, r5
   18050:	mov	r0, #-2147483648	; 0x80000000
   18054:	bl	18f40 <__assert_fail@plt+0x7d3c>
   18058:	cmp	r7, r0
   1805c:	movle	r0, #0
   18060:	movgt	r0, #1
   18064:	b	17f0c <__assert_fail@plt+0x6d08>
   18068:	mov	r1, r7
   1806c:	mvn	r0, #-2147483648	; 0x80000000
   18070:	bl	18f40 <__assert_fail@plt+0x7d3c>
   18074:	cmp	r0, r4
   18078:	movle	r0, #0
   1807c:	movgt	r0, #1
   18080:	b	17f58 <__assert_fail@plt+0x6d54>
   18084:	bl	181a0 <__assert_fail@plt+0x6f9c>
   18088:	push	{r4, lr}
   1808c:	mov	r1, #1
   18090:	bl	18a20 <__assert_fail@plt+0x781c>
   18094:	cmp	r0, #0
   18098:	popne	{r4, pc}
   1809c:	bl	181a0 <__assert_fail@plt+0x6f9c>
   180a0:	push	{r4, lr}
   180a4:	mov	r1, #1
   180a8:	bl	18a20 <__assert_fail@plt+0x781c>
   180ac:	cmp	r0, #0
   180b0:	popne	{r4, pc}
   180b4:	bl	181a0 <__assert_fail@plt+0x6f9c>
   180b8:	push	{r4, lr}
   180bc:	bl	18a20 <__assert_fail@plt+0x781c>
   180c0:	cmp	r0, #0
   180c4:	popne	{r4, pc}
   180c8:	bl	181a0 <__assert_fail@plt+0x6f9c>
   180cc:	push	{r4, lr}
   180d0:	bl	18a20 <__assert_fail@plt+0x781c>
   180d4:	cmp	r0, #0
   180d8:	popne	{r4, pc}
   180dc:	bl	181a0 <__assert_fail@plt+0x6f9c>
   180e0:	push	{r4, r5, r6, lr}
   180e4:	mov	r6, r0
   180e8:	mov	r0, r1
   180ec:	mov	r4, r1
   180f0:	bl	18a68 <__assert_fail@plt+0x7864>
   180f4:	subs	r5, r0, #0
   180f8:	beq	18110 <__assert_fail@plt+0x6f0c>
   180fc:	mov	r2, r4
   18100:	mov	r1, r6
   18104:	bl	10f70 <memcpy@plt>
   18108:	mov	r0, r5
   1810c:	pop	{r4, r5, r6, pc}
   18110:	bl	181a0 <__assert_fail@plt+0x6f9c>
   18114:	push	{r4, r5, r6, lr}
   18118:	mov	r6, r0
   1811c:	mov	r0, r1
   18120:	mov	r4, r1
   18124:	bl	18a68 <__assert_fail@plt+0x7864>
   18128:	subs	r5, r0, #0
   1812c:	beq	18144 <__assert_fail@plt+0x6f40>
   18130:	mov	r2, r4
   18134:	mov	r1, r6
   18138:	bl	10f70 <memcpy@plt>
   1813c:	mov	r0, r5
   18140:	pop	{r4, r5, r6, pc}
   18144:	bl	181a0 <__assert_fail@plt+0x6f9c>
   18148:	push	{r4, r5, r6, lr}
   1814c:	mov	r6, r0
   18150:	add	r0, r1, #1
   18154:	mov	r4, r1
   18158:	bl	18a68 <__assert_fail@plt+0x7864>
   1815c:	subs	r5, r0, #0
   18160:	beq	18180 <__assert_fail@plt+0x6f7c>
   18164:	mov	r3, #0
   18168:	mov	r1, r6
   1816c:	strb	r3, [r5, r4]
   18170:	mov	r2, r4
   18174:	bl	10f70 <memcpy@plt>
   18178:	mov	r0, r5
   1817c:	pop	{r4, r5, r6, pc}
   18180:	bl	181a0 <__assert_fail@plt+0x6f9c>
   18184:	push	{r4, lr}
   18188:	mov	r4, r0
   1818c:	bl	110c0 <strlen@plt>
   18190:	add	r1, r0, #1
   18194:	mov	r0, r4
   18198:	pop	{r4, lr}
   1819c:	b	180e0 <__assert_fail@plt+0x6edc>
   181a0:	ldr	r3, [pc, #44]	; 181d4 <__assert_fail@plt+0x6fd0>
   181a4:	push	{r4, lr}
   181a8:	mov	r2, #5
   181ac:	ldr	r1, [pc, #36]	; 181d8 <__assert_fail@plt+0x6fd4>
   181b0:	mov	r0, #0
   181b4:	ldr	r4, [r3]
   181b8:	bl	10fc4 <dcgettext@plt>
   181bc:	ldr	r2, [pc, #24]	; 181dc <__assert_fail@plt+0x6fd8>
   181c0:	mov	r1, #0
   181c4:	mov	r3, r0
   181c8:	mov	r0, r4
   181cc:	bl	1103c <error@plt>
   181d0:	bl	111ec <abort@plt>
   181d4:	andeq	ip, r2, r4, lsr #2
   181d8:			; <UNDEFINED> instruction: 0x0001aebc
   181dc:	andeq	sl, r1, r4, lsl #21
   181e0:	push	{r4, r5, r6, r7, r8, lr}
   181e4:	mov	r3, r1
   181e8:	ldr	r4, [pc, #96]	; 18250 <__assert_fail@plt+0x704c>
   181ec:	mov	r2, r0
   181f0:	mov	r1, #1
   181f4:	ldr	r0, [r4]
   181f8:	bl	11078 <__vfprintf_chk@plt>
   181fc:	subs	r5, r0, #0
   18200:	blt	1820c <__assert_fail@plt+0x7008>
   18204:	mov	r0, r5
   18208:	pop	{r4, r5, r6, r7, r8, pc}
   1820c:	ldr	r0, [r4]
   18210:	bl	10f58 <ferror@plt>
   18214:	subs	r4, r0, #0
   18218:	bne	18204 <__assert_fail@plt+0x7000>
   1821c:	ldr	r3, [pc, #48]	; 18254 <__assert_fail@plt+0x7050>
   18220:	ldr	r6, [r3]
   18224:	bl	110d8 <__errno_location@plt>
   18228:	mov	r2, #5
   1822c:	ldr	r1, [pc, #36]	; 18258 <__assert_fail@plt+0x7054>
   18230:	ldr	r7, [r0]
   18234:	mov	r0, r4
   18238:	bl	10fc4 <dcgettext@plt>
   1823c:	mov	r1, r7
   18240:	mov	r2, r0
   18244:	mov	r0, r6
   18248:	bl	1103c <error@plt>
   1824c:	b	18204 <__assert_fail@plt+0x7000>
   18250:	andeq	ip, r2, r4, lsl #3
   18254:	andeq	ip, r2, r4, lsr #2
   18258:	ldrdeq	sl, [r1], -r0
   1825c:	push	{r0, r1, r2, r3}
   18260:	push	{lr}		; (str lr, [sp, #-4]!)
   18264:	sub	sp, sp, #12
   18268:	add	r3, sp, #20
   1826c:	mov	r1, r3
   18270:	ldr	r0, [sp, #16]
   18274:	str	r3, [sp, #4]
   18278:	bl	181e0 <__assert_fail@plt+0x6fdc>
   1827c:	add	sp, sp, #12
   18280:	pop	{lr}		; (ldr lr, [sp], #4)
   18284:	add	sp, sp, #16
   18288:	bx	lr
   1828c:	push	{r4, r5, r6, r7, r8, lr}
   18290:	mov	r3, r2
   18294:	mov	r2, r1
   18298:	mov	r1, #1
   1829c:	mov	r5, r0
   182a0:	bl	11078 <__vfprintf_chk@plt>
   182a4:	subs	r4, r0, #0
   182a8:	blt	182b4 <__assert_fail@plt+0x70b0>
   182ac:	mov	r0, r4
   182b0:	pop	{r4, r5, r6, r7, r8, pc}
   182b4:	mov	r0, r5
   182b8:	bl	10f58 <ferror@plt>
   182bc:	subs	r5, r0, #0
   182c0:	bne	182ac <__assert_fail@plt+0x70a8>
   182c4:	ldr	r3, [pc, #44]	; 182f8 <__assert_fail@plt+0x70f4>
   182c8:	ldr	r6, [r3]
   182cc:	bl	110d8 <__errno_location@plt>
   182d0:	mov	r2, #5
   182d4:	ldr	r1, [pc, #32]	; 182fc <__assert_fail@plt+0x70f8>
   182d8:	ldr	r7, [r0]
   182dc:	mov	r0, r5
   182e0:	bl	10fc4 <dcgettext@plt>
   182e4:	mov	r1, r7
   182e8:	mov	r2, r0
   182ec:	mov	r0, r6
   182f0:	bl	1103c <error@plt>
   182f4:	b	182ac <__assert_fail@plt+0x70a8>
   182f8:	andeq	ip, r2, r4, lsr #2
   182fc:	ldrdeq	sl, [r1], -r0
   18300:	push	{r1, r2, r3}
   18304:	push	{lr}		; (str lr, [sp, #-4]!)
   18308:	sub	sp, sp, #8
   1830c:	add	r3, sp, #16
   18310:	mov	r2, r3
   18314:	ldr	r1, [sp, #12]
   18318:	str	r3, [sp, #4]
   1831c:	bl	1828c <__assert_fail@plt+0x7088>
   18320:	add	sp, sp, #8
   18324:	pop	{lr}		; (ldr lr, [sp], #4)
   18328:	add	sp, sp, #12
   1832c:	bx	lr
   18330:	ldr	ip, [pc, #148]	; 183cc <__assert_fail@plt+0x71c8>
   18334:	sub	r0, r0, #1
   18338:	push	{lr}		; (str lr, [sp, #-4]!)
   1833c:	sub	sp, sp, #20
   18340:	ldr	r5, [ip]
   18344:	cmp	r0, #3
   18348:	ldrls	pc, [pc, r0, lsl #2]
   1834c:	b	183b8 <__assert_fail@plt+0x71b4>
   18350:	andeq	r8, r1, r4, asr #7
   18354:			; <UNDEFINED> instruction: 0x000183bc
   18358:			; <UNDEFINED> instruction: 0x000183bc
   1835c:	andeq	r8, r1, r0, ror #6
   18360:	ldr	r0, [pc, #104]	; 183d0 <__assert_fail@plt+0x71cc>
   18364:	cmp	r1, #0
   18368:	movlt	r3, #0
   1836c:	ldrlt	r4, [pc, #96]	; 183d4 <__assert_fail@plt+0x71d0>
   18370:	ldrge	r6, [r3, r1, lsl #4]
   18374:	sublt	r4, r4, r1
   18378:	strblt	r2, [sp, #12]
   1837c:	mov	r1, r0
   18380:	mov	r2, #5
   18384:	mov	r0, #0
   18388:	strblt	r3, [sp, #13]
   1838c:	addlt	r6, sp, #12
   18390:	ldrge	r4, [pc, #60]	; 183d4 <__assert_fail@plt+0x71d0>
   18394:	bl	10fc4 <dcgettext@plt>
   18398:	ldr	r3, [sp, #24]
   1839c:	str	r6, [sp]
   183a0:	str	r3, [sp, #4]
   183a4:	mov	r1, #0
   183a8:	mov	r3, r4
   183ac:	mov	r2, r0
   183b0:	mov	r0, r5
   183b4:	bl	1103c <error@plt>
   183b8:	bl	111ec <abort@plt>
   183bc:	ldr	r0, [pc, #20]	; 183d8 <__assert_fail@plt+0x71d4>
   183c0:	b	18364 <__assert_fail@plt+0x7160>
   183c4:	ldr	r0, [pc, #16]	; 183dc <__assert_fail@plt+0x71d8>
   183c8:	b	18364 <__assert_fail@plt+0x7160>
   183cc:	andeq	ip, r2, r4, lsr #2
   183d0:	strdeq	sl, [r1], -r0
   183d4:	andeq	sl, r1, r4, asr pc
   183d8:	andeq	sl, r1, ip, lsl #30
   183dc:	andeq	sl, r1, r4, lsr pc
   183e0:	push	{r4, r5, r6, r7, r8, lr}
   183e4:	subs	r5, r1, #0
   183e8:	mov	r4, r0
   183ec:	blt	18460 <__assert_fail@plt+0x725c>
   183f0:	moveq	r6, #0
   183f4:	moveq	r7, #0
   183f8:	bne	18420 <__assert_fail@plt+0x721c>
   183fc:	ldr	r2, [r4]
   18400:	ldr	r1, [r4, #4]
   18404:	mov	r0, #0
   18408:	mul	ip, r2, r7
   1840c:	umull	r2, r3, r2, r5
   18410:	mla	r5, r5, r1, ip
   18414:	add	r3, r5, r3
   18418:	strd	r2, [r4]
   1841c:	pop	{r4, r5, r6, r7, r8, pc}
   18420:	asr	r7, r5, #31
   18424:	mov	r2, r5
   18428:	mov	r3, r7
   1842c:	mvn	r0, #0
   18430:	mvn	r1, #0
   18434:	bl	19180 <__assert_fail@plt+0x7f7c>
   18438:	ldrd	r2, [r4]
   1843c:	mov	r6, r5
   18440:	cmp	r1, r3
   18444:	cmpeq	r0, r2
   18448:	bcs	183fc <__assert_fail@plt+0x71f8>
   1844c:	mvn	r2, #0
   18450:	mvn	r3, #0
   18454:	mov	r0, #1
   18458:	strd	r2, [r4]
   1845c:	pop	{r4, r5, r6, r7, r8, pc}
   18460:	ldrd	r2, [r0]
   18464:	orrs	r3, r2, r3
   18468:	moveq	r6, r5
   1846c:	asreq	r7, r6, #31
   18470:	bne	1844c <__assert_fail@plt+0x7248>
   18474:	b	183fc <__assert_fail@plt+0x71f8>
   18478:	cmp	r2, #36	; 0x24
   1847c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   18480:	sub	sp, sp, #20
   18484:	bhi	189f8 <__assert_fail@plt+0x77f4>
   18488:	cmp	r1, #0
   1848c:	mov	r8, r2
   18490:	mov	r7, r0
   18494:	mov	r5, r1
   18498:	mov	r6, r3
   1849c:	addeq	r5, sp, #4
   184a0:	bl	110d8 <__errno_location@plt>
   184a4:	mov	r3, #0
   184a8:	str	r3, [r0]
   184ac:	mov	r9, r0
   184b0:	bl	110a8 <__ctype_b_loc@plt>
   184b4:	ldrb	r3, [r7]
   184b8:	mov	r2, r7
   184bc:	ldr	r0, [r0]
   184c0:	b	184c8 <__assert_fail@plt+0x72c4>
   184c4:	ldrb	r3, [r2, #1]!
   184c8:	lsl	r1, r3, #1
   184cc:	ldrh	r4, [r0, r1]
   184d0:	ands	r4, r4, #8192	; 0x2000
   184d4:	bne	184c4 <__assert_fail@plt+0x72c0>
   184d8:	cmp	r3, #45	; 0x2d
   184dc:	bne	184f0 <__assert_fail@plt+0x72ec>
   184e0:	mov	r4, #4
   184e4:	mov	r0, r4
   184e8:	add	sp, sp, #20
   184ec:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   184f0:	mov	r2, r8
   184f4:	mov	r3, r4
   184f8:	mov	r1, r5
   184fc:	mov	r0, r7
   18500:	bl	10f7c <__strtoull_internal@plt>
   18504:	ldr	r8, [r5]
   18508:	cmp	r7, r8
   1850c:	mov	r2, r0
   18510:	str	r0, [sp, #8]
   18514:	str	r1, [sp, #12]
   18518:	beq	18564 <__assert_fail@plt+0x7360>
   1851c:	ldr	r4, [r9]
   18520:	cmp	r4, #0
   18524:	bne	18554 <__assert_fail@plt+0x7350>
   18528:	ldr	r3, [sp, #56]	; 0x38
   1852c:	cmp	r3, #0
   18530:	beq	18540 <__assert_fail@plt+0x733c>
   18534:	ldrb	r9, [r8]
   18538:	cmp	r9, #0
   1853c:	bne	1859c <__assert_fail@plt+0x7398>
   18540:	mov	r0, r4
   18544:	str	r2, [r6]
   18548:	str	r1, [r6, #4]
   1854c:	add	sp, sp, #20
   18550:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   18554:	cmp	r4, #34	; 0x22
   18558:	bne	184e0 <__assert_fail@plt+0x72dc>
   1855c:	mov	r4, #1
   18560:	b	18528 <__assert_fail@plt+0x7324>
   18564:	ldr	r3, [sp, #56]	; 0x38
   18568:	cmp	r3, #0
   1856c:	beq	184e0 <__assert_fail@plt+0x72dc>
   18570:	ldrb	r1, [r8]
   18574:	cmp	r1, #0
   18578:	beq	184e0 <__assert_fail@plt+0x72dc>
   1857c:	mov	r0, r3
   18580:	bl	110cc <strchr@plt>
   18584:	cmp	r0, #0
   18588:	beq	184e0 <__assert_fail@plt+0x72dc>
   1858c:	ldrb	r9, [r8]
   18590:	mov	r2, #1
   18594:	mov	r3, #0
   18598:	strd	r2, [sp, #8]
   1859c:	mov	r1, r9
   185a0:	ldr	r0, [sp, #56]	; 0x38
   185a4:	bl	110cc <strchr@plt>
   185a8:	cmp	r0, #0
   185ac:	beq	189b4 <__assert_fail@plt+0x77b0>
   185b0:	sub	r3, r9, #69	; 0x45
   185b4:	cmp	r3, #47	; 0x2f
   185b8:	ldrls	pc, [pc, r3, lsl #2]
   185bc:	b	18680 <__assert_fail@plt+0x747c>
   185c0:	andeq	r8, r1, r0, ror r7
   185c4:	andeq	r8, r1, r0, lsl #13
   185c8:	andeq	r8, r1, r0, ror r7
   185cc:	andeq	r8, r1, r0, lsl #13
   185d0:	andeq	r8, r1, r0, lsl #13
   185d4:	andeq	r8, r1, r0, lsl #13
   185d8:	andeq	r8, r1, r0, ror r7
   185dc:	andeq	r8, r1, r0, lsl #13
   185e0:	andeq	r8, r1, r0, ror r7
   185e4:	andeq	r8, r1, r0, lsl #13
   185e8:	andeq	r8, r1, r0, lsl #13
   185ec:	andeq	r8, r1, r0, ror r7
   185f0:	andeq	r8, r1, r0, lsl #13
   185f4:	andeq	r8, r1, r0, lsl #13
   185f8:	andeq	r8, r1, r0, lsl #13
   185fc:	andeq	r8, r1, r0, ror r7
   18600:	andeq	r8, r1, r0, lsl #13
   18604:	andeq	r8, r1, r0, lsl #13
   18608:	andeq	r8, r1, r0, lsl #13
   1860c:	andeq	r8, r1, r0, lsl #13
   18610:	andeq	r8, r1, r0, ror r7
   18614:	andeq	r8, r1, r0, ror r7
   18618:	andeq	r8, r1, r0, lsl #13
   1861c:	andeq	r8, r1, r0, lsl #13
   18620:	andeq	r8, r1, r0, lsl #13
   18624:	andeq	r8, r1, r0, lsl #13
   18628:	andeq	r8, r1, r0, lsl #13
   1862c:	andeq	r8, r1, r0, lsl #13
   18630:	andeq	r8, r1, r0, lsl #13
   18634:	andeq	r8, r1, r0, lsl #13
   18638:	andeq	r8, r1, r0, lsl #13
   1863c:	andeq	r8, r1, r0, lsl #13
   18640:	andeq	r8, r1, r0, lsl #13
   18644:	andeq	r8, r1, r0, lsl #13
   18648:	andeq	r8, r1, r0, ror r7
   1864c:	andeq	r8, r1, r0, lsl #13
   18650:	andeq	r8, r1, r0, lsl #13
   18654:	andeq	r8, r1, r0, lsl #13
   18658:	andeq	r8, r1, r0, ror r7
   1865c:	andeq	r8, r1, r0, lsl #13
   18660:	andeq	r8, r1, r0, ror r7
   18664:	andeq	r8, r1, r0, lsl #13
   18668:	andeq	r8, r1, r0, lsl #13
   1866c:	andeq	r8, r1, r0, lsl #13
   18670:	andeq	r8, r1, r0, lsl #13
   18674:	andeq	r8, r1, r0, lsl #13
   18678:	andeq	r8, r1, r0, lsl #13
   1867c:	andeq	r8, r1, r0, ror r7
   18680:	mov	r7, #1
   18684:	mov	sl, #1024	; 0x400
   18688:	sub	r9, r9, #66	; 0x42
   1868c:	cmp	r9, #53	; 0x35
   18690:	ldrls	pc, [pc, r9, lsl #2]
   18694:	b	189b4 <__assert_fail@plt+0x77b0>
   18698:	andeq	r8, r1, r0, lsl #18
   1869c:			; <UNDEFINED> instruction: 0x000189b4
   186a0:			; <UNDEFINED> instruction: 0x000189b4
   186a4:	ldrdeq	r8, [r1], -r8	; <UNPREDICTABLE>
   186a8:			; <UNDEFINED> instruction: 0x000189b4
   186ac:			; <UNDEFINED> instruction: 0x000188b0
   186b0:			; <UNDEFINED> instruction: 0x000189b4
   186b4:			; <UNDEFINED> instruction: 0x000189b4
   186b8:			; <UNDEFINED> instruction: 0x000189b4
   186bc:	muleq	r1, r0, r8
   186c0:			; <UNDEFINED> instruction: 0x000189b4
   186c4:	andeq	r8, r1, ip, asr r9
   186c8:			; <UNDEFINED> instruction: 0x000189b4
   186cc:			; <UNDEFINED> instruction: 0x000189b4
   186d0:	andeq	r8, r1, r4, lsr r9
   186d4:			; <UNDEFINED> instruction: 0x000189b4
   186d8:			; <UNDEFINED> instruction: 0x000189b4
   186dc:			; <UNDEFINED> instruction: 0x000189b4
   186e0:	andeq	r8, r1, ip, lsl #19
   186e4:			; <UNDEFINED> instruction: 0x000189b4
   186e8:			; <UNDEFINED> instruction: 0x000189b4
   186ec:			; <UNDEFINED> instruction: 0x000189b4
   186f0:			; <UNDEFINED> instruction: 0x000189b4
   186f4:	andeq	r8, r1, r8, ror #16
   186f8:	andeq	r8, r1, r4, lsr r8
   186fc:			; <UNDEFINED> instruction: 0x000189b4
   18700:			; <UNDEFINED> instruction: 0x000189b4
   18704:			; <UNDEFINED> instruction: 0x000189b4
   18708:			; <UNDEFINED> instruction: 0x000189b4
   1870c:			; <UNDEFINED> instruction: 0x000189b4
   18710:			; <UNDEFINED> instruction: 0x000189b4
   18714:			; <UNDEFINED> instruction: 0x000189b4
   18718:	andeq	r8, r1, r0, lsl #16
   1871c:	strdeq	r8, [r1], -r0
   18720:			; <UNDEFINED> instruction: 0x000189b4
   18724:			; <UNDEFINED> instruction: 0x000189b4
   18728:			; <UNDEFINED> instruction: 0x000189b4
   1872c:			; <UNDEFINED> instruction: 0x000188b0
   18730:			; <UNDEFINED> instruction: 0x000189b4
   18734:			; <UNDEFINED> instruction: 0x000189b4
   18738:			; <UNDEFINED> instruction: 0x000189b4
   1873c:	muleq	r1, r0, r8
   18740:			; <UNDEFINED> instruction: 0x000189b4
   18744:	andeq	r8, r1, ip, asr r9
   18748:			; <UNDEFINED> instruction: 0x000189b4
   1874c:			; <UNDEFINED> instruction: 0x000189b4
   18750:			; <UNDEFINED> instruction: 0x000189b4
   18754:			; <UNDEFINED> instruction: 0x000189b4
   18758:			; <UNDEFINED> instruction: 0x000189b4
   1875c:			; <UNDEFINED> instruction: 0x000189b4
   18760:	andeq	r8, r1, ip, lsl #19
   18764:			; <UNDEFINED> instruction: 0x000189b4
   18768:			; <UNDEFINED> instruction: 0x000189b4
   1876c:	andeq	r8, r1, ip, lsr #15
   18770:	mov	r1, #48	; 0x30
   18774:	ldr	r0, [sp, #56]	; 0x38
   18778:	bl	110cc <strchr@plt>
   1877c:	cmp	r0, #0
   18780:	beq	18680 <__assert_fail@plt+0x747c>
   18784:	ldrb	r3, [r8, #1]
   18788:	cmp	r3, #68	; 0x44
   1878c:	beq	187a0 <__assert_fail@plt+0x759c>
   18790:	cmp	r3, #105	; 0x69
   18794:	beq	189c4 <__assert_fail@plt+0x77c0>
   18798:	cmp	r3, #66	; 0x42
   1879c:	bne	18680 <__assert_fail@plt+0x747c>
   187a0:	mov	r7, #2
   187a4:	mov	sl, #1000	; 0x3e8
   187a8:	b	18688 <__assert_fail@plt+0x7484>
   187ac:	ldrd	r2, [sp, #8]
   187b0:	cmp	r2, #0
   187b4:	sbcs	r1, r3, #0
   187b8:	blt	189dc <__assert_fail@plt+0x77d8>
   187bc:	adds	r2, r2, r2
   187c0:	adc	r3, r3, r3
   187c4:	mov	r1, r3
   187c8:	mov	r9, #0
   187cc:	str	r2, [sp, #8]
   187d0:	str	r3, [sp, #12]
   187d4:	add	r3, r8, r7
   187d8:	str	r3, [r5]
   187dc:	ldrb	r3, [r8, r7]
   187e0:	orr	r4, r4, r9
   187e4:	cmp	r3, #0
   187e8:	orrne	r4, r4, #2
   187ec:	b	18540 <__assert_fail@plt+0x733c>
   187f0:	ldr	r2, [sp, #8]
   187f4:	ldr	r1, [sp, #12]
   187f8:	mov	r9, #0
   187fc:	b	187d4 <__assert_fail@plt+0x75d0>
   18800:	ldrd	r2, [sp, #8]
   18804:	ldr	r1, [pc, #512]	; 18a0c <__assert_fail@plt+0x7808>
   18808:	mvn	r0, #0
   1880c:	cmp	r3, r1
   18810:	cmpeq	r2, r0
   18814:	bhi	189dc <__assert_fail@plt+0x77d8>
   18818:	lsl	r1, r3, #9
   1881c:	orr	r1, r1, r2, lsr #23
   18820:	lsl	r2, r2, #9
   18824:	str	r1, [sp, #12]
   18828:	str	r2, [sp, #8]
   1882c:	mov	r9, #0
   18830:	b	187d4 <__assert_fail@plt+0x75d0>
   18834:	mov	fp, #7
   18838:	mov	r9, #0
   1883c:	add	r8, sp, #8
   18840:	mov	r1, sl
   18844:	mov	r0, r8
   18848:	bl	183e0 <__assert_fail@plt+0x71dc>
   1884c:	subs	fp, fp, #1
   18850:	orr	r9, r9, r0
   18854:	bne	18840 <__assert_fail@plt+0x763c>
   18858:	ldr	r8, [r5]
   1885c:	ldr	r2, [sp, #8]
   18860:	ldr	r1, [sp, #12]
   18864:	b	187d4 <__assert_fail@plt+0x75d0>
   18868:	mov	fp, #8
   1886c:	mov	r9, #0
   18870:	add	r8, sp, fp
   18874:	mov	r1, sl
   18878:	mov	r0, r8
   1887c:	bl	183e0 <__assert_fail@plt+0x71dc>
   18880:	subs	fp, fp, #1
   18884:	orr	r9, r9, r0
   18888:	bne	18874 <__assert_fail@plt+0x7670>
   1888c:	b	18858 <__assert_fail@plt+0x7654>
   18890:	mov	r1, sl
   18894:	add	r0, sp, #8
   18898:	bl	183e0 <__assert_fail@plt+0x71dc>
   1889c:	ldr	r8, [r5]
   188a0:	ldr	r2, [sp, #8]
   188a4:	ldr	r1, [sp, #12]
   188a8:	mov	r9, r0
   188ac:	b	187d4 <__assert_fail@plt+0x75d0>
   188b0:	mov	fp, #3
   188b4:	mov	r9, #0
   188b8:	add	r8, sp, #8
   188bc:	mov	r1, sl
   188c0:	mov	r0, r8
   188c4:	bl	183e0 <__assert_fail@plt+0x71dc>
   188c8:	subs	fp, fp, #1
   188cc:	orr	r9, r9, r0
   188d0:	bne	188bc <__assert_fail@plt+0x76b8>
   188d4:	b	18858 <__assert_fail@plt+0x7654>
   188d8:	mov	fp, #6
   188dc:	mov	r9, #0
   188e0:	add	r8, sp, #8
   188e4:	mov	r1, sl
   188e8:	mov	r0, r8
   188ec:	bl	183e0 <__assert_fail@plt+0x71dc>
   188f0:	subs	fp, fp, #1
   188f4:	orr	r9, r9, r0
   188f8:	bne	188e4 <__assert_fail@plt+0x76e0>
   188fc:	b	18858 <__assert_fail@plt+0x7654>
   18900:	ldrd	r0, [sp, #8]
   18904:	ldr	r3, [pc, #260]	; 18a10 <__assert_fail@plt+0x780c>
   18908:	mvn	r2, #0
   1890c:	cmp	r1, r3
   18910:	cmpeq	r0, r2
   18914:	bhi	189dc <__assert_fail@plt+0x77d8>
   18918:	lsl	r1, r1, #10
   1891c:	orr	r1, r1, r0, lsr #22
   18920:	lsl	r2, r0, #10
   18924:	str	r1, [sp, #12]
   18928:	str	r2, [sp, #8]
   1892c:	mov	r9, #0
   18930:	b	187d4 <__assert_fail@plt+0x75d0>
   18934:	mov	fp, #5
   18938:	mov	r9, #0
   1893c:	add	r8, sp, #8
   18940:	mov	r1, sl
   18944:	mov	r0, r8
   18948:	bl	183e0 <__assert_fail@plt+0x71dc>
   1894c:	subs	fp, fp, #1
   18950:	orr	r9, r9, r0
   18954:	bne	18940 <__assert_fail@plt+0x773c>
   18958:	b	18858 <__assert_fail@plt+0x7654>
   1895c:	mov	r1, sl
   18960:	add	r0, sp, #8
   18964:	bl	183e0 <__assert_fail@plt+0x71dc>
   18968:	mov	r1, sl
   1896c:	mov	r9, r0
   18970:	add	r0, sp, #8
   18974:	bl	183e0 <__assert_fail@plt+0x71dc>
   18978:	ldr	r8, [r5]
   1897c:	ldr	r2, [sp, #8]
   18980:	ldr	r1, [sp, #12]
   18984:	orr	r9, r9, r0
   18988:	b	187d4 <__assert_fail@plt+0x75d0>
   1898c:	mov	fp, #4
   18990:	mov	r9, #0
   18994:	add	r8, sp, #8
   18998:	mov	r1, sl
   1899c:	mov	r0, r8
   189a0:	bl	183e0 <__assert_fail@plt+0x71dc>
   189a4:	subs	fp, fp, #1
   189a8:	orr	r9, r9, r0
   189ac:	bne	18998 <__assert_fail@plt+0x7794>
   189b0:	b	18858 <__assert_fail@plt+0x7654>
   189b4:	ldrd	r2, [sp, #8]
   189b8:	orr	r4, r4, #2
   189bc:	strd	r2, [r6]
   189c0:	b	184e4 <__assert_fail@plt+0x72e0>
   189c4:	ldrb	r7, [r8, #2]
   189c8:	mov	sl, #1024	; 0x400
   189cc:	cmp	r7, #66	; 0x42
   189d0:	movne	r7, #1
   189d4:	moveq	r7, #3
   189d8:	b	18688 <__assert_fail@plt+0x7484>
   189dc:	mvn	r1, #0
   189e0:	mvn	r0, #0
   189e4:	mvn	r2, #0
   189e8:	strd	r0, [sp, #8]
   189ec:	mov	r9, #1
   189f0:	mov	r1, r2
   189f4:	b	187d4 <__assert_fail@plt+0x75d0>
   189f8:	ldr	r3, [pc, #20]	; 18a14 <__assert_fail@plt+0x7810>
   189fc:	mov	r2, #85	; 0x55
   18a00:	ldr	r1, [pc, #16]	; 18a18 <__assert_fail@plt+0x7814>
   18a04:	ldr	r0, [pc, #16]	; 18a1c <__assert_fail@plt+0x7818>
   18a08:	bl	11204 <__assert_fail@plt>
   18a0c:	ldrshteq	pc, [pc], #-255	; <UNPREDICTABLE>
   18a10:	ldrshteq	pc, [pc], -pc	; <UNPREDICTABLE>
   18a14:	andeq	sl, r1, r8, asr pc
   18a18:	andeq	sl, r1, r4, ror #30
   18a1c:	andeq	sl, r1, r4, ror pc
   18a20:	cmp	r1, #0
   18a24:	cmpne	r0, #0
   18a28:	moveq	r1, #1
   18a2c:	moveq	r0, r1
   18a30:	umull	r2, r3, r0, r1
   18a34:	adds	r3, r3, #0
   18a38:	movne	r3, #1
   18a3c:	cmp	r2, #0
   18a40:	blt	18a50 <__assert_fail@plt+0x784c>
   18a44:	cmp	r3, #0
   18a48:	bne	18a50 <__assert_fail@plt+0x784c>
   18a4c:	b	10f10 <calloc@plt>
   18a50:	push	{r4, lr}
   18a54:	bl	110d8 <__errno_location@plt>
   18a58:	mov	r3, #12
   18a5c:	str	r3, [r0]
   18a60:	mov	r0, #0
   18a64:	pop	{r4, pc}
   18a68:	cmp	r0, #0
   18a6c:	moveq	r0, #1
   18a70:	cmp	r0, #0
   18a74:	blt	18a7c <__assert_fail@plt+0x7878>
   18a78:	b	11060 <malloc@plt>
   18a7c:	push	{r4, lr}
   18a80:	bl	110d8 <__errno_location@plt>
   18a84:	mov	r3, #12
   18a88:	str	r3, [r0]
   18a8c:	mov	r0, #0
   18a90:	pop	{r4, pc}
   18a94:	cmp	r0, #0
   18a98:	beq	18abc <__assert_fail@plt+0x78b8>
   18a9c:	cmp	r1, #0
   18aa0:	push	{lr}		; (str lr, [sp, #-4]!)
   18aa4:	sub	sp, sp, #12
   18aa8:	beq	18ac4 <__assert_fail@plt+0x78c0>
   18aac:	blt	18adc <__assert_fail@plt+0x78d8>
   18ab0:	add	sp, sp, #12
   18ab4:	pop	{lr}		; (ldr lr, [sp], #4)
   18ab8:	b	10fd0 <realloc@plt>
   18abc:	mov	r0, r1
   18ac0:	b	18a68 <__assert_fail@plt+0x7864>
   18ac4:	str	r1, [sp, #4]
   18ac8:	bl	154d0 <__assert_fail@plt+0x42cc>
   18acc:	ldr	r3, [sp, #4]
   18ad0:	mov	r0, r3
   18ad4:	add	sp, sp, #12
   18ad8:	pop	{pc}		; (ldr pc, [sp], #4)
   18adc:	bl	110d8 <__errno_location@plt>
   18ae0:	mov	r2, #12
   18ae4:	mov	r3, #0
   18ae8:	str	r2, [r0]
   18aec:	b	18ad0 <__assert_fail@plt+0x78cc>
   18af0:	push	{r4, r5, r6, lr}
   18af4:	mov	r4, r0
   18af8:	bl	11024 <__fpending@plt>
   18afc:	ldr	r5, [r4]
   18b00:	and	r5, r5, #32
   18b04:	mov	r6, r0
   18b08:	mov	r0, r4
   18b0c:	bl	153d0 <__assert_fail@plt+0x41cc>
   18b10:	cmp	r5, #0
   18b14:	mov	r4, r0
   18b18:	bne	18b38 <__assert_fail@plt+0x7934>
   18b1c:	cmp	r0, #0
   18b20:	beq	18b30 <__assert_fail@plt+0x792c>
   18b24:	cmp	r6, #0
   18b28:	beq	18b54 <__assert_fail@plt+0x7950>
   18b2c:	mvn	r4, #0
   18b30:	mov	r0, r4
   18b34:	pop	{r4, r5, r6, pc}
   18b38:	cmp	r0, #0
   18b3c:	bne	18b2c <__assert_fail@plt+0x7928>
   18b40:	bl	110d8 <__errno_location@plt>
   18b44:	str	r4, [r0]
   18b48:	mvn	r4, #0
   18b4c:	mov	r0, r4
   18b50:	pop	{r4, r5, r6, pc}
   18b54:	bl	110d8 <__errno_location@plt>
   18b58:	ldr	r4, [r0]
   18b5c:	subs	r4, r4, #9
   18b60:	mvnne	r4, #0
   18b64:	mov	r0, r4
   18b68:	pop	{r4, r5, r6, pc}
   18b6c:	push	{r4, lr}
   18b70:	mov	r0, #14
   18b74:	bl	1118c <nl_langinfo@plt>
   18b78:	cmp	r0, #0
   18b7c:	beq	18b94 <__assert_fail@plt+0x7990>
   18b80:	ldrb	r2, [r0]
   18b84:	ldr	r3, [pc, #16]	; 18b9c <__assert_fail@plt+0x7998>
   18b88:	cmp	r2, #0
   18b8c:	moveq	r0, r3
   18b90:	pop	{r4, pc}
   18b94:	ldr	r0, [pc]	; 18b9c <__assert_fail@plt+0x7998>
   18b98:	pop	{r4, pc}
   18b9c:	muleq	r1, ip, pc	; <UNPREDICTABLE>
   18ba0:	push	{r4, r5, r6, r7, lr}
   18ba4:	subs	r6, r0, #0
   18ba8:	sub	sp, sp, #12
   18bac:	addeq	r6, sp, #4
   18bb0:	mov	r0, r6
   18bb4:	mov	r5, r2
   18bb8:	mov	r7, r1
   18bbc:	bl	11030 <mbrtowc@plt>
   18bc0:	cmp	r5, #0
   18bc4:	cmnne	r0, #3
   18bc8:	mov	r4, r0
   18bcc:	bls	18be8 <__assert_fail@plt+0x79e4>
   18bd0:	mov	r0, #0
   18bd4:	bl	18c40 <__assert_fail@plt+0x7a3c>
   18bd8:	cmp	r0, #0
   18bdc:	moveq	r4, #1
   18be0:	ldrbeq	r3, [r7]
   18be4:	streq	r3, [r6]
   18be8:	mov	r0, r4
   18bec:	add	sp, sp, #12
   18bf0:	pop	{r4, r5, r6, r7, pc}
   18bf4:	push	{r4, r5, r6, lr}
   18bf8:	subs	r4, r2, #0
   18bfc:	mov	r6, r0
   18c00:	mov	r5, r1
   18c04:	beq	18c30 <__assert_fail@plt+0x7a2c>
   18c08:	mov	r1, r4
   18c0c:	mvn	r0, #0
   18c10:	bl	18d34 <__assert_fail@plt+0x7b30>
   18c14:	cmp	r0, r5
   18c18:	bcs	18c30 <__assert_fail@plt+0x7a2c>
   18c1c:	bl	110d8 <__errno_location@plt>
   18c20:	mov	r3, #12
   18c24:	str	r3, [r0]
   18c28:	mov	r0, #0
   18c2c:	pop	{r4, r5, r6, pc}
   18c30:	mul	r1, r5, r4
   18c34:	mov	r0, r6
   18c38:	pop	{r4, r5, r6, lr}
   18c3c:	b	18a94 <__assert_fail@plt+0x7890>
   18c40:	push	{lr}		; (str lr, [sp, #-4]!)
   18c44:	sub	sp, sp, #268	; 0x10c
   18c48:	add	r1, sp, #4
   18c4c:	ldr	r2, [pc, #60]	; 18c90 <__assert_fail@plt+0x7a8c>
   18c50:	bl	18c9c <__assert_fail@plt+0x7a98>
   18c54:	cmp	r0, #0
   18c58:	movne	r0, #0
   18c5c:	bne	18c88 <__assert_fail@plt+0x7a84>
   18c60:	ldr	r1, [pc, #44]	; 18c94 <__assert_fail@plt+0x7a90>
   18c64:	add	r0, sp, #4
   18c68:	bl	10f34 <strcmp@plt>
   18c6c:	cmp	r0, #0
   18c70:	beq	18c88 <__assert_fail@plt+0x7a84>
   18c74:	add	r0, sp, #4
   18c78:	ldr	r1, [pc, #24]	; 18c98 <__assert_fail@plt+0x7a94>
   18c7c:	bl	10f34 <strcmp@plt>
   18c80:	adds	r0, r0, #0
   18c84:	movne	r0, #1
   18c88:	add	sp, sp, #268	; 0x10c
   18c8c:	pop	{pc}		; (ldr pc, [sp], #4)
   18c90:	andeq	r0, r0, r1, lsl #2
   18c94:	andeq	sl, r1, r4, lsr #31
   18c98:	andeq	sl, r1, r8, lsr #31
   18c9c:	push	{r4, r5, r6, lr}
   18ca0:	mov	r5, r1
   18ca4:	mov	r1, #0
   18ca8:	mov	r4, r2
   18cac:	bl	11174 <setlocale@plt>
   18cb0:	subs	r6, r0, #0
   18cb4:	beq	18d10 <__assert_fail@plt+0x7b0c>
   18cb8:	bl	110c0 <strlen@plt>
   18cbc:	cmp	r4, r0
   18cc0:	bhi	18cf8 <__assert_fail@plt+0x7af4>
   18cc4:	cmp	r4, #0
   18cc8:	bne	18cd4 <__assert_fail@plt+0x7ad0>
   18ccc:	mov	r0, #34	; 0x22
   18cd0:	pop	{r4, r5, r6, pc}
   18cd4:	sub	r4, r4, #1
   18cd8:	mov	r1, r6
   18cdc:	mov	r2, r4
   18ce0:	mov	r0, r5
   18ce4:	bl	10f70 <memcpy@plt>
   18ce8:	mov	r3, #0
   18cec:	strb	r3, [r5, r4]
   18cf0:	mov	r0, #34	; 0x22
   18cf4:	pop	{r4, r5, r6, pc}
   18cf8:	add	r2, r0, #1
   18cfc:	mov	r1, r6
   18d00:	mov	r0, r5
   18d04:	bl	10f70 <memcpy@plt>
   18d08:	mov	r0, #0
   18d0c:	pop	{r4, r5, r6, pc}
   18d10:	cmp	r4, #0
   18d14:	beq	18d24 <__assert_fail@plt+0x7b20>
   18d18:	strb	r6, [r5]
   18d1c:	mov	r0, #22
   18d20:	pop	{r4, r5, r6, pc}
   18d24:	mov	r0, #22
   18d28:	pop	{r4, r5, r6, pc}
   18d2c:	mov	r1, #0
   18d30:	b	11174 <setlocale@plt>
   18d34:	subs	r2, r1, #1
   18d38:	bxeq	lr
   18d3c:	bcc	18f14 <__assert_fail@plt+0x7d10>
   18d40:	cmp	r0, r1
   18d44:	bls	18ef8 <__assert_fail@plt+0x7cf4>
   18d48:	tst	r1, r2
   18d4c:	beq	18f04 <__assert_fail@plt+0x7d00>
   18d50:	clz	r3, r0
   18d54:	clz	r2, r1
   18d58:	sub	r3, r2, r3
   18d5c:	rsbs	r3, r3, #31
   18d60:	addne	r3, r3, r3, lsl #1
   18d64:	mov	r2, #0
   18d68:	addne	pc, pc, r3, lsl #2
   18d6c:	nop			; (mov r0, r0)
   18d70:	cmp	r0, r1, lsl #31
   18d74:	adc	r2, r2, r2
   18d78:	subcs	r0, r0, r1, lsl #31
   18d7c:	cmp	r0, r1, lsl #30
   18d80:	adc	r2, r2, r2
   18d84:	subcs	r0, r0, r1, lsl #30
   18d88:	cmp	r0, r1, lsl #29
   18d8c:	adc	r2, r2, r2
   18d90:	subcs	r0, r0, r1, lsl #29
   18d94:	cmp	r0, r1, lsl #28
   18d98:	adc	r2, r2, r2
   18d9c:	subcs	r0, r0, r1, lsl #28
   18da0:	cmp	r0, r1, lsl #27
   18da4:	adc	r2, r2, r2
   18da8:	subcs	r0, r0, r1, lsl #27
   18dac:	cmp	r0, r1, lsl #26
   18db0:	adc	r2, r2, r2
   18db4:	subcs	r0, r0, r1, lsl #26
   18db8:	cmp	r0, r1, lsl #25
   18dbc:	adc	r2, r2, r2
   18dc0:	subcs	r0, r0, r1, lsl #25
   18dc4:	cmp	r0, r1, lsl #24
   18dc8:	adc	r2, r2, r2
   18dcc:	subcs	r0, r0, r1, lsl #24
   18dd0:	cmp	r0, r1, lsl #23
   18dd4:	adc	r2, r2, r2
   18dd8:	subcs	r0, r0, r1, lsl #23
   18ddc:	cmp	r0, r1, lsl #22
   18de0:	adc	r2, r2, r2
   18de4:	subcs	r0, r0, r1, lsl #22
   18de8:	cmp	r0, r1, lsl #21
   18dec:	adc	r2, r2, r2
   18df0:	subcs	r0, r0, r1, lsl #21
   18df4:	cmp	r0, r1, lsl #20
   18df8:	adc	r2, r2, r2
   18dfc:	subcs	r0, r0, r1, lsl #20
   18e00:	cmp	r0, r1, lsl #19
   18e04:	adc	r2, r2, r2
   18e08:	subcs	r0, r0, r1, lsl #19
   18e0c:	cmp	r0, r1, lsl #18
   18e10:	adc	r2, r2, r2
   18e14:	subcs	r0, r0, r1, lsl #18
   18e18:	cmp	r0, r1, lsl #17
   18e1c:	adc	r2, r2, r2
   18e20:	subcs	r0, r0, r1, lsl #17
   18e24:	cmp	r0, r1, lsl #16
   18e28:	adc	r2, r2, r2
   18e2c:	subcs	r0, r0, r1, lsl #16
   18e30:	cmp	r0, r1, lsl #15
   18e34:	adc	r2, r2, r2
   18e38:	subcs	r0, r0, r1, lsl #15
   18e3c:	cmp	r0, r1, lsl #14
   18e40:	adc	r2, r2, r2
   18e44:	subcs	r0, r0, r1, lsl #14
   18e48:	cmp	r0, r1, lsl #13
   18e4c:	adc	r2, r2, r2
   18e50:	subcs	r0, r0, r1, lsl #13
   18e54:	cmp	r0, r1, lsl #12
   18e58:	adc	r2, r2, r2
   18e5c:	subcs	r0, r0, r1, lsl #12
   18e60:	cmp	r0, r1, lsl #11
   18e64:	adc	r2, r2, r2
   18e68:	subcs	r0, r0, r1, lsl #11
   18e6c:	cmp	r0, r1, lsl #10
   18e70:	adc	r2, r2, r2
   18e74:	subcs	r0, r0, r1, lsl #10
   18e78:	cmp	r0, r1, lsl #9
   18e7c:	adc	r2, r2, r2
   18e80:	subcs	r0, r0, r1, lsl #9
   18e84:	cmp	r0, r1, lsl #8
   18e88:	adc	r2, r2, r2
   18e8c:	subcs	r0, r0, r1, lsl #8
   18e90:	cmp	r0, r1, lsl #7
   18e94:	adc	r2, r2, r2
   18e98:	subcs	r0, r0, r1, lsl #7
   18e9c:	cmp	r0, r1, lsl #6
   18ea0:	adc	r2, r2, r2
   18ea4:	subcs	r0, r0, r1, lsl #6
   18ea8:	cmp	r0, r1, lsl #5
   18eac:	adc	r2, r2, r2
   18eb0:	subcs	r0, r0, r1, lsl #5
   18eb4:	cmp	r0, r1, lsl #4
   18eb8:	adc	r2, r2, r2
   18ebc:	subcs	r0, r0, r1, lsl #4
   18ec0:	cmp	r0, r1, lsl #3
   18ec4:	adc	r2, r2, r2
   18ec8:	subcs	r0, r0, r1, lsl #3
   18ecc:	cmp	r0, r1, lsl #2
   18ed0:	adc	r2, r2, r2
   18ed4:	subcs	r0, r0, r1, lsl #2
   18ed8:	cmp	r0, r1, lsl #1
   18edc:	adc	r2, r2, r2
   18ee0:	subcs	r0, r0, r1, lsl #1
   18ee4:	cmp	r0, r1
   18ee8:	adc	r2, r2, r2
   18eec:	subcs	r0, r0, r1
   18ef0:	mov	r0, r2
   18ef4:	bx	lr
   18ef8:	moveq	r0, #1
   18efc:	movne	r0, #0
   18f00:	bx	lr
   18f04:	clz	r2, r1
   18f08:	rsb	r2, r2, #31
   18f0c:	lsr	r0, r0, r2
   18f10:	bx	lr
   18f14:	cmp	r0, #0
   18f18:	mvnne	r0, #0
   18f1c:	b	191bc <__assert_fail@plt+0x7fb8>
   18f20:	cmp	r1, #0
   18f24:	beq	18f14 <__assert_fail@plt+0x7d10>
   18f28:	push	{r0, r1, lr}
   18f2c:	bl	18d34 <__assert_fail@plt+0x7b30>
   18f30:	pop	{r1, r2, lr}
   18f34:	mul	r3, r2, r0
   18f38:	sub	r1, r1, r3
   18f3c:	bx	lr
   18f40:	cmp	r1, #0
   18f44:	beq	19150 <__assert_fail@plt+0x7f4c>
   18f48:	eor	ip, r0, r1
   18f4c:	rsbmi	r1, r1, #0
   18f50:	subs	r2, r1, #1
   18f54:	beq	1911c <__assert_fail@plt+0x7f18>
   18f58:	movs	r3, r0
   18f5c:	rsbmi	r3, r0, #0
   18f60:	cmp	r3, r1
   18f64:	bls	19128 <__assert_fail@plt+0x7f24>
   18f68:	tst	r1, r2
   18f6c:	beq	19138 <__assert_fail@plt+0x7f34>
   18f70:	clz	r2, r3
   18f74:	clz	r0, r1
   18f78:	sub	r2, r0, r2
   18f7c:	rsbs	r2, r2, #31
   18f80:	addne	r2, r2, r2, lsl #1
   18f84:	mov	r0, #0
   18f88:	addne	pc, pc, r2, lsl #2
   18f8c:	nop			; (mov r0, r0)
   18f90:	cmp	r3, r1, lsl #31
   18f94:	adc	r0, r0, r0
   18f98:	subcs	r3, r3, r1, lsl #31
   18f9c:	cmp	r3, r1, lsl #30
   18fa0:	adc	r0, r0, r0
   18fa4:	subcs	r3, r3, r1, lsl #30
   18fa8:	cmp	r3, r1, lsl #29
   18fac:	adc	r0, r0, r0
   18fb0:	subcs	r3, r3, r1, lsl #29
   18fb4:	cmp	r3, r1, lsl #28
   18fb8:	adc	r0, r0, r0
   18fbc:	subcs	r3, r3, r1, lsl #28
   18fc0:	cmp	r3, r1, lsl #27
   18fc4:	adc	r0, r0, r0
   18fc8:	subcs	r3, r3, r1, lsl #27
   18fcc:	cmp	r3, r1, lsl #26
   18fd0:	adc	r0, r0, r0
   18fd4:	subcs	r3, r3, r1, lsl #26
   18fd8:	cmp	r3, r1, lsl #25
   18fdc:	adc	r0, r0, r0
   18fe0:	subcs	r3, r3, r1, lsl #25
   18fe4:	cmp	r3, r1, lsl #24
   18fe8:	adc	r0, r0, r0
   18fec:	subcs	r3, r3, r1, lsl #24
   18ff0:	cmp	r3, r1, lsl #23
   18ff4:	adc	r0, r0, r0
   18ff8:	subcs	r3, r3, r1, lsl #23
   18ffc:	cmp	r3, r1, lsl #22
   19000:	adc	r0, r0, r0
   19004:	subcs	r3, r3, r1, lsl #22
   19008:	cmp	r3, r1, lsl #21
   1900c:	adc	r0, r0, r0
   19010:	subcs	r3, r3, r1, lsl #21
   19014:	cmp	r3, r1, lsl #20
   19018:	adc	r0, r0, r0
   1901c:	subcs	r3, r3, r1, lsl #20
   19020:	cmp	r3, r1, lsl #19
   19024:	adc	r0, r0, r0
   19028:	subcs	r3, r3, r1, lsl #19
   1902c:	cmp	r3, r1, lsl #18
   19030:	adc	r0, r0, r0
   19034:	subcs	r3, r3, r1, lsl #18
   19038:	cmp	r3, r1, lsl #17
   1903c:	adc	r0, r0, r0
   19040:	subcs	r3, r3, r1, lsl #17
   19044:	cmp	r3, r1, lsl #16
   19048:	adc	r0, r0, r0
   1904c:	subcs	r3, r3, r1, lsl #16
   19050:	cmp	r3, r1, lsl #15
   19054:	adc	r0, r0, r0
   19058:	subcs	r3, r3, r1, lsl #15
   1905c:	cmp	r3, r1, lsl #14
   19060:	adc	r0, r0, r0
   19064:	subcs	r3, r3, r1, lsl #14
   19068:	cmp	r3, r1, lsl #13
   1906c:	adc	r0, r0, r0
   19070:	subcs	r3, r3, r1, lsl #13
   19074:	cmp	r3, r1, lsl #12
   19078:	adc	r0, r0, r0
   1907c:	subcs	r3, r3, r1, lsl #12
   19080:	cmp	r3, r1, lsl #11
   19084:	adc	r0, r0, r0
   19088:	subcs	r3, r3, r1, lsl #11
   1908c:	cmp	r3, r1, lsl #10
   19090:	adc	r0, r0, r0
   19094:	subcs	r3, r3, r1, lsl #10
   19098:	cmp	r3, r1, lsl #9
   1909c:	adc	r0, r0, r0
   190a0:	subcs	r3, r3, r1, lsl #9
   190a4:	cmp	r3, r1, lsl #8
   190a8:	adc	r0, r0, r0
   190ac:	subcs	r3, r3, r1, lsl #8
   190b0:	cmp	r3, r1, lsl #7
   190b4:	adc	r0, r0, r0
   190b8:	subcs	r3, r3, r1, lsl #7
   190bc:	cmp	r3, r1, lsl #6
   190c0:	adc	r0, r0, r0
   190c4:	subcs	r3, r3, r1, lsl #6
   190c8:	cmp	r3, r1, lsl #5
   190cc:	adc	r0, r0, r0
   190d0:	subcs	r3, r3, r1, lsl #5
   190d4:	cmp	r3, r1, lsl #4
   190d8:	adc	r0, r0, r0
   190dc:	subcs	r3, r3, r1, lsl #4
   190e0:	cmp	r3, r1, lsl #3
   190e4:	adc	r0, r0, r0
   190e8:	subcs	r3, r3, r1, lsl #3
   190ec:	cmp	r3, r1, lsl #2
   190f0:	adc	r0, r0, r0
   190f4:	subcs	r3, r3, r1, lsl #2
   190f8:	cmp	r3, r1, lsl #1
   190fc:	adc	r0, r0, r0
   19100:	subcs	r3, r3, r1, lsl #1
   19104:	cmp	r3, r1
   19108:	adc	r0, r0, r0
   1910c:	subcs	r3, r3, r1
   19110:	cmp	ip, #0
   19114:	rsbmi	r0, r0, #0
   19118:	bx	lr
   1911c:	teq	ip, r0
   19120:	rsbmi	r0, r0, #0
   19124:	bx	lr
   19128:	movcc	r0, #0
   1912c:	asreq	r0, ip, #31
   19130:	orreq	r0, r0, #1
   19134:	bx	lr
   19138:	clz	r2, r1
   1913c:	rsb	r2, r2, #31
   19140:	cmp	ip, #0
   19144:	lsr	r0, r3, r2
   19148:	rsbmi	r0, r0, #0
   1914c:	bx	lr
   19150:	cmp	r0, #0
   19154:	mvngt	r0, #-2147483648	; 0x80000000
   19158:	movlt	r0, #-2147483648	; 0x80000000
   1915c:	b	191bc <__assert_fail@plt+0x7fb8>
   19160:	cmp	r1, #0
   19164:	beq	19150 <__assert_fail@plt+0x7f4c>
   19168:	push	{r0, r1, lr}
   1916c:	bl	18f48 <__assert_fail@plt+0x7d44>
   19170:	pop	{r1, r2, lr}
   19174:	mul	r3, r2, r0
   19178:	sub	r1, r1, r3
   1917c:	bx	lr
   19180:	cmp	r3, #0
   19184:	cmpeq	r2, #0
   19188:	bne	191a0 <__assert_fail@plt+0x7f9c>
   1918c:	cmp	r1, #0
   19190:	cmpeq	r0, #0
   19194:	mvnne	r1, #0
   19198:	mvnne	r0, #0
   1919c:	b	191bc <__assert_fail@plt+0x7fb8>
   191a0:	sub	sp, sp, #8
   191a4:	push	{sp, lr}
   191a8:	bl	191cc <__assert_fail@plt+0x7fc8>
   191ac:	ldr	lr, [sp, #4]
   191b0:	add	sp, sp, #8
   191b4:	pop	{r2, r3}
   191b8:	bx	lr
   191bc:	push	{r1, lr}
   191c0:	mov	r0, #8
   191c4:	bl	10f28 <raise@plt>
   191c8:	pop	{r1, pc}
   191cc:	cmp	r1, r3
   191d0:	push	{r4, r5, r6, r7, r8, r9, lr}
   191d4:	cmpeq	r0, r2
   191d8:	mov	r4, r0
   191dc:	mov	r5, r1
   191e0:	ldr	r9, [sp, #28]
   191e4:	movcc	r0, #0
   191e8:	movcc	r1, #0
   191ec:	bcc	192e4 <__assert_fail@plt+0x80e0>
   191f0:	cmp	r3, #0
   191f4:	clzeq	ip, r2
   191f8:	clzne	ip, r3
   191fc:	addeq	ip, ip, #32
   19200:	cmp	r5, #0
   19204:	clzeq	r1, r4
   19208:	addeq	r1, r1, #32
   1920c:	clzne	r1, r5
   19210:	sub	ip, ip, r1
   19214:	sub	lr, ip, #32
   19218:	lsl	r7, r3, ip
   1921c:	rsb	r8, ip, #32
   19220:	orr	r7, r7, r2, lsl lr
   19224:	orr	r7, r7, r2, lsr r8
   19228:	lsl	r6, r2, ip
   1922c:	cmp	r5, r7
   19230:	cmpeq	r4, r6
   19234:	movcc	r0, #0
   19238:	movcc	r1, #0
   1923c:	bcc	19258 <__assert_fail@plt+0x8054>
   19240:	mov	r3, #1
   19244:	subs	r4, r4, r6
   19248:	lsl	r1, r3, lr
   1924c:	lsl	r0, r3, ip
   19250:	orr	r1, r1, r3, lsr r8
   19254:	sbc	r5, r5, r7
   19258:	cmp	ip, #0
   1925c:	beq	192e4 <__assert_fail@plt+0x80e0>
   19260:	lsrs	r3, r7, #1
   19264:	rrx	r2, r6
   19268:	mov	r6, ip
   1926c:	b	19290 <__assert_fail@plt+0x808c>
   19270:	subs	r4, r4, r2
   19274:	sbc	r5, r5, r3
   19278:	adds	r4, r4, r4
   1927c:	adc	r5, r5, r5
   19280:	adds	r4, r4, #1
   19284:	adc	r5, r5, #0
   19288:	subs	r6, r6, #1
   1928c:	beq	192ac <__assert_fail@plt+0x80a8>
   19290:	cmp	r5, r3
   19294:	cmpeq	r4, r2
   19298:	bcs	19270 <__assert_fail@plt+0x806c>
   1929c:	adds	r4, r4, r4
   192a0:	adc	r5, r5, r5
   192a4:	subs	r6, r6, #1
   192a8:	bne	19290 <__assert_fail@plt+0x808c>
   192ac:	lsr	r6, r4, ip
   192b0:	lsr	r7, r5, ip
   192b4:	orr	r6, r6, r5, lsl r8
   192b8:	adds	r2, r0, r4
   192bc:	orr	r6, r6, r5, lsr lr
   192c0:	adc	r3, r1, r5
   192c4:	lsl	r1, r7, ip
   192c8:	orr	r1, r1, r6, lsl lr
   192cc:	lsl	r0, r6, ip
   192d0:	orr	r1, r1, r6, lsr r8
   192d4:	subs	r0, r2, r0
   192d8:	mov	r4, r6
   192dc:	mov	r5, r7
   192e0:	sbc	r1, r3, r1
   192e4:	cmp	r9, #0
   192e8:	popeq	{r4, r5, r6, r7, r8, r9, pc}
   192ec:	strd	r4, [r9]
   192f0:	pop	{r4, r5, r6, r7, r8, r9, pc}
   192f4:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   192f8:	mov	r7, r0
   192fc:	ldr	r6, [pc, #72]	; 1934c <__assert_fail@plt+0x8148>
   19300:	ldr	r5, [pc, #72]	; 19350 <__assert_fail@plt+0x814c>
   19304:	add	r6, pc, r6
   19308:	add	r5, pc, r5
   1930c:	sub	r6, r6, r5
   19310:	mov	r8, r1
   19314:	mov	r9, r2
   19318:	bl	10ef0 <calloc@plt-0x20>
   1931c:	asrs	r6, r6, #2
   19320:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   19324:	mov	r4, #0
   19328:	add	r4, r4, #1
   1932c:	ldr	r3, [r5], #4
   19330:	mov	r2, r9
   19334:	mov	r1, r8
   19338:	mov	r0, r7
   1933c:	blx	r3
   19340:	cmp	r6, r4
   19344:	bne	19328 <__assert_fail@plt+0x8124>
   19348:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   1934c:	andeq	r2, r1, r4, lsl #24
   19350:	strdeq	r2, [r1], -ip
   19354:	bx	lr
   19358:	ldr	r3, [pc, #12]	; 1936c <__assert_fail@plt+0x8168>
   1935c:	mov	r1, #0
   19360:	add	r3, pc, r3
   19364:	ldr	r2, [r3]
   19368:	b	110f0 <__cxa_atexit@plt>
   1936c:	andeq	r2, r1, ip, lsr #27

Disassembly of section .fini:

00019370 <.fini>:
   19370:	push	{r3, lr}
   19374:	pop	{r3, pc}
