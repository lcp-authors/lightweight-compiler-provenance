
../repos/dvidelabs-flatcc-3b39ef7/test/json_test/test_basic_parse:     file format elf32-littlearm


Disassembly of section .init:

00012404 <.init>:
   12404:	push	{r3, lr}
   12408:	bl	126a0 <_start@@Base+0x3c>
   1240c:	pop	{r3, pc}

Disassembly of section .plt:

00012410 <free@plt-0x14>:
   12410:	push	{lr}		; (str lr, [sp, #-4]!)
   12414:	ldr	lr, [pc, #4]	; 12420 <free@plt-0x4>
   12418:	add	lr, pc, lr
   1241c:	ldr	pc, [lr, #8]!
   12420:	andeq	r0, r2, r0, ror #23

00012424 <free@plt>:
   12424:	add	ip, pc, #0, 12
   12428:	add	ip, ip, #32, 20	; 0x20000
   1242c:	ldr	pc, [ip, #3040]!	; 0xbe0

00012430 <memcpy@plt>:
   12430:	add	ip, pc, #0, 12
   12434:	add	ip, ip, #32, 20	; 0x20000
   12438:	ldr	pc, [ip, #3032]!	; 0xbd8

0001243c <memcmp@plt>:
   1243c:	add	ip, pc, #0, 12
   12440:	add	ip, ip, #32, 20	; 0x20000
   12444:	ldr	pc, [ip, #3024]!	; 0xbd0

00012448 <realloc@plt>:
   12448:	add	ip, pc, #0, 12
   1244c:	add	ip, ip, #32, 20	; 0x20000
   12450:	ldr	pc, [ip, #3016]!	; 0xbc8

00012454 <fwrite@plt>:
   12454:	add	ip, pc, #0, 12
   12458:	add	ip, ip, #32, 20	; 0x20000
   1245c:	ldr	pc, [ip, #3008]!	; 0xbc0

00012460 <malloc@plt>:
   12460:	add	ip, pc, #0, 12
   12464:	add	ip, ip, #32, 20	; 0x20000
   12468:	ldr	pc, [ip, #3000]!	; 0xbb8

0001246c <__libc_start_main@plt>:
   1246c:	add	ip, pc, #0, 12
   12470:	add	ip, ip, #32, 20	; 0x20000
   12474:	ldr	pc, [ip, #2992]!	; 0xbb0

00012478 <__gmon_start__@plt>:
   12478:	add	ip, pc, #0, 12
   1247c:	add	ip, ip, #32, 20	; 0x20000
   12480:	ldr	pc, [ip, #2984]!	; 0xba8

00012484 <strlen@plt>:
   12484:	add	ip, pc, #0, 12
   12488:	add	ip, ip, #32, 20	; 0x20000
   1248c:	ldr	pc, [ip, #2976]!	; 0xba0

00012490 <fprintf@plt>:
   12490:	add	ip, pc, #0, 12
   12494:	add	ip, ip, #32, 20	; 0x20000
   12498:	ldr	pc, [ip, #2968]!	; 0xb98

0001249c <posix_memalign@plt>:
   1249c:	add	ip, pc, #0, 12
   124a0:	add	ip, ip, #32, 20	; 0x20000
   124a4:	ldr	pc, [ip, #2960]!	; 0xb90

000124a8 <memset@plt>:
   124a8:	add	ip, pc, #0, 12
   124ac:	add	ip, ip, #32, 20	; 0x20000
   124b0:	ldr	pc, [ip, #2952]!	; 0xb88

000124b4 <strtod@plt>:
   124b4:	add	ip, pc, #0, 12
   124b8:	add	ip, ip, #32, 20	; 0x20000
   124bc:	ldr	pc, [ip, #2944]!	; 0xb80

000124c0 <memchr@plt>:
   124c0:	add	ip, pc, #0, 12
   124c4:	add	ip, ip, #32, 20	; 0x20000
   124c8:	ldr	pc, [ip, #2936]!	; 0xb78

000124cc <abort@plt>:
   124cc:	add	ip, pc, #0, 12
   124d0:	add	ip, ip, #32, 20	; 0x20000
   124d4:	ldr	pc, [ip, #2928]!	; 0xb70

000124d8 <__assert_fail@plt>:
   124d8:	add	ip, pc, #0, 12
   124dc:	add	ip, ip, #32, 20	; 0x20000
   124e0:	ldr	pc, [ip, #2920]!	; 0xb68

Disassembly of section .text:

000124e8 <main@@Base-0x134>:
   124e8:	push	{r4, lr}
   124ec:	mov	r2, #308	; 0x134
   124f0:	ldr	r3, [pc, #8]	; 12500 <__assert_fail@plt+0x28>
   124f4:	ldr	r1, [pc, #8]	; 12504 <__assert_fail@plt+0x2c>
   124f8:	ldr	r0, [pc, #8]	; 12508 <__assert_fail@plt+0x30>
   124fc:	bl	124d8 <__assert_fail@plt>
   12500:	andeq	r0, r2, r4, lsr sp
   12504:	andeq	r1, r2, r4, lsl #9
   12508:	andeq	r1, r2, r4, asr #10
   1250c:	push	{r4, lr}
   12510:	ldr	r3, [pc, #12]	; 12524 <__assert_fail@plt+0x4c>
   12514:	ldr	r2, [pc, #12]	; 12528 <__assert_fail@plt+0x50>
   12518:	ldr	r1, [pc, #12]	; 1252c <__assert_fail@plt+0x54>
   1251c:	ldr	r0, [pc, #12]	; 12530 <__assert_fail@plt+0x58>
   12520:	bl	124d8 <__assert_fail@plt>
   12524:	andeq	r0, r2, r4, asr #26
   12528:	andeq	r0, r0, r1, lsr #5
   1252c:	andeq	r1, r2, r4, lsl #9
   12530:	andeq	r1, r2, r4, asr #10
   12534:	push	{r4, lr}
   12538:	ldr	r3, [pc, #12]	; 1254c <__assert_fail@plt+0x74>
   1253c:	ldr	r2, [pc, #12]	; 12550 <__assert_fail@plt+0x78>
   12540:	ldr	r1, [pc, #12]	; 12554 <__assert_fail@plt+0x7c>
   12544:	ldr	r0, [pc, #12]	; 12558 <__assert_fail@plt+0x80>
   12548:	bl	124d8 <__assert_fail@plt>
   1254c:	andeq	r0, r2, r0, asr sp
   12550:	andeq	r0, r0, r7, lsl #5
   12554:	andeq	r1, r2, r4, lsl #9
   12558:	andeq	r1, r2, r4, asr #10
   1255c:	push	{r4, lr}
   12560:	mov	r2, #892	; 0x37c
   12564:	ldr	r3, [pc, #8]	; 12574 <__assert_fail@plt+0x9c>
   12568:	ldr	r1, [pc, #8]	; 12578 <__assert_fail@plt+0xa0>
   1256c:	ldr	r0, [pc, #8]	; 1257c <__assert_fail@plt+0xa4>
   12570:	bl	124d8 <__assert_fail@plt>
   12574:	andeq	r0, r2, ip, asr sp
   12578:	andeq	r1, r2, r4, lsl #9
   1257c:	andeq	r1, r2, ip, asr #9
   12580:	push	{r4, lr}
   12584:	ldr	r3, [pc, #12]	; 12598 <__assert_fail@plt+0xc0>
   12588:	ldr	r2, [pc, #12]	; 1259c <__assert_fail@plt+0xc4>
   1258c:	ldr	r1, [pc, #12]	; 125a0 <__assert_fail@plt+0xc8>
   12590:	ldr	r0, [pc, #12]	; 125a4 <__assert_fail@plt+0xcc>
   12594:	bl	124d8 <__assert_fail@plt>
   12598:	andeq	r0, r2, r0, ror sp
   1259c:	andeq	r0, r0, lr, lsl r2
   125a0:	andeq	r1, r2, r4, lsl #9
   125a4:	andeq	r1, r2, r8, ror #9
   125a8:	push	{r4, lr}
   125ac:	ldr	r3, [pc, #12]	; 125c0 <__assert_fail@plt+0xe8>
   125b0:	ldr	r2, [pc, #12]	; 125c4 <__assert_fail@plt+0xec>
   125b4:	ldr	r1, [pc, #12]	; 125c8 <__assert_fail@plt+0xf0>
   125b8:	ldr	r0, [pc, #12]	; 125cc <__assert_fail@plt+0xf4>
   125bc:	bl	124d8 <__assert_fail@plt>
   125c0:	muleq	r2, r0, sp
   125c4:	andeq	r0, r0, r6, asr #7
   125c8:	andeq	r1, r2, r4, lsl #9
   125cc:	andeq	r1, r2, r4, lsl #10
   125d0:	push	{r4, lr}
   125d4:	ldr	r3, [pc, #12]	; 125e8 <__assert_fail@plt+0x110>
   125d8:	ldr	r2, [pc, #12]	; 125ec <__assert_fail@plt+0x114>
   125dc:	ldr	r1, [pc, #12]	; 125f0 <__assert_fail@plt+0x118>
   125e0:	ldr	r0, [pc, #12]	; 125f4 <__assert_fail@plt+0x11c>
   125e4:	bl	124d8 <__assert_fail@plt>
   125e8:			; <UNDEFINED> instruction: 0x00020db0
   125ec:	andeq	r0, r0, r6, lsl #15
   125f0:	andeq	r1, r2, r4, lsl #9
   125f4:	andeq	r1, r2, r0, lsr r5
   125f8:	push	{r4, lr}
   125fc:	mov	r2, #260	; 0x104
   12600:	ldr	r3, [pc, #8]	; 12610 <__assert_fail@plt+0x138>
   12604:	ldr	r1, [pc, #8]	; 12614 <__assert_fail@plt+0x13c>
   12608:	ldr	r0, [pc, #8]	; 12618 <__assert_fail@plt+0x140>
   1260c:	bl	124d8 <__assert_fail@plt>
   12610:	muleq	r2, r0, r8
   12614:	andeq	r2, r2, r8, lsr #2
   12618:	andeq	r2, r2, r0, lsl #3

0001261c <main@@Base>:
   1261c:	push	{lr}		; (str lr, [sp, #-4]!)
   12620:	sub	sp, sp, #244	; 0xf4
   12624:	mvn	r3, #0
   12628:	add	r0, sp, #8
   1262c:	str	r3, [sp, #4]
   12630:	bl	14198 <flatcc_builder_init@@Base>
   12634:	ldr	r1, [pc, #36]	; 12660 <main@@Base+0x44>
   12638:	add	r3, sp, #4
   1263c:	add	r2, r1, #644	; 0x284
   12640:	add	r2, r2, #1
   12644:	add	r0, sp, #8
   12648:	bl	12790 <test@@Base>
   1264c:	add	r0, sp, #8
   12650:	bl	14404 <flatcc_builder_clear@@Base>
   12654:	ldr	r0, [sp, #4]
   12658:	add	sp, sp, #244	; 0xf4
   1265c:	pop	{pc}		; (ldr pc, [sp], #4)
   12660:	andeq	r0, r2, r4, asr #20

00012664 <_start@@Base>:
   12664:	mov	fp, #0
   12668:	mov	lr, #0
   1266c:	pop	{r1}		; (ldr r1, [sp], #4)
   12670:	mov	r2, sp
   12674:	push	{r2}		; (str r2, [sp, #-4]!)
   12678:	push	{r0}		; (str r0, [sp, #-4]!)
   1267c:	ldr	ip, [pc, #16]	; 12694 <_start@@Base+0x30>
   12680:	push	{ip}		; (str ip, [sp, #-4]!)
   12684:	ldr	r0, [pc, #12]	; 12698 <_start@@Base+0x34>
   12688:	ldr	r3, [pc, #12]	; 1269c <_start@@Base+0x38>
   1268c:	bl	1246c <__libc_start_main@plt>
   12690:	bl	124cc <abort@plt>
   12694:	andeq	r0, r2, r4, lsr sl
   12698:	andeq	r2, r1, ip, lsl r6
   1269c:	ldrdeq	r0, [r2], -r4
   126a0:	ldr	r3, [pc, #20]	; 126bc <_start@@Base+0x58>
   126a4:	ldr	r2, [pc, #20]	; 126c0 <_start@@Base+0x5c>
   126a8:	add	r3, pc, r3
   126ac:	ldr	r2, [r3, r2]
   126b0:	cmp	r2, #0
   126b4:	bxeq	lr
   126b8:	b	12478 <__gmon_start__@plt>
   126bc:	andeq	r0, r2, r0, asr r9
   126c0:	andeq	r0, r0, ip, asr #32
   126c4:	ldr	r3, [pc, #28]	; 126e8 <_start@@Base+0x84>
   126c8:	ldr	r0, [pc, #28]	; 126ec <_start@@Base+0x88>
   126cc:	sub	r3, r3, r0
   126d0:	cmp	r3, #6
   126d4:	bxls	lr
   126d8:	ldr	r3, [pc, #16]	; 126f0 <_start@@Base+0x8c>
   126dc:	cmp	r3, #0
   126e0:	bxeq	lr
   126e4:	bx	r3
   126e8:	andeq	r3, r3, fp, asr #1
   126ec:	andeq	r3, r3, r8, asr #1
   126f0:	andeq	r0, r0, r0
   126f4:	ldr	r1, [pc, #36]	; 12720 <_start@@Base+0xbc>
   126f8:	ldr	r0, [pc, #36]	; 12724 <_start@@Base+0xc0>
   126fc:	sub	r1, r1, r0
   12700:	asr	r1, r1, #2
   12704:	add	r1, r1, r1, lsr #31
   12708:	asrs	r1, r1, #1
   1270c:	bxeq	lr
   12710:	ldr	r3, [pc, #16]	; 12728 <_start@@Base+0xc4>
   12714:	cmp	r3, #0
   12718:	bxeq	lr
   1271c:	bx	r3
   12720:	andeq	r3, r3, r8, asr #1
   12724:	andeq	r3, r3, r8, asr #1
   12728:	andeq	r0, r0, r0
   1272c:	push	{r4, lr}
   12730:	ldr	r4, [pc, #24]	; 12750 <_start@@Base+0xec>
   12734:	ldrb	r3, [r4]
   12738:	cmp	r3, #0
   1273c:	popne	{r4, pc}
   12740:	bl	126c4 <_start@@Base+0x60>
   12744:	mov	r3, #1
   12748:	strb	r3, [r4]
   1274c:	pop	{r4, pc}
   12750:	andeq	r3, r3, ip, asr #1
   12754:	ldr	r0, [pc, #40]	; 12784 <_start@@Base+0x120>
   12758:	ldr	r3, [r0]
   1275c:	cmp	r3, #0
   12760:	bne	12768 <_start@@Base+0x104>
   12764:	b	126f4 <_start@@Base+0x90>
   12768:	ldr	r3, [pc, #24]	; 12788 <_start@@Base+0x124>
   1276c:	cmp	r3, #0
   12770:	beq	12764 <_start@@Base+0x100>
   12774:	push	{r4, lr}
   12778:	blx	r3
   1277c:	pop	{r4, lr}
   12780:	b	126f4 <_start@@Base+0x90>
   12784:	andeq	r2, r3, r4, lsl pc
	...

00012790 <test@@Base>:
   12790:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12794:	sub	sp, sp, #196	; 0xc4
   12798:	mov	r6, r1
   1279c:	mov	r8, r0
   127a0:	mov	r5, r2
   127a4:	mov	r1, #0
   127a8:	mov	r2, #44	; 0x2c
   127ac:	add	r0, sp, #148	; 0x94
   127b0:	mov	r9, r3
   127b4:	bl	124a8 <memset@plt>
   127b8:	mov	r3, #0
   127bc:	mov	r2, r3
   127c0:	mov	ip, #1
   127c4:	mov	r0, r8
   127c8:	ldr	r1, [pc, #1440]	; 12d70 <test@@Base+0x5e0>
   127cc:	str	r6, [sp, #152]	; 0x98
   127d0:	str	ip, [sp, #164]	; 0xa4
   127d4:	bl	14c88 <flatcc_builder_start_buffer@@Base>
   127d8:	sub	r3, r5, r6
   127dc:	cmp	r3, #1
   127e0:	ble	127f4 <test@@Base+0x64>
   127e4:	ldrb	r3, [r6]
   127e8:	cmp	r3, #32
   127ec:	bhi	12808 <test@@Base+0x78>
   127f0:	beq	128c0 <test@@Base+0x130>
   127f4:	mov	r1, r6
   127f8:	mov	r2, r5
   127fc:	add	r0, sp, #148	; 0x94
   12800:	bl	1ba3c <flatcc_json_parser_space_ext@@Base>
   12804:	mov	r6, r0
   12808:	cmp	r5, r6
   1280c:	beq	12d14 <test@@Base+0x584>
   12810:	bls	12820 <test@@Base+0x90>
   12814:	ldrb	r3, [r6]
   12818:	cmp	r3, #123	; 0x7b
   1281c:	beq	128d4 <test@@Base+0x144>
   12820:	ldr	sl, [pc, #1356]	; 12d74 <test@@Base+0x5e4>
   12824:	mov	r2, #123	; 0x7b
   12828:	ldr	r1, [pc, #1352]	; 12d78 <test@@Base+0x5e8>
   1282c:	ldr	r0, [sl]
   12830:	bl	12490 <fprintf@plt>
   12834:	mov	r2, r5
   12838:	mov	r1, r6
   1283c:	add	r0, sp, #148	; 0x94
   12840:	mov	r3, #17
   12844:	bl	1b93c <flatcc_json_parser_set_error@@Base>
   12848:	mov	r4, r0
   1284c:	ldr	r0, [sp, #172]	; 0xac
   12850:	cmp	r0, #0
   12854:	bne	12880 <test@@Base+0xf0>
   12858:	ldr	r3, [sl]
   1285c:	mov	r2, #15
   12860:	mov	r1, #1
   12864:	ldr	r0, [pc, #1296]	; 12d7c <test@@Base+0x5ec>
   12868:	bl	12454 <fwrite@plt>
   1286c:	ldr	r3, [sp, #172]	; 0xac
   12870:	mov	r0, r4
   12874:	str	r3, [r9]
   12878:	add	sp, sp, #196	; 0xc4
   1287c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12880:	ldr	r3, [sp, #152]	; 0x98
   12884:	ldr	r5, [sp, #184]	; 0xb8
   12888:	ldr	r6, [sl]
   1288c:	sub	r5, r5, r3
   12890:	ldr	r7, [sp, #164]	; 0xa4
   12894:	bl	1b91c <flatcc_json_parser_error_string@@Base>
   12898:	add	r5, r5, #1
   1289c:	mov	r3, r5
   128a0:	mov	r2, r7
   128a4:	ldr	r1, [pc, #1236]	; 12d80 <test@@Base+0x5f0>
   128a8:	str	r0, [sp]
   128ac:	mov	r0, r6
   128b0:	bl	12490 <fprintf@plt>
   128b4:	mov	r0, r8
   128b8:	bl	14324 <flatcc_builder_reset@@Base>
   128bc:	b	1286c <test@@Base+0xdc>
   128c0:	ldrb	r3, [r6, #1]
   128c4:	cmp	r3, #32
   128c8:	addhi	r6, r6, #1
   128cc:	bls	127f4 <test@@Base+0x64>
   128d0:	b	12808 <test@@Base+0x78>
   128d4:	add	r4, r6, #1
   128d8:	sub	r3, r5, r4
   128dc:	cmp	r3, #1
   128e0:	ble	12904 <test@@Base+0x174>
   128e4:	ldrb	r3, [r6, #1]
   128e8:	cmp	r3, #32
   128ec:	bhi	12918 <test@@Base+0x188>
   128f0:	bne	12904 <test@@Base+0x174>
   128f4:	ldrb	r3, [r6, #2]
   128f8:	cmp	r3, #32
   128fc:	addhi	r4, r6, #2
   12900:	bhi	12918 <test@@Base+0x188>
   12904:	mov	r1, r4
   12908:	mov	r2, r5
   1290c:	add	r0, sp, #148	; 0x94
   12910:	bl	1ba3c <flatcc_json_parser_space_ext@@Base>
   12914:	mov	r4, r0
   12918:	cmp	r5, r4
   1291c:	beq	1338c <test@@Base+0xbfc>
   12920:	mov	r1, #11
   12924:	mov	r0, r8
   12928:	bl	16868 <flatcc_builder_start_table@@Base>
   1292c:	ldrb	r3, [r4]
   12930:	cmp	r3, #34	; 0x22
   12934:	beq	1332c <test@@Base+0xb9c>
   12938:	cmp	r3, #46	; 0x2e
   1293c:	movne	r3, #1
   12940:	subne	r1, r5, r4
   12944:	strne	r3, [sp, #160]	; 0xa0
   12948:	beq	1344c <test@@Base+0xcbc>
   1294c:	cmp	r1, #8
   12950:	bls	12ce4 <test@@Base+0x554>
   12954:	ldrb	r2, [r4, #7]
   12958:	mov	r3, #0
   1295c:	ldrb	r6, [r4, #6]
   12960:	lsr	r0, r6, #24
   12964:	str	r0, [sp, #60]	; 0x3c
   12968:	lsl	r0, r6, #8
   1296c:	str	r0, [sp, #56]	; 0x38
   12970:	ldrd	r6, [sp, #56]	; 0x38
   12974:	orr	r6, r6, r2
   12978:	orr	r7, r7, r3
   1297c:	mov	r2, r6
   12980:	mov	r3, r7
   12984:	ldrb	r6, [r4, #5]
   12988:	lsr	r0, r6, #16
   1298c:	str	r0, [sp, #52]	; 0x34
   12990:	lsl	r0, r6, #16
   12994:	str	r0, [sp, #48]	; 0x30
   12998:	ldrd	r6, [sp, #48]	; 0x30
   1299c:	orr	r6, r6, r2
   129a0:	orr	r7, r7, r3
   129a4:	mov	r2, r6
   129a8:	mov	r3, r7
   129ac:	ldrb	r6, [r4, #4]
   129b0:	lsr	r0, r6, #8
   129b4:	str	r0, [sp, #36]	; 0x24
   129b8:	lsl	r0, r6, #24
   129bc:	str	r0, [sp, #32]
   129c0:	ldrd	r6, [sp, #32]
   129c4:	orr	r6, r6, r2
   129c8:	orr	r7, r7, r3
   129cc:	mov	r2, r6
   129d0:	mov	r3, r7
   129d4:	ldrb	r0, [r4, #3]
   129d8:	str	r0, [sp, #44]	; 0x2c
   129dc:	mov	r0, #0
   129e0:	str	r0, [sp, #40]	; 0x28
   129e4:	ldrd	r6, [sp, #40]	; 0x28
   129e8:	orr	r6, r6, r2
   129ec:	orr	r7, r7, r3
   129f0:	mov	r2, r6
   129f4:	mov	r3, r7
   129f8:	ldrb	r6, [r4, #2]
   129fc:	lsl	r0, r6, #8
   12a00:	str	r0, [sp, #28]
   12a04:	mov	r0, #0
   12a08:	str	r0, [sp, #24]
   12a0c:	ldrd	r6, [sp, #24]
   12a10:	orr	r6, r6, r2
   12a14:	orr	r7, r7, r3
   12a18:	mov	r2, r6
   12a1c:	mov	r3, r7
   12a20:	ldrb	r0, [r4]
   12a24:	ldrb	r6, [r4, #1]
   12a28:	mov	sl, #0
   12a2c:	cmp	r1, #8
   12a30:	lsl	r1, r0, #24
   12a34:	str	r1, [sp, #20]
   12a38:	str	sl, [sp, #16]
   12a3c:	ldrd	r0, [sp, #16]
   12a40:	lsl	fp, r6, #16
   12a44:	orr	r2, r2, sl
   12a48:	orr	r3, r3, fp
   12a4c:	orr	r0, r0, r2
   12a50:	orr	r1, r1, r3
   12a54:	strd	r0, [sp, #8]
   12a58:	bgt	12cc4 <test@@Base+0x534>
   12a5c:	ldrd	r2, [sp, #8]
   12a60:	ldr	r0, [pc, #796]	; 12d84 <test@@Base+0x5f4>
   12a64:	mvn	r1, #0
   12a68:	and	r2, r2, r0
   12a6c:	and	r3, r3, r1
   12a70:	mov	ip, r5
   12a74:	add	r1, pc, #700	; 0x2bc
   12a78:	ldrd	r0, [r1]
   12a7c:	cmp	r3, r1
   12a80:	cmpeq	r2, r0
   12a84:	bhi	12b04 <test@@Base+0x374>
   12a88:	add	r3, pc, #688	; 0x2b0
   12a8c:	ldrd	r2, [r3]
   12a90:	ldrd	r0, [sp, #8]
   12a94:	and	r0, r0, #-16777216	; 0xff000000
   12a98:	cmp	r1, r3
   12a9c:	cmpeq	r0, r2
   12aa0:	bne	13a54 <test@@Base+0x12c4>
   12aa4:	ldr	r3, [sp, #160]	; 0xa0
   12aa8:	add	r1, r4, #5
   12aac:	cmp	r3, #0
   12ab0:	bne	12f80 <test@@Base+0x7f0>
   12ab4:	cmp	r5, r1
   12ab8:	beq	13344 <test@@Base+0xbb4>
   12abc:	ldrb	r2, [r4, #5]
   12ac0:	cmp	r2, #34	; 0x22
   12ac4:	bne	12ae4 <test@@Base+0x354>
   12ac8:	b	13384 <test@@Base+0xbf4>
   12acc:	add	r1, r3, #1
   12ad0:	cmp	r5, r1
   12ad4:	beq	13340 <test@@Base+0xbb0>
   12ad8:	ldrb	r2, [r3, #1]
   12adc:	cmp	r2, #34	; 0x22
   12ae0:	beq	13384 <test@@Base+0xbf4>
   12ae4:	cmp	r2, #92	; 0x5c
   12ae8:	mov	r3, r1
   12aec:	bne	12acc <test@@Base+0x33c>
   12af0:	sub	r3, r5, r1
   12af4:	cmp	r3, #1
   12af8:	ble	13344 <test@@Base+0xbb4>
   12afc:	add	r3, r1, #1
   12b00:	b	12acc <test@@Base+0x33c>
   12b04:	add	r7, pc, #572	; 0x23c
   12b08:	ldrd	r6, [r7]
   12b0c:	ldrd	r0, [sp, #8]
   12b10:	mov	r0, #0
   12b14:	cmp	r1, r7
   12b18:	cmpeq	r0, r6
   12b1c:	bhi	12d8c <test@@Base+0x5fc>
   12b20:	ldrd	r0, [sp, #8]
   12b24:	add	r7, pc, #548	; 0x224
   12b28:	ldrd	r6, [r7]
   12b2c:	cmp	r1, r7
   12b30:	cmpeq	r0, r6
   12b34:	bls	131b4 <test@@Base+0xa24>
   12b38:	mov	r2, r0
   12b3c:	mov	r3, r1
   12b40:	add	r1, pc, #528	; 0x210
   12b44:	ldrd	r0, [r1]
   12b48:	cmp	r3, r1
   12b4c:	cmpeq	r2, r0
   12b50:	bne	13a54 <test@@Base+0x12c4>
   12b54:	sub	r3, r5, ip
   12b58:	cmp	r3, #8
   12b5c:	bls	135c0 <test@@Base+0xe30>
   12b60:	ldrb	r2, [ip, #6]
   12b64:	mov	r1, #0
   12b68:	lsr	lr, r2, #24
   12b6c:	lsl	r3, r2, #8
   12b70:	str	lr, [sp, #124]	; 0x7c
   12b74:	str	r3, [sp, #120]	; 0x78
   12b78:	ldrd	r2, [sp, #120]	; 0x78
   12b7c:	orr	r3, r3, r1
   12b80:	ldrb	r0, [ip, #5]
   12b84:	lsr	lr, r0, #16
   12b88:	lsl	r1, r0, #16
   12b8c:	str	lr, [sp, #108]	; 0x6c
   12b90:	str	r1, [sp, #104]	; 0x68
   12b94:	ldrd	r0, [sp, #104]	; 0x68
   12b98:	orr	r1, r1, r3
   12b9c:	mov	r3, r1
   12ba0:	ldrb	r0, [ip, #4]
   12ba4:	lsr	lr, r0, #8
   12ba8:	lsl	r1, r0, #24
   12bac:	str	lr, [sp, #92]	; 0x5c
   12bb0:	str	r1, [sp, #88]	; 0x58
   12bb4:	ldrd	r0, [sp, #88]	; 0x58
   12bb8:	orr	r1, r1, r3
   12bbc:	mov	r3, r1
   12bc0:	ldrb	r1, [ip, #3]
   12bc4:	str	r1, [sp, #100]	; 0x64
   12bc8:	mov	r1, #0
   12bcc:	str	r1, [sp, #96]	; 0x60
   12bd0:	ldrd	r0, [sp, #96]	; 0x60
   12bd4:	orr	r1, r1, r3
   12bd8:	mov	r3, r1
   12bdc:	ldrb	r0, [ip, #2]
   12be0:	lsl	r1, r0, #8
   12be4:	str	r1, [sp, #84]	; 0x54
   12be8:	mov	r1, #0
   12bec:	str	r1, [sp, #80]	; 0x50
   12bf0:	ldrd	r0, [sp, #80]	; 0x50
   12bf4:	orr	r1, r1, r3
   12bf8:	mov	r3, r1
   12bfc:	ldrb	r0, [ip, #1]
   12c00:	lsl	r1, r0, #16
   12c04:	str	r1, [sp, #76]	; 0x4c
   12c08:	mov	r1, #0
   12c0c:	str	r1, [sp, #72]	; 0x48
   12c10:	ldrd	r0, [sp, #72]	; 0x48
   12c14:	orr	r1, r1, r3
   12c18:	mov	r3, r1
   12c1c:	ldrb	r0, [ip]
   12c20:	mov	r2, #0
   12c24:	lsl	r1, r0, #24
   12c28:	str	r1, [sp, #68]	; 0x44
   12c2c:	mov	r1, #0
   12c30:	str	r1, [sp, #64]	; 0x40
   12c34:	ldrd	r6, [sp, #64]	; 0x40
   12c38:	add	r1, pc, #288	; 0x120
   12c3c:	ldrd	r0, [r1]
   12c40:	orr	r7, r7, r3
   12c44:	cmp	r7, r1
   12c48:	cmpeq	r2, r0
   12c4c:	bls	13620 <test@@Base+0xe90>
   12c50:	add	r1, pc, #272	; 0x110
   12c54:	ldrd	r0, [r1]
   12c58:	cmp	r7, r1
   12c5c:	cmpeq	r2, r0
   12c60:	bne	13c48 <test@@Base+0x14b8>
   12c64:	ldr	r3, [sp, #160]	; 0xa0
   12c68:	add	r1, ip, #4
   12c6c:	cmp	r3, #0
   12c70:	bne	13714 <test@@Base+0xf84>
   12c74:	cmp	r5, r1
   12c78:	beq	13a74 <test@@Base+0x12e4>
   12c7c:	ldrb	r2, [ip, #4]
   12c80:	cmp	r2, #34	; 0x22
   12c84:	bne	12ca4 <test@@Base+0x514>
   12c88:	b	13b64 <test@@Base+0x13d4>
   12c8c:	add	r1, r3, #1
   12c90:	cmp	r5, r1
   12c94:	beq	13a70 <test@@Base+0x12e0>
   12c98:	ldrb	r2, [r3, #1]
   12c9c:	cmp	r2, #34	; 0x22
   12ca0:	beq	13b64 <test@@Base+0x13d4>
   12ca4:	cmp	r2, #92	; 0x5c
   12ca8:	mov	r3, r1
   12cac:	bne	12c8c <test@@Base+0x4fc>
   12cb0:	sub	r3, r5, r1
   12cb4:	cmp	r3, #1
   12cb8:	ble	13a74 <test@@Base+0x12e4>
   12cbc:	add	r3, r1, #1
   12cc0:	b	12c8c <test@@Base+0x4fc>
   12cc4:	mov	r2, r0
   12cc8:	ldr	r0, [pc, #180]	; 12d84 <test@@Base+0x5f4>
   12ccc:	mov	r3, r1
   12cd0:	mvn	r1, #0
   12cd4:	and	r2, r2, r0
   12cd8:	and	r3, r3, r1
   12cdc:	add	ip, r4, #8
   12ce0:	b	12a74 <test@@Base+0x2e4>
   12ce4:	sub	r3, r1, #1
   12ce8:	cmp	r3, #7
   12cec:	ldrls	pc, [pc, r3, lsl #2]
   12cf0:	b	13a54 <test@@Base+0x12c4>
   12cf4:	andeq	r3, r1, ip, lsl #5
   12cf8:			; <UNDEFINED> instruction: 0x000132b0
   12cfc:	andeq	r3, r1, r4, lsr #5
   12d00:	andeq	r3, r1, r0, ror #5
   12d04:	ldrdeq	r3, [r1], -r4
   12d08:	andeq	r3, r1, r8, asr #5
   12d0c:			; <UNDEFINED> instruction: 0x000132bc
   12d10:	andeq	r2, r1, r4, asr r9
   12d14:	ldr	sl, [pc, #88]	; 12d74 <test@@Base+0x5e4>
   12d18:	mov	r2, #13
   12d1c:	mov	r1, #1
   12d20:	ldr	r3, [sl]
   12d24:	ldr	r0, [pc, #92]	; 12d88 <test@@Base+0x5f8>
   12d28:	mov	r4, r5
   12d2c:	bl	12454 <fwrite@plt>
   12d30:	b	1284c <test@@Base+0xbc>
   12d34:	nop			; (mov r0, r0)
   12d38:	mcrvs	15, 3, pc, cr3, cr15, {7}	; <UNPREDICTABLE>
   12d3c:	cmnvc	r5, #-1140850687	; 0xbc000001
   12d40:	strvc	r0, [r0], #-0
   12d44:			; <UNDEFINED> instruction: 0x66697273
   12d48:			; <UNDEFINED> instruction: 0xffffffff
   12d4c:	bvc	1d6df24 <__bss_end__@@Base+0x1d3ae54>
   12d50:	mcrvs	3, 3, r7, cr4, cr15, {0}
   12d54:	cmnvc	r5, #-1140850687	; 0xbc000001
   12d58:	cdpvs	3, 6, cr7, cr4, cr0, {1}
   12d5c:	cmnvc	r5, #-1140850687	; 0xbc000001
   12d60:			; <UNDEFINED> instruction: 0xffffffff
   12d64:	stclvs	6, cr6, [r5], #-460	; 0xfffffe34
   12d68:	andeq	r0, r0, r0
   12d6c:	stclvs	6, cr6, [r5], #-464	; 0xfffffe30
   12d70:	andeq	r0, r2, ip, asr #25
   12d74:	andeq	r3, r3, r8, asr #1
   12d78:	andeq	r0, r2, r4, ror #25
   12d7c:	andeq	r0, r2, r4, lsr #26
   12d80:	andeq	r0, r2, r8, lsl sp
   12d84:			; <UNDEFINED> instruction: 0xffff0000
   12d88:	ldrdeq	r0, [r2], -r4
   12d8c:	add	r3, pc, #476	; 0x1dc
   12d90:	ldrd	r2, [r3]
   12d94:	cmp	r1, r3
   12d98:	cmpeq	r0, r2
   12d9c:	bne	13a54 <test@@Base+0x12c4>
   12da0:	ldr	r3, [sp, #160]	; 0xa0
   12da4:	add	r1, r4, #4
   12da8:	cmp	r3, #0
   12dac:	beq	13228 <test@@Base+0xa98>
   12db0:	cmp	r5, r1
   12db4:	beq	12e20 <test@@Base+0x690>
   12db8:	ldrb	r3, [r4, #4]
   12dbc:	cmp	r3, #32
   12dc0:	bls	12e04 <test@@Base+0x674>
   12dc4:	add	r4, r4, #5
   12dc8:	cmp	r3, #46	; 0x2e
   12dcc:	cmpne	r3, #95	; 0x5f
   12dd0:	sub	r1, r4, #1
   12dd4:	beq	1330c <test@@Base+0xb7c>
   12dd8:	sub	r2, r3, #48	; 0x30
   12ddc:	tst	r3, #128	; 0x80
   12de0:	uxtb	r2, r2
   12de4:	bne	1330c <test@@Base+0xb7c>
   12de8:	orr	r0, r3, #32
   12dec:	sub	r0, r0, #97	; 0x61
   12df0:	cmp	r2, #9
   12df4:	uxtb	r0, r0
   12df8:	bls	1330c <test@@Base+0xb7c>
   12dfc:	cmp	r0, #25
   12e00:	bls	1330c <test@@Base+0xb7c>
   12e04:	sub	r3, r5, r1
   12e08:	cmp	r3, #1
   12e0c:	ble	12e20 <test@@Base+0x690>
   12e10:	ldrb	r3, [r1]
   12e14:	cmp	r3, #32
   12e18:	bhi	12e30 <test@@Base+0x6a0>
   12e1c:	beq	136ec <test@@Base+0xf5c>
   12e20:	mov	r2, r5
   12e24:	add	r0, sp, #148	; 0x94
   12e28:	bl	1ba3c <flatcc_json_parser_space_ext@@Base>
   12e2c:	mov	r1, r0
   12e30:	cmp	r5, r1
   12e34:	beq	12d14 <test@@Base+0x584>
   12e38:	bls	136dc <test@@Base+0xf4c>
   12e3c:	ldrb	r3, [r1]
   12e40:	cmp	r3, #58	; 0x3a
   12e44:	bne	136dc <test@@Base+0xf4c>
   12e48:	add	r4, r1, #1
   12e4c:	sub	r3, r5, r4
   12e50:	cmp	r3, #1
   12e54:	ble	12e68 <test@@Base+0x6d8>
   12e58:	ldrb	r3, [r1, #1]
   12e5c:	cmp	r3, #32
   12e60:	bhi	12e7c <test@@Base+0x6ec>
   12e64:	beq	13700 <test@@Base+0xf70>
   12e68:	mov	r1, r4
   12e6c:	mov	r2, r5
   12e70:	add	r0, sp, #148	; 0x94
   12e74:	bl	1ba3c <flatcc_json_parser_space_ext@@Base>
   12e78:	mov	r4, r0
   12e7c:	cmp	r5, r4
   12e80:	beq	1338c <test@@Base+0xbfc>
   12e84:	ldrb	r3, [r4]
   12e88:	cmp	r3, #34	; 0x22
   12e8c:	addeq	r7, r4, #1
   12e90:	beq	12eac <test@@Base+0x71c>
   12e94:	mov	r1, r4
   12e98:	mov	r3, #16
   12e9c:	mov	r2, r5
   12ea0:	add	r0, sp, #148	; 0x94
   12ea4:	bl	1b93c <flatcc_json_parser_set_error@@Base>
   12ea8:	mov	r7, r0
   12eac:	mov	r2, r5
   12eb0:	mov	r1, r7
   12eb4:	add	r0, sp, #148	; 0x94
   12eb8:	bl	1b968 <flatcc_json_parser_string_part@@Base>
   12ebc:	cmp	r5, r0
   12ec0:	mov	r4, r0
   12ec4:	beq	12f64 <test@@Base+0x7d4>
   12ec8:	ldrb	r3, [r0]
   12ecc:	cmp	r3, #34	; 0x22
   12ed0:	beq	1346c <test@@Base+0xcdc>
   12ed4:	mov	r0, r8
   12ed8:	sub	r6, r4, r7
   12edc:	bl	1661c <flatcc_builder_start_string@@Base>
   12ee0:	mov	r1, r6
   12ee4:	mov	r0, r8
   12ee8:	bl	15b5c <flatcc_builder_extend_string@@Base>
   12eec:	cmp	r0, #0
   12ef0:	beq	12f64 <test@@Base+0x7d4>
   12ef4:	mov	r2, r6
   12ef8:	mov	r1, r7
   12efc:	bl	12430 <memcpy@plt>
   12f00:	b	12f14 <test@@Base+0x784>
   12f04:	bl	15c40 <flatcc_builder_append_string@@Base>
   12f08:	ldrb	r3, [r4]
   12f0c:	cmp	r3, #34	; 0x22
   12f10:	beq	133c4 <test@@Base+0xc34>
   12f14:	mov	r1, r4
   12f18:	add	r3, sp, #128	; 0x80
   12f1c:	mov	r2, r5
   12f20:	add	r0, sp, #148	; 0x94
   12f24:	bl	1bb8c <flatcc_json_parser_string_escape@@Base>
   12f28:	ldrb	r2, [sp, #128]	; 0x80
   12f2c:	add	r1, sp, #129	; 0x81
   12f30:	mov	r6, r0
   12f34:	mov	r0, r8
   12f38:	bl	15c40 <flatcc_builder_append_string@@Base>
   12f3c:	mov	r2, r5
   12f40:	mov	r1, r6
   12f44:	add	r0, sp, #148	; 0x94
   12f48:	bl	1b968 <flatcc_json_parser_string_part@@Base>
   12f4c:	mov	r1, r6
   12f50:	mov	r4, r0
   12f54:	cmp	r5, r4
   12f58:	sub	r2, r0, r6
   12f5c:	mov	r0, r8
   12f60:	bne	12f04 <test@@Base+0x774>
   12f64:	ldr	sl, [pc, #12]	; 12f78 <test@@Base+0x7e8>
   12f68:	b	1284c <test@@Base+0xbc>
   12f6c:	nop			; (mov r0, r0)
   12f70:	andeq	r0, r0, r0
   12f74:	bvc	1d6e150 <__bss_end__@@Base+0x1d3b080>
   12f78:	andeq	r3, r3, r8, asr #1
   12f7c:	andeq	r0, r2, r4, ror #25
   12f80:	cmp	r5, r1
   12f84:	beq	12ff0 <test@@Base+0x860>
   12f88:	ldrb	r3, [r4, #5]
   12f8c:	cmp	r3, #32
   12f90:	bls	12fd4 <test@@Base+0x844>
   12f94:	add	r4, r4, #6
   12f98:	cmp	r3, #46	; 0x2e
   12f9c:	cmpne	r3, #95	; 0x5f
   12fa0:	sub	r1, r4, #1
   12fa4:	beq	13194 <test@@Base+0xa04>
   12fa8:	sub	r2, r3, #48	; 0x30
   12fac:	tst	r3, #128	; 0x80
   12fb0:	uxtb	r2, r2
   12fb4:	bne	13194 <test@@Base+0xa04>
   12fb8:	orr	r0, r3, #32
   12fbc:	sub	r0, r0, #97	; 0x61
   12fc0:	cmp	r2, #9
   12fc4:	uxtb	r0, r0
   12fc8:	bls	13194 <test@@Base+0xa04>
   12fcc:	cmp	r0, #25
   12fd0:	bls	13194 <test@@Base+0xa04>
   12fd4:	sub	r3, r5, r1
   12fd8:	cmp	r3, #1
   12fdc:	ble	12ff0 <test@@Base+0x860>
   12fe0:	ldrb	r3, [r1]
   12fe4:	cmp	r3, #32
   12fe8:	bhi	13000 <test@@Base+0x870>
   12fec:	beq	13420 <test@@Base+0xc90>
   12ff0:	mov	r2, r5
   12ff4:	add	r0, sp, #148	; 0x94
   12ff8:	bl	1ba3c <flatcc_json_parser_space_ext@@Base>
   12ffc:	mov	r1, r0
   13000:	cmp	r5, r1
   13004:	beq	12d14 <test@@Base+0x584>
   13008:	bls	136dc <test@@Base+0xf4c>
   1300c:	ldrb	r3, [r1]
   13010:	cmp	r3, #58	; 0x3a
   13014:	bne	136dc <test@@Base+0xf4c>
   13018:	add	r4, r1, #1
   1301c:	sub	r3, r5, r4
   13020:	cmp	r3, #1
   13024:	ble	13038 <test@@Base+0x8a8>
   13028:	ldrb	r3, [r1, #1]
   1302c:	cmp	r3, #32
   13030:	bhi	1304c <test@@Base+0x8bc>
   13034:	beq	13278 <test@@Base+0xae8>
   13038:	mov	r1, r4
   1303c:	mov	r2, r5
   13040:	add	r0, sp, #148	; 0x94
   13044:	bl	1ba3c <flatcc_json_parser_space_ext@@Base>
   13048:	mov	r4, r0
   1304c:	cmp	r5, r4
   13050:	beq	1338c <test@@Base+0xbfc>
   13054:	mov	r3, #1
   13058:	mov	r2, r3
   1305c:	mov	r1, #0
   13060:	mov	r0, r8
   13064:	bl	189d4 <flatcc_builder_table_add@@Base>
   13068:	subs	r6, r0, #0
   1306c:	beq	12f64 <test@@Base+0x7d4>
   13070:	add	ip, sp, #192	; 0xc0
   13074:	mov	r2, #0
   13078:	mov	r3, #0
   1307c:	mov	r1, #0
   13080:	add	r0, sp, #136	; 0x88
   13084:	str	r1, [ip, #-60]!	; 0xffffffc4
   13088:	strd	r2, [sp, #136]	; 0x88
   1308c:	strb	r1, [r6]
   13090:	mov	r2, r5
   13094:	str	r0, [sp]
   13098:	mov	r3, ip
   1309c:	mov	r1, r4
   130a0:	add	r0, sp, #148	; 0x94
   130a4:	bl	1e6e0 <flatcc_json_parser_integer@@Base>
   130a8:	cmp	r4, r0
   130ac:	beq	12f64 <test@@Base+0x7d4>
   130b0:	ldr	r3, [sp, #132]	; 0x84
   130b4:	cmp	r3, #0
   130b8:	bne	13434 <test@@Base+0xca4>
   130bc:	ldrd	r2, [sp, #136]	; 0x88
   130c0:	cmp	r3, #0
   130c4:	cmpeq	r2, #255	; 0xff
   130c8:	strbls	r2, [r6]
   130cc:	bhi	132ec <test@@Base+0xb5c>
   130d0:	sub	r3, r5, r0
   130d4:	cmp	r3, #1
   130d8:	ble	130ec <test@@Base+0x95c>
   130dc:	ldrb	r3, [r0]
   130e0:	cmp	r3, #32
   130e4:	bhi	130fc <test@@Base+0x96c>
   130e8:	beq	1335c <test@@Base+0xbcc>
   130ec:	mov	r1, r0
   130f0:	mov	r2, r5
   130f4:	add	r0, sp, #148	; 0x94
   130f8:	bl	1ba3c <flatcc_json_parser_space_ext@@Base>
   130fc:	cmp	r5, r0
   13100:	beq	12d14 <test@@Base+0x584>
   13104:	ldrb	r3, [r0]
   13108:	cmp	r3, #44	; 0x2c
   1310c:	bne	13ae4 <test@@Base+0x1354>
   13110:	add	r4, r0, #1
   13114:	sub	r3, r5, r4
   13118:	cmp	r3, #1
   1311c:	ble	13130 <test@@Base+0x9a0>
   13120:	ldrb	r3, [r0, #1]
   13124:	cmp	r3, #32
   13128:	bhi	13144 <test@@Base+0x9b4>
   1312c:	beq	13370 <test@@Base+0xbe0>
   13130:	mov	r1, r4
   13134:	mov	r2, r5
   13138:	add	r0, sp, #148	; 0x94
   1313c:	bl	1ba3c <flatcc_json_parser_space_ext@@Base>
   13140:	mov	r4, r0
   13144:	cmp	r5, r4
   13148:	beq	1338c <test@@Base+0xbfc>
   1314c:	ldrb	r3, [r4]
   13150:	cmp	r3, #125	; 0x7d
   13154:	bne	1292c <test@@Base+0x19c>
   13158:	cmp	r5, r4
   1315c:	mov	r7, r4
   13160:	bhi	13af8 <test@@Base+0x1368>
   13164:	ldr	sl, [pc, #-500]	; 12f78 <test@@Base+0x7e8>
   13168:	mov	r2, #125	; 0x7d
   1316c:	ldr	r1, [pc, #-504]	; 12f7c <test@@Base+0x7ec>
   13170:	ldr	r0, [sl]
   13174:	bl	12490 <fprintf@plt>
   13178:	mov	r2, r5
   1317c:	mov	r1, r7
   13180:	add	r0, sp, #148	; 0x94
   13184:	mov	r3, #17
   13188:	bl	1b93c <flatcc_json_parser_set_error@@Base>
   1318c:	mov	r4, r0
   13190:	b	1284c <test@@Base+0xbc>
   13194:	cmp	r5, r4
   13198:	mov	r1, r4
   1319c:	beq	1369c <test@@Base+0xf0c>
   131a0:	ldrb	r2, [r4], #1
   131a4:	cmp	r2, #32
   131a8:	bls	13be8 <test@@Base+0x1458>
   131ac:	mov	r3, r2
   131b0:	b	12f98 <test@@Base+0x808>
   131b4:	add	r1, pc, #980	; 0x3d4
   131b8:	ldrd	r0, [r1]
   131bc:	cmp	r3, r1
   131c0:	cmpeq	r2, r0
   131c4:	bne	13a54 <test@@Base+0x12c4>
   131c8:	ldr	r3, [sp, #160]	; 0xa0
   131cc:	add	r1, r4, #6
   131d0:	cmp	r3, #0
   131d4:	bne	13484 <test@@Base+0xcf4>
   131d8:	cmp	r5, r1
   131dc:	beq	136c4 <test@@Base+0xf34>
   131e0:	ldrb	r2, [r4, #6]
   131e4:	cmp	r2, #34	; 0x22
   131e8:	bne	13208 <test@@Base+0xa78>
   131ec:	b	13a28 <test@@Base+0x1298>
   131f0:	add	r1, r3, #1
   131f4:	cmp	r5, r1
   131f8:	beq	136c0 <test@@Base+0xf30>
   131fc:	ldrb	r2, [r3, #1]
   13200:	cmp	r2, #34	; 0x22
   13204:	beq	13a28 <test@@Base+0x1298>
   13208:	cmp	r2, #92	; 0x5c
   1320c:	mov	r3, r1
   13210:	bne	131f0 <test@@Base+0xa60>
   13214:	sub	r3, r5, r1
   13218:	cmp	r3, #1
   1321c:	ble	136c4 <test@@Base+0xf34>
   13220:	add	r3, r1, #1
   13224:	b	131f0 <test@@Base+0xa60>
   13228:	cmp	r5, r1
   1322c:	beq	133ac <test@@Base+0xc1c>
   13230:	ldrb	r2, [r4, #4]
   13234:	cmp	r2, #34	; 0x22
   13238:	bne	13258 <test@@Base+0xac8>
   1323c:	b	13694 <test@@Base+0xf04>
   13240:	add	r1, r3, #1
   13244:	cmp	r5, r1
   13248:	beq	133a8 <test@@Base+0xc18>
   1324c:	ldrb	r2, [r3, #1]
   13250:	cmp	r2, #34	; 0x22
   13254:	beq	13694 <test@@Base+0xf04>
   13258:	cmp	r2, #92	; 0x5c
   1325c:	mov	r3, r1
   13260:	bne	13240 <test@@Base+0xab0>
   13264:	sub	r3, r5, r1
   13268:	cmp	r3, #1
   1326c:	ble	133ac <test@@Base+0xc1c>
   13270:	add	r3, r1, #1
   13274:	b	13240 <test@@Base+0xab0>
   13278:	ldrb	r3, [r1, #2]
   1327c:	cmp	r3, #32
   13280:	addhi	r4, r1, #2
   13284:	bls	13038 <test@@Base+0x8a8>
   13288:	b	1304c <test@@Base+0x8bc>
   1328c:	ldrb	r2, [r4]
   13290:	lsl	r3, r2, #24
   13294:	str	r3, [sp, #12]
   13298:	mov	r3, #0
   1329c:	str	r3, [sp, #8]
   132a0:	b	12a5c <test@@Base+0x2cc>
   132a4:	mov	r2, #0
   132a8:	mov	r3, #0
   132ac:	b	129f8 <test@@Base+0x268>
   132b0:	mov	r2, #0
   132b4:	mov	r3, #0
   132b8:	b	12a20 <test@@Base+0x290>
   132bc:	mov	r2, #0
   132c0:	mov	r3, #0
   132c4:	b	1295c <test@@Base+0x1cc>
   132c8:	mov	r2, #0
   132cc:	mov	r3, #0
   132d0:	b	12984 <test@@Base+0x1f4>
   132d4:	mov	r2, #0
   132d8:	mov	r3, #0
   132dc:	b	129ac <test@@Base+0x21c>
   132e0:	mov	r2, #0
   132e4:	mov	r3, #0
   132e8:	b	129d4 <test@@Base+0x244>
   132ec:	mov	r1, r0
   132f0:	mov	r3, #7
   132f4:	mov	r2, r5
   132f8:	add	r0, sp, #148	; 0x94
   132fc:	bl	1b93c <flatcc_json_parser_set_error@@Base>
   13300:	cmp	r4, r0
   13304:	bne	130d0 <test@@Base+0x940>
   13308:	b	12f64 <test@@Base+0x7d4>
   1330c:	cmp	r5, r4
   13310:	mov	r1, r4
   13314:	beq	13a30 <test@@Base+0x12a0>
   13318:	ldrb	r2, [r4], #1
   1331c:	cmp	r2, #32
   13320:	bls	13c3c <test@@Base+0x14ac>
   13324:	mov	r3, r2
   13328:	b	12dc8 <test@@Base+0x638>
   1332c:	add	r4, r4, #1
   13330:	mov	r3, #0
   13334:	sub	r1, r5, r4
   13338:	str	r3, [sp, #160]	; 0xa0
   1333c:	b	1294c <test@@Base+0x1bc>
   13340:	mov	r1, r5
   13344:	mov	r3, #20
   13348:	mov	r2, r5
   1334c:	add	r0, sp, #148	; 0x94
   13350:	bl	1b93c <flatcc_json_parser_set_error@@Base>
   13354:	mov	r1, r0
   13358:	b	12fd4 <test@@Base+0x844>
   1335c:	ldrb	r3, [r0, #1]
   13360:	cmp	r3, #32
   13364:	addhi	r0, r0, #1
   13368:	bls	130ec <test@@Base+0x95c>
   1336c:	b	130fc <test@@Base+0x96c>
   13370:	ldrb	r3, [r0, #2]
   13374:	cmp	r3, #32
   13378:	addhi	r4, r0, #2
   1337c:	bls	13130 <test@@Base+0x9a0>
   13380:	b	13144 <test@@Base+0x9b4>
   13384:	add	r1, r1, #1
   13388:	b	12fd4 <test@@Base+0x844>
   1338c:	ldr	sl, [pc, #516]	; 13598 <test@@Base+0xe08>
   13390:	mov	r2, #13
   13394:	mov	r1, #1
   13398:	ldr	r3, [sl]
   1339c:	ldr	r0, [pc, #504]	; 1359c <test@@Base+0xe0c>
   133a0:	bl	12454 <fwrite@plt>
   133a4:	b	1284c <test@@Base+0xbc>
   133a8:	mov	r1, r5
   133ac:	mov	r3, #20
   133b0:	mov	r2, r5
   133b4:	add	r0, sp, #148	; 0x94
   133b8:	bl	1b93c <flatcc_json_parser_set_error@@Base>
   133bc:	mov	r1, r0
   133c0:	b	12e04 <test@@Base+0x674>
   133c4:	mov	r0, r8
   133c8:	bl	18804 <flatcc_builder_end_string@@Base>
   133cc:	mov	r6, r0
   133d0:	cmp	r6, #0
   133d4:	beq	12f64 <test@@Base+0x7d4>
   133d8:	mov	r1, #10
   133dc:	mov	r0, r8
   133e0:	bl	18d70 <flatcc_builder_table_add_offset@@Base>
   133e4:	cmp	r0, #0
   133e8:	beq	12f64 <test@@Base+0x7d4>
   133ec:	cmp	r4, r5
   133f0:	str	r6, [r0]
   133f4:	beq	13408 <test@@Base+0xc78>
   133f8:	ldrb	r3, [r4]
   133fc:	cmp	r3, #34	; 0x22
   13400:	addeq	r0, r4, #1
   13404:	beq	130d0 <test@@Base+0x940>
   13408:	mov	r1, r4
   1340c:	mov	r3, #20
   13410:	mov	r2, r5
   13414:	add	r0, sp, #148	; 0x94
   13418:	bl	1b93c <flatcc_json_parser_set_error@@Base>
   1341c:	b	130d0 <test@@Base+0x940>
   13420:	ldrb	r3, [r1, #1]
   13424:	cmp	r3, #32
   13428:	addhi	r1, r1, #1
   1342c:	bls	12ff0 <test@@Base+0x860>
   13430:	b	13000 <test@@Base+0x870>
   13434:	mov	r1, r0
   13438:	mov	r3, #8
   1343c:	mov	r2, r5
   13440:	add	r0, sp, #148	; 0x94
   13444:	bl	1b93c <flatcc_json_parser_set_error@@Base>
   13448:	b	13300 <test@@Base+0xb70>
   1344c:	mov	r1, r4
   13450:	mov	r3, #5
   13454:	mov	r2, r5
   13458:	add	r0, sp, #148	; 0x94
   1345c:	bl	1b93c <flatcc_json_parser_set_error@@Base>
   13460:	mov	r4, r0
   13464:	sub	r1, r5, r0
   13468:	b	1294c <test@@Base+0x1bc>
   1346c:	sub	r2, r0, r7
   13470:	mov	r1, r7
   13474:	mov	r0, r8
   13478:	bl	18534 <flatcc_builder_create_string@@Base>
   1347c:	mov	r6, r0
   13480:	b	133d0 <test@@Base+0xc40>
   13484:	cmp	r5, r1
   13488:	beq	134f4 <test@@Base+0xd64>
   1348c:	ldrb	r3, [r4, #6]
   13490:	cmp	r3, #32
   13494:	bls	134d8 <test@@Base+0xd48>
   13498:	add	r4, r4, #7
   1349c:	cmp	r3, #46	; 0x2e
   134a0:	cmpne	r3, #95	; 0x5f
   134a4:	sub	r1, r4, #1
   134a8:	beq	135a0 <test@@Base+0xe10>
   134ac:	sub	r2, r3, #48	; 0x30
   134b0:	tst	r3, #128	; 0x80
   134b4:	uxtb	r2, r2
   134b8:	bne	135a0 <test@@Base+0xe10>
   134bc:	orr	r0, r3, #32
   134c0:	sub	r0, r0, #97	; 0x61
   134c4:	cmp	r2, #9
   134c8:	uxtb	r0, r0
   134cc:	bls	135a0 <test@@Base+0xe10>
   134d0:	cmp	r0, #25
   134d4:	bls	135a0 <test@@Base+0xe10>
   134d8:	sub	r3, r5, r1
   134dc:	cmp	r3, #1
   134e0:	ble	134f4 <test@@Base+0xd64>
   134e4:	ldrb	r3, [r1]
   134e8:	cmp	r3, #32
   134ec:	bhi	13504 <test@@Base+0xd74>
   134f0:	beq	13aa8 <test@@Base+0x1318>
   134f4:	mov	r2, r5
   134f8:	add	r0, sp, #148	; 0x94
   134fc:	bl	1ba3c <flatcc_json_parser_space_ext@@Base>
   13500:	mov	r1, r0
   13504:	cmp	r5, r1
   13508:	beq	12d14 <test@@Base+0x584>
   1350c:	bls	136dc <test@@Base+0xf4c>
   13510:	ldrb	r3, [r1]
   13514:	cmp	r3, #58	; 0x3a
   13518:	bne	136dc <test@@Base+0xf4c>
   1351c:	add	r4, r1, #1
   13520:	sub	r3, r5, r4
   13524:	cmp	r3, #1
   13528:	ble	1353c <test@@Base+0xdac>
   1352c:	ldrb	r3, [r1, #1]
   13530:	cmp	r3, #32
   13534:	bhi	13550 <test@@Base+0xdc0>
   13538:	beq	13abc <test@@Base+0x132c>
   1353c:	mov	r1, r4
   13540:	mov	r2, r5
   13544:	add	r0, sp, #148	; 0x94
   13548:	bl	1ba3c <flatcc_json_parser_space_ext@@Base>
   1354c:	mov	r4, r0
   13550:	cmp	r5, r4
   13554:	beq	1338c <test@@Base+0xbfc>
   13558:	mov	r3, #8
   1355c:	mov	r2, r3
   13560:	mov	r1, #1
   13564:	mov	r0, r8
   13568:	bl	189d4 <flatcc_builder_table_add@@Base>
   1356c:	subs	r3, r0, #0
   13570:	beq	12f64 <test@@Base+0x7d4>
   13574:	mov	r2, r5
   13578:	mov	r1, r4
   1357c:	add	r0, sp, #148	; 0x94
   13580:	bl	1c66c <flatcc_json_parser_double@@Base>
   13584:	cmp	r0, r4
   13588:	bne	130d0 <test@@Base+0x940>
   1358c:	b	12f64 <test@@Base+0x7d4>
   13590:	cdpvs	0, 6, cr0, cr4, cr0, {0}
   13594:	cmnvc	r5, #-1140850687	; 0xbc000001
   13598:	andeq	r3, r3, r8, asr #1
   1359c:	ldrdeq	r0, [r2], -r4
   135a0:	cmp	r5, r4
   135a4:	mov	r1, r4
   135a8:	beq	13b74 <test@@Base+0x13e4>
   135ac:	ldrb	r2, [r4], #1
   135b0:	cmp	r2, #32
   135b4:	bls	13c54 <test@@Base+0x14c4>
   135b8:	mov	r3, r2
   135bc:	b	1349c <test@@Base+0xd0c>
   135c0:	sub	r3, r3, #1
   135c4:	cmp	r3, #7
   135c8:	ldrls	pc, [pc, r3, lsl #2]
   135cc:	b	13c48 <test@@Base+0x14b8>
   135d0:	andeq	r3, r1, r8, lsl r6
   135d4:	andeq	r3, r1, r0, lsl r6
   135d8:	andeq	r3, r1, r8, lsl #12
   135dc:	andeq	r3, r1, r0, lsl #12
   135e0:	strdeq	r3, [r1], -r8
   135e4:	strdeq	r3, [r1], -r0
   135e8:	andeq	r2, r1, r0, ror #22
   135ec:	andeq	r2, r1, r0, ror #22
   135f0:	mov	r3, #0
   135f4:	b	12b80 <test@@Base+0x3f0>
   135f8:	mov	r3, #0
   135fc:	b	12ba0 <test@@Base+0x410>
   13600:	mov	r3, #0
   13604:	b	12bc0 <test@@Base+0x430>
   13608:	mov	r3, #0
   1360c:	b	12bdc <test@@Base+0x44c>
   13610:	mov	r3, #0
   13614:	b	12bfc <test@@Base+0x46c>
   13618:	mov	r3, #0
   1361c:	b	12c1c <test@@Base+0x48c>
   13620:	add	r1, pc, #976	; 0x3d0
   13624:	ldrd	r0, [r1]
   13628:	cmp	r7, r1
   1362c:	cmpeq	r2, r0
   13630:	bne	13c48 <test@@Base+0x14b8>
   13634:	ldr	r3, [sp, #160]	; 0xa0
   13638:	add	r1, ip, #4
   1363c:	cmp	r3, #0
   13640:	bne	1389c <test@@Base+0x110c>
   13644:	cmp	r5, r1
   13648:	beq	13a90 <test@@Base+0x1300>
   1364c:	ldrb	r2, [ip, #4]
   13650:	cmp	r2, #34	; 0x22
   13654:	bne	13674 <test@@Base+0xee4>
   13658:	b	13b6c <test@@Base+0x13dc>
   1365c:	add	r1, r3, #1
   13660:	cmp	r5, r1
   13664:	beq	13a8c <test@@Base+0x12fc>
   13668:	ldrb	r2, [r3, #1]
   1366c:	cmp	r2, #34	; 0x22
   13670:	beq	13b6c <test@@Base+0x13dc>
   13674:	cmp	r2, #92	; 0x5c
   13678:	mov	r3, r1
   1367c:	bne	1365c <test@@Base+0xecc>
   13680:	sub	r3, r5, r1
   13684:	cmp	r3, #1
   13688:	ble	13a90 <test@@Base+0x1300>
   1368c:	add	r3, r1, #1
   13690:	b	1365c <test@@Base+0xecc>
   13694:	add	r1, r1, #1
   13698:	b	12e04 <test@@Base+0x674>
   1369c:	cmp	r3, #46	; 0x2e
   136a0:	mov	r1, r5
   136a4:	bne	12ff0 <test@@Base+0x860>
   136a8:	mov	r3, #5
   136ac:	mov	r2, r5
   136b0:	add	r0, sp, #148	; 0x94
   136b4:	bl	1b93c <flatcc_json_parser_set_error@@Base>
   136b8:	mov	r1, r0
   136bc:	b	12fd4 <test@@Base+0x844>
   136c0:	mov	r1, r5
   136c4:	mov	r3, #20
   136c8:	mov	r2, r5
   136cc:	add	r0, sp, #148	; 0x94
   136d0:	bl	1b93c <flatcc_json_parser_set_error@@Base>
   136d4:	mov	r1, r0
   136d8:	b	134d8 <test@@Base+0xd48>
   136dc:	mov	r6, r1
   136e0:	ldr	sl, [pc, #792]	; 13a00 <test@@Base+0x1270>
   136e4:	mov	r2, #58	; 0x3a
   136e8:	b	12828 <test@@Base+0x98>
   136ec:	ldrb	r3, [r1, #1]
   136f0:	cmp	r3, #32
   136f4:	addhi	r1, r1, #1
   136f8:	bls	12e20 <test@@Base+0x690>
   136fc:	b	12e30 <test@@Base+0x6a0>
   13700:	ldrb	r3, [r1, #2]
   13704:	cmp	r3, #32
   13708:	addhi	r4, r1, #2
   1370c:	bls	12e68 <test@@Base+0x6d8>
   13710:	b	12e7c <test@@Base+0x6ec>
   13714:	cmp	r5, r1
   13718:	beq	13784 <test@@Base+0xff4>
   1371c:	ldrb	r3, [ip, #4]
   13720:	cmp	r3, #32
   13724:	bls	13768 <test@@Base+0xfd8>
   13728:	add	ip, ip, #5
   1372c:	cmp	r3, #46	; 0x2e
   13730:	cmpne	r3, #95	; 0x5f
   13734:	sub	r1, ip, #1
   13738:	beq	1387c <test@@Base+0x10ec>
   1373c:	sub	r2, r3, #48	; 0x30
   13740:	tst	r3, #128	; 0x80
   13744:	uxtb	r2, r2
   13748:	bne	1387c <test@@Base+0x10ec>
   1374c:	orr	r0, r3, #32
   13750:	sub	r0, r0, #97	; 0x61
   13754:	cmp	r2, #9
   13758:	uxtb	r0, r0
   1375c:	bls	1387c <test@@Base+0x10ec>
   13760:	cmp	r0, #25
   13764:	bls	1387c <test@@Base+0x10ec>
   13768:	sub	r3, r5, r1
   1376c:	cmp	r3, #1
   13770:	ble	13784 <test@@Base+0xff4>
   13774:	ldrb	r3, [r1]
   13778:	cmp	r3, #32
   1377c:	bhi	13794 <test@@Base+0x1004>
   13780:	beq	13b98 <test@@Base+0x1408>
   13784:	mov	r2, r5
   13788:	add	r0, sp, #148	; 0x94
   1378c:	bl	1ba3c <flatcc_json_parser_space_ext@@Base>
   13790:	mov	r1, r0
   13794:	cmp	r5, r1
   13798:	beq	12d14 <test@@Base+0x584>
   1379c:	bls	136dc <test@@Base+0xf4c>
   137a0:	ldrb	r3, [r1]
   137a4:	cmp	r3, #58	; 0x3a
   137a8:	bne	136dc <test@@Base+0xf4c>
   137ac:	add	r4, r1, #1
   137b0:	sub	r3, r5, r4
   137b4:	cmp	r3, #1
   137b8:	ble	137cc <test@@Base+0x103c>
   137bc:	ldrb	r3, [r1, #1]
   137c0:	cmp	r3, #32
   137c4:	bhi	137e0 <test@@Base+0x1050>
   137c8:	beq	13bc0 <test@@Base+0x1430>
   137cc:	mov	r1, r4
   137d0:	mov	r2, r5
   137d4:	add	r0, sp, #148	; 0x94
   137d8:	bl	1ba3c <flatcc_json_parser_space_ext@@Base>
   137dc:	mov	r4, r0
   137e0:	cmp	r5, r4
   137e4:	beq	1338c <test@@Base+0xbfc>
   137e8:	mov	r3, #4
   137ec:	mov	r2, r3
   137f0:	mov	r1, #2
   137f4:	mov	r0, r8
   137f8:	bl	189d4 <flatcc_builder_table_add@@Base>
   137fc:	subs	r3, r0, #0
   13800:	str	r3, [sp, #116]	; 0x74
   13804:	beq	12f64 <test@@Base+0x7d4>
   13808:	add	ip, sp, #192	; 0xc0
   1380c:	mov	r2, #0
   13810:	mov	r3, #0
   13814:	mov	r1, #0
   13818:	str	r1, [ip, #-60]!	; 0xffffffc4
   1381c:	strd	r2, [sp, #136]	; 0x88
   13820:	mov	r3, ip
   13824:	ldr	ip, [sp, #116]	; 0x74
   13828:	add	r0, sp, #136	; 0x88
   1382c:	mov	r2, r5
   13830:	str	r1, [ip]
   13834:	str	r0, [sp]
   13838:	mov	r1, r4
   1383c:	add	r0, sp, #148	; 0x94
   13840:	bl	1e6e0 <flatcc_json_parser_integer@@Base>
   13844:	cmp	r4, r0
   13848:	beq	12f64 <test@@Base+0x7d4>
   1384c:	ldr	r3, [sp, #132]	; 0x84
   13850:	cmp	r3, #0
   13854:	bne	13434 <test@@Base+0xca4>
   13858:	ldrd	r2, [sp, #136]	; 0x88
   1385c:	mov	r7, #0
   13860:	mvn	r6, #0
   13864:	cmp	r3, r7
   13868:	cmpeq	r2, r6
   1386c:	bhi	132ec <test@@Base+0xb5c>
   13870:	ldr	r1, [sp, #116]	; 0x74
   13874:	str	r2, [r1]
   13878:	b	130d0 <test@@Base+0x940>
   1387c:	cmp	r5, ip
   13880:	mov	r1, ip
   13884:	beq	13bf4 <test@@Base+0x1464>
   13888:	ldrb	r2, [ip], #1
   1388c:	cmp	r2, #32
   13890:	bls	13c60 <test@@Base+0x14d0>
   13894:	mov	r3, r2
   13898:	b	1372c <test@@Base+0xf9c>
   1389c:	cmp	r5, r1
   138a0:	beq	1390c <test@@Base+0x117c>
   138a4:	ldrb	r3, [ip, #4]
   138a8:	cmp	r3, #32
   138ac:	bls	138f0 <test@@Base+0x1160>
   138b0:	add	ip, ip, #5
   138b4:	cmp	r3, #46	; 0x2e
   138b8:	cmpne	r3, #95	; 0x5f
   138bc:	sub	r1, ip, #1
   138c0:	beq	13a08 <test@@Base+0x1278>
   138c4:	sub	r2, r3, #48	; 0x30
   138c8:	tst	r3, #128	; 0x80
   138cc:	uxtb	r2, r2
   138d0:	bne	13a08 <test@@Base+0x1278>
   138d4:	orr	r0, r3, #32
   138d8:	sub	r0, r0, #97	; 0x61
   138dc:	cmp	r2, #9
   138e0:	uxtb	r0, r0
   138e4:	bls	13a08 <test@@Base+0x1278>
   138e8:	cmp	r0, #25
   138ec:	bls	13a08 <test@@Base+0x1278>
   138f0:	sub	r3, r5, r1
   138f4:	cmp	r3, #1
   138f8:	ble	1390c <test@@Base+0x117c>
   138fc:	ldrb	r3, [r1]
   13900:	cmp	r3, #32
   13904:	bhi	1391c <test@@Base+0x118c>
   13908:	beq	13bac <test@@Base+0x141c>
   1390c:	mov	r2, r5
   13910:	add	r0, sp, #148	; 0x94
   13914:	bl	1ba3c <flatcc_json_parser_space_ext@@Base>
   13918:	mov	r1, r0
   1391c:	cmp	r5, r1
   13920:	beq	12d14 <test@@Base+0x584>
   13924:	bls	136dc <test@@Base+0xf4c>
   13928:	ldrb	r3, [r1]
   1392c:	cmp	r3, #58	; 0x3a
   13930:	bne	136dc <test@@Base+0xf4c>
   13934:	add	r4, r1, #1
   13938:	sub	r3, r5, r4
   1393c:	cmp	r3, #1
   13940:	ble	13954 <test@@Base+0x11c4>
   13944:	ldrb	r3, [r1, #1]
   13948:	cmp	r3, #32
   1394c:	bhi	13968 <test@@Base+0x11d8>
   13950:	beq	13bd4 <test@@Base+0x1444>
   13954:	mov	r1, r4
   13958:	mov	r2, r5
   1395c:	add	r0, sp, #148	; 0x94
   13960:	bl	1ba3c <flatcc_json_parser_space_ext@@Base>
   13964:	mov	r4, r0
   13968:	cmp	r5, r4
   1396c:	beq	1338c <test@@Base+0xbfc>
   13970:	mov	r3, #8
   13974:	mov	r2, r3
   13978:	mov	r1, #3
   1397c:	mov	r0, r8
   13980:	bl	189d4 <flatcc_builder_table_add@@Base>
   13984:	subs	r6, r0, #0
   13988:	beq	12f64 <test@@Base+0x7d4>
   1398c:	mov	r0, #0
   13990:	mov	r1, #0
   13994:	add	r3, sp, #192	; 0xc0
   13998:	mov	ip, #0
   1399c:	add	r2, sp, #136	; 0x88
   139a0:	strd	r0, [sp, #136]	; 0x88
   139a4:	str	ip, [r3, #-60]!	; 0xffffffc4
   139a8:	strd	r0, [r6]
   139ac:	str	r2, [sp]
   139b0:	mov	r1, r4
   139b4:	mov	r2, r5
   139b8:	add	r0, sp, #148	; 0x94
   139bc:	bl	1e6e0 <flatcc_json_parser_integer@@Base>
   139c0:	cmp	r4, r0
   139c4:	beq	12f64 <test@@Base+0x7d4>
   139c8:	ldr	r1, [sp, #132]	; 0x84
   139cc:	ldrd	r2, [sp, #136]	; 0x88
   139d0:	cmp	r1, #0
   139d4:	beq	13ad0 <test@@Base+0x1340>
   139d8:	cmp	r3, #-2147483648	; 0x80000000
   139dc:	cmpeq	r2, #0
   139e0:	bhi	13434 <test@@Base+0xca4>
   139e4:	rsbs	r2, r2, #0
   139e8:	rsc	r3, r3, #0
   139ec:	strd	r2, [r6]
   139f0:	b	130d0 <test@@Base+0x940>
   139f4:	nop			; (mov r0, r0)
   139f8:	andeq	r0, r0, r0
   139fc:	stfvse	f6, [r5], #-400	; 0xfffffe70
   13a00:	andeq	r3, r3, r8, asr #1
   13a04:	strdeq	r0, [r2], -ip
   13a08:	cmp	r5, ip
   13a0c:	mov	r1, ip
   13a10:	beq	13c18 <test@@Base+0x1488>
   13a14:	ldrb	r2, [ip], #1
   13a18:	cmp	r2, #32
   13a1c:	bls	13c6c <test@@Base+0x14dc>
   13a20:	mov	r3, r2
   13a24:	b	138b4 <test@@Base+0x1124>
   13a28:	add	r1, r1, #1
   13a2c:	b	134d8 <test@@Base+0xd48>
   13a30:	cmp	r3, #46	; 0x2e
   13a34:	mov	r1, r5
   13a38:	bne	12e20 <test@@Base+0x690>
   13a3c:	mov	r3, #5
   13a40:	mov	r2, r5
   13a44:	add	r0, sp, #148	; 0x94
   13a48:	bl	1b93c <flatcc_json_parser_set_error@@Base>
   13a4c:	mov	r1, r0
   13a50:	b	12e04 <test@@Base+0x674>
   13a54:	mov	r2, r5
   13a58:	mov	r1, r4
   13a5c:	add	r0, sp, #148	; 0x94
   13a60:	mov	r3, #13
   13a64:	bl	1b93c <flatcc_json_parser_set_error@@Base>
   13a68:	mov	r4, r0
   13a6c:	b	12f64 <test@@Base+0x7d4>
   13a70:	mov	r1, r5
   13a74:	mov	r3, #20
   13a78:	mov	r2, r5
   13a7c:	add	r0, sp, #148	; 0x94
   13a80:	bl	1b93c <flatcc_json_parser_set_error@@Base>
   13a84:	mov	r1, r0
   13a88:	b	13768 <test@@Base+0xfd8>
   13a8c:	mov	r1, r5
   13a90:	mov	r3, #20
   13a94:	mov	r2, r5
   13a98:	add	r0, sp, #148	; 0x94
   13a9c:	bl	1b93c <flatcc_json_parser_set_error@@Base>
   13aa0:	mov	r1, r0
   13aa4:	b	138f0 <test@@Base+0x1160>
   13aa8:	ldrb	r3, [r1, #1]
   13aac:	cmp	r3, #32
   13ab0:	addhi	r1, r1, #1
   13ab4:	bls	134f4 <test@@Base+0xd64>
   13ab8:	b	13504 <test@@Base+0xd74>
   13abc:	ldrb	r3, [r1, #2]
   13ac0:	cmp	r3, #32
   13ac4:	addhi	r4, r1, #2
   13ac8:	bls	1353c <test@@Base+0xdac>
   13acc:	b	13550 <test@@Base+0xdc0>
   13ad0:	cmp	r2, #0
   13ad4:	sbcs	r1, r3, #0
   13ad8:	blt	132ec <test@@Base+0xb5c>
   13adc:	strd	r2, [r6]
   13ae0:	b	130d0 <test@@Base+0x940>
   13ae4:	cmp	r5, r0
   13ae8:	mov	r7, r0
   13aec:	bls	13164 <test@@Base+0x9d4>
   13af0:	cmp	r3, #125	; 0x7d
   13af4:	bne	13164 <test@@Base+0x9d4>
   13af8:	mov	r0, r8
   13afc:	bl	172a8 <flatcc_builder_end_table@@Base>
   13b00:	add	r4, r7, #1
   13b04:	mov	r1, r0
   13b08:	mov	r0, r8
   13b0c:	bl	14e14 <flatcc_builder_end_buffer@@Base>
   13b10:	sub	r3, r5, r4
   13b14:	cmp	r3, #1
   13b18:	ble	13b2c <test@@Base+0x139c>
   13b1c:	ldrb	r3, [r7, #1]
   13b20:	cmp	r3, #32
   13b24:	bhi	13b40 <test@@Base+0x13b0>
   13b28:	beq	13c78 <test@@Base+0x14e8>
   13b2c:	mov	r1, r4
   13b30:	add	r0, sp, #148	; 0x94
   13b34:	mov	r2, r5
   13b38:	bl	1ba3c <flatcc_json_parser_space_ext@@Base>
   13b3c:	mov	r4, r0
   13b40:	cmp	r5, r4
   13b44:	ldr	sl, [pc, #-332]	; 13a00 <test@@Base+0x1270>
   13b48:	beq	1284c <test@@Base+0xbc>
   13b4c:	mov	r2, #26
   13b50:	mov	r1, #1
   13b54:	ldr	r3, [sl]
   13b58:	ldr	r0, [pc, #-348]	; 13a04 <test@@Base+0x1274>
   13b5c:	bl	12454 <fwrite@plt>
   13b60:	b	1284c <test@@Base+0xbc>
   13b64:	add	r1, r1, #1
   13b68:	b	13768 <test@@Base+0xfd8>
   13b6c:	add	r1, r1, #1
   13b70:	b	138f0 <test@@Base+0x1160>
   13b74:	cmp	r3, #46	; 0x2e
   13b78:	mov	r1, r5
   13b7c:	bne	134f4 <test@@Base+0xd64>
   13b80:	mov	r3, #5
   13b84:	mov	r2, r5
   13b88:	add	r0, sp, #148	; 0x94
   13b8c:	bl	1b93c <flatcc_json_parser_set_error@@Base>
   13b90:	mov	r1, r0
   13b94:	b	134d8 <test@@Base+0xd48>
   13b98:	ldrb	r3, [r1, #1]
   13b9c:	cmp	r3, #32
   13ba0:	addhi	r1, r1, #1
   13ba4:	bls	13784 <test@@Base+0xff4>
   13ba8:	b	13794 <test@@Base+0x1004>
   13bac:	ldrb	r3, [r1, #1]
   13bb0:	cmp	r3, #32
   13bb4:	addhi	r1, r1, #1
   13bb8:	bls	1390c <test@@Base+0x117c>
   13bbc:	b	1391c <test@@Base+0x118c>
   13bc0:	ldrb	r3, [r1, #2]
   13bc4:	cmp	r3, #32
   13bc8:	addhi	r4, r1, #2
   13bcc:	bls	137cc <test@@Base+0x103c>
   13bd0:	b	137e0 <test@@Base+0x1050>
   13bd4:	ldrb	r3, [r1, #2]
   13bd8:	cmp	r3, #32
   13bdc:	addhi	r4, r1, #2
   13be0:	bls	13954 <test@@Base+0x11c4>
   13be4:	b	13968 <test@@Base+0x11d8>
   13be8:	cmp	r3, #46	; 0x2e
   13bec:	beq	136a8 <test@@Base+0xf18>
   13bf0:	b	12fd4 <test@@Base+0x844>
   13bf4:	cmp	r3, #46	; 0x2e
   13bf8:	mov	r1, r5
   13bfc:	bne	13784 <test@@Base+0xff4>
   13c00:	mov	r3, #5
   13c04:	mov	r2, r5
   13c08:	add	r0, sp, #148	; 0x94
   13c0c:	bl	1b93c <flatcc_json_parser_set_error@@Base>
   13c10:	mov	r1, r0
   13c14:	b	13768 <test@@Base+0xfd8>
   13c18:	cmp	r3, #46	; 0x2e
   13c1c:	mov	r1, r5
   13c20:	bne	1390c <test@@Base+0x117c>
   13c24:	mov	r3, #5
   13c28:	mov	r2, r5
   13c2c:	add	r0, sp, #148	; 0x94
   13c30:	bl	1b93c <flatcc_json_parser_set_error@@Base>
   13c34:	mov	r1, r0
   13c38:	b	138f0 <test@@Base+0x1160>
   13c3c:	cmp	r3, #46	; 0x2e
   13c40:	beq	13a3c <test@@Base+0x12ac>
   13c44:	b	12e04 <test@@Base+0x674>
   13c48:	mov	r2, r5
   13c4c:	mov	r1, ip
   13c50:	b	13a5c <test@@Base+0x12cc>
   13c54:	cmp	r3, #46	; 0x2e
   13c58:	beq	13b80 <test@@Base+0x13f0>
   13c5c:	b	134d8 <test@@Base+0xd48>
   13c60:	cmp	r3, #46	; 0x2e
   13c64:	beq	13c00 <test@@Base+0x1470>
   13c68:	b	13768 <test@@Base+0xfd8>
   13c6c:	cmp	r3, #46	; 0x2e
   13c70:	beq	13c24 <test@@Base+0x1494>
   13c74:	b	138f0 <test@@Base+0x1160>
   13c78:	ldrb	r3, [r7, #2]
   13c7c:	cmp	r3, #32
   13c80:	addhi	r4, r7, #2
   13c84:	bls	13b2c <test@@Base+0x139c>
   13c88:	b	13b40 <test@@Base+0x13b0>

00013c8c <flatcc_builder_default_alloc@@Base>:
   13c8c:	push	{r4, r5, r6, r7, r8, lr}
   13c90:	subs	r5, r2, #0
   13c94:	mov	r6, r1
   13c98:	bne	13cbc <flatcc_builder_default_alloc@@Base+0x30>
   13c9c:	ldr	r0, [r1]
   13ca0:	cmp	r0, #0
   13ca4:	popeq	{r4, r5, r6, r7, r8, pc}
   13ca8:	bl	12424 <free@plt>
   13cac:	str	r5, [r6]
   13cb0:	str	r5, [r6, #4]
   13cb4:	mov	r0, r5
   13cb8:	pop	{r4, r5, r6, r7, r8, pc}
   13cbc:	mov	r7, r3
   13cc0:	ldr	r3, [sp, #24]
   13cc4:	sub	r2, r3, #1
   13cc8:	cmp	r2, #6
   13ccc:	ldrls	pc, [pc, r2, lsl #2]
   13cd0:	b	13d6c <flatcc_builder_default_alloc@@Base+0xe0>
   13cd4:	andeq	r3, r1, r0, asr #26
   13cd8:	andeq	r3, r1, ip, ror #26
   13cdc:	andeq	r3, r1, ip, ror #26
   13ce0:	andeq	r3, r1, r4, ror #26
   13ce4:	strdeq	r3, [r1], -r0
   13ce8:	andeq	r3, r1, ip, ror #26
   13cec:	andeq	r3, r1, ip, asr sp
   13cf0:	mov	r4, r5
   13cf4:	ldr	r3, [r6, #4]
   13cf8:	cmp	r5, r3
   13cfc:	bhi	13d08 <flatcc_builder_default_alloc@@Base+0x7c>
   13d00:	cmp	r4, r3, lsr #1
   13d04:	bls	13d74 <flatcc_builder_default_alloc@@Base+0xe8>
   13d08:	mov	r1, r4
   13d0c:	ldr	r0, [r6]
   13d10:	bl	12448 <realloc@plt>
   13d14:	subs	r5, r0, #0
   13d18:	beq	13d90 <flatcc_builder_default_alloc@@Base+0x104>
   13d1c:	cmp	r7, #0
   13d20:	beq	13d30 <flatcc_builder_default_alloc@@Base+0xa4>
   13d24:	ldr	r0, [r6, #4]
   13d28:	cmp	r0, r4
   13d2c:	bcc	13d7c <flatcc_builder_default_alloc@@Base+0xf0>
   13d30:	str	r5, [r6]
   13d34:	str	r4, [r6, #4]
   13d38:	mov	r0, #0
   13d3c:	pop	{r4, r5, r6, r7, r8, pc}
   13d40:	mov	r4, #256	; 0x100
   13d44:	cmp	r5, r4
   13d48:	bls	13cf4 <flatcc_builder_default_alloc@@Base+0x68>
   13d4c:	lsl	r4, r4, #1
   13d50:	cmp	r5, r4
   13d54:	bhi	13d4c <flatcc_builder_default_alloc@@Base+0xc0>
   13d58:	b	13cf4 <flatcc_builder_default_alloc@@Base+0x68>
   13d5c:	mov	r4, #64	; 0x40
   13d60:	b	13d44 <flatcc_builder_default_alloc@@Base+0xb8>
   13d64:	mov	r4, #288	; 0x120
   13d68:	b	13d44 <flatcc_builder_default_alloc@@Base+0xb8>
   13d6c:	mov	r4, #32
   13d70:	b	13d44 <flatcc_builder_default_alloc@@Base+0xb8>
   13d74:	mov	r0, #0
   13d78:	pop	{r4, r5, r6, r7, r8, pc}
   13d7c:	sub	r2, r4, r0
   13d80:	mov	r1, #0
   13d84:	add	r0, r5, r0
   13d88:	bl	124a8 <memset@plt>
   13d8c:	b	13d30 <flatcc_builder_default_alloc@@Base+0xa4>
   13d90:	mvn	r0, #0
   13d94:	pop	{r4, r5, r6, r7, r8, pc}
   13d98:	push	{r4, r5, r6, r7, r8, lr}
   13d9c:	mov	r5, r0
   13da0:	ldrh	r0, [r0, #128]	; 0x80
   13da4:	sub	sp, sp, #88	; 0x58
   13da8:	mov	r7, #4
   13dac:	cmp	r0, #3
   13db0:	movls	r0, #4
   13db4:	strhls	r0, [r5, #128]	; 0x80
   13db8:	ldr	r0, [r5, #136]	; 0x88
   13dbc:	lsls	r4, r2, #2
   13dc0:	mov	r8, #1
   13dc4:	str	r7, [sp, #16]
   13dc8:	str	r8, [sp, #20]
   13dcc:	and	ip, r0, #3
   13dd0:	movne	r8, #2
   13dd4:	str	r7, [sp, #28]
   13dd8:	addne	r7, r4, r7
   13ddc:	strne	r4, [sp, #36]	; 0x24
   13de0:	add	lr, sp, #12
   13de4:	strne	r1, [sp, #32]
   13de8:	strne	r7, [sp, #16]
   13dec:	strne	r8, [sp, #20]
   13df0:	movne	r4, #3
   13df4:	moveq	r4, #2
   13df8:	cmp	ip, #0
   13dfc:	str	r2, [sp, #12]
   13e00:	str	lr, [sp, #24]
   13e04:	beq	13e30 <flatcc_builder_default_alloc@@Base+0x1a4>
   13e08:	add	lr, r8, #1
   13e0c:	add	r8, sp, #88	; 0x58
   13e10:	add	lr, r8, lr, lsl #3
   13e14:	ldr	r6, [pc, #320]	; 13f5c <flatcc_builder_default_alloc@@Base+0x2d0>
   13e18:	mov	r8, r4
   13e1c:	add	r7, r7, ip
   13e20:	str	ip, [lr, #-68]	; 0xffffffbc
   13e24:	str	r7, [sp, #16]
   13e28:	str	r4, [sp, #20]
   13e2c:	str	r6, [lr, #-72]	; 0xffffffb8
   13e30:	cmp	r2, #0
   13e34:	sub	r4, r0, r7
   13e38:	beq	13ecc <flatcc_builder_default_alloc@@Base+0x240>
   13e3c:	cmp	r3, #0
   13e40:	addne	r6, r3, r2
   13e44:	mvnne	r0, #3
   13e48:	bne	13e7c <flatcc_builder_default_alloc@@Base+0x1f0>
   13e4c:	b	13f08 <flatcc_builder_default_alloc@@Base+0x27c>
   13e50:	sub	lr, r0, r4
   13e54:	add	ip, lr, ip
   13e58:	str	ip, [r1]
   13e5c:	ldrb	ip, [r3]
   13e60:	cmp	ip, #0
   13e64:	beq	13f30 <flatcc_builder_default_alloc@@Base+0x2a4>
   13e68:	add	r3, r3, #1
   13e6c:	cmp	r3, r6
   13e70:	add	r1, r1, #4
   13e74:	sub	r0, r0, #4
   13e78:	beq	13ec4 <flatcc_builder_default_alloc@@Base+0x238>
   13e7c:	ldr	ip, [r1]
   13e80:	cmp	ip, #0
   13e84:	bne	13e50 <flatcc_builder_default_alloc@@Base+0x1c4>
   13e88:	ldrb	ip, [r3]
   13e8c:	cmp	ip, #0
   13e90:	beq	13e68 <flatcc_builder_default_alloc@@Base+0x1dc>
   13e94:	ldr	r3, [pc, #196]	; 13f60 <flatcc_builder_default_alloc@@Base+0x2d4>
   13e98:	ldr	r2, [pc, #196]	; 13f64 <flatcc_builder_default_alloc@@Base+0x2d8>
   13e9c:	ldr	r1, [pc, #196]	; 13f68 <flatcc_builder_default_alloc@@Base+0x2dc>
   13ea0:	ldr	r0, [pc, #196]	; 13f6c <flatcc_builder_default_alloc@@Base+0x2e0>
   13ea4:	bl	124d8 <__assert_fail@plt>
   13ea8:	sub	r1, r0, r4
   13eac:	add	r3, r3, #1
   13eb0:	add	r1, r1, lr
   13eb4:	cmp	r2, r3
   13eb8:	str	r1, [ip, #4]!
   13ebc:	sub	r0, r0, #4
   13ec0:	bne	13f10 <flatcc_builder_default_alloc@@Base+0x284>
   13ec4:	ldr	r0, [r5, #136]	; 0x88
   13ec8:	sub	r4, r0, r7
   13ecc:	cmp	r4, r0
   13ed0:	bge	13f58 <flatcc_builder_default_alloc@@Base+0x2cc>
   13ed4:	ldr	r0, [r5, #36]	; 0x24
   13ed8:	mov	r2, r8
   13edc:	str	r7, [sp]
   13ee0:	mov	r3, r4
   13ee4:	ldr	r6, [r5, #44]	; 0x2c
   13ee8:	add	r1, sp, #24
   13eec:	blx	r6
   13ef0:	cmp	r0, #0
   13ef4:	bne	13f44 <flatcc_builder_default_alloc@@Base+0x2b8>
   13ef8:	mov	r0, r4
   13efc:	str	r4, [r5, #136]	; 0x88
   13f00:	add	sp, sp, #88	; 0x58
   13f04:	pop	{r4, r5, r6, r7, r8, pc}
   13f08:	sub	ip, r1, #4
   13f0c:	mvn	r0, #3
   13f10:	ldr	lr, [ip, #4]
   13f14:	cmp	lr, #0
   13f18:	bne	13ea8 <flatcc_builder_default_alloc@@Base+0x21c>
   13f1c:	ldr	r3, [pc, #60]	; 13f60 <flatcc_builder_default_alloc@@Base+0x2d4>
   13f20:	ldr	r2, [pc, #72]	; 13f70 <flatcc_builder_default_alloc@@Base+0x2e4>
   13f24:	ldr	r1, [pc, #60]	; 13f68 <flatcc_builder_default_alloc@@Base+0x2dc>
   13f28:	ldr	r0, [pc, #68]	; 13f74 <flatcc_builder_default_alloc@@Base+0x2e8>
   13f2c:	bl	124d8 <__assert_fail@plt>
   13f30:	ldr	r3, [pc, #40]	; 13f60 <flatcc_builder_default_alloc@@Base+0x2d4>
   13f34:	ldr	r2, [pc, #60]	; 13f78 <flatcc_builder_default_alloc@@Base+0x2ec>
   13f38:	ldr	r1, [pc, #40]	; 13f68 <flatcc_builder_default_alloc@@Base+0x2dc>
   13f3c:	ldr	r0, [pc, #56]	; 13f7c <flatcc_builder_default_alloc@@Base+0x2f0>
   13f40:	bl	124d8 <__assert_fail@plt>
   13f44:	ldr	r3, [pc, #52]	; 13f80 <flatcc_builder_default_alloc@@Base+0x2f4>
   13f48:	ldr	r2, [pc, #52]	; 13f84 <flatcc_builder_default_alloc@@Base+0x2f8>
   13f4c:	ldr	r1, [pc, #20]	; 13f68 <flatcc_builder_default_alloc@@Base+0x2dc>
   13f50:	ldr	r0, [pc, #28]	; 13f74 <flatcc_builder_default_alloc@@Base+0x2e8>
   13f54:	bl	124d8 <__assert_fail@plt>
   13f58:	bl	12534 <__assert_fail@plt+0x5c>
   13f5c:	andeq	r0, r2, ip, asr #27
   13f60:	andeq	r0, r2, ip, asr #31
   13f64:			; <UNDEFINED> instruction: 0x000005b5
   13f68:	andeq	r1, r2, r4, lsl #9
   13f6c:	andeq	r1, r2, r8, asr #10
   13f70:			; <UNDEFINED> instruction: 0x000005b7
   13f74:	andeq	r1, r2, r4, asr #10
   13f78:			; <UNDEFINED> instruction: 0x000005b1
   13f7c:	andeq	r1, r2, r8, lsr r5
   13f80:	andeq	r0, r2, r0, asr sp
   13f84:	andeq	r0, r0, fp, lsl #5
   13f88:	ldrh	r3, [r0, #128]	; 0x80
   13f8c:	push	{r4, r5, r6, r7, lr}
   13f90:	sub	sp, sp, #92	; 0x5c
   13f94:	cmp	r3, #3
   13f98:	movls	r3, #4
   13f9c:	ldr	lr, [r0, #136]	; 0x88
   13fa0:	mov	ip, #4
   13fa4:	strhls	r3, [r0, #128]	; 0x80
   13fa8:	mov	r4, r0
   13fac:	lsls	r6, r2, #2
   13fb0:	mov	r0, #1
   13fb4:	add	r5, sp, #12
   13fb8:	str	ip, [sp, #16]
   13fbc:	str	r0, [sp, #20]
   13fc0:	and	r3, lr, #3
   13fc4:	movne	r0, #2
   13fc8:	str	ip, [sp, #28]
   13fcc:	addne	ip, r6, ip
   13fd0:	str	r5, [sp, #24]
   13fd4:	strne	r6, [sp, #36]	; 0x24
   13fd8:	strne	r1, [sp, #32]
   13fdc:	strne	ip, [sp, #16]
   13fe0:	strne	r0, [sp, #20]
   13fe4:	movne	r5, r0
   13fe8:	movne	r6, #3
   13fec:	moveq	r5, r0
   13ff0:	moveq	r6, #2
   13ff4:	cmp	r3, #0
   13ff8:	str	r2, [sp, #12]
   13ffc:	beq	14028 <flatcc_builder_default_alloc@@Base+0x39c>
   14000:	add	r0, r5, #1
   14004:	add	r5, sp, #88	; 0x58
   14008:	add	r0, r5, r0, lsl #3
   1400c:	ldr	r7, [pc, #204]	; 140e0 <flatcc_builder_default_alloc@@Base+0x454>
   14010:	mov	r5, r6
   14014:	add	ip, ip, r3
   14018:	str	r3, [r0, #-68]	; 0xffffffbc
   1401c:	str	ip, [sp, #16]
   14020:	str	r6, [sp, #20]
   14024:	str	r7, [r0, #-72]	; 0xffffffb8
   14028:	cmp	r2, #0
   1402c:	beq	14088 <flatcc_builder_default_alloc@@Base+0x3fc>
   14030:	ldr	r3, [r1]
   14034:	cmp	r3, #0
   14038:	beq	14070 <flatcc_builder_default_alloc@@Base+0x3e4>
   1403c:	sub	r6, lr, ip
   14040:	mov	r0, #0
   14044:	mvn	lr, #3
   14048:	sub	r3, r3, r6
   1404c:	add	r0, r0, #1
   14050:	add	r3, r3, lr
   14054:	cmp	r2, r0
   14058:	str	r3, [r1]
   1405c:	beq	14084 <flatcc_builder_default_alloc@@Base+0x3f8>
   14060:	ldr	r3, [r1, #4]!
   14064:	sub	lr, lr, #4
   14068:	cmp	r3, #0
   1406c:	bne	14048 <flatcc_builder_default_alloc@@Base+0x3bc>
   14070:	ldr	r3, [pc, #108]	; 140e4 <flatcc_builder_default_alloc@@Base+0x458>
   14074:	ldr	r2, [pc, #108]	; 140e8 <flatcc_builder_default_alloc@@Base+0x45c>
   14078:	ldr	r1, [pc, #108]	; 140ec <flatcc_builder_default_alloc@@Base+0x460>
   1407c:	ldr	r0, [pc, #108]	; 140f0 <flatcc_builder_default_alloc@@Base+0x464>
   14080:	bl	124d8 <__assert_fail@plt>
   14084:	ldr	lr, [r4, #136]	; 0x88
   14088:	sub	r6, lr, ip
   1408c:	cmp	r6, lr
   14090:	bge	140dc <flatcc_builder_default_alloc@@Base+0x450>
   14094:	ldr	r0, [r4, #36]	; 0x24
   14098:	mov	r2, r5
   1409c:	str	ip, [sp]
   140a0:	mov	r3, r6
   140a4:	ldr	r5, [r4, #44]	; 0x2c
   140a8:	add	r1, sp, #24
   140ac:	blx	r5
   140b0:	cmp	r0, #0
   140b4:	bne	140c8 <flatcc_builder_default_alloc@@Base+0x43c>
   140b8:	mov	r0, r6
   140bc:	str	r6, [r4, #136]	; 0x88
   140c0:	add	sp, sp, #92	; 0x5c
   140c4:	pop	{r4, r5, r6, r7, pc}
   140c8:	ldr	r3, [pc, #36]	; 140f4 <flatcc_builder_default_alloc@@Base+0x468>
   140cc:	ldr	r2, [pc, #36]	; 140f8 <flatcc_builder_default_alloc@@Base+0x46c>
   140d0:	ldr	r1, [pc, #20]	; 140ec <flatcc_builder_default_alloc@@Base+0x460>
   140d4:	ldr	r0, [pc, #20]	; 140f0 <flatcc_builder_default_alloc@@Base+0x464>
   140d8:	bl	124d8 <__assert_fail@plt>
   140dc:	bl	12534 <__assert_fail@plt+0x5c>
   140e0:	andeq	r0, r2, ip, asr #27
   140e4:	andeq	r0, r2, ip, asr #31
   140e8:			; <UNDEFINED> instruction: 0x000005b7
   140ec:	andeq	r1, r2, r4, lsl #9
   140f0:	andeq	r1, r2, r4, asr #10
   140f4:	andeq	r0, r2, r0, asr sp
   140f8:	andeq	r0, r0, fp, lsl #5

000140fc <flatcc_builder_flush_vtable_cache@@Base>:
   140fc:	ldr	r3, [r0, #116]	; 0x74
   14100:	cmp	r3, #0
   14104:	bxeq	lr
   14108:	ldr	r2, [r0, #96]	; 0x60
   1410c:	push	{r4, lr}
   14110:	mov	r1, #0
   14114:	mov	r4, r0
   14118:	ldr	r0, [r0, #92]	; 0x5c
   1411c:	bl	124a8 <memset@plt>
   14120:	mov	r2, #16
   14124:	mov	r3, #0
   14128:	str	r2, [r4, #124]	; 0x7c
   1412c:	str	r3, [r4, #120]	; 0x78
   14130:	pop	{r4, pc}

00014134 <flatcc_builder_custom_init@@Base>:
   14134:	push	{r4, r5, r6, r7, r8, lr}
   14138:	mov	r6, r1
   1413c:	mov	r7, r2
   14140:	mov	r1, #0
   14144:	mov	r2, #232	; 0xe8
   14148:	mov	r4, r0
   1414c:	mov	r5, r3
   14150:	ldr	r8, [sp, #24]
   14154:	bl	124a8 <memset@plt>
   14158:	cmp	r6, #0
   1415c:	moveq	r3, #1
   14160:	ldreq	r6, [pc, #40]	; 14190 <flatcc_builder_custom_init@@Base+0x5c>
   14164:	addeq	r7, r4, #188	; 0xbc
   14168:	str	r8, [r4, #40]	; 0x28
   1416c:	str	r7, [r4, #36]	; 0x24
   14170:	str	r6, [r4, #44]	; 0x2c
   14174:	mov	r0, #0
   14178:	streq	r3, [r4, #184]	; 0xb8
   1417c:	ldr	r3, [pc, #16]	; 14194 <flatcc_builder_custom_init@@Base+0x60>
   14180:	cmp	r5, #0
   14184:	moveq	r5, r3
   14188:	str	r5, [r4, #48]	; 0x30
   1418c:	pop	{r4, r5, r6, r7, r8, pc}
   14190:	andeq	r9, r1, r8, ror #13
   14194:	andeq	r3, r1, ip, lsl #25

00014198 <flatcc_builder_init@@Base>:
   14198:	push	{r4, lr}
   1419c:	mov	r2, #232	; 0xe8
   141a0:	mov	r1, #0
   141a4:	mov	r4, r0
   141a8:	bl	124a8 <memset@plt>
   141ac:	ldr	r1, [pc, #32]	; 141d4 <flatcc_builder_init@@Base+0x3c>
   141b0:	ldr	r3, [pc, #32]	; 141d8 <flatcc_builder_init@@Base+0x40>
   141b4:	mov	r0, #1
   141b8:	add	r2, r4, #188	; 0xbc
   141bc:	str	r0, [r4, #184]	; 0xb8
   141c0:	str	r1, [r4, #48]	; 0x30
   141c4:	str	r2, [r4, #36]	; 0x24
   141c8:	str	r3, [r4, #44]	; 0x2c
   141cc:	mov	r0, #0
   141d0:	pop	{r4, pc}
   141d4:	andeq	r3, r1, ip, lsl #25
   141d8:	andeq	r9, r1, r8, ror #13

000141dc <flatcc_builder_custom_reset@@Base>:
   141dc:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   141e0:	add	r7, r0, #52	; 0x34
   141e4:	mov	r4, #0
   141e8:	sub	sp, sp, #12
   141ec:	mov	r5, r0
   141f0:	mov	sl, r1
   141f4:	mov	r8, r2
   141f8:	mov	r6, r7
   141fc:	mov	r9, r4
   14200:	mov	fp, #1
   14204:	b	14258 <flatcc_builder_custom_reset@@Base+0x7c>
   14208:	cmp	r4, #5
   1420c:	cmpne	r8, #0
   14210:	beq	1423c <flatcc_builder_custom_reset@@Base+0x60>
   14214:	ldr	r0, [r5, #40]	; 0x28
   14218:	mov	r3, fp
   1421c:	str	r4, [sp]
   14220:	mov	r2, #1
   14224:	mov	r1, r6
   14228:	ldr	ip, [r5, #48]	; 0x30
   1422c:	blx	ip
   14230:	cmp	r0, #0
   14234:	bne	1430c <flatcc_builder_custom_reset@@Base+0x130>
   14238:	ldr	r0, [r7, r4, lsl #3]
   1423c:	ldr	r2, [r6, #4]
   14240:	mov	r1, r9
   14244:	bl	124a8 <memset@plt>
   14248:	add	r4, r4, #1
   1424c:	cmp	r4, #8
   14250:	add	r6, r6, #8
   14254:	beq	14284 <flatcc_builder_custom_reset@@Base+0xa8>
   14258:	ldr	r0, [r7, r4, lsl #3]
   1425c:	cmp	r0, #0
   14260:	bne	14208 <flatcc_builder_custom_reset@@Base+0x2c>
   14264:	ldr	r3, [r6, #4]
   14268:	cmp	r3, #0
   1426c:	beq	14248 <flatcc_builder_custom_reset@@Base+0x6c>
   14270:	ldr	r3, [pc, #156]	; 14314 <flatcc_builder_custom_reset@@Base+0x138>
   14274:	ldr	r2, [pc, #156]	; 14318 <flatcc_builder_custom_reset@@Base+0x13c>
   14278:	ldr	r1, [pc, #156]	; 1431c <flatcc_builder_custom_reset@@Base+0x140>
   1427c:	ldr	r0, [pc, #156]	; 14320 <flatcc_builder_custom_reset@@Base+0x144>
   14280:	bl	124d8 <__assert_fail@plt>
   14284:	ldr	r2, [r5, #124]	; 0x7c
   14288:	mov	r3, #0
   1428c:	ldr	r0, [r5, #60]	; 0x3c
   14290:	cmp	r2, r3
   14294:	str	r3, [r5, #120]	; 0x78
   14298:	ldr	r1, [r5, #76]	; 0x4c
   1429c:	movne	r3, #16
   142a0:	ldr	r2, [r5, #52]	; 0x34
   142a4:	str	r0, [r5, #16]
   142a8:	ldr	r0, [r5, #184]	; 0xb8
   142ac:	strne	r3, [r5, #124]	; 0x7c
   142b0:	mov	r3, #0
   142b4:	cmp	sl, #0
   142b8:	strne	r3, [r5, #172]	; 0xac
   142bc:	strne	r3, [r5, #176]	; 0xb0
   142c0:	strne	r3, [r5, #180]	; 0xb4
   142c4:	cmp	r0, #0
   142c8:	stm	r5, {r1, r2}
   142cc:	strh	r3, [r5, #128]	; 0x80
   142d0:	str	r3, [r5, #136]	; 0x88
   142d4:	str	r3, [r5, #140]	; 0x8c
   142d8:	str	r3, [r5, #156]	; 0x9c
   142dc:	str	r3, [r5, #160]	; 0xa0
   142e0:	str	r3, [r5, #20]
   142e4:	str	r3, [r5, #24]
   142e8:	str	r3, [r5, #148]	; 0x94
   142ec:	str	r3, [r5, #152]	; 0x98
   142f0:	str	r3, [r5, #32]
   142f4:	beq	14304 <flatcc_builder_custom_reset@@Base+0x128>
   142f8:	add	r0, r5, #188	; 0xbc
   142fc:	bl	195c0 <flatcc_emitter_reset@@Base>
   14300:	mov	r0, #0
   14304:	add	sp, sp, #12
   14308:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1430c:	mvn	r0, #0
   14310:	b	14304 <flatcc_builder_custom_reset@@Base+0x128>
   14314:	andeq	r0, r2, ip, ror #31
   14318:			; <UNDEFINED> instruction: 0x000001b2
   1431c:	andeq	r1, r2, r4, lsl #9
   14320:	andeq	r1, r2, r8, asr r5

00014324 <flatcc_builder_reset@@Base>:
   14324:	push	{r4, r5, r6, r7, r8, lr}
   14328:	mov	r5, r0
   1432c:	add	r4, r0, #52	; 0x34
   14330:	add	r6, r0, #116	; 0x74
   14334:	mov	r7, #0
   14338:	b	14354 <flatcc_builder_reset@@Base+0x30>
   1433c:	ldr	r2, [r4, #4]
   14340:	mov	r1, r7
   14344:	bl	124a8 <memset@plt>
   14348:	add	r4, r4, #8
   1434c:	cmp	r6, r4
   14350:	beq	14380 <flatcc_builder_reset@@Base+0x5c>
   14354:	ldr	r0, [r4]
   14358:	cmp	r0, #0
   1435c:	bne	1433c <flatcc_builder_reset@@Base+0x18>
   14360:	ldr	r3, [r4, #4]
   14364:	cmp	r3, #0
   14368:	beq	14348 <flatcc_builder_reset@@Base+0x24>
   1436c:	ldr	r3, [pc, #128]	; 143f4 <flatcc_builder_reset@@Base+0xd0>
   14370:	ldr	r2, [pc, #128]	; 143f8 <flatcc_builder_reset@@Base+0xd4>
   14374:	ldr	r1, [pc, #128]	; 143fc <flatcc_builder_reset@@Base+0xd8>
   14378:	ldr	r0, [pc, #128]	; 14400 <flatcc_builder_reset@@Base+0xdc>
   1437c:	bl	124d8 <__assert_fail@plt>
   14380:	ldr	r2, [r5, #124]	; 0x7c
   14384:	mov	r3, #0
   14388:	cmp	r2, r3
   1438c:	str	r3, [r5, #120]	; 0x78
   14390:	movne	r3, #16
   14394:	strne	r3, [r5, #124]	; 0x7c
   14398:	ldr	r1, [r5, #76]	; 0x4c
   1439c:	ldr	r3, [r5, #184]	; 0xb8
   143a0:	ldr	r2, [r5, #52]	; 0x34
   143a4:	ldr	r0, [r5, #60]	; 0x3c
   143a8:	cmp	r3, #0
   143ac:	mov	r3, #0
   143b0:	str	r0, [r5, #16]
   143b4:	stm	r5, {r1, r2}
   143b8:	strh	r3, [r5, #128]	; 0x80
   143bc:	str	r3, [r5, #136]	; 0x88
   143c0:	str	r3, [r5, #140]	; 0x8c
   143c4:	str	r3, [r5, #156]	; 0x9c
   143c8:	str	r3, [r5, #160]	; 0xa0
   143cc:	str	r3, [r5, #20]
   143d0:	str	r3, [r5, #24]
   143d4:	str	r3, [r5, #148]	; 0x94
   143d8:	str	r3, [r5, #152]	; 0x98
   143dc:	str	r3, [r5, #32]
   143e0:	beq	143ec <flatcc_builder_reset@@Base+0xc8>
   143e4:	add	r0, r5, #188	; 0xbc
   143e8:	bl	195c0 <flatcc_emitter_reset@@Base>
   143ec:	mov	r0, #0
   143f0:	pop	{r4, r5, r6, r7, r8, pc}
   143f4:	andeq	r0, r2, ip, ror #31
   143f8:			; <UNDEFINED> instruction: 0x000001b2
   143fc:	andeq	r1, r2, r4, lsl #9
   14400:	andeq	r1, r2, r8, asr r5

00014404 <flatcc_builder_clear@@Base>:
   14404:	push	{r4, r5, r6, r7, r8, lr}
   14408:	mov	r4, #0
   1440c:	sub	sp, sp, #8
   14410:	mov	r6, r0
   14414:	add	r5, r0, #52	; 0x34
   14418:	mov	r8, r4
   1441c:	ldr	r0, [r6, #40]	; 0x28
   14420:	mov	r1, r5
   14424:	str	r4, [sp]
   14428:	mov	r3, r8
   1442c:	add	r4, r4, #1
   14430:	ldr	r7, [r6, #48]	; 0x30
   14434:	mov	r2, #0
   14438:	blx	r7
   1443c:	cmp	r4, #8
   14440:	add	r5, r5, #8
   14444:	bne	1441c <flatcc_builder_clear@@Base+0x18>
   14448:	ldr	r3, [r6, #184]	; 0xb8
   1444c:	cmp	r3, #0
   14450:	beq	1445c <flatcc_builder_clear@@Base+0x58>
   14454:	add	r0, r6, #188	; 0xbc
   14458:	bl	1967c <flatcc_emitter_clear@@Base>
   1445c:	mov	r0, r6
   14460:	mov	r2, #232	; 0xe8
   14464:	mov	r1, #0
   14468:	add	sp, sp, #8
   1446c:	pop	{r4, r5, r6, r7, r8, lr}
   14470:	b	124a8 <memset@plt>

00014474 <flatcc_builder_enter_user_frame_ptr@@Base>:
   14474:	push	{r4, r5, r6, r7, r8, lr}
   14478:	add	r4, r1, #3
   1447c:	bic	r4, r4, #3
   14480:	ldr	r7, [r0, #228]	; 0xe4
   14484:	add	r4, r4, #4
   14488:	ldr	r3, [r0, #112]	; 0x70
   1448c:	add	r2, r4, r7
   14490:	cmp	r2, r3
   14494:	sub	sp, sp, #8
   14498:	mov	r6, r0
   1449c:	bhi	144e4 <flatcc_builder_enter_user_frame_ptr@@Base+0x70>
   144a0:	ldr	r8, [r6, #108]	; 0x6c
   144a4:	adds	r5, r8, r7
   144a8:	beq	1450c <flatcc_builder_enter_user_frame_ptr@@Base+0x98>
   144ac:	mov	r2, r4
   144b0:	mov	r1, #0
   144b4:	mov	r0, r5
   144b8:	bl	124a8 <memset@plt>
   144bc:	ldr	r3, [r6, #224]	; 0xe0
   144c0:	add	r0, r5, #4
   144c4:	str	r3, [r8, r7]
   144c8:	ldr	r3, [r6, #228]	; 0xe4
   144cc:	add	r4, r4, r3
   144d0:	add	r3, r3, #4
   144d4:	str	r4, [r6, #228]	; 0xe4
   144d8:	str	r3, [r6, #224]	; 0xe0
   144dc:	add	sp, sp, #8
   144e0:	pop	{r4, r5, r6, r7, r8, pc}
   144e4:	mov	r3, #7
   144e8:	ldr	r0, [r0, #40]	; 0x28
   144ec:	add	r1, r6, #108	; 0x6c
   144f0:	str	r3, [sp]
   144f4:	mov	r3, #0
   144f8:	ldr	r5, [r6, #48]	; 0x30
   144fc:	blx	r5
   14500:	cmp	r0, #0
   14504:	beq	144a0 <flatcc_builder_enter_user_frame_ptr@@Base+0x2c>
   14508:	bl	124e8 <__assert_fail@plt+0x10>
   1450c:	mov	r0, r5
   14510:	b	144dc <flatcc_builder_enter_user_frame_ptr@@Base+0x68>

00014514 <flatcc_builder_enter_user_frame@@Base>:
   14514:	push	{r4, r5, r6, r7, lr}
   14518:	add	r4, r1, #3
   1451c:	bic	r4, r4, #3
   14520:	ldr	r6, [r0, #228]	; 0xe4
   14524:	add	r4, r4, #4
   14528:	ldr	r3, [r0, #112]	; 0x70
   1452c:	add	r2, r4, r6
   14530:	cmp	r2, r3
   14534:	sub	sp, sp, #12
   14538:	mov	r5, r0
   1453c:	bhi	1457c <flatcc_builder_enter_user_frame@@Base+0x68>
   14540:	ldr	r7, [r5, #108]	; 0x6c
   14544:	adds	r0, r7, r6
   14548:	beq	14574 <flatcc_builder_enter_user_frame@@Base+0x60>
   1454c:	mov	r2, r4
   14550:	mov	r1, #0
   14554:	bl	124a8 <memset@plt>
   14558:	ldr	r3, [r5, #224]	; 0xe0
   1455c:	str	r3, [r7, r6]
   14560:	ldr	r0, [r5, #228]	; 0xe4
   14564:	add	r4, r4, r0
   14568:	add	r0, r0, #4
   1456c:	str	r4, [r5, #228]	; 0xe4
   14570:	str	r0, [r5, #224]	; 0xe0
   14574:	add	sp, sp, #12
   14578:	pop	{r4, r5, r6, r7, pc}
   1457c:	mov	r3, #7
   14580:	ldr	r0, [r0, #40]	; 0x28
   14584:	add	r1, r5, #108	; 0x6c
   14588:	str	r3, [sp]
   1458c:	mov	r3, #0
   14590:	ldr	r7, [r5, #48]	; 0x30
   14594:	blx	r7
   14598:	cmp	r0, #0
   1459c:	beq	14540 <flatcc_builder_enter_user_frame@@Base+0x2c>
   145a0:	bl	124e8 <__assert_fail@plt+0x10>

000145a4 <flatcc_builder_exit_user_frame@@Base>:
   145a4:	ldr	r3, [r0, #224]	; 0xe0
   145a8:	cmp	r3, #0
   145ac:	beq	145d0 <flatcc_builder_exit_user_frame@@Base+0x2c>
   145b0:	ldr	r2, [r0, #108]	; 0x6c
   145b4:	sub	r1, r3, #4
   145b8:	add	r3, r2, r3
   145bc:	str	r1, [r0, #228]	; 0xe4
   145c0:	ldr	r3, [r3, #-4]
   145c4:	str	r3, [r0, #224]	; 0xe0
   145c8:	mov	r0, r3
   145cc:	bx	lr
   145d0:	push	{r4, lr}
   145d4:	bl	12580 <__assert_fail@plt+0xa8>

000145d8 <flatcc_builder_exit_user_frame_at@@Base>:
   145d8:	ldr	r3, [r0, #224]	; 0xe0
   145dc:	push	{r4, lr}
   145e0:	cmp	r3, r1
   145e4:	bcc	14614 <flatcc_builder_exit_user_frame_at@@Base+0x3c>
   145e8:	cmp	r1, #0
   145ec:	str	r1, [r0, #224]	; 0xe0
   145f0:	beq	14628 <flatcc_builder_exit_user_frame_at@@Base+0x50>
   145f4:	ldr	r3, [r0, #108]	; 0x6c
   145f8:	sub	r2, r1, #4
   145fc:	add	r1, r3, r1
   14600:	str	r2, [r0, #228]	; 0xe4
   14604:	ldr	r3, [r1, #-4]
   14608:	str	r3, [r0, #224]	; 0xe0
   1460c:	mov	r0, r3
   14610:	pop	{r4, pc}
   14614:	ldr	r3, [pc, #16]	; 1462c <flatcc_builder_exit_user_frame_at@@Base+0x54>
   14618:	ldr	r2, [pc, #16]	; 14630 <flatcc_builder_exit_user_frame_at@@Base+0x58>
   1461c:	ldr	r1, [pc, #16]	; 14634 <flatcc_builder_exit_user_frame_at@@Base+0x5c>
   14620:	ldr	r0, [pc, #16]	; 14638 <flatcc_builder_exit_user_frame_at@@Base+0x60>
   14624:	bl	124d8 <__assert_fail@plt>
   14628:	bl	12580 <__assert_fail@plt+0xa8>
   1462c:	andeq	r1, r2, r8
   14630:	andeq	r0, r0, r7, lsr #4
   14634:	andeq	r1, r2, r4, lsl #9
   14638:	andeq	r1, r2, ip, ror #10

0001463c <flatcc_builder_get_current_user_frame@@Base>:
   1463c:	ldr	r0, [r0, #224]	; 0xe0
   14640:	bx	lr

00014644 <flatcc_builder_get_user_frame_ptr@@Base>:
   14644:	ldr	r0, [r0, #108]	; 0x6c
   14648:	add	r0, r0, r1
   1464c:	bx	lr

00014650 <flatcc_builder_embed_buffer@@Base>:
   14650:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   14654:	sub	sp, sp, #92	; 0x5c
   14658:	cmp	r1, #0
   1465c:	ldr	r6, [sp, #132]	; 0x84
   14660:	mov	r8, r2
   14664:	mov	r5, r0
   14668:	mov	r7, r3
   1466c:	ldr	r2, [r0, #152]	; 0x98
   14670:	and	r6, r6, #2
   14674:	ldrh	r4, [sp, #128]	; 0x80
   14678:	bne	14688 <flatcc_builder_embed_buffer@@Base+0x38>
   1467c:	ldrh	r1, [r0, #132]	; 0x84
   14680:	cmp	r1, #0
   14684:	beq	14810 <flatcc_builder_embed_buffer@@Base+0x1c0>
   14688:	cmp	r4, #4
   1468c:	movcc	r4, #4
   14690:	cmp	r1, r4
   14694:	movcs	r4, r1
   14698:	cmp	r2, #0
   1469c:	bne	14704 <flatcc_builder_embed_buffer@@Base+0xb4>
   146a0:	ldr	r9, [r5, #140]	; 0x8c
   146a4:	sub	r1, r1, #1
   146a8:	ands	r1, r1, r9
   146ac:	beq	14704 <flatcc_builder_embed_buffer@@Base+0xb4>
   146b0:	add	r3, r9, r1
   146b4:	ldr	sl, [pc, #420]	; 14860 <flatcc_builder_embed_buffer@@Base+0x210>
   146b8:	mov	r2, #1
   146bc:	cmp	r9, r3
   146c0:	str	r1, [sp, #16]
   146c4:	str	r1, [sp, #28]
   146c8:	str	sl, [sp, #24]
   146cc:	str	r3, [r5, #140]	; 0x8c
   146d0:	str	r2, [sp, #20]
   146d4:	bgt	14834 <flatcc_builder_embed_buffer@@Base+0x1e4>
   146d8:	ldr	r0, [r5, #36]	; 0x24
   146dc:	mov	r3, r9
   146e0:	str	r1, [sp]
   146e4:	add	r1, sp, #24
   146e8:	ldr	fp, [r5, #44]	; 0x2c
   146ec:	blx	fp
   146f0:	cmp	r0, #0
   146f4:	bne	14838 <flatcc_builder_embed_buffer@@Base+0x1e8>
   146f8:	cmn	r9, #1
   146fc:	beq	1484c <flatcc_builder_embed_buffer@@Base+0x1fc>
   14700:	ldr	r2, [r5, #152]	; 0x98
   14704:	ldr	r1, [r5, #136]	; 0x88
   14708:	cmp	r6, #0
   1470c:	movne	r6, #4
   14710:	moveq	r6, #0
   14714:	sub	r3, r1, r7
   14718:	sub	r6, r3, r6
   1471c:	sub	r4, r4, #1
   14720:	and	r4, r4, r6
   14724:	mov	r3, #0
   14728:	add	r0, r7, r4
   1472c:	cmp	r2, #0
   14730:	str	r0, [sp, #12]
   14734:	str	r3, [sp, #16]
   14738:	str	r3, [sp, #20]
   1473c:	bne	147e8 <flatcc_builder_embed_buffer@@Base+0x198>
   14740:	mov	r3, r2
   14744:	mov	ip, #2
   14748:	mov	r0, #1
   1474c:	cmp	r7, #0
   14750:	beq	1477c <flatcc_builder_embed_buffer@@Base+0x12c>
   14754:	add	r2, r2, #1
   14758:	add	lr, sp, #88	; 0x58
   1475c:	add	r2, lr, r2, lsl #3
   14760:	add	r3, r3, r7
   14764:	str	r3, [sp, #16]
   14768:	str	r8, [r2, #-72]	; 0xffffffb8
   1476c:	str	r7, [r2, #-68]	; 0xffffffbc
   14770:	mov	r2, r0
   14774:	str	r0, [sp, #20]
   14778:	mov	r0, ip
   1477c:	cmp	r4, #0
   14780:	beq	147ac <flatcc_builder_embed_buffer@@Base+0x15c>
   14784:	add	r2, r2, #1
   14788:	add	ip, sp, #88	; 0x58
   1478c:	add	ip, ip, r2, lsl #3
   14790:	ldr	lr, [pc, #200]	; 14860 <flatcc_builder_embed_buffer@@Base+0x210>
   14794:	mov	r2, r0
   14798:	add	r3, r3, r4
   1479c:	str	r3, [sp, #16]
   147a0:	str	r4, [ip, #-68]	; 0xffffffbc
   147a4:	str	lr, [ip, #-72]	; 0xffffffb8
   147a8:	str	r0, [sp, #20]
   147ac:	sub	r4, r1, r3
   147b0:	cmp	r1, r4
   147b4:	ble	1481c <flatcc_builder_embed_buffer@@Base+0x1cc>
   147b8:	ldr	r0, [r5, #36]	; 0x24
   147bc:	add	r1, sp, #24
   147c0:	str	r3, [sp]
   147c4:	mov	r3, r4
   147c8:	ldr	r6, [r5, #44]	; 0x2c
   147cc:	blx	r6
   147d0:	cmp	r0, #0
   147d4:	bne	14820 <flatcc_builder_embed_buffer@@Base+0x1d0>
   147d8:	mov	r0, r4
   147dc:	str	r4, [r5, #136]	; 0x88
   147e0:	add	sp, sp, #92	; 0x5c
   147e4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   147e8:	mov	r3, #4
   147ec:	add	r0, sp, #12
   147f0:	mov	r2, #1
   147f4:	str	r0, [sp, #24]
   147f8:	str	r3, [sp, #16]
   147fc:	str	r3, [sp, #28]
   14800:	str	r2, [sp, #20]
   14804:	mov	ip, #3
   14808:	mov	r0, #2
   1480c:	b	1474c <flatcc_builder_embed_buffer@@Base+0xfc>
   14810:	cmp	r4, #4
   14814:	movcc	r4, #4
   14818:	b	14704 <flatcc_builder_embed_buffer@@Base+0xb4>
   1481c:	bl	12534 <__assert_fail@plt+0x5c>
   14820:	ldr	r3, [pc, #60]	; 14864 <flatcc_builder_embed_buffer@@Base+0x214>
   14824:	ldr	r2, [pc, #60]	; 14868 <flatcc_builder_embed_buffer@@Base+0x218>
   14828:	ldr	r1, [pc, #60]	; 1486c <flatcc_builder_embed_buffer@@Base+0x21c>
   1482c:	ldr	r0, [pc, #60]	; 14870 <flatcc_builder_embed_buffer@@Base+0x220>
   14830:	bl	124d8 <__assert_fail@plt>
   14834:	bl	1250c <__assert_fail@plt+0x34>
   14838:	ldr	r3, [pc, #52]	; 14874 <flatcc_builder_embed_buffer@@Base+0x224>
   1483c:	ldr	r2, [pc, #52]	; 14878 <flatcc_builder_embed_buffer@@Base+0x228>
   14840:	ldr	r1, [pc, #36]	; 1486c <flatcc_builder_embed_buffer@@Base+0x21c>
   14844:	ldr	r0, [pc, #36]	; 14870 <flatcc_builder_embed_buffer@@Base+0x220>
   14848:	bl	124d8 <__assert_fail@plt>
   1484c:	add	r3, sl, #608	; 0x260
   14850:	ldr	r2, [pc, #36]	; 1487c <flatcc_builder_embed_buffer@@Base+0x22c>
   14854:	ldr	r1, [pc, #16]	; 1486c <flatcc_builder_embed_buffer@@Base+0x21c>
   14858:	ldr	r0, [pc, #16]	; 14870 <flatcc_builder_embed_buffer@@Base+0x220>
   1485c:	bl	124d8 <__assert_fail@plt>
   14860:	andeq	r0, r2, ip, asr #27
   14864:	andeq	r0, r2, r0, asr sp
   14868:	andeq	r0, r0, fp, lsl #5
   1486c:	andeq	r1, r2, r4, lsl #9
   14870:	andeq	r1, r2, r4, asr #10
   14874:	andeq	r0, r2, r4, asr #26
   14878:	andeq	r0, r0, r5, lsr #5
   1487c:			; <UNDEFINED> instruction: 0x000002be

00014880 <flatcc_builder_create_buffer@@Base>:
   14880:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   14884:	sub	sp, sp, #100	; 0x64
   14888:	mov	ip, #0
   1488c:	ldr	r5, [sp, #140]	; 0x8c
   14890:	cmp	r2, #0
   14894:	mov	r6, r0
   14898:	mov	r8, r1
   1489c:	mov	sl, r3
   148a0:	and	r7, r5, #1
   148a4:	str	ip, [sp, #20]
   148a8:	ldrh	r4, [sp, #136]	; 0x88
   148ac:	bne	148bc <flatcc_builder_create_buffer@@Base+0x3c>
   148b0:	ldrh	r2, [r0, #132]	; 0x84
   148b4:	cmp	r2, ip
   148b8:	beq	14ac8 <flatcc_builder_create_buffer@@Base+0x248>
   148bc:	cmp	r4, #4
   148c0:	movcc	r4, #4
   148c4:	cmp	r2, r4
   148c8:	movcs	r4, r2
   148cc:	cmp	r7, #0
   148d0:	bne	14934 <flatcc_builder_create_buffer@@Base+0xb4>
   148d4:	ldr	r9, [r6, #140]	; 0x8c
   148d8:	sub	r2, r2, #1
   148dc:	ands	r3, r2, r9
   148e0:	beq	14934 <flatcc_builder_create_buffer@@Base+0xb4>
   148e4:	add	r1, r9, r3
   148e8:	ldr	fp, [pc, #584]	; 14b38 <flatcc_builder_create_buffer@@Base+0x2b8>
   148ec:	mov	r2, #1
   148f0:	cmp	r9, r1
   148f4:	str	r3, [sp, #24]
   148f8:	str	r3, [sp, #36]	; 0x24
   148fc:	str	fp, [sp, #32]
   14900:	str	r1, [r6, #140]	; 0x8c
   14904:	str	r2, [sp, #28]
   14908:	bgt	14b20 <flatcc_builder_create_buffer@@Base+0x2a0>
   1490c:	ldr	r0, [r6, #36]	; 0x24
   14910:	add	r1, sp, #32
   14914:	str	r3, [sp]
   14918:	mov	r3, r9
   1491c:	ldr	ip, [r6, #44]	; 0x2c
   14920:	blx	ip
   14924:	cmp	r0, #0
   14928:	bne	14b24 <flatcc_builder_create_buffer@@Base+0x2a4>
   1492c:	cmn	r9, #1
   14930:	beq	14ae0 <flatcc_builder_create_buffer@@Base+0x260>
   14934:	ldrh	r3, [r6, #128]	; 0x80
   14938:	ldr	r0, [r6, #136]	; 0x88
   1493c:	uxtb	lr, r7
   14940:	cmp	r3, r4
   14944:	strhcc	r4, [r6, #128]	; 0x80
   14948:	cmp	r8, #0
   1494c:	ldreq	r1, [sp, #20]
   14950:	ldrne	r1, [r8]
   14954:	ldrne	r3, [r8]
   14958:	strne	r3, [sp, #20]
   1495c:	cmp	r1, #0
   14960:	movne	r1, #4
   14964:	moveq	r1, #0
   14968:	ands	r5, r5, #2
   1496c:	bne	14a90 <flatcc_builder_create_buffer@@Base+0x210>
   14970:	sub	r3, r4, #1
   14974:	sub	r4, r0, #4
   14978:	cmp	lr, #0
   1497c:	sub	r4, r4, r1
   14980:	and	r4, r4, r3
   14984:	moveq	r8, #3
   14988:	moveq	ip, #2
   1498c:	moveq	r2, #1
   14990:	moveq	r3, #4
   14994:	bne	14aa0 <flatcc_builder_create_buffer@@Base+0x220>
   14998:	add	r5, r5, #1
   1499c:	add	r9, sp, #96	; 0x60
   149a0:	add	r5, r9, r5, lsl #3
   149a4:	add	fp, sp, #12
   149a8:	mov	r9, #4
   149ac:	cmp	r1, #0
   149b0:	str	r3, [sp, #24]
   149b4:	str	fp, [r5, #-72]	; 0xffffffb8
   149b8:	str	r9, [r5, #-68]	; 0xffffffbc
   149bc:	str	r2, [sp, #28]
   149c0:	beq	149f0 <flatcc_builder_create_buffer@@Base+0x170>
   149c4:	add	r2, r2, #1
   149c8:	add	r5, sp, #96	; 0x60
   149cc:	add	r2, r5, r2, lsl #3
   149d0:	add	r3, r3, r1
   149d4:	add	r5, sp, #20
   149d8:	str	r3, [sp, #24]
   149dc:	str	r1, [r2, #-68]	; 0xffffffbc
   149e0:	str	r5, [r2, #-72]	; 0xffffffb8
   149e4:	mov	r2, ip
   149e8:	str	ip, [sp, #28]
   149ec:	mov	ip, r8
   149f0:	cmp	r4, #0
   149f4:	beq	14a20 <flatcc_builder_create_buffer@@Base+0x1a0>
   149f8:	add	r2, r2, #1
   149fc:	add	r1, sp, #96	; 0x60
   14a00:	add	r1, r1, r2, lsl #3
   14a04:	ldr	r5, [pc, #300]	; 14b38 <flatcc_builder_create_buffer@@Base+0x2b8>
   14a08:	mov	r2, ip
   14a0c:	add	r3, r3, r4
   14a10:	str	r3, [sp, #24]
   14a14:	str	r4, [r1, #-68]	; 0xffffffbc
   14a18:	str	r5, [r1, #-72]	; 0xffffffb8
   14a1c:	str	ip, [sp, #28]
   14a20:	sub	r4, r0, r3
   14a24:	cmp	lr, #0
   14a28:	mov	r1, r4
   14a2c:	beq	14ad4 <flatcc_builder_create_buffer@@Base+0x254>
   14a30:	cmp	r7, #0
   14a34:	add	r1, r4, #4
   14a38:	beq	14ad4 <flatcc_builder_create_buffer@@Base+0x254>
   14a3c:	ldr	ip, [r6, #144]	; 0x90
   14a40:	sub	ip, ip, r1
   14a44:	sub	sl, sl, r1
   14a48:	cmp	r4, r0
   14a4c:	str	sl, [sp, #12]
   14a50:	str	ip, [sp, #16]
   14a54:	bge	14af4 <flatcc_builder_create_buffer@@Base+0x274>
   14a58:	ldr	r0, [r6, #36]	; 0x24
   14a5c:	add	r1, sp, #32
   14a60:	str	r3, [sp]
   14a64:	mov	r3, r4
   14a68:	ldr	r5, [r6, #44]	; 0x2c
   14a6c:	blx	r5
   14a70:	cmp	r0, #0
   14a74:	bne	14af8 <flatcc_builder_create_buffer@@Base+0x278>
   14a78:	cmp	r4, #0
   14a7c:	str	r4, [r6, #136]	; 0x88
   14a80:	beq	14b0c <flatcc_builder_create_buffer@@Base+0x28c>
   14a84:	mov	r0, r4
   14a88:	add	sp, sp, #100	; 0x64
   14a8c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14a90:	sub	r3, r0, #8
   14a94:	sub	r4, r4, #1
   14a98:	sub	r3, r3, r1
   14a9c:	and	r4, r4, r3
   14aa0:	add	r3, sp, #16
   14aa4:	mov	r8, #4
   14aa8:	mov	r5, #1
   14aac:	str	r3, [sp, #32]
   14ab0:	str	r8, [sp, #36]	; 0x24
   14ab4:	mov	lr, r5
   14ab8:	mov	ip, #3
   14abc:	mov	r2, #2
   14ac0:	mov	r3, #8
   14ac4:	b	14998 <flatcc_builder_create_buffer@@Base+0x118>
   14ac8:	cmp	r4, #4
   14acc:	movcc	r4, #4
   14ad0:	b	14934 <flatcc_builder_create_buffer@@Base+0xb4>
   14ad4:	ldr	ip, [r6, #140]	; 0x8c
   14ad8:	sub	ip, ip, r1
   14adc:	b	14a44 <flatcc_builder_create_buffer@@Base+0x1c4>
   14ae0:	add	r3, fp, #608	; 0x260
   14ae4:	ldr	r2, [pc, #80]	; 14b3c <flatcc_builder_create_buffer@@Base+0x2bc>
   14ae8:	ldr	r1, [pc, #80]	; 14b40 <flatcc_builder_create_buffer@@Base+0x2c0>
   14aec:	ldr	r0, [pc, #80]	; 14b44 <flatcc_builder_create_buffer@@Base+0x2c4>
   14af0:	bl	124d8 <__assert_fail@plt>
   14af4:	bl	12534 <__assert_fail@plt+0x5c>
   14af8:	ldr	r3, [pc, #72]	; 14b48 <flatcc_builder_create_buffer@@Base+0x2c8>
   14afc:	ldr	r2, [pc, #72]	; 14b4c <flatcc_builder_create_buffer@@Base+0x2cc>
   14b00:	ldr	r1, [pc, #56]	; 14b40 <flatcc_builder_create_buffer@@Base+0x2c0>
   14b04:	ldr	r0, [pc, #56]	; 14b44 <flatcc_builder_create_buffer@@Base+0x2c4>
   14b08:	bl	124d8 <__assert_fail@plt>
   14b0c:	ldr	r3, [pc, #60]	; 14b50 <flatcc_builder_create_buffer@@Base+0x2d0>
   14b10:	mov	r2, #772	; 0x304
   14b14:	ldr	r1, [pc, #36]	; 14b40 <flatcc_builder_create_buffer@@Base+0x2c0>
   14b18:	ldr	r0, [pc, #36]	; 14b44 <flatcc_builder_create_buffer@@Base+0x2c4>
   14b1c:	bl	124d8 <__assert_fail@plt>
   14b20:	bl	1250c <__assert_fail@plt+0x34>
   14b24:	ldr	r3, [pc, #40]	; 14b54 <flatcc_builder_create_buffer@@Base+0x2d4>
   14b28:	ldr	r2, [pc, #40]	; 14b58 <flatcc_builder_create_buffer@@Base+0x2d8>
   14b2c:	ldr	r1, [pc, #12]	; 14b40 <flatcc_builder_create_buffer@@Base+0x2c0>
   14b30:	ldr	r0, [pc, #12]	; 14b44 <flatcc_builder_create_buffer@@Base+0x2c4>
   14b34:	bl	124d8 <__assert_fail@plt>
   14b38:	andeq	r0, r2, ip, asr #27
   14b3c:			; <UNDEFINED> instruction: 0x000002be
   14b40:	andeq	r1, r2, r4, lsl #9
   14b44:	andeq	r1, r2, r4, asr #10
   14b48:	andeq	r0, r2, r0, asr sp
   14b4c:	andeq	r0, r0, fp, lsl #5
   14b50:	andeq	r1, r2, ip, lsr r0
   14b54:	andeq	r0, r2, r4, asr #26
   14b58:	andeq	r0, r0, r5, lsr #5

00014b5c <flatcc_builder_create_struct@@Base>:
   14b5c:	cmp	r3, #0
   14b60:	push	{r4, r5, r6, lr}
   14b64:	sub	sp, sp, #80	; 0x50
   14b68:	beq	14c54 <flatcc_builder_create_struct@@Base+0xf8>
   14b6c:	mov	ip, r2
   14b70:	ldrh	r2, [r0, #128]	; 0x80
   14b74:	mov	r5, r0
   14b78:	cmp	r2, r3
   14b7c:	strhcc	r3, [r0, #128]	; 0x80
   14b80:	ldr	r0, [r0, #136]	; 0x88
   14b84:	mov	r2, #0
   14b88:	sub	r3, r3, #1
   14b8c:	sub	r4, r0, ip
   14b90:	cmp	ip, #0
   14b94:	and	r3, r3, r4
   14b98:	str	r2, [sp, #8]
   14b9c:	str	r2, [sp, #12]
   14ba0:	bne	14c14 <flatcc_builder_create_struct@@Base+0xb8>
   14ba4:	cmp	r3, #0
   14ba8:	movne	r2, #1
   14bac:	movne	r1, ip
   14bb0:	beq	14c3c <flatcc_builder_create_struct@@Base+0xe0>
   14bb4:	add	r1, r1, #1
   14bb8:	add	r4, sp, #80	; 0x50
   14bbc:	add	ip, ip, r3
   14bc0:	add	r1, r4, r1, lsl #3
   14bc4:	ldr	lr, [pc, #156]	; 14c68 <flatcc_builder_create_struct@@Base+0x10c>
   14bc8:	sub	r4, r0, ip
   14bcc:	str	r3, [r1, #-68]	; 0xffffffbc
   14bd0:	str	ip, [sp, #8]
   14bd4:	str	r2, [sp, #12]
   14bd8:	str	lr, [r1, #-72]	; 0xffffffb8
   14bdc:	cmp	r0, r4
   14be0:	ble	14c3c <flatcc_builder_create_struct@@Base+0xe0>
   14be4:	ldr	r0, [r5, #36]	; 0x24
   14be8:	mov	r3, r4
   14bec:	str	ip, [sp]
   14bf0:	add	r1, sp, #16
   14bf4:	ldr	r6, [r5, #44]	; 0x2c
   14bf8:	blx	r6
   14bfc:	cmp	r0, #0
   14c00:	bne	14c40 <flatcc_builder_create_struct@@Base+0xe4>
   14c04:	mov	r0, r4
   14c08:	str	r4, [r5, #136]	; 0x88
   14c0c:	add	sp, sp, #80	; 0x50
   14c10:	pop	{r4, r5, r6, pc}
   14c14:	cmp	r3, r2
   14c18:	mov	r2, #1
   14c1c:	str	r1, [sp, #16]
   14c20:	str	r2, [sp, #12]
   14c24:	movne	r1, r2
   14c28:	str	ip, [sp, #8]
   14c2c:	str	ip, [sp, #20]
   14c30:	movne	r2, #2
   14c34:	beq	14bdc <flatcc_builder_create_struct@@Base+0x80>
   14c38:	b	14bb4 <flatcc_builder_create_struct@@Base+0x58>
   14c3c:	bl	12534 <__assert_fail@plt+0x5c>
   14c40:	ldr	r3, [pc, #36]	; 14c6c <flatcc_builder_create_struct@@Base+0x110>
   14c44:	ldr	r2, [pc, #36]	; 14c70 <flatcc_builder_create_struct@@Base+0x114>
   14c48:	ldr	r1, [pc, #36]	; 14c74 <flatcc_builder_create_struct@@Base+0x118>
   14c4c:	ldr	r0, [pc, #36]	; 14c78 <flatcc_builder_create_struct@@Base+0x11c>
   14c50:	bl	124d8 <__assert_fail@plt>
   14c54:	ldr	r3, [pc, #32]	; 14c7c <flatcc_builder_create_struct@@Base+0x120>
   14c58:	ldr	r2, [pc, #32]	; 14c80 <flatcc_builder_create_struct@@Base+0x124>
   14c5c:	ldr	r1, [pc, #16]	; 14c74 <flatcc_builder_create_struct@@Base+0x118>
   14c60:	ldr	r0, [pc, #28]	; 14c84 <flatcc_builder_create_struct@@Base+0x128>
   14c64:	bl	124d8 <__assert_fail@plt>
   14c68:	andeq	r0, r2, ip, asr #27
   14c6c:	andeq	r0, r2, r0, asr sp
   14c70:	andeq	r0, r0, fp, lsl #5
   14c74:	andeq	r1, r2, r4, lsl #9
   14c78:	andeq	r1, r2, r4, asr #10
   14c7c:	andeq	r1, r2, ip, asr r0
   14c80:	andeq	r0, r0, pc, lsl #6
   14c84:	andeq	r1, r2, ip, lsl #11

00014c88 <flatcc_builder_start_buffer@@Base>:
   14c88:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   14c8c:	mov	r4, r0
   14c90:	ldr	r0, [r0, #156]	; 0x9c
   14c94:	ldr	ip, [r4, #160]	; 0xa0
   14c98:	mov	r5, r1
   14c9c:	add	r1, r0, #1
   14ca0:	cmp	r1, ip
   14ca4:	sub	sp, sp, #8
   14ca8:	mov	r7, r2
   14cac:	mov	r6, r3
   14cb0:	str	r1, [r4, #156]	; 0x9c
   14cb4:	ldrh	r8, [r4, #128]	; 0x80
   14cb8:	ble	14d28 <flatcc_builder_start_buffer@@Base+0xa0>
   14cbc:	ldr	r3, [r4, #176]	; 0xb0
   14cc0:	cmp	r3, #0
   14cc4:	cmpgt	r1, r3
   14cc8:	movgt	r3, #1
   14ccc:	movle	r3, #0
   14cd0:	bgt	14e04 <flatcc_builder_start_buffer@@Base+0x17c>
   14cd4:	add	r0, r0, r0, lsl #3
   14cd8:	ldr	r1, [r4, #88]	; 0x58
   14cdc:	lsl	r9, r0, #2
   14ce0:	add	r2, r9, #36	; 0x24
   14ce4:	cmp	r2, r1
   14ce8:	bhi	14de0 <flatcc_builder_start_buffer@@Base+0x158>
   14cec:	ldr	r3, [r4, #84]	; 0x54
   14cf0:	add	r3, r3, r9
   14cf4:	cmp	r3, #0
   14cf8:	str	r3, [r4, #32]
   14cfc:	beq	14e04 <flatcc_builder_start_buffer@@Base+0x17c>
   14d00:	ldr	r2, [r4, #88]	; 0x58
   14d04:	ldr	r0, [pc, #256]	; 14e0c <flatcc_builder_start_buffer@@Base+0x184>
   14d08:	ldr	r1, [r4, #176]	; 0xb0
   14d0c:	umull	r0, r2, r0, r2
   14d10:	lsr	r2, r2, #3
   14d14:	cmp	r1, #0
   14d18:	cmpgt	r2, r1
   14d1c:	str	r2, [r4, #160]	; 0xa0
   14d20:	strgt	r1, [r4, #160]	; 0xa0
   14d24:	b	14d34 <flatcc_builder_start_buffer@@Base+0xac>
   14d28:	ldr	r3, [r4, #32]
   14d2c:	add	r3, r3, #36	; 0x24
   14d30:	str	r3, [r4, #32]
   14d34:	ldr	r0, [r4, #20]
   14d38:	ldr	r1, [r4, #28]
   14d3c:	ldrh	lr, [r4, #130]	; 0x82
   14d40:	ldrh	ip, [r4, #132]	; 0x84
   14d44:	add	r2, r0, r1
   14d48:	add	r2, r2, #7
   14d4c:	str	r0, [r3, #8]
   14d50:	strh	lr, [r3, #12]
   14d54:	bic	r2, r2, #7
   14d58:	strh	r8, [r4, #130]	; 0x82
   14d5c:	mvn	lr, #3
   14d60:	str	r1, [r3]
   14d64:	mov	r0, #0
   14d68:	mov	r1, #1
   14d6c:	str	lr, [r3, #4]
   14d70:	str	r2, [r4, #28]
   14d74:	str	r0, [r4, #20]
   14d78:	strh	r1, [r4, #128]	; 0x80
   14d7c:	strh	ip, [r3, #34]	; 0x22
   14d80:	ldrh	r2, [r4, #164]	; 0xa4
   14d84:	strh	r7, [r4, #132]	; 0x84
   14d88:	ldr	ip, [pc, #128]	; 14e10 <flatcc_builder_start_buffer@@Base+0x188>
   14d8c:	strh	r2, [r3, #32]
   14d90:	ldr	r2, [r4, #144]	; 0x90
   14d94:	strh	r6, [r4, #164]	; 0xa4
   14d98:	str	r2, [r3, #20]
   14d9c:	ldr	r2, [r4, #152]	; 0x98
   14da0:	cmp	r5, r0
   14da4:	str	r2, [r3, #28]
   14da8:	ldr	r2, [r4, #148]	; 0x94
   14dac:	ldr	lr, [r4, #136]	; 0x88
   14db0:	moveq	r5, ip
   14db4:	ldr	ip, [r4, #168]	; 0xa8
   14db8:	add	r6, r2, r1
   14dbc:	str	r2, [r4, #152]	; 0x98
   14dc0:	str	r6, [r4, #148]	; 0x94
   14dc4:	str	lr, [r4, #144]	; 0x90
   14dc8:	str	ip, [r3, #16]
   14dcc:	ldr	r2, [r5]
   14dd0:	str	r2, [r4, #168]	; 0xa8
   14dd4:	strh	r1, [r3, #14]
   14dd8:	add	sp, sp, #8
   14ddc:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   14de0:	mov	r1, #4
   14de4:	ldr	r0, [r4, #40]	; 0x28
   14de8:	str	r1, [sp]
   14dec:	add	r1, r4, #84	; 0x54
   14df0:	ldr	sl, [r4, #48]	; 0x30
   14df4:	blx	sl
   14df8:	cmp	r0, #0
   14dfc:	beq	14cec <flatcc_builder_start_buffer@@Base+0x64>
   14e00:	bl	124e8 <__assert_fail@plt+0x10>
   14e04:	mvn	r0, #0
   14e08:	b	14dd8 <flatcc_builder_start_buffer@@Base+0x150>
   14e0c:	stmiacc	r3!, {r0, r3, r4, r5, r9, sl, fp, pc}^
   14e10:	andeq	r0, r2, ip, asr #27

00014e14 <flatcc_builder_end_buffer@@Base>:
   14e14:	ldr	r3, [r0, #32]
   14e18:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   14e1c:	sub	sp, sp, #100	; 0x64
   14e20:	ldrh	r5, [r0, #164]	; 0xa4
   14e24:	ldrh	r3, [r3, #14]
   14e28:	ldr	r2, [r0, #152]	; 0x98
   14e2c:	and	r5, r5, #2
   14e30:	cmp	r2, #0
   14e34:	orrne	r5, r5, #1
   14e38:	cmp	r3, #1
   14e3c:	bne	15128 <flatcc_builder_end_buffer@@Base+0x314>
   14e40:	ldrh	r3, [r0, #132]	; 0x84
   14e44:	ldrh	r2, [r0, #128]	; 0x80
   14e48:	mov	r9, r1
   14e4c:	mov	r1, #0
   14e50:	cmp	r3, r2
   14e54:	movhi	r2, r3
   14e58:	strhhi	r3, [r0, #128]	; 0x80
   14e5c:	cmp	r3, #0
   14e60:	mov	r4, r0
   14e64:	str	r1, [sp, #20]
   14e68:	and	r7, r5, #1
   14e6c:	beq	150d4 <flatcc_builder_end_buffer@@Base+0x2c0>
   14e70:	cmp	r3, #4
   14e74:	movcc	r6, #4
   14e78:	movcs	r6, r3
   14e7c:	cmp	r6, r2
   14e80:	movcc	r6, r2
   14e84:	cmp	r7, r1
   14e88:	bne	14ef0 <flatcc_builder_end_buffer@@Base+0xdc>
   14e8c:	ldr	r8, [r0, #140]	; 0x8c
   14e90:	sub	r3, r3, #1
   14e94:	ands	r3, r3, r8
   14e98:	beq	14ef0 <flatcc_builder_end_buffer@@Base+0xdc>
   14e9c:	add	r1, r8, r3
   14ea0:	ldr	sl, [pc, #748]	; 15194 <flatcc_builder_end_buffer@@Base+0x380>
   14ea4:	mov	r2, #1
   14ea8:	cmp	r8, r1
   14eac:	str	r3, [sp, #24]
   14eb0:	str	r3, [sp, #36]	; 0x24
   14eb4:	str	sl, [sp, #32]
   14eb8:	str	r1, [r0, #140]	; 0x8c
   14ebc:	str	r2, [sp, #28]
   14ec0:	bgt	1517c <flatcc_builder_end_buffer@@Base+0x368>
   14ec4:	ldr	r0, [r0, #36]	; 0x24
   14ec8:	add	r1, sp, #32
   14ecc:	str	r3, [sp]
   14ed0:	mov	r3, r8
   14ed4:	ldr	fp, [r4, #44]	; 0x2c
   14ed8:	blx	fp
   14edc:	cmp	r0, #0
   14ee0:	bne	15180 <flatcc_builder_end_buffer@@Base+0x36c>
   14ee4:	cmn	r8, #1
   14ee8:	beq	15168 <flatcc_builder_end_buffer@@Base+0x354>
   14eec:	ldrh	r2, [r4, #128]	; 0x80
   14ef0:	ldr	r3, [r4, #168]	; 0xa8
   14ef4:	cmp	r2, r6
   14ef8:	strhcc	r6, [r4, #128]	; 0x80
   14efc:	cmp	r3, #0
   14f00:	movne	r1, #4
   14f04:	moveq	r1, #0
   14f08:	ands	r5, r5, #2
   14f0c:	uxtb	ip, r7
   14f10:	str	r3, [sp, #20]
   14f14:	ldr	r0, [r4, #136]	; 0x88
   14f18:	bne	150e4 <flatcc_builder_end_buffer@@Base+0x2d0>
   14f1c:	sub	r3, r6, #1
   14f20:	sub	r6, r0, #4
   14f24:	cmp	ip, #0
   14f28:	sub	r6, r6, r1
   14f2c:	and	r6, r6, r3
   14f30:	moveq	r8, #3
   14f34:	moveq	lr, #2
   14f38:	moveq	r2, #1
   14f3c:	moveq	r3, #4
   14f40:	bne	150f4 <flatcc_builder_end_buffer@@Base+0x2e0>
   14f44:	add	r5, r5, #1
   14f48:	add	sl, sp, #96	; 0x60
   14f4c:	add	r5, sl, r5, lsl #3
   14f50:	add	fp, sp, #12
   14f54:	mov	sl, #4
   14f58:	cmp	r1, #0
   14f5c:	str	r3, [sp, #24]
   14f60:	str	fp, [r5, #-72]	; 0xffffffb8
   14f64:	str	sl, [r5, #-68]	; 0xffffffbc
   14f68:	str	r2, [sp, #28]
   14f6c:	beq	14f9c <flatcc_builder_end_buffer@@Base+0x188>
   14f70:	add	r2, r2, #1
   14f74:	add	r5, sp, #96	; 0x60
   14f78:	add	r2, r5, r2, lsl #3
   14f7c:	add	r3, r3, r1
   14f80:	add	r5, sp, #20
   14f84:	str	r3, [sp, #24]
   14f88:	str	r1, [r2, #-68]	; 0xffffffbc
   14f8c:	str	r5, [r2, #-72]	; 0xffffffb8
   14f90:	mov	r2, lr
   14f94:	str	lr, [sp, #28]
   14f98:	mov	lr, r8
   14f9c:	cmp	r6, #0
   14fa0:	beq	14fcc <flatcc_builder_end_buffer@@Base+0x1b8>
   14fa4:	add	r2, r2, #1
   14fa8:	add	r1, sp, #96	; 0x60
   14fac:	add	r1, r1, r2, lsl #3
   14fb0:	ldr	r5, [pc, #476]	; 15194 <flatcc_builder_end_buffer@@Base+0x380>
   14fb4:	mov	r2, lr
   14fb8:	add	r3, r3, r6
   14fbc:	str	r3, [sp, #24]
   14fc0:	str	r6, [r1, #-68]	; 0xffffffbc
   14fc4:	str	r5, [r1, #-72]	; 0xffffffb8
   14fc8:	str	lr, [sp, #28]
   14fcc:	sub	r5, r0, r3
   14fd0:	cmp	ip, #0
   14fd4:	mov	r1, r5
   14fd8:	beq	1511c <flatcc_builder_end_buffer@@Base+0x308>
   14fdc:	cmp	r7, #0
   14fe0:	add	r1, r5, #4
   14fe4:	beq	1511c <flatcc_builder_end_buffer@@Base+0x308>
   14fe8:	ldr	ip, [r4, #144]	; 0x90
   14fec:	sub	ip, ip, r1
   14ff0:	sub	r9, r9, r1
   14ff4:	cmp	r5, r0
   14ff8:	str	r9, [sp, #12]
   14ffc:	str	ip, [sp, #16]
   15000:	bge	1513c <flatcc_builder_end_buffer@@Base+0x328>
   15004:	ldr	r0, [r4, #36]	; 0x24
   15008:	add	r1, sp, #32
   1500c:	str	r3, [sp]
   15010:	mov	r3, r5
   15014:	ldr	r6, [r4, #44]	; 0x2c
   15018:	blx	r6
   1501c:	subs	r1, r0, #0
   15020:	bne	15140 <flatcc_builder_end_buffer@@Base+0x32c>
   15024:	cmp	r5, #0
   15028:	str	r5, [r4, #136]	; 0x88
   1502c:	beq	15154 <flatcc_builder_end_buffer@@Base+0x340>
   15030:	ldr	r3, [r4, #32]
   15034:	ldr	r2, [r4, #20]
   15038:	ldr	r0, [r4, #16]
   1503c:	ldr	ip, [r3, #20]
   15040:	str	ip, [r4, #144]	; 0x90
   15044:	ldr	ip, [r3, #28]
   15048:	str	ip, [r4, #152]	; 0x98
   1504c:	ldr	ip, [r3, #16]
   15050:	str	ip, [r4, #168]	; 0xa8
   15054:	ldrh	r3, [r3, #32]
   15058:	strh	r3, [r4, #164]	; 0xa4
   1505c:	bl	124a8 <memset@plt>
   15060:	ldr	r3, [r4, #32]
   15064:	ldr	r2, [r4, #64]	; 0x40
   15068:	ldrh	lr, [r4, #130]	; 0x82
   1506c:	ldr	ip, [r3]
   15070:	ldr	r1, [r3, #4]
   15074:	ldrh	r0, [r4, #128]	; 0x80
   15078:	sub	r2, r2, ip
   1507c:	cmp	r2, r1
   15080:	movcs	r2, r1
   15084:	cmp	r0, lr
   15088:	ldr	r0, [r4, #60]	; 0x3c
   1508c:	ldr	r6, [r3, #8]
   15090:	str	r2, [r4, #24]
   15094:	add	r2, r0, ip
   15098:	str	r2, [r4, #16]
   1509c:	str	r6, [r4, #20]
   150a0:	ldr	r2, [r4, #156]	; 0x9c
   150a4:	str	ip, [r4, #28]
   150a8:	str	r1, [r3, #4]
   150ac:	strhcc	lr, [r4, #128]	; 0x80
   150b0:	ldrh	r1, [r3, #12]
   150b4:	sub	r2, r2, #1
   150b8:	sub	r3, r3, #36	; 0x24
   150bc:	mov	r0, r5
   150c0:	str	r2, [r4, #156]	; 0x9c
   150c4:	strh	r1, [r4, #130]	; 0x82
   150c8:	str	r3, [r4, #32]
   150cc:	add	sp, sp, #100	; 0x64
   150d0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   150d4:	cmp	r2, #4
   150d8:	movcs	r6, r2
   150dc:	movcc	r6, #4
   150e0:	b	14ef0 <flatcc_builder_end_buffer@@Base+0xdc>
   150e4:	sub	r3, r0, #8
   150e8:	sub	r6, r6, #1
   150ec:	sub	r3, r3, r1
   150f0:	and	r6, r6, r3
   150f4:	add	r3, sp, #16
   150f8:	mov	r8, #4
   150fc:	mov	r5, #1
   15100:	str	r3, [sp, #32]
   15104:	str	r8, [sp, #36]	; 0x24
   15108:	mov	ip, r5
   1510c:	mov	lr, #3
   15110:	mov	r2, #2
   15114:	mov	r3, #8
   15118:	b	14f44 <flatcc_builder_end_buffer@@Base+0x130>
   1511c:	ldr	ip, [r4, #140]	; 0x8c
   15120:	sub	ip, ip, r1
   15124:	b	14ff0 <flatcc_builder_end_buffer@@Base+0x1dc>
   15128:	ldr	r3, [pc, #104]	; 15198 <flatcc_builder_end_buffer@@Base+0x384>
   1512c:	ldr	r2, [pc, #104]	; 1519c <flatcc_builder_end_buffer@@Base+0x388>
   15130:	ldr	r1, [pc, #104]	; 151a0 <flatcc_builder_end_buffer@@Base+0x38c>
   15134:	ldr	r0, [pc, #104]	; 151a4 <flatcc_builder_end_buffer@@Base+0x390>
   15138:	bl	124d8 <__assert_fail@plt>
   1513c:	bl	12534 <__assert_fail@plt+0x5c>
   15140:	ldr	r3, [pc, #96]	; 151a8 <flatcc_builder_end_buffer@@Base+0x394>
   15144:	ldr	r2, [pc, #96]	; 151ac <flatcc_builder_end_buffer@@Base+0x398>
   15148:	ldr	r1, [pc, #80]	; 151a0 <flatcc_builder_end_buffer@@Base+0x38c>
   1514c:	ldr	r0, [pc, #92]	; 151b0 <flatcc_builder_end_buffer@@Base+0x39c>
   15150:	bl	124d8 <__assert_fail@plt>
   15154:	ldr	r3, [pc, #88]	; 151b4 <flatcc_builder_end_buffer@@Base+0x3a0>
   15158:	mov	r2, #772	; 0x304
   1515c:	ldr	r1, [pc, #60]	; 151a0 <flatcc_builder_end_buffer@@Base+0x38c>
   15160:	ldr	r0, [pc, #72]	; 151b0 <flatcc_builder_end_buffer@@Base+0x39c>
   15164:	bl	124d8 <__assert_fail@plt>
   15168:	add	r3, sl, #608	; 0x260
   1516c:	ldr	r2, [pc, #68]	; 151b8 <flatcc_builder_end_buffer@@Base+0x3a4>
   15170:	ldr	r1, [pc, #40]	; 151a0 <flatcc_builder_end_buffer@@Base+0x38c>
   15174:	ldr	r0, [pc, #52]	; 151b0 <flatcc_builder_end_buffer@@Base+0x39c>
   15178:	bl	124d8 <__assert_fail@plt>
   1517c:	bl	1250c <__assert_fail@plt+0x34>
   15180:	ldr	r3, [pc, #52]	; 151bc <flatcc_builder_end_buffer@@Base+0x3a8>
   15184:	ldr	r2, [pc, #52]	; 151c0 <flatcc_builder_end_buffer@@Base+0x3ac>
   15188:	ldr	r1, [pc, #16]	; 151a0 <flatcc_builder_end_buffer@@Base+0x38c>
   1518c:	ldr	r0, [pc, #28]	; 151b0 <flatcc_builder_end_buffer@@Base+0x39c>
   15190:	bl	124d8 <__assert_fail@plt>
   15194:	andeq	r0, r2, ip, asr #27
   15198:	andeq	r1, r2, ip, ror r0
   1519c:	andeq	r0, r0, r6, asr #6
   151a0:	andeq	r1, r2, r4, lsl #9
   151a4:	muleq	r2, r8, r5
   151a8:	andeq	r0, r2, r0, asr sp
   151ac:	andeq	r0, r0, fp, lsl #5
   151b0:	andeq	r1, r2, r4, asr #10
   151b4:	andeq	r1, r2, ip, lsr r0
   151b8:			; <UNDEFINED> instruction: 0x000002be
   151bc:	andeq	r0, r2, r4, asr #26
   151c0:	andeq	r0, r0, r5, lsr #5

000151c4 <flatcc_builder_start_struct@@Base>:
   151c4:	push	{r4, r5, r6, r7, r8, lr}
   151c8:	mov	r4, r0
   151cc:	ldr	r0, [r0, #156]	; 0x9c
   151d0:	ldr	r3, [r4, #160]	; 0xa0
   151d4:	mov	r6, r1
   151d8:	add	r1, r0, #1
   151dc:	cmp	r1, r3
   151e0:	sub	sp, sp, #8
   151e4:	mov	r5, r2
   151e8:	str	r1, [r4, #156]	; 0x9c
   151ec:	ble	1525c <flatcc_builder_start_struct@@Base+0x98>
   151f0:	ldr	r3, [r4, #176]	; 0xb0
   151f4:	cmp	r3, #0
   151f8:	cmpgt	r1, r3
   151fc:	movgt	r3, #1
   15200:	movle	r3, #0
   15204:	bgt	1536c <flatcc_builder_start_struct@@Base+0x1a8>
   15208:	add	r0, r0, r0, lsl #3
   1520c:	ldr	r1, [r4, #88]	; 0x58
   15210:	lsl	r7, r0, #2
   15214:	add	r2, r7, #36	; 0x24
   15218:	cmp	r2, r1
   1521c:	bhi	15348 <flatcc_builder_start_struct@@Base+0x184>
   15220:	ldr	r3, [r4, #84]	; 0x54
   15224:	add	r3, r3, r7
   15228:	cmp	r3, #0
   1522c:	str	r3, [r4, #32]
   15230:	beq	1536c <flatcc_builder_start_struct@@Base+0x1a8>
   15234:	ldr	r2, [r4, #88]	; 0x58
   15238:	ldr	r0, [pc, #308]	; 15374 <flatcc_builder_start_struct@@Base+0x1b0>
   1523c:	ldr	r1, [r4, #176]	; 0xb0
   15240:	umull	r0, r2, r0, r2
   15244:	lsr	r2, r2, #3
   15248:	cmp	r1, #0
   1524c:	cmpgt	r2, r1
   15250:	str	r2, [r4, #160]	; 0xa0
   15254:	strgt	r1, [r4, #160]	; 0xa0
   15258:	b	15268 <flatcc_builder_start_struct@@Base+0xa4>
   1525c:	ldr	r3, [r4, #32]
   15260:	add	r3, r3, #36	; 0x24
   15264:	str	r3, [r4, #32]
   15268:	ldr	lr, [r4, #20]
   1526c:	ldr	ip, [r4, #28]
   15270:	ldr	r1, [r4, #64]	; 0x40
   15274:	add	r2, lr, ip
   15278:	add	r2, r2, #7
   1527c:	ldrh	r7, [r4, #130]	; 0x82
   15280:	bic	r2, r2, #7
   15284:	sub	r1, r1, r2
   15288:	ldr	r0, [r4, #60]	; 0x3c
   1528c:	cmn	r1, #4
   15290:	str	lr, [r3, #8]
   15294:	mvn	lr, #3
   15298:	strh	r7, [r3, #12]
   1529c:	movhi	r1, lr
   152a0:	strh	r5, [r4, #130]	; 0x82
   152a4:	str	ip, [r3]
   152a8:	mov	r5, #0
   152ac:	mov	ip, #2
   152b0:	str	lr, [r3, #4]
   152b4:	add	r0, r0, r2
   152b8:	str	r5, [r4, #20]
   152bc:	str	r2, [r4, #28]
   152c0:	mvn	r5, #3
   152c4:	strh	ip, [r3, #14]
   152c8:	strls	r1, [r4, #24]
   152cc:	strhi	lr, [r4, #24]
   152d0:	cmp	r6, r1
   152d4:	str	r0, [r4, #16]
   152d8:	str	r5, [r3, #4]
   152dc:	str	r6, [r4, #20]
   152e0:	bcs	152ec <flatcc_builder_start_struct@@Base+0x128>
   152e4:	add	sp, sp, #8
   152e8:	pop	{r4, r5, r6, r7, r8, pc}
   152ec:	add	r6, r6, #1
   152f0:	mov	r3, #1
   152f4:	ldr	r0, [r4, #40]	; 0x28
   152f8:	add	r2, r6, r2
   152fc:	str	r3, [sp]
   15300:	add	r1, r4, #60	; 0x3c
   15304:	ldr	r6, [r4, #48]	; 0x30
   15308:	blx	r6
   1530c:	cmp	r0, #0
   15310:	bne	1536c <flatcc_builder_start_struct@@Base+0x1a8>
   15314:	ldr	r2, [r4, #28]
   15318:	ldr	r3, [r4, #64]	; 0x40
   1531c:	ldr	r0, [r4, #60]	; 0x3c
   15320:	sub	r3, r3, r2
   15324:	ldr	r1, [r4, #32]
   15328:	cmp	r3, r5
   1532c:	add	r0, r0, r2
   15330:	movhi	r3, r5
   15334:	str	r3, [r4, #24]
   15338:	str	r0, [r4, #16]
   1533c:	str	r5, [r1, #4]
   15340:	add	sp, sp, #8
   15344:	pop	{r4, r5, r6, r7, r8, pc}
   15348:	mov	r1, #4
   1534c:	ldr	r0, [r4, #40]	; 0x28
   15350:	str	r1, [sp]
   15354:	add	r1, r4, #84	; 0x54
   15358:	ldr	r8, [r4, #48]	; 0x30
   1535c:	blx	r8
   15360:	cmp	r0, #0
   15364:	beq	15220 <flatcc_builder_start_struct@@Base+0x5c>
   15368:	bl	124e8 <__assert_fail@plt+0x10>
   1536c:	mov	r0, #0
   15370:	b	152e4 <flatcc_builder_start_struct@@Base+0x120>
   15374:	stmiacc	r3!, {r0, r3, r4, r5, r9, sl, fp, pc}^

00015378 <flatcc_builder_struct_edit@@Base>:
   15378:	ldr	r0, [r0, #16]
   1537c:	bx	lr

00015380 <flatcc_builder_end_struct@@Base>:
   15380:	ldr	r3, [r0, #32]
   15384:	push	{r4, r5, r6, lr}
   15388:	sub	sp, sp, #80	; 0x50
   1538c:	ldrh	r3, [r3, #14]
   15390:	cmp	r3, #2
   15394:	bne	15520 <flatcc_builder_end_struct@@Base+0x1a0>
   15398:	ldrh	r3, [r0, #130]	; 0x82
   1539c:	mov	r4, r0
   153a0:	ldr	r0, [r0, #16]
   153a4:	cmp	r3, #0
   153a8:	ldr	r1, [r4, #20]
   153ac:	beq	1550c <flatcc_builder_end_struct@@Base+0x18c>
   153b0:	ldrh	r2, [r4, #128]	; 0x80
   153b4:	ldr	ip, [r4, #136]	; 0x88
   153b8:	cmp	r2, r3
   153bc:	strhcc	r3, [r4, #128]	; 0x80
   153c0:	mov	r2, #0
   153c4:	sub	r3, r3, #1
   153c8:	sub	r5, ip, r1
   153cc:	cmp	r1, #0
   153d0:	and	r3, r3, r5
   153d4:	str	r2, [sp, #8]
   153d8:	str	r2, [sp, #12]
   153dc:	bne	154cc <flatcc_builder_end_struct@@Base+0x14c>
   153e0:	cmp	r3, #0
   153e4:	movne	r2, #1
   153e8:	movne	r0, r1
   153ec:	beq	154f4 <flatcc_builder_end_struct@@Base+0x174>
   153f0:	add	r0, r0, #1
   153f4:	add	r5, sp, #80	; 0x50
   153f8:	add	r1, r1, r3
   153fc:	add	r0, r5, r0, lsl #3
   15400:	ldr	lr, [pc, #300]	; 15534 <flatcc_builder_end_struct@@Base+0x1b4>
   15404:	sub	r5, ip, r1
   15408:	str	r3, [r0, #-68]	; 0xffffffbc
   1540c:	str	r1, [sp, #8]
   15410:	str	r2, [sp, #12]
   15414:	str	lr, [r0, #-72]	; 0xffffffb8
   15418:	cmp	ip, r5
   1541c:	ble	154f4 <flatcc_builder_end_struct@@Base+0x174>
   15420:	ldr	r0, [r4, #36]	; 0x24
   15424:	mov	r3, r5
   15428:	str	r1, [sp]
   1542c:	add	r1, sp, #16
   15430:	ldr	r6, [r4, #44]	; 0x2c
   15434:	blx	r6
   15438:	subs	r1, r0, #0
   1543c:	bne	154f8 <flatcc_builder_end_struct@@Base+0x178>
   15440:	cmp	r5, #0
   15444:	str	r5, [r4, #136]	; 0x88
   15448:	beq	154c0 <flatcc_builder_end_struct@@Base+0x140>
   1544c:	ldr	r2, [r4, #20]
   15450:	ldr	r0, [r4, #16]
   15454:	bl	124a8 <memset@plt>
   15458:	ldr	r3, [r4, #32]
   1545c:	ldr	r2, [r4, #64]	; 0x40
   15460:	ldrh	lr, [r4, #130]	; 0x82
   15464:	ldr	ip, [r3]
   15468:	ldr	r1, [r3, #4]
   1546c:	ldrh	r0, [r4, #128]	; 0x80
   15470:	sub	r2, r2, ip
   15474:	cmp	r2, r1
   15478:	movcs	r2, r1
   1547c:	cmp	r0, lr
   15480:	ldr	r0, [r4, #60]	; 0x3c
   15484:	ldr	r6, [r3, #8]
   15488:	str	r2, [r4, #24]
   1548c:	add	r2, r0, ip
   15490:	str	r2, [r4, #16]
   15494:	str	r6, [r4, #20]
   15498:	ldr	r2, [r4, #156]	; 0x9c
   1549c:	str	ip, [r4, #28]
   154a0:	str	r1, [r3, #4]
   154a4:	strhcc	lr, [r4, #128]	; 0x80
   154a8:	ldrh	r1, [r3, #12]
   154ac:	sub	r2, r2, #1
   154b0:	sub	r3, r3, #36	; 0x24
   154b4:	str	r2, [r4, #156]	; 0x9c
   154b8:	strh	r1, [r4, #130]	; 0x82
   154bc:	str	r3, [r4, #32]
   154c0:	mov	r0, r5
   154c4:	add	sp, sp, #80	; 0x50
   154c8:	pop	{r4, r5, r6, pc}
   154cc:	cmp	r3, r2
   154d0:	mov	r2, #1
   154d4:	str	r0, [sp, #16]
   154d8:	str	r2, [sp, #12]
   154dc:	movne	r0, r2
   154e0:	str	r1, [sp, #8]
   154e4:	str	r1, [sp, #20]
   154e8:	movne	r2, #2
   154ec:	beq	15418 <flatcc_builder_end_struct@@Base+0x98>
   154f0:	b	153f0 <flatcc_builder_end_struct@@Base+0x70>
   154f4:	bl	12534 <__assert_fail@plt+0x5c>
   154f8:	ldr	r3, [pc, #56]	; 15538 <flatcc_builder_end_struct@@Base+0x1b8>
   154fc:	ldr	r2, [pc, #56]	; 1553c <flatcc_builder_end_struct@@Base+0x1bc>
   15500:	ldr	r1, [pc, #56]	; 15540 <flatcc_builder_end_struct@@Base+0x1c0>
   15504:	ldr	r0, [pc, #56]	; 15544 <flatcc_builder_end_struct@@Base+0x1c4>
   15508:	bl	124d8 <__assert_fail@plt>
   1550c:	ldr	r3, [pc, #52]	; 15548 <flatcc_builder_end_struct@@Base+0x1c8>
   15510:	ldr	r2, [pc, #52]	; 1554c <flatcc_builder_end_struct@@Base+0x1cc>
   15514:	ldr	r1, [pc, #36]	; 15540 <flatcc_builder_end_struct@@Base+0x1c0>
   15518:	ldr	r0, [pc, #48]	; 15550 <flatcc_builder_end_struct@@Base+0x1d0>
   1551c:	bl	124d8 <__assert_fail@plt>
   15520:	ldr	r3, [pc, #44]	; 15554 <flatcc_builder_end_struct@@Base+0x1d4>
   15524:	mov	r2, #872	; 0x368
   15528:	ldr	r1, [pc, #16]	; 15540 <flatcc_builder_end_struct@@Base+0x1c0>
   1552c:	ldr	r0, [pc, #36]	; 15558 <flatcc_builder_end_struct@@Base+0x1d8>
   15530:	bl	124d8 <__assert_fail@plt>
   15534:	andeq	r0, r2, ip, asr #27
   15538:	andeq	r0, r2, r0, asr sp
   1553c:	andeq	r0, r0, fp, lsl #5
   15540:	andeq	r1, r2, r4, lsl #9
   15544:	andeq	r1, r2, r4, asr #10
   15548:	andeq	r1, r2, ip, asr r0
   1554c:	andeq	r0, r0, pc, lsl #6
   15550:	andeq	r1, r2, ip, lsl #11
   15554:	muleq	r2, r8, r0
   15558:	andeq	r1, r2, r4, asr #11

0001555c <flatcc_builder_extend_vector@@Base>:
   1555c:	ldr	r3, [r0, #32]
   15560:	push	{r4, r5, r6, r7, lr}
   15564:	mov	r5, r0
   15568:	ldr	r0, [r3, #20]
   1556c:	ldr	r4, [r3, #24]
   15570:	add	ip, r1, r0
   15574:	cmp	r0, ip
   15578:	movls	r0, #0
   1557c:	movhi	r0, #1
   15580:	cmp	r4, ip
   15584:	movcs	r4, r0
   15588:	orrcc	r4, r0, #1
   1558c:	cmp	r4, #0
   15590:	sub	sp, sp, #12
   15594:	bne	15630 <flatcc_builder_extend_vector@@Base+0xd4>
   15598:	ldr	r2, [r3, #16]
   1559c:	str	ip, [r3, #20]
   155a0:	ldr	r6, [r5, #20]
   155a4:	ldr	r3, [r5, #24]
   155a8:	mla	r1, r2, r1, r6
   155ac:	cmp	r1, r3
   155b0:	str	r1, [r5, #20]
   155b4:	bcs	155c8 <flatcc_builder_extend_vector@@Base+0x6c>
   155b8:	ldr	r0, [r5, #16]
   155bc:	add	r0, r0, r6
   155c0:	add	sp, sp, #12
   155c4:	pop	{r4, r5, r6, r7, pc}
   155c8:	ldr	r2, [r5, #28]
   155cc:	mov	r3, #1
   155d0:	add	r2, r2, #1
   155d4:	ldr	r0, [r5, #40]	; 0x28
   155d8:	add	r2, r2, r1
   155dc:	str	r3, [sp]
   155e0:	add	r1, r5, #60	; 0x3c
   155e4:	ldr	r7, [r5, #48]	; 0x30
   155e8:	blx	r7
   155ec:	cmp	r0, #0
   155f0:	bne	15628 <flatcc_builder_extend_vector@@Base+0xcc>
   155f4:	ldr	r2, [r5, #28]
   155f8:	ldr	r3, [r5, #64]	; 0x40
   155fc:	ldr	r0, [r5, #60]	; 0x3c
   15600:	sub	r3, r3, r2
   15604:	cmn	r3, #4
   15608:	mvnhi	r3, #3
   1560c:	str	r3, [r5, #24]
   15610:	ldr	r3, [r5, #32]
   15614:	add	r0, r0, r2
   15618:	mvn	r2, #3
   1561c:	str	r0, [r5, #16]
   15620:	str	r2, [r3, #4]
   15624:	b	155bc <flatcc_builder_extend_vector@@Base+0x60>
   15628:	mov	r0, r4
   1562c:	b	155c0 <flatcc_builder_extend_vector@@Base+0x64>
   15630:	bl	1255c <__assert_fail@plt+0x84>

00015634 <flatcc_builder_vector_push@@Base>:
   15634:	ldr	r3, [r0, #32]
   15638:	push	{r4, r5, r6, r7, r8, lr}
   1563c:	sub	sp, sp, #8
   15640:	ldrh	r2, [r3, #14]
   15644:	cmp	r2, #4
   15648:	bne	15730 <flatcc_builder_vector_push@@Base+0xfc>
   1564c:	mov	r5, r1
   15650:	ldr	r2, [r3, #20]
   15654:	ldr	r1, [r3, #24]
   15658:	cmp	r2, r1
   1565c:	bhi	1571c <flatcc_builder_vector_push@@Base+0xe8>
   15660:	add	r2, r2, #1
   15664:	str	r2, [r3, #20]
   15668:	ldr	r7, [r3, #16]
   1566c:	ldr	r6, [r0, #20]
   15670:	ldr	r3, [r0, #24]
   15674:	add	r1, r7, r6
   15678:	cmp	r1, r3
   1567c:	mov	r4, r0
   15680:	str	r1, [r0, #20]
   15684:	bcs	156b4 <flatcc_builder_vector_push@@Base+0x80>
   15688:	ldr	r3, [r0, #16]
   1568c:	adds	r3, r3, r6
   15690:	beq	156a8 <flatcc_builder_vector_push@@Base+0x74>
   15694:	mov	r0, r3
   15698:	mov	r2, r7
   1569c:	mov	r1, r5
   156a0:	bl	12430 <memcpy@plt>
   156a4:	mov	r3, r0
   156a8:	mov	r0, r3
   156ac:	add	sp, sp, #8
   156b0:	pop	{r4, r5, r6, r7, r8, pc}
   156b4:	ldr	r2, [r0, #28]
   156b8:	mov	r3, #1
   156bc:	add	r2, r2, #1
   156c0:	ldr	r0, [r0, #40]	; 0x28
   156c4:	add	r2, r2, r1
   156c8:	str	r3, [sp]
   156cc:	add	r1, r4, #60	; 0x3c
   156d0:	ldr	r8, [r4, #48]	; 0x30
   156d4:	blx	r8
   156d8:	cmp	r0, #0
   156dc:	bne	15714 <flatcc_builder_vector_push@@Base+0xe0>
   156e0:	ldr	r1, [r4, #28]
   156e4:	ldr	r2, [r4, #64]	; 0x40
   156e8:	ldr	r3, [r4, #60]	; 0x3c
   156ec:	sub	r2, r2, r1
   156f0:	cmn	r2, #4
   156f4:	mvnhi	r2, #3
   156f8:	str	r2, [r4, #24]
   156fc:	ldr	r2, [r4, #32]
   15700:	add	r3, r3, r1
   15704:	mvn	r1, #3
   15708:	str	r3, [r4, #16]
   1570c:	str	r1, [r2, #4]
   15710:	b	1568c <flatcc_builder_vector_push@@Base+0x58>
   15714:	mov	r3, #0
   15718:	b	156a8 <flatcc_builder_vector_push@@Base+0x74>
   1571c:	ldr	r3, [pc, #32]	; 15744 <flatcc_builder_vector_push@@Base+0x110>
   15720:	mov	r2, #908	; 0x38c
   15724:	ldr	r1, [pc, #28]	; 15748 <flatcc_builder_vector_push@@Base+0x114>
   15728:	ldr	r0, [pc, #28]	; 1574c <flatcc_builder_vector_push@@Base+0x118>
   1572c:	bl	124d8 <__assert_fail@plt>
   15730:	ldr	r3, [pc, #12]	; 15744 <flatcc_builder_vector_push@@Base+0x110>
   15734:	ldr	r2, [pc, #20]	; 15750 <flatcc_builder_vector_push@@Base+0x11c>
   15738:	ldr	r1, [pc, #8]	; 15748 <flatcc_builder_vector_push@@Base+0x114>
   1573c:	ldr	r0, [pc, #16]	; 15754 <flatcc_builder_vector_push@@Base+0x120>
   15740:	bl	124d8 <__assert_fail@plt>
   15744:	strheq	r1, [r2], -r4
   15748:	andeq	r1, r2, r4, lsl #9
   1574c:	andeq	r1, r2, ip, lsl r6
   15750:	andeq	r0, r0, fp, lsl #7
   15754:	strdeq	r1, [r2], -r0

00015758 <flatcc_builder_append_vector@@Base>:
   15758:	push	{r4, r5, r6, r7, r8, r9, lr}
   1575c:	mov	r5, r1
   15760:	ldr	r1, [r0, #32]
   15764:	sub	sp, sp, #12
   15768:	ldrh	r3, [r1, #14]
   1576c:	cmp	r3, #4
   15770:	bne	15860 <flatcc_builder_append_vector@@Base+0x108>
   15774:	ldr	r3, [r1, #20]
   15778:	mov	r6, r0
   1577c:	add	r0, r2, r3
   15780:	cmp	r3, r0
   15784:	ldr	r4, [r1, #24]
   15788:	movls	r3, #0
   1578c:	movhi	r3, #1
   15790:	cmp	r4, r0
   15794:	movcs	r4, r3
   15798:	orrcc	r4, r3, #1
   1579c:	cmp	r4, #0
   157a0:	bne	1585c <flatcc_builder_append_vector@@Base+0x104>
   157a4:	ldr	r7, [r1, #16]
   157a8:	str	r0, [r1, #20]
   157ac:	ldr	r8, [r6, #20]
   157b0:	mul	r7, r7, r2
   157b4:	ldr	r3, [r6, #24]
   157b8:	add	r1, r7, r8
   157bc:	cmp	r1, r3
   157c0:	str	r1, [r6, #20]
   157c4:	bcs	157f4 <flatcc_builder_append_vector@@Base+0x9c>
   157c8:	ldr	r3, [r6, #16]
   157cc:	adds	r3, r3, r8
   157d0:	beq	157e8 <flatcc_builder_append_vector@@Base+0x90>
   157d4:	mov	r0, r3
   157d8:	mov	r2, r7
   157dc:	mov	r1, r5
   157e0:	bl	12430 <memcpy@plt>
   157e4:	mov	r3, r0
   157e8:	mov	r0, r3
   157ec:	add	sp, sp, #12
   157f0:	pop	{r4, r5, r6, r7, r8, r9, pc}
   157f4:	ldr	r2, [r6, #28]
   157f8:	mov	r3, #1
   157fc:	add	r2, r2, #1
   15800:	ldr	r0, [r6, #40]	; 0x28
   15804:	add	r2, r2, r1
   15808:	str	r3, [sp]
   1580c:	add	r1, r6, #60	; 0x3c
   15810:	ldr	r9, [r6, #48]	; 0x30
   15814:	blx	r9
   15818:	cmp	r0, #0
   1581c:	bne	15854 <flatcc_builder_append_vector@@Base+0xfc>
   15820:	ldr	r1, [r6, #28]
   15824:	ldr	r2, [r6, #64]	; 0x40
   15828:	ldr	r3, [r6, #60]	; 0x3c
   1582c:	sub	r2, r2, r1
   15830:	cmn	r2, #4
   15834:	mvnhi	r2, #3
   15838:	str	r2, [r6, #24]
   1583c:	ldr	r2, [r6, #32]
   15840:	add	r3, r3, r1
   15844:	mvn	r1, #3
   15848:	str	r3, [r6, #16]
   1584c:	str	r1, [r2, #4]
   15850:	b	157cc <flatcc_builder_append_vector@@Base+0x74>
   15854:	mov	r3, r4
   15858:	b	157e8 <flatcc_builder_append_vector@@Base+0x90>
   1585c:	bl	1255c <__assert_fail@plt+0x84>
   15860:	ldr	r3, [pc, #12]	; 15874 <flatcc_builder_append_vector@@Base+0x11c>
   15864:	ldr	r2, [pc, #12]	; 15878 <flatcc_builder_append_vector@@Base+0x120>
   15868:	ldr	r1, [pc, #12]	; 1587c <flatcc_builder_append_vector@@Base+0x124>
   1586c:	ldr	r0, [pc, #12]	; 15880 <flatcc_builder_append_vector@@Base+0x128>
   15870:	bl	124d8 <__assert_fail@plt>
   15874:	ldrdeq	r1, [r2], -r0
   15878:	muleq	r0, r3, r3
   1587c:	andeq	r1, r2, r4, lsl #9
   15880:	strdeq	r1, [r2], -r0

00015884 <flatcc_builder_extend_offset_vector@@Base>:
   15884:	ldr	ip, [r0, #32]
   15888:	push	{r4, r5, r6, r7, lr}
   1588c:	mov	r4, r0
   15890:	ldr	r3, [ip, #20]
   15894:	sub	sp, sp, #12
   15898:	adds	r3, r1, r3
   1589c:	movcs	r2, #1
   158a0:	movcc	r2, #0
   158a4:	cmn	r3, #-1073741823	; 0xc0000001
   158a8:	movls	r0, #0
   158ac:	movhi	r0, #1
   158b0:	orrs	r5, r2, r0
   158b4:	bne	1594c <flatcc_builder_extend_offset_vector@@Base+0xc8>
   158b8:	str	r3, [ip, #20]
   158bc:	ldr	r6, [r4, #20]
   158c0:	ldr	r3, [r4, #24]
   158c4:	add	r1, r6, r1, lsl #2
   158c8:	cmp	r1, r3
   158cc:	str	r1, [r4, #20]
   158d0:	bcs	158e4 <flatcc_builder_extend_offset_vector@@Base+0x60>
   158d4:	ldr	r0, [r4, #16]
   158d8:	add	r0, r0, r6
   158dc:	add	sp, sp, #12
   158e0:	pop	{r4, r5, r6, r7, pc}
   158e4:	ldr	r2, [r4, #28]
   158e8:	mov	r3, #1
   158ec:	add	r2, r2, #1
   158f0:	ldr	r0, [r4, #40]	; 0x28
   158f4:	add	r2, r2, r1
   158f8:	str	r3, [sp]
   158fc:	add	r1, r4, #60	; 0x3c
   15900:	ldr	r7, [r4, #48]	; 0x30
   15904:	blx	r7
   15908:	cmp	r0, #0
   1590c:	bne	15944 <flatcc_builder_extend_offset_vector@@Base+0xc0>
   15910:	ldr	r2, [r4, #28]
   15914:	ldr	r3, [r4, #64]	; 0x40
   15918:	ldr	r0, [r4, #60]	; 0x3c
   1591c:	sub	r3, r3, r2
   15920:	cmn	r3, #4
   15924:	mvnhi	r3, #3
   15928:	str	r3, [r4, #24]
   1592c:	ldr	r3, [r4, #32]
   15930:	add	r0, r0, r2
   15934:	mvn	r2, #3
   15938:	str	r0, [r4, #16]
   1593c:	str	r2, [r3, #4]
   15940:	b	158d8 <flatcc_builder_extend_offset_vector@@Base+0x54>
   15944:	mov	r0, r5
   15948:	b	158dc <flatcc_builder_extend_offset_vector@@Base+0x58>
   1594c:	bl	1255c <__assert_fail@plt+0x84>

00015950 <flatcc_builder_offset_vector_push@@Base>:
   15950:	ldr	r2, [r0, #32]
   15954:	push	{r4, r5, r6, r7, lr}
   15958:	sub	sp, sp, #12
   1595c:	ldrh	r3, [r2, #14]
   15960:	cmp	r3, #5
   15964:	bne	15a1c <flatcc_builder_offset_vector_push@@Base+0xcc>
   15968:	ldr	r3, [r2, #20]
   1596c:	cmn	r3, #-1073741823	; 0xc0000001
   15970:	beq	15a10 <flatcc_builder_offset_vector_push@@Base+0xc0>
   15974:	add	r3, r3, #1
   15978:	str	r3, [r2, #20]
   1597c:	ldr	r5, [r0, #20]
   15980:	ldr	r2, [r0, #24]
   15984:	add	r3, r5, #4
   15988:	cmp	r3, r2
   1598c:	mov	r4, r0
   15990:	mov	r6, r1
   15994:	str	r3, [r0, #20]
   15998:	bcs	159b0 <flatcc_builder_offset_vector_push@@Base+0x60>
   1599c:	ldr	r3, [r0, #16]
   159a0:	adds	r0, r3, r5
   159a4:	strne	r6, [r3, r5]
   159a8:	add	sp, sp, #12
   159ac:	pop	{r4, r5, r6, r7, pc}
   159b0:	ldr	r2, [r0, #28]
   159b4:	mov	r3, #1
   159b8:	add	r2, r5, r2
   159bc:	ldr	r0, [r0, #40]	; 0x28
   159c0:	add	r2, r2, #5
   159c4:	str	r3, [sp]
   159c8:	add	r1, r4, #60	; 0x3c
   159cc:	ldr	r7, [r4, #48]	; 0x30
   159d0:	blx	r7
   159d4:	cmp	r0, #0
   159d8:	bne	15a10 <flatcc_builder_offset_vector_push@@Base+0xc0>
   159dc:	ldr	r1, [r4, #28]
   159e0:	ldr	r2, [r4, #64]	; 0x40
   159e4:	ldr	r3, [r4, #60]	; 0x3c
   159e8:	sub	r2, r2, r1
   159ec:	cmn	r2, #4
   159f0:	mvnhi	r2, #3
   159f4:	str	r2, [r4, #24]
   159f8:	ldr	r2, [r4, #32]
   159fc:	add	r3, r3, r1
   15a00:	mvn	r1, #3
   15a04:	str	r3, [r4, #16]
   15a08:	str	r1, [r2, #4]
   15a0c:	b	159a0 <flatcc_builder_offset_vector_push@@Base+0x50>
   15a10:	mov	r0, #0
   15a14:	add	sp, sp, #12
   15a18:	pop	{r4, r5, r6, r7, pc}
   15a1c:	ldr	r3, [pc, #12]	; 15a30 <flatcc_builder_offset_vector_push@@Base+0xe0>
   15a20:	ldr	r2, [pc, #12]	; 15a34 <flatcc_builder_offset_vector_push@@Base+0xe4>
   15a24:	ldr	r1, [pc, #12]	; 15a38 <flatcc_builder_offset_vector_push@@Base+0xe8>
   15a28:	ldr	r0, [pc, #12]	; 15a3c <flatcc_builder_offset_vector_push@@Base+0xec>
   15a2c:	bl	124d8 <__assert_fail@plt>
   15a30:	strdeq	r1, [r2], -r0
   15a34:	andeq	r0, r0, r6, lsr #7
   15a38:	andeq	r1, r2, r4, lsl #9
   15a3c:	andeq	r1, r2, ip, asr r6

00015a40 <flatcc_builder_append_offset_vector@@Base>:
   15a40:	push	{r4, r5, r6, r7, r8, r9, lr}
   15a44:	mov	r5, r0
   15a48:	ldr	r0, [r0, #32]
   15a4c:	sub	sp, sp, #12
   15a50:	ldrh	r3, [r0, #14]
   15a54:	cmp	r3, #5
   15a58:	bne	15b3c <flatcc_builder_append_offset_vector@@Base+0xfc>
   15a5c:	mov	r7, r1
   15a60:	ldr	r1, [r0, #20]
   15a64:	adds	r1, r2, r1
   15a68:	movcs	r4, #1
   15a6c:	movcc	r4, #0
   15a70:	cmn	r1, #-1073741823	; 0xc0000001
   15a74:	movls	r3, #0
   15a78:	movhi	r3, #1
   15a7c:	orrs	r4, r4, r3
   15a80:	bne	15b38 <flatcc_builder_append_offset_vector@@Base+0xf8>
   15a84:	str	r1, [r0, #20]
   15a88:	ldr	r8, [r5, #20]
   15a8c:	lsl	r6, r2, #2
   15a90:	ldr	r3, [r5, #24]
   15a94:	add	r1, r6, r8
   15a98:	cmp	r1, r3
   15a9c:	str	r1, [r5, #20]
   15aa0:	bcs	15ad0 <flatcc_builder_append_offset_vector@@Base+0x90>
   15aa4:	ldr	r3, [r5, #16]
   15aa8:	adds	r3, r3, r8
   15aac:	beq	15ac4 <flatcc_builder_append_offset_vector@@Base+0x84>
   15ab0:	mov	r0, r3
   15ab4:	mov	r2, r6
   15ab8:	mov	r1, r7
   15abc:	bl	12430 <memcpy@plt>
   15ac0:	mov	r3, r0
   15ac4:	mov	r0, r3
   15ac8:	add	sp, sp, #12
   15acc:	pop	{r4, r5, r6, r7, r8, r9, pc}
   15ad0:	ldr	r2, [r5, #28]
   15ad4:	mov	r3, #1
   15ad8:	add	r2, r2, #1
   15adc:	ldr	r0, [r5, #40]	; 0x28
   15ae0:	add	r2, r2, r1
   15ae4:	str	r3, [sp]
   15ae8:	add	r1, r5, #60	; 0x3c
   15aec:	ldr	r9, [r5, #48]	; 0x30
   15af0:	blx	r9
   15af4:	cmp	r0, #0
   15af8:	bne	15b30 <flatcc_builder_append_offset_vector@@Base+0xf0>
   15afc:	ldr	r1, [r5, #28]
   15b00:	ldr	r2, [r5, #64]	; 0x40
   15b04:	ldr	r3, [r5, #60]	; 0x3c
   15b08:	sub	r2, r2, r1
   15b0c:	cmn	r2, #4
   15b10:	mvnhi	r2, #3
   15b14:	str	r2, [r5, #24]
   15b18:	ldr	r2, [r5, #32]
   15b1c:	add	r3, r3, r1
   15b20:	mvn	r1, #3
   15b24:	str	r3, [r5, #16]
   15b28:	str	r1, [r2, #4]
   15b2c:	b	15aa8 <flatcc_builder_append_offset_vector@@Base+0x68>
   15b30:	mov	r3, r4
   15b34:	b	15ac4 <flatcc_builder_append_offset_vector@@Base+0x84>
   15b38:	bl	1255c <__assert_fail@plt+0x84>
   15b3c:	ldr	r3, [pc, #12]	; 15b50 <flatcc_builder_append_offset_vector@@Base+0x110>
   15b40:	mov	r2, #948	; 0x3b4
   15b44:	ldr	r1, [pc, #8]	; 15b54 <flatcc_builder_append_offset_vector@@Base+0x114>
   15b48:	ldr	r0, [pc, #8]	; 15b58 <flatcc_builder_append_offset_vector@@Base+0x118>
   15b4c:	bl	124d8 <__assert_fail@plt>
   15b50:	andeq	r1, r2, r4, lsl r1
   15b54:	andeq	r1, r2, r4, lsl #9
   15b58:	andeq	r1, r2, ip, asr r6

00015b5c <flatcc_builder_extend_string@@Base>:
   15b5c:	ldr	r2, [r0, #32]
   15b60:	push	{r4, r5, r6, lr}
   15b64:	sub	sp, sp, #8
   15b68:	ldrh	r3, [r2, #14]
   15b6c:	cmp	r3, #6
   15b70:	bne	15c1c <flatcc_builder_extend_string@@Base+0xc0>
   15b74:	ldr	r3, [r2, #20]
   15b78:	adds	r3, r1, r3
   15b7c:	bcs	15c18 <flatcc_builder_extend_string@@Base+0xbc>
   15b80:	str	r3, [r2, #20]
   15b84:	ldr	r5, [r0, #20]
   15b88:	ldr	r3, [r0, #24]
   15b8c:	add	r1, r1, r5
   15b90:	cmp	r1, r3
   15b94:	mov	r4, r0
   15b98:	str	r1, [r0, #20]
   15b9c:	bcs	15bb0 <flatcc_builder_extend_string@@Base+0x54>
   15ba0:	ldr	r0, [r0, #16]
   15ba4:	add	r0, r0, r5
   15ba8:	add	sp, sp, #8
   15bac:	pop	{r4, r5, r6, pc}
   15bb0:	ldr	r2, [r0, #28]
   15bb4:	mov	r3, #1
   15bb8:	add	r2, r2, #1
   15bbc:	ldr	r0, [r0, #40]	; 0x28
   15bc0:	add	r2, r2, r1
   15bc4:	str	r3, [sp]
   15bc8:	add	r1, r4, #60	; 0x3c
   15bcc:	ldr	r6, [r4, #48]	; 0x30
   15bd0:	blx	r6
   15bd4:	cmp	r0, #0
   15bd8:	bne	15c10 <flatcc_builder_extend_string@@Base+0xb4>
   15bdc:	ldr	r2, [r4, #28]
   15be0:	ldr	r3, [r4, #64]	; 0x40
   15be4:	ldr	r0, [r4, #60]	; 0x3c
   15be8:	sub	r3, r3, r2
   15bec:	cmn	r3, #4
   15bf0:	mvnhi	r3, #3
   15bf4:	str	r3, [r4, #24]
   15bf8:	ldr	r3, [r4, #32]
   15bfc:	add	r0, r0, r2
   15c00:	mvn	r2, #3
   15c04:	str	r0, [r4, #16]
   15c08:	str	r2, [r3, #4]
   15c0c:	b	15ba4 <flatcc_builder_extend_string@@Base+0x48>
   15c10:	mov	r0, #0
   15c14:	b	15ba8 <flatcc_builder_extend_string@@Base+0x4c>
   15c18:	bl	1255c <__assert_fail@plt+0x84>
   15c1c:	ldr	r3, [pc, #12]	; 15c30 <flatcc_builder_extend_string@@Base+0xd4>
   15c20:	ldr	r2, [pc, #12]	; 15c34 <flatcc_builder_extend_string@@Base+0xd8>
   15c24:	ldr	r1, [pc, #12]	; 15c38 <flatcc_builder_extend_string@@Base+0xdc>
   15c28:	ldr	r0, [pc, #12]	; 15c3c <flatcc_builder_extend_string@@Base+0xe0>
   15c2c:	bl	124d8 <__assert_fail@plt>
   15c30:	andeq	r1, r2, r8, lsr r1
   15c34:			; <UNDEFINED> instruction: 0x000003bd
   15c38:	andeq	r1, r2, r4, lsl #9
   15c3c:	andeq	r1, r2, r4, lsl #10

00015c40 <flatcc_builder_append_string@@Base>:
   15c40:	push	{r4, r5, r6, r7, r8, lr}
   15c44:	mov	r6, r1
   15c48:	ldr	r1, [r0, #32]
   15c4c:	sub	sp, sp, #8
   15c50:	ldrh	r3, [r1, #14]
   15c54:	cmp	r3, #6
   15c58:	bne	15d24 <flatcc_builder_append_string@@Base+0xe4>
   15c5c:	ldr	r3, [r1, #20]
   15c60:	mov	r5, r2
   15c64:	adds	r3, r2, r3
   15c68:	bcs	15d20 <flatcc_builder_append_string@@Base+0xe0>
   15c6c:	str	r3, [r1, #20]
   15c70:	ldr	r7, [r0, #20]
   15c74:	ldr	r3, [r0, #24]
   15c78:	add	r1, r2, r7
   15c7c:	cmp	r1, r3
   15c80:	mov	r4, r0
   15c84:	str	r1, [r0, #20]
   15c88:	bcs	15cb8 <flatcc_builder_append_string@@Base+0x78>
   15c8c:	ldr	r3, [r0, #16]
   15c90:	adds	r3, r3, r7
   15c94:	beq	15cac <flatcc_builder_append_string@@Base+0x6c>
   15c98:	mov	r0, r3
   15c9c:	mov	r2, r5
   15ca0:	mov	r1, r6
   15ca4:	bl	12430 <memcpy@plt>
   15ca8:	mov	r3, r0
   15cac:	mov	r0, r3
   15cb0:	add	sp, sp, #8
   15cb4:	pop	{r4, r5, r6, r7, r8, pc}
   15cb8:	ldr	r2, [r0, #28]
   15cbc:	mov	r3, #1
   15cc0:	add	r2, r2, #1
   15cc4:	ldr	r0, [r0, #40]	; 0x28
   15cc8:	add	r2, r2, r1
   15ccc:	str	r3, [sp]
   15cd0:	add	r1, r4, #60	; 0x3c
   15cd4:	ldr	r8, [r4, #48]	; 0x30
   15cd8:	blx	r8
   15cdc:	cmp	r0, #0
   15ce0:	bne	15d18 <flatcc_builder_append_string@@Base+0xd8>
   15ce4:	ldr	r1, [r4, #28]
   15ce8:	ldr	r2, [r4, #64]	; 0x40
   15cec:	ldr	r3, [r4, #60]	; 0x3c
   15cf0:	sub	r2, r2, r1
   15cf4:	cmn	r2, #4
   15cf8:	mvnhi	r2, #3
   15cfc:	str	r2, [r4, #24]
   15d00:	ldr	r2, [r4, #32]
   15d04:	add	r3, r3, r1
   15d08:	mvn	r1, #3
   15d0c:	str	r3, [r4, #16]
   15d10:	str	r1, [r2, #4]
   15d14:	b	15c90 <flatcc_builder_append_string@@Base+0x50>
   15d18:	mov	r3, #0
   15d1c:	b	15cac <flatcc_builder_append_string@@Base+0x6c>
   15d20:	bl	1255c <__assert_fail@plt+0x84>
   15d24:	bl	125a8 <__assert_fail@plt+0xd0>

00015d28 <flatcc_builder_append_string_str@@Base>:
   15d28:	push	{r4, r5, r6, r7, r8, lr}
   15d2c:	mov	r4, r0
   15d30:	sub	sp, sp, #8
   15d34:	mov	r0, r1
   15d38:	mov	r6, r1
   15d3c:	bl	12484 <strlen@plt>
   15d40:	ldr	r2, [r4, #32]
   15d44:	ldrh	r3, [r2, #14]
   15d48:	cmp	r3, #6
   15d4c:	bne	15e14 <flatcc_builder_append_string_str@@Base+0xec>
   15d50:	ldr	r3, [r2, #20]
   15d54:	mov	r5, r0
   15d58:	adds	r3, r0, r3
   15d5c:	bcs	15e10 <flatcc_builder_append_string_str@@Base+0xe8>
   15d60:	str	r3, [r2, #20]
   15d64:	ldr	r7, [r4, #20]
   15d68:	ldr	r3, [r4, #24]
   15d6c:	add	r1, r0, r7
   15d70:	cmp	r1, r3
   15d74:	str	r1, [r4, #20]
   15d78:	bcs	15da8 <flatcc_builder_append_string_str@@Base+0x80>
   15d7c:	ldr	r3, [r4, #16]
   15d80:	adds	r3, r3, r7
   15d84:	beq	15d9c <flatcc_builder_append_string_str@@Base+0x74>
   15d88:	mov	r0, r3
   15d8c:	mov	r2, r5
   15d90:	mov	r1, r6
   15d94:	bl	12430 <memcpy@plt>
   15d98:	mov	r3, r0
   15d9c:	mov	r0, r3
   15da0:	add	sp, sp, #8
   15da4:	pop	{r4, r5, r6, r7, r8, pc}
   15da8:	ldr	r2, [r4, #28]
   15dac:	mov	r3, #1
   15db0:	add	r2, r2, #1
   15db4:	ldr	r0, [r4, #40]	; 0x28
   15db8:	add	r2, r2, r1
   15dbc:	str	r3, [sp]
   15dc0:	add	r1, r4, #60	; 0x3c
   15dc4:	ldr	r8, [r4, #48]	; 0x30
   15dc8:	blx	r8
   15dcc:	cmp	r0, #0
   15dd0:	bne	15e08 <flatcc_builder_append_string_str@@Base+0xe0>
   15dd4:	ldr	r1, [r4, #28]
   15dd8:	ldr	r2, [r4, #64]	; 0x40
   15ddc:	ldr	r3, [r4, #60]	; 0x3c
   15de0:	sub	r2, r2, r1
   15de4:	cmn	r2, #4
   15de8:	mvnhi	r2, #3
   15dec:	str	r2, [r4, #24]
   15df0:	ldr	r2, [r4, #32]
   15df4:	add	r3, r3, r1
   15df8:	mvn	r1, #3
   15dfc:	str	r3, [r4, #16]
   15e00:	str	r1, [r2, #4]
   15e04:	b	15d80 <flatcc_builder_append_string_str@@Base+0x58>
   15e08:	mov	r3, #0
   15e0c:	b	15d9c <flatcc_builder_append_string_str@@Base+0x74>
   15e10:	bl	1255c <__assert_fail@plt+0x84>
   15e14:	bl	125a8 <__assert_fail@plt+0xd0>

00015e18 <flatcc_builder_append_string_strn@@Base>:
   15e18:	push	{r4, r5, r6, r7, r8, lr}
   15e1c:	mov	r6, r1
   15e20:	mov	r4, r0
   15e24:	sub	sp, sp, #8
   15e28:	mov	r1, #0
   15e2c:	mov	r0, r6
   15e30:	mov	r5, r2
   15e34:	bl	124c0 <memchr@plt>
   15e38:	ldr	r2, [r4, #32]
   15e3c:	ldrh	r3, [r2, #14]
   15e40:	cmp	r0, #0
   15e44:	subne	r5, r0, r6
   15e48:	cmp	r3, #6
   15e4c:	bne	15f10 <flatcc_builder_append_string_strn@@Base+0xf8>
   15e50:	ldr	r3, [r2, #20]
   15e54:	adds	r3, r5, r3
   15e58:	bcs	15f0c <flatcc_builder_append_string_strn@@Base+0xf4>
   15e5c:	str	r3, [r2, #20]
   15e60:	ldr	r7, [r4, #20]
   15e64:	ldr	r3, [r4, #24]
   15e68:	add	r1, r5, r7
   15e6c:	cmp	r1, r3
   15e70:	str	r1, [r4, #20]
   15e74:	bcs	15ea4 <flatcc_builder_append_string_strn@@Base+0x8c>
   15e78:	ldr	r3, [r4, #16]
   15e7c:	adds	r3, r3, r7
   15e80:	beq	15e98 <flatcc_builder_append_string_strn@@Base+0x80>
   15e84:	mov	r0, r3
   15e88:	mov	r2, r5
   15e8c:	mov	r1, r6
   15e90:	bl	12430 <memcpy@plt>
   15e94:	mov	r3, r0
   15e98:	mov	r0, r3
   15e9c:	add	sp, sp, #8
   15ea0:	pop	{r4, r5, r6, r7, r8, pc}
   15ea4:	ldr	r2, [r4, #28]
   15ea8:	mov	r3, #1
   15eac:	add	r2, r2, #1
   15eb0:	ldr	r0, [r4, #40]	; 0x28
   15eb4:	add	r2, r2, r1
   15eb8:	str	r3, [sp]
   15ebc:	add	r1, r4, #60	; 0x3c
   15ec0:	ldr	r8, [r4, #48]	; 0x30
   15ec4:	blx	r8
   15ec8:	cmp	r0, #0
   15ecc:	bne	15f04 <flatcc_builder_append_string_strn@@Base+0xec>
   15ed0:	ldr	r1, [r4, #28]
   15ed4:	ldr	r2, [r4, #64]	; 0x40
   15ed8:	ldr	r3, [r4, #60]	; 0x3c
   15edc:	sub	r2, r2, r1
   15ee0:	cmn	r2, #4
   15ee4:	mvnhi	r2, #3
   15ee8:	str	r2, [r4, #24]
   15eec:	ldr	r2, [r4, #32]
   15ef0:	add	r3, r3, r1
   15ef4:	mvn	r1, #3
   15ef8:	str	r3, [r4, #16]
   15efc:	str	r1, [r2, #4]
   15f00:	b	15e7c <flatcc_builder_append_string_strn@@Base+0x64>
   15f04:	mov	r3, #0
   15f08:	b	15e98 <flatcc_builder_append_string_strn@@Base+0x80>
   15f0c:	bl	1255c <__assert_fail@plt+0x84>
   15f10:	bl	125a8 <__assert_fail@plt+0xd0>

00015f14 <flatcc_builder_truncate_vector@@Base>:
   15f14:	ldr	r3, [r0, #32]
   15f18:	push	{r4, lr}
   15f1c:	ldrh	r2, [r3, #14]
   15f20:	cmp	r2, #4
   15f24:	bne	15f68 <flatcc_builder_truncate_vector@@Base+0x54>
   15f28:	ldr	ip, [r3, #20]
   15f2c:	cmp	ip, r1
   15f30:	bcc	15f7c <flatcc_builder_truncate_vector@@Base+0x68>
   15f34:	ldr	r2, [r3, #16]
   15f38:	sub	ip, ip, r1
   15f3c:	str	ip, [r3, #20]
   15f40:	mul	r2, r2, r1
   15f44:	ldr	r3, [r0, #20]
   15f48:	ldr	r1, [r0, #16]
   15f4c:	sub	r3, r3, r2
   15f50:	str	r3, [r0, #20]
   15f54:	add	r0, r1, r3
   15f58:	mov	r1, #0
   15f5c:	bl	124a8 <memset@plt>
   15f60:	mov	r0, #0
   15f64:	pop	{r4, pc}
   15f68:	ldr	r3, [pc, #32]	; 15f90 <flatcc_builder_truncate_vector@@Base+0x7c>
   15f6c:	ldr	r2, [pc, #32]	; 15f94 <flatcc_builder_truncate_vector@@Base+0x80>
   15f70:	ldr	r1, [pc, #32]	; 15f98 <flatcc_builder_truncate_vector@@Base+0x84>
   15f74:	ldr	r0, [pc, #32]	; 15f9c <flatcc_builder_truncate_vector@@Base+0x88>
   15f78:	bl	124d8 <__assert_fail@plt>
   15f7c:	ldr	r3, [pc, #12]	; 15f90 <flatcc_builder_truncate_vector@@Base+0x7c>
   15f80:	ldr	r2, [pc, #24]	; 15fa0 <flatcc_builder_truncate_vector@@Base+0x8c>
   15f84:	ldr	r1, [pc, #12]	; 15f98 <flatcc_builder_truncate_vector@@Base+0x84>
   15f88:	ldr	r0, [pc, #20]	; 15fa4 <flatcc_builder_truncate_vector@@Base+0x90>
   15f8c:	bl	124d8 <__assert_fail@plt>
   15f90:	andeq	r1, r2, r8, asr r1
   15f94:	ldrdeq	r0, [r0], -r9
   15f98:	andeq	r1, r2, r4, lsl #9
   15f9c:	strdeq	r1, [r2], -r0
   15fa0:	ldrdeq	r0, [r0], -sl
   15fa4:	muleq	r2, r0, r6

00015fa8 <flatcc_builder_truncate_offset_vector@@Base>:
   15fa8:	ldr	r3, [r0, #32]
   15fac:	push	{r4, lr}
   15fb0:	ldrh	r2, [r3, #14]
   15fb4:	cmp	r2, #5
   15fb8:	bne	15ffc <flatcc_builder_truncate_offset_vector@@Base+0x54>
   15fbc:	ldr	ip, [r3, #20]
   15fc0:	cmp	ip, r1
   15fc4:	bcc	16010 <flatcc_builder_truncate_offset_vector@@Base+0x68>
   15fc8:	ldr	r2, [r3, #16]
   15fcc:	sub	ip, ip, r1
   15fd0:	str	ip, [r3, #20]
   15fd4:	mul	r2, r2, r1
   15fd8:	ldr	r3, [r0, #20]
   15fdc:	ldr	r1, [r0, #16]
   15fe0:	sub	r3, r3, r2
   15fe4:	str	r3, [r0, #20]
   15fe8:	add	r0, r1, r3
   15fec:	mov	r1, #0
   15ff0:	bl	124a8 <memset@plt>
   15ff4:	mov	r0, #0
   15ff8:	pop	{r4, pc}
   15ffc:	ldr	r3, [pc, #32]	; 16024 <flatcc_builder_truncate_offset_vector@@Base+0x7c>
   16000:	ldr	r2, [pc, #32]	; 16028 <flatcc_builder_truncate_offset_vector@@Base+0x80>
   16004:	ldr	r1, [pc, #32]	; 1602c <flatcc_builder_truncate_offset_vector@@Base+0x84>
   16008:	ldr	r0, [pc, #32]	; 16030 <flatcc_builder_truncate_offset_vector@@Base+0x88>
   1600c:	bl	124d8 <__assert_fail@plt>
   16010:	ldr	r3, [pc, #12]	; 16024 <flatcc_builder_truncate_offset_vector@@Base+0x7c>
   16014:	ldr	r2, [pc, #24]	; 16034 <flatcc_builder_truncate_offset_vector@@Base+0x8c>
   16018:	ldr	r1, [pc, #12]	; 1602c <flatcc_builder_truncate_offset_vector@@Base+0x84>
   1601c:	ldr	r0, [pc, #20]	; 16038 <flatcc_builder_truncate_offset_vector@@Base+0x90>
   16020:	bl	124d8 <__assert_fail@plt>
   16024:	andeq	r1, r2, r8, ror r1
   16028:	andeq	r0, r0, r2, ror #7
   1602c:	andeq	r1, r2, r4, lsl #9
   16030:	andeq	r1, r2, ip, asr r6
   16034:	andeq	r0, r0, r3, ror #7
   16038:			; <UNDEFINED> instruction: 0x000216b4

0001603c <flatcc_builder_truncate_string@@Base>:
   1603c:	ldr	r2, [r0, #32]
   16040:	push	{r4, lr}
   16044:	ldrh	r3, [r2, #14]
   16048:	cmp	r3, #6
   1604c:	bne	1608c <flatcc_builder_truncate_string@@Base+0x50>
   16050:	ldr	r3, [r2, #20]
   16054:	cmp	r3, r1
   16058:	bcc	160a0 <flatcc_builder_truncate_string@@Base+0x64>
   1605c:	sub	r3, r3, r1
   16060:	str	r3, [r2, #20]
   16064:	ldr	r3, [r0, #20]
   16068:	ldr	r2, [r0, #16]
   1606c:	sub	r3, r3, r1
   16070:	str	r3, [r0, #20]
   16074:	add	r0, r2, r3
   16078:	mov	r2, r1
   1607c:	mov	r1, #0
   16080:	bl	124a8 <memset@plt>
   16084:	mov	r0, #0
   16088:	pop	{r4, pc}
   1608c:	ldr	r3, [pc, #32]	; 160b4 <flatcc_builder_truncate_string@@Base+0x78>
   16090:	ldr	r2, [pc, #32]	; 160b8 <flatcc_builder_truncate_string@@Base+0x7c>
   16094:	ldr	r1, [pc, #32]	; 160bc <flatcc_builder_truncate_string@@Base+0x80>
   16098:	ldr	r0, [pc, #32]	; 160c0 <flatcc_builder_truncate_string@@Base+0x84>
   1609c:	bl	124d8 <__assert_fail@plt>
   160a0:	ldr	r3, [pc, #12]	; 160b4 <flatcc_builder_truncate_string@@Base+0x78>
   160a4:	mov	r2, #1004	; 0x3ec
   160a8:	ldr	r1, [pc, #12]	; 160bc <flatcc_builder_truncate_string@@Base+0x80>
   160ac:	ldr	r0, [pc, #16]	; 160c4 <flatcc_builder_truncate_string@@Base+0x88>
   160b0:	bl	124d8 <__assert_fail@plt>
   160b4:	andeq	r1, r2, r0, lsr #3
   160b8:	andeq	r0, r0, fp, ror #7
   160bc:	andeq	r1, r2, r4, lsl #9
   160c0:	andeq	r1, r2, r4, lsl #10
   160c4:	strdeq	r1, [r2], -r0

000160c8 <flatcc_builder_start_vector@@Base>:
   160c8:	ldr	ip, [r0, #156]	; 0x9c
   160cc:	push	{r4, r5, r6, r7, r8, r9, lr}
   160d0:	cmp	r2, #4
   160d4:	ldr	lr, [r0, #160]	; 0xa0
   160d8:	mov	r4, r0
   160dc:	add	r0, ip, #1
   160e0:	movcs	r7, r2
   160e4:	movcc	r7, #4
   160e8:	cmp	r0, lr
   160ec:	sub	sp, sp, #12
   160f0:	mov	r6, r1
   160f4:	mov	r5, r3
   160f8:	str	r0, [r4, #156]	; 0x9c
   160fc:	ble	1616c <flatcc_builder_start_vector@@Base+0xa4>
   16100:	ldr	r3, [r4, #176]	; 0xb0
   16104:	cmp	r3, #0
   16108:	cmpgt	r0, r3
   1610c:	movgt	r3, #1
   16110:	movle	r3, #0
   16114:	bgt	16214 <flatcc_builder_start_vector@@Base+0x14c>
   16118:	add	ip, ip, ip, lsl #3
   1611c:	ldr	r1, [r4, #88]	; 0x58
   16120:	lsl	r8, ip, #2
   16124:	add	r2, r8, #36	; 0x24
   16128:	cmp	r2, r1
   1612c:	bhi	161f0 <flatcc_builder_start_vector@@Base+0x128>
   16130:	ldr	r3, [r4, #84]	; 0x54
   16134:	add	r3, r3, r8
   16138:	cmp	r3, #0
   1613c:	str	r3, [r4, #32]
   16140:	beq	16214 <flatcc_builder_start_vector@@Base+0x14c>
   16144:	ldr	r2, [r4, #88]	; 0x58
   16148:	ldr	r0, [pc, #204]	; 1621c <flatcc_builder_start_vector@@Base+0x154>
   1614c:	ldr	r1, [r4, #176]	; 0xb0
   16150:	umull	r0, r2, r0, r2
   16154:	lsr	r2, r2, #3
   16158:	cmp	r1, #0
   1615c:	cmpgt	r2, r1
   16160:	str	r2, [r4, #160]	; 0xa0
   16164:	strgt	r1, [r4, #160]	; 0xa0
   16168:	b	16178 <flatcc_builder_start_vector@@Base+0xb0>
   1616c:	ldr	r3, [r4, #32]
   16170:	add	r3, r3, #36	; 0x24
   16174:	str	r3, [r4, #32]
   16178:	ldr	r0, [r4, #20]
   1617c:	ldr	r1, [r4, #28]
   16180:	ldrh	ip, [r4, #130]	; 0x82
   16184:	add	r2, r0, r1
   16188:	add	r2, r2, #7
   1618c:	str	r0, [r3, #8]
   16190:	bic	r2, r2, #7
   16194:	mov	r0, #0
   16198:	strh	ip, [r3, #12]
   1619c:	strh	r7, [r4, #130]	; 0x82
   161a0:	str	r1, [r3]
   161a4:	str	r2, [r4, #28]
   161a8:	str	r0, [r4, #20]
   161ac:	str	r0, [r3, #20]
   161b0:	str	r6, [r3, #16]
   161b4:	str	r5, [r3, #24]
   161b8:	ldr	r1, [r4, #64]	; 0x40
   161bc:	ldr	ip, [r4, #60]	; 0x3c
   161c0:	sub	r1, r1, r2
   161c4:	mvn	lr, #3
   161c8:	cmp	r1, lr
   161cc:	add	r2, ip, r2
   161d0:	movhi	r1, lr
   161d4:	mov	ip, #4
   161d8:	strh	ip, [r3, #14]
   161dc:	str	r2, [r4, #16]
   161e0:	str	r1, [r4, #24]
   161e4:	str	lr, [r3, #4]
   161e8:	add	sp, sp, #12
   161ec:	pop	{r4, r5, r6, r7, r8, r9, pc}
   161f0:	mov	r1, #4
   161f4:	ldr	r0, [r4, #40]	; 0x28
   161f8:	str	r1, [sp]
   161fc:	add	r1, r4, #84	; 0x54
   16200:	ldr	r9, [r4, #48]	; 0x30
   16204:	blx	r9
   16208:	cmp	r0, #0
   1620c:	beq	16130 <flatcc_builder_start_vector@@Base+0x68>
   16210:	bl	124e8 <__assert_fail@plt+0x10>
   16214:	mvn	r0, #0
   16218:	b	161e8 <flatcc_builder_start_vector@@Base+0x120>
   1621c:	stmiacc	r3!, {r0, r3, r4, r5, r9, sl, fp, pc}^

00016220 <flatcc_builder_start_offset_vector@@Base>:
   16220:	ldr	r1, [r0, #156]	; 0x9c
   16224:	ldr	r3, [r0, #160]	; 0xa0
   16228:	add	r2, r1, #1
   1622c:	cmp	r2, r3
   16230:	push	{r4, r5, r6, lr}
   16234:	mov	r4, r0
   16238:	sub	sp, sp, #8
   1623c:	str	r2, [r0, #156]	; 0x9c
   16240:	ble	162b0 <flatcc_builder_start_offset_vector@@Base+0x90>
   16244:	ldr	r3, [r0, #176]	; 0xb0
   16248:	cmp	r3, #0
   1624c:	cmpgt	r2, r3
   16250:	movgt	r3, #1
   16254:	movle	r3, #0
   16258:	bgt	16358 <flatcc_builder_start_offset_vector@@Base+0x138>
   1625c:	add	r1, r1, r1, lsl #3
   16260:	ldr	r0, [r0, #88]	; 0x58
   16264:	lsl	r5, r1, #2
   16268:	add	r2, r5, #36	; 0x24
   1626c:	cmp	r2, r0
   16270:	bhi	16334 <flatcc_builder_start_offset_vector@@Base+0x114>
   16274:	ldr	r3, [r4, #84]	; 0x54
   16278:	add	r3, r3, r5
   1627c:	cmp	r3, #0
   16280:	str	r3, [r4, #32]
   16284:	beq	16358 <flatcc_builder_start_offset_vector@@Base+0x138>
   16288:	ldr	r2, [r4, #88]	; 0x58
   1628c:	ldr	r0, [pc, #204]	; 16360 <flatcc_builder_start_offset_vector@@Base+0x140>
   16290:	ldr	r1, [r4, #176]	; 0xb0
   16294:	umull	r0, r2, r0, r2
   16298:	lsr	r2, r2, #3
   1629c:	cmp	r1, #0
   162a0:	cmpgt	r2, r1
   162a4:	str	r2, [r4, #160]	; 0xa0
   162a8:	strgt	r1, [r4, #160]	; 0xa0
   162ac:	b	162bc <flatcc_builder_start_offset_vector@@Base+0x9c>
   162b0:	ldr	r3, [r0, #32]
   162b4:	add	r3, r3, #36	; 0x24
   162b8:	str	r3, [r0, #32]
   162bc:	ldr	lr, [r4, #20]
   162c0:	ldr	ip, [r4, #28]
   162c4:	ldrh	r5, [r4, #130]	; 0x82
   162c8:	add	r2, lr, ip
   162cc:	add	r2, r2, #7
   162d0:	bic	r2, r2, #7
   162d4:	mov	r1, #4
   162d8:	mov	r0, #0
   162dc:	str	lr, [r3, #8]
   162e0:	strh	r5, [r3, #12]
   162e4:	strh	r1, [r4, #130]	; 0x82
   162e8:	str	ip, [r3]
   162ec:	str	r2, [r4, #28]
   162f0:	str	r0, [r4, #20]
   162f4:	str	r1, [r3, #16]
   162f8:	str	r0, [r3, #20]
   162fc:	ldr	r1, [r4, #64]	; 0x40
   16300:	ldr	ip, [r4, #60]	; 0x3c
   16304:	sub	r1, r1, r2
   16308:	mvn	lr, #3
   1630c:	cmp	r1, lr
   16310:	add	r2, ip, r2
   16314:	movhi	r1, lr
   16318:	mov	ip, #5
   1631c:	strh	ip, [r3, #14]
   16320:	str	r2, [r4, #16]
   16324:	str	r1, [r4, #24]
   16328:	str	lr, [r3, #4]
   1632c:	add	sp, sp, #8
   16330:	pop	{r4, r5, r6, pc}
   16334:	mov	r1, #4
   16338:	ldr	r0, [r4, #40]	; 0x28
   1633c:	str	r1, [sp]
   16340:	add	r1, r4, #84	; 0x54
   16344:	ldr	r6, [r4, #48]	; 0x30
   16348:	blx	r6
   1634c:	cmp	r0, #0
   16350:	beq	16274 <flatcc_builder_start_offset_vector@@Base+0x54>
   16354:	bl	124e8 <__assert_fail@plt+0x10>
   16358:	mvn	r0, #0
   1635c:	b	1632c <flatcc_builder_start_offset_vector@@Base+0x10c>
   16360:	stmiacc	r3!, {r0, r3, r4, r5, r9, sl, fp, pc}^

00016364 <flatcc_builder_create_offset_vector@@Base>:
   16364:	push	{r4, r5, r6, r7, r8, lr}
   16368:	mov	r4, r0
   1636c:	ldr	r0, [r0, #156]	; 0x9c
   16370:	ldr	r3, [r4, #160]	; 0xa0
   16374:	mov	r7, r1
   16378:	add	r1, r0, #1
   1637c:	cmp	r1, r3
   16380:	sub	sp, sp, #8
   16384:	mov	r5, r2
   16388:	str	r1, [r4, #156]	; 0x9c
   1638c:	ble	163fc <flatcc_builder_create_offset_vector@@Base+0x98>
   16390:	ldr	r3, [r4, #176]	; 0xb0
   16394:	cmp	r1, r3
   16398:	cmpgt	r3, #0
   1639c:	movgt	r3, #1
   163a0:	movle	r3, #0
   163a4:	bgt	164cc <flatcc_builder_create_offset_vector@@Base+0x168>
   163a8:	add	r0, r0, r0, lsl #3
   163ac:	ldr	r1, [r4, #88]	; 0x58
   163b0:	lsl	r6, r0, #2
   163b4:	add	r2, r6, #36	; 0x24
   163b8:	cmp	r2, r1
   163bc:	bhi	16534 <flatcc_builder_create_offset_vector@@Base+0x1d0>
   163c0:	ldr	r3, [r4, #84]	; 0x54
   163c4:	add	r3, r3, r6
   163c8:	cmp	r3, #0
   163cc:	str	r3, [r4, #32]
   163d0:	beq	164cc <flatcc_builder_create_offset_vector@@Base+0x168>
   163d4:	ldr	r2, [r4, #88]	; 0x58
   163d8:	ldr	r0, [pc, #552]	; 16608 <flatcc_builder_create_offset_vector@@Base+0x2a4>
   163dc:	ldr	r1, [r4, #176]	; 0xb0
   163e0:	umull	r0, r2, r0, r2
   163e4:	lsr	r2, r2, #3
   163e8:	cmp	r1, #0
   163ec:	cmpgt	r2, r1
   163f0:	str	r2, [r4, #160]	; 0xa0
   163f4:	strgt	r1, [r4, #160]	; 0xa0
   163f8:	b	16408 <flatcc_builder_create_offset_vector@@Base+0xa4>
   163fc:	ldr	r3, [r4, #32]
   16400:	add	r3, r3, #36	; 0x24
   16404:	str	r3, [r4, #32]
   16408:	ldr	r2, [r4, #20]
   1640c:	ldr	ip, [r4, #28]
   16410:	ldrh	r6, [r4, #130]	; 0x82
   16414:	add	r1, r2, ip
   16418:	mvn	lr, #3
   1641c:	add	r1, r1, #7
   16420:	str	r2, [r3, #8]
   16424:	bic	r1, r1, #7
   16428:	mov	r0, #4
   1642c:	mov	r2, #0
   16430:	strh	r6, [r3, #12]
   16434:	strh	r0, [r4, #130]	; 0x82
   16438:	stm	r3, {ip, lr}
   1643c:	str	r2, [r4, #20]
   16440:	str	r1, [r4, #28]
   16444:	str	r0, [r3, #16]
   16448:	str	r2, [r3, #20]
   1644c:	ldr	r2, [r4, #64]	; 0x40
   16450:	ldr	r0, [r4, #60]	; 0x3c
   16454:	sub	r2, r2, r1
   16458:	cmp	r2, lr
   1645c:	mov	ip, #5
   16460:	strh	ip, [r3, #14]
   16464:	add	r0, r0, r1
   16468:	strls	r2, [r4, #24]
   1646c:	strhi	lr, [r4, #24]
   16470:	movhi	r2, lr
   16474:	mvn	r6, #3
   16478:	cmn	r5, #-1073741823	; 0xc0000001
   1647c:	str	r0, [r4, #16]
   16480:	str	r6, [r3, #4]
   16484:	bhi	165f0 <flatcc_builder_create_offset_vector@@Base+0x28c>
   16488:	lsl	r8, r5, #2
   1648c:	cmp	r8, r2
   16490:	str	r5, [r3, #20]
   16494:	str	r8, [r4, #20]
   16498:	bcs	164dc <flatcc_builder_create_offset_vector@@Base+0x178>
   1649c:	cmp	r0, #0
   164a0:	beq	164cc <flatcc_builder_create_offset_vector@@Base+0x168>
   164a4:	mov	r2, r8
   164a8:	mov	r1, r7
   164ac:	bl	12430 <memcpy@plt>
   164b0:	ldr	r3, [r4, #32]
   164b4:	ldrh	r2, [r3, #14]
   164b8:	cmp	r2, #5
   164bc:	bne	165f4 <flatcc_builder_create_offset_vector@@Base+0x290>
   164c0:	ldr	r2, [r3, #20]
   164c4:	cmn	r2, #-1073741823	; 0xc0000001
   164c8:	bls	16558 <flatcc_builder_create_offset_vector@@Base+0x1f4>
   164cc:	mov	r5, #0
   164d0:	mov	r0, r5
   164d4:	add	sp, sp, #8
   164d8:	pop	{r4, r5, r6, r7, r8, pc}
   164dc:	mov	r3, #1
   164e0:	add	r2, r8, #1
   164e4:	ldr	r0, [r4, #40]	; 0x28
   164e8:	add	r2, r2, r1
   164ec:	str	r3, [sp]
   164f0:	add	r1, r4, #60	; 0x3c
   164f4:	ldr	r5, [r4, #48]	; 0x30
   164f8:	blx	r5
   164fc:	cmp	r0, #0
   16500:	bne	164cc <flatcc_builder_create_offset_vector@@Base+0x168>
   16504:	ldr	r2, [r4, #28]
   16508:	ldr	r3, [r4, #64]	; 0x40
   1650c:	ldr	r0, [r4, #60]	; 0x3c
   16510:	sub	r3, r3, r2
   16514:	ldr	r1, [r4, #32]
   16518:	cmn	r3, #4
   1651c:	movhi	r3, r6
   16520:	add	r0, r0, r2
   16524:	str	r3, [r4, #24]
   16528:	str	r0, [r4, #16]
   1652c:	str	r6, [r1, #4]
   16530:	b	1649c <flatcc_builder_create_offset_vector@@Base+0x138>
   16534:	mov	r1, #4
   16538:	ldr	r0, [r4, #40]	; 0x28
   1653c:	str	r1, [sp]
   16540:	add	r1, r4, #84	; 0x54
   16544:	ldr	r8, [r4, #48]	; 0x30
   16548:	blx	r8
   1654c:	cmp	r0, #0
   16550:	beq	163c0 <flatcc_builder_create_offset_vector@@Base+0x5c>
   16554:	bl	124e8 <__assert_fail@plt+0x10>
   16558:	ldr	r1, [r4, #16]
   1655c:	mov	r0, r4
   16560:	bl	13f88 <flatcc_builder_default_alloc@@Base+0x2fc>
   16564:	subs	r5, r0, #0
   16568:	beq	164cc <flatcc_builder_create_offset_vector@@Base+0x168>
   1656c:	ldr	r2, [r4, #20]
   16570:	mov	r1, #0
   16574:	ldr	r0, [r4, #16]
   16578:	bl	124a8 <memset@plt>
   1657c:	ldr	r3, [r4, #32]
   16580:	ldr	r2, [r4, #64]	; 0x40
   16584:	ldrh	lr, [r4, #130]	; 0x82
   16588:	ldr	ip, [r3]
   1658c:	ldr	r1, [r3, #4]
   16590:	ldrh	r0, [r4, #128]	; 0x80
   16594:	sub	r2, r2, ip
   16598:	cmp	r2, r1
   1659c:	movcs	r2, r1
   165a0:	cmp	r0, lr
   165a4:	ldr	r0, [r4, #60]	; 0x3c
   165a8:	ldr	r6, [r3, #8]
   165ac:	str	r2, [r4, #24]
   165b0:	add	r2, r0, ip
   165b4:	str	r2, [r4, #16]
   165b8:	str	r6, [r4, #20]
   165bc:	ldr	r2, [r4, #156]	; 0x9c
   165c0:	str	ip, [r4, #28]
   165c4:	str	r1, [r3, #4]
   165c8:	strhcc	lr, [r4, #128]	; 0x80
   165cc:	ldrh	r1, [r3, #12]
   165d0:	sub	r2, r2, #1
   165d4:	sub	r3, r3, #36	; 0x24
   165d8:	mov	r0, r5
   165dc:	str	r2, [r4, #156]	; 0x9c
   165e0:	strh	r1, [r4, #130]	; 0x82
   165e4:	str	r3, [r4, #32]
   165e8:	add	sp, sp, #8
   165ec:	pop	{r4, r5, r6, r7, r8, pc}
   165f0:	bl	1255c <__assert_fail@plt+0x84>
   165f4:	ldr	r3, [pc, #16]	; 1660c <flatcc_builder_create_offset_vector@@Base+0x2a8>
   165f8:	ldr	r2, [pc, #16]	; 16610 <flatcc_builder_create_offset_vector@@Base+0x2ac>
   165fc:	ldr	r1, [pc, #16]	; 16614 <flatcc_builder_create_offset_vector@@Base+0x2b0>
   16600:	ldr	r0, [pc, #16]	; 16618 <flatcc_builder_create_offset_vector@@Base+0x2b4>
   16604:	bl	124d8 <__assert_fail@plt>
   16608:	stmiacc	r3!, {r0, r3, r4, r5, r9, sl, fp, pc}^
   1660c:	andeq	r1, r2, r0, asr #3
   16610:	andeq	r0, r0, r8, asr #11
   16614:	andeq	r1, r2, r4, lsl #9
   16618:	andeq	r1, r2, ip, asr r6

0001661c <flatcc_builder_start_string@@Base>:
   1661c:	ldr	r1, [r0, #156]	; 0x9c
   16620:	ldr	r3, [r0, #160]	; 0xa0
   16624:	add	r2, r1, #1
   16628:	cmp	r2, r3
   1662c:	push	{r4, r5, r6, lr}
   16630:	mov	r4, r0
   16634:	sub	sp, sp, #8
   16638:	str	r2, [r0, #156]	; 0x9c
   1663c:	ble	166ac <flatcc_builder_start_string@@Base+0x90>
   16640:	ldr	r3, [r0, #176]	; 0xb0
   16644:	cmp	r3, #0
   16648:	cmpgt	r2, r3
   1664c:	movgt	r3, #1
   16650:	movle	r3, #0
   16654:	bgt	16754 <flatcc_builder_start_string@@Base+0x138>
   16658:	add	r1, r1, r1, lsl #3
   1665c:	ldr	r0, [r0, #88]	; 0x58
   16660:	lsl	r5, r1, #2
   16664:	add	r2, r5, #36	; 0x24
   16668:	cmp	r2, r0
   1666c:	bhi	16730 <flatcc_builder_start_string@@Base+0x114>
   16670:	ldr	r3, [r4, #84]	; 0x54
   16674:	add	r3, r3, r5
   16678:	cmp	r3, #0
   1667c:	str	r3, [r4, #32]
   16680:	beq	16754 <flatcc_builder_start_string@@Base+0x138>
   16684:	ldr	r2, [r4, #88]	; 0x58
   16688:	ldr	r0, [pc, #204]	; 1675c <flatcc_builder_start_string@@Base+0x140>
   1668c:	ldr	r1, [r4, #176]	; 0xb0
   16690:	umull	r0, r2, r0, r2
   16694:	lsr	r2, r2, #3
   16698:	cmp	r1, #0
   1669c:	cmpgt	r2, r1
   166a0:	str	r2, [r4, #160]	; 0xa0
   166a4:	strgt	r1, [r4, #160]	; 0xa0
   166a8:	b	166b8 <flatcc_builder_start_string@@Base+0x9c>
   166ac:	ldr	r3, [r0, #32]
   166b0:	add	r3, r3, #36	; 0x24
   166b4:	str	r3, [r0, #32]
   166b8:	ldr	lr, [r4, #20]
   166bc:	ldr	ip, [r4, #28]
   166c0:	ldrh	r5, [r4, #130]	; 0x82
   166c4:	add	r2, lr, ip
   166c8:	add	r2, r2, #7
   166cc:	bic	r2, r2, #7
   166d0:	mov	r1, #1
   166d4:	mov	r0, #0
   166d8:	str	lr, [r3, #8]
   166dc:	strh	r5, [r3, #12]
   166e0:	strh	r1, [r4, #130]	; 0x82
   166e4:	str	ip, [r3]
   166e8:	str	r2, [r4, #28]
   166ec:	str	r0, [r4, #20]
   166f0:	str	r1, [r3, #16]
   166f4:	str	r0, [r3, #20]
   166f8:	ldr	r1, [r4, #64]	; 0x40
   166fc:	ldr	ip, [r4, #60]	; 0x3c
   16700:	sub	r1, r1, r2
   16704:	mvn	lr, #3
   16708:	cmp	r1, lr
   1670c:	add	r2, ip, r2
   16710:	movhi	r1, lr
   16714:	mov	ip, #6
   16718:	strh	ip, [r3, #14]
   1671c:	str	r2, [r4, #16]
   16720:	str	r1, [r4, #24]
   16724:	str	lr, [r3, #4]
   16728:	add	sp, sp, #8
   1672c:	pop	{r4, r5, r6, pc}
   16730:	mov	r1, #4
   16734:	ldr	r0, [r4, #40]	; 0x28
   16738:	str	r1, [sp]
   1673c:	add	r1, r4, #84	; 0x54
   16740:	ldr	r6, [r4, #48]	; 0x30
   16744:	blx	r6
   16748:	cmp	r0, #0
   1674c:	beq	16670 <flatcc_builder_start_string@@Base+0x54>
   16750:	bl	124e8 <__assert_fail@plt+0x10>
   16754:	mvn	r0, #0
   16758:	b	16728 <flatcc_builder_start_string@@Base+0x10c>
   1675c:	stmiacc	r3!, {r0, r3, r4, r5, r9, sl, fp, pc}^

00016760 <flatcc_builder_reserve_table@@Base>:
   16760:	cmp	r1, #0
   16764:	push	{r4, r5, r6, r7, lr}
   16768:	sub	sp, sp, #12
   1676c:	blt	16844 <flatcc_builder_reserve_table@@Base+0xe4>
   16770:	ldr	r2, [r0, #32]
   16774:	add	r1, r1, #2
   16778:	mov	r5, r0
   1677c:	ldrh	r6, [r2, #28]
   16780:	ldr	r3, [r2, #16]
   16784:	ldr	r0, [r0, #56]	; 0x38
   16788:	lsl	r4, r1, #1
   1678c:	add	r6, r3, r6, lsl #1
   16790:	add	r2, r6, r4
   16794:	cmp	r2, r0
   16798:	bhi	167f4 <flatcc_builder_reserve_table@@Base+0x94>
   1679c:	ldr	r3, [r5, #52]	; 0x34
   167a0:	adds	r3, r3, r6
   167a4:	streq	r3, [r5, #4]
   167a8:	mvneq	r0, #0
   167ac:	beq	167ec <flatcc_builder_reserve_table@@Base+0x8c>
   167b0:	ldr	r2, [r5, #32]
   167b4:	add	r3, r3, #4
   167b8:	str	r3, [r5, #4]
   167bc:	ldr	r6, [r2, #20]
   167c0:	ldr	r3, [r5, #80]	; 0x50
   167c4:	add	r2, r4, r6
   167c8:	sub	r2, r2, #3
   167cc:	cmp	r2, r3
   167d0:	bhi	1681c <flatcc_builder_reserve_table@@Base+0xbc>
   167d4:	ldr	r3, [r5, #76]	; 0x4c
   167d8:	add	r3, r3, r6
   167dc:	cmp	r3, #0
   167e0:	movne	r0, #0
   167e4:	mvneq	r0, #0
   167e8:	str	r3, [r5]
   167ec:	add	sp, sp, #12
   167f0:	pop	{r4, r5, r6, r7, pc}
   167f4:	mov	r3, #0
   167f8:	ldr	r0, [r5, #40]	; 0x28
   167fc:	add	r1, r5, #52	; 0x34
   16800:	str	r3, [sp]
   16804:	mov	r3, #1
   16808:	ldr	r7, [r5, #48]	; 0x30
   1680c:	blx	r7
   16810:	cmp	r0, #0
   16814:	beq	1679c <flatcc_builder_reserve_table@@Base+0x3c>
   16818:	bl	124e8 <__assert_fail@plt+0x10>
   1681c:	mov	r3, #3
   16820:	ldr	r0, [r5, #40]	; 0x28
   16824:	add	r1, r5, #76	; 0x4c
   16828:	str	r3, [sp]
   1682c:	mov	r3, #0
   16830:	ldr	r4, [r5, #48]	; 0x30
   16834:	blx	r4
   16838:	cmp	r0, #0
   1683c:	beq	167d4 <flatcc_builder_reserve_table@@Base+0x74>
   16840:	b	16818 <flatcc_builder_reserve_table@@Base+0xb8>
   16844:	ldr	r3, [pc, #12]	; 16858 <flatcc_builder_reserve_table@@Base+0xf8>
   16848:	ldr	r2, [pc, #12]	; 1685c <flatcc_builder_reserve_table@@Base+0xfc>
   1684c:	ldr	r1, [pc, #12]	; 16860 <flatcc_builder_reserve_table@@Base+0x100>
   16850:	ldr	r0, [pc, #12]	; 16864 <flatcc_builder_reserve_table@@Base+0x104>
   16854:	bl	124d8 <__assert_fail@plt>
   16858:	andeq	r1, r2, r4, ror #3
   1685c:	andeq	r0, r0, r9, lsr #8
   16860:	andeq	r1, r2, r4, lsl #9
   16864:	andeq	r1, r2, r4, lsl r7

00016868 <flatcc_builder_start_table@@Base>:
   16868:	push	{r4, r5, r6, r7, lr}
   1686c:	mov	r5, r1
   16870:	ldr	r1, [r0, #156]	; 0x9c
   16874:	ldr	r3, [r0, #160]	; 0xa0
   16878:	add	r2, r1, #1
   1687c:	cmp	r2, r3
   16880:	sub	sp, sp, #12
   16884:	mov	r4, r0
   16888:	str	r2, [r0, #156]	; 0x9c
   1688c:	ble	168fc <flatcc_builder_start_table@@Base+0x94>
   16890:	ldr	r3, [r0, #176]	; 0xb0
   16894:	cmp	r3, #0
   16898:	cmpgt	r2, r3
   1689c:	movgt	r3, #1
   168a0:	movle	r3, #0
   168a4:	bgt	16a9c <flatcc_builder_start_table@@Base+0x234>
   168a8:	add	r1, r1, r1, lsl #3
   168ac:	ldr	r0, [r0, #88]	; 0x58
   168b0:	lsl	r6, r1, #2
   168b4:	add	r2, r6, #36	; 0x24
   168b8:	cmp	r2, r0
   168bc:	bhi	16a78 <flatcc_builder_start_table@@Base+0x210>
   168c0:	ldr	r3, [r4, #84]	; 0x54
   168c4:	add	r3, r3, r6
   168c8:	cmp	r3, #0
   168cc:	str	r3, [r4, #32]
   168d0:	beq	16a9c <flatcc_builder_start_table@@Base+0x234>
   168d4:	ldr	r2, [r4, #88]	; 0x58
   168d8:	ldr	r0, [pc, #452]	; 16aa4 <flatcc_builder_start_table@@Base+0x23c>
   168dc:	ldr	r1, [r4, #176]	; 0xb0
   168e0:	umull	r0, r2, r0, r2
   168e4:	lsr	r2, r2, #3
   168e8:	cmp	r2, r1
   168ec:	cmpgt	r1, #0
   168f0:	str	r2, [r4, #160]	; 0xa0
   168f4:	strgt	r1, [r4, #160]	; 0xa0
   168f8:	b	16908 <flatcc_builder_start_table@@Base+0xa0>
   168fc:	ldr	r3, [r0, #32]
   16900:	add	r3, r3, #36	; 0x24
   16904:	str	r3, [r0, #32]
   16908:	ldr	ip, [r4, #20]
   1690c:	ldr	lr, [r4, #28]
   16910:	ldrh	r7, [r4, #130]	; 0x82
   16914:	ldr	r6, [r4, #4]
   16918:	ldr	r0, [r4, #52]	; 0x34
   1691c:	add	r2, ip, lr
   16920:	str	ip, [r3, #8]
   16924:	add	r2, r2, #7
   16928:	mov	ip, #4
   1692c:	strh	r7, [r3, #12]
   16930:	sub	r1, r6, r0
   16934:	strh	ip, [r4, #130]	; 0x82
   16938:	bic	r2, r2, #7
   1693c:	mvn	r6, #3
   16940:	mov	ip, #0
   16944:	str	lr, [r3]
   16948:	str	r6, [r3, #4]
   1694c:	str	r2, [r4, #28]
   16950:	str	ip, [r4, #20]
   16954:	str	r1, [r3, #16]
   16958:	ldr	lr, [r4, #76]	; 0x4c
   1695c:	ldr	r2, [r4]
   16960:	add	r5, r5, #2
   16964:	sub	r2, r2, lr
   16968:	str	r2, [r3, #20]
   1696c:	ldr	r2, [r4, #12]
   16970:	lsl	r5, r5, #1
   16974:	str	r2, [r3, #24]
   16978:	ldrh	r6, [r4, #8]
   1697c:	ldr	lr, [pc, #292]	; 16aa8 <flatcc_builder_start_table@@Base+0x240>
   16980:	strh	r6, [r3, #28]
   16984:	add	r6, r1, r6, lsl #1
   16988:	ldr	r1, [r4, #56]	; 0x38
   1698c:	add	r2, r6, r5
   16990:	cmp	r2, r1
   16994:	mov	r1, #3
   16998:	strh	ip, [r4, #8]
   1699c:	str	lr, [r4, #12]
   169a0:	strh	r1, [r3, #14]
   169a4:	bhi	16a28 <flatcc_builder_start_table@@Base+0x1c0>
   169a8:	adds	r6, r6, r0
   169ac:	streq	r6, [r4, #4]
   169b0:	beq	16a9c <flatcc_builder_start_table@@Base+0x234>
   169b4:	ldr	r3, [r4, #32]
   169b8:	add	r6, r6, #4
   169bc:	str	r6, [r4, #4]
   169c0:	ldr	r6, [r3, #20]
   169c4:	sub	r2, r5, #3
   169c8:	ldr	r3, [r4, #80]	; 0x50
   169cc:	add	r2, r2, r6
   169d0:	cmp	r2, r3
   169d4:	bhi	16a50 <flatcc_builder_start_table@@Base+0x1e8>
   169d8:	ldr	r3, [r4, #76]	; 0x4c
   169dc:	add	r3, r3, r6
   169e0:	cmp	r3, #0
   169e4:	str	r3, [r4]
   169e8:	beq	16a9c <flatcc_builder_start_table@@Base+0x234>
   169ec:	ldr	ip, [r4, #28]
   169f0:	ldr	r3, [r4, #64]	; 0x40
   169f4:	ldr	r2, [pc, #176]	; 16aac <flatcc_builder_start_table@@Base+0x244>
   169f8:	sub	r3, r3, ip
   169fc:	ldr	r1, [r4, #60]	; 0x3c
   16a00:	ldr	lr, [r4, #32]
   16a04:	cmp	r3, r2
   16a08:	mov	r0, #0
   16a0c:	add	r1, r1, ip
   16a10:	movcs	r3, r2
   16a14:	str	r1, [r4, #16]
   16a18:	str	r3, [r4, #24]
   16a1c:	str	r2, [lr, #4]
   16a20:	add	sp, sp, #12
   16a24:	pop	{r4, r5, r6, r7, pc}
   16a28:	ldr	r0, [r4, #40]	; 0x28
   16a2c:	mov	r3, #1
   16a30:	str	ip, [sp]
   16a34:	add	r1, r4, #52	; 0x34
   16a38:	ldr	r7, [r4, #48]	; 0x30
   16a3c:	blx	r7
   16a40:	cmp	r0, #0
   16a44:	bne	16a74 <flatcc_builder_start_table@@Base+0x20c>
   16a48:	ldr	r0, [r4, #52]	; 0x34
   16a4c:	b	169a8 <flatcc_builder_start_table@@Base+0x140>
   16a50:	mov	r3, #3
   16a54:	ldr	r0, [r4, #40]	; 0x28
   16a58:	add	r1, r4, #76	; 0x4c
   16a5c:	str	r3, [sp]
   16a60:	mov	r3, #0
   16a64:	ldr	r5, [r4, #48]	; 0x30
   16a68:	blx	r5
   16a6c:	cmp	r0, #0
   16a70:	beq	169d8 <flatcc_builder_start_table@@Base+0x170>
   16a74:	bl	124e8 <__assert_fail@plt+0x10>
   16a78:	mov	r1, #4
   16a7c:	ldr	r0, [r4, #40]	; 0x28
   16a80:	str	r1, [sp]
   16a84:	add	r1, r4, #84	; 0x54
   16a88:	ldr	r7, [r4, #48]	; 0x30
   16a8c:	blx	r7
   16a90:	cmp	r0, #0
   16a94:	beq	168c0 <flatcc_builder_start_table@@Base+0x58>
   16a98:	b	16a74 <flatcc_builder_start_table@@Base+0x20c>
   16a9c:	mvn	r0, #0
   16aa0:	b	16a20 <flatcc_builder_start_table@@Base+0x1b8>
   16aa4:	stmiacc	r3!, {r0, r3, r4, r5, r9, sl, fp, pc}^
   16aa8:	svccs	0x00693b52
   16aac:	strdeq	pc, [r0], -ip

00016ab0 <flatcc_builder_create_vtable@@Base>:
   16ab0:	push	{r4, r5, r6, lr}
   16ab4:	sub	sp, sp, #80	; 0x50
   16ab8:	mov	r3, #0
   16abc:	cmp	r2, #0
   16ac0:	str	r3, [sp, #8]
   16ac4:	str	r3, [sp, #12]
   16ac8:	mov	r4, r0
   16acc:	ldr	r3, [r0, #152]	; 0x98
   16ad0:	beq	16b44 <flatcc_builder_create_vtable@@Base+0x94>
   16ad4:	mov	r0, #1
   16ad8:	cmp	r3, #0
   16adc:	str	r1, [sp, #16]
   16ae0:	str	r2, [sp, #8]
   16ae4:	str	r2, [sp, #20]
   16ae8:	str	r0, [sp, #12]
   16aec:	mov	r1, r2
   16af0:	beq	16b5c <flatcc_builder_create_vtable@@Base+0xac>
   16af4:	ldr	r3, [r4, #136]	; 0x88
   16af8:	sub	r5, r3, r2
   16afc:	cmp	r3, r5
   16b00:	ble	16b58 <flatcc_builder_create_vtable@@Base+0xa8>
   16b04:	ldr	r0, [r4, #36]	; 0x24
   16b08:	mov	r3, r5
   16b0c:	str	r2, [sp]
   16b10:	add	r1, sp, #16
   16b14:	ldr	r6, [r4, #44]	; 0x2c
   16b18:	mov	r2, #1
   16b1c:	blx	r6
   16b20:	cmp	r0, #0
   16b24:	bne	16bc0 <flatcc_builder_create_vtable@@Base+0x110>
   16b28:	cmp	r5, #0
   16b2c:	str	r5, [r4, #136]	; 0x88
   16b30:	beq	16b38 <flatcc_builder_create_vtable@@Base+0x88>
   16b34:	add	r5, r5, #1
   16b38:	mov	r0, r5
   16b3c:	add	sp, sp, #80	; 0x50
   16b40:	pop	{r4, r5, r6, pc}
   16b44:	cmp	r3, #0
   16b48:	bne	16b58 <flatcc_builder_create_vtable@@Base+0xa8>
   16b4c:	ldr	r2, [r0, #180]	; 0xb4
   16b50:	cmp	r2, #0
   16b54:	beq	16bb4 <flatcc_builder_create_vtable@@Base+0x104>
   16b58:	bl	12534 <__assert_fail@plt+0x5c>
   16b5c:	ldr	r3, [r4, #180]	; 0xb4
   16b60:	cmp	r3, #0
   16b64:	bne	16af4 <flatcc_builder_create_vtable@@Base+0x44>
   16b68:	ldr	r5, [r4, #140]	; 0x8c
   16b6c:	add	r3, r5, r2
   16b70:	cmp	r5, r3
   16b74:	str	r3, [r4, #140]	; 0x8c
   16b78:	movle	r2, r0
   16b7c:	bgt	16bd4 <flatcc_builder_create_vtable@@Base+0x124>
   16b80:	ldr	r0, [r4, #36]	; 0x24
   16b84:	mov	r3, r5
   16b88:	str	r1, [sp]
   16b8c:	add	r1, sp, #16
   16b90:	ldr	r4, [r4, #44]	; 0x2c
   16b94:	blx	r4
   16b98:	cmp	r0, #0
   16b9c:	beq	16b34 <flatcc_builder_create_vtable@@Base+0x84>
   16ba0:	ldr	r3, [pc, #48]	; 16bd8 <flatcc_builder_create_vtable@@Base+0x128>
   16ba4:	ldr	r2, [pc, #48]	; 16bdc <flatcc_builder_create_vtable@@Base+0x12c>
   16ba8:	ldr	r1, [pc, #48]	; 16be0 <flatcc_builder_create_vtable@@Base+0x130>
   16bac:	ldr	r0, [pc, #48]	; 16be4 <flatcc_builder_create_vtable@@Base+0x134>
   16bb0:	bl	124d8 <__assert_fail@plt>
   16bb4:	ldr	r5, [r4, #140]	; 0x8c
   16bb8:	mov	r1, r2
   16bbc:	b	16b80 <flatcc_builder_create_vtable@@Base+0xd0>
   16bc0:	ldr	r3, [pc, #32]	; 16be8 <flatcc_builder_create_vtable@@Base+0x138>
   16bc4:	ldr	r2, [pc, #32]	; 16bec <flatcc_builder_create_vtable@@Base+0x13c>
   16bc8:	ldr	r1, [pc, #16]	; 16be0 <flatcc_builder_create_vtable@@Base+0x130>
   16bcc:	ldr	r0, [pc, #16]	; 16be4 <flatcc_builder_create_vtable@@Base+0x134>
   16bd0:	bl	124d8 <__assert_fail@plt>
   16bd4:	bl	1250c <__assert_fail@plt+0x34>
   16bd8:	andeq	r0, r2, r4, asr #26
   16bdc:	andeq	r0, r0, r5, lsr #5
   16be0:	andeq	r1, r2, r4, lsl #9
   16be4:	andeq	r1, r2, r4, asr #10
   16be8:	andeq	r0, r2, r0, asr sp
   16bec:	andeq	r0, r0, fp, lsl #5

00016bf0 <flatcc_builder_create_cached_vtable@@Base>:
   16bf0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   16bf4:	sub	sp, sp, #28
   16bf8:	ldr	r4, [r0, #116]	; 0x74
   16bfc:	mov	sl, r3
   16c00:	cmp	r4, #0
   16c04:	mov	r8, r0
   16c08:	str	r1, [sp, #8]
   16c0c:	mov	r7, r2
   16c10:	rsbne	r3, r4, #32
   16c14:	beq	16d6c <flatcc_builder_create_cached_vtable@@Base+0x17c>
   16c18:	lsr	sl, sl, r3
   16c1c:	ldr	r3, [r8, #92]	; 0x5c
   16c20:	adds	r2, r3, sl, lsl #2
   16c24:	str	r3, [sp, #16]
   16c28:	str	r2, [sp, #20]
   16c2c:	beq	16d60 <flatcc_builder_create_cached_vtable@@Base+0x170>
   16c30:	ldr	r5, [r3, sl, lsl #2]
   16c34:	cmp	r5, #0
   16c38:	beq	16e5c <flatcc_builder_create_cached_vtable@@Base+0x26c>
   16c3c:	mov	r3, #0
   16c40:	ldr	fp, [r8, #100]	; 0x64
   16c44:	ldr	r6, [r8, #68]	; 0x44
   16c48:	mov	r9, r2
   16c4c:	str	r3, [sp, #12]
   16c50:	b	16c64 <flatcc_builder_create_cached_vtable@@Base+0x74>
   16c54:	ldr	r5, [r4, #12]
   16c58:	add	r9, r4, #12
   16c5c:	cmp	r5, #0
   16c60:	beq	16cb4 <flatcc_builder_create_cached_vtable@@Base+0xc4>
   16c64:	add	r4, fp, r5
   16c68:	ldr	r2, [r4, #8]
   16c6c:	add	r1, r6, r2
   16c70:	ldrh	r2, [r6, r2]
   16c74:	cmp	r2, r7
   16c78:	bne	16c54 <flatcc_builder_create_cached_vtable@@Base+0x64>
   16c7c:	mov	r2, r7
   16c80:	ldr	r0, [sp, #8]
   16c84:	bl	1243c <memcmp@plt>
   16c88:	cmp	r0, #0
   16c8c:	bne	16c54 <flatcc_builder_create_cached_vtable@@Base+0x64>
   16c90:	ldr	r1, [r4, #4]
   16c94:	ldr	r2, [r8, #152]	; 0x98
   16c98:	cmp	r1, r2
   16c9c:	beq	16d30 <flatcc_builder_create_cached_vtable@@Base+0x140>
   16ca0:	ldr	r5, [r4, #12]
   16ca4:	add	r9, r4, #12
   16ca8:	cmp	r5, #0
   16cac:	str	r4, [sp, #12]
   16cb0:	bne	16c64 <flatcc_builder_create_cached_vtable@@Base+0x74>
   16cb4:	ldr	r4, [r8, #124]	; 0x7c
   16cb8:	ldr	r3, [r8, #104]	; 0x68
   16cbc:	add	r2, r4, #16
   16cc0:	cmp	r2, r3
   16cc4:	bhi	16e34 <flatcc_builder_create_cached_vtable@@Base+0x244>
   16cc8:	ldr	r5, [r8, #100]	; 0x64
   16ccc:	adds	r6, r5, r4
   16cd0:	beq	16d60 <flatcc_builder_create_cached_vtable@@Base+0x170>
   16cd4:	ldr	r3, [r8, #124]	; 0x7c
   16cd8:	ldr	r0, [sp, #16]
   16cdc:	ldr	r2, [r8, #152]	; 0x98
   16ce0:	add	r1, r3, #16
   16ce4:	str	r1, [r8, #124]	; 0x7c
   16ce8:	str	r2, [r6, #4]
   16cec:	ldr	r1, [r0, sl, lsl #2]
   16cf0:	mov	r2, r7
   16cf4:	str	r1, [r6, #12]
   16cf8:	str	r3, [r0, sl, lsl #2]
   16cfc:	ldr	r1, [sp, #8]
   16d00:	mov	r0, r8
   16d04:	bl	16ab0 <flatcc_builder_create_vtable@@Base>
   16d08:	cmp	r0, #0
   16d0c:	str	r0, [r5, r4]
   16d10:	beq	16d60 <flatcc_builder_create_cached_vtable@@Base+0x170>
   16d14:	ldr	r3, [sp, #12]
   16d18:	cmp	r3, #0
   16d1c:	beq	16e64 <flatcc_builder_create_cached_vtable@@Base+0x274>
   16d20:	ldr	r3, [r3, #8]
   16d24:	str	r3, [r6, #8]
   16d28:	add	sp, sp, #28
   16d2c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   16d30:	ldr	r3, [sp, #20]
   16d34:	cmp	r3, r9
   16d38:	beq	16d54 <flatcc_builder_create_cached_vtable@@Base+0x164>
   16d3c:	ldr	r2, [sp, #16]
   16d40:	ldr	r3, [r4, #12]
   16d44:	str	r3, [r9]
   16d48:	ldr	r3, [r2, sl, lsl #2]
   16d4c:	str	r3, [r4, #12]
   16d50:	str	r5, [r2, sl, lsl #2]
   16d54:	ldr	r0, [r4]
   16d58:	add	sp, sp, #28
   16d5c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   16d60:	mov	r0, #0
   16d64:	add	sp, sp, #28
   16d68:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   16d6c:	ldr	r3, [r0, #124]	; 0x7c
   16d70:	add	r5, r0, #92	; 0x5c
   16d74:	cmp	r3, #0
   16d78:	bne	16f28 <flatcc_builder_create_cached_vtable@@Base+0x338>
   16d7c:	ldr	r3, [r0, #104]	; 0x68
   16d80:	cmp	r3, #15
   16d84:	bls	16e08 <flatcc_builder_create_cached_vtable@@Base+0x218>
   16d88:	ldr	r3, [r8, #100]	; 0x64
   16d8c:	cmp	r3, #0
   16d90:	beq	16d60 <flatcc_builder_create_cached_vtable@@Base+0x170>
   16d94:	mov	r2, #16
   16d98:	mov	r3, #5
   16d9c:	str	r2, [r8, #124]	; 0x7c
   16da0:	ldr	r0, [r8, #40]	; 0x28
   16da4:	mov	r1, r5
   16da8:	str	r3, [sp]
   16dac:	mov	r2, #256	; 0x100
   16db0:	ldr	r5, [r8, #48]	; 0x30
   16db4:	mov	r3, #1
   16db8:	blx	r5
   16dbc:	cmp	r0, #0
   16dc0:	bne	16d60 <flatcc_builder_create_cached_vtable@@Base+0x170>
   16dc4:	ldr	r1, [r8, #96]	; 0x60
   16dc8:	mov	r3, #256	; 0x100
   16dcc:	b	16dd4 <flatcc_builder_create_cached_vtable@@Base+0x1e4>
   16dd0:	mov	r3, r2
   16dd4:	lsl	r2, r3, #1
   16dd8:	cmp	r2, r1
   16ddc:	bls	16dd0 <flatcc_builder_create_cached_vtable@@Base+0x1e0>
   16de0:	lsr	r3, r3, #2
   16de4:	cmp	r3, #1
   16de8:	bls	16eb4 <flatcc_builder_create_cached_vtable@@Base+0x2c4>
   16dec:	mov	r2, #1
   16df0:	add	r4, r4, #1
   16df4:	cmp	r3, r2, lsl r4
   16df8:	bhi	16df0 <flatcc_builder_create_cached_vtable@@Base+0x200>
   16dfc:	rsb	r3, r4, #32
   16e00:	str	r4, [r8, #116]	; 0x74
   16e04:	b	16c18 <flatcc_builder_create_cached_vtable@@Base+0x28>
   16e08:	mov	r3, #6
   16e0c:	ldr	r0, [r0, #40]	; 0x28
   16e10:	mov	r2, #16
   16e14:	str	r3, [sp]
   16e18:	add	r1, r8, #100	; 0x64
   16e1c:	ldr	r6, [r8, #48]	; 0x30
   16e20:	mov	r3, r4
   16e24:	blx	r6
   16e28:	cmp	r0, #0
   16e2c:	beq	16d88 <flatcc_builder_create_cached_vtable@@Base+0x198>
   16e30:	b	16f1c <flatcc_builder_create_cached_vtable@@Base+0x32c>
   16e34:	mov	r3, #6
   16e38:	ldr	r0, [r8, #40]	; 0x28
   16e3c:	add	r1, r8, #100	; 0x64
   16e40:	str	r3, [sp]
   16e44:	mov	r3, #0
   16e48:	ldr	r5, [r8, #48]	; 0x30
   16e4c:	blx	r5
   16e50:	cmp	r0, #0
   16e54:	beq	16cc8 <flatcc_builder_create_cached_vtable@@Base+0xd8>
   16e58:	b	16f1c <flatcc_builder_create_cached_vtable@@Base+0x32c>
   16e5c:	str	r5, [sp, #12]
   16e60:	b	16cb4 <flatcc_builder_create_cached_vtable@@Base+0xc4>
   16e64:	ldr	r3, [r8, #172]	; 0xac
   16e68:	ldr	r9, [r8, #120]	; 0x78
   16e6c:	cmp	r3, #0
   16e70:	add	r2, r9, r7
   16e74:	beq	16ebc <flatcc_builder_create_cached_vtable@@Base+0x2cc>
   16e78:	cmp	r3, r2
   16e7c:	bcs	16ebc <flatcc_builder_create_cached_vtable@@Base+0x2cc>
   16e80:	ldr	r3, [r8, #116]	; 0x74
   16e84:	cmp	r3, #0
   16e88:	beq	16d28 <flatcc_builder_create_cached_vtable@@Base+0x138>
   16e8c:	ldr	r6, [sp, #12]
   16e90:	ldr	r2, [r8, #96]	; 0x60
   16e94:	mov	r1, r6
   16e98:	ldr	r0, [r8, #92]	; 0x5c
   16e9c:	bl	124a8 <memset@plt>
   16ea0:	mov	r3, #16
   16ea4:	ldr	r0, [r5, r4]
   16ea8:	str	r6, [r8, #120]	; 0x78
   16eac:	str	r3, [r8, #124]	; 0x7c
   16eb0:	b	16d28 <flatcc_builder_create_cached_vtable@@Base+0x138>
   16eb4:	mov	r3, #32
   16eb8:	b	16e00 <flatcc_builder_create_cached_vtable@@Base+0x210>
   16ebc:	ldr	r3, [r8, #72]	; 0x48
   16ec0:	cmp	r3, r2
   16ec4:	bcc	16ef8 <flatcc_builder_create_cached_vtable@@Base+0x308>
   16ec8:	ldr	r3, [r8, #68]	; 0x44
   16ecc:	adds	r0, r3, r9
   16ed0:	beq	16f20 <flatcc_builder_create_cached_vtable@@Base+0x330>
   16ed4:	ldr	r3, [r8, #120]	; 0x78
   16ed8:	ldr	r1, [sp, #8]
   16edc:	add	ip, r3, r7
   16ee0:	str	r3, [r6, #8]
   16ee4:	mov	r2, r7
   16ee8:	str	ip, [r8, #120]	; 0x78
   16eec:	bl	12430 <memcpy@plt>
   16ef0:	ldr	r0, [r5, r4]
   16ef4:	b	16d28 <flatcc_builder_create_cached_vtable@@Base+0x138>
   16ef8:	mov	r3, #2
   16efc:	ldr	r0, [r8, #40]	; 0x28
   16f00:	add	r1, r8, #68	; 0x44
   16f04:	str	r3, [sp]
   16f08:	mov	r3, #0
   16f0c:	ldr	sl, [r8, #48]	; 0x30
   16f10:	blx	sl
   16f14:	cmp	r0, #0
   16f18:	beq	16ec8 <flatcc_builder_create_cached_vtable@@Base+0x2d8>
   16f1c:	bl	124e8 <__assert_fail@plt+0x10>
   16f20:	mvn	r0, #0
   16f24:	b	16d28 <flatcc_builder_create_cached_vtable@@Base+0x138>
   16f28:	ldr	r3, [pc, #12]	; 16f3c <flatcc_builder_create_cached_vtable@@Base+0x34c>
   16f2c:	ldr	r2, [pc, #12]	; 16f40 <flatcc_builder_create_cached_vtable@@Base+0x350>
   16f30:	ldr	r1, [pc, #12]	; 16f44 <flatcc_builder_create_cached_vtable@@Base+0x354>
   16f34:	ldr	r0, [pc, #12]	; 16f48 <flatcc_builder_create_cached_vtable@@Base+0x358>
   16f38:	bl	124d8 <__assert_fail@plt>
   16f3c:	andeq	r1, r2, r4, lsl #4
   16f40:	andeq	r0, r0, r6, asr r1
   16f44:	andeq	r1, r2, r4, lsl #9
   16f48:	andeq	r1, r2, r0, lsr #14

00016f4c <flatcc_builder_create_table@@Base>:
   16f4c:	push	{r4, r5, r6, r7, r8, lr}
   16f50:	sub	sp, sp, #88	; 0x58
   16f54:	ldr	r4, [sp, #116]	; 0x74
   16f58:	ldr	lr, [sp, #120]	; 0x78
   16f5c:	cmp	r4, #0
   16f60:	blt	17098 <flatcc_builder_create_table@@Base+0x14c>
   16f64:	mov	r8, r2
   16f68:	ands	r2, lr, #1
   16f6c:	beq	170c4 <flatcc_builder_create_table@@Base+0x178>
   16f70:	mov	r5, r0
   16f74:	ldrh	r0, [r0, #128]	; 0x80
   16f78:	cmp	r3, #4
   16f7c:	movcc	r3, #4
   16f80:	ldr	ip, [r5, #136]	; 0x88
   16f84:	cmp	r0, r3
   16f88:	mvn	r0, #3
   16f8c:	strhcc	r3, [r5, #128]	; 0x80
   16f90:	sub	r7, ip, r8
   16f94:	sub	r3, r3, #1
   16f98:	sub	r0, r0, r8
   16f9c:	and	r7, r7, r3
   16fa0:	add	r0, r0, ip
   16fa4:	sub	lr, lr, #1
   16fa8:	sub	r0, r0, r7
   16fac:	sub	lr, r0, lr
   16fb0:	cmp	r4, #0
   16fb4:	str	lr, [sp, #12]
   16fb8:	beq	16fec <flatcc_builder_create_table@@Base+0xa0>
   16fbc:	ldr	ip, [sp, #112]	; 0x70
   16fc0:	mvn	r6, #3
   16fc4:	add	r4, ip, r4, lsl #1
   16fc8:	sub	r6, r6, r0
   16fcc:	ldrh	r3, [ip], #2
   16fd0:	sub	lr, r6, r3
   16fd4:	ldr	r0, [r1, r3]
   16fd8:	cmp	r4, ip
   16fdc:	add	r0, r0, lr
   16fe0:	str	r0, [r1, r3]
   16fe4:	bne	16fcc <flatcc_builder_create_table@@Base+0x80>
   16fe8:	ldr	ip, [r5, #136]	; 0x88
   16fec:	cmp	r8, #0
   16ff0:	mov	r3, #4
   16ff4:	mov	r0, #1
   16ff8:	str	r3, [sp, #16]
   16ffc:	movne	r2, #2
   17000:	str	r3, [sp, #28]
   17004:	addne	r3, r8, r3
   17008:	str	r0, [sp, #20]
   1700c:	add	lr, sp, #12
   17010:	strne	r1, [sp, #32]
   17014:	strne	r8, [sp, #36]	; 0x24
   17018:	strne	r3, [sp, #16]
   1701c:	strne	r2, [sp, #20]
   17020:	movne	r0, #3
   17024:	moveq	r0, #2
   17028:	cmp	r7, #0
   1702c:	str	lr, [sp, #24]
   17030:	beq	1705c <flatcc_builder_create_table@@Base+0x110>
   17034:	add	r2, r2, #1
   17038:	add	r1, sp, #88	; 0x58
   1703c:	add	r1, r1, r2, lsl #3
   17040:	ldr	lr, [pc, #144]	; 170d8 <flatcc_builder_create_table@@Base+0x18c>
   17044:	mov	r2, r0
   17048:	add	r3, r3, r7
   1704c:	str	r7, [r1, #-68]	; 0xffffffbc
   17050:	str	r3, [sp, #16]
   17054:	str	r0, [sp, #20]
   17058:	str	lr, [r1, #-72]	; 0xffffffb8
   1705c:	sub	r4, ip, r3
   17060:	cmp	r4, ip
   17064:	bge	170c0 <flatcc_builder_create_table@@Base+0x174>
   17068:	ldr	r0, [r5, #36]	; 0x24
   1706c:	add	r1, sp, #24
   17070:	str	r3, [sp]
   17074:	mov	r3, r4
   17078:	ldr	r6, [r5, #44]	; 0x2c
   1707c:	blx	r6
   17080:	cmp	r0, #0
   17084:	bne	170ac <flatcc_builder_create_table@@Base+0x160>
   17088:	mov	r0, r4
   1708c:	str	r4, [r5, #136]	; 0x88
   17090:	add	sp, sp, #88	; 0x58
   17094:	pop	{r4, r5, r6, r7, r8, pc}
   17098:	ldr	r3, [pc, #60]	; 170dc <flatcc_builder_create_table@@Base+0x190>
   1709c:	ldr	r2, [pc, #60]	; 170e0 <flatcc_builder_create_table@@Base+0x194>
   170a0:	ldr	r1, [pc, #60]	; 170e4 <flatcc_builder_create_table@@Base+0x198>
   170a4:	ldr	r0, [pc, #60]	; 170e8 <flatcc_builder_create_table@@Base+0x19c>
   170a8:	bl	124d8 <__assert_fail@plt>
   170ac:	ldr	r3, [pc, #56]	; 170ec <flatcc_builder_create_table@@Base+0x1a0>
   170b0:	ldr	r2, [pc, #56]	; 170f0 <flatcc_builder_create_table@@Base+0x1a4>
   170b4:	ldr	r1, [pc, #40]	; 170e4 <flatcc_builder_create_table@@Base+0x198>
   170b8:	ldr	r0, [pc, #52]	; 170f4 <flatcc_builder_create_table@@Base+0x1a8>
   170bc:	bl	124d8 <__assert_fail@plt>
   170c0:	bl	12534 <__assert_fail@plt+0x5c>
   170c4:	ldr	r3, [pc, #16]	; 170dc <flatcc_builder_create_table@@Base+0x190>
   170c8:	ldr	r2, [pc, #40]	; 170f8 <flatcc_builder_create_table@@Base+0x1ac>
   170cc:	ldr	r1, [pc, #16]	; 170e4 <flatcc_builder_create_table@@Base+0x198>
   170d0:	ldr	r0, [pc, #36]	; 170fc <flatcc_builder_create_table@@Base+0x1b0>
   170d4:	bl	124d8 <__assert_fail@plt>
   170d8:	andeq	r0, r2, ip, asr #27
   170dc:	andeq	r1, r2, r0, lsl r2
   170e0:	ldrdeq	r0, [r0], -r5
   170e4:	andeq	r1, r2, r4, lsl #9
   170e8:	andeq	r1, r2, r0, lsr r7
   170ec:	andeq	r0, r2, r0, asr sp
   170f0:	andeq	r0, r0, fp, lsl #5
   170f4:	andeq	r1, r2, r4, asr #10
   170f8:	ldrdeq	r0, [r0], -fp
   170fc:	andeq	r1, r2, r4, asr #14

00017100 <flatcc_builder_check_required_field@@Base>:
   17100:	ldr	r3, [r0, #32]
   17104:	ldrh	r3, [r3, #14]
   17108:	cmp	r3, #3
   1710c:	bne	17138 <flatcc_builder_check_required_field@@Base+0x38>
   17110:	ldrh	r3, [r0, #8]
   17114:	cmp	r3, r1
   17118:	movls	r0, #0
   1711c:	bls	17134 <flatcc_builder_check_required_field@@Base+0x34>
   17120:	ldr	r3, [r0, #4]
   17124:	lsl	r1, r1, #1
   17128:	ldrh	r0, [r3, r1]
   1712c:	adds	r0, r0, #0
   17130:	movne	r0, #1
   17134:	bx	lr
   17138:	push	{r4, lr}
   1713c:	ldr	r3, [pc, #12]	; 17150 <flatcc_builder_check_required_field@@Base+0x50>
   17140:	ldr	r2, [pc, #12]	; 17154 <flatcc_builder_check_required_field@@Base+0x54>
   17144:	ldr	r1, [pc, #12]	; 17158 <flatcc_builder_check_required_field@@Base+0x58>
   17148:	ldr	r0, [pc, #12]	; 1715c <flatcc_builder_check_required_field@@Base+0x5c>
   1714c:	bl	124d8 <__assert_fail@plt>
   17150:	andeq	r1, r2, ip, lsr #4
   17154:	strdeq	r0, [r0], -r8
   17158:	andeq	r1, r2, r4, lsl #9
   1715c:	andeq	r1, r2, r0, asr r7

00017160 <flatcc_builder_check_union_field@@Base>:
   17160:	ldr	r3, [r0, #32]
   17164:	ldrh	r3, [r3, #14]
   17168:	cmp	r3, #3
   1716c:	bne	171e8 <flatcc_builder_check_union_field@@Base+0x88>
   17170:	cmp	r1, #0
   17174:	beq	171c0 <flatcc_builder_check_union_field@@Base+0x60>
   17178:	ldrh	r3, [r0, #8]
   1717c:	cmp	r3, r1
   17180:	bls	171c0 <flatcc_builder_check_union_field@@Base+0x60>
   17184:	sub	r1, r1, #-2147483647	; 0x80000001
   17188:	ldr	r3, [r0, #4]
   1718c:	lsl	r1, r1, #1
   17190:	ldrh	r2, [r3, r1]
   17194:	cmp	r2, #0
   17198:	beq	171d4 <flatcc_builder_check_union_field@@Base+0x74>
   1719c:	ldr	r0, [r0, #16]
   171a0:	add	r1, r3, r1
   171a4:	ldrb	r2, [r0, r2]
   171a8:	ldrh	r1, [r1, #2]
   171ac:	cmp	r2, #0
   171b0:	bne	171c8 <flatcc_builder_check_union_field@@Base+0x68>
   171b4:	clz	r0, r1
   171b8:	lsr	r0, r0, #5
   171bc:	bx	lr
   171c0:	mov	r0, #0
   171c4:	bx	lr
   171c8:	adds	r0, r1, #0
   171cc:	movne	r0, #1
   171d0:	b	171c4 <flatcc_builder_check_union_field@@Base+0x64>
   171d4:	add	r1, r3, r1
   171d8:	ldrh	r1, [r1, #2]
   171dc:	clz	r0, r1
   171e0:	lsr	r0, r0, #5
   171e4:	bx	lr
   171e8:	push	{r4, lr}
   171ec:	ldr	r3, [pc, #12]	; 17200 <flatcc_builder_check_union_field@@Base+0xa0>
   171f0:	ldr	r2, [pc, #12]	; 17204 <flatcc_builder_check_union_field@@Base+0xa4>
   171f4:	ldr	r1, [pc, #12]	; 17208 <flatcc_builder_check_union_field@@Base+0xa8>
   171f8:	ldr	r0, [pc, #12]	; 1720c <flatcc_builder_check_union_field@@Base+0xac>
   171fc:	bl	124d8 <__assert_fail@plt>
   17200:	andeq	r1, r2, r0, asr r2
   17204:	strdeq	r0, [r0], -pc	; <UNPREDICTABLE>
   17208:	andeq	r1, r2, r4, lsl #9
   1720c:	andeq	r1, r2, r0, asr r7

00017210 <flatcc_builder_check_required@@Base>:
   17210:	ldr	r3, [r0, #32]
   17214:	ldrh	r3, [r3, #14]
   17218:	cmp	r3, #3
   1721c:	bne	17280 <flatcc_builder_check_required@@Base+0x70>
   17220:	ldrh	r3, [r0, #8]
   17224:	cmp	r3, r2
   17228:	movlt	r0, #0
   1722c:	blt	1727c <flatcc_builder_check_required@@Base+0x6c>
   17230:	cmp	r2, #0
   17234:	ble	17278 <flatcc_builder_check_required@@Base+0x68>
   17238:	ldrh	r3, [r1]
   1723c:	ldr	ip, [r0, #4]
   17240:	lsl	r3, r3, #1
   17244:	ldrh	r0, [ip, r3]
   17248:	cmp	r0, #0
   1724c:	beq	1727c <flatcc_builder_check_required@@Base+0x6c>
   17250:	add	r2, r1, r2, lsl #1
   17254:	add	r1, r1, #2
   17258:	b	17270 <flatcc_builder_check_required@@Base+0x60>
   1725c:	ldrh	r3, [r1], #2
   17260:	lsl	r3, r3, #1
   17264:	ldrh	r0, [ip, r3]
   17268:	cmp	r0, #0
   1726c:	beq	1727c <flatcc_builder_check_required@@Base+0x6c>
   17270:	cmp	r1, r2
   17274:	bne	1725c <flatcc_builder_check_required@@Base+0x4c>
   17278:	mov	r0, #1
   1727c:	bx	lr
   17280:	push	{r4, lr}
   17284:	ldr	r3, [pc, #12]	; 17298 <flatcc_builder_check_required@@Base+0x88>
   17288:	ldr	r2, [pc, #12]	; 1729c <flatcc_builder_check_required@@Base+0x8c>
   1728c:	ldr	r1, [pc, #12]	; 172a0 <flatcc_builder_check_required@@Base+0x90>
   17290:	ldr	r0, [pc, #12]	; 172a4 <flatcc_builder_check_required@@Base+0x94>
   17294:	bl	124d8 <__assert_fail@plt>
   17298:	andeq	r1, r2, r4, ror r2
   1729c:	andeq	r0, r0, r1, lsl r5
   172a0:	andeq	r1, r2, r4, lsl #9
   172a4:	andeq	r1, r2, r0, asr r7

000172a8 <flatcc_builder_end_table@@Base>:
   172a8:	ldr	r3, [r0, #32]
   172ac:	push	{r4, r5, r6, r7, lr}
   172b0:	sub	sp, sp, #20
   172b4:	ldrh	r3, [r3, #14]
   172b8:	cmp	r3, #3
   172bc:	bne	17440 <flatcc_builder_end_table@@Base+0x198>
   172c0:	ldrh	r5, [r0, #8]
   172c4:	ldr	r3, [r0, #12]
   172c8:	ldr	r1, [pc, #388]	; 17454 <flatcc_builder_end_table@@Base+0x1ac>
   172cc:	add	r5, r5, #2
   172d0:	ldr	r2, [r0, #20]
   172d4:	lsl	r5, r5, #1
   172d8:	add	r2, r2, #4
   172dc:	uxth	r5, r5
   172e0:	eor	r3, r3, r5
   172e4:	uxth	r2, r2
   172e8:	mul	r3, r1, r3
   172ec:	ldr	ip, [r0, #4]
   172f0:	eor	r3, r3, r2
   172f4:	sub	r6, ip, #4
   172f8:	mul	r1, r1, r3
   172fc:	strh	r2, [ip, #-2]
   17300:	strh	r5, [ip, #-4]
   17304:	mov	r3, r1
   17308:	str	r1, [r0, #12]
   1730c:	mov	r2, r5
   17310:	mov	r1, r6
   17314:	mov	r4, r0
   17318:	bl	16bf0 <flatcc_builder_create_cached_vtable@@Base>
   1731c:	subs	r7, r0, #0
   17320:	bne	17334 <flatcc_builder_end_table@@Base+0x8c>
   17324:	mov	r5, #0
   17328:	mov	r0, r5
   1732c:	add	sp, sp, #20
   17330:	pop	{r4, r5, r6, r7, pc}
   17334:	mov	r2, r5
   17338:	mov	r1, #0
   1733c:	mov	r0, r6
   17340:	bl	124a8 <memset@plt>
   17344:	ldr	r3, [r4, #32]
   17348:	ldr	ip, [r4, #76]	; 0x4c
   1734c:	ldr	r0, [r4]
   17350:	ldr	r2, [r3, #20]
   17354:	ldr	r1, [r4, #16]
   17358:	add	ip, ip, r2
   1735c:	sub	r0, r0, ip
   17360:	ldrh	r3, [r4, #130]	; 0x82
   17364:	asr	r0, r0, #1
   17368:	ldr	r2, [r4, #20]
   1736c:	str	r0, [sp, #4]
   17370:	str	r7, [sp, #8]
   17374:	str	ip, [sp]
   17378:	mov	r0, r4
   1737c:	bl	16f4c <flatcc_builder_create_table@@Base>
   17380:	subs	r5, r0, #0
   17384:	beq	17324 <flatcc_builder_end_table@@Base+0x7c>
   17388:	ldr	r3, [r4, #32]
   1738c:	ldr	r0, [r4, #52]	; 0x34
   17390:	ldr	ip, [r4, #76]	; 0x4c
   17394:	ldr	r1, [r3, #24]
   17398:	ldr	r2, [r4, #20]
   1739c:	str	r1, [r4, #12]
   173a0:	ldrh	lr, [r3, #28]
   173a4:	mov	r1, #0
   173a8:	strh	lr, [r4, #8]
   173ac:	ldr	lr, [r3, #16]
   173b0:	add	r0, r0, lr
   173b4:	str	r0, [r4, #4]
   173b8:	ldr	r3, [r3, #20]
   173bc:	ldr	r0, [r4, #16]
   173c0:	add	r3, ip, r3
   173c4:	str	r3, [r4]
   173c8:	bl	124a8 <memset@plt>
   173cc:	ldr	r3, [r4, #32]
   173d0:	ldr	r2, [r4, #64]	; 0x40
   173d4:	ldrh	lr, [r4, #130]	; 0x82
   173d8:	ldr	ip, [r3]
   173dc:	ldr	r1, [r3, #4]
   173e0:	ldrh	r0, [r4, #128]	; 0x80
   173e4:	sub	r2, r2, ip
   173e8:	cmp	r2, r1
   173ec:	movcs	r2, r1
   173f0:	cmp	r0, lr
   173f4:	ldr	r0, [r4, #60]	; 0x3c
   173f8:	ldr	r6, [r3, #8]
   173fc:	str	r2, [r4, #24]
   17400:	add	r2, r0, ip
   17404:	str	r2, [r4, #16]
   17408:	str	r6, [r4, #20]
   1740c:	ldr	r2, [r4, #156]	; 0x9c
   17410:	str	ip, [r4, #28]
   17414:	str	r1, [r3, #4]
   17418:	strhcc	lr, [r4, #128]	; 0x80
   1741c:	ldrh	r1, [r3, #12]
   17420:	sub	r2, r2, #1
   17424:	sub	r3, r3, #36	; 0x24
   17428:	mov	r0, r5
   1742c:	str	r2, [r4, #156]	; 0x9c
   17430:	strh	r1, [r4, #130]	; 0x82
   17434:	str	r3, [r4, #32]
   17438:	add	sp, sp, #20
   1743c:	pop	{r4, r5, r6, r7, pc}
   17440:	ldr	r3, [pc, #16]	; 17458 <flatcc_builder_end_table@@Base+0x1b0>
   17444:	ldr	r2, [pc, #16]	; 1745c <flatcc_builder_end_table@@Base+0x1b4>
   17448:	ldr	r1, [pc, #16]	; 17460 <flatcc_builder_end_table@@Base+0x1b8>
   1744c:	ldr	r0, [pc, #16]	; 17464 <flatcc_builder_end_table@@Base+0x1bc>
   17450:	bl	124d8 <__assert_fail@plt>
   17454:			; <UNDEFINED> instruction: 0x9e3779b1
   17458:	muleq	r2, r4, r2
   1745c:	andeq	r0, r0, r5, lsr #10
   17460:	andeq	r1, r2, r4, lsl #9
   17464:	andeq	r1, r2, r0, asr r7

00017468 <flatcc_builder_create_vector@@Base>:
   17468:	push	{r4, r5, r6, lr}
   1746c:	sub	sp, sp, #88	; 0x58
   17470:	mov	r4, r0
   17474:	ldr	ip, [sp, #108]	; 0x6c
   17478:	ldrh	r0, [sp, #104]	; 0x68
   1747c:	cmp	r2, ip
   17480:	bhi	1755c <flatcc_builder_create_vector@@Base+0xf4>
   17484:	ldrh	ip, [r4, #128]	; 0x80
   17488:	mul	r3, r3, r2
   1748c:	cmp	r0, #4
   17490:	movcc	r0, #4
   17494:	ldr	lr, [r4, #136]	; 0x88
   17498:	cmp	ip, r0
   1749c:	sub	r6, lr, r3
   174a0:	mov	ip, #4
   174a4:	strhcc	r0, [r4, #128]	; 0x80
   174a8:	str	r2, [sp, #12]
   174ac:	cmp	r3, #0
   174b0:	mov	r2, #1
   174b4:	sub	r0, r0, #1
   174b8:	str	ip, [sp, #16]
   174bc:	str	r2, [sp, #20]
   174c0:	and	r0, r0, r6
   174c4:	movne	r2, #2
   174c8:	str	ip, [sp, #28]
   174cc:	addne	ip, r3, ip
   174d0:	strne	r3, [sp, #36]	; 0x24
   174d4:	add	r5, sp, #12
   174d8:	strne	r1, [sp, #32]
   174dc:	strne	ip, [sp, #16]
   174e0:	strne	r2, [sp, #20]
   174e4:	movne	r3, #3
   174e8:	moveq	r3, #2
   174ec:	cmp	r0, #0
   174f0:	str	r5, [sp, #24]
   174f4:	beq	17520 <flatcc_builder_create_vector@@Base+0xb8>
   174f8:	add	r2, r2, #1
   174fc:	add	r1, sp, #88	; 0x58
   17500:	add	r1, r1, r2, lsl #3
   17504:	ldr	r5, [pc, #124]	; 17588 <flatcc_builder_create_vector@@Base+0x120>
   17508:	mov	r2, r3
   1750c:	add	ip, ip, r0
   17510:	str	r0, [r1, #-68]	; 0xffffffbc
   17514:	str	ip, [sp, #16]
   17518:	str	r3, [sp, #20]
   1751c:	str	r5, [r1, #-72]	; 0xffffffb8
   17520:	sub	r5, lr, ip
   17524:	cmp	lr, r5
   17528:	ble	17584 <flatcc_builder_create_vector@@Base+0x11c>
   1752c:	ldr	r0, [r4, #36]	; 0x24
   17530:	mov	r3, r5
   17534:	str	ip, [sp]
   17538:	add	r1, sp, #24
   1753c:	ldr	r6, [r4, #44]	; 0x2c
   17540:	blx	r6
   17544:	cmp	r0, #0
   17548:	bne	17570 <flatcc_builder_create_vector@@Base+0x108>
   1754c:	mov	r0, r5
   17550:	str	r5, [r4, #136]	; 0x88
   17554:	add	sp, sp, #88	; 0x58
   17558:	pop	{r4, r5, r6, pc}
   1755c:	ldr	r3, [pc, #40]	; 1758c <flatcc_builder_create_vector@@Base+0x124>
   17560:	ldr	r2, [pc, #40]	; 17590 <flatcc_builder_create_vector@@Base+0x128>
   17564:	ldr	r1, [pc, #40]	; 17594 <flatcc_builder_create_vector@@Base+0x12c>
   17568:	ldr	r0, [pc, #40]	; 17598 <flatcc_builder_create_vector@@Base+0x130>
   1756c:	bl	124d8 <__assert_fail@plt>
   17570:	ldr	r3, [pc, #36]	; 1759c <flatcc_builder_create_vector@@Base+0x134>
   17574:	ldr	r2, [pc, #36]	; 175a0 <flatcc_builder_create_vector@@Base+0x138>
   17578:	ldr	r1, [pc, #20]	; 17594 <flatcc_builder_create_vector@@Base+0x12c>
   1757c:	ldr	r0, [pc, #32]	; 175a4 <flatcc_builder_create_vector@@Base+0x13c>
   17580:	bl	124d8 <__assert_fail@plt>
   17584:	bl	12534 <__assert_fail@plt+0x5c>
   17588:	andeq	r0, r2, ip, asr #27
   1758c:			; <UNDEFINED> instruction: 0x000212b0
   17590:	andeq	r0, r0, r5, asr r5
   17594:	andeq	r1, r2, r4, lsl #9
   17598:	andeq	r1, r2, ip, ror r7
   1759c:	andeq	r0, r2, r0, asr sp
   175a0:	andeq	r0, r0, fp, lsl #5
   175a4:	andeq	r1, r2, r4, asr #10

000175a8 <flatcc_builder_end_vector@@Base>:
   175a8:	ldr	r3, [r0, #32]
   175ac:	push	{r4, r5, r6, lr}
   175b0:	sub	sp, sp, #88	; 0x58
   175b4:	ldrh	r2, [r3, #14]
   175b8:	cmp	r2, #4
   175bc:	bne	17760 <flatcc_builder_end_vector@@Base+0x1b8>
   175c0:	ldr	lr, [r3, #20]
   175c4:	ldr	r2, [r3, #24]
   175c8:	ldr	r1, [r3, #16]
   175cc:	cmp	lr, r2
   175d0:	mov	r4, r0
   175d4:	ldr	r5, [r0, #16]
   175d8:	ldrh	r3, [r0, #130]	; 0x82
   175dc:	bhi	1774c <flatcc_builder_end_vector@@Base+0x1a4>
   175e0:	ldrh	r2, [r0, #128]	; 0x80
   175e4:	mul	r1, r1, lr
   175e8:	cmp	r3, #4
   175ec:	movcc	r3, #4
   175f0:	ldr	ip, [r0, #136]	; 0x88
   175f4:	cmp	r2, r3
   175f8:	strhcc	r3, [r0, #128]	; 0x80
   175fc:	sub	r2, r3, #1
   17600:	sub	r0, ip, r1
   17604:	cmp	r1, #0
   17608:	mov	r3, #4
   1760c:	and	r0, r0, r2
   17610:	mov	r2, #1
   17614:	str	r3, [sp, #16]
   17618:	str	r2, [sp, #20]
   1761c:	str	r3, [sp, #28]
   17620:	movne	r2, #2
   17624:	addne	r3, r1, r3
   17628:	strne	r1, [sp, #36]	; 0x24
   1762c:	str	lr, [sp, #12]
   17630:	strne	r5, [sp, #32]
   17634:	add	lr, sp, #12
   17638:	strne	r3, [sp, #16]
   1763c:	strne	r2, [sp, #20]
   17640:	movne	r1, #3
   17644:	moveq	r1, #2
   17648:	cmp	r0, #0
   1764c:	str	lr, [sp, #24]
   17650:	beq	1767c <flatcc_builder_end_vector@@Base+0xd4>
   17654:	add	r2, r2, #1
   17658:	add	lr, sp, #88	; 0x58
   1765c:	add	lr, lr, r2, lsl #3
   17660:	ldr	r5, [pc, #268]	; 17774 <flatcc_builder_end_vector@@Base+0x1cc>
   17664:	mov	r2, r1
   17668:	add	r3, r3, r0
   1766c:	str	r0, [lr, #-68]	; 0xffffffbc
   17670:	str	r3, [sp, #16]
   17674:	str	r1, [sp, #20]
   17678:	str	r5, [lr, #-72]	; 0xffffffb8
   1767c:	sub	r5, ip, r3
   17680:	cmp	ip, r5
   17684:	ble	17748 <flatcc_builder_end_vector@@Base+0x1a0>
   17688:	ldr	r0, [r4, #36]	; 0x24
   1768c:	add	r1, sp, #24
   17690:	str	r3, [sp]
   17694:	mov	r3, r5
   17698:	ldr	r6, [r4, #44]	; 0x2c
   1769c:	blx	r6
   176a0:	subs	r1, r0, #0
   176a4:	bne	17734 <flatcc_builder_end_vector@@Base+0x18c>
   176a8:	cmp	r5, #0
   176ac:	str	r5, [r4, #136]	; 0x88
   176b0:	beq	17728 <flatcc_builder_end_vector@@Base+0x180>
   176b4:	ldr	r2, [r4, #20]
   176b8:	ldr	r0, [r4, #16]
   176bc:	bl	124a8 <memset@plt>
   176c0:	ldr	r3, [r4, #32]
   176c4:	ldr	r2, [r4, #64]	; 0x40
   176c8:	ldrh	lr, [r4, #130]	; 0x82
   176cc:	ldr	ip, [r3]
   176d0:	ldr	r1, [r3, #4]
   176d4:	ldrh	r0, [r4, #128]	; 0x80
   176d8:	sub	r2, r2, ip
   176dc:	cmp	r2, r1
   176e0:	movcs	r2, r1
   176e4:	cmp	r0, lr
   176e8:	ldr	r0, [r4, #60]	; 0x3c
   176ec:	ldr	r6, [r3, #8]
   176f0:	str	r2, [r4, #24]
   176f4:	add	r2, r0, ip
   176f8:	str	r2, [r4, #16]
   176fc:	str	r6, [r4, #20]
   17700:	ldr	r2, [r4, #156]	; 0x9c
   17704:	str	ip, [r4, #28]
   17708:	str	r1, [r3, #4]
   1770c:	strhcc	lr, [r4, #128]	; 0x80
   17710:	ldrh	r1, [r3, #12]
   17714:	sub	r2, r2, #1
   17718:	sub	r3, r3, #36	; 0x24
   1771c:	str	r2, [r4, #156]	; 0x9c
   17720:	strh	r1, [r4, #130]	; 0x82
   17724:	str	r3, [r4, #32]
   17728:	mov	r0, r5
   1772c:	add	sp, sp, #88	; 0x58
   17730:	pop	{r4, r5, r6, pc}
   17734:	ldr	r3, [pc, #60]	; 17778 <flatcc_builder_end_vector@@Base+0x1d0>
   17738:	ldr	r2, [pc, #60]	; 1777c <flatcc_builder_end_vector@@Base+0x1d4>
   1773c:	ldr	r1, [pc, #60]	; 17780 <flatcc_builder_end_vector@@Base+0x1d8>
   17740:	ldr	r0, [pc, #60]	; 17784 <flatcc_builder_end_vector@@Base+0x1dc>
   17744:	bl	124d8 <__assert_fail@plt>
   17748:	bl	12534 <__assert_fail@plt+0x5c>
   1774c:	ldr	r3, [pc, #52]	; 17788 <flatcc_builder_end_vector@@Base+0x1e0>
   17750:	ldr	r2, [pc, #52]	; 1778c <flatcc_builder_end_vector@@Base+0x1e4>
   17754:	ldr	r1, [pc, #36]	; 17780 <flatcc_builder_end_vector@@Base+0x1d8>
   17758:	ldr	r0, [pc, #48]	; 17790 <flatcc_builder_end_vector@@Base+0x1e8>
   1775c:	bl	124d8 <__assert_fail@plt>
   17760:	ldr	r3, [pc, #44]	; 17794 <flatcc_builder_end_vector@@Base+0x1ec>
   17764:	ldr	r2, [pc, #44]	; 17798 <flatcc_builder_end_vector@@Base+0x1f0>
   17768:	ldr	r1, [pc, #16]	; 17780 <flatcc_builder_end_vector@@Base+0x1d8>
   1776c:	ldr	r0, [pc, #40]	; 1779c <flatcc_builder_end_vector@@Base+0x1f4>
   17770:	bl	124d8 <__assert_fail@plt>
   17774:	andeq	r0, r2, ip, asr #27
   17778:	andeq	r0, r2, r0, asr sp
   1777c:	andeq	r0, r0, fp, lsl #5
   17780:	andeq	r1, r2, r4, lsl #9
   17784:	andeq	r1, r2, r4, asr #10
   17788:			; <UNDEFINED> instruction: 0x000212b0
   1778c:	andeq	r0, r0, r5, asr r5
   17790:	andeq	r1, r2, ip, ror r7
   17794:	ldrdeq	r1, [r2], -r0
   17798:	andeq	r0, r0, r8, ror r5
   1779c:	strdeq	r1, [r2], -r0

000177a0 <flatcc_builder_vector_count@@Base>:
   177a0:	ldr	r3, [r0, #32]
   177a4:	ldr	r0, [r3, #20]
   177a8:	bx	lr

000177ac <flatcc_builder_vector_edit@@Base>:
   177ac:	ldr	r0, [r0, #16]
   177b0:	bx	lr

000177b4 <flatcc_builder_create_offset_vector_direct@@Base>:
   177b4:	cmn	r2, #-1073741823	; 0xc0000001
   177b8:	bls	177c4 <flatcc_builder_create_offset_vector_direct@@Base+0x10>
   177bc:	mov	r0, #0
   177c0:	bx	lr
   177c4:	b	13f88 <flatcc_builder_default_alloc@@Base+0x2fc>

000177c8 <flatcc_builder_end_offset_vector@@Base>:
   177c8:	ldr	r3, [r0, #32]
   177cc:	push	{r4, r5, r6, lr}
   177d0:	ldrh	r2, [r3, #14]
   177d4:	cmp	r2, #5
   177d8:	bne	17888 <flatcc_builder_end_offset_vector@@Base+0xc0>
   177dc:	ldr	r2, [r3, #20]
   177e0:	cmn	r2, #-1073741823	; 0xc0000001
   177e4:	bls	177f4 <flatcc_builder_end_offset_vector@@Base+0x2c>
   177e8:	mov	r5, #0
   177ec:	mov	r0, r5
   177f0:	pop	{r4, r5, r6, pc}
   177f4:	ldr	r1, [r0, #16]
   177f8:	mov	r4, r0
   177fc:	bl	13f88 <flatcc_builder_default_alloc@@Base+0x2fc>
   17800:	subs	r5, r0, #0
   17804:	beq	177e8 <flatcc_builder_end_offset_vector@@Base+0x20>
   17808:	ldr	r2, [r4, #20]
   1780c:	mov	r1, #0
   17810:	ldr	r0, [r4, #16]
   17814:	bl	124a8 <memset@plt>
   17818:	ldr	r3, [r4, #32]
   1781c:	ldr	r2, [r4, #64]	; 0x40
   17820:	ldrh	lr, [r4, #130]	; 0x82
   17824:	ldr	ip, [r3]
   17828:	ldr	r1, [r3, #4]
   1782c:	ldrh	r0, [r4, #128]	; 0x80
   17830:	sub	r2, r2, ip
   17834:	cmp	r2, r1
   17838:	movcs	r2, r1
   1783c:	cmp	r0, lr
   17840:	ldr	r0, [r4, #60]	; 0x3c
   17844:	ldr	r6, [r3, #8]
   17848:	str	r2, [r4, #24]
   1784c:	add	r2, r0, ip
   17850:	str	r2, [r4, #16]
   17854:	str	r6, [r4, #20]
   17858:	ldr	r2, [r4, #156]	; 0x9c
   1785c:	str	ip, [r4, #28]
   17860:	str	r1, [r3, #4]
   17864:	strhcc	lr, [r4, #128]	; 0x80
   17868:	ldrh	r1, [r3, #12]
   1786c:	sub	r2, r2, #1
   17870:	sub	r3, r3, #36	; 0x24
   17874:	str	r2, [r4, #156]	; 0x9c
   17878:	strh	r1, [r4, #130]	; 0x82
   1787c:	str	r3, [r4, #32]
   17880:	mov	r0, r5
   17884:	pop	{r4, r5, r6, pc}
   17888:	ldr	r3, [pc, #12]	; 1789c <flatcc_builder_end_offset_vector@@Base+0xd4>
   1788c:	ldr	r2, [pc, #12]	; 178a0 <flatcc_builder_end_offset_vector@@Base+0xd8>
   17890:	ldr	r1, [pc, #12]	; 178a4 <flatcc_builder_end_offset_vector@@Base+0xdc>
   17894:	ldr	r0, [pc, #12]	; 178a8 <flatcc_builder_end_offset_vector@@Base+0xe0>
   17898:	bl	124d8 <__assert_fail@plt>
   1789c:	andeq	r1, r2, r0, asr #3
   178a0:	andeq	r0, r0, r8, asr #11
   178a4:	andeq	r1, r2, r4, lsl #9
   178a8:	andeq	r1, r2, ip, asr r6

000178ac <flatcc_builder_end_offset_vector_for_unions@@Base>:
   178ac:	ldr	r2, [r0, #32]
   178b0:	push	{r4, r5, r6, lr}
   178b4:	ldrh	ip, [r2, #14]
   178b8:	cmp	ip, #5
   178bc:	bne	17970 <flatcc_builder_end_offset_vector_for_unions@@Base+0xc4>
   178c0:	ldr	r2, [r2, #20]
   178c4:	cmn	r2, #-1073741823	; 0xc0000001
   178c8:	bls	178d8 <flatcc_builder_end_offset_vector_for_unions@@Base+0x2c>
   178cc:	mov	r5, #0
   178d0:	mov	r0, r5
   178d4:	pop	{r4, r5, r6, pc}
   178d8:	mov	r3, r1
   178dc:	ldr	r1, [r0, #16]
   178e0:	mov	r4, r0
   178e4:	bl	13d98 <flatcc_builder_default_alloc@@Base+0x10c>
   178e8:	subs	r5, r0, #0
   178ec:	beq	178cc <flatcc_builder_end_offset_vector_for_unions@@Base+0x20>
   178f0:	ldr	r2, [r4, #20]
   178f4:	mov	r1, #0
   178f8:	ldr	r0, [r4, #16]
   178fc:	bl	124a8 <memset@plt>
   17900:	ldr	r3, [r4, #32]
   17904:	ldr	r2, [r4, #64]	; 0x40
   17908:	ldrh	lr, [r4, #130]	; 0x82
   1790c:	ldr	ip, [r3]
   17910:	ldr	r1, [r3, #4]
   17914:	ldrh	r0, [r4, #128]	; 0x80
   17918:	sub	r2, r2, ip
   1791c:	cmp	r2, r1
   17920:	movcs	r2, r1
   17924:	cmp	r0, lr
   17928:	ldr	r0, [r4, #60]	; 0x3c
   1792c:	ldr	r6, [r3, #8]
   17930:	str	r2, [r4, #24]
   17934:	add	r2, r0, ip
   17938:	str	r2, [r4, #16]
   1793c:	str	r6, [r4, #20]
   17940:	ldr	r2, [r4, #156]	; 0x9c
   17944:	str	ip, [r4, #28]
   17948:	str	r1, [r3, #4]
   1794c:	strhcc	lr, [r4, #128]	; 0x80
   17950:	ldrh	r1, [r3, #12]
   17954:	sub	r2, r2, #1
   17958:	sub	r3, r3, #36	; 0x24
   1795c:	str	r2, [r4, #156]	; 0x9c
   17960:	strh	r1, [r4, #130]	; 0x82
   17964:	str	r3, [r4, #32]
   17968:	mov	r0, r5
   1796c:	pop	{r4, r5, r6, pc}
   17970:	ldr	r3, [pc, #12]	; 17984 <flatcc_builder_end_offset_vector_for_unions@@Base+0xd8>
   17974:	ldr	r2, [pc, #12]	; 17988 <flatcc_builder_end_offset_vector_for_unions@@Base+0xdc>
   17978:	ldr	r1, [pc, #12]	; 1798c <flatcc_builder_end_offset_vector_for_unions@@Base+0xe0>
   1797c:	ldr	r0, [pc, #12]	; 17990 <flatcc_builder_end_offset_vector_for_unions@@Base+0xe4>
   17980:	bl	124d8 <__assert_fail@plt>
   17984:	andeq	r1, r2, ip, ror #5
   17988:	ldrdeq	r0, [r0], -r5
   1798c:	andeq	r1, r2, r4, lsl #9
   17990:	andeq	r1, r2, ip, asr r6

00017994 <flatcc_builder_offset_vector_edit@@Base>:
   17994:	ldr	r0, [r0, #16]
   17998:	bx	lr

0001799c <flatcc_builder_offset_vector_count@@Base>:
   1799c:	ldr	r3, [r0, #32]
   179a0:	ldr	r0, [r3, #20]
   179a4:	bx	lr

000179a8 <flatcc_builder_create_union_vector@@Base>:
   179a8:	push	{r4, r5, r6, r7, r8, r9, lr}
   179ac:	mov	r6, r0
   179b0:	ldr	r0, [r1, #156]	; 0x9c
   179b4:	ldr	ip, [r1, #160]	; 0xa0
   179b8:	mov	r4, r1
   179bc:	add	r1, r0, #1
   179c0:	cmp	r1, ip
   179c4:	sub	sp, sp, #12
   179c8:	mov	r5, r2
   179cc:	mov	r7, r3
   179d0:	str	r1, [r4, #156]	; 0x9c
   179d4:	ble	17a5c <flatcc_builder_create_union_vector@@Base+0xb4>
   179d8:	ldr	r3, [r4, #176]	; 0xb0
   179dc:	cmp	r1, r3
   179e0:	cmpgt	r3, #0
   179e4:	movgt	r3, #1
   179e8:	movle	r3, #0
   179ec:	bgt	17a44 <flatcc_builder_create_union_vector@@Base+0x9c>
   179f0:	add	r0, r0, r0, lsl #3
   179f4:	ldr	r1, [r4, #88]	; 0x58
   179f8:	lsl	r8, r0, #2
   179fc:	add	r2, r8, #36	; 0x24
   17a00:	cmp	r2, r1
   17a04:	bhi	17c78 <flatcc_builder_create_union_vector@@Base+0x2d0>
   17a08:	ldr	r3, [r4, #84]	; 0x54
   17a0c:	add	r3, r3, r8
   17a10:	cmp	r3, #0
   17a14:	str	r3, [r4, #32]
   17a18:	beq	17a44 <flatcc_builder_create_union_vector@@Base+0x9c>
   17a1c:	ldr	r2, [r4, #88]	; 0x58
   17a20:	ldr	r0, [pc, #732]	; 17d04 <flatcc_builder_create_union_vector@@Base+0x35c>
   17a24:	ldr	r1, [r4, #176]	; 0xb0
   17a28:	umull	r0, r2, r0, r2
   17a2c:	lsr	r2, r2, #3
   17a30:	cmp	r1, #0
   17a34:	cmpgt	r2, r1
   17a38:	str	r2, [r4, #160]	; 0xa0
   17a3c:	strgt	r1, [r4, #160]	; 0xa0
   17a40:	b	17a68 <flatcc_builder_create_union_vector@@Base+0xc0>
   17a44:	mov	r3, #0
   17a48:	mov	r0, r6
   17a4c:	str	r3, [r6]
   17a50:	str	r3, [r6, #4]
   17a54:	add	sp, sp, #12
   17a58:	pop	{r4, r5, r6, r7, r8, r9, pc}
   17a5c:	ldr	r3, [r4, #32]
   17a60:	add	r3, r3, #36	; 0x24
   17a64:	str	r3, [r4, #32]
   17a68:	ldr	r1, [r4, #20]
   17a6c:	ldr	ip, [r4, #28]
   17a70:	ldrh	r8, [r4, #130]	; 0x82
   17a74:	add	r2, r1, ip
   17a78:	mvn	lr, #3
   17a7c:	add	r2, r2, #7
   17a80:	str	r1, [r3, #8]
   17a84:	bic	r2, r2, #7
   17a88:	mov	r0, #4
   17a8c:	mov	r1, #0
   17a90:	strh	r8, [r3, #12]
   17a94:	strh	r0, [r4, #130]	; 0x82
   17a98:	stm	r3, {ip, lr}
   17a9c:	str	r1, [r4, #20]
   17aa0:	str	r2, [r4, #28]
   17aa4:	str	r0, [r3, #16]
   17aa8:	str	r1, [r3, #20]
   17aac:	ldr	r0, [r4, #64]	; 0x40
   17ab0:	ldr	r1, [r4, #60]	; 0x3c
   17ab4:	sub	r0, r0, r2
   17ab8:	cmp	r0, lr
   17abc:	mov	ip, #5
   17ac0:	strh	ip, [r3, #14]
   17ac4:	add	r1, r1, r2
   17ac8:	strls	r0, [r4, #24]
   17acc:	strhi	lr, [r4, #24]
   17ad0:	movhi	r0, lr
   17ad4:	mvn	r8, #3
   17ad8:	cmn	r7, #-1073741823	; 0xc0000001
   17adc:	str	r1, [r4, #16]
   17ae0:	str	r8, [r3, #4]
   17ae4:	bhi	17cf8 <flatcc_builder_create_union_vector@@Base+0x350>
   17ae8:	lsl	ip, r7, #2
   17aec:	cmp	ip, r0
   17af0:	str	r7, [r3, #20]
   17af4:	str	ip, [r4, #20]
   17af8:	bcs	17c20 <flatcc_builder_create_union_vector@@Base+0x278>
   17afc:	cmp	r1, #0
   17b00:	beq	17a44 <flatcc_builder_create_union_vector@@Base+0x9c>
   17b04:	ldr	r8, [r4, #20]
   17b08:	ldr	r0, [r4, #24]
   17b0c:	add	r3, r7, r8
   17b10:	cmp	r3, r0
   17b14:	str	r3, [r4, #20]
   17b18:	bcs	17c9c <flatcc_builder_create_union_vector@@Base+0x2f4>
   17b1c:	adds	r8, r1, r8
   17b20:	beq	17a44 <flatcc_builder_create_union_vector@@Base+0x9c>
   17b24:	cmp	r7, #0
   17b28:	movne	r2, r5
   17b2c:	addne	lr, r2, r7, lsl #3
   17b30:	subne	r0, r8, #1
   17b34:	subne	r3, r1, #4
   17b38:	beq	17b58 <flatcc_builder_create_union_vector@@Base+0x1b0>
   17b3c:	ldrb	ip, [r2]
   17b40:	add	r2, r2, #8
   17b44:	strb	ip, [r0, #1]!
   17b48:	ldr	ip, [r2, #-4]
   17b4c:	cmp	lr, r2
   17b50:	str	ip, [r3, #4]!
   17b54:	bne	17b3c <flatcc_builder_create_union_vector@@Base+0x194>
   17b58:	mov	r3, r8
   17b5c:	mov	r2, r7
   17b60:	mov	r0, r4
   17b64:	bl	13d98 <flatcc_builder_default_alloc@@Base+0x10c>
   17b68:	subs	r5, r0, #0
   17b6c:	beq	17cfc <flatcc_builder_create_union_vector@@Base+0x354>
   17b70:	mvn	r0, #0
   17b74:	mov	r3, #1
   17b78:	mov	r2, r7
   17b7c:	str	r0, [sp, #4]
   17b80:	mov	r1, r8
   17b84:	str	r3, [sp]
   17b88:	mov	r0, r4
   17b8c:	bl	17468 <flatcc_builder_create_vector@@Base>
   17b90:	mov	r7, r0
   17b94:	ldr	r2, [r4, #20]
   17b98:	mov	r1, #0
   17b9c:	ldr	r0, [r4, #16]
   17ba0:	bl	124a8 <memset@plt>
   17ba4:	ldr	r3, [r4, #32]
   17ba8:	ldr	r2, [r4, #64]	; 0x40
   17bac:	ldrh	lr, [r4, #130]	; 0x82
   17bb0:	ldr	ip, [r3]
   17bb4:	ldr	r1, [r3, #4]
   17bb8:	ldrh	r0, [r4, #128]	; 0x80
   17bbc:	sub	r2, r2, ip
   17bc0:	cmp	r2, r1
   17bc4:	movcs	r2, r1
   17bc8:	cmp	r0, lr
   17bcc:	ldr	r0, [r4, #60]	; 0x3c
   17bd0:	ldr	r8, [r3, #8]
   17bd4:	str	r2, [r4, #24]
   17bd8:	add	r2, r0, ip
   17bdc:	str	r2, [r4, #16]
   17be0:	str	r8, [r4, #20]
   17be4:	ldr	r2, [r4, #156]	; 0x9c
   17be8:	str	ip, [r4, #28]
   17bec:	str	r1, [r3, #4]
   17bf0:	strhcc	lr, [r4, #128]	; 0x80
   17bf4:	ldrh	r1, [r3, #12]
   17bf8:	sub	r2, r2, #1
   17bfc:	sub	r3, r3, #36	; 0x24
   17c00:	mov	r0, r6
   17c04:	str	r7, [r6]
   17c08:	str	r5, [r6, #4]
   17c0c:	str	r2, [r4, #156]	; 0x9c
   17c10:	strh	r1, [r4, #130]	; 0x82
   17c14:	str	r3, [r4, #32]
   17c18:	add	sp, sp, #12
   17c1c:	pop	{r4, r5, r6, r7, r8, r9, pc}
   17c20:	add	ip, ip, #1
   17c24:	mov	r3, #1
   17c28:	ldr	r0, [r4, #40]	; 0x28
   17c2c:	add	r2, ip, r2
   17c30:	str	r3, [sp]
   17c34:	add	r1, r4, #60	; 0x3c
   17c38:	ldr	r9, [r4, #48]	; 0x30
   17c3c:	blx	r9
   17c40:	cmp	r0, #0
   17c44:	bne	17a44 <flatcc_builder_create_union_vector@@Base+0x9c>
   17c48:	ldr	r2, [r4, #28]
   17c4c:	ldr	r3, [r4, #64]	; 0x40
   17c50:	ldr	r1, [r4, #60]	; 0x3c
   17c54:	sub	r3, r3, r2
   17c58:	ldr	r0, [r4, #32]
   17c5c:	cmn	r3, #4
   17c60:	movhi	r3, r8
   17c64:	add	r1, r1, r2
   17c68:	str	r3, [r4, #24]
   17c6c:	str	r1, [r4, #16]
   17c70:	str	r8, [r0, #4]
   17c74:	b	17afc <flatcc_builder_create_union_vector@@Base+0x154>
   17c78:	mov	r1, #4
   17c7c:	ldr	r0, [r4, #40]	; 0x28
   17c80:	str	r1, [sp]
   17c84:	add	r1, r4, #84	; 0x54
   17c88:	ldr	r9, [r4, #48]	; 0x30
   17c8c:	blx	r9
   17c90:	cmp	r0, #0
   17c94:	beq	17a08 <flatcc_builder_create_union_vector@@Base+0x60>
   17c98:	bl	124e8 <__assert_fail@plt+0x10>
   17c9c:	add	r1, r3, #1
   17ca0:	mov	r3, #1
   17ca4:	ldr	r0, [r4, #40]	; 0x28
   17ca8:	add	r2, r1, r2
   17cac:	str	r3, [sp]
   17cb0:	add	r1, r4, #60	; 0x3c
   17cb4:	ldr	r9, [r4, #48]	; 0x30
   17cb8:	blx	r9
   17cbc:	cmp	r0, #0
   17cc0:	bne	17a44 <flatcc_builder_create_union_vector@@Base+0x9c>
   17cc4:	ldr	r2, [r4, #28]
   17cc8:	ldr	r3, [r4, #64]	; 0x40
   17ccc:	ldr	r1, [r4, #60]	; 0x3c
   17cd0:	sub	r3, r3, r2
   17cd4:	cmn	r3, #4
   17cd8:	mvnhi	r3, #3
   17cdc:	str	r3, [r4, #24]
   17ce0:	ldr	r3, [r4, #32]
   17ce4:	add	r1, r1, r2
   17ce8:	mvn	r2, #3
   17cec:	str	r1, [r4, #16]
   17cf0:	str	r2, [r3, #4]
   17cf4:	b	17b1c <flatcc_builder_create_union_vector@@Base+0x174>
   17cf8:	bl	1255c <__assert_fail@plt+0x84>
   17cfc:	mov	r7, r5
   17d00:	b	17b94 <flatcc_builder_create_union_vector@@Base+0x1ec>
   17d04:	stmiacc	r3!, {r0, r3, r4, r5, r9, sl, fp, pc}^

00017d08 <flatcc_builder_create_union_vector_direct@@Base>:
   17d08:	push	{r4, r5, r6, r7, r8, lr}
   17d0c:	sub	sp, sp, #88	; 0x58
   17d10:	mov	r4, r0
   17d14:	ldr	r5, [sp, #112]	; 0x70
   17d18:	cmn	r5, #-1073741823	; 0xc0000001
   17d1c:	bls	17d38 <flatcc_builder_create_union_vector_direct@@Base+0x30>
   17d20:	mov	r3, #0
   17d24:	mov	r0, r4
   17d28:	str	r3, [r4]
   17d2c:	str	r3, [r4, #4]
   17d30:	add	sp, sp, #88	; 0x58
   17d34:	pop	{r4, r5, r6, r7, r8, pc}
   17d38:	mov	r6, r1
   17d3c:	mov	r8, r2
   17d40:	mov	r1, r3
   17d44:	mov	r0, r6
   17d48:	mov	r3, r2
   17d4c:	mov	r2, r5
   17d50:	bl	13d98 <flatcc_builder_default_alloc@@Base+0x10c>
   17d54:	subs	r7, r0, #0
   17d58:	beq	17d20 <flatcc_builder_create_union_vector_direct@@Base+0x18>
   17d5c:	ldrh	r3, [r6, #128]	; 0x80
   17d60:	ldr	r0, [r6, #136]	; 0x88
   17d64:	mov	r2, #1
   17d68:	cmp	r3, #3
   17d6c:	movls	r3, #4
   17d70:	strhls	r3, [r6, #128]	; 0x80
   17d74:	sub	r1, r0, r5
   17d78:	cmp	r5, #0
   17d7c:	mov	r3, #4
   17d80:	add	ip, sp, #12
   17d84:	str	r3, [sp, #16]
   17d88:	str	r2, [sp, #20]
   17d8c:	and	r1, r1, #3
   17d90:	movne	r2, #2
   17d94:	str	r3, [sp, #28]
   17d98:	addne	r3, r5, r3
   17d9c:	str	ip, [sp, #24]
   17da0:	strne	r8, [sp, #32]
   17da4:	strne	r5, [sp, #36]	; 0x24
   17da8:	strne	r3, [sp, #16]
   17dac:	strne	r2, [sp, #20]
   17db0:	movne	ip, #3
   17db4:	moveq	ip, #2
   17db8:	cmp	r1, #0
   17dbc:	str	r5, [sp, #12]
   17dc0:	beq	17dec <flatcc_builder_create_union_vector_direct@@Base+0xe4>
   17dc4:	add	r2, r2, #1
   17dc8:	add	lr, sp, #88	; 0x58
   17dcc:	add	lr, lr, r2, lsl #3
   17dd0:	ldr	r5, [pc, #108]	; 17e44 <flatcc_builder_create_union_vector_direct@@Base+0x13c>
   17dd4:	mov	r2, ip
   17dd8:	add	r3, r3, r1
   17ddc:	str	r1, [lr, #-68]	; 0xffffffbc
   17de0:	str	r3, [sp, #16]
   17de4:	str	ip, [sp, #20]
   17de8:	str	r5, [lr, #-72]	; 0xffffffb8
   17dec:	sub	r5, r0, r3
   17df0:	cmp	r0, r5
   17df4:	ble	17e2c <flatcc_builder_create_union_vector_direct@@Base+0x124>
   17df8:	ldr	r0, [r6, #36]	; 0x24
   17dfc:	add	r1, sp, #24
   17e00:	str	r3, [sp]
   17e04:	mov	r3, r5
   17e08:	ldr	r8, [r6, #44]	; 0x2c
   17e0c:	blx	r8
   17e10:	cmp	r0, #0
   17e14:	bne	17e30 <flatcc_builder_create_union_vector_direct@@Base+0x128>
   17e18:	mov	r0, r4
   17e1c:	str	r5, [r6, #136]	; 0x88
   17e20:	stm	r4, {r5, r7}
   17e24:	add	sp, sp, #88	; 0x58
   17e28:	pop	{r4, r5, r6, r7, r8, pc}
   17e2c:	bl	12534 <__assert_fail@plt+0x5c>
   17e30:	ldr	r3, [pc, #16]	; 17e48 <flatcc_builder_create_union_vector_direct@@Base+0x140>
   17e34:	ldr	r2, [pc, #16]	; 17e4c <flatcc_builder_create_union_vector_direct@@Base+0x144>
   17e38:	ldr	r1, [pc, #16]	; 17e50 <flatcc_builder_create_union_vector_direct@@Base+0x148>
   17e3c:	ldr	r0, [pc, #16]	; 17e54 <flatcc_builder_create_union_vector_direct@@Base+0x14c>
   17e40:	bl	124d8 <__assert_fail@plt>
   17e44:	andeq	r0, r2, ip, asr #27
   17e48:	andeq	r0, r2, r0, asr sp
   17e4c:	andeq	r0, r0, fp, lsl #5
   17e50:	andeq	r1, r2, r4, lsl #9
   17e54:	andeq	r1, r2, r4, asr #10

00017e58 <flatcc_builder_start_union_vector@@Base>:
   17e58:	ldr	r1, [r0, #156]	; 0x9c
   17e5c:	ldr	r3, [r0, #160]	; 0xa0
   17e60:	add	r2, r1, #1
   17e64:	cmp	r2, r3
   17e68:	push	{r4, r5, r6, lr}
   17e6c:	mov	r4, r0
   17e70:	sub	sp, sp, #8
   17e74:	str	r2, [r0, #156]	; 0x9c
   17e78:	ble	17ee8 <flatcc_builder_start_union_vector@@Base+0x90>
   17e7c:	ldr	r3, [r0, #176]	; 0xb0
   17e80:	cmp	r3, #0
   17e84:	cmpgt	r2, r3
   17e88:	movgt	r3, #1
   17e8c:	movle	r3, #0
   17e90:	bgt	17f94 <flatcc_builder_start_union_vector@@Base+0x13c>
   17e94:	add	r1, r1, r1, lsl #3
   17e98:	ldr	r0, [r0, #88]	; 0x58
   17e9c:	lsl	r5, r1, #2
   17ea0:	add	r2, r5, #36	; 0x24
   17ea4:	cmp	r2, r0
   17ea8:	bhi	17f70 <flatcc_builder_start_union_vector@@Base+0x118>
   17eac:	ldr	r3, [r4, #84]	; 0x54
   17eb0:	add	r3, r3, r5
   17eb4:	cmp	r3, #0
   17eb8:	str	r3, [r4, #32]
   17ebc:	beq	17f94 <flatcc_builder_start_union_vector@@Base+0x13c>
   17ec0:	ldr	r2, [r4, #88]	; 0x58
   17ec4:	ldr	r0, [pc, #208]	; 17f9c <flatcc_builder_start_union_vector@@Base+0x144>
   17ec8:	ldr	r1, [r4, #176]	; 0xb0
   17ecc:	umull	r0, r2, r0, r2
   17ed0:	lsr	r2, r2, #3
   17ed4:	cmp	r1, #0
   17ed8:	cmpgt	r2, r1
   17edc:	str	r2, [r4, #160]	; 0xa0
   17ee0:	strgt	r1, [r4, #160]	; 0xa0
   17ee4:	b	17ef4 <flatcc_builder_start_union_vector@@Base+0x9c>
   17ee8:	ldr	r3, [r0, #32]
   17eec:	add	r3, r3, #36	; 0x24
   17ef0:	str	r3, [r0, #32]
   17ef4:	ldr	ip, [r4, #20]
   17ef8:	ldr	r1, [r4, #28]
   17efc:	ldrh	r5, [r4, #130]	; 0x82
   17f00:	add	r2, ip, r1
   17f04:	add	r2, r2, #7
   17f08:	str	ip, [r3, #8]
   17f0c:	bic	r2, r2, #7
   17f10:	mov	lr, #4
   17f14:	mov	r0, #0
   17f18:	mov	ip, #8
   17f1c:	strh	r5, [r3, #12]
   17f20:	strh	lr, [r4, #130]	; 0x82
   17f24:	str	r1, [r3]
   17f28:	str	r2, [r4, #28]
   17f2c:	str	r0, [r4, #20]
   17f30:	str	r0, [r3, #20]
   17f34:	str	ip, [r3, #16]
   17f38:	ldr	r1, [r4, #64]	; 0x40
   17f3c:	ldr	ip, [r4, #60]	; 0x3c
   17f40:	sub	r1, r1, r2
   17f44:	mvn	lr, #3
   17f48:	cmp	r1, lr
   17f4c:	add	r2, ip, r2
   17f50:	movhi	r1, lr
   17f54:	mov	ip, #7
   17f58:	strh	ip, [r3, #14]
   17f5c:	str	r2, [r4, #16]
   17f60:	str	r1, [r4, #24]
   17f64:	str	lr, [r3, #4]
   17f68:	add	sp, sp, #8
   17f6c:	pop	{r4, r5, r6, pc}
   17f70:	mov	r1, #4
   17f74:	ldr	r0, [r4, #40]	; 0x28
   17f78:	str	r1, [sp]
   17f7c:	add	r1, r4, #84	; 0x54
   17f80:	ldr	r6, [r4, #48]	; 0x30
   17f84:	blx	r6
   17f88:	cmp	r0, #0
   17f8c:	beq	17eac <flatcc_builder_start_union_vector@@Base+0x54>
   17f90:	bl	124e8 <__assert_fail@plt+0x10>
   17f94:	mvn	r0, #0
   17f98:	b	17f68 <flatcc_builder_start_union_vector@@Base+0x110>
   17f9c:	stmiacc	r3!, {r0, r3, r4, r5, r9, sl, fp, pc}^

00017fa0 <flatcc_builder_end_union_vector@@Base>:
   17fa0:	ldr	r3, [r1, #32]
   17fa4:	push	{r4, r5, r6, r7, r8, r9, lr}
   17fa8:	sub	sp, sp, #12
   17fac:	ldrh	r2, [r3, #14]
   17fb0:	cmp	r2, #7
   17fb4:	bne	18174 <flatcc_builder_end_union_vector@@Base+0x1d4>
   17fb8:	ldr	r5, [r3, #20]
   17fbc:	ldr	r8, [r1, #20]
   17fc0:	ldr	r3, [r1, #24]
   17fc4:	lsl	r7, r5, #2
   17fc8:	add	r2, r7, r5
   17fcc:	add	r2, r2, r8
   17fd0:	cmp	r2, r3
   17fd4:	mov	r4, r1
   17fd8:	mov	r6, r0
   17fdc:	str	r2, [r1, #20]
   17fe0:	bcs	180bc <flatcc_builder_end_union_vector@@Base+0x11c>
   17fe4:	ldr	r3, [r1, #16]
   17fe8:	adds	r1, r3, r8
   17fec:	beq	1815c <flatcc_builder_end_union_vector@@Base+0x1bc>
   17ff0:	cmp	r5, #0
   17ff4:	add	r7, r1, r7
   17ff8:	addne	lr, r3, r5, lsl #3
   17ffc:	subne	r0, r7, #1
   18000:	subne	r2, r1, #4
   18004:	beq	1811c <flatcc_builder_end_union_vector@@Base+0x17c>
   18008:	ldrb	ip, [r3]
   1800c:	add	r3, r3, #8
   18010:	strb	ip, [r0, #1]!
   18014:	ldr	ip, [r3, #-4]
   18018:	cmp	lr, r3
   1801c:	str	ip, [r2, #4]!
   18020:	bne	18008 <flatcc_builder_end_union_vector@@Base+0x68>
   18024:	cmn	r5, #-1073741823	; 0xc0000001
   18028:	bls	1811c <flatcc_builder_end_union_vector@@Base+0x17c>
   1802c:	mov	r8, #0
   18030:	mov	r5, r8
   18034:	ldr	r2, [r4, #20]
   18038:	mov	r1, #0
   1803c:	ldr	r0, [r4, #16]
   18040:	bl	124a8 <memset@plt>
   18044:	ldr	r3, [r4, #32]
   18048:	ldr	r2, [r4, #64]	; 0x40
   1804c:	ldrh	lr, [r4, #130]	; 0x82
   18050:	ldr	ip, [r3]
   18054:	ldr	r1, [r3, #4]
   18058:	ldrh	r0, [r4, #128]	; 0x80
   1805c:	sub	r2, r2, ip
   18060:	cmp	r2, r1
   18064:	movcs	r2, r1
   18068:	cmp	r0, lr
   1806c:	ldr	r0, [r4, #60]	; 0x3c
   18070:	ldr	r7, [r3, #8]
   18074:	str	r2, [r4, #24]
   18078:	add	r2, r0, ip
   1807c:	str	r2, [r4, #16]
   18080:	str	r7, [r4, #20]
   18084:	ldr	r2, [r4, #156]	; 0x9c
   18088:	str	ip, [r4, #28]
   1808c:	str	r1, [r3, #4]
   18090:	strhcc	lr, [r4, #128]	; 0x80
   18094:	ldrh	r1, [r3, #12]
   18098:	sub	r2, r2, #1
   1809c:	sub	r3, r3, #36	; 0x24
   180a0:	mov	r0, r6
   180a4:	stm	r6, {r5, r8}
   180a8:	str	r2, [r4, #156]	; 0x9c
   180ac:	strh	r1, [r4, #130]	; 0x82
   180b0:	str	r3, [r4, #32]
   180b4:	add	sp, sp, #12
   180b8:	pop	{r4, r5, r6, r7, r8, r9, pc}
   180bc:	ldr	r1, [r1, #28]
   180c0:	mov	r3, #1
   180c4:	add	r1, r1, #1
   180c8:	ldr	r0, [r4, #40]	; 0x28
   180cc:	add	r2, r1, r2
   180d0:	str	r3, [sp]
   180d4:	add	r1, r4, #60	; 0x3c
   180d8:	ldr	r9, [r4, #48]	; 0x30
   180dc:	blx	r9
   180e0:	cmp	r0, #0
   180e4:	bne	1815c <flatcc_builder_end_union_vector@@Base+0x1bc>
   180e8:	ldr	r1, [r4, #28]
   180ec:	ldr	r2, [r4, #64]	; 0x40
   180f0:	ldr	r3, [r4, #60]	; 0x3c
   180f4:	sub	r2, r2, r1
   180f8:	cmn	r2, #4
   180fc:	mvnhi	r2, #3
   18100:	str	r2, [r4, #24]
   18104:	ldr	r2, [r4, #32]
   18108:	add	r3, r3, r1
   1810c:	mvn	r1, #3
   18110:	str	r3, [r4, #16]
   18114:	str	r1, [r2, #4]
   18118:	b	17fe8 <flatcc_builder_end_union_vector@@Base+0x48>
   1811c:	mov	r3, r7
   18120:	mov	r2, r5
   18124:	mov	r0, r4
   18128:	bl	13d98 <flatcc_builder_default_alloc@@Base+0x10c>
   1812c:	subs	r8, r0, #0
   18130:	beq	1802c <flatcc_builder_end_union_vector@@Base+0x8c>
   18134:	mvn	r0, #0
   18138:	mov	r3, #1
   1813c:	mov	r2, r5
   18140:	str	r0, [sp, #4]
   18144:	mov	r1, r7
   18148:	str	r3, [sp]
   1814c:	mov	r0, r4
   18150:	bl	17468 <flatcc_builder_create_vector@@Base>
   18154:	mov	r5, r0
   18158:	b	18034 <flatcc_builder_end_union_vector@@Base+0x94>
   1815c:	mov	r3, #0
   18160:	mov	r0, r6
   18164:	str	r3, [r6]
   18168:	str	r3, [r6, #4]
   1816c:	add	sp, sp, #12
   18170:	pop	{r4, r5, r6, r7, r8, r9, pc}
   18174:	ldr	r3, [pc, #12]	; 18188 <flatcc_builder_end_union_vector@@Base+0x1e8>
   18178:	ldr	r2, [pc, #12]	; 1818c <flatcc_builder_end_union_vector@@Base+0x1ec>
   1817c:	ldr	r1, [pc, #12]	; 18190 <flatcc_builder_end_union_vector@@Base+0x1f0>
   18180:	ldr	r0, [pc, #12]	; 18194 <flatcc_builder_end_union_vector@@Base+0x1f4>
   18184:	bl	124d8 <__assert_fail@plt>
   18188:	andeq	r1, r2, r8, lsl r3
   1818c:	andeq	r0, r0, r1, asr r6
   18190:	andeq	r1, r2, r4, lsl #9
   18194:	muleq	r2, r0, r7

00018198 <flatcc_builder_union_vector_edit@@Base>:
   18198:	ldr	r0, [r0, #16]
   1819c:	bx	lr

000181a0 <flatcc_builder_union_vector_count@@Base>:
   181a0:	ldr	r3, [r0, #32]
   181a4:	ldr	r0, [r3, #20]
   181a8:	bx	lr

000181ac <flatcc_builder_extend_union_vector@@Base>:
   181ac:	ldr	ip, [r0, #32]
   181b0:	push	{r4, r5, r6, r7, lr}
   181b4:	mov	r4, r0
   181b8:	ldr	r3, [ip, #20]
   181bc:	sub	sp, sp, #12
   181c0:	adds	r3, r1, r3
   181c4:	movcs	r2, #1
   181c8:	movcc	r2, #0
   181cc:	cmn	r3, #-536870911	; 0xe0000001
   181d0:	movls	r0, #0
   181d4:	movhi	r0, #1
   181d8:	orrs	r5, r2, r0
   181dc:	bne	18274 <flatcc_builder_extend_union_vector@@Base+0xc8>
   181e0:	str	r3, [ip, #20]
   181e4:	ldr	r6, [r4, #20]
   181e8:	ldr	r3, [r4, #24]
   181ec:	add	r1, r6, r1, lsl #3
   181f0:	cmp	r1, r3
   181f4:	str	r1, [r4, #20]
   181f8:	bcs	1820c <flatcc_builder_extend_union_vector@@Base+0x60>
   181fc:	ldr	r0, [r4, #16]
   18200:	add	r0, r0, r6
   18204:	add	sp, sp, #12
   18208:	pop	{r4, r5, r6, r7, pc}
   1820c:	ldr	r2, [r4, #28]
   18210:	mov	r3, #1
   18214:	add	r2, r2, #1
   18218:	ldr	r0, [r4, #40]	; 0x28
   1821c:	add	r2, r2, r1
   18220:	str	r3, [sp]
   18224:	add	r1, r4, #60	; 0x3c
   18228:	ldr	r7, [r4, #48]	; 0x30
   1822c:	blx	r7
   18230:	cmp	r0, #0
   18234:	bne	1826c <flatcc_builder_extend_union_vector@@Base+0xc0>
   18238:	ldr	r2, [r4, #28]
   1823c:	ldr	r3, [r4, #64]	; 0x40
   18240:	ldr	r0, [r4, #60]	; 0x3c
   18244:	sub	r3, r3, r2
   18248:	cmn	r3, #4
   1824c:	mvnhi	r3, #3
   18250:	str	r3, [r4, #24]
   18254:	ldr	r3, [r4, #32]
   18258:	add	r0, r0, r2
   1825c:	mvn	r2, #3
   18260:	str	r0, [r4, #16]
   18264:	str	r2, [r3, #4]
   18268:	b	18200 <flatcc_builder_extend_union_vector@@Base+0x54>
   1826c:	mov	r0, r5
   18270:	b	18204 <flatcc_builder_extend_union_vector@@Base+0x58>
   18274:	bl	1255c <__assert_fail@plt+0x84>

00018278 <flatcc_builder_truncate_union_vector@@Base>:
   18278:	ldr	r3, [r0, #32]
   1827c:	push	{r4, lr}
   18280:	ldrh	r2, [r3, #14]
   18284:	cmp	r2, #7
   18288:	bne	182cc <flatcc_builder_truncate_union_vector@@Base+0x54>
   1828c:	ldr	ip, [r3, #20]
   18290:	cmp	ip, r1
   18294:	bcc	182e0 <flatcc_builder_truncate_union_vector@@Base+0x68>
   18298:	ldr	r2, [r3, #16]
   1829c:	sub	ip, ip, r1
   182a0:	str	ip, [r3, #20]
   182a4:	mul	r2, r2, r1
   182a8:	ldr	r3, [r0, #20]
   182ac:	ldr	r1, [r0, #16]
   182b0:	sub	r3, r3, r2
   182b4:	str	r3, [r0, #20]
   182b8:	add	r0, r1, r3
   182bc:	mov	r1, #0
   182c0:	bl	124a8 <memset@plt>
   182c4:	mov	r0, #0
   182c8:	pop	{r4, pc}
   182cc:	ldr	r3, [pc, #32]	; 182f4 <flatcc_builder_truncate_union_vector@@Base+0x7c>
   182d0:	ldr	r2, [pc, #32]	; 182f8 <flatcc_builder_truncate_union_vector@@Base+0x80>
   182d4:	ldr	r1, [pc, #32]	; 182fc <flatcc_builder_truncate_union_vector@@Base+0x84>
   182d8:	ldr	r0, [pc, #32]	; 18300 <flatcc_builder_truncate_union_vector@@Base+0x88>
   182dc:	bl	124d8 <__assert_fail@plt>
   182e0:	ldr	r3, [pc, #12]	; 182f4 <flatcc_builder_truncate_union_vector@@Base+0x7c>
   182e4:	ldr	r2, [pc, #24]	; 18304 <flatcc_builder_truncate_union_vector@@Base+0x8c>
   182e8:	ldr	r1, [pc, #12]	; 182fc <flatcc_builder_truncate_union_vector@@Base+0x84>
   182ec:	ldr	r0, [pc, #20]	; 18308 <flatcc_builder_truncate_union_vector@@Base+0x90>
   182f0:	bl	124d8 <__assert_fail@plt>
   182f4:	andeq	r1, r2, r8, lsr r3
   182f8:	andeq	r0, r0, r1, lsl #13
   182fc:	andeq	r1, r2, r4, lsl #9
   18300:	muleq	r2, r0, r7
   18304:	andeq	r0, r0, r2, lsl #13
   18308:			; <UNDEFINED> instruction: 0x000216b4

0001830c <flatcc_builder_union_vector_push@@Base>:
   1830c:	push	{r4, r5, r6, r7, lr}
   18310:	mov	r4, r0
   18314:	ldr	r0, [r0, #32]
   18318:	sub	sp, sp, #20
   1831c:	add	r5, sp, #8
   18320:	ldrh	r3, [r0, #14]
   18324:	stm	r5, {r1, r2}
   18328:	cmp	r3, #7
   1832c:	bne	183f0 <flatcc_builder_union_vector_push@@Base+0xe4>
   18330:	ldr	r3, [r0, #20]
   18334:	cmn	r3, #-536870911	; 0xe0000001
   18338:	beq	183e0 <flatcc_builder_union_vector_push@@Base+0xd4>
   1833c:	add	r3, r3, #1
   18340:	str	r3, [r0, #20]
   18344:	ldr	r6, [r4, #20]
   18348:	ldr	r2, [r4, #24]
   1834c:	add	r3, r6, #8
   18350:	cmp	r3, r2
   18354:	str	r3, [r4, #20]
   18358:	bcs	18380 <flatcc_builder_union_vector_push@@Base+0x74>
   1835c:	ldr	r3, [r4, #16]
   18360:	adds	r3, r3, r6
   18364:	movne	r2, r3
   18368:	ldmne	r5, {r0, r1}
   1836c:	moveq	r2, r3
   18370:	stmne	r3, {r0, r1}
   18374:	mov	r0, r2
   18378:	add	sp, sp, #20
   1837c:	pop	{r4, r5, r6, r7, pc}
   18380:	ldr	r2, [r4, #28]
   18384:	mov	r3, #1
   18388:	add	r2, r6, r2
   1838c:	ldr	r0, [r4, #40]	; 0x28
   18390:	add	r2, r2, #9
   18394:	str	r3, [sp]
   18398:	add	r1, r4, #60	; 0x3c
   1839c:	ldr	r7, [r4, #48]	; 0x30
   183a0:	blx	r7
   183a4:	cmp	r0, #0
   183a8:	bne	183e0 <flatcc_builder_union_vector_push@@Base+0xd4>
   183ac:	ldr	r1, [r4, #28]
   183b0:	ldr	r2, [r4, #64]	; 0x40
   183b4:	ldr	r3, [r4, #60]	; 0x3c
   183b8:	sub	r2, r2, r1
   183bc:	cmn	r2, #4
   183c0:	mvnhi	r2, #3
   183c4:	str	r2, [r4, #24]
   183c8:	ldr	r2, [r4, #32]
   183cc:	add	r3, r3, r1
   183d0:	mvn	r1, #3
   183d4:	str	r3, [r4, #16]
   183d8:	str	r1, [r2, #4]
   183dc:	b	18360 <flatcc_builder_union_vector_push@@Base+0x54>
   183e0:	mov	r2, #0
   183e4:	mov	r0, r2
   183e8:	add	sp, sp, #20
   183ec:	pop	{r4, r5, r6, r7, pc}
   183f0:	ldr	r3, [pc, #12]	; 18404 <flatcc_builder_union_vector_push@@Base+0xf8>
   183f4:	ldr	r2, [pc, #12]	; 18408 <flatcc_builder_union_vector_push@@Base+0xfc>
   183f8:	ldr	r1, [pc, #12]	; 1840c <flatcc_builder_union_vector_push@@Base+0x100>
   183fc:	ldr	r0, [pc, #12]	; 18410 <flatcc_builder_union_vector_push@@Base+0x104>
   18400:	bl	124d8 <__assert_fail@plt>
   18404:	andeq	r1, r2, r0, ror #6
   18408:	andeq	r0, r0, sp, lsl #13
   1840c:	andeq	r1, r2, r4, lsl #9
   18410:	muleq	r2, r0, r7

00018414 <flatcc_builder_append_union_vector@@Base>:
   18414:	push	{r4, r5, r6, r7, r8, r9, lr}
   18418:	mov	r5, r0
   1841c:	ldr	r0, [r0, #32]
   18420:	sub	sp, sp, #12
   18424:	ldrh	r3, [r0, #14]
   18428:	cmp	r3, #7
   1842c:	bne	18510 <flatcc_builder_append_union_vector@@Base+0xfc>
   18430:	mov	r7, r1
   18434:	ldr	r1, [r0, #20]
   18438:	adds	r1, r2, r1
   1843c:	movcs	r4, #1
   18440:	movcc	r4, #0
   18444:	cmn	r1, #-536870911	; 0xe0000001
   18448:	movls	r3, #0
   1844c:	movhi	r3, #1
   18450:	orrs	r4, r4, r3
   18454:	bne	1850c <flatcc_builder_append_union_vector@@Base+0xf8>
   18458:	str	r1, [r0, #20]
   1845c:	ldr	r8, [r5, #20]
   18460:	lsl	r6, r2, #3
   18464:	ldr	r3, [r5, #24]
   18468:	add	r1, r6, r8
   1846c:	cmp	r1, r3
   18470:	str	r1, [r5, #20]
   18474:	bcs	184a4 <flatcc_builder_append_union_vector@@Base+0x90>
   18478:	ldr	r3, [r5, #16]
   1847c:	adds	r3, r3, r8
   18480:	beq	18498 <flatcc_builder_append_union_vector@@Base+0x84>
   18484:	mov	r0, r3
   18488:	mov	r2, r6
   1848c:	mov	r1, r7
   18490:	bl	12430 <memcpy@plt>
   18494:	mov	r3, r0
   18498:	mov	r0, r3
   1849c:	add	sp, sp, #12
   184a0:	pop	{r4, r5, r6, r7, r8, r9, pc}
   184a4:	ldr	r2, [r5, #28]
   184a8:	mov	r3, #1
   184ac:	add	r2, r2, #1
   184b0:	ldr	r0, [r5, #40]	; 0x28
   184b4:	add	r2, r2, r1
   184b8:	str	r3, [sp]
   184bc:	add	r1, r5, #60	; 0x3c
   184c0:	ldr	r9, [r5, #48]	; 0x30
   184c4:	blx	r9
   184c8:	cmp	r0, #0
   184cc:	bne	18504 <flatcc_builder_append_union_vector@@Base+0xf0>
   184d0:	ldr	r1, [r5, #28]
   184d4:	ldr	r2, [r5, #64]	; 0x40
   184d8:	ldr	r3, [r5, #60]	; 0x3c
   184dc:	sub	r2, r2, r1
   184e0:	cmn	r2, #4
   184e4:	mvnhi	r2, #3
   184e8:	str	r2, [r5, #24]
   184ec:	ldr	r2, [r5, #32]
   184f0:	add	r3, r3, r1
   184f4:	mvn	r1, #3
   184f8:	str	r3, [r5, #16]
   184fc:	str	r1, [r2, #4]
   18500:	b	1847c <flatcc_builder_append_union_vector@@Base+0x68>
   18504:	mov	r3, r4
   18508:	b	18498 <flatcc_builder_append_union_vector@@Base+0x84>
   1850c:	bl	1255c <__assert_fail@plt+0x84>
   18510:	ldr	r3, [pc, #12]	; 18524 <flatcc_builder_append_union_vector@@Base+0x110>
   18514:	ldr	r2, [pc, #12]	; 18528 <flatcc_builder_append_union_vector@@Base+0x114>
   18518:	ldr	r1, [pc, #12]	; 1852c <flatcc_builder_append_union_vector@@Base+0x118>
   1851c:	ldr	r0, [pc, #12]	; 18530 <flatcc_builder_append_union_vector@@Base+0x11c>
   18520:	bl	124d8 <__assert_fail@plt>
   18524:	andeq	r1, r2, r4, lsl #7
   18528:	muleq	r0, ip, r6
   1852c:	andeq	r1, r2, r4, lsl #9
   18530:	muleq	r2, r0, r7

00018534 <flatcc_builder_create_string@@Base>:
   18534:	push	{r4, r5, r6, lr}
   18538:	sub	sp, sp, #88	; 0x58
   1853c:	ldr	lr, [r0, #136]	; 0x88
   18540:	mov	r4, r0
   18544:	add	r0, sp, #88	; 0x58
   18548:	cmp	r2, #0
   1854c:	sub	r3, lr, r2
   18550:	str	r2, [r0, #-76]!	; 0xffffffb4
   18554:	sub	r3, r3, #1
   18558:	str	r0, [sp, #24]
   1855c:	moveq	r0, #1
   18560:	strne	r1, [sp, #32]
   18564:	mov	ip, #4
   18568:	moveq	r1, r0
   1856c:	movne	r1, #2
   18570:	and	r3, r3, #3
   18574:	str	ip, [sp, #28]
   18578:	add	r3, r3, #1
   1857c:	addne	ip, r2, ip
   18580:	add	r1, r1, #1
   18584:	add	ip, ip, r3
   18588:	add	r0, sp, #88	; 0x58
   1858c:	add	r1, r0, r1, lsl #3
   18590:	sub	r5, lr, ip
   18594:	ldr	r0, [pc, #104]	; 18604 <flatcc_builder_create_string@@Base+0xd0>
   18598:	strne	r2, [sp, #36]	; 0x24
   1859c:	moveq	r2, #2
   185a0:	movne	r2, #3
   185a4:	cmp	lr, r5
   185a8:	str	r3, [r1, #-68]	; 0xffffffbc
   185ac:	str	ip, [sp, #16]
   185b0:	str	r2, [sp, #20]
   185b4:	str	r0, [r1, #-72]	; 0xffffffb8
   185b8:	ble	185ec <flatcc_builder_create_string@@Base+0xb8>
   185bc:	ldr	r0, [r4, #36]	; 0x24
   185c0:	mov	r3, r5
   185c4:	str	ip, [sp]
   185c8:	add	r1, sp, #24
   185cc:	ldr	r6, [r4, #44]	; 0x2c
   185d0:	blx	r6
   185d4:	cmp	r0, #0
   185d8:	bne	185f0 <flatcc_builder_create_string@@Base+0xbc>
   185dc:	mov	r0, r5
   185e0:	str	r5, [r4, #136]	; 0x88
   185e4:	add	sp, sp, #88	; 0x58
   185e8:	pop	{r4, r5, r6, pc}
   185ec:	bl	12534 <__assert_fail@plt+0x5c>
   185f0:	ldr	r3, [pc, #16]	; 18608 <flatcc_builder_create_string@@Base+0xd4>
   185f4:	ldr	r2, [pc, #16]	; 1860c <flatcc_builder_create_string@@Base+0xd8>
   185f8:	ldr	r1, [pc, #16]	; 18610 <flatcc_builder_create_string@@Base+0xdc>
   185fc:	ldr	r0, [pc, #16]	; 18614 <flatcc_builder_create_string@@Base+0xe0>
   18600:	bl	124d8 <__assert_fail@plt>
   18604:	andeq	r0, r2, ip, asr #27
   18608:	andeq	r0, r2, r0, asr sp
   1860c:	andeq	r0, r0, fp, lsl #5
   18610:	andeq	r1, r2, r4, lsl #9
   18614:	andeq	r1, r2, r4, asr #10

00018618 <flatcc_builder_create_string_str@@Base>:
   18618:	push	{r4, r5, r6, lr}
   1861c:	mov	r4, r0
   18620:	sub	sp, sp, #88	; 0x58
   18624:	mov	r0, r1
   18628:	mov	r5, r1
   1862c:	bl	12484 <strlen@plt>
   18630:	ldr	lr, [r4, #136]	; 0x88
   18634:	add	r2, sp, #88	; 0x58
   18638:	sub	r3, lr, #1
   1863c:	mov	ip, #4
   18640:	str	ip, [sp, #28]
   18644:	cmp	r0, #0
   18648:	str	r0, [r2, #-76]!	; 0xffffffb4
   1864c:	sub	r3, r3, r0
   18650:	str	r2, [sp, #24]
   18654:	moveq	r2, #1
   18658:	moveq	r1, r2
   1865c:	movne	r1, #2
   18660:	and	r3, r3, #3
   18664:	addne	ip, r0, ip
   18668:	add	r3, r3, #1
   1866c:	add	r1, r1, #1
   18670:	strne	r0, [sp, #36]	; 0x24
   18674:	add	ip, ip, r3
   18678:	add	r0, sp, #88	; 0x58
   1867c:	strne	r5, [sp, #32]
   18680:	add	r1, r0, r1, lsl #3
   18684:	sub	r5, lr, ip
   18688:	ldr	r0, [pc, #100]	; 186f4 <flatcc_builder_create_string_str@@Base+0xdc>
   1868c:	movne	r2, #3
   18690:	moveq	r2, #2
   18694:	cmp	lr, r5
   18698:	str	r3, [r1, #-68]	; 0xffffffbc
   1869c:	str	ip, [sp, #16]
   186a0:	str	r2, [sp, #20]
   186a4:	str	r0, [r1, #-72]	; 0xffffffb8
   186a8:	ble	186dc <flatcc_builder_create_string_str@@Base+0xc4>
   186ac:	ldr	r0, [r4, #36]	; 0x24
   186b0:	mov	r3, r5
   186b4:	str	ip, [sp]
   186b8:	add	r1, sp, #24
   186bc:	ldr	r6, [r4, #44]	; 0x2c
   186c0:	blx	r6
   186c4:	cmp	r0, #0
   186c8:	bne	186e0 <flatcc_builder_create_string_str@@Base+0xc8>
   186cc:	mov	r0, r5
   186d0:	str	r5, [r4, #136]	; 0x88
   186d4:	add	sp, sp, #88	; 0x58
   186d8:	pop	{r4, r5, r6, pc}
   186dc:	bl	12534 <__assert_fail@plt+0x5c>
   186e0:	ldr	r3, [pc, #16]	; 186f8 <flatcc_builder_create_string_str@@Base+0xe0>
   186e4:	ldr	r2, [pc, #16]	; 186fc <flatcc_builder_create_string_str@@Base+0xe4>
   186e8:	ldr	r1, [pc, #16]	; 18700 <flatcc_builder_create_string_str@@Base+0xe8>
   186ec:	ldr	r0, [pc, #16]	; 18704 <flatcc_builder_create_string_str@@Base+0xec>
   186f0:	bl	124d8 <__assert_fail@plt>
   186f4:	andeq	r0, r2, ip, asr #27
   186f8:	andeq	r0, r2, r0, asr sp
   186fc:	andeq	r0, r0, fp, lsl #5
   18700:	andeq	r1, r2, r4, lsl #9
   18704:	andeq	r1, r2, r4, asr #10

00018708 <flatcc_builder_create_string_strn@@Base>:
   18708:	push	{r4, r5, r6, lr}
   1870c:	mov	r6, r1
   18710:	sub	sp, sp, #88	; 0x58
   18714:	mov	r4, r0
   18718:	mov	r1, #0
   1871c:	mov	r0, r6
   18720:	mov	r5, r2
   18724:	bl	124c0 <memchr@plt>
   18728:	mov	ip, #4
   1872c:	mov	r1, #1
   18730:	add	r2, sp, #88	; 0x58
   18734:	str	ip, [sp, #28]
   18738:	add	lr, sp, #88	; 0x58
   1873c:	cmp	r0, #0
   18740:	subne	r5, r0, r6
   18744:	ldr	r0, [r4, #136]	; 0x88
   18748:	cmp	r5, #0
   1874c:	sub	r3, r0, #1
   18750:	sub	r3, r3, r5
   18754:	movne	r1, #2
   18758:	and	r3, r3, #3
   1875c:	addne	ip, r5, ip
   18760:	add	r3, r3, #1
   18764:	add	r1, r1, #1
   18768:	add	ip, r3, ip
   1876c:	str	r5, [r2, #-76]!	; 0xffffffb4
   18770:	strne	r5, [sp, #36]	; 0x24
   18774:	add	r1, lr, r1, lsl #3
   18778:	sub	r5, r0, ip
   1877c:	ldr	lr, [pc, #108]	; 187f0 <flatcc_builder_create_string_strn@@Base+0xe8>
   18780:	str	r2, [sp, #24]
   18784:	strne	r6, [sp, #32]
   18788:	movne	r2, #3
   1878c:	moveq	r2, #2
   18790:	cmp	r0, r5
   18794:	str	r3, [r1, #-68]	; 0xffffffbc
   18798:	str	ip, [sp, #16]
   1879c:	str	r2, [sp, #20]
   187a0:	str	lr, [r1, #-72]	; 0xffffffb8
   187a4:	ble	187d8 <flatcc_builder_create_string_strn@@Base+0xd0>
   187a8:	ldr	r0, [r4, #36]	; 0x24
   187ac:	mov	r3, r5
   187b0:	str	ip, [sp]
   187b4:	add	r1, sp, #24
   187b8:	ldr	r6, [r4, #44]	; 0x2c
   187bc:	blx	r6
   187c0:	cmp	r0, #0
   187c4:	bne	187dc <flatcc_builder_create_string_strn@@Base+0xd4>
   187c8:	mov	r0, r5
   187cc:	str	r5, [r4, #136]	; 0x88
   187d0:	add	sp, sp, #88	; 0x58
   187d4:	pop	{r4, r5, r6, pc}
   187d8:	bl	12534 <__assert_fail@plt+0x5c>
   187dc:	ldr	r3, [pc, #16]	; 187f4 <flatcc_builder_create_string_strn@@Base+0xec>
   187e0:	ldr	r2, [pc, #16]	; 187f8 <flatcc_builder_create_string_strn@@Base+0xf0>
   187e4:	ldr	r1, [pc, #16]	; 187fc <flatcc_builder_create_string_strn@@Base+0xf4>
   187e8:	ldr	r0, [pc, #16]	; 18800 <flatcc_builder_create_string_strn@@Base+0xf8>
   187ec:	bl	124d8 <__assert_fail@plt>
   187f0:	andeq	r0, r2, ip, asr #27
   187f4:	andeq	r0, r2, r0, asr sp
   187f8:	andeq	r0, r0, fp, lsl #5
   187fc:	andeq	r1, r2, r4, lsl #9
   18800:	andeq	r1, r2, r4, asr #10

00018804 <flatcc_builder_end_string@@Base>:
   18804:	ldr	r3, [r0, #32]
   18808:	push	{r4, r5, r6, lr}
   1880c:	sub	sp, sp, #88	; 0x58
   18810:	ldrh	r2, [r3, #14]
   18814:	cmp	r2, #6
   18818:	bne	18984 <flatcc_builder_end_string@@Base+0x180>
   1881c:	ldr	r2, [r3, #20]
   18820:	ldr	r3, [r0, #20]
   18824:	mov	r4, r0
   18828:	cmp	r2, r3
   1882c:	bne	18970 <flatcc_builder_end_string@@Base+0x16c>
   18830:	ldr	r0, [r0, #136]	; 0x88
   18834:	add	r1, sp, #88	; 0x58
   18838:	sub	r3, r0, #1
   1883c:	cmp	r2, #0
   18840:	sub	r3, r3, r2
   18844:	str	r2, [r1, #-76]!	; 0xffffffb4
   18848:	mov	ip, #4
   1884c:	str	r1, [sp, #24]
   18850:	ldr	lr, [r4, #16]
   18854:	mov	r1, #1
   18858:	and	r3, r3, #3
   1885c:	movne	r1, #2
   18860:	str	ip, [sp, #28]
   18864:	add	r3, r3, #1
   18868:	addne	ip, r2, ip
   1886c:	add	r1, r1, #1
   18870:	strne	lr, [sp, #32]
   18874:	add	ip, ip, r3
   18878:	add	lr, sp, #88	; 0x58
   1887c:	add	r1, lr, r1, lsl #3
   18880:	sub	r5, r0, ip
   18884:	ldr	lr, [pc, #268]	; 18998 <flatcc_builder_end_string@@Base+0x194>
   18888:	strne	r2, [sp, #36]	; 0x24
   1888c:	moveq	r2, #2
   18890:	movne	r2, #3
   18894:	cmp	r0, r5
   18898:	str	r3, [r1, #-68]	; 0xffffffbc
   1889c:	str	ip, [sp, #16]
   188a0:	str	r2, [sp, #20]
   188a4:	str	lr, [r1, #-72]	; 0xffffffb8
   188a8:	ble	1896c <flatcc_builder_end_string@@Base+0x168>
   188ac:	ldr	r0, [r4, #36]	; 0x24
   188b0:	add	r1, sp, #24
   188b4:	str	ip, [sp]
   188b8:	mov	r3, r5
   188bc:	ldr	r6, [r4, #44]	; 0x2c
   188c0:	blx	r6
   188c4:	subs	r1, r0, #0
   188c8:	bne	18958 <flatcc_builder_end_string@@Base+0x154>
   188cc:	cmp	r5, #0
   188d0:	str	r5, [r4, #136]	; 0x88
   188d4:	beq	1894c <flatcc_builder_end_string@@Base+0x148>
   188d8:	ldr	r2, [r4, #20]
   188dc:	ldr	r0, [r4, #16]
   188e0:	bl	124a8 <memset@plt>
   188e4:	ldr	r3, [r4, #32]
   188e8:	ldr	r2, [r4, #64]	; 0x40
   188ec:	ldrh	lr, [r4, #130]	; 0x82
   188f0:	ldr	ip, [r3]
   188f4:	ldr	r1, [r3, #4]
   188f8:	ldrh	r0, [r4, #128]	; 0x80
   188fc:	sub	r2, r2, ip
   18900:	cmp	r2, r1
   18904:	movcs	r2, r1
   18908:	cmp	r0, lr
   1890c:	ldr	r0, [r4, #60]	; 0x3c
   18910:	ldr	r6, [r3, #8]
   18914:	str	r2, [r4, #24]
   18918:	add	r2, r0, ip
   1891c:	str	r2, [r4, #16]
   18920:	str	r6, [r4, #20]
   18924:	ldr	r2, [r4, #156]	; 0x9c
   18928:	str	ip, [r4, #28]
   1892c:	str	r1, [r3, #4]
   18930:	strhcc	lr, [r4, #128]	; 0x80
   18934:	ldrh	r1, [r3, #12]
   18938:	sub	r2, r2, #1
   1893c:	sub	r3, r3, #36	; 0x24
   18940:	str	r2, [r4, #156]	; 0x9c
   18944:	strh	r1, [r4, #130]	; 0x82
   18948:	str	r3, [r4, #32]
   1894c:	mov	r0, r5
   18950:	add	sp, sp, #88	; 0x58
   18954:	pop	{r4, r5, r6, pc}
   18958:	ldr	r3, [pc, #60]	; 1899c <flatcc_builder_end_string@@Base+0x198>
   1895c:	ldr	r2, [pc, #60]	; 189a0 <flatcc_builder_end_string@@Base+0x19c>
   18960:	ldr	r1, [pc, #60]	; 189a4 <flatcc_builder_end_string@@Base+0x1a0>
   18964:	ldr	r0, [pc, #60]	; 189a8 <flatcc_builder_end_string@@Base+0x1a4>
   18968:	bl	124d8 <__assert_fail@plt>
   1896c:	bl	12534 <__assert_fail@plt+0x5c>
   18970:	ldr	r3, [pc, #52]	; 189ac <flatcc_builder_end_string@@Base+0x1a8>
   18974:	ldr	r2, [pc, #52]	; 189b0 <flatcc_builder_end_string@@Base+0x1ac>
   18978:	ldr	r1, [pc, #36]	; 189a4 <flatcc_builder_end_string@@Base+0x1a0>
   1897c:	ldr	r0, [pc, #48]	; 189b4 <flatcc_builder_end_string@@Base+0x1b0>
   18980:	bl	124d8 <__assert_fail@plt>
   18984:	ldr	r3, [pc, #32]	; 189ac <flatcc_builder_end_string@@Base+0x1a8>
   18988:	ldr	r2, [pc, #40]	; 189b8 <flatcc_builder_end_string@@Base+0x1b4>
   1898c:	ldr	r1, [pc, #16]	; 189a4 <flatcc_builder_end_string@@Base+0x1a0>
   18990:	ldr	r0, [pc, #36]	; 189bc <flatcc_builder_end_string@@Base+0x1b8>
   18994:	bl	124d8 <__assert_fail@plt>
   18998:	andeq	r0, r2, ip, asr #27
   1899c:	andeq	r0, r2, r0, asr sp
   189a0:	andeq	r0, r0, fp, lsl #5
   189a4:	andeq	r1, r2, r4, lsl #9
   189a8:	andeq	r1, r2, r4, asr #10
   189ac:	andeq	r1, r2, r8, lsr #7
   189b0:	andeq	r0, r0, r5, asr #13
   189b4:	andeq	r1, r2, r4, asr #15
   189b8:	andeq	r0, r0, r4, asr #13
   189bc:	andeq	r1, r2, r4, lsl #10

000189c0 <flatcc_builder_string_edit@@Base>:
   189c0:	ldr	r0, [r0, #16]
   189c4:	bx	lr

000189c8 <flatcc_builder_string_len@@Base>:
   189c8:	ldr	r3, [r0, #32]
   189cc:	ldr	r0, [r3, #20]
   189d0:	bx	lr

000189d4 <flatcc_builder_table_add@@Base>:
   189d4:	push	{r4, r5, r6, r7, r8, r9, lr}
   189d8:	mov	r4, r0
   189dc:	ldr	r0, [r0, #32]
   189e0:	sub	sp, sp, #12
   189e4:	ldrh	r0, [r0, #14]
   189e8:	cmp	r0, #3
   189ec:	bne	18b28 <flatcc_builder_table_add@@Base+0x154>
   189f0:	ldr	r0, [pc, #324]	; 18b3c <flatcc_builder_table_add@@Base+0x168>
   189f4:	cmp	r1, r0
   189f8:	bhi	18b14 <flatcc_builder_table_add@@Base+0x140>
   189fc:	ldrh	r0, [r4, #130]	; 0x82
   18a00:	lsl	r7, r1, #1
   18a04:	cmp	r0, r3
   18a08:	ldr	r0, [r4, #4]
   18a0c:	strhcc	r3, [r4, #130]	; 0x82
   18a10:	add	lr, r0, r7
   18a14:	ldrh	r6, [r0, r7]
   18a18:	cmp	r6, #0
   18a1c:	bne	18b00 <flatcc_builder_table_add@@Base+0x12c>
   18a20:	ldr	ip, [r4, #12]
   18a24:	ldr	r9, [pc, #276]	; 18b40 <flatcc_builder_table_add@@Base+0x16c>
   18a28:	eor	ip, ip, r1
   18a2c:	uxth	r5, r1
   18a30:	mul	r1, r9, ip
   18a34:	ldr	r0, [r4, #20]
   18a38:	eor	r1, r1, r2
   18a3c:	sub	r8, r3, #1
   18a40:	add	r8, r8, r0
   18a44:	rsb	r3, r3, #0
   18a48:	and	r8, r8, r3
   18a4c:	mul	r1, r9, r1
   18a50:	ldr	r3, [r4, #24]
   18a54:	add	r2, r2, r8
   18a58:	cmp	r2, r3
   18a5c:	str	r1, [r4, #12]
   18a60:	str	r2, [r4, #20]
   18a64:	bcs	18a90 <flatcc_builder_table_add@@Base+0xbc>
   18a68:	ldr	r0, [r4, #16]
   18a6c:	add	r3, r8, #4
   18a70:	strh	r3, [lr]
   18a74:	ldrh	r3, [r4, #8]
   18a78:	add	r0, r0, r8
   18a7c:	cmp	r3, r5
   18a80:	addls	r5, r5, #1
   18a84:	strhls	r5, [r4, #8]
   18a88:	add	sp, sp, #12
   18a8c:	pop	{r4, r5, r6, r7, r8, r9, pc}
   18a90:	ldr	r1, [r4, #28]
   18a94:	mov	r3, #1
   18a98:	add	r1, r1, #1
   18a9c:	ldr	r0, [r4, #40]	; 0x28
   18aa0:	add	r2, r1, r2
   18aa4:	str	r3, [sp]
   18aa8:	add	r1, r4, #60	; 0x3c
   18aac:	ldr	r9, [r4, #48]	; 0x30
   18ab0:	blx	r9
   18ab4:	cmp	r0, #0
   18ab8:	bne	18af8 <flatcc_builder_table_add@@Base+0x124>
   18abc:	ldr	r6, [r4, #28]
   18ac0:	ldr	r3, [r4, #64]	; 0x40
   18ac4:	ldr	r2, [pc, #120]	; 18b44 <flatcc_builder_table_add@@Base+0x170>
   18ac8:	sub	r3, r3, r6
   18acc:	ldr	r0, [r4, #60]	; 0x3c
   18ad0:	ldr	r1, [r4, #32]
   18ad4:	ldr	lr, [r4, #4]
   18ad8:	cmp	r3, r2
   18adc:	add	r0, r0, r6
   18ae0:	movcs	r3, r2
   18ae4:	str	r0, [r4, #16]
   18ae8:	str	r3, [r4, #24]
   18aec:	add	lr, lr, r7
   18af0:	str	r2, [r1, #4]
   18af4:	b	18a6c <flatcc_builder_table_add@@Base+0x98>
   18af8:	mov	r0, r6
   18afc:	b	18a88 <flatcc_builder_table_add@@Base+0xb4>
   18b00:	ldr	r3, [pc, #64]	; 18b48 <flatcc_builder_table_add@@Base+0x174>
   18b04:	ldr	r2, [pc, #64]	; 18b4c <flatcc_builder_table_add@@Base+0x178>
   18b08:	ldr	r1, [pc, #64]	; 18b50 <flatcc_builder_table_add@@Base+0x17c>
   18b0c:	ldr	r0, [pc, #64]	; 18b54 <flatcc_builder_table_add@@Base+0x180>
   18b10:	bl	124d8 <__assert_fail@plt>
   18b14:	ldr	r3, [pc, #44]	; 18b48 <flatcc_builder_table_add@@Base+0x174>
   18b18:	ldr	r2, [pc, #56]	; 18b58 <flatcc_builder_table_add@@Base+0x184>
   18b1c:	ldr	r1, [pc, #44]	; 18b50 <flatcc_builder_table_add@@Base+0x17c>
   18b20:	ldr	r0, [pc, #52]	; 18b5c <flatcc_builder_table_add@@Base+0x188>
   18b24:	bl	124d8 <__assert_fail@plt>
   18b28:	ldr	r3, [pc, #24]	; 18b48 <flatcc_builder_table_add@@Base+0x174>
   18b2c:	ldr	r2, [pc, #44]	; 18b60 <flatcc_builder_table_add@@Base+0x18c>
   18b30:	ldr	r1, [pc, #24]	; 18b50 <flatcc_builder_table_add@@Base+0x17c>
   18b34:	ldr	r0, [pc, #40]	; 18b64 <flatcc_builder_table_add@@Base+0x190>
   18b38:	bl	124d8 <__assert_fail@plt>
   18b3c:	strdeq	r7, [r0], -ip
   18b40:			; <UNDEFINED> instruction: 0x9e3779b1
   18b44:	strdeq	pc, [r0], -ip
   18b48:	andeq	r1, r2, r4, asr #7
   18b4c:	strdeq	r0, [r0], -r8
   18b50:	andeq	r1, r2, r4, lsl #9
   18b54:	andeq	r1, r2, r4, asr #10
   18b58:	andeq	r0, r0, lr, ror #13
   18b5c:	andeq	r1, r2, r8, ror #15
   18b60:	andeq	r0, r0, sp, ror #13
   18b64:	andeq	r1, r2, r0, asr r7

00018b68 <flatcc_builder_table_edit@@Base>:
   18b68:	ldr	r3, [r0, #32]
   18b6c:	ldrh	r3, [r3, #14]
   18b70:	cmp	r3, #3
   18b74:	bne	18b8c <flatcc_builder_table_edit@@Base+0x24>
   18b78:	ldr	r3, [r0, #20]
   18b7c:	ldr	r0, [r0, #16]
   18b80:	sub	r1, r3, r1
   18b84:	add	r0, r0, r1
   18b88:	bx	lr
   18b8c:	push	{r4, lr}
   18b90:	ldr	r3, [pc, #12]	; 18ba4 <flatcc_builder_table_edit@@Base+0x3c>
   18b94:	ldr	r2, [pc, #12]	; 18ba8 <flatcc_builder_table_edit@@Base+0x40>
   18b98:	ldr	r1, [pc, #12]	; 18bac <flatcc_builder_table_edit@@Base+0x44>
   18b9c:	ldr	r0, [pc, #12]	; 18bb0 <flatcc_builder_table_edit@@Base+0x48>
   18ba0:	bl	124d8 <__assert_fail@plt>
   18ba4:	andeq	r1, r2, r0, ror #7
   18ba8:	andeq	r0, r0, r2, lsl #14
   18bac:	andeq	r1, r2, r4, lsl #9
   18bb0:	andeq	r1, r2, r0, asr r7

00018bb4 <flatcc_builder_table_add_copy@@Base>:
   18bb4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   18bb8:	mov	r4, r0
   18bbc:	ldr	r0, [r0, #32]
   18bc0:	mov	r7, r3
   18bc4:	sub	sp, sp, #12
   18bc8:	ldrh	r3, [r0, #14]
   18bcc:	ldrh	ip, [sp, #48]	; 0x30
   18bd0:	cmp	r3, #3
   18bd4:	bne	18d30 <flatcc_builder_table_add_copy@@Base+0x17c>
   18bd8:	ldr	r3, [pc, #356]	; 18d44 <flatcc_builder_table_add_copy@@Base+0x190>
   18bdc:	cmp	r1, r3
   18be0:	bhi	18d1c <flatcc_builder_table_add_copy@@Base+0x168>
   18be4:	ldrh	r3, [r4, #130]	; 0x82
   18be8:	lsl	sl, r1, #1
   18bec:	mov	r8, r2
   18bf0:	cmp	r3, ip
   18bf4:	ldr	r3, [r4, #4]
   18bf8:	strhcc	ip, [r4, #130]	; 0x82
   18bfc:	add	r0, r3, sl
   18c00:	ldrh	r5, [r3, sl]
   18c04:	cmp	r5, #0
   18c08:	bne	18d08 <flatcc_builder_table_add_copy@@Base+0x154>
   18c0c:	ldr	r2, [r4, #12]
   18c10:	ldr	lr, [pc, #304]	; 18d48 <flatcc_builder_table_add_copy@@Base+0x194>
   18c14:	eor	r2, r2, r1
   18c18:	ldr	r6, [r4, #20]
   18c1c:	mul	r2, lr, r2
   18c20:	sub	r3, ip, #1
   18c24:	eor	r2, r2, r7
   18c28:	add	r3, r3, r6
   18c2c:	rsb	ip, ip, #0
   18c30:	and	r6, r3, ip
   18c34:	mul	lr, lr, r2
   18c38:	ldr	r3, [r4, #24]
   18c3c:	uxth	r9, r1
   18c40:	add	r1, r7, r6
   18c44:	cmp	r1, r3
   18c48:	str	lr, [r4, #12]
   18c4c:	str	r1, [r4, #20]
   18c50:	bcs	18c98 <flatcc_builder_table_add_copy@@Base+0xe4>
   18c54:	ldr	r3, [r4, #16]
   18c58:	add	r2, r6, #4
   18c5c:	strh	r2, [r0]
   18c60:	ldrh	r2, [r4, #8]
   18c64:	cmp	r2, r9
   18c68:	addls	r9, r9, #1
   18c6c:	strhls	r9, [r4, #8]
   18c70:	adds	r3, r3, r6
   18c74:	beq	18c8c <flatcc_builder_table_add_copy@@Base+0xd8>
   18c78:	mov	r0, r3
   18c7c:	mov	r2, r7
   18c80:	mov	r1, r8
   18c84:	bl	12430 <memcpy@plt>
   18c88:	mov	r3, r0
   18c8c:	mov	r0, r3
   18c90:	add	sp, sp, #12
   18c94:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   18c98:	ldr	r2, [r4, #28]
   18c9c:	mov	r3, #1
   18ca0:	add	r2, r2, #1
   18ca4:	ldr	r0, [r4, #40]	; 0x28
   18ca8:	add	r2, r2, r1
   18cac:	str	r3, [sp]
   18cb0:	add	r1, r4, #60	; 0x3c
   18cb4:	ldr	fp, [r4, #48]	; 0x30
   18cb8:	blx	fp
   18cbc:	cmp	r0, #0
   18cc0:	bne	18d00 <flatcc_builder_table_add_copy@@Base+0x14c>
   18cc4:	ldr	r0, [r4, #28]
   18cc8:	ldr	r2, [r4, #64]	; 0x40
   18ccc:	ldr	r1, [pc, #120]	; 18d4c <flatcc_builder_table_add_copy@@Base+0x198>
   18cd0:	ldr	r3, [r4, #60]	; 0x3c
   18cd4:	sub	r2, r2, r0
   18cd8:	ldr	ip, [r4, #32]
   18cdc:	add	r3, r3, r0
   18ce0:	cmp	r2, r1
   18ce4:	ldr	r0, [r4, #4]
   18ce8:	movcs	r2, r1
   18cec:	str	r3, [r4, #16]
   18cf0:	str	r2, [r4, #24]
   18cf4:	add	r0, r0, sl
   18cf8:	str	r1, [ip, #4]
   18cfc:	b	18c58 <flatcc_builder_table_add_copy@@Base+0xa4>
   18d00:	mov	r3, r5
   18d04:	b	18c8c <flatcc_builder_table_add_copy@@Base+0xd8>
   18d08:	ldr	r3, [pc, #64]	; 18d50 <flatcc_builder_table_add_copy@@Base+0x19c>
   18d0c:	ldr	r2, [pc, #64]	; 18d54 <flatcc_builder_table_add_copy@@Base+0x1a0>
   18d10:	ldr	r1, [pc, #64]	; 18d58 <flatcc_builder_table_add_copy@@Base+0x1a4>
   18d14:	ldr	r0, [pc, #64]	; 18d5c <flatcc_builder_table_add_copy@@Base+0x1a8>
   18d18:	bl	124d8 <__assert_fail@plt>
   18d1c:	ldr	r3, [pc, #44]	; 18d50 <flatcc_builder_table_add_copy@@Base+0x19c>
   18d20:	ldr	r2, [pc, #56]	; 18d60 <flatcc_builder_table_add_copy@@Base+0x1ac>
   18d24:	ldr	r1, [pc, #44]	; 18d58 <flatcc_builder_table_add_copy@@Base+0x1a4>
   18d28:	ldr	r0, [pc, #52]	; 18d64 <flatcc_builder_table_add_copy@@Base+0x1b0>
   18d2c:	bl	124d8 <__assert_fail@plt>
   18d30:	ldr	r3, [pc, #24]	; 18d50 <flatcc_builder_table_add_copy@@Base+0x19c>
   18d34:	ldr	r2, [pc, #44]	; 18d68 <flatcc_builder_table_add_copy@@Base+0x1b4>
   18d38:	ldr	r1, [pc, #24]	; 18d58 <flatcc_builder_table_add_copy@@Base+0x1a4>
   18d3c:	ldr	r0, [pc, #40]	; 18d6c <flatcc_builder_table_add_copy@@Base+0x1b8>
   18d40:	bl	124d8 <__assert_fail@plt>
   18d44:	strdeq	r7, [r0], -ip
   18d48:			; <UNDEFINED> instruction: 0x9e3779b1
   18d4c:	strdeq	pc, [r0], -ip
   18d50:	andeq	r1, r2, r4, asr #7
   18d54:	strdeq	r0, [r0], -r8
   18d58:	andeq	r1, r2, r4, lsl #9
   18d5c:	andeq	r1, r2, r4, asr #10
   18d60:	andeq	r0, r0, lr, ror #13
   18d64:	andeq	r1, r2, r8, ror #15
   18d68:	andeq	r0, r0, sp, ror #13
   18d6c:	andeq	r1, r2, r0, asr r7

00018d70 <flatcc_builder_table_add_offset@@Base>:
   18d70:	ldr	r3, [r0, #32]
   18d74:	push	{r4, r5, r6, r7, r8, r9, lr}
   18d78:	sub	sp, sp, #12
   18d7c:	ldrh	r3, [r3, #14]
   18d80:	cmp	r3, #3
   18d84:	bne	18ec0 <flatcc_builder_table_add_offset@@Base+0x150>
   18d88:	ldr	r3, [pc, #324]	; 18ed4 <flatcc_builder_table_add_offset@@Base+0x164>
   18d8c:	cmp	r1, r3
   18d90:	bhi	18eac <flatcc_builder_table_add_offset@@Base+0x13c>
   18d94:	ldr	r3, [r0, #4]
   18d98:	lsl	r7, r1, #1
   18d9c:	mov	r4, r0
   18da0:	ldrh	r6, [r3, r7]
   18da4:	add	ip, r3, r7
   18da8:	cmp	r6, #0
   18dac:	bne	18e98 <flatcc_builder_table_add_offset@@Base+0x128>
   18db0:	ldr	r3, [r0, #12]
   18db4:	ldr	r2, [pc, #284]	; 18ed8 <flatcc_builder_table_add_offset@@Base+0x168>
   18db8:	eor	r3, r3, r1
   18dbc:	ldr	r5, [r0, #20]
   18dc0:	mul	r3, r2, r3
   18dc4:	add	r5, r5, #3
   18dc8:	eor	r3, r3, #4
   18dcc:	ldr	r0, [r0, #24]
   18dd0:	mul	r3, r2, r3
   18dd4:	bic	r5, r5, #3
   18dd8:	add	r2, r5, #4
   18ddc:	cmp	r2, r0
   18de0:	uxth	r8, r1
   18de4:	str	r3, [r4, #12]
   18de8:	str	r2, [r4, #20]
   18dec:	bhi	18e2c <flatcc_builder_table_add_offset@@Base+0xbc>
   18df0:	ldr	r0, [r4, #16]
   18df4:	uxth	r2, r5
   18df8:	add	r3, r2, #4
   18dfc:	strh	r3, [ip]
   18e00:	ldrh	r3, [r4, #8]
   18e04:	add	r0, r0, r5
   18e08:	cmp	r3, r8
   18e0c:	ldr	r3, [r4]
   18e10:	addls	r1, r8, #1
   18e14:	strhls	r1, [r4, #8]
   18e18:	add	r1, r3, #2
   18e1c:	str	r1, [r4]
   18e20:	strh	r2, [r3]
   18e24:	add	sp, sp, #12
   18e28:	pop	{r4, r5, r6, r7, r8, r9, pc}
   18e2c:	ldr	r1, [r4, #28]
   18e30:	mov	r3, #1
   18e34:	ldr	r0, [r4, #40]	; 0x28
   18e38:	add	r2, r2, r1
   18e3c:	str	r3, [sp]
   18e40:	add	r1, r4, #60	; 0x3c
   18e44:	ldr	r9, [r4, #48]	; 0x30
   18e48:	blx	r9
   18e4c:	cmp	r0, #0
   18e50:	bne	18e90 <flatcc_builder_table_add_offset@@Base+0x120>
   18e54:	ldr	r6, [r4, #28]
   18e58:	ldr	r3, [r4, #64]	; 0x40
   18e5c:	ldr	r2, [pc, #120]	; 18edc <flatcc_builder_table_add_offset@@Base+0x16c>
   18e60:	sub	r3, r3, r6
   18e64:	ldr	r0, [r4, #60]	; 0x3c
   18e68:	ldr	r1, [r4, #32]
   18e6c:	ldr	ip, [r4, #4]
   18e70:	cmp	r3, r2
   18e74:	add	r0, r0, r6
   18e78:	movcs	r3, r2
   18e7c:	str	r0, [r4, #16]
   18e80:	str	r3, [r4, #24]
   18e84:	add	ip, ip, r7
   18e88:	str	r2, [r1, #4]
   18e8c:	b	18df4 <flatcc_builder_table_add_offset@@Base+0x84>
   18e90:	mov	r0, r6
   18e94:	b	18e24 <flatcc_builder_table_add_offset@@Base+0xb4>
   18e98:	ldr	r3, [pc, #64]	; 18ee0 <flatcc_builder_table_add_offset@@Base+0x170>
   18e9c:	ldr	r2, [pc, #64]	; 18ee4 <flatcc_builder_table_add_offset@@Base+0x174>
   18ea0:	ldr	r1, [pc, #64]	; 18ee8 <flatcc_builder_table_add_offset@@Base+0x178>
   18ea4:	ldr	r0, [pc, #64]	; 18eec <flatcc_builder_table_add_offset@@Base+0x17c>
   18ea8:	bl	124d8 <__assert_fail@plt>
   18eac:	ldr	r3, [pc, #44]	; 18ee0 <flatcc_builder_table_add_offset@@Base+0x170>
   18eb0:	ldr	r2, [pc, #56]	; 18ef0 <flatcc_builder_table_add_offset@@Base+0x180>
   18eb4:	ldr	r1, [pc, #44]	; 18ee8 <flatcc_builder_table_add_offset@@Base+0x178>
   18eb8:	ldr	r0, [pc, #52]	; 18ef4 <flatcc_builder_table_add_offset@@Base+0x184>
   18ebc:	bl	124d8 <__assert_fail@plt>
   18ec0:	ldr	r3, [pc, #24]	; 18ee0 <flatcc_builder_table_add_offset@@Base+0x170>
   18ec4:	ldr	r2, [pc, #44]	; 18ef8 <flatcc_builder_table_add_offset@@Base+0x188>
   18ec8:	ldr	r1, [pc, #24]	; 18ee8 <flatcc_builder_table_add_offset@@Base+0x178>
   18ecc:	ldr	r0, [pc, #40]	; 18efc <flatcc_builder_table_add_offset@@Base+0x18c>
   18ed0:	bl	124d8 <__assert_fail@plt>
   18ed4:	strdeq	r7, [r0], -ip
   18ed8:			; <UNDEFINED> instruction: 0x9e3779b1
   18edc:	strdeq	pc, [r0], -ip
   18ee0:	strdeq	r1, [r2], -ip
   18ee4:	andeq	r0, r0, fp, lsl r7
   18ee8:	andeq	r1, r2, r4, lsl #9
   18eec:	andeq	r1, r2, r4, asr #10
   18ef0:	andeq	r0, r0, r4, lsl r7
   18ef4:	andeq	r1, r2, r8, ror #15
   18ef8:	andeq	r0, r0, r3, lsl r7
   18efc:	andeq	r1, r2, r0, asr r7

00018f00 <flatcc_builder_table_add_union@@Base>:
   18f00:	push	{r4, r5, r6, r7, r8, r9, lr}
   18f04:	sub	sp, sp, #20
   18f08:	add	ip, sp, #16
   18f0c:	stmdb	ip, {r2, r3}
   18f10:	ldr	r3, [r0, #32]
   18f14:	ldrb	r6, [sp, #8]
   18f18:	ldr	r5, [sp, #12]
   18f1c:	ldrh	r3, [r3, #14]
   18f20:	cmp	r3, #3
   18f24:	bne	190b0 <flatcc_builder_table_add_union@@Base+0x1b0>
   18f28:	cmp	r6, #0
   18f2c:	mov	r4, r0
   18f30:	mov	r7, r1
   18f34:	beq	19004 <flatcc_builder_table_add_union@@Base+0x104>
   18f38:	cmp	r5, #0
   18f3c:	beq	18f60 <flatcc_builder_table_add_union@@Base+0x60>
   18f40:	bl	18d70 <flatcc_builder_table_add_offset@@Base>
   18f44:	cmp	r0, #0
   18f48:	beq	190ec <flatcc_builder_table_add_union@@Base+0x1ec>
   18f4c:	ldr	r3, [r4, #32]
   18f50:	str	r5, [r0]
   18f54:	ldrh	r3, [r3, #14]
   18f58:	cmp	r3, #3
   18f5c:	bne	190c4 <flatcc_builder_table_add_union@@Base+0x1c4>
   18f60:	ldr	r3, [pc, #408]	; 19100 <flatcc_builder_table_add_union@@Base+0x200>
   18f64:	sub	r1, r7, #1
   18f68:	cmp	r1, r3
   18f6c:	bhi	190d8 <flatcc_builder_table_add_union@@Base+0x1d8>
   18f70:	ldrh	r3, [r4, #130]	; 0x82
   18f74:	lsl	r5, r1, #1
   18f78:	cmp	r3, #0
   18f7c:	moveq	r3, #1
   18f80:	strheq	r3, [r4, #130]	; 0x82
   18f84:	ldr	r3, [r4, #4]
   18f88:	add	r0, r3, r5
   18f8c:	ldrh	r3, [r3, r5]
   18f90:	cmp	r3, #0
   18f94:	bne	1909c <flatcc_builder_table_add_union@@Base+0x19c>
   18f98:	ldr	r3, [r4, #12]
   18f9c:	ldr	r2, [pc, #352]	; 19104 <flatcc_builder_table_add_union@@Base+0x204>
   18fa0:	eor	r3, r3, r1
   18fa4:	ldr	r7, [r4, #20]
   18fa8:	mul	r3, r2, r3
   18fac:	uxth	r8, r1
   18fb0:	eor	r3, r3, #1
   18fb4:	ldr	r1, [r4, #24]
   18fb8:	mul	r3, r2, r3
   18fbc:	add	r2, r7, #1
   18fc0:	cmp	r2, r1
   18fc4:	str	r3, [r4, #12]
   18fc8:	str	r2, [r4, #20]
   18fcc:	bcs	19020 <flatcc_builder_table_add_union@@Base+0x120>
   18fd0:	ldr	r3, [r4, #16]
   18fd4:	add	r2, r7, #4
   18fd8:	strh	r2, [r0]
   18fdc:	ldrh	r2, [r4, #8]
   18fe0:	cmp	r2, r8
   18fe4:	addls	r1, r8, #1
   18fe8:	strhls	r1, [r4, #8]
   18fec:	cmn	r3, r7
   18ff0:	beq	19088 <flatcc_builder_table_add_union@@Base+0x188>
   18ff4:	mov	r0, #0
   18ff8:	strb	r6, [r3, r7]
   18ffc:	add	sp, sp, #20
   19000:	pop	{r4, r5, r6, r7, r8, r9, pc}
   19004:	cmp	r5, #0
   19008:	beq	18f60 <flatcc_builder_table_add_union@@Base+0x60>
   1900c:	ldr	r3, [pc, #244]	; 19108 <flatcc_builder_table_add_union@@Base+0x208>
   19010:	ldr	r2, [pc, #244]	; 1910c <flatcc_builder_table_add_union@@Base+0x20c>
   19014:	ldr	r1, [pc, #244]	; 19110 <flatcc_builder_table_add_union@@Base+0x210>
   19018:	ldr	r0, [pc, #244]	; 19114 <flatcc_builder_table_add_union@@Base+0x214>
   1901c:	bl	124d8 <__assert_fail@plt>
   19020:	ldr	r2, [r4, #28]
   19024:	mov	r3, #1
   19028:	add	r2, r7, r2
   1902c:	ldr	r0, [r4, #40]	; 0x28
   19030:	add	r2, r2, #2
   19034:	str	r3, [sp]
   19038:	add	r1, r4, #60	; 0x3c
   1903c:	ldr	r9, [r4, #48]	; 0x30
   19040:	blx	r9
   19044:	cmp	r0, #0
   19048:	bne	19088 <flatcc_builder_table_add_union@@Base+0x188>
   1904c:	ldr	r0, [r4, #28]
   19050:	ldr	r2, [r4, #64]	; 0x40
   19054:	ldr	r1, [pc, #188]	; 19118 <flatcc_builder_table_add_union@@Base+0x218>
   19058:	ldr	r3, [r4, #60]	; 0x3c
   1905c:	sub	r2, r2, r0
   19060:	ldr	ip, [r4, #32]
   19064:	add	r3, r3, r0
   19068:	cmp	r2, r1
   1906c:	ldr	r0, [r4, #4]
   19070:	movcs	r2, r1
   19074:	str	r3, [r4, #16]
   19078:	str	r2, [r4, #24]
   1907c:	add	r0, r0, r5
   19080:	str	r1, [ip, #4]
   19084:	b	18fd4 <flatcc_builder_table_add_union@@Base+0xd4>
   19088:	ldr	r3, [pc, #120]	; 19108 <flatcc_builder_table_add_union@@Base+0x208>
   1908c:	ldr	r2, [pc, #136]	; 1911c <flatcc_builder_table_add_union@@Base+0x21c>
   19090:	ldr	r1, [pc, #120]	; 19110 <flatcc_builder_table_add_union@@Base+0x210>
   19094:	ldr	r0, [pc, #132]	; 19120 <flatcc_builder_table_add_union@@Base+0x220>
   19098:	bl	124d8 <__assert_fail@plt>
   1909c:	ldr	r3, [pc, #128]	; 19124 <flatcc_builder_table_add_union@@Base+0x224>
   190a0:	ldr	r2, [pc, #128]	; 19128 <flatcc_builder_table_add_union@@Base+0x228>
   190a4:	ldr	r1, [pc, #100]	; 19110 <flatcc_builder_table_add_union@@Base+0x210>
   190a8:	ldr	r0, [pc, #124]	; 1912c <flatcc_builder_table_add_union@@Base+0x22c>
   190ac:	bl	124d8 <__assert_fail@plt>
   190b0:	ldr	r3, [pc, #80]	; 19108 <flatcc_builder_table_add_union@@Base+0x208>
   190b4:	ldr	r2, [pc, #116]	; 19130 <flatcc_builder_table_add_union@@Base+0x230>
   190b8:	ldr	r1, [pc, #80]	; 19110 <flatcc_builder_table_add_union@@Base+0x210>
   190bc:	ldr	r0, [pc, #112]	; 19134 <flatcc_builder_table_add_union@@Base+0x234>
   190c0:	bl	124d8 <__assert_fail@plt>
   190c4:	ldr	r3, [pc, #88]	; 19124 <flatcc_builder_table_add_union@@Base+0x224>
   190c8:	ldr	r2, [pc, #104]	; 19138 <flatcc_builder_table_add_union@@Base+0x238>
   190cc:	ldr	r1, [pc, #60]	; 19110 <flatcc_builder_table_add_union@@Base+0x210>
   190d0:	ldr	r0, [pc, #92]	; 19134 <flatcc_builder_table_add_union@@Base+0x234>
   190d4:	bl	124d8 <__assert_fail@plt>
   190d8:	ldr	r3, [pc, #68]	; 19124 <flatcc_builder_table_add_union@@Base+0x224>
   190dc:	ldr	r2, [pc, #88]	; 1913c <flatcc_builder_table_add_union@@Base+0x23c>
   190e0:	ldr	r1, [pc, #40]	; 19110 <flatcc_builder_table_add_union@@Base+0x210>
   190e4:	ldr	r0, [pc, #84]	; 19140 <flatcc_builder_table_add_union@@Base+0x240>
   190e8:	bl	124d8 <__assert_fail@plt>
   190ec:	ldr	r3, [pc, #20]	; 19108 <flatcc_builder_table_add_union@@Base+0x208>
   190f0:	ldr	r2, [pc, #76]	; 19144 <flatcc_builder_table_add_union@@Base+0x244>
   190f4:	ldr	r1, [pc, #20]	; 19110 <flatcc_builder_table_add_union@@Base+0x210>
   190f8:	ldr	r0, [pc, #72]	; 19148 <flatcc_builder_table_add_union@@Base+0x248>
   190fc:	bl	124d8 <__assert_fail@plt>
   19100:	strdeq	r7, [r0], -ip
   19104:			; <UNDEFINED> instruction: 0x9e3779b1
   19108:	andeq	r1, r2, ip, lsl r4
   1910c:	andeq	r0, r0, pc, ror #11
   19110:	andeq	r1, r2, r4, lsl #9
   19114:	andeq	r1, r2, ip, lsr #16
   19118:	strdeq	pc, [r0], -ip
   1911c:	strdeq	r0, [r0], -r6
   19120:	andeq	r1, r2, ip, asr r8
   19124:	andeq	r1, r2, r4, asr #7
   19128:	strdeq	r0, [r0], -r8
   1912c:	andeq	r1, r2, r4, asr #10
   19130:	andeq	r0, r0, lr, ror #11
   19134:	andeq	r1, r2, r0, asr r7
   19138:	andeq	r0, r0, sp, ror #13
   1913c:	andeq	r0, r0, lr, ror #13
   19140:	andeq	r1, r2, r8, ror #15
   19144:	strdeq	r0, [r0], -r2
   19148:	andeq	r1, r2, r0, asr r8

0001914c <flatcc_builder_table_add_union_vector@@Base>:
   1914c:	push	{r4, r5, r6, r7, lr}
   19150:	sub	sp, sp, #12
   19154:	add	ip, sp, #8
   19158:	stmdb	ip, {r2, r3}
   1915c:	ldr	r3, [r0, #32]
   19160:	ldr	r4, [sp]
   19164:	ldr	r6, [sp, #4]
   19168:	ldrh	r3, [r3, #14]
   1916c:	cmp	r3, #3
   19170:	bne	19200 <flatcc_builder_table_add_union_vector@@Base+0xb4>
   19174:	clz	r3, r6
   19178:	clz	r2, r4
   1917c:	lsr	r3, r3, #5
   19180:	lsr	r2, r2, #5
   19184:	cmp	r2, r3
   19188:	beq	191a8 <flatcc_builder_table_add_union_vector@@Base+0x5c>
   1918c:	adds	r4, r4, #0
   19190:	movne	r4, #1
   19194:	cmp	r4, r3
   19198:	mvnne	r0, #0
   1919c:	beq	19214 <flatcc_builder_table_add_union_vector@@Base+0xc8>
   191a0:	add	sp, sp, #12
   191a4:	pop	{r4, r5, r6, r7, pc}
   191a8:	cmp	r4, #0
   191ac:	moveq	r0, r4
   191b0:	beq	191a0 <flatcc_builder_table_add_union_vector@@Base+0x54>
   191b4:	mov	r7, r1
   191b8:	sub	r1, r1, #1
   191bc:	mov	r5, r0
   191c0:	bl	18d70 <flatcc_builder_table_add_offset@@Base>
   191c4:	cmp	r0, #0
   191c8:	beq	19228 <flatcc_builder_table_add_union_vector@@Base+0xdc>
   191cc:	str	r4, [r0]
   191d0:	mov	r1, r7
   191d4:	mov	r0, r5
   191d8:	bl	18d70 <flatcc_builder_table_add_offset@@Base>
   191dc:	cmp	r0, #0
   191e0:	strne	r6, [r0]
   191e4:	movne	r0, #0
   191e8:	bne	191a0 <flatcc_builder_table_add_union_vector@@Base+0x54>
   191ec:	ldr	r3, [pc, #72]	; 1923c <flatcc_builder_table_add_union_vector@@Base+0xf0>
   191f0:	ldr	r2, [pc, #72]	; 19240 <flatcc_builder_table_add_union_vector@@Base+0xf4>
   191f4:	ldr	r1, [pc, #72]	; 19244 <flatcc_builder_table_add_union_vector@@Base+0xf8>
   191f8:	ldr	r0, [pc, #72]	; 19248 <flatcc_builder_table_add_union_vector@@Base+0xfc>
   191fc:	bl	124d8 <__assert_fail@plt>
   19200:	ldr	r3, [pc, #52]	; 1923c <flatcc_builder_table_add_union_vector@@Base+0xf0>
   19204:	mov	r2, #1536	; 0x600
   19208:	ldr	r1, [pc, #52]	; 19244 <flatcc_builder_table_add_union_vector@@Base+0xf8>
   1920c:	ldr	r0, [pc, #56]	; 1924c <flatcc_builder_table_add_union_vector@@Base+0x100>
   19210:	bl	124d8 <__assert_fail@plt>
   19214:	ldr	r3, [pc, #32]	; 1923c <flatcc_builder_table_add_union_vector@@Base+0xf0>
   19218:	ldr	r2, [pc, #48]	; 19250 <flatcc_builder_table_add_union_vector@@Base+0x104>
   1921c:	ldr	r1, [pc, #32]	; 19244 <flatcc_builder_table_add_union_vector@@Base+0xf8>
   19220:	ldr	r0, [pc, #44]	; 19254 <flatcc_builder_table_add_union_vector@@Base+0x108>
   19224:	bl	124d8 <__assert_fail@plt>
   19228:	ldr	r3, [pc, #12]	; 1923c <flatcc_builder_table_add_union_vector@@Base+0xf0>
   1922c:	ldr	r2, [pc, #36]	; 19258 <flatcc_builder_table_add_union_vector@@Base+0x10c>
   19230:	ldr	r1, [pc, #12]	; 19244 <flatcc_builder_table_add_union_vector@@Base+0xf8>
   19234:	ldr	r0, [pc, #12]	; 19248 <flatcc_builder_table_add_union_vector@@Base+0xfc>
   19238:	bl	124d8 <__assert_fail@plt>
   1923c:	andeq	r1, r2, ip, lsr r4
   19240:	andeq	r0, r0, r8, lsl #12
   19244:	andeq	r1, r2, r4, lsl #9
   19248:	andeq	r1, r2, r0, asr r8
   1924c:	andeq	r1, r2, r0, asr r7
   19250:	andeq	r0, r0, r1, lsl #12
   19254:	andeq	r1, r2, r8, ror #16
   19258:	andeq	r0, r0, r4, lsl #12

0001925c <flatcc_builder_push_buffer_alignment@@Base>:
   1925c:	mov	r3, r0
   19260:	mov	r2, #4
   19264:	ldrh	r0, [r0, #128]	; 0x80
   19268:	strh	r2, [r3, #128]	; 0x80
   1926c:	bx	lr

00019270 <flatcc_builder_pop_buffer_alignment@@Base>:
   19270:	ldrh	r3, [r0, #128]	; 0x80
   19274:	cmp	r3, r1
   19278:	strhcc	r1, [r0, #128]	; 0x80
   1927c:	bx	lr

00019280 <flatcc_builder_get_buffer_alignment@@Base>:
   19280:	ldrh	r0, [r0, #128]	; 0x80
   19284:	bx	lr

00019288 <flatcc_builder_set_vtable_clustering@@Base>:
   19288:	clz	r1, r1
   1928c:	lsr	r1, r1, #5
   19290:	str	r1, [r0, #180]	; 0xb4
   19294:	bx	lr

00019298 <flatcc_builder_set_block_align@@Base>:
   19298:	strh	r1, [r0, #132]	; 0x84
   1929c:	bx	lr

000192a0 <flatcc_builder_get_level@@Base>:
   192a0:	ldr	r0, [r0, #156]	; 0x9c
   192a4:	bx	lr

000192a8 <flatcc_builder_set_max_level@@Base>:
   192a8:	ldr	r3, [r0, #160]	; 0xa0
   192ac:	str	r1, [r0, #176]	; 0xb0
   192b0:	cmp	r1, r3
   192b4:	strgt	r1, [r0, #160]	; 0xa0
   192b8:	bx	lr

000192bc <flatcc_builder_get_buffer_size@@Base>:
   192bc:	ldr	r2, [r0, #140]	; 0x8c
   192c0:	ldr	r0, [r0, #136]	; 0x88
   192c4:	sub	r0, r2, r0
   192c8:	bx	lr

000192cc <flatcc_builder_get_buffer_start@@Base>:
   192cc:	ldr	r0, [r0, #136]	; 0x88
   192d0:	bx	lr

000192d4 <flatcc_builder_get_buffer_end@@Base>:
   192d4:	ldr	r0, [r0, #140]	; 0x8c
   192d8:	bx	lr

000192dc <flatcc_builder_set_vtable_cache_limit@@Base>:
   192dc:	str	r1, [r0, #172]	; 0xac
   192e0:	bx	lr

000192e4 <flatcc_builder_set_identifier@@Base>:
   192e4:	ldr	r3, [pc, #16]	; 192fc <flatcc_builder_set_identifier@@Base+0x18>
   192e8:	cmp	r1, #0
   192ec:	moveq	r1, r3
   192f0:	ldr	r3, [r1]
   192f4:	str	r3, [r0, #168]	; 0xa8
   192f8:	bx	lr
   192fc:	andeq	r0, r2, ip, asr #27

00019300 <flatcc_builder_get_type@@Base>:
   19300:	ldr	r0, [r0, #32]
   19304:	cmp	r0, #0
   19308:	ldrhne	r0, [r0, #14]
   1930c:	bx	lr

00019310 <flatcc_builder_get_type_at@@Base>:
   19310:	cmp	r1, #0
   19314:	ble	1933c <flatcc_builder_get_type_at@@Base+0x2c>
   19318:	ldr	r3, [r0, #156]	; 0x9c
   1931c:	cmp	r1, r3
   19320:	bgt	1933c <flatcc_builder_get_type_at@@Base+0x2c>
   19324:	sub	r1, r1, r3
   19328:	ldr	r3, [r0, #32]
   1932c:	add	r1, r1, r1, lsl #3
   19330:	add	r1, r3, r1, lsl #2
   19334:	ldrh	r0, [r1, #14]
   19338:	bx	lr
   1933c:	mov	r0, #0
   19340:	bx	lr

00019344 <flatcc_builder_get_direct_buffer@@Base>:
   19344:	ldr	r3, [r0, #184]	; 0xb8
   19348:	cmp	r3, #0
   1934c:	beq	19360 <flatcc_builder_get_direct_buffer@@Base+0x1c>
   19350:	ldr	r2, [r0, #188]	; 0xbc
   19354:	ldr	r3, [r0, #192]	; 0xc0
   19358:	cmp	r2, r3
   1935c:	beq	19374 <flatcc_builder_get_direct_buffer@@Base+0x30>
   19360:	cmp	r1, #0
   19364:	movne	r0, #0
   19368:	strne	r0, [r1]
   1936c:	moveq	r0, r1
   19370:	bx	lr
   19374:	cmp	r1, #0
   19378:	ldrne	r3, [r0, #212]	; 0xd4
   1937c:	ldr	r0, [r0, #196]	; 0xc4
   19380:	strne	r3, [r1]
   19384:	bx	lr

00019388 <flatcc_builder_copy_buffer@@Base>:
   19388:	ldr	r3, [r0, #184]	; 0xb8
   1938c:	cmp	r3, #0
   19390:	beq	193ac <flatcc_builder_copy_buffer@@Base+0x24>
   19394:	push	{r4, lr}
   19398:	add	r0, r0, #188	; 0xbc
   1939c:	bl	19a60 <flatcc_emitter_copy_buffer@@Base>
   193a0:	cmp	r0, #0
   193a4:	popne	{r4, pc}
   193a8:	bl	125d0 <__assert_fail@plt+0xf8>
   193ac:	mov	r0, r3
   193b0:	bx	lr

000193b4 <flatcc_builder_finalize_buffer@@Base>:
   193b4:	push	{r4, r5, r6, lr}
   193b8:	cmp	r1, #0
   193bc:	ldr	r4, [r0, #140]	; 0x8c
   193c0:	ldr	r2, [r0, #136]	; 0x88
   193c4:	mov	r5, r0
   193c8:	sub	r4, r4, r2
   193cc:	strne	r4, [r1]
   193d0:	mov	r0, r4
   193d4:	bl	12460 <malloc@plt>
   193d8:	subs	r6, r0, #0
   193dc:	beq	19420 <flatcc_builder_finalize_buffer@@Base+0x6c>
   193e0:	ldr	r3, [r5, #184]	; 0xb8
   193e4:	cmp	r3, #0
   193e8:	beq	1940c <flatcc_builder_finalize_buffer@@Base+0x58>
   193ec:	mov	r2, r4
   193f0:	add	r0, r5, #188	; 0xbc
   193f4:	mov	r1, r6
   193f8:	bl	19a60 <flatcc_emitter_copy_buffer@@Base>
   193fc:	cmp	r0, #0
   19400:	beq	19434 <flatcc_builder_finalize_buffer@@Base+0x80>
   19404:	mov	r0, r6
   19408:	pop	{r4, r5, r6, pc}
   1940c:	ldr	r3, [pc, #36]	; 19438 <flatcc_builder_finalize_buffer@@Base+0x84>
   19410:	ldr	r2, [pc, #36]	; 1943c <flatcc_builder_finalize_buffer@@Base+0x88>
   19414:	ldr	r1, [pc, #36]	; 19440 <flatcc_builder_finalize_buffer@@Base+0x8c>
   19418:	ldr	r0, [pc, #36]	; 19444 <flatcc_builder_finalize_buffer@@Base+0x90>
   1941c:	bl	124d8 <__assert_fail@plt>
   19420:	ldr	r3, [pc, #16]	; 19438 <flatcc_builder_finalize_buffer@@Base+0x84>
   19424:	ldr	r2, [pc, #28]	; 19448 <flatcc_builder_finalize_buffer@@Base+0x94>
   19428:	ldr	r1, [pc, #16]	; 19440 <flatcc_builder_finalize_buffer@@Base+0x8c>
   1942c:	ldr	r0, [pc, #16]	; 19444 <flatcc_builder_finalize_buffer@@Base+0x90>
   19430:	bl	124d8 <__assert_fail@plt>
   19434:	bl	125d0 <__assert_fail@plt+0xf8>
   19438:	andeq	r1, r2, r4, ror #8
   1943c:	muleq	r0, ip, r7
   19440:	andeq	r1, r2, r4, lsl #9
   19444:	andeq	r1, r2, r4, asr #10
   19448:	muleq	r0, r8, r7

0001944c <flatcc_builder_finalize_aligned_buffer@@Base>:
   1944c:	push	{r4, r5, r6, r7, lr}
   19450:	subs	r7, r1, #0
   19454:	ldrh	r1, [r0, #128]	; 0x80
   19458:	ldr	r4, [r0, #140]	; 0x8c
   1945c:	ldr	r3, [r0, #136]	; 0x88
   19460:	sub	sp, sp, #12
   19464:	sub	r3, r4, r3
   19468:	sub	r4, r1, #1
   1946c:	strne	r3, [r7]
   19470:	add	r4, r4, r3
   19474:	mov	r5, r0
   19478:	rsb	r3, r1, #0
   1947c:	add	r0, sp, #8
   19480:	cmp	r1, #4
   19484:	mov	ip, #0
   19488:	and	r4, r4, r3
   1948c:	movcc	r1, #4
   19490:	mov	r2, r4
   19494:	str	ip, [r0, #-4]!
   19498:	bl	1249c <posix_memalign@plt>
   1949c:	cmp	r0, #0
   194a0:	beq	194d0 <flatcc_builder_finalize_aligned_buffer@@Base+0x84>
   194a4:	ldr	r0, [sp, #4]
   194a8:	cmp	r0, #0
   194ac:	beq	194b4 <flatcc_builder_finalize_aligned_buffer@@Base+0x68>
   194b0:	bl	12424 <free@plt>
   194b4:	cmp	r7, #0
   194b8:	moveq	r6, r7
   194bc:	movne	r6, #0
   194c0:	strne	r6, [r7]
   194c4:	mov	r0, r6
   194c8:	add	sp, sp, #12
   194cc:	pop	{r4, r5, r6, r7, pc}
   194d0:	ldr	r6, [sp, #4]
   194d4:	cmp	r6, #0
   194d8:	beq	194b4 <flatcc_builder_finalize_aligned_buffer@@Base+0x68>
   194dc:	ldr	r3, [r5, #184]	; 0xb8
   194e0:	cmp	r3, #0
   194e4:	beq	19504 <flatcc_builder_finalize_aligned_buffer@@Base+0xb8>
   194e8:	mov	r2, r4
   194ec:	add	r0, r5, #188	; 0xbc
   194f0:	mov	r1, r6
   194f4:	bl	19a60 <flatcc_emitter_copy_buffer@@Base>
   194f8:	cmp	r0, #0
   194fc:	bne	194c4 <flatcc_builder_finalize_aligned_buffer@@Base+0x78>
   19500:	bl	125d0 <__assert_fail@plt+0xf8>
   19504:	mov	r0, r6
   19508:	b	194b0 <flatcc_builder_finalize_aligned_buffer@@Base+0x64>

0001950c <flatcc_builder_aligned_alloc@@Base>:
   1950c:	push	{r4, lr}
   19510:	sub	sp, sp, #8
   19514:	add	r3, sp, #8
   19518:	cmp	r0, #4
   1951c:	mov	r4, #0
   19520:	mov	r2, r1
   19524:	str	r4, [r3, #-4]!
   19528:	movcs	r1, r0
   1952c:	movcc	r1, #4
   19530:	mov	r0, r3
   19534:	bl	1249c <posix_memalign@plt>
   19538:	cmp	r0, r4
   1953c:	ldr	r0, [sp, #4]
   19540:	beq	19554 <flatcc_builder_aligned_alloc@@Base+0x48>
   19544:	cmp	r0, #0
   19548:	beq	19554 <flatcc_builder_aligned_alloc@@Base+0x48>
   1954c:	bl	12424 <free@plt>
   19550:	mov	r0, r4
   19554:	add	sp, sp, #8
   19558:	pop	{r4, pc}

0001955c <flatcc_builder_aligned_free@@Base>:
   1955c:	b	12424 <free@plt>

00019560 <flatcc_builder_get_emit_context@@Base>:
   19560:	ldr	r0, [r0, #36]	; 0x24
   19564:	bx	lr

00019568 <flatcc_emitter_recycle_page@@Base>:
   19568:	ldr	r3, [r0]
   1956c:	cmp	r3, r1
   19570:	beq	195b8 <flatcc_emitter_recycle_page@@Base+0x50>
   19574:	ldr	r2, [r0, #4]
   19578:	cmp	r1, r2
   1957c:	beq	195b8 <flatcc_emitter_recycle_page@@Base+0x50>
   19580:	ldr	ip, [r1, #2944]	; 0xb80
   19584:	ldr	r2, [r1, #2948]	; 0xb84
   19588:	push	{lr}		; (str lr, [sp, #-4]!)
   1958c:	mov	r0, #0
   19590:	str	r2, [ip, #2948]	; 0xb84
   19594:	ldr	r2, [r3, #2948]	; 0xb84
   19598:	ldr	lr, [r1, #2948]	; 0xb84
   1959c:	str	ip, [lr, #2944]	; 0xb80
   195a0:	str	r3, [r1, #2944]	; 0xb80
   195a4:	str	r2, [r1, #2948]	; 0xb84
   195a8:	str	r1, [r2, #2944]	; 0xb80
   195ac:	ldr	r3, [r1, #2944]	; 0xb80
   195b0:	str	r1, [r3, #2948]	; 0xb84
   195b4:	pop	{pc}		; (ldr pc, [sp], #4)
   195b8:	mvn	r0, #0
   195bc:	bx	lr

000195c0 <flatcc_emitter_reset@@Base>:
   195c0:	ldr	r2, [r0]
   195c4:	cmp	r2, #0
   195c8:	bxeq	lr
   195cc:	ldr	r3, [r0, #32]
   195d0:	mov	r1, #1472	; 0x5c0
   195d4:	push	{r4, lr}
   195d8:	cmp	r3, #0
   195dc:	str	r1, [r0, #12]
   195e0:	str	r1, [r0, #20]
   195e4:	ldr	r1, [r0, #24]
   195e8:	add	ip, r2, #1472	; 0x5c0
   195ec:	moveq	r3, r1
   195f0:	stmib	r0, {r2, ip}
   195f4:	str	ip, [r0, #16]
   195f8:	add	ip, r3, r3, lsl #1
   195fc:	lsr	r3, r1, #2
   19600:	add	r3, r3, ip, lsr #2
   19604:	ldr	ip, [r0, #28]
   19608:	ldr	lr, [pc, #104]	; 19678 <flatcc_emitter_reset@@Base+0xb8>
   1960c:	cmp	ip, r3, lsl #1
   19610:	mov	r1, #0
   19614:	str	lr, [r2, #2952]	; 0xb88
   19618:	str	r3, [r0, #32]
   1961c:	str	r1, [r0, #24]
   19620:	popls	{r4, pc}
   19624:	ldr	r3, [r2, #2944]	; 0xb80
   19628:	mov	r4, r0
   1962c:	cmp	r2, r3
   19630:	popeq	{r4, pc}
   19634:	ldr	r1, [r3, #2944]	; 0xb80
   19638:	mov	r0, r3
   1963c:	str	r1, [r2, #2944]	; 0xb80
   19640:	ldr	r3, [r3, #2944]	; 0xb80
   19644:	str	r2, [r3, #2948]	; 0xb84
   19648:	bl	12424 <free@plt>
   1964c:	ldr	r3, [r4, #28]
   19650:	ldr	r2, [r4, #32]
   19654:	sub	r3, r3, #2944	; 0xb80
   19658:	str	r3, [r4, #28]
   1965c:	cmp	r3, r2, lsl #1
   19660:	popls	{r4, pc}
   19664:	ldm	r4, {r1, r2}
   19668:	ldr	r3, [r2, #2944]	; 0xb80
   1966c:	cmp	r3, r1
   19670:	bne	19634 <flatcc_emitter_reset@@Base+0x74>
   19674:	pop	{r4, pc}
   19678:			; <UNDEFINED> instruction: 0xfffffa40

0001967c <flatcc_emitter_clear@@Base>:
   1967c:	ldr	r3, [r0]
   19680:	cmp	r3, #0
   19684:	bxeq	lr
   19688:	ldr	r2, [r3, #2948]	; 0xb84
   1968c:	mov	r1, #0
   19690:	push	{r4, r5, r6, lr}
   19694:	mov	r5, r0
   19698:	str	r1, [r2, #2944]	; 0xb80
   1969c:	ldr	r4, [r3, #2944]	; 0xb80
   196a0:	cmp	r4, r1
   196a4:	bne	196b0 <flatcc_emitter_clear@@Base+0x34>
   196a8:	b	196e0 <flatcc_emitter_clear@@Base+0x64>
   196ac:	mov	r4, r3
   196b0:	ldr	r0, [r4, #2948]	; 0xb84
   196b4:	bl	12424 <free@plt>
   196b8:	ldr	r3, [r4, #2944]	; 0xb80
   196bc:	cmp	r3, #0
   196c0:	bne	196ac <flatcc_emitter_clear@@Base+0x30>
   196c4:	mov	r0, r4
   196c8:	bl	12424 <free@plt>
   196cc:	mov	r0, r5
   196d0:	mov	r2, #36	; 0x24
   196d4:	mov	r1, #0
   196d8:	pop	{r4, r5, r6, lr}
   196dc:	b	124a8 <memset@plt>
   196e0:	mov	r4, r3
   196e4:	b	196c4 <flatcc_emitter_clear@@Base+0x48>

000196e8 <flatcc_emitter@@Base>:
   196e8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   196ec:	sub	sp, sp, #12
   196f0:	mov	r5, r0
   196f4:	ldr	ip, [sp, #48]	; 0x30
   196f8:	ldr	r0, [r0, #24]
   196fc:	cmp	r3, #0
   19700:	add	r0, r0, ip
   19704:	str	r0, [r5, #24]
   19708:	blt	198d0 <flatcc_emitter@@Base+0x1e8>
   1970c:	ldr	r0, [r5, #20]
   19710:	cmp	ip, r0
   19714:	bls	197a4 <flatcc_emitter@@Base+0xbc>
   19718:	cmp	r2, #0
   1971c:	addne	r7, r1, #8
   19720:	movne	r8, r2
   19724:	movne	r9, #2944	; 0xb80
   19728:	beq	19798 <flatcc_emitter@@Base+0xb0>
   1972c:	ldr	r6, [r7, #-4]
   19730:	ldr	sl, [r7, #-8]
   19734:	cmp	r6, #0
   19738:	movne	r4, r0
   1973c:	beq	1978c <flatcc_emitter@@Base+0xa4>
   19740:	cmp	r6, r4
   19744:	bls	197ec <flatcc_emitter@@Base+0x104>
   19748:	cmp	r4, #0
   1974c:	beq	197f8 <flatcc_emitter@@Base+0x110>
   19750:	sub	r6, r6, r4
   19754:	mov	r2, r4
   19758:	mov	r1, sl
   1975c:	ldr	r0, [r5, #16]
   19760:	bl	12430 <memcpy@plt>
   19764:	ldr	r0, [r5, #20]
   19768:	ldr	r3, [r5, #16]
   1976c:	add	sl, sl, r4
   19770:	add	r3, r3, r4
   19774:	cmp	r6, #0
   19778:	sub	r4, r0, r4
   1977c:	str	r3, [r5, #16]
   19780:	str	r4, [r5, #20]
   19784:	mov	r0, r4
   19788:	bne	19740 <flatcc_emitter@@Base+0x58>
   1978c:	subs	r8, r8, #1
   19790:	add	r7, r7, #8
   19794:	bne	1972c <flatcc_emitter@@Base+0x44>
   19798:	mov	r0, #0
   1979c:	add	sp, sp, #12
   197a0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   197a4:	ldr	r3, [r5, #16]
   197a8:	sub	r0, r0, ip
   197ac:	add	ip, r3, ip
   197b0:	str	r0, [r5, #20]
   197b4:	str	ip, [r5, #16]
   197b8:	cmp	r2, #0
   197bc:	addne	r4, r1, #8
   197c0:	movne	r7, r2
   197c4:	beq	19798 <flatcc_emitter@@Base+0xb0>
   197c8:	ldmdb	r4, {r1, r2}
   197cc:	mov	r0, r3
   197d0:	bl	12430 <memcpy@plt>
   197d4:	ldr	r2, [r4, #-4]
   197d8:	subs	r7, r7, #1
   197dc:	add	r4, r4, #8
   197e0:	add	r3, r0, r2
   197e4:	bne	197c8 <flatcc_emitter@@Base+0xe0>
   197e8:	b	19798 <flatcc_emitter@@Base+0xb0>
   197ec:	mov	r4, r6
   197f0:	mov	r6, #0
   197f4:	b	19754 <flatcc_emitter@@Base+0x6c>
   197f8:	ldr	r4, [r5, #4]
   197fc:	cmp	r4, #0
   19800:	beq	19870 <flatcc_emitter@@Base+0x188>
   19804:	ldr	fp, [r4, #2944]	; 0xb80
   19808:	ldr	r3, [r5]
   1980c:	cmp	fp, r3
   19810:	beq	19838 <flatcc_emitter@@Base+0x150>
   19814:	str	fp, [r5, #4]
   19818:	ldr	r3, [fp, #2948]	; 0xb84
   1981c:	mov	r4, #2944	; 0xb80
   19820:	str	fp, [r5, #16]
   19824:	ldr	r3, [r3, #2952]	; 0xb88
   19828:	str	r9, [r5, #20]
   1982c:	add	r3, r3, r4
   19830:	str	r3, [fp, #2952]	; 0xb88
   19834:	b	19740 <flatcc_emitter@@Base+0x58>
   19838:	ldr	r0, [pc, #540]	; 19a5c <flatcc_emitter@@Base+0x374>
   1983c:	bl	12460 <malloc@plt>
   19840:	cmp	r0, #0
   19844:	beq	19880 <flatcc_emitter@@Base+0x198>
   19848:	ldr	r3, [r5, #28]
   1984c:	str	fp, [r0, #2944]	; 0xb80
   19850:	add	r3, r3, #2944	; 0xb80
   19854:	str	r4, [r0, #2948]	; 0xb84
   19858:	str	r3, [r5, #28]
   1985c:	str	r0, [fp, #2948]	; 0xb84
   19860:	str	r0, [r4, #2944]	; 0xb80
   19864:	mov	fp, r0
   19868:	str	r0, [r5, #4]
   1986c:	b	19818 <flatcc_emitter@@Base+0x130>
   19870:	ldr	r0, [pc, #484]	; 19a5c <flatcc_emitter@@Base+0x374>
   19874:	bl	12460 <malloc@plt>
   19878:	cmp	r0, #0
   1987c:	bne	1988c <flatcc_emitter@@Base+0x1a4>
   19880:	mvn	r0, #0
   19884:	add	sp, sp, #12
   19888:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1988c:	mov	r2, #1472	; 0x5c0
   19890:	ldr	r3, [r5, #28]
   19894:	str	r2, [r5, #12]
   19898:	str	r2, [r5, #20]
   1989c:	sub	r2, r2, #2944	; 0xb80
   198a0:	str	r2, [r0, #2952]	; 0xb88
   198a4:	str	r0, [r5]
   198a8:	add	r3, r3, #2944	; 0xb80
   198ac:	str	r0, [r5, #4]
   198b0:	str	r0, [r0, #2944]	; 0xb80
   198b4:	str	r0, [r0, #2948]	; 0xb84
   198b8:	add	r0, r0, #1472	; 0x5c0
   198bc:	str	r0, [r5, #8]
   198c0:	str	r0, [r5, #16]
   198c4:	str	r3, [r5, #28]
   198c8:	mov	r4, #1472	; 0x5c0
   198cc:	b	19740 <flatcc_emitter@@Base+0x58>
   198d0:	ldr	r0, [r5, #12]
   198d4:	cmp	ip, r0
   198d8:	bls	19958 <flatcc_emitter@@Base+0x270>
   198dc:	add	r6, r1, r2, lsl #3
   198e0:	mov	r7, r2
   198e4:	mov	r9, #2944	; 0xb80
   198e8:	mov	r8, #0
   198ec:	cmp	r7, #0
   198f0:	beq	19798 <flatcc_emitter@@Base+0xb0>
   198f4:	ldr	r4, [r6, #-4]
   198f8:	ldr	sl, [r6, #-8]
   198fc:	cmp	r4, #0
   19900:	add	sl, sl, r4
   19904:	beq	1994c <flatcc_emitter@@Base+0x264>
   19908:	ldr	r2, [r5, #12]
   1990c:	cmp	r2, r4
   19910:	bcs	19970 <flatcc_emitter@@Base+0x288>
   19914:	cmp	r2, #0
   19918:	beq	19980 <flatcc_emitter@@Base+0x298>
   1991c:	sub	r4, r4, r2
   19920:	mov	r1, r8
   19924:	ldr	r0, [r5, #8]
   19928:	rsb	r3, r2, #0
   1992c:	add	r0, r0, r3
   19930:	add	sl, sl, r3
   19934:	str	r1, [r5, #12]
   19938:	str	r0, [r5, #8]
   1993c:	mov	r1, sl
   19940:	bl	12430 <memcpy@plt>
   19944:	cmp	r4, #0
   19948:	bne	19908 <flatcc_emitter@@Base+0x220>
   1994c:	sub	r6, r6, #8
   19950:	sub	r7, r7, #1
   19954:	b	198ec <flatcc_emitter@@Base+0x204>
   19958:	ldr	r3, [r5, #8]
   1995c:	sub	r0, r0, ip
   19960:	sub	r3, r3, ip
   19964:	str	r0, [r5, #12]
   19968:	str	r3, [r5, #8]
   1996c:	b	197b8 <flatcc_emitter@@Base+0xd0>
   19970:	sub	r1, r2, r4
   19974:	mov	r2, r4
   19978:	mov	r4, #0
   1997c:	b	19924 <flatcc_emitter@@Base+0x23c>
   19980:	ldr	r3, [r5]
   19984:	cmp	r3, #0
   19988:	beq	19a0c <flatcc_emitter@@Base+0x324>
   1998c:	ldr	fp, [r3, #2948]	; 0xb84
   19990:	ldr	r2, [r5, #4]
   19994:	cmp	fp, r2
   19998:	beq	199cc <flatcc_emitter@@Base+0x2e4>
   1999c:	ldr	r3, [r3, #2952]	; 0xb88
   199a0:	sub	r3, r3, #2944	; 0xb80
   199a4:	str	r3, [fp, #2952]	; 0xb88
   199a8:	str	fp, [r5]
   199ac:	ldr	r3, [fp, #2944]	; 0xb80
   199b0:	add	r2, fp, #2944	; 0xb80
   199b4:	str	r9, [r5, #12]
   199b8:	ldr	r3, [r3, #2952]	; 0xb88
   199bc:	str	r2, [r5, #8]
   199c0:	sub	r3, r3, #2944	; 0xb80
   199c4:	str	r3, [fp, #2952]	; 0xb88
   199c8:	b	19908 <flatcc_emitter@@Base+0x220>
   199cc:	ldr	r0, [pc, #136]	; 19a5c <flatcc_emitter@@Base+0x374>
   199d0:	str	r3, [sp, #4]
   199d4:	bl	12460 <malloc@plt>
   199d8:	ldr	r3, [sp, #4]
   199dc:	cmp	r0, #0
   199e0:	beq	19880 <flatcc_emitter@@Base+0x198>
   199e4:	ldr	r2, [r5, #28]
   199e8:	str	fp, [r0, #2948]	; 0xb84
   199ec:	add	r2, r2, #2944	; 0xb80
   199f0:	str	r3, [r0, #2944]	; 0xb80
   199f4:	str	r2, [r5, #28]
   199f8:	str	r0, [r3, #2948]	; 0xb84
   199fc:	str	r0, [fp, #2944]	; 0xb80
   19a00:	str	r0, [r5]
   19a04:	mov	fp, r0
   19a08:	b	199ac <flatcc_emitter@@Base+0x2c4>
   19a0c:	ldr	r0, [pc, #72]	; 19a5c <flatcc_emitter@@Base+0x374>
   19a10:	bl	12460 <malloc@plt>
   19a14:	cmp	r0, #0
   19a18:	beq	19880 <flatcc_emitter@@Base+0x198>
   19a1c:	mov	r2, #1472	; 0x5c0
   19a20:	ldr	r3, [r5, #28]
   19a24:	str	r2, [r5, #12]
   19a28:	str	r2, [r5, #20]
   19a2c:	sub	r2, r2, #2944	; 0xb80
   19a30:	str	r2, [r0, #2952]	; 0xb88
   19a34:	str	r0, [r5]
   19a38:	add	r3, r3, #2944	; 0xb80
   19a3c:	str	r0, [r5, #4]
   19a40:	str	r0, [r0, #2944]	; 0xb80
   19a44:	str	r0, [r0, #2948]	; 0xb84
   19a48:	add	r0, r0, #1472	; 0x5c0
   19a4c:	str	r0, [r5, #8]
   19a50:	str	r0, [r5, #16]
   19a54:	str	r3, [r5, #28]
   19a58:	b	19908 <flatcc_emitter@@Base+0x220>
   19a5c:	andeq	r0, r0, ip, lsl #23

00019a60 <flatcc_emitter_copy_buffer@@Base>:
   19a60:	ldr	ip, [r0, #24]
   19a64:	cmp	ip, r2
   19a68:	bhi	19b04 <flatcc_emitter_copy_buffer@@Base+0xa4>
   19a6c:	ldr	r2, [r0]
   19a70:	cmp	r2, #0
   19a74:	beq	19b04 <flatcc_emitter_copy_buffer@@Base+0xa4>
   19a78:	mov	r3, r1
   19a7c:	ldr	r1, [r0, #4]
   19a80:	push	{r4, r5, r6, lr}
   19a84:	cmp	r2, r1
   19a88:	mov	r5, r0
   19a8c:	beq	19b10 <flatcc_emitter_copy_buffer@@Base+0xb0>
   19a90:	ldr	r4, [r0, #12]
   19a94:	ldr	r1, [r5, #8]
   19a98:	rsb	r4, r4, #2944	; 0xb80
   19a9c:	mov	r2, r4
   19aa0:	mov	r0, r3
   19aa4:	bl	12430 <memcpy@plt>
   19aa8:	ldr	r2, [r5]
   19aac:	ldr	r1, [r5, #4]
   19ab0:	add	r3, r0, r4
   19ab4:	ldr	r4, [r2, #2944]	; 0xb80
   19ab8:	cmp	r4, r1
   19abc:	beq	19ae8 <flatcc_emitter_copy_buffer@@Base+0x88>
   19ac0:	mov	r6, #2944	; 0xb80
   19ac4:	mov	r1, r4
   19ac8:	mov	r0, r3
   19acc:	mov	r2, r6
   19ad0:	bl	12430 <memcpy@plt>
   19ad4:	ldr	r4, [r4, #2944]	; 0xb80
   19ad8:	ldr	r1, [r5, #4]
   19adc:	cmp	r1, r4
   19ae0:	add	r3, r0, #2944	; 0xb80
   19ae4:	bne	19ac4 <flatcc_emitter_copy_buffer@@Base+0x64>
   19ae8:	ldr	r2, [r5, #20]
   19aec:	mov	r0, r3
   19af0:	rsb	r2, r2, #2944	; 0xb80
   19af4:	bl	12430 <memcpy@plt>
   19af8:	mov	r3, r0
   19afc:	mov	r0, r3
   19b00:	pop	{r4, r5, r6, pc}
   19b04:	mov	r3, #0
   19b08:	mov	r0, r3
   19b0c:	bx	lr
   19b10:	ldr	r1, [r0, #8]
   19b14:	mov	r2, ip
   19b18:	mov	r0, r3
   19b1c:	bl	12430 <memcpy@plt>
   19b20:	mov	r3, r0
   19b24:	b	19afc <flatcc_emitter_copy_buffer@@Base+0x9c>
   19b28:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   19b2c:	sub	sp, sp, #36	; 0x24
   19b30:	mov	r7, r3
   19b34:	ldr	r3, [sp, #72]	; 0x48
   19b38:	mov	r5, r2
   19b3c:	cmp	r1, r2
   19b40:	mov	r2, #0
   19b44:	mov	r8, r0
   19b48:	strb	r2, [r3]
   19b4c:	beq	19ccc <flatcc_emitter_copy_buffer@@Base+0x26c>
   19b50:	ldrb	r3, [r1]
   19b54:	mov	r6, r1
   19b58:	cmp	r3, #34	; 0x22
   19b5c:	beq	19e14 <flatcc_emitter_copy_buffer@@Base+0x3b4>
   19b60:	cmp	r3, #46	; 0x2e
   19b64:	movne	r3, #1
   19b68:	strne	r3, [r0, #12]
   19b6c:	beq	19ca4 <flatcc_emitter_copy_buffer@@Base+0x244>
   19b70:	mov	fp, #0
   19b74:	add	sl, sp, #20
   19b78:	add	r9, sp, #24
   19b7c:	mov	r4, r7
   19b80:	b	19b98 <flatcc_emitter_copy_buffer@@Base+0x138>
   19b84:	cmp	r6, r0
   19b88:	bne	19bc8 <flatcc_emitter_copy_buffer@@Base+0x168>
   19b8c:	ldr	r3, [r4, #4]!
   19b90:	cmp	r3, #0
   19b94:	beq	19c1c <flatcc_emitter_copy_buffer@@Base+0x1bc>
   19b98:	stm	sp, {r9, sl}
   19b9c:	add	r3, sp, #16
   19ba0:	mov	r2, r5
   19ba4:	mov	r1, r6
   19ba8:	mov	r0, r8
   19bac:	ldr	ip, [r4]
   19bb0:	blx	ip
   19bb4:	cmp	r5, r0
   19bb8:	bne	19b84 <flatcc_emitter_copy_buffer@@Base+0x124>
   19bbc:	mov	r0, r5
   19bc0:	add	sp, sp, #36	; 0x24
   19bc4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   19bc8:	cmp	fp, #0
   19bcc:	beq	19bdc <flatcc_emitter_copy_buffer@@Base+0x17c>
   19bd0:	ldr	r3, [r8, #12]
   19bd4:	cmp	r3, #0
   19bd8:	bne	19e6c <flatcc_emitter_copy_buffer@@Base+0x40c>
   19bdc:	ldr	r3, [sp, #16]
   19be0:	cmp	r3, #0
   19be4:	beq	19c48 <flatcc_emitter_copy_buffer@@Base+0x1e8>
   19be8:	ldr	r3, [r8, #24]
   19bec:	cmp	r3, #0
   19bf0:	bne	19bbc <flatcc_emitter_copy_buffer@@Base+0x15c>
   19bf4:	ldr	r3, [r8, #4]
   19bf8:	mov	r2, #8
   19bfc:	sub	r3, r0, r3
   19c00:	add	r3, r3, #1
   19c04:	str	r0, [r8, #36]	; 0x24
   19c08:	str	r3, [r8, #20]
   19c0c:	mov	r0, r5
   19c10:	str	r2, [r8, #24]
   19c14:	add	sp, sp, #36	; 0x24
   19c18:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   19c1c:	ldr	r3, [r8, #24]
   19c20:	cmp	r3, #0
   19c24:	bne	19bbc <flatcc_emitter_copy_buffer@@Base+0x15c>
   19c28:	ldr	r3, [r8, #4]
   19c2c:	mov	r2, #23
   19c30:	sub	r3, r6, r3
   19c34:	add	r3, r3, #1
   19c38:	str	r6, [r8, #36]	; 0x24
   19c3c:	str	r3, [r8, #20]
   19c40:	str	r2, [r8, #24]
   19c44:	b	19bbc <flatcc_emitter_copy_buffer@@Base+0x15c>
   19c48:	ldrd	r2, [sp, #24]
   19c4c:	cmp	r3, #0
   19c50:	cmpeq	r2, #255	; 0xff
   19c54:	strd	r2, [sp, #8]
   19c58:	bhi	19c8c <flatcc_emitter_copy_buffer@@Base+0x22c>
   19c5c:	ldr	r3, [sp, #72]	; 0x48
   19c60:	ldr	r2, [sp, #8]
   19c64:	ldr	r1, [sp, #20]
   19c68:	ldrb	r3, [r3]
   19c6c:	cmp	r1, #0
   19c70:	add	fp, fp, #1
   19c74:	add	r3, r3, r2
   19c78:	ldr	r2, [sp, #72]	; 0x48
   19c7c:	strb	r3, [r2]
   19c80:	beq	19e64 <flatcc_emitter_copy_buffer@@Base+0x404>
   19c84:	mov	r6, r0
   19c88:	b	19b7c <flatcc_emitter_copy_buffer@@Base+0x11c>
   19c8c:	ldr	r3, [r8, #24]
   19c90:	cmp	r3, #0
   19c94:	bne	19bbc <flatcc_emitter_copy_buffer@@Base+0x15c>
   19c98:	ldr	r3, [r8, #4]
   19c9c:	mov	r2, #7
   19ca0:	b	19bfc <flatcc_emitter_copy_buffer@@Base+0x19c>
   19ca4:	ldr	r3, [r0, #24]
   19ca8:	cmp	r3, #0
   19cac:	bne	19ccc <flatcc_emitter_copy_buffer@@Base+0x26c>
   19cb0:	ldr	r3, [r0, #4]
   19cb4:	mov	r2, #5
   19cb8:	sub	r3, r1, r3
   19cbc:	add	r3, r3, #1
   19cc0:	str	r1, [r8, #36]	; 0x24
   19cc4:	str	r3, [r0, #20]
   19cc8:	str	r2, [r0, #24]
   19ccc:	ldr	r3, [r8, #12]
   19cd0:	cmp	r3, #0
   19cd4:	moveq	r1, r5
   19cd8:	bne	19bbc <flatcc_emitter_copy_buffer@@Base+0x15c>
   19cdc:	mov	r0, #0
   19ce0:	cmp	r5, r1
   19ce4:	beq	19bbc <flatcc_emitter_copy_buffer@@Base+0x15c>
   19ce8:	ldrb	r2, [r1]
   19cec:	cmp	r2, #32
   19cf0:	bne	19d18 <flatcc_emitter_copy_buffer@@Base+0x2b8>
   19cf4:	add	r3, r1, #1
   19cf8:	b	19d08 <flatcc_emitter_copy_buffer@@Base+0x2a8>
   19cfc:	ldrb	r2, [r3], #1
   19d00:	cmp	r2, #32
   19d04:	bne	19d18 <flatcc_emitter_copy_buffer@@Base+0x2b8>
   19d08:	cmp	r5, r3
   19d0c:	mov	r1, r3
   19d10:	bne	19cfc <flatcc_emitter_copy_buffer@@Base+0x29c>
   19d14:	b	19bbc <flatcc_emitter_copy_buffer@@Base+0x15c>
   19d18:	cmp	r2, #32
   19d1c:	bhi	19dd8 <flatcc_emitter_copy_buffer@@Base+0x378>
   19d20:	sub	r2, r2, #9
   19d24:	cmp	r2, #23
   19d28:	ldrls	pc, [pc, r2, lsl #2]
   19d2c:	b	19de8 <flatcc_emitter_copy_buffer@@Base+0x388>
   19d30:	andeq	r9, r1, r0, ror #27
   19d34:			; <UNDEFINED> instruction: 0x00019db0
   19d38:	andeq	r9, r1, r8, ror #27
   19d3c:	andeq	r9, r1, r8, ror #27
   19d40:	muleq	r1, r0, sp
   19d44:	andeq	r9, r1, r8, ror #27
   19d48:	andeq	r9, r1, r8, ror #27
   19d4c:	andeq	r9, r1, r8, ror #27
   19d50:	andeq	r9, r1, r8, ror #27
   19d54:	andeq	r9, r1, r8, ror #27
   19d58:	andeq	r9, r1, r8, ror #27
   19d5c:	andeq	r9, r1, r8, ror #27
   19d60:	andeq	r9, r1, r8, ror #27
   19d64:	andeq	r9, r1, r8, ror #27
   19d68:	andeq	r9, r1, r8, ror #27
   19d6c:	andeq	r9, r1, r8, ror #27
   19d70:	andeq	r9, r1, r8, ror #27
   19d74:	andeq	r9, r1, r8, ror #27
   19d78:	andeq	r9, r1, r8, ror #27
   19d7c:	andeq	r9, r1, r8, ror #27
   19d80:	andeq	r9, r1, r8, ror #27
   19d84:	andeq	r9, r1, r8, ror #27
   19d88:	andeq	r9, r1, r8, ror #27
   19d8c:	andeq	r9, r1, r0, ror #25
   19d90:	sub	r3, r5, r1
   19d94:	cmp	r3, #1
   19d98:	movle	r3, r0
   19d9c:	ldrbgt	r3, [r1, #1]
   19da0:	subgt	r3, r3, #10
   19da4:	clzgt	r3, r3
   19da8:	lsrgt	r3, r3, #5
   19dac:	add	r1, r1, r3
   19db0:	ldr	r3, [r8, #16]
   19db4:	add	r1, r1, #1
   19db8:	add	r3, r3, #1
   19dbc:	str	r1, [r8, #4]
   19dc0:	str	r3, [r8, #16]
   19dc4:	cmp	r5, r1
   19dc8:	beq	19bbc <flatcc_emitter_copy_buffer@@Base+0x15c>
   19dcc:	ldrb	r2, [r1]
   19dd0:	cmp	r2, #32
   19dd4:	bls	19d20 <flatcc_emitter_copy_buffer@@Base+0x2c0>
   19dd8:	mov	r6, r1
   19ddc:	b	19b70 <flatcc_emitter_copy_buffer@@Base+0x110>
   19de0:	add	r1, r1, #1
   19de4:	b	19dc4 <flatcc_emitter_copy_buffer@@Base+0x364>
   19de8:	ldr	r3, [r8, #24]
   19dec:	cmp	r3, #0
   19df0:	bne	19bbc <flatcc_emitter_copy_buffer@@Base+0x15c>
   19df4:	ldr	r3, [r8, #4]
   19df8:	mov	r2, #5
   19dfc:	sub	r3, r1, r3
   19e00:	add	r3, r3, #1
   19e04:	str	r1, [r8, #36]	; 0x24
   19e08:	str	r3, [r8, #20]
   19e0c:	str	r2, [r8, #24]
   19e10:	b	19bbc <flatcc_emitter_copy_buffer@@Base+0x15c>
   19e14:	add	r1, r1, #1
   19e18:	sub	r3, r5, r1
   19e1c:	cmp	r3, #1
   19e20:	str	r2, [r0, #12]
   19e24:	ble	19cdc <flatcc_emitter_copy_buffer@@Base+0x27c>
   19e28:	ldrb	r3, [r6, #1]
   19e2c:	cmp	r3, #32
   19e30:	bhi	19e54 <flatcc_emitter_copy_buffer@@Base+0x3f4>
   19e34:	bne	19cdc <flatcc_emitter_copy_buffer@@Base+0x27c>
   19e38:	ldrb	r3, [r6, #2]
   19e3c:	cmp	r3, #32
   19e40:	addhi	r6, r6, #2
   19e44:	bls	19cdc <flatcc_emitter_copy_buffer@@Base+0x27c>
   19e48:	cmp	r5, r6
   19e4c:	bne	19b70 <flatcc_emitter_copy_buffer@@Base+0x110>
   19e50:	b	19bbc <flatcc_emitter_copy_buffer@@Base+0x15c>
   19e54:	mov	r6, r1
   19e58:	cmp	r5, r6
   19e5c:	bne	19b70 <flatcc_emitter_copy_buffer@@Base+0x110>
   19e60:	b	19bbc <flatcc_emitter_copy_buffer@@Base+0x15c>
   19e64:	mov	r5, r0
   19e68:	b	19bbc <flatcc_emitter_copy_buffer@@Base+0x15c>
   19e6c:	ldr	r3, [r8, #24]
   19e70:	cmp	r3, #0
   19e74:	bne	19bbc <flatcc_emitter_copy_buffer@@Base+0x15c>
   19e78:	ldr	r3, [r8, #4]
   19e7c:	mov	r2, #14
   19e80:	b	19bfc <flatcc_emitter_copy_buffer@@Base+0x19c>
   19e84:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   19e88:	sub	sp, sp, #28
   19e8c:	mov	r9, r3
   19e90:	ldrh	r3, [sp, #68]	; 0x44
   19e94:	mov	ip, #0
   19e98:	mov	r6, r0
   19e9c:	ldr	r0, [r0]
   19ea0:	mov	r4, r1
   19ea4:	mov	r5, r2
   19ea8:	str	ip, [sp, #20]
   19eac:	str	r3, [sp, #12]
   19eb0:	bl	16220 <flatcc_builder_start_offset_vector@@Base>
   19eb4:	cmp	r0, #0
   19eb8:	beq	19efc <flatcc_emitter_copy_buffer@@Base+0x49c>
   19ebc:	ldr	r3, [r6, #24]
   19ec0:	cmp	r3, #0
   19ec4:	beq	19ed4 <flatcc_emitter_copy_buffer@@Base+0x474>
   19ec8:	mov	r0, r5
   19ecc:	add	sp, sp, #28
   19ed0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   19ed4:	ldr	r3, [r6, #4]
   19ed8:	mov	r2, #33	; 0x21
   19edc:	sub	r3, r4, r3
   19ee0:	add	r3, r3, #1
   19ee4:	mov	r0, r5
   19ee8:	str	r4, [r6, #36]	; 0x24
   19eec:	str	r3, [r6, #20]
   19ef0:	str	r2, [r6, #24]
   19ef4:	add	sp, sp, #28
   19ef8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   19efc:	cmp	r4, r5
   19f00:	beq	19f10 <flatcc_emitter_copy_buffer@@Base+0x4b0>
   19f04:	ldrb	r3, [r4]
   19f08:	cmp	r3, #91	; 0x5b
   19f0c:	beq	19f98 <flatcc_emitter_copy_buffer@@Base+0x538>
   19f10:	ldr	r7, [r6, #24]
   19f14:	cmp	r7, #0
   19f18:	beq	19f78 <flatcc_emitter_copy_buffer@@Base+0x518>
   19f1c:	mov	r7, #0
   19f20:	ldr	r3, [sp, #64]	; 0x40
   19f24:	cmp	r3, r7
   19f28:	moveq	r4, r5
   19f2c:	bne	19ec8 <flatcc_emitter_copy_buffer@@Base+0x468>
   19f30:	mov	r1, r9
   19f34:	ldr	r0, [r6]
   19f38:	bl	14644 <flatcc_builder_get_user_frame_ptr@@Base>
   19f3c:	mov	r1, r0
   19f40:	ldr	r0, [r6]
   19f44:	bl	178ac <flatcc_builder_end_offset_vector_for_unions@@Base>
   19f48:	cmp	r0, #0
   19f4c:	str	r0, [sp, #20]
   19f50:	beq	19ebc <flatcc_emitter_copy_buffer@@Base+0x45c>
   19f54:	ldr	r1, [sp, #12]
   19f58:	ldr	r0, [r6]
   19f5c:	bl	18d70 <flatcc_builder_table_add_offset@@Base>
   19f60:	cmp	r0, #0
   19f64:	beq	19ebc <flatcc_emitter_copy_buffer@@Base+0x45c>
   19f68:	ldr	r3, [sp, #20]
   19f6c:	mov	r5, r4
   19f70:	str	r3, [r0]
   19f74:	b	19ec8 <flatcc_emitter_copy_buffer@@Base+0x468>
   19f78:	ldr	r3, [r6, #4]
   19f7c:	mov	r2, #22
   19f80:	sub	r3, r4, r3
   19f84:	add	r3, r3, #1
   19f88:	str	r4, [r6, #36]	; 0x24
   19f8c:	str	r3, [r6, #20]
   19f90:	str	r2, [r6, #24]
   19f94:	b	19f20 <flatcc_emitter_copy_buffer@@Base+0x4c0>
   19f98:	add	r8, r4, #1
   19f9c:	sub	r3, r5, r8
   19fa0:	cmp	r3, #1
   19fa4:	ble	19fb8 <flatcc_emitter_copy_buffer@@Base+0x558>
   19fa8:	ldrb	r1, [r4, #1]
   19fac:	cmp	r1, #32
   19fb0:	bhi	1a818 <flatcc_emitter_copy_buffer@@Base+0xdb8>
   19fb4:	beq	1a808 <flatcc_emitter_copy_buffer@@Base+0xda8>
   19fb8:	mov	r0, #0
   19fbc:	cmp	r5, r8
   19fc0:	beq	1a86c <flatcc_emitter_copy_buffer@@Base+0xe0c>
   19fc4:	ldrb	r1, [r8]
   19fc8:	cmp	r1, #32
   19fcc:	bne	1a6b8 <flatcc_emitter_copy_buffer@@Base+0xc58>
   19fd0:	add	r3, r8, #1
   19fd4:	b	19fe4 <flatcc_emitter_copy_buffer@@Base+0x584>
   19fd8:	ldrb	r1, [r3], #1
   19fdc:	cmp	r1, #32
   19fe0:	bne	1a6b8 <flatcc_emitter_copy_buffer@@Base+0xc58>
   19fe4:	cmp	r3, r5
   19fe8:	mov	r8, r3
   19fec:	bne	19fd8 <flatcc_emitter_copy_buffer@@Base+0x578>
   19ff0:	ldr	r3, [sp, #64]	; 0x40
   19ff4:	cmp	r3, #0
   19ff8:	beq	1a40c <flatcc_emitter_copy_buffer@@Base+0x9ac>
   19ffc:	mov	r7, #0
   1a000:	add	sl, sp, #20
   1a004:	mov	fp, #1
   1a008:	mov	r1, r9
   1a00c:	ldr	r0, [r6]
   1a010:	bl	14644 <flatcc_builder_get_user_frame_ptr@@Base>
   1a014:	mov	r1, r8
   1a018:	mov	r2, r5
   1a01c:	ldr	ip, [sp, #72]	; 0x48
   1a020:	ldrb	r3, [r0, r7]
   1a024:	str	sl, [sp]
   1a028:	mov	r0, r6
   1a02c:	blx	ip
   1a030:	cmp	r5, r0
   1a034:	mov	r4, r0
   1a038:	beq	19ec8 <flatcc_emitter_copy_buffer@@Base+0x468>
   1a03c:	mov	r1, fp
   1a040:	ldr	r0, [r6]
   1a044:	bl	15884 <flatcc_builder_extend_offset_vector@@Base>
   1a048:	cmp	r0, #0
   1a04c:	beq	19ebc <flatcc_emitter_copy_buffer@@Base+0x45c>
   1a050:	sub	r2, r5, r4
   1a054:	ldr	r3, [sp, #20]
   1a058:	cmp	r2, #1
   1a05c:	str	r3, [r0]
   1a060:	ldrb	r2, [r4]
   1a064:	ble	1a1dc <flatcc_emitter_copy_buffer@@Base+0x77c>
   1a068:	cmp	r2, #32
   1a06c:	bhi	1a134 <flatcc_emitter_copy_buffer@@Base+0x6d4>
   1a070:	beq	1a20c <flatcc_emitter_copy_buffer@@Base+0x7ac>
   1a074:	cmp	r2, #32
   1a078:	bhi	1a134 <flatcc_emitter_copy_buffer@@Base+0x6d4>
   1a07c:	sub	r2, r2, #9
   1a080:	cmp	r2, #23
   1a084:	ldrls	pc, [pc, r2, lsl #2]
   1a088:	b	1a1c8 <flatcc_emitter_copy_buffer@@Base+0x768>
   1a08c:	andeq	sl, r1, r8, asr r1
   1a090:	andeq	sl, r1, ip, lsl #2
   1a094:	andeq	sl, r1, r8, asr #3
   1a098:	andeq	sl, r1, r8, asr #3
   1a09c:	andeq	sl, r1, ip, ror #1
   1a0a0:	andeq	sl, r1, r8, asr #3
   1a0a4:	andeq	sl, r1, r8, asr #3
   1a0a8:	andeq	sl, r1, r8, asr #3
   1a0ac:	andeq	sl, r1, r8, asr #3
   1a0b0:	andeq	sl, r1, r8, asr #3
   1a0b4:	andeq	sl, r1, r8, asr #3
   1a0b8:	andeq	sl, r1, r8, asr #3
   1a0bc:	andeq	sl, r1, r8, asr #3
   1a0c0:	andeq	sl, r1, r8, asr #3
   1a0c4:	andeq	sl, r1, r8, asr #3
   1a0c8:	andeq	sl, r1, r8, asr #3
   1a0cc:	andeq	sl, r1, r8, asr #3
   1a0d0:	andeq	sl, r1, r8, asr #3
   1a0d4:	andeq	sl, r1, r8, asr #3
   1a0d8:	andeq	sl, r1, r8, asr #3
   1a0dc:	andeq	sl, r1, r8, asr #3
   1a0e0:	andeq	sl, r1, r8, asr #3
   1a0e4:	andeq	sl, r1, r8, asr #3
   1a0e8:	andeq	sl, r1, r0, ror #2
   1a0ec:	sub	r3, r5, r4
   1a0f0:	cmp	r3, #1
   1a0f4:	movle	r3, #0
   1a0f8:	ldrbgt	r3, [r4, #1]
   1a0fc:	subgt	r3, r3, #10
   1a100:	clzgt	r3, r3
   1a104:	lsrgt	r3, r3, #5
   1a108:	add	r4, r4, r3
   1a10c:	ldr	r3, [r6, #16]
   1a110:	add	r4, r4, #1
   1a114:	add	r3, r3, #1
   1a118:	str	r4, [r6, #4]
   1a11c:	str	r3, [r6, #16]
   1a120:	cmp	r5, r4
   1a124:	beq	1a1d4 <flatcc_emitter_copy_buffer@@Base+0x774>
   1a128:	ldrb	r2, [r4]
   1a12c:	cmp	r2, #32
   1a130:	bls	1a07c <flatcc_emitter_copy_buffer@@Base+0x61c>
   1a134:	cmp	r2, #44	; 0x2c
   1a138:	beq	1a22c <flatcc_emitter_copy_buffer@@Base+0x7cc>
   1a13c:	cmp	r2, #93	; 0x5d
   1a140:	beq	1a2d4 <flatcc_emitter_copy_buffer@@Base+0x874>
   1a144:	ldr	r3, [r6, #24]
   1a148:	cmp	r3, #0
   1a14c:	beq	1a1e8 <flatcc_emitter_copy_buffer@@Base+0x788>
   1a150:	add	r7, r7, #1
   1a154:	b	19f20 <flatcc_emitter_copy_buffer@@Base+0x4c0>
   1a158:	add	r4, r4, #1
   1a15c:	b	1a120 <flatcc_emitter_copy_buffer@@Base+0x6c0>
   1a160:	cmp	r5, r4
   1a164:	beq	1a1d4 <flatcc_emitter_copy_buffer@@Base+0x774>
   1a168:	add	r3, r4, #1
   1a16c:	b	1a17c <flatcc_emitter_copy_buffer@@Base+0x71c>
   1a170:	ldrb	r2, [r3], #1
   1a174:	cmp	r2, #32
   1a178:	bne	1a074 <flatcc_emitter_copy_buffer@@Base+0x614>
   1a17c:	cmp	r5, r3
   1a180:	mov	r4, r3
   1a184:	bne	1a170 <flatcc_emitter_copy_buffer@@Base+0x710>
   1a188:	add	r7, r7, #1
   1a18c:	mov	r1, r4
   1a190:	ldr	r3, [sp, #64]	; 0x40
   1a194:	cmp	r3, r7
   1a198:	beq	1a864 <flatcc_emitter_copy_buffer@@Base+0xe04>
   1a19c:	ldr	r3, [r6, #24]
   1a1a0:	cmp	r3, #0
   1a1a4:	bne	19ec8 <flatcc_emitter_copy_buffer@@Base+0x468>
   1a1a8:	ldr	r3, [r6, #4]
   1a1ac:	mov	r2, #30
   1a1b0:	sub	r3, r1, r3
   1a1b4:	add	r3, r3, #1
   1a1b8:	str	r1, [r6, #36]	; 0x24
   1a1bc:	str	r3, [r6, #20]
   1a1c0:	str	r2, [r6, #24]
   1a1c4:	b	19ec8 <flatcc_emitter_copy_buffer@@Base+0x468>
   1a1c8:	ldr	r3, [r6, #24]
   1a1cc:	cmp	r3, #0
   1a1d0:	beq	1a2b0 <flatcc_emitter_copy_buffer@@Base+0x850>
   1a1d4:	mov	r4, r5
   1a1d8:	b	1a188 <flatcc_emitter_copy_buffer@@Base+0x728>
   1a1dc:	cmp	r2, #32
   1a1e0:	beq	1a168 <flatcc_emitter_copy_buffer@@Base+0x708>
   1a1e4:	b	1a074 <flatcc_emitter_copy_buffer@@Base+0x614>
   1a1e8:	ldr	r3, [r6, #4]
   1a1ec:	str	r4, [r6, #36]	; 0x24
   1a1f0:	sub	r4, r4, r3
   1a1f4:	add	r4, r4, #1
   1a1f8:	mov	r3, #9
   1a1fc:	add	r7, r7, #1
   1a200:	str	r4, [r6, #20]
   1a204:	str	r3, [r6, #24]
   1a208:	b	19f20 <flatcc_emitter_copy_buffer@@Base+0x4c0>
   1a20c:	ldrb	r2, [r4, #1]
   1a210:	cmp	r2, #32
   1a214:	bls	1a168 <flatcc_emitter_copy_buffer@@Base+0x708>
   1a218:	add	r4, r4, #1
   1a21c:	cmp	r5, r4
   1a220:	beq	1a1d4 <flatcc_emitter_copy_buffer@@Base+0x774>
   1a224:	cmp	r2, #44	; 0x2c
   1a228:	bne	1a13c <flatcc_emitter_copy_buffer@@Base+0x6dc>
   1a22c:	add	r8, r4, #1
   1a230:	sub	r3, r5, r8
   1a234:	cmp	r3, #1
   1a238:	ble	1a24c <flatcc_emitter_copy_buffer@@Base+0x7ec>
   1a23c:	ldrb	r1, [r4, #1]
   1a240:	cmp	r1, #32
   1a244:	bhi	1a47c <flatcc_emitter_copy_buffer@@Base+0xa1c>
   1a248:	beq	1a46c <flatcc_emitter_copy_buffer@@Base+0xa0c>
   1a24c:	cmp	r5, r8
   1a250:	beq	1a484 <flatcc_emitter_copy_buffer@@Base+0xa24>
   1a254:	ldrb	r1, [r8]
   1a258:	cmp	r1, #32
   1a25c:	bne	1a334 <flatcc_emitter_copy_buffer@@Base+0x8d4>
   1a260:	add	r3, r8, #1
   1a264:	b	1a274 <flatcc_emitter_copy_buffer@@Base+0x814>
   1a268:	ldrb	r1, [r3], #1
   1a26c:	cmp	r1, #32
   1a270:	bne	1a334 <flatcc_emitter_copy_buffer@@Base+0x8d4>
   1a274:	cmp	r3, r5
   1a278:	mov	r8, r3
   1a27c:	bne	1a268 <flatcc_emitter_copy_buffer@@Base+0x808>
   1a280:	ldr	r3, [r6, #24]
   1a284:	cmp	r3, #0
   1a288:	bne	1a150 <flatcc_emitter_copy_buffer@@Base+0x6f0>
   1a28c:	ldr	r3, [r6, #4]
   1a290:	mov	r2, #9
   1a294:	sub	r3, r8, r3
   1a298:	add	r3, r3, #1
   1a29c:	str	r8, [r6, #36]	; 0x24
   1a2a0:	add	r7, r7, #1
   1a2a4:	str	r3, [r6, #20]
   1a2a8:	str	r2, [r6, #24]
   1a2ac:	b	19f20 <flatcc_emitter_copy_buffer@@Base+0x4c0>
   1a2b0:	ldr	r3, [r6, #4]
   1a2b4:	mov	r2, #5
   1a2b8:	sub	r3, r4, r3
   1a2bc:	add	r3, r3, #1
   1a2c0:	str	r4, [r6, #36]	; 0x24
   1a2c4:	str	r3, [r6, #20]
   1a2c8:	str	r2, [r6, #24]
   1a2cc:	mov	r4, r5
   1a2d0:	b	1a188 <flatcc_emitter_copy_buffer@@Base+0x728>
   1a2d4:	add	r1, r4, #1
   1a2d8:	sub	r3, r5, r1
   1a2dc:	cmp	r3, #1
   1a2e0:	ble	1a2f4 <flatcc_emitter_copy_buffer@@Base+0x894>
   1a2e4:	ldrb	r3, [r4, #1]
   1a2e8:	cmp	r3, #32
   1a2ec:	bhi	1a32c <flatcc_emitter_copy_buffer@@Base+0x8cc>
   1a2f0:	beq	1a588 <flatcc_emitter_copy_buffer@@Base+0xb28>
   1a2f4:	mov	r0, #0
   1a2f8:	cmp	r5, r1
   1a2fc:	beq	1a824 <flatcc_emitter_copy_buffer@@Base+0xdc4>
   1a300:	ldrb	r2, [r1]
   1a304:	cmp	r2, #32
   1a308:	bne	1a48c <flatcc_emitter_copy_buffer@@Base+0xa2c>
   1a30c:	add	r3, r1, #1
   1a310:	b	1a320 <flatcc_emitter_copy_buffer@@Base+0x8c0>
   1a314:	ldrb	r2, [r3], #1
   1a318:	cmp	r2, #32
   1a31c:	bne	1a48c <flatcc_emitter_copy_buffer@@Base+0xa2c>
   1a320:	cmp	r3, r5
   1a324:	mov	r1, r3
   1a328:	bne	1a314 <flatcc_emitter_copy_buffer@@Base+0x8b4>
   1a32c:	add	r7, r7, #1
   1a330:	b	1a190 <flatcc_emitter_copy_buffer@@Base+0x730>
   1a334:	cmp	r1, #32
   1a338:	bhi	1a3f4 <flatcc_emitter_copy_buffer@@Base+0x994>
   1a33c:	sub	r1, r1, #9
   1a340:	cmp	r1, #23
   1a344:	ldrls	pc, [pc, r1, lsl #2]
   1a348:	b	1a440 <flatcc_emitter_copy_buffer@@Base+0x9e0>
   1a34c:	andeq	sl, r1, r8, lsr r4
   1a350:	andeq	sl, r1, ip, asr #7
   1a354:	andeq	sl, r1, r0, asr #8
   1a358:	andeq	sl, r1, r0, asr #8
   1a35c:	andeq	sl, r1, ip, lsr #7
   1a360:	andeq	sl, r1, r0, asr #8
   1a364:	andeq	sl, r1, r0, asr #8
   1a368:	andeq	sl, r1, r0, asr #8
   1a36c:	andeq	sl, r1, r0, asr #8
   1a370:	andeq	sl, r1, r0, asr #8
   1a374:	andeq	sl, r1, r0, asr #8
   1a378:	andeq	sl, r1, r0, asr #8
   1a37c:	andeq	sl, r1, r0, asr #8
   1a380:	andeq	sl, r1, r0, asr #8
   1a384:	andeq	sl, r1, r0, asr #8
   1a388:	andeq	sl, r1, r0, asr #8
   1a38c:	andeq	sl, r1, r0, asr #8
   1a390:	andeq	sl, r1, r0, asr #8
   1a394:	andeq	sl, r1, r0, asr #8
   1a398:	andeq	sl, r1, r0, asr #8
   1a39c:	andeq	sl, r1, r0, asr #8
   1a3a0:	andeq	sl, r1, r0, asr #8
   1a3a4:	andeq	sl, r1, r0, asr #8
   1a3a8:	andeq	sl, r1, ip, asr #4
   1a3ac:	sub	r3, r5, r8
   1a3b0:	cmp	r3, #1
   1a3b4:	movle	r3, #0
   1a3b8:	ldrbgt	r3, [r8, #1]
   1a3bc:	subgt	r3, r3, #10
   1a3c0:	clzgt	r3, r3
   1a3c4:	lsrgt	r3, r3, #5
   1a3c8:	add	r8, r8, r3
   1a3cc:	ldr	r3, [r6, #16]
   1a3d0:	add	r8, r8, #1
   1a3d4:	add	r3, r3, #1
   1a3d8:	str	r8, [r6, #4]
   1a3dc:	str	r3, [r6, #16]
   1a3e0:	cmp	r5, r8
   1a3e4:	beq	1a484 <flatcc_emitter_copy_buffer@@Base+0xa24>
   1a3e8:	ldrb	r1, [r8]
   1a3ec:	cmp	r1, #32
   1a3f0:	bls	1a33c <flatcc_emitter_copy_buffer@@Base+0x8dc>
   1a3f4:	cmp	r1, #93	; 0x5d
   1a3f8:	beq	1a59c <flatcc_emitter_copy_buffer@@Base+0xb3c>
   1a3fc:	ldr	r3, [sp, #64]	; 0x40
   1a400:	add	r7, r7, #1
   1a404:	cmp	r3, r7
   1a408:	bne	1a008 <flatcc_emitter_copy_buffer@@Base+0x5a8>
   1a40c:	ldr	r3, [r6, #24]
   1a410:	cmp	r3, #0
   1a414:	bne	19ec8 <flatcc_emitter_copy_buffer@@Base+0x468>
   1a418:	ldr	r3, [r6, #4]
   1a41c:	mov	r1, #30
   1a420:	sub	r3, r8, r3
   1a424:	add	r3, r3, #1
   1a428:	str	r8, [r6, #36]	; 0x24
   1a42c:	str	r3, [r6, #20]
   1a430:	str	r1, [r6, #24]
   1a434:	b	19ec8 <flatcc_emitter_copy_buffer@@Base+0x468>
   1a438:	add	r8, r8, #1
   1a43c:	b	1a3e0 <flatcc_emitter_copy_buffer@@Base+0x980>
   1a440:	ldr	r3, [r6, #24]
   1a444:	cmp	r3, #0
   1a448:	bne	1a150 <flatcc_emitter_copy_buffer@@Base+0x6f0>
   1a44c:	ldr	r3, [r6, #4]
   1a450:	mov	r2, #5
   1a454:	sub	r3, r8, r3
   1a458:	add	r3, r3, #1
   1a45c:	str	r8, [r6, #36]	; 0x24
   1a460:	str	r3, [r6, #20]
   1a464:	str	r2, [r6, #24]
   1a468:	b	1a150 <flatcc_emitter_copy_buffer@@Base+0x6f0>
   1a46c:	ldrb	r1, [r4, #2]
   1a470:	cmp	r1, #32
   1a474:	addhi	r8, r4, #2
   1a478:	bls	1a24c <flatcc_emitter_copy_buffer@@Base+0x7ec>
   1a47c:	cmp	r5, r8
   1a480:	bne	1a3f4 <flatcc_emitter_copy_buffer@@Base+0x994>
   1a484:	mov	r8, r5
   1a488:	b	1a280 <flatcc_emitter_copy_buffer@@Base+0x820>
   1a48c:	cmp	r2, #32
   1a490:	bhi	1a32c <flatcc_emitter_copy_buffer@@Base+0x8cc>
   1a494:	sub	r2, r2, #9
   1a498:	cmp	r2, #23
   1a49c:	ldrls	pc, [pc, r2, lsl #2]
   1a4a0:	b	1a558 <flatcc_emitter_copy_buffer@@Base+0xaf8>
   1a4a4:	andeq	sl, r1, r0, asr r5
   1a4a8:	andeq	sl, r1, r4, lsr #10
   1a4ac:	andeq	sl, r1, r8, asr r5
   1a4b0:	andeq	sl, r1, r8, asr r5
   1a4b4:	andeq	sl, r1, r4, lsl #10
   1a4b8:	andeq	sl, r1, r8, asr r5
   1a4bc:	andeq	sl, r1, r8, asr r5
   1a4c0:	andeq	sl, r1, r8, asr r5
   1a4c4:	andeq	sl, r1, r8, asr r5
   1a4c8:	andeq	sl, r1, r8, asr r5
   1a4cc:	andeq	sl, r1, r8, asr r5
   1a4d0:	andeq	sl, r1, r8, asr r5
   1a4d4:	andeq	sl, r1, r8, asr r5
   1a4d8:	andeq	sl, r1, r8, asr r5
   1a4dc:	andeq	sl, r1, r8, asr r5
   1a4e0:	andeq	sl, r1, r8, asr r5
   1a4e4:	andeq	sl, r1, r8, asr r5
   1a4e8:	andeq	sl, r1, r8, asr r5
   1a4ec:	andeq	sl, r1, r8, asr r5
   1a4f0:	andeq	sl, r1, r8, asr r5
   1a4f4:	andeq	sl, r1, r8, asr r5
   1a4f8:	andeq	sl, r1, r8, asr r5
   1a4fc:	andeq	sl, r1, r8, asr r5
   1a500:	strdeq	sl, [r1], -r8
   1a504:	sub	r3, r5, r1
   1a508:	cmp	r3, #1
   1a50c:	movle	r3, r0
   1a510:	ldrbgt	r3, [r1, #1]
   1a514:	subgt	r3, r3, #10
   1a518:	clzgt	r3, r3
   1a51c:	lsrgt	r3, r3, #5
   1a520:	add	r1, r1, r3
   1a524:	ldr	r3, [r6, #16]
   1a528:	add	r1, r1, #1
   1a52c:	add	r3, r3, #1
   1a530:	str	r1, [r6, #4]
   1a534:	str	r3, [r6, #16]
   1a538:	cmp	r5, r1
   1a53c:	beq	1a824 <flatcc_emitter_copy_buffer@@Base+0xdc4>
   1a540:	ldrb	r2, [r1]
   1a544:	cmp	r2, #32
   1a548:	bls	1a494 <flatcc_emitter_copy_buffer@@Base+0xa34>
   1a54c:	b	1a32c <flatcc_emitter_copy_buffer@@Base+0x8cc>
   1a550:	add	r1, r1, #1
   1a554:	b	1a538 <flatcc_emitter_copy_buffer@@Base+0xad8>
   1a558:	ldr	r3, [r6, #24]
   1a55c:	cmp	r3, #0
   1a560:	bne	1a150 <flatcc_emitter_copy_buffer@@Base+0x6f0>
   1a564:	ldr	r3, [r6, #4]
   1a568:	mov	r2, #5
   1a56c:	sub	r3, r1, r3
   1a570:	add	r3, r3, #1
   1a574:	str	r1, [r6, #36]	; 0x24
   1a578:	add	r7, r7, #1
   1a57c:	str	r3, [r6, #20]
   1a580:	str	r2, [r6, #24]
   1a584:	b	19f20 <flatcc_emitter_copy_buffer@@Base+0x4c0>
   1a588:	ldrb	r3, [r4, #2]
   1a58c:	cmp	r3, #32
   1a590:	bls	1a2f4 <flatcc_emitter_copy_buffer@@Base+0x894>
   1a594:	add	r1, r4, #2
   1a598:	b	1a32c <flatcc_emitter_copy_buffer@@Base+0x8cc>
   1a59c:	add	r1, r8, #1
   1a5a0:	sub	r3, r5, r1
   1a5a4:	cmp	r3, #1
   1a5a8:	ble	1a5bc <flatcc_emitter_copy_buffer@@Base+0xb5c>
   1a5ac:	ldrb	r3, [r8, #1]
   1a5b0:	cmp	r3, #32
   1a5b4:	bhi	1a32c <flatcc_emitter_copy_buffer@@Base+0x8cc>
   1a5b8:	beq	1a82c <flatcc_emitter_copy_buffer@@Base+0xdcc>
   1a5bc:	mov	r0, #0
   1a5c0:	cmp	r5, r1
   1a5c4:	beq	1a824 <flatcc_emitter_copy_buffer@@Base+0xdc4>
   1a5c8:	ldrb	r2, [r1]
   1a5cc:	cmp	r2, #32
   1a5d0:	bne	1a638 <flatcc_emitter_copy_buffer@@Base+0xbd8>
   1a5d4:	add	r3, r1, #1
   1a5d8:	b	1a5e8 <flatcc_emitter_copy_buffer@@Base+0xb88>
   1a5dc:	ldrb	r2, [r3], #1
   1a5e0:	cmp	r2, #32
   1a5e4:	bne	1a638 <flatcc_emitter_copy_buffer@@Base+0xbd8>
   1a5e8:	cmp	r5, r3
   1a5ec:	mov	r1, r3
   1a5f0:	bne	1a5dc <flatcc_emitter_copy_buffer@@Base+0xb7c>
   1a5f4:	b	1a32c <flatcc_emitter_copy_buffer@@Base+0x8cc>
   1a5f8:	sub	r3, r5, r1
   1a5fc:	cmp	r3, #1
   1a600:	movle	r3, r0
   1a604:	ldrbgt	r3, [r1, #1]
   1a608:	subgt	r3, r3, #10
   1a60c:	clzgt	r3, r3
   1a610:	lsrgt	r3, r3, #5
   1a614:	add	r1, r1, r3
   1a618:	ldr	r3, [r6, #16]
   1a61c:	add	r1, r1, #1
   1a620:	add	r3, r3, #1
   1a624:	str	r1, [r6, #4]
   1a628:	str	r3, [r6, #16]
   1a62c:	cmp	r5, r1
   1a630:	beq	1a824 <flatcc_emitter_copy_buffer@@Base+0xdc4>
   1a634:	ldrb	r2, [r1]
   1a638:	cmp	r2, #32
   1a63c:	bhi	1a32c <flatcc_emitter_copy_buffer@@Base+0x8cc>
   1a640:	sub	r2, r2, #9
   1a644:	cmp	r2, #23
   1a648:	ldrls	pc, [pc, r2, lsl #2]
   1a64c:	b	1a558 <flatcc_emitter_copy_buffer@@Base+0xaf8>
   1a650:			; <UNDEFINED> instruction: 0x0001a6b0
   1a654:	andeq	sl, r1, r8, lsl r6
   1a658:	andeq	sl, r1, r8, asr r5
   1a65c:	andeq	sl, r1, r8, asr r5
   1a660:	strdeq	sl, [r1], -r8
   1a664:	andeq	sl, r1, r8, asr r5
   1a668:	andeq	sl, r1, r8, asr r5
   1a66c:	andeq	sl, r1, r8, asr r5
   1a670:	andeq	sl, r1, r8, asr r5
   1a674:	andeq	sl, r1, r8, asr r5
   1a678:	andeq	sl, r1, r8, asr r5
   1a67c:	andeq	sl, r1, r8, asr r5
   1a680:	andeq	sl, r1, r8, asr r5
   1a684:	andeq	sl, r1, r8, asr r5
   1a688:	andeq	sl, r1, r8, asr r5
   1a68c:	andeq	sl, r1, r8, asr r5
   1a690:	andeq	sl, r1, r8, asr r5
   1a694:	andeq	sl, r1, r8, asr r5
   1a698:	andeq	sl, r1, r8, asr r5
   1a69c:	andeq	sl, r1, r8, asr r5
   1a6a0:	andeq	sl, r1, r8, asr r5
   1a6a4:	andeq	sl, r1, r8, asr r5
   1a6a8:	andeq	sl, r1, r8, asr r5
   1a6ac:	andeq	sl, r1, r0, asr #11
   1a6b0:	add	r1, r1, #1
   1a6b4:	b	1a62c <flatcc_emitter_copy_buffer@@Base+0xbcc>
   1a6b8:	cmp	r1, #32
   1a6bc:	bhi	1a778 <flatcc_emitter_copy_buffer@@Base+0xd18>
   1a6c0:	sub	r1, r1, #9
   1a6c4:	cmp	r1, #23
   1a6c8:	ldrls	pc, [pc, r1, lsl #2]
   1a6cc:	b	1a7e8 <flatcc_emitter_copy_buffer@@Base+0xd88>
   1a6d0:	andeq	sl, r1, r0, ror #15
   1a6d4:	andeq	sl, r1, r0, asr r7
   1a6d8:	andeq	sl, r1, r8, ror #15
   1a6dc:	andeq	sl, r1, r8, ror #15
   1a6e0:	andeq	sl, r1, r0, lsr r7
   1a6e4:	andeq	sl, r1, r8, ror #15
   1a6e8:	andeq	sl, r1, r8, ror #15
   1a6ec:	andeq	sl, r1, r8, ror #15
   1a6f0:	andeq	sl, r1, r8, ror #15
   1a6f4:	andeq	sl, r1, r8, ror #15
   1a6f8:	andeq	sl, r1, r8, ror #15
   1a6fc:	andeq	sl, r1, r8, ror #15
   1a700:	andeq	sl, r1, r8, ror #15
   1a704:	andeq	sl, r1, r8, ror #15
   1a708:	andeq	sl, r1, r8, ror #15
   1a70c:	andeq	sl, r1, r8, ror #15
   1a710:	andeq	sl, r1, r8, ror #15
   1a714:	andeq	sl, r1, r8, ror #15
   1a718:	andeq	sl, r1, r8, ror #15
   1a71c:	andeq	sl, r1, r8, ror #15
   1a720:	andeq	sl, r1, r8, ror #15
   1a724:	andeq	sl, r1, r8, ror #15
   1a728:	andeq	sl, r1, r8, ror #15
   1a72c:			; <UNDEFINED> instruction: 0x00019fbc
   1a730:	sub	r3, r5, r8
   1a734:	cmp	r3, #1
   1a738:	movle	r3, r0
   1a73c:	ldrbgt	r3, [r8, #1]
   1a740:	subgt	r3, r3, #10
   1a744:	clzgt	r3, r3
   1a748:	lsrgt	r3, r3, #5
   1a74c:	add	r8, r8, r3
   1a750:	ldr	r3, [r6, #16]
   1a754:	add	r8, r8, #1
   1a758:	add	r3, r3, #1
   1a75c:	str	r8, [r6, #4]
   1a760:	str	r3, [r6, #16]
   1a764:	cmp	r5, r8
   1a768:	beq	1a86c <flatcc_emitter_copy_buffer@@Base+0xe0c>
   1a76c:	ldrb	r1, [r8]
   1a770:	cmp	r1, #32
   1a774:	bls	1a6c0 <flatcc_emitter_copy_buffer@@Base+0xc60>
   1a778:	cmp	r1, #93	; 0x5d
   1a77c:	bne	19ff0 <flatcc_emitter_copy_buffer@@Base+0x590>
   1a780:	add	r1, r8, #1
   1a784:	sub	r3, r5, r1
   1a788:	cmp	r3, #1
   1a78c:	ble	1a7a0 <flatcc_emitter_copy_buffer@@Base+0xd40>
   1a790:	ldrb	r3, [r8, #1]
   1a794:	cmp	r3, #32
   1a798:	bhi	1a7d8 <flatcc_emitter_copy_buffer@@Base+0xd78>
   1a79c:	beq	1a874 <flatcc_emitter_copy_buffer@@Base+0xe14>
   1a7a0:	mov	r0, #0
   1a7a4:	cmp	r5, r1
   1a7a8:	beq	1a984 <flatcc_emitter_copy_buffer@@Base+0xf24>
   1a7ac:	ldrb	r3, [r1]
   1a7b0:	cmp	r3, #32
   1a7b4:	bne	1a88c <flatcc_emitter_copy_buffer@@Base+0xe2c>
   1a7b8:	add	r2, r1, #1
   1a7bc:	b	1a7cc <flatcc_emitter_copy_buffer@@Base+0xd6c>
   1a7c0:	ldrb	r3, [r2], #1
   1a7c4:	cmp	r3, #32
   1a7c8:	bne	1a88c <flatcc_emitter_copy_buffer@@Base+0xe2c>
   1a7cc:	cmp	r2, r5
   1a7d0:	mov	r1, r2
   1a7d4:	bne	1a7c0 <flatcc_emitter_copy_buffer@@Base+0xd60>
   1a7d8:	mov	r7, #0
   1a7dc:	b	1a190 <flatcc_emitter_copy_buffer@@Base+0x730>
   1a7e0:	add	r8, r8, #1
   1a7e4:	b	1a764 <flatcc_emitter_copy_buffer@@Base+0xd04>
   1a7e8:	ldr	r3, [r6, #24]
   1a7ec:	cmp	r3, #0
   1a7f0:	beq	1a844 <flatcc_emitter_copy_buffer@@Base+0xde4>
   1a7f4:	ldr	r3, [sp, #64]	; 0x40
   1a7f8:	cmp	r3, #0
   1a7fc:	beq	19ec8 <flatcc_emitter_copy_buffer@@Base+0x468>
   1a800:	mov	r8, r5
   1a804:	b	19ffc <flatcc_emitter_copy_buffer@@Base+0x59c>
   1a808:	ldrb	r1, [r4, #2]
   1a80c:	cmp	r1, #32
   1a810:	addhi	r8, r4, #2
   1a814:	bls	19fb8 <flatcc_emitter_copy_buffer@@Base+0x558>
   1a818:	cmp	r5, r8
   1a81c:	bne	1a778 <flatcc_emitter_copy_buffer@@Base+0xd18>
   1a820:	b	19ff0 <flatcc_emitter_copy_buffer@@Base+0x590>
   1a824:	mov	r1, r5
   1a828:	b	1a32c <flatcc_emitter_copy_buffer@@Base+0x8cc>
   1a82c:	ldrb	r3, [r8, #2]
   1a830:	cmp	r3, #32
   1a834:	addhi	r1, r8, #2
   1a838:	addhi	r7, r7, #1
   1a83c:	bls	1a5bc <flatcc_emitter_copy_buffer@@Base+0xb5c>
   1a840:	b	1a190 <flatcc_emitter_copy_buffer@@Base+0x730>
   1a844:	ldr	r3, [r6, #4]
   1a848:	mov	r2, #5
   1a84c:	sub	r3, r8, r3
   1a850:	add	r3, r3, #1
   1a854:	str	r8, [r6, #36]	; 0x24
   1a858:	str	r3, [r6, #20]
   1a85c:	str	r2, [r6, #24]
   1a860:	b	1a7f4 <flatcc_emitter_copy_buffer@@Base+0xd94>
   1a864:	mov	r4, r1
   1a868:	b	19f30 <flatcc_emitter_copy_buffer@@Base+0x4d0>
   1a86c:	mov	r8, r5
   1a870:	b	19ff0 <flatcc_emitter_copy_buffer@@Base+0x590>
   1a874:	ldrb	r3, [r8, #2]
   1a878:	cmp	r3, #32
   1a87c:	addhi	r1, r8, #2
   1a880:	movhi	r7, #0
   1a884:	bls	1a7a0 <flatcc_emitter_copy_buffer@@Base+0xd40>
   1a888:	b	1a190 <flatcc_emitter_copy_buffer@@Base+0x730>
   1a88c:	cmp	r3, #32
   1a890:	bhi	1a7d8 <flatcc_emitter_copy_buffer@@Base+0xd78>
   1a894:	sub	r3, r3, #9
   1a898:	cmp	r3, #23
   1a89c:	ldrls	pc, [pc, r3, lsl #2]
   1a8a0:	b	1a958 <flatcc_emitter_copy_buffer@@Base+0xef8>
   1a8a4:	andeq	sl, r1, r0, asr r9
   1a8a8:	andeq	sl, r1, r4, lsr #18
   1a8ac:	andeq	sl, r1, r8, asr r9
   1a8b0:	andeq	sl, r1, r8, asr r9
   1a8b4:	andeq	sl, r1, r4, lsl #18
   1a8b8:	andeq	sl, r1, r8, asr r9
   1a8bc:	andeq	sl, r1, r8, asr r9
   1a8c0:	andeq	sl, r1, r8, asr r9
   1a8c4:	andeq	sl, r1, r8, asr r9
   1a8c8:	andeq	sl, r1, r8, asr r9
   1a8cc:	andeq	sl, r1, r8, asr r9
   1a8d0:	andeq	sl, r1, r8, asr r9
   1a8d4:	andeq	sl, r1, r8, asr r9
   1a8d8:	andeq	sl, r1, r8, asr r9
   1a8dc:	andeq	sl, r1, r8, asr r9
   1a8e0:	andeq	sl, r1, r8, asr r9
   1a8e4:	andeq	sl, r1, r8, asr r9
   1a8e8:	andeq	sl, r1, r8, asr r9
   1a8ec:	andeq	sl, r1, r8, asr r9
   1a8f0:	andeq	sl, r1, r8, asr r9
   1a8f4:	andeq	sl, r1, r8, asr r9
   1a8f8:	andeq	sl, r1, r8, asr r9
   1a8fc:	andeq	sl, r1, r8, asr r9
   1a900:	andeq	sl, r1, r4, lsr #15
   1a904:	sub	r3, r5, r1
   1a908:	cmp	r3, #1
   1a90c:	movle	r3, r0
   1a910:	ldrbgt	r3, [r1, #1]
   1a914:	subgt	r3, r3, #10
   1a918:	clzgt	r3, r3
   1a91c:	lsrgt	r3, r3, #5
   1a920:	add	r1, r1, r3
   1a924:	ldr	r3, [r6, #16]
   1a928:	add	r1, r1, #1
   1a92c:	add	r3, r3, #1
   1a930:	str	r1, [r6, #4]
   1a934:	str	r3, [r6, #16]
   1a938:	cmp	r5, r1
   1a93c:	beq	1a984 <flatcc_emitter_copy_buffer@@Base+0xf24>
   1a940:	ldrb	r3, [r1]
   1a944:	cmp	r3, #32
   1a948:	bls	1a894 <flatcc_emitter_copy_buffer@@Base+0xe34>
   1a94c:	b	1a7d8 <flatcc_emitter_copy_buffer@@Base+0xd78>
   1a950:	add	r1, r1, #1
   1a954:	b	1a938 <flatcc_emitter_copy_buffer@@Base+0xed8>
   1a958:	ldr	r7, [r6, #24]
   1a95c:	cmp	r7, #0
   1a960:	bne	19f1c <flatcc_emitter_copy_buffer@@Base+0x4bc>
   1a964:	ldr	r3, [r6, #4]
   1a968:	mov	r2, #5
   1a96c:	sub	r3, r1, r3
   1a970:	add	r3, r3, #1
   1a974:	str	r1, [r6, #36]	; 0x24
   1a978:	str	r3, [r6, #20]
   1a97c:	str	r2, [r6, #24]
   1a980:	b	19f20 <flatcc_emitter_copy_buffer@@Base+0x4c0>
   1a984:	mov	r1, r5
   1a988:	b	1a7d8 <flatcc_emitter_copy_buffer@@Base+0xd78>

0001a98c <grisu3_diy_fp_encode_double@@Base>:
   1a98c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1a990:	sub	sp, sp, #60	; 0x3c
   1a994:	mov	sl, r0
   1a998:	ldr	lr, [sp, #96]	; 0x60
   1a99c:	mov	fp, r1
   1a9a0:	cmp	lr, #0
   1a9a4:	mov	r6, r3
   1a9a8:	movne	lr, #4
   1a9ac:	orrs	r3, sl, fp
   1a9b0:	sub	r2, r2, r6
   1a9b4:	beq	1aedc <grisu3_diy_fp_encode_double@@Base+0x550>
   1a9b8:	ldr	r1, [pc, #1312]	; 1aee0 <grisu3_diy_fp_encode_double@@Base+0x554>
   1a9bc:	mov	r0, #0
   1a9c0:	and	r0, r0, sl
   1a9c4:	and	r1, r1, fp
   1a9c8:	orrs	r3, r0, r1
   1a9cc:	movne	ip, #0
   1a9d0:	bne	1aa0c <grisu3_diy_fp_encode_double@@Base+0x80>
   1a9d4:	mvn	r4, #9
   1a9d8:	lsl	r3, fp, #10
   1a9dc:	lsl	r1, sl, #10
   1a9e0:	orr	r3, r3, sl, lsr #22
   1a9e4:	mov	sl, r1
   1a9e8:	ldr	r1, [pc, #1264]	; 1aee0 <grisu3_diy_fp_encode_double@@Base+0x554>
   1a9ec:	mov	r0, #0
   1a9f0:	and	r0, r0, sl
   1a9f4:	and	r1, r1, r3
   1a9f8:	mov	fp, r3
   1a9fc:	orrs	r3, r0, r1
   1aa00:	mov	ip, r4
   1aa04:	sub	r4, r4, #10
   1aa08:	beq	1a9d8 <grisu3_diy_fp_encode_double@@Base+0x4c>
   1aa0c:	cmp	sl, #0
   1aa10:	sbcs	r3, fp, #0
   1aa14:	blt	1aa30 <grisu3_diy_fp_encode_double@@Base+0xa4>
   1aa18:	adds	sl, sl, sl
   1aa1c:	adc	fp, fp, fp
   1aa20:	cmp	sl, #0
   1aa24:	sbcs	r3, fp, #0
   1aa28:	sub	ip, ip, #1
   1aa2c:	bge	1aa18 <grisu3_diy_fp_encode_double@@Base+0x8c>
   1aa30:	rsb	r3, ip, #0
   1aa34:	cmn	r2, #348	; 0x15c
   1aa38:	lsl	r3, lr, r3
   1aa3c:	str	r3, [sp, #20]
   1aa40:	blt	1aec8 <grisu3_diy_fp_encode_double@@Base+0x53c>
   1aa44:	cmp	r2, #348	; 0x15c
   1aa48:	bge	1aeb4 <grisu3_diy_fp_encode_double@@Base+0x528>
   1aa4c:	add	r1, r2, #348	; 0x15c
   1aa50:	ldr	r3, [pc, #1164]	; 1aee4 <grisu3_diy_fp_encode_double@@Base+0x558>
   1aa54:	asr	r1, r1, #3
   1aa58:	add	r1, r3, r1, lsl #4
   1aa5c:	ldrsh	r7, [r1, #66]	; 0x42
   1aa60:	ldrd	r4, [r1, #56]	; 0x38
   1aa64:	ldrsh	r1, [r1, #64]	; 0x40
   1aa68:	cmp	r2, r7
   1aa6c:	strd	r4, [sp]
   1aa70:	str	r1, [sp, #40]	; 0x28
   1aa74:	blt	1aea0 <grisu3_diy_fp_encode_double@@Base+0x514>
   1aa78:	add	r1, r7, #7
   1aa7c:	cmp	r2, r1
   1aa80:	bgt	1ae8c <grisu3_diy_fp_encode_double@@Base+0x500>
   1aa84:	cmp	r2, r7
   1aa88:	beq	1ab74 <grisu3_diy_fp_encode_double@@Base+0x1e8>
   1aa8c:	sub	r2, r2, r7
   1aa90:	sub	r7, r2, #1
   1aa94:	cmp	r7, #6
   1aa98:	bhi	1ae78 <grisu3_diy_fp_encode_double@@Base+0x4ec>
   1aa9c:	ldr	r0, [pc, #1092]	; 1aee8 <grisu3_diy_fp_encode_double@@Base+0x55c>
   1aaa0:	lsl	r1, r7, #4
   1aaa4:	mov	r3, #0
   1aaa8:	ldrd	r4, [r0, r1]
   1aaac:	add	r1, r0, r1
   1aab0:	str	r1, [sp, #44]	; 0x2c
   1aab4:	mov	r8, r4
   1aab8:	mov	r0, r4
   1aabc:	strd	r4, [sp, #24]
   1aac0:	umull	r4, r5, sl, r5
   1aac4:	mov	r1, #0
   1aac8:	strd	r4, [sp, #32]
   1aacc:	umull	r4, r5, fp, r8
   1aad0:	mul	lr, sl, r1
   1aad4:	mla	r2, fp, r1, r5
   1aad8:	mla	lr, r8, r3, lr
   1aadc:	ldr	r1, [sp, #28]
   1aae0:	umull	r8, r9, sl, r0
   1aae4:	ldr	r0, [sp, #36]	; 0x24
   1aae8:	strd	r4, [sp, #48]	; 0x30
   1aaec:	mla	r3, r1, r3, r0
   1aaf0:	add	r0, lr, r9
   1aaf4:	mov	lr, #0
   1aaf8:	str	r0, [sp, #8]
   1aafc:	str	lr, [sp, #12]
   1ab00:	mov	r4, r2
   1ab04:	mov	r0, r3
   1ab08:	ldrd	r2, [sp, #8]
   1ab0c:	ldr	r8, [sp, #48]	; 0x30
   1ab10:	add	r6, r6, #1
   1ab14:	adds	r2, r2, r8
   1ab18:	adc	r3, r3, #0
   1ab1c:	adds	r0, r0, r4
   1ab20:	ldr	r4, [sp, #28]
   1ab24:	adc	r1, lr, lr
   1ab28:	adds	r2, r2, #-2147483648	; 0x80000000
   1ab2c:	umlal	r0, r1, r4, fp
   1ab30:	mov	fp, r1
   1ab34:	ldr	r1, [sp, #44]	; 0x2c
   1ab38:	adc	r3, r3, #0
   1ab3c:	mov	sl, r0
   1ab40:	ldr	r4, [r1, #8]
   1ab44:	ldr	r1, [sp, #32]
   1ab48:	add	r7, r6, r7
   1ab4c:	adds	r2, r2, r1
   1ab50:	adc	r3, r3, #0
   1ab54:	adds	sl, sl, r3
   1ab58:	adc	fp, fp, lr
   1ab5c:	cmp	r7, #19
   1ab60:	add	ip, ip, r4
   1ab64:	ldrgt	r3, [sp, #20]
   1ab68:	add	ip, ip, #64	; 0x40
   1ab6c:	addgt	r3, r3, #4
   1ab70:	strgt	r3, [sp, #20]
   1ab74:	ldrd	r0, [sp]
   1ab78:	mov	r3, #0
   1ab7c:	mov	r5, #0
   1ab80:	mov	r2, r0
   1ab84:	umull	r6, r7, sl, r1
   1ab88:	umull	r8, r9, fp, r2
   1ab8c:	mul	lr, sl, r3
   1ab90:	mla	r9, fp, r3, r9
   1ab94:	ldr	r3, [sp, #4]
   1ab98:	umull	r0, r1, sl, r2
   1ab9c:	mla	r0, r2, r5, lr
   1aba0:	mla	lr, r3, r5, r7
   1aba4:	add	r2, r0, r1
   1aba8:	adds	r2, r2, r8
   1abac:	mov	r0, lr
   1abb0:	ldr	r4, [sp, #4]
   1abb4:	mov	lr, #0
   1abb8:	adc	r3, lr, #0
   1abbc:	adds	r0, r0, r9
   1abc0:	adc	r1, lr, lr
   1abc4:	umlal	r0, r1, r4, fp
   1abc8:	adds	r2, r2, #-2147483648	; 0x80000000
   1abcc:	adc	r3, r3, #0
   1abd0:	adds	r2, r2, r6
   1abd4:	adc	r3, r3, #0
   1abd8:	adds	r6, r3, r0
   1abdc:	ldr	r3, [sp, #40]	; 0x28
   1abe0:	adc	r7, lr, r1
   1abe4:	add	ip, ip, r3
   1abe8:	ldr	r3, [sp, #20]
   1abec:	cmp	r3, lr
   1abf0:	moveq	r2, #8
   1abf4:	movne	r2, #9
   1abf8:	orrs	r1, r6, r7
   1abfc:	add	r2, r3, r2
   1ac00:	add	lr, ip, #64	; 0x40
   1ac04:	beq	1aedc <grisu3_diy_fp_encode_double@@Base+0x550>
   1ac08:	ldr	r1, [pc, #720]	; 1aee0 <grisu3_diy_fp_encode_double@@Base+0x554>
   1ac0c:	mov	r0, #0
   1ac10:	and	r0, r0, r6
   1ac14:	and	r1, r1, r7
   1ac18:	orrs	r3, r0, r1
   1ac1c:	bne	1ae50 <grisu3_diy_fp_encode_double@@Base+0x4c4>
   1ac20:	add	ip, ip, #54	; 0x36
   1ac24:	lsl	r3, r7, #10
   1ac28:	lsl	r1, r6, #10
   1ac2c:	orr	r3, r3, r6, lsr #22
   1ac30:	mov	r6, r1
   1ac34:	ldr	r1, [pc, #676]	; 1aee0 <grisu3_diy_fp_encode_double@@Base+0x554>
   1ac38:	mov	r0, #0
   1ac3c:	and	r1, r1, r3
   1ac40:	and	r0, r0, r6
   1ac44:	mov	r7, r3
   1ac48:	orrs	r3, r0, r1
   1ac4c:	mov	r3, ip
   1ac50:	sub	ip, ip, #10
   1ac54:	beq	1ac24 <grisu3_diy_fp_encode_double@@Base+0x298>
   1ac58:	cmp	r6, #0
   1ac5c:	sbcs	r1, r7, #0
   1ac60:	blt	1ac7c <grisu3_diy_fp_encode_double@@Base+0x2f0>
   1ac64:	adds	r6, r6, r6
   1ac68:	adc	r7, r7, r7
   1ac6c:	cmp	r6, #0
   1ac70:	sbcs	r1, r7, #0
   1ac74:	sub	r3, r3, #1
   1ac78:	bge	1ac64 <grisu3_diy_fp_encode_double@@Base+0x2d8>
   1ac7c:	ldr	r0, [pc, #616]	; 1aeec <grisu3_diy_fp_encode_double@@Base+0x560>
   1ac80:	sub	lr, lr, r3
   1ac84:	add	r1, r3, #64	; 0x40
   1ac88:	cmp	r1, r0
   1ac8c:	lsl	r2, r2, lr
   1ac90:	blt	1add4 <grisu3_diy_fp_encode_double@@Base+0x448>
   1ac94:	mov	r1, #0
   1ac98:	mov	lr, r1
   1ac9c:	mov	r0, #4
   1aca0:	lsr	r4, r6, lr
   1aca4:	rsb	r6, lr, #32
   1aca8:	sub	ip, lr, #32
   1acac:	orr	r4, r4, r7, lsl r6
   1acb0:	orr	r4, r4, r7, lsr ip
   1acb4:	add	ip, r2, r0
   1acb8:	cmp	lr, ip
   1acbc:	add	r3, lr, r3
   1acc0:	lsr	r5, r7, lr
   1acc4:	blt	1acec <grisu3_diy_fp_encode_double@@Base+0x360>
   1acc8:	adds	r4, r4, #1
   1accc:	adc	r5, r5, #0
   1acd0:	mov	r6, #0
   1acd4:	and	r7, r5, #2097152	; 0x200000
   1acd8:	orrs	lr, r6, r7
   1acdc:	beq	1acec <grisu3_diy_fp_encode_double@@Base+0x360>
   1ace0:	lsrs	r5, r5, #1
   1ace4:	rrx	r4, r4
   1ace8:	add	r3, r3, #1
   1acec:	ldr	r7, [pc, #508]	; 1aef0 <grisu3_diy_fp_encode_double@@Base+0x564>
   1acf0:	mvn	r6, #0
   1acf4:	cmp	r5, r7
   1acf8:	cmpeq	r4, r6
   1acfc:	bls	1ad18 <grisu3_diy_fp_encode_double@@Base+0x38c>
   1ad00:	lsrs	r5, r5, #1
   1ad04:	rrx	r4, r4
   1ad08:	cmp	r5, r7
   1ad0c:	cmpeq	r4, r6
   1ad10:	add	r3, r3, #1
   1ad14:	bhi	1ad00 <grisu3_diy_fp_encode_double@@Base+0x374>
   1ad18:	ldr	r8, [pc, #468]	; 1aef4 <grisu3_diy_fp_encode_double@@Base+0x568>
   1ad1c:	cmp	r3, r8
   1ad20:	movlt	r8, #0
   1ad24:	movlt	r9, #0
   1ad28:	blt	1ada8 <grisu3_diy_fp_encode_double@@Base+0x41c>
   1ad2c:	beq	1ad7c <grisu3_diy_fp_encode_double@@Base+0x3f0>
   1ad30:	mov	r6, #0
   1ad34:	and	r7, r5, #1048576	; 0x100000
   1ad38:	orrs	lr, r6, r7
   1ad3c:	addne	r3, r3, #1072	; 0x430
   1ad40:	addne	r3, r3, #3
   1ad44:	movne	r8, #0
   1ad48:	lslne	r9, r3, #20
   1ad4c:	beq	1ad68 <grisu3_diy_fp_encode_double@@Base+0x3dc>
   1ad50:	b	1ad90 <grisu3_diy_fp_encode_double@@Base+0x404>
   1ad54:	mov	r6, #0
   1ad58:	and	r7, r5, #1048576	; 0x100000
   1ad5c:	orrs	r6, r6, r7
   1ad60:	bne	1ae34 <grisu3_diy_fp_encode_double@@Base+0x4a8>
   1ad64:	mov	r3, lr
   1ad68:	adds	r4, r4, r4
   1ad6c:	sub	lr, r3, #1
   1ad70:	adc	r5, r5, r5
   1ad74:	cmp	lr, r8
   1ad78:	bne	1ad54 <grisu3_diy_fp_encode_double@@Base+0x3c8>
   1ad7c:	mov	r8, #0
   1ad80:	and	r9, r5, #1048576	; 0x100000
   1ad84:	orrs	r3, r8, r9
   1ad88:	movne	r8, #0
   1ad8c:	movne	r9, #1048576	; 0x100000
   1ad90:	ldr	r7, [pc, #352]	; 1aef8 <grisu3_diy_fp_encode_double@@Base+0x56c>
   1ad94:	mvn	r6, #0
   1ad98:	and	r4, r4, r6
   1ad9c:	and	r5, r5, r7
   1ada0:	orr	r8, r8, r4
   1ada4:	orr	r9, r9, r5
   1ada8:	ldr	r3, [sp, #100]	; 0x64
   1adac:	cmp	ip, r1
   1adb0:	sub	r0, r0, r2
   1adb4:	movgt	ip, #0
   1adb8:	movle	ip, #1
   1adbc:	cmp	r0, r1
   1adc0:	movlt	r0, ip
   1adc4:	orrge	r0, ip, #1
   1adc8:	strd	r8, [r3]
   1adcc:	add	sp, sp, #60	; 0x3c
   1add0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1add4:	mvn	r0, #1072	; 0x430
   1add8:	cmp	r1, r0
   1addc:	blt	1ae48 <grisu3_diy_fp_encode_double@@Base+0x4bc>
   1ade0:	add	r1, r3, #1136	; 0x470
   1ade4:	add	r1, r1, #2
   1ade8:	rsb	lr, r1, #64	; 0x40
   1adec:	cmp	lr, #60	; 0x3c
   1adf0:	rsbgt	r1, r1, #2
   1adf4:	ble	1ae58 <grisu3_diy_fp_encode_double@@Base+0x4cc>
   1adf8:	rsb	r0, r1, #32
   1adfc:	lsr	ip, r6, r1
   1ae00:	orr	ip, ip, r7, lsl r0
   1ae04:	sub	r0, r1, #32
   1ae08:	lsr	lr, r7, r1
   1ae0c:	orr	ip, ip, r7, lsr r0
   1ae10:	asr	r2, r2, r1
   1ae14:	add	r3, r3, r1
   1ae18:	mov	r1, #0
   1ae1c:	mov	r7, lr
   1ae20:	mov	r6, ip
   1ae24:	add	r2, r2, #9
   1ae28:	mov	r0, r1
   1ae2c:	mov	lr, #62	; 0x3e
   1ae30:	b	1aca0 <grisu3_diy_fp_encode_double@@Base+0x314>
   1ae34:	add	r3, r3, #1072	; 0x430
   1ae38:	add	r3, r3, #2
   1ae3c:	mov	r8, #0
   1ae40:	lsl	r9, r3, #20
   1ae44:	b	1ad90 <grisu3_diy_fp_encode_double@@Base+0x404>
   1ae48:	mov	r1, #2
   1ae4c:	b	1adf8 <grisu3_diy_fp_encode_double@@Base+0x46c>
   1ae50:	mov	r3, lr
   1ae54:	b	1ac58 <grisu3_diy_fp_encode_double@@Base+0x2cc>
   1ae58:	rsb	r1, r1, #63	; 0x3f
   1ae5c:	mov	ip, #1
   1ae60:	mov	r0, #8
   1ae64:	lsl	r4, ip, r1
   1ae68:	and	r4, r4, r6
   1ae6c:	lsl	r0, r0, r1
   1ae70:	lsl	r1, r4, #3
   1ae74:	b	1aca0 <grisu3_diy_fp_encode_double@@Base+0x314>
   1ae78:	ldr	r3, [pc, #124]	; 1aefc <grisu3_diy_fp_encode_double@@Base+0x570>
   1ae7c:	mov	r2, #185	; 0xb9
   1ae80:	ldr	r1, [pc, #120]	; 1af00 <grisu3_diy_fp_encode_double@@Base+0x574>
   1ae84:	ldr	r0, [pc, #120]	; 1af04 <grisu3_diy_fp_encode_double@@Base+0x578>
   1ae88:	bl	124d8 <__assert_fail@plt>
   1ae8c:	add	r3, r3, #24
   1ae90:	mov	r2, #89	; 0x59
   1ae94:	ldr	r1, [pc, #100]	; 1af00 <grisu3_diy_fp_encode_double@@Base+0x574>
   1ae98:	ldr	r0, [pc, #104]	; 1af08 <grisu3_diy_fp_encode_double@@Base+0x57c>
   1ae9c:	bl	124d8 <__assert_fail@plt>
   1aea0:	add	r3, r3, #24
   1aea4:	mov	r2, #88	; 0x58
   1aea8:	ldr	r1, [pc, #80]	; 1af00 <grisu3_diy_fp_encode_double@@Base+0x574>
   1aeac:	ldr	r0, [pc, #88]	; 1af0c <grisu3_diy_fp_encode_double@@Base+0x580>
   1aeb0:	bl	124d8 <__assert_fail@plt>
   1aeb4:	ldr	r3, [pc, #84]	; 1af10 <grisu3_diy_fp_encode_double@@Base+0x584>
   1aeb8:	mov	r2, #81	; 0x51
   1aebc:	ldr	r1, [pc, #60]	; 1af00 <grisu3_diy_fp_encode_double@@Base+0x574>
   1aec0:	ldr	r0, [pc, #76]	; 1af14 <grisu3_diy_fp_encode_double@@Base+0x588>
   1aec4:	bl	124d8 <__assert_fail@plt>
   1aec8:	ldr	r3, [pc, #64]	; 1af10 <grisu3_diy_fp_encode_double@@Base+0x584>
   1aecc:	mov	r2, #80	; 0x50
   1aed0:	ldr	r1, [pc, #40]	; 1af00 <grisu3_diy_fp_encode_double@@Base+0x574>
   1aed4:	ldr	r0, [pc, #60]	; 1af18 <grisu3_diy_fp_encode_double@@Base+0x58c>
   1aed8:	bl	124d8 <__assert_fail@plt>
   1aedc:	bl	125f8 <__assert_fail@plt+0x120>
   1aee0:			; <UNDEFINED> instruction: 0xffc00000
   1aee4:	muleq	r2, r0, r8
   1aee8:	andeq	r3, r3, r8, asr r0
   1aeec:			; <UNDEFINED> instruction: 0xfffffc0e
   1aef0:			; <UNDEFINED> instruction: 0x001fffff
   1aef4:			; <UNDEFINED> instruction: 0xfffffbce
   1aef8:	strdeq	pc, [pc], -pc	; <UNPREDICTABLE>
   1aefc:	andeq	r1, r2, r8, lsr lr
   1af00:	andeq	r2, r2, ip, lsl #3
   1af04:	andeq	r2, r2, ip, asr r2
   1af08:	andeq	r2, r2, r0, asr #4
   1af0c:	andeq	r2, r2, r0, lsr r2
   1af10:	andeq	r1, r2, r8, lsr #17
   1af14:	andeq	r2, r2, r4, lsl #4
   1af18:	andeq	r2, r2, r4, ror #3
   1af1c:	cmp	r1, #1000	; 0x3e8
   1af20:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1af24:	addle	r1, r1, #1
   1af28:	addgt	lr, r0, #1000	; 0x3e8
   1af2c:	mov	r4, #0
   1af30:	mov	r5, #0
   1af34:	addle	lr, r0, r1
   1af38:	addgt	lr, lr, #1
   1af3c:	cmp	lr, r0
   1af40:	sub	sp, sp, #44	; 0x2c
   1af44:	mov	fp, r2
   1af48:	mov	sl, r0
   1af4c:	strd	r4, [r2]
   1af50:	beq	1b48c <grisu3_diy_fp_encode_double@@Base+0xb00>
   1af54:	ldrb	r0, [r0]
   1af58:	cmp	r0, #45	; 0x2d
   1af5c:	movne	r2, #0
   1af60:	movne	r3, sl
   1af64:	strne	r2, [sp, #16]
   1af68:	beq	1b31c <grisu3_diy_fp_encode_double@@Base+0x990>
   1af6c:	cmp	r0, #48	; 0x30
   1af70:	beq	1b33c <grisu3_diy_fp_encode_double@@Base+0x9b0>
   1af74:	sub	r2, r0, #49	; 0x31
   1af78:	cmp	r2, #8
   1af7c:	bhi	1b07c <grisu3_diy_fp_encode_double@@Base+0x6f0>
   1af80:	add	r9, r3, #1
   1af84:	sub	r0, r0, #48	; 0x30
   1af88:	cmp	lr, r9
   1af8c:	asr	r1, r0, #31
   1af90:	beq	1b8ec <grisu3_diy_fp_encode_double@@Base+0xf60>
   1af94:	ldrb	ip, [r3, #1]
   1af98:	sub	r3, ip, #48	; 0x30
   1af9c:	cmp	r3, #9
   1afa0:	movhi	r4, r9
   1afa4:	movhi	r9, #0
   1afa8:	bhi	1b00c <grisu3_diy_fp_encode_double@@Base+0x680>
   1afac:	add	r5, r9, #1
   1afb0:	mov	r8, #10
   1afb4:	add	r7, pc, #988	; 0x3dc
   1afb8:	ldrd	r6, [r7]
   1afbc:	b	1afd0 <grisu3_diy_fp_encode_double@@Base+0x644>
   1afc0:	cmp	r1, r7
   1afc4:	cmpeq	r0, r6
   1afc8:	bhi	1b098 <grisu3_diy_fp_encode_double@@Base+0x70c>
   1afcc:	mov	r5, r3
   1afd0:	umull	r2, r3, r0, r8
   1afd4:	mla	r3, r8, r1, r3
   1afd8:	adds	r0, r2, ip
   1afdc:	adc	r1, r3, #0
   1afe0:	subs	r0, r0, #48	; 0x30
   1afe4:	sbc	r1, r1, #0
   1afe8:	cmp	lr, r5
   1afec:	mov	r4, r5
   1aff0:	beq	1b720 <grisu3_diy_fp_encode_double@@Base+0xd94>
   1aff4:	ldrb	ip, [r5]
   1aff8:	add	r3, r5, #1
   1affc:	sub	r2, ip, #48	; 0x30
   1b000:	cmp	r2, #9
   1b004:	bls	1afc0 <grisu3_diy_fp_encode_double@@Base+0x634>
   1b008:	sub	r9, r5, r9
   1b00c:	mov	r8, #0
   1b010:	mov	r2, r8
   1b014:	sub	r3, ip, #49	; 0x31
   1b018:	cmp	r3, #8
   1b01c:	bhi	1b258 <grisu3_diy_fp_encode_double@@Base+0x8cc>
   1b020:	add	r6, r4, #1
   1b024:	cmp	lr, r6
   1b028:	add	r5, r2, #1
   1b02c:	beq	1b3c8 <grisu3_diy_fp_encode_double@@Base+0xa3c>
   1b030:	ldrb	ip, [r4, #1]
   1b034:	sub	r3, ip, #48	; 0x30
   1b038:	cmp	r3, #9
   1b03c:	bhi	1b24c <grisu3_diy_fp_encode_double@@Base+0x8c0>
   1b040:	sub	r2, r2, r4
   1b044:	add	r4, r4, #2
   1b048:	b	1b05c <grisu3_diy_fp_encode_double@@Base+0x6d0>
   1b04c:	ldrb	ip, [r4], #1
   1b050:	sub	r3, ip, #48	; 0x30
   1b054:	cmp	r3, #9
   1b058:	bhi	1b24c <grisu3_diy_fp_encode_double@@Base+0x8c0>
   1b05c:	cmp	r4, lr
   1b060:	add	r5, r2, r4
   1b064:	mov	r6, r4
   1b068:	bne	1b04c <grisu3_diy_fp_encode_double@@Base+0x6c0>
   1b06c:	add	r5, r5, r9
   1b070:	mov	r4, lr
   1b074:	mov	r8, #1
   1b078:	b	1b0ec <grisu3_diy_fp_encode_double@@Base+0x760>
   1b07c:	ldr	r3, [sp, #16]
   1b080:	cmp	r3, #0
   1b084:	moveq	r4, sl
   1b088:	movne	r4, #0
   1b08c:	mov	r0, r4
   1b090:	add	sp, sp, #44	; 0x2c
   1b094:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1b098:	cmp	ip, #52	; 0x34
   1b09c:	movls	r2, #0
   1b0a0:	movhi	r2, #1
   1b0a4:	adds	r0, r0, r2
   1b0a8:	adc	r1, r1, #0
   1b0ac:	cmp	ip, #48	; 0x30
   1b0b0:	sub	r9, r4, r9
   1b0b4:	movne	r8, #1
   1b0b8:	movne	r2, #0
   1b0bc:	beq	1b0d4 <grisu3_diy_fp_encode_double@@Base+0x748>
   1b0c0:	b	1b014 <grisu3_diy_fp_encode_double@@Base+0x688>
   1b0c4:	ldrb	ip, [r3]
   1b0c8:	add	r3, r3, #1
   1b0cc:	cmp	ip, #48	; 0x30
   1b0d0:	bne	1b390 <grisu3_diy_fp_encode_double@@Base+0xa04>
   1b0d4:	cmp	lr, r3
   1b0d8:	mov	r4, r3
   1b0dc:	sub	r2, r3, r5
   1b0e0:	bne	1b0c4 <grisu3_diy_fp_encode_double@@Base+0x738>
   1b0e4:	add	r5, r2, r9
   1b0e8:	mov	r8, #1
   1b0ec:	cmp	lr, r4
   1b0f0:	beq	1b3c8 <grisu3_diy_fp_encode_double@@Base+0xa3c>
   1b0f4:	orrs	r3, r0, r1
   1b0f8:	moveq	r2, #1
   1b0fc:	movne	r2, #0
   1b100:	cmn	r5, #324	; 0x144
   1b104:	movge	r3, #0
   1b108:	movlt	r3, #1
   1b10c:	orrs	r3, r2, r3
   1b110:	bne	1b228 <grisu3_diy_fp_encode_double@@Base+0x89c>
   1b114:	ldr	r3, [pc, #652]	; 1b3a8 <grisu3_diy_fp_encode_double@@Base+0xa1c>
   1b118:	cmp	r5, r3
   1b11c:	bgt	1b3b8 <grisu3_diy_fp_encode_double@@Base+0xa2c>
   1b120:	ldr	r3, [pc, #644]	; 1b3ac <grisu3_diy_fp_encode_double@@Base+0xa20>
   1b124:	mvn	r2, #0
   1b128:	cmp	r1, r3
   1b12c:	cmpeq	r0, r2
   1b130:	movls	r3, #1
   1b134:	movhi	r3, #0
   1b138:	cmp	r5, #22
   1b13c:	movhi	r3, #0
   1b140:	andls	r3, r3, #1
   1b144:	cmp	r3, #0
   1b148:	beq	1b4b4 <grisu3_diy_fp_encode_double@@Base+0xb28>
   1b14c:	bl	20960 <flatcc_json_parser_struct_as_root@@Base+0x418>
   1b150:	sub	r9, r5, r9
   1b154:	add	r3, r9, #22
   1b158:	vmov	d7, r0, r1
   1b15c:	cmp	r3, #44	; 0x2c
   1b160:	ldrls	pc, [pc, r3, lsl #2]
   1b164:	b	1b224 <grisu3_diy_fp_encode_double@@Base+0x898>
   1b168:	andeq	fp, r1, r8, lsl r6
   1b16c:	andeq	fp, r1, r4, lsr #12
   1b170:	andeq	fp, r1, ip, lsl #12
   1b174:	andeq	fp, r1, r4, ror #13
   1b178:	ldrdeq	fp, [r1], -r8
   1b17c:	andeq	fp, r1, ip, asr #13
   1b180:	andeq	fp, r1, r0, asr #13
   1b184:			; <UNDEFINED> instruction: 0x0001b6b4
   1b188:	andeq	fp, r1, r8, lsr #13
   1b18c:	muleq	r1, ip, r6
   1b190:	muleq	r1, r0, r6
   1b194:	andeq	fp, r1, r4, lsl #13
   1b198:	andeq	fp, r1, r8, ror r6
   1b19c:	andeq	fp, r1, ip, ror #12
   1b1a0:	andeq	fp, r1, r0, ror #12
   1b1a4:	andeq	fp, r1, r4, asr r6
   1b1a8:	andeq	fp, r1, r8, asr #12
   1b1ac:	andeq	fp, r1, ip, lsr r6
   1b1b0:	andeq	fp, r1, r0, lsr r6
   1b1b4:	muleq	r1, r4, r5
   1b1b8:	andeq	fp, r1, r8, lsl #11
   1b1bc:	andeq	fp, r1, ip, ror r5
   1b1c0:	andeq	fp, r1, r4, lsr #4
   1b1c4:	andeq	fp, r1, r4, ror #10
   1b1c8:	andeq	fp, r1, r8, asr r5
   1b1cc:	andeq	fp, r1, ip, asr #10
   1b1d0:	andeq	fp, r1, r0, asr #10
   1b1d4:	andeq	fp, r1, r4, lsr r5
   1b1d8:	andeq	fp, r1, r8, lsr #10
   1b1dc:	andeq	fp, r1, ip, lsl r5
   1b1e0:	andeq	fp, r1, r0, lsl r5
   1b1e4:	andeq	fp, r1, r4, lsl #10
   1b1e8:	strdeq	fp, [r1], -r8
   1b1ec:	andeq	fp, r1, ip, ror #9
   1b1f0:	andeq	fp, r1, ip, lsl r2
   1b1f4:	strdeq	fp, [r1], -r4
   1b1f8:	andeq	fp, r1, r8, ror #11
   1b1fc:	ldrdeq	fp, [r1], -ip
   1b200:	ldrdeq	fp, [r1], -r0
   1b204:	andeq	fp, r1, r4, asr #11
   1b208:			; <UNDEFINED> instruction: 0x0001b5b8
   1b20c:	andeq	fp, r1, ip, lsr #11
   1b210:	andeq	fp, r1, r0, lsr #11
   1b214:	andeq	fp, r1, r0, lsl #12
   1b218:	andeq	fp, r1, r0, ror r5
   1b21c:	vldr	d6, [pc, #380]	; 1b3a0 <grisu3_diy_fp_encode_double@@Base+0xa14>
   1b220:	vmul.f64	d7, d7, d6
   1b224:	vstr	d7, [fp]
   1b228:	ldr	r3, [sp, #16]
   1b22c:	cmp	r3, #0
   1b230:	beq	1b08c <grisu3_diy_fp_encode_double@@Base+0x700>
   1b234:	vldr	d7, [fp]
   1b238:	mov	r0, r4
   1b23c:	vneg.f64	d7, d7
   1b240:	vstr	d7, [fp]
   1b244:	add	sp, sp, #44	; 0x2c
   1b248:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1b24c:	mov	r2, r5
   1b250:	mov	r4, r6
   1b254:	mov	r8, #1
   1b258:	cmp	ip, #46	; 0x2e
   1b25c:	beq	1b3d0 <grisu3_diy_fp_encode_double@@Base+0xa44>
   1b260:	cmp	lr, r4
   1b264:	add	r5, r2, r9
   1b268:	beq	1b3c8 <grisu3_diy_fp_encode_double@@Base+0xa3c>
   1b26c:	orr	ip, ip, #32
   1b270:	cmp	ip, #101	; 0x65
   1b274:	bne	1b0f4 <grisu3_diy_fp_encode_double@@Base+0x768>
   1b278:	sub	r3, lr, r4
   1b27c:	cmp	r3, #1
   1b280:	ble	1b3c8 <grisu3_diy_fp_encode_double@@Base+0xa3c>
   1b284:	ldrb	r2, [r4, #1]
   1b288:	cmp	r2, #43	; 0x2b
   1b28c:	beq	1b704 <grisu3_diy_fp_encode_double@@Base+0xd78>
   1b290:	cmp	r2, #45	; 0x2d
   1b294:	beq	1b8c8 <grisu3_diy_fp_encode_double@@Base+0xf3c>
   1b298:	add	ip, r4, #1
   1b29c:	mov	r3, #0
   1b2a0:	str	r3, [sp, #8]
   1b2a4:	sub	r2, r2, #48	; 0x30
   1b2a8:	uxtb	r3, r2
   1b2ac:	cmp	r3, #9
   1b2b0:	bhi	1b3c8 <grisu3_diy_fp_encode_double@@Base+0xa3c>
   1b2b4:	add	r4, ip, #1
   1b2b8:	cmp	lr, r4
   1b2bc:	beq	1b308 <grisu3_diy_fp_encode_double@@Base+0x97c>
   1b2c0:	ldrb	r3, [ip, #1]
   1b2c4:	sub	r6, r3, #48	; 0x30
   1b2c8:	cmp	r6, #9
   1b2cc:	bhi	1b6f0 <grisu3_diy_fp_encode_double@@Base+0xd64>
   1b2d0:	ldr	r7, [pc, #216]	; 1b3b0 <grisu3_diy_fp_encode_double@@Base+0xa24>
   1b2d4:	add	ip, ip, #2
   1b2d8:	b	1b2ec <grisu3_diy_fp_encode_double@@Base+0x960>
   1b2dc:	ldrb	r3, [ip], #1
   1b2e0:	sub	r6, r3, #48	; 0x30
   1b2e4:	cmp	r6, #9
   1b2e8:	bhi	1b6f0 <grisu3_diy_fp_encode_double@@Base+0xd64>
   1b2ec:	add	r4, r2, r2, lsl #2
   1b2f0:	cmp	r2, r7
   1b2f4:	add	r4, r3, r4, lsl #1
   1b2f8:	suble	r2, r4, #48	; 0x30
   1b2fc:	cmp	lr, ip
   1b300:	mov	r4, ip
   1b304:	bne	1b2dc <grisu3_diy_fp_encode_double@@Base+0x950>
   1b308:	ldr	r3, [sp, #8]
   1b30c:	cmp	r3, #0
   1b310:	beq	1b3c8 <grisu3_diy_fp_encode_double@@Base+0xa3c>
   1b314:	sub	r5, r5, r2
   1b318:	b	1b0ec <grisu3_diy_fp_encode_double@@Base+0x760>
   1b31c:	add	r3, sl, #1
   1b320:	cmp	lr, r3
   1b324:	beq	1b3c8 <grisu3_diy_fp_encode_double@@Base+0xa3c>
   1b328:	ldrb	r0, [sl, #1]
   1b32c:	mov	r2, #1
   1b330:	str	r2, [sp, #16]
   1b334:	cmp	r0, #48	; 0x30
   1b338:	bne	1af74 <grisu3_diy_fp_encode_double@@Base+0x5e8>
   1b33c:	add	r4, r3, #1
   1b340:	cmp	lr, r4
   1b344:	beq	1b49c <grisu3_diy_fp_encode_double@@Base+0xb10>
   1b348:	ldrb	ip, [r3, #1]
   1b34c:	orr	r2, ip, #32
   1b350:	cmp	r2, #120	; 0x78
   1b354:	moveq	r4, sl
   1b358:	beq	1b08c <grisu3_diy_fp_encode_double@@Base+0x700>
   1b35c:	cmp	ip, #48	; 0x30
   1b360:	bne	1b380 <grisu3_diy_fp_encode_double@@Base+0x9f4>
   1b364:	add	r3, r3, #2
   1b368:	cmp	lr, r3
   1b36c:	mov	r4, r3
   1b370:	beq	1b49c <grisu3_diy_fp_encode_double@@Base+0xb10>
   1b374:	ldrb	ip, [r3], #1
   1b378:	cmp	ip, #48	; 0x30
   1b37c:	beq	1b368 <grisu3_diy_fp_encode_double@@Base+0x9dc>
   1b380:	mov	r9, r4
   1b384:	mov	r0, #0
   1b388:	mov	r1, #0
   1b38c:	b	1af98 <grisu3_diy_fp_encode_double@@Base+0x60c>
   1b390:	mov	r8, #1
   1b394:	b	1b014 <grisu3_diy_fp_encode_double@@Base+0x688>
   1b398:	ldmibls	r9, {r3, r4, r7, r8, fp, ip, pc}
   1b39c:	ldmibne	r9, {r0, r3, r4, r7, r8, fp, ip, pc}
   1b3a0:	andge	r0, r0, #0
   1b3a4:	rsbmi	r1, sp, #148, 20	; 0x94000
   1b3a8:	andeq	r0, r0, r6, lsr r1
   1b3ac:			; <UNDEFINED> instruction: 0x001fffff
   1b3b0:	strdeq	r7, [r0], -pc	; <UNPREDICTABLE>
   1b3b4:	svcvc	0x00f00000	; IMB
   1b3b8:	ldr	r3, [pc, #-12]	; 1b3b4 <grisu3_diy_fp_encode_double@@Base+0xa28>
   1b3bc:	mov	r2, #0
   1b3c0:	strd	r2, [fp]
   1b3c4:	b	1b228 <grisu3_diy_fp_encode_double@@Base+0x89c>
   1b3c8:	mov	r4, #0
   1b3cc:	b	1b08c <grisu3_diy_fp_encode_double@@Base+0x700>
   1b3d0:	ldrb	r3, [r4, #1]
   1b3d4:	add	ip, r4, #1
   1b3d8:	mov	r5, ip
   1b3dc:	str	ip, [sp, #20]
   1b3e0:	sub	ip, r3, #48	; 0x30
   1b3e4:	cmp	ip, #9
   1b3e8:	bhi	1b3c8 <grisu3_diy_fp_encode_double@@Base+0xa3c>
   1b3ec:	cmp	lr, r5
   1b3f0:	beq	1b908 <grisu3_diy_fp_encode_double@@Base+0xf7c>
   1b3f4:	add	r7, pc, #980	; 0x3d4
   1b3f8:	ldrd	r6, [r7]
   1b3fc:	cmp	r1, r7
   1b400:	cmpeq	r0, r6
   1b404:	bhi	1b8f8 <grisu3_diy_fp_encode_double@@Base+0xf6c>
   1b408:	add	r4, r4, #2
   1b40c:	strd	r6, [sp, #8]
   1b410:	mov	ip, #10
   1b414:	str	r9, [sp, #24]
   1b418:	str	r8, [sp, #28]
   1b41c:	b	1b444 <grisu3_diy_fp_encode_double@@Base+0xab8>
   1b420:	ldrb	r3, [r4]
   1b424:	add	r4, r4, #1
   1b428:	sub	r5, r3, #48	; 0x30
   1b42c:	cmp	r5, #9
   1b430:	bhi	1b728 <grisu3_diy_fp_encode_double@@Base+0xd9c>
   1b434:	ldrd	r8, [sp, #8]
   1b438:	cmp	r1, r9
   1b43c:	cmpeq	r0, r8
   1b440:	bhi	1b888 <grisu3_diy_fp_encode_double@@Base+0xefc>
   1b444:	umull	r6, r7, r0, ip
   1b448:	mla	r7, ip, r1, r7
   1b44c:	adds	r0, r6, r3
   1b450:	adc	r1, r7, #0
   1b454:	subs	r0, r0, #48	; 0x30
   1b458:	sbc	r1, r1, #0
   1b45c:	cmp	lr, r4
   1b460:	sub	r2, r2, #1
   1b464:	mov	r6, r4
   1b468:	bne	1b420 <grisu3_diy_fp_encode_double@@Base+0xa94>
   1b46c:	ldr	r3, [sp, #20]
   1b470:	ldr	r9, [sp, #24]
   1b474:	ldr	r8, [sp, #28]
   1b478:	sub	r3, lr, r3
   1b47c:	mov	r4, lr
   1b480:	add	r9, r9, r3
   1b484:	add	r5, r2, r9
   1b488:	b	1b0ec <grisu3_diy_fp_encode_double@@Base+0x760>
   1b48c:	mov	r4, lr
   1b490:	mov	r0, r4
   1b494:	add	sp, sp, #44	; 0x2c
   1b498:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1b49c:	mov	r9, #0
   1b4a0:	mov	r0, #0
   1b4a4:	mov	r1, #0
   1b4a8:	mov	r5, r9
   1b4ac:	mov	r8, #0
   1b4b0:	b	1b0ec <grisu3_diy_fp_encode_double@@Base+0x760>
   1b4b4:	stm	sp, {r8, fp}
   1b4b8:	mov	r3, r9
   1b4bc:	mov	r2, r5
   1b4c0:	bl	1a98c <grisu3_diy_fp_encode_double@@Base>
   1b4c4:	cmp	r0, #0
   1b4c8:	bne	1b228 <grisu3_diy_fp_encode_double@@Base+0x89c>
   1b4cc:	mov	r0, sl
   1b4d0:	add	r1, sp, #36	; 0x24
   1b4d4:	bl	124b4 <strtod@plt>
   1b4d8:	ldr	r3, [sp, #36]	; 0x24
   1b4dc:	cmp	r4, r3
   1b4e0:	movcs	r4, r3
   1b4e4:	vstr	d0, [fp]
   1b4e8:	b	1b08c <grisu3_diy_fp_encode_double@@Base+0x700>
   1b4ec:	vldr	d6, [pc, #740]	; 1b7d8 <grisu3_diy_fp_encode_double@@Base+0xe4c>
   1b4f0:	vmul.f64	d7, d7, d6
   1b4f4:	b	1b224 <grisu3_diy_fp_encode_double@@Base+0x898>
   1b4f8:	vldr	d6, [pc, #736]	; 1b7e0 <grisu3_diy_fp_encode_double@@Base+0xe54>
   1b4fc:	vmul.f64	d7, d7, d6
   1b500:	b	1b224 <grisu3_diy_fp_encode_double@@Base+0x898>
   1b504:	vldr	d6, [pc, #732]	; 1b7e8 <grisu3_diy_fp_encode_double@@Base+0xe5c>
   1b508:	vmul.f64	d7, d7, d6
   1b50c:	b	1b224 <grisu3_diy_fp_encode_double@@Base+0x898>
   1b510:	vldr	d6, [pc, #728]	; 1b7f0 <grisu3_diy_fp_encode_double@@Base+0xe64>
   1b514:	vmul.f64	d7, d7, d6
   1b518:	b	1b224 <grisu3_diy_fp_encode_double@@Base+0x898>
   1b51c:	vldr	d6, [pc, #724]	; 1b7f8 <grisu3_diy_fp_encode_double@@Base+0xe6c>
   1b520:	vmul.f64	d7, d7, d6
   1b524:	b	1b224 <grisu3_diy_fp_encode_double@@Base+0x898>
   1b528:	vldr	d6, [pc, #720]	; 1b800 <grisu3_diy_fp_encode_double@@Base+0xe74>
   1b52c:	vmul.f64	d7, d7, d6
   1b530:	b	1b224 <grisu3_diy_fp_encode_double@@Base+0x898>
   1b534:	vldr	d6, [pc, #716]	; 1b808 <grisu3_diy_fp_encode_double@@Base+0xe7c>
   1b538:	vmul.f64	d7, d7, d6
   1b53c:	b	1b224 <grisu3_diy_fp_encode_double@@Base+0x898>
   1b540:	vldr	d6, [pc, #712]	; 1b810 <grisu3_diy_fp_encode_double@@Base+0xe84>
   1b544:	vmul.f64	d7, d7, d6
   1b548:	b	1b224 <grisu3_diy_fp_encode_double@@Base+0x898>
   1b54c:	vldr	d6, [pc, #708]	; 1b818 <grisu3_diy_fp_encode_double@@Base+0xe8c>
   1b550:	vmul.f64	d7, d7, d6
   1b554:	b	1b224 <grisu3_diy_fp_encode_double@@Base+0x898>
   1b558:	vldr	d6, [pc, #704]	; 1b820 <grisu3_diy_fp_encode_double@@Base+0xe94>
   1b55c:	vmul.f64	d7, d7, d6
   1b560:	b	1b224 <grisu3_diy_fp_encode_double@@Base+0x898>
   1b564:	vldr	d6, [pc, #700]	; 1b828 <grisu3_diy_fp_encode_double@@Base+0xe9c>
   1b568:	vmul.f64	d7, d7, d6
   1b56c:	b	1b224 <grisu3_diy_fp_encode_double@@Base+0x898>
   1b570:	vldr	d6, [pc, #696]	; 1b830 <grisu3_diy_fp_encode_double@@Base+0xea4>
   1b574:	vmul.f64	d7, d7, d6
   1b578:	b	1b224 <grisu3_diy_fp_encode_double@@Base+0x898>
   1b57c:	vldr	d6, [pc, #676]	; 1b828 <grisu3_diy_fp_encode_double@@Base+0xe9c>
   1b580:	vdiv.f64	d7, d7, d6
   1b584:	b	1b224 <grisu3_diy_fp_encode_double@@Base+0x898>
   1b588:	vldr	d6, [pc, #656]	; 1b820 <grisu3_diy_fp_encode_double@@Base+0xe94>
   1b58c:	vdiv.f64	d7, d7, d6
   1b590:	b	1b224 <grisu3_diy_fp_encode_double@@Base+0x898>
   1b594:	vldr	d6, [pc, #636]	; 1b818 <grisu3_diy_fp_encode_double@@Base+0xe8c>
   1b598:	vdiv.f64	d7, d7, d6
   1b59c:	b	1b224 <grisu3_diy_fp_encode_double@@Base+0x898>
   1b5a0:	vldr	d6, [pc, #656]	; 1b838 <grisu3_diy_fp_encode_double@@Base+0xeac>
   1b5a4:	vmul.f64	d7, d7, d6
   1b5a8:	b	1b224 <grisu3_diy_fp_encode_double@@Base+0x898>
   1b5ac:	vldr	d6, [pc, #652]	; 1b840 <grisu3_diy_fp_encode_double@@Base+0xeb4>
   1b5b0:	vmul.f64	d7, d7, d6
   1b5b4:	b	1b224 <grisu3_diy_fp_encode_double@@Base+0x898>
   1b5b8:	vldr	d6, [pc, #648]	; 1b848 <grisu3_diy_fp_encode_double@@Base+0xebc>
   1b5bc:	vmul.f64	d7, d7, d6
   1b5c0:	b	1b224 <grisu3_diy_fp_encode_double@@Base+0x898>
   1b5c4:	vldr	d6, [pc, #644]	; 1b850 <grisu3_diy_fp_encode_double@@Base+0xec4>
   1b5c8:	vmul.f64	d7, d7, d6
   1b5cc:	b	1b224 <grisu3_diy_fp_encode_double@@Base+0x898>
   1b5d0:	vldr	d6, [pc, #640]	; 1b858 <grisu3_diy_fp_encode_double@@Base+0xecc>
   1b5d4:	vmul.f64	d7, d7, d6
   1b5d8:	b	1b224 <grisu3_diy_fp_encode_double@@Base+0x898>
   1b5dc:	vldr	d6, [pc, #636]	; 1b860 <grisu3_diy_fp_encode_double@@Base+0xed4>
   1b5e0:	vmul.f64	d7, d7, d6
   1b5e4:	b	1b224 <grisu3_diy_fp_encode_double@@Base+0x898>
   1b5e8:	vldr	d6, [pc, #632]	; 1b868 <grisu3_diy_fp_encode_double@@Base+0xedc>
   1b5ec:	vmul.f64	d7, d7, d6
   1b5f0:	b	1b224 <grisu3_diy_fp_encode_double@@Base+0x898>
   1b5f4:	vldr	d6, [pc, #628]	; 1b870 <grisu3_diy_fp_encode_double@@Base+0xee4>
   1b5f8:	vmul.f64	d7, d7, d6
   1b5fc:	b	1b224 <grisu3_diy_fp_encode_double@@Base+0x898>
   1b600:	vldr	d6, [pc, #624]	; 1b878 <grisu3_diy_fp_encode_double@@Base+0xeec>
   1b604:	vmul.f64	d7, d7, d6
   1b608:	b	1b224 <grisu3_diy_fp_encode_double@@Base+0x898>
   1b60c:	vldr	d6, [pc, #548]	; 1b838 <grisu3_diy_fp_encode_double@@Base+0xeac>
   1b610:	vdiv.f64	d7, d7, d6
   1b614:	b	1b224 <grisu3_diy_fp_encode_double@@Base+0x898>
   1b618:	vldr	d6, [pc, #528]	; 1b830 <grisu3_diy_fp_encode_double@@Base+0xea4>
   1b61c:	vdiv.f64	d7, d7, d6
   1b620:	b	1b224 <grisu3_diy_fp_encode_double@@Base+0x898>
   1b624:	vldr	d6, [pc, #588]	; 1b878 <grisu3_diy_fp_encode_double@@Base+0xeec>
   1b628:	vdiv.f64	d7, d7, d6
   1b62c:	b	1b224 <grisu3_diy_fp_encode_double@@Base+0x898>
   1b630:	vldr	d6, [pc, #472]	; 1b810 <grisu3_diy_fp_encode_double@@Base+0xe84>
   1b634:	vdiv.f64	d7, d7, d6
   1b638:	b	1b224 <grisu3_diy_fp_encode_double@@Base+0x898>
   1b63c:	vldr	d6, [pc, #452]	; 1b808 <grisu3_diy_fp_encode_double@@Base+0xe7c>
   1b640:	vdiv.f64	d7, d7, d6
   1b644:	b	1b224 <grisu3_diy_fp_encode_double@@Base+0x898>
   1b648:	vldr	d6, [pc, #432]	; 1b800 <grisu3_diy_fp_encode_double@@Base+0xe74>
   1b64c:	vdiv.f64	d7, d7, d6
   1b650:	b	1b224 <grisu3_diy_fp_encode_double@@Base+0x898>
   1b654:	vldr	d6, [pc, #412]	; 1b7f8 <grisu3_diy_fp_encode_double@@Base+0xe6c>
   1b658:	vdiv.f64	d7, d7, d6
   1b65c:	b	1b224 <grisu3_diy_fp_encode_double@@Base+0x898>
   1b660:	vldr	d6, [pc, #392]	; 1b7f0 <grisu3_diy_fp_encode_double@@Base+0xe64>
   1b664:	vdiv.f64	d7, d7, d6
   1b668:	b	1b224 <grisu3_diy_fp_encode_double@@Base+0x898>
   1b66c:	vldr	d6, [pc, #372]	; 1b7e8 <grisu3_diy_fp_encode_double@@Base+0xe5c>
   1b670:	vdiv.f64	d7, d7, d6
   1b674:	b	1b224 <grisu3_diy_fp_encode_double@@Base+0x898>
   1b678:	vldr	d6, [pc, #352]	; 1b7e0 <grisu3_diy_fp_encode_double@@Base+0xe54>
   1b67c:	vdiv.f64	d7, d7, d6
   1b680:	b	1b224 <grisu3_diy_fp_encode_double@@Base+0x898>
   1b684:	vldr	d6, [pc, #332]	; 1b7d8 <grisu3_diy_fp_encode_double@@Base+0xe4c>
   1b688:	vdiv.f64	d7, d7, d6
   1b68c:	b	1b224 <grisu3_diy_fp_encode_double@@Base+0x898>
   1b690:	vldr	d6, [pc, #488]	; 1b880 <grisu3_diy_fp_encode_double@@Base+0xef4>
   1b694:	vdiv.f64	d7, d7, d6
   1b698:	b	1b224 <grisu3_diy_fp_encode_double@@Base+0x898>
   1b69c:	vldr	d6, [pc, #460]	; 1b870 <grisu3_diy_fp_encode_double@@Base+0xee4>
   1b6a0:	vdiv.f64	d7, d7, d6
   1b6a4:	b	1b224 <grisu3_diy_fp_encode_double@@Base+0x898>
   1b6a8:	vldr	d6, [pc, #440]	; 1b868 <grisu3_diy_fp_encode_double@@Base+0xedc>
   1b6ac:	vdiv.f64	d7, d7, d6
   1b6b0:	b	1b224 <grisu3_diy_fp_encode_double@@Base+0x898>
   1b6b4:	vldr	d6, [pc, #420]	; 1b860 <grisu3_diy_fp_encode_double@@Base+0xed4>
   1b6b8:	vdiv.f64	d7, d7, d6
   1b6bc:	b	1b224 <grisu3_diy_fp_encode_double@@Base+0x898>
   1b6c0:	vldr	d6, [pc, #400]	; 1b858 <grisu3_diy_fp_encode_double@@Base+0xecc>
   1b6c4:	vdiv.f64	d7, d7, d6
   1b6c8:	b	1b224 <grisu3_diy_fp_encode_double@@Base+0x898>
   1b6cc:	vldr	d6, [pc, #380]	; 1b850 <grisu3_diy_fp_encode_double@@Base+0xec4>
   1b6d0:	vdiv.f64	d7, d7, d6
   1b6d4:	b	1b224 <grisu3_diy_fp_encode_double@@Base+0x898>
   1b6d8:	vldr	d6, [pc, #360]	; 1b848 <grisu3_diy_fp_encode_double@@Base+0xebc>
   1b6dc:	vdiv.f64	d7, d7, d6
   1b6e0:	b	1b224 <grisu3_diy_fp_encode_double@@Base+0x898>
   1b6e4:	vldr	d6, [pc, #340]	; 1b840 <grisu3_diy_fp_encode_double@@Base+0xeb4>
   1b6e8:	vdiv.f64	d7, d7, d6
   1b6ec:	b	1b224 <grisu3_diy_fp_encode_double@@Base+0x898>
   1b6f0:	ldr	r3, [sp, #8]
   1b6f4:	cmp	r3, #0
   1b6f8:	bne	1b314 <grisu3_diy_fp_encode_double@@Base+0x988>
   1b6fc:	add	r5, r5, r2
   1b700:	b	1b0f4 <grisu3_diy_fp_encode_double@@Base+0x768>
   1b704:	add	ip, r4, #2
   1b708:	cmp	lr, ip
   1b70c:	beq	1b3c8 <grisu3_diy_fp_encode_double@@Base+0xa3c>
   1b710:	mov	r3, #0
   1b714:	ldrb	r2, [r4, #2]
   1b718:	str	r3, [sp, #8]
   1b71c:	b	1b2a4 <grisu3_diy_fp_encode_double@@Base+0x918>
   1b720:	sub	r9, lr, r9
   1b724:	b	1b4a8 <grisu3_diy_fp_encode_double@@Base+0xb1c>
   1b728:	ldr	r3, [sp, #20]
   1b72c:	ldr	r9, [sp, #24]
   1b730:	sub	r3, r6, r3
   1b734:	ldr	r8, [sp, #28]
   1b738:	add	r9, r9, r3
   1b73c:	ldrb	ip, [r6]
   1b740:	cmp	ip, #48	; 0x30
   1b744:	bne	1b8e4 <grisu3_diy_fp_encode_double@@Base+0xf58>
   1b748:	sub	r3, r2, r6
   1b74c:	add	r6, r6, #1
   1b750:	cmp	r6, lr
   1b754:	mov	r4, r6
   1b758:	add	r2, r3, r6
   1b75c:	beq	1b484 <grisu3_diy_fp_encode_double@@Base+0xaf8>
   1b760:	ldrb	ip, [r6], #1
   1b764:	cmp	ip, #48	; 0x30
   1b768:	beq	1b750 <grisu3_diy_fp_encode_double@@Base+0xdc4>
   1b76c:	sub	r3, ip, #49	; 0x31
   1b770:	cmp	r3, #8
   1b774:	bhi	1b7c8 <grisu3_diy_fp_encode_double@@Base+0xe3c>
   1b778:	add	r3, r4, #1
   1b77c:	cmp	lr, r3
   1b780:	beq	1b3c8 <grisu3_diy_fp_encode_double@@Base+0xa3c>
   1b784:	ldrb	ip, [r4, #1]
   1b788:	sub	r5, ip, #48	; 0x30
   1b78c:	cmp	r5, #9
   1b790:	bhi	1b7c0 <grisu3_diy_fp_encode_double@@Base+0xe34>
   1b794:	add	r3, r4, #2
   1b798:	b	1b7b0 <grisu3_diy_fp_encode_double@@Base+0xe24>
   1b79c:	ldrb	ip, [r3]
   1b7a0:	add	r3, r3, #1
   1b7a4:	sub	r5, ip, #48	; 0x30
   1b7a8:	cmp	r5, #9
   1b7ac:	bhi	1b7c4 <grisu3_diy_fp_encode_double@@Base+0xe38>
   1b7b0:	cmp	r3, lr
   1b7b4:	mov	r4, r3
   1b7b8:	bne	1b79c <grisu3_diy_fp_encode_double@@Base+0xe10>
   1b7bc:	b	1b0e4 <grisu3_diy_fp_encode_double@@Base+0x758>
   1b7c0:	mov	r4, r3
   1b7c4:	mov	r8, #1
   1b7c8:	add	r5, r2, r9
   1b7cc:	b	1b26c <grisu3_diy_fp_encode_double@@Base+0x8e0>
   1b7d0:	ldmibls	r9, {r3, r4, r7, r8, fp, ip, pc}
   1b7d4:	ldmibne	r9, {r0, r3, r4, r7, r8, fp, ip, pc}
   1b7d8:	stmda	r0, {}	; <UNPREDICTABLE>
   1b7dc:	eorsmi	r4, r7, #7733248	; 0x760000
   1b7e0:	andcs	r0, r0, r0
   1b7e4:	andmi	sl, r2, #95	; 0x5f
   1b7e8:	andeq	r0, r0, r0
   1b7ec:	bicmi	ip, sp, r5, ror #26
   1b7f0:	andeq	r0, r0, r0
   1b7f4:	orrsmi	sp, r7, r4, lsl #15
   1b7f8:	andeq	r0, r0, r0
   1b7fc:	ldrdmi	r1, [r3, #-32]!	; 0xffffffe0
   1b800:	andeq	r0, r0, r0
   1b804:	smlawbmi	lr, r0, r4, r8
   1b808:	andeq	r0, r0, r0
   1b80c:	rscsmi	r6, r8, r0, lsl #20
   1b810:	andeq	r0, r0, r0
   1b814:	sbcmi	r8, r3, r0, lsl #16
   1b818:	andeq	r0, r0, r0
   1b81c:	addmi	r4, pc, r0
   1b820:	andeq	r0, r0, r0
   1b824:	subsmi	r0, r9, r0
   1b828:	andeq	r0, r0, r0
   1b82c:	eormi	r0, r4, r0
   1b830:			; <UNDEFINED> instruction: 0x064dd592
   1b834:	strmi	pc, [r0], #207	; 0xcf
   1b838:	ldmvc	r5!, {r6, sl, fp, pc}
   1b83c:	ldrmi	sl, [r5], #-3869	; 0xfffff0e3
   1b840:	addsvs	r3, r1, r0, lsl #26
   1b844:	mvnmi	r5, #228, 16	; 0xe40000
   1b848:	strbvs	ip, [lr, -r0, lsl #16]
   1b84c:			; <UNDEFINED> instruction: 0x43abc16d
   1b850:	ldrbhi	sl, [r8]
   1b854:	cmnmi	r6, #1459617792	; 0x57000000
   1b858:	strbcc	r8, [r0, r0]!
   1b85c:	movtmi	ip, #4985	; 0x1379
   1b860:	ldrtcs	r0, [r4], -r0
   1b864:	movwmi	r6, #52213	; 0xcbf5
   1b868:	cdpne	0, 9, cr0, cr0, cr0, {0}
   1b86c:	sbcsmi	fp, r6, #196, 24	; 0xc400
   1b870:	strb	r0, [r0, #-0]
   1b874:	adcmi	r3, r2, #156	; 0x9c
   1b878:	usatle	lr, #2, r0, asr #30
   1b87c:	strbmi	r1, [fp], #-2788	; 0xfffff51c
   1b880:	andge	r0, r0, #0
   1b884:	rsbmi	r1, sp, #148, 20	; 0x94000
   1b888:	ldr	r8, [sp, #28]
   1b88c:	ldr	ip, [sp, #20]
   1b890:	cmp	r8, #0
   1b894:	ldr	r9, [sp, #24]
   1b898:	sub	r8, r6, ip
   1b89c:	bne	1b8b4 <grisu3_diy_fp_encode_double@@Base+0xf28>
   1b8a0:	cmp	r3, #52	; 0x34
   1b8a4:	movls	r3, #0
   1b8a8:	movhi	r3, #1
   1b8ac:	adds	r0, r0, r3
   1b8b0:	adc	r1, r1, #0
   1b8b4:	cmp	lr, r6
   1b8b8:	add	r9, r9, r8
   1b8bc:	beq	1b3c8 <grisu3_diy_fp_encode_double@@Base+0xa3c>
   1b8c0:	mov	r8, #1
   1b8c4:	b	1b73c <grisu3_diy_fp_encode_double@@Base+0xdb0>
   1b8c8:	add	ip, r4, #2
   1b8cc:	cmp	lr, ip
   1b8d0:	beq	1b3c8 <grisu3_diy_fp_encode_double@@Base+0xa3c>
   1b8d4:	mov	r3, #1
   1b8d8:	ldrb	r2, [r4, #2]
   1b8dc:	str	r3, [sp, #8]
   1b8e0:	b	1b2a4 <grisu3_diy_fp_encode_double@@Base+0x918>
   1b8e4:	mov	r4, r6
   1b8e8:	b	1b76c <grisu3_diy_fp_encode_double@@Base+0xde0>
   1b8ec:	mov	r4, lr
   1b8f0:	mov	r9, #0
   1b8f4:	b	1b4a8 <grisu3_diy_fp_encode_double@@Base+0xb1c>
   1b8f8:	cmp	r8, #0
   1b8fc:	bne	1b914 <grisu3_diy_fp_encode_double@@Base+0xf88>
   1b900:	mov	r6, r5
   1b904:	b	1b8a0 <grisu3_diy_fp_encode_double@@Base+0xf14>
   1b908:	mov	r4, lr
   1b90c:	mov	r3, #0
   1b910:	b	1b480 <grisu3_diy_fp_encode_double@@Base+0xaf4>
   1b914:	mov	r6, r5
   1b918:	b	1b73c <grisu3_diy_fp_encode_double@@Base+0xdb0>

0001b91c <flatcc_json_parser_error_string@@Base>:
   1b91c:	cmp	r0, #34	; 0x22
   1b920:	ldrls	r3, [pc, #12]	; 1b934 <flatcc_json_parser_error_string@@Base+0x18>
   1b924:	addls	r0, r3, r0, lsl #2
   1b928:	ldrls	r0, [r0, #1476]	; 0x5c4
   1b92c:	ldrhi	r0, [pc, #4]	; 1b938 <flatcc_json_parser_error_string@@Base+0x1c>
   1b930:	bx	lr
   1b934:	muleq	r2, r0, r8
   1b938:	andeq	r2, r2, r8, ror r2

0001b93c <flatcc_json_parser_set_error@@Base>:
   1b93c:	ldr	ip, [r0, #24]
   1b940:	cmp	ip, #0
   1b944:	bne	1b960 <flatcc_json_parser_set_error@@Base+0x24>
   1b948:	ldr	ip, [r0, #4]
   1b94c:	str	r3, [r0, #24]
   1b950:	sub	r3, r1, ip
   1b954:	add	r3, r3, #1
   1b958:	str	r1, [r0, #36]	; 0x24
   1b95c:	str	r3, [r0, #20]
   1b960:	mov	r0, r2
   1b964:	bx	lr

0001b968 <flatcc_json_parser_string_part@@Base>:
   1b968:	cmp	r1, r2
   1b96c:	push	{lr}		; (str lr, [sp, #-4]!)
   1b970:	beq	1b9d8 <flatcc_json_parser_string_part@@Base+0x70>
   1b974:	ldrb	r3, [r1]
   1b978:	cmp	r3, #34	; 0x22
   1b97c:	cmpne	r3, #31
   1b980:	movhi	ip, #1
   1b984:	movls	ip, #0
   1b988:	cmp	r3, #92	; 0x5c
   1b98c:	moveq	ip, #0
   1b990:	andne	ip, ip, #1
   1b994:	cmp	ip, #0
   1b998:	beq	1b9ec <flatcc_json_parser_string_part@@Base+0x84>
   1b99c:	add	ip, r1, #1
   1b9a0:	b	1b9cc <flatcc_json_parser_string_part@@Base+0x64>
   1b9a4:	ldrb	r3, [ip], #1
   1b9a8:	cmp	r3, #34	; 0x22
   1b9ac:	cmpne	r3, #31
   1b9b0:	movhi	lr, #1
   1b9b4:	movls	lr, #0
   1b9b8:	cmp	r3, #92	; 0x5c
   1b9bc:	moveq	lr, #0
   1b9c0:	andne	lr, lr, #1
   1b9c4:	cmp	lr, #0
   1b9c8:	beq	1b9ec <flatcc_json_parser_string_part@@Base+0x84>
   1b9cc:	cmp	ip, r2
   1b9d0:	mov	r1, ip
   1b9d4:	bne	1b9a4 <flatcc_json_parser_string_part@@Base+0x3c>
   1b9d8:	ldr	r3, [r0, #24]
   1b9dc:	cmp	r3, #0
   1b9e0:	beq	1ba30 <flatcc_json_parser_string_part@@Base+0xc8>
   1b9e4:	mov	r0, r2
   1b9e8:	pop	{pc}		; (ldr pc, [sp], #4)
   1b9ec:	cmp	r3, #31
   1b9f0:	bhi	1ba24 <flatcc_json_parser_string_part@@Base+0xbc>
   1b9f4:	ldr	r3, [r0, #24]
   1b9f8:	cmp	r3, #0
   1b9fc:	bne	1b9e4 <flatcc_json_parser_string_part@@Base+0x7c>
   1ba00:	ldr	r3, [r0, #4]
   1ba04:	mov	ip, #17
   1ba08:	sub	r3, r1, r3
   1ba0c:	add	r3, r3, #1
   1ba10:	str	r1, [r0, #36]	; 0x24
   1ba14:	str	r3, [r0, #20]
   1ba18:	str	ip, [r0, #24]
   1ba1c:	mov	r0, r2
   1ba20:	pop	{pc}		; (ldr pc, [sp], #4)
   1ba24:	mov	r2, r1
   1ba28:	mov	r0, r2
   1ba2c:	pop	{pc}		; (ldr pc, [sp], #4)
   1ba30:	ldr	r3, [r0, #4]
   1ba34:	mov	ip, #20
   1ba38:	b	1ba08 <flatcc_json_parser_string_part@@Base+0xa0>

0001ba3c <flatcc_json_parser_space_ext@@Base>:
   1ba3c:	push	{lr}		; (str lr, [sp, #-4]!)
   1ba40:	mov	lr, #0
   1ba44:	cmp	r1, r2
   1ba48:	beq	1bb58 <flatcc_json_parser_space_ext@@Base+0x11c>
   1ba4c:	ldrb	ip, [r1]
   1ba50:	cmp	ip, #32
   1ba54:	bne	1ba80 <flatcc_json_parser_space_ext@@Base+0x44>
   1ba58:	add	r3, r1, #1
   1ba5c:	b	1ba6c <flatcc_json_parser_space_ext@@Base+0x30>
   1ba60:	ldrb	ip, [r3], #1
   1ba64:	cmp	ip, #32
   1ba68:	bne	1ba80 <flatcc_json_parser_space_ext@@Base+0x44>
   1ba6c:	cmp	r3, r2
   1ba70:	mov	r1, r3
   1ba74:	bne	1ba60 <flatcc_json_parser_space_ext@@Base+0x24>
   1ba78:	mov	r0, r1
   1ba7c:	pop	{pc}		; (ldr pc, [sp], #4)
   1ba80:	cmp	ip, #32
   1ba84:	bhi	1ba78 <flatcc_json_parser_space_ext@@Base+0x3c>
   1ba88:	sub	ip, ip, #9
   1ba8c:	cmp	ip, #23
   1ba90:	ldrls	pc, [pc, ip, lsl #2]
   1ba94:	b	1bb4c <flatcc_json_parser_space_ext@@Base+0x110>
   1ba98:	andeq	fp, r1, r4, asr #22
   1ba9c:	andeq	fp, r1, r8, lsl fp
   1baa0:	andeq	fp, r1, ip, asr #22
   1baa4:	andeq	fp, r1, ip, asr #22
   1baa8:	strdeq	fp, [r1], -r8
   1baac:	andeq	fp, r1, ip, asr #22
   1bab0:	andeq	fp, r1, ip, asr #22
   1bab4:	andeq	fp, r1, ip, asr #22
   1bab8:	andeq	fp, r1, ip, asr #22
   1babc:	andeq	fp, r1, ip, asr #22
   1bac0:	andeq	fp, r1, ip, asr #22
   1bac4:	andeq	fp, r1, ip, asr #22
   1bac8:	andeq	fp, r1, ip, asr #22
   1bacc:	andeq	fp, r1, ip, asr #22
   1bad0:	andeq	fp, r1, ip, asr #22
   1bad4:	andeq	fp, r1, ip, asr #22
   1bad8:	andeq	fp, r1, ip, asr #22
   1badc:	andeq	fp, r1, ip, asr #22
   1bae0:	andeq	fp, r1, ip, asr #22
   1bae4:	andeq	fp, r1, ip, asr #22
   1bae8:	andeq	fp, r1, ip, asr #22
   1baec:	andeq	fp, r1, ip, asr #22
   1baf0:	andeq	fp, r1, ip, asr #22
   1baf4:	andeq	fp, r1, r4, asr #20
   1baf8:	sub	r3, r2, r1
   1bafc:	cmp	r3, #1
   1bb00:	movle	r3, lr
   1bb04:	ldrbgt	r3, [r1, #1]
   1bb08:	subgt	r3, r3, #10
   1bb0c:	clzgt	r3, r3
   1bb10:	lsrgt	r3, r3, #5
   1bb14:	add	r1, r1, r3
   1bb18:	ldr	r3, [r0, #16]
   1bb1c:	add	r1, r1, #1
   1bb20:	add	r3, r3, #1
   1bb24:	str	r1, [r0, #4]
   1bb28:	str	r3, [r0, #16]
   1bb2c:	cmp	r2, r1
   1bb30:	beq	1bb58 <flatcc_json_parser_space_ext@@Base+0x11c>
   1bb34:	ldrb	ip, [r1]
   1bb38:	cmp	ip, #32
   1bb3c:	bls	1ba88 <flatcc_json_parser_space_ext@@Base+0x4c>
   1bb40:	b	1ba78 <flatcc_json_parser_space_ext@@Base+0x3c>
   1bb44:	add	r1, r1, #1
   1bb48:	b	1bb2c <flatcc_json_parser_space_ext@@Base+0xf0>
   1bb4c:	ldr	r3, [r0, #24]
   1bb50:	cmp	r3, #0
   1bb54:	beq	1bb64 <flatcc_json_parser_space_ext@@Base+0x128>
   1bb58:	mov	r1, r2
   1bb5c:	mov	r0, r1
   1bb60:	pop	{pc}		; (ldr pc, [sp], #4)
   1bb64:	ldr	r3, [r0, #4]
   1bb68:	str	r1, [r0, #36]	; 0x24
   1bb6c:	sub	r3, r1, r3
   1bb70:	mov	ip, #5
   1bb74:	add	r3, r3, #1
   1bb78:	mov	r1, r2
   1bb7c:	str	r3, [r0, #20]
   1bb80:	str	ip, [r0, #24]
   1bb84:	mov	r0, r1
   1bb88:	pop	{pc}		; (ldr pc, [sp], #4)

0001bb8c <flatcc_json_parser_string_escape@@Base>:
   1bb8c:	push	{r4, r5, lr}
   1bb90:	sub	lr, r2, r1
   1bb94:	cmp	lr, #1
   1bb98:	mov	ip, r0
   1bb9c:	ble	1bbac <flatcc_json_parser_string_escape@@Base+0x20>
   1bba0:	ldrb	r0, [r1]
   1bba4:	cmp	r0, #92	; 0x5c
   1bba8:	beq	1bbec <flatcc_json_parser_string_escape@@Base+0x60>
   1bbac:	mov	r0, #0
   1bbb0:	strb	r0, [r3]
   1bbb4:	ldr	r3, [ip, #24]
   1bbb8:	cmp	r3, r0
   1bbbc:	beq	1bbc8 <flatcc_json_parser_string_escape@@Base+0x3c>
   1bbc0:	mov	r0, r2
   1bbc4:	pop	{r4, r5, pc}
   1bbc8:	ldr	r3, [ip, #4]
   1bbcc:	mov	lr, #18
   1bbd0:	sub	r3, r1, r3
   1bbd4:	add	r3, r3, #1
   1bbd8:	str	r1, [ip, #36]	; 0x24
   1bbdc:	mov	r0, r2
   1bbe0:	str	r3, [ip, #20]
   1bbe4:	str	lr, [ip, #24]
   1bbe8:	pop	{r4, r5, pc}
   1bbec:	ldrb	r0, [r1, #1]
   1bbf0:	sub	r0, r0, #34	; 0x22
   1bbf4:	cmp	r0, #86	; 0x56
   1bbf8:	ldrls	pc, [pc, r0, lsl #2]
   1bbfc:	b	1bf78 <flatcc_json_parser_string_escape@@Base+0x3ec>
   1bc00:	andeq	fp, r1, r4, ror #27
   1bc04:	andeq	fp, r1, r8, ror pc
   1bc08:	andeq	fp, r1, r8, ror pc
   1bc0c:	andeq	fp, r1, r8, ror pc
   1bc10:	andeq	fp, r1, r8, ror pc
   1bc14:	andeq	fp, r1, r8, ror pc
   1bc18:	andeq	fp, r1, r8, ror pc
   1bc1c:	andeq	fp, r1, r8, ror pc
   1bc20:	andeq	fp, r1, r8, ror pc
   1bc24:	andeq	fp, r1, r8, ror pc
   1bc28:	andeq	fp, r1, r8, ror pc
   1bc2c:	andeq	fp, r1, r8, ror pc
   1bc30:	andeq	fp, r1, r8, ror pc
   1bc34:	strdeq	fp, [r1], -ip
   1bc38:	andeq	fp, r1, r8, ror pc
   1bc3c:	andeq	fp, r1, r8, ror pc
   1bc40:	andeq	fp, r1, r8, ror pc
   1bc44:	andeq	fp, r1, r8, ror pc
   1bc48:	andeq	fp, r1, r8, ror pc
   1bc4c:	andeq	fp, r1, r8, ror pc
   1bc50:	andeq	fp, r1, r8, ror pc
   1bc54:	andeq	fp, r1, r8, ror pc
   1bc58:	andeq	fp, r1, r8, ror pc
   1bc5c:	andeq	fp, r1, r8, ror pc
   1bc60:	andeq	fp, r1, r8, ror pc
   1bc64:	andeq	fp, r1, r8, ror pc
   1bc68:	andeq	fp, r1, r8, ror pc
   1bc6c:	andeq	fp, r1, r8, ror pc
   1bc70:	andeq	fp, r1, r8, ror pc
   1bc74:	andeq	fp, r1, r8, ror pc
   1bc78:	andeq	fp, r1, r8, ror pc
   1bc7c:	andeq	fp, r1, r8, ror pc
   1bc80:	andeq	fp, r1, r8, ror pc
   1bc84:	andeq	fp, r1, r8, ror pc
   1bc88:	andeq	fp, r1, r8, ror pc
   1bc8c:	andeq	fp, r1, r8, ror pc
   1bc90:	andeq	fp, r1, r8, ror pc
   1bc94:	andeq	fp, r1, r8, ror pc
   1bc98:	andeq	fp, r1, r8, ror pc
   1bc9c:	andeq	fp, r1, r8, ror pc
   1bca0:	andeq	fp, r1, r8, ror pc
   1bca4:	andeq	fp, r1, r8, ror pc
   1bca8:	andeq	fp, r1, r8, ror pc
   1bcac:	andeq	fp, r1, r8, ror pc
   1bcb0:	andeq	fp, r1, r8, ror pc
   1bcb4:	andeq	fp, r1, r8, ror pc
   1bcb8:	andeq	fp, r1, r8, ror pc
   1bcbc:	andeq	fp, r1, r8, ror pc
   1bcc0:	andeq	fp, r1, r8, ror pc
   1bcc4:	andeq	fp, r1, r8, ror pc
   1bcc8:	andeq	fp, r1, r8, ror pc
   1bccc:	andeq	fp, r1, r8, ror pc
   1bcd0:	andeq	fp, r1, r8, ror pc
   1bcd4:	andeq	fp, r1, r8, ror pc
   1bcd8:	andeq	fp, r1, r8, ror pc
   1bcdc:	andeq	fp, r1, r8, ror pc
   1bce0:	andeq	fp, r1, r8, ror pc
   1bce4:	andeq	fp, r1, r8, ror pc
   1bce8:	andeq	fp, r1, r4, lsl lr
   1bcec:	andeq	fp, r1, r8, ror pc
   1bcf0:	andeq	fp, r1, r8, ror pc
   1bcf4:	andeq	fp, r1, r8, ror pc
   1bcf8:	andeq	fp, r1, r8, ror pc
   1bcfc:	andeq	fp, r1, r8, ror pc
   1bd00:	andeq	fp, r1, ip, lsr #28
   1bd04:	andeq	fp, r1, r8, ror pc
   1bd08:	andeq	fp, r1, r8, ror pc
   1bd0c:	andeq	fp, r1, r8, ror pc
   1bd10:	andeq	fp, r1, r4, asr #28
   1bd14:	andeq	fp, r1, r8, ror pc
   1bd18:	andeq	fp, r1, r8, ror pc
   1bd1c:	andeq	fp, r1, r8, ror pc
   1bd20:	andeq	fp, r1, r8, ror pc
   1bd24:	andeq	fp, r1, r8, ror pc
   1bd28:	andeq	fp, r1, r8, ror pc
   1bd2c:	andeq	fp, r1, r8, ror pc
   1bd30:	andeq	fp, r1, ip, asr lr
   1bd34:	andeq	fp, r1, r8, ror pc
   1bd38:	andeq	fp, r1, r8, ror pc
   1bd3c:	andeq	fp, r1, r8, ror pc
   1bd40:	andeq	fp, r1, r4, ror lr
   1bd44:	andeq	fp, r1, r8, ror pc
   1bd48:	andeq	fp, r1, ip, lsl #29
   1bd4c:	andeq	fp, r1, r4, lsr #29
   1bd50:	andeq	fp, r1, r8, ror pc
   1bd54:	andeq	fp, r1, r8, ror pc
   1bd58:	andeq	fp, r1, ip, asr sp
   1bd5c:	mov	r0, #1
   1bd60:	cmp	lr, #3
   1bd64:	strb	r0, [r3]
   1bd68:	ble	1bbac <flatcc_json_parser_string_escape@@Base+0x20>
   1bd6c:	ldrb	r0, [r1, #2]
   1bd70:	sub	lr, r0, #48	; 0x30
   1bd74:	uxtb	r4, lr
   1bd78:	cmp	r4, #9
   1bd7c:	lslls	r0, lr, #4
   1bd80:	uxtbls	r0, r0
   1bd84:	bls	1bda4 <flatcc_json_parser_string_escape@@Base+0x218>
   1bd88:	orr	r0, r0, #32
   1bd8c:	sub	lr, r0, #97	; 0x61
   1bd90:	cmp	lr, #5
   1bd94:	bhi	1bbac <flatcc_json_parser_string_escape@@Base+0x20>
   1bd98:	sub	r0, r0, #87	; 0x57
   1bd9c:	lsl	r0, r0, #4
   1bda0:	uxtb	r0, r0
   1bda4:	ldrb	lr, [r1, #3]
   1bda8:	sub	r4, lr, #48	; 0x30
   1bdac:	uxtb	r4, r4
   1bdb0:	cmp	r4, #9
   1bdb4:	orrls	r0, r4, r0
   1bdb8:	bls	1bdd8 <flatcc_json_parser_string_escape@@Base+0x24c>
   1bdbc:	orr	lr, lr, #32
   1bdc0:	sub	r4, lr, #97	; 0x61
   1bdc4:	cmp	r4, #5
   1bdc8:	bhi	1bbac <flatcc_json_parser_string_escape@@Base+0x20>
   1bdcc:	sub	lr, lr, #87	; 0x57
   1bdd0:	orr	r0, lr, r0
   1bdd4:	uxtb	r0, r0
   1bdd8:	strb	r0, [r3, #1]
   1bddc:	add	r0, r1, #4
   1bde0:	pop	{r4, r5, pc}
   1bde4:	mov	ip, #1
   1bde8:	mov	r2, #34	; 0x22
   1bdec:	add	r0, r1, #2
   1bdf0:	strb	ip, [r3]
   1bdf4:	strb	r2, [r3, #1]
   1bdf8:	pop	{r4, r5, pc}
   1bdfc:	mov	ip, #1
   1be00:	mov	r2, #47	; 0x2f
   1be04:	add	r0, r1, #2
   1be08:	strb	ip, [r3]
   1be0c:	strb	r2, [r3, #1]
   1be10:	pop	{r4, r5, pc}
   1be14:	mov	ip, #1
   1be18:	mov	r2, #92	; 0x5c
   1be1c:	add	r0, r1, #2
   1be20:	strb	ip, [r3]
   1be24:	strb	r2, [r3, #1]
   1be28:	pop	{r4, r5, pc}
   1be2c:	mov	ip, #1
   1be30:	mov	r2, #8
   1be34:	add	r0, r1, #2
   1be38:	strb	ip, [r3]
   1be3c:	strb	r2, [r3, #1]
   1be40:	pop	{r4, r5, pc}
   1be44:	mov	ip, #1
   1be48:	mov	r2, #12
   1be4c:	add	r0, r1, #2
   1be50:	strb	ip, [r3]
   1be54:	strb	r2, [r3, #1]
   1be58:	pop	{r4, r5, pc}
   1be5c:	mov	ip, #1
   1be60:	mov	r2, #10
   1be64:	add	r0, r1, #2
   1be68:	strb	ip, [r3]
   1be6c:	strb	r2, [r3, #1]
   1be70:	pop	{r4, r5, pc}
   1be74:	mov	ip, #1
   1be78:	mov	r2, #13
   1be7c:	add	r0, r1, #2
   1be80:	strb	ip, [r3]
   1be84:	strb	r2, [r3, #1]
   1be88:	pop	{r4, r5, pc}
   1be8c:	mov	ip, #1
   1be90:	mov	r2, #9
   1be94:	add	r0, r1, #2
   1be98:	strb	ip, [r3]
   1be9c:	strb	r2, [r3, #1]
   1bea0:	pop	{r4, r5, pc}
   1bea4:	cmp	lr, #5
   1bea8:	ble	1bbac <flatcc_json_parser_string_escape@@Base+0x20>
   1beac:	ldrb	r0, [r1, #2]
   1beb0:	sub	lr, r0, #48	; 0x30
   1beb4:	uxtb	r4, lr
   1beb8:	cmp	r4, #9
   1bebc:	lslls	r0, lr, #12
   1bec0:	uxthls	r0, r0
   1bec4:	bls	1bee4 <flatcc_json_parser_string_escape@@Base+0x358>
   1bec8:	orr	r0, r0, #32
   1becc:	sub	lr, r0, #97	; 0x61
   1bed0:	cmp	lr, #5
   1bed4:	bhi	1bbac <flatcc_json_parser_string_escape@@Base+0x20>
   1bed8:	sub	r0, r0, #87	; 0x57
   1bedc:	lsl	r0, r0, #12
   1bee0:	and	r0, r0, #61440	; 0xf000
   1bee4:	ldrb	lr, [r1, #3]
   1bee8:	sub	r4, lr, #48	; 0x30
   1beec:	uxtb	r5, r4
   1bef0:	cmp	r5, #9
   1bef4:	bhi	1bfb0 <flatcc_json_parser_string_escape@@Base+0x424>
   1bef8:	uxth	r4, r4
   1befc:	orr	r0, r0, r4, lsl #8
   1bf00:	and	r0, r0, #65280	; 0xff00
   1bf04:	ldrb	lr, [r1, #4]
   1bf08:	sub	r4, lr, #48	; 0x30
   1bf0c:	uxtb	r5, r4
   1bf10:	cmp	r5, #9
   1bf14:	bhi	1bfd4 <flatcc_json_parser_string_escape@@Base+0x448>
   1bf18:	uxth	r4, r4
   1bf1c:	orr	r0, r0, r4, lsl #4
   1bf20:	uxth	r0, r0
   1bf24:	ldrb	lr, [r1, #5]
   1bf28:	sub	r4, lr, #48	; 0x30
   1bf2c:	uxtb	r5, r4
   1bf30:	cmp	r5, #9
   1bf34:	orrls	r2, r0, r4
   1bf38:	uxthls	r2, r2
   1bf3c:	bls	1bf5c <flatcc_json_parser_string_escape@@Base+0x3d0>
   1bf40:	orr	lr, lr, #32
   1bf44:	sub	r4, lr, #97	; 0x61
   1bf48:	cmp	r4, #5
   1bf4c:	bhi	1bbac <flatcc_json_parser_string_escape@@Base+0x20>
   1bf50:	sub	r2, lr, #87	; 0x57
   1bf54:	orr	r2, r0, r2
   1bf58:	uxth	r2, r2
   1bf5c:	cmp	r2, #127	; 0x7f
   1bf60:	bhi	1bff8 <flatcc_json_parser_string_escape@@Base+0x46c>
   1bf64:	mov	r0, #1
   1bf68:	strb	r2, [r3, #1]
   1bf6c:	strb	r0, [r3]
   1bf70:	add	r0, r1, #6
   1bf74:	pop	{r4, r5, pc}
   1bf78:	mov	r0, #0
   1bf7c:	strb	r0, [r3]
   1bf80:	ldr	r3, [ip, #24]
   1bf84:	cmp	r3, r0
   1bf88:	bne	1bbc0 <flatcc_json_parser_string_escape@@Base+0x34>
   1bf8c:	ldr	r3, [ip, #4]
   1bf90:	mov	r0, r2
   1bf94:	sub	r3, r1, r3
   1bf98:	add	r3, r3, #1
   1bf9c:	mov	r2, #18
   1bfa0:	str	r1, [ip, #36]	; 0x24
   1bfa4:	str	r3, [ip, #20]
   1bfa8:	str	r2, [ip, #24]
   1bfac:	pop	{r4, r5, pc}
   1bfb0:	orr	lr, lr, #32
   1bfb4:	sub	r4, lr, #97	; 0x61
   1bfb8:	cmp	r4, #5
   1bfbc:	bhi	1bbac <flatcc_json_parser_string_escape@@Base+0x20>
   1bfc0:	sub	lr, lr, #87	; 0x57
   1bfc4:	uxth	lr, lr
   1bfc8:	orr	r0, r0, lr, lsl #8
   1bfcc:	and	r0, r0, #65280	; 0xff00
   1bfd0:	b	1bf04 <flatcc_json_parser_string_escape@@Base+0x378>
   1bfd4:	orr	lr, lr, #32
   1bfd8:	sub	r4, lr, #97	; 0x61
   1bfdc:	cmp	r4, #5
   1bfe0:	bhi	1bbac <flatcc_json_parser_string_escape@@Base+0x20>
   1bfe4:	sub	lr, lr, #87	; 0x57
   1bfe8:	uxth	lr, lr
   1bfec:	orr	r0, r0, lr, lsl #4
   1bff0:	uxth	r0, r0
   1bff4:	b	1bf24 <flatcc_json_parser_string_escape@@Base+0x398>
   1bff8:	cmp	r2, #2048	; 0x800
   1bffc:	bcs	1c028 <flatcc_json_parser_string_escape@@Base+0x49c>
   1c000:	and	r0, r2, #63	; 0x3f
   1c004:	mvn	ip, #63	; 0x3f
   1c008:	mvn	r0, r0, lsl #25
   1c00c:	orr	r2, ip, r2, lsr #6
   1c010:	mvn	r0, r0, lsr #25
   1c014:	mov	ip, #2
   1c018:	strb	r0, [r3, #2]
   1c01c:	strb	r2, [r3, #1]
   1c020:	strb	ip, [r3]
   1c024:	b	1bf70 <flatcc_json_parser_string_escape@@Base+0x3e4>
   1c028:	lsl	lr, r2, #20
   1c02c:	mvn	r4, #127	; 0x7f
   1c030:	and	ip, r2, #63	; 0x3f
   1c034:	mvn	r0, #31
   1c038:	orr	r2, r0, r2, lsr #12
   1c03c:	orr	lr, r4, lr, lsr #26
   1c040:	orr	ip, ip, r4
   1c044:	mov	r0, #3
   1c048:	strb	lr, [r3, #2]
   1c04c:	strb	ip, [r3, #3]
   1c050:	strb	r2, [r3, #1]
   1c054:	strb	r0, [r3]
   1c058:	b	1bf70 <flatcc_json_parser_string_escape@@Base+0x3e4>

0001c05c <flatcc_json_parser_skip_constant@@Base>:
   1c05c:	cmp	r1, r2
   1c060:	beq	1c240 <flatcc_json_parser_skip_constant@@Base+0x1e4>
   1c064:	push	{r4, lr}
   1c068:	mov	r4, r0
   1c06c:	ldrb	r3, [r1]
   1c070:	b	1c088 <flatcc_json_parser_skip_constant@@Base+0x2c>
   1c074:	add	ip, r1, #1
   1c078:	cmp	r2, ip
   1c07c:	beq	1c1fc <flatcc_json_parser_skip_constant@@Base+0x1a0>
   1c080:	ldrb	r3, [r1, #1]
   1c084:	mov	r1, ip
   1c088:	sub	ip, r3, #95	; 0x5f
   1c08c:	clz	ip, ip
   1c090:	lsr	ip, ip, #5
   1c094:	orrs	r0, ip, r3, lsr #7
   1c098:	bne	1c074 <flatcc_json_parser_skip_constant@@Base+0x18>
   1c09c:	sub	ip, r3, #48	; 0x30
   1c0a0:	cmp	r3, #46	; 0x2e
   1c0a4:	cmpne	ip, #9
   1c0a8:	movls	lr, #1
   1c0ac:	movhi	lr, #0
   1c0b0:	bls	1c074 <flatcc_json_parser_skip_constant@@Base+0x18>
   1c0b4:	orr	ip, r3, #32
   1c0b8:	sub	ip, ip, #97	; 0x61
   1c0bc:	cmp	ip, #25
   1c0c0:	bls	1c074 <flatcc_json_parser_skip_constant@@Base+0x18>
   1c0c4:	sub	r0, r2, r1
   1c0c8:	cmp	r0, #1
   1c0cc:	ble	1c0dc <flatcc_json_parser_skip_constant@@Base+0x80>
   1c0d0:	cmp	r3, #32
   1c0d4:	bhi	1c204 <flatcc_json_parser_skip_constant@@Base+0x1a8>
   1c0d8:	beq	1c20c <flatcc_json_parser_skip_constant@@Base+0x1b0>
   1c0dc:	mov	r0, r1
   1c0e0:	cmp	r2, r0
   1c0e4:	popeq	{r4, pc}
   1c0e8:	ldrb	r3, [r0]
   1c0ec:	cmp	r3, #32
   1c0f0:	bne	1c110 <flatcc_json_parser_skip_constant@@Base+0xb4>
   1c0f4:	add	ip, r0, #1
   1c0f8:	cmp	ip, r2
   1c0fc:	mov	r0, ip
   1c100:	popeq	{r4, pc}
   1c104:	ldrb	r3, [ip], #1
   1c108:	cmp	r3, #32
   1c10c:	beq	1c0f8 <flatcc_json_parser_skip_constant@@Base+0x9c>
   1c110:	cmp	r3, #32
   1c114:	bhi	1c1d0 <flatcc_json_parser_skip_constant@@Base+0x174>
   1c118:	sub	r3, r3, #9
   1c11c:	cmp	r3, #23
   1c120:	ldrls	pc, [pc, r3, lsl #2]
   1c124:	b	1c1f0 <flatcc_json_parser_skip_constant@@Base+0x194>
   1c128:	andeq	ip, r1, r0, ror #3
   1c12c:	andeq	ip, r1, r8, lsr #3
   1c130:	strdeq	ip, [r1], -r0
   1c134:	strdeq	ip, [r1], -r0
   1c138:	andeq	ip, r1, r8, lsl #3
   1c13c:	strdeq	ip, [r1], -r0
   1c140:	strdeq	ip, [r1], -r0
   1c144:	strdeq	ip, [r1], -r0
   1c148:	strdeq	ip, [r1], -r0
   1c14c:	strdeq	ip, [r1], -r0
   1c150:	strdeq	ip, [r1], -r0
   1c154:	strdeq	ip, [r1], -r0
   1c158:	strdeq	ip, [r1], -r0
   1c15c:	strdeq	ip, [r1], -r0
   1c160:	strdeq	ip, [r1], -r0
   1c164:	strdeq	ip, [r1], -r0
   1c168:	strdeq	ip, [r1], -r0
   1c16c:	strdeq	ip, [r1], -r0
   1c170:	strdeq	ip, [r1], -r0
   1c174:	strdeq	ip, [r1], -r0
   1c178:	strdeq	ip, [r1], -r0
   1c17c:	strdeq	ip, [r1], -r0
   1c180:	strdeq	ip, [r1], -r0
   1c184:	andeq	ip, r1, r0, ror #1
   1c188:	sub	r3, r2, r0
   1c18c:	cmp	r3, #1
   1c190:	movle	r3, lr
   1c194:	ldrbgt	r3, [r0, #1]
   1c198:	subgt	r3, r3, #10
   1c19c:	clzgt	r3, r3
   1c1a0:	lsrgt	r3, r3, #5
   1c1a4:	add	r0, r0, r3
   1c1a8:	ldr	r3, [r4, #16]
   1c1ac:	add	r0, r0, #1
   1c1b0:	cmp	r2, r0
   1c1b4:	add	r3, r3, #1
   1c1b8:	str	r0, [r4, #4]
   1c1bc:	str	r3, [r4, #16]
   1c1c0:	popeq	{r4, pc}
   1c1c4:	ldrb	r3, [r0]
   1c1c8:	cmp	r3, #32
   1c1cc:	bls	1c118 <flatcc_json_parser_skip_constant@@Base+0xbc>
   1c1d0:	cmp	r0, r1
   1c1d4:	popeq	{r4, pc}
   1c1d8:	mov	r1, r0
   1c1dc:	b	1c088 <flatcc_json_parser_skip_constant@@Base+0x2c>
   1c1e0:	add	r0, r0, #1
   1c1e4:	cmp	r2, r0
   1c1e8:	bne	1c1c4 <flatcc_json_parser_skip_constant@@Base+0x168>
   1c1ec:	pop	{r4, pc}
   1c1f0:	ldr	r3, [r4, #24]
   1c1f4:	cmp	r3, #0
   1c1f8:	beq	1c21c <flatcc_json_parser_skip_constant@@Base+0x1c0>
   1c1fc:	mov	r0, r2
   1c200:	pop	{r4, pc}
   1c204:	mov	r0, r1
   1c208:	pop	{r4, pc}
   1c20c:	ldrb	r3, [r1, #1]
   1c210:	cmp	r3, #32
   1c214:	bls	1c0dc <flatcc_json_parser_skip_constant@@Base+0x80>
   1c218:	b	1c074 <flatcc_json_parser_skip_constant@@Base+0x18>
   1c21c:	ldr	r3, [r4, #4]
   1c220:	mov	r1, #5
   1c224:	sub	r3, r0, r3
   1c228:	add	r3, r3, #1
   1c22c:	str	r0, [r4, #36]	; 0x24
   1c230:	str	r3, [r4, #20]
   1c234:	mov	r0, r2
   1c238:	str	r1, [r4, #24]
   1c23c:	pop	{r4, pc}
   1c240:	mov	r0, r1
   1c244:	bx	lr

0001c248 <flatcc_json_parser_match_constant@@Base>:
   1c248:	sub	ip, r2, r1
   1c24c:	push	{r4, r5, r6, lr}
   1c250:	cmp	r3, ip
   1c254:	ldr	r4, [sp, #16]
   1c258:	bge	1c2a8 <flatcc_json_parser_match_constant@@Base+0x60>
   1c25c:	ldr	ip, [r0, #12]
   1c260:	add	r5, r1, r3
   1c264:	cmp	ip, #0
   1c268:	bne	1c2bc <flatcc_json_parser_match_constant@@Base+0x74>
   1c26c:	ldrb	r3, [r1, r3]
   1c270:	cmp	r3, #32
   1c274:	beq	1c45c <flatcc_json_parser_match_constant@@Base+0x214>
   1c278:	cmp	r3, #34	; 0x22
   1c27c:	beq	1c4a4 <flatcc_json_parser_match_constant@@Base+0x25c>
   1c280:	cmp	r3, #92	; 0x5c
   1c284:	str	ip, [r4]
   1c288:	movne	r3, r1
   1c28c:	bne	1c2a0 <flatcc_json_parser_match_constant@@Base+0x58>
   1c290:	ldr	r3, [r0, #24]
   1c294:	cmp	r3, #0
   1c298:	movne	r3, r2
   1c29c:	beq	1c62c <flatcc_json_parser_match_constant@@Base+0x3e4>
   1c2a0:	mov	r0, r3
   1c2a4:	pop	{r4, r5, r6, pc}
   1c2a8:	mov	r2, #0
   1c2ac:	mov	r3, r1
   1c2b0:	str	r2, [r4]
   1c2b4:	mov	r0, r3
   1c2b8:	pop	{r4, r5, r6, pc}
   1c2bc:	sub	ip, r2, r5
   1c2c0:	cmp	ip, #1
   1c2c4:	ble	1c2d8 <flatcc_json_parser_match_constant@@Base+0x90>
   1c2c8:	ldrb	r3, [r1, r3]
   1c2cc:	cmp	r3, #32
   1c2d0:	bhi	1c61c <flatcc_json_parser_match_constant@@Base+0x3d4>
   1c2d4:	beq	1c3f8 <flatcc_json_parser_match_constant@@Base+0x1b0>
   1c2d8:	mov	r3, r5
   1c2dc:	mov	r6, #0
   1c2e0:	cmp	r2, r3
   1c2e4:	beq	1c314 <flatcc_json_parser_match_constant@@Base+0xcc>
   1c2e8:	ldrb	lr, [r3]
   1c2ec:	cmp	lr, #32
   1c2f0:	bne	1c364 <flatcc_json_parser_match_constant@@Base+0x11c>
   1c2f4:	add	ip, r3, #1
   1c2f8:	b	1c308 <flatcc_json_parser_match_constant@@Base+0xc0>
   1c2fc:	ldrb	lr, [ip], #1
   1c300:	cmp	lr, #32
   1c304:	bne	1c364 <flatcc_json_parser_match_constant@@Base+0x11c>
   1c308:	cmp	ip, r2
   1c30c:	mov	r3, ip
   1c310:	bne	1c2fc <flatcc_json_parser_match_constant@@Base+0xb4>
   1c314:	mov	r2, #0
   1c318:	str	r2, [r4]
   1c31c:	mov	r0, r3
   1c320:	pop	{r4, r5, r6, pc}
   1c324:	sub	ip, r2, r3
   1c328:	cmp	ip, #1
   1c32c:	movle	ip, r6
   1c330:	ldrbgt	ip, [r3, #1]
   1c334:	subgt	ip, ip, #10
   1c338:	clzgt	ip, ip
   1c33c:	lsrgt	ip, ip, #5
   1c340:	add	r3, r3, ip
   1c344:	ldr	ip, [r0, #16]
   1c348:	add	r3, r3, #1
   1c34c:	add	ip, ip, #1
   1c350:	str	r3, [r0, #4]
   1c354:	str	ip, [r0, #16]
   1c358:	cmp	r2, r3
   1c35c:	beq	1c314 <flatcc_json_parser_match_constant@@Base+0xcc>
   1c360:	ldrb	lr, [r3]
   1c364:	cmp	lr, #32
   1c368:	bhi	1c410 <flatcc_json_parser_match_constant@@Base+0x1c8>
   1c36c:	sub	lr, lr, #9
   1c370:	cmp	lr, #23
   1c374:	ldrls	pc, [pc, lr, lsl #2]
   1c378:	b	1c3e4 <flatcc_json_parser_match_constant@@Base+0x19c>
   1c37c:	ldrdeq	ip, [r1], -ip	; <UNPREDICTABLE>
   1c380:	andeq	ip, r1, r4, asr #6
   1c384:	andeq	ip, r1, r4, ror #7
   1c388:	andeq	ip, r1, r4, ror #7
   1c38c:	andeq	ip, r1, r4, lsr #6
   1c390:	andeq	ip, r1, r4, ror #7
   1c394:	andeq	ip, r1, r4, ror #7
   1c398:	andeq	ip, r1, r4, ror #7
   1c39c:	andeq	ip, r1, r4, ror #7
   1c3a0:	andeq	ip, r1, r4, ror #7
   1c3a4:	andeq	ip, r1, r4, ror #7
   1c3a8:	andeq	ip, r1, r4, ror #7
   1c3ac:	andeq	ip, r1, r4, ror #7
   1c3b0:	andeq	ip, r1, r4, ror #7
   1c3b4:	andeq	ip, r1, r4, ror #7
   1c3b8:	andeq	ip, r1, r4, ror #7
   1c3bc:	andeq	ip, r1, r4, ror #7
   1c3c0:	andeq	ip, r1, r4, ror #7
   1c3c4:	andeq	ip, r1, r4, ror #7
   1c3c8:	andeq	ip, r1, r4, ror #7
   1c3cc:	andeq	ip, r1, r4, ror #7
   1c3d0:	andeq	ip, r1, r4, ror #7
   1c3d4:	andeq	ip, r1, r4, ror #7
   1c3d8:	andeq	ip, r1, r0, ror #5
   1c3dc:	add	r3, r3, #1
   1c3e0:	b	1c358 <flatcc_json_parser_match_constant@@Base+0x110>
   1c3e4:	ldr	r1, [r0, #24]
   1c3e8:	cmp	r1, #0
   1c3ec:	beq	1c5d0 <flatcc_json_parser_match_constant@@Base+0x388>
   1c3f0:	mov	r3, r2
   1c3f4:	b	1c314 <flatcc_json_parser_match_constant@@Base+0xcc>
   1c3f8:	ldrb	lr, [r5, #1]
   1c3fc:	cmp	lr, #32
   1c400:	bls	1c2d8 <flatcc_json_parser_match_constant@@Base+0x90>
   1c404:	add	r3, r5, #1
   1c408:	cmp	r2, r3
   1c40c:	beq	1c314 <flatcc_json_parser_match_constant@@Base+0xcc>
   1c410:	cmp	r5, r3
   1c414:	beq	1c43c <flatcc_json_parser_match_constant@@Base+0x1f4>
   1c418:	sub	r2, lr, #95	; 0x5f
   1c41c:	clz	r2, r2
   1c420:	lsr	r2, r2, #5
   1c424:	orrs	r2, r2, lr, lsr #7
   1c428:	bne	1c610 <flatcc_json_parser_match_constant@@Base+0x3c8>
   1c42c:	orr	lr, lr, #32
   1c430:	sub	lr, lr, #97	; 0x61
   1c434:	cmp	lr, #25
   1c438:	bls	1c610 <flatcc_json_parser_match_constant@@Base+0x3c8>
   1c43c:	mov	r2, #0
   1c440:	str	r2, [r4]
   1c444:	ldrb	r2, [r3]
   1c448:	and	r0, r2, #223	; 0xdf
   1c44c:	cmp	r2, #44	; 0x2c
   1c450:	cmpne	r0, #93	; 0x5d
   1c454:	movne	r3, r1
   1c458:	b	1c2a0 <flatcc_json_parser_match_constant@@Base+0x58>
   1c45c:	add	r3, r5, #1
   1c460:	cmp	r2, r3
   1c464:	beq	1c664 <flatcc_json_parser_match_constant@@Base+0x41c>
   1c468:	ldrb	r1, [r5, #1]
   1c46c:	cmp	r1, #32
   1c470:	bne	1c5f4 <flatcc_json_parser_match_constant@@Base+0x3ac>
   1c474:	add	r3, r5, #2
   1c478:	b	1c488 <flatcc_json_parser_match_constant@@Base+0x240>
   1c47c:	ldrb	r1, [r3], #1
   1c480:	cmp	r1, #32
   1c484:	bne	1c5f8 <flatcc_json_parser_match_constant@@Base+0x3b0>
   1c488:	cmp	r2, r3
   1c48c:	mov	r5, r3
   1c490:	bne	1c47c <flatcc_json_parser_match_constant@@Base+0x234>
   1c494:	mov	r2, #0
   1c498:	mov	r3, r5
   1c49c:	str	r2, [r4]
   1c4a0:	b	1c2a0 <flatcc_json_parser_match_constant@@Base+0x58>
   1c4a4:	add	r3, r5, #1
   1c4a8:	cmn	r3, #1
   1c4ac:	bge	1c4c0 <flatcc_json_parser_match_constant@@Base+0x278>
   1c4b0:	ldrb	r2, [r5, #1]
   1c4b4:	cmp	r2, #32
   1c4b8:	bhi	1c314 <flatcc_json_parser_match_constant@@Base+0xcc>
   1c4bc:	beq	1c650 <flatcc_json_parser_match_constant@@Base+0x408>
   1c4c0:	mov	ip, #0
   1c4c4:	cmp	r3, #0
   1c4c8:	beq	1c4f8 <flatcc_json_parser_match_constant@@Base+0x2b0>
   1c4cc:	ldrb	r1, [r3]
   1c4d0:	cmp	r1, #32
   1c4d4:	bne	1c544 <flatcc_json_parser_match_constant@@Base+0x2fc>
   1c4d8:	add	r2, r3, #1
   1c4dc:	b	1c4ec <flatcc_json_parser_match_constant@@Base+0x2a4>
   1c4e0:	ldrb	r1, [r2], #1
   1c4e4:	cmp	r1, #32
   1c4e8:	bne	1c544 <flatcc_json_parser_match_constant@@Base+0x2fc>
   1c4ec:	cmp	r2, #0
   1c4f0:	mov	r3, r2
   1c4f4:	bne	1c4e0 <flatcc_json_parser_match_constant@@Base+0x298>
   1c4f8:	mov	r2, #0
   1c4fc:	mov	r3, #0
   1c500:	str	r2, [r4]
   1c504:	b	1c31c <flatcc_json_parser_match_constant@@Base+0xd4>
   1c508:	cmn	r3, #1
   1c50c:	movge	r2, ip
   1c510:	ldrblt	r2, [r3, #1]
   1c514:	sublt	r2, r2, #10
   1c518:	clzlt	r2, r2
   1c51c:	lsrlt	r2, r2, #5
   1c520:	add	r3, r3, r2
   1c524:	ldr	r2, [r0, #16]
   1c528:	add	r3, r3, #1
   1c52c:	add	r2, r2, #1
   1c530:	str	r3, [r0, #4]
   1c534:	str	r2, [r0, #16]
   1c538:	cmp	r3, #0
   1c53c:	beq	1c4f8 <flatcc_json_parser_match_constant@@Base+0x2b0>
   1c540:	ldrb	r1, [r3]
   1c544:	cmp	r1, #32
   1c548:	bhi	1c314 <flatcc_json_parser_match_constant@@Base+0xcc>
   1c54c:	sub	r1, r1, #9
   1c550:	cmp	r1, #23
   1c554:	ldrls	pc, [pc, r1, lsl #2]
   1c558:	b	1c5c4 <flatcc_json_parser_match_constant@@Base+0x37c>
   1c55c:			; <UNDEFINED> instruction: 0x0001c5bc
   1c560:	andeq	ip, r1, r4, lsr #10
   1c564:	andeq	ip, r1, r4, asr #11
   1c568:	andeq	ip, r1, r4, asr #11
   1c56c:	andeq	ip, r1, r8, lsl #10
   1c570:	andeq	ip, r1, r4, asr #11
   1c574:	andeq	ip, r1, r4, asr #11
   1c578:	andeq	ip, r1, r4, asr #11
   1c57c:	andeq	ip, r1, r4, asr #11
   1c580:	andeq	ip, r1, r4, asr #11
   1c584:	andeq	ip, r1, r4, asr #11
   1c588:	andeq	ip, r1, r4, asr #11
   1c58c:	andeq	ip, r1, r4, asr #11
   1c590:	andeq	ip, r1, r4, asr #11
   1c594:	andeq	ip, r1, r4, asr #11
   1c598:	andeq	ip, r1, r4, asr #11
   1c59c:	andeq	ip, r1, r4, asr #11
   1c5a0:	andeq	ip, r1, r4, asr #11
   1c5a4:	andeq	ip, r1, r4, asr #11
   1c5a8:	andeq	ip, r1, r4, asr #11
   1c5ac:	andeq	ip, r1, r4, asr #11
   1c5b0:	andeq	ip, r1, r4, asr #11
   1c5b4:	andeq	ip, r1, r4, asr #11
   1c5b8:	andeq	ip, r1, r4, asr #9
   1c5bc:	add	r3, r3, #1
   1c5c0:	b	1c538 <flatcc_json_parser_match_constant@@Base+0x2f0>
   1c5c4:	ldr	r2, [r0, #24]
   1c5c8:	cmp	r2, #0
   1c5cc:	bne	1c4f8 <flatcc_json_parser_match_constant@@Base+0x2b0>
   1c5d0:	ldr	r1, [r0, #4]
   1c5d4:	mov	ip, #5
   1c5d8:	sub	r1, r3, r1
   1c5dc:	add	r1, r1, #1
   1c5e0:	str	r3, [r0, #36]	; 0x24
   1c5e4:	str	r1, [r0, #20]
   1c5e8:	mov	r3, r2
   1c5ec:	str	ip, [r0, #24]
   1c5f0:	b	1c314 <flatcc_json_parser_match_constant@@Base+0xcc>
   1c5f4:	mov	r5, r3
   1c5f8:	cmp	r1, #34	; 0x22
   1c5fc:	beq	1c4a4 <flatcc_json_parser_match_constant@@Base+0x25c>
   1c600:	mov	r2, #1
   1c604:	mov	r3, r5
   1c608:	str	r2, [r4]
   1c60c:	b	1c2a0 <flatcc_json_parser_match_constant@@Base+0x58>
   1c610:	mov	r2, #1
   1c614:	str	r2, [r4]
   1c618:	b	1c2a0 <flatcc_json_parser_match_constant@@Base+0x58>
   1c61c:	cmp	r5, r2
   1c620:	movne	r3, r5
   1c624:	beq	1c3f0 <flatcc_json_parser_match_constant@@Base+0x1a8>
   1c628:	b	1c43c <flatcc_json_parser_match_constant@@Base+0x1f4>
   1c62c:	ldr	r1, [r0, #4]
   1c630:	mov	ip, #18
   1c634:	sub	r1, r5, r1
   1c638:	add	r1, r1, #1
   1c63c:	str	r5, [r0, #36]	; 0x24
   1c640:	mov	r3, r2
   1c644:	str	r1, [r0, #20]
   1c648:	str	ip, [r0, #24]
   1c64c:	b	1c2a0 <flatcc_json_parser_match_constant@@Base+0x58>
   1c650:	ldrb	r2, [r5, #2]
   1c654:	cmp	r2, #32
   1c658:	addhi	r3, r5, #2
   1c65c:	bls	1c4c0 <flatcc_json_parser_match_constant@@Base+0x278>
   1c660:	b	1c314 <flatcc_json_parser_match_constant@@Base+0xcc>
   1c664:	mov	r5, r2
   1c668:	b	1c494 <flatcc_json_parser_match_constant@@Base+0x24c>

0001c66c <flatcc_json_parser_double@@Base>:
   1c66c:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   1c670:	mov	r8, #0
   1c674:	mov	r9, #0
   1c678:	cmp	r1, r2
   1c67c:	mov	r5, r2
   1c680:	strd	r8, [r3]
   1c684:	beq	1c748 <flatcc_json_parser_double@@Base+0xdc>
   1c688:	mov	r6, r3
   1c68c:	ldrb	r3, [r1]
   1c690:	mov	r4, r1
   1c694:	mov	r7, r0
   1c698:	cmp	r3, #45	; 0x2d
   1c69c:	addeq	r3, r1, #1
   1c6a0:	movne	r3, r1
   1c6a4:	sub	r2, r2, r3
   1c6a8:	cmp	r2, #1
   1c6ac:	ble	1c6c4 <flatcc_json_parser_double@@Base+0x58>
   1c6b0:	ldrb	r2, [r3]
   1c6b4:	cmp	r2, #46	; 0x2e
   1c6b8:	beq	1c73c <flatcc_json_parser_double@@Base+0xd0>
   1c6bc:	cmp	r2, #48	; 0x30
   1c6c0:	beq	1c730 <flatcc_json_parser_double@@Base+0xc4>
   1c6c4:	mov	r2, r6
   1c6c8:	sub	r1, r5, r4
   1c6cc:	mov	r0, r4
   1c6d0:	bl	1af1c <grisu3_diy_fp_encode_double@@Base+0x590>
   1c6d4:	cmp	r4, r0
   1c6d8:	cmpne	r0, #0
   1c6dc:	mov	r3, r0
   1c6e0:	bne	1c728 <flatcc_json_parser_double@@Base+0xbc>
   1c6e4:	vldr	d7, [r6]
   1c6e8:	vldr	d6, [pc, #112]	; 1c760 <flatcc_json_parser_double@@Base+0xf4>
   1c6ec:	vabs.f64	d7, d7
   1c6f0:	vcmp.f64	d7, d6
   1c6f4:	vmrs	APSR_nzcv, fpscr
   1c6f8:	ble	1c73c <flatcc_json_parser_double@@Base+0xd0>
   1c6fc:	ldr	r3, [r7, #24]
   1c700:	cmp	r3, #0
   1c704:	bne	1c748 <flatcc_json_parser_double@@Base+0xdc>
   1c708:	ldr	r2, [r7, #4]
   1c70c:	mov	r1, #7
   1c710:	sub	r2, r4, r2
   1c714:	mov	r3, r5
   1c718:	add	r2, r2, #1
   1c71c:	str	r4, [r7, #36]	; 0x24
   1c720:	str	r2, [r7, #20]
   1c724:	str	r1, [r7, #24]
   1c728:	mov	r0, r3
   1c72c:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   1c730:	ldrb	r3, [r3, #1]
   1c734:	cmp	r3, #48	; 0x30
   1c738:	bne	1c6c4 <flatcc_json_parser_double@@Base+0x58>
   1c73c:	ldr	r3, [r7, #24]
   1c740:	cmp	r3, #0
   1c744:	beq	1c754 <flatcc_json_parser_double@@Base+0xe8>
   1c748:	mov	r3, r5
   1c74c:	mov	r0, r3
   1c750:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   1c754:	ldr	r2, [r7, #4]
   1c758:	mov	r1, #6
   1c75c:	b	1c710 <flatcc_json_parser_double@@Base+0xa4>
   1c760:			; <UNDEFINED> instruction: 0xffffffff
   1c764:	svcvc	0x00efffff

0001c768 <flatcc_json_parser_float@@Base>:
   1c768:	mov	ip, #0
   1c76c:	cmp	r1, r2
   1c770:	push	{r4, r5, r6, r7, lr}
   1c774:	mov	r5, r2
   1c778:	sub	sp, sp, #12
   1c77c:	str	ip, [r3]
   1c780:	beq	1c814 <flatcc_json_parser_float@@Base+0xac>
   1c784:	mov	r6, r3
   1c788:	ldrb	r3, [r1]
   1c78c:	mov	r4, r1
   1c790:	mov	r7, r0
   1c794:	cmp	r3, #45	; 0x2d
   1c798:	addeq	r3, r1, #1
   1c79c:	movne	r3, r1
   1c7a0:	sub	r2, r2, r3
   1c7a4:	cmp	r2, #1
   1c7a8:	ble	1c7c0 <flatcc_json_parser_float@@Base+0x58>
   1c7ac:	ldrb	r2, [r3]
   1c7b0:	cmp	r2, #46	; 0x2e
   1c7b4:	beq	1c82c <flatcc_json_parser_float@@Base+0xc4>
   1c7b8:	cmp	r2, #48	; 0x30
   1c7bc:	beq	1c860 <flatcc_json_parser_float@@Base+0xf8>
   1c7c0:	mov	r2, sp
   1c7c4:	sub	r1, r5, r4
   1c7c8:	mov	r0, r4
   1c7cc:	bl	1af1c <grisu3_diy_fp_encode_double@@Base+0x590>
   1c7d0:	vldr	d6, [sp]
   1c7d4:	vldr	s14, [pc, #160]	; 1c87c <flatcc_json_parser_float@@Base+0x114>
   1c7d8:	vcvt.f32.f64	s15, d6
   1c7dc:	vabs.f32	s11, s15
   1c7e0:	vstr	s15, [r6]
   1c7e4:	vcmp.f32	s11, s14
   1c7e8:	vmrs	APSR_nzcv, fpscr
   1c7ec:	ble	1c820 <flatcc_json_parser_float@@Base+0xb8>
   1c7f0:	vcmpe.f64	d6, #0.0
   1c7f4:	vldr	s15, [pc, #132]	; 1c880 <flatcc_json_parser_float@@Base+0x118>
   1c7f8:	vldr	s14, [pc, #132]	; 1c884 <flatcc_json_parser_float@@Base+0x11c>
   1c7fc:	ldr	r3, [r7, #24]
   1c800:	vmrs	APSR_nzcv, fpscr
   1c804:	vmovpl.f32	s15, s14
   1c808:	cmp	r3, #0
   1c80c:	vstr	s15, [r6]
   1c810:	beq	1c870 <flatcc_json_parser_float@@Base+0x108>
   1c814:	mov	r0, r5
   1c818:	add	sp, sp, #12
   1c81c:	pop	{r4, r5, r6, r7, pc}
   1c820:	cmp	r4, r0
   1c824:	cmpne	r0, #0
   1c828:	bne	1c818 <flatcc_json_parser_float@@Base+0xb0>
   1c82c:	ldr	r3, [r7, #24]
   1c830:	cmp	r3, #0
   1c834:	bne	1c814 <flatcc_json_parser_float@@Base+0xac>
   1c838:	ldr	r3, [r7, #4]
   1c83c:	mov	r2, #6
   1c840:	sub	r3, r4, r3
   1c844:	add	r3, r3, #1
   1c848:	mov	r0, r5
   1c84c:	str	r4, [r7, #36]	; 0x24
   1c850:	str	r3, [r7, #20]
   1c854:	str	r2, [r7, #24]
   1c858:	add	sp, sp, #12
   1c85c:	pop	{r4, r5, r6, r7, pc}
   1c860:	ldrb	r3, [r3, #1]
   1c864:	cmp	r3, #48	; 0x30
   1c868:	bne	1c7c0 <flatcc_json_parser_float@@Base+0x58>
   1c86c:	b	1c82c <flatcc_json_parser_float@@Base+0xc4>
   1c870:	ldr	r3, [r7, #4]
   1c874:	mov	r2, #7
   1c878:	b	1c840 <flatcc_json_parser_float@@Base+0xd8>
   1c87c:	svcvc	0x007fffff
   1c880:			; <UNDEFINED> instruction: 0xff800000
   1c884:	svcvc	0x00800000

0001c888 <flatcc_json_parser_generic_json@@Base>:
   1c888:	cmp	r1, r2
   1c88c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1c890:	mov	r4, r2
   1c894:	sub	sp, sp, #532	; 0x214
   1c898:	beq	1ca84 <flatcc_json_parser_generic_json@@Base+0x1fc>
   1c89c:	ldrb	r2, [r1]
   1c8a0:	add	r7, sp, #16
   1c8a4:	mov	r3, r1
   1c8a8:	mov	r5, r0
   1c8ac:	mov	r6, r7
   1c8b0:	mov	fp, #125	; 0x7d
   1c8b4:	mov	r8, #0
   1c8b8:	mov	sl, #93	; 0x5d
   1c8bc:	mov	r9, #17
   1c8c0:	cmp	r6, r7
   1c8c4:	beq	1c9c4 <flatcc_json_parser_generic_json@@Base+0x13c>
   1c8c8:	ldrb	r1, [r6, #-1]
   1c8cc:	cmp	r1, #125	; 0x7d
   1c8d0:	beq	1d588 <flatcc_json_parser_generic_json@@Base+0xd00>
   1c8d4:	cmp	r2, #57	; 0x39
   1c8d8:	bls	1c9cc <flatcc_json_parser_generic_json@@Base+0x144>
   1c8dc:	cmp	r2, #91	; 0x5b
   1c8e0:	beq	1ca9c <flatcc_json_parser_generic_json@@Base+0x214>
   1c8e4:	cmp	r2, #123	; 0x7b
   1c8e8:	bne	1cc60 <flatcc_json_parser_generic_json@@Base+0x3d8>
   1c8ec:	add	r2, sp, #528	; 0x210
   1c8f0:	cmp	r6, r2
   1c8f4:	beq	1e064 <flatcc_json_parser_generic_json@@Base+0x17dc>
   1c8f8:	add	r0, r3, #1
   1c8fc:	sub	r2, r4, r0
   1c900:	cmp	r2, #1
   1c904:	strb	fp, [r6]
   1c908:	ble	1c91c <flatcc_json_parser_generic_json@@Base+0x94>
   1c90c:	ldrb	r2, [r3, #1]
   1c910:	cmp	r2, #32
   1c914:	bhi	1d878 <flatcc_json_parser_generic_json@@Base+0xff0>
   1c918:	beq	1d868 <flatcc_json_parser_generic_json@@Base+0xfe0>
   1c91c:	cmp	r4, r0
   1c920:	beq	1ca88 <flatcc_json_parser_generic_json@@Base+0x200>
   1c924:	ldrb	r2, [r0]
   1c928:	cmp	r2, #32
   1c92c:	bne	1c94c <flatcc_json_parser_generic_json@@Base+0xc4>
   1c930:	add	r3, r0, #1
   1c934:	cmp	r3, r4
   1c938:	mov	r0, r3
   1c93c:	beq	1ca88 <flatcc_json_parser_generic_json@@Base+0x200>
   1c940:	ldrb	r2, [r3], #1
   1c944:	cmp	r2, #32
   1c948:	beq	1c934 <flatcc_json_parser_generic_json@@Base+0xac>
   1c94c:	cmp	r2, #32
   1c950:	bhi	1e17c <flatcc_json_parser_generic_json@@Base+0x18f4>
   1c954:	sub	r2, r2, #9
   1c958:	cmp	r2, #23
   1c95c:	ldrls	pc, [pc, r2, lsl #2]
   1c960:	b	1cc0c <flatcc_json_parser_generic_json@@Base+0x384>
   1c964:	andeq	sp, r1, ip, lsr #14
   1c968:	andeq	ip, r1, r0, ror #23
   1c96c:	andeq	ip, r1, ip, lsl #24
   1c970:	andeq	ip, r1, ip, lsl #24
   1c974:	andeq	ip, r1, r0, asr #23
   1c978:	andeq	ip, r1, ip, lsl #24
   1c97c:	andeq	ip, r1, ip, lsl #24
   1c980:	andeq	ip, r1, ip, lsl #24
   1c984:	andeq	ip, r1, ip, lsl #24
   1c988:	andeq	ip, r1, ip, lsl #24
   1c98c:	andeq	ip, r1, ip, lsl #24
   1c990:	andeq	ip, r1, ip, lsl #24
   1c994:	andeq	ip, r1, ip, lsl #24
   1c998:	andeq	ip, r1, ip, lsl #24
   1c99c:	andeq	ip, r1, ip, lsl #24
   1c9a0:	andeq	ip, r1, ip, lsl #24
   1c9a4:	andeq	ip, r1, ip, lsl #24
   1c9a8:	andeq	ip, r1, ip, lsl #24
   1c9ac:	andeq	ip, r1, ip, lsl #24
   1c9b0:	andeq	ip, r1, ip, lsl #24
   1c9b4:	andeq	ip, r1, ip, lsl #24
   1c9b8:	andeq	ip, r1, ip, lsl #24
   1c9bc:	andeq	ip, r1, ip, lsl #24
   1c9c0:	andeq	ip, r1, ip, lsl r9
   1c9c4:	cmp	r2, #57	; 0x39
   1c9c8:	bhi	1d73c <flatcc_json_parser_generic_json@@Base+0xeb4>
   1c9cc:	cmp	r2, #48	; 0x30
   1c9d0:	bcs	1c9e4 <flatcc_json_parser_generic_json@@Base+0x15c>
   1c9d4:	cmp	r2, #34	; 0x22
   1c9d8:	beq	1d680 <flatcc_json_parser_generic_json@@Base+0xdf8>
   1c9dc:	cmp	r2, #45	; 0x2d
   1c9e0:	bne	1cc60 <flatcc_json_parser_generic_json@@Base+0x3d8>
   1c9e4:	cmp	r4, r3
   1c9e8:	beq	1ca58 <flatcc_json_parser_generic_json@@Base+0x1d0>
   1c9ec:	cmp	r2, #45	; 0x2d
   1c9f0:	beq	1dc14 <flatcc_json_parser_generic_json@@Base+0x138c>
   1c9f4:	cmp	r2, #48	; 0x30
   1c9f8:	beq	1d7a4 <flatcc_json_parser_generic_json@@Base+0xf1c>
   1c9fc:	sub	r2, r2, #49	; 0x31
   1ca00:	uxtb	r2, r2
   1ca04:	cmp	r2, #8
   1ca08:	bhi	1d7f4 <flatcc_json_parser_generic_json@@Base+0xf6c>
   1ca0c:	add	r0, r3, #1
   1ca10:	cmp	r4, r0
   1ca14:	beq	1e1a4 <flatcc_json_parser_generic_json@@Base+0x191c>
   1ca18:	ldrb	r2, [r3, #1]
   1ca1c:	sub	r1, r2, #48	; 0x30
   1ca20:	cmp	r1, #9
   1ca24:	bhi	1d7b4 <flatcc_json_parser_generic_json@@Base+0xf2c>
   1ca28:	add	r3, r3, #2
   1ca2c:	b	1ca40 <flatcc_json_parser_generic_json@@Base+0x1b8>
   1ca30:	ldrb	r2, [r3], #1
   1ca34:	sub	r1, r2, #48	; 0x30
   1ca38:	cmp	r1, #9
   1ca3c:	bhi	1d7b4 <flatcc_json_parser_generic_json@@Base+0xf2c>
   1ca40:	cmp	r3, r4
   1ca44:	mov	r0, r3
   1ca48:	bne	1ca30 <flatcc_json_parser_generic_json@@Base+0x1a8>
   1ca4c:	ldr	r3, [r5, #24]
   1ca50:	cmp	r3, #0
   1ca54:	beq	1df40 <flatcc_json_parser_generic_json@@Base+0x16b8>
   1ca58:	mov	r1, r6
   1ca5c:	mov	r0, r4
   1ca60:	cmp	r1, r7
   1ca64:	beq	1ca88 <flatcc_json_parser_generic_json@@Base+0x200>
   1ca68:	ldrb	r2, [r1, #-1]
   1ca6c:	ldr	r3, [r5, #24]
   1ca70:	cmp	r2, #93	; 0x5d
   1ca74:	movne	r2, #10
   1ca78:	moveq	r2, #9
   1ca7c:	cmp	r3, #0
   1ca80:	beq	1d820 <flatcc_json_parser_generic_json@@Base+0xf98>
   1ca84:	mov	r0, r4
   1ca88:	add	sp, sp, #532	; 0x214
   1ca8c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1ca90:	cmp	r2, #91	; 0x5b
   1ca94:	bne	1df60 <flatcc_json_parser_generic_json@@Base+0x16d8>
   1ca98:	mov	r3, r4
   1ca9c:	add	r2, sp, #528	; 0x210
   1caa0:	cmp	r6, r2
   1caa4:	beq	1e064 <flatcc_json_parser_generic_json@@Base+0x17dc>
   1caa8:	add	r0, r3, #1
   1caac:	sub	r2, r4, r0
   1cab0:	cmp	r2, #1
   1cab4:	strb	sl, [r6]
   1cab8:	ble	1cacc <flatcc_json_parser_generic_json@@Base+0x244>
   1cabc:	ldrb	r2, [r3, #1]
   1cac0:	cmp	r2, #32
   1cac4:	bhi	1d84c <flatcc_json_parser_generic_json@@Base+0xfc4>
   1cac8:	beq	1d83c <flatcc_json_parser_generic_json@@Base+0xfb4>
   1cacc:	cmp	r4, r0
   1cad0:	beq	1ca88 <flatcc_json_parser_generic_json@@Base+0x200>
   1cad4:	ldrb	r2, [r0]
   1cad8:	cmp	r2, #32
   1cadc:	bne	1cafc <flatcc_json_parser_generic_json@@Base+0x274>
   1cae0:	add	r3, r0, #1
   1cae4:	cmp	r3, r4
   1cae8:	mov	r0, r3
   1caec:	beq	1ca88 <flatcc_json_parser_generic_json@@Base+0x200>
   1caf0:	ldrb	r2, [r3], #1
   1caf4:	cmp	r2, #32
   1caf8:	beq	1cae4 <flatcc_json_parser_generic_json@@Base+0x25c>
   1cafc:	cmp	r2, #32
   1cb00:	bhi	1e1e4 <flatcc_json_parser_generic_json@@Base+0x195c>
   1cb04:	sub	r2, r2, #9
   1cb08:	cmp	r2, #23
   1cb0c:	ldrls	pc, [pc, r2, lsl #2]
   1cb10:	b	1cc0c <flatcc_json_parser_generic_json@@Base+0x384>
   1cb14:	andeq	sp, r1, r4, lsr r7
   1cb18:	muleq	r1, r4, fp
   1cb1c:	andeq	ip, r1, ip, lsl #24
   1cb20:	andeq	ip, r1, ip, lsl #24
   1cb24:	andeq	ip, r1, r4, ror fp
   1cb28:	andeq	ip, r1, ip, lsl #24
   1cb2c:	andeq	ip, r1, ip, lsl #24
   1cb30:	andeq	ip, r1, ip, lsl #24
   1cb34:	andeq	ip, r1, ip, lsl #24
   1cb38:	andeq	ip, r1, ip, lsl #24
   1cb3c:	andeq	ip, r1, ip, lsl #24
   1cb40:	andeq	ip, r1, ip, lsl #24
   1cb44:	andeq	ip, r1, ip, lsl #24
   1cb48:	andeq	ip, r1, ip, lsl #24
   1cb4c:	andeq	ip, r1, ip, lsl #24
   1cb50:	andeq	ip, r1, ip, lsl #24
   1cb54:	andeq	ip, r1, ip, lsl #24
   1cb58:	andeq	ip, r1, ip, lsl #24
   1cb5c:	andeq	ip, r1, ip, lsl #24
   1cb60:	andeq	ip, r1, ip, lsl #24
   1cb64:	andeq	ip, r1, ip, lsl #24
   1cb68:	andeq	ip, r1, ip, lsl #24
   1cb6c:	andeq	ip, r1, ip, lsl #24
   1cb70:	andeq	ip, r1, ip, asr #21
   1cb74:	sub	r3, r4, r0
   1cb78:	cmp	r3, #1
   1cb7c:	movle	r3, r8
   1cb80:	ldrbgt	r3, [r0, #1]
   1cb84:	subgt	r3, r3, #10
   1cb88:	clzgt	r3, r3
   1cb8c:	lsrgt	r3, r3, #5
   1cb90:	add	r0, r0, r3
   1cb94:	ldr	r3, [r5, #16]
   1cb98:	add	r0, r0, #1
   1cb9c:	add	r3, r3, #1
   1cba0:	str	r0, [r5, #4]
   1cba4:	str	r3, [r5, #16]
   1cba8:	cmp	r4, r0
   1cbac:	beq	1ca88 <flatcc_json_parser_generic_json@@Base+0x200>
   1cbb0:	ldrb	r2, [r0]
   1cbb4:	cmp	r2, #32
   1cbb8:	bls	1cb04 <flatcc_json_parser_generic_json@@Base+0x27c>
   1cbbc:	b	1d854 <flatcc_json_parser_generic_json@@Base+0xfcc>
   1cbc0:	sub	r3, r4, r0
   1cbc4:	cmp	r3, #1
   1cbc8:	movle	r3, r8
   1cbcc:	ldrbgt	r3, [r0, #1]
   1cbd0:	subgt	r3, r3, #10
   1cbd4:	clzgt	r3, r3
   1cbd8:	lsrgt	r3, r3, #5
   1cbdc:	add	r0, r0, r3
   1cbe0:	ldr	r3, [r5, #16]
   1cbe4:	add	r0, r0, #1
   1cbe8:	add	r3, r3, #1
   1cbec:	str	r0, [r5, #4]
   1cbf0:	str	r3, [r5, #16]
   1cbf4:	cmp	r4, r0
   1cbf8:	beq	1ca88 <flatcc_json_parser_generic_json@@Base+0x200>
   1cbfc:	ldrb	r2, [r0]
   1cc00:	cmp	r2, #32
   1cc04:	bls	1c954 <flatcc_json_parser_generic_json@@Base+0xcc>
   1cc08:	b	1d880 <flatcc_json_parser_generic_json@@Base+0xff8>
   1cc0c:	ldr	r3, [r5, #24]
   1cc10:	cmp	r3, #0
   1cc14:	bne	1ca84 <flatcc_json_parser_generic_json@@Base+0x1fc>
   1cc18:	ldr	r3, [r5, #4]
   1cc1c:	mov	r2, #5
   1cc20:	sub	r3, r0, r3
   1cc24:	add	r3, r3, #1
   1cc28:	str	r0, [r5, #36]	; 0x24
   1cc2c:	str	r3, [r5, #20]
   1cc30:	mov	r0, r4
   1cc34:	str	r2, [r5, #24]
   1cc38:	add	sp, sp, #532	; 0x214
   1cc3c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1cc40:	cmp	r2, #57	; 0x39
   1cc44:	bls	1e1fc <flatcc_json_parser_generic_json@@Base+0x1974>
   1cc48:	cmp	r2, #91	; 0x5b
   1cc4c:	beq	1e1f4 <flatcc_json_parser_generic_json@@Base+0x196c>
   1cc50:	cmp	r2, #123	; 0x7b
   1cc54:	moveq	r3, r1
   1cc58:	beq	1c8ec <flatcc_json_parser_generic_json@@Base+0x64>
   1cc5c:	mov	r3, r1
   1cc60:	mov	r1, r3
   1cc64:	mov	r2, r4
   1cc68:	mov	r0, r5
   1cc6c:	str	r3, [sp, #4]
   1cc70:	bl	1c05c <flatcc_json_parser_skip_constant@@Base>
   1cc74:	ldr	r3, [sp, #4]
   1cc78:	cmp	r0, r3
   1cc7c:	beq	1e104 <flatcc_json_parser_generic_json@@Base+0x187c>
   1cc80:	cmp	r4, r0
   1cc84:	beq	1ca58 <flatcc_json_parser_generic_json@@Base+0x1d0>
   1cc88:	cmp	r6, r7
   1cc8c:	beq	1ca88 <flatcc_json_parser_generic_json@@Base+0x200>
   1cc90:	ldrb	r3, [r6, #-1]
   1cc94:	sub	r1, r6, #1
   1cc98:	cmp	r3, #93	; 0x5d
   1cc9c:	sub	r3, r4, r0
   1cca0:	beq	1ce84 <flatcc_json_parser_generic_json@@Base+0x5fc>
   1cca4:	cmp	r3, #1
   1cca8:	ble	1ccbc <flatcc_json_parser_generic_json@@Base+0x434>
   1ccac:	ldrb	r2, [r0]
   1ccb0:	cmp	r2, #32
   1ccb4:	bhi	1ce1c <flatcc_json_parser_generic_json@@Base+0x594>
   1ccb8:	beq	1ce0c <flatcc_json_parser_generic_json@@Base+0x584>
   1ccbc:	cmp	r4, r0
   1ccc0:	beq	1ca5c <flatcc_json_parser_generic_json@@Base+0x1d4>
   1ccc4:	ldrb	r2, [r0]
   1ccc8:	cmp	r2, #32
   1cccc:	bne	1ccec <flatcc_json_parser_generic_json@@Base+0x464>
   1ccd0:	add	r3, r0, #1
   1ccd4:	cmp	r3, r4
   1ccd8:	mov	r0, r3
   1ccdc:	beq	1ca60 <flatcc_json_parser_generic_json@@Base+0x1d8>
   1cce0:	ldrb	r2, [r3], #1
   1cce4:	cmp	r2, #32
   1cce8:	beq	1ccd4 <flatcc_json_parser_generic_json@@Base+0x44c>
   1ccec:	cmp	r2, #32
   1ccf0:	bhi	1cdac <flatcc_json_parser_generic_json@@Base+0x524>
   1ccf4:	sub	r2, r2, #9
   1ccf8:	cmp	r2, #23
   1ccfc:	ldrls	pc, [pc, r2, lsl #2]
   1cd00:	b	1cddc <flatcc_json_parser_generic_json@@Base+0x554>
   1cd04:	ldrdeq	ip, [r1], -r4
   1cd08:	andeq	ip, r1, r4, lsl #27
   1cd0c:	ldrdeq	ip, [r1], -ip	; <UNPREDICTABLE>
   1cd10:	ldrdeq	ip, [r1], -ip	; <UNPREDICTABLE>
   1cd14:	andeq	ip, r1, r4, ror #26
   1cd18:	ldrdeq	ip, [r1], -ip	; <UNPREDICTABLE>
   1cd1c:	ldrdeq	ip, [r1], -ip	; <UNPREDICTABLE>
   1cd20:	ldrdeq	ip, [r1], -ip	; <UNPREDICTABLE>
   1cd24:	ldrdeq	ip, [r1], -ip	; <UNPREDICTABLE>
   1cd28:	ldrdeq	ip, [r1], -ip	; <UNPREDICTABLE>
   1cd2c:	ldrdeq	ip, [r1], -ip	; <UNPREDICTABLE>
   1cd30:	ldrdeq	ip, [r1], -ip	; <UNPREDICTABLE>
   1cd34:	ldrdeq	ip, [r1], -ip	; <UNPREDICTABLE>
   1cd38:	ldrdeq	ip, [r1], -ip	; <UNPREDICTABLE>
   1cd3c:	ldrdeq	ip, [r1], -ip	; <UNPREDICTABLE>
   1cd40:	ldrdeq	ip, [r1], -ip	; <UNPREDICTABLE>
   1cd44:	ldrdeq	ip, [r1], -ip	; <UNPREDICTABLE>
   1cd48:	ldrdeq	ip, [r1], -ip	; <UNPREDICTABLE>
   1cd4c:	ldrdeq	ip, [r1], -ip	; <UNPREDICTABLE>
   1cd50:	ldrdeq	ip, [r1], -ip	; <UNPREDICTABLE>
   1cd54:	ldrdeq	ip, [r1], -ip	; <UNPREDICTABLE>
   1cd58:	ldrdeq	ip, [r1], -ip	; <UNPREDICTABLE>
   1cd5c:	ldrdeq	ip, [r1], -ip	; <UNPREDICTABLE>
   1cd60:			; <UNDEFINED> instruction: 0x0001ccbc
   1cd64:	sub	r3, r4, r0
   1cd68:	cmp	r3, #1
   1cd6c:	movle	r3, r8
   1cd70:	ldrbgt	r3, [r0, #1]
   1cd74:	subgt	r3, r3, #10
   1cd78:	clzgt	r3, r3
   1cd7c:	lsrgt	r3, r3, #5
   1cd80:	add	r0, r0, r3
   1cd84:	ldr	r3, [r5, #16]
   1cd88:	add	r0, r0, #1
   1cd8c:	add	r3, r3, #1
   1cd90:	str	r0, [r5, #4]
   1cd94:	str	r3, [r5, #16]
   1cd98:	cmp	r4, r0
   1cd9c:	beq	1ca5c <flatcc_json_parser_generic_json@@Base+0x1d4>
   1cda0:	ldrb	r2, [r0]
   1cda4:	cmp	r2, #32
   1cda8:	bls	1ccf4 <flatcc_json_parser_generic_json@@Base+0x46c>
   1cdac:	cmp	r2, #44	; 0x2c
   1cdb0:	beq	1ce2c <flatcc_json_parser_generic_json@@Base+0x5a4>
   1cdb4:	cmp	r2, #125	; 0x7d
   1cdb8:	beq	1d048 <flatcc_json_parser_generic_json@@Base+0x7c0>
   1cdbc:	ldr	r3, [r5, #24]
   1cdc0:	cmp	r3, #0
   1cdc4:	bne	1ca5c <flatcc_json_parser_generic_json@@Base+0x1d4>
   1cdc8:	ldr	r3, [r5, #4]
   1cdcc:	mov	r2, #10
   1cdd0:	b	1cdf0 <flatcc_json_parser_generic_json@@Base+0x568>
   1cdd4:	add	r0, r0, #1
   1cdd8:	b	1cd98 <flatcc_json_parser_generic_json@@Base+0x510>
   1cddc:	ldr	r3, [r5, #24]
   1cde0:	cmp	r3, #0
   1cde4:	bne	1ca5c <flatcc_json_parser_generic_json@@Base+0x1d4>
   1cde8:	ldr	r3, [r5, #4]
   1cdec:	mov	r2, #5
   1cdf0:	sub	r3, r0, r3
   1cdf4:	add	r3, r3, #1
   1cdf8:	str	r0, [r5, #36]	; 0x24
   1cdfc:	str	r3, [r5, #20]
   1ce00:	str	r2, [r5, #24]
   1ce04:	mov	r0, r4
   1ce08:	b	1ca60 <flatcc_json_parser_generic_json@@Base+0x1d8>
   1ce0c:	ldrb	r2, [r0, #1]
   1ce10:	cmp	r2, #32
   1ce14:	addhi	r0, r0, #1
   1ce18:	bls	1ccbc <flatcc_json_parser_generic_json@@Base+0x434>
   1ce1c:	cmp	r4, r0
   1ce20:	beq	1ca5c <flatcc_json_parser_generic_json@@Base+0x1d4>
   1ce24:	cmp	r2, #44	; 0x2c
   1ce28:	bne	1cdb4 <flatcc_json_parser_generic_json@@Base+0x52c>
   1ce2c:	add	r3, r0, #1
   1ce30:	sub	r2, r4, r3
   1ce34:	cmp	r2, #1
   1ce38:	ble	1ce4c <flatcc_json_parser_generic_json@@Base+0x5c4>
   1ce3c:	ldrb	r2, [r0, #1]
   1ce40:	cmp	r2, #32
   1ce44:	bhi	1d2b8 <flatcc_json_parser_generic_json@@Base+0xa30>
   1ce48:	beq	1d2a8 <flatcc_json_parser_generic_json@@Base+0xa20>
   1ce4c:	cmp	r4, r3
   1ce50:	beq	1d2c0 <flatcc_json_parser_generic_json@@Base+0xa38>
   1ce54:	ldrb	r2, [r3]
   1ce58:	cmp	r2, #32
   1ce5c:	bne	1d1a0 <flatcc_json_parser_generic_json@@Base+0x918>
   1ce60:	add	r0, r3, #1
   1ce64:	b	1ce74 <flatcc_json_parser_generic_json@@Base+0x5ec>
   1ce68:	ldrb	r2, [r0], #1
   1ce6c:	cmp	r2, #32
   1ce70:	bne	1d1a0 <flatcc_json_parser_generic_json@@Base+0x918>
   1ce74:	cmp	r0, r4
   1ce78:	mov	r3, r0
   1ce7c:	bne	1ce68 <flatcc_json_parser_generic_json@@Base+0x5e0>
   1ce80:	b	1d2c4 <flatcc_json_parser_generic_json@@Base+0xa3c>
   1ce84:	cmp	r3, #1
   1ce88:	ble	1ce9c <flatcc_json_parser_generic_json@@Base+0x614>
   1ce8c:	ldrb	r2, [r0]
   1ce90:	cmp	r2, #32
   1ce94:	bhi	1cfcc <flatcc_json_parser_generic_json@@Base+0x744>
   1ce98:	beq	1cfbc <flatcc_json_parser_generic_json@@Base+0x734>
   1ce9c:	cmp	r4, r0
   1cea0:	beq	1ca5c <flatcc_json_parser_generic_json@@Base+0x1d4>
   1cea4:	ldrb	r2, [r0]
   1cea8:	cmp	r2, #32
   1ceac:	bne	1cecc <flatcc_json_parser_generic_json@@Base+0x644>
   1ceb0:	add	r3, r0, #1
   1ceb4:	cmp	r3, r4
   1ceb8:	mov	r0, r3
   1cebc:	beq	1ca60 <flatcc_json_parser_generic_json@@Base+0x1d8>
   1cec0:	ldrb	r2, [r3], #1
   1cec4:	cmp	r2, #32
   1cec8:	beq	1ceb4 <flatcc_json_parser_generic_json@@Base+0x62c>
   1cecc:	cmp	r2, #32
   1ced0:	bhi	1cf8c <flatcc_json_parser_generic_json@@Base+0x704>
   1ced4:	sub	r2, r2, #9
   1ced8:	cmp	r2, #23
   1cedc:	ldrls	pc, [pc, r2, lsl #2]
   1cee0:	b	1cddc <flatcc_json_parser_generic_json@@Base+0x554>
   1cee4:			; <UNDEFINED> instruction: 0x0001cfb4
   1cee8:	andeq	ip, r1, r4, ror #30
   1ceec:	ldrdeq	ip, [r1], -ip	; <UNPREDICTABLE>
   1cef0:	ldrdeq	ip, [r1], -ip	; <UNPREDICTABLE>
   1cef4:	andeq	ip, r1, r4, asr #30
   1cef8:	ldrdeq	ip, [r1], -ip	; <UNPREDICTABLE>
   1cefc:	ldrdeq	ip, [r1], -ip	; <UNPREDICTABLE>
   1cf00:	ldrdeq	ip, [r1], -ip	; <UNPREDICTABLE>
   1cf04:	ldrdeq	ip, [r1], -ip	; <UNPREDICTABLE>
   1cf08:	ldrdeq	ip, [r1], -ip	; <UNPREDICTABLE>
   1cf0c:	ldrdeq	ip, [r1], -ip	; <UNPREDICTABLE>
   1cf10:	ldrdeq	ip, [r1], -ip	; <UNPREDICTABLE>
   1cf14:	ldrdeq	ip, [r1], -ip	; <UNPREDICTABLE>
   1cf18:	ldrdeq	ip, [r1], -ip	; <UNPREDICTABLE>
   1cf1c:	ldrdeq	ip, [r1], -ip	; <UNPREDICTABLE>
   1cf20:	ldrdeq	ip, [r1], -ip	; <UNPREDICTABLE>
   1cf24:	ldrdeq	ip, [r1], -ip	; <UNPREDICTABLE>
   1cf28:	ldrdeq	ip, [r1], -ip	; <UNPREDICTABLE>
   1cf2c:	ldrdeq	ip, [r1], -ip	; <UNPREDICTABLE>
   1cf30:	ldrdeq	ip, [r1], -ip	; <UNPREDICTABLE>
   1cf34:	ldrdeq	ip, [r1], -ip	; <UNPREDICTABLE>
   1cf38:	ldrdeq	ip, [r1], -ip	; <UNPREDICTABLE>
   1cf3c:	ldrdeq	ip, [r1], -ip	; <UNPREDICTABLE>
   1cf40:	muleq	r1, ip, lr
   1cf44:	sub	r3, r4, r0
   1cf48:	cmp	r3, #1
   1cf4c:	movle	r3, r8
   1cf50:	ldrbgt	r3, [r0, #1]
   1cf54:	subgt	r3, r3, #10
   1cf58:	clzgt	r3, r3
   1cf5c:	lsrgt	r3, r3, #5
   1cf60:	add	r0, r0, r3
   1cf64:	ldr	r3, [r5, #16]
   1cf68:	add	r0, r0, #1
   1cf6c:	add	r3, r3, #1
   1cf70:	str	r0, [r5, #4]
   1cf74:	str	r3, [r5, #16]
   1cf78:	cmp	r4, r0
   1cf7c:	beq	1ca5c <flatcc_json_parser_generic_json@@Base+0x1d4>
   1cf80:	ldrb	r2, [r0]
   1cf84:	cmp	r2, #32
   1cf88:	bls	1ced4 <flatcc_json_parser_generic_json@@Base+0x64c>
   1cf8c:	cmp	r2, #44	; 0x2c
   1cf90:	beq	1cfdc <flatcc_json_parser_generic_json@@Base+0x754>
   1cf94:	cmp	r2, #93	; 0x5d
   1cf98:	beq	1d2f4 <flatcc_json_parser_generic_json@@Base+0xa6c>
   1cf9c:	ldr	r3, [r5, #24]
   1cfa0:	cmp	r3, #0
   1cfa4:	bne	1ca5c <flatcc_json_parser_generic_json@@Base+0x1d4>
   1cfa8:	ldr	r3, [r5, #4]
   1cfac:	mov	r2, #9
   1cfb0:	b	1cdf0 <flatcc_json_parser_generic_json@@Base+0x568>
   1cfb4:	add	r0, r0, #1
   1cfb8:	b	1cf78 <flatcc_json_parser_generic_json@@Base+0x6f0>
   1cfbc:	ldrb	r2, [r0, #1]
   1cfc0:	cmp	r2, #32
   1cfc4:	addhi	r0, r0, #1
   1cfc8:	bls	1ce9c <flatcc_json_parser_generic_json@@Base+0x614>
   1cfcc:	cmp	r4, r0
   1cfd0:	beq	1ca5c <flatcc_json_parser_generic_json@@Base+0x1d4>
   1cfd4:	cmp	r2, #44	; 0x2c
   1cfd8:	bne	1cf94 <flatcc_json_parser_generic_json@@Base+0x70c>
   1cfdc:	add	r3, r0, #1
   1cfe0:	sub	r2, r4, r3
   1cfe4:	cmp	r2, #1
   1cfe8:	ble	1cffc <flatcc_json_parser_generic_json@@Base+0x774>
   1cfec:	ldrb	r2, [r0, #1]
   1cff0:	cmp	r2, #32
   1cff4:	bhi	1d578 <flatcc_json_parser_generic_json@@Base+0xcf0>
   1cff8:	beq	1d568 <flatcc_json_parser_generic_json@@Base+0xce0>
   1cffc:	cmp	r4, r3
   1d000:	beq	1d580 <flatcc_json_parser_generic_json@@Base+0xcf8>
   1d004:	ldrb	r2, [r3]
   1d008:	cmp	r2, #32
   1d00c:	bne	1d3cc <flatcc_json_parser_generic_json@@Base+0xb44>
   1d010:	add	r0, r3, #1
   1d014:	b	1d024 <flatcc_json_parser_generic_json@@Base+0x79c>
   1d018:	ldrb	r2, [r0], #1
   1d01c:	cmp	r2, #32
   1d020:	bne	1d3cc <flatcc_json_parser_generic_json@@Base+0xb44>
   1d024:	cmp	r0, r4
   1d028:	mov	r3, r0
   1d02c:	bne	1d018 <flatcc_json_parser_generic_json@@Base+0x790>
   1d030:	ldr	r2, [r5, #24]
   1d034:	cmp	r2, #0
   1d038:	bne	1ca5c <flatcc_json_parser_generic_json@@Base+0x1d4>
   1d03c:	ldr	r2, [r5, #4]
   1d040:	mov	r0, #9
   1d044:	b	1d2d8 <flatcc_json_parser_generic_json@@Base+0xa50>
   1d048:	add	r2, r0, #1
   1d04c:	sub	r3, r4, r2
   1d050:	cmp	r3, #1
   1d054:	ble	1d068 <flatcc_json_parser_generic_json@@Base+0x7e0>
   1d058:	ldrb	r3, [r0, #1]
   1d05c:	cmp	r3, #32
   1d060:	bhi	1d8fc <flatcc_json_parser_generic_json@@Base+0x1074>
   1d064:	beq	1d8ec <flatcc_json_parser_generic_json@@Base+0x1064>
   1d068:	cmp	r4, r2
   1d06c:	beq	1ca5c <flatcc_json_parser_generic_json@@Base+0x1d4>
   1d070:	ldrb	ip, [r2]
   1d074:	cmp	ip, #32
   1d078:	bne	1df38 <flatcc_json_parser_generic_json@@Base+0x16b0>
   1d07c:	add	r3, r2, #1
   1d080:	cmp	r3, r4
   1d084:	mov	r0, r3
   1d088:	beq	1ca60 <flatcc_json_parser_generic_json@@Base+0x1d8>
   1d08c:	ldrb	ip, [r3], #1
   1d090:	cmp	ip, #32
   1d094:	beq	1d080 <flatcc_json_parser_generic_json@@Base+0x7f8>
   1d098:	cmp	ip, #32
   1d09c:	mov	r2, r0
   1d0a0:	bhi	1d15c <flatcc_json_parser_generic_json@@Base+0x8d4>
   1d0a4:	sub	ip, ip, #9
   1d0a8:	cmp	ip, #23
   1d0ac:	ldrls	pc, [pc, ip, lsl #2]
   1d0b0:	b	1d170 <flatcc_json_parser_generic_json@@Base+0x8e8>
   1d0b4:	andeq	sp, r1, r8, ror #2
   1d0b8:	andeq	sp, r1, r4, lsr r1
   1d0bc:	andeq	sp, r1, r0, ror r1
   1d0c0:	andeq	sp, r1, r0, ror r1
   1d0c4:	andeq	sp, r1, r4, lsl r1
   1d0c8:	andeq	sp, r1, r0, ror r1
   1d0cc:	andeq	sp, r1, r0, ror r1
   1d0d0:	andeq	sp, r1, r0, ror r1
   1d0d4:	andeq	sp, r1, r0, ror r1
   1d0d8:	andeq	sp, r1, r0, ror r1
   1d0dc:	andeq	sp, r1, r0, ror r1
   1d0e0:	andeq	sp, r1, r0, ror r1
   1d0e4:	andeq	sp, r1, r0, ror r1
   1d0e8:	andeq	sp, r1, r0, ror r1
   1d0ec:	andeq	sp, r1, r0, ror r1
   1d0f0:	andeq	sp, r1, r0, ror r1
   1d0f4:	andeq	sp, r1, r0, ror r1
   1d0f8:	andeq	sp, r1, r0, ror r1
   1d0fc:	andeq	sp, r1, r0, ror r1
   1d100:	andeq	sp, r1, r0, ror r1
   1d104:	andeq	sp, r1, r0, ror r1
   1d108:	andeq	sp, r1, r0, ror r1
   1d10c:	andeq	sp, r1, r0, ror r1
   1d110:	andeq	sp, r1, r8, rrx
   1d114:	sub	r3, r4, r2
   1d118:	cmp	r3, #1
   1d11c:	movle	r3, r8
   1d120:	ldrbgt	r3, [r2, #1]
   1d124:	subgt	r3, r3, #10
   1d128:	clzgt	r3, r3
   1d12c:	lsrgt	r3, r3, #5
   1d130:	add	r2, r2, r3
   1d134:	ldr	r3, [r5, #16]
   1d138:	add	r2, r2, #1
   1d13c:	add	r3, r3, #1
   1d140:	str	r2, [r5, #4]
   1d144:	str	r3, [r5, #16]
   1d148:	cmp	r4, r2
   1d14c:	beq	1ca5c <flatcc_json_parser_generic_json@@Base+0x1d4>
   1d150:	ldrb	ip, [r2]
   1d154:	cmp	ip, #32
   1d158:	bls	1d0a4 <flatcc_json_parser_generic_json@@Base+0x81c>
   1d15c:	mov	r0, r2
   1d160:	mov	r6, r1
   1d164:	b	1cc88 <flatcc_json_parser_generic_json@@Base+0x400>
   1d168:	add	r2, r2, #1
   1d16c:	b	1d148 <flatcc_json_parser_generic_json@@Base+0x8c0>
   1d170:	ldr	r3, [r5, #24]
   1d174:	cmp	r3, #0
   1d178:	bne	1ca5c <flatcc_json_parser_generic_json@@Base+0x1d4>
   1d17c:	ldr	r3, [r5, #4]
   1d180:	mov	r0, #5
   1d184:	sub	r3, r2, r3
   1d188:	add	r3, r3, #1
   1d18c:	str	r0, [r5, #24]
   1d190:	str	r2, [r5, #36]	; 0x24
   1d194:	str	r3, [r5, #20]
   1d198:	mov	r0, r4
   1d19c:	b	1ca60 <flatcc_json_parser_generic_json@@Base+0x1d8>
   1d1a0:	cmp	r2, #32
   1d1a4:	bhi	1d260 <flatcc_json_parser_generic_json@@Base+0x9d8>
   1d1a8:	sub	r2, r2, #9
   1d1ac:	cmp	r2, #23
   1d1b0:	ldrls	pc, [pc, r2, lsl #2]
   1d1b4:	b	1d27c <flatcc_json_parser_generic_json@@Base+0x9f4>
   1d1b8:	andeq	sp, r1, r4, ror r2
   1d1bc:	andeq	sp, r1, r8, lsr r2
   1d1c0:	andeq	sp, r1, ip, ror r2
   1d1c4:	andeq	sp, r1, ip, ror r2
   1d1c8:	andeq	sp, r1, r8, lsl r2
   1d1cc:	andeq	sp, r1, ip, ror r2
   1d1d0:	andeq	sp, r1, ip, ror r2
   1d1d4:	andeq	sp, r1, ip, ror r2
   1d1d8:	andeq	sp, r1, ip, ror r2
   1d1dc:	andeq	sp, r1, ip, ror r2
   1d1e0:	andeq	sp, r1, ip, ror r2
   1d1e4:	andeq	sp, r1, ip, ror r2
   1d1e8:	andeq	sp, r1, ip, ror r2
   1d1ec:	andeq	sp, r1, ip, ror r2
   1d1f0:	andeq	sp, r1, ip, ror r2
   1d1f4:	andeq	sp, r1, ip, ror r2
   1d1f8:	andeq	sp, r1, ip, ror r2
   1d1fc:	andeq	sp, r1, ip, ror r2
   1d200:	andeq	sp, r1, ip, ror r2
   1d204:	andeq	sp, r1, ip, ror r2
   1d208:	andeq	sp, r1, ip, ror r2
   1d20c:	andeq	sp, r1, ip, ror r2
   1d210:	andeq	sp, r1, ip, ror r2
   1d214:	andeq	ip, r1, ip, asr #28
   1d218:	sub	r2, r4, r3
   1d21c:	cmp	r2, #1
   1d220:	movle	r2, r8
   1d224:	ldrbgt	r2, [r3, #1]
   1d228:	subgt	r2, r2, #10
   1d22c:	clzgt	r2, r2
   1d230:	lsrgt	r2, r2, #5
   1d234:	add	r3, r3, r2
   1d238:	ldr	r2, [r5, #16]
   1d23c:	add	r3, r3, #1
   1d240:	add	r2, r2, #1
   1d244:	str	r3, [r5, #4]
   1d248:	str	r2, [r5, #16]
   1d24c:	cmp	r4, r3
   1d250:	beq	1d2c0 <flatcc_json_parser_generic_json@@Base+0xa38>
   1d254:	ldrb	r2, [r3]
   1d258:	cmp	r2, #32
   1d25c:	bls	1d1a8 <flatcc_json_parser_generic_json@@Base+0x920>
   1d260:	cmp	r2, #125	; 0x7d
   1d264:	beq	1dc78 <flatcc_json_parser_generic_json@@Base+0x13f0>
   1d268:	cmp	r4, r3
   1d26c:	bne	1c8c0 <flatcc_json_parser_generic_json@@Base+0x38>
   1d270:	b	1ca84 <flatcc_json_parser_generic_json@@Base+0x1fc>
   1d274:	add	r3, r3, #1
   1d278:	b	1d24c <flatcc_json_parser_generic_json@@Base+0x9c4>
   1d27c:	ldr	r2, [r5, #24]
   1d280:	cmp	r2, #0
   1d284:	bne	1ca5c <flatcc_json_parser_generic_json@@Base+0x1d4>
   1d288:	ldr	r2, [r5, #4]
   1d28c:	mov	r0, #5
   1d290:	sub	r2, r3, r2
   1d294:	add	r2, r2, #1
   1d298:	str	r3, [r5, #36]	; 0x24
   1d29c:	str	r2, [r5, #20]
   1d2a0:	str	r0, [r5, #24]
   1d2a4:	b	1ca5c <flatcc_json_parser_generic_json@@Base+0x1d4>
   1d2a8:	ldrb	r2, [r0, #2]
   1d2ac:	cmp	r2, #32
   1d2b0:	addhi	r3, r0, #2
   1d2b4:	bls	1ce4c <flatcc_json_parser_generic_json@@Base+0x5c4>
   1d2b8:	cmp	r4, r3
   1d2bc:	bne	1d260 <flatcc_json_parser_generic_json@@Base+0x9d8>
   1d2c0:	mov	r3, r4
   1d2c4:	ldr	r2, [r5, #24]
   1d2c8:	cmp	r2, #0
   1d2cc:	bne	1ca5c <flatcc_json_parser_generic_json@@Base+0x1d4>
   1d2d0:	ldr	r2, [r5, #4]
   1d2d4:	mov	r0, #10
   1d2d8:	sub	r2, r3, r2
   1d2dc:	add	r2, r2, #1
   1d2e0:	str	r0, [r5, #24]
   1d2e4:	str	r3, [r5, #36]	; 0x24
   1d2e8:	str	r2, [r5, #20]
   1d2ec:	mov	r0, r4
   1d2f0:	b	1ca60 <flatcc_json_parser_generic_json@@Base+0x1d8>
   1d2f4:	add	r2, r0, #1
   1d2f8:	sub	r3, r4, r2
   1d2fc:	cmp	r3, #1
   1d300:	ble	1d320 <flatcc_json_parser_generic_json@@Base+0xa98>
   1d304:	ldrb	r3, [r0, #1]
   1d308:	cmp	r3, #32
   1d30c:	bhi	1d8fc <flatcc_json_parser_generic_json@@Base+0x1074>
   1d310:	bne	1d320 <flatcc_json_parser_generic_json@@Base+0xa98>
   1d314:	ldrb	r3, [r0, #2]
   1d318:	cmp	r3, #32
   1d31c:	bhi	1d8f8 <flatcc_json_parser_generic_json@@Base+0x1070>
   1d320:	cmp	r4, r2
   1d324:	beq	1ca5c <flatcc_json_parser_generic_json@@Base+0x1d4>
   1d328:	ldrb	ip, [r2]
   1d32c:	cmp	ip, #32
   1d330:	bne	1e11c <flatcc_json_parser_generic_json@@Base+0x1894>
   1d334:	add	r3, r2, #1
   1d338:	cmp	r3, r4
   1d33c:	mov	r0, r3
   1d340:	beq	1ca60 <flatcc_json_parser_generic_json@@Base+0x1d8>
   1d344:	ldrb	ip, [r3], #1
   1d348:	cmp	ip, #32
   1d34c:	beq	1d338 <flatcc_json_parser_generic_json@@Base+0xab0>
   1d350:	cmp	ip, #32
   1d354:	mov	r2, r0
   1d358:	bhi	1d15c <flatcc_json_parser_generic_json@@Base+0x8d4>
   1d35c:	sub	ip, ip, #9
   1d360:	cmp	ip, #23
   1d364:	ldrls	pc, [pc, ip, lsl #2]
   1d368:	b	1d170 <flatcc_json_parser_generic_json@@Base+0x8e8>
   1d36c:	muleq	r1, ip, r7
   1d370:	andeq	sp, r1, r0, ror r7
   1d374:	andeq	sp, r1, r0, ror r1
   1d378:	andeq	sp, r1, r0, ror r1
   1d37c:	andeq	sp, r1, r0, asr r7
   1d380:	andeq	sp, r1, r0, ror r1
   1d384:	andeq	sp, r1, r0, ror r1
   1d388:	andeq	sp, r1, r0, ror r1
   1d38c:	andeq	sp, r1, r0, ror r1
   1d390:	andeq	sp, r1, r0, ror r1
   1d394:	andeq	sp, r1, r0, ror r1
   1d398:	andeq	sp, r1, r0, ror r1
   1d39c:	andeq	sp, r1, r0, ror r1
   1d3a0:	andeq	sp, r1, r0, ror r1
   1d3a4:	andeq	sp, r1, r0, ror r1
   1d3a8:	andeq	sp, r1, r0, ror r1
   1d3ac:	andeq	sp, r1, r0, ror r1
   1d3b0:	andeq	sp, r1, r0, ror r1
   1d3b4:	andeq	sp, r1, r0, ror r1
   1d3b8:	andeq	sp, r1, r0, ror r1
   1d3bc:	andeq	sp, r1, r0, ror r1
   1d3c0:	andeq	sp, r1, r0, ror r1
   1d3c4:	andeq	sp, r1, r0, ror r1
   1d3c8:	andeq	sp, r1, r0, lsr #6
   1d3cc:	cmp	r2, #32
   1d3d0:	bhi	1d48c <flatcc_json_parser_generic_json@@Base+0xc04>
   1d3d4:	sub	r2, r2, #9
   1d3d8:	cmp	r2, #23
   1d3dc:	ldrls	pc, [pc, r2, lsl #2]
   1d3e0:	b	1d27c <flatcc_json_parser_generic_json@@Base+0x9f4>
   1d3e4:	andeq	sp, r1, r0, ror #10
   1d3e8:	andeq	sp, r1, r4, ror #8
   1d3ec:	andeq	sp, r1, ip, ror r2
   1d3f0:	andeq	sp, r1, ip, ror r2
   1d3f4:	andeq	sp, r1, r4, asr #8
   1d3f8:	andeq	sp, r1, ip, ror r2
   1d3fc:	andeq	sp, r1, ip, ror r2
   1d400:	andeq	sp, r1, ip, ror r2
   1d404:	andeq	sp, r1, ip, ror r2
   1d408:	andeq	sp, r1, ip, ror r2
   1d40c:	andeq	sp, r1, ip, ror r2
   1d410:	andeq	sp, r1, ip, ror r2
   1d414:	andeq	sp, r1, ip, ror r2
   1d418:	andeq	sp, r1, ip, ror r2
   1d41c:	andeq	sp, r1, ip, ror r2
   1d420:	andeq	sp, r1, ip, ror r2
   1d424:	andeq	sp, r1, ip, ror r2
   1d428:	andeq	sp, r1, ip, ror r2
   1d42c:	andeq	sp, r1, ip, ror r2
   1d430:	andeq	sp, r1, ip, ror r2
   1d434:	andeq	sp, r1, ip, ror r2
   1d438:	andeq	sp, r1, ip, ror r2
   1d43c:	andeq	sp, r1, ip, ror r2
   1d440:	strdeq	ip, [r1], -ip	; <UNPREDICTABLE>
   1d444:	sub	r2, r4, r3
   1d448:	cmp	r2, #1
   1d44c:	movle	r2, r8
   1d450:	ldrbgt	r2, [r3, #1]
   1d454:	subgt	r2, r2, #10
   1d458:	clzgt	r2, r2
   1d45c:	lsrgt	r2, r2, #5
   1d460:	add	r3, r3, r2
   1d464:	ldr	r2, [r5, #16]
   1d468:	add	r3, r3, #1
   1d46c:	add	r2, r2, #1
   1d470:	str	r3, [r5, #4]
   1d474:	str	r2, [r5, #16]
   1d478:	cmp	r4, r3
   1d47c:	beq	1d580 <flatcc_json_parser_generic_json@@Base+0xcf8>
   1d480:	ldrb	r2, [r3]
   1d484:	cmp	r2, #32
   1d488:	bls	1d3d4 <flatcc_json_parser_generic_json@@Base+0xb4c>
   1d48c:	cmp	r2, #93	; 0x5d
   1d490:	bne	1d268 <flatcc_json_parser_generic_json@@Base+0x9e0>
   1d494:	add	r2, r3, #1
   1d498:	sub	r0, r4, r2
   1d49c:	cmp	r0, #1
   1d4a0:	ble	1d4b4 <flatcc_json_parser_generic_json@@Base+0xc2c>
   1d4a4:	ldrb	r0, [r3, #1]
   1d4a8:	cmp	r0, #32
   1d4ac:	bhi	1d8fc <flatcc_json_parser_generic_json@@Base+0x1074>
   1d4b0:	beq	1e154 <flatcc_json_parser_generic_json@@Base+0x18cc>
   1d4b4:	mov	r0, r2
   1d4b8:	cmp	r4, r0
   1d4bc:	beq	1ca5c <flatcc_json_parser_generic_json@@Base+0x1d4>
   1d4c0:	ldrb	r3, [r0]
   1d4c4:	cmp	r3, #32
   1d4c8:	bne	1d4e8 <flatcc_json_parser_generic_json@@Base+0xc60>
   1d4cc:	add	r2, r0, #1
   1d4d0:	cmp	r2, r4
   1d4d4:	mov	r0, r2
   1d4d8:	beq	1ca60 <flatcc_json_parser_generic_json@@Base+0x1d8>
   1d4dc:	ldrb	r3, [r2], #1
   1d4e0:	cmp	r3, #32
   1d4e4:	beq	1d4d0 <flatcc_json_parser_generic_json@@Base+0xc48>
   1d4e8:	cmp	r3, #32
   1d4ec:	bhi	1dfe8 <flatcc_json_parser_generic_json@@Base+0x1760>
   1d4f0:	sub	r3, r3, #9
   1d4f4:	cmp	r3, #23
   1d4f8:	ldrls	pc, [pc, r3, lsl #2]
   1d4fc:	b	1cddc <flatcc_json_parser_generic_json@@Base+0x554>
   1d500:	strdeq	sp, [r1], -r0
   1d504:	andeq	sp, r1, r0, asr #31
   1d508:	ldrdeq	ip, [r1], -ip	; <UNPREDICTABLE>
   1d50c:	ldrdeq	ip, [r1], -ip	; <UNPREDICTABLE>
   1d510:	andeq	sp, r1, r0, lsr #31
   1d514:	ldrdeq	ip, [r1], -ip	; <UNPREDICTABLE>
   1d518:	ldrdeq	ip, [r1], -ip	; <UNPREDICTABLE>
   1d51c:	ldrdeq	ip, [r1], -ip	; <UNPREDICTABLE>
   1d520:	ldrdeq	ip, [r1], -ip	; <UNPREDICTABLE>
   1d524:	ldrdeq	ip, [r1], -ip	; <UNPREDICTABLE>
   1d528:	ldrdeq	ip, [r1], -ip	; <UNPREDICTABLE>
   1d52c:	ldrdeq	ip, [r1], -ip	; <UNPREDICTABLE>
   1d530:	ldrdeq	ip, [r1], -ip	; <UNPREDICTABLE>
   1d534:	ldrdeq	ip, [r1], -ip	; <UNPREDICTABLE>
   1d538:	ldrdeq	ip, [r1], -ip	; <UNPREDICTABLE>
   1d53c:	ldrdeq	ip, [r1], -ip	; <UNPREDICTABLE>
   1d540:	ldrdeq	ip, [r1], -ip	; <UNPREDICTABLE>
   1d544:	ldrdeq	ip, [r1], -ip	; <UNPREDICTABLE>
   1d548:	ldrdeq	ip, [r1], -ip	; <UNPREDICTABLE>
   1d54c:	ldrdeq	ip, [r1], -ip	; <UNPREDICTABLE>
   1d550:	ldrdeq	ip, [r1], -ip	; <UNPREDICTABLE>
   1d554:	ldrdeq	ip, [r1], -ip	; <UNPREDICTABLE>
   1d558:	ldrdeq	ip, [r1], -ip	; <UNPREDICTABLE>
   1d55c:			; <UNDEFINED> instruction: 0x0001d4b8
   1d560:	add	r3, r3, #1
   1d564:	b	1d478 <flatcc_json_parser_generic_json@@Base+0xbf0>
   1d568:	ldrb	r2, [r0, #2]
   1d56c:	cmp	r2, #32
   1d570:	addhi	r3, r0, #2
   1d574:	bls	1cffc <flatcc_json_parser_generic_json@@Base+0x774>
   1d578:	cmp	r4, r3
   1d57c:	bne	1d48c <flatcc_json_parser_generic_json@@Base+0xc04>
   1d580:	mov	r3, r4
   1d584:	b	1d030 <flatcc_json_parser_generic_json@@Base+0x7a8>
   1d588:	cmp	r2, #34	; 0x22
   1d58c:	beq	1d890 <flatcc_json_parser_generic_json@@Base+0x1008>
   1d590:	cmp	r2, #46	; 0x2e
   1d594:	beq	1ddcc <flatcc_json_parser_generic_json@@Base+0x1544>
   1d598:	mov	r2, #1
   1d59c:	cmp	r4, r3
   1d5a0:	str	r2, [r5, #12]
   1d5a4:	beq	1e13c <flatcc_json_parser_generic_json@@Base+0x18b4>
   1d5a8:	ldrb	r2, [r3]
   1d5ac:	cmp	r2, #32
   1d5b0:	addhi	r3, r3, #1
   1d5b4:	bls	1e164 <flatcc_json_parser_generic_json@@Base+0x18dc>
   1d5b8:	cmp	r2, #46	; 0x2e
   1d5bc:	cmpne	r2, #95	; 0x5f
   1d5c0:	sub	r1, r3, #1
   1d5c4:	beq	1d94c <flatcc_json_parser_generic_json@@Base+0x10c4>
   1d5c8:	sub	r0, r2, #48	; 0x30
   1d5cc:	tst	r2, #128	; 0x80
   1d5d0:	uxtb	r0, r0
   1d5d4:	bne	1d94c <flatcc_json_parser_generic_json@@Base+0x10c4>
   1d5d8:	orr	ip, r2, #32
   1d5dc:	sub	ip, ip, #97	; 0x61
   1d5e0:	cmp	r0, #9
   1d5e4:	uxtb	ip, ip
   1d5e8:	bls	1d94c <flatcc_json_parser_generic_json@@Base+0x10c4>
   1d5ec:	cmp	ip, #25
   1d5f0:	bls	1d94c <flatcc_json_parser_generic_json@@Base+0x10c4>
   1d5f4:	mov	r0, r4
   1d5f8:	sub	r3, r4, r1
   1d5fc:	cmp	r3, #1
   1d600:	ble	1d618 <flatcc_json_parser_generic_json@@Base+0xd90>
   1d604:	ldrb	r2, [r1]
   1d608:	cmp	r2, #32
   1d60c:	bhi	1de14 <flatcc_json_parser_generic_json@@Base+0x158c>
   1d610:	cmp	r2, #32
   1d614:	beq	1de04 <flatcc_json_parser_generic_json@@Base+0x157c>
   1d618:	cmp	r4, r1
   1d61c:	beq	1de1c <flatcc_json_parser_generic_json@@Base+0x1594>
   1d620:	ldrb	r2, [r1]
   1d624:	cmp	r2, #32
   1d628:	bne	1d990 <flatcc_json_parser_generic_json@@Base+0x1108>
   1d62c:	add	r3, r1, #1
   1d630:	b	1d640 <flatcc_json_parser_generic_json@@Base+0xdb8>
   1d634:	ldrb	r2, [r3], #1
   1d638:	cmp	r2, #32
   1d63c:	bne	1d990 <flatcc_json_parser_generic_json@@Base+0x1108>
   1d640:	cmp	r4, r3
   1d644:	mov	r1, r3
   1d648:	bne	1d634 <flatcc_json_parser_generic_json@@Base+0xdac>
   1d64c:	ldr	r3, [r5, #24]
   1d650:	cmp	r3, #0
   1d654:	bne	1ca84 <flatcc_json_parser_generic_json@@Base+0x1fc>
   1d658:	ldr	r3, [r5, #4]
   1d65c:	mov	r2, #10
   1d660:	sub	r3, r1, r3
   1d664:	add	r3, r3, #1
   1d668:	str	r1, [r5, #36]	; 0x24
   1d66c:	mov	r0, r4
   1d670:	str	r3, [r5, #20]
   1d674:	str	r2, [r5, #24]
   1d678:	b	1ca88 <flatcc_json_parser_generic_json@@Base+0x200>
   1d67c:	mov	r3, r1
   1d680:	add	r0, r3, #1
   1d684:	cmp	r4, r0
   1d688:	beq	1e1cc <flatcc_json_parser_generic_json@@Base+0x1944>
   1d68c:	ldrb	r3, [r3, #1]
   1d690:	cmp	r3, #34	; 0x22
   1d694:	beq	1d724 <flatcc_json_parser_generic_json@@Base+0xe9c>
   1d698:	cmp	r4, r0
   1d69c:	beq	1d6ec <flatcc_json_parser_generic_json@@Base+0xe64>
   1d6a0:	cmp	r3, #92	; 0x5c
   1d6a4:	cmpne	r3, #31
   1d6a8:	addhi	r1, r0, #1
   1d6ac:	bhi	1d6e0 <flatcc_json_parser_generic_json@@Base+0xe58>
   1d6b0:	b	1de24 <flatcc_json_parser_generic_json@@Base+0x159c>
   1d6b4:	ldrb	r3, [r1]
   1d6b8:	add	r1, r1, #1
   1d6bc:	cmp	r3, #34	; 0x22
   1d6c0:	cmpne	r3, #31
   1d6c4:	movhi	r2, #1
   1d6c8:	movls	r2, #0
   1d6cc:	cmp	r3, #92	; 0x5c
   1d6d0:	moveq	r2, #0
   1d6d4:	andne	r2, r2, #1
   1d6d8:	cmp	r2, #0
   1d6dc:	beq	1d908 <flatcc_json_parser_generic_json@@Base+0x1080>
   1d6e0:	cmp	r1, r4
   1d6e4:	mov	r0, r1
   1d6e8:	bne	1d6b4 <flatcc_json_parser_generic_json@@Base+0xe2c>
   1d6ec:	ldr	r3, [r5, #24]
   1d6f0:	cmp	r3, #0
   1d6f4:	beq	1d96c <flatcc_json_parser_generic_json@@Base+0x10e4>
   1d6f8:	mov	r0, r4
   1d6fc:	mov	r1, r0
   1d700:	add	r3, sp, #12
   1d704:	mov	r2, r4
   1d708:	mov	r0, r5
   1d70c:	bl	1bb8c <flatcc_json_parser_string_escape@@Base>
   1d710:	cmp	r4, r0
   1d714:	beq	1e1cc <flatcc_json_parser_generic_json@@Base+0x1944>
   1d718:	ldrb	r3, [r0]
   1d71c:	cmp	r3, #34	; 0x22
   1d720:	bne	1d698 <flatcc_json_parser_generic_json@@Base+0xe10>
   1d724:	add	r0, r0, #1
   1d728:	b	1cc80 <flatcc_json_parser_generic_json@@Base+0x3f8>
   1d72c:	add	r0, r0, #1
   1d730:	b	1cbf4 <flatcc_json_parser_generic_json@@Base+0x36c>
   1d734:	add	r0, r0, #1
   1d738:	b	1cba8 <flatcc_json_parser_generic_json@@Base+0x320>
   1d73c:	cmp	r2, #91	; 0x5b
   1d740:	beq	1ca9c <flatcc_json_parser_generic_json@@Base+0x214>
   1d744:	cmp	r2, #123	; 0x7b
   1d748:	beq	1c8f8 <flatcc_json_parser_generic_json@@Base+0x70>
   1d74c:	b	1cc60 <flatcc_json_parser_generic_json@@Base+0x3d8>
   1d750:	sub	r3, r4, r2
   1d754:	cmp	r3, #1
   1d758:	movle	r3, r8
   1d75c:	ldrbgt	r3, [r2, #1]
   1d760:	subgt	r3, r3, #10
   1d764:	clzgt	r3, r3
   1d768:	lsrgt	r3, r3, #5
   1d76c:	add	r2, r2, r3
   1d770:	ldr	r3, [r5, #16]
   1d774:	add	r2, r2, #1
   1d778:	add	r3, r3, #1
   1d77c:	str	r2, [r5, #4]
   1d780:	str	r3, [r5, #16]
   1d784:	cmp	r4, r2
   1d788:	beq	1ca5c <flatcc_json_parser_generic_json@@Base+0x1d4>
   1d78c:	ldrb	ip, [r2]
   1d790:	cmp	ip, #32
   1d794:	bls	1d35c <flatcc_json_parser_generic_json@@Base+0xad4>
   1d798:	b	1d15c <flatcc_json_parser_generic_json@@Base+0x8d4>
   1d79c:	add	r2, r2, #1
   1d7a0:	b	1d784 <flatcc_json_parser_generic_json@@Base+0xefc>
   1d7a4:	add	r0, r3, #1
   1d7a8:	cmp	r4, r0
   1d7ac:	beq	1e1a4 <flatcc_json_parser_generic_json@@Base+0x191c>
   1d7b0:	ldrb	r2, [r3, #1]
   1d7b4:	cmp	r2, #46	; 0x2e
   1d7b8:	beq	1de5c <flatcc_json_parser_generic_json@@Base+0x15d4>
   1d7bc:	and	r3, r2, #223	; 0xdf
   1d7c0:	cmp	r3, #69	; 0x45
   1d7c4:	bne	1de30 <flatcc_json_parser_generic_json@@Base+0x15a8>
   1d7c8:	add	r3, r0, #1
   1d7cc:	cmp	r4, r3
   1d7d0:	beq	1e094 <flatcc_json_parser_generic_json@@Base+0x180c>
   1d7d4:	ldrb	r2, [r0, #1]
   1d7d8:	sub	r1, r2, #43	; 0x2b
   1d7dc:	tst	r1, #253	; 0xfd
   1d7e0:	bne	1deb4 <flatcc_json_parser_generic_json@@Base+0x162c>
   1d7e4:	add	r3, r0, #2
   1d7e8:	cmp	r4, r3
   1d7ec:	bne	1deb0 <flatcc_json_parser_generic_json@@Base+0x1628>
   1d7f0:	mov	r3, r4
   1d7f4:	ldr	r2, [r5, #24]
   1d7f8:	cmp	r2, #0
   1d7fc:	bne	1ca58 <flatcc_json_parser_generic_json@@Base+0x1d0>
   1d800:	ldr	r2, [r5, #4]
   1d804:	mov	r1, #6
   1d808:	sub	r2, r3, r2
   1d80c:	add	r2, r2, #1
   1d810:	str	r3, [r5, #36]	; 0x24
   1d814:	str	r2, [r5, #20]
   1d818:	str	r1, [r5, #24]
   1d81c:	b	1ca58 <flatcc_json_parser_generic_json@@Base+0x1d0>
   1d820:	ldr	r3, [r5, #4]
   1d824:	str	r0, [r5, #36]	; 0x24
   1d828:	sub	r3, r0, r3
   1d82c:	add	r3, r3, #1
   1d830:	str	r2, [r5, #24]
   1d834:	str	r3, [r5, #20]
   1d838:	b	1ca84 <flatcc_json_parser_generic_json@@Base+0x1fc>
   1d83c:	ldrb	r2, [r3, #2]
   1d840:	cmp	r2, #32
   1d844:	addhi	r0, r3, #2
   1d848:	bls	1cacc <flatcc_json_parser_generic_json@@Base+0x244>
   1d84c:	cmp	r4, r0
   1d850:	beq	1ca88 <flatcc_json_parser_generic_json@@Base+0x200>
   1d854:	cmp	r2, #93	; 0x5d
   1d858:	add	r6, r6, #1
   1d85c:	beq	1cc88 <flatcc_json_parser_generic_json@@Base+0x400>
   1d860:	mov	r3, r0
   1d864:	b	1c8c0 <flatcc_json_parser_generic_json@@Base+0x38>
   1d868:	ldrb	r2, [r3, #2]
   1d86c:	cmp	r2, #32
   1d870:	addhi	r0, r3, #2
   1d874:	bls	1c91c <flatcc_json_parser_generic_json@@Base+0x94>
   1d878:	cmp	r4, r0
   1d87c:	beq	1ca88 <flatcc_json_parser_generic_json@@Base+0x200>
   1d880:	cmp	r2, #125	; 0x7d
   1d884:	add	r6, r6, #1
   1d888:	bne	1d860 <flatcc_json_parser_generic_json@@Base+0xfd8>
   1d88c:	b	1cc88 <flatcc_json_parser_generic_json@@Base+0x400>
   1d890:	add	r1, r3, #1
   1d894:	cmp	r4, r1
   1d898:	str	r8, [r5, #12]
   1d89c:	beq	1dde8 <flatcc_json_parser_generic_json@@Base+0x1560>
   1d8a0:	ldrb	r2, [r3, #1]
   1d8a4:	cmp	r2, #34	; 0x22
   1d8a8:	movne	r0, r4
   1d8ac:	bne	1d8cc <flatcc_json_parser_generic_json@@Base+0x1044>
   1d8b0:	b	1df04 <flatcc_json_parser_generic_json@@Base+0x167c>
   1d8b4:	add	r1, r3, #1
   1d8b8:	cmp	r4, r1
   1d8bc:	beq	1df14 <flatcc_json_parser_generic_json@@Base+0x168c>
   1d8c0:	ldrb	r2, [r3, #1]
   1d8c4:	cmp	r2, #34	; 0x22
   1d8c8:	beq	1df08 <flatcc_json_parser_generic_json@@Base+0x1680>
   1d8cc:	cmp	r2, #92	; 0x5c
   1d8d0:	mov	r3, r1
   1d8d4:	bne	1d8b4 <flatcc_json_parser_generic_json@@Base+0x102c>
   1d8d8:	sub	r3, r4, r1
   1d8dc:	cmp	r3, #1
   1d8e0:	ble	1ddf0 <flatcc_json_parser_generic_json@@Base+0x1568>
   1d8e4:	add	r3, r1, #1
   1d8e8:	b	1d8b4 <flatcc_json_parser_generic_json@@Base+0x102c>
   1d8ec:	ldrb	r3, [r0, #2]
   1d8f0:	cmp	r3, #32
   1d8f4:	bls	1d068 <flatcc_json_parser_generic_json@@Base+0x7e0>
   1d8f8:	add	r2, r0, #2
   1d8fc:	cmp	r4, r2
   1d900:	bne	1d15c <flatcc_json_parser_generic_json@@Base+0x8d4>
   1d904:	b	1ca5c <flatcc_json_parser_generic_json@@Base+0x1d4>
   1d908:	cmp	r3, #31
   1d90c:	bhi	1d93c <flatcc_json_parser_generic_json@@Base+0x10b4>
   1d910:	ldr	r3, [r5, #24]
   1d914:	cmp	r3, #0
   1d918:	bne	1d6f8 <flatcc_json_parser_generic_json@@Base+0xe70>
   1d91c:	ldr	r3, [r5, #4]
   1d920:	str	r0, [r5, #36]	; 0x24
   1d924:	sub	r3, r0, r3
   1d928:	add	r3, r3, #1
   1d92c:	str	r9, [r5, #24]
   1d930:	str	r3, [r5, #20]
   1d934:	mov	r0, r4
   1d938:	b	1d6fc <flatcc_json_parser_generic_json@@Base+0xe74>
   1d93c:	cmp	r3, #34	; 0x22
   1d940:	bne	1d6fc <flatcc_json_parser_generic_json@@Base+0xe74>
   1d944:	add	r0, r0, #1
   1d948:	b	1cc80 <flatcc_json_parser_generic_json@@Base+0x3f8>
   1d94c:	cmp	r4, r3
   1d950:	mov	r1, r3
   1d954:	beq	1e028 <flatcc_json_parser_generic_json@@Base+0x17a0>
   1d958:	ldrb	r0, [r3], #1
   1d95c:	cmp	r0, #32
   1d960:	bls	1e02c <flatcc_json_parser_generic_json@@Base+0x17a4>
   1d964:	mov	r2, r0
   1d968:	b	1d5b8 <flatcc_json_parser_generic_json@@Base+0xd30>
   1d96c:	ldr	r3, [r5, #4]
   1d970:	mov	r2, #20
   1d974:	sub	r3, r0, r3
   1d978:	add	r3, r3, #1
   1d97c:	str	r0, [r5, #36]	; 0x24
   1d980:	str	r2, [r5, #24]
   1d984:	str	r3, [r5, #20]
   1d988:	mov	r0, r4
   1d98c:	b	1d6fc <flatcc_json_parser_generic_json@@Base+0xe74>
   1d990:	cmp	r2, #32
   1d994:	bhi	1da50 <flatcc_json_parser_generic_json@@Base+0x11c8>
   1d998:	sub	r2, r2, #9
   1d99c:	cmp	r2, #23
   1d9a0:	ldrls	pc, [pc, r2, lsl #2]
   1d9a4:	b	1db00 <flatcc_json_parser_generic_json@@Base+0x1278>
   1d9a8:	strdeq	sp, [r1], -r8
   1d9ac:	andeq	sp, r1, r8, lsr #20
   1d9b0:	andeq	sp, r1, r0, lsl #22
   1d9b4:	andeq	sp, r1, r0, lsl #22
   1d9b8:	andeq	sp, r1, r8, lsl #20
   1d9bc:	andeq	sp, r1, r0, lsl #22
   1d9c0:	andeq	sp, r1, r0, lsl #22
   1d9c4:	andeq	sp, r1, r0, lsl #22
   1d9c8:	andeq	sp, r1, r0, lsl #22
   1d9cc:	andeq	sp, r1, r0, lsl #22
   1d9d0:	andeq	sp, r1, r0, lsl #22
   1d9d4:	andeq	sp, r1, r0, lsl #22
   1d9d8:	andeq	sp, r1, r0, lsl #22
   1d9dc:	andeq	sp, r1, r0, lsl #22
   1d9e0:	andeq	sp, r1, r0, lsl #22
   1d9e4:	andeq	sp, r1, r0, lsl #22
   1d9e8:	andeq	sp, r1, r0, lsl #22
   1d9ec:	andeq	sp, r1, r0, lsl #22
   1d9f0:	andeq	sp, r1, r0, lsl #22
   1d9f4:	andeq	sp, r1, r0, lsl #22
   1d9f8:	andeq	sp, r1, r0, lsl #22
   1d9fc:	andeq	sp, r1, r0, lsl #22
   1da00:	andeq	sp, r1, r0, lsl #22
   1da04:	andeq	sp, r1, r8, lsl r6
   1da08:	sub	r3, r0, r1
   1da0c:	cmp	r3, #1
   1da10:	movle	r3, r8
   1da14:	ldrbgt	r3, [r1, #1]
   1da18:	subgt	r3, r3, #10
   1da1c:	clzgt	r3, r3
   1da20:	lsrgt	r3, r3, #5
   1da24:	add	r1, r1, r3
   1da28:	ldr	r3, [r5, #16]
   1da2c:	add	r1, r1, #1
   1da30:	add	r3, r3, #1
   1da34:	str	r1, [r5, #4]
   1da38:	str	r3, [r5, #16]
   1da3c:	cmp	r4, r1
   1da40:	beq	1de1c <flatcc_json_parser_generic_json@@Base+0x1594>
   1da44:	ldrb	r2, [r1]
   1da48:	cmp	r2, #32
   1da4c:	bls	1d998 <flatcc_json_parser_generic_json@@Base+0x1110>
   1da50:	cmp	r2, #58	; 0x3a
   1da54:	bne	1e1b4 <flatcc_json_parser_generic_json@@Base+0x192c>
   1da58:	add	r3, r1, #1
   1da5c:	sub	r2, r0, r3
   1da60:	cmp	r2, #1
   1da64:	ldrble	ip, [r1, #1]
   1da68:	ble	1da80 <flatcc_json_parser_generic_json@@Base+0x11f8>
   1da6c:	ldrb	r2, [r1, #1]
   1da70:	cmp	r2, #32
   1da74:	mov	ip, r2
   1da78:	bhi	1dda8 <flatcc_json_parser_generic_json@@Base+0x1520>
   1da7c:	beq	1dd98 <flatcc_json_parser_generic_json@@Base+0x1510>
   1da80:	cmp	r4, r3
   1da84:	mov	r2, ip
   1da88:	beq	1dab4 <flatcc_json_parser_generic_json@@Base+0x122c>
   1da8c:	cmp	ip, #32
   1da90:	beq	1daa4 <flatcc_json_parser_generic_json@@Base+0x121c>
   1da94:	b	1db2c <flatcc_json_parser_generic_json@@Base+0x12a4>
   1da98:	cmp	r2, #32
   1da9c:	mov	r3, r1
   1daa0:	bne	1db30 <flatcc_json_parser_generic_json@@Base+0x12a8>
   1daa4:	add	r1, r3, #1
   1daa8:	cmp	r4, r1
   1daac:	ldrb	r2, [r3, #1]
   1dab0:	bne	1da98 <flatcc_json_parser_generic_json@@Base+0x1210>
   1dab4:	cmp	r2, #57	; 0x39
   1dab8:	bhi	1ca90 <flatcc_json_parser_generic_json@@Base+0x208>
   1dabc:	cmp	r2, #48	; 0x30
   1dac0:	bcs	1ca58 <flatcc_json_parser_generic_json@@Base+0x1d0>
   1dac4:	cmp	r2, #34	; 0x22
   1dac8:	bne	1e0cc <flatcc_json_parser_generic_json@@Base+0x1844>
   1dacc:	ldr	r3, [r5, #24]
   1dad0:	cmp	r3, #0
   1dad4:	bne	1ca58 <flatcc_json_parser_generic_json@@Base+0x1d0>
   1dad8:	ldr	r3, [r5, #4]
   1dadc:	mov	r2, #16
   1dae0:	sub	r3, r4, r3
   1dae4:	add	r3, r3, #1
   1dae8:	str	r4, [r5, #36]	; 0x24
   1daec:	str	r3, [r5, #20]
   1daf0:	str	r2, [r5, #24]
   1daf4:	b	1ca58 <flatcc_json_parser_generic_json@@Base+0x1d0>
   1daf8:	add	r1, r1, #1
   1dafc:	b	1da3c <flatcc_json_parser_generic_json@@Base+0x11b4>
   1db00:	ldr	r3, [r5, #24]
   1db04:	cmp	r3, #0
   1db08:	bne	1ca84 <flatcc_json_parser_generic_json@@Base+0x1fc>
   1db0c:	ldr	r3, [r5, #4]
   1db10:	mov	r2, #5
   1db14:	sub	r3, r1, r3
   1db18:	add	r3, r3, #1
   1db1c:	str	r1, [r5, #36]	; 0x24
   1db20:	str	r3, [r5, #20]
   1db24:	str	r2, [r5, #24]
   1db28:	b	1ca84 <flatcc_json_parser_generic_json@@Base+0x1fc>
   1db2c:	mov	r1, r3
   1db30:	cmp	r2, #32
   1db34:	movls	r3, r1
   1db38:	bhi	1cc40 <flatcc_json_parser_generic_json@@Base+0x3b8>
   1db3c:	sub	r2, r2, #9
   1db40:	cmp	r2, #23
   1db44:	ldrls	pc, [pc, r2, lsl #2]
   1db48:	b	1dc44 <flatcc_json_parser_generic_json@@Base+0x13bc>
   1db4c:	andeq	sp, r1, ip, lsr #24
   1db50:	andeq	sp, r1, ip, asr #23
   1db54:	andeq	sp, r1, r4, asr #24
   1db58:	andeq	sp, r1, r4, asr #24
   1db5c:	andeq	sp, r1, ip, lsr #23
   1db60:	andeq	sp, r1, r4, asr #24
   1db64:	andeq	sp, r1, r4, asr #24
   1db68:	andeq	sp, r1, r4, asr #24
   1db6c:	andeq	sp, r1, r4, asr #24
   1db70:	andeq	sp, r1, r4, asr #24
   1db74:	andeq	sp, r1, r4, asr #24
   1db78:	andeq	sp, r1, r4, asr #24
   1db7c:	andeq	sp, r1, r4, asr #24
   1db80:	andeq	sp, r1, r4, asr #24
   1db84:	andeq	sp, r1, r4, asr #24
   1db88:	andeq	sp, r1, r4, asr #24
   1db8c:	andeq	sp, r1, r4, asr #24
   1db90:	andeq	sp, r1, r4, asr #24
   1db94:	andeq	sp, r1, r4, asr #24
   1db98:	andeq	sp, r1, r4, asr #24
   1db9c:	andeq	sp, r1, r4, asr #24
   1dba0:	andeq	sp, r1, r4, asr #24
   1dba4:	andeq	sp, r1, r4, asr #24
   1dba8:	andeq	sp, r1, r4, lsr ip
   1dbac:	sub	r2, r0, r3
   1dbb0:	cmp	r2, #1
   1dbb4:	movle	r2, r8
   1dbb8:	ldrbgt	r2, [r3, #1]
   1dbbc:	subgt	r2, r2, #10
   1dbc0:	clzgt	r2, r2
   1dbc4:	lsrgt	r2, r2, #5
   1dbc8:	add	r3, r3, r2
   1dbcc:	ldr	r2, [r5, #16]
   1dbd0:	add	r3, r3, #1
   1dbd4:	add	r2, r2, #1
   1dbd8:	str	r3, [r5, #4]
   1dbdc:	str	r2, [r5, #16]
   1dbe0:	cmp	r4, r3
   1dbe4:	beq	1e1ac <flatcc_json_parser_generic_json@@Base+0x1924>
   1dbe8:	ldrb	r2, [r3]
   1dbec:	cmp	r2, #32
   1dbf0:	bls	1db3c <flatcc_json_parser_generic_json@@Base+0x12b4>
   1dbf4:	cmp	r2, #57	; 0x39
   1dbf8:	bhi	1c8dc <flatcc_json_parser_generic_json@@Base+0x54>
   1dbfc:	cmp	r2, #48	; 0x30
   1dc00:	bcs	1c9ec <flatcc_json_parser_generic_json@@Base+0x164>
   1dc04:	cmp	r2, #34	; 0x22
   1dc08:	beq	1d680 <flatcc_json_parser_generic_json@@Base+0xdf8>
   1dc0c:	cmp	r2, #45	; 0x2d
   1dc10:	bne	1cc60 <flatcc_json_parser_generic_json@@Base+0x3d8>
   1dc14:	add	r1, r3, #1
   1dc18:	cmp	r4, r1
   1dc1c:	beq	1e094 <flatcc_json_parser_generic_json@@Base+0x180c>
   1dc20:	ldrb	r2, [r3, #1]
   1dc24:	mov	r3, r1
   1dc28:	b	1c9f4 <flatcc_json_parser_generic_json@@Base+0x16c>
   1dc2c:	add	r3, r3, #1
   1dc30:	b	1dbe0 <flatcc_json_parser_generic_json@@Base+0x1358>
   1dc34:	cmp	r4, r3
   1dc38:	bne	1daa4 <flatcc_json_parser_generic_json@@Base+0x121c>
   1dc3c:	mov	r3, r4
   1dc40:	b	1cc60 <flatcc_json_parser_generic_json@@Base+0x3d8>
   1dc44:	ldr	r2, [r5, #24]
   1dc48:	cmp	r2, #0
   1dc4c:	beq	1e0ac <flatcc_json_parser_generic_json@@Base+0x1824>
   1dc50:	ldrb	r3, [r4]
   1dc54:	cmp	r3, #57	; 0x39
   1dc58:	bhi	1e190 <flatcc_json_parser_generic_json@@Base+0x1908>
   1dc5c:	cmp	r3, #48	; 0x30
   1dc60:	bcs	1ca58 <flatcc_json_parser_generic_json@@Base+0x1d0>
   1dc64:	cmp	r3, #34	; 0x22
   1dc68:	beq	1dacc <flatcc_json_parser_generic_json@@Base+0x1244>
   1dc6c:	cmp	r3, #45	; 0x2d
   1dc70:	beq	1ca58 <flatcc_json_parser_generic_json@@Base+0x1d0>
   1dc74:	b	1dc3c <flatcc_json_parser_generic_json@@Base+0x13b4>
   1dc78:	add	r2, r3, #1
   1dc7c:	sub	r0, r4, r2
   1dc80:	cmp	r0, #1
   1dc84:	ble	1dc98 <flatcc_json_parser_generic_json@@Base+0x1410>
   1dc88:	ldrb	r0, [r3, #1]
   1dc8c:	cmp	r0, #32
   1dc90:	bhi	1d8fc <flatcc_json_parser_generic_json@@Base+0x1074>
   1dc94:	beq	1e124 <flatcc_json_parser_generic_json@@Base+0x189c>
   1dc98:	cmp	r4, r2
   1dc9c:	beq	1ca5c <flatcc_json_parser_generic_json@@Base+0x1d4>
   1dca0:	ldrb	ip, [r2]
   1dca4:	cmp	ip, #32
   1dca8:	bne	1e14c <flatcc_json_parser_generic_json@@Base+0x18c4>
   1dcac:	add	r3, r2, #1
   1dcb0:	cmp	r4, r3
   1dcb4:	mov	r0, r3
   1dcb8:	beq	1ca60 <flatcc_json_parser_generic_json@@Base+0x1d8>
   1dcbc:	ldrb	ip, [r3], #1
   1dcc0:	cmp	ip, #32
   1dcc4:	beq	1dcb0 <flatcc_json_parser_generic_json@@Base+0x1428>
   1dcc8:	cmp	ip, #32
   1dccc:	mov	r2, r0
   1dcd0:	bhi	1d15c <flatcc_json_parser_generic_json@@Base+0x8d4>
   1dcd4:	sub	ip, ip, #9
   1dcd8:	cmp	ip, #23
   1dcdc:	ldrls	pc, [pc, ip, lsl #2]
   1dce0:	b	1d170 <flatcc_json_parser_generic_json@@Base+0x8e8>
   1dce4:	muleq	r1, r0, sp
   1dce8:	andeq	sp, r1, r4, ror #26
   1dcec:	andeq	sp, r1, r0, ror r1
   1dcf0:	andeq	sp, r1, r0, ror r1
   1dcf4:	andeq	sp, r1, r4, asr #26
   1dcf8:	andeq	sp, r1, r0, ror r1
   1dcfc:	andeq	sp, r1, r0, ror r1
   1dd00:	andeq	sp, r1, r0, ror r1
   1dd04:	andeq	sp, r1, r0, ror r1
   1dd08:	andeq	sp, r1, r0, ror r1
   1dd0c:	andeq	sp, r1, r0, ror r1
   1dd10:	andeq	sp, r1, r0, ror r1
   1dd14:	andeq	sp, r1, r0, ror r1
   1dd18:	andeq	sp, r1, r0, ror r1
   1dd1c:	andeq	sp, r1, r0, ror r1
   1dd20:	andeq	sp, r1, r0, ror r1
   1dd24:	andeq	sp, r1, r0, ror r1
   1dd28:	andeq	sp, r1, r0, ror r1
   1dd2c:	andeq	sp, r1, r0, ror r1
   1dd30:	andeq	sp, r1, r0, ror r1
   1dd34:	andeq	sp, r1, r0, ror r1
   1dd38:	andeq	sp, r1, r0, ror r1
   1dd3c:	andeq	sp, r1, r0, ror r1
   1dd40:	muleq	r1, r8, ip
   1dd44:	sub	r3, r4, r2
   1dd48:	cmp	r3, #1
   1dd4c:	movle	r3, r8
   1dd50:	ldrbgt	r3, [r2, #1]
   1dd54:	subgt	r3, r3, #10
   1dd58:	clzgt	r3, r3
   1dd5c:	lsrgt	r3, r3, #5
   1dd60:	add	r2, r2, r3
   1dd64:	ldr	r3, [r5, #16]
   1dd68:	add	r2, r2, #1
   1dd6c:	add	r3, r3, #1
   1dd70:	str	r2, [r5, #4]
   1dd74:	str	r3, [r5, #16]
   1dd78:	cmp	r4, r2
   1dd7c:	beq	1ca5c <flatcc_json_parser_generic_json@@Base+0x1d4>
   1dd80:	ldrb	ip, [r2]
   1dd84:	cmp	ip, #32
   1dd88:	bls	1dcd4 <flatcc_json_parser_generic_json@@Base+0x144c>
   1dd8c:	b	1d15c <flatcc_json_parser_generic_json@@Base+0x8d4>
   1dd90:	add	r2, r2, #1
   1dd94:	b	1dd78 <flatcc_json_parser_generic_json@@Base+0x14f0>
   1dd98:	ldrb	r2, [r1, #2]
   1dd9c:	cmp	r2, #32
   1dda0:	bls	1da80 <flatcc_json_parser_generic_json@@Base+0x11f8>
   1dda4:	add	r3, r1, #2
   1dda8:	cmp	r2, #57	; 0x39
   1ddac:	bhi	1c8dc <flatcc_json_parser_generic_json@@Base+0x54>
   1ddb0:	cmp	r2, #48	; 0x30
   1ddb4:	bcs	1c9e4 <flatcc_json_parser_generic_json@@Base+0x15c>
   1ddb8:	cmp	r2, #34	; 0x22
   1ddbc:	bne	1c9dc <flatcc_json_parser_generic_json@@Base+0x154>
   1ddc0:	cmp	r3, r4
   1ddc4:	beq	1dacc <flatcc_json_parser_generic_json@@Base+0x1244>
   1ddc8:	b	1d680 <flatcc_json_parser_generic_json@@Base+0xdf8>
   1ddcc:	ldr	r2, [r5, #24]
   1ddd0:	cmp	r2, #0
   1ddd4:	beq	1e0e4 <flatcc_json_parser_generic_json@@Base+0x185c>
   1ddd8:	ldr	r3, [r5, #12]
   1dddc:	cmp	r3, #0
   1dde0:	bne	1e138 <flatcc_json_parser_generic_json@@Base+0x18b0>
   1dde4:	mov	r1, r4
   1dde8:	mov	r0, r1
   1ddec:	mov	r1, r4
   1ddf0:	ldr	r3, [r5, #24]
   1ddf4:	cmp	r3, #0
   1ddf8:	beq	1e004 <flatcc_json_parser_generic_json@@Base+0x177c>
   1ddfc:	mov	r1, r4
   1de00:	b	1d618 <flatcc_json_parser_generic_json@@Base+0xd90>
   1de04:	ldrb	r2, [r1, #1]
   1de08:	cmp	r2, #32
   1de0c:	addhi	r1, r1, #1
   1de10:	bls	1d618 <flatcc_json_parser_generic_json@@Base+0xd90>
   1de14:	cmp	r4, r1
   1de18:	bne	1da50 <flatcc_json_parser_generic_json@@Base+0x11c8>
   1de1c:	mov	r1, r4
   1de20:	b	1d64c <flatcc_json_parser_generic_json@@Base+0xdc4>
   1de24:	cmp	r3, #31
   1de28:	bls	1d910 <flatcc_json_parser_generic_json@@Base+0x1088>
   1de2c:	b	1d6fc <flatcc_json_parser_generic_json@@Base+0xe74>
   1de30:	cmp	r2, #32
   1de34:	beq	1cc80 <flatcc_json_parser_generic_json@@Base+0x3f8>
   1de38:	bls	1df1c <flatcc_json_parser_generic_json@@Base+0x1694>
   1de3c:	cmp	r2, #58	; 0x3a
   1de40:	beq	1cc80 <flatcc_json_parser_generic_json@@Base+0x3f8>
   1de44:	bls	1dff8 <flatcc_json_parser_generic_json@@Base+0x1770>
   1de48:	cmp	r2, #93	; 0x5d
   1de4c:	beq	1cc80 <flatcc_json_parser_generic_json@@Base+0x3f8>
   1de50:	cmp	r2, #125	; 0x7d
   1de54:	bne	1ca4c <flatcc_json_parser_generic_json@@Base+0x1c4>
   1de58:	b	1cc80 <flatcc_json_parser_generic_json@@Base+0x3f8>
   1de5c:	ldrb	r3, [r0, #1]
   1de60:	sub	r3, r3, #48	; 0x30
   1de64:	cmp	r3, #9
   1de68:	bhi	1df70 <flatcc_json_parser_generic_json@@Base+0x16e8>
   1de6c:	add	r3, r0, #2
   1de70:	cmp	r4, r3
   1de74:	beq	1e1a4 <flatcc_json_parser_generic_json@@Base+0x191c>
   1de78:	ldrb	r2, [r0, #2]
   1de7c:	sub	r1, r2, #48	; 0x30
   1de80:	cmp	r1, #9
   1de84:	bhi	1e0dc <flatcc_json_parser_generic_json@@Base+0x1854>
   1de88:	add	r3, r0, #3
   1de8c:	b	1dea0 <flatcc_json_parser_generic_json@@Base+0x1618>
   1de90:	ldrb	r2, [r3], #1
   1de94:	sub	r1, r2, #48	; 0x30
   1de98:	cmp	r1, #9
   1de9c:	bhi	1e0d8 <flatcc_json_parser_generic_json@@Base+0x1850>
   1dea0:	cmp	r3, r4
   1dea4:	mov	r0, r3
   1dea8:	bne	1de90 <flatcc_json_parser_generic_json@@Base+0x1608>
   1deac:	b	1ca4c <flatcc_json_parser_generic_json@@Base+0x1c4>
   1deb0:	ldrb	r2, [r0, #2]
   1deb4:	sub	r2, r2, #48	; 0x30
   1deb8:	cmp	r2, #9
   1debc:	bhi	1d7f4 <flatcc_json_parser_generic_json@@Base+0xf6c>
   1dec0:	add	r0, r3, #1
   1dec4:	cmp	r4, r0
   1dec8:	beq	1e1a4 <flatcc_json_parser_generic_json@@Base+0x191c>
   1decc:	ldrb	r2, [r3, #1]
   1ded0:	sub	r1, r2, #48	; 0x30
   1ded4:	cmp	r1, #9
   1ded8:	bhi	1de30 <flatcc_json_parser_generic_json@@Base+0x15a8>
   1dedc:	add	r3, r3, #2
   1dee0:	b	1def4 <flatcc_json_parser_generic_json@@Base+0x166c>
   1dee4:	ldrb	r2, [r3], #1
   1dee8:	sub	r1, r2, #48	; 0x30
   1deec:	cmp	r1, #9
   1def0:	bhi	1de30 <flatcc_json_parser_generic_json@@Base+0x15a8>
   1def4:	cmp	r4, r3
   1def8:	mov	r0, r3
   1defc:	bne	1dee4 <flatcc_json_parser_generic_json@@Base+0x165c>
   1df00:	b	1ca4c <flatcc_json_parser_generic_json@@Base+0x1c4>
   1df04:	mov	r0, r4
   1df08:	add	r1, r1, #1
   1df0c:	sub	r3, r4, r1
   1df10:	b	1d5fc <flatcc_json_parser_generic_json@@Base+0xd74>
   1df14:	mov	r1, r4
   1df18:	b	1ddf0 <flatcc_json_parser_generic_json@@Base+0x1568>
   1df1c:	cmp	r2, #9
   1df20:	bcc	1ca4c <flatcc_json_parser_generic_json@@Base+0x1c4>
   1df24:	cmp	r2, #11
   1df28:	bls	1cc80 <flatcc_json_parser_generic_json@@Base+0x3f8>
   1df2c:	cmp	r2, #13
   1df30:	bne	1ca4c <flatcc_json_parser_generic_json@@Base+0x1c4>
   1df34:	b	1cc80 <flatcc_json_parser_generic_json@@Base+0x3f8>
   1df38:	mov	r0, r2
   1df3c:	b	1d098 <flatcc_json_parser_generic_json@@Base+0x810>
   1df40:	ldr	r3, [r5, #4]
   1df44:	mov	r2, #6
   1df48:	sub	r3, r0, r3
   1df4c:	add	r3, r3, #1
   1df50:	str	r0, [r5, #36]	; 0x24
   1df54:	str	r3, [r5, #20]
   1df58:	str	r2, [r5, #24]
   1df5c:	b	1ca58 <flatcc_json_parser_generic_json@@Base+0x1d0>
   1df60:	cmp	r2, #123	; 0x7b
   1df64:	bne	1dc3c <flatcc_json_parser_generic_json@@Base+0x13b4>
   1df68:	mov	r3, r4
   1df6c:	b	1c8ec <flatcc_json_parser_generic_json@@Base+0x64>
   1df70:	ldr	r3, [r5, #24]
   1df74:	cmp	r3, #0
   1df78:	bne	1ca58 <flatcc_json_parser_generic_json@@Base+0x1d0>
   1df7c:	ldr	r3, [r5, #4]
   1df80:	add	r0, r0, #1
   1df84:	sub	r3, r0, r3
   1df88:	add	r3, r3, #1
   1df8c:	mov	r2, #6
   1df90:	str	r0, [r5, #36]	; 0x24
   1df94:	str	r3, [r5, #20]
   1df98:	str	r2, [r5, #24]
   1df9c:	b	1ca58 <flatcc_json_parser_generic_json@@Base+0x1d0>
   1dfa0:	sub	r3, r4, r0
   1dfa4:	cmp	r3, #1
   1dfa8:	movle	r3, r8
   1dfac:	ldrbgt	r3, [r0, #1]
   1dfb0:	subgt	r3, r3, #10
   1dfb4:	clzgt	r3, r3
   1dfb8:	lsrgt	r3, r3, #5
   1dfbc:	add	r0, r0, r3
   1dfc0:	ldr	r3, [r5, #16]
   1dfc4:	add	r0, r0, #1
   1dfc8:	add	r3, r3, #1
   1dfcc:	str	r0, [r5, #4]
   1dfd0:	str	r3, [r5, #16]
   1dfd4:	cmp	r4, r0
   1dfd8:	beq	1ca5c <flatcc_json_parser_generic_json@@Base+0x1d4>
   1dfdc:	ldrb	r3, [r0]
   1dfe0:	cmp	r3, #32
   1dfe4:	bls	1d4f0 <flatcc_json_parser_generic_json@@Base+0xc68>
   1dfe8:	mov	r2, r0
   1dfec:	b	1d15c <flatcc_json_parser_generic_json@@Base+0x8d4>
   1dff0:	add	r0, r0, #1
   1dff4:	b	1dfd4 <flatcc_json_parser_generic_json@@Base+0x174c>
   1dff8:	cmp	r2, #44	; 0x2c
   1dffc:	bne	1ca4c <flatcc_json_parser_generic_json@@Base+0x1c4>
   1e000:	b	1cc80 <flatcc_json_parser_generic_json@@Base+0x3f8>
   1e004:	ldr	r3, [r5, #4]
   1e008:	mov	r2, #20
   1e00c:	sub	r3, r1, r3
   1e010:	add	r3, r3, #1
   1e014:	str	r1, [r5, #36]	; 0x24
   1e018:	str	r2, [r5, #24]
   1e01c:	str	r3, [r5, #20]
   1e020:	mov	r1, r4
   1e024:	b	1d618 <flatcc_json_parser_generic_json@@Base+0xd90>
   1e028:	mov	r1, r4
   1e02c:	cmp	r2, #46	; 0x2e
   1e030:	bne	1d5f4 <flatcc_json_parser_generic_json@@Base+0xd6c>
   1e034:	ldr	r3, [r5, #24]
   1e038:	cmp	r3, #0
   1e03c:	bne	1e05c <flatcc_json_parser_generic_json@@Base+0x17d4>
   1e040:	ldr	r3, [r5, #4]
   1e044:	mov	r2, #5
   1e048:	sub	r3, r1, r3
   1e04c:	add	r3, r3, #1
   1e050:	str	r1, [r5, #36]	; 0x24
   1e054:	str	r3, [r5, #20]
   1e058:	str	r2, [r5, #24]
   1e05c:	mov	r0, r4
   1e060:	b	1ddfc <flatcc_json_parser_generic_json@@Base+0x1574>
   1e064:	ldr	r2, [r5, #24]
   1e068:	cmp	r2, #0
   1e06c:	bne	1ca84 <flatcc_json_parser_generic_json@@Base+0x1fc>
   1e070:	ldr	r2, [r5, #4]
   1e074:	mov	r1, #2
   1e078:	sub	r2, r3, r2
   1e07c:	add	r2, r2, #1
   1e080:	str	r3, [r5, #36]	; 0x24
   1e084:	mov	r0, r4
   1e088:	str	r2, [r5, #20]
   1e08c:	str	r1, [r5, #24]
   1e090:	b	1ca88 <flatcc_json_parser_generic_json@@Base+0x200>
   1e094:	ldr	r3, [r5, #24]
   1e098:	cmp	r3, #0
   1e09c:	bne	1ca58 <flatcc_json_parser_generic_json@@Base+0x1d0>
   1e0a0:	ldr	r3, [r5, #4]
   1e0a4:	mov	r2, #6
   1e0a8:	b	1dae0 <flatcc_json_parser_generic_json@@Base+0x1258>
   1e0ac:	ldr	r2, [r5, #4]
   1e0b0:	str	r3, [r5, #36]	; 0x24
   1e0b4:	sub	r3, r3, r2
   1e0b8:	add	r3, r3, #1
   1e0bc:	mov	r2, #5
   1e0c0:	str	r3, [r5, #20]
   1e0c4:	str	r2, [r5, #24]
   1e0c8:	b	1dc50 <flatcc_json_parser_generic_json@@Base+0x13c8>
   1e0cc:	cmp	r2, #45	; 0x2d
   1e0d0:	beq	1ca58 <flatcc_json_parser_generic_json@@Base+0x1d0>
   1e0d4:	b	1dc3c <flatcc_json_parser_generic_json@@Base+0x13b4>
   1e0d8:	mov	r3, r0
   1e0dc:	mov	r0, r3
   1e0e0:	b	1d7bc <flatcc_json_parser_generic_json@@Base+0xf34>
   1e0e4:	ldr	r2, [r5, #4]
   1e0e8:	str	r3, [r5, #36]	; 0x24
   1e0ec:	sub	r3, r3, r2
   1e0f0:	add	r3, r3, #1
   1e0f4:	mov	r2, #5
   1e0f8:	str	r3, [r5, #20]
   1e0fc:	str	r2, [r5, #24]
   1e100:	b	1ddd8 <flatcc_json_parser_generic_json@@Base+0x1550>
   1e104:	ldr	r2, [r5, #24]
   1e108:	cmp	r2, #0
   1e10c:	bne	1ca84 <flatcc_json_parser_generic_json@@Base+0x1fc>
   1e110:	ldr	r2, [r5, #4]
   1e114:	mov	r1, #5
   1e118:	b	1e078 <flatcc_json_parser_generic_json@@Base+0x17f0>
   1e11c:	mov	r0, r2
   1e120:	b	1d350 <flatcc_json_parser_generic_json@@Base+0xac8>
   1e124:	ldrb	r0, [r3, #2]
   1e128:	cmp	r0, #32
   1e12c:	bls	1dc98 <flatcc_json_parser_generic_json@@Base+0x1410>
   1e130:	add	r2, r3, #2
   1e134:	b	1d8fc <flatcc_json_parser_generic_json@@Base+0x1074>
   1e138:	mov	r3, r4
   1e13c:	mov	r0, r3
   1e140:	mov	r1, r4
   1e144:	sub	r3, r3, r4
   1e148:	b	1d5fc <flatcc_json_parser_generic_json@@Base+0xd74>
   1e14c:	mov	r0, r2
   1e150:	b	1dcc8 <flatcc_json_parser_generic_json@@Base+0x1440>
   1e154:	ldrb	r0, [r3, #2]
   1e158:	cmp	r0, #32
   1e15c:	bls	1d4b4 <flatcc_json_parser_generic_json@@Base+0xc2c>
   1e160:	b	1e130 <flatcc_json_parser_generic_json@@Base+0x18a8>
   1e164:	sub	r1, r4, r3
   1e168:	cmp	r1, #1
   1e16c:	mov	r0, r4
   1e170:	mov	r1, r3
   1e174:	bgt	1d610 <flatcc_json_parser_generic_json@@Base+0xd88>
   1e178:	b	1d618 <flatcc_json_parser_generic_json@@Base+0xd90>
   1e17c:	cmp	r2, #125	; 0x7d
   1e180:	add	r6, r6, #1
   1e184:	beq	1cc88 <flatcc_json_parser_generic_json@@Base+0x400>
   1e188:	mov	r3, r0
   1e18c:	b	1d268 <flatcc_json_parser_generic_json@@Base+0x9e0>
   1e190:	cmp	r3, #91	; 0x5b
   1e194:	beq	1ca98 <flatcc_json_parser_generic_json@@Base+0x210>
   1e198:	cmp	r3, #123	; 0x7b
   1e19c:	beq	1df68 <flatcc_json_parser_generic_json@@Base+0x16e0>
   1e1a0:	b	1dc3c <flatcc_json_parser_generic_json@@Base+0x13b4>
   1e1a4:	mov	r0, r4
   1e1a8:	b	1ca4c <flatcc_json_parser_generic_json@@Base+0x1c4>
   1e1ac:	ldrb	r2, [r4]
   1e1b0:	b	1dab4 <flatcc_json_parser_generic_json@@Base+0x122c>
   1e1b4:	ldr	r3, [r5, #24]
   1e1b8:	cmp	r3, #0
   1e1bc:	bne	1ca84 <flatcc_json_parser_generic_json@@Base+0x1fc>
   1e1c0:	ldr	r3, [r5, #4]
   1e1c4:	mov	r2, #4
   1e1c8:	b	1d660 <flatcc_json_parser_generic_json@@Base+0xdd8>
   1e1cc:	ldr	r3, [r5, #24]
   1e1d0:	cmp	r3, #0
   1e1d4:	bne	1ca58 <flatcc_json_parser_generic_json@@Base+0x1d0>
   1e1d8:	ldr	r3, [r5, #4]
   1e1dc:	mov	r2, #20
   1e1e0:	b	1dae0 <flatcc_json_parser_generic_json@@Base+0x1258>
   1e1e4:	cmp	r2, #93	; 0x5d
   1e1e8:	add	r6, r6, #1
   1e1ec:	bne	1e188 <flatcc_json_parser_generic_json@@Base+0x1900>
   1e1f0:	b	1cc88 <flatcc_json_parser_generic_json@@Base+0x400>
   1e1f4:	mov	r3, r1
   1e1f8:	b	1ca9c <flatcc_json_parser_generic_json@@Base+0x214>
   1e1fc:	cmp	r2, #48	; 0x30
   1e200:	bcs	1e214 <flatcc_json_parser_generic_json@@Base+0x198c>
   1e204:	cmp	r2, #34	; 0x22
   1e208:	beq	1d67c <flatcc_json_parser_generic_json@@Base+0xdf4>
   1e20c:	cmp	r2, #45	; 0x2d
   1e210:	bne	1cc5c <flatcc_json_parser_generic_json@@Base+0x3d4>
   1e214:	mov	r3, r1
   1e218:	b	1c9e4 <flatcc_json_parser_generic_json@@Base+0x15c>

0001e21c <flatcc_json_parser_unmatched_symbol@@Base>:
   1e21c:	ldr	r3, [r0, #8]
   1e220:	tst	r3, #1
   1e224:	bne	1e260 <flatcc_json_parser_unmatched_symbol@@Base+0x44>
   1e228:	ldr	r3, [r0, #24]
   1e22c:	cmp	r3, #0
   1e230:	beq	1e23c <flatcc_json_parser_unmatched_symbol@@Base+0x20>
   1e234:	mov	r0, r2
   1e238:	bx	lr
   1e23c:	ldr	r3, [r0, #4]
   1e240:	mov	ip, #13
   1e244:	sub	r3, r1, r3
   1e248:	add	r3, r3, #1
   1e24c:	str	r1, [r0, #36]	; 0x24
   1e250:	str	r3, [r0, #20]
   1e254:	str	ip, [r0, #24]
   1e258:	mov	r0, r2
   1e25c:	bx	lr
   1e260:	ldr	r3, [r0, #12]
   1e264:	push	{r4, lr}
   1e268:	cmp	r3, #0
   1e26c:	beq	1e34c <flatcc_json_parser_unmatched_symbol@@Base+0x130>
   1e270:	cmp	r1, r2
   1e274:	beq	1e2c4 <flatcc_json_parser_unmatched_symbol@@Base+0xa8>
   1e278:	ldrb	ip, [r1]
   1e27c:	cmp	ip, #32
   1e280:	bls	1e2c4 <flatcc_json_parser_unmatched_symbol@@Base+0xa8>
   1e284:	add	r3, r1, #1
   1e288:	cmp	ip, #46	; 0x2e
   1e28c:	cmpne	ip, #95	; 0x5f
   1e290:	sub	r1, r3, #1
   1e294:	beq	1e3a0 <flatcc_json_parser_unmatched_symbol@@Base+0x184>
   1e298:	sub	lr, ip, #48	; 0x30
   1e29c:	tst	ip, #128	; 0x80
   1e2a0:	uxtb	lr, lr
   1e2a4:	bne	1e3a0 <flatcc_json_parser_unmatched_symbol@@Base+0x184>
   1e2a8:	orr	r4, ip, #32
   1e2ac:	sub	r4, r4, #97	; 0x61
   1e2b0:	cmp	lr, #9
   1e2b4:	uxtb	r4, r4
   1e2b8:	bls	1e3a0 <flatcc_json_parser_unmatched_symbol@@Base+0x184>
   1e2bc:	cmp	r4, #25
   1e2c0:	bls	1e3a0 <flatcc_json_parser_unmatched_symbol@@Base+0x184>
   1e2c4:	mov	lr, r2
   1e2c8:	sub	r3, r2, r1
   1e2cc:	cmp	r3, #1
   1e2d0:	ble	1e2e4 <flatcc_json_parser_unmatched_symbol@@Base+0xc8>
   1e2d4:	ldrb	ip, [r1]
   1e2d8:	cmp	ip, #32
   1e2dc:	bhi	1e51c <flatcc_json_parser_unmatched_symbol@@Base+0x300>
   1e2e0:	beq	1e50c <flatcc_json_parser_unmatched_symbol@@Base+0x2f0>
   1e2e4:	mov	r4, #0
   1e2e8:	cmp	r2, r1
   1e2ec:	beq	1e5b8 <flatcc_json_parser_unmatched_symbol@@Base+0x39c>
   1e2f0:	ldrb	ip, [r1]
   1e2f4:	cmp	ip, #32
   1e2f8:	bne	1e3c0 <flatcc_json_parser_unmatched_symbol@@Base+0x1a4>
   1e2fc:	add	r3, r1, #1
   1e300:	b	1e310 <flatcc_json_parser_unmatched_symbol@@Base+0xf4>
   1e304:	ldrb	ip, [r3], #1
   1e308:	cmp	ip, #32
   1e30c:	bne	1e3c0 <flatcc_json_parser_unmatched_symbol@@Base+0x1a4>
   1e310:	cmp	r3, r2
   1e314:	mov	r1, r3
   1e318:	bne	1e304 <flatcc_json_parser_unmatched_symbol@@Base+0xe8>
   1e31c:	ldr	r3, [r0, #24]
   1e320:	cmp	r3, #0
   1e324:	bne	1e344 <flatcc_json_parser_unmatched_symbol@@Base+0x128>
   1e328:	ldr	r3, [r0, #4]
   1e32c:	mov	ip, #4
   1e330:	sub	r3, r1, r3
   1e334:	add	r3, r3, #1
   1e338:	str	r1, [r0, #36]	; 0x24
   1e33c:	str	r3, [r0, #20]
   1e340:	str	ip, [r0, #24]
   1e344:	mov	r0, r2
   1e348:	pop	{r4, pc}
   1e34c:	cmp	r1, r2
   1e350:	beq	1e6a0 <flatcc_json_parser_unmatched_symbol@@Base+0x484>
   1e354:	ldrb	ip, [r1]
   1e358:	cmp	ip, #34	; 0x22
   1e35c:	movne	lr, r2
   1e360:	bne	1e380 <flatcc_json_parser_unmatched_symbol@@Base+0x164>
   1e364:	b	1e548 <flatcc_json_parser_unmatched_symbol@@Base+0x32c>
   1e368:	add	r1, r3, #1
   1e36c:	cmp	r2, r1
   1e370:	beq	1e530 <flatcc_json_parser_unmatched_symbol@@Base+0x314>
   1e374:	ldrb	ip, [r3, #1]
   1e378:	cmp	ip, #34	; 0x22
   1e37c:	beq	1e54c <flatcc_json_parser_unmatched_symbol@@Base+0x330>
   1e380:	cmp	ip, #92	; 0x5c
   1e384:	mov	r3, r1
   1e388:	bne	1e368 <flatcc_json_parser_unmatched_symbol@@Base+0x14c>
   1e38c:	sub	r3, r2, r1
   1e390:	cmp	r3, #1
   1e394:	ble	1e534 <flatcc_json_parser_unmatched_symbol@@Base+0x318>
   1e398:	add	r3, r1, #1
   1e39c:	b	1e368 <flatcc_json_parser_unmatched_symbol@@Base+0x14c>
   1e3a0:	cmp	r2, r3
   1e3a4:	mov	r1, r3
   1e3a8:	beq	1e558 <flatcc_json_parser_unmatched_symbol@@Base+0x33c>
   1e3ac:	ldrb	lr, [r3], #1
   1e3b0:	cmp	lr, #32
   1e3b4:	bls	1e55c <flatcc_json_parser_unmatched_symbol@@Base+0x340>
   1e3b8:	mov	ip, lr
   1e3bc:	b	1e288 <flatcc_json_parser_unmatched_symbol@@Base+0x6c>
   1e3c0:	cmp	ip, #32
   1e3c4:	bhi	1e480 <flatcc_json_parser_unmatched_symbol@@Base+0x264>
   1e3c8:	sub	ip, ip, #9
   1e3cc:	cmp	ip, #23
   1e3d0:	ldrls	pc, [pc, ip, lsl #2]
   1e3d4:	b	1e4f4 <flatcc_json_parser_unmatched_symbol@@Base+0x2d8>
   1e3d8:	andeq	lr, r1, ip, ror #9
   1e3dc:	andeq	lr, r1, r8, asr r4
   1e3e0:	strdeq	lr, [r1], -r4
   1e3e4:	strdeq	lr, [r1], -r4
   1e3e8:	andeq	lr, r1, r8, lsr r4
   1e3ec:	strdeq	lr, [r1], -r4
   1e3f0:	strdeq	lr, [r1], -r4
   1e3f4:	strdeq	lr, [r1], -r4
   1e3f8:	strdeq	lr, [r1], -r4
   1e3fc:	strdeq	lr, [r1], -r4
   1e400:	strdeq	lr, [r1], -r4
   1e404:	strdeq	lr, [r1], -r4
   1e408:	strdeq	lr, [r1], -r4
   1e40c:	strdeq	lr, [r1], -r4
   1e410:	strdeq	lr, [r1], -r4
   1e414:	strdeq	lr, [r1], -r4
   1e418:	strdeq	lr, [r1], -r4
   1e41c:	strdeq	lr, [r1], -r4
   1e420:	strdeq	lr, [r1], -r4
   1e424:	strdeq	lr, [r1], -r4
   1e428:	strdeq	lr, [r1], -r4
   1e42c:	strdeq	lr, [r1], -r4
   1e430:	strdeq	lr, [r1], -r4
   1e434:	andeq	lr, r1, r8, ror #5
   1e438:	sub	r3, lr, r1
   1e43c:	cmp	r3, #1
   1e440:	movle	r3, r4
   1e444:	ldrbgt	r3, [r1, #1]
   1e448:	subgt	r3, r3, #10
   1e44c:	clzgt	r3, r3
   1e450:	lsrgt	r3, r3, #5
   1e454:	add	r1, r1, r3
   1e458:	ldr	r3, [r0, #16]
   1e45c:	add	r1, r1, #1
   1e460:	add	r3, r3, #1
   1e464:	str	r1, [r0, #4]
   1e468:	str	r3, [r0, #16]
   1e46c:	cmp	r2, r1
   1e470:	beq	1e5b8 <flatcc_json_parser_unmatched_symbol@@Base+0x39c>
   1e474:	ldrb	ip, [r1]
   1e478:	cmp	ip, #32
   1e47c:	bls	1e3c8 <flatcc_json_parser_unmatched_symbol@@Base+0x1ac>
   1e480:	cmp	ip, #58	; 0x3a
   1e484:	bne	1e31c <flatcc_json_parser_unmatched_symbol@@Base+0x100>
   1e488:	add	r4, r1, #1
   1e48c:	sub	r3, lr, r4
   1e490:	cmp	r3, #1
   1e494:	ble	1e4a8 <flatcc_json_parser_unmatched_symbol@@Base+0x28c>
   1e498:	ldrb	r3, [r1, #1]
   1e49c:	cmp	r3, #32
   1e4a0:	bhi	1e4e0 <flatcc_json_parser_unmatched_symbol@@Base+0x2c4>
   1e4a4:	beq	1e6a8 <flatcc_json_parser_unmatched_symbol@@Base+0x48c>
   1e4a8:	mov	r1, #0
   1e4ac:	cmp	r2, r4
   1e4b0:	beq	1e698 <flatcc_json_parser_unmatched_symbol@@Base+0x47c>
   1e4b4:	ldrb	ip, [r4]
   1e4b8:	cmp	ip, #32
   1e4bc:	bne	1e5c0 <flatcc_json_parser_unmatched_symbol@@Base+0x3a4>
   1e4c0:	add	r3, r4, #1
   1e4c4:	b	1e4d4 <flatcc_json_parser_unmatched_symbol@@Base+0x2b8>
   1e4c8:	ldrb	ip, [r3], #1
   1e4cc:	cmp	ip, #32
   1e4d0:	bne	1e5c0 <flatcc_json_parser_unmatched_symbol@@Base+0x3a4>
   1e4d4:	cmp	r3, r2
   1e4d8:	mov	r4, r3
   1e4dc:	bne	1e4c8 <flatcc_json_parser_unmatched_symbol@@Base+0x2ac>
   1e4e0:	mov	r1, r4
   1e4e4:	pop	{r4, lr}
   1e4e8:	b	1c888 <flatcc_json_parser_generic_json@@Base>
   1e4ec:	add	r1, r1, #1
   1e4f0:	b	1e46c <flatcc_json_parser_unmatched_symbol@@Base+0x250>
   1e4f4:	ldr	r3, [r0, #24]
   1e4f8:	cmp	r3, #0
   1e4fc:	bne	1e344 <flatcc_json_parser_unmatched_symbol@@Base+0x128>
   1e500:	ldr	r3, [r0, #4]
   1e504:	mov	ip, #5
   1e508:	b	1e330 <flatcc_json_parser_unmatched_symbol@@Base+0x114>
   1e50c:	ldrb	ip, [r1, #1]
   1e510:	cmp	ip, #32
   1e514:	addhi	r1, r1, #1
   1e518:	bls	1e2e4 <flatcc_json_parser_unmatched_symbol@@Base+0xc8>
   1e51c:	cmp	r2, r1
   1e520:	beq	1e31c <flatcc_json_parser_unmatched_symbol@@Base+0x100>
   1e524:	cmp	ip, #58	; 0x3a
   1e528:	bne	1e31c <flatcc_json_parser_unmatched_symbol@@Base+0x100>
   1e52c:	b	1e488 <flatcc_json_parser_unmatched_symbol@@Base+0x26c>
   1e530:	mov	r1, r2
   1e534:	ldr	r3, [r0, #24]
   1e538:	cmp	r3, #0
   1e53c:	beq	1e598 <flatcc_json_parser_unmatched_symbol@@Base+0x37c>
   1e540:	mov	r1, r2
   1e544:	b	1e2e4 <flatcc_json_parser_unmatched_symbol@@Base+0xc8>
   1e548:	mov	lr, r2
   1e54c:	add	r1, r1, #1
   1e550:	sub	r3, r2, r1
   1e554:	b	1e2cc <flatcc_json_parser_unmatched_symbol@@Base+0xb0>
   1e558:	mov	r1, r2
   1e55c:	cmp	ip, #46	; 0x2e
   1e560:	bne	1e2c4 <flatcc_json_parser_unmatched_symbol@@Base+0xa8>
   1e564:	ldr	r3, [r0, #24]
   1e568:	cmp	r3, #0
   1e56c:	beq	1e578 <flatcc_json_parser_unmatched_symbol@@Base+0x35c>
   1e570:	mov	lr, r2
   1e574:	b	1e540 <flatcc_json_parser_unmatched_symbol@@Base+0x324>
   1e578:	ldr	r3, [r0, #4]
   1e57c:	mov	ip, #5
   1e580:	sub	r3, r1, r3
   1e584:	add	r3, r3, #1
   1e588:	str	r1, [r0, #36]	; 0x24
   1e58c:	str	r3, [r0, #20]
   1e590:	str	ip, [r0, #24]
   1e594:	b	1e570 <flatcc_json_parser_unmatched_symbol@@Base+0x354>
   1e598:	ldr	r3, [r0, #4]
   1e59c:	mov	ip, #20
   1e5a0:	sub	r3, r1, r3
   1e5a4:	add	r3, r3, #1
   1e5a8:	str	r1, [r0, #36]	; 0x24
   1e5ac:	str	r3, [r0, #20]
   1e5b0:	str	ip, [r0, #24]
   1e5b4:	b	1e540 <flatcc_json_parser_unmatched_symbol@@Base+0x324>
   1e5b8:	mov	r1, r2
   1e5bc:	b	1e31c <flatcc_json_parser_unmatched_symbol@@Base+0x100>
   1e5c0:	cmp	ip, #32
   1e5c4:	bhi	1e4e0 <flatcc_json_parser_unmatched_symbol@@Base+0x2c4>
   1e5c8:	sub	ip, ip, #9
   1e5cc:	cmp	ip, #23
   1e5d0:	ldrls	pc, [pc, ip, lsl #2]
   1e5d4:	b	1e68c <flatcc_json_parser_unmatched_symbol@@Base+0x470>
   1e5d8:	andeq	lr, r1, r4, lsl #13
   1e5dc:	andeq	lr, r1, r8, asr r6
   1e5e0:	andeq	lr, r1, ip, lsl #13
   1e5e4:	andeq	lr, r1, ip, lsl #13
   1e5e8:	andeq	lr, r1, r8, lsr r6
   1e5ec:	andeq	lr, r1, ip, lsl #13
   1e5f0:	andeq	lr, r1, ip, lsl #13
   1e5f4:	andeq	lr, r1, ip, lsl #13
   1e5f8:	andeq	lr, r1, ip, lsl #13
   1e5fc:	andeq	lr, r1, ip, lsl #13
   1e600:	andeq	lr, r1, ip, lsl #13
   1e604:	andeq	lr, r1, ip, lsl #13
   1e608:	andeq	lr, r1, ip, lsl #13
   1e60c:	andeq	lr, r1, ip, lsl #13
   1e610:	andeq	lr, r1, ip, lsl #13
   1e614:	andeq	lr, r1, ip, lsl #13
   1e618:	andeq	lr, r1, ip, lsl #13
   1e61c:	andeq	lr, r1, ip, lsl #13
   1e620:	andeq	lr, r1, ip, lsl #13
   1e624:	andeq	lr, r1, ip, lsl #13
   1e628:	andeq	lr, r1, ip, lsl #13
   1e62c:	andeq	lr, r1, ip, lsl #13
   1e630:	andeq	lr, r1, ip, lsl #13
   1e634:	andeq	lr, r1, ip, lsr #9
   1e638:	sub	r3, lr, r4
   1e63c:	cmp	r3, #1
   1e640:	movle	r3, r1
   1e644:	ldrbgt	r3, [r4, #1]
   1e648:	subgt	r3, r3, #10
   1e64c:	clzgt	r3, r3
   1e650:	lsrgt	r3, r3, #5
   1e654:	add	r4, r4, r3
   1e658:	ldr	r3, [r0, #16]
   1e65c:	add	r4, r4, #1
   1e660:	add	r3, r3, #1
   1e664:	str	r4, [r0, #4]
   1e668:	str	r3, [r0, #16]
   1e66c:	cmp	r2, r4
   1e670:	beq	1e698 <flatcc_json_parser_unmatched_symbol@@Base+0x47c>
   1e674:	ldrb	ip, [r4]
   1e678:	cmp	ip, #32
   1e67c:	bls	1e5c8 <flatcc_json_parser_unmatched_symbol@@Base+0x3ac>
   1e680:	b	1e4e0 <flatcc_json_parser_unmatched_symbol@@Base+0x2c4>
   1e684:	add	r4, r4, #1
   1e688:	b	1e66c <flatcc_json_parser_unmatched_symbol@@Base+0x450>
   1e68c:	ldr	r3, [r0, #24]
   1e690:	cmp	r3, #0
   1e694:	beq	1e6bc <flatcc_json_parser_unmatched_symbol@@Base+0x4a0>
   1e698:	mov	r4, r2
   1e69c:	b	1e4e0 <flatcc_json_parser_unmatched_symbol@@Base+0x2c4>
   1e6a0:	mov	lr, r1
   1e6a4:	b	1e534 <flatcc_json_parser_unmatched_symbol@@Base+0x318>
   1e6a8:	ldrb	r3, [r1, #2]
   1e6ac:	cmp	r3, #32
   1e6b0:	addhi	r4, r1, #2
   1e6b4:	bls	1e4a8 <flatcc_json_parser_unmatched_symbol@@Base+0x28c>
   1e6b8:	b	1e4e0 <flatcc_json_parser_unmatched_symbol@@Base+0x2c4>
   1e6bc:	ldr	r3, [r0, #4]
   1e6c0:	mov	r1, #5
   1e6c4:	sub	r3, r4, r3
   1e6c8:	add	r3, r3, #1
   1e6cc:	str	r4, [r0, #36]	; 0x24
   1e6d0:	str	r3, [r0, #20]
   1e6d4:	str	r1, [r0, #24]
   1e6d8:	mov	r4, r2
   1e6dc:	b	1e4e0 <flatcc_json_parser_unmatched_symbol@@Base+0x2c4>

0001e6e0 <flatcc_json_parser_integer@@Base>:
   1e6e0:	cmp	r1, r2
   1e6e4:	beq	1e804 <flatcc_json_parser_integer@@Base+0x124>
   1e6e8:	push	{r4, r5, r6, r7, r8, r9, lr}
   1e6ec:	mov	r8, r0
   1e6f0:	ldrb	ip, [r1]
   1e6f4:	sub	ip, ip, #45	; 0x2d
   1e6f8:	clz	ip, ip
   1e6fc:	lsr	ip, ip, #5
   1e700:	add	r0, r1, ip
   1e704:	cmp	r2, r0
   1e708:	str	ip, [r3]
   1e70c:	beq	1e810 <flatcc_json_parser_integer@@Base+0x130>
   1e710:	ldrb	ip, [r1, ip]
   1e714:	sub	r3, ip, #48	; 0x30
   1e718:	cmp	r3, #9
   1e71c:	bhi	1e794 <flatcc_json_parser_integer@@Base+0xb4>
   1e720:	uxtb	r6, ip
   1e724:	mov	r7, #0
   1e728:	subs	r6, r6, #48	; 0x30
   1e72c:	add	r3, r0, #1
   1e730:	sbc	r7, r7, #0
   1e734:	mov	lr, #10
   1e738:	b	1e774 <flatcc_json_parser_integer@@Base+0x94>
   1e73c:	ldrb	ip, [r3]
   1e740:	add	r3, r3, #1
   1e744:	sub	r9, ip, #48	; 0x30
   1e748:	cmp	r9, #9
   1e74c:	bhi	1e79c <flatcc_json_parser_integer@@Base+0xbc>
   1e750:	subs	r4, r4, #48	; 0x30
   1e754:	sbc	r5, r5, #0
   1e758:	adds	r4, r4, ip
   1e75c:	adc	r5, r5, #0
   1e760:	cmp	r5, r7
   1e764:	cmpeq	r4, r6
   1e768:	mov	r7, r5
   1e76c:	mov	r6, r4
   1e770:	bcc	1e7c8 <flatcc_json_parser_integer@@Base+0xe8>
   1e774:	umull	r4, r5, r6, lr
   1e778:	cmp	r3, r2
   1e77c:	mla	r5, lr, r7, r5
   1e780:	mov	r0, r3
   1e784:	bne	1e73c <flatcc_json_parser_integer@@Base+0x5c>
   1e788:	ldr	r3, [sp, #28]
   1e78c:	strd	r6, [r3]
   1e790:	pop	{r4, r5, r6, r7, r8, r9, pc}
   1e794:	mov	r6, #0
   1e798:	mov	r7, #0
   1e79c:	cmp	r1, r0
   1e7a0:	beq	1e80c <flatcc_json_parser_integer@@Base+0x12c>
   1e7a4:	and	r3, ip, #223	; 0xdf
   1e7a8:	cmp	ip, #46	; 0x2e
   1e7ac:	cmpne	r3, #69	; 0x45
   1e7b0:	bne	1e788 <flatcc_json_parser_integer@@Base+0xa8>
   1e7b4:	ldr	r3, [r8, #24]
   1e7b8:	cmp	r3, #0
   1e7bc:	beq	1e7f8 <flatcc_json_parser_integer@@Base+0x118>
   1e7c0:	mov	r0, r2
   1e7c4:	pop	{r4, r5, r6, r7, r8, r9, pc}
   1e7c8:	ldr	r3, [r8, #24]
   1e7cc:	cmp	r3, #0
   1e7d0:	bne	1e7c0 <flatcc_json_parser_integer@@Base+0xe0>
   1e7d4:	ldr	r3, [r8, #4]
   1e7d8:	mov	r1, #8
   1e7dc:	sub	r3, r0, r3
   1e7e0:	add	r3, r3, #1
   1e7e4:	str	r0, [r8, #36]	; 0x24
   1e7e8:	str	r3, [r8, #20]
   1e7ec:	mov	r0, r2
   1e7f0:	str	r1, [r8, #24]
   1e7f4:	pop	{r4, r5, r6, r7, r8, r9, pc}
   1e7f8:	ldr	r3, [r8, #4]
   1e7fc:	mov	r1, #12
   1e800:	b	1e7dc <flatcc_json_parser_integer@@Base+0xfc>
   1e804:	mov	r0, r2
   1e808:	bx	lr
   1e80c:	pop	{r4, r5, r6, r7, r8, r9, pc}
   1e810:	mov	r6, #0
   1e814:	mov	r7, #0
   1e818:	b	1e788 <flatcc_json_parser_integer@@Base+0xa8>

0001e81c <flatcc_json_parser_build_uint8_vector_base64@@Base>:
   1e81c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1e820:	sub	sp, sp, #36	; 0x24
   1e824:	mov	r4, r2
   1e828:	ldr	r7, [sp, #72]	; 0x48
   1e82c:	mov	r6, r0
   1e830:	adds	r9, r7, #0
   1e834:	movne	r9, #1
   1e838:	cmp	r1, r2
   1e83c:	mov	r8, r3
   1e840:	beq	1e850 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x34>
   1e844:	ldrb	r3, [r1]
   1e848:	cmp	r3, #34	; 0x22
   1e84c:	beq	1e8b0 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x94>
   1e850:	ldr	r3, [r6, #24]
   1e854:	cmp	r3, #0
   1e858:	beq	1e9d4 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x1b8>
   1e85c:	mov	r5, r4
   1e860:	mov	r3, #0
   1e864:	str	r3, [r8]
   1e868:	ldr	r3, [r6, #24]
   1e86c:	cmp	r7, #0
   1e870:	moveq	r7, #31
   1e874:	movne	r7, #32
   1e878:	cmp	r3, #0
   1e87c:	beq	1e88c <flatcc_json_parser_build_uint8_vector_base64@@Base+0x70>
   1e880:	mov	r0, r4
   1e884:	add	sp, sp, #36	; 0x24
   1e888:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1e88c:	ldr	r3, [r6, #4]
   1e890:	mov	r0, r4
   1e894:	sub	r3, r5, r3
   1e898:	add	r3, r3, #1
   1e89c:	str	r7, [r6, #24]
   1e8a0:	str	r5, [r6, #36]	; 0x24
   1e8a4:	str	r3, [r6, #20]
   1e8a8:	add	sp, sp, #36	; 0x24
   1e8ac:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1e8b0:	add	fp, r1, #1
   1e8b4:	cmp	r2, fp
   1e8b8:	beq	1ec9c <flatcc_json_parser_build_uint8_vector_base64@@Base+0x480>
   1e8bc:	ldrb	r3, [r1, #1]
   1e8c0:	cmp	r3, #34	; 0x22
   1e8c4:	cmpne	r3, #31
   1e8c8:	movhi	r2, #1
   1e8cc:	movls	r2, #0
   1e8d0:	cmp	r3, #92	; 0x5c
   1e8d4:	moveq	r2, #0
   1e8d8:	andne	r2, r2, #1
   1e8dc:	cmp	r2, #0
   1e8e0:	beq	1ec14 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x3f8>
   1e8e4:	add	r1, r1, #2
   1e8e8:	cmp	r4, r1
   1e8ec:	mov	r5, r1
   1e8f0:	beq	1eca0 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x484>
   1e8f4:	ldrb	r3, [r1], #1
   1e8f8:	cmp	r3, #34	; 0x22
   1e8fc:	cmpne	r3, #31
   1e900:	movhi	r2, #1
   1e904:	movls	r2, #0
   1e908:	cmp	r3, #92	; 0x5c
   1e90c:	moveq	r2, #0
   1e910:	andne	r2, r2, #1
   1e914:	cmp	r2, #0
   1e918:	bne	1e8e8 <flatcc_json_parser_build_uint8_vector_base64@@Base+0xcc>
   1e91c:	cmp	r3, #31
   1e920:	bhi	1e950 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x134>
   1e924:	ldr	r3, [r6, #24]
   1e928:	cmp	r3, #0
   1e92c:	bne	1e85c <flatcc_json_parser_build_uint8_vector_base64@@Base+0x40>
   1e930:	ldr	r3, [r6, #4]
   1e934:	mov	r2, #17
   1e938:	sub	r3, r5, r3
   1e93c:	add	r3, r3, #1
   1e940:	str	r5, [r6, #36]	; 0x24
   1e944:	str	r3, [r6, #20]
   1e948:	str	r2, [r6, #24]
   1e94c:	b	1e85c <flatcc_json_parser_build_uint8_vector_base64@@Base+0x40>
   1e950:	cmp	r3, #34	; 0x22
   1e954:	bne	1e860 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x44>
   1e958:	sub	sl, r5, fp
   1e95c:	and	r2, sl, #3
   1e960:	lsr	r3, sl, #2
   1e964:	cmp	r2, #2
   1e968:	add	r3, r3, r3, lsl #1
   1e96c:	str	r3, [sp]
   1e970:	beq	1e9f4 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x1d8>
   1e974:	cmp	r2, #3
   1e978:	addeq	r3, r3, #2
   1e97c:	streq	r3, [sp]
   1e980:	mov	r2, #1
   1e984:	mov	r1, r2
   1e988:	mvn	r3, #0
   1e98c:	ldr	r0, [r6]
   1e990:	bl	160c8 <flatcc_builder_start_vector@@Base>
   1e994:	cmp	r0, #0
   1e998:	beq	1ea00 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x1e4>
   1e99c:	mov	r3, #0
   1e9a0:	str	r3, [r8]
   1e9a4:	ldr	r3, [r6, #24]
   1e9a8:	cmp	r3, #0
   1e9ac:	bne	1e880 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x64>
   1e9b0:	ldr	r3, [r6, #4]
   1e9b4:	mov	r2, #33	; 0x21
   1e9b8:	sub	r3, r5, r3
   1e9bc:	add	r3, r3, #1
   1e9c0:	str	r5, [r6, #36]	; 0x24
   1e9c4:	mov	r0, r4
   1e9c8:	str	r3, [r6, #20]
   1e9cc:	str	r2, [r6, #24]
   1e9d0:	b	1e884 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x68>
   1e9d4:	ldr	r3, [r6, #4]
   1e9d8:	mov	r2, #16
   1e9dc:	sub	r3, r1, r3
   1e9e0:	add	r3, r3, #1
   1e9e4:	str	r1, [r6, #36]	; 0x24
   1e9e8:	str	r3, [r6, #20]
   1e9ec:	str	r2, [r6, #24]
   1e9f0:	b	1e85c <flatcc_json_parser_build_uint8_vector_base64@@Base+0x40>
   1e9f4:	add	r3, r3, #1
   1e9f8:	str	r3, [sp]
   1e9fc:	b	1e980 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x164>
   1ea00:	ldr	r1, [sp]
   1ea04:	ldr	r0, [r6]
   1ea08:	bl	1555c <flatcc_builder_extend_vector@@Base>
   1ea0c:	subs	r2, r0, #0
   1ea10:	mov	lr, r2
   1ea14:	str	r2, [sp, #8]
   1ea18:	beq	1e99c <flatcc_json_parser_build_uint8_vector_base64@@Base+0x180>
   1ea1c:	ldr	r3, [pc, #660]	; 1ecb8 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x49c>
   1ea20:	cmp	r9, #0
   1ea24:	add	r2, r3, #256	; 0x100
   1ea28:	movne	r9, r3
   1ea2c:	ldr	r3, [sp]
   1ea30:	moveq	r9, r2
   1ea34:	cmp	r3, #0
   1ea38:	mvneq	r3, #0
   1ea3c:	str	r3, [sp, #12]
   1ea40:	mov	ip, fp
   1ea44:	mov	r3, sl
   1ea48:	str	sl, [sp, #4]
   1ea4c:	cmp	r3, #0
   1ea50:	beq	1eb0c <flatcc_json_parser_build_uint8_vector_base64@@Base+0x2f0>
   1ea54:	mov	r2, #0
   1ea58:	ldrb	r1, [ip, r2]
   1ea5c:	ldrb	r0, [r9, r1]
   1ea60:	add	r1, sp, #32
   1ea64:	add	r1, r1, r2
   1ea68:	cmp	r0, #63	; 0x3f
   1ea6c:	strb	r0, [r1, #-4]
   1ea70:	bls	1eac0 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x2a4>
   1ea74:	cmp	r0, #65	; 0x41
   1ea78:	beq	1eab4 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x298>
   1ea7c:	cmp	r0, #66	; 0x42
   1ea80:	movne	r1, r2
   1ea84:	beq	1eb70 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x354>
   1ea88:	sub	r3, r3, r1
   1ea8c:	cmp	r2, #2
   1ea90:	beq	1eadc <flatcc_json_parser_build_uint8_vector_base64@@Base+0x2c0>
   1ea94:	cmp	r2, #3
   1ea98:	beq	1ebc4 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x3a8>
   1ea9c:	cmp	r2, #0
   1eaa0:	beq	1eafc <flatcc_json_parser_build_uint8_vector_base64@@Base+0x2e0>
   1eaa4:	ldr	r3, [sp, #4]
   1eaa8:	sub	lr, sl, r3
   1eaac:	add	r5, fp, lr
   1eab0:	b	1e860 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x44>
   1eab4:	add	ip, ip, #1
   1eab8:	sub	r3, r3, #1
   1eabc:	sub	r2, r2, #1
   1eac0:	add	r2, r2, #1
   1eac4:	cmp	r2, #3
   1eac8:	bhi	1ec1c <flatcc_json_parser_build_uint8_vector_base64@@Base+0x400>
   1eacc:	cmp	r2, r3
   1ead0:	bne	1ea58 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x23c>
   1ead4:	mov	r3, #0
   1ead8:	b	1ea8c <flatcc_json_parser_build_uint8_vector_base64@@Base+0x270>
   1eadc:	ldrb	r2, [sp, #29]
   1eae0:	lsl	r1, r2, #4
   1eae4:	tst	r1, #240	; 0xf0
   1eae8:	bne	1eaa4 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x288>
   1eaec:	ldrb	r1, [sp, #28]
   1eaf0:	lsr	r2, r2, #4
   1eaf4:	orr	r2, r2, r1, lsl #2
   1eaf8:	strb	r2, [lr], #1
   1eafc:	sub	r3, sl, r3
   1eb00:	cmp	sl, r3
   1eb04:	addne	r5, fp, r3
   1eb08:	bne	1e860 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x44>
   1eb0c:	ldr	r3, [sp, #8]
   1eb10:	sub	r1, lr, r3
   1eb14:	ldr	r3, [sp]
   1eb18:	cmp	r3, r1
   1eb1c:	bls	1eb34 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x318>
   1eb20:	sub	r1, r3, r1
   1eb24:	ldr	r0, [r6]
   1eb28:	bl	15f14 <flatcc_builder_truncate_vector@@Base>
   1eb2c:	cmp	r0, #0
   1eb30:	bne	1e99c <flatcc_json_parser_build_uint8_vector_base64@@Base+0x180>
   1eb34:	ldr	r0, [r6]
   1eb38:	bl	175a8 <flatcc_builder_end_vector@@Base>
   1eb3c:	cmp	r0, #0
   1eb40:	str	r0, [r8]
   1eb44:	beq	1e99c <flatcc_json_parser_build_uint8_vector_base64@@Base+0x180>
   1eb48:	ldrb	r3, [r5]
   1eb4c:	cmp	r3, #34	; 0x22
   1eb50:	addeq	r0, r5, #1
   1eb54:	beq	1e884 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x68>
   1eb58:	ldr	r3, [r6, #24]
   1eb5c:	cmp	r3, #0
   1eb60:	bne	1e880 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x64>
   1eb64:	ldr	r3, [r6, #4]
   1eb68:	mov	r2, #20
   1eb6c:	b	1e9b8 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x19c>
   1eb70:	add	r1, r2, #1
   1eb74:	cmp	r1, #7
   1eb78:	cmpls	r1, r3
   1eb7c:	bcs	1ea88 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x26c>
   1eb80:	ldrb	r0, [ip, r1]
   1eb84:	add	ip, ip, r1
   1eb88:	ldrb	r0, [r9, r0]
   1eb8c:	sub	r0, r0, #65	; 0x41
   1eb90:	cmp	r0, #1
   1eb94:	bls	1ebb0 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x394>
   1eb98:	b	1ea88 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x26c>
   1eb9c:	ldrb	r0, [ip, #1]!
   1eba0:	ldrb	r0, [r9, r0]
   1eba4:	sub	r0, r0, #65	; 0x41
   1eba8:	cmp	r0, #1
   1ebac:	bhi	1ea88 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x26c>
   1ebb0:	add	r1, r1, #1
   1ebb4:	cmp	r1, #7
   1ebb8:	cmpls	r1, r3
   1ebbc:	bcc	1eb9c <flatcc_json_parser_build_uint8_vector_base64@@Base+0x380>
   1ebc0:	b	1ea88 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x26c>
   1ebc4:	ldrb	r2, [sp, #30]
   1ebc8:	ldr	r0, [sp, #12]
   1ebcc:	lsl	r1, r2, #6
   1ebd0:	tst	r1, #192	; 0xc0
   1ebd4:	movne	r1, #1
   1ebd8:	moveq	r1, #0
   1ebdc:	cmp	r0, #1
   1ebe0:	orreq	r1, r1, #1
   1ebe4:	cmp	r1, #0
   1ebe8:	bne	1eaa4 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x288>
   1ebec:	ldrb	r1, [sp, #29]
   1ebf0:	ldrb	r0, [sp, #28]
   1ebf4:	lsr	r2, r2, #2
   1ebf8:	add	lr, lr, #2
   1ebfc:	orr	r2, r2, r1, lsl #4
   1ec00:	lsr	r1, r1, #4
   1ec04:	orr	r0, r1, r0, lsl #2
   1ec08:	strb	r2, [lr, #-1]
   1ec0c:	strb	r0, [lr, #-2]
   1ec10:	b	1eafc <flatcc_json_parser_build_uint8_vector_base64@@Base+0x2e0>
   1ec14:	mov	r5, fp
   1ec18:	b	1e91c <flatcc_json_parser_build_uint8_vector_base64@@Base+0x100>
   1ec1c:	ldr	r2, [sp, #12]
   1ec20:	cmp	r2, #2
   1ec24:	bls	1eaa4 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x288>
   1ec28:	ldrb	r1, [sp, #29]
   1ec2c:	subs	r2, r2, #3
   1ec30:	str	r2, [sp, #12]
   1ec34:	mov	r0, r1
   1ec38:	ldrb	r1, [sp, #30]
   1ec3c:	str	r0, [sp, #4]
   1ec40:	lsr	r0, r0, #4
   1ec44:	str	r1, [sp, #16]
   1ec48:	ldrb	r1, [sp, #28]
   1ec4c:	add	ip, ip, #4
   1ec50:	sub	r3, r3, #4
   1ec54:	str	r1, [sp, #20]
   1ec58:	ldr	r2, [sp, #20]
   1ec5c:	ldrb	r1, [sp, #31]
   1ec60:	add	lr, lr, #3
   1ec64:	orr	r0, r0, r2, lsl #2
   1ec68:	ldr	r2, [sp, #16]
   1ec6c:	strb	r0, [lr, #-3]
   1ec70:	orr	r1, r1, r2, lsl #6
   1ec74:	str	r1, [sp, #16]
   1ec78:	ldr	r1, [sp, #4]
   1ec7c:	lsr	r2, r2, #2
   1ec80:	orr	r2, r2, r1, lsl #4
   1ec84:	strb	r2, [lr, #-2]
   1ec88:	ldrb	r2, [sp, #16]
   1ec8c:	strb	r2, [lr, #-1]
   1ec90:	beq	1eafc <flatcc_json_parser_build_uint8_vector_base64@@Base+0x2e0>
   1ec94:	str	r3, [sp, #4]
   1ec98:	b	1ea4c <flatcc_json_parser_build_uint8_vector_base64@@Base+0x230>
   1ec9c:	mov	r5, r2
   1eca0:	ldr	r3, [r6, #24]
   1eca4:	cmp	r3, #0
   1eca8:	bne	1e85c <flatcc_json_parser_build_uint8_vector_base64@@Base+0x40>
   1ecac:	ldr	r3, [r6, #4]
   1ecb0:	mov	r2, #20
   1ecb4:	b	1e938 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x11c>
   1ecb8:	andeq	r1, r2, r0, ror #29

0001ecbc <flatcc_json_parser_build_string@@Base>:
   1ecbc:	cmp	r1, r2
   1ecc0:	push	{r4, r5, r6, r7, r8, lr}
   1ecc4:	mov	r5, r2
   1ecc8:	sub	sp, sp, #8
   1eccc:	mov	r6, r0
   1ecd0:	mov	r7, r3
   1ecd4:	beq	1ece4 <flatcc_json_parser_build_string@@Base+0x28>
   1ecd8:	ldrb	r3, [r1]
   1ecdc:	cmp	r3, #34	; 0x22
   1ece0:	beq	1ee88 <flatcc_json_parser_build_string@@Base+0x1cc>
   1ece4:	ldr	r3, [r6, #24]
   1ece8:	cmp	r3, #0
   1ecec:	beq	1ef40 <flatcc_json_parser_build_string@@Base+0x284>
   1ecf0:	mov	r4, r5
   1ecf4:	mov	r8, r5
   1ecf8:	ldr	r0, [r6]
   1ecfc:	bl	1661c <flatcc_builder_start_string@@Base>
   1ed00:	cmp	r0, #0
   1ed04:	beq	1ed1c <flatcc_json_parser_build_string@@Base+0x60>
   1ed08:	mov	r3, #0
   1ed0c:	str	r3, [r7]
   1ed10:	mov	r0, r4
   1ed14:	add	sp, sp, #8
   1ed18:	pop	{r4, r5, r6, r7, r8, pc}
   1ed1c:	sub	r2, r4, r8
   1ed20:	mov	r1, r8
   1ed24:	ldr	r0, [r6]
   1ed28:	bl	15c40 <flatcc_builder_append_string@@Base>
   1ed2c:	cmp	r0, #0
   1ed30:	beq	1ed08 <flatcc_json_parser_build_string@@Base+0x4c>
   1ed34:	cmp	r5, r4
   1ed38:	beq	1efb0 <flatcc_json_parser_build_string@@Base+0x2f4>
   1ed3c:	ldrb	r3, [r4]
   1ed40:	cmp	r3, #34	; 0x22
   1ed44:	beq	1ef90 <flatcc_json_parser_build_string@@Base+0x2d4>
   1ed48:	mov	r1, r4
   1ed4c:	add	r3, sp, #4
   1ed50:	mov	r2, r5
   1ed54:	mov	r0, r6
   1ed58:	bl	1bb8c <flatcc_json_parser_string_escape@@Base>
   1ed5c:	ldrb	r2, [sp, #4]
   1ed60:	add	r1, sp, #5
   1ed64:	mov	r8, r0
   1ed68:	ldr	r0, [r6]
   1ed6c:	bl	15c40 <flatcc_builder_append_string@@Base>
   1ed70:	cmp	r0, #0
   1ed74:	beq	1efa8 <flatcc_json_parser_build_string@@Base+0x2ec>
   1ed78:	cmp	r5, r8
   1ed7c:	beq	1efa0 <flatcc_json_parser_build_string@@Base+0x2e4>
   1ed80:	ldrb	r3, [r8]
   1ed84:	cmp	r3, #34	; 0x22
   1ed88:	cmpne	r3, #31
   1ed8c:	movhi	r2, #1
   1ed90:	movls	r2, #0
   1ed94:	cmp	r3, #92	; 0x5c
   1ed98:	moveq	r2, #0
   1ed9c:	andne	r2, r2, #1
   1eda0:	cmp	r2, #0
   1eda4:	beq	1ee34 <flatcc_json_parser_build_string@@Base+0x178>
   1eda8:	add	r2, r8, #1
   1edac:	b	1edd8 <flatcc_json_parser_build_string@@Base+0x11c>
   1edb0:	ldrb	r3, [r2], #1
   1edb4:	cmp	r3, #34	; 0x22
   1edb8:	cmpne	r3, #31
   1edbc:	movhi	r1, #1
   1edc0:	movls	r1, #0
   1edc4:	cmp	r3, #92	; 0x5c
   1edc8:	moveq	r1, #0
   1edcc:	andne	r1, r1, #1
   1edd0:	cmp	r1, #0
   1edd4:	beq	1ee38 <flatcc_json_parser_build_string@@Base+0x17c>
   1edd8:	cmp	r5, r2
   1eddc:	mov	r4, r2
   1ede0:	bne	1edb0 <flatcc_json_parser_build_string@@Base+0xf4>
   1ede4:	ldr	r3, [r6, #24]
   1ede8:	cmp	r3, #0
   1edec:	beq	1ef84 <flatcc_json_parser_build_string@@Base+0x2c8>
   1edf0:	ldr	r0, [r6]
   1edf4:	bl	18804 <flatcc_builder_end_string@@Base>
   1edf8:	mov	r4, r5
   1edfc:	str	r0, [r7]
   1ee00:	ldr	r3, [r6, #24]
   1ee04:	cmp	r3, #0
   1ee08:	movne	r4, r5
   1ee0c:	bne	1ed10 <flatcc_json_parser_build_string@@Base+0x54>
   1ee10:	ldr	r3, [r6, #4]
   1ee14:	mov	r2, #20
   1ee18:	sub	r3, r4, r3
   1ee1c:	add	r3, r3, #1
   1ee20:	str	r4, [r6, #36]	; 0x24
   1ee24:	str	r3, [r6, #20]
   1ee28:	mov	r4, r5
   1ee2c:	str	r2, [r6, #24]
   1ee30:	b	1ed10 <flatcc_json_parser_build_string@@Base+0x54>
   1ee34:	mov	r4, r8
   1ee38:	cmp	r3, #31
   1ee3c:	bhi	1ee6c <flatcc_json_parser_build_string@@Base+0x1b0>
   1ee40:	ldr	r3, [r6, #24]
   1ee44:	cmp	r3, #0
   1ee48:	bne	1edf0 <flatcc_json_parser_build_string@@Base+0x134>
   1ee4c:	ldr	r3, [r6, #4]
   1ee50:	mov	r2, #17
   1ee54:	sub	r3, r4, r3
   1ee58:	add	r3, r3, #1
   1ee5c:	str	r4, [r6, #36]	; 0x24
   1ee60:	str	r3, [r6, #20]
   1ee64:	str	r2, [r6, #24]
   1ee68:	b	1edf0 <flatcc_json_parser_build_string@@Base+0x134>
   1ee6c:	sub	r2, r4, r8
   1ee70:	mov	r1, r8
   1ee74:	ldr	r0, [r6]
   1ee78:	bl	15c40 <flatcc_builder_append_string@@Base>
   1ee7c:	cmp	r0, #0
   1ee80:	bne	1ed3c <flatcc_json_parser_build_string@@Base+0x80>
   1ee84:	b	1ed08 <flatcc_json_parser_build_string@@Base+0x4c>
   1ee88:	add	r8, r1, #1
   1ee8c:	cmp	r2, r8
   1ee90:	beq	1efc8 <flatcc_json_parser_build_string@@Base+0x30c>
   1ee94:	ldrb	r2, [r1, #1]
   1ee98:	cmp	r2, #34	; 0x22
   1ee9c:	cmpne	r2, #31
   1eea0:	movhi	r3, #1
   1eea4:	movls	r3, #0
   1eea8:	cmp	r2, #92	; 0x5c
   1eeac:	moveq	r3, #0
   1eeb0:	andne	r3, r3, #1
   1eeb4:	cmp	r3, #0
   1eeb8:	beq	1efc0 <flatcc_json_parser_build_string@@Base+0x304>
   1eebc:	add	r3, r1, #2
   1eec0:	cmp	r5, r3
   1eec4:	mov	r4, r3
   1eec8:	beq	1efcc <flatcc_json_parser_build_string@@Base+0x310>
   1eecc:	ldrb	r2, [r3], #1
   1eed0:	cmp	r2, #34	; 0x22
   1eed4:	cmpne	r2, #31
   1eed8:	movhi	r0, #1
   1eedc:	movls	r0, #0
   1eee0:	cmp	r2, #92	; 0x5c
   1eee4:	moveq	r0, #0
   1eee8:	andne	r0, r0, #1
   1eeec:	cmp	r0, #0
   1eef0:	bne	1eec0 <flatcc_json_parser_build_string@@Base+0x204>
   1eef4:	cmp	r2, #31
   1eef8:	bhi	1ef10 <flatcc_json_parser_build_string@@Base+0x254>
   1eefc:	ldr	r3, [r6, #24]
   1ef00:	cmp	r3, #0
   1ef04:	beq	1ef60 <flatcc_json_parser_build_string@@Base+0x2a4>
   1ef08:	mov	r4, r5
   1ef0c:	b	1ecf8 <flatcc_json_parser_build_string@@Base+0x3c>
   1ef10:	cmp	r2, #34	; 0x22
   1ef14:	bne	1ecf8 <flatcc_json_parser_build_string@@Base+0x3c>
   1ef18:	sub	r2, r4, r8
   1ef1c:	mov	r1, r8
   1ef20:	ldr	r0, [r6]
   1ef24:	bl	18534 <flatcc_builder_create_string@@Base>
   1ef28:	str	r0, [r7]
   1ef2c:	ldrb	r3, [r4]
   1ef30:	cmp	r3, #34	; 0x22
   1ef34:	addeq	r4, r4, #1
   1ef38:	bne	1ee00 <flatcc_json_parser_build_string@@Base+0x144>
   1ef3c:	b	1ed10 <flatcc_json_parser_build_string@@Base+0x54>
   1ef40:	ldr	r3, [r6, #4]
   1ef44:	mov	r2, #16
   1ef48:	sub	r3, r1, r3
   1ef4c:	add	r3, r3, #1
   1ef50:	str	r1, [r6, #36]	; 0x24
   1ef54:	str	r3, [r6, #20]
   1ef58:	str	r2, [r6, #24]
   1ef5c:	b	1ecf0 <flatcc_json_parser_build_string@@Base+0x34>
   1ef60:	ldr	r3, [r6, #4]
   1ef64:	mov	r2, #17
   1ef68:	sub	r3, r4, r3
   1ef6c:	add	r3, r3, #1
   1ef70:	str	r4, [r6, #36]	; 0x24
   1ef74:	str	r3, [r6, #20]
   1ef78:	str	r2, [r6, #24]
   1ef7c:	mov	r4, r5
   1ef80:	b	1ecf8 <flatcc_json_parser_build_string@@Base+0x3c>
   1ef84:	ldr	r3, [r6, #4]
   1ef88:	mov	r2, #20
   1ef8c:	b	1ee54 <flatcc_json_parser_build_string@@Base+0x198>
   1ef90:	ldr	r0, [r6]
   1ef94:	bl	18804 <flatcc_builder_end_string@@Base>
   1ef98:	str	r0, [r7]
   1ef9c:	b	1ef2c <flatcc_json_parser_build_string@@Base+0x270>
   1efa0:	mov	r4, r5
   1efa4:	b	1ede4 <flatcc_json_parser_build_string@@Base+0x128>
   1efa8:	mov	r4, r8
   1efac:	b	1ed08 <flatcc_json_parser_build_string@@Base+0x4c>
   1efb0:	ldr	r0, [r6]
   1efb4:	bl	18804 <flatcc_builder_end_string@@Base>
   1efb8:	str	r0, [r7]
   1efbc:	b	1ee00 <flatcc_json_parser_build_string@@Base+0x144>
   1efc0:	mov	r4, r8
   1efc4:	b	1eef4 <flatcc_json_parser_build_string@@Base+0x238>
   1efc8:	mov	r4, r2
   1efcc:	ldr	r3, [r6, #24]
   1efd0:	cmp	r3, #0
   1efd4:	bne	1ef08 <flatcc_json_parser_build_string@@Base+0x24c>
   1efd8:	ldr	r3, [r6, #4]
   1efdc:	mov	r2, #20
   1efe0:	b	1ef68 <flatcc_json_parser_build_string@@Base+0x2ac>

0001efe4 <flatcc_json_parser_prepare_unions@@Base>:
   1efe4:	push	{r4, r5, r6, r7, r8, lr}
   1efe8:	mov	r4, r0
   1efec:	add	r0, r3, r3, lsl #1
   1eff0:	mov	r8, r1
   1eff4:	lsl	r1, r0, #3
   1eff8:	add	r1, r1, #8
   1effc:	ldr	r0, [r4]
   1f000:	ldr	r7, [sp, #24]
   1f004:	mov	r5, r3
   1f008:	mov	r6, r2
   1f00c:	bl	14514 <flatcc_builder_enter_user_frame@@Base>
   1f010:	cmp	r0, #0
   1f014:	str	r0, [r7]
   1f018:	bne	1f030 <flatcc_json_parser_prepare_unions@@Base+0x4c>
   1f01c:	ldr	r3, [r4, #24]
   1f020:	cmp	r3, #0
   1f024:	beq	1f04c <flatcc_json_parser_prepare_unions@@Base+0x68>
   1f028:	mov	r0, r6
   1f02c:	pop	{r4, r5, r6, r7, r8, pc}
   1f030:	mov	r1, r0
   1f034:	ldr	r0, [r4]
   1f038:	bl	14644 <flatcc_builder_get_user_frame_ptr@@Base>
   1f03c:	mov	r6, r8
   1f040:	str	r5, [r0]
   1f044:	mov	r0, r6
   1f048:	pop	{r4, r5, r6, r7, r8, pc}
   1f04c:	ldr	r3, [r4, #4]
   1f050:	mov	r2, #33	; 0x21
   1f054:	sub	r3, r8, r3
   1f058:	add	r3, r3, #1
   1f05c:	str	r8, [r4, #36]	; 0x24
   1f060:	str	r3, [r4, #20]
   1f064:	str	r2, [r4, #24]
   1f068:	mov	r0, r6
   1f06c:	pop	{r4, r5, r6, r7, r8, pc}

0001f070 <flatcc_json_parser_finalize_unions@@Base>:
   1f070:	push	{r4, r5, r6, r7, r8, lr}
   1f074:	mov	r5, r1
   1f078:	mov	r4, r0
   1f07c:	mov	r1, r3
   1f080:	ldr	r0, [r0]
   1f084:	mov	r6, r3
   1f088:	mov	r7, r2
   1f08c:	bl	14644 <flatcc_builder_get_user_frame_ptr@@Base>
   1f090:	ldr	r3, [r0, #4]
   1f094:	cmp	r3, #0
   1f098:	moveq	r7, r5
   1f09c:	beq	1f0ac <flatcc_json_parser_finalize_unions@@Base+0x3c>
   1f0a0:	ldr	r3, [r4, #24]
   1f0a4:	cmp	r3, #0
   1f0a8:	beq	1f0c0 <flatcc_json_parser_finalize_unions@@Base+0x50>
   1f0ac:	mov	r1, r6
   1f0b0:	ldr	r0, [r4]
   1f0b4:	bl	145d8 <flatcc_builder_exit_user_frame_at@@Base>
   1f0b8:	mov	r0, r7
   1f0bc:	pop	{r4, r5, r6, r7, r8, pc}
   1f0c0:	ldr	r3, [r4, #4]
   1f0c4:	mov	r2, #27
   1f0c8:	sub	r3, r5, r3
   1f0cc:	add	r3, r3, #1
   1f0d0:	str	r5, [r4, #36]	; 0x24
   1f0d4:	str	r3, [r4, #20]
   1f0d8:	str	r2, [r4, #24]
   1f0dc:	b	1f0ac <flatcc_json_parser_finalize_unions@@Base+0x3c>

0001f0e0 <flatcc_json_parser_union@@Base>:
   1f0e0:	push	{r4, r5, r6, r7, r8, lr}
   1f0e4:	sub	sp, sp, #16
   1f0e8:	mov	r5, r0
   1f0ec:	mov	r8, r1
   1f0f0:	ldr	r0, [r0]
   1f0f4:	ldr	r1, [sp, #44]	; 0x2c
   1f0f8:	mov	r4, r3
   1f0fc:	mov	r6, r2
   1f100:	ldrh	r7, [sp, #40]	; 0x28
   1f104:	bl	14644 <flatcc_builder_get_user_frame_ptr@@Base>
   1f108:	add	r4, r4, r4, lsl #1
   1f10c:	add	r4, r0, r4, lsl #3
   1f110:	ldr	r3, [r4, #8]
   1f114:	cmp	r3, #0
   1f118:	beq	1f164 <flatcc_json_parser_union@@Base+0x84>
   1f11c:	ldr	r3, [r5, #24]
   1f120:	cmp	r3, #0
   1f124:	beq	1f138 <flatcc_json_parser_union@@Base+0x58>
   1f128:	mov	r4, r6
   1f12c:	mov	r0, r4
   1f130:	add	sp, sp, #16
   1f134:	pop	{r4, r5, r6, r7, r8, pc}
   1f138:	ldr	r3, [r5, #4]
   1f13c:	mov	r2, #28
   1f140:	sub	r3, r8, r3
   1f144:	add	r3, r3, #1
   1f148:	mov	r4, r6
   1f14c:	mov	r0, r4
   1f150:	str	r8, [r5, #36]	; 0x24
   1f154:	str	r3, [r5, #20]
   1f158:	str	r2, [r5, #24]
   1f15c:	add	sp, sp, #16
   1f160:	pop	{r4, r5, r6, r7, r8, pc}
   1f164:	ldrb	r3, [r4, #20]
   1f168:	cmp	r3, #0
   1f16c:	beq	1f218 <flatcc_json_parser_union@@Base+0x138>
   1f170:	ldrb	r3, [r4, #21]
   1f174:	cmp	r3, #0
   1f178:	strb	r3, [sp, #8]
   1f17c:	bne	1f198 <flatcc_json_parser_union@@Base+0xb8>
   1f180:	ldr	r3, [r5, #24]
   1f184:	cmp	r3, #0
   1f188:	bne	1f128 <flatcc_json_parser_union@@Base+0x48>
   1f18c:	ldr	r3, [r5, #4]
   1f190:	mov	r2, #25
   1f194:	b	1f140 <flatcc_json_parser_union@@Base+0x60>
   1f198:	ldr	r2, [r0, #4]
   1f19c:	add	ip, sp, #12
   1f1a0:	sub	r2, r2, #1
   1f1a4:	str	r2, [r0, #4]
   1f1a8:	mov	r1, r8
   1f1ac:	str	ip, [sp]
   1f1b0:	mov	r2, r6
   1f1b4:	mov	r0, r5
   1f1b8:	ldr	ip, [sp, #48]	; 0x30
   1f1bc:	blx	ip
   1f1c0:	add	r3, sp, #8
   1f1c4:	cmp	r6, r0
   1f1c8:	mov	r4, r0
   1f1cc:	beq	1f12c <flatcc_json_parser_union@@Base+0x4c>
   1f1d0:	mov	r1, r7
   1f1d4:	ldm	r3, {r2, r3}
   1f1d8:	ldr	r0, [r5]
   1f1dc:	bl	18f00 <flatcc_builder_table_add_union@@Base>
   1f1e0:	cmp	r0, #0
   1f1e4:	beq	1f12c <flatcc_json_parser_union@@Base+0x4c>
   1f1e8:	ldr	r3, [r5, #24]
   1f1ec:	cmp	r3, #0
   1f1f0:	bne	1f128 <flatcc_json_parser_union@@Base+0x48>
   1f1f4:	ldr	r3, [r5, #4]
   1f1f8:	mov	r2, #28
   1f1fc:	sub	r3, r4, r3
   1f200:	add	r3, r3, #1
   1f204:	str	r4, [r5, #36]	; 0x24
   1f208:	str	r3, [r5, #20]
   1f20c:	mov	r4, r6
   1f210:	str	r2, [r5, #24]
   1f214:	b	1f12c <flatcc_json_parser_union@@Base+0x4c>
   1f218:	ldr	r3, [r0, #4]
   1f21c:	ldr	lr, [r5, #16]
   1f220:	ldr	ip, [r5, #4]
   1f224:	add	r3, r3, #1
   1f228:	str	r3, [r0, #4]
   1f22c:	mov	r2, r6
   1f230:	str	lr, [r4, #16]
   1f234:	str	ip, [r4, #12]
   1f238:	str	r8, [r4, #8]
   1f23c:	mov	r1, r8
   1f240:	mov	r0, r5
   1f244:	bl	1c888 <flatcc_json_parser_generic_json@@Base>
   1f248:	mov	r4, r0
   1f24c:	b	1f12c <flatcc_json_parser_union@@Base+0x4c>

0001f250 <flatcc_json_parser_union_type@@Base>:
   1f250:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1f254:	sub	sp, sp, #36	; 0x24
   1f258:	mov	sl, r3
   1f25c:	ldrh	r3, [sp, #72]	; 0x48
   1f260:	mov	r4, r0
   1f264:	mov	r9, r1
   1f268:	ldr	r0, [r0]
   1f26c:	ldr	r1, [sp, #76]	; 0x4c
   1f270:	mov	r5, r2
   1f274:	str	r3, [sp, #16]
   1f278:	bl	14644 <flatcc_builder_get_user_frame_ptr@@Base>
   1f27c:	add	sl, sl, sl, lsl #1
   1f280:	lsl	r2, sl, #3
   1f284:	str	r2, [sp, #12]
   1f288:	add	r3, r0, #8
   1f28c:	add	r6, r3, r2
   1f290:	str	r3, [sp, #8]
   1f294:	ldrb	r3, [r6, #12]
   1f298:	cmp	r3, #0
   1f29c:	beq	1f2bc <flatcc_json_parser_union_type@@Base+0x6c>
   1f2a0:	ldr	r3, [r4, #24]
   1f2a4:	cmp	r3, #0
   1f2a8:	beq	1f474 <flatcc_json_parser_union_type@@Base+0x224>
   1f2ac:	mov	r7, r5
   1f2b0:	mov	r0, r7
   1f2b4:	add	sp, sp, #36	; 0x24
   1f2b8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1f2bc:	mov	r2, #1
   1f2c0:	cmp	r9, r5
   1f2c4:	mov	r8, r0
   1f2c8:	strb	r3, [r6, #13]
   1f2cc:	strb	r2, [r6, #12]
   1f2d0:	beq	1f4a0 <flatcc_json_parser_union_type@@Base+0x250>
   1f2d4:	ldrb	r3, [r9]
   1f2d8:	str	r3, [sp, #20]
   1f2dc:	sub	r3, r3, #45	; 0x2d
   1f2e0:	clz	r3, r3
   1f2e4:	lsr	r3, r3, #5
   1f2e8:	add	r7, r9, r3
   1f2ec:	cmp	r5, r7
   1f2f0:	beq	1f544 <flatcc_json_parser_union_type@@Base+0x2f4>
   1f2f4:	ldrb	ip, [r9, r3]
   1f2f8:	sub	r3, ip, #48	; 0x30
   1f2fc:	cmp	r3, #9
   1f300:	bhi	1f4c8 <flatcc_json_parser_union_type@@Base+0x278>
   1f304:	uxtb	sl, ip
   1f308:	mov	fp, #0
   1f30c:	subs	sl, sl, #48	; 0x30
   1f310:	add	r1, r7, r2
   1f314:	sbc	fp, fp, #0
   1f318:	mov	lr, #10
   1f31c:	b	1f364 <flatcc_json_parser_union_type@@Base+0x114>
   1f320:	mov	r0, r1
   1f324:	ldrb	ip, [r0], #1
   1f328:	sub	r3, ip, #48	; 0x30
   1f32c:	cmp	r3, #9
   1f330:	bhi	1f4d0 <flatcc_json_parser_union_type@@Base+0x280>
   1f334:	umull	r2, r3, sl, lr
   1f338:	mla	r3, lr, fp, r3
   1f33c:	subs	r2, r2, #48	; 0x30
   1f340:	sbc	r3, r3, #0
   1f344:	adds	r2, r2, ip
   1f348:	adc	r3, r3, #0
   1f34c:	cmp	r3, fp
   1f350:	cmpeq	r2, sl
   1f354:	bcc	1f550 <flatcc_json_parser_union_type@@Base+0x300>
   1f358:	mov	r1, r0
   1f35c:	mov	sl, r2
   1f360:	mov	fp, r3
   1f364:	cmp	r1, r5
   1f368:	mov	r7, r1
   1f36c:	bne	1f320 <flatcc_json_parser_union_type@@Base+0xd0>
   1f370:	ldr	r3, [sp, #20]
   1f374:	cmp	r3, #45	; 0x2d
   1f378:	beq	1f508 <flatcc_json_parser_union_type@@Base+0x2b8>
   1f37c:	cmp	fp, #0
   1f380:	cmpeq	sl, #255	; 0xff
   1f384:	bls	1f570 <flatcc_json_parser_union_type@@Base+0x320>
   1f388:	ldr	r3, [r4, #24]
   1f38c:	cmp	r3, #0
   1f390:	bne	1f500 <flatcc_json_parser_union_type@@Base+0x2b0>
   1f394:	ldr	r3, [r4, #4]
   1f398:	str	r7, [r4, #36]	; 0x24
   1f39c:	sub	r3, r7, r3
   1f3a0:	mov	r7, r5
   1f3a4:	add	r3, r3, #1
   1f3a8:	mov	r2, #7
   1f3ac:	str	r3, [r4, #20]
   1f3b0:	str	r2, [r4, #24]
   1f3b4:	ldr	r3, [sp, #8]
   1f3b8:	ldr	r2, [sp, #12]
   1f3bc:	ldr	r1, [r3, r2]
   1f3c0:	cmp	r1, #0
   1f3c4:	beq	1f580 <flatcc_json_parser_union_type@@Base+0x330>
   1f3c8:	ldr	r3, [r8, #4]
   1f3cc:	cmp	r3, #0
   1f3d0:	beq	1f5d8 <flatcc_json_parser_union_type@@Base+0x388>
   1f3d4:	ldr	r0, [r6, #8]
   1f3d8:	ldr	r2, [r6, #4]
   1f3dc:	sub	r3, r3, #1
   1f3e0:	str	r3, [r8, #4]
   1f3e4:	ldr	r9, [r4, #16]
   1f3e8:	ldr	r8, [r4, #4]
   1f3ec:	str	r0, [r4, #16]
   1f3f0:	str	r2, [r4, #4]
   1f3f4:	ldrb	ip, [r6, #13]
   1f3f8:	add	r6, sp, #32
   1f3fc:	add	r2, sp, #28
   1f400:	str	r2, [sp]
   1f404:	mov	r3, ip
   1f408:	strb	ip, [r6, #-8]!
   1f40c:	mov	r2, r5
   1f410:	mov	r0, r4
   1f414:	ldr	ip, [sp, #84]	; 0x54
   1f418:	blx	ip
   1f41c:	cmp	r5, r0
   1f420:	beq	1f2ac <flatcc_json_parser_union_type@@Base+0x5c>
   1f424:	ldr	r1, [sp, #16]
   1f428:	ldm	r6, {r2, r3}
   1f42c:	ldr	r0, [r4]
   1f430:	bl	18f00 <flatcc_builder_table_add_union@@Base>
   1f434:	cmp	r0, #0
   1f438:	streq	r9, [r4, #16]
   1f43c:	streq	r8, [r4, #4]
   1f440:	beq	1f2b0 <flatcc_json_parser_union_type@@Base+0x60>
   1f444:	ldr	r3, [r4, #24]
   1f448:	cmp	r3, #0
   1f44c:	bne	1f2ac <flatcc_json_parser_union_type@@Base+0x5c>
   1f450:	ldr	r3, [r4, #4]
   1f454:	mov	r2, #28
   1f458:	sub	r3, r7, r3
   1f45c:	add	r3, r3, #1
   1f460:	str	r7, [r4, #36]	; 0x24
   1f464:	str	r3, [r4, #20]
   1f468:	mov	r7, r5
   1f46c:	str	r2, [r4, #24]
   1f470:	b	1f2b0 <flatcc_json_parser_union_type@@Base+0x60>
   1f474:	ldr	r3, [r4, #4]
   1f478:	mov	r2, #28
   1f47c:	sub	r3, r9, r3
   1f480:	add	r3, r3, #1
   1f484:	mov	r7, r5
   1f488:	mov	r0, r7
   1f48c:	str	r9, [r4, #36]	; 0x24
   1f490:	str	r3, [r4, #20]
   1f494:	str	r2, [r4, #24]
   1f498:	add	sp, sp, #36	; 0x24
   1f49c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1f4a0:	mov	r7, r5
   1f4a4:	add	r3, r6, #13
   1f4a8:	mov	r1, r7
   1f4ac:	str	r3, [sp]
   1f4b0:	mov	r2, r5
   1f4b4:	ldr	r3, [sp, #80]	; 0x50
   1f4b8:	mov	r0, r4
   1f4bc:	bl	19b28 <flatcc_emitter_copy_buffer@@Base+0xc8>
   1f4c0:	mov	r7, r0
   1f4c4:	b	1f3b4 <flatcc_json_parser_union_type@@Base+0x164>
   1f4c8:	mov	sl, #0
   1f4cc:	mov	fp, #0
   1f4d0:	cmp	r9, r7
   1f4d4:	beq	1f4a4 <flatcc_json_parser_union_type@@Base+0x254>
   1f4d8:	and	r3, ip, #223	; 0xdf
   1f4dc:	cmp	ip, #46	; 0x2e
   1f4e0:	cmpne	r3, #69	; 0x45
   1f4e4:	bne	1f370 <flatcc_json_parser_union_type@@Base+0x120>
   1f4e8:	ldr	r3, [r4, #24]
   1f4ec:	cmp	r3, #0
   1f4f0:	beq	1f598 <flatcc_json_parser_union_type@@Base+0x348>
   1f4f4:	ldr	r3, [sp, #20]
   1f4f8:	cmp	r3, #45	; 0x2d
   1f4fc:	bne	1f534 <flatcc_json_parser_union_type@@Base+0x2e4>
   1f500:	mov	r7, r5
   1f504:	b	1f3b4 <flatcc_json_parser_union_type@@Base+0x164>
   1f508:	ldr	r3, [r4, #24]
   1f50c:	cmp	r3, #0
   1f510:	bne	1f500 <flatcc_json_parser_union_type@@Base+0x2b0>
   1f514:	ldr	r3, [r4, #4]
   1f518:	mov	r2, #8
   1f51c:	sub	r3, r7, r3
   1f520:	add	r3, r3, #1
   1f524:	str	r7, [r4, #36]	; 0x24
   1f528:	str	r3, [r4, #20]
   1f52c:	str	r2, [r4, #24]
   1f530:	b	1f500 <flatcc_json_parser_union_type@@Base+0x2b0>
   1f534:	mov	r3, #0
   1f538:	strb	r3, [r6, #13]
   1f53c:	mov	r7, r5
   1f540:	b	1f3b4 <flatcc_json_parser_union_type@@Base+0x164>
   1f544:	mov	sl, #0
   1f548:	mov	fp, #0
   1f54c:	b	1f370 <flatcc_json_parser_union_type@@Base+0x120>
   1f550:	ldr	r3, [r4, #24]
   1f554:	cmp	r3, #0
   1f558:	beq	1f5b8 <flatcc_json_parser_union_type@@Base+0x368>
   1f55c:	ldr	r3, [sp, #20]
   1f560:	cmp	r3, #45	; 0x2d
   1f564:	movne	r7, r5
   1f568:	movne	sl, #0
   1f56c:	beq	1f500 <flatcc_json_parser_union_type@@Base+0x2b0>
   1f570:	cmp	r9, r7
   1f574:	strb	sl, [r6, #13]
   1f578:	bne	1f3b4 <flatcc_json_parser_union_type@@Base+0x164>
   1f57c:	b	1f4a4 <flatcc_json_parser_union_type@@Base+0x254>
   1f580:	ldrb	r2, [r6, #13]
   1f584:	ldr	r3, [r8, #4]
   1f588:	cmp	r2, #0
   1f58c:	addne	r3, r3, #1
   1f590:	str	r3, [r8, #4]
   1f594:	b	1f2b0 <flatcc_json_parser_union_type@@Base+0x60>
   1f598:	ldr	r3, [r4, #4]
   1f59c:	mov	r2, #12
   1f5a0:	sub	r3, r7, r3
   1f5a4:	add	r3, r3, #1
   1f5a8:	str	r7, [r4, #36]	; 0x24
   1f5ac:	str	r3, [r4, #20]
   1f5b0:	str	r2, [r4, #24]
   1f5b4:	b	1f55c <flatcc_json_parser_union_type@@Base+0x30c>
   1f5b8:	ldr	r3, [r4, #4]
   1f5bc:	mov	r2, #8
   1f5c0:	sub	r3, r1, r3
   1f5c4:	add	r3, r3, #1
   1f5c8:	str	r1, [r4, #36]	; 0x24
   1f5cc:	str	r3, [r4, #20]
   1f5d0:	str	r2, [r4, #24]
   1f5d4:	b	1f55c <flatcc_json_parser_union_type@@Base+0x30c>
   1f5d8:	ldr	r3, [pc, #12]	; 1f5ec <flatcc_json_parser_union_type@@Base+0x39c>
   1f5dc:	ldr	r2, [pc, #12]	; 1f5f0 <flatcc_json_parser_union_type@@Base+0x3a0>
   1f5e0:	ldr	r1, [pc, #12]	; 1f5f4 <flatcc_json_parser_union_type@@Base+0x3a4>
   1f5e4:	ldr	r0, [pc, #12]	; 1f5f8 <flatcc_json_parser_union_type@@Base+0x3a8>
   1f5e8:	bl	124d8 <__assert_fail@plt>
   1f5ec:	andeq	r2, r2, r0, ror #1
   1f5f0:	andeq	r0, r0, r5, asr #7
   1f5f4:	andeq	r2, r2, r0, lsl #5
   1f5f8:	andeq	r2, r2, ip, asr #5

0001f5fc <flatcc_json_parser_union_vector@@Base>:
   1f5fc:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   1f600:	mov	r5, r0
   1f604:	mov	r6, r1
   1f608:	ldr	r0, [r0]
   1f60c:	ldr	r1, [sp, #36]	; 0x24
   1f610:	mov	r4, r3
   1f614:	mov	r9, r2
   1f618:	ldrh	r7, [sp, #32]
   1f61c:	ldr	r8, [sp, #40]	; 0x28
   1f620:	bl	14644 <flatcc_builder_get_user_frame_ptr@@Base>
   1f624:	add	r3, r4, r4, lsl #1
   1f628:	lsl	r3, r3, #3
   1f62c:	add	ip, r0, #8
   1f630:	add	r1, ip, r3
   1f634:	ldr	r2, [ip, r3]
   1f638:	cmp	r2, #0
   1f63c:	beq	1f678 <flatcc_json_parser_union_vector@@Base+0x7c>
   1f640:	ldr	r3, [r5, #24]
   1f644:	cmp	r3, #0
   1f648:	beq	1f654 <flatcc_json_parser_union_vector@@Base+0x58>
   1f64c:	mov	r0, r9
   1f650:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   1f654:	ldr	r3, [r5, #4]
   1f658:	mov	r2, #28
   1f65c:	sub	r3, r6, r3
   1f660:	add	r3, r3, #1
   1f664:	str	r6, [r5, #36]	; 0x24
   1f668:	str	r3, [r5, #20]
   1f66c:	str	r2, [r5, #24]
   1f670:	mov	r0, r9
   1f674:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   1f678:	ldrb	r2, [r1, #12]
   1f67c:	cmp	r2, #0
   1f680:	beq	1f6b8 <flatcc_json_parser_union_vector@@Base+0xbc>
   1f684:	ldr	r3, [r0, #4]
   1f688:	mov	r2, r9
   1f68c:	sub	r3, r3, #1
   1f690:	str	r3, [r0, #4]
   1f694:	ldr	r3, [r1, #20]
   1f698:	str	r8, [sp, #40]	; 0x28
   1f69c:	str	r7, [sp, #36]	; 0x24
   1f6a0:	ldr	ip, [r1, #16]
   1f6a4:	mov	r0, r5
   1f6a8:	mov	r1, r6
   1f6ac:	str	ip, [sp, #32]
   1f6b0:	pop	{r4, r5, r6, r7, r8, r9, sl, lr}
   1f6b4:	b	19e84 <flatcc_emitter_copy_buffer@@Base+0x424>
   1f6b8:	ldr	lr, [r0, #4]
   1f6bc:	ldr	r4, [r5, #16]
   1f6c0:	add	lr, lr, #1
   1f6c4:	str	lr, [r0, #4]
   1f6c8:	ldr	r0, [r5, #4]
   1f6cc:	mov	r2, r9
   1f6d0:	stmib	r1, {r0, r4}
   1f6d4:	mov	r1, r6
   1f6d8:	str	r6, [ip, r3]
   1f6dc:	mov	r0, r5
   1f6e0:	pop	{r4, r5, r6, r7, r8, r9, sl, lr}
   1f6e4:	b	1c888 <flatcc_json_parser_generic_json@@Base>

0001f6e8 <flatcc_json_parser_union_type_vector@@Base>:
   1f6e8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1f6ec:	sub	sp, sp, #44	; 0x2c
   1f6f0:	mov	r4, r3
   1f6f4:	ldrh	r3, [sp, #80]	; 0x50
   1f6f8:	mov	sl, r0
   1f6fc:	mov	fp, r1
   1f700:	ldr	r0, [r0]
   1f704:	ldr	r1, [sp, #84]	; 0x54
   1f708:	str	r3, [sp, #24]
   1f70c:	mov	r9, r2
   1f710:	bl	14644 <flatcc_builder_get_user_frame_ptr@@Base>
   1f714:	add	r4, r4, r4, lsl #1
   1f718:	lsl	r3, r4, #3
   1f71c:	str	r3, [sp, #28]
   1f720:	add	r0, r0, #8
   1f724:	add	r3, r0, r3
   1f728:	str	r3, [sp, #20]
   1f72c:	ldrb	r3, [r3, #12]
   1f730:	cmp	r3, #0
   1f734:	beq	1f754 <flatcc_json_parser_union_type_vector@@Base+0x6c>
   1f738:	ldr	r3, [sl, #24]
   1f73c:	cmp	r3, #0
   1f740:	beq	1f790 <flatcc_json_parser_union_type_vector@@Base+0xa8>
   1f744:	mov	r8, r9
   1f748:	mov	r0, r8
   1f74c:	add	sp, sp, #44	; 0x2c
   1f750:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1f754:	ldr	r3, [sp, #20]
   1f758:	mov	r2, #1
   1f75c:	mov	r1, r2
   1f760:	strb	r2, [r3, #12]
   1f764:	mvn	r3, #0
   1f768:	ldr	r0, [sl]
   1f76c:	bl	160c8 <flatcc_builder_start_vector@@Base>
   1f770:	cmp	r0, #0
   1f774:	beq	1f7bc <flatcc_json_parser_union_type_vector@@Base+0xd4>
   1f778:	ldr	r3, [sl, #24]
   1f77c:	cmp	r3, #0
   1f780:	bne	1f744 <flatcc_json_parser_union_type_vector@@Base+0x5c>
   1f784:	ldr	r3, [sl, #4]
   1f788:	mov	r2, #33	; 0x21
   1f78c:	b	1f798 <flatcc_json_parser_union_type_vector@@Base+0xb0>
   1f790:	ldr	r3, [sl, #4]
   1f794:	mov	r2, #28
   1f798:	sub	r3, fp, r3
   1f79c:	add	r3, r3, #1
   1f7a0:	mov	r8, r9
   1f7a4:	mov	r0, r8
   1f7a8:	str	fp, [sl, #36]	; 0x24
   1f7ac:	str	r3, [sl, #20]
   1f7b0:	str	r2, [sl, #24]
   1f7b4:	add	sp, sp, #44	; 0x2c
   1f7b8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1f7bc:	cmp	fp, r9
   1f7c0:	beq	1f7d0 <flatcc_json_parser_union_type_vector@@Base+0xe8>
   1f7c4:	ldrb	r3, [fp]
   1f7c8:	cmp	r3, #91	; 0x5b
   1f7cc:	beq	1f914 <flatcc_json_parser_union_type_vector@@Base+0x22c>
   1f7d0:	ldr	r3, [sl, #24]
   1f7d4:	cmp	r3, #0
   1f7d8:	beq	1f8f0 <flatcc_json_parser_union_type_vector@@Base+0x208>
   1f7dc:	mov	r8, r9
   1f7e0:	ldr	r0, [sl]
   1f7e4:	bl	177a0 <flatcc_builder_vector_count@@Base>
   1f7e8:	ldr	r3, [sp, #20]
   1f7ec:	mov	r1, r0
   1f7f0:	str	r0, [r3, #16]
   1f7f4:	mov	r4, r0
   1f7f8:	ldr	r0, [sl]
   1f7fc:	bl	14514 <flatcc_builder_enter_user_frame@@Base>
   1f800:	mov	r1, r0
   1f804:	mov	r5, r0
   1f808:	ldr	r0, [sl]
   1f80c:	bl	14644 <flatcc_builder_get_user_frame_ptr@@Base>
   1f810:	mov	r6, r0
   1f814:	ldr	r0, [sl]
   1f818:	bl	177ac <flatcc_builder_vector_edit@@Base>
   1f81c:	mov	r2, r4
   1f820:	mov	r1, r0
   1f824:	mov	r0, r6
   1f828:	bl	12430 <memcpy@plt>
   1f82c:	ldr	r0, [sl]
   1f830:	bl	175a8 <flatcc_builder_end_vector@@Base>
   1f834:	subs	r6, r0, #0
   1f838:	bne	1f844 <flatcc_json_parser_union_type_vector@@Base+0x15c>
   1f83c:	mov	fp, r8
   1f840:	b	1f778 <flatcc_json_parser_union_type_vector@@Base+0x90>
   1f844:	ldr	r3, [sp, #24]
   1f848:	ldr	r0, [sl]
   1f84c:	sub	r1, r3, #1
   1f850:	bl	18d70 <flatcc_builder_table_add_offset@@Base>
   1f854:	cmp	r0, #0
   1f858:	beq	1f83c <flatcc_json_parser_union_type_vector@@Base+0x154>
   1f85c:	str	r6, [r0]
   1f860:	ldr	r1, [sp, #84]	; 0x54
   1f864:	ldr	r0, [sl]
   1f868:	bl	14644 <flatcc_builder_get_user_frame_ptr@@Base>
   1f86c:	ldr	r1, [sp, #28]
   1f870:	add	r3, r0, #8
   1f874:	add	r2, r3, r1
   1f878:	ldr	r1, [r3, r1]
   1f87c:	ldr	r3, [r0, #4]
   1f880:	cmp	r1, #0
   1f884:	addeq	r3, r3, #1
   1f888:	str	r5, [r2, #20]
   1f88c:	streq	r3, [r0, #4]
   1f890:	beq	1f748 <flatcc_json_parser_union_type_vector@@Base+0x60>
   1f894:	cmp	r3, #0
   1f898:	beq	203fc <flatcc_json_parser_union_type_vector@@Base+0xd14>
   1f89c:	sub	r3, r3, #1
   1f8a0:	ldmib	r2, {r2, ip}
   1f8a4:	str	r3, [r0, #4]
   1f8a8:	ldr	r0, [sp, #92]	; 0x5c
   1f8ac:	str	r4, [sp]
   1f8b0:	str	r0, [sp, #8]
   1f8b4:	ldr	r0, [sp, #24]
   1f8b8:	mov	r3, r5
   1f8bc:	str	r0, [sp, #4]
   1f8c0:	mov	r0, sl
   1f8c4:	ldr	r5, [sl, #16]
   1f8c8:	ldr	r4, [sl, #4]
   1f8cc:	str	ip, [sl, #16]
   1f8d0:	str	r2, [sl, #4]
   1f8d4:	mov	r2, r9
   1f8d8:	bl	19e84 <flatcc_emitter_copy_buffer@@Base+0x424>
   1f8dc:	cmp	r9, r0
   1f8e0:	beq	1f744 <flatcc_json_parser_union_type_vector@@Base+0x5c>
   1f8e4:	str	r5, [sl, #16]
   1f8e8:	str	r4, [sl, #4]
   1f8ec:	b	1f748 <flatcc_json_parser_union_type_vector@@Base+0x60>
   1f8f0:	ldr	r3, [sl, #4]
   1f8f4:	mov	r2, #22
   1f8f8:	sub	r3, fp, r3
   1f8fc:	add	r3, r3, #1
   1f900:	str	fp, [sl, #36]	; 0x24
   1f904:	str	r3, [sl, #20]
   1f908:	str	r2, [sl, #24]
   1f90c:	mov	r8, r9
   1f910:	b	1f7e0 <flatcc_json_parser_union_type_vector@@Base+0xf8>
   1f914:	add	r3, fp, #1
   1f918:	sub	r2, r9, r3
   1f91c:	cmp	r2, #1
   1f920:	ble	1f934 <flatcc_json_parser_union_type_vector@@Base+0x24c>
   1f924:	ldrb	r2, [fp, #1]
   1f928:	cmp	r2, #32
   1f92c:	bhi	20388 <flatcc_json_parser_union_type_vector@@Base+0xca0>
   1f930:	beq	203bc <flatcc_json_parser_union_type_vector@@Base+0xcd4>
   1f934:	mov	r1, #0
   1f938:	cmp	r9, r3
   1f93c:	beq	20380 <flatcc_json_parser_union_type_vector@@Base+0xc98>
   1f940:	ldrb	r2, [r3]
   1f944:	cmp	r2, #32
   1f948:	bne	201cc <flatcc_json_parser_union_type_vector@@Base+0xae4>
   1f94c:	add	r3, r3, #1
   1f950:	b	1f960 <flatcc_json_parser_union_type_vector@@Base+0x278>
   1f954:	ldrb	r2, [r3], #1
   1f958:	cmp	r2, #32
   1f95c:	bne	201d0 <flatcc_json_parser_union_type_vector@@Base+0xae8>
   1f960:	cmp	r9, r3
   1f964:	mov	fp, r3
   1f968:	bne	1f954 <flatcc_json_parser_union_type_vector@@Base+0x26c>
   1f96c:	mov	r5, #0
   1f970:	mov	r1, #1
   1f974:	ldr	r0, [sl]
   1f978:	bl	1555c <flatcc_builder_extend_vector@@Base>
   1f97c:	subs	r3, r0, #0
   1f980:	str	r3, [sp, #16]
   1f984:	beq	1f778 <flatcc_json_parser_union_type_vector@@Base+0x90>
   1f988:	cmp	r9, fp
   1f98c:	strb	r5, [sp, #39]	; 0x27
   1f990:	beq	1fdac <flatcc_json_parser_union_type_vector@@Base+0x6c4>
   1f994:	ldrb	r4, [fp]
   1f998:	sub	r3, r4, #45	; 0x2d
   1f99c:	clz	r3, r3
   1f9a0:	lsr	r3, r3, #5
   1f9a4:	add	r8, fp, r3
   1f9a8:	cmp	r9, r8
   1f9ac:	beq	1fcec <flatcc_json_parser_union_type_vector@@Base+0x604>
   1f9b0:	ldrb	ip, [fp, r3]
   1f9b4:	sub	r3, ip, #48	; 0x30
   1f9b8:	cmp	r3, #9
   1f9bc:	bhi	1fca8 <flatcc_json_parser_union_type_vector@@Base+0x5c0>
   1f9c0:	uxtb	r6, ip
   1f9c4:	mov	r7, #0
   1f9c8:	subs	r6, r6, #48	; 0x30
   1f9cc:	add	r1, r8, #1
   1f9d0:	sbc	r7, r7, #0
   1f9d4:	mov	lr, #10
   1f9d8:	b	1fa20 <flatcc_json_parser_union_type_vector@@Base+0x338>
   1f9dc:	mov	r0, r1
   1f9e0:	ldrb	ip, [r0], #1
   1f9e4:	sub	r3, ip, #48	; 0x30
   1f9e8:	cmp	r3, #9
   1f9ec:	bhi	1fcb0 <flatcc_json_parser_union_type_vector@@Base+0x5c8>
   1f9f0:	umull	r2, r3, r6, lr
   1f9f4:	mla	r3, lr, r7, r3
   1f9f8:	subs	r2, r2, #48	; 0x30
   1f9fc:	sbc	r3, r3, #0
   1fa00:	adds	r2, r2, ip
   1fa04:	adc	r3, r3, #0
   1fa08:	cmp	r3, r7
   1fa0c:	cmpeq	r2, r6
   1fa10:	bcc	1fd4c <flatcc_json_parser_union_type_vector@@Base+0x664>
   1fa14:	mov	r1, r0
   1fa18:	mov	r6, r2
   1fa1c:	mov	r7, r3
   1fa20:	cmp	r1, r9
   1fa24:	mov	r8, r1
   1fa28:	bne	1f9dc <flatcc_json_parser_union_type_vector@@Base+0x2f4>
   1fa2c:	cmp	r4, #45	; 0x2d
   1fa30:	beq	1fcf8 <flatcc_json_parser_union_type_vector@@Base+0x610>
   1fa34:	cmp	r7, #0
   1fa38:	cmpeq	r6, #255	; 0xff
   1fa3c:	bhi	1fd80 <flatcc_json_parser_union_type_vector@@Base+0x698>
   1fa40:	uxtb	r0, r6
   1fa44:	cmp	r8, fp
   1fa48:	strb	r0, [sp, #39]	; 0x27
   1fa4c:	beq	1fdac <flatcc_json_parser_union_type_vector@@Base+0x6c4>
   1fa50:	ldr	r3, [sp, #96]	; 0x60
   1fa54:	blx	r3
   1fa58:	cmp	r0, #0
   1fa5c:	ldrbne	r2, [sp, #39]	; 0x27
   1fa60:	bne	1fa78 <flatcc_json_parser_union_type_vector@@Base+0x390>
   1fa64:	ldr	r3, [sl, #8]
   1fa68:	tst	r3, #1
   1fa6c:	beq	20180 <flatcc_json_parser_union_type_vector@@Base+0xa98>
   1fa70:	mov	r2, #0
   1fa74:	strb	r5, [sp, #39]	; 0x27
   1fa78:	sub	r3, r9, r8
   1fa7c:	cmp	r3, #1
   1fa80:	ldr	r3, [sp, #16]
   1fa84:	strb	r2, [r3]
   1fa88:	ble	1fa9c <flatcc_json_parser_union_type_vector@@Base+0x3b4>
   1fa8c:	ldrb	r2, [r8]
   1fa90:	cmp	r2, #32
   1fa94:	bhi	1fc14 <flatcc_json_parser_union_type_vector@@Base+0x52c>
   1fa98:	beq	1fc04 <flatcc_json_parser_union_type_vector@@Base+0x51c>
   1fa9c:	cmp	r9, r8
   1faa0:	beq	1f7dc <flatcc_json_parser_union_type_vector@@Base+0xf4>
   1faa4:	ldrb	r2, [r8]
   1faa8:	cmp	r2, #32
   1faac:	bne	1facc <flatcc_json_parser_union_type_vector@@Base+0x3e4>
   1fab0:	add	r3, r8, #1
   1fab4:	cmp	r9, r3
   1fab8:	mov	r8, r3
   1fabc:	beq	1f7e0 <flatcc_json_parser_union_type_vector@@Base+0xf8>
   1fac0:	ldrb	r2, [r3], #1
   1fac4:	cmp	r2, #32
   1fac8:	beq	1fab4 <flatcc_json_parser_union_type_vector@@Base+0x3cc>
   1facc:	cmp	r2, #32
   1fad0:	bhi	1fb8c <flatcc_json_parser_union_type_vector@@Base+0x4a4>
   1fad4:	sub	r2, r2, #9
   1fad8:	cmp	r2, #23
   1fadc:	ldrls	pc, [pc, r2, lsl #2]
   1fae0:	b	1fbd4 <flatcc_json_parser_union_type_vector@@Base+0x4ec>
   1fae4:	andeq	pc, r1, ip, asr #23
   1fae8:	andeq	pc, r1, r4, ror #22
   1faec:	ldrdeq	pc, [r1], -r4
   1faf0:	ldrdeq	pc, [r1], -r4
   1faf4:	andeq	pc, r1, r4, asr #22
   1faf8:	ldrdeq	pc, [r1], -r4
   1fafc:	ldrdeq	pc, [r1], -r4
   1fb00:	ldrdeq	pc, [r1], -r4
   1fb04:	ldrdeq	pc, [r1], -r4
   1fb08:	ldrdeq	pc, [r1], -r4
   1fb0c:	ldrdeq	pc, [r1], -r4
   1fb10:	ldrdeq	pc, [r1], -r4
   1fb14:	ldrdeq	pc, [r1], -r4
   1fb18:	ldrdeq	pc, [r1], -r4
   1fb1c:	ldrdeq	pc, [r1], -r4
   1fb20:	ldrdeq	pc, [r1], -r4
   1fb24:	ldrdeq	pc, [r1], -r4
   1fb28:	ldrdeq	pc, [r1], -r4
   1fb2c:	ldrdeq	pc, [r1], -r4
   1fb30:	ldrdeq	pc, [r1], -r4
   1fb34:	ldrdeq	pc, [r1], -r4
   1fb38:	ldrdeq	pc, [r1], -r4
   1fb3c:	ldrdeq	pc, [r1], -r4
   1fb40:	muleq	r1, ip, sl
   1fb44:	sub	r3, r9, r8
   1fb48:	cmp	r3, #1
   1fb4c:	movle	r3, r5
   1fb50:	ldrbgt	r3, [r8, #1]
   1fb54:	subgt	r3, r3, #10
   1fb58:	clzgt	r3, r3
   1fb5c:	lsrgt	r3, r3, #5
   1fb60:	add	r8, r8, r3
   1fb64:	ldr	r3, [sl, #16]
   1fb68:	add	r8, r8, #1
   1fb6c:	add	r3, r3, #1
   1fb70:	str	r8, [sl, #4]
   1fb74:	str	r3, [sl, #16]
   1fb78:	cmp	r9, r8
   1fb7c:	beq	1f7dc <flatcc_json_parser_union_type_vector@@Base+0xf4>
   1fb80:	ldrb	r2, [r8]
   1fb84:	cmp	r2, #32
   1fb88:	bls	1fad4 <flatcc_json_parser_union_type_vector@@Base+0x3ec>
   1fb8c:	cmp	r2, #44	; 0x2c
   1fb90:	beq	1fc24 <flatcc_json_parser_union_type_vector@@Base+0x53c>
   1fb94:	cmp	r2, #93	; 0x5d
   1fb98:	beq	1fe08 <flatcc_json_parser_union_type_vector@@Base+0x720>
   1fb9c:	ldr	r3, [sl, #24]
   1fba0:	cmp	r3, #0
   1fba4:	bne	1f7dc <flatcc_json_parser_union_type_vector@@Base+0xf4>
   1fba8:	ldr	r3, [sl, #4]
   1fbac:	str	r8, [sl, #36]	; 0x24
   1fbb0:	sub	r8, r8, r3
   1fbb4:	add	r8, r8, #1
   1fbb8:	mov	r3, #9
   1fbbc:	str	r8, [sl, #20]
   1fbc0:	str	r3, [sl, #24]
   1fbc4:	mov	r8, r9
   1fbc8:	b	1f7e0 <flatcc_json_parser_union_type_vector@@Base+0xf8>
   1fbcc:	add	r8, r8, #1
   1fbd0:	b	1fb78 <flatcc_json_parser_union_type_vector@@Base+0x490>
   1fbd4:	ldr	r3, [sl, #24]
   1fbd8:	cmp	r3, #0
   1fbdc:	bne	1f7dc <flatcc_json_parser_union_type_vector@@Base+0xf4>
   1fbe0:	ldr	r3, [sl, #4]
   1fbe4:	str	r8, [sl, #36]	; 0x24
   1fbe8:	sub	r3, r8, r3
   1fbec:	add	r3, r3, #1
   1fbf0:	mov	r2, #5
   1fbf4:	str	r3, [sl, #20]
   1fbf8:	str	r2, [sl, #24]
   1fbfc:	mov	r8, r9
   1fc00:	b	1f7e0 <flatcc_json_parser_union_type_vector@@Base+0xf8>
   1fc04:	ldrb	r2, [r8, #1]
   1fc08:	cmp	r2, #32
   1fc0c:	addhi	r8, r8, #1
   1fc10:	bls	1fa9c <flatcc_json_parser_union_type_vector@@Base+0x3b4>
   1fc14:	cmp	r9, r8
   1fc18:	beq	1f7dc <flatcc_json_parser_union_type_vector@@Base+0xf4>
   1fc1c:	cmp	r2, #44	; 0x2c
   1fc20:	bne	1fb94 <flatcc_json_parser_union_type_vector@@Base+0x4ac>
   1fc24:	add	fp, r8, #1
   1fc28:	sub	r3, r9, fp
   1fc2c:	cmp	r3, #1
   1fc30:	ble	1fc44 <flatcc_json_parser_union_type_vector@@Base+0x55c>
   1fc34:	ldrb	r2, [r8, #1]
   1fc38:	cmp	r2, #32
   1fc3c:	bhi	20170 <flatcc_json_parser_union_type_vector@@Base+0xa88>
   1fc40:	beq	20160 <flatcc_json_parser_union_type_vector@@Base+0xa78>
   1fc44:	cmp	r9, fp
   1fc48:	beq	20178 <flatcc_json_parser_union_type_vector@@Base+0xa90>
   1fc4c:	ldrb	r2, [fp]
   1fc50:	cmp	r2, #32
   1fc54:	bne	1ff4c <flatcc_json_parser_union_type_vector@@Base+0x864>
   1fc58:	add	r3, fp, #1
   1fc5c:	b	1fc6c <flatcc_json_parser_union_type_vector@@Base+0x584>
   1fc60:	ldrb	r2, [r3], #1
   1fc64:	cmp	r2, #32
   1fc68:	bne	1ff4c <flatcc_json_parser_union_type_vector@@Base+0x864>
   1fc6c:	cmp	r3, r9
   1fc70:	mov	fp, r3
   1fc74:	bne	1fc60 <flatcc_json_parser_union_type_vector@@Base+0x578>
   1fc78:	ldr	r3, [sl, #24]
   1fc7c:	cmp	r3, #0
   1fc80:	bne	1f7dc <flatcc_json_parser_union_type_vector@@Base+0xf4>
   1fc84:	ldr	r3, [sl, #4]
   1fc88:	mov	r2, #9
   1fc8c:	sub	r3, fp, r3
   1fc90:	add	r3, r3, #1
   1fc94:	str	fp, [sl, #36]	; 0x24
   1fc98:	str	r3, [sl, #20]
   1fc9c:	str	r2, [sl, #24]
   1fca0:	mov	r8, r9
   1fca4:	b	1f7e0 <flatcc_json_parser_union_type_vector@@Base+0xf8>
   1fca8:	mov	r6, #0
   1fcac:	mov	r7, r6
   1fcb0:	cmp	r8, fp
   1fcb4:	beq	1fdac <flatcc_json_parser_union_type_vector@@Base+0x6c4>
   1fcb8:	and	r3, ip, #223	; 0xdf
   1fcbc:	cmp	ip, #46	; 0x2e
   1fcc0:	cmpne	r3, #69	; 0x45
   1fcc4:	bne	1fa2c <flatcc_json_parser_union_type_vector@@Base+0x344>
   1fcc8:	ldr	r3, [sl, #24]
   1fccc:	cmp	r3, #0
   1fcd0:	beq	1fde0 <flatcc_json_parser_union_type_vector@@Base+0x6f8>
   1fcd4:	cmp	r4, #45	; 0x2d
   1fcd8:	beq	1fd20 <flatcc_json_parser_union_type_vector@@Base+0x638>
   1fcdc:	strb	r5, [sp, #39]	; 0x27
   1fce0:	mov	r8, r9
   1fce4:	mov	r0, #0
   1fce8:	b	1fa50 <flatcc_json_parser_union_type_vector@@Base+0x368>
   1fcec:	cmp	r4, #45	; 0x2d
   1fcf0:	movne	r6, #0
   1fcf4:	bne	1fa40 <flatcc_json_parser_union_type_vector@@Base+0x358>
   1fcf8:	ldr	r3, [sl, #24]
   1fcfc:	cmp	r3, #0
   1fd00:	bne	1fd20 <flatcc_json_parser_union_type_vector@@Base+0x638>
   1fd04:	ldr	r3, [sl, #4]
   1fd08:	mov	r2, #8
   1fd0c:	sub	r3, r8, r3
   1fd10:	add	r3, r3, #1
   1fd14:	str	r2, [sl, #24]
   1fd18:	str	r8, [sl, #36]	; 0x24
   1fd1c:	str	r3, [sl, #20]
   1fd20:	mov	r0, r5
   1fd24:	ldr	r3, [sp, #96]	; 0x60
   1fd28:	blx	r3
   1fd2c:	cmp	r0, #0
   1fd30:	moveq	r8, r9
   1fd34:	beq	1fa64 <flatcc_json_parser_union_type_vector@@Base+0x37c>
   1fd38:	ldrb	r3, [sp, #39]	; 0x27
   1fd3c:	ldr	r2, [sp, #16]
   1fd40:	mov	r8, r9
   1fd44:	strb	r3, [r2]
   1fd48:	b	1fa9c <flatcc_json_parser_union_type_vector@@Base+0x3b4>
   1fd4c:	ldr	r3, [sl, #24]
   1fd50:	cmp	r3, #0
   1fd54:	bne	1fcd4 <flatcc_json_parser_union_type_vector@@Base+0x5ec>
   1fd58:	ldr	r3, [sl, #4]
   1fd5c:	mov	r2, #8
   1fd60:	sub	r3, r1, r3
   1fd64:	add	r3, r3, #1
   1fd68:	cmp	r4, #45	; 0x2d
   1fd6c:	str	r2, [sl, #24]
   1fd70:	str	r1, [sl, #36]	; 0x24
   1fd74:	str	r3, [sl, #20]
   1fd78:	beq	1fd20 <flatcc_json_parser_union_type_vector@@Base+0x638>
   1fd7c:	b	1fcdc <flatcc_json_parser_union_type_vector@@Base+0x5f4>
   1fd80:	ldr	r3, [sl, #24]
   1fd84:	cmp	r3, #0
   1fd88:	bne	1fd20 <flatcc_json_parser_union_type_vector@@Base+0x638>
   1fd8c:	ldr	r3, [sl, #4]
   1fd90:	mov	r2, #7
   1fd94:	sub	r3, r8, r3
   1fd98:	add	r3, r3, #1
   1fd9c:	str	r8, [sl, #36]	; 0x24
   1fda0:	str	r3, [sl, #20]
   1fda4:	str	r2, [sl, #24]
   1fda8:	b	1fd20 <flatcc_json_parser_union_type_vector@@Base+0x638>
   1fdac:	add	r3, sp, #39	; 0x27
   1fdb0:	str	r3, [sp]
   1fdb4:	mov	r2, r9
   1fdb8:	ldr	r3, [sp, #88]	; 0x58
   1fdbc:	mov	r1, fp
   1fdc0:	mov	r0, sl
   1fdc4:	bl	19b28 <flatcc_emitter_copy_buffer@@Base+0xc8>
   1fdc8:	cmp	r9, r0
   1fdcc:	cmpne	r0, fp
   1fdd0:	mov	r8, r0
   1fdd4:	beq	1f83c <flatcc_json_parser_union_type_vector@@Base+0x154>
   1fdd8:	ldrb	r0, [sp, #39]	; 0x27
   1fddc:	b	1fa50 <flatcc_json_parser_union_type_vector@@Base+0x368>
   1fde0:	ldr	r3, [sl, #4]
   1fde4:	mov	r2, #12
   1fde8:	sub	r3, r8, r3
   1fdec:	add	r3, r3, #1
   1fdf0:	cmp	r4, #45	; 0x2d
   1fdf4:	str	r2, [sl, #24]
   1fdf8:	str	r8, [sl, #36]	; 0x24
   1fdfc:	str	r3, [sl, #20]
   1fe00:	beq	1fd20 <flatcc_json_parser_union_type_vector@@Base+0x638>
   1fe04:	b	1fcdc <flatcc_json_parser_union_type_vector@@Base+0x5f4>
   1fe08:	add	r3, r8, #1
   1fe0c:	sub	r2, r9, r3
   1fe10:	cmp	r2, #1
   1fe14:	ble	1fe28 <flatcc_json_parser_union_type_vector@@Base+0x740>
   1fe18:	ldrb	r2, [r8, #1]
   1fe1c:	cmp	r2, #32
   1fe20:	bhi	1ff20 <flatcc_json_parser_union_type_vector@@Base+0x838>
   1fe24:	beq	201b0 <flatcc_json_parser_union_type_vector@@Base+0xac8>
   1fe28:	mov	r1, #0
   1fe2c:	cmp	r9, r3
   1fe30:	beq	1f7dc <flatcc_json_parser_union_type_vector@@Base+0xf4>
   1fe34:	ldrb	r2, [r3]
   1fe38:	cmp	r2, #32
   1fe3c:	bne	201c4 <flatcc_json_parser_union_type_vector@@Base+0xadc>
   1fe40:	add	r3, r3, #1
   1fe44:	cmp	r3, r9
   1fe48:	mov	r8, r3
   1fe4c:	beq	1f7e0 <flatcc_json_parser_union_type_vector@@Base+0xf8>
   1fe50:	ldrb	r2, [r3], #1
   1fe54:	cmp	r2, #32
   1fe58:	beq	1fe44 <flatcc_json_parser_union_type_vector@@Base+0x75c>
   1fe5c:	cmp	r2, #32
   1fe60:	bhi	203d0 <flatcc_json_parser_union_type_vector@@Base+0xce8>
   1fe64:	mov	r3, r8
   1fe68:	sub	r2, r2, #9
   1fe6c:	cmp	r2, #23
   1fe70:	ldrls	pc, [pc, r2, lsl #2]
   1fe74:	b	1ff30 <flatcc_json_parser_union_type_vector@@Base+0x848>
   1fe78:	andeq	pc, r1, r8, lsr #30
   1fe7c:	strdeq	pc, [r1], -r8
   1fe80:	andeq	pc, r1, r0, lsr pc	; <UNPREDICTABLE>
   1fe84:	andeq	pc, r1, r0, lsr pc	; <UNPREDICTABLE>
   1fe88:	ldrdeq	pc, [r1], -r8
   1fe8c:	andeq	pc, r1, r0, lsr pc	; <UNPREDICTABLE>
   1fe90:	andeq	pc, r1, r0, lsr pc	; <UNPREDICTABLE>
   1fe94:	andeq	pc, r1, r0, lsr pc	; <UNPREDICTABLE>
   1fe98:	andeq	pc, r1, r0, lsr pc	; <UNPREDICTABLE>
   1fe9c:	andeq	pc, r1, r0, lsr pc	; <UNPREDICTABLE>
   1fea0:	andeq	pc, r1, r0, lsr pc	; <UNPREDICTABLE>
   1fea4:	andeq	pc, r1, r0, lsr pc	; <UNPREDICTABLE>
   1fea8:	andeq	pc, r1, r0, lsr pc	; <UNPREDICTABLE>
   1feac:	andeq	pc, r1, r0, lsr pc	; <UNPREDICTABLE>
   1feb0:	andeq	pc, r1, r0, lsr pc	; <UNPREDICTABLE>
   1feb4:	andeq	pc, r1, r0, lsr pc	; <UNPREDICTABLE>
   1feb8:	andeq	pc, r1, r0, lsr pc	; <UNPREDICTABLE>
   1febc:	andeq	pc, r1, r0, lsr pc	; <UNPREDICTABLE>
   1fec0:	andeq	pc, r1, r0, lsr pc	; <UNPREDICTABLE>
   1fec4:	andeq	pc, r1, r0, lsr pc	; <UNPREDICTABLE>
   1fec8:	andeq	pc, r1, r0, lsr pc	; <UNPREDICTABLE>
   1fecc:	andeq	pc, r1, r0, lsr pc	; <UNPREDICTABLE>
   1fed0:	andeq	pc, r1, r0, lsr pc	; <UNPREDICTABLE>
   1fed4:	andeq	pc, r1, ip, lsr #28
   1fed8:	sub	r2, r9, r3
   1fedc:	cmp	r2, #1
   1fee0:	movle	r2, r1
   1fee4:	ldrbgt	r2, [r3, #1]
   1fee8:	subgt	r2, r2, #10
   1feec:	clzgt	r2, r2
   1fef0:	lsrgt	r2, r2, #5
   1fef4:	add	r3, r3, r2
   1fef8:	ldr	r2, [sl, #16]
   1fefc:	add	r3, r3, #1
   1ff00:	add	r2, r2, #1
   1ff04:	str	r3, [sl, #4]
   1ff08:	str	r2, [sl, #16]
   1ff0c:	cmp	r9, r3
   1ff10:	beq	1f7dc <flatcc_json_parser_union_type_vector@@Base+0xf4>
   1ff14:	ldrb	r2, [r3]
   1ff18:	cmp	r2, #32
   1ff1c:	bls	1fe68 <flatcc_json_parser_union_type_vector@@Base+0x780>
   1ff20:	mov	r8, r3
   1ff24:	b	1f7e0 <flatcc_json_parser_union_type_vector@@Base+0xf8>
   1ff28:	add	r3, r3, #1
   1ff2c:	b	1ff0c <flatcc_json_parser_union_type_vector@@Base+0x824>
   1ff30:	ldr	r2, [sl, #24]
   1ff34:	cmp	r2, #0
   1ff38:	bne	1f7dc <flatcc_json_parser_union_type_vector@@Base+0xf4>
   1ff3c:	ldr	r2, [sl, #4]
   1ff40:	str	r3, [sl, #36]	; 0x24
   1ff44:	sub	r3, r3, r2
   1ff48:	b	1fbec <flatcc_json_parser_union_type_vector@@Base+0x504>
   1ff4c:	cmp	r2, #32
   1ff50:	bhi	2000c <flatcc_json_parser_union_type_vector@@Base+0x924>
   1ff54:	sub	r3, r2, #9
   1ff58:	cmp	r3, #23
   1ff5c:	ldrls	pc, [pc, r3, lsl #2]
   1ff60:	b	200e8 <flatcc_json_parser_union_type_vector@@Base+0xa00>
   1ff64:	andeq	r0, r2, r0, ror #1
   1ff68:	andeq	pc, r1, r4, ror #31
   1ff6c:	andeq	r0, r2, r8, ror #1
   1ff70:	andeq	r0, r2, r8, ror #1
   1ff74:	andeq	pc, r1, r4, asr #31
   1ff78:	andeq	r0, r2, r8, ror #1
   1ff7c:	andeq	r0, r2, r8, ror #1
   1ff80:	andeq	r0, r2, r8, ror #1
   1ff84:	andeq	r0, r2, r8, ror #1
   1ff88:	andeq	r0, r2, r8, ror #1
   1ff8c:	andeq	r0, r2, r8, ror #1
   1ff90:	andeq	r0, r2, r8, ror #1
   1ff94:	andeq	r0, r2, r8, ror #1
   1ff98:	andeq	r0, r2, r8, ror #1
   1ff9c:	andeq	r0, r2, r8, ror #1
   1ffa0:	andeq	r0, r2, r8, ror #1
   1ffa4:	andeq	r0, r2, r8, ror #1
   1ffa8:	andeq	r0, r2, r8, ror #1
   1ffac:	andeq	r0, r2, r8, ror #1
   1ffb0:	andeq	r0, r2, r8, ror #1
   1ffb4:	andeq	r0, r2, r8, ror #1
   1ffb8:	andeq	r0, r2, r8, ror #1
   1ffbc:	andeq	r0, r2, r8, ror #1
   1ffc0:	andeq	pc, r1, r4, asr #24
   1ffc4:	sub	r3, r9, fp
   1ffc8:	cmp	r3, #1
   1ffcc:	movle	r3, r5
   1ffd0:	ldrbgt	r3, [fp, #1]
   1ffd4:	subgt	r3, r3, #10
   1ffd8:	clzgt	r3, r3
   1ffdc:	lsrgt	r3, r3, #5
   1ffe0:	add	fp, fp, r3
   1ffe4:	ldr	r3, [sl, #16]
   1ffe8:	add	fp, fp, #1
   1ffec:	add	r3, r3, #1
   1fff0:	str	fp, [sl, #4]
   1fff4:	str	r3, [sl, #16]
   1fff8:	cmp	r9, fp
   1fffc:	beq	20178 <flatcc_json_parser_union_type_vector@@Base+0xa90>
   20000:	ldrb	r2, [fp]
   20004:	cmp	r2, #32
   20008:	bls	1ff54 <flatcc_json_parser_union_type_vector@@Base+0x86c>
   2000c:	cmp	r2, #93	; 0x5d
   20010:	bne	1f970 <flatcc_json_parser_union_type_vector@@Base+0x288>
   20014:	add	r8, fp, #1
   20018:	sub	r3, r9, r8
   2001c:	cmp	r3, #1
   20020:	ble	20034 <flatcc_json_parser_union_type_vector@@Base+0x94c>
   20024:	ldrb	r3, [fp, #1]
   20028:	cmp	r3, #32
   2002c:	bhi	1f7e0 <flatcc_json_parser_union_type_vector@@Base+0xf8>
   20030:	beq	203d8 <flatcc_json_parser_union_type_vector@@Base+0xcf0>
   20034:	mov	r1, #0
   20038:	cmp	r9, r8
   2003c:	beq	1f7dc <flatcc_json_parser_union_type_vector@@Base+0xf4>
   20040:	ldrb	r2, [r8]
   20044:	cmp	r2, #32
   20048:	bne	20068 <flatcc_json_parser_union_type_vector@@Base+0x980>
   2004c:	add	r3, r8, #1
   20050:	cmp	r3, r9
   20054:	mov	r8, r3
   20058:	beq	1f7e0 <flatcc_json_parser_union_type_vector@@Base+0xf8>
   2005c:	ldrb	r2, [r3], #1
   20060:	cmp	r2, #32
   20064:	beq	20050 <flatcc_json_parser_union_type_vector@@Base+0x968>
   20068:	cmp	r2, #32
   2006c:	bhi	203d0 <flatcc_json_parser_union_type_vector@@Base+0xce8>
   20070:	sub	r2, r2, #9
   20074:	cmp	r2, #23
   20078:	ldrls	pc, [pc, r2, lsl #2]
   2007c:	b	1fbd4 <flatcc_json_parser_union_type_vector@@Base+0x4ec>
   20080:	andeq	r0, r2, r8, asr r1
   20084:	andeq	r0, r2, r4, lsr r1
   20088:	ldrdeq	pc, [r1], -r4
   2008c:	ldrdeq	pc, [r1], -r4
   20090:	andeq	r0, r2, r4, lsl r1
   20094:	ldrdeq	pc, [r1], -r4
   20098:	ldrdeq	pc, [r1], -r4
   2009c:	ldrdeq	pc, [r1], -r4
   200a0:	ldrdeq	pc, [r1], -r4
   200a4:	ldrdeq	pc, [r1], -r4
   200a8:	ldrdeq	pc, [r1], -r4
   200ac:	ldrdeq	pc, [r1], -r4
   200b0:	ldrdeq	pc, [r1], -r4
   200b4:	ldrdeq	pc, [r1], -r4
   200b8:	ldrdeq	pc, [r1], -r4
   200bc:	ldrdeq	pc, [r1], -r4
   200c0:	ldrdeq	pc, [r1], -r4
   200c4:	ldrdeq	pc, [r1], -r4
   200c8:	ldrdeq	pc, [r1], -r4
   200cc:	ldrdeq	pc, [r1], -r4
   200d0:	ldrdeq	pc, [r1], -r4
   200d4:	ldrdeq	pc, [r1], -r4
   200d8:	ldrdeq	pc, [r1], -r4
   200dc:	andeq	r0, r2, r8, lsr r0
   200e0:	add	fp, fp, #1
   200e4:	b	1fff8 <flatcc_json_parser_union_type_vector@@Base+0x910>
   200e8:	ldr	r3, [sl, #24]
   200ec:	cmp	r3, #0
   200f0:	bne	1f7dc <flatcc_json_parser_union_type_vector@@Base+0xf4>
   200f4:	ldr	r3, [sl, #4]
   200f8:	mov	r2, #5
   200fc:	sub	r3, fp, r3
   20100:	add	r3, r3, #1
   20104:	str	fp, [sl, #36]	; 0x24
   20108:	str	r3, [sl, #20]
   2010c:	str	r2, [sl, #24]
   20110:	b	1f7dc <flatcc_json_parser_union_type_vector@@Base+0xf4>
   20114:	sub	r3, r9, r8
   20118:	cmp	r3, #1
   2011c:	movle	r3, r1
   20120:	ldrbgt	r3, [r8, #1]
   20124:	subgt	r3, r3, #10
   20128:	clzgt	r3, r3
   2012c:	lsrgt	r3, r3, #5
   20130:	add	r8, r8, r3
   20134:	ldr	r3, [sl, #16]
   20138:	add	r8, r8, #1
   2013c:	add	r3, r3, #1
   20140:	str	r8, [sl, #4]
   20144:	str	r3, [sl, #16]
   20148:	cmp	r9, r8
   2014c:	beq	1f7dc <flatcc_json_parser_union_type_vector@@Base+0xf4>
   20150:	ldrb	r2, [r8]
   20154:	b	20068 <flatcc_json_parser_union_type_vector@@Base+0x980>
   20158:	add	r8, r8, #1
   2015c:	b	20148 <flatcc_json_parser_union_type_vector@@Base+0xa60>
   20160:	ldrb	r2, [r8, #2]
   20164:	cmp	r2, #32
   20168:	addhi	fp, r8, #2
   2016c:	bls	1fc44 <flatcc_json_parser_union_type_vector@@Base+0x55c>
   20170:	cmp	r9, fp
   20174:	bne	2000c <flatcc_json_parser_union_type_vector@@Base+0x924>
   20178:	mov	fp, r9
   2017c:	b	1fc78 <flatcc_json_parser_union_type_vector@@Base+0x590>
   20180:	ldr	r3, [sl, #24]
   20184:	cmp	r3, #0
   20188:	bne	1f744 <flatcc_json_parser_union_type_vector@@Base+0x5c>
   2018c:	ldr	r3, [sl, #4]
   20190:	mov	r2, #15
   20194:	sub	r3, r8, r3
   20198:	add	r3, r3, #1
   2019c:	str	r8, [sl, #36]	; 0x24
   201a0:	str	r3, [sl, #20]
   201a4:	mov	r8, r9
   201a8:	str	r2, [sl, #24]
   201ac:	b	1f748 <flatcc_json_parser_union_type_vector@@Base+0x60>
   201b0:	ldrb	r2, [r8, #2]
   201b4:	cmp	r2, #32
   201b8:	addhi	r8, r8, #2
   201bc:	bls	1fe28 <flatcc_json_parser_union_type_vector@@Base+0x740>
   201c0:	b	1f7e0 <flatcc_json_parser_union_type_vector@@Base+0xf8>
   201c4:	mov	r8, r3
   201c8:	b	1fe5c <flatcc_json_parser_union_type_vector@@Base+0x774>
   201cc:	mov	fp, r3
   201d0:	cmp	r2, #32
   201d4:	bhi	20298 <flatcc_json_parser_union_type_vector@@Base+0xbb0>
   201d8:	mov	r3, fp
   201dc:	sub	r2, r2, #9
   201e0:	cmp	r2, #23
   201e4:	ldrls	pc, [pc, r2, lsl #2]
   201e8:	b	20374 <flatcc_json_parser_union_type_vector@@Base+0xc8c>
   201ec:	andeq	r0, r2, ip, ror #6
   201f0:	andeq	r0, r2, ip, ror #4
   201f4:	andeq	r0, r2, r4, ror r3
   201f8:	andeq	r0, r2, r4, ror r3
   201fc:	andeq	r0, r2, ip, asr #4
   20200:	andeq	r0, r2, r4, ror r3
   20204:	andeq	r0, r2, r4, ror r3
   20208:	andeq	r0, r2, r4, ror r3
   2020c:	andeq	r0, r2, r4, ror r3
   20210:	andeq	r0, r2, r4, ror r3
   20214:	andeq	r0, r2, r4, ror r3
   20218:	andeq	r0, r2, r4, ror r3
   2021c:	andeq	r0, r2, r4, ror r3
   20220:	andeq	r0, r2, r4, ror r3
   20224:	andeq	r0, r2, r4, ror r3
   20228:	andeq	r0, r2, r4, ror r3
   2022c:	andeq	r0, r2, r4, ror r3
   20230:	andeq	r0, r2, r4, ror r3
   20234:	andeq	r0, r2, r4, ror r3
   20238:	andeq	r0, r2, r4, ror r3
   2023c:	andeq	r0, r2, r4, ror r3
   20240:	andeq	r0, r2, r4, ror r3
   20244:	andeq	r0, r2, r4, ror r3
   20248:	andeq	pc, r1, r8, lsr r9	; <UNPREDICTABLE>
   2024c:	sub	r2, r9, r3
   20250:	cmp	r2, #1
   20254:	movle	r2, r1
   20258:	ldrbgt	r2, [r3, #1]
   2025c:	subgt	r2, r2, #10
   20260:	clzgt	r2, r2
   20264:	lsrgt	r2, r2, #5
   20268:	add	r3, r3, r2
   2026c:	ldr	r2, [sl, #16]
   20270:	add	r3, r3, #1
   20274:	add	r2, r2, #1
   20278:	str	r3, [sl, #4]
   2027c:	str	r2, [sl, #16]
   20280:	cmp	r9, r3
   20284:	beq	20380 <flatcc_json_parser_union_type_vector@@Base+0xc98>
   20288:	ldrb	r2, [r3]
   2028c:	cmp	r2, #32
   20290:	bls	201dc <flatcc_json_parser_union_type_vector@@Base+0xaf4>
   20294:	mov	fp, r3
   20298:	cmp	r2, #93	; 0x5d
   2029c:	bne	1f96c <flatcc_json_parser_union_type_vector@@Base+0x284>
   202a0:	add	r8, fp, #1
   202a4:	sub	r3, r9, r8
   202a8:	cmp	r3, #1
   202ac:	ble	202c0 <flatcc_json_parser_union_type_vector@@Base+0xbd8>
   202b0:	ldrb	r3, [fp, #1]
   202b4:	cmp	r3, #32
   202b8:	bhi	1f7e0 <flatcc_json_parser_union_type_vector@@Base+0xf8>
   202bc:	beq	203ec <flatcc_json_parser_union_type_vector@@Base+0xd04>
   202c0:	mov	r1, #0
   202c4:	cmp	r9, r8
   202c8:	beq	1f7dc <flatcc_json_parser_union_type_vector@@Base+0xf4>
   202cc:	ldrb	r3, [r8]
   202d0:	cmp	r3, #32
   202d4:	bne	202f4 <flatcc_json_parser_union_type_vector@@Base+0xc0c>
   202d8:	add	r2, r8, #1
   202dc:	cmp	r2, r9
   202e0:	mov	r8, r2
   202e4:	beq	1f7e0 <flatcc_json_parser_union_type_vector@@Base+0xf8>
   202e8:	ldrb	r3, [r2], #1
   202ec:	cmp	r3, #32
   202f0:	beq	202dc <flatcc_json_parser_union_type_vector@@Base+0xbf4>
   202f4:	cmp	r3, #32
   202f8:	bhi	1f7e0 <flatcc_json_parser_union_type_vector@@Base+0xf8>
   202fc:	sub	r3, r3, #9
   20300:	cmp	r3, #23
   20304:	ldrls	pc, [pc, r3, lsl #2]
   20308:	b	1fbd4 <flatcc_json_parser_union_type_vector@@Base+0x4ec>
   2030c:	andeq	r0, r2, ip, asr r4
   20310:	andeq	r0, r2, r0, lsr r4
   20314:	ldrdeq	pc, [r1], -r4
   20318:	ldrdeq	pc, [r1], -r4
   2031c:	andeq	r0, r2, r0, lsl r4
   20320:	ldrdeq	pc, [r1], -r4
   20324:	ldrdeq	pc, [r1], -r4
   20328:	ldrdeq	pc, [r1], -r4
   2032c:	ldrdeq	pc, [r1], -r4
   20330:	ldrdeq	pc, [r1], -r4
   20334:	ldrdeq	pc, [r1], -r4
   20338:	ldrdeq	pc, [r1], -r4
   2033c:	ldrdeq	pc, [r1], -r4
   20340:	ldrdeq	pc, [r1], -r4
   20344:	ldrdeq	pc, [r1], -r4
   20348:	ldrdeq	pc, [r1], -r4
   2034c:	ldrdeq	pc, [r1], -r4
   20350:	ldrdeq	pc, [r1], -r4
   20354:	ldrdeq	pc, [r1], -r4
   20358:	ldrdeq	pc, [r1], -r4
   2035c:	ldrdeq	pc, [r1], -r4
   20360:	ldrdeq	pc, [r1], -r4
   20364:	ldrdeq	pc, [r1], -r4
   20368:	andeq	r0, r2, r4, asr #5
   2036c:	add	r3, r3, #1
   20370:	b	20280 <flatcc_json_parser_union_type_vector@@Base+0xb98>
   20374:	ldr	r2, [sl, #24]
   20378:	cmp	r2, #0
   2037c:	beq	20398 <flatcc_json_parser_union_type_vector@@Base+0xcb0>
   20380:	mov	fp, r9
   20384:	b	1f96c <flatcc_json_parser_union_type_vector@@Base+0x284>
   20388:	mov	fp, r3
   2038c:	cmp	r9, fp
   20390:	bne	20298 <flatcc_json_parser_union_type_vector@@Base+0xbb0>
   20394:	b	1f96c <flatcc_json_parser_union_type_vector@@Base+0x284>
   20398:	ldr	r2, [sl, #4]
   2039c:	str	r3, [sl, #36]	; 0x24
   203a0:	sub	r3, r3, r2
   203a4:	add	r3, r3, #1
   203a8:	mov	r2, #5
   203ac:	str	r3, [sl, #20]
   203b0:	str	r2, [sl, #24]
   203b4:	mov	fp, r9
   203b8:	b	1f96c <flatcc_json_parser_union_type_vector@@Base+0x284>
   203bc:	ldrb	r2, [fp, #2]
   203c0:	cmp	r2, #32
   203c4:	addhi	fp, fp, #2
   203c8:	bls	1f934 <flatcc_json_parser_union_type_vector@@Base+0x24c>
   203cc:	b	2038c <flatcc_json_parser_union_type_vector@@Base+0xca4>
   203d0:	mov	r3, r8
   203d4:	b	1ff20 <flatcc_json_parser_union_type_vector@@Base+0x838>
   203d8:	ldrb	r3, [fp, #2]
   203dc:	cmp	r3, #32
   203e0:	bls	20034 <flatcc_json_parser_union_type_vector@@Base+0x94c>
   203e4:	add	r8, fp, #2
   203e8:	b	1f7e0 <flatcc_json_parser_union_type_vector@@Base+0xf8>
   203ec:	ldrb	r3, [fp, #2]
   203f0:	cmp	r3, #32
   203f4:	bls	202c0 <flatcc_json_parser_union_type_vector@@Base+0xbd8>
   203f8:	b	203e4 <flatcc_json_parser_union_type_vector@@Base+0xcfc>
   203fc:	ldr	r3, [pc, #96]	; 20464 <flatcc_json_parser_union_type_vector@@Base+0xd7c>
   20400:	ldr	r2, [pc, #96]	; 20468 <flatcc_json_parser_union_type_vector@@Base+0xd80>
   20404:	ldr	r1, [pc, #96]	; 2046c <flatcc_json_parser_union_type_vector@@Base+0xd84>
   20408:	ldr	r0, [pc, #96]	; 20470 <flatcc_json_parser_union_type_vector@@Base+0xd88>
   2040c:	bl	124d8 <__assert_fail@plt>
   20410:	sub	r3, r9, r8
   20414:	cmp	r3, #1
   20418:	movle	r3, r1
   2041c:	ldrbgt	r3, [r8, #1]
   20420:	subgt	r3, r3, #10
   20424:	clzgt	r3, r3
   20428:	lsrgt	r3, r3, #5
   2042c:	add	r8, r8, r3
   20430:	ldr	r3, [sl, #16]
   20434:	add	r8, r8, #1
   20438:	add	r3, r3, #1
   2043c:	str	r8, [sl, #4]
   20440:	str	r3, [sl, #16]
   20444:	cmp	r9, r8
   20448:	beq	1f7dc <flatcc_json_parser_union_type_vector@@Base+0xf4>
   2044c:	ldrb	r3, [r8]
   20450:	cmp	r3, #32
   20454:	bls	202fc <flatcc_json_parser_union_type_vector@@Base+0xc14>
   20458:	b	1f7e0 <flatcc_json_parser_union_type_vector@@Base+0xf8>
   2045c:	add	r8, r8, #1
   20460:	b	20444 <flatcc_json_parser_union_type_vector@@Base+0xd5c>
   20464:	andeq	r2, r2, r0, lsl #2
   20468:	andeq	r0, r0, r2, ror #8
   2046c:	andeq	r2, r2, r0, lsl #5
   20470:	andeq	r2, r2, ip, asr #5

00020474 <flatcc_json_parser_table_as_root@@Base>:
   20474:	push	{r4, r5, r6, r7, r8, r9, lr}
   20478:	sub	sp, sp, #52	; 0x34
   2047c:	mov	r5, r2
   20480:	ldr	r8, [sp, #80]	; 0x50
   20484:	mov	r9, r0
   20488:	ands	r7, r8, #4
   2048c:	movne	r7, #2
   20490:	subs	r4, r1, #0
   20494:	addeq	r4, sp, #4
   20498:	mov	r2, #44	; 0x2c
   2049c:	mov	r1, #0
   204a0:	mov	r0, r4
   204a4:	add	r6, r5, r3
   204a8:	bl	124a8 <memset@plt>
   204ac:	mov	r2, #1
   204b0:	str	r2, [r4, #16]
   204b4:	str	r6, [r4, #32]
   204b8:	str	r9, [r4]
   204bc:	stmib	r4, {r5, r8}
   204c0:	str	r5, [r4, #28]
   204c4:	str	r5, [r4, #36]	; 0x24
   204c8:	mov	r3, r7
   204cc:	mov	r2, #0
   204d0:	ldr	r1, [sp, #84]	; 0x54
   204d4:	mov	r0, r9
   204d8:	bl	14c88 <flatcc_builder_start_buffer@@Base>
   204dc:	cmp	r0, #0
   204e0:	bne	20538 <flatcc_json_parser_table_as_root@@Base+0xc4>
   204e4:	mov	r2, r6
   204e8:	mov	r3, sp
   204ec:	mov	r1, r5
   204f0:	mov	r0, r4
   204f4:	ldr	ip, [sp, #88]	; 0x58
   204f8:	blx	ip
   204fc:	ldr	r6, [r4, #24]
   20500:	cmp	r6, #0
   20504:	beq	20514 <flatcc_json_parser_table_as_root@@Base+0xa0>
   20508:	mov	r0, r6
   2050c:	add	sp, sp, #52	; 0x34
   20510:	pop	{r4, r5, r6, r7, r8, r9, pc}
   20514:	mov	r0, r9
   20518:	ldr	r1, [sp]
   2051c:	bl	14e14 <flatcc_builder_end_buffer@@Base>
   20520:	cmp	r0, #0
   20524:	beq	20538 <flatcc_json_parser_table_as_root@@Base+0xc4>
   20528:	mov	r0, r6
   2052c:	str	r5, [r4, #40]	; 0x28
   20530:	add	sp, sp, #52	; 0x34
   20534:	pop	{r4, r5, r6, r7, r8, r9, pc}
   20538:	mvn	r6, #0
   2053c:	mov	r0, r6
   20540:	add	sp, sp, #52	; 0x34
   20544:	pop	{r4, r5, r6, r7, r8, r9, pc}

00020548 <flatcc_json_parser_struct_as_root@@Base>:
   20548:	push	{r4, r5, r6, r7, r8, r9, lr}
   2054c:	sub	sp, sp, #52	; 0x34
   20550:	mov	r5, r2
   20554:	ldr	r8, [sp, #80]	; 0x50
   20558:	mov	r9, r0
   2055c:	ands	r7, r8, #4
   20560:	movne	r7, #2
   20564:	subs	r4, r1, #0
   20568:	addeq	r4, sp, #4
   2056c:	mov	r2, #44	; 0x2c
   20570:	mov	r1, #0
   20574:	mov	r0, r4
   20578:	add	r6, r5, r3
   2057c:	bl	124a8 <memset@plt>
   20580:	mov	r2, #1
   20584:	str	r2, [r4, #16]
   20588:	str	r6, [r4, #32]
   2058c:	str	r9, [r4]
   20590:	stmib	r4, {r5, r8}
   20594:	str	r5, [r4, #28]
   20598:	str	r5, [r4, #36]	; 0x24
   2059c:	mov	r3, r7
   205a0:	mov	r2, #0
   205a4:	ldr	r1, [sp, #84]	; 0x54
   205a8:	mov	r0, r9
   205ac:	bl	14c88 <flatcc_builder_start_buffer@@Base>
   205b0:	cmp	r0, #0
   205b4:	bne	2060c <flatcc_json_parser_struct_as_root@@Base+0xc4>
   205b8:	mov	r2, r6
   205bc:	mov	r3, sp
   205c0:	mov	r1, r5
   205c4:	mov	r0, r4
   205c8:	ldr	ip, [sp, #88]	; 0x58
   205cc:	blx	ip
   205d0:	ldr	r6, [r4, #24]
   205d4:	cmp	r6, #0
   205d8:	beq	205e8 <flatcc_json_parser_struct_as_root@@Base+0xa0>
   205dc:	mov	r0, r6
   205e0:	add	sp, sp, #52	; 0x34
   205e4:	pop	{r4, r5, r6, r7, r8, r9, pc}
   205e8:	mov	r0, r9
   205ec:	ldr	r1, [sp]
   205f0:	bl	14e14 <flatcc_builder_end_buffer@@Base>
   205f4:	cmp	r0, #0
   205f8:	beq	2060c <flatcc_json_parser_struct_as_root@@Base+0xc4>
   205fc:	mov	r0, r6
   20600:	str	r5, [r4, #40]	; 0x28
   20604:	add	sp, sp, #52	; 0x34
   20608:	pop	{r4, r5, r6, r7, r8, r9, pc}
   2060c:	mvn	r6, #0
   20610:	mov	r0, r6
   20614:	add	sp, sp, #52	; 0x34
   20618:	pop	{r4, r5, r6, r7, r8, r9, pc}
   2061c:	eor	r1, r1, #-2147483648	; 0x80000000
   20620:	b	20628 <flatcc_json_parser_struct_as_root@@Base+0xe0>
   20624:	eor	r3, r3, #-2147483648	; 0x80000000
   20628:	push	{r4, r5, lr}
   2062c:	lsl	r4, r1, #1
   20630:	lsl	r5, r3, #1
   20634:	teq	r4, r5
   20638:	teqeq	r0, r2
   2063c:	orrsne	ip, r4, r0
   20640:	orrsne	ip, r5, r2
   20644:	mvnsne	ip, r4, asr #21
   20648:	mvnsne	ip, r5, asr #21
   2064c:	beq	20838 <flatcc_json_parser_struct_as_root@@Base+0x2f0>
   20650:	lsr	r4, r4, #21
   20654:	rsbs	r5, r4, r5, lsr #21
   20658:	rsblt	r5, r5, #0
   2065c:	ble	2067c <flatcc_json_parser_struct_as_root@@Base+0x134>
   20660:	add	r4, r4, r5
   20664:	eor	r2, r0, r2
   20668:	eor	r3, r1, r3
   2066c:	eor	r0, r2, r0
   20670:	eor	r1, r3, r1
   20674:	eor	r2, r0, r2
   20678:	eor	r3, r1, r3
   2067c:	cmp	r5, #54	; 0x36
   20680:	pophi	{r4, r5, pc}
   20684:	tst	r1, #-2147483648	; 0x80000000
   20688:	lsl	r1, r1, #12
   2068c:	mov	ip, #1048576	; 0x100000
   20690:	orr	r1, ip, r1, lsr #12
   20694:	beq	206a0 <flatcc_json_parser_struct_as_root@@Base+0x158>
   20698:	rsbs	r0, r0, #0
   2069c:	rsc	r1, r1, #0
   206a0:	tst	r3, #-2147483648	; 0x80000000
   206a4:	lsl	r3, r3, #12
   206a8:	orr	r3, ip, r3, lsr #12
   206ac:	beq	206b8 <flatcc_json_parser_struct_as_root@@Base+0x170>
   206b0:	rsbs	r2, r2, #0
   206b4:	rsc	r3, r3, #0
   206b8:	teq	r4, r5
   206bc:	beq	20820 <flatcc_json_parser_struct_as_root@@Base+0x2d8>
   206c0:	sub	r4, r4, #1
   206c4:	rsbs	lr, r5, #32
   206c8:	blt	206e4 <flatcc_json_parser_struct_as_root@@Base+0x19c>
   206cc:	lsl	ip, r2, lr
   206d0:	adds	r0, r0, r2, lsr r5
   206d4:	adc	r1, r1, #0
   206d8:	adds	r0, r0, r3, lsl lr
   206dc:	adcs	r1, r1, r3, asr r5
   206e0:	b	20700 <flatcc_json_parser_struct_as_root@@Base+0x1b8>
   206e4:	sub	r5, r5, #32
   206e8:	add	lr, lr, #32
   206ec:	cmp	r2, #1
   206f0:	lsl	ip, r3, lr
   206f4:	orrcs	ip, ip, #2
   206f8:	adds	r0, r0, r3, asr r5
   206fc:	adcs	r1, r1, r3, asr #31
   20700:	and	r5, r1, #-2147483648	; 0x80000000
   20704:	bpl	20714 <flatcc_json_parser_struct_as_root@@Base+0x1cc>
   20708:	rsbs	ip, ip, #0
   2070c:	rscs	r0, r0, #0
   20710:	rsc	r1, r1, #0
   20714:	cmp	r1, #1048576	; 0x100000
   20718:	bcc	20758 <flatcc_json_parser_struct_as_root@@Base+0x210>
   2071c:	cmp	r1, #2097152	; 0x200000
   20720:	bcc	20740 <flatcc_json_parser_struct_as_root@@Base+0x1f8>
   20724:	lsrs	r1, r1, #1
   20728:	rrxs	r0, r0
   2072c:	rrx	ip, ip
   20730:	add	r4, r4, #1
   20734:	lsl	r2, r4, #21
   20738:	cmn	r2, #4194304	; 0x400000
   2073c:	bcs	20898 <flatcc_json_parser_struct_as_root@@Base+0x350>
   20740:	cmp	ip, #-2147483648	; 0x80000000
   20744:	lsrseq	ip, r0, #1
   20748:	adcs	r0, r0, #0
   2074c:	adc	r1, r1, r4, lsl #20
   20750:	orr	r1, r1, r5
   20754:	pop	{r4, r5, pc}
   20758:	lsls	ip, ip, #1
   2075c:	adcs	r0, r0, r0
   20760:	adc	r1, r1, r1
   20764:	tst	r1, #1048576	; 0x100000
   20768:	sub	r4, r4, #1
   2076c:	bne	20740 <flatcc_json_parser_struct_as_root@@Base+0x1f8>
   20770:	teq	r1, #0
   20774:	moveq	r1, r0
   20778:	moveq	r0, #0
   2077c:	clz	r3, r1
   20780:	addeq	r3, r3, #32
   20784:	sub	r3, r3, #11
   20788:	subs	r2, r3, #32
   2078c:	bge	207b0 <flatcc_json_parser_struct_as_root@@Base+0x268>
   20790:	adds	r2, r2, #12
   20794:	ble	207ac <flatcc_json_parser_struct_as_root@@Base+0x264>
   20798:	add	ip, r2, #20
   2079c:	rsb	r2, r2, #12
   207a0:	lsl	r0, r1, ip
   207a4:	lsr	r1, r1, r2
   207a8:	b	207c0 <flatcc_json_parser_struct_as_root@@Base+0x278>
   207ac:	add	r2, r2, #20
   207b0:	rsble	ip, r2, #32
   207b4:	lsl	r1, r1, r2
   207b8:	orrle	r1, r1, r0, lsr ip
   207bc:	lslle	r0, r0, r2
   207c0:	subs	r4, r4, r3
   207c4:	addge	r1, r1, r4, lsl #20
   207c8:	orrge	r1, r1, r5
   207cc:	popge	{r4, r5, pc}
   207d0:	mvn	r4, r4
   207d4:	subs	r4, r4, #31
   207d8:	bge	20814 <flatcc_json_parser_struct_as_root@@Base+0x2cc>
   207dc:	adds	r4, r4, #12
   207e0:	bgt	207fc <flatcc_json_parser_struct_as_root@@Base+0x2b4>
   207e4:	add	r4, r4, #20
   207e8:	rsb	r2, r4, #32
   207ec:	lsr	r0, r0, r4
   207f0:	orr	r0, r0, r1, lsl r2
   207f4:	orr	r1, r5, r1, lsr r4
   207f8:	pop	{r4, r5, pc}
   207fc:	rsb	r4, r4, #12
   20800:	rsb	r2, r4, #32
   20804:	lsr	r0, r0, r2
   20808:	orr	r0, r0, r1, lsl r4
   2080c:	mov	r1, r5
   20810:	pop	{r4, r5, pc}
   20814:	lsr	r0, r1, r4
   20818:	mov	r1, r5
   2081c:	pop	{r4, r5, pc}
   20820:	teq	r4, #0
   20824:	eor	r3, r3, #1048576	; 0x100000
   20828:	eoreq	r1, r1, #1048576	; 0x100000
   2082c:	addeq	r4, r4, #1
   20830:	subne	r5, r5, #1
   20834:	b	206c0 <flatcc_json_parser_struct_as_root@@Base+0x178>
   20838:	mvns	ip, r4, asr #21
   2083c:	mvnsne	ip, r5, asr #21
   20840:	beq	208a8 <flatcc_json_parser_struct_as_root@@Base+0x360>
   20844:	teq	r4, r5
   20848:	teqeq	r0, r2
   2084c:	beq	20860 <flatcc_json_parser_struct_as_root@@Base+0x318>
   20850:	orrs	ip, r4, r0
   20854:	moveq	r1, r3
   20858:	moveq	r0, r2
   2085c:	pop	{r4, r5, pc}
   20860:	teq	r1, r3
   20864:	movne	r1, #0
   20868:	movne	r0, #0
   2086c:	popne	{r4, r5, pc}
   20870:	lsrs	ip, r4, #21
   20874:	bne	20888 <flatcc_json_parser_struct_as_root@@Base+0x340>
   20878:	lsls	r0, r0, #1
   2087c:	adcs	r1, r1, r1
   20880:	orrcs	r1, r1, #-2147483648	; 0x80000000
   20884:	pop	{r4, r5, pc}
   20888:	adds	r4, r4, #4194304	; 0x400000
   2088c:	addcc	r1, r1, #1048576	; 0x100000
   20890:	popcc	{r4, r5, pc}
   20894:	and	r5, r1, #-2147483648	; 0x80000000
   20898:	orr	r1, r5, #2130706432	; 0x7f000000
   2089c:	orr	r1, r1, #15728640	; 0xf00000
   208a0:	mov	r0, #0
   208a4:	pop	{r4, r5, pc}
   208a8:	mvns	ip, r4, asr #21
   208ac:	movne	r1, r3
   208b0:	movne	r0, r2
   208b4:	mvnseq	ip, r5, asr #21
   208b8:	movne	r3, r1
   208bc:	movne	r2, r0
   208c0:	orrs	r4, r0, r1, lsl #12
   208c4:	orrseq	r5, r2, r3, lsl #12
   208c8:	teqeq	r1, r3
   208cc:	orrne	r1, r1, #524288	; 0x80000
   208d0:	pop	{r4, r5, pc}
   208d4:	teq	r0, #0
   208d8:	moveq	r1, #0
   208dc:	bxeq	lr
   208e0:	push	{r4, r5, lr}
   208e4:	mov	r4, #1024	; 0x400
   208e8:	add	r4, r4, #50	; 0x32
   208ec:	mov	r5, #0
   208f0:	mov	r1, #0
   208f4:	b	20770 <flatcc_json_parser_struct_as_root@@Base+0x228>
   208f8:	teq	r0, #0
   208fc:	moveq	r1, #0
   20900:	bxeq	lr
   20904:	push	{r4, r5, lr}
   20908:	mov	r4, #1024	; 0x400
   2090c:	add	r4, r4, #50	; 0x32
   20910:	ands	r5, r0, #-2147483648	; 0x80000000
   20914:	rsbmi	r0, r0, #0
   20918:	mov	r1, #0
   2091c:	b	20770 <flatcc_json_parser_struct_as_root@@Base+0x228>
   20920:	lsls	r2, r0, #1
   20924:	asr	r1, r2, #3
   20928:	rrx	r1, r1
   2092c:	lsl	r0, r2, #28
   20930:	andsne	r3, r2, #-16777216	; 0xff000000
   20934:	teqne	r3, #-16777216	; 0xff000000
   20938:	eorne	r1, r1, #939524096	; 0x38000000
   2093c:	bxne	lr
   20940:	teq	r2, #0
   20944:	teqne	r3, #-16777216	; 0xff000000
   20948:	bxeq	lr
   2094c:	push	{r4, r5, lr}
   20950:	mov	r4, #896	; 0x380
   20954:	and	r5, r1, #-2147483648	; 0x80000000
   20958:	bic	r1, r1, #-2147483648	; 0x80000000
   2095c:	b	20770 <flatcc_json_parser_struct_as_root@@Base+0x228>
   20960:	orrs	r2, r0, r1
   20964:	bxeq	lr
   20968:	push	{r4, r5, lr}
   2096c:	mov	r5, #0
   20970:	b	20990 <flatcc_json_parser_struct_as_root@@Base+0x448>
   20974:	orrs	r2, r0, r1
   20978:	bxeq	lr
   2097c:	push	{r4, r5, lr}
   20980:	ands	r5, r1, #-2147483648	; 0x80000000
   20984:	bpl	20990 <flatcc_json_parser_struct_as_root@@Base+0x448>
   20988:	rsbs	r0, r0, #0
   2098c:	rsc	r1, r1, #0
   20990:	mov	r4, #1024	; 0x400
   20994:	add	r4, r4, #50	; 0x32
   20998:	lsrs	ip, r1, #22
   2099c:	beq	20714 <flatcc_json_parser_struct_as_root@@Base+0x1cc>
   209a0:	mov	r2, #3
   209a4:	lsrs	ip, ip, #3
   209a8:	addne	r2, r2, #3
   209ac:	lsrs	ip, ip, #3
   209b0:	addne	r2, r2, #3
   209b4:	add	r2, r2, ip, lsr #3
   209b8:	rsb	r3, r2, #32
   209bc:	lsl	ip, r0, r3
   209c0:	lsr	r0, r0, r2
   209c4:	orr	r0, r0, r1, lsl r3
   209c8:	lsr	r1, r1, r2
   209cc:	add	r4, r4, r2
   209d0:	b	20714 <flatcc_json_parser_struct_as_root@@Base+0x1cc>

000209d4 <__libc_csu_init@@Base>:
   209d4:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   209d8:	mov	r7, r0
   209dc:	ldr	r6, [pc, #72]	; 20a2c <__libc_csu_init@@Base+0x58>
   209e0:	ldr	r5, [pc, #72]	; 20a30 <__libc_csu_init@@Base+0x5c>
   209e4:	add	r6, pc, r6
   209e8:	add	r5, pc, r5
   209ec:	sub	r6, r6, r5
   209f0:	mov	r8, r1
   209f4:	mov	r9, r2
   209f8:	bl	12404 <free@plt-0x20>
   209fc:	asrs	r6, r6, #2
   20a00:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   20a04:	mov	r4, #0
   20a08:	add	r4, r4, #1
   20a0c:	ldr	r3, [r5], #4
   20a10:	mov	r2, r9
   20a14:	mov	r1, r8
   20a18:	mov	r0, r7
   20a1c:	blx	r3
   20a20:	cmp	r6, r4
   20a24:	bne	20a08 <__libc_csu_init@@Base+0x34>
   20a28:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   20a2c:	andeq	r2, r1, r4, lsr #10
   20a30:	andeq	r2, r1, ip, lsl r5

00020a34 <__libc_csu_fini@@Base>:
   20a34:	bx	lr

Disassembly of section .fini:

00020a38 <.fini>:
   20a38:	push	{r3, lr}
   20a3c:	pop	{r3, pc}
