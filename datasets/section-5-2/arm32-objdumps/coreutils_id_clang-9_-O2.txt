
../repos/coreutils/src/id:     file format elf32-littlearm


Disassembly of section .init:

00011080 <.init>:
   11080:	push	{r3, lr}
   11084:	bl	113b8 <__assert_fail@plt+0x48>
   11088:	pop	{r3, pc}

Disassembly of section .plt:

0001108c <calloc@plt-0x14>:
   1108c:	push	{lr}		; (str lr, [sp, #-4]!)
   11090:	ldr	lr, [pc, #4]	; 1109c <calloc@plt-0x4>
   11094:	add	lr, pc, lr
   11098:	ldr	pc, [lr, #8]!
   1109c:	andeq	r6, r1, r4, ror #30

000110a0 <calloc@plt>:
   110a0:	add	ip, pc, #0, 12
   110a4:	add	ip, ip, #90112	; 0x16000
   110a8:	ldr	pc, [ip, #3940]!	; 0xf64

000110ac <endgrent@plt>:
   110ac:	add	ip, pc, #0, 12
   110b0:	add	ip, ip, #90112	; 0x16000
   110b4:	ldr	pc, [ip, #3932]!	; 0xf5c

000110b8 <fputs_unlocked@plt>:
   110b8:	add	ip, pc, #0, 12
   110bc:	add	ip, ip, #90112	; 0x16000
   110c0:	ldr	pc, [ip, #3924]!	; 0xf54

000110c4 <raise@plt>:
   110c4:	add	ip, pc, #0, 12
   110c8:	add	ip, ip, #90112	; 0x16000
   110cc:	ldr	pc, [ip, #3916]!	; 0xf4c

000110d0 <getpwnam@plt>:
   110d0:	add	ip, pc, #0, 12
   110d4:	add	ip, ip, #90112	; 0x16000
   110d8:	ldr	pc, [ip, #3908]!	; 0xf44

000110dc <is_selinux_enabled@plt>:
   110dc:	add	ip, pc, #0, 12
   110e0:	add	ip, ip, #90112	; 0x16000
   110e4:	ldr	pc, [ip, #3900]!	; 0xf3c

000110e8 <strcmp@plt>:
   110e8:	add	ip, pc, #0, 12
   110ec:	add	ip, ip, #90112	; 0x16000
   110f0:	ldr	pc, [ip, #3892]!	; 0xf34

000110f4 <getpwuid@plt>:
   110f4:	add	ip, pc, #0, 12
   110f8:	add	ip, ip, #90112	; 0x16000
   110fc:	ldr	pc, [ip, #3884]!	; 0xf2c

00011100 <fflush@plt>:
   11100:	add	ip, pc, #0, 12
   11104:	add	ip, ip, #90112	; 0x16000
   11108:	ldr	pc, [ip, #3876]!	; 0xf24

0001110c <getuid@plt>:
   1110c:	add	ip, pc, #0, 12
   11110:	add	ip, ip, #90112	; 0x16000
   11114:	ldr	pc, [ip, #3868]!	; 0xf1c

00011118 <free@plt>:
   11118:	add	ip, pc, #0, 12
   1111c:	add	ip, ip, #90112	; 0x16000
   11120:	ldr	pc, [ip, #3860]!	; 0xf14

00011124 <_exit@plt>:
   11124:	add	ip, pc, #0, 12
   11128:	add	ip, ip, #90112	; 0x16000
   1112c:	ldr	pc, [ip, #3852]!	; 0xf0c

00011130 <memcpy@plt>:
   11130:	add	ip, pc, #0, 12
   11134:	add	ip, ip, #90112	; 0x16000
   11138:	ldr	pc, [ip, #3844]!	; 0xf04

0001113c <mbsinit@plt>:
   1113c:	add	ip, pc, #0, 12
   11140:	add	ip, ip, #90112	; 0x16000
   11144:	ldr	pc, [ip, #3836]!	; 0xefc

00011148 <dcgettext@plt>:
   11148:	add	ip, pc, #0, 12
   1114c:	add	ip, ip, #90112	; 0x16000
   11150:	ldr	pc, [ip, #3828]!	; 0xef4

00011154 <realloc@plt>:
   11154:	add	ip, pc, #0, 12
   11158:	add	ip, ip, #90112	; 0x16000
   1115c:	ldr	pc, [ip, #3820]!	; 0xeec

00011160 <textdomain@plt>:
   11160:	add	ip, pc, #0, 12
   11164:	add	ip, ip, #90112	; 0x16000
   11168:	ldr	pc, [ip, #3812]!	; 0xee4

0001116c <geteuid@plt>:
   1116c:	add	ip, pc, #0, 12
   11170:	add	ip, ip, #90112	; 0x16000
   11174:	ldr	pc, [ip, #3804]!	; 0xedc

00011178 <iswprint@plt>:
   11178:	add	ip, pc, #0, 12
   1117c:	add	ip, ip, #90112	; 0x16000
   11180:	ldr	pc, [ip, #3796]!	; 0xed4

00011184 <getegid@plt>:
   11184:	add	ip, pc, #0, 12
   11188:	add	ip, ip, #90112	; 0x16000
   1118c:	ldr	pc, [ip, #3788]!	; 0xecc

00011190 <fwrite@plt>:
   11190:	add	ip, pc, #0, 12
   11194:	add	ip, ip, #90112	; 0x16000
   11198:	ldr	pc, [ip, #3780]!	; 0xec4

0001119c <lseek64@plt>:
   1119c:	add	ip, pc, #0, 12
   111a0:	add	ip, ip, #90112	; 0x16000
   111a4:	ldr	pc, [ip, #3772]!	; 0xebc

000111a8 <__ctype_get_mb_cur_max@plt>:
   111a8:	add	ip, pc, #0, 12
   111ac:	add	ip, ip, #90112	; 0x16000
   111b0:	ldr	pc, [ip, #3764]!	; 0xeb4

000111b4 <getcon@plt>:
   111b4:	add	ip, pc, #0, 12
   111b8:	add	ip, ip, #90112	; 0x16000
   111bc:	ldr	pc, [ip, #3756]!	; 0xeac

000111c0 <__fpending@plt>:
   111c0:	add	ip, pc, #0, 12
   111c4:	add	ip, ip, #90112	; 0x16000
   111c8:	ldr	pc, [ip, #3748]!	; 0xea4

000111cc <mbrtowc@plt>:
   111cc:	add	ip, pc, #0, 12
   111d0:	add	ip, ip, #90112	; 0x16000
   111d4:	ldr	pc, [ip, #3740]!	; 0xe9c

000111d8 <error@plt>:
   111d8:	add	ip, pc, #0, 12
   111dc:	add	ip, ip, #90112	; 0x16000
   111e0:	ldr	pc, [ip, #3732]!	; 0xe94

000111e4 <getenv@plt>:
   111e4:	add	ip, pc, #0, 12
   111e8:	add	ip, ip, #90112	; 0x16000
   111ec:	ldr	pc, [ip, #3724]!	; 0xe8c

000111f0 <malloc@plt>:
   111f0:	add	ip, pc, #0, 12
   111f4:	add	ip, ip, #90112	; 0x16000
   111f8:	ldr	pc, [ip, #3716]!	; 0xe84

000111fc <__libc_start_main@plt>:
   111fc:	add	ip, pc, #0, 12
   11200:	add	ip, ip, #90112	; 0x16000
   11204:	ldr	pc, [ip, #3708]!	; 0xe7c

00011208 <__freading@plt>:
   11208:	add	ip, pc, #0, 12
   1120c:	add	ip, ip, #90112	; 0x16000
   11210:	ldr	pc, [ip, #3700]!	; 0xe74

00011214 <__gmon_start__@plt>:
   11214:	add	ip, pc, #0, 12
   11218:	add	ip, ip, #90112	; 0x16000
   1121c:	ldr	pc, [ip, #3692]!	; 0xe6c

00011220 <getopt_long@plt>:
   11220:	add	ip, pc, #0, 12
   11224:	add	ip, ip, #90112	; 0x16000
   11228:	ldr	pc, [ip, #3684]!	; 0xe64

0001122c <__ctype_b_loc@plt>:
   1122c:	add	ip, pc, #0, 12
   11230:	add	ip, ip, #90112	; 0x16000
   11234:	ldr	pc, [ip, #3676]!	; 0xe5c

00011238 <exit@plt>:
   11238:	add	ip, pc, #0, 12
   1123c:	add	ip, ip, #90112	; 0x16000
   11240:	ldr	pc, [ip, #3668]!	; 0xe54

00011244 <bcmp@plt>:
   11244:	add	ip, pc, #0, 12
   11248:	add	ip, ip, #90112	; 0x16000
   1124c:	ldr	pc, [ip, #3660]!	; 0xe4c

00011250 <strtoul@plt>:
   11250:	add	ip, pc, #0, 12
   11254:	add	ip, ip, #90112	; 0x16000
   11258:	ldr	pc, [ip, #3652]!	; 0xe44

0001125c <strlen@plt>:
   1125c:	add	ip, pc, #0, 12
   11260:	add	ip, ip, #90112	; 0x16000
   11264:	ldr	pc, [ip, #3644]!	; 0xe3c

00011268 <strchr@plt>:
   11268:	add	ip, pc, #0, 12
   1126c:	add	ip, ip, #90112	; 0x16000
   11270:	ldr	pc, [ip, #3636]!	; 0xe34

00011274 <__errno_location@plt>:
   11274:	add	ip, pc, #0, 12
   11278:	add	ip, ip, #90112	; 0x16000
   1127c:	ldr	pc, [ip, #3628]!	; 0xe2c

00011280 <__cxa_atexit@plt>:
   11280:	add	ip, pc, #0, 12
   11284:	add	ip, ip, #90112	; 0x16000
   11288:	ldr	pc, [ip, #3620]!	; 0xe24

0001128c <getgid@plt>:
   1128c:	add	ip, pc, #0, 12
   11290:	add	ip, ip, #90112	; 0x16000
   11294:	ldr	pc, [ip, #3612]!	; 0xe1c

00011298 <getgrouplist@plt>:
   11298:	add	ip, pc, #0, 12
   1129c:	add	ip, ip, #90112	; 0x16000
   112a0:	ldr	pc, [ip, #3604]!	; 0xe14

000112a4 <memset@plt>:
   112a4:	add	ip, pc, #0, 12
   112a8:	add	ip, ip, #90112	; 0x16000
   112ac:	ldr	pc, [ip, #3596]!	; 0xe0c

000112b0 <__printf_chk@plt>:
   112b0:	add	ip, pc, #0, 12
   112b4:	add	ip, ip, #90112	; 0x16000
   112b8:	ldr	pc, [ip, #3588]!	; 0xe04

000112bc <fileno@plt>:
   112bc:	add	ip, pc, #0, 12
   112c0:	add	ip, ip, #90112	; 0x16000
   112c4:	ldr	pc, [ip, #3580]!	; 0xdfc

000112c8 <__fprintf_chk@plt>:
   112c8:	add	ip, pc, #0, 12
   112cc:	add	ip, ip, #90112	; 0x16000
   112d0:	ldr	pc, [ip, #3572]!	; 0xdf4

000112d4 <fclose@plt>:
   112d4:	add	ip, pc, #0, 12
   112d8:	add	ip, ip, #90112	; 0x16000
   112dc:	ldr	pc, [ip, #3564]!	; 0xdec

000112e0 <fseeko64@plt>:
   112e0:	add	ip, pc, #0, 12
   112e4:	add	ip, ip, #90112	; 0x16000
   112e8:	ldr	pc, [ip, #3556]!	; 0xde4

000112ec <__overflow@plt>:
   112ec:	add	ip, pc, #0, 12
   112f0:	add	ip, ip, #90112	; 0x16000
   112f4:	ldr	pc, [ip, #3548]!	; 0xddc

000112f8 <setlocale@plt>:
   112f8:	add	ip, pc, #0, 12
   112fc:	add	ip, ip, #90112	; 0x16000
   11300:	ldr	pc, [ip, #3540]!	; 0xdd4

00011304 <endpwent@plt>:
   11304:	add	ip, pc, #0, 12
   11308:	add	ip, ip, #90112	; 0x16000
   1130c:	ldr	pc, [ip, #3532]!	; 0xdcc

00011310 <strrchr@plt>:
   11310:	add	ip, pc, #0, 12
   11314:	add	ip, ip, #90112	; 0x16000
   11318:	ldr	pc, [ip, #3524]!	; 0xdc4

0001131c <nl_langinfo@plt>:
   1131c:	add	ip, pc, #0, 12
   11320:	add	ip, ip, #90112	; 0x16000
   11324:	ldr	pc, [ip, #3516]!	; 0xdbc

00011328 <getgroups@plt>:
   11328:	add	ip, pc, #0, 12
   1132c:	add	ip, ip, #90112	; 0x16000
   11330:	ldr	pc, [ip, #3508]!	; 0xdb4

00011334 <bindtextdomain@plt>:
   11334:	add	ip, pc, #0, 12
   11338:	add	ip, ip, #90112	; 0x16000
   1133c:	ldr	pc, [ip, #3500]!	; 0xdac

00011340 <strncmp@plt>:
   11340:	add	ip, pc, #0, 12
   11344:	add	ip, ip, #90112	; 0x16000
   11348:	ldr	pc, [ip, #3492]!	; 0xda4

0001134c <abort@plt>:
   1134c:	add	ip, pc, #0, 12
   11350:	add	ip, ip, #90112	; 0x16000
   11354:	ldr	pc, [ip, #3484]!	; 0xd9c

00011358 <getgrgid@plt>:
   11358:	add	ip, pc, #0, 12
   1135c:	add	ip, ip, #90112	; 0x16000
   11360:	ldr	pc, [ip, #3476]!	; 0xd94

00011364 <getgrnam@plt>:
   11364:	add	ip, pc, #0, 12
   11368:	add	ip, ip, #90112	; 0x16000
   1136c:	ldr	pc, [ip, #3468]!	; 0xd8c

00011370 <__assert_fail@plt>:
   11370:	add	ip, pc, #0, 12
   11374:	add	ip, ip, #90112	; 0x16000
   11378:	ldr	pc, [ip, #3460]!	; 0xd84

Disassembly of section .text:

0001137c <.text>:
   1137c:	mov	fp, #0
   11380:	mov	lr, #0
   11384:	pop	{r1}		; (ldr r1, [sp], #4)
   11388:	mov	r2, sp
   1138c:	push	{r2}		; (str r2, [sp, #-4]!)
   11390:	push	{r0}		; (str r0, [sp, #-4]!)
   11394:	ldr	ip, [pc, #16]	; 113ac <__assert_fail@plt+0x3c>
   11398:	push	{ip}		; (str ip, [sp, #-4]!)
   1139c:	ldr	r0, [pc, #12]	; 113b0 <__assert_fail@plt+0x40>
   113a0:	ldr	r3, [pc, #12]	; 113b4 <__assert_fail@plt+0x44>
   113a4:	bl	111fc <__libc_start_main@plt>
   113a8:	bl	1134c <abort@plt>
   113ac:	andeq	r6, r1, r8, asr #16
   113b0:	andeq	r1, r1, r8, ror #13
   113b4:	andeq	r6, r1, r8, ror #15
   113b8:	ldr	r3, [pc, #20]	; 113d4 <__assert_fail@plt+0x64>
   113bc:	ldr	r2, [pc, #20]	; 113d8 <__assert_fail@plt+0x68>
   113c0:	add	r3, pc, r3
   113c4:	ldr	r2, [r3, r2]
   113c8:	cmp	r2, #0
   113cc:	bxeq	lr
   113d0:	b	11214 <__gmon_start__@plt>
   113d4:	andeq	r6, r1, r8, lsr ip
   113d8:	andeq	r0, r0, r0, lsl #2
   113dc:	ldr	r0, [pc, #24]	; 113fc <__assert_fail@plt+0x8c>
   113e0:	ldr	r3, [pc, #24]	; 11400 <__assert_fail@plt+0x90>
   113e4:	cmp	r3, r0
   113e8:	bxeq	lr
   113ec:	ldr	r3, [pc, #16]	; 11404 <__assert_fail@plt+0x94>
   113f0:	cmp	r3, #0
   113f4:	bxeq	lr
   113f8:	bx	r3
   113fc:	andeq	r8, r2, r0, ror #2
   11400:	andeq	r8, r2, r0, ror #2
   11404:	andeq	r0, r0, r0
   11408:	ldr	r0, [pc, #36]	; 11434 <__assert_fail@plt+0xc4>
   1140c:	ldr	r1, [pc, #36]	; 11438 <__assert_fail@plt+0xc8>
   11410:	sub	r1, r1, r0
   11414:	asr	r1, r1, #2
   11418:	add	r1, r1, r1, lsr #31
   1141c:	asrs	r1, r1, #1
   11420:	bxeq	lr
   11424:	ldr	r3, [pc, #16]	; 1143c <__assert_fail@plt+0xcc>
   11428:	cmp	r3, #0
   1142c:	bxeq	lr
   11430:	bx	r3
   11434:	andeq	r8, r2, r0, ror #2
   11438:	andeq	r8, r2, r0, ror #2
   1143c:	andeq	r0, r0, r0
   11440:	push	{r4, lr}
   11444:	ldr	r4, [pc, #24]	; 11464 <__assert_fail@plt+0xf4>
   11448:	ldrb	r3, [r4]
   1144c:	cmp	r3, #0
   11450:	popne	{r4, pc}
   11454:	bl	113dc <__assert_fail@plt+0x6c>
   11458:	mov	r3, #1
   1145c:	strb	r3, [r4]
   11460:	pop	{r4, pc}
   11464:	andeq	r8, r2, r8, ror r1
   11468:	b	11408 <__assert_fail@plt+0x98>
   1146c:	push	{fp, lr}
   11470:	mov	fp, sp
   11474:	sub	sp, sp, #56	; 0x38
   11478:	mov	r4, r0
   1147c:	cmp	r0, #0
   11480:	bne	116a4 <__assert_fail@plt+0x334>
   11484:	movw	r1, #26779	; 0x689b
   11488:	mov	r0, #0
   1148c:	mov	r2, #5
   11490:	movt	r1, #1
   11494:	bl	11148 <dcgettext@plt>
   11498:	mov	r1, r0
   1149c:	movw	r0, #33252	; 0x81e4
   114a0:	movt	r0, #2
   114a4:	ldr	r2, [r0]
   114a8:	mov	r0, #1
   114ac:	bl	112b0 <__printf_chk@plt>
   114b0:	movw	r1, #26812	; 0x68bc
   114b4:	mov	r0, #0
   114b8:	mov	r2, #5
   114bc:	movt	r1, #1
   114c0:	bl	11148 <dcgettext@plt>
   114c4:	movw	r7, #33140	; 0x8174
   114c8:	movt	r7, #2
   114cc:	ldr	r1, [r7]
   114d0:	bl	110b8 <fputs_unlocked@plt>
   114d4:	movw	r1, #26920	; 0x6928
   114d8:	mov	r0, #0
   114dc:	mov	r2, #5
   114e0:	movt	r1, #1
   114e4:	bl	11148 <dcgettext@plt>
   114e8:	ldr	r1, [r7]
   114ec:	bl	110b8 <fputs_unlocked@plt>
   114f0:	movw	r1, #27441	; 0x6b31
   114f4:	mov	r0, #0
   114f8:	mov	r2, #5
   114fc:	movt	r1, #1
   11500:	bl	11148 <dcgettext@plt>
   11504:	ldr	r1, [r7]
   11508:	bl	110b8 <fputs_unlocked@plt>
   1150c:	movw	r1, #27486	; 0x6b5e
   11510:	mov	r0, #0
   11514:	mov	r2, #5
   11518:	movt	r1, #1
   1151c:	bl	11148 <dcgettext@plt>
   11520:	ldr	r1, [r7]
   11524:	bl	110b8 <fputs_unlocked@plt>
   11528:	movw	r1, #27540	; 0x6b94
   1152c:	mov	r0, #0
   11530:	mov	r2, #5
   11534:	movt	r1, #1
   11538:	bl	11148 <dcgettext@plt>
   1153c:	ldr	r1, [r7]
   11540:	bl	110b8 <fputs_unlocked@plt>
   11544:	movw	r0, #28760	; 0x7058
   11548:	mov	r2, #48	; 0x30
   1154c:	mov	r6, sp
   11550:	movw	r5, #27611	; 0x6bdb
   11554:	movt	r0, #1
   11558:	movt	r5, #1
   1155c:	add	r1, r0, #32
   11560:	add	r3, r0, #16
   11564:	vld1.64	{d18-d19}, [r0], r2
   11568:	vld1.64	{d16-d17}, [r1]
   1156c:	vld1.64	{d20-d21}, [r3]
   11570:	vldr	d22, [r0]
   11574:	add	r1, r6, #32
   11578:	add	r0, r6, #16
   1157c:	vst1.64	{d16-d17}, [r1]
   11580:	movw	r1, #28090	; 0x6dba
   11584:	vst1.64	{d20-d21}, [r0]
   11588:	mov	r0, r6
   1158c:	movt	r1, #1
   11590:	vst1.64	{d18-d19}, [r0], r2
   11594:	vstr	d22, [r0]
   11598:	mov	r0, r5
   1159c:	bl	110e8 <strcmp@plt>
   115a0:	cmp	r0, #0
   115a4:	ldrne	r1, [r6, #8]!
   115a8:	cmpne	r1, #0
   115ac:	bne	11598 <__assert_fail@plt+0x228>
   115b0:	movw	r1, #28185	; 0x6e19
   115b4:	ldr	r6, [r6, #4]
   115b8:	mov	r0, #0
   115bc:	mov	r2, #5
   115c0:	movt	r1, #1
   115c4:	bl	11148 <dcgettext@plt>
   115c8:	movw	r2, #27702	; 0x6c36
   115cc:	movw	r3, #28208	; 0x6e30
   115d0:	mov	r1, r0
   115d4:	mov	r0, #1
   115d8:	movt	r2, #1
   115dc:	movt	r3, #1
   115e0:	bl	112b0 <__printf_chk@plt>
   115e4:	cmp	r6, #0
   115e8:	mov	r0, #5
   115ec:	mov	r1, #0
   115f0:	moveq	r6, r5
   115f4:	bl	112f8 <setlocale@plt>
   115f8:	cmp	r0, #0
   115fc:	beq	11634 <__assert_fail@plt+0x2c4>
   11600:	movw	r1, #28248	; 0x6e58
   11604:	mov	r2, #3
   11608:	movt	r1, #1
   1160c:	bl	11340 <strncmp@plt>
   11610:	cmp	r0, #0
   11614:	beq	11634 <__assert_fail@plt+0x2c4>
   11618:	movw	r1, #28252	; 0x6e5c
   1161c:	mov	r0, #0
   11620:	mov	r2, #5
   11624:	movt	r1, #1
   11628:	bl	11148 <dcgettext@plt>
   1162c:	ldr	r1, [r7]
   11630:	bl	110b8 <fputs_unlocked@plt>
   11634:	movw	r1, #28323	; 0x6ea3
   11638:	mov	r0, #0
   1163c:	mov	r2, #5
   11640:	movt	r1, #1
   11644:	bl	11148 <dcgettext@plt>
   11648:	movw	r2, #28208	; 0x6e30
   1164c:	mov	r1, r0
   11650:	mov	r0, #1
   11654:	mov	r3, r5
   11658:	movt	r2, #1
   1165c:	bl	112b0 <__printf_chk@plt>
   11660:	movw	r1, #28350	; 0x6ebe
   11664:	mov	r0, #0
   11668:	mov	r2, #5
   1166c:	movt	r1, #1
   11670:	bl	11148 <dcgettext@plt>
   11674:	mov	r1, r0
   11678:	movw	r0, #28118	; 0x6dd6
   1167c:	movw	r3, #26919	; 0x6927
   11680:	cmp	r6, r5
   11684:	mov	r2, r6
   11688:	movt	r0, #1
   1168c:	movt	r3, #1
   11690:	moveq	r3, r0
   11694:	mov	r0, #1
   11698:	bl	112b0 <__printf_chk@plt>
   1169c:	mov	r0, r4
   116a0:	bl	11238 <exit@plt>
   116a4:	movw	r0, #33136	; 0x8170
   116a8:	movw	r1, #26740	; 0x6874
   116ac:	mov	r2, #5
   116b0:	movt	r0, #2
   116b4:	movt	r1, #1
   116b8:	ldr	r5, [r0]
   116bc:	mov	r0, #0
   116c0:	bl	11148 <dcgettext@plt>
   116c4:	mov	r2, r0
   116c8:	movw	r0, #33252	; 0x81e4
   116cc:	mov	r1, #1
   116d0:	movt	r0, #2
   116d4:	ldr	r3, [r0]
   116d8:	mov	r0, r5
   116dc:	bl	112c8 <__fprintf_chk@plt>
   116e0:	mov	r0, r4
   116e4:	bl	11238 <exit@plt>
   116e8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   116ec:	add	fp, sp, #28
   116f0:	sub	sp, sp, #20
   116f4:	mov	r4, r1
   116f8:	mov	r5, r0
   116fc:	bl	110dc <is_selinux_enabled@plt>
   11700:	str	r0, [sp, #16]
   11704:	ldr	r0, [r4]
   11708:	bl	12984 <__assert_fail@plt+0x1614>
   1170c:	movw	r1, #26919	; 0x6927
   11710:	mov	r0, #6
   11714:	movt	r1, #1
   11718:	bl	112f8 <setlocale@plt>
   1171c:	movw	r6, #27706	; 0x6c3a
   11720:	movw	r1, #27614	; 0x6bde
   11724:	movt	r6, #1
   11728:	movt	r1, #1
   1172c:	mov	r0, r6
   11730:	bl	11334 <bindtextdomain@plt>
   11734:	mov	r0, r6
   11738:	bl	11160 <textdomain@plt>
   1173c:	movw	r0, #10264	; 0x2818
   11740:	movt	r0, #1
   11744:	bl	1684c <__assert_fail@plt+0x54dc>
   11748:	movw	r7, #27638	; 0x6bf6
   1174c:	movw	r6, #28600	; 0x6fb8
   11750:	movw	sl, #33149	; 0x817d
   11754:	mov	r9, #0
   11758:	mov	r8, #1
   1175c:	movt	r7, #1
   11760:	movt	r6, #1
   11764:	movt	sl, #2
   11768:	b	11778 <__assert_fail@plt+0x408>
   1176c:	movw	r0, #33150	; 0x817e
   11770:	movt	r0, #2
   11774:	strb	r8, [r0]
   11778:	mov	r0, r5
   1177c:	mov	r1, r4
   11780:	mov	r2, r7
   11784:	mov	r3, r6
   11788:	str	r9, [sp]
   1178c:	bl	11220 <getopt_long@plt>
   11790:	cmp	r0, #70	; 0x46
   11794:	ble	118d8 <__assert_fail@plt+0x568>
   11798:	sub	r1, r0, #71	; 0x47
   1179c:	cmp	r1, #51	; 0x33
   117a0:	bhi	11d4c <__assert_fail@plt+0x9dc>
   117a4:	add	r2, pc, #4
   117a8:	mov	r0, sl
   117ac:	ldr	pc, [r2, r1, lsl #2]
   117b0:	andeq	r1, r1, r0, lsl #17
   117b4:	andeq	r1, r1, ip, asr #26
   117b8:	andeq	r1, r1, ip, asr #26
   117bc:	andeq	r1, r1, ip, asr #26
   117c0:	andeq	r1, r1, ip, asr #26
   117c4:	andeq	r1, r1, ip, asr #26
   117c8:	andeq	r1, r1, ip, asr #26
   117cc:	andeq	r1, r1, ip, asr #26
   117d0:	andeq	r1, r1, ip, asr #26
   117d4:	andeq	r1, r1, ip, asr #26
   117d8:	andeq	r1, r1, ip, asr #26
   117dc:	andeq	r1, r1, ip, asr #26
   117e0:	andeq	r1, r1, ip, asr #26
   117e4:	andeq	r1, r1, ip, asr #26
   117e8:	andeq	r1, r1, ip, asr #26
   117ec:	andeq	r1, r1, ip, asr #26
   117f0:	andeq	r1, r1, ip, asr #26
   117f4:	andeq	r1, r1, ip, asr #26
   117f8:	andeq	r1, r1, ip, asr #26
   117fc:	muleq	r1, r0, r8
   11800:	andeq	r1, r1, ip, asr #26
   11804:	andeq	r1, r1, ip, asr #26
   11808:	andeq	r1, r1, ip, asr #26
   1180c:	andeq	r1, r1, ip, asr #26
   11810:	andeq	r1, r1, ip, asr #26
   11814:	andeq	r1, r1, ip, asr #26
   11818:	andeq	r1, r1, r8, ror r7
   1181c:	andeq	r1, r1, ip, asr #26
   11820:	andeq	r1, r1, ip, asr #26
   11824:	andeq	r1, r1, ip, asr #26
   11828:	andeq	r1, r1, ip, asr #26
   1182c:	andeq	r1, r1, ip, asr #26
   11830:	andeq	r1, r1, r4, ror r7
   11834:	andeq	r1, r1, ip, asr #26
   11838:	andeq	r1, r1, ip, asr #26
   1183c:	andeq	r1, r1, ip, asr #26
   11840:	andeq	r1, r1, ip, asr #26
   11844:	andeq	r1, r1, ip, asr #26
   11848:	andeq	r1, r1, ip, asr #26
   1184c:	andeq	r1, r1, ip, ror #14
   11850:	andeq	r1, r1, ip, asr #26
   11854:	andeq	r1, r1, ip, asr #26
   11858:	andeq	r1, r1, ip, asr #26
   1185c:	andeq	r1, r1, r8, asr #17
   11860:	andeq	r1, r1, ip, asr #26
   11864:	andeq	r1, r1, ip, asr #26
   11868:	andeq	r1, r1, r8, lsr #17
   1186c:	andeq	r1, r1, ip, asr #26
   11870:	andeq	r1, r1, ip, asr #26
   11874:	andeq	r1, r1, ip, asr #26
   11878:	andeq	r1, r1, ip, asr #26
   1187c:			; <UNDEFINED> instruction: 0x000118b8
   11880:	movw	r0, #33154	; 0x8182
   11884:	movt	r0, #2
   11888:	strb	r8, [r0]
   1188c:	b	11778 <__assert_fail@plt+0x408>
   11890:	ldr	r0, [sp, #16]
   11894:	cmp	r0, #0
   11898:	movw	r0, #33148	; 0x817c
   1189c:	movt	r0, #2
   118a0:	bgt	11774 <__assert_fail@plt+0x404>
   118a4:	b	11d54 <__assert_fail@plt+0x9e4>
   118a8:	movw	r0, #33152	; 0x8180
   118ac:	movt	r0, #2
   118b0:	strb	r8, [r0]
   118b4:	b	11778 <__assert_fail@plt+0x408>
   118b8:	movw	r0, #33153	; 0x8181
   118bc:	movt	r0, #2
   118c0:	strb	r8, [r0]
   118c4:	b	11778 <__assert_fail@plt+0x408>
   118c8:	movw	r0, #33151	; 0x817f
   118cc:	movt	r0, #2
   118d0:	strb	r8, [r0]
   118d4:	b	11778 <__assert_fail@plt+0x408>
   118d8:	cmn	r0, #1
   118dc:	bne	11ce0 <__assert_fail@plt+0x970>
   118e0:	movw	sl, #33128	; 0x8168
   118e4:	movw	lr, #33148	; 0x817c
   118e8:	movt	sl, #2
   118ec:	movt	lr, #2
   118f0:	ldr	r0, [sl]
   118f4:	ldrb	r2, [lr]
   118f8:	subs	ip, r5, r0
   118fc:	cmpne	r2, #0
   11900:	bne	11d60 <__assert_fail@plt+0x9f0>
   11904:	movw	r9, #33152	; 0x8180
   11908:	movw	r8, #33149	; 0x817d
   1190c:	clz	r3, ip
   11910:	movw	r6, #33154	; 0x8182
   11914:	movt	r8, #2
   11918:	movt	r9, #2
   1191c:	movt	r6, #2
   11920:	lsr	r3, r3, #5
   11924:	and	r2, r3, r2
   11928:	ldrb	r3, [r9]
   1192c:	ldrb	r7, [r8]
   11930:	ldrb	r6, [r6]
   11934:	add	r1, r7, r3
   11938:	add	r1, r1, r6
   1193c:	add	r1, r1, r2
   11940:	cmp	r1, #2
   11944:	bcs	11d6c <__assert_fail@plt+0x9fc>
   11948:	orr	r1, r6, r2
   1194c:	orr	r3, r3, r7
   11950:	orrs	r3, r3, r1
   11954:	bne	11994 <__assert_fail@plt+0x624>
   11958:	movw	r1, #33151	; 0x817f
   1195c:	movt	r1, #2
   11960:	ldrb	r1, [r1]
   11964:	cmp	r1, #0
   11968:	bne	11d78 <__assert_fail@plt+0xa08>
   1196c:	movw	r1, #33150	; 0x817e
   11970:	movt	r1, #2
   11974:	ldrb	r1, [r1]
   11978:	cmp	r1, #1
   1197c:	beq	11d78 <__assert_fail@plt+0xa08>
   11980:	movw	r1, #33153	; 0x8181
   11984:	movt	r1, #2
   11988:	ldrb	r1, [r1]
   1198c:	cmp	r1, #1
   11990:	beq	11d84 <__assert_fail@plt+0xa14>
   11994:	cmp	ip, #0
   11998:	beq	11ab8 <__assert_fail@plt+0x748>
   1199c:	movw	r2, #33160	; 0x8188
   119a0:	subs	r1, ip, #1
   119a4:	movt	r2, #2
   119a8:	movwne	r1, #1
   119ac:	cmp	r0, r5
   119b0:	strb	r1, [r2]
   119b4:	bcs	11cc8 <__assert_fail@plt+0x958>
   119b8:	movw	r9, #33164	; 0x818c
   119bc:	mov	r8, #0
   119c0:	movt	r9, #2
   119c4:	b	11a28 <__assert_fail@plt+0x6b8>
   119c8:	bl	11274 <__errno_location@plt>
   119cc:	movw	r1, #27983	; 0x6d4f
   119d0:	ldr	r6, [r0]
   119d4:	mov	r0, #0
   119d8:	mov	r2, #5
   119dc:	movt	r1, #1
   119e0:	bl	11148 <dcgettext@plt>
   119e4:	mov	r7, r0
   119e8:	ldr	r0, [sl]
   119ec:	ldr	r0, [r4, r0, lsl #2]
   119f0:	bl	145d8 <__assert_fail@plt+0x3268>
   119f4:	mov	r3, r0
   119f8:	mov	r0, #0
   119fc:	mov	r1, r6
   11a00:	mov	r2, r7
   11a04:	bl	111d8 <error@plt>
   11a08:	movw	r0, #33040	; 0x8110
   11a0c:	movt	r0, #2
   11a10:	strb	r8, [r0]
   11a14:	ldr	r0, [sl]
   11a18:	add	r0, r0, #1
   11a1c:	cmp	r0, r5
   11a20:	str	r0, [sl]
   11a24:	bcs	11cc8 <__assert_fail@plt+0x958>
   11a28:	ldr	r0, [r4, r0, lsl #2]
   11a2c:	ldrb	r1, [r0]
   11a30:	cmp	r1, #0
   11a34:	beq	119c8 <__assert_fail@plt+0x658>
   11a38:	mov	r1, r9
   11a3c:	mov	r2, #0
   11a40:	mov	r3, #0
   11a44:	str	r8, [sp]
   11a48:	bl	14724 <__assert_fail@plt+0x33b4>
   11a4c:	cmp	r0, #0
   11a50:	bne	119c8 <__assert_fail@plt+0x658>
   11a54:	ldr	r0, [r9]
   11a58:	bl	110f4 <getpwuid@plt>
   11a5c:	cmp	r0, #0
   11a60:	beq	119c8 <__assert_fail@plt+0x658>
   11a64:	mov	r6, r0
   11a68:	ldr	r0, [r0]
   11a6c:	bl	1568c <__assert_fail@plt+0x431c>
   11a70:	mov	r7, r0
   11a74:	ldr	r0, [r6, #8]
   11a78:	movw	r2, #33168	; 0x8190
   11a7c:	ldr	r1, [r6, #12]
   11a80:	movt	r2, #2
   11a84:	str	r0, [r9]
   11a88:	str	r0, [r2]
   11a8c:	movw	r0, #33172	; 0x8194
   11a90:	movt	r0, #2
   11a94:	str	r1, [r0]
   11a98:	movw	r0, #33176	; 0x8198
   11a9c:	movt	r0, #2
   11aa0:	str	r1, [r0]
   11aa4:	mov	r0, r7
   11aa8:	bl	11e08 <__assert_fail@plt+0xa98>
   11aac:	mov	r0, r7
   11ab0:	bl	12900 <__assert_fail@plt+0x1590>
   11ab4:	b	11a14 <__assert_fail@plt+0x6a4>
   11ab8:	cmp	r2, #0
   11abc:	mov	r5, lr
   11ac0:	bne	11ae4 <__assert_fail@plt+0x774>
   11ac4:	cmp	r3, #0
   11ac8:	bne	11b14 <__assert_fail@plt+0x7a4>
   11acc:	movw	r0, #27941	; 0x6d25
   11ad0:	movt	r0, #1
   11ad4:	bl	111e4 <getenv@plt>
   11ad8:	mov	lr, r5
   11adc:	cmp	r0, #0
   11ae0:	bne	11b14 <__assert_fail@plt+0x7a4>
   11ae4:	ldr	r0, [sp, #16]
   11ae8:	cmp	r0, #1
   11aec:	blt	11b14 <__assert_fail@plt+0x7a4>
   11af0:	movw	r0, #33156	; 0x8184
   11af4:	movt	r0, #2
   11af8:	bl	111b4 <getcon@plt>
   11afc:	mov	lr, r5
   11b00:	cmp	r0, #0
   11b04:	beq	11b14 <__assert_fail@plt+0x7a4>
   11b08:	ldrb	r0, [lr]
   11b0c:	cmp	r0, #1
   11b10:	beq	11da8 <__assert_fail@plt+0xa38>
   11b14:	ldrb	r0, [r9]
   11b18:	cmp	r0, #1
   11b1c:	bne	11b78 <__assert_fail@plt+0x808>
   11b20:	movw	r0, #33151	; 0x817f
   11b24:	movt	r0, #2
   11b28:	ldrb	r0, [r0]
   11b2c:	cmp	r0, #0
   11b30:	bne	11bf4 <__assert_fail@plt+0x884>
   11b34:	bl	11274 <__errno_location@plt>
   11b38:	mov	r4, r0
   11b3c:	mov	r0, #0
   11b40:	str	r0, [r4]
   11b44:	bl	1116c <geteuid@plt>
   11b48:	movw	r1, #33164	; 0x818c
   11b4c:	mov	lr, r5
   11b50:	cmn	r0, #1
   11b54:	movt	r1, #2
   11b58:	str	r0, [r1]
   11b5c:	bne	11ba4 <__assert_fail@plt+0x834>
   11b60:	ldr	r4, [r4]
   11b64:	cmp	r4, #0
   11b68:	beq	11ba4 <__assert_fail@plt+0x834>
   11b6c:	movw	r1, #28000	; 0x6d60
   11b70:	movt	r1, #1
   11b74:	b	11dec <__assert_fail@plt+0xa7c>
   11b78:	ldrb	r0, [r8]
   11b7c:	cmp	r0, #0
   11b80:	bne	11c64 <__assert_fail@plt+0x8f4>
   11b84:	movw	r0, #33154	; 0x8182
   11b88:	movt	r0, #2
   11b8c:	ldrb	r0, [r0]
   11b90:	cmp	r0, #0
   11b94:	bne	11bf4 <__assert_fail@plt+0x884>
   11b98:	ldrb	r0, [lr]
   11b9c:	cmp	r0, #0
   11ba0:	beq	11b34 <__assert_fail@plt+0x7c4>
   11ba4:	ldrb	r0, [r9]
   11ba8:	cmp	r0, #1
   11bac:	bne	11bc8 <__assert_fail@plt+0x858>
   11bb0:	movw	r0, #33151	; 0x817f
   11bb4:	movt	r0, #2
   11bb8:	ldrb	r0, [r0]
   11bbc:	cmp	r0, #0
   11bc0:	bne	11bf4 <__assert_fail@plt+0x884>
   11bc4:	b	11cc0 <__assert_fail@plt+0x950>
   11bc8:	ldrb	r0, [r8]
   11bcc:	cmp	r0, #0
   11bd0:	bne	11c64 <__assert_fail@plt+0x8f4>
   11bd4:	movw	r0, #33154	; 0x8182
   11bd8:	movt	r0, #2
   11bdc:	ldrb	r0, [r0]
   11be0:	cmp	r0, #0
   11be4:	bne	11bf4 <__assert_fail@plt+0x884>
   11be8:	ldrb	r0, [lr]
   11bec:	cmp	r0, #0
   11bf0:	bne	11c2c <__assert_fail@plt+0x8bc>
   11bf4:	bl	11274 <__errno_location@plt>
   11bf8:	mov	r4, r0
   11bfc:	mov	r0, #0
   11c00:	str	r0, [r4]
   11c04:	bl	1110c <getuid@plt>
   11c08:	movw	r1, #33168	; 0x8190
   11c0c:	mov	lr, r5
   11c10:	cmn	r0, #1
   11c14:	movt	r1, #2
   11c18:	str	r0, [r1]
   11c1c:	bne	11c2c <__assert_fail@plt+0x8bc>
   11c20:	ldr	r4, [r4]
   11c24:	cmp	r4, #0
   11c28:	bne	11de4 <__assert_fail@plt+0xa74>
   11c2c:	ldrb	r0, [r9]
   11c30:	cmp	r0, #0
   11c34:	bne	11cc0 <__assert_fail@plt+0x950>
   11c38:	ldrb	r0, [r8]
   11c3c:	cmp	r0, #0
   11c40:	bne	11c64 <__assert_fail@plt+0x8f4>
   11c44:	movw	r0, #33154	; 0x8182
   11c48:	movt	r0, #2
   11c4c:	ldrb	r0, [r0]
   11c50:	cmp	r0, #0
   11c54:	bne	11c64 <__assert_fail@plt+0x8f4>
   11c58:	ldrb	r0, [lr]
   11c5c:	cmp	r0, #0
   11c60:	bne	11cc0 <__assert_fail@plt+0x950>
   11c64:	bl	11274 <__errno_location@plt>
   11c68:	mov	r6, #0
   11c6c:	mov	r4, r0
   11c70:	str	r6, [r0]
   11c74:	bl	11184 <getegid@plt>
   11c78:	movw	r1, #33172	; 0x8194
   11c7c:	cmn	r0, #1
   11c80:	movt	r1, #2
   11c84:	str	r0, [r1]
   11c88:	bne	11c98 <__assert_fail@plt+0x928>
   11c8c:	ldr	r5, [r4]
   11c90:	cmp	r5, #0
   11c94:	bne	11db4 <__assert_fail@plt+0xa44>
   11c98:	str	r6, [r4]
   11c9c:	bl	1128c <getgid@plt>
   11ca0:	movw	r1, #33176	; 0x8198
   11ca4:	cmn	r0, #1
   11ca8:	movt	r1, #2
   11cac:	str	r0, [r1]
   11cb0:	bne	11cc0 <__assert_fail@plt+0x950>
   11cb4:	ldr	r4, [r4]
   11cb8:	cmp	r4, #0
   11cbc:	bne	11dd8 <__assert_fail@plt+0xa68>
   11cc0:	mov	r0, #0
   11cc4:	bl	11e08 <__assert_fail@plt+0xa98>
   11cc8:	movw	r0, #33040	; 0x8110
   11ccc:	movt	r0, #2
   11cd0:	ldrb	r0, [r0]
   11cd4:	eor	r0, r0, #1
   11cd8:	sub	sp, fp, #28
   11cdc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   11ce0:	cmn	r0, #3
   11ce4:	bne	11d3c <__assert_fail@plt+0x9cc>
   11ce8:	movw	r0, #33044	; 0x8114
   11cec:	movw	r2, #27731	; 0x6c53
   11cf0:	mov	r1, #0
   11cf4:	movw	r7, #27716	; 0x6c44
   11cf8:	movt	r0, #2
   11cfc:	movt	r2, #1
   11d00:	str	r1, [sp, #8]
   11d04:	movw	r1, #27611	; 0x6bdb
   11d08:	movt	r7, #1
   11d0c:	movt	r1, #1
   11d10:	ldr	r3, [r0]
   11d14:	movw	r0, #33140	; 0x8174
   11d18:	str	r2, [sp, #4]
   11d1c:	movw	r2, #27702	; 0x6c36
   11d20:	str	r7, [sp]
   11d24:	movt	r0, #2
   11d28:	movt	r2, #1
   11d2c:	ldr	r0, [r0]
   11d30:	bl	14f54 <__assert_fail@plt+0x3be4>
   11d34:	mov	r0, #0
   11d38:	bl	11238 <exit@plt>
   11d3c:	cmn	r0, #2
   11d40:	bne	11d4c <__assert_fail@plt+0x9dc>
   11d44:	mov	r0, #0
   11d48:	bl	1146c <__assert_fail@plt+0xfc>
   11d4c:	mov	r0, #1
   11d50:	bl	1146c <__assert_fail@plt+0xfc>
   11d54:	movw	r1, #27647	; 0x6bff
   11d58:	movt	r1, #1
   11d5c:	b	11d8c <__assert_fail@plt+0xa1c>
   11d60:	movw	r1, #27747	; 0x6c63
   11d64:	movt	r1, #1
   11d68:	b	11d8c <__assert_fail@plt+0xa1c>
   11d6c:	movw	r1, #27797	; 0x6c95
   11d70:	movt	r1, #1
   11d74:	b	11d8c <__assert_fail@plt+0xa1c>
   11d78:	movw	r1, #27841	; 0x6cc1
   11d7c:	movt	r1, #1
   11d80:	b	11d8c <__assert_fail@plt+0xa1c>
   11d84:	movw	r1, #27895	; 0x6cf7
   11d88:	movt	r1, #1
   11d8c:	mov	r0, #0
   11d90:	mov	r2, #5
   11d94:	bl	11148 <dcgettext@plt>
   11d98:	mov	r2, r0
   11d9c:	mov	r0, #1
   11da0:	mov	r1, #0
   11da4:	bl	111d8 <error@plt>
   11da8:	movw	r1, #27957	; 0x6d35
   11dac:	movt	r1, #1
   11db0:	b	11d8c <__assert_fail@plt+0xa1c>
   11db4:	movw	r1, #28045	; 0x6d8d
   11db8:	mov	r0, #0
   11dbc:	mov	r2, #5
   11dc0:	movt	r1, #1
   11dc4:	bl	11148 <dcgettext@plt>
   11dc8:	mov	r2, r0
   11dcc:	mov	r0, #1
   11dd0:	mov	r1, r5
   11dd4:	bl	111d8 <error@plt>
   11dd8:	movw	r1, #28070	; 0x6da6
   11ddc:	movt	r1, #1
   11de0:	b	11dec <__assert_fail@plt+0xa7c>
   11de4:	movw	r1, #28025	; 0x6d79
   11de8:	movt	r1, #1
   11dec:	mov	r0, #0
   11df0:	mov	r2, #5
   11df4:	bl	11148 <dcgettext@plt>
   11df8:	mov	r2, r0
   11dfc:	mov	r0, #1
   11e00:	mov	r1, r4
   11e04:	bl	111d8 <error@plt>
   11e08:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   11e0c:	add	fp, sp, #28
   11e10:	sub	sp, sp, #12
   11e14:	mov	r4, r0
   11e18:	movw	r0, #33152	; 0x8180
   11e1c:	movw	sl, #33153	; 0x8181
   11e20:	movt	r0, #2
   11e24:	movt	sl, #2
   11e28:	ldrb	r0, [r0]
   11e2c:	cmp	r0, #1
   11e30:	bne	11e88 <__assert_fail@plt+0xb18>
   11e34:	movw	r0, #33151	; 0x817f
   11e38:	movw	r1, #33168	; 0x8190
   11e3c:	movw	r2, #33164	; 0x818c
   11e40:	movt	r0, #2
   11e44:	movt	r1, #2
   11e48:	movt	r2, #2
   11e4c:	ldrb	r0, [r0]
   11e50:	cmp	r0, #0
   11e54:	movw	r0, #33150	; 0x817e
   11e58:	movt	r0, #2
   11e5c:	movne	r2, r1
   11e60:	ldr	r4, [r2]
   11e64:	ldrb	r0, [r0]
   11e68:	cmp	r0, #0
   11e6c:	beq	11ed8 <__assert_fail@plt+0xb68>
   11e70:	mov	r0, r4
   11e74:	bl	110f4 <getpwuid@plt>
   11e78:	cmp	r0, #0
   11e7c:	beq	11f8c <__assert_fail@plt+0xc1c>
   11e80:	ldr	r0, [r0]
   11e84:	b	11ff0 <__assert_fail@plt+0xc80>
   11e88:	movw	r0, #33149	; 0x817d
   11e8c:	movt	r0, #2
   11e90:	ldrb	r0, [r0]
   11e94:	cmp	r0, #1
   11e98:	bne	11ee0 <__assert_fail@plt+0xb70>
   11e9c:	movw	r0, #33151	; 0x817f
   11ea0:	movw	r1, #33176	; 0x8198
   11ea4:	movw	r2, #33172	; 0x8194
   11ea8:	movt	r0, #2
   11eac:	movt	r1, #2
   11eb0:	movt	r2, #2
   11eb4:	ldrb	r0, [r0]
   11eb8:	cmp	r0, #0
   11ebc:	movne	r2, r1
   11ec0:	movw	r1, #33150	; 0x817e
   11ec4:	movt	r1, #2
   11ec8:	ldr	r0, [r2]
   11ecc:	ldrb	r1, [r1]
   11ed0:	bl	1276c <__assert_fail@plt+0x13fc>
   11ed4:	b	11f44 <__assert_fail@plt+0xbd4>
   11ed8:	mov	r5, #0
   11edc:	b	11fdc <__assert_fail@plt+0xc6c>
   11ee0:	movw	r0, #33154	; 0x8182
   11ee4:	movt	r0, #2
   11ee8:	ldrb	r0, [r0]
   11eec:	cmp	r0, #1
   11ef0:	bne	11f5c <__assert_fail@plt+0xbec>
   11ef4:	movw	r0, #33172	; 0x8194
   11ef8:	movw	r7, #33150	; 0x817e
   11efc:	mov	r6, #32
   11f00:	movt	r0, #2
   11f04:	movt	r7, #2
   11f08:	ldr	r3, [r0]
   11f0c:	movw	r0, #33176	; 0x8198
   11f10:	ldrb	r7, [r7]
   11f14:	movt	r0, #2
   11f18:	ldr	r2, [r0]
   11f1c:	movw	r0, #33168	; 0x8190
   11f20:	movt	r0, #2
   11f24:	str	r7, [sp]
   11f28:	ldr	r1, [r0]
   11f2c:	ldrb	r0, [sl]
   11f30:	cmp	r0, #0
   11f34:	mov	r0, r4
   11f38:	movwne	r6, #0
   11f3c:	str	r6, [sp, #4]
   11f40:	bl	12484 <__assert_fail@plt+0x1114>
   11f44:	movw	r1, #33040	; 0x8110
   11f48:	movt	r1, #2
   11f4c:	ldrb	r2, [r1]
   11f50:	and	r0, r2, r0
   11f54:	strb	r0, [r1]
   11f58:	b	12000 <__assert_fail@plt+0xc90>
   11f5c:	movw	r0, #33148	; 0x817c
   11f60:	movt	r0, #2
   11f64:	ldrb	r0, [r0]
   11f68:	cmp	r0, #1
   11f6c:	bne	120d4 <__assert_fail@plt+0xd64>
   11f70:	movw	r0, #33140	; 0x8174
   11f74:	movt	r0, #2
   11f78:	ldr	r1, [r0]
   11f7c:	movw	r0, #33156	; 0x8184
   11f80:	movt	r0, #2
   11f84:	ldr	r0, [r0]
   11f88:	b	11ffc <__assert_fail@plt+0xc8c>
   11f8c:	movw	r1, #28436	; 0x6f14
   11f90:	mov	r0, #0
   11f94:	mov	r2, #5
   11f98:	mov	r5, #0
   11f9c:	movt	r1, #1
   11fa0:	bl	11148 <dcgettext@plt>
   11fa4:	movw	r2, #33180	; 0x819c
   11fa8:	mov	r6, r0
   11fac:	mov	r0, r4
   11fb0:	mov	r1, #0
   11fb4:	movt	r2, #2
   11fb8:	bl	12928 <__assert_fail@plt+0x15b8>
   11fbc:	mov	r3, r0
   11fc0:	mov	r0, #0
   11fc4:	mov	r1, #0
   11fc8:	mov	r2, r6
   11fcc:	bl	111d8 <error@plt>
   11fd0:	movw	r0, #33040	; 0x8110
   11fd4:	movt	r0, #2
   11fd8:	strb	r5, [r0]
   11fdc:	movw	r2, #33180	; 0x819c
   11fe0:	mov	r0, r4
   11fe4:	mov	r1, r5
   11fe8:	movt	r2, #2
   11fec:	bl	12928 <__assert_fail@plt+0x15b8>
   11ff0:	movw	r1, #33140	; 0x8174
   11ff4:	movt	r1, #2
   11ff8:	ldr	r1, [r1]
   11ffc:	bl	110b8 <fputs_unlocked@plt>
   12000:	ldrb	r0, [sl]
   12004:	cmp	r0, #1
   12008:	bne	12098 <__assert_fail@plt+0xd28>
   1200c:	movw	r1, #33160	; 0x8188
   12010:	movt	r1, #2
   12014:	ldrb	r1, [r1]
   12018:	cmp	r1, #0
   1201c:	beq	12098 <__assert_fail@plt+0xd28>
   12020:	movw	r1, #33154	; 0x8182
   12024:	movt	r1, #2
   12028:	ldrb	r1, [r1]
   1202c:	cmp	r1, #0
   12030:	beq	12098 <__assert_fail@plt+0xd28>
   12034:	movw	r4, #33140	; 0x8174
   12038:	movt	r4, #2
   1203c:	ldr	r0, [r4]
   12040:	ldr	r1, [r0, #20]
   12044:	ldr	r2, [r0, #24]
   12048:	cmp	r1, r2
   1204c:	bcs	12478 <__assert_fail@plt+0x1108>
   12050:	add	r2, r1, #1
   12054:	str	r2, [r0, #20]
   12058:	mov	r0, #0
   1205c:	strb	r0, [r1]
   12060:	ldr	r0, [r4]
   12064:	ldr	r1, [r0, #20]
   12068:	ldr	r2, [r0, #24]
   1206c:	cmp	r1, r2
   12070:	addcc	r2, r1, #1
   12074:	strcc	r2, [r0, #20]
   12078:	movcc	r0, #0
   1207c:	strbcc	r0, [r1]
   12080:	subcc	sp, fp, #28
   12084:	popcc	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12088:	mov	r1, #0
   1208c:	bl	112ec <__overflow@plt>
   12090:	sub	sp, fp, #28
   12094:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12098:	cmp	r0, #0
   1209c:	movw	r0, #33140	; 0x8174
   120a0:	mov	r1, #10
   120a4:	movt	r0, #2
   120a8:	movwne	r1, #0
   120ac:	ldr	r0, [r0]
   120b0:	ldr	r2, [r0, #20]
   120b4:	ldr	r3, [r0, #24]
   120b8:	cmp	r2, r3
   120bc:	addcc	r3, r2, #1
   120c0:	strcc	r3, [r0, #20]
   120c4:	strbcc	r1, [r2]
   120c8:	subcc	sp, fp, #28
   120cc:	popcc	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   120d0:	b	1208c <__assert_fail@plt+0xd1c>
   120d4:	movw	r1, #28483	; 0x6f43
   120d8:	mov	r0, #0
   120dc:	mov	r2, #5
   120e0:	movt	r1, #1
   120e4:	bl	11148 <dcgettext@plt>
   120e8:	movw	r9, #33168	; 0x8190
   120ec:	mov	r5, r0
   120f0:	movw	r2, #33180	; 0x819c
   120f4:	mov	r1, #0
   120f8:	movt	r9, #2
   120fc:	movt	r2, #2
   12100:	ldr	r0, [r9]
   12104:	bl	12928 <__assert_fail@plt+0x15b8>
   12108:	mov	r2, r0
   1210c:	mov	r0, #1
   12110:	mov	r1, r5
   12114:	bl	112b0 <__printf_chk@plt>
   12118:	ldr	r0, [r9]
   1211c:	bl	110f4 <getpwuid@plt>
   12120:	mov	r5, r0
   12124:	cmp	r0, #0
   12128:	beq	12140 <__assert_fail@plt+0xdd0>
   1212c:	ldr	r2, [r5]
   12130:	movw	r1, #28468	; 0x6f34
   12134:	mov	r0, #1
   12138:	movt	r1, #1
   1213c:	bl	112b0 <__printf_chk@plt>
   12140:	movw	r1, #28473	; 0x6f39
   12144:	mov	r0, #0
   12148:	mov	r2, #5
   1214c:	movt	r1, #1
   12150:	bl	11148 <dcgettext@plt>
   12154:	movw	r8, #33176	; 0x8198
   12158:	mov	r6, r0
   1215c:	movw	r2, #33201	; 0x81b1
   12160:	mov	r1, #0
   12164:	movt	r8, #2
   12168:	movt	r2, #2
   1216c:	ldr	r0, [r8]
   12170:	bl	12928 <__assert_fail@plt+0x15b8>
   12174:	mov	r2, r0
   12178:	mov	r0, #1
   1217c:	mov	r1, r6
   12180:	bl	112b0 <__printf_chk@plt>
   12184:	ldr	r0, [r8]
   12188:	bl	11358 <getgrgid@plt>
   1218c:	cmp	r0, #0
   12190:	beq	121a8 <__assert_fail@plt+0xe38>
   12194:	ldr	r2, [r0]
   12198:	movw	r1, #28468	; 0x6f34
   1219c:	mov	r0, #1
   121a0:	movt	r1, #1
   121a4:	bl	112b0 <__printf_chk@plt>
   121a8:	movw	r7, #33164	; 0x818c
   121ac:	ldr	r0, [r9]
   121b0:	movt	r7, #2
   121b4:	ldr	r1, [r7]
   121b8:	cmp	r1, r0
   121bc:	beq	1222c <__assert_fail@plt+0xebc>
   121c0:	movw	r1, #28481	; 0x6f41
   121c4:	mov	r0, #0
   121c8:	mov	r2, #5
   121cc:	mov	r5, #0
   121d0:	movt	r1, #1
   121d4:	bl	11148 <dcgettext@plt>
   121d8:	mov	r6, r0
   121dc:	ldr	r0, [r7]
   121e0:	movw	r2, #33180	; 0x819c
   121e4:	mov	r1, #0
   121e8:	movt	r2, #2
   121ec:	bl	12928 <__assert_fail@plt+0x15b8>
   121f0:	mov	r2, r0
   121f4:	mov	r0, #1
   121f8:	mov	r1, r6
   121fc:	bl	112b0 <__printf_chk@plt>
   12200:	ldr	r0, [r7]
   12204:	bl	110f4 <getpwuid@plt>
   12208:	cmp	r0, #0
   1220c:	beq	1222c <__assert_fail@plt+0xebc>
   12210:	ldr	r2, [r0]
   12214:	movw	r1, #28468	; 0x6f34
   12218:	mov	r6, r0
   1221c:	mov	r0, #1
   12220:	movt	r1, #1
   12224:	bl	112b0 <__printf_chk@plt>
   12228:	mov	r5, r6
   1222c:	movw	r7, #33172	; 0x8194
   12230:	ldr	r0, [r8]
   12234:	movt	r7, #2
   12238:	ldr	r1, [r7]
   1223c:	cmp	r1, r0
   12240:	beq	122a4 <__assert_fail@plt+0xf34>
   12244:	movw	r1, #28490	; 0x6f4a
   12248:	mov	r0, #0
   1224c:	mov	r2, #5
   12250:	movt	r1, #1
   12254:	bl	11148 <dcgettext@plt>
   12258:	mov	r6, r0
   1225c:	ldr	r0, [r7]
   12260:	movw	r2, #33201	; 0x81b1
   12264:	mov	r1, #0
   12268:	movt	r2, #2
   1226c:	bl	12928 <__assert_fail@plt+0x15b8>
   12270:	mov	r2, r0
   12274:	mov	r0, #1
   12278:	mov	r1, r6
   1227c:	bl	112b0 <__printf_chk@plt>
   12280:	ldr	r0, [r7]
   12284:	bl	11358 <getgrgid@plt>
   12288:	cmp	r0, #0
   1228c:	beq	122a4 <__assert_fail@plt+0xf34>
   12290:	ldr	r2, [r0]
   12294:	movw	r1, #28468	; 0x6f34
   12298:	mov	r0, #1
   1229c:	movt	r1, #1
   122a0:	bl	112b0 <__printf_chk@plt>
   122a4:	cmp	r4, #0
   122a8:	beq	122bc <__assert_fail@plt+0xf4c>
   122ac:	cmp	r5, #0
   122b0:	beq	122c4 <__assert_fail@plt+0xf54>
   122b4:	ldr	r1, [r5, #12]
   122b8:	b	122c8 <__assert_fail@plt+0xf58>
   122bc:	ldr	r1, [r7]
   122c0:	b	122c8 <__assert_fail@plt+0xf58>
   122c4:	mvn	r1, #0
   122c8:	add	r2, sp, #8
   122cc:	mov	r0, r4
   122d0:	bl	15708 <__assert_fail@plt+0x4398>
   122d4:	cmn	r0, #1
   122d8:	ble	123f8 <__assert_fail@plt+0x1088>
   122dc:	mov	r5, r0
   122e0:	cmp	r0, #0
   122e4:	beq	123b4 <__assert_fail@plt+0x1044>
   122e8:	movw	r1, #28577	; 0x6fa1
   122ec:	mov	r0, #0
   122f0:	mov	r2, #5
   122f4:	mov	r7, #0
   122f8:	movt	r1, #1
   122fc:	bl	11148 <dcgettext@plt>
   12300:	movw	r6, #33140	; 0x8174
   12304:	movt	r6, #2
   12308:	ldr	r1, [r6]
   1230c:	bl	110b8 <fputs_unlocked@plt>
   12310:	movw	r4, #33201	; 0x81b1
   12314:	movw	r8, #28468	; 0x6f34
   12318:	mov	r9, #44	; 0x2c
   1231c:	movt	r4, #2
   12320:	movt	r8, #1
   12324:	cmp	r7, #0
   12328:	bne	12344 <__assert_fail@plt+0xfd4>
   1232c:	b	12364 <__assert_fail@plt+0xff4>
   12330:	add	r7, r7, #1
   12334:	cmp	r5, r7
   12338:	beq	123b4 <__assert_fail@plt+0x1044>
   1233c:	cmp	r7, #0
   12340:	beq	12364 <__assert_fail@plt+0xff4>
   12344:	ldr	r0, [r6]
   12348:	ldr	r1, [r0, #20]
   1234c:	ldr	r2, [r0, #24]
   12350:	cmp	r1, r2
   12354:	bcs	123a8 <__assert_fail@plt+0x1038>
   12358:	add	r2, r1, #1
   1235c:	str	r2, [r0, #20]
   12360:	strb	r9, [r1]
   12364:	ldr	r0, [sp, #8]
   12368:	mov	r1, #0
   1236c:	mov	r2, r4
   12370:	ldr	r0, [r0, r7, lsl #2]
   12374:	bl	12928 <__assert_fail@plt+0x15b8>
   12378:	ldr	r1, [r6]
   1237c:	bl	110b8 <fputs_unlocked@plt>
   12380:	ldr	r0, [sp, #8]
   12384:	ldr	r0, [r0, r7, lsl #2]
   12388:	bl	11358 <getgrgid@plt>
   1238c:	cmp	r0, #0
   12390:	beq	12330 <__assert_fail@plt+0xfc0>
   12394:	ldr	r2, [r0]
   12398:	mov	r0, #1
   1239c:	mov	r1, r8
   123a0:	bl	112b0 <__printf_chk@plt>
   123a4:	b	12330 <__assert_fail@plt+0xfc0>
   123a8:	mov	r1, #44	; 0x2c
   123ac:	bl	112ec <__overflow@plt>
   123b0:	b	12364 <__assert_fail@plt+0xff4>
   123b4:	ldr	r0, [sp, #8]
   123b8:	bl	12900 <__assert_fail@plt+0x1590>
   123bc:	movw	r4, #33156	; 0x8184
   123c0:	movt	r4, #2
   123c4:	ldr	r0, [r4]
   123c8:	cmp	r0, #0
   123cc:	beq	12000 <__assert_fail@plt+0xc90>
   123d0:	movw	r1, #28586	; 0x6faa
   123d4:	mov	r0, #0
   123d8:	mov	r2, #5
   123dc:	movt	r1, #1
   123e0:	bl	11148 <dcgettext@plt>
   123e4:	ldr	r2, [r4]
   123e8:	mov	r1, r0
   123ec:	mov	r0, #1
   123f0:	bl	112b0 <__printf_chk@plt>
   123f4:	b	12000 <__assert_fail@plt+0xc90>
   123f8:	bl	11274 <__errno_location@plt>
   123fc:	ldr	r5, [r0]
   12400:	cmp	r4, #0
   12404:	beq	12440 <__assert_fail@plt+0x10d0>
   12408:	movw	r1, #28499	; 0x6f53
   1240c:	mov	r0, #0
   12410:	mov	r2, #5
   12414:	movt	r1, #1
   12418:	bl	11148 <dcgettext@plt>
   1241c:	mov	r6, r0
   12420:	mov	r0, r4
   12424:	bl	145d8 <__assert_fail@plt+0x3268>
   12428:	mov	r3, r0
   1242c:	mov	r0, #0
   12430:	mov	r1, r5
   12434:	mov	r2, r6
   12438:	bl	111d8 <error@plt>
   1243c:	b	12464 <__assert_fail@plt+0x10f4>
   12440:	movw	r1, #28532	; 0x6f74
   12444:	mov	r0, #0
   12448:	mov	r2, #5
   1244c:	movt	r1, #1
   12450:	bl	11148 <dcgettext@plt>
   12454:	mov	r2, r0
   12458:	mov	r0, #0
   1245c:	mov	r1, r5
   12460:	bl	111d8 <error@plt>
   12464:	movw	r0, #33040	; 0x8110
   12468:	mov	r1, #0
   1246c:	movt	r0, #2
   12470:	strb	r1, [r0]
   12474:	b	12000 <__assert_fail@plt+0xc90>
   12478:	mov	r1, #0
   1247c:	bl	112ec <__overflow@plt>
   12480:	b	12060 <__assert_fail@plt+0xcf0>
   12484:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12488:	add	fp, sp, #28
   1248c:	sub	sp, sp, #12
   12490:	mov	r4, r3
   12494:	mov	r5, r2
   12498:	mov	r9, r0
   1249c:	cmp	r0, #0
   124a0:	beq	124c0 <__assert_fail@plt+0x1150>
   124a4:	mov	r0, r1
   124a8:	bl	110f4 <getpwuid@plt>
   124ac:	cmp	r0, #0
   124b0:	mov	r6, r0
   124b4:	mov	r7, r0
   124b8:	movwne	r6, #1
   124bc:	b	124c8 <__assert_fail@plt+0x1158>
   124c0:	mov	r7, #0
   124c4:	mov	r6, #1
   124c8:	ldr	r0, [fp, #8]
   124cc:	cmp	r0, #0
   124d0:	beq	12518 <__assert_fail@plt+0x11a8>
   124d4:	mov	r0, r5
   124d8:	bl	11358 <getgrgid@plt>
   124dc:	cmp	r0, #0
   124e0:	beq	124ec <__assert_fail@plt+0x117c>
   124e4:	ldr	r0, [r0]
   124e8:	b	1252c <__assert_fail@plt+0x11bc>
   124ec:	movw	r1, #28816	; 0x7090
   124f0:	mov	r0, #0
   124f4:	mov	r2, #5
   124f8:	mov	r6, #0
   124fc:	movt	r1, #1
   12500:	bl	11148 <dcgettext@plt>
   12504:	mov	r2, r0
   12508:	mov	r0, #0
   1250c:	mov	r1, #0
   12510:	mov	r3, r5
   12514:	bl	111d8 <error@plt>
   12518:	movw	r2, #33222	; 0x81c6
   1251c:	mov	r0, r5
   12520:	mov	r1, #0
   12524:	movt	r2, #2
   12528:	bl	12928 <__assert_fail@plt+0x15b8>
   1252c:	movw	r8, #33140	; 0x8174
   12530:	movt	r8, #2
   12534:	ldr	r1, [r8]
   12538:	bl	110b8 <fputs_unlocked@plt>
   1253c:	cmp	r4, r5
   12540:	beq	125d4 <__assert_fail@plt+0x1264>
   12544:	ldr	r0, [r8]
   12548:	ldr	r1, [r0, #20]
   1254c:	ldr	r2, [r0, #24]
   12550:	cmp	r1, r2
   12554:	bcs	12760 <__assert_fail@plt+0x13f0>
   12558:	add	r2, r1, #1
   1255c:	str	r2, [r0, #20]
   12560:	ldr	r0, [fp, #12]
   12564:	strb	r0, [r1]
   12568:	ldr	r0, [fp, #8]
   1256c:	cmp	r0, #0
   12570:	beq	125b8 <__assert_fail@plt+0x1248>
   12574:	mov	r0, r4
   12578:	bl	11358 <getgrgid@plt>
   1257c:	cmp	r0, #0
   12580:	beq	1258c <__assert_fail@plt+0x121c>
   12584:	ldr	r0, [r0]
   12588:	b	125cc <__assert_fail@plt+0x125c>
   1258c:	movw	r1, #28816	; 0x7090
   12590:	mov	r0, #0
   12594:	mov	r2, #5
   12598:	mov	r6, #0
   1259c:	movt	r1, #1
   125a0:	bl	11148 <dcgettext@plt>
   125a4:	mov	r2, r0
   125a8:	mov	r0, #0
   125ac:	mov	r1, #0
   125b0:	mov	r3, r4
   125b4:	bl	111d8 <error@plt>
   125b8:	movw	r2, #33222	; 0x81c6
   125bc:	mov	r0, r4
   125c0:	mov	r1, #0
   125c4:	movt	r2, #2
   125c8:	bl	12928 <__assert_fail@plt+0x15b8>
   125cc:	ldr	r1, [r8]
   125d0:	bl	110b8 <fputs_unlocked@plt>
   125d4:	cmp	r7, #0
   125d8:	mov	r1, r4
   125dc:	add	r2, sp, #8
   125e0:	mov	r0, r9
   125e4:	ldrne	r1, [r7, #12]
   125e8:	bl	15708 <__assert_fail@plt+0x4398>
   125ec:	cmp	r0, #0
   125f0:	bmi	126e4 <__assert_fail@plt+0x1374>
   125f4:	str	r6, [sp, #4]
   125f8:	beq	126d4 <__assert_fail@plt+0x1364>
   125fc:	movw	sl, #33222	; 0x81c6
   12600:	mov	r7, r0
   12604:	mov	r9, #0
   12608:	movt	sl, #2
   1260c:	b	12664 <__assert_fail@plt+0x12f4>
   12610:	movw	r1, #28816	; 0x7090
   12614:	mov	r0, #0
   12618:	mov	r2, #5
   1261c:	movt	r1, #1
   12620:	str	r0, [sp, #4]
   12624:	mov	r0, #0
   12628:	bl	11148 <dcgettext@plt>
   1262c:	mov	r2, r0
   12630:	mov	r0, #0
   12634:	mov	r1, #0
   12638:	mov	r3, r6
   1263c:	bl	111d8 <error@plt>
   12640:	mov	r0, r6
   12644:	mov	r1, #0
   12648:	mov	r2, sl
   1264c:	bl	12928 <__assert_fail@plt+0x15b8>
   12650:	ldr	r1, [r8]
   12654:	bl	110b8 <fputs_unlocked@plt>
   12658:	add	r9, r9, #1
   1265c:	cmp	r7, r9
   12660:	beq	126d4 <__assert_fail@plt+0x1364>
   12664:	ldr	r0, [sp, #8]
   12668:	ldr	r0, [r0, r9, lsl #2]
   1266c:	cmp	r0, r5
   12670:	cmpne	r0, r4
   12674:	beq	12658 <__assert_fail@plt+0x12e8>
   12678:	ldr	r0, [r8]
   1267c:	ldr	r1, [r0, #20]
   12680:	ldr	r2, [r0, #24]
   12684:	cmp	r1, r2
   12688:	bcs	126c8 <__assert_fail@plt+0x1358>
   1268c:	add	r2, r1, #1
   12690:	str	r2, [r0, #20]
   12694:	ldr	r0, [fp, #12]
   12698:	strb	r0, [r1]
   1269c:	ldr	r0, [sp, #8]
   126a0:	ldr	r6, [r0, r9, lsl #2]
   126a4:	ldr	r0, [fp, #8]
   126a8:	cmp	r0, #0
   126ac:	beq	12640 <__assert_fail@plt+0x12d0>
   126b0:	mov	r0, r6
   126b4:	bl	11358 <getgrgid@plt>
   126b8:	cmp	r0, #0
   126bc:	beq	12610 <__assert_fail@plt+0x12a0>
   126c0:	ldr	r0, [r0]
   126c4:	b	12650 <__assert_fail@plt+0x12e0>
   126c8:	ldr	r1, [fp, #12]
   126cc:	bl	112ec <__overflow@plt>
   126d0:	b	1269c <__assert_fail@plt+0x132c>
   126d4:	ldr	r0, [sp, #8]
   126d8:	bl	12900 <__assert_fail@plt+0x1590>
   126dc:	ldr	r6, [sp, #4]
   126e0:	b	12754 <__assert_fail@plt+0x13e4>
   126e4:	bl	11274 <__errno_location@plt>
   126e8:	ldr	r4, [r0]
   126ec:	mov	r6, #0
   126f0:	cmp	r9, #0
   126f4:	beq	12730 <__assert_fail@plt+0x13c0>
   126f8:	movw	r1, #28499	; 0x6f53
   126fc:	mov	r0, #0
   12700:	mov	r2, #5
   12704:	movt	r1, #1
   12708:	bl	11148 <dcgettext@plt>
   1270c:	mov	r5, r0
   12710:	mov	r0, r9
   12714:	bl	145d8 <__assert_fail@plt+0x3268>
   12718:	mov	r3, r0
   1271c:	mov	r0, #0
   12720:	mov	r1, r4
   12724:	mov	r2, r5
   12728:	bl	111d8 <error@plt>
   1272c:	b	12754 <__assert_fail@plt+0x13e4>
   12730:	movw	r1, #28532	; 0x6f74
   12734:	mov	r0, #0
   12738:	mov	r2, #5
   1273c:	movt	r1, #1
   12740:	bl	11148 <dcgettext@plt>
   12744:	mov	r2, r0
   12748:	mov	r0, #0
   1274c:	mov	r1, r4
   12750:	bl	111d8 <error@plt>
   12754:	and	r0, r6, #1
   12758:	sub	sp, fp, #28
   1275c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12760:	ldr	r1, [fp, #12]
   12764:	bl	112ec <__overflow@plt>
   12768:	b	12568 <__assert_fail@plt+0x11f8>
   1276c:	push	{r4, r5, fp, lr}
   12770:	add	fp, sp, #8
   12774:	mov	r5, r0
   12778:	mov	r4, #1
   1277c:	cmp	r1, #0
   12780:	beq	127cc <__assert_fail@plt+0x145c>
   12784:	mov	r0, r5
   12788:	bl	11358 <getgrgid@plt>
   1278c:	cmp	r0, #0
   12790:	beq	127a0 <__assert_fail@plt+0x1430>
   12794:	ldr	r0, [r0]
   12798:	mov	r4, #1
   1279c:	b	127e0 <__assert_fail@plt+0x1470>
   127a0:	movw	r1, #28816	; 0x7090
   127a4:	mov	r0, #0
   127a8:	mov	r2, #5
   127ac:	mov	r4, #0
   127b0:	movt	r1, #1
   127b4:	bl	11148 <dcgettext@plt>
   127b8:	mov	r2, r0
   127bc:	mov	r0, #0
   127c0:	mov	r1, #0
   127c4:	mov	r3, r5
   127c8:	bl	111d8 <error@plt>
   127cc:	movw	r2, #33222	; 0x81c6
   127d0:	mov	r0, r5
   127d4:	mov	r1, #0
   127d8:	movt	r2, #2
   127dc:	bl	12928 <__assert_fail@plt+0x15b8>
   127e0:	movw	r1, #33140	; 0x8174
   127e4:	movt	r1, #2
   127e8:	ldr	r1, [r1]
   127ec:	bl	110b8 <fputs_unlocked@plt>
   127f0:	mov	r0, r4
   127f4:	pop	{r4, r5, fp, pc}
   127f8:	movw	r1, #33244	; 0x81dc
   127fc:	movt	r1, #2
   12800:	str	r0, [r1]
   12804:	bx	lr
   12808:	movw	r1, #33248	; 0x81e0
   1280c:	movt	r1, #2
   12810:	strb	r0, [r1]
   12814:	bx	lr
   12818:	push	{r4, r5, r6, sl, fp, lr}
   1281c:	add	fp, sp, #16
   12820:	sub	sp, sp, #8
   12824:	movw	r0, #33140	; 0x8174
   12828:	movt	r0, #2
   1282c:	ldr	r0, [r0]
   12830:	bl	16040 <__assert_fail@plt+0x4cd0>
   12834:	cmp	r0, #0
   12838:	beq	12860 <__assert_fail@plt+0x14f0>
   1283c:	movw	r0, #33248	; 0x81e0
   12840:	movt	r0, #2
   12844:	ldrb	r0, [r0]
   12848:	cmp	r0, #0
   1284c:	beq	12880 <__assert_fail@plt+0x1510>
   12850:	bl	11274 <__errno_location@plt>
   12854:	ldr	r0, [r0]
   12858:	cmp	r0, #32
   1285c:	bne	12880 <__assert_fail@plt+0x1510>
   12860:	movw	r0, #33136	; 0x8170
   12864:	movt	r0, #2
   12868:	ldr	r0, [r0]
   1286c:	bl	16040 <__assert_fail@plt+0x4cd0>
   12870:	cmp	r0, #0
   12874:	subeq	sp, fp, #16
   12878:	popeq	{r4, r5, r6, sl, fp, pc}
   1287c:	b	128f0 <__assert_fail@plt+0x1580>
   12880:	movw	r1, #28865	; 0x70c1
   12884:	mov	r0, #0
   12888:	mov	r2, #5
   1288c:	movt	r1, #1
   12890:	bl	11148 <dcgettext@plt>
   12894:	mov	r4, r0
   12898:	movw	r0, #33244	; 0x81dc
   1289c:	movt	r0, #2
   128a0:	ldr	r6, [r0]
   128a4:	bl	11274 <__errno_location@plt>
   128a8:	ldr	r5, [r0]
   128ac:	cmp	r6, #0
   128b0:	bne	128cc <__assert_fail@plt+0x155c>
   128b4:	movw	r2, #28881	; 0x70d1
   128b8:	mov	r0, #0
   128bc:	mov	r1, r5
   128c0:	mov	r3, r4
   128c4:	movt	r2, #1
   128c8:	b	128ec <__assert_fail@plt+0x157c>
   128cc:	mov	r0, r6
   128d0:	bl	14250 <__assert_fail@plt+0x2ee0>
   128d4:	movw	r2, #28877	; 0x70cd
   128d8:	mov	r3, r0
   128dc:	str	r4, [sp]
   128e0:	mov	r0, #0
   128e4:	mov	r1, r5
   128e8:	movt	r2, #1
   128ec:	bl	111d8 <error@plt>
   128f0:	movw	r0, #33048	; 0x8118
   128f4:	movt	r0, #2
   128f8:	ldr	r0, [r0]
   128fc:	bl	11124 <_exit@plt>
   12900:	push	{r4, r5, r6, sl, fp, lr}
   12904:	add	fp, sp, #16
   12908:	mov	r4, r0
   1290c:	bl	11274 <__errno_location@plt>
   12910:	ldr	r6, [r0]
   12914:	mov	r5, r0
   12918:	mov	r0, r4
   1291c:	bl	11118 <free@plt>
   12920:	str	r6, [r5]
   12924:	pop	{r4, r5, r6, sl, fp, pc}
   12928:	push	{r4, r5, r6, sl, fp, lr}
   1292c:	add	fp, sp, #16
   12930:	mov	r5, r0
   12934:	mov	r0, #0
   12938:	mov	r4, r1
   1293c:	add	r6, r2, #19
   12940:	strb	r0, [r2, #20]
   12944:	mov	r0, r5
   12948:	mov	r1, r4
   1294c:	mov	r2, #10
   12950:	mov	r3, #0
   12954:	bl	16674 <__assert_fail@plt+0x5304>
   12958:	add	r2, r0, r0, lsl #2
   1295c:	sub	r2, r5, r2, lsl #1
   12960:	orr	r2, r2, #48	; 0x30
   12964:	strb	r2, [r6], #-1
   12968:	rsbs	r2, r5, #9
   1296c:	mov	r5, r0
   12970:	rscs	r2, r4, #0
   12974:	mov	r4, r1
   12978:	bcc	12944 <__assert_fail@plt+0x15d4>
   1297c:	add	r0, r6, #1
   12980:	pop	{r4, r5, r6, sl, fp, pc}
   12984:	push	{r4, r5, fp, lr}
   12988:	add	fp, sp, #8
   1298c:	cmp	r0, #0
   12990:	beq	12a24 <__assert_fail@plt+0x16b4>
   12994:	mov	r1, #47	; 0x2f
   12998:	mov	r4, r0
   1299c:	bl	11310 <strrchr@plt>
   129a0:	cmp	r0, #0
   129a4:	mov	r5, r4
   129a8:	addne	r5, r0, #1
   129ac:	sub	r0, r5, r4
   129b0:	cmp	r0, #7
   129b4:	blt	12a08 <__assert_fail@plt+0x1698>
   129b8:	movw	r1, #28940	; 0x710c
   129bc:	sub	r0, r5, #7
   129c0:	mov	r2, #7
   129c4:	movt	r1, #1
   129c8:	bl	11340 <strncmp@plt>
   129cc:	cmp	r0, #0
   129d0:	bne	12a08 <__assert_fail@plt+0x1698>
   129d4:	movw	r1, #28948	; 0x7114
   129d8:	mov	r0, r5
   129dc:	mov	r2, #3
   129e0:	movt	r1, #1
   129e4:	bl	11340 <strncmp@plt>
   129e8:	cmp	r0, #0
   129ec:	beq	129f8 <__assert_fail@plt+0x1688>
   129f0:	mov	r4, r5
   129f4:	b	12a08 <__assert_fail@plt+0x1698>
   129f8:	movw	r0, #33120	; 0x8160
   129fc:	add	r4, r5, #3
   12a00:	movt	r0, #2
   12a04:	str	r4, [r0]
   12a08:	movw	r0, #33124	; 0x8164
   12a0c:	movt	r0, #2
   12a10:	str	r4, [r0]
   12a14:	movw	r0, #33252	; 0x81e4
   12a18:	movt	r0, #2
   12a1c:	str	r4, [r0]
   12a20:	pop	{r4, r5, fp, pc}
   12a24:	movw	r0, #33136	; 0x8170
   12a28:	mov	r1, #55	; 0x37
   12a2c:	mov	r2, #1
   12a30:	movt	r0, #2
   12a34:	ldr	r3, [r0]
   12a38:	movw	r0, #28884	; 0x70d4
   12a3c:	movt	r0, #1
   12a40:	bl	11190 <fwrite@plt>
   12a44:	bl	1134c <abort@plt>
   12a48:	push	{r4, r5, r6, sl, fp, lr}
   12a4c:	add	fp, sp, #16
   12a50:	mov	r4, r0
   12a54:	movw	r0, #33256	; 0x81e8
   12a58:	movt	r0, #2
   12a5c:	cmp	r4, #0
   12a60:	moveq	r4, r0
   12a64:	bl	11274 <__errno_location@plt>
   12a68:	ldr	r6, [r0]
   12a6c:	mov	r5, r0
   12a70:	mov	r0, r4
   12a74:	mov	r1, #48	; 0x30
   12a78:	bl	155e8 <__assert_fail@plt+0x4278>
   12a7c:	str	r6, [r5]
   12a80:	pop	{r4, r5, r6, sl, fp, pc}
   12a84:	movw	r1, #33256	; 0x81e8
   12a88:	cmp	r0, #0
   12a8c:	movt	r1, #2
   12a90:	movne	r1, r0
   12a94:	ldr	r0, [r1]
   12a98:	bx	lr
   12a9c:	movw	r2, #33256	; 0x81e8
   12aa0:	cmp	r0, #0
   12aa4:	movt	r2, #2
   12aa8:	movne	r2, r0
   12aac:	str	r1, [r2]
   12ab0:	bx	lr
   12ab4:	movw	r3, #33256	; 0x81e8
   12ab8:	cmp	r0, #0
   12abc:	and	r2, r2, #1
   12ac0:	movt	r3, #2
   12ac4:	movne	r3, r0
   12ac8:	ubfx	r0, r1, #5, #3
   12acc:	and	r1, r1, #31
   12ad0:	add	ip, r3, r0, lsl #2
   12ad4:	mov	r0, #1
   12ad8:	ldr	r3, [ip, #8]
   12adc:	and	r0, r0, r3, lsr r1
   12ae0:	eor	r2, r0, r2
   12ae4:	eor	r1, r3, r2, lsl r1
   12ae8:	str	r1, [ip, #8]
   12aec:	bx	lr
   12af0:	movw	r2, #33256	; 0x81e8
   12af4:	cmp	r0, #0
   12af8:	movt	r2, #2
   12afc:	movne	r2, r0
   12b00:	ldr	r0, [r2, #4]
   12b04:	str	r1, [r2, #4]
   12b08:	bx	lr
   12b0c:	push	{fp, lr}
   12b10:	mov	fp, sp
   12b14:	movw	r3, #33256	; 0x81e8
   12b18:	cmp	r0, #0
   12b1c:	movt	r3, #2
   12b20:	movne	r3, r0
   12b24:	cmp	r1, #0
   12b28:	mov	r0, #10
   12b2c:	cmpne	r2, #0
   12b30:	str	r0, [r3]
   12b34:	bne	12b3c <__assert_fail@plt+0x17cc>
   12b38:	bl	1134c <abort@plt>
   12b3c:	str	r1, [r3, #40]	; 0x28
   12b40:	str	r2, [r3, #44]	; 0x2c
   12b44:	pop	{fp, pc}
   12b48:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12b4c:	add	fp, sp, #28
   12b50:	sub	sp, sp, #20
   12b54:	mov	r7, r0
   12b58:	ldr	r0, [fp, #8]
   12b5c:	movw	r5, #33256	; 0x81e8
   12b60:	mov	r8, r3
   12b64:	mov	r9, r2
   12b68:	mov	sl, r1
   12b6c:	movt	r5, #2
   12b70:	cmp	r0, #0
   12b74:	movne	r5, r0
   12b78:	bl	11274 <__errno_location@plt>
   12b7c:	ldr	r2, [r5, #40]	; 0x28
   12b80:	ldr	r3, [r5, #44]	; 0x2c
   12b84:	mov	r4, r0
   12b88:	ldm	r5, {r0, r1}
   12b8c:	add	r5, r5, #8
   12b90:	ldr	r6, [r4]
   12b94:	stm	sp, {r0, r1, r5}
   12b98:	mov	r0, r7
   12b9c:	mov	r1, sl
   12ba0:	str	r2, [sp, #12]
   12ba4:	str	r3, [sp, #16]
   12ba8:	mov	r2, r9
   12bac:	mov	r3, r8
   12bb0:	bl	12bc0 <__assert_fail@plt+0x1850>
   12bb4:	str	r6, [r4]
   12bb8:	sub	sp, fp, #28
   12bbc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12bc0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12bc4:	add	fp, sp, #28
   12bc8:	sub	sp, sp, #156	; 0x9c
   12bcc:	mov	r5, r0
   12bd0:	add	r0, r2, #1
   12bd4:	mov	r6, r1
   12bd8:	mov	sl, r3
   12bdc:	str	r2, [fp, #-80]	; 0xffffffb0
   12be0:	str	r0, [sp, #72]	; 0x48
   12be4:	ldr	r0, [fp, #12]
   12be8:	and	r1, r0, #1
   12bec:	str	r1, [sp, #36]	; 0x24
   12bf0:	and	r1, r0, #4
   12bf4:	str	r1, [sp, #32]
   12bf8:	ubfx	r9, r0, #1, #1
   12bfc:	bl	111a8 <__ctype_get_mb_cur_max@plt>
   12c00:	str	r0, [sp, #40]	; 0x28
   12c04:	ldr	r0, [fp, #24]
   12c08:	ldr	r7, [fp, #8]
   12c0c:	mov	r1, #0
   12c10:	str	r5, [fp, #-84]	; 0xffffffac
   12c14:	str	r1, [fp, #-56]	; 0xffffffc8
   12c18:	mov	r1, #0
   12c1c:	str	r1, [sp, #60]	; 0x3c
   12c20:	mov	r1, #1
   12c24:	str	r1, [fp, #-48]	; 0xffffffd0
   12c28:	str	r0, [sp, #80]	; 0x50
   12c2c:	ldr	r0, [fp, #20]
   12c30:	str	r0, [sp, #76]	; 0x4c
   12c34:	mov	r0, #0
   12c38:	str	r0, [sp, #56]	; 0x38
   12c3c:	mov	r0, #0
   12c40:	str	r0, [fp, #-88]	; 0xffffffa8
   12c44:	mov	r0, #0
   12c48:	str	r0, [fp, #-72]	; 0xffffffb8
   12c4c:	mov	r0, #0
   12c50:	cmp	r7, #10
   12c54:	bhi	13be8 <__assert_fail@plt+0x2878>
   12c58:	add	r1, pc, #24
   12c5c:	ldr	ip, [fp, #-80]	; 0xffffffb0
   12c60:	mov	r4, r6
   12c64:	mov	r8, #0
   12c68:	mov	r2, #1
   12c6c:	mov	r3, #0
   12c70:	mov	lr, sl
   12c74:	ldr	pc, [r1, r7, lsl #2]
   12c78:	andeq	r2, r1, ip, lsr sp
   12c7c:	muleq	r1, r0, sp
   12c80:	andeq	r2, r1, r0, asr sp
   12c84:	andeq	r2, r1, r4, lsr sp
   12c88:	andeq	r2, r1, r4, lsl #27
   12c8c:			; <UNDEFINED> instruction: 0x00012db8
   12c90:	andeq	r2, r1, r0, ror #26
   12c94:	andeq	r2, r1, ip, lsr lr
   12c98:	andeq	r2, r1, r4, lsr #25
   12c9c:	andeq	r2, r1, r4, lsr #25
   12ca0:	andeq	r2, r1, ip, asr #25
   12ca4:	movw	r0, #29030	; 0x7166
   12ca8:	mov	r1, r7
   12cac:	movt	r0, #1
   12cb0:	bl	145f0 <__assert_fail@plt+0x3280>
   12cb4:	str	r0, [sp, #76]	; 0x4c
   12cb8:	movw	r0, #29032	; 0x7168
   12cbc:	mov	r1, r7
   12cc0:	movt	r0, #1
   12cc4:	bl	145f0 <__assert_fail@plt+0x3280>
   12cc8:	str	r0, [sp, #80]	; 0x50
   12ccc:	mov	r8, #0
   12cd0:	tst	r9, #1
   12cd4:	bne	12d0c <__assert_fail@plt+0x199c>
   12cd8:	ldr	r0, [sp, #76]	; 0x4c
   12cdc:	ldrb	r0, [r0]
   12ce0:	cmp	r0, #0
   12ce4:	beq	12d0c <__assert_fail@plt+0x199c>
   12ce8:	ldr	r1, [sp, #76]	; 0x4c
   12cec:	mov	r8, #0
   12cf0:	add	r1, r1, #1
   12cf4:	cmp	r8, r4
   12cf8:	strbcc	r0, [r5, r8]
   12cfc:	ldrb	r0, [r1, r8]
   12d00:	add	r8, r8, #1
   12d04:	cmp	r0, #0
   12d08:	bne	12cf4 <__assert_fail@plt+0x1984>
   12d0c:	ldr	r6, [sp, #80]	; 0x50
   12d10:	mov	r0, r6
   12d14:	bl	1125c <strlen@plt>
   12d18:	ldr	ip, [fp, #-80]	; 0xffffffb0
   12d1c:	str	r0, [fp, #-72]	; 0xffffffb8
   12d20:	str	r6, [fp, #-88]	; 0xffffffa8
   12d24:	mov	r2, #1
   12d28:	mov	r3, r9
   12d2c:	mov	lr, sl
   12d30:	b	12e3c <__assert_fail@plt+0x1acc>
   12d34:	mov	r0, #1
   12d38:	b	12d90 <__assert_fail@plt+0x1a20>
   12d3c:	mov	r7, #0
   12d40:	mov	r8, #0
   12d44:	mov	r2, r0
   12d48:	mov	r3, #0
   12d4c:	b	12e3c <__assert_fail@plt+0x1acc>
   12d50:	tst	r9, #1
   12d54:	bne	12d90 <__assert_fail@plt+0x1a20>
   12d58:	mov	r2, r0
   12d5c:	b	12de8 <__assert_fail@plt+0x1a78>
   12d60:	mov	r0, #1
   12d64:	mov	r8, #0
   12d68:	mov	r7, #5
   12d6c:	mov	r2, #1
   12d70:	str	r0, [fp, #-72]	; 0xffffffb8
   12d74:	movw	r0, #29028	; 0x7164
   12d78:	movt	r0, #1
   12d7c:	str	r0, [fp, #-88]	; 0xffffffa8
   12d80:	b	12db0 <__assert_fail@plt+0x1a40>
   12d84:	mov	r2, #1
   12d88:	tst	r9, #1
   12d8c:	beq	12de8 <__assert_fail@plt+0x1a78>
   12d90:	mov	r1, #1
   12d94:	mov	r8, #0
   12d98:	mov	r7, #2
   12d9c:	mov	r2, r0
   12da0:	str	r1, [fp, #-72]	; 0xffffffb8
   12da4:	movw	r1, #29032	; 0x7168
   12da8:	movt	r1, #1
   12dac:	str	r1, [fp, #-88]	; 0xffffffa8
   12db0:	mov	r3, #1
   12db4:	b	12e3c <__assert_fail@plt+0x1acc>
   12db8:	tst	r9, #1
   12dbc:	beq	12e0c <__assert_fail@plt+0x1a9c>
   12dc0:	mov	r0, #1
   12dc4:	mov	r8, #0
   12dc8:	mov	r2, #1
   12dcc:	mov	r3, #1
   12dd0:	mov	r7, #5
   12dd4:	str	r0, [fp, #-72]	; 0xffffffb8
   12dd8:	movw	r0, #29028	; 0x7164
   12ddc:	movt	r0, #1
   12de0:	str	r0, [fp, #-88]	; 0xffffffa8
   12de4:	b	12e3c <__assert_fail@plt+0x1acc>
   12de8:	cmp	r4, #0
   12dec:	mov	r8, #1
   12df0:	mov	r3, #0
   12df4:	mov	r7, #2
   12df8:	movne	r0, #39	; 0x27
   12dfc:	strbne	r0, [r5]
   12e00:	movw	r0, #29032	; 0x7168
   12e04:	movt	r0, #1
   12e08:	b	12e30 <__assert_fail@plt+0x1ac0>
   12e0c:	cmp	r4, #0
   12e10:	mov	r8, #1
   12e14:	mov	r2, #1
   12e18:	mov	r7, #5
   12e1c:	mov	r3, #0
   12e20:	movne	r0, #34	; 0x22
   12e24:	strbne	r0, [r5]
   12e28:	movw	r0, #29028	; 0x7164
   12e2c:	movt	r0, #1
   12e30:	str	r0, [fp, #-88]	; 0xffffffa8
   12e34:	mov	r0, #1
   12e38:	str	r0, [fp, #-72]	; 0xffffffb8
   12e3c:	ldr	r0, [fp, #-72]	; 0xffffffb8
   12e40:	eor	r6, r3, #1
   12e44:	str	r7, [fp, #-68]	; 0xffffffbc
   12e48:	str	r3, [fp, #-76]	; 0xffffffb4
   12e4c:	str	r2, [sp, #84]	; 0x54
   12e50:	str	r6, [sp, #92]	; 0x5c
   12e54:	cmp	r0, #0
   12e58:	movwne	r0, #1
   12e5c:	and	r1, r0, r3
   12e60:	and	r1, r2, r1
   12e64:	str	r1, [sp, #48]	; 0x30
   12e68:	sub	r1, r7, #2
   12e6c:	clz	r1, r1
   12e70:	lsr	r1, r1, #5
   12e74:	and	r1, r1, r3
   12e78:	str	r1, [sp, #64]	; 0x40
   12e7c:	subs	r1, r7, #2
   12e80:	mov	r7, #0
   12e84:	movwne	r1, #1
   12e88:	orr	r6, r1, r6
   12e8c:	and	r1, r1, r2
   12e90:	and	r0, r0, r1
   12e94:	str	r6, [sp, #68]	; 0x44
   12e98:	str	r0, [fp, #-60]	; 0xffffffc4
   12e9c:	orr	r0, r1, r3
   12ea0:	ldr	r1, [fp, #16]
   12ea4:	eor	r0, r0, #1
   12ea8:	clz	r1, r1
   12eac:	lsr	r1, r1, #5
   12eb0:	orr	r0, r1, r0
   12eb4:	str	r0, [fp, #-64]	; 0xffffffc0
   12eb8:	eor	r0, r2, #1
   12ebc:	str	r0, [sp, #52]	; 0x34
   12ec0:	cmn	lr, #1
   12ec4:	beq	12ed4 <__assert_fail@plt+0x1b64>
   12ec8:	cmp	r7, lr
   12ecc:	bne	12ee0 <__assert_fail@plt+0x1b70>
   12ed0:	b	13a28 <__assert_fail@plt+0x26b8>
   12ed4:	ldrb	r0, [ip, r7]
   12ed8:	cmp	r0, #0
   12edc:	beq	13a30 <__assert_fail@plt+0x26c0>
   12ee0:	ldr	r0, [fp, #-60]	; 0xffffffc4
   12ee4:	mov	sl, #0
   12ee8:	cmp	r0, #0
   12eec:	beq	12f24 <__assert_fail@plt+0x1bb4>
   12ef0:	ldr	r0, [fp, #-72]	; 0xffffffb8
   12ef4:	add	r5, r7, r0
   12ef8:	cmp	r0, #2
   12efc:	bcc	12f18 <__assert_fail@plt+0x1ba8>
   12f00:	cmn	lr, #1
   12f04:	bne	12f18 <__assert_fail@plt+0x1ba8>
   12f08:	mov	r0, ip
   12f0c:	bl	1125c <strlen@plt>
   12f10:	ldr	ip, [fp, #-80]	; 0xffffffb0
   12f14:	mov	lr, r0
   12f18:	cmp	r5, lr
   12f1c:	bls	12f2c <__assert_fail@plt+0x1bbc>
   12f20:	ldr	r5, [fp, #-84]	; 0xffffffac
   12f24:	mov	r0, #0
   12f28:	b	12f78 <__assert_fail@plt+0x1c08>
   12f2c:	ldr	r1, [fp, #-88]	; 0xffffffa8
   12f30:	ldr	r2, [fp, #-72]	; 0xffffffb8
   12f34:	add	r0, ip, r7
   12f38:	mov	r6, r4
   12f3c:	mov	r4, lr
   12f40:	bl	11244 <bcmp@plt>
   12f44:	ldr	r2, [sp, #92]	; 0x5c
   12f48:	cmp	r0, #0
   12f4c:	ldr	r5, [fp, #-84]	; 0xffffffac
   12f50:	mov	r1, r0
   12f54:	movwne	r1, #1
   12f58:	orr	r1, r1, r2
   12f5c:	tst	r1, #1
   12f60:	beq	13ab8 <__assert_fail@plt+0x2748>
   12f64:	ldr	ip, [fp, #-80]	; 0xffffffb0
   12f68:	clz	r0, r0
   12f6c:	mov	lr, r4
   12f70:	mov	r4, r6
   12f74:	lsr	r0, r0, #5
   12f78:	str	r0, [fp, #-52]	; 0xffffffcc
   12f7c:	ldrb	r6, [ip, r7]
   12f80:	cmp	r6, #126	; 0x7e
   12f84:	bhi	134b4 <__assert_fail@plt+0x2144>
   12f88:	add	r3, pc, #16
   12f8c:	mov	r9, #1
   12f90:	mov	r2, #110	; 0x6e
   12f94:	mov	r0, #97	; 0x61
   12f98:	mov	r1, #0
   12f9c:	ldr	pc, [r3, r6, lsl #2]
   12fa0:	andeq	r3, r1, r4, lsl r3
   12fa4:			; <UNDEFINED> instruction: 0x000134b4
   12fa8:			; <UNDEFINED> instruction: 0x000134b4
   12fac:			; <UNDEFINED> instruction: 0x000134b4
   12fb0:			; <UNDEFINED> instruction: 0x000134b4
   12fb4:			; <UNDEFINED> instruction: 0x000134b4
   12fb8:			; <UNDEFINED> instruction: 0x000134b4
   12fbc:	muleq	r1, r0, r5
   12fc0:	strdeq	r3, [r1], -r4
   12fc4:	andeq	r3, r1, ip, ror #5
   12fc8:	andeq	r3, r1, r0, lsl #6
   12fcc:	andeq	r3, r1, ip, lsl r4
   12fd0:	andeq	r3, r1, r4, ror #5
   12fd4:	strdeq	r3, [r1], -ip
   12fd8:			; <UNDEFINED> instruction: 0x000134b4
   12fdc:			; <UNDEFINED> instruction: 0x000134b4
   12fe0:			; <UNDEFINED> instruction: 0x000134b4
   12fe4:			; <UNDEFINED> instruction: 0x000134b4
   12fe8:			; <UNDEFINED> instruction: 0x000134b4
   12fec:			; <UNDEFINED> instruction: 0x000134b4
   12ff0:			; <UNDEFINED> instruction: 0x000134b4
   12ff4:			; <UNDEFINED> instruction: 0x000134b4
   12ff8:			; <UNDEFINED> instruction: 0x000134b4
   12ffc:			; <UNDEFINED> instruction: 0x000134b4
   13000:			; <UNDEFINED> instruction: 0x000134b4
   13004:			; <UNDEFINED> instruction: 0x000134b4
   13008:			; <UNDEFINED> instruction: 0x000134b4
   1300c:			; <UNDEFINED> instruction: 0x000134b4
   13010:			; <UNDEFINED> instruction: 0x000134b4
   13014:			; <UNDEFINED> instruction: 0x000134b4
   13018:			; <UNDEFINED> instruction: 0x000134b4
   1301c:			; <UNDEFINED> instruction: 0x000134b4
   13020:	muleq	r1, r8, r2
   13024:	muleq	r1, ip, r2
   13028:	muleq	r1, ip, r2
   1302c:	andeq	r3, r1, r4, lsl #5
   13030:	muleq	r1, ip, r2
   13034:	muleq	r1, ip, r1
   13038:	muleq	r1, ip, r2
   1303c:	andeq	r3, r1, r4, lsr #8
   13040:	muleq	r1, ip, r2
   13044:	muleq	r1, ip, r2
   13048:	muleq	r1, ip, r2
   1304c:	muleq	r1, ip, r1
   13050:	muleq	r1, ip, r1
   13054:	muleq	r1, ip, r1
   13058:	muleq	r1, ip, r1
   1305c:	muleq	r1, ip, r1
   13060:	muleq	r1, ip, r1
   13064:	muleq	r1, ip, r1
   13068:	muleq	r1, ip, r1
   1306c:	muleq	r1, ip, r1
   13070:	muleq	r1, ip, r1
   13074:	muleq	r1, ip, r1
   13078:	muleq	r1, ip, r1
   1307c:	muleq	r1, ip, r1
   13080:	muleq	r1, ip, r1
   13084:	muleq	r1, ip, r1
   13088:	muleq	r1, ip, r1
   1308c:	muleq	r1, ip, r2
   13090:	muleq	r1, ip, r2
   13094:	muleq	r1, ip, r2
   13098:	muleq	r1, ip, r2
   1309c:	andeq	r3, r1, ip, ror #7
   130a0:			; <UNDEFINED> instruction: 0x000134b4
   130a4:	muleq	r1, ip, r1
   130a8:	muleq	r1, ip, r1
   130ac:	muleq	r1, ip, r1
   130b0:	muleq	r1, ip, r1
   130b4:	muleq	r1, ip, r1
   130b8:	muleq	r1, ip, r1
   130bc:	muleq	r1, ip, r1
   130c0:	muleq	r1, ip, r1
   130c4:	muleq	r1, ip, r1
   130c8:	muleq	r1, ip, r1
   130cc:	muleq	r1, ip, r1
   130d0:	muleq	r1, ip, r1
   130d4:	muleq	r1, ip, r1
   130d8:	muleq	r1, ip, r1
   130dc:	muleq	r1, ip, r1
   130e0:	muleq	r1, ip, r1
   130e4:	muleq	r1, ip, r1
   130e8:	muleq	r1, ip, r1
   130ec:	muleq	r1, ip, r1
   130f0:	muleq	r1, ip, r1
   130f4:	muleq	r1, ip, r1
   130f8:	muleq	r1, ip, r1
   130fc:	muleq	r1, ip, r1
   13100:	muleq	r1, ip, r1
   13104:	muleq	r1, ip, r1
   13108:	muleq	r1, ip, r1
   1310c:	muleq	r1, ip, r2
   13110:	andeq	r3, r1, r4, asr #5
   13114:	muleq	r1, ip, r1
   13118:	muleq	r1, ip, r2
   1311c:	muleq	r1, ip, r1
   13120:	muleq	r1, ip, r2
   13124:	muleq	r1, ip, r1
   13128:	muleq	r1, ip, r1
   1312c:	muleq	r1, ip, r1
   13130:	muleq	r1, ip, r1
   13134:	muleq	r1, ip, r1
   13138:	muleq	r1, ip, r1
   1313c:	muleq	r1, ip, r1
   13140:	muleq	r1, ip, r1
   13144:	muleq	r1, ip, r1
   13148:	muleq	r1, ip, r1
   1314c:	muleq	r1, ip, r1
   13150:	muleq	r1, ip, r1
   13154:	muleq	r1, ip, r1
   13158:	muleq	r1, ip, r1
   1315c:	muleq	r1, ip, r1
   13160:	muleq	r1, ip, r1
   13164:	muleq	r1, ip, r1
   13168:	muleq	r1, ip, r1
   1316c:	muleq	r1, ip, r1
   13170:	muleq	r1, ip, r1
   13174:	muleq	r1, ip, r1
   13178:	muleq	r1, ip, r1
   1317c:	muleq	r1, ip, r1
   13180:	muleq	r1, ip, r1
   13184:	muleq	r1, ip, r1
   13188:	muleq	r1, ip, r1
   1318c:	andeq	r3, r1, r8, asr r2
   13190:	muleq	r1, ip, r2
   13194:	andeq	r3, r1, r8, asr r2
   13198:	andeq	r3, r1, r4, lsl #5
   1319c:	ldr	r0, [fp, #-64]	; 0xffffffc0
   131a0:	tst	r0, #1
   131a4:	bne	131d0 <__assert_fail@plt+0x1e60>
   131a8:	ldr	r1, [fp, #16]
   131ac:	ubfx	r0, r6, #5, #3
   131b0:	mov	r2, #1
   131b4:	ldr	r0, [r1, r0, lsl #2]
   131b8:	and	r1, r6, #31
   131bc:	tst	r0, r2, lsl r1
   131c0:	beq	131d0 <__assert_fail@plt+0x1e60>
   131c4:	mov	r0, r6
   131c8:	mov	r1, r9
   131cc:	b	131e4 <__assert_fail@plt+0x1e74>
   131d0:	ldr	r0, [fp, #-52]	; 0xffffffcc
   131d4:	mov	r1, r9
   131d8:	cmp	r0, #0
   131dc:	mov	r0, r6
   131e0:	beq	13524 <__assert_fail@plt+0x21b4>
   131e4:	ldr	r2, [fp, #-76]	; 0xffffffb4
   131e8:	tst	r2, #1
   131ec:	bne	13af4 <__assert_fail@plt+0x2784>
   131f0:	ldr	r2, [fp, #-68]	; 0xffffffbc
   131f4:	ldr	r3, [fp, #-56]	; 0xffffffc8
   131f8:	subs	r2, r2, #2
   131fc:	movwne	r2, #1
   13200:	orr	r2, r2, r3
   13204:	tst	r2, #1
   13208:	bne	13244 <__assert_fail@plt+0x1ed4>
   1320c:	cmp	r8, r4
   13210:	movcc	r2, #39	; 0x27
   13214:	strbcc	r2, [r5, r8]
   13218:	add	r2, r8, #1
   1321c:	cmp	r2, r4
   13220:	movcc	r3, #36	; 0x24
   13224:	strbcc	r3, [r5, r2]
   13228:	add	r2, r8, #2
   1322c:	add	r8, r8, #3
   13230:	cmp	r2, r4
   13234:	movcc	r3, #39	; 0x27
   13238:	strbcc	r3, [r5, r2]
   1323c:	mov	r2, #1
   13240:	str	r2, [fp, #-56]	; 0xffffffc8
   13244:	cmp	r8, r4
   13248:	movcc	r2, #92	; 0x5c
   1324c:	strbcc	r2, [r5, r8]
   13250:	add	r8, r8, #1
   13254:	b	13568 <__assert_fail@plt+0x21f8>
   13258:	cmp	lr, #1
   1325c:	beq	13284 <__assert_fail@plt+0x1f14>
   13260:	mov	r9, #0
   13264:	cmn	lr, #1
   13268:	bne	13290 <__assert_fail@plt+0x1f20>
   1326c:	ldrb	r0, [ip, #1]
   13270:	cmp	r0, #0
   13274:	beq	13284 <__assert_fail@plt+0x1f14>
   13278:	mvn	lr, #0
   1327c:	mov	sl, #0
   13280:	b	1319c <__assert_fail@plt+0x1e2c>
   13284:	mov	r9, #0
   13288:	cmp	r7, #0
   1328c:	beq	13298 <__assert_fail@plt+0x1f28>
   13290:	mov	sl, #0
   13294:	b	1319c <__assert_fail@plt+0x1e2c>
   13298:	mov	r1, #1
   1329c:	ldr	r0, [fp, #-68]	; 0xffffffbc
   132a0:	cmp	r0, #2
   132a4:	bne	132bc <__assert_fail@plt+0x1f4c>
   132a8:	ldr	r0, [fp, #-76]	; 0xffffffb4
   132ac:	mov	r9, r1
   132b0:	tst	r0, #1
   132b4:	beq	1319c <__assert_fail@plt+0x1e2c>
   132b8:	b	13af4 <__assert_fail@plt+0x2784>
   132bc:	mov	r9, r1
   132c0:	b	1319c <__assert_fail@plt+0x1e2c>
   132c4:	ldr	r0, [fp, #-68]	; 0xffffffbc
   132c8:	cmp	r0, #2
   132cc:	bne	13508 <__assert_fail@plt+0x2198>
   132d0:	ldr	r0, [fp, #-76]	; 0xffffffb4
   132d4:	tst	r0, #1
   132d8:	bne	13af4 <__assert_fail@plt+0x2784>
   132dc:	mov	sl, #0
   132e0:	b	1351c <__assert_fail@plt+0x21ac>
   132e4:	mov	r0, #102	; 0x66
   132e8:	b	13590 <__assert_fail@plt+0x2220>
   132ec:	mov	r2, #116	; 0x74
   132f0:	b	13300 <__assert_fail@plt+0x1f90>
   132f4:	mov	r0, #98	; 0x62
   132f8:	b	13590 <__assert_fail@plt+0x2220>
   132fc:	mov	r2, #114	; 0x72
   13300:	ldr	r0, [sp, #68]	; 0x44
   13304:	tst	r0, #1
   13308:	mov	r0, r2
   1330c:	bne	13590 <__assert_fail@plt+0x2220>
   13310:	b	13af4 <__assert_fail@plt+0x2784>
   13314:	ldr	r0, [sp, #84]	; 0x54
   13318:	tst	r0, #1
   1331c:	beq	135ac <__assert_fail@plt+0x223c>
   13320:	ldr	r0, [fp, #-76]	; 0xffffffb4
   13324:	tst	r0, #1
   13328:	bne	13be0 <__assert_fail@plt+0x2870>
   1332c:	ldr	r0, [fp, #-68]	; 0xffffffbc
   13330:	ldr	r1, [fp, #-56]	; 0xffffffc8
   13334:	subs	r0, r0, #2
   13338:	movwne	r0, #1
   1333c:	orr	r0, r0, r1
   13340:	tst	r0, #1
   13344:	bne	13380 <__assert_fail@plt+0x2010>
   13348:	cmp	r8, r4
   1334c:	movcc	r0, #39	; 0x27
   13350:	strbcc	r0, [r5, r8]
   13354:	add	r0, r8, #1
   13358:	cmp	r0, r4
   1335c:	movcc	r1, #36	; 0x24
   13360:	strbcc	r1, [r5, r0]
   13364:	add	r0, r8, #2
   13368:	add	r8, r8, #3
   1336c:	cmp	r0, r4
   13370:	movcc	r1, #39	; 0x27
   13374:	strbcc	r1, [r5, r0]
   13378:	mov	r0, #1
   1337c:	str	r0, [fp, #-56]	; 0xffffffc8
   13380:	ldr	r1, [fp, #-68]	; 0xffffffbc
   13384:	cmp	r8, r4
   13388:	mov	r9, #0
   1338c:	mov	sl, #1
   13390:	mov	r6, #48	; 0x30
   13394:	movcc	r0, #92	; 0x5c
   13398:	strbcc	r0, [r5, r8]
   1339c:	add	r0, r8, #1
   133a0:	cmp	r1, #2
   133a4:	beq	13774 <__assert_fail@plt+0x2404>
   133a8:	add	r1, r7, #1
   133ac:	cmp	r1, lr
   133b0:	bcs	13774 <__assert_fail@plt+0x2404>
   133b4:	ldrb	r1, [ip, r1]
   133b8:	sub	r1, r1, #48	; 0x30
   133bc:	uxtb	r1, r1
   133c0:	cmp	r1, #9
   133c4:	bhi	13774 <__assert_fail@plt+0x2404>
   133c8:	cmp	r0, r4
   133cc:	movcc	r1, #48	; 0x30
   133d0:	strbcc	r1, [r5, r0]
   133d4:	add	r0, r8, #2
   133d8:	add	r8, r8, #3
   133dc:	cmp	r0, r4
   133e0:	movcc	r1, #48	; 0x30
   133e4:	strbcc	r1, [r5, r0]
   133e8:	b	1319c <__assert_fail@plt+0x1e2c>
   133ec:	ldr	r0, [fp, #-68]	; 0xffffffbc
   133f0:	mov	sl, #0
   133f4:	mov	r6, #63	; 0x3f
   133f8:	cmp	r0, #5
   133fc:	beq	1377c <__assert_fail@plt+0x240c>
   13400:	cmp	r0, #2
   13404:	bne	13824 <__assert_fail@plt+0x24b4>
   13408:	ldr	r0, [fp, #-76]	; 0xffffffb4
   1340c:	mov	r9, #0
   13410:	tst	r0, #1
   13414:	beq	1319c <__assert_fail@plt+0x1e2c>
   13418:	b	13af4 <__assert_fail@plt+0x2784>
   1341c:	mov	r0, #118	; 0x76
   13420:	b	13590 <__assert_fail@plt+0x2220>
   13424:	mov	r0, #1
   13428:	mov	r6, #39	; 0x27
   1342c:	str	r0, [sp, #60]	; 0x3c
   13430:	ldr	r0, [fp, #-68]	; 0xffffffbc
   13434:	cmp	r0, #2
   13438:	bne	135c8 <__assert_fail@plt+0x2258>
   1343c:	ldr	r0, [fp, #-76]	; 0xffffffb4
   13440:	tst	r0, #1
   13444:	bne	13af4 <__assert_fail@plt+0x2784>
   13448:	ldr	r2, [sp, #56]	; 0x38
   1344c:	clz	r1, r4
   13450:	mov	sl, #0
   13454:	mov	r9, #1
   13458:	lsr	r1, r1, #5
   1345c:	cmp	r2, #0
   13460:	mov	r0, r2
   13464:	movwne	r0, #1
   13468:	orrs	r0, r0, r1
   1346c:	moveq	r2, r4
   13470:	moveq	r4, r0
   13474:	cmp	r8, r4
   13478:	str	r2, [sp, #56]	; 0x38
   1347c:	movcc	r0, #39	; 0x27
   13480:	strbcc	r0, [r5, r8]
   13484:	add	r0, r8, #1
   13488:	cmp	r0, r4
   1348c:	movcc	r1, #92	; 0x5c
   13490:	strbcc	r1, [r5, r0]
   13494:	add	r0, r8, #2
   13498:	add	r8, r8, #3
   1349c:	cmp	r0, r4
   134a0:	movcc	r1, #39	; 0x27
   134a4:	strbcc	r1, [r5, r0]
   134a8:	mov	r0, #0
   134ac:	str	r0, [fp, #-56]	; 0xffffffc8
   134b0:	b	1319c <__assert_fail@plt+0x1e2c>
   134b4:	ldr	r0, [sp, #40]	; 0x28
   134b8:	str	r4, [sp, #88]	; 0x58
   134bc:	cmp	r0, #1
   134c0:	bne	135d0 <__assert_fail@plt+0x2260>
   134c4:	str	lr, [sp, #28]
   134c8:	bl	1122c <__ctype_b_loc@plt>
   134cc:	ldr	r0, [r0]
   134d0:	ldr	ip, [fp, #-80]	; 0xffffffb0
   134d4:	mov	r2, #1
   134d8:	add	r0, r0, r6, lsl #1
   134dc:	ldrb	r0, [r0, #1]
   134e0:	ubfx	r9, r0, #6, #1
   134e4:	ldr	r0, [sp, #52]	; 0x34
   134e8:	cmp	r2, #1
   134ec:	orr	r0, r9, r0
   134f0:	bhi	1382c <__assert_fail@plt+0x24bc>
   134f4:	tst	r0, #1
   134f8:	beq	1382c <__assert_fail@plt+0x24bc>
   134fc:	ldr	lr, [sp, #28]
   13500:	ldr	r4, [sp, #88]	; 0x58
   13504:	b	1319c <__assert_fail@plt+0x1e2c>
   13508:	ldr	r1, [sp, #48]	; 0x30
   1350c:	mov	sl, #0
   13510:	mov	r0, #92	; 0x5c
   13514:	cmp	r1, #0
   13518:	beq	13590 <__assert_fail@plt+0x2220>
   1351c:	mov	r6, #92	; 0x5c
   13520:	mov	r9, #0
   13524:	cmp	sl, #0
   13528:	bne	13560 <__assert_fail@plt+0x21f0>
   1352c:	ldr	r0, [fp, #-56]	; 0xffffffc8
   13530:	tst	r0, #1
   13534:	beq	13560 <__assert_fail@plt+0x21f0>
   13538:	cmp	r8, r4
   1353c:	movcc	r0, #39	; 0x27
   13540:	strbcc	r0, [r5, r8]
   13544:	add	r0, r8, #1
   13548:	add	r8, r8, #2
   1354c:	cmp	r0, r4
   13550:	movcc	r1, #39	; 0x27
   13554:	strbcc	r1, [r5, r0]
   13558:	mov	r0, #0
   1355c:	str	r0, [fp, #-56]	; 0xffffffc8
   13560:	mov	r1, r9
   13564:	mov	r0, r6
   13568:	cmp	r8, r4
   1356c:	strbcc	r0, [r5, r8]
   13570:	ldr	r0, [fp, #-48]	; 0xffffffd0
   13574:	add	r8, r8, #1
   13578:	and	r0, r0, r1
   1357c:	str	r0, [fp, #-48]	; 0xffffffd0
   13580:	add	r7, r7, #1
   13584:	cmn	lr, #1
   13588:	bne	12ec8 <__assert_fail@plt+0x1b58>
   1358c:	b	12ed4 <__assert_fail@plt+0x1b64>
   13590:	ldr	r1, [sp, #84]	; 0x54
   13594:	mov	sl, #0
   13598:	mov	r9, #0
   1359c:	tst	r1, #1
   135a0:	mov	r1, #0
   135a4:	beq	1319c <__assert_fail@plt+0x1e2c>
   135a8:	b	131e4 <__assert_fail@plt+0x1e74>
   135ac:	ldr	r0, [sp, #36]	; 0x24
   135b0:	mov	r6, #0
   135b4:	mov	sl, #0
   135b8:	mov	r9, #0
   135bc:	cmp	r0, #0
   135c0:	beq	1319c <__assert_fail@plt+0x1e2c>
   135c4:	b	13580 <__assert_fail@plt+0x2210>
   135c8:	mov	r9, #1
   135cc:	b	1319c <__assert_fail@plt+0x1e2c>
   135d0:	mov	r0, #0
   135d4:	cmn	lr, #1
   135d8:	sub	r4, fp, #40	; 0x28
   135dc:	str	r0, [fp, #-36]	; 0xffffffdc
   135e0:	str	r0, [fp, #-40]	; 0xffffffd8
   135e4:	bne	135f8 <__assert_fail@plt+0x2288>
   135e8:	mov	r0, ip
   135ec:	bl	1125c <strlen@plt>
   135f0:	ldr	ip, [fp, #-80]	; 0xffffffb0
   135f4:	mov	lr, r0
   135f8:	ldr	r0, [sp, #72]	; 0x48
   135fc:	mov	r9, #1
   13600:	mov	r2, #0
   13604:	str	lr, [sp, #28]
   13608:	add	r0, r0, r7
   1360c:	str	r0, [sp, #20]
   13610:	b	13654 <__assert_fail@plt+0x22e4>
   13614:	ldr	r5, [sp, #44]	; 0x2c
   13618:	add	r5, r0, r5
   1361c:	ldr	r0, [fp, #-44]	; 0xffffffd4
   13620:	bl	11178 <iswprint@plt>
   13624:	cmp	r0, #0
   13628:	sub	r4, fp, #40	; 0x28
   1362c:	movwne	r0, #1
   13630:	and	r9, r9, r0
   13634:	mov	r0, r4
   13638:	bl	1113c <mbsinit@plt>
   1363c:	mov	r2, r5
   13640:	ldr	lr, [sp, #28]
   13644:	ldr	r5, [fp, #-84]	; 0xffffffac
   13648:	ldr	ip, [fp, #-80]	; 0xffffffb0
   1364c:	cmp	r0, #0
   13650:	bne	134e4 <__assert_fail@plt+0x2174>
   13654:	add	r0, r2, r7
   13658:	str	r2, [sp, #44]	; 0x2c
   1365c:	mov	r3, r4
   13660:	add	r1, ip, r0
   13664:	str	r0, [sp, #24]
   13668:	sub	r2, lr, r0
   1366c:	sub	r0, fp, #44	; 0x2c
   13670:	bl	1629c <__assert_fail@plt+0x4f2c>
   13674:	cmp	r0, #0
   13678:	beq	13a1c <__assert_fail@plt+0x26ac>
   1367c:	cmn	r0, #1
   13680:	beq	139d8 <__assert_fail@plt+0x2668>
   13684:	ldr	lr, [sp, #28]
   13688:	cmn	r0, #2
   1368c:	beq	139e0 <__assert_fail@plt+0x2670>
   13690:	ldr	r2, [sp, #64]	; 0x40
   13694:	ldr	r4, [sp, #88]	; 0x58
   13698:	ldr	ip, [sp, #84]	; 0x54
   1369c:	cmp	r0, #2
   136a0:	mov	r1, #0
   136a4:	movwcc	r1, #1
   136a8:	eor	r2, r2, #1
   136ac:	orrs	r1, r2, r1
   136b0:	bne	13614 <__assert_fail@plt+0x22a4>
   136b4:	ldr	r1, [sp, #44]	; 0x2c
   136b8:	ldr	r2, [sp, #20]
   136bc:	add	r1, r2, r1
   136c0:	sub	r2, r0, #1
   136c4:	b	136d4 <__assert_fail@plt+0x2364>
   136c8:	add	r1, r1, #1
   136cc:	subs	r2, r2, #1
   136d0:	beq	13614 <__assert_fail@plt+0x22a4>
   136d4:	ldrb	r3, [r1]
   136d8:	sub	r3, r3, #91	; 0x5b
   136dc:	cmp	r3, #33	; 0x21
   136e0:	bhi	136c8 <__assert_fail@plt+0x2358>
   136e4:	add	r5, pc, #0
   136e8:	ldr	pc, [r5, r3, lsl #2]
   136ec:	ldrdeq	r3, [r1], -r0
   136f0:	ldrdeq	r3, [r1], -r0
   136f4:	andeq	r3, r1, r8, asr #13
   136f8:	ldrdeq	r3, [r1], -r0
   136fc:	andeq	r3, r1, r8, asr #13
   13700:	ldrdeq	r3, [r1], -r0
   13704:	andeq	r3, r1, r8, asr #13
   13708:	andeq	r3, r1, r8, asr #13
   1370c:	andeq	r3, r1, r8, asr #13
   13710:	andeq	r3, r1, r8, asr #13
   13714:	andeq	r3, r1, r8, asr #13
   13718:	andeq	r3, r1, r8, asr #13
   1371c:	andeq	r3, r1, r8, asr #13
   13720:	andeq	r3, r1, r8, asr #13
   13724:	andeq	r3, r1, r8, asr #13
   13728:	andeq	r3, r1, r8, asr #13
   1372c:	andeq	r3, r1, r8, asr #13
   13730:	andeq	r3, r1, r8, asr #13
   13734:	andeq	r3, r1, r8, asr #13
   13738:	andeq	r3, r1, r8, asr #13
   1373c:	andeq	r3, r1, r8, asr #13
   13740:	andeq	r3, r1, r8, asr #13
   13744:	andeq	r3, r1, r8, asr #13
   13748:	andeq	r3, r1, r8, asr #13
   1374c:	andeq	r3, r1, r8, asr #13
   13750:	andeq	r3, r1, r8, asr #13
   13754:	andeq	r3, r1, r8, asr #13
   13758:	andeq	r3, r1, r8, asr #13
   1375c:	andeq	r3, r1, r8, asr #13
   13760:	andeq	r3, r1, r8, asr #13
   13764:	andeq	r3, r1, r8, asr #13
   13768:	andeq	r3, r1, r8, asr #13
   1376c:	andeq	r3, r1, r8, asr #13
   13770:	ldrdeq	r3, [r1], -r0
   13774:	mov	r8, r0
   13778:	b	1319c <__assert_fail@plt+0x1e2c>
   1377c:	ldr	r0, [sp, #32]
   13780:	cmp	r0, #0
   13784:	beq	13824 <__assert_fail@plt+0x24b4>
   13788:	add	r0, r7, #2
   1378c:	cmp	r0, lr
   13790:	bcs	13824 <__assert_fail@plt+0x24b4>
   13794:	add	r1, r7, ip
   13798:	ldrb	r1, [r1, #1]
   1379c:	cmp	r1, #63	; 0x3f
   137a0:	bne	13824 <__assert_fail@plt+0x24b4>
   137a4:	ldrb	r9, [ip, r0]
   137a8:	sub	r2, r9, #33	; 0x21
   137ac:	cmp	r2, #29
   137b0:	bhi	13824 <__assert_fail@plt+0x24b4>
   137b4:	movw	r1, #20929	; 0x51c1
   137b8:	mov	r3, #1
   137bc:	movt	r1, #14336	; 0x3800
   137c0:	tst	r1, r3, lsl r2
   137c4:	beq	13824 <__assert_fail@plt+0x24b4>
   137c8:	ldr	r1, [fp, #-76]	; 0xffffffb4
   137cc:	tst	r1, #1
   137d0:	bne	13af4 <__assert_fail@plt+0x2784>
   137d4:	cmp	r8, r4
   137d8:	add	r2, r8, #1
   137dc:	mov	r6, r9
   137e0:	mov	r7, r0
   137e4:	mov	r9, #0
   137e8:	movcc	r1, #63	; 0x3f
   137ec:	strbcc	r1, [r5, r8]
   137f0:	cmp	r2, r4
   137f4:	movcc	r1, #34	; 0x22
   137f8:	strbcc	r1, [r5, r2]
   137fc:	add	r2, r8, #2
   13800:	cmp	r2, r4
   13804:	movcc	r1, #34	; 0x22
   13808:	strbcc	r1, [r5, r2]
   1380c:	add	r2, r8, #3
   13810:	add	r8, r8, #4
   13814:	cmp	r2, r4
   13818:	movcc	r1, #63	; 0x3f
   1381c:	strbcc	r1, [r5, r2]
   13820:	b	1319c <__assert_fail@plt+0x1e2c>
   13824:	mov	r9, #0
   13828:	b	1319c <__assert_fail@plt+0x1e2c>
   1382c:	ldr	lr, [sp, #28]
   13830:	ldr	r4, [fp, #-56]	; 0xffffffc8
   13834:	add	r1, r2, r7
   13838:	mov	r2, #0
   1383c:	str	r1, [sp, #44]	; 0x2c
   13840:	tst	r0, #1
   13844:	bne	13960 <__assert_fail@plt+0x25f0>
   13848:	ldr	r1, [fp, #-76]	; 0xffffffb4
   1384c:	tst	r1, #1
   13850:	bne	13af0 <__assert_fail@plt+0x2780>
   13854:	ldr	r1, [fp, #-68]	; 0xffffffbc
   13858:	subs	r2, r1, #2
   1385c:	movwne	r2, #1
   13860:	orr	r2, r2, r4
   13864:	tst	r2, #1
   13868:	bne	138ac <__assert_fail@plt+0x253c>
   1386c:	ldr	r1, [sp, #88]	; 0x58
   13870:	add	r2, r8, #1
   13874:	mov	r4, #1
   13878:	cmp	r8, r1
   1387c:	movcc	r1, #39	; 0x27
   13880:	strbcc	r1, [r5, r8]
   13884:	ldr	r1, [sp, #88]	; 0x58
   13888:	cmp	r2, r1
   1388c:	movcc	r1, #36	; 0x24
   13890:	strbcc	r1, [r5, r2]
   13894:	ldr	r1, [sp, #88]	; 0x58
   13898:	add	r2, r8, #2
   1389c:	add	r8, r8, #3
   138a0:	cmp	r2, r1
   138a4:	movcc	r1, #39	; 0x27
   138a8:	strbcc	r1, [r5, r2]
   138ac:	ldr	r1, [sp, #88]	; 0x58
   138b0:	add	r2, r8, #1
   138b4:	cmp	r8, r1
   138b8:	movcc	r1, #92	; 0x5c
   138bc:	strbcc	r1, [r5, r8]
   138c0:	ldr	r1, [sp, #88]	; 0x58
   138c4:	cmp	r2, r1
   138c8:	bcs	138dc <__assert_fail@plt+0x256c>
   138cc:	uxtb	r3, r6
   138d0:	mov	r1, #48	; 0x30
   138d4:	orr	r3, r1, r3, lsr #6
   138d8:	strb	r3, [r5, r2]
   138dc:	ldr	r1, [sp, #88]	; 0x58
   138e0:	add	r2, r8, #2
   138e4:	add	r8, r8, #3
   138e8:	cmp	r2, r1
   138ec:	lsrcc	r3, r6, #3
   138f0:	movcc	r1, #6
   138f4:	bficc	r3, r1, #3, #29
   138f8:	mov	r1, #6
   138fc:	bfi	r6, r1, #3, #29
   13900:	strbcc	r3, [r5, r2]
   13904:	mov	r2, #1
   13908:	b	13988 <__assert_fail@plt+0x2618>
   1390c:	ldr	r1, [sp, #88]	; 0x58
   13910:	ldr	r5, [fp, #-84]	; 0xffffffac
   13914:	ldr	r4, [sp, #88]	; 0x58
   13918:	cmp	r8, r1
   1391c:	movcc	r1, #39	; 0x27
   13920:	strbcc	r1, [r5, r8]
   13924:	add	r1, r8, #1
   13928:	add	r8, r8, #2
   1392c:	cmp	r1, r4
   13930:	movcc	r4, #39	; 0x27
   13934:	strbcc	r4, [r5, r1]
   13938:	mov	r4, #0
   1393c:	ldr	r1, [sp, #88]	; 0x58
   13940:	cmp	r8, r1
   13944:	ldr	r1, [sp, #72]	; 0x48
   13948:	strbcc	r6, [r5, r8]
   1394c:	add	r8, r8, #1
   13950:	ldrb	r6, [r1, r7]
   13954:	mov	r7, r3
   13958:	tst	r0, #1
   1395c:	beq	13848 <__assert_fail@plt+0x24d8>
   13960:	ldr	r1, [fp, #-52]	; 0xffffffcc
   13964:	tst	r1, #1
   13968:	beq	13980 <__assert_fail@plt+0x2610>
   1396c:	ldr	r1, [sp, #88]	; 0x58
   13970:	cmp	r8, r1
   13974:	movcc	r1, #92	; 0x5c
   13978:	strbcc	r1, [r5, r8]
   1397c:	add	r8, r8, #1
   13980:	mov	r1, #0
   13984:	str	r1, [fp, #-52]	; 0xffffffcc
   13988:	ldr	r1, [sp, #44]	; 0x2c
   1398c:	add	r3, r7, #1
   13990:	and	sl, r2, #1
   13994:	cmp	r1, r3
   13998:	bls	139bc <__assert_fail@plt+0x264c>
   1399c:	cmp	sl, #0
   139a0:	mvn	r5, r4
   139a4:	movwne	sl, #1
   139a8:	orr	r5, r5, sl
   139ac:	tst	r5, #1
   139b0:	beq	1390c <__assert_fail@plt+0x259c>
   139b4:	ldr	r5, [fp, #-84]	; 0xffffffac
   139b8:	b	1393c <__assert_fail@plt+0x25cc>
   139bc:	str	r4, [fp, #-56]	; 0xffffffc8
   139c0:	ldr	r4, [sp, #88]	; 0x58
   139c4:	cmp	sl, #0
   139c8:	movwne	sl, #1
   139cc:	cmp	sl, #0
   139d0:	beq	1352c <__assert_fail@plt+0x21bc>
   139d4:	b	13560 <__assert_fail@plt+0x21f0>
   139d8:	mov	r9, #0
   139dc:	b	13a1c <__assert_fail@plt+0x26ac>
   139e0:	ldr	r0, [sp, #24]
   139e4:	mov	r9, #0
   139e8:	cmp	lr, r0
   139ec:	bls	13a1c <__assert_fail@plt+0x26ac>
   139f0:	ldr	ip, [fp, #-80]	; 0xffffffb0
   139f4:	ldr	r2, [sp, #44]	; 0x2c
   139f8:	add	r0, ip, r7
   139fc:	ldrb	r1, [r0, r2]
   13a00:	cmp	r1, #0
   13a04:	beq	134e4 <__assert_fail@plt+0x2174>
   13a08:	add	r2, r2, #1
   13a0c:	add	r1, r7, r2
   13a10:	cmp	r1, lr
   13a14:	bcc	139fc <__assert_fail@plt+0x268c>
   13a18:	b	134e4 <__assert_fail@plt+0x2174>
   13a1c:	ldr	ip, [fp, #-80]	; 0xffffffb0
   13a20:	ldr	r2, [sp, #44]	; 0x2c
   13a24:	b	134e4 <__assert_fail@plt+0x2174>
   13a28:	mov	lr, r7
   13a2c:	b	13a34 <__assert_fail@plt+0x26c4>
   13a30:	mvn	lr, #0
   13a34:	ldr	r1, [fp, #-68]	; 0xffffffbc
   13a38:	ldr	r2, [fp, #-76]	; 0xffffffb4
   13a3c:	eor	r0, r1, #2
   13a40:	orr	r0, r0, r8
   13a44:	clz	r0, r0
   13a48:	lsr	r0, r0, #5
   13a4c:	tst	r2, r0
   13a50:	bne	13af4 <__assert_fail@plt+0x2784>
   13a54:	subs	r0, r1, #2
   13a58:	movwne	r0, #1
   13a5c:	orr	r0, r2, r0
   13a60:	tst	r0, #1
   13a64:	ldreq	r0, [sp, #60]	; 0x3c
   13a68:	eoreq	r0, r0, #1
   13a6c:	tsteq	r0, #1
   13a70:	bne	13b88 <__assert_fail@plt+0x2818>
   13a74:	ldr	r0, [fp, #-48]	; 0xffffffd0
   13a78:	mov	sl, lr
   13a7c:	tst	r0, #1
   13a80:	bne	13b54 <__assert_fail@plt+0x27e4>
   13a84:	ldr	r6, [sp, #56]	; 0x38
   13a88:	mov	r9, #0
   13a8c:	cmp	r6, #0
   13a90:	beq	13b80 <__assert_fail@plt+0x2810>
   13a94:	ldr	r0, [sp, #84]	; 0x54
   13a98:	mov	r1, #0
   13a9c:	mov	r7, #2
   13aa0:	cmp	r4, #0
   13aa4:	str	r1, [fp, #-48]	; 0xffffffd0
   13aa8:	mov	r1, #0
   13aac:	str	r1, [fp, #-76]	; 0xffffffb4
   13ab0:	beq	12c50 <__assert_fail@plt+0x18e0>
   13ab4:	b	13b88 <__assert_fail@plt+0x2818>
   13ab8:	ldr	ip, [fp, #-80]	; 0xffffffb0
   13abc:	ldr	r1, [fp, #12]
   13ac0:	ldr	r2, [fp, #-68]	; 0xffffffbc
   13ac4:	mov	lr, r4
   13ac8:	mov	r4, r6
   13acc:	b	13b14 <__assert_fail@plt+0x27a4>
   13ad0:	tst	ip, #1
   13ad4:	ldr	r5, [fp, #-84]	; 0xffffffac
   13ad8:	ldr	ip, [fp, #-80]	; 0xffffffb0
   13adc:	ldr	r1, [fp, #12]
   13ae0:	mov	r0, #2
   13ae4:	movwne	r0, #4
   13ae8:	mov	r2, r0
   13aec:	b	13b14 <__assert_fail@plt+0x27a4>
   13af0:	ldr	r4, [sp, #88]	; 0x58
   13af4:	ldr	r1, [sp, #84]	; 0x54
   13af8:	mov	r0, #2
   13afc:	tst	r1, #1
   13b00:	movwne	r0, #4
   13b04:	ldr	r2, [fp, #-68]	; 0xffffffbc
   13b08:	ldr	r1, [fp, #12]
   13b0c:	cmp	r2, #2
   13b10:	moveq	r2, r0
   13b14:	mov	r0, #0
   13b18:	bic	r1, r1, #2
   13b1c:	str	r2, [sp]
   13b20:	mov	r2, ip
   13b24:	mov	r3, lr
   13b28:	str	r0, [sp, #8]
   13b2c:	ldr	r0, [sp, #76]	; 0x4c
   13b30:	str	r1, [sp, #4]
   13b34:	mov	r1, r4
   13b38:	str	r0, [sp, #12]
   13b3c:	ldr	r0, [sp, #80]	; 0x50
   13b40:	str	r0, [sp, #16]
   13b44:	mov	r0, r5
   13b48:	bl	12bc0 <__assert_fail@plt+0x1850>
   13b4c:	mov	r8, r0
   13b50:	b	13bd4 <__assert_fail@plt+0x2864>
   13b54:	mov	r0, #5
   13b58:	ldr	r1, [sp, #56]	; 0x38
   13b5c:	ldr	r2, [fp, #-80]	; 0xffffffb0
   13b60:	mov	r3, sl
   13b64:	str	r0, [sp]
   13b68:	ldr	r0, [fp, #12]
   13b6c:	str	r0, [sp, #4]
   13b70:	ldr	r0, [fp, #16]
   13b74:	str	r0, [sp, #8]
   13b78:	ldr	r0, [sp, #76]	; 0x4c
   13b7c:	b	13b38 <__assert_fail@plt+0x27c8>
   13b80:	mov	r0, #0
   13b84:	str	r0, [fp, #-76]	; 0xffffffb4
   13b88:	ldr	r1, [fp, #-88]	; 0xffffffa8
   13b8c:	cmp	r1, #0
   13b90:	beq	13bc8 <__assert_fail@plt+0x2858>
   13b94:	ldr	r0, [fp, #-76]	; 0xffffffb4
   13b98:	tst	r0, #1
   13b9c:	bne	13bc8 <__assert_fail@plt+0x2858>
   13ba0:	ldrb	r0, [r1]
   13ba4:	cmp	r0, #0
   13ba8:	beq	13bc8 <__assert_fail@plt+0x2858>
   13bac:	add	r1, r1, #1
   13bb0:	cmp	r8, r4
   13bb4:	strbcc	r0, [r5, r8]
   13bb8:	add	r8, r8, #1
   13bbc:	ldrb	r0, [r1], #1
   13bc0:	cmp	r0, #0
   13bc4:	bne	13bb0 <__assert_fail@plt+0x2840>
   13bc8:	cmp	r8, r4
   13bcc:	movcc	r0, #0
   13bd0:	strbcc	r0, [r5, r8]
   13bd4:	mov	r0, r8
   13bd8:	sub	sp, fp, #28
   13bdc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13be0:	mov	r0, #4
   13be4:	b	13b04 <__assert_fail@plt+0x2794>
   13be8:	bl	1134c <abort@plt>
   13bec:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13bf0:	add	fp, sp, #28
   13bf4:	sub	sp, sp, #28
   13bf8:	movw	r5, #33256	; 0x81e8
   13bfc:	cmp	r2, #0
   13c00:	mov	r4, r1
   13c04:	mov	r7, r0
   13c08:	str	r0, [sp, #20]
   13c0c:	movt	r5, #2
   13c10:	movne	r5, r2
   13c14:	bl	11274 <__errno_location@plt>
   13c18:	mov	sl, r0
   13c1c:	ldr	r2, [r5, #40]	; 0x28
   13c20:	ldr	r3, [r5, #44]	; 0x2c
   13c24:	ldm	r5, {r0, r1}
   13c28:	orr	r8, r1, #1
   13c2c:	add	r9, r5, #8
   13c30:	mov	r1, #0
   13c34:	ldr	r6, [sl]
   13c38:	stm	sp, {r0, r8, r9}
   13c3c:	mov	r0, #0
   13c40:	str	r2, [sp, #12]
   13c44:	str	r3, [sp, #16]
   13c48:	mov	r2, r7
   13c4c:	mov	r3, r4
   13c50:	str	r6, [sp, #24]
   13c54:	mov	r6, r4
   13c58:	bl	12bc0 <__assert_fail@plt+0x1850>
   13c5c:	add	r7, r0, #1
   13c60:	mov	r0, r7
   13c64:	bl	151b8 <__assert_fail@plt+0x3e48>
   13c68:	mov	r4, r0
   13c6c:	ldr	r0, [r5]
   13c70:	ldr	r2, [r5, #44]	; 0x2c
   13c74:	ldr	r1, [r5, #40]	; 0x28
   13c78:	mov	r3, r6
   13c7c:	stm	sp, {r0, r8, r9}
   13c80:	str	r2, [sp, #16]
   13c84:	ldr	r2, [sp, #20]
   13c88:	str	r1, [sp, #12]
   13c8c:	mov	r0, r4
   13c90:	mov	r1, r7
   13c94:	bl	12bc0 <__assert_fail@plt+0x1850>
   13c98:	ldr	r0, [sp, #24]
   13c9c:	str	r0, [sl]
   13ca0:	mov	r0, r4
   13ca4:	sub	sp, fp, #28
   13ca8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13cac:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13cb0:	add	fp, sp, #28
   13cb4:	sub	sp, sp, #36	; 0x24
   13cb8:	movw	r8, #33256	; 0x81e8
   13cbc:	cmp	r3, #0
   13cc0:	mov	r4, r2
   13cc4:	str	r2, [sp, #24]
   13cc8:	mov	r5, r1
   13ccc:	mov	r6, r0
   13cd0:	str	r0, [sp, #20]
   13cd4:	movt	r8, #2
   13cd8:	movne	r8, r3
   13cdc:	bl	11274 <__errno_location@plt>
   13ce0:	str	r0, [sp, #28]
   13ce4:	ldr	r1, [r8, #40]	; 0x28
   13ce8:	ldr	r2, [r8, #44]	; 0x2c
   13cec:	ldr	r7, [r0]
   13cf0:	cmp	r4, #0
   13cf4:	add	sl, r8, #8
   13cf8:	mov	r0, #0
   13cfc:	ldm	r8, {r3, r9}
   13d00:	orreq	r9, r9, #1
   13d04:	stm	sp, {r3, r9, sl}
   13d08:	str	r1, [sp, #12]
   13d0c:	str	r2, [sp, #16]
   13d10:	mov	r1, #0
   13d14:	mov	r2, r6
   13d18:	mov	r3, r5
   13d1c:	str	r7, [sp, #32]
   13d20:	mov	r7, r5
   13d24:	bl	12bc0 <__assert_fail@plt+0x1850>
   13d28:	add	r4, r0, #1
   13d2c:	mov	r5, r0
   13d30:	mov	r0, r4
   13d34:	bl	151b8 <__assert_fail@plt+0x3e48>
   13d38:	mov	r6, r0
   13d3c:	ldr	r0, [r8]
   13d40:	ldr	r2, [r8, #44]	; 0x2c
   13d44:	ldr	r1, [r8, #40]	; 0x28
   13d48:	mov	r3, r7
   13d4c:	stm	sp, {r0, r9, sl}
   13d50:	str	r2, [sp, #16]
   13d54:	ldr	r2, [sp, #20]
   13d58:	str	r1, [sp, #12]
   13d5c:	mov	r0, r6
   13d60:	mov	r1, r4
   13d64:	bl	12bc0 <__assert_fail@plt+0x1850>
   13d68:	ldr	r0, [sp, #24]
   13d6c:	ldr	r1, [sp, #32]
   13d70:	ldr	r2, [sp, #28]
   13d74:	cmp	r0, #0
   13d78:	str	r1, [r2]
   13d7c:	strne	r5, [r0]
   13d80:	mov	r0, r6
   13d84:	sub	sp, fp, #28
   13d88:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13d8c:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   13d90:	add	fp, sp, #24
   13d94:	movw	r5, #33060	; 0x8124
   13d98:	movw	r8, #33056	; 0x8120
   13d9c:	movt	r5, #2
   13da0:	movt	r8, #2
   13da4:	ldr	r0, [r5]
   13da8:	ldr	r4, [r8]
   13dac:	cmp	r0, #2
   13db0:	blt	13ddc <__assert_fail@plt+0x2a6c>
   13db4:	add	r7, r4, #12
   13db8:	mov	r6, #0
   13dbc:	ldr	r0, [r7, r6, lsl #3]
   13dc0:	bl	12900 <__assert_fail@plt+0x1590>
   13dc4:	ldr	r1, [r5]
   13dc8:	add	r2, r6, #2
   13dcc:	add	r0, r6, #1
   13dd0:	mov	r6, r0
   13dd4:	cmp	r2, r1
   13dd8:	blt	13dbc <__assert_fail@plt+0x2a4c>
   13ddc:	ldr	r0, [r4, #4]
   13de0:	movw	r9, #33304	; 0x8218
   13de4:	movw	r7, #33064	; 0x8128
   13de8:	movt	r9, #2
   13dec:	movt	r7, #2
   13df0:	cmp	r0, r9
   13df4:	beq	13e04 <__assert_fail@plt+0x2a94>
   13df8:	bl	12900 <__assert_fail@plt+0x1590>
   13dfc:	mov	r0, #256	; 0x100
   13e00:	stm	r7, {r0, r9}
   13e04:	cmp	r4, r7
   13e08:	beq	13e18 <__assert_fail@plt+0x2aa8>
   13e0c:	mov	r0, r4
   13e10:	bl	12900 <__assert_fail@plt+0x1590>
   13e14:	str	r7, [r8]
   13e18:	mov	r0, #1
   13e1c:	str	r0, [r5]
   13e20:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   13e24:	movw	r3, #33256	; 0x81e8
   13e28:	mvn	r2, #0
   13e2c:	movt	r3, #2
   13e30:	b	13e34 <__assert_fail@plt+0x2ac4>
   13e34:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13e38:	add	fp, sp, #28
   13e3c:	sub	sp, sp, #44	; 0x2c
   13e40:	mov	r7, r3
   13e44:	str	r2, [sp, #36]	; 0x24
   13e48:	str	r1, [sp, #32]
   13e4c:	mov	r5, r0
   13e50:	bl	11274 <__errno_location@plt>
   13e54:	cmp	r5, #0
   13e58:	bmi	13fc8 <__assert_fail@plt+0x2c58>
   13e5c:	cmn	r5, #-2147483647	; 0x80000001
   13e60:	beq	13fc8 <__assert_fail@plt+0x2c58>
   13e64:	movw	r8, #33060	; 0x8124
   13e68:	movw	r4, #33056	; 0x8120
   13e6c:	str	r0, [sp, #28]
   13e70:	ldr	r0, [r0]
   13e74:	movt	r8, #2
   13e78:	movt	r4, #2
   13e7c:	ldr	r1, [r8]
   13e80:	ldr	r6, [r4]
   13e84:	str	r0, [sp, #24]
   13e88:	cmp	r1, r5
   13e8c:	ble	13e98 <__assert_fail@plt+0x2b28>
   13e90:	mov	sl, r6
   13e94:	b	13f04 <__assert_fail@plt+0x2b94>
   13e98:	movw	r9, #33064	; 0x8128
   13e9c:	mov	r0, #8
   13ea0:	str	r1, [fp, #-32]	; 0xffffffe0
   13ea4:	sub	r1, r5, r1
   13ea8:	mvn	r3, #-2147483648	; 0x80000000
   13eac:	movt	r9, #2
   13eb0:	str	r0, [sp]
   13eb4:	add	r2, r1, #1
   13eb8:	sub	r1, fp, #32
   13ebc:	subs	r0, r6, r9
   13ec0:	movne	r0, r6
   13ec4:	bl	153b8 <__assert_fail@plt+0x4048>
   13ec8:	mov	sl, r0
   13ecc:	cmp	r6, r9
   13ed0:	str	r0, [r4]
   13ed4:	bne	13ee0 <__assert_fail@plt+0x2b70>
   13ed8:	ldrd	r0, [r9]
   13edc:	stm	sl, {r0, r1}
   13ee0:	ldr	r1, [r8]
   13ee4:	ldr	r2, [fp, #-32]	; 0xffffffe0
   13ee8:	add	r0, sl, r1, lsl #3
   13eec:	sub	r1, r2, r1
   13ef0:	lsl	r2, r1, #3
   13ef4:	mov	r1, #0
   13ef8:	bl	112a4 <memset@plt>
   13efc:	ldr	r0, [fp, #-32]	; 0xffffffe0
   13f00:	str	r0, [r8]
   13f04:	mov	r9, sl
   13f08:	ldm	r7, {r0, r1}
   13f0c:	orr	r8, r1, #1
   13f10:	add	r1, r7, #8
   13f14:	ldr	r2, [r7, #40]	; 0x28
   13f18:	ldr	r3, [r7, #44]	; 0x2c
   13f1c:	ldr	r6, [r9, r5, lsl #3]!
   13f20:	str	r1, [sp, #20]
   13f24:	ldr	r4, [r9, #4]!
   13f28:	stm	sp, {r0, r8}
   13f2c:	add	r0, sp, #8
   13f30:	stm	r0, {r1, r2, r3}
   13f34:	ldr	r2, [sp, #32]
   13f38:	ldr	r3, [sp, #36]	; 0x24
   13f3c:	mov	r1, r6
   13f40:	mov	r0, r4
   13f44:	bl	12bc0 <__assert_fail@plt+0x1850>
   13f48:	cmp	r6, r0
   13f4c:	bhi	13fb0 <__assert_fail@plt+0x2c40>
   13f50:	add	r6, r0, #1
   13f54:	movw	r0, #33304	; 0x8218
   13f58:	movt	r0, #2
   13f5c:	str	r6, [sl, r5, lsl #3]
   13f60:	cmp	r4, r0
   13f64:	beq	13f70 <__assert_fail@plt+0x2c00>
   13f68:	mov	r0, r4
   13f6c:	bl	12900 <__assert_fail@plt+0x1590>
   13f70:	mov	r0, r6
   13f74:	bl	151b8 <__assert_fail@plt+0x3e48>
   13f78:	str	r0, [r9]
   13f7c:	mov	r4, r0
   13f80:	add	r3, sp, #8
   13f84:	ldr	r0, [r7]
   13f88:	ldr	r1, [r7, #40]	; 0x28
   13f8c:	ldr	r2, [r7, #44]	; 0x2c
   13f90:	stm	sp, {r0, r8}
   13f94:	ldr	r0, [sp, #20]
   13f98:	stm	r3, {r0, r1, r2}
   13f9c:	ldr	r2, [sp, #32]
   13fa0:	ldr	r3, [sp, #36]	; 0x24
   13fa4:	mov	r0, r4
   13fa8:	mov	r1, r6
   13fac:	bl	12bc0 <__assert_fail@plt+0x1850>
   13fb0:	ldr	r0, [sp, #28]
   13fb4:	ldr	r1, [sp, #24]
   13fb8:	str	r1, [r0]
   13fbc:	mov	r0, r4
   13fc0:	sub	sp, fp, #28
   13fc4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13fc8:	bl	1134c <abort@plt>
   13fcc:	movw	r3, #33256	; 0x81e8
   13fd0:	movt	r3, #2
   13fd4:	b	13e34 <__assert_fail@plt+0x2ac4>
   13fd8:	movw	r3, #33256	; 0x81e8
   13fdc:	mov	r1, r0
   13fe0:	mov	r0, #0
   13fe4:	mvn	r2, #0
   13fe8:	movt	r3, #2
   13fec:	b	13e34 <__assert_fail@plt+0x2ac4>
   13ff0:	movw	r3, #33256	; 0x81e8
   13ff4:	mov	r2, r1
   13ff8:	mov	r1, r0
   13ffc:	mov	r0, #0
   14000:	movt	r3, #2
   14004:	b	13e34 <__assert_fail@plt+0x2ac4>
   14008:	push	{fp, lr}
   1400c:	mov	fp, sp
   14010:	sub	sp, sp, #48	; 0x30
   14014:	vmov.i32	q8, #0	; 0x00000000
   14018:	mov	ip, #32
   1401c:	mov	r3, sp
   14020:	mov	lr, r2
   14024:	cmp	r1, #10
   14028:	add	r2, r3, #16
   1402c:	vst1.64	{d16-d17}, [r3], ip
   14030:	vst1.64	{d16-d17}, [r2]
   14034:	vst1.64	{d16-d17}, [r3]
   14038:	beq	14058 <__assert_fail@plt+0x2ce8>
   1403c:	str	r1, [sp]
   14040:	mov	r3, sp
   14044:	mov	r1, lr
   14048:	mvn	r2, #0
   1404c:	bl	13e34 <__assert_fail@plt+0x2ac4>
   14050:	mov	sp, fp
   14054:	pop	{fp, pc}
   14058:	bl	1134c <abort@plt>
   1405c:	push	{r4, sl, fp, lr}
   14060:	add	fp, sp, #8
   14064:	sub	sp, sp, #48	; 0x30
   14068:	vmov.i32	q8, #0	; 0x00000000
   1406c:	mov	ip, r3
   14070:	mov	r3, sp
   14074:	mov	lr, #32
   14078:	cmp	r1, #10
   1407c:	add	r4, r3, #16
   14080:	vst1.64	{d16-d17}, [r3], lr
   14084:	vst1.64	{d16-d17}, [r4]
   14088:	vst1.64	{d16-d17}, [r3]
   1408c:	beq	140ac <__assert_fail@plt+0x2d3c>
   14090:	str	r1, [sp]
   14094:	mov	r1, r2
   14098:	mov	r3, sp
   1409c:	mov	r2, ip
   140a0:	bl	13e34 <__assert_fail@plt+0x2ac4>
   140a4:	sub	sp, fp, #8
   140a8:	pop	{r4, sl, fp, pc}
   140ac:	bl	1134c <abort@plt>
   140b0:	push	{fp, lr}
   140b4:	mov	fp, sp
   140b8:	sub	sp, sp, #48	; 0x30
   140bc:	vmov.i32	q8, #0	; 0x00000000
   140c0:	mov	r3, sp
   140c4:	mov	ip, #32
   140c8:	cmp	r0, #10
   140cc:	add	r2, r3, #16
   140d0:	vst1.64	{d16-d17}, [r3], ip
   140d4:	vst1.64	{d16-d17}, [r2]
   140d8:	vst1.64	{d16-d17}, [r3]
   140dc:	beq	140fc <__assert_fail@plt+0x2d8c>
   140e0:	str	r0, [sp]
   140e4:	mov	r3, sp
   140e8:	mov	r0, #0
   140ec:	mvn	r2, #0
   140f0:	bl	13e34 <__assert_fail@plt+0x2ac4>
   140f4:	mov	sp, fp
   140f8:	pop	{fp, pc}
   140fc:	bl	1134c <abort@plt>
   14100:	push	{fp, lr}
   14104:	mov	fp, sp
   14108:	sub	sp, sp, #48	; 0x30
   1410c:	vmov.i32	q8, #0	; 0x00000000
   14110:	mov	r3, sp
   14114:	mov	ip, #32
   14118:	cmp	r0, #10
   1411c:	add	lr, r3, #16
   14120:	vst1.64	{d16-d17}, [r3], ip
   14124:	vst1.64	{d16-d17}, [lr]
   14128:	vst1.64	{d16-d17}, [r3]
   1412c:	beq	14148 <__assert_fail@plt+0x2dd8>
   14130:	str	r0, [sp]
   14134:	mov	r3, sp
   14138:	mov	r0, #0
   1413c:	bl	13e34 <__assert_fail@plt+0x2ac4>
   14140:	mov	sp, fp
   14144:	pop	{fp, pc}
   14148:	bl	1134c <abort@plt>
   1414c:	push	{r4, sl, fp, lr}
   14150:	add	fp, sp, #8
   14154:	sub	sp, sp, #48	; 0x30
   14158:	mov	lr, r0
   1415c:	movw	r0, #33256	; 0x81e8
   14160:	mov	ip, r1
   14164:	mov	r1, #32
   14168:	mov	r4, #1
   1416c:	movt	r0, #2
   14170:	add	r3, r0, #16
   14174:	vld1.64	{d16-d17}, [r0], r1
   14178:	vld1.64	{d20-d21}, [r0]
   1417c:	vld1.64	{d18-d19}, [r3]
   14180:	mov	r3, sp
   14184:	add	r0, r3, #32
   14188:	add	r1, r3, #16
   1418c:	vst1.64	{d20-d21}, [r0]
   14190:	mov	r0, #28
   14194:	vst1.64	{d18-d19}, [r1]
   14198:	mov	r1, r3
   1419c:	and	r0, r0, r2, lsr #3
   141a0:	and	r2, r2, #31
   141a4:	vst1.64	{d16-d17}, [r1], r0
   141a8:	ldr	r0, [r1, #8]
   141ac:	bic	r4, r4, r0, lsr r2
   141b0:	eor	r0, r0, r4, lsl r2
   141b4:	mov	r2, ip
   141b8:	str	r0, [r1, #8]
   141bc:	mov	r0, #0
   141c0:	mov	r1, lr
   141c4:	bl	13e34 <__assert_fail@plt+0x2ac4>
   141c8:	sub	sp, fp, #8
   141cc:	pop	{r4, sl, fp, pc}
   141d0:	push	{fp, lr}
   141d4:	mov	fp, sp
   141d8:	sub	sp, sp, #48	; 0x30
   141dc:	mov	ip, r0
   141e0:	movw	r0, #33256	; 0x81e8
   141e4:	mov	r2, #32
   141e8:	movt	r0, #2
   141ec:	add	r3, r0, #16
   141f0:	vld1.64	{d16-d17}, [r0], r2
   141f4:	vld1.64	{d20-d21}, [r0]
   141f8:	vld1.64	{d18-d19}, [r3]
   141fc:	mov	r3, sp
   14200:	add	r0, r3, #32
   14204:	add	r2, r3, #16
   14208:	vst1.64	{d20-d21}, [r0]
   1420c:	mov	r0, #28
   14210:	vst1.64	{d18-d19}, [r2]
   14214:	mov	r2, r3
   14218:	and	r0, r0, r1, lsr #3
   1421c:	and	r1, r1, #31
   14220:	vst1.64	{d16-d17}, [r2], r0
   14224:	mov	r0, #1
   14228:	ldr	lr, [r2, #8]
   1422c:	bic	r0, r0, lr, lsr r1
   14230:	eor	r0, lr, r0, lsl r1
   14234:	mov	r1, ip
   14238:	str	r0, [r2, #8]
   1423c:	mov	r0, #0
   14240:	mvn	r2, #0
   14244:	bl	13e34 <__assert_fail@plt+0x2ac4>
   14248:	mov	sp, fp
   1424c:	pop	{fp, pc}
   14250:	push	{fp, lr}
   14254:	mov	fp, sp
   14258:	sub	sp, sp, #48	; 0x30
   1425c:	mov	r1, r0
   14260:	movw	r0, #33256	; 0x81e8
   14264:	mov	r3, #32
   14268:	movt	r0, #2
   1426c:	add	r2, r0, #16
   14270:	vld1.64	{d16-d17}, [r0], r3
   14274:	mov	r3, sp
   14278:	vld1.64	{d18-d19}, [r2]
   1427c:	vld1.64	{d20-d21}, [r0]
   14280:	add	r2, r3, #16
   14284:	add	r0, r3, #32
   14288:	vst1.64	{d18-d19}, [r2]
   1428c:	vst1.64	{d20-d21}, [r0]
   14290:	mov	r0, #12
   14294:	mov	r2, r3
   14298:	vst1.64	{d16-d17}, [r2], r0
   1429c:	ldr	r0, [r2]
   142a0:	orr	r0, r0, #67108864	; 0x4000000
   142a4:	str	r0, [r2]
   142a8:	mov	r0, #0
   142ac:	mvn	r2, #0
   142b0:	bl	13e34 <__assert_fail@plt+0x2ac4>
   142b4:	mov	sp, fp
   142b8:	pop	{fp, pc}
   142bc:	push	{fp, lr}
   142c0:	mov	fp, sp
   142c4:	sub	sp, sp, #48	; 0x30
   142c8:	mov	ip, r1
   142cc:	mov	r1, r0
   142d0:	movw	r0, #33256	; 0x81e8
   142d4:	mov	r2, #32
   142d8:	movt	r0, #2
   142dc:	add	r3, r0, #16
   142e0:	vld1.64	{d16-d17}, [r0], r2
   142e4:	vld1.64	{d18-d19}, [r3]
   142e8:	vld1.64	{d20-d21}, [r0]
   142ec:	mov	r3, sp
   142f0:	add	r2, r3, #16
   142f4:	add	r0, r3, #32
   142f8:	vst1.64	{d18-d19}, [r2]
   142fc:	vst1.64	{d20-d21}, [r0]
   14300:	mov	r0, #12
   14304:	mov	r2, r3
   14308:	vst1.64	{d16-d17}, [r2], r0
   1430c:	ldr	r0, [r2]
   14310:	orr	r0, r0, #67108864	; 0x4000000
   14314:	str	r0, [r2]
   14318:	mov	r0, #0
   1431c:	mov	r2, ip
   14320:	bl	13e34 <__assert_fail@plt+0x2ac4>
   14324:	mov	sp, fp
   14328:	pop	{fp, pc}
   1432c:	push	{r4, sl, fp, lr}
   14330:	add	fp, sp, #8
   14334:	sub	sp, sp, #96	; 0x60
   14338:	vmov.i32	q8, #0	; 0x00000000
   1433c:	mov	ip, r2
   14340:	mov	r2, sp
   14344:	mov	r4, #28
   14348:	cmp	r1, #10
   1434c:	mov	r3, r2
   14350:	add	lr, r2, #16
   14354:	vst1.64	{d16-d17}, [r3], r4
   14358:	vst1.64	{d16-d17}, [lr]
   1435c:	vst1.32	{d16-d17}, [r3]
   14360:	beq	143b0 <__assert_fail@plt+0x3040>
   14364:	vld1.64	{d16-d17}, [r2], r4
   14368:	vld1.64	{d18-d19}, [lr]
   1436c:	add	r3, sp, #48	; 0x30
   14370:	vld1.32	{d20-d21}, [r2]
   14374:	add	r2, r3, #20
   14378:	add	r4, r3, #4
   1437c:	vst1.32	{d18-d19}, [r2]
   14380:	add	r2, r3, #32
   14384:	vst1.32	{d16-d17}, [r4]
   14388:	vst1.32	{d20-d21}, [r2]
   1438c:	str	r1, [sp, #48]	; 0x30
   14390:	mvn	r2, #0
   14394:	ldr	r1, [sp, #60]	; 0x3c
   14398:	orr	r1, r1, #67108864	; 0x4000000
   1439c:	str	r1, [sp, #60]	; 0x3c
   143a0:	mov	r1, ip
   143a4:	bl	13e34 <__assert_fail@plt+0x2ac4>
   143a8:	sub	sp, fp, #8
   143ac:	pop	{r4, sl, fp, pc}
   143b0:	bl	1134c <abort@plt>
   143b4:	push	{r4, r5, r6, sl, fp, lr}
   143b8:	add	fp, sp, #16
   143bc:	sub	sp, sp, #48	; 0x30
   143c0:	mov	ip, r3
   143c4:	movw	r3, #33256	; 0x81e8
   143c8:	mov	r6, #32
   143cc:	cmp	r1, #0
   143d0:	mov	r4, sp
   143d4:	movt	r3, #2
   143d8:	cmpne	r2, #0
   143dc:	add	r5, r4, #16
   143e0:	add	lr, r3, #16
   143e4:	vld1.64	{d16-d17}, [r3], r6
   143e8:	vld1.64	{d18-d19}, [lr]
   143ec:	vld1.64	{d20-d21}, [r3]
   143f0:	mov	r3, #10
   143f4:	vst1.64	{d16-d17}, [r4], r6
   143f8:	vst1.64	{d18-d19}, [r5]
   143fc:	vst1.64	{d20-d21}, [r4]
   14400:	str	r3, [sp]
   14404:	bne	1440c <__assert_fail@plt+0x309c>
   14408:	bl	1134c <abort@plt>
   1440c:	str	r2, [sp, #44]	; 0x2c
   14410:	str	r1, [sp, #40]	; 0x28
   14414:	mov	r3, sp
   14418:	mov	r1, ip
   1441c:	mvn	r2, #0
   14420:	bl	13e34 <__assert_fail@plt+0x2ac4>
   14424:	sub	sp, fp, #16
   14428:	pop	{r4, r5, r6, sl, fp, pc}
   1442c:	push	{r4, r5, r6, sl, fp, lr}
   14430:	add	fp, sp, #16
   14434:	sub	sp, sp, #48	; 0x30
   14438:	mov	lr, r3
   1443c:	movw	r3, #33256	; 0x81e8
   14440:	mov	r6, #32
   14444:	cmp	r1, #0
   14448:	mov	r4, sp
   1444c:	movt	r3, #2
   14450:	cmpne	r2, #0
   14454:	add	r5, r4, #16
   14458:	add	ip, r3, #16
   1445c:	vld1.64	{d16-d17}, [r3], r6
   14460:	vld1.64	{d18-d19}, [ip]
   14464:	vld1.64	{d20-d21}, [r3]
   14468:	mov	r3, #10
   1446c:	vst1.64	{d16-d17}, [r4], r6
   14470:	vst1.64	{d18-d19}, [r5]
   14474:	vst1.64	{d20-d21}, [r4]
   14478:	str	r3, [sp]
   1447c:	bne	14484 <__assert_fail@plt+0x3114>
   14480:	bl	1134c <abort@plt>
   14484:	ldr	ip, [fp, #8]
   14488:	str	r2, [sp, #44]	; 0x2c
   1448c:	str	r1, [sp, #40]	; 0x28
   14490:	mov	r3, sp
   14494:	mov	r1, lr
   14498:	mov	r2, ip
   1449c:	bl	13e34 <__assert_fail@plt+0x2ac4>
   144a0:	sub	sp, fp, #16
   144a4:	pop	{r4, r5, r6, sl, fp, pc}
   144a8:	push	{r4, sl, fp, lr}
   144ac:	add	fp, sp, #8
   144b0:	sub	sp, sp, #48	; 0x30
   144b4:	movw	r3, #33256	; 0x81e8
   144b8:	mov	lr, #32
   144bc:	mov	ip, r2
   144c0:	cmp	r0, #0
   144c4:	movt	r3, #2
   144c8:	cmpne	r1, #0
   144cc:	add	r2, r3, #16
   144d0:	vld1.64	{d16-d17}, [r3], lr
   144d4:	vld1.64	{d20-d21}, [r3]
   144d8:	vld1.64	{d18-d19}, [r2]
   144dc:	mov	r2, sp
   144e0:	add	r4, r2, #16
   144e4:	vst1.64	{d16-d17}, [r2], lr
   144e8:	vst1.64	{d20-d21}, [r2]
   144ec:	mov	r2, #10
   144f0:	vst1.64	{d18-d19}, [r4]
   144f4:	str	r2, [sp]
   144f8:	bne	14500 <__assert_fail@plt+0x3190>
   144fc:	bl	1134c <abort@plt>
   14500:	str	r1, [sp, #44]	; 0x2c
   14504:	str	r0, [sp, #40]	; 0x28
   14508:	mov	r3, sp
   1450c:	mov	r0, #0
   14510:	mov	r1, ip
   14514:	mvn	r2, #0
   14518:	bl	13e34 <__assert_fail@plt+0x2ac4>
   1451c:	sub	sp, fp, #8
   14520:	pop	{r4, sl, fp, pc}
   14524:	push	{r4, r5, fp, lr}
   14528:	add	fp, sp, #8
   1452c:	sub	sp, sp, #48	; 0x30
   14530:	mov	ip, r3
   14534:	movw	r3, #33256	; 0x81e8
   14538:	mov	r4, #32
   1453c:	mov	lr, r2
   14540:	cmp	r0, #0
   14544:	movt	r3, #2
   14548:	cmpne	r1, #0
   1454c:	add	r2, r3, #16
   14550:	vld1.64	{d16-d17}, [r3], r4
   14554:	vld1.64	{d20-d21}, [r3]
   14558:	vld1.64	{d18-d19}, [r2]
   1455c:	mov	r2, sp
   14560:	add	r5, r2, #16
   14564:	vst1.64	{d16-d17}, [r2], r4
   14568:	vst1.64	{d20-d21}, [r2]
   1456c:	mov	r2, #10
   14570:	vst1.64	{d18-d19}, [r5]
   14574:	str	r2, [sp]
   14578:	bne	14580 <__assert_fail@plt+0x3210>
   1457c:	bl	1134c <abort@plt>
   14580:	str	r1, [sp, #44]	; 0x2c
   14584:	str	r0, [sp, #40]	; 0x28
   14588:	mov	r3, sp
   1458c:	mov	r0, #0
   14590:	mov	r1, lr
   14594:	mov	r2, ip
   14598:	bl	13e34 <__assert_fail@plt+0x2ac4>
   1459c:	sub	sp, fp, #8
   145a0:	pop	{r4, r5, fp, pc}
   145a4:	movw	r3, #33072	; 0x8130
   145a8:	movt	r3, #2
   145ac:	b	13e34 <__assert_fail@plt+0x2ac4>
   145b0:	movw	r3, #33072	; 0x8130
   145b4:	mov	r2, r1
   145b8:	mov	r1, r0
   145bc:	mov	r0, #0
   145c0:	movt	r3, #2
   145c4:	b	13e34 <__assert_fail@plt+0x2ac4>
   145c8:	movw	r3, #33072	; 0x8130
   145cc:	mvn	r2, #0
   145d0:	movt	r3, #2
   145d4:	b	13e34 <__assert_fail@plt+0x2ac4>
   145d8:	movw	r3, #33072	; 0x8130
   145dc:	mov	r1, r0
   145e0:	mov	r0, #0
   145e4:	mvn	r2, #0
   145e8:	movt	r3, #2
   145ec:	b	13e34 <__assert_fail@plt+0x2ac4>
   145f0:	push	{r4, r5, fp, lr}
   145f4:	add	fp, sp, #8
   145f8:	mov	r5, r0
   145fc:	mov	r4, r1
   14600:	mov	r0, #0
   14604:	mov	r2, #5
   14608:	mov	r1, r5
   1460c:	bl	11148 <dcgettext@plt>
   14610:	cmp	r0, r5
   14614:	popne	{r4, r5, fp, pc}
   14618:	bl	16264 <__assert_fail@plt+0x4ef4>
   1461c:	ldrb	r1, [r0]
   14620:	and	r1, r1, #223	; 0xdf
   14624:	cmp	r1, #71	; 0x47
   14628:	beq	14690 <__assert_fail@plt+0x3320>
   1462c:	cmp	r1, #85	; 0x55
   14630:	bne	146e8 <__assert_fail@plt+0x3378>
   14634:	ldrb	r1, [r0, #1]
   14638:	and	r1, r1, #223	; 0xdf
   1463c:	cmp	r1, #84	; 0x54
   14640:	bne	146e8 <__assert_fail@plt+0x3378>
   14644:	ldrb	r1, [r0, #2]
   14648:	and	r1, r1, #223	; 0xdf
   1464c:	cmp	r1, #70	; 0x46
   14650:	bne	146e8 <__assert_fail@plt+0x3378>
   14654:	ldrb	r1, [r0, #3]
   14658:	cmp	r1, #45	; 0x2d
   1465c:	bne	146e8 <__assert_fail@plt+0x3378>
   14660:	ldrb	r1, [r0, #4]
   14664:	cmp	r1, #56	; 0x38
   14668:	bne	146e8 <__assert_fail@plt+0x3378>
   1466c:	ldrb	r0, [r0, #5]
   14670:	cmp	r0, #0
   14674:	bne	146e8 <__assert_fail@plt+0x3378>
   14678:	ldrb	r1, [r5]
   1467c:	movw	r2, #29034	; 0x716a
   14680:	movw	r0, #29038	; 0x716e
   14684:	movt	r2, #1
   14688:	movt	r0, #1
   1468c:	b	14718 <__assert_fail@plt+0x33a8>
   14690:	ldrb	r1, [r0, #1]
   14694:	and	r1, r1, #223	; 0xdf
   14698:	cmp	r1, #66	; 0x42
   1469c:	bne	146e8 <__assert_fail@plt+0x3378>
   146a0:	ldrb	r1, [r0, #2]
   146a4:	cmp	r1, #49	; 0x31
   146a8:	bne	146e8 <__assert_fail@plt+0x3378>
   146ac:	ldrb	r1, [r0, #3]
   146b0:	cmp	r1, #56	; 0x38
   146b4:	bne	146e8 <__assert_fail@plt+0x3378>
   146b8:	ldrb	r1, [r0, #4]
   146bc:	cmp	r1, #48	; 0x30
   146c0:	bne	146e8 <__assert_fail@plt+0x3378>
   146c4:	ldrb	r1, [r0, #5]
   146c8:	cmp	r1, #51	; 0x33
   146cc:	bne	146e8 <__assert_fail@plt+0x3378>
   146d0:	ldrb	r1, [r0, #6]
   146d4:	cmp	r1, #48	; 0x30
   146d8:	bne	146e8 <__assert_fail@plt+0x3378>
   146dc:	ldrb	r0, [r0, #7]
   146e0:	cmp	r0, #0
   146e4:	beq	14704 <__assert_fail@plt+0x3394>
   146e8:	movw	r1, #29028	; 0x7164
   146ec:	movw	r0, #29032	; 0x7168
   146f0:	cmp	r4, #9
   146f4:	movt	r1, #1
   146f8:	movt	r0, #1
   146fc:	moveq	r0, r1
   14700:	pop	{r4, r5, fp, pc}
   14704:	ldrb	r1, [r5]
   14708:	movw	r2, #29042	; 0x7172
   1470c:	movw	r0, #29046	; 0x7176
   14710:	movt	r2, #1
   14714:	movt	r0, #1
   14718:	cmp	r1, #96	; 0x60
   1471c:	moveq	r0, r2
   14720:	pop	{r4, r5, fp, pc}
   14724:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   14728:	add	fp, sp, #28
   1472c:	sub	sp, sp, #12
   14730:	ldr	sl, [fp, #8]
   14734:	mov	r9, r3
   14738:	mov	r4, r2
   1473c:	mov	r8, r1
   14740:	mov	r7, r0
   14744:	cmp	r2, #0
   14748:	beq	14760 <__assert_fail@plt+0x33f0>
   1474c:	mov	r0, r7
   14750:	mov	r1, #58	; 0x3a
   14754:	bl	11268 <strchr@plt>
   14758:	mov	r6, r0
   1475c:	b	14764 <__assert_fail@plt+0x33f4>
   14760:	mov	r6, #0
   14764:	mov	r0, r7
   14768:	mov	r1, r6
   1476c:	mov	r2, r8
   14770:	mov	r3, r4
   14774:	stm	sp, {r9, sl}
   14778:	bl	147e0 <__assert_fail@plt+0x3470>
   1477c:	mov	r5, r0
   14780:	cmp	r4, #0
   14784:	beq	147d4 <__assert_fail@plt+0x3464>
   14788:	cmp	r6, #0
   1478c:	bne	147d4 <__assert_fail@plt+0x3464>
   14790:	cmp	r5, #0
   14794:	beq	147d4 <__assert_fail@plt+0x3464>
   14798:	mov	r0, r7
   1479c:	mov	r1, #46	; 0x2e
   147a0:	bl	11268 <strchr@plt>
   147a4:	cmp	r0, #0
   147a8:	beq	147d4 <__assert_fail@plt+0x3464>
   147ac:	mov	r1, r0
   147b0:	mov	r0, r7
   147b4:	mov	r2, r8
   147b8:	mov	r3, r4
   147bc:	stm	sp, {r9, sl}
   147c0:	bl	147e0 <__assert_fail@plt+0x3470>
   147c4:	cmp	r0, #0
   147c8:	movne	r0, r5
   147cc:	sub	sp, fp, #28
   147d0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   147d4:	mov	r0, r5
   147d8:	sub	sp, fp, #28
   147dc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   147e0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   147e4:	add	fp, sp, #28
   147e8:	sub	sp, sp, #36	; 0x24
   147ec:	mov	sl, r3
   147f0:	mov	r9, r2
   147f4:	ldr	r3, [r2]
   147f8:	ldr	r2, [fp, #8]
   147fc:	mov	r4, r1
   14800:	cmp	sl, #0
   14804:	beq	14810 <__assert_fail@plt+0x34a0>
   14808:	ldr	r1, [sl]
   1480c:	b	14814 <__assert_fail@plt+0x34a4>
   14810:	mvn	r1, #0
   14814:	ldr	r8, [fp, #12]
   14818:	cmp	r2, #0
   1481c:	str	r1, [sp, #8]
   14820:	str	r3, [sp, #4]
   14824:	movne	r1, #0
   14828:	strne	r1, [r2]
   1482c:	cmp	r8, #0
   14830:	movne	r1, #0
   14834:	strne	r1, [r8]
   14838:	cmp	r4, #0
   1483c:	beq	14870 <__assert_fail@plt+0x3500>
   14840:	subs	r5, r4, r0
   14844:	beq	14900 <__assert_fail@plt+0x3590>
   14848:	add	r1, r5, #1
   1484c:	bl	1561c <__assert_fail@plt+0x42ac>
   14850:	mov	r7, r0
   14854:	mov	r0, #0
   14858:	mov	r6, r4
   1485c:	strb	r0, [r7, r5]
   14860:	ldrb	r0, [r6, #1]!
   14864:	cmp	r0, #0
   14868:	moveq	r6, r0
   1486c:	b	14888 <__assert_fail@plt+0x3518>
   14870:	ldrb	r1, [r0]
   14874:	cmp	r1, #0
   14878:	beq	14a18 <__assert_fail@plt+0x36a8>
   1487c:	bl	1568c <__assert_fail@plt+0x431c>
   14880:	mov	r7, r0
   14884:	mov	r6, #0
   14888:	ldrb	r0, [r7]
   1488c:	cmp	r0, #43	; 0x2b
   14890:	beq	148e0 <__assert_fail@plt+0x3570>
   14894:	mov	r0, r7
   14898:	bl	110d0 <getpwnam@plt>
   1489c:	cmp	r0, #0
   148a0:	beq	148e0 <__assert_fail@plt+0x3570>
   148a4:	ldr	r1, [r0, #8]
   148a8:	mov	r5, #0
   148ac:	cmp	r4, #0
   148b0:	str	r1, [sp, #4]
   148b4:	beq	14a24 <__assert_fail@plt+0x36b4>
   148b8:	cmp	r6, #0
   148bc:	bne	14a24 <__assert_fail@plt+0x36b4>
   148c0:	ldr	r4, [r0, #12]
   148c4:	mov	r0, r4
   148c8:	bl	11358 <getgrgid@plt>
   148cc:	cmp	r0, #0
   148d0:	str	r4, [sp, #8]
   148d4:	beq	14a2c <__assert_fail@plt+0x36bc>
   148d8:	ldr	r0, [r0]
   148dc:	b	14a3c <__assert_fail@plt+0x36cc>
   148e0:	cmp	r4, #0
   148e4:	beq	149bc <__assert_fail@plt+0x364c>
   148e8:	cmp	r6, #0
   148ec:	bne	149bc <__assert_fail@plt+0x364c>
   148f0:	movw	r5, #29163	; 0x71eb
   148f4:	mov	r4, #0
   148f8:	movt	r5, #1
   148fc:	b	14a48 <__assert_fail@plt+0x36d8>
   14900:	ldrb	r0, [r4, #1]!
   14904:	mov	r7, #0
   14908:	mov	r5, #0
   1490c:	cmp	r0, #0
   14910:	moveq	r4, r0
   14914:	mov	r6, r4
   14918:	mov	r4, #0
   1491c:	cmp	r6, #0
   14920:	beq	14a54 <__assert_fail@plt+0x36e4>
   14924:	cmp	r5, #0
   14928:	bne	14a54 <__assert_fail@plt+0x36e4>
   1492c:	ldrb	r0, [r6]
   14930:	cmp	r0, #43	; 0x2b
   14934:	beq	14954 <__assert_fail@plt+0x35e4>
   14938:	mov	r0, r6
   1493c:	bl	11364 <getgrnam@plt>
   14940:	cmp	r0, #0
   14944:	beq	14954 <__assert_fail@plt+0x35e4>
   14948:	ldr	r0, [r0, #8]
   1494c:	mov	r5, #0
   14950:	b	149a4 <__assert_fail@plt+0x3634>
   14954:	movw	r0, #26919	; 0x6927
   14958:	add	r3, sp, #12
   1495c:	mov	r1, #0
   14960:	mov	r2, #10
   14964:	movt	r0, #1
   14968:	str	r0, [sp]
   1496c:	mov	r0, r6
   14970:	bl	1573c <__assert_fail@plt+0x43cc>
   14974:	ldr	r1, [sp, #12]
   14978:	mvn	r2, #0
   1497c:	clz	r0, r0
   14980:	movw	r5, #29149	; 0x71dd
   14984:	lsr	r0, r0, #5
   14988:	movt	r5, #1
   1498c:	subs	r2, r1, r2
   14990:	movwne	r2, #1
   14994:	ands	r0, r0, r2
   14998:	ldr	r0, [sp, #8]
   1499c:	movne	r0, r1
   149a0:	movwne	r5, #0
   149a4:	str	r0, [sp, #8]
   149a8:	bl	110ac <endgrent@plt>
   149ac:	mov	r0, r6
   149b0:	bl	1568c <__assert_fail@plt+0x431c>
   149b4:	mov	r4, r0
   149b8:	b	14a54 <__assert_fail@plt+0x36e4>
   149bc:	movw	r0, #26919	; 0x6927
   149c0:	add	r3, sp, #12
   149c4:	mov	r1, #0
   149c8:	mov	r2, #10
   149cc:	mov	r4, #0
   149d0:	movt	r0, #1
   149d4:	str	r0, [sp]
   149d8:	mov	r0, r7
   149dc:	bl	1573c <__assert_fail@plt+0x43cc>
   149e0:	ldr	r1, [sp, #12]
   149e4:	mvn	r2, #0
   149e8:	clz	r0, r0
   149ec:	movw	r5, #29136	; 0x71d0
   149f0:	lsr	r0, r0, #5
   149f4:	movt	r5, #1
   149f8:	subs	r2, r1, r2
   149fc:	movwne	r2, #1
   14a00:	ands	r0, r0, r2
   14a04:	ldr	r0, [sp, #4]
   14a08:	movne	r0, r1
   14a0c:	movwne	r5, #0
   14a10:	str	r0, [sp, #4]
   14a14:	b	14a48 <__assert_fail@plt+0x36d8>
   14a18:	mov	r4, #0
   14a1c:	mov	r7, #0
   14a20:	b	14a60 <__assert_fail@plt+0x36f0>
   14a24:	mov	r4, #0
   14a28:	b	14a48 <__assert_fail@plt+0x36d8>
   14a2c:	add	r2, sp, #12
   14a30:	mov	r0, r4
   14a34:	mov	r1, #0
   14a38:	bl	12928 <__assert_fail@plt+0x15b8>
   14a3c:	bl	1568c <__assert_fail@plt+0x431c>
   14a40:	mov	r4, r0
   14a44:	bl	110ac <endgrent@plt>
   14a48:	bl	11304 <endpwent@plt>
   14a4c:	cmp	r6, #0
   14a50:	bne	14924 <__assert_fail@plt+0x35b4>
   14a54:	mov	r6, #0
   14a58:	cmp	r5, #0
   14a5c:	bne	14a9c <__assert_fail@plt+0x372c>
   14a60:	ldr	r0, [sp, #4]
   14a64:	cmp	sl, #0
   14a68:	mov	r6, #1
   14a6c:	str	r0, [r9]
   14a70:	ldrne	r0, [sp, #8]
   14a74:	strne	r0, [sl]
   14a78:	ldr	r0, [fp, #8]
   14a7c:	cmp	r0, #0
   14a80:	strne	r7, [r0]
   14a84:	movne	r7, #0
   14a88:	cmp	r8, #0
   14a8c:	moveq	r5, #0
   14a90:	strne	r4, [r8]
   14a94:	movne	r5, #0
   14a98:	movne	r4, #0
   14a9c:	mov	r0, r7
   14aa0:	bl	12900 <__assert_fail@plt+0x1590>
   14aa4:	mov	r0, r4
   14aa8:	bl	12900 <__assert_fail@plt+0x1590>
   14aac:	mov	r0, #0
   14ab0:	cmp	r6, #0
   14ab4:	bne	14ac8 <__assert_fail@plt+0x3758>
   14ab8:	mov	r0, #0
   14abc:	mov	r1, r5
   14ac0:	mov	r2, #5
   14ac4:	bl	11148 <dcgettext@plt>
   14ac8:	sub	sp, fp, #28
   14acc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14ad0:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   14ad4:	add	fp, sp, #24
   14ad8:	sub	sp, sp, #32
   14adc:	ldr	r6, [fp, #12]
   14ae0:	ldr	r7, [fp, #8]
   14ae4:	mov	r4, r2
   14ae8:	mov	r8, r0
   14aec:	cmp	r1, #0
   14af0:	beq	14b18 <__assert_fail@plt+0x37a8>
   14af4:	movw	r2, #29176	; 0x71f8
   14af8:	mov	r5, r1
   14afc:	str	r3, [sp, #4]
   14b00:	str	r4, [sp]
   14b04:	mov	r0, r8
   14b08:	mov	r1, #1
   14b0c:	movt	r2, #1
   14b10:	mov	r3, r5
   14b14:	b	14b30 <__assert_fail@plt+0x37c0>
   14b18:	movw	r2, #29188	; 0x7204
   14b1c:	str	r3, [sp]
   14b20:	mov	r0, r8
   14b24:	mov	r1, #1
   14b28:	mov	r3, r4
   14b2c:	movt	r2, #1
   14b30:	bl	112c8 <__fprintf_chk@plt>
   14b34:	movw	r1, #29195	; 0x720b
   14b38:	mov	r0, #0
   14b3c:	mov	r2, #5
   14b40:	movt	r1, #1
   14b44:	bl	11148 <dcgettext@plt>
   14b48:	movw	r2, #29913	; 0x74d9
   14b4c:	mov	r3, r0
   14b50:	movw	r0, #2022	; 0x7e6
   14b54:	mov	r1, #1
   14b58:	movt	r2, #1
   14b5c:	str	r0, [sp]
   14b60:	mov	r0, r8
   14b64:	bl	112c8 <__fprintf_chk@plt>
   14b68:	movw	r4, #26918	; 0x6926
   14b6c:	mov	r1, r8
   14b70:	movt	r4, #1
   14b74:	mov	r0, r4
   14b78:	bl	110b8 <fputs_unlocked@plt>
   14b7c:	movw	r1, #29199	; 0x720f
   14b80:	mov	r0, #0
   14b84:	mov	r2, #5
   14b88:	movt	r1, #1
   14b8c:	bl	11148 <dcgettext@plt>
   14b90:	movw	r3, #29370	; 0x72ba
   14b94:	mov	r2, r0
   14b98:	mov	r0, r8
   14b9c:	mov	r1, #1
   14ba0:	movt	r3, #1
   14ba4:	bl	112c8 <__fprintf_chk@plt>
   14ba8:	mov	r0, r4
   14bac:	mov	r1, r8
   14bb0:	bl	110b8 <fputs_unlocked@plt>
   14bb4:	cmp	r6, #9
   14bb8:	bhi	14bf4 <__assert_fail@plt+0x3884>
   14bbc:	add	r0, pc, #0
   14bc0:	ldr	pc, [r0, r6, lsl #2]
   14bc4:	andeq	r4, r1, ip, ror #23
   14bc8:	andeq	r4, r1, r0, lsl #24
   14bcc:	andeq	r4, r1, r0, lsr ip
   14bd0:	andeq	r4, r1, r8, asr ip
   14bd4:	andeq	r4, r1, r0, lsl #25
   14bd8:	andeq	r4, r1, r8, lsr #25
   14bdc:	ldrdeq	r4, [r1], -r0
   14be0:	andeq	r4, r1, r8, lsl #26
   14be4:	andeq	r4, r1, r8, lsr #27
   14be8:	andeq	r4, r1, r0, asr sp
   14bec:	sub	sp, fp, #24
   14bf0:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   14bf4:	movw	r1, #29723	; 0x741b
   14bf8:	movt	r1, #1
   14bfc:	b	14d58 <__assert_fail@plt+0x39e8>
   14c00:	movw	r1, #29404	; 0x72dc
   14c04:	mov	r0, #0
   14c08:	mov	r2, #5
   14c0c:	movt	r1, #1
   14c10:	bl	11148 <dcgettext@plt>
   14c14:	ldr	r3, [r7]
   14c18:	mov	r2, r0
   14c1c:	mov	r0, r8
   14c20:	mov	r1, #1
   14c24:	sub	sp, fp, #24
   14c28:	pop	{r4, r5, r6, r7, r8, sl, fp, lr}
   14c2c:	b	112c8 <__fprintf_chk@plt>
   14c30:	movw	r1, #29420	; 0x72ec
   14c34:	mov	r0, #0
   14c38:	mov	r2, #5
   14c3c:	movt	r1, #1
   14c40:	bl	11148 <dcgettext@plt>
   14c44:	mov	r2, r0
   14c48:	ldr	r3, [r7]
   14c4c:	ldr	r0, [r7, #4]
   14c50:	str	r0, [sp]
   14c54:	b	14d44 <__assert_fail@plt+0x39d4>
   14c58:	movw	r1, #29443	; 0x7303
   14c5c:	mov	r0, #0
   14c60:	mov	r2, #5
   14c64:	movt	r1, #1
   14c68:	bl	11148 <dcgettext@plt>
   14c6c:	mov	r2, r0
   14c70:	ldr	r3, [r7]
   14c74:	ldmib	r7, {r0, r1}
   14c78:	stm	sp, {r0, r1}
   14c7c:	b	14d44 <__assert_fail@plt+0x39d4>
   14c80:	movw	r1, #29471	; 0x731f
   14c84:	mov	r0, #0
   14c88:	mov	r2, #5
   14c8c:	movt	r1, #1
   14c90:	bl	11148 <dcgettext@plt>
   14c94:	ldr	r3, [r7]
   14c98:	mov	r2, r0
   14c9c:	ldmib	r7, {r0, r1, r7}
   14ca0:	stm	sp, {r0, r1, r7}
   14ca4:	b	14d44 <__assert_fail@plt+0x39d4>
   14ca8:	movw	r1, #29503	; 0x733f
   14cac:	mov	r0, #0
   14cb0:	mov	r2, #5
   14cb4:	movt	r1, #1
   14cb8:	bl	11148 <dcgettext@plt>
   14cbc:	ldr	r3, [r7]
   14cc0:	mov	r2, r0
   14cc4:	ldmib	r7, {r0, r1, r6, r7}
   14cc8:	stm	sp, {r0, r1, r6, r7}
   14ccc:	b	14d44 <__assert_fail@plt+0x39d4>
   14cd0:	movw	r1, #29539	; 0x7363
   14cd4:	mov	r0, #0
   14cd8:	mov	r2, #5
   14cdc:	movt	r1, #1
   14ce0:	bl	11148 <dcgettext@plt>
   14ce4:	mov	r2, r0
   14ce8:	ldr	r3, [r7]
   14cec:	ldmib	r7, {r0, r1, r6}
   14cf0:	ldr	r5, [r7, #16]
   14cf4:	ldr	r7, [r7, #20]
   14cf8:	stm	sp, {r0, r1, r6}
   14cfc:	str	r5, [sp, #12]
   14d00:	str	r7, [sp, #16]
   14d04:	b	14d44 <__assert_fail@plt+0x39d4>
   14d08:	movw	r1, #29579	; 0x738b
   14d0c:	mov	r0, #0
   14d10:	mov	r2, #5
   14d14:	movt	r1, #1
   14d18:	bl	11148 <dcgettext@plt>
   14d1c:	mov	r2, r0
   14d20:	ldr	r3, [r7]
   14d24:	ldmib	r7, {r0, r1, r6}
   14d28:	ldr	r5, [r7, #16]
   14d2c:	ldr	r4, [r7, #20]
   14d30:	ldr	r7, [r7, #24]
   14d34:	stm	sp, {r0, r1, r6}
   14d38:	str	r5, [sp, #12]
   14d3c:	str	r4, [sp, #16]
   14d40:	str	r7, [sp, #20]
   14d44:	mov	r0, r8
   14d48:	mov	r1, #1
   14d4c:	b	14df8 <__assert_fail@plt+0x3a88>
   14d50:	movw	r1, #29671	; 0x73e7
   14d54:	movt	r1, #1
   14d58:	mov	r0, #0
   14d5c:	mov	r2, #5
   14d60:	bl	11148 <dcgettext@plt>
   14d64:	mov	ip, r0
   14d68:	ldr	r3, [r7]
   14d6c:	ldr	r0, [r7, #4]
   14d70:	ldr	r1, [r7, #8]
   14d74:	ldr	r6, [r7, #12]
   14d78:	ldr	r5, [r7, #16]
   14d7c:	ldr	r4, [r7, #20]
   14d80:	ldr	r2, [r7, #24]
   14d84:	ldr	lr, [r7, #28]
   14d88:	ldr	r7, [r7, #32]
   14d8c:	stm	sp, {r0, r1, r6}
   14d90:	str	r5, [sp, #12]
   14d94:	str	r4, [sp, #16]
   14d98:	str	r2, [sp, #20]
   14d9c:	str	lr, [sp, #24]
   14da0:	str	r7, [sp, #28]
   14da4:	b	14dec <__assert_fail@plt+0x3a7c>
   14da8:	movw	r1, #29623	; 0x73b7
   14dac:	mov	r0, #0
   14db0:	mov	r2, #5
   14db4:	movt	r1, #1
   14db8:	bl	11148 <dcgettext@plt>
   14dbc:	mov	ip, r0
   14dc0:	ldr	r3, [r7]
   14dc4:	ldmib	r7, {r0, r1, r6}
   14dc8:	ldr	r5, [r7, #16]
   14dcc:	ldr	r4, [r7, #20]
   14dd0:	ldr	r2, [r7, #24]
   14dd4:	ldr	r7, [r7, #28]
   14dd8:	stm	sp, {r0, r1, r6}
   14ddc:	str	r5, [sp, #12]
   14de0:	str	r4, [sp, #16]
   14de4:	str	r2, [sp, #20]
   14de8:	str	r7, [sp, #24]
   14dec:	mov	r0, r8
   14df0:	mov	r1, #1
   14df4:	mov	r2, ip
   14df8:	bl	112c8 <__fprintf_chk@plt>
   14dfc:	sub	sp, fp, #24
   14e00:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   14e04:	push	{r4, sl, fp, lr}
   14e08:	add	fp, sp, #8
   14e0c:	sub	sp, sp, #8
   14e10:	ldr	ip, [fp, #8]
   14e14:	mov	lr, #0
   14e18:	ldr	r4, [ip, lr, lsl #2]
   14e1c:	add	lr, lr, #1
   14e20:	cmp	r4, #0
   14e24:	bne	14e18 <__assert_fail@plt+0x3aa8>
   14e28:	sub	r4, lr, #1
   14e2c:	str	ip, [sp]
   14e30:	str	r4, [sp, #4]
   14e34:	bl	14ad0 <__assert_fail@plt+0x3760>
   14e38:	sub	sp, fp, #8
   14e3c:	pop	{r4, sl, fp, pc}
   14e40:	push	{fp, lr}
   14e44:	mov	fp, sp
   14e48:	sub	sp, sp, #48	; 0x30
   14e4c:	ldr	ip, [fp, #8]
   14e50:	ldr	lr, [ip]
   14e54:	cmp	lr, #0
   14e58:	str	lr, [sp, #8]
   14e5c:	beq	14ef8 <__assert_fail@plt+0x3b88>
   14e60:	ldr	lr, [ip, #4]
   14e64:	cmp	lr, #0
   14e68:	str	lr, [sp, #12]
   14e6c:	beq	14f00 <__assert_fail@plt+0x3b90>
   14e70:	ldr	lr, [ip, #8]
   14e74:	cmp	lr, #0
   14e78:	str	lr, [sp, #16]
   14e7c:	beq	14f08 <__assert_fail@plt+0x3b98>
   14e80:	ldr	lr, [ip, #12]
   14e84:	cmp	lr, #0
   14e88:	str	lr, [sp, #20]
   14e8c:	beq	14f10 <__assert_fail@plt+0x3ba0>
   14e90:	ldr	lr, [ip, #16]
   14e94:	cmp	lr, #0
   14e98:	str	lr, [sp, #24]
   14e9c:	beq	14f18 <__assert_fail@plt+0x3ba8>
   14ea0:	ldr	lr, [ip, #20]
   14ea4:	cmp	lr, #0
   14ea8:	str	lr, [sp, #28]
   14eac:	beq	14f20 <__assert_fail@plt+0x3bb0>
   14eb0:	ldr	lr, [ip, #24]
   14eb4:	cmp	lr, #0
   14eb8:	str	lr, [sp, #32]
   14ebc:	beq	14f28 <__assert_fail@plt+0x3bb8>
   14ec0:	ldr	lr, [ip, #28]
   14ec4:	cmp	lr, #0
   14ec8:	str	lr, [sp, #36]	; 0x24
   14ecc:	beq	14f30 <__assert_fail@plt+0x3bc0>
   14ed0:	ldr	lr, [ip, #32]
   14ed4:	cmp	lr, #0
   14ed8:	str	lr, [sp, #40]	; 0x28
   14edc:	beq	14f38 <__assert_fail@plt+0x3bc8>
   14ee0:	ldr	lr, [ip, #36]	; 0x24
   14ee4:	mov	ip, #10
   14ee8:	cmp	lr, #0
   14eec:	str	lr, [sp, #44]	; 0x2c
   14ef0:	movweq	ip, #9
   14ef4:	b	14f3c <__assert_fail@plt+0x3bcc>
   14ef8:	mov	ip, #0
   14efc:	b	14f3c <__assert_fail@plt+0x3bcc>
   14f00:	mov	ip, #1
   14f04:	b	14f3c <__assert_fail@plt+0x3bcc>
   14f08:	mov	ip, #2
   14f0c:	b	14f3c <__assert_fail@plt+0x3bcc>
   14f10:	mov	ip, #3
   14f14:	b	14f3c <__assert_fail@plt+0x3bcc>
   14f18:	mov	ip, #4
   14f1c:	b	14f3c <__assert_fail@plt+0x3bcc>
   14f20:	mov	ip, #5
   14f24:	b	14f3c <__assert_fail@plt+0x3bcc>
   14f28:	mov	ip, #6
   14f2c:	b	14f3c <__assert_fail@plt+0x3bcc>
   14f30:	mov	ip, #7
   14f34:	b	14f3c <__assert_fail@plt+0x3bcc>
   14f38:	mov	ip, #8
   14f3c:	add	lr, sp, #8
   14f40:	str	ip, [sp, #4]
   14f44:	str	lr, [sp]
   14f48:	bl	14ad0 <__assert_fail@plt+0x3760>
   14f4c:	mov	sp, fp
   14f50:	pop	{fp, pc}
   14f54:	push	{fp, lr}
   14f58:	mov	fp, sp
   14f5c:	sub	sp, sp, #56	; 0x38
   14f60:	add	ip, fp, #8
   14f64:	str	ip, [sp, #12]
   14f68:	ldr	lr, [fp, #8]
   14f6c:	cmp	lr, #0
   14f70:	str	lr, [sp, #16]
   14f74:	beq	15010 <__assert_fail@plt+0x3ca0>
   14f78:	ldr	lr, [ip, #4]
   14f7c:	cmp	lr, #0
   14f80:	str	lr, [sp, #20]
   14f84:	beq	15018 <__assert_fail@plt+0x3ca8>
   14f88:	ldr	lr, [ip, #8]
   14f8c:	cmp	lr, #0
   14f90:	str	lr, [sp, #24]
   14f94:	beq	15020 <__assert_fail@plt+0x3cb0>
   14f98:	ldr	lr, [ip, #12]
   14f9c:	cmp	lr, #0
   14fa0:	str	lr, [sp, #28]
   14fa4:	beq	15028 <__assert_fail@plt+0x3cb8>
   14fa8:	ldr	lr, [ip, #16]
   14fac:	cmp	lr, #0
   14fb0:	str	lr, [sp, #32]
   14fb4:	beq	15030 <__assert_fail@plt+0x3cc0>
   14fb8:	ldr	lr, [ip, #20]
   14fbc:	cmp	lr, #0
   14fc0:	str	lr, [sp, #36]	; 0x24
   14fc4:	beq	15038 <__assert_fail@plt+0x3cc8>
   14fc8:	ldr	lr, [ip, #24]
   14fcc:	cmp	lr, #0
   14fd0:	str	lr, [sp, #40]	; 0x28
   14fd4:	beq	15040 <__assert_fail@plt+0x3cd0>
   14fd8:	ldr	lr, [ip, #28]
   14fdc:	cmp	lr, #0
   14fe0:	str	lr, [sp, #44]	; 0x2c
   14fe4:	beq	15048 <__assert_fail@plt+0x3cd8>
   14fe8:	ldr	lr, [ip, #32]
   14fec:	cmp	lr, #0
   14ff0:	str	lr, [sp, #48]	; 0x30
   14ff4:	beq	15050 <__assert_fail@plt+0x3ce0>
   14ff8:	ldr	lr, [ip, #36]	; 0x24
   14ffc:	mov	ip, #10
   15000:	cmp	lr, #0
   15004:	str	lr, [sp, #52]	; 0x34
   15008:	movweq	ip, #9
   1500c:	b	15054 <__assert_fail@plt+0x3ce4>
   15010:	mov	ip, #0
   15014:	b	15054 <__assert_fail@plt+0x3ce4>
   15018:	mov	ip, #1
   1501c:	b	15054 <__assert_fail@plt+0x3ce4>
   15020:	mov	ip, #2
   15024:	b	15054 <__assert_fail@plt+0x3ce4>
   15028:	mov	ip, #3
   1502c:	b	15054 <__assert_fail@plt+0x3ce4>
   15030:	mov	ip, #4
   15034:	b	15054 <__assert_fail@plt+0x3ce4>
   15038:	mov	ip, #5
   1503c:	b	15054 <__assert_fail@plt+0x3ce4>
   15040:	mov	ip, #6
   15044:	b	15054 <__assert_fail@plt+0x3ce4>
   15048:	mov	ip, #7
   1504c:	b	15054 <__assert_fail@plt+0x3ce4>
   15050:	mov	ip, #8
   15054:	add	lr, sp, #16
   15058:	str	ip, [sp, #4]
   1505c:	str	lr, [sp]
   15060:	bl	14ad0 <__assert_fail@plt+0x3760>
   15064:	mov	sp, fp
   15068:	pop	{fp, pc}
   1506c:	push	{fp, lr}
   15070:	mov	fp, sp
   15074:	movw	r0, #33140	; 0x8174
   15078:	movt	r0, #2
   1507c:	ldr	r1, [r0]
   15080:	movw	r0, #26918	; 0x6926
   15084:	movt	r0, #1
   15088:	bl	110b8 <fputs_unlocked@plt>
   1508c:	movw	r1, #29783	; 0x7457
   15090:	mov	r0, #0
   15094:	mov	r2, #5
   15098:	movt	r1, #1
   1509c:	bl	11148 <dcgettext@plt>
   150a0:	movw	r2, #29803	; 0x746b
   150a4:	mov	r1, r0
   150a8:	mov	r0, #1
   150ac:	movt	r2, #1
   150b0:	bl	112b0 <__printf_chk@plt>
   150b4:	movw	r1, #29825	; 0x7481
   150b8:	mov	r0, #0
   150bc:	mov	r2, #5
   150c0:	movt	r1, #1
   150c4:	bl	11148 <dcgettext@plt>
   150c8:	movw	r2, #27702	; 0x6c36
   150cc:	movw	r3, #28208	; 0x6e30
   150d0:	mov	r1, r0
   150d4:	mov	r0, #1
   150d8:	movt	r2, #1
   150dc:	movt	r3, #1
   150e0:	bl	112b0 <__printf_chk@plt>
   150e4:	movw	r1, #29845	; 0x7495
   150e8:	mov	r0, #0
   150ec:	mov	r2, #5
   150f0:	movt	r1, #1
   150f4:	bl	11148 <dcgettext@plt>
   150f8:	movw	r2, #29884	; 0x74bc
   150fc:	mov	r1, r0
   15100:	mov	r0, #1
   15104:	movt	r2, #1
   15108:	pop	{fp, lr}
   1510c:	b	112b0 <__printf_chk@plt>
   15110:	push	{r4, r5, r6, sl, fp, lr}
   15114:	add	fp, sp, #16
   15118:	mov	r4, r2
   1511c:	mov	r5, r1
   15120:	mov	r6, r0
   15124:	bl	1652c <__assert_fail@plt+0x51bc>
   15128:	cmp	r0, #0
   1512c:	popne	{r4, r5, r6, sl, fp, pc}
   15130:	cmp	r6, #0
   15134:	beq	15148 <__assert_fail@plt+0x3dd8>
   15138:	cmp	r5, #0
   1513c:	cmpne	r4, #0
   15140:	bne	15148 <__assert_fail@plt+0x3dd8>
   15144:	pop	{r4, r5, r6, sl, fp, pc}
   15148:	bl	156c4 <__assert_fail@plt+0x4354>
   1514c:	push	{r4, r5, r6, sl, fp, lr}
   15150:	add	fp, sp, #16
   15154:	mov	r4, r2
   15158:	mov	r5, r1
   1515c:	mov	r6, r0
   15160:	bl	1652c <__assert_fail@plt+0x51bc>
   15164:	cmp	r0, #0
   15168:	popne	{r4, r5, r6, sl, fp, pc}
   1516c:	cmp	r6, #0
   15170:	beq	15184 <__assert_fail@plt+0x3e14>
   15174:	cmp	r5, #0
   15178:	cmpne	r4, #0
   1517c:	bne	15184 <__assert_fail@plt+0x3e14>
   15180:	pop	{r4, r5, r6, sl, fp, pc}
   15184:	bl	156c4 <__assert_fail@plt+0x4354>
   15188:	push	{fp, lr}
   1518c:	mov	fp, sp
   15190:	bl	15fbc <__assert_fail@plt+0x4c4c>
   15194:	cmp	r0, #0
   15198:	popne	{fp, pc}
   1519c:	bl	156c4 <__assert_fail@plt+0x4354>
   151a0:	push	{fp, lr}
   151a4:	mov	fp, sp
   151a8:	bl	15fbc <__assert_fail@plt+0x4c4c>
   151ac:	cmp	r0, #0
   151b0:	popne	{fp, pc}
   151b4:	bl	156c4 <__assert_fail@plt+0x4354>
   151b8:	push	{fp, lr}
   151bc:	mov	fp, sp
   151c0:	bl	15fbc <__assert_fail@plt+0x4c4c>
   151c4:	cmp	r0, #0
   151c8:	popne	{fp, pc}
   151cc:	bl	156c4 <__assert_fail@plt+0x4354>
   151d0:	push	{r4, r5, fp, lr}
   151d4:	add	fp, sp, #8
   151d8:	mov	r4, r1
   151dc:	mov	r5, r0
   151e0:	bl	15fec <__assert_fail@plt+0x4c7c>
   151e4:	cmp	r0, #0
   151e8:	popne	{r4, r5, fp, pc}
   151ec:	cmp	r5, #0
   151f0:	beq	15200 <__assert_fail@plt+0x3e90>
   151f4:	cmp	r4, #0
   151f8:	bne	15200 <__assert_fail@plt+0x3e90>
   151fc:	pop	{r4, r5, fp, pc}
   15200:	bl	156c4 <__assert_fail@plt+0x4354>
   15204:	push	{fp, lr}
   15208:	mov	fp, sp
   1520c:	cmp	r1, #0
   15210:	orreq	r1, r1, #1
   15214:	bl	15fec <__assert_fail@plt+0x4c7c>
   15218:	cmp	r0, #0
   1521c:	popne	{fp, pc}
   15220:	bl	156c4 <__assert_fail@plt+0x4354>
   15224:	push	{fp, lr}
   15228:	mov	fp, sp
   1522c:	clz	r3, r2
   15230:	lsr	ip, r3, #5
   15234:	clz	r3, r1
   15238:	lsr	r3, r3, #5
   1523c:	orrs	r3, r3, ip
   15240:	movwne	r1, #1
   15244:	movwne	r2, #1
   15248:	bl	1652c <__assert_fail@plt+0x51bc>
   1524c:	cmp	r0, #0
   15250:	popne	{fp, pc}
   15254:	bl	156c4 <__assert_fail@plt+0x4354>
   15258:	push	{fp, lr}
   1525c:	mov	fp, sp
   15260:	mov	r2, r1
   15264:	mov	r1, r0
   15268:	mov	r0, #0
   1526c:	bl	1652c <__assert_fail@plt+0x51bc>
   15270:	cmp	r0, #0
   15274:	popne	{fp, pc}
   15278:	bl	156c4 <__assert_fail@plt+0x4354>
   1527c:	push	{fp, lr}
   15280:	mov	fp, sp
   15284:	mov	r2, r1
   15288:	mov	r1, r0
   1528c:	clz	r0, r2
   15290:	clz	r3, r1
   15294:	lsr	r0, r0, #5
   15298:	lsr	r3, r3, #5
   1529c:	orrs	r0, r3, r0
   152a0:	mov	r0, #0
   152a4:	movwne	r1, #1
   152a8:	movwne	r2, #1
   152ac:	bl	1652c <__assert_fail@plt+0x51bc>
   152b0:	cmp	r0, #0
   152b4:	popne	{fp, pc}
   152b8:	bl	156c4 <__assert_fail@plt+0x4354>
   152bc:	push	{r4, r5, r6, sl, fp, lr}
   152c0:	add	fp, sp, #16
   152c4:	ldr	r5, [r1]
   152c8:	mov	r4, r1
   152cc:	mov	r6, r0
   152d0:	cmp	r0, #0
   152d4:	beq	152ec <__assert_fail@plt+0x3f7c>
   152d8:	mov	r0, #1
   152dc:	add	r0, r0, r5, lsr #1
   152e0:	adds	r5, r5, r0
   152e4:	bcc	152f4 <__assert_fail@plt+0x3f84>
   152e8:	b	15330 <__assert_fail@plt+0x3fc0>
   152ec:	cmp	r5, #0
   152f0:	movweq	r5, #64	; 0x40
   152f4:	mov	r0, r6
   152f8:	mov	r1, r5
   152fc:	mov	r2, #1
   15300:	bl	1652c <__assert_fail@plt+0x51bc>
   15304:	cmp	r5, #0
   15308:	mov	r1, r5
   1530c:	movwne	r1, #1
   15310:	cmp	r0, #0
   15314:	bne	15328 <__assert_fail@plt+0x3fb8>
   15318:	clz	r2, r6
   1531c:	lsr	r2, r2, #5
   15320:	orrs	r1, r2, r1
   15324:	bne	15330 <__assert_fail@plt+0x3fc0>
   15328:	str	r5, [r4]
   1532c:	pop	{r4, r5, r6, sl, fp, pc}
   15330:	bl	156c4 <__assert_fail@plt+0x4354>
   15334:	push	{r4, r5, r6, r7, fp, lr}
   15338:	add	fp, sp, #16
   1533c:	ldr	r5, [r1]
   15340:	mov	r6, r2
   15344:	mov	r4, r1
   15348:	mov	r7, r0
   1534c:	cmp	r0, #0
   15350:	beq	15368 <__assert_fail@plt+0x3ff8>
   15354:	mov	r0, #1
   15358:	add	r0, r0, r5, lsr #1
   1535c:	adds	r5, r5, r0
   15360:	bcc	15380 <__assert_fail@plt+0x4010>
   15364:	b	153b4 <__assert_fail@plt+0x4044>
   15368:	cmp	r5, #0
   1536c:	bne	15380 <__assert_fail@plt+0x4010>
   15370:	mov	r0, #64	; 0x40
   15374:	cmp	r6, #64	; 0x40
   15378:	udiv	r5, r0, r6
   1537c:	addhi	r5, r5, #1
   15380:	mov	r0, r7
   15384:	mov	r1, r5
   15388:	mov	r2, r6
   1538c:	bl	1652c <__assert_fail@plt+0x51bc>
   15390:	cmp	r0, #0
   15394:	bne	153ac <__assert_fail@plt+0x403c>
   15398:	cmp	r7, #0
   1539c:	beq	153b4 <__assert_fail@plt+0x4044>
   153a0:	cmp	r6, #0
   153a4:	cmpne	r5, #0
   153a8:	bne	153b4 <__assert_fail@plt+0x4044>
   153ac:	str	r5, [r4]
   153b0:	pop	{r4, r5, r6, r7, fp, pc}
   153b4:	bl	156c4 <__assert_fail@plt+0x4354>
   153b8:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   153bc:	add	fp, sp, #24
   153c0:	mov	r8, r1
   153c4:	ldr	r1, [r1]
   153c8:	mov	r5, r0
   153cc:	add	r0, r1, r1, asr #1
   153d0:	cmp	r0, r1
   153d4:	mvnvs	r0, #-2147483648	; 0x80000000
   153d8:	cmp	r0, r3
   153dc:	mov	r7, r0
   153e0:	movgt	r7, r3
   153e4:	cmn	r3, #1
   153e8:	movle	r7, r0
   153ec:	ldr	r0, [fp, #8]
   153f0:	cmn	r0, #1
   153f4:	ble	1541c <__assert_fail@plt+0x40ac>
   153f8:	cmp	r0, #0
   153fc:	beq	15470 <__assert_fail@plt+0x4100>
   15400:	cmn	r7, #1
   15404:	ble	15444 <__assert_fail@plt+0x40d4>
   15408:	mvn	r4, #-2147483648	; 0x80000000
   1540c:	udiv	r6, r4, r0
   15410:	cmp	r6, r7
   15414:	bge	15470 <__assert_fail@plt+0x4100>
   15418:	b	15480 <__assert_fail@plt+0x4110>
   1541c:	cmn	r7, #1
   15420:	ble	15460 <__assert_fail@plt+0x40f0>
   15424:	cmn	r0, #1
   15428:	beq	15470 <__assert_fail@plt+0x4100>
   1542c:	mov	r6, #-2147483648	; 0x80000000
   15430:	mvn	r4, #-2147483648	; 0x80000000
   15434:	sdiv	r6, r6, r0
   15438:	cmp	r6, r7
   1543c:	bge	15470 <__assert_fail@plt+0x4100>
   15440:	b	15480 <__assert_fail@plt+0x4110>
   15444:	beq	15470 <__assert_fail@plt+0x4100>
   15448:	mov	r6, #-2147483648	; 0x80000000
   1544c:	mvn	r4, #-2147483648	; 0x80000000
   15450:	sdiv	r6, r6, r7
   15454:	cmp	r6, r0
   15458:	bge	15470 <__assert_fail@plt+0x4100>
   1545c:	b	15480 <__assert_fail@plt+0x4110>
   15460:	mvn	r4, #-2147483648	; 0x80000000
   15464:	sdiv	r6, r4, r0
   15468:	cmp	r7, r6
   1546c:	blt	15480 <__assert_fail@plt+0x4110>
   15470:	mul	r6, r7, r0
   15474:	mov	r4, #64	; 0x40
   15478:	cmp	r6, #63	; 0x3f
   1547c:	bgt	15488 <__assert_fail@plt+0x4118>
   15480:	sdiv	r7, r4, r0
   15484:	mul	r6, r7, r0
   15488:	cmp	r5, #0
   1548c:	moveq	r4, #0
   15490:	streq	r4, [r8]
   15494:	sub	r4, r7, r1
   15498:	cmp	r4, r2
   1549c:	bge	15548 <__assert_fail@plt+0x41d8>
   154a0:	add	r7, r1, r2
   154a4:	mov	r6, #0
   154a8:	mov	r2, #0
   154ac:	cmp	r7, r3
   154b0:	movwgt	r6, #1
   154b4:	cmn	r3, #1
   154b8:	movwgt	r2, #1
   154bc:	cmp	r7, r1
   154c0:	bvs	1557c <__assert_fail@plt+0x420c>
   154c4:	ands	r1, r2, r6
   154c8:	bne	1557c <__assert_fail@plt+0x420c>
   154cc:	cmn	r0, #1
   154d0:	ble	154f8 <__assert_fail@plt+0x4188>
   154d4:	cmp	r0, #0
   154d8:	beq	15544 <__assert_fail@plt+0x41d4>
   154dc:	cmn	r7, #1
   154e0:	ble	1551c <__assert_fail@plt+0x41ac>
   154e4:	mvn	r1, #-2147483648	; 0x80000000
   154e8:	udiv	r1, r1, r0
   154ec:	cmp	r1, r7
   154f0:	bge	15544 <__assert_fail@plt+0x41d4>
   154f4:	b	1557c <__assert_fail@plt+0x420c>
   154f8:	cmn	r7, #1
   154fc:	ble	15534 <__assert_fail@plt+0x41c4>
   15500:	cmn	r0, #1
   15504:	beq	15544 <__assert_fail@plt+0x41d4>
   15508:	mov	r1, #-2147483648	; 0x80000000
   1550c:	sdiv	r1, r1, r0
   15510:	cmp	r1, r7
   15514:	bge	15544 <__assert_fail@plt+0x41d4>
   15518:	b	1557c <__assert_fail@plt+0x420c>
   1551c:	beq	15544 <__assert_fail@plt+0x41d4>
   15520:	mov	r1, #-2147483648	; 0x80000000
   15524:	sdiv	r1, r1, r7
   15528:	cmp	r1, r0
   1552c:	bge	15544 <__assert_fail@plt+0x41d4>
   15530:	b	1557c <__assert_fail@plt+0x420c>
   15534:	mvn	r1, #-2147483648	; 0x80000000
   15538:	sdiv	r1, r1, r0
   1553c:	cmp	r7, r1
   15540:	blt	1557c <__assert_fail@plt+0x420c>
   15544:	mul	r6, r7, r0
   15548:	mov	r0, r5
   1554c:	mov	r1, r6
   15550:	bl	15fec <__assert_fail@plt+0x4c7c>
   15554:	cmp	r6, #0
   15558:	movwne	r6, #1
   1555c:	cmp	r0, #0
   15560:	bne	15574 <__assert_fail@plt+0x4204>
   15564:	clz	r1, r5
   15568:	lsr	r1, r1, #5
   1556c:	orrs	r1, r1, r6
   15570:	bne	1557c <__assert_fail@plt+0x420c>
   15574:	str	r7, [r8]
   15578:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   1557c:	bl	156c4 <__assert_fail@plt+0x4354>
   15580:	push	{fp, lr}
   15584:	mov	fp, sp
   15588:	mov	r1, #1
   1558c:	bl	15f68 <__assert_fail@plt+0x4bf8>
   15590:	cmp	r0, #0
   15594:	popne	{fp, pc}
   15598:	bl	156c4 <__assert_fail@plt+0x4354>
   1559c:	push	{fp, lr}
   155a0:	mov	fp, sp
   155a4:	bl	15f68 <__assert_fail@plt+0x4bf8>
   155a8:	cmp	r0, #0
   155ac:	popne	{fp, pc}
   155b0:	bl	156c4 <__assert_fail@plt+0x4354>
   155b4:	push	{fp, lr}
   155b8:	mov	fp, sp
   155bc:	mov	r1, #1
   155c0:	bl	15f68 <__assert_fail@plt+0x4bf8>
   155c4:	cmp	r0, #0
   155c8:	popne	{fp, pc}
   155cc:	bl	156c4 <__assert_fail@plt+0x4354>
   155d0:	push	{fp, lr}
   155d4:	mov	fp, sp
   155d8:	bl	15f68 <__assert_fail@plt+0x4bf8>
   155dc:	cmp	r0, #0
   155e0:	popne	{fp, pc}
   155e4:	bl	156c4 <__assert_fail@plt+0x4354>
   155e8:	push	{r4, r5, fp, lr}
   155ec:	add	fp, sp, #8
   155f0:	mov	r5, r0
   155f4:	mov	r0, r1
   155f8:	mov	r4, r1
   155fc:	bl	15fbc <__assert_fail@plt+0x4c4c>
   15600:	cmp	r0, #0
   15604:	beq	15618 <__assert_fail@plt+0x42a8>
   15608:	mov	r1, r5
   1560c:	mov	r2, r4
   15610:	pop	{r4, r5, fp, lr}
   15614:	b	11130 <memcpy@plt>
   15618:	bl	156c4 <__assert_fail@plt+0x4354>
   1561c:	push	{r4, r5, fp, lr}
   15620:	add	fp, sp, #8
   15624:	mov	r5, r0
   15628:	mov	r0, r1
   1562c:	mov	r4, r1
   15630:	bl	15fbc <__assert_fail@plt+0x4c4c>
   15634:	cmp	r0, #0
   15638:	beq	1564c <__assert_fail@plt+0x42dc>
   1563c:	mov	r1, r5
   15640:	mov	r2, r4
   15644:	pop	{r4, r5, fp, lr}
   15648:	b	11130 <memcpy@plt>
   1564c:	bl	156c4 <__assert_fail@plt+0x4354>
   15650:	push	{r4, r5, fp, lr}
   15654:	add	fp, sp, #8
   15658:	mov	r5, r0
   1565c:	add	r0, r1, #1
   15660:	mov	r4, r1
   15664:	bl	15fbc <__assert_fail@plt+0x4c4c>
   15668:	cmp	r0, #0
   1566c:	beq	15688 <__assert_fail@plt+0x4318>
   15670:	mov	r1, #0
   15674:	mov	r2, r4
   15678:	strb	r1, [r0, r4]
   1567c:	mov	r1, r5
   15680:	pop	{r4, r5, fp, lr}
   15684:	b	11130 <memcpy@plt>
   15688:	bl	156c4 <__assert_fail@plt+0x4354>
   1568c:	push	{r4, r5, fp, lr}
   15690:	add	fp, sp, #8
   15694:	mov	r4, r0
   15698:	bl	1125c <strlen@plt>
   1569c:	add	r5, r0, #1
   156a0:	mov	r0, r5
   156a4:	bl	15fbc <__assert_fail@plt+0x4c4c>
   156a8:	cmp	r0, #0
   156ac:	beq	156c0 <__assert_fail@plt+0x4350>
   156b0:	mov	r1, r4
   156b4:	mov	r2, r5
   156b8:	pop	{r4, r5, fp, lr}
   156bc:	b	11130 <memcpy@plt>
   156c0:	bl	156c4 <__assert_fail@plt+0x4354>
   156c4:	push	{fp, lr}
   156c8:	mov	fp, sp
   156cc:	movw	r0, #33048	; 0x8118
   156d0:	movw	r1, #29960	; 0x7508
   156d4:	mov	r2, #5
   156d8:	movt	r0, #2
   156dc:	movt	r1, #1
   156e0:	ldr	r4, [r0]
   156e4:	mov	r0, #0
   156e8:	bl	11148 <dcgettext@plt>
   156ec:	movw	r2, #28881	; 0x70d1
   156f0:	mov	r3, r0
   156f4:	mov	r0, r4
   156f8:	mov	r1, #0
   156fc:	movt	r2, #1
   15700:	bl	111d8 <error@plt>
   15704:	bl	1134c <abort@plt>
   15708:	push	{r4, sl, fp, lr}
   1570c:	add	fp, sp, #8
   15710:	bl	16300 <__assert_fail@plt+0x4f90>
   15714:	mov	r4, r0
   15718:	cmn	r0, #1
   1571c:	bne	15730 <__assert_fail@plt+0x43c0>
   15720:	bl	11274 <__errno_location@plt>
   15724:	ldr	r0, [r0]
   15728:	cmp	r0, #12
   1572c:	beq	15738 <__assert_fail@plt+0x43c8>
   15730:	mov	r0, r4
   15734:	pop	{r4, sl, fp, pc}
   15738:	bl	156c4 <__assert_fail@plt+0x4354>
   1573c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   15740:	add	fp, sp, #28
   15744:	sub	sp, sp, #20
   15748:	cmp	r2, #37	; 0x25
   1574c:	bcs	15f48 <__assert_fail@plt+0x4bd8>
   15750:	ldr	r9, [fp, #8]
   15754:	mov	r5, r2
   15758:	mov	r4, r1
   1575c:	mov	r7, r0
   15760:	str	r3, [sp, #12]
   15764:	bl	11274 <__errno_location@plt>
   15768:	mov	r8, r0
   1576c:	mov	r0, #0
   15770:	str	r0, [r8]
   15774:	bl	1122c <__ctype_b_loc@plt>
   15778:	ldr	r1, [r0]
   1577c:	mov	r2, r7
   15780:	ldrb	r0, [r2], #1
   15784:	add	r3, r1, r0, lsl #1
   15788:	ldrb	r3, [r3, #1]
   1578c:	tst	r3, #32
   15790:	bne	15780 <__assert_fail@plt+0x4410>
   15794:	cmp	r4, #0
   15798:	add	r6, sp, #16
   1579c:	mov	sl, #4
   157a0:	movne	r6, r4
   157a4:	cmp	r0, #45	; 0x2d
   157a8:	beq	15e08 <__assert_fail@plt+0x4a98>
   157ac:	mov	r0, r7
   157b0:	mov	r1, r6
   157b4:	mov	r2, r5
   157b8:	bl	11250 <strtoul@plt>
   157bc:	ldr	r5, [r6]
   157c0:	cmp	r5, r7
   157c4:	beq	157f0 <__assert_fail@plt+0x4480>
   157c8:	mov	r4, r0
   157cc:	ldr	r0, [r8]
   157d0:	cmp	r0, #0
   157d4:	beq	15820 <__assert_fail@plt+0x44b0>
   157d8:	cmp	r0, #34	; 0x22
   157dc:	bne	15e08 <__assert_fail@plt+0x4a98>
   157e0:	mov	sl, #1
   157e4:	cmp	r9, #0
   157e8:	bne	1582c <__assert_fail@plt+0x44bc>
   157ec:	b	15e00 <__assert_fail@plt+0x4a90>
   157f0:	cmp	r9, #0
   157f4:	beq	15e08 <__assert_fail@plt+0x4a98>
   157f8:	ldrb	r1, [r7]
   157fc:	cmp	r1, #0
   15800:	beq	15e08 <__assert_fail@plt+0x4a98>
   15804:	mov	r0, r9
   15808:	bl	11268 <strchr@plt>
   1580c:	cmp	r0, #0
   15810:	beq	15e08 <__assert_fail@plt+0x4a98>
   15814:	mov	r4, #1
   15818:	mov	sl, #0
   1581c:	b	1582c <__assert_fail@plt+0x44bc>
   15820:	mov	sl, r0
   15824:	cmp	r9, #0
   15828:	beq	15e00 <__assert_fail@plt+0x4a90>
   1582c:	ldrb	r7, [r5]
   15830:	cmp	r7, #0
   15834:	beq	15e00 <__assert_fail@plt+0x4a90>
   15838:	mov	r0, r9
   1583c:	mov	r1, r7
   15840:	bl	11268 <strchr@plt>
   15844:	cmp	r0, #0
   15848:	beq	15ac4 <__assert_fail@plt+0x4754>
   1584c:	sub	r0, r7, #69	; 0x45
   15850:	mov	lr, #1
   15854:	mov	r8, #1024	; 0x400
   15858:	cmp	r0, #47	; 0x2f
   1585c:	bhi	15978 <__assert_fail@plt+0x4608>
   15860:	add	r1, pc, #0
   15864:	ldr	pc, [r1, r0, lsl #2]
   15868:	andeq	r5, r1, r8, lsr #18
   1586c:	andeq	r5, r1, r8, ror r9
   15870:	andeq	r5, r1, r8, lsr #18
   15874:	andeq	r5, r1, r8, ror r9
   15878:	andeq	r5, r1, r8, ror r9
   1587c:	andeq	r5, r1, r8, ror r9
   15880:	andeq	r5, r1, r8, lsr #18
   15884:	andeq	r5, r1, r8, ror r9
   15888:	andeq	r5, r1, r8, lsr #18
   1588c:	andeq	r5, r1, r8, ror r9
   15890:	andeq	r5, r1, r8, ror r9
   15894:	andeq	r5, r1, r8, lsr #18
   15898:	andeq	r5, r1, r8, ror r9
   1589c:	andeq	r5, r1, r8, ror r9
   158a0:	andeq	r5, r1, r8, ror r9
   158a4:	andeq	r5, r1, r8, lsr #18
   158a8:	andeq	r5, r1, r8, ror r9
   158ac:	andeq	r5, r1, r8, ror r9
   158b0:	andeq	r5, r1, r8, ror r9
   158b4:	andeq	r5, r1, r8, ror r9
   158b8:	andeq	r5, r1, r8, lsr #18
   158bc:	andeq	r5, r1, r8, lsr #18
   158c0:	andeq	r5, r1, r8, ror r9
   158c4:	andeq	r5, r1, r8, ror r9
   158c8:	andeq	r5, r1, r8, ror r9
   158cc:	andeq	r5, r1, r8, ror r9
   158d0:	andeq	r5, r1, r8, ror r9
   158d4:	andeq	r5, r1, r8, ror r9
   158d8:	andeq	r5, r1, r8, ror r9
   158dc:	andeq	r5, r1, r8, ror r9
   158e0:	andeq	r5, r1, r8, ror r9
   158e4:	andeq	r5, r1, r8, ror r9
   158e8:	andeq	r5, r1, r8, ror r9
   158ec:	andeq	r5, r1, r8, ror r9
   158f0:	andeq	r5, r1, r8, lsr #18
   158f4:	andeq	r5, r1, r8, ror r9
   158f8:	andeq	r5, r1, r8, ror r9
   158fc:	andeq	r5, r1, r8, ror r9
   15900:	andeq	r5, r1, r8, lsr #18
   15904:	andeq	r5, r1, r8, ror r9
   15908:	andeq	r5, r1, r8, lsr #18
   1590c:	andeq	r5, r1, r8, ror r9
   15910:	andeq	r5, r1, r8, ror r9
   15914:	andeq	r5, r1, r8, ror r9
   15918:	andeq	r5, r1, r8, ror r9
   1591c:	andeq	r5, r1, r8, ror r9
   15920:	andeq	r5, r1, r8, ror r9
   15924:	andeq	r5, r1, r8, lsr #18
   15928:	mov	r0, r9
   1592c:	mov	r1, #48	; 0x30
   15930:	bl	11268 <strchr@plt>
   15934:	cmp	r0, #0
   15938:	beq	15974 <__assert_fail@plt+0x4604>
   1593c:	ldrb	r0, [r5, #1]
   15940:	cmp	r0, #66	; 0x42
   15944:	cmpne	r0, #68	; 0x44
   15948:	bne	15958 <__assert_fail@plt+0x45e8>
   1594c:	mov	lr, #2
   15950:	mov	r8, #1000	; 0x3e8
   15954:	b	15978 <__assert_fail@plt+0x4608>
   15958:	cmp	r0, #105	; 0x69
   1595c:	bne	15974 <__assert_fail@plt+0x4604>
   15960:	ldrb	r0, [r5, #2]
   15964:	mov	lr, #1
   15968:	cmp	r0, #66	; 0x42
   1596c:	movweq	lr, #3
   15970:	b	15978 <__assert_fail@plt+0x4608>
   15974:	mov	lr, #1
   15978:	sub	r1, r7, #66	; 0x42
   1597c:	cmp	r1, #53	; 0x35
   15980:	bhi	15ac4 <__assert_fail@plt+0x4754>
   15984:	add	r2, pc, #4
   15988:	mov	r0, #0
   1598c:	ldr	pc, [r2, r1, lsl #2]
   15990:	andeq	r5, r1, ip, ror ip
   15994:	andeq	r5, r1, r4, asr #21
   15998:	andeq	r5, r1, r4, asr #21
   1599c:	muleq	r1, r8, ip
   159a0:	andeq	r5, r1, r4, asr #21
   159a4:	andeq	r5, r1, r8, ror #20
   159a8:	andeq	r5, r1, r4, asr #21
   159ac:	andeq	r5, r1, r4, asr #21
   159b0:	andeq	r5, r1, r4, asr #21
   159b4:	ldrdeq	r5, [r1], -r0
   159b8:	andeq	r5, r1, r4, asr #21
   159bc:	strdeq	r5, [r1], -r4
   159c0:	andeq	r5, r1, r4, asr #21
   159c4:	andeq	r5, r1, r4, asr #21
   159c8:	andeq	r5, r1, r0, asr sp
   159cc:	andeq	r5, r1, r4, asr #21
   159d0:	andeq	r5, r1, r4, asr #21
   159d4:	andeq	r5, r1, r4, asr #21
   159d8:	andeq	r5, r1, r4, lsr fp
   159dc:	andeq	r5, r1, r4, asr #21
   159e0:	andeq	r5, r1, r4, asr #21
   159e4:	andeq	r5, r1, r4, asr #21
   159e8:	andeq	r5, r1, r4, asr #21
   159ec:	andeq	r5, r1, r4, lsl lr
   159f0:	andeq	r5, r1, r8, lsr #23
   159f4:	andeq	r5, r1, r4, asr #21
   159f8:	andeq	r5, r1, r4, asr #21
   159fc:	andeq	r5, r1, r4, asr #21
   15a00:	andeq	r5, r1, r4, asr #21
   15a04:	andeq	r5, r1, r4, asr #21
   15a08:	andeq	r5, r1, r4, asr #21
   15a0c:	andeq	r5, r1, r4, asr #21
   15a10:	andeq	r5, r1, ip, lsl #30
   15a14:	andeq	r5, r1, r8, ror #27
   15a18:	andeq	r5, r1, r4, asr #21
   15a1c:	andeq	r5, r1, r4, asr #21
   15a20:	andeq	r5, r1, r4, asr #21
   15a24:	andeq	r5, r1, r8, ror #20
   15a28:	andeq	r5, r1, r4, asr #21
   15a2c:	andeq	r5, r1, r4, asr #21
   15a30:	andeq	r5, r1, r4, asr #21
   15a34:	ldrdeq	r5, [r1], -r0
   15a38:	andeq	r5, r1, r4, asr #21
   15a3c:	strdeq	r5, [r1], -r4
   15a40:	andeq	r5, r1, r4, asr #21
   15a44:	andeq	r5, r1, r4, asr #21
   15a48:	andeq	r5, r1, r4, asr #21
   15a4c:	andeq	r5, r1, r4, asr #21
   15a50:	andeq	r5, r1, r4, asr #21
   15a54:	andeq	r5, r1, r4, asr #21
   15a58:	andeq	r5, r1, r4, lsr fp
   15a5c:	andeq	r5, r1, r4, asr #21
   15a60:	andeq	r5, r1, r4, asr #21
   15a64:	andeq	r5, r1, r0, lsr pc
   15a68:	mvn	r0, #0
   15a6c:	mul	r1, r4, r8
   15a70:	mov	r7, #0
   15a74:	udiv	r0, r0, r8
   15a78:	cmp	r0, r4
   15a7c:	mvncc	r1, #0
   15a80:	cmp	r0, r1
   15a84:	mul	r2, r1, r8
   15a88:	mvncc	r2, #0
   15a8c:	cmp	r0, r2
   15a90:	mul	r3, r2, r8
   15a94:	mov	r2, #0
   15a98:	mvncc	r3, #0
   15a9c:	movwcc	r7, #1
   15aa0:	cmp	r0, r1
   15aa4:	mov	r1, #0
   15aa8:	movwcc	r1, #1
   15aac:	cmp	r0, r4
   15ab0:	mov	r4, r3
   15ab4:	movwcc	r2, #1
   15ab8:	orr	r0, r2, r1
   15abc:	orr	r0, r0, r7
   15ac0:	b	15de8 <__assert_fail@plt+0x4a78>
   15ac4:	ldr	r0, [sp, #12]
   15ac8:	orr	sl, sl, #2
   15acc:	b	15e04 <__assert_fail@plt+0x4a94>
   15ad0:	mvn	r0, #0
   15ad4:	mul	r1, r4, r8
   15ad8:	udiv	r0, r0, r8
   15adc:	cmp	r0, r4
   15ae0:	mov	r0, #0
   15ae4:	mvncc	r1, #0
   15ae8:	movwcc	r0, #1
   15aec:	mov	r4, r1
   15af0:	b	15de8 <__assert_fail@plt+0x4a78>
   15af4:	mvn	r0, #0
   15af8:	mul	r1, r4, r8
   15afc:	mov	r3, #0
   15b00:	udiv	r0, r0, r8
   15b04:	cmp	r0, r4
   15b08:	mvncc	r1, #0
   15b0c:	cmp	r0, r1
   15b10:	mul	r2, r1, r8
   15b14:	mov	r1, #0
   15b18:	mvncc	r2, #0
   15b1c:	movwcc	r3, #1
   15b20:	cmp	r0, r4
   15b24:	movwcc	r1, #1
   15b28:	mov	r4, r2
   15b2c:	orr	r0, r1, r3
   15b30:	b	15de8 <__assert_fail@plt+0x4a78>
   15b34:	mvn	r0, #0
   15b38:	mul	r1, r4, r8
   15b3c:	mov	r7, #0
   15b40:	udiv	r0, r0, r8
   15b44:	cmp	r0, r4
   15b48:	mvncc	r1, #0
   15b4c:	cmp	r0, r1
   15b50:	mul	r2, r1, r8
   15b54:	mvncc	r2, #0
   15b58:	cmp	r0, r2
   15b5c:	mul	r3, r2, r8
   15b60:	mvncc	r3, #0
   15b64:	cmp	r0, r3
   15b68:	mul	ip, r3, r8
   15b6c:	mov	r3, #0
   15b70:	mvncc	ip, #0
   15b74:	movwcc	r7, #1
   15b78:	cmp	r0, r2
   15b7c:	mov	r2, #0
   15b80:	movwcc	r2, #1
   15b84:	cmp	r0, r1
   15b88:	mov	r1, #0
   15b8c:	movwcc	r1, #1
   15b90:	cmp	r0, r4
   15b94:	movwcc	r3, #1
   15b98:	orr	r0, r3, r1
   15b9c:	orr	r0, r0, r2
   15ba0:	orr	r0, r0, r7
   15ba4:	b	15de4 <__assert_fail@plt+0x4a74>
   15ba8:	mvn	r0, #0
   15bac:	str	lr, [sp, #8]
   15bb0:	mul	lr, r4, r8
   15bb4:	udiv	r0, r0, r8
   15bb8:	cmp	r0, r4
   15bbc:	mvncc	lr, #0
   15bc0:	cmp	r0, lr
   15bc4:	mul	r9, lr, r8
   15bc8:	mvncc	r9, #0
   15bcc:	cmp	r0, r9
   15bd0:	mul	r7, r9, r8
   15bd4:	mvncc	r7, #0
   15bd8:	cmp	r0, r7
   15bdc:	mul	r3, r7, r8
   15be0:	mvncc	r3, #0
   15be4:	cmp	r0, r3
   15be8:	mul	r1, r3, r8
   15bec:	mvncc	r1, #0
   15bf0:	cmp	r0, r1
   15bf4:	mul	r2, r1, r8
   15bf8:	mvncc	r2, #0
   15bfc:	cmp	r0, r2
   15c00:	mul	ip, r2, r8
   15c04:	mov	r8, #0
   15c08:	mov	r2, #0
   15c0c:	mvncc	ip, #0
   15c10:	movwcc	r8, #1
   15c14:	cmp	r0, r1
   15c18:	mov	r1, #0
   15c1c:	movwcc	r1, #1
   15c20:	cmp	r0, r3
   15c24:	mov	r3, #0
   15c28:	movwcc	r3, #1
   15c2c:	cmp	r0, r7
   15c30:	mov	r7, #0
   15c34:	movwcc	r7, #1
   15c38:	cmp	r0, r9
   15c3c:	mov	r9, #0
   15c40:	movwcc	r9, #1
   15c44:	cmp	r0, lr
   15c48:	mov	lr, #0
   15c4c:	movwcc	lr, #1
   15c50:	cmp	r0, r4
   15c54:	movwcc	r2, #1
   15c58:	orr	r0, r2, lr
   15c5c:	ldr	lr, [sp, #8]
   15c60:	orr	r0, r0, r9
   15c64:	orr	r0, r0, r7
   15c68:	orr	r0, r0, r3
   15c6c:	orr	r0, r0, r1
   15c70:	orr	r0, r0, r8
   15c74:	and	r0, r0, #1
   15c78:	b	15de4 <__assert_fail@plt+0x4a74>
   15c7c:	mov	r1, #0
   15c80:	lsr	r0, r4, #22
   15c84:	cmp	r1, r4, lsr #22
   15c88:	lsl	r4, r4, #10
   15c8c:	movwne	r0, #1
   15c90:	mvnne	r4, #0
   15c94:	b	15de8 <__assert_fail@plt+0x4a78>
   15c98:	mvn	r0, #0
   15c9c:	mul	ip, r4, r8
   15ca0:	str	lr, [sp, #8]
   15ca4:	mov	r9, #0
   15ca8:	udiv	r0, r0, r8
   15cac:	cmp	r0, r4
   15cb0:	mvncc	ip, #0
   15cb4:	cmp	r0, ip
   15cb8:	mul	r2, ip, r8
   15cbc:	mvncc	r2, #0
   15cc0:	cmp	r0, r2
   15cc4:	mul	r3, r2, r8
   15cc8:	mvncc	r3, #0
   15ccc:	cmp	r0, r3
   15cd0:	mul	r7, r3, r8
   15cd4:	mvncc	r7, #0
   15cd8:	cmp	r0, r7
   15cdc:	mul	r1, r7, r8
   15ce0:	mvncc	r1, #0
   15ce4:	cmp	r0, r1
   15ce8:	mul	lr, r1, r8
   15cec:	mov	r8, #0
   15cf0:	mov	r1, #0
   15cf4:	mvncc	lr, #0
   15cf8:	movwcc	r8, #1
   15cfc:	cmp	r0, r7
   15d00:	mov	r7, #0
   15d04:	movwcc	r7, #1
   15d08:	cmp	r0, r3
   15d0c:	mov	r3, #0
   15d10:	movwcc	r3, #1
   15d14:	cmp	r0, r2
   15d18:	mov	r2, #0
   15d1c:	movwcc	r2, #1
   15d20:	cmp	r0, ip
   15d24:	movwcc	r1, #1
   15d28:	cmp	r0, r4
   15d2c:	mov	r4, lr
   15d30:	ldr	lr, [sp, #8]
   15d34:	movwcc	r9, #1
   15d38:	orr	r0, r9, r1
   15d3c:	orr	r0, r0, r2
   15d40:	orr	r0, r0, r3
   15d44:	orr	r0, r0, r7
   15d48:	orr	r0, r0, r8
   15d4c:	b	15de8 <__assert_fail@plt+0x4a78>
   15d50:	mvn	r0, #0
   15d54:	mul	r1, r4, r8
   15d58:	udiv	r0, r0, r8
   15d5c:	cmp	r0, r4
   15d60:	mvncc	r1, #0
   15d64:	cmp	r0, r1
   15d68:	mul	r2, r1, r8
   15d6c:	mvncc	r2, #0
   15d70:	cmp	r0, r2
   15d74:	mul	r3, r2, r8
   15d78:	mvncc	r3, #0
   15d7c:	cmp	r0, r3
   15d80:	mul	r7, r3, r8
   15d84:	mvncc	r7, #0
   15d88:	cmp	r0, r7
   15d8c:	mul	ip, r7, r8
   15d90:	mov	r8, lr
   15d94:	mov	lr, #0
   15d98:	mov	r7, #0
   15d9c:	mvncc	ip, #0
   15da0:	movwcc	lr, #1
   15da4:	cmp	r0, r3
   15da8:	mov	r3, #0
   15dac:	movwcc	r3, #1
   15db0:	cmp	r0, r2
   15db4:	mov	r2, #0
   15db8:	movwcc	r2, #1
   15dbc:	cmp	r0, r1
   15dc0:	mov	r1, #0
   15dc4:	movwcc	r1, #1
   15dc8:	cmp	r0, r4
   15dcc:	movwcc	r7, #1
   15dd0:	orr	r0, r7, r1
   15dd4:	orr	r0, r0, r2
   15dd8:	orr	r0, r0, r3
   15ddc:	orr	r0, r0, lr
   15de0:	mov	lr, r8
   15de4:	mov	r4, ip
   15de8:	add	r1, r5, lr
   15dec:	orr	sl, r0, sl
   15df0:	str	r1, [r6]
   15df4:	ldrb	r1, [r5, lr]
   15df8:	cmp	r1, #0
   15dfc:	orrne	sl, sl, #2
   15e00:	ldr	r0, [sp, #12]
   15e04:	str	r4, [r0]
   15e08:	mov	r0, sl
   15e0c:	sub	sp, fp, #28
   15e10:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15e14:	mvn	r0, #0
   15e18:	str	lr, [sp, #8]
   15e1c:	mul	lr, r4, r8
   15e20:	udiv	r0, r0, r8
   15e24:	cmp	r0, r4
   15e28:	mvncc	lr, #0
   15e2c:	cmp	r0, lr
   15e30:	mul	r9, lr, r8
   15e34:	mvncc	r9, #0
   15e38:	cmp	r0, r9
   15e3c:	mul	r7, r9, r8
   15e40:	mvncc	r7, #0
   15e44:	cmp	r0, r7
   15e48:	mul	r3, r7, r8
   15e4c:	mvncc	r3, #0
   15e50:	cmp	r0, r3
   15e54:	mul	r1, r3, r8
   15e58:	mvncc	r1, #0
   15e5c:	cmp	r0, r1
   15e60:	mul	r2, r1, r8
   15e64:	mvncc	r2, #0
   15e68:	cmp	r0, r2
   15e6c:	mul	ip, r2, r8
   15e70:	mvncc	ip, #0
   15e74:	cmp	r0, ip
   15e78:	mul	r8, ip, r8
   15e7c:	mov	ip, #0
   15e80:	mvncc	r8, #0
   15e84:	str	r8, [sp, #4]
   15e88:	mov	r8, #0
   15e8c:	movwcc	r8, #1
   15e90:	cmp	r0, r2
   15e94:	mov	r2, #0
   15e98:	movwcc	r2, #1
   15e9c:	cmp	r0, r1
   15ea0:	mov	r1, #0
   15ea4:	movwcc	r1, #1
   15ea8:	cmp	r0, r3
   15eac:	mov	r3, #0
   15eb0:	movwcc	r3, #1
   15eb4:	cmp	r0, r7
   15eb8:	mov	r7, #0
   15ebc:	movwcc	r7, #1
   15ec0:	cmp	r0, r9
   15ec4:	mov	r9, #0
   15ec8:	movwcc	r9, #1
   15ecc:	cmp	r0, lr
   15ed0:	mov	lr, #0
   15ed4:	movwcc	lr, #1
   15ed8:	cmp	r0, r4
   15edc:	ldr	r4, [sp, #4]
   15ee0:	movwcc	ip, #1
   15ee4:	orr	r0, ip, lr
   15ee8:	ldr	lr, [sp, #8]
   15eec:	orr	r0, r0, r9
   15ef0:	orr	r0, r0, r7
   15ef4:	orr	r0, r0, r3
   15ef8:	orr	r0, r0, r1
   15efc:	orr	r0, r0, r2
   15f00:	orr	r0, r0, r8
   15f04:	and	r0, r0, #1
   15f08:	b	15de8 <__assert_fail@plt+0x4a78>
   15f0c:	movw	r0, #65535	; 0xffff
   15f10:	movt	r0, #63	; 0x3f
   15f14:	orr	r1, r0, #4194304	; 0x400000
   15f18:	mov	r0, #0
   15f1c:	cmp	r4, r1
   15f20:	lsl	r4, r4, #9
   15f24:	movwhi	r0, #1
   15f28:	mvnhi	r4, #0
   15f2c:	b	15de8 <__assert_fail@plt+0x4a78>
   15f30:	cmp	r4, #0
   15f34:	lsl	r1, r4, #1
   15f38:	lsr	r0, r4, #31
   15f3c:	mvnmi	r1, #0
   15f40:	mov	r4, r1
   15f44:	b	15de8 <__assert_fail@plt+0x4a78>
   15f48:	movw	r0, #29977	; 0x7519
   15f4c:	movw	r1, #30015	; 0x753f
   15f50:	movw	r3, #30031	; 0x754f
   15f54:	mov	r2, #85	; 0x55
   15f58:	movt	r0, #1
   15f5c:	movt	r1, #1
   15f60:	movt	r3, #1
   15f64:	bl	11370 <__assert_fail@plt>
   15f68:	clz	r2, r1
   15f6c:	clz	r3, r0
   15f70:	lsr	r2, r2, #5
   15f74:	lsr	r3, r3, #5
   15f78:	orrs	r2, r3, r2
   15f7c:	movwne	r1, #1
   15f80:	movwne	r0, #1
   15f84:	cmp	r1, #0
   15f88:	beq	15fb8 <__assert_fail@plt+0x4c48>
   15f8c:	mvn	r2, #-2147483648	; 0x80000000
   15f90:	udiv	r2, r2, r1
   15f94:	cmp	r2, r0
   15f98:	bcs	15fb8 <__assert_fail@plt+0x4c48>
   15f9c:	push	{fp, lr}
   15fa0:	mov	fp, sp
   15fa4:	bl	11274 <__errno_location@plt>
   15fa8:	mov	r1, #12
   15fac:	str	r1, [r0]
   15fb0:	mov	r0, #0
   15fb4:	pop	{fp, pc}
   15fb8:	b	110a0 <calloc@plt>
   15fbc:	cmp	r0, #0
   15fc0:	movweq	r0, #1
   15fc4:	cmn	r0, #1
   15fc8:	ble	15fd0 <__assert_fail@plt+0x4c60>
   15fcc:	b	111f0 <malloc@plt>
   15fd0:	push	{fp, lr}
   15fd4:	mov	fp, sp
   15fd8:	bl	11274 <__errno_location@plt>
   15fdc:	mov	r1, #12
   15fe0:	str	r1, [r0]
   15fe4:	mov	r0, #0
   15fe8:	pop	{fp, pc}
   15fec:	push	{fp, lr}
   15ff0:	mov	fp, sp
   15ff4:	cmp	r0, #0
   15ff8:	beq	16014 <__assert_fail@plt+0x4ca4>
   15ffc:	cmp	r1, #0
   16000:	beq	16020 <__assert_fail@plt+0x4cb0>
   16004:	cmn	r1, #1
   16008:	ble	1602c <__assert_fail@plt+0x4cbc>
   1600c:	pop	{fp, lr}
   16010:	b	11154 <realloc@plt>
   16014:	mov	r0, r1
   16018:	pop	{fp, lr}
   1601c:	b	15fbc <__assert_fail@plt+0x4c4c>
   16020:	bl	12900 <__assert_fail@plt+0x1590>
   16024:	mov	r0, #0
   16028:	pop	{fp, pc}
   1602c:	bl	11274 <__errno_location@plt>
   16030:	mov	r1, #12
   16034:	str	r1, [r0]
   16038:	mov	r0, #0
   1603c:	pop	{fp, pc}
   16040:	push	{r4, r5, r6, sl, fp, lr}
   16044:	add	fp, sp, #16
   16048:	mov	r4, r0
   1604c:	bl	111c0 <__fpending@plt>
   16050:	ldr	r6, [r4]
   16054:	mov	r5, r0
   16058:	mov	r0, r4
   1605c:	bl	160c4 <__assert_fail@plt+0x4d54>
   16060:	tst	r6, #32
   16064:	bne	1609c <__assert_fail@plt+0x4d2c>
   16068:	cmp	r0, #0
   1606c:	mov	r4, r0
   16070:	mvnne	r4, #0
   16074:	cmp	r5, #0
   16078:	bne	160a8 <__assert_fail@plt+0x4d38>
   1607c:	cmp	r0, #0
   16080:	beq	160a8 <__assert_fail@plt+0x4d38>
   16084:	bl	11274 <__errno_location@plt>
   16088:	ldr	r0, [r0]
   1608c:	subs	r4, r0, #9
   16090:	mvnne	r4, #0
   16094:	mov	r0, r4
   16098:	pop	{r4, r5, r6, sl, fp, pc}
   1609c:	mvn	r4, #0
   160a0:	cmp	r0, #0
   160a4:	beq	160b0 <__assert_fail@plt+0x4d40>
   160a8:	mov	r0, r4
   160ac:	pop	{r4, r5, r6, sl, fp, pc}
   160b0:	bl	11274 <__errno_location@plt>
   160b4:	mov	r1, #0
   160b8:	str	r1, [r0]
   160bc:	mov	r0, r4
   160c0:	pop	{r4, r5, r6, sl, fp, pc}
   160c4:	push	{r4, r5, r6, sl, fp, lr}
   160c8:	add	fp, sp, #16
   160cc:	sub	sp, sp, #8
   160d0:	mov	r4, r0
   160d4:	bl	112bc <fileno@plt>
   160d8:	cmn	r0, #1
   160dc:	ble	16150 <__assert_fail@plt+0x4de0>
   160e0:	mov	r0, r4
   160e4:	bl	11208 <__freading@plt>
   160e8:	cmp	r0, #0
   160ec:	beq	16118 <__assert_fail@plt+0x4da8>
   160f0:	mov	r0, r4
   160f4:	bl	112bc <fileno@plt>
   160f8:	mov	r1, #1
   160fc:	mov	r2, #0
   16100:	mov	r3, #0
   16104:	str	r1, [sp]
   16108:	bl	1119c <lseek64@plt>
   1610c:	and	r0, r0, r1
   16110:	cmn	r0, #1
   16114:	beq	16150 <__assert_fail@plt+0x4de0>
   16118:	mov	r0, r4
   1611c:	bl	16160 <__assert_fail@plt+0x4df0>
   16120:	cmp	r0, #0
   16124:	beq	16150 <__assert_fail@plt+0x4de0>
   16128:	bl	11274 <__errno_location@plt>
   1612c:	ldr	r6, [r0]
   16130:	mov	r5, r0
   16134:	mov	r0, r4
   16138:	bl	112d4 <fclose@plt>
   1613c:	cmp	r6, #0
   16140:	strne	r6, [r5]
   16144:	mvnne	r0, #0
   16148:	sub	sp, fp, #16
   1614c:	pop	{r4, r5, r6, sl, fp, pc}
   16150:	mov	r0, r4
   16154:	sub	sp, fp, #16
   16158:	pop	{r4, r5, r6, sl, fp, lr}
   1615c:	b	112d4 <fclose@plt>
   16160:	push	{r4, sl, fp, lr}
   16164:	add	fp, sp, #8
   16168:	sub	sp, sp, #8
   1616c:	mov	r4, r0
   16170:	cmp	r0, #0
   16174:	beq	161ac <__assert_fail@plt+0x4e3c>
   16178:	mov	r0, r4
   1617c:	bl	11208 <__freading@plt>
   16180:	cmp	r0, #0
   16184:	beq	161ac <__assert_fail@plt+0x4e3c>
   16188:	ldrb	r0, [r4, #1]
   1618c:	tst	r0, #1
   16190:	beq	161ac <__assert_fail@plt+0x4e3c>
   16194:	mov	r0, #1
   16198:	mov	r2, #0
   1619c:	mov	r3, #0
   161a0:	str	r0, [sp]
   161a4:	mov	r0, r4
   161a8:	bl	161bc <__assert_fail@plt+0x4e4c>
   161ac:	mov	r0, r4
   161b0:	sub	sp, fp, #8
   161b4:	pop	{r4, sl, fp, lr}
   161b8:	b	11100 <fflush@plt>
   161bc:	push	{r4, r5, r6, r7, fp, lr}
   161c0:	add	fp, sp, #16
   161c4:	sub	sp, sp, #8
   161c8:	mov	r4, r0
   161cc:	ldr	r0, [r0, #4]
   161d0:	mov	r5, r3
   161d4:	mov	r6, r2
   161d8:	ldr	r1, [r4, #8]
   161dc:	cmp	r1, r0
   161e0:	bne	161fc <__assert_fail@plt+0x4e8c>
   161e4:	ldrd	r0, [r4, #16]
   161e8:	cmp	r1, r0
   161ec:	bne	161fc <__assert_fail@plt+0x4e8c>
   161f0:	ldr	r0, [r4, #36]	; 0x24
   161f4:	cmp	r0, #0
   161f8:	beq	16214 <__assert_fail@plt+0x4ea4>
   161fc:	mov	r0, r4
   16200:	mov	r2, r6
   16204:	mov	r3, r5
   16208:	sub	sp, fp, #16
   1620c:	pop	{r4, r5, r6, r7, fp, lr}
   16210:	b	112e0 <fseeko64@plt>
   16214:	ldr	r7, [fp, #8]
   16218:	mov	r0, r4
   1621c:	bl	112bc <fileno@plt>
   16220:	mov	r2, r6
   16224:	mov	r3, r5
   16228:	str	r7, [sp]
   1622c:	bl	1119c <lseek64@plt>
   16230:	and	r2, r0, r1
   16234:	cmn	r2, #1
   16238:	beq	16258 <__assert_fail@plt+0x4ee8>
   1623c:	strd	r0, [r4, #80]	; 0x50
   16240:	ldr	r0, [r4]
   16244:	bic	r0, r0, #16
   16248:	str	r0, [r4]
   1624c:	mov	r0, #0
   16250:	sub	sp, fp, #16
   16254:	pop	{r4, r5, r6, r7, fp, pc}
   16258:	mvn	r0, #0
   1625c:	sub	sp, fp, #16
   16260:	pop	{r4, r5, r6, r7, fp, pc}
   16264:	push	{fp, lr}
   16268:	mov	fp, sp
   1626c:	mov	r0, #14
   16270:	bl	1131c <nl_langinfo@plt>
   16274:	movw	r1, #26919	; 0x6927
   16278:	cmp	r0, #0
   1627c:	movt	r1, #1
   16280:	movne	r1, r0
   16284:	movw	r0, #30112	; 0x75a0
   16288:	ldrb	r2, [r1]
   1628c:	movt	r0, #1
   16290:	cmp	r2, #0
   16294:	movne	r0, r1
   16298:	pop	{fp, pc}
   1629c:	push	{r4, r5, r6, r7, fp, lr}
   162a0:	add	fp, sp, #16
   162a4:	sub	sp, sp, #8
   162a8:	cmp	r0, #0
   162ac:	add	r5, sp, #4
   162b0:	mov	r7, r2
   162b4:	mov	r4, r1
   162b8:	movne	r5, r0
   162bc:	mov	r0, r5
   162c0:	bl	111cc <mbrtowc@plt>
   162c4:	mov	r6, r0
   162c8:	cmp	r7, #0
   162cc:	beq	162f4 <__assert_fail@plt+0x4f84>
   162d0:	cmn	r6, #2
   162d4:	bcc	162f4 <__assert_fail@plt+0x4f84>
   162d8:	mov	r0, #0
   162dc:	bl	16568 <__assert_fail@plt+0x51f8>
   162e0:	cmp	r0, #0
   162e4:	bne	162f4 <__assert_fail@plt+0x4f84>
   162e8:	ldrb	r0, [r4]
   162ec:	mov	r6, #1
   162f0:	str	r0, [r5]
   162f4:	mov	r0, r6
   162f8:	sub	sp, fp, #16
   162fc:	pop	{r4, r5, r6, r7, fp, pc}
   16300:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   16304:	add	fp, sp, #28
   16308:	sub	sp, sp, #12
   1630c:	mov	sl, r2
   16310:	mov	r6, r1
   16314:	cmp	r0, #0
   16318:	beq	163ac <__assert_fail@plt+0x503c>
   1631c:	mov	r7, r0
   16320:	mov	r8, #10
   16324:	mov	r0, #0
   16328:	mov	r1, #40	; 0x28
   1632c:	str	r8, [sp, #8]
   16330:	bl	15fec <__assert_fail@plt+0x4c7c>
   16334:	mvn	r9, #0
   16338:	cmp	r0, #0
   1633c:	beq	16520 <__assert_fail@plt+0x51b0>
   16340:	str	sl, [sp, #4]
   16344:	mov	r5, r0
   16348:	add	sl, sp, #8
   1634c:	mov	r0, r7
   16350:	mov	r1, r6
   16354:	mov	r2, r5
   16358:	mov	r3, sl
   1635c:	bl	11298 <getgrouplist@plt>
   16360:	mov	r4, r0
   16364:	ldr	r0, [sp, #8]
   16368:	cmn	r4, #1
   1636c:	bgt	1637c <__assert_fail@plt+0x500c>
   16370:	cmp	r8, r0
   16374:	lsleq	r0, r8, #1
   16378:	streq	r0, [sp, #8]
   1637c:	cmp	r0, #536870912	; 0x20000000
   16380:	bcs	16434 <__assert_fail@plt+0x50c4>
   16384:	lsl	r1, r0, #2
   16388:	mov	r0, r5
   1638c:	bl	15fec <__assert_fail@plt+0x4c7c>
   16390:	cmp	r0, #0
   16394:	beq	16440 <__assert_fail@plt+0x50d0>
   16398:	cmn	r4, #1
   1639c:	bgt	1644c <__assert_fail@plt+0x50dc>
   163a0:	ldr	r8, [sp, #8]
   163a4:	mov	r5, r0
   163a8:	b	1634c <__assert_fail@plt+0x4fdc>
   163ac:	mov	r0, #0
   163b0:	mov	r1, #0
   163b4:	bl	11328 <getgroups@plt>
   163b8:	cmn	r0, #1
   163bc:	str	r0, [sp, #8]
   163c0:	ble	163f4 <__assert_fail@plt+0x5084>
   163c4:	mov	r4, r0
   163c8:	cmn	r6, #1
   163cc:	bne	1645c <__assert_fail@plt+0x50ec>
   163d0:	cmp	r4, #0
   163d4:	beq	1645c <__assert_fail@plt+0x50ec>
   163d8:	cmp	r4, #536870912	; 0x20000000
   163dc:	bcc	1646c <__assert_fail@plt+0x50fc>
   163e0:	bl	11274 <__errno_location@plt>
   163e4:	mov	r1, #12
   163e8:	mvn	r9, #0
   163ec:	str	r1, [r0]
   163f0:	b	16520 <__assert_fail@plt+0x51b0>
   163f4:	bl	11274 <__errno_location@plt>
   163f8:	ldr	r0, [r0]
   163fc:	mvn	r9, #0
   16400:	cmp	r0, #38	; 0x26
   16404:	bne	16520 <__assert_fail@plt+0x51b0>
   16408:	mov	r0, #0
   1640c:	mov	r1, #4
   16410:	bl	15fec <__assert_fail@plt+0x4c7c>
   16414:	cmp	r0, #0
   16418:	beq	16520 <__assert_fail@plt+0x51b0>
   1641c:	str	r0, [sl]
   16420:	str	r6, [r0]
   16424:	mvn	r0, #0
   16428:	subs	r9, r6, r0
   1642c:	movwne	r9, #1
   16430:	b	16520 <__assert_fail@plt+0x51b0>
   16434:	bl	11274 <__errno_location@plt>
   16438:	mov	r1, #12
   1643c:	str	r1, [r0]
   16440:	mov	r0, r5
   16444:	bl	12900 <__assert_fail@plt+0x1590>
   16448:	b	16520 <__assert_fail@plt+0x51b0>
   1644c:	ldr	r1, [sp, #4]
   16450:	str	r0, [r1]
   16454:	ldr	r9, [sp, #8]
   16458:	b	16520 <__assert_fail@plt+0x51b0>
   1645c:	add	r4, r4, #1
   16460:	str	r4, [sp, #8]
   16464:	cmp	r4, #536870912	; 0x20000000
   16468:	bcs	163e0 <__assert_fail@plt+0x5070>
   1646c:	lsl	r1, r4, #2
   16470:	mov	r0, #0
   16474:	bl	15fec <__assert_fail@plt+0x4c7c>
   16478:	cmp	r0, #0
   1647c:	beq	16508 <__assert_fail@plt+0x5198>
   16480:	mvn	r9, #0
   16484:	mov	r7, r0
   16488:	subs	r1, r6, r9
   1648c:	movwne	r1, #1
   16490:	sub	r0, r4, r1
   16494:	add	r1, r7, r1, lsl #2
   16498:	bl	11328 <getgroups@plt>
   1649c:	cmn	r0, #1
   164a0:	ble	16518 <__assert_fail@plt+0x51a8>
   164a4:	cmn	r6, #1
   164a8:	addne	r0, r0, #1
   164ac:	strne	r6, [r7]
   164b0:	str	r7, [sl]
   164b4:	cmp	r0, #2
   164b8:	blt	16510 <__assert_fail@plt+0x51a0>
   164bc:	mov	r2, r7
   164c0:	add	r1, r7, r0, lsl #2
   164c4:	ldr	r6, [r2], #4
   164c8:	cmp	r1, r2
   164cc:	bls	16510 <__assert_fail@plt+0x51a0>
   164d0:	mov	r3, r6
   164d4:	mov	r9, r0
   164d8:	b	164f0 <__assert_fail@plt+0x5180>
   164dc:	str	r0, [r7, #4]!
   164e0:	mov	r3, r0
   164e4:	add	r2, r2, #4
   164e8:	cmp	r2, r1
   164ec:	bcs	16520 <__assert_fail@plt+0x51b0>
   164f0:	ldr	r0, [r2]
   164f4:	cmp	r0, r6
   164f8:	cmpne	r0, r3
   164fc:	bne	164dc <__assert_fail@plt+0x516c>
   16500:	sub	r9, r9, #1
   16504:	b	164e4 <__assert_fail@plt+0x5174>
   16508:	mvn	r9, #0
   1650c:	b	16520 <__assert_fail@plt+0x51b0>
   16510:	mov	r9, r0
   16514:	b	16520 <__assert_fail@plt+0x51b0>
   16518:	mov	r0, r7
   1651c:	bl	12900 <__assert_fail@plt+0x1590>
   16520:	mov	r0, r9
   16524:	sub	sp, fp, #28
   16528:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1652c:	cmp	r2, #0
   16530:	beq	16560 <__assert_fail@plt+0x51f0>
   16534:	mvn	r3, #0
   16538:	udiv	r3, r3, r2
   1653c:	cmp	r3, r1
   16540:	bcs	16560 <__assert_fail@plt+0x51f0>
   16544:	push	{fp, lr}
   16548:	mov	fp, sp
   1654c:	bl	11274 <__errno_location@plt>
   16550:	mov	r1, #12
   16554:	str	r1, [r0]
   16558:	mov	r0, #0
   1655c:	pop	{fp, pc}
   16560:	mul	r1, r2, r1
   16564:	b	15fec <__assert_fail@plt+0x4c7c>
   16568:	push	{r4, sl, fp, lr}
   1656c:	add	fp, sp, #8
   16570:	sub	sp, sp, #264	; 0x108
   16574:	add	r1, sp, #7
   16578:	movw	r2, #257	; 0x101
   1657c:	bl	165d4 <__assert_fail@plt+0x5264>
   16580:	mov	r4, #0
   16584:	cmp	r0, #0
   16588:	bne	165c8 <__assert_fail@plt+0x5258>
   1658c:	movw	r1, #30118	; 0x75a6
   16590:	add	r0, sp, #7
   16594:	mov	r2, #2
   16598:	movt	r1, #1
   1659c:	bl	11244 <bcmp@plt>
   165a0:	cmp	r0, #0
   165a4:	beq	165c8 <__assert_fail@plt+0x5258>
   165a8:	movw	r1, #30120	; 0x75a8
   165ac:	add	r0, sp, #7
   165b0:	mov	r2, #6
   165b4:	movt	r1, #1
   165b8:	bl	11244 <bcmp@plt>
   165bc:	cmp	r0, #0
   165c0:	mov	r4, r0
   165c4:	movwne	r4, #1
   165c8:	mov	r0, r4
   165cc:	sub	sp, fp, #8
   165d0:	pop	{r4, sl, fp, pc}
   165d4:	push	{r4, r5, r6, r7, fp, lr}
   165d8:	add	fp, sp, #16
   165dc:	mov	r4, r1
   165e0:	mov	r1, #0
   165e4:	mov	r6, r2
   165e8:	bl	112f8 <setlocale@plt>
   165ec:	cmp	r0, #0
   165f0:	beq	16620 <__assert_fail@plt+0x52b0>
   165f4:	mov	r7, r0
   165f8:	bl	1125c <strlen@plt>
   165fc:	cmp	r0, r6
   16600:	bcs	1663c <__assert_fail@plt+0x52cc>
   16604:	add	r2, r0, #1
   16608:	mov	r0, r4
   1660c:	mov	r1, r7
   16610:	bl	11130 <memcpy@plt>
   16614:	mov	r5, #0
   16618:	mov	r0, r5
   1661c:	pop	{r4, r5, r6, r7, fp, pc}
   16620:	mov	r5, #22
   16624:	cmp	r6, #0
   16628:	beq	16664 <__assert_fail@plt+0x52f4>
   1662c:	mov	r0, #0
   16630:	strb	r0, [r4]
   16634:	mov	r0, r5
   16638:	pop	{r4, r5, r6, r7, fp, pc}
   1663c:	mov	r5, #34	; 0x22
   16640:	cmp	r6, #0
   16644:	beq	16664 <__assert_fail@plt+0x52f4>
   16648:	sub	r6, r6, #1
   1664c:	mov	r0, r4
   16650:	mov	r1, r7
   16654:	mov	r2, r6
   16658:	bl	11130 <memcpy@plt>
   1665c:	mov	r0, #0
   16660:	strb	r0, [r4, r6]
   16664:	mov	r0, r5
   16668:	pop	{r4, r5, r6, r7, fp, pc}
   1666c:	mov	r1, #0
   16670:	b	112f8 <setlocale@plt>
   16674:	cmp	r3, #0
   16678:	cmpeq	r2, #0
   1667c:	bne	16694 <__assert_fail@plt+0x5324>
   16680:	cmp	r1, #0
   16684:	cmpeq	r0, #0
   16688:	mvnne	r1, #0
   1668c:	mvnne	r0, #0
   16690:	b	166b0 <__assert_fail@plt+0x5340>
   16694:	sub	sp, sp, #8
   16698:	push	{sp, lr}
   1669c:	bl	166c0 <__assert_fail@plt+0x5350>
   166a0:	ldr	lr, [sp, #4]
   166a4:	add	sp, sp, #8
   166a8:	pop	{r2, r3}
   166ac:	bx	lr
   166b0:	push	{r1, lr}
   166b4:	mov	r0, #8
   166b8:	bl	110c4 <raise@plt>
   166bc:	pop	{r1, pc}
   166c0:	cmp	r1, r3
   166c4:	cmpeq	r0, r2
   166c8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   166cc:	mov	r4, r0
   166d0:	movcc	r0, #0
   166d4:	mov	r5, r1
   166d8:	ldr	lr, [sp, #36]	; 0x24
   166dc:	movcc	r1, r0
   166e0:	bcc	167dc <__assert_fail@plt+0x546c>
   166e4:	cmp	r3, #0
   166e8:	clzeq	ip, r2
   166ec:	clzne	ip, r3
   166f0:	addeq	ip, ip, #32
   166f4:	cmp	r5, #0
   166f8:	clzeq	r1, r4
   166fc:	addeq	r1, r1, #32
   16700:	clzne	r1, r5
   16704:	sub	ip, ip, r1
   16708:	sub	sl, ip, #32
   1670c:	lsl	r9, r3, ip
   16710:	rsb	fp, ip, #32
   16714:	orr	r9, r9, r2, lsl sl
   16718:	orr	r9, r9, r2, lsr fp
   1671c:	lsl	r8, r2, ip
   16720:	cmp	r5, r9
   16724:	cmpeq	r4, r8
   16728:	movcc	r0, #0
   1672c:	movcc	r1, r0
   16730:	bcc	1674c <__assert_fail@plt+0x53dc>
   16734:	mov	r0, #1
   16738:	subs	r4, r4, r8
   1673c:	lsl	r1, r0, sl
   16740:	orr	r1, r1, r0, lsr fp
   16744:	lsl	r0, r0, ip
   16748:	sbc	r5, r5, r9
   1674c:	cmp	ip, #0
   16750:	beq	167dc <__assert_fail@plt+0x546c>
   16754:	lsr	r6, r8, #1
   16758:	orr	r6, r6, r9, lsl #31
   1675c:	lsr	r7, r9, #1
   16760:	mov	r2, ip
   16764:	b	16788 <__assert_fail@plt+0x5418>
   16768:	subs	r3, r4, r6
   1676c:	sbc	r8, r5, r7
   16770:	adds	r3, r3, r3
   16774:	adc	r8, r8, r8
   16778:	adds	r4, r3, #1
   1677c:	adc	r5, r8, #0
   16780:	subs	r2, r2, #1
   16784:	beq	167a4 <__assert_fail@plt+0x5434>
   16788:	cmp	r5, r7
   1678c:	cmpeq	r4, r6
   16790:	bcs	16768 <__assert_fail@plt+0x53f8>
   16794:	adds	r4, r4, r4
   16798:	adc	r5, r5, r5
   1679c:	subs	r2, r2, #1
   167a0:	bne	16788 <__assert_fail@plt+0x5418>
   167a4:	lsr	r3, r4, ip
   167a8:	orr	r3, r3, r5, lsl fp
   167ac:	lsr	r2, r5, ip
   167b0:	orr	r3, r3, r5, lsr sl
   167b4:	adds	r0, r0, r4
   167b8:	mov	r4, r3
   167bc:	lsl	r3, r2, ip
   167c0:	orr	r3, r3, r4, lsl sl
   167c4:	lsl	ip, r4, ip
   167c8:	orr	r3, r3, r4, lsr fp
   167cc:	adc	r1, r1, r5
   167d0:	subs	r0, r0, ip
   167d4:	mov	r5, r2
   167d8:	sbc	r1, r1, r3
   167dc:	cmp	lr, #0
   167e0:	strdne	r4, [lr]
   167e4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   167e8:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   167ec:	mov	r7, r0
   167f0:	ldr	r6, [pc, #72]	; 16840 <__assert_fail@plt+0x54d0>
   167f4:	ldr	r5, [pc, #72]	; 16844 <__assert_fail@plt+0x54d4>
   167f8:	add	r6, pc, r6
   167fc:	add	r5, pc, r5
   16800:	sub	r6, r6, r5
   16804:	mov	r8, r1
   16808:	mov	r9, r2
   1680c:	bl	11080 <calloc@plt-0x20>
   16810:	asrs	r6, r6, #2
   16814:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   16818:	mov	r4, #0
   1681c:	add	r4, r4, #1
   16820:	ldr	r3, [r5], #4
   16824:	mov	r2, r9
   16828:	mov	r1, r8
   1682c:	mov	r0, r7
   16830:	blx	r3
   16834:	cmp	r6, r4
   16838:	bne	1681c <__assert_fail@plt+0x54ac>
   1683c:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   16840:	andeq	r1, r1, r4, lsl #14
   16844:	strdeq	r1, [r1], -ip
   16848:	bx	lr
   1684c:	ldr	r3, [pc, #12]	; 16860 <__assert_fail@plt+0x54f0>
   16850:	mov	r1, #0
   16854:	add	r3, pc, r3
   16858:	ldr	r2, [r3]
   1685c:	b	11280 <__cxa_atexit@plt>
   16860:			; <UNDEFINED> instruction: 0x000118b0

Disassembly of section .fini:

00016864 <.fini>:
   16864:	push	{r3, lr}
   16868:	pop	{r3, pc}
