
../repos/coreutils/src/seq:     file format elf32-littlearm


Disassembly of section .init:

00010ef4 <.init>:
   10ef4:	push	{r3, lr}
   10ef8:	bl	1120c <__mempcpy_chk@plt+0x4c>
   10efc:	pop	{r3, pc}

Disassembly of section .plt:

00010f00 <calloc@plt-0x14>:
   10f00:	push	{lr}		; (str lr, [sp, #-4]!)
   10f04:	ldr	lr, [pc, #4]	; 10f10 <calloc@plt-0x4>
   10f08:	add	lr, pc, lr
   10f0c:	ldr	pc, [lr, #8]!
   10f10:	strdeq	r6, [r1], -r0

00010f14 <calloc@plt>:
   10f14:	add	ip, pc, #0, 12
   10f18:	add	ip, ip, #90112	; 0x16000
   10f1c:	ldr	pc, [ip, #240]!	; 0xf0

00010f20 <fputs_unlocked@plt>:
   10f20:	add	ip, pc, #0, 12
   10f24:	add	ip, ip, #90112	; 0x16000
   10f28:	ldr	pc, [ip, #232]!	; 0xe8

00010f2c <uselocale@plt>:
   10f2c:	add	ip, pc, #0, 12
   10f30:	add	ip, ip, #90112	; 0x16000
   10f34:	ldr	pc, [ip, #224]!	; 0xe0

00010f38 <strcmp@plt>:
   10f38:	add	ip, pc, #0, 12
   10f3c:	add	ip, ip, #90112	; 0x16000
   10f40:	ldr	pc, [ip, #216]!	; 0xd8

00010f44 <strtol@plt>:
   10f44:	add	ip, pc, #0, 12
   10f48:	add	ip, ip, #90112	; 0x16000
   10f4c:	ldr	pc, [ip, #208]!	; 0xd0

00010f50 <strcspn@plt>:
   10f50:	add	ip, pc, #0, 12
   10f54:	add	ip, ip, #90112	; 0x16000
   10f58:	ldr	pc, [ip, #200]!	; 0xc8

00010f5c <fflush@plt>:
   10f5c:	add	ip, pc, #0, 12
   10f60:	add	ip, ip, #90112	; 0x16000
   10f64:	ldr	pc, [ip, #192]!	; 0xc0

00010f68 <memmove@plt>:
   10f68:	add	ip, pc, #0, 12
   10f6c:	add	ip, ip, #90112	; 0x16000
   10f70:	ldr	pc, [ip, #184]!	; 0xb8

00010f74 <free@plt>:
   10f74:	add	ip, pc, #0, 12
   10f78:	add	ip, ip, #90112	; 0x16000
   10f7c:	ldr	pc, [ip, #176]!	; 0xb0

00010f80 <_exit@plt>:
   10f80:	add	ip, pc, #0, 12
   10f84:	add	ip, ip, #90112	; 0x16000
   10f88:	ldr	pc, [ip, #168]!	; 0xa8

00010f8c <memcpy@plt>:
   10f8c:	add	ip, pc, #0, 12
   10f90:	add	ip, ip, #90112	; 0x16000
   10f94:	ldr	pc, [ip, #160]!	; 0xa0

00010f98 <mbsinit@plt>:
   10f98:	add	ip, pc, #0, 12
   10f9c:	add	ip, ip, #90112	; 0x16000
   10fa0:	ldr	pc, [ip, #152]!	; 0x98

00010fa4 <strtold@plt>:
   10fa4:	add	ip, pc, #0, 12
   10fa8:	add	ip, ip, #90112	; 0x16000
   10fac:	ldr	pc, [ip, #144]!	; 0x90

00010fb0 <fwrite_unlocked@plt>:
   10fb0:	add	ip, pc, #0, 12
   10fb4:	add	ip, ip, #90112	; 0x16000
   10fb8:	ldr	pc, [ip, #136]!	; 0x88

00010fbc <memcmp@plt>:
   10fbc:	add	ip, pc, #0, 12
   10fc0:	add	ip, ip, #90112	; 0x16000
   10fc4:	ldr	pc, [ip, #128]!	; 0x80

00010fc8 <dcgettext@plt>:
   10fc8:	add	ip, pc, #0, 12
   10fcc:	add	ip, ip, #90112	; 0x16000
   10fd0:	ldr	pc, [ip, #120]!	; 0x78

00010fd4 <realloc@plt>:
   10fd4:	add	ip, pc, #0, 12
   10fd8:	add	ip, ip, #90112	; 0x16000
   10fdc:	ldr	pc, [ip, #112]!	; 0x70

00010fe0 <textdomain@plt>:
   10fe0:	add	ip, pc, #0, 12
   10fe4:	add	ip, ip, #90112	; 0x16000
   10fe8:	ldr	pc, [ip, #104]!	; 0x68

00010fec <iswprint@plt>:
   10fec:	add	ip, pc, #0, 12
   10ff0:	add	ip, ip, #90112	; 0x16000
   10ff4:	ldr	pc, [ip, #96]!	; 0x60

00010ff8 <fwrite@plt>:
   10ff8:	add	ip, pc, #0, 12
   10ffc:	add	ip, ip, #90112	; 0x16000
   11000:	ldr	pc, [ip, #88]!	; 0x58

00011004 <lseek64@plt>:
   11004:	add	ip, pc, #0, 12
   11008:	add	ip, ip, #90112	; 0x16000
   1100c:	ldr	pc, [ip, #80]!	; 0x50

00011010 <__ctype_get_mb_cur_max@plt>:
   11010:	add	ip, pc, #0, 12
   11014:	add	ip, ip, #90112	; 0x16000
   11018:	ldr	pc, [ip, #72]!	; 0x48

0001101c <strcpy@plt>:
   1101c:	add	ip, pc, #0, 12
   11020:	add	ip, ip, #90112	; 0x16000
   11024:	ldr	pc, [ip, #64]!	; 0x40

00011028 <__fpending@plt>:
   11028:	add	ip, pc, #0, 12
   1102c:	add	ip, ip, #90112	; 0x16000
   11030:	ldr	pc, [ip, #56]!	; 0x38

00011034 <ferror_unlocked@plt>:
   11034:	add	ip, pc, #0, 12
   11038:	add	ip, ip, #90112	; 0x16000
   1103c:	ldr	pc, [ip, #48]!	; 0x30

00011040 <mbrtowc@plt>:
   11040:	add	ip, pc, #0, 12
   11044:	add	ip, ip, #90112	; 0x16000
   11048:	ldr	pc, [ip, #40]!	; 0x28

0001104c <error@plt>:
   1104c:	add	ip, pc, #0, 12
   11050:	add	ip, ip, #90112	; 0x16000
   11054:	ldr	pc, [ip, #32]!

00011058 <__asprintf_chk@plt>:
   11058:	add	ip, pc, #0, 12
   1105c:	add	ip, ip, #90112	; 0x16000
   11060:	ldr	pc, [ip, #24]!

00011064 <malloc@plt>:
   11064:	add	ip, pc, #0, 12
   11068:	add	ip, ip, #90112	; 0x16000
   1106c:	ldr	pc, [ip, #16]!

00011070 <__libc_start_main@plt>:
   11070:	add	ip, pc, #0, 12
   11074:	add	ip, ip, #90112	; 0x16000
   11078:	ldr	pc, [ip, #8]!

0001107c <__freading@plt>:
   1107c:	add	ip, pc, #0, 12
   11080:	add	ip, ip, #90112	; 0x16000
   11084:	ldr	pc, [ip, #0]!

00011088 <__gmon_start__@plt>:
   11088:	add	ip, pc, #0, 12
   1108c:	add	ip, ip, #86016	; 0x15000
   11090:	ldr	pc, [ip, #4088]!	; 0xff8

00011094 <getopt_long@plt>:
   11094:	add	ip, pc, #0, 12
   11098:	add	ip, ip, #86016	; 0x15000
   1109c:	ldr	pc, [ip, #4080]!	; 0xff0

000110a0 <__ctype_b_loc@plt>:
   110a0:	add	ip, pc, #0, 12
   110a4:	add	ip, ip, #86016	; 0x15000
   110a8:	ldr	pc, [ip, #4072]!	; 0xfe8

000110ac <exit@plt>:
   110ac:	add	ip, pc, #0, 12
   110b0:	add	ip, ip, #86016	; 0x15000
   110b4:	ldr	pc, [ip, #4064]!	; 0xfe0

000110b8 <bcmp@plt>:
   110b8:	add	ip, pc, #0, 12
   110bc:	add	ip, ip, #86016	; 0x15000
   110c0:	ldr	pc, [ip, #4056]!	; 0xfd8

000110c4 <strlen@plt>:
   110c4:	add	ip, pc, #0, 12
   110c8:	add	ip, ip, #86016	; 0x15000
   110cc:	ldr	pc, [ip, #4048]!	; 0xfd0

000110d0 <strchr@plt>:
   110d0:	add	ip, pc, #0, 12
   110d4:	add	ip, ip, #86016	; 0x15000
   110d8:	ldr	pc, [ip, #4040]!	; 0xfc8

000110dc <__errno_location@plt>:
   110dc:	add	ip, pc, #0, 12
   110e0:	add	ip, ip, #86016	; 0x15000
   110e4:	ldr	pc, [ip, #4032]!	; 0xfc0

000110e8 <__sprintf_chk@plt>:
   110e8:	add	ip, pc, #0, 12
   110ec:	add	ip, ip, #86016	; 0x15000
   110f0:	ldr	pc, [ip, #4024]!	; 0xfb8

000110f4 <__cxa_atexit@plt>:
   110f4:	add	ip, pc, #0, 12
   110f8:	add	ip, ip, #86016	; 0x15000
   110fc:	ldr	pc, [ip, #4016]!	; 0xfb0

00011100 <memset@plt>:
   11100:	add	ip, pc, #0, 12
   11104:	add	ip, ip, #86016	; 0x15000
   11108:	ldr	pc, [ip, #4008]!	; 0xfa8

0001110c <__printf_chk@plt>:
   1110c:	add	ip, pc, #0, 12
   11110:	add	ip, ip, #86016	; 0x15000
   11114:	ldr	pc, [ip, #4000]!	; 0xfa0

00011118 <fileno@plt>:
   11118:	add	ip, pc, #0, 12
   1111c:	add	ip, ip, #86016	; 0x15000
   11120:	ldr	pc, [ip, #3992]!	; 0xf98

00011124 <__fprintf_chk@plt>:
   11124:	add	ip, pc, #0, 12
   11128:	add	ip, ip, #86016	; 0x15000
   1112c:	ldr	pc, [ip, #3984]!	; 0xf90

00011130 <memchr@plt>:
   11130:	add	ip, pc, #0, 12
   11134:	add	ip, ip, #86016	; 0x15000
   11138:	ldr	pc, [ip, #3976]!	; 0xf88

0001113c <fclose@plt>:
   1113c:	add	ip, pc, #0, 12
   11140:	add	ip, ip, #86016	; 0x15000
   11144:	ldr	pc, [ip, #3968]!	; 0xf80

00011148 <fseeko64@plt>:
   11148:	add	ip, pc, #0, 12
   1114c:	add	ip, ip, #86016	; 0x15000
   11150:	ldr	pc, [ip, #3960]!	; 0xf78

00011154 <setlocale@plt>:
   11154:	add	ip, pc, #0, 12
   11158:	add	ip, ip, #86016	; 0x15000
   1115c:	ldr	pc, [ip, #3952]!	; 0xf70

00011160 <strrchr@plt>:
   11160:	add	ip, pc, #0, 12
   11164:	add	ip, ip, #86016	; 0x15000
   11168:	ldr	pc, [ip, #3944]!	; 0xf68

0001116c <nl_langinfo@plt>:
   1116c:	add	ip, pc, #0, 12
   11170:	add	ip, ip, #86016	; 0x15000
   11174:	ldr	pc, [ip, #3936]!	; 0xf60

00011178 <newlocale@plt>:
   11178:	add	ip, pc, #0, 12
   1117c:	add	ip, ip, #86016	; 0x15000
   11180:	ldr	pc, [ip, #3928]!	; 0xf58

00011184 <clearerr_unlocked@plt>:
   11184:	add	ip, pc, #0, 12
   11188:	add	ip, ip, #86016	; 0x15000
   1118c:	ldr	pc, [ip, #3920]!	; 0xf50

00011190 <bindtextdomain@plt>:
   11190:	add	ip, pc, #0, 12
   11194:	add	ip, ip, #86016	; 0x15000
   11198:	ldr	pc, [ip, #3912]!	; 0xf48

0001119c <strncmp@plt>:
   1119c:	add	ip, pc, #0, 12
   111a0:	add	ip, ip, #86016	; 0x15000
   111a4:	ldr	pc, [ip, #3904]!	; 0xf40

000111a8 <abort@plt>:
   111a8:	add	ip, pc, #0, 12
   111ac:	add	ip, ip, #86016	; 0x15000
   111b0:	ldr	pc, [ip, #3896]!	; 0xf38

000111b4 <strspn@plt>:
   111b4:	add	ip, pc, #0, 12
   111b8:	add	ip, ip, #86016	; 0x15000
   111bc:	ldr	pc, [ip, #3888]!	; 0xf30

000111c0 <__mempcpy_chk@plt>:
   111c0:	add	ip, pc, #0, 12
   111c4:	add	ip, ip, #86016	; 0x15000
   111c8:	ldr	pc, [ip, #3880]!	; 0xf28

Disassembly of section .text:

000111d0 <.text>:
   111d0:	mov	fp, #0
   111d4:	mov	lr, #0
   111d8:	pop	{r1}		; (ldr r1, [sp], #4)
   111dc:	mov	r2, sp
   111e0:	push	{r2}		; (str r2, [sp, #-4]!)
   111e4:	push	{r0}		; (str r0, [sp, #-4]!)
   111e8:	ldr	ip, [pc, #16]	; 11200 <__mempcpy_chk@plt+0x40>
   111ec:	push	{ip}		; (str ip, [sp, #-4]!)
   111f0:	ldr	r0, [pc, #12]	; 11204 <__mempcpy_chk@plt+0x44>
   111f4:	ldr	r3, [pc, #12]	; 11208 <__mempcpy_chk@plt+0x48>
   111f8:	bl	11070 <__libc_start_main@plt>
   111fc:	bl	111a8 <abort@plt>
   11200:	muleq	r1, r8, sl
   11204:	andeq	r1, r1, r8, asr #11
   11208:	andeq	r5, r1, r8, lsr sl
   1120c:	ldr	r3, [pc, #20]	; 11228 <__mempcpy_chk@plt+0x68>
   11210:	ldr	r2, [pc, #20]	; 1122c <__mempcpy_chk@plt+0x6c>
   11214:	add	r3, pc, r3
   11218:	ldr	r2, [r3, r2]
   1121c:	cmp	r2, #0
   11220:	bxeq	lr
   11224:	b	11088 <__gmon_start__@plt>
   11228:	andeq	r5, r1, r4, ror #27
   1122c:	strdeq	r0, [r0], -r4
   11230:	ldr	r0, [pc, #24]	; 11250 <__mempcpy_chk@plt+0x90>
   11234:	ldr	r3, [pc, #24]	; 11254 <__mempcpy_chk@plt+0x94>
   11238:	cmp	r3, r0
   1123c:	bxeq	lr
   11240:	ldr	r3, [pc, #16]	; 11258 <__mempcpy_chk@plt+0x98>
   11244:	cmp	r3, #0
   11248:	bxeq	lr
   1124c:	bx	r3
   11250:	andeq	r7, r2, r8, asr #2
   11254:	andeq	r7, r2, r8, asr #2
   11258:	andeq	r0, r0, r0
   1125c:	ldr	r0, [pc, #36]	; 11288 <__mempcpy_chk@plt+0xc8>
   11260:	ldr	r1, [pc, #36]	; 1128c <__mempcpy_chk@plt+0xcc>
   11264:	sub	r1, r1, r0
   11268:	asr	r1, r1, #2
   1126c:	add	r1, r1, r1, lsr #31
   11270:	asrs	r1, r1, #1
   11274:	bxeq	lr
   11278:	ldr	r3, [pc, #16]	; 11290 <__mempcpy_chk@plt+0xd0>
   1127c:	cmp	r3, #0
   11280:	bxeq	lr
   11284:	bx	r3
   11288:	andeq	r7, r2, r8, asr #2
   1128c:	andeq	r7, r2, r8, asr #2
   11290:	andeq	r0, r0, r0
   11294:	push	{r4, lr}
   11298:	ldr	r4, [pc, #24]	; 112b8 <__mempcpy_chk@plt+0xf8>
   1129c:	ldrb	r3, [r4]
   112a0:	cmp	r3, #0
   112a4:	popne	{r4, pc}
   112a8:	bl	11230 <__mempcpy_chk@plt+0x70>
   112ac:	mov	r3, #1
   112b0:	strb	r3, [r4]
   112b4:	pop	{r4, pc}
   112b8:	andeq	r7, r2, r4, ror #2
   112bc:	b	1125c <__mempcpy_chk@plt+0x9c>
   112c0:	push	{fp, lr}
   112c4:	mov	fp, sp
   112c8:	sub	sp, sp, #8
   112cc:	mov	r4, r0
   112d0:	cmp	r0, #0
   112d4:	bne	113cc <__mempcpy_chk@plt+0x20c>
   112d8:	movw	r1, #23275	; 0x5aeb
   112dc:	movt	r1, #1
   112e0:	mov	r0, #0
   112e4:	mov	r2, #5
   112e8:	bl	10fc8 <dcgettext@plt>
   112ec:	mov	r1, r0
   112f0:	movw	r0, #29076	; 0x7194
   112f4:	movt	r0, #2
   112f8:	ldr	r2, [r0]
   112fc:	str	r2, [sp]
   11300:	mov	r0, #1
   11304:	mov	r3, r2
   11308:	bl	1110c <__printf_chk@plt>
   1130c:	movw	r1, #23379	; 0x5b53
   11310:	movt	r1, #1
   11314:	mov	r0, #0
   11318:	mov	r2, #5
   1131c:	bl	10fc8 <dcgettext@plt>
   11320:	movw	r5, #29020	; 0x715c
   11324:	movt	r5, #2
   11328:	ldr	r1, [r5]
   1132c:	bl	10f20 <fputs_unlocked@plt>
   11330:	bl	11410 <__mempcpy_chk@plt+0x250>
   11334:	movw	r1, #23437	; 0x5b8d
   11338:	movt	r1, #1
   1133c:	mov	r0, #0
   11340:	mov	r2, #5
   11344:	bl	10fc8 <dcgettext@plt>
   11348:	ldr	r1, [r5]
   1134c:	bl	10f20 <fputs_unlocked@plt>
   11350:	movw	r1, #23649	; 0x5c61
   11354:	movt	r1, #1
   11358:	mov	r0, #0
   1135c:	mov	r2, #5
   11360:	bl	10fc8 <dcgettext@plt>
   11364:	ldr	r1, [r5]
   11368:	bl	10f20 <fputs_unlocked@plt>
   1136c:	movw	r1, #23694	; 0x5c8e
   11370:	movt	r1, #1
   11374:	mov	r0, #0
   11378:	mov	r2, #5
   1137c:	bl	10fc8 <dcgettext@plt>
   11380:	ldr	r1, [r5]
   11384:	bl	10f20 <fputs_unlocked@plt>
   11388:	movw	r1, #23748	; 0x5cc4
   1138c:	movt	r1, #1
   11390:	mov	r0, #0
   11394:	mov	r2, #5
   11398:	bl	10fc8 <dcgettext@plt>
   1139c:	ldr	r1, [r5]
   113a0:	bl	10f20 <fputs_unlocked@plt>
   113a4:	movw	r1, #24261	; 0x5ec5
   113a8:	movt	r1, #1
   113ac:	mov	r0, #0
   113b0:	mov	r2, #5
   113b4:	bl	10fc8 <dcgettext@plt>
   113b8:	ldr	r1, [r5]
   113bc:	bl	10f20 <fputs_unlocked@plt>
   113c0:	bl	11440 <__mempcpy_chk@plt+0x280>
   113c4:	mov	r0, r4
   113c8:	bl	110ac <exit@plt>
   113cc:	movw	r0, #29016	; 0x7158
   113d0:	movt	r0, #2
   113d4:	ldr	r5, [r0]
   113d8:	movw	r1, #23236	; 0x5ac4
   113dc:	movt	r1, #1
   113e0:	mov	r0, #0
   113e4:	mov	r2, #5
   113e8:	bl	10fc8 <dcgettext@plt>
   113ec:	mov	r2, r0
   113f0:	movw	r0, #29076	; 0x7194
   113f4:	movt	r0, #2
   113f8:	ldr	r3, [r0]
   113fc:	mov	r0, r5
   11400:	mov	r1, #1
   11404:	bl	11124 <__fprintf_chk@plt>
   11408:	mov	r0, r4
   1140c:	bl	110ac <exit@plt>
   11410:	push	{fp, lr}
   11414:	mov	fp, sp
   11418:	movw	r1, #24680	; 0x6068
   1141c:	movt	r1, #1
   11420:	mov	r0, #0
   11424:	mov	r2, #5
   11428:	bl	10fc8 <dcgettext@plt>
   1142c:	movw	r1, #29020	; 0x715c
   11430:	movt	r1, #2
   11434:	ldr	r1, [r1]
   11438:	pop	{fp, lr}
   1143c:	b	10f20 <fputs_unlocked@plt>
   11440:	push	{r4, r5, r6, sl, fp, lr}
   11444:	add	fp, sp, #16
   11448:	sub	sp, sp, #56	; 0x38
   1144c:	movw	r0, #25488	; 0x6390
   11450:	movt	r0, #1
   11454:	add	r1, r0, #32
   11458:	mov	r2, #48	; 0x30
   1145c:	vld1.64	{d16-d17}, [r1]
   11460:	mov	r6, sp
   11464:	add	r1, r6, #32
   11468:	add	r3, r0, #16
   1146c:	vld1.64	{d18-d19}, [r0], r2
   11470:	vld1.64	{d20-d21}, [r3]
   11474:	vldr	d22, [r0]
   11478:	vst1.64	{d16-d17}, [r1]
   1147c:	add	r0, r6, #16
   11480:	vst1.64	{d20-d21}, [r0]
   11484:	mov	r0, r6
   11488:	vst1.64	{d18-d19}, [r0], r2
   1148c:	vstr	d22, [r0]
   11490:	ldr	r1, [sp]
   11494:	cmp	r1, #0
   11498:	movw	r4, #24469	; 0x5f95
   1149c:	movt	r4, #1
   114a0:	beq	114c8 <__mempcpy_chk@plt+0x308>
   114a4:	mov	r6, sp
   114a8:	movw	r5, #24469	; 0x5f95
   114ac:	movt	r5, #1
   114b0:	mov	r0, r5
   114b4:	bl	10f38 <strcmp@plt>
   114b8:	cmp	r0, #0
   114bc:	ldrne	r1, [r6, #8]!
   114c0:	cmpne	r1, #0
   114c4:	bne	114b0 <__mempcpy_chk@plt+0x2f0>
   114c8:	ldr	r5, [r6, #4]
   114cc:	movw	r1, #24850	; 0x6112
   114d0:	movt	r1, #1
   114d4:	mov	r0, #0
   114d8:	mov	r2, #5
   114dc:	bl	10fc8 <dcgettext@plt>
   114e0:	mov	r1, r0
   114e4:	movw	r2, #24504	; 0x5fb8
   114e8:	movt	r2, #1
   114ec:	movw	r3, #24873	; 0x6129
   114f0:	movt	r3, #1
   114f4:	mov	r0, #1
   114f8:	bl	1110c <__printf_chk@plt>
   114fc:	cmp	r5, #0
   11500:	moveq	r5, r4
   11504:	mov	r0, #5
   11508:	mov	r1, #0
   1150c:	bl	11154 <setlocale@plt>
   11510:	cmp	r0, #0
   11514:	beq	11554 <__mempcpy_chk@plt+0x394>
   11518:	movw	r1, #24913	; 0x6151
   1151c:	movt	r1, #1
   11520:	mov	r2, #3
   11524:	bl	1119c <strncmp@plt>
   11528:	cmp	r0, #0
   1152c:	beq	11554 <__mempcpy_chk@plt+0x394>
   11530:	movw	r1, #24917	; 0x6155
   11534:	movt	r1, #1
   11538:	mov	r0, #0
   1153c:	mov	r2, #5
   11540:	bl	10fc8 <dcgettext@plt>
   11544:	movw	r1, #29020	; 0x715c
   11548:	movt	r1, #2
   1154c:	ldr	r1, [r1]
   11550:	bl	10f20 <fputs_unlocked@plt>
   11554:	movw	r1, #24988	; 0x619c
   11558:	movt	r1, #1
   1155c:	mov	r0, #0
   11560:	mov	r2, #5
   11564:	bl	10fc8 <dcgettext@plt>
   11568:	mov	r1, r0
   1156c:	movw	r2, #24873	; 0x6129
   11570:	movt	r2, #1
   11574:	mov	r0, #1
   11578:	mov	r3, r4
   1157c:	bl	1110c <__printf_chk@plt>
   11580:	movw	r0, #24783	; 0x60cf
   11584:	movt	r0, #1
   11588:	movw	r6, #25065	; 0x61e9
   1158c:	movt	r6, #1
   11590:	cmp	r5, r4
   11594:	moveq	r6, r0
   11598:	movw	r1, #25015	; 0x61b7
   1159c:	movt	r1, #1
   115a0:	mov	r0, #0
   115a4:	mov	r2, #5
   115a8:	bl	10fc8 <dcgettext@plt>
   115ac:	mov	r1, r0
   115b0:	mov	r0, #1
   115b4:	mov	r2, r5
   115b8:	mov	r3, r6
   115bc:	sub	sp, fp, #16
   115c0:	pop	{r4, r5, r6, sl, fp, lr}
   115c4:	b	1110c <__printf_chk@plt>
   115c8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   115cc:	add	fp, sp, #28
   115d0:	sub	sp, sp, #4
   115d4:	vpush	{d8-d9}
   115d8:	sub	sp, sp, #96	; 0x60
   115dc:	mov	r5, r1
   115e0:	mov	r7, r0
   115e4:	movw	r0, #25376	; 0x6320
   115e8:	movt	r0, #1
   115ec:	vld1.64	{d16-d17}, [r0]
   115f0:	sub	r0, fp, #64	; 0x40
   115f4:	vst1.64	{d16-d17}, [r0]
   115f8:	mov	r4, #0
   115fc:	str	r4, [sp, #76]	; 0x4c
   11600:	str	r4, [sp, #72]	; 0x48
   11604:	ldr	r0, [r1]
   11608:	bl	12b8c <__mempcpy_chk@plt+0x19cc>
   1160c:	movw	r1, #25065	; 0x61e9
   11610:	movt	r1, #1
   11614:	mov	r0, #6
   11618:	bl	11154 <setlocale@plt>
   1161c:	cmp	r0, #0
   11620:	movwne	r0, #1
   11624:	movw	r1, #29032	; 0x7168
   11628:	movt	r1, #2
   1162c:	strb	r0, [r1]
   11630:	movw	r6, #24508	; 0x5fbc
   11634:	movt	r6, #1
   11638:	movw	r1, #24473	; 0x5f99
   1163c:	movt	r1, #1
   11640:	mov	r0, r6
   11644:	bl	11190 <bindtextdomain@plt>
   11648:	mov	r0, r6
   1164c:	bl	10fe0 <textdomain@plt>
   11650:	movw	r0, #10876	; 0x2a7c
   11654:	movt	r0, #1
   11658:	bl	15a9c <__mempcpy_chk@plt+0x48dc>
   1165c:	movw	r0, #29033	; 0x7169
   11660:	movt	r0, #2
   11664:	strb	r4, [r0]
   11668:	movw	r1, #29036	; 0x716c
   1166c:	movt	r1, #2
   11670:	movw	r0, #25064	; 0x61e8
   11674:	movt	r0, #1
   11678:	str	r0, [r1]
   1167c:	movw	r8, #29008	; 0x7150
   11680:	movt	r8, #2
   11684:	ldr	r0, [r8]
   11688:	cmp	r0, r7
   1168c:	bge	1175c <__mempcpy_chk@plt+0x59c>
   11690:	mov	r9, #0
   11694:	movw	sl, #24497	; 0x5fb1
   11698:	movt	sl, #1
   1169c:	movw	r6, #25392	; 0x6330
   116a0:	movt	r6, #1
   116a4:	mov	r4, #0
   116a8:	ldr	r0, [r5, r0, lsl #2]
   116ac:	ldrb	r1, [r0]
   116b0:	cmp	r1, #45	; 0x2d
   116b4:	bne	116d0 <__mempcpy_chk@plt+0x510>
   116b8:	ldrb	r0, [r0, #1]
   116bc:	cmp	r0, #46	; 0x2e
   116c0:	beq	1175c <__mempcpy_chk@plt+0x59c>
   116c4:	sub	r0, r0, #48	; 0x30
   116c8:	cmp	r0, #10
   116cc:	bcc	1175c <__mempcpy_chk@plt+0x59c>
   116d0:	str	r9, [sp]
   116d4:	mov	r0, r7
   116d8:	mov	r1, r5
   116dc:	mov	r2, sl
   116e0:	mov	r3, r6
   116e4:	bl	11094 <getopt_long@plt>
   116e8:	cmp	r0, #101	; 0x65
   116ec:	ble	11754 <__mempcpy_chk@plt+0x594>
   116f0:	cmp	r0, #119	; 0x77
   116f4:	beq	1171c <__mempcpy_chk@plt+0x55c>
   116f8:	cmp	r0, #115	; 0x73
   116fc:	bne	11730 <__mempcpy_chk@plt+0x570>
   11700:	movw	r0, #29024	; 0x7160
   11704:	movt	r0, #2
   11708:	ldr	r0, [r0]
   1170c:	movw	r1, #29036	; 0x716c
   11710:	movt	r1, #2
   11714:	str	r0, [r1]
   11718:	b	11744 <__mempcpy_chk@plt+0x584>
   1171c:	movw	r0, #29033	; 0x7169
   11720:	movt	r0, #2
   11724:	mov	r1, #1
   11728:	strb	r1, [r0]
   1172c:	b	11744 <__mempcpy_chk@plt+0x584>
   11730:	cmp	r0, #102	; 0x66
   11734:	bne	11ca8 <__mempcpy_chk@plt+0xae8>
   11738:	movw	r0, #29024	; 0x7160
   1173c:	movt	r0, #2
   11740:	ldr	r4, [r0]
   11744:	ldr	r0, [r8]
   11748:	cmp	r0, r7
   1174c:	blt	116a8 <__mempcpy_chk@plt+0x4e8>
   11750:	b	1175c <__mempcpy_chk@plt+0x59c>
   11754:	cmn	r0, #1
   11758:	bne	11c00 <__mempcpy_chk@plt+0xa40>
   1175c:	ldr	r0, [r8]
   11760:	subs	r6, r7, r0
   11764:	beq	11c60 <__mempcpy_chk@plt+0xaa0>
   11768:	cmp	r6, #4
   1176c:	bcs	11c6c <__mempcpy_chk@plt+0xaac>
   11770:	cmp	r4, #0
   11774:	beq	11814 <__mempcpy_chk@plt+0x654>
   11778:	add	r1, sp, #72	; 0x48
   1177c:	mov	r0, r4
   11780:	bl	11d18 <__mempcpy_chk@plt+0xb58>
   11784:	str	r0, [sp, #48]	; 0x30
   11788:	movw	r0, #29033	; 0x7169
   1178c:	movt	r0, #2
   11790:	ldrb	r0, [r0]
   11794:	cmp	r0, #1
   11798:	beq	11cb0 <__mempcpy_chk@plt+0xaf0>
   1179c:	mov	r0, #1
   117a0:	str	r0, [sp, #40]	; 0x28
   117a4:	cmp	r6, #3
   117a8:	bne	1182c <__mempcpy_chk@plt+0x66c>
   117ac:	ldr	r0, [r8]
   117b0:	add	r0, r5, r0, lsl #2
   117b4:	ldr	r4, [r0, #4]
   117b8:	mov	r0, r4
   117bc:	bl	11f00 <__mempcpy_chk@plt+0xd40>
   117c0:	mov	r9, #0
   117c4:	cmp	r0, #0
   117c8:	beq	11830 <__mempcpy_chk@plt+0x670>
   117cc:	mov	r9, #0
   117d0:	sub	r2, fp, #64	; 0x40
   117d4:	movw	r3, #10716	; 0x29dc
   117d8:	movt	r3, #1
   117dc:	mov	r0, r4
   117e0:	mov	r1, #0
   117e4:	bl	1502c <__mempcpy_chk@plt+0x3e6c>
   117e8:	cmp	r0, #0
   117ec:	beq	11830 <__mempcpy_chk@plt+0x670>
   117f0:	vldr	d16, [fp, #-64]	; 0xffffffc0
   117f4:	vcmpe.f64	d16, #0.0
   117f8:	vmrs	APSR_nzcv, fpscr
   117fc:	ble	11830 <__mempcpy_chk@plt+0x670>
   11800:	vldr	d17, [pc, #1008]	; 11bf8 <__mempcpy_chk@plt+0xa38>
   11804:	vcmpe.f64	d16, d17
   11808:	vmrs	APSR_nzcv, fpscr
   1180c:	movls	r9, #1
   11810:	b	11830 <__mempcpy_chk@plt+0x670>
   11814:	mov	r0, #0
   11818:	str	r0, [sp, #40]	; 0x28
   1181c:	mov	r0, #0
   11820:	str	r0, [sp, #48]	; 0x30
   11824:	cmp	r6, #3
   11828:	beq	117ac <__mempcpy_chk@plt+0x5ec>
   1182c:	mov	r9, #1
   11830:	str	r7, [sp, #44]	; 0x2c
   11834:	ldr	r7, [r8]
   11838:	ldr	r4, [r5, r7, lsl #2]
   1183c:	mov	r0, r4
   11840:	bl	11f00 <__mempcpy_chk@plt+0xd40>
   11844:	cmp	r0, #0
   11848:	beq	118f8 <__mempcpy_chk@plt+0x738>
   1184c:	cmp	r6, #1
   11850:	bne	118c4 <__mempcpy_chk@plt+0x704>
   11854:	movw	r0, #29033	; 0x7169
   11858:	movt	r0, #2
   1185c:	ldrb	r0, [r0]
   11860:	ldr	r1, [sp, #40]	; 0x28
   11864:	orr	r0, r1, r0
   11868:	tst	r0, #1
   1186c:	bne	118f8 <__mempcpy_chk@plt+0x738>
   11870:	movw	r0, #29036	; 0x716c
   11874:	movt	r0, #2
   11878:	ldr	r0, [r0]
   1187c:	bl	110c4 <strlen@plt>
   11880:	cmp	r0, #1
   11884:	bne	118f8 <__mempcpy_chk@plt+0x738>
   11888:	movw	r0, #24635	; 0x603b
   1188c:	movt	r0, #1
   11890:	vldr	d16, [fp, #-64]	; 0xffffffc0
   11894:	cmp	r6, #1
   11898:	moveq	r4, r0
   1189c:	add	r0, r6, r7
   118a0:	add	r6, r5, r0, lsl #2
   118a4:	vmov	r0, r1, d16
   118a8:	bl	159f8 <__mempcpy_chk@plt+0x4838>
   118ac:	mov	r2, r0
   118b0:	mov	r3, r1
   118b4:	ldr	r1, [r6, #-4]
   118b8:	mov	r0, r4
   118bc:	bl	11f4c <__mempcpy_chk@plt+0xd8c>
   118c0:	b	118f8 <__mempcpy_chk@plt+0x738>
   118c4:	add	sl, r5, r7, lsl #2
   118c8:	ldr	r0, [sl, #4]
   118cc:	bl	11f00 <__mempcpy_chk@plt+0xd40>
   118d0:	cmp	r0, #0
   118d4:	beq	118f8 <__mempcpy_chk@plt+0x738>
   118d8:	cmp	r6, #3
   118dc:	bcc	11854 <__mempcpy_chk@plt+0x694>
   118e0:	cmp	r9, #0
   118e4:	beq	118f8 <__mempcpy_chk@plt+0x738>
   118e8:	ldr	r0, [sl, #8]
   118ec:	bl	11f00 <__mempcpy_chk@plt+0xd40>
   118f0:	cmp	r0, #0
   118f4:	bne	11854 <__mempcpy_chk@plt+0x694>
   118f8:	ldr	r0, [r8]
   118fc:	add	r1, r0, #1
   11900:	str	r1, [r8]
   11904:	ldr	r1, [r5, r0, lsl #2]
   11908:	add	r0, sp, #56	; 0x38
   1190c:	bl	1225c <__mempcpy_chk@plt+0x109c>
   11910:	ldr	sl, [sp, #56]	; 0x38
   11914:	ldr	r6, [sp, #60]	; 0x3c
   11918:	ldr	lr, [sp, #64]	; 0x40
   1191c:	ldr	r9, [sp, #68]	; 0x44
   11920:	ldr	r0, [r8]
   11924:	ldr	r4, [sp, #44]	; 0x2c
   11928:	cmp	r0, r4
   1192c:	bge	119c4 <__mempcpy_chk@plt+0x804>
   11930:	str	lr, [sp, #36]	; 0x24
   11934:	add	r1, r0, #1
   11938:	str	r1, [r8]
   1193c:	ldr	r1, [r5, r0, lsl #2]
   11940:	add	r0, sp, #56	; 0x38
   11944:	bl	1225c <__mempcpy_chk@plt+0x109c>
   11948:	add	lr, sp, #56	; 0x38
   1194c:	ldm	lr, {r7, ip, lr}
   11950:	ldr	r1, [sp, #68]	; 0x44
   11954:	ldr	r0, [r8]
   11958:	cmp	r0, r4
   1195c:	bge	119a4 <__mempcpy_chk@plt+0x7e4>
   11960:	str	r1, [fp, #-52]	; 0xffffffcc
   11964:	sub	r1, fp, #64	; 0x40
   11968:	stm	r1, {r7, ip, lr}
   1196c:	vmov	d16, r7, ip
   11970:	vcmp.f64	d16, #0.0
   11974:	vmrs	APSR_nzcv, fpscr
   11978:	beq	11cdc <__mempcpy_chk@plt+0xb1c>
   1197c:	add	r1, r0, #1
   11980:	movw	r2, #29008	; 0x7150
   11984:	movt	r2, #2
   11988:	str	r1, [r2]
   1198c:	ldr	r1, [r5, r0, lsl #2]
   11990:	add	r0, sp, #56	; 0x38
   11994:	bl	1225c <__mempcpy_chk@plt+0x109c>
   11998:	add	lr, sp, #56	; 0x38
   1199c:	ldm	lr, {r7, ip, lr}
   119a0:	ldr	r1, [sp, #68]	; 0x44
   119a4:	cmp	r9, #0
   119a8:	ldr	r2, [sp, #36]	; 0x24
   119ac:	mov	r3, r2
   119b0:	mov	r4, r9
   119b4:	mov	r5, sl
   119b8:	mov	r8, r6
   119bc:	beq	119e4 <__mempcpy_chk@plt+0x824>
   119c0:	b	11a04 <__mempcpy_chk@plt+0x844>
   119c4:	movw	r8, #0
   119c8:	movt	r8, #16368	; 0x3ff0
   119cc:	mov	r4, #0
   119d0:	mov	r3, #1
   119d4:	mov	r5, #0
   119d8:	mov	r7, sl
   119dc:	mov	ip, r6
   119e0:	mov	r1, r9
   119e4:	cmp	r1, #0
   119e8:	ldreq	r0, [fp, #-52]	; 0xffffffcc
   119ec:	cmpeq	r0, #0
   119f0:	beq	11a78 <__mempcpy_chk@plt+0x8b8>
   119f4:	mov	r2, r3
   119f8:	mov	r9, r4
   119fc:	mov	sl, r5
   11a00:	mov	r6, r8
   11a04:	ldr	r0, [sp, #48]	; 0x30
   11a08:	cmp	r0, #0
   11a0c:	bne	11a4c <__mempcpy_chk@plt+0x88c>
   11a10:	ldr	r0, [fp, #-64]	; 0xffffffc0
   11a14:	mov	r5, r1
   11a18:	ldr	r1, [fp, #-60]	; 0xffffffc4
   11a1c:	ldr	r4, [fp, #-56]	; 0xffffffc8
   11a20:	ldr	r3, [fp, #-52]	; 0xffffffcc
   11a24:	stm	sp, {r0, r1, r4}
   11a28:	add	r0, sp, #12
   11a2c:	stm	r0, {r3, r7, ip, lr}
   11a30:	str	r5, [sp, #28]
   11a34:	mov	r0, sl
   11a38:	mov	r1, r6
   11a3c:	mov	r3, r9
   11a40:	mov	r5, ip
   11a44:	bl	12584 <__mempcpy_chk@plt+0x13c4>
   11a48:	mov	ip, r5
   11a4c:	ldr	r1, [sp, #72]	; 0x48
   11a50:	ldr	r2, [sp, #76]	; 0x4c
   11a54:	vldr	d1, [fp, #-64]	; 0xffffffc0
   11a58:	vmov	d0, sl, r6
   11a5c:	vmov	d2, r7, ip
   11a60:	bl	1267c <__mempcpy_chk@plt+0x14bc>
   11a64:	mov	r0, #0
   11a68:	sub	sp, fp, #48	; 0x30
   11a6c:	vpop	{d8-d9}
   11a70:	add	sp, sp, #4
   11a74:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   11a78:	vmov	d9, r5, r8
   11a7c:	vcmpe.f64	d9, #0.0
   11a80:	vmrs	APSR_nzcv, fpscr
   11a84:	blt	119f4 <__mempcpy_chk@plt+0x834>
   11a88:	vmov.i32	d16, #0	; 0x00000000
   11a8c:	vmul.f64	d16, d9, d16
   11a90:	vcmp.f64	d16, #0.0
   11a94:	vmrs	APSR_nzcv, fpscr
   11a98:	bne	119f4 <__mempcpy_chk@plt+0x834>
   11a9c:	vmov	d8, r7, ip
   11aa0:	vcmpe.f64	d8, #0.0
   11aa4:	vmrs	APSR_nzcv, fpscr
   11aa8:	blt	119f4 <__mempcpy_chk@plt+0x834>
   11aac:	vldr	d16, [fp, #-64]	; 0xffffffc0
   11ab0:	vcmpe.f64	d16, #0.0
   11ab4:	vmrs	APSR_nzcv, fpscr
   11ab8:	ble	119f4 <__mempcpy_chk@plt+0x834>
   11abc:	vldr	d17, [pc, #588]	; 11d10 <__mempcpy_chk@plt+0xb50>
   11ac0:	vcmpe.f64	d16, d17
   11ac4:	vmrs	APSR_nzcv, fpscr
   11ac8:	bhi	119f4 <__mempcpy_chk@plt+0x834>
   11acc:	movw	r0, #29033	; 0x7169
   11ad0:	movt	r0, #2
   11ad4:	ldrb	r0, [r0]
   11ad8:	ldr	r2, [sp, #40]	; 0x28
   11adc:	orr	r0, r2, r0
   11ae0:	tst	r0, #1
   11ae4:	bne	119f4 <__mempcpy_chk@plt+0x834>
   11ae8:	mov	r6, r3
   11aec:	str	r1, [sp, #40]	; 0x28
   11af0:	str	lr, [sp, #36]	; 0x24
   11af4:	str	ip, [sp, #44]	; 0x2c
   11af8:	movw	r0, #29036	; 0x716c
   11afc:	movt	r0, #2
   11b00:	ldr	r0, [r0]
   11b04:	bl	110c4 <strlen@plt>
   11b08:	cmp	r0, #1
   11b0c:	bne	11b6c <__mempcpy_chk@plt+0x9ac>
   11b10:	vstr	d9, [sp]
   11b14:	add	r0, sp, #56	; 0x38
   11b18:	movw	r2, #24670	; 0x605e
   11b1c:	movt	r2, #1
   11b20:	mov	r1, #1
   11b24:	bl	11058 <__asprintf_chk@plt>
   11b28:	cmn	r0, #1
   11b2c:	ble	11b68 <__mempcpy_chk@plt+0x9a8>
   11b30:	vmov.i32	d16, #0	; 0x00000000
   11b34:	vmul.f64	d16, d8, d16
   11b38:	vcmp.f64	d16, #0.0
   11b3c:	mov	r9, r4
   11b40:	vmrs	APSR_nzcv, fpscr
   11b44:	bne	11b78 <__mempcpy_chk@plt+0x9b8>
   11b48:	vstr	d8, [sp]
   11b4c:	add	r0, sp, #52	; 0x34
   11b50:	movw	r2, #24670	; 0x605e
   11b54:	movt	r2, #1
   11b58:	mov	r1, #1
   11b5c:	bl	11058 <__asprintf_chk@plt>
   11b60:	cmn	r0, #1
   11b64:	bgt	11b88 <__mempcpy_chk@plt+0x9c8>
   11b68:	bl	14fe8 <__mempcpy_chk@plt+0x3e28>
   11b6c:	mov	r2, r6
   11b70:	mov	r9, r4
   11b74:	b	11bdc <__mempcpy_chk@plt+0xa1c>
   11b78:	movw	r0, #24676	; 0x6064
   11b7c:	movt	r0, #1
   11b80:	bl	14fc8 <__mempcpy_chk@plt+0x3e08>
   11b84:	str	r0, [sp, #52]	; 0x34
   11b88:	ldr	r4, [sp, #56]	; 0x38
   11b8c:	ldrb	r0, [r4]
   11b90:	cmp	r0, #45	; 0x2d
   11b94:	beq	11bc8 <__mempcpy_chk@plt+0xa08>
   11b98:	ldr	sl, [sp, #52]	; 0x34
   11b9c:	ldrb	r0, [sl]
   11ba0:	cmp	r0, #45	; 0x2d
   11ba4:	beq	11bc8 <__mempcpy_chk@plt+0xa08>
   11ba8:	vldr	d16, [fp, #-64]	; 0xffffffc0
   11bac:	vmov	r0, r1, d16
   11bb0:	bl	159f8 <__mempcpy_chk@plt+0x4838>
   11bb4:	mov	r2, r0
   11bb8:	mov	r3, r1
   11bbc:	mov	r0, r4
   11bc0:	mov	r1, sl
   11bc4:	bl	11f4c <__mempcpy_chk@plt+0xd8c>
   11bc8:	ldr	r0, [sp, #56]	; 0x38
   11bcc:	bl	12b64 <__mempcpy_chk@plt+0x19a4>
   11bd0:	ldr	r0, [sp, #52]	; 0x34
   11bd4:	bl	12b64 <__mempcpy_chk@plt+0x19a4>
   11bd8:	mov	r2, r6
   11bdc:	mov	sl, r5
   11be0:	mov	r6, r8
   11be4:	ldr	ip, [sp, #44]	; 0x2c
   11be8:	ldr	lr, [sp, #36]	; 0x24
   11bec:	ldr	r1, [sp, #40]	; 0x28
   11bf0:	b	11a04 <__mempcpy_chk@plt+0x844>
   11bf4:	nop	{0}
   11bf8:	andeq	r0, r0, r0
   11bfc:	rsbmi	r0, r9, r0
   11c00:	cmn	r0, #3
   11c04:	bne	11c50 <__mempcpy_chk@plt+0xa90>
   11c08:	movw	r0, #28928	; 0x7100
   11c0c:	movt	r0, #2
   11c10:	ldr	r3, [r0]
   11c14:	movw	r0, #29020	; 0x715c
   11c18:	movt	r0, #2
   11c1c:	ldr	r0, [r0]
   11c20:	mov	r1, #0
   11c24:	movw	r2, #24518	; 0x5fc6
   11c28:	movt	r2, #1
   11c2c:	str	r2, [sp]
   11c30:	str	r1, [sp, #4]
   11c34:	movw	r1, #24469	; 0x5f95
   11c38:	movt	r1, #1
   11c3c:	movw	r2, #24504	; 0x5fb8
   11c40:	movt	r2, #1
   11c44:	bl	14b58 <__mempcpy_chk@plt+0x3998>
   11c48:	mov	r0, #0
   11c4c:	bl	110ac <exit@plt>
   11c50:	cmn	r0, #2
   11c54:	bne	11ca8 <__mempcpy_chk@plt+0xae8>
   11c58:	mov	r0, #0
   11c5c:	bl	112c0 <__mempcpy_chk@plt+0x100>
   11c60:	movw	r1, #24533	; 0x5fd5
   11c64:	movt	r1, #1
   11c68:	b	11cb8 <__mempcpy_chk@plt+0xaf8>
   11c6c:	movw	r1, #24549	; 0x5fe5
   11c70:	movt	r1, #1
   11c74:	mov	r0, #0
   11c78:	mov	r2, #5
   11c7c:	bl	10fc8 <dcgettext@plt>
   11c80:	mov	r4, r0
   11c84:	ldr	r0, [r8]
   11c88:	add	r0, r5, r0, lsl #2
   11c8c:	ldr	r0, [r0, #12]
   11c90:	bl	14380 <__mempcpy_chk@plt+0x31c0>
   11c94:	mov	r3, r0
   11c98:	mov	r0, #0
   11c9c:	mov	r1, #0
   11ca0:	mov	r2, r4
   11ca4:	bl	1104c <error@plt>
   11ca8:	mov	r0, #1
   11cac:	bl	112c0 <__mempcpy_chk@plt+0x100>
   11cb0:	movw	r1, #24566	; 0x5ff6
   11cb4:	movt	r1, #1
   11cb8:	mov	r0, #0
   11cbc:	mov	r2, #5
   11cc0:	bl	10fc8 <dcgettext@plt>
   11cc4:	mov	r2, r0
   11cc8:	mov	r0, #0
   11ccc:	mov	r1, #0
   11cd0:	bl	1104c <error@plt>
   11cd4:	mov	r0, #1
   11cd8:	bl	112c0 <__mempcpy_chk@plt+0x100>
   11cdc:	movw	r1, #24637	; 0x603d
   11ce0:	movt	r1, #1
   11ce4:	mov	r0, #0
   11ce8:	mov	r2, #5
   11cec:	bl	10fc8 <dcgettext@plt>
   11cf0:	mov	r4, r0
   11cf4:	movw	r0, #29008	; 0x7150
   11cf8:	movt	r0, #2
   11cfc:	ldr	r0, [r0]
   11d00:	add	r0, r5, r0, lsl #2
   11d04:	ldr	r0, [r0, #-4]
   11d08:	b	11c90 <__mempcpy_chk@plt+0xad0>
   11d0c:	nop	{0}
   11d10:	andeq	r0, r0, r0
   11d14:	rsbmi	r0, r9, r0
   11d18:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   11d1c:	add	fp, sp, #28
   11d20:	sub	sp, sp, #12
   11d24:	mov	r8, r1
   11d28:	mov	r4, r0
   11d2c:	mov	r5, #0
   11d30:	mov	r0, #0
   11d34:	b	11d54 <__mempcpy_chk@plt+0xb94>
   11d38:	cmp	r1, #0
   11d3c:	beq	11e84 <__mempcpy_chk@plt+0xcc4>
   11d40:	cmp	r1, #37	; 0x25
   11d44:	mov	r1, #1
   11d48:	movweq	r1, #2
   11d4c:	add	r0, r1, r0
   11d50:	add	r5, r5, #1
   11d54:	ldrb	r1, [r4, r0]
   11d58:	cmp	r1, #37	; 0x25
   11d5c:	bne	11d38 <__mempcpy_chk@plt+0xb78>
   11d60:	add	r6, r0, #1
   11d64:	ldrb	r2, [r4, r6]
   11d68:	cmp	r2, #37	; 0x25
   11d6c:	beq	11d40 <__mempcpy_chk@plt+0xb80>
   11d70:	add	r0, r4, r6
   11d74:	movw	r1, #25138	; 0x6232
   11d78:	movt	r1, #1
   11d7c:	bl	111b4 <strspn@plt>
   11d80:	add	r6, r0, r6
   11d84:	add	r0, r4, r6
   11d88:	movw	r1, #25145	; 0x6239
   11d8c:	movt	r1, #1
   11d90:	bl	111b4 <strspn@plt>
   11d94:	add	r6, r6, r0
   11d98:	ldrb	r0, [r4, r6]
   11d9c:	cmp	r0, #46	; 0x2e
   11da0:	bne	11dbc <__mempcpy_chk@plt+0xbfc>
   11da4:	add	r6, r6, #1
   11da8:	add	r0, r4, r6
   11dac:	movw	r1, #25145	; 0x6239
   11db0:	movt	r1, #1
   11db4:	bl	111b4 <strspn@plt>
   11db8:	add	r6, r0, r6
   11dbc:	mov	r9, r4
   11dc0:	ldrb	r0, [r9, r6]!
   11dc4:	sub	r0, r0, #76	; 0x4c
   11dc8:	clz	r0, r0
   11dcc:	lsr	sl, r0, #5
   11dd0:	add	r7, r6, sl
   11dd4:	ldrb	r1, [r4, r7]
   11dd8:	cmp	r1, #0
   11ddc:	beq	11ec4 <__mempcpy_chk@plt+0xd04>
   11de0:	str	r8, [sp, #8]
   11de4:	movw	r0, #25177	; 0x6259
   11de8:	movt	r0, #1
   11dec:	mov	r2, #9
   11df0:	bl	11130 <memchr@plt>
   11df4:	cmp	r0, #0
   11df8:	beq	11ed0 <__mempcpy_chk@plt+0xd10>
   11dfc:	add	r0, r7, #1
   11e00:	mov	r8, #0
   11e04:	b	11e2c <__mempcpy_chk@plt+0xc6c>
   11e08:	add	r2, r0, r4
   11e0c:	ldrb	r2, [r2, #1]
   11e10:	cmp	r2, #37	; 0x25
   11e14:	bne	11e90 <__mempcpy_chk@plt+0xcd0>
   11e18:	cmp	r1, #37	; 0x25
   11e1c:	mov	r1, #1
   11e20:	movweq	r1, #2
   11e24:	add	r0, r1, r0
   11e28:	add	r8, r8, #1
   11e2c:	ldrb	r1, [r4, r0]
   11e30:	cmp	r1, #37	; 0x25
   11e34:	beq	11e08 <__mempcpy_chk@plt+0xc48>
   11e38:	cmp	r1, #0
   11e3c:	bne	11e18 <__mempcpy_chk@plt+0xc58>
   11e40:	add	r0, r0, #2
   11e44:	bl	14c60 <__mempcpy_chk@plt+0x3aa0>
   11e48:	mov	r7, r0
   11e4c:	mov	r1, r4
   11e50:	mov	r2, r6
   11e54:	bl	10f8c <memcpy@plt>
   11e58:	mov	r0, #76	; 0x4c
   11e5c:	mov	r1, r7
   11e60:	strb	r0, [r1, r6]!
   11e64:	add	r0, r1, #1
   11e68:	add	r1, r9, sl
   11e6c:	bl	1101c <strcpy@plt>
   11e70:	ldr	r0, [sp, #8]
   11e74:	stm	r0, {r5, r8}
   11e78:	mov	r0, r7
   11e7c:	sub	sp, fp, #28
   11e80:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   11e84:	movw	r1, #25108	; 0x6214
   11e88:	movt	r1, #1
   11e8c:	b	11e98 <__mempcpy_chk@plt+0xcd8>
   11e90:	movw	r1, #25223	; 0x6287
   11e94:	movt	r1, #1
   11e98:	mov	r0, #0
   11e9c:	mov	r2, #5
   11ea0:	bl	10fc8 <dcgettext@plt>
   11ea4:	mov	r5, r0
   11ea8:	mov	r0, r4
   11eac:	bl	14380 <__mempcpy_chk@plt+0x31c0>
   11eb0:	mov	r3, r0
   11eb4:	mov	r0, #1
   11eb8:	mov	r1, #0
   11ebc:	mov	r2, r5
   11ec0:	bl	1104c <error@plt>
   11ec4:	movw	r1, #25156	; 0x6244
   11ec8:	movt	r1, #1
   11ecc:	b	11e98 <__mempcpy_chk@plt+0xcd8>
   11ed0:	movw	r1, #25186	; 0x6262
   11ed4:	movt	r1, #1
   11ed8:	mov	r0, #0
   11edc:	mov	r2, #5
   11ee0:	bl	10fc8 <dcgettext@plt>
   11ee4:	mov	r5, r0
   11ee8:	mov	r0, r4
   11eec:	bl	14380 <__mempcpy_chk@plt+0x31c0>
   11ef0:	mov	r3, r0
   11ef4:	ldrb	r0, [r4, r7]
   11ef8:	str	r0, [sp]
   11efc:	b	11eb4 <__mempcpy_chk@plt+0xcf4>
   11f00:	push	{r4, r5, fp, lr}
   11f04:	add	fp, sp, #8
   11f08:	mov	r4, r0
   11f0c:	ldrb	r0, [r0]
   11f10:	sub	r1, r0, #48	; 0x30
   11f14:	mov	r0, #0
   11f18:	cmp	r1, #9
   11f1c:	pophi	{r4, r5, fp, pc}
   11f20:	mov	r0, r4
   11f24:	bl	110c4 <strlen@plt>
   11f28:	mov	r5, r0
   11f2c:	movw	r1, #25145	; 0x6239
   11f30:	movt	r1, #1
   11f34:	mov	r0, r4
   11f38:	bl	111b4 <strspn@plt>
   11f3c:	sub	r0, r5, r0
   11f40:	clz	r0, r0
   11f44:	lsr	r0, r0, #5
   11f48:	pop	{r4, r5, fp, pc}
   11f4c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   11f50:	add	fp, sp, #28
   11f54:	sub	sp, sp, #52	; 0x34
   11f58:	str	r3, [sp, #32]
   11f5c:	str	r2, [sp, #4]
   11f60:	mov	r5, r1
   11f64:	mov	r4, r0
   11f68:	movw	r1, #24676	; 0x6064
   11f6c:	movt	r1, #1
   11f70:	mov	r0, r5
   11f74:	bl	10f38 <strcmp@plt>
   11f78:	mov	r6, r0
   11f7c:	mov	r0, r4
   11f80:	bl	128d8 <__mempcpy_chk@plt+0x1718>
   11f84:	mov	r7, r0
   11f88:	mov	r0, r5
   11f8c:	bl	128d8 <__mempcpy_chk@plt+0x1718>
   11f90:	mov	r4, r0
   11f94:	str	r7, [sp, #40]	; 0x28
   11f98:	mov	r0, r7
   11f9c:	bl	110c4 <strlen@plt>
   11fa0:	mov	r8, r0
   11fa4:	str	r0, [fp, #-32]	; 0xffffffe0
   11fa8:	mov	r0, #0
   11fac:	str	r0, [sp, #12]
   11fb0:	str	r6, [sp, #36]	; 0x24
   11fb4:	cmp	r6, #0
   11fb8:	mov	sl, #0
   11fbc:	beq	11fcc <__mempcpy_chk@plt+0xe0c>
   11fc0:	mov	r0, r4
   11fc4:	bl	110c4 <strlen@plt>
   11fc8:	mov	sl, r0
   11fcc:	str	r4, [sp, #28]
   11fd0:	add	r4, r8, #1
   11fd4:	cmp	r4, sl
   11fd8:	mov	r9, sl
   11fdc:	movhi	r9, r4
   11fe0:	cmp	r9, #31
   11fe4:	movls	r9, #31
   11fe8:	add	r5, r9, #1
   11fec:	mov	r0, r5
   11ff0:	bl	14c60 <__mempcpy_chk@plt+0x3aa0>
   11ff4:	mov	r7, r0
   11ff8:	add	r0, r0, r9
   11ffc:	sub	r6, r0, r8
   12000:	mov	r0, r6
   12004:	ldr	r1, [sp, #40]	; 0x28
   12008:	mov	r2, r4
   1200c:	bl	10f8c <memcpy@plt>
   12010:	str	r6, [fp, #-36]	; 0xffffffdc
   12014:	ldr	r0, [sp, #36]	; 0x24
   12018:	cmp	r0, #0
   1201c:	beq	1207c <__mempcpy_chk@plt+0xebc>
   12020:	mov	r0, r5
   12024:	bl	14c60 <__mempcpy_chk@plt+0x3aa0>
   12028:	str	r0, [sp, #40]	; 0x28
   1202c:	add	r0, r0, r9
   12030:	sub	r4, r0, sl
   12034:	add	r2, sl, #1
   12038:	mov	r0, r4
   1203c:	ldr	r1, [sp, #28]
   12040:	bl	10f8c <memcpy@plt>
   12044:	mov	r0, r6
   12048:	mov	r1, r8
   1204c:	str	r4, [sp, #12]
   12050:	mov	r2, r4
   12054:	mov	r3, sl
   12058:	bl	12908 <__mempcpy_chk@plt+0x1748>
   1205c:	cmp	r0, #0
   12060:	ble	1207c <__mempcpy_chk@plt+0xebc>
   12064:	mov	r0, r7
   12068:	bl	12b64 <__mempcpy_chk@plt+0x19a4>
   1206c:	ldr	r0, [sp, #40]	; 0x28
   12070:	sub	sp, fp, #28
   12074:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12078:	b	12b64 <__mempcpy_chk@plt+0x19a4>
   1207c:	str	r7, [sp, #28]
   12080:	mov	r7, r9
   12084:	str	sl, [sp, #8]
   12088:	lsl	r0, r5, #1
   1208c:	mov	r4, #8192	; 0x2000
   12090:	cmp	r0, #8192	; 0x2000
   12094:	lslhi	r4, r5, #1
   12098:	mov	r0, r4
   1209c:	bl	14c60 <__mempcpy_chk@plt+0x3aa0>
   120a0:	str	r4, [sp, #16]
   120a4:	add	r1, r0, r4
   120a8:	str	r1, [sp, #40]	; 0x28
   120ac:	str	r0, [sp, #24]
   120b0:	mov	r1, r6
   120b4:	mov	r2, r8
   120b8:	mvn	r3, #0
   120bc:	bl	111c0 <__mempcpy_chk@plt>
   120c0:	mov	r8, r0
   120c4:	ldr	r5, [sp, #4]
   120c8:	ldr	r0, [sp, #32]
   120cc:	orr	r0, r5, r0
   120d0:	str	r0, [sp, #20]
   120d4:	sub	r9, fp, #36	; 0x24
   120d8:	sub	sl, fp, #32
   120dc:	ldr	r0, [sp, #20]
   120e0:	cmp	r0, #0
   120e4:	mov	r4, r5
   120e8:	ldr	r6, [sp, #32]
   120ec:	beq	1210c <__mempcpy_chk@plt+0xf4c>
   120f0:	mov	r0, r9
   120f4:	mov	r1, sl
   120f8:	bl	12934 <__mempcpy_chk@plt+0x1774>
   120fc:	subs	r4, r4, #1
   12100:	sbc	r6, r6, #0
   12104:	orrs	r0, r4, r6
   12108:	bne	120f0 <__mempcpy_chk@plt+0xf30>
   1210c:	ldr	r0, [sp, #36]	; 0x24
   12110:	cmp	r0, #0
   12114:	beq	12134 <__mempcpy_chk@plt+0xf74>
   12118:	ldr	r1, [fp, #-32]	; 0xffffffe0
   1211c:	ldr	r0, [fp, #-36]	; 0xffffffdc
   12120:	ldr	r2, [sp, #12]
   12124:	ldr	r3, [sp, #8]
   12128:	bl	12908 <__mempcpy_chk@plt+0x1748>
   1212c:	cmp	r0, #0
   12130:	bgt	12224 <__mempcpy_chk@plt+0x1064>
   12134:	movw	r0, #29036	; 0x716c
   12138:	movt	r0, #2
   1213c:	ldr	r0, [r0]
   12140:	ldrb	r0, [r0]
   12144:	strb	r0, [r8], #1
   12148:	ldr	r6, [fp, #-32]	; 0xffffffe0
   1214c:	cmp	r6, r7
   12150:	bne	121c8 <__mempcpy_chk@plt+0x1008>
   12154:	mov	r5, r7
   12158:	mov	r0, #1
   1215c:	orr	r4, r0, r7, lsl #1
   12160:	ldr	r0, [sp, #28]
   12164:	mov	r1, r4
   12168:	bl	14ca0 <__mempcpy_chk@plt+0x3ae0>
   1216c:	mov	r1, r0
   12170:	add	r7, r0, r6
   12174:	add	r2, r6, #1
   12178:	mov	r0, r7
   1217c:	str	r1, [sp, #28]
   12180:	bl	10f68 <memmove@plt>
   12184:	str	r7, [fp, #-36]	; 0xffffffdc
   12188:	lsl	r5, r5, #1
   1218c:	mov	r7, r5
   12190:	ldr	r0, [sp, #16]
   12194:	cmp	r0, r4, lsl #1
   12198:	bcs	121c4 <__mempcpy_chk@plt+0x1004>
   1219c:	lsl	r5, r4, #1
   121a0:	ldr	r0, [sp, #24]
   121a4:	sub	r4, r8, r0
   121a8:	mov	r1, r5
   121ac:	bl	14ca0 <__mempcpy_chk@plt+0x3ae0>
   121b0:	add	r8, r0, r4
   121b4:	str	r5, [sp, #16]
   121b8:	str	r0, [sp, #24]
   121bc:	add	r0, r0, r5
   121c0:	str	r0, [sp, #40]	; 0x28
   121c4:	ldr	r5, [sp, #4]
   121c8:	ldr	r1, [fp, #-36]	; 0xffffffdc
   121cc:	mov	r0, r8
   121d0:	mov	r2, r6
   121d4:	mvn	r3, #0
   121d8:	bl	111c0 <__mempcpy_chk@plt>
   121dc:	mov	r8, r0
   121e0:	mvn	r0, r6
   121e4:	ldr	r1, [sp, #40]	; 0x28
   121e8:	add	r0, r1, r0
   121ec:	cmp	r0, r8
   121f0:	bcs	120dc <__mempcpy_chk@plt+0xf1c>
   121f4:	ldr	r4, [sp, #24]
   121f8:	sub	r1, r8, r4
   121fc:	mov	r8, r4
   12200:	movw	r0, #29020	; 0x715c
   12204:	movt	r0, #2
   12208:	ldr	r3, [r0]
   1220c:	mov	r0, r4
   12210:	mov	r2, #1
   12214:	bl	10fb0 <fwrite_unlocked@plt>
   12218:	cmp	r0, #1
   1221c:	beq	120dc <__mempcpy_chk@plt+0xf1c>
   12220:	b	12258 <__mempcpy_chk@plt+0x1098>
   12224:	mov	r1, #10
   12228:	ldr	r0, [sp, #24]
   1222c:	strb	r1, [r8], -r0
   12230:	add	r1, r8, #1
   12234:	movw	r2, #29020	; 0x715c
   12238:	movt	r2, #2
   1223c:	ldr	r3, [r2]
   12240:	mov	r2, #1
   12244:	bl	10fb0 <fwrite_unlocked@plt>
   12248:	cmp	r0, #1
   1224c:	bne	12258 <__mempcpy_chk@plt+0x1098>
   12250:	mov	r0, #0
   12254:	bl	110ac <exit@plt>
   12258:	bl	12994 <__mempcpy_chk@plt+0x17d4>
   1225c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12260:	add	fp, sp, #28
   12264:	sub	sp, sp, #4
   12268:	vpush	{d8}
   1226c:	sub	sp, sp, #16
   12270:	mov	r5, r1
   12274:	mov	r4, r0
   12278:	movw	r3, #10716	; 0x29dc
   1227c:	movt	r3, #1
   12280:	mov	r0, r1
   12284:	mov	r1, #0
   12288:	mov	r2, r4
   1228c:	bl	1502c <__mempcpy_chk@plt+0x3e6c>
   12290:	cmp	r0, #0
   12294:	beq	124f8 <__mempcpy_chk@plt+0x1338>
   12298:	vldr	d8, [r4]
   1229c:	vcmpe.f64	d8, d8
   122a0:	vmrs	APSR_nzcv, fpscr
   122a4:	bvs	1252c <__mempcpy_chk@plt+0x136c>
   122a8:	sub	r5, r5, #1
   122ac:	bl	110a0 <__ctype_b_loc@plt>
   122b0:	ldr	r6, [r0]
   122b4:	ldrb	r0, [r5, #1]!
   122b8:	bl	129d8 <__mempcpy_chk@plt+0x1818>
   122bc:	add	r1, r6, r0, lsl #1
   122c0:	ldrh	r1, [r1]
   122c4:	and	r1, r1, #8192	; 0x2000
   122c8:	cmp	r0, #43	; 0x2b
   122cc:	beq	122b4 <__mempcpy_chk@plt+0x10f4>
   122d0:	cmp	r1, #0
   122d4:	bne	122b4 <__mempcpy_chk@plt+0x10f4>
   122d8:	mvn	r1, #-2147483648	; 0x80000000
   122dc:	mov	r0, #0
   122e0:	strd	r0, [r4, #8]
   122e4:	mov	r0, r5
   122e8:	mov	r1, #46	; 0x2e
   122ec:	bl	110d0 <strchr@plt>
   122f0:	mov	r9, r0
   122f4:	cmp	r0, #0
   122f8:	bne	12314 <__mempcpy_chk@plt+0x1154>
   122fc:	mov	r0, r5
   12300:	mov	r1, #112	; 0x70
   12304:	bl	110d0 <strchr@plt>
   12308:	cmp	r0, #0
   1230c:	moveq	r0, #0
   12310:	streq	r0, [r4, #12]
   12314:	movw	r1, #25345	; 0x6301
   12318:	movt	r1, #1
   1231c:	mov	r0, r5
   12320:	bl	10f50 <strcspn@plt>
   12324:	vmov.i32	d16, #0	; 0x00000000
   12328:	vmul.f64	d16, d8, d16
   1232c:	vcmp.f64	d16, #0.0
   12330:	vmrs	APSR_nzcv, fpscr
   12334:	ldrbeq	r0, [r5, r0]
   12338:	cmpeq	r0, #0
   1233c:	bne	124e8 <__mempcpy_chk@plt+0x1328>
   12340:	mov	r0, r5
   12344:	bl	110c4 <strlen@plt>
   12348:	str	r0, [r4, #8]
   1234c:	cmp	r9, #0
   12350:	beq	1239c <__mempcpy_chk@plt+0x11dc>
   12354:	mov	r6, r0
   12358:	add	r0, r9, #1
   1235c:	movw	r1, #25348	; 0x6304
   12360:	movt	r1, #1
   12364:	bl	10f50 <strcspn@plt>
   12368:	mov	r8, r0
   1236c:	cmp	r0, #0
   12370:	bmi	1237c <__mempcpy_chk@plt+0x11bc>
   12374:	str	r8, [r4, #12]
   12378:	beq	123ac <__mempcpy_chk@plt+0x11ec>
   1237c:	cmp	r9, r5
   12380:	beq	123a4 <__mempcpy_chk@plt+0x11e4>
   12384:	ldrb	r0, [r9, #-1]
   12388:	sub	r1, r0, #48	; 0x30
   1238c:	mov	r0, #0
   12390:	cmp	r1, #9
   12394:	movwhi	r0, #1
   12398:	b	123b0 <__mempcpy_chk@plt+0x11f0>
   1239c:	mov	r8, #0
   123a0:	b	123b8 <__mempcpy_chk@plt+0x11f8>
   123a4:	mov	r0, #1
   123a8:	b	123b0 <__mempcpy_chk@plt+0x11f0>
   123ac:	mvn	r0, #0
   123b0:	add	r0, r0, r6
   123b4:	str	r0, [r4, #8]
   123b8:	mov	r0, r5
   123bc:	mov	r1, #101	; 0x65
   123c0:	bl	110d0 <strchr@plt>
   123c4:	mov	r7, r0
   123c8:	cmp	r0, #0
   123cc:	bne	123e8 <__mempcpy_chk@plt+0x1228>
   123d0:	mov	r0, r5
   123d4:	mov	r1, #69	; 0x45
   123d8:	bl	110d0 <strchr@plt>
   123dc:	mov	r7, r0
   123e0:	cmp	r0, #0
   123e4:	beq	124e8 <__mempcpy_chk@plt+0x1328>
   123e8:	add	r6, r7, #1
   123ec:	mov	r0, r6
   123f0:	mov	r1, #0
   123f4:	mov	r2, #10
   123f8:	bl	10f44 <strtol@plt>
   123fc:	mov	sl, #-2147483647	; 0x80000001
   12400:	cmp	r0, #-2147483646	; 0x80000002
   12404:	str	r8, [sp, #8]
   12408:	blt	12444 <__mempcpy_chk@plt+0x1284>
   1240c:	mov	r0, r6
   12410:	mov	r1, #0
   12414:	mov	r2, #10
   12418:	bl	10f44 <strtol@plt>
   1241c:	mov	sl, r0
   12420:	cmp	r0, #0
   12424:	bmi	12454 <__mempcpy_chk@plt+0x1294>
   12428:	ldr	r1, [r4, #12]
   1242c:	cmp	r1, sl
   12430:	mov	r0, sl
   12434:	movlt	r0, r1
   12438:	mov	r1, #0
   1243c:	str	r1, [sp, #12]
   12440:	b	12460 <__mempcpy_chk@plt+0x12a0>
   12444:	mov	r0, #1
   12448:	str	r0, [sp, #12]
   1244c:	mov	r0, #-2147483647	; 0x80000001
   12450:	b	12460 <__mempcpy_chk@plt+0x12a0>
   12454:	mov	r0, #1
   12458:	str	r0, [sp, #12]
   1245c:	mov	r0, sl
   12460:	ldr	r1, [r4, #12]
   12464:	sub	r6, r1, r0
   12468:	str	r6, [r4, #12]
   1246c:	sub	r8, r7, r5
   12470:	mov	r0, r5
   12474:	bl	110c4 <strlen@plt>
   12478:	sub	r0, r8, r0
   1247c:	ldr	r1, [r4, #8]
   12480:	add	r0, r0, r1
   12484:	str	r0, [r4, #8]
   12488:	ldr	r1, [sp, #12]
   1248c:	cmp	r1, #0
   12490:	beq	124b4 <__mempcpy_chk@plt+0x12f4>
   12494:	add	r1, r9, #1
   12498:	cmp	r7, r1
   1249c:	cmpne	r9, #0
   124a0:	bne	124ac <__mempcpy_chk@plt+0x12ec>
   124a4:	add	r0, r0, #1
   124a8:	str	r0, [r4, #8]
   124ac:	rsb	r0, sl, #0
   124b0:	b	124dc <__mempcpy_chk@plt+0x131c>
   124b4:	cmp	r9, #0
   124b8:	ldr	r1, [sp, #8]
   124bc:	cmpne	r1, #0
   124c0:	beq	124d0 <__mempcpy_chk@plt+0x1310>
   124c4:	cmp	r6, #0
   124c8:	subeq	r0, r0, #1
   124cc:	streq	r0, [r4, #8]
   124d0:	cmp	r1, sl
   124d4:	movcs	r1, sl
   124d8:	sub	r0, sl, r1
   124dc:	ldr	r1, [r4, #8]
   124e0:	add	r0, r1, r0
   124e4:	str	r0, [r4, #8]
   124e8:	sub	sp, fp, #40	; 0x28
   124ec:	vpop	{d8}
   124f0:	add	sp, sp, #4
   124f4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   124f8:	movw	r1, #25272	; 0x62b8
   124fc:	movt	r1, #1
   12500:	mov	r0, #0
   12504:	mov	r2, #5
   12508:	bl	10fc8 <dcgettext@plt>
   1250c:	mov	r4, r0
   12510:	mov	r0, r5
   12514:	bl	14380 <__mempcpy_chk@plt+0x31c0>
   12518:	mov	r3, r0
   1251c:	mov	r0, #0
   12520:	mov	r1, #0
   12524:	mov	r2, r4
   12528:	b	12578 <__mempcpy_chk@plt+0x13b8>
   1252c:	movw	r1, #25308	; 0x62dc
   12530:	movt	r1, #1
   12534:	mov	r0, #0
   12538:	mov	r2, #5
   1253c:	bl	10fc8 <dcgettext@plt>
   12540:	mov	r4, r0
   12544:	movw	r1, #25332	; 0x62f4
   12548:	movt	r1, #1
   1254c:	mov	r0, #0
   12550:	bl	14378 <__mempcpy_chk@plt+0x31b8>
   12554:	mov	r6, r0
   12558:	mov	r0, #1
   1255c:	mov	r1, r5
   12560:	bl	14378 <__mempcpy_chk@plt+0x31b8>
   12564:	str	r0, [sp]
   12568:	mov	r0, #0
   1256c:	mov	r1, #0
   12570:	mov	r2, r4
   12574:	mov	r3, r6
   12578:	bl	1104c <error@plt>
   1257c:	mov	r0, #1
   12580:	bl	112c0 <__mempcpy_chk@plt+0x100>
   12584:	push	{r4, r5, fp, lr}
   12588:	add	fp, sp, #8
   1258c:	sub	sp, sp, #8
   12590:	ldr	r0, [fp, #20]
   12594:	cmp	r3, r0
   12598:	movgt	r0, r3
   1259c:	movw	r5, #25370	; 0x631a
   125a0:	movt	r5, #1
   125a4:	ldr	r1, [fp, #36]	; 0x24
   125a8:	cmn	r1, #-2147483647	; 0x80000001
   125ac:	cmnne	r0, #-2147483647	; 0x80000001
   125b0:	beq	12670 <__mempcpy_chk@plt+0x14b0>
   125b4:	movw	r4, #29033	; 0x7169
   125b8:	movt	r4, #2
   125bc:	ldrb	r4, [r4]
   125c0:	cmp	r4, #1
   125c4:	bne	1264c <__mempcpy_chk@plt+0x148c>
   125c8:	ldr	ip, [fp, #32]
   125cc:	sub	r2, r2, r3
   125d0:	add	r2, r2, r0
   125d4:	cmp	r0, #0
   125d8:	mov	r4, r0
   125dc:	movwne	r4, #1
   125e0:	clz	r3, r3
   125e4:	lsr	r3, r3, #5
   125e8:	and	r3, r3, r4
   125ec:	add	r2, r2, r3
   125f0:	sub	r3, ip, r1
   125f4:	add	ip, r3, r0
   125f8:	cmp	r1, #0
   125fc:	clz	lr, r1
   12600:	movwne	r1, #1
   12604:	clz	r3, r0
   12608:	lsr	r3, r3, #5
   1260c:	and	r1, r1, r3
   12610:	sub	r1, ip, r1
   12614:	lsr	r3, lr, #5
   12618:	and	r3, r3, r4
   1261c:	add	r1, r1, r3
   12620:	cmp	r2, r1
   12624:	movhi	r1, r2
   12628:	cmp	r1, #0
   1262c:	bmi	12670 <__mempcpy_chk@plt+0x14b0>
   12630:	str	r1, [sp]
   12634:	str	r0, [sp, #4]
   12638:	movw	r5, #29040	; 0x7170
   1263c:	movt	r5, #2
   12640:	movw	r3, #25351	; 0x6307
   12644:	movt	r3, #1
   12648:	b	12660 <__mempcpy_chk@plt+0x14a0>
   1264c:	str	r0, [sp]
   12650:	movw	r5, #29040	; 0x7170
   12654:	movt	r5, #2
   12658:	movw	r3, #25362	; 0x6312
   1265c:	movt	r3, #1
   12660:	mov	r0, r5
   12664:	mov	r1, #1
   12668:	mov	r2, #28
   1266c:	bl	110e8 <__sprintf_chk@plt>
   12670:	mov	r0, r5
   12674:	sub	sp, fp, #8
   12678:	pop	{r4, r5, fp, pc}
   1267c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12680:	add	fp, sp, #28
   12684:	sub	sp, sp, #4
   12688:	vpush	{d8-d14}
   1268c:	sub	sp, sp, #32
   12690:	str	r1, [sp, #12]
   12694:	mov	r9, r0
   12698:	mov	r0, #0
   1269c:	vcmpe.f64	d0, d2
   126a0:	vmrs	APSR_nzcv, fpscr
   126a4:	mov	r1, #0
   126a8:	movwmi	r1, #1
   126ac:	vcmpe.f64	d2, d0
   126b0:	vmrs	APSR_nzcv, fpscr
   126b4:	movwmi	r0, #1
   126b8:	vcmpe.f64	d1, #0.0
   126bc:	vmrs	APSR_nzcv, fpscr
   126c0:	movmi	r0, r1
   126c4:	cmp	r0, #0
   126c8:	bne	128c4 <__mempcpy_chk@plt+0x1704>
   126cc:	vmov.f64	d8, d2
   126d0:	vmov.f64	d9, d1
   126d4:	vmov.f64	d10, d0
   126d8:	mov	sl, r2
   126dc:	vmov	r2, r3, d0
   126e0:	mov	r0, #1
   126e4:	mov	r1, r9
   126e8:	bl	1110c <__printf_chk@plt>
   126ec:	cmp	r0, #0
   126f0:	bmi	128a0 <__mempcpy_chk@plt+0x16e0>
   126f4:	vmov.f64	d11, #112	; 0x3f800000  1.0
   126f8:	mov	r4, #0
   126fc:	movw	r7, #29032	; 0x7168
   12700:	movt	r7, #2
   12704:	movw	r5, #29020	; 0x715c
   12708:	movt	r5, #2
   1270c:	movw	r6, #29036	; 0x716c
   12710:	movt	r6, #2
   12714:	mov	r8, #0
   12718:	vmov.f64	d14, d10
   1271c:	vmov.f64	d12, d11
   12720:	tst	r8, #1
   12724:	bne	128ac <__mempcpy_chk@plt+0x16ec>
   12728:	vmov.f64	d13, d10
   1272c:	vmla.f64	d13, d12, d9
   12730:	vcmpe.f64	d13, d8
   12734:	vmrs	APSR_nzcv, fpscr
   12738:	mov	r0, #0
   1273c:	movwmi	r0, #1
   12740:	mov	r8, #0
   12744:	movwgt	r8, #1
   12748:	vcmpe.f64	d9, #0.0
   1274c:	vmrs	APSR_nzcv, fpscr
   12750:	movmi	r8, r0
   12754:	cmp	r8, #1
   12758:	bne	1286c <__mempcpy_chk@plt+0x16ac>
   1275c:	mov	r6, sl
   12760:	ldrb	r0, [r7]
   12764:	cmp	r0, #0
   12768:	beq	1277c <__mempcpy_chk@plt+0x15bc>
   1276c:	mov	r0, #1
   12770:	movw	r1, #25374	; 0x631e
   12774:	movt	r1, #1
   12778:	bl	11154 <setlocale@plt>
   1277c:	vstr	d13, [sp]
   12780:	add	r0, sp, #20
   12784:	mov	r1, #1
   12788:	mov	r2, r9
   1278c:	bl	11058 <__asprintf_chk@plt>
   12790:	mov	sl, r0
   12794:	ldrb	r0, [r7]
   12798:	cmp	r0, #0
   1279c:	beq	127b0 <__mempcpy_chk@plt+0x15f0>
   127a0:	mov	r0, #1
   127a4:	movw	r1, #25065	; 0x61e9
   127a8:	movt	r1, #1
   127ac:	bl	11154 <setlocale@plt>
   127b0:	cmn	sl, #1
   127b4:	ble	128d4 <__mempcpy_chk@plt+0x1714>
   127b8:	sub	r0, sl, r6
   127bc:	mov	sl, r6
   127c0:	ldr	r1, [sp, #20]
   127c4:	strb	r4, [r1, r0]
   127c8:	ldr	r0, [sp, #20]
   127cc:	ldr	r1, [sp, #12]
   127d0:	add	r0, r0, r1
   127d4:	mov	r1, #0
   127d8:	add	r2, sp, #24
   127dc:	movw	r3, #10716	; 0x29dc
   127e0:	movt	r3, #1
   127e4:	bl	1502c <__mempcpy_chk@plt+0x3e6c>
   127e8:	cmp	r0, #0
   127ec:	beq	128a4 <__mempcpy_chk@plt+0x16e4>
   127f0:	vldr	d16, [sp, #24]
   127f4:	vcmp.f64	d16, d8
   127f8:	vmrs	APSR_nzcv, fpscr
   127fc:	bne	128a4 <__mempcpy_chk@plt+0x16e4>
   12800:	mov	r6, r7
   12804:	str	r4, [sp, #16]
   12808:	vstr	d14, [sp]
   1280c:	add	r0, sp, #16
   12810:	mov	r1, #1
   12814:	mov	r2, r9
   12818:	bl	11058 <__asprintf_chk@plt>
   1281c:	cmn	r0, #1
   12820:	ble	128d4 <__mempcpy_chk@plt+0x1714>
   12824:	sub	r0, r0, sl
   12828:	ldr	r1, [sp, #16]
   1282c:	strb	r4, [r1, r0]
   12830:	ldr	r1, [sp, #20]
   12834:	ldr	r7, [sp, #16]
   12838:	mov	r0, r7
   1283c:	bl	10f38 <strcmp@plt>
   12840:	mov	r4, r0
   12844:	mov	r0, r7
   12848:	bl	12b64 <__mempcpy_chk@plt+0x19a4>
   1284c:	ldr	r0, [sp, #20]
   12850:	bl	12b64 <__mempcpy_chk@plt+0x19a4>
   12854:	cmp	r4, #0
   12858:	beq	128ac <__mempcpy_chk@plt+0x16ec>
   1285c:	mov	r4, #0
   12860:	mov	r7, r6
   12864:	movw	r6, #29036	; 0x716c
   12868:	movt	r6, #2
   1286c:	ldr	r1, [r5]
   12870:	ldr	r0, [r6]
   12874:	bl	10f20 <fputs_unlocked@plt>
   12878:	cmn	r0, #1
   1287c:	beq	128a0 <__mempcpy_chk@plt+0x16e0>
   12880:	vmov	r2, r3, d13
   12884:	mov	r0, #1
   12888:	mov	r1, r9
   1288c:	bl	1110c <__printf_chk@plt>
   12890:	vadd.f64	d12, d12, d11
   12894:	cmp	r0, #0
   12898:	vmov.f64	d14, d13
   1289c:	bpl	12720 <__mempcpy_chk@plt+0x1560>
   128a0:	bl	12994 <__mempcpy_chk@plt+0x17d4>
   128a4:	ldr	r0, [sp, #20]
   128a8:	bl	12b64 <__mempcpy_chk@plt+0x19a4>
   128ac:	ldr	r1, [r5]
   128b0:	movw	r0, #25544	; 0x63c8
   128b4:	movt	r0, #1
   128b8:	bl	10f20 <fputs_unlocked@plt>
   128bc:	cmn	r0, #1
   128c0:	beq	128a0 <__mempcpy_chk@plt+0x16e0>
   128c4:	sub	sp, fp, #88	; 0x58
   128c8:	vpop	{d8-d14}
   128cc:	add	sp, sp, #4
   128d0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   128d4:	bl	14fe8 <__mempcpy_chk@plt+0x3e28>
   128d8:	mov	r1, #0
   128dc:	ldrb	r2, [r0]
   128e0:	cmp	r2, #48	; 0x30
   128e4:	bne	128f4 <__mempcpy_chk@plt+0x1734>
   128e8:	sub	r1, r1, #1
   128ec:	add	r0, r0, #1
   128f0:	b	128dc <__mempcpy_chk@plt+0x171c>
   128f4:	cmp	r2, #0
   128f8:	bxne	lr
   128fc:	cmp	r1, #0
   12900:	subne	r0, r0, #1
   12904:	bx	lr
   12908:	mov	ip, r1
   1290c:	mvn	r1, #0
   12910:	cmp	ip, r3
   12914:	movcs	r1, #1
   12918:	cmpcs	r3, ip
   1291c:	bcs	12928 <__mempcpy_chk@plt+0x1768>
   12920:	mov	r0, r1
   12924:	bx	lr
   12928:	mov	r1, r2
   1292c:	mov	r2, ip
   12930:	b	10fbc <memcmp@plt>
   12934:	push	{r4, sl, fp, lr}
   12938:	add	fp, sp, #8
   1293c:	ldr	r3, [r1]
   12940:	ldr	lr, [r0]
   12944:	add	r3, lr, r3
   12948:	sub	r3, r3, #1
   1294c:	mov	ip, #48	; 0x30
   12950:	ldrb	r2, [r3]
   12954:	add	r4, r2, #1
   12958:	strb	r4, [r3]
   1295c:	cmp	r2, #57	; 0x39
   12960:	bcc	12990 <__mempcpy_chk@plt+0x17d0>
   12964:	strb	ip, [r3], #-1
   12968:	cmp	r3, lr
   1296c:	bcs	12950 <__mempcpy_chk@plt+0x1790>
   12970:	ldr	r2, [r0]
   12974:	sub	r3, r2, #1
   12978:	str	r3, [r0]
   1297c:	mov	r0, #49	; 0x31
   12980:	strb	r0, [r2, #-1]
   12984:	ldr	r0, [r1]
   12988:	add	r0, r0, #1
   1298c:	str	r0, [r1]
   12990:	pop	{r4, sl, fp, pc}
   12994:	push	{fp, lr}
   12998:	mov	fp, sp
   1299c:	movw	r0, #29020	; 0x715c
   129a0:	movt	r0, #2
   129a4:	ldr	r0, [r0]
   129a8:	bl	11184 <clearerr_unlocked@plt>
   129ac:	bl	110dc <__errno_location@plt>
   129b0:	ldr	r4, [r0]
   129b4:	movw	r1, #25260	; 0x62ac
   129b8:	movt	r1, #1
   129bc:	mov	r0, #0
   129c0:	mov	r2, #5
   129c4:	bl	10fc8 <dcgettext@plt>
   129c8:	mov	r2, r0
   129cc:	mov	r0, #1
   129d0:	mov	r1, r4
   129d4:	bl	1104c <error@plt>
   129d8:	bx	lr
   129dc:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   129e0:	add	fp, sp, #24
   129e4:	vpush	{d8}
   129e8:	sub	sp, sp, #8
   129ec:	mov	r4, r1
   129f0:	mov	r5, r0
   129f4:	add	r1, sp, #4
   129f8:	bl	10fa4 <strtold@plt>
   129fc:	vmov.f64	d8, d0
   12a00:	ldr	r7, [sp, #4]
   12a04:	ldrb	r0, [r7]
   12a08:	cmp	r0, #0
   12a0c:	beq	12a40 <__mempcpy_chk@plt+0x1880>
   12a10:	bl	110dc <__errno_location@plt>
   12a14:	mov	r6, r0
   12a18:	ldr	r8, [r0]
   12a1c:	mov	r1, sp
   12a20:	mov	r0, r5
   12a24:	bl	154c4 <__mempcpy_chk@plt+0x4304>
   12a28:	ldr	r0, [sp]
   12a2c:	cmp	r7, r0
   12a30:	bcs	12a3c <__mempcpy_chk@plt+0x187c>
   12a34:	str	r0, [sp, #4]
   12a38:	b	12a44 <__mempcpy_chk@plt+0x1884>
   12a3c:	str	r8, [r6]
   12a40:	vmov.f64	d0, d8
   12a44:	cmp	r4, #0
   12a48:	ldrne	r0, [sp, #4]
   12a4c:	strne	r0, [r4]
   12a50:	sub	sp, fp, #32
   12a54:	vpop	{d8}
   12a58:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   12a5c:	movw	r1, #29068	; 0x718c
   12a60:	movt	r1, #2
   12a64:	str	r0, [r1]
   12a68:	bx	lr
   12a6c:	movw	r1, #29072	; 0x7190
   12a70:	movt	r1, #2
   12a74:	strb	r0, [r1]
   12a78:	bx	lr
   12a7c:	push	{r4, r5, r6, sl, fp, lr}
   12a80:	add	fp, sp, #16
   12a84:	sub	sp, sp, #8
   12a88:	movw	r0, #29020	; 0x715c
   12a8c:	movt	r0, #2
   12a90:	ldr	r0, [r0]
   12a94:	bl	15588 <__mempcpy_chk@plt+0x43c8>
   12a98:	cmp	r0, #0
   12a9c:	beq	12ac4 <__mempcpy_chk@plt+0x1904>
   12aa0:	movw	r0, #29072	; 0x7190
   12aa4:	movt	r0, #2
   12aa8:	ldrb	r0, [r0]
   12aac:	cmp	r0, #0
   12ab0:	beq	12ae4 <__mempcpy_chk@plt+0x1924>
   12ab4:	bl	110dc <__errno_location@plt>
   12ab8:	ldr	r0, [r0]
   12abc:	cmp	r0, #32
   12ac0:	bne	12ae4 <__mempcpy_chk@plt+0x1924>
   12ac4:	movw	r0, #29016	; 0x7158
   12ac8:	movt	r0, #2
   12acc:	ldr	r0, [r0]
   12ad0:	bl	15588 <__mempcpy_chk@plt+0x43c8>
   12ad4:	cmp	r0, #0
   12ad8:	subeq	sp, fp, #16
   12adc:	popeq	{r4, r5, r6, sl, fp, pc}
   12ae0:	b	12b54 <__mempcpy_chk@plt+0x1994>
   12ae4:	movw	r1, #25260	; 0x62ac
   12ae8:	movt	r1, #1
   12aec:	mov	r0, #0
   12af0:	mov	r2, #5
   12af4:	bl	10fc8 <dcgettext@plt>
   12af8:	mov	r4, r0
   12afc:	movw	r0, #29068	; 0x718c
   12b00:	movt	r0, #2
   12b04:	ldr	r6, [r0]
   12b08:	bl	110dc <__errno_location@plt>
   12b0c:	ldr	r5, [r0]
   12b10:	cmp	r6, #0
   12b14:	bne	12b30 <__mempcpy_chk@plt+0x1970>
   12b18:	movw	r2, #24667	; 0x605b
   12b1c:	movt	r2, #1
   12b20:	mov	r0, #0
   12b24:	mov	r1, r5
   12b28:	mov	r3, r4
   12b2c:	b	12b50 <__mempcpy_chk@plt+0x1990>
   12b30:	mov	r0, r6
   12b34:	bl	14230 <__mempcpy_chk@plt+0x3070>
   12b38:	mov	r3, r0
   12b3c:	str	r4, [sp]
   12b40:	movw	r2, #25561	; 0x63d9
   12b44:	movt	r2, #1
   12b48:	mov	r0, #0
   12b4c:	mov	r1, r5
   12b50:	bl	1104c <error@plt>
   12b54:	movw	r0, #28932	; 0x7104
   12b58:	movt	r0, #2
   12b5c:	ldr	r0, [r0]
   12b60:	bl	10f80 <_exit@plt>
   12b64:	push	{r4, r5, r6, sl, fp, lr}
   12b68:	add	fp, sp, #16
   12b6c:	mov	r4, r0
   12b70:	bl	110dc <__errno_location@plt>
   12b74:	mov	r5, r0
   12b78:	ldr	r6, [r0]
   12b7c:	mov	r0, r4
   12b80:	bl	10f74 <free@plt>
   12b84:	str	r6, [r5]
   12b88:	pop	{r4, r5, r6, sl, fp, pc}
   12b8c:	push	{r4, r5, fp, lr}
   12b90:	add	fp, sp, #8
   12b94:	cmp	r0, #0
   12b98:	beq	12c2c <__mempcpy_chk@plt+0x1a6c>
   12b9c:	mov	r4, r0
   12ba0:	mov	r1, #47	; 0x2f
   12ba4:	bl	11160 <strrchr@plt>
   12ba8:	cmp	r0, #0
   12bac:	mov	r5, r4
   12bb0:	addne	r5, r0, #1
   12bb4:	sub	r0, r5, r4
   12bb8:	cmp	r0, #7
   12bbc:	blt	12c10 <__mempcpy_chk@plt+0x1a50>
   12bc0:	sub	r0, r5, #7
   12bc4:	movw	r1, #25624	; 0x6418
   12bc8:	movt	r1, #1
   12bcc:	mov	r2, #7
   12bd0:	bl	1119c <strncmp@plt>
   12bd4:	cmp	r0, #0
   12bd8:	bne	12c10 <__mempcpy_chk@plt+0x1a50>
   12bdc:	movw	r1, #25632	; 0x6420
   12be0:	movt	r1, #1
   12be4:	mov	r0, r5
   12be8:	mov	r2, #3
   12bec:	bl	1119c <strncmp@plt>
   12bf0:	cmp	r0, #0
   12bf4:	beq	12c00 <__mempcpy_chk@plt+0x1a40>
   12bf8:	mov	r4, r5
   12bfc:	b	12c10 <__mempcpy_chk@plt+0x1a50>
   12c00:	add	r4, r5, #3
   12c04:	movw	r0, #29000	; 0x7148
   12c08:	movt	r0, #2
   12c0c:	str	r4, [r0]
   12c10:	movw	r0, #29004	; 0x714c
   12c14:	movt	r0, #2
   12c18:	str	r4, [r0]
   12c1c:	movw	r0, #29076	; 0x7194
   12c20:	movt	r0, #2
   12c24:	str	r4, [r0]
   12c28:	pop	{r4, r5, fp, pc}
   12c2c:	movw	r0, #29016	; 0x7158
   12c30:	movt	r0, #2
   12c34:	ldr	r3, [r0]
   12c38:	movw	r0, #25568	; 0x63e0
   12c3c:	movt	r0, #1
   12c40:	mov	r1, #55	; 0x37
   12c44:	mov	r2, #1
   12c48:	bl	10ff8 <fwrite@plt>
   12c4c:	bl	111a8 <abort@plt>
   12c50:	push	{r4, r5, r6, sl, fp, lr}
   12c54:	add	fp, sp, #16
   12c58:	mov	r4, r0
   12c5c:	movw	r0, #29080	; 0x7198
   12c60:	movt	r0, #2
   12c64:	cmp	r4, #0
   12c68:	moveq	r4, r0
   12c6c:	bl	110dc <__errno_location@plt>
   12c70:	mov	r5, r0
   12c74:	ldr	r6, [r0]
   12c78:	mov	r0, r4
   12c7c:	mov	r1, #48	; 0x30
   12c80:	bl	14f48 <__mempcpy_chk@plt+0x3d88>
   12c84:	str	r6, [r5]
   12c88:	pop	{r4, r5, r6, sl, fp, pc}
   12c8c:	movw	r1, #29080	; 0x7198
   12c90:	movt	r1, #2
   12c94:	cmp	r0, #0
   12c98:	movne	r1, r0
   12c9c:	ldr	r0, [r1]
   12ca0:	bx	lr
   12ca4:	movw	r2, #29080	; 0x7198
   12ca8:	movt	r2, #2
   12cac:	cmp	r0, #0
   12cb0:	movne	r2, r0
   12cb4:	str	r1, [r2]
   12cb8:	bx	lr
   12cbc:	movw	r3, #29080	; 0x7198
   12cc0:	movt	r3, #2
   12cc4:	cmp	r0, #0
   12cc8:	movne	r3, r0
   12ccc:	ubfx	r0, r1, #5, #3
   12cd0:	add	ip, r3, r0, lsl #2
   12cd4:	ldr	r3, [ip, #8]
   12cd8:	and	r1, r1, #31
   12cdc:	mov	r0, #1
   12ce0:	and	r0, r0, r3, lsr r1
   12ce4:	and	r2, r2, #1
   12ce8:	eor	r2, r0, r2
   12cec:	eor	r1, r3, r2, lsl r1
   12cf0:	str	r1, [ip, #8]
   12cf4:	bx	lr
   12cf8:	movw	r2, #29080	; 0x7198
   12cfc:	movt	r2, #2
   12d00:	cmp	r0, #0
   12d04:	movne	r2, r0
   12d08:	ldr	r0, [r2, #4]
   12d0c:	str	r1, [r2, #4]
   12d10:	bx	lr
   12d14:	push	{fp, lr}
   12d18:	mov	fp, sp
   12d1c:	movw	r3, #29080	; 0x7198
   12d20:	movt	r3, #2
   12d24:	cmp	r0, #0
   12d28:	movne	r3, r0
   12d2c:	mov	r0, #10
   12d30:	str	r0, [r3]
   12d34:	cmp	r1, #0
   12d38:	cmpne	r2, #0
   12d3c:	bne	12d44 <__mempcpy_chk@plt+0x1b84>
   12d40:	bl	111a8 <abort@plt>
   12d44:	str	r1, [r3, #40]	; 0x28
   12d48:	str	r2, [r3, #44]	; 0x2c
   12d4c:	pop	{fp, pc}
   12d50:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12d54:	add	fp, sp, #28
   12d58:	sub	sp, sp, #20
   12d5c:	mov	r8, r3
   12d60:	mov	r9, r2
   12d64:	mov	sl, r1
   12d68:	mov	r7, r0
   12d6c:	ldr	r0, [fp, #8]
   12d70:	movw	r5, #29080	; 0x7198
   12d74:	movt	r5, #2
   12d78:	cmp	r0, #0
   12d7c:	movne	r5, r0
   12d80:	bl	110dc <__errno_location@plt>
   12d84:	mov	r4, r0
   12d88:	ldm	r5, {r0, r1}
   12d8c:	ldr	r2, [r5, #40]	; 0x28
   12d90:	ldr	r3, [r5, #44]	; 0x2c
   12d94:	ldr	r6, [r4]
   12d98:	add	r5, r5, #8
   12d9c:	stm	sp, {r0, r1, r5}
   12da0:	str	r2, [sp, #12]
   12da4:	str	r3, [sp, #16]
   12da8:	mov	r0, r7
   12dac:	mov	r1, sl
   12db0:	mov	r2, r9
   12db4:	mov	r3, r8
   12db8:	bl	12dc8 <__mempcpy_chk@plt+0x1c08>
   12dbc:	str	r6, [r4]
   12dc0:	sub	sp, fp, #28
   12dc4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12dc8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12dcc:	add	fp, sp, #28
   12dd0:	sub	sp, sp, #156	; 0x9c
   12dd4:	mov	r9, r3
   12dd8:	mov	r7, r1
   12ddc:	mov	r6, r0
   12de0:	str	r2, [fp, #-80]	; 0xffffffb0
   12de4:	add	r0, r2, #1
   12de8:	str	r0, [sp, #76]	; 0x4c
   12dec:	ldr	r0, [fp, #12]
   12df0:	and	r1, r0, #1
   12df4:	str	r1, [sp, #40]	; 0x28
   12df8:	and	r1, r0, #4
   12dfc:	str	r1, [sp, #36]	; 0x24
   12e00:	ubfx	r4, r0, #1, #1
   12e04:	bl	11010 <__ctype_get_mb_cur_max@plt>
   12e08:	str	r0, [sp, #44]	; 0x2c
   12e0c:	ldr	r0, [fp, #24]
   12e10:	str	r0, [sp, #88]	; 0x58
   12e14:	ldr	r0, [fp, #20]
   12e18:	str	r0, [sp, #80]	; 0x50
   12e1c:	ldr	r1, [fp, #8]
   12e20:	mov	r0, #0
   12e24:	str	r0, [sp, #84]	; 0x54
   12e28:	mov	r0, #0
   12e2c:	str	r0, [fp, #-84]	; 0xffffffac
   12e30:	mov	r0, #0
   12e34:	str	r0, [fp, #-72]	; 0xffffffb8
   12e38:	mov	r0, #0
   12e3c:	mov	r2, #0
   12e40:	str	r2, [fp, #-56]	; 0xffffffc8
   12e44:	mov	r2, #0
   12e48:	str	r2, [sp, #64]	; 0x40
   12e4c:	mov	r2, #1
   12e50:	str	r2, [fp, #-48]	; 0xffffffd0
   12e54:	cmp	r1, #10
   12e58:	bhi	13d84 <__mempcpy_chk@plt+0x2bc4>
   12e5c:	mov	sl, r7
   12e60:	mov	r7, r1
   12e64:	add	r1, pc, #24
   12e68:	mov	r8, #0
   12e6c:	mov	r2, #1
   12e70:	mov	r3, #0
   12e74:	ldr	ip, [fp, #-80]	; 0xffffffb0
   12e78:	mov	lr, r9
   12e7c:	mov	r5, r6
   12e80:	ldr	pc, [r1, r7, lsl #2]
   12e84:	andeq	r2, r1, r8, asr pc
   12e88:	muleq	r1, r8, pc	; <UNPREDICTABLE>
   12e8c:	andeq	r2, r1, r8, ror #30
   12e90:	andeq	r2, r1, r0, asr pc
   12e94:	andeq	r2, r1, ip, lsl #31
   12e98:	andeq	r2, r1, ip, ror #31
   12e9c:	andeq	r2, r1, r8, ror pc
   12ea0:	andeq	r3, r1, r8, asr #32
   12ea4:			; <UNDEFINED> instruction: 0x00012eb0
   12ea8:			; <UNDEFINED> instruction: 0x00012eb0
   12eac:	ldrdeq	r2, [r1], -ip
   12eb0:	movw	r0, #25716	; 0x6474
   12eb4:	movt	r0, #1
   12eb8:	mov	r1, r7
   12ebc:	bl	1438c <__mempcpy_chk@plt+0x31cc>
   12ec0:	str	r0, [sp, #80]	; 0x50
   12ec4:	movw	r0, #25143	; 0x6237
   12ec8:	movt	r0, #1
   12ecc:	mov	r1, r7
   12ed0:	bl	1438c <__mempcpy_chk@plt+0x31cc>
   12ed4:	mov	r5, r6
   12ed8:	str	r0, [sp, #88]	; 0x58
   12edc:	mov	r8, #0
   12ee0:	tst	r4, #1
   12ee4:	str	r7, [fp, #-64]	; 0xffffffc0
   12ee8:	bne	12f20 <__mempcpy_chk@plt+0x1d60>
   12eec:	ldr	r0, [sp, #80]	; 0x50
   12ef0:	ldrb	r0, [r0]
   12ef4:	cmp	r0, #0
   12ef8:	beq	12f20 <__mempcpy_chk@plt+0x1d60>
   12efc:	ldr	r1, [sp, #80]	; 0x50
   12f00:	add	r1, r1, #1
   12f04:	mov	r8, #0
   12f08:	cmp	r8, sl
   12f0c:	strbcc	r0, [r5, r8]
   12f10:	ldrb	r0, [r1, r8]
   12f14:	add	r8, r8, #1
   12f18:	cmp	r0, #0
   12f1c:	bne	12f08 <__mempcpy_chk@plt+0x1d48>
   12f20:	ldr	r7, [sp, #88]	; 0x58
   12f24:	mov	r0, r7
   12f28:	bl	110c4 <strlen@plt>
   12f2c:	mov	r5, r6
   12f30:	str	r0, [fp, #-72]	; 0xffffffb8
   12f34:	str	r7, [fp, #-84]	; 0xffffffac
   12f38:	mov	r2, #1
   12f3c:	mov	r3, r4
   12f40:	ldr	ip, [fp, #-80]	; 0xffffffb0
   12f44:	mov	lr, r9
   12f48:	ldr	r7, [fp, #-64]	; 0xffffffc0
   12f4c:	b	13048 <__mempcpy_chk@plt+0x1e88>
   12f50:	mov	r0, #1
   12f54:	b	12f98 <__mempcpy_chk@plt+0x1dd8>
   12f58:	mov	r7, #0
   12f5c:	mov	r8, #0
   12f60:	mov	r2, r0
   12f64:	b	13044 <__mempcpy_chk@plt+0x1e84>
   12f68:	tst	r4, #1
   12f6c:	bne	12f98 <__mempcpy_chk@plt+0x1dd8>
   12f70:	mov	r2, r0
   12f74:	b	12fc0 <__mempcpy_chk@plt+0x1e00>
   12f78:	mov	r0, #1
   12f7c:	str	r0, [fp, #-72]	; 0xffffffb8
   12f80:	mov	r8, #0
   12f84:	mov	r7, #5
   12f88:	b	13004 <__mempcpy_chk@plt+0x1e44>
   12f8c:	mov	r2, #1
   12f90:	tst	r4, #1
   12f94:	beq	12fc0 <__mempcpy_chk@plt+0x1e00>
   12f98:	mov	r1, #1
   12f9c:	str	r1, [fp, #-72]	; 0xffffffb8
   12fa0:	mov	r8, #0
   12fa4:	mov	r7, #2
   12fa8:	movw	r1, #25143	; 0x6237
   12fac:	movt	r1, #1
   12fb0:	str	r1, [fp, #-84]	; 0xffffffac
   12fb4:	mov	r2, r0
   12fb8:	mov	r3, #1
   12fbc:	b	13048 <__mempcpy_chk@plt+0x1e88>
   12fc0:	mov	r8, #1
   12fc4:	mov	r7, #2
   12fc8:	cmp	sl, #0
   12fcc:	movne	r0, #39	; 0x27
   12fd0:	strbne	r0, [r5]
   12fd4:	movw	r0, #25143	; 0x6237
   12fd8:	movt	r0, #1
   12fdc:	str	r0, [fp, #-84]	; 0xffffffac
   12fe0:	mov	r0, #1
   12fe4:	str	r0, [fp, #-72]	; 0xffffffb8
   12fe8:	b	13044 <__mempcpy_chk@plt+0x1e84>
   12fec:	mov	r7, #5
   12ff0:	tst	r4, #1
   12ff4:	beq	1301c <__mempcpy_chk@plt+0x1e5c>
   12ff8:	mov	r0, #1
   12ffc:	str	r0, [fp, #-72]	; 0xffffffb8
   13000:	mov	r8, #0
   13004:	movw	r0, #25714	; 0x6472
   13008:	movt	r0, #1
   1300c:	str	r0, [fp, #-84]	; 0xffffffac
   13010:	mov	r2, #1
   13014:	mov	r3, #1
   13018:	b	13048 <__mempcpy_chk@plt+0x1e88>
   1301c:	cmp	sl, #0
   13020:	movne	r0, #34	; 0x22
   13024:	strbne	r0, [r5]
   13028:	mov	r8, #1
   1302c:	movw	r0, #25714	; 0x6472
   13030:	movt	r0, #1
   13034:	str	r0, [fp, #-84]	; 0xffffffac
   13038:	mov	r0, #1
   1303c:	str	r0, [fp, #-72]	; 0xffffffb8
   13040:	mov	r2, #1
   13044:	mov	r3, #0
   13048:	ldr	r0, [fp, #-72]	; 0xffffffb8
   1304c:	cmp	r0, #0
   13050:	movwne	r0, #1
   13054:	and	r1, r0, r3
   13058:	and	r1, r2, r1
   1305c:	str	r1, [sp, #56]	; 0x38
   13060:	sub	r1, r7, #2
   13064:	clz	r1, r1
   13068:	lsr	r1, r1, #5
   1306c:	and	r1, r1, r3
   13070:	str	r1, [sp, #68]	; 0x44
   13074:	str	r7, [fp, #-64]	; 0xffffffc0
   13078:	subs	r1, r7, #2
   1307c:	movwne	r1, #1
   13080:	eor	r4, r3, #1
   13084:	str	r4, [fp, #-88]	; 0xffffffa8
   13088:	orr	r4, r1, r4
   1308c:	str	r4, [sp, #72]	; 0x48
   13090:	and	r1, r1, r2
   13094:	and	r0, r0, r1
   13098:	str	r0, [fp, #-60]	; 0xffffffc4
   1309c:	str	r3, [fp, #-76]	; 0xffffffb4
   130a0:	orr	r0, r1, r3
   130a4:	eor	r0, r0, #1
   130a8:	ldr	r1, [fp, #16]
   130ac:	clz	r1, r1
   130b0:	lsr	r1, r1, #5
   130b4:	orr	r0, r1, r0
   130b8:	str	r0, [fp, #-68]	; 0xffffffbc
   130bc:	str	r2, [sp, #92]	; 0x5c
   130c0:	eor	r0, r2, #1
   130c4:	str	r0, [sp, #60]	; 0x3c
   130c8:	mov	r7, #0
   130cc:	cmn	lr, #1
   130d0:	beq	130e0 <__mempcpy_chk@plt+0x1f20>
   130d4:	cmp	r7, lr
   130d8:	bne	130ec <__mempcpy_chk@plt+0x1f2c>
   130dc:	b	13bf8 <__mempcpy_chk@plt+0x2a38>
   130e0:	ldrb	r0, [ip, r7]
   130e4:	cmp	r0, #0
   130e8:	beq	13bf8 <__mempcpy_chk@plt+0x2a38>
   130ec:	mov	r9, #0
   130f0:	ldr	r0, [fp, #-60]	; 0xffffffc4
   130f4:	cmp	r0, #0
   130f8:	beq	1312c <__mempcpy_chk@plt+0x1f6c>
   130fc:	ldr	r0, [fp, #-72]	; 0xffffffb8
   13100:	add	r4, r7, r0
   13104:	cmp	r0, #2
   13108:	bcc	13124 <__mempcpy_chk@plt+0x1f64>
   1310c:	cmn	lr, #1
   13110:	bne	13124 <__mempcpy_chk@plt+0x1f64>
   13114:	mov	r0, ip
   13118:	bl	110c4 <strlen@plt>
   1311c:	ldr	ip, [fp, #-80]	; 0xffffffb0
   13120:	mov	lr, r0
   13124:	cmp	r4, lr
   13128:	bls	13138 <__mempcpy_chk@plt+0x1f78>
   1312c:	mov	r0, #0
   13130:	str	r0, [fp, #-52]	; 0xffffffcc
   13134:	b	1317c <__mempcpy_chk@plt+0x1fbc>
   13138:	mov	r4, lr
   1313c:	add	r0, ip, r7
   13140:	ldr	r1, [fp, #-84]	; 0xffffffac
   13144:	ldr	r2, [fp, #-72]	; 0xffffffb8
   13148:	bl	110b8 <bcmp@plt>
   1314c:	cmp	r0, #0
   13150:	mov	r1, r0
   13154:	movwne	r1, #1
   13158:	ldr	r2, [fp, #-88]	; 0xffffffa8
   1315c:	orr	r1, r1, r2
   13160:	tst	r1, #1
   13164:	beq	13ccc <__mempcpy_chk@plt+0x2b0c>
   13168:	clz	r0, r0
   1316c:	lsr	r0, r0, #5
   13170:	str	r0, [fp, #-52]	; 0xffffffcc
   13174:	ldr	ip, [fp, #-80]	; 0xffffffb0
   13178:	mov	lr, r4
   1317c:	ldrb	r4, [ip, r7]
   13180:	cmp	r4, #126	; 0x7e
   13184:	bhi	136b4 <__mempcpy_chk@plt+0x24f4>
   13188:	mov	r6, #1
   1318c:	mov	r2, #110	; 0x6e
   13190:	mov	r0, #97	; 0x61
   13194:	add	r3, pc, #4
   13198:	mov	r1, #0
   1319c:	ldr	pc, [r3, r4, lsl #2]
   131a0:	andeq	r3, r1, r4, lsl r5
   131a4:			; <UNDEFINED> instruction: 0x000136b4
   131a8:			; <UNDEFINED> instruction: 0x000136b4
   131ac:			; <UNDEFINED> instruction: 0x000136b4
   131b0:			; <UNDEFINED> instruction: 0x000136b4
   131b4:			; <UNDEFINED> instruction: 0x000136b4
   131b8:			; <UNDEFINED> instruction: 0x000136b4
   131bc:	andeq	r3, r1, r8, lsl #15
   131c0:	strdeq	r3, [r1], -r4
   131c4:	andeq	r3, r1, ip, ror #9
   131c8:	andeq	r3, r1, r0, lsl #10
   131cc:	andeq	r3, r1, ip, lsl r6
   131d0:	andeq	r3, r1, r4, ror #9
   131d4:	strdeq	r3, [r1], -ip
   131d8:			; <UNDEFINED> instruction: 0x000136b4
   131dc:			; <UNDEFINED> instruction: 0x000136b4
   131e0:			; <UNDEFINED> instruction: 0x000136b4
   131e4:			; <UNDEFINED> instruction: 0x000136b4
   131e8:			; <UNDEFINED> instruction: 0x000136b4
   131ec:			; <UNDEFINED> instruction: 0x000136b4
   131f0:			; <UNDEFINED> instruction: 0x000136b4
   131f4:			; <UNDEFINED> instruction: 0x000136b4
   131f8:			; <UNDEFINED> instruction: 0x000136b4
   131fc:			; <UNDEFINED> instruction: 0x000136b4
   13200:			; <UNDEFINED> instruction: 0x000136b4
   13204:			; <UNDEFINED> instruction: 0x000136b4
   13208:			; <UNDEFINED> instruction: 0x000136b4
   1320c:			; <UNDEFINED> instruction: 0x000136b4
   13210:			; <UNDEFINED> instruction: 0x000136b4
   13214:			; <UNDEFINED> instruction: 0x000136b4
   13218:			; <UNDEFINED> instruction: 0x000136b4
   1321c:			; <UNDEFINED> instruction: 0x000136b4
   13220:	muleq	r1, r8, r4
   13224:	muleq	r1, ip, r4
   13228:	muleq	r1, ip, r4
   1322c:	andeq	r3, r1, r4, lsl #9
   13230:	muleq	r1, ip, r4
   13234:	muleq	r1, ip, r3
   13238:	muleq	r1, ip, r4
   1323c:	andeq	r3, r1, r4, lsr #12
   13240:	muleq	r1, ip, r4
   13244:	muleq	r1, ip, r4
   13248:	muleq	r1, ip, r4
   1324c:	muleq	r1, ip, r3
   13250:	muleq	r1, ip, r3
   13254:	muleq	r1, ip, r3
   13258:	muleq	r1, ip, r3
   1325c:	muleq	r1, ip, r3
   13260:	muleq	r1, ip, r3
   13264:	muleq	r1, ip, r3
   13268:	muleq	r1, ip, r3
   1326c:	muleq	r1, ip, r3
   13270:	muleq	r1, ip, r3
   13274:	muleq	r1, ip, r3
   13278:	muleq	r1, ip, r3
   1327c:	muleq	r1, ip, r3
   13280:	muleq	r1, ip, r3
   13284:	muleq	r1, ip, r3
   13288:	muleq	r1, ip, r3
   1328c:	muleq	r1, ip, r4
   13290:	muleq	r1, ip, r4
   13294:	muleq	r1, ip, r4
   13298:	muleq	r1, ip, r4
   1329c:	andeq	r3, r1, ip, ror #11
   132a0:			; <UNDEFINED> instruction: 0x000136b4
   132a4:	muleq	r1, ip, r3
   132a8:	muleq	r1, ip, r3
   132ac:	muleq	r1, ip, r3
   132b0:	muleq	r1, ip, r3
   132b4:	muleq	r1, ip, r3
   132b8:	muleq	r1, ip, r3
   132bc:	muleq	r1, ip, r3
   132c0:	muleq	r1, ip, r3
   132c4:	muleq	r1, ip, r3
   132c8:	muleq	r1, ip, r3
   132cc:	muleq	r1, ip, r3
   132d0:	muleq	r1, ip, r3
   132d4:	muleq	r1, ip, r3
   132d8:	muleq	r1, ip, r3
   132dc:	muleq	r1, ip, r3
   132e0:	muleq	r1, ip, r3
   132e4:	muleq	r1, ip, r3
   132e8:	muleq	r1, ip, r3
   132ec:	muleq	r1, ip, r3
   132f0:	muleq	r1, ip, r3
   132f4:	muleq	r1, ip, r3
   132f8:	muleq	r1, ip, r3
   132fc:	muleq	r1, ip, r3
   13300:	muleq	r1, ip, r3
   13304:	muleq	r1, ip, r3
   13308:	muleq	r1, ip, r3
   1330c:	muleq	r1, ip, r4
   13310:	andeq	r3, r1, r4, asr #9
   13314:	muleq	r1, ip, r3
   13318:	muleq	r1, ip, r4
   1331c:	muleq	r1, ip, r3
   13320:	muleq	r1, ip, r4
   13324:	muleq	r1, ip, r3
   13328:	muleq	r1, ip, r3
   1332c:	muleq	r1, ip, r3
   13330:	muleq	r1, ip, r3
   13334:	muleq	r1, ip, r3
   13338:	muleq	r1, ip, r3
   1333c:	muleq	r1, ip, r3
   13340:	muleq	r1, ip, r3
   13344:	muleq	r1, ip, r3
   13348:	muleq	r1, ip, r3
   1334c:	muleq	r1, ip, r3
   13350:	muleq	r1, ip, r3
   13354:	muleq	r1, ip, r3
   13358:	muleq	r1, ip, r3
   1335c:	muleq	r1, ip, r3
   13360:	muleq	r1, ip, r3
   13364:	muleq	r1, ip, r3
   13368:	muleq	r1, ip, r3
   1336c:	muleq	r1, ip, r3
   13370:	muleq	r1, ip, r3
   13374:	muleq	r1, ip, r3
   13378:	muleq	r1, ip, r3
   1337c:	muleq	r1, ip, r3
   13380:	muleq	r1, ip, r3
   13384:	muleq	r1, ip, r3
   13388:	muleq	r1, ip, r3
   1338c:	andeq	r3, r1, r8, asr r4
   13390:	muleq	r1, ip, r4
   13394:	andeq	r3, r1, r8, asr r4
   13398:	andeq	r3, r1, r4, lsl #9
   1339c:	ldr	r0, [fp, #-68]	; 0xffffffbc
   133a0:	tst	r0, #1
   133a4:	bne	133d0 <__mempcpy_chk@plt+0x2210>
   133a8:	ubfx	r0, r4, #5, #3
   133ac:	ldr	r1, [fp, #16]
   133b0:	ldr	r0, [r1, r0, lsl #2]
   133b4:	and	r1, r4, #31
   133b8:	mov	r2, #1
   133bc:	tst	r0, r2, lsl r1
   133c0:	beq	133d0 <__mempcpy_chk@plt+0x2210>
   133c4:	mov	r0, r4
   133c8:	mov	r1, r6
   133cc:	b	133e4 <__mempcpy_chk@plt+0x2224>
   133d0:	ldr	r0, [fp, #-52]	; 0xffffffcc
   133d4:	cmp	r0, #0
   133d8:	mov	r0, r4
   133dc:	mov	r1, r6
   133e0:	beq	1371c <__mempcpy_chk@plt+0x255c>
   133e4:	ldr	r2, [fp, #-76]	; 0xffffffb4
   133e8:	tst	r2, #1
   133ec:	bne	13ce0 <__mempcpy_chk@plt+0x2b20>
   133f0:	ldr	r2, [fp, #-64]	; 0xffffffc0
   133f4:	subs	r2, r2, #2
   133f8:	movwne	r2, #1
   133fc:	ldr	r3, [fp, #-56]	; 0xffffffc8
   13400:	orr	r2, r2, r3
   13404:	tst	r2, #1
   13408:	bne	13444 <__mempcpy_chk@plt+0x2284>
   1340c:	cmp	r8, sl
   13410:	movcc	r2, #39	; 0x27
   13414:	strbcc	r2, [r5, r8]
   13418:	add	r2, r8, #1
   1341c:	cmp	r2, sl
   13420:	movcc	r3, #36	; 0x24
   13424:	strbcc	r3, [r5, r2]
   13428:	add	r2, r8, #2
   1342c:	cmp	r2, sl
   13430:	movcc	r3, #39	; 0x27
   13434:	strbcc	r3, [r5, r2]
   13438:	add	r8, r8, #3
   1343c:	mov	r2, #1
   13440:	str	r2, [fp, #-56]	; 0xffffffc8
   13444:	cmp	r8, sl
   13448:	movcc	r2, #92	; 0x5c
   1344c:	strbcc	r2, [r5, r8]
   13450:	add	r8, r8, #1
   13454:	b	13760 <__mempcpy_chk@plt+0x25a0>
   13458:	cmp	lr, #1
   1345c:	beq	13484 <__mempcpy_chk@plt+0x22c4>
   13460:	mov	r6, #0
   13464:	cmn	lr, #1
   13468:	bne	13490 <__mempcpy_chk@plt+0x22d0>
   1346c:	ldrb	r0, [ip, #1]
   13470:	cmp	r0, #0
   13474:	beq	13484 <__mempcpy_chk@plt+0x22c4>
   13478:	mvn	lr, #0
   1347c:	mov	r9, #0
   13480:	b	1339c <__mempcpy_chk@plt+0x21dc>
   13484:	mov	r6, #0
   13488:	cmp	r7, #0
   1348c:	beq	13498 <__mempcpy_chk@plt+0x22d8>
   13490:	mov	r9, #0
   13494:	b	1339c <__mempcpy_chk@plt+0x21dc>
   13498:	mov	r1, #1
   1349c:	ldr	r0, [fp, #-64]	; 0xffffffc0
   134a0:	cmp	r0, #2
   134a4:	bne	134bc <__mempcpy_chk@plt+0x22fc>
   134a8:	ldr	r0, [fp, #-76]	; 0xffffffb4
   134ac:	tst	r0, #1
   134b0:	mov	r6, r1
   134b4:	beq	1339c <__mempcpy_chk@plt+0x21dc>
   134b8:	b	13ce0 <__mempcpy_chk@plt+0x2b20>
   134bc:	mov	r6, r1
   134c0:	b	1339c <__mempcpy_chk@plt+0x21dc>
   134c4:	ldr	r0, [fp, #-64]	; 0xffffffc0
   134c8:	cmp	r0, #2
   134cc:	bne	13700 <__mempcpy_chk@plt+0x2540>
   134d0:	ldr	r0, [fp, #-76]	; 0xffffffb4
   134d4:	tst	r0, #1
   134d8:	bne	13ce0 <__mempcpy_chk@plt+0x2b20>
   134dc:	mov	r9, #0
   134e0:	b	13714 <__mempcpy_chk@plt+0x2554>
   134e4:	mov	r0, #102	; 0x66
   134e8:	b	13788 <__mempcpy_chk@plt+0x25c8>
   134ec:	mov	r2, #116	; 0x74
   134f0:	b	13500 <__mempcpy_chk@plt+0x2340>
   134f4:	mov	r0, #98	; 0x62
   134f8:	b	13788 <__mempcpy_chk@plt+0x25c8>
   134fc:	mov	r2, #114	; 0x72
   13500:	ldr	r0, [sp, #72]	; 0x48
   13504:	tst	r0, #1
   13508:	mov	r0, r2
   1350c:	bne	13788 <__mempcpy_chk@plt+0x25c8>
   13510:	b	13ce0 <__mempcpy_chk@plt+0x2b20>
   13514:	ldr	r0, [sp, #92]	; 0x5c
   13518:	tst	r0, #1
   1351c:	beq	137a4 <__mempcpy_chk@plt+0x25e4>
   13520:	ldr	r0, [fp, #-76]	; 0xffffffb4
   13524:	tst	r0, #1
   13528:	bne	13ce0 <__mempcpy_chk@plt+0x2b20>
   1352c:	ldr	r0, [fp, #-64]	; 0xffffffc0
   13530:	subs	r0, r0, #2
   13534:	movwne	r0, #1
   13538:	ldr	r1, [fp, #-56]	; 0xffffffc8
   1353c:	orr	r0, r0, r1
   13540:	tst	r0, #1
   13544:	bne	13580 <__mempcpy_chk@plt+0x23c0>
   13548:	cmp	r8, sl
   1354c:	movcc	r0, #39	; 0x27
   13550:	strbcc	r0, [r5, r8]
   13554:	add	r0, r8, #1
   13558:	cmp	r0, sl
   1355c:	movcc	r1, #36	; 0x24
   13560:	strbcc	r1, [r5, r0]
   13564:	add	r0, r8, #2
   13568:	cmp	r0, sl
   1356c:	movcc	r1, #39	; 0x27
   13570:	strbcc	r1, [r5, r0]
   13574:	add	r8, r8, #3
   13578:	mov	r0, #1
   1357c:	str	r0, [fp, #-56]	; 0xffffffc8
   13580:	cmp	r8, sl
   13584:	movcc	r0, #92	; 0x5c
   13588:	strbcc	r0, [r5, r8]
   1358c:	add	r0, r8, #1
   13590:	mov	r6, #0
   13594:	mov	r9, #1
   13598:	mov	r4, #48	; 0x30
   1359c:	ldr	r1, [fp, #-64]	; 0xffffffc0
   135a0:	cmp	r1, #2
   135a4:	beq	13968 <__mempcpy_chk@plt+0x27a8>
   135a8:	add	r1, r7, #1
   135ac:	cmp	r1, lr
   135b0:	bcs	13968 <__mempcpy_chk@plt+0x27a8>
   135b4:	ldrb	r1, [ip, r1]
   135b8:	sub	r1, r1, #48	; 0x30
   135bc:	uxtb	r1, r1
   135c0:	cmp	r1, #9
   135c4:	bhi	13968 <__mempcpy_chk@plt+0x27a8>
   135c8:	cmp	r0, sl
   135cc:	movcc	r1, #48	; 0x30
   135d0:	strbcc	r1, [r5, r0]
   135d4:	add	r0, r8, #2
   135d8:	cmp	r0, sl
   135dc:	movcc	r1, #48	; 0x30
   135e0:	strbcc	r1, [r5, r0]
   135e4:	add	r8, r8, #3
   135e8:	b	1339c <__mempcpy_chk@plt+0x21dc>
   135ec:	mov	r9, #0
   135f0:	mov	r4, #63	; 0x3f
   135f4:	ldr	r0, [fp, #-64]	; 0xffffffc0
   135f8:	cmp	r0, #5
   135fc:	beq	13970 <__mempcpy_chk@plt+0x27b0>
   13600:	cmp	r0, #2
   13604:	bne	13a18 <__mempcpy_chk@plt+0x2858>
   13608:	ldr	r0, [fp, #-76]	; 0xffffffb4
   1360c:	tst	r0, #1
   13610:	mov	r6, #0
   13614:	beq	1339c <__mempcpy_chk@plt+0x21dc>
   13618:	b	13ce0 <__mempcpy_chk@plt+0x2b20>
   1361c:	mov	r0, #118	; 0x76
   13620:	b	13788 <__mempcpy_chk@plt+0x25c8>
   13624:	mov	r4, #39	; 0x27
   13628:	mov	r0, #1
   1362c:	str	r0, [sp, #64]	; 0x40
   13630:	ldr	r0, [fp, #-64]	; 0xffffffc0
   13634:	cmp	r0, #2
   13638:	bne	137c0 <__mempcpy_chk@plt+0x2600>
   1363c:	ldr	r0, [fp, #-76]	; 0xffffffb4
   13640:	tst	r0, #1
   13644:	bne	13ce0 <__mempcpy_chk@plt+0x2b20>
   13648:	ldr	r2, [sp, #84]	; 0x54
   1364c:	cmp	r2, #0
   13650:	mov	r0, r2
   13654:	movwne	r0, #1
   13658:	clz	r1, sl
   1365c:	lsr	r1, r1, #5
   13660:	orrs	r0, r0, r1
   13664:	moveq	r2, sl
   13668:	str	r2, [sp, #84]	; 0x54
   1366c:	moveq	sl, r0
   13670:	cmp	r8, sl
   13674:	movcc	r0, #39	; 0x27
   13678:	strbcc	r0, [r5, r8]
   1367c:	add	r0, r8, #1
   13680:	cmp	r0, sl
   13684:	movcc	r1, #92	; 0x5c
   13688:	strbcc	r1, [r5, r0]
   1368c:	add	r0, r8, #2
   13690:	cmp	r0, sl
   13694:	movcc	r1, #39	; 0x27
   13698:	strbcc	r1, [r5, r0]
   1369c:	add	r8, r8, #3
   136a0:	mov	r0, #0
   136a4:	str	r0, [fp, #-56]	; 0xffffffc8
   136a8:	mov	r9, #0
   136ac:	mov	r6, #1
   136b0:	b	1339c <__mempcpy_chk@plt+0x21dc>
   136b4:	ldr	r0, [sp, #44]	; 0x2c
   136b8:	cmp	r0, #1
   136bc:	bne	137c8 <__mempcpy_chk@plt+0x2608>
   136c0:	str	lr, [sp, #32]
   136c4:	bl	110a0 <__ctype_b_loc@plt>
   136c8:	ldr	ip, [fp, #-80]	; 0xffffffb0
   136cc:	ldr	r0, [r0]
   136d0:	add	r0, r0, r4, lsl #1
   136d4:	ldrb	r0, [r0, #1]
   136d8:	ubfx	r6, r0, #6, #1
   136dc:	mov	r2, #1
   136e0:	ldr	r0, [sp, #60]	; 0x3c
   136e4:	orr	r1, r6, r0
   136e8:	cmp	r2, #1
   136ec:	bhi	13a20 <__mempcpy_chk@plt+0x2860>
   136f0:	tst	r1, #1
   136f4:	beq	13a20 <__mempcpy_chk@plt+0x2860>
   136f8:	ldr	lr, [sp, #32]
   136fc:	b	1339c <__mempcpy_chk@plt+0x21dc>
   13700:	mov	r9, #0
   13704:	mov	r0, #92	; 0x5c
   13708:	ldr	r1, [sp, #56]	; 0x38
   1370c:	cmp	r1, #0
   13710:	beq	13788 <__mempcpy_chk@plt+0x25c8>
   13714:	mov	r4, #92	; 0x5c
   13718:	mov	r6, #0
   1371c:	cmp	r9, #0
   13720:	bne	13758 <__mempcpy_chk@plt+0x2598>
   13724:	ldr	r0, [fp, #-56]	; 0xffffffc8
   13728:	tst	r0, #1
   1372c:	beq	13758 <__mempcpy_chk@plt+0x2598>
   13730:	cmp	r8, sl
   13734:	movcc	r0, #39	; 0x27
   13738:	strbcc	r0, [r5, r8]
   1373c:	add	r0, r8, #1
   13740:	cmp	r0, sl
   13744:	movcc	r1, #39	; 0x27
   13748:	strbcc	r1, [r5, r0]
   1374c:	add	r8, r8, #2
   13750:	mov	r0, #0
   13754:	str	r0, [fp, #-56]	; 0xffffffc8
   13758:	mov	r1, r6
   1375c:	mov	r0, r4
   13760:	cmp	r8, sl
   13764:	strbcc	r0, [r5, r8]
   13768:	ldr	r0, [fp, #-48]	; 0xffffffd0
   1376c:	and	r0, r0, r1
   13770:	str	r0, [fp, #-48]	; 0xffffffd0
   13774:	add	r8, r8, #1
   13778:	add	r7, r7, #1
   1377c:	cmn	lr, #1
   13780:	bne	130d4 <__mempcpy_chk@plt+0x1f14>
   13784:	b	130e0 <__mempcpy_chk@plt+0x1f20>
   13788:	mov	r9, #0
   1378c:	ldr	r1, [sp, #92]	; 0x5c
   13790:	tst	r1, #1
   13794:	mov	r6, #0
   13798:	mov	r1, #0
   1379c:	beq	1339c <__mempcpy_chk@plt+0x21dc>
   137a0:	b	133e4 <__mempcpy_chk@plt+0x2224>
   137a4:	mov	r4, #0
   137a8:	ldr	r0, [sp, #40]	; 0x28
   137ac:	cmp	r0, #0
   137b0:	mov	r9, #0
   137b4:	mov	r6, #0
   137b8:	beq	1339c <__mempcpy_chk@plt+0x21dc>
   137bc:	b	13778 <__mempcpy_chk@plt+0x25b8>
   137c0:	mov	r6, #1
   137c4:	b	1339c <__mempcpy_chk@plt+0x21dc>
   137c8:	mov	r0, #0
   137cc:	str	r0, [fp, #-36]	; 0xffffffdc
   137d0:	str	r0, [fp, #-40]	; 0xffffffd8
   137d4:	cmn	lr, #1
   137d8:	bne	137ec <__mempcpy_chk@plt+0x262c>
   137dc:	mov	r0, ip
   137e0:	bl	110c4 <strlen@plt>
   137e4:	ldr	ip, [fp, #-80]	; 0xffffffb0
   137e8:	mov	lr, r0
   137ec:	ldr	r0, [sp, #76]	; 0x4c
   137f0:	add	r0, r0, r7
   137f4:	str	r0, [sp, #24]
   137f8:	mov	r6, #1
   137fc:	mov	r2, #0
   13800:	sub	r0, fp, #40	; 0x28
   13804:	mov	r3, r0
   13808:	str	r5, [sp, #28]
   1380c:	str	lr, [sp, #32]
   13810:	b	13854 <__mempcpy_chk@plt+0x2694>
   13814:	ldr	r5, [sp, #52]	; 0x34
   13818:	add	r5, r0, r5
   1381c:	ldr	r0, [fp, #-44]	; 0xffffffd4
   13820:	bl	10fec <iswprint@plt>
   13824:	cmp	r0, #0
   13828:	movwne	r0, #1
   1382c:	and	r6, r6, r0
   13830:	sub	r0, fp, #40	; 0x28
   13834:	bl	10f98 <mbsinit@plt>
   13838:	sub	r3, fp, #40	; 0x28
   1383c:	mov	r2, r5
   13840:	ldr	lr, [sp, #32]
   13844:	cmp	r0, #0
   13848:	ldr	r5, [sp, #28]
   1384c:	ldr	ip, [fp, #-80]	; 0xffffffb0
   13850:	bne	136e0 <__mempcpy_chk@plt+0x2520>
   13854:	str	r2, [sp, #52]	; 0x34
   13858:	add	r0, r2, r7
   1385c:	add	r1, ip, r0
   13860:	str	r0, [sp, #48]	; 0x30
   13864:	sub	r2, lr, r0
   13868:	sub	r0, fp, #44	; 0x2c
   1386c:	bl	15844 <__mempcpy_chk@plt+0x4684>
   13870:	cmp	r0, #0
   13874:	beq	13bec <__mempcpy_chk@plt+0x2a2c>
   13878:	cmn	r0, #1
   1387c:	beq	13ba8 <__mempcpy_chk@plt+0x29e8>
   13880:	cmn	r0, #2
   13884:	ldr	lr, [sp, #32]
   13888:	beq	13bb0 <__mempcpy_chk@plt+0x29f0>
   1388c:	cmp	r0, #2
   13890:	mov	r1, #0
   13894:	movwcc	r1, #1
   13898:	ldr	r2, [sp, #68]	; 0x44
   1389c:	eor	r2, r2, #1
   138a0:	orrs	r1, r2, r1
   138a4:	bne	13814 <__mempcpy_chk@plt+0x2654>
   138a8:	ldr	r1, [sp, #52]	; 0x34
   138ac:	ldr	r2, [sp, #24]
   138b0:	add	r1, r2, r1
   138b4:	sub	r2, r0, #1
   138b8:	b	138c8 <__mempcpy_chk@plt+0x2708>
   138bc:	add	r1, r1, #1
   138c0:	subs	r2, r2, #1
   138c4:	beq	13814 <__mempcpy_chk@plt+0x2654>
   138c8:	ldrb	r3, [r1]
   138cc:	sub	r3, r3, #91	; 0x5b
   138d0:	cmp	r3, #33	; 0x21
   138d4:	bhi	138bc <__mempcpy_chk@plt+0x26fc>
   138d8:	add	r5, pc, #0
   138dc:	ldr	pc, [r5, r3, lsl #2]
   138e0:	ldrdeq	r3, [r1], -r8
   138e4:	ldrdeq	r3, [r1], -r8
   138e8:			; <UNDEFINED> instruction: 0x000138bc
   138ec:	ldrdeq	r3, [r1], -r8
   138f0:			; <UNDEFINED> instruction: 0x000138bc
   138f4:	ldrdeq	r3, [r1], -r8
   138f8:			; <UNDEFINED> instruction: 0x000138bc
   138fc:			; <UNDEFINED> instruction: 0x000138bc
   13900:			; <UNDEFINED> instruction: 0x000138bc
   13904:			; <UNDEFINED> instruction: 0x000138bc
   13908:			; <UNDEFINED> instruction: 0x000138bc
   1390c:			; <UNDEFINED> instruction: 0x000138bc
   13910:			; <UNDEFINED> instruction: 0x000138bc
   13914:			; <UNDEFINED> instruction: 0x000138bc
   13918:			; <UNDEFINED> instruction: 0x000138bc
   1391c:			; <UNDEFINED> instruction: 0x000138bc
   13920:			; <UNDEFINED> instruction: 0x000138bc
   13924:			; <UNDEFINED> instruction: 0x000138bc
   13928:			; <UNDEFINED> instruction: 0x000138bc
   1392c:			; <UNDEFINED> instruction: 0x000138bc
   13930:			; <UNDEFINED> instruction: 0x000138bc
   13934:			; <UNDEFINED> instruction: 0x000138bc
   13938:			; <UNDEFINED> instruction: 0x000138bc
   1393c:			; <UNDEFINED> instruction: 0x000138bc
   13940:			; <UNDEFINED> instruction: 0x000138bc
   13944:			; <UNDEFINED> instruction: 0x000138bc
   13948:			; <UNDEFINED> instruction: 0x000138bc
   1394c:			; <UNDEFINED> instruction: 0x000138bc
   13950:			; <UNDEFINED> instruction: 0x000138bc
   13954:			; <UNDEFINED> instruction: 0x000138bc
   13958:			; <UNDEFINED> instruction: 0x000138bc
   1395c:			; <UNDEFINED> instruction: 0x000138bc
   13960:			; <UNDEFINED> instruction: 0x000138bc
   13964:	ldrdeq	r3, [r1], -r8
   13968:	mov	r8, r0
   1396c:	b	1339c <__mempcpy_chk@plt+0x21dc>
   13970:	ldr	r0, [sp, #36]	; 0x24
   13974:	cmp	r0, #0
   13978:	beq	13a18 <__mempcpy_chk@plt+0x2858>
   1397c:	add	r0, r7, #2
   13980:	cmp	r0, lr
   13984:	bcs	13a18 <__mempcpy_chk@plt+0x2858>
   13988:	add	r1, r7, ip
   1398c:	ldrb	r1, [r1, #1]
   13990:	cmp	r1, #63	; 0x3f
   13994:	bne	13a18 <__mempcpy_chk@plt+0x2858>
   13998:	ldrb	r1, [ip, r0]
   1399c:	sub	r2, r1, #33	; 0x21
   139a0:	cmp	r2, #29
   139a4:	bhi	13a18 <__mempcpy_chk@plt+0x2858>
   139a8:	mov	r3, #1
   139ac:	movw	r6, #20929	; 0x51c1
   139b0:	movt	r6, #14336	; 0x3800
   139b4:	tst	r6, r3, lsl r2
   139b8:	beq	13a18 <__mempcpy_chk@plt+0x2858>
   139bc:	ldr	r2, [fp, #-76]	; 0xffffffb4
   139c0:	tst	r2, #1
   139c4:	bne	13ce0 <__mempcpy_chk@plt+0x2b20>
   139c8:	cmp	r8, sl
   139cc:	movcc	r2, #63	; 0x3f
   139d0:	strbcc	r2, [r5, r8]
   139d4:	add	r2, r8, #1
   139d8:	cmp	r2, sl
   139dc:	movcc	r3, #34	; 0x22
   139e0:	strbcc	r3, [r5, r2]
   139e4:	add	r2, r8, #2
   139e8:	cmp	r2, sl
   139ec:	movcc	r3, #34	; 0x22
   139f0:	strbcc	r3, [r5, r2]
   139f4:	add	r2, r8, #3
   139f8:	cmp	r2, sl
   139fc:	movcc	r3, #63	; 0x3f
   13a00:	strbcc	r3, [r5, r2]
   13a04:	add	r8, r8, #4
   13a08:	mov	r7, r0
   13a0c:	mov	r4, r1
   13a10:	mov	r6, #0
   13a14:	b	1339c <__mempcpy_chk@plt+0x21dc>
   13a18:	mov	r6, #0
   13a1c:	b	1339c <__mempcpy_chk@plt+0x21dc>
   13a20:	add	r0, r2, r7
   13a24:	str	r0, [sp, #52]	; 0x34
   13a28:	mov	r2, #0
   13a2c:	ldr	lr, [sp, #32]
   13a30:	ldr	r0, [fp, #-56]	; 0xffffffc8
   13a34:	str	r1, [sp, #48]	; 0x30
   13a38:	tst	r1, #1
   13a3c:	bne	13b18 <__mempcpy_chk@plt+0x2958>
   13a40:	ldr	r1, [fp, #-76]	; 0xffffffb4
   13a44:	tst	r1, #1
   13a48:	bne	13ce0 <__mempcpy_chk@plt+0x2b20>
   13a4c:	mov	r3, r0
   13a50:	ldr	r0, [fp, #-64]	; 0xffffffc0
   13a54:	subs	r1, r0, #2
   13a58:	movwne	r1, #1
   13a5c:	orr	r1, r1, r3
   13a60:	tst	r1, #1
   13a64:	bne	13a9c <__mempcpy_chk@plt+0x28dc>
   13a68:	cmp	r8, sl
   13a6c:	movcc	r0, #39	; 0x27
   13a70:	strbcc	r0, [r5, r8]
   13a74:	add	r2, r8, #1
   13a78:	cmp	r2, sl
   13a7c:	movcc	r0, #36	; 0x24
   13a80:	strbcc	r0, [r5, r2]
   13a84:	add	r2, r8, #2
   13a88:	cmp	r2, sl
   13a8c:	movcc	r0, #39	; 0x27
   13a90:	strbcc	r0, [r5, r2]
   13a94:	add	r8, r8, #3
   13a98:	mov	r3, #1
   13a9c:	cmp	r8, sl
   13aa0:	movcc	r1, #92	; 0x5c
   13aa4:	strbcc	r1, [r5, r8]
   13aa8:	add	r2, r8, #1
   13aac:	cmp	r2, sl
   13ab0:	bcs	13ac4 <__mempcpy_chk@plt+0x2904>
   13ab4:	uxtb	r1, r4
   13ab8:	mov	r0, #48	; 0x30
   13abc:	orr	r1, r0, r1, lsr #6
   13ac0:	strb	r1, [r5, r2]
   13ac4:	add	r2, r8, #2
   13ac8:	cmp	r2, sl
   13acc:	lsrcc	r1, r4, #3
   13ad0:	movcc	r0, #6
   13ad4:	bficc	r1, r0, #3, #29
   13ad8:	strbcc	r1, [r5, r2]
   13adc:	mov	r0, #6
   13ae0:	bfi	r4, r0, #3, #29
   13ae4:	add	r8, r8, #3
   13ae8:	mov	r2, #1
   13aec:	mov	r0, r3
   13af0:	b	13b3c <__mempcpy_chk@plt+0x297c>
   13af4:	cmp	r8, sl
   13af8:	strbcc	r4, [r5, r8]
   13afc:	ldr	r1, [sp, #76]	; 0x4c
   13b00:	ldrb	r4, [r1, r7]
   13b04:	add	r8, r8, #1
   13b08:	mov	r7, r3
   13b0c:	ldr	r1, [sp, #48]	; 0x30
   13b10:	tst	r1, #1
   13b14:	beq	13a40 <__mempcpy_chk@plt+0x2880>
   13b18:	ldr	r1, [fp, #-52]	; 0xffffffcc
   13b1c:	tst	r1, #1
   13b20:	beq	13b34 <__mempcpy_chk@plt+0x2974>
   13b24:	cmp	r8, sl
   13b28:	movcc	r1, #92	; 0x5c
   13b2c:	strbcc	r1, [r5, r8]
   13b30:	add	r8, r8, #1
   13b34:	mov	r1, #0
   13b38:	str	r1, [fp, #-52]	; 0xffffffcc
   13b3c:	and	r9, r2, #1
   13b40:	add	r3, r7, #1
   13b44:	ldr	r1, [sp, #52]	; 0x34
   13b48:	cmp	r1, r3
   13b4c:	bls	13b90 <__mempcpy_chk@plt+0x29d0>
   13b50:	cmp	r9, #0
   13b54:	movwne	r9, #1
   13b58:	mvn	r1, r0
   13b5c:	orr	r1, r1, r9
   13b60:	tst	r1, #1
   13b64:	bne	13af4 <__mempcpy_chk@plt+0x2934>
   13b68:	cmp	r8, sl
   13b6c:	movcc	r1, #39	; 0x27
   13b70:	strbcc	r1, [r5, r8]
   13b74:	add	r1, r8, #1
   13b78:	cmp	r1, sl
   13b7c:	movcc	r0, #39	; 0x27
   13b80:	strbcc	r0, [r5, r1]
   13b84:	add	r8, r8, #2
   13b88:	mov	r0, #0
   13b8c:	b	13af4 <__mempcpy_chk@plt+0x2934>
   13b90:	str	r0, [fp, #-56]	; 0xffffffc8
   13b94:	cmp	r9, #0
   13b98:	movwne	r9, #1
   13b9c:	cmp	r9, #0
   13ba0:	beq	13724 <__mempcpy_chk@plt+0x2564>
   13ba4:	b	13758 <__mempcpy_chk@plt+0x2598>
   13ba8:	mov	r6, #0
   13bac:	b	13bec <__mempcpy_chk@plt+0x2a2c>
   13bb0:	mov	r6, #0
   13bb4:	ldr	r0, [sp, #48]	; 0x30
   13bb8:	cmp	r0, lr
   13bbc:	bcs	13bec <__mempcpy_chk@plt+0x2a2c>
   13bc0:	ldr	ip, [fp, #-80]	; 0xffffffb0
   13bc4:	add	r0, ip, r7
   13bc8:	ldr	r2, [sp, #52]	; 0x34
   13bcc:	ldrb	r1, [r0, r2]
   13bd0:	cmp	r1, #0
   13bd4:	beq	136e0 <__mempcpy_chk@plt+0x2520>
   13bd8:	add	r2, r2, #1
   13bdc:	add	r1, r7, r2
   13be0:	cmp	r1, lr
   13be4:	bcc	13bcc <__mempcpy_chk@plt+0x2a0c>
   13be8:	b	136e0 <__mempcpy_chk@plt+0x2520>
   13bec:	ldr	ip, [fp, #-80]	; 0xffffffb0
   13bf0:	ldr	r2, [sp, #52]	; 0x34
   13bf4:	b	136e0 <__mempcpy_chk@plt+0x2520>
   13bf8:	ldr	r1, [fp, #-64]	; 0xffffffc0
   13bfc:	eor	r0, r1, #2
   13c00:	orr	r0, r0, r8
   13c04:	clz	r0, r0
   13c08:	lsr	r0, r0, #5
   13c0c:	ldr	r3, [fp, #-76]	; 0xffffffb4
   13c10:	tst	r3, r0
   13c14:	bne	13ce0 <__mempcpy_chk@plt+0x2b20>
   13c18:	mov	r6, r5
   13c1c:	subs	r0, r1, #2
   13c20:	movwne	r0, #1
   13c24:	orr	r0, r3, r0
   13c28:	tst	r0, #1
   13c2c:	ldr	r2, [sp, #92]	; 0x5c
   13c30:	ldreq	r0, [sp, #64]	; 0x40
   13c34:	eoreq	r0, r0, #1
   13c38:	tsteq	r0, #1
   13c3c:	bne	13c7c <__mempcpy_chk@plt+0x2abc>
   13c40:	mov	r9, lr
   13c44:	ldr	r0, [fp, #-48]	; 0xffffffd0
   13c48:	tst	r0, #1
   13c4c:	bne	13d48 <__mempcpy_chk@plt+0x2b88>
   13c50:	ldr	r0, [sp, #84]	; 0x54
   13c54:	cmp	r0, #0
   13c58:	beq	13c7c <__mempcpy_chk@plt+0x2abc>
   13c5c:	mov	r0, #0
   13c60:	str	r0, [fp, #-48]	; 0xffffffd0
   13c64:	mov	r1, #2
   13c68:	cmp	sl, #0
   13c6c:	mov	r0, r2
   13c70:	mov	r4, r3
   13c74:	ldr	r7, [sp, #84]	; 0x54
   13c78:	beq	12e54 <__mempcpy_chk@plt+0x1c94>
   13c7c:	ldr	r1, [fp, #-84]	; 0xffffffac
   13c80:	clz	r0, r1
   13c84:	lsr	r0, r0, #5
   13c88:	orr	r0, r0, r3
   13c8c:	tst	r0, #1
   13c90:	bne	13cbc <__mempcpy_chk@plt+0x2afc>
   13c94:	ldrb	r0, [r1]
   13c98:	cmp	r0, #0
   13c9c:	beq	13cbc <__mempcpy_chk@plt+0x2afc>
   13ca0:	add	r1, r1, #1
   13ca4:	cmp	r8, sl
   13ca8:	strbcc	r0, [r6, r8]
   13cac:	add	r8, r8, #1
   13cb0:	ldrb	r0, [r1], #1
   13cb4:	cmp	r0, #0
   13cb8:	bne	13ca4 <__mempcpy_chk@plt+0x2ae4>
   13cbc:	cmp	r8, sl
   13cc0:	movcc	r0, #0
   13cc4:	strbcc	r0, [r6, r8]
   13cc8:	b	13d3c <__mempcpy_chk@plt+0x2b7c>
   13ccc:	ldr	ip, [fp, #-80]	; 0xffffffb0
   13cd0:	mov	lr, r4
   13cd4:	b	13ce0 <__mempcpy_chk@plt+0x2b20>
   13cd8:	ldr	r5, [sp, #28]
   13cdc:	ldr	ip, [fp, #-80]	; 0xffffffb0
   13ce0:	mov	r0, #0
   13ce4:	ldr	r1, [fp, #12]
   13ce8:	bic	r1, r1, #2
   13cec:	mov	r2, #2
   13cf0:	ldr	r3, [sp, #92]	; 0x5c
   13cf4:	tst	r3, #1
   13cf8:	movwne	r2, #4
   13cfc:	ldr	r3, [fp, #-64]	; 0xffffffc0
   13d00:	cmp	r3, #2
   13d04:	movne	r2, r3
   13d08:	str	r2, [sp]
   13d0c:	str	r1, [sp, #4]
   13d10:	str	r0, [sp, #8]
   13d14:	ldr	r0, [sp, #80]	; 0x50
   13d18:	str	r0, [sp, #12]
   13d1c:	ldr	r0, [sp, #88]	; 0x58
   13d20:	str	r0, [sp, #16]
   13d24:	mov	r0, r5
   13d28:	mov	r1, sl
   13d2c:	mov	r2, ip
   13d30:	mov	r3, lr
   13d34:	bl	12dc8 <__mempcpy_chk@plt+0x1c08>
   13d38:	mov	r8, r0
   13d3c:	mov	r0, r8
   13d40:	sub	sp, fp, #28
   13d44:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13d48:	mov	r0, #5
   13d4c:	str	r0, [sp]
   13d50:	ldr	r0, [fp, #12]
   13d54:	str	r0, [sp, #4]
   13d58:	ldr	r0, [fp, #16]
   13d5c:	str	r0, [sp, #8]
   13d60:	ldr	r0, [sp, #80]	; 0x50
   13d64:	str	r0, [sp, #12]
   13d68:	ldr	r0, [sp, #88]	; 0x58
   13d6c:	str	r0, [sp, #16]
   13d70:	mov	r0, r6
   13d74:	ldr	r1, [sp, #84]	; 0x54
   13d78:	ldr	r2, [fp, #-80]	; 0xffffffb0
   13d7c:	mov	r3, r9
   13d80:	b	13d34 <__mempcpy_chk@plt+0x2b74>
   13d84:	bl	111a8 <abort@plt>
   13d88:	mov	r3, r2
   13d8c:	mov	r2, #0
   13d90:	b	13d94 <__mempcpy_chk@plt+0x2bd4>
   13d94:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13d98:	add	fp, sp, #28
   13d9c:	sub	sp, sp, #36	; 0x24
   13da0:	mov	r4, r2
   13da4:	str	r2, [sp, #24]
   13da8:	mov	r5, r1
   13dac:	mov	r6, r0
   13db0:	str	r0, [sp, #20]
   13db4:	movw	r8, #29080	; 0x7198
   13db8:	movt	r8, #2
   13dbc:	cmp	r3, #0
   13dc0:	movne	r8, r3
   13dc4:	bl	110dc <__errno_location@plt>
   13dc8:	str	r0, [sp, #28]
   13dcc:	ldm	r8, {r3, r9}
   13dd0:	ldr	r1, [r8, #40]	; 0x28
   13dd4:	ldr	r2, [r8, #44]	; 0x2c
   13dd8:	ldr	r7, [r0]
   13ddc:	str	r7, [sp, #32]
   13de0:	add	sl, r8, #8
   13de4:	cmp	r4, #0
   13de8:	orreq	r9, r9, #1
   13dec:	stm	sp, {r3, r9, sl}
   13df0:	str	r1, [sp, #12]
   13df4:	str	r2, [sp, #16]
   13df8:	mov	r0, #0
   13dfc:	mov	r1, #0
   13e00:	mov	r2, r6
   13e04:	mov	r3, r5
   13e08:	mov	r7, r5
   13e0c:	bl	12dc8 <__mempcpy_chk@plt+0x1c08>
   13e10:	mov	r5, r0
   13e14:	add	r4, r0, #1
   13e18:	mov	r0, r4
   13e1c:	bl	14c9c <__mempcpy_chk@plt+0x3adc>
   13e20:	mov	r6, r0
   13e24:	ldr	r0, [r8]
   13e28:	ldr	r1, [r8, #40]	; 0x28
   13e2c:	ldr	r2, [r8, #44]	; 0x2c
   13e30:	stm	sp, {r0, r9, sl}
   13e34:	str	r1, [sp, #12]
   13e38:	str	r2, [sp, #16]
   13e3c:	mov	r0, r6
   13e40:	mov	r1, r4
   13e44:	ldr	r2, [sp, #20]
   13e48:	mov	r3, r7
   13e4c:	bl	12dc8 <__mempcpy_chk@plt+0x1c08>
   13e50:	ldr	r0, [sp, #24]
   13e54:	ldr	r1, [sp, #32]
   13e58:	ldr	r2, [sp, #28]
   13e5c:	str	r1, [r2]
   13e60:	cmp	r0, #0
   13e64:	strne	r5, [r0]
   13e68:	mov	r0, r6
   13e6c:	sub	sp, fp, #28
   13e70:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13e74:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   13e78:	add	fp, sp, #24
   13e7c:	movw	r8, #28936	; 0x7108
   13e80:	movt	r8, #2
   13e84:	ldr	r4, [r8]
   13e88:	movw	r5, #28940	; 0x710c
   13e8c:	movt	r5, #2
   13e90:	ldr	r0, [r5]
   13e94:	cmp	r0, #2
   13e98:	blt	13ec4 <__mempcpy_chk@plt+0x2d04>
   13e9c:	add	r7, r4, #12
   13ea0:	mov	r6, #0
   13ea4:	ldr	r0, [r7, r6, lsl #3]
   13ea8:	bl	12b64 <__mempcpy_chk@plt+0x19a4>
   13eac:	add	r0, r6, #1
   13eb0:	ldr	r1, [r5]
   13eb4:	add	r2, r6, #2
   13eb8:	cmp	r2, r1
   13ebc:	mov	r6, r0
   13ec0:	blt	13ea4 <__mempcpy_chk@plt+0x2ce4>
   13ec4:	ldr	r0, [r4, #4]
   13ec8:	movw	r9, #29128	; 0x71c8
   13ecc:	movt	r9, #2
   13ed0:	cmp	r0, r9
   13ed4:	movw	r7, #28944	; 0x7110
   13ed8:	movt	r7, #2
   13edc:	beq	13eec <__mempcpy_chk@plt+0x2d2c>
   13ee0:	bl	12b64 <__mempcpy_chk@plt+0x19a4>
   13ee4:	mov	r0, #256	; 0x100
   13ee8:	stm	r7, {r0, r9}
   13eec:	cmp	r4, r7
   13ef0:	beq	13f00 <__mempcpy_chk@plt+0x2d40>
   13ef4:	mov	r0, r4
   13ef8:	bl	12b64 <__mempcpy_chk@plt+0x19a4>
   13efc:	str	r7, [r8]
   13f00:	mov	r0, #1
   13f04:	str	r0, [r5]
   13f08:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   13f0c:	movw	r3, #29080	; 0x7198
   13f10:	movt	r3, #2
   13f14:	mvn	r2, #0
   13f18:	b	13f1c <__mempcpy_chk@plt+0x2d5c>
   13f1c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13f20:	add	fp, sp, #28
   13f24:	sub	sp, sp, #44	; 0x2c
   13f28:	mov	r7, r3
   13f2c:	str	r2, [sp, #36]	; 0x24
   13f30:	str	r1, [sp, #32]
   13f34:	mov	r5, r0
   13f38:	bl	110dc <__errno_location@plt>
   13f3c:	cmp	r5, #0
   13f40:	bmi	140b0 <__mempcpy_chk@plt+0x2ef0>
   13f44:	cmn	r5, #-2147483647	; 0x80000001
   13f48:	beq	140b0 <__mempcpy_chk@plt+0x2ef0>
   13f4c:	movw	r4, #28936	; 0x7108
   13f50:	movt	r4, #2
   13f54:	ldr	r6, [r4]
   13f58:	str	r0, [sp, #28]
   13f5c:	ldr	r0, [r0]
   13f60:	str	r0, [sp, #24]
   13f64:	movw	r8, #28940	; 0x710c
   13f68:	movt	r8, #2
   13f6c:	ldr	r1, [r8]
   13f70:	cmp	r1, r5
   13f74:	ble	13f80 <__mempcpy_chk@plt+0x2dc0>
   13f78:	mov	sl, r6
   13f7c:	b	13fec <__mempcpy_chk@plt+0x2e2c>
   13f80:	str	r1, [fp, #-32]	; 0xffffffe0
   13f84:	mov	r0, #8
   13f88:	str	r0, [sp]
   13f8c:	movw	r9, #28944	; 0x7110
   13f90:	movt	r9, #2
   13f94:	subs	r0, r6, r9
   13f98:	movne	r0, r6
   13f9c:	sub	r1, r5, r1
   13fa0:	add	r2, r1, #1
   13fa4:	sub	r1, fp, #32
   13fa8:	mvn	r3, #-2147483648	; 0x80000000
   13fac:	bl	14d78 <__mempcpy_chk@plt+0x3bb8>
   13fb0:	mov	sl, r0
   13fb4:	str	r0, [r4]
   13fb8:	cmp	r6, r9
   13fbc:	bne	13fc8 <__mempcpy_chk@plt+0x2e08>
   13fc0:	ldrd	r0, [r9]
   13fc4:	stm	sl, {r0, r1}
   13fc8:	ldr	r1, [r8]
   13fcc:	add	r0, sl, r1, lsl #3
   13fd0:	ldr	r2, [fp, #-32]	; 0xffffffe0
   13fd4:	sub	r1, r2, r1
   13fd8:	lsl	r2, r1, #3
   13fdc:	mov	r1, #0
   13fe0:	bl	11100 <memset@plt>
   13fe4:	ldr	r0, [fp, #-32]	; 0xffffffe0
   13fe8:	str	r0, [r8]
   13fec:	mov	r9, sl
   13ff0:	ldr	r6, [r9, r5, lsl #3]!
   13ff4:	ldr	r4, [r9, #4]!
   13ff8:	ldm	r7, {r0, r1}
   13ffc:	ldr	r2, [r7, #40]	; 0x28
   14000:	ldr	r3, [r7, #44]	; 0x2c
   14004:	orr	r8, r1, #1
   14008:	add	r1, r7, #8
   1400c:	stm	sp, {r0, r8}
   14010:	str	r1, [sp, #20]
   14014:	add	r0, sp, #8
   14018:	stm	r0, {r1, r2, r3}
   1401c:	mov	r0, r4
   14020:	mov	r1, r6
   14024:	ldr	r2, [sp, #32]
   14028:	ldr	r3, [sp, #36]	; 0x24
   1402c:	bl	12dc8 <__mempcpy_chk@plt+0x1c08>
   14030:	cmp	r6, r0
   14034:	bhi	14098 <__mempcpy_chk@plt+0x2ed8>
   14038:	add	r6, r0, #1
   1403c:	str	r6, [sl, r5, lsl #3]
   14040:	movw	r0, #29128	; 0x71c8
   14044:	movt	r0, #2
   14048:	cmp	r4, r0
   1404c:	beq	14058 <__mempcpy_chk@plt+0x2e98>
   14050:	mov	r0, r4
   14054:	bl	12b64 <__mempcpy_chk@plt+0x19a4>
   14058:	mov	r0, r6
   1405c:	bl	14c9c <__mempcpy_chk@plt+0x3adc>
   14060:	mov	r4, r0
   14064:	str	r0, [r9]
   14068:	ldr	r0, [r7]
   1406c:	ldr	r1, [r7, #40]	; 0x28
   14070:	ldr	r2, [r7, #44]	; 0x2c
   14074:	stm	sp, {r0, r8}
   14078:	ldr	r0, [sp, #20]
   1407c:	add	r3, sp, #8
   14080:	stm	r3, {r0, r1, r2}
   14084:	mov	r0, r4
   14088:	mov	r1, r6
   1408c:	ldr	r2, [sp, #32]
   14090:	ldr	r3, [sp, #36]	; 0x24
   14094:	bl	12dc8 <__mempcpy_chk@plt+0x1c08>
   14098:	ldr	r0, [sp, #28]
   1409c:	ldr	r1, [sp, #24]
   140a0:	str	r1, [r0]
   140a4:	mov	r0, r4
   140a8:	sub	sp, fp, #28
   140ac:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   140b0:	bl	111a8 <abort@plt>
   140b4:	movw	r3, #29080	; 0x7198
   140b8:	movt	r3, #2
   140bc:	b	13f1c <__mempcpy_chk@plt+0x2d5c>
   140c0:	mov	r1, r0
   140c4:	mov	r0, #0
   140c8:	b	13f0c <__mempcpy_chk@plt+0x2d4c>
   140cc:	mov	r2, r1
   140d0:	mov	r1, r0
   140d4:	mov	r0, #0
   140d8:	b	140b4 <__mempcpy_chk@plt+0x2ef4>
   140dc:	push	{r4, r5, r6, sl, fp, lr}
   140e0:	add	fp, sp, #16
   140e4:	sub	sp, sp, #48	; 0x30
   140e8:	mov	r4, r2
   140ec:	mov	r5, r0
   140f0:	mov	r6, sp
   140f4:	mov	r0, r6
   140f8:	bl	14118 <__mempcpy_chk@plt+0x2f58>
   140fc:	mov	r0, r5
   14100:	mov	r1, r4
   14104:	mvn	r2, #0
   14108:	mov	r3, r6
   1410c:	bl	13f1c <__mempcpy_chk@plt+0x2d5c>
   14110:	sub	sp, fp, #16
   14114:	pop	{r4, r5, r6, sl, fp, pc}
   14118:	push	{fp, lr}
   1411c:	mov	fp, sp
   14120:	vmov.i32	q8, #0	; 0x00000000
   14124:	mov	r2, #32
   14128:	mov	r3, r0
   1412c:	vst1.32	{d16-d17}, [r3], r2
   14130:	vst1.32	{d16-d17}, [r3]
   14134:	add	r2, r0, #16
   14138:	vst1.32	{d16-d17}, [r2]
   1413c:	cmp	r1, #10
   14140:	strne	r1, [r0]
   14144:	popne	{fp, pc}
   14148:	bl	111a8 <abort@plt>
   1414c:	push	{r4, r5, r6, r7, fp, lr}
   14150:	add	fp, sp, #16
   14154:	sub	sp, sp, #48	; 0x30
   14158:	mov	r4, r3
   1415c:	mov	r5, r2
   14160:	mov	r6, r0
   14164:	mov	r7, sp
   14168:	mov	r0, r7
   1416c:	bl	14118 <__mempcpy_chk@plt+0x2f58>
   14170:	mov	r0, r6
   14174:	mov	r1, r5
   14178:	mov	r2, r4
   1417c:	mov	r3, r7
   14180:	bl	13f1c <__mempcpy_chk@plt+0x2d5c>
   14184:	sub	sp, fp, #16
   14188:	pop	{r4, r5, r6, r7, fp, pc}
   1418c:	mov	r2, r1
   14190:	mov	r1, r0
   14194:	mov	r0, #0
   14198:	b	140dc <__mempcpy_chk@plt+0x2f1c>
   1419c:	mov	r3, r2
   141a0:	mov	r2, r1
   141a4:	mov	r1, r0
   141a8:	mov	r0, #0
   141ac:	b	1414c <__mempcpy_chk@plt+0x2f8c>
   141b0:	push	{r4, r5, r6, sl, fp, lr}
   141b4:	add	fp, sp, #16
   141b8:	sub	sp, sp, #48	; 0x30
   141bc:	mov	r4, r1
   141c0:	mov	r5, r0
   141c4:	movw	r0, #29080	; 0x7198
   141c8:	movt	r0, #2
   141cc:	add	r1, r0, #16
   141d0:	mov	r3, #32
   141d4:	vld1.64	{d16-d17}, [r0], r3
   141d8:	vld1.64	{d18-d19}, [r1]
   141dc:	mov	r6, sp
   141e0:	add	r1, r6, #16
   141e4:	vld1.64	{d20-d21}, [r0]
   141e8:	vst1.64	{d18-d19}, [r1]
   141ec:	mov	r0, r6
   141f0:	vst1.64	{d16-d17}, [r0], r3
   141f4:	vst1.64	{d20-d21}, [r0]
   141f8:	mov	r0, r6
   141fc:	mov	r1, r2
   14200:	mov	r2, #1
   14204:	bl	12cbc <__mempcpy_chk@plt+0x1afc>
   14208:	mov	r0, #0
   1420c:	mov	r1, r5
   14210:	mov	r2, r4
   14214:	mov	r3, r6
   14218:	bl	13f1c <__mempcpy_chk@plt+0x2d5c>
   1421c:	sub	sp, fp, #16
   14220:	pop	{r4, r5, r6, sl, fp, pc}
   14224:	mov	r2, r1
   14228:	mvn	r1, #0
   1422c:	b	141b0 <__mempcpy_chk@plt+0x2ff0>
   14230:	mov	r1, #58	; 0x3a
   14234:	b	14224 <__mempcpy_chk@plt+0x3064>
   14238:	mov	r2, #58	; 0x3a
   1423c:	b	141b0 <__mempcpy_chk@plt+0x2ff0>
   14240:	push	{r4, r5, r6, sl, fp, lr}
   14244:	add	fp, sp, #16
   14248:	sub	sp, sp, #48	; 0x30
   1424c:	mov	r4, r2
   14250:	mov	r5, r0
   14254:	mov	r6, sp
   14258:	mov	r0, r6
   1425c:	bl	14118 <__mempcpy_chk@plt+0x2f58>
   14260:	mov	r0, r6
   14264:	mov	r1, #58	; 0x3a
   14268:	mov	r2, #1
   1426c:	bl	12cbc <__mempcpy_chk@plt+0x1afc>
   14270:	mov	r0, r5
   14274:	mov	r1, r4
   14278:	mvn	r2, #0
   1427c:	mov	r3, r6
   14280:	bl	13f1c <__mempcpy_chk@plt+0x2d5c>
   14284:	sub	sp, fp, #16
   14288:	pop	{r4, r5, r6, sl, fp, pc}
   1428c:	push	{fp, lr}
   14290:	mov	fp, sp
   14294:	sub	sp, sp, #8
   14298:	mvn	ip, #0
   1429c:	str	ip, [sp]
   142a0:	bl	142ac <__mempcpy_chk@plt+0x30ec>
   142a4:	mov	sp, fp
   142a8:	pop	{fp, pc}
   142ac:	push	{r4, r5, r6, r7, fp, lr}
   142b0:	add	fp, sp, #16
   142b4:	sub	sp, sp, #48	; 0x30
   142b8:	mov	r7, r3
   142bc:	mov	r5, r0
   142c0:	movw	r0, #29080	; 0x7198
   142c4:	movt	r0, #2
   142c8:	add	r3, r0, #16
   142cc:	mov	r4, #32
   142d0:	vld1.64	{d16-d17}, [r0], r4
   142d4:	vld1.64	{d18-d19}, [r3]
   142d8:	mov	r6, sp
   142dc:	add	r3, r6, #16
   142e0:	vld1.64	{d20-d21}, [r0]
   142e4:	vst1.64	{d18-d19}, [r3]
   142e8:	mov	r0, r6
   142ec:	vst1.64	{d16-d17}, [r0], r4
   142f0:	vst1.64	{d20-d21}, [r0]
   142f4:	mov	r0, r6
   142f8:	bl	12d14 <__mempcpy_chk@plt+0x1b54>
   142fc:	ldr	r2, [fp, #8]
   14300:	mov	r0, r5
   14304:	mov	r1, r7
   14308:	mov	r3, r6
   1430c:	bl	13f1c <__mempcpy_chk@plt+0x2d5c>
   14310:	sub	sp, fp, #16
   14314:	pop	{r4, r5, r6, r7, fp, pc}
   14318:	mov	r3, r2
   1431c:	mov	r2, r1
   14320:	mov	r1, r0
   14324:	mov	r0, #0
   14328:	b	1428c <__mempcpy_chk@plt+0x30cc>
   1432c:	push	{fp, lr}
   14330:	mov	fp, sp
   14334:	sub	sp, sp, #8
   14338:	mov	ip, r2
   1433c:	mov	r2, r1
   14340:	mov	r1, r0
   14344:	str	r3, [sp]
   14348:	mov	r0, #0
   1434c:	mov	r3, ip
   14350:	bl	142ac <__mempcpy_chk@plt+0x30ec>
   14354:	mov	sp, fp
   14358:	pop	{fp, pc}
   1435c:	movw	r3, #28952	; 0x7118
   14360:	movt	r3, #2
   14364:	b	13f1c <__mempcpy_chk@plt+0x2d5c>
   14368:	mov	r2, r1
   1436c:	mov	r1, r0
   14370:	mov	r0, #0
   14374:	b	1435c <__mempcpy_chk@plt+0x319c>
   14378:	mvn	r2, #0
   1437c:	b	1435c <__mempcpy_chk@plt+0x319c>
   14380:	mov	r1, r0
   14384:	mov	r0, #0
   14388:	b	14378 <__mempcpy_chk@plt+0x31b8>
   1438c:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   14390:	add	fp, sp, #24
   14394:	sub	sp, sp, #16
   14398:	mov	r4, r1
   1439c:	mov	r5, r0
   143a0:	mov	r7, #0
   143a4:	mov	r0, #0
   143a8:	mov	r1, r5
   143ac:	mov	r2, #5
   143b0:	bl	10fc8 <dcgettext@plt>
   143b4:	cmp	r0, r5
   143b8:	beq	143c4 <__mempcpy_chk@plt+0x3204>
   143bc:	sub	sp, fp, #24
   143c0:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   143c4:	bl	1580c <__mempcpy_chk@plt+0x464c>
   143c8:	mov	r6, r0
   143cc:	mov	r8, #56	; 0x38
   143d0:	mov	r0, #45	; 0x2d
   143d4:	stm	sp, {r0, r8}
   143d8:	str	r7, [sp, #8]
   143dc:	str	r7, [sp, #12]
   143e0:	mov	r0, r6
   143e4:	mov	r1, #85	; 0x55
   143e8:	mov	r2, #84	; 0x54
   143ec:	mov	r3, #70	; 0x46
   143f0:	bl	14488 <__mempcpy_chk@plt+0x32c8>
   143f4:	cmp	r0, #0
   143f8:	beq	14414 <__mempcpy_chk@plt+0x3254>
   143fc:	ldrb	r1, [r5]
   14400:	movw	r2, #25718	; 0x6476
   14404:	movt	r2, #1
   14408:	movw	r0, #25722	; 0x647a
   1440c:	movt	r0, #1
   14410:	b	14458 <__mempcpy_chk@plt+0x3298>
   14414:	mov	r0, #48	; 0x30
   14418:	mov	r1, #51	; 0x33
   1441c:	str	r8, [sp]
   14420:	stmib	sp, {r0, r1}
   14424:	str	r0, [sp, #12]
   14428:	mov	r0, r6
   1442c:	mov	r1, #71	; 0x47
   14430:	mov	r2, #66	; 0x42
   14434:	mov	r3, #49	; 0x31
   14438:	bl	14488 <__mempcpy_chk@plt+0x32c8>
   1443c:	cmp	r0, #0
   14440:	beq	14468 <__mempcpy_chk@plt+0x32a8>
   14444:	ldrb	r1, [r5]
   14448:	movw	r2, #25726	; 0x647e
   1444c:	movt	r2, #1
   14450:	movw	r0, #25730	; 0x6482
   14454:	movt	r0, #1
   14458:	cmp	r1, #96	; 0x60
   1445c:	moveq	r0, r2
   14460:	sub	sp, fp, #24
   14464:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   14468:	movw	r1, #25714	; 0x6472
   1446c:	movt	r1, #1
   14470:	movw	r0, #25143	; 0x6237
   14474:	movt	r0, #1
   14478:	cmp	r4, #9
   1447c:	moveq	r0, r1
   14480:	sub	sp, fp, #24
   14484:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   14488:	push	{r4, r5, r6, r7, fp, lr}
   1448c:	add	fp, sp, #16
   14490:	sub	sp, sp, #16
   14494:	mov	r4, r3
   14498:	mov	r5, r2
   1449c:	mov	r7, r1
   144a0:	mov	r6, r0
   144a4:	mov	r0, r1
   144a8:	bl	15454 <__mempcpy_chk@plt+0x4294>
   144ac:	ldrb	r1, [r6]
   144b0:	cmp	r0, #0
   144b4:	andne	r1, r1, #223	; 0xdf
   144b8:	mov	r0, #0
   144bc:	cmp	r1, r7
   144c0:	bne	144f8 <__mempcpy_chk@plt+0x3338>
   144c4:	cmp	r7, #0
   144c8:	beq	14500 <__mempcpy_chk@plt+0x3340>
   144cc:	ldr	r0, [fp, #20]
   144d0:	ldr	r1, [fp, #16]
   144d4:	ldr	r2, [fp, #12]
   144d8:	ldr	r3, [fp, #8]
   144dc:	str	r2, [sp]
   144e0:	str	r1, [sp, #4]
   144e4:	str	r0, [sp, #8]
   144e8:	mov	r0, r6
   144ec:	mov	r1, r5
   144f0:	mov	r2, r4
   144f4:	bl	1450c <__mempcpy_chk@plt+0x334c>
   144f8:	sub	sp, fp, #16
   144fc:	pop	{r4, r5, r6, r7, fp, pc}
   14500:	mov	r0, #1
   14504:	sub	sp, fp, #16
   14508:	pop	{r4, r5, r6, r7, fp, pc}
   1450c:	push	{r4, r5, r6, r7, fp, lr}
   14510:	add	fp, sp, #16
   14514:	sub	sp, sp, #8
   14518:	mov	r4, r3
   1451c:	mov	r5, r2
   14520:	mov	r7, r1
   14524:	mov	r6, r0
   14528:	mov	r0, r1
   1452c:	bl	15454 <__mempcpy_chk@plt+0x4294>
   14530:	ldrb	r1, [r6, #1]
   14534:	cmp	r0, #0
   14538:	andne	r1, r1, #223	; 0xdf
   1453c:	mov	r0, #0
   14540:	cmp	r1, r7
   14544:	bne	14574 <__mempcpy_chk@plt+0x33b4>
   14548:	cmp	r7, #0
   1454c:	beq	1457c <__mempcpy_chk@plt+0x33bc>
   14550:	ldr	r0, [fp, #16]
   14554:	ldr	r1, [fp, #12]
   14558:	ldr	r3, [fp, #8]
   1455c:	str	r1, [sp]
   14560:	str	r0, [sp, #4]
   14564:	mov	r0, r6
   14568:	mov	r1, r5
   1456c:	mov	r2, r4
   14570:	bl	14588 <__mempcpy_chk@plt+0x33c8>
   14574:	sub	sp, fp, #16
   14578:	pop	{r4, r5, r6, r7, fp, pc}
   1457c:	mov	r0, #1
   14580:	sub	sp, fp, #16
   14584:	pop	{r4, r5, r6, r7, fp, pc}
   14588:	push	{r4, r5, r6, r7, fp, lr}
   1458c:	add	fp, sp, #16
   14590:	sub	sp, sp, #8
   14594:	mov	r4, r3
   14598:	mov	r5, r2
   1459c:	mov	r7, r1
   145a0:	mov	r6, r0
   145a4:	mov	r0, r1
   145a8:	bl	15454 <__mempcpy_chk@plt+0x4294>
   145ac:	ldrb	r1, [r6, #2]
   145b0:	cmp	r0, #0
   145b4:	andne	r1, r1, #223	; 0xdf
   145b8:	mov	r0, #0
   145bc:	cmp	r1, r7
   145c0:	bne	145e8 <__mempcpy_chk@plt+0x3428>
   145c4:	cmp	r7, #0
   145c8:	beq	145f0 <__mempcpy_chk@plt+0x3430>
   145cc:	ldr	r0, [fp, #12]
   145d0:	ldr	r3, [fp, #8]
   145d4:	str	r0, [sp]
   145d8:	mov	r0, r6
   145dc:	mov	r1, r5
   145e0:	mov	r2, r4
   145e4:	bl	145fc <__mempcpy_chk@plt+0x343c>
   145e8:	sub	sp, fp, #16
   145ec:	pop	{r4, r5, r6, r7, fp, pc}
   145f0:	mov	r0, #1
   145f4:	sub	sp, fp, #16
   145f8:	pop	{r4, r5, r6, r7, fp, pc}
   145fc:	push	{r4, r5, r6, r7, fp, lr}
   14600:	add	fp, sp, #16
   14604:	mov	r4, r3
   14608:	mov	r5, r2
   1460c:	mov	r7, r1
   14610:	mov	r6, r0
   14614:	mov	r0, r1
   14618:	bl	15454 <__mempcpy_chk@plt+0x4294>
   1461c:	ldrb	r1, [r6, #3]
   14620:	ldr	r3, [fp, #8]
   14624:	cmp	r0, #0
   14628:	andne	r1, r1, #223	; 0xdf
   1462c:	mov	r0, #0
   14630:	cmp	r1, r7
   14634:	bne	14658 <__mempcpy_chk@plt+0x3498>
   14638:	cmp	r7, #0
   1463c:	beq	14654 <__mempcpy_chk@plt+0x3494>
   14640:	mov	r0, r6
   14644:	mov	r1, r5
   14648:	mov	r2, r4
   1464c:	pop	{r4, r5, r6, r7, fp, lr}
   14650:	b	1465c <__mempcpy_chk@plt+0x349c>
   14654:	mov	r0, #1
   14658:	pop	{r4, r5, r6, r7, fp, pc}
   1465c:	push	{r4, r5, r6, r7, fp, lr}
   14660:	add	fp, sp, #16
   14664:	mov	r4, r3
   14668:	mov	r5, r2
   1466c:	mov	r7, r1
   14670:	mov	r6, r0
   14674:	mov	r0, r1
   14678:	bl	15454 <__mempcpy_chk@plt+0x4294>
   1467c:	ldrb	r1, [r6, #4]
   14680:	cmp	r0, #0
   14684:	andne	r1, r1, #223	; 0xdf
   14688:	mov	r0, #0
   1468c:	cmp	r1, r7
   14690:	bne	146b4 <__mempcpy_chk@plt+0x34f4>
   14694:	cmp	r7, #0
   14698:	beq	146b0 <__mempcpy_chk@plt+0x34f0>
   1469c:	mov	r0, r6
   146a0:	mov	r1, r5
   146a4:	mov	r2, r4
   146a8:	pop	{r4, r5, r6, r7, fp, lr}
   146ac:	b	146b8 <__mempcpy_chk@plt+0x34f8>
   146b0:	mov	r0, #1
   146b4:	pop	{r4, r5, r6, r7, fp, pc}
   146b8:	push	{r4, r5, r6, sl, fp, lr}
   146bc:	add	fp, sp, #16
   146c0:	mov	r4, r2
   146c4:	mov	r6, r1
   146c8:	mov	r5, r0
   146cc:	mov	r0, r1
   146d0:	bl	15454 <__mempcpy_chk@plt+0x4294>
   146d4:	ldrb	r1, [r5, #5]
   146d8:	cmp	r0, #0
   146dc:	andne	r1, r1, #223	; 0xdf
   146e0:	mov	r0, #0
   146e4:	cmp	r1, r6
   146e8:	bne	14708 <__mempcpy_chk@plt+0x3548>
   146ec:	cmp	r6, #0
   146f0:	beq	14704 <__mempcpy_chk@plt+0x3544>
   146f4:	mov	r0, r5
   146f8:	mov	r1, r4
   146fc:	pop	{r4, r5, r6, sl, fp, lr}
   14700:	b	1470c <__mempcpy_chk@plt+0x354c>
   14704:	mov	r0, #1
   14708:	pop	{r4, r5, r6, sl, fp, pc}
   1470c:	push	{r4, r5, fp, lr}
   14710:	add	fp, sp, #8
   14714:	mov	r5, r1
   14718:	mov	r4, r0
   1471c:	mov	r0, r1
   14720:	bl	15454 <__mempcpy_chk@plt+0x4294>
   14724:	ldrb	r1, [r4, #6]
   14728:	cmp	r0, #0
   1472c:	andne	r1, r1, #223	; 0xdf
   14730:	mov	r0, #0
   14734:	cmp	r1, r5
   14738:	popne	{r4, r5, fp, pc}
   1473c:	cmp	r5, #0
   14740:	beq	14750 <__mempcpy_chk@plt+0x3590>
   14744:	mov	r0, r4
   14748:	pop	{r4, r5, fp, lr}
   1474c:	b	14758 <__mempcpy_chk@plt+0x3598>
   14750:	mov	r0, #1
   14754:	pop	{r4, r5, fp, pc}
   14758:	push	{r4, sl, fp, lr}
   1475c:	add	fp, sp, #8
   14760:	mov	r4, r0
   14764:	mov	r0, #0
   14768:	bl	15454 <__mempcpy_chk@plt+0x4294>
   1476c:	ldrb	r1, [r4, #7]
   14770:	cmp	r0, #0
   14774:	beq	14788 <__mempcpy_chk@plt+0x35c8>
   14778:	tst	r1, #223	; 0xdf
   1477c:	bne	14790 <__mempcpy_chk@plt+0x35d0>
   14780:	mov	r0, #1
   14784:	pop	{r4, sl, fp, pc}
   14788:	cmp	r1, #0
   1478c:	beq	14780 <__mempcpy_chk@plt+0x35c0>
   14790:	mov	r0, #0
   14794:	pop	{r4, sl, fp, pc}
   14798:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   1479c:	add	fp, sp, #24
   147a0:	sub	sp, sp, #32
   147a4:	mov	r4, r2
   147a8:	mov	r8, r0
   147ac:	ldr	r6, [fp, #12]
   147b0:	ldr	r7, [fp, #8]
   147b4:	cmp	r1, #0
   147b8:	beq	147e0 <__mempcpy_chk@plt+0x3620>
   147bc:	mov	r5, r1
   147c0:	str	r4, [sp]
   147c4:	str	r3, [sp, #4]
   147c8:	movw	r2, #25820	; 0x64dc
   147cc:	movt	r2, #1
   147d0:	mov	r0, r8
   147d4:	mov	r1, #1
   147d8:	mov	r3, r5
   147dc:	b	147f8 <__mempcpy_chk@plt+0x3638>
   147e0:	str	r3, [sp]
   147e4:	movw	r2, #25832	; 0x64e8
   147e8:	movt	r2, #1
   147ec:	mov	r0, r8
   147f0:	mov	r1, #1
   147f4:	mov	r3, r4
   147f8:	bl	11124 <__fprintf_chk@plt>
   147fc:	movw	r1, #25839	; 0x64ef
   14800:	movt	r1, #1
   14804:	mov	r0, #0
   14808:	mov	r2, #5
   1480c:	bl	10fc8 <dcgettext@plt>
   14810:	mov	r3, r0
   14814:	movw	r0, #2022	; 0x7e6
   14818:	str	r0, [sp]
   1481c:	movw	r2, #26557	; 0x67bd
   14820:	movt	r2, #1
   14824:	mov	r0, r8
   14828:	mov	r1, #1
   1482c:	bl	11124 <__fprintf_chk@plt>
   14830:	movw	r4, #25064	; 0x61e8
   14834:	movt	r4, #1
   14838:	mov	r0, r4
   1483c:	mov	r1, r8
   14840:	bl	10f20 <fputs_unlocked@plt>
   14844:	movw	r1, #25843	; 0x64f3
   14848:	movt	r1, #1
   1484c:	mov	r0, #0
   14850:	mov	r2, #5
   14854:	bl	10fc8 <dcgettext@plt>
   14858:	mov	r2, r0
   1485c:	movw	r3, #26014	; 0x659e
   14860:	movt	r3, #1
   14864:	mov	r0, r8
   14868:	mov	r1, #1
   1486c:	bl	11124 <__fprintf_chk@plt>
   14870:	mov	r0, r4
   14874:	mov	r1, r8
   14878:	bl	10f20 <fputs_unlocked@plt>
   1487c:	cmp	r6, #9
   14880:	bhi	148bc <__mempcpy_chk@plt+0x36fc>
   14884:	add	r0, pc, #0
   14888:	ldr	pc, [r0, r6, lsl #2]
   1488c:			; <UNDEFINED> instruction: 0x000148b4
   14890:	andeq	r4, r1, r8, asr #17
   14894:	strdeq	r4, [r1], -r8
   14898:	andeq	r4, r1, r0, lsr #18
   1489c:	andeq	r4, r1, r8, asr #18
   148a0:	andeq	r4, r1, r0, ror r9
   148a4:	muleq	r1, r8, r9
   148a8:	ldrdeq	r4, [r1], -r0
   148ac:	andeq	r4, r1, r0, ror sl
   148b0:	andeq	r4, r1, r8, lsl sl
   148b4:	sub	sp, fp, #24
   148b8:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   148bc:	movw	r1, #26367	; 0x66ff
   148c0:	movt	r1, #1
   148c4:	b	14a20 <__mempcpy_chk@plt+0x3860>
   148c8:	movw	r1, #26048	; 0x65c0
   148cc:	movt	r1, #1
   148d0:	mov	r0, #0
   148d4:	mov	r2, #5
   148d8:	bl	10fc8 <dcgettext@plt>
   148dc:	mov	r2, r0
   148e0:	ldr	r3, [r7]
   148e4:	mov	r0, r8
   148e8:	mov	r1, #1
   148ec:	sub	sp, fp, #24
   148f0:	pop	{r4, r5, r6, r7, r8, sl, fp, lr}
   148f4:	b	11124 <__fprintf_chk@plt>
   148f8:	movw	r1, #26064	; 0x65d0
   148fc:	movt	r1, #1
   14900:	mov	r0, #0
   14904:	mov	r2, #5
   14908:	bl	10fc8 <dcgettext@plt>
   1490c:	mov	r2, r0
   14910:	ldr	r3, [r7]
   14914:	ldr	r0, [r7, #4]
   14918:	str	r0, [sp]
   1491c:	b	14a0c <__mempcpy_chk@plt+0x384c>
   14920:	movw	r1, #26087	; 0x65e7
   14924:	movt	r1, #1
   14928:	mov	r0, #0
   1492c:	mov	r2, #5
   14930:	bl	10fc8 <dcgettext@plt>
   14934:	mov	r2, r0
   14938:	ldr	r3, [r7]
   1493c:	ldmib	r7, {r0, r1}
   14940:	stm	sp, {r0, r1}
   14944:	b	14a0c <__mempcpy_chk@plt+0x384c>
   14948:	movw	r1, #26115	; 0x6603
   1494c:	movt	r1, #1
   14950:	mov	r0, #0
   14954:	mov	r2, #5
   14958:	bl	10fc8 <dcgettext@plt>
   1495c:	mov	r2, r0
   14960:	ldr	r3, [r7]
   14964:	ldmib	r7, {r0, r1, r7}
   14968:	stm	sp, {r0, r1, r7}
   1496c:	b	14a0c <__mempcpy_chk@plt+0x384c>
   14970:	movw	r1, #26147	; 0x6623
   14974:	movt	r1, #1
   14978:	mov	r0, #0
   1497c:	mov	r2, #5
   14980:	bl	10fc8 <dcgettext@plt>
   14984:	mov	r2, r0
   14988:	ldr	r3, [r7]
   1498c:	ldmib	r7, {r0, r1, r6, r7}
   14990:	stm	sp, {r0, r1, r6, r7}
   14994:	b	14a0c <__mempcpy_chk@plt+0x384c>
   14998:	movw	r1, #26183	; 0x6647
   1499c:	movt	r1, #1
   149a0:	mov	r0, #0
   149a4:	mov	r2, #5
   149a8:	bl	10fc8 <dcgettext@plt>
   149ac:	mov	r2, r0
   149b0:	ldr	r3, [r7]
   149b4:	ldmib	r7, {r0, r1, r6}
   149b8:	ldr	r5, [r7, #16]
   149bc:	ldr	r7, [r7, #20]
   149c0:	stm	sp, {r0, r1, r6}
   149c4:	str	r5, [sp, #12]
   149c8:	str	r7, [sp, #16]
   149cc:	b	14a0c <__mempcpy_chk@plt+0x384c>
   149d0:	movw	r1, #26223	; 0x666f
   149d4:	movt	r1, #1
   149d8:	mov	r0, #0
   149dc:	mov	r2, #5
   149e0:	bl	10fc8 <dcgettext@plt>
   149e4:	mov	r2, r0
   149e8:	ldr	r3, [r7]
   149ec:	ldmib	r7, {r0, r1, r6}
   149f0:	ldr	r5, [r7, #16]
   149f4:	ldr	r4, [r7, #20]
   149f8:	ldr	r7, [r7, #24]
   149fc:	stm	sp, {r0, r1, r6}
   14a00:	str	r5, [sp, #12]
   14a04:	str	r4, [sp, #16]
   14a08:	str	r7, [sp, #20]
   14a0c:	mov	r0, r8
   14a10:	mov	r1, #1
   14a14:	b	14ac0 <__mempcpy_chk@plt+0x3900>
   14a18:	movw	r1, #26315	; 0x66cb
   14a1c:	movt	r1, #1
   14a20:	mov	r0, #0
   14a24:	mov	r2, #5
   14a28:	bl	10fc8 <dcgettext@plt>
   14a2c:	mov	ip, r0
   14a30:	ldr	r3, [r7]
   14a34:	ldr	r0, [r7, #4]
   14a38:	ldr	r1, [r7, #8]
   14a3c:	ldr	r6, [r7, #12]
   14a40:	ldr	r5, [r7, #16]
   14a44:	ldr	r4, [r7, #20]
   14a48:	ldr	r2, [r7, #24]
   14a4c:	ldr	lr, [r7, #28]
   14a50:	ldr	r7, [r7, #32]
   14a54:	stm	sp, {r0, r1, r6}
   14a58:	str	r5, [sp, #12]
   14a5c:	str	r4, [sp, #16]
   14a60:	str	r2, [sp, #20]
   14a64:	str	lr, [sp, #24]
   14a68:	str	r7, [sp, #28]
   14a6c:	b	14ab4 <__mempcpy_chk@plt+0x38f4>
   14a70:	movw	r1, #26267	; 0x669b
   14a74:	movt	r1, #1
   14a78:	mov	r0, #0
   14a7c:	mov	r2, #5
   14a80:	bl	10fc8 <dcgettext@plt>
   14a84:	mov	ip, r0
   14a88:	ldr	r3, [r7]
   14a8c:	ldmib	r7, {r0, r1, r6}
   14a90:	ldr	r5, [r7, #16]
   14a94:	ldr	r4, [r7, #20]
   14a98:	ldr	r2, [r7, #24]
   14a9c:	ldr	r7, [r7, #28]
   14aa0:	stm	sp, {r0, r1, r6}
   14aa4:	str	r5, [sp, #12]
   14aa8:	str	r4, [sp, #16]
   14aac:	str	r2, [sp, #20]
   14ab0:	str	r7, [sp, #24]
   14ab4:	mov	r0, r8
   14ab8:	mov	r1, #1
   14abc:	mov	r2, ip
   14ac0:	bl	11124 <__fprintf_chk@plt>
   14ac4:	sub	sp, fp, #24
   14ac8:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   14acc:	push	{r4, sl, fp, lr}
   14ad0:	add	fp, sp, #8
   14ad4:	sub	sp, sp, #8
   14ad8:	mov	lr, #0
   14adc:	ldr	ip, [fp, #8]
   14ae0:	ldr	r4, [ip, lr, lsl #2]
   14ae4:	add	lr, lr, #1
   14ae8:	cmp	r4, #0
   14aec:	bne	14ae0 <__mempcpy_chk@plt+0x3920>
   14af0:	sub	r4, lr, #1
   14af4:	str	ip, [sp]
   14af8:	str	r4, [sp, #4]
   14afc:	bl	14798 <__mempcpy_chk@plt+0x35d8>
   14b00:	sub	sp, fp, #8
   14b04:	pop	{r4, sl, fp, pc}
   14b08:	push	{r4, r5, fp, lr}
   14b0c:	add	fp, sp, #8
   14b10:	sub	sp, sp, #48	; 0x30
   14b14:	mov	ip, #0
   14b18:	ldr	r4, [fp, #8]
   14b1c:	add	lr, sp, #8
   14b20:	ldr	r5, [r4]
   14b24:	str	r5, [lr, ip, lsl #2]
   14b28:	cmp	r5, #0
   14b2c:	beq	14b44 <__mempcpy_chk@plt+0x3984>
   14b30:	add	ip, ip, #1
   14b34:	add	r4, r4, #4
   14b38:	cmp	ip, #10
   14b3c:	bne	14b20 <__mempcpy_chk@plt+0x3960>
   14b40:	mov	ip, #10
   14b44:	str	lr, [sp]
   14b48:	str	ip, [sp, #4]
   14b4c:	bl	14798 <__mempcpy_chk@plt+0x35d8>
   14b50:	sub	sp, fp, #8
   14b54:	pop	{r4, r5, fp, pc}
   14b58:	push	{fp, lr}
   14b5c:	mov	fp, sp
   14b60:	sub	sp, sp, #8
   14b64:	add	ip, fp, #8
   14b68:	str	ip, [sp, #4]
   14b6c:	str	ip, [sp]
   14b70:	bl	14b08 <__mempcpy_chk@plt+0x3948>
   14b74:	mov	sp, fp
   14b78:	pop	{fp, pc}
   14b7c:	push	{fp, lr}
   14b80:	mov	fp, sp
   14b84:	movw	r0, #29020	; 0x715c
   14b88:	movt	r0, #2
   14b8c:	ldr	r1, [r0]
   14b90:	movw	r0, #25064	; 0x61e8
   14b94:	movt	r0, #1
   14b98:	bl	10f20 <fputs_unlocked@plt>
   14b9c:	movw	r1, #26427	; 0x673b
   14ba0:	movt	r1, #1
   14ba4:	mov	r0, #0
   14ba8:	mov	r2, #5
   14bac:	bl	10fc8 <dcgettext@plt>
   14bb0:	mov	r1, r0
   14bb4:	movw	r2, #26447	; 0x674f
   14bb8:	movt	r2, #1
   14bbc:	mov	r0, #1
   14bc0:	bl	1110c <__printf_chk@plt>
   14bc4:	movw	r1, #26469	; 0x6765
   14bc8:	movt	r1, #1
   14bcc:	mov	r0, #0
   14bd0:	mov	r2, #5
   14bd4:	bl	10fc8 <dcgettext@plt>
   14bd8:	mov	r1, r0
   14bdc:	movw	r2, #24504	; 0x5fb8
   14be0:	movt	r2, #1
   14be4:	movw	r3, #24873	; 0x6129
   14be8:	movt	r3, #1
   14bec:	mov	r0, #1
   14bf0:	bl	1110c <__printf_chk@plt>
   14bf4:	movw	r1, #26489	; 0x6779
   14bf8:	movt	r1, #1
   14bfc:	mov	r0, #0
   14c00:	mov	r2, #5
   14c04:	bl	10fc8 <dcgettext@plt>
   14c08:	mov	r1, r0
   14c0c:	movw	r2, #26528	; 0x67a0
   14c10:	movt	r2, #1
   14c14:	mov	r0, #1
   14c18:	pop	{fp, lr}
   14c1c:	b	1110c <__printf_chk@plt>
   14c20:	b	14c24 <__mempcpy_chk@plt+0x3a64>
   14c24:	push	{r4, r5, r6, sl, fp, lr}
   14c28:	add	fp, sp, #16
   14c2c:	mov	r4, r2
   14c30:	mov	r5, r1
   14c34:	mov	r6, r0
   14c38:	bl	158a8 <__mempcpy_chk@plt+0x46e8>
   14c3c:	cmp	r0, #0
   14c40:	popne	{r4, r5, r6, sl, fp, pc}
   14c44:	cmp	r6, #0
   14c48:	beq	14c5c <__mempcpy_chk@plt+0x3a9c>
   14c4c:	cmp	r5, #0
   14c50:	cmpne	r4, #0
   14c54:	bne	14c5c <__mempcpy_chk@plt+0x3a9c>
   14c58:	pop	{r4, r5, r6, sl, fp, pc}
   14c5c:	bl	14fe8 <__mempcpy_chk@plt+0x3e28>
   14c60:	push	{fp, lr}
   14c64:	mov	fp, sp
   14c68:	bl	1511c <__mempcpy_chk@plt+0x3f5c>
   14c6c:	pop	{fp, lr}
   14c70:	b	14c74 <__mempcpy_chk@plt+0x3ab4>
   14c74:	cmp	r0, #0
   14c78:	bxne	lr
   14c7c:	push	{fp, lr}
   14c80:	mov	fp, sp
   14c84:	bl	14fe8 <__mempcpy_chk@plt+0x3e28>
   14c88:	push	{fp, lr}
   14c8c:	mov	fp, sp
   14c90:	bl	157d8 <__mempcpy_chk@plt+0x4618>
   14c94:	pop	{fp, lr}
   14c98:	b	14c74 <__mempcpy_chk@plt+0x3ab4>
   14c9c:	b	14c60 <__mempcpy_chk@plt+0x3aa0>
   14ca0:	push	{r4, r5, fp, lr}
   14ca4:	add	fp, sp, #8
   14ca8:	mov	r4, r1
   14cac:	mov	r5, r0
   14cb0:	bl	1514c <__mempcpy_chk@plt+0x3f8c>
   14cb4:	cmp	r0, #0
   14cb8:	popne	{r4, r5, fp, pc}
   14cbc:	cmp	r5, #0
   14cc0:	beq	14cd0 <__mempcpy_chk@plt+0x3b10>
   14cc4:	cmp	r4, #0
   14cc8:	bne	14cd0 <__mempcpy_chk@plt+0x3b10>
   14ccc:	pop	{r4, r5, fp, pc}
   14cd0:	bl	14fe8 <__mempcpy_chk@plt+0x3e28>
   14cd4:	push	{fp, lr}
   14cd8:	mov	fp, sp
   14cdc:	bl	157dc <__mempcpy_chk@plt+0x461c>
   14ce0:	pop	{fp, lr}
   14ce4:	b	14c74 <__mempcpy_chk@plt+0x3ab4>
   14ce8:	push	{fp, lr}
   14cec:	mov	fp, sp
   14cf0:	bl	157ec <__mempcpy_chk@plt+0x462c>
   14cf4:	pop	{fp, lr}
   14cf8:	b	14c74 <__mempcpy_chk@plt+0x3ab4>
   14cfc:	mov	r2, r1
   14d00:	mov	r1, r0
   14d04:	mov	r0, #0
   14d08:	b	14c24 <__mempcpy_chk@plt+0x3a64>
   14d0c:	mov	r2, r1
   14d10:	mov	r1, r0
   14d14:	mov	r0, #0
   14d18:	b	14ce8 <__mempcpy_chk@plt+0x3b28>
   14d1c:	mov	r2, #1
   14d20:	b	14d24 <__mempcpy_chk@plt+0x3b64>
   14d24:	push	{r4, r5, fp, lr}
   14d28:	add	fp, sp, #8
   14d2c:	mov	r4, r1
   14d30:	ldr	r5, [r1]
   14d34:	cmp	r0, #0
   14d38:	beq	14d50 <__mempcpy_chk@plt+0x3b90>
   14d3c:	mov	r1, #1
   14d40:	add	r1, r1, r5, lsr #1
   14d44:	adds	r5, r5, r1
   14d48:	bcc	14d68 <__mempcpy_chk@plt+0x3ba8>
   14d4c:	bl	14fe8 <__mempcpy_chk@plt+0x3e28>
   14d50:	cmp	r5, #0
   14d54:	bne	14d68 <__mempcpy_chk@plt+0x3ba8>
   14d58:	mov	r1, #64	; 0x40
   14d5c:	udiv	r5, r1, r2
   14d60:	cmp	r2, #64	; 0x40
   14d64:	addhi	r5, r5, #1
   14d68:	mov	r1, r5
   14d6c:	bl	14c24 <__mempcpy_chk@plt+0x3a64>
   14d70:	str	r5, [r4]
   14d74:	pop	{r4, r5, fp, pc}
   14d78:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   14d7c:	add	fp, sp, #24
   14d80:	mov	r8, r1
   14d84:	ldr	r6, [r1]
   14d88:	add	r1, r6, r6, asr #1
   14d8c:	cmp	r1, r6
   14d90:	mvnvs	r1, #-2147483648	; 0x80000000
   14d94:	cmp	r1, r3
   14d98:	mov	r5, r1
   14d9c:	movgt	r5, r3
   14da0:	cmn	r3, #1
   14da4:	movle	r5, r1
   14da8:	ldr	r4, [fp, #8]
   14dac:	cmn	r4, #1
   14db0:	ble	14dd8 <__mempcpy_chk@plt+0x3c18>
   14db4:	cmp	r4, #0
   14db8:	beq	14e2c <__mempcpy_chk@plt+0x3c6c>
   14dbc:	cmn	r5, #1
   14dc0:	ble	14e00 <__mempcpy_chk@plt+0x3c40>
   14dc4:	mvn	r7, #-2147483648	; 0x80000000
   14dc8:	udiv	r1, r7, r4
   14dcc:	cmp	r1, r5
   14dd0:	bge	14e2c <__mempcpy_chk@plt+0x3c6c>
   14dd4:	b	14e3c <__mempcpy_chk@plt+0x3c7c>
   14dd8:	cmn	r5, #1
   14ddc:	ble	14e1c <__mempcpy_chk@plt+0x3c5c>
   14de0:	cmn	r4, #1
   14de4:	beq	14e2c <__mempcpy_chk@plt+0x3c6c>
   14de8:	mov	r1, #-2147483648	; 0x80000000
   14dec:	sdiv	r1, r1, r4
   14df0:	mvn	r7, #-2147483648	; 0x80000000
   14df4:	cmp	r1, r5
   14df8:	bge	14e2c <__mempcpy_chk@plt+0x3c6c>
   14dfc:	b	14e3c <__mempcpy_chk@plt+0x3c7c>
   14e00:	beq	14e2c <__mempcpy_chk@plt+0x3c6c>
   14e04:	mov	r1, #-2147483648	; 0x80000000
   14e08:	sdiv	r1, r1, r5
   14e0c:	mvn	r7, #-2147483648	; 0x80000000
   14e10:	cmp	r1, r4
   14e14:	bge	14e2c <__mempcpy_chk@plt+0x3c6c>
   14e18:	b	14e3c <__mempcpy_chk@plt+0x3c7c>
   14e1c:	mvn	r7, #-2147483648	; 0x80000000
   14e20:	sdiv	r1, r7, r4
   14e24:	cmp	r5, r1
   14e28:	blt	14e3c <__mempcpy_chk@plt+0x3c7c>
   14e2c:	mul	r1, r5, r4
   14e30:	mov	r7, #64	; 0x40
   14e34:	cmp	r1, #63	; 0x3f
   14e38:	bgt	14e44 <__mempcpy_chk@plt+0x3c84>
   14e3c:	sdiv	r5, r7, r4
   14e40:	mul	r1, r5, r4
   14e44:	cmp	r0, #0
   14e48:	moveq	r7, #0
   14e4c:	streq	r7, [r8]
   14e50:	sub	r7, r5, r6
   14e54:	cmp	r7, r2
   14e58:	bge	14f04 <__mempcpy_chk@plt+0x3d44>
   14e5c:	add	r5, r6, r2
   14e60:	mov	r1, #0
   14e64:	cmp	r5, r3
   14e68:	mov	r2, #0
   14e6c:	movwgt	r2, #1
   14e70:	cmn	r3, #1
   14e74:	movwgt	r1, #1
   14e78:	cmp	r5, r6
   14e7c:	bvs	14eec <__mempcpy_chk@plt+0x3d2c>
   14e80:	ands	r1, r1, r2
   14e84:	bne	14eec <__mempcpy_chk@plt+0x3d2c>
   14e88:	cmn	r4, #1
   14e8c:	ble	14eb4 <__mempcpy_chk@plt+0x3cf4>
   14e90:	cmp	r4, #0
   14e94:	beq	14f00 <__mempcpy_chk@plt+0x3d40>
   14e98:	cmn	r5, #1
   14e9c:	ble	14ed8 <__mempcpy_chk@plt+0x3d18>
   14ea0:	mvn	r1, #-2147483648	; 0x80000000
   14ea4:	udiv	r1, r1, r4
   14ea8:	cmp	r1, r5
   14eac:	bge	14f00 <__mempcpy_chk@plt+0x3d40>
   14eb0:	b	14eec <__mempcpy_chk@plt+0x3d2c>
   14eb4:	cmn	r5, #1
   14eb8:	ble	14ef0 <__mempcpy_chk@plt+0x3d30>
   14ebc:	cmn	r4, #1
   14ec0:	beq	14f00 <__mempcpy_chk@plt+0x3d40>
   14ec4:	mov	r1, #-2147483648	; 0x80000000
   14ec8:	sdiv	r1, r1, r4
   14ecc:	cmp	r1, r5
   14ed0:	bge	14f00 <__mempcpy_chk@plt+0x3d40>
   14ed4:	b	14eec <__mempcpy_chk@plt+0x3d2c>
   14ed8:	beq	14f00 <__mempcpy_chk@plt+0x3d40>
   14edc:	mov	r1, #-2147483648	; 0x80000000
   14ee0:	sdiv	r1, r1, r5
   14ee4:	cmp	r1, r4
   14ee8:	bge	14f00 <__mempcpy_chk@plt+0x3d40>
   14eec:	bl	14fe8 <__mempcpy_chk@plt+0x3e28>
   14ef0:	mvn	r1, #-2147483648	; 0x80000000
   14ef4:	sdiv	r1, r1, r4
   14ef8:	cmp	r5, r1
   14efc:	blt	14eec <__mempcpy_chk@plt+0x3d2c>
   14f00:	mul	r1, r5, r4
   14f04:	bl	14ca0 <__mempcpy_chk@plt+0x3ae0>
   14f08:	str	r5, [r8]
   14f0c:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   14f10:	mov	r1, #1
   14f14:	b	14f18 <__mempcpy_chk@plt+0x3d58>
   14f18:	push	{fp, lr}
   14f1c:	mov	fp, sp
   14f20:	bl	150c8 <__mempcpy_chk@plt+0x3f08>
   14f24:	pop	{fp, lr}
   14f28:	b	14c74 <__mempcpy_chk@plt+0x3ab4>
   14f2c:	mov	r1, #1
   14f30:	b	14f34 <__mempcpy_chk@plt+0x3d74>
   14f34:	push	{fp, lr}
   14f38:	mov	fp, sp
   14f3c:	bl	157e8 <__mempcpy_chk@plt+0x4628>
   14f40:	pop	{fp, lr}
   14f44:	b	14c74 <__mempcpy_chk@plt+0x3ab4>
   14f48:	push	{r4, r5, fp, lr}
   14f4c:	add	fp, sp, #8
   14f50:	mov	r4, r1
   14f54:	mov	r5, r0
   14f58:	mov	r0, r1
   14f5c:	bl	14c60 <__mempcpy_chk@plt+0x3aa0>
   14f60:	mov	r1, r5
   14f64:	mov	r2, r4
   14f68:	pop	{r4, r5, fp, lr}
   14f6c:	b	10f8c <memcpy@plt>
   14f70:	push	{r4, r5, fp, lr}
   14f74:	add	fp, sp, #8
   14f78:	mov	r4, r1
   14f7c:	mov	r5, r0
   14f80:	mov	r0, r1
   14f84:	bl	14c88 <__mempcpy_chk@plt+0x3ac8>
   14f88:	mov	r1, r5
   14f8c:	mov	r2, r4
   14f90:	pop	{r4, r5, fp, lr}
   14f94:	b	10f8c <memcpy@plt>
   14f98:	push	{r4, r5, fp, lr}
   14f9c:	add	fp, sp, #8
   14fa0:	mov	r4, r1
   14fa4:	mov	r5, r0
   14fa8:	add	r0, r1, #1
   14fac:	bl	14c88 <__mempcpy_chk@plt+0x3ac8>
   14fb0:	mov	r1, #0
   14fb4:	strb	r1, [r0, r4]
   14fb8:	mov	r1, r5
   14fbc:	mov	r2, r4
   14fc0:	pop	{r4, r5, fp, lr}
   14fc4:	b	10f8c <memcpy@plt>
   14fc8:	push	{r4, sl, fp, lr}
   14fcc:	add	fp, sp, #8
   14fd0:	mov	r4, r0
   14fd4:	bl	110c4 <strlen@plt>
   14fd8:	add	r1, r0, #1
   14fdc:	mov	r0, r4
   14fe0:	pop	{r4, sl, fp, lr}
   14fe4:	b	14f48 <__mempcpy_chk@plt+0x3d88>
   14fe8:	push	{fp, lr}
   14fec:	mov	fp, sp
   14ff0:	movw	r0, #28932	; 0x7104
   14ff4:	movt	r0, #2
   14ff8:	ldr	r4, [r0]
   14ffc:	movw	r1, #26604	; 0x67ec
   15000:	movt	r1, #1
   15004:	mov	r0, #0
   15008:	mov	r2, #5
   1500c:	bl	10fc8 <dcgettext@plt>
   15010:	mov	r3, r0
   15014:	movw	r2, #24667	; 0x605b
   15018:	movt	r2, #1
   1501c:	mov	r0, r4
   15020:	mov	r1, #0
   15024:	bl	1104c <error@plt>
   15028:	bl	111a8 <abort@plt>
   1502c:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   15030:	add	fp, sp, #24
   15034:	sub	sp, sp, #8
   15038:	mov	r4, r3
   1503c:	mov	r8, r2
   15040:	mov	r9, r1
   15044:	mov	r5, r0
   15048:	bl	110dc <__errno_location@plt>
   1504c:	mov	r7, r0
   15050:	mov	r6, #0
   15054:	str	r6, [r0]
   15058:	add	r1, sp, #4
   1505c:	mov	r0, r5
   15060:	blx	r4
   15064:	ldr	r0, [sp, #4]
   15068:	cmp	r0, r5
   1506c:	beq	150ac <__mempcpy_chk@plt+0x3eec>
   15070:	cmp	r9, #0
   15074:	beq	15094 <__mempcpy_chk@plt+0x3ed4>
   15078:	vcmp.f64	d0, #0.0
   1507c:	vmrs	APSR_nzcv, fpscr
   15080:	beq	150a8 <__mempcpy_chk@plt+0x3ee8>
   15084:	ldr	r0, [r7]
   15088:	subs	r6, r0, #34	; 0x22
   1508c:	movwne	r6, #1
   15090:	b	150ac <__mempcpy_chk@plt+0x3eec>
   15094:	ldrb	r0, [r0]
   15098:	mov	r6, #0
   1509c:	cmp	r0, #0
   150a0:	bne	150b8 <__mempcpy_chk@plt+0x3ef8>
   150a4:	b	15078 <__mempcpy_chk@plt+0x3eb8>
   150a8:	mov	r6, #1
   150ac:	cmp	r9, #0
   150b0:	ldrne	r0, [sp, #4]
   150b4:	strne	r0, [r9]
   150b8:	vstr	d0, [r8]
   150bc:	mov	r0, r6
   150c0:	sub	sp, fp, #24
   150c4:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   150c8:	clz	r2, r1
   150cc:	lsr	r2, r2, #5
   150d0:	clz	r3, r0
   150d4:	lsr	r3, r3, #5
   150d8:	orrs	r2, r3, r2
   150dc:	movwne	r1, #1
   150e0:	movwne	r0, #1
   150e4:	cmp	r1, #0
   150e8:	beq	15118 <__mempcpy_chk@plt+0x3f58>
   150ec:	mvn	r2, #-2147483648	; 0x80000000
   150f0:	udiv	r2, r2, r1
   150f4:	cmp	r2, r0
   150f8:	bcs	15118 <__mempcpy_chk@plt+0x3f58>
   150fc:	push	{fp, lr}
   15100:	mov	fp, sp
   15104:	bl	110dc <__errno_location@plt>
   15108:	mov	r1, #12
   1510c:	str	r1, [r0]
   15110:	mov	r0, #0
   15114:	pop	{fp, pc}
   15118:	b	10f14 <calloc@plt>
   1511c:	cmp	r0, #0
   15120:	movweq	r0, #1
   15124:	cmn	r0, #1
   15128:	ble	15130 <__mempcpy_chk@plt+0x3f70>
   1512c:	b	11064 <malloc@plt>
   15130:	push	{fp, lr}
   15134:	mov	fp, sp
   15138:	bl	110dc <__errno_location@plt>
   1513c:	mov	r1, #12
   15140:	str	r1, [r0]
   15144:	mov	r0, #0
   15148:	pop	{fp, pc}
   1514c:	push	{fp, lr}
   15150:	mov	fp, sp
   15154:	cmp	r0, #0
   15158:	beq	15174 <__mempcpy_chk@plt+0x3fb4>
   1515c:	cmp	r1, #0
   15160:	beq	15180 <__mempcpy_chk@plt+0x3fc0>
   15164:	cmn	r1, #1
   15168:	ble	1518c <__mempcpy_chk@plt+0x3fcc>
   1516c:	pop	{fp, lr}
   15170:	b	10fd4 <realloc@plt>
   15174:	mov	r0, r1
   15178:	pop	{fp, lr}
   1517c:	b	1511c <__mempcpy_chk@plt+0x3f5c>
   15180:	bl	12b64 <__mempcpy_chk@plt+0x19a4>
   15184:	mov	r0, #0
   15188:	pop	{fp, pc}
   1518c:	bl	110dc <__errno_location@plt>
   15190:	mov	r1, #12
   15194:	str	r1, [r0]
   15198:	mov	r0, #0
   1519c:	pop	{fp, pc}
   151a0:	mov	r1, r0
   151a4:	sub	r2, r0, #65	; 0x41
   151a8:	mov	r0, #1
   151ac:	cmp	r2, #26
   151b0:	subcs	r2, r1, #97	; 0x61
   151b4:	cmpcs	r2, #26
   151b8:	bcs	151c0 <__mempcpy_chk@plt+0x4000>
   151bc:	bx	lr
   151c0:	sub	r1, r1, #48	; 0x30
   151c4:	cmp	r1, #10
   151c8:	movcs	r0, #0
   151cc:	bx	lr
   151d0:	mov	r1, r0
   151d4:	sub	r2, r0, #65	; 0x41
   151d8:	mov	r0, #1
   151dc:	cmp	r2, #26
   151e0:	subcs	r1, r1, #97	; 0x61
   151e4:	cmpcs	r1, #26
   151e8:	movcs	r0, #0
   151ec:	bx	lr
   151f0:	mov	r1, #0
   151f4:	cmp	r0, #128	; 0x80
   151f8:	movwcc	r1, #1
   151fc:	mov	r0, r1
   15200:	bx	lr
   15204:	sub	r1, r0, #9
   15208:	clz	r1, r1
   1520c:	lsr	r1, r1, #5
   15210:	sub	r0, r0, #32
   15214:	clz	r0, r0
   15218:	lsr	r0, r0, #5
   1521c:	orr	r0, r0, r1
   15220:	bx	lr
   15224:	mov	r1, r0
   15228:	mov	r0, #1
   1522c:	cmp	r1, #32
   15230:	bxcc	lr
   15234:	cmp	r1, #127	; 0x7f
   15238:	movne	r0, #0
   1523c:	bx	lr
   15240:	sub	r1, r0, #48	; 0x30
   15244:	mov	r0, #0
   15248:	cmp	r1, #10
   1524c:	movwcc	r0, #1
   15250:	bx	lr
   15254:	sub	r1, r0, #33	; 0x21
   15258:	mov	r0, #0
   1525c:	cmp	r1, #94	; 0x5e
   15260:	movwcc	r0, #1
   15264:	bx	lr
   15268:	sub	r1, r0, #97	; 0x61
   1526c:	mov	r0, #0
   15270:	cmp	r1, #26
   15274:	movwcc	r0, #1
   15278:	bx	lr
   1527c:	sub	r1, r0, #32
   15280:	mov	r0, #0
   15284:	cmp	r1, #95	; 0x5f
   15288:	movwcc	r0, #1
   1528c:	bx	lr
   15290:	sub	r1, r0, #33	; 0x21
   15294:	cmp	r1, #93	; 0x5d
   15298:	bhi	15424 <__mempcpy_chk@plt+0x4264>
   1529c:	mov	r0, #1
   152a0:	add	r2, pc, #0
   152a4:	ldr	pc, [r2, r1, lsl #2]
   152a8:	andeq	r5, r1, r0, lsr #8
   152ac:	andeq	r5, r1, r0, lsr #8
   152b0:	andeq	r5, r1, r0, lsr #8
   152b4:	andeq	r5, r1, r0, lsr #8
   152b8:	andeq	r5, r1, r0, lsr #8
   152bc:	andeq	r5, r1, r0, lsr #8
   152c0:	andeq	r5, r1, r0, lsr #8
   152c4:	andeq	r5, r1, r0, lsr #8
   152c8:	andeq	r5, r1, r0, lsr #8
   152cc:	andeq	r5, r1, r0, lsr #8
   152d0:	andeq	r5, r1, r0, lsr #8
   152d4:	andeq	r5, r1, r0, lsr #8
   152d8:	andeq	r5, r1, r0, lsr #8
   152dc:	andeq	r5, r1, r0, lsr #8
   152e0:	andeq	r5, r1, r0, lsr #8
   152e4:	andeq	r5, r1, r4, lsr #8
   152e8:	andeq	r5, r1, r4, lsr #8
   152ec:	andeq	r5, r1, r4, lsr #8
   152f0:	andeq	r5, r1, r4, lsr #8
   152f4:	andeq	r5, r1, r4, lsr #8
   152f8:	andeq	r5, r1, r4, lsr #8
   152fc:	andeq	r5, r1, r4, lsr #8
   15300:	andeq	r5, r1, r4, lsr #8
   15304:	andeq	r5, r1, r4, lsr #8
   15308:	andeq	r5, r1, r4, lsr #8
   1530c:	andeq	r5, r1, r0, lsr #8
   15310:	andeq	r5, r1, r0, lsr #8
   15314:	andeq	r5, r1, r0, lsr #8
   15318:	andeq	r5, r1, r0, lsr #8
   1531c:	andeq	r5, r1, r0, lsr #8
   15320:	andeq	r5, r1, r0, lsr #8
   15324:	andeq	r5, r1, r0, lsr #8
   15328:	andeq	r5, r1, r4, lsr #8
   1532c:	andeq	r5, r1, r4, lsr #8
   15330:	andeq	r5, r1, r4, lsr #8
   15334:	andeq	r5, r1, r4, lsr #8
   15338:	andeq	r5, r1, r4, lsr #8
   1533c:	andeq	r5, r1, r4, lsr #8
   15340:	andeq	r5, r1, r4, lsr #8
   15344:	andeq	r5, r1, r4, lsr #8
   15348:	andeq	r5, r1, r4, lsr #8
   1534c:	andeq	r5, r1, r4, lsr #8
   15350:	andeq	r5, r1, r4, lsr #8
   15354:	andeq	r5, r1, r4, lsr #8
   15358:	andeq	r5, r1, r4, lsr #8
   1535c:	andeq	r5, r1, r4, lsr #8
   15360:	andeq	r5, r1, r4, lsr #8
   15364:	andeq	r5, r1, r4, lsr #8
   15368:	andeq	r5, r1, r4, lsr #8
   1536c:	andeq	r5, r1, r4, lsr #8
   15370:	andeq	r5, r1, r4, lsr #8
   15374:	andeq	r5, r1, r4, lsr #8
   15378:	andeq	r5, r1, r4, lsr #8
   1537c:	andeq	r5, r1, r4, lsr #8
   15380:	andeq	r5, r1, r4, lsr #8
   15384:	andeq	r5, r1, r4, lsr #8
   15388:	andeq	r5, r1, r4, lsr #8
   1538c:	andeq	r5, r1, r4, lsr #8
   15390:	andeq	r5, r1, r0, lsr #8
   15394:	andeq	r5, r1, r0, lsr #8
   15398:	andeq	r5, r1, r0, lsr #8
   1539c:	andeq	r5, r1, r0, lsr #8
   153a0:	andeq	r5, r1, r0, lsr #8
   153a4:	andeq	r5, r1, r0, lsr #8
   153a8:	andeq	r5, r1, r4, lsr #8
   153ac:	andeq	r5, r1, r4, lsr #8
   153b0:	andeq	r5, r1, r4, lsr #8
   153b4:	andeq	r5, r1, r4, lsr #8
   153b8:	andeq	r5, r1, r4, lsr #8
   153bc:	andeq	r5, r1, r4, lsr #8
   153c0:	andeq	r5, r1, r4, lsr #8
   153c4:	andeq	r5, r1, r4, lsr #8
   153c8:	andeq	r5, r1, r4, lsr #8
   153cc:	andeq	r5, r1, r4, lsr #8
   153d0:	andeq	r5, r1, r4, lsr #8
   153d4:	andeq	r5, r1, r4, lsr #8
   153d8:	andeq	r5, r1, r4, lsr #8
   153dc:	andeq	r5, r1, r4, lsr #8
   153e0:	andeq	r5, r1, r4, lsr #8
   153e4:	andeq	r5, r1, r4, lsr #8
   153e8:	andeq	r5, r1, r4, lsr #8
   153ec:	andeq	r5, r1, r4, lsr #8
   153f0:	andeq	r5, r1, r4, lsr #8
   153f4:	andeq	r5, r1, r4, lsr #8
   153f8:	andeq	r5, r1, r4, lsr #8
   153fc:	andeq	r5, r1, r4, lsr #8
   15400:	andeq	r5, r1, r4, lsr #8
   15404:	andeq	r5, r1, r4, lsr #8
   15408:	andeq	r5, r1, r4, lsr #8
   1540c:	andeq	r5, r1, r4, lsr #8
   15410:	andeq	r5, r1, r0, lsr #8
   15414:	andeq	r5, r1, r0, lsr #8
   15418:	andeq	r5, r1, r0, lsr #8
   1541c:	andeq	r5, r1, r0, lsr #8
   15420:	bx	lr
   15424:	mov	r0, #0
   15428:	bx	lr
   1542c:	sub	r0, r0, #9
   15430:	cmp	r0, #23
   15434:	movhi	r0, #0
   15438:	bxhi	lr
   1543c:	bic	r0, r0, #-16777216	; 0xff000000
   15440:	movw	r1, #31
   15444:	movt	r1, #128	; 0x80
   15448:	mov	r2, #1
   1544c:	and	r0, r2, r1, lsr r0
   15450:	bx	lr
   15454:	sub	r1, r0, #65	; 0x41
   15458:	mov	r0, #0
   1545c:	cmp	r1, #26
   15460:	movwcc	r0, #1
   15464:	bx	lr
   15468:	mov	r1, r0
   1546c:	sub	r2, r0, #48	; 0x30
   15470:	mov	r0, #1
   15474:	cmp	r2, #22
   15478:	bhi	15490 <__mempcpy_chk@plt+0x42d0>
   1547c:	mov	ip, #1
   15480:	movw	r3, #1023	; 0x3ff
   15484:	movt	r3, #126	; 0x7e
   15488:	tst	r3, ip, lsl r2
   1548c:	bxne	lr
   15490:	sub	r1, r1, #97	; 0x61
   15494:	cmp	r1, #6
   15498:	movcs	r0, #0
   1549c:	bxcs	lr
   154a0:	bx	lr
   154a4:	sub	r1, r0, #65	; 0x41
   154a8:	cmp	r1, #26
   154ac:	addcc	r0, r0, #32
   154b0:	bx	lr
   154b4:	sub	r1, r0, #97	; 0x61
   154b8:	cmp	r1, #26
   154bc:	subcc	r0, r0, #32
   154c0:	bx	lr
   154c4:	push	{r4, r5, r6, sl, fp, lr}
   154c8:	add	fp, sp, #16
   154cc:	vpush	{d8}
   154d0:	mov	r4, r1
   154d4:	mov	r5, r0
   154d8:	bl	15544 <__mempcpy_chk@plt+0x4384>
   154dc:	cmp	r0, #0
   154e0:	beq	15528 <__mempcpy_chk@plt+0x4368>
   154e4:	bl	10f2c <uselocale@plt>
   154e8:	cmp	r0, #0
   154ec:	beq	15528 <__mempcpy_chk@plt+0x4368>
   154f0:	mov	r6, r0
   154f4:	mov	r0, r5
   154f8:	mov	r1, r4
   154fc:	bl	10fa4 <strtold@plt>
   15500:	vorr	d8, d0, d0
   15504:	bl	110dc <__errno_location@plt>
   15508:	mov	r4, r0
   1550c:	ldr	r5, [r0]
   15510:	mov	r0, r6
   15514:	bl	10f2c <uselocale@plt>
   15518:	cmp	r0, #0
   1551c:	beq	15540 <__mempcpy_chk@plt+0x4380>
   15520:	str	r5, [r4]
   15524:	b	15534 <__mempcpy_chk@plt+0x4374>
   15528:	vmov.i32	d8, #0	; 0x00000000
   1552c:	cmp	r4, #0
   15530:	strne	r5, [r4]
   15534:	vorr	d0, d8, d8
   15538:	vpop	{d8}
   1553c:	pop	{r4, r5, r6, sl, fp, pc}
   15540:	bl	111a8 <abort@plt>
   15544:	push	{r4, sl, fp, lr}
   15548:	add	fp, sp, #8
   1554c:	movw	r4, #29384	; 0x72c8
   15550:	movt	r4, #2
   15554:	ldr	r0, [r4]
   15558:	cmp	r0, #0
   1555c:	beq	15568 <__mempcpy_chk@plt+0x43a8>
   15560:	ldr	r0, [r4]
   15564:	pop	{r4, sl, fp, pc}
   15568:	movw	r1, #25374	; 0x631e
   1556c:	movt	r1, #1
   15570:	movw	r0, #8127	; 0x1fbf
   15574:	mov	r2, #0
   15578:	bl	11178 <newlocale@plt>
   1557c:	str	r0, [r4]
   15580:	ldr	r0, [r4]
   15584:	pop	{r4, sl, fp, pc}
   15588:	push	{r4, r5, r6, sl, fp, lr}
   1558c:	add	fp, sp, #16
   15590:	mov	r4, r0
   15594:	bl	11028 <__fpending@plt>
   15598:	mov	r5, r0
   1559c:	mov	r0, r4
   155a0:	bl	11034 <ferror_unlocked@plt>
   155a4:	mov	r6, r0
   155a8:	mov	r0, r4
   155ac:	bl	1560c <__mempcpy_chk@plt+0x444c>
   155b0:	cmp	r6, #0
   155b4:	beq	155d8 <__mempcpy_chk@plt+0x4418>
   155b8:	mvn	r4, #0
   155bc:	cmp	r0, #0
   155c0:	bne	15604 <__mempcpy_chk@plt+0x4444>
   155c4:	bl	110dc <__errno_location@plt>
   155c8:	mov	r1, #0
   155cc:	str	r1, [r0]
   155d0:	mov	r0, r4
   155d4:	pop	{r4, r5, r6, sl, fp, pc}
   155d8:	cmp	r0, #0
   155dc:	mov	r4, r0
   155e0:	mvnne	r4, #0
   155e4:	cmp	r5, #0
   155e8:	bne	15604 <__mempcpy_chk@plt+0x4444>
   155ec:	cmp	r0, #0
   155f0:	beq	15604 <__mempcpy_chk@plt+0x4444>
   155f4:	bl	110dc <__errno_location@plt>
   155f8:	ldr	r0, [r0]
   155fc:	subs	r4, r0, #9
   15600:	mvnne	r4, #0
   15604:	mov	r0, r4
   15608:	pop	{r4, r5, r6, sl, fp, pc}
   1560c:	push	{r4, r5, fp, lr}
   15610:	add	fp, sp, #8
   15614:	sub	sp, sp, #8
   15618:	mov	r4, r0
   1561c:	bl	11118 <fileno@plt>
   15620:	cmn	r0, #1
   15624:	ble	1569c <__mempcpy_chk@plt+0x44dc>
   15628:	mov	r0, r4
   1562c:	bl	1107c <__freading@plt>
   15630:	cmp	r0, #0
   15634:	beq	15660 <__mempcpy_chk@plt+0x44a0>
   15638:	mov	r0, r4
   1563c:	bl	11118 <fileno@plt>
   15640:	mov	r1, #1
   15644:	str	r1, [sp]
   15648:	mov	r2, #0
   1564c:	mov	r3, #0
   15650:	bl	11004 <lseek64@plt>
   15654:	and	r0, r0, r1
   15658:	cmn	r0, #1
   1565c:	beq	1569c <__mempcpy_chk@plt+0x44dc>
   15660:	mov	r0, r4
   15664:	bl	156ac <__mempcpy_chk@plt+0x44ec>
   15668:	cmp	r0, #0
   1566c:	beq	1569c <__mempcpy_chk@plt+0x44dc>
   15670:	bl	110dc <__errno_location@plt>
   15674:	ldr	r5, [r0]
   15678:	mov	r0, r4
   1567c:	bl	1113c <fclose@plt>
   15680:	cmp	r5, #0
   15684:	beq	15694 <__mempcpy_chk@plt+0x44d4>
   15688:	bl	110dc <__errno_location@plt>
   1568c:	str	r5, [r0]
   15690:	mvn	r0, #0
   15694:	sub	sp, fp, #8
   15698:	pop	{r4, r5, fp, pc}
   1569c:	mov	r0, r4
   156a0:	sub	sp, fp, #8
   156a4:	pop	{r4, r5, fp, lr}
   156a8:	b	1113c <fclose@plt>
   156ac:	push	{r4, sl, fp, lr}
   156b0:	add	fp, sp, #8
   156b4:	mov	r4, r0
   156b8:	cmp	r0, #0
   156bc:	beq	156d4 <__mempcpy_chk@plt+0x4514>
   156c0:	mov	r0, r4
   156c4:	bl	1107c <__freading@plt>
   156c8:	cmp	r0, #0
   156cc:	movne	r0, r4
   156d0:	blne	156e0 <__mempcpy_chk@plt+0x4520>
   156d4:	mov	r0, r4
   156d8:	pop	{r4, sl, fp, lr}
   156dc:	b	10f5c <fflush@plt>
   156e0:	push	{fp, lr}
   156e4:	mov	fp, sp
   156e8:	sub	sp, sp, #8
   156ec:	ldrb	r1, [r0, #1]
   156f0:	tst	r1, #1
   156f4:	beq	1570c <__mempcpy_chk@plt+0x454c>
   156f8:	mov	r1, #1
   156fc:	str	r1, [sp]
   15700:	mov	r2, #0
   15704:	mov	r3, #0
   15708:	bl	15714 <__mempcpy_chk@plt+0x4554>
   1570c:	mov	sp, fp
   15710:	pop	{fp, pc}
   15714:	push	{r4, r5, r6, r7, fp, lr}
   15718:	add	fp, sp, #16
   1571c:	sub	sp, sp, #8
   15720:	mov	r5, r3
   15724:	mov	r6, r2
   15728:	mov	r4, r0
   1572c:	ldr	r0, [r0, #4]
   15730:	ldr	r1, [r4, #8]
   15734:	cmp	r1, r0
   15738:	bne	15754 <__mempcpy_chk@plt+0x4594>
   1573c:	ldrd	r0, [r4, #16]
   15740:	cmp	r1, r0
   15744:	bne	15754 <__mempcpy_chk@plt+0x4594>
   15748:	ldr	r0, [r4, #36]	; 0x24
   1574c:	cmp	r0, #0
   15750:	beq	1576c <__mempcpy_chk@plt+0x45ac>
   15754:	mov	r0, r4
   15758:	mov	r2, r6
   1575c:	mov	r3, r5
   15760:	sub	sp, fp, #16
   15764:	pop	{r4, r5, r6, r7, fp, lr}
   15768:	b	11148 <fseeko64@plt>
   1576c:	ldr	r7, [fp, #8]
   15770:	mov	r0, r4
   15774:	bl	11118 <fileno@plt>
   15778:	str	r7, [sp]
   1577c:	mov	r2, r6
   15780:	mov	r3, r5
   15784:	bl	11004 <lseek64@plt>
   15788:	and	r2, r0, r1
   1578c:	cmn	r2, #1
   15790:	beq	157b0 <__mempcpy_chk@plt+0x45f0>
   15794:	strd	r0, [r4, #80]	; 0x50
   15798:	ldr	r0, [r4]
   1579c:	bic	r0, r0, #16
   157a0:	str	r0, [r4]
   157a4:	mov	r0, #0
   157a8:	sub	sp, fp, #16
   157ac:	pop	{r4, r5, r6, r7, fp, pc}
   157b0:	mvn	r0, #0
   157b4:	sub	sp, fp, #16
   157b8:	pop	{r4, r5, r6, r7, fp, pc}
   157bc:	push	{fp, lr}
   157c0:	mov	fp, sp
   157c4:	bl	110dc <__errno_location@plt>
   157c8:	mov	r1, #12
   157cc:	str	r1, [r0]
   157d0:	mov	r0, #0
   157d4:	pop	{fp, pc}
   157d8:	b	1511c <__mempcpy_chk@plt+0x3f5c>
   157dc:	cmp	r1, #0
   157e0:	orreq	r1, r1, #1
   157e4:	b	1514c <__mempcpy_chk@plt+0x3f8c>
   157e8:	b	150c8 <__mempcpy_chk@plt+0x3f08>
   157ec:	clz	r3, r2
   157f0:	lsr	ip, r3, #5
   157f4:	clz	r3, r1
   157f8:	lsr	r3, r3, #5
   157fc:	orrs	r3, r3, ip
   15800:	movwne	r1, #1
   15804:	movwne	r2, #1
   15808:	b	158a8 <__mempcpy_chk@plt+0x46e8>
   1580c:	push	{fp, lr}
   15810:	mov	fp, sp
   15814:	mov	r0, #14
   15818:	bl	1116c <nl_langinfo@plt>
   1581c:	movw	r1, #25065	; 0x61e9
   15820:	movt	r1, #1
   15824:	cmp	r0, #0
   15828:	movne	r1, r0
   1582c:	ldrb	r2, [r1]
   15830:	movw	r0, #26621	; 0x67fd
   15834:	movt	r0, #1
   15838:	cmp	r2, #0
   1583c:	movne	r0, r1
   15840:	pop	{fp, pc}
   15844:	push	{r4, r5, r6, r7, fp, lr}
   15848:	add	fp, sp, #16
   1584c:	sub	sp, sp, #8
   15850:	mov	r7, r2
   15854:	mov	r4, r1
   15858:	add	r5, sp, #4
   1585c:	cmp	r0, #0
   15860:	movne	r5, r0
   15864:	mov	r0, r5
   15868:	bl	11040 <mbrtowc@plt>
   1586c:	mov	r6, r0
   15870:	cmp	r7, #0
   15874:	beq	1589c <__mempcpy_chk@plt+0x46dc>
   15878:	cmn	r6, #2
   1587c:	bcc	1589c <__mempcpy_chk@plt+0x46dc>
   15880:	mov	r0, #0
   15884:	bl	158e4 <__mempcpy_chk@plt+0x4724>
   15888:	cmp	r0, #0
   1588c:	bne	1589c <__mempcpy_chk@plt+0x46dc>
   15890:	ldrb	r0, [r4]
   15894:	str	r0, [r5]
   15898:	mov	r6, #1
   1589c:	mov	r0, r6
   158a0:	sub	sp, fp, #16
   158a4:	pop	{r4, r5, r6, r7, fp, pc}
   158a8:	cmp	r2, #0
   158ac:	beq	158dc <__mempcpy_chk@plt+0x471c>
   158b0:	mvn	r3, #0
   158b4:	udiv	r3, r3, r2
   158b8:	cmp	r3, r1
   158bc:	bcs	158dc <__mempcpy_chk@plt+0x471c>
   158c0:	push	{fp, lr}
   158c4:	mov	fp, sp
   158c8:	bl	110dc <__errno_location@plt>
   158cc:	mov	r1, #12
   158d0:	str	r1, [r0]
   158d4:	mov	r0, #0
   158d8:	pop	{fp, pc}
   158dc:	mul	r1, r2, r1
   158e0:	b	1514c <__mempcpy_chk@plt+0x3f8c>
   158e4:	push	{r4, sl, fp, lr}
   158e8:	add	fp, sp, #8
   158ec:	sub	sp, sp, #264	; 0x108
   158f0:	add	r1, sp, #7
   158f4:	movw	r2, #257	; 0x101
   158f8:	bl	15950 <__mempcpy_chk@plt+0x4790>
   158fc:	mov	r4, #0
   15900:	cmp	r0, #0
   15904:	bne	15944 <__mempcpy_chk@plt+0x4784>
   15908:	add	r0, sp, #7
   1590c:	movw	r1, #25374	; 0x631e
   15910:	movt	r1, #1
   15914:	mov	r2, #2
   15918:	bl	110b8 <bcmp@plt>
   1591c:	cmp	r0, #0
   15920:	beq	15944 <__mempcpy_chk@plt+0x4784>
   15924:	add	r0, sp, #7
   15928:	movw	r1, #26627	; 0x6803
   1592c:	movt	r1, #1
   15930:	mov	r2, #6
   15934:	bl	110b8 <bcmp@plt>
   15938:	mov	r4, r0
   1593c:	cmp	r0, #0
   15940:	movwne	r4, #1
   15944:	mov	r0, r4
   15948:	sub	sp, fp, #8
   1594c:	pop	{r4, sl, fp, pc}
   15950:	b	15954 <__mempcpy_chk@plt+0x4794>
   15954:	push	{r4, r5, r6, r7, fp, lr}
   15958:	add	fp, sp, #16
   1595c:	mov	r6, r2
   15960:	mov	r4, r1
   15964:	bl	159ec <__mempcpy_chk@plt+0x482c>
   15968:	cmp	r0, #0
   1596c:	beq	1599c <__mempcpy_chk@plt+0x47dc>
   15970:	mov	r7, r0
   15974:	bl	110c4 <strlen@plt>
   15978:	cmp	r0, r6
   1597c:	bcs	159b8 <__mempcpy_chk@plt+0x47f8>
   15980:	add	r2, r0, #1
   15984:	mov	r0, r4
   15988:	mov	r1, r7
   1598c:	bl	10f8c <memcpy@plt>
   15990:	mov	r5, #0
   15994:	mov	r0, r5
   15998:	pop	{r4, r5, r6, r7, fp, pc}
   1599c:	mov	r5, #22
   159a0:	cmp	r6, #0
   159a4:	beq	159e0 <__mempcpy_chk@plt+0x4820>
   159a8:	mov	r0, #0
   159ac:	strb	r0, [r4]
   159b0:	mov	r0, r5
   159b4:	pop	{r4, r5, r6, r7, fp, pc}
   159b8:	mov	r5, #34	; 0x22
   159bc:	cmp	r6, #0
   159c0:	beq	159e0 <__mempcpy_chk@plt+0x4820>
   159c4:	sub	r6, r6, #1
   159c8:	mov	r0, r4
   159cc:	mov	r1, r7
   159d0:	mov	r2, r6
   159d4:	bl	10f8c <memcpy@plt>
   159d8:	mov	r0, #0
   159dc:	strb	r0, [r4, r6]
   159e0:	mov	r0, r5
   159e4:	pop	{r4, r5, r6, r7, fp, pc}
   159e8:	b	159ec <__mempcpy_chk@plt+0x482c>
   159ec:	mov	r1, #0
   159f0:	b	11154 <setlocale@plt>
   159f4:	andeq	r0, r0, r0
   159f8:	vmov	d6, r0, r1
   159fc:	vldr	d7, [pc, #36]	; 15a28 <__mempcpy_chk@plt+0x4868>
   15a00:	vldr	d5, [pc, #40]	; 15a30 <__mempcpy_chk@plt+0x4870>
   15a04:	vmul.f64	d7, d6, d7
   15a08:	vcvt.u32.f64	s14, d7
   15a0c:	vcvt.f64.u32	d4, s14
   15a10:	vmov	r1, s14
   15a14:	vmls.f64	d6, d4, d5
   15a18:	vcvt.u32.f64	s15, d6
   15a1c:	vmov	r0, s15
   15a20:	bx	lr
   15a24:	nop			; (mov r0, r0)
   15a28:	andeq	r0, r0, r0
   15a2c:	ldclcc	0, cr0, [r0]
   15a30:	andeq	r0, r0, r0
   15a34:	mvnsmi	r0, r0
   15a38:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   15a3c:	mov	r7, r0
   15a40:	ldr	r6, [pc, #72]	; 15a90 <__mempcpy_chk@plt+0x48d0>
   15a44:	ldr	r5, [pc, #72]	; 15a94 <__mempcpy_chk@plt+0x48d4>
   15a48:	add	r6, pc, r6
   15a4c:	add	r5, pc, r5
   15a50:	sub	r6, r6, r5
   15a54:	mov	r8, r1
   15a58:	mov	r9, r2
   15a5c:	bl	10ef4 <calloc@plt-0x20>
   15a60:	asrs	r6, r6, #2
   15a64:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   15a68:	mov	r4, #0
   15a6c:	add	r4, r4, #1
   15a70:	ldr	r3, [r5], #4
   15a74:	mov	r2, r9
   15a78:	mov	r1, r8
   15a7c:	mov	r0, r7
   15a80:	blx	r3
   15a84:	cmp	r6, r4
   15a88:	bne	15a6c <__mempcpy_chk@plt+0x48ac>
   15a8c:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   15a90:			; <UNDEFINED> instruction: 0x000114bc
   15a94:			; <UNDEFINED> instruction: 0x000114b4
   15a98:	bx	lr
   15a9c:	ldr	r3, [pc, #12]	; 15ab0 <__mempcpy_chk@plt+0x48f0>
   15aa0:	mov	r1, #0
   15aa4:	add	r3, pc, r3
   15aa8:	ldr	r2, [r3]
   15aac:	b	110f4 <__cxa_atexit@plt>
   15ab0:	andeq	r1, r1, r0, asr r6

Disassembly of section .fini:

00015ab4 <.fini>:
   15ab4:	push	{r3, lr}
   15ab8:	pop	{r3, pc}
