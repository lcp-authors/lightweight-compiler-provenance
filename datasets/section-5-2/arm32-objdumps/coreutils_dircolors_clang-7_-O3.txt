
../repos/coreutils/src/dircolors:     file format elf32-littlearm


Disassembly of section .init:

00010e90 <.init>:
   10e90:	push	{r3, lr}
   10e94:	bl	11144 <close@plt+0x48>
   10e98:	pop	{r3, pc}

Disassembly of section .plt:

00010e9c <calloc@plt-0x14>:
   10e9c:	push	{lr}		; (str lr, [sp, #-4]!)
   10ea0:	ldr	lr, [pc, #4]	; 10eac <calloc@plt-0x4>
   10ea4:	add	lr, pc, lr
   10ea8:	ldr	pc, [lr, #8]!
   10eac:	andeq	r7, r1, r4, asr r1

00010eb0 <calloc@plt>:
   10eb0:	add	ip, pc, #0, 12
   10eb4:	add	ip, ip, #94208	; 0x17000
   10eb8:	ldr	pc, [ip, #340]!	; 0x154

00010ebc <fputs_unlocked@plt>:
   10ebc:	add	ip, pc, #0, 12
   10ec0:	add	ip, ip, #94208	; 0x17000
   10ec4:	ldr	pc, [ip, #332]!	; 0x14c

00010ec8 <__getdelim@plt>:
   10ec8:	add	ip, pc, #0, 12
   10ecc:	add	ip, ip, #94208	; 0x17000
   10ed0:	ldr	pc, [ip, #324]!	; 0x144

00010ed4 <strcmp@plt>:
   10ed4:	add	ip, pc, #0, 12
   10ed8:	add	ip, ip, #94208	; 0x17000
   10edc:	ldr	pc, [ip, #316]!	; 0x13c

00010ee0 <fflush@plt>:
   10ee0:	add	ip, pc, #0, 12
   10ee4:	add	ip, ip, #94208	; 0x17000
   10ee8:	ldr	pc, [ip, #308]!	; 0x134

00010eec <free@plt>:
   10eec:	add	ip, pc, #0, 12
   10ef0:	add	ip, ip, #94208	; 0x17000
   10ef4:	ldr	pc, [ip, #300]!	; 0x12c

00010ef8 <_exit@plt>:
   10ef8:	add	ip, pc, #0, 12
   10efc:	add	ip, ip, #94208	; 0x17000
   10f00:	ldr	pc, [ip, #292]!	; 0x124

00010f04 <memcpy@plt>:
   10f04:	add	ip, pc, #0, 12
   10f08:	add	ip, ip, #94208	; 0x17000
   10f0c:	ldr	pc, [ip, #284]!	; 0x11c

00010f10 <mbsinit@plt>:
   10f10:	add	ip, pc, #0, 12
   10f14:	add	ip, ip, #94208	; 0x17000
   10f18:	ldr	pc, [ip, #276]!	; 0x114

00010f1c <fwrite_unlocked@plt>:
   10f1c:	add	ip, pc, #0, 12
   10f20:	add	ip, ip, #94208	; 0x17000
   10f24:	ldr	pc, [ip, #268]!	; 0x10c

00010f28 <memcmp@plt>:
   10f28:	add	ip, pc, #0, 12
   10f2c:	add	ip, ip, #94208	; 0x17000
   10f30:	ldr	pc, [ip, #260]!	; 0x104

00010f34 <dcgettext@plt>:
   10f34:	add	ip, pc, #0, 12
   10f38:	add	ip, ip, #94208	; 0x17000
   10f3c:	ldr	pc, [ip, #252]!	; 0xfc

00010f40 <dup2@plt>:
   10f40:	add	ip, pc, #0, 12
   10f44:	add	ip, ip, #94208	; 0x17000
   10f48:	ldr	pc, [ip, #244]!	; 0xf4

00010f4c <realloc@plt>:
   10f4c:	add	ip, pc, #0, 12
   10f50:	add	ip, ip, #94208	; 0x17000
   10f54:	ldr	pc, [ip, #236]!	; 0xec

00010f58 <textdomain@plt>:
   10f58:	add	ip, pc, #0, 12
   10f5c:	add	ip, ip, #94208	; 0x17000
   10f60:	ldr	pc, [ip, #228]!	; 0xe4

00010f64 <iswprint@plt>:
   10f64:	add	ip, pc, #0, 12
   10f68:	add	ip, ip, #94208	; 0x17000
   10f6c:	ldr	pc, [ip, #220]!	; 0xdc

00010f70 <fwrite@plt>:
   10f70:	add	ip, pc, #0, 12
   10f74:	add	ip, ip, #94208	; 0x17000
   10f78:	ldr	pc, [ip, #212]!	; 0xd4

00010f7c <lseek64@plt>:
   10f7c:	add	ip, pc, #0, 12
   10f80:	add	ip, ip, #94208	; 0x17000
   10f84:	ldr	pc, [ip, #204]!	; 0xcc

00010f88 <__ctype_get_mb_cur_max@plt>:
   10f88:	add	ip, pc, #0, 12
   10f8c:	add	ip, ip, #94208	; 0x17000
   10f90:	ldr	pc, [ip, #196]!	; 0xc4

00010f94 <__fpending@plt>:
   10f94:	add	ip, pc, #0, 12
   10f98:	add	ip, ip, #94208	; 0x17000
   10f9c:	ldr	pc, [ip, #188]!	; 0xbc

00010fa0 <mbrtowc@plt>:
   10fa0:	add	ip, pc, #0, 12
   10fa4:	add	ip, ip, #94208	; 0x17000
   10fa8:	ldr	pc, [ip, #180]!	; 0xb4

00010fac <error@plt>:
   10fac:	add	ip, pc, #0, 12
   10fb0:	add	ip, ip, #94208	; 0x17000
   10fb4:	ldr	pc, [ip, #172]!	; 0xac

00010fb8 <fnmatch@plt>:
   10fb8:	add	ip, pc, #0, 12
   10fbc:	add	ip, ip, #94208	; 0x17000
   10fc0:	ldr	pc, [ip, #164]!	; 0xa4

00010fc4 <open64@plt>:
   10fc4:	add	ip, pc, #0, 12
   10fc8:	add	ip, ip, #94208	; 0x17000
   10fcc:	ldr	pc, [ip, #156]!	; 0x9c

00010fd0 <getenv@plt>:
   10fd0:	add	ip, pc, #0, 12
   10fd4:	add	ip, ip, #94208	; 0x17000
   10fd8:	ldr	pc, [ip, #148]!	; 0x94

00010fdc <puts@plt>:
   10fdc:	add	ip, pc, #0, 12
   10fe0:	add	ip, ip, #94208	; 0x17000
   10fe4:	ldr	pc, [ip, #140]!	; 0x8c

00010fe8 <malloc@plt>:
   10fe8:	add	ip, pc, #0, 12
   10fec:	add	ip, ip, #94208	; 0x17000
   10ff0:	ldr	pc, [ip, #132]!	; 0x84

00010ff4 <__libc_start_main@plt>:
   10ff4:	add	ip, pc, #0, 12
   10ff8:	add	ip, ip, #94208	; 0x17000
   10ffc:	ldr	pc, [ip, #124]!	; 0x7c

00011000 <__freading@plt>:
   11000:	add	ip, pc, #0, 12
   11004:	add	ip, ip, #94208	; 0x17000
   11008:	ldr	pc, [ip, #116]!	; 0x74

0001100c <__gmon_start__@plt>:
   1100c:	add	ip, pc, #0, 12
   11010:	add	ip, ip, #94208	; 0x17000
   11014:	ldr	pc, [ip, #108]!	; 0x6c

00011018 <freopen64@plt>:
   11018:	add	ip, pc, #0, 12
   1101c:	add	ip, ip, #94208	; 0x17000
   11020:	ldr	pc, [ip, #100]!	; 0x64

00011024 <getopt_long@plt>:
   11024:	add	ip, pc, #0, 12
   11028:	add	ip, ip, #94208	; 0x17000
   1102c:	ldr	pc, [ip, #92]!	; 0x5c

00011030 <__ctype_b_loc@plt>:
   11030:	add	ip, pc, #0, 12
   11034:	add	ip, ip, #94208	; 0x17000
   11038:	ldr	pc, [ip, #84]!	; 0x54

0001103c <exit@plt>:
   1103c:	add	ip, pc, #0, 12
   11040:	add	ip, ip, #94208	; 0x17000
   11044:	ldr	pc, [ip, #76]!	; 0x4c

00011048 <strlen@plt>:
   11048:	add	ip, pc, #0, 12
   1104c:	add	ip, ip, #94208	; 0x17000
   11050:	ldr	pc, [ip, #68]!	; 0x44

00011054 <__errno_location@plt>:
   11054:	add	ip, pc, #0, 12
   11058:	add	ip, ip, #94208	; 0x17000
   1105c:	ldr	pc, [ip, #60]!	; 0x3c

00011060 <__cxa_atexit@plt>:
   11060:	add	ip, pc, #0, 12
   11064:	add	ip, ip, #94208	; 0x17000
   11068:	ldr	pc, [ip, #52]!	; 0x34

0001106c <memset@plt>:
   1106c:	add	ip, pc, #0, 12
   11070:	add	ip, ip, #94208	; 0x17000
   11074:	ldr	pc, [ip, #44]!	; 0x2c

00011078 <__printf_chk@plt>:
   11078:	add	ip, pc, #0, 12
   1107c:	add	ip, ip, #94208	; 0x17000
   11080:	ldr	pc, [ip, #36]!	; 0x24

00011084 <fileno@plt>:
   11084:	add	ip, pc, #0, 12
   11088:	add	ip, ip, #94208	; 0x17000
   1108c:	ldr	pc, [ip, #28]!

00011090 <__fprintf_chk@plt>:
   11090:	add	ip, pc, #0, 12
   11094:	add	ip, ip, #94208	; 0x17000
   11098:	ldr	pc, [ip, #20]!

0001109c <fclose@plt>:
   1109c:	add	ip, pc, #0, 12
   110a0:	add	ip, ip, #94208	; 0x17000
   110a4:	ldr	pc, [ip, #12]!

000110a8 <fseeko64@plt>:
   110a8:	add	ip, pc, #0, 12
   110ac:	add	ip, ip, #94208	; 0x17000
   110b0:	ldr	pc, [ip, #4]!

000110b4 <setlocale@plt>:
   110b4:	add	ip, pc, #0, 12
   110b8:	add	ip, ip, #90112	; 0x16000
   110bc:	ldr	pc, [ip, #4092]!	; 0xffc

000110c0 <strrchr@plt>:
   110c0:	add	ip, pc, #0, 12
   110c4:	add	ip, ip, #90112	; 0x16000
   110c8:	ldr	pc, [ip, #4084]!	; 0xff4

000110cc <nl_langinfo@plt>:
   110cc:	add	ip, pc, #0, 12
   110d0:	add	ip, ip, #90112	; 0x16000
   110d4:	ldr	pc, [ip, #4076]!	; 0xfec

000110d8 <bindtextdomain@plt>:
   110d8:	add	ip, pc, #0, 12
   110dc:	add	ip, ip, #90112	; 0x16000
   110e0:	ldr	pc, [ip, #4068]!	; 0xfe4

000110e4 <strncmp@plt>:
   110e4:	add	ip, pc, #0, 12
   110e8:	add	ip, ip, #90112	; 0x16000
   110ec:	ldr	pc, [ip, #4060]!	; 0xfdc

000110f0 <abort@plt>:
   110f0:	add	ip, pc, #0, 12
   110f4:	add	ip, ip, #90112	; 0x16000
   110f8:	ldr	pc, [ip, #4052]!	; 0xfd4

000110fc <close@plt>:
   110fc:	add	ip, pc, #0, 12
   11100:	add	ip, ip, #90112	; 0x16000
   11104:	ldr	pc, [ip, #4044]!	; 0xfcc

Disassembly of section .text:

00011108 <_obstack_begin@@Base-0x1a30>:
   11108:	mov	fp, #0
   1110c:	mov	lr, #0
   11110:	pop	{r1}		; (ldr r1, [sp], #4)
   11114:	mov	r2, sp
   11118:	push	{r2}		; (str r2, [sp, #-4]!)
   1111c:	push	{r0}		; (str r0, [sp, #-4]!)
   11120:	ldr	ip, [pc, #16]	; 11138 <close@plt+0x3c>
   11124:	push	{ip}		; (str ip, [sp, #-4]!)
   11128:	ldr	r0, [pc, #12]	; 1113c <close@plt+0x40>
   1112c:	ldr	r3, [pc, #12]	; 11140 <close@plt+0x44>
   11130:	bl	10ff4 <__libc_start_main@plt>
   11134:	bl	110f0 <abort@plt>
   11138:	ldrdeq	r5, [r1], -r0
   1113c:	andeq	r1, r1, r8, asr r4
   11140:	andeq	r5, r1, r0, ror lr
   11144:	ldr	r3, [pc, #20]	; 11160 <close@plt+0x64>
   11148:	ldr	r2, [pc, #20]	; 11164 <close@plt+0x68>
   1114c:	add	r3, pc, r3
   11150:	ldr	r2, [r3, r2]
   11154:	cmp	r2, #0
   11158:	bxeq	lr
   1115c:	b	1100c <__gmon_start__@plt>
   11160:	andeq	r6, r1, ip, lsr #29
   11164:	ldrdeq	r0, [r0], -r4
   11168:	ldr	r0, [pc, #24]	; 11188 <close@plt+0x8c>
   1116c:	ldr	r3, [pc, #24]	; 1118c <close@plt+0x90>
   11170:	cmp	r3, r0
   11174:	bxeq	lr
   11178:	ldr	r3, [pc, #16]	; 11190 <close@plt+0x94>
   1117c:	cmp	r3, #0
   11180:	bxeq	lr
   11184:	bx	r3
   11188:	andeq	r8, r2, r0, lsr r1
   1118c:	andeq	r8, r2, r0, lsr r1
   11190:	andeq	r0, r0, r0
   11194:	ldr	r0, [pc, #36]	; 111c0 <close@plt+0xc4>
   11198:	ldr	r1, [pc, #36]	; 111c4 <close@plt+0xc8>
   1119c:	sub	r1, r1, r0
   111a0:	asr	r1, r1, #2
   111a4:	add	r1, r1, r1, lsr #31
   111a8:	asrs	r1, r1, #1
   111ac:	bxeq	lr
   111b0:	ldr	r3, [pc, #16]	; 111c8 <close@plt+0xcc>
   111b4:	cmp	r3, #0
   111b8:	bxeq	lr
   111bc:	bx	r3
   111c0:	andeq	r8, r2, r0, lsr r1
   111c4:	andeq	r8, r2, r0, lsr r1
   111c8:	andeq	r0, r0, r0
   111cc:	push	{r4, lr}
   111d0:	ldr	r4, [pc, #24]	; 111f0 <close@plt+0xf4>
   111d4:	ldrb	r3, [r4]
   111d8:	cmp	r3, #0
   111dc:	popne	{r4, pc}
   111e0:	bl	11168 <close@plt+0x6c>
   111e4:	mov	r3, #1
   111e8:	strb	r3, [r4]
   111ec:	pop	{r4, pc}
   111f0:	andeq	r8, r2, r0, asr r1
   111f4:	b	11194 <close@plt+0x98>
   111f8:	push	{fp, lr}
   111fc:	mov	fp, sp
   11200:	sub	sp, sp, #56	; 0x38
   11204:	mov	r4, r0
   11208:	cmp	r0, #0
   1120c:	bne	11414 <close@plt+0x318>
   11210:	movw	r1, #24355	; 0x5f23
   11214:	mov	r0, #0
   11218:	mov	r2, #5
   1121c:	movt	r1, #1
   11220:	bl	10f34 <dcgettext@plt>
   11224:	mov	r1, r0
   11228:	movw	r0, #33160	; 0x8188
   1122c:	movt	r0, #2
   11230:	ldr	r2, [r0]
   11234:	mov	r0, #1
   11238:	bl	11078 <__printf_chk@plt>
   1123c:	movw	r1, #24385	; 0x5f41
   11240:	mov	r0, #0
   11244:	mov	r2, #5
   11248:	movt	r1, #1
   1124c:	bl	10f34 <dcgettext@plt>
   11250:	movw	r7, #33100	; 0x814c
   11254:	movt	r7, #2
   11258:	ldr	r1, [r7]
   1125c:	bl	10ebc <fputs_unlocked@plt>
   11260:	movw	r1, #24659	; 0x6053
   11264:	mov	r0, #0
   11268:	mov	r2, #5
   1126c:	movt	r1, #1
   11270:	bl	10f34 <dcgettext@plt>
   11274:	ldr	r1, [r7]
   11278:	bl	10ebc <fputs_unlocked@plt>
   1127c:	movw	r1, #24704	; 0x6080
   11280:	mov	r0, #0
   11284:	mov	r2, #5
   11288:	movt	r1, #1
   1128c:	bl	10f34 <dcgettext@plt>
   11290:	ldr	r1, [r7]
   11294:	bl	10ebc <fputs_unlocked@plt>
   11298:	movw	r1, #24758	; 0x60b6
   1129c:	mov	r0, #0
   112a0:	mov	r2, #5
   112a4:	movt	r1, #1
   112a8:	bl	10f34 <dcgettext@plt>
   112ac:	ldr	r1, [r7]
   112b0:	bl	10ebc <fputs_unlocked@plt>
   112b4:	movw	r0, #30576	; 0x7770
   112b8:	mov	r2, #48	; 0x30
   112bc:	mov	r6, sp
   112c0:	movw	r5, #24980	; 0x6194
   112c4:	movt	r0, #1
   112c8:	movt	r5, #1
   112cc:	add	r1, r0, #32
   112d0:	add	r3, r0, #16
   112d4:	vld1.64	{d18-d19}, [r0], r2
   112d8:	vld1.64	{d16-d17}, [r1]
   112dc:	vld1.64	{d20-d21}, [r3]
   112e0:	add	r1, r6, #32
   112e4:	vldr	d22, [r0]
   112e8:	add	r0, r6, #16
   112ec:	vst1.64	{d16-d17}, [r1]
   112f0:	movw	r1, #25341	; 0x62fd
   112f4:	vst1.64	{d20-d21}, [r0]
   112f8:	mov	r0, r6
   112fc:	vst1.64	{d18-d19}, [r0], r2
   11300:	movt	r1, #1
   11304:	vstr	d22, [r0]
   11308:	mov	r0, r5
   1130c:	bl	10ed4 <strcmp@plt>
   11310:	cmp	r0, #0
   11314:	ldrne	r1, [r6, #8]!
   11318:	cmpne	r1, #0
   1131c:	bne	11308 <close@plt+0x20c>
   11320:	ldr	r6, [r6, #4]
   11324:	movw	r1, #25436	; 0x635c
   11328:	mov	r0, #0
   1132c:	mov	r2, #5
   11330:	movt	r1, #1
   11334:	bl	10f34 <dcgettext@plt>
   11338:	movw	r2, #25018	; 0x61ba
   1133c:	movw	r3, #25459	; 0x6373
   11340:	mov	r1, r0
   11344:	mov	r0, #1
   11348:	movt	r2, #1
   1134c:	movt	r3, #1
   11350:	bl	11078 <__printf_chk@plt>
   11354:	cmp	r6, #0
   11358:	mov	r0, #5
   1135c:	mov	r1, #0
   11360:	moveq	r6, r5
   11364:	bl	110b4 <setlocale@plt>
   11368:	cmp	r0, #0
   1136c:	beq	113a4 <close@plt+0x2a8>
   11370:	movw	r1, #25499	; 0x639b
   11374:	mov	r2, #3
   11378:	movt	r1, #1
   1137c:	bl	110e4 <strncmp@plt>
   11380:	cmp	r0, #0
   11384:	beq	113a4 <close@plt+0x2a8>
   11388:	movw	r1, #25503	; 0x639f
   1138c:	mov	r0, #0
   11390:	mov	r2, #5
   11394:	movt	r1, #1
   11398:	bl	10f34 <dcgettext@plt>
   1139c:	ldr	r1, [r7]
   113a0:	bl	10ebc <fputs_unlocked@plt>
   113a4:	movw	r1, #25574	; 0x63e6
   113a8:	mov	r0, #0
   113ac:	mov	r2, #5
   113b0:	movt	r1, #1
   113b4:	bl	10f34 <dcgettext@plt>
   113b8:	movw	r2, #25459	; 0x6373
   113bc:	mov	r1, r0
   113c0:	mov	r0, #1
   113c4:	mov	r3, r5
   113c8:	movt	r2, #1
   113cc:	bl	11078 <__printf_chk@plt>
   113d0:	movw	r1, #25601	; 0x6401
   113d4:	mov	r0, #0
   113d8:	mov	r2, #5
   113dc:	movt	r1, #1
   113e0:	bl	10f34 <dcgettext@plt>
   113e4:	movw	r3, #25651	; 0x6433
   113e8:	mov	r1, r0
   113ec:	movw	r0, #25369	; 0x6319
   113f0:	cmp	r6, r5
   113f4:	mov	r2, r6
   113f8:	movt	r0, #1
   113fc:	movt	r3, #1
   11400:	moveq	r3, r0
   11404:	mov	r0, #1
   11408:	bl	11078 <__printf_chk@plt>
   1140c:	mov	r0, r4
   11410:	bl	1103c <exit@plt>
   11414:	movw	r0, #33088	; 0x8140
   11418:	movw	r1, #24316	; 0x5efc
   1141c:	mov	r2, #5
   11420:	movt	r0, #2
   11424:	movt	r1, #1
   11428:	ldr	r5, [r0]
   1142c:	mov	r0, #0
   11430:	bl	10f34 <dcgettext@plt>
   11434:	mov	r2, r0
   11438:	movw	r0, #33160	; 0x8188
   1143c:	mov	r1, #1
   11440:	movt	r0, #2
   11444:	ldr	r3, [r0]
   11448:	mov	r0, r5
   1144c:	bl	11090 <__fprintf_chk@plt>
   11450:	mov	r0, r4
   11454:	bl	1103c <exit@plt>
   11458:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1145c:	add	fp, sp, #28
   11460:	sub	sp, sp, #12
   11464:	mov	sl, r0
   11468:	ldr	r0, [r1]
   1146c:	mov	r5, r1
   11470:	bl	12f40 <_obstack_memory_used@@Base+0x78>
   11474:	movw	r1, #25651	; 0x6433
   11478:	mov	r0, #6
   1147c:	movt	r1, #1
   11480:	bl	110b4 <setlocale@plt>
   11484:	movw	r6, #25022	; 0x61be
   11488:	movw	r1, #24990	; 0x619e
   1148c:	movt	r6, #1
   11490:	movt	r1, #1
   11494:	mov	r0, r6
   11498:	bl	110d8 <bindtextdomain@plt>
   1149c:	mov	r0, r6
   114a0:	bl	10f58 <textdomain@plt>
   114a4:	movw	r0, #9744	; 0x2610
   114a8:	movt	r0, #1
   114ac:	bl	15ed4 <_obstack_memory_used@@Base+0x300c>
   114b0:	movw	r8, #25014	; 0x61b6
   114b4:	movw	r9, #26136	; 0x6618
   114b8:	mov	r6, #2
   114bc:	mov	r7, #0
   114c0:	movt	r8, #1
   114c4:	movt	r9, #1
   114c8:	b	114d4 <close@plt+0x3d8>
   114cc:	mov	r7, #1
   114d0:	mov	r6, r4
   114d4:	mov	r4, r6
   114d8:	mov	r6, #0
   114dc:	mov	r0, sl
   114e0:	mov	r1, r5
   114e4:	mov	r2, r8
   114e8:	mov	r3, r9
   114ec:	str	r6, [sp]
   114f0:	bl	11024 <getopt_long@plt>
   114f4:	cmp	r0, #97	; 0x61
   114f8:	ble	1151c <close@plt+0x420>
   114fc:	cmp	r0, #98	; 0x62
   11500:	beq	114d4 <close@plt+0x3d8>
   11504:	cmp	r0, #112	; 0x70
   11508:	beq	114cc <close@plt+0x3d0>
   1150c:	cmp	r0, #99	; 0x63
   11510:	bne	118d8 <close@plt+0x7dc>
   11514:	mov	r6, #1
   11518:	b	114d4 <close@plt+0x3d8>
   1151c:	cmn	r0, #1
   11520:	bne	117d8 <close@plt+0x6dc>
   11524:	sub	r1, r4, #2
   11528:	mvn	r0, r7
   1152c:	clz	r1, r1
   11530:	lsr	r1, r1, #5
   11534:	orr	r0, r0, r1
   11538:	tst	r0, #1
   1153c:	beq	11838 <close@plt+0x73c>
   11540:	movw	r0, #33080	; 0x8138
   11544:	movt	r0, #2
   11548:	ldr	r0, [r0]
   1154c:	add	r8, r5, r0, lsl #2
   11550:	sub	r5, sl, r0
   11554:	mov	r0, #1
   11558:	bic	r6, r0, r7
   1155c:	cmp	r5, r6
   11560:	bgt	11864 <close@plt+0x768>
   11564:	tst	r7, #1
   11568:	beq	115ac <close@plt+0x4b0>
   1156c:	movw	r5, #26264	; 0x6698
   11570:	movw	r6, #4310	; 0x10d6
   11574:	movt	r5, #1
   11578:	mov	r4, r5
   1157c:	mov	r0, r4
   11580:	bl	10fdc <puts@plt>
   11584:	mov	r0, r4
   11588:	bl	11048 <strlen@plt>
   1158c:	add	r0, r4, r0
   11590:	add	r4, r0, #1
   11594:	sub	r0, r4, r5
   11598:	cmp	r0, r6
   1159c:	bcc	1157c <close@plt+0x480>
   115a0:	mov	r0, #0
   115a4:	sub	sp, fp, #28
   115a8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   115ac:	cmp	r4, #2
   115b0:	bne	11630 <close@plt+0x534>
   115b4:	movw	r0, #25701	; 0x6465
   115b8:	movt	r0, #1
   115bc:	bl	10fd0 <getenv@plt>
   115c0:	cmp	r0, #0
   115c4:	ldrbne	r1, [r0]
   115c8:	cmpne	r1, #0
   115cc:	bne	115f4 <close@plt+0x4f8>
   115d0:	movw	r1, #25227	; 0x628b
   115d4:	mov	r0, #0
   115d8:	mov	r2, #5
   115dc:	movt	r1, #1
   115e0:	bl	10f34 <dcgettext@plt>
   115e4:	mov	r2, r0
   115e8:	mov	r0, #1
   115ec:	mov	r1, #0
   115f0:	bl	10fac <error@plt>
   115f4:	bl	12504 <close@plt+0x1408>
   115f8:	movw	r1, #25708	; 0x646c
   115fc:	mov	r4, r0
   11600:	movt	r1, #1
   11604:	bl	10ed4 <strcmp@plt>
   11608:	cmp	r0, #0
   1160c:	beq	1162c <close@plt+0x530>
   11610:	movw	r1, #25707	; 0x646b
   11614:	mov	r0, r4
   11618:	movt	r1, #1
   1161c:	bl	10ed4 <strcmp@plt>
   11620:	clz	r0, r0
   11624:	lsr	r4, r0, #5
   11628:	b	11630 <close@plt+0x534>
   1162c:	mov	r4, #1
   11630:	movw	r0, #10240	; 0x2800
   11634:	movw	r9, #33108	; 0x8154
   11638:	movw	r3, #23436	; 0x5b8c
   1163c:	mov	r1, #0
   11640:	mov	r2, #0
   11644:	movt	r0, #1
   11648:	movt	r9, #2
   1164c:	movt	r3, #1
   11650:	str	r0, [sp]
   11654:	mov	r0, r9
   11658:	bl	12b38 <_obstack_begin@@Base>
   1165c:	cmp	r5, #0
   11660:	beq	11708 <close@plt+0x60c>
   11664:	ldr	r5, [r8]
   11668:	movw	r1, #30911	; 0x78bf
   1166c:	movt	r1, #1
   11670:	mov	r0, r5
   11674:	bl	10ed4 <strcmp@plt>
   11678:	cmp	r0, #0
   1167c:	beq	116a4 <close@plt+0x5a8>
   11680:	movw	r0, #33096	; 0x8148
   11684:	movw	r1, #30809	; 0x7859
   11688:	movt	r0, #2
   1168c:	movt	r1, #1
   11690:	ldr	r2, [r0]
   11694:	mov	r0, r5
   11698:	bl	12828 <close@plt+0x172c>
   1169c:	cmp	r0, #0
   116a0:	beq	116cc <close@plt+0x5d0>
   116a4:	movw	r6, #33096	; 0x8148
   116a8:	mov	r1, r5
   116ac:	movt	r6, #2
   116b0:	ldr	r0, [r6]
   116b4:	bl	118e0 <close@plt+0x7e4>
   116b8:	mov	r7, r0
   116bc:	ldr	r0, [r6]
   116c0:	bl	126fc <close@plt+0x1600>
   116c4:	cmp	r0, #0
   116c8:	beq	11728 <close@plt+0x62c>
   116cc:	bl	11054 <__errno_location@plt>
   116d0:	ldr	r4, [r0]
   116d4:	mov	r0, #0
   116d8:	mov	r1, #3
   116dc:	mov	r2, r5
   116e0:	bl	14c10 <_obstack_memory_used@@Base+0x1d48>
   116e4:	movw	r2, #30815	; 0x785f
   116e8:	mov	r3, r0
   116ec:	mov	r0, #0
   116f0:	mov	r1, r4
   116f4:	movt	r2, #1
   116f8:	bl	10fac <error@plt>
   116fc:	mov	r0, #1
   11700:	sub	sp, fp, #28
   11704:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   11708:	mov	r0, #0
   1170c:	mov	r1, #0
   11710:	bl	118e0 <close@plt+0x7e4>
   11714:	mov	r1, r0
   11718:	mov	r0, #1
   1171c:	cmp	r1, #0
   11720:	beq	115a4 <close@plt+0x4a8>
   11724:	b	11734 <close@plt+0x638>
   11728:	mov	r0, #1
   1172c:	cmp	r7, #0
   11730:	beq	115a4 <close@plt+0x4a8>
   11734:	ldr	r5, [r9, #8]
   11738:	ldr	r0, [r9, #12]
   1173c:	movw	r6, #33100	; 0x814c
   11740:	movt	r6, #2
   11744:	subs	r7, r0, r5
   11748:	ldrbeq	r1, [r9, #40]	; 0x28
   1174c:	orreq	r1, r1, #2
   11750:	strbeq	r1, [r9, #40]	; 0x28
   11754:	ldr	r3, [r9, #24]
   11758:	ldr	r1, [r9, #4]
   1175c:	ldr	r2, [r9, #16]
   11760:	add	r0, r3, r0
   11764:	bic	r0, r0, r3
   11768:	sub	r3, r0, r1
   1176c:	sub	r1, r2, r1
   11770:	cmp	r3, r1
   11774:	movw	r1, #25289	; 0x62c9
   11778:	movhi	r0, r2
   1177c:	movt	r1, #1
   11780:	cmp	r4, #0
   11784:	str	r0, [r9, #8]
   11788:	str	r0, [r9, #12]
   1178c:	movw	r0, #25322	; 0x62ea
   11790:	movt	r0, #1
   11794:	moveq	r0, r1
   11798:	ldr	r1, [r6]
   1179c:	bl	10ebc <fputs_unlocked@plt>
   117a0:	ldr	r3, [r6]
   117a4:	mov	r0, r5
   117a8:	mov	r1, #1
   117ac:	mov	r2, r7
   117b0:	bl	10f1c <fwrite_unlocked@plt>
   117b4:	movw	r1, #25301	; 0x62d5
   117b8:	movw	r0, #25649	; 0x6431
   117bc:	cmp	r4, #0
   117c0:	movt	r1, #1
   117c4:	movt	r0, #1
   117c8:	moveq	r0, r1
   117cc:	ldr	r1, [r6]
   117d0:	bl	10ebc <fputs_unlocked@plt>
   117d4:	b	115a0 <close@plt+0x4a4>
   117d8:	cmn	r0, #3
   117dc:	bne	11828 <close@plt+0x72c>
   117e0:	movw	r0, #32992	; 0x80e0
   117e4:	movw	r2, #25032	; 0x61c8
   117e8:	mov	r1, #0
   117ec:	movt	r0, #2
   117f0:	movt	r2, #1
   117f4:	str	r1, [sp, #4]
   117f8:	movw	r1, #24980	; 0x6194
   117fc:	ldr	r3, [r0]
   11800:	movw	r0, #33100	; 0x814c
   11804:	str	r2, [sp]
   11808:	movw	r2, #25018	; 0x61ba
   1180c:	movt	r1, #1
   11810:	movt	r0, #2
   11814:	movt	r2, #1
   11818:	ldr	r0, [r0]
   1181c:	bl	15360 <_obstack_memory_used@@Base+0x2498>
   11820:	mov	r0, #0
   11824:	bl	1103c <exit@plt>
   11828:	cmn	r0, #2
   1182c:	bne	118d8 <close@plt+0x7dc>
   11830:	mov	r0, #0
   11834:	bl	111f8 <close@plt+0xfc>
   11838:	movw	r1, #25047	; 0x61d7
   1183c:	mov	r0, #0
   11840:	mov	r2, #5
   11844:	movt	r1, #1
   11848:	bl	10f34 <dcgettext@plt>
   1184c:	mov	r2, r0
   11850:	mov	r0, #0
   11854:	mov	r1, #0
   11858:	bl	10fac <error@plt>
   1185c:	mov	r0, #1
   11860:	bl	111f8 <close@plt+0xfc>
   11864:	movw	r1, #25150	; 0x623e
   11868:	mov	r0, #0
   1186c:	mov	r2, #5
   11870:	movt	r1, #1
   11874:	bl	10f34 <dcgettext@plt>
   11878:	mov	r4, r0
   1187c:	ldr	r0, [r8, r6, lsl #2]
   11880:	bl	14ebc <_obstack_memory_used@@Base+0x1ff4>
   11884:	mov	r3, r0
   11888:	mov	r0, #0
   1188c:	mov	r1, #0
   11890:	mov	r2, r4
   11894:	bl	10fac <error@plt>
   11898:	tst	r7, #1
   1189c:	beq	118d8 <close@plt+0x7dc>
   118a0:	movw	r0, #33088	; 0x8140
   118a4:	movw	r1, #25167	; 0x624f
   118a8:	mov	r2, #5
   118ac:	movt	r0, #2
   118b0:	movt	r1, #1
   118b4:	ldr	r4, [r0]
   118b8:	mov	r0, #0
   118bc:	bl	10f34 <dcgettext@plt>
   118c0:	movw	r2, #31096	; 0x7978
   118c4:	mov	r3, r0
   118c8:	mov	r0, r4
   118cc:	mov	r1, #1
   118d0:	movt	r2, #1
   118d4:	bl	11090 <__fprintf_chk@plt>
   118d8:	mov	r0, #1
   118dc:	bl	111f8 <close@plt+0xfc>
   118e0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   118e4:	add	fp, sp, #28
   118e8:	sub	sp, sp, #44	; 0x2c
   118ec:	mov	r5, r0
   118f0:	mov	r0, #0
   118f4:	mov	sl, r1
   118f8:	str	r0, [fp, #-32]	; 0xffffffe0
   118fc:	str	r0, [sp, #36]	; 0x24
   11900:	movw	r0, #25712	; 0x6470
   11904:	movt	r0, #1
   11908:	bl	10fd0 <getenv@plt>
   1190c:	cmp	r0, #0
   11910:	ldrbne	r1, [r0]
   11914:	cmpne	r1, #0
   11918:	bne	11924 <close@plt+0x828>
   1191c:	movw	r0, #25717	; 0x6475
   11920:	movt	r0, #1
   11924:	str	r0, [sp, #12]
   11928:	mov	r0, #1
   1192c:	movw	r7, #26264	; 0x6698
   11930:	mov	r9, #0
   11934:	str	r0, [sp, #28]
   11938:	mov	r0, #3
   1193c:	movt	r7, #1
   11940:	str	r0, [sp, #16]
   11944:	movw	r0, #4310	; 0x10d6
   11948:	add	r0, r7, r0
   1194c:	str	r0, [sp, #32]
   11950:	b	119a8 <close@plt+0x8ac>
   11954:	movw	r1, #25722	; 0x647a
   11958:	mov	r0, #0
   1195c:	mov	r2, #5
   11960:	str	r0, [sp, #28]
   11964:	mov	r0, #0
   11968:	movt	r1, #1
   1196c:	bl	10f34 <dcgettext@plt>
   11970:	ldr	sl, [sp, #20]
   11974:	mov	r4, r0
   11978:	mov	r0, #0
   1197c:	mov	r1, #3
   11980:	mov	r2, sl
   11984:	bl	14c10 <_obstack_memory_used@@Base+0x1d48>
   11988:	mov	r3, r0
   1198c:	mov	r0, #0
   11990:	mov	r1, #0
   11994:	mov	r2, r4
   11998:	str	r9, [sp]
   1199c:	bl	10fac <error@plt>
   119a0:	ldr	r0, [sp, #24]
   119a4:	bl	12800 <close@plt+0x1704>
   119a8:	cmp	r5, #0
   119ac:	beq	119d8 <close@plt+0x8dc>
   119b0:	sub	r0, fp, #32
   119b4:	add	r1, sp, #36	; 0x24
   119b8:	mov	r2, #10
   119bc:	mov	r3, r5
   119c0:	bl	10ec8 <__getdelim@plt>
   119c4:	mov	r1, r0
   119c8:	ldr	r0, [fp, #-32]	; 0xffffffe0
   119cc:	cmp	r1, #0
   119d0:	bgt	119fc <close@plt+0x900>
   119d4:	b	122d0 <close@plt+0x11d4>
   119d8:	ldr	r0, [sp, #32]
   119dc:	cmp	r7, r0
   119e0:	beq	122d4 <close@plt+0x11d8>
   119e4:	mov	r0, r7
   119e8:	bl	11048 <strlen@plt>
   119ec:	add	r0, r7, r0
   119f0:	add	r1, r0, #1
   119f4:	mov	r0, r7
   119f8:	mov	r7, r1
   119fc:	add	r9, r9, #1
   11a00:	add	r6, r0, #3
   11a04:	sub	r4, r0, #1
   11a08:	bl	11030 <__ctype_b_loc@plt>
   11a0c:	mov	r8, r0
   11a10:	ldr	r0, [r0]
   11a14:	ldrb	r2, [r4, #1]!
   11a18:	mov	r1, r6
   11a1c:	add	r6, r6, #1
   11a20:	add	r3, r0, r2, lsl #1
   11a24:	ldrb	r3, [r3, #1]
   11a28:	tst	r3, #32
   11a2c:	bne	11a14 <close@plt+0x918>
   11a30:	cmp	r2, #0
   11a34:	cmpne	r2, #35	; 0x23
   11a38:	beq	119a8 <close@plt+0x8ac>
   11a3c:	mov	r6, r4
   11a40:	str	sl, [sp, #20]
   11a44:	mov	sl, r1
   11a48:	ldrb	r1, [r6, #1]!
   11a4c:	cmp	r1, #0
   11a50:	beq	11a68 <close@plt+0x96c>
   11a54:	add	r1, r0, r1, lsl #1
   11a58:	ldrh	r1, [r1]
   11a5c:	ands	r1, r1, #8192	; 0x2000
   11a60:	add	r1, sl, #1
   11a64:	beq	11a44 <close@plt+0x948>
   11a68:	sub	r1, r6, r4
   11a6c:	mov	r0, r4
   11a70:	bl	15a6c <_obstack_memory_used@@Base+0x2ba4>
   11a74:	str	r0, [sp, #24]
   11a78:	ldrb	r0, [r6]
   11a7c:	cmp	r0, #0
   11a80:	beq	11954 <close@plt+0x858>
   11a84:	ldr	r0, [r8]
   11a88:	ldrb	r2, [r6, #1]!
   11a8c:	mov	r1, sl
   11a90:	add	sl, sl, #1
   11a94:	add	r3, r0, r2, lsl #1
   11a98:	ldrb	r3, [r3, #1]
   11a9c:	tst	r3, #32
   11aa0:	bne	11a88 <close@plt+0x98c>
   11aa4:	cmp	r2, #0
   11aa8:	cmpne	r2, #35	; 0x23
   11aac:	beq	11954 <close@plt+0x858>
   11ab0:	ldr	r8, [sp, #24]
   11ab4:	mov	r3, r6
   11ab8:	uxtb	r2, r2
   11abc:	cmp	r2, #35	; 0x23
   11ac0:	cmpne	r2, #0
   11ac4:	beq	11ae0 <close@plt+0x9e4>
   11ac8:	ldrb	r2, [r3, #1]!
   11acc:	add	r1, r1, #1
   11ad0:	uxtb	r2, r2
   11ad4:	cmp	r2, #35	; 0x23
   11ad8:	cmpne	r2, #0
   11adc:	bne	11ac8 <close@plt+0x9cc>
   11ae0:	movw	r4, #33108	; 0x8154
   11ae4:	movt	r4, #2
   11ae8:	ldrb	r2, [r1, #-2]
   11aec:	sub	r1, r1, #1
   11af0:	add	r2, r0, r2, lsl #1
   11af4:	ldrb	r2, [r2, #1]
   11af8:	tst	r2, #32
   11afc:	bne	11ae8 <close@plt+0x9ec>
   11b00:	sub	r1, r1, r6
   11b04:	mov	r0, r6
   11b08:	bl	15a6c <_obstack_memory_used@@Base+0x2ba4>
   11b0c:	movw	r1, #25712	; 0x6470
   11b10:	mov	r6, r0
   11b14:	mov	r0, r8
   11b18:	movt	r1, #1
   11b1c:	bl	1259c <close@plt+0x14a0>
   11b20:	ldr	sl, [sp, #20]
   11b24:	cmp	r0, #0
   11b28:	beq	11bfc <close@plt+0xb00>
   11b2c:	ldr	r0, [sp, #16]
   11b30:	cmp	r0, #2
   11b34:	movweq	r0, #1
   11b38:	cmp	r0, #0
   11b3c:	beq	11c30 <close@plt+0xb34>
   11b40:	str	r0, [sp, #16]
   11b44:	ldrb	r0, [r8]
   11b48:	cmp	r0, #42	; 0x2a
   11b4c:	beq	11b88 <close@plt+0xa8c>
   11b50:	cmp	r0, #46	; 0x2e
   11b54:	bne	11c48 <close@plt+0xb4c>
   11b58:	ldr	r0, [r4, #12]
   11b5c:	ldr	r1, [r4, #16]
   11b60:	cmp	r1, r0
   11b64:	bne	11b78 <close@plt+0xa7c>
   11b68:	mov	r0, r4
   11b6c:	mov	r1, #1
   11b70:	bl	12c8c <_obstack_newchunk@@Base>
   11b74:	ldr	r0, [r4, #12]
   11b78:	add	r1, r0, #1
   11b7c:	str	r1, [r4, #12]
   11b80:	mov	r1, #42	; 0x2a
   11b84:	strb	r1, [r0]
   11b88:	mov	r0, r8
   11b8c:	bl	122e4 <close@plt+0x11e8>
   11b90:	ldr	r0, [r4, #12]
   11b94:	ldr	r1, [r4, #16]
   11b98:	cmp	r1, r0
   11b9c:	bne	11bb0 <close@plt+0xab4>
   11ba0:	mov	r0, r4
   11ba4:	mov	r1, #1
   11ba8:	bl	12c8c <_obstack_newchunk@@Base>
   11bac:	ldr	r0, [r4, #12]
   11bb0:	add	r1, r0, #1
   11bb4:	str	r1, [r4, #12]
   11bb8:	mov	r1, #61	; 0x3d
   11bbc:	strb	r1, [r0]
   11bc0:	mov	r0, r6
   11bc4:	bl	122e4 <close@plt+0x11e8>
   11bc8:	ldr	r0, [r4, #12]
   11bcc:	ldr	r1, [r4, #16]
   11bd0:	cmp	r1, r0
   11bd4:	bne	11be8 <close@plt+0xaec>
   11bd8:	mov	r0, r4
   11bdc:	mov	r1, #1
   11be0:	bl	12c8c <_obstack_newchunk@@Base>
   11be4:	ldr	r0, [r4, #12]
   11be8:	add	r1, r0, #1
   11bec:	str	r1, [r4, #12]
   11bf0:	mov	r1, #58	; 0x3a
   11bf4:	strb	r1, [r0]
   11bf8:	b	122bc <close@plt+0x11c0>
   11bfc:	ldr	r1, [sp, #12]
   11c00:	mov	r0, r6
   11c04:	mov	r2, #0
   11c08:	bl	10fb8 <fnmatch@plt>
   11c0c:	cmp	r0, #0
   11c10:	beq	11c3c <close@plt+0xb40>
   11c14:	ldr	r0, [sp, #16]
   11c18:	sub	r0, r0, #2
   11c1c:	clz	r0, r0
   11c20:	lsr	r0, r0, #5
   11c24:	lsl	r0, r0, #1
   11c28:	str	r0, [sp, #16]
   11c2c:	b	122bc <close@plt+0x11c0>
   11c30:	mov	r0, #0
   11c34:	str	r0, [sp, #16]
   11c38:	b	122bc <close@plt+0x11c0>
   11c3c:	mov	r0, #2
   11c40:	str	r0, [sp, #16]
   11c44:	b	122bc <close@plt+0x11c0>
   11c48:	movw	r1, #25766	; 0x64a6
   11c4c:	mov	r0, r8
   11c50:	movt	r1, #1
   11c54:	bl	1259c <close@plt+0x14a0>
   11c58:	cmp	r0, #0
   11c5c:	beq	122bc <close@plt+0x11c0>
   11c60:	movw	r1, #25774	; 0x64ae
   11c64:	mov	r0, r8
   11c68:	movt	r1, #1
   11c6c:	bl	1259c <close@plt+0x14a0>
   11c70:	cmp	r0, #0
   11c74:	beq	122bc <close@plt+0x11c0>
   11c78:	movw	r1, #25780	; 0x64b4
   11c7c:	mov	r0, r8
   11c80:	movt	r1, #1
   11c84:	bl	1259c <close@plt+0x14a0>
   11c88:	cmp	r0, #0
   11c8c:	beq	122bc <close@plt+0x11c0>
   11c90:	movw	r1, #25832	; 0x64e8
   11c94:	mov	r0, r8
   11c98:	movt	r1, #1
   11c9c:	bl	1259c <close@plt+0x14a0>
   11ca0:	cmp	r0, #0
   11ca4:	str	r6, [sp, #8]
   11ca8:	beq	12054 <close@plt+0xf58>
   11cac:	movw	r1, #25839	; 0x64ef
   11cb0:	mov	r0, r8
   11cb4:	movt	r1, #1
   11cb8:	bl	1259c <close@plt+0x14a0>
   11cbc:	cmp	r0, #0
   11cc0:	beq	120ec <close@plt+0xff0>
   11cc4:	movw	r1, #25844	; 0x64f4
   11cc8:	mov	r0, r8
   11ccc:	movt	r1, #1
   11cd0:	bl	1259c <close@plt+0x14a0>
   11cd4:	cmp	r0, #0
   11cd8:	beq	12104 <close@plt+0x1008>
   11cdc:	movw	r1, #25849	; 0x64f9
   11ce0:	mov	r0, r8
   11ce4:	movt	r1, #1
   11ce8:	bl	1259c <close@plt+0x14a0>
   11cec:	cmp	r0, #0
   11cf0:	beq	1211c <close@plt+0x1020>
   11cf4:	movw	r1, #25855	; 0x64ff
   11cf8:	mov	r0, r8
   11cfc:	movt	r1, #1
   11d00:	bl	1259c <close@plt+0x14a0>
   11d04:	cmp	r0, #0
   11d08:	beq	12134 <close@plt+0x1038>
   11d0c:	movw	r1, #25859	; 0x6503
   11d10:	mov	r0, r8
   11d14:	movt	r1, #1
   11d18:	bl	1259c <close@plt+0x14a0>
   11d1c:	cmp	r0, #0
   11d20:	beq	1214c <close@plt+0x1050>
   11d24:	ldr	r0, [sp, #24]
   11d28:	movw	r1, #26053	; 0x65c5
   11d2c:	movt	r1, #1
   11d30:	bl	1259c <close@plt+0x14a0>
   11d34:	cmp	r0, #0
   11d38:	beq	12154 <close@plt+0x1058>
   11d3c:	ldr	r0, [sp, #24]
   11d40:	movw	r1, #25863	; 0x6507
   11d44:	movt	r1, #1
   11d48:	bl	1259c <close@plt+0x14a0>
   11d4c:	cmp	r0, #0
   11d50:	beq	1215c <close@plt+0x1060>
   11d54:	ldr	r0, [sp, #24]
   11d58:	movw	r1, #25871	; 0x650f
   11d5c:	movt	r1, #1
   11d60:	bl	1259c <close@plt+0x14a0>
   11d64:	cmp	r0, #0
   11d68:	beq	12164 <close@plt+0x1068>
   11d6c:	ldr	r0, [sp, #24]
   11d70:	movw	r1, #25878	; 0x6516
   11d74:	movt	r1, #1
   11d78:	bl	1259c <close@plt+0x14a0>
   11d7c:	cmp	r0, #0
   11d80:	beq	1216c <close@plt+0x1070>
   11d84:	ldr	r0, [sp, #24]
   11d88:	movw	r1, #25886	; 0x651e
   11d8c:	movt	r1, #1
   11d90:	bl	1259c <close@plt+0x14a0>
   11d94:	cmp	r0, #0
   11d98:	beq	12174 <close@plt+0x1078>
   11d9c:	ldr	r0, [sp, #24]
   11da0:	movw	r1, #25891	; 0x6523
   11da4:	movt	r1, #1
   11da8:	bl	1259c <close@plt+0x14a0>
   11dac:	cmp	r0, #0
   11db0:	beq	1217c <close@plt+0x1080>
   11db4:	ldr	r0, [sp, #24]
   11db8:	movw	r1, #25896	; 0x6528
   11dbc:	movt	r1, #1
   11dc0:	bl	1259c <close@plt+0x14a0>
   11dc4:	cmp	r0, #0
   11dc8:	beq	12184 <close@plt+0x1088>
   11dcc:	ldr	r0, [sp, #24]
   11dd0:	movw	r1, #25901	; 0x652d
   11dd4:	movt	r1, #1
   11dd8:	bl	1259c <close@plt+0x14a0>
   11ddc:	cmp	r0, #0
   11de0:	beq	1218c <close@plt+0x1090>
   11de4:	ldr	r0, [sp, #24]
   11de8:	movw	r1, #25905	; 0x6531
   11dec:	movt	r1, #1
   11df0:	bl	1259c <close@plt+0x14a0>
   11df4:	cmp	r0, #0
   11df8:	beq	12194 <close@plt+0x1098>
   11dfc:	ldr	r0, [sp, #24]
   11e00:	movw	r1, #25911	; 0x6537
   11e04:	movt	r1, #1
   11e08:	bl	1259c <close@plt+0x14a0>
   11e0c:	cmp	r0, #0
   11e10:	beq	1219c <close@plt+0x10a0>
   11e14:	ldr	r0, [sp, #24]
   11e18:	movw	r1, #25915	; 0x653b
   11e1c:	movt	r1, #1
   11e20:	bl	1259c <close@plt+0x14a0>
   11e24:	cmp	r0, #0
   11e28:	beq	121a4 <close@plt+0x10a8>
   11e2c:	ldr	r0, [sp, #24]
   11e30:	movw	r1, #25920	; 0x6540
   11e34:	movt	r1, #1
   11e38:	bl	1259c <close@plt+0x14a0>
   11e3c:	cmp	r0, #0
   11e40:	beq	121ac <close@plt+0x10b0>
   11e44:	ldr	r0, [sp, #24]
   11e48:	movw	r1, #25925	; 0x6545
   11e4c:	movt	r1, #1
   11e50:	bl	1259c <close@plt+0x14a0>
   11e54:	cmp	r0, #0
   11e58:	beq	121b4 <close@plt+0x10b8>
   11e5c:	ldr	r0, [sp, #24]
   11e60:	movw	r1, #25930	; 0x654a
   11e64:	movt	r1, #1
   11e68:	bl	1259c <close@plt+0x14a0>
   11e6c:	cmp	r0, #0
   11e70:	beq	121bc <close@plt+0x10c0>
   11e74:	ldr	r0, [sp, #24]
   11e78:	movw	r1, #25935	; 0x654f
   11e7c:	movt	r1, #1
   11e80:	bl	1259c <close@plt+0x14a0>
   11e84:	cmp	r0, #0
   11e88:	beq	121c4 <close@plt+0x10c8>
   11e8c:	ldr	r0, [sp, #24]
   11e90:	movw	r1, #25944	; 0x6558
   11e94:	movt	r1, #1
   11e98:	bl	1259c <close@plt+0x14a0>
   11e9c:	cmp	r0, #0
   11ea0:	beq	121cc <close@plt+0x10d0>
   11ea4:	ldr	r0, [sp, #24]
   11ea8:	movw	r1, #25950	; 0x655e
   11eac:	movt	r1, #1
   11eb0:	bl	1259c <close@plt+0x14a0>
   11eb4:	cmp	r0, #0
   11eb8:	beq	121d4 <close@plt+0x10d8>
   11ebc:	ldr	r0, [sp, #24]
   11ec0:	movw	r1, #25960	; 0x6568
   11ec4:	movt	r1, #1
   11ec8:	bl	1259c <close@plt+0x14a0>
   11ecc:	cmp	r0, #0
   11ed0:	beq	121dc <close@plt+0x10e0>
   11ed4:	ldr	r0, [sp, #24]
   11ed8:	movw	r1, #25964	; 0x656c
   11edc:	movt	r1, #1
   11ee0:	bl	1259c <close@plt+0x14a0>
   11ee4:	cmp	r0, #0
   11ee8:	beq	121e4 <close@plt+0x10e8>
   11eec:	ldr	r0, [sp, #24]
   11ef0:	movw	r1, #25972	; 0x6574
   11ef4:	movt	r1, #1
   11ef8:	bl	1259c <close@plt+0x14a0>
   11efc:	cmp	r0, #0
   11f00:	beq	121ec <close@plt+0x10f0>
   11f04:	ldr	r0, [sp, #24]
   11f08:	movw	r1, #25977	; 0x6579
   11f0c:	movt	r1, #1
   11f10:	bl	1259c <close@plt+0x14a0>
   11f14:	cmp	r0, #0
   11f18:	beq	121f4 <close@plt+0x10f8>
   11f1c:	ldr	r0, [sp, #24]
   11f20:	movw	r1, #25984	; 0x6580
   11f24:	movt	r1, #1
   11f28:	bl	1259c <close@plt+0x14a0>
   11f2c:	cmp	r0, #0
   11f30:	beq	121fc <close@plt+0x1100>
   11f34:	ldr	r0, [sp, #24]
   11f38:	movw	r1, #25989	; 0x6585
   11f3c:	movt	r1, #1
   11f40:	bl	1259c <close@plt+0x14a0>
   11f44:	cmp	r0, #0
   11f48:	beq	12204 <close@plt+0x1108>
   11f4c:	ldr	r0, [sp, #24]
   11f50:	movw	r1, #25996	; 0x658c
   11f54:	movt	r1, #1
   11f58:	bl	1259c <close@plt+0x14a0>
   11f5c:	cmp	r0, #0
   11f60:	beq	1220c <close@plt+0x1110>
   11f64:	ldr	r0, [sp, #24]
   11f68:	movw	r1, #26014	; 0x659e
   11f6c:	movt	r1, #1
   11f70:	bl	1259c <close@plt+0x14a0>
   11f74:	cmp	r0, #0
   11f78:	beq	12214 <close@plt+0x1118>
   11f7c:	ldr	r0, [sp, #24]
   11f80:	movw	r1, #26003	; 0x6593
   11f84:	movt	r1, #1
   11f88:	bl	1259c <close@plt+0x14a0>
   11f8c:	cmp	r0, #0
   11f90:	beq	1221c <close@plt+0x1120>
   11f94:	ldr	r0, [sp, #24]
   11f98:	movw	r1, #26007	; 0x6597
   11f9c:	movt	r1, #1
   11fa0:	bl	1259c <close@plt+0x14a0>
   11fa4:	cmp	r0, #0
   11fa8:	beq	12224 <close@plt+0x1128>
   11fac:	ldr	r0, [sp, #24]
   11fb0:	movw	r1, #26029	; 0x65ad
   11fb4:	movt	r1, #1
   11fb8:	bl	1259c <close@plt+0x14a0>
   11fbc:	cmp	r0, #0
   11fc0:	beq	1222c <close@plt+0x1130>
   11fc4:	ldr	r0, [sp, #24]
   11fc8:	movw	r1, #26033	; 0x65b1
   11fcc:	movt	r1, #1
   11fd0:	bl	1259c <close@plt+0x14a0>
   11fd4:	cmp	r0, #0
   11fd8:	beq	12234 <close@plt+0x1138>
   11fdc:	ldr	r0, [sp, #24]
   11fe0:	movw	r1, #26044	; 0x65bc
   11fe4:	movt	r1, #1
   11fe8:	bl	1259c <close@plt+0x14a0>
   11fec:	cmp	r0, #0
   11ff0:	beq	1223c <close@plt+0x1140>
   11ff4:	ldr	r0, [sp, #24]
   11ff8:	movw	r1, #26058	; 0x65ca
   11ffc:	movt	r1, #1
   12000:	bl	1259c <close@plt+0x14a0>
   12004:	cmp	r0, #0
   12008:	beq	12244 <close@plt+0x1148>
   1200c:	ldr	r0, [sp, #16]
   12010:	sub	r0, r0, #1
   12014:	cmp	r0, #2
   12018:	bcs	1226c <close@plt+0x1170>
   1201c:	movw	r1, #25789	; 0x64bd
   12020:	mov	r0, #0
   12024:	mov	r2, #5
   12028:	movt	r1, #1
   1202c:	bl	10f34 <dcgettext@plt>
   12030:	mov	r4, r0
   12034:	ldr	r0, [sp, #20]
   12038:	cmp	r0, #0
   1203c:	beq	12278 <close@plt+0x117c>
   12040:	ldr	r2, [sp, #20]
   12044:	mov	r0, #0
   12048:	mov	r1, #3
   1204c:	bl	14c10 <_obstack_memory_used@@Base+0x1d48>
   12050:	b	1228c <close@plt+0x1190>
   12054:	mov	r6, #0
   12058:	ldr	r0, [r4, #12]
   1205c:	ldr	r1, [r4, #16]
   12060:	cmp	r1, r0
   12064:	bne	12078 <close@plt+0xf7c>
   12068:	mov	r0, r4
   1206c:	mov	r1, #1
   12070:	bl	12c8c <_obstack_newchunk@@Base>
   12074:	ldr	r0, [r4, #12]
   12078:	movw	r1, #30632	; 0x77a8
   1207c:	add	r2, r0, #1
   12080:	movt	r1, #1
   12084:	ldr	r6, [r1, r6, lsl #2]
   12088:	ldrb	r1, [r6]
   1208c:	str	r2, [r4, #12]
   12090:	strb	r1, [r0]
   12094:	ldr	r0, [r4, #12]
   12098:	ldr	r1, [r4, #16]
   1209c:	cmp	r1, r0
   120a0:	bne	120b4 <close@plt+0xfb8>
   120a4:	mov	r0, r4
   120a8:	mov	r1, #1
   120ac:	bl	12c8c <_obstack_newchunk@@Base>
   120b0:	ldr	r0, [r4, #12]
   120b4:	ldrb	r1, [r6, #1]
   120b8:	add	r2, r0, #1
   120bc:	str	r2, [r4, #12]
   120c0:	strb	r1, [r0]
   120c4:	ldr	r0, [r4, #12]
   120c8:	ldr	r1, [r4, #16]
   120cc:	cmp	r1, r0
   120d0:	bne	120e4 <close@plt+0xfe8>
   120d4:	mov	r0, r4
   120d8:	mov	r1, #1
   120dc:	bl	12c8c <_obstack_newchunk@@Base>
   120e0:	ldr	r0, [r4, #12]
   120e4:	ldr	r6, [sp, #8]
   120e8:	b	11bb0 <close@plt+0xab4>
   120ec:	mov	r6, #1
   120f0:	ldr	r0, [r4, #12]
   120f4:	ldr	r1, [r4, #16]
   120f8:	cmp	r1, r0
   120fc:	beq	12068 <close@plt+0xf6c>
   12100:	b	12078 <close@plt+0xf7c>
   12104:	mov	r6, #2
   12108:	ldr	r0, [r4, #12]
   1210c:	ldr	r1, [r4, #16]
   12110:	cmp	r1, r0
   12114:	beq	12068 <close@plt+0xf6c>
   12118:	b	12078 <close@plt+0xf7c>
   1211c:	mov	r6, #3
   12120:	ldr	r0, [r4, #12]
   12124:	ldr	r1, [r4, #16]
   12128:	cmp	r1, r0
   1212c:	beq	12068 <close@plt+0xf6c>
   12130:	b	12078 <close@plt+0xf7c>
   12134:	mov	r6, #4
   12138:	ldr	r0, [r4, #12]
   1213c:	ldr	r1, [r4, #16]
   12140:	cmp	r1, r0
   12144:	beq	12068 <close@plt+0xf6c>
   12148:	b	12078 <close@plt+0xf7c>
   1214c:	mov	r6, #5
   12150:	b	12248 <close@plt+0x114c>
   12154:	mov	r6, #6
   12158:	b	12248 <close@plt+0x114c>
   1215c:	mov	r6, #7
   12160:	b	12248 <close@plt+0x114c>
   12164:	mov	r6, #8
   12168:	b	12248 <close@plt+0x114c>
   1216c:	mov	r6, #9
   12170:	b	12248 <close@plt+0x114c>
   12174:	mov	r6, #10
   12178:	b	12248 <close@plt+0x114c>
   1217c:	mov	r6, #11
   12180:	b	12248 <close@plt+0x114c>
   12184:	mov	r6, #12
   12188:	b	12248 <close@plt+0x114c>
   1218c:	mov	r6, #13
   12190:	b	12248 <close@plt+0x114c>
   12194:	mov	r6, #14
   12198:	b	12248 <close@plt+0x114c>
   1219c:	mov	r6, #15
   121a0:	b	12248 <close@plt+0x114c>
   121a4:	mov	r6, #16
   121a8:	b	12248 <close@plt+0x114c>
   121ac:	mov	r6, #17
   121b0:	b	12248 <close@plt+0x114c>
   121b4:	mov	r6, #18
   121b8:	b	12248 <close@plt+0x114c>
   121bc:	mov	r6, #19
   121c0:	b	12248 <close@plt+0x114c>
   121c4:	mov	r6, #20
   121c8:	b	12248 <close@plt+0x114c>
   121cc:	mov	r6, #21
   121d0:	b	12248 <close@plt+0x114c>
   121d4:	mov	r6, #22
   121d8:	b	12248 <close@plt+0x114c>
   121dc:	mov	r6, #23
   121e0:	b	12248 <close@plt+0x114c>
   121e4:	mov	r6, #24
   121e8:	b	12248 <close@plt+0x114c>
   121ec:	mov	r6, #25
   121f0:	b	12248 <close@plt+0x114c>
   121f4:	mov	r6, #26
   121f8:	b	12248 <close@plt+0x114c>
   121fc:	mov	r6, #27
   12200:	b	12248 <close@plt+0x114c>
   12204:	mov	r6, #28
   12208:	b	12248 <close@plt+0x114c>
   1220c:	mov	r6, #29
   12210:	b	12248 <close@plt+0x114c>
   12214:	mov	r6, #30
   12218:	b	12248 <close@plt+0x114c>
   1221c:	mov	r6, #31
   12220:	b	12248 <close@plt+0x114c>
   12224:	mov	r6, #32
   12228:	b	12248 <close@plt+0x114c>
   1222c:	mov	r6, #33	; 0x21
   12230:	b	12248 <close@plt+0x114c>
   12234:	mov	r6, #34	; 0x22
   12238:	b	12248 <close@plt+0x114c>
   1223c:	mov	r6, #35	; 0x23
   12240:	b	12248 <close@plt+0x114c>
   12244:	mov	r6, #36	; 0x24
   12248:	ldr	sl, [sp, #20]
   1224c:	ldr	r8, [sp, #24]
   12250:	movw	r4, #33108	; 0x8154
   12254:	movt	r4, #2
   12258:	ldr	r0, [r4, #12]
   1225c:	ldr	r1, [r4, #16]
   12260:	cmp	r1, r0
   12264:	bne	12078 <close@plt+0xf7c>
   12268:	b	12068 <close@plt+0xf6c>
   1226c:	ldr	sl, [sp, #20]
   12270:	ldr	r8, [sp, #24]
   12274:	b	122b8 <close@plt+0x11bc>
   12278:	movw	r1, #25821	; 0x64dd
   1227c:	mov	r0, #0
   12280:	mov	r2, #5
   12284:	movt	r1, #1
   12288:	bl	10f34 <dcgettext@plt>
   1228c:	ldr	r8, [sp, #24]
   12290:	mov	r3, r0
   12294:	mov	r0, #0
   12298:	mov	r1, #0
   1229c:	mov	r2, r4
   122a0:	str	r9, [sp]
   122a4:	str	r0, [sp, #28]
   122a8:	mov	r0, #0
   122ac:	str	r8, [sp, #4]
   122b0:	bl	10fac <error@plt>
   122b4:	ldr	sl, [sp, #20]
   122b8:	ldr	r6, [sp, #8]
   122bc:	mov	r0, r8
   122c0:	bl	12800 <close@plt+0x1704>
   122c4:	mov	r0, r6
   122c8:	bl	12800 <close@plt+0x1704>
   122cc:	b	119a8 <close@plt+0x8ac>
   122d0:	bl	12800 <close@plt+0x1704>
   122d4:	ldr	r0, [sp, #28]
   122d8:	and	r0, r0, #1
   122dc:	sub	sp, fp, #28
   122e0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   122e4:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   122e8:	add	fp, sp, #24
   122ec:	movw	r5, #33108	; 0x8154
   122f0:	mov	r4, r0
   122f4:	mov	r0, #1
   122f8:	mov	r8, #39	; 0x27
   122fc:	mov	r7, #92	; 0x5c
   12300:	movt	r5, #2
   12304:	ldrb	r1, [r4]
   12308:	sub	r2, r1, #58	; 0x3a
   1230c:	cmp	r2, #36	; 0x24
   12310:	bls	1233c <close@plt+0x1240>
   12314:	b	12430 <close@plt+0x1334>
   12318:	ldrb	r1, [r4], #1
   1231c:	add	r2, r0, #1
   12320:	str	r2, [r5, #12]
   12324:	strb	r1, [r0]
   12328:	mov	r0, r6
   1232c:	ldrb	r1, [r4]
   12330:	sub	r2, r1, #58	; 0x3a
   12334:	cmp	r2, #36	; 0x24
   12338:	bhi	12430 <close@plt+0x1334>
   1233c:	add	r1, pc, #4
   12340:	mov	r6, #1
   12344:	ldr	pc, [r1, r2, lsl #2]
   12348:	ldrdeq	r2, [r1], -ip
   1234c:	andeq	r2, r1, ip, lsl r4
   12350:	andeq	r2, r1, ip, lsl r4
   12354:	ldrdeq	r2, [r1], -ip
   12358:	andeq	r2, r1, ip, lsl r4
   1235c:	andeq	r2, r1, ip, lsl r4
   12360:	andeq	r2, r1, ip, lsl r4
   12364:	andeq	r2, r1, ip, lsl r4
   12368:	andeq	r2, r1, ip, lsl r4
   1236c:	andeq	r2, r1, ip, lsl r4
   12370:	andeq	r2, r1, ip, lsl r4
   12374:	andeq	r2, r1, ip, lsl r4
   12378:	andeq	r2, r1, ip, lsl r4
   1237c:	andeq	r2, r1, ip, lsl r4
   12380:	andeq	r2, r1, ip, lsl r4
   12384:	andeq	r2, r1, ip, lsl r4
   12388:	andeq	r2, r1, ip, lsl r4
   1238c:	andeq	r2, r1, ip, lsl r4
   12390:	andeq	r2, r1, ip, lsl r4
   12394:	andeq	r2, r1, ip, lsl r4
   12398:	andeq	r2, r1, ip, lsl r4
   1239c:	andeq	r2, r1, ip, lsl r4
   123a0:	andeq	r2, r1, ip, lsl r4
   123a4:	andeq	r2, r1, ip, lsl r4
   123a8:	andeq	r2, r1, ip, lsl r4
   123ac:	andeq	r2, r1, ip, lsl r4
   123b0:	andeq	r2, r1, ip, lsl r4
   123b4:	andeq	r2, r1, ip, lsl r4
   123b8:	andeq	r2, r1, ip, lsl r4
   123bc:	andeq	r2, r1, ip, lsl r4
   123c0:	andeq	r2, r1, ip, lsl r4
   123c4:	andeq	r2, r1, ip, lsl r4
   123c8:	andeq	r2, r1, ip, lsl r4
   123cc:	andeq	r2, r1, ip, lsl r4
   123d0:	andeq	r2, r1, r8, lsl r4
   123d4:	andeq	r2, r1, ip, lsl r4
   123d8:	andeq	r2, r1, r8, lsl r4
   123dc:	tst	r0, #1
   123e0:	mov	r6, #1
   123e4:	beq	1241c <close@plt+0x1320>
   123e8:	ldr	r0, [r5, #12]
   123ec:	ldr	r1, [r5, #16]
   123f0:	cmp	r1, r0
   123f4:	bne	12408 <close@plt+0x130c>
   123f8:	mov	r0, r5
   123fc:	mov	r1, #1
   12400:	bl	12c8c <_obstack_newchunk@@Base>
   12404:	ldr	r0, [r5, #12]
   12408:	add	r1, r0, #1
   1240c:	str	r1, [r5, #12]
   12410:	strb	r7, [r0]
   12414:	b	124dc <close@plt+0x13e0>
   12418:	eor	r6, r0, #1
   1241c:	ldr	r0, [r5, #12]
   12420:	ldr	r1, [r5, #16]
   12424:	cmp	r1, r0
   12428:	bne	12318 <close@plt+0x121c>
   1242c:	b	124f0 <close@plt+0x13f4>
   12430:	cmp	r1, #39	; 0x27
   12434:	beq	12458 <close@plt+0x135c>
   12438:	cmp	r1, #0
   1243c:	mov	r6, #1
   12440:	popeq	{r4, r5, r6, r7, r8, sl, fp, pc}
   12444:	ldr	r0, [r5, #12]
   12448:	ldr	r1, [r5, #16]
   1244c:	cmp	r1, r0
   12450:	bne	12318 <close@plt+0x121c>
   12454:	b	124f0 <close@plt+0x13f4>
   12458:	ldr	r0, [r5, #12]
   1245c:	ldr	r1, [r5, #16]
   12460:	cmp	r1, r0
   12464:	bne	12478 <close@plt+0x137c>
   12468:	mov	r0, r5
   1246c:	mov	r1, #1
   12470:	bl	12c8c <_obstack_newchunk@@Base>
   12474:	ldr	r0, [r5, #12]
   12478:	add	r1, r0, #1
   1247c:	str	r1, [r5, #12]
   12480:	strb	r8, [r0]
   12484:	ldr	r0, [r5, #12]
   12488:	ldr	r1, [r5, #16]
   1248c:	cmp	r1, r0
   12490:	bne	124a4 <close@plt+0x13a8>
   12494:	mov	r0, r5
   12498:	mov	r1, #1
   1249c:	bl	12c8c <_obstack_newchunk@@Base>
   124a0:	ldr	r0, [r5, #12]
   124a4:	add	r1, r0, #1
   124a8:	str	r1, [r5, #12]
   124ac:	strb	r7, [r0]
   124b0:	ldr	r0, [r5, #12]
   124b4:	ldr	r1, [r5, #16]
   124b8:	cmp	r1, r0
   124bc:	bne	124d0 <close@plt+0x13d4>
   124c0:	mov	r0, r5
   124c4:	mov	r1, #1
   124c8:	bl	12c8c <_obstack_newchunk@@Base>
   124cc:	ldr	r0, [r5, #12]
   124d0:	add	r1, r0, #1
   124d4:	str	r1, [r5, #12]
   124d8:	strb	r8, [r0]
   124dc:	mov	r6, #1
   124e0:	ldr	r0, [r5, #12]
   124e4:	ldr	r1, [r5, #16]
   124e8:	cmp	r1, r0
   124ec:	bne	12318 <close@plt+0x121c>
   124f0:	mov	r0, r5
   124f4:	mov	r1, #1
   124f8:	bl	12c8c <_obstack_newchunk@@Base>
   124fc:	ldr	r0, [r5, #12]
   12500:	b	12318 <close@plt+0x121c>
   12504:	sub	r0, r0, #1
   12508:	ldrb	r3, [r0, #1]!
   1250c:	cmp	r3, #47	; 0x2f
   12510:	beq	12508 <close@plt+0x140c>
   12514:	mov	r2, #0
   12518:	mov	r1, r0
   1251c:	uxtb	r3, r3
   12520:	cmp	r3, #47	; 0x2f
   12524:	beq	1254c <close@plt+0x1450>
   12528:	cmp	r3, #0
   1252c:	bxeq	lr
   12530:	tst	r2, #1
   12534:	mov	r2, #0
   12538:	movne	r0, r1
   1253c:	ldrb	r3, [r1, #1]!
   12540:	uxtb	r3, r3
   12544:	cmp	r3, #47	; 0x2f
   12548:	bne	12528 <close@plt+0x142c>
   1254c:	ldrb	r3, [r1, #1]!
   12550:	mov	r2, #1
   12554:	uxtb	r3, r3
   12558:	cmp	r3, #47	; 0x2f
   1255c:	bne	12528 <close@plt+0x142c>
   12560:	b	1254c <close@plt+0x1450>
   12564:	push	{r4, sl, fp, lr}
   12568:	add	fp, sp, #8
   1256c:	mov	r4, r0
   12570:	bl	11048 <strlen@plt>
   12574:	mov	r1, r0
   12578:	sub	r2, r4, #1
   1257c:	mov	r0, r1
   12580:	cmp	r1, #2
   12584:	popcc	{r4, sl, fp, pc}
   12588:	ldrb	r3, [r2, r0]
   1258c:	sub	r1, r0, #1
   12590:	cmp	r3, #47	; 0x2f
   12594:	beq	1257c <close@plt+0x1480>
   12598:	pop	{r4, sl, fp, pc}
   1259c:	cmp	r0, r1
   125a0:	moveq	r0, #0
   125a4:	bxeq	lr
   125a8:	ldrb	r3, [r1]
   125ac:	ldrb	ip, [r0]
   125b0:	sub	r2, r3, #65	; 0x41
   125b4:	cmp	r2, #26
   125b8:	sub	r2, ip, #65	; 0x41
   125bc:	addcc	r3, r3, #32
   125c0:	cmp	r2, #26
   125c4:	addcc	ip, ip, #32
   125c8:	uxtb	r3, r3
   125cc:	uxtb	r2, ip
   125d0:	cmp	r2, #0
   125d4:	beq	125e8 <close@plt+0x14ec>
   125d8:	add	r1, r1, #1
   125dc:	add	r0, r0, #1
   125e0:	cmp	r2, r3
   125e4:	beq	125a8 <close@plt+0x14ac>
   125e8:	sub	r0, r2, r3
   125ec:	bx	lr
   125f0:	movw	r1, #33152	; 0x8180
   125f4:	movt	r1, #2
   125f8:	str	r0, [r1, #4]
   125fc:	bx	lr
   12600:	movw	r1, #33152	; 0x8180
   12604:	movt	r1, #2
   12608:	strb	r0, [r1]
   1260c:	bx	lr
   12610:	push	{r4, r5, r6, sl, fp, lr}
   12614:	add	fp, sp, #16
   12618:	sub	sp, sp, #8
   1261c:	movw	r0, #33100	; 0x814c
   12620:	movt	r0, #2
   12624:	ldr	r0, [r0]
   12628:	bl	15c10 <_obstack_memory_used@@Base+0x2d48>
   1262c:	cmp	r0, #0
   12630:	beq	12658 <close@plt+0x155c>
   12634:	movw	r5, #33152	; 0x8180
   12638:	movt	r5, #2
   1263c:	ldrb	r0, [r5]
   12640:	cmp	r0, #0
   12644:	beq	12684 <close@plt+0x1588>
   12648:	bl	11054 <__errno_location@plt>
   1264c:	ldr	r0, [r0]
   12650:	cmp	r0, #32
   12654:	bne	12684 <close@plt+0x1588>
   12658:	movw	r0, #33088	; 0x8140
   1265c:	movt	r0, #2
   12660:	ldr	r0, [r0]
   12664:	bl	15c10 <_obstack_memory_used@@Base+0x2d48>
   12668:	cmp	r0, #0
   1266c:	subeq	sp, fp, #16
   12670:	popeq	{r4, r5, r6, sl, fp, pc}
   12674:	movw	r0, #32996	; 0x80e4
   12678:	movt	r0, #2
   1267c:	ldr	r0, [r0]
   12680:	bl	10ef8 <_exit@plt>
   12684:	movw	r1, #30799	; 0x784f
   12688:	mov	r0, #0
   1268c:	mov	r2, #5
   12690:	movt	r1, #1
   12694:	bl	10f34 <dcgettext@plt>
   12698:	ldr	r6, [r5, #4]
   1269c:	mov	r4, r0
   126a0:	bl	11054 <__errno_location@plt>
   126a4:	ldr	r5, [r0]
   126a8:	cmp	r6, #0
   126ac:	bne	126c8 <close@plt+0x15cc>
   126b0:	movw	r2, #30815	; 0x785f
   126b4:	mov	r0, #0
   126b8:	mov	r1, r5
   126bc:	mov	r3, r4
   126c0:	movt	r2, #1
   126c4:	b	126e8 <close@plt+0x15ec>
   126c8:	mov	r0, r6
   126cc:	bl	14b34 <_obstack_memory_used@@Base+0x1c6c>
   126d0:	movw	r2, #30811	; 0x785b
   126d4:	mov	r3, r0
   126d8:	str	r4, [sp]
   126dc:	mov	r0, #0
   126e0:	mov	r1, r5
   126e4:	movt	r2, #1
   126e8:	bl	10fac <error@plt>
   126ec:	movw	r0, #32996	; 0x80e4
   126f0:	movt	r0, #2
   126f4:	ldr	r0, [r0]
   126f8:	bl	10ef8 <_exit@plt>
   126fc:	push	{r4, r5, r6, sl, fp, lr}
   12700:	add	fp, sp, #16
   12704:	sub	sp, sp, #8
   12708:	mov	r4, r0
   1270c:	bl	11084 <fileno@plt>
   12710:	cmn	r0, #1
   12714:	ble	12788 <close@plt+0x168c>
   12718:	mov	r0, r4
   1271c:	bl	11000 <__freading@plt>
   12720:	cmp	r0, #0
   12724:	beq	12750 <close@plt+0x1654>
   12728:	mov	r0, r4
   1272c:	bl	11084 <fileno@plt>
   12730:	mov	r1, #1
   12734:	mov	r2, #0
   12738:	mov	r3, #0
   1273c:	str	r1, [sp]
   12740:	bl	10f7c <lseek64@plt>
   12744:	and	r0, r0, r1
   12748:	cmn	r0, #1
   1274c:	beq	12788 <close@plt+0x168c>
   12750:	mov	r0, r4
   12754:	bl	12798 <close@plt+0x169c>
   12758:	cmp	r0, #0
   1275c:	beq	12788 <close@plt+0x168c>
   12760:	bl	11054 <__errno_location@plt>
   12764:	ldr	r6, [r0]
   12768:	mov	r5, r0
   1276c:	mov	r0, r4
   12770:	bl	1109c <fclose@plt>
   12774:	cmp	r6, #0
   12778:	strne	r6, [r5]
   1277c:	mvnne	r0, #0
   12780:	sub	sp, fp, #16
   12784:	pop	{r4, r5, r6, sl, fp, pc}
   12788:	mov	r0, r4
   1278c:	sub	sp, fp, #16
   12790:	pop	{r4, r5, r6, sl, fp, lr}
   12794:	b	1109c <fclose@plt>
   12798:	push	{r4, sl, fp, lr}
   1279c:	add	fp, sp, #8
   127a0:	sub	sp, sp, #8
   127a4:	mov	r4, r0
   127a8:	cmp	r0, #0
   127ac:	beq	127c8 <close@plt+0x16cc>
   127b0:	mov	r0, r4
   127b4:	bl	11000 <__freading@plt>
   127b8:	cmp	r0, #0
   127bc:	ldrbne	r0, [r4, #1]
   127c0:	tstne	r0, #1
   127c4:	bne	127d8 <close@plt+0x16dc>
   127c8:	mov	r0, r4
   127cc:	sub	sp, fp, #8
   127d0:	pop	{r4, sl, fp, lr}
   127d4:	b	10ee0 <fflush@plt>
   127d8:	mov	r0, #1
   127dc:	mov	r2, #0
   127e0:	mov	r3, #0
   127e4:	str	r0, [sp]
   127e8:	mov	r0, r4
   127ec:	bl	12a94 <close@plt+0x1998>
   127f0:	mov	r0, r4
   127f4:	sub	sp, fp, #8
   127f8:	pop	{r4, sl, fp, lr}
   127fc:	b	10ee0 <fflush@plt>
   12800:	push	{r4, r5, r6, sl, fp, lr}
   12804:	add	fp, sp, #16
   12808:	mov	r4, r0
   1280c:	bl	11054 <__errno_location@plt>
   12810:	ldr	r6, [r0]
   12814:	mov	r5, r0
   12818:	mov	r0, r4
   1281c:	bl	10eec <free@plt>
   12820:	str	r6, [r5]
   12824:	pop	{r4, r5, r6, sl, fp, pc}
   12828:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1282c:	add	fp, sp, #28
   12830:	sub	sp, sp, #4
   12834:	mov	r5, r0
   12838:	mov	r0, r2
   1283c:	mov	r4, r2
   12840:	mov	r9, r1
   12844:	bl	11084 <fileno@plt>
   12848:	mov	r7, #0
   1284c:	cmp	r0, #0
   12850:	beq	12890 <close@plt+0x1794>
   12854:	cmp	r0, #1
   12858:	beq	1289c <close@plt+0x17a0>
   1285c:	cmp	r0, #2
   12860:	beq	12878 <close@plt+0x177c>
   12864:	mov	r0, #2
   12868:	mov	r1, #2
   1286c:	bl	10f40 <dup2@plt>
   12870:	subs	r7, r0, #2
   12874:	movwne	r7, #1
   12878:	mov	r0, #1
   1287c:	mov	r1, #1
   12880:	bl	10f40 <dup2@plt>
   12884:	subs	r6, r0, #1
   12888:	movwne	r6, #1
   1288c:	b	128a0 <close@plt+0x17a4>
   12890:	mov	r6, #0
   12894:	mov	r8, #0
   12898:	b	12968 <close@plt+0x186c>
   1289c:	mov	r6, #0
   128a0:	mov	r0, #0
   128a4:	mov	r1, #0
   128a8:	mov	sl, #0
   128ac:	bl	10f40 <dup2@plt>
   128b0:	cmp	r0, #0
   128b4:	mov	r8, #0
   128b8:	beq	128f8 <close@plt+0x17fc>
   128bc:	movw	r0, #30818	; 0x7862
   128c0:	mov	r1, #0
   128c4:	movt	r0, #1
   128c8:	bl	10fc4 <open64@plt>
   128cc:	cmp	r0, #0
   128d0:	beq	128f4 <close@plt+0x17f8>
   128d4:	cmn	r0, #1
   128d8:	ble	12a18 <close@plt+0x191c>
   128dc:	bl	110fc <close@plt>
   128e0:	bl	11054 <__errno_location@plt>
   128e4:	mov	r4, r0
   128e8:	mov	r0, #9
   128ec:	str	r0, [r4]
   128f0:	b	12a20 <close@plt+0x1924>
   128f4:	mov	r8, #1
   128f8:	cmp	r6, #0
   128fc:	beq	1291c <close@plt+0x1820>
   12900:	movw	r0, #30818	; 0x7862
   12904:	mov	r1, #0
   12908:	movt	r0, #1
   1290c:	bl	10fc4 <open64@plt>
   12910:	mov	sl, #1
   12914:	cmp	r0, #1
   12918:	bne	129e8 <close@plt+0x18ec>
   1291c:	cmp	r7, #0
   12920:	beq	12960 <close@plt+0x1864>
   12924:	movw	r0, #30818	; 0x7862
   12928:	mov	r1, #0
   1292c:	movt	r0, #1
   12930:	bl	10fc4 <open64@plt>
   12934:	mov	r7, #1
   12938:	cmp	r0, #2
   1293c:	beq	12964 <close@plt+0x1868>
   12940:	cmn	r0, #1
   12944:	ble	12a70 <close@plt+0x1974>
   12948:	bl	110fc <close@plt>
   1294c:	bl	11054 <__errno_location@plt>
   12950:	mov	r4, r0
   12954:	mov	r0, #9
   12958:	str	r0, [r4]
   1295c:	b	12a78 <close@plt+0x197c>
   12960:	mov	r7, #0
   12964:	mov	r6, sl
   12968:	mov	r0, r5
   1296c:	mov	r1, r9
   12970:	mov	r2, r4
   12974:	bl	11018 <freopen64@plt>
   12978:	mov	r5, r0
   1297c:	bl	11054 <__errno_location@plt>
   12980:	ldr	r9, [r0]
   12984:	mov	r4, r0
   12988:	cmp	r7, #0
   1298c:	beq	12998 <close@plt+0x189c>
   12990:	mov	r0, #2
   12994:	bl	110fc <close@plt>
   12998:	cmp	r6, #0
   1299c:	beq	129a8 <close@plt+0x18ac>
   129a0:	mov	r0, #1
   129a4:	bl	110fc <close@plt>
   129a8:	cmp	r8, #0
   129ac:	beq	129cc <close@plt+0x18d0>
   129b0:	mov	r0, #0
   129b4:	bl	110fc <close@plt>
   129b8:	cmp	r5, #0
   129bc:	beq	129d4 <close@plt+0x18d8>
   129c0:	mov	r0, r5
   129c4:	sub	sp, fp, #28
   129c8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   129cc:	cmp	r5, #0
   129d0:	bne	129c0 <close@plt+0x18c4>
   129d4:	mov	r5, #0
   129d8:	str	r9, [r4]
   129dc:	mov	r0, r5
   129e0:	sub	sp, fp, #28
   129e4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   129e8:	cmn	r0, #1
   129ec:	ble	12a38 <close@plt+0x193c>
   129f0:	bl	110fc <close@plt>
   129f4:	bl	11054 <__errno_location@plt>
   129f8:	mov	r4, r0
   129fc:	mov	r0, #9
   12a00:	str	r0, [r4]
   12a04:	ldr	r9, [r4]
   12a08:	mov	r5, #0
   12a0c:	cmp	r7, #0
   12a10:	beq	129a0 <close@plt+0x18a4>
   12a14:	b	12a50 <close@plt+0x1954>
   12a18:	bl	11054 <__errno_location@plt>
   12a1c:	mov	r4, r0
   12a20:	ldr	r9, [r4]
   12a24:	mov	r8, #1
   12a28:	mov	r5, #0
   12a2c:	cmp	r7, #0
   12a30:	bne	12990 <close@plt+0x1894>
   12a34:	b	12998 <close@plt+0x189c>
   12a38:	bl	11054 <__errno_location@plt>
   12a3c:	mov	r4, r0
   12a40:	ldr	r9, [r4]
   12a44:	mov	r5, #0
   12a48:	cmp	r7, #0
   12a4c:	beq	129a0 <close@plt+0x18a4>
   12a50:	mov	r0, #2
   12a54:	bl	110fc <close@plt>
   12a58:	mov	r0, #1
   12a5c:	bl	110fc <close@plt>
   12a60:	mov	r5, #0
   12a64:	cmp	r8, #0
   12a68:	beq	129d4 <close@plt+0x18d8>
   12a6c:	b	129b0 <close@plt+0x18b4>
   12a70:	bl	11054 <__errno_location@plt>
   12a74:	mov	r4, r0
   12a78:	ldr	r9, [r4]
   12a7c:	mov	r0, #2
   12a80:	bl	110fc <close@plt>
   12a84:	mov	r5, #0
   12a88:	cmp	sl, #0
   12a8c:	bne	129a0 <close@plt+0x18a4>
   12a90:	b	129a8 <close@plt+0x18ac>
   12a94:	push	{r4, r5, r6, r7, fp, lr}
   12a98:	add	fp, sp, #16
   12a9c:	sub	sp, sp, #8
   12aa0:	mov	r4, r0
   12aa4:	ldr	r0, [r0, #4]
   12aa8:	mov	r5, r3
   12aac:	mov	r6, r2
   12ab0:	ldr	r1, [r4, #8]
   12ab4:	cmp	r1, r0
   12ab8:	bne	12ad4 <close@plt+0x19d8>
   12abc:	ldrd	r0, [r4, #16]
   12ac0:	cmp	r1, r0
   12ac4:	bne	12ad4 <close@plt+0x19d8>
   12ac8:	ldr	r0, [r4, #36]	; 0x24
   12acc:	cmp	r0, #0
   12ad0:	beq	12aec <close@plt+0x19f0>
   12ad4:	mov	r0, r4
   12ad8:	mov	r2, r6
   12adc:	mov	r3, r5
   12ae0:	sub	sp, fp, #16
   12ae4:	pop	{r4, r5, r6, r7, fp, lr}
   12ae8:	b	110a8 <fseeko64@plt>
   12aec:	ldr	r7, [fp, #8]
   12af0:	mov	r0, r4
   12af4:	bl	11084 <fileno@plt>
   12af8:	mov	r2, r6
   12afc:	mov	r3, r5
   12b00:	str	r7, [sp]
   12b04:	bl	10f7c <lseek64@plt>
   12b08:	and	r2, r0, r1
   12b0c:	cmn	r2, #1
   12b10:	mvneq	r0, #0
   12b14:	subeq	sp, fp, #16
   12b18:	popeq	{r4, r5, r6, r7, fp, pc}
   12b1c:	strd	r0, [r4, #80]	; 0x50
   12b20:	ldr	r0, [r4]
   12b24:	bic	r0, r0, #16
   12b28:	str	r0, [r4]
   12b2c:	mov	r0, #0
   12b30:	sub	sp, fp, #16
   12b34:	pop	{r4, r5, r6, r7, fp, pc}

00012b38 <_obstack_begin@@Base>:
   12b38:	push	{r4, r5, r6, sl, fp, lr}
   12b3c:	add	fp, sp, #16
   12b40:	cmp	r1, #0
   12b44:	mov	r4, r0
   12b48:	str	r3, [r0, #28]
   12b4c:	mov	r5, r2
   12b50:	movweq	r1, #4072	; 0xfe8
   12b54:	cmp	r2, #0
   12b58:	str	r1, [r0]
   12b5c:	ldr	r0, [fp, #8]
   12b60:	movweq	r5, #8
   12b64:	sub	r6, r5, #1
   12b68:	str	r0, [r4, #32]
   12b6c:	str	r6, [r4, #24]
   12b70:	ldrb	r0, [r4, #40]	; 0x28
   12b74:	and	r0, r0, #254	; 0xfe
   12b78:	strb	r0, [r4, #40]	; 0x28
   12b7c:	mov	r0, r1
   12b80:	blx	r3
   12b84:	cmp	r0, #0
   12b88:	str	r0, [r4, #4]
   12b8c:	addne	r1, r6, r0
   12b90:	rsbne	r2, r5, #0
   12b94:	addne	r1, r1, #8
   12b98:	andne	r1, r1, r2
   12b9c:	strne	r1, [r4, #12]
   12ba0:	strne	r1, [r4, #8]
   12ba4:	ldrne	r1, [r4]
   12ba8:	addne	r1, r0, r1
   12bac:	strne	r1, [r0]
   12bb0:	strne	r1, [r4, #16]
   12bb4:	movne	r1, #0
   12bb8:	strne	r1, [r0, #4]
   12bbc:	ldrbne	r0, [r4, #40]	; 0x28
   12bc0:	andne	r0, r0, #249	; 0xf9
   12bc4:	strbne	r0, [r4, #40]	; 0x28
   12bc8:	movne	r0, #1
   12bcc:	popne	{r4, r5, r6, sl, fp, pc}
   12bd0:	movw	r0, #33000	; 0x80e8
   12bd4:	movt	r0, #2
   12bd8:	ldr	r0, [r0]
   12bdc:	blx	r0

00012be0 <_obstack_begin_1@@Base>:
   12be0:	push	{r4, r5, r6, sl, fp, lr}
   12be4:	add	fp, sp, #16
   12be8:	cmp	r1, #0
   12bec:	mov	r4, r0
   12bf0:	str	r3, [r0, #28]
   12bf4:	mov	r5, r2
   12bf8:	movweq	r1, #4072	; 0xfe8
   12bfc:	cmp	r2, #0
   12c00:	str	r1, [r0]
   12c04:	ldr	r0, [fp, #8]
   12c08:	movweq	r5, #8
   12c0c:	sub	r6, r5, #1
   12c10:	str	r0, [r4, #32]
   12c14:	ldr	r0, [fp, #12]
   12c18:	str	r0, [r4, #36]	; 0x24
   12c1c:	str	r6, [r4, #24]
   12c20:	ldrb	r2, [r4, #40]	; 0x28
   12c24:	orr	r2, r2, #1
   12c28:	strb	r2, [r4, #40]	; 0x28
   12c2c:	blx	r3
   12c30:	cmp	r0, #0
   12c34:	str	r0, [r4, #4]
   12c38:	addne	r1, r6, r0
   12c3c:	rsbne	r2, r5, #0
   12c40:	addne	r1, r1, #8
   12c44:	andne	r1, r1, r2
   12c48:	strne	r1, [r4, #12]
   12c4c:	strne	r1, [r4, #8]
   12c50:	ldrne	r1, [r4]
   12c54:	addne	r1, r0, r1
   12c58:	strne	r1, [r0]
   12c5c:	strne	r1, [r4, #16]
   12c60:	movne	r1, #0
   12c64:	strne	r1, [r0, #4]
   12c68:	ldrbne	r0, [r4, #40]	; 0x28
   12c6c:	andne	r0, r0, #249	; 0xf9
   12c70:	strbne	r0, [r4, #40]	; 0x28
   12c74:	movne	r0, #1
   12c78:	popne	{r4, r5, r6, sl, fp, pc}
   12c7c:	movw	r0, #33000	; 0x80e8
   12c80:	movt	r0, #2
   12c84:	ldr	r0, [r0]
   12c88:	blx	r0

00012c8c <_obstack_newchunk@@Base>:
   12c8c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12c90:	add	fp, sp, #28
   12c94:	sub	sp, sp, #4
   12c98:	mov	r4, r0
   12c9c:	ldr	r2, [r0]
   12ca0:	ldr	r0, [r0, #8]
   12ca4:	ldr	r3, [r4, #12]
   12ca8:	sub	r9, r3, r0
   12cac:	ldr	r0, [r4, #24]
   12cb0:	mov	r3, #0
   12cb4:	add	r1, r9, r1
   12cb8:	adds	r6, r1, r0
   12cbc:	adc	r0, r3, #0
   12cc0:	mov	r3, #100	; 0x64
   12cc4:	add	r3, r3, r9, lsr #3
   12cc8:	adds	r7, r3, r6
   12ccc:	movcs	r7, r6
   12cd0:	cmp	r7, r2
   12cd4:	movcc	r7, r2
   12cd8:	cmp	r1, r9
   12cdc:	bcc	12de0 <_obstack_newchunk@@Base+0x154>
   12ce0:	cmp	r0, #0
   12ce4:	bne	12de0 <_obstack_newchunk@@Base+0x154>
   12ce8:	ldrb	r0, [r4, #40]	; 0x28
   12cec:	ldr	r8, [r4, #4]
   12cf0:	tst	r0, #1
   12cf4:	bne	12d14 <_obstack_newchunk@@Base+0x88>
   12cf8:	ldr	r1, [r4, #28]
   12cfc:	mov	r0, r7
   12d00:	blx	r1
   12d04:	mov	r6, r0
   12d08:	cmp	r0, #0
   12d0c:	bne	12d30 <_obstack_newchunk@@Base+0xa4>
   12d10:	b	12de0 <_obstack_newchunk@@Base+0x154>
   12d14:	ldr	r2, [r4, #28]
   12d18:	ldr	r0, [r4, #36]	; 0x24
   12d1c:	mov	r1, r7
   12d20:	blx	r2
   12d24:	mov	r6, r0
   12d28:	cmp	r0, #0
   12d2c:	beq	12de0 <_obstack_newchunk@@Base+0x154>
   12d30:	add	r0, r6, r7
   12d34:	str	r6, [r4, #4]
   12d38:	str	r8, [r6, #4]
   12d3c:	mov	r2, r9
   12d40:	str	r0, [r4, #16]
   12d44:	str	r0, [r6]
   12d48:	ldr	r5, [r4, #24]
   12d4c:	ldr	sl, [r4, #8]
   12d50:	add	r0, r5, r6
   12d54:	mov	r1, sl
   12d58:	add	r0, r0, #8
   12d5c:	bic	r7, r0, r5
   12d60:	mov	r0, r7
   12d64:	bl	10f04 <memcpy@plt>
   12d68:	ldrb	r0, [r4, #40]	; 0x28
   12d6c:	tst	r0, #2
   12d70:	bne	12dc0 <_obstack_newchunk@@Base+0x134>
   12d74:	add	r1, r5, r8
   12d78:	mvn	r0, r5
   12d7c:	add	r1, r1, #8
   12d80:	and	r0, r1, r0
   12d84:	cmp	sl, r0
   12d88:	bne	12dc0 <_obstack_newchunk@@Base+0x134>
   12d8c:	ldr	r0, [r8, #4]
   12d90:	str	r0, [r6, #4]
   12d94:	ldrb	r0, [r4, #40]	; 0x28
   12d98:	tst	r0, #1
   12d9c:	bne	12db0 <_obstack_newchunk@@Base+0x124>
   12da0:	ldr	r1, [r4, #32]
   12da4:	mov	r0, r8
   12da8:	blx	r1
   12dac:	b	12dc0 <_obstack_newchunk@@Base+0x134>
   12db0:	ldr	r2, [r4, #32]
   12db4:	ldr	r0, [r4, #36]	; 0x24
   12db8:	mov	r1, r8
   12dbc:	blx	r2
   12dc0:	add	r0, r7, r9
   12dc4:	str	r7, [r4, #8]
   12dc8:	str	r0, [r4, #12]
   12dcc:	ldrb	r0, [r4, #40]	; 0x28
   12dd0:	and	r0, r0, #253	; 0xfd
   12dd4:	strb	r0, [r4, #40]	; 0x28
   12dd8:	sub	sp, fp, #28
   12ddc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12de0:	movw	r0, #33000	; 0x80e8
   12de4:	movt	r0, #2
   12de8:	ldr	r0, [r0]
   12dec:	blx	r0

00012df0 <_obstack_allocated_p@@Base>:
   12df0:	ldr	r2, [r0, #4]
   12df4:	mov	r0, #0
   12df8:	cmp	r2, #0
   12dfc:	bxeq	lr
   12e00:	cmp	r2, r1
   12e04:	bcc	12e1c <_obstack_allocated_p@@Base+0x2c>
   12e08:	ldr	r2, [r2, #4]
   12e0c:	cmp	r2, #0
   12e10:	bxeq	lr
   12e14:	cmp	r2, r1
   12e18:	bcs	12e08 <_obstack_allocated_p@@Base+0x18>
   12e1c:	ldr	r3, [r2]
   12e20:	cmp	r3, r1
   12e24:	bcc	12e08 <_obstack_allocated_p@@Base+0x18>
   12e28:	mov	r0, #1
   12e2c:	bx	lr

00012e30 <_obstack_free@@Base>:
   12e30:	push	{r4, r5, r6, sl, fp, lr}
   12e34:	add	fp, sp, #16
   12e38:	mov	r5, r1
   12e3c:	ldr	r1, [r0, #4]
   12e40:	cmp	r1, #0
   12e44:	beq	12ea4 <_obstack_free@@Base+0x74>
   12e48:	mov	r4, r0
   12e4c:	cmp	r1, r5
   12e50:	bcs	12e60 <_obstack_free@@Base+0x30>
   12e54:	ldr	r0, [r1]
   12e58:	cmp	r0, r5
   12e5c:	bcs	12eb0 <_obstack_free@@Base+0x80>
   12e60:	ldrb	r0, [r4, #40]	; 0x28
   12e64:	ldr	r6, [r1, #4]
   12e68:	tst	r0, #1
   12e6c:	bne	12e80 <_obstack_free@@Base+0x50>
   12e70:	ldr	r2, [r4, #32]
   12e74:	mov	r0, r1
   12e78:	blx	r2
   12e7c:	b	12e8c <_obstack_free@@Base+0x5c>
   12e80:	ldr	r2, [r4, #32]
   12e84:	ldr	r0, [r4, #36]	; 0x24
   12e88:	blx	r2
   12e8c:	ldrb	r0, [r4, #40]	; 0x28
   12e90:	cmp	r6, #0
   12e94:	mov	r1, r6
   12e98:	orr	r0, r0, #2
   12e9c:	strb	r0, [r4, #40]	; 0x28
   12ea0:	bne	12e4c <_obstack_free@@Base+0x1c>
   12ea4:	cmp	r5, #0
   12ea8:	popeq	{r4, r5, r6, sl, fp, pc}
   12eac:	bl	110f0 <abort@plt>
   12eb0:	str	r5, [r4, #8]
   12eb4:	str	r5, [r4, #12]
   12eb8:	ldr	r0, [r1]
   12ebc:	str	r1, [r4, #4]
   12ec0:	str	r0, [r4, #16]
   12ec4:	pop	{r4, r5, r6, sl, fp, pc}

00012ec8 <_obstack_memory_used@@Base>:
   12ec8:	ldr	r1, [r0, #4]
   12ecc:	mov	r0, #0
   12ed0:	b	12ee4 <_obstack_memory_used@@Base+0x1c>
   12ed4:	ldr	r2, [r1]
   12ed8:	sub	r0, r0, r1
   12edc:	ldr	r1, [r1, #4]
   12ee0:	add	r0, r0, r2
   12ee4:	cmp	r1, #0
   12ee8:	bxeq	lr
   12eec:	b	12ed4 <_obstack_memory_used@@Base+0xc>
   12ef0:	push	{fp, lr}
   12ef4:	mov	fp, sp
   12ef8:	movw	r0, #33088	; 0x8140
   12efc:	movw	r1, #30828	; 0x786c
   12f00:	mov	r2, #5
   12f04:	movt	r0, #2
   12f08:	movt	r1, #1
   12f0c:	ldr	r4, [r0]
   12f10:	mov	r0, #0
   12f14:	bl	10f34 <dcgettext@plt>
   12f18:	movw	r2, #31096	; 0x7978
   12f1c:	mov	r3, r0
   12f20:	mov	r0, r4
   12f24:	mov	r1, #1
   12f28:	movt	r2, #1
   12f2c:	bl	11090 <__fprintf_chk@plt>
   12f30:	movw	r0, #32996	; 0x80e4
   12f34:	movt	r0, #2
   12f38:	ldr	r0, [r0]
   12f3c:	bl	1103c <exit@plt>
   12f40:	push	{r4, r5, fp, lr}
   12f44:	add	fp, sp, #8
   12f48:	cmp	r0, #0
   12f4c:	beq	12fe0 <_obstack_memory_used@@Base+0x118>
   12f50:	mov	r1, #47	; 0x2f
   12f54:	mov	r4, r0
   12f58:	bl	110c0 <strrchr@plt>
   12f5c:	cmp	r0, #0
   12f60:	mov	r5, r4
   12f64:	addne	r5, r0, #1
   12f68:	sub	r0, r5, r4
   12f6c:	cmp	r0, #7
   12f70:	blt	12fc4 <_obstack_memory_used@@Base+0xfc>
   12f74:	movw	r1, #30901	; 0x78b5
   12f78:	sub	r0, r5, #7
   12f7c:	mov	r2, #7
   12f80:	movt	r1, #1
   12f84:	bl	110e4 <strncmp@plt>
   12f88:	cmp	r0, #0
   12f8c:	bne	12fc4 <_obstack_memory_used@@Base+0xfc>
   12f90:	movw	r1, #30909	; 0x78bd
   12f94:	mov	r0, r5
   12f98:	mov	r2, #3
   12f9c:	movt	r1, #1
   12fa0:	bl	110e4 <strncmp@plt>
   12fa4:	cmp	r0, #0
   12fa8:	beq	12fb4 <_obstack_memory_used@@Base+0xec>
   12fac:	mov	r4, r5
   12fb0:	b	12fc4 <_obstack_memory_used@@Base+0xfc>
   12fb4:	movw	r0, #33072	; 0x8130
   12fb8:	add	r4, r5, #3
   12fbc:	movt	r0, #2
   12fc0:	str	r4, [r0]
   12fc4:	movw	r0, #33076	; 0x8134
   12fc8:	movt	r0, #2
   12fcc:	str	r4, [r0]
   12fd0:	movw	r0, #33160	; 0x8188
   12fd4:	movt	r0, #2
   12fd8:	str	r4, [r0]
   12fdc:	pop	{r4, r5, fp, pc}
   12fe0:	movw	r0, #33088	; 0x8140
   12fe4:	mov	r1, #55	; 0x37
   12fe8:	mov	r2, #1
   12fec:	movt	r0, #2
   12ff0:	ldr	r3, [r0]
   12ff4:	movw	r0, #30845	; 0x787d
   12ff8:	movt	r0, #1
   12ffc:	bl	10f70 <fwrite@plt>
   13000:	bl	110f0 <abort@plt>
   13004:	push	{r4, r5, r6, sl, fp, lr}
   13008:	add	fp, sp, #16
   1300c:	mov	r4, r0
   13010:	movw	r0, #33168	; 0x8190
   13014:	movt	r0, #2
   13018:	cmp	r4, #0
   1301c:	moveq	r4, r0
   13020:	bl	11054 <__errno_location@plt>
   13024:	ldr	r6, [r0]
   13028:	mov	r5, r0
   1302c:	mov	r0, r4
   13030:	mov	r1, #48	; 0x30
   13034:	bl	159f4 <_obstack_memory_used@@Base+0x2b2c>
   13038:	str	r6, [r5]
   1303c:	pop	{r4, r5, r6, sl, fp, pc}
   13040:	movw	r1, #33168	; 0x8190
   13044:	cmp	r0, #0
   13048:	movt	r1, #2
   1304c:	movne	r1, r0
   13050:	ldr	r0, [r1]
   13054:	bx	lr
   13058:	movw	r2, #33168	; 0x8190
   1305c:	cmp	r0, #0
   13060:	movt	r2, #2
   13064:	movne	r2, r0
   13068:	str	r1, [r2]
   1306c:	bx	lr
   13070:	movw	r3, #33168	; 0x8190
   13074:	cmp	r0, #0
   13078:	movt	r3, #2
   1307c:	movne	r3, r0
   13080:	ubfx	r0, r1, #5, #3
   13084:	and	r1, r1, #31
   13088:	add	r0, r3, r0, lsl #2
   1308c:	ldr	r3, [r0, #8]
   13090:	eor	r2, r2, r3, lsr r1
   13094:	and	r2, r2, #1
   13098:	eor	r2, r3, r2, lsl r1
   1309c:	str	r2, [r0, #8]
   130a0:	mov	r0, #1
   130a4:	and	r0, r0, r3, lsr r1
   130a8:	bx	lr
   130ac:	movw	r2, #33168	; 0x8190
   130b0:	cmp	r0, #0
   130b4:	movt	r2, #2
   130b8:	movne	r2, r0
   130bc:	ldr	r0, [r2, #4]
   130c0:	str	r1, [r2, #4]
   130c4:	bx	lr
   130c8:	movw	r3, #33168	; 0x8190
   130cc:	cmp	r0, #0
   130d0:	movt	r3, #2
   130d4:	movne	r3, r0
   130d8:	cmp	r1, #0
   130dc:	mov	r0, #10
   130e0:	cmpne	r2, #0
   130e4:	str	r0, [r3]
   130e8:	bne	130f8 <_obstack_memory_used@@Base+0x230>
   130ec:	push	{fp, lr}
   130f0:	mov	fp, sp
   130f4:	bl	110f0 <abort@plt>
   130f8:	str	r1, [r3, #40]	; 0x28
   130fc:	str	r2, [r3, #44]	; 0x2c
   13100:	bx	lr
   13104:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13108:	add	fp, sp, #28
   1310c:	sub	sp, sp, #20
   13110:	mov	r7, r0
   13114:	ldr	r0, [fp, #8]
   13118:	movw	r5, #33168	; 0x8190
   1311c:	mov	r8, r3
   13120:	mov	r9, r2
   13124:	mov	sl, r1
   13128:	movt	r5, #2
   1312c:	cmp	r0, #0
   13130:	movne	r5, r0
   13134:	bl	11054 <__errno_location@plt>
   13138:	mov	r4, r0
   1313c:	ldm	r5, {r0, r1}
   13140:	ldr	r2, [r5, #40]	; 0x28
   13144:	ldr	r3, [r5, #44]	; 0x2c
   13148:	add	r5, r5, #8
   1314c:	ldr	r6, [r4]
   13150:	stm	sp, {r0, r1, r5}
   13154:	str	r2, [sp, #12]
   13158:	str	r3, [sp, #16]
   1315c:	mov	r0, r7
   13160:	mov	r1, sl
   13164:	mov	r2, r9
   13168:	mov	r3, r8
   1316c:	bl	1317c <_obstack_memory_used@@Base+0x2b4>
   13170:	str	r6, [r4]
   13174:	sub	sp, fp, #28
   13178:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1317c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13180:	add	fp, sp, #28
   13184:	sub	sp, sp, #156	; 0x9c
   13188:	str	r0, [sp, #76]	; 0x4c
   1318c:	ldr	r0, [fp, #12]
   13190:	mov	r6, r1
   13194:	str	r3, [sp, #84]	; 0x54
   13198:	str	r2, [fp, #-84]	; 0xffffffac
   1319c:	and	r1, r0, #4
   131a0:	str	r1, [sp, #24]
   131a4:	and	r1, r0, #1
   131a8:	str	r1, [sp, #28]
   131ac:	ubfx	r8, r0, #1, #1
   131b0:	bl	10f88 <__ctype_get_mb_cur_max@plt>
   131b4:	str	r0, [sp, #32]
   131b8:	ldr	r0, [fp, #24]
   131bc:	ldr	r7, [fp, #8]
   131c0:	mov	r1, #0
   131c4:	mov	r2, #0
   131c8:	mov	r4, #1
   131cc:	str	r1, [sp, #52]	; 0x34
   131d0:	str	r0, [sp, #72]	; 0x48
   131d4:	ldr	r0, [fp, #20]
   131d8:	str	r0, [sp, #68]	; 0x44
   131dc:	mov	r0, #0
   131e0:	str	r0, [sp, #48]	; 0x30
   131e4:	mov	r0, #0
   131e8:	str	r0, [sp, #92]	; 0x5c
   131ec:	mov	r0, #0
   131f0:	str	r0, [fp, #-76]	; 0xffffffb4
   131f4:	mov	r0, #0
   131f8:	cmp	r7, #10
   131fc:	bhi	144e4 <_obstack_memory_used@@Base+0x161c>
   13200:	add	r1, pc, #28
   13204:	mov	sl, r6
   13208:	ldr	r6, [sp, #76]	; 0x4c
   1320c:	ldr	ip, [fp, #-84]	; 0xffffffac
   13210:	ldr	lr, [sp, #84]	; 0x54
   13214:	mov	r9, #0
   13218:	mov	r3, #1
   1321c:	mov	r5, #0
   13220:	ldr	pc, [r1, r7, lsl #2]
   13224:	strdeq	r3, [r1], -r4
   13228:	andeq	r3, r1, r0, lsr r3
   1322c:	andeq	r3, r1, r4, lsl #6
   13230:	andeq	r3, r1, ip, ror #5
   13234:	andeq	r3, r1, r4, lsr #6
   13238:	andeq	r3, r1, r8, asr r3
   1323c:	andeq	r3, r1, r4, lsl r3
   13240:	andeq	r3, r1, r4, ror #10
   13244:	andeq	r3, r1, r0, asr r2
   13248:	andeq	r3, r1, r0, asr r2
   1324c:	strdeq	r3, [r1], -r8
   13250:	mov	r9, r4
   13254:	movw	r4, #30985	; 0x7909
   13258:	mov	r5, r8
   1325c:	mov	r8, r2
   13260:	mov	r0, #0
   13264:	mov	r2, #5
   13268:	movt	r4, #1
   1326c:	mov	r1, r4
   13270:	bl	10f34 <dcgettext@plt>
   13274:	cmp	r0, r4
   13278:	str	r0, [sp, #68]	; 0x44
   1327c:	bne	1340c <_obstack_memory_used@@Base+0x544>
   13280:	bl	15c94 <_obstack_memory_used@@Base+0x2dcc>
   13284:	ldrb	r1, [r0]
   13288:	and	r1, r1, #223	; 0xdf
   1328c:	cmp	r1, #71	; 0x47
   13290:	beq	133d8 <_obstack_memory_used@@Base+0x510>
   13294:	cmp	r1, #85	; 0x55
   13298:	bne	133f0 <_obstack_memory_used@@Base+0x528>
   1329c:	ldrb	r1, [r0, #1]
   132a0:	and	r1, r1, #223	; 0xdf
   132a4:	cmp	r1, #84	; 0x54
   132a8:	bne	133f0 <_obstack_memory_used@@Base+0x528>
   132ac:	ldrb	r1, [r0, #2]
   132b0:	and	r1, r1, #223	; 0xdf
   132b4:	cmp	r1, #70	; 0x46
   132b8:	bne	133f0 <_obstack_memory_used@@Base+0x528>
   132bc:	ldrb	r1, [r0, #3]
   132c0:	cmp	r1, #45	; 0x2d
   132c4:	ldrbeq	r1, [r0, #4]
   132c8:	cmpeq	r1, #56	; 0x38
   132cc:	bne	133f0 <_obstack_memory_used@@Base+0x528>
   132d0:	ldrb	r0, [r0, #5]
   132d4:	cmp	r0, #0
   132d8:	movw	r0, #30987	; 0x790b
   132dc:	movt	r0, #1
   132e0:	str	r0, [sp, #68]	; 0x44
   132e4:	bne	133f0 <_obstack_memory_used@@Base+0x528>
   132e8:	b	1340c <_obstack_memory_used@@Base+0x544>
   132ec:	mov	r0, #1
   132f0:	b	13330 <_obstack_memory_used@@Base+0x468>
   132f4:	mov	r7, #0
   132f8:	mov	r9, #0
   132fc:	mov	r3, r0
   13300:	b	133d0 <_obstack_memory_used@@Base+0x508>
   13304:	tst	r8, #1
   13308:	bne	13330 <_obstack_memory_used@@Base+0x468>
   1330c:	mov	r3, r0
   13310:	b	13388 <_obstack_memory_used@@Base+0x4c0>
   13314:	mov	r0, #1
   13318:	mov	r9, #0
   1331c:	mov	r7, #5
   13320:	b	1336c <_obstack_memory_used@@Base+0x4a4>
   13324:	mov	r3, #1
   13328:	tst	r8, #1
   1332c:	beq	13388 <_obstack_memory_used@@Base+0x4c0>
   13330:	mov	r1, #1
   13334:	mov	r9, #0
   13338:	mov	r7, #2
   1333c:	mov	r3, r0
   13340:	mov	r5, #1
   13344:	str	r1, [fp, #-76]	; 0xffffffb4
   13348:	movw	r1, #25339	; 0x62fb
   1334c:	movt	r1, #1
   13350:	str	r1, [sp, #92]	; 0x5c
   13354:	b	13564 <_obstack_memory_used@@Base+0x69c>
   13358:	mov	r7, #5
   1335c:	tst	r8, #1
   13360:	beq	133a8 <_obstack_memory_used@@Base+0x4e0>
   13364:	mov	r0, #1
   13368:	mov	r9, #0
   1336c:	str	r0, [fp, #-76]	; 0xffffffb4
   13370:	movw	r0, #30983	; 0x7907
   13374:	mov	r3, #1
   13378:	mov	r5, #1
   1337c:	movt	r0, #1
   13380:	str	r0, [sp, #92]	; 0x5c
   13384:	b	13564 <_obstack_memory_used@@Base+0x69c>
   13388:	cmp	sl, #0
   1338c:	mov	r9, #1
   13390:	mov	r7, #2
   13394:	movne	r0, #39	; 0x27
   13398:	strbne	r0, [r6]
   1339c:	movw	r0, #25339	; 0x62fb
   133a0:	movt	r0, #1
   133a4:	b	133c4 <_obstack_memory_used@@Base+0x4fc>
   133a8:	cmp	sl, #0
   133ac:	mov	r9, #1
   133b0:	mov	r3, #1
   133b4:	movne	r0, #34	; 0x22
   133b8:	strbne	r0, [r6]
   133bc:	movw	r0, #30983	; 0x7907
   133c0:	movt	r0, #1
   133c4:	str	r0, [sp, #92]	; 0x5c
   133c8:	mov	r0, #1
   133cc:	str	r0, [fp, #-76]	; 0xffffffb4
   133d0:	mov	r5, #0
   133d4:	b	13564 <_obstack_memory_used@@Base+0x69c>
   133d8:	ldrb	r1, [r0, #1]
   133dc:	and	r1, r1, #223	; 0xdf
   133e0:	cmp	r1, #66	; 0x42
   133e4:	ldrbeq	r1, [r0, #2]
   133e8:	cmpeq	r1, #49	; 0x31
   133ec:	beq	1430c <_obstack_memory_used@@Base+0x1444>
   133f0:	movw	r0, #25339	; 0x62fb
   133f4:	movw	r1, #30983	; 0x7907
   133f8:	cmp	r7, #9
   133fc:	movt	r0, #1
   13400:	movt	r1, #1
   13404:	moveq	r0, r1
   13408:	str	r0, [sp, #68]	; 0x44
   1340c:	movw	r4, #25339	; 0x62fb
   13410:	mov	r0, #0
   13414:	mov	r2, #5
   13418:	movt	r4, #1
   1341c:	mov	r1, r4
   13420:	bl	10f34 <dcgettext@plt>
   13424:	cmp	r0, r4
   13428:	str	r0, [sp, #72]	; 0x48
   1342c:	beq	1343c <_obstack_memory_used@@Base+0x574>
   13430:	mov	r4, r9
   13434:	mov	r2, r8
   13438:	b	134f4 <_obstack_memory_used@@Base+0x62c>
   1343c:	bl	15c94 <_obstack_memory_used@@Base+0x2dcc>
   13440:	ldrb	r1, [r0]
   13444:	mov	r4, r9
   13448:	and	r1, r1, #223	; 0xdf
   1344c:	cmp	r1, #71	; 0x47
   13450:	beq	134ac <_obstack_memory_used@@Base+0x5e4>
   13454:	cmp	r1, #85	; 0x55
   13458:	mov	r2, r8
   1345c:	bne	134d4 <_obstack_memory_used@@Base+0x60c>
   13460:	ldrb	r1, [r0, #1]
   13464:	and	r1, r1, #223	; 0xdf
   13468:	cmp	r1, #84	; 0x54
   1346c:	bne	134d4 <_obstack_memory_used@@Base+0x60c>
   13470:	ldrb	r1, [r0, #2]
   13474:	and	r1, r1, #223	; 0xdf
   13478:	cmp	r1, #70	; 0x46
   1347c:	ldrbeq	r1, [r0, #3]
   13480:	cmpeq	r1, #45	; 0x2d
   13484:	bne	134d4 <_obstack_memory_used@@Base+0x60c>
   13488:	ldrb	r1, [r0, #4]
   1348c:	cmp	r1, #56	; 0x38
   13490:	ldrbeq	r0, [r0, #5]
   13494:	cmpeq	r0, #0
   13498:	bne	134d4 <_obstack_memory_used@@Base+0x60c>
   1349c:	movw	r0, #30991	; 0x790f
   134a0:	movt	r0, #1
   134a4:	str	r0, [sp, #72]	; 0x48
   134a8:	b	134f4 <_obstack_memory_used@@Base+0x62c>
   134ac:	ldrb	r1, [r0, #1]
   134b0:	mov	r2, r8
   134b4:	and	r1, r1, #223	; 0xdf
   134b8:	cmp	r1, #66	; 0x42
   134bc:	bne	134d4 <_obstack_memory_used@@Base+0x60c>
   134c0:	ldrb	r1, [r0, #2]
   134c4:	cmp	r1, #49	; 0x31
   134c8:	ldrbeq	r1, [r0, #3]
   134cc:	cmpeq	r1, #56	; 0x38
   134d0:	beq	14350 <_obstack_memory_used@@Base+0x1488>
   134d4:	movw	r0, #25339	; 0x62fb
   134d8:	cmp	r7, #9
   134dc:	movt	r0, #1
   134e0:	mov	r1, r0
   134e4:	movw	r0, #30983	; 0x7907
   134e8:	movt	r0, #1
   134ec:	moveq	r1, r0
   134f0:	str	r1, [sp, #72]	; 0x48
   134f4:	mov	r8, r5
   134f8:	mov	r9, #0
   134fc:	tst	r8, #1
   13500:	mov	r5, r8
   13504:	str	r2, [fp, #-48]	; 0xffffffd0
   13508:	bne	13540 <_obstack_memory_used@@Base+0x678>
   1350c:	ldr	r0, [sp, #68]	; 0x44
   13510:	ldrb	r0, [r0]
   13514:	cmp	r0, #0
   13518:	beq	13540 <_obstack_memory_used@@Base+0x678>
   1351c:	ldr	r1, [sp, #68]	; 0x44
   13520:	mov	r9, #0
   13524:	add	r1, r1, #1
   13528:	cmp	r9, sl
   1352c:	strbcc	r0, [r6, r9]
   13530:	ldrb	r0, [r1, r9]
   13534:	add	r9, r9, #1
   13538:	cmp	r0, #0
   1353c:	bne	13528 <_obstack_memory_used@@Base+0x660>
   13540:	ldr	r8, [sp, #72]	; 0x48
   13544:	mov	r0, r8
   13548:	bl	11048 <strlen@plt>
   1354c:	ldr	ip, [fp, #-84]	; 0xffffffac
   13550:	ldr	lr, [sp, #84]	; 0x54
   13554:	ldr	r2, [fp, #-48]	; 0xffffffd0
   13558:	str	r0, [fp, #-76]	; 0xffffffb4
   1355c:	str	r8, [sp, #92]	; 0x5c
   13560:	mov	r3, #1
   13564:	ldr	r0, [fp, #16]
   13568:	str	r7, [fp, #-64]	; 0xffffffc0
   1356c:	str	r5, [fp, #-72]	; 0xffffffb8
   13570:	str	r3, [sp, #80]	; 0x50
   13574:	cmp	r0, #0
   13578:	movwne	r0, #1
   1357c:	and	r0, r0, r5
   13580:	str	r0, [fp, #-88]	; 0xffffffa8
   13584:	ldr	r0, [fp, #-76]	; 0xffffffb4
   13588:	cmp	r0, #0
   1358c:	movwne	r0, #1
   13590:	subs	r7, r7, #2
   13594:	and	r1, r0, r5
   13598:	str	r7, [fp, #-80]	; 0xffffffb0
   1359c:	and	r1, r3, r1
   135a0:	str	r1, [sp, #40]	; 0x28
   135a4:	clz	r1, r7
   135a8:	lsr	r1, r1, #5
   135ac:	and	r1, r1, r5
   135b0:	eor	r5, r5, #1
   135b4:	str	r1, [sp, #36]	; 0x24
   135b8:	mov	r1, r7
   135bc:	str	r5, [sp, #88]	; 0x58
   135c0:	mov	r7, #0
   135c4:	movwne	r1, #1
   135c8:	orr	r5, r1, r5
   135cc:	and	r1, r1, r3
   135d0:	and	r0, r0, r1
   135d4:	str	r5, [sp, #60]	; 0x3c
   135d8:	str	r1, [fp, #-68]	; 0xffffffbc
   135dc:	str	r0, [fp, #-60]	; 0xffffffc4
   135e0:	eor	r0, r3, #1
   135e4:	str	r0, [sp, #44]	; 0x2c
   135e8:	cmn	lr, #1
   135ec:	beq	135fc <_obstack_memory_used@@Base+0x734>
   135f0:	cmp	r7, lr
   135f4:	bne	13608 <_obstack_memory_used@@Base+0x740>
   135f8:	b	14280 <_obstack_memory_used@@Base+0x13b8>
   135fc:	ldrb	r0, [ip, r7]
   13600:	cmp	r0, #0
   13604:	beq	14288 <_obstack_memory_used@@Base+0x13c0>
   13608:	ldr	r0, [fp, #-60]	; 0xffffffc4
   1360c:	mov	r8, #0
   13610:	str	r4, [fp, #-52]	; 0xffffffcc
   13614:	str	r2, [fp, #-48]	; 0xffffffd0
   13618:	cmp	r0, #0
   1361c:	beq	13650 <_obstack_memory_used@@Base+0x788>
   13620:	ldr	r0, [fp, #-76]	; 0xffffffb4
   13624:	add	r4, r7, r0
   13628:	cmp	r0, #2
   1362c:	bcc	13648 <_obstack_memory_used@@Base+0x780>
   13630:	cmn	lr, #1
   13634:	bne	13648 <_obstack_memory_used@@Base+0x780>
   13638:	mov	r0, ip
   1363c:	bl	11048 <strlen@plt>
   13640:	ldr	ip, [fp, #-84]	; 0xffffffac
   13644:	mov	lr, r0
   13648:	cmp	r4, lr
   1364c:	bls	13668 <_obstack_memory_used@@Base+0x7a0>
   13650:	mov	r0, #0
   13654:	str	r0, [fp, #-56]	; 0xffffffc8
   13658:	ldrb	r5, [ip, r7]
   1365c:	cmp	r5, #126	; 0x7e
   13660:	bls	136b8 <_obstack_memory_used@@Base+0x7f0>
   13664:	b	13ac0 <_obstack_memory_used@@Base+0xbf8>
   13668:	ldr	r1, [sp, #92]	; 0x5c
   1366c:	ldr	r2, [fp, #-76]	; 0xffffffb4
   13670:	add	r0, ip, r7
   13674:	mov	r4, lr
   13678:	bl	10f28 <memcmp@plt>
   1367c:	ldr	r2, [sp, #88]	; 0x58
   13680:	cmp	r0, #0
   13684:	mov	r1, r0
   13688:	movwne	r1, #1
   1368c:	orr	r1, r1, r2
   13690:	tst	r1, #1
   13694:	beq	14394 <_obstack_memory_used@@Base+0x14cc>
   13698:	ldr	ip, [fp, #-84]	; 0xffffffac
   1369c:	clz	r0, r0
   136a0:	mov	lr, r4
   136a4:	lsr	r0, r0, #5
   136a8:	str	r0, [fp, #-56]	; 0xffffffc8
   136ac:	ldrb	r5, [ip, r7]
   136b0:	cmp	r5, #126	; 0x7e
   136b4:	bhi	13ac0 <_obstack_memory_used@@Base+0xbf8>
   136b8:	add	r3, pc, #16
   136bc:	mov	r4, #1
   136c0:	mov	r2, #110	; 0x6e
   136c4:	mov	r0, #97	; 0x61
   136c8:	mov	r1, #0
   136cc:	ldr	pc, [r3, r5, lsl #2]
   136d0:	andeq	r3, r1, r0, lsr #19
   136d4:	andeq	r3, r1, r0, asr #21
   136d8:	andeq	r3, r1, r0, asr #21
   136dc:	andeq	r3, r1, r0, asr #21
   136e0:	andeq	r3, r1, r0, asr #21
   136e4:	andeq	r3, r1, r0, asr #21
   136e8:	andeq	r3, r1, r0, asr #21
   136ec:	muleq	r1, ip, fp
   136f0:	andeq	r3, r1, r0, lsl #19
   136f4:	andeq	r3, r1, r8, ror #18
   136f8:	andeq	r3, r1, ip, lsl #19
   136fc:	andeq	r3, r1, ip, lsl sl
   13700:	andeq	r3, r1, r0, ror #18
   13704:	andeq	r3, r1, r8, lsl #19
   13708:	andeq	r3, r1, r0, asr #21
   1370c:	andeq	r3, r1, r0, asr #21
   13710:	andeq	r3, r1, r0, asr #21
   13714:	andeq	r3, r1, r0, asr #21
   13718:	andeq	r3, r1, r0, asr #21
   1371c:	andeq	r3, r1, r0, asr #21
   13720:	andeq	r3, r1, r0, asr #21
   13724:	andeq	r3, r1, r0, asr #21
   13728:	andeq	r3, r1, r0, asr #21
   1372c:	andeq	r3, r1, r0, asr #21
   13730:	andeq	r3, r1, r0, asr #21
   13734:	andeq	r3, r1, r0, asr #21
   13738:	andeq	r3, r1, r0, asr #21
   1373c:	andeq	r3, r1, r0, asr #21
   13740:	andeq	r3, r1, r0, asr #21
   13744:	andeq	r3, r1, r0, asr #21
   13748:	andeq	r3, r1, r0, asr #21
   1374c:	andeq	r3, r1, r0, asr #21
   13750:	andeq	r3, r1, r8, lsl fp
   13754:	andeq	r3, r1, ip, lsl fp
   13758:	andeq	r3, r1, ip, lsl fp
   1375c:	andeq	r3, r1, ip, ror #17
   13760:	andeq	r3, r1, ip, lsl fp
   13764:	andeq	r3, r1, ip, asr #17
   13768:	andeq	r3, r1, ip, lsl fp
   1376c:	andeq	r3, r1, r4, lsr #20
   13770:	andeq	r3, r1, ip, lsl fp
   13774:	andeq	r3, r1, ip, lsl fp
   13778:	andeq	r3, r1, ip, lsl fp
   1377c:	andeq	r3, r1, ip, asr #17
   13780:	andeq	r3, r1, ip, asr #17
   13784:	andeq	r3, r1, ip, asr #17
   13788:	andeq	r3, r1, ip, asr #17
   1378c:	andeq	r3, r1, ip, asr #17
   13790:	andeq	r3, r1, ip, asr #17
   13794:	andeq	r3, r1, ip, asr #17
   13798:	andeq	r3, r1, ip, asr #17
   1379c:	andeq	r3, r1, ip, asr #17
   137a0:	andeq	r3, r1, ip, asr #17
   137a4:	andeq	r3, r1, ip, asr #17
   137a8:	andeq	r3, r1, ip, asr #17
   137ac:	andeq	r3, r1, ip, asr #17
   137b0:	andeq	r3, r1, ip, asr #17
   137b4:	andeq	r3, r1, ip, asr #17
   137b8:	andeq	r3, r1, ip, asr #17
   137bc:	andeq	r3, r1, ip, lsl fp
   137c0:	andeq	r3, r1, ip, lsl fp
   137c4:	andeq	r3, r1, ip, lsl fp
   137c8:	andeq	r3, r1, ip, lsl fp
   137cc:	andeq	r3, r1, r0, ror #19
   137d0:	andeq	r3, r1, r0, asr #21
   137d4:	andeq	r3, r1, ip, asr #17
   137d8:	andeq	r3, r1, ip, asr #17
   137dc:	andeq	r3, r1, ip, asr #17
   137e0:	andeq	r3, r1, ip, asr #17
   137e4:	andeq	r3, r1, ip, asr #17
   137e8:	andeq	r3, r1, ip, asr #17
   137ec:	andeq	r3, r1, ip, asr #17
   137f0:	andeq	r3, r1, ip, asr #17
   137f4:	andeq	r3, r1, ip, asr #17
   137f8:	andeq	r3, r1, ip, asr #17
   137fc:	andeq	r3, r1, ip, asr #17
   13800:	andeq	r3, r1, ip, asr #17
   13804:	andeq	r3, r1, ip, asr #17
   13808:	andeq	r3, r1, ip, asr #17
   1380c:	andeq	r3, r1, ip, asr #17
   13810:	andeq	r3, r1, ip, asr #17
   13814:	andeq	r3, r1, ip, asr #17
   13818:	andeq	r3, r1, ip, asr #17
   1381c:	andeq	r3, r1, ip, asr #17
   13820:	andeq	r3, r1, ip, asr #17
   13824:	andeq	r3, r1, ip, asr #17
   13828:	andeq	r3, r1, ip, asr #17
   1382c:	andeq	r3, r1, ip, asr #17
   13830:	andeq	r3, r1, ip, asr #17
   13834:	andeq	r3, r1, ip, asr #17
   13838:	andeq	r3, r1, ip, asr #17
   1383c:	andeq	r3, r1, ip, lsl fp
   13840:	andeq	r3, r1, ip, lsr #18
   13844:	andeq	r3, r1, ip, asr #17
   13848:	andeq	r3, r1, ip, lsl fp
   1384c:	andeq	r3, r1, ip, asr #17
   13850:	andeq	r3, r1, ip, lsl fp
   13854:	andeq	r3, r1, ip, asr #17
   13858:	andeq	r3, r1, ip, asr #17
   1385c:	andeq	r3, r1, ip, asr #17
   13860:	andeq	r3, r1, ip, asr #17
   13864:	andeq	r3, r1, ip, asr #17
   13868:	andeq	r3, r1, ip, asr #17
   1386c:	andeq	r3, r1, ip, asr #17
   13870:	andeq	r3, r1, ip, asr #17
   13874:	andeq	r3, r1, ip, asr #17
   13878:	andeq	r3, r1, ip, asr #17
   1387c:	andeq	r3, r1, ip, asr #17
   13880:	andeq	r3, r1, ip, asr #17
   13884:	andeq	r3, r1, ip, asr #17
   13888:	andeq	r3, r1, ip, asr #17
   1388c:	andeq	r3, r1, ip, asr #17
   13890:	andeq	r3, r1, ip, asr #17
   13894:	andeq	r3, r1, ip, asr #17
   13898:	andeq	r3, r1, ip, asr #17
   1389c:	andeq	r3, r1, ip, asr #17
   138a0:	andeq	r3, r1, ip, asr #17
   138a4:	andeq	r3, r1, ip, asr #17
   138a8:	andeq	r3, r1, ip, asr #17
   138ac:	andeq	r3, r1, ip, asr #17
   138b0:	andeq	r3, r1, ip, asr #17
   138b4:	andeq	r3, r1, ip, asr #17
   138b8:	andeq	r3, r1, ip, asr #17
   138bc:	andeq	r3, r1, ip, lsl #18
   138c0:	andeq	r3, r1, ip, lsl fp
   138c4:	andeq	r3, r1, ip, lsl #18
   138c8:	andeq	r3, r1, ip, ror #17
   138cc:	ldr	r0, [fp, #-68]	; 0xffffffbc
   138d0:	cmp	r0, #0
   138d4:	beq	13bb0 <_obstack_memory_used@@Base+0xce8>
   138d8:	ldr	r0, [fp, #16]
   138dc:	cmp	r0, #0
   138e0:	mov	r0, r5
   138e4:	bne	13bc0 <_obstack_memory_used@@Base+0xcf8>
   138e8:	b	13be0 <_obstack_memory_used@@Base+0xd18>
   138ec:	mov	r4, #0
   138f0:	cmp	r7, #0
   138f4:	beq	13b18 <_obstack_memory_used@@Base+0xc50>
   138f8:	mov	r8, #0
   138fc:	ldr	r0, [fp, #-68]	; 0xffffffbc
   13900:	cmp	r0, #0
   13904:	bne	138d8 <_obstack_memory_used@@Base+0xa10>
   13908:	b	13bb0 <_obstack_memory_used@@Base+0xce8>
   1390c:	mov	r4, #0
   13910:	cmn	lr, #1
   13914:	beq	13af0 <_obstack_memory_used@@Base+0xc28>
   13918:	cmp	r7, #0
   1391c:	bne	138f8 <_obstack_memory_used@@Base+0xa30>
   13920:	cmp	lr, #1
   13924:	beq	13b18 <_obstack_memory_used@@Base+0xc50>
   13928:	b	138f8 <_obstack_memory_used@@Base+0xa30>
   1392c:	ldr	r0, [fp, #-64]	; 0xffffffc0
   13930:	cmp	r0, #2
   13934:	bne	13b48 <_obstack_memory_used@@Base+0xc80>
   13938:	ldr	r0, [fp, #-72]	; 0xffffffb8
   1393c:	tst	r0, #1
   13940:	bne	143a8 <_obstack_memory_used@@Base+0x14e0>
   13944:	mov	r8, #0
   13948:	mov	r0, #92	; 0x5c
   1394c:	mov	r4, #0
   13950:	cmp	r8, #0
   13954:	beq	13b68 <_obstack_memory_used@@Base+0xca0>
   13958:	ldr	r2, [fp, #-48]	; 0xffffffd0
   1395c:	b	13c5c <_obstack_memory_used@@Base+0xd94>
   13960:	mov	r0, #102	; 0x66
   13964:	b	13b9c <_obstack_memory_used@@Base+0xcd4>
   13968:	mov	r2, #116	; 0x74
   1396c:	ldr	r0, [sp, #60]	; 0x3c
   13970:	tst	r0, #1
   13974:	mov	r0, r2
   13978:	bne	13b9c <_obstack_memory_used@@Base+0xcd4>
   1397c:	b	143a8 <_obstack_memory_used@@Base+0x14e0>
   13980:	mov	r0, #98	; 0x62
   13984:	b	13b9c <_obstack_memory_used@@Base+0xcd4>
   13988:	mov	r2, #114	; 0x72
   1398c:	ldr	r0, [sp, #60]	; 0x3c
   13990:	tst	r0, #1
   13994:	mov	r0, r2
   13998:	bne	13b9c <_obstack_memory_used@@Base+0xcd4>
   1399c:	b	143a8 <_obstack_memory_used@@Base+0x14e0>
   139a0:	ldr	r0, [sp, #80]	; 0x50
   139a4:	tst	r0, #1
   139a8:	beq	13c84 <_obstack_memory_used@@Base+0xdbc>
   139ac:	ldr	r0, [fp, #-72]	; 0xffffffb8
   139b0:	tst	r0, #1
   139b4:	bne	144d0 <_obstack_memory_used@@Base+0x1608>
   139b8:	ldr	r0, [fp, #-64]	; 0xffffffc0
   139bc:	ldr	r2, [fp, #-48]	; 0xffffffd0
   139c0:	cmp	r0, #2
   139c4:	ldr	r0, [fp, #-80]	; 0xffffffb0
   139c8:	movwne	r0, #1
   139cc:	orr	r0, r0, r2
   139d0:	tst	r0, #1
   139d4:	beq	13f7c <_obstack_memory_used@@Base+0x10b4>
   139d8:	mov	r0, r9
   139dc:	b	13fb0 <_obstack_memory_used@@Base+0x10e8>
   139e0:	ldr	r0, [fp, #-64]	; 0xffffffc0
   139e4:	mov	r8, #0
   139e8:	mov	r5, #63	; 0x3f
   139ec:	cmp	r0, #5
   139f0:	beq	13e38 <_obstack_memory_used@@Base+0xf70>
   139f4:	cmp	r0, #2
   139f8:	bne	13ee8 <_obstack_memory_used@@Base+0x1020>
   139fc:	ldr	r0, [fp, #-72]	; 0xffffffb8
   13a00:	tst	r0, #1
   13a04:	bne	143a8 <_obstack_memory_used@@Base+0x14e0>
   13a08:	mov	r4, #0
   13a0c:	ldr	r0, [fp, #-68]	; 0xffffffbc
   13a10:	cmp	r0, #0
   13a14:	bne	138d8 <_obstack_memory_used@@Base+0xa10>
   13a18:	b	13bb0 <_obstack_memory_used@@Base+0xce8>
   13a1c:	mov	r0, #118	; 0x76
   13a20:	b	13b9c <_obstack_memory_used@@Base+0xcd4>
   13a24:	mov	r0, #1
   13a28:	mov	r5, #39	; 0x27
   13a2c:	str	r0, [sp, #52]	; 0x34
   13a30:	ldr	r0, [fp, #-64]	; 0xffffffc0
   13a34:	cmp	r0, #2
   13a38:	bne	13aac <_obstack_memory_used@@Base+0xbe4>
   13a3c:	ldr	r0, [fp, #-72]	; 0xffffffb8
   13a40:	tst	r0, #1
   13a44:	bne	143a8 <_obstack_memory_used@@Base+0x14e0>
   13a48:	ldr	r2, [sp, #48]	; 0x30
   13a4c:	clz	r1, sl
   13a50:	mov	r8, #0
   13a54:	lsr	r1, r1, #5
   13a58:	cmp	r2, #0
   13a5c:	mov	r0, r2
   13a60:	movwne	r0, #1
   13a64:	orrs	r0, r0, r1
   13a68:	moveq	r2, sl
   13a6c:	moveq	sl, r0
   13a70:	cmp	r9, sl
   13a74:	str	r2, [sp, #48]	; 0x30
   13a78:	movcc	r0, #39	; 0x27
   13a7c:	strbcc	r0, [r6, r9]
   13a80:	add	r0, r9, #1
   13a84:	cmp	r0, sl
   13a88:	movcc	r1, #92	; 0x5c
   13a8c:	strbcc	r1, [r6, r0]
   13a90:	add	r0, r9, #2
   13a94:	add	r9, r9, #3
   13a98:	cmp	r0, sl
   13a9c:	movcc	r1, #39	; 0x27
   13aa0:	strbcc	r1, [r6, r0]
   13aa4:	mov	r0, #0
   13aa8:	str	r0, [fp, #-48]	; 0xffffffd0
   13aac:	mov	r4, #1
   13ab0:	ldr	r0, [fp, #-68]	; 0xffffffbc
   13ab4:	cmp	r0, #0
   13ab8:	bne	138d8 <_obstack_memory_used@@Base+0xa10>
   13abc:	b	13bb0 <_obstack_memory_used@@Base+0xce8>
   13ac0:	ldr	r0, [sp, #32]
   13ac4:	cmp	r0, #1
   13ac8:	bne	13cb4 <_obstack_memory_used@@Base+0xdec>
   13acc:	str	lr, [sp, #84]	; 0x54
   13ad0:	bl	11030 <__ctype_b_loc@plt>
   13ad4:	ldr	r0, [r0]
   13ad8:	ldr	ip, [fp, #-84]	; 0xffffffac
   13adc:	mov	r1, #1
   13ae0:	add	r0, r0, r5, lsl #1
   13ae4:	ldrb	r0, [r0, #1]
   13ae8:	ubfx	r4, r0, #6, #1
   13aec:	b	140ac <_obstack_memory_used@@Base+0x11e4>
   13af0:	cmp	r7, #0
   13af4:	ldrbeq	r0, [ip, #1]
   13af8:	cmpeq	r0, #0
   13afc:	beq	13b18 <_obstack_memory_used@@Base+0xc50>
   13b00:	mvn	lr, #0
   13b04:	mov	r8, #0
   13b08:	ldr	r0, [fp, #-68]	; 0xffffffbc
   13b0c:	cmp	r0, #0
   13b10:	bne	138d8 <_obstack_memory_used@@Base+0xa10>
   13b14:	b	13bb0 <_obstack_memory_used@@Base+0xce8>
   13b18:	mov	r1, #1
   13b1c:	ldr	r0, [fp, #-64]	; 0xffffffc0
   13b20:	cmp	r0, #2
   13b24:	bne	13b34 <_obstack_memory_used@@Base+0xc6c>
   13b28:	ldr	r0, [fp, #-72]	; 0xffffffb8
   13b2c:	tst	r0, #1
   13b30:	bne	143a8 <_obstack_memory_used@@Base+0x14e0>
   13b34:	mov	r4, r1
   13b38:	ldr	r0, [fp, #-68]	; 0xffffffbc
   13b3c:	cmp	r0, #0
   13b40:	bne	138d8 <_obstack_memory_used@@Base+0xa10>
   13b44:	b	13bb0 <_obstack_memory_used@@Base+0xce8>
   13b48:	ldr	r1, [sp, #40]	; 0x28
   13b4c:	mov	r8, #0
   13b50:	mov	r0, #92	; 0x5c
   13b54:	cmp	r1, #0
   13b58:	beq	13b9c <_obstack_memory_used@@Base+0xcd4>
   13b5c:	mov	r4, #0
   13b60:	cmp	r8, #0
   13b64:	bne	13958 <_obstack_memory_used@@Base+0xa90>
   13b68:	ldr	r2, [fp, #-48]	; 0xffffffd0
   13b6c:	tst	r2, #1
   13b70:	beq	13c5c <_obstack_memory_used@@Base+0xd94>
   13b74:	cmp	r9, sl
   13b78:	movcc	r1, #39	; 0x27
   13b7c:	strbcc	r1, [r6, r9]
   13b80:	add	r1, r9, #1
   13b84:	add	r9, r9, #2
   13b88:	cmp	r1, sl
   13b8c:	movcc	r2, #39	; 0x27
   13b90:	strbcc	r2, [r6, r1]
   13b94:	mov	r2, #0
   13b98:	b	13c5c <_obstack_memory_used@@Base+0xd94>
   13b9c:	ldr	r1, [sp, #80]	; 0x50
   13ba0:	mov	r4, #0
   13ba4:	mov	r8, #0
   13ba8:	tst	r1, #1
   13bac:	bne	13bec <_obstack_memory_used@@Base+0xd24>
   13bb0:	ldr	r0, [fp, #-88]	; 0xffffffa8
   13bb4:	cmp	r0, #0
   13bb8:	mov	r0, r5
   13bbc:	beq	13be0 <_obstack_memory_used@@Base+0xd18>
   13bc0:	ldr	r1, [fp, #16]
   13bc4:	ubfx	r0, r5, #5, #3
   13bc8:	mov	r2, #1
   13bcc:	ldr	r0, [r1, r0, lsl #2]
   13bd0:	and	r1, r5, #31
   13bd4:	tst	r0, r2, lsl r1
   13bd8:	mov	r0, r5
   13bdc:	bne	13bec <_obstack_memory_used@@Base+0xd24>
   13be0:	ldr	r1, [fp, #-56]	; 0xffffffc8
   13be4:	cmp	r1, #0
   13be8:	beq	14044 <_obstack_memory_used@@Base+0x117c>
   13bec:	ldr	r1, [fp, #-72]	; 0xffffffb8
   13bf0:	tst	r1, #1
   13bf4:	bne	14388 <_obstack_memory_used@@Base+0x14c0>
   13bf8:	ldr	r1, [fp, #-64]	; 0xffffffc0
   13bfc:	ldr	r2, [fp, #-48]	; 0xffffffd0
   13c00:	cmp	r1, #2
   13c04:	ldr	r1, [fp, #-80]	; 0xffffffb0
   13c08:	movwne	r1, #1
   13c0c:	orr	r1, r1, r2
   13c10:	tst	r1, #1
   13c14:	bne	13c4c <_obstack_memory_used@@Base+0xd84>
   13c18:	cmp	r9, sl
   13c1c:	movcc	r1, #39	; 0x27
   13c20:	strbcc	r1, [r6, r9]
   13c24:	add	r1, r9, #1
   13c28:	cmp	r1, sl
   13c2c:	movcc	r2, #36	; 0x24
   13c30:	strbcc	r2, [r6, r1]
   13c34:	add	r1, r9, #2
   13c38:	add	r9, r9, #3
   13c3c:	cmp	r1, sl
   13c40:	movcc	r2, #39	; 0x27
   13c44:	strbcc	r2, [r6, r1]
   13c48:	mov	r2, #1
   13c4c:	cmp	r9, sl
   13c50:	movcc	r1, #92	; 0x5c
   13c54:	strbcc	r1, [r6, r9]
   13c58:	add	r9, r9, #1
   13c5c:	cmp	r9, sl
   13c60:	add	r7, r7, #1
   13c64:	strbcc	r0, [r6, r9]
   13c68:	ldr	r0, [fp, #-52]	; 0xffffffcc
   13c6c:	add	r9, r9, #1
   13c70:	and	r0, r0, r4
   13c74:	mov	r4, r0
   13c78:	cmn	lr, #1
   13c7c:	bne	135f0 <_obstack_memory_used@@Base+0x728>
   13c80:	b	135fc <_obstack_memory_used@@Base+0x734>
   13c84:	ldr	r0, [sp, #28]
   13c88:	mov	r4, #0
   13c8c:	mov	r8, #0
   13c90:	mov	r5, #0
   13c94:	cmp	r0, #0
   13c98:	beq	13bb0 <_obstack_memory_used@@Base+0xce8>
   13c9c:	ldr	r4, [fp, #-52]	; 0xffffffcc
   13ca0:	ldr	r2, [fp, #-48]	; 0xffffffd0
   13ca4:	add	r7, r7, #1
   13ca8:	cmn	lr, #1
   13cac:	bne	135f0 <_obstack_memory_used@@Base+0x728>
   13cb0:	b	135fc <_obstack_memory_used@@Base+0x734>
   13cb4:	mov	r0, #0
   13cb8:	cmn	lr, #1
   13cbc:	str	r0, [fp, #-36]	; 0xffffffdc
   13cc0:	str	r0, [fp, #-40]	; 0xffffffd8
   13cc4:	bne	13cd8 <_obstack_memory_used@@Base+0xe10>
   13cc8:	mov	r0, ip
   13ccc:	bl	11048 <strlen@plt>
   13cd0:	ldr	ip, [fp, #-84]	; 0xffffffac
   13cd4:	mov	lr, r0
   13cd8:	ldr	r0, [sp, #36]	; 0x24
   13cdc:	str	sl, [sp, #56]	; 0x38
   13ce0:	str	lr, [sp, #84]	; 0x54
   13ce4:	cmp	r0, #0
   13ce8:	beq	13f00 <_obstack_memory_used@@Base+0x1038>
   13cec:	add	r0, ip, r7
   13cf0:	mov	r4, #1
   13cf4:	mov	r6, #0
   13cf8:	sub	sl, fp, #40	; 0x28
   13cfc:	str	r0, [sp, #20]
   13d00:	str	r6, [sp, #64]	; 0x40
   13d04:	add	r6, r6, r7
   13d08:	sub	r0, fp, #44	; 0x2c
   13d0c:	mov	r3, sl
   13d10:	add	r1, ip, r6
   13d14:	sub	r2, lr, r6
   13d18:	bl	15ccc <_obstack_memory_used@@Base+0x2e04>
   13d1c:	cmn	r0, #2
   13d20:	beq	1405c <_obstack_memory_used@@Base+0x1194>
   13d24:	ldr	sl, [sp, #56]	; 0x38
   13d28:	cmn	r0, #1
   13d2c:	beq	14050 <_obstack_memory_used@@Base+0x1188>
   13d30:	cmp	r0, #0
   13d34:	beq	14054 <_obstack_memory_used@@Base+0x118c>
   13d38:	cmp	r0, #2
   13d3c:	bcc	13dfc <_obstack_memory_used@@Base+0xf34>
   13d40:	ldr	r1, [sp, #64]	; 0x40
   13d44:	ldr	r2, [sp, #20]
   13d48:	add	r1, r2, r1
   13d4c:	mov	r2, #1
   13d50:	ldrb	r3, [r1, r2]
   13d54:	sub	r3, r3, #91	; 0x5b
   13d58:	cmp	r3, #33	; 0x21
   13d5c:	bhi	13df0 <_obstack_memory_used@@Base+0xf28>
   13d60:	add	r6, pc, #0
   13d64:	ldr	pc, [r6, r3, lsl #2]
   13d68:			; <UNDEFINED> instruction: 0x000143b4
   13d6c:			; <UNDEFINED> instruction: 0x000143b4
   13d70:	strdeq	r3, [r1], -r0
   13d74:			; <UNDEFINED> instruction: 0x000143b4
   13d78:	strdeq	r3, [r1], -r0
   13d7c:			; <UNDEFINED> instruction: 0x000143b4
   13d80:	strdeq	r3, [r1], -r0
   13d84:	strdeq	r3, [r1], -r0
   13d88:	strdeq	r3, [r1], -r0
   13d8c:	strdeq	r3, [r1], -r0
   13d90:	strdeq	r3, [r1], -r0
   13d94:	strdeq	r3, [r1], -r0
   13d98:	strdeq	r3, [r1], -r0
   13d9c:	strdeq	r3, [r1], -r0
   13da0:	strdeq	r3, [r1], -r0
   13da4:	strdeq	r3, [r1], -r0
   13da8:	strdeq	r3, [r1], -r0
   13dac:	strdeq	r3, [r1], -r0
   13db0:	strdeq	r3, [r1], -r0
   13db4:	strdeq	r3, [r1], -r0
   13db8:	strdeq	r3, [r1], -r0
   13dbc:	strdeq	r3, [r1], -r0
   13dc0:	strdeq	r3, [r1], -r0
   13dc4:	strdeq	r3, [r1], -r0
   13dc8:	strdeq	r3, [r1], -r0
   13dcc:	strdeq	r3, [r1], -r0
   13dd0:	strdeq	r3, [r1], -r0
   13dd4:	strdeq	r3, [r1], -r0
   13dd8:	strdeq	r3, [r1], -r0
   13ddc:	strdeq	r3, [r1], -r0
   13de0:	strdeq	r3, [r1], -r0
   13de4:	strdeq	r3, [r1], -r0
   13de8:	strdeq	r3, [r1], -r0
   13dec:			; <UNDEFINED> instruction: 0x000143b4
   13df0:	add	r2, r2, #1
   13df4:	cmp	r2, r0
   13df8:	bcc	13d50 <_obstack_memory_used@@Base+0xe88>
   13dfc:	ldr	r6, [sp, #64]	; 0x40
   13e00:	add	r6, r0, r6
   13e04:	ldr	r0, [fp, #-44]	; 0xffffffd4
   13e08:	bl	10f64 <iswprint@plt>
   13e0c:	cmp	r0, #0
   13e10:	sub	sl, fp, #40	; 0x28
   13e14:	movwne	r0, #1
   13e18:	and	r4, r4, r0
   13e1c:	mov	r0, sl
   13e20:	bl	10f10 <mbsinit@plt>
   13e24:	ldr	ip, [fp, #-84]	; 0xffffffac
   13e28:	ldr	lr, [sp, #84]	; 0x54
   13e2c:	cmp	r0, #0
   13e30:	beq	13d00 <_obstack_memory_used@@Base+0xe38>
   13e34:	b	140a0 <_obstack_memory_used@@Base+0x11d8>
   13e38:	ldr	r0, [sp, #24]
   13e3c:	cmp	r0, #0
   13e40:	beq	13ee8 <_obstack_memory_used@@Base+0x1020>
   13e44:	add	r0, r7, #2
   13e48:	cmp	r0, lr
   13e4c:	bcs	13ee8 <_obstack_memory_used@@Base+0x1020>
   13e50:	add	r1, ip, r7
   13e54:	ldrb	r1, [r1, #1]
   13e58:	cmp	r1, #63	; 0x3f
   13e5c:	bne	13ee8 <_obstack_memory_used@@Base+0x1020>
   13e60:	ldrb	r5, [ip, r0]
   13e64:	sub	r1, r5, #33	; 0x21
   13e68:	cmp	r1, #29
   13e6c:	bhi	13ee8 <_obstack_memory_used@@Base+0x1020>
   13e70:	movw	r3, #20929	; 0x51c1
   13e74:	mov	r2, #1
   13e78:	movt	r3, #14336	; 0x3800
   13e7c:	tst	r3, r2, lsl r1
   13e80:	beq	13ee8 <_obstack_memory_used@@Base+0x1020>
   13e84:	ldr	r1, [fp, #-72]	; 0xffffffb8
   13e88:	tst	r1, #1
   13e8c:	bne	144d8 <_obstack_memory_used@@Base+0x1610>
   13e90:	cmp	r9, sl
   13e94:	mov	r7, r0
   13e98:	mov	r4, #0
   13e9c:	movcc	r1, #63	; 0x3f
   13ea0:	strbcc	r1, [r6, r9]
   13ea4:	add	r1, r9, #1
   13ea8:	cmp	r1, sl
   13eac:	movcc	r2, #34	; 0x22
   13eb0:	strbcc	r2, [r6, r1]
   13eb4:	add	r1, r9, #2
   13eb8:	cmp	r1, sl
   13ebc:	movcc	r2, #34	; 0x22
   13ec0:	strbcc	r2, [r6, r1]
   13ec4:	add	r1, r9, #3
   13ec8:	add	r9, r9, #4
   13ecc:	cmp	r1, sl
   13ed0:	movcc	r2, #63	; 0x3f
   13ed4:	strbcc	r2, [r6, r1]
   13ed8:	ldr	r0, [fp, #-68]	; 0xffffffbc
   13edc:	cmp	r0, #0
   13ee0:	bne	138d8 <_obstack_memory_used@@Base+0xa10>
   13ee4:	b	13bb0 <_obstack_memory_used@@Base+0xce8>
   13ee8:	mov	r5, #63	; 0x3f
   13eec:	mov	r4, #0
   13ef0:	ldr	r0, [fp, #-68]	; 0xffffffbc
   13ef4:	cmp	r0, #0
   13ef8:	bne	138d8 <_obstack_memory_used@@Base+0xa10>
   13efc:	b	13bb0 <_obstack_memory_used@@Base+0xce8>
   13f00:	mov	r4, #1
   13f04:	mov	r6, #0
   13f08:	sub	sl, fp, #40	; 0x28
   13f0c:	str	r6, [sp, #64]	; 0x40
   13f10:	add	r6, r6, r7
   13f14:	sub	r0, fp, #44	; 0x2c
   13f18:	mov	r3, sl
   13f1c:	add	r1, ip, r6
   13f20:	sub	r2, lr, r6
   13f24:	bl	15ccc <_obstack_memory_used@@Base+0x2e04>
   13f28:	cmn	r0, #2
   13f2c:	beq	1405c <_obstack_memory_used@@Base+0x1194>
   13f30:	cmn	r0, #1
   13f34:	beq	14050 <_obstack_memory_used@@Base+0x1188>
   13f38:	ldr	r6, [sp, #64]	; 0x40
   13f3c:	cmp	r0, #0
   13f40:	beq	1409c <_obstack_memory_used@@Base+0x11d4>
   13f44:	add	r6, r0, r6
   13f48:	ldr	r0, [fp, #-44]	; 0xffffffd4
   13f4c:	bl	10f64 <iswprint@plt>
   13f50:	cmp	r0, #0
   13f54:	sub	sl, fp, #40	; 0x28
   13f58:	movwne	r0, #1
   13f5c:	and	r4, r4, r0
   13f60:	mov	r0, sl
   13f64:	bl	10f10 <mbsinit@plt>
   13f68:	ldr	ip, [fp, #-84]	; 0xffffffac
   13f6c:	ldr	lr, [sp, #84]	; 0x54
   13f70:	cmp	r0, #0
   13f74:	beq	13f0c <_obstack_memory_used@@Base+0x1044>
   13f78:	b	140a0 <_obstack_memory_used@@Base+0x11d8>
   13f7c:	cmp	r9, sl
   13f80:	mov	r2, #1
   13f84:	movcc	r0, #39	; 0x27
   13f88:	strbcc	r0, [r6, r9]
   13f8c:	add	r0, r9, #1
   13f90:	cmp	r0, sl
   13f94:	movcc	r1, #36	; 0x24
   13f98:	strbcc	r1, [r6, r0]
   13f9c:	add	r0, r9, #2
   13fa0:	cmp	r0, sl
   13fa4:	movcc	r1, #39	; 0x27
   13fa8:	strbcc	r1, [r6, r0]
   13fac:	add	r0, r9, #3
   13fb0:	cmp	r0, sl
   13fb4:	add	r9, r0, #1
   13fb8:	str	r2, [fp, #-48]	; 0xffffffd0
   13fbc:	movcc	r1, #92	; 0x5c
   13fc0:	strbcc	r1, [r6, r0]
   13fc4:	ldr	r1, [fp, #-64]	; 0xffffffc0
   13fc8:	cmp	r1, #2
   13fcc:	beq	1402c <_obstack_memory_used@@Base+0x1164>
   13fd0:	add	r1, r7, #1
   13fd4:	mov	r4, #0
   13fd8:	mov	r8, #1
   13fdc:	mov	r5, #48	; 0x30
   13fe0:	cmp	r1, lr
   13fe4:	bcs	138cc <_obstack_memory_used@@Base+0xa04>
   13fe8:	ldrb	r1, [ip, r1]
   13fec:	sub	r1, r1, #48	; 0x30
   13ff0:	uxtb	r1, r1
   13ff4:	cmp	r1, #9
   13ff8:	bhi	138cc <_obstack_memory_used@@Base+0xa04>
   13ffc:	cmp	r9, sl
   14000:	movcc	r1, #48	; 0x30
   14004:	strbcc	r1, [r6, r9]
   14008:	add	r1, r0, #2
   1400c:	add	r9, r0, #3
   14010:	cmp	r1, sl
   14014:	movcc	r2, #48	; 0x30
   14018:	strbcc	r2, [r6, r1]
   1401c:	ldr	r0, [fp, #-68]	; 0xffffffbc
   14020:	cmp	r0, #0
   14024:	bne	138d8 <_obstack_memory_used@@Base+0xa10>
   14028:	b	13bb0 <_obstack_memory_used@@Base+0xce8>
   1402c:	mov	r0, #48	; 0x30
   14030:	mov	r8, #1
   14034:	mov	r4, #0
   14038:	ldr	r1, [fp, #-56]	; 0xffffffc8
   1403c:	cmp	r1, #0
   14040:	bne	13bec <_obstack_memory_used@@Base+0xd24>
   14044:	cmp	r8, #0
   14048:	beq	13b68 <_obstack_memory_used@@Base+0xca0>
   1404c:	b	13958 <_obstack_memory_used@@Base+0xa90>
   14050:	mov	r4, #0
   14054:	ldr	ip, [fp, #-84]	; 0xffffffac
   14058:	b	14094 <_obstack_memory_used@@Base+0x11cc>
   1405c:	ldr	r1, [sp, #84]	; 0x54
   14060:	ldr	ip, [fp, #-84]	; 0xffffffac
   14064:	mov	r4, #0
   14068:	cmp	r6, r1
   1406c:	bcs	14094 <_obstack_memory_used@@Base+0x11cc>
   14070:	ldrb	r0, [ip, r6]
   14074:	cmp	r0, #0
   14078:	beq	14094 <_obstack_memory_used@@Base+0x11cc>
   1407c:	ldr	r0, [sp, #64]	; 0x40
   14080:	add	r0, r0, #1
   14084:	add	r6, r0, r7
   14088:	str	r0, [sp, #64]	; 0x40
   1408c:	cmp	r6, r1
   14090:	bcc	14070 <_obstack_memory_used@@Base+0x11a8>
   14094:	ldr	r6, [sp, #64]	; 0x40
   14098:	b	140a0 <_obstack_memory_used@@Base+0x11d8>
   1409c:	ldr	ip, [fp, #-84]	; 0xffffffac
   140a0:	mov	r1, r6
   140a4:	ldr	r6, [sp, #76]	; 0x4c
   140a8:	ldr	sl, [sp, #56]	; 0x38
   140ac:	ldr	r0, [sp, #44]	; 0x2c
   140b0:	cmp	r1, #1
   140b4:	orr	r2, r4, r0
   140b8:	mov	r0, r1
   140bc:	bhi	140dc <_obstack_memory_used@@Base+0x1214>
   140c0:	tst	r2, #1
   140c4:	beq	140dc <_obstack_memory_used@@Base+0x1214>
   140c8:	ldr	lr, [sp, #84]	; 0x54
   140cc:	ldr	r0, [fp, #-68]	; 0xffffffbc
   140d0:	cmp	r0, #0
   140d4:	bne	138d8 <_obstack_memory_used@@Base+0xa10>
   140d8:	b	13bb0 <_obstack_memory_used@@Base+0xce8>
   140dc:	str	r2, [sp, #64]	; 0x40
   140e0:	add	r0, r0, r7
   140e4:	add	r1, r7, #1
   140e8:	ldr	lr, [sp, #84]	; 0x54
   140ec:	ldr	r7, [fp, #-64]	; 0xffffffc0
   140f0:	ldr	r2, [fp, #-48]	; 0xffffffd0
   140f4:	mov	r3, #0
   140f8:	str	r0, [sp, #56]	; 0x38
   140fc:	ldr	r0, [sp, #64]	; 0x40
   14100:	tst	r0, #1
   14104:	bne	141ec <_obstack_memory_used@@Base+0x1324>
   14108:	ldr	r0, [fp, #-72]	; 0xffffffb8
   1410c:	tst	r0, #1
   14110:	bne	1438c <_obstack_memory_used@@Base+0x14c4>
   14114:	ldr	r3, [fp, #-80]	; 0xffffffb0
   14118:	cmp	r7, #2
   1411c:	movwne	r3, #1
   14120:	orr	r3, r3, r2
   14124:	tst	r3, #1
   14128:	bne	14160 <_obstack_memory_used@@Base+0x1298>
   1412c:	cmp	r9, sl
   14130:	add	r3, r9, #1
   14134:	movcc	r2, #39	; 0x27
   14138:	strbcc	r2, [r6, r9]
   1413c:	cmp	r3, sl
   14140:	movcc	r2, #36	; 0x24
   14144:	strbcc	r2, [r6, r3]
   14148:	add	r3, r9, #2
   1414c:	add	r9, r9, #3
   14150:	cmp	r3, sl
   14154:	movcc	r2, #39	; 0x27
   14158:	strbcc	r2, [r6, r3]
   1415c:	mov	r2, #1
   14160:	cmp	r9, sl
   14164:	mov	r0, r2
   14168:	movcc	r3, #92	; 0x5c
   1416c:	strbcc	r3, [r6, r9]
   14170:	add	r3, r9, #1
   14174:	cmp	r3, sl
   14178:	andcc	r7, r5, #192	; 0xc0
   1417c:	movcc	r2, #48	; 0x30
   14180:	orrcc	r7, r2, r7, lsr #6
   14184:	strbcc	r7, [r6, r3]
   14188:	add	r3, r9, #2
   1418c:	add	r9, r9, #3
   14190:	cmp	r3, sl
   14194:	lsrcc	r7, r5, #3
   14198:	movcc	r2, #6
   1419c:	bficc	r7, r2, #3, #29
   141a0:	mov	r2, #6
   141a4:	strbcc	r7, [r6, r3]
   141a8:	bfi	r5, r2, #3, #29
   141ac:	mov	r3, #1
   141b0:	mov	r2, r0
   141b4:	ldr	r0, [sp, #56]	; 0x38
   141b8:	and	r8, r3, #1
   141bc:	cmp	r0, r1
   141c0:	bhi	14220 <_obstack_memory_used@@Base+0x1358>
   141c4:	b	14260 <_obstack_memory_used@@Base+0x1398>
   141c8:	cmp	r9, sl
   141cc:	ldr	r7, [fp, #-64]	; 0xffffffc0
   141d0:	strbcc	r5, [r6, r9]
   141d4:	add	r9, r9, #1
   141d8:	ldrb	r5, [ip, r1]
   141dc:	add	r1, r1, #1
   141e0:	ldr	r0, [sp, #64]	; 0x40
   141e4:	tst	r0, #1
   141e8:	beq	14108 <_obstack_memory_used@@Base+0x1240>
   141ec:	ldr	r7, [fp, #-56]	; 0xffffffc8
   141f0:	tst	r7, #1
   141f4:	beq	14208 <_obstack_memory_used@@Base+0x1340>
   141f8:	cmp	r9, sl
   141fc:	movcc	r7, #92	; 0x5c
   14200:	strbcc	r7, [r6, r9]
   14204:	add	r9, r9, #1
   14208:	mov	r7, #0
   1420c:	str	r7, [fp, #-56]	; 0xffffffc8
   14210:	ldr	r0, [sp, #56]	; 0x38
   14214:	and	r8, r3, #1
   14218:	cmp	r0, r1
   1421c:	bls	14260 <_obstack_memory_used@@Base+0x1398>
   14220:	cmp	r8, #0
   14224:	mvn	r7, r2
   14228:	movwne	r8, #1
   1422c:	orr	r7, r7, r8
   14230:	tst	r7, #1
   14234:	bne	141c8 <_obstack_memory_used@@Base+0x1300>
   14238:	cmp	r9, sl
   1423c:	movcc	r7, #39	; 0x27
   14240:	strbcc	r7, [r6, r9]
   14244:	add	r7, r9, #1
   14248:	add	r9, r9, #2
   1424c:	cmp	r7, sl
   14250:	movcc	r2, #39	; 0x27
   14254:	strbcc	r2, [r6, r7]
   14258:	mov	r2, #0
   1425c:	b	141c8 <_obstack_memory_used@@Base+0x1300>
   14260:	cmp	r8, #0
   14264:	sub	r7, r1, #1
   14268:	mov	r0, r5
   1426c:	str	r2, [fp, #-48]	; 0xffffffd0
   14270:	movwne	r8, #1
   14274:	cmp	r8, #0
   14278:	beq	13b68 <_obstack_memory_used@@Base+0xca0>
   1427c:	b	13958 <_obstack_memory_used@@Base+0xa90>
   14280:	mov	lr, r7
   14284:	b	1428c <_obstack_memory_used@@Base+0x13c4>
   14288:	mvn	lr, #0
   1428c:	ldr	r7, [fp, #-64]	; 0xffffffc0
   14290:	ldr	r1, [fp, #-72]	; 0xffffffb8
   14294:	eor	r0, r7, #2
   14298:	orr	r0, r0, r9
   1429c:	clz	r0, r0
   142a0:	lsr	r0, r0, #5
   142a4:	tst	r1, r0
   142a8:	bne	143a8 <_obstack_memory_used@@Base+0x14e0>
   142ac:	mov	r0, r1
   142b0:	ldr	r1, [fp, #-80]	; 0xffffffb0
   142b4:	cmp	r7, #2
   142b8:	movwne	r1, #1
   142bc:	orr	r0, r0, r1
   142c0:	tst	r0, #1
   142c4:	ldreq	r0, [sp, #52]	; 0x34
   142c8:	streq	lr, [sp, #84]	; 0x54
   142cc:	eoreq	r0, r0, #1
   142d0:	tsteq	r0, #1
   142d4:	bne	1446c <_obstack_memory_used@@Base+0x15a4>
   142d8:	tst	r4, #1
   142dc:	bne	14428 <_obstack_memory_used@@Base+0x1560>
   142e0:	ldr	r6, [sp, #48]	; 0x30
   142e4:	mov	r8, #0
   142e8:	cmp	r6, #0
   142ec:	beq	14464 <_obstack_memory_used@@Base+0x159c>
   142f0:	ldr	r0, [sp, #80]	; 0x50
   142f4:	mov	r1, #0
   142f8:	cmp	sl, #0
   142fc:	mov	r4, #0
   14300:	str	r1, [fp, #-72]	; 0xffffffb8
   14304:	beq	131f8 <_obstack_memory_used@@Base+0x330>
   14308:	b	1446c <_obstack_memory_used@@Base+0x15a4>
   1430c:	ldrb	r1, [r0, #3]
   14310:	cmp	r1, #56	; 0x38
   14314:	ldrbeq	r1, [r0, #4]
   14318:	cmpeq	r1, #48	; 0x30
   1431c:	bne	133f0 <_obstack_memory_used@@Base+0x528>
   14320:	ldrb	r1, [r0, #5]
   14324:	cmp	r1, #51	; 0x33
   14328:	ldrbeq	r1, [r0, #6]
   1432c:	cmpeq	r1, #48	; 0x30
   14330:	bne	133f0 <_obstack_memory_used@@Base+0x528>
   14334:	ldrb	r0, [r0, #7]
   14338:	cmp	r0, #0
   1433c:	movw	r0, #30995	; 0x7913
   14340:	movt	r0, #1
   14344:	str	r0, [sp, #68]	; 0x44
   14348:	bne	133f0 <_obstack_memory_used@@Base+0x528>
   1434c:	b	1340c <_obstack_memory_used@@Base+0x544>
   14350:	ldrb	r1, [r0, #4]
   14354:	cmp	r1, #48	; 0x30
   14358:	ldrbeq	r1, [r0, #5]
   1435c:	cmpeq	r1, #51	; 0x33
   14360:	bne	134d4 <_obstack_memory_used@@Base+0x60c>
   14364:	ldrb	r1, [r0, #6]
   14368:	cmp	r1, #48	; 0x30
   1436c:	ldrbeq	r0, [r0, #7]
   14370:	cmpeq	r0, #0
   14374:	bne	134d4 <_obstack_memory_used@@Base+0x60c>
   14378:	movw	r0, #30999	; 0x7917
   1437c:	movt	r0, #1
   14380:	str	r0, [sp, #72]	; 0x48
   14384:	b	134f4 <_obstack_memory_used@@Base+0x62c>
   14388:	ldr	r7, [fp, #-64]	; 0xffffffc0
   1438c:	ldr	r2, [sp, #80]	; 0x50
   14390:	b	143c8 <_obstack_memory_used@@Base+0x1500>
   14394:	ldr	ip, [fp, #-84]	; 0xffffffac
   14398:	mov	r2, #1
   1439c:	mov	lr, r4
   143a0:	ldr	r7, [fp, #-64]	; 0xffffffc0
   143a4:	b	143c8 <_obstack_memory_used@@Base+0x1500>
   143a8:	ldr	r2, [sp, #80]	; 0x50
   143ac:	mov	r7, #2
   143b0:	b	143c8 <_obstack_memory_used@@Base+0x1500>
   143b4:	ldr	r6, [sp, #76]	; 0x4c
   143b8:	ldr	ip, [fp, #-84]	; 0xffffffac
   143bc:	ldr	lr, [sp, #84]	; 0x54
   143c0:	ldr	r2, [sp, #80]	; 0x50
   143c4:	mov	r7, #2
   143c8:	mov	r0, #0
   143cc:	ldr	r1, [fp, #12]
   143d0:	tst	r2, #1
   143d4:	mov	r2, r7
   143d8:	mov	r3, lr
   143dc:	str	r0, [sp, #8]
   143e0:	ldr	r0, [sp, #68]	; 0x44
   143e4:	movwne	r2, #4
   143e8:	cmp	r7, #2
   143ec:	movne	r2, r7
   143f0:	str	r2, [sp]
   143f4:	mov	r2, ip
   143f8:	bic	r1, r1, #2
   143fc:	str	r0, [sp, #12]
   14400:	ldr	r0, [sp, #72]	; 0x48
   14404:	str	r1, [sp, #4]
   14408:	mov	r1, sl
   1440c:	str	r0, [sp, #16]
   14410:	mov	r0, r6
   14414:	bl	1317c <_obstack_memory_used@@Base+0x2b4>
   14418:	mov	r9, r0
   1441c:	mov	r0, r9
   14420:	sub	sp, fp, #28
   14424:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14428:	mov	r0, #5
   1442c:	ldr	r1, [sp, #48]	; 0x30
   14430:	ldr	r2, [fp, #-84]	; 0xffffffac
   14434:	ldr	r3, [sp, #84]	; 0x54
   14438:	str	r0, [sp]
   1443c:	ldr	r0, [fp, #12]
   14440:	str	r0, [sp, #4]
   14444:	ldr	r0, [fp, #16]
   14448:	str	r0, [sp, #8]
   1444c:	ldr	r0, [sp, #68]	; 0x44
   14450:	str	r0, [sp, #12]
   14454:	ldr	r0, [sp, #72]	; 0x48
   14458:	str	r0, [sp, #16]
   1445c:	ldr	r0, [sp, #76]	; 0x4c
   14460:	b	14414 <_obstack_memory_used@@Base+0x154c>
   14464:	mov	r0, #0
   14468:	str	r0, [fp, #-72]	; 0xffffffb8
   1446c:	ldr	r1, [sp, #92]	; 0x5c
   14470:	cmp	r1, #0
   14474:	beq	144b4 <_obstack_memory_used@@Base+0x15ec>
   14478:	ldr	r0, [fp, #-72]	; 0xffffffb8
   1447c:	ldr	r2, [sp, #76]	; 0x4c
   14480:	tst	r0, #1
   14484:	bne	144b8 <_obstack_memory_used@@Base+0x15f0>
   14488:	ldrb	r0, [r1]
   1448c:	cmp	r0, #0
   14490:	beq	144b8 <_obstack_memory_used@@Base+0x15f0>
   14494:	add	r1, r1, #1
   14498:	cmp	r9, sl
   1449c:	strbcc	r0, [r2, r9]
   144a0:	add	r9, r9, #1
   144a4:	ldrb	r0, [r1], #1
   144a8:	cmp	r0, #0
   144ac:	bne	14498 <_obstack_memory_used@@Base+0x15d0>
   144b0:	b	144b8 <_obstack_memory_used@@Base+0x15f0>
   144b4:	ldr	r2, [sp, #76]	; 0x4c
   144b8:	cmp	r9, sl
   144bc:	movcc	r0, #0
   144c0:	strbcc	r0, [r2, r9]
   144c4:	mov	r0, r9
   144c8:	sub	sp, fp, #28
   144cc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   144d0:	mov	r2, #1
   144d4:	b	143a0 <_obstack_memory_used@@Base+0x14d8>
   144d8:	ldr	r2, [sp, #80]	; 0x50
   144dc:	mov	r7, #5
   144e0:	b	143c8 <_obstack_memory_used@@Base+0x1500>
   144e4:	bl	110f0 <abort@plt>
   144e8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   144ec:	add	fp, sp, #28
   144f0:	sub	sp, sp, #28
   144f4:	movw	r5, #33168	; 0x8190
   144f8:	cmp	r2, #0
   144fc:	mov	r4, r1
   14500:	mov	r7, r0
   14504:	str	r0, [sp, #20]
   14508:	movt	r5, #2
   1450c:	movne	r5, r2
   14510:	bl	11054 <__errno_location@plt>
   14514:	mov	sl, r0
   14518:	ldm	r5, {r0, r1}
   1451c:	ldr	r2, [r5, #40]	; 0x28
   14520:	ldr	r3, [r5, #44]	; 0x2c
   14524:	add	r9, r5, #8
   14528:	ldr	r6, [sl]
   1452c:	orr	r8, r1, #1
   14530:	mov	r1, #0
   14534:	str	r6, [sp, #24]
   14538:	stm	sp, {r0, r8, r9}
   1453c:	str	r2, [sp, #12]
   14540:	str	r3, [sp, #16]
   14544:	mov	r0, #0
   14548:	mov	r2, r7
   1454c:	mov	r3, r4
   14550:	mov	r6, r4
   14554:	bl	1317c <_obstack_memory_used@@Base+0x2b4>
   14558:	add	r7, r0, #1
   1455c:	mov	r0, r7
   14560:	bl	155c4 <_obstack_memory_used@@Base+0x26fc>
   14564:	mov	r4, r0
   14568:	ldr	r0, [r5]
   1456c:	ldr	r2, [r5, #44]	; 0x2c
   14570:	ldr	r1, [r5, #40]	; 0x28
   14574:	mov	r3, r6
   14578:	stm	sp, {r0, r8, r9}
   1457c:	str	r2, [sp, #16]
   14580:	str	r1, [sp, #12]
   14584:	mov	r0, r4
   14588:	mov	r1, r7
   1458c:	ldr	r2, [sp, #20]
   14590:	bl	1317c <_obstack_memory_used@@Base+0x2b4>
   14594:	ldr	r0, [sp, #24]
   14598:	str	r0, [sl]
   1459c:	mov	r0, r4
   145a0:	sub	sp, fp, #28
   145a4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   145a8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   145ac:	add	fp, sp, #28
   145b0:	sub	sp, sp, #36	; 0x24
   145b4:	movw	r8, #33168	; 0x8190
   145b8:	cmp	r3, #0
   145bc:	mov	r4, r2
   145c0:	str	r2, [sp, #24]
   145c4:	mov	r5, r1
   145c8:	mov	r6, r0
   145cc:	str	r0, [sp, #20]
   145d0:	movt	r8, #2
   145d4:	movne	r8, r3
   145d8:	bl	11054 <__errno_location@plt>
   145dc:	str	r0, [sp, #28]
   145e0:	cmp	r4, #0
   145e4:	add	sl, r8, #8
   145e8:	ldm	r8, {r3, r9}
   145ec:	ldr	r7, [r0]
   145f0:	ldr	r1, [r8, #40]	; 0x28
   145f4:	ldr	r2, [r8, #44]	; 0x2c
   145f8:	mov	r0, #0
   145fc:	orreq	r9, r9, #1
   14600:	str	r7, [sp, #32]
   14604:	mov	r7, r5
   14608:	stm	sp, {r3, r9, sl}
   1460c:	str	r1, [sp, #12]
   14610:	str	r2, [sp, #16]
   14614:	mov	r1, #0
   14618:	mov	r2, r6
   1461c:	mov	r3, r5
   14620:	bl	1317c <_obstack_memory_used@@Base+0x2b4>
   14624:	add	r4, r0, #1
   14628:	mov	r5, r0
   1462c:	mov	r0, r4
   14630:	bl	155c4 <_obstack_memory_used@@Base+0x26fc>
   14634:	mov	r6, r0
   14638:	ldr	r0, [r8]
   1463c:	ldr	r2, [r8, #44]	; 0x2c
   14640:	ldr	r1, [r8, #40]	; 0x28
   14644:	mov	r3, r7
   14648:	stm	sp, {r0, r9, sl}
   1464c:	str	r2, [sp, #16]
   14650:	str	r1, [sp, #12]
   14654:	mov	r0, r6
   14658:	mov	r1, r4
   1465c:	ldr	r2, [sp, #20]
   14660:	bl	1317c <_obstack_memory_used@@Base+0x2b4>
   14664:	ldr	r0, [sp, #24]
   14668:	ldr	r1, [sp, #32]
   1466c:	ldr	r2, [sp, #28]
   14670:	cmp	r0, #0
   14674:	str	r1, [r2]
   14678:	strne	r5, [r0]
   1467c:	mov	r0, r6
   14680:	sub	sp, fp, #28
   14684:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14688:	push	{r4, r5, r6, r7, fp, lr}
   1468c:	add	fp, sp, #16
   14690:	movw	r4, #33056	; 0x8120
   14694:	movt	r4, #2
   14698:	ldrd	r6, [r4]
   1469c:	cmp	r7, #2
   146a0:	blt	146cc <_obstack_memory_used@@Base+0x1804>
   146a4:	add	r5, r6, #12
   146a8:	mov	r7, #0
   146ac:	ldr	r0, [r5, r7, lsl #3]
   146b0:	bl	12800 <close@plt+0x1704>
   146b4:	ldr	r1, [r4, #4]
   146b8:	add	r2, r7, #2
   146bc:	add	r0, r7, #1
   146c0:	mov	r7, r0
   146c4:	cmp	r2, r1
   146c8:	blt	146ac <_obstack_memory_used@@Base+0x17e4>
   146cc:	ldr	r0, [r6, #4]
   146d0:	movw	r5, #33216	; 0x81c0
   146d4:	movt	r5, #2
   146d8:	cmp	r0, r5
   146dc:	beq	146f0 <_obstack_memory_used@@Base+0x1828>
   146e0:	bl	12800 <close@plt+0x1704>
   146e4:	mov	r0, #256	; 0x100
   146e8:	str	r0, [r4, #8]
   146ec:	str	r5, [r4, #12]
   146f0:	add	r5, r4, #8
   146f4:	cmp	r6, r5
   146f8:	beq	14708 <_obstack_memory_used@@Base+0x1840>
   146fc:	mov	r0, r6
   14700:	bl	12800 <close@plt+0x1704>
   14704:	str	r5, [r4]
   14708:	mov	r0, #1
   1470c:	str	r0, [r4, #4]
   14710:	pop	{r4, r5, r6, r7, fp, pc}
   14714:	movw	r3, #33168	; 0x8190
   14718:	mvn	r2, #0
   1471c:	movt	r3, #2
   14720:	b	14724 <_obstack_memory_used@@Base+0x185c>
   14724:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   14728:	add	fp, sp, #28
   1472c:	sub	sp, sp, #44	; 0x2c
   14730:	mov	r7, r3
   14734:	str	r2, [sp, #36]	; 0x24
   14738:	str	r1, [sp, #32]
   1473c:	mov	r5, r0
   14740:	bl	11054 <__errno_location@plt>
   14744:	cmp	r5, #0
   14748:	blt	148ac <_obstack_memory_used@@Base+0x19e4>
   1474c:	cmn	r5, #-2147483647	; 0x80000001
   14750:	beq	148ac <_obstack_memory_used@@Base+0x19e4>
   14754:	movw	r8, #33056	; 0x8120
   14758:	mov	r4, r0
   1475c:	movt	r8, #2
   14760:	ldr	r6, [r8]
   14764:	ldr	r1, [r8, #4]
   14768:	ldr	r0, [r0]
   1476c:	str	r4, [sp, #28]
   14770:	cmp	r1, r5
   14774:	str	r0, [sp, #24]
   14778:	ble	14784 <_obstack_memory_used@@Base+0x18bc>
   1477c:	mov	sl, r6
   14780:	b	147e8 <_obstack_memory_used@@Base+0x1920>
   14784:	mov	r0, #8
   14788:	add	r9, r8, #8
   1478c:	add	r2, r5, #1
   14790:	str	r1, [fp, #-32]	; 0xffffffe0
   14794:	mvn	r3, #-2147483648	; 0x80000000
   14798:	str	r0, [sp]
   1479c:	subs	r0, r6, r9
   147a0:	sub	r2, r2, r1
   147a4:	sub	r1, fp, #32
   147a8:	movne	r0, r6
   147ac:	bl	157c4 <_obstack_memory_used@@Base+0x28fc>
   147b0:	str	r0, [r8]
   147b4:	cmp	r6, r9
   147b8:	mov	sl, r0
   147bc:	ldrdeq	r0, [r8, #8]
   147c0:	stmeq	sl, {r0, r1}
   147c4:	ldr	r1, [r8, #4]
   147c8:	ldr	r2, [fp, #-32]	; 0xffffffe0
   147cc:	add	r0, sl, r1, lsl #3
   147d0:	sub	r1, r2, r1
   147d4:	lsl	r2, r1, #3
   147d8:	mov	r1, #0
   147dc:	bl	1106c <memset@plt>
   147e0:	ldr	r0, [fp, #-32]	; 0xffffffe0
   147e4:	str	r0, [r8, #4]
   147e8:	mov	r9, sl
   147ec:	ldr	r6, [r9, r5, lsl #3]!
   147f0:	ldr	r4, [r9, #4]!
   147f4:	ldm	r7, {r0, r1}
   147f8:	ldr	r2, [r7, #40]	; 0x28
   147fc:	ldr	r3, [r7, #44]	; 0x2c
   14800:	orr	r8, r1, #1
   14804:	add	r1, r7, #8
   14808:	stm	sp, {r0, r8}
   1480c:	add	r0, sp, #8
   14810:	str	r1, [sp, #20]
   14814:	stm	r0, {r1, r2, r3}
   14818:	mov	r0, r4
   1481c:	mov	r1, r6
   14820:	ldr	r2, [sp, #32]
   14824:	ldr	r3, [sp, #36]	; 0x24
   14828:	bl	1317c <_obstack_memory_used@@Base+0x2b4>
   1482c:	cmp	r6, r0
   14830:	bhi	14894 <_obstack_memory_used@@Base+0x19cc>
   14834:	add	r6, r0, #1
   14838:	movw	r0, #33216	; 0x81c0
   1483c:	movt	r0, #2
   14840:	str	r6, [sl, r5, lsl #3]
   14844:	cmp	r4, r0
   14848:	beq	14854 <_obstack_memory_used@@Base+0x198c>
   1484c:	mov	r0, r4
   14850:	bl	12800 <close@plt+0x1704>
   14854:	mov	r0, r6
   14858:	bl	155c4 <_obstack_memory_used@@Base+0x26fc>
   1485c:	str	r0, [r9]
   14860:	mov	r4, r0
   14864:	add	r3, sp, #8
   14868:	ldr	r0, [r7]
   1486c:	ldr	r1, [r7, #40]	; 0x28
   14870:	ldr	r2, [r7, #44]	; 0x2c
   14874:	stm	sp, {r0, r8}
   14878:	ldr	r0, [sp, #20]
   1487c:	stm	r3, {r0, r1, r2}
   14880:	mov	r0, r4
   14884:	mov	r1, r6
   14888:	ldr	r2, [sp, #32]
   1488c:	ldr	r3, [sp, #36]	; 0x24
   14890:	bl	1317c <_obstack_memory_used@@Base+0x2b4>
   14894:	ldr	r1, [sp, #24]
   14898:	ldr	r0, [sp, #28]
   1489c:	str	r1, [r0]
   148a0:	mov	r0, r4
   148a4:	sub	sp, fp, #28
   148a8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   148ac:	bl	110f0 <abort@plt>
   148b0:	movw	r3, #33168	; 0x8190
   148b4:	movt	r3, #2
   148b8:	b	14724 <_obstack_memory_used@@Base+0x185c>
   148bc:	movw	r3, #33168	; 0x8190
   148c0:	mov	r1, r0
   148c4:	mov	r0, #0
   148c8:	mvn	r2, #0
   148cc:	movt	r3, #2
   148d0:	b	14724 <_obstack_memory_used@@Base+0x185c>
   148d4:	movw	r3, #33168	; 0x8190
   148d8:	mov	r2, r1
   148dc:	mov	r1, r0
   148e0:	mov	r0, #0
   148e4:	movt	r3, #2
   148e8:	b	14724 <_obstack_memory_used@@Base+0x185c>
   148ec:	push	{fp, lr}
   148f0:	mov	fp, sp
   148f4:	sub	sp, sp, #48	; 0x30
   148f8:	vmov.i32	q8, #0	; 0x00000000
   148fc:	mov	ip, #32
   14900:	mov	r3, sp
   14904:	mov	lr, r2
   14908:	cmp	r1, #10
   1490c:	add	r2, r3, #16
   14910:	vst1.64	{d16-d17}, [r3], ip
   14914:	vst1.64	{d16-d17}, [r3]
   14918:	vst1.64	{d16-d17}, [r2]
   1491c:	beq	1493c <_obstack_memory_used@@Base+0x1a74>
   14920:	str	r1, [sp]
   14924:	mov	r3, sp
   14928:	mov	r1, lr
   1492c:	mvn	r2, #0
   14930:	bl	14724 <_obstack_memory_used@@Base+0x185c>
   14934:	mov	sp, fp
   14938:	pop	{fp, pc}
   1493c:	bl	110f0 <abort@plt>
   14940:	push	{r4, sl, fp, lr}
   14944:	add	fp, sp, #8
   14948:	sub	sp, sp, #48	; 0x30
   1494c:	mov	ip, r3
   14950:	mov	r3, sp
   14954:	vmov.i32	q8, #0	; 0x00000000
   14958:	mov	lr, #32
   1495c:	cmp	r1, #10
   14960:	add	r4, r3, #16
   14964:	vst1.64	{d16-d17}, [r3], lr
   14968:	vst1.64	{d16-d17}, [r3]
   1496c:	vst1.64	{d16-d17}, [r4]
   14970:	beq	14990 <_obstack_memory_used@@Base+0x1ac8>
   14974:	str	r1, [sp]
   14978:	mov	r1, r2
   1497c:	mov	r3, sp
   14980:	mov	r2, ip
   14984:	bl	14724 <_obstack_memory_used@@Base+0x185c>
   14988:	sub	sp, fp, #8
   1498c:	pop	{r4, sl, fp, pc}
   14990:	bl	110f0 <abort@plt>
   14994:	push	{fp, lr}
   14998:	mov	fp, sp
   1499c:	sub	sp, sp, #48	; 0x30
   149a0:	mov	r3, sp
   149a4:	vmov.i32	q8, #0	; 0x00000000
   149a8:	mov	ip, #32
   149ac:	cmp	r0, #10
   149b0:	add	r2, r3, #16
   149b4:	vst1.64	{d16-d17}, [r3], ip
   149b8:	vst1.64	{d16-d17}, [r3]
   149bc:	vst1.64	{d16-d17}, [r2]
   149c0:	beq	149e0 <_obstack_memory_used@@Base+0x1b18>
   149c4:	str	r0, [sp]
   149c8:	mov	r3, sp
   149cc:	mov	r0, #0
   149d0:	mvn	r2, #0
   149d4:	bl	14724 <_obstack_memory_used@@Base+0x185c>
   149d8:	mov	sp, fp
   149dc:	pop	{fp, pc}
   149e0:	bl	110f0 <abort@plt>
   149e4:	push	{fp, lr}
   149e8:	mov	fp, sp
   149ec:	sub	sp, sp, #48	; 0x30
   149f0:	mov	r3, sp
   149f4:	vmov.i32	q8, #0	; 0x00000000
   149f8:	mov	ip, #32
   149fc:	cmp	r0, #10
   14a00:	add	lr, r3, #16
   14a04:	vst1.64	{d16-d17}, [r3], ip
   14a08:	vst1.64	{d16-d17}, [r3]
   14a0c:	vst1.64	{d16-d17}, [lr]
   14a10:	beq	14a2c <_obstack_memory_used@@Base+0x1b64>
   14a14:	str	r0, [sp]
   14a18:	mov	r3, sp
   14a1c:	mov	r0, #0
   14a20:	bl	14724 <_obstack_memory_used@@Base+0x185c>
   14a24:	mov	sp, fp
   14a28:	pop	{fp, pc}
   14a2c:	bl	110f0 <abort@plt>
   14a30:	push	{r4, sl, fp, lr}
   14a34:	add	fp, sp, #8
   14a38:	sub	sp, sp, #48	; 0x30
   14a3c:	mov	lr, r0
   14a40:	movw	r0, #33168	; 0x8190
   14a44:	mov	r3, #32
   14a48:	mov	ip, r1
   14a4c:	mov	r4, #1
   14a50:	movt	r0, #2
   14a54:	add	r1, r0, #16
   14a58:	vld1.64	{d16-d17}, [r0], r3
   14a5c:	mov	r3, sp
   14a60:	vld1.64	{d18-d19}, [r1]
   14a64:	add	r1, r3, #16
   14a68:	vld1.64	{d20-d21}, [r0]
   14a6c:	add	r0, r3, #32
   14a70:	vst1.64	{d18-d19}, [r1]
   14a74:	mov	r1, r3
   14a78:	vst1.64	{d20-d21}, [r0]
   14a7c:	mov	r0, #28
   14a80:	and	r0, r0, r2, lsr #3
   14a84:	and	r2, r2, #31
   14a88:	vst1.64	{d16-d17}, [r1], r0
   14a8c:	ldr	r0, [r1, #8]
   14a90:	bic	r4, r4, r0, lsr r2
   14a94:	eor	r0, r0, r4, lsl r2
   14a98:	mov	r2, ip
   14a9c:	str	r0, [r1, #8]
   14aa0:	mov	r0, #0
   14aa4:	mov	r1, lr
   14aa8:	bl	14724 <_obstack_memory_used@@Base+0x185c>
   14aac:	sub	sp, fp, #8
   14ab0:	pop	{r4, sl, fp, pc}
   14ab4:	push	{fp, lr}
   14ab8:	mov	fp, sp
   14abc:	sub	sp, sp, #48	; 0x30
   14ac0:	mov	ip, r0
   14ac4:	movw	r0, #33168	; 0x8190
   14ac8:	mov	r3, #32
   14acc:	movt	r0, #2
   14ad0:	add	r2, r0, #16
   14ad4:	vld1.64	{d16-d17}, [r0], r3
   14ad8:	mov	r3, sp
   14adc:	vld1.64	{d18-d19}, [r2]
   14ae0:	add	r2, r3, #16
   14ae4:	vld1.64	{d20-d21}, [r0]
   14ae8:	add	r0, r3, #32
   14aec:	vst1.64	{d18-d19}, [r2]
   14af0:	mov	r2, r3
   14af4:	vst1.64	{d20-d21}, [r0]
   14af8:	mov	r0, #28
   14afc:	and	r0, r0, r1, lsr #3
   14b00:	and	r1, r1, #31
   14b04:	vst1.64	{d16-d17}, [r2], r0
   14b08:	mov	r0, #1
   14b0c:	ldr	lr, [r2, #8]
   14b10:	bic	r0, r0, lr, lsr r1
   14b14:	eor	r0, lr, r0, lsl r1
   14b18:	mov	r1, ip
   14b1c:	str	r0, [r2, #8]
   14b20:	mov	r0, #0
   14b24:	mvn	r2, #0
   14b28:	bl	14724 <_obstack_memory_used@@Base+0x185c>
   14b2c:	mov	sp, fp
   14b30:	pop	{fp, pc}
   14b34:	push	{fp, lr}
   14b38:	mov	fp, sp
   14b3c:	sub	sp, sp, #48	; 0x30
   14b40:	movw	r2, #33168	; 0x8190
   14b44:	mov	r3, #32
   14b48:	mov	r1, r0
   14b4c:	movt	r2, #2
   14b50:	add	r0, r2, #16
   14b54:	vld1.64	{d16-d17}, [r2], r3
   14b58:	mov	r3, sp
   14b5c:	vld1.64	{d18-d19}, [r0]
   14b60:	add	r0, r3, #16
   14b64:	vld1.64	{d20-d21}, [r2]
   14b68:	mov	r2, r3
   14b6c:	vst1.64	{d18-d19}, [r0]
   14b70:	add	r0, r3, #32
   14b74:	vst1.64	{d20-d21}, [r0]
   14b78:	mov	r0, #12
   14b7c:	vst1.64	{d16-d17}, [r2], r0
   14b80:	ldr	r0, [r2]
   14b84:	orr	r0, r0, #67108864	; 0x4000000
   14b88:	str	r0, [r2]
   14b8c:	mov	r0, #0
   14b90:	mvn	r2, #0
   14b94:	bl	14724 <_obstack_memory_used@@Base+0x185c>
   14b98:	mov	sp, fp
   14b9c:	pop	{fp, pc}
   14ba0:	push	{fp, lr}
   14ba4:	mov	fp, sp
   14ba8:	sub	sp, sp, #48	; 0x30
   14bac:	mov	ip, r1
   14bb0:	mov	r1, r0
   14bb4:	movw	r0, #33168	; 0x8190
   14bb8:	mov	r3, #32
   14bbc:	movt	r0, #2
   14bc0:	add	r2, r0, #16
   14bc4:	vld1.64	{d16-d17}, [r0], r3
   14bc8:	mov	r3, sp
   14bcc:	vld1.64	{d18-d19}, [r2]
   14bd0:	add	r2, r3, #16
   14bd4:	vld1.64	{d20-d21}, [r0]
   14bd8:	add	r0, r3, #32
   14bdc:	vst1.64	{d18-d19}, [r2]
   14be0:	mov	r2, r3
   14be4:	vst1.64	{d20-d21}, [r0]
   14be8:	mov	r0, #12
   14bec:	vst1.64	{d16-d17}, [r2], r0
   14bf0:	ldr	r0, [r2]
   14bf4:	orr	r0, r0, #67108864	; 0x4000000
   14bf8:	str	r0, [r2]
   14bfc:	mov	r0, #0
   14c00:	mov	r2, ip
   14c04:	bl	14724 <_obstack_memory_used@@Base+0x185c>
   14c08:	mov	sp, fp
   14c0c:	pop	{fp, pc}
   14c10:	push	{r4, sl, fp, lr}
   14c14:	add	fp, sp, #8
   14c18:	sub	sp, sp, #96	; 0x60
   14c1c:	mov	ip, r2
   14c20:	mov	r2, sp
   14c24:	vmov.i32	q8, #0	; 0x00000000
   14c28:	mov	r4, #28
   14c2c:	cmp	r1, #10
   14c30:	mov	r3, r2
   14c34:	add	lr, r2, #16
   14c38:	vst1.64	{d16-d17}, [r3], r4
   14c3c:	vst1.64	{d16-d17}, [lr]
   14c40:	vst1.32	{d16-d17}, [r3]
   14c44:	beq	14c94 <_obstack_memory_used@@Base+0x1dcc>
   14c48:	vld1.64	{d16-d17}, [r2], r4
   14c4c:	vld1.64	{d18-d19}, [lr]
   14c50:	add	r3, sp, #48	; 0x30
   14c54:	add	r4, r3, #4
   14c58:	vld1.32	{d20-d21}, [r2]
   14c5c:	add	r2, r3, #20
   14c60:	vst1.32	{d16-d17}, [r4]
   14c64:	vst1.32	{d18-d19}, [r2]
   14c68:	add	r2, r3, #32
   14c6c:	vst1.32	{d20-d21}, [r2]
   14c70:	str	r1, [sp, #48]	; 0x30
   14c74:	mvn	r2, #0
   14c78:	ldr	r1, [sp, #60]	; 0x3c
   14c7c:	orr	r1, r1, #67108864	; 0x4000000
   14c80:	str	r1, [sp, #60]	; 0x3c
   14c84:	mov	r1, ip
   14c88:	bl	14724 <_obstack_memory_used@@Base+0x185c>
   14c8c:	sub	sp, fp, #8
   14c90:	pop	{r4, sl, fp, pc}
   14c94:	bl	110f0 <abort@plt>
   14c98:	push	{r4, r5, fp, lr}
   14c9c:	add	fp, sp, #8
   14ca0:	sub	sp, sp, #48	; 0x30
   14ca4:	mov	ip, r3
   14ca8:	movw	r3, #33168	; 0x8190
   14cac:	mov	lr, #32
   14cb0:	cmp	r1, #0
   14cb4:	mov	r5, sp
   14cb8:	movt	r3, #2
   14cbc:	cmpne	r2, #0
   14cc0:	add	r4, r3, #16
   14cc4:	vld1.64	{d16-d17}, [r3], lr
   14cc8:	vld1.64	{d18-d19}, [r4]
   14ccc:	add	r4, r5, #16
   14cd0:	vld1.64	{d20-d21}, [r3]
   14cd4:	vst1.64	{d16-d17}, [r5], lr
   14cd8:	mov	r3, #10
   14cdc:	vst1.64	{d18-d19}, [r4]
   14ce0:	vst1.64	{d20-d21}, [r5]
   14ce4:	str	r3, [sp]
   14ce8:	bne	14cf0 <_obstack_memory_used@@Base+0x1e28>
   14cec:	bl	110f0 <abort@plt>
   14cf0:	str	r2, [sp, #44]	; 0x2c
   14cf4:	str	r1, [sp, #40]	; 0x28
   14cf8:	mov	r3, sp
   14cfc:	mov	r1, ip
   14d00:	mvn	r2, #0
   14d04:	bl	14724 <_obstack_memory_used@@Base+0x185c>
   14d08:	sub	sp, fp, #8
   14d0c:	pop	{r4, r5, fp, pc}
   14d10:	push	{r4, r5, fp, lr}
   14d14:	add	fp, sp, #8
   14d18:	sub	sp, sp, #48	; 0x30
   14d1c:	mov	lr, r3
   14d20:	movw	r3, #33168	; 0x8190
   14d24:	mov	ip, #32
   14d28:	cmp	r1, #0
   14d2c:	mov	r5, sp
   14d30:	movt	r3, #2
   14d34:	cmpne	r2, #0
   14d38:	add	r4, r3, #16
   14d3c:	vld1.64	{d16-d17}, [r3], ip
   14d40:	vld1.64	{d18-d19}, [r4]
   14d44:	add	r4, r5, #16
   14d48:	vld1.64	{d20-d21}, [r3]
   14d4c:	vst1.64	{d16-d17}, [r5], ip
   14d50:	mov	r3, #10
   14d54:	vst1.64	{d18-d19}, [r4]
   14d58:	vst1.64	{d20-d21}, [r5]
   14d5c:	str	r3, [sp]
   14d60:	bne	14d68 <_obstack_memory_used@@Base+0x1ea0>
   14d64:	bl	110f0 <abort@plt>
   14d68:	ldr	ip, [fp, #8]
   14d6c:	str	r2, [sp, #44]	; 0x2c
   14d70:	str	r1, [sp, #40]	; 0x28
   14d74:	mov	r3, sp
   14d78:	mov	r1, lr
   14d7c:	mov	r2, ip
   14d80:	bl	14724 <_obstack_memory_used@@Base+0x185c>
   14d84:	sub	sp, fp, #8
   14d88:	pop	{r4, r5, fp, pc}
   14d8c:	push	{r4, sl, fp, lr}
   14d90:	add	fp, sp, #8
   14d94:	sub	sp, sp, #48	; 0x30
   14d98:	mov	ip, r2
   14d9c:	movw	r2, #33168	; 0x8190
   14da0:	mov	lr, #32
   14da4:	cmp	r0, #0
   14da8:	mov	r4, sp
   14dac:	movt	r2, #2
   14db0:	cmpne	r1, #0
   14db4:	add	r3, r2, #16
   14db8:	vld1.64	{d16-d17}, [r2], lr
   14dbc:	vld1.64	{d18-d19}, [r3]
   14dc0:	add	r3, r4, #16
   14dc4:	vld1.64	{d20-d21}, [r2]
   14dc8:	vst1.64	{d16-d17}, [r4], lr
   14dcc:	mov	r2, #10
   14dd0:	vst1.64	{d18-d19}, [r3]
   14dd4:	vst1.64	{d20-d21}, [r4]
   14dd8:	str	r2, [sp]
   14ddc:	bne	14de4 <_obstack_memory_used@@Base+0x1f1c>
   14de0:	bl	110f0 <abort@plt>
   14de4:	str	r1, [sp, #44]	; 0x2c
   14de8:	str	r0, [sp, #40]	; 0x28
   14dec:	mov	r3, sp
   14df0:	mov	r0, #0
   14df4:	mov	r1, ip
   14df8:	mvn	r2, #0
   14dfc:	bl	14724 <_obstack_memory_used@@Base+0x185c>
   14e00:	sub	sp, fp, #8
   14e04:	pop	{r4, sl, fp, pc}
   14e08:	push	{r4, r5, fp, lr}
   14e0c:	add	fp, sp, #8
   14e10:	sub	sp, sp, #48	; 0x30
   14e14:	mov	lr, r2
   14e18:	movw	r2, #33168	; 0x8190
   14e1c:	mov	ip, r3
   14e20:	mov	r3, #32
   14e24:	cmp	r0, #0
   14e28:	mov	r5, sp
   14e2c:	movt	r2, #2
   14e30:	cmpne	r1, #0
   14e34:	add	r4, r2, #16
   14e38:	vld1.64	{d16-d17}, [r2], r3
   14e3c:	vld1.64	{d18-d19}, [r4]
   14e40:	add	r4, r5, #16
   14e44:	vld1.64	{d20-d21}, [r2]
   14e48:	vst1.64	{d16-d17}, [r5], r3
   14e4c:	mov	r2, #10
   14e50:	vst1.64	{d18-d19}, [r4]
   14e54:	vst1.64	{d20-d21}, [r5]
   14e58:	str	r2, [sp]
   14e5c:	bne	14e64 <_obstack_memory_used@@Base+0x1f9c>
   14e60:	bl	110f0 <abort@plt>
   14e64:	str	r1, [sp, #44]	; 0x2c
   14e68:	str	r0, [sp, #40]	; 0x28
   14e6c:	mov	r3, sp
   14e70:	mov	r0, #0
   14e74:	mov	r1, lr
   14e78:	mov	r2, ip
   14e7c:	bl	14724 <_obstack_memory_used@@Base+0x185c>
   14e80:	sub	sp, fp, #8
   14e84:	pop	{r4, r5, fp, pc}
   14e88:	movw	r3, #33008	; 0x80f0
   14e8c:	movt	r3, #2
   14e90:	b	14724 <_obstack_memory_used@@Base+0x185c>
   14e94:	movw	r3, #33008	; 0x80f0
   14e98:	mov	r2, r1
   14e9c:	mov	r1, r0
   14ea0:	mov	r0, #0
   14ea4:	movt	r3, #2
   14ea8:	b	14724 <_obstack_memory_used@@Base+0x185c>
   14eac:	movw	r3, #33008	; 0x80f0
   14eb0:	mvn	r2, #0
   14eb4:	movt	r3, #2
   14eb8:	b	14724 <_obstack_memory_used@@Base+0x185c>
   14ebc:	movw	r3, #33008	; 0x80f0
   14ec0:	mov	r1, r0
   14ec4:	mov	r0, #0
   14ec8:	mvn	r2, #0
   14ecc:	movt	r3, #2
   14ed0:	b	14724 <_obstack_memory_used@@Base+0x185c>
   14ed4:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   14ed8:	add	fp, sp, #24
   14edc:	sub	sp, sp, #32
   14ee0:	ldr	r6, [fp, #12]
   14ee4:	ldr	r7, [fp, #8]
   14ee8:	mov	r4, r2
   14eec:	mov	r8, r0
   14ef0:	cmp	r1, #0
   14ef4:	beq	14f1c <_obstack_memory_used@@Base+0x2054>
   14ef8:	movw	r2, #31088	; 0x7970
   14efc:	mov	r5, r1
   14f00:	str	r3, [sp, #4]
   14f04:	str	r4, [sp]
   14f08:	mov	r0, r8
   14f0c:	mov	r1, #1
   14f10:	movt	r2, #1
   14f14:	mov	r3, r5
   14f18:	b	14f34 <_obstack_memory_used@@Base+0x206c>
   14f1c:	movw	r2, #31100	; 0x797c
   14f20:	str	r3, [sp]
   14f24:	mov	r0, r8
   14f28:	mov	r1, #1
   14f2c:	mov	r3, r4
   14f30:	movt	r2, #1
   14f34:	bl	11090 <__fprintf_chk@plt>
   14f38:	movw	r1, #31107	; 0x7983
   14f3c:	mov	r0, #0
   14f40:	mov	r2, #5
   14f44:	movt	r1, #1
   14f48:	bl	10f34 <dcgettext@plt>
   14f4c:	movw	r2, #31825	; 0x7c51
   14f50:	mov	r3, r0
   14f54:	movw	r0, #2022	; 0x7e6
   14f58:	mov	r1, #1
   14f5c:	str	r0, [sp]
   14f60:	movt	r2, #1
   14f64:	mov	r0, r8
   14f68:	bl	11090 <__fprintf_chk@plt>
   14f6c:	movw	r4, #25650	; 0x6432
   14f70:	mov	r1, r8
   14f74:	movt	r4, #1
   14f78:	mov	r0, r4
   14f7c:	bl	10ebc <fputs_unlocked@plt>
   14f80:	movw	r1, #31111	; 0x7987
   14f84:	mov	r0, #0
   14f88:	mov	r2, #5
   14f8c:	movt	r1, #1
   14f90:	bl	10f34 <dcgettext@plt>
   14f94:	movw	r3, #31282	; 0x7a32
   14f98:	mov	r2, r0
   14f9c:	mov	r0, r8
   14fa0:	mov	r1, #1
   14fa4:	movt	r3, #1
   14fa8:	bl	11090 <__fprintf_chk@plt>
   14fac:	mov	r0, r4
   14fb0:	mov	r1, r8
   14fb4:	bl	10ebc <fputs_unlocked@plt>
   14fb8:	cmp	r6, #9
   14fbc:	bhi	14ff8 <_obstack_memory_used@@Base+0x2130>
   14fc0:	add	r0, pc, #0
   14fc4:	ldr	pc, [r0, r6, lsl #2]
   14fc8:	strdeq	r4, [r1], -r0
   14fcc:	andeq	r5, r1, r4
   14fd0:	andeq	r5, r1, r4, lsr r0
   14fd4:	andeq	r5, r1, ip, asr r0
   14fd8:	andeq	r5, r1, r4, lsl #1
   14fdc:	andeq	r5, r1, ip, lsr #1
   14fe0:	ldrdeq	r5, [r1], -r4
   14fe4:	andeq	r5, r1, ip, lsl #2
   14fe8:			; <UNDEFINED> instruction: 0x000151b4
   14fec:	andeq	r5, r1, ip, asr r1
   14ff0:	sub	sp, fp, #24
   14ff4:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   14ff8:	movw	r1, #31635	; 0x7b93
   14ffc:	movt	r1, #1
   15000:	b	15164 <_obstack_memory_used@@Base+0x229c>
   15004:	movw	r1, #31316	; 0x7a54
   15008:	mov	r0, #0
   1500c:	mov	r2, #5
   15010:	movt	r1, #1
   15014:	bl	10f34 <dcgettext@plt>
   15018:	ldr	r3, [r7]
   1501c:	mov	r2, r0
   15020:	mov	r0, r8
   15024:	mov	r1, #1
   15028:	sub	sp, fp, #24
   1502c:	pop	{r4, r5, r6, r7, r8, sl, fp, lr}
   15030:	b	11090 <__fprintf_chk@plt>
   15034:	movw	r1, #31332	; 0x7a64
   15038:	mov	r0, #0
   1503c:	mov	r2, #5
   15040:	movt	r1, #1
   15044:	bl	10f34 <dcgettext@plt>
   15048:	mov	r2, r0
   1504c:	ldr	r3, [r7]
   15050:	ldr	r0, [r7, #4]
   15054:	str	r0, [sp]
   15058:	b	15148 <_obstack_memory_used@@Base+0x2280>
   1505c:	movw	r1, #31355	; 0x7a7b
   15060:	mov	r0, #0
   15064:	mov	r2, #5
   15068:	movt	r1, #1
   1506c:	bl	10f34 <dcgettext@plt>
   15070:	ldr	r3, [r7]
   15074:	mov	r2, r0
   15078:	ldmib	r7, {r0, r1}
   1507c:	stm	sp, {r0, r1}
   15080:	b	15148 <_obstack_memory_used@@Base+0x2280>
   15084:	movw	r1, #31383	; 0x7a97
   15088:	mov	r0, #0
   1508c:	mov	r2, #5
   15090:	movt	r1, #1
   15094:	bl	10f34 <dcgettext@plt>
   15098:	ldr	r3, [r7]
   1509c:	mov	r2, r0
   150a0:	ldmib	r7, {r0, r1, r7}
   150a4:	stm	sp, {r0, r1, r7}
   150a8:	b	15148 <_obstack_memory_used@@Base+0x2280>
   150ac:	movw	r1, #31415	; 0x7ab7
   150b0:	mov	r0, #0
   150b4:	mov	r2, #5
   150b8:	movt	r1, #1
   150bc:	bl	10f34 <dcgettext@plt>
   150c0:	ldr	r3, [r7]
   150c4:	mov	r2, r0
   150c8:	ldmib	r7, {r0, r1, r6, r7}
   150cc:	stm	sp, {r0, r1, r6, r7}
   150d0:	b	15148 <_obstack_memory_used@@Base+0x2280>
   150d4:	movw	r1, #31451	; 0x7adb
   150d8:	mov	r0, #0
   150dc:	mov	r2, #5
   150e0:	movt	r1, #1
   150e4:	bl	10f34 <dcgettext@plt>
   150e8:	ldr	r3, [r7]
   150ec:	mov	r2, r0
   150f0:	ldmib	r7, {r0, r1, r6}
   150f4:	ldr	r5, [r7, #16]
   150f8:	ldr	r7, [r7, #20]
   150fc:	stm	sp, {r0, r1, r6}
   15100:	str	r5, [sp, #12]
   15104:	str	r7, [sp, #16]
   15108:	b	15148 <_obstack_memory_used@@Base+0x2280>
   1510c:	movw	r1, #31491	; 0x7b03
   15110:	mov	r0, #0
   15114:	mov	r2, #5
   15118:	movt	r1, #1
   1511c:	bl	10f34 <dcgettext@plt>
   15120:	ldr	r3, [r7]
   15124:	mov	r2, r0
   15128:	ldmib	r7, {r0, r1, r6}
   1512c:	ldr	r5, [r7, #16]
   15130:	ldr	r4, [r7, #20]
   15134:	ldr	r7, [r7, #24]
   15138:	stm	sp, {r0, r1, r6}
   1513c:	str	r5, [sp, #12]
   15140:	str	r4, [sp, #16]
   15144:	str	r7, [sp, #20]
   15148:	mov	r0, r8
   1514c:	mov	r1, #1
   15150:	bl	11090 <__fprintf_chk@plt>
   15154:	sub	sp, fp, #24
   15158:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   1515c:	movw	r1, #31583	; 0x7b5f
   15160:	movt	r1, #1
   15164:	mov	r0, #0
   15168:	mov	r2, #5
   1516c:	bl	10f34 <dcgettext@plt>
   15170:	mov	ip, r0
   15174:	ldr	r3, [r7]
   15178:	ldr	r0, [r7, #4]
   1517c:	ldr	r1, [r7, #8]
   15180:	ldr	r6, [r7, #12]
   15184:	ldr	r5, [r7, #16]
   15188:	ldr	r4, [r7, #20]
   1518c:	ldr	r2, [r7, #24]
   15190:	ldr	lr, [r7, #28]
   15194:	ldr	r7, [r7, #32]
   15198:	stm	sp, {r0, r1, r6}
   1519c:	str	r5, [sp, #12]
   151a0:	str	r4, [sp, #16]
   151a4:	str	r2, [sp, #20]
   151a8:	str	lr, [sp, #24]
   151ac:	str	r7, [sp, #28]
   151b0:	b	151f8 <_obstack_memory_used@@Base+0x2330>
   151b4:	movw	r1, #31535	; 0x7b2f
   151b8:	mov	r0, #0
   151bc:	mov	r2, #5
   151c0:	movt	r1, #1
   151c4:	bl	10f34 <dcgettext@plt>
   151c8:	mov	ip, r0
   151cc:	ldr	r3, [r7]
   151d0:	ldmib	r7, {r0, r1, r6}
   151d4:	ldr	r5, [r7, #16]
   151d8:	ldr	r4, [r7, #20]
   151dc:	ldr	r2, [r7, #24]
   151e0:	ldr	r7, [r7, #28]
   151e4:	stm	sp, {r0, r1, r6}
   151e8:	str	r5, [sp, #12]
   151ec:	str	r4, [sp, #16]
   151f0:	str	r2, [sp, #20]
   151f4:	str	r7, [sp, #24]
   151f8:	mov	r0, r8
   151fc:	mov	r1, #1
   15200:	mov	r2, ip
   15204:	bl	11090 <__fprintf_chk@plt>
   15208:	sub	sp, fp, #24
   1520c:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   15210:	push	{r4, sl, fp, lr}
   15214:	add	fp, sp, #8
   15218:	sub	sp, sp, #8
   1521c:	ldr	ip, [fp, #8]
   15220:	mov	lr, #0
   15224:	ldr	r4, [ip, lr, lsl #2]
   15228:	add	lr, lr, #1
   1522c:	cmp	r4, #0
   15230:	bne	15224 <_obstack_memory_used@@Base+0x235c>
   15234:	sub	r4, lr, #1
   15238:	str	ip, [sp]
   1523c:	str	r4, [sp, #4]
   15240:	bl	14ed4 <_obstack_memory_used@@Base+0x200c>
   15244:	sub	sp, fp, #8
   15248:	pop	{r4, sl, fp, pc}
   1524c:	push	{fp, lr}
   15250:	mov	fp, sp
   15254:	sub	sp, sp, #48	; 0x30
   15258:	ldr	ip, [fp, #8]
   1525c:	ldr	lr, [ip]
   15260:	cmp	lr, #0
   15264:	str	lr, [sp, #8]
   15268:	beq	15304 <_obstack_memory_used@@Base+0x243c>
   1526c:	ldr	lr, [ip, #4]
   15270:	cmp	lr, #0
   15274:	str	lr, [sp, #12]
   15278:	beq	1530c <_obstack_memory_used@@Base+0x2444>
   1527c:	ldr	lr, [ip, #8]
   15280:	cmp	lr, #0
   15284:	str	lr, [sp, #16]
   15288:	beq	15314 <_obstack_memory_used@@Base+0x244c>
   1528c:	ldr	lr, [ip, #12]
   15290:	cmp	lr, #0
   15294:	str	lr, [sp, #20]
   15298:	beq	1531c <_obstack_memory_used@@Base+0x2454>
   1529c:	ldr	lr, [ip, #16]
   152a0:	cmp	lr, #0
   152a4:	str	lr, [sp, #24]
   152a8:	beq	15324 <_obstack_memory_used@@Base+0x245c>
   152ac:	ldr	lr, [ip, #20]
   152b0:	cmp	lr, #0
   152b4:	str	lr, [sp, #28]
   152b8:	beq	1532c <_obstack_memory_used@@Base+0x2464>
   152bc:	ldr	lr, [ip, #24]
   152c0:	cmp	lr, #0
   152c4:	str	lr, [sp, #32]
   152c8:	beq	15334 <_obstack_memory_used@@Base+0x246c>
   152cc:	ldr	lr, [ip, #28]
   152d0:	cmp	lr, #0
   152d4:	str	lr, [sp, #36]	; 0x24
   152d8:	beq	1533c <_obstack_memory_used@@Base+0x2474>
   152dc:	ldr	lr, [ip, #32]
   152e0:	cmp	lr, #0
   152e4:	str	lr, [sp, #40]	; 0x28
   152e8:	beq	15344 <_obstack_memory_used@@Base+0x247c>
   152ec:	ldr	lr, [ip, #36]	; 0x24
   152f0:	mov	ip, #10
   152f4:	cmp	lr, #0
   152f8:	str	lr, [sp, #44]	; 0x2c
   152fc:	movweq	ip, #9
   15300:	b	15348 <_obstack_memory_used@@Base+0x2480>
   15304:	mov	ip, #0
   15308:	b	15348 <_obstack_memory_used@@Base+0x2480>
   1530c:	mov	ip, #1
   15310:	b	15348 <_obstack_memory_used@@Base+0x2480>
   15314:	mov	ip, #2
   15318:	b	15348 <_obstack_memory_used@@Base+0x2480>
   1531c:	mov	ip, #3
   15320:	b	15348 <_obstack_memory_used@@Base+0x2480>
   15324:	mov	ip, #4
   15328:	b	15348 <_obstack_memory_used@@Base+0x2480>
   1532c:	mov	ip, #5
   15330:	b	15348 <_obstack_memory_used@@Base+0x2480>
   15334:	mov	ip, #6
   15338:	b	15348 <_obstack_memory_used@@Base+0x2480>
   1533c:	mov	ip, #7
   15340:	b	15348 <_obstack_memory_used@@Base+0x2480>
   15344:	mov	ip, #8
   15348:	add	lr, sp, #8
   1534c:	str	ip, [sp, #4]
   15350:	str	lr, [sp]
   15354:	bl	14ed4 <_obstack_memory_used@@Base+0x200c>
   15358:	mov	sp, fp
   1535c:	pop	{fp, pc}
   15360:	push	{fp, lr}
   15364:	mov	fp, sp
   15368:	sub	sp, sp, #56	; 0x38
   1536c:	add	ip, fp, #8
   15370:	str	ip, [sp, #12]
   15374:	ldr	lr, [fp, #8]
   15378:	cmp	lr, #0
   1537c:	str	lr, [sp, #16]
   15380:	beq	1541c <_obstack_memory_used@@Base+0x2554>
   15384:	ldr	lr, [ip, #4]
   15388:	cmp	lr, #0
   1538c:	str	lr, [sp, #20]
   15390:	beq	15424 <_obstack_memory_used@@Base+0x255c>
   15394:	ldr	lr, [ip, #8]
   15398:	cmp	lr, #0
   1539c:	str	lr, [sp, #24]
   153a0:	beq	1542c <_obstack_memory_used@@Base+0x2564>
   153a4:	ldr	lr, [ip, #12]
   153a8:	cmp	lr, #0
   153ac:	str	lr, [sp, #28]
   153b0:	beq	15434 <_obstack_memory_used@@Base+0x256c>
   153b4:	ldr	lr, [ip, #16]
   153b8:	cmp	lr, #0
   153bc:	str	lr, [sp, #32]
   153c0:	beq	1543c <_obstack_memory_used@@Base+0x2574>
   153c4:	ldr	lr, [ip, #20]
   153c8:	cmp	lr, #0
   153cc:	str	lr, [sp, #36]	; 0x24
   153d0:	beq	15444 <_obstack_memory_used@@Base+0x257c>
   153d4:	ldr	lr, [ip, #24]
   153d8:	cmp	lr, #0
   153dc:	str	lr, [sp, #40]	; 0x28
   153e0:	beq	1544c <_obstack_memory_used@@Base+0x2584>
   153e4:	ldr	lr, [ip, #28]
   153e8:	cmp	lr, #0
   153ec:	str	lr, [sp, #44]	; 0x2c
   153f0:	beq	15454 <_obstack_memory_used@@Base+0x258c>
   153f4:	ldr	lr, [ip, #32]
   153f8:	cmp	lr, #0
   153fc:	str	lr, [sp, #48]	; 0x30
   15400:	beq	1545c <_obstack_memory_used@@Base+0x2594>
   15404:	ldr	lr, [ip, #36]	; 0x24
   15408:	mov	ip, #10
   1540c:	cmp	lr, #0
   15410:	str	lr, [sp, #52]	; 0x34
   15414:	movweq	ip, #9
   15418:	b	15460 <_obstack_memory_used@@Base+0x2598>
   1541c:	mov	ip, #0
   15420:	b	15460 <_obstack_memory_used@@Base+0x2598>
   15424:	mov	ip, #1
   15428:	b	15460 <_obstack_memory_used@@Base+0x2598>
   1542c:	mov	ip, #2
   15430:	b	15460 <_obstack_memory_used@@Base+0x2598>
   15434:	mov	ip, #3
   15438:	b	15460 <_obstack_memory_used@@Base+0x2598>
   1543c:	mov	ip, #4
   15440:	b	15460 <_obstack_memory_used@@Base+0x2598>
   15444:	mov	ip, #5
   15448:	b	15460 <_obstack_memory_used@@Base+0x2598>
   1544c:	mov	ip, #6
   15450:	b	15460 <_obstack_memory_used@@Base+0x2598>
   15454:	mov	ip, #7
   15458:	b	15460 <_obstack_memory_used@@Base+0x2598>
   1545c:	mov	ip, #8
   15460:	add	lr, sp, #16
   15464:	str	ip, [sp, #4]
   15468:	str	lr, [sp]
   1546c:	bl	14ed4 <_obstack_memory_used@@Base+0x200c>
   15470:	mov	sp, fp
   15474:	pop	{fp, pc}
   15478:	push	{fp, lr}
   1547c:	mov	fp, sp
   15480:	movw	r0, #33100	; 0x814c
   15484:	movt	r0, #2
   15488:	ldr	r1, [r0]
   1548c:	movw	r0, #25650	; 0x6432
   15490:	movt	r0, #1
   15494:	bl	10ebc <fputs_unlocked@plt>
   15498:	movw	r1, #31695	; 0x7bcf
   1549c:	mov	r0, #0
   154a0:	mov	r2, #5
   154a4:	movt	r1, #1
   154a8:	bl	10f34 <dcgettext@plt>
   154ac:	movw	r2, #31715	; 0x7be3
   154b0:	mov	r1, r0
   154b4:	mov	r0, #1
   154b8:	movt	r2, #1
   154bc:	bl	11078 <__printf_chk@plt>
   154c0:	movw	r1, #31737	; 0x7bf9
   154c4:	mov	r0, #0
   154c8:	mov	r2, #5
   154cc:	movt	r1, #1
   154d0:	bl	10f34 <dcgettext@plt>
   154d4:	movw	r2, #25018	; 0x61ba
   154d8:	movw	r3, #25459	; 0x6373
   154dc:	mov	r1, r0
   154e0:	mov	r0, #1
   154e4:	movt	r2, #1
   154e8:	movt	r3, #1
   154ec:	bl	11078 <__printf_chk@plt>
   154f0:	movw	r1, #31757	; 0x7c0d
   154f4:	mov	r0, #0
   154f8:	mov	r2, #5
   154fc:	movt	r1, #1
   15500:	bl	10f34 <dcgettext@plt>
   15504:	movw	r2, #31796	; 0x7c34
   15508:	mov	r1, r0
   1550c:	mov	r0, #1
   15510:	movt	r2, #1
   15514:	pop	{fp, lr}
   15518:	b	11078 <__printf_chk@plt>
   1551c:	push	{r4, r5, r6, sl, fp, lr}
   15520:	add	fp, sp, #16
   15524:	mov	r4, r2
   15528:	mov	r5, r1
   1552c:	mov	r6, r0
   15530:	bl	15d2c <_obstack_memory_used@@Base+0x2e64>
   15534:	cmp	r0, #0
   15538:	popne	{r4, r5, r6, sl, fp, pc}
   1553c:	cmp	r6, #0
   15540:	beq	15554 <_obstack_memory_used@@Base+0x268c>
   15544:	cmp	r5, #0
   15548:	cmpne	r4, #0
   1554c:	bne	15554 <_obstack_memory_used@@Base+0x268c>
   15550:	pop	{r4, r5, r6, sl, fp, pc}
   15554:	bl	15af4 <_obstack_memory_used@@Base+0x2c2c>
   15558:	push	{r4, r5, r6, sl, fp, lr}
   1555c:	add	fp, sp, #16
   15560:	mov	r4, r2
   15564:	mov	r5, r1
   15568:	mov	r6, r0
   1556c:	bl	15d2c <_obstack_memory_used@@Base+0x2e64>
   15570:	cmp	r0, #0
   15574:	popne	{r4, r5, r6, sl, fp, pc}
   15578:	cmp	r6, #0
   1557c:	beq	15590 <_obstack_memory_used@@Base+0x26c8>
   15580:	cmp	r5, #0
   15584:	cmpne	r4, #0
   15588:	bne	15590 <_obstack_memory_used@@Base+0x26c8>
   1558c:	pop	{r4, r5, r6, sl, fp, pc}
   15590:	bl	15af4 <_obstack_memory_used@@Base+0x2c2c>
   15594:	push	{fp, lr}
   15598:	mov	fp, sp
   1559c:	bl	15b8c <_obstack_memory_used@@Base+0x2cc4>
   155a0:	cmp	r0, #0
   155a4:	popne	{fp, pc}
   155a8:	bl	15af4 <_obstack_memory_used@@Base+0x2c2c>
   155ac:	push	{fp, lr}
   155b0:	mov	fp, sp
   155b4:	bl	15b8c <_obstack_memory_used@@Base+0x2cc4>
   155b8:	cmp	r0, #0
   155bc:	popne	{fp, pc}
   155c0:	bl	15af4 <_obstack_memory_used@@Base+0x2c2c>
   155c4:	push	{fp, lr}
   155c8:	mov	fp, sp
   155cc:	bl	15b8c <_obstack_memory_used@@Base+0x2cc4>
   155d0:	cmp	r0, #0
   155d4:	popne	{fp, pc}
   155d8:	bl	15af4 <_obstack_memory_used@@Base+0x2c2c>
   155dc:	push	{r4, r5, fp, lr}
   155e0:	add	fp, sp, #8
   155e4:	mov	r4, r1
   155e8:	mov	r5, r0
   155ec:	bl	15bbc <_obstack_memory_used@@Base+0x2cf4>
   155f0:	cmp	r0, #0
   155f4:	popne	{r4, r5, fp, pc}
   155f8:	cmp	r5, #0
   155fc:	beq	1560c <_obstack_memory_used@@Base+0x2744>
   15600:	cmp	r4, #0
   15604:	bne	1560c <_obstack_memory_used@@Base+0x2744>
   15608:	pop	{r4, r5, fp, pc}
   1560c:	bl	15af4 <_obstack_memory_used@@Base+0x2c2c>
   15610:	push	{fp, lr}
   15614:	mov	fp, sp
   15618:	cmp	r1, #0
   1561c:	orreq	r1, r1, #1
   15620:	bl	15bbc <_obstack_memory_used@@Base+0x2cf4>
   15624:	cmp	r0, #0
   15628:	popne	{fp, pc}
   1562c:	bl	15af4 <_obstack_memory_used@@Base+0x2c2c>
   15630:	push	{fp, lr}
   15634:	mov	fp, sp
   15638:	clz	r3, r2
   1563c:	lsr	ip, r3, #5
   15640:	clz	r3, r1
   15644:	lsr	r3, r3, #5
   15648:	orrs	r3, r3, ip
   1564c:	movwne	r1, #1
   15650:	movwne	r2, #1
   15654:	bl	15d2c <_obstack_memory_used@@Base+0x2e64>
   15658:	cmp	r0, #0
   1565c:	popne	{fp, pc}
   15660:	bl	15af4 <_obstack_memory_used@@Base+0x2c2c>
   15664:	push	{fp, lr}
   15668:	mov	fp, sp
   1566c:	mov	r2, r1
   15670:	mov	r1, r0
   15674:	mov	r0, #0
   15678:	bl	15d2c <_obstack_memory_used@@Base+0x2e64>
   1567c:	cmp	r0, #0
   15680:	popne	{fp, pc}
   15684:	bl	15af4 <_obstack_memory_used@@Base+0x2c2c>
   15688:	push	{fp, lr}
   1568c:	mov	fp, sp
   15690:	mov	r2, r1
   15694:	mov	r1, r0
   15698:	clz	r0, r2
   1569c:	clz	r3, r1
   156a0:	lsr	r0, r0, #5
   156a4:	lsr	r3, r3, #5
   156a8:	orrs	r0, r3, r0
   156ac:	movwne	r1, #1
   156b0:	movwne	r2, #1
   156b4:	mov	r0, #0
   156b8:	bl	15d2c <_obstack_memory_used@@Base+0x2e64>
   156bc:	cmp	r0, #0
   156c0:	popne	{fp, pc}
   156c4:	bl	15af4 <_obstack_memory_used@@Base+0x2c2c>
   156c8:	push	{r4, r5, r6, sl, fp, lr}
   156cc:	add	fp, sp, #16
   156d0:	ldr	r5, [r1]
   156d4:	mov	r4, r1
   156d8:	mov	r6, r0
   156dc:	cmp	r0, #0
   156e0:	beq	156f8 <_obstack_memory_used@@Base+0x2830>
   156e4:	mov	r0, #1
   156e8:	add	r0, r0, r5, lsr #1
   156ec:	adds	r5, r5, r0
   156f0:	bcc	15700 <_obstack_memory_used@@Base+0x2838>
   156f4:	b	1573c <_obstack_memory_used@@Base+0x2874>
   156f8:	cmp	r5, #0
   156fc:	movweq	r5, #64	; 0x40
   15700:	mov	r0, r6
   15704:	mov	r1, r5
   15708:	mov	r2, #1
   1570c:	bl	15d2c <_obstack_memory_used@@Base+0x2e64>
   15710:	cmp	r5, #0
   15714:	mov	r1, r5
   15718:	movwne	r1, #1
   1571c:	cmp	r0, #0
   15720:	bne	15734 <_obstack_memory_used@@Base+0x286c>
   15724:	clz	r2, r6
   15728:	lsr	r2, r2, #5
   1572c:	orrs	r1, r2, r1
   15730:	bne	1573c <_obstack_memory_used@@Base+0x2874>
   15734:	str	r5, [r4]
   15738:	pop	{r4, r5, r6, sl, fp, pc}
   1573c:	bl	15af4 <_obstack_memory_used@@Base+0x2c2c>
   15740:	push	{r4, r5, r6, r7, fp, lr}
   15744:	add	fp, sp, #16
   15748:	ldr	r5, [r1]
   1574c:	mov	r6, r2
   15750:	mov	r4, r1
   15754:	mov	r7, r0
   15758:	cmp	r0, #0
   1575c:	beq	15774 <_obstack_memory_used@@Base+0x28ac>
   15760:	mov	r0, #1
   15764:	add	r0, r0, r5, lsr #1
   15768:	adds	r5, r5, r0
   1576c:	bcc	1578c <_obstack_memory_used@@Base+0x28c4>
   15770:	b	157c0 <_obstack_memory_used@@Base+0x28f8>
   15774:	cmp	r5, #0
   15778:	bne	1578c <_obstack_memory_used@@Base+0x28c4>
   1577c:	mov	r0, #64	; 0x40
   15780:	cmp	r6, #64	; 0x40
   15784:	udiv	r5, r0, r6
   15788:	addhi	r5, r5, #1
   1578c:	mov	r0, r7
   15790:	mov	r1, r5
   15794:	mov	r2, r6
   15798:	bl	15d2c <_obstack_memory_used@@Base+0x2e64>
   1579c:	cmp	r0, #0
   157a0:	bne	157b8 <_obstack_memory_used@@Base+0x28f0>
   157a4:	cmp	r7, #0
   157a8:	beq	157c0 <_obstack_memory_used@@Base+0x28f8>
   157ac:	cmp	r6, #0
   157b0:	cmpne	r5, #0
   157b4:	bne	157c0 <_obstack_memory_used@@Base+0x28f8>
   157b8:	str	r5, [r4]
   157bc:	pop	{r4, r5, r6, r7, fp, pc}
   157c0:	bl	15af4 <_obstack_memory_used@@Base+0x2c2c>
   157c4:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   157c8:	add	fp, sp, #24
   157cc:	mov	r8, r1
   157d0:	ldr	r1, [r1]
   157d4:	mov	r5, r0
   157d8:	add	r0, r1, r1, asr #1
   157dc:	cmp	r0, r1
   157e0:	mvnvs	r0, #-2147483648	; 0x80000000
   157e4:	cmp	r0, r3
   157e8:	mov	r7, r0
   157ec:	movgt	r7, r3
   157f0:	cmn	r3, #1
   157f4:	movle	r7, r0
   157f8:	ldr	r0, [fp, #8]
   157fc:	cmn	r0, #1
   15800:	ble	15828 <_obstack_memory_used@@Base+0x2960>
   15804:	cmp	r0, #0
   15808:	beq	1587c <_obstack_memory_used@@Base+0x29b4>
   1580c:	cmn	r7, #1
   15810:	ble	15850 <_obstack_memory_used@@Base+0x2988>
   15814:	mvn	r4, #-2147483648	; 0x80000000
   15818:	udiv	r6, r4, r0
   1581c:	cmp	r6, r7
   15820:	bge	1587c <_obstack_memory_used@@Base+0x29b4>
   15824:	b	1588c <_obstack_memory_used@@Base+0x29c4>
   15828:	cmn	r7, #1
   1582c:	ble	1586c <_obstack_memory_used@@Base+0x29a4>
   15830:	cmn	r0, #1
   15834:	beq	1587c <_obstack_memory_used@@Base+0x29b4>
   15838:	mov	r6, #-2147483648	; 0x80000000
   1583c:	mvn	r4, #-2147483648	; 0x80000000
   15840:	sdiv	r6, r6, r0
   15844:	cmp	r6, r7
   15848:	bge	1587c <_obstack_memory_used@@Base+0x29b4>
   1584c:	b	1588c <_obstack_memory_used@@Base+0x29c4>
   15850:	beq	1587c <_obstack_memory_used@@Base+0x29b4>
   15854:	mov	r6, #-2147483648	; 0x80000000
   15858:	mvn	r4, #-2147483648	; 0x80000000
   1585c:	sdiv	r6, r6, r7
   15860:	cmp	r6, r0
   15864:	bge	1587c <_obstack_memory_used@@Base+0x29b4>
   15868:	b	1588c <_obstack_memory_used@@Base+0x29c4>
   1586c:	mvn	r4, #-2147483648	; 0x80000000
   15870:	sdiv	r6, r4, r0
   15874:	cmp	r7, r6
   15878:	blt	1588c <_obstack_memory_used@@Base+0x29c4>
   1587c:	mul	r6, r7, r0
   15880:	mov	r4, #64	; 0x40
   15884:	cmp	r6, #63	; 0x3f
   15888:	bgt	15894 <_obstack_memory_used@@Base+0x29cc>
   1588c:	sdiv	r7, r4, r0
   15890:	mul	r6, r7, r0
   15894:	cmp	r5, #0
   15898:	moveq	r4, #0
   1589c:	streq	r4, [r8]
   158a0:	sub	r4, r7, r1
   158a4:	cmp	r4, r2
   158a8:	bge	15954 <_obstack_memory_used@@Base+0x2a8c>
   158ac:	add	r7, r1, r2
   158b0:	mov	r6, #0
   158b4:	mov	r2, #0
   158b8:	cmp	r7, r3
   158bc:	movwgt	r6, #1
   158c0:	cmn	r3, #1
   158c4:	movwgt	r2, #1
   158c8:	cmp	r7, r1
   158cc:	bvs	15988 <_obstack_memory_used@@Base+0x2ac0>
   158d0:	ands	r1, r2, r6
   158d4:	bne	15988 <_obstack_memory_used@@Base+0x2ac0>
   158d8:	cmn	r0, #1
   158dc:	ble	15904 <_obstack_memory_used@@Base+0x2a3c>
   158e0:	cmp	r0, #0
   158e4:	beq	15950 <_obstack_memory_used@@Base+0x2a88>
   158e8:	cmn	r7, #1
   158ec:	ble	15928 <_obstack_memory_used@@Base+0x2a60>
   158f0:	mvn	r1, #-2147483648	; 0x80000000
   158f4:	udiv	r1, r1, r0
   158f8:	cmp	r1, r7
   158fc:	bge	15950 <_obstack_memory_used@@Base+0x2a88>
   15900:	b	15988 <_obstack_memory_used@@Base+0x2ac0>
   15904:	cmn	r7, #1
   15908:	ble	15940 <_obstack_memory_used@@Base+0x2a78>
   1590c:	cmn	r0, #1
   15910:	beq	15950 <_obstack_memory_used@@Base+0x2a88>
   15914:	mov	r1, #-2147483648	; 0x80000000
   15918:	sdiv	r1, r1, r0
   1591c:	cmp	r1, r7
   15920:	bge	15950 <_obstack_memory_used@@Base+0x2a88>
   15924:	b	15988 <_obstack_memory_used@@Base+0x2ac0>
   15928:	beq	15950 <_obstack_memory_used@@Base+0x2a88>
   1592c:	mov	r1, #-2147483648	; 0x80000000
   15930:	sdiv	r1, r1, r7
   15934:	cmp	r1, r0
   15938:	bge	15950 <_obstack_memory_used@@Base+0x2a88>
   1593c:	b	15988 <_obstack_memory_used@@Base+0x2ac0>
   15940:	mvn	r1, #-2147483648	; 0x80000000
   15944:	sdiv	r1, r1, r0
   15948:	cmp	r7, r1
   1594c:	blt	15988 <_obstack_memory_used@@Base+0x2ac0>
   15950:	mul	r6, r7, r0
   15954:	mov	r0, r5
   15958:	mov	r1, r6
   1595c:	bl	15bbc <_obstack_memory_used@@Base+0x2cf4>
   15960:	cmp	r6, #0
   15964:	movwne	r6, #1
   15968:	cmp	r0, #0
   1596c:	bne	15980 <_obstack_memory_used@@Base+0x2ab8>
   15970:	clz	r1, r5
   15974:	lsr	r1, r1, #5
   15978:	orrs	r1, r1, r6
   1597c:	bne	15988 <_obstack_memory_used@@Base+0x2ac0>
   15980:	str	r7, [r8]
   15984:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   15988:	bl	15af4 <_obstack_memory_used@@Base+0x2c2c>
   1598c:	push	{fp, lr}
   15990:	mov	fp, sp
   15994:	mov	r1, #1
   15998:	bl	15b38 <_obstack_memory_used@@Base+0x2c70>
   1599c:	cmp	r0, #0
   159a0:	popne	{fp, pc}
   159a4:	bl	15af4 <_obstack_memory_used@@Base+0x2c2c>
   159a8:	push	{fp, lr}
   159ac:	mov	fp, sp
   159b0:	bl	15b38 <_obstack_memory_used@@Base+0x2c70>
   159b4:	cmp	r0, #0
   159b8:	popne	{fp, pc}
   159bc:	bl	15af4 <_obstack_memory_used@@Base+0x2c2c>
   159c0:	push	{fp, lr}
   159c4:	mov	fp, sp
   159c8:	mov	r1, #1
   159cc:	bl	15b38 <_obstack_memory_used@@Base+0x2c70>
   159d0:	cmp	r0, #0
   159d4:	popne	{fp, pc}
   159d8:	bl	15af4 <_obstack_memory_used@@Base+0x2c2c>
   159dc:	push	{fp, lr}
   159e0:	mov	fp, sp
   159e4:	bl	15b38 <_obstack_memory_used@@Base+0x2c70>
   159e8:	cmp	r0, #0
   159ec:	popne	{fp, pc}
   159f0:	bl	15af4 <_obstack_memory_used@@Base+0x2c2c>
   159f4:	push	{r4, r5, r6, sl, fp, lr}
   159f8:	add	fp, sp, #16
   159fc:	mov	r5, r0
   15a00:	mov	r0, r1
   15a04:	mov	r4, r1
   15a08:	bl	15b8c <_obstack_memory_used@@Base+0x2cc4>
   15a0c:	cmp	r0, #0
   15a10:	beq	15a2c <_obstack_memory_used@@Base+0x2b64>
   15a14:	mov	r1, r5
   15a18:	mov	r2, r4
   15a1c:	mov	r6, r0
   15a20:	bl	10f04 <memcpy@plt>
   15a24:	mov	r0, r6
   15a28:	pop	{r4, r5, r6, sl, fp, pc}
   15a2c:	bl	15af4 <_obstack_memory_used@@Base+0x2c2c>
   15a30:	push	{r4, r5, r6, sl, fp, lr}
   15a34:	add	fp, sp, #16
   15a38:	mov	r5, r0
   15a3c:	mov	r0, r1
   15a40:	mov	r4, r1
   15a44:	bl	15b8c <_obstack_memory_used@@Base+0x2cc4>
   15a48:	cmp	r0, #0
   15a4c:	beq	15a68 <_obstack_memory_used@@Base+0x2ba0>
   15a50:	mov	r1, r5
   15a54:	mov	r2, r4
   15a58:	mov	r6, r0
   15a5c:	bl	10f04 <memcpy@plt>
   15a60:	mov	r0, r6
   15a64:	pop	{r4, r5, r6, sl, fp, pc}
   15a68:	bl	15af4 <_obstack_memory_used@@Base+0x2c2c>
   15a6c:	push	{r4, r5, r6, sl, fp, lr}
   15a70:	add	fp, sp, #16
   15a74:	mov	r5, r0
   15a78:	add	r0, r1, #1
   15a7c:	mov	r4, r1
   15a80:	bl	15b8c <_obstack_memory_used@@Base+0x2cc4>
   15a84:	cmp	r0, #0
   15a88:	beq	15ab0 <_obstack_memory_used@@Base+0x2be8>
   15a8c:	mov	r6, r0
   15a90:	mov	r0, #0
   15a94:	mov	r1, r5
   15a98:	mov	r2, r4
   15a9c:	strb	r0, [r6, r4]
   15aa0:	mov	r0, r6
   15aa4:	bl	10f04 <memcpy@plt>
   15aa8:	mov	r0, r6
   15aac:	pop	{r4, r5, r6, sl, fp, pc}
   15ab0:	bl	15af4 <_obstack_memory_used@@Base+0x2c2c>
   15ab4:	push	{r4, r5, r6, sl, fp, lr}
   15ab8:	add	fp, sp, #16
   15abc:	mov	r4, r0
   15ac0:	bl	11048 <strlen@plt>
   15ac4:	add	r5, r0, #1
   15ac8:	mov	r0, r5
   15acc:	bl	15b8c <_obstack_memory_used@@Base+0x2cc4>
   15ad0:	cmp	r0, #0
   15ad4:	beq	15af0 <_obstack_memory_used@@Base+0x2c28>
   15ad8:	mov	r1, r4
   15adc:	mov	r2, r5
   15ae0:	mov	r6, r0
   15ae4:	bl	10f04 <memcpy@plt>
   15ae8:	mov	r0, r6
   15aec:	pop	{r4, r5, r6, sl, fp, pc}
   15af0:	bl	15af4 <_obstack_memory_used@@Base+0x2c2c>
   15af4:	push	{fp, lr}
   15af8:	mov	fp, sp
   15afc:	movw	r0, #32996	; 0x80e4
   15b00:	movw	r1, #30828	; 0x786c
   15b04:	mov	r2, #5
   15b08:	movt	r0, #2
   15b0c:	movt	r1, #1
   15b10:	ldr	r4, [r0]
   15b14:	mov	r0, #0
   15b18:	bl	10f34 <dcgettext@plt>
   15b1c:	movw	r2, #30815	; 0x785f
   15b20:	mov	r3, r0
   15b24:	mov	r0, r4
   15b28:	mov	r1, #0
   15b2c:	movt	r2, #1
   15b30:	bl	10fac <error@plt>
   15b34:	bl	110f0 <abort@plt>
   15b38:	clz	r2, r1
   15b3c:	clz	r3, r0
   15b40:	lsr	r2, r2, #5
   15b44:	lsr	r3, r3, #5
   15b48:	orrs	r2, r3, r2
   15b4c:	movwne	r1, #1
   15b50:	movwne	r0, #1
   15b54:	cmp	r1, #0
   15b58:	beq	15b88 <_obstack_memory_used@@Base+0x2cc0>
   15b5c:	mvn	r2, #-2147483648	; 0x80000000
   15b60:	udiv	r2, r2, r1
   15b64:	cmp	r2, r0
   15b68:	bcs	15b88 <_obstack_memory_used@@Base+0x2cc0>
   15b6c:	push	{fp, lr}
   15b70:	mov	fp, sp
   15b74:	bl	11054 <__errno_location@plt>
   15b78:	mov	r1, #12
   15b7c:	str	r1, [r0]
   15b80:	mov	r0, #0
   15b84:	pop	{fp, pc}
   15b88:	b	10eb0 <calloc@plt>
   15b8c:	cmp	r0, #0
   15b90:	movweq	r0, #1
   15b94:	cmn	r0, #1
   15b98:	ble	15ba0 <_obstack_memory_used@@Base+0x2cd8>
   15b9c:	b	10fe8 <malloc@plt>
   15ba0:	push	{fp, lr}
   15ba4:	mov	fp, sp
   15ba8:	bl	11054 <__errno_location@plt>
   15bac:	mov	r1, #12
   15bb0:	str	r1, [r0]
   15bb4:	mov	r0, #0
   15bb8:	pop	{fp, pc}
   15bbc:	push	{fp, lr}
   15bc0:	mov	fp, sp
   15bc4:	cmp	r0, #0
   15bc8:	beq	15be4 <_obstack_memory_used@@Base+0x2d1c>
   15bcc:	cmp	r1, #0
   15bd0:	beq	15bf0 <_obstack_memory_used@@Base+0x2d28>
   15bd4:	cmn	r1, #1
   15bd8:	ble	15bfc <_obstack_memory_used@@Base+0x2d34>
   15bdc:	pop	{fp, lr}
   15be0:	b	10f4c <realloc@plt>
   15be4:	mov	r0, r1
   15be8:	pop	{fp, lr}
   15bec:	b	15b8c <_obstack_memory_used@@Base+0x2cc4>
   15bf0:	bl	12800 <close@plt+0x1704>
   15bf4:	mov	r0, #0
   15bf8:	pop	{fp, pc}
   15bfc:	bl	11054 <__errno_location@plt>
   15c00:	mov	r1, #12
   15c04:	str	r1, [r0]
   15c08:	mov	r0, #0
   15c0c:	pop	{fp, pc}
   15c10:	push	{r4, r5, r6, sl, fp, lr}
   15c14:	add	fp, sp, #16
   15c18:	mov	r4, r0
   15c1c:	bl	10f94 <__fpending@plt>
   15c20:	ldr	r6, [r4]
   15c24:	mov	r5, r0
   15c28:	mov	r0, r4
   15c2c:	bl	126fc <close@plt+0x1600>
   15c30:	tst	r6, #32
   15c34:	bne	15c6c <_obstack_memory_used@@Base+0x2da4>
   15c38:	cmp	r0, #0
   15c3c:	mov	r4, r0
   15c40:	mvnne	r4, #0
   15c44:	cmp	r5, #0
   15c48:	bne	15c78 <_obstack_memory_used@@Base+0x2db0>
   15c4c:	cmp	r0, #0
   15c50:	beq	15c78 <_obstack_memory_used@@Base+0x2db0>
   15c54:	bl	11054 <__errno_location@plt>
   15c58:	ldr	r0, [r0]
   15c5c:	subs	r4, r0, #9
   15c60:	mvnne	r4, #0
   15c64:	mov	r0, r4
   15c68:	pop	{r4, r5, r6, sl, fp, pc}
   15c6c:	mvn	r4, #0
   15c70:	cmp	r0, #0
   15c74:	beq	15c80 <_obstack_memory_used@@Base+0x2db8>
   15c78:	mov	r0, r4
   15c7c:	pop	{r4, r5, r6, sl, fp, pc}
   15c80:	bl	11054 <__errno_location@plt>
   15c84:	mov	r1, #0
   15c88:	str	r1, [r0]
   15c8c:	mov	r0, r4
   15c90:	pop	{r4, r5, r6, sl, fp, pc}
   15c94:	push	{fp, lr}
   15c98:	mov	fp, sp
   15c9c:	mov	r0, #14
   15ca0:	bl	110cc <nl_langinfo@plt>
   15ca4:	movw	r1, #25651	; 0x6433
   15ca8:	cmp	r0, #0
   15cac:	movt	r1, #1
   15cb0:	movne	r1, r0
   15cb4:	movw	r0, #31872	; 0x7c80
   15cb8:	ldrb	r2, [r1]
   15cbc:	movt	r0, #1
   15cc0:	cmp	r2, #0
   15cc4:	movne	r0, r1
   15cc8:	pop	{fp, pc}
   15ccc:	push	{r4, r5, r6, r7, fp, lr}
   15cd0:	add	fp, sp, #16
   15cd4:	sub	sp, sp, #8
   15cd8:	add	r5, sp, #4
   15cdc:	cmp	r0, #0
   15ce0:	mov	r7, r2
   15ce4:	mov	r4, r1
   15ce8:	movne	r5, r0
   15cec:	mov	r0, r5
   15cf0:	bl	10fa0 <mbrtowc@plt>
   15cf4:	mov	r6, r0
   15cf8:	cmp	r7, #0
   15cfc:	beq	15d20 <_obstack_memory_used@@Base+0x2e58>
   15d00:	cmn	r6, #2
   15d04:	bcc	15d20 <_obstack_memory_used@@Base+0x2e58>
   15d08:	mov	r0, #0
   15d0c:	bl	15d68 <_obstack_memory_used@@Base+0x2ea0>
   15d10:	cmp	r0, #0
   15d14:	ldrbeq	r0, [r4]
   15d18:	moveq	r6, #1
   15d1c:	streq	r0, [r5]
   15d20:	mov	r0, r6
   15d24:	sub	sp, fp, #16
   15d28:	pop	{r4, r5, r6, r7, fp, pc}
   15d2c:	cmp	r2, #0
   15d30:	beq	15d60 <_obstack_memory_used@@Base+0x2e98>
   15d34:	mvn	r3, #0
   15d38:	udiv	r3, r3, r2
   15d3c:	cmp	r3, r1
   15d40:	bcs	15d60 <_obstack_memory_used@@Base+0x2e98>
   15d44:	push	{fp, lr}
   15d48:	mov	fp, sp
   15d4c:	bl	11054 <__errno_location@plt>
   15d50:	mov	r1, #12
   15d54:	str	r1, [r0]
   15d58:	mov	r0, #0
   15d5c:	pop	{fp, pc}
   15d60:	mul	r1, r2, r1
   15d64:	b	15bbc <_obstack_memory_used@@Base+0x2cf4>
   15d68:	push	{r4, sl, fp, lr}
   15d6c:	add	fp, sp, #8
   15d70:	sub	sp, sp, #264	; 0x108
   15d74:	add	r1, sp, #7
   15d78:	movw	r2, #257	; 0x101
   15d7c:	bl	15dcc <_obstack_memory_used@@Base+0x2f04>
   15d80:	mov	r4, #0
   15d84:	cmp	r0, #0
   15d88:	bne	15dc0 <_obstack_memory_used@@Base+0x2ef8>
   15d8c:	movw	r1, #25928	; 0x6548
   15d90:	add	r0, sp, #7
   15d94:	movt	r1, #1
   15d98:	bl	10ed4 <strcmp@plt>
   15d9c:	cmp	r0, #0
   15da0:	beq	15dc0 <_obstack_memory_used@@Base+0x2ef8>
   15da4:	movw	r1, #31878	; 0x7c86
   15da8:	add	r0, sp, #7
   15dac:	movt	r1, #1
   15db0:	bl	10ed4 <strcmp@plt>
   15db4:	mov	r4, r0
   15db8:	cmp	r0, #0
   15dbc:	movwne	r4, #1
   15dc0:	mov	r0, r4
   15dc4:	sub	sp, fp, #8
   15dc8:	pop	{r4, sl, fp, pc}
   15dcc:	push	{r4, r5, r6, r7, fp, lr}
   15dd0:	add	fp, sp, #16
   15dd4:	mov	r4, r1
   15dd8:	mov	r1, #0
   15ddc:	mov	r6, r2
   15de0:	bl	110b4 <setlocale@plt>
   15de4:	cmp	r0, #0
   15de8:	beq	15e18 <_obstack_memory_used@@Base+0x2f50>
   15dec:	mov	r7, r0
   15df0:	bl	11048 <strlen@plt>
   15df4:	cmp	r0, r6
   15df8:	bcs	15e38 <_obstack_memory_used@@Base+0x2f70>
   15dfc:	add	r2, r0, #1
   15e00:	mov	r0, r4
   15e04:	mov	r1, r7
   15e08:	bl	10f04 <memcpy@plt>
   15e0c:	mov	r5, #0
   15e10:	mov	r0, r5
   15e14:	pop	{r4, r5, r6, r7, fp, pc}
   15e18:	cmp	r6, #0
   15e1c:	mov	r5, #22
   15e20:	movne	r0, #0
   15e24:	strbne	r0, [r4]
   15e28:	movne	r0, r5
   15e2c:	popne	{r4, r5, r6, r7, fp, pc}
   15e30:	mov	r0, r5
   15e34:	pop	{r4, r5, r6, r7, fp, pc}
   15e38:	mov	r5, #34	; 0x22
   15e3c:	cmp	r6, #0
   15e40:	beq	15e60 <_obstack_memory_used@@Base+0x2f98>
   15e44:	sub	r6, r6, #1
   15e48:	mov	r0, r4
   15e4c:	mov	r1, r7
   15e50:	mov	r2, r6
   15e54:	bl	10f04 <memcpy@plt>
   15e58:	mov	r0, #0
   15e5c:	strb	r0, [r4, r6]
   15e60:	mov	r0, r5
   15e64:	pop	{r4, r5, r6, r7, fp, pc}
   15e68:	mov	r1, #0
   15e6c:	b	110b4 <setlocale@plt>
   15e70:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   15e74:	mov	r7, r0
   15e78:	ldr	r6, [pc, #72]	; 15ec8 <_obstack_memory_used@@Base+0x3000>
   15e7c:	ldr	r5, [pc, #72]	; 15ecc <_obstack_memory_used@@Base+0x3004>
   15e80:	add	r6, pc, r6
   15e84:	add	r5, pc, r5
   15e88:	sub	r6, r6, r5
   15e8c:	mov	r8, r1
   15e90:	mov	r9, r2
   15e94:	bl	10e90 <calloc@plt-0x20>
   15e98:	asrs	r6, r6, #2
   15e9c:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   15ea0:	mov	r4, #0
   15ea4:	add	r4, r4, #1
   15ea8:	ldr	r3, [r5], #4
   15eac:	mov	r2, r9
   15eb0:	mov	r1, r8
   15eb4:	mov	r0, r7
   15eb8:	blx	r3
   15ebc:	cmp	r6, r4
   15ec0:	bne	15ea4 <_obstack_memory_used@@Base+0x2fdc>
   15ec4:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   15ec8:	andeq	r2, r1, r4, lsl #1
   15ecc:	andeq	r2, r1, ip, ror r0
   15ed0:	bx	lr
   15ed4:	ldr	r3, [pc, #12]	; 15ee8 <_obstack_memory_used@@Base+0x3020>
   15ed8:	mov	r1, #0
   15edc:	add	r3, pc, r3
   15ee0:	ldr	r2, [r3]
   15ee4:	b	11060 <__cxa_atexit@plt>
   15ee8:	strdeq	r2, [r1], -r8

Disassembly of section .fini:

00015eec <.fini>:
   15eec:	push	{r3, lr}
   15ef0:	pop	{r3, pc}
