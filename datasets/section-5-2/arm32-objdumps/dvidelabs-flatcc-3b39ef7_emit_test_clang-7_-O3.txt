
../repos/dvidelabs-flatcc-3b39ef7/test/emit_test/emit_test:     file format elf32-littlearm


Disassembly of section .init:

000123c8 <.init>:
   123c8:	push	{r3, lr}
   123cc:	bl	124fc <_start@@Base+0x3c>
   123d0:	pop	{r3, pc}

Disassembly of section .plt:

000123d4 <printf@plt-0x14>:
   123d4:	push	{lr}		; (str lr, [sp, #-4]!)
   123d8:	ldr	lr, [pc, #4]	; 123e4 <printf@plt-0x4>
   123dc:	add	lr, pc, lr
   123e0:	ldr	pc, [lr, #8]!
   123e4:	andeq	r7, r1, ip, lsl ip

000123e8 <printf@plt>:
   123e8:	add	ip, pc, #0, 12
   123ec:	add	ip, ip, #94208	; 0x17000
   123f0:	ldr	pc, [ip, #3100]!	; 0xc1c

000123f4 <free@plt>:
   123f4:	add	ip, pc, #0, 12
   123f8:	add	ip, ip, #94208	; 0x17000
   123fc:	ldr	pc, [ip, #3092]!	; 0xc14

00012400 <memcpy@plt>:
   12400:	add	ip, pc, #0, 12
   12404:	add	ip, ip, #94208	; 0x17000
   12408:	ldr	pc, [ip, #3084]!	; 0xc0c

0001240c <memcmp@plt>:
   1240c:	add	ip, pc, #0, 12
   12410:	add	ip, ip, #94208	; 0x17000
   12414:	ldr	pc, [ip, #3076]!	; 0xc04

00012418 <realloc@plt>:
   12418:	add	ip, pc, #0, 12
   1241c:	add	ip, ip, #94208	; 0x17000
   12420:	ldr	pc, [ip, #3068]!	; 0xbfc

00012424 <fwrite@plt>:
   12424:	add	ip, pc, #0, 12
   12428:	add	ip, ip, #94208	; 0x17000
   1242c:	ldr	pc, [ip, #3060]!	; 0xbf4

00012430 <puts@plt>:
   12430:	add	ip, pc, #0, 12
   12434:	add	ip, ip, #94208	; 0x17000
   12438:	ldr	pc, [ip, #3052]!	; 0xbec

0001243c <malloc@plt>:
   1243c:	add	ip, pc, #0, 12
   12440:	add	ip, ip, #94208	; 0x17000
   12444:	ldr	pc, [ip, #3044]!	; 0xbe4

00012448 <__libc_start_main@plt>:
   12448:	add	ip, pc, #0, 12
   1244c:	add	ip, ip, #94208	; 0x17000
   12450:	ldr	pc, [ip, #3036]!	; 0xbdc

00012454 <__gmon_start__@plt>:
   12454:	add	ip, pc, #0, 12
   12458:	add	ip, ip, #94208	; 0x17000
   1245c:	ldr	pc, [ip, #3028]!	; 0xbd4

00012460 <strlen@plt>:
   12460:	add	ip, pc, #0, 12
   12464:	add	ip, ip, #94208	; 0x17000
   12468:	ldr	pc, [ip, #3020]!	; 0xbcc

0001246c <fprintf@plt>:
   1246c:	add	ip, pc, #0, 12
   12470:	add	ip, ip, #94208	; 0x17000
   12474:	ldr	pc, [ip, #3012]!	; 0xbc4

00012478 <posix_memalign@plt>:
   12478:	add	ip, pc, #0, 12
   1247c:	add	ip, ip, #94208	; 0x17000
   12480:	ldr	pc, [ip, #3004]!	; 0xbbc

00012484 <memset@plt>:
   12484:	add	ip, pc, #0, 12
   12488:	add	ip, ip, #94208	; 0x17000
   1248c:	ldr	pc, [ip, #2996]!	; 0xbb4

00012490 <memchr@plt>:
   12490:	add	ip, pc, #0, 12
   12494:	add	ip, ip, #94208	; 0x17000
   12498:	ldr	pc, [ip, #2988]!	; 0xbac

0001249c <fputc@plt>:
   1249c:	add	ip, pc, #0, 12
   124a0:	add	ip, ip, #94208	; 0x17000
   124a4:	ldr	pc, [ip, #2980]!	; 0xba4

000124a8 <abort@plt>:
   124a8:	add	ip, pc, #0, 12
   124ac:	add	ip, ip, #94208	; 0x17000
   124b0:	ldr	pc, [ip, #2972]!	; 0xb9c

000124b4 <__assert_fail@plt>:
   124b4:	add	ip, pc, #0, 12
   124b8:	add	ip, ip, #94208	; 0x17000
   124bc:	ldr	pc, [ip, #2964]!	; 0xb94

Disassembly of section .text:

000124c0 <_start@@Base>:
   124c0:	mov	fp, #0
   124c4:	mov	lr, #0
   124c8:	pop	{r1}		; (ldr r1, [sp], #4)
   124cc:	mov	r2, sp
   124d0:	push	{r2}		; (str r2, [sp, #-4]!)
   124d4:	push	{r0}		; (str r0, [sp, #-4]!)
   124d8:	ldr	ip, [pc, #16]	; 124f0 <_start@@Base+0x30>
   124dc:	push	{ip}		; (str ip, [sp, #-4]!)
   124e0:	ldr	r0, [pc, #12]	; 124f4 <_start@@Base+0x34>
   124e4:	ldr	r3, [pc, #12]	; 124f8 <_start@@Base+0x38>
   124e8:	bl	12448 <__libc_start_main@plt>
   124ec:	bl	124a8 <abort@plt>
   124f0:	andeq	r7, r1, r4, lsl #31
   124f4:	andeq	r2, r1, r0, lsr #23
   124f8:	andeq	r7, r1, r4, lsr #30
   124fc:	ldr	r3, [pc, #20]	; 12518 <_start@@Base+0x58>
   12500:	ldr	r2, [pc, #20]	; 1251c <_start@@Base+0x5c>
   12504:	add	r3, pc, r3
   12508:	ldr	r2, [r3, r2]
   1250c:	cmp	r2, #0
   12510:	bxeq	lr
   12514:	b	12454 <__gmon_start__@plt>
   12518:	strdeq	r7, [r1], -r4
   1251c:	andeq	r0, r0, r4, asr r0
   12520:	ldr	r0, [pc, #24]	; 12540 <_start@@Base+0x80>
   12524:	ldr	r3, [pc, #24]	; 12544 <_start@@Base+0x84>
   12528:	cmp	r3, r0
   1252c:	bxeq	lr
   12530:	ldr	r3, [pc, #16]	; 12548 <_start@@Base+0x88>
   12534:	cmp	r3, #0
   12538:	bxeq	lr
   1253c:	bx	r3
   12540:	andeq	sl, r2, r0, rrx
   12544:	andeq	sl, r2, r0, rrx
   12548:	andeq	r0, r0, r0
   1254c:	ldr	r0, [pc, #36]	; 12578 <_start@@Base+0xb8>
   12550:	ldr	r1, [pc, #36]	; 1257c <_start@@Base+0xbc>
   12554:	sub	r1, r1, r0
   12558:	asr	r1, r1, #2
   1255c:	add	r1, r1, r1, lsr #31
   12560:	asrs	r1, r1, #1
   12564:	bxeq	lr
   12568:	ldr	r3, [pc, #16]	; 12580 <_start@@Base+0xc0>
   1256c:	cmp	r3, #0
   12570:	bxeq	lr
   12574:	bx	r3
   12578:	andeq	sl, r2, r0, rrx
   1257c:	andeq	sl, r2, r0, rrx
   12580:	andeq	r0, r0, r0
   12584:	push	{r4, lr}
   12588:	ldr	r4, [pc, #24]	; 125a8 <_start@@Base+0xe8>
   1258c:	ldrb	r3, [r4]
   12590:	cmp	r3, #0
   12594:	popne	{r4, pc}
   12598:	bl	12520 <_start@@Base+0x60>
   1259c:	mov	r3, #1
   125a0:	strb	r3, [r4]
   125a4:	pop	{r4, pc}
   125a8:	andeq	sl, r2, r4, rrx
   125ac:	b	1254c <_start@@Base+0x8c>

000125b0 <dbg_emitter@@Base>:
   125b0:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   125b4:	add	fp, sp, #24
   125b8:	mov	r4, r3
   125bc:	ldr	r3, [fp, #8]
   125c0:	movw	r0, #32660	; 0x7f94
   125c4:	mov	r6, r1
   125c8:	mov	r5, r2
   125cc:	mov	r1, r2
   125d0:	movt	r0, #1
   125d4:	mov	r2, r4
   125d8:	bl	123e8 <printf@plt>
   125dc:	cmp	r5, #1
   125e0:	blt	12664 <dbg_emitter@@Base+0xb4>
   125e4:	movw	r7, #33360	; 0x8250
   125e8:	movw	r8, #32709	; 0x7fc5
   125ec:	movw	r9, #32742	; 0x7fe6
   125f0:	add	r6, r6, #4
   125f4:	movt	r7, #1
   125f8:	movt	r8, #1
   125fc:	movt	r9, #1
   12600:	ldr	r0, [r6, #-4]
   12604:	cmp	r0, r7
   12608:	beq	12628 <dbg_emitter@@Base+0x78>
   1260c:	cmp	r0, #0
   12610:	beq	12644 <dbg_emitter@@Base+0x94>
   12614:	ldr	r0, [r6], #8
   12618:	subs	r5, r5, #1
   1261c:	add	r4, r0, r4
   12620:	bne	12600 <dbg_emitter@@Base+0x50>
   12624:	b	12664 <dbg_emitter@@Base+0xb4>
   12628:	ldr	r2, [r6]
   1262c:	mov	r0, r8
   12630:	mov	r1, r4
   12634:	bl	123e8 <printf@plt>
   12638:	ldr	r0, [r6, #-4]
   1263c:	cmp	r0, #0
   12640:	bne	12614 <dbg_emitter@@Base+0x64>
   12644:	ldr	r2, [r6]
   12648:	mov	r0, r9
   1264c:	mov	r1, r4
   12650:	bl	123e8 <printf@plt>
   12654:	ldr	r0, [r6], #8
   12658:	subs	r5, r5, #1
   1265c:	add	r4, r0, r4
   12660:	bne	12600 <dbg_emitter@@Base+0x50>
   12664:	mov	r0, #0
   12668:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}

0001266c <debug_test@@Base>:
   1266c:	push	{r4, r5, r6, r7, fp, lr}
   12670:	add	fp, sp, #16
   12674:	sub	sp, sp, #280	; 0x118
   12678:	add	r4, sp, #8
   1267c:	vmov.i32	q8, #0	; 0x00000000
   12680:	mov	r5, #0
   12684:	add	r0, r4, #16
   12688:	mov	r1, r4
   1268c:	str	r5, [sp, #40]	; 0x28
   12690:	vst1.64	{d16-d17}, [r0]
   12694:	mov	r0, #36	; 0x24
   12698:	vst1.64	{d16-d17}, [r1], r0
   1269c:	movw	r0, #33264	; 0x81f0
   126a0:	movt	r0, #1
   126a4:	str	r5, [r1]
   126a8:	bl	12430 <puts@plt>
   126ac:	movw	r1, #9648	; 0x25b0
   126b0:	str	r5, [sp]
   126b4:	add	r5, sp, #48	; 0x30
   126b8:	mov	r2, #0
   126bc:	mov	r3, #0
   126c0:	movt	r1, #1
   126c4:	mov	r0, r5
   126c8:	bl	12d90 <flatcc_builder_custom_init@@Base>
   126cc:	mvn	r0, #-1073741824	; 0xc0000000
   126d0:	mov	r1, #4
   126d4:	mov	r2, #10
   126d8:	mov	r3, #4
   126dc:	str	r1, [sp]
   126e0:	str	r0, [sp, #4]
   126e4:	mov	r0, r5
   126e8:	mov	r1, r4
   126ec:	bl	15e80 <flatcc_builder_create_vector@@Base>
   126f0:	mov	r1, r0
   126f4:	mov	r0, r5
   126f8:	bl	12710 <debug_test@@Base+0xa4>
   126fc:	mov	r0, r5
   12700:	bl	133a4 <flatcc_builder_clear@@Base>
   12704:	mov	r0, #0
   12708:	sub	sp, fp, #16
   1270c:	pop	{r4, r5, r6, r7, fp, pc}
   12710:	push	{r4, r5, r6, r7, fp, lr}
   12714:	add	fp, sp, #16
   12718:	mov	r5, r1
   1271c:	mov	r1, #0
   12720:	mov	r2, #0
   12724:	mov	r3, #0
   12728:	mov	r4, r0
   1272c:	mov	r7, #0
   12730:	bl	13d18 <flatcc_builder_start_buffer@@Base>
   12734:	cmp	r0, #0
   12738:	popne	{r4, r5, r6, r7, fp, pc}
   1273c:	mov	r0, r4
   12740:	mov	r1, #3
   12744:	bl	15310 <flatcc_builder_start_table@@Base>
   12748:	cmp	r0, #0
   1274c:	beq	12760 <debug_test@@Base+0xf4>
   12750:	mov	r0, r4
   12754:	mov	r1, r7
   12758:	pop	{r4, r5, r6, r7, fp, lr}
   1275c:	b	13f08 <flatcc_builder_end_buffer@@Base>
   12760:	mov	r0, r4
   12764:	mov	r1, #0
   12768:	mov	r2, #8
   1276c:	mov	r3, #8
   12770:	mov	r7, #0
   12774:	bl	16680 <flatcc_builder_table_add@@Base>
   12778:	cmp	r0, #0
   1277c:	beq	12750 <debug_test@@Base+0xe4>
   12780:	mov	r7, #0
   12784:	mov	r6, #42	; 0x2a
   12788:	cmp	r5, #0
   1278c:	strd	r6, [r0]
   12790:	beq	12750 <debug_test@@Base+0xe4>
   12794:	mov	r0, r4
   12798:	mov	r1, #2
   1279c:	bl	164f0 <flatcc_builder_table_add_offset@@Base>
   127a0:	cmp	r0, #0
   127a4:	beq	12750 <debug_test@@Base+0xe4>
   127a8:	str	r5, [r0]
   127ac:	mov	r0, r4
   127b0:	mov	r1, #1
   127b4:	mov	r2, #1
   127b8:	mov	r3, #1
   127bc:	mov	r5, #1
   127c0:	bl	16680 <flatcc_builder_table_add@@Base>
   127c4:	cmp	r0, #0
   127c8:	beq	12750 <debug_test@@Base+0xe4>
   127cc:	movw	r1, #33242	; 0x81da
   127d0:	strb	r5, [r0]
   127d4:	mov	r0, r4
   127d8:	mov	r2, #0
   127dc:	movt	r1, #1
   127e0:	bl	15c30 <flatcc_builder_check_required@@Base>
   127e4:	cmp	r0, #0
   127e8:	beq	12808 <debug_test@@Base+0x19c>
   127ec:	mov	r0, r4
   127f0:	bl	15cc0 <flatcc_builder_end_table@@Base>
   127f4:	mov	r7, r0
   127f8:	mov	r0, r4
   127fc:	mov	r1, r7
   12800:	pop	{r4, r5, r6, r7, fp, lr}
   12804:	b	13f08 <flatcc_builder_end_buffer@@Base>
   12808:	movw	r0, #32906	; 0x808a
   1280c:	movw	r1, #33014	; 0x80f6
   12810:	movw	r3, #33107	; 0x8153
   12814:	mov	r2, #21
   12818:	movt	r0, #1
   1281c:	movt	r1, #1
   12820:	movt	r3, #1
   12824:	bl	124b4 <__assert_fail@plt>

00012828 <emit_test@@Base>:
   12828:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1282c:	add	fp, sp, #28
   12830:	sub	sp, sp, #284	; 0x11c
   12834:	movw	r0, #33248	; 0x81e0
   12838:	add	r6, sp, #28
   1283c:	add	r4, sp, #8
   12840:	movt	r0, #1
   12844:	vld1.64	{d16-d17}, [r0]
   12848:	mov	r0, r6
   1284c:	vst1.64	{d16-d17}, [r4]
   12850:	bl	12dfc <flatcc_builder_init@@Base>
   12854:	mov	r0, r6
   12858:	bl	1795c <flatcc_builder_get_emit_context@@Base>
   1285c:	mov	r5, r0
   12860:	mvn	r0, #-1073741824	; 0xc0000000
   12864:	mov	r1, #4
   12868:	mov	r2, #4
   1286c:	mov	r3, #4
   12870:	str	r1, [sp]
   12874:	str	r0, [sp, #4]
   12878:	mov	r0, r6
   1287c:	mov	r1, r4
   12880:	bl	15e80 <flatcc_builder_create_vector@@Base>
   12884:	mov	r1, r0
   12888:	mov	r0, r6
   1288c:	bl	12710 <debug_test@@Base+0xa4>
   12890:	ldm	r5, {r1, r2}
   12894:	mvn	r0, #0
   12898:	cmp	r1, r2
   1289c:	bne	12ab4 <emit_test@@Base+0x28c>
   128a0:	ldr	r4, [r5, #8]
   128a4:	cmp	r4, #0
   128a8:	beq	12ab4 <emit_test@@Base+0x28c>
   128ac:	ldr	r5, [r5, #24]
   128b0:	add	r0, sp, #28
   128b4:	bl	17624 <flatcc_builder_get_buffer_size@@Base>
   128b8:	cmp	r5, r0
   128bc:	bne	12b1c <emit_test@@Base+0x2f4>
   128c0:	movw	r6, #41056	; 0xa060
   128c4:	movw	r1, #32879	; 0x806f
   128c8:	mov	r2, r5
   128cc:	movt	r6, #2
   128d0:	movt	r1, #1
   128d4:	ldr	r0, [r6]
   128d8:	bl	1246c <fprintf@plt>
   128dc:	ldr	r6, [r6]
   128e0:	movw	r1, #33152	; 0x8180
   128e4:	movw	r2, #32896	; 0x8080
   128e8:	movt	r1, #1
   128ec:	movt	r2, #1
   128f0:	mov	r0, r6
   128f4:	bl	1246c <fprintf@plt>
   128f8:	cmp	r5, #0
   128fc:	beq	129d8 <emit_test@@Base+0x1b0>
   12900:	movw	sl, #33171	; 0x8193
   12904:	sub	r7, fp, #49	; 0x31
   12908:	mov	r8, #0
   1290c:	movt	sl, #1
   12910:	ands	r9, r8, #15
   12914:	bne	1294c <emit_test@@Base+0x124>
   12918:	cmp	r8, #0
   1291c:	beq	12934 <emit_test@@Base+0x10c>
   12920:	movw	r1, #33157	; 0x8185
   12924:	mov	r0, r6
   12928:	mov	r2, r7
   1292c:	movt	r1, #1
   12930:	bl	1246c <fprintf@plt>
   12934:	movw	r1, #33163	; 0x818b
   12938:	mov	r0, r6
   1293c:	mov	r2, r8
   12940:	movt	r1, #1
   12944:	bl	1246c <fprintf@plt>
   12948:	b	12960 <emit_test@@Base+0x138>
   1294c:	tst	r8, #7
   12950:	bne	12960 <emit_test@@Base+0x138>
   12954:	mov	r0, #32
   12958:	mov	r1, r6
   1295c:	bl	1249c <fputc@plt>
   12960:	ldrb	r2, [r4, r8]
   12964:	mov	r0, r6
   12968:	mov	r1, sl
   1296c:	bl	1246c <fprintf@plt>
   12970:	ldrb	r0, [r4, r8]
   12974:	add	r8, r8, #1
   12978:	sub	r1, r0, #32
   1297c:	uxtb	r1, r1
   12980:	cmp	r1, #94	; 0x5e
   12984:	mov	r1, #0
   12988:	movwhi	r0, #46	; 0x2e
   1298c:	cmp	r5, r8
   12990:	strb	r0, [r7, r9]
   12994:	add	r0, r7, r9
   12998:	strb	r1, [r0, #1]
   1299c:	bne	12910 <emit_test@@Base+0xe8>
   129a0:	tst	r5, #15
   129a4:	beq	129d8 <emit_test@@Base+0x1b0>
   129a8:	movw	r8, #33177	; 0x8199
   129ac:	add	r7, r5, #1
   129b0:	movt	r8, #1
   129b4:	mov	r0, r8
   129b8:	mov	r1, #3
   129bc:	mov	r2, #1
   129c0:	mov	r3, r6
   129c4:	bl	12424 <fwrite@plt>
   129c8:	add	r0, r7, #1
   129cc:	tst	r7, #15
   129d0:	mov	r7, r0
   129d4:	bne	129b4 <emit_test@@Base+0x18c>
   129d8:	movw	r1, #33157	; 0x8185
   129dc:	sub	r2, fp, #49	; 0x31
   129e0:	mov	r0, r6
   129e4:	movt	r1, #1
   129e8:	bl	1246c <fprintf@plt>
   129ec:	cmp	r5, #58	; 0x3a
   129f0:	bne	12b3c <emit_test@@Base+0x314>
   129f4:	movw	r1, #33182	; 0x819e
   129f8:	mov	r0, r4
   129fc:	mov	r2, #58	; 0x3a
   12a00:	movt	r1, #1
   12a04:	bl	1240c <memcmp@plt>
   12a08:	cmp	r0, #0
   12a0c:	bne	12b5c <emit_test@@Base+0x334>
   12a10:	ldr	r0, [r4]
   12a14:	ldr	r1, [r4, r0]!
   12a18:	mov	r0, r4
   12a1c:	ldrh	r1, [r0, -r1]!	; <UNPREDICTABLE>
   12a20:	cmp	r1, #6
   12a24:	bcc	12abc <emit_test@@Base+0x294>
   12a28:	ldrh	r2, [r0, #4]
   12a2c:	cmp	r2, #0
   12a30:	beq	12abc <emit_test@@Base+0x294>
   12a34:	mov	r3, r4
   12a38:	ldr	r2, [r3, r2]!
   12a3c:	ldr	r3, [r3, #4]
   12a40:	eor	r2, r2, #42	; 0x2a
   12a44:	orrs	r2, r2, r3
   12a48:	bne	12abc <emit_test@@Base+0x294>
   12a4c:	cmp	r1, #8
   12a50:	bcc	12adc <emit_test@@Base+0x2b4>
   12a54:	ldrh	r2, [r0, #6]
   12a58:	cmp	r2, #0
   12a5c:	beq	12adc <emit_test@@Base+0x2b4>
   12a60:	ldrb	r2, [r4, r2]
   12a64:	cmp	r2, #1
   12a68:	bne	12adc <emit_test@@Base+0x2b4>
   12a6c:	cmp	r1, #10
   12a70:	bcc	12afc <emit_test@@Base+0x2d4>
   12a74:	ldrh	r0, [r0, #8]
   12a78:	cmp	r0, #0
   12a7c:	beq	12afc <emit_test@@Base+0x2d4>
   12a80:	ldr	r0, [r4, r0]!
   12a84:	ldr	r0, [r4, r0]!
   12a88:	cmp	r0, #4
   12a8c:	bne	12afc <emit_test@@Base+0x2d4>
   12a90:	add	r0, r4, #4
   12a94:	vldr	s0, [pc, #256]	; 12b9c <emit_test@@Base+0x374>
   12a98:	vldr	s2, [r0, #8]
   12a9c:	vcmp.f32	s2, s0
   12aa0:	vmrs	APSR_nzcv, fpscr
   12aa4:	bne	12b7c <emit_test@@Base+0x354>
   12aa8:	add	r0, sp, #28
   12aac:	bl	133a4 <flatcc_builder_clear@@Base>
   12ab0:	mov	r0, #0
   12ab4:	sub	sp, fp, #28
   12ab8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12abc:	movw	r0, #38408	; 0x9608
   12ac0:	movw	r1, #32788	; 0x8014
   12ac4:	movw	r3, #32863	; 0x805f
   12ac8:	mov	r2, #112	; 0x70
   12acc:	movt	r0, #1
   12ad0:	movt	r1, #1
   12ad4:	movt	r3, #1
   12ad8:	bl	124b4 <__assert_fail@plt>
   12adc:	movw	r0, #38408	; 0x9608
   12ae0:	movw	r1, #32788	; 0x8014
   12ae4:	movw	r3, #32863	; 0x805f
   12ae8:	mov	r2, #113	; 0x71
   12aec:	movt	r0, #1
   12af0:	movt	r1, #1
   12af4:	movt	r3, #1
   12af8:	bl	124b4 <__assert_fail@plt>
   12afc:	movw	r0, #38408	; 0x9608
   12b00:	movw	r1, #32788	; 0x8014
   12b04:	movw	r3, #32863	; 0x805f
   12b08:	mov	r2, #114	; 0x72
   12b0c:	movt	r0, #1
   12b10:	movt	r1, #1
   12b14:	movt	r3, #1
   12b18:	bl	124b4 <__assert_fail@plt>
   12b1c:	movw	r0, #38408	; 0x9608
   12b20:	movw	r1, #32788	; 0x8014
   12b24:	movw	r3, #32863	; 0x805f
   12b28:	mov	r2, #101	; 0x65
   12b2c:	movt	r0, #1
   12b30:	movt	r1, #1
   12b34:	movt	r3, #1
   12b38:	bl	124b4 <__assert_fail@plt>
   12b3c:	movw	r0, #38408	; 0x9608
   12b40:	movw	r1, #32788	; 0x8014
   12b44:	movw	r3, #32863	; 0x805f
   12b48:	mov	r2, #106	; 0x6a
   12b4c:	movt	r0, #1
   12b50:	movt	r1, #1
   12b54:	movt	r3, #1
   12b58:	bl	124b4 <__assert_fail@plt>
   12b5c:	movw	r0, #38408	; 0x9608
   12b60:	movw	r1, #32788	; 0x8014
   12b64:	movw	r3, #32863	; 0x805f
   12b68:	mov	r2, #108	; 0x6c
   12b6c:	movt	r0, #1
   12b70:	movt	r1, #1
   12b74:	movt	r3, #1
   12b78:	bl	124b4 <__assert_fail@plt>
   12b7c:	movw	r0, #38408	; 0x9608
   12b80:	movw	r1, #32788	; 0x8014
   12b84:	movw	r3, #32863	; 0x805f
   12b88:	mov	r2, #115	; 0x73
   12b8c:	movt	r0, #1
   12b90:	movt	r1, #1
   12b94:	movt	r3, #1
   12b98:	bl	124b4 <__assert_fail@plt>
   12b9c:	svccc	0x0099999a

00012ba0 <main@@Base>:
   12ba0:	push	{r4, r5, r6, r7, fp, lr}
   12ba4:	add	fp, sp, #16
   12ba8:	sub	sp, sp, #280	; 0x118
   12bac:	add	r4, sp, #8
   12bb0:	vmov.i32	q8, #0	; 0x00000000
   12bb4:	mov	r5, #0
   12bb8:	add	r0, r4, #16
   12bbc:	mov	r1, r4
   12bc0:	str	r5, [sp, #40]	; 0x28
   12bc4:	vst1.64	{d16-d17}, [r0]
   12bc8:	mov	r0, #36	; 0x24
   12bcc:	vst1.64	{d16-d17}, [r1], r0
   12bd0:	movw	r0, #33264	; 0x81f0
   12bd4:	movt	r0, #1
   12bd8:	str	r5, [r1]
   12bdc:	bl	12430 <puts@plt>
   12be0:	movw	r1, #9648	; 0x25b0
   12be4:	str	r5, [sp]
   12be8:	add	r5, sp, #48	; 0x30
   12bec:	mov	r2, #0
   12bf0:	mov	r3, #0
   12bf4:	movt	r1, #1
   12bf8:	mov	r0, r5
   12bfc:	bl	12d90 <flatcc_builder_custom_init@@Base>
   12c00:	mvn	r0, #-1073741824	; 0xc0000000
   12c04:	mov	r1, #4
   12c08:	mov	r2, #10
   12c0c:	mov	r3, #4
   12c10:	str	r1, [sp]
   12c14:	str	r0, [sp, #4]
   12c18:	mov	r0, r5
   12c1c:	mov	r1, r4
   12c20:	bl	15e80 <flatcc_builder_create_vector@@Base>
   12c24:	mov	r1, r0
   12c28:	mov	r0, r5
   12c2c:	bl	12710 <debug_test@@Base+0xa4>
   12c30:	mov	r0, r5
   12c34:	bl	133a4 <flatcc_builder_clear@@Base>
   12c38:	bl	12828 <emit_test@@Base>
   12c3c:	sub	sp, fp, #16
   12c40:	pop	{r4, r5, r6, r7, fp, pc}

00012c44 <flatcc_builder_default_alloc@@Base>:
   12c44:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   12c48:	add	fp, sp, #24
   12c4c:	mov	r4, r1
   12c50:	cmp	r2, #0
   12c54:	beq	12c9c <flatcc_builder_default_alloc@@Base+0x58>
   12c58:	ldr	r0, [fp, #8]
   12c5c:	mov	r8, r3
   12c60:	sub	r1, r0, #1
   12c64:	cmp	r1, #6
   12c68:	bhi	12cc8 <flatcc_builder_default_alloc@@Base+0x84>
   12c6c:	add	r3, pc, #4
   12c70:	mov	r0, #256	; 0x100
   12c74:	ldr	pc, [r3, r1, lsl #2]
   12c78:	ldrdeq	r2, [r1], -ip
   12c7c:	andeq	r2, r1, r8, asr #25
   12c80:	andeq	r2, r1, r8, asr #25
   12c84:	muleq	r1, r4, ip
   12c88:	ldrdeq	r2, [r1], -r0
   12c8c:	andeq	r2, r1, r8, asr #25
   12c90:	ldrdeq	r2, [r1], -r8
   12c94:	mov	r0, #288	; 0x120
   12c98:	b	12cdc <flatcc_builder_default_alloc@@Base+0x98>
   12c9c:	ldr	r0, [r4]
   12ca0:	cmp	r0, #0
   12ca4:	moveq	r6, #0
   12ca8:	moveq	r0, r6
   12cac:	popeq	{r4, r5, r6, r7, r8, sl, fp, pc}
   12cb0:	bl	123f4 <free@plt>
   12cb4:	mov	r6, #0
   12cb8:	mov	r0, r6
   12cbc:	str	r6, [r4]
   12cc0:	str	r6, [r4, #4]
   12cc4:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   12cc8:	mov	r0, #32
   12ccc:	b	12cdc <flatcc_builder_default_alloc@@Base+0x98>
   12cd0:	mov	r0, r2
   12cd4:	b	12cdc <flatcc_builder_default_alloc@@Base+0x98>
   12cd8:	mov	r0, #64	; 0x40
   12cdc:	mov	r7, r0
   12ce0:	lsl	r0, r0, #1
   12ce4:	cmp	r7, r2
   12ce8:	bcc	12cdc <flatcc_builder_default_alloc@@Base+0x98>
   12cec:	ldr	r0, [r4, #4]
   12cf0:	mov	r6, #0
   12cf4:	cmp	r0, r2
   12cf8:	lsrcs	r0, r0, #1
   12cfc:	cmpcs	r0, r7
   12d00:	bcs	12d38 <flatcc_builder_default_alloc@@Base+0xf4>
   12d04:	ldr	r0, [r4]
   12d08:	mov	r1, r7
   12d0c:	bl	12418 <realloc@plt>
   12d10:	cmp	r0, #0
   12d14:	mvneq	r6, #0
   12d18:	moveq	r0, r6
   12d1c:	popeq	{r4, r5, r6, r7, r8, sl, fp, pc}
   12d20:	cmp	r8, #0
   12d24:	mov	r5, r0
   12d28:	ldrne	r1, [r4, #4]
   12d2c:	cmpne	r7, r1
   12d30:	bhi	12d40 <flatcc_builder_default_alloc@@Base+0xfc>
   12d34:	stm	r4, {r5, r7}
   12d38:	mov	r0, r6
   12d3c:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   12d40:	add	r0, r5, r1
   12d44:	sub	r2, r7, r1
   12d48:	mov	r1, #0
   12d4c:	bl	12484 <memset@plt>
   12d50:	b	12d34 <flatcc_builder_default_alloc@@Base+0xf0>

00012d54 <flatcc_builder_flush_vtable_cache@@Base>:
   12d54:	push	{r4, r5, fp, lr}
   12d58:	add	fp, sp, #8
   12d5c:	mov	r4, r0
   12d60:	ldr	r0, [r0, #116]	; 0x74
   12d64:	cmp	r0, #0
   12d68:	popeq	{r4, r5, fp, pc}
   12d6c:	ldr	r0, [r4, #92]	; 0x5c
   12d70:	ldr	r2, [r4, #96]	; 0x60
   12d74:	mov	r1, #0
   12d78:	mov	r5, #0
   12d7c:	bl	12484 <memset@plt>
   12d80:	mov	r0, #16
   12d84:	str	r5, [r4, #120]	; 0x78
   12d88:	str	r0, [r4, #124]	; 0x7c
   12d8c:	pop	{r4, r5, fp, pc}

00012d90 <flatcc_builder_custom_init@@Base>:
   12d90:	push	{r4, r5, r6, r7, fp, lr}
   12d94:	add	fp, sp, #16
   12d98:	mov	r6, r2
   12d9c:	mov	r7, r1
   12da0:	mov	r1, #0
   12da4:	mov	r2, #232	; 0xe8
   12da8:	mov	r5, r3
   12dac:	mov	r4, r0
   12db0:	bl	12484 <memset@plt>
   12db4:	ldr	r0, [fp, #8]
   12db8:	cmp	r7, #0
   12dbc:	bne	12dd4 <flatcc_builder_custom_init@@Base+0x44>
   12dc0:	movw	r7, #31472	; 0x7af0
   12dc4:	mov	r1, #1
   12dc8:	add	r6, r4, #188	; 0xbc
   12dcc:	movt	r7, #1
   12dd0:	str	r1, [r4, #184]	; 0xb8
   12dd4:	movw	r1, #11332	; 0x2c44
   12dd8:	cmp	r5, #0
   12ddc:	str	r6, [r4, #36]	; 0x24
   12de0:	str	r0, [r4, #40]	; 0x28
   12de4:	mov	r0, #0
   12de8:	str	r7, [r4, #44]	; 0x2c
   12dec:	movt	r1, #1
   12df0:	movne	r1, r5
   12df4:	str	r1, [r4, #48]	; 0x30
   12df8:	pop	{r4, r5, r6, r7, fp, pc}

00012dfc <flatcc_builder_init@@Base>:
   12dfc:	push	{r4, r5, fp, lr}
   12e00:	add	fp, sp, #8
   12e04:	mov	r1, #0
   12e08:	mov	r2, #232	; 0xe8
   12e0c:	mov	r4, r0
   12e10:	mov	r5, #0
   12e14:	bl	12484 <memset@plt>
   12e18:	mov	r0, #1
   12e1c:	movw	r2, #31472	; 0x7af0
   12e20:	add	r1, r4, #188	; 0xbc
   12e24:	str	r0, [r4, #184]	; 0xb8
   12e28:	movw	r0, #11332	; 0x2c44
   12e2c:	movt	r2, #1
   12e30:	str	r1, [r4, #36]	; 0x24
   12e34:	str	r5, [r4, #40]	; 0x28
   12e38:	movt	r0, #1
   12e3c:	str	r2, [r4, #44]	; 0x2c
   12e40:	str	r0, [r4, #48]	; 0x30
   12e44:	mov	r0, #0
   12e48:	pop	{r4, r5, fp, pc}

00012e4c <flatcc_builder_custom_reset@@Base>:
   12e4c:	push	{r4, r5, r6, sl, fp, lr}
   12e50:	add	fp, sp, #16
   12e54:	sub	sp, sp, #8
   12e58:	mov	r5, r1
   12e5c:	mov	r4, r0
   12e60:	cmp	r2, #0
   12e64:	beq	12ec4 <flatcc_builder_custom_reset@@Base+0x78>
   12e68:	mov	r1, r4
   12e6c:	ldr	r0, [r1, #52]!	; 0x34
   12e70:	cmp	r0, #0
   12e74:	beq	12ef0 <flatcc_builder_custom_reset@@Base+0xa4>
   12e78:	ldr	r0, [r4, #40]	; 0x28
   12e7c:	ldr	r6, [r4, #48]	; 0x30
   12e80:	mov	r2, #0
   12e84:	mov	r3, #1
   12e88:	str	r2, [sp]
   12e8c:	mov	r2, #1
   12e90:	blx	r6
   12e94:	mvn	r6, #0
   12e98:	cmp	r0, #0
   12e9c:	bne	131a4 <flatcc_builder_custom_reset@@Base+0x358>
   12ea0:	ldr	r0, [r4, #52]	; 0x34
   12ea4:	ldr	r2, [r4, #56]	; 0x38
   12ea8:	mov	r1, #0
   12eac:	bl	12484 <memset@plt>
   12eb0:	mov	r1, r4
   12eb4:	ldr	r0, [r1, #60]!	; 0x3c
   12eb8:	cmp	r0, #0
   12ebc:	bne	12f0c <flatcc_builder_custom_reset@@Base+0xc0>
   12ec0:	b	12f58 <flatcc_builder_custom_reset@@Base+0x10c>
   12ec4:	ldr	r0, [r4, #52]	; 0x34
   12ec8:	ldr	r2, [r4, #56]	; 0x38
   12ecc:	cmp	r0, #0
   12ed0:	beq	12fc0 <flatcc_builder_custom_reset@@Base+0x174>
   12ed4:	mov	r1, #0
   12ed8:	bl	12484 <memset@plt>
   12edc:	ldr	r0, [r4, #60]	; 0x3c
   12ee0:	ldr	r2, [r4, #64]	; 0x40
   12ee4:	cmp	r0, #0
   12ee8:	bne	12fd8 <flatcc_builder_custom_reset@@Base+0x18c>
   12eec:	b	12ff4 <flatcc_builder_custom_reset@@Base+0x1a8>
   12ef0:	ldr	r0, [r4, #56]	; 0x38
   12ef4:	cmp	r0, #0
   12ef8:	bne	13378 <flatcc_builder_custom_reset@@Base+0x52c>
   12efc:	mov	r1, r4
   12f00:	ldr	r0, [r1, #60]!	; 0x3c
   12f04:	cmp	r0, #0
   12f08:	beq	12f58 <flatcc_builder_custom_reset@@Base+0x10c>
   12f0c:	ldr	r0, [r4, #40]	; 0x28
   12f10:	ldr	r6, [r4, #48]	; 0x30
   12f14:	mov	r2, #1
   12f18:	mov	r3, #1
   12f1c:	str	r2, [sp]
   12f20:	mov	r2, #1
   12f24:	blx	r6
   12f28:	mvn	r6, #0
   12f2c:	cmp	r0, #0
   12f30:	bne	131a4 <flatcc_builder_custom_reset@@Base+0x358>
   12f34:	ldr	r0, [r4, #60]	; 0x3c
   12f38:	ldr	r2, [r4, #64]	; 0x40
   12f3c:	mov	r1, #0
   12f40:	bl	12484 <memset@plt>
   12f44:	mov	r1, r4
   12f48:	ldr	r0, [r1, #68]!	; 0x44
   12f4c:	cmp	r0, #0
   12f50:	bne	12f74 <flatcc_builder_custom_reset@@Base+0x128>
   12f54:	b	131b0 <flatcc_builder_custom_reset@@Base+0x364>
   12f58:	ldr	r0, [r4, #64]	; 0x40
   12f5c:	cmp	r0, #0
   12f60:	bne	13378 <flatcc_builder_custom_reset@@Base+0x52c>
   12f64:	mov	r1, r4
   12f68:	ldr	r0, [r1, #68]!	; 0x44
   12f6c:	cmp	r0, #0
   12f70:	beq	131b0 <flatcc_builder_custom_reset@@Base+0x364>
   12f74:	ldr	r0, [r4, #40]	; 0x28
   12f78:	ldr	r6, [r4, #48]	; 0x30
   12f7c:	mov	r2, #2
   12f80:	mov	r3, #1
   12f84:	str	r2, [sp]
   12f88:	mov	r2, #1
   12f8c:	blx	r6
   12f90:	mvn	r6, #0
   12f94:	cmp	r0, #0
   12f98:	bne	131a4 <flatcc_builder_custom_reset@@Base+0x358>
   12f9c:	ldr	r0, [r4, #68]	; 0x44
   12fa0:	ldr	r2, [r4, #72]	; 0x48
   12fa4:	mov	r1, #0
   12fa8:	bl	12484 <memset@plt>
   12fac:	mov	r1, r4
   12fb0:	ldr	r0, [r1, #76]!	; 0x4c
   12fb4:	cmp	r0, #0
   12fb8:	bne	131cc <flatcc_builder_custom_reset@@Base+0x380>
   12fbc:	b	13218 <flatcc_builder_custom_reset@@Base+0x3cc>
   12fc0:	cmp	r2, #0
   12fc4:	bne	13378 <flatcc_builder_custom_reset@@Base+0x52c>
   12fc8:	ldr	r0, [r4, #60]	; 0x3c
   12fcc:	ldr	r2, [r4, #64]	; 0x40
   12fd0:	cmp	r0, #0
   12fd4:	beq	12ff4 <flatcc_builder_custom_reset@@Base+0x1a8>
   12fd8:	mov	r1, #0
   12fdc:	bl	12484 <memset@plt>
   12fe0:	ldr	r0, [r4, #68]	; 0x44
   12fe4:	ldr	r2, [r4, #72]	; 0x48
   12fe8:	cmp	r0, #0
   12fec:	bne	1300c <flatcc_builder_custom_reset@@Base+0x1c0>
   12ff0:	b	13028 <flatcc_builder_custom_reset@@Base+0x1dc>
   12ff4:	cmp	r2, #0
   12ff8:	bne	13378 <flatcc_builder_custom_reset@@Base+0x52c>
   12ffc:	ldr	r0, [r4, #68]	; 0x44
   13000:	ldr	r2, [r4, #72]	; 0x48
   13004:	cmp	r0, #0
   13008:	beq	13028 <flatcc_builder_custom_reset@@Base+0x1dc>
   1300c:	mov	r1, #0
   13010:	bl	12484 <memset@plt>
   13014:	ldr	r0, [r4, #76]	; 0x4c
   13018:	ldr	r2, [r4, #80]	; 0x50
   1301c:	cmp	r0, #0
   13020:	bne	13040 <flatcc_builder_custom_reset@@Base+0x1f4>
   13024:	b	1305c <flatcc_builder_custom_reset@@Base+0x210>
   13028:	cmp	r2, #0
   1302c:	bne	13378 <flatcc_builder_custom_reset@@Base+0x52c>
   13030:	ldr	r0, [r4, #76]	; 0x4c
   13034:	ldr	r2, [r4, #80]	; 0x50
   13038:	cmp	r0, #0
   1303c:	beq	1305c <flatcc_builder_custom_reset@@Base+0x210>
   13040:	mov	r1, #0
   13044:	bl	12484 <memset@plt>
   13048:	ldr	r0, [r4, #84]	; 0x54
   1304c:	ldr	r2, [r4, #88]	; 0x58
   13050:	cmp	r0, #0
   13054:	bne	13074 <flatcc_builder_custom_reset@@Base+0x228>
   13058:	b	13090 <flatcc_builder_custom_reset@@Base+0x244>
   1305c:	cmp	r2, #0
   13060:	bne	13378 <flatcc_builder_custom_reset@@Base+0x52c>
   13064:	ldr	r0, [r4, #84]	; 0x54
   13068:	ldr	r2, [r4, #88]	; 0x58
   1306c:	cmp	r0, #0
   13070:	beq	13090 <flatcc_builder_custom_reset@@Base+0x244>
   13074:	mov	r1, #0
   13078:	bl	12484 <memset@plt>
   1307c:	ldr	r0, [r4, #92]	; 0x5c
   13080:	ldr	r2, [r4, #96]	; 0x60
   13084:	cmp	r0, #0
   13088:	bne	130a8 <flatcc_builder_custom_reset@@Base+0x25c>
   1308c:	b	130c4 <flatcc_builder_custom_reset@@Base+0x278>
   13090:	cmp	r2, #0
   13094:	bne	13378 <flatcc_builder_custom_reset@@Base+0x52c>
   13098:	ldr	r0, [r4, #92]	; 0x5c
   1309c:	ldr	r2, [r4, #96]	; 0x60
   130a0:	cmp	r0, #0
   130a4:	beq	130c4 <flatcc_builder_custom_reset@@Base+0x278>
   130a8:	mov	r1, #0
   130ac:	bl	12484 <memset@plt>
   130b0:	ldr	r0, [r4, #100]	; 0x64
   130b4:	ldr	r2, [r4, #104]	; 0x68
   130b8:	cmp	r0, #0
   130bc:	bne	130dc <flatcc_builder_custom_reset@@Base+0x290>
   130c0:	b	130f8 <flatcc_builder_custom_reset@@Base+0x2ac>
   130c4:	cmp	r2, #0
   130c8:	bne	13378 <flatcc_builder_custom_reset@@Base+0x52c>
   130cc:	ldr	r0, [r4, #100]	; 0x64
   130d0:	ldr	r2, [r4, #104]	; 0x68
   130d4:	cmp	r0, #0
   130d8:	beq	130f8 <flatcc_builder_custom_reset@@Base+0x2ac>
   130dc:	mov	r1, #0
   130e0:	bl	12484 <memset@plt>
   130e4:	ldr	r0, [r4, #108]	; 0x6c
   130e8:	ldr	r2, [r4, #112]	; 0x70
   130ec:	cmp	r0, #0
   130f0:	bne	13110 <flatcc_builder_custom_reset@@Base+0x2c4>
   130f4:	b	1311c <flatcc_builder_custom_reset@@Base+0x2d0>
   130f8:	cmp	r2, #0
   130fc:	bne	13378 <flatcc_builder_custom_reset@@Base+0x52c>
   13100:	ldr	r0, [r4, #108]	; 0x6c
   13104:	ldr	r2, [r4, #112]	; 0x70
   13108:	cmp	r0, #0
   1310c:	beq	1311c <flatcc_builder_custom_reset@@Base+0x2d0>
   13110:	mov	r1, #0
   13114:	bl	12484 <memset@plt>
   13118:	b	13124 <flatcc_builder_custom_reset@@Base+0x2d8>
   1311c:	cmp	r2, #0
   13120:	bne	13378 <flatcc_builder_custom_reset@@Base+0x52c>
   13124:	mov	r0, #0
   13128:	vmov.i32	q8, #0	; 0x00000000
   1312c:	mov	r6, #0
   13130:	str	r0, [r4, #120]	; 0x78
   13134:	ldr	r1, [r4, #124]	; 0x7c
   13138:	cmp	r1, #0
   1313c:	movne	r1, #16
   13140:	strne	r1, [r4, #124]	; 0x7c
   13144:	add	r1, r4, #148	; 0x94
   13148:	strh	r0, [r4, #128]	; 0x80
   1314c:	str	r0, [r4, #136]	; 0x88
   13150:	str	r0, [r4, #140]	; 0x8c
   13154:	str	r0, [r4, #32]
   13158:	cmp	r5, #0
   1315c:	vst1.32	{d16-d17}, [r1]
   13160:	ldr	r2, [r4, #60]	; 0x3c
   13164:	ldr	r1, [r4, #52]	; 0x34
   13168:	ldr	r3, [r4, #76]	; 0x4c
   1316c:	str	r2, [r4, #16]
   13170:	str	r0, [r4, #20]
   13174:	str	r0, [r4, #24]
   13178:	movne	r0, #0
   1317c:	str	r3, [r4]
   13180:	str	r1, [r4, #4]
   13184:	strne	r0, [r4, #172]	; 0xac
   13188:	strne	r0, [r4, #176]	; 0xb0
   1318c:	strne	r0, [r4, #180]	; 0xb4
   13190:	ldr	r0, [r4, #184]	; 0xb8
   13194:	cmp	r0, #0
   13198:	beq	131a4 <flatcc_builder_custom_reset@@Base+0x358>
   1319c:	add	r0, r4, #188	; 0xbc
   131a0:	bl	179b8 <flatcc_emitter_reset@@Base>
   131a4:	mov	r0, r6
   131a8:	sub	sp, fp, #16
   131ac:	pop	{r4, r5, r6, sl, fp, pc}
   131b0:	ldr	r0, [r4, #72]	; 0x48
   131b4:	cmp	r0, #0
   131b8:	bne	13378 <flatcc_builder_custom_reset@@Base+0x52c>
   131bc:	mov	r1, r4
   131c0:	ldr	r0, [r1, #76]!	; 0x4c
   131c4:	cmp	r0, #0
   131c8:	beq	13218 <flatcc_builder_custom_reset@@Base+0x3cc>
   131cc:	ldr	r0, [r4, #40]	; 0x28
   131d0:	ldr	r6, [r4, #48]	; 0x30
   131d4:	mov	r2, #3
   131d8:	mov	r3, #1
   131dc:	str	r2, [sp]
   131e0:	mov	r2, #1
   131e4:	blx	r6
   131e8:	mvn	r6, #0
   131ec:	cmp	r0, #0
   131f0:	bne	131a4 <flatcc_builder_custom_reset@@Base+0x358>
   131f4:	ldr	r0, [r4, #76]	; 0x4c
   131f8:	ldr	r2, [r4, #80]	; 0x50
   131fc:	mov	r1, #0
   13200:	bl	12484 <memset@plt>
   13204:	mov	r1, r4
   13208:	ldr	r0, [r1, #84]!	; 0x54
   1320c:	cmp	r0, #0
   13210:	bne	13234 <flatcc_builder_custom_reset@@Base+0x3e8>
   13214:	b	13280 <flatcc_builder_custom_reset@@Base+0x434>
   13218:	ldr	r0, [r4, #80]	; 0x50
   1321c:	cmp	r0, #0
   13220:	bne	13378 <flatcc_builder_custom_reset@@Base+0x52c>
   13224:	mov	r1, r4
   13228:	ldr	r0, [r1, #84]!	; 0x54
   1322c:	cmp	r0, #0
   13230:	beq	13280 <flatcc_builder_custom_reset@@Base+0x434>
   13234:	ldr	r0, [r4, #40]	; 0x28
   13238:	ldr	r6, [r4, #48]	; 0x30
   1323c:	mov	r2, #4
   13240:	mov	r3, #1
   13244:	str	r2, [sp]
   13248:	mov	r2, #1
   1324c:	blx	r6
   13250:	mvn	r6, #0
   13254:	cmp	r0, #0
   13258:	bne	131a4 <flatcc_builder_custom_reset@@Base+0x358>
   1325c:	ldr	r0, [r4, #84]	; 0x54
   13260:	ldr	r2, [r4, #88]	; 0x58
   13264:	mov	r1, #0
   13268:	bl	12484 <memset@plt>
   1326c:	ldr	r0, [r4, #92]	; 0x5c
   13270:	ldr	r2, [r4, #96]	; 0x60
   13274:	cmp	r0, #0
   13278:	bne	1329c <flatcc_builder_custom_reset@@Base+0x450>
   1327c:	b	132b8 <flatcc_builder_custom_reset@@Base+0x46c>
   13280:	ldr	r0, [r4, #88]	; 0x58
   13284:	cmp	r0, #0
   13288:	bne	13378 <flatcc_builder_custom_reset@@Base+0x52c>
   1328c:	ldr	r0, [r4, #92]	; 0x5c
   13290:	ldr	r2, [r4, #96]	; 0x60
   13294:	cmp	r0, #0
   13298:	beq	132b8 <flatcc_builder_custom_reset@@Base+0x46c>
   1329c:	mov	r1, #0
   132a0:	bl	12484 <memset@plt>
   132a4:	mov	r1, r4
   132a8:	ldr	r0, [r1, #100]!	; 0x64
   132ac:	cmp	r0, #0
   132b0:	bne	132d0 <flatcc_builder_custom_reset@@Base+0x484>
   132b4:	b	1331c <flatcc_builder_custom_reset@@Base+0x4d0>
   132b8:	cmp	r2, #0
   132bc:	bne	13378 <flatcc_builder_custom_reset@@Base+0x52c>
   132c0:	mov	r1, r4
   132c4:	ldr	r0, [r1, #100]!	; 0x64
   132c8:	cmp	r0, #0
   132cc:	beq	1331c <flatcc_builder_custom_reset@@Base+0x4d0>
   132d0:	ldr	r0, [r4, #40]	; 0x28
   132d4:	ldr	r6, [r4, #48]	; 0x30
   132d8:	mov	r2, #6
   132dc:	mov	r3, #1
   132e0:	str	r2, [sp]
   132e4:	mov	r2, #1
   132e8:	blx	r6
   132ec:	mvn	r6, #0
   132f0:	cmp	r0, #0
   132f4:	bne	131a4 <flatcc_builder_custom_reset@@Base+0x358>
   132f8:	ldr	r0, [r4, #100]	; 0x64
   132fc:	ldr	r2, [r4, #104]	; 0x68
   13300:	mov	r1, #0
   13304:	bl	12484 <memset@plt>
   13308:	mov	r1, r4
   1330c:	ldr	r0, [r1, #108]!	; 0x6c
   13310:	cmp	r0, #0
   13314:	bne	13338 <flatcc_builder_custom_reset@@Base+0x4ec>
   13318:	b	1336c <flatcc_builder_custom_reset@@Base+0x520>
   1331c:	ldr	r0, [r4, #104]	; 0x68
   13320:	cmp	r0, #0
   13324:	bne	13378 <flatcc_builder_custom_reset@@Base+0x52c>
   13328:	mov	r1, r4
   1332c:	ldr	r0, [r1, #108]!	; 0x6c
   13330:	cmp	r0, #0
   13334:	beq	1336c <flatcc_builder_custom_reset@@Base+0x520>
   13338:	ldr	r0, [r4, #40]	; 0x28
   1333c:	ldr	r6, [r4, #48]	; 0x30
   13340:	mov	r2, #7
   13344:	mov	r3, #1
   13348:	str	r2, [sp]
   1334c:	mov	r2, #1
   13350:	blx	r6
   13354:	mvn	r6, #0
   13358:	cmp	r0, #0
   1335c:	bne	131a4 <flatcc_builder_custom_reset@@Base+0x358>
   13360:	ldr	r0, [r4, #108]	; 0x6c
   13364:	ldr	r2, [r4, #112]	; 0x70
   13368:	b	13110 <flatcc_builder_custom_reset@@Base+0x2c4>
   1336c:	ldr	r0, [r4, #112]	; 0x70
   13370:	cmp	r0, #0
   13374:	beq	13124 <flatcc_builder_custom_reset@@Base+0x2d8>
   13378:	movw	r0, #33872	; 0x8450
   1337c:	movw	r1, #33890	; 0x8462
   13380:	movw	r3, #33960	; 0x84a8
   13384:	movw	r2, #434	; 0x1b2
   13388:	movt	r0, #1
   1338c:	movt	r1, #1
   13390:	movt	r3, #1
   13394:	bl	124b4 <__assert_fail@plt>

00013398 <flatcc_builder_reset@@Base>:
   13398:	mov	r1, #0
   1339c:	mov	r2, #0
   133a0:	b	12e4c <flatcc_builder_custom_reset@@Base>

000133a4 <flatcc_builder_clear@@Base>:
   133a4:	push	{r4, sl, fp, lr}
   133a8:	add	fp, sp, #8
   133ac:	sub	sp, sp, #8
   133b0:	mov	r4, r0
   133b4:	ldr	r0, [r0, #40]	; 0x28
   133b8:	mov	r1, #0
   133bc:	mov	r2, #0
   133c0:	mov	r3, #0
   133c4:	ldr	ip, [r4, #48]	; 0x30
   133c8:	str	r1, [sp]
   133cc:	add	r1, r4, #52	; 0x34
   133d0:	blx	ip
   133d4:	ldr	r0, [r4, #40]	; 0x28
   133d8:	ldr	ip, [r4, #48]	; 0x30
   133dc:	mov	r1, #1
   133e0:	mov	r2, #0
   133e4:	mov	r3, #0
   133e8:	str	r1, [sp]
   133ec:	add	r1, r4, #60	; 0x3c
   133f0:	blx	ip
   133f4:	ldr	r0, [r4, #40]	; 0x28
   133f8:	ldr	ip, [r4, #48]	; 0x30
   133fc:	mov	r1, #2
   13400:	mov	r2, #0
   13404:	mov	r3, #0
   13408:	str	r1, [sp]
   1340c:	add	r1, r4, #68	; 0x44
   13410:	blx	ip
   13414:	ldr	r0, [r4, #40]	; 0x28
   13418:	ldr	ip, [r4, #48]	; 0x30
   1341c:	mov	r1, #3
   13420:	mov	r2, #0
   13424:	mov	r3, #0
   13428:	str	r1, [sp]
   1342c:	add	r1, r4, #76	; 0x4c
   13430:	blx	ip
   13434:	ldr	r0, [r4, #40]	; 0x28
   13438:	ldr	ip, [r4, #48]	; 0x30
   1343c:	mov	r1, #4
   13440:	mov	r2, #0
   13444:	mov	r3, #0
   13448:	str	r1, [sp]
   1344c:	add	r1, r4, #84	; 0x54
   13450:	blx	ip
   13454:	ldr	r0, [r4, #40]	; 0x28
   13458:	ldr	ip, [r4, #48]	; 0x30
   1345c:	mov	r1, #5
   13460:	mov	r2, #0
   13464:	mov	r3, #0
   13468:	str	r1, [sp]
   1346c:	add	r1, r4, #92	; 0x5c
   13470:	blx	ip
   13474:	ldr	r0, [r4, #40]	; 0x28
   13478:	ldr	ip, [r4, #48]	; 0x30
   1347c:	mov	r1, #6
   13480:	mov	r2, #0
   13484:	mov	r3, #0
   13488:	str	r1, [sp]
   1348c:	add	r1, r4, #100	; 0x64
   13490:	blx	ip
   13494:	ldr	r0, [r4, #40]	; 0x28
   13498:	ldr	ip, [r4, #48]	; 0x30
   1349c:	mov	r1, #7
   134a0:	mov	r2, #0
   134a4:	mov	r3, #0
   134a8:	str	r1, [sp]
   134ac:	add	r1, r4, #108	; 0x6c
   134b0:	blx	ip
   134b4:	ldr	r0, [r4, #184]	; 0xb8
   134b8:	cmp	r0, #0
   134bc:	beq	134c8 <flatcc_builder_clear@@Base+0x124>
   134c0:	add	r0, r4, #188	; 0xbc
   134c4:	bl	17a84 <flatcc_emitter_clear@@Base>
   134c8:	mov	r0, r4
   134cc:	mov	r1, #0
   134d0:	mov	r2, #232	; 0xe8
   134d4:	sub	sp, fp, #8
   134d8:	pop	{r4, sl, fp, lr}
   134dc:	b	12484 <memset@plt>

000134e0 <flatcc_builder_enter_user_frame_ptr@@Base>:
   134e0:	push	{r4, r5, r6, r7, fp, lr}
   134e4:	add	fp, sp, #16
   134e8:	sub	sp, sp, #8
   134ec:	mov	r4, r0
   134f0:	ldr	r0, [r0, #112]	; 0x70
   134f4:	add	r1, r1, #7
   134f8:	ldr	r7, [r4, #228]	; 0xe4
   134fc:	bic	r5, r1, #3
   13500:	add	r6, r4, #108	; 0x6c
   13504:	add	r2, r7, r5
   13508:	cmp	r2, r0
   1350c:	bls	13534 <flatcc_builder_enter_user_frame_ptr@@Base+0x54>
   13510:	ldr	r0, [r4, #40]	; 0x28
   13514:	ldr	ip, [r4, #48]	; 0x30
   13518:	mov	r1, #7
   1351c:	mov	r3, #0
   13520:	str	r1, [sp]
   13524:	mov	r1, r6
   13528:	blx	ip
   1352c:	cmp	r0, #0
   13530:	bne	13588 <flatcc_builder_enter_user_frame_ptr@@Base+0xa8>
   13534:	ldr	r0, [r6]
   13538:	adds	r6, r0, r7
   1353c:	beq	13578 <flatcc_builder_enter_user_frame_ptr@@Base+0x98>
   13540:	mov	r0, r6
   13544:	mov	r1, #0
   13548:	mov	r2, r5
   1354c:	bl	12484 <memset@plt>
   13550:	ldr	r0, [r4, #224]	; 0xe0
   13554:	str	r0, [r6], #4
   13558:	ldr	r0, [r4, #228]	; 0xe4
   1355c:	add	r1, r0, #4
   13560:	add	r0, r0, r5
   13564:	str	r1, [r4, #224]	; 0xe0
   13568:	str	r0, [r4, #228]	; 0xe4
   1356c:	mov	r0, r6
   13570:	sub	sp, fp, #16
   13574:	pop	{r4, r5, r6, r7, fp, pc}
   13578:	mov	r6, #0
   1357c:	mov	r0, r6
   13580:	sub	sp, fp, #16
   13584:	pop	{r4, r5, r6, r7, fp, pc}
   13588:	movw	r0, #38408	; 0x9608
   1358c:	movw	r1, #33890	; 0x8462
   13590:	movw	r3, #37954	; 0x9442
   13594:	mov	r2, #308	; 0x134
   13598:	movt	r0, #1
   1359c:	movt	r1, #1
   135a0:	movt	r3, #1
   135a4:	bl	124b4 <__assert_fail@plt>

000135a8 <flatcc_builder_enter_user_frame@@Base>:
   135a8:	push	{r4, r5, r6, r7, fp, lr}
   135ac:	add	fp, sp, #16
   135b0:	sub	sp, sp, #8
   135b4:	mov	r4, r0
   135b8:	ldr	r0, [r0, #112]	; 0x70
   135bc:	add	r1, r1, #7
   135c0:	ldr	r7, [r4, #228]	; 0xe4
   135c4:	bic	r5, r1, #3
   135c8:	add	r6, r4, #108	; 0x6c
   135cc:	add	r2, r7, r5
   135d0:	cmp	r2, r0
   135d4:	bls	135fc <flatcc_builder_enter_user_frame@@Base+0x54>
   135d8:	ldr	r0, [r4, #40]	; 0x28
   135dc:	ldr	ip, [r4, #48]	; 0x30
   135e0:	mov	r1, #7
   135e4:	mov	r3, #0
   135e8:	str	r1, [sp]
   135ec:	mov	r1, r6
   135f0:	blx	ip
   135f4:	cmp	r0, #0
   135f8:	bne	13644 <flatcc_builder_enter_user_frame@@Base+0x9c>
   135fc:	ldr	r0, [r6]
   13600:	adds	r6, r0, r7
   13604:	moveq	r0, #0
   13608:	subeq	sp, fp, #16
   1360c:	popeq	{r4, r5, r6, r7, fp, pc}
   13610:	mov	r0, r6
   13614:	mov	r1, #0
   13618:	mov	r2, r5
   1361c:	bl	12484 <memset@plt>
   13620:	ldr	r0, [r4, #224]	; 0xe0
   13624:	str	r0, [r6]
   13628:	ldr	r1, [r4, #228]	; 0xe4
   1362c:	add	r0, r1, #4
   13630:	add	r1, r1, r5
   13634:	str	r0, [r4, #224]	; 0xe0
   13638:	str	r1, [r4, #228]	; 0xe4
   1363c:	sub	sp, fp, #16
   13640:	pop	{r4, r5, r6, r7, fp, pc}
   13644:	movw	r0, #38408	; 0x9608
   13648:	movw	r1, #33890	; 0x8462
   1364c:	movw	r3, #37954	; 0x9442
   13650:	mov	r2, #308	; 0x134
   13654:	movt	r0, #1
   13658:	movt	r1, #1
   1365c:	movt	r3, #1
   13660:	bl	124b4 <__assert_fail@plt>

00013664 <flatcc_builder_exit_user_frame@@Base>:
   13664:	ldr	r1, [r0, #224]	; 0xe0
   13668:	cmp	r1, #0
   1366c:	subne	r2, r1, #4
   13670:	strne	r2, [r0, #228]	; 0xe4
   13674:	ldrne	r2, [r0, #108]	; 0x6c
   13678:	addne	r1, r2, r1
   1367c:	ldrne	r1, [r1, #-4]
   13680:	strne	r1, [r0, #224]	; 0xe0
   13684:	movne	r0, r1
   13688:	bxne	lr
   1368c:	push	{fp, lr}
   13690:	mov	fp, sp
   13694:	movw	r0, #34022	; 0x84e6
   13698:	movw	r1, #33890	; 0x8462
   1369c:	movw	r3, #34047	; 0x84ff
   136a0:	movw	r2, #542	; 0x21e
   136a4:	movt	r0, #1
   136a8:	movt	r1, #1
   136ac:	movt	r3, #1
   136b0:	bl	124b4 <__assert_fail@plt>

000136b4 <flatcc_builder_exit_user_frame_at@@Base>:
   136b4:	push	{fp, lr}
   136b8:	mov	fp, sp
   136bc:	ldr	r2, [r0, #224]	; 0xe0
   136c0:	cmp	r2, r1
   136c4:	bcc	13710 <flatcc_builder_exit_user_frame_at@@Base+0x5c>
   136c8:	cmp	r1, #0
   136cc:	str	r1, [r0, #224]	; 0xe0
   136d0:	subne	r2, r1, #4
   136d4:	strne	r2, [r0, #228]	; 0xe4
   136d8:	ldrne	r2, [r0, #108]	; 0x6c
   136dc:	addne	r1, r2, r1
   136e0:	ldrne	r1, [r1, #-4]
   136e4:	strne	r1, [r0, #224]	; 0xe0
   136e8:	movne	r0, r1
   136ec:	popne	{fp, pc}
   136f0:	movw	r0, #34022	; 0x84e6
   136f4:	movw	r1, #33890	; 0x8462
   136f8:	movw	r3, #34047	; 0x84ff
   136fc:	movw	r2, #542	; 0x21e
   13700:	movt	r0, #1
   13704:	movt	r1, #1
   13708:	movt	r3, #1
   1370c:	bl	124b4 <__assert_fail@plt>
   13710:	movw	r0, #34105	; 0x8539
   13714:	movw	r1, #33890	; 0x8462
   13718:	movw	r3, #34136	; 0x8558
   1371c:	movw	r2, #551	; 0x227
   13720:	movt	r0, #1
   13724:	movt	r1, #1
   13728:	movt	r3, #1
   1372c:	bl	124b4 <__assert_fail@plt>

00013730 <flatcc_builder_get_current_user_frame@@Base>:
   13730:	ldr	r0, [r0, #224]	; 0xe0
   13734:	bx	lr

00013738 <flatcc_builder_get_user_frame_ptr@@Base>:
   13738:	ldr	r0, [r0, #108]	; 0x6c
   1373c:	add	r0, r0, r1
   13740:	bx	lr

00013744 <flatcc_builder_embed_buffer@@Base>:
   13744:	push	{r4, r5, r6, r7, fp, lr}
   13748:	add	fp, sp, #16
   1374c:	sub	sp, sp, #88	; 0x58
   13750:	mov	r4, r0
   13754:	ldr	r0, [fp, #8]
   13758:	mov	r5, r3
   1375c:	mov	r7, r2
   13760:	mov	r2, r1
   13764:	sub	r1, fp, #18
   13768:	strh	r0, [fp, #-18]	; 0xffffffee
   1376c:	mov	r0, r4
   13770:	ldr	r3, [r4, #152]	; 0x98
   13774:	cmp	r3, #0
   13778:	movwne	r3, #1
   1377c:	bl	138b4 <flatcc_builder_embed_buffer@@Base+0x170>
   13780:	ldr	r1, [fp, #12]
   13784:	ldrh	r3, [fp, #-18]	; 0xffffffee
   13788:	ldr	r0, [r4, #136]	; 0x88
   1378c:	mov	r2, #0
   13790:	str	r2, [sp, #8]
   13794:	str	r2, [sp, #12]
   13798:	and	r1, r1, #2
   1379c:	sub	r3, r3, #1
   137a0:	add	r1, r5, r1, lsl #1
   137a4:	sub	r1, r0, r1
   137a8:	and	r3, r3, r1
   137ac:	add	r1, r3, r5
   137b0:	str	r1, [fp, #-24]	; 0xffffffe8
   137b4:	ldr	r1, [r4, #152]	; 0x98
   137b8:	cmp	r1, #0
   137bc:	mov	r1, #0
   137c0:	beq	137e0 <flatcc_builder_embed_buffer@@Base+0x9c>
   137c4:	sub	r1, fp, #24
   137c8:	mov	r2, #1
   137cc:	str	r1, [sp, #16]
   137d0:	mov	r1, #4
   137d4:	str	r1, [sp, #8]
   137d8:	str	r1, [sp, #20]
   137dc:	str	r2, [sp, #12]
   137e0:	cmp	r5, #0
   137e4:	beq	13808 <flatcc_builder_embed_buffer@@Base+0xc4>
   137e8:	add	r6, sp, #8
   137ec:	add	r1, r1, r5
   137f0:	add	r6, r6, r2, lsl #3
   137f4:	add	r2, r2, #1
   137f8:	str	r1, [sp, #8]
   137fc:	str	r7, [r6, #8]
   13800:	str	r5, [r6, #12]
   13804:	str	r2, [sp, #12]
   13808:	cmp	r3, #0
   1380c:	beq	13838 <flatcc_builder_embed_buffer@@Base+0xf4>
   13810:	add	r7, sp, #8
   13814:	movw	r6, #33360	; 0x8250
   13818:	add	r1, r1, r3
   1381c:	add	r7, r7, r2, lsl #3
   13820:	add	r2, r2, #1
   13824:	movt	r6, #1
   13828:	str	r1, [sp, #8]
   1382c:	str	r6, [r7, #8]
   13830:	str	r3, [r7, #12]
   13834:	str	r2, [sp, #12]
   13838:	cmp	r1, #0
   1383c:	ble	13894 <flatcc_builder_embed_buffer@@Base+0x150>
   13840:	sub	r5, r0, r1
   13844:	ldr	r0, [r4, #36]	; 0x24
   13848:	ldr	r7, [r4, #44]	; 0x2c
   1384c:	str	r1, [sp]
   13850:	add	r1, sp, #8
   13854:	add	r1, r1, #8
   13858:	mov	r3, r5
   1385c:	blx	r7
   13860:	cmp	r0, #0
   13864:	streq	r5, [r4, #136]	; 0x88
   13868:	moveq	r0, r5
   1386c:	subeq	sp, fp, #16
   13870:	popeq	{r4, r5, r6, r7, fp, pc}
   13874:	movw	r0, #38408	; 0x9608
   13878:	movw	r1, #33890	; 0x8462
   1387c:	movw	r3, #38087	; 0x94c7
   13880:	movw	r2, #651	; 0x28b
   13884:	movt	r0, #1
   13888:	movt	r1, #1
   1388c:	movt	r3, #1
   13890:	bl	124b4 <__assert_fail@plt>
   13894:	movw	r0, #38408	; 0x9608
   13898:	movw	r1, #33890	; 0x8462
   1389c:	movw	r3, #38087	; 0x94c7
   138a0:	movw	r2, #647	; 0x287
   138a4:	movt	r0, #1
   138a8:	movt	r1, #1
   138ac:	movt	r3, #1
   138b0:	bl	124b4 <__assert_fail@plt>
   138b4:	push	{r4, sl, fp, lr}
   138b8:	add	fp, sp, #8
   138bc:	sub	sp, sp, #80	; 0x50
   138c0:	cmp	r2, #0
   138c4:	bne	138d4 <flatcc_builder_embed_buffer@@Base+0x190>
   138c8:	ldrh	r2, [r0, #132]	; 0x84
   138cc:	cmp	r2, #0
   138d0:	movweq	r2, #1
   138d4:	ldrh	r4, [r1]
   138d8:	cmp	r4, #4
   138dc:	movwcc	r4, #4
   138e0:	cmpcs	r4, r2
   138e4:	bcs	138f4 <flatcc_builder_embed_buffer@@Base+0x1b0>
   138e8:	cmp	r4, r2
   138ec:	movcc	r4, r2
   138f0:	strh	r4, [r1]
   138f4:	cmp	r3, #0
   138f8:	bne	1396c <flatcc_builder_embed_buffer@@Base+0x228>
   138fc:	ldr	r4, [r0, #140]	; 0x8c
   13900:	sub	r1, r2, #1
   13904:	ands	r1, r4, r1
   13908:	beq	1396c <flatcc_builder_embed_buffer@@Base+0x228>
   1390c:	movw	r2, #33360	; 0x8250
   13910:	cmn	r1, #1
   13914:	movt	r2, #1
   13918:	str	r2, [sp, #16]
   1391c:	mov	r2, #1
   13920:	str	r1, [sp, #8]
   13924:	str	r1, [sp, #20]
   13928:	str	r2, [sp, #12]
   1392c:	add	r2, r4, r1
   13930:	str	r2, [r0, #140]	; 0x8c
   13934:	ble	13974 <flatcc_builder_embed_buffer@@Base+0x230>
   13938:	ldr	r2, [r0, #36]	; 0x24
   1393c:	ldr	ip, [r0, #44]	; 0x2c
   13940:	add	r0, sp, #8
   13944:	str	r1, [sp]
   13948:	mov	r3, r4
   1394c:	add	r1, r0, #8
   13950:	mov	r0, r2
   13954:	mov	r2, #1
   13958:	blx	ip
   1395c:	cmp	r0, #0
   13960:	bne	13994 <flatcc_builder_embed_buffer@@Base+0x250>
   13964:	cmn	r4, #1
   13968:	beq	139b4 <flatcc_builder_embed_buffer@@Base+0x270>
   1396c:	sub	sp, fp, #8
   13970:	pop	{r4, sl, fp, pc}
   13974:	movw	r0, #38408	; 0x9608
   13978:	movw	r1, #33890	; 0x8462
   1397c:	movw	r3, #38275	; 0x9583
   13980:	movw	r2, #673	; 0x2a1
   13984:	movt	r0, #1
   13988:	movt	r1, #1
   1398c:	movt	r3, #1
   13990:	bl	124b4 <__assert_fail@plt>
   13994:	movw	r0, #38408	; 0x9608
   13998:	movw	r1, #33890	; 0x8462
   1399c:	movw	r3, #38275	; 0x9583
   139a0:	movw	r2, #677	; 0x2a5
   139a4:	movt	r0, #1
   139a8:	movt	r1, #1
   139ac:	movt	r3, #1
   139b0:	bl	124b4 <__assert_fail@plt>
   139b4:	movw	r0, #38408	; 0x9608
   139b8:	movw	r1, #33890	; 0x8462
   139bc:	movw	r3, #38021	; 0x9485
   139c0:	movw	r2, #702	; 0x2be
   139c4:	movt	r0, #1
   139c8:	movt	r1, #1
   139cc:	movt	r3, #1
   139d0:	bl	124b4 <__assert_fail@plt>

000139d4 <flatcc_builder_create_buffer@@Base>:
   139d4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   139d8:	add	fp, sp, #28
   139dc:	sub	sp, sp, #100	; 0x64
   139e0:	ldr	r8, [fp, #12]
   139e4:	mov	r4, r0
   139e8:	ldr	r0, [fp, #8]
   139ec:	mov	r7, r1
   139f0:	mov	r5, #0
   139f4:	mov	r9, r3
   139f8:	sub	r1, fp, #30
   139fc:	str	r5, [sp, #12]
   13a00:	and	r6, r8, #1
   13a04:	strh	r0, [fp, #-30]	; 0xffffffe2
   13a08:	mov	r0, r4
   13a0c:	mov	r3, r6
   13a10:	bl	138b4 <flatcc_builder_embed_buffer@@Base+0x170>
   13a14:	ldrh	r0, [r4, #128]	; 0x80
   13a18:	ldrh	r1, [fp, #-30]	; 0xffffffe2
   13a1c:	cmp	r0, r1
   13a20:	strhcc	r1, [r4, #128]	; 0x80
   13a24:	cmp	r7, #0
   13a28:	stmib	sp, {r6, r9}
   13a2c:	beq	13a48 <flatcc_builder_create_buffer@@Base+0x74>
   13a30:	ldr	r5, [r7]
   13a34:	cmp	r5, #0
   13a38:	str	r5, [sp, #12]
   13a3c:	movwne	r5, #1
   13a40:	lsl	r7, r5, #2
   13a44:	b	13a4c <flatcc_builder_create_buffer@@Base+0x78>
   13a48:	mov	r7, #0
   13a4c:	ldr	r9, [r4, #136]	; 0x88
   13a50:	mov	sl, #4
   13a54:	mvn	r6, #3
   13a58:	mov	r3, #0
   13a5c:	ands	ip, r8, #3
   13a60:	and	r2, sl, r8, lsl #1
   13a64:	str	r3, [sp, #20]
   13a68:	str	r3, [sp, #16]
   13a6c:	sub	r2, r6, r2
   13a70:	sub	r6, r1, #1
   13a74:	mov	r1, #4
   13a78:	add	r2, r2, r9
   13a7c:	sub	r2, r2, r7
   13a80:	beq	13aa4 <flatcc_builder_create_buffer@@Base+0xd0>
   13a84:	sub	r1, fp, #40	; 0x28
   13a88:	mov	r3, #1
   13a8c:	str	r1, [sp, #24]
   13a90:	mov	r1, #4
   13a94:	str	r1, [sp, #16]
   13a98:	str	r1, [sp, #28]
   13a9c:	mov	r1, #8
   13aa0:	str	r3, [sp, #20]
   13aa4:	add	lr, sp, #16
   13aa8:	and	r6, r2, r6
   13aac:	sub	r0, fp, #36	; 0x24
   13ab0:	str	r1, [sp, #16]
   13ab4:	cmp	r5, #0
   13ab8:	add	r2, lr, r3, lsl #3
   13abc:	str	r0, [r2, #8]
   13ac0:	str	sl, [r2, #12]
   13ac4:	add	r2, r3, #1
   13ac8:	str	r2, [sp, #20]
   13acc:	beq	13af0 <flatcc_builder_create_buffer@@Base+0x11c>
   13ad0:	add	r1, r1, r7
   13ad4:	add	r0, lr, r2, lsl #3
   13ad8:	add	r2, sp, #12
   13adc:	str	r1, [sp, #16]
   13ae0:	str	r2, [r0, #8]
   13ae4:	orr	r2, r3, #2
   13ae8:	str	r7, [r0, #12]
   13aec:	str	r2, [sp, #20]
   13af0:	cmp	r6, #0
   13af4:	beq	13b1c <flatcc_builder_create_buffer@@Base+0x148>
   13af8:	movw	r3, #33360	; 0x8250
   13afc:	add	r1, r1, r6
   13b00:	add	r0, lr, r2, lsl #3
   13b04:	add	r2, r2, #1
   13b08:	movt	r3, #1
   13b0c:	str	r1, [sp, #16]
   13b10:	str	r3, [r0, #8]
   13b14:	str	r6, [r0, #12]
   13b18:	str	r2, [sp, #20]
   13b1c:	ldr	r5, [sp, #4]
   13b20:	sub	r7, r9, r1
   13b24:	cmp	ip, #0
   13b28:	mov	r6, #144	; 0x90
   13b2c:	ldr	r3, [sp, #8]
   13b30:	mov	r0, r7
   13b34:	addne	r0, r0, #4
   13b38:	cmp	r5, #0
   13b3c:	sub	r3, r3, r0
   13b40:	movweq	r6, #140	; 0x8c
   13b44:	cmp	r1, #0
   13b48:	ldr	r6, [r4, r6]
   13b4c:	str	r3, [fp, #-36]	; 0xffffffdc
   13b50:	sub	r0, r6, r0
   13b54:	str	r0, [fp, #-40]	; 0xffffffd8
   13b58:	ble	13bb0 <flatcc_builder_create_buffer@@Base+0x1dc>
   13b5c:	ldr	r0, [r4, #36]	; 0x24
   13b60:	ldr	r6, [r4, #44]	; 0x2c
   13b64:	str	r1, [sp]
   13b68:	add	r1, lr, #8
   13b6c:	mov	r3, r7
   13b70:	blx	r6
   13b74:	cmp	r0, #0
   13b78:	bne	13bd0 <flatcc_builder_create_buffer@@Base+0x1fc>
   13b7c:	cmp	r7, #0
   13b80:	str	r7, [r4, #136]	; 0x88
   13b84:	movne	r0, r7
   13b88:	subne	sp, fp, #28
   13b8c:	popne	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13b90:	movw	r0, #38408	; 0x9608
   13b94:	movw	r1, #33890	; 0x8462
   13b98:	movw	r3, #34205	; 0x859d
   13b9c:	mov	r2, #772	; 0x304
   13ba0:	movt	r0, #1
   13ba4:	movt	r1, #1
   13ba8:	movt	r3, #1
   13bac:	bl	124b4 <__assert_fail@plt>
   13bb0:	movw	r0, #38408	; 0x9608
   13bb4:	movw	r1, #33890	; 0x8462
   13bb8:	movw	r3, #38087	; 0x94c7
   13bbc:	movw	r2, #647	; 0x287
   13bc0:	movt	r0, #1
   13bc4:	movt	r1, #1
   13bc8:	movt	r3, #1
   13bcc:	bl	124b4 <__assert_fail@plt>
   13bd0:	movw	r0, #38408	; 0x9608
   13bd4:	movw	r1, #33890	; 0x8462
   13bd8:	movw	r3, #38087	; 0x94c7
   13bdc:	movw	r2, #651	; 0x28b
   13be0:	movt	r0, #1
   13be4:	movt	r1, #1
   13be8:	movt	r3, #1
   13bec:	bl	124b4 <__assert_fail@plt>

00013bf0 <flatcc_builder_create_struct@@Base>:
   13bf0:	push	{r4, r5, r6, sl, fp, lr}
   13bf4:	add	fp, sp, #16
   13bf8:	sub	sp, sp, #80	; 0x50
   13bfc:	cmp	r3, #0
   13c00:	beq	13cd8 <flatcc_builder_create_struct@@Base+0xe8>
   13c04:	mov	r5, r0
   13c08:	ldrh	r0, [r0, #128]	; 0x80
   13c0c:	mov	r4, #0
   13c10:	cmp	r0, r3
   13c14:	strhcc	r3, [r5, #128]	; 0x80
   13c18:	sub	r3, r3, #1
   13c1c:	cmp	r2, #0
   13c20:	ldr	r0, [r5, #136]	; 0x88
   13c24:	str	r4, [sp, #12]
   13c28:	str	r4, [sp, #8]
   13c2c:	movne	r4, #1
   13c30:	strne	r1, [sp, #16]
   13c34:	strne	r2, [sp, #8]
   13c38:	strne	r2, [sp, #20]
   13c3c:	strne	r4, [sp, #12]
   13c40:	sub	r6, r0, r2
   13c44:	and	r3, r6, r3
   13c48:	cmp	r3, #0
   13c4c:	beq	13c78 <flatcc_builder_create_struct@@Base+0x88>
   13c50:	add	r1, sp, #8
   13c54:	movw	r6, #33360	; 0x8250
   13c58:	add	r2, r3, r2
   13c5c:	add	r1, r1, r4, lsl #3
   13c60:	add	r4, r4, #1
   13c64:	movt	r6, #1
   13c68:	str	r2, [sp, #8]
   13c6c:	str	r6, [r1, #8]
   13c70:	str	r3, [r1, #12]
   13c74:	str	r4, [sp, #12]
   13c78:	cmp	r2, #0
   13c7c:	ble	13cf8 <flatcc_builder_create_struct@@Base+0x108>
   13c80:	sub	r6, r0, r2
   13c84:	ldr	r0, [r5, #36]	; 0x24
   13c88:	ldr	ip, [r5, #44]	; 0x2c
   13c8c:	add	r1, sp, #8
   13c90:	str	r2, [sp]
   13c94:	mov	r2, r4
   13c98:	add	r1, r1, #8
   13c9c:	mov	r3, r6
   13ca0:	blx	ip
   13ca4:	cmp	r0, #0
   13ca8:	streq	r6, [r5, #136]	; 0x88
   13cac:	moveq	r0, r6
   13cb0:	subeq	sp, fp, #16
   13cb4:	popeq	{r4, r5, r6, sl, fp, pc}
   13cb8:	movw	r0, #38408	; 0x9608
   13cbc:	movw	r1, #33890	; 0x8462
   13cc0:	movw	r3, #38087	; 0x94c7
   13cc4:	movw	r2, #651	; 0x28b
   13cc8:	movt	r0, #1
   13ccc:	movt	r1, #1
   13cd0:	movt	r3, #1
   13cd4:	bl	124b4 <__assert_fail@plt>
   13cd8:	movw	r0, #34336	; 0x8620
   13cdc:	movw	r1, #33890	; 0x8462
   13ce0:	movw	r3, #34347	; 0x862b
   13ce4:	movw	r2, #783	; 0x30f
   13ce8:	movt	r0, #1
   13cec:	movt	r1, #1
   13cf0:	movt	r3, #1
   13cf4:	bl	124b4 <__assert_fail@plt>
   13cf8:	movw	r0, #38408	; 0x9608
   13cfc:	movw	r1, #33890	; 0x8462
   13d00:	movw	r3, #38087	; 0x94c7
   13d04:	movw	r2, #647	; 0x287
   13d08:	movt	r0, #1
   13d0c:	movt	r1, #1
   13d10:	movt	r3, #1
   13d14:	bl	124b4 <__assert_fail@plt>

00013d18 <flatcc_builder_start_buffer@@Base>:
   13d18:	push	{r4, r5, r6, r7, fp, lr}
   13d1c:	add	fp, sp, #16
   13d20:	mov	r5, r1
   13d24:	ldrh	r1, [r0, #128]	; 0x80
   13d28:	mov	r6, r3
   13d2c:	mov	r7, r2
   13d30:	mov	r4, r0
   13d34:	bl	13dd4 <flatcc_builder_start_buffer@@Base+0xbc>
   13d38:	mov	r1, r0
   13d3c:	mvn	r0, #0
   13d40:	cmp	r1, #0
   13d44:	popne	{r4, r5, r6, r7, fp, pc}
   13d48:	mov	r0, #1
   13d4c:	cmp	r5, #0
   13d50:	strh	r0, [r4, #128]	; 0x80
   13d54:	ldrh	r1, [r4, #132]	; 0x84
   13d58:	ldr	r2, [r4, #32]
   13d5c:	strh	r1, [r2, #34]	; 0x22
   13d60:	strh	r7, [r4, #132]	; 0x84
   13d64:	ldrh	r1, [r4, #164]	; 0xa4
   13d68:	ldr	r2, [r4, #32]
   13d6c:	strh	r1, [r2, #32]
   13d70:	strh	r6, [r4, #164]	; 0xa4
   13d74:	ldr	r1, [r4, #32]
   13d78:	ldr	r2, [r4, #144]	; 0x90
   13d7c:	str	r2, [r1, #20]
   13d80:	ldr	r1, [r4, #32]
   13d84:	ldr	r2, [r4, #152]	; 0x98
   13d88:	str	r2, [r1, #28]
   13d8c:	ldr	r3, [r4, #148]	; 0x94
   13d90:	ldr	r1, [r4, #32]
   13d94:	ldr	r2, [r4, #136]	; 0x88
   13d98:	ldr	r7, [r4, #168]	; 0xa8
   13d9c:	add	r6, r3, #1
   13da0:	str	r2, [r4, #144]	; 0x90
   13da4:	str	r6, [r4, #148]	; 0x94
   13da8:	str	r3, [r4, #152]	; 0x98
   13dac:	str	r7, [r1, #16]
   13db0:	movw	r1, #33360	; 0x8250
   13db4:	movt	r1, #1
   13db8:	movne	r1, r5
   13dbc:	ldr	r1, [r1]
   13dc0:	str	r1, [r4, #168]	; 0xa8
   13dc4:	ldr	r1, [r4, #32]
   13dc8:	strh	r0, [r1, #14]
   13dcc:	mov	r0, #0
   13dd0:	pop	{r4, r5, r6, r7, fp, pc}
   13dd4:	push	{r4, r5, r6, r7, fp, lr}
   13dd8:	add	fp, sp, #16
   13ddc:	sub	sp, sp, #8
   13de0:	mov	r5, r1
   13de4:	ldr	r1, [r0, #156]	; 0x9c
   13de8:	ldr	r2, [r0, #160]	; 0xa0
   13dec:	mov	r4, r0
   13df0:	add	r0, r1, #1
   13df4:	cmp	r1, r2
   13df8:	str	r0, [r4, #156]	; 0x9c
   13dfc:	bge	13e10 <flatcc_builder_start_buffer@@Base+0xf8>
   13e00:	ldr	r0, [r4, #32]
   13e04:	add	r0, r0, #36	; 0x24
   13e08:	str	r0, [r4, #32]
   13e0c:	b	13ea4 <flatcc_builder_start_buffer@@Base+0x18c>
   13e10:	ldr	r2, [r4, #176]	; 0xb0
   13e14:	mvn	r6, #0
   13e18:	cmp	r2, #1
   13e1c:	cmpge	r1, r2
   13e20:	bge	13edc <flatcc_builder_start_buffer@@Base+0x1c4>
   13e24:	add	r7, r0, r0, lsl #3
   13e28:	ldr	r0, [r4, #88]	; 0x58
   13e2c:	lsl	r2, r7, #2
   13e30:	cmp	r2, r0
   13e34:	bls	13e5c <flatcc_builder_start_buffer@@Base+0x144>
   13e38:	ldr	r0, [r4, #40]	; 0x28
   13e3c:	ldr	ip, [r4, #48]	; 0x30
   13e40:	mov	r3, #4
   13e44:	add	r1, r4, #84	; 0x54
   13e48:	str	r3, [sp]
   13e4c:	mov	r3, #0
   13e50:	blx	ip
   13e54:	cmp	r0, #0
   13e58:	bne	13ee8 <flatcc_builder_start_buffer@@Base+0x1d0>
   13e5c:	ldr	r1, [r4, #84]	; 0x54
   13e60:	mvn	r0, #35	; 0x23
   13e64:	add	r0, r0, r7, lsl #2
   13e68:	adds	r0, r0, r1
   13e6c:	str	r0, [r4, #32]
   13e70:	beq	13edc <flatcc_builder_start_buffer@@Base+0x1c4>
   13e74:	ldr	r1, [r4, #88]	; 0x58
   13e78:	movw	r3, #36409	; 0x8e39
   13e7c:	ldr	r2, [r4, #176]	; 0xb0
   13e80:	movt	r3, #14563	; 0x38e3
   13e84:	umull	r1, r3, r1, r3
   13e88:	lsr	r1, r3, #3
   13e8c:	cmp	r2, r3, lsr #3
   13e90:	mov	r3, r1
   13e94:	movlt	r3, r2
   13e98:	cmp	r2, #0
   13e9c:	movle	r3, r1
   13ea0:	str	r3, [r4, #160]	; 0xa0
   13ea4:	ldr	r1, [r4, #20]
   13ea8:	mvn	r3, #3
   13eac:	mov	r6, #0
   13eb0:	str	r1, [r0, #8]
   13eb4:	ldrh	r2, [r4, #130]	; 0x82
   13eb8:	strh	r2, [r0, #12]
   13ebc:	strh	r5, [r4, #130]	; 0x82
   13ec0:	ldr	r2, [r4, #28]
   13ec4:	stm	r0, {r2, r3}
   13ec8:	add	r0, r1, r2
   13ecc:	str	r6, [r4, #20]
   13ed0:	add	r0, r0, #7
   13ed4:	bic	r0, r0, #7
   13ed8:	str	r0, [r4, #28]
   13edc:	mov	r0, r6
   13ee0:	sub	sp, fp, #16
   13ee4:	pop	{r4, r5, r6, r7, fp, pc}
   13ee8:	movw	r0, #38408	; 0x9608
   13eec:	movw	r1, #33890	; 0x8462
   13ef0:	movw	r3, #37954	; 0x9442
   13ef4:	mov	r2, #308	; 0x134
   13ef8:	movt	r0, #1
   13efc:	movt	r1, #1
   13f00:	movt	r3, #1
   13f04:	bl	124b4 <__assert_fail@plt>

00013f08 <flatcc_builder_end_buffer@@Base>:
   13f08:	push	{r4, r5, r6, sl, fp, lr}
   13f0c:	add	fp, sp, #16
   13f10:	sub	sp, sp, #8
   13f14:	mov	r4, r0
   13f18:	ldr	r0, [r0, #32]
   13f1c:	ldrh	r0, [r0, #14]
   13f20:	cmp	r0, #1
   13f24:	bne	14018 <flatcc_builder_end_buffer@@Base+0x110>
   13f28:	mov	r3, r1
   13f2c:	ldr	r1, [r4, #152]	; 0x98
   13f30:	ldrh	r0, [r4, #164]	; 0xa4
   13f34:	ldrh	r2, [r4, #132]	; 0x84
   13f38:	cmp	r1, #0
   13f3c:	ldrh	r1, [r4, #128]	; 0x80
   13f40:	and	r0, r0, #2
   13f44:	orrne	r0, r0, #1
   13f48:	cmp	r1, r2
   13f4c:	movcc	r1, r2
   13f50:	strhcc	r2, [r4, #128]	; 0x80
   13f54:	str	r0, [sp, #4]
   13f58:	mov	r0, r4
   13f5c:	str	r1, [sp]
   13f60:	add	r1, r4, #168	; 0xa8
   13f64:	bl	139d4 <flatcc_builder_create_buffer@@Base>
   13f68:	mov	r6, r0
   13f6c:	cmp	r0, #0
   13f70:	beq	1400c <flatcc_builder_end_buffer@@Base+0x104>
   13f74:	ldr	r1, [r4, #32]
   13f78:	ldr	r0, [r4, #16]
   13f7c:	ldr	r2, [r4, #20]
   13f80:	ldr	r3, [r1, #20]
   13f84:	str	r3, [r4, #144]	; 0x90
   13f88:	ldr	r3, [r1, #28]
   13f8c:	str	r3, [r4, #152]	; 0x98
   13f90:	ldr	r3, [r1, #16]
   13f94:	str	r3, [r4, #168]	; 0xa8
   13f98:	ldrh	r1, [r1, #32]
   13f9c:	strh	r1, [r4, #164]	; 0xa4
   13fa0:	mov	r1, #0
   13fa4:	bl	12484 <memset@plt>
   13fa8:	ldr	r0, [r4, #32]
   13fac:	ldr	r1, [r4, #60]	; 0x3c
   13fb0:	ldr	r2, [r4, #64]	; 0x40
   13fb4:	ldr	r3, [r0, #8]
   13fb8:	str	r3, [r4, #20]
   13fbc:	ldr	r3, [r0]
   13fc0:	str	r3, [r4, #28]
   13fc4:	add	r1, r1, r3
   13fc8:	ldr	r5, [r0, #4]
   13fcc:	str	r1, [r4, #16]
   13fd0:	sub	r1, r2, r3
   13fd4:	cmp	r1, r5
   13fd8:	movhi	r1, r5
   13fdc:	str	r1, [r4, #24]
   13fe0:	ldrh	r1, [r4, #130]	; 0x82
   13fe4:	ldrh	r2, [r4, #128]	; 0x80
   13fe8:	cmp	r2, r1
   13fec:	strhcc	r1, [r4, #128]	; 0x80
   13ff0:	ldrh	r1, [r0, #12]
   13ff4:	sub	r0, r0, #36	; 0x24
   13ff8:	str	r0, [r4, #32]
   13ffc:	strh	r1, [r4, #130]	; 0x82
   14000:	ldr	r0, [r4, #156]	; 0x9c
   14004:	sub	r0, r0, #1
   14008:	str	r0, [r4, #156]	; 0x9c
   1400c:	mov	r0, r6
   14010:	sub	sp, fp, #16
   14014:	pop	{r4, r5, r6, sl, fp, pc}
   14018:	movw	r0, #34449	; 0x8691
   1401c:	movw	r1, #33890	; 0x8462
   14020:	movw	r3, #34493	; 0x86bd
   14024:	movw	r2, #838	; 0x346
   14028:	movt	r0, #1
   1402c:	movt	r1, #1
   14030:	movt	r3, #1
   14034:	bl	124b4 <__assert_fail@plt>

00014038 <flatcc_builder_start_struct@@Base>:
   14038:	push	{r4, r5, r6, r7, fp, lr}
   1403c:	add	fp, sp, #16
   14040:	sub	sp, sp, #8
   14044:	mov	r6, r1
   14048:	mov	r1, r2
   1404c:	mov	r4, r0
   14050:	bl	13dd4 <flatcc_builder_start_buffer@@Base+0xbc>
   14054:	mov	r5, #0
   14058:	cmp	r0, #0
   1405c:	bne	140d8 <flatcc_builder_start_struct@@Base+0xa0>
   14060:	ldr	r2, [r4, #32]
   14064:	mov	r0, #2
   14068:	mvn	r7, #3
   1406c:	strh	r0, [r2, #14]
   14070:	ldr	r1, [r4, #28]
   14074:	ldr	r3, [r4, #64]	; 0x40
   14078:	ldr	r0, [r4, #60]	; 0x3c
   1407c:	sub	r3, r3, r1
   14080:	add	r0, r0, r1
   14084:	cmn	r3, #4
   14088:	str	r0, [r4, #16]
   1408c:	movcs	r3, r7
   14090:	str	r3, [r4, #24]
   14094:	str	r7, [r2, #4]
   14098:	ldr	r7, [r4, #20]
   1409c:	add	r2, r7, r6
   140a0:	cmp	r2, r3
   140a4:	str	r2, [r4, #20]
   140a8:	bcc	14114 <flatcc_builder_start_struct@@Base+0xdc>
   140ac:	ldr	r0, [r4, #40]	; 0x28
   140b0:	ldr	r6, [r4, #48]	; 0x30
   140b4:	add	r1, r1, r2
   140b8:	mov	r3, #1
   140bc:	str	r3, [sp]
   140c0:	add	r2, r1, #1
   140c4:	add	r1, r4, #60	; 0x3c
   140c8:	mov	r3, #1
   140cc:	blx	r6
   140d0:	cmp	r0, #0
   140d4:	beq	140e4 <flatcc_builder_start_struct@@Base+0xac>
   140d8:	mov	r0, r5
   140dc:	sub	sp, fp, #16
   140e0:	pop	{r4, r5, r6, r7, fp, pc}
   140e4:	ldr	r1, [r4, #28]
   140e8:	ldr	r0, [r4, #60]	; 0x3c
   140ec:	ldr	r3, [r4, #64]	; 0x40
   140f0:	ldr	r2, [r4, #32]
   140f4:	add	r0, r0, r1
   140f8:	sub	r1, r3, r1
   140fc:	mvn	r3, #3
   14100:	cmn	r1, #4
   14104:	str	r0, [r4, #16]
   14108:	movcs	r1, r3
   1410c:	str	r1, [r4, #24]
   14110:	str	r3, [r2, #4]
   14114:	add	r5, r0, r7
   14118:	mov	r0, r5
   1411c:	sub	sp, fp, #16
   14120:	pop	{r4, r5, r6, r7, fp, pc}

00014124 <flatcc_builder_struct_edit@@Base>:
   14124:	ldr	r0, [r0, #16]
   14128:	bx	lr

0001412c <flatcc_builder_end_struct@@Base>:
   1412c:	push	{r4, r5, fp, lr}
   14130:	add	fp, sp, #8
   14134:	mov	r4, r0
   14138:	ldr	r0, [r0, #32]
   1413c:	ldrh	r0, [r0, #14]
   14140:	cmp	r0, #2
   14144:	bne	141e4 <flatcc_builder_end_struct@@Base+0xb8>
   14148:	ldrh	r3, [r4, #130]	; 0x82
   1414c:	ldr	r1, [r4, #16]
   14150:	ldr	r2, [r4, #20]
   14154:	mov	r0, r4
   14158:	bl	13bf0 <flatcc_builder_create_struct@@Base>
   1415c:	mov	r5, r0
   14160:	cmp	r0, #0
   14164:	beq	141dc <flatcc_builder_end_struct@@Base+0xb0>
   14168:	ldr	r0, [r4, #16]
   1416c:	ldr	r2, [r4, #20]
   14170:	mov	r1, #0
   14174:	bl	12484 <memset@plt>
   14178:	ldr	r0, [r4, #32]
   1417c:	ldr	r1, [r4, #60]	; 0x3c
   14180:	ldr	ip, [r4, #64]	; 0x40
   14184:	ldr	r3, [r0, #8]
   14188:	str	r3, [r4, #20]
   1418c:	ldr	r3, [r0]
   14190:	str	r3, [r4, #28]
   14194:	add	r1, r1, r3
   14198:	ldr	r2, [r0, #4]
   1419c:	str	r1, [r4, #16]
   141a0:	sub	r1, ip, r3
   141a4:	cmp	r1, r2
   141a8:	movhi	r1, r2
   141ac:	str	r1, [r4, #24]
   141b0:	ldrh	r1, [r4, #130]	; 0x82
   141b4:	ldrh	r2, [r4, #128]	; 0x80
   141b8:	cmp	r2, r1
   141bc:	strhcc	r1, [r4, #128]	; 0x80
   141c0:	ldrh	r1, [r0, #12]
   141c4:	sub	r0, r0, #36	; 0x24
   141c8:	str	r0, [r4, #32]
   141cc:	strh	r1, [r4, #130]	; 0x82
   141d0:	ldr	r0, [r4, #156]	; 0x9c
   141d4:	sub	r0, r0, #1
   141d8:	str	r0, [r4, #156]	; 0x9c
   141dc:	mov	r0, r5
   141e0:	pop	{r4, r5, fp, pc}
   141e4:	movw	r0, #34582	; 0x8716
   141e8:	movw	r1, #33890	; 0x8462
   141ec:	movw	r3, #34626	; 0x8742
   141f0:	mov	r2, #872	; 0x368
   141f4:	movt	r0, #1
   141f8:	movt	r1, #1
   141fc:	movt	r3, #1
   14200:	bl	124b4 <__assert_fail@plt>

00014204 <flatcc_builder_extend_vector@@Base>:
   14204:	push	{r4, r5, fp, lr}
   14208:	add	fp, sp, #8
   1420c:	sub	sp, sp, #8
   14210:	mov	r4, r0
   14214:	ldr	r0, [r0, #32]
   14218:	ldr	r2, [r0, #20]
   1421c:	adds	r2, r2, r1
   14220:	bcs	142e0 <flatcc_builder_extend_vector@@Base+0xdc>
   14224:	ldr	r3, [r0, #24]
   14228:	cmp	r2, r3
   1422c:	bhi	142e0 <flatcc_builder_extend_vector@@Base+0xdc>
   14230:	str	r2, [r0, #20]
   14234:	ldr	r2, [r4, #32]
   14238:	ldr	r5, [r4, #20]
   1423c:	ldr	r0, [r4, #24]
   14240:	ldr	r2, [r2, #16]
   14244:	mla	r1, r2, r1, r5
   14248:	cmp	r1, r0
   1424c:	str	r1, [r4, #20]
   14250:	bcs	14264 <flatcc_builder_extend_vector@@Base+0x60>
   14254:	ldr	r0, [r4, #16]
   14258:	add	r0, r0, r5
   1425c:	sub	sp, fp, #8
   14260:	pop	{r4, r5, fp, pc}
   14264:	ldr	r2, [r4, #28]
   14268:	ldr	r0, [r4, #40]	; 0x28
   1426c:	ldr	ip, [r4, #48]	; 0x30
   14270:	mov	r3, #1
   14274:	str	r3, [sp]
   14278:	mov	r3, #1
   1427c:	add	r1, r1, r2
   14280:	add	r2, r1, #1
   14284:	add	r1, r4, #60	; 0x3c
   14288:	blx	ip
   1428c:	mov	r1, r0
   14290:	mov	r0, #0
   14294:	cmp	r1, #0
   14298:	beq	142a4 <flatcc_builder_extend_vector@@Base+0xa0>
   1429c:	sub	sp, fp, #8
   142a0:	pop	{r4, r5, fp, pc}
   142a4:	ldr	r1, [r4, #28]
   142a8:	ldr	r0, [r4, #60]	; 0x3c
   142ac:	ldr	r3, [r4, #64]	; 0x40
   142b0:	ldr	r2, [r4, #32]
   142b4:	add	r0, r0, r1
   142b8:	sub	r1, r3, r1
   142bc:	mvn	r3, #3
   142c0:	cmn	r1, #4
   142c4:	str	r0, [r4, #16]
   142c8:	movcs	r1, r3
   142cc:	str	r1, [r4, #24]
   142d0:	str	r3, [r2, #4]
   142d4:	add	r0, r0, r5
   142d8:	sub	sp, fp, #8
   142dc:	pop	{r4, r5, fp, pc}
   142e0:	movw	r0, #38161	; 0x9511
   142e4:	movw	r1, #33890	; 0x8462
   142e8:	movw	r3, #38188	; 0x952c
   142ec:	mov	r2, #892	; 0x37c
   142f0:	movt	r0, #1
   142f4:	movt	r1, #1
   142f8:	movt	r3, #1
   142fc:	bl	124b4 <__assert_fail@plt>

00014300 <flatcc_builder_vector_push@@Base>:
   14300:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   14304:	add	fp, sp, #24
   14308:	sub	sp, sp, #8
   1430c:	mov	r5, r0
   14310:	ldr	r0, [r0, #32]
   14314:	mov	r8, r1
   14318:	ldrh	r1, [r0, #14]
   1431c:	cmp	r1, #4
   14320:	bne	1440c <flatcc_builder_vector_push@@Base+0x10c>
   14324:	ldr	r1, [r0, #20]
   14328:	ldr	r2, [r0, #24]
   1432c:	cmp	r1, r2
   14330:	bhi	1442c <flatcc_builder_vector_push@@Base+0x12c>
   14334:	add	r1, r1, #1
   14338:	str	r1, [r0, #20]
   1433c:	ldr	r1, [r5, #32]
   14340:	ldr	r4, [r5, #20]
   14344:	ldr	r0, [r5, #24]
   14348:	ldr	r6, [r1, #16]
   1434c:	add	r1, r4, r6
   14350:	cmp	r1, r0
   14354:	str	r1, [r5, #20]
   14358:	bcs	14384 <flatcc_builder_vector_push@@Base+0x84>
   1435c:	ldr	r0, [r5, #16]
   14360:	adds	r7, r0, r4
   14364:	beq	143fc <flatcc_builder_vector_push@@Base+0xfc>
   14368:	mov	r0, r7
   1436c:	mov	r1, r8
   14370:	mov	r2, r6
   14374:	bl	12400 <memcpy@plt>
   14378:	mov	r0, r7
   1437c:	sub	sp, fp, #24
   14380:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   14384:	ldr	r2, [r5, #28]
   14388:	ldr	r0, [r5, #40]	; 0x28
   1438c:	ldr	r7, [r5, #48]	; 0x30
   14390:	mov	r3, #1
   14394:	str	r3, [sp]
   14398:	mov	r3, #1
   1439c:	add	r1, r1, r2
   143a0:	add	r2, r1, #1
   143a4:	add	r1, r5, #60	; 0x3c
   143a8:	blx	r7
   143ac:	mov	r7, #0
   143b0:	cmp	r0, #0
   143b4:	beq	143c4 <flatcc_builder_vector_push@@Base+0xc4>
   143b8:	mov	r0, r7
   143bc:	sub	sp, fp, #24
   143c0:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   143c4:	ldr	r1, [r5, #28]
   143c8:	ldr	r0, [r5, #60]	; 0x3c
   143cc:	ldr	r3, [r5, #64]	; 0x40
   143d0:	ldr	r2, [r5, #32]
   143d4:	add	r0, r0, r1
   143d8:	sub	r1, r3, r1
   143dc:	mvn	r3, #3
   143e0:	cmn	r1, #4
   143e4:	str	r0, [r5, #16]
   143e8:	movcs	r1, r3
   143ec:	str	r1, [r5, #24]
   143f0:	str	r3, [r2, #4]
   143f4:	adds	r7, r0, r4
   143f8:	bne	14368 <flatcc_builder_vector_push@@Base+0x68>
   143fc:	mov	r7, #0
   14400:	mov	r0, r7
   14404:	sub	sp, fp, #24
   14408:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   1440c:	movw	r0, #34693	; 0x8785
   14410:	movw	r1, #33890	; 0x8462
   14414:	movw	r3, #34737	; 0x87b1
   14418:	movw	r2, #907	; 0x38b
   1441c:	movt	r0, #1
   14420:	movt	r1, #1
   14424:	movt	r3, #1
   14428:	bl	124b4 <__assert_fail@plt>
   1442c:	movw	r0, #34804	; 0x87f4
   14430:	movw	r1, #33890	; 0x8462
   14434:	movw	r3, #34737	; 0x87b1
   14438:	mov	r2, #908	; 0x38c
   1443c:	movt	r0, #1
   14440:	movt	r1, #1
   14444:	movt	r3, #1
   14448:	bl	124b4 <__assert_fail@plt>

0001444c <flatcc_builder_append_vector@@Base>:
   1444c:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   14450:	add	fp, sp, #24
   14454:	sub	sp, sp, #8
   14458:	mov	r6, r0
   1445c:	ldr	r0, [r0, #32]
   14460:	mov	r8, r1
   14464:	ldrh	r1, [r0, #14]
   14468:	cmp	r1, #4
   1446c:	bne	14580 <flatcc_builder_append_vector@@Base+0x134>
   14470:	ldr	r1, [r0, #20]
   14474:	mov	r5, r2
   14478:	adds	r1, r1, r2
   1447c:	bcs	14560 <flatcc_builder_append_vector@@Base+0x114>
   14480:	ldr	r2, [r0, #24]
   14484:	cmp	r1, r2
   14488:	bhi	14560 <flatcc_builder_append_vector@@Base+0x114>
   1448c:	str	r1, [r0, #20]
   14490:	ldr	r1, [r6, #32]
   14494:	ldr	r4, [r6, #20]
   14498:	ldr	r0, [r6, #24]
   1449c:	ldr	r9, [r1, #16]
   144a0:	mla	r1, r9, r5, r4
   144a4:	cmp	r1, r0
   144a8:	str	r1, [r6, #20]
   144ac:	bcs	144d8 <flatcc_builder_append_vector@@Base+0x8c>
   144b0:	ldr	r0, [r6, #16]
   144b4:	adds	r7, r0, r4
   144b8:	beq	14550 <flatcc_builder_append_vector@@Base+0x104>
   144bc:	mul	r2, r9, r5
   144c0:	mov	r0, r7
   144c4:	mov	r1, r8
   144c8:	bl	12400 <memcpy@plt>
   144cc:	mov	r0, r7
   144d0:	sub	sp, fp, #24
   144d4:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   144d8:	ldr	r2, [r6, #28]
   144dc:	ldr	r0, [r6, #40]	; 0x28
   144e0:	ldr	r7, [r6, #48]	; 0x30
   144e4:	mov	r3, #1
   144e8:	str	r3, [sp]
   144ec:	mov	r3, #1
   144f0:	add	r1, r1, r2
   144f4:	add	r2, r1, #1
   144f8:	add	r1, r6, #60	; 0x3c
   144fc:	blx	r7
   14500:	mov	r7, #0
   14504:	cmp	r0, #0
   14508:	beq	14518 <flatcc_builder_append_vector@@Base+0xcc>
   1450c:	mov	r0, r7
   14510:	sub	sp, fp, #24
   14514:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   14518:	ldr	r1, [r6, #28]
   1451c:	ldr	r0, [r6, #60]	; 0x3c
   14520:	ldr	r3, [r6, #64]	; 0x40
   14524:	ldr	r2, [r6, #32]
   14528:	add	r0, r0, r1
   1452c:	sub	r1, r3, r1
   14530:	mvn	r3, #3
   14534:	cmn	r1, #4
   14538:	str	r0, [r6, #16]
   1453c:	movcs	r1, r3
   14540:	str	r1, [r6, #24]
   14544:	str	r3, [r2, #4]
   14548:	adds	r7, r0, r4
   1454c:	bne	144bc <flatcc_builder_append_vector@@Base+0x70>
   14550:	mov	r7, #0
   14554:	mov	r0, r7
   14558:	sub	sp, fp, #24
   1455c:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   14560:	movw	r0, #38161	; 0x9511
   14564:	movw	r1, #33890	; 0x8462
   14568:	movw	r3, #38188	; 0x952c
   1456c:	mov	r2, #892	; 0x37c
   14570:	movt	r0, #1
   14574:	movt	r1, #1
   14578:	movt	r3, #1
   1457c:	bl	124b4 <__assert_fail@plt>
   14580:	movw	r0, #34693	; 0x8785
   14584:	movw	r1, #33890	; 0x8462
   14588:	movw	r3, #34865	; 0x8831
   1458c:	movw	r2, #915	; 0x393
   14590:	movt	r0, #1
   14594:	movt	r1, #1
   14598:	movt	r3, #1
   1459c:	bl	124b4 <__assert_fail@plt>

000145a0 <flatcc_builder_extend_offset_vector@@Base>:
   145a0:	push	{r4, r5, fp, lr}
   145a4:	add	fp, sp, #8
   145a8:	sub	sp, sp, #8
   145ac:	mov	r4, r0
   145b0:	ldr	r0, [r0, #32]
   145b4:	ldr	r2, [r0, #20]
   145b8:	adds	r2, r2, r1
   145bc:	cmpcc	r2, #1073741824	; 0x40000000
   145c0:	bcc	145e4 <flatcc_builder_extend_offset_vector@@Base+0x44>
   145c4:	movw	r0, #38161	; 0x9511
   145c8:	movw	r1, #33890	; 0x8462
   145cc:	movw	r3, #38188	; 0x952c
   145d0:	mov	r2, #892	; 0x37c
   145d4:	movt	r0, #1
   145d8:	movt	r1, #1
   145dc:	movt	r3, #1
   145e0:	bl	124b4 <__assert_fail@plt>
   145e4:	str	r2, [r0, #20]
   145e8:	ldr	r5, [r4, #20]
   145ec:	ldr	r0, [r4, #24]
   145f0:	add	r1, r5, r1, lsl #2
   145f4:	cmp	r1, r0
   145f8:	str	r1, [r4, #20]
   145fc:	bcs	14610 <flatcc_builder_extend_offset_vector@@Base+0x70>
   14600:	ldr	r0, [r4, #16]
   14604:	add	r0, r0, r5
   14608:	sub	sp, fp, #8
   1460c:	pop	{r4, r5, fp, pc}
   14610:	ldr	r2, [r4, #28]
   14614:	ldr	r0, [r4, #40]	; 0x28
   14618:	ldr	ip, [r4, #48]	; 0x30
   1461c:	mov	r3, #1
   14620:	str	r3, [sp]
   14624:	mov	r3, #1
   14628:	add	r1, r1, r2
   1462c:	add	r2, r1, #1
   14630:	add	r1, r4, #60	; 0x3c
   14634:	blx	ip
   14638:	mov	r1, r0
   1463c:	mov	r0, #0
   14640:	cmp	r1, #0
   14644:	beq	14650 <flatcc_builder_extend_offset_vector@@Base+0xb0>
   14648:	sub	sp, fp, #8
   1464c:	pop	{r4, r5, fp, pc}
   14650:	ldr	r1, [r4, #28]
   14654:	ldr	r0, [r4, #60]	; 0x3c
   14658:	ldr	r3, [r4, #64]	; 0x40
   1465c:	ldr	r2, [r4, #32]
   14660:	add	r0, r0, r1
   14664:	sub	r1, r3, r1
   14668:	mvn	r3, #3
   1466c:	cmn	r1, #4
   14670:	str	r0, [r4, #16]
   14674:	movcs	r1, r3
   14678:	str	r1, [r4, #24]
   1467c:	str	r3, [r2, #4]
   14680:	add	r0, r0, r5
   14684:	sub	sp, fp, #8
   14688:	pop	{r4, r5, fp, pc}

0001468c <flatcc_builder_offset_vector_push@@Base>:
   1468c:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   14690:	add	fp, sp, #24
   14694:	sub	sp, sp, #8
   14698:	mov	r6, r0
   1469c:	ldr	r0, [r0, #32]
   146a0:	mov	r8, r1
   146a4:	ldrh	r1, [r0, #14]
   146a8:	cmp	r1, #5
   146ac:	bne	1476c <flatcc_builder_offset_vector_push@@Base+0xe0>
   146b0:	ldr	r1, [r0, #20]
   146b4:	mov	r5, #0
   146b8:	cmn	r1, #-1073741823	; 0xc0000001
   146bc:	beq	14718 <flatcc_builder_offset_vector_push@@Base+0x8c>
   146c0:	add	r1, r1, #1
   146c4:	str	r1, [r0, #20]
   146c8:	ldr	r7, [r6, #20]
   146cc:	ldr	r0, [r6, #24]
   146d0:	add	r1, r7, #4
   146d4:	cmp	r1, r0
   146d8:	str	r1, [r6, #20]
   146dc:	bcs	146e8 <flatcc_builder_offset_vector_push@@Base+0x5c>
   146e0:	ldr	r0, [r6, #16]
   146e4:	b	14754 <flatcc_builder_offset_vector_push@@Base+0xc8>
   146e8:	ldr	r1, [r6, #28]
   146ec:	ldr	r0, [r6, #40]	; 0x28
   146f0:	ldr	r4, [r6, #48]	; 0x30
   146f4:	mov	r2, #1
   146f8:	mov	r3, #1
   146fc:	str	r2, [sp]
   14700:	add	r1, r7, r1
   14704:	add	r2, r1, #5
   14708:	add	r1, r6, #60	; 0x3c
   1470c:	blx	r4
   14710:	cmp	r0, #0
   14714:	beq	14724 <flatcc_builder_offset_vector_push@@Base+0x98>
   14718:	mov	r0, r5
   1471c:	sub	sp, fp, #24
   14720:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   14724:	ldr	r1, [r6, #28]
   14728:	ldr	r0, [r6, #60]	; 0x3c
   1472c:	ldr	r3, [r6, #64]	; 0x40
   14730:	ldr	r2, [r6, #32]
   14734:	add	r0, r0, r1
   14738:	sub	r1, r3, r1
   1473c:	mvn	r3, #3
   14740:	cmn	r1, #4
   14744:	str	r0, [r6, #16]
   14748:	movcs	r1, r3
   1474c:	str	r1, [r6, #24]
   14750:	str	r3, [r2, #4]
   14754:	adds	r0, r0, r7
   14758:	movne	r5, r0
   1475c:	strne	r8, [r0]
   14760:	mov	r0, r5
   14764:	sub	sp, fp, #24
   14768:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   1476c:	movw	r0, #34942	; 0x887e
   14770:	movw	r1, #33890	; 0x8462
   14774:	movw	r3, #34993	; 0x88b1
   14778:	movw	r2, #934	; 0x3a6
   1477c:	movt	r0, #1
   14780:	movt	r1, #1
   14784:	movt	r3, #1
   14788:	bl	124b4 <__assert_fail@plt>

0001478c <flatcc_builder_append_offset_vector@@Base>:
   1478c:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   14790:	add	fp, sp, #24
   14794:	sub	sp, sp, #8
   14798:	mov	r6, r0
   1479c:	ldr	r0, [r0, #32]
   147a0:	mov	r8, r1
   147a4:	ldrh	r1, [r0, #14]
   147a8:	cmp	r1, #5
   147ac:	bne	148b0 <flatcc_builder_append_offset_vector@@Base+0x124>
   147b0:	ldr	r1, [r0, #20]
   147b4:	mov	r5, r2
   147b8:	adds	r1, r1, r2
   147bc:	cmpcc	r1, #1073741824	; 0x40000000
   147c0:	bcc	147e4 <flatcc_builder_append_offset_vector@@Base+0x58>
   147c4:	movw	r0, #38161	; 0x9511
   147c8:	movw	r1, #33890	; 0x8462
   147cc:	movw	r3, #38188	; 0x952c
   147d0:	mov	r2, #892	; 0x37c
   147d4:	movt	r0, #1
   147d8:	movt	r1, #1
   147dc:	movt	r3, #1
   147e0:	bl	124b4 <__assert_fail@plt>
   147e4:	str	r1, [r0, #20]
   147e8:	ldr	r4, [r6, #20]
   147ec:	ldr	r0, [r6, #24]
   147f0:	add	r1, r4, r5, lsl #2
   147f4:	cmp	r1, r0
   147f8:	str	r1, [r6, #20]
   147fc:	bcs	14828 <flatcc_builder_append_offset_vector@@Base+0x9c>
   14800:	ldr	r0, [r6, #16]
   14804:	adds	r7, r0, r4
   14808:	beq	148a0 <flatcc_builder_append_offset_vector@@Base+0x114>
   1480c:	lsl	r2, r5, #2
   14810:	mov	r0, r7
   14814:	mov	r1, r8
   14818:	bl	12400 <memcpy@plt>
   1481c:	mov	r0, r7
   14820:	sub	sp, fp, #24
   14824:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   14828:	ldr	r2, [r6, #28]
   1482c:	ldr	r0, [r6, #40]	; 0x28
   14830:	ldr	r7, [r6, #48]	; 0x30
   14834:	mov	r3, #1
   14838:	str	r3, [sp]
   1483c:	mov	r3, #1
   14840:	add	r1, r1, r2
   14844:	add	r2, r1, #1
   14848:	add	r1, r6, #60	; 0x3c
   1484c:	blx	r7
   14850:	mov	r7, #0
   14854:	cmp	r0, #0
   14858:	beq	14868 <flatcc_builder_append_offset_vector@@Base+0xdc>
   1485c:	mov	r0, r7
   14860:	sub	sp, fp, #24
   14864:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   14868:	ldr	r1, [r6, #28]
   1486c:	ldr	r0, [r6, #60]	; 0x3c
   14870:	ldr	r3, [r6, #64]	; 0x40
   14874:	ldr	r2, [r6, #32]
   14878:	add	r0, r0, r1
   1487c:	sub	r1, r3, r1
   14880:	mvn	r3, #3
   14884:	cmn	r1, #4
   14888:	str	r0, [r6, #16]
   1488c:	movcs	r1, r3
   14890:	str	r1, [r6, #24]
   14894:	str	r3, [r2, #4]
   14898:	adds	r7, r0, r4
   1489c:	bne	1480c <flatcc_builder_append_offset_vector@@Base+0x80>
   148a0:	mov	r7, #0
   148a4:	mov	r0, r7
   148a8:	sub	sp, fp, #24
   148ac:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   148b0:	movw	r0, #34942	; 0x887e
   148b4:	movw	r1, #33890	; 0x8462
   148b8:	movw	r3, #35091	; 0x8913
   148bc:	mov	r2, #948	; 0x3b4
   148c0:	movt	r0, #1
   148c4:	movt	r1, #1
   148c8:	movt	r3, #1
   148cc:	bl	124b4 <__assert_fail@plt>

000148d0 <flatcc_builder_extend_string@@Base>:
   148d0:	push	{r4, r5, fp, lr}
   148d4:	add	fp, sp, #8
   148d8:	sub	sp, sp, #8
   148dc:	mov	r4, r0
   148e0:	ldr	r0, [r0, #32]
   148e4:	ldrh	r2, [r0, #14]
   148e8:	cmp	r2, #6
   148ec:	bne	149a4 <flatcc_builder_extend_string@@Base+0xd4>
   148f0:	ldr	r2, [r0, #20]
   148f4:	adds	r2, r2, r1
   148f8:	bcs	149c4 <flatcc_builder_extend_string@@Base+0xf4>
   148fc:	str	r2, [r0, #20]
   14900:	ldr	r5, [r4, #20]
   14904:	ldr	r0, [r4, #24]
   14908:	add	r1, r5, r1
   1490c:	cmp	r1, r0
   14910:	str	r1, [r4, #20]
   14914:	bcs	14928 <flatcc_builder_extend_string@@Base+0x58>
   14918:	ldr	r0, [r4, #16]
   1491c:	add	r0, r0, r5
   14920:	sub	sp, fp, #8
   14924:	pop	{r4, r5, fp, pc}
   14928:	ldr	r2, [r4, #28]
   1492c:	ldr	r0, [r4, #40]	; 0x28
   14930:	ldr	ip, [r4, #48]	; 0x30
   14934:	mov	r3, #1
   14938:	str	r3, [sp]
   1493c:	mov	r3, #1
   14940:	add	r1, r1, r2
   14944:	add	r2, r1, #1
   14948:	add	r1, r4, #60	; 0x3c
   1494c:	blx	ip
   14950:	mov	r1, r0
   14954:	mov	r0, #0
   14958:	cmp	r1, #0
   1495c:	beq	14968 <flatcc_builder_extend_string@@Base+0x98>
   14960:	sub	sp, fp, #8
   14964:	pop	{r4, r5, fp, pc}
   14968:	ldr	r1, [r4, #28]
   1496c:	ldr	r0, [r4, #60]	; 0x3c
   14970:	ldr	r3, [r4, #64]	; 0x40
   14974:	ldr	r2, [r4, #32]
   14978:	add	r0, r0, r1
   1497c:	sub	r1, r3, r1
   14980:	mvn	r3, #3
   14984:	cmn	r1, #4
   14988:	str	r0, [r4, #16]
   1498c:	movcs	r1, r3
   14990:	str	r1, [r4, #24]
   14994:	str	r3, [r2, #4]
   14998:	add	r0, r0, r5
   1499c:	sub	sp, fp, #8
   149a0:	pop	{r4, r5, fp, pc}
   149a4:	movw	r0, #35207	; 0x8987
   149a8:	movw	r1, #33890	; 0x8462
   149ac:	movw	r3, #35251	; 0x89b3
   149b0:	movw	r2, #957	; 0x3bd
   149b4:	movt	r0, #1
   149b8:	movt	r1, #1
   149bc:	movt	r3, #1
   149c0:	bl	124b4 <__assert_fail@plt>
   149c4:	movw	r0, #38161	; 0x9511
   149c8:	movw	r1, #33890	; 0x8462
   149cc:	movw	r3, #38188	; 0x952c
   149d0:	mov	r2, #892	; 0x37c
   149d4:	movt	r0, #1
   149d8:	movt	r1, #1
   149dc:	movt	r3, #1
   149e0:	bl	124b4 <__assert_fail@plt>

000149e4 <flatcc_builder_append_string@@Base>:
   149e4:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   149e8:	add	fp, sp, #24
   149ec:	sub	sp, sp, #8
   149f0:	mov	r6, r0
   149f4:	ldr	r0, [r0, #32]
   149f8:	mov	r8, r1
   149fc:	ldrh	r1, [r0, #14]
   14a00:	cmp	r1, #6
   14a04:	bne	14ae4 <flatcc_builder_append_string@@Base+0x100>
   14a08:	ldr	r1, [r0, #20]
   14a0c:	mov	r4, r2
   14a10:	adds	r1, r1, r2
   14a14:	bcs	14b04 <flatcc_builder_append_string@@Base+0x120>
   14a18:	str	r1, [r0, #20]
   14a1c:	ldr	r5, [r6, #20]
   14a20:	ldr	r0, [r6, #24]
   14a24:	add	r1, r5, r4
   14a28:	cmp	r1, r0
   14a2c:	str	r1, [r6, #20]
   14a30:	bcs	14a5c <flatcc_builder_append_string@@Base+0x78>
   14a34:	ldr	r0, [r6, #16]
   14a38:	adds	r7, r0, r5
   14a3c:	beq	14ad4 <flatcc_builder_append_string@@Base+0xf0>
   14a40:	mov	r0, r7
   14a44:	mov	r1, r8
   14a48:	mov	r2, r4
   14a4c:	bl	12400 <memcpy@plt>
   14a50:	mov	r0, r7
   14a54:	sub	sp, fp, #24
   14a58:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   14a5c:	ldr	r2, [r6, #28]
   14a60:	ldr	r0, [r6, #40]	; 0x28
   14a64:	ldr	r7, [r6, #48]	; 0x30
   14a68:	mov	r3, #1
   14a6c:	str	r3, [sp]
   14a70:	mov	r3, #1
   14a74:	add	r1, r1, r2
   14a78:	add	r2, r1, #1
   14a7c:	add	r1, r6, #60	; 0x3c
   14a80:	blx	r7
   14a84:	mov	r7, #0
   14a88:	cmp	r0, #0
   14a8c:	beq	14a9c <flatcc_builder_append_string@@Base+0xb8>
   14a90:	mov	r0, r7
   14a94:	sub	sp, fp, #24
   14a98:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   14a9c:	ldr	r1, [r6, #28]
   14aa0:	ldr	r0, [r6, #60]	; 0x3c
   14aa4:	ldr	r3, [r6, #64]	; 0x40
   14aa8:	ldr	r2, [r6, #32]
   14aac:	add	r0, r0, r1
   14ab0:	sub	r1, r3, r1
   14ab4:	mvn	r3, #3
   14ab8:	cmn	r1, #4
   14abc:	str	r0, [r6, #16]
   14ac0:	movcs	r1, r3
   14ac4:	str	r1, [r6, #24]
   14ac8:	str	r3, [r2, #4]
   14acc:	adds	r7, r0, r5
   14ad0:	bne	14a40 <flatcc_builder_append_string@@Base+0x5c>
   14ad4:	mov	r7, #0
   14ad8:	mov	r0, r7
   14adc:	sub	sp, fp, #24
   14ae0:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   14ae4:	movw	r0, #35207	; 0x8987
   14ae8:	movw	r1, #33890	; 0x8462
   14aec:	movw	r3, #35314	; 0x89f2
   14af0:	movw	r2, #966	; 0x3c6
   14af4:	movt	r0, #1
   14af8:	movt	r1, #1
   14afc:	movt	r3, #1
   14b00:	bl	124b4 <__assert_fail@plt>
   14b04:	movw	r0, #38161	; 0x9511
   14b08:	movw	r1, #33890	; 0x8462
   14b0c:	movw	r3, #38188	; 0x952c
   14b10:	mov	r2, #892	; 0x37c
   14b14:	movt	r0, #1
   14b18:	movt	r1, #1
   14b1c:	movt	r3, #1
   14b20:	bl	124b4 <__assert_fail@plt>

00014b24 <flatcc_builder_append_string_str@@Base>:
   14b24:	push	{r4, r5, fp, lr}
   14b28:	add	fp, sp, #8
   14b2c:	mov	r5, r0
   14b30:	mov	r0, r1
   14b34:	mov	r4, r1
   14b38:	bl	12460 <strlen@plt>
   14b3c:	mov	r2, r0
   14b40:	mov	r0, r5
   14b44:	mov	r1, r4
   14b48:	pop	{r4, r5, fp, lr}
   14b4c:	b	149e4 <flatcc_builder_append_string@@Base>

00014b50 <flatcc_builder_append_string_strn@@Base>:
   14b50:	push	{r4, r5, r6, sl, fp, lr}
   14b54:	add	fp, sp, #16
   14b58:	mov	r6, r0
   14b5c:	mov	r5, r1
   14b60:	mov	r0, r1
   14b64:	mov	r1, #0
   14b68:	mov	r4, r2
   14b6c:	bl	12490 <memchr@plt>
   14b70:	cmp	r0, #0
   14b74:	mov	r1, r5
   14b78:	subne	r4, r0, r5
   14b7c:	mov	r0, r6
   14b80:	mov	r2, r4
   14b84:	pop	{r4, r5, r6, sl, fp, lr}
   14b88:	b	149e4 <flatcc_builder_append_string@@Base>

00014b8c <flatcc_builder_truncate_vector@@Base>:
   14b8c:	push	{fp, lr}
   14b90:	mov	fp, sp
   14b94:	ldr	r2, [r0, #32]
   14b98:	ldrh	r3, [r2, #14]
   14b9c:	cmp	r3, #4
   14ba0:	bne	14be8 <flatcc_builder_truncate_vector@@Base+0x5c>
   14ba4:	ldr	r3, [r2, #20]
   14ba8:	cmp	r3, r1
   14bac:	bcc	14c08 <flatcc_builder_truncate_vector@@Base+0x7c>
   14bb0:	sub	r3, r3, r1
   14bb4:	str	r3, [r2, #20]
   14bb8:	ldr	r2, [r0, #32]
   14bbc:	ldr	r3, [r0, #20]
   14bc0:	ldr	ip, [r0, #16]
   14bc4:	ldr	r2, [r2, #16]
   14bc8:	mls	r3, r2, r1, r3
   14bcc:	mul	r2, r2, r1
   14bd0:	mov	r1, #0
   14bd4:	str	r3, [r0, #20]
   14bd8:	add	r0, ip, r3
   14bdc:	bl	12484 <memset@plt>
   14be0:	mov	r0, #0
   14be4:	pop	{fp, pc}
   14be8:	movw	r0, #34693	; 0x8785
   14bec:	movw	r1, #33890	; 0x8462
   14bf0:	movw	r3, #35391	; 0x8a3f
   14bf4:	movw	r2, #985	; 0x3d9
   14bf8:	movt	r0, #1
   14bfc:	movt	r1, #1
   14c00:	movt	r3, #1
   14c04:	bl	124b4 <__assert_fail@plt>
   14c08:	movw	r0, #35454	; 0x8a7e
   14c0c:	movw	r1, #33890	; 0x8462
   14c10:	movw	r3, #35391	; 0x8a3f
   14c14:	movw	r2, #986	; 0x3da
   14c18:	movt	r0, #1
   14c1c:	movt	r1, #1
   14c20:	movt	r3, #1
   14c24:	bl	124b4 <__assert_fail@plt>

00014c28 <flatcc_builder_truncate_offset_vector@@Base>:
   14c28:	push	{fp, lr}
   14c2c:	mov	fp, sp
   14c30:	ldr	r2, [r0, #32]
   14c34:	ldrh	r3, [r2, #14]
   14c38:	cmp	r3, #5
   14c3c:	bne	14c84 <flatcc_builder_truncate_offset_vector@@Base+0x5c>
   14c40:	ldr	r3, [r2, #20]
   14c44:	cmp	r3, r1
   14c48:	bcc	14ca4 <flatcc_builder_truncate_offset_vector@@Base+0x7c>
   14c4c:	sub	r3, r3, r1
   14c50:	str	r3, [r2, #20]
   14c54:	ldr	r2, [r0, #32]
   14c58:	ldr	r3, [r0, #20]
   14c5c:	ldr	ip, [r0, #16]
   14c60:	ldr	r2, [r2, #16]
   14c64:	mls	r3, r2, r1, r3
   14c68:	mul	r2, r2, r1
   14c6c:	mov	r1, #0
   14c70:	str	r3, [r0, #20]
   14c74:	add	r0, ip, r3
   14c78:	bl	12484 <memset@plt>
   14c7c:	mov	r0, #0
   14c80:	pop	{fp, pc}
   14c84:	movw	r0, #34942	; 0x887e
   14c88:	movw	r1, #33890	; 0x8462
   14c8c:	movw	r3, #35490	; 0x8aa2
   14c90:	movw	r2, #994	; 0x3e2
   14c94:	movt	r0, #1
   14c98:	movt	r1, #1
   14c9c:	movt	r3, #1
   14ca0:	bl	124b4 <__assert_fail@plt>
   14ca4:	movw	r0, #35560	; 0x8ae8
   14ca8:	movw	r1, #33890	; 0x8462
   14cac:	movw	r3, #35490	; 0x8aa2
   14cb0:	movw	r2, #995	; 0x3e3
   14cb4:	movt	r0, #1
   14cb8:	movt	r1, #1
   14cbc:	movt	r3, #1
   14cc0:	bl	124b4 <__assert_fail@plt>

00014cc4 <flatcc_builder_truncate_string@@Base>:
   14cc4:	push	{fp, lr}
   14cc8:	mov	fp, sp
   14ccc:	mov	r2, r1
   14cd0:	ldr	r1, [r0, #32]
   14cd4:	ldrh	r3, [r1, #14]
   14cd8:	cmp	r3, #6
   14cdc:	bne	14d18 <flatcc_builder_truncate_string@@Base+0x54>
   14ce0:	ldr	r3, [r1, #20]
   14ce4:	cmp	r3, r2
   14ce8:	bcc	14d38 <flatcc_builder_truncate_string@@Base+0x74>
   14cec:	sub	r3, r3, r2
   14cf0:	str	r3, [r1, #20]
   14cf4:	ldr	r3, [r0, #20]
   14cf8:	ldr	r1, [r0, #16]
   14cfc:	sub	r3, r3, r2
   14d00:	str	r3, [r0, #20]
   14d04:	add	r0, r1, r3
   14d08:	mov	r1, #0
   14d0c:	bl	12484 <memset@plt>
   14d10:	mov	r0, #0
   14d14:	pop	{fp, pc}
   14d18:	movw	r0, #35207	; 0x8987
   14d1c:	movw	r1, #33890	; 0x8462
   14d20:	movw	r3, #35619	; 0x8b23
   14d24:	movw	r2, #1003	; 0x3eb
   14d28:	movt	r0, #1
   14d2c:	movt	r1, #1
   14d30:	movt	r3, #1
   14d34:	bl	124b4 <__assert_fail@plt>
   14d38:	movw	r0, #35682	; 0x8b62
   14d3c:	movw	r1, #33890	; 0x8462
   14d40:	movw	r3, #35619	; 0x8b23
   14d44:	mov	r2, #1004	; 0x3ec
   14d48:	movt	r0, #1
   14d4c:	movt	r1, #1
   14d50:	movt	r3, #1
   14d54:	bl	124b4 <__assert_fail@plt>

00014d58 <flatcc_builder_start_vector@@Base>:
   14d58:	push	{r4, r5, r6, r7, fp, lr}
   14d5c:	add	fp, sp, #16
   14d60:	mov	r7, #4
   14d64:	cmp	r2, #4
   14d68:	mov	r6, r1
   14d6c:	mov	r5, r3
   14d70:	mov	r4, r0
   14d74:	movls	r2, r7
   14d78:	mov	r1, r2
   14d7c:	bl	13dd4 <flatcc_builder_start_buffer@@Base+0xbc>
   14d80:	mov	r1, r0
   14d84:	mvn	r0, #0
   14d88:	cmp	r1, #0
   14d8c:	popne	{r4, r5, r6, r7, fp, pc}
   14d90:	ldr	r0, [r4, #32]
   14d94:	str	r6, [r0, #16]
   14d98:	mov	r0, #0
   14d9c:	ldr	r1, [r4, #32]
   14da0:	str	r0, [r1, #20]
   14da4:	ldr	r1, [r4, #32]
   14da8:	str	r5, [r1, #24]
   14dac:	ldr	r1, [r4, #32]
   14db0:	strh	r7, [r1, #14]
   14db4:	ldr	r2, [r4, #28]
   14db8:	ldr	r3, [r4, #60]	; 0x3c
   14dbc:	ldr	r7, [r4, #64]	; 0x40
   14dc0:	add	r3, r3, r2
   14dc4:	sub	r2, r7, r2
   14dc8:	str	r3, [r4, #16]
   14dcc:	mvn	r3, #3
   14dd0:	cmn	r2, #4
   14dd4:	movcs	r2, r3
   14dd8:	str	r2, [r4, #24]
   14ddc:	str	r3, [r1, #4]
   14de0:	pop	{r4, r5, r6, r7, fp, pc}

00014de4 <flatcc_builder_start_offset_vector@@Base>:
   14de4:	push	{r4, r5, fp, lr}
   14de8:	add	fp, sp, #8
   14dec:	mov	r1, #4
   14df0:	mov	r4, r0
   14df4:	mov	r5, #4
   14df8:	bl	13dd4 <flatcc_builder_start_buffer@@Base+0xbc>
   14dfc:	mov	r1, r0
   14e00:	mvn	r0, #0
   14e04:	cmp	r1, #0
   14e08:	popne	{r4, r5, fp, pc}
   14e0c:	ldr	r0, [r4, #32]
   14e10:	mov	r2, #5
   14e14:	str	r5, [r0, #16]
   14e18:	mov	r0, #0
   14e1c:	ldr	r1, [r4, #32]
   14e20:	str	r0, [r1, #20]
   14e24:	ldr	r1, [r4, #32]
   14e28:	strh	r2, [r1, #14]
   14e2c:	ldr	r2, [r4, #28]
   14e30:	ldr	r3, [r4, #60]	; 0x3c
   14e34:	ldr	r5, [r4, #64]	; 0x40
   14e38:	add	r3, r3, r2
   14e3c:	sub	r2, r5, r2
   14e40:	str	r3, [r4, #16]
   14e44:	mvn	r3, #3
   14e48:	cmn	r2, #4
   14e4c:	movcs	r2, r3
   14e50:	str	r2, [r4, #24]
   14e54:	str	r3, [r1, #4]
   14e58:	pop	{r4, r5, fp, pc}

00014e5c <flatcc_builder_create_offset_vector@@Base>:
   14e5c:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   14e60:	add	fp, sp, #24
   14e64:	sub	sp, sp, #8
   14e68:	mov	r8, r1
   14e6c:	mov	r1, #4
   14e70:	mov	r6, r2
   14e74:	mov	r4, r0
   14e78:	mov	r5, #4
   14e7c:	bl	13dd4 <flatcc_builder_start_buffer@@Base+0xbc>
   14e80:	mov	r7, #0
   14e84:	cmp	r0, #0
   14e88:	beq	14e98 <flatcc_builder_create_offset_vector@@Base+0x3c>
   14e8c:	mov	r0, r7
   14e90:	sub	sp, fp, #24
   14e94:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   14e98:	ldr	r0, [r4, #32]
   14e9c:	mov	r1, #0
   14ea0:	str	r5, [r0, #16]
   14ea4:	ldr	r0, [r4, #32]
   14ea8:	str	r1, [r0, #20]
   14eac:	mov	r1, #5
   14eb0:	ldr	r0, [r4, #32]
   14eb4:	strh	r1, [r0, #14]
   14eb8:	ldr	r1, [r4, #28]
   14ebc:	ldr	r2, [r4, #60]	; 0x3c
   14ec0:	ldr	r3, [r4, #64]	; 0x40
   14ec4:	add	r2, r2, r1
   14ec8:	sub	r1, r3, r1
   14ecc:	str	r2, [r4, #16]
   14ed0:	mvn	r2, #3
   14ed4:	cmn	r1, #4
   14ed8:	movcs	r1, r2
   14edc:	str	r1, [r4, #24]
   14ee0:	str	r2, [r0, #4]
   14ee4:	ldr	r1, [r0, #20]
   14ee8:	adds	r1, r1, r6
   14eec:	cmpcc	r1, #1073741824	; 0x40000000
   14ef0:	bcc	14f14 <flatcc_builder_create_offset_vector@@Base+0xb8>
   14ef4:	movw	r0, #38161	; 0x9511
   14ef8:	movw	r1, #33890	; 0x8462
   14efc:	movw	r3, #38188	; 0x952c
   14f00:	mov	r2, #892	; 0x37c
   14f04:	movt	r0, #1
   14f08:	movt	r1, #1
   14f0c:	movt	r3, #1
   14f10:	bl	124b4 <__assert_fail@plt>
   14f14:	str	r1, [r0, #20]
   14f18:	ldr	r5, [r4, #20]
   14f1c:	ldr	r0, [r4, #24]
   14f20:	add	r1, r5, r6, lsl #2
   14f24:	cmp	r1, r0
   14f28:	str	r1, [r4, #20]
   14f2c:	bcs	15000 <flatcc_builder_create_offset_vector@@Base+0x1a4>
   14f30:	ldr	r0, [r4, #16]
   14f34:	adds	r0, r0, r5
   14f38:	beq	1506c <flatcc_builder_create_offset_vector@@Base+0x210>
   14f3c:	lsl	r2, r6, #2
   14f40:	mov	r1, r8
   14f44:	bl	12400 <memcpy@plt>
   14f48:	ldr	r0, [r4, #32]
   14f4c:	ldrh	r1, [r0, #14]
   14f50:	cmp	r1, #5
   14f54:	bne	1507c <flatcc_builder_create_offset_vector@@Base+0x220>
   14f58:	ldr	r2, [r0, #20]
   14f5c:	ldr	r1, [r4, #16]
   14f60:	mov	r0, r4
   14f64:	mov	r3, #0
   14f68:	mov	r7, #0
   14f6c:	bl	160e4 <flatcc_builder_create_offset_vector_direct@@Base+0x8>
   14f70:	cmp	r0, #0
   14f74:	beq	14e8c <flatcc_builder_create_offset_vector@@Base+0x30>
   14f78:	mov	r5, r0
   14f7c:	ldr	r0, [r4, #16]
   14f80:	ldr	r2, [r4, #20]
   14f84:	mov	r1, #0
   14f88:	bl	12484 <memset@plt>
   14f8c:	ldr	r0, [r4, #32]
   14f90:	ldr	r1, [r4, #60]	; 0x3c
   14f94:	ldr	r2, [r4, #64]	; 0x40
   14f98:	ldr	r3, [r0, #8]
   14f9c:	str	r3, [r4, #20]
   14fa0:	ldr	r3, [r0]
   14fa4:	str	r3, [r4, #28]
   14fa8:	add	r1, r1, r3
   14fac:	ldr	r7, [r0, #4]
   14fb0:	str	r1, [r4, #16]
   14fb4:	sub	r1, r2, r3
   14fb8:	cmp	r1, r7
   14fbc:	movhi	r1, r7
   14fc0:	mov	r7, r5
   14fc4:	str	r1, [r4, #24]
   14fc8:	ldrh	r1, [r4, #130]	; 0x82
   14fcc:	ldrh	r2, [r4, #128]	; 0x80
   14fd0:	cmp	r2, r1
   14fd4:	strhcc	r1, [r4, #128]	; 0x80
   14fd8:	ldrh	r1, [r0, #12]
   14fdc:	sub	r0, r0, #36	; 0x24
   14fe0:	str	r0, [r4, #32]
   14fe4:	strh	r1, [r4, #130]	; 0x82
   14fe8:	ldr	r0, [r4, #156]	; 0x9c
   14fec:	sub	r0, r0, #1
   14ff0:	str	r0, [r4, #156]	; 0x9c
   14ff4:	mov	r0, r7
   14ff8:	sub	sp, fp, #24
   14ffc:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   15000:	ldr	r2, [r4, #28]
   15004:	ldr	r0, [r4, #40]	; 0x28
   15008:	ldr	r7, [r4, #48]	; 0x30
   1500c:	mov	r3, #1
   15010:	str	r3, [sp]
   15014:	mov	r3, #1
   15018:	add	r1, r1, r2
   1501c:	add	r2, r1, #1
   15020:	add	r1, r4, #60	; 0x3c
   15024:	blx	r7
   15028:	mov	r7, #0
   1502c:	cmp	r0, #0
   15030:	bne	14e8c <flatcc_builder_create_offset_vector@@Base+0x30>
   15034:	ldr	r1, [r4, #28]
   15038:	ldr	r0, [r4, #60]	; 0x3c
   1503c:	ldr	r3, [r4, #64]	; 0x40
   15040:	ldr	r2, [r4, #32]
   15044:	add	r0, r0, r1
   15048:	sub	r1, r3, r1
   1504c:	mvn	r3, #3
   15050:	cmn	r1, #4
   15054:	str	r0, [r4, #16]
   15058:	movcs	r1, r3
   1505c:	str	r1, [r4, #24]
   15060:	str	r3, [r2, #4]
   15064:	adds	r0, r0, r5
   15068:	bne	14f3c <flatcc_builder_create_offset_vector@@Base+0xe0>
   1506c:	mov	r7, #0
   15070:	mov	r0, r7
   15074:	sub	sp, fp, #24
   15078:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   1507c:	movw	r0, #34942	; 0x887e
   15080:	movw	r1, #33890	; 0x8462
   15084:	movw	r3, #36525	; 0x8ead
   15088:	movw	r2, #1480	; 0x5c8
   1508c:	movt	r0, #1
   15090:	movt	r1, #1
   15094:	movt	r3, #1
   15098:	bl	124b4 <__assert_fail@plt>

0001509c <flatcc_builder_end_offset_vector@@Base>:
   1509c:	push	{r4, r5, fp, lr}
   150a0:	add	fp, sp, #8
   150a4:	mov	r4, r0
   150a8:	ldr	r0, [r0, #32]
   150ac:	ldrh	r1, [r0, #14]
   150b0:	cmp	r1, #5
   150b4:	bne	15154 <flatcc_builder_end_offset_vector@@Base+0xb8>
   150b8:	ldr	r2, [r0, #20]
   150bc:	ldr	r1, [r4, #16]
   150c0:	mov	r0, r4
   150c4:	mov	r3, #0
   150c8:	bl	160e4 <flatcc_builder_create_offset_vector_direct@@Base+0x8>
   150cc:	mov	r5, r0
   150d0:	cmp	r0, #0
   150d4:	beq	1514c <flatcc_builder_end_offset_vector@@Base+0xb0>
   150d8:	ldr	r0, [r4, #16]
   150dc:	ldr	r2, [r4, #20]
   150e0:	mov	r1, #0
   150e4:	bl	12484 <memset@plt>
   150e8:	ldr	r0, [r4, #32]
   150ec:	ldr	r1, [r4, #60]	; 0x3c
   150f0:	ldr	ip, [r4, #64]	; 0x40
   150f4:	ldr	r3, [r0, #8]
   150f8:	str	r3, [r4, #20]
   150fc:	ldr	r3, [r0]
   15100:	str	r3, [r4, #28]
   15104:	add	r1, r1, r3
   15108:	ldr	r2, [r0, #4]
   1510c:	str	r1, [r4, #16]
   15110:	sub	r1, ip, r3
   15114:	cmp	r1, r2
   15118:	movhi	r1, r2
   1511c:	str	r1, [r4, #24]
   15120:	ldrh	r1, [r4, #130]	; 0x82
   15124:	ldrh	r2, [r4, #128]	; 0x80
   15128:	cmp	r2, r1
   1512c:	strhcc	r1, [r4, #128]	; 0x80
   15130:	ldrh	r1, [r0, #12]
   15134:	sub	r0, r0, #36	; 0x24
   15138:	str	r0, [r4, #32]
   1513c:	strh	r1, [r4, #130]	; 0x82
   15140:	ldr	r0, [r4, #156]	; 0x9c
   15144:	sub	r0, r0, #1
   15148:	str	r0, [r4, #156]	; 0x9c
   1514c:	mov	r0, r5
   15150:	pop	{r4, r5, fp, pc}
   15154:	movw	r0, #34942	; 0x887e
   15158:	movw	r1, #33890	; 0x8462
   1515c:	movw	r3, #36525	; 0x8ead
   15160:	movw	r2, #1480	; 0x5c8
   15164:	movt	r0, #1
   15168:	movt	r1, #1
   1516c:	movt	r3, #1
   15170:	bl	124b4 <__assert_fail@plt>

00015174 <flatcc_builder_start_string@@Base>:
   15174:	push	{r4, r5, fp, lr}
   15178:	add	fp, sp, #8
   1517c:	mov	r1, #1
   15180:	mov	r4, r0
   15184:	mov	r5, #1
   15188:	bl	13dd4 <flatcc_builder_start_buffer@@Base+0xbc>
   1518c:	mov	r1, r0
   15190:	mvn	r0, #0
   15194:	cmp	r1, #0
   15198:	popne	{r4, r5, fp, pc}
   1519c:	ldr	r0, [r4, #32]
   151a0:	mov	r2, #6
   151a4:	str	r5, [r0, #16]
   151a8:	mov	r0, #0
   151ac:	ldr	r1, [r4, #32]
   151b0:	str	r0, [r1, #20]
   151b4:	ldr	r1, [r4, #32]
   151b8:	strh	r2, [r1, #14]
   151bc:	ldr	r2, [r4, #28]
   151c0:	ldr	r3, [r4, #60]	; 0x3c
   151c4:	ldr	r5, [r4, #64]	; 0x40
   151c8:	add	r3, r3, r2
   151cc:	sub	r2, r5, r2
   151d0:	str	r3, [r4, #16]
   151d4:	mvn	r3, #3
   151d8:	cmn	r2, #4
   151dc:	movcs	r2, r3
   151e0:	str	r2, [r4, #24]
   151e4:	str	r3, [r1, #4]
   151e8:	pop	{r4, r5, fp, pc}

000151ec <flatcc_builder_reserve_table@@Base>:
   151ec:	push	{r4, r5, r6, sl, fp, lr}
   151f0:	add	fp, sp, #16
   151f4:	sub	sp, sp, #8
   151f8:	cmn	r1, #1
   151fc:	ble	152d0 <flatcc_builder_reserve_table@@Base+0xe4>
   15200:	mov	r4, r0
   15204:	ldr	r0, [r0, #32]
   15208:	mov	r5, r1
   1520c:	ldr	r1, [r4, #56]	; 0x38
   15210:	ldrh	r2, [r0, #28]
   15214:	ldr	r0, [r0, #16]
   15218:	add	r6, r0, r2, lsl #1
   1521c:	add	r0, r6, r5, lsl #1
   15220:	add	r2, r0, #4
   15224:	cmp	r2, r1
   15228:	bls	15250 <flatcc_builder_reserve_table@@Base+0x64>
   1522c:	ldr	r0, [r4, #40]	; 0x28
   15230:	ldr	ip, [r4, #48]	; 0x30
   15234:	mov	r3, #0
   15238:	add	r1, r4, #52	; 0x34
   1523c:	str	r3, [sp]
   15240:	mov	r3, #1
   15244:	blx	ip
   15248:	cmp	r0, #0
   1524c:	bne	152f0 <flatcc_builder_reserve_table@@Base+0x104>
   15250:	ldr	r0, [r4, #52]	; 0x34
   15254:	adds	r0, r0, r6
   15258:	str	r0, [r4, #4]
   1525c:	mvneq	r0, #0
   15260:	subeq	sp, fp, #16
   15264:	popeq	{r4, r5, r6, sl, fp, pc}
   15268:	add	r0, r0, #4
   1526c:	lsl	r1, r5, #1
   15270:	str	r0, [r4, #4]
   15274:	ldr	r0, [r4, #32]
   15278:	ldr	r3, [r4, #80]	; 0x50
   1527c:	ldr	r5, [r0, #20]
   15280:	orr	r0, r1, #1
   15284:	add	r2, r5, r0
   15288:	cmp	r2, r3
   1528c:	bls	152b4 <flatcc_builder_reserve_table@@Base+0xc8>
   15290:	ldr	r0, [r4, #40]	; 0x28
   15294:	ldr	r6, [r4, #48]	; 0x30
   15298:	mov	r3, #3
   1529c:	add	r1, r4, #76	; 0x4c
   152a0:	str	r3, [sp]
   152a4:	mov	r3, #0
   152a8:	blx	r6
   152ac:	cmp	r0, #0
   152b0:	bne	152f0 <flatcc_builder_reserve_table@@Base+0x104>
   152b4:	ldr	r0, [r4, #76]	; 0x4c
   152b8:	adds	r0, r0, r5
   152bc:	str	r0, [r4]
   152c0:	mov	r0, #0
   152c4:	mvneq	r0, #0
   152c8:	sub	sp, fp, #16
   152cc:	pop	{r4, r5, r6, sl, fp, pc}
   152d0:	movw	r0, #35781	; 0x8bc5
   152d4:	movw	r1, #33890	; 0x8462
   152d8:	movw	r3, #35716	; 0x8b84
   152dc:	movw	r2, #1065	; 0x429
   152e0:	movt	r0, #1
   152e4:	movt	r1, #1
   152e8:	movt	r3, #1
   152ec:	bl	124b4 <__assert_fail@plt>
   152f0:	movw	r0, #38408	; 0x9608
   152f4:	movw	r1, #33890	; 0x8462
   152f8:	movw	r3, #37954	; 0x9442
   152fc:	mov	r2, #308	; 0x134
   15300:	movt	r0, #1
   15304:	movt	r1, #1
   15308:	movt	r3, #1
   1530c:	bl	124b4 <__assert_fail@plt>

00015310 <flatcc_builder_start_table@@Base>:
   15310:	push	{r4, r5, r6, r7, fp, lr}
   15314:	add	fp, sp, #16
   15318:	sub	sp, sp, #8
   1531c:	mov	r6, r1
   15320:	mov	r1, #4
   15324:	mov	r4, r0
   15328:	bl	13dd4 <flatcc_builder_start_buffer@@Base+0xbc>
   1532c:	mvn	r5, #0
   15330:	cmp	r0, #0
   15334:	beq	15344 <flatcc_builder_start_table@@Base+0x34>
   15338:	mov	r0, r5
   1533c:	sub	sp, fp, #16
   15340:	pop	{r4, r5, r6, r7, fp, pc}
   15344:	mov	r1, r4
   15348:	ldr	r2, [r4, #4]
   1534c:	ldr	r3, [r4, #32]
   15350:	ldr	r0, [r1, #52]!	; 0x34
   15354:	sub	r0, r2, r0
   15358:	str	r0, [r3, #16]
   1535c:	ldr	r0, [r4]
   15360:	ldr	r3, [r4, #76]	; 0x4c
   15364:	ldr	r2, [r4, #32]
   15368:	sub	r0, r0, r3
   1536c:	mov	r3, #0
   15370:	str	r0, [r2, #20]
   15374:	ldr	r0, [r4, #12]
   15378:	ldr	r2, [r4, #32]
   1537c:	str	r0, [r2, #24]
   15380:	ldr	r0, [r4, #32]
   15384:	ldrh	r2, [r4, #8]
   15388:	strh	r2, [r0, #28]
   1538c:	movw	r0, #15186	; 0x3b52
   15390:	strh	r3, [r4, #8]
   15394:	mov	r2, #3
   15398:	movt	r0, #12137	; 0x2f69
   1539c:	str	r0, [r4, #12]
   153a0:	ldr	r0, [r4, #32]
   153a4:	strh	r2, [r0, #14]
   153a8:	ldrh	r2, [r0, #28]
   153ac:	ldr	r0, [r0, #16]
   153b0:	add	r7, r0, r2, lsl #1
   153b4:	add	r0, r7, r6, lsl #1
   153b8:	add	r2, r0, #4
   153bc:	ldr	r0, [r4, #56]	; 0x38
   153c0:	cmp	r2, r0
   153c4:	bls	153e4 <flatcc_builder_start_table@@Base+0xd4>
   153c8:	ldr	r0, [r4, #40]	; 0x28
   153cc:	ldr	ip, [r4, #48]	; 0x30
   153d0:	str	r3, [sp]
   153d4:	mov	r3, #1
   153d8:	blx	ip
   153dc:	cmp	r0, #0
   153e0:	bne	15490 <flatcc_builder_start_table@@Base+0x180>
   153e4:	ldr	r0, [r4, #52]	; 0x34
   153e8:	adds	r0, r0, r7
   153ec:	str	r0, [r4, #4]
   153f0:	beq	15338 <flatcc_builder_start_table@@Base+0x28>
   153f4:	add	r0, r0, #4
   153f8:	lsl	r1, r6, #1
   153fc:	str	r0, [r4, #4]
   15400:	ldr	r0, [r4, #32]
   15404:	ldr	r3, [r4, #80]	; 0x50
   15408:	ldr	r6, [r0, #20]
   1540c:	orr	r0, r1, #1
   15410:	add	r2, r6, r0
   15414:	cmp	r2, r3
   15418:	bls	15440 <flatcc_builder_start_table@@Base+0x130>
   1541c:	ldr	r0, [r4, #40]	; 0x28
   15420:	ldr	r7, [r4, #48]	; 0x30
   15424:	mov	r3, #3
   15428:	add	r1, r4, #76	; 0x4c
   1542c:	str	r3, [sp]
   15430:	mov	r3, #0
   15434:	blx	r7
   15438:	cmp	r0, #0
   1543c:	bne	15490 <flatcc_builder_start_table@@Base+0x180>
   15440:	ldr	r0, [r4, #76]	; 0x4c
   15444:	adds	r0, r0, r6
   15448:	str	r0, [r4]
   1544c:	beq	15338 <flatcc_builder_start_table@@Base+0x28>
   15450:	ldr	r0, [r4, #28]
   15454:	ldr	r2, [r4, #60]	; 0x3c
   15458:	ldr	r3, [r4, #64]	; 0x40
   1545c:	ldr	r1, [r4, #32]
   15460:	mov	r5, #0
   15464:	add	r2, r2, r0
   15468:	sub	r0, r3, r0
   1546c:	str	r2, [r4, #16]
   15470:	movw	r2, #65532	; 0xfffc
   15474:	cmp	r0, r2
   15478:	movcs	r0, r2
   1547c:	str	r0, [r4, #24]
   15480:	str	r2, [r1, #4]
   15484:	mov	r0, r5
   15488:	sub	sp, fp, #16
   1548c:	pop	{r4, r5, r6, r7, fp, pc}
   15490:	movw	r0, #38408	; 0x9608
   15494:	movw	r1, #33890	; 0x8462
   15498:	movw	r3, #37954	; 0x9442
   1549c:	mov	r2, #308	; 0x134
   154a0:	movt	r0, #1
   154a4:	movt	r1, #1
   154a8:	movt	r3, #1
   154ac:	bl	124b4 <__assert_fail@plt>

000154b0 <flatcc_builder_create_vtable@@Base>:
   154b0:	push	{r4, r5, fp, lr}
   154b4:	add	fp, sp, #8
   154b8:	sub	sp, sp, #80	; 0x50
   154bc:	mov	r3, r2
   154c0:	mov	r2, #0
   154c4:	mov	r4, r0
   154c8:	cmp	r3, #0
   154cc:	str	r2, [sp, #12]
   154d0:	str	r2, [sp, #8]
   154d4:	movne	r2, #1
   154d8:	strne	r1, [sp, #16]
   154dc:	strne	r3, [sp, #8]
   154e0:	strne	r3, [sp, #20]
   154e4:	strne	r2, [sp, #12]
   154e8:	ldr	r0, [r4, #152]	; 0x98
   154ec:	cmp	r0, #0
   154f0:	bne	15500 <flatcc_builder_create_vtable@@Base+0x50>
   154f4:	ldr	r0, [r4, #180]	; 0xb4
   154f8:	cmp	r0, #0
   154fc:	beq	1554c <flatcc_builder_create_vtable@@Base+0x9c>
   15500:	cmp	r3, #0
   15504:	beq	15590 <flatcc_builder_create_vtable@@Base+0xe0>
   15508:	ldr	r0, [r4, #136]	; 0x88
   1550c:	ldr	ip, [r4, #44]	; 0x2c
   15510:	add	r1, sp, #8
   15514:	add	r1, r1, #8
   15518:	sub	r5, r0, r3
   1551c:	ldr	r0, [r4, #36]	; 0x24
   15520:	str	r3, [sp]
   15524:	mov	r3, r5
   15528:	blx	ip
   1552c:	cmp	r0, #0
   15530:	bne	155b0 <flatcc_builder_create_vtable@@Base+0x100>
   15534:	cmp	r5, #0
   15538:	str	r5, [r4, #136]	; 0x88
   1553c:	beq	15584 <flatcc_builder_create_vtable@@Base+0xd4>
   15540:	add	r0, r5, #1
   15544:	sub	sp, fp, #8
   15548:	pop	{r4, r5, fp, pc}
   1554c:	ldr	r5, [r4, #140]	; 0x8c
   15550:	ldr	r0, [r4, #36]	; 0x24
   15554:	ldr	ip, [r4, #44]	; 0x2c
   15558:	add	r1, r5, r3
   1555c:	str	r1, [r4, #140]	; 0x8c
   15560:	add	r1, sp, #8
   15564:	str	r3, [sp]
   15568:	mov	r3, r5
   1556c:	add	r1, r1, #8
   15570:	blx	ip
   15574:	cmp	r0, #0
   15578:	bne	155d0 <flatcc_builder_create_vtable@@Base+0x120>
   1557c:	adds	r0, r5, #1
   15580:	bne	15544 <flatcc_builder_create_vtable@@Base+0x94>
   15584:	mov	r0, #0
   15588:	sub	sp, fp, #8
   1558c:	pop	{r4, r5, fp, pc}
   15590:	movw	r0, #38408	; 0x9608
   15594:	movw	r1, #33890	; 0x8462
   15598:	movw	r3, #38087	; 0x94c7
   1559c:	movw	r2, #647	; 0x287
   155a0:	movt	r0, #1
   155a4:	movt	r1, #1
   155a8:	movt	r3, #1
   155ac:	bl	124b4 <__assert_fail@plt>
   155b0:	movw	r0, #38408	; 0x9608
   155b4:	movw	r1, #33890	; 0x8462
   155b8:	movw	r3, #38087	; 0x94c7
   155bc:	movw	r2, #651	; 0x28b
   155c0:	movt	r0, #1
   155c4:	movt	r1, #1
   155c8:	movt	r3, #1
   155cc:	bl	124b4 <__assert_fail@plt>
   155d0:	movw	r0, #38408	; 0x9608
   155d4:	movw	r1, #33890	; 0x8462
   155d8:	movw	r3, #38275	; 0x9583
   155dc:	movw	r2, #677	; 0x2a5
   155e0:	movt	r0, #1
   155e4:	movt	r1, #1
   155e8:	movt	r3, #1
   155ec:	bl	124b4 <__assert_fail@plt>

000155f0 <flatcc_builder_create_cached_vtable@@Base>:
   155f0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   155f4:	add	fp, sp, #28
   155f8:	sub	sp, sp, #20
   155fc:	mov	sl, r0
   15600:	ldr	r0, [r0, #116]	; 0x74
   15604:	mov	r8, r3
   15608:	mov	r5, r2
   1560c:	str	r1, [sp, #16]
   15610:	cmp	r0, #0
   15614:	beq	156b8 <flatcc_builder_create_cached_vtable@@Base+0xc8>
   15618:	ldr	r1, [sl, #92]	; 0x5c
   1561c:	rsb	r0, r0, #32
   15620:	lsr	r0, r8, r0
   15624:	add	r6, r1, r0, lsl #2
   15628:	cmp	r6, #0
   1562c:	beq	1577c <flatcc_builder_create_cached_vtable@@Base+0x18c>
   15630:	ldr	r7, [r6]
   15634:	str	r6, [sp, #12]
   15638:	cmp	r7, #0
   1563c:	beq	1578c <flatcc_builder_create_cached_vtable@@Base+0x19c>
   15640:	ldr	r4, [sl, #68]	; 0x44
   15644:	ldr	r8, [sl, #100]	; 0x64
   15648:	mov	r0, #0
   1564c:	str	r0, [sp, #8]
   15650:	add	r9, r8, r7
   15654:	mov	r1, r4
   15658:	ldr	r0, [r9, #8]
   1565c:	ldrh	r0, [r1, r0]!	; <UNPREDICTABLE>
   15660:	cmp	r0, r5
   15664:	bne	1567c <flatcc_builder_create_cached_vtable@@Base+0x8c>
   15668:	ldr	r0, [sp, #16]
   1566c:	mov	r2, r5
   15670:	bl	1240c <memcmp@plt>
   15674:	cmp	r0, #0
   15678:	beq	15690 <flatcc_builder_create_cached_vtable@@Base+0xa0>
   1567c:	ldr	r7, [r9, #12]!
   15680:	cmp	r7, #0
   15684:	mov	r6, r9
   15688:	bne	15650 <flatcc_builder_create_cached_vtable@@Base+0x60>
   1568c:	b	15774 <flatcc_builder_create_cached_vtable@@Base+0x184>
   15690:	ldr	r0, [sl, #152]	; 0x98
   15694:	ldr	r1, [r9, #4]
   15698:	cmp	r1, r0
   1569c:	beq	158f8 <flatcc_builder_create_cached_vtable@@Base+0x308>
   156a0:	mov	r6, r9
   156a4:	mov	r0, r9
   156a8:	ldr	r7, [r6, #12]!
   156ac:	cmp	r7, #0
   156b0:	bne	1564c <flatcc_builder_create_cached_vtable@@Base+0x5c>
   156b4:	b	15790 <flatcc_builder_create_cached_vtable@@Base+0x1a0>
   156b8:	ldr	r0, [sl, #124]	; 0x7c
   156bc:	cmp	r0, #0
   156c0:	bne	1594c <flatcc_builder_create_cached_vtable@@Base+0x35c>
   156c4:	ldr	r0, [sl, #104]	; 0x68
   156c8:	add	r7, sl, #100	; 0x64
   156cc:	cmp	r0, #15
   156d0:	bhi	156fc <flatcc_builder_create_cached_vtable@@Base+0x10c>
   156d4:	ldr	r0, [sl, #40]	; 0x28
   156d8:	ldr	r6, [sl, #48]	; 0x30
   156dc:	mov	r1, #6
   156e0:	mov	r2, #16
   156e4:	mov	r3, #0
   156e8:	str	r1, [sp]
   156ec:	mov	r1, r7
   156f0:	blx	r6
   156f4:	cmp	r0, #0
   156f8:	bne	1592c <flatcc_builder_create_cached_vtable@@Base+0x33c>
   156fc:	ldr	r0, [r7]
   15700:	mov	r7, #0
   15704:	cmp	r0, #0
   15708:	beq	15830 <flatcc_builder_create_cached_vtable@@Base+0x240>
   1570c:	mov	r0, #16
   15710:	mov	r2, #5
   15714:	add	r1, sl, #92	; 0x5c
   15718:	mov	r3, #1
   1571c:	mov	r4, #256	; 0x100
   15720:	str	r0, [sl, #124]	; 0x7c
   15724:	ldr	r0, [sl, #40]	; 0x28
   15728:	ldr	r6, [sl, #48]	; 0x30
   1572c:	str	r2, [sp]
   15730:	mov	r2, #256	; 0x100
   15734:	blx	r6
   15738:	cmp	r0, #0
   1573c:	bne	15830 <flatcc_builder_create_cached_vtable@@Base+0x240>
   15740:	ldr	r0, [sl, #96]	; 0x60
   15744:	mov	r1, r4
   15748:	lsl	r4, r4, #1
   1574c:	cmp	r0, r1, lsl #1
   15750:	bcs	15744 <flatcc_builder_create_cached_vtable@@Base+0x154>
   15754:	lsr	r1, r1, #2
   15758:	mvn	r0, #0
   1575c:	mov	r2, #1
   15760:	add	r0, r0, #1
   15764:	cmp	r1, r2, lsl r0
   15768:	bhi	15760 <flatcc_builder_create_cached_vtable@@Base+0x170>
   1576c:	str	r0, [sl, #116]	; 0x74
   15770:	b	15618 <flatcc_builder_create_cached_vtable@@Base+0x28>
   15774:	ldr	r9, [sp, #8]
   15778:	b	15790 <flatcc_builder_create_cached_vtable@@Base+0x1a0>
   1577c:	mov	r7, #0
   15780:	mov	r0, r7
   15784:	sub	sp, fp, #28
   15788:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1578c:	mov	r9, #0
   15790:	ldr	r4, [sl, #124]	; 0x7c
   15794:	ldr	r0, [sl, #104]	; 0x68
   15798:	add	r7, sl, #100	; 0x64
   1579c:	add	r2, r4, #16
   157a0:	cmp	r2, r0
   157a4:	bls	157cc <flatcc_builder_create_cached_vtable@@Base+0x1dc>
   157a8:	ldr	r0, [sl, #40]	; 0x28
   157ac:	ldr	r6, [sl, #48]	; 0x30
   157b0:	mov	r1, #6
   157b4:	mov	r3, #0
   157b8:	str	r1, [sp]
   157bc:	mov	r1, r7
   157c0:	blx	r6
   157c4:	cmp	r0, #0
   157c8:	bne	1592c <flatcc_builder_create_cached_vtable@@Base+0x33c>
   157cc:	ldr	r0, [r7]
   157d0:	mov	r7, #0
   157d4:	adds	r4, r0, r4
   157d8:	beq	15830 <flatcc_builder_create_cached_vtable@@Base+0x240>
   157dc:	ldr	r0, [sl, #124]	; 0x7c
   157e0:	ldr	r1, [sl, #152]	; 0x98
   157e4:	add	r2, r0, #16
   157e8:	str	r2, [sl, #124]	; 0x7c
   157ec:	ldr	r2, [sp, #12]
   157f0:	str	r1, [r4, #4]
   157f4:	ldr	r1, [r2]
   157f8:	str	r1, [r4, #12]
   157fc:	ldr	r1, [sp, #16]
   15800:	str	r0, [r2]
   15804:	mov	r0, sl
   15808:	mov	r2, r5
   1580c:	bl	154b0 <flatcc_builder_create_vtable@@Base>
   15810:	cmp	r0, #0
   15814:	str	r0, [r4]
   15818:	beq	15830 <flatcc_builder_create_cached_vtable@@Base+0x240>
   1581c:	cmp	r9, #0
   15820:	beq	1583c <flatcc_builder_create_cached_vtable@@Base+0x24c>
   15824:	ldr	r0, [r9, #8]
   15828:	str	r0, [r4, #8]
   1582c:	ldr	r7, [r4]
   15830:	mov	r0, r7
   15834:	sub	sp, fp, #28
   15838:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1583c:	ldr	r6, [sl, #120]	; 0x78
   15840:	ldr	r0, [sl, #172]	; 0xac
   15844:	add	r2, r6, r5
   15848:	cmp	r0, #0
   1584c:	beq	15888 <flatcc_builder_create_cached_vtable@@Base+0x298>
   15850:	cmp	r0, r2
   15854:	bcs	15888 <flatcc_builder_create_cached_vtable@@Base+0x298>
   15858:	ldr	r0, [sl, #116]	; 0x74
   1585c:	cmp	r0, #0
   15860:	beq	1582c <flatcc_builder_create_cached_vtable@@Base+0x23c>
   15864:	ldr	r0, [sl, #92]	; 0x5c
   15868:	ldr	r2, [sl, #96]	; 0x60
   1586c:	mov	r1, #0
   15870:	mov	r5, #0
   15874:	bl	12484 <memset@plt>
   15878:	mov	r0, #16
   1587c:	str	r5, [sl, #120]	; 0x78
   15880:	str	r0, [sl, #124]	; 0x7c
   15884:	b	1582c <flatcc_builder_create_cached_vtable@@Base+0x23c>
   15888:	ldr	r0, [sl, #72]	; 0x48
   1588c:	add	r7, sl, #68	; 0x44
   15890:	cmp	r2, r0
   15894:	bls	158bc <flatcc_builder_create_cached_vtable@@Base+0x2cc>
   15898:	ldr	r0, [sl, #40]	; 0x28
   1589c:	ldr	ip, [sl, #48]	; 0x30
   158a0:	mov	r1, #2
   158a4:	mov	r3, #0
   158a8:	str	r1, [sp]
   158ac:	mov	r1, r7
   158b0:	blx	ip
   158b4:	cmp	r0, #0
   158b8:	bne	1592c <flatcc_builder_create_cached_vtable@@Base+0x33c>
   158bc:	ldr	r0, [r7]
   158c0:	adds	r0, r0, r6
   158c4:	beq	158e8 <flatcc_builder_create_cached_vtable@@Base+0x2f8>
   158c8:	ldr	r1, [sl, #120]	; 0x78
   158cc:	mov	r2, r5
   158d0:	str	r1, [r4, #8]
   158d4:	add	r1, r1, r5
   158d8:	str	r1, [sl, #120]	; 0x78
   158dc:	ldr	r1, [sp, #16]
   158e0:	bl	12400 <memcpy@plt>
   158e4:	b	1582c <flatcc_builder_create_cached_vtable@@Base+0x23c>
   158e8:	mvn	r7, #0
   158ec:	mov	r0, r7
   158f0:	sub	sp, fp, #28
   158f4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   158f8:	ldr	r0, [sp, #12]
   158fc:	cmp	r6, r0
   15900:	beq	1591c <flatcc_builder_create_cached_vtable@@Base+0x32c>
   15904:	mov	r1, r0
   15908:	ldr	r0, [r9, #12]
   1590c:	str	r0, [r6]
   15910:	ldr	r0, [r1]
   15914:	str	r0, [r9, #12]
   15918:	str	r7, [r1]
   1591c:	ldr	r7, [r9]
   15920:	mov	r0, r7
   15924:	sub	sp, fp, #28
   15928:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1592c:	movw	r0, #38408	; 0x9608
   15930:	movw	r1, #33890	; 0x8462
   15934:	movw	r3, #37954	; 0x9442
   15938:	mov	r2, #308	; 0x134
   1593c:	movt	r0, #1
   15940:	movt	r1, #1
   15944:	movt	r3, #1
   15948:	bl	124b4 <__assert_fail@plt>
   1594c:	movw	r0, #38348	; 0x95cc
   15950:	movw	r1, #33890	; 0x8462
   15954:	movw	r3, #38363	; 0x95db
   15958:	movw	r2, #342	; 0x156
   1595c:	movt	r0, #1
   15960:	movt	r1, #1
   15964:	movt	r3, #1
   15968:	bl	124b4 <__assert_fail@plt>

0001596c <flatcc_builder_create_table@@Base>:
   1596c:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   15970:	add	fp, sp, #24
   15974:	sub	sp, sp, #80	; 0x50
   15978:	ldr	r5, [fp, #12]
   1597c:	cmn	r5, #1
   15980:	ble	15ad4 <flatcc_builder_create_table@@Base+0x168>
   15984:	ldr	ip, [fp, #16]
   15988:	tst	ip, #1
   1598c:	beq	15af4 <flatcc_builder_create_table@@Base+0x188>
   15990:	mov	r8, r0
   15994:	ldrh	r0, [r0, #128]	; 0x80
   15998:	cmp	r3, #4
   1599c:	movls	r3, #4
   159a0:	cmp	r0, r3
   159a4:	strhcc	r3, [r8, #128]	; 0x80
   159a8:	sub	r3, r3, #1
   159ac:	cmp	r5, #1
   159b0:	ldr	r4, [r8, #136]	; 0x88
   159b4:	sub	r0, r4, r2
   159b8:	and	r0, r0, r3
   159bc:	add	r3, ip, r0
   159c0:	mvn	ip, #3
   159c4:	sub	r6, ip, r2
   159c8:	add	r4, r6, r4
   159cc:	add	r6, r4, #1
   159d0:	sub	r3, r6, r3
   159d4:	str	r3, [fp, #-28]	; 0xffffffe4
   159d8:	blt	15a04 <flatcc_builder_create_table@@Base+0x98>
   159dc:	ldr	r3, [fp, #8]
   159e0:	sub	r6, r4, r0
   159e4:	sub	r4, ip, r6
   159e8:	ldrh	r6, [r3], #2
   159ec:	subs	r5, r5, #1
   159f0:	ldr	r7, [r6, r1]
   159f4:	add	r7, r4, r7
   159f8:	sub	r7, r7, r6
   159fc:	str	r7, [r6, r1]
   15a00:	bne	159e8 <flatcc_builder_create_table@@Base+0x7c>
   15a04:	sub	r3, fp, #28
   15a08:	mov	r4, #4
   15a0c:	cmp	r2, #0
   15a10:	str	r3, [sp, #12]
   15a14:	mov	r3, #1
   15a18:	str	r4, [sp, #4]
   15a1c:	str	r4, [sp, #16]
   15a20:	str	r3, [sp, #8]
   15a24:	beq	15a40 <flatcc_builder_create_table@@Base+0xd4>
   15a28:	mov	r3, #2
   15a2c:	add	r4, r2, #4
   15a30:	str	r1, [sp, #20]
   15a34:	str	r2, [sp, #24]
   15a38:	str	r3, [sp, #8]
   15a3c:	str	r4, [sp, #4]
   15a40:	cmp	r0, #0
   15a44:	beq	15a70 <flatcc_builder_create_table@@Base+0x104>
   15a48:	add	r1, sp, #4
   15a4c:	movw	r2, #33360	; 0x8250
   15a50:	add	r4, r4, r0
   15a54:	add	r1, r1, r3, lsl #3
   15a58:	add	r3, r3, #1
   15a5c:	movt	r2, #1
   15a60:	str	r4, [sp, #4]
   15a64:	str	r2, [r1, #8]
   15a68:	str	r0, [r1, #12]
   15a6c:	str	r3, [sp, #8]
   15a70:	cmp	r4, #0
   15a74:	ble	15b14 <flatcc_builder_create_table@@Base+0x1a8>
   15a78:	ldr	r0, [r8, #136]	; 0x88
   15a7c:	ldr	r7, [r8, #44]	; 0x2c
   15a80:	add	r1, sp, #4
   15a84:	mov	r2, r3
   15a88:	add	r1, r1, #8
   15a8c:	sub	r5, r0, r4
   15a90:	ldr	r0, [r8, #36]	; 0x24
   15a94:	str	r4, [sp]
   15a98:	mov	r3, r5
   15a9c:	blx	r7
   15aa0:	cmp	r0, #0
   15aa4:	streq	r5, [r8, #136]	; 0x88
   15aa8:	moveq	r0, r5
   15aac:	subeq	sp, fp, #24
   15ab0:	popeq	{r4, r5, r6, r7, r8, sl, fp, pc}
   15ab4:	movw	r0, #38408	; 0x9608
   15ab8:	movw	r1, #33890	; 0x8462
   15abc:	movw	r3, #38087	; 0x94c7
   15ac0:	movw	r2, #651	; 0x28b
   15ac4:	movt	r0, #1
   15ac8:	movt	r1, #1
   15acc:	movt	r3, #1
   15ad0:	bl	124b4 <__assert_fail@plt>
   15ad4:	movw	r0, #35774	; 0x8bbe
   15ad8:	movw	r1, #33890	; 0x8462
   15adc:	movw	r3, #35792	; 0x8bd0
   15ae0:	movw	r2, #1237	; 0x4d5
   15ae4:	movt	r0, #1
   15ae8:	movt	r1, #1
   15aec:	movt	r3, #1
   15af0:	bl	124b4 <__assert_fail@plt>
   15af4:	movw	r0, #35948	; 0x8c6c
   15af8:	movw	r1, #33890	; 0x8462
   15afc:	movw	r3, #35792	; 0x8bd0
   15b00:	movw	r2, #1243	; 0x4db
   15b04:	movt	r0, #1
   15b08:	movt	r1, #1
   15b0c:	movt	r3, #1
   15b10:	bl	124b4 <__assert_fail@plt>
   15b14:	movw	r0, #38408	; 0x9608
   15b18:	movw	r1, #33890	; 0x8462
   15b1c:	movw	r3, #38087	; 0x94c7
   15b20:	movw	r2, #647	; 0x287
   15b24:	movt	r0, #1
   15b28:	movt	r1, #1
   15b2c:	movt	r3, #1
   15b30:	bl	124b4 <__assert_fail@plt>

00015b34 <flatcc_builder_check_required_field@@Base>:
   15b34:	ldr	r2, [r0, #32]
   15b38:	ldrh	r2, [r2, #14]
   15b3c:	cmp	r2, #3
   15b40:	bne	15b70 <flatcc_builder_check_required_field@@Base+0x3c>
   15b44:	ldrh	r3, [r0, #8]
   15b48:	mov	r2, #0
   15b4c:	cmp	r3, r1
   15b50:	bls	15b68 <flatcc_builder_check_required_field@@Base+0x34>
   15b54:	ldr	r0, [r0, #4]
   15b58:	add	r0, r0, r1, lsl #1
   15b5c:	ldrh	r2, [r0]
   15b60:	cmp	r2, #0
   15b64:	movwne	r2, #1
   15b68:	mov	r0, r2
   15b6c:	bx	lr
   15b70:	push	{fp, lr}
   15b74:	mov	fp, sp
   15b78:	movw	r0, #35959	; 0x8c77
   15b7c:	movw	r1, #33890	; 0x8462
   15b80:	movw	r3, #36002	; 0x8ca2
   15b84:	movw	r2, #1272	; 0x4f8
   15b88:	movt	r0, #1
   15b8c:	movt	r1, #1
   15b90:	movt	r3, #1
   15b94:	bl	124b4 <__assert_fail@plt>

00015b98 <flatcc_builder_check_union_field@@Base>:
   15b98:	mov	r2, r0
   15b9c:	ldr	r0, [r0, #32]
   15ba0:	ldrh	r0, [r0, #14]
   15ba4:	cmp	r0, #3
   15ba8:	bne	15c08 <flatcc_builder_check_union_field@@Base+0x70>
   15bac:	cmp	r1, #0
   15bb0:	mov	r0, #0
   15bb4:	ldrhne	r3, [r2, #8]
   15bb8:	cmpne	r3, r1
   15bbc:	bhi	15bc4 <flatcc_builder_check_union_field@@Base+0x2c>
   15bc0:	bx	lr
   15bc4:	ldr	r0, [r2, #4]
   15bc8:	add	r0, r0, r1, lsl #1
   15bcc:	ldrh	r1, [r0, #-2]
   15bd0:	cmp	r1, #0
   15bd4:	beq	15bf8 <flatcc_builder_check_union_field@@Base+0x60>
   15bd8:	ldr	r2, [r2, #16]
   15bdc:	ldrh	r0, [r0]
   15be0:	ldrb	r1, [r2, r1]
   15be4:	cmp	r1, #0
   15be8:	beq	15bfc <flatcc_builder_check_union_field@@Base+0x64>
   15bec:	cmp	r0, #0
   15bf0:	movwne	r0, #1
   15bf4:	bx	lr
   15bf8:	ldrh	r0, [r0]
   15bfc:	clz	r0, r0
   15c00:	lsr	r0, r0, #5
   15c04:	bx	lr
   15c08:	push	{fp, lr}
   15c0c:	mov	fp, sp
   15c10:	movw	r0, #35959	; 0x8c77
   15c14:	movw	r1, #33890	; 0x8462
   15c18:	movw	r3, #36085	; 0x8cf5
   15c1c:	movw	r2, #1279	; 0x4ff
   15c20:	movt	r0, #1
   15c24:	movt	r1, #1
   15c28:	movt	r3, #1
   15c2c:	bl	124b4 <__assert_fail@plt>

00015c30 <flatcc_builder_check_required@@Base>:
   15c30:	push	{fp, lr}
   15c34:	mov	fp, sp
   15c38:	mov	r3, r0
   15c3c:	ldr	r0, [r0, #32]
   15c40:	ldrh	r0, [r0, #14]
   15c44:	cmp	r0, #3
   15c48:	bne	15ca0 <flatcc_builder_check_required@@Base+0x70>
   15c4c:	ldrh	ip, [r3, #8]
   15c50:	mov	r0, #0
   15c54:	cmp	ip, r2
   15c58:	movge	r0, #1
   15c5c:	cmpge	r2, #1
   15c60:	bge	15c68 <flatcc_builder_check_required@@Base+0x38>
   15c64:	pop	{fp, pc}
   15c68:	ldr	ip, [r3, #4]
   15c6c:	mov	lr, #0
   15c70:	b	15c84 <flatcc_builder_check_required@@Base+0x54>
   15c74:	add	lr, lr, #1
   15c78:	add	r1, r1, #2
   15c7c:	cmp	lr, r2
   15c80:	popge	{fp, pc}
   15c84:	ldrh	r3, [r1]
   15c88:	add	r3, ip, r3, lsl #1
   15c8c:	ldrh	r3, [r3]
   15c90:	cmp	r3, #0
   15c94:	bne	15c74 <flatcc_builder_check_required@@Base+0x44>
   15c98:	mov	r0, #0
   15c9c:	pop	{fp, pc}
   15ca0:	movw	r0, #35959	; 0x8c77
   15ca4:	movw	r1, #33890	; 0x8462
   15ca8:	movw	r3, #36165	; 0x8d45
   15cac:	movw	r2, #1297	; 0x511
   15cb0:	movt	r0, #1
   15cb4:	movt	r1, #1
   15cb8:	movt	r3, #1
   15cbc:	bl	124b4 <__assert_fail@plt>

00015cc0 <flatcc_builder_end_table@@Base>:
   15cc0:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   15cc4:	add	fp, sp, #24
   15cc8:	sub	sp, sp, #16
   15ccc:	mov	r4, r0
   15cd0:	ldr	r0, [r0, #32]
   15cd4:	ldrh	r0, [r0, #14]
   15cd8:	cmp	r0, #3
   15cdc:	bne	15e60 <flatcc_builder_end_table@@Base+0x1a0>
   15ce0:	ldrh	r0, [r4, #8]
   15ce4:	ldr	r5, [r4, #4]
   15ce8:	mov	r1, #4
   15cec:	movw	r2, #31153	; 0x79b1
   15cf0:	movt	r2, #40503	; 0x9e37
   15cf4:	add	r0, r1, r0, lsl #1
   15cf8:	strh	r0, [r5, #-4]!
   15cfc:	ldrh	r1, [r4, #20]
   15d00:	uxth	r6, r0
   15d04:	add	r1, r1, #4
   15d08:	strh	r1, [r5, #2]
   15d0c:	uxth	r1, r1
   15d10:	ldr	r0, [r4, #12]
   15d14:	eor	r0, r0, r6
   15d18:	mul	r0, r0, r2
   15d1c:	eor	r0, r0, r1
   15d20:	mov	r1, r5
   15d24:	mul	r3, r0, r2
   15d28:	mov	r0, r4
   15d2c:	mov	r2, r6
   15d30:	str	r3, [r4, #12]
   15d34:	bl	155f0 <flatcc_builder_create_cached_vtable@@Base>
   15d38:	cmp	r0, #0
   15d3c:	beq	15e50 <flatcc_builder_end_table@@Base+0x190>
   15d40:	mov	r7, r0
   15d44:	mov	r0, r5
   15d48:	mov	r1, #0
   15d4c:	mov	r2, r6
   15d50:	mov	r8, #0
   15d54:	bl	12484 <memset@plt>
   15d58:	ldr	r5, [r4, #32]
   15d5c:	ldr	r0, [r4, #76]	; 0x4c
   15d60:	ldr	r6, [r4]
   15d64:	ldrh	r3, [r4, #130]	; 0x82
   15d68:	ldr	r1, [r4, #16]
   15d6c:	ldr	r2, [r4, #20]
   15d70:	ldr	r5, [r5, #20]
   15d74:	add	r0, r0, r5
   15d78:	sub	r6, r6, r0
   15d7c:	asr	r6, r6, #1
   15d80:	stm	sp, {r0, r6, r7}
   15d84:	mov	r0, r4
   15d88:	bl	1596c <flatcc_builder_create_table@@Base>
   15d8c:	cmp	r0, #0
   15d90:	beq	15e44 <flatcc_builder_end_table@@Base+0x184>
   15d94:	ldr	r1, [r4, #32]
   15d98:	mov	r5, r0
   15d9c:	ldr	r0, [r4, #16]
   15da0:	ldr	r2, [r4, #20]
   15da4:	ldr	r3, [r4, #52]	; 0x34
   15da8:	ldr	r7, [r1, #24]
   15dac:	str	r7, [r4, #12]
   15db0:	ldrh	r7, [r1, #28]
   15db4:	strh	r7, [r4, #8]
   15db8:	ldr	r7, [r1, #16]
   15dbc:	add	r3, r3, r7
   15dc0:	str	r3, [r4, #4]
   15dc4:	ldr	r3, [r4, #76]	; 0x4c
   15dc8:	ldr	r1, [r1, #20]
   15dcc:	add	r1, r3, r1
   15dd0:	str	r1, [r4]
   15dd4:	mov	r1, #0
   15dd8:	bl	12484 <memset@plt>
   15ddc:	ldr	r0, [r4, #32]
   15de0:	ldr	r1, [r4, #60]	; 0x3c
   15de4:	ldr	r2, [r4, #64]	; 0x40
   15de8:	mov	r8, r5
   15dec:	ldr	r3, [r0, #8]
   15df0:	str	r3, [r4, #20]
   15df4:	ldr	r3, [r0]
   15df8:	str	r3, [r4, #28]
   15dfc:	add	r1, r1, r3
   15e00:	ldr	r7, [r0, #4]
   15e04:	str	r1, [r4, #16]
   15e08:	sub	r1, r2, r3
   15e0c:	cmp	r1, r7
   15e10:	movhi	r1, r7
   15e14:	str	r1, [r4, #24]
   15e18:	ldrh	r1, [r4, #130]	; 0x82
   15e1c:	ldrh	r2, [r4, #128]	; 0x80
   15e20:	cmp	r2, r1
   15e24:	strhcc	r1, [r4, #128]	; 0x80
   15e28:	ldrh	r1, [r0, #12]
   15e2c:	sub	r0, r0, #36	; 0x24
   15e30:	str	r0, [r4, #32]
   15e34:	strh	r1, [r4, #130]	; 0x82
   15e38:	ldr	r0, [r4, #156]	; 0x9c
   15e3c:	sub	r0, r0, #1
   15e40:	str	r0, [r4, #156]	; 0x9c
   15e44:	mov	r0, r8
   15e48:	sub	sp, fp, #24
   15e4c:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   15e50:	mov	r8, #0
   15e54:	mov	r0, r8
   15e58:	sub	sp, fp, #24
   15e5c:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   15e60:	movw	r0, #35959	; 0x8c77
   15e64:	movw	r1, #33890	; 0x8462
   15e68:	movw	r3, #36255	; 0x8d9f
   15e6c:	movw	r2, #1317	; 0x525
   15e70:	movt	r0, #1
   15e74:	movt	r1, #1
   15e78:	movt	r3, #1
   15e7c:	bl	124b4 <__assert_fail@plt>

00015e80 <flatcc_builder_create_vector@@Base>:
   15e80:	push	{r4, r5, r6, r7, fp, lr}
   15e84:	add	fp, sp, #16
   15e88:	sub	sp, sp, #80	; 0x50
   15e8c:	mov	r7, r0
   15e90:	ldr	r0, [fp, #12]
   15e94:	cmp	r2, r0
   15e98:	bhi	15f98 <flatcc_builder_create_vector@@Base+0x118>
   15e9c:	ldr	r0, [fp, #8]
   15ea0:	mov	r4, r2
   15ea4:	ldrh	r2, [r7, #128]	; 0x80
   15ea8:	mov	r5, #4
   15eac:	cmp	r0, #4
   15eb0:	movls	r0, r5
   15eb4:	cmp	r2, r0
   15eb8:	sub	r2, fp, #20
   15ebc:	strhcc	r0, [r7, #128]	; 0x80
   15ec0:	str	r4, [fp, #-20]	; 0xffffffec
   15ec4:	sub	r0, r0, #1
   15ec8:	ldr	ip, [r7, #136]	; 0x88
   15ecc:	str	r2, [sp, #12]
   15ed0:	mov	r2, #1
   15ed4:	str	r5, [sp, #4]
   15ed8:	str	r5, [sp, #16]
   15edc:	str	r2, [sp, #8]
   15ee0:	mls	r6, r3, r4, ip
   15ee4:	mul	r3, r3, r4
   15ee8:	and	r0, r6, r0
   15eec:	cmp	r3, #0
   15ef0:	beq	15f0c <flatcc_builder_create_vector@@Base+0x8c>
   15ef4:	mov	r2, #2
   15ef8:	add	r5, r3, #4
   15efc:	str	r1, [sp, #20]
   15f00:	str	r3, [sp, #24]
   15f04:	str	r2, [sp, #8]
   15f08:	str	r5, [sp, #4]
   15f0c:	cmp	r0, #0
   15f10:	beq	15f3c <flatcc_builder_create_vector@@Base+0xbc>
   15f14:	add	r1, sp, #4
   15f18:	movw	r3, #33360	; 0x8250
   15f1c:	add	r5, r5, r0
   15f20:	add	r1, r1, r2, lsl #3
   15f24:	add	r2, r2, #1
   15f28:	movt	r3, #1
   15f2c:	str	r5, [sp, #4]
   15f30:	str	r3, [r1, #8]
   15f34:	str	r0, [r1, #12]
   15f38:	str	r2, [sp, #8]
   15f3c:	cmp	r5, #0
   15f40:	ble	15fb8 <flatcc_builder_create_vector@@Base+0x138>
   15f44:	ldr	r0, [r7, #36]	; 0x24
   15f48:	ldr	r6, [r7, #44]	; 0x2c
   15f4c:	add	r1, sp, #4
   15f50:	sub	r4, ip, r5
   15f54:	str	r5, [sp]
   15f58:	add	r1, r1, #8
   15f5c:	mov	r3, r4
   15f60:	blx	r6
   15f64:	cmp	r0, #0
   15f68:	streq	r4, [r7, #136]	; 0x88
   15f6c:	moveq	r0, r4
   15f70:	subeq	sp, fp, #16
   15f74:	popeq	{r4, r5, r6, r7, fp, pc}
   15f78:	movw	r0, #38408	; 0x9608
   15f7c:	movw	r1, #33890	; 0x8462
   15f80:	movw	r3, #38087	; 0x94c7
   15f84:	movw	r2, #651	; 0x28b
   15f88:	movt	r0, #1
   15f8c:	movt	r1, #1
   15f90:	movt	r3, #1
   15f94:	bl	124b4 <__assert_fail@plt>
   15f98:	movw	r0, #36321	; 0x8de1
   15f9c:	movw	r1, #33890	; 0x8462
   15fa0:	movw	r3, #36340	; 0x8df4
   15fa4:	movw	r2, #1365	; 0x555
   15fa8:	movt	r0, #1
   15fac:	movt	r1, #1
   15fb0:	movt	r3, #1
   15fb4:	bl	124b4 <__assert_fail@plt>
   15fb8:	movw	r0, #38408	; 0x9608
   15fbc:	movw	r1, #33890	; 0x8462
   15fc0:	movw	r3, #38087	; 0x94c7
   15fc4:	movw	r2, #647	; 0x287
   15fc8:	movt	r0, #1
   15fcc:	movt	r1, #1
   15fd0:	movt	r3, #1
   15fd4:	bl	124b4 <__assert_fail@plt>

00015fd8 <flatcc_builder_end_vector@@Base>:
   15fd8:	push	{r4, r5, fp, lr}
   15fdc:	add	fp, sp, #8
   15fe0:	sub	sp, sp, #8
   15fe4:	mov	r4, r0
   15fe8:	ldr	r0, [r0, #32]
   15fec:	ldrh	r1, [r0, #14]
   15ff0:	cmp	r1, #4
   15ff4:	bne	160a8 <flatcc_builder_end_vector@@Base+0xd0>
   15ff8:	ldr	r3, [r0, #16]
   15ffc:	ldr	r2, [r0, #20]
   16000:	ldr	r0, [r0, #24]
   16004:	ldr	r1, [r4, #16]
   16008:	ldrh	r5, [r4, #130]	; 0x82
   1600c:	str	r0, [sp, #4]
   16010:	mov	r0, r4
   16014:	str	r5, [sp]
   16018:	bl	15e80 <flatcc_builder_create_vector@@Base>
   1601c:	mov	r5, r0
   16020:	cmp	r0, #0
   16024:	beq	1609c <flatcc_builder_end_vector@@Base+0xc4>
   16028:	ldr	r0, [r4, #16]
   1602c:	ldr	r2, [r4, #20]
   16030:	mov	r1, #0
   16034:	bl	12484 <memset@plt>
   16038:	ldr	r0, [r4, #32]
   1603c:	ldr	r1, [r4, #60]	; 0x3c
   16040:	ldr	ip, [r4, #64]	; 0x40
   16044:	ldr	r3, [r0, #8]
   16048:	str	r3, [r4, #20]
   1604c:	ldr	r3, [r0]
   16050:	str	r3, [r4, #28]
   16054:	add	r1, r1, r3
   16058:	ldr	r2, [r0, #4]
   1605c:	str	r1, [r4, #16]
   16060:	sub	r1, ip, r3
   16064:	cmp	r1, r2
   16068:	movhi	r1, r2
   1606c:	str	r1, [r4, #24]
   16070:	ldrh	r1, [r4, #130]	; 0x82
   16074:	ldrh	r2, [r4, #128]	; 0x80
   16078:	cmp	r2, r1
   1607c:	strhcc	r1, [r4, #128]	; 0x80
   16080:	ldrh	r1, [r0, #12]
   16084:	sub	r0, r0, #36	; 0x24
   16088:	str	r0, [r4, #32]
   1608c:	strh	r1, [r4, #130]	; 0x82
   16090:	ldr	r0, [r4, #156]	; 0x9c
   16094:	sub	r0, r0, #1
   16098:	str	r0, [r4, #156]	; 0x9c
   1609c:	mov	r0, r5
   160a0:	sub	sp, fp, #8
   160a4:	pop	{r4, r5, fp, pc}
   160a8:	movw	r0, #34693	; 0x8785
   160ac:	movw	r1, #33890	; 0x8462
   160b0:	movw	r3, #36458	; 0x8e6a
   160b4:	movw	r2, #1400	; 0x578
   160b8:	movt	r0, #1
   160bc:	movt	r1, #1
   160c0:	movt	r3, #1
   160c4:	bl	124b4 <__assert_fail@plt>

000160c8 <flatcc_builder_vector_count@@Base>:
   160c8:	ldr	r0, [r0, #32]
   160cc:	ldr	r0, [r0, #20]
   160d0:	bx	lr

000160d4 <flatcc_builder_vector_edit@@Base>:
   160d4:	ldr	r0, [r0, #16]
   160d8:	bx	lr

000160dc <flatcc_builder_create_offset_vector_direct@@Base>:
   160dc:	mov	r3, #0
   160e0:	b	160e4 <flatcc_builder_create_offset_vector_direct@@Base+0x8>
   160e4:	push	{r4, r5, r6, r7, fp, lr}
   160e8:	add	fp, sp, #16
   160ec:	sub	sp, sp, #80	; 0x50
   160f0:	mov	r5, #0
   160f4:	cmn	r2, #-1073741823	; 0xc0000001
   160f8:	bhi	16258 <flatcc_builder_create_offset_vector_direct@@Base+0x17c>
   160fc:	mov	r7, r0
   16100:	ldrh	r0, [r0, #128]	; 0x80
   16104:	sub	r6, fp, #20
   16108:	mov	r4, #4
   1610c:	mov	ip, #1
   16110:	cmp	r0, #3
   16114:	movls	r0, #4
   16118:	strhls	r0, [r7, #128]	; 0x80
   1611c:	str	r2, [fp, #-20]	; 0xffffffec
   16120:	ldr	lr, [r7, #136]	; 0x88
   16124:	str	r6, [sp, #12]
   16128:	mov	r6, #0
   1612c:	str	r4, [sp, #4]
   16130:	str	r4, [sp, #16]
   16134:	str	ip, [sp, #8]
   16138:	cmp	r6, r2, lsl #2
   1613c:	and	r5, lr, #3
   16140:	beq	16160 <flatcc_builder_create_offset_vector_direct@@Base+0x84>
   16144:	lsl	r6, r2, #2
   16148:	mov	ip, #2
   1614c:	str	r1, [sp, #20]
   16150:	add	r4, r6, #4
   16154:	str	r6, [sp, #24]
   16158:	str	ip, [sp, #8]
   1615c:	str	r4, [sp, #4]
   16160:	cmp	r5, #0
   16164:	beq	16190 <flatcc_builder_create_offset_vector_direct@@Base+0xb4>
   16168:	add	r6, sp, #4
   1616c:	movw	r0, #33360	; 0x8250
   16170:	add	r4, r4, r5
   16174:	add	r6, r6, ip, lsl #3
   16178:	add	ip, ip, #1
   1617c:	movt	r0, #1
   16180:	str	r4, [sp, #4]
   16184:	str	r0, [r6, #8]
   16188:	str	r5, [r6, #12]
   1618c:	str	ip, [sp, #8]
   16190:	cmp	r2, #0
   16194:	beq	1621c <flatcc_builder_create_offset_vector_direct@@Base+0x140>
   16198:	mvn	r0, #3
   1619c:	cmp	r3, #0
   161a0:	sub	r0, r0, lr
   161a4:	add	r0, r0, r4
   161a8:	beq	161f4 <flatcc_builder_create_offset_vector_direct@@Base+0x118>
   161ac:	mov	r5, #0
   161b0:	ldr	r6, [r1, r5, lsl #2]
   161b4:	cmp	r6, #0
   161b8:	beq	161d4 <flatcc_builder_create_offset_vector_direct@@Base+0xf8>
   161bc:	add	r6, r0, r6
   161c0:	str	r6, [r1, r5, lsl #2]
   161c4:	ldrb	r6, [r3, r5]
   161c8:	cmp	r6, #0
   161cc:	bne	161e0 <flatcc_builder_create_offset_vector_direct@@Base+0x104>
   161d0:	b	16264 <flatcc_builder_create_offset_vector_direct@@Base+0x188>
   161d4:	ldrb	r6, [r3, r5]
   161d8:	cmp	r6, #0
   161dc:	bne	162a4 <flatcc_builder_create_offset_vector_direct@@Base+0x1c8>
   161e0:	add	r5, r5, #1
   161e4:	sub	r0, r0, #4
   161e8:	cmp	r5, r2
   161ec:	bcc	161b0 <flatcc_builder_create_offset_vector_direct@@Base+0xd4>
   161f0:	b	1621c <flatcc_builder_create_offset_vector_direct@@Base+0x140>
   161f4:	mov	r3, #0
   161f8:	ldr	r5, [r1, r3, lsl #2]
   161fc:	cmp	r5, #0
   16200:	beq	16284 <flatcc_builder_create_offset_vector_direct@@Base+0x1a8>
   16204:	add	r6, r0, r5
   16208:	sub	r0, r0, #4
   1620c:	str	r6, [r1, r3, lsl #2]
   16210:	add	r3, r3, #1
   16214:	cmp	r3, r2
   16218:	bcc	161f8 <flatcc_builder_create_offset_vector_direct@@Base+0x11c>
   1621c:	cmp	r4, #0
   16220:	ble	162c4 <flatcc_builder_create_offset_vector_direct@@Base+0x1e8>
   16224:	ldr	r0, [r7, #136]	; 0x88
   16228:	ldr	r6, [r7, #44]	; 0x2c
   1622c:	add	r1, sp, #4
   16230:	mov	r2, ip
   16234:	add	r1, r1, #8
   16238:	sub	r5, r0, r4
   1623c:	ldr	r0, [r7, #36]	; 0x24
   16240:	str	r4, [sp]
   16244:	mov	r3, r5
   16248:	blx	r6
   1624c:	cmp	r0, #0
   16250:	bne	162e4 <flatcc_builder_create_offset_vector_direct@@Base+0x208>
   16254:	str	r5, [r7, #136]	; 0x88
   16258:	mov	r0, r5
   1625c:	sub	sp, fp, #16
   16260:	pop	{r4, r5, r6, r7, fp, pc}
   16264:	movw	r0, #38396	; 0x95fc
   16268:	movw	r1, #33890	; 0x8462
   1626c:	movw	r3, #38410	; 0x960a
   16270:	movw	r2, #1457	; 0x5b1
   16274:	movt	r0, #1
   16278:	movt	r1, #1
   1627c:	movt	r3, #1
   16280:	bl	124b4 <__assert_fail@plt>
   16284:	movw	r0, #38408	; 0x9608
   16288:	movw	r1, #33890	; 0x8462
   1628c:	movw	r3, #38410	; 0x960a
   16290:	movw	r2, #1463	; 0x5b7
   16294:	movt	r0, #1
   16298:	movt	r1, #1
   1629c:	movt	r3, #1
   162a0:	bl	124b4 <__assert_fail@plt>
   162a4:	movw	r0, #38541	; 0x968d
   162a8:	movw	r1, #33890	; 0x8462
   162ac:	movw	r3, #38410	; 0x960a
   162b0:	movw	r2, #1461	; 0x5b5
   162b4:	movt	r0, #1
   162b8:	movt	r1, #1
   162bc:	movt	r3, #1
   162c0:	bl	124b4 <__assert_fail@plt>
   162c4:	movw	r0, #38408	; 0x9608
   162c8:	movw	r1, #33890	; 0x8462
   162cc:	movw	r3, #38087	; 0x94c7
   162d0:	movw	r2, #647	; 0x287
   162d4:	movt	r0, #1
   162d8:	movt	r1, #1
   162dc:	movt	r3, #1
   162e0:	bl	124b4 <__assert_fail@plt>
   162e4:	movw	r0, #38408	; 0x9608
   162e8:	movw	r1, #33890	; 0x8462
   162ec:	movw	r3, #38087	; 0x94c7
   162f0:	movw	r2, #651	; 0x28b
   162f4:	movt	r0, #1
   162f8:	movt	r1, #1
   162fc:	movt	r3, #1
   16300:	bl	124b4 <__assert_fail@plt>

00016304 <flatcc_builder_end_offset_vector_for_unions@@Base>:
   16304:	push	{r4, r5, fp, lr}
   16308:	add	fp, sp, #8
   1630c:	mov	r4, r0
   16310:	ldr	r0, [r0, #32]
   16314:	mov	r3, r1
   16318:	ldrh	r1, [r0, #14]
   1631c:	cmp	r1, #5
   16320:	bne	163bc <flatcc_builder_end_offset_vector_for_unions@@Base+0xb8>
   16324:	ldr	r2, [r0, #20]
   16328:	ldr	r1, [r4, #16]
   1632c:	mov	r0, r4
   16330:	bl	160e4 <flatcc_builder_create_offset_vector_direct@@Base+0x8>
   16334:	mov	r5, r0
   16338:	cmp	r0, #0
   1633c:	beq	163b4 <flatcc_builder_end_offset_vector_for_unions@@Base+0xb0>
   16340:	ldr	r0, [r4, #16]
   16344:	ldr	r2, [r4, #20]
   16348:	mov	r1, #0
   1634c:	bl	12484 <memset@plt>
   16350:	ldr	r0, [r4, #32]
   16354:	ldr	r1, [r4, #60]	; 0x3c
   16358:	ldr	ip, [r4, #64]	; 0x40
   1635c:	ldr	r3, [r0, #8]
   16360:	str	r3, [r4, #20]
   16364:	ldr	r3, [r0]
   16368:	str	r3, [r4, #28]
   1636c:	add	r1, r1, r3
   16370:	ldr	r2, [r0, #4]
   16374:	str	r1, [r4, #16]
   16378:	sub	r1, ip, r3
   1637c:	cmp	r1, r2
   16380:	movhi	r1, r2
   16384:	str	r1, [r4, #24]
   16388:	ldrh	r1, [r4, #130]	; 0x82
   1638c:	ldrh	r2, [r4, #128]	; 0x80
   16390:	cmp	r2, r1
   16394:	strhcc	r1, [r4, #128]	; 0x80
   16398:	ldrh	r1, [r0, #12]
   1639c:	sub	r0, r0, #36	; 0x24
   163a0:	str	r0, [r4, #32]
   163a4:	strh	r1, [r4, #130]	; 0x82
   163a8:	ldr	r0, [r4, #156]	; 0x9c
   163ac:	sub	r0, r0, #1
   163b0:	str	r0, [r4, #156]	; 0x9c
   163b4:	mov	r0, r5
   163b8:	pop	{r4, r5, fp, pc}
   163bc:	movw	r0, #34942	; 0x887e
   163c0:	movw	r1, #33890	; 0x8462
   163c4:	movw	r3, #36599	; 0x8ef7
   163c8:	movw	r2, #1493	; 0x5d5
   163cc:	movt	r0, #1
   163d0:	movt	r1, #1
   163d4:	movt	r3, #1
   163d8:	bl	124b4 <__assert_fail@plt>

000163dc <flatcc_builder_offset_vector_edit@@Base>:
   163dc:	ldr	r0, [r0, #16]
   163e0:	bx	lr

000163e4 <flatcc_builder_offset_vector_count@@Base>:
   163e4:	ldr	r0, [r0, #32]
   163e8:	ldr	r0, [r0, #20]
   163ec:	bx	lr

000163f0 <flatcc_builder_table_add_union@@Base>:
   163f0:	push	{r4, r5, r6, r7, fp, lr}
   163f4:	add	fp, sp, #16
   163f8:	mov	r5, r0
   163fc:	ldr	r0, [r0, #32]
   16400:	ldrh	r0, [r0, #14]
   16404:	cmp	r0, #3
   16408:	bne	16490 <flatcc_builder_table_add_union@@Base+0xa0>
   1640c:	mov	r7, r3
   16410:	mov	r4, r2
   16414:	mov	r6, r1
   16418:	cmp	r3, #0
   1641c:	beq	1642c <flatcc_builder_table_add_union@@Base+0x3c>
   16420:	uxtb	r0, r4
   16424:	cmp	r0, #0
   16428:	beq	164b0 <flatcc_builder_table_add_union@@Base+0xc0>
   1642c:	cmp	r7, #0
   16430:	beq	1644c <flatcc_builder_table_add_union@@Base+0x5c>
   16434:	mov	r0, r5
   16438:	mov	r1, r6
   1643c:	bl	164f0 <flatcc_builder_table_add_offset@@Base>
   16440:	cmp	r0, #0
   16444:	beq	164d0 <flatcc_builder_table_add_union@@Base+0xe0>
   16448:	str	r7, [r0]
   1644c:	sub	r1, r6, #1
   16450:	mov	r0, r5
   16454:	mov	r2, #1
   16458:	mov	r3, #1
   1645c:	bl	16680 <flatcc_builder_table_add@@Base>
   16460:	cmp	r0, #0
   16464:	strbne	r4, [r0]
   16468:	movne	r0, #0
   1646c:	popne	{r4, r5, r6, r7, fp, pc}
   16470:	movw	r0, #36845	; 0x8fed
   16474:	movw	r1, #33890	; 0x8462
   16478:	movw	r3, #36713	; 0x8f69
   1647c:	movw	r2, #1526	; 0x5f6
   16480:	movt	r0, #1
   16484:	movt	r1, #1
   16488:	movt	r3, #1
   1648c:	bl	124b4 <__assert_fail@plt>
   16490:	movw	r0, #35959	; 0x8c77
   16494:	movw	r1, #33890	; 0x8462
   16498:	movw	r3, #36713	; 0x8f69
   1649c:	movw	r2, #1518	; 0x5ee
   164a0:	movt	r0, #1
   164a4:	movt	r1, #1
   164a8:	movt	r3, #1
   164ac:	bl	124b4 <__assert_fail@plt>
   164b0:	movw	r0, #36801	; 0x8fc1
   164b4:	movw	r1, #33890	; 0x8462
   164b8:	movw	r3, #36713	; 0x8f69
   164bc:	movw	r2, #1519	; 0x5ef
   164c0:	movt	r0, #1
   164c4:	movt	r1, #1
   164c8:	movt	r3, #1
   164cc:	bl	124b4 <__assert_fail@plt>
   164d0:	movw	r0, #36835	; 0x8fe3
   164d4:	movw	r1, #33890	; 0x8462
   164d8:	movw	r3, #36713	; 0x8f69
   164dc:	movw	r2, #1522	; 0x5f2
   164e0:	movt	r0, #1
   164e4:	movt	r1, #1
   164e8:	movt	r3, #1
   164ec:	bl	124b4 <__assert_fail@plt>

000164f0 <flatcc_builder_table_add_offset@@Base>:
   164f0:	push	{r4, r5, r6, r7, fp, lr}
   164f4:	add	fp, sp, #16
   164f8:	sub	sp, sp, #8
   164fc:	mov	r4, r0
   16500:	ldr	r0, [r0, #32]
   16504:	ldrh	r0, [r0, #14]
   16508:	cmp	r0, #3
   1650c:	bne	16620 <flatcc_builder_table_add_offset@@Base+0x130>
   16510:	movw	r0, #32765	; 0x7ffd
   16514:	mov	r5, r1
   16518:	cmp	r1, r0
   1651c:	bcs	16640 <flatcc_builder_table_add_offset@@Base+0x150>
   16520:	ldr	r0, [r4, #4]
   16524:	add	r1, r0, r5, lsl #1
   16528:	ldrh	r1, [r1]
   1652c:	cmp	r1, #0
   16530:	bne	16660 <flatcc_builder_table_add_offset@@Base+0x170>
   16534:	ldr	r2, [r4, #20]
   16538:	ldr	r1, [r4, #12]
   1653c:	ldr	r3, [r4, #24]
   16540:	add	r2, r2, #3
   16544:	eor	r1, r1, r5
   16548:	bic	r6, r2, #3
   1654c:	movw	r2, #31153	; 0x79b1
   16550:	movt	r2, #40503	; 0x9e37
   16554:	add	r7, r6, #4
   16558:	mul	r1, r1, r2
   1655c:	cmp	r7, r3
   16560:	str	r7, [r4, #20]
   16564:	eor	r1, r1, #4
   16568:	mul	r1, r1, r2
   1656c:	str	r1, [r4, #12]
   16570:	bls	165e4 <flatcc_builder_table_add_offset@@Base+0xf4>
   16574:	ldr	r1, [r4, #28]
   16578:	ldr	r0, [r4, #40]	; 0x28
   1657c:	ldr	ip, [r4, #48]	; 0x30
   16580:	mov	r2, #1
   16584:	mov	r3, #1
   16588:	str	r2, [sp]
   1658c:	add	r2, r1, r7
   16590:	add	r1, r4, #60	; 0x3c
   16594:	blx	ip
   16598:	mov	r1, r0
   1659c:	mov	r0, #0
   165a0:	cmp	r1, #0
   165a4:	beq	165b0 <flatcc_builder_table_add_offset@@Base+0xc0>
   165a8:	sub	sp, fp, #16
   165ac:	pop	{r4, r5, r6, r7, fp, pc}
   165b0:	ldr	r0, [r4, #28]
   165b4:	ldr	r2, [r4, #60]	; 0x3c
   165b8:	ldr	r3, [r4, #64]	; 0x40
   165bc:	ldr	r1, [r4, #32]
   165c0:	add	r2, r2, r0
   165c4:	sub	r0, r3, r0
   165c8:	str	r2, [r4, #16]
   165cc:	movw	r2, #65532	; 0xfffc
   165d0:	cmp	r0, r2
   165d4:	movcs	r0, r2
   165d8:	str	r0, [r4, #24]
   165dc:	str	r2, [r1, #4]
   165e0:	ldr	r0, [r4, #4]
   165e4:	uxth	r1, r5
   165e8:	add	r0, r0, r1, lsl #1
   165ec:	strh	r7, [r0]
   165f0:	ldrh	r0, [r4, #8]
   165f4:	cmp	r0, r1
   165f8:	addls	r0, r5, #1
   165fc:	strhls	r0, [r4, #8]
   16600:	ldr	r0, [r4]
   16604:	add	r1, r0, #2
   16608:	str	r1, [r4]
   1660c:	strh	r6, [r0]
   16610:	ldr	r0, [r4, #16]
   16614:	add	r0, r0, r6
   16618:	sub	sp, fp, #16
   1661c:	pop	{r4, r5, r6, r7, fp, pc}
   16620:	movw	r0, #35959	; 0x8c77
   16624:	movw	r1, #33890	; 0x8462
   16628:	movw	r3, #37739	; 0x936b
   1662c:	movw	r2, #1811	; 0x713
   16630:	movt	r0, #1
   16634:	movt	r1, #1
   16638:	movt	r3, #1
   1663c:	bl	124b4 <__assert_fail@plt>
   16640:	movw	r0, #37611	; 0x92eb
   16644:	movw	r1, #33890	; 0x8462
   16648:	movw	r3, #37739	; 0x936b
   1664c:	movw	r2, #1812	; 0x714
   16650:	movt	r0, #1
   16654:	movt	r1, #1
   16658:	movt	r3, #1
   1665c:	bl	124b4 <__assert_fail@plt>
   16660:	movw	r0, #38408	; 0x9608
   16664:	movw	r1, #33890	; 0x8462
   16668:	movw	r3, #37739	; 0x936b
   1666c:	movw	r2, #1819	; 0x71b
   16670:	movt	r0, #1
   16674:	movt	r1, #1
   16678:	movt	r3, #1
   1667c:	bl	124b4 <__assert_fail@plt>

00016680 <flatcc_builder_table_add@@Base>:
   16680:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   16684:	add	fp, sp, #24
   16688:	sub	sp, sp, #8
   1668c:	mov	r4, r0
   16690:	ldr	r0, [r0, #32]
   16694:	ldrh	r0, [r0, #14]
   16698:	cmp	r0, #3
   1669c:	bne	167bc <flatcc_builder_table_add@@Base+0x13c>
   166a0:	movw	r0, #32765	; 0x7ffd
   166a4:	mov	r8, r1
   166a8:	cmp	r1, r0
   166ac:	bcs	167dc <flatcc_builder_table_add@@Base+0x15c>
   166b0:	ldrh	r0, [r4, #130]	; 0x82
   166b4:	cmp	r0, r3
   166b8:	strhcc	r3, [r4, #130]	; 0x82
   166bc:	ldr	r0, [r4, #4]
   166c0:	add	r1, r0, r8, lsl #1
   166c4:	ldrh	r1, [r1]
   166c8:	cmp	r1, #0
   166cc:	bne	167fc <flatcc_builder_table_add@@Base+0x17c>
   166d0:	ldr	r1, [r4, #12]
   166d4:	movw	r7, #31153	; 0x79b1
   166d8:	ldr	r6, [r4, #20]
   166dc:	ldr	r5, [r4, #24]
   166e0:	movt	r7, #40503	; 0x9e37
   166e4:	eor	r1, r1, r8
   166e8:	mul	r1, r1, r7
   166ec:	eor	r1, r1, r2
   166f0:	mul	r1, r1, r7
   166f4:	str	r1, [r4, #12]
   166f8:	add	r1, r3, r6
   166fc:	rsb	r3, r3, #0
   16700:	sub	r1, r1, #1
   16704:	and	r6, r1, r3
   16708:	add	r1, r6, r2
   1670c:	cmp	r1, r5
   16710:	str	r1, [r4, #20]
   16714:	bcc	1678c <flatcc_builder_table_add@@Base+0x10c>
   16718:	ldr	r2, [r4, #28]
   1671c:	ldr	r0, [r4, #40]	; 0x28
   16720:	ldr	r7, [r4, #48]	; 0x30
   16724:	mov	r3, #1
   16728:	str	r3, [sp]
   1672c:	mov	r3, #1
   16730:	add	r1, r1, r2
   16734:	add	r2, r1, #1
   16738:	add	r1, r4, #60	; 0x3c
   1673c:	blx	r7
   16740:	mov	r1, r0
   16744:	mov	r0, #0
   16748:	cmp	r1, #0
   1674c:	beq	16758 <flatcc_builder_table_add@@Base+0xd8>
   16750:	sub	sp, fp, #24
   16754:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   16758:	ldr	r0, [r4, #28]
   1675c:	ldr	r2, [r4, #60]	; 0x3c
   16760:	ldr	r3, [r4, #64]	; 0x40
   16764:	ldr	r1, [r4, #32]
   16768:	add	r2, r2, r0
   1676c:	sub	r0, r3, r0
   16770:	str	r2, [r4, #16]
   16774:	movw	r2, #65532	; 0xfffc
   16778:	cmp	r0, r2
   1677c:	movcs	r0, r2
   16780:	str	r0, [r4, #24]
   16784:	str	r2, [r1, #4]
   16788:	ldr	r0, [r4, #4]
   1678c:	uxth	r1, r8
   16790:	add	r2, r6, #4
   16794:	add	r0, r0, r1, lsl #1
   16798:	strh	r2, [r0]
   1679c:	ldrh	r0, [r4, #8]
   167a0:	cmp	r0, r1
   167a4:	addls	r0, r8, #1
   167a8:	strhls	r0, [r4, #8]
   167ac:	ldr	r0, [r4, #16]
   167b0:	add	r0, r0, r6
   167b4:	sub	sp, fp, #24
   167b8:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   167bc:	movw	r0, #35959	; 0x8c77
   167c0:	movw	r1, #33890	; 0x8462
   167c4:	movw	r3, #37537	; 0x92a1
   167c8:	movw	r2, #1773	; 0x6ed
   167cc:	movt	r0, #1
   167d0:	movt	r1, #1
   167d4:	movt	r3, #1
   167d8:	bl	124b4 <__assert_fail@plt>
   167dc:	movw	r0, #37611	; 0x92eb
   167e0:	movw	r1, #33890	; 0x8462
   167e4:	movw	r3, #37537	; 0x92a1
   167e8:	movw	r2, #1774	; 0x6ee
   167ec:	movt	r0, #1
   167f0:	movt	r1, #1
   167f4:	movt	r3, #1
   167f8:	bl	124b4 <__assert_fail@plt>
   167fc:	movw	r0, #38408	; 0x9608
   16800:	movw	r1, #33890	; 0x8462
   16804:	movw	r3, #37537	; 0x92a1
   16808:	movw	r2, #1784	; 0x6f8
   1680c:	movt	r0, #1
   16810:	movt	r1, #1
   16814:	movt	r3, #1
   16818:	bl	124b4 <__assert_fail@plt>

0001681c <flatcc_builder_table_add_union_vector@@Base>:
   1681c:	push	{r4, r5, r6, r7, fp, lr}
   16820:	add	fp, sp, #16
   16824:	mov	r6, r0
   16828:	ldr	r0, [r0, #32]
   1682c:	ldrh	r0, [r0, #14]
   16830:	cmp	r0, #3
   16834:	bne	1689c <flatcc_builder_table_add_union_vector@@Base+0x80>
   16838:	clz	r0, r3
   1683c:	mov	r5, r1
   16840:	clz	r1, r2
   16844:	mov	r4, r3
   16848:	mov	r7, r2
   1684c:	lsr	r0, r0, #5
   16850:	lsr	r1, r1, #5
   16854:	cmp	r1, r0
   16858:	bne	168bc <flatcc_builder_table_add_union_vector@@Base+0xa0>
   1685c:	cmp	r7, #0
   16860:	beq	16894 <flatcc_builder_table_add_union_vector@@Base+0x78>
   16864:	sub	r1, r5, #1
   16868:	mov	r0, r6
   1686c:	bl	164f0 <flatcc_builder_table_add_offset@@Base>
   16870:	cmp	r0, #0
   16874:	beq	168dc <flatcc_builder_table_add_union_vector@@Base+0xc0>
   16878:	str	r7, [r0]
   1687c:	mov	r0, r6
   16880:	mov	r1, r5
   16884:	bl	164f0 <flatcc_builder_table_add_offset@@Base>
   16888:	cmp	r0, #0
   1688c:	beq	168fc <flatcc_builder_table_add_union_vector@@Base+0xe0>
   16890:	str	r4, [r0]
   16894:	mov	r0, #0
   16898:	pop	{r4, r5, r6, r7, fp, pc}
   1689c:	movw	r0, #35959	; 0x8c77
   168a0:	movw	r1, #33890	; 0x8462
   168a4:	movw	r3, #36857	; 0x8ff9
   168a8:	mov	r2, #1536	; 0x600
   168ac:	movt	r0, #1
   168b0:	movt	r1, #1
   168b4:	movt	r3, #1
   168b8:	bl	124b4 <__assert_fail@plt>
   168bc:	movw	r0, #36956	; 0x905c
   168c0:	movw	r1, #33890	; 0x8462
   168c4:	movw	r3, #36857	; 0x8ff9
   168c8:	movw	r2, #1537	; 0x601
   168cc:	movt	r0, #1
   168d0:	movt	r1, #1
   168d4:	movt	r3, #1
   168d8:	bl	124b4 <__assert_fail@plt>
   168dc:	movw	r0, #36835	; 0x8fe3
   168e0:	movw	r1, #33890	; 0x8462
   168e4:	movw	r3, #36857	; 0x8ff9
   168e8:	movw	r2, #1540	; 0x604
   168ec:	movt	r0, #1
   168f0:	movt	r1, #1
   168f4:	movt	r3, #1
   168f8:	bl	124b4 <__assert_fail@plt>
   168fc:	movw	r0, #36835	; 0x8fe3
   16900:	movw	r1, #33890	; 0x8462
   16904:	movw	r3, #36857	; 0x8ff9
   16908:	movw	r2, #1544	; 0x608
   1690c:	movt	r0, #1
   16910:	movt	r1, #1
   16914:	movt	r3, #1
   16918:	bl	124b4 <__assert_fail@plt>

0001691c <flatcc_builder_create_union_vector@@Base>:
   1691c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   16920:	add	fp, sp, #28
   16924:	sub	sp, sp, #12
   16928:	mov	r7, #0
   1692c:	mov	r4, r1
   16930:	mov	r5, r0
   16934:	mov	sl, r3
   16938:	mov	r9, r2
   1693c:	mov	r6, #4
   16940:	str	r7, [r0]
   16944:	str	r7, [r0, #4]
   16948:	mov	r0, r1
   1694c:	mov	r1, #4
   16950:	bl	13dd4 <flatcc_builder_start_buffer@@Base+0xbc>
   16954:	cmp	r0, #0
   16958:	beq	16964 <flatcc_builder_create_union_vector@@Base+0x48>
   1695c:	sub	sp, fp, #28
   16960:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   16964:	ldr	r0, [r4, #32]
   16968:	mov	r1, #5
   1696c:	str	r6, [r0, #16]
   16970:	ldr	r0, [r4, #32]
   16974:	str	r7, [r0, #20]
   16978:	ldr	r0, [r4, #32]
   1697c:	strh	r1, [r0, #14]
   16980:	ldr	r1, [r4, #28]
   16984:	ldr	r2, [r4, #60]	; 0x3c
   16988:	ldr	r3, [r4, #64]	; 0x40
   1698c:	add	r2, r2, r1
   16990:	sub	r1, r3, r1
   16994:	str	r2, [r4, #16]
   16998:	mvn	r2, #3
   1699c:	cmn	r1, #4
   169a0:	movcs	r1, r2
   169a4:	str	r1, [r4, #24]
   169a8:	str	r2, [r0, #4]
   169ac:	ldr	r1, [r0, #20]
   169b0:	adds	r1, r1, sl
   169b4:	cmpcc	r1, #1073741824	; 0x40000000
   169b8:	bcc	169dc <flatcc_builder_create_union_vector@@Base+0xc0>
   169bc:	movw	r0, #38161	; 0x9511
   169c0:	movw	r1, #33890	; 0x8462
   169c4:	movw	r3, #38188	; 0x952c
   169c8:	mov	r2, #892	; 0x37c
   169cc:	movt	r0, #1
   169d0:	movt	r1, #1
   169d4:	movt	r3, #1
   169d8:	bl	124b4 <__assert_fail@plt>
   169dc:	str	r1, [r0, #20]
   169e0:	ldr	r7, [r4, #20]
   169e4:	ldr	r0, [r4, #24]
   169e8:	add	r1, r7, sl, lsl #2
   169ec:	cmp	r1, r0
   169f0:	str	r1, [r4, #20]
   169f4:	bcs	16a08 <flatcc_builder_create_union_vector@@Base+0xec>
   169f8:	ldr	r1, [r4, #16]
   169fc:	adds	r2, r1, r7
   16a00:	bne	16a70 <flatcc_builder_create_union_vector@@Base+0x154>
   16a04:	b	1695c <flatcc_builder_create_union_vector@@Base+0x40>
   16a08:	ldr	r2, [r4, #28]
   16a0c:	ldr	r0, [r4, #40]	; 0x28
   16a10:	ldr	r6, [r4, #48]	; 0x30
   16a14:	mov	r3, #1
   16a18:	str	r3, [sp]
   16a1c:	mov	r3, #1
   16a20:	add	r1, r1, r2
   16a24:	add	r2, r1, #1
   16a28:	add	r1, r4, #60	; 0x3c
   16a2c:	blx	r6
   16a30:	cmp	r0, #0
   16a34:	bne	1695c <flatcc_builder_create_union_vector@@Base+0x40>
   16a38:	ldr	r0, [r4, #28]
   16a3c:	ldr	r1, [r4, #60]	; 0x3c
   16a40:	ldr	r3, [r4, #64]	; 0x40
   16a44:	ldr	r2, [r4, #32]
   16a48:	add	r1, r1, r0
   16a4c:	sub	r0, r3, r0
   16a50:	mvn	r3, #3
   16a54:	cmn	r0, #4
   16a58:	str	r1, [r4, #16]
   16a5c:	movcs	r0, r3
   16a60:	str	r0, [r4, #24]
   16a64:	str	r3, [r2, #4]
   16a68:	adds	r2, r1, r7
   16a6c:	beq	1695c <flatcc_builder_create_union_vector@@Base+0x40>
   16a70:	ldr	r7, [r4, #20]
   16a74:	add	r2, r7, sl
   16a78:	cmp	r2, r0
   16a7c:	str	r2, [r4, #20]
   16a80:	bcc	16ae4 <flatcc_builder_create_union_vector@@Base+0x1c8>
   16a84:	ldr	r1, [r4, #28]
   16a88:	ldr	r0, [r4, #40]	; 0x28
   16a8c:	ldr	r6, [r4, #48]	; 0x30
   16a90:	mov	r3, #1
   16a94:	str	r3, [sp]
   16a98:	mov	r3, #1
   16a9c:	add	r1, r2, r1
   16aa0:	add	r2, r1, #1
   16aa4:	add	r1, r4, #60	; 0x3c
   16aa8:	blx	r6
   16aac:	cmp	r0, #0
   16ab0:	bne	1695c <flatcc_builder_create_union_vector@@Base+0x40>
   16ab4:	ldr	r0, [r4, #28]
   16ab8:	ldr	r1, [r4, #60]	; 0x3c
   16abc:	ldr	r3, [r4, #64]	; 0x40
   16ac0:	ldr	r2, [r4, #32]
   16ac4:	add	r1, r1, r0
   16ac8:	sub	r0, r3, r0
   16acc:	mvn	r3, #3
   16ad0:	cmn	r0, #4
   16ad4:	str	r1, [r4, #16]
   16ad8:	movcs	r0, r3
   16adc:	str	r0, [r4, #24]
   16ae0:	str	r3, [r2, #4]
   16ae4:	adds	r8, r1, r7
   16ae8:	beq	1695c <flatcc_builder_create_union_vector@@Base+0x40>
   16aec:	cmp	sl, #0
   16af0:	beq	16b20 <flatcc_builder_create_union_vector@@Base+0x204>
   16af4:	add	r0, r9, #4
   16af8:	mov	r2, sl
   16afc:	mov	r3, r1
   16b00:	mov	r7, r8
   16b04:	ldrb	r6, [r0, #-4]
   16b08:	subs	r2, r2, #1
   16b0c:	strb	r6, [r7], #1
   16b10:	ldr	r6, [r0]
   16b14:	add	r0, r0, #8
   16b18:	str	r6, [r3], #4
   16b1c:	bne	16b04 <flatcc_builder_create_union_vector@@Base+0x1e8>
   16b20:	mov	r0, r4
   16b24:	mov	r2, sl
   16b28:	mov	r3, r8
   16b2c:	bl	160e4 <flatcc_builder_create_offset_vector_direct@@Base+0x8>
   16b30:	mov	r7, r0
   16b34:	mov	r9, #0
   16b38:	cmp	r0, #0
   16b3c:	beq	16b68 <flatcc_builder_create_union_vector@@Base+0x24c>
   16b40:	mvn	r0, #0
   16b44:	mov	r1, #1
   16b48:	mov	r2, sl
   16b4c:	mov	r3, #1
   16b50:	str	r1, [sp]
   16b54:	str	r0, [sp, #4]
   16b58:	mov	r0, r4
   16b5c:	mov	r1, r8
   16b60:	bl	15e80 <flatcc_builder_create_vector@@Base>
   16b64:	b	16b6c <flatcc_builder_create_union_vector@@Base+0x250>
   16b68:	mov	r0, #0
   16b6c:	orr	r1, r9, r7
   16b70:	stm	r5, {r0, r1}
   16b74:	mov	r1, #0
   16b78:	ldr	r0, [r4, #16]
   16b7c:	ldr	r2, [r4, #20]
   16b80:	bl	12484 <memset@plt>
   16b84:	ldr	r0, [r4, #32]
   16b88:	ldr	r1, [r4, #60]	; 0x3c
   16b8c:	ldr	r2, [r4, #64]	; 0x40
   16b90:	ldr	r3, [r0, #8]
   16b94:	str	r3, [r4, #20]
   16b98:	ldr	r3, [r0]
   16b9c:	str	r3, [r4, #28]
   16ba0:	add	r1, r1, r3
   16ba4:	ldr	r7, [r0, #4]
   16ba8:	str	r1, [r4, #16]
   16bac:	sub	r1, r2, r3
   16bb0:	cmp	r1, r7
   16bb4:	movhi	r1, r7
   16bb8:	str	r1, [r4, #24]
   16bbc:	ldrh	r1, [r4, #130]	; 0x82
   16bc0:	ldrh	r2, [r4, #128]	; 0x80
   16bc4:	cmp	r2, r1
   16bc8:	strhcc	r1, [r4, #128]	; 0x80
   16bcc:	ldrh	r1, [r0, #12]
   16bd0:	sub	r0, r0, #36	; 0x24
   16bd4:	str	r0, [r4, #32]
   16bd8:	strh	r1, [r4, #130]	; 0x82
   16bdc:	ldr	r0, [r4, #156]	; 0x9c
   16be0:	sub	r0, r0, #1
   16be4:	str	r0, [r4, #156]	; 0x9c
   16be8:	sub	sp, fp, #28
   16bec:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}

00016bf0 <flatcc_builder_create_union_vector_direct@@Base>:
   16bf0:	push	{r4, r5, r6, r7, fp, lr}
   16bf4:	add	fp, sp, #16
   16bf8:	sub	sp, sp, #8
   16bfc:	ldr	r7, [fp, #8]
   16c00:	mov	r5, r2
   16c04:	mov	r4, r0
   16c08:	mov	r0, #0
   16c0c:	mov	r6, r1
   16c10:	str	r0, [r4]
   16c14:	str	r0, [r4, #4]
   16c18:	mov	r0, r1
   16c1c:	mov	r1, r3
   16c20:	mov	r3, r5
   16c24:	mov	r2, r7
   16c28:	bl	160e4 <flatcc_builder_create_offset_vector_direct@@Base+0x8>
   16c2c:	cmp	r0, #0
   16c30:	str	r0, [r4, #4]
   16c34:	beq	16c60 <flatcc_builder_create_union_vector_direct@@Base+0x70>
   16c38:	mvn	r0, #0
   16c3c:	mov	r1, #1
   16c40:	mov	r2, r7
   16c44:	mov	r3, #1
   16c48:	str	r1, [sp]
   16c4c:	str	r0, [sp, #4]
   16c50:	mov	r0, r6
   16c54:	mov	r1, r5
   16c58:	bl	15e80 <flatcc_builder_create_vector@@Base>
   16c5c:	str	r0, [r4]
   16c60:	sub	sp, fp, #16
   16c64:	pop	{r4, r5, r6, r7, fp, pc}

00016c68 <flatcc_builder_start_union_vector@@Base>:
   16c68:	push	{r4, sl, fp, lr}
   16c6c:	add	fp, sp, #8
   16c70:	mov	r1, #4
   16c74:	mov	r4, r0
   16c78:	bl	13dd4 <flatcc_builder_start_buffer@@Base+0xbc>
   16c7c:	mov	r1, r0
   16c80:	mvn	r0, #0
   16c84:	cmp	r1, #0
   16c88:	popne	{r4, sl, fp, pc}
   16c8c:	ldr	r0, [r4, #32]
   16c90:	mov	r1, #8
   16c94:	mov	r2, #7
   16c98:	str	r1, [r0, #16]
   16c9c:	mov	r0, #0
   16ca0:	ldr	r1, [r4, #32]
   16ca4:	str	r0, [r1, #20]
   16ca8:	ldr	r1, [r4, #32]
   16cac:	strh	r2, [r1, #14]
   16cb0:	ldr	r2, [r4, #28]
   16cb4:	ldr	r3, [r4, #60]	; 0x3c
   16cb8:	ldr	ip, [r4, #64]	; 0x40
   16cbc:	add	r3, r3, r2
   16cc0:	sub	r2, ip, r2
   16cc4:	str	r3, [r4, #16]
   16cc8:	mvn	r3, #3
   16ccc:	cmn	r2, #4
   16cd0:	movcs	r2, r3
   16cd4:	str	r2, [r4, #24]
   16cd8:	str	r3, [r1, #4]
   16cdc:	pop	{r4, sl, fp, pc}

00016ce0 <flatcc_builder_end_union_vector@@Base>:
   16ce0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   16ce4:	add	fp, sp, #28
   16ce8:	sub	sp, sp, #12
   16cec:	mov	sl, r0
   16cf0:	mov	r0, #0
   16cf4:	mov	r4, r1
   16cf8:	str	r0, [sl]
   16cfc:	str	r0, [sl, #4]
   16d00:	ldr	r0, [r1, #32]
   16d04:	ldrh	r1, [r0, #14]
   16d08:	cmp	r1, #7
   16d0c:	bne	16eb4 <flatcc_builder_end_union_vector@@Base+0x1d4>
   16d10:	ldr	r6, [r0, #20]
   16d14:	ldr	r7, [r4, #20]
   16d18:	ldr	r2, [r4, #24]
   16d1c:	add	r0, r6, r6, lsl #2
   16d20:	add	r1, r7, r0
   16d24:	cmp	r1, r2
   16d28:	str	r1, [r4, #20]
   16d2c:	bcs	16dbc <flatcc_builder_end_union_vector@@Base+0xdc>
   16d30:	ldr	r0, [r4, #16]
   16d34:	adds	r1, r0, r7
   16d38:	beq	16e24 <flatcc_builder_end_union_vector@@Base+0x144>
   16d3c:	add	r8, r1, r6, lsl #2
   16d40:	cmp	r6, #0
   16d44:	beq	16d74 <flatcc_builder_end_union_vector@@Base+0x94>
   16d48:	add	r0, r0, #4
   16d4c:	mov	r2, r6
   16d50:	mov	r3, r1
   16d54:	mov	r7, r8
   16d58:	ldrb	r5, [r0, #-4]
   16d5c:	subs	r2, r2, #1
   16d60:	strb	r5, [r7], #1
   16d64:	ldr	r5, [r0]
   16d68:	add	r0, r0, #8
   16d6c:	str	r5, [r3], #4
   16d70:	bne	16d58 <flatcc_builder_end_union_vector@@Base+0x78>
   16d74:	mov	r0, r4
   16d78:	mov	r2, r6
   16d7c:	mov	r3, r8
   16d80:	bl	160e4 <flatcc_builder_create_offset_vector_direct@@Base+0x8>
   16d84:	mov	r7, r0
   16d88:	mov	r9, #0
   16d8c:	cmp	r0, #0
   16d90:	beq	16e2c <flatcc_builder_end_union_vector@@Base+0x14c>
   16d94:	mvn	r0, #0
   16d98:	mov	r1, #1
   16d9c:	mov	r2, r6
   16da0:	mov	r3, #1
   16da4:	str	r1, [sp]
   16da8:	str	r0, [sp, #4]
   16dac:	mov	r0, r4
   16db0:	mov	r1, r8
   16db4:	bl	15e80 <flatcc_builder_create_vector@@Base>
   16db8:	b	16e30 <flatcc_builder_end_union_vector@@Base+0x150>
   16dbc:	ldr	r2, [r4, #28]
   16dc0:	ldr	r0, [r4, #40]	; 0x28
   16dc4:	ldr	r5, [r4, #48]	; 0x30
   16dc8:	mov	r3, #1
   16dcc:	str	r3, [sp]
   16dd0:	mov	r3, #1
   16dd4:	add	r1, r1, r2
   16dd8:	add	r2, r1, #1
   16ddc:	add	r1, r4, #60	; 0x3c
   16de0:	blx	r5
   16de4:	cmp	r0, #0
   16de8:	bne	16e24 <flatcc_builder_end_union_vector@@Base+0x144>
   16dec:	ldr	r1, [r4, #28]
   16df0:	ldr	r0, [r4, #60]	; 0x3c
   16df4:	ldr	r3, [r4, #64]	; 0x40
   16df8:	ldr	r2, [r4, #32]
   16dfc:	add	r0, r0, r1
   16e00:	sub	r1, r3, r1
   16e04:	mvn	r3, #3
   16e08:	cmn	r1, #4
   16e0c:	str	r0, [r4, #16]
   16e10:	movcs	r1, r3
   16e14:	str	r1, [r4, #24]
   16e18:	str	r3, [r2, #4]
   16e1c:	adds	r1, r0, r7
   16e20:	bne	16d3c <flatcc_builder_end_union_vector@@Base+0x5c>
   16e24:	sub	sp, fp, #28
   16e28:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   16e2c:	mov	r0, #0
   16e30:	orr	r1, r9, r7
   16e34:	stm	sl, {r0, r1}
   16e38:	mov	r1, #0
   16e3c:	ldr	r0, [r4, #16]
   16e40:	ldr	r2, [r4, #20]
   16e44:	bl	12484 <memset@plt>
   16e48:	ldr	r0, [r4, #32]
   16e4c:	ldr	r1, [r4, #60]	; 0x3c
   16e50:	ldr	r2, [r4, #64]	; 0x40
   16e54:	ldr	r3, [r0, #8]
   16e58:	str	r3, [r4, #20]
   16e5c:	ldr	r3, [r0]
   16e60:	str	r3, [r4, #28]
   16e64:	add	r1, r1, r3
   16e68:	ldr	r7, [r0, #4]
   16e6c:	str	r1, [r4, #16]
   16e70:	sub	r1, r2, r3
   16e74:	cmp	r1, r7
   16e78:	movhi	r1, r7
   16e7c:	str	r1, [r4, #24]
   16e80:	ldrh	r1, [r4, #130]	; 0x82
   16e84:	ldrh	r2, [r4, #128]	; 0x80
   16e88:	cmp	r2, r1
   16e8c:	strhcc	r1, [r4, #128]	; 0x80
   16e90:	ldrh	r1, [r0, #12]
   16e94:	sub	r0, r0, #36	; 0x24
   16e98:	str	r0, [r4, #32]
   16e9c:	strh	r1, [r4, #130]	; 0x82
   16ea0:	ldr	r0, [r4, #156]	; 0x9c
   16ea4:	sub	r0, r0, #1
   16ea8:	str	r0, [r4, #156]	; 0x9c
   16eac:	sub	sp, fp, #28
   16eb0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   16eb4:	movw	r0, #36996	; 0x9084
   16eb8:	movw	r1, #33890	; 0x8462
   16ebc:	movw	r3, #37046	; 0x90b6
   16ec0:	movw	r2, #1617	; 0x651
   16ec4:	movt	r0, #1
   16ec8:	movt	r1, #1
   16ecc:	movt	r3, #1
   16ed0:	bl	124b4 <__assert_fail@plt>

00016ed4 <flatcc_builder_union_vector_count@@Base>:
   16ed4:	ldr	r0, [r0, #32]
   16ed8:	ldr	r0, [r0, #20]
   16edc:	bx	lr

00016ee0 <flatcc_builder_union_vector_edit@@Base>:
   16ee0:	ldr	r0, [r0, #16]
   16ee4:	bx	lr

00016ee8 <flatcc_builder_extend_union_vector@@Base>:
   16ee8:	push	{r4, r5, fp, lr}
   16eec:	add	fp, sp, #8
   16ef0:	sub	sp, sp, #8
   16ef4:	mov	r4, r0
   16ef8:	ldr	r0, [r0, #32]
   16efc:	ldr	r2, [r0, #20]
   16f00:	adds	r2, r2, r1
   16f04:	cmpcc	r2, #536870912	; 0x20000000
   16f08:	bcc	16f2c <flatcc_builder_extend_union_vector@@Base+0x44>
   16f0c:	movw	r0, #38161	; 0x9511
   16f10:	movw	r1, #33890	; 0x8462
   16f14:	movw	r3, #38188	; 0x952c
   16f18:	mov	r2, #892	; 0x37c
   16f1c:	movt	r0, #1
   16f20:	movt	r1, #1
   16f24:	movt	r3, #1
   16f28:	bl	124b4 <__assert_fail@plt>
   16f2c:	str	r2, [r0, #20]
   16f30:	ldr	r5, [r4, #20]
   16f34:	ldr	r0, [r4, #24]
   16f38:	add	r1, r5, r1, lsl #3
   16f3c:	cmp	r1, r0
   16f40:	str	r1, [r4, #20]
   16f44:	bcs	16f58 <flatcc_builder_extend_union_vector@@Base+0x70>
   16f48:	ldr	r0, [r4, #16]
   16f4c:	add	r0, r0, r5
   16f50:	sub	sp, fp, #8
   16f54:	pop	{r4, r5, fp, pc}
   16f58:	ldr	r2, [r4, #28]
   16f5c:	ldr	r0, [r4, #40]	; 0x28
   16f60:	ldr	ip, [r4, #48]	; 0x30
   16f64:	mov	r3, #1
   16f68:	str	r3, [sp]
   16f6c:	mov	r3, #1
   16f70:	add	r1, r1, r2
   16f74:	add	r2, r1, #1
   16f78:	add	r1, r4, #60	; 0x3c
   16f7c:	blx	ip
   16f80:	mov	r1, r0
   16f84:	mov	r0, #0
   16f88:	cmp	r1, #0
   16f8c:	beq	16f98 <flatcc_builder_extend_union_vector@@Base+0xb0>
   16f90:	sub	sp, fp, #8
   16f94:	pop	{r4, r5, fp, pc}
   16f98:	ldr	r1, [r4, #28]
   16f9c:	ldr	r0, [r4, #60]	; 0x3c
   16fa0:	ldr	r3, [r4, #64]	; 0x40
   16fa4:	ldr	r2, [r4, #32]
   16fa8:	add	r0, r0, r1
   16fac:	sub	r1, r3, r1
   16fb0:	mvn	r3, #3
   16fb4:	cmn	r1, #4
   16fb8:	str	r0, [r4, #16]
   16fbc:	movcs	r1, r3
   16fc0:	str	r1, [r4, #24]
   16fc4:	str	r3, [r2, #4]
   16fc8:	add	r0, r0, r5
   16fcc:	sub	sp, fp, #8
   16fd0:	pop	{r4, r5, fp, pc}

00016fd4 <flatcc_builder_truncate_union_vector@@Base>:
   16fd4:	push	{fp, lr}
   16fd8:	mov	fp, sp
   16fdc:	ldr	r2, [r0, #32]
   16fe0:	ldrh	r3, [r2, #14]
   16fe4:	cmp	r3, #7
   16fe8:	bne	17030 <flatcc_builder_truncate_union_vector@@Base+0x5c>
   16fec:	ldr	r3, [r2, #20]
   16ff0:	cmp	r3, r1
   16ff4:	bcc	17050 <flatcc_builder_truncate_union_vector@@Base+0x7c>
   16ff8:	sub	r3, r3, r1
   16ffc:	str	r3, [r2, #20]
   17000:	ldr	r2, [r0, #32]
   17004:	ldr	r3, [r0, #20]
   17008:	ldr	ip, [r0, #16]
   1700c:	ldr	r2, [r2, #16]
   17010:	mls	r3, r2, r1, r3
   17014:	mul	r2, r2, r1
   17018:	mov	r1, #0
   1701c:	str	r3, [r0, #20]
   17020:	add	r0, ip, r3
   17024:	bl	12484 <memset@plt>
   17028:	mov	r0, #0
   1702c:	pop	{fp, pc}
   17030:	movw	r0, #36996	; 0x9084
   17034:	movw	r1, #33890	; 0x8462
   17038:	movw	r3, #37129	; 0x9109
   1703c:	movw	r2, #1665	; 0x681
   17040:	movt	r0, #1
   17044:	movt	r1, #1
   17048:	movt	r3, #1
   1704c:	bl	124b4 <__assert_fail@plt>
   17050:	movw	r0, #35560	; 0x8ae8
   17054:	movw	r1, #33890	; 0x8462
   17058:	movw	r3, #37129	; 0x9109
   1705c:	movw	r2, #1666	; 0x682
   17060:	movt	r0, #1
   17064:	movt	r1, #1
   17068:	movt	r3, #1
   1706c:	bl	124b4 <__assert_fail@plt>

00017070 <flatcc_builder_union_vector_push@@Base>:
   17070:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   17074:	add	fp, sp, #24
   17078:	sub	sp, sp, #8
   1707c:	mov	r7, r0
   17080:	ldr	r0, [r0, #32]
   17084:	mov	r9, r1
   17088:	ldrh	r1, [r0, #14]
   1708c:	cmp	r1, #7
   17090:	bne	17158 <flatcc_builder_union_vector_push@@Base+0xe8>
   17094:	ldr	r1, [r0, #20]
   17098:	mov	r6, #0
   1709c:	cmn	r1, #-536870911	; 0xe0000001
   170a0:	beq	17100 <flatcc_builder_union_vector_push@@Base+0x90>
   170a4:	add	r1, r1, #1
   170a8:	mov	r8, r2
   170ac:	str	r1, [r0, #20]
   170b0:	ldr	r4, [r7, #20]
   170b4:	ldr	r0, [r7, #24]
   170b8:	add	r1, r4, #8
   170bc:	cmp	r1, r0
   170c0:	str	r1, [r7, #20]
   170c4:	bcs	170d0 <flatcc_builder_union_vector_push@@Base+0x60>
   170c8:	ldr	r0, [r7, #16]
   170cc:	b	1713c <flatcc_builder_union_vector_push@@Base+0xcc>
   170d0:	ldr	r1, [r7, #28]
   170d4:	ldr	r0, [r7, #40]	; 0x28
   170d8:	ldr	r5, [r7, #48]	; 0x30
   170dc:	mov	r2, #1
   170e0:	mov	r3, #1
   170e4:	str	r2, [sp]
   170e8:	add	r1, r4, r1
   170ec:	add	r2, r1, #9
   170f0:	add	r1, r7, #60	; 0x3c
   170f4:	blx	r5
   170f8:	cmp	r0, #0
   170fc:	beq	1710c <flatcc_builder_union_vector_push@@Base+0x9c>
   17100:	mov	r0, r6
   17104:	sub	sp, fp, #24
   17108:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   1710c:	ldr	r1, [r7, #28]
   17110:	ldr	r0, [r7, #60]	; 0x3c
   17114:	ldr	r3, [r7, #64]	; 0x40
   17118:	ldr	r2, [r7, #32]
   1711c:	add	r0, r0, r1
   17120:	sub	r1, r3, r1
   17124:	mvn	r3, #3
   17128:	cmn	r1, #4
   1712c:	str	r0, [r7, #16]
   17130:	movcs	r1, r3
   17134:	str	r1, [r7, #24]
   17138:	str	r3, [r2, #4]
   1713c:	adds	r0, r0, r4
   17140:	movne	r6, r0
   17144:	strne	r9, [r0]
   17148:	strne	r8, [r0, #4]
   1714c:	mov	r0, r6
   17150:	sub	sp, fp, #24
   17154:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   17158:	movw	r0, #36996	; 0x9084
   1715c:	movw	r1, #33890	; 0x8462
   17160:	movw	r3, #37198	; 0x914e
   17164:	movw	r2, #1677	; 0x68d
   17168:	movt	r0, #1
   1716c:	movt	r1, #1
   17170:	movt	r3, #1
   17174:	bl	124b4 <__assert_fail@plt>

00017178 <flatcc_builder_append_union_vector@@Base>:
   17178:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   1717c:	add	fp, sp, #24
   17180:	sub	sp, sp, #8
   17184:	mov	r6, r0
   17188:	ldr	r0, [r0, #32]
   1718c:	mov	r8, r1
   17190:	ldrh	r1, [r0, #14]
   17194:	cmp	r1, #7
   17198:	bne	1729c <flatcc_builder_append_union_vector@@Base+0x124>
   1719c:	ldr	r1, [r0, #20]
   171a0:	mov	r5, r2
   171a4:	adds	r1, r1, r2
   171a8:	cmpcc	r1, #536870912	; 0x20000000
   171ac:	bcc	171d0 <flatcc_builder_append_union_vector@@Base+0x58>
   171b0:	movw	r0, #38161	; 0x9511
   171b4:	movw	r1, #33890	; 0x8462
   171b8:	movw	r3, #38188	; 0x952c
   171bc:	mov	r2, #892	; 0x37c
   171c0:	movt	r0, #1
   171c4:	movt	r1, #1
   171c8:	movt	r3, #1
   171cc:	bl	124b4 <__assert_fail@plt>
   171d0:	str	r1, [r0, #20]
   171d4:	ldr	r4, [r6, #20]
   171d8:	ldr	r0, [r6, #24]
   171dc:	add	r1, r4, r5, lsl #3
   171e0:	cmp	r1, r0
   171e4:	str	r1, [r6, #20]
   171e8:	bcs	17214 <flatcc_builder_append_union_vector@@Base+0x9c>
   171ec:	ldr	r0, [r6, #16]
   171f0:	adds	r7, r0, r4
   171f4:	beq	1728c <flatcc_builder_append_union_vector@@Base+0x114>
   171f8:	lsl	r2, r5, #3
   171fc:	mov	r0, r7
   17200:	mov	r1, r8
   17204:	bl	12400 <memcpy@plt>
   17208:	mov	r0, r7
   1720c:	sub	sp, fp, #24
   17210:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   17214:	ldr	r2, [r6, #28]
   17218:	ldr	r0, [r6, #40]	; 0x28
   1721c:	ldr	r7, [r6, #48]	; 0x30
   17220:	mov	r3, #1
   17224:	str	r3, [sp]
   17228:	mov	r3, #1
   1722c:	add	r1, r1, r2
   17230:	add	r2, r1, #1
   17234:	add	r1, r6, #60	; 0x3c
   17238:	blx	r7
   1723c:	mov	r7, #0
   17240:	cmp	r0, #0
   17244:	beq	17254 <flatcc_builder_append_union_vector@@Base+0xdc>
   17248:	mov	r0, r7
   1724c:	sub	sp, fp, #24
   17250:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   17254:	ldr	r1, [r6, #28]
   17258:	ldr	r0, [r6, #60]	; 0x3c
   1725c:	ldr	r3, [r6, #64]	; 0x40
   17260:	ldr	r2, [r6, #32]
   17264:	add	r0, r0, r1
   17268:	sub	r1, r3, r1
   1726c:	mvn	r3, #3
   17270:	cmn	r1, #4
   17274:	str	r0, [r6, #16]
   17278:	movcs	r1, r3
   1727c:	str	r1, [r6, #24]
   17280:	str	r3, [r2, #4]
   17284:	adds	r7, r0, r4
   17288:	bne	171f8 <flatcc_builder_append_union_vector@@Base+0x80>
   1728c:	mov	r7, #0
   17290:	mov	r0, r7
   17294:	sub	sp, fp, #24
   17298:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   1729c:	movw	r0, #36996	; 0x9084
   172a0:	movw	r1, #33890	; 0x8462
   172a4:	movw	r3, #37307	; 0x91bb
   172a8:	movw	r2, #1692	; 0x69c
   172ac:	movt	r0, #1
   172b0:	movt	r1, #1
   172b4:	movt	r3, #1
   172b8:	bl	124b4 <__assert_fail@plt>

000172bc <flatcc_builder_create_string@@Base>:
   172bc:	push	{r4, r5, r6, sl, fp, lr}
   172c0:	add	fp, sp, #16
   172c4:	sub	sp, sp, #80	; 0x50
   172c8:	str	r2, [fp, #-20]	; 0xffffffec
   172cc:	mvn	r5, r2
   172d0:	mov	r6, r0
   172d4:	mov	r3, #1
   172d8:	cmp	r2, #0
   172dc:	ldr	ip, [r0, #136]	; 0x88
   172e0:	sub	r0, fp, #20
   172e4:	str	r0, [sp, #12]
   172e8:	mov	r0, #4
   172ec:	str	r0, [sp, #4]
   172f0:	str	r0, [sp, #16]
   172f4:	str	r3, [sp, #8]
   172f8:	add	r5, ip, r5
   172fc:	and	r5, r5, #3
   17300:	add	r5, r5, #1
   17304:	beq	17320 <flatcc_builder_create_string@@Base+0x64>
   17308:	mov	r3, #2
   1730c:	add	r0, r2, #4
   17310:	str	r1, [sp, #20]
   17314:	str	r2, [sp, #24]
   17318:	str	r3, [sp, #8]
   1731c:	str	r0, [sp, #4]
   17320:	movw	r2, #33360	; 0x8250
   17324:	add	lr, sp, #4
   17328:	add	r1, r0, r5
   1732c:	add	r0, lr, r3, lsl #3
   17330:	movt	r2, #1
   17334:	str	r1, [sp, #4]
   17338:	cmp	r1, #0
   1733c:	str	r2, [r0, #8]
   17340:	add	r2, r3, #1
   17344:	str	r5, [r0, #12]
   17348:	str	r2, [sp, #8]
   1734c:	ble	173a0 <flatcc_builder_create_string@@Base+0xe4>
   17350:	ldr	r0, [r6, #36]	; 0x24
   17354:	ldr	r4, [r6, #44]	; 0x2c
   17358:	sub	r5, ip, r1
   1735c:	str	r1, [sp]
   17360:	add	r1, lr, #8
   17364:	mov	r3, r5
   17368:	blx	r4
   1736c:	cmp	r0, #0
   17370:	streq	r5, [r6, #136]	; 0x88
   17374:	moveq	r0, r5
   17378:	subeq	sp, fp, #16
   1737c:	popeq	{r4, r5, r6, sl, fp, pc}
   17380:	movw	r0, #38408	; 0x9608
   17384:	movw	r1, #33890	; 0x8462
   17388:	movw	r3, #38087	; 0x94c7
   1738c:	movw	r2, #651	; 0x28b
   17390:	movt	r0, #1
   17394:	movt	r1, #1
   17398:	movt	r3, #1
   1739c:	bl	124b4 <__assert_fail@plt>
   173a0:	movw	r0, #38408	; 0x9608
   173a4:	movw	r1, #33890	; 0x8462
   173a8:	movw	r3, #38087	; 0x94c7
   173ac:	movw	r2, #647	; 0x287
   173b0:	movt	r0, #1
   173b4:	movt	r1, #1
   173b8:	movt	r3, #1
   173bc:	bl	124b4 <__assert_fail@plt>

000173c0 <flatcc_builder_create_string_str@@Base>:
   173c0:	push	{r4, r5, fp, lr}
   173c4:	add	fp, sp, #8
   173c8:	mov	r5, r0
   173cc:	mov	r0, r1
   173d0:	mov	r4, r1
   173d4:	bl	12460 <strlen@plt>
   173d8:	mov	r2, r0
   173dc:	mov	r0, r5
   173e0:	mov	r1, r4
   173e4:	pop	{r4, r5, fp, lr}
   173e8:	b	172bc <flatcc_builder_create_string@@Base>

000173ec <flatcc_builder_create_string_strn@@Base>:
   173ec:	push	{r4, r5, r6, sl, fp, lr}
   173f0:	add	fp, sp, #16
   173f4:	mov	r6, r0
   173f8:	mov	r5, r1
   173fc:	mov	r0, r1
   17400:	mov	r1, #0
   17404:	mov	r4, r2
   17408:	bl	12490 <memchr@plt>
   1740c:	cmp	r0, #0
   17410:	mov	r1, r5
   17414:	subne	r4, r0, r5
   17418:	mov	r0, r6
   1741c:	mov	r2, r4
   17420:	pop	{r4, r5, r6, sl, fp, lr}
   17424:	b	172bc <flatcc_builder_create_string@@Base>

00017428 <flatcc_builder_end_string@@Base>:
   17428:	push	{r4, r5, fp, lr}
   1742c:	add	fp, sp, #8
   17430:	mov	r4, r0
   17434:	ldr	r0, [r0, #32]
   17438:	ldrh	r1, [r0, #14]
   1743c:	cmp	r1, #6
   17440:	bne	174e8 <flatcc_builder_end_string@@Base+0xc0>
   17444:	ldr	r2, [r0, #20]
   17448:	ldr	r0, [r4, #20]
   1744c:	cmp	r2, r0
   17450:	bne	17508 <flatcc_builder_end_string@@Base+0xe0>
   17454:	ldr	r1, [r4, #16]
   17458:	mov	r0, r4
   1745c:	bl	172bc <flatcc_builder_create_string@@Base>
   17460:	mov	r5, r0
   17464:	cmp	r0, #0
   17468:	beq	174e0 <flatcc_builder_end_string@@Base+0xb8>
   1746c:	ldr	r0, [r4, #16]
   17470:	ldr	r2, [r4, #20]
   17474:	mov	r1, #0
   17478:	bl	12484 <memset@plt>
   1747c:	ldr	r0, [r4, #32]
   17480:	ldr	r1, [r4, #60]	; 0x3c
   17484:	ldr	ip, [r4, #64]	; 0x40
   17488:	ldr	r3, [r0, #8]
   1748c:	str	r3, [r4, #20]
   17490:	ldr	r3, [r0]
   17494:	str	r3, [r4, #28]
   17498:	add	r1, r1, r3
   1749c:	ldr	r2, [r0, #4]
   174a0:	str	r1, [r4, #16]
   174a4:	sub	r1, ip, r3
   174a8:	cmp	r1, r2
   174ac:	movhi	r1, r2
   174b0:	str	r1, [r4, #24]
   174b4:	ldrh	r1, [r4, #130]	; 0x82
   174b8:	ldrh	r2, [r4, #128]	; 0x80
   174bc:	cmp	r2, r1
   174c0:	strhcc	r1, [r4, #128]	; 0x80
   174c4:	ldrh	r1, [r0, #12]
   174c8:	sub	r0, r0, #36	; 0x24
   174cc:	str	r0, [r4, #32]
   174d0:	strh	r1, [r4, #130]	; 0x82
   174d4:	ldr	r0, [r4, #156]	; 0x9c
   174d8:	sub	r0, r0, #1
   174dc:	str	r0, [r4, #156]	; 0x9c
   174e0:	mov	r0, r5
   174e4:	pop	{r4, r5, fp, pc}
   174e8:	movw	r0, #35207	; 0x8987
   174ec:	movw	r1, #33890	; 0x8462
   174f0:	movw	r3, #37434	; 0x923a
   174f4:	movw	r2, #1732	; 0x6c4
   174f8:	movt	r0, #1
   174fc:	movt	r1, #1
   17500:	movt	r3, #1
   17504:	bl	124b4 <__assert_fail@plt>
   17508:	movw	r0, #37501	; 0x927d
   1750c:	movw	r1, #33890	; 0x8462
   17510:	movw	r3, #37434	; 0x923a
   17514:	movw	r2, #1733	; 0x6c5
   17518:	movt	r0, #1
   1751c:	movt	r1, #1
   17520:	movt	r3, #1
   17524:	bl	124b4 <__assert_fail@plt>

00017528 <flatcc_builder_string_edit@@Base>:
   17528:	ldr	r0, [r0, #16]
   1752c:	bx	lr

00017530 <flatcc_builder_string_len@@Base>:
   17530:	ldr	r0, [r0, #32]
   17534:	ldr	r0, [r0, #20]
   17538:	bx	lr

0001753c <flatcc_builder_table_edit@@Base>:
   1753c:	ldr	r2, [r0, #32]
   17540:	ldrh	r2, [r2, #14]
   17544:	cmp	r2, #3
   17548:	ldreq	r2, [r0, #16]
   1754c:	ldreq	r0, [r0, #20]
   17550:	addeq	r0, r2, r0
   17554:	subeq	r0, r0, r1
   17558:	bxeq	lr
   1755c:	push	{fp, lr}
   17560:	mov	fp, sp
   17564:	movw	r0, #35959	; 0x8c77
   17568:	movw	r1, #33890	; 0x8462
   1756c:	movw	r3, #37679	; 0x932f
   17570:	movw	r2, #1794	; 0x702
   17574:	movt	r0, #1
   17578:	movt	r1, #1
   1757c:	movt	r3, #1
   17580:	bl	124b4 <__assert_fail@plt>

00017584 <flatcc_builder_table_add_copy@@Base>:
   17584:	push	{r4, r5, r6, sl, fp, lr}
   17588:	add	fp, sp, #16
   1758c:	mov	r4, r3
   17590:	ldr	r3, [fp, #8]
   17594:	mov	r5, r2
   17598:	mov	r2, r4
   1759c:	bl	16680 <flatcc_builder_table_add@@Base>
   175a0:	mov	r6, r0
   175a4:	cmp	r0, #0
   175a8:	beq	175bc <flatcc_builder_table_add_copy@@Base+0x38>
   175ac:	mov	r0, r6
   175b0:	mov	r1, r5
   175b4:	mov	r2, r4
   175b8:	bl	12400 <memcpy@plt>
   175bc:	mov	r0, r6
   175c0:	pop	{r4, r5, r6, sl, fp, pc}

000175c4 <flatcc_builder_push_buffer_alignment@@Base>:
   175c4:	ldrh	r1, [r0, #128]	; 0x80
   175c8:	mov	r2, #4
   175cc:	strh	r2, [r0, #128]	; 0x80
   175d0:	mov	r0, r1
   175d4:	bx	lr

000175d8 <flatcc_builder_pop_buffer_alignment@@Base>:
   175d8:	ldrh	r2, [r0, #128]	; 0x80
   175dc:	cmp	r2, r1
   175e0:	strhcc	r1, [r0, #128]	; 0x80
   175e4:	bx	lr

000175e8 <flatcc_builder_get_buffer_alignment@@Base>:
   175e8:	ldrh	r0, [r0, #128]	; 0x80
   175ec:	bx	lr

000175f0 <flatcc_builder_set_vtable_clustering@@Base>:
   175f0:	clz	r1, r1
   175f4:	lsr	r1, r1, #5
   175f8:	str	r1, [r0, #180]	; 0xb4
   175fc:	bx	lr

00017600 <flatcc_builder_set_block_align@@Base>:
   17600:	strh	r1, [r0, #132]	; 0x84
   17604:	bx	lr

00017608 <flatcc_builder_get_level@@Base>:
   17608:	ldr	r0, [r0, #156]	; 0x9c
   1760c:	bx	lr

00017610 <flatcc_builder_set_max_level@@Base>:
   17610:	str	r1, [r0, #176]	; 0xb0
   17614:	ldr	r2, [r0, #160]	; 0xa0
   17618:	cmp	r2, r1
   1761c:	strlt	r1, [r0, #160]	; 0xa0
   17620:	bx	lr

00017624 <flatcc_builder_get_buffer_size@@Base>:
   17624:	ldr	r1, [r0, #136]	; 0x88
   17628:	ldr	r0, [r0, #140]	; 0x8c
   1762c:	sub	r0, r0, r1
   17630:	bx	lr

00017634 <flatcc_builder_get_buffer_start@@Base>:
   17634:	ldr	r0, [r0, #136]	; 0x88
   17638:	bx	lr

0001763c <flatcc_builder_get_buffer_end@@Base>:
   1763c:	ldr	r0, [r0, #140]	; 0x8c
   17640:	bx	lr

00017644 <flatcc_builder_set_vtable_cache_limit@@Base>:
   17644:	str	r1, [r0, #172]	; 0xac
   17648:	bx	lr

0001764c <flatcc_builder_set_identifier@@Base>:
   1764c:	movw	r2, #33360	; 0x8250
   17650:	cmp	r1, #0
   17654:	movt	r2, #1
   17658:	movne	r2, r1
   1765c:	ldr	r1, [r2]
   17660:	str	r1, [r0, #168]	; 0xa8
   17664:	bx	lr

00017668 <flatcc_builder_get_type@@Base>:
   17668:	ldr	r0, [r0, #32]
   1766c:	cmp	r0, #0
   17670:	ldrhne	r0, [r0, #14]
   17674:	moveq	r0, #0
   17678:	bx	lr

0001767c <flatcc_builder_get_type_at@@Base>:
   1767c:	mov	r2, r0
   17680:	cmp	r1, #1
   17684:	mov	r0, #0
   17688:	ldrge	r3, [r2, #156]	; 0x9c
   1768c:	cmpge	r3, r1
   17690:	bge	17698 <flatcc_builder_get_type_at@@Base+0x1c>
   17694:	bx	lr
   17698:	sub	r0, r1, r3
   1769c:	ldr	r1, [r2, #32]
   176a0:	add	r0, r0, r0, lsl #3
   176a4:	add	r0, r1, r0, lsl #2
   176a8:	ldrh	r0, [r0, #14]
   176ac:	bx	lr

000176b0 <flatcc_builder_get_direct_buffer@@Base>:
   176b0:	ldr	r2, [r0, #184]	; 0xb8
   176b4:	cmp	r2, #0
   176b8:	beq	176e4 <flatcc_builder_get_direct_buffer@@Base+0x34>
   176bc:	ldr	r2, [r0, #188]	; 0xbc
   176c0:	ldr	r3, [r0, #192]	; 0xc0
   176c4:	cmp	r2, r3
   176c8:	beq	176fc <flatcc_builder_get_direct_buffer@@Base+0x4c>
   176cc:	cmp	r1, #0
   176d0:	moveq	r0, #0
   176d4:	bxeq	lr
   176d8:	mov	r0, #0
   176dc:	str	r0, [r1]
   176e0:	bx	lr
   176e4:	cmp	r1, #0
   176e8:	moveq	r0, #0
   176ec:	bxeq	lr
   176f0:	mov	r0, #0
   176f4:	str	r0, [r1]
   176f8:	bx	lr
   176fc:	cmp	r1, #0
   17700:	ldrne	r2, [r0, #212]	; 0xd4
   17704:	strne	r2, [r1]
   17708:	ldr	r0, [r0, #196]	; 0xc4
   1770c:	bx	lr

00017710 <flatcc_builder_copy_buffer@@Base>:
   17710:	push	{fp, lr}
   17714:	mov	fp, sp
   17718:	ldr	r3, [r0, #184]	; 0xb8
   1771c:	cmp	r3, #0
   17720:	beq	17754 <flatcc_builder_copy_buffer@@Base+0x44>
   17724:	add	r0, r0, #188	; 0xbc
   17728:	bl	17e68 <flatcc_emitter_copy_buffer@@Base>
   1772c:	cmp	r0, #0
   17730:	popne	{fp, pc}
   17734:	movw	r0, #34486	; 0x86b6
   17738:	movw	r1, #33890	; 0x8462
   1773c:	movw	r3, #37818	; 0x93ba
   17740:	movw	r2, #1926	; 0x786
   17744:	movt	r0, #1
   17748:	movt	r1, #1
   1774c:	movt	r3, #1
   17750:	bl	124b4 <__assert_fail@plt>
   17754:	mov	r0, #0
   17758:	pop	{fp, pc}

0001775c <flatcc_builder_finalize_buffer@@Base>:
   1775c:	push	{r4, r5, r6, sl, fp, lr}
   17760:	add	fp, sp, #16
   17764:	mov	r5, r0
   17768:	ldr	r0, [r0, #136]	; 0x88
   1776c:	cmp	r1, #0
   17770:	ldr	r2, [r5, #140]	; 0x8c
   17774:	sub	r4, r2, r0
   17778:	mov	r0, r4
   1777c:	strne	r4, [r1]
   17780:	bl	1243c <malloc@plt>
   17784:	cmp	r0, #0
   17788:	beq	177d8 <flatcc_builder_finalize_buffer@@Base+0x7c>
   1778c:	mov	r6, r0
   17790:	ldr	r0, [r5, #184]	; 0xb8
   17794:	cmp	r0, #0
   17798:	beq	177f8 <flatcc_builder_finalize_buffer@@Base+0x9c>
   1779c:	add	r0, r5, #188	; 0xbc
   177a0:	mov	r1, r6
   177a4:	mov	r2, r4
   177a8:	bl	17e68 <flatcc_emitter_copy_buffer@@Base>
   177ac:	cmp	r0, #0
   177b0:	movne	r0, r6
   177b4:	popne	{r4, r5, r6, sl, fp, pc}
   177b8:	movw	r0, #34486	; 0x86b6
   177bc:	movw	r1, #33890	; 0x8462
   177c0:	movw	r3, #37818	; 0x93ba
   177c4:	movw	r2, #1926	; 0x786
   177c8:	movt	r0, #1
   177cc:	movt	r1, #1
   177d0:	movt	r3, #1
   177d4:	bl	124b4 <__assert_fail@plt>
   177d8:	movw	r0, #38408	; 0x9608
   177dc:	movw	r1, #33890	; 0x8462
   177e0:	movw	r3, #37887	; 0x93ff
   177e4:	movw	r2, #1944	; 0x798
   177e8:	movt	r0, #1
   177ec:	movt	r1, #1
   177f0:	movt	r3, #1
   177f4:	bl	124b4 <__assert_fail@plt>
   177f8:	movw	r0, #38408	; 0x9608
   177fc:	movw	r1, #33890	; 0x8462
   17800:	movw	r3, #37887	; 0x93ff
   17804:	movw	r2, #1948	; 0x79c
   17808:	movt	r0, #1
   1780c:	movt	r1, #1
   17810:	movt	r3, #1
   17814:	bl	124b4 <__assert_fail@plt>

00017818 <flatcc_builder_finalize_aligned_buffer@@Base>:
   17818:	push	{r4, r5, r6, r7, fp, lr}
   1781c:	add	fp, sp, #16
   17820:	sub	sp, sp, #8
   17824:	mov	r5, r0
   17828:	mov	r4, r1
   1782c:	ldr	r0, [r0, #136]	; 0x88
   17830:	ldr	r1, [r5, #140]	; 0x8c
   17834:	cmp	r4, #0
   17838:	sub	r0, r1, r0
   1783c:	mov	r1, #0
   17840:	strne	r0, [r4]
   17844:	ldrh	r2, [r5, #128]	; 0x80
   17848:	str	r1, [sp, #4]
   1784c:	add	r0, r0, r2
   17850:	cmp	r2, #4
   17854:	mov	r1, r2
   17858:	rsb	r2, r2, #0
   1785c:	sub	r0, r0, #1
   17860:	movls	r1, #4
   17864:	and	r7, r0, r2
   17868:	add	r0, sp, #4
   1786c:	mov	r2, r7
   17870:	bl	12478 <posix_memalign@plt>
   17874:	ldr	r6, [sp, #4]
   17878:	cmp	r0, #0
   1787c:	cmpne	r6, #0
   17880:	bne	178bc <flatcc_builder_finalize_aligned_buffer@@Base+0xa4>
   17884:	cmp	r6, #0
   17888:	beq	178c4 <flatcc_builder_finalize_aligned_buffer@@Base+0xac>
   1788c:	ldr	r0, [r5, #184]	; 0xb8
   17890:	cmp	r0, #0
   17894:	beq	178bc <flatcc_builder_finalize_aligned_buffer@@Base+0xa4>
   17898:	add	r0, r5, #188	; 0xbc
   1789c:	mov	r1, r6
   178a0:	mov	r2, r7
   178a4:	bl	17e68 <flatcc_emitter_copy_buffer@@Base>
   178a8:	cmp	r0, #0
   178ac:	beq	178dc <flatcc_builder_finalize_aligned_buffer@@Base+0xc4>
   178b0:	mov	r0, r6
   178b4:	sub	sp, fp, #16
   178b8:	pop	{r4, r5, r6, r7, fp, pc}
   178bc:	mov	r0, r6
   178c0:	bl	123f4 <free@plt>
   178c4:	mov	r6, #0
   178c8:	cmp	r4, #0
   178cc:	strne	r6, [r4]
   178d0:	mov	r0, r6
   178d4:	sub	sp, fp, #16
   178d8:	pop	{r4, r5, r6, r7, fp, pc}
   178dc:	movw	r0, #34486	; 0x86b6
   178e0:	movw	r1, #33890	; 0x8462
   178e4:	movw	r3, #37818	; 0x93ba
   178e8:	movw	r2, #1926	; 0x786
   178ec:	movt	r0, #1
   178f0:	movt	r1, #1
   178f4:	movt	r3, #1
   178f8:	bl	124b4 <__assert_fail@plt>

000178fc <flatcc_builder_aligned_alloc@@Base>:
   178fc:	push	{fp, lr}
   17900:	mov	fp, sp
   17904:	sub	sp, sp, #8
   17908:	mov	r2, r1
   1790c:	mov	r1, r0
   17910:	mov	r0, #0
   17914:	cmp	r1, #4
   17918:	str	r0, [sp, #4]
   1791c:	add	r0, sp, #4
   17920:	movls	r1, #4
   17924:	bl	12478 <posix_memalign@plt>
   17928:	mov	r1, r0
   1792c:	ldr	r0, [sp, #4]
   17930:	cmp	r1, #0
   17934:	cmpne	r0, #0
   17938:	bne	17944 <flatcc_builder_aligned_alloc@@Base+0x48>
   1793c:	mov	sp, fp
   17940:	pop	{fp, pc}
   17944:	bl	123f4 <free@plt>
   17948:	mov	r0, #0
   1794c:	str	r0, [sp, #4]
   17950:	mov	sp, fp
   17954:	pop	{fp, pc}

00017958 <flatcc_builder_aligned_free@@Base>:
   17958:	b	123f4 <free@plt>

0001795c <flatcc_builder_get_emit_context@@Base>:
   1795c:	ldr	r0, [r0, #36]	; 0x24
   17960:	bx	lr

00017964 <flatcc_emitter_recycle_page@@Base>:
   17964:	ldr	r3, [r0]
   17968:	mov	r2, r0
   1796c:	mvn	r0, #0
   17970:	cmp	r3, r1
   17974:	ldrne	r2, [r2, #4]
   17978:	cmpne	r2, r1
   1797c:	bne	17984 <flatcc_emitter_recycle_page@@Base+0x20>
   17980:	bx	lr
   17984:	ldr	r0, [r1, #2944]	; 0xb80
   17988:	ldr	r2, [r1, #2948]	; 0xb84
   1798c:	str	r2, [r0, #2948]	; 0xb84
   17990:	ldr	r2, [r1, #2948]	; 0xb84
   17994:	str	r0, [r2, #2944]	; 0xb80
   17998:	ldr	r0, [r3, #2948]	; 0xb84
   1799c:	str	r3, [r1, #2944]	; 0xb80
   179a0:	str	r0, [r1, #2948]	; 0xb84
   179a4:	str	r1, [r0, #2944]	; 0xb80
   179a8:	ldr	r0, [r1, #2944]	; 0xb80
   179ac:	str	r1, [r0, #2948]	; 0xb84
   179b0:	mov	r0, #0
   179b4:	bx	lr

000179b8 <flatcc_emitter_reset@@Base>:
   179b8:	push	{r4, sl, fp, lr}
   179bc:	add	fp, sp, #8
   179c0:	ldr	r1, [r0]
   179c4:	cmp	r1, #0
   179c8:	beq	17a80 <flatcc_emitter_reset@@Base+0xc8>
   179cc:	mov	r4, r0
   179d0:	add	r2, r1, #1472	; 0x5c0
   179d4:	mov	r0, #1472	; 0x5c0
   179d8:	mov	r3, #0
   179dc:	stmib	r4, {r1, r2}
   179e0:	str	r0, [r4, #12]
   179e4:	str	r2, [r4, #16]
   179e8:	str	r0, [r4, #20]
   179ec:	movw	r0, #64064	; 0xfa40
   179f0:	movt	r0, #65535	; 0xffff
   179f4:	str	r0, [r1, #2952]	; 0xb88
   179f8:	ldr	r2, [r4, #32]
   179fc:	ldr	r0, [r4, #24]
   17a00:	cmp	r2, #0
   17a04:	moveq	r2, r0
   17a08:	streq	r0, [r4, #32]
   17a0c:	str	r3, [r4, #24]
   17a10:	add	r2, r2, r2, lsl #1
   17a14:	lsr	r2, r2, #2
   17a18:	add	r0, r2, r0, lsr #2
   17a1c:	str	r0, [r4, #32]
   17a20:	ldr	r2, [r4, #28]
   17a24:	cmp	r2, r0, lsl #1
   17a28:	bls	17a80 <flatcc_emitter_reset@@Base+0xc8>
   17a2c:	mov	r2, r1
   17a30:	ldr	r0, [r2, #2944]!	; 0xb80
   17a34:	cmp	r0, r1
   17a38:	beq	17a80 <flatcc_emitter_reset@@Base+0xc8>
   17a3c:	ldr	r3, [r0, #2944]	; 0xb80
   17a40:	str	r3, [r2]
   17a44:	ldr	r2, [r0, #2944]	; 0xb80
   17a48:	str	r1, [r2, #2948]	; 0xb84
   17a4c:	bl	123f4 <free@plt>
   17a50:	ldr	r0, [r4, #28]
   17a54:	ldr	r1, [r4, #32]
   17a58:	sub	r0, r0, #2944	; 0xb80
   17a5c:	cmp	r0, r1, lsl #1
   17a60:	str	r0, [r4, #28]
   17a64:	popls	{r4, sl, fp, pc}
   17a68:	ldr	r1, [r4, #4]
   17a6c:	ldr	r3, [r4]
   17a70:	mov	r2, r1
   17a74:	ldr	r0, [r2, #2944]!	; 0xb80
   17a78:	cmp	r0, r3
   17a7c:	bne	17a3c <flatcc_emitter_reset@@Base+0x84>
   17a80:	pop	{r4, sl, fp, pc}

00017a84 <flatcc_emitter_clear@@Base>:
   17a84:	push	{r4, r5, r6, sl, fp, lr}
   17a88:	add	fp, sp, #16
   17a8c:	ldr	r5, [r0]
   17a90:	cmp	r5, #0
   17a94:	popeq	{r4, r5, r6, sl, fp, pc}
   17a98:	mov	r4, r0
   17a9c:	ldr	r0, [r5, #2948]	; 0xb84
   17aa0:	mov	r6, #0
   17aa4:	str	r6, [r0, #2944]	; 0xb80
   17aa8:	ldr	r0, [r5, #2944]	; 0xb80
   17aac:	cmp	r0, #0
   17ab0:	beq	17acc <flatcc_emitter_clear@@Base+0x48>
   17ab4:	mov	r5, r0
   17ab8:	ldr	r0, [r0, #2948]	; 0xb84
   17abc:	bl	123f4 <free@plt>
   17ac0:	ldr	r0, [r5, #2944]	; 0xb80
   17ac4:	cmp	r0, #0
   17ac8:	bne	17ab4 <flatcc_emitter_clear@@Base+0x30>
   17acc:	mov	r0, r5
   17ad0:	bl	123f4 <free@plt>
   17ad4:	vmov.i32	q8, #0	; 0x00000000
   17ad8:	add	r0, r4, #16
   17adc:	vst1.32	{d16-d17}, [r0]
   17ae0:	mov	r0, #32
   17ae4:	vst1.32	{d16-d17}, [r4], r0
   17ae8:	str	r6, [r4]
   17aec:	pop	{r4, r5, r6, sl, fp, pc}

00017af0 <flatcc_emitter@@Base>:
   17af0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   17af4:	add	fp, sp, #28
   17af8:	sub	sp, sp, #4
   17afc:	mov	r6, r0
   17b00:	mov	r7, r1
   17b04:	ldr	r0, [r0, #24]
   17b08:	ldr	r1, [fp, #8]
   17b0c:	mov	r4, r2
   17b10:	cmn	r3, #1
   17b14:	mov	r9, r6
   17b18:	add	r0, r0, r1
   17b1c:	str	r0, [r6, #24]
   17b20:	ble	17c6c <flatcc_emitter@@Base+0x17c>
   17b24:	ldr	r0, [r9, #20]!
   17b28:	cmp	r0, r1
   17b2c:	bcs	17dec <flatcc_emitter@@Base+0x2fc>
   17b30:	mov	r8, #0
   17b34:	cmp	r4, #0
   17b38:	beq	17e4c <flatcc_emitter@@Base+0x35c>
   17b3c:	movw	sl, #64064	; 0xfa40
   17b40:	movt	sl, #65535	; 0xffff
   17b44:	ldr	r8, [r7, #4]
   17b48:	cmp	r8, #0
   17b4c:	beq	17c50 <flatcc_emitter@@Base+0x160>
   17b50:	ldr	r9, [r7]
   17b54:	cmp	r8, r0
   17b58:	mov	r5, r8
   17b5c:	bls	17c1c <flatcc_emitter@@Base+0x12c>
   17b60:	mov	r5, r0
   17b64:	cmp	r5, #0
   17b68:	bne	17c1c <flatcc_emitter@@Base+0x12c>
   17b6c:	ldr	r5, [r6, #4]
   17b70:	cmp	r5, #0
   17b74:	beq	17b88 <flatcc_emitter@@Base+0x98>
   17b78:	ldr	r0, [r5, #2944]	; 0xb80
   17b7c:	ldr	r1, [r6]
   17b80:	cmp	r0, r1
   17b84:	bne	17bc0 <flatcc_emitter@@Base+0xd0>
   17b88:	movw	r0, #2956	; 0xb8c
   17b8c:	bl	1243c <malloc@plt>
   17b90:	cmp	r0, #0
   17b94:	beq	17dfc <flatcc_emitter@@Base+0x30c>
   17b98:	ldr	r1, [r6, #28]
   17b9c:	cmp	r5, #0
   17ba0:	add	r1, r1, #2944	; 0xb80
   17ba4:	str	r1, [r6, #28]
   17ba8:	beq	17bec <flatcc_emitter@@Base+0xfc>
   17bac:	ldr	r1, [r6]
   17bb0:	str	r1, [r0, #2944]	; 0xb80
   17bb4:	str	r5, [r0, #2948]	; 0xb84
   17bb8:	str	r0, [r1, #2948]	; 0xb84
   17bbc:	str	r0, [r5, #2944]	; 0xb80
   17bc0:	mov	r5, #2944	; 0xb80
   17bc4:	str	r0, [r6, #4]
   17bc8:	str	r0, [r6, #16]
   17bcc:	str	r5, [r6, #20]
   17bd0:	ldr	r1, [r0, #2948]	; 0xb84
   17bd4:	ldr	r1, [r1, #2952]	; 0xb88
   17bd8:	add	r1, r1, #2944	; 0xb80
   17bdc:	str	r1, [r0, #2952]	; 0xb88
   17be0:	cmp	r8, r5
   17be4:	bhi	17b64 <flatcc_emitter@@Base+0x74>
   17be8:	b	17c18 <flatcc_emitter@@Base+0x128>
   17bec:	add	r1, r0, #1472	; 0x5c0
   17bf0:	mov	r5, #1472	; 0x5c0
   17bf4:	str	r0, [r6]
   17bf8:	stmib	r6, {r0, r1, r5}
   17bfc:	str	r1, [r6, #16]
   17c00:	str	r5, [r6, #20]
   17c04:	str	r0, [r0, #2944]	; 0xb80
   17c08:	str	r0, [r0, #2948]	; 0xb84
   17c0c:	str	sl, [r0, #2952]	; 0xb88
   17c10:	cmp	r8, r5
   17c14:	bhi	17b64 <flatcc_emitter@@Base+0x74>
   17c18:	mov	r5, r8
   17c1c:	ldr	r0, [r6, #16]
   17c20:	mov	r1, r9
   17c24:	mov	r2, r5
   17c28:	bl	12400 <memcpy@plt>
   17c2c:	ldr	r0, [r6, #16]
   17c30:	ldr	r1, [r6, #20]
   17c34:	add	r9, r9, r5
   17c38:	subs	r8, r8, r5
   17c3c:	add	r2, r0, r5
   17c40:	sub	r0, r1, r5
   17c44:	str	r2, [r6, #16]
   17c48:	str	r0, [r6, #20]
   17c4c:	bne	17b54 <flatcc_emitter@@Base+0x64>
   17c50:	subs	r4, r4, #1
   17c54:	add	r7, r7, #8
   17c58:	bne	17b44 <flatcc_emitter@@Base+0x54>
   17c5c:	mov	r8, #0
   17c60:	mov	r0, r8
   17c64:	sub	sp, fp, #28
   17c68:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   17c6c:	ldr	r0, [r9, #12]!
   17c70:	cmp	r0, r1
   17c74:	bcs	17e0c <flatcc_emitter@@Base+0x31c>
   17c78:	mov	r8, #0
   17c7c:	cmp	r4, #0
   17c80:	beq	17e4c <flatcc_emitter@@Base+0x35c>
   17c84:	add	r0, r7, r4, lsl #3
   17c88:	movw	sl, #2952	; 0xb88
   17c8c:	ldr	r8, [r0, #-4]
   17c90:	sub	r1, r0, #8
   17c94:	str	r1, [sp]
   17c98:	cmp	r8, #0
   17c9c:	beq	17dd0 <flatcc_emitter@@Base+0x2e0>
   17ca0:	ldr	r0, [sp]
   17ca4:	ldr	r0, [r0]
   17ca8:	add	r7, r0, r8
   17cac:	ldr	r1, [r9]
   17cb0:	cmp	r8, r1
   17cb4:	bhi	17ce4 <flatcc_emitter@@Base+0x1f4>
   17cb8:	b	17da0 <flatcc_emitter@@Base+0x2b0>
   17cbc:	add	r3, r0, #2944	; 0xb80
   17cc0:	mov	r1, #2944	; 0xb80
   17cc4:	str	r3, [r6, #8]
   17cc8:	str	r1, [r6, #12]
   17ccc:	ldr	r0, [r0, #2944]	; 0xb80
   17cd0:	ldr	r0, [r0, #2952]	; 0xb88
   17cd4:	sub	r0, r0, #2944	; 0xb80
   17cd8:	str	r0, [r2]
   17cdc:	cmp	r8, r1
   17ce0:	bls	17da0 <flatcc_emitter@@Base+0x2b0>
   17ce4:	cmp	r1, #0
   17ce8:	mov	r5, r1
   17cec:	bne	17da4 <flatcc_emitter@@Base+0x2b4>
   17cf0:	ldr	r5, [r6]
   17cf4:	cmp	r5, #0
   17cf8:	beq	17d24 <flatcc_emitter@@Base+0x234>
   17cfc:	ldr	r0, [r5, #2948]	; 0xb84
   17d00:	ldr	r1, [r6, #4]
   17d04:	cmp	r0, r1
   17d08:	beq	17d24 <flatcc_emitter@@Base+0x234>
   17d0c:	ldr	r1, [r5, #2952]	; 0xb88
   17d10:	mov	r2, r0
   17d14:	sub	r1, r1, #2944	; 0xb80
   17d18:	str	r1, [r2, #2952]!	; 0xb88
   17d1c:	str	r0, [r6]
   17d20:	b	17cbc <flatcc_emitter@@Base+0x1cc>
   17d24:	movw	r0, #2956	; 0xb8c
   17d28:	bl	1243c <malloc@plt>
   17d2c:	cmp	r0, #0
   17d30:	beq	17e58 <flatcc_emitter@@Base+0x368>
   17d34:	ldr	r1, [r6, #28]
   17d38:	cmp	r5, #0
   17d3c:	add	r1, r1, #2944	; 0xb80
   17d40:	str	r1, [r6, #28]
   17d44:	beq	17d68 <flatcc_emitter@@Base+0x278>
   17d48:	ldr	r1, [r6, #4]
   17d4c:	add	r2, r0, sl
   17d50:	str	r5, [r0, #2944]	; 0xb80
   17d54:	str	r1, [r0, #2948]	; 0xb84
   17d58:	str	r0, [r5, #2948]	; 0xb84
   17d5c:	str	r0, [r1, #2944]	; 0xb80
   17d60:	str	r0, [r6]
   17d64:	b	17cbc <flatcc_emitter@@Base+0x1cc>
   17d68:	add	r2, r0, #1472	; 0x5c0
   17d6c:	mov	r1, #1472	; 0x5c0
   17d70:	str	r0, [r6]
   17d74:	stmib	r6, {r0, r2}
   17d78:	str	r1, [r6, #12]
   17d7c:	str	r2, [r6, #16]
   17d80:	movw	r2, #64064	; 0xfa40
   17d84:	str	r1, [r6, #20]
   17d88:	str	r0, [r0, #2944]	; 0xb80
   17d8c:	str	r0, [r0, #2948]	; 0xb84
   17d90:	movt	r2, #65535	; 0xffff
   17d94:	str	r2, [r0, #2952]	; 0xb88
   17d98:	cmp	r8, r1
   17d9c:	bhi	17ce4 <flatcc_emitter@@Base+0x1f4>
   17da0:	mov	r5, r8
   17da4:	sub	r0, r1, r5
   17da8:	sub	r7, r7, r5
   17dac:	mov	r2, r5
   17db0:	str	r0, [r6, #12]
   17db4:	mov	r1, r7
   17db8:	ldr	r0, [r6, #8]
   17dbc:	sub	r0, r0, r5
   17dc0:	str	r0, [r6, #8]
   17dc4:	bl	12400 <memcpy@plt>
   17dc8:	subs	r8, r8, r5
   17dcc:	bne	17cac <flatcc_emitter@@Base+0x1bc>
   17dd0:	ldr	r0, [sp]
   17dd4:	subs	r4, r4, #1
   17dd8:	bne	17c8c <flatcc_emitter@@Base+0x19c>
   17ddc:	mov	r8, #0
   17de0:	mov	r0, r8
   17de4:	sub	sp, fp, #28
   17de8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   17dec:	ldr	r5, [r6, #16]
   17df0:	add	r2, r5, r1
   17df4:	str	r2, [r6, #16]
   17df8:	b	17e18 <flatcc_emitter@@Base+0x328>
   17dfc:	mvn	r8, #0
   17e00:	mov	r0, r8
   17e04:	sub	sp, fp, #28
   17e08:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   17e0c:	ldr	r2, [r6, #8]
   17e10:	sub	r5, r2, r1
   17e14:	str	r5, [r6, #8]
   17e18:	sub	r0, r0, r1
   17e1c:	mov	r8, #0
   17e20:	cmp	r4, #0
   17e24:	str	r0, [r9]
   17e28:	beq	17e4c <flatcc_emitter@@Base+0x35c>
   17e2c:	ldm	r7, {r1, r2}
   17e30:	mov	r0, r5
   17e34:	bl	12400 <memcpy@plt>
   17e38:	ldr	r0, [r7, #4]
   17e3c:	add	r7, r7, #8
   17e40:	subs	r4, r4, #1
   17e44:	add	r5, r5, r0
   17e48:	bne	17e2c <flatcc_emitter@@Base+0x33c>
   17e4c:	mov	r0, r8
   17e50:	sub	sp, fp, #28
   17e54:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   17e58:	mvn	r8, #0
   17e5c:	mov	r0, r8
   17e60:	sub	sp, fp, #28
   17e64:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}

00017e68 <flatcc_emitter_copy_buffer@@Base>:
   17e68:	push	{r4, r5, r6, sl, fp, lr}
   17e6c:	add	fp, sp, #16
   17e70:	mov	r3, r2
   17e74:	ldr	r2, [r0, #24]
   17e78:	mov	r5, #0
   17e7c:	cmp	r2, r3
   17e80:	bhi	17f08 <flatcc_emitter_copy_buffer@@Base+0xa0>
   17e84:	mov	r4, r0
   17e88:	ldr	r0, [r0]
   17e8c:	cmp	r0, #0
   17e90:	beq	17f08 <flatcc_emitter_copy_buffer@@Base+0xa0>
   17e94:	mov	r6, r1
   17e98:	ldr	r1, [r4, #4]
   17e9c:	cmp	r0, r1
   17ea0:	beq	17f10 <flatcc_emitter_copy_buffer@@Base+0xa8>
   17ea4:	ldr	r0, [r4, #12]
   17ea8:	ldr	r1, [r4, #8]
   17eac:	rsb	r5, r0, #2944	; 0xb80
   17eb0:	mov	r0, r6
   17eb4:	mov	r2, r5
   17eb8:	bl	12400 <memcpy@plt>
   17ebc:	ldm	r4, {r0, r1}
   17ec0:	add	r5, r6, r5
   17ec4:	ldr	r6, [r0, #2944]	; 0xb80
   17ec8:	cmp	r6, r1
   17ecc:	beq	17ef4 <flatcc_emitter_copy_buffer@@Base+0x8c>
   17ed0:	mov	r0, r5
   17ed4:	mov	r1, r6
   17ed8:	mov	r2, #2944	; 0xb80
   17edc:	bl	12400 <memcpy@plt>
   17ee0:	ldr	r6, [r6, #2944]	; 0xb80
   17ee4:	ldr	r0, [r4, #4]
   17ee8:	add	r5, r5, #2944	; 0xb80
   17eec:	cmp	r6, r0
   17ef0:	bne	17ed0 <flatcc_emitter_copy_buffer@@Base+0x68>
   17ef4:	ldr	r0, [r4, #20]
   17ef8:	mov	r1, r6
   17efc:	rsb	r2, r0, #2944	; 0xb80
   17f00:	mov	r0, r5
   17f04:	bl	12400 <memcpy@plt>
   17f08:	mov	r0, r5
   17f0c:	pop	{r4, r5, r6, sl, fp, pc}
   17f10:	ldr	r1, [r4, #8]
   17f14:	mov	r0, r6
   17f18:	bl	12400 <memcpy@plt>
   17f1c:	mov	r0, r6
   17f20:	pop	{r4, r5, r6, sl, fp, pc}

00017f24 <__libc_csu_init@@Base>:
   17f24:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   17f28:	mov	r7, r0
   17f2c:	ldr	r6, [pc, #72]	; 17f7c <__libc_csu_init@@Base+0x58>
   17f30:	ldr	r5, [pc, #72]	; 17f80 <__libc_csu_init@@Base+0x5c>
   17f34:	add	r6, pc, r6
   17f38:	add	r5, pc, r5
   17f3c:	sub	r6, r6, r5
   17f40:	mov	r8, r1
   17f44:	mov	r9, r2
   17f48:	bl	123c8 <printf@plt-0x20>
   17f4c:	asrs	r6, r6, #2
   17f50:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   17f54:	mov	r4, #0
   17f58:	add	r4, r4, #1
   17f5c:	ldr	r3, [r5], #4
   17f60:	mov	r2, r9
   17f64:	mov	r1, r8
   17f68:	mov	r0, r7
   17f6c:	blx	r3
   17f70:	cmp	r6, r4
   17f74:	bne	17f58 <__libc_csu_init@@Base+0x34>
   17f78:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   17f7c:	ldrdeq	r1, [r1], -r0
   17f80:	andeq	r1, r1, r8, asr #31

00017f84 <__libc_csu_fini@@Base>:
   17f84:	bx	lr

Disassembly of section .fini:

00017f88 <.fini>:
   17f88:	push	{r3, lr}
   17f8c:	pop	{r3, pc}
