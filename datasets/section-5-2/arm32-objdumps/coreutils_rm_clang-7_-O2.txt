
../repos/coreutils/src/rm:     file format elf32-littlearm


Disassembly of section .init:

000111a4 <.init>:
   111a4:	push	{r3, lr}
   111a8:	bl	11534 <__assert_fail@plt+0x4c>
   111ac:	pop	{r3, pc}

Disassembly of section .plt:

000111b0 <fstatfs64@plt-0x14>:
   111b0:	push	{lr}		; (str lr, [sp, #-4]!)
   111b4:	ldr	lr, [pc, #4]	; 111c0 <fstatfs64@plt-0x4>
   111b8:	add	lr, pc, lr
   111bc:	ldr	pc, [lr, #8]!
   111c0:	andeq	sl, r1, r0, asr #28

000111c4 <fstatfs64@plt>:
   111c4:	add	ip, pc, #0, 12
   111c8:	add	ip, ip, #106496	; 0x1a000
   111cc:	ldr	pc, [ip, #3648]!	; 0xe40

000111d0 <calloc@plt>:
   111d0:	add	ip, pc, #0, 12
   111d4:	add	ip, ip, #106496	; 0x1a000
   111d8:	ldr	pc, [ip, #3640]!	; 0xe38

000111dc <fputs_unlocked@plt>:
   111dc:	add	ip, pc, #0, 12
   111e0:	add	ip, ip, #106496	; 0x1a000
   111e4:	ldr	pc, [ip, #3632]!	; 0xe30

000111e8 <raise@plt>:
   111e8:	add	ip, pc, #0, 12
   111ec:	add	ip, ip, #106496	; 0x1a000
   111f0:	ldr	pc, [ip, #3624]!	; 0xe28

000111f4 <__getdelim@plt>:
   111f4:	add	ip, pc, #0, 12
   111f8:	add	ip, ip, #106496	; 0x1a000
   111fc:	ldr	pc, [ip, #3616]!	; 0xe20

00011200 <strcmp@plt>:
   11200:	add	ip, pc, #0, 12
   11204:	add	ip, ip, #106496	; 0x1a000
   11208:	ldr	pc, [ip, #3608]!	; 0xe18

0001120c <fflush@plt>:
   1120c:	add	ip, pc, #0, 12
   11210:	add	ip, ip, #106496	; 0x1a000
   11214:	ldr	pc, [ip, #3600]!	; 0xe10

00011218 <unlinkat@plt>:
   11218:	add	ip, pc, #0, 12
   1121c:	add	ip, ip, #106496	; 0x1a000
   11220:	ldr	pc, [ip, #3592]!	; 0xe08

00011224 <memmove@plt>:
   11224:	add	ip, pc, #0, 12
   11228:	add	ip, ip, #106496	; 0x1a000
   1122c:	ldr	pc, [ip, #3584]!	; 0xe00

00011230 <free@plt>:
   11230:	add	ip, pc, #0, 12
   11234:	add	ip, ip, #106496	; 0x1a000
   11238:	ldr	pc, [ip, #3576]!	; 0xdf8

0001123c <faccessat@plt>:
   1123c:	add	ip, pc, #0, 12
   11240:	add	ip, ip, #106496	; 0x1a000
   11244:	ldr	pc, [ip, #3568]!	; 0xdf0

00011248 <_exit@plt>:
   11248:	add	ip, pc, #0, 12
   1124c:	add	ip, ip, #106496	; 0x1a000
   11250:	ldr	pc, [ip, #3560]!	; 0xde8

00011254 <memcpy@plt>:
   11254:	add	ip, pc, #0, 12
   11258:	add	ip, ip, #106496	; 0x1a000
   1125c:	ldr	pc, [ip, #3552]!	; 0xde0

00011260 <mbsinit@plt>:
   11260:	add	ip, pc, #0, 12
   11264:	add	ip, ip, #106496	; 0x1a000
   11268:	ldr	pc, [ip, #3544]!	; 0xdd8

0001126c <memcmp@plt>:
   1126c:	add	ip, pc, #0, 12
   11270:	add	ip, ip, #106496	; 0x1a000
   11274:	ldr	pc, [ip, #3536]!	; 0xdd0

00011278 <dcgettext@plt>:
   11278:	add	ip, pc, #0, 12
   1127c:	add	ip, ip, #106496	; 0x1a000
   11280:	ldr	pc, [ip, #3528]!	; 0xdc8

00011284 <realloc@plt>:
   11284:	add	ip, pc, #0, 12
   11288:	add	ip, ip, #106496	; 0x1a000
   1128c:	ldr	pc, [ip, #3520]!	; 0xdc0

00011290 <textdomain@plt>:
   11290:	add	ip, pc, #0, 12
   11294:	add	ip, ip, #106496	; 0x1a000
   11298:	ldr	pc, [ip, #3512]!	; 0xdb8

0001129c <geteuid@plt>:
   1129c:	add	ip, pc, #0, 12
   112a0:	add	ip, ip, #106496	; 0x1a000
   112a4:	ldr	pc, [ip, #3504]!	; 0xdb0

000112a8 <__fxstatat64@plt>:
   112a8:	add	ip, pc, #0, 12
   112ac:	add	ip, ip, #106496	; 0x1a000
   112b0:	ldr	pc, [ip, #3496]!	; 0xda8

000112b4 <iswprint@plt>:
   112b4:	add	ip, pc, #0, 12
   112b8:	add	ip, ip, #106496	; 0x1a000
   112bc:	ldr	pc, [ip, #3488]!	; 0xda0

000112c0 <__fxstat64@plt>:
   112c0:	add	ip, pc, #0, 12
   112c4:	add	ip, ip, #106496	; 0x1a000
   112c8:	ldr	pc, [ip, #3480]!	; 0xd98

000112cc <fwrite@plt>:
   112cc:	add	ip, pc, #0, 12
   112d0:	add	ip, ip, #106496	; 0x1a000
   112d4:	ldr	pc, [ip, #3472]!	; 0xd90

000112d8 <lseek64@plt>:
   112d8:	add	ip, pc, #0, 12
   112dc:	add	ip, ip, #106496	; 0x1a000
   112e0:	ldr	pc, [ip, #3464]!	; 0xd88

000112e4 <__ctype_get_mb_cur_max@plt>:
   112e4:	add	ip, pc, #0, 12
   112e8:	add	ip, ip, #106496	; 0x1a000
   112ec:	ldr	pc, [ip, #3456]!	; 0xd80

000112f0 <__fpending@plt>:
   112f0:	add	ip, pc, #0, 12
   112f4:	add	ip, ip, #106496	; 0x1a000
   112f8:	ldr	pc, [ip, #3448]!	; 0xd78

000112fc <mbrtowc@plt>:
   112fc:	add	ip, pc, #0, 12
   11300:	add	ip, ip, #106496	; 0x1a000
   11304:	ldr	pc, [ip, #3440]!	; 0xd70

00011308 <error@plt>:
   11308:	add	ip, pc, #0, 12
   1130c:	add	ip, ip, #106496	; 0x1a000
   11310:	ldr	pc, [ip, #3432]!	; 0xd68

00011314 <open64@plt>:
   11314:	add	ip, pc, #0, 12
   11318:	add	ip, ip, #106496	; 0x1a000
   1131c:	ldr	pc, [ip, #3424]!	; 0xd60

00011320 <malloc@plt>:
   11320:	add	ip, pc, #0, 12
   11324:	add	ip, ip, #106496	; 0x1a000
   11328:	ldr	pc, [ip, #3416]!	; 0xd58

0001132c <__libc_start_main@plt>:
   1132c:	add	ip, pc, #0, 12
   11330:	add	ip, ip, #106496	; 0x1a000
   11334:	ldr	pc, [ip, #3408]!	; 0xd50

00011338 <__freading@plt>:
   11338:	add	ip, pc, #0, 12
   1133c:	add	ip, ip, #106496	; 0x1a000
   11340:	ldr	pc, [ip, #3400]!	; 0xd48

00011344 <__gmon_start__@plt>:
   11344:	add	ip, pc, #0, 12
   11348:	add	ip, ip, #106496	; 0x1a000
   1134c:	ldr	pc, [ip, #3392]!	; 0xd40

00011350 <getopt_long@plt>:
   11350:	add	ip, pc, #0, 12
   11354:	add	ip, ip, #106496	; 0x1a000
   11358:	ldr	pc, [ip, #3384]!	; 0xd38

0001135c <__ctype_b_loc@plt>:
   1135c:	add	ip, pc, #0, 12
   11360:	add	ip, ip, #106496	; 0x1a000
   11364:	ldr	pc, [ip, #3376]!	; 0xd30

00011368 <exit@plt>:
   11368:	add	ip, pc, #0, 12
   1136c:	add	ip, ip, #106496	; 0x1a000
   11370:	ldr	pc, [ip, #3368]!	; 0xd28

00011374 <strlen@plt>:
   11374:	add	ip, pc, #0, 12
   11378:	add	ip, ip, #106496	; 0x1a000
   1137c:	ldr	pc, [ip, #3360]!	; 0xd20

00011380 <openat64@plt>:
   11380:	add	ip, pc, #0, 12
   11384:	add	ip, ip, #106496	; 0x1a000
   11388:	ldr	pc, [ip, #3352]!	; 0xd18

0001138c <__errno_location@plt>:
   1138c:	add	ip, pc, #0, 12
   11390:	add	ip, ip, #106496	; 0x1a000
   11394:	ldr	pc, [ip, #3344]!	; 0xd10

00011398 <__cxa_atexit@plt>:
   11398:	add	ip, pc, #0, 12
   1139c:	add	ip, ip, #106496	; 0x1a000
   113a0:	ldr	pc, [ip, #3336]!	; 0xd08

000113a4 <memset@plt>:
   113a4:	add	ip, pc, #0, 12
   113a8:	add	ip, ip, #106496	; 0x1a000
   113ac:	ldr	pc, [ip, #3328]!	; 0xd00

000113b0 <__printf_chk@plt>:
   113b0:	add	ip, pc, #0, 12
   113b4:	add	ip, ip, #106496	; 0x1a000
   113b8:	ldr	pc, [ip, #3320]!	; 0xcf8

000113bc <fileno@plt>:
   113bc:	add	ip, pc, #0, 12
   113c0:	add	ip, ip, #106496	; 0x1a000
   113c4:	ldr	pc, [ip, #3312]!	; 0xcf0

000113c8 <__fprintf_chk@plt>:
   113c8:	add	ip, pc, #0, 12
   113cc:	add	ip, ip, #106496	; 0x1a000
   113d0:	ldr	pc, [ip, #3304]!	; 0xce8

000113d4 <fclose@plt>:
   113d4:	add	ip, pc, #0, 12
   113d8:	add	ip, ip, #106496	; 0x1a000
   113dc:	ldr	pc, [ip, #3296]!	; 0xce0

000113e0 <fseeko64@plt>:
   113e0:	add	ip, pc, #0, 12
   113e4:	add	ip, ip, #106496	; 0x1a000
   113e8:	ldr	pc, [ip, #3288]!	; 0xcd8

000113ec <fcntl64@plt>:
   113ec:	add	ip, pc, #0, 12
   113f0:	add	ip, ip, #106496	; 0x1a000
   113f4:	ldr	pc, [ip, #3280]!	; 0xcd0

000113f8 <rpmatch@plt>:
   113f8:	add	ip, pc, #0, 12
   113fc:	add	ip, ip, #106496	; 0x1a000
   11400:	ldr	pc, [ip, #3272]!	; 0xcc8

00011404 <__overflow@plt>:
   11404:	add	ip, pc, #0, 12
   11408:	add	ip, ip, #106496	; 0x1a000
   1140c:	ldr	pc, [ip, #3264]!	; 0xcc0

00011410 <setlocale@plt>:
   11410:	add	ip, pc, #0, 12
   11414:	add	ip, ip, #106496	; 0x1a000
   11418:	ldr	pc, [ip, #3256]!	; 0xcb8

0001141c <strrchr@plt>:
   1141c:	add	ip, pc, #0, 12
   11420:	add	ip, ip, #106496	; 0x1a000
   11424:	ldr	pc, [ip, #3248]!	; 0xcb0

00011428 <nl_langinfo@plt>:
   11428:	add	ip, pc, #0, 12
   1142c:	add	ip, ip, #106496	; 0x1a000
   11430:	ldr	pc, [ip, #3240]!	; 0xca8

00011434 <readdir64@plt>:
   11434:	add	ip, pc, #0, 12
   11438:	add	ip, ip, #106496	; 0x1a000
   1143c:	ldr	pc, [ip, #3232]!	; 0xca0

00011440 <fdopendir@plt>:
   11440:	add	ip, pc, #0, 12
   11444:	add	ip, ip, #106496	; 0x1a000
   11448:	ldr	pc, [ip, #3224]!	; 0xc98

0001144c <dirfd@plt>:
   1144c:	add	ip, pc, #0, 12
   11450:	add	ip, ip, #106496	; 0x1a000
   11454:	ldr	pc, [ip, #3216]!	; 0xc90

00011458 <fchdir@plt>:
   11458:	add	ip, pc, #0, 12
   1145c:	add	ip, ip, #106496	; 0x1a000
   11460:	ldr	pc, [ip, #3208]!	; 0xc88

00011464 <qsort@plt>:
   11464:	add	ip, pc, #0, 12
   11468:	add	ip, ip, #106496	; 0x1a000
   1146c:	ldr	pc, [ip, #3200]!	; 0xc80

00011470 <bindtextdomain@plt>:
   11470:	add	ip, pc, #0, 12
   11474:	add	ip, ip, #106496	; 0x1a000
   11478:	ldr	pc, [ip, #3192]!	; 0xc78

0001147c <__xstat64@plt>:
   1147c:	add	ip, pc, #0, 12
   11480:	add	ip, ip, #106496	; 0x1a000
   11484:	ldr	pc, [ip, #3184]!	; 0xc70

00011488 <isatty@plt>:
   11488:	add	ip, pc, #0, 12
   1148c:	add	ip, ip, #106496	; 0x1a000
   11490:	ldr	pc, [ip, #3176]!	; 0xc68

00011494 <strncmp@plt>:
   11494:	add	ip, pc, #0, 12
   11498:	add	ip, ip, #106496	; 0x1a000
   1149c:	ldr	pc, [ip, #3168]!	; 0xc60

000114a0 <abort@plt>:
   114a0:	add	ip, pc, #0, 12
   114a4:	add	ip, ip, #106496	; 0x1a000
   114a8:	ldr	pc, [ip, #3160]!	; 0xc58

000114ac <close@plt>:
   114ac:	add	ip, pc, #0, 12
   114b0:	add	ip, ip, #106496	; 0x1a000
   114b4:	ldr	pc, [ip, #3152]!	; 0xc50

000114b8 <__lxstat64@plt>:
   114b8:	add	ip, pc, #0, 12
   114bc:	add	ip, ip, #106496	; 0x1a000
   114c0:	ldr	pc, [ip, #3144]!	; 0xc48

000114c4 <dcngettext@plt>:
   114c4:	add	ip, pc, #0, 12
   114c8:	add	ip, ip, #106496	; 0x1a000
   114cc:	ldr	pc, [ip, #3136]!	; 0xc40

000114d0 <closedir@plt>:
   114d0:	add	ip, pc, #0, 12
   114d4:	add	ip, ip, #106496	; 0x1a000
   114d8:	ldr	pc, [ip, #3128]!	; 0xc38

000114dc <__mempcpy_chk@plt>:
   114dc:	add	ip, pc, #0, 12
   114e0:	add	ip, ip, #106496	; 0x1a000
   114e4:	ldr	pc, [ip, #3120]!	; 0xc30

000114e8 <__assert_fail@plt>:
   114e8:	add	ip, pc, #0, 12
   114ec:	add	ip, ip, #106496	; 0x1a000
   114f0:	ldr	pc, [ip, #3112]!	; 0xc28

Disassembly of section .text:

000114f8 <.text>:
   114f8:	mov	fp, #0
   114fc:	mov	lr, #0
   11500:	pop	{r1}		; (ldr r1, [sp], #4)
   11504:	mov	r2, sp
   11508:	push	{r2}		; (str r2, [sp, #-4]!)
   1150c:	push	{r0}		; (str r0, [sp, #-4]!)
   11510:	ldr	ip, [pc, #16]	; 11528 <__assert_fail@plt+0x40>
   11514:	push	{ip}		; (str ip, [sp, #-4]!)
   11518:	ldr	r0, [pc, #12]	; 1152c <__assert_fail@plt+0x44>
   1151c:	ldr	r3, [pc, #12]	; 11530 <__assert_fail@plt+0x48>
   11520:	bl	1132c <__libc_start_main@plt>
   11524:	bl	114a0 <abort@plt>
   11528:	andeq	sl, r1, ip, ror r7
   1152c:	strdeq	r1, [r1], -ip
   11530:	andeq	sl, r1, ip, lsl r7
   11534:	ldr	r3, [pc, #20]	; 11550 <__assert_fail@plt+0x68>
   11538:	ldr	r2, [pc, #20]	; 11554 <__assert_fail@plt+0x6c>
   1153c:	add	r3, pc, r3
   11540:	ldr	r2, [r3, r2]
   11544:	cmp	r2, #0
   11548:	bxeq	lr
   1154c:	b	11344 <__gmon_start__@plt>
   11550:			; <UNDEFINED> instruction: 0x0001aabc
   11554:	andeq	r0, r0, ip, lsl r1
   11558:	ldr	r0, [pc, #24]	; 11578 <__assert_fail@plt+0x90>
   1155c:	ldr	r3, [pc, #24]	; 1157c <__assert_fail@plt+0x94>
   11560:	cmp	r3, r0
   11564:	bxeq	lr
   11568:	ldr	r3, [pc, #16]	; 11580 <__assert_fail@plt+0x98>
   1156c:	cmp	r3, #0
   11570:	bxeq	lr
   11574:	bx	r3
   11578:	andeq	ip, r2, r8, ror r1
   1157c:	andeq	ip, r2, r8, ror r1
   11580:	andeq	r0, r0, r0
   11584:	ldr	r0, [pc, #36]	; 115b0 <__assert_fail@plt+0xc8>
   11588:	ldr	r1, [pc, #36]	; 115b4 <__assert_fail@plt+0xcc>
   1158c:	sub	r1, r1, r0
   11590:	asr	r1, r1, #2
   11594:	add	r1, r1, r1, lsr #31
   11598:	asrs	r1, r1, #1
   1159c:	bxeq	lr
   115a0:	ldr	r3, [pc, #16]	; 115b8 <__assert_fail@plt+0xd0>
   115a4:	cmp	r3, #0
   115a8:	bxeq	lr
   115ac:	bx	r3
   115b0:	andeq	ip, r2, r8, ror r1
   115b4:	andeq	ip, r2, r8, ror r1
   115b8:	andeq	r0, r0, r0
   115bc:	push	{r4, lr}
   115c0:	ldr	r4, [pc, #24]	; 115e0 <__assert_fail@plt+0xf8>
   115c4:	ldrb	r3, [r4]
   115c8:	cmp	r3, #0
   115cc:	popne	{r4, pc}
   115d0:	bl	11558 <__assert_fail@plt+0x70>
   115d4:	mov	r3, #1
   115d8:	strb	r3, [r4]
   115dc:	pop	{r4, pc}
   115e0:	muleq	r2, ip, r1
   115e4:	b	11584 <__assert_fail@plt+0x9c>
   115e8:	push	{fp, lr}
   115ec:	mov	fp, sp
   115f0:	sub	sp, sp, #56	; 0x38
   115f4:	mov	r4, r0
   115f8:	cmp	r0, #0
   115fc:	bne	118b8 <__assert_fail@plt+0x3d0>
   11600:	movw	r1, #42955	; 0xa7cb
   11604:	mov	r0, #0
   11608:	mov	r2, #5
   1160c:	movt	r1, #1
   11610:	bl	11278 <dcgettext@plt>
   11614:	movw	r5, #49596	; 0xc1bc
   11618:	mov	r1, r0
   1161c:	mov	r0, #1
   11620:	movt	r5, #2
   11624:	ldr	r2, [r5]
   11628:	bl	113b0 <__printf_chk@plt>
   1162c:	movw	r1, #42988	; 0xa7ec
   11630:	mov	r0, #0
   11634:	mov	r2, #5
   11638:	movt	r1, #1
   1163c:	bl	11278 <dcgettext@plt>
   11640:	movw	r7, #49556	; 0xc194
   11644:	movt	r7, #2
   11648:	ldr	r1, [r7]
   1164c:	bl	111dc <fputs_unlocked@plt>
   11650:	movw	r1, #43148	; 0xa88c
   11654:	mov	r0, #0
   11658:	mov	r2, #5
   1165c:	movt	r1, #1
   11660:	bl	11278 <dcgettext@plt>
   11664:	ldr	r1, [r7]
   11668:	bl	111dc <fputs_unlocked@plt>
   1166c:	movw	r1, #43524	; 0xaa04
   11670:	mov	r0, #0
   11674:	mov	r2, #5
   11678:	movt	r1, #1
   1167c:	bl	11278 <dcgettext@plt>
   11680:	ldr	r1, [r7]
   11684:	bl	111dc <fputs_unlocked@plt>
   11688:	movw	r1, #43748	; 0xaae4
   1168c:	mov	r0, #0
   11690:	mov	r2, #5
   11694:	movt	r1, #1
   11698:	bl	11278 <dcgettext@plt>
   1169c:	ldr	r1, [r7]
   116a0:	bl	111dc <fputs_unlocked@plt>
   116a4:	movw	r1, #44002	; 0xabe2
   116a8:	mov	r0, #0
   116ac:	mov	r2, #5
   116b0:	movt	r1, #1
   116b4:	bl	11278 <dcgettext@plt>
   116b8:	ldr	r1, [r7]
   116bc:	bl	111dc <fputs_unlocked@plt>
   116c0:	movw	r1, #44177	; 0xac91
   116c4:	mov	r0, #0
   116c8:	mov	r2, #5
   116cc:	movt	r1, #1
   116d0:	bl	11278 <dcgettext@plt>
   116d4:	ldr	r1, [r7]
   116d8:	bl	111dc <fputs_unlocked@plt>
   116dc:	movw	r1, #44222	; 0xacbe
   116e0:	mov	r0, #0
   116e4:	mov	r2, #5
   116e8:	movt	r1, #1
   116ec:	bl	11278 <dcgettext@plt>
   116f0:	ldr	r1, [r7]
   116f4:	bl	111dc <fputs_unlocked@plt>
   116f8:	movw	r1, #44276	; 0xacf4
   116fc:	mov	r0, #0
   11700:	mov	r2, #5
   11704:	movt	r1, #1
   11708:	bl	11278 <dcgettext@plt>
   1170c:	ldr	r1, [r7]
   11710:	bl	111dc <fputs_unlocked@plt>
   11714:	movw	r1, #44431	; 0xad8f
   11718:	mov	r0, #0
   1171c:	mov	r2, #5
   11720:	movt	r1, #1
   11724:	bl	11278 <dcgettext@plt>
   11728:	ldr	r2, [r5]
   1172c:	mov	r1, r0
   11730:	mov	r0, #1
   11734:	mov	r3, r2
   11738:	bl	113b0 <__printf_chk@plt>
   1173c:	movw	r1, #44553	; 0xae09
   11740:	mov	r0, #0
   11744:	mov	r2, #5
   11748:	movt	r1, #1
   1174c:	bl	11278 <dcgettext@plt>
   11750:	ldr	r1, [r7]
   11754:	bl	111dc <fputs_unlocked@plt>
   11758:	movw	r0, #45960	; 0xb388
   1175c:	mov	r2, #48	; 0x30
   11760:	mov	r6, sp
   11764:	movw	r5, #44782	; 0xaeee
   11768:	movt	r0, #1
   1176c:	movt	r5, #1
   11770:	add	r1, r0, #32
   11774:	add	r3, r0, #16
   11778:	vld1.64	{d18-d19}, [r0], r2
   1177c:	vld1.64	{d16-d17}, [r1]
   11780:	vld1.64	{d20-d21}, [r3]
   11784:	add	r1, r6, #32
   11788:	vldr	d22, [r0]
   1178c:	add	r0, r6, #16
   11790:	vst1.64	{d16-d17}, [r1]
   11794:	movw	r1, #45258	; 0xb0ca
   11798:	vst1.64	{d20-d21}, [r0]
   1179c:	mov	r0, r6
   117a0:	vst1.64	{d18-d19}, [r0], r2
   117a4:	movt	r1, #1
   117a8:	vstr	d22, [r0]
   117ac:	mov	r0, r5
   117b0:	bl	11200 <strcmp@plt>
   117b4:	cmp	r0, #0
   117b8:	ldrne	r1, [r6, #8]!
   117bc:	cmpne	r1, #0
   117c0:	bne	117ac <__assert_fail@plt+0x2c4>
   117c4:	ldr	r6, [r6, #4]
   117c8:	movw	r1, #45353	; 0xb129
   117cc:	mov	r0, #0
   117d0:	mov	r2, #5
   117d4:	movt	r1, #1
   117d8:	bl	11278 <dcgettext@plt>
   117dc:	movw	r2, #44949	; 0xaf95
   117e0:	movw	r3, #45376	; 0xb140
   117e4:	mov	r1, r0
   117e8:	mov	r0, #1
   117ec:	movt	r2, #1
   117f0:	movt	r3, #1
   117f4:	bl	113b0 <__printf_chk@plt>
   117f8:	cmp	r6, #0
   117fc:	mov	r0, #5
   11800:	mov	r1, #0
   11804:	moveq	r6, r5
   11808:	bl	11410 <setlocale@plt>
   1180c:	cmp	r0, #0
   11810:	beq	11848 <__assert_fail@plt+0x360>
   11814:	movw	r1, #45416	; 0xb168
   11818:	mov	r2, #3
   1181c:	movt	r1, #1
   11820:	bl	11494 <strncmp@plt>
   11824:	cmp	r0, #0
   11828:	beq	11848 <__assert_fail@plt+0x360>
   1182c:	movw	r1, #45420	; 0xb16c
   11830:	mov	r0, #0
   11834:	mov	r2, #5
   11838:	movt	r1, #1
   1183c:	bl	11278 <dcgettext@plt>
   11840:	ldr	r1, [r7]
   11844:	bl	111dc <fputs_unlocked@plt>
   11848:	movw	r1, #45491	; 0xb1b3
   1184c:	mov	r0, #0
   11850:	mov	r2, #5
   11854:	movt	r1, #1
   11858:	bl	11278 <dcgettext@plt>
   1185c:	movw	r2, #45376	; 0xb140
   11860:	mov	r1, r0
   11864:	mov	r0, #1
   11868:	mov	r3, r5
   1186c:	movt	r2, #1
   11870:	bl	113b0 <__printf_chk@plt>
   11874:	movw	r1, #45518	; 0xb1ce
   11878:	mov	r0, #0
   1187c:	mov	r2, #5
   11880:	movt	r1, #1
   11884:	bl	11278 <dcgettext@plt>
   11888:	movw	r3, #45568	; 0xb200
   1188c:	mov	r1, r0
   11890:	movw	r0, #45286	; 0xb0e6
   11894:	cmp	r6, r5
   11898:	mov	r2, r6
   1189c:	movt	r0, #1
   118a0:	movt	r3, #1
   118a4:	moveq	r3, r0
   118a8:	mov	r0, #1
   118ac:	bl	113b0 <__printf_chk@plt>
   118b0:	mov	r0, r4
   118b4:	bl	11368 <exit@plt>
   118b8:	movw	r0, #49544	; 0xc188
   118bc:	movw	r1, #42916	; 0xa7a4
   118c0:	mov	r2, #5
   118c4:	movt	r0, #2
   118c8:	movt	r1, #1
   118cc:	ldr	r5, [r0]
   118d0:	mov	r0, #0
   118d4:	bl	11278 <dcgettext@plt>
   118d8:	mov	r2, r0
   118dc:	movw	r0, #49596	; 0xc1bc
   118e0:	mov	r1, #1
   118e4:	movt	r0, #2
   118e8:	ldr	r3, [r0]
   118ec:	mov	r0, r5
   118f0:	bl	113c8 <__fprintf_chk@plt>
   118f4:	mov	r0, r4
   118f8:	bl	11368 <exit@plt>
   118fc:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   11900:	add	fp, sp, #28
   11904:	sub	sp, sp, #52	; 0x34
   11908:	mov	r5, r0
   1190c:	ldr	r0, [r1]
   11910:	mov	r4, r1
   11914:	bl	172f8 <__assert_fail@plt+0x5e10>
   11918:	movw	r1, #45568	; 0xb200
   1191c:	mov	r0, #6
   11920:	movt	r1, #1
   11924:	bl	11410 <setlocale@plt>
   11928:	movw	r6, #44953	; 0xaf99
   1192c:	movw	r1, #44785	; 0xaef1
   11930:	movt	r6, #1
   11934:	movt	r1, #1
   11938:	mov	r0, r6
   1193c:	bl	11470 <bindtextdomain@plt>
   11940:	mov	r0, r6
   11944:	bl	11290 <textdomain@plt>
   11948:	movw	r0, #13816	; 0x35f8
   1194c:	movt	r0, #1
   11950:	bl	1a780 <__assert_fail@plt+0x9298>
   11954:	mov	r8, #0
   11958:	mov	r0, #4
   1195c:	strb	r8, [sp, #32]
   11960:	str	r0, [sp, #36]	; 0x24
   11964:	mov	r0, #0
   11968:	strb	r8, [sp, #42]	; 0x2a
   1196c:	strh	r8, [sp, #40]	; 0x28
   11970:	str	r8, [sp, #44]	; 0x2c
   11974:	strb	r8, [sp, #48]	; 0x30
   11978:	bl	11488 <isatty@plt>
   1197c:	cmp	r0, #0
   11980:	strh	r8, [sp, #50]	; 0x32
   11984:	movw	r6, #44809	; 0xaf09
   11988:	movw	r3, #45712	; 0xb290
   1198c:	mov	sl, #0
   11990:	movwne	r0, #1
   11994:	movt	r6, #1
   11998:	movt	r3, #1
   1199c:	strb	r0, [sp, #49]	; 0x31
   119a0:	mov	r0, #0
   119a4:	str	r0, [sp, #24]
   119a8:	mov	r0, #0
   119ac:	str	r0, [sp, #28]
   119b0:	mov	r0, #1
   119b4:	str	r0, [sp, #20]
   119b8:	b	119c8 <__assert_fail@plt+0x4e0>
   119bc:	str	r0, [sp, #36]	; 0x24
   119c0:	mov	r0, #0
   119c4:	str	r0, [sp, #28]
   119c8:	mov	r0, r5
   119cc:	mov	r1, r4
   119d0:	mov	r2, r6
   119d4:	str	r8, [sp]
   119d8:	mov	r9, r3
   119dc:	bl	11350 <getopt_long@plt>
   119e0:	cmp	r0, #72	; 0x48
   119e4:	ble	11c78 <__assert_fail@plt+0x790>
   119e8:	sub	r1, r0, #73	; 0x49
   119ec:	mov	r7, r6
   119f0:	cmp	r1, #45	; 0x2d
   119f4:	bhi	11ad4 <__assert_fail@plt+0x5ec>
   119f8:	add	r0, pc, #8
   119fc:	mov	r6, r7
   11a00:	mov	r3, r9
   11a04:	ldr	pc, [r0, r1, lsl #2]
   11a08:	muleq	r1, r4, fp
   11a0c:	andeq	r1, r1, r4, ror #29
   11a10:	andeq	r1, r1, r4, ror #29
   11a14:	andeq	r1, r1, r4, ror #29
   11a18:	andeq	r1, r1, r4, ror #29
   11a1c:	andeq	r1, r1, r4, ror #29
   11a20:	andeq	r1, r1, r4, ror #29
   11a24:	andeq	r1, r1, r4, ror #29
   11a28:	andeq	r1, r1, r4, ror #29
   11a2c:	andeq	r1, r1, r0, asr #21
   11a30:	andeq	r1, r1, r4, ror #29
   11a34:	andeq	r1, r1, r4, ror #29
   11a38:	andeq	r1, r1, r4, ror #29
   11a3c:	andeq	r1, r1, r4, ror #29
   11a40:	andeq	r1, r1, r4, ror #29
   11a44:	andeq	r1, r1, r4, ror #29
   11a48:	andeq	r1, r1, r4, ror #29
   11a4c:	andeq	r1, r1, r4, ror #29
   11a50:	andeq	r1, r1, r4, ror #29
   11a54:	andeq	r1, r1, r4, ror #29
   11a58:	andeq	r1, r1, r4, ror #29
   11a5c:	andeq	r1, r1, r4, ror #29
   11a60:	andeq	r1, r1, r4, ror #29
   11a64:	andeq	r1, r1, r4, ror #29
   11a68:	andeq	r1, r1, r4, ror #29
   11a6c:	andeq	r1, r1, r4, ror #29
   11a70:	andeq	r1, r1, r4, ror #29
   11a74:	andeq	r1, r1, ip, asr #23
   11a78:	andeq	r1, r1, r4, ror #29
   11a7c:			; <UNDEFINED> instruction: 0x00011bbc
   11a80:	andeq	r1, r1, r4, ror #29
   11a84:	andeq	r1, r1, r4, ror #29
   11a88:	andeq	r1, r1, r4, lsl #23
   11a8c:	andeq	r1, r1, r4, ror #29
   11a90:	andeq	r1, r1, r4, ror #29
   11a94:	andeq	r1, r1, r4, ror #29
   11a98:	andeq	r1, r1, r4, ror #29
   11a9c:	andeq	r1, r1, r4, ror #29
   11aa0:	andeq	r1, r1, r4, ror #29
   11aa4:	andeq	r1, r1, r4, ror #29
   11aa8:	andeq	r1, r1, r4, ror #29
   11aac:	andeq	r1, r1, r0, asr #21
   11ab0:	andeq	r1, r1, r4, ror #29
   11ab4:	andeq	r1, r1, r4, ror #29
   11ab8:	andeq	r1, r1, r4, ror #29
   11abc:	ldrdeq	r1, [r1], -r8
   11ac0:	mov	r1, #1
   11ac4:	mov	r0, #1
   11ac8:	str	r0, [sp, #24]
   11acc:	strb	r1, [sp, #41]	; 0x29
   11ad0:	b	119c8 <__assert_fail@plt+0x4e0>
   11ad4:	sub	r0, r0, #256	; 0x100
   11ad8:	cmp	r0, #4
   11adc:	bhi	11ee4 <__assert_fail@plt+0x9fc>
   11ae0:	add	r1, pc, #8
   11ae4:	mov	r6, r7
   11ae8:	mov	r3, r9
   11aec:	ldr	pc, [r1, r0, lsl #2]
   11af0:	andeq	r1, r1, r4, lsl #22
   11af4:	andeq	r1, r1, ip, ror #24
   11af8:	andeq	r1, r1, r4, ror #23
   11afc:	andeq	r1, r1, r0, lsr #24
   11b00:			; <UNDEFINED> instruction: 0x00011bb0
   11b04:	movw	r0, #49560	; 0xc198
   11b08:	movt	r0, #2
   11b0c:	ldr	r1, [r0]
   11b10:	cmp	r1, #0
   11b14:	beq	11b84 <__assert_fail@plt+0x69c>
   11b18:	movw	r0, #49452	; 0xc12c
   11b1c:	mov	r2, #4
   11b20:	movw	r3, #45904	; 0xb350
   11b24:	movt	r0, #2
   11b28:	str	r2, [sp]
   11b2c:	movw	r2, #45928	; 0xb368
   11b30:	movt	r3, #1
   11b34:	ldr	r0, [r0]
   11b38:	movt	r2, #1
   11b3c:	str	r0, [sp, #4]
   11b40:	mov	r0, #1
   11b44:	str	r0, [sp, #8]
   11b48:	movw	r0, #44817	; 0xaf11
   11b4c:	movt	r0, #1
   11b50:	bl	132f8 <__assert_fail@plt+0x1e10>
   11b54:	movw	r1, #45904	; 0xb350
   11b58:	mov	r3, r9
   11b5c:	mov	r6, r7
   11b60:	movt	r1, #1
   11b64:	ldr	r0, [r1, r0, lsl #2]
   11b68:	cmp	r0, #2
   11b6c:	beq	11b84 <__assert_fail@plt+0x69c>
   11b70:	cmp	r0, #1
   11b74:	beq	11b94 <__assert_fail@plt+0x6ac>
   11b78:	cmp	r0, #0
   11b7c:	bne	119c8 <__assert_fail@plt+0x4e0>
   11b80:	b	11bc4 <__assert_fail@plt+0x6dc>
   11b84:	mov	sl, #0
   11b88:	mov	r0, #3
   11b8c:	strb	sl, [sp, #32]
   11b90:	b	119bc <__assert_fail@plt+0x4d4>
   11b94:	mov	sl, #0
   11b98:	mov	r0, #4
   11b9c:	strb	sl, [sp, #32]
   11ba0:	str	r0, [sp, #36]	; 0x24
   11ba4:	mov	r0, #1
   11ba8:	str	r0, [sp, #28]
   11bac:	b	119c8 <__assert_fail@plt+0x4e0>
   11bb0:	mov	r0, #1
   11bb4:	strb	r0, [sp, #49]	; 0x31
   11bb8:	b	119c8 <__assert_fail@plt+0x4e0>
   11bbc:	mov	sl, #1
   11bc0:	strb	sl, [sp, #32]
   11bc4:	mov	r0, #5
   11bc8:	b	119bc <__assert_fail@plt+0x4d4>
   11bcc:	mov	r0, #1
   11bd0:	strb	r0, [sp, #42]	; 0x2a
   11bd4:	b	119c8 <__assert_fail@plt+0x4e0>
   11bd8:	mov	r0, #1
   11bdc:	strb	r0, [sp, #50]	; 0x32
   11be0:	b	119c8 <__assert_fail@plt+0x4e0>
   11be4:	movw	r0, #49536	; 0xc180
   11be8:	movw	r1, #44831	; 0xaf1f
   11bec:	movt	r0, #2
   11bf0:	movt	r1, #1
   11bf4:	ldr	r0, [r0]
   11bf8:	add	r0, r4, r0, lsl #2
   11bfc:	ldr	r0, [r0, #-4]
   11c00:	bl	11200 <strcmp@plt>
   11c04:	mov	r1, #0
   11c08:	mov	r3, r9
   11c0c:	mov	r6, r7
   11c10:	cmp	r0, #0
   11c14:	str	r1, [sp, #20]
   11c18:	beq	119c8 <__assert_fail@plt+0x4e0>
   11c1c:	b	11e80 <__assert_fail@plt+0x998>
   11c20:	movw	r0, #49560	; 0xc198
   11c24:	mov	r1, #1
   11c28:	movt	r0, #2
   11c2c:	str	r1, [sp, #20]
   11c30:	ldr	r0, [r0]
   11c34:	cmp	r0, #0
   11c38:	beq	119c8 <__assert_fail@plt+0x4e0>
   11c3c:	movw	r1, #44903	; 0xaf67
   11c40:	movt	r1, #1
   11c44:	bl	11200 <strcmp@plt>
   11c48:	cmp	r0, #0
   11c4c:	bne	11ea4 <__assert_fail@plt+0x9bc>
   11c50:	mov	r1, #1
   11c54:	mov	r0, #1
   11c58:	mov	r6, r7
   11c5c:	mov	r3, r9
   11c60:	str	r0, [sp, #20]
   11c64:	strb	r1, [sp, #48]	; 0x30
   11c68:	b	119c8 <__assert_fail@plt+0x4e0>
   11c6c:	mov	r0, #1
   11c70:	strb	r0, [sp, #40]	; 0x28
   11c74:	b	119c8 <__assert_fail@plt+0x4e0>
   11c78:	cmn	r0, #1
   11c7c:	bne	11e04 <__assert_fail@plt+0x91c>
   11c80:	movw	r8, #49536	; 0xc180
   11c84:	movt	r8, #2
   11c88:	ldr	r6, [r8]
   11c8c:	cmp	r6, r5
   11c90:	bge	11d48 <__assert_fail@plt+0x860>
   11c94:	ldr	r7, [sp, #24]
   11c98:	tst	r7, #255	; 0xff
   11c9c:	beq	11ccc <__assert_fail@plt+0x7e4>
   11ca0:	ldr	r0, [sp, #20]
   11ca4:	eor	r0, r0, #1
   11ca8:	tst	r0, #1
   11cac:	bne	11ccc <__assert_fail@plt+0x7e4>
   11cb0:	movw	r0, #49568	; 0xc1a0
   11cb4:	movt	r0, #2
   11cb8:	bl	19064 <__assert_fail@plt+0x7b7c>
   11cbc:	cmp	r0, #0
   11cc0:	str	r0, [sp, #44]	; 0x2c
   11cc4:	beq	11f18 <__assert_fail@plt+0xa30>
   11cc8:	ldr	r6, [r8]
   11ccc:	ldr	r0, [sp, #28]
   11cd0:	tst	r0, #1
   11cd4:	beq	11dd4 <__assert_fail@plt+0x8ec>
   11cd8:	sub	r5, r5, r6
   11cdc:	cmp	r5, #3
   11ce0:	bhi	11cec <__assert_fail@plt+0x804>
   11ce4:	tst	r7, #255	; 0xff
   11ce8:	beq	11dd4 <__assert_fail@plt+0x8ec>
   11cec:	movw	r0, #49544	; 0xc188
   11cf0:	cmn	r5, #1
   11cf4:	mov	r3, r5
   11cf8:	movt	r0, #2
   11cfc:	ldr	r9, [r0]
   11d00:	bgt	11d24 <__assert_fail@plt+0x83c>
   11d04:	movw	r8, #16960	; 0x4240
   11d08:	asr	r1, r5, #31
   11d0c:	mov	r0, r5
   11d10:	mov	r3, #0
   11d14:	movt	r8, #15
   11d18:	mov	r2, r8
   11d1c:	bl	1a5a8 <__assert_fail@plt+0x90c0>
   11d20:	add	r3, r2, r8
   11d24:	mov	r0, #5
   11d28:	tst	r7, #255	; 0xff
   11d2c:	beq	11d80 <__assert_fail@plt+0x898>
   11d30:	movw	r1, #45070	; 0xb00e
   11d34:	movw	r2, #45109	; 0xb035
   11d38:	str	r0, [sp]
   11d3c:	movt	r1, #1
   11d40:	movt	r2, #1
   11d44:	b	11d94 <__assert_fail@plt+0x8ac>
   11d48:	mov	r5, #0
   11d4c:	tst	sl, #255	; 0xff
   11d50:	bne	11df8 <__assert_fail@plt+0x910>
   11d54:	movw	r1, #45023	; 0xafdf
   11d58:	mov	r0, #0
   11d5c:	mov	r2, #5
   11d60:	movt	r1, #1
   11d64:	bl	11278 <dcgettext@plt>
   11d68:	mov	r2, r0
   11d6c:	mov	r0, #0
   11d70:	mov	r1, #0
   11d74:	bl	11308 <error@plt>
   11d78:	mov	r0, #1
   11d7c:	bl	115e8 <__assert_fail@plt+0x100>
   11d80:	movw	r1, #45149	; 0xb05d
   11d84:	movw	r2, #45176	; 0xb078
   11d88:	str	r0, [sp]
   11d8c:	movt	r1, #1
   11d90:	movt	r2, #1
   11d94:	mov	r0, #0
   11d98:	bl	114c4 <dcngettext@plt>
   11d9c:	mov	r2, r0
   11da0:	movw	r0, #49596	; 0xc1bc
   11da4:	mov	r1, #1
   11da8:	str	r5, [sp]
   11dac:	movt	r0, #2
   11db0:	ldr	r3, [r0]
   11db4:	asr	r0, r5, #31
   11db8:	str	r0, [sp, #4]
   11dbc:	mov	r0, r9
   11dc0:	bl	113c8 <__fprintf_chk@plt>
   11dc4:	mov	r5, #0
   11dc8:	bl	19e30 <__assert_fail@plt+0x8948>
   11dcc:	cmp	r0, #0
   11dd0:	beq	11df8 <__assert_fail@plt+0x910>
   11dd4:	add	r0, r4, r6, lsl #2
   11dd8:	add	r1, sp, #32
   11ddc:	bl	12034 <__assert_fail@plt+0xb4c>
   11de0:	sub	r1, r0, #2
   11de4:	cmp	r1, #3
   11de8:	bcs	11ef8 <__assert_fail@plt+0xa10>
   11dec:	sub	r0, r0, #4
   11df0:	clz	r0, r0
   11df4:	lsr	r5, r0, #5
   11df8:	mov	r0, r5
   11dfc:	sub	sp, fp, #28
   11e00:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   11e04:	cmn	r0, #3
   11e08:	bne	11e70 <__assert_fail@plt+0x988>
   11e0c:	movw	r0, #49448	; 0xc128
   11e10:	movw	r2, #45010	; 0xafd2
   11e14:	movw	r7, #44990	; 0xafbe
   11e18:	movw	r6, #44974	; 0xafae
   11e1c:	movw	r5, #44963	; 0xafa3
   11e20:	mov	r1, #0
   11e24:	movt	r0, #2
   11e28:	movt	r2, #1
   11e2c:	movt	r7, #1
   11e30:	movt	r6, #1
   11e34:	movt	r5, #1
   11e38:	ldr	r3, [r0]
   11e3c:	movw	r0, #49556	; 0xc194
   11e40:	movt	r0, #2
   11e44:	ldr	r0, [r0]
   11e48:	stm	sp, {r5, r6, r7}
   11e4c:	str	r2, [sp, #12]
   11e50:	movw	r2, #44949	; 0xaf95
   11e54:	str	r1, [sp, #16]
   11e58:	movw	r1, #44782	; 0xaeee
   11e5c:	movt	r1, #1
   11e60:	movt	r2, #1
   11e64:	bl	19584 <__assert_fail@plt+0x809c>
   11e68:	mov	r0, #0
   11e6c:	bl	11368 <exit@plt>
   11e70:	cmn	r0, #2
   11e74:	bne	11ee4 <__assert_fail@plt+0x9fc>
   11e78:	mov	r0, #0
   11e7c:	bl	115e8 <__assert_fail@plt+0x100>
   11e80:	movw	r1, #44850	; 0xaf32
   11e84:	mov	r0, #0
   11e88:	mov	r2, #5
   11e8c:	movt	r1, #1
   11e90:	bl	11278 <dcgettext@plt>
   11e94:	mov	r2, r0
   11e98:	mov	r0, #1
   11e9c:	mov	r1, #0
   11ea0:	bl	11308 <error@plt>
   11ea4:	movw	r1, #44907	; 0xaf6b
   11ea8:	mov	r0, #0
   11eac:	mov	r2, #5
   11eb0:	movt	r1, #1
   11eb4:	bl	11278 <dcgettext@plt>
   11eb8:	mov	r4, r0
   11ebc:	movw	r0, #49560	; 0xc198
   11ec0:	movt	r0, #2
   11ec4:	ldr	r1, [r0]
   11ec8:	mov	r0, #4
   11ecc:	bl	18a04 <__assert_fail@plt+0x751c>
   11ed0:	mov	r3, r0
   11ed4:	mov	r0, #1
   11ed8:	mov	r1, #0
   11edc:	mov	r2, r4
   11ee0:	bl	11308 <error@plt>
   11ee4:	mov	r0, r5
   11ee8:	mov	r1, r4
   11eec:	bl	11f5c <__assert_fail@plt+0xa74>
   11ef0:	mov	r0, #1
   11ef4:	bl	115e8 <__assert_fail@plt+0x100>
   11ef8:	movw	r0, #45204	; 0xb094
   11efc:	movw	r1, #45226	; 0xb0aa
   11f00:	movw	r3, #45235	; 0xb0b3
   11f04:	movw	r2, #371	; 0x173
   11f08:	movt	r0, #1
   11f0c:	movt	r1, #1
   11f10:	movt	r3, #1
   11f14:	bl	114e8 <__assert_fail@plt>
   11f18:	bl	1138c <__errno_location@plt>
   11f1c:	ldr	r4, [r0]
   11f20:	movw	r1, #45039	; 0xafef
   11f24:	mov	r0, #0
   11f28:	mov	r2, #5
   11f2c:	movt	r1, #1
   11f30:	bl	11278 <dcgettext@plt>
   11f34:	movw	r1, #48345	; 0xbcd9
   11f38:	mov	r5, r0
   11f3c:	mov	r0, #4
   11f40:	movt	r1, #1
   11f44:	bl	18a04 <__assert_fail@plt+0x751c>
   11f48:	mov	r3, r0
   11f4c:	mov	r0, #1
   11f50:	mov	r1, r4
   11f54:	mov	r2, r5
   11f58:	bl	11308 <error@plt>
   11f5c:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   11f60:	add	fp, sp, #24
   11f64:	sub	sp, sp, #112	; 0x70
   11f68:	cmp	r0, #2
   11f6c:	blt	11fc0 <__assert_fail@plt+0xad8>
   11f70:	mov	r4, r1
   11f74:	mov	r6, r0
   11f78:	mov	r7, #1
   11f7c:	add	r8, sp, #8
   11f80:	ldr	r5, [r4, r7, lsl #2]
   11f84:	ldrb	r0, [r5]
   11f88:	cmp	r0, #45	; 0x2d
   11f8c:	bne	11fb4 <__assert_fail@plt+0xacc>
   11f90:	ldrb	r0, [r5, #1]
   11f94:	cmp	r0, #0
   11f98:	beq	11fb4 <__assert_fail@plt+0xacc>
   11f9c:	mov	r0, #3
   11fa0:	mov	r1, r5
   11fa4:	mov	r2, r8
   11fa8:	bl	114b8 <__lxstat64@plt>
   11fac:	cmp	r0, #0
   11fb0:	beq	11fc8 <__assert_fail@plt+0xae0>
   11fb4:	add	r7, r7, #1
   11fb8:	cmp	r7, r6
   11fbc:	blt	11f80 <__assert_fail@plt+0xa98>
   11fc0:	sub	sp, fp, #24
   11fc4:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   11fc8:	movw	r0, #49544	; 0xc188
   11fcc:	movw	r1, #45668	; 0xb264
   11fd0:	mov	r2, #5
   11fd4:	movt	r0, #2
   11fd8:	movt	r1, #1
   11fdc:	ldr	r8, [r0]
   11fe0:	mov	r0, #0
   11fe4:	bl	11278 <dcgettext@plt>
   11fe8:	ldr	r4, [r4]
   11fec:	mov	r7, r0
   11ff0:	mov	r0, #1
   11ff4:	mov	r1, #3
   11ff8:	mov	r2, r5
   11ffc:	bl	1895c <__assert_fail@plt+0x7474>
   12000:	mov	r6, r0
   12004:	mov	r0, #4
   12008:	mov	r1, r5
   1200c:	bl	18a04 <__assert_fail@plt+0x751c>
   12010:	str	r0, [sp, #4]
   12014:	mov	r0, r8
   12018:	mov	r1, #1
   1201c:	mov	r2, r7
   12020:	mov	r3, r4
   12024:	str	r6, [sp]
   12028:	bl	113c8 <__fprintf_chk@plt>
   1202c:	sub	sp, fp, #24
   12030:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   12034:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12038:	add	fp, sp, #28
   1203c:	sub	sp, sp, #124	; 0x7c
   12040:	mov	sl, r1
   12044:	ldr	r1, [r0]
   12048:	cmp	r1, #0
   1204c:	beq	12734 <__assert_fail@plt+0x124c>
   12050:	ldrb	r2, [sl, #8]
   12054:	mov	r1, #600	; 0x258
   12058:	mov	r9, #0
   1205c:	cmp	r2, #0
   12060:	mov	r2, #0
   12064:	movweq	r1, #536	; 0x218
   12068:	bl	19db4 <__assert_fail@plt+0x88cc>
   1206c:	mov	r4, r0
   12070:	bl	14448 <__assert_fail@plt+0x2f60>
   12074:	cmp	r0, #0
   12078:	beq	1273c <__assert_fail@plt+0x1254>
   1207c:	mov	r8, r0
   12080:	add	r0, r4, #16
   12084:	mov	r7, #2
   12088:	str	r0, [sp, #12]
   1208c:	b	12554 <__assert_fail@plt+0x106c>
   12090:	ldrb	r1, [sl, #8]
   12094:	cmp	r1, #0
   12098:	beq	125a0 <__assert_fail@plt+0x10b8>
   1209c:	ldr	r1, [r8, #48]	; 0x30
   120a0:	cmp	r1, #1
   120a4:	blt	125a0 <__assert_fail@plt+0x10b8>
   120a8:	ldr	r1, [sp, #12]
   120ac:	ldrd	r2, [r1]
   120b0:	ldr	r6, [r8, #64]	; 0x40
   120b4:	ldr	r1, [r8, #68]	; 0x44
   120b8:	eor	r1, r1, r3
   120bc:	eor	r2, r6, r2
   120c0:	orrs	r1, r2, r1
   120c4:	beq	125a0 <__assert_fail@plt+0x10b8>
   120c8:	ldr	r0, [r8, #4]
   120cc:	mov	r2, #1
   120d0:	ldr	r1, [r0, #48]	; 0x30
   120d4:	cmp	r1, #0
   120d8:	blt	120fc <__assert_fail@plt+0xc14>
   120dc:	ldr	r1, [r0, #16]
   120e0:	cmp	r1, #0
   120e4:	bne	120fc <__assert_fail@plt+0xc14>
   120e8:	str	r2, [r0, #16]
   120ec:	ldr	r0, [r0, #4]
   120f0:	ldr	r1, [r0, #48]	; 0x30
   120f4:	cmn	r1, #1
   120f8:	bgt	120dc <__assert_fail@plt+0xbf4>
   120fc:	movw	r1, #46393	; 0xb539
   12100:	mov	r0, #0
   12104:	mov	r2, #5
   12108:	movt	r1, #1
   1210c:	bl	11278 <dcgettext@plt>
   12110:	ldr	r1, [r8, #28]
   12114:	mov	r5, r0
   12118:	mov	r0, #4
   1211c:	mov	r6, #4
   12120:	bl	18a04 <__assert_fail@plt+0x751c>
   12124:	mov	r3, r0
   12128:	mov	r0, #0
   1212c:	mov	r1, #0
   12130:	mov	r2, r5
   12134:	bl	11308 <error@plt>
   12138:	b	12718 <__assert_fail@plt+0x1230>
   1213c:	ldrb	r0, [sl, #10]
   12140:	cmp	r0, #0
   12144:	beq	12410 <__assert_fail@plt+0xf28>
   12148:	ldr	r1, [r8, #24]
   1214c:	ldr	r0, [r4, #32]
   12150:	bl	12834 <__assert_fail@plt+0x134c>
   12154:	cmp	r0, #0
   12158:	bne	1262c <__assert_fail@plt+0x1144>
   1215c:	ldrb	r0, [sl, #10]
   12160:	mov	r6, #39	; 0x27
   12164:	cmp	r0, #0
   12168:	movweq	r6, #21
   1216c:	b	12414 <__assert_fail@plt+0xf2c>
   12170:	ldr	r6, [r8, #24]
   12174:	mov	r0, r6
   12178:	bl	13564 <__assert_fail@plt+0x207c>
   1217c:	ldrb	r1, [r0]
   12180:	cmp	r1, #46	; 0x2e
   12184:	bne	12228 <__assert_fail@plt+0xd40>
   12188:	ldrb	r1, [r0, #1]
   1218c:	cmp	r1, #46	; 0x2e
   12190:	mov	r1, #1
   12194:	movweq	r1, #2
   12198:	ldrb	r0, [r0, r1]
   1219c:	cmp	r0, #47	; 0x2f
   121a0:	cmpne	r0, #0
   121a4:	bne	12228 <__assert_fail@plt+0xd40>
   121a8:	movw	r1, #46156	; 0xb44c
   121ac:	mov	r0, #0
   121b0:	mov	r2, #5
   121b4:	movt	r1, #1
   121b8:	bl	11278 <dcgettext@plt>
   121bc:	movw	r2, #46208	; 0xb480
   121c0:	mov	r9, r0
   121c4:	mov	r0, #0
   121c8:	mov	r1, #4
   121cc:	mov	r6, #4
   121d0:	movt	r2, #1
   121d4:	bl	1895c <__assert_fail@plt+0x7474>
   121d8:	movw	r2, #46207	; 0xb47f
   121dc:	mov	r7, r0
   121e0:	mov	r0, #1
   121e4:	mov	r1, #4
   121e8:	movt	r2, #1
   121ec:	bl	1895c <__assert_fail@plt+0x7474>
   121f0:	ldr	r2, [r8, #28]
   121f4:	mov	r5, r0
   121f8:	mov	r0, #2
   121fc:	mov	r1, #4
   12200:	bl	1895c <__assert_fail@plt+0x7474>
   12204:	str	r0, [sp, #4]
   12208:	mov	r2, r9
   1220c:	mov	r0, #0
   12210:	mov	r1, #0
   12214:	mov	r3, r7
   12218:	str	r5, [sp]
   1221c:	mov	r9, #0
   12220:	bl	11308 <error@plt>
   12224:	b	12700 <__assert_fail@plt+0x1218>
   12228:	ldr	r0, [sl, #12]
   1222c:	cmp	r0, #0
   12230:	beq	12374 <__assert_fail@plt+0xe8c>
   12234:	ldrd	r2, [r0]
   12238:	ldr	r1, [r8, #160]	; 0xa0
   1223c:	ldr	r5, [r8, #164]	; 0xa4
   12240:	eor	r3, r5, r3
   12244:	eor	r1, r1, r2
   12248:	orrs	r1, r1, r3
   1224c:	bne	12374 <__assert_fail@plt+0xe8c>
   12250:	ldrd	r0, [r0, #8]
   12254:	ldrd	r2, [r8, #64]	; 0x40
   12258:	eor	r1, r3, r1
   1225c:	eor	r0, r2, r0
   12260:	orrs	r0, r0, r1
   12264:	bne	12374 <__assert_fail@plt+0xe8c>
   12268:	ldr	r0, [r8, #28]
   1226c:	movw	r7, #48345	; 0xbcd9
   12270:	movt	r7, #1
   12274:	mov	r1, r7
   12278:	bl	11200 <strcmp@plt>
   1227c:	cmp	r0, #0
   12280:	beq	124f4 <__assert_fail@plt+0x100c>
   12284:	movw	r1, #46255	; 0xb4af
   12288:	mov	r0, #0
   1228c:	mov	r2, #5
   12290:	movt	r1, #1
   12294:	bl	11278 <dcgettext@plt>
   12298:	ldr	r2, [r8, #28]
   1229c:	mov	r5, r0
   122a0:	mov	r0, #0
   122a4:	mov	r1, #4
   122a8:	bl	1895c <__assert_fail@plt+0x7474>
   122ac:	mov	r6, r0
   122b0:	mov	r0, #1
   122b4:	mov	r1, #4
   122b8:	mov	r2, r7
   122bc:	bl	1895c <__assert_fail@plt+0x7474>
   122c0:	str	r0, [sp]
   122c4:	mov	r0, #0
   122c8:	mov	r1, #0
   122cc:	mov	r2, r5
   122d0:	mov	r3, r6
   122d4:	b	12528 <__assert_fail@plt+0x1040>
   122d8:	mov	r0, r4
   122dc:	mov	r1, r8
   122e0:	mov	r2, sl
   122e4:	mov	r3, #1
   122e8:	bl	12e38 <__assert_fail@plt+0x1950>
   122ec:	mov	r9, r0
   122f0:	cmp	r0, #2
   122f4:	bne	1231c <__assert_fail@plt+0xe34>
   122f8:	mov	r0, r4
   122fc:	mov	r1, r8
   12300:	mov	r2, #4
   12304:	bl	15ac8 <__assert_fail@plt+0x45e0>
   12308:	mov	r0, r4
   1230c:	bl	14448 <__assert_fail@plt+0x2f60>
   12310:	mov	r6, #2
   12314:	mov	r9, #0
   12318:	b	125f0 <__assert_fail@plt+0x1108>
   1231c:	ldr	r0, [r8, #4]
   12320:	mov	r2, #1
   12324:	ldr	r1, [r0, #48]	; 0x30
   12328:	cmp	r1, #0
   1232c:	blt	12350 <__assert_fail@plt+0xe68>
   12330:	ldr	r1, [r0, #16]
   12334:	cmp	r1, #0
   12338:	bne	12350 <__assert_fail@plt+0xe68>
   1233c:	str	r2, [r0, #16]
   12340:	ldr	r0, [r0, #4]
   12344:	ldr	r1, [r0, #48]	; 0x30
   12348:	cmn	r1, #1
   1234c:	bgt	12330 <__assert_fail@plt+0xe48>
   12350:	mov	r0, r4
   12354:	mov	r1, r8
   12358:	mov	r2, #4
   1235c:	bl	15ac8 <__assert_fail@plt+0x45e0>
   12360:	mov	r0, r4
   12364:	bl	14448 <__assert_fail@plt+0x2f60>
   12368:	mov	r6, r9
   1236c:	mov	r9, #0
   12370:	b	125f0 <__assert_fail@plt+0x1108>
   12374:	ldrb	r0, [sl, #16]
   12378:	cmp	r0, #0
   1237c:	beq	12638 <__assert_fail@plt+0x1150>
   12380:	movw	r1, #46207	; 0xb47f
   12384:	mov	r0, r6
   12388:	mov	r2, #0
   1238c:	movt	r1, #1
   12390:	bl	13930 <__assert_fail@plt+0x2448>
   12394:	mov	r6, r0
   12398:	mov	r0, #3
   1239c:	add	r2, sp, #16
   123a0:	mov	r1, r6
   123a4:	bl	114b8 <__lxstat64@plt>
   123a8:	cmp	r0, #0
   123ac:	beq	12484 <__assert_fail@plt+0xf9c>
   123b0:	movw	r1, #46362	; 0xb51a
   123b4:	mov	r0, #0
   123b8:	mov	r2, #5
   123bc:	movt	r1, #1
   123c0:	bl	11278 <dcgettext@plt>
   123c4:	mov	r5, r0
   123c8:	mov	r0, #0
   123cc:	mov	r1, #4
   123d0:	mov	r2, r6
   123d4:	bl	1895c <__assert_fail@plt+0x7474>
   123d8:	ldr	r2, [r8, #24]
   123dc:	mov	r7, r0
   123e0:	mov	r0, #1
   123e4:	mov	r1, #4
   123e8:	bl	1895c <__assert_fail@plt+0x7474>
   123ec:	str	r0, [sp]
   123f0:	mov	r0, #0
   123f4:	mov	r1, #0
   123f8:	mov	r2, r5
   123fc:	mov	r3, r7
   12400:	bl	11308 <error@plt>
   12404:	mov	r0, r6
   12408:	bl	13a64 <__assert_fail@plt+0x257c>
   1240c:	b	126fc <__assert_fail@plt+0x1214>
   12410:	mov	r6, #21
   12414:	movw	r1, #46139	; 0xb43b
   12418:	mov	r0, #0
   1241c:	mov	r2, #5
   12420:	movt	r1, #1
   12424:	bl	11278 <dcgettext@plt>
   12428:	ldr	r1, [r8, #28]
   1242c:	mov	r5, r0
   12430:	mov	r0, #4
   12434:	bl	18a04 <__assert_fail@plt+0x751c>
   12438:	mov	r3, r0
   1243c:	mov	r0, #0
   12440:	mov	r1, r6
   12444:	mov	r2, r5
   12448:	bl	11308 <error@plt>
   1244c:	ldr	r0, [r8, #4]
   12450:	mov	r2, #1
   12454:	ldr	r1, [r0, #48]	; 0x30
   12458:	cmp	r1, #0
   1245c:	blt	126fc <__assert_fail@plt+0x1214>
   12460:	ldr	r1, [r0, #16]
   12464:	cmp	r1, #0
   12468:	bne	126fc <__assert_fail@plt+0x1214>
   1246c:	str	r2, [r0, #16]
   12470:	ldr	r0, [r0, #4]
   12474:	ldr	r1, [r0, #48]	; 0x30
   12478:	cmn	r1, #1
   1247c:	bgt	12460 <__assert_fail@plt+0xf78>
   12480:	b	126fc <__assert_fail@plt+0x1214>
   12484:	mov	r0, r6
   12488:	bl	13a64 <__assert_fail@plt+0x257c>
   1248c:	ldr	r0, [sp, #12]
   12490:	ldr	r2, [sp, #16]
   12494:	ldr	r3, [sp, #20]
   12498:	ldrd	r0, [r0]
   1249c:	eor	r1, r1, r3
   124a0:	eor	r0, r0, r2
   124a4:	orrs	r0, r0, r1
   124a8:	beq	12638 <__assert_fail@plt+0x1150>
   124ac:	movw	r1, #46393	; 0xb539
   124b0:	mov	r0, #0
   124b4:	mov	r2, #5
   124b8:	movt	r1, #1
   124bc:	bl	11278 <dcgettext@plt>
   124c0:	ldr	r1, [r8, #28]
   124c4:	mov	r5, r0
   124c8:	mov	r0, #4
   124cc:	bl	18a04 <__assert_fail@plt+0x751c>
   124d0:	mov	r3, r0
   124d4:	mov	r0, #0
   124d8:	mov	r1, #0
   124dc:	mov	r2, r5
   124e0:	bl	11308 <error@plt>
   124e4:	movw	r1, #46439	; 0xb567
   124e8:	mov	r0, #0
   124ec:	movt	r1, #1
   124f0:	b	12538 <__assert_fail@plt+0x1050>
   124f4:	movw	r1, #46210	; 0xb482
   124f8:	mov	r0, #0
   124fc:	mov	r2, #5
   12500:	movt	r1, #1
   12504:	bl	11278 <dcgettext@plt>
   12508:	ldr	r1, [r8, #28]
   1250c:	mov	r5, r0
   12510:	mov	r0, #4
   12514:	bl	18a04 <__assert_fail@plt+0x751c>
   12518:	mov	r3, r0
   1251c:	mov	r0, #0
   12520:	mov	r1, #0
   12524:	mov	r2, r5
   12528:	bl	11308 <error@plt>
   1252c:	movw	r1, #46313	; 0xb4e9
   12530:	mov	r0, #0
   12534:	movt	r1, #1
   12538:	mov	r2, #5
   1253c:	bl	11278 <dcgettext@plt>
   12540:	mov	r2, r0
   12544:	mov	r0, #0
   12548:	mov	r1, #0
   1254c:	bl	11308 <error@plt>
   12550:	b	126fc <__assert_fail@plt+0x1214>
   12554:	ldrh	r0, [r8, #56]	; 0x38
   12558:	sub	r1, r0, #1
   1255c:	cmp	r1, #12
   12560:	bhi	127c4 <__assert_fail@plt+0x12dc>
   12564:	add	r2, pc, #0
   12568:	ldr	pc, [r2, r1, lsl #2]
   1256c:	andeq	r2, r1, r0, lsr #12
   12570:	andeq	r2, r1, r0, asr #13
   12574:	andeq	r2, r1, r0, lsr #11
   12578:	andeq	r2, r1, r0, lsr #11
   1257c:	andeq	r2, r1, r4, asr #15
   12580:	muleq	r1, r0, r0
   12584:	andeq	r2, r1, r0, lsl #13
   12588:	andeq	r2, r1, r0, lsr #11
   1258c:	andeq	r2, r1, r4, asr #15
   12590:	andeq	r2, r1, r0, lsr #11
   12594:	andeq	r2, r1, r0, lsr #11
   12598:	andeq	r2, r1, r0, lsr #11
   1259c:	andeq	r2, r1, r0, lsr #11
   125a0:	orr	r0, r0, #2
   125a4:	mov	r1, #3
   125a8:	mov	r3, sl
   125ac:	sub	r0, r0, #6
   125b0:	stm	sp, {r1, r9}
   125b4:	mov	r1, r8
   125b8:	clz	r0, r0
   125bc:	lsr	r5, r0, #5
   125c0:	mov	r0, r4
   125c4:	mov	r2, r5
   125c8:	bl	128fc <__assert_fail@plt+0x1414>
   125cc:	mov	r6, r0
   125d0:	cmp	r0, #2
   125d4:	bne	125f0 <__assert_fail@plt+0x1108>
   125d8:	mov	r0, r4
   125dc:	mov	r1, r8
   125e0:	mov	r2, sl
   125e4:	mov	r3, r5
   125e8:	bl	12e38 <__assert_fail@plt+0x1950>
   125ec:	mov	r6, r0
   125f0:	sub	r0, r6, #2
   125f4:	cmp	r0, #2
   125f8:	bcs	12614 <__assert_fail@plt+0x112c>
   125fc:	cmp	r7, #2
   12600:	bne	1271c <__assert_fail@plt+0x1234>
   12604:	cmp	r6, #3
   12608:	mov	r6, #3
   1260c:	moveq	r7, r6
   12610:	b	1271c <__assert_fail@plt+0x1234>
   12614:	cmp	r6, #4
   12618:	beq	12718 <__assert_fail@plt+0x1230>
   1261c:	b	12814 <__assert_fail@plt+0x132c>
   12620:	ldrb	r0, [sl, #9]
   12624:	cmp	r0, #0
   12628:	beq	1213c <__assert_fail@plt+0xc54>
   1262c:	ldr	r0, [r8, #48]	; 0x30
   12630:	cmp	r0, #0
   12634:	beq	12170 <__assert_fail@plt+0xc88>
   12638:	mov	r0, #2
   1263c:	mov	r1, r8
   12640:	mov	r2, #1
   12644:	mov	r3, sl
   12648:	str	r0, [sp]
   1264c:	add	r0, sp, #16
   12650:	str	r0, [sp, #4]
   12654:	mov	r0, r4
   12658:	bl	128fc <__assert_fail@plt+0x1414>
   1265c:	cmp	r0, #2
   12660:	mov	r9, r0
   12664:	ldreq	r0, [sp, #16]
   12668:	cmpeq	r0, #4
   1266c:	beq	122d8 <__assert_fail@plt+0xdf0>
   12670:	mov	r6, #2
   12674:	cmp	r9, #2
   12678:	bne	1231c <__assert_fail@plt+0xe34>
   1267c:	b	1236c <__assert_fail@plt+0xe84>
   12680:	ldr	r5, [r8, #32]
   12684:	movw	r1, #46662	; 0xb646
   12688:	mov	r0, #0
   1268c:	mov	r2, #5
   12690:	movt	r1, #1
   12694:	bl	11278 <dcgettext@plt>
   12698:	ldr	r2, [r8, #28]
   1269c:	mov	r6, r0
   126a0:	mov	r0, #0
   126a4:	mov	r1, #3
   126a8:	bl	18c80 <__assert_fail@plt+0x7798>
   126ac:	mov	r3, r0
   126b0:	mov	r0, #0
   126b4:	mov	r1, r5
   126b8:	mov	r2, r6
   126bc:	b	126f8 <__assert_fail@plt+0x1210>
   126c0:	movw	r1, #46476	; 0xb58c
   126c4:	mov	r0, #0
   126c8:	mov	r2, #5
   126cc:	movt	r1, #1
   126d0:	bl	11278 <dcgettext@plt>
   126d4:	ldr	r2, [r8, #28]
   126d8:	mov	r5, r0
   126dc:	mov	r0, #0
   126e0:	mov	r1, #3
   126e4:	bl	18c80 <__assert_fail@plt+0x7798>
   126e8:	mov	r3, r0
   126ec:	mov	r0, #0
   126f0:	mov	r1, #0
   126f4:	mov	r2, r5
   126f8:	bl	11308 <error@plt>
   126fc:	mov	r6, #4
   12700:	mov	r0, r4
   12704:	mov	r1, r8
   12708:	mov	r2, #4
   1270c:	bl	15ac8 <__assert_fail@plt+0x45e0>
   12710:	mov	r0, r4
   12714:	bl	14448 <__assert_fail@plt+0x2f60>
   12718:	mov	r7, r6
   1271c:	mov	r0, r4
   12720:	bl	14448 <__assert_fail@plt+0x2f60>
   12724:	mov	r8, r0
   12728:	cmp	r0, #0
   1272c:	bne	12554 <__assert_fail@plt+0x106c>
   12730:	b	12740 <__assert_fail@plt+0x1258>
   12734:	mov	r7, #2
   12738:	b	127b8 <__assert_fail@plt+0x12d0>
   1273c:	mov	r7, #2
   12740:	bl	1138c <__errno_location@plt>
   12744:	ldr	r6, [r0]
   12748:	mov	r5, r0
   1274c:	cmp	r6, #0
   12750:	beq	1277c <__assert_fail@plt+0x1294>
   12754:	movw	r1, #46016	; 0xb3c0
   12758:	mov	r0, #0
   1275c:	mov	r2, #5
   12760:	movt	r1, #1
   12764:	bl	11278 <dcgettext@plt>
   12768:	mov	r2, r0
   1276c:	mov	r0, #0
   12770:	mov	r1, r6
   12774:	bl	11308 <error@plt>
   12778:	mov	r7, #4
   1277c:	mov	r0, r4
   12780:	bl	142a8 <__assert_fail@plt+0x2dc0>
   12784:	cmp	r0, #0
   12788:	beq	127b8 <__assert_fail@plt+0x12d0>
   1278c:	ldr	r4, [r5]
   12790:	movw	r1, #46122	; 0xb42a
   12794:	mov	r0, #0
   12798:	mov	r2, #5
   1279c:	movt	r1, #1
   127a0:	bl	11278 <dcgettext@plt>
   127a4:	mov	r2, r0
   127a8:	mov	r0, #0
   127ac:	mov	r1, r4
   127b0:	bl	11308 <error@plt>
   127b4:	mov	r7, #4
   127b8:	mov	r0, r7
   127bc:	sub	sp, fp, #28
   127c0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   127c4:	movw	r1, #46683	; 0xb65b
   127c8:	mov	r0, #0
   127cc:	mov	r2, #5
   127d0:	movt	r1, #1
   127d4:	bl	11278 <dcgettext@plt>
   127d8:	ldr	r2, [r8, #28]
   127dc:	ldrh	r5, [r8, #56]	; 0x38
   127e0:	mov	r4, r0
   127e4:	mov	r0, #0
   127e8:	mov	r1, #3
   127ec:	bl	18c80 <__assert_fail@plt+0x7798>
   127f0:	movw	r1, #46739	; 0xb693
   127f4:	mov	r2, r4
   127f8:	mov	r3, r5
   127fc:	movt	r1, #1
   12800:	stm	sp, {r0, r1}
   12804:	mov	r0, #0
   12808:	mov	r1, #0
   1280c:	bl	11308 <error@plt>
   12810:	bl	114a0 <abort@plt>
   12814:	movw	r0, #46032	; 0xb3d0
   12818:	movw	r1, #46049	; 0xb3e1
   1281c:	movw	r3, #46062	; 0xb3ee
   12820:	movw	r2, #610	; 0x262
   12824:	movt	r0, #1
   12828:	movt	r1, #1
   1282c:	movt	r3, #1
   12830:	bl	114e8 <__assert_fail@plt>
   12834:	push	{r4, r5, r6, r7, fp, lr}
   12838:	add	fp, sp, #16
   1283c:	mov	r2, #51456	; 0xc900
   12840:	bl	11380 <openat64@plt>
   12844:	cmp	r0, #0
   12848:	blt	128f4 <__assert_fail@plt+0x140c>
   1284c:	mov	r5, r0
   12850:	bl	11440 <fdopendir@plt>
   12854:	cmp	r0, #0
   12858:	beq	128ec <__assert_fail@plt+0x1404>
   1285c:	mov	r4, r0
   12860:	bl	1138c <__errno_location@plt>
   12864:	mov	r5, r0
   12868:	mov	r0, #0
   1286c:	str	r0, [r5]
   12870:	mov	r0, r4
   12874:	bl	11434 <readdir64@plt>
   12878:	cmp	r0, #0
   1287c:	beq	128c8 <__assert_fail@plt+0x13e0>
   12880:	mov	r6, r0
   12884:	ldrb	r0, [r6, #19]
   12888:	cmp	r0, #46	; 0x2e
   1288c:	bne	128cc <__assert_fail@plt+0x13e4>
   12890:	ldrb	r0, [r6, #20]
   12894:	cmp	r0, #46	; 0x2e
   12898:	mov	r0, #1
   1289c:	movweq	r0, #2
   128a0:	add	r0, r6, r0
   128a4:	ldrb	r0, [r0, #19]
   128a8:	cmp	r0, #47	; 0x2f
   128ac:	cmpne	r0, #0
   128b0:	bne	128cc <__assert_fail@plt+0x13e4>
   128b4:	mov	r0, r4
   128b8:	bl	11434 <readdir64@plt>
   128bc:	mov	r6, r0
   128c0:	cmp	r0, #0
   128c4:	bne	12884 <__assert_fail@plt+0x139c>
   128c8:	mov	r6, #0
   128cc:	ldr	r7, [r5]
   128d0:	mov	r0, r4
   128d4:	bl	114d0 <closedir@plt>
   128d8:	orr	r0, r6, r7
   128dc:	str	r7, [r5]
   128e0:	clz	r0, r0
   128e4:	lsr	r0, r0, #5
   128e8:	pop	{r4, r5, r6, r7, fp, pc}
   128ec:	mov	r0, r5
   128f0:	bl	114ac <close@plt>
   128f4:	mov	r0, #0
   128f8:	pop	{r4, r5, r6, r7, fp, pc}
   128fc:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12900:	add	fp, sp, #28
   12904:	sub	sp, sp, #132	; 0x84
   12908:	mov	r5, r2
   1290c:	ldr	r6, [fp, #12]
   12910:	mov	r4, r1
   12914:	ldr	r2, [r1, #24]
   12918:	ldr	r1, [r1, #28]
   1291c:	ldr	r8, [r0, #32]
   12920:	mov	r7, r3
   12924:	str	r1, [sp, #20]
   12928:	mvn	r1, #0
   1292c:	cmp	r6, #0
   12930:	str	r2, [sp, #16]
   12934:	beq	12978 <__assert_fail@plt+0x1490>
   12938:	mov	r0, #2
   1293c:	str	r0, [r6]
   12940:	str	r1, [sp, #76]	; 0x4c
   12944:	str	r1, [sp, #72]	; 0x48
   12948:	mov	r0, r8
   1294c:	mov	r1, r2
   12950:	bl	12834 <__assert_fail@plt+0x134c>
   12954:	mov	r9, r0
   12958:	mov	r0, #3
   1295c:	mov	sl, r5
   12960:	cmp	r9, #0
   12964:	movwne	r0, #4
   12968:	cmp	r5, #0
   1296c:	str	r0, [r6]
   12970:	add	r0, sp, #24
   12974:	b	12990 <__assert_fail@plt+0x14a8>
   12978:	add	r0, sp, #24
   1297c:	cmp	r5, #0
   12980:	mov	sl, r5
   12984:	str	r1, [sp, #72]	; 0x48
   12988:	str	r1, [sp, #76]	; 0x4c
   1298c:	mov	r9, #0
   12990:	movwne	sl, #4
   12994:	add	r6, r0, #48	; 0x30
   12998:	ldr	r0, [r4, #16]
   1299c:	mov	r4, #3
   129a0:	cmp	r0, #0
   129a4:	bne	12a94 <__assert_fail@plt+0x15ac>
   129a8:	ldr	r1, [r7, #4]
   129ac:	cmp	r1, #5
   129b0:	beq	12a90 <__assert_fail@plt+0x15a8>
   129b4:	ldrb	r0, [r7]
   129b8:	mov	ip, #0
   129bc:	cmp	r0, #0
   129c0:	beq	12a54 <__assert_fail@plt+0x156c>
   129c4:	mov	r2, #0
   129c8:	cmp	r1, #3
   129cc:	bne	12a90 <__assert_fail@plt+0x15a8>
   129d0:	cmp	ip, #0
   129d4:	blt	12c04 <__assert_fail@plt+0x171c>
   129d8:	cmp	r5, #0
   129dc:	bne	12c04 <__assert_fail@plt+0x171c>
   129e0:	ldrd	r0, [r6]
   129e4:	str	r6, [sp, #12]
   129e8:	mvn	r6, #0
   129ec:	eor	r2, r1, r6
   129f0:	eor	r3, r0, r6
   129f4:	orrs	r2, r3, r2
   129f8:	bne	12b1c <__assert_fail@plt+0x1634>
   129fc:	ldr	r2, [sp, #16]
   12a00:	mov	r0, #256	; 0x100
   12a04:	add	r3, sp, #24
   12a08:	mov	r1, r8
   12a0c:	str	ip, [sp, #8]
   12a10:	str	r0, [sp]
   12a14:	mov	r0, #3
   12a18:	bl	112a8 <__fxstatat64@plt>
   12a1c:	cmp	r0, #0
   12a20:	beq	12b0c <__assert_fail@plt+0x1624>
   12a24:	ldr	r2, [sp, #12]
   12a28:	mvn	r1, #0
   12a2c:	subs	r0, r1, #1
   12a30:	sbc	r1, r1, #0
   12a34:	strd	r0, [r2]
   12a38:	bl	1138c <__errno_location@plt>
   12a3c:	ldr	r2, [r0]
   12a40:	asr	r1, r2, #31
   12a44:	str	r2, [sp, #120]	; 0x78
   12a48:	str	r1, [sp, #124]	; 0x7c
   12a4c:	str	r2, [r0]
   12a50:	b	12cd8 <__assert_fail@plt+0x17f0>
   12a54:	cmp	r1, #3
   12a58:	beq	12a6c <__assert_fail@plt+0x1584>
   12a5c:	ldrb	r0, [r7, #17]
   12a60:	mov	r2, #0
   12a64:	cmp	r0, #0
   12a68:	beq	12a88 <__assert_fail@plt+0x15a0>
   12a6c:	bl	19740 <__assert_fail@plt+0x8258>
   12a70:	cmp	r0, #0
   12a74:	beq	12aa0 <__assert_fail@plt+0x15b8>
   12a78:	bl	1138c <__errno_location@plt>
   12a7c:	ldr	r1, [r7, #4]
   12a80:	ldr	r2, [r0]
   12a84:	mov	ip, #0
   12a88:	cmp	r1, #3
   12a8c:	beq	129d0 <__assert_fail@plt+0x14e8>
   12a90:	mov	r4, #2
   12a94:	mov	r0, r4
   12a98:	sub	sp, fp, #28
   12a9c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12aa0:	ldrd	r0, [r6]
   12aa4:	str	r6, [sp, #12]
   12aa8:	mvn	r6, #0
   12aac:	eor	r2, r1, r6
   12ab0:	eor	r3, r0, r6
   12ab4:	orrs	r2, r3, r2
   12ab8:	bne	12b84 <__assert_fail@plt+0x169c>
   12abc:	ldr	r2, [sp, #16]
   12ac0:	mov	r0, #256	; 0x100
   12ac4:	add	r3, sp, #24
   12ac8:	mov	r1, r8
   12acc:	str	r0, [sp]
   12ad0:	mov	r0, #3
   12ad4:	bl	112a8 <__fxstatat64@plt>
   12ad8:	cmp	r0, #0
   12adc:	beq	12b78 <__assert_fail@plt+0x1690>
   12ae0:	ldr	r2, [sp, #12]
   12ae4:	mvn	r1, #0
   12ae8:	subs	r0, r1, #1
   12aec:	sbc	r1, r1, #0
   12af0:	strd	r0, [r2]
   12af4:	bl	1138c <__errno_location@plt>
   12af8:	ldr	r6, [r0]
   12afc:	asr	r1, r6, #31
   12b00:	str	r6, [sp, #120]	; 0x78
   12b04:	str	r1, [sp, #124]	; 0x7c
   12b08:	b	12bec <__assert_fail@plt+0x1704>
   12b0c:	ldr	r0, [sp, #12]
   12b10:	ldr	ip, [sp, #8]
   12b14:	mvn	r6, #0
   12b18:	ldrd	r0, [r0]
   12b1c:	subs	r0, r6, r0
   12b20:	sbcs	r0, r6, r1
   12b24:	bge	12b58 <__assert_fail@plt+0x1670>
   12b28:	ldr	r0, [sp, #40]	; 0x28
   12b2c:	and	r0, r0, #61440	; 0xf000
   12b30:	cmp	r0, #16384	; 0x4000
   12b34:	beq	12b6c <__assert_fail@plt+0x1684>
   12b38:	ldr	r6, [sp, #12]
   12b3c:	cmp	r0, #40960	; 0xa000
   12b40:	bne	12c0c <__assert_fail@plt+0x1724>
   12b44:	ldr	r0, [r7, #4]
   12b48:	mov	sl, #10
   12b4c:	cmp	r0, #3
   12b50:	beq	12c38 <__assert_fail@plt+0x1750>
   12b54:	b	12a90 <__assert_fail@plt+0x15a8>
   12b58:	ldr	r4, [sp, #120]	; 0x78
   12b5c:	bl	1138c <__errno_location@plt>
   12b60:	mov	r2, r4
   12b64:	str	r4, [r0]
   12b68:	b	12cd8 <__assert_fail@plt+0x17f0>
   12b6c:	ldr	r6, [sp, #12]
   12b70:	mov	sl, #4
   12b74:	b	12c14 <__assert_fail@plt+0x172c>
   12b78:	ldr	r0, [sp, #12]
   12b7c:	mvn	r6, #0
   12b80:	ldrd	r0, [r0]
   12b84:	subs	r0, r6, r0
   12b88:	sbcs	r0, r6, r1
   12b8c:	bge	12be4 <__assert_fail@plt+0x16fc>
   12b90:	ldr	r0, [sp, #40]	; 0x28
   12b94:	ldr	r6, [sp, #12]
   12b98:	and	r0, r0, #61440	; 0xf000
   12b9c:	cmp	r0, #40960	; 0xa000
   12ba0:	beq	12a78 <__assert_fail@plt+0x1590>
   12ba4:	ldr	r1, [sp, #16]
   12ba8:	mov	r0, r8
   12bac:	mov	r2, #2
   12bb0:	mov	r3, #512	; 0x200
   12bb4:	bl	1123c <faccessat@plt>
   12bb8:	cmp	r0, #0
   12bbc:	beq	12a78 <__assert_fail@plt+0x1590>
   12bc0:	bl	1138c <__errno_location@plt>
   12bc4:	ldr	r1, [r0]
   12bc8:	ldr	r2, [r0]
   12bcc:	mvn	ip, #0
   12bd0:	cmp	r1, #13
   12bd4:	movweq	ip, #1
   12bd8:	cmp	ip, #0
   12bdc:	bge	129d8 <__assert_fail@plt+0x14f0>
   12be0:	b	12c04 <__assert_fail@plt+0x171c>
   12be4:	ldr	r6, [sp, #120]	; 0x78
   12be8:	bl	1138c <__errno_location@plt>
   12bec:	str	r6, [r0]
   12bf0:	ldr	r6, [sp, #12]
   12bf4:	mvn	ip, #0
   12bf8:	ldr	r2, [r0]
   12bfc:	cmp	ip, #0
   12c00:	bge	129d8 <__assert_fail@plt+0x14f0>
   12c04:	cmp	ip, #0
   12c08:	blt	12cd8 <__assert_fail@plt+0x17f0>
   12c0c:	cmp	r5, #0
   12c10:	beq	12c38 <__assert_fail@plt+0x1750>
   12c14:	ldrb	r0, [r7, #9]
   12c18:	cmp	r0, #0
   12c1c:	bne	12c38 <__assert_fail@plt+0x1750>
   12c20:	ldrb	r0, [r7, #10]
   12c24:	mov	r2, #21
   12c28:	cmp	r0, #0
   12c2c:	beq	12cd8 <__assert_fail@plt+0x17f0>
   12c30:	eors	r0, r9, #1
   12c34:	bne	12cd8 <__assert_fail@plt+0x17f0>
   12c38:	ldr	r1, [sp, #20]
   12c3c:	mov	r7, r6
   12c40:	ldr	r6, [fp, #8]
   12c44:	mov	r0, #4
   12c48:	str	ip, [sp, #8]
   12c4c:	bl	18a04 <__assert_fail@plt+0x751c>
   12c50:	mov	r5, r0
   12c54:	eor	r0, sl, #4
   12c58:	eor	r1, r6, #2
   12c5c:	orrs	r0, r1, r0
   12c60:	movwne	r0, #1
   12c64:	orrs	r0, r9, r0
   12c68:	beq	12d1c <__assert_fail@plt+0x1834>
   12c6c:	ldrd	r0, [r7]
   12c70:	mov	r6, r7
   12c74:	mvn	r7, #0
   12c78:	mov	r9, r5
   12c7c:	eor	r2, r1, r7
   12c80:	eor	r3, r0, r7
   12c84:	orrs	r2, r3, r2
   12c88:	bne	12d78 <__assert_fail@plt+0x1890>
   12c8c:	ldr	r2, [sp, #16]
   12c90:	mov	r0, #256	; 0x100
   12c94:	add	r3, sp, #24
   12c98:	mov	r1, r8
   12c9c:	str	r0, [sp]
   12ca0:	mov	r0, #3
   12ca4:	bl	112a8 <__fxstatat64@plt>
   12ca8:	cmp	r0, #0
   12cac:	beq	12d70 <__assert_fail@plt+0x1888>
   12cb0:	mvn	r1, #0
   12cb4:	subs	r0, r1, #1
   12cb8:	sbc	r1, r1, #0
   12cbc:	strd	r0, [r6]
   12cc0:	bl	1138c <__errno_location@plt>
   12cc4:	ldr	r4, [r0]
   12cc8:	asr	r1, r4, #31
   12ccc:	str	r4, [sp, #120]	; 0x78
   12cd0:	str	r1, [sp, #124]	; 0x7c
   12cd4:	b	12e00 <__assert_fail@plt+0x1918>
   12cd8:	ldr	r1, [sp, #20]
   12cdc:	mov	r0, #4
   12ce0:	mov	r4, #4
   12ce4:	mov	r6, r2
   12ce8:	bl	18a04 <__assert_fail@plt+0x751c>
   12cec:	movw	r1, #46139	; 0xb43b
   12cf0:	mov	r5, r0
   12cf4:	mov	r0, #0
   12cf8:	mov	r2, #5
   12cfc:	movt	r1, #1
   12d00:	bl	11278 <dcgettext@plt>
   12d04:	mov	r2, r0
   12d08:	mov	r0, #0
   12d0c:	mov	r1, r6
   12d10:	mov	r3, r5
   12d14:	bl	11308 <error@plt>
   12d18:	b	12a94 <__assert_fail@plt+0x15ac>
   12d1c:	ldr	r2, [sp, #8]
   12d20:	movw	r0, #46809	; 0xb6d9
   12d24:	movw	r1, #46761	; 0xb6a9
   12d28:	movt	r0, #1
   12d2c:	movt	r1, #1
   12d30:	cmp	r2, #0
   12d34:	mov	r2, #5
   12d38:	moveq	r1, r0
   12d3c:	movw	r0, #49544	; 0xc188
   12d40:	movt	r0, #2
   12d44:	ldr	r6, [r0]
   12d48:	mov	r0, #0
   12d4c:	bl	11278 <dcgettext@plt>
   12d50:	mov	r2, r0
   12d54:	movw	r0, #49596	; 0xc1bc
   12d58:	str	r5, [sp]
   12d5c:	mov	r1, #1
   12d60:	movt	r0, #2
   12d64:	ldr	r3, [r0]
   12d68:	mov	r0, r6
   12d6c:	b	12de4 <__assert_fail@plt+0x18fc>
   12d70:	ldrd	r0, [r6]
   12d74:	mvn	r7, #0
   12d78:	ldr	r5, [sp, #8]
   12d7c:	subs	r0, r7, r0
   12d80:	sbcs	r0, r7, r1
   12d84:	bge	12df8 <__assert_fail@plt+0x1910>
   12d88:	movw	r0, #46876	; 0xb71c
   12d8c:	movw	r1, #46841	; 0xb6f9
   12d90:	cmp	r5, #0
   12d94:	mov	r2, #5
   12d98:	movt	r0, #1
   12d9c:	movt	r1, #1
   12da0:	moveq	r1, r0
   12da4:	movw	r0, #49544	; 0xc188
   12da8:	movt	r0, #2
   12dac:	ldr	r8, [r0]
   12db0:	mov	r0, #0
   12db4:	bl	11278 <dcgettext@plt>
   12db8:	mov	r7, r0
   12dbc:	movw	r0, #49596	; 0xc1bc
   12dc0:	movt	r0, #2
   12dc4:	ldr	r6, [r0]
   12dc8:	add	r0, sp, #24
   12dcc:	bl	13868 <__assert_fail@plt+0x2380>
   12dd0:	stm	sp, {r0, r9}
   12dd4:	mov	r0, r8
   12dd8:	mov	r1, #1
   12ddc:	mov	r2, r7
   12de0:	mov	r3, r6
   12de4:	bl	113c8 <__fprintf_chk@plt>
   12de8:	bl	19e30 <__assert_fail@plt+0x8948>
   12dec:	cmp	r0, #0
   12df0:	movne	r4, #2
   12df4:	b	12a94 <__assert_fail@plt+0x15ac>
   12df8:	ldr	r4, [sp, #120]	; 0x78
   12dfc:	bl	1138c <__errno_location@plt>
   12e00:	movw	r1, #46139	; 0xb43b
   12e04:	str	r4, [r0]
   12e08:	mov	r0, #0
   12e0c:	mov	r2, #5
   12e10:	mov	r5, r9
   12e14:	movt	r1, #1
   12e18:	bl	11278 <dcgettext@plt>
   12e1c:	mov	r2, r0
   12e20:	mov	r0, #0
   12e24:	mov	r1, r4
   12e28:	mov	r3, r9
   12e2c:	bl	11308 <error@plt>
   12e30:	mov	r4, #4
   12e34:	b	12a94 <__assert_fail@plt+0x15ac>
   12e38:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   12e3c:	add	fp, sp, #24
   12e40:	sub	sp, sp, #112	; 0x70
   12e44:	mov	r4, r1
   12e48:	mov	r7, r0
   12e4c:	ldr	r1, [r1, #24]
   12e50:	ldr	r0, [r0, #32]
   12e54:	mov	r5, r2
   12e58:	cmp	r3, #0
   12e5c:	mov	r2, r3
   12e60:	mov	r6, r3
   12e64:	movwne	r2, #512	; 0x200
   12e68:	bl	11218 <unlinkat@plt>
   12e6c:	cmp	r0, #0
   12e70:	beq	12fb0 <__assert_fail@plt+0x1ac8>
   12e74:	bl	1138c <__errno_location@plt>
   12e78:	ldr	r6, [r0]
   12e7c:	mov	r8, r0
   12e80:	cmp	r6, #30
   12e84:	bne	12ec4 <__assert_fail@plt+0x19dc>
   12e88:	ldr	r2, [r4, #24]
   12e8c:	ldr	r1, [r7, #32]
   12e90:	mov	r0, #256	; 0x100
   12e94:	add	r3, sp, #8
   12e98:	str	r0, [sp]
   12e9c:	mov	r0, #3
   12ea0:	bl	112a8 <__fxstatat64@plt>
   12ea4:	cmp	r0, #0
   12ea8:	beq	12eb8 <__assert_fail@plt+0x19d0>
   12eac:	ldr	r0, [r8]
   12eb0:	cmp	r0, #2
   12eb4:	beq	12ec0 <__assert_fail@plt+0x19d8>
   12eb8:	mov	r0, #30
   12ebc:	str	r0, [r8]
   12ec0:	ldr	r6, [r8]
   12ec4:	ldrb	r0, [r5]
   12ec8:	cmp	r0, #0
   12ecc:	beq	12ef8 <__assert_fail@plt+0x1a10>
   12ed0:	mov	r5, #2
   12ed4:	cmp	r6, #22
   12ed8:	bhi	12ef0 <__assert_fail@plt+0x1a08>
   12edc:	movw	r1, #4
   12ee0:	mov	r0, #1
   12ee4:	movt	r1, #80	; 0x50
   12ee8:	tst	r1, r0, lsl r6
   12eec:	bne	13004 <__assert_fail@plt+0x1b1c>
   12ef0:	cmp	r6, #84	; 0x54
   12ef4:	beq	13004 <__assert_fail@plt+0x1b1c>
   12ef8:	ldrh	r0, [r4, #56]	; 0x38
   12efc:	cmp	r0, #4
   12f00:	bne	12f3c <__assert_fail@plt+0x1a54>
   12f04:	sub	r0, r6, #17
   12f08:	cmp	r0, #22
   12f0c:	bhi	12f3c <__assert_fail@plt+0x1a54>
   12f10:	movw	r2, #25
   12f14:	mov	r1, #1
   12f18:	movt	r2, #64	; 0x40
   12f1c:	tst	r2, r1, lsl r0
   12f20:	beq	12f3c <__assert_fail@plt+0x1a54>
   12f24:	ldr	r0, [r4, #32]
   12f28:	cmp	r0, #13
   12f2c:	cmpne	r0, #1
   12f30:	bne	12f3c <__assert_fail@plt+0x1a54>
   12f34:	mov	r6, r0
   12f38:	str	r0, [r8]
   12f3c:	movw	r1, #46139	; 0xb43b
   12f40:	mov	r0, #0
   12f44:	mov	r2, #5
   12f48:	movt	r1, #1
   12f4c:	bl	11278 <dcgettext@plt>
   12f50:	ldr	r1, [r4, #28]
   12f54:	mov	r7, r0
   12f58:	mov	r0, #4
   12f5c:	mov	r5, #4
   12f60:	bl	18a04 <__assert_fail@plt+0x751c>
   12f64:	mov	r3, r0
   12f68:	mov	r0, #0
   12f6c:	mov	r1, r6
   12f70:	mov	r2, r7
   12f74:	bl	11308 <error@plt>
   12f78:	ldr	r0, [r4, #4]
   12f7c:	ldr	r1, [r0, #48]	; 0x30
   12f80:	cmp	r1, #0
   12f84:	blt	13004 <__assert_fail@plt+0x1b1c>
   12f88:	mov	r1, #1
   12f8c:	ldr	r2, [r0, #16]
   12f90:	cmp	r2, #0
   12f94:	bne	13004 <__assert_fail@plt+0x1b1c>
   12f98:	str	r1, [r0, #16]
   12f9c:	ldr	r0, [r0, #4]
   12fa0:	ldr	r2, [r0, #48]	; 0x30
   12fa4:	cmn	r2, #1
   12fa8:	bgt	12f8c <__assert_fail@plt+0x1aa4>
   12fac:	b	13004 <__assert_fail@plt+0x1b1c>
   12fb0:	ldrb	r0, [r5, #18]
   12fb4:	mov	r5, #2
   12fb8:	cmp	r0, #0
   12fbc:	beq	13004 <__assert_fail@plt+0x1b1c>
   12fc0:	movw	r0, #46895	; 0xb72f
   12fc4:	movw	r1, #46917	; 0xb745
   12fc8:	cmp	r6, #0
   12fcc:	mov	r2, #5
   12fd0:	movt	r0, #1
   12fd4:	movt	r1, #1
   12fd8:	movne	r1, r0
   12fdc:	mov	r0, #0
   12fe0:	bl	11278 <dcgettext@plt>
   12fe4:	ldr	r1, [r4, #28]
   12fe8:	mov	r6, r0
   12fec:	mov	r0, #4
   12ff0:	bl	18a04 <__assert_fail@plt+0x751c>
   12ff4:	mov	r2, r0
   12ff8:	mov	r0, #1
   12ffc:	mov	r1, r6
   13000:	bl	113b0 <__printf_chk@plt>
   13004:	mov	r0, r5
   13008:	sub	sp, fp, #24
   1300c:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   13010:	mov	r0, #1
   13014:	b	115e8 <__assert_fail@plt+0x100>
   13018:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1301c:	add	fp, sp, #28
   13020:	sub	sp, sp, #12
   13024:	mov	r4, r3
   13028:	mov	r6, r2
   1302c:	mov	r5, r1
   13030:	mov	sl, r0
   13034:	bl	11374 <strlen@plt>
   13038:	ldr	r8, [r5]
   1303c:	cmp	r8, #0
   13040:	beq	130fc <__assert_fail@plt+0x1c14>
   13044:	mov	r7, r0
   13048:	mov	r0, #0
   1304c:	add	r9, r5, #4
   13050:	mov	r5, #0
   13054:	str	r6, [sp, #4]
   13058:	str	r0, [sp]
   1305c:	mvn	r0, #0
   13060:	str	r0, [sp, #8]
   13064:	mov	r0, r8
   13068:	mov	r1, sl
   1306c:	mov	r2, r7
   13070:	bl	11494 <strncmp@plt>
   13074:	cmp	r0, #0
   13078:	bne	130d0 <__assert_fail@plt+0x1be8>
   1307c:	mov	r0, r8
   13080:	bl	11374 <strlen@plt>
   13084:	cmp	r0, r7
   13088:	beq	13100 <__assert_fail@plt+0x1c18>
   1308c:	ldr	r0, [sp, #8]
   13090:	cmn	r0, #1
   13094:	beq	130cc <__assert_fail@plt+0x1be4>
   13098:	ldr	r0, [sp, #4]
   1309c:	cmp	r0, #0
   130a0:	beq	130c0 <__assert_fail@plt+0x1bd8>
   130a4:	ldr	r1, [sp, #8]
   130a8:	mov	r2, r4
   130ac:	mla	r0, r1, r4, r0
   130b0:	mov	r1, r6
   130b4:	bl	1126c <memcmp@plt>
   130b8:	cmp	r0, #0
   130bc:	beq	130d0 <__assert_fail@plt+0x1be8>
   130c0:	mov	r0, #1
   130c4:	str	r0, [sp]
   130c8:	b	130d0 <__assert_fail@plt+0x1be8>
   130cc:	str	r5, [sp, #8]
   130d0:	ldr	r8, [r9, r5, lsl #2]
   130d4:	add	r6, r6, r4
   130d8:	add	r5, r5, #1
   130dc:	cmp	r8, #0
   130e0:	bne	13064 <__assert_fail@plt+0x1b7c>
   130e4:	ldr	r0, [sp]
   130e8:	tst	r0, #1
   130ec:	ldr	r0, [sp, #8]
   130f0:	mvnne	r0, #1
   130f4:	sub	sp, fp, #28
   130f8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   130fc:	mvn	r5, #0
   13100:	mov	r0, r5
   13104:	sub	sp, fp, #28
   13108:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1310c:	push	{r4, r5, r6, r7, fp, lr}
   13110:	add	fp, sp, #16
   13114:	mov	r5, r0
   13118:	ldr	r0, [r1]
   1311c:	mvn	r4, #0
   13120:	cmp	r0, #0
   13124:	beq	13154 <__assert_fail@plt+0x1c6c>
   13128:	add	r7, r1, #4
   1312c:	mov	r6, #0
   13130:	mov	r1, r5
   13134:	bl	11200 <strcmp@plt>
   13138:	cmp	r0, #0
   1313c:	moveq	r0, r6
   13140:	popeq	{r4, r5, r6, r7, fp, pc}
   13144:	ldr	r0, [r7, r6, lsl #2]
   13148:	add	r6, r6, #1
   1314c:	cmp	r0, #0
   13150:	bne	13130 <__assert_fail@plt+0x1c48>
   13154:	mov	r0, r4
   13158:	pop	{r4, r5, r6, r7, fp, pc}
   1315c:	push	{r4, r5, r6, sl, fp, lr}
   13160:	add	fp, sp, #16
   13164:	sub	sp, sp, #8
   13168:	mov	r4, r1
   1316c:	movw	r1, #46971	; 0xb77b
   13170:	mov	r5, r0
   13174:	movw	r0, #46944	; 0xb760
   13178:	cmn	r2, #1
   1317c:	mov	r2, #5
   13180:	movt	r0, #1
   13184:	movt	r1, #1
   13188:	moveq	r1, r0
   1318c:	mov	r0, #0
   13190:	bl	11278 <dcgettext@plt>
   13194:	mov	r6, r0
   13198:	mov	r0, #0
   1319c:	mov	r1, #8
   131a0:	mov	r2, r4
   131a4:	bl	1895c <__assert_fail@plt+0x7474>
   131a8:	mov	r4, r0
   131ac:	mov	r0, #1
   131b0:	mov	r1, r5
   131b4:	bl	18f1c <__assert_fail@plt+0x7a34>
   131b8:	str	r0, [sp]
   131bc:	mov	r0, #0
   131c0:	mov	r1, #0
   131c4:	mov	r2, r6
   131c8:	mov	r3, r4
   131cc:	bl	11308 <error@plt>
   131d0:	sub	sp, fp, #16
   131d4:	pop	{r4, r5, r6, sl, fp, pc}
   131d8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   131dc:	add	fp, sp, #28
   131e0:	sub	sp, sp, #4
   131e4:	mov	r5, r1
   131e8:	movw	r1, #47000	; 0xb798
   131ec:	mov	sl, r2
   131f0:	mov	r7, r0
   131f4:	mov	r0, #0
   131f8:	mov	r2, #5
   131fc:	mov	r8, #0
   13200:	movt	r1, #1
   13204:	bl	11278 <dcgettext@plt>
   13208:	movw	r4, #49544	; 0xc188
   1320c:	movt	r4, #2
   13210:	ldr	r1, [r4]
   13214:	bl	111dc <fputs_unlocked@plt>
   13218:	ldr	r6, [r7]
   1321c:	cmp	r6, #0
   13220:	beq	132c0 <__assert_fail@plt+0x1dd8>
   13224:	add	r9, r7, #4
   13228:	mov	r7, #0
   1322c:	str	sl, [sp]
   13230:	cmp	r8, #0
   13234:	beq	13250 <__assert_fail@plt+0x1d68>
   13238:	mov	r0, r7
   1323c:	mov	r1, r5
   13240:	mov	r2, sl
   13244:	bl	1126c <memcmp@plt>
   13248:	cmp	r0, #0
   1324c:	beq	1327c <__assert_fail@plt+0x1d94>
   13250:	ldr	r7, [r4]
   13254:	mov	r0, r6
   13258:	bl	18f2c <__assert_fail@plt+0x7a44>
   1325c:	movw	r2, #47021	; 0xb7ad
   13260:	mov	r3, r0
   13264:	mov	r0, r7
   13268:	mov	r1, #1
   1326c:	movt	r2, #1
   13270:	bl	113c8 <__fprintf_chk@plt>
   13274:	mov	r7, r5
   13278:	b	132ac <__assert_fail@plt+0x1dc4>
   1327c:	mov	sl, r9
   13280:	ldr	r9, [r4]
   13284:	mov	r0, r6
   13288:	bl	18f2c <__assert_fail@plt+0x7a44>
   1328c:	mov	r3, r0
   13290:	mov	r0, r9
   13294:	mov	r9, sl
   13298:	ldr	sl, [sp]
   1329c:	movw	r2, #47029	; 0xb7b5
   132a0:	mov	r1, #1
   132a4:	movt	r2, #1
   132a8:	bl	113c8 <__fprintf_chk@plt>
   132ac:	ldr	r6, [r9, -r8, lsl #2]
   132b0:	add	r5, r5, sl
   132b4:	sub	r8, r8, #1
   132b8:	cmp	r6, #0
   132bc:	bne	13230 <__assert_fail@plt+0x1d48>
   132c0:	ldr	r0, [r4]
   132c4:	ldr	r1, [r0, #20]
   132c8:	ldr	r2, [r0, #24]
   132cc:	cmp	r1, r2
   132d0:	addcc	r2, r1, #1
   132d4:	strcc	r2, [r0, #20]
   132d8:	movcc	r0, #10
   132dc:	strbcc	r0, [r1]
   132e0:	subcc	sp, fp, #28
   132e4:	popcc	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   132e8:	mov	r1, #10
   132ec:	sub	sp, fp, #28
   132f0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   132f4:	b	11404 <__overflow@plt>
   132f8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   132fc:	add	fp, sp, #28
   13300:	sub	sp, sp, #20
   13304:	mov	r9, r0
   13308:	ldr	r0, [fp, #16]
   1330c:	mov	r8, r3
   13310:	mov	sl, r2
   13314:	mov	r7, r1
   13318:	cmp	r0, #0
   1331c:	beq	133f4 <__assert_fail@plt+0x1f0c>
   13320:	mov	r0, r7
   13324:	str	r9, [sp, #8]
   13328:	str	r8, [sp, #16]
   1332c:	bl	11374 <strlen@plt>
   13330:	ldr	r9, [sl]
   13334:	cmp	r9, #0
   13338:	beq	13434 <__assert_fail@plt+0x1f4c>
   1333c:	str	sl, [sp, #4]
   13340:	add	r8, sl, #4
   13344:	ldr	sl, [sp, #16]
   13348:	mov	r4, r0
   1334c:	mov	r0, #0
   13350:	mvn	r6, #0
   13354:	mov	r5, #0
   13358:	str	r0, [sp, #12]
   1335c:	mov	r0, r9
   13360:	mov	r1, r7
   13364:	mov	r2, r4
   13368:	bl	11494 <strncmp@plt>
   1336c:	cmp	r0, #0
   13370:	bne	133c0 <__assert_fail@plt+0x1ed8>
   13374:	mov	r0, r9
   13378:	bl	11374 <strlen@plt>
   1337c:	cmp	r0, r4
   13380:	beq	13440 <__assert_fail@plt+0x1f58>
   13384:	cmn	r6, #1
   13388:	beq	133bc <__assert_fail@plt+0x1ed4>
   1338c:	ldr	r0, [sp, #16]
   13390:	cmp	r0, #0
   13394:	beq	133b0 <__assert_fail@plt+0x1ec8>
   13398:	ldr	r2, [fp, #8]
   1339c:	mov	r1, sl
   133a0:	mla	r0, r6, r2, r0
   133a4:	bl	1126c <memcmp@plt>
   133a8:	cmp	r0, #0
   133ac:	beq	133c0 <__assert_fail@plt+0x1ed8>
   133b0:	mov	r0, #1
   133b4:	str	r0, [sp, #12]
   133b8:	b	133c0 <__assert_fail@plt+0x1ed8>
   133bc:	mov	r6, r5
   133c0:	ldr	r9, [r8, r5, lsl #2]
   133c4:	ldr	r0, [fp, #8]
   133c8:	add	r5, r5, #1
   133cc:	add	sl, sl, r0
   133d0:	cmp	r9, #0
   133d4:	bne	1335c <__assert_fail@plt+0x1e74>
   133d8:	ldr	r0, [sp, #12]
   133dc:	ldr	r8, [sp, #16]
   133e0:	ldr	sl, [sp, #4]
   133e4:	ldr	r9, [sp, #8]
   133e8:	tst	r0, #1
   133ec:	beq	13450 <__assert_fail@plt+0x1f68>
   133f0:	b	1345c <__assert_fail@plt+0x1f74>
   133f4:	ldr	r0, [sl]
   133f8:	movw	r4, #46944	; 0xb760
   133fc:	movt	r4, #1
   13400:	cmp	r0, #0
   13404:	beq	13470 <__assert_fail@plt+0x1f88>
   13408:	add	r5, sl, #4
   1340c:	mov	r6, #0
   13410:	mov	r1, r7
   13414:	bl	11200 <strcmp@plt>
   13418:	cmp	r0, #0
   1341c:	beq	13450 <__assert_fail@plt+0x1f68>
   13420:	ldr	r0, [r5, r6, lsl #2]
   13424:	add	r6, r6, #1
   13428:	cmp	r0, #0
   1342c:	bne	13410 <__assert_fail@plt+0x1f28>
   13430:	b	13470 <__assert_fail@plt+0x1f88>
   13434:	ldr	r8, [sp, #16]
   13438:	ldr	r9, [sp, #8]
   1343c:	b	13468 <__assert_fail@plt+0x1f80>
   13440:	ldr	r8, [sp, #16]
   13444:	ldr	sl, [sp, #4]
   13448:	ldr	r9, [sp, #8]
   1344c:	mov	r6, r5
   13450:	cmn	r6, #1
   13454:	bgt	134d8 <__assert_fail@plt+0x1ff0>
   13458:	beq	13468 <__assert_fail@plt+0x1f80>
   1345c:	movw	r4, #46971	; 0xb77b
   13460:	movt	r4, #1
   13464:	b	13470 <__assert_fail@plt+0x1f88>
   13468:	movw	r4, #46944	; 0xb760
   1346c:	movt	r4, #1
   13470:	ldr	r6, [fp, #12]
   13474:	mov	r0, #0
   13478:	mov	r1, r4
   1347c:	mov	r2, #5
   13480:	bl	11278 <dcgettext@plt>
   13484:	mov	r4, r0
   13488:	mov	r0, #0
   1348c:	mov	r1, #8
   13490:	mov	r2, r7
   13494:	bl	1895c <__assert_fail@plt+0x7474>
   13498:	mov	r5, r0
   1349c:	mov	r0, #1
   134a0:	mov	r1, r9
   134a4:	bl	18f1c <__assert_fail@plt+0x7a34>
   134a8:	str	r0, [sp]
   134ac:	mov	r0, #0
   134b0:	mov	r1, #0
   134b4:	mov	r2, r4
   134b8:	mov	r3, r5
   134bc:	bl	11308 <error@plt>
   134c0:	ldr	r2, [fp, #8]
   134c4:	mov	r0, sl
   134c8:	mov	r1, r8
   134cc:	bl	131d8 <__assert_fail@plt+0x1cf0>
   134d0:	blx	r6
   134d4:	mvn	r6, #0
   134d8:	mov	r0, r6
   134dc:	sub	sp, fp, #28
   134e0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   134e4:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   134e8:	add	fp, sp, #24
   134ec:	ldr	r6, [r1]
   134f0:	cmp	r6, #0
   134f4:	beq	13558 <__assert_fail@plt+0x2070>
   134f8:	mov	r8, r1
   134fc:	mov	r7, r2
   13500:	mov	r1, r2
   13504:	mov	r2, r3
   13508:	mov	r4, r3
   1350c:	mov	r9, r0
   13510:	bl	1126c <memcmp@plt>
   13514:	cmp	r0, #0
   13518:	beq	13550 <__assert_fail@plt+0x2068>
   1351c:	add	r7, r7, r4
   13520:	add	r5, r8, #4
   13524:	ldr	r6, [r5]
   13528:	cmp	r6, #0
   1352c:	beq	13558 <__assert_fail@plt+0x2070>
   13530:	mov	r0, r9
   13534:	mov	r1, r7
   13538:	mov	r2, r4
   1353c:	bl	1126c <memcmp@plt>
   13540:	add	r7, r7, r4
   13544:	add	r5, r5, #4
   13548:	cmp	r0, #0
   1354c:	bne	13524 <__assert_fail@plt+0x203c>
   13550:	mov	r0, r6
   13554:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   13558:	mov	r6, #0
   1355c:	mov	r0, r6
   13560:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   13564:	sub	r0, r0, #1
   13568:	ldrb	r3, [r0, #1]!
   1356c:	cmp	r3, #47	; 0x2f
   13570:	beq	13568 <__assert_fail@plt+0x2080>
   13574:	mov	r2, #0
   13578:	mov	r1, r0
   1357c:	b	13598 <__assert_fail@plt+0x20b0>
   13580:	cmp	r3, #0
   13584:	bxeq	lr
   13588:	tst	r2, #1
   1358c:	mov	r2, #0
   13590:	movne	r0, r1
   13594:	ldrb	r3, [r1, #1]!
   13598:	uxtb	r3, r3
   1359c:	cmp	r3, #47	; 0x2f
   135a0:	bne	13580 <__assert_fail@plt+0x2098>
   135a4:	ldrb	r3, [r1, #1]!
   135a8:	mov	r2, #1
   135ac:	b	13598 <__assert_fail@plt+0x20b0>
   135b0:	push	{r4, sl, fp, lr}
   135b4:	add	fp, sp, #8
   135b8:	mov	r4, r0
   135bc:	bl	11374 <strlen@plt>
   135c0:	mov	r1, r0
   135c4:	sub	r2, r4, #1
   135c8:	mov	r0, r1
   135cc:	cmp	r1, #2
   135d0:	popcc	{r4, sl, fp, pc}
   135d4:	ldrb	r3, [r2, r0]
   135d8:	sub	r1, r0, #1
   135dc:	cmp	r3, #47	; 0x2f
   135e0:	beq	135c8 <__assert_fail@plt+0x20e0>
   135e4:	pop	{r4, sl, fp, pc}
   135e8:	movw	r1, #49584	; 0xc1b0
   135ec:	movt	r1, #2
   135f0:	str	r0, [r1]
   135f4:	bx	lr
   135f8:	push	{r4, r5, r6, sl, fp, lr}
   135fc:	add	fp, sp, #16
   13600:	sub	sp, sp, #8
   13604:	movw	r6, #49552	; 0xc190
   13608:	movt	r6, #2
   1360c:	ldr	r5, [r6]
   13610:	mov	r0, r5
   13614:	bl	13a28 <__assert_fail@plt+0x2540>
   13618:	cmp	r0, #0
   1361c:	beq	1365c <__assert_fail@plt+0x2174>
   13620:	mov	r0, #1
   13624:	mov	r2, #0
   13628:	mov	r3, #0
   1362c:	mov	r4, #0
   13630:	str	r0, [sp]
   13634:	mov	r0, r5
   13638:	bl	13a8c <__assert_fail@plt+0x25a4>
   1363c:	cmp	r0, #0
   13640:	bne	13660 <__assert_fail@plt+0x2178>
   13644:	ldr	r0, [r6]
   13648:	bl	1380c <__assert_fail@plt+0x2324>
   1364c:	mov	r4, r0
   13650:	cmp	r0, #0
   13654:	movwne	r4, #1
   13658:	b	13660 <__assert_fail@plt+0x2178>
   1365c:	mov	r4, #0
   13660:	ldr	r0, [r6]
   13664:	bl	19f84 <__assert_fail@plt+0x8a9c>
   13668:	cmp	r4, #0
   1366c:	cmpeq	r0, #0
   13670:	bne	13680 <__assert_fail@plt+0x2198>
   13674:	sub	sp, fp, #16
   13678:	pop	{r4, r5, r6, sl, fp, lr}
   1367c:	b	13724 <__assert_fail@plt+0x223c>
   13680:	movw	r1, #47034	; 0xb7ba
   13684:	mov	r0, #0
   13688:	mov	r2, #5
   1368c:	movt	r1, #1
   13690:	bl	11278 <dcgettext@plt>
   13694:	mov	r4, r0
   13698:	movw	r0, #49584	; 0xc1b0
   1369c:	movt	r0, #2
   136a0:	ldr	r6, [r0]
   136a4:	bl	1138c <__errno_location@plt>
   136a8:	ldr	r5, [r0]
   136ac:	cmp	r6, #0
   136b0:	bne	136cc <__assert_fail@plt+0x21e4>
   136b4:	movw	r2, #47031	; 0xb7b7
   136b8:	mov	r0, #0
   136bc:	mov	r1, r5
   136c0:	mov	r3, r4
   136c4:	movt	r2, #1
   136c8:	b	136ec <__assert_fail@plt+0x2204>
   136cc:	mov	r0, r6
   136d0:	bl	18ba4 <__assert_fail@plt+0x76bc>
   136d4:	movw	r2, #47053	; 0xb7cd
   136d8:	mov	r3, r0
   136dc:	str	r4, [sp]
   136e0:	mov	r0, #0
   136e4:	mov	r1, r5
   136e8:	movt	r2, #1
   136ec:	bl	11308 <error@plt>
   136f0:	bl	13724 <__assert_fail@plt+0x223c>
   136f4:	movw	r0, #49456	; 0xc130
   136f8:	movt	r0, #2
   136fc:	ldr	r0, [r0]
   13700:	bl	11248 <_exit@plt>
   13704:	movw	r1, #49588	; 0xc1b4
   13708:	movt	r1, #2
   1370c:	str	r0, [r1]
   13710:	bx	lr
   13714:	movw	r1, #49592	; 0xc1b8
   13718:	movt	r1, #2
   1371c:	strb	r0, [r1]
   13720:	bx	lr
   13724:	push	{r4, r5, r6, sl, fp, lr}
   13728:	add	fp, sp, #16
   1372c:	sub	sp, sp, #8
   13730:	movw	r0, #49556	; 0xc194
   13734:	movt	r0, #2
   13738:	ldr	r0, [r0]
   1373c:	bl	19f84 <__assert_fail@plt+0x8a9c>
   13740:	cmp	r0, #0
   13744:	beq	1376c <__assert_fail@plt+0x2284>
   13748:	movw	r0, #49592	; 0xc1b8
   1374c:	movt	r0, #2
   13750:	ldrb	r0, [r0]
   13754:	cmp	r0, #0
   13758:	beq	1378c <__assert_fail@plt+0x22a4>
   1375c:	bl	1138c <__errno_location@plt>
   13760:	ldr	r0, [r0]
   13764:	cmp	r0, #32
   13768:	bne	1378c <__assert_fail@plt+0x22a4>
   1376c:	movw	r0, #49544	; 0xc188
   13770:	movt	r0, #2
   13774:	ldr	r0, [r0]
   13778:	bl	19f84 <__assert_fail@plt+0x8a9c>
   1377c:	cmp	r0, #0
   13780:	subeq	sp, fp, #16
   13784:	popeq	{r4, r5, r6, sl, fp, pc}
   13788:	b	137fc <__assert_fail@plt+0x2314>
   1378c:	movw	r1, #47060	; 0xb7d4
   13790:	mov	r0, #0
   13794:	mov	r2, #5
   13798:	movt	r1, #1
   1379c:	bl	11278 <dcgettext@plt>
   137a0:	mov	r4, r0
   137a4:	movw	r0, #49588	; 0xc1b4
   137a8:	movt	r0, #2
   137ac:	ldr	r6, [r0]
   137b0:	bl	1138c <__errno_location@plt>
   137b4:	ldr	r5, [r0]
   137b8:	cmp	r6, #0
   137bc:	bne	137d8 <__assert_fail@plt+0x22f0>
   137c0:	movw	r2, #47031	; 0xb7b7
   137c4:	mov	r0, #0
   137c8:	mov	r1, r5
   137cc:	mov	r3, r4
   137d0:	movt	r2, #1
   137d4:	b	137f8 <__assert_fail@plt+0x2310>
   137d8:	mov	r0, r6
   137dc:	bl	18ba4 <__assert_fail@plt+0x76bc>
   137e0:	movw	r2, #47053	; 0xb7cd
   137e4:	mov	r3, r0
   137e8:	str	r4, [sp]
   137ec:	mov	r0, #0
   137f0:	mov	r1, r5
   137f4:	movt	r2, #1
   137f8:	bl	11308 <error@plt>
   137fc:	movw	r0, #49456	; 0xc130
   13800:	movt	r0, #2
   13804:	ldr	r0, [r0]
   13808:	bl	11248 <_exit@plt>
   1380c:	push	{r4, sl, fp, lr}
   13810:	add	fp, sp, #8
   13814:	sub	sp, sp, #8
   13818:	mov	r4, r0
   1381c:	cmp	r0, #0
   13820:	beq	1383c <__assert_fail@plt+0x2354>
   13824:	mov	r0, r4
   13828:	bl	11338 <__freading@plt>
   1382c:	cmp	r0, #0
   13830:	ldrbne	r0, [r4, #1]
   13834:	tstne	r0, #1
   13838:	bne	1384c <__assert_fail@plt+0x2364>
   1383c:	mov	r0, r4
   13840:	sub	sp, fp, #8
   13844:	pop	{r4, sl, fp, lr}
   13848:	b	1120c <fflush@plt>
   1384c:	mov	r0, #1
   13850:	mov	r2, #0
   13854:	mov	r3, #0
   13858:	str	r0, [sp]
   1385c:	mov	r0, r4
   13860:	bl	13a8c <__assert_fail@plt+0x25a4>
   13864:	b	1383c <__assert_fail@plt+0x2354>
   13868:	ldr	r1, [r0, #16]
   1386c:	and	r1, r1, #61440	; 0xf000
   13870:	sub	r1, r1, #4096	; 0x1000
   13874:	lsr	r2, r1, #12
   13878:	cmp	r2, #11
   1387c:	bhi	138d8 <__assert_fail@plt+0x23f0>
   13880:	movw	r1, #47104	; 0xb800
   13884:	add	r3, pc, #4
   13888:	movt	r1, #1
   1388c:	ldr	pc, [r3, r2, lsl #2]
   13890:	andeq	r3, r1, r0, asr #17
   13894:	andeq	r3, r1, ip, asr #17
   13898:	ldrdeq	r3, [r1], -r8
   1389c:	andeq	r3, r1, r4, lsr #18
   138a0:	ldrdeq	r3, [r1], -r8
   138a4:	andeq	r3, r1, r4, ror #17
   138a8:	ldrdeq	r3, [r1], -r8
   138ac:	andeq	r3, r1, r8, lsl #18
   138b0:	ldrdeq	r3, [r1], -r8
   138b4:	strdeq	r3, [r1], -r0
   138b8:	ldrdeq	r3, [r1], -r8
   138bc:	strdeq	r3, [r1], -ip
   138c0:	movw	r1, #47170	; 0xb842
   138c4:	movt	r1, #1
   138c8:	b	13924 <__assert_fail@plt+0x243c>
   138cc:	movw	r1, #47147	; 0xb82b
   138d0:	movt	r1, #1
   138d4:	b	13924 <__assert_fail@plt+0x243c>
   138d8:	movw	r1, #47182	; 0xb84e
   138dc:	movt	r1, #1
   138e0:	b	13924 <__assert_fail@plt+0x243c>
   138e4:	movw	r1, #47128	; 0xb818
   138e8:	movt	r1, #1
   138ec:	b	13924 <__assert_fail@plt+0x243c>
   138f0:	movw	r1, #47114	; 0xb80a
   138f4:	movt	r1, #1
   138f8:	b	13924 <__assert_fail@plt+0x243c>
   138fc:	movw	r1, #47175	; 0xb847
   13900:	movt	r1, #1
   13904:	b	13924 <__assert_fail@plt+0x243c>
   13908:	ldrd	r0, [r0, #48]	; 0x30
   1390c:	orrs	r0, r0, r1
   13910:	movw	r1, #47091	; 0xb7f3
   13914:	movw	r0, #47072	; 0xb7e0
   13918:	movt	r1, #1
   1391c:	movt	r0, #1
   13920:	moveq	r1, r0
   13924:	mov	r0, #0
   13928:	mov	r2, #5
   1392c:	b	11278 <dcgettext@plt>
   13930:	push	{fp, lr}
   13934:	mov	fp, sp
   13938:	bl	13948 <__assert_fail@plt+0x2460>
   1393c:	cmp	r0, #0
   13940:	popne	{fp, pc}
   13944:	bl	19d70 <__assert_fail@plt+0x8888>
   13948:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1394c:	add	fp, sp, #28
   13950:	push	{r2}		; (str r2, [sp, #-4]!)
   13954:	mov	sl, r1
   13958:	mov	r7, r0
   1395c:	bl	13564 <__assert_fail@plt+0x207c>
   13960:	sub	r4, r0, r7
   13964:	bl	135b0 <__assert_fail@plt+0x20c8>
   13968:	mov	r6, r0
   1396c:	add	r5, r4, r0
   13970:	mov	r0, sl
   13974:	bl	11374 <strlen@plt>
   13978:	mov	r9, r0
   1397c:	cmp	r6, #0
   13980:	beq	139a8 <__assert_fail@plt+0x24c0>
   13984:	add	r0, r7, r5
   13988:	mov	r4, #0
   1398c:	ldrb	r0, [r0, #-1]
   13990:	cmp	r0, #47	; 0x2f
   13994:	beq	139b8 <__assert_fail@plt+0x24d0>
   13998:	ldrb	r0, [sl]
   1399c:	subs	r4, r0, #47	; 0x2f
   139a0:	movwne	r4, #47	; 0x2f
   139a4:	b	139b8 <__assert_fail@plt+0x24d0>
   139a8:	ldrb	r0, [sl]
   139ac:	mov	r4, #0
   139b0:	cmp	r0, #47	; 0x2f
   139b4:	movweq	r4, #46	; 0x2e
   139b8:	uxtb	r8, r4
   139bc:	add	r0, r9, r5
   139c0:	cmp	r8, #0
   139c4:	movwne	r8, #1
   139c8:	add	r0, r0, r8
   139cc:	add	r0, r0, #1
   139d0:	bl	19f00 <__assert_fail@plt+0x8a18>
   139d4:	mov	r6, r0
   139d8:	cmp	r0, #0
   139dc:	beq	13a1c <__assert_fail@plt+0x2534>
   139e0:	mov	r0, r6
   139e4:	mov	r1, r7
   139e8:	mov	r2, r5
   139ec:	mvn	r3, #0
   139f0:	bl	114dc <__mempcpy_chk@plt>
   139f4:	ldr	r1, [sp]
   139f8:	strb	r4, [r0], r8
   139fc:	mov	r2, r9
   13a00:	mvn	r3, #0
   13a04:	cmp	r1, #0
   13a08:	strne	r0, [r1]
   13a0c:	mov	r1, sl
   13a10:	bl	114dc <__mempcpy_chk@plt>
   13a14:	mov	r1, #0
   13a18:	strb	r1, [r0]
   13a1c:	mov	r0, r6
   13a20:	sub	sp, fp, #28
   13a24:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13a28:	ldrd	r2, [r0, #16]
   13a2c:	mov	r1, #0
   13a30:	cmp	r3, r2
   13a34:	bhi	13a5c <__assert_fail@plt+0x2574>
   13a38:	ldmib	r0, {r1, r2}
   13a3c:	ldrb	r3, [r0, #1]
   13a40:	sub	r1, r2, r1
   13a44:	mov	r2, #0
   13a48:	tst	r3, #1
   13a4c:	ldrne	r2, [r0, #36]	; 0x24
   13a50:	ldrne	r0, [r0, #44]	; 0x2c
   13a54:	subne	r2, r0, r2
   13a58:	add	r1, r1, r2
   13a5c:	mov	r0, r1
   13a60:	bx	lr
   13a64:	push	{r4, r5, r6, sl, fp, lr}
   13a68:	add	fp, sp, #16
   13a6c:	mov	r4, r0
   13a70:	bl	1138c <__errno_location@plt>
   13a74:	ldr	r6, [r0]
   13a78:	mov	r5, r0
   13a7c:	mov	r0, r4
   13a80:	bl	11230 <free@plt>
   13a84:	str	r6, [r5]
   13a88:	pop	{r4, r5, r6, sl, fp, pc}
   13a8c:	push	{r4, r5, r6, r7, fp, lr}
   13a90:	add	fp, sp, #16
   13a94:	sub	sp, sp, #8
   13a98:	mov	r4, r0
   13a9c:	ldr	r0, [r0, #4]
   13aa0:	mov	r5, r3
   13aa4:	mov	r6, r2
   13aa8:	ldr	r1, [r4, #8]
   13aac:	cmp	r1, r0
   13ab0:	bne	13acc <__assert_fail@plt+0x25e4>
   13ab4:	ldrd	r0, [r4, #16]
   13ab8:	cmp	r1, r0
   13abc:	bne	13acc <__assert_fail@plt+0x25e4>
   13ac0:	ldr	r0, [r4, #36]	; 0x24
   13ac4:	cmp	r0, #0
   13ac8:	beq	13ae4 <__assert_fail@plt+0x25fc>
   13acc:	mov	r0, r4
   13ad0:	mov	r2, r6
   13ad4:	mov	r3, r5
   13ad8:	sub	sp, fp, #16
   13adc:	pop	{r4, r5, r6, r7, fp, lr}
   13ae0:	b	113e0 <fseeko64@plt>
   13ae4:	ldr	r7, [fp, #8]
   13ae8:	mov	r0, r4
   13aec:	bl	113bc <fileno@plt>
   13af0:	mov	r2, r6
   13af4:	mov	r3, r5
   13af8:	str	r7, [sp]
   13afc:	bl	112d8 <lseek64@plt>
   13b00:	and	r2, r0, r1
   13b04:	cmn	r2, #1
   13b08:	mvneq	r0, #0
   13b0c:	subeq	sp, fp, #16
   13b10:	popeq	{r4, r5, r6, r7, fp, pc}
   13b14:	strd	r0, [r4, #80]	; 0x50
   13b18:	ldr	r0, [r4]
   13b1c:	bic	r0, r0, #16
   13b20:	str	r0, [r4]
   13b24:	mov	r0, #0
   13b28:	sub	sp, fp, #16
   13b2c:	pop	{r4, r5, r6, r7, fp, pc}
   13b30:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13b34:	add	fp, sp, #28
   13b38:	sub	sp, sp, #28
   13b3c:	cmp	r1, #4096	; 0x1000
   13b40:	bcs	13b5c <__assert_fail@plt+0x2674>
   13b44:	mov	r7, r0
   13b48:	and	r0, r1, #516	; 0x204
   13b4c:	mov	r5, r1
   13b50:	cmp	r0, #516	; 0x204
   13b54:	tstne	r5, #18
   13b58:	bne	13b78 <__assert_fail@plt+0x2690>
   13b5c:	bl	1138c <__errno_location@plt>
   13b60:	mov	r1, #22
   13b64:	mov	r4, #0
   13b68:	str	r1, [r0]
   13b6c:	mov	r0, r4
   13b70:	sub	sp, fp, #28
   13b74:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13b78:	mov	r0, #1
   13b7c:	mov	r1, #96	; 0x60
   13b80:	mov	sl, r2
   13b84:	bl	19eac <__assert_fail@plt+0x89c4>
   13b88:	cmp	r0, #0
   13b8c:	beq	13f7c <__assert_fail@plt+0x2a94>
   13b90:	mov	r4, r0
   13b94:	mvn	r0, #99	; 0x63
   13b98:	tst	r5, #2
   13b9c:	mov	r1, r5
   13ba0:	str	r0, [r4, #32]
   13ba4:	bic	r0, r5, #516	; 0x204
   13ba8:	str	sl, [r4, #44]	; 0x2c
   13bac:	str	r4, [sp, #24]
   13bb0:	orrne	r1, r0, #4
   13bb4:	str	r1, [r4, #48]	; 0x30
   13bb8:	ldr	r0, [r7]
   13bbc:	cmp	r0, #0
   13bc0:	beq	13bf8 <__assert_fail@plt+0x2710>
   13bc4:	add	r6, r7, #4
   13bc8:	mov	r4, #0
   13bcc:	bl	11374 <strlen@plt>
   13bd0:	cmp	r0, r4
   13bd4:	movhi	r4, r0
   13bd8:	ldr	r0, [r6], #4
   13bdc:	cmp	r0, #0
   13be0:	bne	13bcc <__assert_fail@plt+0x26e4>
   13be4:	add	r0, r4, #1
   13be8:	ldr	r4, [sp, #24]
   13bec:	cmp	r0, #4096	; 0x1000
   13bf0:	movls	r0, #4096	; 0x1000
   13bf4:	b	13bfc <__assert_fail@plt+0x2714>
   13bf8:	mov	r0, #4096	; 0x1000
   13bfc:	ldr	r1, [r4, #36]	; 0x24
   13c00:	add	r0, r0, #256	; 0x100
   13c04:	adds	r1, r0, r1
   13c08:	bcc	13c2c <__assert_fail@plt+0x2744>
   13c0c:	ldr	r0, [r4, #24]
   13c10:	bl	13a64 <__assert_fail@plt+0x257c>
   13c14:	mov	r0, #0
   13c18:	str	r0, [r4, #24]
   13c1c:	bl	1138c <__errno_location@plt>
   13c20:	mov	r1, #36	; 0x24
   13c24:	str	r1, [r0]
   13c28:	b	13f74 <__assert_fail@plt+0x2a8c>
   13c2c:	str	r1, [r4, #36]	; 0x24
   13c30:	ldr	r0, [r4, #24]
   13c34:	bl	19f30 <__assert_fail@plt+0x8a48>
   13c38:	cmp	r0, #0
   13c3c:	beq	13ca0 <__assert_fail@plt+0x27b8>
   13c40:	str	r0, [r4, #24]
   13c44:	ldr	r0, [r7]
   13c48:	cmp	r0, #0
   13c4c:	beq	13cb4 <__assert_fail@plt+0x27cc>
   13c50:	mov	r0, #176	; 0xb0
   13c54:	bl	19f00 <__assert_fail@plt+0x8a18>
   13c58:	cmp	r0, #0
   13c5c:	beq	13f6c <__assert_fail@plt+0x2a84>
   13c60:	ldr	r1, [r4, #24]
   13c64:	mov	r8, r0
   13c68:	mov	r0, #0
   13c6c:	mov	r2, #196608	; 0x30000
   13c70:	strb	r0, [r8, #168]	; 0xa8
   13c74:	str	r2, [r8, #58]	; 0x3a
   13c78:	mvn	r2, #0
   13c7c:	str	r0, [r8, #12]
   13c80:	str	r0, [r8, #16]
   13c84:	str	r0, [r8, #20]
   13c88:	str	r4, [r8, #44]	; 0x2c
   13c8c:	str	r2, [r8, #48]	; 0x30
   13c90:	str	r0, [r8, #52]	; 0x34
   13c94:	str	r1, [r8, #28]
   13c98:	str	r0, [r8, #32]
   13c9c:	b	13cb8 <__assert_fail@plt+0x27d0>
   13ca0:	ldr	r0, [r4, #24]
   13ca4:	bl	13a64 <__assert_fail@plt+0x257c>
   13ca8:	mov	r0, #0
   13cac:	str	r0, [r4, #24]
   13cb0:	b	13f74 <__assert_fail@plt+0x2a8c>
   13cb4:	mov	r8, #0
   13cb8:	cmp	sl, #0
   13cbc:	ldrbne	r0, [r4, #49]	; 0x31
   13cc0:	ubfxne	r0, r0, #2, #1
   13cc4:	ldr	r4, [r7]
   13cc8:	moveq	r0, #1
   13ccc:	cmp	r4, #0
   13cd0:	beq	13e3c <__assert_fail@plt+0x2954>
   13cd4:	eor	r0, r0, #1
   13cd8:	and	r1, r5, #2048	; 0x800
   13cdc:	mov	r9, #0
   13ce0:	mov	r6, #0
   13ce4:	str	r8, [sp, #16]
   13ce8:	str	sl, [sp, #8]
   13cec:	str	r0, [sp, #12]
   13cf0:	mov	r0, #0
   13cf4:	str	r1, [sp, #20]
   13cf8:	str	r0, [sp, #4]
   13cfc:	mov	r0, r4
   13d00:	bl	11374 <strlen@plt>
   13d04:	mov	r8, r0
   13d08:	ldr	r0, [sp, #20]
   13d0c:	cmp	r0, #0
   13d10:	bne	13d48 <__assert_fail@plt+0x2860>
   13d14:	cmp	r8, #3
   13d18:	bcc	13d48 <__assert_fail@plt+0x2860>
   13d1c:	add	r0, r4, r8
   13d20:	ldrb	r0, [r0, #-1]
   13d24:	cmp	r0, #47	; 0x2f
   13d28:	bne	13d48 <__assert_fail@plt+0x2860>
   13d2c:	sub	r0, r4, #2
   13d30:	ldrb	r1, [r0, r8]
   13d34:	cmp	r1, #47	; 0x2f
   13d38:	bne	13d48 <__assert_fail@plt+0x2860>
   13d3c:	sub	r8, r8, #1
   13d40:	cmp	r8, #1
   13d44:	bhi	13d30 <__assert_fail@plt+0x2848>
   13d48:	add	r0, r8, #176	; 0xb0
   13d4c:	bic	r0, r0, #7
   13d50:	bl	19f00 <__assert_fail@plt+0x8a18>
   13d54:	cmp	r0, #0
   13d58:	beq	13e48 <__assert_fail@plt+0x2960>
   13d5c:	add	sl, r0, #168	; 0xa8
   13d60:	mov	r5, r0
   13d64:	mov	r1, r4
   13d68:	mov	r2, r8
   13d6c:	mov	r0, sl
   13d70:	bl	11254 <memcpy@plt>
   13d74:	ldr	r0, [sp, #24]
   13d78:	mov	r4, #0
   13d7c:	mov	r2, #196608	; 0x30000
   13d80:	strb	r4, [sl, r8]
   13d84:	str	r2, [r5, #58]	; 0x3a
   13d88:	add	r2, r5, #44	; 0x2c
   13d8c:	ldr	r1, [r0, #24]
   13d90:	stm	r2, {r0, r4, r8}
   13d94:	ldr	r8, [sp, #16]
   13d98:	ldr	r2, [sp, #12]
   13d9c:	str	r8, [r5, #4]
   13da0:	str	r4, [r5, #12]
   13da4:	str	r4, [r5, #16]
   13da8:	str	r4, [r5, #20]
   13dac:	str	sl, [r5, #24]
   13db0:	str	r1, [r5, #28]
   13db4:	clz	r1, r9
   13db8:	str	r4, [r5, #32]
   13dbc:	lsr	r1, r1, #5
   13dc0:	orrs	r1, r2, r1
   13dc4:	bne	13ddc <__assert_fail@plt+0x28f4>
   13dc8:	mov	r0, #2
   13dcc:	str	r0, [r5, #112]	; 0x70
   13dd0:	str	r4, [r5, #116]	; 0x74
   13dd4:	mov	r0, #11
   13dd8:	b	13de8 <__assert_fail@plt+0x2900>
   13ddc:	mov	r1, r5
   13de0:	mov	r2, #0
   13de4:	bl	1400c <__assert_fail@plt+0x2b24>
   13de8:	ldr	sl, [sp, #8]
   13dec:	strh	r0, [r5, #56]	; 0x38
   13df0:	cmp	sl, #0
   13df4:	beq	13e04 <__assert_fail@plt+0x291c>
   13df8:	str	r9, [r5, #8]
   13dfc:	mov	r9, r5
   13e00:	b	13e1c <__assert_fail@plt+0x2934>
   13e04:	cmp	r9, #0
   13e08:	str	r4, [r5, #8]
   13e0c:	beq	13e30 <__assert_fail@plt+0x2948>
   13e10:	ldr	r0, [sp, #4]
   13e14:	str	r5, [sp, #4]
   13e18:	str	r5, [r0, #8]
   13e1c:	ldr	r4, [r7, #4]!
   13e20:	add	r6, r6, #1
   13e24:	cmp	r4, #0
   13e28:	bne	13cfc <__assert_fail@plt+0x2814>
   13e2c:	b	13e58 <__assert_fail@plt+0x2970>
   13e30:	mov	r0, r5
   13e34:	str	r5, [sp, #4]
   13e38:	b	13dfc <__assert_fail@plt+0x2914>
   13e3c:	ldr	r4, [sp, #24]
   13e40:	mov	r9, #0
   13e44:	b	13e88 <__assert_fail@plt+0x29a0>
   13e48:	ldr	r8, [sp, #16]
   13e4c:	cmp	r9, #0
   13e50:	bne	13f38 <__assert_fail@plt+0x2a50>
   13e54:	b	13f60 <__assert_fail@plt+0x2a78>
   13e58:	cmp	sl, #0
   13e5c:	beq	13e84 <__assert_fail@plt+0x299c>
   13e60:	ldr	r4, [sp, #24]
   13e64:	cmp	r6, #2
   13e68:	bcc	13e88 <__assert_fail@plt+0x29a0>
   13e6c:	mov	r0, r4
   13e70:	mov	r1, r9
   13e74:	mov	r2, r6
   13e78:	bl	141a4 <__assert_fail@plt+0x2cbc>
   13e7c:	mov	r9, r0
   13e80:	b	13e88 <__assert_fail@plt+0x29a0>
   13e84:	ldr	r4, [sp, #24]
   13e88:	mov	r0, #176	; 0xb0
   13e8c:	bl	19f00 <__assert_fail@plt+0x8a18>
   13e90:	cmp	r0, #0
   13e94:	beq	13f28 <__assert_fail@plt+0x2a40>
   13e98:	ldr	r2, [r4, #24]
   13e9c:	mov	r1, #0
   13ea0:	mov	r3, #196608	; 0x30000
   13ea4:	str	r0, [r4]
   13ea8:	str	r1, [r0, #52]	; 0x34
   13eac:	strb	r1, [r0, #168]	; 0xa8
   13eb0:	str	r4, [r0, #44]	; 0x2c
   13eb4:	str	r3, [r0, #58]	; 0x3a
   13eb8:	str	r2, [r0, #28]
   13ebc:	mov	r2, #9
   13ec0:	str	r1, [r0, #32]
   13ec4:	strh	r2, [r0, #56]	; 0x38
   13ec8:	str	r9, [r0, #8]
   13ecc:	str	r1, [r0, #12]
   13ed0:	str	r1, [r0, #16]
   13ed4:	str	r1, [r0, #20]
   13ed8:	mov	r1, #1
   13edc:	str	r1, [r0, #48]	; 0x30
   13ee0:	ldrh	r0, [r4, #48]	; 0x30
   13ee4:	movw	r1, #258	; 0x102
   13ee8:	tst	r0, r1
   13eec:	beq	13f84 <__assert_fail@plt+0x2a9c>
   13ef0:	movw	r0, #14948	; 0x3a64
   13ef4:	movw	r2, #23760	; 0x5cd0
   13ef8:	movw	r3, #23792	; 0x5cf0
   13efc:	mov	r1, #0
   13f00:	movt	r0, #1
   13f04:	movt	r2, #1
   13f08:	movt	r3, #1
   13f0c:	str	r0, [sp]
   13f10:	mov	r0, #31
   13f14:	bl	16360 <__assert_fail@plt+0x4e78>
   13f18:	cmp	r0, #0
   13f1c:	str	r0, [r4, #56]	; 0x38
   13f20:	bne	13f9c <__assert_fail@plt+0x2ab4>
   13f24:	b	13f30 <__assert_fail@plt+0x2a48>
   13f28:	mov	r0, #0
   13f2c:	str	r0, [r4]
   13f30:	cmp	r9, #0
   13f34:	beq	13f60 <__assert_fail@plt+0x2a78>
   13f38:	ldrd	r4, [r9, #8]
   13f3c:	cmp	r5, #0
   13f40:	beq	13f4c <__assert_fail@plt+0x2a64>
   13f44:	mov	r0, r5
   13f48:	bl	114d0 <closedir@plt>
   13f4c:	mov	r0, r9
   13f50:	bl	13a64 <__assert_fail@plt+0x257c>
   13f54:	cmp	r4, #0
   13f58:	mov	r9, r4
   13f5c:	bne	13f38 <__assert_fail@plt+0x2a50>
   13f60:	mov	r0, r8
   13f64:	bl	13a64 <__assert_fail@plt+0x257c>
   13f68:	ldr	r4, [sp, #24]
   13f6c:	ldr	r0, [r4, #24]
   13f70:	bl	13a64 <__assert_fail@plt+0x257c>
   13f74:	mov	r0, r4
   13f78:	bl	13a64 <__assert_fail@plt+0x257c>
   13f7c:	mov	r4, #0
   13f80:	b	13b6c <__assert_fail@plt+0x2684>
   13f84:	mov	r0, #32
   13f88:	bl	19f00 <__assert_fail@plt+0x8a18>
   13f8c:	cmp	r0, #0
   13f90:	str	r0, [r4, #56]	; 0x38
   13f94:	beq	13f30 <__assert_fail@plt+0x2a48>
   13f98:	bl	1a008 <__assert_fail@plt+0x8b20>
   13f9c:	ldr	r4, [sp, #24]
   13fa0:	ldr	r0, [r4, #48]	; 0x30
   13fa4:	tst	r0, #516	; 0x204
   13fa8:	bne	13ffc <__assert_fail@plt+0x2b14>
   13fac:	mov	r1, #32768	; 0x8000
   13fb0:	tst	r0, #512	; 0x200
   13fb4:	and	r1, r1, r0, lsl #11
   13fb8:	orr	r1, r1, #18688	; 0x4900
   13fbc:	orr	r2, r1, #524288	; 0x80000
   13fc0:	bne	13fd8 <__assert_fail@plt+0x2af0>
   13fc4:	movw	r0, #46208	; 0xb480
   13fc8:	mov	r1, r2
   13fcc:	movt	r0, #1
   13fd0:	bl	1a378 <__assert_fail@plt+0x8e90>
   13fd4:	b	13fe8 <__assert_fail@plt+0x2b00>
   13fd8:	ldr	r0, [r4, #32]
   13fdc:	movw	r1, #46208	; 0xb480
   13fe0:	movt	r1, #1
   13fe4:	bl	17258 <__assert_fail@plt+0x5d70>
   13fe8:	str	r0, [r4, #28]
   13fec:	cmn	r0, #1
   13ff0:	ldrle	r0, [r4, #48]	; 0x30
   13ff4:	orrle	r0, r0, #4
   13ff8:	strle	r0, [r4, #48]	; 0x30
   13ffc:	add	r0, r4, #60	; 0x3c
   14000:	mvn	r1, #0
   14004:	bl	17188 <__assert_fail@plt+0x5ca0>
   14008:	b	13b6c <__assert_fail@plt+0x2684>
   1400c:	push	{r4, r5, r6, sl, fp, lr}
   14010:	add	fp, sp, #16
   14014:	sub	sp, sp, #8
   14018:	mov	r4, r1
   1401c:	ldr	r1, [r0, #48]	; 0x30
   14020:	ldr	r3, [r4, #48]	; 0x30
   14024:	add	r5, r4, #64	; 0x40
   14028:	cmp	r3, #0
   1402c:	andeq	r3, r1, #1
   14030:	orreq	r2, r3, r2
   14034:	cmp	r2, #0
   14038:	andseq	r1, r1, #2
   1403c:	beq	14098 <__assert_fail@plt+0x2bb0>
   14040:	ldr	r1, [r4, #24]
   14044:	mov	r0, #3
   14048:	mov	r2, r5
   1404c:	bl	1147c <__xstat64@plt>
   14050:	cmp	r0, #0
   14054:	beq	14118 <__assert_fail@plt+0x2c30>
   14058:	bl	1138c <__errno_location@plt>
   1405c:	mov	r6, r0
   14060:	ldr	r0, [r0]
   14064:	cmp	r0, #2
   14068:	bne	140c8 <__assert_fail@plt+0x2be0>
   1406c:	ldr	r1, [r4, #24]
   14070:	mov	r0, #3
   14074:	mov	r2, r5
   14078:	bl	114b8 <__lxstat64@plt>
   1407c:	cmp	r0, #0
   14080:	bne	140c4 <__assert_fail@plt+0x2bdc>
   14084:	mov	r0, #0
   14088:	str	r0, [r6]
   1408c:	mov	r0, #13
   14090:	sub	sp, fp, #16
   14094:	pop	{r4, r5, r6, sl, fp, pc}
   14098:	ldr	r1, [r0, #32]
   1409c:	ldr	r2, [r4, #24]
   140a0:	mov	r0, #256	; 0x100
   140a4:	mov	r3, r5
   140a8:	str	r0, [sp]
   140ac:	mov	r0, #3
   140b0:	bl	112a8 <__fxstatat64@plt>
   140b4:	cmp	r0, #0
   140b8:	beq	14118 <__assert_fail@plt+0x2c30>
   140bc:	bl	1138c <__errno_location@plt>
   140c0:	mov	r6, r0
   140c4:	ldr	r0, [r6]
   140c8:	vmov.i32	q8, #0	; 0x00000000
   140cc:	add	r1, r5, #80	; 0x50
   140d0:	str	r0, [r4, #32]
   140d4:	mov	r0, #0
   140d8:	vst1.64	{d16-d17}, [r1]
   140dc:	add	r1, r5, #64	; 0x40
   140e0:	str	r0, [r5, #96]	; 0x60
   140e4:	vst1.64	{d16-d17}, [r1]
   140e8:	add	r1, r5, #48	; 0x30
   140ec:	vst1.64	{d16-d17}, [r1]
   140f0:	add	r1, r5, #32
   140f4:	vst1.64	{d16-d17}, [r1]
   140f8:	add	r1, r5, #16
   140fc:	vst1.64	{d16-d17}, [r1]
   14100:	mov	r1, #100	; 0x64
   14104:	vst1.64	{d16-d17}, [r5], r1
   14108:	str	r0, [r5]
   1410c:	mov	r0, #10
   14110:	sub	sp, fp, #16
   14114:	pop	{r4, r5, r6, sl, fp, pc}
   14118:	ldr	r0, [r4, #80]	; 0x50
   1411c:	and	r0, r0, #61440	; 0xf000
   14120:	cmp	r0, #40960	; 0xa000
   14124:	beq	14180 <__assert_fail@plt+0x2c98>
   14128:	cmp	r0, #32768	; 0x8000
   1412c:	moveq	r0, #8
   14130:	subeq	sp, fp, #16
   14134:	popeq	{r4, r5, r6, sl, fp, pc}
   14138:	cmp	r0, #16384	; 0x4000
   1413c:	bne	14174 <__assert_fail@plt+0x2c8c>
   14140:	ldrb	r1, [r4, #168]	; 0xa8
   14144:	mov	r0, #1
   14148:	cmp	r1, #46	; 0x2e
   1414c:	bne	1416c <__assert_fail@plt+0x2c84>
   14150:	ldrb	r1, [r4, #169]	; 0xa9
   14154:	cmp	r1, #0
   14158:	beq	1418c <__assert_fail@plt+0x2ca4>
   1415c:	cmp	r1, #46	; 0x2e
   14160:	ldrbeq	r1, [r4, #170]	; 0xaa
   14164:	cmpeq	r1, #0
   14168:	beq	1418c <__assert_fail@plt+0x2ca4>
   1416c:	sub	sp, fp, #16
   14170:	pop	{r4, r5, r6, sl, fp, pc}
   14174:	mov	r0, #3
   14178:	sub	sp, fp, #16
   1417c:	pop	{r4, r5, r6, sl, fp, pc}
   14180:	mov	r0, #12
   14184:	sub	sp, fp, #16
   14188:	pop	{r4, r5, r6, sl, fp, pc}
   1418c:	ldr	r1, [r4, #48]	; 0x30
   14190:	mov	r0, #5
   14194:	cmp	r1, #0
   14198:	movweq	r0, #1
   1419c:	sub	sp, fp, #16
   141a0:	pop	{r4, r5, r6, sl, fp, pc}
   141a4:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   141a8:	add	fp, sp, #24
   141ac:	ldrd	r8, [r0, #40]	; 0x28
   141b0:	mov	r5, r2
   141b4:	mov	r4, r1
   141b8:	mov	r6, r0
   141bc:	cmp	r8, r2
   141c0:	bcs	14200 <__assert_fail@plt+0x2d18>
   141c4:	add	r1, r5, #40	; 0x28
   141c8:	cmn	r1, #-1073741823	; 0xc0000001
   141cc:	str	r1, [r6, #40]	; 0x28
   141d0:	bhi	1428c <__assert_fail@plt+0x2da4>
   141d4:	add	r7, r6, #8
   141d8:	lsl	r1, r1, #2
   141dc:	ldr	r0, [r7]
   141e0:	bl	19f30 <__assert_fail@plt+0x8a48>
   141e4:	cmp	r0, #0
   141e8:	beq	1428c <__assert_fail@plt+0x2da4>
   141ec:	mov	r6, r7
   141f0:	str	r0, [r7]
   141f4:	cmp	r4, #0
   141f8:	bne	1420c <__assert_fail@plt+0x2d24>
   141fc:	b	14220 <__assert_fail@plt+0x2d38>
   14200:	ldr	r0, [r6, #8]!
   14204:	cmp	r4, #0
   14208:	beq	14220 <__assert_fail@plt+0x2d38>
   1420c:	str	r4, [r0], #4
   14210:	ldr	r4, [r4, #8]
   14214:	cmp	r4, #0
   14218:	bne	1420c <__assert_fail@plt+0x2d24>
   1421c:	ldr	r0, [r6]
   14220:	mov	r1, r5
   14224:	mov	r2, #4
   14228:	mov	r3, r9
   1422c:	bl	11464 <qsort@plt>
   14230:	ldr	r7, [r6]
   14234:	subs	r0, r5, #1
   14238:	ldr	r4, [r7]
   1423c:	mov	r1, r4
   14240:	beq	1427c <__assert_fail@plt+0x2d94>
   14244:	mov	r1, r7
   14248:	cmp	r5, #2
   1424c:	ldr	r2, [r1, #4]!
   14250:	str	r2, [r4, #8]
   14254:	beq	14278 <__assert_fail@plt+0x2d90>
   14258:	rsb	r3, r5, #2
   1425c:	mov	r2, r1
   14260:	ldr	r6, [r2, #4]!
   14264:	ldr	r1, [r1]
   14268:	adds	r3, r3, #1
   1426c:	str	r6, [r1, #8]
   14270:	mov	r1, r2
   14274:	bne	14260 <__assert_fail@plt+0x2d78>
   14278:	ldr	r1, [r7, r0, lsl #2]
   1427c:	mov	r0, #0
   14280:	str	r0, [r1, #8]
   14284:	mov	r0, r4
   14288:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   1428c:	ldr	r0, [r6, #8]
   14290:	bl	13a64 <__assert_fail@plt+0x257c>
   14294:	mov	r0, #0
   14298:	str	r0, [r6, #40]	; 0x28
   1429c:	str	r0, [r6, #8]
   142a0:	mov	r0, r4
   142a4:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   142a8:	push	{r4, r5, r6, r7, fp, lr}
   142ac:	add	fp, sp, #16
   142b0:	mov	r4, r0
   142b4:	ldr	r0, [r0]
   142b8:	cmp	r0, #0
   142bc:	beq	142fc <__assert_fail@plt+0x2e14>
   142c0:	ldr	r1, [r0, #48]	; 0x30
   142c4:	cmp	r1, #0
   142c8:	blt	142f0 <__assert_fail@plt+0x2e08>
   142cc:	ldr	r5, [r0, #8]
   142d0:	cmp	r5, #0
   142d4:	ldreq	r5, [r0, #4]
   142d8:	bl	13a64 <__assert_fail@plt+0x257c>
   142dc:	ldr	r0, [r5, #48]	; 0x30
   142e0:	cmn	r0, #1
   142e4:	mov	r0, r5
   142e8:	bgt	142cc <__assert_fail@plt+0x2de4>
   142ec:	b	142f4 <__assert_fail@plt+0x2e0c>
   142f0:	mov	r5, r0
   142f4:	mov	r0, r5
   142f8:	bl	13a64 <__assert_fail@plt+0x257c>
   142fc:	ldr	r5, [r4, #4]
   14300:	cmp	r5, #0
   14304:	beq	14330 <__assert_fail@plt+0x2e48>
   14308:	ldrd	r6, [r5, #8]
   1430c:	cmp	r7, #0
   14310:	beq	1431c <__assert_fail@plt+0x2e34>
   14314:	mov	r0, r7
   14318:	bl	114d0 <closedir@plt>
   1431c:	mov	r0, r5
   14320:	bl	13a64 <__assert_fail@plt+0x257c>
   14324:	cmp	r6, #0
   14328:	mov	r5, r6
   1432c:	bne	14308 <__assert_fail@plt+0x2e20>
   14330:	ldr	r0, [r4, #8]
   14334:	bl	13a64 <__assert_fail@plt+0x257c>
   14338:	ldr	r0, [r4, #24]
   1433c:	bl	13a64 <__assert_fail@plt+0x257c>
   14340:	ldr	r0, [r4, #48]	; 0x30
   14344:	tst	r0, #512	; 0x200
   14348:	bne	14374 <__assert_fail@plt+0x2e8c>
   1434c:	mov	r6, #0
   14350:	tst	r0, #4
   14354:	bne	143b8 <__assert_fail@plt+0x2ed0>
   14358:	ldr	r0, [r4, #28]
   1435c:	bl	11458 <fchdir@plt>
   14360:	cmp	r0, #0
   14364:	beq	14394 <__assert_fail@plt+0x2eac>
   14368:	bl	1138c <__errno_location@plt>
   1436c:	ldr	r6, [r0]
   14370:	b	14398 <__assert_fail@plt+0x2eb0>
   14374:	ldr	r0, [r4, #32]
   14378:	mov	r6, #0
   1437c:	cmp	r0, #0
   14380:	blt	143b8 <__assert_fail@plt+0x2ed0>
   14384:	bl	114ac <close@plt>
   14388:	cmp	r0, #0
   1438c:	bne	143b0 <__assert_fail@plt+0x2ec8>
   14390:	b	143b8 <__assert_fail@plt+0x2ed0>
   14394:	mov	r6, #0
   14398:	ldr	r0, [r4, #28]
   1439c:	bl	114ac <close@plt>
   143a0:	cmp	r6, #0
   143a4:	bne	143b8 <__assert_fail@plt+0x2ed0>
   143a8:	cmp	r0, #0
   143ac:	beq	143b8 <__assert_fail@plt+0x2ed0>
   143b0:	bl	1138c <__errno_location@plt>
   143b4:	ldr	r6, [r0]
   143b8:	add	r5, r4, #60	; 0x3c
   143bc:	b	143c4 <__assert_fail@plt+0x2edc>
   143c0:	bl	114ac <close@plt>
   143c4:	mov	r0, r5
   143c8:	bl	171ac <__assert_fail@plt+0x5cc4>
   143cc:	cmp	r0, #0
   143d0:	bne	143e8 <__assert_fail@plt+0x2f00>
   143d4:	mov	r0, r5
   143d8:	bl	17200 <__assert_fail@plt+0x5d18>
   143dc:	cmp	r0, #0
   143e0:	bge	143c0 <__assert_fail@plt+0x2ed8>
   143e4:	b	143c4 <__assert_fail@plt+0x2edc>
   143e8:	ldr	r0, [r4, #52]	; 0x34
   143ec:	cmp	r0, #0
   143f0:	beq	143f8 <__assert_fail@plt+0x2f10>
   143f4:	bl	16658 <__assert_fail@plt+0x5170>
   143f8:	ldrh	r0, [r4, #48]	; 0x30
   143fc:	movw	r1, #258	; 0x102
   14400:	tst	r0, r1
   14404:	beq	1441c <__assert_fail@plt+0x2f34>
   14408:	ldr	r0, [r4, #56]	; 0x38
   1440c:	cmp	r0, #0
   14410:	beq	14424 <__assert_fail@plt+0x2f3c>
   14414:	bl	16658 <__assert_fail@plt+0x5170>
   14418:	b	14424 <__assert_fail@plt+0x2f3c>
   1441c:	ldr	r0, [r4, #56]	; 0x38
   14420:	bl	13a64 <__assert_fail@plt+0x257c>
   14424:	mov	r0, r4
   14428:	bl	13a64 <__assert_fail@plt+0x257c>
   1442c:	cmp	r6, #0
   14430:	moveq	r0, #0
   14434:	popeq	{r4, r5, r6, r7, fp, pc}
   14438:	bl	1138c <__errno_location@plt>
   1443c:	str	r6, [r0]
   14440:	mvn	r0, #0
   14444:	pop	{r4, r5, r6, r7, fp, pc}
   14448:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   1444c:	add	fp, sp, #24
   14450:	sub	sp, sp, #8
   14454:	ldr	r6, [r0]
   14458:	mov	r5, #0
   1445c:	cmp	r6, #0
   14460:	beq	14b94 <__assert_fail@plt+0x36ac>
   14464:	mov	r4, r0
   14468:	ldr	r0, [r0, #48]	; 0x30
   1446c:	tst	r0, #8192	; 0x2000
   14470:	bne	14b94 <__assert_fail@plt+0x36ac>
   14474:	ldrh	r1, [r6, #60]	; 0x3c
   14478:	mov	r2, #3
   1447c:	strh	r2, [r6, #60]	; 0x3c
   14480:	cmp	r1, #1
   14484:	beq	144fc <__assert_fail@plt+0x3014>
   14488:	mov	r7, r6
   1448c:	cmp	r1, #2
   14490:	bne	14518 <__assert_fail@plt+0x3030>
   14494:	ldrh	r2, [r7, #56]!	; 0x38
   14498:	movw	r3, #65534	; 0xfffe
   1449c:	and	r3, r2, r3
   144a0:	cmp	r3, #12
   144a4:	bne	1451c <__assert_fail@plt+0x3034>
   144a8:	mov	r0, r4
   144ac:	mov	r1, r6
   144b0:	mov	r2, #1
   144b4:	bl	1400c <__assert_fail@plt+0x2b24>
   144b8:	cmp	r0, #1
   144bc:	strh	r0, [r6, #56]	; 0x38
   144c0:	bne	14604 <__assert_fail@plt+0x311c>
   144c4:	ldr	r0, [r4, #48]	; 0x30
   144c8:	tst	r0, #4
   144cc:	bne	14604 <__assert_fail@plt+0x311c>
   144d0:	mov	r1, #32768	; 0x8000
   144d4:	tst	r0, #512	; 0x200
   144d8:	and	r1, r1, r0, lsl #11
   144dc:	orr	r1, r1, #18688	; 0x4900
   144e0:	orr	r2, r1, #524288	; 0x80000
   144e4:	bne	14870 <__assert_fail@plt+0x3388>
   144e8:	movw	r0, #46208	; 0xb480
   144ec:	mov	r1, r2
   144f0:	movt	r0, #1
   144f4:	bl	1a378 <__assert_fail@plt+0x8e90>
   144f8:	b	14880 <__assert_fail@plt+0x3398>
   144fc:	mov	r0, r4
   14500:	mov	r1, r6
   14504:	mov	r2, #0
   14508:	bl	1400c <__assert_fail@plt+0x2b24>
   1450c:	strh	r0, [r6, #56]	; 0x38
   14510:	mov	r5, r6
   14514:	b	14b94 <__assert_fail@plt+0x36ac>
   14518:	ldrh	r2, [r7, #56]!	; 0x38
   1451c:	cmp	r2, #1
   14520:	bne	14598 <__assert_fail@plt+0x30b0>
   14524:	cmp	r1, #4
   14528:	bne	1460c <__assert_fail@plt+0x3124>
   1452c:	ldrb	r0, [r6, #58]	; 0x3a
   14530:	tst	r0, #2
   14534:	beq	14540 <__assert_fail@plt+0x3058>
   14538:	ldr	r0, [r6, #36]	; 0x24
   1453c:	bl	114ac <close@plt>
   14540:	ldr	r5, [r4, #4]
   14544:	cmp	r5, #0
   14548:	beq	1457c <__assert_fail@plt+0x3094>
   1454c:	ldrd	r8, [r5, #8]
   14550:	cmp	r9, #0
   14554:	beq	14560 <__assert_fail@plt+0x3078>
   14558:	mov	r0, r9
   1455c:	bl	114d0 <closedir@plt>
   14560:	mov	r0, r5
   14564:	bl	13a64 <__assert_fail@plt+0x257c>
   14568:	cmp	r8, #0
   1456c:	mov	r5, r8
   14570:	bne	1454c <__assert_fail@plt+0x3064>
   14574:	mov	r0, #0
   14578:	str	r0, [r4, #4]
   1457c:	mov	r0, #6
   14580:	strh	r0, [r6, #56]	; 0x38
   14584:	mov	r0, r4
   14588:	mov	r1, r6
   1458c:	bl	14ba4 <__assert_fail@plt+0x36bc>
   14590:	mov	r5, r6
   14594:	b	14b94 <__assert_fail@plt+0x36ac>
   14598:	ldr	r5, [r6, #8]
   1459c:	cmp	r5, #0
   145a0:	beq	1469c <__assert_fail@plt+0x31b4>
   145a4:	mov	r0, r6
   145a8:	str	r5, [r4]
   145ac:	bl	13a64 <__assert_fail@plt+0x257c>
   145b0:	ldr	r0, [r5, #48]	; 0x30
   145b4:	cmp	r0, #0
   145b8:	beq	146e8 <__assert_fail@plt+0x3200>
   145bc:	ldrh	r0, [r5, #60]	; 0x3c
   145c0:	mov	r6, r5
   145c4:	cmp	r0, #4
   145c8:	beq	14598 <__assert_fail@plt+0x30b0>
   145cc:	cmp	r0, #2
   145d0:	bne	14788 <__assert_fail@plt+0x32a0>
   145d4:	mov	r0, r4
   145d8:	mov	r1, r5
   145dc:	mov	r2, #1
   145e0:	bl	1400c <__assert_fail@plt+0x2b24>
   145e4:	strh	r0, [r5, #56]	; 0x38
   145e8:	cmp	r0, #1
   145ec:	ldreq	r0, [r4, #48]	; 0x30
   145f0:	tsteq	r0, #4
   145f4:	beq	14aac <__assert_fail@plt+0x35c4>
   145f8:	mov	r0, #3
   145fc:	strh	r0, [r5, #60]	; 0x3c
   14600:	b	14788 <__assert_fail@plt+0x32a0>
   14604:	mov	r5, r6
   14608:	b	147c4 <__assert_fail@plt+0x32dc>
   1460c:	tst	r0, #64	; 0x40
   14610:	beq	1462c <__assert_fail@plt+0x3144>
   14614:	ldrd	r2, [r4, #16]
   14618:	ldrd	r8, [r6, #64]	; 0x40
   1461c:	eor	r1, r9, r3
   14620:	eor	r2, r8, r2
   14624:	orrs	r1, r2, r1
   14628:	bne	1452c <__assert_fail@plt+0x3044>
   1462c:	ldr	r5, [r4, #4]
   14630:	cmp	r5, #0
   14634:	beq	14764 <__assert_fail@plt+0x327c>
   14638:	tst	r0, #4096	; 0x1000
   1463c:	bne	1472c <__assert_fail@plt+0x3244>
   14640:	ldr	r3, [r6, #24]
   14644:	mov	r0, r4
   14648:	mov	r1, r6
   1464c:	mvn	r2, #0
   14650:	bl	14c74 <__assert_fail@plt+0x378c>
   14654:	cmp	r0, #0
   14658:	beq	1477c <__assert_fail@plt+0x3294>
   1465c:	bl	1138c <__errno_location@plt>
   14660:	ldr	r0, [r0]
   14664:	str	r0, [r6, #32]
   14668:	ldrh	r0, [r6, #58]	; 0x3a
   1466c:	orr	r0, r0, #1
   14670:	strh	r0, [r6, #58]	; 0x3a
   14674:	ldr	r0, [r4, #4]
   14678:	cmp	r0, #0
   1467c:	beq	1477c <__assert_fail@plt+0x3294>
   14680:	ldmib	r0, {r1, r2}
   14684:	ldr	r1, [r1, #24]
   14688:	cmp	r2, #0
   1468c:	str	r1, [r0, #24]
   14690:	mov	r0, r2
   14694:	bne	14680 <__assert_fail@plt+0x3198>
   14698:	b	1477c <__assert_fail@plt+0x3294>
   1469c:	ldr	r5, [r6, #4]
   146a0:	ldr	r0, [r5, #12]
   146a4:	cmp	r0, #0
   146a8:	beq	148b0 <__assert_fail@plt+0x33c8>
   146ac:	str	r5, [r4]
   146b0:	ldr	r1, [r5, #40]	; 0x28
   146b4:	ldr	r0, [r4, #24]
   146b8:	mov	r5, #0
   146bc:	strb	r5, [r0, r1]
   146c0:	mov	r0, r4
   146c4:	mov	r1, #3
   146c8:	bl	14ecc <__assert_fail@plt+0x39e4>
   146cc:	cmp	r0, #0
   146d0:	beq	148a0 <__assert_fail@plt+0x33b8>
   146d4:	mov	r7, r0
   146d8:	mov	r0, r6
   146dc:	bl	13a64 <__assert_fail@plt+0x257c>
   146e0:	mov	r5, r7
   146e4:	b	14788 <__assert_fail@plt+0x32a0>
   146e8:	mov	r0, r4
   146ec:	bl	15980 <__assert_fail@plt+0x4498>
   146f0:	ldr	r1, [r4, #48]	; 0x30
   146f4:	cmp	r0, #0
   146f8:	beq	1470c <__assert_fail@plt+0x3224>
   146fc:	orr	r0, r1, #8192	; 0x2000
   14700:	mov	r5, #0
   14704:	str	r0, [r4, #48]	; 0x30
   14708:	b	14b94 <__assert_fail@plt+0x36ac>
   1470c:	movw	r0, #258	; 0x102
   14710:	tst	r1, r0
   14714:	beq	14960 <__assert_fail@plt+0x3478>
   14718:	ldr	r0, [r4, #56]	; 0x38
   1471c:	cmp	r0, #0
   14720:	beq	14968 <__assert_fail@plt+0x3480>
   14724:	bl	16658 <__assert_fail@plt+0x5170>
   14728:	b	14968 <__assert_fail@plt+0x3480>
   1472c:	bic	r0, r0, #4096	; 0x1000
   14730:	str	r0, [r4, #48]	; 0x30
   14734:	ldrd	r8, [r5, #8]
   14738:	cmp	r9, #0
   1473c:	beq	14748 <__assert_fail@plt+0x3260>
   14740:	mov	r0, r9
   14744:	bl	114d0 <closedir@plt>
   14748:	mov	r0, r5
   1474c:	bl	13a64 <__assert_fail@plt+0x257c>
   14750:	cmp	r8, #0
   14754:	mov	r5, r8
   14758:	bne	14734 <__assert_fail@plt+0x324c>
   1475c:	mov	r0, #0
   14760:	str	r0, [r4, #4]
   14764:	mov	r0, r4
   14768:	mov	r1, #3
   1476c:	bl	14ecc <__assert_fail@plt+0x39e4>
   14770:	cmp	r0, #0
   14774:	str	r0, [r4, #4]
   14778:	beq	14844 <__assert_fail@plt+0x335c>
   1477c:	ldr	r5, [r4, #4]
   14780:	mov	r0, #0
   14784:	str	r0, [r4, #4]
   14788:	ldr	r0, [r5, #4]
   1478c:	ldr	r1, [r0, #28]
   14790:	ldr	r0, [r0, #40]	; 0x28
   14794:	sub	r2, r0, #1
   14798:	ldrb	r1, [r1, r2]
   1479c:	cmp	r1, #47	; 0x2f
   147a0:	ldr	r1, [r4, #24]
   147a4:	moveq	r0, r2
   147a8:	mov	r2, #47	; 0x2f
   147ac:	strb	r2, [r1, r0]!
   147b0:	ldr	r2, [r5, #52]	; 0x34
   147b4:	add	r0, r1, #1
   147b8:	add	r1, r5, #168	; 0xa8
   147bc:	add	r2, r2, #1
   147c0:	bl	11224 <memmove@plt>
   147c4:	str	r5, [r4]
   147c8:	ldrh	r0, [r5, #56]	; 0x38
   147cc:	cmp	r0, #11
   147d0:	bne	14804 <__assert_fail@plt+0x331c>
   147d4:	ldrd	r0, [r5, #112]	; 0x70
   147d8:	eor	r2, r0, #1
   147dc:	orrs	r2, r2, r1
   147e0:	beq	14b94 <__assert_fail@plt+0x36ac>
   147e4:	eor	r0, r0, #2
   147e8:	orrs	r0, r0, r1
   147ec:	bne	14ba0 <__assert_fail@plt+0x36b8>
   147f0:	mov	r0, r4
   147f4:	mov	r1, r5
   147f8:	mov	r2, #0
   147fc:	bl	1400c <__assert_fail@plt+0x2b24>
   14800:	strh	r0, [r5, #56]	; 0x38
   14804:	cmp	r0, #1
   14808:	bne	14b94 <__assert_fail@plt+0x36ac>
   1480c:	ldr	r0, [r5, #48]	; 0x30
   14810:	cmp	r0, #0
   14814:	ldrdeq	r0, [r5, #64]	; 0x40
   14818:	strdeq	r0, [r4, #16]
   1481c:	mov	r0, r4
   14820:	mov	r1, r5
   14824:	bl	15a10 <__assert_fail@plt+0x4528>
   14828:	cmp	r0, #0
   1482c:	bne	14b94 <__assert_fail@plt+0x36ac>
   14830:	bl	1138c <__errno_location@plt>
   14834:	mov	r1, #12
   14838:	mov	r5, #0
   1483c:	str	r1, [r0]
   14840:	b	14b94 <__assert_fail@plt+0x36ac>
   14844:	ldrb	r0, [r4, #49]	; 0x31
   14848:	mov	r5, #0
   1484c:	tst	r0, #32
   14850:	bne	14b94 <__assert_fail@plt+0x36ac>
   14854:	ldr	r0, [r6, #32]
   14858:	cmp	r0, #0
   1485c:	ldrhne	r0, [r7]
   14860:	cmpne	r0, #4
   14864:	movne	r0, #7
   14868:	strhne	r0, [r7]
   1486c:	b	14584 <__assert_fail@plt+0x309c>
   14870:	ldr	r0, [r4, #32]
   14874:	movw	r1, #46208	; 0xb480
   14878:	movt	r1, #1
   1487c:	bl	17258 <__assert_fail@plt+0x5d70>
   14880:	cmn	r0, #1
   14884:	str	r0, [r6, #36]	; 0x24
   14888:	ble	14944 <__assert_fail@plt+0x345c>
   1488c:	ldrh	r0, [r6, #58]	; 0x3a
   14890:	mov	r5, r6
   14894:	orr	r0, r0, #2
   14898:	strh	r0, [r6, #58]	; 0x3a
   1489c:	b	147c4 <__assert_fail@plt+0x32dc>
   148a0:	ldrb	r0, [r4, #49]	; 0x31
   148a4:	tst	r0, #32
   148a8:	bne	14b94 <__assert_fail@plt+0x36ac>
   148ac:	ldr	r5, [r6, #4]
   148b0:	mov	r0, r6
   148b4:	str	r5, [r4]
   148b8:	bl	13a64 <__assert_fail@plt+0x257c>
   148bc:	ldr	r0, [r5, #48]	; 0x30
   148c0:	cmn	r0, #1
   148c4:	beq	14928 <__assert_fail@plt+0x3440>
   148c8:	ldrh	r0, [r5, #56]	; 0x38
   148cc:	cmp	r0, #11
   148d0:	beq	14ba0 <__assert_fail@plt+0x36b8>
   148d4:	ldr	r0, [r5, #40]	; 0x28
   148d8:	ldr	r1, [r4, #24]
   148dc:	mov	r2, #0
   148e0:	strb	r2, [r1, r0]
   148e4:	ldr	r0, [r5, #48]	; 0x30
   148e8:	cmp	r0, #0
   148ec:	beq	14a38 <__assert_fail@plt+0x3550>
   148f0:	ldrh	r0, [r5, #58]	; 0x3a
   148f4:	tst	r0, #2
   148f8:	bne	14a64 <__assert_fail@plt+0x357c>
   148fc:	tst	r0, #1
   14900:	bne	14b58 <__assert_fail@plt+0x3670>
   14904:	ldr	r1, [r5, #4]
   14908:	movw	r3, #46207	; 0xb47f
   1490c:	mov	r0, r4
   14910:	mvn	r2, #0
   14914:	movt	r3, #1
   14918:	bl	14c74 <__assert_fail@plt+0x378c>
   1491c:	cmp	r0, #0
   14920:	bne	14a48 <__assert_fail@plt+0x3560>
   14924:	b	14b58 <__assert_fail@plt+0x3670>
   14928:	mov	r0, r5
   1492c:	bl	13a64 <__assert_fail@plt+0x257c>
   14930:	bl	1138c <__errno_location@plt>
   14934:	mov	r5, #0
   14938:	str	r5, [r0]
   1493c:	str	r5, [r4]
   14940:	b	14b94 <__assert_fail@plt+0x36ac>
   14944:	bl	1138c <__errno_location@plt>
   14948:	ldr	r0, [r0]
   1494c:	mov	r1, #7
   14950:	mov	r5, r6
   14954:	strh	r1, [r6, #56]	; 0x38
   14958:	str	r0, [r6, #32]
   1495c:	b	147c4 <__assert_fail@plt+0x32dc>
   14960:	ldr	r0, [r4, #56]	; 0x38
   14964:	bl	13a64 <__assert_fail@plt+0x257c>
   14968:	ldr	r1, [r5, #52]	; 0x34
   1496c:	add	r6, r5, #168	; 0xa8
   14970:	str	r1, [r5, #40]	; 0x28
   14974:	add	r2, r1, #1
   14978:	mov	r1, r6
   1497c:	ldr	r0, [r4, #24]
   14980:	bl	11224 <memmove@plt>
   14984:	mov	r0, r6
   14988:	mov	r1, #47	; 0x2f
   1498c:	bl	1141c <strrchr@plt>
   14990:	cmp	r0, #0
   14994:	beq	149d0 <__assert_fail@plt+0x34e8>
   14998:	cmp	r0, r6
   1499c:	bne	149ac <__assert_fail@plt+0x34c4>
   149a0:	ldrb	r1, [r5, #169]	; 0xa9
   149a4:	cmp	r1, #0
   149a8:	beq	149d0 <__assert_fail@plt+0x34e8>
   149ac:	add	r7, r0, #1
   149b0:	mov	r0, r7
   149b4:	bl	11374 <strlen@plt>
   149b8:	mov	r8, r0
   149bc:	add	r2, r0, #1
   149c0:	mov	r0, r6
   149c4:	mov	r1, r7
   149c8:	bl	11224 <memmove@plt>
   149cc:	str	r8, [r5, #52]	; 0x34
   149d0:	ldr	r0, [r4, #24]
   149d4:	movw	r1, #258	; 0x102
   149d8:	str	r0, [r5, #24]
   149dc:	str	r0, [r5, #28]
   149e0:	ldrh	r0, [r4, #48]	; 0x30
   149e4:	tst	r0, r1
   149e8:	beq	14a1c <__assert_fail@plt+0x3534>
   149ec:	movw	r0, #14948	; 0x3a64
   149f0:	movw	r2, #23760	; 0x5cd0
   149f4:	movw	r3, #23792	; 0x5cf0
   149f8:	mov	r1, #0
   149fc:	movt	r0, #1
   14a00:	movt	r2, #1
   14a04:	movt	r3, #1
   14a08:	str	r0, [sp]
   14a0c:	mov	r0, #31
   14a10:	bl	16360 <__assert_fail@plt+0x4e78>
   14a14:	str	r0, [r4, #56]	; 0x38
   14a18:	b	147c4 <__assert_fail@plt+0x32dc>
   14a1c:	mov	r0, #32
   14a20:	bl	19f00 <__assert_fail@plt+0x8a18>
   14a24:	cmp	r0, #0
   14a28:	str	r0, [r4, #56]	; 0x38
   14a2c:	beq	147c4 <__assert_fail@plt+0x32dc>
   14a30:	bl	1a008 <__assert_fail@plt+0x8b20>
   14a34:	b	147c4 <__assert_fail@plt+0x32dc>
   14a38:	mov	r0, r4
   14a3c:	bl	15980 <__assert_fail@plt+0x4498>
   14a40:	cmp	r0, #0
   14a44:	beq	14b58 <__assert_fail@plt+0x3670>
   14a48:	bl	1138c <__errno_location@plt>
   14a4c:	ldr	r0, [r0]
   14a50:	str	r0, [r5, #32]
   14a54:	ldr	r0, [r4, #48]	; 0x30
   14a58:	orr	r0, r0, #8192	; 0x2000
   14a5c:	str	r0, [r4, #48]	; 0x30
   14a60:	b	14b58 <__assert_fail@plt+0x3670>
   14a64:	ldr	r0, [r4, #48]	; 0x30
   14a68:	tst	r0, #4
   14a6c:	bne	14ad8 <__assert_fail@plt+0x35f0>
   14a70:	mov	r7, r5
   14a74:	tst	r0, #512	; 0x200
   14a78:	ldr	r6, [r7, #36]!	; 0x24
   14a7c:	bne	14b24 <__assert_fail@plt+0x363c>
   14a80:	mov	r0, r6
   14a84:	bl	11458 <fchdir@plt>
   14a88:	cmp	r0, #0
   14a8c:	beq	14b50 <__assert_fail@plt+0x3668>
   14a90:	bl	1138c <__errno_location@plt>
   14a94:	ldr	r0, [r0]
   14a98:	str	r0, [r5, #32]
   14a9c:	ldr	r0, [r4, #48]	; 0x30
   14aa0:	orr	r0, r0, #8192	; 0x2000
   14aa4:	str	r0, [r4, #48]	; 0x30
   14aa8:	b	14b50 <__assert_fail@plt+0x3668>
   14aac:	mov	r1, #32768	; 0x8000
   14ab0:	tst	r0, #512	; 0x200
   14ab4:	and	r1, r1, r0, lsl #11
   14ab8:	orr	r1, r1, #18688	; 0x4900
   14abc:	orr	r2, r1, #524288	; 0x80000
   14ac0:	bne	14ae0 <__assert_fail@plt+0x35f8>
   14ac4:	movw	r0, #46208	; 0xb480
   14ac8:	mov	r1, r2
   14acc:	movt	r0, #1
   14ad0:	bl	1a378 <__assert_fail@plt+0x8e90>
   14ad4:	b	14af0 <__assert_fail@plt+0x3608>
   14ad8:	add	r7, r5, #36	; 0x24
   14adc:	b	14b50 <__assert_fail@plt+0x3668>
   14ae0:	ldr	r0, [r4, #32]
   14ae4:	movw	r1, #46208	; 0xb480
   14ae8:	movt	r1, #1
   14aec:	bl	17258 <__assert_fail@plt+0x5d70>
   14af0:	cmn	r0, #1
   14af4:	str	r0, [r5, #36]	; 0x24
   14af8:	ble	14b0c <__assert_fail@plt+0x3624>
   14afc:	ldrh	r0, [r5, #58]	; 0x3a
   14b00:	orr	r0, r0, #2
   14b04:	strh	r0, [r5, #58]	; 0x3a
   14b08:	b	145f8 <__assert_fail@plt+0x3110>
   14b0c:	bl	1138c <__errno_location@plt>
   14b10:	ldr	r0, [r0]
   14b14:	mov	r1, #7
   14b18:	strh	r1, [r5, #56]	; 0x38
   14b1c:	str	r0, [r5, #32]
   14b20:	b	145f8 <__assert_fail@plt+0x3110>
   14b24:	ldr	r1, [r4, #32]
   14b28:	cmp	r1, r6
   14b2c:	bne	14b38 <__assert_fail@plt+0x3650>
   14b30:	cmn	r1, #100	; 0x64
   14b34:	bne	14ba0 <__assert_fail@plt+0x36b8>
   14b38:	add	r0, r4, #60	; 0x3c
   14b3c:	bl	171b4 <__assert_fail@plt+0x5ccc>
   14b40:	cmp	r0, #0
   14b44:	blt	14b4c <__assert_fail@plt+0x3664>
   14b48:	bl	114ac <close@plt>
   14b4c:	str	r6, [r4, #32]
   14b50:	ldr	r0, [r7]
   14b54:	bl	114ac <close@plt>
   14b58:	ldrh	r0, [r5, #56]	; 0x38
   14b5c:	cmp	r0, #2
   14b60:	beq	14b88 <__assert_fail@plt+0x36a0>
   14b64:	ldr	r0, [r5, #32]
   14b68:	mov	r1, #7
   14b6c:	cmp	r0, #0
   14b70:	movweq	r1, #6
   14b74:	strh	r1, [r5, #56]	; 0x38
   14b78:	bne	14b88 <__assert_fail@plt+0x36a0>
   14b7c:	mov	r0, r4
   14b80:	mov	r1, r5
   14b84:	bl	14ba4 <__assert_fail@plt+0x36bc>
   14b88:	ldrb	r0, [r4, #49]	; 0x31
   14b8c:	tst	r0, #32
   14b90:	movne	r5, #0
   14b94:	mov	r0, r5
   14b98:	sub	sp, fp, #24
   14b9c:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   14ba0:	bl	114a0 <abort@plt>
   14ba4:	push	{r4, r5, r6, r7, fp, lr}
   14ba8:	add	fp, sp, #16
   14bac:	sub	sp, sp, #24
   14bb0:	ldrh	r2, [r0, #48]	; 0x30
   14bb4:	movw	r3, #258	; 0x102
   14bb8:	add	lr, r1, #64	; 0x40
   14bbc:	tst	r2, r3
   14bc0:	beq	14bf8 <__assert_fail@plt+0x3710>
   14bc4:	ldrd	r2, [lr]
   14bc8:	stm	sp, {r2, r3}
   14bcc:	ldrd	r2, [r1, #160]	; 0xa0
   14bd0:	mov	r1, sp
   14bd4:	str	r3, [sp, #12]
   14bd8:	str	r2, [sp, #8]
   14bdc:	ldr	r0, [r0, #56]	; 0x38
   14be0:	bl	16ee4 <__assert_fail@plt+0x59fc>
   14be4:	cmp	r0, #0
   14be8:	beq	14c70 <__assert_fail@plt+0x3788>
   14bec:	bl	13a64 <__assert_fail@plt+0x257c>
   14bf0:	sub	sp, fp, #16
   14bf4:	pop	{r4, r5, r6, r7, fp, pc}
   14bf8:	ldr	r2, [r1, #4]
   14bfc:	cmp	r2, #0
   14c00:	beq	14c68 <__assert_fail@plt+0x3780>
   14c04:	ldr	r3, [r2, #48]	; 0x30
   14c08:	cmp	r3, #0
   14c0c:	blt	14c68 <__assert_fail@plt+0x3780>
   14c10:	ldr	ip, [r0, #56]	; 0x38
   14c14:	ldrd	r4, [ip, #16]
   14c18:	orrs	r3, r4, r5
   14c1c:	beq	14c70 <__assert_fail@plt+0x3788>
   14c20:	ldrd	r4, [r1, #160]	; 0xa0
   14c24:	ldrd	r6, [ip]
   14c28:	eor	r1, r7, r5
   14c2c:	eor	r3, r6, r4
   14c30:	orrs	r1, r3, r1
   14c34:	bne	14c68 <__assert_fail@plt+0x3780>
   14c38:	ldr	r1, [ip, #8]!
   14c3c:	ldrd	r4, [lr]
   14c40:	ldr	r3, [ip, #4]
   14c44:	eor	r1, r1, r4
   14c48:	eor	r3, r3, r5
   14c4c:	orrs	r1, r1, r3
   14c50:	bne	14c68 <__assert_fail@plt+0x3780>
   14c54:	ldrd	r4, [r2, #64]	; 0x40
   14c58:	strd	r4, [ip]
   14c5c:	ldr	r0, [r0, #56]	; 0x38
   14c60:	ldrd	r2, [r2, #160]	; 0xa0
   14c64:	strd	r2, [r0]
   14c68:	sub	sp, fp, #16
   14c6c:	pop	{r4, r5, r6, r7, fp, pc}
   14c70:	bl	114a0 <abort@plt>
   14c74:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   14c78:	add	fp, sp, #28
   14c7c:	sub	sp, sp, #108	; 0x6c
   14c80:	mov	r7, r3
   14c84:	mov	r4, r2
   14c88:	mov	r8, r1
   14c8c:	mov	sl, r0
   14c90:	cmp	r3, #0
   14c94:	beq	14cb8 <__assert_fail@plt+0x37d0>
   14c98:	movw	r1, #46207	; 0xb47f
   14c9c:	mov	r0, r7
   14ca0:	movt	r1, #1
   14ca4:	bl	11200 <strcmp@plt>
   14ca8:	mov	r6, r0
   14cac:	cmp	r0, #0
   14cb0:	movwne	r6, #1
   14cb4:	b	14cbc <__assert_fail@plt+0x37d4>
   14cb8:	mov	r6, #1
   14cbc:	ldr	r0, [sl, #48]	; 0x30
   14cc0:	tst	r0, #4
   14cc4:	bne	14d1c <__assert_fail@plt+0x3834>
   14cc8:	cmn	r4, #1
   14ccc:	mov	r1, #0
   14cd0:	mov	r9, #0
   14cd4:	movwgt	r1, #1
   14cd8:	orrs	r1, r1, r6
   14cdc:	bne	14d3c <__assert_fail@plt+0x3854>
   14ce0:	ands	r0, r0, #512	; 0x200
   14ce4:	beq	14d3c <__assert_fail@plt+0x3854>
   14ce8:	add	r4, sl, #60	; 0x3c
   14cec:	mov	r0, r4
   14cf0:	bl	171ac <__assert_fail@plt+0x5cc4>
   14cf4:	cmp	r0, #0
   14cf8:	bne	14d44 <__assert_fail@plt+0x385c>
   14cfc:	mov	r0, r4
   14d00:	bl	17200 <__assert_fail@plt+0x5d18>
   14d04:	cmn	r0, #1
   14d08:	ble	14d44 <__assert_fail@plt+0x385c>
   14d0c:	mov	r4, r0
   14d10:	mov	r9, #0
   14d14:	mov	r7, #0
   14d18:	b	14d8c <__assert_fail@plt+0x38a4>
   14d1c:	mov	r5, #0
   14d20:	cmp	r4, #0
   14d24:	blt	14ebc <__assert_fail@plt+0x39d4>
   14d28:	ands	r0, r0, #512	; 0x200
   14d2c:	beq	14ebc <__assert_fail@plt+0x39d4>
   14d30:	mov	r0, r4
   14d34:	bl	114ac <close@plt>
   14d38:	b	14ebc <__assert_fail@plt+0x39d4>
   14d3c:	cmn	r4, #1
   14d40:	bgt	14d8c <__assert_fail@plt+0x38a4>
   14d44:	ldr	r0, [sl, #48]	; 0x30
   14d48:	mov	r1, #32768	; 0x8000
   14d4c:	and	r1, r1, r0, lsl #11
   14d50:	tst	r0, #512	; 0x200
   14d54:	orr	r1, r1, #18688	; 0x4900
   14d58:	orr	r2, r1, #524288	; 0x80000
   14d5c:	bne	14d70 <__assert_fail@plt+0x3888>
   14d60:	mov	r0, r7
   14d64:	mov	r1, r2
   14d68:	bl	1a378 <__assert_fail@plt+0x8e90>
   14d6c:	b	14d7c <__assert_fail@plt+0x3894>
   14d70:	ldr	r0, [sl, #32]
   14d74:	mov	r1, r7
   14d78:	bl	17258 <__assert_fail@plt+0x5d70>
   14d7c:	mov	r4, r0
   14d80:	mov	r9, #1
   14d84:	cmp	r0, #0
   14d88:	blt	14e60 <__assert_fail@plt+0x3978>
   14d8c:	ldr	r5, [sl, #48]	; 0x30
   14d90:	tst	r5, #2
   14d94:	bne	14dd8 <__assert_fail@plt+0x38f0>
   14d98:	cmp	r7, #0
   14d9c:	beq	14db8 <__assert_fail@plt+0x38d0>
   14da0:	movw	r1, #46207	; 0xb47f
   14da4:	mov	r0, r7
   14da8:	movt	r1, #1
   14dac:	bl	11200 <strcmp@plt>
   14db0:	cmp	r0, #0
   14db4:	beq	14dd8 <__assert_fail@plt+0x38f0>
   14db8:	tst	r5, #512	; 0x200
   14dbc:	bne	14e30 <__assert_fail@plt+0x3948>
   14dc0:	mov	r0, r4
   14dc4:	bl	11458 <fchdir@plt>
   14dc8:	mov	r5, r0
   14dcc:	cmp	r9, #0
   14dd0:	bne	14e80 <__assert_fail@plt+0x3998>
   14dd4:	b	14ebc <__assert_fail@plt+0x39d4>
   14dd8:	mov	r2, sp
   14ddc:	mov	r0, #3
   14de0:	mov	r1, r4
   14de4:	bl	112c0 <__fxstat64@plt>
   14de8:	cmp	r0, #0
   14dec:	bne	14e74 <__assert_fail@plt+0x398c>
   14df0:	ldrd	r0, [r8, #64]	; 0x40
   14df4:	ldm	sp, {r2, r3}
   14df8:	eor	r1, r1, r3
   14dfc:	eor	r0, r0, r2
   14e00:	orrs	r0, r0, r1
   14e04:	bne	14e68 <__assert_fail@plt+0x3980>
   14e08:	ldrd	r0, [r8, #160]	; 0xa0
   14e0c:	ldr	r2, [sp, #96]	; 0x60
   14e10:	ldr	r3, [sp, #100]	; 0x64
   14e14:	eor	r1, r1, r3
   14e18:	eor	r0, r0, r2
   14e1c:	orrs	r0, r0, r1
   14e20:	bne	14e68 <__assert_fail@plt+0x3980>
   14e24:	ldr	r5, [sl, #48]	; 0x30
   14e28:	tst	r5, #512	; 0x200
   14e2c:	beq	14dc0 <__assert_fail@plt+0x38d8>
   14e30:	ldr	r1, [sl, #32]
   14e34:	cmp	r1, r4
   14e38:	bne	14e44 <__assert_fail@plt+0x395c>
   14e3c:	cmn	r1, #100	; 0x64
   14e40:	bne	14ec8 <__assert_fail@plt+0x39e0>
   14e44:	cmp	r6, #0
   14e48:	beq	14e9c <__assert_fail@plt+0x39b4>
   14e4c:	add	r0, sl, #60	; 0x3c
   14e50:	bl	171b4 <__assert_fail@plt+0x5ccc>
   14e54:	cmp	r0, #0
   14e58:	bge	14eb0 <__assert_fail@plt+0x39c8>
   14e5c:	b	14eb4 <__assert_fail@plt+0x39cc>
   14e60:	mvn	r5, #0
   14e64:	b	14ebc <__assert_fail@plt+0x39d4>
   14e68:	bl	1138c <__errno_location@plt>
   14e6c:	mov	r1, #2
   14e70:	str	r1, [r0]
   14e74:	mvn	r5, #0
   14e78:	cmp	r9, #0
   14e7c:	beq	14ebc <__assert_fail@plt+0x39d4>
   14e80:	bl	1138c <__errno_location@plt>
   14e84:	ldr	r7, [r0]
   14e88:	mov	r6, r0
   14e8c:	mov	r0, r4
   14e90:	bl	114ac <close@plt>
   14e94:	str	r7, [r6]
   14e98:	b	14ebc <__assert_fail@plt+0x39d4>
   14e9c:	tst	r5, #4
   14ea0:	bne	14eb4 <__assert_fail@plt+0x39cc>
   14ea4:	cmp	r1, #0
   14ea8:	blt	14eb4 <__assert_fail@plt+0x39cc>
   14eac:	mov	r0, r1
   14eb0:	bl	114ac <close@plt>
   14eb4:	str	r4, [sl, #32]
   14eb8:	mov	r5, #0
   14ebc:	mov	r0, r5
   14ec0:	sub	sp, fp, #28
   14ec4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14ec8:	bl	114a0 <abort@plt>
   14ecc:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   14ed0:	add	fp, sp, #28
   14ed4:	sub	sp, sp, #76	; 0x4c
   14ed8:	ldr	sl, [r0]
   14edc:	mov	r8, r1
   14ee0:	mov	r5, r0
   14ee4:	str	r0, [sp, #44]	; 0x2c
   14ee8:	ldr	r4, [sl, #12]
   14eec:	cmp	r4, #0
   14ef0:	beq	14f3c <__assert_fail@plt+0x3a54>
   14ef4:	mov	r0, r4
   14ef8:	bl	1144c <dirfd@plt>
   14efc:	cmn	r0, #1
   14f00:	str	r0, [fp, #-32]	; 0xffffffe0
   14f04:	ble	14f74 <__assert_fail@plt+0x3a8c>
   14f08:	mov	r1, r5
   14f0c:	mvn	r2, #0
   14f10:	str	r4, [sp, #16]
   14f14:	str	r8, [sp, #8]
   14f18:	mov	ip, #0
   14f1c:	ldr	r0, [r1, #44]!	; 0x2c
   14f20:	cmp	r0, #0
   14f24:	str	r1, [sp, #52]	; 0x34
   14f28:	add	r7, r1, #4
   14f2c:	movweq	r2, #34464	; 0x86a0
   14f30:	movteq	r2, #1
   14f34:	str	r2, [sp, #32]
   14f38:	b	15158 <__assert_fail@plt+0x3c70>
   14f3c:	mov	r7, r5
   14f40:	mvn	r0, #99	; 0x63
   14f44:	mov	r2, #0
   14f48:	ldr	r3, [r7, #48]!	; 0x30
   14f4c:	and	r1, r3, #516	; 0x204
   14f50:	cmp	r1, #512	; 0x200
   14f54:	ldr	r1, [sl, #24]
   14f58:	ldreq	r0, [r5, #32]
   14f5c:	tst	r3, #16
   14f60:	beq	14f9c <__assert_fail@plt+0x3ab4>
   14f64:	tst	r3, #1
   14f68:	bne	14f90 <__assert_fail@plt+0x3aa8>
   14f6c:	mov	r2, #32768	; 0x8000
   14f70:	b	14f9c <__assert_fail@plt+0x3ab4>
   14f74:	ldr	r0, [sl, #12]
   14f78:	bl	114d0 <closedir@plt>
   14f7c:	mov	r6, #0
   14f80:	str	r6, [sl, #12]
   14f84:	cmp	r8, #3
   14f88:	beq	14fe0 <__assert_fail@plt+0x3af8>
   14f8c:	b	15874 <__assert_fail@plt+0x438c>
   14f90:	ldr	r3, [sl, #48]	; 0x30
   14f94:	cmp	r3, #0
   14f98:	movne	r2, #32768	; 0x8000
   14f9c:	sub	r3, fp, #32
   14fa0:	bl	1729c <__assert_fail@plt+0x5db4>
   14fa4:	cmp	r0, #0
   14fa8:	str	r0, [sl, #12]
   14fac:	beq	14fd4 <__assert_fail@plt+0x3aec>
   14fb0:	ldrh	r0, [sl, #56]	; 0x38
   14fb4:	cmp	r0, #11
   14fb8:	bne	14ff8 <__assert_fail@plt+0x3b10>
   14fbc:	mov	r0, r5
   14fc0:	mov	r1, sl
   14fc4:	mov	r2, #0
   14fc8:	bl	1400c <__assert_fail@plt+0x2b24>
   14fcc:	strh	r0, [sl, #56]	; 0x38
   14fd0:	b	15038 <__assert_fail@plt+0x3b50>
   14fd4:	mov	r6, #0
   14fd8:	cmp	r8, #3
   14fdc:	bne	15874 <__assert_fail@plt+0x438c>
   14fe0:	mov	r0, #4
   14fe4:	strh	r0, [sl, #56]	; 0x38
   14fe8:	bl	1138c <__errno_location@plt>
   14fec:	ldr	r0, [r0]
   14ff0:	str	r0, [sl, #32]
   14ff4:	b	15874 <__assert_fail@plt+0x438c>
   14ff8:	ldrb	r0, [r7, #1]
   14ffc:	tst	r0, #1
   15000:	beq	15038 <__assert_fail@plt+0x3b50>
   15004:	mov	r0, r5
   15008:	mov	r1, sl
   1500c:	bl	14ba4 <__assert_fail@plt+0x36bc>
   15010:	mov	r0, r5
   15014:	mov	r1, sl
   15018:	mov	r2, #0
   1501c:	mov	r6, #0
   15020:	bl	1400c <__assert_fail@plt+0x2b24>
   15024:	mov	r0, r5
   15028:	mov	r1, sl
   1502c:	bl	15a10 <__assert_fail@plt+0x4528>
   15030:	cmp	r0, #0
   15034:	beq	157e0 <__assert_fail@plt+0x42f8>
   15038:	mov	r1, r5
   1503c:	str	r8, [sp, #8]
   15040:	str	r4, [sp, #16]
   15044:	ldr	r0, [r1, #44]!	; 0x2c
   15048:	str	r1, [sp, #52]	; 0x34
   1504c:	mvn	r1, #0
   15050:	cmp	r0, #0
   15054:	movweq	r1, #34464	; 0x86a0
   15058:	movteq	r1, #1
   1505c:	cmp	r8, #2
   15060:	str	r1, [sp, #32]
   15064:	bne	15080 <__assert_fail@plt+0x3b98>
   15068:	mov	ip, #1
   1506c:	cmp	r8, #3
   15070:	bne	15158 <__assert_fail@plt+0x3c70>
   15074:	sub	r0, r8, #3
   15078:	mov	r5, #0
   1507c:	b	150a0 <__assert_fail@plt+0x3bb8>
   15080:	ldr	r0, [r7]
   15084:	and	r0, r0, #56	; 0x38
   15088:	cmp	r0, #24
   1508c:	ldreq	r0, [sl, #84]	; 0x54
   15090:	cmpeq	r0, #2
   15094:	beq	15928 <__assert_fail@plt+0x4440>
   15098:	sub	r0, r8, #3
   1509c:	mov	r5, #1
   150a0:	clz	r0, r0
   150a4:	lsr	r6, r0, #5
   150a8:	ldrb	r0, [r7, #1]
   150ac:	ldr	r2, [fp, #-32]	; 0xffffffe0
   150b0:	tst	r0, #2
   150b4:	beq	150d0 <__assert_fail@plt+0x3be8>
   150b8:	mov	r0, r2
   150bc:	movw	r1, #1030	; 0x406
   150c0:	mov	r2, #3
   150c4:	bl	1a198 <__assert_fail@plt+0x8cb0>
   150c8:	mov	r2, r0
   150cc:	str	r0, [fp, #-32]	; 0xffffffe0
   150d0:	cmp	r2, #0
   150d4:	blt	150f0 <__assert_fail@plt+0x3c08>
   150d8:	ldr	r0, [sp, #44]	; 0x2c
   150dc:	mov	r1, sl
   150e0:	mov	r3, #0
   150e4:	bl	14c74 <__assert_fail@plt+0x378c>
   150e8:	cmp	r0, #0
   150ec:	beq	15150 <__assert_fail@plt+0x3c68>
   150f0:	and	r0, r6, r5
   150f4:	cmp	r0, #1
   150f8:	bne	15108 <__assert_fail@plt+0x3c20>
   150fc:	bl	1138c <__errno_location@plt>
   15100:	ldr	r0, [r0]
   15104:	str	r0, [sl, #32]
   15108:	ldrh	r0, [sl, #58]	; 0x3a
   1510c:	orr	r0, r0, #1
   15110:	strh	r0, [sl, #58]	; 0x3a
   15114:	ldr	r0, [sl, #12]
   15118:	bl	114d0 <closedir@plt>
   1511c:	mov	r4, #0
   15120:	ldr	r5, [sp, #44]	; 0x2c
   15124:	str	r4, [sl, #12]
   15128:	ldr	r0, [r7]
   1512c:	tst	r0, #512	; 0x200
   15130:	beq	15144 <__assert_fail@plt+0x3c5c>
   15134:	ldr	r0, [fp, #-32]	; 0xffffffe0
   15138:	cmp	r0, #0
   1513c:	blt	15144 <__assert_fail@plt+0x3c5c>
   15140:	bl	114ac <close@plt>
   15144:	mov	ip, #1
   15148:	str	r4, [sl, #12]
   1514c:	b	15158 <__assert_fail@plt+0x3c70>
   15150:	ldr	r5, [sp, #44]	; 0x2c
   15154:	mov	ip, #0
   15158:	ldr	r0, [sl, #40]	; 0x28
   1515c:	ldr	r1, [sl, #28]
   15160:	mov	r9, #0
   15164:	sub	r2, r0, #1
   15168:	ldrb	r1, [r1, r2]
   1516c:	cmp	r1, #47	; 0x2f
   15170:	ldrb	r1, [r7]
   15174:	moveq	r0, r2
   15178:	tst	r1, #4
   1517c:	mov	r1, #0
   15180:	str	r1, [sp, #40]	; 0x28
   15184:	beq	1519c <__assert_fail@plt+0x3cb4>
   15188:	ldr	r1, [r5, #24]
   1518c:	mov	r2, #47	; 0x2f
   15190:	strb	r2, [r1, r0]!
   15194:	add	r1, r1, #1
   15198:	str	r1, [sp, #40]	; 0x28
   1519c:	ldr	r6, [sl, #12]
   151a0:	add	r1, r0, #1
   151a4:	str	r1, [fp, #-48]	; 0xffffffd0
   151a8:	cmp	r6, #0
   151ac:	beq	15524 <__assert_fail@plt+0x403c>
   151b0:	ldr	r0, [sl, #48]	; 0x30
   151b4:	str	r7, [fp, #-36]	; 0xffffffdc
   151b8:	str	ip, [sp, #4]
   151bc:	mov	r7, #0
   151c0:	add	r0, r0, #1
   151c4:	str	r0, [sp, #24]
   151c8:	ldr	r0, [r5, #36]	; 0x24
   151cc:	sub	r0, r0, r1
   151d0:	str	r0, [fp, #-44]	; 0xffffffd4
   151d4:	bl	1138c <__errno_location@plt>
   151d8:	str	r0, [sp, #36]	; 0x24
   151dc:	mov	r0, #0
   151e0:	mov	r9, #0
   151e4:	mov	r4, #0
   151e8:	str	sl, [sp, #28]
   151ec:	str	r0, [sp, #48]	; 0x30
   151f0:	mov	r0, #0
   151f4:	str	r0, [sp, #12]
   151f8:	mov	r0, #0
   151fc:	str	r0, [sp, #20]
   15200:	ldr	r0, [sp, #36]	; 0x24
   15204:	str	r7, [r0]
   15208:	mov	r0, r6
   1520c:	bl	11434 <readdir64@plt>
   15210:	cmp	r0, #0
   15214:	beq	15678 <__assert_fail@plt+0x4190>
   15218:	mov	r8, r0
   1521c:	ldr	r0, [fp, #-36]	; 0xffffffdc
   15220:	str	r4, [fp, #-40]	; 0xffffffd8
   15224:	add	r4, r8, #19
   15228:	ldrb	r0, [r0]
   1522c:	tst	r0, #32
   15230:	ldrbeq	r0, [r4]
   15234:	cmpeq	r0, #46	; 0x2e
   15238:	beq	15334 <__assert_fail@plt+0x3e4c>
   1523c:	mov	r0, r4
   15240:	bl	11374 <strlen@plt>
   15244:	mov	r5, r0
   15248:	add	r0, r0, #176	; 0xb0
   1524c:	bic	r0, r0, #7
   15250:	bl	19f00 <__assert_fail@plt+0x8a18>
   15254:	mov	r6, r0
   15258:	cmp	r0, #0
   1525c:	beq	15804 <__assert_fail@plt+0x431c>
   15260:	add	sl, r6, #168	; 0xa8
   15264:	mov	r1, r4
   15268:	mov	r2, r5
   1526c:	mov	r0, sl
   15270:	bl	11254 <memcpy@plt>
   15274:	ldr	r2, [sp, #44]	; 0x2c
   15278:	mov	r0, #0
   1527c:	mov	r1, #196608	; 0x30000
   15280:	ldr	r3, [fp, #-48]	; 0xffffffd0
   15284:	strb	r0, [sl, r5]
   15288:	str	r5, [r6, #52]	; 0x34
   1528c:	str	r2, [r6, #44]	; 0x2c
   15290:	add	r7, r5, r3
   15294:	ldr	r4, [r2, #24]
   15298:	str	r1, [r6, #58]	; 0x3a
   1529c:	str	r0, [r6, #12]
   152a0:	str	r0, [r6, #16]
   152a4:	str	r0, [r6, #20]
   152a8:	str	r4, [r6, #28]
   152ac:	str	r0, [r6, #32]
   152b0:	ldr	r0, [fp, #-44]	; 0xffffffd4
   152b4:	cmp	r5, r0
   152b8:	bcs	152d0 <__assert_fail@plt+0x3de8>
   152bc:	ldr	r4, [fp, #-40]	; 0xffffffd8
   152c0:	mov	r5, r2
   152c4:	cmp	r7, r3
   152c8:	bcs	15374 <__assert_fail@plt+0x3e8c>
   152cc:	b	156dc <__assert_fail@plt+0x41f4>
   152d0:	ldr	r1, [r2, #36]	; 0x24
   152d4:	movw	r0, #257	; 0x101
   152d8:	mov	r5, r2
   152dc:	add	r0, r7, r0
   152e0:	adds	r1, r0, r1
   152e4:	bcs	157c0 <__assert_fail@plt+0x42d8>
   152e8:	mov	r0, r4
   152ec:	str	r1, [r5, #36]	; 0x24
   152f0:	bl	19f30 <__assert_fail@plt+0x8a48>
   152f4:	cmp	r0, #0
   152f8:	beq	157f0 <__assert_fail@plt+0x4308>
   152fc:	cmp	r0, r4
   15300:	str	r0, [r5, #24]
   15304:	beq	1535c <__assert_fail@plt+0x3e74>
   15308:	ldr	r1, [fp, #-36]	; 0xffffffdc
   1530c:	ldr	r3, [fp, #-48]	; 0xffffffd0
   15310:	ldr	r4, [fp, #-40]	; 0xffffffd8
   15314:	ldrb	r1, [r1]
   15318:	tst	r1, #4
   1531c:	ldr	r1, [sp, #40]	; 0x28
   15320:	addne	r1, r0, r3
   15324:	mov	r0, #1
   15328:	str	r1, [sp, #40]	; 0x28
   1532c:	str	r0, [sp, #20]
   15330:	b	15364 <__assert_fail@plt+0x3e7c>
   15334:	ldrb	r0, [r8, #20]
   15338:	cmp	r0, #0
   1533c:	beq	15350 <__assert_fail@plt+0x3e68>
   15340:	cmp	r0, #46	; 0x2e
   15344:	ldrbeq	r0, [r8, #21]
   15348:	cmpeq	r0, #0
   1534c:	bne	1523c <__assert_fail@plt+0x3d54>
   15350:	ldr	r4, [fp, #-40]	; 0xffffffd8
   15354:	mov	r7, #0
   15358:	b	15508 <__assert_fail@plt+0x4020>
   1535c:	ldr	r4, [fp, #-40]	; 0xffffffd8
   15360:	ldr	r3, [fp, #-48]	; 0xffffffd0
   15364:	ldr	r0, [r5, #36]	; 0x24
   15368:	sub	r0, r0, r3
   1536c:	cmp	r7, r3
   15370:	bcc	156dc <__assert_fail@plt+0x41f4>
   15374:	str	r0, [fp, #-44]	; 0xffffffd4
   15378:	ldr	r0, [sp, #24]
   1537c:	str	r0, [r6, #48]	; 0x30
   15380:	ldr	r0, [r5]
   15384:	str	r7, [r6, #40]	; 0x28
   15388:	str	r0, [r6, #4]
   1538c:	ldrd	r0, [r8]
   15390:	strd	r0, [r6, #160]	; 0xa0
   15394:	ldrb	r0, [r5, #48]	; 0x30
   15398:	tst	r0, #4
   1539c:	bne	153a8 <__assert_fail@plt+0x3ec0>
   153a0:	str	sl, [r6, #24]
   153a4:	b	153c4 <__assert_fail@plt+0x3edc>
   153a8:	ldr	r0, [r6, #28]
   153ac:	ldr	r1, [r6, #52]	; 0x34
   153b0:	str	r0, [r6, #24]
   153b4:	ldr	r0, [sp, #40]	; 0x28
   153b8:	add	r2, r1, #1
   153bc:	mov	r1, sl
   153c0:	bl	11224 <memmove@plt>
   153c4:	ldr	r0, [sp, #52]	; 0x34
   153c8:	ldr	r1, [fp, #-36]	; 0xffffffdc
   153cc:	ldr	sl, [sp, #28]
   153d0:	ldr	r0, [r0]
   153d4:	ldr	r2, [r1]
   153d8:	cmp	r0, #0
   153dc:	beq	15404 <__assert_fail@plt+0x3f1c>
   153e0:	ands	r0, r2, #1024	; 0x400
   153e4:	bne	15404 <__assert_fail@plt+0x3f1c>
   153e8:	mov	r0, r5
   153ec:	mov	r1, r6
   153f0:	mov	r2, #0
   153f4:	bl	1400c <__assert_fail@plt+0x2b24>
   153f8:	mov	r7, #0
   153fc:	strh	r0, [r6, #56]	; 0x38
   15400:	b	15478 <__assert_fail@plt+0x3f90>
   15404:	ldrb	r3, [r8, #18]
   15408:	mov	r0, #0
   1540c:	tst	r2, #8
   15410:	mov	r1, #0
   15414:	beq	15438 <__assert_fail@plt+0x3f50>
   15418:	orr	r1, r3, #4
   1541c:	cmp	r1, #4
   15420:	mov	r1, #0
   15424:	beq	15438 <__assert_fail@plt+0x3f50>
   15428:	eor	r1, r3, #10
   1542c:	and	r2, r2, #16
   15430:	orrs	r1, r2, r1
   15434:	movwne	r1, #1
   15438:	mov	r2, #11
   1543c:	mov	r7, #0
   15440:	strh	r2, [r6, #56]	; 0x38
   15444:	sub	r2, r3, #1
   15448:	uxtb	r3, r2
   1544c:	cmp	r3, #11
   15450:	sxtbls	r0, r2
   15454:	movwls	r2, #47200	; 0xb860
   15458:	movtls	r2, #1
   1545c:	ldrls	r0, [r2, r0, lsl #2]
   15460:	cmp	r1, #0
   15464:	str	r0, [r6, #80]	; 0x50
   15468:	mov	r0, #2
   1546c:	movwne	r0, #1
   15470:	str	r0, [r6, #112]	; 0x70
   15474:	str	r7, [r6, #116]	; 0x74
   15478:	cmp	r9, #0
   1547c:	str	r7, [r6, #8]
   15480:	ldrne	r0, [sp, #48]	; 0x30
   15484:	moveq	r9, r6
   15488:	strne	r6, [r0, #8]
   1548c:	movw	r0, #10000	; 0x2710
   15490:	cmp	r4, r0
   15494:	bne	154e8 <__assert_fail@plt+0x4000>
   15498:	ldr	r0, [sp, #52]	; 0x34
   1549c:	ldr	r0, [r0]
   154a0:	cmp	r0, #0
   154a4:	bne	154e8 <__assert_fail@plt+0x4000>
   154a8:	ldr	r1, [fp, #-32]	; 0xffffffe0
   154ac:	mov	r0, sl
   154b0:	bl	15d70 <__assert_fail@plt+0x4888>
   154b4:	mov	r1, #0
   154b8:	str	r1, [sp, #12]
   154bc:	movw	r1, #19778	; 0x4d42
   154c0:	movt	r1, #65363	; 0xff53
   154c4:	cmp	r0, r1
   154c8:	movwne	r1, #26985	; 0x6969
   154cc:	cmpne	r0, r1
   154d0:	beq	154e8 <__assert_fail@plt+0x4000>
   154d4:	movw	r1, #6548	; 0x1994
   154d8:	movt	r1, #258	; 0x102
   154dc:	cmp	r0, r1
   154e0:	movne	r0, #1
   154e4:	strne	r0, [sp, #12]
   154e8:	ldr	r0, [sp, #32]
   154ec:	add	r4, r4, #1
   154f0:	cmp	r0, r4
   154f4:	mov	r0, #0
   154f8:	movwls	r0, #15
   154fc:	cmp	r0, #0
   15500:	bne	15750 <__assert_fail@plt+0x4268>
   15504:	str	r6, [sp, #48]	; 0x30
   15508:	ldr	r6, [sl, #12]
   1550c:	cmp	r6, #0
   15510:	bne	15200 <__assert_fail@plt+0x3d18>
   15514:	ldr	r0, [sp, #20]
   15518:	ldr	ip, [sp, #4]
   1551c:	ldr	r6, [sp, #12]
   15520:	b	156c4 <__assert_fail@plt+0x41dc>
   15524:	mov	r4, #0
   15528:	mov	r6, #0
   1552c:	ldrb	r0, [r7]
   15530:	tst	r0, #4
   15534:	beq	15560 <__assert_fail@plt+0x4078>
   15538:	ldr	r2, [sp, #40]	; 0x28
   1553c:	ldr	r0, [r5, #36]	; 0x24
   15540:	ldr	r3, [fp, #-48]	; 0xffffffd0
   15544:	cmp	r3, r0
   15548:	sub	r1, r2, #1
   1554c:	mov	r0, #0
   15550:	moveq	r2, r1
   15554:	cmp	r4, #0
   15558:	moveq	r2, r1
   1555c:	strb	r0, [r2]
   15560:	ldr	r0, [sp, #16]
   15564:	cmp	r0, #0
   15568:	movwne	r0, #1
   1556c:	orrs	r0, r0, ip
   15570:	beq	155d4 <__assert_fail@plt+0x40ec>
   15574:	cmp	r4, #0
   15578:	bne	15614 <__assert_fail@plt+0x412c>
   1557c:	ldr	r0, [sp, #8]
   15580:	cmp	r0, #3
   15584:	bne	1559c <__assert_fail@plt+0x40b4>
   15588:	ldrh	r0, [sl, #56]	; 0x38
   1558c:	cmp	r0, #4
   15590:	cmpne	r0, #7
   15594:	movne	r0, #6
   15598:	strhne	r0, [sl, #56]	; 0x38
   1559c:	mov	r6, #0
   155a0:	cmp	r9, #0
   155a4:	beq	15874 <__assert_fail@plt+0x438c>
   155a8:	ldrd	r4, [r9, #8]
   155ac:	cmp	r5, #0
   155b0:	beq	155bc <__assert_fail@plt+0x40d4>
   155b4:	mov	r0, r5
   155b8:	bl	114d0 <closedir@plt>
   155bc:	mov	r0, r9
   155c0:	bl	13a64 <__assert_fail@plt+0x257c>
   155c4:	cmp	r4, #0
   155c8:	mov	r9, r4
   155cc:	bne	155a8 <__assert_fail@plt+0x40c0>
   155d0:	b	15874 <__assert_fail@plt+0x438c>
   155d4:	ldr	r0, [sp, #8]
   155d8:	cmp	r0, #1
   155dc:	cmpne	r4, #0
   155e0:	bne	15614 <__assert_fail@plt+0x412c>
   155e4:	ldr	r0, [sl, #48]	; 0x30
   155e8:	cmp	r0, #0
   155ec:	beq	15764 <__assert_fail@plt+0x427c>
   155f0:	ldr	r1, [sl, #4]
   155f4:	movw	r3, #46207	; 0xb47f
   155f8:	mov	r0, r5
   155fc:	mvn	r2, #0
   15600:	movt	r3, #1
   15604:	bl	14c74 <__assert_fail@plt+0x378c>
   15608:	cmp	r0, #0
   1560c:	bne	15774 <__assert_fail@plt+0x428c>
   15610:	b	15574 <__assert_fail@plt+0x408c>
   15614:	tst	r6, #1
   15618:	beq	15648 <__assert_fail@plt+0x4160>
   1561c:	movw	r0, #23864	; 0x5d38
   15620:	mov	r1, r9
   15624:	mov	r2, r4
   15628:	movt	r0, #1
   1562c:	str	r0, [r5, #44]	; 0x2c
   15630:	mov	r0, r5
   15634:	bl	141a4 <__assert_fail@plt+0x2cbc>
   15638:	mov	r6, r0
   1563c:	mov	r0, #0
   15640:	str	r0, [r5, #44]	; 0x2c
   15644:	b	15874 <__assert_fail@plt+0x438c>
   15648:	cmp	r4, #2
   1564c:	bcc	156d4 <__assert_fail@plt+0x41ec>
   15650:	ldr	r0, [sp, #52]	; 0x34
   15654:	ldr	r0, [r0]
   15658:	cmp	r0, #0
   1565c:	beq	156d4 <__assert_fail@plt+0x41ec>
   15660:	mov	r0, r5
   15664:	mov	r1, r9
   15668:	mov	r2, r4
   1566c:	bl	141a4 <__assert_fail@plt+0x2cbc>
   15670:	mov	r6, r0
   15674:	b	15874 <__assert_fail@plt+0x438c>
   15678:	ldr	r0, [sp, #36]	; 0x24
   1567c:	ldr	r0, [r0]
   15680:	cmp	r0, #0
   15684:	beq	156a0 <__assert_fail@plt+0x41b8>
   15688:	str	r0, [sl, #32]
   1568c:	ldr	r0, [sp, #16]
   15690:	orrs	r0, r0, r4
   15694:	mov	r0, #4
   15698:	movwne	r0, #7
   1569c:	strh	r0, [sl, #56]	; 0x38
   156a0:	ldr	r0, [sl, #12]
   156a4:	ldr	r6, [sp, #12]
   156a8:	cmp	r0, #0
   156ac:	beq	15888 <__assert_fail@plt+0x43a0>
   156b0:	bl	114d0 <closedir@plt>
   156b4:	mov	r0, #0
   156b8:	ldr	ip, [sp, #4]
   156bc:	str	r0, [sl, #12]
   156c0:	ldr	r0, [sp, #20]
   156c4:	tst	r0, #1
   156c8:	ldr	r7, [fp, #-36]	; 0xffffffdc
   156cc:	beq	1552c <__assert_fail@plt+0x4044>
   156d0:	b	1589c <__assert_fail@plt+0x43b4>
   156d4:	mov	r6, r9
   156d8:	b	15874 <__assert_fail@plt+0x438c>
   156dc:	mov	r0, r6
   156e0:	bl	13a64 <__assert_fail@plt+0x257c>
   156e4:	ldr	r7, [sp, #28]
   156e8:	cmp	r9, #0
   156ec:	beq	15718 <__assert_fail@plt+0x4230>
   156f0:	ldrd	r4, [r9, #8]
   156f4:	cmp	r5, #0
   156f8:	beq	15704 <__assert_fail@plt+0x421c>
   156fc:	mov	r0, r5
   15700:	bl	114d0 <closedir@plt>
   15704:	mov	r0, r9
   15708:	bl	13a64 <__assert_fail@plt+0x257c>
   1570c:	cmp	r4, #0
   15710:	mov	r9, r4
   15714:	bne	156f0 <__assert_fail@plt+0x4208>
   15718:	ldr	r0, [r7, #12]
   1571c:	bl	114d0 <closedir@plt>
   15720:	ldr	r1, [fp, #-36]	; 0xffffffdc
   15724:	mov	r6, #0
   15728:	mov	r0, #7
   1572c:	str	r6, [r7, #12]
   15730:	strh	r0, [r7, #56]	; 0x38
   15734:	ldr	r0, [r1]
   15738:	orr	r0, r0, #8192	; 0x2000
   1573c:	str	r0, [r1]
   15740:	ldr	r1, [sp, #36]	; 0x24
   15744:	mov	r0, #36	; 0x24
   15748:	str	r0, [r1]
   1574c:	b	15874 <__assert_fail@plt+0x438c>
   15750:	ldr	ip, [sp, #4]
   15754:	cmp	r0, #15
   15758:	bne	15880 <__assert_fail@plt+0x4398>
   1575c:	ldr	r6, [sp, #12]
   15760:	b	1588c <__assert_fail@plt+0x43a4>
   15764:	mov	r0, r5
   15768:	bl	15980 <__assert_fail@plt+0x4498>
   1576c:	cmp	r0, #0
   15770:	beq	15574 <__assert_fail@plt+0x408c>
   15774:	mov	r0, #7
   15778:	mov	r6, #0
   1577c:	cmp	r9, #0
   15780:	strh	r0, [sl, #56]	; 0x38
   15784:	ldr	r0, [r7]
   15788:	orr	r0, r0, #8192	; 0x2000
   1578c:	str	r0, [r7]
   15790:	beq	15874 <__assert_fail@plt+0x438c>
   15794:	ldrd	r4, [r9, #8]
   15798:	cmp	r5, #0
   1579c:	beq	157a8 <__assert_fail@plt+0x42c0>
   157a0:	mov	r0, r5
   157a4:	bl	114d0 <closedir@plt>
   157a8:	mov	r0, r9
   157ac:	bl	13a64 <__assert_fail@plt+0x257c>
   157b0:	cmp	r4, #0
   157b4:	mov	r9, r4
   157b8:	bne	15794 <__assert_fail@plt+0x42ac>
   157bc:	b	15874 <__assert_fail@plt+0x438c>
   157c0:	mov	r0, r4
   157c4:	bl	13a64 <__assert_fail@plt+0x257c>
   157c8:	ldr	r1, [sp, #36]	; 0x24
   157cc:	mov	r0, #0
   157d0:	str	r0, [r5, #24]
   157d4:	mov	r0, #36	; 0x24
   157d8:	str	r0, [r1]
   157dc:	b	15800 <__assert_fail@plt+0x4318>
   157e0:	bl	1138c <__errno_location@plt>
   157e4:	mov	r1, #12
   157e8:	str	r1, [r0]
   157ec:	b	15874 <__assert_fail@plt+0x438c>
   157f0:	ldr	r0, [r5, #24]
   157f4:	bl	13a64 <__assert_fail@plt+0x257c>
   157f8:	mov	r0, #0
   157fc:	str	r0, [r5, #24]
   15800:	ldr	sl, [sp, #28]
   15804:	ldr	r0, [sp, #36]	; 0x24
   15808:	ldr	r4, [r0]
   1580c:	mov	r0, r6
   15810:	bl	13a64 <__assert_fail@plt+0x257c>
   15814:	cmp	r9, #0
   15818:	beq	15844 <__assert_fail@plt+0x435c>
   1581c:	ldrd	r6, [r9, #8]
   15820:	cmp	r7, #0
   15824:	beq	15830 <__assert_fail@plt+0x4348>
   15828:	mov	r0, r7
   1582c:	bl	114d0 <closedir@plt>
   15830:	mov	r0, r9
   15834:	bl	13a64 <__assert_fail@plt+0x257c>
   15838:	cmp	r6, #0
   1583c:	mov	r9, r6
   15840:	bne	1581c <__assert_fail@plt+0x4334>
   15844:	ldr	r0, [sl, #12]
   15848:	bl	114d0 <closedir@plt>
   1584c:	ldr	r1, [fp, #-36]	; 0xffffffdc
   15850:	mov	r6, #0
   15854:	mov	r0, #7
   15858:	str	r6, [sl, #12]
   1585c:	strh	r0, [sl, #56]	; 0x38
   15860:	ldr	r0, [r1]
   15864:	orr	r0, r0, #8192	; 0x2000
   15868:	str	r0, [r1]
   1586c:	ldr	r0, [sp, #36]	; 0x24
   15870:	str	r4, [r0]
   15874:	mov	r0, r6
   15878:	sub	sp, fp, #28
   1587c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15880:	mov	r6, #0
   15884:	b	15874 <__assert_fail@plt+0x438c>
   15888:	ldr	ip, [sp, #4]
   1588c:	ldr	r0, [sp, #20]
   15890:	ldr	r7, [fp, #-36]	; 0xffffffdc
   15894:	tst	r0, #1
   15898:	beq	1552c <__assert_fail@plt+0x4044>
   1589c:	ldr	r1, [r5, #4]
   158a0:	ldr	r0, [r5, #24]
   158a4:	cmp	r1, #0
   158a8:	beq	158d8 <__assert_fail@plt+0x43f0>
   158ac:	ldr	r2, [r1, #24]
   158b0:	add	r3, r1, #168	; 0xa8
   158b4:	cmp	r2, r3
   158b8:	ldrne	r3, [r1, #28]
   158bc:	subne	r2, r2, r3
   158c0:	addne	r2, r0, r2
   158c4:	strne	r2, [r1, #24]
   158c8:	str	r0, [r1, #28]
   158cc:	ldr	r1, [r1, #8]
   158d0:	cmp	r1, #0
   158d4:	bne	158ac <__assert_fail@plt+0x43c4>
   158d8:	ldr	r1, [r9, #48]	; 0x30
   158dc:	cmp	r1, #0
   158e0:	blt	1552c <__assert_fail@plt+0x4044>
   158e4:	mov	r1, r9
   158e8:	ldr	r2, [r1, #24]
   158ec:	add	r3, r1, #168	; 0xa8
   158f0:	cmp	r2, r3
   158f4:	ldrne	r3, [r1, #28]
   158f8:	subne	r2, r2, r3
   158fc:	addne	r2, r0, r2
   15900:	strne	r2, [r1, #24]
   15904:	str	r0, [r1, #28]
   15908:	ldr	r2, [r1, #8]
   1590c:	cmp	r2, #0
   15910:	ldreq	r2, [r1, #4]
   15914:	ldr	r1, [r2, #48]	; 0x30
   15918:	cmn	r1, #1
   1591c:	mov	r1, r2
   15920:	bgt	158e8 <__assert_fail@plt+0x4400>
   15924:	b	1552c <__assert_fail@plt+0x4044>
   15928:	ldr	r1, [fp, #-32]	; 0xffffffe0
   1592c:	mov	r0, sl
   15930:	bl	15d70 <__assert_fail@plt+0x4888>
   15934:	movw	r1, #26984	; 0x6968
   15938:	cmp	r0, r1
   1593c:	ble	15968 <__assert_fail@plt+0x4480>
   15940:	movw	r1, #26985	; 0x6969
   15944:	cmp	r0, r1
   15948:	movwne	r1, #16719	; 0x414f
   1594c:	movtne	r1, #21318	; 0x5346
   15950:	cmpne	r0, r1
   15954:	beq	15098 <__assert_fail@plt+0x3bb0>
   15958:	movw	r1, #40864	; 0x9fa0
   1595c:	cmp	r0, r1
   15960:	beq	15098 <__assert_fail@plt+0x3bb0>
   15964:	b	15068 <__assert_fail@plt+0x3b80>
   15968:	movw	r1, #19778	; 0x4d42
   1596c:	movt	r1, #65363	; 0xff53
   15970:	cmp	r0, r1
   15974:	cmpne	r0, #0
   15978:	beq	15098 <__assert_fail@plt+0x3bb0>
   1597c:	b	15068 <__assert_fail@plt+0x3b80>
   15980:	push	{r4, r5, fp, lr}
   15984:	add	fp, sp, #8
   15988:	mov	r5, r0
   1598c:	ldr	r0, [r0, #48]	; 0x30
   15990:	mov	r4, #0
   15994:	tst	r0, #4
   15998:	bne	159dc <__assert_fail@plt+0x44f4>
   1599c:	tst	r0, #512	; 0x200
   159a0:	bne	159bc <__assert_fail@plt+0x44d4>
   159a4:	ldr	r0, [r5, #28]
   159a8:	bl	11458 <fchdir@plt>
   159ac:	mov	r4, r0
   159b0:	cmp	r0, #0
   159b4:	movwne	r4, #1
   159b8:	b	159dc <__assert_fail@plt+0x44f4>
   159bc:	ldr	r1, [r5, #32]
   159c0:	add	r0, r5, #60	; 0x3c
   159c4:	bl	171b4 <__assert_fail@plt+0x5ccc>
   159c8:	cmp	r0, #0
   159cc:	blt	159d4 <__assert_fail@plt+0x44ec>
   159d0:	bl	114ac <close@plt>
   159d4:	mvn	r0, #99	; 0x63
   159d8:	str	r0, [r5, #32]
   159dc:	add	r5, r5, #60	; 0x3c
   159e0:	b	159e8 <__assert_fail@plt+0x4500>
   159e4:	bl	114ac <close@plt>
   159e8:	mov	r0, r5
   159ec:	bl	171ac <__assert_fail@plt+0x5cc4>
   159f0:	cmp	r0, #0
   159f4:	movne	r0, r4
   159f8:	popne	{r4, r5, fp, pc}
   159fc:	mov	r0, r5
   15a00:	bl	17200 <__assert_fail@plt+0x5d18>
   15a04:	cmp	r0, #0
   15a08:	bge	159e4 <__assert_fail@plt+0x44fc>
   15a0c:	b	159e8 <__assert_fail@plt+0x4500>
   15a10:	push	{r4, r5, r6, r7, fp, lr}
   15a14:	add	fp, sp, #16
   15a18:	mov	r6, r0
   15a1c:	ldrh	r0, [r0, #48]	; 0x30
   15a20:	mov	r4, r1
   15a24:	movw	r1, #258	; 0x102
   15a28:	tst	r0, r1
   15a2c:	beq	15aa0 <__assert_fail@plt+0x45b8>
   15a30:	mov	r0, #24
   15a34:	bl	19f00 <__assert_fail@plt+0x8a18>
   15a38:	mov	r5, #0
   15a3c:	cmp	r0, #0
   15a40:	beq	15ac0 <__assert_fail@plt+0x45d8>
   15a44:	mov	r7, r0
   15a48:	ldrd	r0, [r4, #64]	; 0x40
   15a4c:	add	r2, r7, #8
   15a50:	stm	r7, {r0, r1}
   15a54:	ldrd	r0, [r4, #160]	; 0xa0
   15a58:	stm	r2, {r0, r1, r4}
   15a5c:	mov	r1, r7
   15a60:	ldr	r0, [r6, #56]	; 0x38
   15a64:	bl	16ea4 <__assert_fail@plt+0x59bc>
   15a68:	cmp	r0, r7
   15a6c:	beq	15a94 <__assert_fail@plt+0x45ac>
   15a70:	mov	r6, r0
   15a74:	mov	r0, r7
   15a78:	bl	13a64 <__assert_fail@plt+0x257c>
   15a7c:	cmp	r6, #0
   15a80:	beq	15ac0 <__assert_fail@plt+0x45d8>
   15a84:	ldr	r0, [r6, #16]
   15a88:	mov	r1, #2
   15a8c:	strh	r1, [r4, #56]	; 0x38
   15a90:	str	r0, [r4]
   15a94:	mov	r5, #1
   15a98:	mov	r0, r5
   15a9c:	pop	{r4, r5, r6, r7, fp, pc}
   15aa0:	ldr	r0, [r6, #56]	; 0x38
   15aa4:	add	r1, r4, #64	; 0x40
   15aa8:	bl	1a024 <__assert_fail@plt+0x8b3c>
   15aac:	cmp	r0, #0
   15ab0:	mov	r5, #1
   15ab4:	movne	r0, #2
   15ab8:	strhne	r0, [r4, #56]	; 0x38
   15abc:	strne	r4, [r4]
   15ac0:	mov	r0, r5
   15ac4:	pop	{r4, r5, r6, r7, fp, pc}
   15ac8:	cmp	r2, #5
   15acc:	movcc	r0, #0
   15ad0:	strhcc	r2, [r1, #60]	; 0x3c
   15ad4:	bxcc	lr
   15ad8:	push	{fp, lr}
   15adc:	mov	fp, sp
   15ae0:	bl	1138c <__errno_location@plt>
   15ae4:	mov	r1, #22
   15ae8:	str	r1, [r0]
   15aec:	mov	r0, #1
   15af0:	pop	{fp, pc}
   15af4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   15af8:	add	fp, sp, #28
   15afc:	sub	sp, sp, #4
   15b00:	mov	r9, r0
   15b04:	orr	r0, r1, #4096	; 0x1000
   15b08:	cmp	r0, #4096	; 0x1000
   15b0c:	bne	15b4c <__assert_fail@plt+0x4664>
   15b10:	ldr	r8, [r9]
   15b14:	mov	r7, r1
   15b18:	bl	1138c <__errno_location@plt>
   15b1c:	mov	r5, #0
   15b20:	mov	sl, r0
   15b24:	str	r5, [r0]
   15b28:	ldrb	r0, [r9, #49]	; 0x31
   15b2c:	tst	r0, #32
   15b30:	bne	15b5c <__assert_fail@plt+0x4674>
   15b34:	ldrh	r0, [r8, #56]	; 0x38
   15b38:	cmp	r0, #1
   15b3c:	beq	15b68 <__assert_fail@plt+0x4680>
   15b40:	cmp	r0, #9
   15b44:	ldreq	r5, [r8, #8]
   15b48:	b	15b5c <__assert_fail@plt+0x4674>
   15b4c:	bl	1138c <__errno_location@plt>
   15b50:	mov	r1, #22
   15b54:	mov	r5, #0
   15b58:	str	r1, [r0]
   15b5c:	mov	r0, r5
   15b60:	sub	sp, fp, #28
   15b64:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15b68:	ldr	r6, [r9, #4]
   15b6c:	cmp	r6, #0
   15b70:	beq	15ba0 <__assert_fail@plt+0x46b8>
   15b74:	ldr	r4, [r6, #8]
   15b78:	ldr	r1, [r6, #12]
   15b7c:	cmp	r1, #0
   15b80:	beq	15b8c <__assert_fail@plt+0x46a4>
   15b84:	mov	r0, r1
   15b88:	bl	114d0 <closedir@plt>
   15b8c:	mov	r0, r6
   15b90:	bl	13a64 <__assert_fail@plt+0x257c>
   15b94:	cmp	r4, #0
   15b98:	mov	r6, r4
   15b9c:	bne	15b74 <__assert_fail@plt+0x468c>
   15ba0:	cmp	r7, #4096	; 0x1000
   15ba4:	mov	r4, #1
   15ba8:	ldreq	r0, [r9, #48]	; 0x30
   15bac:	moveq	r4, #2
   15bb0:	orreq	r0, r0, #4096	; 0x1000
   15bb4:	streq	r0, [r9, #48]	; 0x30
   15bb8:	ldr	r0, [r8, #48]	; 0x30
   15bbc:	cmp	r0, #0
   15bc0:	bne	15c0c <__assert_fail@plt+0x4724>
   15bc4:	ldr	r0, [r8, #24]
   15bc8:	ldrb	r0, [r0]
   15bcc:	cmp	r0, #47	; 0x2f
   15bd0:	beq	15c0c <__assert_fail@plt+0x4724>
   15bd4:	ldr	r0, [r9, #48]	; 0x30
   15bd8:	tst	r0, #4
   15bdc:	bne	15c0c <__assert_fail@plt+0x4724>
   15be0:	mov	r1, #32768	; 0x8000
   15be4:	tst	r0, #512	; 0x200
   15be8:	and	r1, r1, r0, lsl #11
   15bec:	orr	r1, r1, #18688	; 0x4900
   15bf0:	orr	r2, r1, #524288	; 0x80000
   15bf4:	bne	15c24 <__assert_fail@plt+0x473c>
   15bf8:	movw	r0, #46208	; 0xb480
   15bfc:	mov	r1, r2
   15c00:	movt	r0, #1
   15c04:	bl	1a378 <__assert_fail@plt+0x8e90>
   15c08:	b	15c34 <__assert_fail@plt+0x474c>
   15c0c:	mov	r0, r9
   15c10:	mov	r1, r4
   15c14:	bl	14ecc <__assert_fail@plt+0x39e4>
   15c18:	mov	r5, r0
   15c1c:	str	r0, [r9, #4]
   15c20:	b	15b5c <__assert_fail@plt+0x4674>
   15c24:	ldr	r0, [r9, #32]
   15c28:	movw	r1, #46208	; 0xb480
   15c2c:	movt	r1, #1
   15c30:	bl	17258 <__assert_fail@plt+0x5d70>
   15c34:	mov	r8, r0
   15c38:	cmn	r0, #1
   15c3c:	ble	15c80 <__assert_fail@plt+0x4798>
   15c40:	mov	r0, r9
   15c44:	mov	r1, r4
   15c48:	bl	14ecc <__assert_fail@plt+0x39e4>
   15c4c:	str	r0, [r9, #4]
   15c50:	ldrb	r0, [r9, #49]	; 0x31
   15c54:	tst	r0, #2
   15c58:	bne	15c8c <__assert_fail@plt+0x47a4>
   15c5c:	mov	r0, r8
   15c60:	bl	11458 <fchdir@plt>
   15c64:	cmp	r0, #0
   15c68:	beq	15cbc <__assert_fail@plt+0x47d4>
   15c6c:	ldr	r4, [sl]
   15c70:	mov	r0, r8
   15c74:	bl	114ac <close@plt>
   15c78:	str	r4, [sl]
   15c7c:	b	15b5c <__assert_fail@plt+0x4674>
   15c80:	mov	r5, #0
   15c84:	str	r5, [r9, #4]
   15c88:	b	15b5c <__assert_fail@plt+0x4674>
   15c8c:	ldr	r1, [r9, #32]
   15c90:	cmp	r1, r8
   15c94:	bne	15ca0 <__assert_fail@plt+0x47b8>
   15c98:	cmn	r1, #100	; 0x64
   15c9c:	bne	15ccc <__assert_fail@plt+0x47e4>
   15ca0:	add	r0, r9, #60	; 0x3c
   15ca4:	bl	171b4 <__assert_fail@plt+0x5ccc>
   15ca8:	cmp	r0, #0
   15cac:	blt	15cb4 <__assert_fail@plt+0x47cc>
   15cb0:	bl	114ac <close@plt>
   15cb4:	str	r8, [r9, #32]
   15cb8:	b	15cc4 <__assert_fail@plt+0x47dc>
   15cbc:	mov	r0, r8
   15cc0:	bl	114ac <close@plt>
   15cc4:	ldr	r5, [r9, #4]
   15cc8:	b	15b5c <__assert_fail@plt+0x4674>
   15ccc:	bl	114a0 <abort@plt>
   15cd0:	push	{fp, lr}
   15cd4:	mov	fp, sp
   15cd8:	mov	r2, r1
   15cdc:	ldrd	r0, [r0, #8]
   15ce0:	mov	r3, #0
   15ce4:	bl	1a5a8 <__assert_fail@plt+0x90c0>
   15ce8:	mov	r0, r2
   15cec:	pop	{fp, pc}
   15cf0:	push	{r4, r5, fp, lr}
   15cf4:	add	fp, sp, #8
   15cf8:	ldrd	r2, [r1, #8]
   15cfc:	ldrd	r4, [r0, #8]
   15d00:	eor	r3, r5, r3
   15d04:	eor	r2, r4, r2
   15d08:	orrs	r2, r2, r3
   15d0c:	mov	r2, #0
   15d10:	bne	15d30 <__assert_fail@plt+0x4848>
   15d14:	ldrd	r2, [r1]
   15d18:	ldrd	r0, [r0]
   15d1c:	eor	r1, r1, r3
   15d20:	eor	r0, r0, r2
   15d24:	orr	r0, r0, r1
   15d28:	clz	r0, r0
   15d2c:	lsr	r2, r0, #5
   15d30:	mov	r0, r2
   15d34:	pop	{r4, r5, fp, pc}
   15d38:	push	{r4, r5, fp, lr}
   15d3c:	add	fp, sp, #8
   15d40:	ldr	r0, [r0]
   15d44:	ldrd	r2, [r0, #160]	; 0xa0
   15d48:	ldr	r0, [r1]
   15d4c:	ldrd	r4, [r0, #160]	; 0xa0
   15d50:	mov	r0, #0
   15d54:	subs	r1, r4, r2
   15d58:	sbcs	r1, r5, r3
   15d5c:	movwcc	r0, #1
   15d60:	subs	r1, r2, r4
   15d64:	sbcs	r1, r3, r5
   15d68:	subcc	r0, r0, #1
   15d6c:	pop	{r4, r5, fp, pc}
   15d70:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   15d74:	add	fp, sp, #24
   15d78:	sub	sp, sp, #96	; 0x60
   15d7c:	ldr	r7, [r0, #44]	; 0x2c
   15d80:	mov	r4, r0
   15d84:	mov	r5, #0
   15d88:	ldrb	r0, [r7, #49]	; 0x31
   15d8c:	tst	r0, #2
   15d90:	beq	15e8c <__assert_fail@plt+0x49a4>
   15d94:	ldr	r6, [r7, #52]	; 0x34
   15d98:	mov	r9, r1
   15d9c:	cmp	r6, #0
   15da0:	bne	15de0 <__assert_fail@plt+0x48f8>
   15da4:	movw	r0, #14948	; 0x3a64
   15da8:	movw	r2, #24216	; 0x5e98
   15dac:	movw	r3, #24248	; 0x5eb8
   15db0:	mov	r1, #0
   15db4:	mov	r8, #0
   15db8:	movt	r0, #1
   15dbc:	movt	r2, #1
   15dc0:	movt	r3, #1
   15dc4:	str	r0, [sp]
   15dc8:	mov	r0, #13
   15dcc:	bl	16360 <__assert_fail@plt+0x4e78>
   15dd0:	mov	r6, r0
   15dd4:	cmp	r0, #0
   15dd8:	str	r0, [r7, #52]	; 0x34
   15ddc:	beq	15e18 <__assert_fail@plt+0x4930>
   15de0:	ldrd	r0, [r4, #64]	; 0x40
   15de4:	str	r1, [sp, #12]
   15de8:	str	r0, [sp, #8]
   15dec:	add	r1, sp, #8
   15df0:	mov	r0, r6
   15df4:	bl	160b0 <__assert_fail@plt+0x4bc8>
   15df8:	cmp	r0, #0
   15dfc:	beq	15e08 <__assert_fail@plt+0x4920>
   15e00:	ldr	r5, [r0, #8]
   15e04:	b	15e8c <__assert_fail@plt+0x49a4>
   15e08:	mov	r8, #1
   15e0c:	cmp	r9, #0
   15e10:	bge	15e24 <__assert_fail@plt+0x493c>
   15e14:	b	15e8c <__assert_fail@plt+0x49a4>
   15e18:	mov	r6, #0
   15e1c:	cmp	r9, #0
   15e20:	blt	15e8c <__assert_fail@plt+0x49a4>
   15e24:	add	r1, sp, #8
   15e28:	mov	r0, r9
   15e2c:	bl	111c4 <fstatfs64@plt>
   15e30:	cmp	r0, #0
   15e34:	bne	15e8c <__assert_fail@plt+0x49a4>
   15e38:	cmp	r8, #0
   15e3c:	beq	15e88 <__assert_fail@plt+0x49a0>
   15e40:	mov	r0, #16
   15e44:	bl	19f00 <__assert_fail@plt+0x8a18>
   15e48:	cmp	r0, #0
   15e4c:	beq	15e88 <__assert_fail@plt+0x49a0>
   15e50:	mov	r5, r0
   15e54:	ldrd	r0, [r4, #64]	; 0x40
   15e58:	ldr	r2, [sp, #8]
   15e5c:	stm	r5, {r0, r1, r2}
   15e60:	mov	r0, r6
   15e64:	mov	r1, r5
   15e68:	bl	16ea4 <__assert_fail@plt+0x59bc>
   15e6c:	cmp	r0, #0
   15e70:	beq	15e80 <__assert_fail@plt+0x4998>
   15e74:	cmp	r0, r5
   15e78:	beq	15e88 <__assert_fail@plt+0x49a0>
   15e7c:	bl	114a0 <abort@plt>
   15e80:	mov	r0, r5
   15e84:	bl	13a64 <__assert_fail@plt+0x257c>
   15e88:	ldr	r5, [sp, #8]
   15e8c:	mov	r0, r5
   15e90:	sub	sp, fp, #24
   15e94:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   15e98:	push	{fp, lr}
   15e9c:	mov	fp, sp
   15ea0:	mov	r2, r1
   15ea4:	ldrd	r0, [r0]
   15ea8:	mov	r3, #0
   15eac:	bl	1a5a8 <__assert_fail@plt+0x90c0>
   15eb0:	mov	r0, r2
   15eb4:	pop	{fp, pc}
   15eb8:	ldrd	r2, [r1]
   15ebc:	ldrd	r0, [r0]
   15ec0:	eor	r1, r1, r3
   15ec4:	eor	r0, r0, r2
   15ec8:	orr	r0, r0, r1
   15ecc:	clz	r0, r0
   15ed0:	lsr	r0, r0, #5
   15ed4:	bx	lr
   15ed8:	ldr	r0, [r0, #8]
   15edc:	bx	lr
   15ee0:	ldr	r0, [r0, #12]
   15ee4:	bx	lr
   15ee8:	ldr	r0, [r0, #16]
   15eec:	bx	lr
   15ef0:	ldm	r0, {r2, ip}
   15ef4:	mov	r0, #0
   15ef8:	cmp	r2, ip
   15efc:	bxcs	lr
   15f00:	mov	r0, #0
   15f04:	ldr	r1, [r2]
   15f08:	cmp	r1, #0
   15f0c:	beq	15f30 <__assert_fail@plt+0x4a48>
   15f10:	mov	r3, #0
   15f14:	mov	r1, r2
   15f18:	ldr	r1, [r1, #4]
   15f1c:	add	r3, r3, #1
   15f20:	cmp	r1, #0
   15f24:	bne	15f18 <__assert_fail@plt+0x4a30>
   15f28:	cmp	r3, r0
   15f2c:	movhi	r0, r3
   15f30:	add	r2, r2, #8
   15f34:	cmp	r2, ip
   15f38:	bcc	15f04 <__assert_fail@plt+0x4a1c>
   15f3c:	bx	lr
   15f40:	push	{fp, lr}
   15f44:	mov	fp, sp
   15f48:	ldm	r0, {r3, ip}
   15f4c:	mov	lr, #0
   15f50:	mov	r1, #0
   15f54:	cmp	r3, ip
   15f58:	bcs	15f94 <__assert_fail@plt+0x4aac>
   15f5c:	mov	r1, #0
   15f60:	mov	lr, #0
   15f64:	ldr	r2, [r3]
   15f68:	cmp	r2, #0
   15f6c:	beq	15f88 <__assert_fail@plt+0x4aa0>
   15f70:	mov	r2, r3
   15f74:	ldr	r2, [r2, #4]
   15f78:	add	r1, r1, #1
   15f7c:	cmp	r2, #0
   15f80:	bne	15f74 <__assert_fail@plt+0x4a8c>
   15f84:	add	lr, lr, #1
   15f88:	add	r3, r3, #8
   15f8c:	cmp	r3, ip
   15f90:	bcc	15f64 <__assert_fail@plt+0x4a7c>
   15f94:	ldr	r2, [r0, #12]
   15f98:	cmp	lr, r2
   15f9c:	bne	15fb4 <__assert_fail@plt+0x4acc>
   15fa0:	ldr	r2, [r0, #16]
   15fa4:	mov	r0, #1
   15fa8:	cmp	r1, r2
   15fac:	movne	r0, #0
   15fb0:	pop	{fp, pc}
   15fb4:	mov	r0, #0
   15fb8:	pop	{fp, pc}
   15fbc:	nop	{0}
   15fc0:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   15fc4:	add	fp, sp, #24
   15fc8:	sub	sp, sp, #8
   15fcc:	ldr	r6, [r0]
   15fd0:	ldmib	r0, {r2, r7, r8}
   15fd4:	ldr	r3, [r0, #16]
   15fd8:	mov	r4, r1
   15fdc:	mov	r5, #0
   15fe0:	cmp	r6, r2
   15fe4:	bcs	16024 <__assert_fail@plt+0x4b3c>
   15fe8:	mov	r5, #0
   15fec:	ldr	r0, [r6]
   15ff0:	cmp	r0, #0
   15ff4:	beq	16018 <__assert_fail@plt+0x4b30>
   15ff8:	mov	r0, #0
   15ffc:	mov	r1, r6
   16000:	ldr	r1, [r1, #4]
   16004:	add	r0, r0, #1
   16008:	cmp	r1, #0
   1600c:	bne	16000 <__assert_fail@plt+0x4b18>
   16010:	cmp	r0, r5
   16014:	movhi	r5, r0
   16018:	add	r6, r6, #8
   1601c:	cmp	r6, r2
   16020:	bcc	15fec <__assert_fail@plt+0x4b04>
   16024:	movw	r2, #47248	; 0xb890
   16028:	mov	r0, r4
   1602c:	mov	r1, #1
   16030:	movt	r2, #1
   16034:	bl	113c8 <__fprintf_chk@plt>
   16038:	movw	r2, #47272	; 0xb8a8
   1603c:	mov	r0, r4
   16040:	mov	r1, #1
   16044:	mov	r3, r7
   16048:	movt	r2, #1
   1604c:	bl	113c8 <__fprintf_chk@plt>
   16050:	vldr	d16, [pc, #80]	; 160a8 <__assert_fail@plt+0x4bc0>
   16054:	vmov	s0, r8
   16058:	movw	r2, #47296	; 0xb8c0
   1605c:	mov	r0, r4
   16060:	mov	r1, #1
   16064:	mov	r3, r8
   16068:	vcvt.f64.u32	d17, s0
   1606c:	vmov	s0, r7
   16070:	movt	r2, #1
   16074:	vcvt.f64.u32	d18, s0
   16078:	vmul.f64	d16, d17, d16
   1607c:	vdiv.f64	d16, d16, d18
   16080:	vstr	d16, [sp]
   16084:	bl	113c8 <__fprintf_chk@plt>
   16088:	movw	r2, #47329	; 0xb8e1
   1608c:	mov	r0, r4
   16090:	mov	r1, #1
   16094:	mov	r3, r5
   16098:	movt	r2, #1
   1609c:	sub	sp, fp, #24
   160a0:	pop	{r4, r5, r6, r7, r8, sl, fp, lr}
   160a4:	b	113c8 <__fprintf_chk@plt>
   160a8:	andeq	r0, r0, r0
   160ac:	subsmi	r0, r9, r0
   160b0:	push	{r4, r5, r6, r7, fp, lr}
   160b4:	add	fp, sp, #16
   160b8:	mov	r4, r1
   160bc:	ldr	r1, [r0, #8]
   160c0:	ldr	r2, [r0, #24]
   160c4:	mov	r5, r0
   160c8:	mov	r0, r4
   160cc:	blx	r2
   160d0:	ldr	r1, [r5, #8]
   160d4:	cmp	r0, r1
   160d8:	bcs	16144 <__assert_fail@plt+0x4c5c>
   160dc:	ldr	r7, [r5]
   160e0:	mov	r6, #0
   160e4:	ldr	r1, [r7, r0, lsl #3]!
   160e8:	cmp	r1, #0
   160ec:	cmpne	r7, #0
   160f0:	bne	16100 <__assert_fail@plt+0x4c18>
   160f4:	mov	r0, r6
   160f8:	pop	{r4, r5, r6, r7, fp, pc}
   160fc:	ldr	r1, [r7]
   16100:	cmp	r1, r4
   16104:	beq	1612c <__assert_fail@plt+0x4c44>
   16108:	ldr	r2, [r5, #28]
   1610c:	mov	r0, r4
   16110:	blx	r2
   16114:	cmp	r0, #0
   16118:	bne	16138 <__assert_fail@plt+0x4c50>
   1611c:	ldr	r7, [r7, #4]
   16120:	cmp	r7, #0
   16124:	bne	160fc <__assert_fail@plt+0x4c14>
   16128:	b	160f4 <__assert_fail@plt+0x4c0c>
   1612c:	mov	r6, r4
   16130:	mov	r0, r6
   16134:	pop	{r4, r5, r6, r7, fp, pc}
   16138:	ldr	r6, [r7]
   1613c:	mov	r0, r6
   16140:	pop	{r4, r5, r6, r7, fp, pc}
   16144:	bl	114a0 <abort@plt>
   16148:	ldr	r1, [r0, #16]
   1614c:	cmp	r1, #0
   16150:	moveq	r0, #0
   16154:	bxeq	lr
   16158:	ldm	r0, {r1, r2}
   1615c:	cmp	r1, r2
   16160:	bcs	16178 <__assert_fail@plt+0x4c90>
   16164:	ldr	r0, [r1], #8
   16168:	cmp	r0, #0
   1616c:	bxne	lr
   16170:	cmp	r1, r2
   16174:	bcc	16164 <__assert_fail@plt+0x4c7c>
   16178:	push	{fp, lr}
   1617c:	mov	fp, sp
   16180:	bl	114a0 <abort@plt>
   16184:	push	{r4, r5, fp, lr}
   16188:	add	fp, sp, #8
   1618c:	mov	r5, r1
   16190:	ldr	r1, [r0, #8]
   16194:	ldr	r2, [r0, #24]
   16198:	mov	r4, r0
   1619c:	mov	r0, r5
   161a0:	blx	r2
   161a4:	ldr	r1, [r4, #8]
   161a8:	cmp	r0, r1
   161ac:	bcs	16208 <__assert_fail@plt+0x4d20>
   161b0:	ldr	r1, [r4]
   161b4:	add	r2, r1, r0, lsl #3
   161b8:	ldr	r3, [r2]
   161bc:	ldr	r2, [r2, #4]
   161c0:	cmp	r3, r5
   161c4:	beq	161d4 <__assert_fail@plt+0x4cec>
   161c8:	cmp	r2, #0
   161cc:	bne	161b8 <__assert_fail@plt+0x4cd0>
   161d0:	b	161e0 <__assert_fail@plt+0x4cf8>
   161d4:	cmp	r2, #0
   161d8:	ldrne	r0, [r2]
   161dc:	popne	{r4, r5, fp, pc}
   161e0:	ldr	r2, [r4, #4]
   161e4:	add	r0, r1, r0, lsl #3
   161e8:	add	r1, r0, #8
   161ec:	cmp	r1, r2
   161f0:	movcs	r0, #0
   161f4:	popcs	{r4, r5, fp, pc}
   161f8:	ldr	r0, [r1], #8
   161fc:	cmp	r0, #0
   16200:	popne	{r4, r5, fp, pc}
   16204:	b	161ec <__assert_fail@plt+0x4d04>
   16208:	bl	114a0 <abort@plt>
   1620c:	push	{r4, r5, fp, lr}
   16210:	add	fp, sp, #8
   16214:	ldm	r0, {r5, lr}
   16218:	mov	ip, r0
   1621c:	mov	r0, #0
   16220:	cmp	r5, lr
   16224:	bcs	16270 <__assert_fail@plt+0x4d88>
   16228:	mov	r0, #0
   1622c:	ldr	r3, [r5]
   16230:	cmp	r3, #0
   16234:	cmpne	r5, #0
   16238:	beq	16264 <__assert_fail@plt+0x4d7c>
   1623c:	mov	r3, r5
   16240:	cmp	r0, r2
   16244:	popcs	{r4, r5, fp, pc}
   16248:	ldr	r4, [r3]
   1624c:	str	r4, [r1, r0, lsl #2]
   16250:	add	r0, r0, #1
   16254:	ldr	r3, [r3, #4]
   16258:	cmp	r3, #0
   1625c:	bne	16240 <__assert_fail@plt+0x4d58>
   16260:	ldr	lr, [ip, #4]
   16264:	add	r5, r5, #8
   16268:	cmp	r5, lr
   1626c:	bcc	1622c <__assert_fail@plt+0x4d44>
   16270:	pop	{r4, r5, fp, pc}
   16274:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   16278:	add	fp, sp, #24
   1627c:	mov	r5, r1
   16280:	ldr	r4, [r0]
   16284:	ldr	r1, [r0, #4]
   16288:	mov	r6, #0
   1628c:	cmp	r4, r1
   16290:	bcs	16304 <__assert_fail@plt+0x4e1c>
   16294:	mov	r9, r2
   16298:	mov	r8, r0
   1629c:	mov	r6, #0
   162a0:	b	162e8 <__assert_fail@plt+0x4e00>
   162a4:	mov	r1, r9
   162a8:	blx	r5
   162ac:	cmp	r0, #0
   162b0:	beq	16304 <__assert_fail@plt+0x4e1c>
   162b4:	mov	r7, r4
   162b8:	ldr	r7, [r7, #4]
   162bc:	add	r6, r6, #1
   162c0:	cmp	r7, #0
   162c4:	beq	162e0 <__assert_fail@plt+0x4df8>
   162c8:	ldr	r0, [r7]
   162cc:	mov	r1, r9
   162d0:	blx	r5
   162d4:	cmp	r0, #0
   162d8:	bne	162b8 <__assert_fail@plt+0x4dd0>
   162dc:	b	16304 <__assert_fail@plt+0x4e1c>
   162e0:	ldr	r1, [r8, #4]
   162e4:	b	162f8 <__assert_fail@plt+0x4e10>
   162e8:	ldr	r0, [r4]
   162ec:	cmp	r0, #0
   162f0:	cmpne	r4, #0
   162f4:	bne	162a4 <__assert_fail@plt+0x4dbc>
   162f8:	add	r4, r4, #8
   162fc:	cmp	r4, r1
   16300:	bcc	162e8 <__assert_fail@plt+0x4e00>
   16304:	mov	r0, r6
   16308:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   1630c:	ldrb	r2, [r0]
   16310:	cmp	r2, #0
   16314:	moveq	r0, #0
   16318:	bxeq	lr
   1631c:	add	r3, r0, #1
   16320:	mov	r0, #0
   16324:	rsb	r0, r0, r0, lsl #5
   16328:	uxtab	r0, r0, r2
   1632c:	udiv	r2, r0, r1
   16330:	mls	r0, r2, r1, r0
   16334:	ldrb	r2, [r3], #1
   16338:	cmp	r2, #0
   1633c:	bne	16324 <__assert_fail@plt+0x4e3c>
   16340:	bx	lr
   16344:	movw	r1, #47360	; 0xb900
   16348:	movt	r1, #1
   1634c:	vld1.32	{d16-d17}, [r1]!
   16350:	ldr	r1, [r1]
   16354:	vst1.32	{d16-d17}, [r0]!
   16358:	str	r1, [r0]
   1635c:	bx	lr
   16360:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   16364:	add	fp, sp, #24
   16368:	movw	r9, #25992	; 0x6588
   1636c:	movw	r5, #25972	; 0x6574
   16370:	cmp	r3, #0
   16374:	mov	r6, r0
   16378:	mov	r0, #40	; 0x28
   1637c:	mov	r7, r1
   16380:	movt	r9, #1
   16384:	movt	r5, #1
   16388:	movne	r9, r3
   1638c:	cmp	r2, #0
   16390:	movne	r5, r2
   16394:	bl	19f00 <__assert_fail@plt+0x8a18>
   16398:	mov	r8, #0
   1639c:	cmp	r0, #0
   163a0:	beq	1655c <__assert_fail@plt+0x5074>
   163a4:	mov	r4, r0
   163a8:	movw	r0, #47360	; 0xb900
   163ac:	cmp	r7, #0
   163b0:	movt	r0, #1
   163b4:	moveq	r7, r0
   163b8:	cmp	r7, r0
   163bc:	str	r7, [r4, #20]
   163c0:	beq	1643c <__assert_fail@plt+0x4f54>
   163c4:	vldr	s2, [pc, #408]	; 16564 <__assert_fail@plt+0x507c>
   163c8:	vldr	s0, [r7, #8]
   163cc:	vcmpe.f32	s0, s2
   163d0:	vmrs	APSR_nzcv, fpscr
   163d4:	ble	164e8 <__assert_fail@plt+0x5000>
   163d8:	vldr	s4, [pc, #392]	; 16568 <__assert_fail@plt+0x5080>
   163dc:	vcmpe.f32	s0, s4
   163e0:	vmrs	APSR_nzcv, fpscr
   163e4:	bpl	164e8 <__assert_fail@plt+0x5000>
   163e8:	vldr	s4, [pc, #380]	; 1656c <__assert_fail@plt+0x5084>
   163ec:	vldr	s6, [r7, #12]
   163f0:	vcmpe.f32	s6, s4
   163f4:	vmrs	APSR_nzcv, fpscr
   163f8:	ble	164e8 <__assert_fail@plt+0x5000>
   163fc:	vldr	s4, [r7]
   16400:	vcmpe.f32	s4, #0.0
   16404:	vmrs	APSR_nzcv, fpscr
   16408:	blt	164e8 <__assert_fail@plt+0x5000>
   1640c:	vadd.f32	s2, s4, s2
   16410:	vcmpe.f32	s2, s0
   16414:	vmrs	APSR_nzcv, fpscr
   16418:	bpl	164e8 <__assert_fail@plt+0x5000>
   1641c:	vldr	s0, [r7, #4]
   16420:	vmov.f32	s4, #112	; 0x3f800000  1.0
   16424:	vcmpe.f32	s0, s4
   16428:	vmrs	APSR_nzcv, fpscr
   1642c:	bhi	164e8 <__assert_fail@plt+0x5000>
   16430:	vcmpe.f32	s2, s0
   16434:	vmrs	APSR_nzcv, fpscr
   16438:	bpl	164e8 <__assert_fail@plt+0x5000>
   1643c:	ldrb	r0, [r7, #16]
   16440:	cmp	r0, #0
   16444:	bne	16470 <__assert_fail@plt+0x4f88>
   16448:	vldr	s0, [r7, #8]
   1644c:	vldr	s4, [pc, #284]	; 16570 <__assert_fail@plt+0x5088>
   16450:	vmov	s2, r6
   16454:	vcvt.f32.u32	s2, s2
   16458:	vdiv.f32	s2, s2, s0
   1645c:	vcmpe.f32	s2, s4
   16460:	vcvt.u32.f32	s0, s2
   16464:	vmrs	APSR_nzcv, fpscr
   16468:	bge	164f8 <__assert_fail@plt+0x5010>
   1646c:	vmov	r6, s0
   16470:	cmp	r6, #10
   16474:	movls	r6, #10
   16478:	orr	r0, r6, #1
   1647c:	cmn	r0, #1
   16480:	beq	164f8 <__assert_fail@plt+0x5010>
   16484:	ldr	r6, [fp, #8]
   16488:	mov	r1, #3
   1648c:	cmp	r0, #10
   16490:	bcc	164c8 <__assert_fail@plt+0x4fe0>
   16494:	mov	r1, #3
   16498:	mov	r3, #9
   1649c:	mov	r2, #12
   164a0:	udiv	r7, r0, r1
   164a4:	mls	r7, r7, r1, r0
   164a8:	cmp	r7, #0
   164ac:	beq	164c8 <__assert_fail@plt+0x4fe0>
   164b0:	add	r3, r3, r2
   164b4:	add	r2, r2, #8
   164b8:	add	r1, r1, #2
   164bc:	add	r3, r3, #4
   164c0:	cmp	r3, r0
   164c4:	bcc	164a0 <__assert_fail@plt+0x4fb8>
   164c8:	udiv	r2, r0, r1
   164cc:	mls	r1, r2, r1, r0
   164d0:	cmp	r1, #0
   164d4:	bne	164f0 <__assert_fail@plt+0x5008>
   164d8:	add	r0, r0, #2
   164dc:	cmn	r0, #1
   164e0:	bne	16488 <__assert_fail@plt+0x4fa0>
   164e4:	b	164f8 <__assert_fail@plt+0x5010>
   164e8:	str	r0, [r4, #20]
   164ec:	b	16500 <__assert_fail@plt+0x5018>
   164f0:	cmp	r0, #536870912	; 0x20000000
   164f4:	bcc	16510 <__assert_fail@plt+0x5028>
   164f8:	mov	r0, #0
   164fc:	str	r0, [r4, #8]
   16500:	mov	r0, r4
   16504:	bl	13a64 <__assert_fail@plt+0x257c>
   16508:	mov	r0, r8
   1650c:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   16510:	cmp	r0, #0
   16514:	str	r0, [r4, #8]
   16518:	beq	16500 <__assert_fail@plt+0x5018>
   1651c:	mov	r1, #8
   16520:	bl	19eac <__assert_fail@plt+0x89c4>
   16524:	cmp	r0, #0
   16528:	str	r0, [r4]
   1652c:	beq	16500 <__assert_fail@plt+0x5018>
   16530:	mov	r1, #0
   16534:	mov	r8, r4
   16538:	str	r1, [r4, #12]
   1653c:	str	r1, [r4, #16]
   16540:	str	r5, [r4, #24]
   16544:	str	r9, [r4, #28]
   16548:	str	r6, [r4, #32]
   1654c:	str	r1, [r4, #36]	; 0x24
   16550:	ldr	r1, [r4, #8]
   16554:	add	r0, r0, r1, lsl #3
   16558:	str	r0, [r4, #4]
   1655c:	mov	r0, r8
   16560:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   16564:	stclcc	12, cr12, [ip, #820]	; 0x334
   16568:	svccc	0x00666666
   1656c:	svccc	0x008ccccd
   16570:	svcmi	0x00800000
   16574:	ror	r2, r0, #3
   16578:	udiv	r2, r2, r1
   1657c:	mul	r1, r2, r1
   16580:	rsb	r0, r1, r0, ror #3
   16584:	bx	lr
   16588:	sub	r0, r0, r1
   1658c:	clz	r0, r0
   16590:	lsr	r0, r0, #5
   16594:	bx	lr
   16598:	push	{r4, r5, r6, r7, fp, lr}
   1659c:	add	fp, sp, #16
   165a0:	mov	r4, r0
   165a4:	ldr	r5, [r0]
   165a8:	ldr	r0, [r0, #4]
   165ac:	cmp	r5, r0
   165b0:	bcs	16648 <__assert_fail@plt+0x5160>
   165b4:	mov	r6, #0
   165b8:	ldr	r1, [r5]
   165bc:	cmp	r1, #0
   165c0:	beq	1663c <__assert_fail@plt+0x5154>
   165c4:	ldr	r1, [r4, #32]
   165c8:	ldr	r7, [r5, #4]
   165cc:	cmp	r1, #0
   165d0:	mov	r0, r1
   165d4:	movwne	r0, #1
   165d8:	cmp	r7, #0
   165dc:	beq	16620 <__assert_fail@plt+0x5138>
   165e0:	tst	r0, #1
   165e4:	beq	165f4 <__assert_fail@plt+0x510c>
   165e8:	ldr	r0, [r7]
   165ec:	blx	r1
   165f0:	ldr	r1, [r4, #32]
   165f4:	str	r6, [r7]
   165f8:	cmp	r1, #0
   165fc:	ldr	r0, [r4, #36]	; 0x24
   16600:	ldr	r2, [r7, #4]
   16604:	str	r0, [r7, #4]
   16608:	mov	r0, r1
   1660c:	str	r7, [r4, #36]	; 0x24
   16610:	mov	r7, r2
   16614:	movwne	r0, #1
   16618:	cmp	r2, #0
   1661c:	bne	165e0 <__assert_fail@plt+0x50f8>
   16620:	cmp	r0, #0
   16624:	beq	16630 <__assert_fail@plt+0x5148>
   16628:	ldr	r0, [r5]
   1662c:	blx	r1
   16630:	str	r6, [r5]
   16634:	str	r6, [r5, #4]
   16638:	ldr	r0, [r4, #4]
   1663c:	add	r5, r5, #8
   16640:	cmp	r5, r0
   16644:	bcc	165b8 <__assert_fail@plt+0x50d0>
   16648:	mov	r0, #0
   1664c:	str	r0, [r4, #12]
   16650:	str	r0, [r4, #16]
   16654:	pop	{r4, r5, r6, r7, fp, pc}
   16658:	push	{r4, r5, r6, sl, fp, lr}
   1665c:	add	fp, sp, #16
   16660:	mov	r4, r0
   16664:	ldr	r0, [r0, #32]
   16668:	cmp	r0, #0
   1666c:	ldrne	r0, [r4, #16]
   16670:	cmpne	r0, #0
   16674:	beq	166dc <__assert_fail@plt+0x51f4>
   16678:	ldr	r5, [r4]
   1667c:	ldr	r1, [r4, #4]
   16680:	cmp	r5, r1
   16684:	bcc	16698 <__assert_fail@plt+0x51b0>
   16688:	b	166dc <__assert_fail@plt+0x51f4>
   1668c:	add	r5, r5, #8
   16690:	cmp	r5, r1
   16694:	bcs	166dc <__assert_fail@plt+0x51f4>
   16698:	ldr	r0, [r5]
   1669c:	cmp	r0, #0
   166a0:	cmpne	r5, #0
   166a4:	beq	1668c <__assert_fail@plt+0x51a4>
   166a8:	ldr	r1, [r4, #32]
   166ac:	blx	r1
   166b0:	ldr	r6, [r5, #4]
   166b4:	cmp	r6, #0
   166b8:	beq	166d4 <__assert_fail@plt+0x51ec>
   166bc:	ldr	r1, [r4, #32]
   166c0:	ldr	r0, [r6]
   166c4:	blx	r1
   166c8:	ldr	r6, [r6, #4]
   166cc:	cmp	r6, #0
   166d0:	bne	166bc <__assert_fail@plt+0x51d4>
   166d4:	ldr	r1, [r4, #4]
   166d8:	b	1668c <__assert_fail@plt+0x51a4>
   166dc:	ldr	r5, [r4]
   166e0:	ldr	r1, [r4, #4]
   166e4:	cmp	r5, r1
   166e8:	bcc	166fc <__assert_fail@plt+0x5214>
   166ec:	b	16724 <__assert_fail@plt+0x523c>
   166f0:	add	r5, r5, #8
   166f4:	cmp	r5, r1
   166f8:	bcs	16724 <__assert_fail@plt+0x523c>
   166fc:	ldr	r0, [r5, #4]
   16700:	cmp	r0, #0
   16704:	beq	166f0 <__assert_fail@plt+0x5208>
   16708:	ldr	r6, [r0, #4]
   1670c:	bl	13a64 <__assert_fail@plt+0x257c>
   16710:	cmp	r6, #0
   16714:	mov	r0, r6
   16718:	bne	16708 <__assert_fail@plt+0x5220>
   1671c:	ldr	r1, [r4, #4]
   16720:	b	166f0 <__assert_fail@plt+0x5208>
   16724:	ldr	r0, [r4, #36]	; 0x24
   16728:	cmp	r0, #0
   1672c:	beq	16744 <__assert_fail@plt+0x525c>
   16730:	ldr	r5, [r0, #4]
   16734:	bl	13a64 <__assert_fail@plt+0x257c>
   16738:	cmp	r5, #0
   1673c:	mov	r0, r5
   16740:	bne	16730 <__assert_fail@plt+0x5248>
   16744:	ldr	r0, [r4]
   16748:	bl	13a64 <__assert_fail@plt+0x257c>
   1674c:	mov	r0, r4
   16750:	pop	{r4, r5, r6, sl, fp, lr}
   16754:	b	13a64 <__assert_fail@plt+0x257c>
   16758:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1675c:	add	fp, sp, #28
   16760:	sub	sp, sp, #44	; 0x2c
   16764:	mov	r7, r0
   16768:	mov	r4, r0
   1676c:	ldr	r0, [r7, #20]!
   16770:	ldrb	r2, [r0, #16]
   16774:	cmp	r2, #0
   16778:	bne	167a8 <__assert_fail@plt+0x52c0>
   1677c:	vldr	s0, [r0, #8]
   16780:	vldr	s4, [pc, #560]	; 169b8 <__assert_fail@plt+0x54d0>
   16784:	vmov	s2, r1
   16788:	mov	r5, #0
   1678c:	vcvt.f32.u32	s2, s2
   16790:	vdiv.f32	s2, s2, s0
   16794:	vcmpe.f32	s2, s4
   16798:	vcvt.u32.f32	s0, s2
   1679c:	vmrs	APSR_nzcv, fpscr
   167a0:	bge	169a8 <__assert_fail@plt+0x54c0>
   167a4:	vmov	r1, s0
   167a8:	cmp	r1, #10
   167ac:	mov	r5, #0
   167b0:	movls	r1, #10
   167b4:	orr	r6, r1, #1
   167b8:	cmn	r6, #1
   167bc:	bne	167d0 <__assert_fail@plt+0x52e8>
   167c0:	b	169a8 <__assert_fail@plt+0x54c0>
   167c4:	add	r6, r6, #2
   167c8:	cmn	r6, #1
   167cc:	beq	169a8 <__assert_fail@plt+0x54c0>
   167d0:	mov	r0, #3
   167d4:	cmp	r6, #10
   167d8:	bcc	16810 <__assert_fail@plt+0x5328>
   167dc:	mov	r0, #3
   167e0:	mov	r2, #9
   167e4:	mov	r1, #12
   167e8:	udiv	r3, r6, r0
   167ec:	mls	r3, r3, r0, r6
   167f0:	cmp	r3, #0
   167f4:	beq	16810 <__assert_fail@plt+0x5328>
   167f8:	add	r2, r2, r1
   167fc:	add	r1, r1, #8
   16800:	add	r0, r0, #2
   16804:	add	r2, r2, #4
   16808:	cmp	r2, r6
   1680c:	bcc	167e8 <__assert_fail@plt+0x5300>
   16810:	udiv	r1, r6, r0
   16814:	mls	r0, r1, r0, r6
   16818:	cmp	r0, #0
   1681c:	beq	167c4 <__assert_fail@plt+0x52dc>
   16820:	sub	r0, r6, #1
   16824:	cmn	r0, #-536870910	; 0xe0000002
   16828:	bhi	169a8 <__assert_fail@plt+0x54c0>
   1682c:	ldr	r0, [r4, #8]
   16830:	cmp	r6, r0
   16834:	bne	16840 <__assert_fail@plt+0x5358>
   16838:	mov	r5, #1
   1683c:	b	169a8 <__assert_fail@plt+0x54c0>
   16840:	mov	r0, r6
   16844:	mov	r1, #8
   16848:	bl	19eac <__assert_fail@plt+0x89c4>
   1684c:	cmp	r0, #0
   16850:	str	r0, [sp, #4]
   16854:	beq	169a8 <__assert_fail@plt+0x54c0>
   16858:	mov	r1, #0
   1685c:	add	r0, r0, r6, lsl #3
   16860:	str	r6, [sp, #12]
   16864:	add	r5, sp, #4
   16868:	mov	sl, r4
   1686c:	mov	r2, #0
   16870:	str	r1, [sp, #16]
   16874:	str	r1, [sp, #20]
   16878:	str	r0, [sp, #8]
   1687c:	add	r0, r5, #20
   16880:	mov	r1, r4
   16884:	vld1.32	{d16-d17}, [r7]
   16888:	vst1.32	{d16-d17}, [r0]
   1688c:	ldr	r0, [sl, #36]!	; 0x24
   16890:	str	r0, [sp, #40]	; 0x28
   16894:	mov	r0, r5
   16898:	bl	169bc <__assert_fail@plt+0x54d4>
   1689c:	cmp	r0, #0
   168a0:	beq	168c8 <__assert_fail@plt+0x53e0>
   168a4:	ldr	r0, [r4]
   168a8:	bl	13a64 <__assert_fail@plt+0x257c>
   168ac:	mov	r0, #36	; 0x24
   168b0:	vld1.32	{d16-d17}, [r5], r0
   168b4:	vst1.32	{d16-d17}, [r4], r0
   168b8:	ldr	r0, [r5]
   168bc:	mov	r5, #1
   168c0:	str	r0, [r4]
   168c4:	b	169a8 <__assert_fail@plt+0x54c0>
   168c8:	ldr	r0, [sp, #40]	; 0x28
   168cc:	str	r0, [sl]
   168d0:	ldr	r0, [sp, #8]
   168d4:	ldr	r8, [sp, #4]
   168d8:	cmp	r8, r0
   168dc:	str	r0, [sp]
   168e0:	bcs	16984 <__assert_fail@plt+0x549c>
   168e4:	mov	r9, #0
   168e8:	ldr	r0, [r8]
   168ec:	cmp	r0, #0
   168f0:	beq	16974 <__assert_fail@plt+0x548c>
   168f4:	ldr	r6, [r8, #4]
   168f8:	cmp	r6, #0
   168fc:	beq	16970 <__assert_fail@plt+0x5488>
   16900:	ldr	r1, [r4, #8]
   16904:	ldr	r5, [r6]
   16908:	ldr	r2, [r4, #24]
   1690c:	mov	r0, r5
   16910:	blx	r2
   16914:	ldr	r1, [r4, #8]
   16918:	cmp	r0, r1
   1691c:	bcs	169b4 <__assert_fail@plt+0x54cc>
   16920:	ldr	r3, [r4]
   16924:	ldr	r2, [r6, #4]
   16928:	ldr	r7, [r3, r0, lsl #3]
   1692c:	cmp	r7, #0
   16930:	beq	16940 <__assert_fail@plt+0x5458>
   16934:	add	r0, r3, r0, lsl #3
   16938:	add	r0, r0, #4
   1693c:	b	16958 <__assert_fail@plt+0x5470>
   16940:	str	r5, [r3, r0, lsl #3]
   16944:	ldr	r0, [r4, #12]
   16948:	add	r0, r0, #1
   1694c:	str	r0, [r4, #12]
   16950:	mov	r0, sl
   16954:	str	r9, [r6]
   16958:	ldr	r3, [r0]
   1695c:	cmp	r2, #0
   16960:	str	r3, [r6, #4]
   16964:	str	r6, [r0]
   16968:	mov	r6, r2
   1696c:	bne	16904 <__assert_fail@plt+0x541c>
   16970:	str	r9, [r8, #4]
   16974:	ldr	r0, [sp]
   16978:	add	r8, r8, #8
   1697c:	cmp	r8, r0
   16980:	bcc	168e8 <__assert_fail@plt+0x5400>
   16984:	add	r1, sp, #4
   16988:	mov	r0, r4
   1698c:	mov	r2, #0
   16990:	mov	r5, #0
   16994:	bl	169bc <__assert_fail@plt+0x54d4>
   16998:	cmp	r0, #0
   1699c:	beq	169b4 <__assert_fail@plt+0x54cc>
   169a0:	ldr	r0, [sp, #4]
   169a4:	bl	13a64 <__assert_fail@plt+0x257c>
   169a8:	mov	r0, r5
   169ac:	sub	sp, fp, #28
   169b0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   169b4:	bl	114a0 <abort@plt>
   169b8:	svcmi	0x00800000
   169bc:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   169c0:	add	fp, sp, #28
   169c4:	sub	sp, sp, #12
   169c8:	ldr	sl, [r1]
   169cc:	str	r1, [sp, #8]
   169d0:	ldr	r1, [r1, #4]
   169d4:	mov	r7, r0
   169d8:	mov	r0, #1
   169dc:	str	r2, [sp, #4]
   169e0:	cmp	sl, r1
   169e4:	bcs	16b40 <__assert_fail@plt+0x5658>
   169e8:	add	r8, r7, #36	; 0x24
   169ec:	mov	r9, #0
   169f0:	ldr	r4, [sl]
   169f4:	cmp	r4, #0
   169f8:	beq	16b28 <__assert_fail@plt+0x5640>
   169fc:	ldr	r5, [sl, #4]
   16a00:	cmp	r5, #0
   16a04:	beq	16a7c <__assert_fail@plt+0x5594>
   16a08:	ldr	r1, [r7, #8]
   16a0c:	ldr	r4, [r5]
   16a10:	ldr	r2, [r7, #24]
   16a14:	mov	r0, r4
   16a18:	blx	r2
   16a1c:	ldr	r1, [r7, #8]
   16a20:	cmp	r0, r1
   16a24:	bcs	16b54 <__assert_fail@plt+0x566c>
   16a28:	ldr	r3, [r7]
   16a2c:	ldr	r2, [r5, #4]
   16a30:	ldr	r6, [r3, r0, lsl #3]
   16a34:	cmp	r6, #0
   16a38:	beq	16a48 <__assert_fail@plt+0x5560>
   16a3c:	add	r0, r3, r0, lsl #3
   16a40:	add	r0, r0, #4
   16a44:	b	16a60 <__assert_fail@plt+0x5578>
   16a48:	str	r4, [r3, r0, lsl #3]
   16a4c:	ldr	r0, [r7, #12]
   16a50:	add	r0, r0, #1
   16a54:	str	r0, [r7, #12]
   16a58:	mov	r0, r8
   16a5c:	str	r9, [r5]
   16a60:	ldr	r3, [r0]
   16a64:	cmp	r2, #0
   16a68:	str	r3, [r5, #4]
   16a6c:	str	r5, [r0]
   16a70:	mov	r5, r2
   16a74:	bne	16a0c <__assert_fail@plt+0x5524>
   16a78:	ldr	r4, [sl]
   16a7c:	ldr	r0, [sp, #4]
   16a80:	str	r9, [sl, #4]
   16a84:	cmp	r0, #0
   16a88:	bne	16b28 <__assert_fail@plt+0x5640>
   16a8c:	ldr	r1, [r7, #8]
   16a90:	ldr	r2, [r7, #24]
   16a94:	mov	r0, r4
   16a98:	blx	r2
   16a9c:	mov	r5, r0
   16aa0:	ldr	r0, [r7, #8]
   16aa4:	cmp	r5, r0
   16aa8:	bcs	16b54 <__assert_fail@plt+0x566c>
   16aac:	ldr	r6, [r7]
   16ab0:	ldr	r0, [r6, r5, lsl #3]
   16ab4:	cmp	r0, #0
   16ab8:	beq	16ad8 <__assert_fail@plt+0x55f0>
   16abc:	ldr	r0, [r8]
   16ac0:	cmp	r0, #0
   16ac4:	beq	16aec <__assert_fail@plt+0x5604>
   16ac8:	mov	r1, r0
   16acc:	ldr	r2, [r1, #4]!
   16ad0:	str	r2, [r8]
   16ad4:	b	16b00 <__assert_fail@plt+0x5618>
   16ad8:	str	r4, [r6, r5, lsl #3]
   16adc:	ldr	r0, [r7, #12]
   16ae0:	add	r0, r0, #1
   16ae4:	str	r0, [r7, #12]
   16ae8:	b	16b14 <__assert_fail@plt+0x562c>
   16aec:	mov	r0, #8
   16af0:	bl	19f00 <__assert_fail@plt+0x8a18>
   16af4:	cmp	r0, #0
   16af8:	beq	16b48 <__assert_fail@plt+0x5660>
   16afc:	add	r1, r0, #4
   16b00:	str	r4, [r0]
   16b04:	add	r2, r6, r5, lsl #3
   16b08:	ldr	r3, [r2, #4]
   16b0c:	str	r3, [r1]
   16b10:	str	r0, [r2, #4]
   16b14:	ldr	r1, [sp, #8]
   16b18:	str	r9, [sl]
   16b1c:	ldr	r0, [r1, #12]
   16b20:	sub	r0, r0, #1
   16b24:	str	r0, [r1, #12]
   16b28:	ldr	r0, [sp, #8]
   16b2c:	add	sl, sl, #8
   16b30:	ldr	r0, [r0, #4]
   16b34:	cmp	sl, r0
   16b38:	bcc	169f0 <__assert_fail@plt+0x5508>
   16b3c:	mov	r0, #1
   16b40:	sub	sp, fp, #28
   16b44:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   16b48:	mov	r0, #0
   16b4c:	sub	sp, fp, #28
   16b50:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   16b54:	bl	114a0 <abort@plt>
   16b58:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   16b5c:	add	fp, sp, #28
   16b60:	sub	sp, sp, #4
   16b64:	cmp	r1, #0
   16b68:	beq	16e8c <__assert_fail@plt+0x59a4>
   16b6c:	mov	r8, r2
   16b70:	mov	sl, r1
   16b74:	ldr	r1, [r0, #8]
   16b78:	ldr	r2, [r0, #24]
   16b7c:	mov	r4, r0
   16b80:	mov	r0, sl
   16b84:	blx	r2
   16b88:	mov	r7, r0
   16b8c:	ldr	r0, [r4, #8]
   16b90:	cmp	r7, r0
   16b94:	bcs	16e8c <__assert_fail@plt+0x59a4>
   16b98:	ldr	r5, [r4]
   16b9c:	mov	r9, r5
   16ba0:	ldr	r1, [r9, r7, lsl #3]!
   16ba4:	cmp	r1, #0
   16ba8:	beq	16c34 <__assert_fail@plt+0x574c>
   16bac:	cmp	r1, sl
   16bb0:	beq	16bdc <__assert_fail@plt+0x56f4>
   16bb4:	ldr	r2, [r4, #28]
   16bb8:	mov	r0, sl
   16bbc:	blx	r2
   16bc0:	cmp	r0, #0
   16bc4:	mov	r6, r9
   16bc8:	beq	16bf0 <__assert_fail@plt+0x5708>
   16bcc:	ldr	r0, [r6]
   16bd0:	cmp	r0, #0
   16bd4:	bne	16be0 <__assert_fail@plt+0x56f8>
   16bd8:	b	16c34 <__assert_fail@plt+0x574c>
   16bdc:	mov	r0, sl
   16be0:	cmp	r8, #0
   16be4:	mov	r7, #0
   16be8:	strne	r0, [r8]
   16bec:	b	16e28 <__assert_fail@plt+0x5940>
   16bf0:	add	r6, r5, r7, lsl #3
   16bf4:	ldr	r0, [r6, #4]!
   16bf8:	cmp	r0, #0
   16bfc:	beq	16c34 <__assert_fail@plt+0x574c>
   16c00:	ldr	r1, [r0]
   16c04:	cmp	r1, sl
   16c08:	beq	16c28 <__assert_fail@plt+0x5740>
   16c0c:	ldr	r2, [r4, #28]
   16c10:	mov	r0, sl
   16c14:	blx	r2
   16c18:	ldr	r6, [r6]
   16c1c:	cmp	r0, #0
   16c20:	beq	16bf4 <__assert_fail@plt+0x570c>
   16c24:	b	16bcc <__assert_fail@plt+0x56e4>
   16c28:	mov	r0, sl
   16c2c:	cmp	r0, #0
   16c30:	bne	16be0 <__assert_fail@plt+0x56f8>
   16c34:	vldr	s0, [r4, #8]
   16c38:	vldr	s2, [r4, #12]
   16c3c:	ldr	r0, [r4, #20]
   16c40:	vcvt.f32.u32	s0, s0
   16c44:	vcvt.f32.u32	s4, s2
   16c48:	vldr	s2, [r0, #8]
   16c4c:	vmul.f32	s6, s2, s0
   16c50:	vcmpe.f32	s6, s4
   16c54:	vmrs	APSR_nzcv, fpscr
   16c58:	bpl	16dac <__assert_fail@plt+0x58c4>
   16c5c:	movw	r1, #47360	; 0xb900
   16c60:	movt	r1, #1
   16c64:	cmp	r0, r1
   16c68:	beq	16cf4 <__assert_fail@plt+0x580c>
   16c6c:	vldr	s6, [pc, #540]	; 16e90 <__assert_fail@plt+0x59a8>
   16c70:	vcmpe.f32	s2, s6
   16c74:	vmrs	APSR_nzcv, fpscr
   16c78:	ble	16ce0 <__assert_fail@plt+0x57f8>
   16c7c:	vldr	s8, [pc, #528]	; 16e94 <__assert_fail@plt+0x59ac>
   16c80:	vcmpe.f32	s2, s8
   16c84:	vmrs	APSR_nzcv, fpscr
   16c88:	bpl	16ce0 <__assert_fail@plt+0x57f8>
   16c8c:	vldr	s8, [pc, #516]	; 16e98 <__assert_fail@plt+0x59b0>
   16c90:	vldr	s10, [r0, #12]
   16c94:	vcmpe.f32	s10, s8
   16c98:	vmrs	APSR_nzcv, fpscr
   16c9c:	ble	16ce0 <__assert_fail@plt+0x57f8>
   16ca0:	vldr	s8, [r0]
   16ca4:	vcmpe.f32	s8, #0.0
   16ca8:	vmrs	APSR_nzcv, fpscr
   16cac:	blt	16ce0 <__assert_fail@plt+0x57f8>
   16cb0:	vadd.f32	s6, s8, s6
   16cb4:	vcmpe.f32	s6, s2
   16cb8:	vmrs	APSR_nzcv, fpscr
   16cbc:	bpl	16ce0 <__assert_fail@plt+0x57f8>
   16cc0:	vldr	s8, [r0, #4]
   16cc4:	vmov.f32	s10, #112	; 0x3f800000  1.0
   16cc8:	vcmpe.f32	s8, s10
   16ccc:	vmrs	APSR_nzcv, fpscr
   16cd0:	bhi	16ce0 <__assert_fail@plt+0x57f8>
   16cd4:	vcmpe.f32	s6, s8
   16cd8:	vmrs	APSR_nzcv, fpscr
   16cdc:	bmi	16cf8 <__assert_fail@plt+0x5810>
   16ce0:	vldr	s2, [pc, #436]	; 16e9c <__assert_fail@plt+0x59b4>
   16ce4:	movw	r0, #47360	; 0xb900
   16ce8:	movt	r0, #1
   16cec:	str	r0, [r4, #20]
   16cf0:	b	16cf8 <__assert_fail@plt+0x5810>
   16cf4:	mov	r0, r1
   16cf8:	vmul.f32	s6, s2, s0
   16cfc:	vcmpe.f32	s6, s4
   16d00:	vmrs	APSR_nzcv, fpscr
   16d04:	bpl	16dac <__assert_fail@plt+0x58c4>
   16d08:	vldr	s4, [r0, #12]
   16d0c:	ldrb	r0, [r0, #16]
   16d10:	mvn	r7, #0
   16d14:	vmul.f32	s0, s4, s0
   16d18:	vldr	s4, [pc, #384]	; 16ea0 <__assert_fail@plt+0x59b8>
   16d1c:	cmp	r0, #0
   16d20:	vmul.f32	s2, s2, s0
   16d24:	vseleq.f32	s0, s2, s0
   16d28:	vcmpe.f32	s0, s4
   16d2c:	vmrs	APSR_nzcv, fpscr
   16d30:	bge	16e28 <__assert_fail@plt+0x5940>
   16d34:	vcvt.u32.f32	s0, s0
   16d38:	mov	r0, r4
   16d3c:	vmov	r1, s0
   16d40:	bl	16758 <__assert_fail@plt+0x5270>
   16d44:	cmp	r0, #0
   16d48:	beq	16e28 <__assert_fail@plt+0x5940>
   16d4c:	ldr	r1, [r4, #8]
   16d50:	ldr	r2, [r4, #24]
   16d54:	mov	r0, sl
   16d58:	blx	r2
   16d5c:	mov	r7, r0
   16d60:	ldr	r0, [r4, #8]
   16d64:	cmp	r7, r0
   16d68:	bcs	16e8c <__assert_fail@plt+0x59a4>
   16d6c:	ldr	r5, [r4]
   16d70:	mov	r9, r5
   16d74:	ldr	r1, [r9, r7, lsl #3]!
   16d78:	cmp	r1, #0
   16d7c:	beq	16dd4 <__assert_fail@plt+0x58ec>
   16d80:	cmp	r1, sl
   16d84:	mov	r0, sl
   16d88:	beq	16da4 <__assert_fail@plt+0x58bc>
   16d8c:	ldr	r2, [r4, #28]
   16d90:	mov	r0, sl
   16d94:	blx	r2
   16d98:	cmp	r0, #0
   16d9c:	beq	16e3c <__assert_fail@plt+0x5954>
   16da0:	ldr	r0, [r9]
   16da4:	cmp	r0, #0
   16da8:	bne	16e8c <__assert_fail@plt+0x59a4>
   16dac:	ldr	r0, [r9]
   16db0:	cmp	r0, #0
   16db4:	beq	16dd4 <__assert_fail@plt+0x58ec>
   16db8:	ldr	r0, [r4, #36]	; 0x24
   16dbc:	cmp	r0, #0
   16dc0:	beq	16df4 <__assert_fail@plt+0x590c>
   16dc4:	mov	r1, r0
   16dc8:	ldr	r2, [r1, #4]!
   16dcc:	str	r2, [r4, #36]	; 0x24
   16dd0:	b	16e08 <__assert_fail@plt+0x5920>
   16dd4:	str	sl, [r9]
   16dd8:	ldr	r0, [r4, #12]
   16ddc:	ldr	r1, [r4, #16]
   16de0:	add	r0, r0, #1
   16de4:	add	r1, r1, #1
   16de8:	str	r0, [r4, #12]
   16dec:	str	r1, [r4, #16]
   16df0:	b	16e24 <__assert_fail@plt+0x593c>
   16df4:	mov	r0, #8
   16df8:	bl	19f00 <__assert_fail@plt+0x8a18>
   16dfc:	cmp	r0, #0
   16e00:	beq	16e34 <__assert_fail@plt+0x594c>
   16e04:	add	r1, r0, #4
   16e08:	str	sl, [r0]
   16e0c:	ldr	r2, [r9, #4]
   16e10:	str	r2, [r1]
   16e14:	str	r0, [r9, #4]
   16e18:	ldr	r0, [r4, #16]
   16e1c:	add	r0, r0, #1
   16e20:	str	r0, [r4, #16]
   16e24:	mov	r7, #1
   16e28:	mov	r0, r7
   16e2c:	sub	sp, fp, #28
   16e30:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   16e34:	mvn	r7, #0
   16e38:	b	16e28 <__assert_fail@plt+0x5940>
   16e3c:	add	r6, r5, r7, lsl #3
   16e40:	ldr	r0, [r6, #4]!
   16e44:	cmp	r0, #0
   16e48:	beq	16dac <__assert_fail@plt+0x58c4>
   16e4c:	ldr	r1, [r0]
   16e50:	cmp	r1, sl
   16e54:	beq	16e80 <__assert_fail@plt+0x5998>
   16e58:	ldr	r2, [r4, #28]
   16e5c:	mov	r0, sl
   16e60:	blx	r2
   16e64:	ldr	r6, [r6]
   16e68:	cmp	r0, #0
   16e6c:	beq	16e40 <__assert_fail@plt+0x5958>
   16e70:	ldr	r0, [r6]
   16e74:	cmp	r0, #0
   16e78:	beq	16dac <__assert_fail@plt+0x58c4>
   16e7c:	b	16e8c <__assert_fail@plt+0x59a4>
   16e80:	mov	r0, sl
   16e84:	cmp	r0, #0
   16e88:	beq	16dac <__assert_fail@plt+0x58c4>
   16e8c:	bl	114a0 <abort@plt>
   16e90:	stclcc	12, cr12, [ip, #820]	; 0x334
   16e94:	svccc	0x00666666
   16e98:	svccc	0x008ccccd
   16e9c:	svccc	0x004ccccd
   16ea0:	svcmi	0x00800000
   16ea4:	push	{r4, sl, fp, lr}
   16ea8:	add	fp, sp, #8
   16eac:	sub	sp, sp, #8
   16eb0:	add	r2, sp, #4
   16eb4:	mov	r4, r1
   16eb8:	bl	16b58 <__assert_fail@plt+0x5670>
   16ebc:	cmn	r0, #1
   16ec0:	beq	16ed4 <__assert_fail@plt+0x59ec>
   16ec4:	ldr	r1, [sp, #4]
   16ec8:	cmp	r0, #0
   16ecc:	moveq	r4, r1
   16ed0:	b	16ed8 <__assert_fail@plt+0x59f0>
   16ed4:	mov	r4, #0
   16ed8:	mov	r0, r4
   16edc:	sub	sp, fp, #8
   16ee0:	pop	{r4, sl, fp, pc}
   16ee4:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   16ee8:	add	fp, sp, #24
   16eec:	mov	r9, r1
   16ef0:	ldr	r1, [r0, #8]
   16ef4:	ldr	r2, [r0, #24]
   16ef8:	mov	r5, r0
   16efc:	mov	r0, r9
   16f00:	blx	r2
   16f04:	mov	r7, r0
   16f08:	ldr	r0, [r5, #8]
   16f0c:	cmp	r7, r0
   16f10:	bcs	17170 <__assert_fail@plt+0x5c88>
   16f14:	ldr	r6, [r5]
   16f18:	mov	r8, #0
   16f1c:	mov	r4, r6
   16f20:	ldr	r1, [r4, r7, lsl #3]!
   16f24:	cmp	r1, #0
   16f28:	beq	16fdc <__assert_fail@plt+0x5af4>
   16f2c:	cmp	r1, r9
   16f30:	beq	16f4c <__assert_fail@plt+0x5a64>
   16f34:	ldr	r2, [r5, #28]
   16f38:	mov	r0, r9
   16f3c:	blx	r2
   16f40:	cmp	r0, #0
   16f44:	beq	16f84 <__assert_fail@plt+0x5a9c>
   16f48:	ldr	r9, [r4]
   16f4c:	add	r0, r6, r7, lsl #3
   16f50:	ldr	r0, [r0, #4]
   16f54:	cmp	r0, #0
   16f58:	beq	16fcc <__assert_fail@plt+0x5ae4>
   16f5c:	ldm	r0, {r1, r2}
   16f60:	stm	r4, {r1, r2}
   16f64:	mov	r1, #0
   16f68:	str	r1, [r0]
   16f6c:	ldr	r1, [r5, #36]	; 0x24
   16f70:	str	r1, [r0, #4]
   16f74:	str	r0, [r5, #36]	; 0x24
   16f78:	cmp	r9, #0
   16f7c:	bne	17014 <__assert_fail@plt+0x5b2c>
   16f80:	b	16fdc <__assert_fail@plt+0x5af4>
   16f84:	add	r7, r6, r7, lsl #3
   16f88:	ldr	r0, [r7, #4]!
   16f8c:	cmp	r0, #0
   16f90:	beq	16fdc <__assert_fail@plt+0x5af4>
   16f94:	ldr	r1, [r0]
   16f98:	cmp	r1, r9
   16f9c:	beq	16fe4 <__assert_fail@plt+0x5afc>
   16fa0:	ldr	r2, [r5, #28]
   16fa4:	mov	r0, r9
   16fa8:	blx	r2
   16fac:	ldr	r1, [r7]
   16fb0:	cmp	r0, #0
   16fb4:	bne	16fec <__assert_fail@plt+0x5b04>
   16fb8:	ldr	r0, [r1, #4]!
   16fbc:	cmp	r0, #0
   16fc0:	mov	r7, r1
   16fc4:	bne	16f94 <__assert_fail@plt+0x5aac>
   16fc8:	b	16fdc <__assert_fail@plt+0x5af4>
   16fcc:	mov	r0, #0
   16fd0:	str	r0, [r4]
   16fd4:	cmp	r9, #0
   16fd8:	bne	17014 <__assert_fail@plt+0x5b2c>
   16fdc:	mov	r0, r8
   16fe0:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   16fe4:	mov	r1, r0
   16fe8:	b	16ff0 <__assert_fail@plt+0x5b08>
   16fec:	ldr	r9, [r1]
   16ff0:	ldr	r0, [r1, #4]
   16ff4:	str	r0, [r7]
   16ff8:	mov	r0, #0
   16ffc:	str	r0, [r1]
   17000:	ldr	r0, [r5, #36]	; 0x24
   17004:	str	r0, [r1, #4]
   17008:	str	r1, [r5, #36]	; 0x24
   1700c:	cmp	r9, #0
   17010:	beq	16fdc <__assert_fail@plt+0x5af4>
   17014:	ldr	r0, [r5, #16]
   17018:	sub	r0, r0, #1
   1701c:	str	r0, [r5, #16]
   17020:	ldr	r0, [r4]
   17024:	cmp	r0, #0
   17028:	bne	17130 <__assert_fail@plt+0x5c48>
   1702c:	ldr	r0, [r5, #12]
   17030:	vldr	s0, [r5, #8]
   17034:	sub	r1, r0, #1
   17038:	str	r1, [r5, #12]
   1703c:	vmov	s2, r1
   17040:	ldr	r0, [r5, #20]
   17044:	vcvt.f32.u32	s0, s0
   17048:	vcvt.f32.u32	s2, s2
   1704c:	vldr	s4, [r0]
   17050:	vmul.f32	s6, s4, s0
   17054:	vcmpe.f32	s6, s2
   17058:	vmrs	APSR_nzcv, fpscr
   1705c:	ble	17130 <__assert_fail@plt+0x5c48>
   17060:	movw	r1, #47360	; 0xb900
   17064:	movt	r1, #1
   17068:	cmp	r0, r1
   1706c:	beq	170c4 <__assert_fail@plt+0x5bdc>
   17070:	vldr	s8, [pc, #252]	; 17174 <__assert_fail@plt+0x5c8c>
   17074:	vldr	s6, [r0, #8]
   17078:	vcmpe.f32	s6, s8
   1707c:	vmrs	APSR_nzcv, fpscr
   17080:	ble	170b0 <__assert_fail@plt+0x5bc8>
   17084:	vldr	s10, [pc, #236]	; 17178 <__assert_fail@plt+0x5c90>
   17088:	vcmpe.f32	s6, s10
   1708c:	vmrs	APSR_nzcv, fpscr
   17090:	bpl	170b0 <__assert_fail@plt+0x5bc8>
   17094:	vcmpe.f32	s4, #0.0
   17098:	vmrs	APSR_nzcv, fpscr
   1709c:	vldrge	s10, [r0, #12]
   170a0:	vldrge	s12, [pc, #212]	; 1717c <__assert_fail@plt+0x5c94>
   170a4:	vcmpege.f32	s10, s12
   170a8:	vmrsge	APSR_nzcv, fpscr
   170ac:	bgt	1713c <__assert_fail@plt+0x5c54>
   170b0:	vldr	s4, [pc, #200]	; 17180 <__assert_fail@plt+0x5c98>
   170b4:	movw	r0, #47360	; 0xb900
   170b8:	movt	r0, #1
   170bc:	str	r0, [r5, #20]
   170c0:	b	170c8 <__assert_fail@plt+0x5be0>
   170c4:	mov	r0, r1
   170c8:	vmul.f32	s4, s4, s0
   170cc:	vcmpe.f32	s4, s2
   170d0:	vmrs	APSR_nzcv, fpscr
   170d4:	ble	17130 <__assert_fail@plt+0x5c48>
   170d8:	ldrb	r1, [r0, #16]
   170dc:	vldr	s2, [r0, #4]
   170e0:	cmp	r1, #0
   170e4:	vmul.f32	s0, s2, s0
   170e8:	vldreq	s2, [r0, #8]
   170ec:	mov	r0, r5
   170f0:	vmuleq.f32	s0, s0, s2
   170f4:	vcvt.u32.f32	s0, s0
   170f8:	vmov	r1, s0
   170fc:	bl	16758 <__assert_fail@plt+0x5270>
   17100:	cmp	r0, #0
   17104:	bne	17130 <__assert_fail@plt+0x5c48>
   17108:	ldr	r0, [r5, #36]	; 0x24
   1710c:	cmp	r0, #0
   17110:	beq	17128 <__assert_fail@plt+0x5c40>
   17114:	ldr	r4, [r0, #4]
   17118:	bl	13a64 <__assert_fail@plt+0x257c>
   1711c:	cmp	r4, #0
   17120:	mov	r0, r4
   17124:	bne	17114 <__assert_fail@plt+0x5c2c>
   17128:	mov	r0, #0
   1712c:	str	r0, [r5, #36]	; 0x24
   17130:	mov	r8, r9
   17134:	mov	r0, r8
   17138:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   1713c:	vadd.f32	s8, s4, s8
   17140:	vcmpe.f32	s8, s6
   17144:	vmrs	APSR_nzcv, fpscr
   17148:	bpl	170b0 <__assert_fail@plt+0x5bc8>
   1714c:	vldr	s6, [r0, #4]
   17150:	vmov.f32	s10, #112	; 0x3f800000  1.0
   17154:	vcmpe.f32	s6, s10
   17158:	vmrs	APSR_nzcv, fpscr
   1715c:	bhi	170b0 <__assert_fail@plt+0x5bc8>
   17160:	vcmpe.f32	s8, s6
   17164:	vmrs	APSR_nzcv, fpscr
   17168:	bmi	170c8 <__assert_fail@plt+0x5be0>
   1716c:	b	170b0 <__assert_fail@plt+0x5bc8>
   17170:	bl	114a0 <abort@plt>
   17174:	stclcc	12, cr12, [ip, #820]	; 0x334
   17178:	svccc	0x00666666
   1717c:	svccc	0x008ccccd
   17180:	andeq	r0, r0, r0
   17184:	b	16ee4 <__assert_fail@plt+0x59fc>
   17188:	mov	r3, #1
   1718c:	mov	r2, #0
   17190:	vdup.32	q8, r1
   17194:	strb	r3, [r0, #28]
   17198:	str	r2, [r0, #20]
   1719c:	str	r2, [r0, #24]
   171a0:	vst1.32	{d16-d17}, [r0]!
   171a4:	str	r1, [r0]
   171a8:	bx	lr
   171ac:	ldrb	r0, [r0, #28]
   171b0:	bx	lr
   171b4:	push	{fp, lr}
   171b8:	mov	fp, sp
   171bc:	ldrb	r3, [r0, #28]
   171c0:	ldr	r2, [r0, #20]
   171c4:	eor	lr, r3, #1
   171c8:	add	r2, r2, lr
   171cc:	and	r3, r2, #3
   171d0:	ldr	ip, [r0, r3, lsl #2]
   171d4:	str	r1, [r0, r3, lsl #2]
   171d8:	str	r3, [r0, #20]
   171dc:	ldr	r1, [r0, #24]
   171e0:	cmp	r3, r1
   171e4:	addeq	r1, r2, lr
   171e8:	andeq	r1, r1, #3
   171ec:	streq	r1, [r0, #24]
   171f0:	mov	r1, #0
   171f4:	strb	r1, [r0, #28]
   171f8:	mov	r0, ip
   171fc:	pop	{fp, pc}
   17200:	ldrb	r1, [r0, #28]
   17204:	cmp	r1, #0
   17208:	bne	1724c <__assert_fail@plt+0x5d64>
   1720c:	ldr	r3, [r0, #20]
   17210:	ldr	r2, [r0, #16]
   17214:	ldr	r1, [r0, r3, lsl #2]
   17218:	str	r2, [r0, r3, lsl #2]
   1721c:	ldr	r2, [r0, #20]
   17220:	ldr	r3, [r0, #24]
   17224:	cmp	r2, r3
   17228:	moveq	r2, #1
   1722c:	strbeq	r2, [r0, #28]
   17230:	moveq	r0, r1
   17234:	bxeq	lr
   17238:	sub	r2, r2, #1
   1723c:	and	r2, r2, #3
   17240:	str	r2, [r0, #20]
   17244:	mov	r0, r1
   17248:	bx	lr
   1724c:	push	{fp, lr}
   17250:	mov	fp, sp
   17254:	bl	114a0 <abort@plt>
   17258:	sub	sp, sp, #4
   1725c:	push	{fp, lr}
   17260:	mov	fp, sp
   17264:	sub	sp, sp, #4
   17268:	str	r3, [fp, #8]
   1726c:	mov	r3, #0
   17270:	tst	r2, #64	; 0x40
   17274:	addne	r3, fp, #8
   17278:	addne	r3, r3, #4
   1727c:	strne	r3, [sp]
   17280:	ldrne	r3, [fp, #8]
   17284:	bl	11380 <openat64@plt>
   17288:	bl	190bc <__assert_fail@plt+0x7bd4>
   1728c:	mov	sp, fp
   17290:	pop	{fp, lr}
   17294:	add	sp, sp, #4
   17298:	bx	lr
   1729c:	push	{r4, r5, r6, sl, fp, lr}
   172a0:	add	fp, sp, #16
   172a4:	orr	r2, r2, #18688	; 0x4900
   172a8:	mov	r4, r3
   172ac:	orr	r2, r2, #524288	; 0x80000
   172b0:	bl	17258 <__assert_fail@plt+0x5d70>
   172b4:	mov	r5, r0
   172b8:	mov	r0, #0
   172bc:	cmp	r5, #0
   172c0:	poplt	{r4, r5, r6, sl, fp, pc}
   172c4:	mov	r0, r5
   172c8:	bl	11440 <fdopendir@plt>
   172cc:	cmp	r0, #0
   172d0:	strne	r5, [r4]
   172d4:	popne	{r4, r5, r6, sl, fp, pc}
   172d8:	bl	1138c <__errno_location@plt>
   172dc:	ldr	r6, [r0]
   172e0:	mov	r4, r0
   172e4:	mov	r0, r5
   172e8:	bl	114ac <close@plt>
   172ec:	mov	r0, #0
   172f0:	str	r6, [r4]
   172f4:	pop	{r4, r5, r6, sl, fp, pc}
   172f8:	push	{r4, r5, fp, lr}
   172fc:	add	fp, sp, #8
   17300:	cmp	r0, #0
   17304:	beq	17398 <__assert_fail@plt+0x5eb0>
   17308:	mov	r1, #47	; 0x2f
   1730c:	mov	r4, r0
   17310:	bl	1141c <strrchr@plt>
   17314:	cmp	r0, #0
   17318:	mov	r5, r4
   1731c:	addne	r5, r0, #1
   17320:	sub	r0, r5, r4
   17324:	cmp	r0, #7
   17328:	blt	1737c <__assert_fail@plt+0x5e94>
   1732c:	movw	r1, #47436	; 0xb94c
   17330:	sub	r0, r5, #7
   17334:	mov	r2, #7
   17338:	movt	r1, #1
   1733c:	bl	11494 <strncmp@plt>
   17340:	cmp	r0, #0
   17344:	bne	1737c <__assert_fail@plt+0x5e94>
   17348:	movw	r1, #47444	; 0xb954
   1734c:	mov	r0, r5
   17350:	mov	r2, #3
   17354:	movt	r1, #1
   17358:	bl	11494 <strncmp@plt>
   1735c:	cmp	r0, #0
   17360:	beq	1736c <__assert_fail@plt+0x5e84>
   17364:	mov	r4, r5
   17368:	b	1737c <__assert_fail@plt+0x5e94>
   1736c:	movw	r0, #49528	; 0xc178
   17370:	add	r4, r5, #3
   17374:	movt	r0, #2
   17378:	str	r4, [r0]
   1737c:	movw	r0, #49532	; 0xc17c
   17380:	movt	r0, #2
   17384:	str	r4, [r0]
   17388:	movw	r0, #49596	; 0xc1bc
   1738c:	movt	r0, #2
   17390:	str	r4, [r0]
   17394:	pop	{r4, r5, fp, pc}
   17398:	movw	r0, #49544	; 0xc188
   1739c:	mov	r1, #55	; 0x37
   173a0:	mov	r2, #1
   173a4:	movt	r0, #2
   173a8:	ldr	r3, [r0]
   173ac:	movw	r0, #47380	; 0xb914
   173b0:	movt	r0, #1
   173b4:	bl	112cc <fwrite@plt>
   173b8:	bl	114a0 <abort@plt>
   173bc:	push	{r4, r5, r6, sl, fp, lr}
   173c0:	add	fp, sp, #16
   173c4:	mov	r4, r0
   173c8:	movw	r0, #49600	; 0xc1c0
   173cc:	movt	r0, #2
   173d0:	cmp	r4, #0
   173d4:	moveq	r4, r0
   173d8:	bl	1138c <__errno_location@plt>
   173dc:	ldr	r6, [r0]
   173e0:	mov	r5, r0
   173e4:	mov	r0, r4
   173e8:	mov	r1, #48	; 0x30
   173ec:	bl	19c70 <__assert_fail@plt+0x8788>
   173f0:	str	r6, [r5]
   173f4:	pop	{r4, r5, r6, sl, fp, pc}
   173f8:	movw	r1, #49600	; 0xc1c0
   173fc:	cmp	r0, #0
   17400:	movt	r1, #2
   17404:	movne	r1, r0
   17408:	ldr	r0, [r1]
   1740c:	bx	lr
   17410:	movw	r2, #49600	; 0xc1c0
   17414:	cmp	r0, #0
   17418:	movt	r2, #2
   1741c:	movne	r2, r0
   17420:	str	r1, [r2]
   17424:	bx	lr
   17428:	movw	r3, #49600	; 0xc1c0
   1742c:	cmp	r0, #0
   17430:	movt	r3, #2
   17434:	movne	r3, r0
   17438:	ubfx	r0, r1, #5, #3
   1743c:	and	r1, r1, #31
   17440:	add	r0, r3, r0, lsl #2
   17444:	ldr	r3, [r0, #8]
   17448:	eor	r2, r2, r3, lsr r1
   1744c:	and	r2, r2, #1
   17450:	eor	r2, r3, r2, lsl r1
   17454:	str	r2, [r0, #8]
   17458:	mov	r0, #1
   1745c:	and	r0, r0, r3, lsr r1
   17460:	bx	lr
   17464:	movw	r2, #49600	; 0xc1c0
   17468:	cmp	r0, #0
   1746c:	movt	r2, #2
   17470:	movne	r2, r0
   17474:	ldr	r0, [r2, #4]
   17478:	str	r1, [r2, #4]
   1747c:	bx	lr
   17480:	movw	r3, #49600	; 0xc1c0
   17484:	cmp	r0, #0
   17488:	movt	r3, #2
   1748c:	movne	r3, r0
   17490:	cmp	r1, #0
   17494:	mov	r0, #10
   17498:	cmpne	r2, #0
   1749c:	str	r0, [r3]
   174a0:	bne	174b0 <__assert_fail@plt+0x5fc8>
   174a4:	push	{fp, lr}
   174a8:	mov	fp, sp
   174ac:	bl	114a0 <abort@plt>
   174b0:	str	r1, [r3, #40]	; 0x28
   174b4:	str	r2, [r3, #44]	; 0x2c
   174b8:	bx	lr
   174bc:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   174c0:	add	fp, sp, #28
   174c4:	sub	sp, sp, #20
   174c8:	mov	r7, r0
   174cc:	ldr	r0, [fp, #8]
   174d0:	movw	r5, #49600	; 0xc1c0
   174d4:	mov	r8, r3
   174d8:	mov	r9, r2
   174dc:	mov	sl, r1
   174e0:	movt	r5, #2
   174e4:	cmp	r0, #0
   174e8:	movne	r5, r0
   174ec:	bl	1138c <__errno_location@plt>
   174f0:	mov	r4, r0
   174f4:	ldm	r5, {r0, r1}
   174f8:	ldr	r2, [r5, #40]	; 0x28
   174fc:	ldr	r3, [r5, #44]	; 0x2c
   17500:	add	r5, r5, #8
   17504:	ldr	r6, [r4]
   17508:	stm	sp, {r0, r1, r5}
   1750c:	str	r2, [sp, #12]
   17510:	str	r3, [sp, #16]
   17514:	mov	r0, r7
   17518:	mov	r1, sl
   1751c:	mov	r2, r9
   17520:	mov	r3, r8
   17524:	bl	17534 <__assert_fail@plt+0x604c>
   17528:	str	r6, [r4]
   1752c:	sub	sp, fp, #28
   17530:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   17534:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   17538:	add	fp, sp, #28
   1753c:	sub	sp, sp, #156	; 0x9c
   17540:	str	r0, [sp, #80]	; 0x50
   17544:	ldr	r0, [fp, #12]
   17548:	mov	r6, r1
   1754c:	mov	r9, r3
   17550:	str	r2, [fp, #-84]	; 0xffffffac
   17554:	and	r1, r0, #4
   17558:	str	r1, [sp, #32]
   1755c:	and	r1, r0, #1
   17560:	str	r1, [sp, #36]	; 0x24
   17564:	ubfx	r4, r0, #1, #1
   17568:	bl	112e4 <__ctype_get_mb_cur_max@plt>
   1756c:	str	r0, [sp, #40]	; 0x28
   17570:	ldr	r0, [fp, #24]
   17574:	ldr	r7, [fp, #8]
   17578:	mov	r1, #0
   1757c:	mov	r5, #1
   17580:	str	r1, [fp, #-56]	; 0xffffffc8
   17584:	mov	r1, #0
   17588:	str	r1, [sp, #60]	; 0x3c
   1758c:	str	r0, [sp, #76]	; 0x4c
   17590:	ldr	r0, [fp, #20]
   17594:	str	r0, [sp, #72]	; 0x48
   17598:	mov	r0, #0
   1759c:	str	r0, [sp, #56]	; 0x38
   175a0:	mov	r0, #0
   175a4:	str	r0, [sp, #92]	; 0x5c
   175a8:	mov	r0, #0
   175ac:	str	r0, [fp, #-76]	; 0xffffffb4
   175b0:	mov	r0, #0
   175b4:	cmp	r7, #10
   175b8:	bhi	18538 <__assert_fail@plt+0x7050>
   175bc:	add	r1, pc, #28
   175c0:	mov	sl, r6
   175c4:	ldr	r6, [sp, #80]	; 0x50
   175c8:	ldr	ip, [fp, #-84]	; 0xffffffac
   175cc:	mov	r8, #0
   175d0:	mov	r2, #1
   175d4:	mov	r3, #0
   175d8:	mov	lr, r9
   175dc:	ldr	pc, [r1, r7, lsl #2]
   175e0:	andeq	r7, r1, r4, asr #13
   175e4:	strdeq	r7, [r1], -r0
   175e8:			; <UNDEFINED> instruction: 0x000176b4
   175ec:	andeq	r7, r1, ip, lsr #13
   175f0:	andeq	r7, r1, r4, ror #13
   175f4:	andeq	r7, r1, r8, lsr r7
   175f8:	ldrdeq	r7, [r1], -r4
   175fc:	muleq	r1, r4, r7
   17600:	andeq	r7, r1, ip, lsl #12
   17604:	andeq	r7, r1, ip, lsl #12
   17608:	andeq	r7, r1, r4, lsr r6
   1760c:	movw	r0, #47526	; 0xb9a6
   17610:	mov	r1, r7
   17614:	movt	r0, #1
   17618:	bl	18f44 <__assert_fail@plt+0x7a5c>
   1761c:	str	r0, [sp, #72]	; 0x48
   17620:	movw	r0, #47528	; 0xb9a8
   17624:	mov	r1, r7
   17628:	movt	r0, #1
   1762c:	bl	18f44 <__assert_fail@plt+0x7a5c>
   17630:	str	r0, [sp, #76]	; 0x4c
   17634:	str	r5, [fp, #-48]	; 0xffffffd0
   17638:	mov	r8, #0
   1763c:	mov	r5, r7
   17640:	tst	r4, #1
   17644:	bne	1767c <__assert_fail@plt+0x6194>
   17648:	ldr	r0, [sp, #72]	; 0x48
   1764c:	ldrb	r0, [r0]
   17650:	cmp	r0, #0
   17654:	beq	1767c <__assert_fail@plt+0x6194>
   17658:	ldr	r1, [sp, #72]	; 0x48
   1765c:	mov	r8, #0
   17660:	add	r1, r1, #1
   17664:	cmp	r8, sl
   17668:	strbcc	r0, [r6, r8]
   1766c:	ldrb	r0, [r1, r8]
   17670:	add	r8, r8, #1
   17674:	cmp	r0, #0
   17678:	bne	17664 <__assert_fail@plt+0x617c>
   1767c:	ldr	r7, [sp, #76]	; 0x4c
   17680:	mov	r0, r7
   17684:	bl	11374 <strlen@plt>
   17688:	str	r7, [sp, #92]	; 0x5c
   1768c:	mov	r7, r5
   17690:	ldr	ip, [fp, #-84]	; 0xffffffac
   17694:	ldr	r5, [fp, #-48]	; 0xffffffd0
   17698:	str	r0, [fp, #-76]	; 0xffffffb4
   1769c:	mov	r2, #1
   176a0:	mov	r3, r4
   176a4:	mov	lr, r9
   176a8:	b	17794 <__assert_fail@plt+0x62ac>
   176ac:	mov	r0, #1
   176b0:	b	176f0 <__assert_fail@plt+0x6208>
   176b4:	tst	r4, #1
   176b8:	bne	176f0 <__assert_fail@plt+0x6208>
   176bc:	mov	r2, r0
   176c0:	b	17718 <__assert_fail@plt+0x6230>
   176c4:	mov	r7, #0
   176c8:	mov	r8, #0
   176cc:	mov	r2, r0
   176d0:	b	17790 <__assert_fail@plt+0x62a8>
   176d4:	mov	r0, #1
   176d8:	mov	r8, #0
   176dc:	mov	r7, #5
   176e0:	b	1774c <__assert_fail@plt+0x6264>
   176e4:	mov	r2, #1
   176e8:	tst	r4, #1
   176ec:	beq	17718 <__assert_fail@plt+0x6230>
   176f0:	mov	r1, #1
   176f4:	mov	r8, #0
   176f8:	mov	r7, #2
   176fc:	mov	r2, r0
   17700:	mov	r3, #1
   17704:	str	r1, [fp, #-76]	; 0xffffffb4
   17708:	movw	r1, #47528	; 0xb9a8
   1770c:	movt	r1, #1
   17710:	str	r1, [sp, #92]	; 0x5c
   17714:	b	17794 <__assert_fail@plt+0x62ac>
   17718:	cmp	sl, #0
   1771c:	mov	r8, #1
   17720:	mov	r7, #2
   17724:	movne	r0, #39	; 0x27
   17728:	strbne	r0, [r6]
   1772c:	movw	r0, #47528	; 0xb9a8
   17730:	movt	r0, #1
   17734:	b	17784 <__assert_fail@plt+0x629c>
   17738:	mov	r7, #5
   1773c:	tst	r4, #1
   17740:	beq	17768 <__assert_fail@plt+0x6280>
   17744:	mov	r0, #1
   17748:	mov	r8, #0
   1774c:	str	r0, [fp, #-76]	; 0xffffffb4
   17750:	movw	r0, #47524	; 0xb9a4
   17754:	mov	r2, #1
   17758:	mov	r3, #1
   1775c:	movt	r0, #1
   17760:	str	r0, [sp, #92]	; 0x5c
   17764:	b	17794 <__assert_fail@plt+0x62ac>
   17768:	cmp	sl, #0
   1776c:	mov	r8, #1
   17770:	mov	r2, #1
   17774:	movne	r0, #34	; 0x22
   17778:	strbne	r0, [r6]
   1777c:	movw	r0, #47524	; 0xb9a4
   17780:	movt	r0, #1
   17784:	str	r0, [sp, #92]	; 0x5c
   17788:	mov	r0, #1
   1778c:	str	r0, [fp, #-76]	; 0xffffffb4
   17790:	mov	r3, #0
   17794:	ldr	r0, [fp, #16]
   17798:	str	r3, [fp, #-72]	; 0xffffffb8
   1779c:	str	r7, [fp, #-64]	; 0xffffffc0
   177a0:	str	r2, [sp, #84]	; 0x54
   177a4:	cmp	r0, #0
   177a8:	movwne	r0, #1
   177ac:	and	r0, r0, r3
   177b0:	str	r0, [fp, #-88]	; 0xffffffa8
   177b4:	ldr	r0, [fp, #-76]	; 0xffffffb4
   177b8:	cmp	r0, #0
   177bc:	movwne	r0, #1
   177c0:	subs	r4, r7, #2
   177c4:	mov	r7, #0
   177c8:	and	r1, r0, r3
   177cc:	str	r4, [fp, #-80]	; 0xffffffb0
   177d0:	and	r1, r2, r1
   177d4:	str	r1, [sp, #48]	; 0x30
   177d8:	clz	r1, r4
   177dc:	lsr	r1, r1, #5
   177e0:	and	r1, r1, r3
   177e4:	eor	r3, r3, #1
   177e8:	str	r1, [sp, #64]	; 0x40
   177ec:	mov	r1, r4
   177f0:	str	r3, [sp, #88]	; 0x58
   177f4:	movwne	r1, #1
   177f8:	orr	r3, r1, r3
   177fc:	and	r1, r1, r2
   17800:	and	r0, r0, r1
   17804:	str	r3, [sp, #68]	; 0x44
   17808:	str	r1, [fp, #-68]	; 0xffffffbc
   1780c:	str	r0, [fp, #-60]	; 0xffffffc4
   17810:	eor	r0, r2, #1
   17814:	str	r0, [sp, #52]	; 0x34
   17818:	cmn	lr, #1
   1781c:	beq	1782c <__assert_fail@plt+0x6344>
   17820:	cmp	r7, lr
   17824:	bne	17838 <__assert_fail@plt+0x6350>
   17828:	b	18360 <__assert_fail@plt+0x6e78>
   1782c:	ldrb	r0, [ip, r7]
   17830:	cmp	r0, #0
   17834:	beq	18368 <__assert_fail@plt+0x6e80>
   17838:	ldr	r0, [fp, #-60]	; 0xffffffc4
   1783c:	mov	r9, #0
   17840:	str	r5, [fp, #-48]	; 0xffffffd0
   17844:	cmp	r0, #0
   17848:	beq	1787c <__assert_fail@plt+0x6394>
   1784c:	ldr	r0, [fp, #-76]	; 0xffffffb4
   17850:	add	r4, r7, r0
   17854:	cmp	r0, #2
   17858:	bcc	17874 <__assert_fail@plt+0x638c>
   1785c:	cmn	lr, #1
   17860:	bne	17874 <__assert_fail@plt+0x638c>
   17864:	mov	r0, ip
   17868:	bl	11374 <strlen@plt>
   1786c:	ldr	ip, [fp, #-84]	; 0xffffffac
   17870:	mov	lr, r0
   17874:	cmp	r4, lr
   17878:	bls	17884 <__assert_fail@plt+0x639c>
   1787c:	mov	r0, #0
   17880:	b	178c4 <__assert_fail@plt+0x63dc>
   17884:	ldr	r1, [sp, #92]	; 0x5c
   17888:	ldr	r2, [fp, #-76]	; 0xffffffb4
   1788c:	add	r0, ip, r7
   17890:	mov	r4, lr
   17894:	bl	1126c <memcmp@plt>
   17898:	ldr	r2, [sp, #88]	; 0x58
   1789c:	cmp	r0, #0
   178a0:	mov	r1, r0
   178a4:	movwne	r1, #1
   178a8:	orr	r1, r1, r2
   178ac:	tst	r1, #1
   178b0:	beq	183f8 <__assert_fail@plt+0x6f10>
   178b4:	ldr	ip, [fp, #-84]	; 0xffffffac
   178b8:	clz	r0, r0
   178bc:	mov	lr, r4
   178c0:	lsr	r0, r0, #5
   178c4:	str	r0, [fp, #-52]	; 0xffffffcc
   178c8:	ldrb	r5, [ip, r7]
   178cc:	cmp	r5, #126	; 0x7e
   178d0:	bhi	17c88 <__assert_fail@plt+0x67a0>
   178d4:	add	r3, pc, #16
   178d8:	mov	r4, #1
   178dc:	mov	r2, #110	; 0x6e
   178e0:	mov	r0, #97	; 0x61
   178e4:	mov	r1, #0
   178e8:	ldr	pc, [r3, r5, lsl #2]
   178ec:	andeq	r7, r1, r4, lsl #23
   178f0:	andeq	r7, r1, r8, lsl #25
   178f4:	andeq	r7, r1, r8, lsl #25
   178f8:	andeq	r7, r1, r8, lsl #25
   178fc:	andeq	r7, r1, r8, lsl #25
   17900:	andeq	r7, r1, r8, lsl #25
   17904:	andeq	r7, r1, r8, lsl #25
   17908:	andeq	r7, r1, ip, lsr sp
   1790c:	andeq	r7, r1, r4, ror #22
   17910:	andeq	r7, r1, ip, asr fp
   17914:	andeq	r7, r1, r0, ror fp
   17918:	strdeq	r7, [r1], -r0
   1791c:	andeq	r7, r1, r4, asr fp
   17920:	andeq	r7, r1, ip, ror #22
   17924:	andeq	r7, r1, r8, lsl #25
   17928:	andeq	r7, r1, r8, lsl #25
   1792c:	andeq	r7, r1, r8, lsl #25
   17930:	andeq	r7, r1, r8, lsl #25
   17934:	andeq	r7, r1, r8, lsl #25
   17938:	andeq	r7, r1, r8, lsl #25
   1793c:	andeq	r7, r1, r8, lsl #25
   17940:	andeq	r7, r1, r8, lsl #25
   17944:	andeq	r7, r1, r8, lsl #25
   17948:	andeq	r7, r1, r8, lsl #25
   1794c:	andeq	r7, r1, r8, lsl #25
   17950:	andeq	r7, r1, r8, lsl #25
   17954:	andeq	r7, r1, r8, lsl #25
   17958:	andeq	r7, r1, r8, lsl #25
   1795c:	andeq	r7, r1, r8, lsl #25
   17960:	andeq	r7, r1, r8, lsl #25
   17964:	andeq	r7, r1, r8, lsl #25
   17968:	andeq	r7, r1, r8, lsl #25
   1796c:	strdeq	r7, [r1], -r4
   17970:	strdeq	r7, [r1], -r8
   17974:	strdeq	r7, [r1], -r8
   17978:	strdeq	r7, [r1], -ip
   1797c:	strdeq	r7, [r1], -r8
   17980:	andeq	r7, r1, r8, ror #21
   17984:	strdeq	r7, [r1], -r8
   17988:	strdeq	r7, [r1], -r8
   1798c:	strdeq	r7, [r1], -r8
   17990:	strdeq	r7, [r1], -r8
   17994:	strdeq	r7, [r1], -r8
   17998:	andeq	r7, r1, r8, ror #21
   1799c:	andeq	r7, r1, r8, ror #21
   179a0:	andeq	r7, r1, r8, ror #21
   179a4:	andeq	r7, r1, r8, ror #21
   179a8:	andeq	r7, r1, r8, ror #21
   179ac:	andeq	r7, r1, r8, ror #21
   179b0:	andeq	r7, r1, r8, ror #21
   179b4:	andeq	r7, r1, r8, ror #21
   179b8:	andeq	r7, r1, r8, ror #21
   179bc:	andeq	r7, r1, r8, ror #21
   179c0:	andeq	r7, r1, r8, ror #21
   179c4:	andeq	r7, r1, r8, ror #21
   179c8:	andeq	r7, r1, r8, ror #21
   179cc:	andeq	r7, r1, r8, ror #21
   179d0:	andeq	r7, r1, r8, ror #21
   179d4:	andeq	r7, r1, r8, ror #21
   179d8:	strdeq	r7, [r1], -r8
   179dc:	strdeq	r7, [r1], -r8
   179e0:	strdeq	r7, [r1], -r8
   179e4:	strdeq	r7, [r1], -r8
   179e8:	andeq	r7, r1, r4, asr #23
   179ec:	andeq	r7, r1, r8, lsl #25
   179f0:	andeq	r7, r1, r8, ror #21
   179f4:	andeq	r7, r1, r8, ror #21
   179f8:	andeq	r7, r1, r8, ror #21
   179fc:	andeq	r7, r1, r8, ror #21
   17a00:	andeq	r7, r1, r8, ror #21
   17a04:	andeq	r7, r1, r8, ror #21
   17a08:	andeq	r7, r1, r8, ror #21
   17a0c:	andeq	r7, r1, r8, ror #21
   17a10:	andeq	r7, r1, r8, ror #21
   17a14:	andeq	r7, r1, r8, ror #21
   17a18:	andeq	r7, r1, r8, ror #21
   17a1c:	andeq	r7, r1, r8, ror #21
   17a20:	andeq	r7, r1, r8, ror #21
   17a24:	andeq	r7, r1, r8, ror #21
   17a28:	andeq	r7, r1, r8, ror #21
   17a2c:	andeq	r7, r1, r8, ror #21
   17a30:	andeq	r7, r1, r8, ror #21
   17a34:	andeq	r7, r1, r8, ror #21
   17a38:	andeq	r7, r1, r8, ror #21
   17a3c:	andeq	r7, r1, r8, ror #21
   17a40:	andeq	r7, r1, r8, ror #21
   17a44:	andeq	r7, r1, r8, ror #21
   17a48:	andeq	r7, r1, r8, ror #21
   17a4c:	andeq	r7, r1, r8, ror #21
   17a50:	andeq	r7, r1, r8, ror #21
   17a54:	andeq	r7, r1, r8, ror #21
   17a58:	strdeq	r7, [r1], -r8
   17a5c:	andeq	r7, r1, r0, lsr fp
   17a60:	andeq	r7, r1, r8, ror #21
   17a64:	strdeq	r7, [r1], -r8
   17a68:	andeq	r7, r1, r8, ror #21
   17a6c:	strdeq	r7, [r1], -r8
   17a70:	andeq	r7, r1, r8, ror #21
   17a74:	andeq	r7, r1, r8, ror #21
   17a78:	andeq	r7, r1, r8, ror #21
   17a7c:	andeq	r7, r1, r8, ror #21
   17a80:	andeq	r7, r1, r8, ror #21
   17a84:	andeq	r7, r1, r8, ror #21
   17a88:	andeq	r7, r1, r8, ror #21
   17a8c:	andeq	r7, r1, r8, ror #21
   17a90:	andeq	r7, r1, r8, ror #21
   17a94:	andeq	r7, r1, r8, ror #21
   17a98:	andeq	r7, r1, r8, ror #21
   17a9c:	andeq	r7, r1, r8, ror #21
   17aa0:	andeq	r7, r1, r8, ror #21
   17aa4:	andeq	r7, r1, r8, ror #21
   17aa8:	andeq	r7, r1, r8, ror #21
   17aac:	andeq	r7, r1, r8, ror #21
   17ab0:	andeq	r7, r1, r8, ror #21
   17ab4:	andeq	r7, r1, r8, ror #21
   17ab8:	andeq	r7, r1, r8, ror #21
   17abc:	andeq	r7, r1, r8, ror #21
   17ac0:	andeq	r7, r1, r8, ror #21
   17ac4:	andeq	r7, r1, r8, ror #21
   17ac8:	andeq	r7, r1, r8, ror #21
   17acc:	andeq	r7, r1, r8, ror #21
   17ad0:	andeq	r7, r1, r8, ror #21
   17ad4:	andeq	r7, r1, r8, ror #21
   17ad8:	andeq	r7, r1, r0, lsl fp
   17adc:	strdeq	r7, [r1], -r8
   17ae0:	andeq	r7, r1, r0, lsl fp
   17ae4:	strdeq	r7, [r1], -ip
   17ae8:	ldr	r0, [fp, #-68]	; 0xffffffbc
   17aec:	cmp	r0, #0
   17af0:	beq	17d50 <__assert_fail@plt+0x6868>
   17af4:	ldr	r0, [fp, #16]
   17af8:	b	17d54 <__assert_fail@plt+0x686c>
   17afc:	mov	r4, #0
   17b00:	cmp	r7, #0
   17b04:	beq	17cf4 <__assert_fail@plt+0x680c>
   17b08:	mov	r9, #0
   17b0c:	b	17ae8 <__assert_fail@plt+0x6600>
   17b10:	mov	r4, #0
   17b14:	cmn	lr, #1
   17b18:	beq	17cd8 <__assert_fail@plt+0x67f0>
   17b1c:	cmp	r7, #0
   17b20:	bne	17b08 <__assert_fail@plt+0x6620>
   17b24:	cmp	lr, #1
   17b28:	beq	17cf4 <__assert_fail@plt+0x680c>
   17b2c:	b	17b08 <__assert_fail@plt+0x6620>
   17b30:	ldr	r0, [fp, #-64]	; 0xffffffc0
   17b34:	cmp	r0, #2
   17b38:	bne	17d18 <__assert_fail@plt+0x6830>
   17b3c:	ldr	r0, [fp, #-72]	; 0xffffffb8
   17b40:	tst	r0, #1
   17b44:	bne	18414 <__assert_fail@plt+0x6f2c>
   17b48:	mov	r9, #0
   17b4c:	mov	r0, #92	; 0x5c
   17b50:	b	17d2c <__assert_fail@plt+0x6844>
   17b54:	mov	r0, #102	; 0x66
   17b58:	b	17d3c <__assert_fail@plt+0x6854>
   17b5c:	mov	r2, #116	; 0x74
   17b60:	b	17b70 <__assert_fail@plt+0x6688>
   17b64:	mov	r0, #98	; 0x62
   17b68:	b	17d3c <__assert_fail@plt+0x6854>
   17b6c:	mov	r2, #114	; 0x72
   17b70:	ldr	r0, [sp, #68]	; 0x44
   17b74:	tst	r0, #1
   17b78:	mov	r0, r2
   17b7c:	bne	17d3c <__assert_fail@plt+0x6854>
   17b80:	b	18414 <__assert_fail@plt+0x6f2c>
   17b84:	ldr	r0, [sp, #84]	; 0x54
   17b88:	tst	r0, #1
   17b8c:	beq	17e2c <__assert_fail@plt+0x6944>
   17b90:	ldr	r0, [fp, #-72]	; 0xffffffb8
   17b94:	tst	r0, #1
   17b98:	bne	18524 <__assert_fail@plt+0x703c>
   17b9c:	ldr	r0, [fp, #-64]	; 0xffffffc0
   17ba0:	ldr	r2, [fp, #-56]	; 0xffffffc8
   17ba4:	cmp	r0, #2
   17ba8:	ldr	r0, [fp, #-80]	; 0xffffffb0
   17bac:	movwne	r0, #1
   17bb0:	orr	r0, r0, r2
   17bb4:	tst	r0, #1
   17bb8:	beq	181fc <__assert_fail@plt+0x6d14>
   17bbc:	mov	r0, r8
   17bc0:	b	18230 <__assert_fail@plt+0x6d48>
   17bc4:	ldr	r0, [fp, #-64]	; 0xffffffc0
   17bc8:	mov	r9, #0
   17bcc:	mov	r5, #63	; 0x3f
   17bd0:	cmp	r0, #5
   17bd4:	beq	17fe0 <__assert_fail@plt+0x6af8>
   17bd8:	cmp	r0, #2
   17bdc:	bne	18084 <__assert_fail@plt+0x6b9c>
   17be0:	ldr	r0, [fp, #-72]	; 0xffffffb8
   17be4:	tst	r0, #1
   17be8:	beq	18088 <__assert_fail@plt+0x6ba0>
   17bec:	b	18414 <__assert_fail@plt+0x6f2c>
   17bf0:	mov	r0, #118	; 0x76
   17bf4:	b	17d3c <__assert_fail@plt+0x6854>
   17bf8:	mov	r0, #1
   17bfc:	mov	r5, #39	; 0x27
   17c00:	str	r0, [sp, #60]	; 0x3c
   17c04:	ldr	r0, [fp, #-64]	; 0xffffffc0
   17c08:	cmp	r0, #2
   17c0c:	bne	17c80 <__assert_fail@plt+0x6798>
   17c10:	ldr	r0, [fp, #-72]	; 0xffffffb8
   17c14:	tst	r0, #1
   17c18:	bne	18414 <__assert_fail@plt+0x6f2c>
   17c1c:	ldr	r2, [sp, #56]	; 0x38
   17c20:	clz	r1, sl
   17c24:	mov	r9, #0
   17c28:	lsr	r1, r1, #5
   17c2c:	cmp	r2, #0
   17c30:	mov	r0, r2
   17c34:	movwne	r0, #1
   17c38:	orrs	r0, r0, r1
   17c3c:	moveq	r2, sl
   17c40:	moveq	sl, r0
   17c44:	cmp	r8, sl
   17c48:	str	r2, [sp, #56]	; 0x38
   17c4c:	movcc	r0, #39	; 0x27
   17c50:	strbcc	r0, [r6, r8]
   17c54:	add	r0, r8, #1
   17c58:	cmp	r0, sl
   17c5c:	movcc	r1, #92	; 0x5c
   17c60:	strbcc	r1, [r6, r0]
   17c64:	add	r0, r8, #2
   17c68:	add	r8, r8, #3
   17c6c:	cmp	r0, sl
   17c70:	movcc	r1, #39	; 0x27
   17c74:	strbcc	r1, [r6, r0]
   17c78:	mov	r0, #0
   17c7c:	str	r0, [fp, #-56]	; 0xffffffc8
   17c80:	mov	r4, #1
   17c84:	b	17ae8 <__assert_fail@plt+0x6600>
   17c88:	ldr	r0, [sp, #40]	; 0x28
   17c8c:	cmp	r0, #1
   17c90:	bne	17e58 <__assert_fail@plt+0x6970>
   17c94:	str	lr, [sp, #28]
   17c98:	bl	1135c <__ctype_b_loc@plt>
   17c9c:	ldr	r0, [r0]
   17ca0:	ldr	ip, [fp, #-84]	; 0xffffffac
   17ca4:	mov	r1, #1
   17ca8:	add	r0, r0, r5, lsl #1
   17cac:	ldrb	r0, [r0, #1]
   17cb0:	ubfx	r4, r0, #6, #1
   17cb4:	ldr	r0, [sp, #52]	; 0x34
   17cb8:	mov	r2, r1
   17cbc:	cmp	r1, #1
   17cc0:	orr	r0, r4, r0
   17cc4:	bhi	18090 <__assert_fail@plt+0x6ba8>
   17cc8:	tst	r0, #1
   17ccc:	beq	18090 <__assert_fail@plt+0x6ba8>
   17cd0:	ldr	lr, [sp, #28]
   17cd4:	b	17ae8 <__assert_fail@plt+0x6600>
   17cd8:	cmp	r7, #0
   17cdc:	ldrbeq	r0, [ip, #1]
   17ce0:	cmpeq	r0, #0
   17ce4:	beq	17cf4 <__assert_fail@plt+0x680c>
   17ce8:	mvn	lr, #0
   17cec:	mov	r9, #0
   17cf0:	b	17ae8 <__assert_fail@plt+0x6600>
   17cf4:	mov	r1, #1
   17cf8:	ldr	r0, [fp, #-64]	; 0xffffffc0
   17cfc:	cmp	r0, #2
   17d00:	bne	17d10 <__assert_fail@plt+0x6828>
   17d04:	ldr	r0, [fp, #-72]	; 0xffffffb8
   17d08:	tst	r0, #1
   17d0c:	bne	18414 <__assert_fail@plt+0x6f2c>
   17d10:	mov	r4, r1
   17d14:	b	17ae8 <__assert_fail@plt+0x6600>
   17d18:	ldr	r1, [sp, #48]	; 0x30
   17d1c:	mov	r9, #0
   17d20:	mov	r0, #92	; 0x5c
   17d24:	cmp	r1, #0
   17d28:	beq	17d3c <__assert_fail@plt+0x6854>
   17d2c:	mov	r4, #0
   17d30:	cmp	r9, #0
   17d34:	beq	182c8 <__assert_fail@plt+0x6de0>
   17d38:	b	18304 <__assert_fail@plt+0x6e1c>
   17d3c:	ldr	r1, [sp, #84]	; 0x54
   17d40:	mov	r4, #0
   17d44:	mov	r9, #0
   17d48:	tst	r1, #1
   17d4c:	bne	17d8c <__assert_fail@plt+0x68a4>
   17d50:	ldr	r0, [fp, #-88]	; 0xffffffa8
   17d54:	cmp	r0, #0
   17d58:	mov	r0, r5
   17d5c:	beq	17d80 <__assert_fail@plt+0x6898>
   17d60:	ldr	r1, [fp, #16]
   17d64:	ubfx	r0, r5, #5, #3
   17d68:	mov	r2, #1
   17d6c:	ldr	r0, [r1, r0, lsl #2]
   17d70:	and	r1, r5, #31
   17d74:	tst	r0, r2, lsl r1
   17d78:	mov	r0, r5
   17d7c:	bne	17d8c <__assert_fail@plt+0x68a4>
   17d80:	ldr	r1, [fp, #-52]	; 0xffffffcc
   17d84:	cmp	r1, #0
   17d88:	beq	182c0 <__assert_fail@plt+0x6dd8>
   17d8c:	ldr	r1, [fp, #-72]	; 0xffffffb8
   17d90:	tst	r1, #1
   17d94:	bne	183ec <__assert_fail@plt+0x6f04>
   17d98:	ldr	r1, [fp, #-64]	; 0xffffffc0
   17d9c:	ldr	r2, [fp, #-56]	; 0xffffffc8
   17da0:	cmp	r1, #2
   17da4:	ldr	r1, [fp, #-80]	; 0xffffffb0
   17da8:	movwne	r1, #1
   17dac:	orr	r1, r1, r2
   17db0:	tst	r1, #1
   17db4:	beq	17dc0 <__assert_fail@plt+0x68d8>
   17db8:	ldr	r5, [fp, #-48]	; 0xffffffd0
   17dbc:	b	17dfc <__assert_fail@plt+0x6914>
   17dc0:	cmp	r8, sl
   17dc4:	ldr	r5, [fp, #-48]	; 0xffffffd0
   17dc8:	movcc	r1, #39	; 0x27
   17dcc:	strbcc	r1, [r6, r8]
   17dd0:	add	r1, r8, #1
   17dd4:	cmp	r1, sl
   17dd8:	movcc	r2, #36	; 0x24
   17ddc:	strbcc	r2, [r6, r1]
   17de0:	add	r1, r8, #2
   17de4:	add	r8, r8, #3
   17de8:	cmp	r1, sl
   17dec:	movcc	r2, #39	; 0x27
   17df0:	strbcc	r2, [r6, r1]
   17df4:	mov	r1, #1
   17df8:	str	r1, [fp, #-56]	; 0xffffffc8
   17dfc:	cmp	r8, sl
   17e00:	movcc	r1, #92	; 0x5c
   17e04:	strbcc	r1, [r6, r8]
   17e08:	add	r8, r8, #1
   17e0c:	cmp	r8, sl
   17e10:	and	r5, r5, r4
   17e14:	add	r7, r7, #1
   17e18:	strbcc	r0, [r6, r8]
   17e1c:	add	r8, r8, #1
   17e20:	cmn	lr, #1
   17e24:	bne	17820 <__assert_fail@plt+0x6338>
   17e28:	b	1782c <__assert_fail@plt+0x6344>
   17e2c:	ldr	r0, [sp, #36]	; 0x24
   17e30:	mov	r4, #0
   17e34:	mov	r9, #0
   17e38:	mov	r5, #0
   17e3c:	cmp	r0, #0
   17e40:	beq	17d50 <__assert_fail@plt+0x6868>
   17e44:	ldr	r5, [fp, #-48]	; 0xffffffd0
   17e48:	add	r7, r7, #1
   17e4c:	cmn	lr, #1
   17e50:	bne	17820 <__assert_fail@plt+0x6338>
   17e54:	b	1782c <__assert_fail@plt+0x6344>
   17e58:	mov	r0, #0
   17e5c:	cmn	lr, #1
   17e60:	str	r0, [fp, #-36]	; 0xffffffdc
   17e64:	str	r0, [fp, #-40]	; 0xffffffd8
   17e68:	bne	17e7c <__assert_fail@plt+0x6994>
   17e6c:	mov	r0, ip
   17e70:	bl	11374 <strlen@plt>
   17e74:	ldr	ip, [fp, #-84]	; 0xffffffac
   17e78:	mov	lr, r0
   17e7c:	add	r0, ip, r7
   17e80:	mov	r4, #1
   17e84:	mov	r6, #0
   17e88:	str	lr, [sp, #28]
   17e8c:	str	r0, [sp, #24]
   17e90:	sub	r0, fp, #40	; 0x28
   17e94:	mov	r3, r0
   17e98:	str	r6, [sp, #44]	; 0x2c
   17e9c:	add	r6, r6, r7
   17ea0:	sub	r0, fp, #44	; 0x2c
   17ea4:	add	r1, ip, r6
   17ea8:	sub	r2, lr, r6
   17eac:	bl	1a3f8 <__assert_fail@plt+0x8f10>
   17eb0:	cmp	r0, #0
   17eb4:	beq	1834c <__assert_fail@plt+0x6e64>
   17eb8:	cmn	r0, #1
   17ebc:	beq	1830c <__assert_fail@plt+0x6e24>
   17ec0:	ldr	lr, [sp, #28]
   17ec4:	cmn	r0, #2
   17ec8:	beq	18314 <__assert_fail@plt+0x6e2c>
   17ecc:	ldr	r2, [sp, #64]	; 0x40
   17ed0:	cmp	r0, #2
   17ed4:	mov	r1, #0
   17ed8:	movwcc	r1, #1
   17edc:	eor	r2, r2, #1
   17ee0:	orrs	r1, r2, r1
   17ee4:	bne	17fa4 <__assert_fail@plt+0x6abc>
   17ee8:	ldr	r1, [sp, #44]	; 0x2c
   17eec:	ldr	r2, [sp, #24]
   17ef0:	add	r1, r2, r1
   17ef4:	mov	r2, #1
   17ef8:	ldrb	r3, [r1, r2]
   17efc:	sub	r3, r3, #91	; 0x5b
   17f00:	cmp	r3, #33	; 0x21
   17f04:	bhi	17f98 <__assert_fail@plt+0x6ab0>
   17f08:	add	r6, pc, #0
   17f0c:	ldr	pc, [r6, r3, lsl #2]
   17f10:	andeq	r8, r1, ip, lsl #8
   17f14:	andeq	r8, r1, ip, lsl #8
   17f18:	muleq	r1, r8, pc	; <UNPREDICTABLE>
   17f1c:	andeq	r8, r1, ip, lsl #8
   17f20:	muleq	r1, r8, pc	; <UNPREDICTABLE>
   17f24:	andeq	r8, r1, ip, lsl #8
   17f28:	muleq	r1, r8, pc	; <UNPREDICTABLE>
   17f2c:	muleq	r1, r8, pc	; <UNPREDICTABLE>
   17f30:	muleq	r1, r8, pc	; <UNPREDICTABLE>
   17f34:	muleq	r1, r8, pc	; <UNPREDICTABLE>
   17f38:	muleq	r1, r8, pc	; <UNPREDICTABLE>
   17f3c:	muleq	r1, r8, pc	; <UNPREDICTABLE>
   17f40:	muleq	r1, r8, pc	; <UNPREDICTABLE>
   17f44:	muleq	r1, r8, pc	; <UNPREDICTABLE>
   17f48:	muleq	r1, r8, pc	; <UNPREDICTABLE>
   17f4c:	muleq	r1, r8, pc	; <UNPREDICTABLE>
   17f50:	muleq	r1, r8, pc	; <UNPREDICTABLE>
   17f54:	muleq	r1, r8, pc	; <UNPREDICTABLE>
   17f58:	muleq	r1, r8, pc	; <UNPREDICTABLE>
   17f5c:	muleq	r1, r8, pc	; <UNPREDICTABLE>
   17f60:	muleq	r1, r8, pc	; <UNPREDICTABLE>
   17f64:	muleq	r1, r8, pc	; <UNPREDICTABLE>
   17f68:	muleq	r1, r8, pc	; <UNPREDICTABLE>
   17f6c:	muleq	r1, r8, pc	; <UNPREDICTABLE>
   17f70:	muleq	r1, r8, pc	; <UNPREDICTABLE>
   17f74:	muleq	r1, r8, pc	; <UNPREDICTABLE>
   17f78:	muleq	r1, r8, pc	; <UNPREDICTABLE>
   17f7c:	muleq	r1, r8, pc	; <UNPREDICTABLE>
   17f80:	muleq	r1, r8, pc	; <UNPREDICTABLE>
   17f84:	muleq	r1, r8, pc	; <UNPREDICTABLE>
   17f88:	muleq	r1, r8, pc	; <UNPREDICTABLE>
   17f8c:	muleq	r1, r8, pc	; <UNPREDICTABLE>
   17f90:	muleq	r1, r8, pc	; <UNPREDICTABLE>
   17f94:	andeq	r8, r1, ip, lsl #8
   17f98:	add	r2, r2, #1
   17f9c:	cmp	r2, r0
   17fa0:	bcc	17ef8 <__assert_fail@plt+0x6a10>
   17fa4:	ldr	r6, [sp, #44]	; 0x2c
   17fa8:	add	r6, r0, r6
   17fac:	ldr	r0, [fp, #-44]	; 0xffffffd4
   17fb0:	bl	112b4 <iswprint@plt>
   17fb4:	cmp	r0, #0
   17fb8:	movwne	r0, #1
   17fbc:	and	r4, r4, r0
   17fc0:	sub	r0, fp, #40	; 0x28
   17fc4:	bl	11260 <mbsinit@plt>
   17fc8:	ldr	lr, [sp, #28]
   17fcc:	ldr	ip, [fp, #-84]	; 0xffffffac
   17fd0:	sub	r3, fp, #40	; 0x28
   17fd4:	cmp	r0, #0
   17fd8:	beq	17e98 <__assert_fail@plt+0x69b0>
   17fdc:	b	18354 <__assert_fail@plt+0x6e6c>
   17fe0:	ldr	r0, [sp, #32]
   17fe4:	cmp	r0, #0
   17fe8:	beq	18084 <__assert_fail@plt+0x6b9c>
   17fec:	add	r0, r7, #2
   17ff0:	cmp	r0, lr
   17ff4:	bcs	18084 <__assert_fail@plt+0x6b9c>
   17ff8:	add	r1, ip, r7
   17ffc:	ldrb	r1, [r1, #1]
   18000:	cmp	r1, #63	; 0x3f
   18004:	bne	18084 <__assert_fail@plt+0x6b9c>
   18008:	ldrb	r5, [ip, r0]
   1800c:	sub	r1, r5, #33	; 0x21
   18010:	cmp	r1, #29
   18014:	bhi	18084 <__assert_fail@plt+0x6b9c>
   18018:	movw	r3, #20929	; 0x51c1
   1801c:	mov	r2, #1
   18020:	movt	r3, #14336	; 0x3800
   18024:	tst	r3, r2, lsl r1
   18028:	beq	18084 <__assert_fail@plt+0x6b9c>
   1802c:	ldr	r1, [fp, #-72]	; 0xffffffb8
   18030:	tst	r1, #1
   18034:	bne	1852c <__assert_fail@plt+0x7044>
   18038:	cmp	r8, sl
   1803c:	mov	r7, r0
   18040:	mov	r4, #0
   18044:	movcc	r1, #63	; 0x3f
   18048:	strbcc	r1, [r6, r8]
   1804c:	add	r1, r8, #1
   18050:	cmp	r1, sl
   18054:	movcc	r2, #34	; 0x22
   18058:	strbcc	r2, [r6, r1]
   1805c:	add	r1, r8, #2
   18060:	cmp	r1, sl
   18064:	movcc	r2, #34	; 0x22
   18068:	strbcc	r2, [r6, r1]
   1806c:	add	r1, r8, #3
   18070:	add	r8, r8, #4
   18074:	cmp	r1, sl
   18078:	movcc	r2, #63	; 0x3f
   1807c:	strbcc	r2, [r6, r1]
   18080:	b	17ae8 <__assert_fail@plt+0x6600>
   18084:	mov	r5, #63	; 0x3f
   18088:	mov	r4, #0
   1808c:	b	17ae8 <__assert_fail@plt+0x6600>
   18090:	add	r1, r2, r7
   18094:	ldr	lr, [sp, #28]
   18098:	mov	r3, #0
   1809c:	str	r1, [sp, #44]	; 0x2c
   180a0:	add	r1, r7, #1
   180a4:	ldr	r7, [fp, #-64]	; 0xffffffc0
   180a8:	tst	r0, #1
   180ac:	bne	18180 <__assert_fail@plt+0x6c98>
   180b0:	ldr	r2, [fp, #-72]	; 0xffffffb8
   180b4:	tst	r2, #1
   180b8:	bne	18474 <__assert_fail@plt+0x6f8c>
   180bc:	ldr	r3, [fp, #-80]	; 0xffffffb0
   180c0:	ldr	r2, [fp, #-56]	; 0xffffffc8
   180c4:	cmp	r7, #2
   180c8:	movwne	r3, #1
   180cc:	orr	r3, r3, r2
   180d0:	tst	r3, #1
   180d4:	bne	18110 <__assert_fail@plt+0x6c28>
   180d8:	cmp	r8, sl
   180dc:	add	r3, r8, #1
   180e0:	movcc	r2, #39	; 0x27
   180e4:	strbcc	r2, [r6, r8]
   180e8:	cmp	r3, sl
   180ec:	movcc	r2, #36	; 0x24
   180f0:	strbcc	r2, [r6, r3]
   180f4:	add	r3, r8, #2
   180f8:	add	r8, r8, #3
   180fc:	cmp	r3, sl
   18100:	movcc	r2, #39	; 0x27
   18104:	strbcc	r2, [r6, r3]
   18108:	mov	r2, #1
   1810c:	str	r2, [fp, #-56]	; 0xffffffc8
   18110:	cmp	r8, sl
   18114:	movcc	r3, #92	; 0x5c
   18118:	strbcc	r3, [r6, r8]
   1811c:	add	r3, r8, #1
   18120:	cmp	r3, sl
   18124:	andcc	r7, r5, #192	; 0xc0
   18128:	movcc	r2, #48	; 0x30
   1812c:	orrcc	r7, r2, r7, lsr #6
   18130:	strbcc	r7, [r6, r3]
   18134:	add	r3, r8, #2
   18138:	add	r8, r8, #3
   1813c:	cmp	r3, sl
   18140:	lsrcc	r7, r5, #3
   18144:	movcc	r2, #6
   18148:	bficc	r7, r2, #3, #29
   1814c:	mov	r2, #6
   18150:	strbcc	r7, [r6, r3]
   18154:	bfi	r5, r2, #3, #29
   18158:	mov	r3, #1
   1815c:	b	181a4 <__assert_fail@plt+0x6cbc>
   18160:	cmp	r8, sl
   18164:	ldr	r7, [fp, #-64]	; 0xffffffc0
   18168:	strbcc	r5, [r6, r8]
   1816c:	add	r8, r8, #1
   18170:	ldrb	r5, [ip, r1]
   18174:	add	r1, r1, #1
   18178:	tst	r0, #1
   1817c:	beq	180b0 <__assert_fail@plt+0x6bc8>
   18180:	ldr	r2, [fp, #-52]	; 0xffffffcc
   18184:	tst	r2, #1
   18188:	beq	1819c <__assert_fail@plt+0x6cb4>
   1818c:	cmp	r8, sl
   18190:	movcc	r7, #92	; 0x5c
   18194:	strbcc	r7, [r6, r8]
   18198:	add	r8, r8, #1
   1819c:	mov	r2, #0
   181a0:	str	r2, [fp, #-52]	; 0xffffffcc
   181a4:	ldr	r2, [sp, #44]	; 0x2c
   181a8:	and	r9, r3, #1
   181ac:	cmp	r2, r1
   181b0:	bls	182b0 <__assert_fail@plt+0x6dc8>
   181b4:	ldr	r2, [fp, #-56]	; 0xffffffc8
   181b8:	cmp	r9, #0
   181bc:	movwne	r9, #1
   181c0:	mvn	r7, r2
   181c4:	orr	r7, r7, r9
   181c8:	tst	r7, #1
   181cc:	bne	18160 <__assert_fail@plt+0x6c78>
   181d0:	cmp	r8, sl
   181d4:	movcc	r7, #39	; 0x27
   181d8:	strbcc	r7, [r6, r8]
   181dc:	add	r7, r8, #1
   181e0:	add	r8, r8, #2
   181e4:	cmp	r7, sl
   181e8:	movcc	r2, #39	; 0x27
   181ec:	strbcc	r2, [r6, r7]
   181f0:	mov	r2, #0
   181f4:	str	r2, [fp, #-56]	; 0xffffffc8
   181f8:	b	18160 <__assert_fail@plt+0x6c78>
   181fc:	cmp	r8, sl
   18200:	mov	r2, #1
   18204:	movcc	r0, #39	; 0x27
   18208:	strbcc	r0, [r6, r8]
   1820c:	add	r0, r8, #1
   18210:	cmp	r0, sl
   18214:	movcc	r1, #36	; 0x24
   18218:	strbcc	r1, [r6, r0]
   1821c:	add	r0, r8, #2
   18220:	cmp	r0, sl
   18224:	movcc	r1, #39	; 0x27
   18228:	strbcc	r1, [r6, r0]
   1822c:	add	r0, r8, #3
   18230:	cmp	r0, sl
   18234:	add	r8, r0, #1
   18238:	str	r2, [fp, #-56]	; 0xffffffc8
   1823c:	movcc	r1, #92	; 0x5c
   18240:	strbcc	r1, [r6, r0]
   18244:	ldr	r1, [fp, #-64]	; 0xffffffc0
   18248:	cmp	r1, #2
   1824c:	beq	182a0 <__assert_fail@plt+0x6db8>
   18250:	add	r1, r7, #1
   18254:	mov	r4, #0
   18258:	mov	r9, #1
   1825c:	mov	r5, #48	; 0x30
   18260:	cmp	r1, lr
   18264:	bcs	17ae8 <__assert_fail@plt+0x6600>
   18268:	ldrb	r1, [ip, r1]
   1826c:	sub	r1, r1, #48	; 0x30
   18270:	uxtb	r1, r1
   18274:	cmp	r1, #9
   18278:	bhi	17ae8 <__assert_fail@plt+0x6600>
   1827c:	cmp	r8, sl
   18280:	movcc	r1, #48	; 0x30
   18284:	strbcc	r1, [r6, r8]
   18288:	add	r1, r0, #2
   1828c:	add	r8, r0, #3
   18290:	cmp	r1, sl
   18294:	movcc	r2, #48	; 0x30
   18298:	strbcc	r2, [r6, r1]
   1829c:	b	17ae8 <__assert_fail@plt+0x6600>
   182a0:	mov	r0, #48	; 0x30
   182a4:	mov	r9, #1
   182a8:	mov	r4, #0
   182ac:	b	17d80 <__assert_fail@plt+0x6898>
   182b0:	cmp	r9, #0
   182b4:	sub	r7, r1, #1
   182b8:	mov	r0, r5
   182bc:	movwne	r9, #1
   182c0:	cmp	r9, #0
   182c4:	bne	18304 <__assert_fail@plt+0x6e1c>
   182c8:	ldr	r1, [fp, #-56]	; 0xffffffc8
   182cc:	tst	r1, #1
   182d0:	beq	18304 <__assert_fail@plt+0x6e1c>
   182d4:	cmp	r8, sl
   182d8:	ldr	r5, [fp, #-48]	; 0xffffffd0
   182dc:	movcc	r1, #39	; 0x27
   182e0:	strbcc	r1, [r6, r8]
   182e4:	add	r1, r8, #1
   182e8:	add	r8, r8, #2
   182ec:	cmp	r1, sl
   182f0:	movcc	r2, #39	; 0x27
   182f4:	strbcc	r2, [r6, r1]
   182f8:	mov	r1, #0
   182fc:	str	r1, [fp, #-56]	; 0xffffffc8
   18300:	b	17e0c <__assert_fail@plt+0x6924>
   18304:	ldr	r5, [fp, #-48]	; 0xffffffd0
   18308:	b	17e0c <__assert_fail@plt+0x6924>
   1830c:	mov	r4, #0
   18310:	b	1834c <__assert_fail@plt+0x6e64>
   18314:	mov	r4, #0
   18318:	cmp	lr, r6
   1831c:	bls	1834c <__assert_fail@plt+0x6e64>
   18320:	ldr	ip, [fp, #-84]	; 0xffffffac
   18324:	ldr	r6, [sp, #44]	; 0x2c
   18328:	ldr	r0, [sp, #24]
   1832c:	ldrb	r0, [r0, r6]
   18330:	cmp	r0, #0
   18334:	beq	18354 <__assert_fail@plt+0x6e6c>
   18338:	add	r6, r6, #1
   1833c:	add	r0, r7, r6
   18340:	cmp	r0, lr
   18344:	bcc	18328 <__assert_fail@plt+0x6e40>
   18348:	b	18354 <__assert_fail@plt+0x6e6c>
   1834c:	ldr	ip, [fp, #-84]	; 0xffffffac
   18350:	ldr	r6, [sp, #44]	; 0x2c
   18354:	mov	r1, r6
   18358:	ldr	r6, [sp, #80]	; 0x50
   1835c:	b	17cb4 <__assert_fail@plt+0x67cc>
   18360:	mov	lr, r7
   18364:	b	1836c <__assert_fail@plt+0x6e84>
   18368:	mvn	lr, #0
   1836c:	ldr	r7, [fp, #-64]	; 0xffffffc0
   18370:	ldr	r1, [fp, #-72]	; 0xffffffb8
   18374:	eor	r0, r7, #2
   18378:	orr	r0, r0, r8
   1837c:	clz	r0, r0
   18380:	lsr	r0, r0, #5
   18384:	tst	r1, r0
   18388:	bne	18414 <__assert_fail@plt+0x6f2c>
   1838c:	mov	r0, r1
   18390:	ldr	r1, [fp, #-80]	; 0xffffffb0
   18394:	cmp	r7, #2
   18398:	movwne	r1, #1
   1839c:	orr	r0, r0, r1
   183a0:	tst	r0, #1
   183a4:	ldreq	r0, [sp, #60]	; 0x3c
   183a8:	eoreq	r0, r0, #1
   183ac:	tsteq	r0, #1
   183b0:	bne	184c0 <__assert_fail@plt+0x6fd8>
   183b4:	mov	r9, lr
   183b8:	tst	r5, #1
   183bc:	bne	1847c <__assert_fail@plt+0x6f94>
   183c0:	ldr	r6, [sp, #56]	; 0x38
   183c4:	mov	r4, #0
   183c8:	cmp	r6, #0
   183cc:	beq	184b8 <__assert_fail@plt+0x6fd0>
   183d0:	ldr	r0, [sp, #84]	; 0x54
   183d4:	mov	r1, #0
   183d8:	cmp	sl, #0
   183dc:	mov	r5, #0
   183e0:	str	r1, [fp, #-72]	; 0xffffffb8
   183e4:	beq	175b4 <__assert_fail@plt+0x60cc>
   183e8:	b	184c0 <__assert_fail@plt+0x6fd8>
   183ec:	ldr	r7, [fp, #-64]	; 0xffffffc0
   183f0:	ldr	r2, [sp, #84]	; 0x54
   183f4:	b	1841c <__assert_fail@plt+0x6f34>
   183f8:	ldr	ip, [fp, #-84]	; 0xffffffac
   183fc:	mov	r2, #1
   18400:	mov	lr, r4
   18404:	ldr	r7, [fp, #-64]	; 0xffffffc0
   18408:	b	1841c <__assert_fail@plt+0x6f34>
   1840c:	ldr	r6, [sp, #80]	; 0x50
   18410:	ldr	ip, [fp, #-84]	; 0xffffffac
   18414:	ldr	r2, [sp, #84]	; 0x54
   18418:	mov	r7, #2
   1841c:	mov	r0, #0
   18420:	ldr	r1, [fp, #12]
   18424:	tst	r2, #1
   18428:	mov	r2, r7
   1842c:	mov	r3, lr
   18430:	str	r0, [sp, #8]
   18434:	ldr	r0, [sp, #72]	; 0x48
   18438:	movwne	r2, #4
   1843c:	cmp	r7, #2
   18440:	movne	r2, r7
   18444:	str	r2, [sp]
   18448:	mov	r2, ip
   1844c:	bic	r1, r1, #2
   18450:	str	r0, [sp, #12]
   18454:	ldr	r0, [sp, #76]	; 0x4c
   18458:	str	r1, [sp, #4]
   1845c:	mov	r1, sl
   18460:	str	r0, [sp, #16]
   18464:	mov	r0, r6
   18468:	bl	17534 <__assert_fail@plt+0x604c>
   1846c:	mov	r8, r0
   18470:	b	18518 <__assert_fail@plt+0x7030>
   18474:	ldr	r2, [sp, #84]	; 0x54
   18478:	b	1841c <__assert_fail@plt+0x6f34>
   1847c:	mov	r0, #5
   18480:	ldr	r1, [sp, #56]	; 0x38
   18484:	ldr	r2, [fp, #-84]	; 0xffffffac
   18488:	mov	r3, r9
   1848c:	str	r0, [sp]
   18490:	ldr	r0, [fp, #12]
   18494:	str	r0, [sp, #4]
   18498:	ldr	r0, [fp, #16]
   1849c:	str	r0, [sp, #8]
   184a0:	ldr	r0, [sp, #72]	; 0x48
   184a4:	str	r0, [sp, #12]
   184a8:	ldr	r0, [sp, #76]	; 0x4c
   184ac:	str	r0, [sp, #16]
   184b0:	ldr	r0, [sp, #80]	; 0x50
   184b4:	b	18468 <__assert_fail@plt+0x6f80>
   184b8:	mov	r0, #0
   184bc:	str	r0, [fp, #-72]	; 0xffffffb8
   184c0:	ldr	r1, [sp, #92]	; 0x5c
   184c4:	cmp	r1, #0
   184c8:	beq	18508 <__assert_fail@plt+0x7020>
   184cc:	ldr	r0, [fp, #-72]	; 0xffffffb8
   184d0:	ldr	r2, [sp, #80]	; 0x50
   184d4:	tst	r0, #1
   184d8:	bne	1850c <__assert_fail@plt+0x7024>
   184dc:	ldrb	r0, [r1]
   184e0:	cmp	r0, #0
   184e4:	beq	1850c <__assert_fail@plt+0x7024>
   184e8:	add	r1, r1, #1
   184ec:	cmp	r8, sl
   184f0:	strbcc	r0, [r2, r8]
   184f4:	add	r8, r8, #1
   184f8:	ldrb	r0, [r1], #1
   184fc:	cmp	r0, #0
   18500:	bne	184ec <__assert_fail@plt+0x7004>
   18504:	b	1850c <__assert_fail@plt+0x7024>
   18508:	ldr	r2, [sp, #80]	; 0x50
   1850c:	cmp	r8, sl
   18510:	movcc	r0, #0
   18514:	strbcc	r0, [r2, r8]
   18518:	mov	r0, r8
   1851c:	sub	sp, fp, #28
   18520:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   18524:	mov	r2, #1
   18528:	b	18404 <__assert_fail@plt+0x6f1c>
   1852c:	ldr	r2, [sp, #84]	; 0x54
   18530:	mov	r7, #5
   18534:	b	1841c <__assert_fail@plt+0x6f34>
   18538:	bl	114a0 <abort@plt>
   1853c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   18540:	add	fp, sp, #28
   18544:	sub	sp, sp, #28
   18548:	movw	r5, #49600	; 0xc1c0
   1854c:	cmp	r2, #0
   18550:	mov	r4, r1
   18554:	mov	r7, r0
   18558:	str	r0, [sp, #20]
   1855c:	movt	r5, #2
   18560:	movne	r5, r2
   18564:	bl	1138c <__errno_location@plt>
   18568:	mov	sl, r0
   1856c:	ldm	r5, {r0, r1}
   18570:	ldr	r2, [r5, #40]	; 0x28
   18574:	ldr	r3, [r5, #44]	; 0x2c
   18578:	add	r9, r5, #8
   1857c:	ldr	r6, [sl]
   18580:	orr	r8, r1, #1
   18584:	mov	r1, #0
   18588:	str	r6, [sp, #24]
   1858c:	stm	sp, {r0, r8, r9}
   18590:	str	r2, [sp, #12]
   18594:	str	r3, [sp, #16]
   18598:	mov	r0, #0
   1859c:	mov	r2, r7
   185a0:	mov	r3, r4
   185a4:	mov	r6, r4
   185a8:	bl	17534 <__assert_fail@plt+0x604c>
   185ac:	add	r7, r0, #1
   185b0:	mov	r0, r7
   185b4:	bl	19840 <__assert_fail@plt+0x8358>
   185b8:	mov	r4, r0
   185bc:	ldr	r0, [r5]
   185c0:	ldr	r2, [r5, #44]	; 0x2c
   185c4:	ldr	r1, [r5, #40]	; 0x28
   185c8:	mov	r3, r6
   185cc:	stm	sp, {r0, r8, r9}
   185d0:	str	r2, [sp, #16]
   185d4:	str	r1, [sp, #12]
   185d8:	mov	r0, r4
   185dc:	mov	r1, r7
   185e0:	ldr	r2, [sp, #20]
   185e4:	bl	17534 <__assert_fail@plt+0x604c>
   185e8:	ldr	r0, [sp, #24]
   185ec:	str	r0, [sl]
   185f0:	mov	r0, r4
   185f4:	sub	sp, fp, #28
   185f8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   185fc:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   18600:	add	fp, sp, #28
   18604:	sub	sp, sp, #36	; 0x24
   18608:	movw	r8, #49600	; 0xc1c0
   1860c:	cmp	r3, #0
   18610:	mov	r4, r2
   18614:	str	r2, [sp, #24]
   18618:	mov	r5, r1
   1861c:	mov	r6, r0
   18620:	str	r0, [sp, #20]
   18624:	movt	r8, #2
   18628:	movne	r8, r3
   1862c:	bl	1138c <__errno_location@plt>
   18630:	str	r0, [sp, #28]
   18634:	cmp	r4, #0
   18638:	add	sl, r8, #8
   1863c:	ldm	r8, {r3, r9}
   18640:	ldr	r7, [r0]
   18644:	ldr	r1, [r8, #40]	; 0x28
   18648:	ldr	r2, [r8, #44]	; 0x2c
   1864c:	mov	r0, #0
   18650:	orreq	r9, r9, #1
   18654:	str	r7, [sp, #32]
   18658:	mov	r7, r5
   1865c:	stm	sp, {r3, r9, sl}
   18660:	str	r1, [sp, #12]
   18664:	str	r2, [sp, #16]
   18668:	mov	r1, #0
   1866c:	mov	r2, r6
   18670:	mov	r3, r5
   18674:	bl	17534 <__assert_fail@plt+0x604c>
   18678:	add	r4, r0, #1
   1867c:	mov	r5, r0
   18680:	mov	r0, r4
   18684:	bl	19840 <__assert_fail@plt+0x8358>
   18688:	mov	r6, r0
   1868c:	ldr	r0, [r8]
   18690:	ldr	r2, [r8, #44]	; 0x2c
   18694:	ldr	r1, [r8, #40]	; 0x28
   18698:	mov	r3, r7
   1869c:	stm	sp, {r0, r9, sl}
   186a0:	str	r2, [sp, #16]
   186a4:	str	r1, [sp, #12]
   186a8:	mov	r0, r6
   186ac:	mov	r1, r4
   186b0:	ldr	r2, [sp, #20]
   186b4:	bl	17534 <__assert_fail@plt+0x604c>
   186b8:	ldr	r0, [sp, #24]
   186bc:	ldr	r1, [sp, #32]
   186c0:	ldr	r2, [sp, #28]
   186c4:	cmp	r0, #0
   186c8:	str	r1, [r2]
   186cc:	strne	r5, [r0]
   186d0:	mov	r0, r6
   186d4:	sub	sp, fp, #28
   186d8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   186dc:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   186e0:	add	fp, sp, #24
   186e4:	movw	r5, #49468	; 0xc13c
   186e8:	movw	r8, #49464	; 0xc138
   186ec:	movt	r5, #2
   186f0:	movt	r8, #2
   186f4:	ldr	r0, [r5]
   186f8:	ldr	r4, [r8]
   186fc:	cmp	r0, #2
   18700:	blt	1872c <__assert_fail@plt+0x7244>
   18704:	add	r7, r4, #12
   18708:	mov	r6, #0
   1870c:	ldr	r0, [r7, r6, lsl #3]
   18710:	bl	13a64 <__assert_fail@plt+0x257c>
   18714:	ldr	r1, [r5]
   18718:	add	r2, r6, #2
   1871c:	add	r0, r6, #1
   18720:	mov	r6, r0
   18724:	cmp	r2, r1
   18728:	blt	1870c <__assert_fail@plt+0x7224>
   1872c:	ldr	r0, [r4, #4]
   18730:	movw	r7, #49648	; 0xc1f0
   18734:	movt	r7, #2
   18738:	cmp	r0, r7
   1873c:	beq	18754 <__assert_fail@plt+0x726c>
   18740:	bl	13a64 <__assert_fail@plt+0x257c>
   18744:	movw	r0, #49472	; 0xc140
   18748:	mov	r6, #256	; 0x100
   1874c:	movt	r0, #2
   18750:	strd	r6, [r0]
   18754:	movw	r6, #49472	; 0xc140
   18758:	movt	r6, #2
   1875c:	cmp	r4, r6
   18760:	beq	18770 <__assert_fail@plt+0x7288>
   18764:	mov	r0, r4
   18768:	bl	13a64 <__assert_fail@plt+0x257c>
   1876c:	str	r6, [r8]
   18770:	mov	r0, #1
   18774:	str	r0, [r5]
   18778:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   1877c:	movw	r3, #49600	; 0xc1c0
   18780:	mvn	r2, #0
   18784:	movt	r3, #2
   18788:	b	1878c <__assert_fail@plt+0x72a4>
   1878c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   18790:	add	fp, sp, #28
   18794:	sub	sp, sp, #44	; 0x2c
   18798:	mov	r7, r3
   1879c:	str	r2, [sp, #36]	; 0x24
   187a0:	str	r1, [sp, #32]
   187a4:	mov	r5, r0
   187a8:	bl	1138c <__errno_location@plt>
   187ac:	cmp	r5, #0
   187b0:	blt	1891c <__assert_fail@plt+0x7434>
   187b4:	cmn	r5, #-2147483647	; 0x80000001
   187b8:	beq	1891c <__assert_fail@plt+0x7434>
   187bc:	movw	r8, #49468	; 0xc13c
   187c0:	movw	r4, #49464	; 0xc138
   187c4:	str	r0, [sp, #28]
   187c8:	ldr	r0, [r0]
   187cc:	movt	r8, #2
   187d0:	movt	r4, #2
   187d4:	ldr	r1, [r8]
   187d8:	ldr	r6, [r4]
   187dc:	str	r0, [sp, #24]
   187e0:	cmp	r1, r5
   187e4:	ble	187f0 <__assert_fail@plt+0x7308>
   187e8:	mov	sl, r6
   187ec:	b	18858 <__assert_fail@plt+0x7370>
   187f0:	movw	r9, #49472	; 0xc140
   187f4:	mov	r0, #8
   187f8:	add	r2, r5, #1
   187fc:	str	r1, [fp, #-32]	; 0xffffffe0
   18800:	mvn	r3, #-2147483648	; 0x80000000
   18804:	movt	r9, #2
   18808:	str	r0, [sp]
   1880c:	sub	r2, r2, r1
   18810:	sub	r1, fp, #32
   18814:	subs	r0, r6, r9
   18818:	movne	r0, r6
   1881c:	bl	19a40 <__assert_fail@plt+0x8558>
   18820:	cmp	r6, r9
   18824:	mov	sl, r0
   18828:	str	r0, [r4]
   1882c:	ldrdeq	r0, [r9]
   18830:	stmeq	sl, {r0, r1}
   18834:	ldr	r1, [r8]
   18838:	ldr	r2, [fp, #-32]	; 0xffffffe0
   1883c:	add	r0, sl, r1, lsl #3
   18840:	sub	r1, r2, r1
   18844:	lsl	r2, r1, #3
   18848:	mov	r1, #0
   1884c:	bl	113a4 <memset@plt>
   18850:	ldr	r0, [fp, #-32]	; 0xffffffe0
   18854:	str	r0, [r8]
   18858:	mov	r9, sl
   1885c:	ldr	r6, [r9, r5, lsl #3]!
   18860:	ldr	r4, [r9, #4]!
   18864:	ldm	r7, {r0, r1}
   18868:	ldr	r2, [r7, #40]	; 0x28
   1886c:	ldr	r3, [r7, #44]	; 0x2c
   18870:	orr	r8, r1, #1
   18874:	add	r1, r7, #8
   18878:	stm	sp, {r0, r8}
   1887c:	add	r0, sp, #8
   18880:	str	r1, [sp, #20]
   18884:	stm	r0, {r1, r2, r3}
   18888:	mov	r0, r4
   1888c:	mov	r1, r6
   18890:	ldr	r2, [sp, #32]
   18894:	ldr	r3, [sp, #36]	; 0x24
   18898:	bl	17534 <__assert_fail@plt+0x604c>
   1889c:	cmp	r6, r0
   188a0:	bhi	18904 <__assert_fail@plt+0x741c>
   188a4:	add	r6, r0, #1
   188a8:	movw	r0, #49648	; 0xc1f0
   188ac:	movt	r0, #2
   188b0:	str	r6, [sl, r5, lsl #3]
   188b4:	cmp	r4, r0
   188b8:	beq	188c4 <__assert_fail@plt+0x73dc>
   188bc:	mov	r0, r4
   188c0:	bl	13a64 <__assert_fail@plt+0x257c>
   188c4:	mov	r0, r6
   188c8:	bl	19840 <__assert_fail@plt+0x8358>
   188cc:	str	r0, [r9]
   188d0:	mov	r4, r0
   188d4:	add	r3, sp, #8
   188d8:	ldr	r0, [r7]
   188dc:	ldr	r1, [r7, #40]	; 0x28
   188e0:	ldr	r2, [r7, #44]	; 0x2c
   188e4:	stm	sp, {r0, r8}
   188e8:	ldr	r0, [sp, #20]
   188ec:	stm	r3, {r0, r1, r2}
   188f0:	mov	r0, r4
   188f4:	mov	r1, r6
   188f8:	ldr	r2, [sp, #32]
   188fc:	ldr	r3, [sp, #36]	; 0x24
   18900:	bl	17534 <__assert_fail@plt+0x604c>
   18904:	ldr	r0, [sp, #28]
   18908:	ldr	r1, [sp, #24]
   1890c:	str	r1, [r0]
   18910:	mov	r0, r4
   18914:	sub	sp, fp, #28
   18918:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1891c:	bl	114a0 <abort@plt>
   18920:	movw	r3, #49600	; 0xc1c0
   18924:	movt	r3, #2
   18928:	b	1878c <__assert_fail@plt+0x72a4>
   1892c:	movw	r3, #49600	; 0xc1c0
   18930:	mov	r1, r0
   18934:	mov	r0, #0
   18938:	mvn	r2, #0
   1893c:	movt	r3, #2
   18940:	b	1878c <__assert_fail@plt+0x72a4>
   18944:	movw	r3, #49600	; 0xc1c0
   18948:	mov	r2, r1
   1894c:	mov	r1, r0
   18950:	mov	r0, #0
   18954:	movt	r3, #2
   18958:	b	1878c <__assert_fail@plt+0x72a4>
   1895c:	push	{fp, lr}
   18960:	mov	fp, sp
   18964:	sub	sp, sp, #48	; 0x30
   18968:	vmov.i32	q8, #0	; 0x00000000
   1896c:	mov	ip, #32
   18970:	mov	r3, sp
   18974:	mov	lr, r2
   18978:	cmp	r1, #10
   1897c:	add	r2, r3, #16
   18980:	vst1.64	{d16-d17}, [r3], ip
   18984:	vst1.64	{d16-d17}, [r3]
   18988:	vst1.64	{d16-d17}, [r2]
   1898c:	beq	189ac <__assert_fail@plt+0x74c4>
   18990:	str	r1, [sp]
   18994:	mov	r3, sp
   18998:	mov	r1, lr
   1899c:	mvn	r2, #0
   189a0:	bl	1878c <__assert_fail@plt+0x72a4>
   189a4:	mov	sp, fp
   189a8:	pop	{fp, pc}
   189ac:	bl	114a0 <abort@plt>
   189b0:	push	{r4, sl, fp, lr}
   189b4:	add	fp, sp, #8
   189b8:	sub	sp, sp, #48	; 0x30
   189bc:	mov	ip, r3
   189c0:	mov	r3, sp
   189c4:	vmov.i32	q8, #0	; 0x00000000
   189c8:	mov	lr, #32
   189cc:	cmp	r1, #10
   189d0:	add	r4, r3, #16
   189d4:	vst1.64	{d16-d17}, [r3], lr
   189d8:	vst1.64	{d16-d17}, [r3]
   189dc:	vst1.64	{d16-d17}, [r4]
   189e0:	beq	18a00 <__assert_fail@plt+0x7518>
   189e4:	str	r1, [sp]
   189e8:	mov	r1, r2
   189ec:	mov	r3, sp
   189f0:	mov	r2, ip
   189f4:	bl	1878c <__assert_fail@plt+0x72a4>
   189f8:	sub	sp, fp, #8
   189fc:	pop	{r4, sl, fp, pc}
   18a00:	bl	114a0 <abort@plt>
   18a04:	push	{fp, lr}
   18a08:	mov	fp, sp
   18a0c:	sub	sp, sp, #48	; 0x30
   18a10:	mov	r3, sp
   18a14:	vmov.i32	q8, #0	; 0x00000000
   18a18:	mov	ip, #32
   18a1c:	cmp	r0, #10
   18a20:	add	r2, r3, #16
   18a24:	vst1.64	{d16-d17}, [r3], ip
   18a28:	vst1.64	{d16-d17}, [r3]
   18a2c:	vst1.64	{d16-d17}, [r2]
   18a30:	beq	18a50 <__assert_fail@plt+0x7568>
   18a34:	str	r0, [sp]
   18a38:	mov	r3, sp
   18a3c:	mov	r0, #0
   18a40:	mvn	r2, #0
   18a44:	bl	1878c <__assert_fail@plt+0x72a4>
   18a48:	mov	sp, fp
   18a4c:	pop	{fp, pc}
   18a50:	bl	114a0 <abort@plt>
   18a54:	push	{fp, lr}
   18a58:	mov	fp, sp
   18a5c:	sub	sp, sp, #48	; 0x30
   18a60:	mov	r3, sp
   18a64:	vmov.i32	q8, #0	; 0x00000000
   18a68:	mov	ip, #32
   18a6c:	cmp	r0, #10
   18a70:	add	lr, r3, #16
   18a74:	vst1.64	{d16-d17}, [r3], ip
   18a78:	vst1.64	{d16-d17}, [r3]
   18a7c:	vst1.64	{d16-d17}, [lr]
   18a80:	beq	18a9c <__assert_fail@plt+0x75b4>
   18a84:	str	r0, [sp]
   18a88:	mov	r3, sp
   18a8c:	mov	r0, #0
   18a90:	bl	1878c <__assert_fail@plt+0x72a4>
   18a94:	mov	sp, fp
   18a98:	pop	{fp, pc}
   18a9c:	bl	114a0 <abort@plt>
   18aa0:	push	{r4, sl, fp, lr}
   18aa4:	add	fp, sp, #8
   18aa8:	sub	sp, sp, #48	; 0x30
   18aac:	mov	lr, r0
   18ab0:	movw	r0, #49600	; 0xc1c0
   18ab4:	mov	r3, #32
   18ab8:	mov	ip, r1
   18abc:	mov	r4, #1
   18ac0:	movt	r0, #2
   18ac4:	add	r1, r0, #16
   18ac8:	vld1.64	{d16-d17}, [r0], r3
   18acc:	mov	r3, sp
   18ad0:	vld1.64	{d18-d19}, [r1]
   18ad4:	add	r1, r3, #16
   18ad8:	vld1.64	{d20-d21}, [r0]
   18adc:	add	r0, r3, #32
   18ae0:	vst1.64	{d18-d19}, [r1]
   18ae4:	mov	r1, r3
   18ae8:	vst1.64	{d20-d21}, [r0]
   18aec:	mov	r0, #28
   18af0:	and	r0, r0, r2, lsr #3
   18af4:	and	r2, r2, #31
   18af8:	vst1.64	{d16-d17}, [r1], r0
   18afc:	ldr	r0, [r1, #8]
   18b00:	bic	r4, r4, r0, lsr r2
   18b04:	eor	r0, r0, r4, lsl r2
   18b08:	mov	r2, ip
   18b0c:	str	r0, [r1, #8]
   18b10:	mov	r0, #0
   18b14:	mov	r1, lr
   18b18:	bl	1878c <__assert_fail@plt+0x72a4>
   18b1c:	sub	sp, fp, #8
   18b20:	pop	{r4, sl, fp, pc}
   18b24:	push	{fp, lr}
   18b28:	mov	fp, sp
   18b2c:	sub	sp, sp, #48	; 0x30
   18b30:	mov	ip, r0
   18b34:	movw	r0, #49600	; 0xc1c0
   18b38:	mov	r3, #32
   18b3c:	movt	r0, #2
   18b40:	add	r2, r0, #16
   18b44:	vld1.64	{d16-d17}, [r0], r3
   18b48:	mov	r3, sp
   18b4c:	vld1.64	{d18-d19}, [r2]
   18b50:	add	r2, r3, #16
   18b54:	vld1.64	{d20-d21}, [r0]
   18b58:	add	r0, r3, #32
   18b5c:	vst1.64	{d18-d19}, [r2]
   18b60:	mov	r2, r3
   18b64:	vst1.64	{d20-d21}, [r0]
   18b68:	mov	r0, #28
   18b6c:	and	r0, r0, r1, lsr #3
   18b70:	and	r1, r1, #31
   18b74:	vst1.64	{d16-d17}, [r2], r0
   18b78:	mov	r0, #1
   18b7c:	ldr	lr, [r2, #8]
   18b80:	bic	r0, r0, lr, lsr r1
   18b84:	eor	r0, lr, r0, lsl r1
   18b88:	mov	r1, ip
   18b8c:	str	r0, [r2, #8]
   18b90:	mov	r0, #0
   18b94:	mvn	r2, #0
   18b98:	bl	1878c <__assert_fail@plt+0x72a4>
   18b9c:	mov	sp, fp
   18ba0:	pop	{fp, pc}
   18ba4:	push	{fp, lr}
   18ba8:	mov	fp, sp
   18bac:	sub	sp, sp, #48	; 0x30
   18bb0:	movw	r2, #49600	; 0xc1c0
   18bb4:	mov	r3, #32
   18bb8:	mov	r1, r0
   18bbc:	movt	r2, #2
   18bc0:	add	r0, r2, #16
   18bc4:	vld1.64	{d16-d17}, [r2], r3
   18bc8:	mov	r3, sp
   18bcc:	vld1.64	{d18-d19}, [r0]
   18bd0:	add	r0, r3, #16
   18bd4:	vld1.64	{d20-d21}, [r2]
   18bd8:	mov	r2, r3
   18bdc:	vst1.64	{d18-d19}, [r0]
   18be0:	add	r0, r3, #32
   18be4:	vst1.64	{d20-d21}, [r0]
   18be8:	mov	r0, #12
   18bec:	vst1.64	{d16-d17}, [r2], r0
   18bf0:	ldr	r0, [r2]
   18bf4:	orr	r0, r0, #67108864	; 0x4000000
   18bf8:	str	r0, [r2]
   18bfc:	mov	r0, #0
   18c00:	mvn	r2, #0
   18c04:	bl	1878c <__assert_fail@plt+0x72a4>
   18c08:	mov	sp, fp
   18c0c:	pop	{fp, pc}
   18c10:	push	{fp, lr}
   18c14:	mov	fp, sp
   18c18:	sub	sp, sp, #48	; 0x30
   18c1c:	mov	ip, r1
   18c20:	mov	r1, r0
   18c24:	movw	r0, #49600	; 0xc1c0
   18c28:	mov	r3, #32
   18c2c:	movt	r0, #2
   18c30:	add	r2, r0, #16
   18c34:	vld1.64	{d16-d17}, [r0], r3
   18c38:	mov	r3, sp
   18c3c:	vld1.64	{d18-d19}, [r2]
   18c40:	add	r2, r3, #16
   18c44:	vld1.64	{d20-d21}, [r0]
   18c48:	add	r0, r3, #32
   18c4c:	vst1.64	{d18-d19}, [r2]
   18c50:	mov	r2, r3
   18c54:	vst1.64	{d20-d21}, [r0]
   18c58:	mov	r0, #12
   18c5c:	vst1.64	{d16-d17}, [r2], r0
   18c60:	ldr	r0, [r2]
   18c64:	orr	r0, r0, #67108864	; 0x4000000
   18c68:	str	r0, [r2]
   18c6c:	mov	r0, #0
   18c70:	mov	r2, ip
   18c74:	bl	1878c <__assert_fail@plt+0x72a4>
   18c78:	mov	sp, fp
   18c7c:	pop	{fp, pc}
   18c80:	push	{r4, sl, fp, lr}
   18c84:	add	fp, sp, #8
   18c88:	sub	sp, sp, #96	; 0x60
   18c8c:	mov	ip, r2
   18c90:	mov	r2, sp
   18c94:	vmov.i32	q8, #0	; 0x00000000
   18c98:	mov	r4, #28
   18c9c:	cmp	r1, #10
   18ca0:	mov	r3, r2
   18ca4:	add	lr, r2, #16
   18ca8:	vst1.64	{d16-d17}, [r3], r4
   18cac:	vst1.64	{d16-d17}, [lr]
   18cb0:	vst1.32	{d16-d17}, [r3]
   18cb4:	beq	18d04 <__assert_fail@plt+0x781c>
   18cb8:	vld1.64	{d16-d17}, [r2], r4
   18cbc:	vld1.64	{d18-d19}, [lr]
   18cc0:	add	r3, sp, #48	; 0x30
   18cc4:	add	r4, r3, #4
   18cc8:	vld1.32	{d20-d21}, [r2]
   18ccc:	add	r2, r3, #20
   18cd0:	vst1.32	{d16-d17}, [r4]
   18cd4:	vst1.32	{d18-d19}, [r2]
   18cd8:	add	r2, r3, #32
   18cdc:	vst1.32	{d20-d21}, [r2]
   18ce0:	str	r1, [sp, #48]	; 0x30
   18ce4:	mvn	r2, #0
   18ce8:	ldr	r1, [sp, #60]	; 0x3c
   18cec:	orr	r1, r1, #67108864	; 0x4000000
   18cf0:	str	r1, [sp, #60]	; 0x3c
   18cf4:	mov	r1, ip
   18cf8:	bl	1878c <__assert_fail@plt+0x72a4>
   18cfc:	sub	sp, fp, #8
   18d00:	pop	{r4, sl, fp, pc}
   18d04:	bl	114a0 <abort@plt>
   18d08:	push	{r4, r5, fp, lr}
   18d0c:	add	fp, sp, #8
   18d10:	sub	sp, sp, #48	; 0x30
   18d14:	mov	ip, r3
   18d18:	movw	r3, #49600	; 0xc1c0
   18d1c:	mov	lr, #32
   18d20:	cmp	r1, #0
   18d24:	mov	r5, sp
   18d28:	movt	r3, #2
   18d2c:	cmpne	r2, #0
   18d30:	add	r4, r3, #16
   18d34:	vld1.64	{d16-d17}, [r3], lr
   18d38:	vld1.64	{d18-d19}, [r4]
   18d3c:	add	r4, r5, #16
   18d40:	vld1.64	{d20-d21}, [r3]
   18d44:	vst1.64	{d16-d17}, [r5], lr
   18d48:	mov	r3, #10
   18d4c:	vst1.64	{d18-d19}, [r4]
   18d50:	vst1.64	{d20-d21}, [r5]
   18d54:	str	r3, [sp]
   18d58:	bne	18d60 <__assert_fail@plt+0x7878>
   18d5c:	bl	114a0 <abort@plt>
   18d60:	str	r2, [sp, #44]	; 0x2c
   18d64:	str	r1, [sp, #40]	; 0x28
   18d68:	mov	r3, sp
   18d6c:	mov	r1, ip
   18d70:	mvn	r2, #0
   18d74:	bl	1878c <__assert_fail@plt+0x72a4>
   18d78:	sub	sp, fp, #8
   18d7c:	pop	{r4, r5, fp, pc}
   18d80:	push	{r4, r5, fp, lr}
   18d84:	add	fp, sp, #8
   18d88:	sub	sp, sp, #48	; 0x30
   18d8c:	mov	lr, r3
   18d90:	movw	r3, #49600	; 0xc1c0
   18d94:	mov	ip, #32
   18d98:	cmp	r1, #0
   18d9c:	mov	r5, sp
   18da0:	movt	r3, #2
   18da4:	cmpne	r2, #0
   18da8:	add	r4, r3, #16
   18dac:	vld1.64	{d16-d17}, [r3], ip
   18db0:	vld1.64	{d18-d19}, [r4]
   18db4:	add	r4, r5, #16
   18db8:	vld1.64	{d20-d21}, [r3]
   18dbc:	vst1.64	{d16-d17}, [r5], ip
   18dc0:	mov	r3, #10
   18dc4:	vst1.64	{d18-d19}, [r4]
   18dc8:	vst1.64	{d20-d21}, [r5]
   18dcc:	str	r3, [sp]
   18dd0:	bne	18dd8 <__assert_fail@plt+0x78f0>
   18dd4:	bl	114a0 <abort@plt>
   18dd8:	ldr	ip, [fp, #8]
   18ddc:	str	r2, [sp, #44]	; 0x2c
   18de0:	str	r1, [sp, #40]	; 0x28
   18de4:	mov	r3, sp
   18de8:	mov	r1, lr
   18dec:	mov	r2, ip
   18df0:	bl	1878c <__assert_fail@plt+0x72a4>
   18df4:	sub	sp, fp, #8
   18df8:	pop	{r4, r5, fp, pc}
   18dfc:	push	{r4, sl, fp, lr}
   18e00:	add	fp, sp, #8
   18e04:	sub	sp, sp, #48	; 0x30
   18e08:	mov	ip, r2
   18e0c:	movw	r2, #49600	; 0xc1c0
   18e10:	mov	lr, #32
   18e14:	cmp	r0, #0
   18e18:	mov	r4, sp
   18e1c:	movt	r2, #2
   18e20:	cmpne	r1, #0
   18e24:	add	r3, r2, #16
   18e28:	vld1.64	{d16-d17}, [r2], lr
   18e2c:	vld1.64	{d18-d19}, [r3]
   18e30:	add	r3, r4, #16
   18e34:	vld1.64	{d20-d21}, [r2]
   18e38:	vst1.64	{d16-d17}, [r4], lr
   18e3c:	mov	r2, #10
   18e40:	vst1.64	{d18-d19}, [r3]
   18e44:	vst1.64	{d20-d21}, [r4]
   18e48:	str	r2, [sp]
   18e4c:	bne	18e54 <__assert_fail@plt+0x796c>
   18e50:	bl	114a0 <abort@plt>
   18e54:	str	r1, [sp, #44]	; 0x2c
   18e58:	str	r0, [sp, #40]	; 0x28
   18e5c:	mov	r3, sp
   18e60:	mov	r0, #0
   18e64:	mov	r1, ip
   18e68:	mvn	r2, #0
   18e6c:	bl	1878c <__assert_fail@plt+0x72a4>
   18e70:	sub	sp, fp, #8
   18e74:	pop	{r4, sl, fp, pc}
   18e78:	push	{r4, r5, fp, lr}
   18e7c:	add	fp, sp, #8
   18e80:	sub	sp, sp, #48	; 0x30
   18e84:	mov	lr, r2
   18e88:	movw	r2, #49600	; 0xc1c0
   18e8c:	mov	ip, r3
   18e90:	mov	r3, #32
   18e94:	cmp	r0, #0
   18e98:	mov	r5, sp
   18e9c:	movt	r2, #2
   18ea0:	cmpne	r1, #0
   18ea4:	add	r4, r2, #16
   18ea8:	vld1.64	{d16-d17}, [r2], r3
   18eac:	vld1.64	{d18-d19}, [r4]
   18eb0:	add	r4, r5, #16
   18eb4:	vld1.64	{d20-d21}, [r2]
   18eb8:	vst1.64	{d16-d17}, [r5], r3
   18ebc:	mov	r2, #10
   18ec0:	vst1.64	{d18-d19}, [r4]
   18ec4:	vst1.64	{d20-d21}, [r5]
   18ec8:	str	r2, [sp]
   18ecc:	bne	18ed4 <__assert_fail@plt+0x79ec>
   18ed0:	bl	114a0 <abort@plt>
   18ed4:	str	r1, [sp, #44]	; 0x2c
   18ed8:	str	r0, [sp, #40]	; 0x28
   18edc:	mov	r3, sp
   18ee0:	mov	r0, #0
   18ee4:	mov	r1, lr
   18ee8:	mov	r2, ip
   18eec:	bl	1878c <__assert_fail@plt+0x72a4>
   18ef0:	sub	sp, fp, #8
   18ef4:	pop	{r4, r5, fp, pc}
   18ef8:	movw	r3, #49480	; 0xc148
   18efc:	movt	r3, #2
   18f00:	b	1878c <__assert_fail@plt+0x72a4>
   18f04:	movw	r3, #49480	; 0xc148
   18f08:	mov	r2, r1
   18f0c:	mov	r1, r0
   18f10:	mov	r0, #0
   18f14:	movt	r3, #2
   18f18:	b	1878c <__assert_fail@plt+0x72a4>
   18f1c:	movw	r3, #49480	; 0xc148
   18f20:	mvn	r2, #0
   18f24:	movt	r3, #2
   18f28:	b	1878c <__assert_fail@plt+0x72a4>
   18f2c:	movw	r3, #49480	; 0xc148
   18f30:	mov	r1, r0
   18f34:	mov	r0, #0
   18f38:	mvn	r2, #0
   18f3c:	movt	r3, #2
   18f40:	b	1878c <__assert_fail@plt+0x72a4>
   18f44:	push	{r4, r5, fp, lr}
   18f48:	add	fp, sp, #8
   18f4c:	mov	r5, r0
   18f50:	mov	r4, r1
   18f54:	mov	r0, #0
   18f58:	mov	r2, #5
   18f5c:	mov	r1, r5
   18f60:	bl	11278 <dcgettext@plt>
   18f64:	cmp	r0, r5
   18f68:	popne	{r4, r5, fp, pc}
   18f6c:	bl	1a3c0 <__assert_fail@plt+0x8ed8>
   18f70:	ldrb	r1, [r0]
   18f74:	and	r1, r1, #223	; 0xdf
   18f78:	cmp	r1, #71	; 0x47
   18f7c:	beq	18fe4 <__assert_fail@plt+0x7afc>
   18f80:	cmp	r1, #85	; 0x55
   18f84:	bne	19008 <__assert_fail@plt+0x7b20>
   18f88:	ldrb	r1, [r0, #1]
   18f8c:	and	r1, r1, #223	; 0xdf
   18f90:	cmp	r1, #84	; 0x54
   18f94:	bne	19008 <__assert_fail@plt+0x7b20>
   18f98:	ldrb	r1, [r0, #2]
   18f9c:	and	r1, r1, #223	; 0xdf
   18fa0:	cmp	r1, #70	; 0x46
   18fa4:	ldrbeq	r1, [r0, #3]
   18fa8:	cmpeq	r1, #45	; 0x2d
   18fac:	bne	19008 <__assert_fail@plt+0x7b20>
   18fb0:	ldrb	r1, [r0, #4]
   18fb4:	cmp	r1, #56	; 0x38
   18fb8:	ldrbeq	r0, [r0, #5]
   18fbc:	cmpeq	r0, #0
   18fc0:	bne	19008 <__assert_fail@plt+0x7b20>
   18fc4:	ldrb	r1, [r5]
   18fc8:	movw	r2, #47530	; 0xb9aa
   18fcc:	movw	r0, #47534	; 0xb9ae
   18fd0:	movt	r2, #1
   18fd4:	movt	r0, #1
   18fd8:	cmp	r1, #96	; 0x60
   18fdc:	moveq	r0, r2
   18fe0:	pop	{r4, r5, fp, pc}
   18fe4:	ldrb	r1, [r0, #1]
   18fe8:	and	r1, r1, #223	; 0xdf
   18fec:	cmp	r1, #66	; 0x42
   18ff0:	bne	19008 <__assert_fail@plt+0x7b20>
   18ff4:	ldrb	r1, [r0, #2]
   18ff8:	cmp	r1, #49	; 0x31
   18ffc:	ldrbeq	r1, [r0, #3]
   19000:	cmpeq	r1, #56	; 0x38
   19004:	beq	19024 <__assert_fail@plt+0x7b3c>
   19008:	movw	r1, #47524	; 0xb9a4
   1900c:	movw	r0, #47528	; 0xb9a8
   19010:	cmp	r4, #9
   19014:	movt	r1, #1
   19018:	movt	r0, #1
   1901c:	moveq	r0, r1
   19020:	pop	{r4, r5, fp, pc}
   19024:	ldrb	r1, [r0, #4]
   19028:	cmp	r1, #48	; 0x30
   1902c:	ldrbeq	r1, [r0, #5]
   19030:	cmpeq	r1, #51	; 0x33
   19034:	bne	19008 <__assert_fail@plt+0x7b20>
   19038:	ldrb	r1, [r0, #6]
   1903c:	cmp	r1, #48	; 0x30
   19040:	ldrbeq	r0, [r0, #7]
   19044:	cmpeq	r0, #0
   19048:	bne	19008 <__assert_fail@plt+0x7b20>
   1904c:	ldrb	r1, [r5]
   19050:	movw	r2, #47538	; 0xb9b2
   19054:	movw	r0, #47542	; 0xb9b6
   19058:	movt	r2, #1
   1905c:	movt	r0, #1
   19060:	b	18fd8 <__assert_fail@plt+0x7af0>
   19064:	push	{r4, sl, fp, lr}
   19068:	add	fp, sp, #8
   1906c:	sub	sp, sp, #104	; 0x68
   19070:	movw	r1, #48345	; 0xbcd9
   19074:	mov	r4, r0
   19078:	mov	r2, sp
   1907c:	mov	r0, #3
   19080:	movt	r1, #1
   19084:	bl	114b8 <__lxstat64@plt>
   19088:	mov	r1, r0
   1908c:	mov	r0, #0
   19090:	cmp	r1, #0
   19094:	beq	190a0 <__assert_fail@plt+0x7bb8>
   19098:	sub	sp, fp, #8
   1909c:	pop	{r4, sl, fp, pc}
   190a0:	ldr	r0, [sp, #96]	; 0x60
   190a4:	ldr	r1, [sp, #100]	; 0x64
   190a8:	ldm	sp, {r2, r3}
   190ac:	stm	r4, {r0, r1, r2, r3}
   190b0:	mov	r0, r4
   190b4:	sub	sp, fp, #8
   190b8:	pop	{r4, sl, fp, pc}
   190bc:	push	{r4, r5, r6, r7, fp, lr}
   190c0:	add	fp, sp, #16
   190c4:	mov	r4, r0
   190c8:	cmp	r0, #2
   190cc:	movhi	r0, r4
   190d0:	pophi	{r4, r5, r6, r7, fp, pc}
   190d4:	mov	r0, r4
   190d8:	bl	1a494 <__assert_fail@plt+0x8fac>
   190dc:	mov	r5, r0
   190e0:	bl	1138c <__errno_location@plt>
   190e4:	ldr	r7, [r0]
   190e8:	mov	r6, r0
   190ec:	mov	r0, r4
   190f0:	bl	114ac <close@plt>
   190f4:	mov	r0, r5
   190f8:	str	r7, [r6]
   190fc:	pop	{r4, r5, r6, r7, fp, pc}
   19100:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   19104:	add	fp, sp, #24
   19108:	sub	sp, sp, #32
   1910c:	ldr	r6, [fp, #12]
   19110:	ldr	r7, [fp, #8]
   19114:	mov	r4, r2
   19118:	mov	r8, r0
   1911c:	cmp	r1, #0
   19120:	beq	19148 <__assert_fail@plt+0x7c60>
   19124:	movw	r2, #47632	; 0xba10
   19128:	mov	r5, r1
   1912c:	str	r3, [sp, #4]
   19130:	str	r4, [sp]
   19134:	mov	r0, r8
   19138:	mov	r1, #1
   1913c:	movt	r2, #1
   19140:	mov	r3, r5
   19144:	b	19160 <__assert_fail@plt+0x7c78>
   19148:	movw	r2, #47644	; 0xba1c
   1914c:	str	r3, [sp]
   19150:	mov	r0, r8
   19154:	mov	r1, #1
   19158:	mov	r3, r4
   1915c:	movt	r2, #1
   19160:	bl	113c8 <__fprintf_chk@plt>
   19164:	movw	r1, #47651	; 0xba23
   19168:	mov	r0, #0
   1916c:	mov	r2, #5
   19170:	movt	r1, #1
   19174:	bl	11278 <dcgettext@plt>
   19178:	movw	r2, #48347	; 0xbcdb
   1917c:	mov	r3, r0
   19180:	movw	r0, #2022	; 0x7e6
   19184:	mov	r1, #1
   19188:	str	r0, [sp]
   1918c:	movt	r2, #1
   19190:	mov	r0, r8
   19194:	bl	113c8 <__fprintf_chk@plt>
   19198:	movw	r4, #45567	; 0xb1ff
   1919c:	mov	r1, r8
   191a0:	movt	r4, #1
   191a4:	mov	r0, r4
   191a8:	bl	111dc <fputs_unlocked@plt>
   191ac:	movw	r1, #47655	; 0xba27
   191b0:	mov	r0, #0
   191b4:	mov	r2, #5
   191b8:	movt	r1, #1
   191bc:	bl	11278 <dcgettext@plt>
   191c0:	movw	r3, #47826	; 0xbad2
   191c4:	mov	r2, r0
   191c8:	mov	r0, r8
   191cc:	mov	r1, #1
   191d0:	movt	r3, #1
   191d4:	bl	113c8 <__fprintf_chk@plt>
   191d8:	mov	r0, r4
   191dc:	mov	r1, r8
   191e0:	bl	111dc <fputs_unlocked@plt>
   191e4:	cmp	r6, #9
   191e8:	bhi	19224 <__assert_fail@plt+0x7d3c>
   191ec:	add	r0, pc, #0
   191f0:	ldr	pc, [r0, r6, lsl #2]
   191f4:	andeq	r9, r1, ip, lsl r2
   191f8:	andeq	r9, r1, r0, lsr r2
   191fc:	andeq	r9, r1, r0, ror #4
   19200:	andeq	r9, r1, r8, lsl #5
   19204:			; <UNDEFINED> instruction: 0x000192b0
   19208:	ldrdeq	r9, [r1], -r8
   1920c:	andeq	r9, r1, r0, lsl #6
   19210:	andeq	r9, r1, r8, lsr r3
   19214:	ldrdeq	r9, [r1], -r8
   19218:	andeq	r9, r1, r0, lsl #7
   1921c:	sub	sp, fp, #24
   19220:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   19224:	movw	r1, #48179	; 0xbc33
   19228:	movt	r1, #1
   1922c:	b	19388 <__assert_fail@plt+0x7ea0>
   19230:	movw	r1, #47860	; 0xbaf4
   19234:	mov	r0, #0
   19238:	mov	r2, #5
   1923c:	movt	r1, #1
   19240:	bl	11278 <dcgettext@plt>
   19244:	ldr	r3, [r7]
   19248:	mov	r2, r0
   1924c:	mov	r0, r8
   19250:	mov	r1, #1
   19254:	sub	sp, fp, #24
   19258:	pop	{r4, r5, r6, r7, r8, sl, fp, lr}
   1925c:	b	113c8 <__fprintf_chk@plt>
   19260:	movw	r1, #47876	; 0xbb04
   19264:	mov	r0, #0
   19268:	mov	r2, #5
   1926c:	movt	r1, #1
   19270:	bl	11278 <dcgettext@plt>
   19274:	mov	r2, r0
   19278:	ldr	r3, [r7]
   1927c:	ldr	r0, [r7, #4]
   19280:	str	r0, [sp]
   19284:	b	19374 <__assert_fail@plt+0x7e8c>
   19288:	movw	r1, #47899	; 0xbb1b
   1928c:	mov	r0, #0
   19290:	mov	r2, #5
   19294:	movt	r1, #1
   19298:	bl	11278 <dcgettext@plt>
   1929c:	ldr	r3, [r7]
   192a0:	mov	r2, r0
   192a4:	ldmib	r7, {r0, r1}
   192a8:	stm	sp, {r0, r1}
   192ac:	b	19374 <__assert_fail@plt+0x7e8c>
   192b0:	movw	r1, #47927	; 0xbb37
   192b4:	mov	r0, #0
   192b8:	mov	r2, #5
   192bc:	movt	r1, #1
   192c0:	bl	11278 <dcgettext@plt>
   192c4:	ldr	r3, [r7]
   192c8:	mov	r2, r0
   192cc:	ldmib	r7, {r0, r1, r7}
   192d0:	stm	sp, {r0, r1, r7}
   192d4:	b	19374 <__assert_fail@plt+0x7e8c>
   192d8:	movw	r1, #47959	; 0xbb57
   192dc:	mov	r0, #0
   192e0:	mov	r2, #5
   192e4:	movt	r1, #1
   192e8:	bl	11278 <dcgettext@plt>
   192ec:	ldr	r3, [r7]
   192f0:	mov	r2, r0
   192f4:	ldmib	r7, {r0, r1, r6, r7}
   192f8:	stm	sp, {r0, r1, r6, r7}
   192fc:	b	19374 <__assert_fail@plt+0x7e8c>
   19300:	movw	r1, #47995	; 0xbb7b
   19304:	mov	r0, #0
   19308:	mov	r2, #5
   1930c:	movt	r1, #1
   19310:	bl	11278 <dcgettext@plt>
   19314:	ldr	r3, [r7]
   19318:	mov	r2, r0
   1931c:	ldmib	r7, {r0, r1, r6}
   19320:	ldr	r5, [r7, #16]
   19324:	ldr	r7, [r7, #20]
   19328:	stm	sp, {r0, r1, r6}
   1932c:	str	r5, [sp, #12]
   19330:	str	r7, [sp, #16]
   19334:	b	19374 <__assert_fail@plt+0x7e8c>
   19338:	movw	r1, #48035	; 0xbba3
   1933c:	mov	r0, #0
   19340:	mov	r2, #5
   19344:	movt	r1, #1
   19348:	bl	11278 <dcgettext@plt>
   1934c:	ldr	r3, [r7]
   19350:	mov	r2, r0
   19354:	ldmib	r7, {r0, r1, r6}
   19358:	ldr	r5, [r7, #16]
   1935c:	ldr	r4, [r7, #20]
   19360:	ldr	r7, [r7, #24]
   19364:	stm	sp, {r0, r1, r6}
   19368:	str	r5, [sp, #12]
   1936c:	str	r4, [sp, #16]
   19370:	str	r7, [sp, #20]
   19374:	mov	r0, r8
   19378:	mov	r1, #1
   1937c:	b	19428 <__assert_fail@plt+0x7f40>
   19380:	movw	r1, #48127	; 0xbbff
   19384:	movt	r1, #1
   19388:	mov	r0, #0
   1938c:	mov	r2, #5
   19390:	bl	11278 <dcgettext@plt>
   19394:	mov	ip, r0
   19398:	ldr	r3, [r7]
   1939c:	ldr	r0, [r7, #4]
   193a0:	ldr	r1, [r7, #8]
   193a4:	ldr	r6, [r7, #12]
   193a8:	ldr	r5, [r7, #16]
   193ac:	ldr	r4, [r7, #20]
   193b0:	ldr	r2, [r7, #24]
   193b4:	ldr	lr, [r7, #28]
   193b8:	ldr	r7, [r7, #32]
   193bc:	stm	sp, {r0, r1, r6}
   193c0:	str	r5, [sp, #12]
   193c4:	str	r4, [sp, #16]
   193c8:	str	r2, [sp, #20]
   193cc:	str	lr, [sp, #24]
   193d0:	str	r7, [sp, #28]
   193d4:	b	1941c <__assert_fail@plt+0x7f34>
   193d8:	movw	r1, #48079	; 0xbbcf
   193dc:	mov	r0, #0
   193e0:	mov	r2, #5
   193e4:	movt	r1, #1
   193e8:	bl	11278 <dcgettext@plt>
   193ec:	mov	ip, r0
   193f0:	ldr	r3, [r7]
   193f4:	ldmib	r7, {r0, r1, r6}
   193f8:	ldr	r5, [r7, #16]
   193fc:	ldr	r4, [r7, #20]
   19400:	ldr	r2, [r7, #24]
   19404:	ldr	r7, [r7, #28]
   19408:	stm	sp, {r0, r1, r6}
   1940c:	str	r5, [sp, #12]
   19410:	str	r4, [sp, #16]
   19414:	str	r2, [sp, #20]
   19418:	str	r7, [sp, #24]
   1941c:	mov	r0, r8
   19420:	mov	r1, #1
   19424:	mov	r2, ip
   19428:	bl	113c8 <__fprintf_chk@plt>
   1942c:	sub	sp, fp, #24
   19430:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   19434:	push	{r4, sl, fp, lr}
   19438:	add	fp, sp, #8
   1943c:	sub	sp, sp, #8
   19440:	ldr	ip, [fp, #8]
   19444:	mov	lr, #0
   19448:	ldr	r4, [ip, lr, lsl #2]
   1944c:	add	lr, lr, #1
   19450:	cmp	r4, #0
   19454:	bne	19448 <__assert_fail@plt+0x7f60>
   19458:	sub	r4, lr, #1
   1945c:	str	ip, [sp]
   19460:	str	r4, [sp, #4]
   19464:	bl	19100 <__assert_fail@plt+0x7c18>
   19468:	sub	sp, fp, #8
   1946c:	pop	{r4, sl, fp, pc}
   19470:	push	{fp, lr}
   19474:	mov	fp, sp
   19478:	sub	sp, sp, #48	; 0x30
   1947c:	ldr	ip, [fp, #8]
   19480:	ldr	lr, [ip]
   19484:	cmp	lr, #0
   19488:	str	lr, [sp, #8]
   1948c:	beq	19528 <__assert_fail@plt+0x8040>
   19490:	ldr	lr, [ip, #4]
   19494:	cmp	lr, #0
   19498:	str	lr, [sp, #12]
   1949c:	beq	19530 <__assert_fail@plt+0x8048>
   194a0:	ldr	lr, [ip, #8]
   194a4:	cmp	lr, #0
   194a8:	str	lr, [sp, #16]
   194ac:	beq	19538 <__assert_fail@plt+0x8050>
   194b0:	ldr	lr, [ip, #12]
   194b4:	cmp	lr, #0
   194b8:	str	lr, [sp, #20]
   194bc:	beq	19540 <__assert_fail@plt+0x8058>
   194c0:	ldr	lr, [ip, #16]
   194c4:	cmp	lr, #0
   194c8:	str	lr, [sp, #24]
   194cc:	beq	19548 <__assert_fail@plt+0x8060>
   194d0:	ldr	lr, [ip, #20]
   194d4:	cmp	lr, #0
   194d8:	str	lr, [sp, #28]
   194dc:	beq	19550 <__assert_fail@plt+0x8068>
   194e0:	ldr	lr, [ip, #24]
   194e4:	cmp	lr, #0
   194e8:	str	lr, [sp, #32]
   194ec:	beq	19558 <__assert_fail@plt+0x8070>
   194f0:	ldr	lr, [ip, #28]
   194f4:	cmp	lr, #0
   194f8:	str	lr, [sp, #36]	; 0x24
   194fc:	beq	19560 <__assert_fail@plt+0x8078>
   19500:	ldr	lr, [ip, #32]
   19504:	cmp	lr, #0
   19508:	str	lr, [sp, #40]	; 0x28
   1950c:	beq	19568 <__assert_fail@plt+0x8080>
   19510:	ldr	lr, [ip, #36]	; 0x24
   19514:	mov	ip, #10
   19518:	cmp	lr, #0
   1951c:	str	lr, [sp, #44]	; 0x2c
   19520:	movweq	ip, #9
   19524:	b	1956c <__assert_fail@plt+0x8084>
   19528:	mov	ip, #0
   1952c:	b	1956c <__assert_fail@plt+0x8084>
   19530:	mov	ip, #1
   19534:	b	1956c <__assert_fail@plt+0x8084>
   19538:	mov	ip, #2
   1953c:	b	1956c <__assert_fail@plt+0x8084>
   19540:	mov	ip, #3
   19544:	b	1956c <__assert_fail@plt+0x8084>
   19548:	mov	ip, #4
   1954c:	b	1956c <__assert_fail@plt+0x8084>
   19550:	mov	ip, #5
   19554:	b	1956c <__assert_fail@plt+0x8084>
   19558:	mov	ip, #6
   1955c:	b	1956c <__assert_fail@plt+0x8084>
   19560:	mov	ip, #7
   19564:	b	1956c <__assert_fail@plt+0x8084>
   19568:	mov	ip, #8
   1956c:	add	lr, sp, #8
   19570:	str	ip, [sp, #4]
   19574:	str	lr, [sp]
   19578:	bl	19100 <__assert_fail@plt+0x7c18>
   1957c:	mov	sp, fp
   19580:	pop	{fp, pc}
   19584:	push	{fp, lr}
   19588:	mov	fp, sp
   1958c:	sub	sp, sp, #56	; 0x38
   19590:	add	ip, fp, #8
   19594:	str	ip, [sp, #12]
   19598:	ldr	lr, [fp, #8]
   1959c:	cmp	lr, #0
   195a0:	str	lr, [sp, #16]
   195a4:	beq	19640 <__assert_fail@plt+0x8158>
   195a8:	ldr	lr, [ip, #4]
   195ac:	cmp	lr, #0
   195b0:	str	lr, [sp, #20]
   195b4:	beq	19648 <__assert_fail@plt+0x8160>
   195b8:	ldr	lr, [ip, #8]
   195bc:	cmp	lr, #0
   195c0:	str	lr, [sp, #24]
   195c4:	beq	19650 <__assert_fail@plt+0x8168>
   195c8:	ldr	lr, [ip, #12]
   195cc:	cmp	lr, #0
   195d0:	str	lr, [sp, #28]
   195d4:	beq	19658 <__assert_fail@plt+0x8170>
   195d8:	ldr	lr, [ip, #16]
   195dc:	cmp	lr, #0
   195e0:	str	lr, [sp, #32]
   195e4:	beq	19660 <__assert_fail@plt+0x8178>
   195e8:	ldr	lr, [ip, #20]
   195ec:	cmp	lr, #0
   195f0:	str	lr, [sp, #36]	; 0x24
   195f4:	beq	19668 <__assert_fail@plt+0x8180>
   195f8:	ldr	lr, [ip, #24]
   195fc:	cmp	lr, #0
   19600:	str	lr, [sp, #40]	; 0x28
   19604:	beq	19670 <__assert_fail@plt+0x8188>
   19608:	ldr	lr, [ip, #28]
   1960c:	cmp	lr, #0
   19610:	str	lr, [sp, #44]	; 0x2c
   19614:	beq	19678 <__assert_fail@plt+0x8190>
   19618:	ldr	lr, [ip, #32]
   1961c:	cmp	lr, #0
   19620:	str	lr, [sp, #48]	; 0x30
   19624:	beq	19680 <__assert_fail@plt+0x8198>
   19628:	ldr	lr, [ip, #36]	; 0x24
   1962c:	mov	ip, #10
   19630:	cmp	lr, #0
   19634:	str	lr, [sp, #52]	; 0x34
   19638:	movweq	ip, #9
   1963c:	b	19684 <__assert_fail@plt+0x819c>
   19640:	mov	ip, #0
   19644:	b	19684 <__assert_fail@plt+0x819c>
   19648:	mov	ip, #1
   1964c:	b	19684 <__assert_fail@plt+0x819c>
   19650:	mov	ip, #2
   19654:	b	19684 <__assert_fail@plt+0x819c>
   19658:	mov	ip, #3
   1965c:	b	19684 <__assert_fail@plt+0x819c>
   19660:	mov	ip, #4
   19664:	b	19684 <__assert_fail@plt+0x819c>
   19668:	mov	ip, #5
   1966c:	b	19684 <__assert_fail@plt+0x819c>
   19670:	mov	ip, #6
   19674:	b	19684 <__assert_fail@plt+0x819c>
   19678:	mov	ip, #7
   1967c:	b	19684 <__assert_fail@plt+0x819c>
   19680:	mov	ip, #8
   19684:	add	lr, sp, #16
   19688:	str	ip, [sp, #4]
   1968c:	str	lr, [sp]
   19690:	bl	19100 <__assert_fail@plt+0x7c18>
   19694:	mov	sp, fp
   19698:	pop	{fp, pc}
   1969c:	push	{fp, lr}
   196a0:	mov	fp, sp
   196a4:	movw	r0, #49556	; 0xc194
   196a8:	movt	r0, #2
   196ac:	ldr	r1, [r0]
   196b0:	movw	r0, #45567	; 0xb1ff
   196b4:	movt	r0, #1
   196b8:	bl	111dc <fputs_unlocked@plt>
   196bc:	movw	r1, #48239	; 0xbc6f
   196c0:	mov	r0, #0
   196c4:	mov	r2, #5
   196c8:	movt	r1, #1
   196cc:	bl	11278 <dcgettext@plt>
   196d0:	movw	r2, #46739	; 0xb693
   196d4:	mov	r1, r0
   196d8:	mov	r0, #1
   196dc:	movt	r2, #1
   196e0:	bl	113b0 <__printf_chk@plt>
   196e4:	movw	r1, #48259	; 0xbc83
   196e8:	mov	r0, #0
   196ec:	mov	r2, #5
   196f0:	movt	r1, #1
   196f4:	bl	11278 <dcgettext@plt>
   196f8:	movw	r2, #44949	; 0xaf95
   196fc:	movw	r3, #45376	; 0xb140
   19700:	mov	r1, r0
   19704:	mov	r0, #1
   19708:	movt	r2, #1
   1970c:	movt	r3, #1
   19710:	bl	113b0 <__printf_chk@plt>
   19714:	movw	r1, #48279	; 0xbc97
   19718:	mov	r0, #0
   1971c:	mov	r2, #5
   19720:	movt	r1, #1
   19724:	bl	11278 <dcgettext@plt>
   19728:	movw	r2, #48318	; 0xbcbe
   1972c:	mov	r1, r0
   19730:	mov	r0, #1
   19734:	movt	r2, #1
   19738:	pop	{fp, lr}
   1973c:	b	113b0 <__printf_chk@plt>
   19740:	push	{r4, sl, fp, lr}
   19744:	add	fp, sp, #8
   19748:	movw	r4, #49904	; 0xc2f0
   1974c:	movt	r4, #2
   19750:	ldrb	r0, [r4]
   19754:	cmp	r0, #1
   19758:	bne	1976c <__assert_fail@plt+0x8284>
   1975c:	movw	r0, #49905	; 0xc2f1
   19760:	movt	r0, #2
   19764:	ldrb	r0, [r0]
   19768:	b	1978c <__assert_fail@plt+0x82a4>
   1976c:	bl	1129c <geteuid@plt>
   19770:	mov	r1, #1
   19774:	clz	r0, r0
   19778:	strb	r1, [r4]
   1977c:	movw	r1, #49905	; 0xc2f1
   19780:	lsr	r0, r0, #5
   19784:	movt	r1, #2
   19788:	strb	r0, [r1]
   1978c:	cmp	r0, #0
   19790:	movwne	r0, #1
   19794:	pop	{r4, sl, fp, pc}
   19798:	push	{r4, r5, r6, sl, fp, lr}
   1979c:	add	fp, sp, #16
   197a0:	mov	r4, r2
   197a4:	mov	r5, r1
   197a8:	mov	r6, r0
   197ac:	bl	1a458 <__assert_fail@plt+0x8f70>
   197b0:	cmp	r0, #0
   197b4:	popne	{r4, r5, r6, sl, fp, pc}
   197b8:	cmp	r6, #0
   197bc:	beq	197d0 <__assert_fail@plt+0x82e8>
   197c0:	cmp	r5, #0
   197c4:	cmpne	r4, #0
   197c8:	bne	197d0 <__assert_fail@plt+0x82e8>
   197cc:	pop	{r4, r5, r6, sl, fp, pc}
   197d0:	bl	19d70 <__assert_fail@plt+0x8888>
   197d4:	push	{r4, r5, r6, sl, fp, lr}
   197d8:	add	fp, sp, #16
   197dc:	mov	r4, r2
   197e0:	mov	r5, r1
   197e4:	mov	r6, r0
   197e8:	bl	1a458 <__assert_fail@plt+0x8f70>
   197ec:	cmp	r0, #0
   197f0:	popne	{r4, r5, r6, sl, fp, pc}
   197f4:	cmp	r6, #0
   197f8:	beq	1980c <__assert_fail@plt+0x8324>
   197fc:	cmp	r5, #0
   19800:	cmpne	r4, #0
   19804:	bne	1980c <__assert_fail@plt+0x8324>
   19808:	pop	{r4, r5, r6, sl, fp, pc}
   1980c:	bl	19d70 <__assert_fail@plt+0x8888>
   19810:	push	{fp, lr}
   19814:	mov	fp, sp
   19818:	bl	19f00 <__assert_fail@plt+0x8a18>
   1981c:	cmp	r0, #0
   19820:	popne	{fp, pc}
   19824:	bl	19d70 <__assert_fail@plt+0x8888>
   19828:	push	{fp, lr}
   1982c:	mov	fp, sp
   19830:	bl	19f00 <__assert_fail@plt+0x8a18>
   19834:	cmp	r0, #0
   19838:	popne	{fp, pc}
   1983c:	bl	19d70 <__assert_fail@plt+0x8888>
   19840:	push	{fp, lr}
   19844:	mov	fp, sp
   19848:	bl	19f00 <__assert_fail@plt+0x8a18>
   1984c:	cmp	r0, #0
   19850:	popne	{fp, pc}
   19854:	bl	19d70 <__assert_fail@plt+0x8888>
   19858:	push	{r4, r5, fp, lr}
   1985c:	add	fp, sp, #8
   19860:	mov	r4, r1
   19864:	mov	r5, r0
   19868:	bl	19f30 <__assert_fail@plt+0x8a48>
   1986c:	cmp	r0, #0
   19870:	popne	{r4, r5, fp, pc}
   19874:	cmp	r5, #0
   19878:	beq	19888 <__assert_fail@plt+0x83a0>
   1987c:	cmp	r4, #0
   19880:	bne	19888 <__assert_fail@plt+0x83a0>
   19884:	pop	{r4, r5, fp, pc}
   19888:	bl	19d70 <__assert_fail@plt+0x8888>
   1988c:	push	{fp, lr}
   19890:	mov	fp, sp
   19894:	cmp	r1, #0
   19898:	orreq	r1, r1, #1
   1989c:	bl	19f30 <__assert_fail@plt+0x8a48>
   198a0:	cmp	r0, #0
   198a4:	popne	{fp, pc}
   198a8:	bl	19d70 <__assert_fail@plt+0x8888>
   198ac:	push	{fp, lr}
   198b0:	mov	fp, sp
   198b4:	clz	r3, r2
   198b8:	lsr	ip, r3, #5
   198bc:	clz	r3, r1
   198c0:	lsr	r3, r3, #5
   198c4:	orrs	r3, r3, ip
   198c8:	movwne	r1, #1
   198cc:	movwne	r2, #1
   198d0:	bl	1a458 <__assert_fail@plt+0x8f70>
   198d4:	cmp	r0, #0
   198d8:	popne	{fp, pc}
   198dc:	bl	19d70 <__assert_fail@plt+0x8888>
   198e0:	push	{fp, lr}
   198e4:	mov	fp, sp
   198e8:	mov	r2, r1
   198ec:	mov	r1, r0
   198f0:	mov	r0, #0
   198f4:	bl	1a458 <__assert_fail@plt+0x8f70>
   198f8:	cmp	r0, #0
   198fc:	popne	{fp, pc}
   19900:	bl	19d70 <__assert_fail@plt+0x8888>
   19904:	push	{fp, lr}
   19908:	mov	fp, sp
   1990c:	mov	r2, r1
   19910:	mov	r1, r0
   19914:	clz	r0, r2
   19918:	clz	r3, r1
   1991c:	lsr	r0, r0, #5
   19920:	lsr	r3, r3, #5
   19924:	orrs	r0, r3, r0
   19928:	movwne	r1, #1
   1992c:	movwne	r2, #1
   19930:	mov	r0, #0
   19934:	bl	1a458 <__assert_fail@plt+0x8f70>
   19938:	cmp	r0, #0
   1993c:	popne	{fp, pc}
   19940:	bl	19d70 <__assert_fail@plt+0x8888>
   19944:	push	{r4, r5, r6, sl, fp, lr}
   19948:	add	fp, sp, #16
   1994c:	ldr	r5, [r1]
   19950:	mov	r4, r1
   19954:	mov	r6, r0
   19958:	cmp	r0, #0
   1995c:	beq	19974 <__assert_fail@plt+0x848c>
   19960:	mov	r0, #1
   19964:	add	r0, r0, r5, lsr #1
   19968:	adds	r5, r5, r0
   1996c:	bcc	1997c <__assert_fail@plt+0x8494>
   19970:	b	199b8 <__assert_fail@plt+0x84d0>
   19974:	cmp	r5, #0
   19978:	movweq	r5, #64	; 0x40
   1997c:	mov	r0, r6
   19980:	mov	r1, r5
   19984:	mov	r2, #1
   19988:	bl	1a458 <__assert_fail@plt+0x8f70>
   1998c:	cmp	r5, #0
   19990:	mov	r1, r5
   19994:	movwne	r1, #1
   19998:	cmp	r0, #0
   1999c:	bne	199b0 <__assert_fail@plt+0x84c8>
   199a0:	clz	r2, r6
   199a4:	lsr	r2, r2, #5
   199a8:	orrs	r1, r2, r1
   199ac:	bne	199b8 <__assert_fail@plt+0x84d0>
   199b0:	str	r5, [r4]
   199b4:	pop	{r4, r5, r6, sl, fp, pc}
   199b8:	bl	19d70 <__assert_fail@plt+0x8888>
   199bc:	push	{r4, r5, r6, r7, fp, lr}
   199c0:	add	fp, sp, #16
   199c4:	ldr	r5, [r1]
   199c8:	mov	r6, r2
   199cc:	mov	r4, r1
   199d0:	mov	r7, r0
   199d4:	cmp	r0, #0
   199d8:	beq	199f0 <__assert_fail@plt+0x8508>
   199dc:	mov	r0, #1
   199e0:	add	r0, r0, r5, lsr #1
   199e4:	adds	r5, r5, r0
   199e8:	bcc	19a08 <__assert_fail@plt+0x8520>
   199ec:	b	19a3c <__assert_fail@plt+0x8554>
   199f0:	cmp	r5, #0
   199f4:	bne	19a08 <__assert_fail@plt+0x8520>
   199f8:	mov	r0, #64	; 0x40
   199fc:	cmp	r6, #64	; 0x40
   19a00:	udiv	r5, r0, r6
   19a04:	addhi	r5, r5, #1
   19a08:	mov	r0, r7
   19a0c:	mov	r1, r5
   19a10:	mov	r2, r6
   19a14:	bl	1a458 <__assert_fail@plt+0x8f70>
   19a18:	cmp	r0, #0
   19a1c:	bne	19a34 <__assert_fail@plt+0x854c>
   19a20:	cmp	r7, #0
   19a24:	beq	19a3c <__assert_fail@plt+0x8554>
   19a28:	cmp	r6, #0
   19a2c:	cmpne	r5, #0
   19a30:	bne	19a3c <__assert_fail@plt+0x8554>
   19a34:	str	r5, [r4]
   19a38:	pop	{r4, r5, r6, r7, fp, pc}
   19a3c:	bl	19d70 <__assert_fail@plt+0x8888>
   19a40:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   19a44:	add	fp, sp, #24
   19a48:	mov	r8, r1
   19a4c:	ldr	r1, [r1]
   19a50:	mov	r5, r0
   19a54:	add	r0, r1, r1, asr #1
   19a58:	cmp	r0, r1
   19a5c:	mvnvs	r0, #-2147483648	; 0x80000000
   19a60:	cmp	r0, r3
   19a64:	mov	r7, r0
   19a68:	movgt	r7, r3
   19a6c:	cmn	r3, #1
   19a70:	movle	r7, r0
   19a74:	ldr	r0, [fp, #8]
   19a78:	cmn	r0, #1
   19a7c:	ble	19aa4 <__assert_fail@plt+0x85bc>
   19a80:	cmp	r0, #0
   19a84:	beq	19af8 <__assert_fail@plt+0x8610>
   19a88:	cmn	r7, #1
   19a8c:	ble	19acc <__assert_fail@plt+0x85e4>
   19a90:	mvn	r4, #-2147483648	; 0x80000000
   19a94:	udiv	r6, r4, r0
   19a98:	cmp	r6, r7
   19a9c:	bge	19af8 <__assert_fail@plt+0x8610>
   19aa0:	b	19b08 <__assert_fail@plt+0x8620>
   19aa4:	cmn	r7, #1
   19aa8:	ble	19ae8 <__assert_fail@plt+0x8600>
   19aac:	cmn	r0, #1
   19ab0:	beq	19af8 <__assert_fail@plt+0x8610>
   19ab4:	mov	r6, #-2147483648	; 0x80000000
   19ab8:	mvn	r4, #-2147483648	; 0x80000000
   19abc:	sdiv	r6, r6, r0
   19ac0:	cmp	r6, r7
   19ac4:	bge	19af8 <__assert_fail@plt+0x8610>
   19ac8:	b	19b08 <__assert_fail@plt+0x8620>
   19acc:	beq	19af8 <__assert_fail@plt+0x8610>
   19ad0:	mov	r6, #-2147483648	; 0x80000000
   19ad4:	mvn	r4, #-2147483648	; 0x80000000
   19ad8:	sdiv	r6, r6, r7
   19adc:	cmp	r6, r0
   19ae0:	bge	19af8 <__assert_fail@plt+0x8610>
   19ae4:	b	19b08 <__assert_fail@plt+0x8620>
   19ae8:	mvn	r4, #-2147483648	; 0x80000000
   19aec:	sdiv	r6, r4, r0
   19af0:	cmp	r7, r6
   19af4:	blt	19b08 <__assert_fail@plt+0x8620>
   19af8:	mul	r6, r7, r0
   19afc:	mov	r4, #64	; 0x40
   19b00:	cmp	r6, #63	; 0x3f
   19b04:	bgt	19b10 <__assert_fail@plt+0x8628>
   19b08:	sdiv	r7, r4, r0
   19b0c:	mul	r6, r7, r0
   19b10:	cmp	r5, #0
   19b14:	moveq	r4, #0
   19b18:	streq	r4, [r8]
   19b1c:	sub	r4, r7, r1
   19b20:	cmp	r4, r2
   19b24:	bge	19bd0 <__assert_fail@plt+0x86e8>
   19b28:	add	r7, r1, r2
   19b2c:	mov	r6, #0
   19b30:	mov	r2, #0
   19b34:	cmp	r7, r3
   19b38:	movwgt	r6, #1
   19b3c:	cmn	r3, #1
   19b40:	movwgt	r2, #1
   19b44:	cmp	r7, r1
   19b48:	bvs	19c04 <__assert_fail@plt+0x871c>
   19b4c:	ands	r1, r2, r6
   19b50:	bne	19c04 <__assert_fail@plt+0x871c>
   19b54:	cmn	r0, #1
   19b58:	ble	19b80 <__assert_fail@plt+0x8698>
   19b5c:	cmp	r0, #0
   19b60:	beq	19bcc <__assert_fail@plt+0x86e4>
   19b64:	cmn	r7, #1
   19b68:	ble	19ba4 <__assert_fail@plt+0x86bc>
   19b6c:	mvn	r1, #-2147483648	; 0x80000000
   19b70:	udiv	r1, r1, r0
   19b74:	cmp	r1, r7
   19b78:	bge	19bcc <__assert_fail@plt+0x86e4>
   19b7c:	b	19c04 <__assert_fail@plt+0x871c>
   19b80:	cmn	r7, #1
   19b84:	ble	19bbc <__assert_fail@plt+0x86d4>
   19b88:	cmn	r0, #1
   19b8c:	beq	19bcc <__assert_fail@plt+0x86e4>
   19b90:	mov	r1, #-2147483648	; 0x80000000
   19b94:	sdiv	r1, r1, r0
   19b98:	cmp	r1, r7
   19b9c:	bge	19bcc <__assert_fail@plt+0x86e4>
   19ba0:	b	19c04 <__assert_fail@plt+0x871c>
   19ba4:	beq	19bcc <__assert_fail@plt+0x86e4>
   19ba8:	mov	r1, #-2147483648	; 0x80000000
   19bac:	sdiv	r1, r1, r7
   19bb0:	cmp	r1, r0
   19bb4:	bge	19bcc <__assert_fail@plt+0x86e4>
   19bb8:	b	19c04 <__assert_fail@plt+0x871c>
   19bbc:	mvn	r1, #-2147483648	; 0x80000000
   19bc0:	sdiv	r1, r1, r0
   19bc4:	cmp	r7, r1
   19bc8:	blt	19c04 <__assert_fail@plt+0x871c>
   19bcc:	mul	r6, r7, r0
   19bd0:	mov	r0, r5
   19bd4:	mov	r1, r6
   19bd8:	bl	19f30 <__assert_fail@plt+0x8a48>
   19bdc:	cmp	r6, #0
   19be0:	movwne	r6, #1
   19be4:	cmp	r0, #0
   19be8:	bne	19bfc <__assert_fail@plt+0x8714>
   19bec:	clz	r1, r5
   19bf0:	lsr	r1, r1, #5
   19bf4:	orrs	r1, r1, r6
   19bf8:	bne	19c04 <__assert_fail@plt+0x871c>
   19bfc:	str	r7, [r8]
   19c00:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   19c04:	bl	19d70 <__assert_fail@plt+0x8888>
   19c08:	push	{fp, lr}
   19c0c:	mov	fp, sp
   19c10:	mov	r1, #1
   19c14:	bl	19eac <__assert_fail@plt+0x89c4>
   19c18:	cmp	r0, #0
   19c1c:	popne	{fp, pc}
   19c20:	bl	19d70 <__assert_fail@plt+0x8888>
   19c24:	push	{fp, lr}
   19c28:	mov	fp, sp
   19c2c:	bl	19eac <__assert_fail@plt+0x89c4>
   19c30:	cmp	r0, #0
   19c34:	popne	{fp, pc}
   19c38:	bl	19d70 <__assert_fail@plt+0x8888>
   19c3c:	push	{fp, lr}
   19c40:	mov	fp, sp
   19c44:	mov	r1, #1
   19c48:	bl	19eac <__assert_fail@plt+0x89c4>
   19c4c:	cmp	r0, #0
   19c50:	popne	{fp, pc}
   19c54:	bl	19d70 <__assert_fail@plt+0x8888>
   19c58:	push	{fp, lr}
   19c5c:	mov	fp, sp
   19c60:	bl	19eac <__assert_fail@plt+0x89c4>
   19c64:	cmp	r0, #0
   19c68:	popne	{fp, pc}
   19c6c:	bl	19d70 <__assert_fail@plt+0x8888>
   19c70:	push	{r4, r5, r6, sl, fp, lr}
   19c74:	add	fp, sp, #16
   19c78:	mov	r5, r0
   19c7c:	mov	r0, r1
   19c80:	mov	r4, r1
   19c84:	bl	19f00 <__assert_fail@plt+0x8a18>
   19c88:	cmp	r0, #0
   19c8c:	beq	19ca8 <__assert_fail@plt+0x87c0>
   19c90:	mov	r1, r5
   19c94:	mov	r2, r4
   19c98:	mov	r6, r0
   19c9c:	bl	11254 <memcpy@plt>
   19ca0:	mov	r0, r6
   19ca4:	pop	{r4, r5, r6, sl, fp, pc}
   19ca8:	bl	19d70 <__assert_fail@plt+0x8888>
   19cac:	push	{r4, r5, r6, sl, fp, lr}
   19cb0:	add	fp, sp, #16
   19cb4:	mov	r5, r0
   19cb8:	mov	r0, r1
   19cbc:	mov	r4, r1
   19cc0:	bl	19f00 <__assert_fail@plt+0x8a18>
   19cc4:	cmp	r0, #0
   19cc8:	beq	19ce4 <__assert_fail@plt+0x87fc>
   19ccc:	mov	r1, r5
   19cd0:	mov	r2, r4
   19cd4:	mov	r6, r0
   19cd8:	bl	11254 <memcpy@plt>
   19cdc:	mov	r0, r6
   19ce0:	pop	{r4, r5, r6, sl, fp, pc}
   19ce4:	bl	19d70 <__assert_fail@plt+0x8888>
   19ce8:	push	{r4, r5, r6, sl, fp, lr}
   19cec:	add	fp, sp, #16
   19cf0:	mov	r5, r0
   19cf4:	add	r0, r1, #1
   19cf8:	mov	r4, r1
   19cfc:	bl	19f00 <__assert_fail@plt+0x8a18>
   19d00:	cmp	r0, #0
   19d04:	beq	19d2c <__assert_fail@plt+0x8844>
   19d08:	mov	r6, r0
   19d0c:	mov	r0, #0
   19d10:	mov	r1, r5
   19d14:	mov	r2, r4
   19d18:	strb	r0, [r6, r4]
   19d1c:	mov	r0, r6
   19d20:	bl	11254 <memcpy@plt>
   19d24:	mov	r0, r6
   19d28:	pop	{r4, r5, r6, sl, fp, pc}
   19d2c:	bl	19d70 <__assert_fail@plt+0x8888>
   19d30:	push	{r4, r5, r6, sl, fp, lr}
   19d34:	add	fp, sp, #16
   19d38:	mov	r4, r0
   19d3c:	bl	11374 <strlen@plt>
   19d40:	add	r5, r0, #1
   19d44:	mov	r0, r5
   19d48:	bl	19f00 <__assert_fail@plt+0x8a18>
   19d4c:	cmp	r0, #0
   19d50:	beq	19d6c <__assert_fail@plt+0x8884>
   19d54:	mov	r1, r4
   19d58:	mov	r2, r5
   19d5c:	mov	r6, r0
   19d60:	bl	11254 <memcpy@plt>
   19d64:	mov	r0, r6
   19d68:	pop	{r4, r5, r6, sl, fp, pc}
   19d6c:	bl	19d70 <__assert_fail@plt+0x8888>
   19d70:	push	{fp, lr}
   19d74:	mov	fp, sp
   19d78:	movw	r0, #49456	; 0xc130
   19d7c:	movw	r1, #48394	; 0xbd0a
   19d80:	mov	r2, #5
   19d84:	movt	r0, #2
   19d88:	movt	r1, #1
   19d8c:	ldr	r4, [r0]
   19d90:	mov	r0, #0
   19d94:	bl	11278 <dcgettext@plt>
   19d98:	movw	r2, #47031	; 0xb7b7
   19d9c:	mov	r3, r0
   19da0:	mov	r0, r4
   19da4:	mov	r1, #0
   19da8:	movt	r2, #1
   19dac:	bl	11308 <error@plt>
   19db0:	bl	114a0 <abort@plt>
   19db4:	push	{fp, lr}
   19db8:	mov	fp, sp
   19dbc:	orr	r1, r1, #512	; 0x200
   19dc0:	bl	13b30 <__assert_fail@plt+0x2648>
   19dc4:	cmp	r0, #0
   19dc8:	popne	{fp, pc}
   19dcc:	bl	1138c <__errno_location@plt>
   19dd0:	ldr	r0, [r0]
   19dd4:	cmp	r0, #22
   19dd8:	bne	19dfc <__assert_fail@plt+0x8914>
   19ddc:	movw	r0, #48411	; 0xbd1b
   19de0:	movw	r1, #48427	; 0xbd2b
   19de4:	movw	r3, #48438	; 0xbd36
   19de8:	mov	r2, #41	; 0x29
   19dec:	movt	r0, #1
   19df0:	movt	r1, #1
   19df4:	movt	r3, #1
   19df8:	bl	114e8 <__assert_fail@plt>
   19dfc:	bl	19d70 <__assert_fail@plt+0x8888>
   19e00:	ldr	r0, [r0, #48]	; 0x30
   19e04:	and	r0, r0, #17
   19e08:	cmp	r0, #16
   19e0c:	moveq	r0, #1
   19e10:	bxeq	lr
   19e14:	cmp	r0, #17
   19e18:	movne	r0, #0
   19e1c:	bxne	lr
   19e20:	ldr	r0, [r1, #48]	; 0x30
   19e24:	cmp	r0, #0
   19e28:	movwne	r0, #1
   19e2c:	bx	lr
   19e30:	push	{r4, sl, fp, lr}
   19e34:	add	fp, sp, #8
   19e38:	sub	sp, sp, #8
   19e3c:	movw	r0, #49552	; 0xc190
   19e40:	mov	r4, #0
   19e44:	mov	r1, sp
   19e48:	mov	r2, #10
   19e4c:	movt	r0, #2
   19e50:	str	r4, [sp, #4]
   19e54:	str	r4, [sp]
   19e58:	ldr	r3, [r0]
   19e5c:	add	r0, sp, #4
   19e60:	bl	111f4 <__getdelim@plt>
   19e64:	cmp	r0, #1
   19e68:	blt	19e98 <__assert_fail@plt+0x89b0>
   19e6c:	sub	r1, r0, #1
   19e70:	ldr	r0, [sp, #4]
   19e74:	ldrb	r2, [r0, r1]
   19e78:	cmp	r2, #10
   19e7c:	moveq	r2, #0
   19e80:	strbeq	r2, [r0, r1]
   19e84:	ldreq	r0, [sp, #4]
   19e88:	bl	113f8 <rpmatch@plt>
   19e8c:	mov	r4, #0
   19e90:	cmp	r0, #0
   19e94:	movwgt	r4, #1
   19e98:	ldr	r0, [sp, #4]
   19e9c:	bl	13a64 <__assert_fail@plt+0x257c>
   19ea0:	mov	r0, r4
   19ea4:	sub	sp, fp, #8
   19ea8:	pop	{r4, sl, fp, pc}
   19eac:	clz	r2, r1
   19eb0:	clz	r3, r0
   19eb4:	lsr	r2, r2, #5
   19eb8:	lsr	r3, r3, #5
   19ebc:	orrs	r2, r3, r2
   19ec0:	movwne	r1, #1
   19ec4:	movwne	r0, #1
   19ec8:	cmp	r1, #0
   19ecc:	beq	19efc <__assert_fail@plt+0x8a14>
   19ed0:	mvn	r2, #-2147483648	; 0x80000000
   19ed4:	udiv	r2, r2, r1
   19ed8:	cmp	r2, r0
   19edc:	bcs	19efc <__assert_fail@plt+0x8a14>
   19ee0:	push	{fp, lr}
   19ee4:	mov	fp, sp
   19ee8:	bl	1138c <__errno_location@plt>
   19eec:	mov	r1, #12
   19ef0:	str	r1, [r0]
   19ef4:	mov	r0, #0
   19ef8:	pop	{fp, pc}
   19efc:	b	111d0 <calloc@plt>
   19f00:	cmp	r0, #0
   19f04:	movweq	r0, #1
   19f08:	cmn	r0, #1
   19f0c:	ble	19f14 <__assert_fail@plt+0x8a2c>
   19f10:	b	11320 <malloc@plt>
   19f14:	push	{fp, lr}
   19f18:	mov	fp, sp
   19f1c:	bl	1138c <__errno_location@plt>
   19f20:	mov	r1, #12
   19f24:	str	r1, [r0]
   19f28:	mov	r0, #0
   19f2c:	pop	{fp, pc}
   19f30:	push	{fp, lr}
   19f34:	mov	fp, sp
   19f38:	cmp	r0, #0
   19f3c:	beq	19f58 <__assert_fail@plt+0x8a70>
   19f40:	cmp	r1, #0
   19f44:	beq	19f64 <__assert_fail@plt+0x8a7c>
   19f48:	cmn	r1, #1
   19f4c:	ble	19f70 <__assert_fail@plt+0x8a88>
   19f50:	pop	{fp, lr}
   19f54:	b	11284 <realloc@plt>
   19f58:	mov	r0, r1
   19f5c:	pop	{fp, lr}
   19f60:	b	19f00 <__assert_fail@plt+0x8a18>
   19f64:	bl	13a64 <__assert_fail@plt+0x257c>
   19f68:	mov	r0, #0
   19f6c:	pop	{fp, pc}
   19f70:	bl	1138c <__errno_location@plt>
   19f74:	mov	r1, #12
   19f78:	str	r1, [r0]
   19f7c:	mov	r0, #0
   19f80:	pop	{fp, pc}
   19f84:	push	{r4, r5, r6, sl, fp, lr}
   19f88:	add	fp, sp, #16
   19f8c:	mov	r4, r0
   19f90:	bl	112f0 <__fpending@plt>
   19f94:	ldr	r6, [r4]
   19f98:	mov	r5, r0
   19f9c:	mov	r0, r4
   19fa0:	bl	1a0fc <__assert_fail@plt+0x8c14>
   19fa4:	tst	r6, #32
   19fa8:	bne	19fe0 <__assert_fail@plt+0x8af8>
   19fac:	cmp	r0, #0
   19fb0:	mov	r4, r0
   19fb4:	mvnne	r4, #0
   19fb8:	cmp	r5, #0
   19fbc:	bne	19fec <__assert_fail@plt+0x8b04>
   19fc0:	cmp	r0, #0
   19fc4:	beq	19fec <__assert_fail@plt+0x8b04>
   19fc8:	bl	1138c <__errno_location@plt>
   19fcc:	ldr	r0, [r0]
   19fd0:	subs	r4, r0, #9
   19fd4:	mvnne	r4, #0
   19fd8:	mov	r0, r4
   19fdc:	pop	{r4, r5, r6, sl, fp, pc}
   19fe0:	mvn	r4, #0
   19fe4:	cmp	r0, #0
   19fe8:	beq	19ff4 <__assert_fail@plt+0x8b0c>
   19fec:	mov	r0, r4
   19ff0:	pop	{r4, r5, r6, sl, fp, pc}
   19ff4:	bl	1138c <__errno_location@plt>
   19ff8:	mov	r1, #0
   19ffc:	str	r1, [r0]
   1a000:	mov	r0, r4
   1a004:	pop	{r4, r5, r6, sl, fp, pc}
   1a008:	movw	r2, #62998	; 0xf616
   1a00c:	mov	r1, #0
   1a010:	movt	r2, #149	; 0x95
   1a014:	str	r1, [r0, #16]
   1a018:	str	r1, [r0, #20]
   1a01c:	str	r2, [r0, #24]
   1a020:	bx	lr
   1a024:	push	{r4, r5, r6, r7, fp, lr}
   1a028:	add	fp, sp, #16
   1a02c:	ldr	r2, [r0, #24]
   1a030:	movw	r3, #62998	; 0xf616
   1a034:	movt	r3, #149	; 0x95
   1a038:	cmp	r2, r3
   1a03c:	bne	1a0dc <__assert_fail@plt+0x8bf4>
   1a040:	mov	r3, r0
   1a044:	ldr	r2, [r3, #16]!
   1a048:	ldr	lr, [r3, #4]
   1a04c:	orrs	r5, r2, lr
   1a050:	beq	1a088 <__assert_fail@plt+0x8ba0>
   1a054:	ldrd	r4, [r0]
   1a058:	ldrd	r6, [r1, #96]	; 0x60
   1a05c:	eor	r7, r7, r5
   1a060:	eor	r6, r6, r4
   1a064:	orrs	r7, r6, r7
   1a068:	bne	1a088 <__assert_fail@plt+0x8ba0>
   1a06c:	ldrd	r4, [r0, #8]
   1a070:	ldrd	r6, [r1]
   1a074:	mov	ip, #1
   1a078:	eor	r7, r7, r5
   1a07c:	eor	r6, r6, r4
   1a080:	orrs	r7, r6, r7
   1a084:	beq	1a0a8 <__assert_fail@plt+0x8bc0>
   1a088:	adds	r4, r2, #1
   1a08c:	mov	ip, #0
   1a090:	adc	r5, lr, #0
   1a094:	and	r2, r4, r2
   1a098:	strd	r4, [r3]
   1a09c:	and	r3, r5, lr
   1a0a0:	orrs	r2, r2, r3
   1a0a4:	beq	1a0b0 <__assert_fail@plt+0x8bc8>
   1a0a8:	mov	r0, ip
   1a0ac:	pop	{r4, r5, r6, r7, fp, pc}
   1a0b0:	orrs	r2, r4, r5
   1a0b4:	moveq	ip, #1
   1a0b8:	moveq	r0, ip
   1a0bc:	popeq	{r4, r5, r6, r7, fp, pc}
   1a0c0:	ldrd	r2, [r1]
   1a0c4:	str	r3, [r0, #12]
   1a0c8:	str	r2, [r0, #8]
   1a0cc:	ldrd	r2, [r1, #96]	; 0x60
   1a0d0:	stm	r0, {r2, r3}
   1a0d4:	mov	r0, ip
   1a0d8:	pop	{r4, r5, r6, r7, fp, pc}
   1a0dc:	movw	r0, #48516	; 0xbd84
   1a0e0:	movw	r1, #48540	; 0xbd9c
   1a0e4:	movw	r3, #48558	; 0xbdae
   1a0e8:	mov	r2, #60	; 0x3c
   1a0ec:	movt	r0, #1
   1a0f0:	movt	r1, #1
   1a0f4:	movt	r3, #1
   1a0f8:	bl	114e8 <__assert_fail@plt>
   1a0fc:	push	{r4, r5, r6, sl, fp, lr}
   1a100:	add	fp, sp, #16
   1a104:	sub	sp, sp, #8
   1a108:	mov	r4, r0
   1a10c:	bl	113bc <fileno@plt>
   1a110:	cmn	r0, #1
   1a114:	ble	1a188 <__assert_fail@plt+0x8ca0>
   1a118:	mov	r0, r4
   1a11c:	bl	11338 <__freading@plt>
   1a120:	cmp	r0, #0
   1a124:	beq	1a150 <__assert_fail@plt+0x8c68>
   1a128:	mov	r0, r4
   1a12c:	bl	113bc <fileno@plt>
   1a130:	mov	r1, #1
   1a134:	mov	r2, #0
   1a138:	mov	r3, #0
   1a13c:	str	r1, [sp]
   1a140:	bl	112d8 <lseek64@plt>
   1a144:	and	r0, r0, r1
   1a148:	cmn	r0, #1
   1a14c:	beq	1a188 <__assert_fail@plt+0x8ca0>
   1a150:	mov	r0, r4
   1a154:	bl	1380c <__assert_fail@plt+0x2324>
   1a158:	cmp	r0, #0
   1a15c:	beq	1a188 <__assert_fail@plt+0x8ca0>
   1a160:	bl	1138c <__errno_location@plt>
   1a164:	ldr	r6, [r0]
   1a168:	mov	r5, r0
   1a16c:	mov	r0, r4
   1a170:	bl	113d4 <fclose@plt>
   1a174:	cmp	r6, #0
   1a178:	strne	r6, [r5]
   1a17c:	mvnne	r0, #0
   1a180:	sub	sp, fp, #16
   1a184:	pop	{r4, r5, r6, sl, fp, pc}
   1a188:	mov	r0, r4
   1a18c:	sub	sp, fp, #16
   1a190:	pop	{r4, r5, r6, sl, fp, lr}
   1a194:	b	113d4 <fclose@plt>
   1a198:	sub	sp, sp, #8
   1a19c:	push	{r4, r5, r6, r7, fp, lr}
   1a1a0:	add	fp, sp, #16
   1a1a4:	sub	sp, sp, #8
   1a1a8:	mov	r5, r0
   1a1ac:	add	r0, fp, #8
   1a1b0:	cmp	r1, #11
   1a1b4:	str	r3, [fp, #12]
   1a1b8:	str	r2, [fp, #8]
   1a1bc:	str	r0, [sp, #4]
   1a1c0:	bhi	1a1fc <__assert_fail@plt+0x8d14>
   1a1c4:	mov	r0, #1
   1a1c8:	movw	r2, #1300	; 0x514
   1a1cc:	tst	r2, r0, lsl r1
   1a1d0:	bne	1a2bc <__assert_fail@plt+0x8dd4>
   1a1d4:	movw	r2, #2570	; 0xa0a
   1a1d8:	tst	r2, r0, lsl r1
   1a1dc:	bne	1a224 <__assert_fail@plt+0x8d3c>
   1a1e0:	cmp	r1, #0
   1a1e4:	bne	1a1fc <__assert_fail@plt+0x8d14>
   1a1e8:	ldr	r0, [sp, #4]
   1a1ec:	add	r1, r0, #4
   1a1f0:	str	r1, [sp, #4]
   1a1f4:	mov	r1, #0
   1a1f8:	b	1a2c8 <__assert_fail@plt+0x8de0>
   1a1fc:	sub	r0, r1, #1024	; 0x400
   1a200:	cmp	r0, #10
   1a204:	bhi	1a2bc <__assert_fail@plt+0x8dd4>
   1a208:	mov	r2, #1
   1a20c:	movw	r3, #645	; 0x285
   1a210:	tst	r3, r2, lsl r0
   1a214:	bne	1a2bc <__assert_fail@plt+0x8dd4>
   1a218:	movw	r3, #1282	; 0x502
   1a21c:	tst	r3, r2, lsl r0
   1a220:	beq	1a230 <__assert_fail@plt+0x8d48>
   1a224:	mov	r0, r5
   1a228:	bl	113ec <fcntl64@plt>
   1a22c:	b	1a2d4 <__assert_fail@plt+0x8dec>
   1a230:	cmp	r0, #6
   1a234:	bne	1a2bc <__assert_fail@plt+0x8dd4>
   1a238:	ldr	r0, [sp, #4]
   1a23c:	movw	r7, #49908	; 0xc2f4
   1a240:	movt	r7, #2
   1a244:	add	r1, r0, #4
   1a248:	str	r1, [sp, #4]
   1a24c:	ldr	r6, [r0]
   1a250:	ldr	r0, [r7]
   1a254:	cmp	r0, #0
   1a258:	blt	1a2f8 <__assert_fail@plt+0x8e10>
   1a25c:	mov	r0, r5
   1a260:	movw	r1, #1030	; 0x406
   1a264:	mov	r2, r6
   1a268:	bl	113ec <fcntl64@plt>
   1a26c:	mov	r4, r0
   1a270:	cmn	r0, #1
   1a274:	bgt	1a2ec <__assert_fail@plt+0x8e04>
   1a278:	bl	1138c <__errno_location@plt>
   1a27c:	ldr	r0, [r0]
   1a280:	cmp	r0, #22
   1a284:	bne	1a2ec <__assert_fail@plt+0x8e04>
   1a288:	mov	r0, r5
   1a28c:	mov	r1, #0
   1a290:	mov	r2, r6
   1a294:	bl	113ec <fcntl64@plt>
   1a298:	mov	r4, r0
   1a29c:	cmp	r0, #0
   1a2a0:	blt	1a2d8 <__assert_fail@plt+0x8df0>
   1a2a4:	mvn	r0, #0
   1a2a8:	str	r0, [r7]
   1a2ac:	mov	r0, #1
   1a2b0:	cmp	r0, #0
   1a2b4:	bne	1a324 <__assert_fail@plt+0x8e3c>
   1a2b8:	b	1a2d8 <__assert_fail@plt+0x8df0>
   1a2bc:	ldr	r0, [sp, #4]
   1a2c0:	add	r2, r0, #4
   1a2c4:	str	r2, [sp, #4]
   1a2c8:	ldr	r2, [r0]
   1a2cc:	mov	r0, r5
   1a2d0:	bl	113ec <fcntl64@plt>
   1a2d4:	mov	r4, r0
   1a2d8:	mov	r0, r4
   1a2dc:	sub	sp, fp, #16
   1a2e0:	pop	{r4, r5, r6, r7, fp, lr}
   1a2e4:	add	sp, sp, #8
   1a2e8:	bx	lr
   1a2ec:	mov	r0, #1
   1a2f0:	str	r0, [r7]
   1a2f4:	b	1a2d8 <__assert_fail@plt+0x8df0>
   1a2f8:	mov	r0, r5
   1a2fc:	mov	r1, #0
   1a300:	mov	r2, r6
   1a304:	bl	113ec <fcntl64@plt>
   1a308:	mov	r4, r0
   1a30c:	ldr	r0, [r7]
   1a310:	add	r0, r0, #1
   1a314:	clz	r0, r0
   1a318:	lsr	r0, r0, #5
   1a31c:	cmp	r0, #0
   1a320:	beq	1a2d8 <__assert_fail@plt+0x8df0>
   1a324:	cmp	r4, #0
   1a328:	blt	1a2d8 <__assert_fail@plt+0x8df0>
   1a32c:	mov	r0, r4
   1a330:	mov	r1, #1
   1a334:	bl	113ec <fcntl64@plt>
   1a338:	cmp	r0, #0
   1a33c:	blt	1a358 <__assert_fail@plt+0x8e70>
   1a340:	orr	r2, r0, #1
   1a344:	mov	r0, r4
   1a348:	mov	r1, #2
   1a34c:	bl	113ec <fcntl64@plt>
   1a350:	cmn	r0, #1
   1a354:	bne	1a2d8 <__assert_fail@plt+0x8df0>
   1a358:	bl	1138c <__errno_location@plt>
   1a35c:	ldr	r6, [r0]
   1a360:	mov	r5, r0
   1a364:	mov	r0, r4
   1a368:	bl	114ac <close@plt>
   1a36c:	str	r6, [r5]
   1a370:	mvn	r4, #0
   1a374:	b	1a2d8 <__assert_fail@plt+0x8df0>
   1a378:	sub	sp, sp, #8
   1a37c:	push	{fp, lr}
   1a380:	mov	fp, sp
   1a384:	sub	sp, sp, #8
   1a388:	str	r2, [fp, #8]
   1a38c:	mov	r2, #0
   1a390:	tst	r1, #64	; 0x40
   1a394:	str	r3, [fp, #12]
   1a398:	addne	r2, fp, #8
   1a39c:	orrne	r2, r2, #4
   1a3a0:	strne	r2, [sp, #4]
   1a3a4:	ldrne	r2, [fp, #8]
   1a3a8:	bl	11314 <open64@plt>
   1a3ac:	bl	190bc <__assert_fail@plt+0x7bd4>
   1a3b0:	mov	sp, fp
   1a3b4:	pop	{fp, lr}
   1a3b8:	add	sp, sp, #8
   1a3bc:	bx	lr
   1a3c0:	push	{fp, lr}
   1a3c4:	mov	fp, sp
   1a3c8:	mov	r0, #14
   1a3cc:	bl	11428 <nl_langinfo@plt>
   1a3d0:	movw	r1, #45568	; 0xb200
   1a3d4:	cmp	r0, #0
   1a3d8:	movt	r1, #1
   1a3dc:	movne	r1, r0
   1a3e0:	movw	r0, #48625	; 0xbdf1
   1a3e4:	ldrb	r2, [r1]
   1a3e8:	movt	r0, #1
   1a3ec:	cmp	r2, #0
   1a3f0:	movne	r0, r1
   1a3f4:	pop	{fp, pc}
   1a3f8:	push	{r4, r5, r6, r7, fp, lr}
   1a3fc:	add	fp, sp, #16
   1a400:	sub	sp, sp, #8
   1a404:	add	r5, sp, #4
   1a408:	cmp	r0, #0
   1a40c:	mov	r7, r2
   1a410:	mov	r4, r1
   1a414:	movne	r5, r0
   1a418:	mov	r0, r5
   1a41c:	bl	112fc <mbrtowc@plt>
   1a420:	mov	r6, r0
   1a424:	cmp	r7, #0
   1a428:	beq	1a44c <__assert_fail@plt+0x8f64>
   1a42c:	cmn	r6, #2
   1a430:	bcc	1a44c <__assert_fail@plt+0x8f64>
   1a434:	mov	r0, #0
   1a438:	bl	1a4a0 <__assert_fail@plt+0x8fb8>
   1a43c:	cmp	r0, #0
   1a440:	ldrbeq	r0, [r4]
   1a444:	moveq	r6, #1
   1a448:	streq	r0, [r5]
   1a44c:	mov	r0, r6
   1a450:	sub	sp, fp, #16
   1a454:	pop	{r4, r5, r6, r7, fp, pc}
   1a458:	cmp	r2, #0
   1a45c:	beq	1a48c <__assert_fail@plt+0x8fa4>
   1a460:	mvn	r3, #0
   1a464:	udiv	r3, r3, r2
   1a468:	cmp	r3, r1
   1a46c:	bcs	1a48c <__assert_fail@plt+0x8fa4>
   1a470:	push	{fp, lr}
   1a474:	mov	fp, sp
   1a478:	bl	1138c <__errno_location@plt>
   1a47c:	mov	r1, #12
   1a480:	str	r1, [r0]
   1a484:	mov	r0, #0
   1a488:	pop	{fp, pc}
   1a48c:	mul	r1, r2, r1
   1a490:	b	19f30 <__assert_fail@plt+0x8a48>
   1a494:	mov	r1, #0
   1a498:	mov	r2, #3
   1a49c:	b	1a198 <__assert_fail@plt+0x8cb0>
   1a4a0:	push	{r4, sl, fp, lr}
   1a4a4:	add	fp, sp, #8
   1a4a8:	sub	sp, sp, #264	; 0x108
   1a4ac:	add	r1, sp, #7
   1a4b0:	movw	r2, #257	; 0x101
   1a4b4:	bl	1a504 <__assert_fail@plt+0x901c>
   1a4b8:	mov	r4, #0
   1a4bc:	cmp	r0, #0
   1a4c0:	bne	1a4f8 <__assert_fail@plt+0x9010>
   1a4c4:	movw	r1, #48631	; 0xbdf7
   1a4c8:	add	r0, sp, #7
   1a4cc:	movt	r1, #1
   1a4d0:	bl	11200 <strcmp@plt>
   1a4d4:	cmp	r0, #0
   1a4d8:	beq	1a4f8 <__assert_fail@plt+0x9010>
   1a4dc:	movw	r1, #48633	; 0xbdf9
   1a4e0:	add	r0, sp, #7
   1a4e4:	movt	r1, #1
   1a4e8:	bl	11200 <strcmp@plt>
   1a4ec:	mov	r4, r0
   1a4f0:	cmp	r0, #0
   1a4f4:	movwne	r4, #1
   1a4f8:	mov	r0, r4
   1a4fc:	sub	sp, fp, #8
   1a500:	pop	{r4, sl, fp, pc}
   1a504:	push	{r4, r5, r6, r7, fp, lr}
   1a508:	add	fp, sp, #16
   1a50c:	mov	r4, r1
   1a510:	mov	r1, #0
   1a514:	mov	r6, r2
   1a518:	bl	11410 <setlocale@plt>
   1a51c:	cmp	r0, #0
   1a520:	beq	1a550 <__assert_fail@plt+0x9068>
   1a524:	mov	r7, r0
   1a528:	bl	11374 <strlen@plt>
   1a52c:	cmp	r0, r6
   1a530:	bcs	1a570 <__assert_fail@plt+0x9088>
   1a534:	add	r2, r0, #1
   1a538:	mov	r0, r4
   1a53c:	mov	r1, r7
   1a540:	bl	11254 <memcpy@plt>
   1a544:	mov	r5, #0
   1a548:	mov	r0, r5
   1a54c:	pop	{r4, r5, r6, r7, fp, pc}
   1a550:	cmp	r6, #0
   1a554:	mov	r5, #22
   1a558:	movne	r0, #0
   1a55c:	strbne	r0, [r4]
   1a560:	movne	r0, r5
   1a564:	popne	{r4, r5, r6, r7, fp, pc}
   1a568:	mov	r0, r5
   1a56c:	pop	{r4, r5, r6, r7, fp, pc}
   1a570:	mov	r5, #34	; 0x22
   1a574:	cmp	r6, #0
   1a578:	beq	1a598 <__assert_fail@plt+0x90b0>
   1a57c:	sub	r6, r6, #1
   1a580:	mov	r0, r4
   1a584:	mov	r1, r7
   1a588:	mov	r2, r6
   1a58c:	bl	11254 <memcpy@plt>
   1a590:	mov	r0, #0
   1a594:	strb	r0, [r4, r6]
   1a598:	mov	r0, r5
   1a59c:	pop	{r4, r5, r6, r7, fp, pc}
   1a5a0:	mov	r1, #0
   1a5a4:	b	11410 <setlocale@plt>
   1a5a8:	cmp	r3, #0
   1a5ac:	cmpeq	r2, #0
   1a5b0:	bne	1a5c8 <__assert_fail@plt+0x90e0>
   1a5b4:	cmp	r1, #0
   1a5b8:	cmpeq	r0, #0
   1a5bc:	mvnne	r1, #0
   1a5c0:	mvnne	r0, #0
   1a5c4:	b	1a5e4 <__assert_fail@plt+0x90fc>
   1a5c8:	sub	sp, sp, #8
   1a5cc:	push	{sp, lr}
   1a5d0:	bl	1a5f4 <__assert_fail@plt+0x910c>
   1a5d4:	ldr	lr, [sp, #4]
   1a5d8:	add	sp, sp, #8
   1a5dc:	pop	{r2, r3}
   1a5e0:	bx	lr
   1a5e4:	push	{r1, lr}
   1a5e8:	mov	r0, #8
   1a5ec:	bl	111e8 <raise@plt>
   1a5f0:	pop	{r1, pc}
   1a5f4:	cmp	r1, r3
   1a5f8:	cmpeq	r0, r2
   1a5fc:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1a600:	mov	r4, r0
   1a604:	movcc	r0, #0
   1a608:	mov	r5, r1
   1a60c:	ldr	lr, [sp, #36]	; 0x24
   1a610:	movcc	r1, r0
   1a614:	bcc	1a710 <__assert_fail@plt+0x9228>
   1a618:	cmp	r3, #0
   1a61c:	clzeq	ip, r2
   1a620:	clzne	ip, r3
   1a624:	addeq	ip, ip, #32
   1a628:	cmp	r5, #0
   1a62c:	clzeq	r1, r4
   1a630:	addeq	r1, r1, #32
   1a634:	clzne	r1, r5
   1a638:	sub	ip, ip, r1
   1a63c:	sub	sl, ip, #32
   1a640:	lsl	r9, r3, ip
   1a644:	rsb	fp, ip, #32
   1a648:	orr	r9, r9, r2, lsl sl
   1a64c:	orr	r9, r9, r2, lsr fp
   1a650:	lsl	r8, r2, ip
   1a654:	cmp	r5, r9
   1a658:	cmpeq	r4, r8
   1a65c:	movcc	r0, #0
   1a660:	movcc	r1, r0
   1a664:	bcc	1a680 <__assert_fail@plt+0x9198>
   1a668:	mov	r0, #1
   1a66c:	subs	r4, r4, r8
   1a670:	lsl	r1, r0, sl
   1a674:	orr	r1, r1, r0, lsr fp
   1a678:	lsl	r0, r0, ip
   1a67c:	sbc	r5, r5, r9
   1a680:	cmp	ip, #0
   1a684:	beq	1a710 <__assert_fail@plt+0x9228>
   1a688:	lsr	r6, r8, #1
   1a68c:	orr	r6, r6, r9, lsl #31
   1a690:	lsr	r7, r9, #1
   1a694:	mov	r2, ip
   1a698:	b	1a6bc <__assert_fail@plt+0x91d4>
   1a69c:	subs	r3, r4, r6
   1a6a0:	sbc	r8, r5, r7
   1a6a4:	adds	r3, r3, r3
   1a6a8:	adc	r8, r8, r8
   1a6ac:	adds	r4, r3, #1
   1a6b0:	adc	r5, r8, #0
   1a6b4:	subs	r2, r2, #1
   1a6b8:	beq	1a6d8 <__assert_fail@plt+0x91f0>
   1a6bc:	cmp	r5, r7
   1a6c0:	cmpeq	r4, r6
   1a6c4:	bcs	1a69c <__assert_fail@plt+0x91b4>
   1a6c8:	adds	r4, r4, r4
   1a6cc:	adc	r5, r5, r5
   1a6d0:	subs	r2, r2, #1
   1a6d4:	bne	1a6bc <__assert_fail@plt+0x91d4>
   1a6d8:	lsr	r3, r4, ip
   1a6dc:	orr	r3, r3, r5, lsl fp
   1a6e0:	lsr	r2, r5, ip
   1a6e4:	orr	r3, r3, r5, lsr sl
   1a6e8:	adds	r0, r0, r4
   1a6ec:	mov	r4, r3
   1a6f0:	lsl	r3, r2, ip
   1a6f4:	orr	r3, r3, r4, lsl sl
   1a6f8:	lsl	ip, r4, ip
   1a6fc:	orr	r3, r3, r4, lsr fp
   1a700:	adc	r1, r1, r5
   1a704:	subs	r0, r0, ip
   1a708:	mov	r5, r2
   1a70c:	sbc	r1, r1, r3
   1a710:	cmp	lr, #0
   1a714:	strdne	r4, [lr]
   1a718:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1a71c:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   1a720:	mov	r7, r0
   1a724:	ldr	r6, [pc, #72]	; 1a774 <__assert_fail@plt+0x928c>
   1a728:	ldr	r5, [pc, #72]	; 1a778 <__assert_fail@plt+0x9290>
   1a72c:	add	r6, pc, r6
   1a730:	add	r5, pc, r5
   1a734:	sub	r6, r6, r5
   1a738:	mov	r8, r1
   1a73c:	mov	r9, r2
   1a740:	bl	111a4 <fstatfs64@plt-0x20>
   1a744:	asrs	r6, r6, #2
   1a748:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   1a74c:	mov	r4, #0
   1a750:	add	r4, r4, #1
   1a754:	ldr	r3, [r5], #4
   1a758:	mov	r2, r9
   1a75c:	mov	r1, r8
   1a760:	mov	r0, r7
   1a764:	blx	r3
   1a768:	cmp	r6, r4
   1a76c:	bne	1a750 <__assert_fail@plt+0x9268>
   1a770:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   1a774:	ldrdeq	r1, [r1], -r8
   1a778:	ldrdeq	r1, [r1], -r0
   1a77c:	bx	lr
   1a780:	ldr	r3, [pc, #12]	; 1a794 <__assert_fail@plt+0x92ac>
   1a784:	mov	r1, #0
   1a788:	add	r3, pc, r3
   1a78c:	ldr	r2, [r3]
   1a790:	b	11398 <__cxa_atexit@plt>
   1a794:	muleq	r1, r4, r9

Disassembly of section .fini:

0001a798 <.fini>:
   1a798:	push	{r3, lr}
   1a79c:	pop	{r3, pc}
