
../repos/coreutils/src/wc:     file format elf32-littlearm


Disassembly of section .init:

000112b0 <.init>:
   112b0:	push	{r3, lr}
   112b4:	bl	1163c <__assert_fail@plt+0x48>
   112b8:	pop	{r3, pc}

Disassembly of section .plt:

000112bc <calloc@plt-0x14>:
   112bc:	push	{lr}		; (str lr, [sp, #-4]!)
   112c0:	ldr	lr, [pc, #4]	; 112cc <calloc@plt-0x4>
   112c4:	add	lr, pc, lr
   112c8:	ldr	pc, [lr, #8]!
   112cc:	andeq	r7, r1, r4, lsr sp

000112d0 <calloc@plt>:
   112d0:	add	ip, pc, #0, 12
   112d4:	add	ip, ip, #94208	; 0x17000
   112d8:	ldr	pc, [ip, #3380]!	; 0xd34

000112dc <fputs_unlocked@plt>:
   112dc:	add	ip, pc, #0, 12
   112e0:	add	ip, ip, #94208	; 0x17000
   112e4:	ldr	pc, [ip, #3372]!	; 0xd2c

000112e8 <raise@plt>:
   112e8:	add	ip, pc, #0, 12
   112ec:	add	ip, ip, #94208	; 0x17000
   112f0:	ldr	pc, [ip, #3364]!	; 0xd24

000112f4 <strcmp@plt>:
   112f4:	add	ip, pc, #0, 12
   112f8:	add	ip, ip, #94208	; 0x17000
   112fc:	ldr	pc, [ip, #3356]!	; 0xd1c

00011300 <posix_fadvise64@plt>:
   11300:	add	ip, pc, #0, 12
   11304:	add	ip, ip, #94208	; 0x17000
   11308:	ldr	pc, [ip, #3348]!	; 0xd14

0001130c <read@plt>:
   1130c:	add	ip, pc, #0, 12
   11310:	add	ip, ip, #94208	; 0x17000
   11314:	ldr	pc, [ip, #3340]!	; 0xd0c

00011318 <fflush@plt>:
   11318:	add	ip, pc, #0, 12
   1131c:	add	ip, ip, #94208	; 0x17000
   11320:	ldr	pc, [ip, #3332]!	; 0xd04

00011324 <wcwidth@plt>:
   11324:	add	ip, pc, #0, 12
   11328:	add	ip, ip, #94208	; 0x17000
   1132c:	ldr	pc, [ip, #3324]!	; 0xcfc

00011330 <memmove@plt>:
   11330:	add	ip, pc, #0, 12
   11334:	add	ip, ip, #94208	; 0x17000
   11338:	ldr	pc, [ip, #3316]!	; 0xcf4

0001133c <free@plt>:
   1133c:	add	ip, pc, #0, 12
   11340:	add	ip, ip, #94208	; 0x17000
   11344:	ldr	pc, [ip, #3308]!	; 0xcec

00011348 <ferror@plt>:
   11348:	add	ip, pc, #0, 12
   1134c:	add	ip, ip, #94208	; 0x17000
   11350:	ldr	pc, [ip, #3300]!	; 0xce4

00011354 <_exit@plt>:
   11354:	add	ip, pc, #0, 12
   11358:	add	ip, ip, #94208	; 0x17000
   1135c:	ldr	pc, [ip, #3292]!	; 0xcdc

00011360 <memcpy@plt>:
   11360:	add	ip, pc, #0, 12
   11364:	add	ip, ip, #94208	; 0x17000
   11368:	ldr	pc, [ip, #3284]!	; 0xcd4

0001136c <mbsinit@plt>:
   1136c:	add	ip, pc, #0, 12
   11370:	add	ip, ip, #94208	; 0x17000
   11374:	ldr	pc, [ip, #3276]!	; 0xccc

00011378 <memcmp@plt>:
   11378:	add	ip, pc, #0, 12
   1137c:	add	ip, ip, #94208	; 0x17000
   11380:	ldr	pc, [ip, #3268]!	; 0xcc4

00011384 <dcgettext@plt>:
   11384:	add	ip, pc, #0, 12
   11388:	add	ip, ip, #94208	; 0x17000
   1138c:	ldr	pc, [ip, #3260]!	; 0xcbc

00011390 <sysconf@plt>:
   11390:	add	ip, pc, #0, 12
   11394:	add	ip, ip, #94208	; 0x17000
   11398:	ldr	pc, [ip, #3252]!	; 0xcb4

0001139c <realloc@plt>:
   1139c:	add	ip, pc, #0, 12
   113a0:	add	ip, ip, #94208	; 0x17000
   113a4:	ldr	pc, [ip, #3244]!	; 0xcac

000113a8 <textdomain@plt>:
   113a8:	add	ip, pc, #0, 12
   113ac:	add	ip, ip, #94208	; 0x17000
   113b0:	ldr	pc, [ip, #3236]!	; 0xca4

000113b4 <iswcntrl@plt>:
   113b4:	add	ip, pc, #0, 12
   113b8:	add	ip, ip, #94208	; 0x17000
   113bc:	ldr	pc, [ip, #3228]!	; 0xc9c

000113c0 <rawmemchr@plt>:
   113c0:	add	ip, pc, #0, 12
   113c4:	add	ip, ip, #94208	; 0x17000
   113c8:	ldr	pc, [ip, #3220]!	; 0xc94

000113cc <iswprint@plt>:
   113cc:	add	ip, pc, #0, 12
   113d0:	add	ip, ip, #94208	; 0x17000
   113d4:	ldr	pc, [ip, #3212]!	; 0xc8c

000113d8 <__fxstat64@plt>:
   113d8:	add	ip, pc, #0, 12
   113dc:	add	ip, ip, #94208	; 0x17000
   113e0:	ldr	pc, [ip, #3204]!	; 0xc84

000113e4 <fwrite@plt>:
   113e4:	add	ip, pc, #0, 12
   113e8:	add	ip, ip, #94208	; 0x17000
   113ec:	ldr	pc, [ip, #3196]!	; 0xc7c

000113f0 <lseek64@plt>:
   113f0:	add	ip, pc, #0, 12
   113f4:	add	ip, ip, #94208	; 0x17000
   113f8:	ldr	pc, [ip, #3188]!	; 0xc74

000113fc <__ctype_get_mb_cur_max@plt>:
   113fc:	add	ip, pc, #0, 12
   11400:	add	ip, ip, #94208	; 0x17000
   11404:	ldr	pc, [ip, #3180]!	; 0xc6c

00011408 <__fpending@plt>:
   11408:	add	ip, pc, #0, 12
   1140c:	add	ip, ip, #94208	; 0x17000
   11410:	ldr	pc, [ip, #3172]!	; 0xc64

00011414 <ferror_unlocked@plt>:
   11414:	add	ip, pc, #0, 12
   11418:	add	ip, ip, #94208	; 0x17000
   1141c:	ldr	pc, [ip, #3164]!	; 0xc5c

00011420 <mbrtowc@plt>:
   11420:	add	ip, pc, #0, 12
   11424:	add	ip, ip, #94208	; 0x17000
   11428:	ldr	pc, [ip, #3156]!	; 0xc54

0001142c <error@plt>:
   1142c:	add	ip, pc, #0, 12
   11430:	add	ip, ip, #94208	; 0x17000
   11434:	ldr	pc, [ip, #3148]!	; 0xc4c

00011438 <open64@plt>:
   11438:	add	ip, pc, #0, 12
   1143c:	add	ip, ip, #94208	; 0x17000
   11440:	ldr	pc, [ip, #3140]!	; 0xc44

00011444 <getenv@plt>:
   11444:	add	ip, pc, #0, 12
   11448:	add	ip, ip, #94208	; 0x17000
   1144c:	ldr	pc, [ip, #3132]!	; 0xc3c

00011450 <sysinfo@plt>:
   11450:	add	ip, pc, #0, 12
   11454:	add	ip, ip, #94208	; 0x17000
   11458:	ldr	pc, [ip, #3124]!	; 0xc34

0001145c <malloc@plt>:
   1145c:	add	ip, pc, #0, 12
   11460:	add	ip, ip, #94208	; 0x17000
   11464:	ldr	pc, [ip, #3116]!	; 0xc2c

00011468 <__libc_start_main@plt>:
   11468:	add	ip, pc, #0, 12
   1146c:	add	ip, ip, #94208	; 0x17000
   11470:	ldr	pc, [ip, #3108]!	; 0xc24

00011474 <__freading@plt>:
   11474:	add	ip, pc, #0, 12
   11478:	add	ip, ip, #94208	; 0x17000
   1147c:	ldr	pc, [ip, #3100]!	; 0xc1c

00011480 <__gmon_start__@plt>:
   11480:	add	ip, pc, #0, 12
   11484:	add	ip, ip, #94208	; 0x17000
   11488:	ldr	pc, [ip, #3092]!	; 0xc14

0001148c <getopt_long@plt>:
   1148c:	add	ip, pc, #0, 12
   11490:	add	ip, ip, #94208	; 0x17000
   11494:	ldr	pc, [ip, #3084]!	; 0xc0c

00011498 <__ctype_b_loc@plt>:
   11498:	add	ip, pc, #0, 12
   1149c:	add	ip, ip, #94208	; 0x17000
   114a0:	ldr	pc, [ip, #3076]!	; 0xc04

000114a4 <exit@plt>:
   114a4:	add	ip, pc, #0, 12
   114a8:	add	ip, ip, #94208	; 0x17000
   114ac:	ldr	pc, [ip, #3068]!	; 0xbfc

000114b0 <feof@plt>:
   114b0:	add	ip, pc, #0, 12
   114b4:	add	ip, ip, #94208	; 0x17000
   114b8:	ldr	pc, [ip, #3060]!	; 0xbf4

000114bc <iswspace@plt>:
   114bc:	add	ip, pc, #0, 12
   114c0:	add	ip, ip, #94208	; 0x17000
   114c4:	ldr	pc, [ip, #3052]!	; 0xbec

000114c8 <strlen@plt>:
   114c8:	add	ip, pc, #0, 12
   114cc:	add	ip, ip, #94208	; 0x17000
   114d0:	ldr	pc, [ip, #3044]!	; 0xbe4

000114d4 <strchr@plt>:
   114d4:	add	ip, pc, #0, 12
   114d8:	add	ip, ip, #94208	; 0x17000
   114dc:	ldr	pc, [ip, #3036]!	; 0xbdc

000114e0 <getpagesize@plt>:
   114e0:	add	ip, pc, #0, 12
   114e4:	add	ip, ip, #94208	; 0x17000
   114e8:	ldr	pc, [ip, #3028]!	; 0xbd4

000114ec <__errno_location@plt>:
   114ec:	add	ip, pc, #0, 12
   114f0:	add	ip, ip, #94208	; 0x17000
   114f4:	ldr	pc, [ip, #3020]!	; 0xbcc

000114f8 <__cxa_atexit@plt>:
   114f8:	add	ip, pc, #0, 12
   114fc:	add	ip, ip, #94208	; 0x17000
   11500:	ldr	pc, [ip, #3012]!	; 0xbc4

00011504 <setvbuf@plt>:
   11504:	add	ip, pc, #0, 12
   11508:	add	ip, ip, #94208	; 0x17000
   1150c:	ldr	pc, [ip, #3004]!	; 0xbbc

00011510 <memset@plt>:
   11510:	add	ip, pc, #0, 12
   11514:	add	ip, ip, #94208	; 0x17000
   11518:	ldr	pc, [ip, #2996]!	; 0xbb4

0001151c <btowc@plt>:
   1151c:	add	ip, pc, #0, 12
   11520:	add	ip, ip, #94208	; 0x17000
   11524:	ldr	pc, [ip, #2988]!	; 0xbac

00011528 <fgetc@plt>:
   11528:	add	ip, pc, #0, 12
   1152c:	add	ip, ip, #94208	; 0x17000
   11530:	ldr	pc, [ip, #2980]!	; 0xba4

00011534 <__printf_chk@plt>:
   11534:	add	ip, pc, #0, 12
   11538:	add	ip, ip, #94208	; 0x17000
   1153c:	ldr	pc, [ip, #2972]!	; 0xb9c

00011540 <fileno@plt>:
   11540:	add	ip, pc, #0, 12
   11544:	add	ip, ip, #94208	; 0x17000
   11548:	ldr	pc, [ip, #2964]!	; 0xb94

0001154c <__fprintf_chk@plt>:
   1154c:	add	ip, pc, #0, 12
   11550:	add	ip, ip, #94208	; 0x17000
   11554:	ldr	pc, [ip, #2956]!	; 0xb8c

00011558 <fclose@plt>:
   11558:	add	ip, pc, #0, 12
   1155c:	add	ip, ip, #94208	; 0x17000
   11560:	ldr	pc, [ip, #2948]!	; 0xb84

00011564 <fseeko64@plt>:
   11564:	add	ip, pc, #0, 12
   11568:	add	ip, ip, #94208	; 0x17000
   1156c:	ldr	pc, [ip, #2940]!	; 0xb7c

00011570 <setlocale@plt>:
   11570:	add	ip, pc, #0, 12
   11574:	add	ip, ip, #94208	; 0x17000
   11578:	ldr	pc, [ip, #2932]!	; 0xb74

0001157c <strrchr@plt>:
   1157c:	add	ip, pc, #0, 12
   11580:	add	ip, ip, #94208	; 0x17000
   11584:	ldr	pc, [ip, #2924]!	; 0xb6c

00011588 <nl_langinfo@plt>:
   11588:	add	ip, pc, #0, 12
   1158c:	add	ip, ip, #94208	; 0x17000
   11590:	ldr	pc, [ip, #2916]!	; 0xb64

00011594 <fopen64@plt>:
   11594:	add	ip, pc, #0, 12
   11598:	add	ip, ip, #94208	; 0x17000
   1159c:	ldr	pc, [ip, #2908]!	; 0xb5c

000115a0 <bindtextdomain@plt>:
   115a0:	add	ip, pc, #0, 12
   115a4:	add	ip, ip, #94208	; 0x17000
   115a8:	ldr	pc, [ip, #2900]!	; 0xb54

000115ac <getdelim@plt>:
   115ac:	add	ip, pc, #0, 12
   115b0:	add	ip, ip, #94208	; 0x17000
   115b4:	ldr	pc, [ip, #2892]!	; 0xb4c

000115b8 <__xstat64@plt>:
   115b8:	add	ip, pc, #0, 12
   115bc:	add	ip, ip, #94208	; 0x17000
   115c0:	ldr	pc, [ip, #2884]!	; 0xb44

000115c4 <strncmp@plt>:
   115c4:	add	ip, pc, #0, 12
   115c8:	add	ip, ip, #94208	; 0x17000
   115cc:	ldr	pc, [ip, #2876]!	; 0xb3c

000115d0 <abort@plt>:
   115d0:	add	ip, pc, #0, 12
   115d4:	add	ip, ip, #94208	; 0x17000
   115d8:	ldr	pc, [ip, #2868]!	; 0xb34

000115dc <close@plt>:
   115dc:	add	ip, pc, #0, 12
   115e0:	add	ip, ip, #94208	; 0x17000
   115e4:	ldr	pc, [ip, #2860]!	; 0xb2c

000115e8 <putchar_unlocked@plt>:
   115e8:	add	ip, pc, #0, 12
   115ec:	add	ip, ip, #94208	; 0x17000
   115f0:	ldr	pc, [ip, #2852]!	; 0xb24

000115f4 <__assert_fail@plt>:
   115f4:	add	ip, pc, #0, 12
   115f8:	add	ip, ip, #94208	; 0x17000
   115fc:	ldr	pc, [ip, #2844]!	; 0xb1c

Disassembly of section .text:

00011600 <_obstack_begin@@Base-0x551c>:
   11600:	mov	fp, #0
   11604:	mov	lr, #0
   11608:	pop	{r1}		; (ldr r1, [sp], #4)
   1160c:	mov	r2, sp
   11610:	push	{r2}		; (str r2, [sp, #-4]!)
   11614:	push	{r0}		; (str r0, [sp, #-4]!)
   11618:	ldr	ip, [pc, #16]	; 11630 <__assert_fail@plt+0x3c>
   1161c:	push	{ip}		; (str ip, [sp, #-4]!)
   11620:	ldr	r0, [pc, #12]	; 11634 <__assert_fail@plt+0x40>
   11624:	ldr	r3, [pc, #12]	; 11638 <__assert_fail@plt+0x44>
   11628:	bl	11468 <__libc_start_main@plt>
   1162c:	bl	115d0 <abort@plt>
   11630:	andeq	r7, r1, r0, lsl #10
   11634:	ldrdeq	r1, [r1], -r0
   11638:	andeq	r7, r1, r0, lsr #9
   1163c:	ldr	r3, [pc, #20]	; 11658 <__assert_fail@plt+0x64>
   11640:	ldr	r2, [pc, #20]	; 1165c <__assert_fail@plt+0x68>
   11644:	add	r3, pc, r3
   11648:	ldr	r2, [r3, r2]
   1164c:	cmp	r2, #0
   11650:	bxeq	lr
   11654:	b	11480 <__gmon_start__@plt>
   11658:			; <UNDEFINED> instruction: 0x000179b4
   1165c:	andeq	r0, r0, ip, lsl r1
   11660:	ldr	r0, [pc, #24]	; 11680 <__assert_fail@plt+0x8c>
   11664:	ldr	r3, [pc, #24]	; 11684 <__assert_fail@plt+0x90>
   11668:	cmp	r3, r0
   1166c:	bxeq	lr
   11670:	ldr	r3, [pc, #16]	; 11688 <__assert_fail@plt+0x94>
   11674:	cmp	r3, #0
   11678:	bxeq	lr
   1167c:	bx	r3
   11680:	andeq	r9, r2, r4, ror r1
   11684:	andeq	r9, r2, r4, ror r1
   11688:	andeq	r0, r0, r0
   1168c:	ldr	r0, [pc, #36]	; 116b8 <__assert_fail@plt+0xc4>
   11690:	ldr	r1, [pc, #36]	; 116bc <__assert_fail@plt+0xc8>
   11694:	sub	r1, r1, r0
   11698:	asr	r1, r1, #2
   1169c:	add	r1, r1, r1, lsr #31
   116a0:	asrs	r1, r1, #1
   116a4:	bxeq	lr
   116a8:	ldr	r3, [pc, #16]	; 116c0 <__assert_fail@plt+0xcc>
   116ac:	cmp	r3, #0
   116b0:	bxeq	lr
   116b4:	bx	r3
   116b8:	andeq	r9, r2, r4, ror r1
   116bc:	andeq	r9, r2, r4, ror r1
   116c0:	andeq	r0, r0, r0
   116c4:	push	{r4, lr}
   116c8:	ldr	r4, [pc, #24]	; 116e8 <__assert_fail@plt+0xf4>
   116cc:	ldrb	r3, [r4]
   116d0:	cmp	r3, #0
   116d4:	popne	{r4, pc}
   116d8:	bl	11660 <__assert_fail@plt+0x6c>
   116dc:	mov	r3, #1
   116e0:	strb	r3, [r4]
   116e4:	pop	{r4, pc}
   116e8:	muleq	r2, ip, r1
   116ec:	b	1168c <__assert_fail@plt+0x98>
   116f0:	push	{fp, lr}
   116f4:	mov	fp, sp
   116f8:	mov	r4, r0
   116fc:	cmp	r0, #0
   11700:	bne	117d8 <__assert_fail@plt+0x1e4>
   11704:	movw	r1, #30067	; 0x7573
   11708:	movt	r1, #1
   1170c:	mov	r0, #0
   11710:	mov	r2, #5
   11714:	bl	11384 <dcgettext@plt>
   11718:	mov	r1, r0
   1171c:	movw	r0, #37356	; 0x91ec
   11720:	movt	r0, #2
   11724:	ldr	r2, [r0]
   11728:	mov	r0, #1
   1172c:	mov	r3, r2
   11730:	bl	11534 <__printf_chk@plt>
   11734:	movw	r1, #30138	; 0x75ba
   11738:	movt	r1, #1
   1173c:	mov	r0, #0
   11740:	mov	r2, #5
   11744:	bl	11384 <dcgettext@plt>
   11748:	movw	r5, #37268	; 0x9194
   1174c:	movt	r5, #2
   11750:	ldr	r1, [r5]
   11754:	bl	112dc <fputs_unlocked@plt>
   11758:	bl	1181c <__assert_fail@plt+0x228>
   1175c:	movw	r1, #30332	; 0x767c
   11760:	movt	r1, #1
   11764:	mov	r0, #0
   11768:	mov	r2, #5
   1176c:	bl	11384 <dcgettext@plt>
   11770:	ldr	r1, [r5]
   11774:	bl	112dc <fputs_unlocked@plt>
   11778:	movw	r1, #30633	; 0x77a9
   1177c:	movt	r1, #1
   11780:	mov	r0, #0
   11784:	mov	r2, #5
   11788:	bl	11384 <dcgettext@plt>
   1178c:	ldr	r1, [r5]
   11790:	bl	112dc <fputs_unlocked@plt>
   11794:	movw	r1, #30934	; 0x78d6
   11798:	movt	r1, #1
   1179c:	mov	r0, #0
   117a0:	mov	r2, #5
   117a4:	bl	11384 <dcgettext@plt>
   117a8:	ldr	r1, [r5]
   117ac:	bl	112dc <fputs_unlocked@plt>
   117b0:	movw	r1, #30979	; 0x7903
   117b4:	movt	r1, #1
   117b8:	mov	r0, #0
   117bc:	mov	r2, #5
   117c0:	bl	11384 <dcgettext@plt>
   117c4:	ldr	r1, [r5]
   117c8:	bl	112dc <fputs_unlocked@plt>
   117cc:	bl	1184c <__assert_fail@plt+0x258>
   117d0:	mov	r0, r4
   117d4:	bl	114a4 <exit@plt>
   117d8:	movw	r0, #37256	; 0x9188
   117dc:	movt	r0, #2
   117e0:	ldr	r5, [r0]
   117e4:	movw	r1, #30028	; 0x754c
   117e8:	movt	r1, #1
   117ec:	mov	r0, #0
   117f0:	mov	r2, #5
   117f4:	bl	11384 <dcgettext@plt>
   117f8:	mov	r2, r0
   117fc:	movw	r0, #37356	; 0x91ec
   11800:	movt	r0, #2
   11804:	ldr	r3, [r0]
   11808:	mov	r0, r5
   1180c:	mov	r1, #1
   11810:	bl	1154c <__fprintf_chk@plt>
   11814:	mov	r0, r4
   11818:	bl	114a4 <exit@plt>
   1181c:	push	{fp, lr}
   11820:	mov	fp, sp
   11824:	movw	r1, #31447	; 0x7ad7
   11828:	movt	r1, #1
   1182c:	mov	r0, #0
   11830:	mov	r2, #5
   11834:	bl	11384 <dcgettext@plt>
   11838:	movw	r1, #37268	; 0x9194
   1183c:	movt	r1, #2
   11840:	ldr	r1, [r1]
   11844:	pop	{fp, lr}
   11848:	b	112dc <fputs_unlocked@plt>
   1184c:	push	{r4, r5, fp, lr}
   11850:	add	fp, sp, #8
   11854:	sub	sp, sp, #56	; 0x38
   11858:	movw	r0, #32048	; 0x7d30
   1185c:	movt	r0, #1
   11860:	add	r1, r0, #32
   11864:	mov	r5, sp
   11868:	mov	r2, #48	; 0x30
   1186c:	vld1.64	{d16-d17}, [r1]
   11870:	add	r1, r5, #32
   11874:	add	r3, r0, #16
   11878:	vld1.64	{d18-d19}, [r0], r2
   1187c:	vld1.64	{d20-d21}, [r3]
   11880:	vldr	d22, [r0]
   11884:	vst1.64	{d16-d17}, [r1]
   11888:	add	r0, r5, #16
   1188c:	vst1.64	{d20-d21}, [r0]
   11890:	mov	r0, r5
   11894:	vst1.64	{d18-d19}, [r0], r2
   11898:	vstr	d22, [r0]
   1189c:	ldr	r1, [sp]
   118a0:	cmp	r1, #0
   118a4:	beq	118cc <__assert_fail@plt+0x2d8>
   118a8:	mov	r5, sp
   118ac:	movw	r4, #31033	; 0x7939
   118b0:	movt	r4, #1
   118b4:	mov	r0, r4
   118b8:	bl	112f4 <strcmp@plt>
   118bc:	cmp	r0, #0
   118c0:	ldrne	r1, [r5, #8]!
   118c4:	cmpne	r1, #0
   118c8:	bne	118b4 <__assert_fail@plt+0x2c0>
   118cc:	ldr	r4, [r5, #4]
   118d0:	movw	r1, #31598	; 0x7b6e
   118d4:	movt	r1, #1
   118d8:	mov	r0, #0
   118dc:	mov	r2, #5
   118e0:	bl	11384 <dcgettext@plt>
   118e4:	mov	r1, r0
   118e8:	movw	r2, #31082	; 0x796a
   118ec:	movt	r2, #1
   118f0:	movw	r3, #31621	; 0x7b85
   118f4:	movt	r3, #1
   118f8:	mov	r0, #1
   118fc:	bl	11534 <__printf_chk@plt>
   11900:	movw	r5, #31033	; 0x7939
   11904:	movt	r5, #1
   11908:	cmp	r4, #0
   1190c:	moveq	r4, r5
   11910:	mov	r0, #5
   11914:	mov	r1, #0
   11918:	bl	11570 <setlocale@plt>
   1191c:	cmp	r0, #0
   11920:	beq	11960 <__assert_fail@plt+0x36c>
   11924:	movw	r1, #31661	; 0x7bad
   11928:	movt	r1, #1
   1192c:	mov	r2, #3
   11930:	bl	115c4 <strncmp@plt>
   11934:	cmp	r0, #0
   11938:	beq	11960 <__assert_fail@plt+0x36c>
   1193c:	movw	r1, #31665	; 0x7bb1
   11940:	movt	r1, #1
   11944:	mov	r0, #0
   11948:	mov	r2, #5
   1194c:	bl	11384 <dcgettext@plt>
   11950:	movw	r1, #37268	; 0x9194
   11954:	movt	r1, #2
   11958:	ldr	r1, [r1]
   1195c:	bl	112dc <fputs_unlocked@plt>
   11960:	movw	r1, #31736	; 0x7bf8
   11964:	movt	r1, #1
   11968:	mov	r0, #0
   1196c:	mov	r2, #5
   11970:	bl	11384 <dcgettext@plt>
   11974:	mov	r1, r0
   11978:	movw	r2, #31621	; 0x7b85
   1197c:	movt	r2, #1
   11980:	mov	r0, #1
   11984:	mov	r3, r5
   11988:	bl	11534 <__printf_chk@plt>
   1198c:	movw	r1, #31763	; 0x7c13
   11990:	movt	r1, #1
   11994:	mov	r0, #0
   11998:	mov	r2, #5
   1199c:	bl	11384 <dcgettext@plt>
   119a0:	mov	r1, r0
   119a4:	movw	r0, #31531	; 0x7b2b
   119a8:	movt	r0, #1
   119ac:	movw	r3, #31813	; 0x7c45
   119b0:	movt	r3, #1
   119b4:	cmp	r4, r5
   119b8:	moveq	r3, r0
   119bc:	mov	r0, #1
   119c0:	mov	r2, r4
   119c4:	bl	11534 <__printf_chk@plt>
   119c8:	sub	sp, fp, #8
   119cc:	pop	{r4, r5, fp, pc}
   119d0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   119d4:	add	fp, sp, #28
   119d8:	sub	sp, sp, #4
   119dc:	vpush	{d8-d10}
   119e0:	sub	sp, sp, #312	; 0x138
   119e4:	mov	r5, r1
   119e8:	mov	r6, r0
   119ec:	ldr	r0, [r1]
   119f0:	bl	13cd4 <__assert_fail@plt+0x26e0>
   119f4:	movw	r1, #31813	; 0x7c45
   119f8:	movt	r1, #1
   119fc:	mov	r0, #6
   11a00:	bl	11570 <setlocale@plt>
   11a04:	movw	r4, #31086	; 0x796e
   11a08:	movt	r4, #1
   11a0c:	movw	r1, #31036	; 0x793c
   11a10:	movt	r1, #1
   11a14:	mov	r0, r4
   11a18:	bl	115a0 <bindtextdomain@plt>
   11a1c:	mov	r0, r4
   11a20:	bl	113a8 <textdomain@plt>
   11a24:	movw	r0, #14176	; 0x3760
   11a28:	movt	r0, #1
   11a2c:	bl	17504 <_obstack_memory_used@@Base+0x6f4>
   11a30:	bl	114e0 <getpagesize@plt>
   11a34:	movw	r1, #37280	; 0x91a0
   11a38:	movt	r1, #2
   11a3c:	str	r0, [r1]
   11a40:	movw	r0, #37268	; 0x9194
   11a44:	movt	r0, #2
   11a48:	ldr	r0, [r0]
   11a4c:	mov	sl, #0
   11a50:	mov	r1, #0
   11a54:	mov	r2, #1
   11a58:	mov	r3, #0
   11a5c:	bl	11504 <setvbuf@plt>
   11a60:	movw	r0, #31060	; 0x7954
   11a64:	movt	r0, #1
   11a68:	bl	11444 <getenv@plt>
   11a6c:	movw	r1, #37296	; 0x91b0
   11a70:	movt	r1, #2
   11a74:	str	sl, [r1]
   11a78:	str	sl, [r1, #4]
   11a7c:	movw	r1, #37304	; 0x91b8
   11a80:	movt	r1, #2
   11a84:	str	sl, [r1]
   11a88:	str	sl, [r1, #4]
   11a8c:	movw	r1, #37312	; 0x91c0
   11a90:	movt	r1, #2
   11a94:	str	sl, [r1]
   11a98:	str	sl, [r1, #4]
   11a9c:	movw	r1, #37320	; 0x91c8
   11aa0:	movt	r1, #2
   11aa4:	str	sl, [r1]
   11aa8:	str	sl, [r1, #4]
   11aac:	movw	r1, #37328	; 0x91d0
   11ab0:	movt	r1, #2
   11ab4:	str	sl, [r1]
   11ab8:	str	sl, [r1, #4]
   11abc:	movw	r9, #37285	; 0x91a5
   11ac0:	movt	r9, #2
   11ac4:	strb	sl, [r9]
   11ac8:	movw	r1, #37286	; 0x91a6
   11acc:	movt	r1, #2
   11ad0:	strb	sl, [r1]
   11ad4:	movw	r1, #37287	; 0x91a7
   11ad8:	movt	r1, #2
   11adc:	strb	sl, [r1]
   11ae0:	movw	r1, #37288	; 0x91a8
   11ae4:	movt	r1, #2
   11ae8:	strb	sl, [r1]
   11aec:	movw	r1, #37289	; 0x91a9
   11af0:	movt	r1, #2
   11af4:	strb	sl, [r1]
   11af8:	cmp	r0, #0
   11afc:	movwne	r0, #1
   11b00:	movw	r1, #37284	; 0x91a4
   11b04:	movt	r1, #2
   11b08:	strb	r0, [r1]
   11b0c:	movw	r8, #31076	; 0x7964
   11b10:	movt	r8, #1
   11b14:	movw	r7, #31888	; 0x7c90
   11b18:	movt	r7, #1
   11b1c:	mov	r4, #0
   11b20:	b	11b2c <__assert_fail@plt+0x538>
   11b24:	mov	r1, #1
   11b28:	strb	r1, [r0]
   11b2c:	str	sl, [sp]
   11b30:	mov	r0, r6
   11b34:	mov	r1, r5
   11b38:	mov	r2, r8
   11b3c:	mov	r3, r7
   11b40:	bl	1148c <getopt_long@plt>
   11b44:	cmp	r0, #75	; 0x4b
   11b48:	ble	11c68 <__assert_fail@plt+0x674>
   11b4c:	sub	r1, r0, #76	; 0x4c
   11b50:	cmp	r1, #43	; 0x2b
   11b54:	bhi	11c20 <__assert_fail@plt+0x62c>
   11b58:	add	r2, pc, #4
   11b5c:	mov	r0, r9
   11b60:	ldr	pc, [r2, r1, lsl #2]
   11b64:	andeq	r1, r1, r4, lsl ip
   11b68:	andeq	r2, r1, r8, lsr #5
   11b6c:	andeq	r2, r1, r8, lsr #5
   11b70:	andeq	r2, r1, r8, lsr #5
   11b74:	andeq	r2, r1, r8, lsr #5
   11b78:	andeq	r2, r1, r8, lsr #5
   11b7c:	andeq	r2, r1, r8, lsr #5
   11b80:	andeq	r2, r1, r8, lsr #5
   11b84:	andeq	r2, r1, r8, lsr #5
   11b88:	andeq	r2, r1, r8, lsr #5
   11b8c:	andeq	r2, r1, r8, lsr #5
   11b90:	andeq	r2, r1, r8, lsr #5
   11b94:	andeq	r2, r1, r8, lsr #5
   11b98:	andeq	r2, r1, r8, lsr #5
   11b9c:	andeq	r2, r1, r8, lsr #5
   11ba0:	andeq	r2, r1, r8, lsr #5
   11ba4:	andeq	r2, r1, r8, lsr #5
   11ba8:	andeq	r2, r1, r8, lsr #5
   11bac:	andeq	r2, r1, r8, lsr #5
   11bb0:	andeq	r2, r1, r8, lsr #5
   11bb4:	andeq	r2, r1, r8, lsr #5
   11bb8:	andeq	r2, r1, r8, lsr #5
   11bbc:	andeq	r2, r1, r8, lsr #5
   11bc0:	andeq	r1, r1, r4, lsr #22
   11bc4:	andeq	r2, r1, r8, lsr #5
   11bc8:	andeq	r2, r1, r8, lsr #5
   11bcc:	andeq	r2, r1, r8, lsr #5
   11bd0:	andeq	r2, r1, r8, lsr #5
   11bd4:	andeq	r2, r1, r8, lsr #5
   11bd8:	andeq	r2, r1, r8, lsr #5
   11bdc:	andeq	r2, r1, r8, lsr #5
   11be0:	andeq	r2, r1, r8, lsr #5
   11be4:	andeq	r1, r1, r0, asr ip
   11be8:	andeq	r1, r1, r4, asr #24
   11bec:	andeq	r2, r1, r8, lsr #5
   11bf0:	andeq	r2, r1, r8, lsr #5
   11bf4:	andeq	r2, r1, r8, lsr #5
   11bf8:	andeq	r2, r1, r8, lsr #5
   11bfc:	andeq	r2, r1, r8, lsr #5
   11c00:	andeq	r2, r1, r8, lsr #5
   11c04:	andeq	r2, r1, r8, lsr #5
   11c08:	andeq	r2, r1, r8, lsr #5
   11c0c:	andeq	r2, r1, r8, lsr #5
   11c10:	andeq	r1, r1, ip, asr ip
   11c14:	movw	r0, #37289	; 0x91a9
   11c18:	movt	r0, #2
   11c1c:	b	11b24 <__assert_fail@plt+0x530>
   11c20:	cmp	r0, #256	; 0x100
   11c24:	beq	11b2c <__assert_fail@plt+0x538>
   11c28:	movw	r1, #257	; 0x101
   11c2c:	cmp	r0, r1
   11c30:	bne	122a8 <__assert_fail@plt+0xcb4>
   11c34:	movw	r0, #37272	; 0x9198
   11c38:	movt	r0, #2
   11c3c:	ldr	r4, [r0]
   11c40:	b	11b2c <__assert_fail@plt+0x538>
   11c44:	movw	r0, #37286	; 0x91a6
   11c48:	movt	r0, #2
   11c4c:	b	11b24 <__assert_fail@plt+0x530>
   11c50:	movw	r0, #37288	; 0x91a8
   11c54:	movt	r0, #2
   11c58:	b	11b24 <__assert_fail@plt+0x530>
   11c5c:	movw	r0, #37287	; 0x91a7
   11c60:	movt	r0, #2
   11c64:	b	11b24 <__assert_fail@plt+0x530>
   11c68:	cmn	r0, #1
   11c6c:	bne	12230 <__assert_fail@plt+0xc3c>
   11c70:	movw	r0, #37288	; 0x91a8
   11c74:	movt	r0, #2
   11c78:	ldrb	r1, [r0]
   11c7c:	cmp	r1, #0
   11c80:	bne	11ce0 <__assert_fail@plt+0x6ec>
   11c84:	movw	r1, #37287	; 0x91a7
   11c88:	movt	r1, #2
   11c8c:	ldrb	r2, [r1]
   11c90:	cmp	r2, #0
   11c94:	bne	11ce0 <__assert_fail@plt+0x6ec>
   11c98:	movw	r2, #37286	; 0x91a6
   11c9c:	movt	r2, #2
   11ca0:	ldrb	r2, [r2]
   11ca4:	cmp	r2, #0
   11ca8:	bne	11ce0 <__assert_fail@plt+0x6ec>
   11cac:	movw	r2, #37285	; 0x91a5
   11cb0:	movt	r2, #2
   11cb4:	ldrb	r3, [r2]
   11cb8:	cmp	r3, #0
   11cbc:	bne	11ce0 <__assert_fail@plt+0x6ec>
   11cc0:	movw	r3, #37289	; 0x91a9
   11cc4:	movt	r3, #2
   11cc8:	ldrb	r3, [r3]
   11ccc:	cmp	r3, #0
   11cd0:	moveq	r3, #1
   11cd4:	strbeq	r3, [r1]
   11cd8:	strbeq	r3, [r2]
   11cdc:	strbeq	r3, [r0]
   11ce0:	movw	r7, #37248	; 0x9180
   11ce4:	movt	r7, #2
   11ce8:	ldr	r0, [r7]
   11cec:	cmp	r4, #0
   11cf0:	beq	11d70 <__assert_fail@plt+0x77c>
   11cf4:	cmp	r0, r6
   11cf8:	blt	122d0 <__assert_fail@plt+0xcdc>
   11cfc:	movw	r1, #32242	; 0x7df2
   11d00:	movt	r1, #1
   11d04:	mov	r0, r4
   11d08:	bl	112f4 <strcmp@plt>
   11d0c:	cmp	r0, #0
   11d10:	beq	11d98 <__assert_fail@plt+0x7a4>
   11d14:	movw	r1, #31263	; 0x7a1f
   11d18:	movt	r1, #1
   11d1c:	mov	r0, r4
   11d20:	bl	11594 <fopen64@plt>
   11d24:	mov	r5, r0
   11d28:	cmp	r0, #0
   11d2c:	bne	11da4 <__assert_fail@plt+0x7b0>
   11d30:	bl	114ec <__errno_location@plt>
   11d34:	ldr	r5, [r0]
   11d38:	movw	r1, #31192	; 0x79d8
   11d3c:	movt	r1, #1
   11d40:	mov	r0, #0
   11d44:	mov	r2, #5
   11d48:	bl	11384 <dcgettext@plt>
   11d4c:	mov	r6, r0
   11d50:	mov	r0, #4
   11d54:	mov	r1, r4
   11d58:	bl	15318 <__assert_fail@plt+0x3d24>
   11d5c:	mov	r3, r0
   11d60:	mov	r0, #1
   11d64:	mov	r1, r5
   11d68:	mov	r2, r6
   11d6c:	bl	1142c <error@plt>
   11d70:	subs	r1, r6, r0
   11d74:	movle	r1, #1
   11d78:	str	r1, [sp, #52]	; 0x34
   11d7c:	movw	r7, #37336	; 0x91d8
   11d80:	movt	r7, #2
   11d84:	addgt	r7, r5, r0, lsl #2
   11d88:	mov	r0, r7
   11d8c:	bl	135d0 <__assert_fail@plt+0x1fdc>
   11d90:	mov	r5, r0
   11d94:	b	11e24 <__assert_fail@plt+0x830>
   11d98:	movw	r0, #37264	; 0x9190
   11d9c:	movt	r0, #2
   11da0:	ldr	r5, [r0]
   11da4:	mov	r0, r5
   11da8:	bl	11540 <fileno@plt>
   11dac:	add	r1, sp, #56	; 0x38
   11db0:	bl	1752c <_obstack_memory_used@@Base+0x71c>
   11db4:	cmp	r0, #0
   11db8:	bne	11e0c <__assert_fail@plt+0x818>
   11dbc:	ldr	r0, [sp, #72]	; 0x48
   11dc0:	and	r0, r0, #61440	; 0xf000
   11dc4:	cmp	r0, #32768	; 0x8000
   11dc8:	bne	11e0c <__assert_fail@plt+0x818>
   11dcc:	ldr	r0, [sp, #104]	; 0x68
   11dd0:	ldr	r1, [sp, #108]	; 0x6c
   11dd4:	bl	172cc <_obstack_memory_used@@Base+0x4bc>
   11dd8:	vldr	d9, [pc, #1008]	; 121d0 <__assert_fail@plt+0xbdc>
   11ddc:	vmov	d8, r0, r1
   11de0:	bl	13c40 <__assert_fail@plt+0x264c>
   11de4:	vmov.f64	d10, #96	; 0x3f000000  0.5
   11de8:	vmul.f64	d16, d0, d10
   11dec:	vcmpe.f64	d16, d9
   11df0:	vmrs	APSR_nzcv, fpscr
   11df4:	bgt	11e00 <__assert_fail@plt+0x80c>
   11df8:	bl	13c40 <__assert_fail@plt+0x264c>
   11dfc:	vmul.f64	d9, d0, d10
   11e00:	vcmpe.f64	d9, d8
   11e04:	vmrs	APSR_nzcv, fpscr
   11e08:	bge	121d8 <__assert_fail@plt+0xbe4>
   11e0c:	mov	r0, r5
   11e10:	bl	13604 <__assert_fail@plt+0x2010>
   11e14:	mov	r5, r0
   11e18:	mov	r7, #0
   11e1c:	mov	r0, #0
   11e20:	str	r0, [sp, #52]	; 0x34
   11e24:	mov	r0, #0
   11e28:	cmp	r5, #0
   11e2c:	beq	122a4 <__assert_fail@plt+0xcb0>
   11e30:	str	r0, [sp, #48]	; 0x30
   11e34:	ldr	r6, [sp, #52]	; 0x34
   11e38:	mov	r0, r6
   11e3c:	mov	r1, r7
   11e40:	bl	1239c <__assert_fail@plt+0xda8>
   11e44:	mov	r7, r0
   11e48:	mov	r0, r6
   11e4c:	mov	r1, r7
   11e50:	bl	1249c <__assert_fail@plt+0xea8>
   11e54:	movw	r1, #37340	; 0x91dc
   11e58:	movt	r1, #2
   11e5c:	str	r0, [r1]
   11e60:	add	r1, sp, #56	; 0x38
   11e64:	mov	r0, r5
   11e68:	bl	13638 <__assert_fail@plt+0x2044>
   11e6c:	cmp	r0, #0
   11e70:	mov	r6, r5
   11e74:	beq	1201c <__assert_fail@plt+0xa28>
   11e78:	mov	sl, r0
   11e7c:	mov	r9, #0
   11e80:	mov	r5, #1
   11e84:	cmp	r4, #0
   11e88:	mov	r0, #0
   11e8c:	beq	11f04 <__assert_fail@plt+0x910>
   11e90:	mov	r0, r4
   11e94:	movw	r1, #32242	; 0x7df2
   11e98:	movt	r1, #1
   11e9c:	bl	112f4 <strcmp@plt>
   11ea0:	cmp	r0, #0
   11ea4:	mov	r0, #0
   11ea8:	bne	11f04 <__assert_fail@plt+0x910>
   11eac:	mov	r0, sl
   11eb0:	movw	r1, #32242	; 0x7df2
   11eb4:	movt	r1, #1
   11eb8:	bl	112f4 <strcmp@plt>
   11ebc:	cmp	r0, #0
   11ec0:	mov	r0, #0
   11ec4:	bne	11f04 <__assert_fail@plt+0x910>
   11ec8:	mov	r0, #0
   11ecc:	movw	r1, #31337	; 0x7a69
   11ed0:	movt	r1, #1
   11ed4:	mov	r2, #5
   11ed8:	bl	11384 <dcgettext@plt>
   11edc:	mov	r8, r0
   11ee0:	mov	r0, #4
   11ee4:	mov	r1, sl
   11ee8:	bl	15318 <__assert_fail@plt+0x3d24>
   11eec:	mov	r3, r0
   11ef0:	mov	r0, #0
   11ef4:	mov	r1, #0
   11ef8:	mov	r2, r8
   11efc:	bl	1142c <error@plt>
   11f00:	mov	r0, #1
   11f04:	ldrb	r1, [sl]
   11f08:	cmp	r1, #0
   11f0c:	beq	11f40 <__assert_fail@plt+0x94c>
   11f10:	mov	r8, #0
   11f14:	cmp	r0, #0
   11f18:	bne	11fe0 <__assert_fail@plt+0x9ec>
   11f1c:	ldr	r0, [sp, #52]	; 0x34
   11f20:	cmp	r0, #0
   11f24:	movne	r0, r9
   11f28:	rsb	r0, r0, r0, lsl #3
   11f2c:	add	r1, r7, r0, lsl #4
   11f30:	mov	r0, sl
   11f34:	bl	12560 <__assert_fail@plt+0xf6c>
   11f38:	and	r8, r5, r0
   11f3c:	b	11fe0 <__assert_fail@plt+0x9ec>
   11f40:	cmp	r4, #0
   11f44:	beq	11fb0 <__assert_fail@plt+0x9bc>
   11f48:	mov	r0, r6
   11f4c:	bl	136f0 <__assert_fail@plt+0x20fc>
   11f50:	mov	sl, r7
   11f54:	mov	r7, r6
   11f58:	mov	r6, r0
   11f5c:	mov	r8, #0
   11f60:	mov	r0, #0
   11f64:	mov	r1, #3
   11f68:	mov	r2, r4
   11f6c:	bl	153cc <__assert_fail@plt+0x3dd8>
   11f70:	mov	r5, r0
   11f74:	mov	r0, #0
   11f78:	movw	r1, #31400	; 0x7aa8
   11f7c:	movt	r1, #1
   11f80:	mov	r2, #5
   11f84:	bl	11384 <dcgettext@plt>
   11f88:	str	r6, [sp]
   11f8c:	mov	r6, r7
   11f90:	mov	r7, sl
   11f94:	str	r0, [sp, #4]
   11f98:	mov	r0, #0
   11f9c:	mov	r1, #0
   11fa0:	movw	r2, #31430	; 0x7ac6
   11fa4:	movt	r2, #1
   11fa8:	mov	r3, r5
   11fac:	b	11fdc <__assert_fail@plt+0x9e8>
   11fb0:	mov	r8, #0
   11fb4:	mov	r0, #0
   11fb8:	movw	r1, #31400	; 0x7aa8
   11fbc:	movt	r1, #1
   11fc0:	mov	r2, #5
   11fc4:	bl	11384 <dcgettext@plt>
   11fc8:	mov	r3, r0
   11fcc:	mov	r0, #0
   11fd0:	mov	r1, #0
   11fd4:	movw	r2, #32140	; 0x7d8c
   11fd8:	movt	r2, #1
   11fdc:	bl	1142c <error@plt>
   11fe0:	ldr	r0, [sp, #52]	; 0x34
   11fe4:	cmp	r0, #0
   11fe8:	moveq	r0, #1
   11fec:	streq	r0, [r7]
   11ff0:	mov	r0, r6
   11ff4:	add	r1, sp, #56	; 0x38
   11ff8:	bl	13638 <__assert_fail@plt+0x2044>
   11ffc:	mov	sl, r0
   12000:	add	r9, r9, #1
   12004:	cmp	r8, #0
   12008:	movwne	r8, #1
   1200c:	cmp	r0, #0
   12010:	mov	r5, r8
   12014:	bne	11e84 <__assert_fail@plt+0x890>
   12018:	b	12020 <__assert_fail@plt+0xa2c>
   1201c:	mov	r8, #1
   12020:	ldr	r0, [sp, #56]	; 0x38
   12024:	cmp	r0, #2
   12028:	beq	12088 <__assert_fail@plt+0xa94>
   1202c:	cmp	r0, #4
   12030:	bne	1229c <__assert_fail@plt+0xca8>
   12034:	mov	r9, r7
   12038:	bl	114ec <__errno_location@plt>
   1203c:	ldr	r5, [r0]
   12040:	mov	r8, #0
   12044:	movw	r1, #31250	; 0x7a12
   12048:	movt	r1, #1
   1204c:	mov	r0, #0
   12050:	mov	r2, #5
   12054:	bl	11384 <dcgettext@plt>
   12058:	mov	r7, r0
   1205c:	mov	r0, #0
   12060:	mov	r1, #3
   12064:	mov	r2, r4
   12068:	bl	153cc <__assert_fail@plt+0x3dd8>
   1206c:	mov	r3, r0
   12070:	mov	r0, #0
   12074:	mov	r1, r5
   12078:	mov	r2, r7
   1207c:	bl	1142c <error@plt>
   12080:	mov	r7, r9
   12084:	b	12094 <__assert_fail@plt+0xaa0>
   12088:	cmp	r4, #0
   1208c:	eorseq	r0, r8, #1
   12090:	beq	121a8 <__assert_fail@plt+0xbb4>
   12094:	ldr	r0, [sp, #48]	; 0x30
   12098:	cmp	r0, #0
   1209c:	beq	120a8 <__assert_fail@plt+0xab4>
   120a0:	add	r0, sp, #164	; 0xa4
   120a4:	bl	159a0 <__assert_fail@plt+0x43ac>
   120a8:	mov	r0, r6
   120ac:	bl	136f0 <__assert_fail@plt+0x20fc>
   120b0:	cmp	r0, #2
   120b4:	bcc	12160 <__assert_fail@plt+0xb6c>
   120b8:	movw	r0, #37320	; 0x91c8
   120bc:	movt	r0, #2
   120c0:	ldr	r1, [r0]
   120c4:	ldr	r0, [r0, #4]
   120c8:	str	r1, [sp, #48]	; 0x30
   120cc:	str	r0, [sp, #52]	; 0x34
   120d0:	movw	r0, #37328	; 0x91d0
   120d4:	movt	r0, #2
   120d8:	ldr	r1, [r0]
   120dc:	ldr	r0, [r0, #4]
   120e0:	str	r1, [sp, #40]	; 0x28
   120e4:	str	r0, [sp, #44]	; 0x2c
   120e8:	movw	r0, #37312	; 0x91c0
   120ec:	movt	r0, #2
   120f0:	ldrd	r4, [r0]
   120f4:	movw	r0, #37304	; 0x91b8
   120f8:	movt	r0, #2
   120fc:	mov	r9, r6
   12100:	ldr	r6, [r0]
   12104:	ldr	r0, [r0, #4]
   12108:	str	r0, [sp, #32]
   1210c:	movw	r0, #37296	; 0x91b0
   12110:	movt	r0, #2
   12114:	ldr	sl, [r0]
   12118:	ldr	r0, [r0, #4]
   1211c:	str	r0, [sp, #36]	; 0x24
   12120:	movw	r1, #31441	; 0x7ad1
   12124:	movt	r1, #1
   12128:	mov	r0, #0
   1212c:	mov	r2, #5
   12130:	bl	11384 <dcgettext@plt>
   12134:	stm	sp, {r4, r5, r6}
   12138:	mov	r6, r9
   1213c:	ldr	r1, [sp, #32]
   12140:	str	r1, [sp, #12]
   12144:	str	sl, [sp, #16]
   12148:	ldr	r1, [sp, #36]	; 0x24
   1214c:	str	r1, [sp, #20]
   12150:	str	r0, [sp, #24]
   12154:	add	r3, sp, #40	; 0x28
   12158:	ldm	r3, {r0, r1, r2, r3}
   1215c:	bl	12664 <__assert_fail@plt+0x1070>
   12160:	mov	r0, r6
   12164:	bl	13714 <__assert_fail@plt+0x2120>
   12168:	mov	r0, r7
   1216c:	bl	13990 <__assert_fail@plt+0x239c>
   12170:	movw	r0, #37344	; 0x91e0
   12174:	movt	r0, #2
   12178:	ldrb	r0, [r0]
   1217c:	cmp	r0, #1
   12180:	bne	12194 <__assert_fail@plt+0xba0>
   12184:	mov	r0, #0
   12188:	bl	115dc <close@plt>
   1218c:	cmp	r0, #0
   12190:	bne	1234c <__assert_fail@plt+0xd58>
   12194:	eor	r0, r8, #1
   12198:	sub	sp, fp, #56	; 0x38
   1219c:	vpop	{d8-d10}
   121a0:	add	sp, sp, #4
   121a4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   121a8:	mov	r0, r6
   121ac:	bl	136f0 <__assert_fail@plt+0x20fc>
   121b0:	cmp	r0, #0
   121b4:	bne	12094 <__assert_fail@plt+0xaa0>
   121b8:	mov	r0, #0
   121bc:	mov	r1, r7
   121c0:	bl	12560 <__assert_fail@plt+0xf6c>
   121c4:	and	r8, r8, r0
   121c8:	b	12094 <__assert_fail@plt+0xaa0>
   121cc:	nop	{0}
   121d0:	andeq	r0, r0, r0
   121d4:	cmnmi	r4, r0
   121d8:	add	r6, sp, #164	; 0xa4
   121dc:	mov	r0, r6
   121e0:	bl	15920 <__assert_fail@plt+0x432c>
   121e4:	mov	r0, r5
   121e8:	mov	r1, r6
   121ec:	bl	159d4 <__assert_fail@plt+0x43e0>
   121f0:	cmp	r0, #0
   121f4:	beq	12364 <__assert_fail@plt+0xd70>
   121f8:	mov	r0, r5
   121fc:	bl	13888 <__assert_fail@plt+0x2294>
   12200:	cmp	r0, #0
   12204:	bne	12364 <__assert_fail@plt+0xd70>
   12208:	ldr	r0, [sp, #164]	; 0xa4
   1220c:	str	r0, [sp, #52]	; 0x34
   12210:	ldr	r7, [sp, #168]	; 0xa8
   12214:	mov	r0, r7
   12218:	bl	135d0 <__assert_fail@plt+0x1fdc>
   1221c:	mov	r5, r0
   12220:	mov	r0, #1
   12224:	cmp	r5, #0
   12228:	bne	11e30 <__assert_fail@plt+0x83c>
   1222c:	b	122a4 <__assert_fail@plt+0xcb0>
   12230:	cmn	r0, #3
   12234:	bne	1228c <__assert_fail@plt+0xc98>
   12238:	movw	r0, #37160	; 0x9128
   1223c:	movt	r0, #2
   12240:	ldr	r3, [r0]
   12244:	movw	r0, #37268	; 0x9194
   12248:	movt	r0, #2
   1224c:	ldr	r0, [r0]
   12250:	mov	r1, #0
   12254:	movw	r2, #31107	; 0x7983
   12258:	movt	r2, #1
   1225c:	movw	r7, #31096	; 0x7978
   12260:	movt	r7, #1
   12264:	str	r7, [sp]
   12268:	str	r2, [sp, #4]
   1226c:	str	r1, [sp, #8]
   12270:	movw	r1, #31033	; 0x7939
   12274:	movt	r1, #1
   12278:	movw	r2, #31082	; 0x796a
   1227c:	movt	r2, #1
   12280:	bl	16098 <__assert_fail@plt+0x4aa4>
   12284:	mov	r0, #0
   12288:	bl	114a4 <exit@plt>
   1228c:	cmn	r0, #2
   12290:	bne	122a8 <__assert_fail@plt+0xcb4>
   12294:	mov	r0, #0
   12298:	bl	116f0 <__assert_fail@plt+0xfc>
   1229c:	cmp	r0, #3
   122a0:	bne	122b0 <__assert_fail@plt+0xcbc>
   122a4:	bl	16550 <__assert_fail@plt+0x4f5c>
   122a8:	mov	r0, #1
   122ac:	bl	116f0 <__assert_fail@plt+0xfc>
   122b0:	movw	r0, #31265	; 0x7a21
   122b4:	movt	r0, #1
   122b8:	movw	r1, #31305	; 0x7a49
   122bc:	movt	r1, #1
   122c0:	movw	r3, #31314	; 0x7a52
   122c4:	movt	r3, #1
   122c8:	movw	r2, #938	; 0x3aa
   122cc:	bl	115f4 <__assert_fail@plt>
   122d0:	movw	r1, #31123	; 0x7993
   122d4:	movt	r1, #1
   122d8:	mov	r0, #0
   122dc:	mov	r2, #5
   122e0:	bl	11384 <dcgettext@plt>
   122e4:	mov	r4, r0
   122e8:	ldr	r0, [r7]
   122ec:	ldr	r1, [r5, r0, lsl #2]
   122f0:	mov	r0, #4
   122f4:	bl	15318 <__assert_fail@plt+0x3d24>
   122f8:	mov	r3, r0
   122fc:	mov	r0, #0
   12300:	mov	r1, #0
   12304:	mov	r2, r4
   12308:	bl	1142c <error@plt>
   1230c:	movw	r0, #37256	; 0x9188
   12310:	movt	r0, #2
   12314:	ldr	r4, [r0]
   12318:	movw	r1, #31140	; 0x79a4
   1231c:	movt	r1, #1
   12320:	mov	r0, #0
   12324:	mov	r2, #5
   12328:	bl	11384 <dcgettext@plt>
   1232c:	mov	r3, r0
   12330:	movw	r2, #32432	; 0x7eb0
   12334:	movt	r2, #1
   12338:	mov	r0, r4
   1233c:	mov	r1, #1
   12340:	bl	1154c <__fprintf_chk@plt>
   12344:	mov	r0, #1
   12348:	bl	116f0 <__assert_fail@plt+0xfc>
   1234c:	bl	114ec <__errno_location@plt>
   12350:	ldr	r1, [r0]
   12354:	movw	r2, #32242	; 0x7df2
   12358:	movt	r2, #1
   1235c:	mov	r0, #1
   12360:	bl	1142c <error@plt>
   12364:	movw	r1, #31219	; 0x79f3
   12368:	movt	r1, #1
   1236c:	mov	r0, #0
   12370:	mov	r2, #5
   12374:	bl	11384 <dcgettext@plt>
   12378:	mov	r5, r0
   1237c:	mov	r0, #4
   12380:	mov	r1, r4
   12384:	bl	15318 <__assert_fail@plt+0x3d24>
   12388:	mov	r3, r0
   1238c:	mov	r0, #1
   12390:	mov	r1, #0
   12394:	mov	r2, r5
   12398:	bl	1142c <error@plt>
   1239c:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   123a0:	add	fp, sp, #24
   123a4:	mov	r4, r1
   123a8:	mov	r5, r0
   123ac:	cmp	r0, #0
   123b0:	movweq	r0, #1
   123b4:	mov	r1, #112	; 0x70
   123b8:	bl	1623c <__assert_fail@plt+0x4c48>
   123bc:	mov	r8, r0
   123c0:	cmp	r5, #0
   123c4:	beq	12424 <__assert_fail@plt+0xe30>
   123c8:	cmp	r5, #1
   123cc:	bne	12434 <__assert_fail@plt+0xe40>
   123d0:	movw	r0, #37288	; 0x91a8
   123d4:	movt	r0, #2
   123d8:	ldrb	r0, [r0]
   123dc:	movw	r1, #37287	; 0x91a7
   123e0:	movt	r1, #2
   123e4:	ldrb	r1, [r1]
   123e8:	add	r0, r1, r0
   123ec:	movw	r1, #37286	; 0x91a6
   123f0:	movt	r1, #2
   123f4:	ldrb	r1, [r1]
   123f8:	add	r0, r0, r1
   123fc:	movw	r1, #37285	; 0x91a5
   12400:	movt	r1, #2
   12404:	ldrb	r1, [r1]
   12408:	add	r0, r0, r1
   1240c:	movw	r1, #37289	; 0x91a9
   12410:	movt	r1, #2
   12414:	ldrb	r1, [r1]
   12418:	add	r0, r0, r1
   1241c:	cmp	r0, #1
   12420:	bne	12434 <__assert_fail@plt+0xe40>
   12424:	mov	r0, #1
   12428:	str	r0, [r8]
   1242c:	mov	r0, r8
   12430:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   12434:	add	r7, r8, #8
   12438:	movw	r9, #32242	; 0x7df2
   1243c:	movt	r9, #1
   12440:	b	1245c <__assert_fail@plt+0xe68>
   12444:	str	r0, [r7, #-8]
   12448:	add	r4, r4, #4
   1244c:	subs	r5, r5, #1
   12450:	add	r7, r7, #112	; 0x70
   12454:	moveq	r0, r8
   12458:	popeq	{r4, r5, r6, r7, r8, r9, fp, pc}
   1245c:	ldr	r6, [r4]
   12460:	cmp	r6, #0
   12464:	beq	1248c <__assert_fail@plt+0xe98>
   12468:	mov	r0, r6
   1246c:	mov	r1, r9
   12470:	bl	112f4 <strcmp@plt>
   12474:	cmp	r0, #0
   12478:	beq	1248c <__assert_fail@plt+0xe98>
   1247c:	mov	r0, r6
   12480:	mov	r1, r7
   12484:	bl	1751c <_obstack_memory_used@@Base+0x70c>
   12488:	b	12444 <__assert_fail@plt+0xe50>
   1248c:	mov	r0, #0
   12490:	mov	r1, r7
   12494:	bl	1752c <_obstack_memory_used@@Base+0x71c>
   12498:	b	12444 <__assert_fail@plt+0xe50>
   1249c:	push	{r4, r5, r6, r7, fp, lr}
   124a0:	add	fp, sp, #16
   124a4:	mov	r6, #1
   124a8:	cmp	r0, #0
   124ac:	beq	124bc <__assert_fail@plt+0xec8>
   124b0:	ldr	r2, [r1]
   124b4:	cmp	r2, #0
   124b8:	ble	124c4 <__assert_fail@plt+0xed0>
   124bc:	mov	r0, r6
   124c0:	pop	{r4, r5, r6, r7, fp, pc}
   124c4:	add	r1, r1, #56	; 0x38
   124c8:	mov	r4, #0
   124cc:	mov	r7, #1
   124d0:	mov	r5, #0
   124d4:	ldr	r2, [r1, #-56]	; 0xffffffc8
   124d8:	cmp	r2, #0
   124dc:	bne	12504 <__assert_fail@plt+0xf10>
   124e0:	ldr	r2, [r1, #-32]	; 0xffffffe0
   124e4:	and	r2, r2, #61440	; 0xf000
   124e8:	cmp	r2, #32768	; 0x8000
   124ec:	bne	12500 <__assert_fail@plt+0xf0c>
   124f0:	ldrd	r2, [r1]
   124f4:	adds	r4, r2, r4
   124f8:	adc	r5, r3, r5
   124fc:	b	12504 <__assert_fail@plt+0xf10>
   12500:	mov	r7, #7
   12504:	add	r1, r1, #112	; 0x70
   12508:	subs	r0, r0, #1
   1250c:	bne	124d4 <__assert_fail@plt+0xee0>
   12510:	mov	r6, #1
   12514:	subs	r0, r4, #10
   12518:	sbcs	r0, r5, #0
   1251c:	bcc	12550 <__assert_fail@plt+0xf5c>
   12520:	mov	r6, #1
   12524:	mov	r0, r4
   12528:	mov	r1, r5
   1252c:	mov	r2, #10
   12530:	mov	r3, #0
   12534:	bl	1732c <_obstack_memory_used@@Base+0x51c>
   12538:	add	r6, r6, #1
   1253c:	rsbs	r2, r4, #99	; 0x63
   12540:	rscs	r2, r5, #0
   12544:	mov	r4, r0
   12548:	mov	r5, r1
   1254c:	bcc	12524 <__assert_fail@plt+0xf30>
   12550:	cmp	r6, r7
   12554:	movlt	r6, r7
   12558:	mov	r0, r6
   1255c:	pop	{r4, r5, r6, r7, fp, pc}
   12560:	push	{r4, r5, r6, r7, fp, lr}
   12564:	add	fp, sp, #16
   12568:	sub	sp, sp, #8
   1256c:	mov	r6, r1
   12570:	mov	r4, r0
   12574:	cmp	r0, #0
   12578:	beq	125e8 <__assert_fail@plt+0xff4>
   1257c:	movw	r1, #32242	; 0x7df2
   12580:	movt	r1, #1
   12584:	mov	r0, r4
   12588:	bl	112f4 <strcmp@plt>
   1258c:	cmp	r0, #0
   12590:	beq	125e8 <__assert_fail@plt+0xff4>
   12594:	mov	r5, #0
   12598:	mov	r0, r4
   1259c:	mov	r1, #0
   125a0:	bl	11438 <open64@plt>
   125a4:	cmn	r0, #1
   125a8:	beq	12628 <__assert_fail@plt+0x1034>
   125ac:	mov	r7, r0
   125b0:	str	r5, [sp]
   125b4:	str	r5, [sp, #4]
   125b8:	mov	r1, r4
   125bc:	mov	r2, r6
   125c0:	bl	1284c <__assert_fail@plt+0x1258>
   125c4:	mov	r5, r0
   125c8:	mov	r0, r7
   125cc:	bl	115dc <close@plt>
   125d0:	cmp	r0, #0
   125d4:	beq	12658 <__assert_fail@plt+0x1064>
   125d8:	bl	114ec <__errno_location@plt>
   125dc:	ldr	r6, [r0]
   125e0:	mov	r5, #0
   125e4:	b	12630 <__assert_fail@plt+0x103c>
   125e8:	movw	r0, #37344	; 0x91e0
   125ec:	movt	r0, #2
   125f0:	mov	r1, #1
   125f4:	strb	r1, [r0]
   125f8:	mov	r0, #0
   125fc:	mov	r1, #0
   12600:	bl	16598 <__assert_fail@plt+0x4fa4>
   12604:	mvn	r0, #0
   12608:	str	r0, [sp]
   1260c:	str	r0, [sp, #4]
   12610:	mov	r0, #0
   12614:	mov	r1, r4
   12618:	mov	r2, r6
   1261c:	bl	1284c <__assert_fail@plt+0x1258>
   12620:	sub	sp, fp, #16
   12624:	pop	{r4, r5, r6, r7, fp, pc}
   12628:	bl	114ec <__errno_location@plt>
   1262c:	ldr	r6, [r0]
   12630:	mov	r0, #0
   12634:	mov	r1, #3
   12638:	mov	r2, r4
   1263c:	bl	153cc <__assert_fail@plt+0x3dd8>
   12640:	mov	r3, r0
   12644:	movw	r2, #32140	; 0x7d8c
   12648:	movt	r2, #1
   1264c:	mov	r0, #0
   12650:	mov	r1, r6
   12654:	bl	1142c <error@plt>
   12658:	mov	r0, r5
   1265c:	sub	sp, fp, #16
   12660:	pop	{r4, r5, r6, r7, fp, pc}
   12664:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   12668:	add	fp, sp, #24
   1266c:	sub	sp, sp, #24
   12670:	mov	r6, r3
   12674:	mov	r7, r2
   12678:	movw	r8, #32104	; 0x7d68
   1267c:	movt	r8, #1
   12680:	movw	r2, #37288	; 0x91a8
   12684:	movt	r2, #2
   12688:	ldrb	r2, [r2]
   1268c:	cmp	r2, #1
   12690:	bne	126c8 <__assert_fail@plt+0x10d4>
   12694:	movw	r2, #37340	; 0x91dc
   12698:	movt	r2, #2
   1269c:	ldr	r4, [r2]
   126a0:	add	r2, sp, #3
   126a4:	bl	13a5c <__assert_fail@plt+0x2468>
   126a8:	mov	r3, r0
   126ac:	movw	r5, #32104	; 0x7d68
   126b0:	movt	r5, #1
   126b4:	add	r1, r5, #1
   126b8:	mov	r0, #1
   126bc:	mov	r2, r4
   126c0:	bl	11534 <__printf_chk@plt>
   126c4:	b	126cc <__assert_fail@plt+0x10d8>
   126c8:	add	r5, r8, #1
   126cc:	movw	r0, #37287	; 0x91a7
   126d0:	movt	r0, #2
   126d4:	ldrb	r0, [r0]
   126d8:	cmp	r0, #1
   126dc:	bne	12718 <__assert_fail@plt+0x1124>
   126e0:	movw	r0, #37340	; 0x91dc
   126e4:	movt	r0, #2
   126e8:	ldr	r4, [r0]
   126ec:	add	r2, sp, #3
   126f0:	mov	r0, r7
   126f4:	mov	r1, r6
   126f8:	bl	13a5c <__assert_fail@plt+0x2468>
   126fc:	mov	r3, r0
   12700:	mov	r0, #1
   12704:	mov	r1, r5
   12708:	mov	r2, r4
   1270c:	bl	11534 <__printf_chk@plt>
   12710:	movw	r5, #32104	; 0x7d68
   12714:	movt	r5, #1
   12718:	movw	r0, #37286	; 0x91a6
   1271c:	movt	r0, #2
   12720:	ldrb	r0, [r0]
   12724:	cmp	r0, #1
   12728:	bne	12764 <__assert_fail@plt+0x1170>
   1272c:	ldr	r1, [fp, #12]
   12730:	ldr	r0, [fp, #8]
   12734:	movw	r2, #37340	; 0x91dc
   12738:	movt	r2, #2
   1273c:	ldr	r4, [r2]
   12740:	add	r2, sp, #3
   12744:	bl	13a5c <__assert_fail@plt+0x2468>
   12748:	mov	r3, r0
   1274c:	mov	r0, #1
   12750:	mov	r1, r5
   12754:	mov	r2, r4
   12758:	bl	11534 <__printf_chk@plt>
   1275c:	movw	r5, #32104	; 0x7d68
   12760:	movt	r5, #1
   12764:	movw	r0, #37285	; 0x91a5
   12768:	movt	r0, #2
   1276c:	ldrb	r0, [r0]
   12770:	cmp	r0, #1
   12774:	bne	127ac <__assert_fail@plt+0x11b8>
   12778:	ldr	r1, [fp, #20]
   1277c:	ldr	r0, [fp, #16]
   12780:	movw	r2, #37340	; 0x91dc
   12784:	movt	r2, #2
   12788:	ldr	r4, [r2]
   1278c:	add	r2, sp, #3
   12790:	bl	13a5c <__assert_fail@plt+0x2468>
   12794:	mov	r3, r0
   12798:	mov	r0, #1
   1279c:	mov	r1, r5
   127a0:	mov	r2, r4
   127a4:	bl	11534 <__printf_chk@plt>
   127a8:	b	127b0 <__assert_fail@plt+0x11bc>
   127ac:	mov	r8, r5
   127b0:	ldr	r5, [fp, #32]
   127b4:	movw	r0, #37289	; 0x91a9
   127b8:	movt	r0, #2
   127bc:	ldrb	r0, [r0]
   127c0:	cmp	r0, #1
   127c4:	bne	127f8 <__assert_fail@plt+0x1204>
   127c8:	ldr	r1, [fp, #28]
   127cc:	ldr	r0, [fp, #24]
   127d0:	movw	r2, #37340	; 0x91dc
   127d4:	movt	r2, #2
   127d8:	ldr	r4, [r2]
   127dc:	add	r2, sp, #3
   127e0:	bl	13a5c <__assert_fail@plt+0x2468>
   127e4:	mov	r3, r0
   127e8:	mov	r0, #1
   127ec:	mov	r1, r8
   127f0:	mov	r2, r4
   127f4:	bl	11534 <__printf_chk@plt>
   127f8:	cmp	r5, #0
   127fc:	beq	1283c <__assert_fail@plt+0x1248>
   12800:	mov	r0, r5
   12804:	mov	r1, #10
   12808:	bl	114d4 <strchr@plt>
   1280c:	cmp	r0, #0
   12810:	beq	12828 <__assert_fail@plt+0x1234>
   12814:	mov	r0, #0
   12818:	mov	r1, #3
   1281c:	mov	r2, r5
   12820:	bl	153cc <__assert_fail@plt+0x3dd8>
   12824:	mov	r5, r0
   12828:	movw	r1, #32139	; 0x7d8b
   1282c:	movt	r1, #1
   12830:	mov	r0, #1
   12834:	mov	r2, r5
   12838:	bl	11534 <__printf_chk@plt>
   1283c:	mov	r0, #10
   12840:	bl	115e8 <putchar_unlocked@plt>
   12844:	sub	sp, fp, #24
   12848:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   1284c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12850:	add	fp, sp, #28
   12854:	sub	sp, sp, #116	; 0x74
   12858:	sub	sp, sp, #16384	; 0x4000
   1285c:	mov	r8, r2
   12860:	str	r0, [sp, #44]	; 0x2c
   12864:	cmp	r1, #0
   12868:	str	r1, [sp, #36]	; 0x24
   1286c:	mov	r0, r1
   12870:	bne	12888 <__assert_fail@plt+0x1294>
   12874:	movw	r1, #31873	; 0x7c81
   12878:	movt	r1, #1
   1287c:	mov	r0, #0
   12880:	mov	r2, #5
   12884:	bl	11384 <dcgettext@plt>
   12888:	str	r0, [sp, #32]
   1288c:	mov	r5, #0
   12890:	str	r5, [sp, #100]	; 0x64
   12894:	str	r5, [sp, #96]	; 0x60
   12898:	str	r5, [sp, #92]	; 0x5c
   1289c:	str	r5, [sp, #88]	; 0x58
   128a0:	bl	113fc <__ctype_get_mb_cur_max@plt>
   128a4:	cmp	r0, #1
   128a8:	mov	r1, #0
   128ac:	movwhi	r1, #1
   128b0:	movw	r2, #37286	; 0x91a6
   128b4:	movt	r2, #2
   128b8:	ldrb	r2, [r2]
   128bc:	and	r3, r1, r2
   128c0:	cmp	r0, #2
   128c4:	mov	r0, #0
   128c8:	movwcc	r0, #1
   128cc:	and	r0, r2, r0
   128d0:	movw	r1, #37285	; 0x91a5
   128d4:	movt	r1, #2
   128d8:	ldrb	r1, [r1]
   128dc:	orr	r0, r1, r0
   128e0:	eor	r0, r0, #1
   128e4:	str	r3, [sp, #40]	; 0x28
   128e8:	orr	r7, r3, r0
   128ec:	movw	r0, #37289	; 0x91a9
   128f0:	movt	r0, #2
   128f4:	ldrb	r0, [r0]
   128f8:	movw	r1, #37287	; 0x91a7
   128fc:	movt	r1, #2
   12900:	ldrb	r1, [r1]
   12904:	orr	r6, r1, r0
   12908:	movw	r4, #37288	; 0x91a8
   1290c:	movt	r4, #2
   12910:	tst	r7, #1
   12914:	ldrbeq	r0, [r4]
   12918:	cmpeq	r0, #0
   1291c:	beq	12944 <__assert_fail@plt+0x1350>
   12920:	mov	r0, #2
   12924:	str	r5, [sp]
   12928:	str	r5, [sp, #4]
   1292c:	str	r0, [sp, #8]
   12930:	ldr	r0, [sp, #44]	; 0x2c
   12934:	mov	r2, #0
   12938:	mov	r3, #0
   1293c:	bl	13848 <__assert_fail@plt+0x2254>
   12940:	b	1294c <__assert_fail@plt+0x1358>
   12944:	tst	r6, #1
   12948:	bne	12920 <__assert_fail@plt+0x132c>
   1294c:	ldrb	r0, [r4]
   12950:	orr	r0, r6, r0
   12954:	orr	r0, r7, r0
   12958:	tst	r0, #1
   1295c:	beq	12d00 <__assert_fail@plt+0x170c>
   12960:	ldr	r0, [sp, #40]	; 0x28
   12964:	orr	r0, r0, r6
   12968:	tst	r0, #1
   1296c:	beq	12d5c <__assert_fail@plt+0x1768>
   12970:	bl	113fc <__ctype_get_mb_cur_max@plt>
   12974:	cmp	r0, #1
   12978:	bls	12da0 <__assert_fail@plt+0x17ac>
   1297c:	mov	r0, #0
   12980:	str	r0, [sp, #84]	; 0x54
   12984:	mov	r8, #0
   12988:	str	r0, [sp, #80]	; 0x50
   1298c:	mov	r0, #0
   12990:	str	r0, [sp, #56]	; 0x38
   12994:	mov	r0, #0
   12998:	str	r0, [sp, #72]	; 0x48
   1299c:	mov	r4, #0
   129a0:	mov	r0, #0
   129a4:	str	r0, [sp, #64]	; 0x40
   129a8:	mov	r0, #0
   129ac:	str	r0, [sp, #60]	; 0x3c
   129b0:	mov	r0, #0
   129b4:	str	r0, [sp, #68]	; 0x44
   129b8:	mov	r0, #0
   129bc:	str	r0, [sp, #48]	; 0x30
   129c0:	mov	r0, #0
   129c4:	str	r0, [sp, #52]	; 0x34
   129c8:	mov	r5, #0
   129cc:	mov	r6, #0
   129d0:	b	129f4 <__assert_fail@plt+0x1400>
   129d4:	cmp	r7, #16384	; 0x4000
   129d8:	addeq	sl, sl, #1
   129dc:	subeq	r7, r7, #1
   129e0:	add	r0, sp, #104	; 0x68
   129e4:	mov	r1, sl
   129e8:	mov	r2, r7
   129ec:	bl	11330 <memmove@plt>
   129f0:	mov	r6, r7
   129f4:	add	r0, sp, #104	; 0x68
   129f8:	add	r1, r0, r6
   129fc:	rsb	r2, r6, #16384	; 0x4000
   12a00:	ldr	r0, [sp, #44]	; 0x2c
   12a04:	bl	15c48 <__assert_fail@plt+0x4654>
   12a08:	cmp	r0, #0
   12a0c:	beq	12ff0 <__assert_fail@plt+0x19fc>
   12a10:	cmn	r0, #1
   12a14:	beq	12ffc <__assert_fail@plt+0x1a08>
   12a18:	ldr	r1, [sp, #88]	; 0x58
   12a1c:	ldr	r2, [sp, #92]	; 0x5c
   12a20:	adds	r1, r1, r0
   12a24:	str	r1, [sp, #88]	; 0x58
   12a28:	adc	r1, r2, #0
   12a2c:	str	r1, [sp, #92]	; 0x5c
   12a30:	add	r7, r0, r6
   12a34:	add	sl, sp, #104	; 0x68
   12a38:	b	12a84 <__assert_fail@plt+0x1490>
   12a3c:	bl	11498 <__ctype_b_loc@plt>
   12a40:	ldr	r6, [r0]
   12a44:	ldrb	r0, [sl]
   12a48:	bl	13420 <__assert_fail@plt+0x1e2c>
   12a4c:	add	r0, r6, r0, lsl #1
   12a50:	ldrh	r0, [r0]
   12a54:	tst	r0, #16384	; 0x4000
   12a58:	beq	12cc0 <__assert_fail@plt+0x16cc>
   12a5c:	ldr	r1, [sp, #48]	; 0x30
   12a60:	adds	r1, r1, #1
   12a64:	str	r1, [sp, #48]	; 0x30
   12a68:	ldr	r1, [sp, #52]	; 0x34
   12a6c:	adc	r1, r1, #0
   12a70:	str	r1, [sp, #52]	; 0x34
   12a74:	tst	r0, #8192	; 0x2000
   12a78:	bne	12c98 <__assert_fail@plt+0x16a4>
   12a7c:	mov	r0, #1
   12a80:	b	12cbc <__assert_fail@plt+0x16c8>
   12a84:	tst	r5, #1
   12a88:	bne	12ab4 <__assert_fail@plt+0x14c0>
   12a8c:	ldrb	r0, [sl]
   12a90:	bl	13b34 <__assert_fail@plt+0x2540>
   12a94:	cmp	r0, #0
   12a98:	beq	12ab4 <__assert_fail@plt+0x14c0>
   12a9c:	ldrb	r0, [sl]
   12aa0:	str	r0, [sp, #76]	; 0x4c
   12aa4:	mov	r9, #1
   12aa8:	mov	r5, #0
   12aac:	mov	r1, #0
   12ab0:	b	12b04 <__assert_fail@plt+0x1510>
   12ab4:	ldr	r5, [sp, #80]	; 0x50
   12ab8:	ldr	r6, [sp, #84]	; 0x54
   12abc:	add	r0, sp, #76	; 0x4c
   12ac0:	mov	r1, sl
   12ac4:	mov	r2, r7
   12ac8:	add	r3, sp, #80	; 0x50
   12acc:	bl	13b5c <__assert_fail@plt+0x2568>
   12ad0:	cmn	r0, #1
   12ad4:	beq	12b9c <__assert_fail@plt+0x15a8>
   12ad8:	mov	r9, r0
   12adc:	cmn	r0, #2
   12ae0:	beq	12ce4 <__assert_fail@plt+0x16f0>
   12ae4:	add	r0, sp, #80	; 0x50
   12ae8:	bl	1136c <mbsinit@plt>
   12aec:	clz	r0, r0
   12af0:	lsr	r5, r0, #5
   12af4:	cmp	r9, #0
   12af8:	beq	12bac <__assert_fail@plt+0x15b8>
   12afc:	mov	r1, #1
   12b00:	ldr	r0, [sp, #76]	; 0x4c
   12b04:	sub	r2, r0, #9
   12b08:	cmp	r2, #23
   12b0c:	bhi	12c10 <__assert_fail@plt+0x161c>
   12b10:	add	r3, pc, #0
   12b14:	ldr	pc, [r3, r2, lsl #2]
   12b18:	andeq	r2, r1, r8, ror fp
   12b1c:			; <UNDEFINED> instruction: 0x00012bbc
   12b20:	muleq	r1, r8, ip
   12b24:	ldrdeq	r2, [r1], -r4
   12b28:	ldrdeq	r2, [r1], -r4
   12b2c:	andeq	r2, r1, r0, lsl ip
   12b30:	andeq	r2, r1, r0, lsl ip
   12b34:	andeq	r2, r1, r0, lsl ip
   12b38:	andeq	r2, r1, r0, lsl ip
   12b3c:	andeq	r2, r1, r0, lsl ip
   12b40:	andeq	r2, r1, r0, lsl ip
   12b44:	andeq	r2, r1, r0, lsl ip
   12b48:	andeq	r2, r1, r0, lsl ip
   12b4c:	andeq	r2, r1, r0, lsl ip
   12b50:	andeq	r2, r1, r0, lsl ip
   12b54:	andeq	r2, r1, r0, lsl ip
   12b58:	andeq	r2, r1, r0, lsl ip
   12b5c:	andeq	r2, r1, r0, lsl ip
   12b60:	andeq	r2, r1, r0, lsl ip
   12b64:	andeq	r2, r1, r0, lsl ip
   12b68:	andeq	r2, r1, r0, lsl ip
   12b6c:	andeq	r2, r1, r0, lsl ip
   12b70:	andeq	r2, r1, r0, lsl ip
   12b74:	andeq	r2, r1, r0, lsl #25
   12b78:	ldr	r2, [sp, #48]	; 0x30
   12b7c:	adds	r0, r2, #8
   12b80:	ldr	r1, [sp, #52]	; 0x34
   12b84:	adc	r1, r1, #0
   12b88:	and	r2, r2, #7
   12b8c:	subs	r0, r0, r2
   12b90:	str	r0, [sp, #48]	; 0x30
   12b94:	sbc	r0, r1, #0
   12b98:	b	12c94 <__assert_fail@plt+0x16a0>
   12b9c:	sub	r7, r7, #1
   12ba0:	add	sl, sl, #1
   12ba4:	mov	r5, #1
   12ba8:	b	12cd8 <__assert_fail@plt+0x16e4>
   12bac:	mov	r0, #0
   12bb0:	str	r0, [sp, #76]	; 0x4c
   12bb4:	mov	r9, #1
   12bb8:	b	12c18 <__assert_fail@plt+0x1624>
   12bbc:	ldr	r0, [sp, #96]	; 0x60
   12bc0:	ldr	r1, [sp, #100]	; 0x64
   12bc4:	adds	r0, r0, #1
   12bc8:	str	r0, [sp, #96]	; 0x60
   12bcc:	adc	r0, r1, #0
   12bd0:	str	r0, [sp, #100]	; 0x64
   12bd4:	ldr	r2, [sp, #48]	; 0x30
   12bd8:	subs	r0, r8, r2
   12bdc:	ldr	r1, [sp, #56]	; 0x38
   12be0:	ldr	r3, [sp, #52]	; 0x34
   12be4:	sbcs	r0, r1, r3
   12be8:	mov	r0, #0
   12bec:	movwcc	r0, #1
   12bf0:	cmp	r0, #0
   12bf4:	movne	r1, r3
   12bf8:	str	r1, [sp, #56]	; 0x38
   12bfc:	movne	r8, r2
   12c00:	mov	r0, #0
   12c04:	str	r0, [sp, #48]	; 0x30
   12c08:	mov	r0, #0
   12c0c:	b	12c94 <__assert_fail@plt+0x16a0>
   12c10:	cmp	r1, #0
   12c14:	beq	12a3c <__assert_fail@plt+0x1448>
   12c18:	bl	113cc <iswprint@plt>
   12c1c:	cmp	r0, #0
   12c20:	beq	12cc0 <__assert_fail@plt+0x16cc>
   12c24:	movw	r0, #37289	; 0x91a9
   12c28:	movt	r0, #2
   12c2c:	ldrb	r0, [r0]
   12c30:	cmp	r0, #1
   12c34:	bne	12c5c <__assert_fail@plt+0x1668>
   12c38:	ldr	r0, [sp, #76]	; 0x4c
   12c3c:	bl	11324 <wcwidth@plt>
   12c40:	bic	r0, r0, r0, asr #31
   12c44:	ldr	r1, [sp, #48]	; 0x30
   12c48:	adds	r1, r1, r0
   12c4c:	str	r1, [sp, #48]	; 0x30
   12c50:	ldr	r0, [sp, #52]	; 0x34
   12c54:	adc	r0, r0, #0
   12c58:	str	r0, [sp, #52]	; 0x34
   12c5c:	ldr	r0, [sp, #76]	; 0x4c
   12c60:	bl	114bc <iswspace@plt>
   12c64:	cmp	r0, #0
   12c68:	bne	12c98 <__assert_fail@plt+0x16a4>
   12c6c:	ldr	r0, [sp, #76]	; 0x4c
   12c70:	bl	133d0 <__assert_fail@plt+0x1ddc>
   12c74:	cmp	r0, #0
   12c78:	bne	12c98 <__assert_fail@plt+0x16a4>
   12c7c:	b	12a7c <__assert_fail@plt+0x1488>
   12c80:	ldr	r0, [sp, #48]	; 0x30
   12c84:	adds	r0, r0, #1
   12c88:	str	r0, [sp, #48]	; 0x30
   12c8c:	ldr	r0, [sp, #52]	; 0x34
   12c90:	adc	r0, r0, #0
   12c94:	str	r0, [sp, #52]	; 0x34
   12c98:	ldr	r0, [sp, #68]	; 0x44
   12c9c:	and	r0, r0, #1
   12ca0:	ldr	r1, [sp, #64]	; 0x40
   12ca4:	adds	r1, r1, r0
   12ca8:	str	r1, [sp, #64]	; 0x40
   12cac:	ldr	r0, [sp, #60]	; 0x3c
   12cb0:	adc	r0, r0, #0
   12cb4:	str	r0, [sp, #60]	; 0x3c
   12cb8:	mov	r0, #0
   12cbc:	str	r0, [sp, #68]	; 0x44
   12cc0:	sub	r7, r7, r9
   12cc4:	add	sl, sl, r9
   12cc8:	ldr	r0, [sp, #72]	; 0x48
   12ccc:	adds	r0, r0, #1
   12cd0:	str	r0, [sp, #72]	; 0x48
   12cd4:	adc	r4, r4, #0
   12cd8:	cmp	r7, #0
   12cdc:	bne	12a84 <__assert_fail@plt+0x1490>
   12ce0:	b	129cc <__assert_fail@plt+0x13d8>
   12ce4:	str	r5, [sp, #80]	; 0x50
   12ce8:	str	r6, [sp, #84]	; 0x54
   12cec:	mov	r5, #1
   12cf0:	cmp	r7, #0
   12cf4:	mov	r6, #0
   12cf8:	beq	129f4 <__assert_fail@plt+0x1400>
   12cfc:	b	129d4 <__assert_fail@plt+0x13e0>
   12d00:	ldr	r0, [r8]
   12d04:	cmp	r0, #1
   12d08:	ldr	r6, [sp, #44]	; 0x2c
   12d0c:	blt	12d20 <__assert_fail@plt+0x172c>
   12d10:	add	r1, r8, #8
   12d14:	mov	r0, r6
   12d18:	bl	1752c <_obstack_memory_used@@Base+0x71c>
   12d1c:	str	r0, [r8]
   12d20:	cmp	r0, #0
   12d24:	bne	131c8 <__assert_fail@plt+0x1bd4>
   12d28:	add	r0, r8, #8
   12d2c:	bl	133b4 <__assert_fail@plt+0x1dc0>
   12d30:	cmp	r0, #0
   12d34:	beq	131c8 <__assert_fail@plt+0x1bd4>
   12d38:	ldr	r0, [r8, #60]	; 0x3c
   12d3c:	cmp	r0, #0
   12d40:	blt	131c8 <__assert_fail@plt+0x1bd4>
   12d44:	ldr	r5, [fp, #12]
   12d48:	ldr	r6, [r8, #56]	; 0x38
   12d4c:	cmn	r5, #1
   12d50:	ble	130e8 <__assert_fail@plt+0x1af4>
   12d54:	ldr	r7, [fp, #8]
   12d58:	b	13108 <__assert_fail@plt+0x1b14>
   12d5c:	add	r2, sp, #96	; 0x60
   12d60:	add	r3, sp, #88	; 0x58
   12d64:	ldr	r0, [sp, #32]
   12d68:	ldr	r1, [sp, #44]	; 0x2c
   12d6c:	bl	13438 <__assert_fail@plt+0x1e44>
   12d70:	str	r0, [sp, #44]	; 0x2c
   12d74:	mov	lr, #0
   12d78:	mov	r0, #0
   12d7c:	str	r0, [sp, #56]	; 0x38
   12d80:	mov	r8, #0
   12d84:	mov	r4, #0
   12d88:	mov	ip, #0
   12d8c:	mov	sl, #0
   12d90:	ldr	r7, [sp, #36]	; 0x24
   12d94:	movw	r2, #37286	; 0x91a6
   12d98:	movt	r2, #2
   12d9c:	b	132b4 <__assert_fail@plt+0x1cc0>
   12da0:	mov	r6, #0
   12da4:	mov	sl, #0
   12da8:	mov	r3, #0
   12dac:	mov	r4, #0
   12db0:	mov	ip, #0
   12db4:	mov	r8, #0
   12db8:	mov	r2, #0
   12dbc:	b	12f7c <__assert_fail@plt+0x1988>
   12dc0:	ldr	r0, [sp, #88]	; 0x58
   12dc4:	ldr	r1, [sp, #92]	; 0x5c
   12dc8:	adds	r0, r0, r5
   12dcc:	str	r0, [sp, #88]	; 0x58
   12dd0:	adc	r0, r1, #0
   12dd4:	str	r0, [sp, #92]	; 0x5c
   12dd8:	add	r9, sp, #104	; 0x68
   12ddc:	mov	r3, r7
   12de0:	ldr	ip, [sp, #68]	; 0x44
   12de4:	ldr	r2, [sp, #72]	; 0x48
   12de8:	b	12e48 <__assert_fail@plt+0x1854>
   12dec:	adds	r8, r8, #1
   12df0:	ldr	r2, [sp, #72]	; 0x48
   12df4:	adc	r2, r2, #0
   12df8:	tst	r0, #8192	; 0x2000
   12dfc:	bne	12e28 <__assert_fail@plt+0x1834>
   12e00:	str	r2, [sp, #72]	; 0x48
   12e04:	mov	r0, r7
   12e08:	bl	13424 <__assert_fail@plt+0x1e30>
   12e0c:	cmp	r0, #0
   12e10:	beq	12e38 <__assert_fail@plt+0x1844>
   12e14:	ldr	sl, [sp, #56]	; 0x38
   12e18:	ldr	r3, [sp, #64]	; 0x40
   12e1c:	ldr	ip, [sp, #68]	; 0x44
   12e20:	ldr	r2, [sp, #72]	; 0x48
   12e24:	b	12f64 <__assert_fail@plt+0x1970>
   12e28:	ldr	sl, [sp, #56]	; 0x38
   12e2c:	ldr	r3, [sp, #64]	; 0x40
   12e30:	ldr	ip, [sp, #68]	; 0x44
   12e34:	b	12f64 <__assert_fail@plt+0x1970>
   12e38:	mov	ip, #1
   12e3c:	ldr	sl, [sp, #56]	; 0x38
   12e40:	ldr	r3, [sp, #64]	; 0x40
   12e44:	b	12f54 <__assert_fail@plt+0x1960>
   12e48:	ldrb	r7, [r9], #1
   12e4c:	sub	r0, r7, #9
   12e50:	cmp	r0, #23
   12e54:	bhi	12f18 <__assert_fail@plt+0x1924>
   12e58:	add	r1, pc, #0
   12e5c:	ldr	pc, [r1, r0, lsl #2]
   12e60:	andeq	r2, r1, r0, asr #29
   12e64:	ldrdeq	r2, [r1], -r8
   12e68:	andeq	r2, r1, r4, ror #30
   12e6c:	strdeq	r2, [r1], -r0
   12e70:	strdeq	r2, [r1], -r0
   12e74:	andeq	r2, r1, r8, lsl pc
   12e78:	andeq	r2, r1, r8, lsl pc
   12e7c:	andeq	r2, r1, r8, lsl pc
   12e80:	andeq	r2, r1, r8, lsl pc
   12e84:	andeq	r2, r1, r8, lsl pc
   12e88:	andeq	r2, r1, r8, lsl pc
   12e8c:	andeq	r2, r1, r8, lsl pc
   12e90:	andeq	r2, r1, r8, lsl pc
   12e94:	andeq	r2, r1, r8, lsl pc
   12e98:	andeq	r2, r1, r8, lsl pc
   12e9c:	andeq	r2, r1, r8, lsl pc
   12ea0:	andeq	r2, r1, r8, lsl pc
   12ea4:	andeq	r2, r1, r8, lsl pc
   12ea8:	andeq	r2, r1, r8, lsl pc
   12eac:	andeq	r2, r1, r8, lsl pc
   12eb0:	andeq	r2, r1, r8, lsl pc
   12eb4:	andeq	r2, r1, r8, lsl pc
   12eb8:	andeq	r2, r1, r8, lsl pc
   12ebc:	andeq	r2, r1, ip, asr pc
   12ec0:	adds	r0, r8, #8
   12ec4:	adc	r1, r2, #0
   12ec8:	and	r2, r8, #7
   12ecc:	subs	r8, r0, r2
   12ed0:	sbc	r2, r1, #0
   12ed4:	b	12f64 <__assert_fail@plt+0x1970>
   12ed8:	ldr	r0, [sp, #96]	; 0x60
   12edc:	ldr	r1, [sp, #100]	; 0x64
   12ee0:	adds	r0, r0, #1
   12ee4:	str	r0, [sp, #96]	; 0x60
   12ee8:	adc	r0, r1, #0
   12eec:	str	r0, [sp, #100]	; 0x64
   12ef0:	subs	r0, r6, r8
   12ef4:	sbcs	r0, sl, r2
   12ef8:	mov	r0, #0
   12efc:	movwcc	r0, #1
   12f00:	cmp	r0, #0
   12f04:	movne	sl, r2
   12f08:	movne	r6, r8
   12f0c:	mov	r8, #0
   12f10:	mov	r2, #0
   12f14:	b	12f64 <__assert_fail@plt+0x1970>
   12f18:	str	r2, [sp, #72]	; 0x48
   12f1c:	str	ip, [sp, #68]	; 0x44
   12f20:	str	r3, [sp, #64]	; 0x40
   12f24:	str	sl, [sp, #56]	; 0x38
   12f28:	bl	11498 <__ctype_b_loc@plt>
   12f2c:	ldr	sl, [r0]
   12f30:	mov	r0, r7
   12f34:	bl	13420 <__assert_fail@plt+0x1e2c>
   12f38:	add	r0, sl, r7, lsl #1
   12f3c:	ldrh	r0, [r0]
   12f40:	tst	r0, #16384	; 0x4000
   12f44:	bne	12dec <__assert_fail@plt+0x17f8>
   12f48:	ldr	sl, [sp, #56]	; 0x38
   12f4c:	ldr	r3, [sp, #64]	; 0x40
   12f50:	ldr	ip, [sp, #68]	; 0x44
   12f54:	ldr	r2, [sp, #72]	; 0x48
   12f58:	b	12f74 <__assert_fail@plt+0x1980>
   12f5c:	adds	r8, r8, #1
   12f60:	adc	r2, r2, #0
   12f64:	and	r0, ip, #1
   12f68:	adds	r3, r3, r0
   12f6c:	adc	r4, r4, #0
   12f70:	mov	ip, #0
   12f74:	subs	r5, r5, #1
   12f78:	bne	12e48 <__assert_fail@plt+0x1854>
   12f7c:	str	r2, [sp, #72]	; 0x48
   12f80:	str	ip, [sp, #68]	; 0x44
   12f84:	mov	r7, r3
   12f88:	ldr	r0, [sp, #44]	; 0x2c
   12f8c:	add	r1, sp, #104	; 0x68
   12f90:	mov	r2, #16384	; 0x4000
   12f94:	bl	15c48 <__assert_fail@plt+0x4654>
   12f98:	cmp	r0, #0
   12f9c:	beq	1308c <__assert_fail@plt+0x1a98>
   12fa0:	mov	r5, r0
   12fa4:	cmn	r0, #1
   12fa8:	bne	12dc0 <__assert_fail@plt+0x17cc>
   12fac:	mov	r5, sl
   12fb0:	mov	sl, r6
   12fb4:	bl	114ec <__errno_location@plt>
   12fb8:	ldr	r6, [r0]
   12fbc:	mov	r0, #0
   12fc0:	str	r0, [sp, #44]	; 0x2c
   12fc4:	mov	r0, #0
   12fc8:	mov	r1, #3
   12fcc:	ldr	r2, [sp, #32]
   12fd0:	bl	153cc <__assert_fail@plt+0x3dd8>
   12fd4:	mov	r3, r0
   12fd8:	movw	r2, #32140	; 0x7d8c
   12fdc:	movt	r2, #1
   12fe0:	mov	r0, #0
   12fe4:	mov	r1, r6
   12fe8:	bl	1142c <error@plt>
   12fec:	b	1309c <__assert_fail@plt+0x1aa8>
   12ff0:	mov	r0, #1
   12ff4:	str	r0, [sp, #44]	; 0x2c
   12ff8:	b	13034 <__assert_fail@plt+0x1a40>
   12ffc:	bl	114ec <__errno_location@plt>
   13000:	ldr	r7, [r0]
   13004:	mov	r0, #0
   13008:	str	r0, [sp, #44]	; 0x2c
   1300c:	mov	r0, #0
   13010:	mov	r1, #3
   13014:	ldr	r2, [sp, #32]
   13018:	bl	153cc <__assert_fail@plt+0x3dd8>
   1301c:	mov	r3, r0
   13020:	movw	r2, #32140	; 0x7d8c
   13024:	movt	r2, #1
   13028:	mov	r0, #0
   1302c:	mov	r1, r7
   13030:	bl	1142c <error@plt>
   13034:	movw	r2, #37286	; 0x91a6
   13038:	movt	r2, #2
   1303c:	ldr	ip, [sp, #64]	; 0x40
   13040:	ldr	r9, [sp, #60]	; 0x3c
   13044:	ldr	r6, [sp, #48]	; 0x30
   13048:	ldr	r5, [sp, #68]	; 0x44
   1304c:	mov	r0, #0
   13050:	mov	lr, r8
   13054:	subs	r1, r8, r6
   13058:	ldr	r7, [sp, #56]	; 0x38
   1305c:	ldr	r3, [sp, #52]	; 0x34
   13060:	sbcs	r1, r7, r3
   13064:	movwcc	r0, #1
   13068:	cmp	r0, #0
   1306c:	movne	r7, r3
   13070:	str	r7, [sp, #56]	; 0x38
   13074:	movne	lr, r6
   13078:	and	r0, r5, #1
   1307c:	adds	ip, ip, r0
   13080:	adc	sl, r9, #0
   13084:	ldr	r8, [sp, #72]	; 0x48
   13088:	b	132b0 <__assert_fail@plt+0x1cbc>
   1308c:	mov	r5, sl
   13090:	mov	sl, r6
   13094:	mov	r0, #1
   13098:	str	r0, [sp, #44]	; 0x2c
   1309c:	movw	r2, #37286	; 0x91a6
   130a0:	movt	r2, #2
   130a4:	ldr	r1, [sp, #68]	; 0x44
   130a8:	ldr	r3, [sp, #72]	; 0x48
   130ac:	mov	lr, sl
   130b0:	subs	r0, sl, r8
   130b4:	sbcs	r0, r5, r3
   130b8:	mov	r0, #0
   130bc:	movwcc	r0, #1
   130c0:	cmp	r0, #0
   130c4:	movne	r5, r3
   130c8:	str	r5, [sp, #56]	; 0x38
   130cc:	movne	lr, r8
   130d0:	mov	r8, #0
   130d4:	and	r0, r1, #1
   130d8:	adds	ip, r7, r0
   130dc:	adc	sl, r4, #0
   130e0:	mov	r4, #0
   130e4:	b	132b0 <__assert_fail@plt+0x1cbc>
   130e8:	mov	r0, #1
   130ec:	str	r0, [sp]
   130f0:	ldr	r0, [sp, #44]	; 0x2c
   130f4:	mov	r2, #0
   130f8:	mov	r3, #0
   130fc:	bl	113f0 <lseek64@plt>
   13100:	mov	r7, r0
   13104:	mov	r5, r1
   13108:	movw	r0, #37280	; 0x91a0
   1310c:	movt	r0, #2
   13110:	ldr	r0, [r0]
   13114:	udiv	r1, r6, r0
   13118:	mls	r0, r1, r0, r6
   1311c:	cmp	r0, #0
   13120:	beq	13158 <__assert_fail@plt+0x1b64>
   13124:	mov	lr, #0
   13128:	subs	r0, r6, r7
   1312c:	rscs	r1, r5, #0
   13130:	mov	r2, #0
   13134:	movwlt	r2, #1
   13138:	cmp	r2, #0
   1313c:	movwne	r1, #0
   13140:	str	r1, [sp, #92]	; 0x5c
   13144:	movwne	r0, #0
   13148:	str	r0, [sp, #88]	; 0x58
   1314c:	mov	r0, #1
   13150:	str	r0, [sp, #44]	; 0x2c
   13154:	b	12d78 <__assert_fail@plt+0x1784>
   13158:	ldr	r0, [r8, #64]	; 0x40
   1315c:	movw	r1, #513	; 0x201
   13160:	cmp	r0, #536870913	; 0x20000001
   13164:	movw	r2, #513	; 0x201
   13168:	addcc	r2, r0, #1
   1316c:	cmp	r0, #0
   13170:	movle	r2, r1
   13174:	udiv	r0, r6, r2
   13178:	mul	r4, r0, r2
   1317c:	subs	r0, r7, r4
   13180:	sbcs	r0, r5, #0
   13184:	ldr	r6, [sp, #44]	; 0x2c
   13188:	bcs	131c8 <__assert_fail@plt+0x1bd4>
   1318c:	mvn	r6, #0
   13190:	mov	r0, #1
   13194:	str	r0, [sp]
   13198:	ldr	r0, [sp, #44]	; 0x2c
   1319c:	mov	r2, r4
   131a0:	mov	r3, #0
   131a4:	bl	113f0 <lseek64@plt>
   131a8:	subs	r0, r6, r0
   131ac:	sbcs	r0, r6, r1
   131b0:	ldr	r6, [sp, #44]	; 0x2c
   131b4:	bge	131c8 <__assert_fail@plt+0x1bd4>
   131b8:	subs	r0, r4, r7
   131bc:	str	r0, [sp, #88]	; 0x58
   131c0:	rsc	r0, r5, #0
   131c4:	str	r0, [sp, #92]	; 0x5c
   131c8:	mov	r0, #2
   131cc:	mov	r1, #0
   131d0:	str	r1, [sp]
   131d4:	str	r1, [sp, #4]
   131d8:	str	r0, [sp, #8]
   131dc:	mov	r0, r6
   131e0:	mov	r2, #0
   131e4:	mov	r3, #0
   131e8:	bl	13848 <__assert_fail@plt+0x2254>
   131ec:	add	r4, sp, #104	; 0x68
   131f0:	b	1320c <__assert_fail@plt+0x1c18>
   131f4:	ldr	r1, [sp, #88]	; 0x58
   131f8:	ldr	r2, [sp, #92]	; 0x5c
   131fc:	adds	r0, r1, r0
   13200:	str	r0, [sp, #88]	; 0x58
   13204:	adc	r0, r2, #0
   13208:	str	r0, [sp, #92]	; 0x5c
   1320c:	mov	r0, r6
   13210:	mov	r1, r4
   13214:	mov	r2, #16384	; 0x4000
   13218:	bl	15c48 <__assert_fail@plt+0x4654>
   1321c:	cmp	r0, #0
   13220:	beq	13284 <__assert_fail@plt+0x1c90>
   13224:	cmn	r0, #1
   13228:	bne	131f4 <__assert_fail@plt+0x1c00>
   1322c:	bl	114ec <__errno_location@plt>
   13230:	ldr	r5, [r0]
   13234:	mov	r0, #0
   13238:	mov	r1, #3
   1323c:	ldr	r2, [sp, #32]
   13240:	bl	153cc <__assert_fail@plt+0x3dd8>
   13244:	mov	r3, r0
   13248:	movw	r2, #32140	; 0x7d8c
   1324c:	movt	r2, #1
   13250:	mov	r0, #0
   13254:	mov	r1, r5
   13258:	bl	1142c <error@plt>
   1325c:	mov	lr, #0
   13260:	mov	r0, #0
   13264:	str	r0, [sp, #56]	; 0x38
   13268:	mov	r8, #0
   1326c:	mov	r4, #0
   13270:	mov	ip, #0
   13274:	mov	sl, #0
   13278:	mov	r0, #0
   1327c:	str	r0, [sp, #44]	; 0x2c
   13280:	b	132a8 <__assert_fail@plt+0x1cb4>
   13284:	mov	lr, #0
   13288:	mov	r0, #1
   1328c:	str	r0, [sp, #44]	; 0x2c
   13290:	mov	r0, #0
   13294:	str	r0, [sp, #56]	; 0x38
   13298:	mov	r8, #0
   1329c:	mov	r4, #0
   132a0:	mov	ip, #0
   132a4:	mov	sl, #0
   132a8:	movw	r2, #37286	; 0x91a6
   132ac:	movt	r2, #2
   132b0:	ldr	r7, [sp, #36]	; 0x24
   132b4:	ldrb	r2, [r2]
   132b8:	ldr	r0, [sp, #96]	; 0x60
   132bc:	ldr	r1, [sp, #100]	; 0x64
   132c0:	ldr	r3, [sp, #88]	; 0x58
   132c4:	ldr	r6, [sp, #92]	; 0x5c
   132c8:	ldr	r5, [sp, #40]	; 0x28
   132cc:	eor	r5, r5, #1
   132d0:	ands	r2, r2, r5
   132d4:	movne	r4, r6
   132d8:	movne	r8, r3
   132dc:	str	r8, [sp]
   132e0:	str	r4, [sp, #4]
   132e4:	add	r2, sp, #8
   132e8:	stm	r2, {r3, r6, lr}
   132ec:	ldr	r9, [sp, #56]	; 0x38
   132f0:	str	r9, [sp, #20]
   132f4:	str	r7, [sp, #24]
   132f8:	mov	r2, ip
   132fc:	mov	r3, sl
   13300:	mov	r5, lr
   13304:	mov	r7, ip
   13308:	bl	12664 <__assert_fail@plt+0x1070>
   1330c:	mov	ip, r5
   13310:	movw	r0, #37328	; 0x91d0
   13314:	movt	r0, #2
   13318:	ldrd	r2, [r0]
   1331c:	ldr	r1, [sp, #96]	; 0x60
   13320:	ldr	r6, [sp, #100]	; 0x64
   13324:	adds	r2, r2, r1
   13328:	adc	r3, r3, r6
   1332c:	strd	r2, [r0]
   13330:	movw	r0, #37320	; 0x91c8
   13334:	movt	r0, #2
   13338:	ldrd	r2, [r0]
   1333c:	adds	r1, r2, r7
   13340:	str	r1, [r0]
   13344:	adc	r1, r3, sl
   13348:	movw	r2, #37312	; 0x91c0
   1334c:	movt	r2, #2
   13350:	ldrd	r6, [r2]
   13354:	adds	r3, r6, r8
   13358:	str	r3, [r2]
   1335c:	str	r1, [r0, #4]
   13360:	adc	r0, r7, r4
   13364:	movw	r1, #37304	; 0x91b8
   13368:	movt	r1, #2
   1336c:	ldrd	r4, [r1]
   13370:	ldr	r3, [sp, #88]	; 0x58
   13374:	ldr	r7, [sp, #92]	; 0x5c
   13378:	adds	r4, r4, r3
   1337c:	str	r0, [r2, #4]
   13380:	adc	r5, r5, r7
   13384:	strd	r4, [r1]
   13388:	movw	r0, #37296	; 0x91b0
   1338c:	movt	r0, #2
   13390:	ldrd	r2, [r0]
   13394:	subs	r1, r2, ip
   13398:	sbcs	r1, r3, r9
   1339c:	ldrcc	r1, [sp, #56]	; 0x38
   133a0:	strcc	ip, [r0]
   133a4:	strcc	r1, [r0, #4]
   133a8:	ldr	r0, [sp, #44]	; 0x2c
   133ac:	sub	sp, fp, #28
   133b0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   133b4:	ldr	r0, [r0, #16]
   133b8:	and	r0, r0, #53248	; 0xd000
   133bc:	orr	r0, r0, #8192	; 0x2000
   133c0:	cmp	r0, #40960	; 0xa000
   133c4:	moveq	r0, #1
   133c8:	movne	r0, #0
   133cc:	bx	lr
   133d0:	mov	r1, r0
   133d4:	movw	r0, #37284	; 0x91a4
   133d8:	movt	r0, #2
   133dc:	ldrb	r2, [r0]
   133e0:	mov	r0, #0
   133e4:	cmp	r2, #0
   133e8:	bxne	lr
   133ec:	mov	r0, #1
   133f0:	cmp	r1, #160	; 0xa0
   133f4:	movwne	r2, #8199	; 0x2007
   133f8:	cmpne	r1, r2
   133fc:	bne	13404 <__assert_fail@plt+0x1e10>
   13400:	bx	lr
   13404:	movw	r2, #8239	; 0x202f
   13408:	cmp	r1, r2
   1340c:	movwne	r0, #8288	; 0x2060
   13410:	subne	r0, r1, r0
   13414:	clzne	r0, r0
   13418:	lsrne	r0, r0, #5
   1341c:	bx	lr
   13420:	bx	lr
   13424:	push	{fp, lr}
   13428:	mov	fp, sp
   1342c:	bl	1151c <btowc@plt>
   13430:	pop	{fp, lr}
   13434:	b	133d0 <__assert_fail@plt+0x1ddc>
   13438:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1343c:	add	fp, sp, #28
   13440:	sub	sp, sp, #36	; 0x24
   13444:	sub	sp, sp, #16384	; 0x4000
   13448:	str	r1, [sp, #16]
   1344c:	mov	r4, #0
   13450:	cmp	r2, #0
   13454:	cmpne	r3, #0
   13458:	bne	13468 <__assert_fail@plt+0x1e74>
   1345c:	mov	r0, r4
   13460:	sub	sp, fp, #28
   13464:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13468:	str	r3, [sp, #4]
   1346c:	str	r2, [sp, #8]
   13470:	str	r0, [sp, #12]
   13474:	mov	r4, #0
   13478:	mov	r5, #0
   1347c:	mov	r7, #0
   13480:	mov	r8, #0
   13484:	mov	r9, #0
   13488:	b	134c0 <__assert_fail@plt+0x1ecc>
   1348c:	subs	r0, r4, r8
   13490:	sbc	r1, r5, r9
   13494:	movw	r2, #34953	; 0x8889
   13498:	movt	r2, #34952	; 0x8888
   1349c:	umull	r2, r3, r6, r2
   134a0:	rsbs	r0, r0, r3, lsr #3
   134a4:	rscs	r0, r1, #0
   134a8:	mov	r7, #0
   134ac:	movwcs	r7, #1
   134b0:	mov	r8, r4
   134b4:	mov	r9, r5
   134b8:	ldr	r4, [sp, #24]
   134bc:	ldr	r5, [sp, #20]
   134c0:	ldr	r0, [sp, #16]
   134c4:	add	r1, sp, #31
   134c8:	mov	r2, #16384	; 0x4000
   134cc:	bl	15c48 <__assert_fail@plt+0x4654>
   134d0:	cmp	r0, #0
   134d4:	beq	13580 <__assert_fail@plt+0x1f8c>
   134d8:	mov	r6, r0
   134dc:	cmn	r0, #1
   134e0:	beq	13598 <__assert_fail@plt+0x1fa4>
   134e4:	adds	r4, r4, r6
   134e8:	str	r4, [sp, #24]
   134ec:	adc	r5, r5, #0
   134f0:	str	r5, [sp, #20]
   134f4:	tst	r7, #1
   134f8:	beq	1354c <__assert_fail@plt+0x1f58>
   134fc:	add	r0, sp, #31
   13500:	add	sl, r0, r6
   13504:	mov	r1, #10
   13508:	strb	r1, [sl]
   1350c:	mov	r1, #10
   13510:	bl	113c0 <rawmemchr@plt>
   13514:	cmp	r0, sl
   13518:	mov	r4, r8
   1351c:	mov	r5, r9
   13520:	bcs	1348c <__assert_fail@plt+0x1e98>
   13524:	mov	r4, r8
   13528:	mov	r5, r9
   1352c:	adds	r4, r4, #1
   13530:	adc	r5, r5, #0
   13534:	add	r0, r0, #1
   13538:	mov	r1, #10
   1353c:	bl	113c0 <rawmemchr@plt>
   13540:	cmp	r0, sl
   13544:	bcc	1352c <__assert_fail@plt+0x1f38>
   13548:	b	1348c <__assert_fail@plt+0x1e98>
   1354c:	mov	r0, r6
   13550:	mov	r4, r8
   13554:	mov	r5, r9
   13558:	add	r1, sp, #31
   1355c:	adds	r2, r4, #1
   13560:	adc	r3, r5, #0
   13564:	ldrb	r7, [r1], #1
   13568:	cmp	r7, #10
   1356c:	moveq	r4, r2
   13570:	moveq	r5, r3
   13574:	subs	r0, r0, #1
   13578:	bne	1355c <__assert_fail@plt+0x1f68>
   1357c:	b	1348c <__assert_fail@plt+0x1e98>
   13580:	ldr	r0, [sp, #4]
   13584:	strd	r4, [r0]
   13588:	ldr	r0, [sp, #8]
   1358c:	strd	r8, [r0]
   13590:	mov	r4, #1
   13594:	b	1345c <__assert_fail@plt+0x1e68>
   13598:	bl	114ec <__errno_location@plt>
   1359c:	ldr	r5, [r0]
   135a0:	mov	r4, #0
   135a4:	mov	r0, #0
   135a8:	mov	r1, #3
   135ac:	ldr	r2, [sp, #12]
   135b0:	bl	153cc <__assert_fail@plt+0x3dd8>
   135b4:	mov	r3, r0
   135b8:	movw	r2, #32140	; 0x7d8c
   135bc:	movt	r2, #1
   135c0:	mov	r0, #0
   135c4:	mov	r1, r5
   135c8:	bl	1142c <error@plt>
   135cc:	b	1345c <__assert_fail@plt+0x1e68>
   135d0:	push	{r4, sl, fp, lr}
   135d4:	add	fp, sp, #8
   135d8:	mov	r4, r0
   135dc:	mov	r0, #24
   135e0:	bl	165f0 <__assert_fail@plt+0x4ffc>
   135e4:	cmp	r0, #0
   135e8:	movne	r1, #0
   135ec:	strne	r1, [r0]
   135f0:	strne	r4, [r0, #16]
   135f4:	strne	r4, [r0, #20]
   135f8:	popne	{r4, sl, fp, pc}
   135fc:	mov	r0, #0
   13600:	pop	{r4, sl, fp, pc}
   13604:	push	{r4, sl, fp, lr}
   13608:	add	fp, sp, #8
   1360c:	mov	r4, r0
   13610:	mov	r0, #24
   13614:	bl	165f0 <__assert_fail@plt+0x4ffc>
   13618:	cmp	r0, #0
   1361c:	moveq	r0, #0
   13620:	popeq	{r4, sl, fp, pc}
   13624:	vmov.i32	q8, #0	; 0x00000000
   13628:	mov	r1, r0
   1362c:	str	r4, [r1], #4
   13630:	vst1.32	{d16-d17}, [r1]
   13634:	pop	{r4, sl, fp, pc}
   13638:	push	{r4, r5, r6, sl, fp, lr}
   1363c:	add	fp, sp, #16
   13640:	mov	r4, r1
   13644:	mov	r5, r0
   13648:	ldr	r3, [r0]
   1364c:	cmp	r3, #0
   13650:	beq	1368c <__assert_fail@plt+0x2098>
   13654:	add	r0, r5, #8
   13658:	add	r1, r5, #12
   1365c:	mov	r6, #0
   13660:	mov	r2, #0
   13664:	bl	115ac <getdelim@plt>
   13668:	cmn	r0, #1
   1366c:	ble	136bc <__assert_fail@plt+0x20c8>
   13670:	mov	r0, #1
   13674:	str	r0, [r4]
   13678:	ldmib	r5, {r0, r6}
   1367c:	add	r0, r0, #1
   13680:	str	r0, [r5, #4]
   13684:	mov	r0, r6
   13688:	pop	{r4, r5, r6, sl, fp, pc}
   1368c:	ldr	r0, [r5, #20]
   13690:	ldr	r0, [r0]
   13694:	cmp	r0, #0
   13698:	beq	136dc <__assert_fail@plt+0x20e8>
   1369c:	mov	r0, #1
   136a0:	str	r0, [r4]
   136a4:	ldr	r0, [r5, #20]
   136a8:	add	r1, r0, #4
   136ac:	str	r1, [r5, #20]
   136b0:	ldr	r6, [r0]
   136b4:	mov	r0, r6
   136b8:	pop	{r4, r5, r6, sl, fp, pc}
   136bc:	ldr	r0, [r5]
   136c0:	bl	114b0 <feof@plt>
   136c4:	mov	r1, #2
   136c8:	cmp	r0, #0
   136cc:	movweq	r1, #4
   136d0:	str	r1, [r4]
   136d4:	mov	r0, r6
   136d8:	pop	{r4, r5, r6, sl, fp, pc}
   136dc:	mov	r0, #2
   136e0:	str	r0, [r4]
   136e4:	mov	r6, #0
   136e8:	mov	r0, r6
   136ec:	pop	{r4, r5, r6, sl, fp, pc}
   136f0:	ldr	r1, [r0]
   136f4:	cmp	r1, #0
   136f8:	ldrne	r0, [r0, #4]
   136fc:	bxne	lr
   13700:	ldr	r1, [r0, #16]
   13704:	ldr	r0, [r0, #20]
   13708:	sub	r0, r0, r1
   1370c:	asr	r0, r0, #2
   13710:	bx	lr
   13714:	push	{r4, sl, fp, lr}
   13718:	add	fp, sp, #8
   1371c:	mov	r4, r0
   13720:	ldr	r0, [r0]
   13724:	cmp	r0, #0
   13728:	beq	13734 <__assert_fail@plt+0x2140>
   1372c:	ldr	r0, [r4, #8]
   13730:	bl	13990 <__assert_fail@plt+0x239c>
   13734:	mov	r0, r4
   13738:	pop	{r4, sl, fp, lr}
   1373c:	b	13990 <__assert_fail@plt+0x239c>
   13740:	movw	r1, #37348	; 0x91e4
   13744:	movt	r1, #2
   13748:	str	r0, [r1]
   1374c:	bx	lr
   13750:	movw	r1, #37352	; 0x91e8
   13754:	movt	r1, #2
   13758:	strb	r0, [r1]
   1375c:	bx	lr
   13760:	push	{r4, r5, r6, sl, fp, lr}
   13764:	add	fp, sp, #16
   13768:	sub	sp, sp, #8
   1376c:	movw	r0, #37268	; 0x9194
   13770:	movt	r0, #2
   13774:	ldr	r0, [r0]
   13778:	bl	169a8 <__assert_fail@plt+0x53b4>
   1377c:	cmp	r0, #0
   13780:	beq	137a8 <__assert_fail@plt+0x21b4>
   13784:	movw	r0, #37352	; 0x91e8
   13788:	movt	r0, #2
   1378c:	ldrb	r0, [r0]
   13790:	cmp	r0, #0
   13794:	beq	137c8 <__assert_fail@plt+0x21d4>
   13798:	bl	114ec <__errno_location@plt>
   1379c:	ldr	r0, [r0]
   137a0:	cmp	r0, #32
   137a4:	bne	137c8 <__assert_fail@plt+0x21d4>
   137a8:	movw	r0, #37256	; 0x9188
   137ac:	movt	r0, #2
   137b0:	ldr	r0, [r0]
   137b4:	bl	169a8 <__assert_fail@plt+0x53b4>
   137b8:	cmp	r0, #0
   137bc:	subeq	sp, fp, #16
   137c0:	popeq	{r4, r5, r6, sl, fp, pc}
   137c4:	b	13838 <__assert_fail@plt+0x2244>
   137c8:	movw	r1, #32124	; 0x7d7c
   137cc:	movt	r1, #1
   137d0:	mov	r0, #0
   137d4:	mov	r2, #5
   137d8:	bl	11384 <dcgettext@plt>
   137dc:	mov	r4, r0
   137e0:	movw	r0, #37348	; 0x91e4
   137e4:	movt	r0, #2
   137e8:	ldr	r6, [r0]
   137ec:	bl	114ec <__errno_location@plt>
   137f0:	ldr	r5, [r0]
   137f4:	cmp	r6, #0
   137f8:	bne	13814 <__assert_fail@plt+0x2220>
   137fc:	movw	r2, #32140	; 0x7d8c
   13800:	movt	r2, #1
   13804:	mov	r0, #0
   13808:	mov	r1, r5
   1380c:	mov	r3, r4
   13810:	b	13834 <__assert_fail@plt+0x2240>
   13814:	mov	r0, r6
   13818:	bl	153bc <__assert_fail@plt+0x3dc8>
   1381c:	mov	r3, r0
   13820:	str	r4, [sp]
   13824:	movw	r2, #32136	; 0x7d88
   13828:	movt	r2, #1
   1382c:	mov	r0, #0
   13830:	mov	r1, r5
   13834:	bl	1142c <error@plt>
   13838:	movw	r0, #37164	; 0x912c
   1383c:	movt	r0, #2
   13840:	ldr	r0, [r0]
   13844:	bl	11354 <_exit@plt>
   13848:	b	11300 <posix_fadvise64@plt>
   1384c:	cmp	r0, #0
   13850:	bxeq	lr
   13854:	push	{r4, sl, fp, lr}
   13858:	add	fp, sp, #8
   1385c:	sub	sp, sp, #16
   13860:	mov	r4, r1
   13864:	bl	11540 <fileno@plt>
   13868:	mov	r1, #0
   1386c:	str	r1, [sp]
   13870:	stmib	sp, {r1, r4}
   13874:	mov	r2, #0
   13878:	mov	r3, #0
   1387c:	bl	13848 <__assert_fail@plt+0x2254>
   13880:	sub	sp, fp, #8
   13884:	pop	{r4, sl, fp, pc}
   13888:	push	{r4, r5, fp, lr}
   1388c:	add	fp, sp, #8
   13890:	sub	sp, sp, #8
   13894:	mov	r4, r0
   13898:	bl	11540 <fileno@plt>
   1389c:	cmn	r0, #1
   138a0:	ble	13918 <__assert_fail@plt+0x2324>
   138a4:	mov	r0, r4
   138a8:	bl	11474 <__freading@plt>
   138ac:	cmp	r0, #0
   138b0:	beq	138dc <__assert_fail@plt+0x22e8>
   138b4:	mov	r0, r4
   138b8:	bl	11540 <fileno@plt>
   138bc:	mov	r1, #1
   138c0:	str	r1, [sp]
   138c4:	mov	r2, #0
   138c8:	mov	r3, #0
   138cc:	bl	113f0 <lseek64@plt>
   138d0:	and	r0, r0, r1
   138d4:	cmn	r0, #1
   138d8:	beq	13918 <__assert_fail@plt+0x2324>
   138dc:	mov	r0, r4
   138e0:	bl	13928 <__assert_fail@plt+0x2334>
   138e4:	cmp	r0, #0
   138e8:	beq	13918 <__assert_fail@plt+0x2324>
   138ec:	bl	114ec <__errno_location@plt>
   138f0:	ldr	r5, [r0]
   138f4:	mov	r0, r4
   138f8:	bl	11558 <fclose@plt>
   138fc:	cmp	r5, #0
   13900:	beq	13910 <__assert_fail@plt+0x231c>
   13904:	bl	114ec <__errno_location@plt>
   13908:	str	r5, [r0]
   1390c:	mvn	r0, #0
   13910:	sub	sp, fp, #8
   13914:	pop	{r4, r5, fp, pc}
   13918:	mov	r0, r4
   1391c:	sub	sp, fp, #8
   13920:	pop	{r4, r5, fp, lr}
   13924:	b	11558 <fclose@plt>
   13928:	push	{r4, sl, fp, lr}
   1392c:	add	fp, sp, #8
   13930:	mov	r4, r0
   13934:	cmp	r0, #0
   13938:	beq	13950 <__assert_fail@plt+0x235c>
   1393c:	mov	r0, r4
   13940:	bl	11474 <__freading@plt>
   13944:	cmp	r0, #0
   13948:	movne	r0, r4
   1394c:	blne	1395c <__assert_fail@plt+0x2368>
   13950:	mov	r0, r4
   13954:	pop	{r4, sl, fp, lr}
   13958:	b	11318 <fflush@plt>
   1395c:	ldrb	r1, [r0, #1]
   13960:	tst	r1, #1
   13964:	bxeq	lr
   13968:	push	{fp, lr}
   1396c:	mov	fp, sp
   13970:	sub	sp, sp, #8
   13974:	mov	r1, #1
   13978:	str	r1, [sp]
   1397c:	mov	r2, #0
   13980:	mov	r3, #0
   13984:	bl	139b8 <__assert_fail@plt+0x23c4>
   13988:	mov	sp, fp
   1398c:	pop	{fp, pc}
   13990:	push	{r4, r5, r6, sl, fp, lr}
   13994:	add	fp, sp, #16
   13998:	mov	r4, r0
   1399c:	bl	114ec <__errno_location@plt>
   139a0:	mov	r5, r0
   139a4:	ldr	r6, [r0]
   139a8:	mov	r0, r4
   139ac:	bl	1133c <free@plt>
   139b0:	str	r6, [r5]
   139b4:	pop	{r4, r5, r6, sl, fp, pc}
   139b8:	push	{r4, r5, r6, r7, fp, lr}
   139bc:	add	fp, sp, #16
   139c0:	sub	sp, sp, #8
   139c4:	mov	r5, r3
   139c8:	mov	r6, r2
   139cc:	mov	r4, r0
   139d0:	ldr	r0, [r0, #4]
   139d4:	ldr	r1, [r4, #8]
   139d8:	cmp	r1, r0
   139dc:	bne	139f8 <__assert_fail@plt+0x2404>
   139e0:	ldrd	r0, [r4, #16]
   139e4:	cmp	r1, r0
   139e8:	bne	139f8 <__assert_fail@plt+0x2404>
   139ec:	ldr	r0, [r4, #36]	; 0x24
   139f0:	cmp	r0, #0
   139f4:	beq	13a10 <__assert_fail@plt+0x241c>
   139f8:	mov	r0, r4
   139fc:	mov	r2, r6
   13a00:	mov	r3, r5
   13a04:	sub	sp, fp, #16
   13a08:	pop	{r4, r5, r6, r7, fp, lr}
   13a0c:	b	11564 <fseeko64@plt>
   13a10:	ldr	r7, [fp, #8]
   13a14:	mov	r0, r4
   13a18:	bl	11540 <fileno@plt>
   13a1c:	str	r7, [sp]
   13a20:	mov	r2, r6
   13a24:	mov	r3, r5
   13a28:	bl	113f0 <lseek64@plt>
   13a2c:	and	r2, r0, r1
   13a30:	cmn	r2, #1
   13a34:	mvneq	r0, #0
   13a38:	subeq	sp, fp, #16
   13a3c:	popeq	{r4, r5, r6, r7, fp, pc}
   13a40:	strd	r0, [r4, #80]	; 0x50
   13a44:	ldr	r0, [r4]
   13a48:	bic	r0, r0, #16
   13a4c:	str	r0, [r4]
   13a50:	mov	r0, #0
   13a54:	sub	sp, fp, #16
   13a58:	pop	{r4, r5, r6, r7, fp, pc}
   13a5c:	push	{r4, r5, r6, sl, fp, lr}
   13a60:	add	fp, sp, #16
   13a64:	mov	r4, r1
   13a68:	mov	r5, r0
   13a6c:	mov	r0, #0
   13a70:	strb	r0, [r2, #20]
   13a74:	add	r6, r2, #19
   13a78:	mov	r0, r5
   13a7c:	mov	r1, r4
   13a80:	mov	r2, #10
   13a84:	mov	r3, #0
   13a88:	bl	1732c <_obstack_memory_used@@Base+0x51c>
   13a8c:	add	r2, r0, r0, lsl #2
   13a90:	sub	r2, r5, r2, lsl #1
   13a94:	orr	r2, r2, #48	; 0x30
   13a98:	strb	r2, [r6], #-1
   13a9c:	rsbs	r2, r5, #9
   13aa0:	rscs	r2, r4, #0
   13aa4:	mov	r5, r0
   13aa8:	mov	r4, r1
   13aac:	bcc	13a78 <__assert_fail@plt+0x2484>
   13ab0:	add	r0, r6, #1
   13ab4:	pop	{r4, r5, r6, sl, fp, pc}
   13ab8:	push	{r4, sl, fp, lr}
   13abc:	add	fp, sp, #8
   13ac0:	mov	r4, r0
   13ac4:	bl	11324 <wcwidth@plt>
   13ac8:	cmn	r0, #1
   13acc:	popgt	{r4, sl, fp, pc}
   13ad0:	mov	r0, r4
   13ad4:	bl	113b4 <iswcntrl@plt>
   13ad8:	clz	r0, r0
   13adc:	lsr	r0, r0, #5
   13ae0:	pop	{r4, sl, fp, pc}
   13ae4:	push	{r4, r5, r6, sl, fp, lr}
   13ae8:	add	fp, sp, #16
   13aec:	mov	r5, r1
   13af0:	mov	r4, r0
   13af4:	ldr	r6, [r1], #16
   13af8:	cmp	r6, r1
   13afc:	bne	13b10 <__assert_fail@plt+0x251c>
   13b00:	ldr	r2, [r5, #4]
   13b04:	add	r6, r4, #16
   13b08:	mov	r0, r6
   13b0c:	bl	11360 <memcpy@plt>
   13b10:	str	r6, [r4]
   13b14:	ldr	r0, [r5, #4]
   13b18:	str	r0, [r4, #4]
   13b1c:	ldrb	r0, [r5, #8]
   13b20:	strb	r0, [r4, #8]
   13b24:	cmp	r0, #0
   13b28:	ldrne	r0, [r5, #12]
   13b2c:	strne	r0, [r4, #12]
   13b30:	pop	{r4, r5, r6, sl, fp, pc}
   13b34:	ubfx	r1, r0, #5, #3
   13b38:	movw	r2, #32144	; 0x7d90
   13b3c:	movt	r2, #1
   13b40:	ldr	r1, [r2, r1, lsl #2]
   13b44:	and	r0, r0, #31
   13b48:	mov	r2, #1
   13b4c:	and	r0, r1, r2, lsl r0
   13b50:	cmp	r0, #0
   13b54:	movwne	r0, #1
   13b58:	bx	lr
   13b5c:	push	{r4, r5, r6, r7, fp, lr}
   13b60:	add	fp, sp, #16
   13b64:	sub	sp, sp, #8
   13b68:	mov	r7, r2
   13b6c:	mov	r4, r1
   13b70:	add	r5, sp, #4
   13b74:	cmp	r0, #0
   13b78:	movne	r5, r0
   13b7c:	mov	r0, r5
   13b80:	bl	11420 <mbrtowc@plt>
   13b84:	mov	r6, r0
   13b88:	cmp	r7, #0
   13b8c:	beq	13bb0 <__assert_fail@plt+0x25bc>
   13b90:	cmn	r6, #2
   13b94:	bcc	13bb0 <__assert_fail@plt+0x25bc>
   13b98:	mov	r0, #0
   13b9c:	bl	16a30 <__assert_fail@plt+0x543c>
   13ba0:	cmp	r0, #0
   13ba4:	ldrbeq	r0, [r4]
   13ba8:	streq	r0, [r5]
   13bac:	moveq	r6, #1
   13bb0:	mov	r0, r6
   13bb4:	sub	sp, fp, #16
   13bb8:	pop	{r4, r5, r6, r7, fp, pc}
   13bbc:	andeq	r0, r0, r0
   13bc0:	push	{r4, sl, fp, lr}
   13bc4:	add	fp, sp, #8
   13bc8:	sub	sp, sp, #64	; 0x40
   13bcc:	mov	r0, #85	; 0x55
   13bd0:	bl	11390 <sysconf@plt>
   13bd4:	mov	r4, r0
   13bd8:	mov	r0, #30
   13bdc:	bl	11390 <sysconf@plt>
   13be0:	orr	r1, r0, r4
   13be4:	cmn	r1, #1
   13be8:	ble	13c00 <__assert_fail@plt+0x260c>
   13bec:	vmov	s0, r0
   13bf0:	vcvt.f64.s32	d16, s0
   13bf4:	vmov	s0, r4
   13bf8:	vcvt.f64.s32	d17, s0
   13bfc:	b	13c28 <__assert_fail@plt+0x2634>
   13c00:	mov	r0, sp
   13c04:	bl	11450 <sysinfo@plt>
   13c08:	cmp	r0, #0
   13c0c:	vldrne	d0, [pc, #36]	; 13c38 <__assert_fail@plt+0x2644>
   13c10:	subne	sp, fp, #8
   13c14:	popne	{r4, sl, fp, pc}
   13c18:	vldr	s0, [sp, #16]
   13c1c:	vldr	s2, [sp, #52]	; 0x34
   13c20:	vcvt.f64.u32	d16, s2
   13c24:	vcvt.f64.u32	d17, s0
   13c28:	vmul.f64	d0, d17, d16
   13c2c:	sub	sp, fp, #8
   13c30:	pop	{r4, sl, fp, pc}
   13c34:	nop	{0}
   13c38:	andeq	r0, r0, r0
   13c3c:	orrsmi	r0, r0, r0
   13c40:	push	{r4, sl, fp, lr}
   13c44:	add	fp, sp, #8
   13c48:	sub	sp, sp, #64	; 0x40
   13c4c:	mov	r0, #86	; 0x56
   13c50:	bl	11390 <sysconf@plt>
   13c54:	mov	r4, r0
   13c58:	mov	r0, #30
   13c5c:	bl	11390 <sysconf@plt>
   13c60:	orr	r1, r0, r4
   13c64:	cmp	r1, #0
   13c68:	blt	13c88 <__assert_fail@plt+0x2694>
   13c6c:	vmov	s0, r0
   13c70:	vcvt.f64.s32	d16, s0
   13c74:	vmov	s0, r4
   13c78:	vcvt.f64.s32	d17, s0
   13c7c:	vmul.f64	d0, d17, d16
   13c80:	sub	sp, fp, #8
   13c84:	pop	{r4, sl, fp, pc}
   13c88:	mov	r0, sp
   13c8c:	bl	11450 <sysinfo@plt>
   13c90:	cmp	r0, #0
   13c94:	beq	13cac <__assert_fail@plt+0x26b8>
   13c98:	bl	13bc0 <__assert_fail@plt+0x25cc>
   13c9c:	vmov.f64	d16, #80	; 0x3e800000  0.250
   13ca0:	vmul.f64	d0, d0, d16
   13ca4:	sub	sp, fp, #8
   13ca8:	pop	{r4, sl, fp, pc}
   13cac:	vldr	s0, [sp, #20]
   13cb0:	vldr	s2, [sp, #28]
   13cb4:	vldr	s4, [sp, #52]	; 0x34
   13cb8:	vcvt.f64.u32	d16, s2
   13cbc:	vcvt.f64.u32	d17, s0
   13cc0:	vcvt.f64.u32	d18, s4
   13cc4:	vadd.f64	d16, d17, d16
   13cc8:	vmul.f64	d0, d16, d18
   13ccc:	sub	sp, fp, #8
   13cd0:	pop	{r4, sl, fp, pc}
   13cd4:	push	{r4, r5, fp, lr}
   13cd8:	add	fp, sp, #8
   13cdc:	cmp	r0, #0
   13ce0:	beq	13d74 <__assert_fail@plt+0x2780>
   13ce4:	mov	r4, r0
   13ce8:	mov	r1, #47	; 0x2f
   13cec:	bl	1157c <strrchr@plt>
   13cf0:	cmp	r0, #0
   13cf4:	mov	r5, r4
   13cf8:	addne	r5, r0, #1
   13cfc:	sub	r0, r5, r4
   13d00:	cmp	r0, #7
   13d04:	blt	13d58 <__assert_fail@plt+0x2764>
   13d08:	sub	r0, r5, #7
   13d0c:	movw	r1, #32232	; 0x7de8
   13d10:	movt	r1, #1
   13d14:	mov	r2, #7
   13d18:	bl	115c4 <strncmp@plt>
   13d1c:	cmp	r0, #0
   13d20:	bne	13d58 <__assert_fail@plt+0x2764>
   13d24:	movw	r1, #32240	; 0x7df0
   13d28:	movt	r1, #1
   13d2c:	mov	r0, r5
   13d30:	mov	r2, #3
   13d34:	bl	115c4 <strncmp@plt>
   13d38:	cmp	r0, #0
   13d3c:	beq	13d48 <__assert_fail@plt+0x2754>
   13d40:	mov	r4, r5
   13d44:	b	13d58 <__assert_fail@plt+0x2764>
   13d48:	add	r4, r5, #3
   13d4c:	movw	r0, #37240	; 0x9178
   13d50:	movt	r0, #2
   13d54:	str	r4, [r0]
   13d58:	movw	r0, #37244	; 0x917c
   13d5c:	movt	r0, #2
   13d60:	str	r4, [r0]
   13d64:	movw	r0, #37356	; 0x91ec
   13d68:	movt	r0, #2
   13d6c:	str	r4, [r0]
   13d70:	pop	{r4, r5, fp, pc}
   13d74:	movw	r0, #37256	; 0x9188
   13d78:	movt	r0, #2
   13d7c:	ldr	r3, [r0]
   13d80:	movw	r0, #32176	; 0x7db0
   13d84:	movt	r0, #1
   13d88:	mov	r1, #55	; 0x37
   13d8c:	mov	r2, #1
   13d90:	bl	113e4 <fwrite@plt>
   13d94:	bl	115d0 <abort@plt>
   13d98:	push	{r4, r5, r6, sl, fp, lr}
   13d9c:	add	fp, sp, #16
   13da0:	mov	r4, r0
   13da4:	movw	r0, #37360	; 0x91f0
   13da8:	movt	r0, #2
   13dac:	cmp	r4, #0
   13db0:	moveq	r4, r0
   13db4:	bl	114ec <__errno_location@plt>
   13db8:	mov	r5, r0
   13dbc:	ldr	r6, [r0]
   13dc0:	mov	r0, r4
   13dc4:	mov	r1, #48	; 0x30
   13dc8:	bl	16494 <__assert_fail@plt+0x4ea0>
   13dcc:	str	r6, [r5]
   13dd0:	pop	{r4, r5, r6, sl, fp, pc}
   13dd4:	movw	r1, #37360	; 0x91f0
   13dd8:	movt	r1, #2
   13ddc:	cmp	r0, #0
   13de0:	movne	r1, r0
   13de4:	ldr	r0, [r1]
   13de8:	bx	lr
   13dec:	movw	r2, #37360	; 0x91f0
   13df0:	movt	r2, #2
   13df4:	cmp	r0, #0
   13df8:	movne	r2, r0
   13dfc:	str	r1, [r2]
   13e00:	bx	lr
   13e04:	movw	r3, #37360	; 0x91f0
   13e08:	movt	r3, #2
   13e0c:	cmp	r0, #0
   13e10:	movne	r3, r0
   13e14:	ubfx	r0, r1, #5, #3
   13e18:	add	r0, r3, r0, lsl #2
   13e1c:	ldr	r3, [r0, #8]
   13e20:	and	r1, r1, #31
   13e24:	eor	r2, r2, r3, lsr r1
   13e28:	and	r2, r2, #1
   13e2c:	eor	r2, r3, r2, lsl r1
   13e30:	str	r2, [r0, #8]
   13e34:	mov	r0, #1
   13e38:	and	r0, r0, r3, lsr r1
   13e3c:	bx	lr
   13e40:	movw	r2, #37360	; 0x91f0
   13e44:	movt	r2, #2
   13e48:	cmp	r0, #0
   13e4c:	movne	r2, r0
   13e50:	ldr	r0, [r2, #4]
   13e54:	str	r1, [r2, #4]
   13e58:	bx	lr
   13e5c:	movw	r3, #37360	; 0x91f0
   13e60:	movt	r3, #2
   13e64:	cmp	r0, #0
   13e68:	movne	r3, r0
   13e6c:	mov	r0, #10
   13e70:	str	r0, [r3]
   13e74:	cmp	r1, #0
   13e78:	cmpne	r2, #0
   13e7c:	bne	13e8c <__assert_fail@plt+0x2898>
   13e80:	push	{fp, lr}
   13e84:	mov	fp, sp
   13e88:	bl	115d0 <abort@plt>
   13e8c:	str	r1, [r3, #40]	; 0x28
   13e90:	str	r2, [r3, #44]	; 0x2c
   13e94:	bx	lr
   13e98:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13e9c:	add	fp, sp, #28
   13ea0:	sub	sp, sp, #20
   13ea4:	mov	r8, r3
   13ea8:	mov	r9, r2
   13eac:	mov	sl, r1
   13eb0:	mov	r7, r0
   13eb4:	ldr	r0, [fp, #8]
   13eb8:	movw	r5, #37360	; 0x91f0
   13ebc:	movt	r5, #2
   13ec0:	cmp	r0, #0
   13ec4:	movne	r5, r0
   13ec8:	bl	114ec <__errno_location@plt>
   13ecc:	mov	r4, r0
   13ed0:	ldm	r5, {r0, r1}
   13ed4:	ldr	r2, [r5, #40]	; 0x28
   13ed8:	ldr	r3, [r5, #44]	; 0x2c
   13edc:	ldr	r6, [r4]
   13ee0:	add	r5, r5, #8
   13ee4:	stm	sp, {r0, r1, r5}
   13ee8:	str	r2, [sp, #12]
   13eec:	str	r3, [sp, #16]
   13ef0:	mov	r0, r7
   13ef4:	mov	r1, sl
   13ef8:	mov	r2, r9
   13efc:	mov	r3, r8
   13f00:	bl	13f10 <__assert_fail@plt+0x291c>
   13f04:	str	r6, [r4]
   13f08:	sub	sp, fp, #28
   13f0c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13f10:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13f14:	add	fp, sp, #28
   13f18:	sub	sp, sp, #156	; 0x9c
   13f1c:	mov	r9, r3
   13f20:	str	r2, [fp, #-84]	; 0xffffffac
   13f24:	mov	r6, r1
   13f28:	mov	r7, r0
   13f2c:	ldr	r0, [fp, #12]
   13f30:	and	r1, r0, #4
   13f34:	str	r1, [sp, #32]
   13f38:	and	r1, r0, #1
   13f3c:	str	r1, [sp, #36]	; 0x24
   13f40:	ubfx	sl, r0, #1, #1
   13f44:	bl	113fc <__ctype_get_mb_cur_max@plt>
   13f48:	str	r0, [sp, #40]	; 0x28
   13f4c:	ldr	r0, [fp, #24]
   13f50:	str	r0, [sp, #76]	; 0x4c
   13f54:	ldr	r0, [fp, #20]
   13f58:	str	r0, [sp, #68]	; 0x44
   13f5c:	ldr	r0, [fp, #8]
   13f60:	str	r0, [fp, #-60]	; 0xffffffc4
   13f64:	mov	r0, #0
   13f68:	str	r0, [sp, #72]	; 0x48
   13f6c:	mov	r0, #0
   13f70:	str	r0, [sp, #92]	; 0x5c
   13f74:	mov	r0, #0
   13f78:	str	r0, [fp, #-72]	; 0xffffffb8
   13f7c:	mov	r0, #0
   13f80:	mov	r1, #0
   13f84:	str	r1, [fp, #-56]	; 0xffffffc8
   13f88:	mov	r1, #0
   13f8c:	str	r1, [sp, #56]	; 0x38
   13f90:	mov	r5, #1
   13f94:	str	r7, [sp, #80]	; 0x50
   13f98:	mov	r4, r6
   13f9c:	ldr	r6, [fp, #-60]	; 0xffffffc4
   13fa0:	cmp	r6, #10
   13fa4:	bhi	14f0c <__assert_fail@plt+0x3918>
   13fa8:	add	r1, pc, #20
   13fac:	mov	r8, #0
   13fb0:	mov	r2, #1
   13fb4:	mov	r3, #0
   13fb8:	ldr	ip, [fp, #-84]	; 0xffffffac
   13fbc:	mov	lr, r9
   13fc0:	ldr	pc, [r1, r6, lsl #2]
   13fc4:	muleq	r1, ip, r0
   13fc8:	andeq	r4, r1, ip, asr #1
   13fcc:	andeq	r4, r1, ip, lsl #1
   13fd0:	andeq	r4, r1, r4, lsl #1
   13fd4:	andeq	r4, r1, r0, asr #1
   13fd8:	andeq	r4, r1, r0, lsr #2
   13fdc:	andeq	r4, r1, ip, lsr #1
   13fe0:	andeq	r4, r1, ip, ror r1
   13fe4:	strdeq	r3, [r1], -r0
   13fe8:	strdeq	r3, [r1], -r0
   13fec:	andeq	r4, r1, r8, lsl r0
   13ff0:	movw	r0, #32320	; 0x7e40
   13ff4:	movt	r0, #1
   13ff8:	mov	r1, r6
   13ffc:	bl	15518 <__assert_fail@plt+0x3f24>
   14000:	str	r0, [sp, #68]	; 0x44
   14004:	movw	r0, #32322	; 0x7e42
   14008:	movt	r0, #1
   1400c:	mov	r1, r6
   14010:	bl	15518 <__assert_fail@plt+0x3f24>
   14014:	str	r0, [sp, #76]	; 0x4c
   14018:	mov	r8, #0
   1401c:	tst	sl, #1
   14020:	bne	14058 <__assert_fail@plt+0x2a64>
   14024:	ldr	r0, [sp, #68]	; 0x44
   14028:	ldrb	r0, [r0]
   1402c:	cmp	r0, #0
   14030:	beq	14058 <__assert_fail@plt+0x2a64>
   14034:	ldr	r1, [sp, #68]	; 0x44
   14038:	add	r1, r1, #1
   1403c:	mov	r8, #0
   14040:	cmp	r8, r4
   14044:	strbcc	r0, [r7, r8]
   14048:	ldrb	r0, [r1, r8]
   1404c:	add	r8, r8, #1
   14050:	cmp	r0, #0
   14054:	bne	14040 <__assert_fail@plt+0x2a4c>
   14058:	ldr	r6, [sp, #76]	; 0x4c
   1405c:	mov	r0, r6
   14060:	bl	114c8 <strlen@plt>
   14064:	str	r0, [fp, #-72]	; 0xffffffb8
   14068:	str	r6, [sp, #92]	; 0x5c
   1406c:	mov	r2, #1
   14070:	mov	r3, sl
   14074:	ldr	ip, [fp, #-84]	; 0xffffffac
   14078:	mov	lr, r9
   1407c:	ldr	r6, [fp, #-60]	; 0xffffffc4
   14080:	b	1417c <__assert_fail@plt+0x2b88>
   14084:	mov	r0, #1
   14088:	b	140cc <__assert_fail@plt+0x2ad8>
   1408c:	tst	sl, #1
   14090:	bne	140cc <__assert_fail@plt+0x2ad8>
   14094:	mov	r2, r0
   14098:	b	140f4 <__assert_fail@plt+0x2b00>
   1409c:	mov	r6, #0
   140a0:	mov	r8, #0
   140a4:	mov	r2, r0
   140a8:	b	14178 <__assert_fail@plt+0x2b84>
   140ac:	mov	r0, #1
   140b0:	str	r0, [fp, #-72]	; 0xffffffb8
   140b4:	mov	r8, #0
   140b8:	mov	r6, #5
   140bc:	b	14138 <__assert_fail@plt+0x2b44>
   140c0:	mov	r2, #1
   140c4:	tst	sl, #1
   140c8:	beq	140f4 <__assert_fail@plt+0x2b00>
   140cc:	mov	r1, #1
   140d0:	str	r1, [fp, #-72]	; 0xffffffb8
   140d4:	mov	r8, #0
   140d8:	mov	r6, #2
   140dc:	movw	r1, #32322	; 0x7e42
   140e0:	movt	r1, #1
   140e4:	str	r1, [sp, #92]	; 0x5c
   140e8:	mov	r2, r0
   140ec:	mov	r3, #1
   140f0:	b	1417c <__assert_fail@plt+0x2b88>
   140f4:	mov	r8, #1
   140f8:	mov	r6, #2
   140fc:	cmp	r4, #0
   14100:	movne	r0, #39	; 0x27
   14104:	strbne	r0, [r7]
   14108:	movw	r0, #32322	; 0x7e42
   1410c:	movt	r0, #1
   14110:	str	r0, [sp, #92]	; 0x5c
   14114:	mov	r0, #1
   14118:	str	r0, [fp, #-72]	; 0xffffffb8
   1411c:	b	14178 <__assert_fail@plt+0x2b84>
   14120:	mov	r6, #5
   14124:	tst	sl, #1
   14128:	beq	14150 <__assert_fail@plt+0x2b5c>
   1412c:	mov	r0, #1
   14130:	str	r0, [fp, #-72]	; 0xffffffb8
   14134:	mov	r8, #0
   14138:	movw	r0, #31303	; 0x7a47
   1413c:	movt	r0, #1
   14140:	str	r0, [sp, #92]	; 0x5c
   14144:	mov	r2, #1
   14148:	mov	r3, #1
   1414c:	b	1417c <__assert_fail@plt+0x2b88>
   14150:	cmp	r4, #0
   14154:	movne	r0, #34	; 0x22
   14158:	strbne	r0, [r7]
   1415c:	mov	r8, #1
   14160:	movw	r0, #31303	; 0x7a47
   14164:	movt	r0, #1
   14168:	str	r0, [sp, #92]	; 0x5c
   1416c:	mov	r0, #1
   14170:	str	r0, [fp, #-72]	; 0xffffffb8
   14174:	mov	r2, #1
   14178:	mov	r3, #0
   1417c:	ldr	r0, [fp, #16]
   14180:	cmp	r0, #0
   14184:	movwne	r0, #1
   14188:	and	r0, r0, r3
   1418c:	str	r0, [fp, #-88]	; 0xffffffa8
   14190:	ldr	r0, [fp, #-72]	; 0xffffffb8
   14194:	cmp	r0, #0
   14198:	movwne	r0, #1
   1419c:	and	r1, r0, r3
   141a0:	and	r1, r2, r1
   141a4:	str	r1, [sp, #48]	; 0x30
   141a8:	str	r6, [fp, #-60]	; 0xffffffc4
   141ac:	subs	r6, r6, #2
   141b0:	clz	r1, r6
   141b4:	lsr	r1, r1, #5
   141b8:	and	r1, r1, r3
   141bc:	str	r1, [sp, #60]	; 0x3c
   141c0:	str	r6, [fp, #-80]	; 0xffffffb0
   141c4:	mov	r1, r6
   141c8:	movwne	r1, #1
   141cc:	str	r3, [fp, #-76]	; 0xffffffb4
   141d0:	eor	r3, r3, #1
   141d4:	str	r3, [sp, #88]	; 0x58
   141d8:	orr	r3, r1, r3
   141dc:	str	r3, [sp, #64]	; 0x40
   141e0:	and	r1, r1, r2
   141e4:	str	r1, [fp, #-68]	; 0xffffffbc
   141e8:	and	r0, r0, r1
   141ec:	str	r0, [fp, #-64]	; 0xffffffc0
   141f0:	str	r2, [sp, #84]	; 0x54
   141f4:	eor	r0, r2, #1
   141f8:	str	r0, [sp, #52]	; 0x34
   141fc:	mov	r6, #0
   14200:	cmn	lr, #1
   14204:	beq	14214 <__assert_fail@plt+0x2c20>
   14208:	cmp	r6, lr
   1420c:	bne	14220 <__assert_fail@plt+0x2c2c>
   14210:	b	14d8c <__assert_fail@plt+0x3798>
   14214:	ldrb	r0, [ip, r6]
   14218:	cmp	r0, #0
   1421c:	beq	14d8c <__assert_fail@plt+0x3798>
   14220:	str	r5, [fp, #-48]	; 0xffffffd0
   14224:	mov	sl, #0
   14228:	ldr	r0, [fp, #-64]	; 0xffffffc0
   1422c:	cmp	r0, #0
   14230:	beq	14264 <__assert_fail@plt+0x2c70>
   14234:	ldr	r0, [fp, #-72]	; 0xffffffb8
   14238:	add	r5, r6, r0
   1423c:	cmp	r0, #2
   14240:	bcc	1425c <__assert_fail@plt+0x2c68>
   14244:	cmn	lr, #1
   14248:	bne	1425c <__assert_fail@plt+0x2c68>
   1424c:	mov	r0, ip
   14250:	bl	114c8 <strlen@plt>
   14254:	ldr	ip, [fp, #-84]	; 0xffffffac
   14258:	mov	lr, r0
   1425c:	cmp	r5, lr
   14260:	bls	14270 <__assert_fail@plt+0x2c7c>
   14264:	mov	r0, #0
   14268:	str	r0, [fp, #-52]	; 0xffffffcc
   1426c:	b	142bc <__assert_fail@plt+0x2cc8>
   14270:	mov	r5, r4
   14274:	mov	r4, lr
   14278:	add	r0, ip, r6
   1427c:	ldr	r1, [sp, #92]	; 0x5c
   14280:	ldr	r2, [fp, #-72]	; 0xffffffb8
   14284:	bl	11378 <memcmp@plt>
   14288:	cmp	r0, #0
   1428c:	mov	r1, r0
   14290:	movwne	r1, #1
   14294:	ldr	r2, [sp, #88]	; 0x58
   14298:	orr	r1, r1, r2
   1429c:	tst	r1, #1
   142a0:	beq	14e50 <__assert_fail@plt+0x385c>
   142a4:	clz	r0, r0
   142a8:	lsr	r0, r0, #5
   142ac:	str	r0, [fp, #-52]	; 0xffffffcc
   142b0:	ldr	ip, [fp, #-84]	; 0xffffffac
   142b4:	mov	lr, r4
   142b8:	mov	r4, r5
   142bc:	ldrb	r5, [ip, r6]
   142c0:	cmp	r5, #126	; 0x7e
   142c4:	bhi	14680 <__assert_fail@plt+0x308c>
   142c8:	mov	r9, #1
   142cc:	mov	r2, #110	; 0x6e
   142d0:	mov	r0, #97	; 0x61
   142d4:	add	r3, pc, #4
   142d8:	mov	r1, #0
   142dc:	ldr	pc, [r3, r5, lsl #2]
   142e0:	andeq	r4, r1, r8, ror r5
   142e4:	andeq	r4, r1, r0, lsl #13
   142e8:	andeq	r4, r1, r0, lsl #13
   142ec:	andeq	r4, r1, r0, lsl #13
   142f0:	andeq	r4, r1, r0, lsl #13
   142f4:	andeq	r4, r1, r0, lsl #13
   142f8:	andeq	r4, r1, r0, lsl #13
   142fc:	andeq	r4, r1, r4, asr #14
   14300:	andeq	r4, r1, r8, asr r5
   14304:	andeq	r4, r1, r0, asr r5
   14308:	andeq	r4, r1, r4, ror #10
   1430c:	andeq	r4, r1, r8, ror #11
   14310:	andeq	r4, r1, r8, asr #10
   14314:	andeq	r4, r1, r0, ror #10
   14318:	andeq	r4, r1, r0, lsl #13
   1431c:	andeq	r4, r1, r0, lsl #13
   14320:	andeq	r4, r1, r0, lsl #13
   14324:	andeq	r4, r1, r0, lsl #13
   14328:	andeq	r4, r1, r0, lsl #13
   1432c:	andeq	r4, r1, r0, lsl #13
   14330:	andeq	r4, r1, r0, lsl #13
   14334:	andeq	r4, r1, r0, lsl #13
   14338:	andeq	r4, r1, r0, lsl #13
   1433c:	andeq	r4, r1, r0, lsl #13
   14340:	andeq	r4, r1, r0, lsl #13
   14344:	andeq	r4, r1, r0, lsl #13
   14348:	andeq	r4, r1, r0, lsl #13
   1434c:	andeq	r4, r1, r0, lsl #13
   14350:	andeq	r4, r1, r0, lsl #13
   14354:	andeq	r4, r1, r0, lsl #13
   14358:	andeq	r4, r1, r0, lsl #13
   1435c:	andeq	r4, r1, r0, lsl #13
   14360:	strdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   14364:	strdeq	r4, [r1], -r8
   14368:	strdeq	r4, [r1], -r8
   1436c:	strdeq	r4, [r1], -r0
   14370:	strdeq	r4, [r1], -r8
   14374:	ldrdeq	r4, [r1], -ip
   14378:	strdeq	r4, [r1], -r8
   1437c:	strdeq	r4, [r1], -r0
   14380:	strdeq	r4, [r1], -r8
   14384:	strdeq	r4, [r1], -r8
   14388:	strdeq	r4, [r1], -r8
   1438c:	ldrdeq	r4, [r1], -ip
   14390:	ldrdeq	r4, [r1], -ip
   14394:	ldrdeq	r4, [r1], -ip
   14398:	ldrdeq	r4, [r1], -ip
   1439c:	ldrdeq	r4, [r1], -ip
   143a0:	ldrdeq	r4, [r1], -ip
   143a4:	ldrdeq	r4, [r1], -ip
   143a8:	ldrdeq	r4, [r1], -ip
   143ac:	ldrdeq	r4, [r1], -ip
   143b0:	ldrdeq	r4, [r1], -ip
   143b4:	ldrdeq	r4, [r1], -ip
   143b8:	ldrdeq	r4, [r1], -ip
   143bc:	ldrdeq	r4, [r1], -ip
   143c0:	ldrdeq	r4, [r1], -ip
   143c4:	ldrdeq	r4, [r1], -ip
   143c8:	ldrdeq	r4, [r1], -ip
   143cc:	strdeq	r4, [r1], -r8
   143d0:	strdeq	r4, [r1], -r8
   143d4:	strdeq	r4, [r1], -r8
   143d8:	strdeq	r4, [r1], -r8
   143dc:			; <UNDEFINED> instruction: 0x000145b8
   143e0:	andeq	r4, r1, r0, lsl #13
   143e4:	ldrdeq	r4, [r1], -ip
   143e8:	ldrdeq	r4, [r1], -ip
   143ec:	ldrdeq	r4, [r1], -ip
   143f0:	ldrdeq	r4, [r1], -ip
   143f4:	ldrdeq	r4, [r1], -ip
   143f8:	ldrdeq	r4, [r1], -ip
   143fc:	ldrdeq	r4, [r1], -ip
   14400:	ldrdeq	r4, [r1], -ip
   14404:	ldrdeq	r4, [r1], -ip
   14408:	ldrdeq	r4, [r1], -ip
   1440c:	ldrdeq	r4, [r1], -ip
   14410:	ldrdeq	r4, [r1], -ip
   14414:	ldrdeq	r4, [r1], -ip
   14418:	ldrdeq	r4, [r1], -ip
   1441c:	ldrdeq	r4, [r1], -ip
   14420:	ldrdeq	r4, [r1], -ip
   14424:	ldrdeq	r4, [r1], -ip
   14428:	ldrdeq	r4, [r1], -ip
   1442c:	ldrdeq	r4, [r1], -ip
   14430:	ldrdeq	r4, [r1], -ip
   14434:	ldrdeq	r4, [r1], -ip
   14438:	ldrdeq	r4, [r1], -ip
   1443c:	ldrdeq	r4, [r1], -ip
   14440:	ldrdeq	r4, [r1], -ip
   14444:	ldrdeq	r4, [r1], -ip
   14448:	ldrdeq	r4, [r1], -ip
   1444c:	strdeq	r4, [r1], -r8
   14450:	andeq	r4, r1, r4, lsr #10
   14454:	ldrdeq	r4, [r1], -ip
   14458:	strdeq	r4, [r1], -r8
   1445c:	ldrdeq	r4, [r1], -ip
   14460:	strdeq	r4, [r1], -r8
   14464:	ldrdeq	r4, [r1], -ip
   14468:	ldrdeq	r4, [r1], -ip
   1446c:	ldrdeq	r4, [r1], -ip
   14470:	ldrdeq	r4, [r1], -ip
   14474:	ldrdeq	r4, [r1], -ip
   14478:	ldrdeq	r4, [r1], -ip
   1447c:	ldrdeq	r4, [r1], -ip
   14480:	ldrdeq	r4, [r1], -ip
   14484:	ldrdeq	r4, [r1], -ip
   14488:	ldrdeq	r4, [r1], -ip
   1448c:	ldrdeq	r4, [r1], -ip
   14490:	ldrdeq	r4, [r1], -ip
   14494:	ldrdeq	r4, [r1], -ip
   14498:	ldrdeq	r4, [r1], -ip
   1449c:	ldrdeq	r4, [r1], -ip
   144a0:	ldrdeq	r4, [r1], -ip
   144a4:	ldrdeq	r4, [r1], -ip
   144a8:	ldrdeq	r4, [r1], -ip
   144ac:	ldrdeq	r4, [r1], -ip
   144b0:	ldrdeq	r4, [r1], -ip
   144b4:	ldrdeq	r4, [r1], -ip
   144b8:	ldrdeq	r4, [r1], -ip
   144bc:	ldrdeq	r4, [r1], -ip
   144c0:	ldrdeq	r4, [r1], -ip
   144c4:	ldrdeq	r4, [r1], -ip
   144c8:	ldrdeq	r4, [r1], -ip
   144cc:	andeq	r4, r1, r4, lsl #10
   144d0:	strdeq	r4, [r1], -r8
   144d4:	andeq	r4, r1, r4, lsl #10
   144d8:	strdeq	r4, [r1], -r0
   144dc:	ldr	r0, [fp, #-68]	; 0xffffffbc
   144e0:	cmp	r0, #0
   144e4:	beq	14758 <__assert_fail@plt+0x3164>
   144e8:	ldr	r0, [fp, #16]
   144ec:	b	1475c <__assert_fail@plt+0x3168>
   144f0:	mov	r9, #0
   144f4:	cmp	r6, #0
   144f8:	beq	146f4 <__assert_fail@plt+0x3100>
   144fc:	mov	sl, #0
   14500:	b	144dc <__assert_fail@plt+0x2ee8>
   14504:	mov	r9, #0
   14508:	cmn	lr, #1
   1450c:	beq	146d8 <__assert_fail@plt+0x30e4>
   14510:	cmp	r6, #0
   14514:	bne	144fc <__assert_fail@plt+0x2f08>
   14518:	cmp	lr, #1
   1451c:	beq	146f4 <__assert_fail@plt+0x3100>
   14520:	b	144fc <__assert_fail@plt+0x2f08>
   14524:	ldr	r0, [fp, #-60]	; 0xffffffc4
   14528:	cmp	r0, #2
   1452c:	bne	14720 <__assert_fail@plt+0x312c>
   14530:	ldr	r0, [fp, #-76]	; 0xffffffb4
   14534:	tst	r0, #1
   14538:	bne	14e68 <__assert_fail@plt+0x3874>
   1453c:	mov	sl, #0
   14540:	mov	r0, #92	; 0x5c
   14544:	b	14734 <__assert_fail@plt+0x3140>
   14548:	mov	r0, #102	; 0x66
   1454c:	b	14744 <__assert_fail@plt+0x3150>
   14550:	mov	r2, #116	; 0x74
   14554:	b	14564 <__assert_fail@plt+0x2f70>
   14558:	mov	r0, #98	; 0x62
   1455c:	b	14744 <__assert_fail@plt+0x3150>
   14560:	mov	r2, #114	; 0x72
   14564:	ldr	r0, [sp, #64]	; 0x40
   14568:	tst	r0, #1
   1456c:	mov	r0, r2
   14570:	bne	14744 <__assert_fail@plt+0x3150>
   14574:	b	14e68 <__assert_fail@plt+0x3874>
   14578:	ldr	r0, [sp, #84]	; 0x54
   1457c:	tst	r0, #1
   14580:	beq	14834 <__assert_fail@plt+0x3240>
   14584:	ldr	r0, [fp, #-76]	; 0xffffffb4
   14588:	tst	r0, #1
   1458c:	bne	14e68 <__assert_fail@plt+0x3874>
   14590:	ldr	r0, [fp, #-60]	; 0xffffffc4
   14594:	cmp	r0, #2
   14598:	ldr	r0, [fp, #-80]	; 0xffffffb0
   1459c:	movwne	r0, #1
   145a0:	ldr	r2, [fp, #-56]	; 0xffffffc8
   145a4:	orr	r0, r0, r2
   145a8:	tst	r0, #1
   145ac:	beq	14c28 <__assert_fail@plt+0x3634>
   145b0:	mov	r0, r8
   145b4:	b	14c5c <__assert_fail@plt+0x3668>
   145b8:	mov	sl, #0
   145bc:	mov	r5, #63	; 0x3f
   145c0:	ldr	r0, [fp, #-60]	; 0xffffffc4
   145c4:	cmp	r0, #5
   145c8:	beq	149e8 <__assert_fail@plt+0x33f4>
   145cc:	cmp	r0, #2
   145d0:	bne	14a88 <__assert_fail@plt+0x3494>
   145d4:	ldr	r0, [fp, #-76]	; 0xffffffb4
   145d8:	tst	r0, #1
   145dc:	mov	r9, #0
   145e0:	beq	144dc <__assert_fail@plt+0x2ee8>
   145e4:	b	14e68 <__assert_fail@plt+0x3874>
   145e8:	mov	r0, #118	; 0x76
   145ec:	b	14744 <__assert_fail@plt+0x3150>
   145f0:	mov	r5, #39	; 0x27
   145f4:	mov	r0, #1
   145f8:	str	r0, [sp, #56]	; 0x38
   145fc:	ldr	r0, [fp, #-60]	; 0xffffffc4
   14600:	cmp	r0, #2
   14604:	bne	14854 <__assert_fail@plt+0x3260>
   14608:	ldr	r0, [fp, #-76]	; 0xffffffb4
   1460c:	tst	r0, #1
   14610:	bne	14e68 <__assert_fail@plt+0x3874>
   14614:	ldr	r2, [sp, #72]	; 0x48
   14618:	cmp	r2, #0
   1461c:	mov	r0, r2
   14620:	movwne	r0, #1
   14624:	clz	r1, r4
   14628:	lsr	r1, r1, #5
   1462c:	orrs	r0, r0, r1
   14630:	moveq	r2, r4
   14634:	str	r2, [sp, #72]	; 0x48
   14638:	moveq	r4, r0
   1463c:	cmp	r8, r4
   14640:	movcc	r0, #39	; 0x27
   14644:	strbcc	r0, [r7, r8]
   14648:	add	r0, r8, #1
   1464c:	cmp	r0, r4
   14650:	movcc	r1, #92	; 0x5c
   14654:	strbcc	r1, [r7, r0]
   14658:	add	r0, r8, #2
   1465c:	cmp	r0, r4
   14660:	movcc	r1, #39	; 0x27
   14664:	strbcc	r1, [r7, r0]
   14668:	add	r8, r8, #3
   1466c:	mov	r0, #0
   14670:	str	r0, [fp, #-56]	; 0xffffffc8
   14674:	mov	sl, #0
   14678:	mov	r9, #1
   1467c:	b	144dc <__assert_fail@plt+0x2ee8>
   14680:	str	r4, [sp, #24]
   14684:	ldr	r0, [sp, #40]	; 0x28
   14688:	cmp	r0, #1
   1468c:	bne	1485c <__assert_fail@plt+0x3268>
   14690:	str	lr, [sp, #28]
   14694:	bl	11498 <__ctype_b_loc@plt>
   14698:	ldr	ip, [fp, #-84]	; 0xffffffac
   1469c:	ldr	r0, [r0]
   146a0:	add	r0, r0, r5, lsl #1
   146a4:	ldrb	r0, [r0, #1]
   146a8:	ubfx	r9, r0, #6, #1
   146ac:	mov	r1, #1
   146b0:	ldr	r4, [sp, #24]
   146b4:	ldr	r0, [sp, #52]	; 0x34
   146b8:	orr	r0, r9, r0
   146bc:	mov	r2, r1
   146c0:	cmp	r1, #1
   146c4:	bhi	14a90 <__assert_fail@plt+0x349c>
   146c8:	tst	r0, #1
   146cc:	beq	14a90 <__assert_fail@plt+0x349c>
   146d0:	ldr	lr, [sp, #28]
   146d4:	b	144dc <__assert_fail@plt+0x2ee8>
   146d8:	cmp	r6, #0
   146dc:	ldrbeq	r0, [ip, #1]
   146e0:	cmpeq	r0, #0
   146e4:	beq	146f4 <__assert_fail@plt+0x3100>
   146e8:	mvn	lr, #0
   146ec:	mov	sl, #0
   146f0:	b	144dc <__assert_fail@plt+0x2ee8>
   146f4:	mov	r1, #1
   146f8:	ldr	r0, [fp, #-60]	; 0xffffffc4
   146fc:	cmp	r0, #2
   14700:	bne	14718 <__assert_fail@plt+0x3124>
   14704:	ldr	r0, [fp, #-76]	; 0xffffffb4
   14708:	tst	r0, #1
   1470c:	mov	r9, r1
   14710:	beq	144dc <__assert_fail@plt+0x2ee8>
   14714:	b	14e68 <__assert_fail@plt+0x3874>
   14718:	mov	r9, r1
   1471c:	b	144dc <__assert_fail@plt+0x2ee8>
   14720:	mov	sl, #0
   14724:	mov	r0, #92	; 0x5c
   14728:	ldr	r1, [sp, #48]	; 0x30
   1472c:	cmp	r1, #0
   14730:	beq	14744 <__assert_fail@plt+0x3150>
   14734:	mov	r9, #0
   14738:	cmp	sl, #0
   1473c:	beq	14cf4 <__assert_fail@plt+0x3700>
   14740:	b	14d30 <__assert_fail@plt+0x373c>
   14744:	mov	r9, #0
   14748:	ldr	r1, [sp, #84]	; 0x54
   1474c:	tst	r1, #1
   14750:	mov	sl, #0
   14754:	bne	14794 <__assert_fail@plt+0x31a0>
   14758:	ldr	r0, [fp, #-88]	; 0xffffffa8
   1475c:	cmp	r0, #0
   14760:	mov	r0, r5
   14764:	beq	14788 <__assert_fail@plt+0x3194>
   14768:	ubfx	r0, r5, #5, #3
   1476c:	ldr	r1, [fp, #16]
   14770:	ldr	r0, [r1, r0, lsl #2]
   14774:	and	r1, r5, #31
   14778:	mov	r2, #1
   1477c:	tst	r0, r2, lsl r1
   14780:	mov	r0, r5
   14784:	bne	14794 <__assert_fail@plt+0x31a0>
   14788:	ldr	r1, [fp, #-52]	; 0xffffffcc
   1478c:	cmp	r1, #0
   14790:	beq	14cec <__assert_fail@plt+0x36f8>
   14794:	ldr	r1, [fp, #-76]	; 0xffffffb4
   14798:	tst	r1, #1
   1479c:	bne	14e68 <__assert_fail@plt+0x3874>
   147a0:	ldr	r1, [fp, #-60]	; 0xffffffc4
   147a4:	cmp	r1, #2
   147a8:	ldr	r1, [fp, #-80]	; 0xffffffb0
   147ac:	movwne	r1, #1
   147b0:	ldr	r2, [fp, #-56]	; 0xffffffc8
   147b4:	orr	r1, r1, r2
   147b8:	tst	r1, #1
   147bc:	beq	147c8 <__assert_fail@plt+0x31d4>
   147c0:	ldr	r5, [fp, #-48]	; 0xffffffd0
   147c4:	b	14804 <__assert_fail@plt+0x3210>
   147c8:	cmp	r8, r4
   147cc:	movcc	r1, #39	; 0x27
   147d0:	strbcc	r1, [r7, r8]
   147d4:	add	r1, r8, #1
   147d8:	cmp	r1, r4
   147dc:	ldr	r5, [fp, #-48]	; 0xffffffd0
   147e0:	movcc	r2, #36	; 0x24
   147e4:	strbcc	r2, [r7, r1]
   147e8:	add	r1, r8, #2
   147ec:	cmp	r1, r4
   147f0:	movcc	r2, #39	; 0x27
   147f4:	strbcc	r2, [r7, r1]
   147f8:	add	r8, r8, #3
   147fc:	mov	r1, #1
   14800:	str	r1, [fp, #-56]	; 0xffffffc8
   14804:	cmp	r8, r4
   14808:	movcc	r1, #92	; 0x5c
   1480c:	strbcc	r1, [r7, r8]
   14810:	add	r8, r8, #1
   14814:	cmp	r8, r4
   14818:	strbcc	r0, [r7, r8]
   1481c:	and	r5, r5, r9
   14820:	add	r8, r8, #1
   14824:	add	r6, r6, #1
   14828:	cmn	lr, #1
   1482c:	bne	14208 <__assert_fail@plt+0x2c14>
   14830:	b	14214 <__assert_fail@plt+0x2c20>
   14834:	mov	r9, #0
   14838:	ldr	r0, [sp, #36]	; 0x24
   1483c:	cmp	r0, #0
   14840:	mov	sl, #0
   14844:	mov	r5, #0
   14848:	beq	14758 <__assert_fail@plt+0x3164>
   1484c:	ldr	r5, [fp, #-48]	; 0xffffffd0
   14850:	b	14824 <__assert_fail@plt+0x3230>
   14854:	mov	r9, #1
   14858:	b	144dc <__assert_fail@plt+0x2ee8>
   1485c:	mov	r0, #0
   14860:	str	r0, [fp, #-36]	; 0xffffffdc
   14864:	str	r0, [fp, #-40]	; 0xffffffd8
   14868:	cmn	lr, #1
   1486c:	bne	14880 <__assert_fail@plt+0x328c>
   14870:	mov	r0, ip
   14874:	bl	114c8 <strlen@plt>
   14878:	ldr	ip, [fp, #-84]	; 0xffffffac
   1487c:	mov	lr, r0
   14880:	add	r0, ip, r6
   14884:	str	r0, [sp, #20]
   14888:	mov	r9, #1
   1488c:	mov	r7, #0
   14890:	sub	r4, fp, #40	; 0x28
   14894:	str	lr, [sp, #28]
   14898:	str	r7, [sp, #44]	; 0x2c
   1489c:	add	r7, r7, r6
   148a0:	add	r1, ip, r7
   148a4:	sub	r2, lr, r7
   148a8:	sub	r0, fp, #44	; 0x2c
   148ac:	mov	r3, r4
   148b0:	bl	13b5c <__assert_fail@plt+0x2568>
   148b4:	cmp	r0, #0
   148b8:	beq	14d78 <__assert_fail@plt+0x3784>
   148bc:	cmn	r0, #1
   148c0:	beq	14d38 <__assert_fail@plt+0x3744>
   148c4:	cmn	r0, #2
   148c8:	ldr	lr, [sp, #28]
   148cc:	beq	14d40 <__assert_fail@plt+0x374c>
   148d0:	cmp	r0, #2
   148d4:	mov	r1, #0
   148d8:	movwcc	r1, #1
   148dc:	ldr	r2, [sp, #60]	; 0x3c
   148e0:	eor	r2, r2, #1
   148e4:	orrs	r1, r2, r1
   148e8:	ldr	r4, [sp, #24]
   148ec:	bne	149ac <__assert_fail@plt+0x33b8>
   148f0:	ldr	r1, [sp, #44]	; 0x2c
   148f4:	ldr	r2, [sp, #20]
   148f8:	add	r1, r2, r1
   148fc:	mov	r2, #1
   14900:	ldrb	r3, [r1, r2]
   14904:	sub	r3, r3, #91	; 0x5b
   14908:	cmp	r3, #33	; 0x21
   1490c:	bhi	149a0 <__assert_fail@plt+0x33ac>
   14910:	add	r7, pc, #0
   14914:	ldr	pc, [r7, r3, lsl #2]
   14918:	andeq	r4, r1, r0, ror #28
   1491c:	andeq	r4, r1, r0, ror #28
   14920:	andeq	r4, r1, r0, lsr #19
   14924:	andeq	r4, r1, r0, ror #28
   14928:	andeq	r4, r1, r0, lsr #19
   1492c:	andeq	r4, r1, r0, ror #28
   14930:	andeq	r4, r1, r0, lsr #19
   14934:	andeq	r4, r1, r0, lsr #19
   14938:	andeq	r4, r1, r0, lsr #19
   1493c:	andeq	r4, r1, r0, lsr #19
   14940:	andeq	r4, r1, r0, lsr #19
   14944:	andeq	r4, r1, r0, lsr #19
   14948:	andeq	r4, r1, r0, lsr #19
   1494c:	andeq	r4, r1, r0, lsr #19
   14950:	andeq	r4, r1, r0, lsr #19
   14954:	andeq	r4, r1, r0, lsr #19
   14958:	andeq	r4, r1, r0, lsr #19
   1495c:	andeq	r4, r1, r0, lsr #19
   14960:	andeq	r4, r1, r0, lsr #19
   14964:	andeq	r4, r1, r0, lsr #19
   14968:	andeq	r4, r1, r0, lsr #19
   1496c:	andeq	r4, r1, r0, lsr #19
   14970:	andeq	r4, r1, r0, lsr #19
   14974:	andeq	r4, r1, r0, lsr #19
   14978:	andeq	r4, r1, r0, lsr #19
   1497c:	andeq	r4, r1, r0, lsr #19
   14980:	andeq	r4, r1, r0, lsr #19
   14984:	andeq	r4, r1, r0, lsr #19
   14988:	andeq	r4, r1, r0, lsr #19
   1498c:	andeq	r4, r1, r0, lsr #19
   14990:	andeq	r4, r1, r0, lsr #19
   14994:	andeq	r4, r1, r0, lsr #19
   14998:	andeq	r4, r1, r0, lsr #19
   1499c:	andeq	r4, r1, r0, ror #28
   149a0:	add	r2, r2, #1
   149a4:	cmp	r2, r0
   149a8:	bcc	14900 <__assert_fail@plt+0x330c>
   149ac:	ldr	r7, [sp, #44]	; 0x2c
   149b0:	add	r7, r0, r7
   149b4:	ldr	r0, [fp, #-44]	; 0xffffffd4
   149b8:	bl	113cc <iswprint@plt>
   149bc:	cmp	r0, #0
   149c0:	movwne	r0, #1
   149c4:	and	r9, r9, r0
   149c8:	sub	r4, fp, #40	; 0x28
   149cc:	mov	r0, r4
   149d0:	bl	1136c <mbsinit@plt>
   149d4:	ldr	lr, [sp, #28]
   149d8:	cmp	r0, #0
   149dc:	ldr	ip, [fp, #-84]	; 0xffffffac
   149e0:	beq	14898 <__assert_fail@plt+0x32a4>
   149e4:	b	14d80 <__assert_fail@plt+0x378c>
   149e8:	ldr	r0, [sp, #32]
   149ec:	cmp	r0, #0
   149f0:	beq	14a88 <__assert_fail@plt+0x3494>
   149f4:	add	r0, r6, #2
   149f8:	cmp	r0, lr
   149fc:	bcs	14a88 <__assert_fail@plt+0x3494>
   14a00:	add	r1, ip, r6
   14a04:	ldrb	r1, [r1, #1]
   14a08:	cmp	r1, #63	; 0x3f
   14a0c:	bne	14a88 <__assert_fail@plt+0x3494>
   14a10:	ldrb	r9, [ip, r0]
   14a14:	sub	r2, r9, #33	; 0x21
   14a18:	cmp	r2, #29
   14a1c:	bhi	14a88 <__assert_fail@plt+0x3494>
   14a20:	mov	r3, #1
   14a24:	movw	r1, #20929	; 0x51c1
   14a28:	movt	r1, #14336	; 0x3800
   14a2c:	tst	r1, r3, lsl r2
   14a30:	beq	14a88 <__assert_fail@plt+0x3494>
   14a34:	ldr	r1, [fp, #-76]	; 0xffffffb4
   14a38:	tst	r1, #1
   14a3c:	bne	14e68 <__assert_fail@plt+0x3874>
   14a40:	cmp	r8, r4
   14a44:	movcc	r1, #63	; 0x3f
   14a48:	strbcc	r1, [r7, r8]
   14a4c:	add	r2, r8, #1
   14a50:	cmp	r2, r4
   14a54:	movcc	r1, #34	; 0x22
   14a58:	strbcc	r1, [r7, r2]
   14a5c:	add	r2, r8, #2
   14a60:	cmp	r2, r4
   14a64:	movcc	r1, #34	; 0x22
   14a68:	strbcc	r1, [r7, r2]
   14a6c:	add	r2, r8, #3
   14a70:	cmp	r2, r4
   14a74:	movcc	r1, #63	; 0x3f
   14a78:	strbcc	r1, [r7, r2]
   14a7c:	add	r8, r8, #4
   14a80:	mov	r6, r0
   14a84:	mov	r5, r9
   14a88:	mov	r9, #0
   14a8c:	b	144dc <__assert_fail@plt+0x2ee8>
   14a90:	add	r1, r2, r6
   14a94:	str	r1, [sp, #44]	; 0x2c
   14a98:	add	r1, r6, #1
   14a9c:	mov	r3, #0
   14aa0:	ldr	lr, [sp, #28]
   14aa4:	ldr	r6, [fp, #-60]	; 0xffffffc4
   14aa8:	tst	r0, #1
   14aac:	bne	14ba0 <__assert_fail@plt+0x35ac>
   14ab0:	ldr	r2, [fp, #-76]	; 0xffffffb4
   14ab4:	tst	r2, #1
   14ab8:	bne	14e68 <__assert_fail@plt+0x3874>
   14abc:	cmp	r6, #2
   14ac0:	ldr	r3, [fp, #-80]	; 0xffffffb0
   14ac4:	movwne	r3, #1
   14ac8:	ldr	r2, [fp, #-56]	; 0xffffffc8
   14acc:	orr	r3, r3, r2
   14ad0:	tst	r3, #1
   14ad4:	bne	14b10 <__assert_fail@plt+0x351c>
   14ad8:	cmp	r8, r4
   14adc:	movcc	r2, #39	; 0x27
   14ae0:	strbcc	r2, [r7, r8]
   14ae4:	add	r3, r8, #1
   14ae8:	cmp	r3, r4
   14aec:	movcc	r2, #36	; 0x24
   14af0:	strbcc	r2, [r7, r3]
   14af4:	add	r3, r8, #2
   14af8:	cmp	r3, r4
   14afc:	movcc	r2, #39	; 0x27
   14b00:	strbcc	r2, [r7, r3]
   14b04:	add	r8, r8, #3
   14b08:	mov	r2, #1
   14b0c:	str	r2, [fp, #-56]	; 0xffffffc8
   14b10:	cmp	r8, r4
   14b14:	movcc	r2, #92	; 0x5c
   14b18:	strbcc	r2, [r7, r8]
   14b1c:	add	r3, r8, #1
   14b20:	cmp	r3, r4
   14b24:	bcs	14b44 <__assert_fail@plt+0x3550>
   14b28:	and	r7, r5, #192	; 0xc0
   14b2c:	mov	r2, #48	; 0x30
   14b30:	orr	r7, r2, r7, lsr #6
   14b34:	ldr	r6, [sp, #80]	; 0x50
   14b38:	strb	r7, [r6, r3]
   14b3c:	ldr	r6, [fp, #-60]	; 0xffffffc4
   14b40:	ldr	r7, [sp, #80]	; 0x50
   14b44:	add	r3, r8, #2
   14b48:	cmp	r3, r4
   14b4c:	bcs	14b6c <__assert_fail@plt+0x3578>
   14b50:	lsr	r7, r5, #3
   14b54:	mov	r2, #6
   14b58:	bfi	r7, r2, #3, #29
   14b5c:	ldr	r6, [sp, #80]	; 0x50
   14b60:	strb	r7, [r6, r3]
   14b64:	ldr	r6, [fp, #-60]	; 0xffffffc4
   14b68:	ldr	r7, [sp, #80]	; 0x50
   14b6c:	mov	r2, #6
   14b70:	bfi	r5, r2, #3, #29
   14b74:	add	r8, r8, #3
   14b78:	mov	r3, #1
   14b7c:	b	14bc4 <__assert_fail@plt+0x35d0>
   14b80:	ldr	r7, [sp, #80]	; 0x50
   14b84:	cmp	r8, r4
   14b88:	strbcc	r5, [r7, r8]
   14b8c:	ldrb	r5, [ip, r1]
   14b90:	add	r1, r1, #1
   14b94:	add	r8, r8, #1
   14b98:	tst	r0, #1
   14b9c:	beq	14ab0 <__assert_fail@plt+0x34bc>
   14ba0:	ldr	r2, [fp, #-52]	; 0xffffffcc
   14ba4:	tst	r2, #1
   14ba8:	beq	14bbc <__assert_fail@plt+0x35c8>
   14bac:	cmp	r8, r4
   14bb0:	movcc	r2, #92	; 0x5c
   14bb4:	strbcc	r2, [r7, r8]
   14bb8:	add	r8, r8, #1
   14bbc:	mov	r2, #0
   14bc0:	str	r2, [fp, #-52]	; 0xffffffcc
   14bc4:	and	sl, r3, #1
   14bc8:	ldr	r2, [sp, #44]	; 0x2c
   14bcc:	cmp	r2, r1
   14bd0:	bls	14cdc <__assert_fail@plt+0x36e8>
   14bd4:	cmp	sl, #0
   14bd8:	movwne	sl, #1
   14bdc:	ldr	r2, [fp, #-56]	; 0xffffffc8
   14be0:	mvn	r7, r2
   14be4:	orr	r7, r7, sl
   14be8:	tst	r7, #1
   14bec:	bne	14b80 <__assert_fail@plt+0x358c>
   14bf0:	cmp	r8, r4
   14bf4:	ldrcc	r7, [sp, #80]	; 0x50
   14bf8:	movcc	r2, #39	; 0x27
   14bfc:	strbcc	r2, [r7, r8]
   14c00:	add	r7, r8, #1
   14c04:	cmp	r7, r4
   14c08:	ldrcc	r6, [sp, #80]	; 0x50
   14c0c:	movcc	r2, #39	; 0x27
   14c10:	strbcc	r2, [r6, r7]
   14c14:	ldrcc	r6, [fp, #-60]	; 0xffffffc4
   14c18:	add	r8, r8, #2
   14c1c:	mov	r2, #0
   14c20:	str	r2, [fp, #-56]	; 0xffffffc8
   14c24:	b	14b80 <__assert_fail@plt+0x358c>
   14c28:	cmp	r8, r4
   14c2c:	movcc	r0, #39	; 0x27
   14c30:	strbcc	r0, [r7, r8]
   14c34:	add	r0, r8, #1
   14c38:	cmp	r0, r4
   14c3c:	movcc	r1, #36	; 0x24
   14c40:	strbcc	r1, [r7, r0]
   14c44:	add	r0, r8, #2
   14c48:	cmp	r0, r4
   14c4c:	movcc	r1, #39	; 0x27
   14c50:	strbcc	r1, [r7, r0]
   14c54:	add	r0, r8, #3
   14c58:	mov	r2, #1
   14c5c:	cmp	r0, r4
   14c60:	movcc	r1, #92	; 0x5c
   14c64:	strbcc	r1, [r7, r0]
   14c68:	str	r2, [fp, #-56]	; 0xffffffc8
   14c6c:	add	r8, r0, #1
   14c70:	ldr	r1, [fp, #-60]	; 0xffffffc4
   14c74:	cmp	r1, #2
   14c78:	beq	14ccc <__assert_fail@plt+0x36d8>
   14c7c:	add	r1, r6, #1
   14c80:	mov	r9, #0
   14c84:	mov	sl, #1
   14c88:	mov	r5, #48	; 0x30
   14c8c:	cmp	r1, lr
   14c90:	bcs	144dc <__assert_fail@plt+0x2ee8>
   14c94:	ldrb	r1, [ip, r1]
   14c98:	sub	r1, r1, #48	; 0x30
   14c9c:	uxtb	r1, r1
   14ca0:	cmp	r1, #9
   14ca4:	bhi	144dc <__assert_fail@plt+0x2ee8>
   14ca8:	cmp	r8, r4
   14cac:	movcc	r1, #48	; 0x30
   14cb0:	strbcc	r1, [r7, r8]
   14cb4:	add	r1, r0, #2
   14cb8:	cmp	r1, r4
   14cbc:	movcc	r2, #48	; 0x30
   14cc0:	strbcc	r2, [r7, r1]
   14cc4:	add	r8, r0, #3
   14cc8:	b	144dc <__assert_fail@plt+0x2ee8>
   14ccc:	mov	r0, #48	; 0x30
   14cd0:	mov	sl, #1
   14cd4:	mov	r9, #0
   14cd8:	b	14788 <__assert_fail@plt+0x3194>
   14cdc:	sub	r6, r1, #1
   14ce0:	cmp	sl, #0
   14ce4:	movwne	sl, #1
   14ce8:	mov	r0, r5
   14cec:	cmp	sl, #0
   14cf0:	bne	14d30 <__assert_fail@plt+0x373c>
   14cf4:	ldr	r1, [fp, #-56]	; 0xffffffc8
   14cf8:	tst	r1, #1
   14cfc:	beq	14d30 <__assert_fail@plt+0x373c>
   14d00:	cmp	r8, r4
   14d04:	ldr	r5, [fp, #-48]	; 0xffffffd0
   14d08:	movcc	r1, #39	; 0x27
   14d0c:	strbcc	r1, [r7, r8]
   14d10:	add	r1, r8, #1
   14d14:	cmp	r1, r4
   14d18:	movcc	r2, #39	; 0x27
   14d1c:	strbcc	r2, [r7, r1]
   14d20:	add	r8, r8, #2
   14d24:	mov	r1, #0
   14d28:	str	r1, [fp, #-56]	; 0xffffffc8
   14d2c:	b	14814 <__assert_fail@plt+0x3220>
   14d30:	ldr	r5, [fp, #-48]	; 0xffffffd0
   14d34:	b	14814 <__assert_fail@plt+0x3220>
   14d38:	mov	r9, #0
   14d3c:	b	14d78 <__assert_fail@plt+0x3784>
   14d40:	mov	r9, #0
   14d44:	cmp	r7, lr
   14d48:	bcs	14d78 <__assert_fail@plt+0x3784>
   14d4c:	ldr	ip, [fp, #-84]	; 0xffffffac
   14d50:	ldr	r7, [sp, #44]	; 0x2c
   14d54:	ldr	r0, [sp, #20]
   14d58:	ldrb	r0, [r0, r7]
   14d5c:	cmp	r0, #0
   14d60:	beq	14d80 <__assert_fail@plt+0x378c>
   14d64:	add	r7, r7, #1
   14d68:	add	r0, r6, r7
   14d6c:	cmp	r0, lr
   14d70:	bcc	14d54 <__assert_fail@plt+0x3760>
   14d74:	b	14d80 <__assert_fail@plt+0x378c>
   14d78:	ldr	ip, [fp, #-84]	; 0xffffffac
   14d7c:	ldr	r7, [sp, #44]	; 0x2c
   14d80:	mov	r1, r7
   14d84:	ldr	r7, [sp, #80]	; 0x50
   14d88:	b	146b0 <__assert_fail@plt+0x30bc>
   14d8c:	ldr	r1, [fp, #-60]	; 0xffffffc4
   14d90:	eor	r0, r1, #2
   14d94:	orr	r0, r0, r8
   14d98:	clz	r0, r0
   14d9c:	lsr	r0, r0, #5
   14da0:	ldr	r2, [fp, #-76]	; 0xffffffb4
   14da4:	tst	r2, r0
   14da8:	bne	14e68 <__assert_fail@plt+0x3874>
   14dac:	cmp	r1, #2
   14db0:	ldr	r0, [fp, #-80]	; 0xffffffb0
   14db4:	movwne	r0, #1
   14db8:	orr	r0, r2, r0
   14dbc:	tst	r0, #1
   14dc0:	ldreq	r0, [sp, #56]	; 0x38
   14dc4:	eoreq	r0, r0, #1
   14dc8:	tsteq	r0, #1
   14dcc:	bne	14e00 <__assert_fail@plt+0x380c>
   14dd0:	mov	r9, lr
   14dd4:	tst	r5, #1
   14dd8:	bne	14ed0 <__assert_fail@plt+0x38dc>
   14ddc:	ldr	r0, [sp, #72]	; 0x48
   14de0:	cmp	r0, #0
   14de4:	beq	14e00 <__assert_fail@plt+0x380c>
   14de8:	mov	r5, #0
   14dec:	cmp	r4, #0
   14df0:	ldr	r0, [sp, #84]	; 0x54
   14df4:	mov	sl, r2
   14df8:	ldr	r6, [sp, #72]	; 0x48
   14dfc:	beq	13f98 <__assert_fail@plt+0x29a4>
   14e00:	ldr	r1, [sp, #92]	; 0x5c
   14e04:	clz	r0, r1
   14e08:	lsr	r0, r0, #5
   14e0c:	orr	r0, r0, r2
   14e10:	tst	r0, #1
   14e14:	bne	14e40 <__assert_fail@plt+0x384c>
   14e18:	ldrb	r0, [r1]
   14e1c:	cmp	r0, #0
   14e20:	beq	14e40 <__assert_fail@plt+0x384c>
   14e24:	add	r1, r1, #1
   14e28:	cmp	r8, r4
   14e2c:	strbcc	r0, [r7, r8]
   14e30:	add	r8, r8, #1
   14e34:	ldrb	r0, [r1], #1
   14e38:	cmp	r0, #0
   14e3c:	bne	14e28 <__assert_fail@plt+0x3834>
   14e40:	cmp	r8, r4
   14e44:	movcc	r0, #0
   14e48:	strbcc	r0, [r7, r8]
   14e4c:	b	14ec4 <__assert_fail@plt+0x38d0>
   14e50:	ldr	ip, [fp, #-84]	; 0xffffffac
   14e54:	mov	lr, r4
   14e58:	mov	r4, r5
   14e5c:	b	14e68 <__assert_fail@plt+0x3874>
   14e60:	ldr	r7, [sp, #80]	; 0x50
   14e64:	ldr	ip, [fp, #-84]	; 0xffffffac
   14e68:	mov	r0, #0
   14e6c:	ldr	r1, [fp, #12]
   14e70:	bic	r1, r1, #2
   14e74:	ldr	r2, [sp, #84]	; 0x54
   14e78:	tst	r2, #1
   14e7c:	ldr	r3, [fp, #-60]	; 0xffffffc4
   14e80:	mov	r2, r3
   14e84:	movwne	r2, #4
   14e88:	cmp	r3, #2
   14e8c:	movne	r2, r3
   14e90:	str	r2, [sp]
   14e94:	str	r1, [sp, #4]
   14e98:	str	r0, [sp, #8]
   14e9c:	ldr	r0, [sp, #68]	; 0x44
   14ea0:	str	r0, [sp, #12]
   14ea4:	ldr	r0, [sp, #76]	; 0x4c
   14ea8:	str	r0, [sp, #16]
   14eac:	mov	r0, r7
   14eb0:	mov	r1, r4
   14eb4:	mov	r2, ip
   14eb8:	mov	r3, lr
   14ebc:	bl	13f10 <__assert_fail@plt+0x291c>
   14ec0:	mov	r8, r0
   14ec4:	mov	r0, r8
   14ec8:	sub	sp, fp, #28
   14ecc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14ed0:	mov	r0, #5
   14ed4:	str	r0, [sp]
   14ed8:	ldr	r0, [fp, #12]
   14edc:	str	r0, [sp, #4]
   14ee0:	ldr	r0, [fp, #16]
   14ee4:	str	r0, [sp, #8]
   14ee8:	ldr	r0, [sp, #68]	; 0x44
   14eec:	str	r0, [sp, #12]
   14ef0:	ldr	r0, [sp, #76]	; 0x4c
   14ef4:	str	r0, [sp, #16]
   14ef8:	mov	r0, r7
   14efc:	ldr	r1, [sp, #72]	; 0x48
   14f00:	ldr	r2, [fp, #-84]	; 0xffffffac
   14f04:	mov	r3, r9
   14f08:	b	14ebc <__assert_fail@plt+0x38c8>
   14f0c:	bl	115d0 <abort@plt>
   14f10:	mov	r3, r2
   14f14:	mov	r2, #0
   14f18:	b	14f1c <__assert_fail@plt+0x3928>
   14f1c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   14f20:	add	fp, sp, #28
   14f24:	sub	sp, sp, #36	; 0x24
   14f28:	mov	r4, r2
   14f2c:	str	r2, [sp, #24]
   14f30:	mov	r5, r1
   14f34:	mov	r6, r0
   14f38:	str	r0, [sp, #20]
   14f3c:	movw	r8, #37360	; 0x91f0
   14f40:	movt	r8, #2
   14f44:	cmp	r3, #0
   14f48:	movne	r8, r3
   14f4c:	bl	114ec <__errno_location@plt>
   14f50:	str	r0, [sp, #28]
   14f54:	ldm	r8, {r3, r9}
   14f58:	ldr	r1, [r8, #40]	; 0x28
   14f5c:	ldr	r2, [r8, #44]	; 0x2c
   14f60:	ldr	r7, [r0]
   14f64:	str	r7, [sp, #32]
   14f68:	add	sl, r8, #8
   14f6c:	cmp	r4, #0
   14f70:	orreq	r9, r9, #1
   14f74:	stm	sp, {r3, r9, sl}
   14f78:	str	r1, [sp, #12]
   14f7c:	str	r2, [sp, #16]
   14f80:	mov	r0, #0
   14f84:	mov	r1, #0
   14f88:	mov	r2, r6
   14f8c:	mov	r3, r5
   14f90:	mov	r7, r5
   14f94:	bl	13f10 <__assert_fail@plt+0x291c>
   14f98:	mov	r5, r0
   14f9c:	add	r4, r0, #1
   14fa0:	mov	r0, r4
   14fa4:	bl	161dc <__assert_fail@plt+0x4be8>
   14fa8:	mov	r6, r0
   14fac:	ldr	r0, [r8]
   14fb0:	ldr	r1, [r8, #40]	; 0x28
   14fb4:	ldr	r2, [r8, #44]	; 0x2c
   14fb8:	stm	sp, {r0, r9, sl}
   14fbc:	str	r1, [sp, #12]
   14fc0:	str	r2, [sp, #16]
   14fc4:	mov	r0, r6
   14fc8:	mov	r1, r4
   14fcc:	ldr	r2, [sp, #20]
   14fd0:	mov	r3, r7
   14fd4:	bl	13f10 <__assert_fail@plt+0x291c>
   14fd8:	ldr	r0, [sp, #24]
   14fdc:	ldr	r1, [sp, #32]
   14fe0:	ldr	r2, [sp, #28]
   14fe4:	str	r1, [r2]
   14fe8:	cmp	r0, #0
   14fec:	strne	r5, [r0]
   14ff0:	mov	r0, r6
   14ff4:	sub	sp, fp, #28
   14ff8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14ffc:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   15000:	add	fp, sp, #24
   15004:	movw	r8, #37168	; 0x9130
   15008:	movt	r8, #2
   1500c:	ldr	r4, [r8]
   15010:	movw	r5, #37172	; 0x9134
   15014:	movt	r5, #2
   15018:	ldr	r0, [r5]
   1501c:	cmp	r0, #2
   15020:	blt	1504c <__assert_fail@plt+0x3a58>
   15024:	add	r7, r4, #12
   15028:	mov	r6, #0
   1502c:	ldr	r0, [r7, r6, lsl #3]
   15030:	bl	13990 <__assert_fail@plt+0x239c>
   15034:	add	r0, r6, #1
   15038:	ldr	r1, [r5]
   1503c:	add	r2, r6, #2
   15040:	cmp	r2, r1
   15044:	mov	r6, r0
   15048:	blt	1502c <__assert_fail@plt+0x3a38>
   1504c:	ldr	r0, [r4, #4]
   15050:	movw	r7, #37408	; 0x9220
   15054:	movt	r7, #2
   15058:	cmp	r0, r7
   1505c:	beq	15074 <__assert_fail@plt+0x3a80>
   15060:	bl	13990 <__assert_fail@plt+0x239c>
   15064:	movw	r0, #37176	; 0x9138
   15068:	movt	r0, #2
   1506c:	mov	r6, #256	; 0x100
   15070:	strd	r6, [r0]
   15074:	movw	r6, #37176	; 0x9138
   15078:	movt	r6, #2
   1507c:	cmp	r4, r6
   15080:	beq	15090 <__assert_fail@plt+0x3a9c>
   15084:	mov	r0, r4
   15088:	bl	13990 <__assert_fail@plt+0x239c>
   1508c:	str	r6, [r8]
   15090:	mov	r0, #1
   15094:	str	r0, [r5]
   15098:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   1509c:	movw	r3, #37360	; 0x91f0
   150a0:	movt	r3, #2
   150a4:	mvn	r2, #0
   150a8:	b	150ac <__assert_fail@plt+0x3ab8>
   150ac:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   150b0:	add	fp, sp, #28
   150b4:	sub	sp, sp, #44	; 0x2c
   150b8:	mov	r7, r3
   150bc:	str	r2, [sp, #36]	; 0x24
   150c0:	str	r1, [sp, #32]
   150c4:	mov	r5, r0
   150c8:	bl	114ec <__errno_location@plt>
   150cc:	cmp	r5, #0
   150d0:	blt	1523c <__assert_fail@plt+0x3c48>
   150d4:	cmn	r5, #-2147483647	; 0x80000001
   150d8:	beq	1523c <__assert_fail@plt+0x3c48>
   150dc:	movw	r4, #37168	; 0x9130
   150e0:	movt	r4, #2
   150e4:	ldr	r6, [r4]
   150e8:	str	r0, [sp, #28]
   150ec:	ldr	r0, [r0]
   150f0:	str	r0, [sp, #24]
   150f4:	movw	r8, #37172	; 0x9134
   150f8:	movt	r8, #2
   150fc:	ldr	r1, [r8]
   15100:	cmp	r1, r5
   15104:	ble	15110 <__assert_fail@plt+0x3b1c>
   15108:	mov	sl, r6
   1510c:	b	15178 <__assert_fail@plt+0x3b84>
   15110:	str	r1, [fp, #-32]	; 0xffffffe0
   15114:	mov	r0, #8
   15118:	str	r0, [sp]
   1511c:	movw	r9, #37176	; 0x9138
   15120:	movt	r9, #2
   15124:	subs	r0, r6, r9
   15128:	movne	r0, r6
   1512c:	add	r2, r5, #1
   15130:	sub	r2, r2, r1
   15134:	sub	r1, fp, #32
   15138:	mvn	r3, #-2147483648	; 0x80000000
   1513c:	bl	162c4 <__assert_fail@plt+0x4cd0>
   15140:	mov	sl, r0
   15144:	str	r0, [r4]
   15148:	cmp	r6, r9
   1514c:	ldrdeq	r0, [r9]
   15150:	stmeq	sl, {r0, r1}
   15154:	ldr	r1, [r8]
   15158:	add	r0, sl, r1, lsl #3
   1515c:	ldr	r2, [fp, #-32]	; 0xffffffe0
   15160:	sub	r1, r2, r1
   15164:	lsl	r2, r1, #3
   15168:	mov	r1, #0
   1516c:	bl	11510 <memset@plt>
   15170:	ldr	r0, [fp, #-32]	; 0xffffffe0
   15174:	str	r0, [r8]
   15178:	mov	r9, sl
   1517c:	ldr	r6, [r9, r5, lsl #3]!
   15180:	ldr	r4, [r9, #4]!
   15184:	ldm	r7, {r0, r1}
   15188:	ldr	r2, [r7, #40]	; 0x28
   1518c:	ldr	r3, [r7, #44]	; 0x2c
   15190:	orr	r8, r1, #1
   15194:	add	r1, r7, #8
   15198:	stm	sp, {r0, r8}
   1519c:	str	r1, [sp, #20]
   151a0:	add	r0, sp, #8
   151a4:	stm	r0, {r1, r2, r3}
   151a8:	mov	r0, r4
   151ac:	mov	r1, r6
   151b0:	ldr	r2, [sp, #32]
   151b4:	ldr	r3, [sp, #36]	; 0x24
   151b8:	bl	13f10 <__assert_fail@plt+0x291c>
   151bc:	cmp	r6, r0
   151c0:	bhi	15224 <__assert_fail@plt+0x3c30>
   151c4:	add	r6, r0, #1
   151c8:	str	r6, [sl, r5, lsl #3]
   151cc:	movw	r0, #37408	; 0x9220
   151d0:	movt	r0, #2
   151d4:	cmp	r4, r0
   151d8:	beq	151e4 <__assert_fail@plt+0x3bf0>
   151dc:	mov	r0, r4
   151e0:	bl	13990 <__assert_fail@plt+0x239c>
   151e4:	mov	r0, r6
   151e8:	bl	161dc <__assert_fail@plt+0x4be8>
   151ec:	mov	r4, r0
   151f0:	str	r0, [r9]
   151f4:	ldr	r0, [r7]
   151f8:	ldr	r1, [r7, #40]	; 0x28
   151fc:	ldr	r2, [r7, #44]	; 0x2c
   15200:	stm	sp, {r0, r8}
   15204:	ldr	r0, [sp, #20]
   15208:	add	r3, sp, #8
   1520c:	stm	r3, {r0, r1, r2}
   15210:	mov	r0, r4
   15214:	mov	r1, r6
   15218:	ldr	r2, [sp, #32]
   1521c:	ldr	r3, [sp, #36]	; 0x24
   15220:	bl	13f10 <__assert_fail@plt+0x291c>
   15224:	ldr	r0, [sp, #28]
   15228:	ldr	r1, [sp, #24]
   1522c:	str	r1, [r0]
   15230:	mov	r0, r4
   15234:	sub	sp, fp, #28
   15238:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1523c:	bl	115d0 <abort@plt>
   15240:	movw	r3, #37360	; 0x91f0
   15244:	movt	r3, #2
   15248:	b	150ac <__assert_fail@plt+0x3ab8>
   1524c:	mov	r1, r0
   15250:	mov	r0, #0
   15254:	b	1509c <__assert_fail@plt+0x3aa8>
   15258:	mov	r2, r1
   1525c:	mov	r1, r0
   15260:	mov	r0, #0
   15264:	b	15240 <__assert_fail@plt+0x3c4c>
   15268:	push	{r4, r5, r6, sl, fp, lr}
   1526c:	add	fp, sp, #16
   15270:	sub	sp, sp, #48	; 0x30
   15274:	mov	r4, r2
   15278:	mov	r5, r0
   1527c:	mov	r6, sp
   15280:	mov	r0, r6
   15284:	bl	152a4 <__assert_fail@plt+0x3cb0>
   15288:	mov	r0, r5
   1528c:	mov	r1, r4
   15290:	mvn	r2, #0
   15294:	mov	r3, r6
   15298:	bl	150ac <__assert_fail@plt+0x3ab8>
   1529c:	sub	sp, fp, #16
   152a0:	pop	{r4, r5, r6, sl, fp, pc}
   152a4:	vmov.i32	q8, #0	; 0x00000000
   152a8:	mov	r2, #32
   152ac:	mov	r3, r0
   152b0:	vst1.32	{d16-d17}, [r3], r2
   152b4:	vst1.32	{d16-d17}, [r3]
   152b8:	add	r2, r0, #16
   152bc:	vst1.32	{d16-d17}, [r2]
   152c0:	cmp	r1, #10
   152c4:	strne	r1, [r0]
   152c8:	bxne	lr
   152cc:	push	{fp, lr}
   152d0:	mov	fp, sp
   152d4:	bl	115d0 <abort@plt>
   152d8:	push	{r4, r5, r6, r7, fp, lr}
   152dc:	add	fp, sp, #16
   152e0:	sub	sp, sp, #48	; 0x30
   152e4:	mov	r4, r3
   152e8:	mov	r5, r2
   152ec:	mov	r6, r0
   152f0:	mov	r7, sp
   152f4:	mov	r0, r7
   152f8:	bl	152a4 <__assert_fail@plt+0x3cb0>
   152fc:	mov	r0, r6
   15300:	mov	r1, r5
   15304:	mov	r2, r4
   15308:	mov	r3, r7
   1530c:	bl	150ac <__assert_fail@plt+0x3ab8>
   15310:	sub	sp, fp, #16
   15314:	pop	{r4, r5, r6, r7, fp, pc}
   15318:	mov	r2, r1
   1531c:	mov	r1, r0
   15320:	mov	r0, #0
   15324:	b	15268 <__assert_fail@plt+0x3c74>
   15328:	mov	r3, r2
   1532c:	mov	r2, r1
   15330:	mov	r1, r0
   15334:	mov	r0, #0
   15338:	b	152d8 <__assert_fail@plt+0x3ce4>
   1533c:	push	{r4, r5, r6, sl, fp, lr}
   15340:	add	fp, sp, #16
   15344:	sub	sp, sp, #48	; 0x30
   15348:	mov	r4, r1
   1534c:	mov	r5, r0
   15350:	mov	r0, #32
   15354:	movw	r1, #37360	; 0x91f0
   15358:	movt	r1, #2
   1535c:	add	r3, r1, #16
   15360:	vld1.64	{d16-d17}, [r1], r0
   15364:	mov	r6, sp
   15368:	vld1.64	{d18-d19}, [r3]
   1536c:	add	r3, r6, #16
   15370:	vld1.64	{d20-d21}, [r1]
   15374:	vst1.64	{d18-d19}, [r3]
   15378:	mov	r1, r6
   1537c:	vst1.64	{d16-d17}, [r1], r0
   15380:	vst1.64	{d20-d21}, [r1]
   15384:	mov	r0, r6
   15388:	mov	r1, r2
   1538c:	mov	r2, #1
   15390:	bl	13e04 <__assert_fail@plt+0x2810>
   15394:	mov	r0, #0
   15398:	mov	r1, r5
   1539c:	mov	r2, r4
   153a0:	mov	r3, r6
   153a4:	bl	150ac <__assert_fail@plt+0x3ab8>
   153a8:	sub	sp, fp, #16
   153ac:	pop	{r4, r5, r6, sl, fp, pc}
   153b0:	mov	r2, r1
   153b4:	mvn	r1, #0
   153b8:	b	1533c <__assert_fail@plt+0x3d48>
   153bc:	mov	r1, #58	; 0x3a
   153c0:	b	153b0 <__assert_fail@plt+0x3dbc>
   153c4:	mov	r2, #58	; 0x3a
   153c8:	b	1533c <__assert_fail@plt+0x3d48>
   153cc:	push	{r4, r5, r6, sl, fp, lr}
   153d0:	add	fp, sp, #16
   153d4:	sub	sp, sp, #48	; 0x30
   153d8:	mov	r4, r2
   153dc:	mov	r5, r0
   153e0:	mov	r6, sp
   153e4:	mov	r0, r6
   153e8:	bl	152a4 <__assert_fail@plt+0x3cb0>
   153ec:	mov	r0, r6
   153f0:	mov	r1, #58	; 0x3a
   153f4:	mov	r2, #1
   153f8:	bl	13e04 <__assert_fail@plt+0x2810>
   153fc:	mov	r0, r5
   15400:	mov	r1, r4
   15404:	mvn	r2, #0
   15408:	mov	r3, r6
   1540c:	bl	150ac <__assert_fail@plt+0x3ab8>
   15410:	sub	sp, fp, #16
   15414:	pop	{r4, r5, r6, sl, fp, pc}
   15418:	push	{fp, lr}
   1541c:	mov	fp, sp
   15420:	sub	sp, sp, #8
   15424:	mvn	ip, #0
   15428:	str	ip, [sp]
   1542c:	bl	15438 <__assert_fail@plt+0x3e44>
   15430:	mov	sp, fp
   15434:	pop	{fp, pc}
   15438:	push	{r4, r5, r6, r7, fp, lr}
   1543c:	add	fp, sp, #16
   15440:	sub	sp, sp, #48	; 0x30
   15444:	mov	r7, r3
   15448:	mov	r5, r0
   1544c:	mov	r0, #32
   15450:	movw	r3, #37360	; 0x91f0
   15454:	movt	r3, #2
   15458:	add	r4, r3, #16
   1545c:	vld1.64	{d16-d17}, [r3], r0
   15460:	mov	r6, sp
   15464:	vld1.64	{d18-d19}, [r4]
   15468:	add	r4, r6, #16
   1546c:	vld1.64	{d20-d21}, [r3]
   15470:	vst1.64	{d18-d19}, [r4]
   15474:	mov	r3, r6
   15478:	vst1.64	{d16-d17}, [r3], r0
   1547c:	vst1.64	{d20-d21}, [r3]
   15480:	mov	r0, r6
   15484:	bl	13e5c <__assert_fail@plt+0x2868>
   15488:	ldr	r2, [fp, #8]
   1548c:	mov	r0, r5
   15490:	mov	r1, r7
   15494:	mov	r3, r6
   15498:	bl	150ac <__assert_fail@plt+0x3ab8>
   1549c:	sub	sp, fp, #16
   154a0:	pop	{r4, r5, r6, r7, fp, pc}
   154a4:	mov	r3, r2
   154a8:	mov	r2, r1
   154ac:	mov	r1, r0
   154b0:	mov	r0, #0
   154b4:	b	15418 <__assert_fail@plt+0x3e24>
   154b8:	push	{fp, lr}
   154bc:	mov	fp, sp
   154c0:	sub	sp, sp, #8
   154c4:	mov	ip, r2
   154c8:	mov	r2, r1
   154cc:	mov	r1, r0
   154d0:	str	r3, [sp]
   154d4:	mov	r0, #0
   154d8:	mov	r3, ip
   154dc:	bl	15438 <__assert_fail@plt+0x3e44>
   154e0:	mov	sp, fp
   154e4:	pop	{fp, pc}
   154e8:	movw	r3, #37184	; 0x9140
   154ec:	movt	r3, #2
   154f0:	b	150ac <__assert_fail@plt+0x3ab8>
   154f4:	mov	r2, r1
   154f8:	mov	r1, r0
   154fc:	mov	r0, #0
   15500:	b	154e8 <__assert_fail@plt+0x3ef4>
   15504:	mvn	r2, #0
   15508:	b	154e8 <__assert_fail@plt+0x3ef4>
   1550c:	mov	r1, r0
   15510:	mov	r0, #0
   15514:	b	15504 <__assert_fail@plt+0x3f10>
   15518:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   1551c:	add	fp, sp, #24
   15520:	sub	sp, sp, #16
   15524:	mov	r4, r1
   15528:	mov	r5, r0
   1552c:	mov	r7, #0
   15530:	mov	r0, #0
   15534:	mov	r1, r5
   15538:	mov	r2, #5
   1553c:	bl	11384 <dcgettext@plt>
   15540:	cmp	r0, r5
   15544:	beq	15550 <__assert_fail@plt+0x3f5c>
   15548:	sub	sp, fp, #24
   1554c:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   15550:	bl	16ae4 <__assert_fail@plt+0x54f0>
   15554:	mov	r6, r0
   15558:	mov	r8, #56	; 0x38
   1555c:	mov	r0, #45	; 0x2d
   15560:	stm	sp, {r0, r8}
   15564:	str	r7, [sp, #8]
   15568:	str	r7, [sp, #12]
   1556c:	mov	r0, r6
   15570:	mov	r1, #85	; 0x55
   15574:	mov	r2, #84	; 0x54
   15578:	mov	r3, #70	; 0x46
   1557c:	bl	15614 <__assert_fail@plt+0x4020>
   15580:	cmp	r0, #0
   15584:	beq	155a0 <__assert_fail@plt+0x3fac>
   15588:	ldrb	r1, [r5]
   1558c:	movw	r2, #32324	; 0x7e44
   15590:	movt	r2, #1
   15594:	movw	r0, #32328	; 0x7e48
   15598:	movt	r0, #1
   1559c:	b	155e4 <__assert_fail@plt+0x3ff0>
   155a0:	mov	r0, #48	; 0x30
   155a4:	mov	r1, #51	; 0x33
   155a8:	str	r8, [sp]
   155ac:	stmib	sp, {r0, r1}
   155b0:	str	r0, [sp, #12]
   155b4:	mov	r0, r6
   155b8:	mov	r1, #71	; 0x47
   155bc:	mov	r2, #66	; 0x42
   155c0:	mov	r3, #49	; 0x31
   155c4:	bl	15614 <__assert_fail@plt+0x4020>
   155c8:	cmp	r0, #0
   155cc:	beq	155f4 <__assert_fail@plt+0x4000>
   155d0:	ldrb	r1, [r5]
   155d4:	movw	r2, #32332	; 0x7e4c
   155d8:	movt	r2, #1
   155dc:	movw	r0, #32336	; 0x7e50
   155e0:	movt	r0, #1
   155e4:	cmp	r1, #96	; 0x60
   155e8:	moveq	r0, r2
   155ec:	sub	sp, fp, #24
   155f0:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   155f4:	movw	r1, #31303	; 0x7a47
   155f8:	movt	r1, #1
   155fc:	movw	r0, #32322	; 0x7e42
   15600:	movt	r0, #1
   15604:	cmp	r4, #9
   15608:	moveq	r0, r1
   1560c:	sub	sp, fp, #24
   15610:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   15614:	push	{r4, r5, r6, r7, fp, lr}
   15618:	add	fp, sp, #16
   1561c:	sub	sp, sp, #16
   15620:	mov	r4, r3
   15624:	mov	r5, r2
   15628:	mov	r7, r1
   1562c:	mov	r6, r0
   15630:	mov	r0, r1
   15634:	bl	16938 <__assert_fail@plt+0x5344>
   15638:	ldrb	r1, [r6]
   1563c:	cmp	r0, #0
   15640:	andne	r1, r1, #223	; 0xdf
   15644:	mov	r0, #0
   15648:	cmp	r1, r7
   1564c:	bne	1568c <__assert_fail@plt+0x4098>
   15650:	cmp	r7, #0
   15654:	moveq	r0, #1
   15658:	subeq	sp, fp, #16
   1565c:	popeq	{r4, r5, r6, r7, fp, pc}
   15660:	ldr	r0, [fp, #20]
   15664:	ldr	r1, [fp, #16]
   15668:	ldr	r2, [fp, #12]
   1566c:	ldr	r3, [fp, #8]
   15670:	str	r2, [sp]
   15674:	str	r1, [sp, #4]
   15678:	str	r0, [sp, #8]
   1567c:	mov	r0, r6
   15680:	mov	r1, r5
   15684:	mov	r2, r4
   15688:	bl	15694 <__assert_fail@plt+0x40a0>
   1568c:	sub	sp, fp, #16
   15690:	pop	{r4, r5, r6, r7, fp, pc}
   15694:	push	{r4, r5, r6, r7, fp, lr}
   15698:	add	fp, sp, #16
   1569c:	sub	sp, sp, #8
   156a0:	mov	r4, r3
   156a4:	mov	r5, r2
   156a8:	mov	r7, r1
   156ac:	mov	r6, r0
   156b0:	mov	r0, r1
   156b4:	bl	16938 <__assert_fail@plt+0x5344>
   156b8:	ldrb	r1, [r6, #1]
   156bc:	cmp	r0, #0
   156c0:	andne	r1, r1, #223	; 0xdf
   156c4:	mov	r0, #0
   156c8:	cmp	r1, r7
   156cc:	bne	15704 <__assert_fail@plt+0x4110>
   156d0:	cmp	r7, #0
   156d4:	moveq	r0, #1
   156d8:	subeq	sp, fp, #16
   156dc:	popeq	{r4, r5, r6, r7, fp, pc}
   156e0:	ldr	r0, [fp, #16]
   156e4:	ldr	r1, [fp, #12]
   156e8:	ldr	r3, [fp, #8]
   156ec:	str	r1, [sp]
   156f0:	str	r0, [sp, #4]
   156f4:	mov	r0, r6
   156f8:	mov	r1, r5
   156fc:	mov	r2, r4
   15700:	bl	1570c <__assert_fail@plt+0x4118>
   15704:	sub	sp, fp, #16
   15708:	pop	{r4, r5, r6, r7, fp, pc}
   1570c:	push	{r4, r5, r6, r7, fp, lr}
   15710:	add	fp, sp, #16
   15714:	sub	sp, sp, #8
   15718:	mov	r4, r3
   1571c:	mov	r5, r2
   15720:	mov	r7, r1
   15724:	mov	r6, r0
   15728:	mov	r0, r1
   1572c:	bl	16938 <__assert_fail@plt+0x5344>
   15730:	ldrb	r1, [r6, #2]
   15734:	cmp	r0, #0
   15738:	andne	r1, r1, #223	; 0xdf
   1573c:	mov	r0, #0
   15740:	cmp	r1, r7
   15744:	bne	15774 <__assert_fail@plt+0x4180>
   15748:	cmp	r7, #0
   1574c:	moveq	r0, #1
   15750:	subeq	sp, fp, #16
   15754:	popeq	{r4, r5, r6, r7, fp, pc}
   15758:	ldr	r0, [fp, #12]
   1575c:	ldr	r3, [fp, #8]
   15760:	str	r0, [sp]
   15764:	mov	r0, r6
   15768:	mov	r1, r5
   1576c:	mov	r2, r4
   15770:	bl	1577c <__assert_fail@plt+0x4188>
   15774:	sub	sp, fp, #16
   15778:	pop	{r4, r5, r6, r7, fp, pc}
   1577c:	push	{r4, r5, r6, r7, fp, lr}
   15780:	add	fp, sp, #16
   15784:	mov	r4, r3
   15788:	mov	r5, r2
   1578c:	mov	r7, r1
   15790:	mov	r6, r0
   15794:	mov	r0, r1
   15798:	bl	16938 <__assert_fail@plt+0x5344>
   1579c:	ldrb	r1, [r6, #3]
   157a0:	ldr	r3, [fp, #8]
   157a4:	cmp	r0, #0
   157a8:	andne	r1, r1, #223	; 0xdf
   157ac:	mov	r0, #0
   157b0:	cmp	r1, r7
   157b4:	popne	{r4, r5, r6, r7, fp, pc}
   157b8:	cmp	r7, #0
   157bc:	beq	157d4 <__assert_fail@plt+0x41e0>
   157c0:	mov	r0, r6
   157c4:	mov	r1, r5
   157c8:	mov	r2, r4
   157cc:	pop	{r4, r5, r6, r7, fp, lr}
   157d0:	b	157dc <__assert_fail@plt+0x41e8>
   157d4:	mov	r0, #1
   157d8:	pop	{r4, r5, r6, r7, fp, pc}
   157dc:	push	{r4, r5, r6, r7, fp, lr}
   157e0:	add	fp, sp, #16
   157e4:	mov	r4, r3
   157e8:	mov	r5, r2
   157ec:	mov	r7, r1
   157f0:	mov	r6, r0
   157f4:	mov	r0, r1
   157f8:	bl	16938 <__assert_fail@plt+0x5344>
   157fc:	ldrb	r1, [r6, #4]
   15800:	cmp	r0, #0
   15804:	andne	r1, r1, #223	; 0xdf
   15808:	mov	r0, #0
   1580c:	cmp	r1, r7
   15810:	popne	{r4, r5, r6, r7, fp, pc}
   15814:	cmp	r7, #0
   15818:	beq	15830 <__assert_fail@plt+0x423c>
   1581c:	mov	r0, r6
   15820:	mov	r1, r5
   15824:	mov	r2, r4
   15828:	pop	{r4, r5, r6, r7, fp, lr}
   1582c:	b	15838 <__assert_fail@plt+0x4244>
   15830:	mov	r0, #1
   15834:	pop	{r4, r5, r6, r7, fp, pc}
   15838:	push	{r4, r5, r6, sl, fp, lr}
   1583c:	add	fp, sp, #16
   15840:	mov	r4, r2
   15844:	mov	r6, r1
   15848:	mov	r5, r0
   1584c:	mov	r0, r1
   15850:	bl	16938 <__assert_fail@plt+0x5344>
   15854:	ldrb	r1, [r5, #5]
   15858:	cmp	r0, #0
   1585c:	andne	r1, r1, #223	; 0xdf
   15860:	mov	r0, #0
   15864:	cmp	r1, r6
   15868:	popne	{r4, r5, r6, sl, fp, pc}
   1586c:	cmp	r6, #0
   15870:	beq	15884 <__assert_fail@plt+0x4290>
   15874:	mov	r0, r5
   15878:	mov	r1, r4
   1587c:	pop	{r4, r5, r6, sl, fp, lr}
   15880:	b	1588c <__assert_fail@plt+0x4298>
   15884:	mov	r0, #1
   15888:	pop	{r4, r5, r6, sl, fp, pc}
   1588c:	push	{r4, r5, fp, lr}
   15890:	add	fp, sp, #8
   15894:	mov	r5, r1
   15898:	mov	r4, r0
   1589c:	mov	r0, r1
   158a0:	bl	16938 <__assert_fail@plt+0x5344>
   158a4:	ldrb	r1, [r4, #6]
   158a8:	cmp	r0, #0
   158ac:	andne	r1, r1, #223	; 0xdf
   158b0:	mov	r0, #0
   158b4:	cmp	r1, r5
   158b8:	popne	{r4, r5, fp, pc}
   158bc:	cmp	r5, #0
   158c0:	beq	158d0 <__assert_fail@plt+0x42dc>
   158c4:	mov	r0, r4
   158c8:	pop	{r4, r5, fp, lr}
   158cc:	b	158d8 <__assert_fail@plt+0x42e4>
   158d0:	mov	r0, #1
   158d4:	pop	{r4, r5, fp, pc}
   158d8:	push	{r4, sl, fp, lr}
   158dc:	add	fp, sp, #8
   158e0:	mov	r4, r0
   158e4:	mov	r0, #0
   158e8:	bl	16938 <__assert_fail@plt+0x5344>
   158ec:	ldrb	r1, [r4, #7]
   158f0:	cmp	r0, #0
   158f4:	beq	1590c <__assert_fail@plt+0x4318>
   158f8:	tst	r1, #223	; 0xdf
   158fc:	moveq	r0, #1
   15900:	popeq	{r4, sl, fp, pc}
   15904:	mov	r0, #0
   15908:	pop	{r4, sl, fp, pc}
   1590c:	cmp	r1, #0
   15910:	moveq	r0, #1
   15914:	popeq	{r4, sl, fp, pc}
   15918:	mov	r0, #0
   1591c:	pop	{r4, sl, fp, pc}
   15920:	push	{r4, r5, r6, sl, fp, lr}
   15924:	add	fp, sp, #16
   15928:	sub	sp, sp, #8
   1592c:	mov	r4, r0
   15930:	mov	r0, #0
   15934:	str	r0, [r4]
   15938:	str	r0, [r4, #4]
   1593c:	str	r0, [r4, #8]
   15940:	movw	r6, #14736	; 0x3990
   15944:	movt	r6, #1
   15948:	str	r6, [sp]
   1594c:	add	r0, r4, #12
   15950:	movw	r5, #26096	; 0x65f0
   15954:	movt	r5, #1
   15958:	mov	r1, #0
   1595c:	mov	r2, #0
   15960:	mov	r3, r5
   15964:	bl	16b1c <_obstack_begin@@Base>
   15968:	str	r6, [sp]
   1596c:	add	r0, r4, #56	; 0x38
   15970:	mov	r1, #0
   15974:	mov	r2, #0
   15978:	mov	r3, r5
   1597c:	bl	16b1c <_obstack_begin@@Base>
   15980:	str	r6, [sp]
   15984:	add	r0, r4, #100	; 0x64
   15988:	mov	r1, #0
   1598c:	mov	r2, #0
   15990:	mov	r3, r5
   15994:	bl	16b1c <_obstack_begin@@Base>
   15998:	sub	sp, fp, #16
   1599c:	pop	{r4, r5, r6, sl, fp, pc}
   159a0:	push	{r4, sl, fp, lr}
   159a4:	add	fp, sp, #8
   159a8:	mov	r4, r0
   159ac:	add	r0, r0, #12
   159b0:	mov	r1, #0
   159b4:	bl	16d98 <_obstack_free@@Base>
   159b8:	add	r0, r4, #56	; 0x38
   159bc:	mov	r1, #0
   159c0:	bl	16d98 <_obstack_free@@Base>
   159c4:	add	r0, r4, #100	; 0x64
   159c8:	mov	r1, #0
   159cc:	pop	{r4, sl, fp, lr}
   159d0:	b	16d98 <_obstack_free@@Base>
   159d4:	push	{r4, r5, r6, r7, fp, lr}
   159d8:	add	fp, sp, #16
   159dc:	mov	r5, r1
   159e0:	mov	r4, r0
   159e4:	bl	11528 <fgetc@plt>
   159e8:	cmn	r0, #1
   159ec:	beq	15a48 <__assert_fail@plt+0x4454>
   159f0:	mov	r7, r0
   159f4:	add	r6, r5, #12
   159f8:	ldr	r0, [r5, #24]
   159fc:	ldr	r1, [r5, #28]
   15a00:	cmp	r1, r0
   15a04:	bne	15a14 <__assert_fail@plt+0x4420>
   15a08:	mov	r0, r6
   15a0c:	mov	r1, #1
   15a10:	bl	16c04 <_obstack_newchunk@@Base>
   15a14:	ldr	r0, [r5, #24]
   15a18:	add	r1, r0, #1
   15a1c:	str	r1, [r5, #24]
   15a20:	strb	r7, [r0]
   15a24:	cmp	r7, #0
   15a28:	bne	15a34 <__assert_fail@plt+0x4440>
   15a2c:	mov	r0, r5
   15a30:	bl	15b74 <__assert_fail@plt+0x4580>
   15a34:	mov	r0, r4
   15a38:	bl	11528 <fgetc@plt>
   15a3c:	mov	r7, r0
   15a40:	cmn	r0, #1
   15a44:	bne	159f8 <__assert_fail@plt+0x4404>
   15a48:	ldr	r1, [r5, #20]
   15a4c:	ldr	r0, [r5, #24]
   15a50:	cmp	r0, r1
   15a54:	beq	15a8c <__assert_fail@plt+0x4498>
   15a58:	ldr	r1, [r5, #28]
   15a5c:	cmp	r1, r0
   15a60:	bne	15a70 <__assert_fail@plt+0x447c>
   15a64:	add	r0, r5, #12
   15a68:	mov	r1, #1
   15a6c:	bl	16c04 <_obstack_newchunk@@Base>
   15a70:	ldr	r0, [r5, #24]
   15a74:	add	r1, r0, #1
   15a78:	str	r1, [r5, #24]
   15a7c:	mov	r1, #0
   15a80:	strb	r1, [r0]
   15a84:	mov	r0, r5
   15a88:	bl	15b74 <__assert_fail@plt+0x4580>
   15a8c:	ldr	r0, [r5, #68]	; 0x44
   15a90:	ldr	r1, [r5, #72]	; 0x48
   15a94:	sub	r0, r1, r0
   15a98:	cmp	r0, #3
   15a9c:	bhi	15aac <__assert_fail@plt+0x44b8>
   15aa0:	add	r0, r5, #56	; 0x38
   15aa4:	mov	r1, #4
   15aa8:	bl	16c04 <_obstack_newchunk@@Base>
   15aac:	ldr	r0, [r5, #68]	; 0x44
   15ab0:	mov	r1, #0
   15ab4:	str	r1, [r0]
   15ab8:	ldr	r0, [r5, #64]	; 0x40
   15abc:	ldr	r1, [r5, #68]	; 0x44
   15ac0:	add	r1, r1, #4
   15ac4:	str	r1, [r5, #68]	; 0x44
   15ac8:	cmp	r1, r0
   15acc:	ldrbeq	r1, [r5, #96]	; 0x60
   15ad0:	orreq	r1, r1, #2
   15ad4:	strbeq	r1, [r5, #96]	; 0x60
   15ad8:	ldr	r2, [r5, #60]	; 0x3c
   15adc:	ldr	r3, [r5, #68]	; 0x44
   15ae0:	ldr	r1, [r5, #72]	; 0x48
   15ae4:	ldr	r7, [r5, #80]	; 0x50
   15ae8:	add	r3, r7, r3
   15aec:	bic	r3, r3, r7
   15af0:	str	r3, [r5, #68]	; 0x44
   15af4:	sub	r3, r3, r2
   15af8:	sub	r2, r1, r2
   15afc:	cmp	r3, r2
   15b00:	strhi	r1, [r5, #68]	; 0x44
   15b04:	str	r0, [r5, #4]
   15b08:	ldr	r1, [r5, #68]	; 0x44
   15b0c:	ldr	r0, [r5, #108]	; 0x6c
   15b10:	ldr	r2, [r5, #112]	; 0x70
   15b14:	str	r1, [r5, #64]	; 0x40
   15b18:	cmp	r2, r0
   15b1c:	ldrbeq	r1, [r5, #140]	; 0x8c
   15b20:	orreq	r1, r1, #2
   15b24:	strbeq	r1, [r5, #140]	; 0x8c
   15b28:	ldr	r2, [r5, #104]	; 0x68
   15b2c:	ldr	r3, [r5, #112]	; 0x70
   15b30:	ldr	r1, [r5, #116]	; 0x74
   15b34:	ldr	r7, [r5, #124]	; 0x7c
   15b38:	add	r3, r7, r3
   15b3c:	bic	r3, r3, r7
   15b40:	str	r3, [r5, #112]	; 0x70
   15b44:	sub	r3, r3, r2
   15b48:	sub	r2, r1, r2
   15b4c:	cmp	r3, r2
   15b50:	strhi	r1, [r5, #112]	; 0x70
   15b54:	str	r0, [r5, #8]
   15b58:	ldr	r0, [r5, #112]	; 0x70
   15b5c:	str	r0, [r5, #108]	; 0x6c
   15b60:	mov	r0, r4
   15b64:	bl	11348 <ferror@plt>
   15b68:	clz	r0, r0
   15b6c:	lsr	r0, r0, #5
   15b70:	pop	{r4, r5, r6, r7, fp, pc}
   15b74:	push	{r4, r5, r6, r7, fp, lr}
   15b78:	add	fp, sp, #16
   15b7c:	mov	r4, r0
   15b80:	ldr	r5, [r0, #20]
   15b84:	ldr	r6, [r0, #24]
   15b88:	cmp	r6, r5
   15b8c:	ldrbeq	r0, [r4, #52]	; 0x34
   15b90:	orreq	r0, r0, #2
   15b94:	strbeq	r0, [r4, #52]	; 0x34
   15b98:	ldr	r1, [r4, #16]
   15b9c:	ldr	r0, [r4, #28]
   15ba0:	ldr	r2, [r4, #36]	; 0x24
   15ba4:	add	r3, r2, r6
   15ba8:	bic	r2, r3, r2
   15bac:	str	r2, [r4, #24]
   15bb0:	sub	r2, r2, r1
   15bb4:	sub	r1, r0, r1
   15bb8:	cmp	r2, r1
   15bbc:	strhi	r0, [r4, #24]
   15bc0:	mvn	r7, r5
   15bc4:	ldr	r0, [r4, #24]
   15bc8:	ldr	r1, [r4, #68]	; 0x44
   15bcc:	ldr	r2, [r4, #72]	; 0x48
   15bd0:	str	r0, [r4, #20]
   15bd4:	sub	r0, r2, r1
   15bd8:	cmp	r0, #3
   15bdc:	bhi	15bec <__assert_fail@plt+0x45f8>
   15be0:	add	r0, r4, #56	; 0x38
   15be4:	mov	r1, #4
   15be8:	bl	16c04 <_obstack_newchunk@@Base>
   15bec:	add	r6, r6, r7
   15bf0:	ldr	r0, [r4, #68]	; 0x44
   15bf4:	str	r5, [r0]
   15bf8:	ldr	r0, [r4, #68]	; 0x44
   15bfc:	ldr	r1, [r4, #112]	; 0x70
   15c00:	ldr	r2, [r4, #116]	; 0x74
   15c04:	add	r0, r0, #4
   15c08:	str	r0, [r4, #68]	; 0x44
   15c0c:	sub	r0, r2, r1
   15c10:	cmp	r0, #3
   15c14:	bhi	15c24 <__assert_fail@plt+0x4630>
   15c18:	add	r0, r4, #100	; 0x64
   15c1c:	mov	r1, #4
   15c20:	bl	16c04 <_obstack_newchunk@@Base>
   15c24:	ldr	r0, [r4, #112]	; 0x70
   15c28:	str	r6, [r0]
   15c2c:	ldr	r0, [r4]
   15c30:	ldr	r1, [r4, #112]	; 0x70
   15c34:	add	r1, r1, #4
   15c38:	str	r1, [r4, #112]	; 0x70
   15c3c:	add	r0, r0, #1
   15c40:	str	r0, [r4]
   15c44:	pop	{r4, r5, r6, r7, fp, pc}
   15c48:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   15c4c:	add	fp, sp, #24
   15c50:	mov	r7, r2
   15c54:	mov	r5, r1
   15c58:	mov	r6, r0
   15c5c:	movw	r9, #0
   15c60:	movt	r9, #32752	; 0x7ff0
   15c64:	mov	r0, r6
   15c68:	mov	r1, r5
   15c6c:	mov	r2, r7
   15c70:	bl	1130c <read@plt>
   15c74:	mov	r4, r0
   15c78:	cmn	r0, #1
   15c7c:	movgt	r0, r4
   15c80:	popgt	{r4, r5, r6, r7, r8, r9, fp, pc}
   15c84:	bl	114ec <__errno_location@plt>
   15c88:	ldr	r0, [r0]
   15c8c:	cmp	r0, #4
   15c90:	beq	15c64 <__assert_fail@plt+0x4670>
   15c94:	cmp	r7, r9
   15c98:	mov	r1, #0
   15c9c:	movwhi	r1, #1
   15ca0:	sub	r2, r0, #22
   15ca4:	clz	r2, r2
   15ca8:	lsr	r2, r2, #5
   15cac:	ands	r1, r1, r2
   15cb0:	moveq	r8, r4
   15cb4:	mov	r1, r7
   15cb8:	movwne	r1, #0
   15cbc:	movtne	r1, #32752	; 0x7ff0
   15cc0:	cmp	r7, r9
   15cc4:	bls	15cd4 <__assert_fail@plt+0x46e0>
   15cc8:	cmp	r0, #22
   15ccc:	mov	r7, r1
   15cd0:	beq	15c64 <__assert_fail@plt+0x4670>
   15cd4:	mov	r0, r8
   15cd8:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   15cdc:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   15ce0:	add	fp, sp, #24
   15ce4:	sub	sp, sp, #32
   15ce8:	mov	r4, r2
   15cec:	mov	r8, r0
   15cf0:	ldr	r6, [fp, #12]
   15cf4:	ldr	r7, [fp, #8]
   15cf8:	cmp	r1, #0
   15cfc:	beq	15d24 <__assert_fail@plt+0x4730>
   15d00:	mov	r5, r1
   15d04:	str	r4, [sp]
   15d08:	str	r3, [sp, #4]
   15d0c:	movw	r2, #32424	; 0x7ea8
   15d10:	movt	r2, #1
   15d14:	mov	r0, r8
   15d18:	mov	r1, #1
   15d1c:	mov	r3, r5
   15d20:	b	15d3c <__assert_fail@plt+0x4748>
   15d24:	str	r3, [sp]
   15d28:	movw	r2, #32436	; 0x7eb4
   15d2c:	movt	r2, #1
   15d30:	mov	r0, r8
   15d34:	mov	r1, #1
   15d38:	mov	r3, r4
   15d3c:	bl	1154c <__fprintf_chk@plt>
   15d40:	movw	r1, #32443	; 0x7ebb
   15d44:	movt	r1, #1
   15d48:	mov	r0, #0
   15d4c:	mov	r2, #5
   15d50:	bl	11384 <dcgettext@plt>
   15d54:	mov	r3, r0
   15d58:	movw	r0, #2022	; 0x7e6
   15d5c:	str	r0, [sp]
   15d60:	movw	r2, #33161	; 0x8189
   15d64:	movt	r2, #1
   15d68:	mov	r0, r8
   15d6c:	mov	r1, #1
   15d70:	bl	1154c <__fprintf_chk@plt>
   15d74:	movw	r4, #31812	; 0x7c44
   15d78:	movt	r4, #1
   15d7c:	mov	r0, r4
   15d80:	mov	r1, r8
   15d84:	bl	112dc <fputs_unlocked@plt>
   15d88:	movw	r1, #32447	; 0x7ebf
   15d8c:	movt	r1, #1
   15d90:	mov	r0, #0
   15d94:	mov	r2, #5
   15d98:	bl	11384 <dcgettext@plt>
   15d9c:	mov	r2, r0
   15da0:	movw	r3, #32618	; 0x7f6a
   15da4:	movt	r3, #1
   15da8:	mov	r0, r8
   15dac:	mov	r1, #1
   15db0:	bl	1154c <__fprintf_chk@plt>
   15db4:	mov	r0, r4
   15db8:	mov	r1, r8
   15dbc:	bl	112dc <fputs_unlocked@plt>
   15dc0:	cmp	r6, #9
   15dc4:	bhi	15e00 <__assert_fail@plt+0x480c>
   15dc8:	add	r0, pc, #0
   15dcc:	ldr	pc, [r0, r6, lsl #2]
   15dd0:	strdeq	r5, [r1], -r8
   15dd4:	andeq	r5, r1, ip, lsl #28
   15dd8:	andeq	r5, r1, ip, lsr lr
   15ddc:	andeq	r5, r1, r4, ror #28
   15de0:	andeq	r5, r1, ip, lsl #29
   15de4:			; <UNDEFINED> instruction: 0x00015eb4
   15de8:	ldrdeq	r5, [r1], -ip
   15dec:	andeq	r5, r1, r4, lsl pc
   15df0:			; <UNDEFINED> instruction: 0x00015fb4
   15df4:	andeq	r5, r1, ip, asr pc
   15df8:	sub	sp, fp, #24
   15dfc:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   15e00:	movw	r1, #32971	; 0x80cb
   15e04:	movt	r1, #1
   15e08:	b	15f64 <__assert_fail@plt+0x4970>
   15e0c:	movw	r1, #32652	; 0x7f8c
   15e10:	movt	r1, #1
   15e14:	mov	r0, #0
   15e18:	mov	r2, #5
   15e1c:	bl	11384 <dcgettext@plt>
   15e20:	mov	r2, r0
   15e24:	ldr	r3, [r7]
   15e28:	mov	r0, r8
   15e2c:	mov	r1, #1
   15e30:	sub	sp, fp, #24
   15e34:	pop	{r4, r5, r6, r7, r8, sl, fp, lr}
   15e38:	b	1154c <__fprintf_chk@plt>
   15e3c:	movw	r1, #32668	; 0x7f9c
   15e40:	movt	r1, #1
   15e44:	mov	r0, #0
   15e48:	mov	r2, #5
   15e4c:	bl	11384 <dcgettext@plt>
   15e50:	mov	r2, r0
   15e54:	ldr	r3, [r7]
   15e58:	ldr	r0, [r7, #4]
   15e5c:	str	r0, [sp]
   15e60:	b	15f50 <__assert_fail@plt+0x495c>
   15e64:	movw	r1, #32691	; 0x7fb3
   15e68:	movt	r1, #1
   15e6c:	mov	r0, #0
   15e70:	mov	r2, #5
   15e74:	bl	11384 <dcgettext@plt>
   15e78:	mov	r2, r0
   15e7c:	ldr	r3, [r7]
   15e80:	ldmib	r7, {r0, r1}
   15e84:	stm	sp, {r0, r1}
   15e88:	b	15f50 <__assert_fail@plt+0x495c>
   15e8c:	movw	r1, #32719	; 0x7fcf
   15e90:	movt	r1, #1
   15e94:	mov	r0, #0
   15e98:	mov	r2, #5
   15e9c:	bl	11384 <dcgettext@plt>
   15ea0:	mov	r2, r0
   15ea4:	ldr	r3, [r7]
   15ea8:	ldmib	r7, {r0, r1, r7}
   15eac:	stm	sp, {r0, r1, r7}
   15eb0:	b	15f50 <__assert_fail@plt+0x495c>
   15eb4:	movw	r1, #32751	; 0x7fef
   15eb8:	movt	r1, #1
   15ebc:	mov	r0, #0
   15ec0:	mov	r2, #5
   15ec4:	bl	11384 <dcgettext@plt>
   15ec8:	mov	r2, r0
   15ecc:	ldr	r3, [r7]
   15ed0:	ldmib	r7, {r0, r1, r6, r7}
   15ed4:	stm	sp, {r0, r1, r6, r7}
   15ed8:	b	15f50 <__assert_fail@plt+0x495c>
   15edc:	movw	r1, #32787	; 0x8013
   15ee0:	movt	r1, #1
   15ee4:	mov	r0, #0
   15ee8:	mov	r2, #5
   15eec:	bl	11384 <dcgettext@plt>
   15ef0:	mov	r2, r0
   15ef4:	ldr	r3, [r7]
   15ef8:	ldmib	r7, {r0, r1, r6}
   15efc:	ldr	r5, [r7, #16]
   15f00:	ldr	r7, [r7, #20]
   15f04:	stm	sp, {r0, r1, r6}
   15f08:	str	r5, [sp, #12]
   15f0c:	str	r7, [sp, #16]
   15f10:	b	15f50 <__assert_fail@plt+0x495c>
   15f14:	movw	r1, #32827	; 0x803b
   15f18:	movt	r1, #1
   15f1c:	mov	r0, #0
   15f20:	mov	r2, #5
   15f24:	bl	11384 <dcgettext@plt>
   15f28:	mov	r2, r0
   15f2c:	ldr	r3, [r7]
   15f30:	ldmib	r7, {r0, r1, r6}
   15f34:	ldr	r5, [r7, #16]
   15f38:	ldr	r4, [r7, #20]
   15f3c:	ldr	r7, [r7, #24]
   15f40:	stm	sp, {r0, r1, r6}
   15f44:	str	r5, [sp, #12]
   15f48:	str	r4, [sp, #16]
   15f4c:	str	r7, [sp, #20]
   15f50:	mov	r0, r8
   15f54:	mov	r1, #1
   15f58:	b	16004 <__assert_fail@plt+0x4a10>
   15f5c:	movw	r1, #32919	; 0x8097
   15f60:	movt	r1, #1
   15f64:	mov	r0, #0
   15f68:	mov	r2, #5
   15f6c:	bl	11384 <dcgettext@plt>
   15f70:	mov	ip, r0
   15f74:	ldr	r3, [r7]
   15f78:	ldr	r0, [r7, #4]
   15f7c:	ldr	r1, [r7, #8]
   15f80:	ldr	r6, [r7, #12]
   15f84:	ldr	r5, [r7, #16]
   15f88:	ldr	r4, [r7, #20]
   15f8c:	ldr	r2, [r7, #24]
   15f90:	ldr	lr, [r7, #28]
   15f94:	ldr	r7, [r7, #32]
   15f98:	stm	sp, {r0, r1, r6}
   15f9c:	str	r5, [sp, #12]
   15fa0:	str	r4, [sp, #16]
   15fa4:	str	r2, [sp, #20]
   15fa8:	str	lr, [sp, #24]
   15fac:	str	r7, [sp, #28]
   15fb0:	b	15ff8 <__assert_fail@plt+0x4a04>
   15fb4:	movw	r1, #32871	; 0x8067
   15fb8:	movt	r1, #1
   15fbc:	mov	r0, #0
   15fc0:	mov	r2, #5
   15fc4:	bl	11384 <dcgettext@plt>
   15fc8:	mov	ip, r0
   15fcc:	ldr	r3, [r7]
   15fd0:	ldmib	r7, {r0, r1, r6}
   15fd4:	ldr	r5, [r7, #16]
   15fd8:	ldr	r4, [r7, #20]
   15fdc:	ldr	r2, [r7, #24]
   15fe0:	ldr	r7, [r7, #28]
   15fe4:	stm	sp, {r0, r1, r6}
   15fe8:	str	r5, [sp, #12]
   15fec:	str	r4, [sp, #16]
   15ff0:	str	r2, [sp, #20]
   15ff4:	str	r7, [sp, #24]
   15ff8:	mov	r0, r8
   15ffc:	mov	r1, #1
   16000:	mov	r2, ip
   16004:	bl	1154c <__fprintf_chk@plt>
   16008:	sub	sp, fp, #24
   1600c:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   16010:	push	{r4, sl, fp, lr}
   16014:	add	fp, sp, #8
   16018:	sub	sp, sp, #8
   1601c:	mov	lr, #0
   16020:	ldr	ip, [fp, #8]
   16024:	ldr	r4, [ip, lr, lsl #2]
   16028:	add	lr, lr, #1
   1602c:	cmp	r4, #0
   16030:	bne	16024 <__assert_fail@plt+0x4a30>
   16034:	sub	r4, lr, #1
   16038:	str	ip, [sp]
   1603c:	str	r4, [sp, #4]
   16040:	bl	15cdc <__assert_fail@plt+0x46e8>
   16044:	sub	sp, fp, #8
   16048:	pop	{r4, sl, fp, pc}
   1604c:	push	{r4, r5, fp, lr}
   16050:	add	fp, sp, #8
   16054:	sub	sp, sp, #48	; 0x30
   16058:	mov	ip, #0
   1605c:	ldr	r4, [fp, #8]
   16060:	add	lr, sp, #8
   16064:	ldr	r5, [r4]
   16068:	str	r5, [lr, ip, lsl #2]
   1606c:	cmp	r5, #0
   16070:	beq	16084 <__assert_fail@plt+0x4a90>
   16074:	add	ip, ip, #1
   16078:	add	r4, r4, #4
   1607c:	cmp	ip, #10
   16080:	bcc	16064 <__assert_fail@plt+0x4a70>
   16084:	str	lr, [sp]
   16088:	str	ip, [sp, #4]
   1608c:	bl	15cdc <__assert_fail@plt+0x46e8>
   16090:	sub	sp, fp, #8
   16094:	pop	{r4, r5, fp, pc}
   16098:	push	{fp, lr}
   1609c:	mov	fp, sp
   160a0:	sub	sp, sp, #8
   160a4:	add	ip, fp, #8
   160a8:	str	ip, [sp, #4]
   160ac:	str	ip, [sp]
   160b0:	bl	1604c <__assert_fail@plt+0x4a58>
   160b4:	mov	sp, fp
   160b8:	pop	{fp, pc}
   160bc:	push	{fp, lr}
   160c0:	mov	fp, sp
   160c4:	movw	r0, #37268	; 0x9194
   160c8:	movt	r0, #2
   160cc:	ldr	r1, [r0]
   160d0:	movw	r0, #31812	; 0x7c44
   160d4:	movt	r0, #1
   160d8:	bl	112dc <fputs_unlocked@plt>
   160dc:	movw	r1, #33031	; 0x8107
   160e0:	movt	r1, #1
   160e4:	mov	r0, #0
   160e8:	mov	r2, #5
   160ec:	bl	11384 <dcgettext@plt>
   160f0:	mov	r1, r0
   160f4:	movw	r2, #33051	; 0x811b
   160f8:	movt	r2, #1
   160fc:	mov	r0, #1
   16100:	bl	11534 <__printf_chk@plt>
   16104:	movw	r1, #33073	; 0x8131
   16108:	movt	r1, #1
   1610c:	mov	r0, #0
   16110:	mov	r2, #5
   16114:	bl	11384 <dcgettext@plt>
   16118:	mov	r1, r0
   1611c:	movw	r2, #31082	; 0x796a
   16120:	movt	r2, #1
   16124:	movw	r3, #31621	; 0x7b85
   16128:	movt	r3, #1
   1612c:	mov	r0, #1
   16130:	bl	11534 <__printf_chk@plt>
   16134:	movw	r1, #33093	; 0x8145
   16138:	movt	r1, #1
   1613c:	mov	r0, #0
   16140:	mov	r2, #5
   16144:	bl	11384 <dcgettext@plt>
   16148:	mov	r1, r0
   1614c:	movw	r2, #33132	; 0x816c
   16150:	movt	r2, #1
   16154:	mov	r0, #1
   16158:	pop	{fp, lr}
   1615c:	b	11534 <__printf_chk@plt>
   16160:	b	16164 <__assert_fail@plt+0x4b70>
   16164:	push	{r4, r5, r6, sl, fp, lr}
   16168:	add	fp, sp, #16
   1616c:	mov	r4, r2
   16170:	mov	r5, r1
   16174:	mov	r6, r0
   16178:	bl	16e88 <_obstack_memory_used@@Base+0x78>
   1617c:	cmp	r0, #0
   16180:	popne	{r4, r5, r6, sl, fp, pc}
   16184:	cmp	r6, #0
   16188:	beq	1619c <__assert_fail@plt+0x4ba8>
   1618c:	cmp	r5, #0
   16190:	cmpne	r4, #0
   16194:	bne	1619c <__assert_fail@plt+0x4ba8>
   16198:	pop	{r4, r5, r6, sl, fp, pc}
   1619c:	bl	16550 <__assert_fail@plt+0x4f5c>
   161a0:	push	{fp, lr}
   161a4:	mov	fp, sp
   161a8:	bl	165f0 <__assert_fail@plt+0x4ffc>
   161ac:	bl	161b4 <__assert_fail@plt+0x4bc0>
   161b0:	pop	{fp, pc}
   161b4:	cmp	r0, #0
   161b8:	bxne	lr
   161bc:	push	{fp, lr}
   161c0:	mov	fp, sp
   161c4:	bl	16550 <__assert_fail@plt+0x4f5c>
   161c8:	push	{fp, lr}
   161cc:	mov	fp, sp
   161d0:	bl	16ab0 <__assert_fail@plt+0x54bc>
   161d4:	bl	161b4 <__assert_fail@plt+0x4bc0>
   161d8:	pop	{fp, pc}
   161dc:	b	161a0 <__assert_fail@plt+0x4bac>
   161e0:	push	{r4, r5, fp, lr}
   161e4:	add	fp, sp, #8
   161e8:	mov	r4, r1
   161ec:	mov	r5, r0
   161f0:	bl	16620 <__assert_fail@plt+0x502c>
   161f4:	cmp	r0, #0
   161f8:	popne	{r4, r5, fp, pc}
   161fc:	cmp	r5, #0
   16200:	beq	16210 <__assert_fail@plt+0x4c1c>
   16204:	cmp	r4, #0
   16208:	bne	16210 <__assert_fail@plt+0x4c1c>
   1620c:	pop	{r4, r5, fp, pc}
   16210:	bl	16550 <__assert_fail@plt+0x4f5c>
   16214:	push	{fp, lr}
   16218:	mov	fp, sp
   1621c:	bl	16ab4 <__assert_fail@plt+0x54c0>
   16220:	bl	161b4 <__assert_fail@plt+0x4bc0>
   16224:	pop	{fp, pc}
   16228:	push	{fp, lr}
   1622c:	mov	fp, sp
   16230:	bl	16ac4 <__assert_fail@plt+0x54d0>
   16234:	bl	161b4 <__assert_fail@plt+0x4bc0>
   16238:	pop	{fp, pc}
   1623c:	push	{fp, lr}
   16240:	mov	fp, sp
   16244:	mov	r2, r1
   16248:	mov	r1, r0
   1624c:	mov	r0, #0
   16250:	bl	16164 <__assert_fail@plt+0x4b70>
   16254:	pop	{fp, pc}
   16258:	mov	r2, r1
   1625c:	mov	r1, r0
   16260:	mov	r0, #0
   16264:	b	16228 <__assert_fail@plt+0x4c34>
   16268:	mov	r2, #1
   1626c:	b	16270 <__assert_fail@plt+0x4c7c>
   16270:	push	{r4, r5, fp, lr}
   16274:	add	fp, sp, #8
   16278:	mov	r4, r1
   1627c:	ldr	r5, [r1]
   16280:	cmp	r0, #0
   16284:	beq	1629c <__assert_fail@plt+0x4ca8>
   16288:	mov	r1, #1
   1628c:	add	r1, r1, r5, lsr #1
   16290:	adds	r5, r5, r1
   16294:	bcc	162b4 <__assert_fail@plt+0x4cc0>
   16298:	bl	16550 <__assert_fail@plt+0x4f5c>
   1629c:	cmp	r5, #0
   162a0:	bne	162b4 <__assert_fail@plt+0x4cc0>
   162a4:	mov	r1, #64	; 0x40
   162a8:	udiv	r5, r1, r2
   162ac:	cmp	r2, #64	; 0x40
   162b0:	addhi	r5, r5, #1
   162b4:	mov	r1, r5
   162b8:	bl	16164 <__assert_fail@plt+0x4b70>
   162bc:	str	r5, [r4]
   162c0:	pop	{r4, r5, fp, pc}
   162c4:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   162c8:	add	fp, sp, #24
   162cc:	mov	r8, r1
   162d0:	ldr	r6, [r1]
   162d4:	add	r1, r6, r6, asr #1
   162d8:	cmp	r1, r6
   162dc:	mvnvs	r1, #-2147483648	; 0x80000000
   162e0:	cmp	r1, r3
   162e4:	mov	r5, r1
   162e8:	movgt	r5, r3
   162ec:	cmn	r3, #1
   162f0:	movle	r5, r1
   162f4:	ldr	r4, [fp, #8]
   162f8:	cmn	r4, #1
   162fc:	ble	16324 <__assert_fail@plt+0x4d30>
   16300:	cmp	r4, #0
   16304:	beq	16378 <__assert_fail@plt+0x4d84>
   16308:	cmn	r5, #1
   1630c:	ble	1634c <__assert_fail@plt+0x4d58>
   16310:	mvn	r7, #-2147483648	; 0x80000000
   16314:	udiv	r1, r7, r4
   16318:	cmp	r1, r5
   1631c:	bge	16378 <__assert_fail@plt+0x4d84>
   16320:	b	16388 <__assert_fail@plt+0x4d94>
   16324:	cmn	r5, #1
   16328:	ble	16368 <__assert_fail@plt+0x4d74>
   1632c:	cmn	r4, #1
   16330:	beq	16378 <__assert_fail@plt+0x4d84>
   16334:	mov	r1, #-2147483648	; 0x80000000
   16338:	sdiv	r1, r1, r4
   1633c:	mvn	r7, #-2147483648	; 0x80000000
   16340:	cmp	r1, r5
   16344:	bge	16378 <__assert_fail@plt+0x4d84>
   16348:	b	16388 <__assert_fail@plt+0x4d94>
   1634c:	beq	16378 <__assert_fail@plt+0x4d84>
   16350:	mov	r1, #-2147483648	; 0x80000000
   16354:	sdiv	r1, r1, r5
   16358:	mvn	r7, #-2147483648	; 0x80000000
   1635c:	cmp	r1, r4
   16360:	bge	16378 <__assert_fail@plt+0x4d84>
   16364:	b	16388 <__assert_fail@plt+0x4d94>
   16368:	mvn	r7, #-2147483648	; 0x80000000
   1636c:	sdiv	r1, r7, r4
   16370:	cmp	r5, r1
   16374:	blt	16388 <__assert_fail@plt+0x4d94>
   16378:	mul	r1, r5, r4
   1637c:	mov	r7, #64	; 0x40
   16380:	cmp	r1, #63	; 0x3f
   16384:	bgt	16390 <__assert_fail@plt+0x4d9c>
   16388:	sdiv	r5, r7, r4
   1638c:	mul	r1, r5, r4
   16390:	cmp	r0, #0
   16394:	moveq	r7, #0
   16398:	streq	r7, [r8]
   1639c:	sub	r7, r5, r6
   163a0:	cmp	r7, r2
   163a4:	bge	16450 <__assert_fail@plt+0x4e5c>
   163a8:	add	r5, r6, r2
   163ac:	mov	r1, #0
   163b0:	cmp	r5, r3
   163b4:	mov	r2, #0
   163b8:	movwgt	r2, #1
   163bc:	cmn	r3, #1
   163c0:	movwgt	r1, #1
   163c4:	cmp	r5, r6
   163c8:	bvs	16438 <__assert_fail@plt+0x4e44>
   163cc:	ands	r1, r1, r2
   163d0:	bne	16438 <__assert_fail@plt+0x4e44>
   163d4:	cmn	r4, #1
   163d8:	ble	16400 <__assert_fail@plt+0x4e0c>
   163dc:	cmp	r4, #0
   163e0:	beq	1644c <__assert_fail@plt+0x4e58>
   163e4:	cmn	r5, #1
   163e8:	ble	16424 <__assert_fail@plt+0x4e30>
   163ec:	mvn	r1, #-2147483648	; 0x80000000
   163f0:	udiv	r1, r1, r4
   163f4:	cmp	r1, r5
   163f8:	bge	1644c <__assert_fail@plt+0x4e58>
   163fc:	b	16438 <__assert_fail@plt+0x4e44>
   16400:	cmn	r5, #1
   16404:	ble	1643c <__assert_fail@plt+0x4e48>
   16408:	cmn	r4, #1
   1640c:	beq	1644c <__assert_fail@plt+0x4e58>
   16410:	mov	r1, #-2147483648	; 0x80000000
   16414:	sdiv	r1, r1, r4
   16418:	cmp	r1, r5
   1641c:	bge	1644c <__assert_fail@plt+0x4e58>
   16420:	b	16438 <__assert_fail@plt+0x4e44>
   16424:	beq	1644c <__assert_fail@plt+0x4e58>
   16428:	mov	r1, #-2147483648	; 0x80000000
   1642c:	sdiv	r1, r1, r5
   16430:	cmp	r1, r4
   16434:	bge	1644c <__assert_fail@plt+0x4e58>
   16438:	bl	16550 <__assert_fail@plt+0x4f5c>
   1643c:	mvn	r1, #-2147483648	; 0x80000000
   16440:	sdiv	r1, r1, r4
   16444:	cmp	r5, r1
   16448:	blt	16438 <__assert_fail@plt+0x4e44>
   1644c:	mul	r1, r5, r4
   16450:	bl	161e0 <__assert_fail@plt+0x4bec>
   16454:	str	r5, [r8]
   16458:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   1645c:	mov	r1, #1
   16460:	b	16464 <__assert_fail@plt+0x4e70>
   16464:	push	{fp, lr}
   16468:	mov	fp, sp
   1646c:	bl	1659c <__assert_fail@plt+0x4fa8>
   16470:	bl	161b4 <__assert_fail@plt+0x4bc0>
   16474:	pop	{fp, pc}
   16478:	mov	r1, #1
   1647c:	b	16480 <__assert_fail@plt+0x4e8c>
   16480:	push	{fp, lr}
   16484:	mov	fp, sp
   16488:	bl	16ac0 <__assert_fail@plt+0x54cc>
   1648c:	bl	161b4 <__assert_fail@plt+0x4bc0>
   16490:	pop	{fp, pc}
   16494:	push	{r4, r5, r6, sl, fp, lr}
   16498:	add	fp, sp, #16
   1649c:	mov	r4, r1
   164a0:	mov	r5, r0
   164a4:	mov	r0, r1
   164a8:	bl	161a0 <__assert_fail@plt+0x4bac>
   164ac:	mov	r6, r0
   164b0:	mov	r1, r5
   164b4:	mov	r2, r4
   164b8:	bl	11360 <memcpy@plt>
   164bc:	mov	r0, r6
   164c0:	pop	{r4, r5, r6, sl, fp, pc}
   164c4:	push	{r4, r5, r6, sl, fp, lr}
   164c8:	add	fp, sp, #16
   164cc:	mov	r4, r1
   164d0:	mov	r5, r0
   164d4:	mov	r0, r1
   164d8:	bl	161c8 <__assert_fail@plt+0x4bd4>
   164dc:	mov	r6, r0
   164e0:	mov	r1, r5
   164e4:	mov	r2, r4
   164e8:	bl	11360 <memcpy@plt>
   164ec:	mov	r0, r6
   164f0:	pop	{r4, r5, r6, sl, fp, pc}
   164f4:	push	{r4, r5, r6, sl, fp, lr}
   164f8:	add	fp, sp, #16
   164fc:	mov	r4, r1
   16500:	mov	r5, r0
   16504:	add	r0, r1, #1
   16508:	bl	161c8 <__assert_fail@plt+0x4bd4>
   1650c:	mov	r6, r0
   16510:	mov	r0, #0
   16514:	strb	r0, [r6, r4]
   16518:	mov	r0, r6
   1651c:	mov	r1, r5
   16520:	mov	r2, r4
   16524:	bl	11360 <memcpy@plt>
   16528:	mov	r0, r6
   1652c:	pop	{r4, r5, r6, sl, fp, pc}
   16530:	push	{r4, sl, fp, lr}
   16534:	add	fp, sp, #8
   16538:	mov	r4, r0
   1653c:	bl	114c8 <strlen@plt>
   16540:	add	r1, r0, #1
   16544:	mov	r0, r4
   16548:	pop	{r4, sl, fp, lr}
   1654c:	b	16494 <__assert_fail@plt+0x4ea0>
   16550:	push	{fp, lr}
   16554:	mov	fp, sp
   16558:	movw	r0, #37164	; 0x912c
   1655c:	movt	r0, #2
   16560:	ldr	r4, [r0]
   16564:	movw	r1, #33208	; 0x81b8
   16568:	movt	r1, #1
   1656c:	mov	r0, #0
   16570:	mov	r2, #5
   16574:	bl	11384 <dcgettext@plt>
   16578:	mov	r3, r0
   1657c:	movw	r2, #32140	; 0x7d8c
   16580:	movt	r2, #1
   16584:	mov	r0, r4
   16588:	mov	r1, #0
   1658c:	bl	1142c <error@plt>
   16590:	bl	115d0 <abort@plt>
   16594:	bx	lr
   16598:	b	1667c <__assert_fail@plt+0x5088>
   1659c:	clz	r2, r1
   165a0:	lsr	r2, r2, #5
   165a4:	clz	r3, r0
   165a8:	lsr	r3, r3, #5
   165ac:	orrs	r2, r3, r2
   165b0:	movwne	r1, #1
   165b4:	movwne	r0, #1
   165b8:	cmp	r1, #0
   165bc:	beq	165ec <__assert_fail@plt+0x4ff8>
   165c0:	mvn	r2, #-2147483648	; 0x80000000
   165c4:	udiv	r2, r2, r1
   165c8:	cmp	r2, r0
   165cc:	bcs	165ec <__assert_fail@plt+0x4ff8>
   165d0:	push	{fp, lr}
   165d4:	mov	fp, sp
   165d8:	bl	114ec <__errno_location@plt>
   165dc:	mov	r1, #12
   165e0:	str	r1, [r0]
   165e4:	mov	r0, #0
   165e8:	pop	{fp, pc}
   165ec:	b	112d0 <calloc@plt>
   165f0:	cmp	r0, #0
   165f4:	movweq	r0, #1
   165f8:	cmn	r0, #1
   165fc:	ble	16604 <__assert_fail@plt+0x5010>
   16600:	b	1145c <malloc@plt>
   16604:	push	{fp, lr}
   16608:	mov	fp, sp
   1660c:	bl	114ec <__errno_location@plt>
   16610:	mov	r1, #12
   16614:	str	r1, [r0]
   16618:	mov	r0, #0
   1661c:	pop	{fp, pc}
   16620:	push	{fp, lr}
   16624:	mov	fp, sp
   16628:	cmp	r0, #0
   1662c:	beq	16648 <__assert_fail@plt+0x5054>
   16630:	cmp	r1, #0
   16634:	beq	16654 <__assert_fail@plt+0x5060>
   16638:	cmn	r1, #1
   1663c:	ble	16660 <__assert_fail@plt+0x506c>
   16640:	pop	{fp, lr}
   16644:	b	1139c <realloc@plt>
   16648:	mov	r0, r1
   1664c:	pop	{fp, lr}
   16650:	b	165f0 <__assert_fail@plt+0x4ffc>
   16654:	bl	13990 <__assert_fail@plt+0x239c>
   16658:	mov	r0, #0
   1665c:	pop	{fp, pc}
   16660:	bl	114ec <__errno_location@plt>
   16664:	mov	r1, #12
   16668:	str	r1, [r0]
   1666c:	mov	r0, #0
   16670:	pop	{fp, pc}
   16674:	mov	r0, #0
   16678:	bx	lr
   1667c:	mov	r0, #0
   16680:	bx	lr
   16684:	mov	r1, r0
   16688:	sub	r2, r0, #65	; 0x41
   1668c:	mov	r0, #1
   16690:	cmp	r2, #26
   16694:	subcs	r2, r1, #97	; 0x61
   16698:	cmpcs	r2, #26
   1669c:	bcs	166a4 <__assert_fail@plt+0x50b0>
   166a0:	bx	lr
   166a4:	sub	r1, r1, #48	; 0x30
   166a8:	cmp	r1, #10
   166ac:	movcs	r0, #0
   166b0:	bx	lr
   166b4:	mov	r1, r0
   166b8:	sub	r2, r0, #65	; 0x41
   166bc:	mov	r0, #1
   166c0:	cmp	r2, #26
   166c4:	subcs	r1, r1, #97	; 0x61
   166c8:	cmpcs	r1, #26
   166cc:	movcs	r0, #0
   166d0:	bx	lr
   166d4:	mov	r1, #0
   166d8:	cmp	r0, #128	; 0x80
   166dc:	movwcc	r1, #1
   166e0:	mov	r0, r1
   166e4:	bx	lr
   166e8:	sub	r1, r0, #9
   166ec:	clz	r1, r1
   166f0:	lsr	r1, r1, #5
   166f4:	sub	r0, r0, #32
   166f8:	clz	r0, r0
   166fc:	lsr	r0, r0, #5
   16700:	orr	r0, r0, r1
   16704:	bx	lr
   16708:	mov	r1, r0
   1670c:	mov	r0, #1
   16710:	cmp	r1, #32
   16714:	bxcc	lr
   16718:	cmp	r1, #127	; 0x7f
   1671c:	movne	r0, #0
   16720:	bx	lr
   16724:	sub	r1, r0, #48	; 0x30
   16728:	mov	r0, #0
   1672c:	cmp	r1, #10
   16730:	movwcc	r0, #1
   16734:	bx	lr
   16738:	sub	r1, r0, #33	; 0x21
   1673c:	mov	r0, #0
   16740:	cmp	r1, #94	; 0x5e
   16744:	movwcc	r0, #1
   16748:	bx	lr
   1674c:	sub	r1, r0, #97	; 0x61
   16750:	mov	r0, #0
   16754:	cmp	r1, #26
   16758:	movwcc	r0, #1
   1675c:	bx	lr
   16760:	sub	r1, r0, #32
   16764:	mov	r0, #0
   16768:	cmp	r1, #95	; 0x5f
   1676c:	movwcc	r0, #1
   16770:	bx	lr
   16774:	sub	r1, r0, #33	; 0x21
   16778:	cmp	r1, #93	; 0x5d
   1677c:	bhi	16908 <__assert_fail@plt+0x5314>
   16780:	mov	r0, #1
   16784:	add	r2, pc, #0
   16788:	ldr	pc, [r2, r1, lsl #2]
   1678c:	andeq	r6, r1, r4, lsl #18
   16790:	andeq	r6, r1, r4, lsl #18
   16794:	andeq	r6, r1, r4, lsl #18
   16798:	andeq	r6, r1, r4, lsl #18
   1679c:	andeq	r6, r1, r4, lsl #18
   167a0:	andeq	r6, r1, r4, lsl #18
   167a4:	andeq	r6, r1, r4, lsl #18
   167a8:	andeq	r6, r1, r4, lsl #18
   167ac:	andeq	r6, r1, r4, lsl #18
   167b0:	andeq	r6, r1, r4, lsl #18
   167b4:	andeq	r6, r1, r4, lsl #18
   167b8:	andeq	r6, r1, r4, lsl #18
   167bc:	andeq	r6, r1, r4, lsl #18
   167c0:	andeq	r6, r1, r4, lsl #18
   167c4:	andeq	r6, r1, r4, lsl #18
   167c8:	andeq	r6, r1, r8, lsl #18
   167cc:	andeq	r6, r1, r8, lsl #18
   167d0:	andeq	r6, r1, r8, lsl #18
   167d4:	andeq	r6, r1, r8, lsl #18
   167d8:	andeq	r6, r1, r8, lsl #18
   167dc:	andeq	r6, r1, r8, lsl #18
   167e0:	andeq	r6, r1, r8, lsl #18
   167e4:	andeq	r6, r1, r8, lsl #18
   167e8:	andeq	r6, r1, r8, lsl #18
   167ec:	andeq	r6, r1, r8, lsl #18
   167f0:	andeq	r6, r1, r4, lsl #18
   167f4:	andeq	r6, r1, r4, lsl #18
   167f8:	andeq	r6, r1, r4, lsl #18
   167fc:	andeq	r6, r1, r4, lsl #18
   16800:	andeq	r6, r1, r4, lsl #18
   16804:	andeq	r6, r1, r4, lsl #18
   16808:	andeq	r6, r1, r4, lsl #18
   1680c:	andeq	r6, r1, r8, lsl #18
   16810:	andeq	r6, r1, r8, lsl #18
   16814:	andeq	r6, r1, r8, lsl #18
   16818:	andeq	r6, r1, r8, lsl #18
   1681c:	andeq	r6, r1, r8, lsl #18
   16820:	andeq	r6, r1, r8, lsl #18
   16824:	andeq	r6, r1, r8, lsl #18
   16828:	andeq	r6, r1, r8, lsl #18
   1682c:	andeq	r6, r1, r8, lsl #18
   16830:	andeq	r6, r1, r8, lsl #18
   16834:	andeq	r6, r1, r8, lsl #18
   16838:	andeq	r6, r1, r8, lsl #18
   1683c:	andeq	r6, r1, r8, lsl #18
   16840:	andeq	r6, r1, r8, lsl #18
   16844:	andeq	r6, r1, r8, lsl #18
   16848:	andeq	r6, r1, r8, lsl #18
   1684c:	andeq	r6, r1, r8, lsl #18
   16850:	andeq	r6, r1, r8, lsl #18
   16854:	andeq	r6, r1, r8, lsl #18
   16858:	andeq	r6, r1, r8, lsl #18
   1685c:	andeq	r6, r1, r8, lsl #18
   16860:	andeq	r6, r1, r8, lsl #18
   16864:	andeq	r6, r1, r8, lsl #18
   16868:	andeq	r6, r1, r8, lsl #18
   1686c:	andeq	r6, r1, r8, lsl #18
   16870:	andeq	r6, r1, r8, lsl #18
   16874:	andeq	r6, r1, r4, lsl #18
   16878:	andeq	r6, r1, r4, lsl #18
   1687c:	andeq	r6, r1, r4, lsl #18
   16880:	andeq	r6, r1, r4, lsl #18
   16884:	andeq	r6, r1, r4, lsl #18
   16888:	andeq	r6, r1, r4, lsl #18
   1688c:	andeq	r6, r1, r8, lsl #18
   16890:	andeq	r6, r1, r8, lsl #18
   16894:	andeq	r6, r1, r8, lsl #18
   16898:	andeq	r6, r1, r8, lsl #18
   1689c:	andeq	r6, r1, r8, lsl #18
   168a0:	andeq	r6, r1, r8, lsl #18
   168a4:	andeq	r6, r1, r8, lsl #18
   168a8:	andeq	r6, r1, r8, lsl #18
   168ac:	andeq	r6, r1, r8, lsl #18
   168b0:	andeq	r6, r1, r8, lsl #18
   168b4:	andeq	r6, r1, r8, lsl #18
   168b8:	andeq	r6, r1, r8, lsl #18
   168bc:	andeq	r6, r1, r8, lsl #18
   168c0:	andeq	r6, r1, r8, lsl #18
   168c4:	andeq	r6, r1, r8, lsl #18
   168c8:	andeq	r6, r1, r8, lsl #18
   168cc:	andeq	r6, r1, r8, lsl #18
   168d0:	andeq	r6, r1, r8, lsl #18
   168d4:	andeq	r6, r1, r8, lsl #18
   168d8:	andeq	r6, r1, r8, lsl #18
   168dc:	andeq	r6, r1, r8, lsl #18
   168e0:	andeq	r6, r1, r8, lsl #18
   168e4:	andeq	r6, r1, r8, lsl #18
   168e8:	andeq	r6, r1, r8, lsl #18
   168ec:	andeq	r6, r1, r8, lsl #18
   168f0:	andeq	r6, r1, r8, lsl #18
   168f4:	andeq	r6, r1, r4, lsl #18
   168f8:	andeq	r6, r1, r4, lsl #18
   168fc:	andeq	r6, r1, r4, lsl #18
   16900:	andeq	r6, r1, r4, lsl #18
   16904:	bx	lr
   16908:	mov	r0, #0
   1690c:	bx	lr
   16910:	sub	r0, r0, #9
   16914:	cmp	r0, #23
   16918:	movhi	r0, #0
   1691c:	bxhi	lr
   16920:	bic	r0, r0, #-16777216	; 0xff000000
   16924:	movw	r1, #31
   16928:	movt	r1, #128	; 0x80
   1692c:	mov	r2, #1
   16930:	and	r0, r2, r1, lsr r0
   16934:	bx	lr
   16938:	sub	r1, r0, #65	; 0x41
   1693c:	mov	r0, #0
   16940:	cmp	r1, #26
   16944:	movwcc	r0, #1
   16948:	bx	lr
   1694c:	mov	r1, r0
   16950:	sub	r2, r0, #48	; 0x30
   16954:	mov	r0, #1
   16958:	cmp	r2, #22
   1695c:	bhi	16974 <__assert_fail@plt+0x5380>
   16960:	mov	ip, #1
   16964:	movw	r3, #1023	; 0x3ff
   16968:	movt	r3, #126	; 0x7e
   1696c:	tst	r3, ip, lsl r2
   16970:	bxne	lr
   16974:	sub	r1, r1, #97	; 0x61
   16978:	cmp	r1, #6
   1697c:	movcs	r0, #0
   16980:	bxcs	lr
   16984:	bx	lr
   16988:	sub	r1, r0, #65	; 0x41
   1698c:	cmp	r1, #26
   16990:	addcc	r0, r0, #32
   16994:	bx	lr
   16998:	sub	r1, r0, #97	; 0x61
   1699c:	cmp	r1, #26
   169a0:	subcc	r0, r0, #32
   169a4:	bx	lr
   169a8:	push	{r4, r5, r6, sl, fp, lr}
   169ac:	add	fp, sp, #16
   169b0:	mov	r4, r0
   169b4:	bl	11408 <__fpending@plt>
   169b8:	mov	r5, r0
   169bc:	mov	r0, r4
   169c0:	bl	11414 <ferror_unlocked@plt>
   169c4:	mov	r6, r0
   169c8:	mov	r0, r4
   169cc:	bl	13888 <__assert_fail@plt+0x2294>
   169d0:	cmp	r6, #0
   169d4:	beq	169f4 <__assert_fail@plt+0x5400>
   169d8:	mvn	r4, #0
   169dc:	cmp	r0, #0
   169e0:	bne	16a28 <__assert_fail@plt+0x5434>
   169e4:	bl	114ec <__errno_location@plt>
   169e8:	mov	r1, #0
   169ec:	str	r1, [r0]
   169f0:	b	16a28 <__assert_fail@plt+0x5434>
   169f4:	cmp	r0, #0
   169f8:	mov	r4, r0
   169fc:	mvnne	r4, #0
   16a00:	cmp	r5, #0
   16a04:	bne	16a28 <__assert_fail@plt+0x5434>
   16a08:	cmp	r0, #0
   16a0c:	beq	16a28 <__assert_fail@plt+0x5434>
   16a10:	bl	114ec <__errno_location@plt>
   16a14:	ldr	r0, [r0]
   16a18:	subs	r4, r0, #9
   16a1c:	mvnne	r4, #0
   16a20:	mov	r0, r4
   16a24:	pop	{r4, r5, r6, sl, fp, pc}
   16a28:	mov	r0, r4
   16a2c:	pop	{r4, r5, r6, sl, fp, pc}
   16a30:	push	{r4, sl, fp, lr}
   16a34:	add	fp, sp, #8
   16a38:	sub	sp, sp, #264	; 0x108
   16a3c:	add	r1, sp, #7
   16a40:	movw	r2, #257	; 0x101
   16a44:	bl	16ec4 <_obstack_memory_used@@Base+0xb4>
   16a48:	mov	r4, #0
   16a4c:	cmp	r0, #0
   16a50:	bne	16a88 <__assert_fail@plt+0x5494>
   16a54:	add	r0, sp, #7
   16a58:	movw	r1, #33225	; 0x81c9
   16a5c:	movt	r1, #1
   16a60:	bl	112f4 <strcmp@plt>
   16a64:	cmp	r0, #0
   16a68:	beq	16a88 <__assert_fail@plt+0x5494>
   16a6c:	add	r0, sp, #7
   16a70:	movw	r1, #33227	; 0x81cb
   16a74:	movt	r1, #1
   16a78:	bl	112f4 <strcmp@plt>
   16a7c:	mov	r4, r0
   16a80:	cmp	r0, #0
   16a84:	movwne	r4, #1
   16a88:	mov	r0, r4
   16a8c:	sub	sp, fp, #8
   16a90:	pop	{r4, sl, fp, pc}
   16a94:	push	{fp, lr}
   16a98:	mov	fp, sp
   16a9c:	bl	114ec <__errno_location@plt>
   16aa0:	mov	r1, #12
   16aa4:	str	r1, [r0]
   16aa8:	mov	r0, #0
   16aac:	pop	{fp, pc}
   16ab0:	b	165f0 <__assert_fail@plt+0x4ffc>
   16ab4:	cmp	r1, #0
   16ab8:	orreq	r1, r1, #1
   16abc:	b	16620 <__assert_fail@plt+0x502c>
   16ac0:	b	1659c <__assert_fail@plt+0x4fa8>
   16ac4:	clz	r3, r2
   16ac8:	lsr	ip, r3, #5
   16acc:	clz	r3, r1
   16ad0:	lsr	r3, r3, #5
   16ad4:	orrs	r3, r3, ip
   16ad8:	movwne	r1, #1
   16adc:	movwne	r2, #1
   16ae0:	b	16e88 <_obstack_memory_used@@Base+0x78>
   16ae4:	push	{fp, lr}
   16ae8:	mov	fp, sp
   16aec:	mov	r0, #14
   16af0:	bl	11588 <nl_langinfo@plt>
   16af4:	movw	r1, #31813	; 0x7c45
   16af8:	movt	r1, #1
   16afc:	cmp	r0, #0
   16b00:	movne	r1, r0
   16b04:	ldrb	r2, [r1]
   16b08:	movw	r0, #33233	; 0x81d1
   16b0c:	movt	r0, #1
   16b10:	cmp	r2, #0
   16b14:	movne	r0, r1
   16b18:	pop	{fp, pc}

00016b1c <_obstack_begin@@Base>:
   16b1c:	push	{fp, lr}
   16b20:	mov	fp, sp
   16b24:	str	r3, [r0, #28]
   16b28:	ldr	r3, [fp, #8]
   16b2c:	str	r3, [r0, #32]
   16b30:	ldrb	r3, [r0, #40]	; 0x28
   16b34:	and	r3, r3, #254	; 0xfe
   16b38:	strb	r3, [r0, #40]	; 0x28
   16b3c:	bl	16b48 <_obstack_begin@@Base+0x2c>
   16b40:	mov	r0, #1
   16b44:	pop	{fp, pc}
   16b48:	push	{r4, r5, r6, sl, fp, lr}
   16b4c:	add	fp, sp, #16
   16b50:	mov	r5, r2
   16b54:	mov	r4, r0
   16b58:	cmp	r1, #0
   16b5c:	movweq	r1, #4072	; 0xfe8
   16b60:	str	r1, [r0]
   16b64:	cmp	r2, #0
   16b68:	movweq	r5, #8
   16b6c:	sub	r6, r5, #1
   16b70:	str	r6, [r0, #24]
   16b74:	bl	16d1c <_obstack_newchunk@@Base+0x118>
   16b78:	str	r0, [r4, #4]
   16b7c:	cmp	r0, #0
   16b80:	addne	r1, r6, r0
   16b84:	addne	r1, r1, #8
   16b88:	rsbne	r2, r5, #0
   16b8c:	andne	r1, r1, r2
   16b90:	strne	r1, [r4, #12]
   16b94:	strne	r1, [r4, #8]
   16b98:	ldrne	r1, [r4]
   16b9c:	addne	r1, r0, r1
   16ba0:	strne	r1, [r0]
   16ba4:	strne	r1, [r4, #16]
   16ba8:	movne	r1, #0
   16bac:	strne	r1, [r0, #4]
   16bb0:	ldrbne	r0, [r4, #40]	; 0x28
   16bb4:	andne	r0, r0, #249	; 0xf9
   16bb8:	strbne	r0, [r4, #40]	; 0x28
   16bbc:	popne	{r4, r5, r6, sl, fp, pc}
   16bc0:	movw	r0, #37232	; 0x9170
   16bc4:	movt	r0, #2
   16bc8:	ldr	r0, [r0]
   16bcc:	blx	r0

00016bd0 <_obstack_begin_1@@Base>:
   16bd0:	push	{fp, lr}
   16bd4:	mov	fp, sp
   16bd8:	str	r3, [r0, #28]
   16bdc:	ldr	r3, [fp, #8]
   16be0:	str	r3, [r0, #32]
   16be4:	ldr	r3, [fp, #12]
   16be8:	str	r3, [r0, #36]	; 0x24
   16bec:	ldrb	r3, [r0, #40]	; 0x28
   16bf0:	orr	r3, r3, #1
   16bf4:	strb	r3, [r0, #40]	; 0x28
   16bf8:	bl	16b48 <_obstack_begin@@Base+0x2c>
   16bfc:	mov	r0, #1
   16c00:	pop	{fp, pc}

00016c04 <_obstack_newchunk@@Base>:
   16c04:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   16c08:	add	fp, sp, #28
   16c0c:	sub	sp, sp, #4
   16c10:	mov	r4, r0
   16c14:	ldr	r2, [r0]
   16c18:	ldr	r0, [r0, #8]
   16c1c:	ldr	r3, [r4, #12]
   16c20:	sub	sl, r3, r0
   16c24:	add	r1, sl, r1
   16c28:	ldr	r0, [r4, #24]
   16c2c:	mov	r3, #0
   16c30:	adds	r7, r1, r0
   16c34:	adc	r0, r3, #0
   16c38:	mov	r3, #100	; 0x64
   16c3c:	add	r3, r3, sl, lsr #3
   16c40:	adds	r6, r3, r7
   16c44:	movcs	r6, r7
   16c48:	cmp	r6, r2
   16c4c:	movcc	r6, r2
   16c50:	cmp	r1, sl
   16c54:	bcc	16d0c <_obstack_newchunk@@Base+0x108>
   16c58:	cmp	r0, #0
   16c5c:	bne	16d0c <_obstack_newchunk@@Base+0x108>
   16c60:	ldr	r8, [r4, #4]
   16c64:	mov	r0, r4
   16c68:	mov	r1, r6
   16c6c:	bl	16d1c <_obstack_newchunk@@Base+0x118>
   16c70:	cmp	r0, #0
   16c74:	beq	16d0c <_obstack_newchunk@@Base+0x108>
   16c78:	mov	r7, r0
   16c7c:	str	r0, [r4, #4]
   16c80:	str	r8, [r0, #4]
   16c84:	add	r0, r0, r6
   16c88:	str	r0, [r4, #16]
   16c8c:	str	r0, [r7]
   16c90:	ldr	r9, [r4, #8]
   16c94:	ldr	r5, [r4, #24]
   16c98:	add	r0, r5, r7
   16c9c:	add	r0, r0, #8
   16ca0:	bic	r6, r0, r5
   16ca4:	mov	r0, r6
   16ca8:	mov	r1, r9
   16cac:	mov	r2, sl
   16cb0:	bl	11360 <memcpy@plt>
   16cb4:	ldrb	r0, [r4, #40]	; 0x28
   16cb8:	tst	r0, #2
   16cbc:	bne	16cec <_obstack_newchunk@@Base+0xe8>
   16cc0:	mvn	r0, r5
   16cc4:	add	r1, r5, r8
   16cc8:	add	r1, r1, #8
   16ccc:	and	r0, r1, r0
   16cd0:	cmp	r9, r0
   16cd4:	bne	16cec <_obstack_newchunk@@Base+0xe8>
   16cd8:	ldr	r0, [r8, #4]
   16cdc:	str	r0, [r7, #4]
   16ce0:	mov	r0, r4
   16ce4:	mov	r1, r8
   16ce8:	bl	16d40 <_obstack_newchunk@@Base+0x13c>
   16cec:	add	r0, r6, sl
   16cf0:	str	r6, [r4, #8]
   16cf4:	str	r0, [r4, #12]
   16cf8:	ldrb	r0, [r4, #40]	; 0x28
   16cfc:	and	r0, r0, #253	; 0xfd
   16d00:	strb	r0, [r4, #40]	; 0x28
   16d04:	sub	sp, fp, #28
   16d08:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   16d0c:	movw	r0, #37232	; 0x9170
   16d10:	movt	r0, #2
   16d14:	ldr	r0, [r0]
   16d18:	blx	r0
   16d1c:	ldrb	r2, [r0, #40]	; 0x28
   16d20:	tst	r2, #1
   16d24:	bne	16d34 <_obstack_newchunk@@Base+0x130>
   16d28:	ldr	r2, [r0, #28]
   16d2c:	mov	r0, r1
   16d30:	bx	r2
   16d34:	ldr	r2, [r0, #28]
   16d38:	ldr	r0, [r0, #36]	; 0x24
   16d3c:	bx	r2
   16d40:	ldrb	r2, [r0, #40]	; 0x28
   16d44:	tst	r2, #1
   16d48:	bne	16d58 <_obstack_newchunk@@Base+0x154>
   16d4c:	ldr	r2, [r0, #32]
   16d50:	mov	r0, r1
   16d54:	bx	r2
   16d58:	ldr	r2, [r0, #32]
   16d5c:	ldr	r0, [r0, #36]	; 0x24
   16d60:	bx	r2

00016d64 <_obstack_allocated_p@@Base>:
   16d64:	ldr	r2, [r0, #4]
   16d68:	mov	r0, #0
   16d6c:	b	16d74 <_obstack_allocated_p@@Base+0x10>
   16d70:	ldr	r2, [r2, #4]
   16d74:	cmp	r2, #0
   16d78:	bxeq	lr
   16d7c:	cmp	r2, r1
   16d80:	bcs	16d70 <_obstack_allocated_p@@Base+0xc>
   16d84:	ldr	r3, [r2]
   16d88:	cmp	r3, r1
   16d8c:	bcc	16d70 <_obstack_allocated_p@@Base+0xc>
   16d90:	mov	r0, #1
   16d94:	bx	lr

00016d98 <_obstack_free@@Base>:
   16d98:	push	{r4, r5, r6, sl, fp, lr}
   16d9c:	add	fp, sp, #16
   16da0:	mov	r5, r1
   16da4:	ldr	r1, [r0, #4]
   16da8:	cmp	r1, #0
   16dac:	beq	16dec <_obstack_free@@Base+0x54>
   16db0:	mov	r4, r0
   16db4:	cmp	r1, r5
   16db8:	bcs	16dc8 <_obstack_free@@Base+0x30>
   16dbc:	ldr	r0, [r1]
   16dc0:	cmp	r0, r5
   16dc4:	bcs	16df8 <_obstack_free@@Base+0x60>
   16dc8:	ldr	r6, [r1, #4]
   16dcc:	mov	r0, r4
   16dd0:	bl	16d40 <_obstack_newchunk@@Base+0x13c>
   16dd4:	ldrb	r0, [r4, #40]	; 0x28
   16dd8:	orr	r0, r0, #2
   16ddc:	strb	r0, [r4, #40]	; 0x28
   16de0:	cmp	r6, #0
   16de4:	mov	r1, r6
   16de8:	bne	16db4 <_obstack_free@@Base+0x1c>
   16dec:	cmp	r5, #0
   16df0:	popeq	{r4, r5, r6, sl, fp, pc}
   16df4:	bl	115d0 <abort@plt>
   16df8:	str	r5, [r4, #8]
   16dfc:	str	r5, [r4, #12]
   16e00:	ldr	r0, [r1]
   16e04:	str	r1, [r4, #4]
   16e08:	str	r0, [r4, #16]
   16e0c:	pop	{r4, r5, r6, sl, fp, pc}

00016e10 <_obstack_memory_used@@Base>:
   16e10:	ldr	r1, [r0, #4]
   16e14:	mov	r0, #0
   16e18:	b	16e2c <_obstack_memory_used@@Base+0x1c>
   16e1c:	sub	r0, r0, r1
   16e20:	ldr	r2, [r1]
   16e24:	ldr	r1, [r1, #4]
   16e28:	add	r0, r0, r2
   16e2c:	cmp	r1, #0
   16e30:	bxeq	lr
   16e34:	b	16e1c <_obstack_memory_used@@Base+0xc>
   16e38:	push	{fp, lr}
   16e3c:	mov	fp, sp
   16e40:	movw	r0, #37256	; 0x9188
   16e44:	movt	r0, #2
   16e48:	ldr	r4, [r0]
   16e4c:	movw	r1, #33208	; 0x81b8
   16e50:	movt	r1, #1
   16e54:	mov	r0, #0
   16e58:	mov	r2, #5
   16e5c:	bl	11384 <dcgettext@plt>
   16e60:	mov	r3, r0
   16e64:	movw	r2, #32432	; 0x7eb0
   16e68:	movt	r2, #1
   16e6c:	mov	r0, r4
   16e70:	mov	r1, #1
   16e74:	bl	1154c <__fprintf_chk@plt>
   16e78:	movw	r0, #37164	; 0x912c
   16e7c:	movt	r0, #2
   16e80:	ldr	r0, [r0]
   16e84:	bl	114a4 <exit@plt>
   16e88:	cmp	r2, #0
   16e8c:	beq	16ebc <_obstack_memory_used@@Base+0xac>
   16e90:	mvn	r3, #0
   16e94:	udiv	r3, r3, r2
   16e98:	cmp	r3, r1
   16e9c:	bcs	16ebc <_obstack_memory_used@@Base+0xac>
   16ea0:	push	{fp, lr}
   16ea4:	mov	fp, sp
   16ea8:	bl	114ec <__errno_location@plt>
   16eac:	mov	r1, #12
   16eb0:	str	r1, [r0]
   16eb4:	mov	r0, #0
   16eb8:	pop	{fp, pc}
   16ebc:	mul	r1, r2, r1
   16ec0:	b	16620 <__assert_fail@plt+0x502c>
   16ec4:	b	16ec8 <_obstack_memory_used@@Base+0xb8>
   16ec8:	push	{r4, r5, r6, r7, fp, lr}
   16ecc:	add	fp, sp, #16
   16ed0:	mov	r6, r2
   16ed4:	mov	r4, r1
   16ed8:	bl	16f64 <_obstack_memory_used@@Base+0x154>
   16edc:	cmp	r0, #0
   16ee0:	beq	16f10 <_obstack_memory_used@@Base+0x100>
   16ee4:	mov	r7, r0
   16ee8:	bl	114c8 <strlen@plt>
   16eec:	cmp	r0, r6
   16ef0:	bcs	16f30 <_obstack_memory_used@@Base+0x120>
   16ef4:	add	r2, r0, #1
   16ef8:	mov	r0, r4
   16efc:	mov	r1, r7
   16f00:	bl	11360 <memcpy@plt>
   16f04:	mov	r5, #0
   16f08:	mov	r0, r5
   16f0c:	pop	{r4, r5, r6, r7, fp, pc}
   16f10:	mov	r5, #22
   16f14:	cmp	r6, #0
   16f18:	movne	r0, #0
   16f1c:	strbne	r0, [r4]
   16f20:	movne	r0, r5
   16f24:	popne	{r4, r5, r6, r7, fp, pc}
   16f28:	mov	r0, r5
   16f2c:	pop	{r4, r5, r6, r7, fp, pc}
   16f30:	mov	r5, #34	; 0x22
   16f34:	cmp	r6, #0
   16f38:	beq	16f58 <_obstack_memory_used@@Base+0x148>
   16f3c:	sub	r6, r6, #1
   16f40:	mov	r0, r4
   16f44:	mov	r1, r7
   16f48:	mov	r2, r6
   16f4c:	bl	11360 <memcpy@plt>
   16f50:	mov	r0, #0
   16f54:	strb	r0, [r4, r6]
   16f58:	mov	r0, r5
   16f5c:	pop	{r4, r5, r6, r7, fp, pc}
   16f60:	b	16f64 <_obstack_memory_used@@Base+0x154>
   16f64:	mov	r1, #0
   16f68:	b	11570 <setlocale@plt>
   16f6c:	eor	r1, r1, #-2147483648	; 0x80000000
   16f70:	b	16f78 <_obstack_memory_used@@Base+0x168>
   16f74:	eor	r3, r3, #-2147483648	; 0x80000000
   16f78:	push	{r4, r5, lr}
   16f7c:	lsl	r4, r1, #1
   16f80:	lsl	r5, r3, #1
   16f84:	teq	r4, r5
   16f88:	teqeq	r0, r2
   16f8c:	orrsne	ip, r4, r0
   16f90:	orrsne	ip, r5, r2
   16f94:	mvnsne	ip, r4, asr #21
   16f98:	mvnsne	ip, r5, asr #21
   16f9c:	beq	17188 <_obstack_memory_used@@Base+0x378>
   16fa0:	lsr	r4, r4, #21
   16fa4:	rsbs	r5, r4, r5, lsr #21
   16fa8:	rsblt	r5, r5, #0
   16fac:	ble	16fcc <_obstack_memory_used@@Base+0x1bc>
   16fb0:	add	r4, r4, r5
   16fb4:	eor	r2, r0, r2
   16fb8:	eor	r3, r1, r3
   16fbc:	eor	r0, r2, r0
   16fc0:	eor	r1, r3, r1
   16fc4:	eor	r2, r0, r2
   16fc8:	eor	r3, r1, r3
   16fcc:	cmp	r5, #54	; 0x36
   16fd0:	pophi	{r4, r5, pc}
   16fd4:	tst	r1, #-2147483648	; 0x80000000
   16fd8:	lsl	r1, r1, #12
   16fdc:	mov	ip, #1048576	; 0x100000
   16fe0:	orr	r1, ip, r1, lsr #12
   16fe4:	beq	16ff0 <_obstack_memory_used@@Base+0x1e0>
   16fe8:	rsbs	r0, r0, #0
   16fec:	rsc	r1, r1, #0
   16ff0:	tst	r3, #-2147483648	; 0x80000000
   16ff4:	lsl	r3, r3, #12
   16ff8:	orr	r3, ip, r3, lsr #12
   16ffc:	beq	17008 <_obstack_memory_used@@Base+0x1f8>
   17000:	rsbs	r2, r2, #0
   17004:	rsc	r3, r3, #0
   17008:	teq	r4, r5
   1700c:	beq	17170 <_obstack_memory_used@@Base+0x360>
   17010:	sub	r4, r4, #1
   17014:	rsbs	lr, r5, #32
   17018:	blt	17034 <_obstack_memory_used@@Base+0x224>
   1701c:	lsl	ip, r2, lr
   17020:	adds	r0, r0, r2, lsr r5
   17024:	adc	r1, r1, #0
   17028:	adds	r0, r0, r3, lsl lr
   1702c:	adcs	r1, r1, r3, asr r5
   17030:	b	17050 <_obstack_memory_used@@Base+0x240>
   17034:	sub	r5, r5, #32
   17038:	add	lr, lr, #32
   1703c:	cmp	r2, #1
   17040:	lsl	ip, r3, lr
   17044:	orrcs	ip, ip, #2
   17048:	adds	r0, r0, r3, asr r5
   1704c:	adcs	r1, r1, r3, asr #31
   17050:	and	r5, r1, #-2147483648	; 0x80000000
   17054:	bpl	17064 <_obstack_memory_used@@Base+0x254>
   17058:	rsbs	ip, ip, #0
   1705c:	rscs	r0, r0, #0
   17060:	rsc	r1, r1, #0
   17064:	cmp	r1, #1048576	; 0x100000
   17068:	bcc	170a8 <_obstack_memory_used@@Base+0x298>
   1706c:	cmp	r1, #2097152	; 0x200000
   17070:	bcc	17090 <_obstack_memory_used@@Base+0x280>
   17074:	lsrs	r1, r1, #1
   17078:	rrxs	r0, r0
   1707c:	rrx	ip, ip
   17080:	add	r4, r4, #1
   17084:	lsl	r2, r4, #21
   17088:	cmn	r2, #4194304	; 0x400000
   1708c:	bcs	171e8 <_obstack_memory_used@@Base+0x3d8>
   17090:	cmp	ip, #-2147483648	; 0x80000000
   17094:	lsrseq	ip, r0, #1
   17098:	adcs	r0, r0, #0
   1709c:	adc	r1, r1, r4, lsl #20
   170a0:	orr	r1, r1, r5
   170a4:	pop	{r4, r5, pc}
   170a8:	lsls	ip, ip, #1
   170ac:	adcs	r0, r0, r0
   170b0:	adc	r1, r1, r1
   170b4:	tst	r1, #1048576	; 0x100000
   170b8:	sub	r4, r4, #1
   170bc:	bne	17090 <_obstack_memory_used@@Base+0x280>
   170c0:	teq	r1, #0
   170c4:	moveq	r1, r0
   170c8:	moveq	r0, #0
   170cc:	clz	r3, r1
   170d0:	addeq	r3, r3, #32
   170d4:	sub	r3, r3, #11
   170d8:	subs	r2, r3, #32
   170dc:	bge	17100 <_obstack_memory_used@@Base+0x2f0>
   170e0:	adds	r2, r2, #12
   170e4:	ble	170fc <_obstack_memory_used@@Base+0x2ec>
   170e8:	add	ip, r2, #20
   170ec:	rsb	r2, r2, #12
   170f0:	lsl	r0, r1, ip
   170f4:	lsr	r1, r1, r2
   170f8:	b	17110 <_obstack_memory_used@@Base+0x300>
   170fc:	add	r2, r2, #20
   17100:	rsble	ip, r2, #32
   17104:	lsl	r1, r1, r2
   17108:	orrle	r1, r1, r0, lsr ip
   1710c:	lslle	r0, r0, r2
   17110:	subs	r4, r4, r3
   17114:	addge	r1, r1, r4, lsl #20
   17118:	orrge	r1, r1, r5
   1711c:	popge	{r4, r5, pc}
   17120:	mvn	r4, r4
   17124:	subs	r4, r4, #31
   17128:	bge	17164 <_obstack_memory_used@@Base+0x354>
   1712c:	adds	r4, r4, #12
   17130:	bgt	1714c <_obstack_memory_used@@Base+0x33c>
   17134:	add	r4, r4, #20
   17138:	rsb	r2, r4, #32
   1713c:	lsr	r0, r0, r4
   17140:	orr	r0, r0, r1, lsl r2
   17144:	orr	r1, r5, r1, lsr r4
   17148:	pop	{r4, r5, pc}
   1714c:	rsb	r4, r4, #12
   17150:	rsb	r2, r4, #32
   17154:	lsr	r0, r0, r2
   17158:	orr	r0, r0, r1, lsl r4
   1715c:	mov	r1, r5
   17160:	pop	{r4, r5, pc}
   17164:	lsr	r0, r1, r4
   17168:	mov	r1, r5
   1716c:	pop	{r4, r5, pc}
   17170:	teq	r4, #0
   17174:	eor	r3, r3, #1048576	; 0x100000
   17178:	eoreq	r1, r1, #1048576	; 0x100000
   1717c:	addeq	r4, r4, #1
   17180:	subne	r5, r5, #1
   17184:	b	17010 <_obstack_memory_used@@Base+0x200>
   17188:	mvns	ip, r4, asr #21
   1718c:	mvnsne	ip, r5, asr #21
   17190:	beq	171f8 <_obstack_memory_used@@Base+0x3e8>
   17194:	teq	r4, r5
   17198:	teqeq	r0, r2
   1719c:	beq	171b0 <_obstack_memory_used@@Base+0x3a0>
   171a0:	orrs	ip, r4, r0
   171a4:	moveq	r1, r3
   171a8:	moveq	r0, r2
   171ac:	pop	{r4, r5, pc}
   171b0:	teq	r1, r3
   171b4:	movne	r1, #0
   171b8:	movne	r0, #0
   171bc:	popne	{r4, r5, pc}
   171c0:	lsrs	ip, r4, #21
   171c4:	bne	171d8 <_obstack_memory_used@@Base+0x3c8>
   171c8:	lsls	r0, r0, #1
   171cc:	adcs	r1, r1, r1
   171d0:	orrcs	r1, r1, #-2147483648	; 0x80000000
   171d4:	pop	{r4, r5, pc}
   171d8:	adds	r4, r4, #4194304	; 0x400000
   171dc:	addcc	r1, r1, #1048576	; 0x100000
   171e0:	popcc	{r4, r5, pc}
   171e4:	and	r5, r1, #-2147483648	; 0x80000000
   171e8:	orr	r1, r5, #2130706432	; 0x7f000000
   171ec:	orr	r1, r1, #15728640	; 0xf00000
   171f0:	mov	r0, #0
   171f4:	pop	{r4, r5, pc}
   171f8:	mvns	ip, r4, asr #21
   171fc:	movne	r1, r3
   17200:	movne	r0, r2
   17204:	mvnseq	ip, r5, asr #21
   17208:	movne	r3, r1
   1720c:	movne	r2, r0
   17210:	orrs	r4, r0, r1, lsl #12
   17214:	orrseq	r5, r2, r3, lsl #12
   17218:	teqeq	r1, r3
   1721c:	orrne	r1, r1, #524288	; 0x80000
   17220:	pop	{r4, r5, pc}
   17224:	teq	r0, #0
   17228:	moveq	r1, #0
   1722c:	bxeq	lr
   17230:	push	{r4, r5, lr}
   17234:	mov	r4, #1024	; 0x400
   17238:	add	r4, r4, #50	; 0x32
   1723c:	mov	r5, #0
   17240:	mov	r1, #0
   17244:	b	170c0 <_obstack_memory_used@@Base+0x2b0>
   17248:	teq	r0, #0
   1724c:	moveq	r1, #0
   17250:	bxeq	lr
   17254:	push	{r4, r5, lr}
   17258:	mov	r4, #1024	; 0x400
   1725c:	add	r4, r4, #50	; 0x32
   17260:	ands	r5, r0, #-2147483648	; 0x80000000
   17264:	rsbmi	r0, r0, #0
   17268:	mov	r1, #0
   1726c:	b	170c0 <_obstack_memory_used@@Base+0x2b0>
   17270:	lsls	r2, r0, #1
   17274:	asr	r1, r2, #3
   17278:	rrx	r1, r1
   1727c:	lsl	r0, r2, #28
   17280:	andsne	r3, r2, #-16777216	; 0xff000000
   17284:	teqne	r3, #-16777216	; 0xff000000
   17288:	eorne	r1, r1, #939524096	; 0x38000000
   1728c:	bxne	lr
   17290:	bics	r2, r2, #-16777216	; 0xff000000
   17294:	bxeq	lr
   17298:	teq	r3, #-16777216	; 0xff000000
   1729c:	orreq	r1, r1, #524288	; 0x80000
   172a0:	bxeq	lr
   172a4:	push	{r4, r5, lr}
   172a8:	mov	r4, #896	; 0x380
   172ac:	and	r5, r1, #-2147483648	; 0x80000000
   172b0:	bic	r1, r1, #-2147483648	; 0x80000000
   172b4:	b	170c0 <_obstack_memory_used@@Base+0x2b0>
   172b8:	orrs	r2, r0, r1
   172bc:	bxeq	lr
   172c0:	push	{r4, r5, lr}
   172c4:	mov	r5, #0
   172c8:	b	172e8 <_obstack_memory_used@@Base+0x4d8>
   172cc:	orrs	r2, r0, r1
   172d0:	bxeq	lr
   172d4:	push	{r4, r5, lr}
   172d8:	ands	r5, r1, #-2147483648	; 0x80000000
   172dc:	bpl	172e8 <_obstack_memory_used@@Base+0x4d8>
   172e0:	rsbs	r0, r0, #0
   172e4:	rsc	r1, r1, #0
   172e8:	mov	r4, #1024	; 0x400
   172ec:	add	r4, r4, #50	; 0x32
   172f0:	lsrs	ip, r1, #22
   172f4:	beq	17064 <_obstack_memory_used@@Base+0x254>
   172f8:	mov	r2, #3
   172fc:	lsrs	ip, ip, #3
   17300:	addne	r2, r2, #3
   17304:	lsrs	ip, ip, #3
   17308:	addne	r2, r2, #3
   1730c:	add	r2, r2, ip, lsr #3
   17310:	rsb	r3, r2, #32
   17314:	lsl	ip, r0, r3
   17318:	lsr	r0, r0, r2
   1731c:	orr	r0, r0, r1, lsl r3
   17320:	lsr	r1, r1, r2
   17324:	add	r4, r4, r2
   17328:	b	17064 <_obstack_memory_used@@Base+0x254>
   1732c:	cmp	r3, #0
   17330:	cmpeq	r2, #0
   17334:	bne	1734c <_obstack_memory_used@@Base+0x53c>
   17338:	cmp	r1, #0
   1733c:	cmpeq	r0, #0
   17340:	mvnne	r1, #0
   17344:	mvnne	r0, #0
   17348:	b	17368 <_obstack_memory_used@@Base+0x558>
   1734c:	sub	sp, sp, #8
   17350:	push	{sp, lr}
   17354:	bl	17378 <_obstack_memory_used@@Base+0x568>
   17358:	ldr	lr, [sp, #4]
   1735c:	add	sp, sp, #8
   17360:	pop	{r2, r3}
   17364:	bx	lr
   17368:	push	{r1, lr}
   1736c:	mov	r0, #8
   17370:	bl	112e8 <raise@plt>
   17374:	pop	{r1, pc}
   17378:	cmp	r1, r3
   1737c:	cmpeq	r0, r2
   17380:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   17384:	mov	r4, r0
   17388:	movcc	r0, #0
   1738c:	mov	r5, r1
   17390:	ldr	lr, [sp, #36]	; 0x24
   17394:	movcc	r1, r0
   17398:	bcc	17494 <_obstack_memory_used@@Base+0x684>
   1739c:	cmp	r3, #0
   173a0:	clzeq	ip, r2
   173a4:	clzne	ip, r3
   173a8:	addeq	ip, ip, #32
   173ac:	cmp	r5, #0
   173b0:	clzeq	r1, r4
   173b4:	addeq	r1, r1, #32
   173b8:	clzne	r1, r5
   173bc:	sub	ip, ip, r1
   173c0:	sub	sl, ip, #32
   173c4:	lsl	r9, r3, ip
   173c8:	rsb	fp, ip, #32
   173cc:	orr	r9, r9, r2, lsl sl
   173d0:	orr	r9, r9, r2, lsr fp
   173d4:	lsl	r8, r2, ip
   173d8:	cmp	r5, r9
   173dc:	cmpeq	r4, r8
   173e0:	movcc	r0, #0
   173e4:	movcc	r1, r0
   173e8:	bcc	17404 <_obstack_memory_used@@Base+0x5f4>
   173ec:	mov	r0, #1
   173f0:	subs	r4, r4, r8
   173f4:	lsl	r1, r0, sl
   173f8:	orr	r1, r1, r0, lsr fp
   173fc:	lsl	r0, r0, ip
   17400:	sbc	r5, r5, r9
   17404:	cmp	ip, #0
   17408:	beq	17494 <_obstack_memory_used@@Base+0x684>
   1740c:	lsr	r6, r8, #1
   17410:	orr	r6, r6, r9, lsl #31
   17414:	lsr	r7, r9, #1
   17418:	mov	r2, ip
   1741c:	b	17440 <_obstack_memory_used@@Base+0x630>
   17420:	subs	r3, r4, r6
   17424:	sbc	r8, r5, r7
   17428:	adds	r3, r3, r3
   1742c:	adc	r8, r8, r8
   17430:	adds	r4, r3, #1
   17434:	adc	r5, r8, #0
   17438:	subs	r2, r2, #1
   1743c:	beq	1745c <_obstack_memory_used@@Base+0x64c>
   17440:	cmp	r5, r7
   17444:	cmpeq	r4, r6
   17448:	bcs	17420 <_obstack_memory_used@@Base+0x610>
   1744c:	adds	r4, r4, r4
   17450:	adc	r5, r5, r5
   17454:	subs	r2, r2, #1
   17458:	bne	17440 <_obstack_memory_used@@Base+0x630>
   1745c:	lsr	r3, r4, ip
   17460:	orr	r3, r3, r5, lsl fp
   17464:	lsr	r2, r5, ip
   17468:	orr	r3, r3, r5, lsr sl
   1746c:	adds	r0, r0, r4
   17470:	mov	r4, r3
   17474:	lsl	r3, r2, ip
   17478:	orr	r3, r3, r4, lsl sl
   1747c:	lsl	ip, r4, ip
   17480:	orr	r3, r3, r4, lsr fp
   17484:	adc	r1, r1, r5
   17488:	subs	r0, r0, ip
   1748c:	mov	r5, r2
   17490:	sbc	r1, r1, r3
   17494:	cmp	lr, #0
   17498:	strdne	r4, [lr]
   1749c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   174a0:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   174a4:	mov	r7, r0
   174a8:	ldr	r6, [pc, #72]	; 174f8 <_obstack_memory_used@@Base+0x6e8>
   174ac:	ldr	r5, [pc, #72]	; 174fc <_obstack_memory_used@@Base+0x6ec>
   174b0:	add	r6, pc, r6
   174b4:	add	r5, pc, r5
   174b8:	sub	r6, r6, r5
   174bc:	mov	r8, r1
   174c0:	mov	r9, r2
   174c4:	bl	112b0 <calloc@plt-0x20>
   174c8:	asrs	r6, r6, #2
   174cc:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   174d0:	mov	r4, #0
   174d4:	add	r4, r4, #1
   174d8:	ldr	r3, [r5], #4
   174dc:	mov	r2, r9
   174e0:	mov	r1, r8
   174e4:	mov	r0, r7
   174e8:	blx	r3
   174ec:	cmp	r6, r4
   174f0:	bne	174d4 <_obstack_memory_used@@Base+0x6c4>
   174f4:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   174f8:	andeq	r1, r1, r4, asr sl
   174fc:	andeq	r1, r1, ip, asr #20
   17500:	bx	lr
   17504:	ldr	r3, [pc, #12]	; 17518 <_obstack_memory_used@@Base+0x708>
   17508:	mov	r1, #0
   1750c:	add	r3, pc, r3
   17510:	ldr	r2, [r3]
   17514:	b	114f8 <__cxa_atexit@plt>
   17518:	andeq	r1, r1, r0, lsl ip
   1751c:	mov	r2, r1
   17520:	mov	r1, r0
   17524:	mov	r0, #3
   17528:	b	115b8 <__xstat64@plt>
   1752c:	mov	r2, r1
   17530:	mov	r1, r0
   17534:	mov	r0, #3
   17538:	b	113d8 <__fxstat64@plt>

Disassembly of section .fini:

0001753c <.fini>:
   1753c:	push	{r3, lr}
   17540:	pop	{r3, pc}
