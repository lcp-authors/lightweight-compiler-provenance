
../repos/coreutils/src/who:     file format elf32-littlearm


Disassembly of section .init:

00011078 <.init>:
   11078:	push	{r3, lr}
   1107c:	bl	113c8 <__assert_fail@plt+0x48>
   11080:	pop	{r3, pc}

Disassembly of section .plt:

00011084 <calloc@plt-0x14>:
   11084:	push	{lr}		; (str lr, [sp, #-4]!)
   11088:	ldr	lr, [pc, #4]	; 11094 <calloc@plt-0x4>
   1108c:	add	lr, pc, lr
   11090:	ldr	pc, [lr, #8]!
   11094:	andeq	r6, r1, ip, ror #30

00011098 <calloc@plt>:
   11098:	add	ip, pc, #0, 12
   1109c:	add	ip, ip, #90112	; 0x16000
   110a0:	ldr	pc, [ip, #3948]!	; 0xf6c

000110a4 <fputs_unlocked@plt>:
   110a4:	add	ip, pc, #0, 12
   110a8:	add	ip, ip, #90112	; 0x16000
   110ac:	ldr	pc, [ip, #3940]!	; 0xf64

000110b0 <raise@plt>:
   110b0:	add	ip, pc, #0, 12
   110b4:	add	ip, ip, #90112	; 0x16000
   110b8:	ldr	pc, [ip, #3932]!	; 0xf5c

000110bc <strcmp@plt>:
   110bc:	add	ip, pc, #0, 12
   110c0:	add	ip, ip, #90112	; 0x16000
   110c4:	ldr	pc, [ip, #3924]!	; 0xf54

000110c8 <fflush@plt>:
   110c8:	add	ip, pc, #0, 12
   110cc:	add	ip, ip, #90112	; 0x16000
   110d0:	ldr	pc, [ip, #3916]!	; 0xf4c

000110d4 <utmpxname@plt>:
   110d4:	add	ip, pc, #0, 12
   110d8:	add	ip, ip, #90112	; 0x16000
   110dc:	ldr	pc, [ip, #3908]!	; 0xf44

000110e0 <free@plt>:
   110e0:	add	ip, pc, #0, 12
   110e4:	add	ip, ip, #90112	; 0x16000
   110e8:	ldr	pc, [ip, #3900]!	; 0xf3c

000110ec <gai_strerror@plt>:
   110ec:	add	ip, pc, #0, 12
   110f0:	add	ip, ip, #90112	; 0x16000
   110f4:	ldr	pc, [ip, #3892]!	; 0xf34

000110f8 <_exit@plt>:
   110f8:	add	ip, pc, #0, 12
   110fc:	add	ip, ip, #90112	; 0x16000
   11100:	ldr	pc, [ip, #3884]!	; 0xf2c

00011104 <memcpy@plt>:
   11104:	add	ip, pc, #0, 12
   11108:	add	ip, ip, #90112	; 0x16000
   1110c:	ldr	pc, [ip, #3876]!	; 0xf24

00011110 <mbsinit@plt>:
   11110:	add	ip, pc, #0, 12
   11114:	add	ip, ip, #90112	; 0x16000
   11118:	ldr	pc, [ip, #3868]!	; 0xf1c

0001111c <time@plt>:
   1111c:	add	ip, pc, #0, 12
   11120:	add	ip, ip, #90112	; 0x16000
   11124:	ldr	pc, [ip, #3860]!	; 0xf14

00011128 <stpcpy@plt>:
   11128:	add	ip, pc, #0, 12
   1112c:	add	ip, ip, #90112	; 0x16000
   11130:	ldr	pc, [ip, #3852]!	; 0xf0c

00011134 <dcgettext@plt>:
   11134:	add	ip, pc, #0, 12
   11138:	add	ip, ip, #90112	; 0x16000
   1113c:	ldr	pc, [ip, #3844]!	; 0xf04

00011140 <strdup@plt>:
   11140:	add	ip, pc, #0, 12
   11144:	add	ip, ip, #90112	; 0x16000
   11148:	ldr	pc, [ip, #3836]!	; 0xefc

0001114c <setutxent@plt>:
   1114c:	add	ip, pc, #0, 12
   11150:	add	ip, ip, #90112	; 0x16000
   11154:	ldr	pc, [ip, #3828]!	; 0xef4

00011158 <realloc@plt>:
   11158:	add	ip, pc, #0, 12
   1115c:	add	ip, ip, #90112	; 0x16000
   11160:	ldr	pc, [ip, #3820]!	; 0xeec

00011164 <textdomain@plt>:
   11164:	add	ip, pc, #0, 12
   11168:	add	ip, ip, #90112	; 0x16000
   1116c:	ldr	pc, [ip, #3812]!	; 0xee4

00011170 <iswprint@plt>:
   11170:	add	ip, pc, #0, 12
   11174:	add	ip, ip, #90112	; 0x16000
   11178:	ldr	pc, [ip, #3804]!	; 0xedc

0001117c <fwrite@plt>:
   1117c:	add	ip, pc, #0, 12
   11180:	add	ip, ip, #90112	; 0x16000
   11184:	ldr	pc, [ip, #3796]!	; 0xed4

00011188 <lseek64@plt>:
   11188:	add	ip, pc, #0, 12
   1118c:	add	ip, ip, #90112	; 0x16000
   11190:	ldr	pc, [ip, #3788]!	; 0xecc

00011194 <__ctype_get_mb_cur_max@plt>:
   11194:	add	ip, pc, #0, 12
   11198:	add	ip, ip, #90112	; 0x16000
   1119c:	ldr	pc, [ip, #3780]!	; 0xec4

000111a0 <__fpending@plt>:
   111a0:	add	ip, pc, #0, 12
   111a4:	add	ip, ip, #90112	; 0x16000
   111a8:	ldr	pc, [ip, #3772]!	; 0xebc

000111ac <mbrtowc@plt>:
   111ac:	add	ip, pc, #0, 12
   111b0:	add	ip, ip, #90112	; 0x16000
   111b4:	ldr	pc, [ip, #3764]!	; 0xeb4

000111b8 <error@plt>:
   111b8:	add	ip, pc, #0, 12
   111bc:	add	ip, ip, #90112	; 0x16000
   111c0:	ldr	pc, [ip, #3756]!	; 0xeac

000111c4 <__asprintf_chk@plt>:
   111c4:	add	ip, pc, #0, 12
   111c8:	add	ip, ip, #90112	; 0x16000
   111cc:	ldr	pc, [ip, #3748]!	; 0xea4

000111d0 <puts@plt>:
   111d0:	add	ip, pc, #0, 12
   111d4:	add	ip, ip, #90112	; 0x16000
   111d8:	ldr	pc, [ip, #3740]!	; 0xe9c

000111dc <malloc@plt>:
   111dc:	add	ip, pc, #0, 12
   111e0:	add	ip, ip, #90112	; 0x16000
   111e4:	ldr	pc, [ip, #3732]!	; 0xe94

000111e8 <__libc_start_main@plt>:
   111e8:	add	ip, pc, #0, 12
   111ec:	add	ip, ip, #90112	; 0x16000
   111f0:	ldr	pc, [ip, #3724]!	; 0xe8c

000111f4 <strftime@plt>:
   111f4:	add	ip, pc, #0, 12
   111f8:	add	ip, ip, #90112	; 0x16000
   111fc:	ldr	pc, [ip, #3716]!	; 0xe84

00011200 <__freading@plt>:
   11200:	add	ip, pc, #0, 12
   11204:	add	ip, ip, #90112	; 0x16000
   11208:	ldr	pc, [ip, #3708]!	; 0xe7c

0001120c <localtime@plt>:
   1120c:	add	ip, pc, #0, 12
   11210:	add	ip, ip, #90112	; 0x16000
   11214:	ldr	pc, [ip, #3700]!	; 0xe74

00011218 <__gmon_start__@plt>:
   11218:	add	ip, pc, #0, 12
   1121c:	add	ip, ip, #90112	; 0x16000
   11220:	ldr	pc, [ip, #3692]!	; 0xe6c

00011224 <getopt_long@plt>:
   11224:	add	ip, pc, #0, 12
   11228:	add	ip, ip, #90112	; 0x16000
   1122c:	ldr	pc, [ip, #3684]!	; 0xe64

00011230 <kill@plt>:
   11230:	add	ip, pc, #0, 12
   11234:	add	ip, ip, #90112	; 0x16000
   11238:	ldr	pc, [ip, #3676]!	; 0xe5c

0001123c <__ctype_b_loc@plt>:
   1123c:	add	ip, pc, #0, 12
   11240:	add	ip, ip, #90112	; 0x16000
   11244:	ldr	pc, [ip, #3668]!	; 0xe54

00011248 <exit@plt>:
   11248:	add	ip, pc, #0, 12
   1124c:	add	ip, ip, #90112	; 0x16000
   11250:	ldr	pc, [ip, #3660]!	; 0xe4c

00011254 <bcmp@plt>:
   11254:	add	ip, pc, #0, 12
   11258:	add	ip, ip, #90112	; 0x16000
   1125c:	ldr	pc, [ip, #3652]!	; 0xe44

00011260 <ttyname@plt>:
   11260:	add	ip, pc, #0, 12
   11264:	add	ip, ip, #90112	; 0x16000
   11268:	ldr	pc, [ip, #3644]!	; 0xe3c

0001126c <strlen@plt>:
   1126c:	add	ip, pc, #0, 12
   11270:	add	ip, ip, #90112	; 0x16000
   11274:	ldr	pc, [ip, #3636]!	; 0xe34

00011278 <strchr@plt>:
   11278:	add	ip, pc, #0, 12
   1127c:	add	ip, ip, #90112	; 0x16000
   11280:	ldr	pc, [ip, #3628]!	; 0xe2c

00011284 <__errno_location@plt>:
   11284:	add	ip, pc, #0, 12
   11288:	add	ip, ip, #90112	; 0x16000
   1128c:	ldr	pc, [ip, #3620]!	; 0xe24

00011290 <__sprintf_chk@plt>:
   11290:	add	ip, pc, #0, 12
   11294:	add	ip, ip, #90112	; 0x16000
   11298:	ldr	pc, [ip, #3612]!	; 0xe1c

0001129c <__cxa_atexit@plt>:
   1129c:	add	ip, pc, #0, 12
   112a0:	add	ip, ip, #90112	; 0x16000
   112a4:	ldr	pc, [ip, #3604]!	; 0xe14

000112a8 <memset@plt>:
   112a8:	add	ip, pc, #0, 12
   112ac:	add	ip, ip, #90112	; 0x16000
   112b0:	ldr	pc, [ip, #3596]!	; 0xe0c

000112b4 <strncpy@plt>:
   112b4:	add	ip, pc, #0, 12
   112b8:	add	ip, ip, #90112	; 0x16000
   112bc:	ldr	pc, [ip, #3588]!	; 0xe04

000112c0 <__printf_chk@plt>:
   112c0:	add	ip, pc, #0, 12
   112c4:	add	ip, ip, #90112	; 0x16000
   112c8:	ldr	pc, [ip, #3580]!	; 0xdfc

000112cc <fileno@plt>:
   112cc:	add	ip, pc, #0, 12
   112d0:	add	ip, ip, #90112	; 0x16000
   112d4:	ldr	pc, [ip, #3572]!	; 0xdf4

000112d8 <__fprintf_chk@plt>:
   112d8:	add	ip, pc, #0, 12
   112dc:	add	ip, ip, #90112	; 0x16000
   112e0:	ldr	pc, [ip, #3564]!	; 0xdec

000112e4 <fclose@plt>:
   112e4:	add	ip, pc, #0, 12
   112e8:	add	ip, ip, #90112	; 0x16000
   112ec:	ldr	pc, [ip, #3556]!	; 0xde4

000112f0 <fseeko64@plt>:
   112f0:	add	ip, pc, #0, 12
   112f4:	add	ip, ip, #90112	; 0x16000
   112f8:	ldr	pc, [ip, #3548]!	; 0xddc

000112fc <endutxent@plt>:
   112fc:	add	ip, pc, #0, 12
   11300:	add	ip, ip, #90112	; 0x16000
   11304:	ldr	pc, [ip, #3540]!	; 0xdd4

00011308 <setlocale@plt>:
   11308:	add	ip, pc, #0, 12
   1130c:	add	ip, ip, #90112	; 0x16000
   11310:	ldr	pc, [ip, #3532]!	; 0xdcc

00011314 <strrchr@plt>:
   11314:	add	ip, pc, #0, 12
   11318:	add	ip, ip, #90112	; 0x16000
   1131c:	ldr	pc, [ip, #3524]!	; 0xdc4

00011320 <nl_langinfo@plt>:
   11320:	add	ip, pc, #0, 12
   11324:	add	ip, ip, #90112	; 0x16000
   11328:	ldr	pc, [ip, #3516]!	; 0xdbc

0001132c <freeaddrinfo@plt>:
   1132c:	add	ip, pc, #0, 12
   11330:	add	ip, ip, #90112	; 0x16000
   11334:	ldr	pc, [ip, #3508]!	; 0xdb4

00011338 <getaddrinfo@plt>:
   11338:	add	ip, pc, #0, 12
   1133c:	add	ip, ip, #90112	; 0x16000
   11340:	ldr	pc, [ip, #3500]!	; 0xdac

00011344 <bindtextdomain@plt>:
   11344:	add	ip, pc, #0, 12
   11348:	add	ip, ip, #90112	; 0x16000
   1134c:	ldr	pc, [ip, #3492]!	; 0xda4

00011350 <__xstat64@plt>:
   11350:	add	ip, pc, #0, 12
   11354:	add	ip, ip, #90112	; 0x16000
   11358:	ldr	pc, [ip, #3484]!	; 0xd9c

0001135c <strncmp@plt>:
   1135c:	add	ip, pc, #0, 12
   11360:	add	ip, ip, #90112	; 0x16000
   11364:	ldr	pc, [ip, #3476]!	; 0xd94

00011368 <abort@plt>:
   11368:	add	ip, pc, #0, 12
   1136c:	add	ip, ip, #90112	; 0x16000
   11370:	ldr	pc, [ip, #3468]!	; 0xd8c

00011374 <getutxent@plt>:
   11374:	add	ip, pc, #0, 12
   11378:	add	ip, ip, #90112	; 0x16000
   1137c:	ldr	pc, [ip, #3460]!	; 0xd84

00011380 <__assert_fail@plt>:
   11380:	add	ip, pc, #0, 12
   11384:	add	ip, ip, #90112	; 0x16000
   11388:	ldr	pc, [ip, #3452]!	; 0xd7c

Disassembly of section .text:

0001138c <.text>:
   1138c:	mov	fp, #0
   11390:	mov	lr, #0
   11394:	pop	{r1}		; (ldr r1, [sp], #4)
   11398:	mov	r2, sp
   1139c:	push	{r2}		; (str r2, [sp, #-4]!)
   113a0:	push	{r0}		; (str r0, [sp, #-4]!)
   113a4:	ldr	ip, [pc, #16]	; 113bc <__assert_fail@plt+0x3c>
   113a8:	push	{ip}		; (str ip, [sp, #-4]!)
   113ac:	ldr	r0, [pc, #12]	; 113c0 <__assert_fail@plt+0x40>
   113b0:	ldr	r3, [pc, #12]	; 113c4 <__assert_fail@plt+0x44>
   113b4:	bl	111e8 <__libc_start_main@plt>
   113b8:	bl	11368 <abort@plt>
   113bc:			; <UNDEFINED> instruction: 0x000164b8
   113c0:	andeq	r1, r1, ip, ror r7
   113c4:	andeq	r6, r1, r8, asr r4
   113c8:	ldr	r3, [pc, #20]	; 113e4 <__assert_fail@plt+0x64>
   113cc:	ldr	r2, [pc, #20]	; 113e8 <__assert_fail@plt+0x68>
   113d0:	add	r3, pc, r3
   113d4:	ldr	r2, [r3, r2]
   113d8:	cmp	r2, #0
   113dc:	bxeq	lr
   113e0:	b	11218 <__gmon_start__@plt>
   113e4:	andeq	r6, r1, r8, lsr #24
   113e8:	andeq	r0, r0, r8, lsl #2
   113ec:	ldr	r0, [pc, #24]	; 1140c <__assert_fail@plt+0x8c>
   113f0:	ldr	r3, [pc, #24]	; 11410 <__assert_fail@plt+0x90>
   113f4:	cmp	r3, r0
   113f8:	bxeq	lr
   113fc:	ldr	r3, [pc, #16]	; 11414 <__assert_fail@plt+0x94>
   11400:	cmp	r3, #0
   11404:	bxeq	lr
   11408:	bx	r3
   1140c:	andeq	r8, r2, r8, ror #2
   11410:	andeq	r8, r2, r8, ror #2
   11414:	andeq	r0, r0, r0
   11418:	ldr	r0, [pc, #36]	; 11444 <__assert_fail@plt+0xc4>
   1141c:	ldr	r1, [pc, #36]	; 11448 <__assert_fail@plt+0xc8>
   11420:	sub	r1, r1, r0
   11424:	asr	r1, r1, #2
   11428:	add	r1, r1, r1, lsr #31
   1142c:	asrs	r1, r1, #1
   11430:	bxeq	lr
   11434:	ldr	r3, [pc, #16]	; 1144c <__assert_fail@plt+0xcc>
   11438:	cmp	r3, #0
   1143c:	bxeq	lr
   11440:	bx	r3
   11444:	andeq	r8, r2, r8, ror #2
   11448:	andeq	r8, r2, r8, ror #2
   1144c:	andeq	r0, r0, r0
   11450:	push	{r4, lr}
   11454:	ldr	r4, [pc, #24]	; 11474 <__assert_fail@plt+0xf4>
   11458:	ldrb	r3, [r4]
   1145c:	cmp	r3, #0
   11460:	popne	{r4, pc}
   11464:	bl	113ec <__assert_fail@plt+0x6c>
   11468:	mov	r3, #1
   1146c:	strb	r3, [r4]
   11470:	pop	{r4, pc}
   11474:	andeq	r8, r2, r0, lsl #3
   11478:	b	11418 <__assert_fail@plt+0x98>
   1147c:	push	{fp, lr}
   11480:	mov	fp, sp
   11484:	sub	sp, sp, #56	; 0x38
   11488:	mov	r4, r0
   1148c:	cmp	r0, #0
   11490:	bne	11738 <__assert_fail@plt+0x3b8>
   11494:	movw	r1, #25867	; 0x650b
   11498:	mov	r0, #0
   1149c:	mov	r2, #5
   114a0:	movt	r1, #1
   114a4:	bl	11134 <dcgettext@plt>
   114a8:	mov	r1, r0
   114ac:	movw	r0, #33284	; 0x8204
   114b0:	movt	r0, #2
   114b4:	ldr	r2, [r0]
   114b8:	mov	r0, #1
   114bc:	bl	112c0 <__printf_chk@plt>
   114c0:	movw	r1, #25911	; 0x6537
   114c4:	mov	r0, #0
   114c8:	mov	r2, #5
   114cc:	movt	r1, #1
   114d0:	bl	11134 <dcgettext@plt>
   114d4:	movw	r7, #33148	; 0x817c
   114d8:	movt	r7, #2
   114dc:	ldr	r1, [r7]
   114e0:	bl	110a4 <fputs_unlocked@plt>
   114e4:	movw	r1, #25971	; 0x6573
   114e8:	mov	r0, #0
   114ec:	mov	r2, #5
   114f0:	movt	r1, #1
   114f4:	bl	11134 <dcgettext@plt>
   114f8:	ldr	r1, [r7]
   114fc:	bl	110a4 <fputs_unlocked@plt>
   11500:	movw	r1, #26166	; 0x6636
   11504:	mov	r0, #0
   11508:	mov	r2, #5
   1150c:	movt	r1, #1
   11510:	bl	11134 <dcgettext@plt>
   11514:	ldr	r1, [r7]
   11518:	bl	110a4 <fputs_unlocked@plt>
   1151c:	movw	r1, #26216	; 0x6668
   11520:	mov	r0, #0
   11524:	mov	r2, #5
   11528:	movt	r1, #1
   1152c:	bl	11134 <dcgettext@plt>
   11530:	ldr	r1, [r7]
   11534:	bl	110a4 <fputs_unlocked@plt>
   11538:	movw	r1, #26403	; 0x6723
   1153c:	mov	r0, #0
   11540:	mov	r2, #5
   11544:	movt	r1, #1
   11548:	bl	11134 <dcgettext@plt>
   1154c:	ldr	r1, [r7]
   11550:	bl	110a4 <fputs_unlocked@plt>
   11554:	movw	r1, #26626	; 0x6802
   11558:	mov	r0, #0
   1155c:	mov	r2, #5
   11560:	movt	r1, #1
   11564:	bl	11134 <dcgettext@plt>
   11568:	ldr	r1, [r7]
   1156c:	bl	110a4 <fputs_unlocked@plt>
   11570:	movw	r1, #26789	; 0x68a5
   11574:	mov	r0, #0
   11578:	mov	r2, #5
   1157c:	movt	r1, #1
   11580:	bl	11134 <dcgettext@plt>
   11584:	ldr	r1, [r7]
   11588:	bl	110a4 <fputs_unlocked@plt>
   1158c:	movw	r1, #26834	; 0x68d2
   11590:	mov	r0, #0
   11594:	mov	r2, #5
   11598:	movt	r1, #1
   1159c:	bl	11134 <dcgettext@plt>
   115a0:	ldr	r1, [r7]
   115a4:	bl	110a4 <fputs_unlocked@plt>
   115a8:	movw	r1, #26888	; 0x6908
   115ac:	mov	r0, #0
   115b0:	mov	r2, #5
   115b4:	movt	r1, #1
   115b8:	bl	11134 <dcgettext@plt>
   115bc:	movw	r2, #27013	; 0x6985
   115c0:	movw	r3, #27027	; 0x6993
   115c4:	mov	r1, r0
   115c8:	mov	r0, #1
   115cc:	movt	r2, #1
   115d0:	movt	r3, #1
   115d4:	bl	112c0 <__printf_chk@plt>
   115d8:	movw	r0, #28224	; 0x6e40
   115dc:	mov	r2, #48	; 0x30
   115e0:	mov	r6, sp
   115e4:	movw	r5, #27041	; 0x69a1
   115e8:	movt	r0, #1
   115ec:	movt	r5, #1
   115f0:	add	r1, r0, #32
   115f4:	add	r3, r0, #16
   115f8:	vld1.64	{d18-d19}, [r0], r2
   115fc:	vld1.64	{d16-d17}, [r1]
   11600:	vld1.64	{d20-d21}, [r3]
   11604:	vldr	d22, [r0]
   11608:	add	r1, r6, #32
   1160c:	add	r0, r6, #16
   11610:	vst1.64	{d16-d17}, [r1]
   11614:	movw	r1, #27189	; 0x6a35
   11618:	vst1.64	{d20-d21}, [r0]
   1161c:	mov	r0, r6
   11620:	movt	r1, #1
   11624:	vst1.64	{d18-d19}, [r0], r2
   11628:	vstr	d22, [r0]
   1162c:	mov	r0, r5
   11630:	bl	110bc <strcmp@plt>
   11634:	cmp	r0, #0
   11638:	ldrne	r1, [r6, #8]!
   1163c:	cmpne	r1, #0
   11640:	bne	1162c <__assert_fail@plt+0x2ac>
   11644:	movw	r1, #27284	; 0x6a94
   11648:	ldr	r6, [r6, #4]
   1164c:	mov	r0, #0
   11650:	mov	r2, #5
   11654:	movt	r1, #1
   11658:	bl	11134 <dcgettext@plt>
   1165c:	movw	r2, #27084	; 0x69cc
   11660:	movw	r3, #27307	; 0x6aab
   11664:	mov	r1, r0
   11668:	mov	r0, #1
   1166c:	movt	r2, #1
   11670:	movt	r3, #1
   11674:	bl	112c0 <__printf_chk@plt>
   11678:	cmp	r6, #0
   1167c:	mov	r0, #5
   11680:	mov	r1, #0
   11684:	moveq	r6, r5
   11688:	bl	11308 <setlocale@plt>
   1168c:	cmp	r0, #0
   11690:	beq	116c8 <__assert_fail@plt+0x348>
   11694:	movw	r1, #27347	; 0x6ad3
   11698:	mov	r2, #3
   1169c:	movt	r1, #1
   116a0:	bl	1135c <strncmp@plt>
   116a4:	cmp	r0, #0
   116a8:	beq	116c8 <__assert_fail@plt+0x348>
   116ac:	movw	r1, #27351	; 0x6ad7
   116b0:	mov	r0, #0
   116b4:	mov	r2, #5
   116b8:	movt	r1, #1
   116bc:	bl	11134 <dcgettext@plt>
   116c0:	ldr	r1, [r7]
   116c4:	bl	110a4 <fputs_unlocked@plt>
   116c8:	movw	r1, #27422	; 0x6b1e
   116cc:	mov	r0, #0
   116d0:	mov	r2, #5
   116d4:	movt	r1, #1
   116d8:	bl	11134 <dcgettext@plt>
   116dc:	movw	r2, #27307	; 0x6aab
   116e0:	mov	r1, r0
   116e4:	mov	r0, #1
   116e8:	mov	r3, r5
   116ec:	movt	r2, #1
   116f0:	bl	112c0 <__printf_chk@plt>
   116f4:	movw	r1, #27449	; 0x6b39
   116f8:	mov	r0, #0
   116fc:	mov	r2, #5
   11700:	movt	r1, #1
   11704:	bl	11134 <dcgettext@plt>
   11708:	mov	r1, r0
   1170c:	movw	r0, #27217	; 0x6a51
   11710:	movw	r3, #27499	; 0x6b6b
   11714:	cmp	r6, r5
   11718:	mov	r2, r6
   1171c:	movt	r0, #1
   11720:	movt	r3, #1
   11724:	moveq	r3, r0
   11728:	mov	r0, #1
   1172c:	bl	112c0 <__printf_chk@plt>
   11730:	mov	r0, r4
   11734:	bl	11248 <exit@plt>
   11738:	movw	r0, #33144	; 0x8178
   1173c:	movw	r1, #25828	; 0x64e4
   11740:	mov	r2, #5
   11744:	movt	r0, #2
   11748:	movt	r1, #1
   1174c:	ldr	r5, [r0]
   11750:	mov	r0, #0
   11754:	bl	11134 <dcgettext@plt>
   11758:	mov	r2, r0
   1175c:	movw	r0, #33284	; 0x8204
   11760:	mov	r1, #1
   11764:	movt	r0, #2
   11768:	ldr	r3, [r0]
   1176c:	mov	r0, r5
   11770:	bl	112d8 <__fprintf_chk@plt>
   11774:	mov	r0, r4
   11778:	bl	11248 <exit@plt>
   1177c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   11780:	add	fp, sp, #28
   11784:	sub	sp, sp, #20
   11788:	mov	r5, r0
   1178c:	ldr	r0, [r1]
   11790:	mov	r4, r1
   11794:	bl	13264 <__assert_fail@plt+0x1ee4>
   11798:	movw	r1, #27499	; 0x6b6b
   1179c:	mov	r0, #6
   117a0:	movt	r1, #1
   117a4:	bl	11308 <setlocale@plt>
   117a8:	movw	r6, #27088	; 0x69d0
   117ac:	movw	r1, #27045	; 0x69a5
   117b0:	movt	r6, #1
   117b4:	movt	r1, #1
   117b8:	mov	r0, r6
   117bc:	bl	11344 <bindtextdomain@plt>
   117c0:	mov	r0, r6
   117c4:	bl	11164 <textdomain@plt>
   117c8:	movw	r0, #12328	; 0x3028
   117cc:	movt	r0, #1
   117d0:	bl	164bc <__assert_fail@plt+0x513c>
   117d4:	movw	r9, #27936	; 0x6d20
   117d8:	movw	r7, #33156	; 0x8184
   117dc:	mov	r6, #1
   117e0:	mov	sl, #1
   117e4:	movt	r9, #1
   117e8:	movt	r7, #2
   117ec:	b	11808 <__assert_fail@plt+0x488>
   117f0:	movw	r0, #33158	; 0x8186
   117f4:	movt	r0, #2
   117f8:	strb	r6, [r0]
   117fc:	movw	r0, #33164	; 0x818c
   11800:	movt	r0, #2
   11804:	strb	r6, [r0]
   11808:	movw	r2, #27069	; 0x69bd
   1180c:	mov	r8, sl
   11810:	mov	sl, #0
   11814:	mov	r0, r5
   11818:	mov	r1, r4
   1181c:	mov	r3, r9
   11820:	movt	r2, #1
   11824:	str	sl, [sp]
   11828:	bl	11224 <getopt_long@plt>
   1182c:	add	r1, r0, #3
   11830:	cmp	r1, #122	; 0x7a
   11834:	bhi	11a3c <__assert_fail@plt+0x6bc>
   11838:	add	r2, pc, #4
   1183c:	mov	r0, r7
   11840:	ldr	pc, [r2, r1, lsl #2]
   11844:	andeq	r1, r1, ip, lsr ip
   11848:	muleq	r1, r8, ip
   1184c:	andeq	r1, r1, ip, asr #22
   11850:	andeq	r1, r1, r4, lsr ip
   11854:	andeq	r1, r1, r4, lsr ip
   11858:	andeq	r1, r1, r4, lsr ip
   1185c:	andeq	r1, r1, r4, lsr ip
   11860:	andeq	r1, r1, r4, lsr ip
   11864:	andeq	r1, r1, r4, lsr ip
   11868:	andeq	r1, r1, r4, lsr ip
   1186c:	andeq	r1, r1, r4, lsr ip
   11870:	andeq	r1, r1, r4, lsr ip
   11874:	andeq	r1, r1, r4, lsr ip
   11878:	andeq	r1, r1, r4, lsr ip
   1187c:	andeq	r1, r1, r4, lsr ip
   11880:	andeq	r1, r1, r4, lsr ip
   11884:	andeq	r1, r1, r4, lsr ip
   11888:	andeq	r1, r1, r4, lsr ip
   1188c:	andeq	r1, r1, r4, lsr ip
   11890:	andeq	r1, r1, r4, lsr ip
   11894:	andeq	r1, r1, r4, lsr ip
   11898:	andeq	r1, r1, r4, lsr ip
   1189c:	andeq	r1, r1, r4, lsr ip
   118a0:	andeq	r1, r1, r4, lsr ip
   118a4:	andeq	r1, r1, r4, lsr ip
   118a8:	andeq	r1, r1, r4, lsr ip
   118ac:	andeq	r1, r1, r4, lsr ip
   118b0:	andeq	r1, r1, r4, lsr ip
   118b4:	andeq	r1, r1, r4, lsr ip
   118b8:	andeq	r1, r1, r4, lsr ip
   118bc:	andeq	r1, r1, r4, lsr ip
   118c0:	andeq	r1, r1, r4, lsr ip
   118c4:	andeq	r1, r1, r4, lsr ip
   118c8:	andeq	r1, r1, r4, lsr ip
   118cc:	andeq	r1, r1, r4, lsr ip
   118d0:	andeq	r1, r1, r4, lsr ip
   118d4:	andeq	r1, r1, r4, lsr ip
   118d8:	andeq	r1, r1, r4, lsr ip
   118dc:	andeq	r1, r1, r4, lsr ip
   118e0:	andeq	r1, r1, r4, lsr ip
   118e4:	andeq	r1, r1, r4, lsr ip
   118e8:	andeq	r1, r1, r4, lsr ip
   118ec:	andeq	r1, r1, r4, lsr ip
   118f0:	andeq	r1, r1, r4, lsr ip
   118f4:	andeq	r1, r1, r4, lsr ip
   118f8:	andeq	r1, r1, r4, lsr ip
   118fc:	andeq	r1, r1, r4, lsr ip
   11900:	andeq	r1, r1, r4, lsr ip
   11904:	andeq	r1, r1, r4, lsr ip
   11908:	andeq	r1, r1, r4, lsr ip
   1190c:	andeq	r1, r1, r4, lsr ip
   11910:	andeq	r1, r1, r4, lsr ip
   11914:	andeq	r1, r1, r4, lsr ip
   11918:	andeq	r1, r1, r4, lsr ip
   1191c:	andeq	r1, r1, r4, lsr ip
   11920:	andeq	r1, r1, r4, lsr ip
   11924:	andeq	r1, r1, r4, lsr ip
   11928:	andeq	r1, r1, r4, lsr ip
   1192c:	andeq	r1, r1, r4, lsr ip
   11930:	andeq	r1, r1, r4, lsr ip
   11934:	andeq	r1, r1, r4, lsr ip
   11938:	andeq	r1, r1, r4, lsr ip
   1193c:	andeq	r1, r1, r4, lsr ip
   11940:	andeq	r1, r1, r4, lsr ip
   11944:	andeq	r1, r1, r4, lsr ip
   11948:	andeq	r1, r1, r4, lsr ip
   1194c:	andeq	r1, r1, r4, lsr ip
   11950:	andeq	r1, r1, r4, lsr ip
   11954:	andeq	r1, r1, r4, lsr ip
   11958:	andeq	r1, r1, r4, lsr ip
   1195c:	andeq	r1, r1, r4, lsr ip
   11960:	andeq	r1, r1, r4, lsr ip
   11964:	andeq	r1, r1, r4, lsr ip
   11968:	andeq	r1, r1, r4, lsr ip
   1196c:	andeq	r1, r1, r4, lsr ip
   11970:	andeq	r1, r1, r4, lsl #21
   11974:	andeq	r1, r1, r4, lsr ip
   11978:	andeq	r1, r1, r4, lsr ip
   1197c:	andeq	r1, r1, r4, lsr ip
   11980:	andeq	r1, r1, r4, lsr ip
   11984:	andeq	r1, r1, r4, lsr ip
   11988:	andeq	r1, r1, r4, lsr ip
   1198c:	andeq	r1, r1, r4, lsr ip
   11990:	andeq	r1, r1, r4, lsr ip
   11994:	andeq	r1, r1, r4, lsr ip
   11998:	andeq	r1, r1, r4, lsr ip
   1199c:	andeq	r1, r1, r4, lsr ip
   119a0:	andeq	r1, r1, r0, lsr sl
   119a4:	andeq	r1, r1, r4, lsr ip
   119a8:	andeq	r1, r1, r4, lsr ip
   119ac:	andeq	r1, r1, r4, lsr ip
   119b0:	andeq	r1, r1, r4, lsr ip
   119b4:	andeq	r1, r1, r4, lsr ip
   119b8:	andeq	r1, r1, r4, lsr ip
   119bc:	andeq	r1, r1, r4, lsr ip
   119c0:	andeq	r1, r1, r4, lsr ip
   119c4:	andeq	r1, r1, r4, lsr ip
   119c8:	andeq	r1, r1, r4, lsr ip
   119cc:	andeq	r1, r1, r4, lsr ip
   119d0:	andeq	r1, r1, r4, lsr ip
   119d4:	andeq	r1, r1, ip, lsr #21
   119d8:	andeq	r1, r1, r4, asr #22
   119dc:	andeq	r1, r1, r4, lsr ip
   119e0:	andeq	r1, r1, ip, ror #20
   119e4:	andeq	r1, r1, r4, lsr ip
   119e8:	andeq	r1, r1, r4, lsr ip
   119ec:	andeq	r1, r1, r4, lsr ip
   119f0:	andeq	r1, r1, r4, lsr ip
   119f4:	andeq	r1, r1, r4, lsr ip
   119f8:	andeq	r1, r1, r4, lsr ip
   119fc:	andeq	r1, r1, r4, lsr ip
   11a00:	strdeq	r1, [r1], -r0
   11a04:	andeq	r1, r1, r0, lsr #22
   11a08:	andeq	r1, r1, r4, lsr ip
   11a0c:	andeq	r1, r1, r4, lsr ip
   11a10:	muleq	r1, r0, sl
   11a14:	andeq	r1, r1, r0, asr sl
   11a18:	andeq	r1, r1, r0, lsr #21
   11a1c:	andeq	r1, r1, r8, lsr fp
   11a20:	andeq	r1, r1, ip, asr sl
   11a24:	andeq	r1, r1, ip, lsr #22
   11a28:	andeq	r1, r1, r4, lsr ip
   11a2c:	andeq	r1, r1, r0, lsr sl
   11a30:	movw	r0, #33163	; 0x818b
   11a34:	movt	r0, #2
   11a38:	b	11b40 <__assert_fail@plt+0x7c0>
   11a3c:	cmp	r0, #256	; 0x100
   11a40:	bne	11c34 <__assert_fail@plt+0x8b4>
   11a44:	movw	r0, #33170	; 0x8192
   11a48:	movt	r0, #2
   11a4c:	b	11b40 <__assert_fail@plt+0x7c0>
   11a50:	movw	r0, #33168	; 0x8190
   11a54:	movt	r0, #2
   11a58:	b	11b40 <__assert_fail@plt+0x7c0>
   11a5c:	movw	r0, #33161	; 0x8189
   11a60:	movt	r0, #2
   11a64:	strb	r6, [r0]
   11a68:	b	11808 <__assert_fail@plt+0x488>
   11a6c:	movw	r0, #33164	; 0x818c
   11a70:	movt	r0, #2
   11a74:	strb	r6, [r0]
   11a78:	movw	r0, #33157	; 0x8185
   11a7c:	movt	r0, #2
   11a80:	b	11b0c <__assert_fail@plt+0x78c>
   11a84:	movw	r0, #33166	; 0x818e
   11a88:	movt	r0, #2
   11a8c:	b	11b40 <__assert_fail@plt+0x7c0>
   11a90:	movw	r0, #33159	; 0x8187
   11a94:	movt	r0, #2
   11a98:	strb	r6, [r0]
   11a9c:	b	11808 <__assert_fail@plt+0x488>
   11aa0:	movw	r0, #33160	; 0x8188
   11aa4:	movt	r0, #2
   11aa8:	b	117f8 <__assert_fail@plt+0x478>
   11aac:	movw	r0, #33157	; 0x8185
   11ab0:	strb	r6, [r7]
   11ab4:	movt	r0, #2
   11ab8:	strb	r6, [r0]
   11abc:	movw	r0, #33158	; 0x8186
   11ac0:	movt	r0, #2
   11ac4:	strb	r6, [r0]
   11ac8:	movw	r0, #33159	; 0x8187
   11acc:	movt	r0, #2
   11ad0:	strb	r6, [r0]
   11ad4:	movw	r0, #33160	; 0x8188
   11ad8:	movt	r0, #2
   11adc:	strb	r6, [r0]
   11ae0:	movw	r0, #33161	; 0x8189
   11ae4:	movt	r0, #2
   11ae8:	strb	r6, [r0]
   11aec:	movw	r0, #33162	; 0x818a
   11af0:	movt	r0, #2
   11af4:	strb	r6, [r0]
   11af8:	movw	r0, #33163	; 0x818b
   11afc:	movt	r0, #2
   11b00:	strb	r6, [r0]
   11b04:	movw	r0, #33164	; 0x818c
   11b08:	movt	r0, #2
   11b0c:	strb	r6, [r0]
   11b10:	movw	r0, #33165	; 0x818d
   11b14:	movt	r0, #2
   11b18:	strb	r6, [r0]
   11b1c:	b	11808 <__assert_fail@plt+0x488>
   11b20:	movw	r0, #33167	; 0x818f
   11b24:	movt	r0, #2
   11b28:	b	11b40 <__assert_fail@plt+0x7c0>
   11b2c:	movw	r0, #33162	; 0x818a
   11b30:	movt	r0, #2
   11b34:	b	117f8 <__assert_fail@plt+0x478>
   11b38:	movw	r0, #33169	; 0x8191
   11b3c:	movt	r0, #2
   11b40:	mov	sl, r8
   11b44:	strb	r6, [r0]
   11b48:	b	11808 <__assert_fail@plt+0x488>
   11b4c:	tst	r8, #1
   11b50:	beq	11b70 <__assert_fail@plt+0x7f0>
   11b54:	movw	r0, #33169	; 0x8191
   11b58:	mov	r1, #1
   11b5c:	movt	r0, #2
   11b60:	strb	r1, [r0]
   11b64:	movw	r0, #33162	; 0x818a
   11b68:	movt	r0, #2
   11b6c:	strb	r1, [r0]
   11b70:	movw	r0, #33165	; 0x818d
   11b74:	movt	r0, #2
   11b78:	ldrb	r0, [r0]
   11b7c:	cmp	r0, #1
   11b80:	movweq	r0, #33169	; 0x8191
   11b84:	moveq	r1, #0
   11b88:	movteq	r0, #2
   11b8c:	strbeq	r1, [r0]
   11b90:	mov	r0, #2
   11b94:	bl	13138 <__assert_fail@plt+0x1db8>
   11b98:	movw	r1, #27145	; 0x6a09
   11b9c:	movw	r2, #27160	; 0x6a18
   11ba0:	cmp	r0, #0
   11ba4:	movw	r0, #33172	; 0x8194
   11ba8:	movw	r6, #33136	; 0x8170
   11bac:	movt	r1, #1
   11bb0:	movt	r2, #1
   11bb4:	movt	r0, #2
   11bb8:	movt	r6, #2
   11bbc:	movne	r2, r1
   11bc0:	movw	r1, #33176	; 0x8198
   11bc4:	movt	r1, #2
   11bc8:	str	r2, [r0]
   11bcc:	mov	r0, #12
   11bd0:	movwne	r0, #16
   11bd4:	str	r0, [r1]
   11bd8:	ldr	r0, [r6]
   11bdc:	sub	r1, r5, r0
   11be0:	add	r2, r1, #1
   11be4:	cmp	r2, #2
   11be8:	bcc	11c0c <__assert_fail@plt+0x88c>
   11bec:	cmp	r1, #1
   11bf0:	beq	11c1c <__assert_fail@plt+0x89c>
   11bf4:	cmp	r1, #2
   11bf8:	bne	11ca0 <__assert_fail@plt+0x920>
   11bfc:	movw	r0, #33167	; 0x818f
   11c00:	mov	r1, #1
   11c04:	movt	r0, #2
   11c08:	strb	r1, [r0]
   11c0c:	movw	r0, #27013	; 0x6985
   11c10:	mov	r1, #1
   11c14:	movt	r0, #1
   11c18:	b	11c24 <__assert_fail@plt+0x8a4>
   11c1c:	ldr	r0, [r4, r0, lsl #2]
   11c20:	mov	r1, #0
   11c24:	bl	11ce4 <__assert_fail@plt+0x964>
   11c28:	mov	r0, #0
   11c2c:	sub	sp, fp, #28
   11c30:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   11c34:	mov	r0, #1
   11c38:	bl	1147c <__assert_fail@plt+0xfc>
   11c3c:	movw	r0, #33056	; 0x8120
   11c40:	movw	r2, #27131	; 0x69fb
   11c44:	movw	r6, #27098	; 0x69da
   11c48:	movw	r7, #27115	; 0x69eb
   11c4c:	mov	r1, #0
   11c50:	movt	r0, #2
   11c54:	movt	r2, #1
   11c58:	movt	r6, #1
   11c5c:	movt	r7, #1
   11c60:	ldr	r3, [r0]
   11c64:	movw	r0, #33148	; 0x817c
   11c68:	stm	sp, {r6, r7}
   11c6c:	str	r2, [sp, #8]
   11c70:	movw	r2, #27084	; 0x69cc
   11c74:	str	r1, [sp, #12]
   11c78:	movw	r1, #27041	; 0x69a1
   11c7c:	movt	r0, #2
   11c80:	movt	r1, #1
   11c84:	movt	r2, #1
   11c88:	ldr	r0, [r0]
   11c8c:	bl	156c4 <__assert_fail@plt+0x4344>
   11c90:	mov	r0, #0
   11c94:	bl	11248 <exit@plt>
   11c98:	mov	r0, #0
   11c9c:	bl	1147c <__assert_fail@plt+0xfc>
   11ca0:	movw	r1, #27172	; 0x6a24
   11ca4:	mov	r0, #0
   11ca8:	mov	r2, #5
   11cac:	movt	r1, #1
   11cb0:	bl	11134 <dcgettext@plt>
   11cb4:	mov	r5, r0
   11cb8:	ldr	r0, [r6]
   11cbc:	add	r0, r4, r0, lsl #2
   11cc0:	ldr	r0, [r0, #8]
   11cc4:	bl	14eb8 <__assert_fail@plt+0x3b38>
   11cc8:	mov	r3, r0
   11ccc:	mov	r0, #0
   11cd0:	mov	r1, #0
   11cd4:	mov	r2, r5
   11cd8:	bl	111b8 <error@plt>
   11cdc:	mov	r0, #1
   11ce0:	bl	1147c <__assert_fail@plt+0xfc>
   11ce4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   11ce8:	add	fp, sp, #28
   11cec:	sub	sp, sp, #492	; 0x1ec
   11cf0:	mov	r3, r1
   11cf4:	add	r1, sp, #60	; 0x3c
   11cf8:	add	r2, sp, #56	; 0x38
   11cfc:	mov	r4, r0
   11d00:	bl	15068 <__assert_fail@plt+0x3ce8>
   11d04:	cmp	r0, #0
   11d08:	bne	12c54 <__assert_fail@plt+0x18d4>
   11d0c:	movw	r0, #33168	; 0x8190
   11d10:	ldr	r4, [sp, #56]	; 0x38
   11d14:	ldr	r9, [sp, #60]	; 0x3c
   11d18:	movt	r0, #2
   11d1c:	ldrb	r0, [r0]
   11d20:	cmp	r0, #1
   11d24:	bne	11dac <__assert_fail@plt+0xa2c>
   11d28:	mov	r5, #0
   11d2c:	cmp	r9, #0
   11d30:	beq	12c20 <__assert_fail@plt+0x18a0>
   11d34:	movw	r7, #27499	; 0x6b6b
   11d38:	movw	r8, #27605	; 0x6bd5
   11d3c:	movw	sl, #27754	; 0x6c6a
   11d40:	movt	r7, #1
   11d44:	movt	r8, #1
   11d48:	movt	sl, #1
   11d4c:	b	11d5c <__assert_fail@plt+0x9dc>
   11d50:	add	r4, r4, #384	; 0x180
   11d54:	cmp	r9, #0
   11d58:	beq	12c20 <__assert_fail@plt+0x18a0>
   11d5c:	ldrb	r0, [r4, #44]	; 0x2c
   11d60:	sub	r9, r9, #1
   11d64:	cmp	r0, #0
   11d68:	beq	11d50 <__assert_fail@plt+0x9d0>
   11d6c:	ldrh	r0, [r4]
   11d70:	cmp	r0, #7
   11d74:	bne	11d50 <__assert_fail@plt+0x9d0>
   11d78:	mov	r0, r4
   11d7c:	bl	15004 <__assert_fail@plt+0x3c84>
   11d80:	mov	r6, r0
   11d84:	mov	r0, #1
   11d88:	mov	r1, r8
   11d8c:	mov	r2, r7
   11d90:	mov	r3, r6
   11d94:	bl	112c0 <__printf_chk@plt>
   11d98:	mov	r0, r6
   11d9c:	bl	13110 <__assert_fail@plt+0x1d90>
   11da0:	add	r5, r5, #1
   11da4:	mov	r7, sl
   11da8:	b	11d50 <__assert_fail@plt+0x9d0>
   11dac:	movw	r0, #33166	; 0x818e
   11db0:	movt	r0, #2
   11db4:	ldrb	r0, [r0]
   11db8:	cmp	r0, #1
   11dbc:	bne	11e88 <__assert_fail@plt+0xb08>
   11dc0:	movw	r1, #27630	; 0x6bee
   11dc4:	mov	r0, #0
   11dc8:	mov	r2, #5
   11dcc:	movt	r1, #1
   11dd0:	bl	11134 <dcgettext@plt>
   11dd4:	movw	r1, #27635	; 0x6bf3
   11dd8:	str	r0, [sp, #52]	; 0x34
   11ddc:	mov	r0, #0
   11de0:	mov	r2, #5
   11de4:	movt	r1, #1
   11de8:	bl	11134 <dcgettext@plt>
   11dec:	movw	r1, #27640	; 0x6bf8
   11df0:	mov	r8, r0
   11df4:	mov	r0, #0
   11df8:	mov	r2, #5
   11dfc:	movt	r1, #1
   11e00:	bl	11134 <dcgettext@plt>
   11e04:	movw	r1, #27645	; 0x6bfd
   11e08:	mov	sl, r0
   11e0c:	mov	r0, #0
   11e10:	mov	r2, #5
   11e14:	movt	r1, #1
   11e18:	bl	11134 <dcgettext@plt>
   11e1c:	movw	r1, #27650	; 0x6c02
   11e20:	mov	r5, r0
   11e24:	mov	r0, #0
   11e28:	mov	r2, #5
   11e2c:	movt	r1, #1
   11e30:	bl	11134 <dcgettext@plt>
   11e34:	movw	r1, #27654	; 0x6c06
   11e38:	mov	r6, r0
   11e3c:	mov	r0, #0
   11e40:	mov	r2, #5
   11e44:	movt	r1, #1
   11e48:	bl	11134 <dcgettext@plt>
   11e4c:	movw	r1, #27662	; 0x6c0e
   11e50:	mov	r7, r0
   11e54:	mov	r0, #0
   11e58:	mov	r2, #5
   11e5c:	movt	r1, #1
   11e60:	bl	11134 <dcgettext@plt>
   11e64:	add	r1, sp, #8
   11e68:	stm	sp, {r8, sl}
   11e6c:	mov	r2, #32
   11e70:	mvn	r3, #0
   11e74:	stm	r1, {r5, r6, r7}
   11e78:	ldr	r1, [sp, #52]	; 0x34
   11e7c:	str	r0, [sp, #20]
   11e80:	mvn	r0, #0
   11e84:	bl	12ca4 <__assert_fail@plt+0x1924>
   11e88:	movw	r8, #33167	; 0x818f
   11e8c:	movt	r8, #2
   11e90:	ldrb	r0, [r8]
   11e94:	cmp	r0, #1
   11e98:	bne	11ecc <__assert_fail@plt+0xb4c>
   11e9c:	mov	r0, #0
   11ea0:	bl	11260 <ttyname@plt>
   11ea4:	cmp	r0, #0
   11ea8:	beq	12c44 <__assert_fail@plt+0x18c4>
   11eac:	movw	r1, #27624	; 0x6be8
   11eb0:	mov	r2, #5
   11eb4:	mov	r5, r0
   11eb8:	movt	r1, #1
   11ebc:	bl	1135c <strncmp@plt>
   11ec0:	cmp	r0, #0
   11ec4:	addeq	r5, r5, #5
   11ec8:	str	r5, [sp, #48]	; 0x30
   11ecc:	cmp	r9, #0
   11ed0:	beq	12c44 <__assert_fail@plt+0x18c4>
   11ed4:	sub	r0, fp, #184	; 0xb8
   11ed8:	movw	sl, #27499	; 0x6b6b
   11edc:	orr	r0, r0, #5
   11ee0:	movt	sl, #1
   11ee4:	str	r0, [sp, #24]
   11ee8:	mov	r0, #-2147483648	; 0x80000000
   11eec:	str	r0, [sp, #52]	; 0x34
   11ef0:	b	11f2c <__assert_fail@plt+0xbac>
   11ef4:	ldr	r0, [sp, #48]	; 0x30
   11ef8:	add	r1, r4, #8
   11efc:	mov	r2, #32
   11f00:	bl	1135c <strncmp@plt>
   11f04:	cmp	r0, #0
   11f08:	beq	11f38 <__assert_fail@plt+0xbb8>
   11f0c:	ldrh	r0, [r4]
   11f10:	sub	r9, r9, #1
   11f14:	cmp	r0, #2
   11f18:	ldreq	r0, [r4, #340]	; 0x154
   11f1c:	add	r4, r4, #384	; 0x180
   11f20:	streq	r0, [sp, #52]	; 0x34
   11f24:	cmp	r9, #0
   11f28:	beq	12c44 <__assert_fail@plt+0x18c4>
   11f2c:	ldrb	r0, [r8]
   11f30:	cmp	r0, #1
   11f34:	beq	11ef4 <__assert_fail@plt+0xb74>
   11f38:	movw	r0, #33162	; 0x818a
   11f3c:	add	r7, r4, #332	; 0x14c
   11f40:	movt	r0, #2
   11f44:	ldrb	r0, [r0]
   11f48:	cmp	r0, #1
   11f4c:	bne	12040 <__assert_fail@plt+0xcc0>
   11f50:	mov	r6, r4
   11f54:	ldrb	r0, [r6, #44]!	; 0x2c
   11f58:	cmp	r0, #0
   11f5c:	beq	12040 <__assert_fail@plt+0xcc0>
   11f60:	ldrh	r0, [r4]
   11f64:	cmp	r0, #7
   11f68:	bne	12040 <__assert_fail@plt+0xcc0>
   11f6c:	ldr	r0, [r4, #4]
   11f70:	movw	r3, #27724	; 0x6c4c
   11f74:	mov	r1, #1
   11f78:	mov	r2, #12
   11f7c:	movt	r3, #1
   11f80:	str	r0, [sp]
   11f84:	sub	r0, fp, #196	; 0xc4
   11f88:	bl	11290 <__sprintf_chk@plt>
   11f8c:	mov	r0, r4
   11f90:	ldrb	r1, [r0, #8]!
   11f94:	str	r0, [sp, #44]	; 0x2c
   11f98:	sub	r0, fp, #184	; 0xb8
   11f9c:	cmp	r1, #47	; 0x2f
   11fa0:	beq	11fc8 <__assert_fail@plt+0xc48>
   11fa4:	mov	r0, #47	; 0x2f
   11fa8:	ldr	r2, [sp, #24]
   11fac:	cmp	r1, #0
   11fb0:	strh	r0, [fp, #-180]	; 0xffffff4c
   11fb4:	movw	r0, #25647	; 0x642f
   11fb8:	movt	r0, #30309	; 0x7665
   11fbc:	str	r0, [fp, #-184]	; 0xffffff48
   11fc0:	mov	r0, r2
   11fc4:	beq	12000 <__assert_fail@plt+0xc80>
   11fc8:	add	r2, r4, #40	; 0x28
   11fcc:	mov	r5, #0
   11fd0:	strb	r1, [r0, r5]
   11fd4:	add	r1, r4, r5
   11fd8:	mov	r3, r5
   11fdc:	add	r1, r1, #9
   11fe0:	cmp	r1, r2
   11fe4:	bcs	11ff8 <__assert_fail@plt+0xc78>
   11fe8:	ldrb	r1, [r1]
   11fec:	add	r5, r3, #1
   11ff0:	cmp	r1, #0
   11ff4:	bne	11fd0 <__assert_fail@plt+0xc50>
   11ff8:	add	r0, r0, r3
   11ffc:	add	r2, r0, #1
   12000:	mov	r0, #0
   12004:	sub	r1, fp, #184	; 0xb8
   12008:	strb	r0, [r2]
   1200c:	mov	r0, #3
   12010:	sub	r2, fp, #136	; 0x88
   12014:	bl	11350 <__xstat64@plt>
   12018:	mov	r1, #63	; 0x3f
   1201c:	cmp	r0, #0
   12020:	beq	124ec <__assert_fail@plt+0x116c>
   12024:	movw	r3, #27733	; 0x6c55
   12028:	str	r1, [sp, #40]	; 0x28
   1202c:	sub	r0, fp, #143	; 0x8f
   12030:	mov	r1, #1
   12034:	mov	r2, #7
   12038:	movt	r3, #1
   1203c:	b	12618 <__assert_fail@plt+0x1298>
   12040:	movw	r0, #33160	; 0x8188
   12044:	movt	r0, #2
   12048:	ldrb	r0, [r0]
   1204c:	cmp	r0, #1
   12050:	bne	121b8 <__assert_fail@plt+0xe38>
   12054:	ldrh	r0, [r4]
   12058:	cmp	r0, #1
   1205c:	bne	121b8 <__assert_fail@plt+0xe38>
   12060:	ldr	r7, [r4, #4]
   12064:	asr	r0, r7, #31
   12068:	add	r6, r7, r0, lsr #24
   1206c:	movw	r0, #33228	; 0x81cc
   12070:	movt	r0, #2
   12074:	ldr	r5, [r0]
   12078:	cmp	r5, #0
   1207c:	bne	120b0 <__assert_fail@plt+0xd30>
   12080:	movw	r1, #27852	; 0x6ccc
   12084:	mov	r0, #0
   12088:	mov	r2, #5
   1208c:	movt	r1, #1
   12090:	bl	11134 <dcgettext@plt>
   12094:	bl	1126c <strlen@plt>
   12098:	add	r0, r0, #3
   1209c:	bl	158f8 <__assert_fail@plt+0x4578>
   120a0:	mov	r5, r0
   120a4:	movw	r0, #33228	; 0x81cc
   120a8:	movt	r0, #2
   120ac:	str	r5, [r0]
   120b0:	movw	r1, #27852	; 0x6ccc
   120b4:	mov	r0, #0
   120b8:	mov	r2, #5
   120bc:	asr	r6, r6, #8
   120c0:	movt	r1, #1
   120c4:	bl	11134 <dcgettext@plt>
   120c8:	movw	r3, #27862	; 0x6cd6
   120cc:	uxtb	r1, r7
   120d0:	stm	sp, {r0, r1}
   120d4:	mov	r0, r5
   120d8:	mov	r1, #1
   120dc:	mvn	r2, #0
   120e0:	movt	r3, #1
   120e4:	bl	11290 <__sprintf_chk@plt>
   120e8:	movw	r0, #33232	; 0x81d0
   120ec:	movt	r0, #2
   120f0:	ldr	r5, [r0]
   120f4:	cmp	r5, #0
   120f8:	bne	1212c <__assert_fail@plt+0xdac>
   120fc:	movw	r1, #27868	; 0x6cdc
   12100:	mov	r0, #0
   12104:	mov	r2, #5
   12108:	movt	r1, #1
   1210c:	bl	11134 <dcgettext@plt>
   12110:	bl	1126c <strlen@plt>
   12114:	add	r0, r0, #2
   12118:	bl	158f8 <__assert_fail@plt+0x4578>
   1211c:	mov	r5, r0
   12120:	movw	r0, #33232	; 0x81d0
   12124:	movt	r0, #2
   12128:	str	r5, [r0]
   1212c:	movw	r1, #27868	; 0x6cdc
   12130:	mov	r0, #0
   12134:	mov	r2, #5
   12138:	movt	r1, #1
   1213c:	bl	11134 <dcgettext@plt>
   12140:	uxtb	r6, r6
   12144:	movw	r3, #27874	; 0x6ce2
   12148:	mvn	r2, #0
   1214c:	movt	r3, #1
   12150:	cmp	r6, #78	; 0x4e
   12154:	mov	r1, r6
   12158:	movweq	r1, #83	; 0x53
   1215c:	stm	sp, {r0, r1}
   12160:	mov	r0, r5
   12164:	mov	r1, #1
   12168:	bl	11290 <__sprintf_chk@plt>
   1216c:	movw	r0, #33228	; 0x81cc
   12170:	movt	r0, #2
   12174:	ldr	r5, [r0]
   12178:	ldr	r0, [r4, #340]	; 0x154
   1217c:	str	r0, [sp, #64]	; 0x40
   12180:	add	r0, sp, #64	; 0x40
   12184:	bl	1120c <localtime@plt>
   12188:	cmp	r0, #0
   1218c:	beq	12498 <__assert_fail@plt+0x1118>
   12190:	mov	r3, r0
   12194:	movw	r0, #33172	; 0x8194
   12198:	movw	r7, #33194	; 0x81aa
   1219c:	mov	r1, #33	; 0x21
   121a0:	movt	r0, #2
   121a4:	movt	r7, #2
   121a8:	ldr	r2, [r0]
   121ac:	mov	r0, r7
   121b0:	bl	111f4 <strftime@plt>
   121b4:	b	124b0 <__assert_fail@plt+0x1130>
   121b8:	movw	r0, #33156	; 0x8184
   121bc:	movt	r0, #2
   121c0:	ldrb	r0, [r0]
   121c4:	cmp	r0, #1
   121c8:	bne	121e8 <__assert_fail@plt+0xe68>
   121cc:	ldrh	r0, [r4]
   121d0:	cmp	r0, #2
   121d4:	bne	121e8 <__assert_fail@plt+0xe68>
   121d8:	movw	r1, #27879	; 0x6ce7
   121dc:	mov	r0, #0
   121e0:	movt	r1, #1
   121e4:	b	12214 <__assert_fail@plt+0xe94>
   121e8:	movw	r0, #33161	; 0x8189
   121ec:	movt	r0, #2
   121f0:	ldrb	r0, [r0]
   121f4:	cmp	r0, #1
   121f8:	bne	12260 <__assert_fail@plt+0xee0>
   121fc:	ldrh	r0, [r4]
   12200:	cmp	r0, #3
   12204:	bne	12260 <__assert_fail@plt+0xee0>
   12208:	movw	r1, #27891	; 0x6cf3
   1220c:	mov	r0, #0
   12210:	movt	r1, #1
   12214:	mov	r2, #5
   12218:	bl	11134 <dcgettext@plt>
   1221c:	mov	r5, r0
   12220:	ldr	r0, [r4, #340]	; 0x154
   12224:	str	r0, [sp, #64]	; 0x40
   12228:	add	r0, sp, #64	; 0x40
   1222c:	bl	1120c <localtime@plt>
   12230:	cmp	r0, #0
   12234:	beq	12470 <__assert_fail@plt+0x10f0>
   12238:	mov	r3, r0
   1223c:	movw	r0, #33172	; 0x8194
   12240:	movw	r6, #33194	; 0x81aa
   12244:	mov	r1, #33	; 0x21
   12248:	movt	r0, #2
   1224c:	movt	r6, #2
   12250:	ldr	r2, [r0]
   12254:	mov	r0, r6
   12258:	bl	111f4 <strftime@plt>
   1225c:	b	12488 <__assert_fail@plt+0x1108>
   12260:	movw	r0, #33159	; 0x8187
   12264:	movt	r0, #2
   12268:	ldrb	r0, [r0]
   1226c:	cmp	r0, #1
   12270:	bne	12310 <__assert_fail@plt+0xf90>
   12274:	ldrh	r0, [r4]
   12278:	cmp	r0, #5
   1227c:	bne	12310 <__assert_fail@plt+0xf90>
   12280:	movw	r5, #27904	; 0x6d00
   12284:	mov	r0, #0
   12288:	mov	r2, #5
   1228c:	movt	r5, #1
   12290:	mov	r1, r5
   12294:	bl	11134 <dcgettext@plt>
   12298:	bl	1126c <strlen@plt>
   1229c:	add	r0, r0, #5
   122a0:	bl	158f8 <__assert_fail@plt+0x4578>
   122a4:	mov	r6, r0
   122a8:	mov	r0, #0
   122ac:	mov	r1, r5
   122b0:	mov	r2, #5
   122b4:	bl	11134 <dcgettext@plt>
   122b8:	mov	r1, r0
   122bc:	mov	r0, r6
   122c0:	bl	11128 <stpcpy@plt>
   122c4:	ldrb	r2, [r4, #40]	; 0x28
   122c8:	cmp	r2, #0
   122cc:	beq	125dc <__assert_fail@plt+0x125c>
   122d0:	mov	r1, r0
   122d4:	strb	r2, [r1], #1
   122d8:	ldrb	r2, [r4, #41]	; 0x29
   122dc:	cmp	r2, #0
   122e0:	beq	12910 <__assert_fail@plt+0x1590>
   122e4:	strb	r2, [r0, #1]
   122e8:	ldrb	r1, [r4, #42]	; 0x2a
   122ec:	cmp	r1, #0
   122f0:	beq	1290c <__assert_fail@plt+0x158c>
   122f4:	strb	r1, [r0, #2]
   122f8:	ldrb	r1, [r4, #43]	; 0x2b
   122fc:	cmp	r1, #0
   12300:	addeq	r1, r0, #3
   12304:	strbne	r1, [r0, #3]
   12308:	addne	r1, r0, #4
   1230c:	b	12910 <__assert_fail@plt+0x1590>
   12310:	movw	r0, #33158	; 0x8186
   12314:	movt	r0, #2
   12318:	ldrb	r0, [r0]
   1231c:	cmp	r0, #1
   12320:	bne	123c0 <__assert_fail@plt+0x1040>
   12324:	ldrh	r0, [r4]
   12328:	cmp	r0, #6
   1232c:	bne	123c0 <__assert_fail@plt+0x1040>
   12330:	movw	r5, #27904	; 0x6d00
   12334:	mov	r0, #0
   12338:	mov	r2, #5
   1233c:	movt	r5, #1
   12340:	mov	r1, r5
   12344:	bl	11134 <dcgettext@plt>
   12348:	bl	1126c <strlen@plt>
   1234c:	add	r0, r0, #5
   12350:	bl	158f8 <__assert_fail@plt+0x4578>
   12354:	mov	r6, r0
   12358:	mov	r0, #0
   1235c:	mov	r1, r5
   12360:	mov	r2, #5
   12364:	bl	11134 <dcgettext@plt>
   12368:	mov	r1, r0
   1236c:	mov	r0, r6
   12370:	bl	11128 <stpcpy@plt>
   12374:	ldrb	r2, [r4, #40]	; 0x28
   12378:	cmp	r2, #0
   1237c:	beq	127d8 <__assert_fail@plt+0x1458>
   12380:	mov	r1, r0
   12384:	strb	r2, [r1], #1
   12388:	ldrb	r2, [r4, #41]	; 0x29
   1238c:	cmp	r2, #0
   12390:	beq	129b4 <__assert_fail@plt+0x1634>
   12394:	strb	r2, [r0, #1]
   12398:	ldrb	r1, [r4, #42]	; 0x2a
   1239c:	cmp	r1, #0
   123a0:	beq	129b0 <__assert_fail@plt+0x1630>
   123a4:	strb	r1, [r0, #2]
   123a8:	ldrb	r1, [r4, #43]	; 0x2b
   123ac:	cmp	r1, #0
   123b0:	addeq	r1, r0, #3
   123b4:	strbne	r1, [r0, #3]
   123b8:	addne	r1, r0, #4
   123bc:	b	129b4 <__assert_fail@plt+0x1634>
   123c0:	movw	r0, #33157	; 0x8185
   123c4:	movt	r0, #2
   123c8:	ldrb	r0, [r0]
   123cc:	cmp	r0, #1
   123d0:	bne	11f0c <__assert_fail@plt+0xb8c>
   123d4:	ldrh	r0, [r4]
   123d8:	cmp	r0, #8
   123dc:	bne	11f0c <__assert_fail@plt+0xb8c>
   123e0:	movw	r5, #27904	; 0x6d00
   123e4:	mov	r0, #0
   123e8:	mov	r2, #5
   123ec:	movt	r5, #1
   123f0:	mov	r1, r5
   123f4:	bl	11134 <dcgettext@plt>
   123f8:	bl	1126c <strlen@plt>
   123fc:	add	r0, r0, #5
   12400:	bl	158f8 <__assert_fail@plt+0x4578>
   12404:	mov	r8, r0
   12408:	mov	r0, #0
   1240c:	mov	r1, r5
   12410:	mov	r2, #5
   12414:	bl	11134 <dcgettext@plt>
   12418:	mov	r1, r0
   1241c:	mov	r0, r8
   12420:	bl	11128 <stpcpy@plt>
   12424:	ldrb	r2, [r4, #40]	; 0x28
   12428:	cmp	r2, #0
   1242c:	beq	12818 <__assert_fail@plt+0x1498>
   12430:	mov	r1, r0
   12434:	strb	r2, [r1], #1
   12438:	ldrb	r2, [r4, #41]	; 0x29
   1243c:	cmp	r2, #0
   12440:	beq	12a90 <__assert_fail@plt+0x1710>
   12444:	strb	r2, [r0, #1]
   12448:	ldrb	r1, [r4, #42]	; 0x2a
   1244c:	cmp	r1, #0
   12450:	beq	12a8c <__assert_fail@plt+0x170c>
   12454:	strb	r1, [r0, #2]
   12458:	ldrb	r1, [r4, #43]	; 0x2b
   1245c:	cmp	r1, #0
   12460:	addeq	r1, r0, #3
   12464:	strbne	r1, [r0, #3]
   12468:	addne	r1, r0, #4
   1246c:	b	12a90 <__assert_fail@plt+0x1710>
   12470:	ldr	r0, [sp, #64]	; 0x40
   12474:	movw	r2, #33194	; 0x81aa
   12478:	movt	r2, #2
   1247c:	asr	r1, r0, #31
   12480:	bl	131a4 <__assert_fail@plt+0x1e24>
   12484:	mov	r6, r0
   12488:	stm	sp, {r5, r6, sl}
   1248c:	str	sl, [sp, #12]
   12490:	str	sl, [sp, #16]
   12494:	b	124d4 <__assert_fail@plt+0x1154>
   12498:	ldr	r0, [sp, #64]	; 0x40
   1249c:	movw	r2, #33194	; 0x81aa
   124a0:	movt	r2, #2
   124a4:	asr	r1, r0, #31
   124a8:	bl	131a4 <__assert_fail@plt+0x1e24>
   124ac:	mov	r7, r0
   124b0:	movw	r1, #33232	; 0x81d0
   124b4:	sub	r2, r6, #32
   124b8:	stm	sp, {r5, r7, sl}
   124bc:	str	sl, [sp, #12]
   124c0:	movt	r1, #2
   124c4:	cmp	r2, #95	; 0x5f
   124c8:	ldr	r1, [r1]
   124cc:	movcs	r1, sl
   124d0:	str	r1, [sp, #16]
   124d4:	mvn	r0, #0
   124d8:	mov	r1, sl
   124dc:	mov	r2, #32
   124e0:	mvn	r3, #0
   124e4:	str	sl, [sp, #20]
   124e8:	b	12904 <__assert_fail@plt+0x1584>
   124ec:	ldrb	r0, [fp, #-120]	; 0xffffff88
   124f0:	ldr	r5, [fp, #-64]	; 0xffffffc0
   124f4:	mov	r1, #43	; 0x2b
   124f8:	tst	r0, #16
   124fc:	movweq	r1, #45	; 0x2d
   12500:	cmp	r5, #0
   12504:	beq	12024 <__assert_fail@plt+0xca4>
   12508:	movw	r0, #33052	; 0x811c
   1250c:	str	r1, [sp, #40]	; 0x28
   12510:	movt	r0, #2
   12514:	ldr	r0, [r0]
   12518:	cmp	r0, #-2147483648	; 0x80000000
   1251c:	bne	1252c <__assert_fail@plt+0x11ac>
   12520:	movw	r0, #33052	; 0x811c
   12524:	movt	r0, #2
   12528:	bl	1111c <time@plt>
   1252c:	ldr	r0, [sp, #52]	; 0x34
   12530:	cmp	r5, r0
   12534:	ble	125e4 <__assert_fail@plt+0x1264>
   12538:	movw	r0, #33052	; 0x811c
   1253c:	movt	r0, #2
   12540:	ldr	r0, [r0]
   12544:	cmp	r0, r5
   12548:	blt	125e4 <__assert_fail@plt+0x1264>
   1254c:	movw	r1, #44672	; 0xae80
   12550:	movt	r1, #65534	; 0xfffe
   12554:	add	r1, r0, r1
   12558:	cmp	r1, r5
   1255c:	bge	125e4 <__assert_fail@plt+0x1264>
   12560:	sub	r1, r0, r5
   12564:	movw	r0, #27750	; 0x6c66
   12568:	movt	r0, #1
   1256c:	cmp	r1, #60	; 0x3c
   12570:	blt	125f8 <__assert_fail@plt+0x1278>
   12574:	movw	r0, #20864	; 0x5180
   12578:	movt	r0, #1
   1257c:	cmp	r1, r0
   12580:	bge	12c84 <__assert_fail@plt+0x1904>
   12584:	movw	r0, #46021	; 0xb3c5
   12588:	movw	r5, #33188	; 0x81a4
   1258c:	movw	r3, #27836	; 0x6cbc
   12590:	movt	r0, #37282	; 0x91a2
   12594:	movt	r5, #2
   12598:	movt	r3, #1
   1259c:	umull	r0, r2, r1, r0
   125a0:	lsr	r0, r2, #11
   125a4:	mov	r2, #3600	; 0xe10
   125a8:	mls	r1, r0, r2, r1
   125ac:	movw	r2, #34953	; 0x8889
   125b0:	movt	r2, #34952	; 0x8888
   125b4:	uxth	r1, r1
   125b8:	umull	r1, r2, r1, r2
   125bc:	lsr	r1, r2, #5
   125c0:	stm	sp, {r0, r1}
   125c4:	mov	r0, r5
   125c8:	mov	r1, #1
   125cc:	mov	r2, #6
   125d0:	bl	11290 <__sprintf_chk@plt>
   125d4:	mov	r0, r5
   125d8:	b	125f8 <__assert_fail@plt+0x1278>
   125dc:	mov	r1, r0
   125e0:	b	12910 <__assert_fail@plt+0x1590>
   125e4:	movw	r1, #27846	; 0x6cc6
   125e8:	mov	r0, #0
   125ec:	mov	r2, #5
   125f0:	movt	r1, #1
   125f4:	bl	11134 <dcgettext@plt>
   125f8:	movw	r3, #27728	; 0x6c50
   125fc:	mov	r1, #6
   12600:	str	r0, [sp, #4]
   12604:	sub	r0, fp, #143	; 0x8f
   12608:	mov	r2, #7
   1260c:	str	r1, [sp]
   12610:	mov	r1, #1
   12614:	movt	r3, #1
   12618:	bl	11290 <__sprintf_chk@plt>
   1261c:	ldrb	r0, [r4, #76]	; 0x4c
   12620:	cmp	r0, #0
   12624:	beq	12738 <__assert_fail@plt+0x13b8>
   12628:	str	r6, [sp, #32]
   1262c:	mov	r2, #0
   12630:	add	r6, sp, #64	; 0x40
   12634:	strb	r0, [r6, r2]
   12638:	add	r0, r4, r2
   1263c:	mov	r1, r2
   12640:	add	r0, r0, #77	; 0x4d
   12644:	cmp	r0, r7
   12648:	bcs	1265c <__assert_fail@plt+0x12dc>
   1264c:	ldrb	r0, [r0]
   12650:	add	r2, r1, #1
   12654:	cmp	r0, #0
   12658:	bne	12634 <__assert_fail@plt+0x12b4>
   1265c:	add	r0, r6, r1
   12660:	mov	sl, #0
   12664:	mov	r1, #58	; 0x3a
   12668:	strb	sl, [r0, #1]
   1266c:	mov	r0, r6
   12670:	bl	11278 <strchr@plt>
   12674:	mov	r1, #0
   12678:	cmp	r0, #0
   1267c:	movw	r5, #33184	; 0x81a0
   12680:	str	r1, [sp, #36]	; 0x24
   12684:	movne	r1, #0
   12688:	movt	r5, #2
   1268c:	strbne	r1, [r0], #1
   12690:	strne	r0, [sp, #36]	; 0x24
   12694:	ldrb	r0, [sp, #64]	; 0x40
   12698:	cmp	r0, #0
   1269c:	beq	126c0 <__assert_fail@plt+0x1340>
   126a0:	movw	r0, #33170	; 0x8192
   126a4:	movt	r0, #2
   126a8:	ldrb	r0, [r0]
   126ac:	cmp	r0, #1
   126b0:	bne	126c0 <__assert_fail@plt+0x1340>
   126b4:	mov	r0, r6
   126b8:	bl	12ecc <__assert_fail@plt+0x1b4c>
   126bc:	mov	sl, r0
   126c0:	cmp	sl, #0
   126c4:	ldr	r5, [r5]
   126c8:	str	sl, [sp, #28]
   126cc:	moveq	sl, r6
   126d0:	mov	r0, sl
   126d4:	bl	1126c <strlen@plt>
   126d8:	ldr	r7, [sp, #36]	; 0x24
   126dc:	mov	r8, r0
   126e0:	cmp	r7, #0
   126e4:	beq	1275c <__assert_fail@plt+0x13dc>
   126e8:	mov	r0, r7
   126ec:	bl	1126c <strlen@plt>
   126f0:	ldr	r6, [sp, #32]
   126f4:	add	r0, r8, r0
   126f8:	add	r0, r0, #4
   126fc:	cmp	r5, r0
   12700:	bcs	127a0 <__assert_fail@plt+0x1420>
   12704:	movw	r1, #33184	; 0x81a0
   12708:	movt	r1, #2
   1270c:	str	r0, [r1]
   12710:	movw	r0, #33180	; 0x819c
   12714:	mov	r5, r1
   12718:	movt	r0, #2
   1271c:	mov	r8, r0
   12720:	ldr	r0, [r0]
   12724:	bl	13110 <__assert_fail@plt+0x1d90>
   12728:	ldr	r0, [r5]
   1272c:	bl	158f8 <__assert_fail@plt+0x4578>
   12730:	str	r0, [r8]
   12734:	b	127ac <__assert_fail@plt+0x142c>
   12738:	movw	r5, #33184	; 0x81a0
   1273c:	movt	r5, #2
   12740:	ldr	r0, [r5]
   12744:	cmp	r0, #0
   12748:	beq	127e0 <__assert_fail@plt+0x1460>
   1274c:	movw	r0, #33180	; 0x819c
   12750:	movt	r0, #2
   12754:	ldr	r0, [r0]
   12758:	b	12808 <__assert_fail@plt+0x1488>
   1275c:	ldr	r6, [sp, #32]
   12760:	add	r0, r8, #3
   12764:	cmp	r5, r0
   12768:	bcs	12820 <__assert_fail@plt+0x14a0>
   1276c:	movw	r1, #33184	; 0x81a0
   12770:	movt	r1, #2
   12774:	str	r0, [r1]
   12778:	movw	r0, #33180	; 0x819c
   1277c:	mov	r5, r1
   12780:	movt	r0, #2
   12784:	mov	r7, r0
   12788:	ldr	r0, [r0]
   1278c:	bl	13110 <__assert_fail@plt+0x1d90>
   12790:	ldr	r0, [r5]
   12794:	bl	158f8 <__assert_fail@plt+0x4578>
   12798:	str	r0, [r7]
   1279c:	b	1282c <__assert_fail@plt+0x14ac>
   127a0:	movw	r0, #33180	; 0x819c
   127a4:	movt	r0, #2
   127a8:	ldr	r0, [r0]
   127ac:	movw	r3, #27737	; 0x6c59
   127b0:	movw	r8, #33167	; 0x818f
   127b4:	mov	r1, #1
   127b8:	mvn	r2, #0
   127bc:	str	sl, [sp]
   127c0:	str	r7, [sp, #4]
   127c4:	movt	r3, #1
   127c8:	movt	r8, #2
   127cc:	bl	11290 <__sprintf_chk@plt>
   127d0:	ldr	r7, [sp, #44]	; 0x2c
   127d4:	b	12850 <__assert_fail@plt+0x14d0>
   127d8:	mov	r1, r0
   127dc:	b	129b4 <__assert_fail@plt+0x1634>
   127e0:	mov	r0, #1
   127e4:	str	r0, [r5]
   127e8:	movw	r0, #33180	; 0x819c
   127ec:	movt	r0, #2
   127f0:	mov	r7, r0
   127f4:	ldr	r0, [r0]
   127f8:	bl	13110 <__assert_fail@plt+0x1d90>
   127fc:	ldr	r0, [r5]
   12800:	bl	158f8 <__assert_fail@plt+0x4578>
   12804:	str	r0, [r7]
   12808:	ldr	r7, [sp, #44]	; 0x2c
   1280c:	mov	r1, #0
   12810:	strb	r1, [r0]
   12814:	b	1286c <__assert_fail@plt+0x14ec>
   12818:	mov	r1, r0
   1281c:	b	12a90 <__assert_fail@plt+0x1710>
   12820:	movw	r0, #33180	; 0x819c
   12824:	movt	r0, #2
   12828:	ldr	r0, [r0]
   1282c:	movw	r3, #27745	; 0x6c61
   12830:	ldr	r7, [sp, #44]	; 0x2c
   12834:	movw	r8, #33167	; 0x818f
   12838:	mov	r1, #1
   1283c:	mvn	r2, #0
   12840:	str	sl, [sp]
   12844:	movt	r3, #1
   12848:	movt	r8, #2
   1284c:	bl	11290 <__sprintf_chk@plt>
   12850:	ldr	r0, [sp, #28]
   12854:	cmp	r0, #0
   12858:	beq	12864 <__assert_fail@plt+0x14e4>
   1285c:	mov	r0, sl
   12860:	bl	13110 <__assert_fail@plt+0x1d90>
   12864:	movw	sl, #27499	; 0x6b6b
   12868:	movt	sl, #1
   1286c:	ldr	r0, [r4, #340]	; 0x154
   12870:	str	r0, [sp, #64]	; 0x40
   12874:	add	r0, sp, #64	; 0x40
   12878:	bl	1120c <localtime@plt>
   1287c:	cmp	r0, #0
   12880:	beq	128ac <__assert_fail@plt+0x152c>
   12884:	mov	r3, r0
   12888:	movw	r0, #33172	; 0x8194
   1288c:	movw	r5, #33194	; 0x81aa
   12890:	mov	r1, #33	; 0x21
   12894:	movt	r0, #2
   12898:	movt	r5, #2
   1289c:	ldr	r2, [r0]
   128a0:	mov	r0, r5
   128a4:	bl	111f4 <strftime@plt>
   128a8:	b	128c4 <__assert_fail@plt+0x1544>
   128ac:	ldr	r0, [sp, #64]	; 0x40
   128b0:	movw	r2, #33194	; 0x81aa
   128b4:	movt	r2, #2
   128b8:	asr	r1, r0, #31
   128bc:	bl	131a4 <__assert_fail@plt+0x1e24>
   128c0:	mov	r5, r0
   128c4:	movw	r1, #33180	; 0x819c
   128c8:	sub	r0, fp, #143	; 0x8f
   128cc:	add	r2, sp, #12
   128d0:	str	r7, [sp]
   128d4:	str	r5, [sp, #4]
   128d8:	mov	r3, #32
   128dc:	movt	r1, #2
   128e0:	str	r0, [sp, #8]
   128e4:	sub	r0, fp, #196	; 0xc4
   128e8:	ldr	r1, [r1]
   128ec:	cmp	r1, #0
   128f0:	moveq	r1, sl
   128f4:	stm	r2, {r0, r1, sl}
   128f8:	ldr	r2, [sp, #40]	; 0x28
   128fc:	mov	r0, #32
   12900:	mov	r1, r6
   12904:	bl	12ca4 <__assert_fail@plt+0x1924>
   12908:	b	11f0c <__assert_fail@plt+0xb8c>
   1290c:	add	r1, r0, #2
   12910:	mov	r0, #0
   12914:	movw	r3, #27724	; 0x6c4c
   12918:	mov	r2, #12
   1291c:	strb	r0, [r1]
   12920:	movt	r3, #1
   12924:	mov	r1, #1
   12928:	ldr	r0, [r4, #4]
   1292c:	str	r0, [sp]
   12930:	sub	r0, fp, #196	; 0xc4
   12934:	bl	11290 <__sprintf_chk@plt>
   12938:	ldr	r0, [r4, #340]	; 0x154
   1293c:	add	r5, r4, #8
   12940:	str	r0, [sp, #64]	; 0x40
   12944:	add	r0, sp, #64	; 0x40
   12948:	bl	1120c <localtime@plt>
   1294c:	cmp	r0, #0
   12950:	beq	1297c <__assert_fail@plt+0x15fc>
   12954:	mov	r3, r0
   12958:	movw	r0, #33172	; 0x8194
   1295c:	movw	r7, #33194	; 0x81aa
   12960:	mov	r1, #33	; 0x21
   12964:	movt	r0, #2
   12968:	movt	r7, #2
   1296c:	ldr	r2, [r0]
   12970:	mov	r0, r7
   12974:	bl	111f4 <strftime@plt>
   12978:	b	12994 <__assert_fail@plt+0x1614>
   1297c:	ldr	r0, [sp, #64]	; 0x40
   12980:	movw	r2, #33194	; 0x81aa
   12984:	movt	r2, #2
   12988:	asr	r1, r0, #31
   1298c:	bl	131a4 <__assert_fail@plt+0x1e24>
   12990:	mov	r7, r0
   12994:	sub	r0, fp, #196	; 0xc4
   12998:	add	r1, sp, #12
   1299c:	stm	sp, {r5, r7, sl}
   129a0:	stm	r1, {r0, r6, sl}
   129a4:	mvn	r0, #0
   129a8:	mov	r1, sl
   129ac:	b	12a74 <__assert_fail@plt+0x16f4>
   129b0:	add	r1, r0, #2
   129b4:	mov	r0, #0
   129b8:	movw	r3, #27724	; 0x6c4c
   129bc:	mov	r2, #12
   129c0:	strb	r0, [r1]
   129c4:	movt	r3, #1
   129c8:	mov	r1, #1
   129cc:	ldr	r0, [r4, #4]
   129d0:	str	r0, [sp]
   129d4:	sub	r0, fp, #196	; 0xc4
   129d8:	bl	11290 <__sprintf_chk@plt>
   129dc:	movw	r1, #27908	; 0x6d04
   129e0:	mov	r0, #0
   129e4:	mov	r2, #5
   129e8:	movt	r1, #1
   129ec:	bl	11134 <dcgettext@plt>
   129f0:	mov	r5, r0
   129f4:	ldr	r0, [r4, #340]	; 0x154
   129f8:	add	r7, r4, #8
   129fc:	str	r0, [sp, #64]	; 0x40
   12a00:	add	r0, sp, #64	; 0x40
   12a04:	bl	1120c <localtime@plt>
   12a08:	cmp	r0, #0
   12a0c:	beq	12a44 <__assert_fail@plt+0x16c4>
   12a10:	mov	r3, r0
   12a14:	movw	r0, #33172	; 0x8194
   12a18:	movw	sl, #33194	; 0x81aa
   12a1c:	mov	r1, #33	; 0x21
   12a20:	movt	r0, #2
   12a24:	movt	sl, #2
   12a28:	ldr	r2, [r0]
   12a2c:	mov	r0, sl
   12a30:	bl	111f4 <strftime@plt>
   12a34:	mov	r0, sl
   12a38:	movw	sl, #27499	; 0x6b6b
   12a3c:	movt	sl, #1
   12a40:	b	12a58 <__assert_fail@plt+0x16d8>
   12a44:	ldr	r0, [sp, #64]	; 0x40
   12a48:	movw	r2, #33194	; 0x81aa
   12a4c:	movt	r2, #2
   12a50:	asr	r1, r0, #31
   12a54:	bl	131a4 <__assert_fail@plt+0x1e24>
   12a58:	str	r7, [sp]
   12a5c:	stmib	sp, {r0, sl}
   12a60:	sub	r0, fp, #196	; 0xc4
   12a64:	add	r1, sp, #12
   12a68:	stm	r1, {r0, r6, sl}
   12a6c:	mvn	r0, #0
   12a70:	mov	r1, r5
   12a74:	mov	r2, #32
   12a78:	mov	r3, #32
   12a7c:	bl	12ca4 <__assert_fail@plt+0x1924>
   12a80:	mov	r0, r6
   12a84:	bl	13110 <__assert_fail@plt+0x1d90>
   12a88:	b	11f0c <__assert_fail@plt+0xb8c>
   12a8c:	add	r1, r0, #2
   12a90:	mov	r0, #0
   12a94:	movw	r3, #27724	; 0x6c4c
   12a98:	mov	r2, #12
   12a9c:	strb	r0, [r1]
   12aa0:	movt	r3, #1
   12aa4:	mov	r1, #1
   12aa8:	ldr	r0, [r4, #4]
   12aac:	str	r0, [sp]
   12ab0:	sub	r0, fp, #196	; 0xc4
   12ab4:	bl	11290 <__sprintf_chk@plt>
   12ab8:	movw	r0, #33236	; 0x81d4
   12abc:	movt	r0, #2
   12ac0:	ldr	r5, [r0]
   12ac4:	cmp	r5, #0
   12ac8:	bne	12b1c <__assert_fail@plt+0x179c>
   12acc:	movw	r1, #27914	; 0x6d0a
   12ad0:	mov	r0, #0
   12ad4:	mov	r2, #5
   12ad8:	movt	r1, #1
   12adc:	bl	11134 <dcgettext@plt>
   12ae0:	bl	1126c <strlen@plt>
   12ae4:	movw	r1, #27920	; 0x6d10
   12ae8:	mov	r5, r0
   12aec:	mov	r0, #0
   12af0:	mov	r2, #5
   12af4:	movt	r1, #1
   12af8:	bl	11134 <dcgettext@plt>
   12afc:	bl	1126c <strlen@plt>
   12b00:	add	r0, r5, r0
   12b04:	add	r0, r0, #14
   12b08:	bl	158f8 <__assert_fail@plt+0x4578>
   12b0c:	mov	r5, r0
   12b10:	movw	r0, #33236	; 0x81d4
   12b14:	movt	r0, #2
   12b18:	str	r5, [r0]
   12b1c:	movw	r1, #27914	; 0x6d0a
   12b20:	mov	r0, #0
   12b24:	mov	r2, #5
   12b28:	movt	r1, #1
   12b2c:	bl	11134 <dcgettext@plt>
   12b30:	movw	r1, #27920	; 0x6d10
   12b34:	ldrsh	sl, [r7]
   12b38:	mov	r6, r0
   12b3c:	mov	r0, #0
   12b40:	mov	r2, #5
   12b44:	movt	r1, #1
   12b48:	bl	11134 <dcgettext@plt>
   12b4c:	ldrsh	r1, [r7, #2]
   12b50:	movw	r3, #27926	; 0x6d16
   12b54:	stm	sp, {r6, sl}
   12b58:	str	r0, [sp, #8]
   12b5c:	mov	r0, r5
   12b60:	mvn	r2, #0
   12b64:	movt	r3, #1
   12b68:	str	r1, [sp, #12]
   12b6c:	mov	r1, #1
   12b70:	bl	11290 <__sprintf_chk@plt>
   12b74:	ldr	r0, [r4, #340]	; 0x154
   12b78:	add	r5, r4, #8
   12b7c:	str	r0, [sp, #64]	; 0x40
   12b80:	add	r0, sp, #64	; 0x40
   12b84:	bl	1120c <localtime@plt>
   12b88:	cmp	r0, #0
   12b8c:	beq	12bb8 <__assert_fail@plt+0x1838>
   12b90:	mov	r3, r0
   12b94:	movw	r0, #33172	; 0x8194
   12b98:	movw	r6, #33194	; 0x81aa
   12b9c:	mov	r1, #33	; 0x21
   12ba0:	movt	r0, #2
   12ba4:	movt	r6, #2
   12ba8:	ldr	r2, [r0]
   12bac:	mov	r0, r6
   12bb0:	bl	111f4 <strftime@plt>
   12bb4:	b	12bd0 <__assert_fail@plt+0x1850>
   12bb8:	ldr	r0, [sp, #64]	; 0x40
   12bbc:	movw	r2, #33194	; 0x81aa
   12bc0:	movt	r2, #2
   12bc4:	asr	r1, r0, #31
   12bc8:	bl	131a4 <__assert_fail@plt+0x1e24>
   12bcc:	mov	r6, r0
   12bd0:	movw	r1, #33236	; 0x81d4
   12bd4:	movw	sl, #27499	; 0x6b6b
   12bd8:	sub	r0, fp, #196	; 0xc4
   12bdc:	mov	r2, #32
   12be0:	mov	r3, #32
   12be4:	movt	r1, #2
   12be8:	movt	sl, #1
   12bec:	stm	sp, {r5, r6, sl}
   12bf0:	str	r0, [sp, #12]
   12bf4:	mvn	r0, #0
   12bf8:	str	r8, [sp, #16]
   12bfc:	ldr	r1, [r1]
   12c00:	str	r1, [sp, #20]
   12c04:	mov	r1, sl
   12c08:	bl	12ca4 <__assert_fail@plt+0x1924>
   12c0c:	mov	r0, r8
   12c10:	bl	13110 <__assert_fail@plt+0x1d90>
   12c14:	movw	r8, #33167	; 0x818f
   12c18:	movt	r8, #2
   12c1c:	b	11f0c <__assert_fail@plt+0xb8c>
   12c20:	movw	r1, #27610	; 0x6bda
   12c24:	mov	r0, #0
   12c28:	mov	r2, #5
   12c2c:	movt	r1, #1
   12c30:	bl	11134 <dcgettext@plt>
   12c34:	mov	r1, r0
   12c38:	mov	r0, #1
   12c3c:	mov	r2, r5
   12c40:	bl	112c0 <__printf_chk@plt>
   12c44:	ldr	r0, [sp, #56]	; 0x38
   12c48:	bl	13110 <__assert_fail@plt+0x1d90>
   12c4c:	sub	sp, fp, #28
   12c50:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12c54:	bl	11284 <__errno_location@plt>
   12c58:	ldr	r5, [r0]
   12c5c:	mov	r0, #0
   12c60:	mov	r1, #3
   12c64:	mov	r2, r4
   12c68:	bl	14c0c <__assert_fail@plt+0x388c>
   12c6c:	movw	r2, #28311	; 0x6e97
   12c70:	mov	r3, r0
   12c74:	mov	r0, #1
   12c78:	mov	r1, r5
   12c7c:	movt	r2, #1
   12c80:	bl	111b8 <error@plt>
   12c84:	movw	r0, #27756	; 0x6c6c
   12c88:	movw	r1, #27786	; 0x6c8a
   12c8c:	movw	r3, #27796	; 0x6c94
   12c90:	mov	r2, #205	; 0xcd
   12c94:	movt	r0, #1
   12c98:	movt	r1, #1
   12c9c:	movt	r3, #1
   12ca0:	bl	11380 <__assert_fail@plt>
   12ca4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12ca8:	add	fp, sp, #28
   12cac:	sub	sp, sp, #68	; 0x44
   12cb0:	mov	r7, r0
   12cb4:	movw	r0, #33164	; 0x818c
   12cb8:	movw	r9, #33048	; 0x8118
   12cbc:	movw	r5, #33169	; 0x8191
   12cc0:	mov	r4, r3
   12cc4:	mov	r6, r1
   12cc8:	movt	r0, #2
   12ccc:	movt	r9, #2
   12cd0:	movt	r5, #2
   12cd4:	ldrb	r0, [r0]
   12cd8:	strb	r2, [r9, #1]
   12cdc:	cmp	r0, #1
   12ce0:	bne	12d24 <__assert_fail@plt+0x19a4>
   12ce4:	ldrb	r0, [r5]
   12ce8:	cmp	r0, #0
   12cec:	bne	12d24 <__assert_fail@plt+0x19a4>
   12cf0:	ldr	r8, [fp, #16]
   12cf4:	mov	r0, r8
   12cf8:	bl	1126c <strlen@plt>
   12cfc:	cmp	r0, #6
   12d00:	bhi	12d24 <__assert_fail@plt+0x19a4>
   12d04:	movw	r3, #27667	; 0x6c13
   12d08:	sub	r0, fp, #40	; 0x28
   12d0c:	mov	r1, #1
   12d10:	mov	r2, #8
   12d14:	str	r8, [sp]
   12d18:	movt	r3, #1
   12d1c:	bl	11290 <__sprintf_chk@plt>
   12d20:	b	12d2c <__assert_fail@plt+0x19ac>
   12d24:	mov	r0, #0
   12d28:	strb	r0, [fp, #-40]	; 0xffffffd8
   12d2c:	ldrb	r0, [r5]
   12d30:	cmp	r0, #0
   12d34:	bne	12d70 <__assert_fail@plt+0x19f0>
   12d38:	ldr	r8, [fp, #20]
   12d3c:	mov	r0, r8
   12d40:	bl	1126c <strlen@plt>
   12d44:	cmp	r0, #11
   12d48:	bhi	12d70 <__assert_fail@plt+0x19f0>
   12d4c:	movw	r3, #27673	; 0x6c19
   12d50:	add	r0, sp, #43	; 0x2b
   12d54:	mov	r1, #1
   12d58:	mov	r2, #13
   12d5c:	mov	r5, r7
   12d60:	str	r8, [sp]
   12d64:	movt	r3, #1
   12d68:	bl	11290 <__sprintf_chk@plt>
   12d6c:	b	12d7c <__assert_fail@plt+0x19fc>
   12d70:	mov	r5, r7
   12d74:	mov	r0, #0
   12d78:	strb	r0, [sp, #43]	; 0x2b
   12d7c:	movw	sl, #33165	; 0x818d
   12d80:	ldr	r8, [fp, #28]
   12d84:	mov	r0, #1
   12d88:	movt	sl, #2
   12d8c:	ldrb	r1, [sl]
   12d90:	cmp	r1, #1
   12d94:	bne	12db0 <__assert_fail@plt+0x1a30>
   12d98:	mov	r0, r8
   12d9c:	bl	1126c <strlen@plt>
   12da0:	mov	r1, r0
   12da4:	add	r0, r0, #2
   12da8:	cmp	r1, #12
   12dac:	movwcc	r0, #14
   12db0:	bl	158f8 <__assert_fail@plt+0x4578>
   12db4:	mov	r7, r0
   12db8:	ldrb	r0, [sl]
   12dbc:	cmp	r0, #1
   12dc0:	bne	12de4 <__assert_fail@plt+0x1a64>
   12dc4:	movw	r3, #27679	; 0x6c1f
   12dc8:	mov	r0, r7
   12dcc:	mov	r1, #1
   12dd0:	mvn	r2, #0
   12dd4:	str	r8, [sp]
   12dd8:	movt	r3, #1
   12ddc:	bl	11290 <__sprintf_chk@plt>
   12de0:	b	12dec <__assert_fail@plt+0x1a6c>
   12de4:	mov	r0, #0
   12de8:	strb	r0, [r7]
   12dec:	movw	r0, #33163	; 0x818b
   12df0:	mov	r2, r4
   12df4:	movw	r4, #27719	; 0x6c47
   12df8:	cmp	r6, #0
   12dfc:	movw	r1, #33176	; 0x8198
   12e00:	mov	r3, r5
   12e04:	ldr	r5, [fp, #24]
   12e08:	str	r7, [sp, #36]	; 0x24
   12e0c:	add	ip, sp, #43	; 0x2b
   12e10:	movt	r0, #2
   12e14:	movt	r4, #1
   12e18:	movne	r4, r6
   12e1c:	movt	r1, #2
   12e20:	movw	r6, #27499	; 0x6b6b
   12e24:	movt	r6, #1
   12e28:	ldrb	r0, [r0]
   12e2c:	ldr	r1, [r1]
   12e30:	str	r5, [sp, #32]
   12e34:	sub	r5, fp, #40	; 0x28
   12e38:	cmp	r0, #0
   12e3c:	ldr	r0, [fp, #8]
   12e40:	movne	r6, r9
   12e44:	stm	sp, {r4, r6}
   12e48:	str	r2, [sp, #8]
   12e4c:	movw	r2, #27686	; 0x6c26
   12e50:	str	r1, [sp, #16]
   12e54:	add	r1, sp, #20
   12e58:	movt	r2, #1
   12e5c:	str	r0, [sp, #12]
   12e60:	ldr	r0, [fp, #12]
   12e64:	stm	r1, {r0, r5, ip}
   12e68:	sub	r0, fp, #32
   12e6c:	mov	r1, #1
   12e70:	bl	111c4 <__asprintf_chk@plt>
   12e74:	cmn	r0, #1
   12e78:	beq	12ec8 <__assert_fail@plt+0x1b48>
   12e7c:	ldr	r4, [fp, #-32]	; 0xffffffe0
   12e80:	mov	r0, r4
   12e84:	bl	1126c <strlen@plt>
   12e88:	add	r0, r0, r4
   12e8c:	add	r0, r0, #1
   12e90:	ldrb	r1, [r0, #-2]
   12e94:	sub	r0, r0, #1
   12e98:	cmp	r1, #32
   12e9c:	beq	12e90 <__assert_fail@plt+0x1b10>
   12ea0:	mov	r1, #0
   12ea4:	strb	r1, [r0]
   12ea8:	ldr	r0, [fp, #-32]	; 0xffffffe0
   12eac:	bl	111d0 <puts@plt>
   12eb0:	ldr	r0, [fp, #-32]	; 0xffffffe0
   12eb4:	bl	13110 <__assert_fail@plt+0x1d90>
   12eb8:	mov	r0, r7
   12ebc:	bl	13110 <__assert_fail@plt+0x1d90>
   12ec0:	sub	sp, fp, #28
   12ec4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12ec8:	bl	15e34 <__assert_fail@plt+0x4ab4>
   12ecc:	push	{r4, r5, fp, lr}
   12ed0:	add	fp, sp, #8
   12ed4:	sub	sp, sp, #8
   12ed8:	movw	r2, #33244	; 0x81dc
   12edc:	mov	r5, r0
   12ee0:	mov	r0, #2
   12ee4:	mov	r4, #0
   12ee8:	add	r3, sp, #4
   12eec:	mov	r1, #0
   12ef0:	movt	r2, #2
   12ef4:	str	r4, [sp, #4]
   12ef8:	str	r0, [r2]
   12efc:	mov	r0, r5
   12f00:	bl	11338 <getaddrinfo@plt>
   12f04:	cmp	r0, #0
   12f08:	beq	12f1c <__assert_fail@plt+0x1b9c>
   12f0c:	movw	r1, #33240	; 0x81d8
   12f10:	movt	r1, #2
   12f14:	str	r0, [r1]
   12f18:	b	12f58 <__assert_fail@plt+0x1bd8>
   12f1c:	ldr	r0, [sp, #4]
   12f20:	ldr	r0, [r0, #24]
   12f24:	cmp	r0, #0
   12f28:	movne	r5, r0
   12f2c:	mov	r0, r5
   12f30:	bl	11140 <strdup@plt>
   12f34:	mov	r4, r0
   12f38:	cmp	r0, #0
   12f3c:	bne	12f50 <__assert_fail@plt+0x1bd0>
   12f40:	movw	r0, #33240	; 0x81d8
   12f44:	mvn	r1, #9
   12f48:	movt	r0, #2
   12f4c:	str	r1, [r0]
   12f50:	ldr	r0, [sp, #4]
   12f54:	bl	1132c <freeaddrinfo@plt>
   12f58:	mov	r0, r4
   12f5c:	sub	sp, fp, #8
   12f60:	pop	{r4, r5, fp, pc}
   12f64:	push	{r4, r5, r6, sl, fp, lr}
   12f68:	add	fp, sp, #16
   12f6c:	sub	sp, sp, #8
   12f70:	movw	r2, #33244	; 0x81dc
   12f74:	mov	r6, r0
   12f78:	mov	r0, #2
   12f7c:	mov	r5, r1
   12f80:	mov	r4, #0
   12f84:	add	r3, sp, #4
   12f88:	mov	r1, #0
   12f8c:	movt	r2, #2
   12f90:	str	r4, [sp, #4]
   12f94:	str	r0, [r2]
   12f98:	mov	r0, r6
   12f9c:	bl	11338 <getaddrinfo@plt>
   12fa0:	cmp	r0, #0
   12fa4:	beq	12fb4 <__assert_fail@plt+0x1c34>
   12fa8:	cmp	r5, #0
   12fac:	strne	r0, [r5]
   12fb0:	b	12fec <__assert_fail@plt+0x1c6c>
   12fb4:	ldr	r0, [sp, #4]
   12fb8:	ldr	r0, [r0, #24]
   12fbc:	cmp	r0, #0
   12fc0:	movne	r6, r0
   12fc4:	mov	r0, r6
   12fc8:	bl	11140 <strdup@plt>
   12fcc:	mov	r4, r0
   12fd0:	cmp	r5, #0
   12fd4:	beq	12fe4 <__assert_fail@plt+0x1c64>
   12fd8:	cmp	r4, #0
   12fdc:	mvneq	r0, #9
   12fe0:	streq	r0, [r5]
   12fe4:	ldr	r0, [sp, #4]
   12fe8:	bl	1132c <freeaddrinfo@plt>
   12fec:	mov	r0, r4
   12ff0:	sub	sp, fp, #16
   12ff4:	pop	{r4, r5, r6, sl, fp, pc}
   12ff8:	movw	r0, #33240	; 0x81d8
   12ffc:	movt	r0, #2
   13000:	ldr	r0, [r0]
   13004:	b	110ec <gai_strerror@plt>
   13008:	movw	r1, #33276	; 0x81fc
   1300c:	movt	r1, #2
   13010:	str	r0, [r1]
   13014:	bx	lr
   13018:	movw	r1, #33280	; 0x8200
   1301c:	movt	r1, #2
   13020:	strb	r0, [r1]
   13024:	bx	lr
   13028:	push	{r4, r5, r6, sl, fp, lr}
   1302c:	add	fp, sp, #16
   13030:	sub	sp, sp, #8
   13034:	movw	r0, #33148	; 0x817c
   13038:	movt	r0, #2
   1303c:	ldr	r0, [r0]
   13040:	bl	15f50 <__assert_fail@plt+0x4bd0>
   13044:	cmp	r0, #0
   13048:	beq	13070 <__assert_fail@plt+0x1cf0>
   1304c:	movw	r0, #33280	; 0x8200
   13050:	movt	r0, #2
   13054:	ldrb	r0, [r0]
   13058:	cmp	r0, #0
   1305c:	beq	13090 <__assert_fail@plt+0x1d10>
   13060:	bl	11284 <__errno_location@plt>
   13064:	ldr	r0, [r0]
   13068:	cmp	r0, #32
   1306c:	bne	13090 <__assert_fail@plt+0x1d10>
   13070:	movw	r0, #33144	; 0x8178
   13074:	movt	r0, #2
   13078:	ldr	r0, [r0]
   1307c:	bl	15f50 <__assert_fail@plt+0x4bd0>
   13080:	cmp	r0, #0
   13084:	subeq	sp, fp, #16
   13088:	popeq	{r4, r5, r6, sl, fp, pc}
   1308c:	b	13100 <__assert_fail@plt+0x1d80>
   13090:	movw	r1, #28295	; 0x6e87
   13094:	mov	r0, #0
   13098:	mov	r2, #5
   1309c:	movt	r1, #1
   130a0:	bl	11134 <dcgettext@plt>
   130a4:	mov	r4, r0
   130a8:	movw	r0, #33276	; 0x81fc
   130ac:	movt	r0, #2
   130b0:	ldr	r6, [r0]
   130b4:	bl	11284 <__errno_location@plt>
   130b8:	ldr	r5, [r0]
   130bc:	cmp	r6, #0
   130c0:	bne	130dc <__assert_fail@plt+0x1d5c>
   130c4:	movw	r2, #28311	; 0x6e97
   130c8:	mov	r0, #0
   130cc:	mov	r1, r5
   130d0:	mov	r3, r4
   130d4:	movt	r2, #1
   130d8:	b	130fc <__assert_fail@plt+0x1d7c>
   130dc:	mov	r0, r6
   130e0:	bl	14b30 <__assert_fail@plt+0x37b0>
   130e4:	movw	r2, #28307	; 0x6e93
   130e8:	mov	r3, r0
   130ec:	str	r4, [sp]
   130f0:	mov	r0, #0
   130f4:	mov	r1, r5
   130f8:	movt	r2, #1
   130fc:	bl	111b8 <error@plt>
   13100:	movw	r0, #33060	; 0x8124
   13104:	movt	r0, #2
   13108:	ldr	r0, [r0]
   1310c:	bl	110f8 <_exit@plt>
   13110:	push	{r4, r5, r6, sl, fp, lr}
   13114:	add	fp, sp, #16
   13118:	mov	r4, r0
   1311c:	bl	11284 <__errno_location@plt>
   13120:	ldr	r6, [r0]
   13124:	mov	r5, r0
   13128:	mov	r0, r4
   1312c:	bl	110e0 <free@plt>
   13130:	str	r6, [r5]
   13134:	pop	{r4, r5, r6, sl, fp, pc}
   13138:	push	{r4, sl, fp, lr}
   1313c:	add	fp, sp, #8
   13140:	sub	sp, sp, #264	; 0x108
   13144:	add	r1, sp, #7
   13148:	movw	r2, #257	; 0x101
   1314c:	bl	151a0 <__assert_fail@plt+0x3e20>
   13150:	mov	r4, #0
   13154:	cmp	r0, #0
   13158:	bne	13198 <__assert_fail@plt+0x1e18>
   1315c:	movw	r1, #28314	; 0x6e9a
   13160:	add	r0, sp, #7
   13164:	mov	r2, #2
   13168:	movt	r1, #1
   1316c:	bl	11254 <bcmp@plt>
   13170:	cmp	r0, #0
   13174:	beq	13198 <__assert_fail@plt+0x1e18>
   13178:	movw	r1, #28316	; 0x6e9c
   1317c:	add	r0, sp, #7
   13180:	mov	r2, #6
   13184:	movt	r1, #1
   13188:	bl	11254 <bcmp@plt>
   1318c:	cmp	r0, #0
   13190:	mov	r4, r0
   13194:	movwne	r4, #1
   13198:	mov	r0, r4
   1319c:	sub	sp, fp, #8
   131a0:	pop	{r4, sl, fp, pc}
   131a4:	push	{r4, r5, r6, sl, fp, lr}
   131a8:	add	fp, sp, #16
   131ac:	mov	r5, r0
   131b0:	mov	r0, #0
   131b4:	mov	r4, r1
   131b8:	add	r6, r2, #19
   131bc:	cmp	r1, #0
   131c0:	strb	r0, [r2, #20]
   131c4:	bmi	13214 <__assert_fail@plt+0x1e94>
   131c8:	mov	r0, r5
   131cc:	mov	r1, r4
   131d0:	mov	r2, #10
   131d4:	mov	r3, #0
   131d8:	bl	1624c <__assert_fail@plt+0x4ecc>
   131dc:	add	r2, r0, r0, lsl #2
   131e0:	sub	r2, r5, r2, lsl #1
   131e4:	add	r2, r2, #48	; 0x30
   131e8:	strb	r2, [r6], #-1
   131ec:	adds	r2, r5, #9
   131f0:	mov	r5, r0
   131f4:	adc	r3, r4, #0
   131f8:	rsbs	r2, r2, #18
   131fc:	mov	r4, r1
   13200:	rscs	r2, r3, #0
   13204:	bcc	131c8 <__assert_fail@plt+0x1e48>
   13208:	add	r6, r6, #1
   1320c:	mov	r0, r6
   13210:	pop	{r4, r5, r6, sl, fp, pc}
   13214:	mov	r0, r5
   13218:	mov	r1, r4
   1321c:	mov	r2, #10
   13220:	mov	r3, #0
   13224:	bl	1624c <__assert_fail@plt+0x4ecc>
   13228:	add	r2, r0, r0, lsl #2
   1322c:	rsb	r2, r5, r2, lsl #1
   13230:	add	r2, r2, #48	; 0x30
   13234:	strb	r2, [r6], #-1
   13238:	adds	r2, r5, #9
   1323c:	mov	r5, r0
   13240:	adc	r3, r4, #0
   13244:	rsbs	r2, r2, #18
   13248:	mov	r4, r1
   1324c:	rscs	r2, r3, #0
   13250:	bcc	13214 <__assert_fail@plt+0x1e94>
   13254:	mov	r0, #45	; 0x2d
   13258:	strb	r0, [r6]
   1325c:	mov	r0, r6
   13260:	pop	{r4, r5, r6, sl, fp, pc}
   13264:	push	{r4, r5, fp, lr}
   13268:	add	fp, sp, #8
   1326c:	cmp	r0, #0
   13270:	beq	13304 <__assert_fail@plt+0x1f84>
   13274:	mov	r1, #47	; 0x2f
   13278:	mov	r4, r0
   1327c:	bl	11314 <strrchr@plt>
   13280:	cmp	r0, #0
   13284:	mov	r5, r4
   13288:	addne	r5, r0, #1
   1328c:	sub	r0, r5, r4
   13290:	cmp	r0, #7
   13294:	blt	132e8 <__assert_fail@plt+0x1f68>
   13298:	movw	r1, #28378	; 0x6eda
   1329c:	sub	r0, r5, #7
   132a0:	mov	r2, #7
   132a4:	movt	r1, #1
   132a8:	bl	1135c <strncmp@plt>
   132ac:	cmp	r0, #0
   132b0:	bne	132e8 <__assert_fail@plt+0x1f68>
   132b4:	movw	r1, #28386	; 0x6ee2
   132b8:	mov	r0, r5
   132bc:	mov	r2, #3
   132c0:	movt	r1, #1
   132c4:	bl	1135c <strncmp@plt>
   132c8:	cmp	r0, #0
   132cc:	beq	132d8 <__assert_fail@plt+0x1f58>
   132d0:	mov	r4, r5
   132d4:	b	132e8 <__assert_fail@plt+0x1f68>
   132d8:	movw	r0, #33128	; 0x8168
   132dc:	add	r4, r5, #3
   132e0:	movt	r0, #2
   132e4:	str	r4, [r0]
   132e8:	movw	r0, #33132	; 0x816c
   132ec:	movt	r0, #2
   132f0:	str	r4, [r0]
   132f4:	movw	r0, #33284	; 0x8204
   132f8:	movt	r0, #2
   132fc:	str	r4, [r0]
   13300:	pop	{r4, r5, fp, pc}
   13304:	movw	r0, #33144	; 0x8178
   13308:	mov	r1, #55	; 0x37
   1330c:	mov	r2, #1
   13310:	movt	r0, #2
   13314:	ldr	r3, [r0]
   13318:	movw	r0, #28322	; 0x6ea2
   1331c:	movt	r0, #1
   13320:	bl	1117c <fwrite@plt>
   13324:	bl	11368 <abort@plt>
   13328:	push	{r4, r5, r6, sl, fp, lr}
   1332c:	add	fp, sp, #16
   13330:	mov	r4, r0
   13334:	movw	r0, #33288	; 0x8208
   13338:	movt	r0, #2
   1333c:	cmp	r4, #0
   13340:	moveq	r4, r0
   13344:	bl	11284 <__errno_location@plt>
   13348:	ldr	r6, [r0]
   1334c:	mov	r5, r0
   13350:	mov	r0, r4
   13354:	mov	r1, #48	; 0x30
   13358:	bl	15d58 <__assert_fail@plt+0x49d8>
   1335c:	str	r6, [r5]
   13360:	pop	{r4, r5, r6, sl, fp, pc}
   13364:	movw	r1, #33288	; 0x8208
   13368:	cmp	r0, #0
   1336c:	movt	r1, #2
   13370:	movne	r1, r0
   13374:	ldr	r0, [r1]
   13378:	bx	lr
   1337c:	movw	r2, #33288	; 0x8208
   13380:	cmp	r0, #0
   13384:	movt	r2, #2
   13388:	movne	r2, r0
   1338c:	str	r1, [r2]
   13390:	bx	lr
   13394:	movw	r3, #33288	; 0x8208
   13398:	cmp	r0, #0
   1339c:	and	r2, r2, #1
   133a0:	movt	r3, #2
   133a4:	movne	r3, r0
   133a8:	ubfx	r0, r1, #5, #3
   133ac:	and	r1, r1, #31
   133b0:	add	ip, r3, r0, lsl #2
   133b4:	mov	r0, #1
   133b8:	ldr	r3, [ip, #8]
   133bc:	and	r0, r0, r3, lsr r1
   133c0:	eor	r2, r0, r2
   133c4:	eor	r1, r3, r2, lsl r1
   133c8:	str	r1, [ip, #8]
   133cc:	bx	lr
   133d0:	movw	r2, #33288	; 0x8208
   133d4:	cmp	r0, #0
   133d8:	movt	r2, #2
   133dc:	movne	r2, r0
   133e0:	ldr	r0, [r2, #4]
   133e4:	str	r1, [r2, #4]
   133e8:	bx	lr
   133ec:	push	{fp, lr}
   133f0:	mov	fp, sp
   133f4:	movw	r3, #33288	; 0x8208
   133f8:	cmp	r0, #0
   133fc:	movt	r3, #2
   13400:	movne	r3, r0
   13404:	cmp	r1, #0
   13408:	mov	r0, #10
   1340c:	cmpne	r2, #0
   13410:	str	r0, [r3]
   13414:	bne	1341c <__assert_fail@plt+0x209c>
   13418:	bl	11368 <abort@plt>
   1341c:	str	r1, [r3, #40]	; 0x28
   13420:	str	r2, [r3, #44]	; 0x2c
   13424:	pop	{fp, pc}
   13428:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1342c:	add	fp, sp, #28
   13430:	sub	sp, sp, #20
   13434:	mov	r7, r0
   13438:	ldr	r0, [fp, #8]
   1343c:	movw	r5, #33288	; 0x8208
   13440:	mov	r8, r3
   13444:	mov	r9, r2
   13448:	mov	sl, r1
   1344c:	movt	r5, #2
   13450:	cmp	r0, #0
   13454:	movne	r5, r0
   13458:	bl	11284 <__errno_location@plt>
   1345c:	ldr	r2, [r5, #40]	; 0x28
   13460:	ldr	r3, [r5, #44]	; 0x2c
   13464:	mov	r4, r0
   13468:	ldm	r5, {r0, r1}
   1346c:	add	r5, r5, #8
   13470:	ldr	r6, [r4]
   13474:	stm	sp, {r0, r1, r5}
   13478:	mov	r0, r7
   1347c:	mov	r1, sl
   13480:	str	r2, [sp, #12]
   13484:	str	r3, [sp, #16]
   13488:	mov	r2, r9
   1348c:	mov	r3, r8
   13490:	bl	134a0 <__assert_fail@plt+0x2120>
   13494:	str	r6, [r4]
   13498:	sub	sp, fp, #28
   1349c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   134a0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   134a4:	add	fp, sp, #28
   134a8:	sub	sp, sp, #156	; 0x9c
   134ac:	mov	r5, r0
   134b0:	add	r0, r2, #1
   134b4:	mov	r6, r1
   134b8:	mov	sl, r3
   134bc:	str	r2, [fp, #-80]	; 0xffffffb0
   134c0:	str	r0, [sp, #72]	; 0x48
   134c4:	ldr	r0, [fp, #12]
   134c8:	and	r1, r0, #1
   134cc:	str	r1, [sp, #36]	; 0x24
   134d0:	and	r1, r0, #4
   134d4:	str	r1, [sp, #32]
   134d8:	ubfx	r9, r0, #1, #1
   134dc:	bl	11194 <__ctype_get_mb_cur_max@plt>
   134e0:	str	r0, [sp, #40]	; 0x28
   134e4:	ldr	r0, [fp, #24]
   134e8:	ldr	r7, [fp, #8]
   134ec:	mov	r1, #0
   134f0:	str	r5, [fp, #-84]	; 0xffffffac
   134f4:	str	r1, [fp, #-56]	; 0xffffffc8
   134f8:	mov	r1, #0
   134fc:	str	r1, [sp, #60]	; 0x3c
   13500:	mov	r1, #1
   13504:	str	r1, [fp, #-48]	; 0xffffffd0
   13508:	str	r0, [sp, #80]	; 0x50
   1350c:	ldr	r0, [fp, #20]
   13510:	str	r0, [sp, #76]	; 0x4c
   13514:	mov	r0, #0
   13518:	str	r0, [sp, #56]	; 0x38
   1351c:	mov	r0, #0
   13520:	str	r0, [fp, #-88]	; 0xffffffa8
   13524:	mov	r0, #0
   13528:	str	r0, [fp, #-72]	; 0xffffffb8
   1352c:	mov	r0, #0
   13530:	cmp	r7, #10
   13534:	bhi	144c8 <__assert_fail@plt+0x3148>
   13538:	add	r1, pc, #24
   1353c:	ldr	ip, [fp, #-80]	; 0xffffffb0
   13540:	mov	r4, r6
   13544:	mov	r8, #0
   13548:	mov	r2, #1
   1354c:	mov	r3, #0
   13550:	mov	lr, sl
   13554:	ldr	pc, [r1, r7, lsl #2]
   13558:	andeq	r3, r1, ip, lsl r6
   1355c:	andeq	r3, r1, r0, ror r6
   13560:	andeq	r3, r1, r0, lsr r6
   13564:	andeq	r3, r1, r4, lsl r6
   13568:	andeq	r3, r1, r4, ror #12
   1356c:	muleq	r1, r8, r6
   13570:	andeq	r3, r1, r0, asr #12
   13574:	andeq	r3, r1, ip, lsl r7
   13578:	andeq	r3, r1, r4, lsl #11
   1357c:	andeq	r3, r1, r4, lsl #11
   13580:	andeq	r3, r1, ip, lsr #11
   13584:	movw	r0, #28468	; 0x6f34
   13588:	mov	r1, r7
   1358c:	movt	r0, #1
   13590:	bl	14ed0 <__assert_fail@plt+0x3b50>
   13594:	str	r0, [sp, #76]	; 0x4c
   13598:	movw	r0, #28470	; 0x6f36
   1359c:	mov	r1, r7
   135a0:	movt	r0, #1
   135a4:	bl	14ed0 <__assert_fail@plt+0x3b50>
   135a8:	str	r0, [sp, #80]	; 0x50
   135ac:	mov	r8, #0
   135b0:	tst	r9, #1
   135b4:	bne	135ec <__assert_fail@plt+0x226c>
   135b8:	ldr	r0, [sp, #76]	; 0x4c
   135bc:	ldrb	r0, [r0]
   135c0:	cmp	r0, #0
   135c4:	beq	135ec <__assert_fail@plt+0x226c>
   135c8:	ldr	r1, [sp, #76]	; 0x4c
   135cc:	mov	r8, #0
   135d0:	add	r1, r1, #1
   135d4:	cmp	r8, r4
   135d8:	strbcc	r0, [r5, r8]
   135dc:	ldrb	r0, [r1, r8]
   135e0:	add	r8, r8, #1
   135e4:	cmp	r0, #0
   135e8:	bne	135d4 <__assert_fail@plt+0x2254>
   135ec:	ldr	r6, [sp, #80]	; 0x50
   135f0:	mov	r0, r6
   135f4:	bl	1126c <strlen@plt>
   135f8:	ldr	ip, [fp, #-80]	; 0xffffffb0
   135fc:	str	r0, [fp, #-72]	; 0xffffffb8
   13600:	str	r6, [fp, #-88]	; 0xffffffa8
   13604:	mov	r2, #1
   13608:	mov	r3, r9
   1360c:	mov	lr, sl
   13610:	b	1371c <__assert_fail@plt+0x239c>
   13614:	mov	r0, #1
   13618:	b	13670 <__assert_fail@plt+0x22f0>
   1361c:	mov	r7, #0
   13620:	mov	r8, #0
   13624:	mov	r2, r0
   13628:	mov	r3, #0
   1362c:	b	1371c <__assert_fail@plt+0x239c>
   13630:	tst	r9, #1
   13634:	bne	13670 <__assert_fail@plt+0x22f0>
   13638:	mov	r2, r0
   1363c:	b	136c8 <__assert_fail@plt+0x2348>
   13640:	mov	r0, #1
   13644:	mov	r8, #0
   13648:	mov	r7, #5
   1364c:	mov	r2, #1
   13650:	str	r0, [fp, #-72]	; 0xffffffb8
   13654:	movw	r0, #28466	; 0x6f32
   13658:	movt	r0, #1
   1365c:	str	r0, [fp, #-88]	; 0xffffffa8
   13660:	b	13690 <__assert_fail@plt+0x2310>
   13664:	mov	r2, #1
   13668:	tst	r9, #1
   1366c:	beq	136c8 <__assert_fail@plt+0x2348>
   13670:	mov	r1, #1
   13674:	mov	r8, #0
   13678:	mov	r7, #2
   1367c:	mov	r2, r0
   13680:	str	r1, [fp, #-72]	; 0xffffffb8
   13684:	movw	r1, #28470	; 0x6f36
   13688:	movt	r1, #1
   1368c:	str	r1, [fp, #-88]	; 0xffffffa8
   13690:	mov	r3, #1
   13694:	b	1371c <__assert_fail@plt+0x239c>
   13698:	tst	r9, #1
   1369c:	beq	136ec <__assert_fail@plt+0x236c>
   136a0:	mov	r0, #1
   136a4:	mov	r8, #0
   136a8:	mov	r2, #1
   136ac:	mov	r3, #1
   136b0:	mov	r7, #5
   136b4:	str	r0, [fp, #-72]	; 0xffffffb8
   136b8:	movw	r0, #28466	; 0x6f32
   136bc:	movt	r0, #1
   136c0:	str	r0, [fp, #-88]	; 0xffffffa8
   136c4:	b	1371c <__assert_fail@plt+0x239c>
   136c8:	cmp	r4, #0
   136cc:	mov	r8, #1
   136d0:	mov	r3, #0
   136d4:	mov	r7, #2
   136d8:	movne	r0, #39	; 0x27
   136dc:	strbne	r0, [r5]
   136e0:	movw	r0, #28470	; 0x6f36
   136e4:	movt	r0, #1
   136e8:	b	13710 <__assert_fail@plt+0x2390>
   136ec:	cmp	r4, #0
   136f0:	mov	r8, #1
   136f4:	mov	r2, #1
   136f8:	mov	r7, #5
   136fc:	mov	r3, #0
   13700:	movne	r0, #34	; 0x22
   13704:	strbne	r0, [r5]
   13708:	movw	r0, #28466	; 0x6f32
   1370c:	movt	r0, #1
   13710:	str	r0, [fp, #-88]	; 0xffffffa8
   13714:	mov	r0, #1
   13718:	str	r0, [fp, #-72]	; 0xffffffb8
   1371c:	ldr	r0, [fp, #-72]	; 0xffffffb8
   13720:	eor	r6, r3, #1
   13724:	str	r7, [fp, #-68]	; 0xffffffbc
   13728:	str	r3, [fp, #-76]	; 0xffffffb4
   1372c:	str	r2, [sp, #84]	; 0x54
   13730:	str	r6, [sp, #92]	; 0x5c
   13734:	cmp	r0, #0
   13738:	movwne	r0, #1
   1373c:	and	r1, r0, r3
   13740:	and	r1, r2, r1
   13744:	str	r1, [sp, #48]	; 0x30
   13748:	sub	r1, r7, #2
   1374c:	clz	r1, r1
   13750:	lsr	r1, r1, #5
   13754:	and	r1, r1, r3
   13758:	str	r1, [sp, #64]	; 0x40
   1375c:	subs	r1, r7, #2
   13760:	mov	r7, #0
   13764:	movwne	r1, #1
   13768:	orr	r6, r1, r6
   1376c:	and	r1, r1, r2
   13770:	and	r0, r0, r1
   13774:	str	r6, [sp, #68]	; 0x44
   13778:	str	r0, [fp, #-60]	; 0xffffffc4
   1377c:	orr	r0, r1, r3
   13780:	ldr	r1, [fp, #16]
   13784:	eor	r0, r0, #1
   13788:	clz	r1, r1
   1378c:	lsr	r1, r1, #5
   13790:	orr	r0, r1, r0
   13794:	str	r0, [fp, #-64]	; 0xffffffc0
   13798:	eor	r0, r2, #1
   1379c:	str	r0, [sp, #52]	; 0x34
   137a0:	cmn	lr, #1
   137a4:	beq	137b4 <__assert_fail@plt+0x2434>
   137a8:	cmp	r7, lr
   137ac:	bne	137c0 <__assert_fail@plt+0x2440>
   137b0:	b	14308 <__assert_fail@plt+0x2f88>
   137b4:	ldrb	r0, [ip, r7]
   137b8:	cmp	r0, #0
   137bc:	beq	14310 <__assert_fail@plt+0x2f90>
   137c0:	ldr	r0, [fp, #-60]	; 0xffffffc4
   137c4:	mov	sl, #0
   137c8:	cmp	r0, #0
   137cc:	beq	13804 <__assert_fail@plt+0x2484>
   137d0:	ldr	r0, [fp, #-72]	; 0xffffffb8
   137d4:	add	r5, r7, r0
   137d8:	cmp	r0, #2
   137dc:	bcc	137f8 <__assert_fail@plt+0x2478>
   137e0:	cmn	lr, #1
   137e4:	bne	137f8 <__assert_fail@plt+0x2478>
   137e8:	mov	r0, ip
   137ec:	bl	1126c <strlen@plt>
   137f0:	ldr	ip, [fp, #-80]	; 0xffffffb0
   137f4:	mov	lr, r0
   137f8:	cmp	r5, lr
   137fc:	bls	1380c <__assert_fail@plt+0x248c>
   13800:	ldr	r5, [fp, #-84]	; 0xffffffac
   13804:	mov	r0, #0
   13808:	b	13858 <__assert_fail@plt+0x24d8>
   1380c:	ldr	r1, [fp, #-88]	; 0xffffffa8
   13810:	ldr	r2, [fp, #-72]	; 0xffffffb8
   13814:	add	r0, ip, r7
   13818:	mov	r6, r4
   1381c:	mov	r4, lr
   13820:	bl	11254 <bcmp@plt>
   13824:	ldr	r2, [sp, #92]	; 0x5c
   13828:	cmp	r0, #0
   1382c:	ldr	r5, [fp, #-84]	; 0xffffffac
   13830:	mov	r1, r0
   13834:	movwne	r1, #1
   13838:	orr	r1, r1, r2
   1383c:	tst	r1, #1
   13840:	beq	14398 <__assert_fail@plt+0x3018>
   13844:	ldr	ip, [fp, #-80]	; 0xffffffb0
   13848:	clz	r0, r0
   1384c:	mov	lr, r4
   13850:	mov	r4, r6
   13854:	lsr	r0, r0, #5
   13858:	str	r0, [fp, #-52]	; 0xffffffcc
   1385c:	ldrb	r6, [ip, r7]
   13860:	cmp	r6, #126	; 0x7e
   13864:	bhi	13d94 <__assert_fail@plt+0x2a14>
   13868:	add	r3, pc, #16
   1386c:	mov	r9, #1
   13870:	mov	r2, #110	; 0x6e
   13874:	mov	r0, #97	; 0x61
   13878:	mov	r1, #0
   1387c:	ldr	pc, [r3, r6, lsl #2]
   13880:	strdeq	r3, [r1], -r4
   13884:	muleq	r1, r4, sp
   13888:	muleq	r1, r4, sp
   1388c:	muleq	r1, r4, sp
   13890:	muleq	r1, r4, sp
   13894:	muleq	r1, r4, sp
   13898:	muleq	r1, r4, sp
   1389c:	andeq	r3, r1, r0, ror lr
   138a0:	ldrdeq	r3, [r1], -r4
   138a4:	andeq	r3, r1, ip, asr #23
   138a8:	andeq	r3, r1, r0, ror #23
   138ac:	strdeq	r3, [r1], -ip
   138b0:	andeq	r3, r1, r4, asr #23
   138b4:	ldrdeq	r3, [r1], -ip
   138b8:	muleq	r1, r4, sp
   138bc:	muleq	r1, r4, sp
   138c0:	muleq	r1, r4, sp
   138c4:	muleq	r1, r4, sp
   138c8:	muleq	r1, r4, sp
   138cc:	muleq	r1, r4, sp
   138d0:	muleq	r1, r4, sp
   138d4:	muleq	r1, r4, sp
   138d8:	muleq	r1, r4, sp
   138dc:	muleq	r1, r4, sp
   138e0:	muleq	r1, r4, sp
   138e4:	muleq	r1, r4, sp
   138e8:	muleq	r1, r4, sp
   138ec:	muleq	r1, r4, sp
   138f0:	muleq	r1, r4, sp
   138f4:	muleq	r1, r4, sp
   138f8:	muleq	r1, r4, sp
   138fc:	muleq	r1, r4, sp
   13900:	andeq	r3, r1, r8, ror fp
   13904:	andeq	r3, r1, ip, ror fp
   13908:	andeq	r3, r1, ip, ror fp
   1390c:	andeq	r3, r1, r4, ror #22
   13910:	andeq	r3, r1, ip, ror fp
   13914:	andeq	r3, r1, ip, ror sl
   13918:	andeq	r3, r1, ip, ror fp
   1391c:	andeq	r3, r1, r4, lsl #26
   13920:	andeq	r3, r1, ip, ror fp
   13924:	andeq	r3, r1, ip, ror fp
   13928:	andeq	r3, r1, ip, ror fp
   1392c:	andeq	r3, r1, ip, ror sl
   13930:	andeq	r3, r1, ip, ror sl
   13934:	andeq	r3, r1, ip, ror sl
   13938:	andeq	r3, r1, ip, ror sl
   1393c:	andeq	r3, r1, ip, ror sl
   13940:	andeq	r3, r1, ip, ror sl
   13944:	andeq	r3, r1, ip, ror sl
   13948:	andeq	r3, r1, ip, ror sl
   1394c:	andeq	r3, r1, ip, ror sl
   13950:	andeq	r3, r1, ip, ror sl
   13954:	andeq	r3, r1, ip, ror sl
   13958:	andeq	r3, r1, ip, ror sl
   1395c:	andeq	r3, r1, ip, ror sl
   13960:	andeq	r3, r1, ip, ror sl
   13964:	andeq	r3, r1, ip, ror sl
   13968:	andeq	r3, r1, ip, ror sl
   1396c:	andeq	r3, r1, ip, ror fp
   13970:	andeq	r3, r1, ip, ror fp
   13974:	andeq	r3, r1, ip, ror fp
   13978:	andeq	r3, r1, ip, ror fp
   1397c:	andeq	r3, r1, ip, asr #25
   13980:	muleq	r1, r4, sp
   13984:	andeq	r3, r1, ip, ror sl
   13988:	andeq	r3, r1, ip, ror sl
   1398c:	andeq	r3, r1, ip, ror sl
   13990:	andeq	r3, r1, ip, ror sl
   13994:	andeq	r3, r1, ip, ror sl
   13998:	andeq	r3, r1, ip, ror sl
   1399c:	andeq	r3, r1, ip, ror sl
   139a0:	andeq	r3, r1, ip, ror sl
   139a4:	andeq	r3, r1, ip, ror sl
   139a8:	andeq	r3, r1, ip, ror sl
   139ac:	andeq	r3, r1, ip, ror sl
   139b0:	andeq	r3, r1, ip, ror sl
   139b4:	andeq	r3, r1, ip, ror sl
   139b8:	andeq	r3, r1, ip, ror sl
   139bc:	andeq	r3, r1, ip, ror sl
   139c0:	andeq	r3, r1, ip, ror sl
   139c4:	andeq	r3, r1, ip, ror sl
   139c8:	andeq	r3, r1, ip, ror sl
   139cc:	andeq	r3, r1, ip, ror sl
   139d0:	andeq	r3, r1, ip, ror sl
   139d4:	andeq	r3, r1, ip, ror sl
   139d8:	andeq	r3, r1, ip, ror sl
   139dc:	andeq	r3, r1, ip, ror sl
   139e0:	andeq	r3, r1, ip, ror sl
   139e4:	andeq	r3, r1, ip, ror sl
   139e8:	andeq	r3, r1, ip, ror sl
   139ec:	andeq	r3, r1, ip, ror fp
   139f0:	andeq	r3, r1, r4, lsr #23
   139f4:	andeq	r3, r1, ip, ror sl
   139f8:	andeq	r3, r1, ip, ror fp
   139fc:	andeq	r3, r1, ip, ror sl
   13a00:	andeq	r3, r1, ip, ror fp
   13a04:	andeq	r3, r1, ip, ror sl
   13a08:	andeq	r3, r1, ip, ror sl
   13a0c:	andeq	r3, r1, ip, ror sl
   13a10:	andeq	r3, r1, ip, ror sl
   13a14:	andeq	r3, r1, ip, ror sl
   13a18:	andeq	r3, r1, ip, ror sl
   13a1c:	andeq	r3, r1, ip, ror sl
   13a20:	andeq	r3, r1, ip, ror sl
   13a24:	andeq	r3, r1, ip, ror sl
   13a28:	andeq	r3, r1, ip, ror sl
   13a2c:	andeq	r3, r1, ip, ror sl
   13a30:	andeq	r3, r1, ip, ror sl
   13a34:	andeq	r3, r1, ip, ror sl
   13a38:	andeq	r3, r1, ip, ror sl
   13a3c:	andeq	r3, r1, ip, ror sl
   13a40:	andeq	r3, r1, ip, ror sl
   13a44:	andeq	r3, r1, ip, ror sl
   13a48:	andeq	r3, r1, ip, ror sl
   13a4c:	andeq	r3, r1, ip, ror sl
   13a50:	andeq	r3, r1, ip, ror sl
   13a54:	andeq	r3, r1, ip, ror sl
   13a58:	andeq	r3, r1, ip, ror sl
   13a5c:	andeq	r3, r1, ip, ror sl
   13a60:	andeq	r3, r1, ip, ror sl
   13a64:	andeq	r3, r1, ip, ror sl
   13a68:	andeq	r3, r1, ip, ror sl
   13a6c:	andeq	r3, r1, r8, lsr fp
   13a70:	andeq	r3, r1, ip, ror fp
   13a74:	andeq	r3, r1, r8, lsr fp
   13a78:	andeq	r3, r1, r4, ror #22
   13a7c:	ldr	r0, [fp, #-64]	; 0xffffffc0
   13a80:	tst	r0, #1
   13a84:	bne	13ab0 <__assert_fail@plt+0x2730>
   13a88:	ldr	r1, [fp, #16]
   13a8c:	ubfx	r0, r6, #5, #3
   13a90:	mov	r2, #1
   13a94:	ldr	r0, [r1, r0, lsl #2]
   13a98:	and	r1, r6, #31
   13a9c:	tst	r0, r2, lsl r1
   13aa0:	beq	13ab0 <__assert_fail@plt+0x2730>
   13aa4:	mov	r0, r6
   13aa8:	mov	r1, r9
   13aac:	b	13ac4 <__assert_fail@plt+0x2744>
   13ab0:	ldr	r0, [fp, #-52]	; 0xffffffcc
   13ab4:	mov	r1, r9
   13ab8:	cmp	r0, #0
   13abc:	mov	r0, r6
   13ac0:	beq	13e04 <__assert_fail@plt+0x2a84>
   13ac4:	ldr	r2, [fp, #-76]	; 0xffffffb4
   13ac8:	tst	r2, #1
   13acc:	bne	143d4 <__assert_fail@plt+0x3054>
   13ad0:	ldr	r2, [fp, #-68]	; 0xffffffbc
   13ad4:	ldr	r3, [fp, #-56]	; 0xffffffc8
   13ad8:	subs	r2, r2, #2
   13adc:	movwne	r2, #1
   13ae0:	orr	r2, r2, r3
   13ae4:	tst	r2, #1
   13ae8:	bne	13b24 <__assert_fail@plt+0x27a4>
   13aec:	cmp	r8, r4
   13af0:	movcc	r2, #39	; 0x27
   13af4:	strbcc	r2, [r5, r8]
   13af8:	add	r2, r8, #1
   13afc:	cmp	r2, r4
   13b00:	movcc	r3, #36	; 0x24
   13b04:	strbcc	r3, [r5, r2]
   13b08:	add	r2, r8, #2
   13b0c:	add	r8, r8, #3
   13b10:	cmp	r2, r4
   13b14:	movcc	r3, #39	; 0x27
   13b18:	strbcc	r3, [r5, r2]
   13b1c:	mov	r2, #1
   13b20:	str	r2, [fp, #-56]	; 0xffffffc8
   13b24:	cmp	r8, r4
   13b28:	movcc	r2, #92	; 0x5c
   13b2c:	strbcc	r2, [r5, r8]
   13b30:	add	r8, r8, #1
   13b34:	b	13e48 <__assert_fail@plt+0x2ac8>
   13b38:	cmp	lr, #1
   13b3c:	beq	13b64 <__assert_fail@plt+0x27e4>
   13b40:	mov	r9, #0
   13b44:	cmn	lr, #1
   13b48:	bne	13b70 <__assert_fail@plt+0x27f0>
   13b4c:	ldrb	r0, [ip, #1]
   13b50:	cmp	r0, #0
   13b54:	beq	13b64 <__assert_fail@plt+0x27e4>
   13b58:	mvn	lr, #0
   13b5c:	mov	sl, #0
   13b60:	b	13a7c <__assert_fail@plt+0x26fc>
   13b64:	mov	r9, #0
   13b68:	cmp	r7, #0
   13b6c:	beq	13b78 <__assert_fail@plt+0x27f8>
   13b70:	mov	sl, #0
   13b74:	b	13a7c <__assert_fail@plt+0x26fc>
   13b78:	mov	r1, #1
   13b7c:	ldr	r0, [fp, #-68]	; 0xffffffbc
   13b80:	cmp	r0, #2
   13b84:	bne	13b9c <__assert_fail@plt+0x281c>
   13b88:	ldr	r0, [fp, #-76]	; 0xffffffb4
   13b8c:	mov	r9, r1
   13b90:	tst	r0, #1
   13b94:	beq	13a7c <__assert_fail@plt+0x26fc>
   13b98:	b	143d4 <__assert_fail@plt+0x3054>
   13b9c:	mov	r9, r1
   13ba0:	b	13a7c <__assert_fail@plt+0x26fc>
   13ba4:	ldr	r0, [fp, #-68]	; 0xffffffbc
   13ba8:	cmp	r0, #2
   13bac:	bne	13de8 <__assert_fail@plt+0x2a68>
   13bb0:	ldr	r0, [fp, #-76]	; 0xffffffb4
   13bb4:	tst	r0, #1
   13bb8:	bne	143d4 <__assert_fail@plt+0x3054>
   13bbc:	mov	sl, #0
   13bc0:	b	13dfc <__assert_fail@plt+0x2a7c>
   13bc4:	mov	r0, #102	; 0x66
   13bc8:	b	13e70 <__assert_fail@plt+0x2af0>
   13bcc:	mov	r2, #116	; 0x74
   13bd0:	b	13be0 <__assert_fail@plt+0x2860>
   13bd4:	mov	r0, #98	; 0x62
   13bd8:	b	13e70 <__assert_fail@plt+0x2af0>
   13bdc:	mov	r2, #114	; 0x72
   13be0:	ldr	r0, [sp, #68]	; 0x44
   13be4:	tst	r0, #1
   13be8:	mov	r0, r2
   13bec:	bne	13e70 <__assert_fail@plt+0x2af0>
   13bf0:	b	143d4 <__assert_fail@plt+0x3054>
   13bf4:	ldr	r0, [sp, #84]	; 0x54
   13bf8:	tst	r0, #1
   13bfc:	beq	13e8c <__assert_fail@plt+0x2b0c>
   13c00:	ldr	r0, [fp, #-76]	; 0xffffffb4
   13c04:	tst	r0, #1
   13c08:	bne	144c0 <__assert_fail@plt+0x3140>
   13c0c:	ldr	r0, [fp, #-68]	; 0xffffffbc
   13c10:	ldr	r1, [fp, #-56]	; 0xffffffc8
   13c14:	subs	r0, r0, #2
   13c18:	movwne	r0, #1
   13c1c:	orr	r0, r0, r1
   13c20:	tst	r0, #1
   13c24:	bne	13c60 <__assert_fail@plt+0x28e0>
   13c28:	cmp	r8, r4
   13c2c:	movcc	r0, #39	; 0x27
   13c30:	strbcc	r0, [r5, r8]
   13c34:	add	r0, r8, #1
   13c38:	cmp	r0, r4
   13c3c:	movcc	r1, #36	; 0x24
   13c40:	strbcc	r1, [r5, r0]
   13c44:	add	r0, r8, #2
   13c48:	add	r8, r8, #3
   13c4c:	cmp	r0, r4
   13c50:	movcc	r1, #39	; 0x27
   13c54:	strbcc	r1, [r5, r0]
   13c58:	mov	r0, #1
   13c5c:	str	r0, [fp, #-56]	; 0xffffffc8
   13c60:	ldr	r1, [fp, #-68]	; 0xffffffbc
   13c64:	cmp	r8, r4
   13c68:	mov	r9, #0
   13c6c:	mov	sl, #1
   13c70:	mov	r6, #48	; 0x30
   13c74:	movcc	r0, #92	; 0x5c
   13c78:	strbcc	r0, [r5, r8]
   13c7c:	add	r0, r8, #1
   13c80:	cmp	r1, #2
   13c84:	beq	14054 <__assert_fail@plt+0x2cd4>
   13c88:	add	r1, r7, #1
   13c8c:	cmp	r1, lr
   13c90:	bcs	14054 <__assert_fail@plt+0x2cd4>
   13c94:	ldrb	r1, [ip, r1]
   13c98:	sub	r1, r1, #48	; 0x30
   13c9c:	uxtb	r1, r1
   13ca0:	cmp	r1, #9
   13ca4:	bhi	14054 <__assert_fail@plt+0x2cd4>
   13ca8:	cmp	r0, r4
   13cac:	movcc	r1, #48	; 0x30
   13cb0:	strbcc	r1, [r5, r0]
   13cb4:	add	r0, r8, #2
   13cb8:	add	r8, r8, #3
   13cbc:	cmp	r0, r4
   13cc0:	movcc	r1, #48	; 0x30
   13cc4:	strbcc	r1, [r5, r0]
   13cc8:	b	13a7c <__assert_fail@plt+0x26fc>
   13ccc:	ldr	r0, [fp, #-68]	; 0xffffffbc
   13cd0:	mov	sl, #0
   13cd4:	mov	r6, #63	; 0x3f
   13cd8:	cmp	r0, #5
   13cdc:	beq	1405c <__assert_fail@plt+0x2cdc>
   13ce0:	cmp	r0, #2
   13ce4:	bne	14104 <__assert_fail@plt+0x2d84>
   13ce8:	ldr	r0, [fp, #-76]	; 0xffffffb4
   13cec:	mov	r9, #0
   13cf0:	tst	r0, #1
   13cf4:	beq	13a7c <__assert_fail@plt+0x26fc>
   13cf8:	b	143d4 <__assert_fail@plt+0x3054>
   13cfc:	mov	r0, #118	; 0x76
   13d00:	b	13e70 <__assert_fail@plt+0x2af0>
   13d04:	mov	r0, #1
   13d08:	mov	r6, #39	; 0x27
   13d0c:	str	r0, [sp, #60]	; 0x3c
   13d10:	ldr	r0, [fp, #-68]	; 0xffffffbc
   13d14:	cmp	r0, #2
   13d18:	bne	13ea8 <__assert_fail@plt+0x2b28>
   13d1c:	ldr	r0, [fp, #-76]	; 0xffffffb4
   13d20:	tst	r0, #1
   13d24:	bne	143d4 <__assert_fail@plt+0x3054>
   13d28:	ldr	r2, [sp, #56]	; 0x38
   13d2c:	clz	r1, r4
   13d30:	mov	sl, #0
   13d34:	mov	r9, #1
   13d38:	lsr	r1, r1, #5
   13d3c:	cmp	r2, #0
   13d40:	mov	r0, r2
   13d44:	movwne	r0, #1
   13d48:	orrs	r0, r0, r1
   13d4c:	moveq	r2, r4
   13d50:	moveq	r4, r0
   13d54:	cmp	r8, r4
   13d58:	str	r2, [sp, #56]	; 0x38
   13d5c:	movcc	r0, #39	; 0x27
   13d60:	strbcc	r0, [r5, r8]
   13d64:	add	r0, r8, #1
   13d68:	cmp	r0, r4
   13d6c:	movcc	r1, #92	; 0x5c
   13d70:	strbcc	r1, [r5, r0]
   13d74:	add	r0, r8, #2
   13d78:	add	r8, r8, #3
   13d7c:	cmp	r0, r4
   13d80:	movcc	r1, #39	; 0x27
   13d84:	strbcc	r1, [r5, r0]
   13d88:	mov	r0, #0
   13d8c:	str	r0, [fp, #-56]	; 0xffffffc8
   13d90:	b	13a7c <__assert_fail@plt+0x26fc>
   13d94:	ldr	r0, [sp, #40]	; 0x28
   13d98:	str	r4, [sp, #88]	; 0x58
   13d9c:	cmp	r0, #1
   13da0:	bne	13eb0 <__assert_fail@plt+0x2b30>
   13da4:	str	lr, [sp, #28]
   13da8:	bl	1123c <__ctype_b_loc@plt>
   13dac:	ldr	r0, [r0]
   13db0:	ldr	ip, [fp, #-80]	; 0xffffffb0
   13db4:	mov	r2, #1
   13db8:	add	r0, r0, r6, lsl #1
   13dbc:	ldrb	r0, [r0, #1]
   13dc0:	ubfx	r9, r0, #6, #1
   13dc4:	ldr	r0, [sp, #52]	; 0x34
   13dc8:	cmp	r2, #1
   13dcc:	orr	r0, r9, r0
   13dd0:	bhi	1410c <__assert_fail@plt+0x2d8c>
   13dd4:	tst	r0, #1
   13dd8:	beq	1410c <__assert_fail@plt+0x2d8c>
   13ddc:	ldr	lr, [sp, #28]
   13de0:	ldr	r4, [sp, #88]	; 0x58
   13de4:	b	13a7c <__assert_fail@plt+0x26fc>
   13de8:	ldr	r1, [sp, #48]	; 0x30
   13dec:	mov	sl, #0
   13df0:	mov	r0, #92	; 0x5c
   13df4:	cmp	r1, #0
   13df8:	beq	13e70 <__assert_fail@plt+0x2af0>
   13dfc:	mov	r6, #92	; 0x5c
   13e00:	mov	r9, #0
   13e04:	cmp	sl, #0
   13e08:	bne	13e40 <__assert_fail@plt+0x2ac0>
   13e0c:	ldr	r0, [fp, #-56]	; 0xffffffc8
   13e10:	tst	r0, #1
   13e14:	beq	13e40 <__assert_fail@plt+0x2ac0>
   13e18:	cmp	r8, r4
   13e1c:	movcc	r0, #39	; 0x27
   13e20:	strbcc	r0, [r5, r8]
   13e24:	add	r0, r8, #1
   13e28:	add	r8, r8, #2
   13e2c:	cmp	r0, r4
   13e30:	movcc	r1, #39	; 0x27
   13e34:	strbcc	r1, [r5, r0]
   13e38:	mov	r0, #0
   13e3c:	str	r0, [fp, #-56]	; 0xffffffc8
   13e40:	mov	r1, r9
   13e44:	mov	r0, r6
   13e48:	cmp	r8, r4
   13e4c:	strbcc	r0, [r5, r8]
   13e50:	ldr	r0, [fp, #-48]	; 0xffffffd0
   13e54:	add	r8, r8, #1
   13e58:	and	r0, r0, r1
   13e5c:	str	r0, [fp, #-48]	; 0xffffffd0
   13e60:	add	r7, r7, #1
   13e64:	cmn	lr, #1
   13e68:	bne	137a8 <__assert_fail@plt+0x2428>
   13e6c:	b	137b4 <__assert_fail@plt+0x2434>
   13e70:	ldr	r1, [sp, #84]	; 0x54
   13e74:	mov	sl, #0
   13e78:	mov	r9, #0
   13e7c:	tst	r1, #1
   13e80:	mov	r1, #0
   13e84:	beq	13a7c <__assert_fail@plt+0x26fc>
   13e88:	b	13ac4 <__assert_fail@plt+0x2744>
   13e8c:	ldr	r0, [sp, #36]	; 0x24
   13e90:	mov	r6, #0
   13e94:	mov	sl, #0
   13e98:	mov	r9, #0
   13e9c:	cmp	r0, #0
   13ea0:	beq	13a7c <__assert_fail@plt+0x26fc>
   13ea4:	b	13e60 <__assert_fail@plt+0x2ae0>
   13ea8:	mov	r9, #1
   13eac:	b	13a7c <__assert_fail@plt+0x26fc>
   13eb0:	mov	r0, #0
   13eb4:	cmn	lr, #1
   13eb8:	sub	r4, fp, #40	; 0x28
   13ebc:	str	r0, [fp, #-36]	; 0xffffffdc
   13ec0:	str	r0, [fp, #-40]	; 0xffffffd8
   13ec4:	bne	13ed8 <__assert_fail@plt+0x2b58>
   13ec8:	mov	r0, ip
   13ecc:	bl	1126c <strlen@plt>
   13ed0:	ldr	ip, [fp, #-80]	; 0xffffffb0
   13ed4:	mov	lr, r0
   13ed8:	ldr	r0, [sp, #72]	; 0x48
   13edc:	mov	r9, #1
   13ee0:	mov	r2, #0
   13ee4:	str	lr, [sp, #28]
   13ee8:	add	r0, r0, r7
   13eec:	str	r0, [sp, #20]
   13ef0:	b	13f34 <__assert_fail@plt+0x2bb4>
   13ef4:	ldr	r5, [sp, #44]	; 0x2c
   13ef8:	add	r5, r0, r5
   13efc:	ldr	r0, [fp, #-44]	; 0xffffffd4
   13f00:	bl	11170 <iswprint@plt>
   13f04:	cmp	r0, #0
   13f08:	sub	r4, fp, #40	; 0x28
   13f0c:	movwne	r0, #1
   13f10:	and	r9, r9, r0
   13f14:	mov	r0, r4
   13f18:	bl	11110 <mbsinit@plt>
   13f1c:	mov	r2, r5
   13f20:	ldr	lr, [sp, #28]
   13f24:	ldr	r5, [fp, #-84]	; 0xffffffac
   13f28:	ldr	ip, [fp, #-80]	; 0xffffffb0
   13f2c:	cmp	r0, #0
   13f30:	bne	13dc4 <__assert_fail@plt+0x2a44>
   13f34:	add	r0, r2, r7
   13f38:	str	r2, [sp, #44]	; 0x2c
   13f3c:	mov	r3, r4
   13f40:	add	r1, ip, r0
   13f44:	str	r0, [sp, #24]
   13f48:	sub	r2, lr, r0
   13f4c:	sub	r0, fp, #44	; 0x2c
   13f50:	bl	161ac <__assert_fail@plt+0x4e2c>
   13f54:	cmp	r0, #0
   13f58:	beq	142fc <__assert_fail@plt+0x2f7c>
   13f5c:	cmn	r0, #1
   13f60:	beq	142b8 <__assert_fail@plt+0x2f38>
   13f64:	ldr	lr, [sp, #28]
   13f68:	cmn	r0, #2
   13f6c:	beq	142c0 <__assert_fail@plt+0x2f40>
   13f70:	ldr	r2, [sp, #64]	; 0x40
   13f74:	ldr	r4, [sp, #88]	; 0x58
   13f78:	ldr	ip, [sp, #84]	; 0x54
   13f7c:	cmp	r0, #2
   13f80:	mov	r1, #0
   13f84:	movwcc	r1, #1
   13f88:	eor	r2, r2, #1
   13f8c:	orrs	r1, r2, r1
   13f90:	bne	13ef4 <__assert_fail@plt+0x2b74>
   13f94:	ldr	r1, [sp, #44]	; 0x2c
   13f98:	ldr	r2, [sp, #20]
   13f9c:	add	r1, r2, r1
   13fa0:	sub	r2, r0, #1
   13fa4:	b	13fb4 <__assert_fail@plt+0x2c34>
   13fa8:	add	r1, r1, #1
   13fac:	subs	r2, r2, #1
   13fb0:	beq	13ef4 <__assert_fail@plt+0x2b74>
   13fb4:	ldrb	r3, [r1]
   13fb8:	sub	r3, r3, #91	; 0x5b
   13fbc:	cmp	r3, #33	; 0x21
   13fc0:	bhi	13fa8 <__assert_fail@plt+0x2c28>
   13fc4:	add	r5, pc, #0
   13fc8:	ldr	pc, [r5, r3, lsl #2]
   13fcc:			; <UNDEFINED> instruction: 0x000143b0
   13fd0:			; <UNDEFINED> instruction: 0x000143b0
   13fd4:	andeq	r3, r1, r8, lsr #31
   13fd8:			; <UNDEFINED> instruction: 0x000143b0
   13fdc:	andeq	r3, r1, r8, lsr #31
   13fe0:			; <UNDEFINED> instruction: 0x000143b0
   13fe4:	andeq	r3, r1, r8, lsr #31
   13fe8:	andeq	r3, r1, r8, lsr #31
   13fec:	andeq	r3, r1, r8, lsr #31
   13ff0:	andeq	r3, r1, r8, lsr #31
   13ff4:	andeq	r3, r1, r8, lsr #31
   13ff8:	andeq	r3, r1, r8, lsr #31
   13ffc:	andeq	r3, r1, r8, lsr #31
   14000:	andeq	r3, r1, r8, lsr #31
   14004:	andeq	r3, r1, r8, lsr #31
   14008:	andeq	r3, r1, r8, lsr #31
   1400c:	andeq	r3, r1, r8, lsr #31
   14010:	andeq	r3, r1, r8, lsr #31
   14014:	andeq	r3, r1, r8, lsr #31
   14018:	andeq	r3, r1, r8, lsr #31
   1401c:	andeq	r3, r1, r8, lsr #31
   14020:	andeq	r3, r1, r8, lsr #31
   14024:	andeq	r3, r1, r8, lsr #31
   14028:	andeq	r3, r1, r8, lsr #31
   1402c:	andeq	r3, r1, r8, lsr #31
   14030:	andeq	r3, r1, r8, lsr #31
   14034:	andeq	r3, r1, r8, lsr #31
   14038:	andeq	r3, r1, r8, lsr #31
   1403c:	andeq	r3, r1, r8, lsr #31
   14040:	andeq	r3, r1, r8, lsr #31
   14044:	andeq	r3, r1, r8, lsr #31
   14048:	andeq	r3, r1, r8, lsr #31
   1404c:	andeq	r3, r1, r8, lsr #31
   14050:			; <UNDEFINED> instruction: 0x000143b0
   14054:	mov	r8, r0
   14058:	b	13a7c <__assert_fail@plt+0x26fc>
   1405c:	ldr	r0, [sp, #32]
   14060:	cmp	r0, #0
   14064:	beq	14104 <__assert_fail@plt+0x2d84>
   14068:	add	r0, r7, #2
   1406c:	cmp	r0, lr
   14070:	bcs	14104 <__assert_fail@plt+0x2d84>
   14074:	add	r1, r7, ip
   14078:	ldrb	r1, [r1, #1]
   1407c:	cmp	r1, #63	; 0x3f
   14080:	bne	14104 <__assert_fail@plt+0x2d84>
   14084:	ldrb	r9, [ip, r0]
   14088:	sub	r2, r9, #33	; 0x21
   1408c:	cmp	r2, #29
   14090:	bhi	14104 <__assert_fail@plt+0x2d84>
   14094:	movw	r1, #20929	; 0x51c1
   14098:	mov	r3, #1
   1409c:	movt	r1, #14336	; 0x3800
   140a0:	tst	r1, r3, lsl r2
   140a4:	beq	14104 <__assert_fail@plt+0x2d84>
   140a8:	ldr	r1, [fp, #-76]	; 0xffffffb4
   140ac:	tst	r1, #1
   140b0:	bne	143d4 <__assert_fail@plt+0x3054>
   140b4:	cmp	r8, r4
   140b8:	add	r2, r8, #1
   140bc:	mov	r6, r9
   140c0:	mov	r7, r0
   140c4:	mov	r9, #0
   140c8:	movcc	r1, #63	; 0x3f
   140cc:	strbcc	r1, [r5, r8]
   140d0:	cmp	r2, r4
   140d4:	movcc	r1, #34	; 0x22
   140d8:	strbcc	r1, [r5, r2]
   140dc:	add	r2, r8, #2
   140e0:	cmp	r2, r4
   140e4:	movcc	r1, #34	; 0x22
   140e8:	strbcc	r1, [r5, r2]
   140ec:	add	r2, r8, #3
   140f0:	add	r8, r8, #4
   140f4:	cmp	r2, r4
   140f8:	movcc	r1, #63	; 0x3f
   140fc:	strbcc	r1, [r5, r2]
   14100:	b	13a7c <__assert_fail@plt+0x26fc>
   14104:	mov	r9, #0
   14108:	b	13a7c <__assert_fail@plt+0x26fc>
   1410c:	ldr	lr, [sp, #28]
   14110:	ldr	r4, [fp, #-56]	; 0xffffffc8
   14114:	add	r1, r2, r7
   14118:	mov	r2, #0
   1411c:	str	r1, [sp, #44]	; 0x2c
   14120:	tst	r0, #1
   14124:	bne	14240 <__assert_fail@plt+0x2ec0>
   14128:	ldr	r1, [fp, #-76]	; 0xffffffb4
   1412c:	tst	r1, #1
   14130:	bne	143d0 <__assert_fail@plt+0x3050>
   14134:	ldr	r1, [fp, #-68]	; 0xffffffbc
   14138:	subs	r2, r1, #2
   1413c:	movwne	r2, #1
   14140:	orr	r2, r2, r4
   14144:	tst	r2, #1
   14148:	bne	1418c <__assert_fail@plt+0x2e0c>
   1414c:	ldr	r1, [sp, #88]	; 0x58
   14150:	add	r2, r8, #1
   14154:	mov	r4, #1
   14158:	cmp	r8, r1
   1415c:	movcc	r1, #39	; 0x27
   14160:	strbcc	r1, [r5, r8]
   14164:	ldr	r1, [sp, #88]	; 0x58
   14168:	cmp	r2, r1
   1416c:	movcc	r1, #36	; 0x24
   14170:	strbcc	r1, [r5, r2]
   14174:	ldr	r1, [sp, #88]	; 0x58
   14178:	add	r2, r8, #2
   1417c:	add	r8, r8, #3
   14180:	cmp	r2, r1
   14184:	movcc	r1, #39	; 0x27
   14188:	strbcc	r1, [r5, r2]
   1418c:	ldr	r1, [sp, #88]	; 0x58
   14190:	add	r2, r8, #1
   14194:	cmp	r8, r1
   14198:	movcc	r1, #92	; 0x5c
   1419c:	strbcc	r1, [r5, r8]
   141a0:	ldr	r1, [sp, #88]	; 0x58
   141a4:	cmp	r2, r1
   141a8:	bcs	141bc <__assert_fail@plt+0x2e3c>
   141ac:	uxtb	r3, r6
   141b0:	mov	r1, #48	; 0x30
   141b4:	orr	r3, r1, r3, lsr #6
   141b8:	strb	r3, [r5, r2]
   141bc:	ldr	r1, [sp, #88]	; 0x58
   141c0:	add	r2, r8, #2
   141c4:	add	r8, r8, #3
   141c8:	cmp	r2, r1
   141cc:	lsrcc	r3, r6, #3
   141d0:	movcc	r1, #6
   141d4:	bficc	r3, r1, #3, #29
   141d8:	mov	r1, #6
   141dc:	bfi	r6, r1, #3, #29
   141e0:	strbcc	r3, [r5, r2]
   141e4:	mov	r2, #1
   141e8:	b	14268 <__assert_fail@plt+0x2ee8>
   141ec:	ldr	r1, [sp, #88]	; 0x58
   141f0:	ldr	r5, [fp, #-84]	; 0xffffffac
   141f4:	ldr	r4, [sp, #88]	; 0x58
   141f8:	cmp	r8, r1
   141fc:	movcc	r1, #39	; 0x27
   14200:	strbcc	r1, [r5, r8]
   14204:	add	r1, r8, #1
   14208:	add	r8, r8, #2
   1420c:	cmp	r1, r4
   14210:	movcc	r4, #39	; 0x27
   14214:	strbcc	r4, [r5, r1]
   14218:	mov	r4, #0
   1421c:	ldr	r1, [sp, #88]	; 0x58
   14220:	cmp	r8, r1
   14224:	ldr	r1, [sp, #72]	; 0x48
   14228:	strbcc	r6, [r5, r8]
   1422c:	add	r8, r8, #1
   14230:	ldrb	r6, [r1, r7]
   14234:	mov	r7, r3
   14238:	tst	r0, #1
   1423c:	beq	14128 <__assert_fail@plt+0x2da8>
   14240:	ldr	r1, [fp, #-52]	; 0xffffffcc
   14244:	tst	r1, #1
   14248:	beq	14260 <__assert_fail@plt+0x2ee0>
   1424c:	ldr	r1, [sp, #88]	; 0x58
   14250:	cmp	r8, r1
   14254:	movcc	r1, #92	; 0x5c
   14258:	strbcc	r1, [r5, r8]
   1425c:	add	r8, r8, #1
   14260:	mov	r1, #0
   14264:	str	r1, [fp, #-52]	; 0xffffffcc
   14268:	ldr	r1, [sp, #44]	; 0x2c
   1426c:	add	r3, r7, #1
   14270:	and	sl, r2, #1
   14274:	cmp	r1, r3
   14278:	bls	1429c <__assert_fail@plt+0x2f1c>
   1427c:	cmp	sl, #0
   14280:	mvn	r5, r4
   14284:	movwne	sl, #1
   14288:	orr	r5, r5, sl
   1428c:	tst	r5, #1
   14290:	beq	141ec <__assert_fail@plt+0x2e6c>
   14294:	ldr	r5, [fp, #-84]	; 0xffffffac
   14298:	b	1421c <__assert_fail@plt+0x2e9c>
   1429c:	str	r4, [fp, #-56]	; 0xffffffc8
   142a0:	ldr	r4, [sp, #88]	; 0x58
   142a4:	cmp	sl, #0
   142a8:	movwne	sl, #1
   142ac:	cmp	sl, #0
   142b0:	beq	13e0c <__assert_fail@plt+0x2a8c>
   142b4:	b	13e40 <__assert_fail@plt+0x2ac0>
   142b8:	mov	r9, #0
   142bc:	b	142fc <__assert_fail@plt+0x2f7c>
   142c0:	ldr	r0, [sp, #24]
   142c4:	mov	r9, #0
   142c8:	cmp	lr, r0
   142cc:	bls	142fc <__assert_fail@plt+0x2f7c>
   142d0:	ldr	ip, [fp, #-80]	; 0xffffffb0
   142d4:	ldr	r2, [sp, #44]	; 0x2c
   142d8:	add	r0, ip, r7
   142dc:	ldrb	r1, [r0, r2]
   142e0:	cmp	r1, #0
   142e4:	beq	13dc4 <__assert_fail@plt+0x2a44>
   142e8:	add	r2, r2, #1
   142ec:	add	r1, r7, r2
   142f0:	cmp	r1, lr
   142f4:	bcc	142dc <__assert_fail@plt+0x2f5c>
   142f8:	b	13dc4 <__assert_fail@plt+0x2a44>
   142fc:	ldr	ip, [fp, #-80]	; 0xffffffb0
   14300:	ldr	r2, [sp, #44]	; 0x2c
   14304:	b	13dc4 <__assert_fail@plt+0x2a44>
   14308:	mov	lr, r7
   1430c:	b	14314 <__assert_fail@plt+0x2f94>
   14310:	mvn	lr, #0
   14314:	ldr	r1, [fp, #-68]	; 0xffffffbc
   14318:	ldr	r2, [fp, #-76]	; 0xffffffb4
   1431c:	eor	r0, r1, #2
   14320:	orr	r0, r0, r8
   14324:	clz	r0, r0
   14328:	lsr	r0, r0, #5
   1432c:	tst	r2, r0
   14330:	bne	143d4 <__assert_fail@plt+0x3054>
   14334:	subs	r0, r1, #2
   14338:	movwne	r0, #1
   1433c:	orr	r0, r2, r0
   14340:	tst	r0, #1
   14344:	ldreq	r0, [sp, #60]	; 0x3c
   14348:	eoreq	r0, r0, #1
   1434c:	tsteq	r0, #1
   14350:	bne	14468 <__assert_fail@plt+0x30e8>
   14354:	ldr	r0, [fp, #-48]	; 0xffffffd0
   14358:	mov	sl, lr
   1435c:	tst	r0, #1
   14360:	bne	14434 <__assert_fail@plt+0x30b4>
   14364:	ldr	r6, [sp, #56]	; 0x38
   14368:	mov	r9, #0
   1436c:	cmp	r6, #0
   14370:	beq	14460 <__assert_fail@plt+0x30e0>
   14374:	ldr	r0, [sp, #84]	; 0x54
   14378:	mov	r1, #0
   1437c:	mov	r7, #2
   14380:	cmp	r4, #0
   14384:	str	r1, [fp, #-48]	; 0xffffffd0
   14388:	mov	r1, #0
   1438c:	str	r1, [fp, #-76]	; 0xffffffb4
   14390:	beq	13530 <__assert_fail@plt+0x21b0>
   14394:	b	14468 <__assert_fail@plt+0x30e8>
   14398:	ldr	ip, [fp, #-80]	; 0xffffffb0
   1439c:	ldr	r1, [fp, #12]
   143a0:	ldr	r2, [fp, #-68]	; 0xffffffbc
   143a4:	mov	lr, r4
   143a8:	mov	r4, r6
   143ac:	b	143f4 <__assert_fail@plt+0x3074>
   143b0:	tst	ip, #1
   143b4:	ldr	r5, [fp, #-84]	; 0xffffffac
   143b8:	ldr	ip, [fp, #-80]	; 0xffffffb0
   143bc:	ldr	r1, [fp, #12]
   143c0:	mov	r0, #2
   143c4:	movwne	r0, #4
   143c8:	mov	r2, r0
   143cc:	b	143f4 <__assert_fail@plt+0x3074>
   143d0:	ldr	r4, [sp, #88]	; 0x58
   143d4:	ldr	r1, [sp, #84]	; 0x54
   143d8:	mov	r0, #2
   143dc:	tst	r1, #1
   143e0:	movwne	r0, #4
   143e4:	ldr	r2, [fp, #-68]	; 0xffffffbc
   143e8:	ldr	r1, [fp, #12]
   143ec:	cmp	r2, #2
   143f0:	moveq	r2, r0
   143f4:	mov	r0, #0
   143f8:	bic	r1, r1, #2
   143fc:	str	r2, [sp]
   14400:	mov	r2, ip
   14404:	mov	r3, lr
   14408:	str	r0, [sp, #8]
   1440c:	ldr	r0, [sp, #76]	; 0x4c
   14410:	str	r1, [sp, #4]
   14414:	mov	r1, r4
   14418:	str	r0, [sp, #12]
   1441c:	ldr	r0, [sp, #80]	; 0x50
   14420:	str	r0, [sp, #16]
   14424:	mov	r0, r5
   14428:	bl	134a0 <__assert_fail@plt+0x2120>
   1442c:	mov	r8, r0
   14430:	b	144b4 <__assert_fail@plt+0x3134>
   14434:	mov	r0, #5
   14438:	ldr	r1, [sp, #56]	; 0x38
   1443c:	ldr	r2, [fp, #-80]	; 0xffffffb0
   14440:	mov	r3, sl
   14444:	str	r0, [sp]
   14448:	ldr	r0, [fp, #12]
   1444c:	str	r0, [sp, #4]
   14450:	ldr	r0, [fp, #16]
   14454:	str	r0, [sp, #8]
   14458:	ldr	r0, [sp, #76]	; 0x4c
   1445c:	b	14418 <__assert_fail@plt+0x3098>
   14460:	mov	r0, #0
   14464:	str	r0, [fp, #-76]	; 0xffffffb4
   14468:	ldr	r1, [fp, #-88]	; 0xffffffa8
   1446c:	cmp	r1, #0
   14470:	beq	144a8 <__assert_fail@plt+0x3128>
   14474:	ldr	r0, [fp, #-76]	; 0xffffffb4
   14478:	tst	r0, #1
   1447c:	bne	144a8 <__assert_fail@plt+0x3128>
   14480:	ldrb	r0, [r1]
   14484:	cmp	r0, #0
   14488:	beq	144a8 <__assert_fail@plt+0x3128>
   1448c:	add	r1, r1, #1
   14490:	cmp	r8, r4
   14494:	strbcc	r0, [r5, r8]
   14498:	add	r8, r8, #1
   1449c:	ldrb	r0, [r1], #1
   144a0:	cmp	r0, #0
   144a4:	bne	14490 <__assert_fail@plt+0x3110>
   144a8:	cmp	r8, r4
   144ac:	movcc	r0, #0
   144b0:	strbcc	r0, [r5, r8]
   144b4:	mov	r0, r8
   144b8:	sub	sp, fp, #28
   144bc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   144c0:	mov	r0, #4
   144c4:	b	143e4 <__assert_fail@plt+0x3064>
   144c8:	bl	11368 <abort@plt>
   144cc:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   144d0:	add	fp, sp, #28
   144d4:	sub	sp, sp, #28
   144d8:	movw	r5, #33288	; 0x8208
   144dc:	cmp	r2, #0
   144e0:	mov	r4, r1
   144e4:	mov	r7, r0
   144e8:	str	r0, [sp, #20]
   144ec:	movt	r5, #2
   144f0:	movne	r5, r2
   144f4:	bl	11284 <__errno_location@plt>
   144f8:	mov	sl, r0
   144fc:	ldr	r2, [r5, #40]	; 0x28
   14500:	ldr	r3, [r5, #44]	; 0x2c
   14504:	ldm	r5, {r0, r1}
   14508:	orr	r8, r1, #1
   1450c:	add	r9, r5, #8
   14510:	mov	r1, #0
   14514:	ldr	r6, [sl]
   14518:	stm	sp, {r0, r8, r9}
   1451c:	mov	r0, #0
   14520:	str	r2, [sp, #12]
   14524:	str	r3, [sp, #16]
   14528:	mov	r2, r7
   1452c:	mov	r3, r4
   14530:	str	r6, [sp, #24]
   14534:	mov	r6, r4
   14538:	bl	134a0 <__assert_fail@plt+0x2120>
   1453c:	add	r7, r0, #1
   14540:	mov	r0, r7
   14544:	bl	15928 <__assert_fail@plt+0x45a8>
   14548:	mov	r4, r0
   1454c:	ldr	r0, [r5]
   14550:	ldr	r2, [r5, #44]	; 0x2c
   14554:	ldr	r1, [r5, #40]	; 0x28
   14558:	mov	r3, r6
   1455c:	stm	sp, {r0, r8, r9}
   14560:	str	r2, [sp, #16]
   14564:	ldr	r2, [sp, #20]
   14568:	str	r1, [sp, #12]
   1456c:	mov	r0, r4
   14570:	mov	r1, r7
   14574:	bl	134a0 <__assert_fail@plt+0x2120>
   14578:	ldr	r0, [sp, #24]
   1457c:	str	r0, [sl]
   14580:	mov	r0, r4
   14584:	sub	sp, fp, #28
   14588:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1458c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   14590:	add	fp, sp, #28
   14594:	sub	sp, sp, #36	; 0x24
   14598:	movw	r8, #33288	; 0x8208
   1459c:	cmp	r3, #0
   145a0:	mov	r4, r2
   145a4:	str	r2, [sp, #24]
   145a8:	mov	r5, r1
   145ac:	mov	r6, r0
   145b0:	str	r0, [sp, #20]
   145b4:	movt	r8, #2
   145b8:	movne	r8, r3
   145bc:	bl	11284 <__errno_location@plt>
   145c0:	str	r0, [sp, #28]
   145c4:	ldr	r1, [r8, #40]	; 0x28
   145c8:	ldr	r2, [r8, #44]	; 0x2c
   145cc:	ldr	r7, [r0]
   145d0:	cmp	r4, #0
   145d4:	add	sl, r8, #8
   145d8:	mov	r0, #0
   145dc:	ldm	r8, {r3, r9}
   145e0:	orreq	r9, r9, #1
   145e4:	stm	sp, {r3, r9, sl}
   145e8:	str	r1, [sp, #12]
   145ec:	str	r2, [sp, #16]
   145f0:	mov	r1, #0
   145f4:	mov	r2, r6
   145f8:	mov	r3, r5
   145fc:	str	r7, [sp, #32]
   14600:	mov	r7, r5
   14604:	bl	134a0 <__assert_fail@plt+0x2120>
   14608:	add	r4, r0, #1
   1460c:	mov	r5, r0
   14610:	mov	r0, r4
   14614:	bl	15928 <__assert_fail@plt+0x45a8>
   14618:	mov	r6, r0
   1461c:	ldr	r0, [r8]
   14620:	ldr	r2, [r8, #44]	; 0x2c
   14624:	ldr	r1, [r8, #40]	; 0x28
   14628:	mov	r3, r7
   1462c:	stm	sp, {r0, r9, sl}
   14630:	str	r2, [sp, #16]
   14634:	ldr	r2, [sp, #20]
   14638:	str	r1, [sp, #12]
   1463c:	mov	r0, r6
   14640:	mov	r1, r4
   14644:	bl	134a0 <__assert_fail@plt+0x2120>
   14648:	ldr	r0, [sp, #24]
   1464c:	ldr	r1, [sp, #32]
   14650:	ldr	r2, [sp, #28]
   14654:	cmp	r0, #0
   14658:	str	r1, [r2]
   1465c:	strne	r5, [r0]
   14660:	mov	r0, r6
   14664:	sub	sp, fp, #28
   14668:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1466c:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   14670:	add	fp, sp, #24
   14674:	movw	r5, #33068	; 0x812c
   14678:	movw	r8, #33064	; 0x8128
   1467c:	movt	r5, #2
   14680:	movt	r8, #2
   14684:	ldr	r0, [r5]
   14688:	ldr	r4, [r8]
   1468c:	cmp	r0, #2
   14690:	blt	146bc <__assert_fail@plt+0x333c>
   14694:	add	r7, r4, #12
   14698:	mov	r6, #0
   1469c:	ldr	r0, [r7, r6, lsl #3]
   146a0:	bl	13110 <__assert_fail@plt+0x1d90>
   146a4:	ldr	r1, [r5]
   146a8:	add	r2, r6, #2
   146ac:	add	r0, r6, #1
   146b0:	mov	r6, r0
   146b4:	cmp	r2, r1
   146b8:	blt	1469c <__assert_fail@plt+0x331c>
   146bc:	ldr	r0, [r4, #4]
   146c0:	movw	r9, #33336	; 0x8238
   146c4:	movw	r7, #33072	; 0x8130
   146c8:	movt	r9, #2
   146cc:	movt	r7, #2
   146d0:	cmp	r0, r9
   146d4:	beq	146e4 <__assert_fail@plt+0x3364>
   146d8:	bl	13110 <__assert_fail@plt+0x1d90>
   146dc:	mov	r0, #256	; 0x100
   146e0:	stm	r7, {r0, r9}
   146e4:	cmp	r4, r7
   146e8:	beq	146f8 <__assert_fail@plt+0x3378>
   146ec:	mov	r0, r4
   146f0:	bl	13110 <__assert_fail@plt+0x1d90>
   146f4:	str	r7, [r8]
   146f8:	mov	r0, #1
   146fc:	str	r0, [r5]
   14700:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   14704:	movw	r3, #33288	; 0x8208
   14708:	mvn	r2, #0
   1470c:	movt	r3, #2
   14710:	b	14714 <__assert_fail@plt+0x3394>
   14714:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   14718:	add	fp, sp, #28
   1471c:	sub	sp, sp, #44	; 0x2c
   14720:	mov	r7, r3
   14724:	str	r2, [sp, #36]	; 0x24
   14728:	str	r1, [sp, #32]
   1472c:	mov	r5, r0
   14730:	bl	11284 <__errno_location@plt>
   14734:	cmp	r5, #0
   14738:	bmi	148a8 <__assert_fail@plt+0x3528>
   1473c:	cmn	r5, #-2147483647	; 0x80000001
   14740:	beq	148a8 <__assert_fail@plt+0x3528>
   14744:	movw	r8, #33068	; 0x812c
   14748:	movw	r4, #33064	; 0x8128
   1474c:	str	r0, [sp, #28]
   14750:	ldr	r0, [r0]
   14754:	movt	r8, #2
   14758:	movt	r4, #2
   1475c:	ldr	r1, [r8]
   14760:	ldr	r6, [r4]
   14764:	str	r0, [sp, #24]
   14768:	cmp	r1, r5
   1476c:	ble	14778 <__assert_fail@plt+0x33f8>
   14770:	mov	sl, r6
   14774:	b	147e4 <__assert_fail@plt+0x3464>
   14778:	movw	r9, #33072	; 0x8130
   1477c:	mov	r0, #8
   14780:	str	r1, [fp, #-32]	; 0xffffffe0
   14784:	sub	r1, r5, r1
   14788:	mvn	r3, #-2147483648	; 0x80000000
   1478c:	movt	r9, #2
   14790:	str	r0, [sp]
   14794:	add	r2, r1, #1
   14798:	sub	r1, fp, #32
   1479c:	subs	r0, r6, r9
   147a0:	movne	r0, r6
   147a4:	bl	15b28 <__assert_fail@plt+0x47a8>
   147a8:	mov	sl, r0
   147ac:	cmp	r6, r9
   147b0:	str	r0, [r4]
   147b4:	bne	147c0 <__assert_fail@plt+0x3440>
   147b8:	ldrd	r0, [r9]
   147bc:	stm	sl, {r0, r1}
   147c0:	ldr	r1, [r8]
   147c4:	ldr	r2, [fp, #-32]	; 0xffffffe0
   147c8:	add	r0, sl, r1, lsl #3
   147cc:	sub	r1, r2, r1
   147d0:	lsl	r2, r1, #3
   147d4:	mov	r1, #0
   147d8:	bl	112a8 <memset@plt>
   147dc:	ldr	r0, [fp, #-32]	; 0xffffffe0
   147e0:	str	r0, [r8]
   147e4:	mov	r9, sl
   147e8:	ldm	r7, {r0, r1}
   147ec:	orr	r8, r1, #1
   147f0:	add	r1, r7, #8
   147f4:	ldr	r2, [r7, #40]	; 0x28
   147f8:	ldr	r3, [r7, #44]	; 0x2c
   147fc:	ldr	r6, [r9, r5, lsl #3]!
   14800:	str	r1, [sp, #20]
   14804:	ldr	r4, [r9, #4]!
   14808:	stm	sp, {r0, r8}
   1480c:	add	r0, sp, #8
   14810:	stm	r0, {r1, r2, r3}
   14814:	ldr	r2, [sp, #32]
   14818:	ldr	r3, [sp, #36]	; 0x24
   1481c:	mov	r1, r6
   14820:	mov	r0, r4
   14824:	bl	134a0 <__assert_fail@plt+0x2120>
   14828:	cmp	r6, r0
   1482c:	bhi	14890 <__assert_fail@plt+0x3510>
   14830:	add	r6, r0, #1
   14834:	movw	r0, #33336	; 0x8238
   14838:	movt	r0, #2
   1483c:	str	r6, [sl, r5, lsl #3]
   14840:	cmp	r4, r0
   14844:	beq	14850 <__assert_fail@plt+0x34d0>
   14848:	mov	r0, r4
   1484c:	bl	13110 <__assert_fail@plt+0x1d90>
   14850:	mov	r0, r6
   14854:	bl	15928 <__assert_fail@plt+0x45a8>
   14858:	str	r0, [r9]
   1485c:	mov	r4, r0
   14860:	add	r3, sp, #8
   14864:	ldr	r0, [r7]
   14868:	ldr	r1, [r7, #40]	; 0x28
   1486c:	ldr	r2, [r7, #44]	; 0x2c
   14870:	stm	sp, {r0, r8}
   14874:	ldr	r0, [sp, #20]
   14878:	stm	r3, {r0, r1, r2}
   1487c:	ldr	r2, [sp, #32]
   14880:	ldr	r3, [sp, #36]	; 0x24
   14884:	mov	r0, r4
   14888:	mov	r1, r6
   1488c:	bl	134a0 <__assert_fail@plt+0x2120>
   14890:	ldr	r0, [sp, #28]
   14894:	ldr	r1, [sp, #24]
   14898:	str	r1, [r0]
   1489c:	mov	r0, r4
   148a0:	sub	sp, fp, #28
   148a4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   148a8:	bl	11368 <abort@plt>
   148ac:	movw	r3, #33288	; 0x8208
   148b0:	movt	r3, #2
   148b4:	b	14714 <__assert_fail@plt+0x3394>
   148b8:	movw	r3, #33288	; 0x8208
   148bc:	mov	r1, r0
   148c0:	mov	r0, #0
   148c4:	mvn	r2, #0
   148c8:	movt	r3, #2
   148cc:	b	14714 <__assert_fail@plt+0x3394>
   148d0:	movw	r3, #33288	; 0x8208
   148d4:	mov	r2, r1
   148d8:	mov	r1, r0
   148dc:	mov	r0, #0
   148e0:	movt	r3, #2
   148e4:	b	14714 <__assert_fail@plt+0x3394>
   148e8:	push	{fp, lr}
   148ec:	mov	fp, sp
   148f0:	sub	sp, sp, #48	; 0x30
   148f4:	vmov.i32	q8, #0	; 0x00000000
   148f8:	mov	ip, #32
   148fc:	mov	r3, sp
   14900:	mov	lr, r2
   14904:	cmp	r1, #10
   14908:	add	r2, r3, #16
   1490c:	vst1.64	{d16-d17}, [r3], ip
   14910:	vst1.64	{d16-d17}, [r2]
   14914:	vst1.64	{d16-d17}, [r3]
   14918:	beq	14938 <__assert_fail@plt+0x35b8>
   1491c:	str	r1, [sp]
   14920:	mov	r3, sp
   14924:	mov	r1, lr
   14928:	mvn	r2, #0
   1492c:	bl	14714 <__assert_fail@plt+0x3394>
   14930:	mov	sp, fp
   14934:	pop	{fp, pc}
   14938:	bl	11368 <abort@plt>
   1493c:	push	{r4, sl, fp, lr}
   14940:	add	fp, sp, #8
   14944:	sub	sp, sp, #48	; 0x30
   14948:	vmov.i32	q8, #0	; 0x00000000
   1494c:	mov	ip, r3
   14950:	mov	r3, sp
   14954:	mov	lr, #32
   14958:	cmp	r1, #10
   1495c:	add	r4, r3, #16
   14960:	vst1.64	{d16-d17}, [r3], lr
   14964:	vst1.64	{d16-d17}, [r4]
   14968:	vst1.64	{d16-d17}, [r3]
   1496c:	beq	1498c <__assert_fail@plt+0x360c>
   14970:	str	r1, [sp]
   14974:	mov	r1, r2
   14978:	mov	r3, sp
   1497c:	mov	r2, ip
   14980:	bl	14714 <__assert_fail@plt+0x3394>
   14984:	sub	sp, fp, #8
   14988:	pop	{r4, sl, fp, pc}
   1498c:	bl	11368 <abort@plt>
   14990:	push	{fp, lr}
   14994:	mov	fp, sp
   14998:	sub	sp, sp, #48	; 0x30
   1499c:	vmov.i32	q8, #0	; 0x00000000
   149a0:	mov	r3, sp
   149a4:	mov	ip, #32
   149a8:	cmp	r0, #10
   149ac:	add	r2, r3, #16
   149b0:	vst1.64	{d16-d17}, [r3], ip
   149b4:	vst1.64	{d16-d17}, [r2]
   149b8:	vst1.64	{d16-d17}, [r3]
   149bc:	beq	149dc <__assert_fail@plt+0x365c>
   149c0:	str	r0, [sp]
   149c4:	mov	r3, sp
   149c8:	mov	r0, #0
   149cc:	mvn	r2, #0
   149d0:	bl	14714 <__assert_fail@plt+0x3394>
   149d4:	mov	sp, fp
   149d8:	pop	{fp, pc}
   149dc:	bl	11368 <abort@plt>
   149e0:	push	{fp, lr}
   149e4:	mov	fp, sp
   149e8:	sub	sp, sp, #48	; 0x30
   149ec:	vmov.i32	q8, #0	; 0x00000000
   149f0:	mov	r3, sp
   149f4:	mov	ip, #32
   149f8:	cmp	r0, #10
   149fc:	add	lr, r3, #16
   14a00:	vst1.64	{d16-d17}, [r3], ip
   14a04:	vst1.64	{d16-d17}, [lr]
   14a08:	vst1.64	{d16-d17}, [r3]
   14a0c:	beq	14a28 <__assert_fail@plt+0x36a8>
   14a10:	str	r0, [sp]
   14a14:	mov	r3, sp
   14a18:	mov	r0, #0
   14a1c:	bl	14714 <__assert_fail@plt+0x3394>
   14a20:	mov	sp, fp
   14a24:	pop	{fp, pc}
   14a28:	bl	11368 <abort@plt>
   14a2c:	push	{r4, sl, fp, lr}
   14a30:	add	fp, sp, #8
   14a34:	sub	sp, sp, #48	; 0x30
   14a38:	mov	lr, r0
   14a3c:	movw	r0, #33288	; 0x8208
   14a40:	mov	ip, r1
   14a44:	mov	r1, #32
   14a48:	mov	r4, #1
   14a4c:	movt	r0, #2
   14a50:	add	r3, r0, #16
   14a54:	vld1.64	{d16-d17}, [r0], r1
   14a58:	vld1.64	{d20-d21}, [r0]
   14a5c:	vld1.64	{d18-d19}, [r3]
   14a60:	mov	r3, sp
   14a64:	add	r0, r3, #32
   14a68:	add	r1, r3, #16
   14a6c:	vst1.64	{d20-d21}, [r0]
   14a70:	mov	r0, #28
   14a74:	vst1.64	{d18-d19}, [r1]
   14a78:	mov	r1, r3
   14a7c:	and	r0, r0, r2, lsr #3
   14a80:	and	r2, r2, #31
   14a84:	vst1.64	{d16-d17}, [r1], r0
   14a88:	ldr	r0, [r1, #8]
   14a8c:	bic	r4, r4, r0, lsr r2
   14a90:	eor	r0, r0, r4, lsl r2
   14a94:	mov	r2, ip
   14a98:	str	r0, [r1, #8]
   14a9c:	mov	r0, #0
   14aa0:	mov	r1, lr
   14aa4:	bl	14714 <__assert_fail@plt+0x3394>
   14aa8:	sub	sp, fp, #8
   14aac:	pop	{r4, sl, fp, pc}
   14ab0:	push	{fp, lr}
   14ab4:	mov	fp, sp
   14ab8:	sub	sp, sp, #48	; 0x30
   14abc:	mov	ip, r0
   14ac0:	movw	r0, #33288	; 0x8208
   14ac4:	mov	r2, #32
   14ac8:	movt	r0, #2
   14acc:	add	r3, r0, #16
   14ad0:	vld1.64	{d16-d17}, [r0], r2
   14ad4:	vld1.64	{d20-d21}, [r0]
   14ad8:	vld1.64	{d18-d19}, [r3]
   14adc:	mov	r3, sp
   14ae0:	add	r0, r3, #32
   14ae4:	add	r2, r3, #16
   14ae8:	vst1.64	{d20-d21}, [r0]
   14aec:	mov	r0, #28
   14af0:	vst1.64	{d18-d19}, [r2]
   14af4:	mov	r2, r3
   14af8:	and	r0, r0, r1, lsr #3
   14afc:	and	r1, r1, #31
   14b00:	vst1.64	{d16-d17}, [r2], r0
   14b04:	mov	r0, #1
   14b08:	ldr	lr, [r2, #8]
   14b0c:	bic	r0, r0, lr, lsr r1
   14b10:	eor	r0, lr, r0, lsl r1
   14b14:	mov	r1, ip
   14b18:	str	r0, [r2, #8]
   14b1c:	mov	r0, #0
   14b20:	mvn	r2, #0
   14b24:	bl	14714 <__assert_fail@plt+0x3394>
   14b28:	mov	sp, fp
   14b2c:	pop	{fp, pc}
   14b30:	push	{fp, lr}
   14b34:	mov	fp, sp
   14b38:	sub	sp, sp, #48	; 0x30
   14b3c:	mov	r1, r0
   14b40:	movw	r0, #33288	; 0x8208
   14b44:	mov	r3, #32
   14b48:	movt	r0, #2
   14b4c:	add	r2, r0, #16
   14b50:	vld1.64	{d16-d17}, [r0], r3
   14b54:	mov	r3, sp
   14b58:	vld1.64	{d18-d19}, [r2]
   14b5c:	vld1.64	{d20-d21}, [r0]
   14b60:	add	r2, r3, #16
   14b64:	add	r0, r3, #32
   14b68:	vst1.64	{d18-d19}, [r2]
   14b6c:	vst1.64	{d20-d21}, [r0]
   14b70:	mov	r0, #12
   14b74:	mov	r2, r3
   14b78:	vst1.64	{d16-d17}, [r2], r0
   14b7c:	ldr	r0, [r2]
   14b80:	orr	r0, r0, #67108864	; 0x4000000
   14b84:	str	r0, [r2]
   14b88:	mov	r0, #0
   14b8c:	mvn	r2, #0
   14b90:	bl	14714 <__assert_fail@plt+0x3394>
   14b94:	mov	sp, fp
   14b98:	pop	{fp, pc}
   14b9c:	push	{fp, lr}
   14ba0:	mov	fp, sp
   14ba4:	sub	sp, sp, #48	; 0x30
   14ba8:	mov	ip, r1
   14bac:	mov	r1, r0
   14bb0:	movw	r0, #33288	; 0x8208
   14bb4:	mov	r2, #32
   14bb8:	movt	r0, #2
   14bbc:	add	r3, r0, #16
   14bc0:	vld1.64	{d16-d17}, [r0], r2
   14bc4:	vld1.64	{d18-d19}, [r3]
   14bc8:	vld1.64	{d20-d21}, [r0]
   14bcc:	mov	r3, sp
   14bd0:	add	r2, r3, #16
   14bd4:	add	r0, r3, #32
   14bd8:	vst1.64	{d18-d19}, [r2]
   14bdc:	vst1.64	{d20-d21}, [r0]
   14be0:	mov	r0, #12
   14be4:	mov	r2, r3
   14be8:	vst1.64	{d16-d17}, [r2], r0
   14bec:	ldr	r0, [r2]
   14bf0:	orr	r0, r0, #67108864	; 0x4000000
   14bf4:	str	r0, [r2]
   14bf8:	mov	r0, #0
   14bfc:	mov	r2, ip
   14c00:	bl	14714 <__assert_fail@plt+0x3394>
   14c04:	mov	sp, fp
   14c08:	pop	{fp, pc}
   14c0c:	push	{r4, sl, fp, lr}
   14c10:	add	fp, sp, #8
   14c14:	sub	sp, sp, #96	; 0x60
   14c18:	vmov.i32	q8, #0	; 0x00000000
   14c1c:	mov	ip, r2
   14c20:	mov	r2, sp
   14c24:	mov	r4, #28
   14c28:	cmp	r1, #10
   14c2c:	mov	r3, r2
   14c30:	add	lr, r2, #16
   14c34:	vst1.64	{d16-d17}, [r3], r4
   14c38:	vst1.64	{d16-d17}, [lr]
   14c3c:	vst1.32	{d16-d17}, [r3]
   14c40:	beq	14c90 <__assert_fail@plt+0x3910>
   14c44:	vld1.64	{d16-d17}, [r2], r4
   14c48:	vld1.64	{d18-d19}, [lr]
   14c4c:	add	r3, sp, #48	; 0x30
   14c50:	vld1.32	{d20-d21}, [r2]
   14c54:	add	r2, r3, #20
   14c58:	add	r4, r3, #4
   14c5c:	vst1.32	{d18-d19}, [r2]
   14c60:	add	r2, r3, #32
   14c64:	vst1.32	{d16-d17}, [r4]
   14c68:	vst1.32	{d20-d21}, [r2]
   14c6c:	str	r1, [sp, #48]	; 0x30
   14c70:	mvn	r2, #0
   14c74:	ldr	r1, [sp, #60]	; 0x3c
   14c78:	orr	r1, r1, #67108864	; 0x4000000
   14c7c:	str	r1, [sp, #60]	; 0x3c
   14c80:	mov	r1, ip
   14c84:	bl	14714 <__assert_fail@plt+0x3394>
   14c88:	sub	sp, fp, #8
   14c8c:	pop	{r4, sl, fp, pc}
   14c90:	bl	11368 <abort@plt>
   14c94:	push	{r4, r5, r6, sl, fp, lr}
   14c98:	add	fp, sp, #16
   14c9c:	sub	sp, sp, #48	; 0x30
   14ca0:	mov	ip, r3
   14ca4:	movw	r3, #33288	; 0x8208
   14ca8:	mov	r6, #32
   14cac:	cmp	r1, #0
   14cb0:	mov	r4, sp
   14cb4:	movt	r3, #2
   14cb8:	cmpne	r2, #0
   14cbc:	add	r5, r4, #16
   14cc0:	add	lr, r3, #16
   14cc4:	vld1.64	{d16-d17}, [r3], r6
   14cc8:	vld1.64	{d18-d19}, [lr]
   14ccc:	vld1.64	{d20-d21}, [r3]
   14cd0:	mov	r3, #10
   14cd4:	vst1.64	{d16-d17}, [r4], r6
   14cd8:	vst1.64	{d18-d19}, [r5]
   14cdc:	vst1.64	{d20-d21}, [r4]
   14ce0:	str	r3, [sp]
   14ce4:	bne	14cec <__assert_fail@plt+0x396c>
   14ce8:	bl	11368 <abort@plt>
   14cec:	str	r2, [sp, #44]	; 0x2c
   14cf0:	str	r1, [sp, #40]	; 0x28
   14cf4:	mov	r3, sp
   14cf8:	mov	r1, ip
   14cfc:	mvn	r2, #0
   14d00:	bl	14714 <__assert_fail@plt+0x3394>
   14d04:	sub	sp, fp, #16
   14d08:	pop	{r4, r5, r6, sl, fp, pc}
   14d0c:	push	{r4, r5, r6, sl, fp, lr}
   14d10:	add	fp, sp, #16
   14d14:	sub	sp, sp, #48	; 0x30
   14d18:	mov	lr, r3
   14d1c:	movw	r3, #33288	; 0x8208
   14d20:	mov	r6, #32
   14d24:	cmp	r1, #0
   14d28:	mov	r4, sp
   14d2c:	movt	r3, #2
   14d30:	cmpne	r2, #0
   14d34:	add	r5, r4, #16
   14d38:	add	ip, r3, #16
   14d3c:	vld1.64	{d16-d17}, [r3], r6
   14d40:	vld1.64	{d18-d19}, [ip]
   14d44:	vld1.64	{d20-d21}, [r3]
   14d48:	mov	r3, #10
   14d4c:	vst1.64	{d16-d17}, [r4], r6
   14d50:	vst1.64	{d18-d19}, [r5]
   14d54:	vst1.64	{d20-d21}, [r4]
   14d58:	str	r3, [sp]
   14d5c:	bne	14d64 <__assert_fail@plt+0x39e4>
   14d60:	bl	11368 <abort@plt>
   14d64:	ldr	ip, [fp, #8]
   14d68:	str	r2, [sp, #44]	; 0x2c
   14d6c:	str	r1, [sp, #40]	; 0x28
   14d70:	mov	r3, sp
   14d74:	mov	r1, lr
   14d78:	mov	r2, ip
   14d7c:	bl	14714 <__assert_fail@plt+0x3394>
   14d80:	sub	sp, fp, #16
   14d84:	pop	{r4, r5, r6, sl, fp, pc}
   14d88:	push	{r4, sl, fp, lr}
   14d8c:	add	fp, sp, #8
   14d90:	sub	sp, sp, #48	; 0x30
   14d94:	movw	r3, #33288	; 0x8208
   14d98:	mov	lr, #32
   14d9c:	mov	ip, r2
   14da0:	cmp	r0, #0
   14da4:	movt	r3, #2
   14da8:	cmpne	r1, #0
   14dac:	add	r2, r3, #16
   14db0:	vld1.64	{d16-d17}, [r3], lr
   14db4:	vld1.64	{d20-d21}, [r3]
   14db8:	vld1.64	{d18-d19}, [r2]
   14dbc:	mov	r2, sp
   14dc0:	add	r4, r2, #16
   14dc4:	vst1.64	{d16-d17}, [r2], lr
   14dc8:	vst1.64	{d20-d21}, [r2]
   14dcc:	mov	r2, #10
   14dd0:	vst1.64	{d18-d19}, [r4]
   14dd4:	str	r2, [sp]
   14dd8:	bne	14de0 <__assert_fail@plt+0x3a60>
   14ddc:	bl	11368 <abort@plt>
   14de0:	str	r1, [sp, #44]	; 0x2c
   14de4:	str	r0, [sp, #40]	; 0x28
   14de8:	mov	r3, sp
   14dec:	mov	r0, #0
   14df0:	mov	r1, ip
   14df4:	mvn	r2, #0
   14df8:	bl	14714 <__assert_fail@plt+0x3394>
   14dfc:	sub	sp, fp, #8
   14e00:	pop	{r4, sl, fp, pc}
   14e04:	push	{r4, r5, fp, lr}
   14e08:	add	fp, sp, #8
   14e0c:	sub	sp, sp, #48	; 0x30
   14e10:	mov	ip, r3
   14e14:	movw	r3, #33288	; 0x8208
   14e18:	mov	r4, #32
   14e1c:	mov	lr, r2
   14e20:	cmp	r0, #0
   14e24:	movt	r3, #2
   14e28:	cmpne	r1, #0
   14e2c:	add	r2, r3, #16
   14e30:	vld1.64	{d16-d17}, [r3], r4
   14e34:	vld1.64	{d20-d21}, [r3]
   14e38:	vld1.64	{d18-d19}, [r2]
   14e3c:	mov	r2, sp
   14e40:	add	r5, r2, #16
   14e44:	vst1.64	{d16-d17}, [r2], r4
   14e48:	vst1.64	{d20-d21}, [r2]
   14e4c:	mov	r2, #10
   14e50:	vst1.64	{d18-d19}, [r5]
   14e54:	str	r2, [sp]
   14e58:	bne	14e60 <__assert_fail@plt+0x3ae0>
   14e5c:	bl	11368 <abort@plt>
   14e60:	str	r1, [sp, #44]	; 0x2c
   14e64:	str	r0, [sp, #40]	; 0x28
   14e68:	mov	r3, sp
   14e6c:	mov	r0, #0
   14e70:	mov	r1, lr
   14e74:	mov	r2, ip
   14e78:	bl	14714 <__assert_fail@plt+0x3394>
   14e7c:	sub	sp, fp, #8
   14e80:	pop	{r4, r5, fp, pc}
   14e84:	movw	r3, #33080	; 0x8138
   14e88:	movt	r3, #2
   14e8c:	b	14714 <__assert_fail@plt+0x3394>
   14e90:	movw	r3, #33080	; 0x8138
   14e94:	mov	r2, r1
   14e98:	mov	r1, r0
   14e9c:	mov	r0, #0
   14ea0:	movt	r3, #2
   14ea4:	b	14714 <__assert_fail@plt+0x3394>
   14ea8:	movw	r3, #33080	; 0x8138
   14eac:	mvn	r2, #0
   14eb0:	movt	r3, #2
   14eb4:	b	14714 <__assert_fail@plt+0x3394>
   14eb8:	movw	r3, #33080	; 0x8138
   14ebc:	mov	r1, r0
   14ec0:	mov	r0, #0
   14ec4:	mvn	r2, #0
   14ec8:	movt	r3, #2
   14ecc:	b	14714 <__assert_fail@plt+0x3394>
   14ed0:	push	{r4, r5, fp, lr}
   14ed4:	add	fp, sp, #8
   14ed8:	mov	r5, r0
   14edc:	mov	r4, r1
   14ee0:	mov	r0, #0
   14ee4:	mov	r2, #5
   14ee8:	mov	r1, r5
   14eec:	bl	11134 <dcgettext@plt>
   14ef0:	cmp	r0, r5
   14ef4:	popne	{r4, r5, fp, pc}
   14ef8:	bl	16174 <__assert_fail@plt+0x4df4>
   14efc:	ldrb	r1, [r0]
   14f00:	and	r1, r1, #223	; 0xdf
   14f04:	cmp	r1, #71	; 0x47
   14f08:	beq	14f70 <__assert_fail@plt+0x3bf0>
   14f0c:	cmp	r1, #85	; 0x55
   14f10:	bne	14fc8 <__assert_fail@plt+0x3c48>
   14f14:	ldrb	r1, [r0, #1]
   14f18:	and	r1, r1, #223	; 0xdf
   14f1c:	cmp	r1, #84	; 0x54
   14f20:	bne	14fc8 <__assert_fail@plt+0x3c48>
   14f24:	ldrb	r1, [r0, #2]
   14f28:	and	r1, r1, #223	; 0xdf
   14f2c:	cmp	r1, #70	; 0x46
   14f30:	bne	14fc8 <__assert_fail@plt+0x3c48>
   14f34:	ldrb	r1, [r0, #3]
   14f38:	cmp	r1, #45	; 0x2d
   14f3c:	bne	14fc8 <__assert_fail@plt+0x3c48>
   14f40:	ldrb	r1, [r0, #4]
   14f44:	cmp	r1, #56	; 0x38
   14f48:	bne	14fc8 <__assert_fail@plt+0x3c48>
   14f4c:	ldrb	r0, [r0, #5]
   14f50:	cmp	r0, #0
   14f54:	bne	14fc8 <__assert_fail@plt+0x3c48>
   14f58:	ldrb	r1, [r5]
   14f5c:	movw	r2, #28472	; 0x6f38
   14f60:	movw	r0, #28476	; 0x6f3c
   14f64:	movt	r2, #1
   14f68:	movt	r0, #1
   14f6c:	b	14ff8 <__assert_fail@plt+0x3c78>
   14f70:	ldrb	r1, [r0, #1]
   14f74:	and	r1, r1, #223	; 0xdf
   14f78:	cmp	r1, #66	; 0x42
   14f7c:	bne	14fc8 <__assert_fail@plt+0x3c48>
   14f80:	ldrb	r1, [r0, #2]
   14f84:	cmp	r1, #49	; 0x31
   14f88:	bne	14fc8 <__assert_fail@plt+0x3c48>
   14f8c:	ldrb	r1, [r0, #3]
   14f90:	cmp	r1, #56	; 0x38
   14f94:	bne	14fc8 <__assert_fail@plt+0x3c48>
   14f98:	ldrb	r1, [r0, #4]
   14f9c:	cmp	r1, #48	; 0x30
   14fa0:	bne	14fc8 <__assert_fail@plt+0x3c48>
   14fa4:	ldrb	r1, [r0, #5]
   14fa8:	cmp	r1, #51	; 0x33
   14fac:	bne	14fc8 <__assert_fail@plt+0x3c48>
   14fb0:	ldrb	r1, [r0, #6]
   14fb4:	cmp	r1, #48	; 0x30
   14fb8:	bne	14fc8 <__assert_fail@plt+0x3c48>
   14fbc:	ldrb	r0, [r0, #7]
   14fc0:	cmp	r0, #0
   14fc4:	beq	14fe4 <__assert_fail@plt+0x3c64>
   14fc8:	movw	r1, #28466	; 0x6f32
   14fcc:	movw	r0, #28470	; 0x6f36
   14fd0:	cmp	r4, #9
   14fd4:	movt	r1, #1
   14fd8:	movt	r0, #1
   14fdc:	moveq	r0, r1
   14fe0:	pop	{r4, r5, fp, pc}
   14fe4:	ldrb	r1, [r5]
   14fe8:	movw	r2, #28480	; 0x6f40
   14fec:	movw	r0, #28484	; 0x6f44
   14ff0:	movt	r2, #1
   14ff4:	movt	r0, #1
   14ff8:	cmp	r1, #96	; 0x60
   14ffc:	moveq	r0, r2
   15000:	pop	{r4, r5, fp, pc}
   15004:	push	{r4, r5, fp, lr}
   15008:	add	fp, sp, #8
   1500c:	mov	r5, r0
   15010:	mov	r0, #33	; 0x21
   15014:	bl	158f8 <__assert_fail@plt+0x4578>
   15018:	add	r1, r5, #44	; 0x2c
   1501c:	mov	r2, #32
   15020:	mov	r4, r0
   15024:	bl	112b4 <strncpy@plt>
   15028:	mov	r5, #0
   1502c:	strb	r5, [r0, #32]
   15030:	bl	1126c <strlen@plt>
   15034:	cmp	r0, #1
   15038:	blt	15060 <__assert_fail@plt+0x3ce0>
   1503c:	add	r1, r4, r0
   15040:	mov	r0, r1
   15044:	ldrb	r2, [r0, #-1]!
   15048:	cmp	r2, #32
   1504c:	bne	15060 <__assert_fail@plt+0x3ce0>
   15050:	strb	r5, [r1, #-1]
   15054:	cmp	r4, r0
   15058:	mov	r1, r0
   1505c:	bcc	15044 <__assert_fail@plt+0x3cc4>
   15060:	mov	r0, r4
   15064:	pop	{r4, r5, fp, pc}
   15068:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1506c:	add	fp, sp, #28
   15070:	sub	sp, sp, #20
   15074:	mov	r6, #0
   15078:	mov	r5, r3
   1507c:	str	r2, [sp, #12]
   15080:	str	r1, [sp, #8]
   15084:	str	r6, [sp, #16]
   15088:	bl	110d4 <utmpxname@plt>
   1508c:	bl	1114c <setutxent@plt>
   15090:	bl	11374 <getutxent@plt>
   15094:	cmp	r0, #0
   15098:	beq	1517c <__assert_fail@plt+0x3dfc>
   1509c:	mov	r4, r0
   150a0:	and	r7, r5, #1
   150a4:	and	r8, r5, #2
   150a8:	mov	r5, #0
   150ac:	mov	r9, #384	; 0x180
   150b0:	add	sl, sp, #16
   150b4:	mov	r6, #0
   150b8:	b	150e4 <__assert_fail@plt+0x3d64>
   150bc:	add	r0, r5, r5, lsl #1
   150c0:	mov	r1, r4
   150c4:	mov	r2, #384	; 0x180
   150c8:	add	r0, r6, r0, lsl #7
   150cc:	bl	11104 <memcpy@plt>
   150d0:	add	r5, r5, #1
   150d4:	bl	11374 <getutxent@plt>
   150d8:	mov	r4, r0
   150dc:	cmp	r0, #0
   150e0:	beq	15180 <__assert_fail@plt+0x3e00>
   150e4:	ldrb	r0, [r4, #44]	; 0x2c
   150e8:	cmp	r0, #0
   150ec:	mov	r0, #0
   150f0:	beq	15104 <__assert_fail@plt+0x3d84>
   150f4:	ldrh	r0, [r4]
   150f8:	sub	r0, r0, #7
   150fc:	clz	r0, r0
   15100:	lsr	r0, r0, #5
   15104:	cmp	r8, #0
   15108:	beq	15114 <__assert_fail@plt+0x3d94>
   1510c:	cmp	r0, #0
   15110:	beq	150d4 <__assert_fail@plt+0x3d54>
   15114:	cmp	r7, #0
   15118:	beq	15150 <__assert_fail@plt+0x3dd0>
   1511c:	eors	r0, r0, #1
   15120:	bne	15150 <__assert_fail@plt+0x3dd0>
   15124:	ldr	r0, [r4, #4]
   15128:	cmp	r0, #1
   1512c:	blt	15150 <__assert_fail@plt+0x3dd0>
   15130:	mov	r1, #0
   15134:	bl	11230 <kill@plt>
   15138:	cmn	r0, #1
   1513c:	bgt	15150 <__assert_fail@plt+0x3dd0>
   15140:	bl	11284 <__errno_location@plt>
   15144:	ldr	r0, [r0]
   15148:	cmp	r0, #3
   1514c:	beq	150d4 <__assert_fail@plt+0x3d54>
   15150:	ldr	r0, [sp, #16]
   15154:	cmp	r5, r0
   15158:	bne	150bc <__assert_fail@plt+0x3d3c>
   1515c:	mov	r0, r6
   15160:	mov	r1, sl
   15164:	mov	r2, #1
   15168:	mvn	r3, #0
   1516c:	str	r9, [sp]
   15170:	bl	15b28 <__assert_fail@plt+0x47a8>
   15174:	mov	r6, r0
   15178:	b	150bc <__assert_fail@plt+0x3d3c>
   1517c:	mov	r5, #0
   15180:	bl	112fc <endutxent@plt>
   15184:	ldr	r0, [sp, #8]
   15188:	str	r5, [r0]
   1518c:	ldr	r0, [sp, #12]
   15190:	str	r6, [r0]
   15194:	mov	r0, #0
   15198:	sub	sp, fp, #28
   1519c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   151a0:	push	{r4, r5, r6, r7, fp, lr}
   151a4:	add	fp, sp, #16
   151a8:	mov	r4, r1
   151ac:	mov	r1, #0
   151b0:	mov	r6, r2
   151b4:	bl	11308 <setlocale@plt>
   151b8:	cmp	r0, #0
   151bc:	beq	151ec <__assert_fail@plt+0x3e6c>
   151c0:	mov	r7, r0
   151c4:	bl	1126c <strlen@plt>
   151c8:	cmp	r0, r6
   151cc:	bcs	15208 <__assert_fail@plt+0x3e88>
   151d0:	add	r2, r0, #1
   151d4:	mov	r0, r4
   151d8:	mov	r1, r7
   151dc:	bl	11104 <memcpy@plt>
   151e0:	mov	r5, #0
   151e4:	mov	r0, r5
   151e8:	pop	{r4, r5, r6, r7, fp, pc}
   151ec:	mov	r5, #22
   151f0:	cmp	r6, #0
   151f4:	beq	15230 <__assert_fail@plt+0x3eb0>
   151f8:	mov	r0, #0
   151fc:	strb	r0, [r4]
   15200:	mov	r0, r5
   15204:	pop	{r4, r5, r6, r7, fp, pc}
   15208:	mov	r5, #34	; 0x22
   1520c:	cmp	r6, #0
   15210:	beq	15230 <__assert_fail@plt+0x3eb0>
   15214:	sub	r6, r6, #1
   15218:	mov	r0, r4
   1521c:	mov	r1, r7
   15220:	mov	r2, r6
   15224:	bl	11104 <memcpy@plt>
   15228:	mov	r0, #0
   1522c:	strb	r0, [r4, r6]
   15230:	mov	r0, r5
   15234:	pop	{r4, r5, r6, r7, fp, pc}
   15238:	mov	r1, #0
   1523c:	b	11308 <setlocale@plt>
   15240:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   15244:	add	fp, sp, #24
   15248:	sub	sp, sp, #32
   1524c:	ldr	r6, [fp, #12]
   15250:	ldr	r7, [fp, #8]
   15254:	mov	r4, r2
   15258:	mov	r8, r0
   1525c:	cmp	r1, #0
   15260:	beq	15288 <__assert_fail@plt+0x3f08>
   15264:	movw	r2, #28572	; 0x6f9c
   15268:	mov	r5, r1
   1526c:	str	r3, [sp, #4]
   15270:	str	r4, [sp]
   15274:	mov	r0, r8
   15278:	mov	r1, #1
   1527c:	movt	r2, #1
   15280:	mov	r3, r5
   15284:	b	152a0 <__assert_fail@plt+0x3f20>
   15288:	movw	r2, #28584	; 0x6fa8
   1528c:	str	r3, [sp]
   15290:	mov	r0, r8
   15294:	mov	r1, #1
   15298:	mov	r3, r4
   1529c:	movt	r2, #1
   152a0:	bl	112d8 <__fprintf_chk@plt>
   152a4:	movw	r1, #28591	; 0x6faf
   152a8:	mov	r0, #0
   152ac:	mov	r2, #5
   152b0:	movt	r1, #1
   152b4:	bl	11134 <dcgettext@plt>
   152b8:	movw	r2, #29309	; 0x727d
   152bc:	mov	r3, r0
   152c0:	movw	r0, #2022	; 0x7e6
   152c4:	mov	r1, #1
   152c8:	movt	r2, #1
   152cc:	str	r0, [sp]
   152d0:	mov	r0, r8
   152d4:	bl	112d8 <__fprintf_chk@plt>
   152d8:	movw	r4, #27498	; 0x6b6a
   152dc:	mov	r1, r8
   152e0:	movt	r4, #1
   152e4:	mov	r0, r4
   152e8:	bl	110a4 <fputs_unlocked@plt>
   152ec:	movw	r1, #28595	; 0x6fb3
   152f0:	mov	r0, #0
   152f4:	mov	r2, #5
   152f8:	movt	r1, #1
   152fc:	bl	11134 <dcgettext@plt>
   15300:	movw	r3, #28766	; 0x705e
   15304:	mov	r2, r0
   15308:	mov	r0, r8
   1530c:	mov	r1, #1
   15310:	movt	r3, #1
   15314:	bl	112d8 <__fprintf_chk@plt>
   15318:	mov	r0, r4
   1531c:	mov	r1, r8
   15320:	bl	110a4 <fputs_unlocked@plt>
   15324:	cmp	r6, #9
   15328:	bhi	15364 <__assert_fail@plt+0x3fe4>
   1532c:	add	r0, pc, #0
   15330:	ldr	pc, [r0, r6, lsl #2]
   15334:	andeq	r5, r1, ip, asr r3
   15338:	andeq	r5, r1, r0, ror r3
   1533c:	andeq	r5, r1, r0, lsr #7
   15340:	andeq	r5, r1, r8, asr #7
   15344:	strdeq	r5, [r1], -r0
   15348:	andeq	r5, r1, r8, lsl r4
   1534c:	andeq	r5, r1, r0, asr #8
   15350:	andeq	r5, r1, r8, ror r4
   15354:	andeq	r5, r1, r8, lsl r5
   15358:	andeq	r5, r1, r0, asr #9
   1535c:	sub	sp, fp, #24
   15360:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   15364:	movw	r1, #29119	; 0x71bf
   15368:	movt	r1, #1
   1536c:	b	154c8 <__assert_fail@plt+0x4148>
   15370:	movw	r1, #28800	; 0x7080
   15374:	mov	r0, #0
   15378:	mov	r2, #5
   1537c:	movt	r1, #1
   15380:	bl	11134 <dcgettext@plt>
   15384:	ldr	r3, [r7]
   15388:	mov	r2, r0
   1538c:	mov	r0, r8
   15390:	mov	r1, #1
   15394:	sub	sp, fp, #24
   15398:	pop	{r4, r5, r6, r7, r8, sl, fp, lr}
   1539c:	b	112d8 <__fprintf_chk@plt>
   153a0:	movw	r1, #28816	; 0x7090
   153a4:	mov	r0, #0
   153a8:	mov	r2, #5
   153ac:	movt	r1, #1
   153b0:	bl	11134 <dcgettext@plt>
   153b4:	mov	r2, r0
   153b8:	ldr	r3, [r7]
   153bc:	ldr	r0, [r7, #4]
   153c0:	str	r0, [sp]
   153c4:	b	154b4 <__assert_fail@plt+0x4134>
   153c8:	movw	r1, #28839	; 0x70a7
   153cc:	mov	r0, #0
   153d0:	mov	r2, #5
   153d4:	movt	r1, #1
   153d8:	bl	11134 <dcgettext@plt>
   153dc:	mov	r2, r0
   153e0:	ldr	r3, [r7]
   153e4:	ldmib	r7, {r0, r1}
   153e8:	stm	sp, {r0, r1}
   153ec:	b	154b4 <__assert_fail@plt+0x4134>
   153f0:	movw	r1, #28867	; 0x70c3
   153f4:	mov	r0, #0
   153f8:	mov	r2, #5
   153fc:	movt	r1, #1
   15400:	bl	11134 <dcgettext@plt>
   15404:	ldr	r3, [r7]
   15408:	mov	r2, r0
   1540c:	ldmib	r7, {r0, r1, r7}
   15410:	stm	sp, {r0, r1, r7}
   15414:	b	154b4 <__assert_fail@plt+0x4134>
   15418:	movw	r1, #28899	; 0x70e3
   1541c:	mov	r0, #0
   15420:	mov	r2, #5
   15424:	movt	r1, #1
   15428:	bl	11134 <dcgettext@plt>
   1542c:	ldr	r3, [r7]
   15430:	mov	r2, r0
   15434:	ldmib	r7, {r0, r1, r6, r7}
   15438:	stm	sp, {r0, r1, r6, r7}
   1543c:	b	154b4 <__assert_fail@plt+0x4134>
   15440:	movw	r1, #28935	; 0x7107
   15444:	mov	r0, #0
   15448:	mov	r2, #5
   1544c:	movt	r1, #1
   15450:	bl	11134 <dcgettext@plt>
   15454:	mov	r2, r0
   15458:	ldr	r3, [r7]
   1545c:	ldmib	r7, {r0, r1, r6}
   15460:	ldr	r5, [r7, #16]
   15464:	ldr	r7, [r7, #20]
   15468:	stm	sp, {r0, r1, r6}
   1546c:	str	r5, [sp, #12]
   15470:	str	r7, [sp, #16]
   15474:	b	154b4 <__assert_fail@plt+0x4134>
   15478:	movw	r1, #28975	; 0x712f
   1547c:	mov	r0, #0
   15480:	mov	r2, #5
   15484:	movt	r1, #1
   15488:	bl	11134 <dcgettext@plt>
   1548c:	mov	r2, r0
   15490:	ldr	r3, [r7]
   15494:	ldmib	r7, {r0, r1, r6}
   15498:	ldr	r5, [r7, #16]
   1549c:	ldr	r4, [r7, #20]
   154a0:	ldr	r7, [r7, #24]
   154a4:	stm	sp, {r0, r1, r6}
   154a8:	str	r5, [sp, #12]
   154ac:	str	r4, [sp, #16]
   154b0:	str	r7, [sp, #20]
   154b4:	mov	r0, r8
   154b8:	mov	r1, #1
   154bc:	b	15568 <__assert_fail@plt+0x41e8>
   154c0:	movw	r1, #29067	; 0x718b
   154c4:	movt	r1, #1
   154c8:	mov	r0, #0
   154cc:	mov	r2, #5
   154d0:	bl	11134 <dcgettext@plt>
   154d4:	mov	ip, r0
   154d8:	ldr	r3, [r7]
   154dc:	ldr	r0, [r7, #4]
   154e0:	ldr	r1, [r7, #8]
   154e4:	ldr	r6, [r7, #12]
   154e8:	ldr	r5, [r7, #16]
   154ec:	ldr	r4, [r7, #20]
   154f0:	ldr	r2, [r7, #24]
   154f4:	ldr	lr, [r7, #28]
   154f8:	ldr	r7, [r7, #32]
   154fc:	stm	sp, {r0, r1, r6}
   15500:	str	r5, [sp, #12]
   15504:	str	r4, [sp, #16]
   15508:	str	r2, [sp, #20]
   1550c:	str	lr, [sp, #24]
   15510:	str	r7, [sp, #28]
   15514:	b	1555c <__assert_fail@plt+0x41dc>
   15518:	movw	r1, #29019	; 0x715b
   1551c:	mov	r0, #0
   15520:	mov	r2, #5
   15524:	movt	r1, #1
   15528:	bl	11134 <dcgettext@plt>
   1552c:	mov	ip, r0
   15530:	ldr	r3, [r7]
   15534:	ldmib	r7, {r0, r1, r6}
   15538:	ldr	r5, [r7, #16]
   1553c:	ldr	r4, [r7, #20]
   15540:	ldr	r2, [r7, #24]
   15544:	ldr	r7, [r7, #28]
   15548:	stm	sp, {r0, r1, r6}
   1554c:	str	r5, [sp, #12]
   15550:	str	r4, [sp, #16]
   15554:	str	r2, [sp, #20]
   15558:	str	r7, [sp, #24]
   1555c:	mov	r0, r8
   15560:	mov	r1, #1
   15564:	mov	r2, ip
   15568:	bl	112d8 <__fprintf_chk@plt>
   1556c:	sub	sp, fp, #24
   15570:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   15574:	push	{r4, sl, fp, lr}
   15578:	add	fp, sp, #8
   1557c:	sub	sp, sp, #8
   15580:	ldr	ip, [fp, #8]
   15584:	mov	lr, #0
   15588:	ldr	r4, [ip, lr, lsl #2]
   1558c:	add	lr, lr, #1
   15590:	cmp	r4, #0
   15594:	bne	15588 <__assert_fail@plt+0x4208>
   15598:	sub	r4, lr, #1
   1559c:	str	ip, [sp]
   155a0:	str	r4, [sp, #4]
   155a4:	bl	15240 <__assert_fail@plt+0x3ec0>
   155a8:	sub	sp, fp, #8
   155ac:	pop	{r4, sl, fp, pc}
   155b0:	push	{fp, lr}
   155b4:	mov	fp, sp
   155b8:	sub	sp, sp, #48	; 0x30
   155bc:	ldr	ip, [fp, #8]
   155c0:	ldr	lr, [ip]
   155c4:	cmp	lr, #0
   155c8:	str	lr, [sp, #8]
   155cc:	beq	15668 <__assert_fail@plt+0x42e8>
   155d0:	ldr	lr, [ip, #4]
   155d4:	cmp	lr, #0
   155d8:	str	lr, [sp, #12]
   155dc:	beq	15670 <__assert_fail@plt+0x42f0>
   155e0:	ldr	lr, [ip, #8]
   155e4:	cmp	lr, #0
   155e8:	str	lr, [sp, #16]
   155ec:	beq	15678 <__assert_fail@plt+0x42f8>
   155f0:	ldr	lr, [ip, #12]
   155f4:	cmp	lr, #0
   155f8:	str	lr, [sp, #20]
   155fc:	beq	15680 <__assert_fail@plt+0x4300>
   15600:	ldr	lr, [ip, #16]
   15604:	cmp	lr, #0
   15608:	str	lr, [sp, #24]
   1560c:	beq	15688 <__assert_fail@plt+0x4308>
   15610:	ldr	lr, [ip, #20]
   15614:	cmp	lr, #0
   15618:	str	lr, [sp, #28]
   1561c:	beq	15690 <__assert_fail@plt+0x4310>
   15620:	ldr	lr, [ip, #24]
   15624:	cmp	lr, #0
   15628:	str	lr, [sp, #32]
   1562c:	beq	15698 <__assert_fail@plt+0x4318>
   15630:	ldr	lr, [ip, #28]
   15634:	cmp	lr, #0
   15638:	str	lr, [sp, #36]	; 0x24
   1563c:	beq	156a0 <__assert_fail@plt+0x4320>
   15640:	ldr	lr, [ip, #32]
   15644:	cmp	lr, #0
   15648:	str	lr, [sp, #40]	; 0x28
   1564c:	beq	156a8 <__assert_fail@plt+0x4328>
   15650:	ldr	lr, [ip, #36]	; 0x24
   15654:	mov	ip, #10
   15658:	cmp	lr, #0
   1565c:	str	lr, [sp, #44]	; 0x2c
   15660:	movweq	ip, #9
   15664:	b	156ac <__assert_fail@plt+0x432c>
   15668:	mov	ip, #0
   1566c:	b	156ac <__assert_fail@plt+0x432c>
   15670:	mov	ip, #1
   15674:	b	156ac <__assert_fail@plt+0x432c>
   15678:	mov	ip, #2
   1567c:	b	156ac <__assert_fail@plt+0x432c>
   15680:	mov	ip, #3
   15684:	b	156ac <__assert_fail@plt+0x432c>
   15688:	mov	ip, #4
   1568c:	b	156ac <__assert_fail@plt+0x432c>
   15690:	mov	ip, #5
   15694:	b	156ac <__assert_fail@plt+0x432c>
   15698:	mov	ip, #6
   1569c:	b	156ac <__assert_fail@plt+0x432c>
   156a0:	mov	ip, #7
   156a4:	b	156ac <__assert_fail@plt+0x432c>
   156a8:	mov	ip, #8
   156ac:	add	lr, sp, #8
   156b0:	str	ip, [sp, #4]
   156b4:	str	lr, [sp]
   156b8:	bl	15240 <__assert_fail@plt+0x3ec0>
   156bc:	mov	sp, fp
   156c0:	pop	{fp, pc}
   156c4:	push	{fp, lr}
   156c8:	mov	fp, sp
   156cc:	sub	sp, sp, #56	; 0x38
   156d0:	add	ip, fp, #8
   156d4:	str	ip, [sp, #12]
   156d8:	ldr	lr, [fp, #8]
   156dc:	cmp	lr, #0
   156e0:	str	lr, [sp, #16]
   156e4:	beq	15780 <__assert_fail@plt+0x4400>
   156e8:	ldr	lr, [ip, #4]
   156ec:	cmp	lr, #0
   156f0:	str	lr, [sp, #20]
   156f4:	beq	15788 <__assert_fail@plt+0x4408>
   156f8:	ldr	lr, [ip, #8]
   156fc:	cmp	lr, #0
   15700:	str	lr, [sp, #24]
   15704:	beq	15790 <__assert_fail@plt+0x4410>
   15708:	ldr	lr, [ip, #12]
   1570c:	cmp	lr, #0
   15710:	str	lr, [sp, #28]
   15714:	beq	15798 <__assert_fail@plt+0x4418>
   15718:	ldr	lr, [ip, #16]
   1571c:	cmp	lr, #0
   15720:	str	lr, [sp, #32]
   15724:	beq	157a0 <__assert_fail@plt+0x4420>
   15728:	ldr	lr, [ip, #20]
   1572c:	cmp	lr, #0
   15730:	str	lr, [sp, #36]	; 0x24
   15734:	beq	157a8 <__assert_fail@plt+0x4428>
   15738:	ldr	lr, [ip, #24]
   1573c:	cmp	lr, #0
   15740:	str	lr, [sp, #40]	; 0x28
   15744:	beq	157b0 <__assert_fail@plt+0x4430>
   15748:	ldr	lr, [ip, #28]
   1574c:	cmp	lr, #0
   15750:	str	lr, [sp, #44]	; 0x2c
   15754:	beq	157b8 <__assert_fail@plt+0x4438>
   15758:	ldr	lr, [ip, #32]
   1575c:	cmp	lr, #0
   15760:	str	lr, [sp, #48]	; 0x30
   15764:	beq	157c0 <__assert_fail@plt+0x4440>
   15768:	ldr	lr, [ip, #36]	; 0x24
   1576c:	mov	ip, #10
   15770:	cmp	lr, #0
   15774:	str	lr, [sp, #52]	; 0x34
   15778:	movweq	ip, #9
   1577c:	b	157c4 <__assert_fail@plt+0x4444>
   15780:	mov	ip, #0
   15784:	b	157c4 <__assert_fail@plt+0x4444>
   15788:	mov	ip, #1
   1578c:	b	157c4 <__assert_fail@plt+0x4444>
   15790:	mov	ip, #2
   15794:	b	157c4 <__assert_fail@plt+0x4444>
   15798:	mov	ip, #3
   1579c:	b	157c4 <__assert_fail@plt+0x4444>
   157a0:	mov	ip, #4
   157a4:	b	157c4 <__assert_fail@plt+0x4444>
   157a8:	mov	ip, #5
   157ac:	b	157c4 <__assert_fail@plt+0x4444>
   157b0:	mov	ip, #6
   157b4:	b	157c4 <__assert_fail@plt+0x4444>
   157b8:	mov	ip, #7
   157bc:	b	157c4 <__assert_fail@plt+0x4444>
   157c0:	mov	ip, #8
   157c4:	add	lr, sp, #16
   157c8:	str	ip, [sp, #4]
   157cc:	str	lr, [sp]
   157d0:	bl	15240 <__assert_fail@plt+0x3ec0>
   157d4:	mov	sp, fp
   157d8:	pop	{fp, pc}
   157dc:	push	{fp, lr}
   157e0:	mov	fp, sp
   157e4:	movw	r0, #33148	; 0x817c
   157e8:	movt	r0, #2
   157ec:	ldr	r1, [r0]
   157f0:	movw	r0, #27498	; 0x6b6a
   157f4:	movt	r0, #1
   157f8:	bl	110a4 <fputs_unlocked@plt>
   157fc:	movw	r1, #29179	; 0x71fb
   15800:	mov	r0, #0
   15804:	mov	r2, #5
   15808:	movt	r1, #1
   1580c:	bl	11134 <dcgettext@plt>
   15810:	movw	r2, #29199	; 0x720f
   15814:	mov	r1, r0
   15818:	mov	r0, #1
   1581c:	movt	r2, #1
   15820:	bl	112c0 <__printf_chk@plt>
   15824:	movw	r1, #29221	; 0x7225
   15828:	mov	r0, #0
   1582c:	mov	r2, #5
   15830:	movt	r1, #1
   15834:	bl	11134 <dcgettext@plt>
   15838:	movw	r2, #27084	; 0x69cc
   1583c:	movw	r3, #27307	; 0x6aab
   15840:	mov	r1, r0
   15844:	mov	r0, #1
   15848:	movt	r2, #1
   1584c:	movt	r3, #1
   15850:	bl	112c0 <__printf_chk@plt>
   15854:	movw	r1, #29241	; 0x7239
   15858:	mov	r0, #0
   1585c:	mov	r2, #5
   15860:	movt	r1, #1
   15864:	bl	11134 <dcgettext@plt>
   15868:	movw	r2, #29280	; 0x7260
   1586c:	mov	r1, r0
   15870:	mov	r0, #1
   15874:	movt	r2, #1
   15878:	pop	{fp, lr}
   1587c:	b	112c0 <__printf_chk@plt>
   15880:	push	{r4, r5, r6, sl, fp, lr}
   15884:	add	fp, sp, #16
   15888:	mov	r4, r2
   1588c:	mov	r5, r1
   15890:	mov	r6, r0
   15894:	bl	16210 <__assert_fail@plt+0x4e90>
   15898:	cmp	r0, #0
   1589c:	popne	{r4, r5, r6, sl, fp, pc}
   158a0:	cmp	r6, #0
   158a4:	beq	158b8 <__assert_fail@plt+0x4538>
   158a8:	cmp	r5, #0
   158ac:	cmpne	r4, #0
   158b0:	bne	158b8 <__assert_fail@plt+0x4538>
   158b4:	pop	{r4, r5, r6, sl, fp, pc}
   158b8:	bl	15e34 <__assert_fail@plt+0x4ab4>
   158bc:	push	{r4, r5, r6, sl, fp, lr}
   158c0:	add	fp, sp, #16
   158c4:	mov	r4, r2
   158c8:	mov	r5, r1
   158cc:	mov	r6, r0
   158d0:	bl	16210 <__assert_fail@plt+0x4e90>
   158d4:	cmp	r0, #0
   158d8:	popne	{r4, r5, r6, sl, fp, pc}
   158dc:	cmp	r6, #0
   158e0:	beq	158f4 <__assert_fail@plt+0x4574>
   158e4:	cmp	r5, #0
   158e8:	cmpne	r4, #0
   158ec:	bne	158f4 <__assert_fail@plt+0x4574>
   158f0:	pop	{r4, r5, r6, sl, fp, pc}
   158f4:	bl	15e34 <__assert_fail@plt+0x4ab4>
   158f8:	push	{fp, lr}
   158fc:	mov	fp, sp
   15900:	bl	15ecc <__assert_fail@plt+0x4b4c>
   15904:	cmp	r0, #0
   15908:	popne	{fp, pc}
   1590c:	bl	15e34 <__assert_fail@plt+0x4ab4>
   15910:	push	{fp, lr}
   15914:	mov	fp, sp
   15918:	bl	15ecc <__assert_fail@plt+0x4b4c>
   1591c:	cmp	r0, #0
   15920:	popne	{fp, pc}
   15924:	bl	15e34 <__assert_fail@plt+0x4ab4>
   15928:	push	{fp, lr}
   1592c:	mov	fp, sp
   15930:	bl	15ecc <__assert_fail@plt+0x4b4c>
   15934:	cmp	r0, #0
   15938:	popne	{fp, pc}
   1593c:	bl	15e34 <__assert_fail@plt+0x4ab4>
   15940:	push	{r4, r5, fp, lr}
   15944:	add	fp, sp, #8
   15948:	mov	r4, r1
   1594c:	mov	r5, r0
   15950:	bl	15efc <__assert_fail@plt+0x4b7c>
   15954:	cmp	r0, #0
   15958:	popne	{r4, r5, fp, pc}
   1595c:	cmp	r5, #0
   15960:	beq	15970 <__assert_fail@plt+0x45f0>
   15964:	cmp	r4, #0
   15968:	bne	15970 <__assert_fail@plt+0x45f0>
   1596c:	pop	{r4, r5, fp, pc}
   15970:	bl	15e34 <__assert_fail@plt+0x4ab4>
   15974:	push	{fp, lr}
   15978:	mov	fp, sp
   1597c:	cmp	r1, #0
   15980:	orreq	r1, r1, #1
   15984:	bl	15efc <__assert_fail@plt+0x4b7c>
   15988:	cmp	r0, #0
   1598c:	popne	{fp, pc}
   15990:	bl	15e34 <__assert_fail@plt+0x4ab4>
   15994:	push	{fp, lr}
   15998:	mov	fp, sp
   1599c:	clz	r3, r2
   159a0:	lsr	ip, r3, #5
   159a4:	clz	r3, r1
   159a8:	lsr	r3, r3, #5
   159ac:	orrs	r3, r3, ip
   159b0:	movwne	r1, #1
   159b4:	movwne	r2, #1
   159b8:	bl	16210 <__assert_fail@plt+0x4e90>
   159bc:	cmp	r0, #0
   159c0:	popne	{fp, pc}
   159c4:	bl	15e34 <__assert_fail@plt+0x4ab4>
   159c8:	push	{fp, lr}
   159cc:	mov	fp, sp
   159d0:	mov	r2, r1
   159d4:	mov	r1, r0
   159d8:	mov	r0, #0
   159dc:	bl	16210 <__assert_fail@plt+0x4e90>
   159e0:	cmp	r0, #0
   159e4:	popne	{fp, pc}
   159e8:	bl	15e34 <__assert_fail@plt+0x4ab4>
   159ec:	push	{fp, lr}
   159f0:	mov	fp, sp
   159f4:	mov	r2, r1
   159f8:	mov	r1, r0
   159fc:	clz	r0, r2
   15a00:	clz	r3, r1
   15a04:	lsr	r0, r0, #5
   15a08:	lsr	r3, r3, #5
   15a0c:	orrs	r0, r3, r0
   15a10:	mov	r0, #0
   15a14:	movwne	r1, #1
   15a18:	movwne	r2, #1
   15a1c:	bl	16210 <__assert_fail@plt+0x4e90>
   15a20:	cmp	r0, #0
   15a24:	popne	{fp, pc}
   15a28:	bl	15e34 <__assert_fail@plt+0x4ab4>
   15a2c:	push	{r4, r5, r6, sl, fp, lr}
   15a30:	add	fp, sp, #16
   15a34:	ldr	r5, [r1]
   15a38:	mov	r4, r1
   15a3c:	mov	r6, r0
   15a40:	cmp	r0, #0
   15a44:	beq	15a5c <__assert_fail@plt+0x46dc>
   15a48:	mov	r0, #1
   15a4c:	add	r0, r0, r5, lsr #1
   15a50:	adds	r5, r5, r0
   15a54:	bcc	15a64 <__assert_fail@plt+0x46e4>
   15a58:	b	15aa0 <__assert_fail@plt+0x4720>
   15a5c:	cmp	r5, #0
   15a60:	movweq	r5, #64	; 0x40
   15a64:	mov	r0, r6
   15a68:	mov	r1, r5
   15a6c:	mov	r2, #1
   15a70:	bl	16210 <__assert_fail@plt+0x4e90>
   15a74:	cmp	r5, #0
   15a78:	mov	r1, r5
   15a7c:	movwne	r1, #1
   15a80:	cmp	r0, #0
   15a84:	bne	15a98 <__assert_fail@plt+0x4718>
   15a88:	clz	r2, r6
   15a8c:	lsr	r2, r2, #5
   15a90:	orrs	r1, r2, r1
   15a94:	bne	15aa0 <__assert_fail@plt+0x4720>
   15a98:	str	r5, [r4]
   15a9c:	pop	{r4, r5, r6, sl, fp, pc}
   15aa0:	bl	15e34 <__assert_fail@plt+0x4ab4>
   15aa4:	push	{r4, r5, r6, r7, fp, lr}
   15aa8:	add	fp, sp, #16
   15aac:	ldr	r5, [r1]
   15ab0:	mov	r6, r2
   15ab4:	mov	r4, r1
   15ab8:	mov	r7, r0
   15abc:	cmp	r0, #0
   15ac0:	beq	15ad8 <__assert_fail@plt+0x4758>
   15ac4:	mov	r0, #1
   15ac8:	add	r0, r0, r5, lsr #1
   15acc:	adds	r5, r5, r0
   15ad0:	bcc	15af0 <__assert_fail@plt+0x4770>
   15ad4:	b	15b24 <__assert_fail@plt+0x47a4>
   15ad8:	cmp	r5, #0
   15adc:	bne	15af0 <__assert_fail@plt+0x4770>
   15ae0:	mov	r0, #64	; 0x40
   15ae4:	cmp	r6, #64	; 0x40
   15ae8:	udiv	r5, r0, r6
   15aec:	addhi	r5, r5, #1
   15af0:	mov	r0, r7
   15af4:	mov	r1, r5
   15af8:	mov	r2, r6
   15afc:	bl	16210 <__assert_fail@plt+0x4e90>
   15b00:	cmp	r0, #0
   15b04:	bne	15b1c <__assert_fail@plt+0x479c>
   15b08:	cmp	r7, #0
   15b0c:	beq	15b24 <__assert_fail@plt+0x47a4>
   15b10:	cmp	r6, #0
   15b14:	cmpne	r5, #0
   15b18:	bne	15b24 <__assert_fail@plt+0x47a4>
   15b1c:	str	r5, [r4]
   15b20:	pop	{r4, r5, r6, r7, fp, pc}
   15b24:	bl	15e34 <__assert_fail@plt+0x4ab4>
   15b28:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   15b2c:	add	fp, sp, #24
   15b30:	mov	r8, r1
   15b34:	ldr	r1, [r1]
   15b38:	mov	r5, r0
   15b3c:	add	r0, r1, r1, asr #1
   15b40:	cmp	r0, r1
   15b44:	mvnvs	r0, #-2147483648	; 0x80000000
   15b48:	cmp	r0, r3
   15b4c:	mov	r7, r0
   15b50:	movgt	r7, r3
   15b54:	cmn	r3, #1
   15b58:	movle	r7, r0
   15b5c:	ldr	r0, [fp, #8]
   15b60:	cmn	r0, #1
   15b64:	ble	15b8c <__assert_fail@plt+0x480c>
   15b68:	cmp	r0, #0
   15b6c:	beq	15be0 <__assert_fail@plt+0x4860>
   15b70:	cmn	r7, #1
   15b74:	ble	15bb4 <__assert_fail@plt+0x4834>
   15b78:	mvn	r4, #-2147483648	; 0x80000000
   15b7c:	udiv	r6, r4, r0
   15b80:	cmp	r6, r7
   15b84:	bge	15be0 <__assert_fail@plt+0x4860>
   15b88:	b	15bf0 <__assert_fail@plt+0x4870>
   15b8c:	cmn	r7, #1
   15b90:	ble	15bd0 <__assert_fail@plt+0x4850>
   15b94:	cmn	r0, #1
   15b98:	beq	15be0 <__assert_fail@plt+0x4860>
   15b9c:	mov	r6, #-2147483648	; 0x80000000
   15ba0:	mvn	r4, #-2147483648	; 0x80000000
   15ba4:	sdiv	r6, r6, r0
   15ba8:	cmp	r6, r7
   15bac:	bge	15be0 <__assert_fail@plt+0x4860>
   15bb0:	b	15bf0 <__assert_fail@plt+0x4870>
   15bb4:	beq	15be0 <__assert_fail@plt+0x4860>
   15bb8:	mov	r6, #-2147483648	; 0x80000000
   15bbc:	mvn	r4, #-2147483648	; 0x80000000
   15bc0:	sdiv	r6, r6, r7
   15bc4:	cmp	r6, r0
   15bc8:	bge	15be0 <__assert_fail@plt+0x4860>
   15bcc:	b	15bf0 <__assert_fail@plt+0x4870>
   15bd0:	mvn	r4, #-2147483648	; 0x80000000
   15bd4:	sdiv	r6, r4, r0
   15bd8:	cmp	r7, r6
   15bdc:	blt	15bf0 <__assert_fail@plt+0x4870>
   15be0:	mul	r6, r7, r0
   15be4:	mov	r4, #64	; 0x40
   15be8:	cmp	r6, #63	; 0x3f
   15bec:	bgt	15bf8 <__assert_fail@plt+0x4878>
   15bf0:	sdiv	r7, r4, r0
   15bf4:	mul	r6, r7, r0
   15bf8:	cmp	r5, #0
   15bfc:	moveq	r4, #0
   15c00:	streq	r4, [r8]
   15c04:	sub	r4, r7, r1
   15c08:	cmp	r4, r2
   15c0c:	bge	15cb8 <__assert_fail@plt+0x4938>
   15c10:	add	r7, r1, r2
   15c14:	mov	r6, #0
   15c18:	mov	r2, #0
   15c1c:	cmp	r7, r3
   15c20:	movwgt	r6, #1
   15c24:	cmn	r3, #1
   15c28:	movwgt	r2, #1
   15c2c:	cmp	r7, r1
   15c30:	bvs	15cec <__assert_fail@plt+0x496c>
   15c34:	ands	r1, r2, r6
   15c38:	bne	15cec <__assert_fail@plt+0x496c>
   15c3c:	cmn	r0, #1
   15c40:	ble	15c68 <__assert_fail@plt+0x48e8>
   15c44:	cmp	r0, #0
   15c48:	beq	15cb4 <__assert_fail@plt+0x4934>
   15c4c:	cmn	r7, #1
   15c50:	ble	15c8c <__assert_fail@plt+0x490c>
   15c54:	mvn	r1, #-2147483648	; 0x80000000
   15c58:	udiv	r1, r1, r0
   15c5c:	cmp	r1, r7
   15c60:	bge	15cb4 <__assert_fail@plt+0x4934>
   15c64:	b	15cec <__assert_fail@plt+0x496c>
   15c68:	cmn	r7, #1
   15c6c:	ble	15ca4 <__assert_fail@plt+0x4924>
   15c70:	cmn	r0, #1
   15c74:	beq	15cb4 <__assert_fail@plt+0x4934>
   15c78:	mov	r1, #-2147483648	; 0x80000000
   15c7c:	sdiv	r1, r1, r0
   15c80:	cmp	r1, r7
   15c84:	bge	15cb4 <__assert_fail@plt+0x4934>
   15c88:	b	15cec <__assert_fail@plt+0x496c>
   15c8c:	beq	15cb4 <__assert_fail@plt+0x4934>
   15c90:	mov	r1, #-2147483648	; 0x80000000
   15c94:	sdiv	r1, r1, r7
   15c98:	cmp	r1, r0
   15c9c:	bge	15cb4 <__assert_fail@plt+0x4934>
   15ca0:	b	15cec <__assert_fail@plt+0x496c>
   15ca4:	mvn	r1, #-2147483648	; 0x80000000
   15ca8:	sdiv	r1, r1, r0
   15cac:	cmp	r7, r1
   15cb0:	blt	15cec <__assert_fail@plt+0x496c>
   15cb4:	mul	r6, r7, r0
   15cb8:	mov	r0, r5
   15cbc:	mov	r1, r6
   15cc0:	bl	15efc <__assert_fail@plt+0x4b7c>
   15cc4:	cmp	r6, #0
   15cc8:	movwne	r6, #1
   15ccc:	cmp	r0, #0
   15cd0:	bne	15ce4 <__assert_fail@plt+0x4964>
   15cd4:	clz	r1, r5
   15cd8:	lsr	r1, r1, #5
   15cdc:	orrs	r1, r1, r6
   15ce0:	bne	15cec <__assert_fail@plt+0x496c>
   15ce4:	str	r7, [r8]
   15ce8:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   15cec:	bl	15e34 <__assert_fail@plt+0x4ab4>
   15cf0:	push	{fp, lr}
   15cf4:	mov	fp, sp
   15cf8:	mov	r1, #1
   15cfc:	bl	15e78 <__assert_fail@plt+0x4af8>
   15d00:	cmp	r0, #0
   15d04:	popne	{fp, pc}
   15d08:	bl	15e34 <__assert_fail@plt+0x4ab4>
   15d0c:	push	{fp, lr}
   15d10:	mov	fp, sp
   15d14:	bl	15e78 <__assert_fail@plt+0x4af8>
   15d18:	cmp	r0, #0
   15d1c:	popne	{fp, pc}
   15d20:	bl	15e34 <__assert_fail@plt+0x4ab4>
   15d24:	push	{fp, lr}
   15d28:	mov	fp, sp
   15d2c:	mov	r1, #1
   15d30:	bl	15e78 <__assert_fail@plt+0x4af8>
   15d34:	cmp	r0, #0
   15d38:	popne	{fp, pc}
   15d3c:	bl	15e34 <__assert_fail@plt+0x4ab4>
   15d40:	push	{fp, lr}
   15d44:	mov	fp, sp
   15d48:	bl	15e78 <__assert_fail@plt+0x4af8>
   15d4c:	cmp	r0, #0
   15d50:	popne	{fp, pc}
   15d54:	bl	15e34 <__assert_fail@plt+0x4ab4>
   15d58:	push	{r4, r5, fp, lr}
   15d5c:	add	fp, sp, #8
   15d60:	mov	r5, r0
   15d64:	mov	r0, r1
   15d68:	mov	r4, r1
   15d6c:	bl	15ecc <__assert_fail@plt+0x4b4c>
   15d70:	cmp	r0, #0
   15d74:	beq	15d88 <__assert_fail@plt+0x4a08>
   15d78:	mov	r1, r5
   15d7c:	mov	r2, r4
   15d80:	pop	{r4, r5, fp, lr}
   15d84:	b	11104 <memcpy@plt>
   15d88:	bl	15e34 <__assert_fail@plt+0x4ab4>
   15d8c:	push	{r4, r5, fp, lr}
   15d90:	add	fp, sp, #8
   15d94:	mov	r5, r0
   15d98:	mov	r0, r1
   15d9c:	mov	r4, r1
   15da0:	bl	15ecc <__assert_fail@plt+0x4b4c>
   15da4:	cmp	r0, #0
   15da8:	beq	15dbc <__assert_fail@plt+0x4a3c>
   15dac:	mov	r1, r5
   15db0:	mov	r2, r4
   15db4:	pop	{r4, r5, fp, lr}
   15db8:	b	11104 <memcpy@plt>
   15dbc:	bl	15e34 <__assert_fail@plt+0x4ab4>
   15dc0:	push	{r4, r5, fp, lr}
   15dc4:	add	fp, sp, #8
   15dc8:	mov	r5, r0
   15dcc:	add	r0, r1, #1
   15dd0:	mov	r4, r1
   15dd4:	bl	15ecc <__assert_fail@plt+0x4b4c>
   15dd8:	cmp	r0, #0
   15ddc:	beq	15df8 <__assert_fail@plt+0x4a78>
   15de0:	mov	r1, #0
   15de4:	mov	r2, r4
   15de8:	strb	r1, [r0, r4]
   15dec:	mov	r1, r5
   15df0:	pop	{r4, r5, fp, lr}
   15df4:	b	11104 <memcpy@plt>
   15df8:	bl	15e34 <__assert_fail@plt+0x4ab4>
   15dfc:	push	{r4, r5, fp, lr}
   15e00:	add	fp, sp, #8
   15e04:	mov	r4, r0
   15e08:	bl	1126c <strlen@plt>
   15e0c:	add	r5, r0, #1
   15e10:	mov	r0, r5
   15e14:	bl	15ecc <__assert_fail@plt+0x4b4c>
   15e18:	cmp	r0, #0
   15e1c:	beq	15e30 <__assert_fail@plt+0x4ab0>
   15e20:	mov	r1, r4
   15e24:	mov	r2, r5
   15e28:	pop	{r4, r5, fp, lr}
   15e2c:	b	11104 <memcpy@plt>
   15e30:	bl	15e34 <__assert_fail@plt+0x4ab4>
   15e34:	push	{fp, lr}
   15e38:	mov	fp, sp
   15e3c:	movw	r0, #33060	; 0x8124
   15e40:	movw	r1, #29356	; 0x72ac
   15e44:	mov	r2, #5
   15e48:	movt	r0, #2
   15e4c:	movt	r1, #1
   15e50:	ldr	r4, [r0]
   15e54:	mov	r0, #0
   15e58:	bl	11134 <dcgettext@plt>
   15e5c:	movw	r2, #28311	; 0x6e97
   15e60:	mov	r3, r0
   15e64:	mov	r0, r4
   15e68:	mov	r1, #0
   15e6c:	movt	r2, #1
   15e70:	bl	111b8 <error@plt>
   15e74:	bl	11368 <abort@plt>
   15e78:	clz	r2, r1
   15e7c:	clz	r3, r0
   15e80:	lsr	r2, r2, #5
   15e84:	lsr	r3, r3, #5
   15e88:	orrs	r2, r3, r2
   15e8c:	movwne	r1, #1
   15e90:	movwne	r0, #1
   15e94:	cmp	r1, #0
   15e98:	beq	15ec8 <__assert_fail@plt+0x4b48>
   15e9c:	mvn	r2, #-2147483648	; 0x80000000
   15ea0:	udiv	r2, r2, r1
   15ea4:	cmp	r2, r0
   15ea8:	bcs	15ec8 <__assert_fail@plt+0x4b48>
   15eac:	push	{fp, lr}
   15eb0:	mov	fp, sp
   15eb4:	bl	11284 <__errno_location@plt>
   15eb8:	mov	r1, #12
   15ebc:	str	r1, [r0]
   15ec0:	mov	r0, #0
   15ec4:	pop	{fp, pc}
   15ec8:	b	11098 <calloc@plt>
   15ecc:	cmp	r0, #0
   15ed0:	movweq	r0, #1
   15ed4:	cmn	r0, #1
   15ed8:	ble	15ee0 <__assert_fail@plt+0x4b60>
   15edc:	b	111dc <malloc@plt>
   15ee0:	push	{fp, lr}
   15ee4:	mov	fp, sp
   15ee8:	bl	11284 <__errno_location@plt>
   15eec:	mov	r1, #12
   15ef0:	str	r1, [r0]
   15ef4:	mov	r0, #0
   15ef8:	pop	{fp, pc}
   15efc:	push	{fp, lr}
   15f00:	mov	fp, sp
   15f04:	cmp	r0, #0
   15f08:	beq	15f24 <__assert_fail@plt+0x4ba4>
   15f0c:	cmp	r1, #0
   15f10:	beq	15f30 <__assert_fail@plt+0x4bb0>
   15f14:	cmn	r1, #1
   15f18:	ble	15f3c <__assert_fail@plt+0x4bbc>
   15f1c:	pop	{fp, lr}
   15f20:	b	11158 <realloc@plt>
   15f24:	mov	r0, r1
   15f28:	pop	{fp, lr}
   15f2c:	b	15ecc <__assert_fail@plt+0x4b4c>
   15f30:	bl	13110 <__assert_fail@plt+0x1d90>
   15f34:	mov	r0, #0
   15f38:	pop	{fp, pc}
   15f3c:	bl	11284 <__errno_location@plt>
   15f40:	mov	r1, #12
   15f44:	str	r1, [r0]
   15f48:	mov	r0, #0
   15f4c:	pop	{fp, pc}
   15f50:	push	{r4, r5, r6, sl, fp, lr}
   15f54:	add	fp, sp, #16
   15f58:	mov	r4, r0
   15f5c:	bl	111a0 <__fpending@plt>
   15f60:	ldr	r6, [r4]
   15f64:	mov	r5, r0
   15f68:	mov	r0, r4
   15f6c:	bl	15fd4 <__assert_fail@plt+0x4c54>
   15f70:	tst	r6, #32
   15f74:	bne	15fac <__assert_fail@plt+0x4c2c>
   15f78:	cmp	r0, #0
   15f7c:	mov	r4, r0
   15f80:	mvnne	r4, #0
   15f84:	cmp	r5, #0
   15f88:	bne	15fb8 <__assert_fail@plt+0x4c38>
   15f8c:	cmp	r0, #0
   15f90:	beq	15fb8 <__assert_fail@plt+0x4c38>
   15f94:	bl	11284 <__errno_location@plt>
   15f98:	ldr	r0, [r0]
   15f9c:	subs	r4, r0, #9
   15fa0:	mvnne	r4, #0
   15fa4:	mov	r0, r4
   15fa8:	pop	{r4, r5, r6, sl, fp, pc}
   15fac:	mvn	r4, #0
   15fb0:	cmp	r0, #0
   15fb4:	beq	15fc0 <__assert_fail@plt+0x4c40>
   15fb8:	mov	r0, r4
   15fbc:	pop	{r4, r5, r6, sl, fp, pc}
   15fc0:	bl	11284 <__errno_location@plt>
   15fc4:	mov	r1, #0
   15fc8:	str	r1, [r0]
   15fcc:	mov	r0, r4
   15fd0:	pop	{r4, r5, r6, sl, fp, pc}
   15fd4:	push	{r4, r5, r6, sl, fp, lr}
   15fd8:	add	fp, sp, #16
   15fdc:	sub	sp, sp, #8
   15fe0:	mov	r4, r0
   15fe4:	bl	112cc <fileno@plt>
   15fe8:	cmn	r0, #1
   15fec:	ble	16060 <__assert_fail@plt+0x4ce0>
   15ff0:	mov	r0, r4
   15ff4:	bl	11200 <__freading@plt>
   15ff8:	cmp	r0, #0
   15ffc:	beq	16028 <__assert_fail@plt+0x4ca8>
   16000:	mov	r0, r4
   16004:	bl	112cc <fileno@plt>
   16008:	mov	r1, #1
   1600c:	mov	r2, #0
   16010:	mov	r3, #0
   16014:	str	r1, [sp]
   16018:	bl	11188 <lseek64@plt>
   1601c:	and	r0, r0, r1
   16020:	cmn	r0, #1
   16024:	beq	16060 <__assert_fail@plt+0x4ce0>
   16028:	mov	r0, r4
   1602c:	bl	16070 <__assert_fail@plt+0x4cf0>
   16030:	cmp	r0, #0
   16034:	beq	16060 <__assert_fail@plt+0x4ce0>
   16038:	bl	11284 <__errno_location@plt>
   1603c:	ldr	r6, [r0]
   16040:	mov	r5, r0
   16044:	mov	r0, r4
   16048:	bl	112e4 <fclose@plt>
   1604c:	cmp	r6, #0
   16050:	strne	r6, [r5]
   16054:	mvnne	r0, #0
   16058:	sub	sp, fp, #16
   1605c:	pop	{r4, r5, r6, sl, fp, pc}
   16060:	mov	r0, r4
   16064:	sub	sp, fp, #16
   16068:	pop	{r4, r5, r6, sl, fp, lr}
   1606c:	b	112e4 <fclose@plt>
   16070:	push	{r4, sl, fp, lr}
   16074:	add	fp, sp, #8
   16078:	sub	sp, sp, #8
   1607c:	mov	r4, r0
   16080:	cmp	r0, #0
   16084:	beq	160bc <__assert_fail@plt+0x4d3c>
   16088:	mov	r0, r4
   1608c:	bl	11200 <__freading@plt>
   16090:	cmp	r0, #0
   16094:	beq	160bc <__assert_fail@plt+0x4d3c>
   16098:	ldrb	r0, [r4, #1]
   1609c:	tst	r0, #1
   160a0:	beq	160bc <__assert_fail@plt+0x4d3c>
   160a4:	mov	r0, #1
   160a8:	mov	r2, #0
   160ac:	mov	r3, #0
   160b0:	str	r0, [sp]
   160b4:	mov	r0, r4
   160b8:	bl	160cc <__assert_fail@plt+0x4d4c>
   160bc:	mov	r0, r4
   160c0:	sub	sp, fp, #8
   160c4:	pop	{r4, sl, fp, lr}
   160c8:	b	110c8 <fflush@plt>
   160cc:	push	{r4, r5, r6, r7, fp, lr}
   160d0:	add	fp, sp, #16
   160d4:	sub	sp, sp, #8
   160d8:	mov	r4, r0
   160dc:	ldr	r0, [r0, #4]
   160e0:	mov	r5, r3
   160e4:	mov	r6, r2
   160e8:	ldr	r1, [r4, #8]
   160ec:	cmp	r1, r0
   160f0:	bne	1610c <__assert_fail@plt+0x4d8c>
   160f4:	ldrd	r0, [r4, #16]
   160f8:	cmp	r1, r0
   160fc:	bne	1610c <__assert_fail@plt+0x4d8c>
   16100:	ldr	r0, [r4, #36]	; 0x24
   16104:	cmp	r0, #0
   16108:	beq	16124 <__assert_fail@plt+0x4da4>
   1610c:	mov	r0, r4
   16110:	mov	r2, r6
   16114:	mov	r3, r5
   16118:	sub	sp, fp, #16
   1611c:	pop	{r4, r5, r6, r7, fp, lr}
   16120:	b	112f0 <fseeko64@plt>
   16124:	ldr	r7, [fp, #8]
   16128:	mov	r0, r4
   1612c:	bl	112cc <fileno@plt>
   16130:	mov	r2, r6
   16134:	mov	r3, r5
   16138:	str	r7, [sp]
   1613c:	bl	11188 <lseek64@plt>
   16140:	and	r2, r0, r1
   16144:	cmn	r2, #1
   16148:	beq	16168 <__assert_fail@plt+0x4de8>
   1614c:	strd	r0, [r4, #80]	; 0x50
   16150:	ldr	r0, [r4]
   16154:	bic	r0, r0, #16
   16158:	str	r0, [r4]
   1615c:	mov	r0, #0
   16160:	sub	sp, fp, #16
   16164:	pop	{r4, r5, r6, r7, fp, pc}
   16168:	mvn	r0, #0
   1616c:	sub	sp, fp, #16
   16170:	pop	{r4, r5, r6, r7, fp, pc}
   16174:	push	{fp, lr}
   16178:	mov	fp, sp
   1617c:	mov	r0, #14
   16180:	bl	11320 <nl_langinfo@plt>
   16184:	movw	r1, #27499	; 0x6b6b
   16188:	cmp	r0, #0
   1618c:	movt	r1, #1
   16190:	movne	r1, r0
   16194:	movw	r0, #29373	; 0x72bd
   16198:	ldrb	r2, [r1]
   1619c:	movt	r0, #1
   161a0:	cmp	r2, #0
   161a4:	movne	r0, r1
   161a8:	pop	{fp, pc}
   161ac:	push	{r4, r5, r6, r7, fp, lr}
   161b0:	add	fp, sp, #16
   161b4:	sub	sp, sp, #8
   161b8:	cmp	r0, #0
   161bc:	add	r5, sp, #4
   161c0:	mov	r7, r2
   161c4:	mov	r4, r1
   161c8:	movne	r5, r0
   161cc:	mov	r0, r5
   161d0:	bl	111ac <mbrtowc@plt>
   161d4:	mov	r6, r0
   161d8:	cmp	r7, #0
   161dc:	beq	16204 <__assert_fail@plt+0x4e84>
   161e0:	cmn	r6, #2
   161e4:	bcc	16204 <__assert_fail@plt+0x4e84>
   161e8:	mov	r0, #0
   161ec:	bl	13138 <__assert_fail@plt+0x1db8>
   161f0:	cmp	r0, #0
   161f4:	bne	16204 <__assert_fail@plt+0x4e84>
   161f8:	ldrb	r0, [r4]
   161fc:	mov	r6, #1
   16200:	str	r0, [r5]
   16204:	mov	r0, r6
   16208:	sub	sp, fp, #16
   1620c:	pop	{r4, r5, r6, r7, fp, pc}
   16210:	cmp	r2, #0
   16214:	beq	16244 <__assert_fail@plt+0x4ec4>
   16218:	mvn	r3, #0
   1621c:	udiv	r3, r3, r2
   16220:	cmp	r3, r1
   16224:	bcs	16244 <__assert_fail@plt+0x4ec4>
   16228:	push	{fp, lr}
   1622c:	mov	fp, sp
   16230:	bl	11284 <__errno_location@plt>
   16234:	mov	r1, #12
   16238:	str	r1, [r0]
   1623c:	mov	r0, #0
   16240:	pop	{fp, pc}
   16244:	mul	r1, r2, r1
   16248:	b	15efc <__assert_fail@plt+0x4b7c>
   1624c:	cmp	r3, #0
   16250:	cmpeq	r2, #0
   16254:	bne	16278 <__assert_fail@plt+0x4ef8>
   16258:	cmp	r1, #0
   1625c:	movlt	r1, #-2147483648	; 0x80000000
   16260:	movlt	r0, #0
   16264:	blt	16274 <__assert_fail@plt+0x4ef4>
   16268:	cmpeq	r0, #0
   1626c:	mvnne	r1, #-2147483648	; 0x80000000
   16270:	mvnne	r0, #0
   16274:	b	16320 <__assert_fail@plt+0x4fa0>
   16278:	sub	sp, sp, #8
   1627c:	push	{sp, lr}
   16280:	cmp	r1, #0
   16284:	blt	162a4 <__assert_fail@plt+0x4f24>
   16288:	cmp	r3, #0
   1628c:	blt	162d8 <__assert_fail@plt+0x4f58>
   16290:	bl	16330 <__assert_fail@plt+0x4fb0>
   16294:	ldr	lr, [sp, #4]
   16298:	add	sp, sp, #8
   1629c:	pop	{r2, r3}
   162a0:	bx	lr
   162a4:	rsbs	r0, r0, #0
   162a8:	sbc	r1, r1, r1, lsl #1
   162ac:	cmp	r3, #0
   162b0:	blt	162fc <__assert_fail@plt+0x4f7c>
   162b4:	bl	16330 <__assert_fail@plt+0x4fb0>
   162b8:	ldr	lr, [sp, #4]
   162bc:	add	sp, sp, #8
   162c0:	pop	{r2, r3}
   162c4:	rsbs	r0, r0, #0
   162c8:	sbc	r1, r1, r1, lsl #1
   162cc:	rsbs	r2, r2, #0
   162d0:	sbc	r3, r3, r3, lsl #1
   162d4:	bx	lr
   162d8:	rsbs	r2, r2, #0
   162dc:	sbc	r3, r3, r3, lsl #1
   162e0:	bl	16330 <__assert_fail@plt+0x4fb0>
   162e4:	ldr	lr, [sp, #4]
   162e8:	add	sp, sp, #8
   162ec:	pop	{r2, r3}
   162f0:	rsbs	r0, r0, #0
   162f4:	sbc	r1, r1, r1, lsl #1
   162f8:	bx	lr
   162fc:	rsbs	r2, r2, #0
   16300:	sbc	r3, r3, r3, lsl #1
   16304:	bl	16330 <__assert_fail@plt+0x4fb0>
   16308:	ldr	lr, [sp, #4]
   1630c:	add	sp, sp, #8
   16310:	pop	{r2, r3}
   16314:	rsbs	r2, r2, #0
   16318:	sbc	r3, r3, r3, lsl #1
   1631c:	bx	lr
   16320:	push	{r1, lr}
   16324:	mov	r0, #8
   16328:	bl	110b0 <raise@plt>
   1632c:	pop	{r1, pc}
   16330:	cmp	r1, r3
   16334:	cmpeq	r0, r2
   16338:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1633c:	mov	r4, r0
   16340:	movcc	r0, #0
   16344:	mov	r5, r1
   16348:	ldr	lr, [sp, #36]	; 0x24
   1634c:	movcc	r1, r0
   16350:	bcc	1644c <__assert_fail@plt+0x50cc>
   16354:	cmp	r3, #0
   16358:	clzeq	ip, r2
   1635c:	clzne	ip, r3
   16360:	addeq	ip, ip, #32
   16364:	cmp	r5, #0
   16368:	clzeq	r1, r4
   1636c:	addeq	r1, r1, #32
   16370:	clzne	r1, r5
   16374:	sub	ip, ip, r1
   16378:	sub	sl, ip, #32
   1637c:	lsl	r9, r3, ip
   16380:	rsb	fp, ip, #32
   16384:	orr	r9, r9, r2, lsl sl
   16388:	orr	r9, r9, r2, lsr fp
   1638c:	lsl	r8, r2, ip
   16390:	cmp	r5, r9
   16394:	cmpeq	r4, r8
   16398:	movcc	r0, #0
   1639c:	movcc	r1, r0
   163a0:	bcc	163bc <__assert_fail@plt+0x503c>
   163a4:	mov	r0, #1
   163a8:	subs	r4, r4, r8
   163ac:	lsl	r1, r0, sl
   163b0:	orr	r1, r1, r0, lsr fp
   163b4:	lsl	r0, r0, ip
   163b8:	sbc	r5, r5, r9
   163bc:	cmp	ip, #0
   163c0:	beq	1644c <__assert_fail@plt+0x50cc>
   163c4:	lsr	r6, r8, #1
   163c8:	orr	r6, r6, r9, lsl #31
   163cc:	lsr	r7, r9, #1
   163d0:	mov	r2, ip
   163d4:	b	163f8 <__assert_fail@plt+0x5078>
   163d8:	subs	r3, r4, r6
   163dc:	sbc	r8, r5, r7
   163e0:	adds	r3, r3, r3
   163e4:	adc	r8, r8, r8
   163e8:	adds	r4, r3, #1
   163ec:	adc	r5, r8, #0
   163f0:	subs	r2, r2, #1
   163f4:	beq	16414 <__assert_fail@plt+0x5094>
   163f8:	cmp	r5, r7
   163fc:	cmpeq	r4, r6
   16400:	bcs	163d8 <__assert_fail@plt+0x5058>
   16404:	adds	r4, r4, r4
   16408:	adc	r5, r5, r5
   1640c:	subs	r2, r2, #1
   16410:	bne	163f8 <__assert_fail@plt+0x5078>
   16414:	lsr	r3, r4, ip
   16418:	orr	r3, r3, r5, lsl fp
   1641c:	lsr	r2, r5, ip
   16420:	orr	r3, r3, r5, lsr sl
   16424:	adds	r0, r0, r4
   16428:	mov	r4, r3
   1642c:	lsl	r3, r2, ip
   16430:	orr	r3, r3, r4, lsl sl
   16434:	lsl	ip, r4, ip
   16438:	orr	r3, r3, r4, lsr fp
   1643c:	adc	r1, r1, r5
   16440:	subs	r0, r0, ip
   16444:	mov	r5, r2
   16448:	sbc	r1, r1, r3
   1644c:	cmp	lr, #0
   16450:	strdne	r4, [lr]
   16454:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   16458:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   1645c:	mov	r7, r0
   16460:	ldr	r6, [pc, #72]	; 164b0 <__assert_fail@plt+0x5130>
   16464:	ldr	r5, [pc, #72]	; 164b4 <__assert_fail@plt+0x5134>
   16468:	add	r6, pc, r6
   1646c:	add	r5, pc, r5
   16470:	sub	r6, r6, r5
   16474:	mov	r8, r1
   16478:	mov	r9, r2
   1647c:	bl	11078 <calloc@plt-0x20>
   16480:	asrs	r6, r6, #2
   16484:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   16488:	mov	r4, #0
   1648c:	add	r4, r4, #1
   16490:	ldr	r3, [r5], #4
   16494:	mov	r2, r9
   16498:	mov	r1, r8
   1649c:	mov	r0, r7
   164a0:	blx	r3
   164a4:	cmp	r6, r4
   164a8:	bne	1648c <__assert_fail@plt+0x510c>
   164ac:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   164b0:	muleq	r1, ip, sl
   164b4:	muleq	r1, r4, sl
   164b8:	bx	lr
   164bc:	ldr	r3, [pc, #12]	; 164d0 <__assert_fail@plt+0x5150>
   164c0:	mov	r1, #0
   164c4:	add	r3, pc, r3
   164c8:	ldr	r2, [r3]
   164cc:	b	1129c <__cxa_atexit@plt>
   164d0:	andeq	r1, r1, r8, asr #24

Disassembly of section .fini:

000164d4 <.fini>:
   164d4:	push	{r3, lr}
   164d8:	pop	{r3, pc}
