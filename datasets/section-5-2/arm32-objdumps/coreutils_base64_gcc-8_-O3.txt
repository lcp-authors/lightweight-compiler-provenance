
../repos/coreutils/src/base64:     file format elf32-littlearm


Disassembly of section .init:

00010c7c <.init>:
   10c7c:	push	{r3, lr}
   10c80:	bl	11634 <__assert_fail@plt+0x734>
   10c84:	pop	{r3, pc}

Disassembly of section .plt:

00010c88 <calloc@plt-0x14>:
   10c88:	push	{lr}		; (str lr, [sp, #-4]!)
   10c8c:	ldr	lr, [pc, #4]	; 10c98 <calloc@plt-0x4>
   10c90:	add	lr, pc, lr
   10c94:	ldr	pc, [lr, #8]!
   10c98:	andeq	r9, r1, r8, ror #6

00010c9c <calloc@plt>:
   10c9c:	add	ip, pc, #0, 12
   10ca0:	add	ip, ip, #102400	; 0x19000
   10ca4:	ldr	pc, [ip, #872]!	; 0x368

00010ca8 <fputs_unlocked@plt>:
   10ca8:	add	ip, pc, #0, 12
   10cac:	add	ip, ip, #102400	; 0x19000
   10cb0:	ldr	pc, [ip, #864]!	; 0x360

00010cb4 <strcmp@plt>:
   10cb4:	add	ip, pc, #0, 12
   10cb8:	add	ip, ip, #102400	; 0x19000
   10cbc:	ldr	pc, [ip, #856]!	; 0x358

00010cc0 <posix_fadvise64@plt>:
   10cc0:	add	ip, pc, #0, 12
   10cc4:	add	ip, ip, #102400	; 0x19000
   10cc8:	ldr	pc, [ip, #848]!	; 0x350

00010ccc <fflush@plt>:
   10ccc:	add	ip, pc, #0, 12
   10cd0:	add	ip, ip, #102400	; 0x19000
   10cd4:	ldr	pc, [ip, #840]!	; 0x348

00010cd8 <memmove@plt>:
   10cd8:	add	ip, pc, #0, 12
   10cdc:	add	ip, ip, #102400	; 0x19000
   10ce0:	ldr	pc, [ip, #832]!	; 0x340

00010ce4 <free@plt>:
   10ce4:	add	ip, pc, #0, 12
   10ce8:	add	ip, ip, #102400	; 0x19000
   10cec:	ldr	pc, [ip, #824]!	; 0x338

00010cf0 <_exit@plt>:
   10cf0:	add	ip, pc, #0, 12
   10cf4:	add	ip, ip, #102400	; 0x19000
   10cf8:	ldr	pc, [ip, #816]!	; 0x330

00010cfc <memcpy@plt>:
   10cfc:	add	ip, pc, #0, 12
   10d00:	add	ip, ip, #102400	; 0x19000
   10d04:	ldr	pc, [ip, #808]!	; 0x328

00010d08 <mbsinit@plt>:
   10d08:	add	ip, pc, #0, 12
   10d0c:	add	ip, ip, #102400	; 0x19000
   10d10:	ldr	pc, [ip, #800]!	; 0x320

00010d14 <fwrite_unlocked@plt>:
   10d14:	add	ip, pc, #0, 12
   10d18:	add	ip, ip, #102400	; 0x19000
   10d1c:	ldr	pc, [ip, #792]!	; 0x318

00010d20 <memcmp@plt>:
   10d20:	add	ip, pc, #0, 12
   10d24:	add	ip, ip, #102400	; 0x19000
   10d28:	ldr	pc, [ip, #784]!	; 0x310

00010d2c <fputc_unlocked@plt>:
   10d2c:	add	ip, pc, #0, 12
   10d30:	add	ip, ip, #102400	; 0x19000
   10d34:	ldr	pc, [ip, #776]!	; 0x308

00010d38 <dcgettext@plt>:
   10d38:	add	ip, pc, #0, 12
   10d3c:	add	ip, ip, #102400	; 0x19000
   10d40:	ldr	pc, [ip, #768]!	; 0x300

00010d44 <realloc@plt>:
   10d44:	add	ip, pc, #0, 12
   10d48:	add	ip, ip, #102400	; 0x19000
   10d4c:	ldr	pc, [ip, #760]!	; 0x2f8

00010d50 <textdomain@plt>:
   10d50:	add	ip, pc, #0, 12
   10d54:	add	ip, ip, #102400	; 0x19000
   10d58:	ldr	pc, [ip, #752]!	; 0x2f0

00010d5c <iswprint@plt>:
   10d5c:	add	ip, pc, #0, 12
   10d60:	add	ip, ip, #102400	; 0x19000
   10d64:	ldr	pc, [ip, #744]!	; 0x2e8

00010d68 <fwrite@plt>:
   10d68:	add	ip, pc, #0, 12
   10d6c:	add	ip, ip, #102400	; 0x19000
   10d70:	ldr	pc, [ip, #736]!	; 0x2e0

00010d74 <lseek64@plt>:
   10d74:	add	ip, pc, #0, 12
   10d78:	add	ip, ip, #102400	; 0x19000
   10d7c:	ldr	pc, [ip, #728]!	; 0x2d8

00010d80 <__ctype_get_mb_cur_max@plt>:
   10d80:	add	ip, pc, #0, 12
   10d84:	add	ip, ip, #102400	; 0x19000
   10d88:	ldr	pc, [ip, #720]!	; 0x2d0

00010d8c <__fpending@plt>:
   10d8c:	add	ip, pc, #0, 12
   10d90:	add	ip, ip, #102400	; 0x19000
   10d94:	ldr	pc, [ip, #712]!	; 0x2c8

00010d98 <mbrtowc@plt>:
   10d98:	add	ip, pc, #0, 12
   10d9c:	add	ip, ip, #102400	; 0x19000
   10da0:	ldr	pc, [ip, #704]!	; 0x2c0

00010da4 <error@plt>:
   10da4:	add	ip, pc, #0, 12
   10da8:	add	ip, ip, #102400	; 0x19000
   10dac:	ldr	pc, [ip, #696]!	; 0x2b8

00010db0 <malloc@plt>:
   10db0:	add	ip, pc, #0, 12
   10db4:	add	ip, ip, #102400	; 0x19000
   10db8:	ldr	pc, [ip, #688]!	; 0x2b0

00010dbc <__libc_start_main@plt>:
   10dbc:	add	ip, pc, #0, 12
   10dc0:	add	ip, ip, #102400	; 0x19000
   10dc4:	ldr	pc, [ip, #680]!	; 0x2a8

00010dc8 <__freading@plt>:
   10dc8:	add	ip, pc, #0, 12
   10dcc:	add	ip, ip, #102400	; 0x19000
   10dd0:	ldr	pc, [ip, #672]!	; 0x2a0

00010dd4 <__gmon_start__@plt>:
   10dd4:	add	ip, pc, #0, 12
   10dd8:	add	ip, ip, #102400	; 0x19000
   10ddc:	ldr	pc, [ip, #664]!	; 0x298

00010de0 <getopt_long@plt>:
   10de0:	add	ip, pc, #0, 12
   10de4:	add	ip, ip, #102400	; 0x19000
   10de8:	ldr	pc, [ip, #656]!	; 0x290

00010dec <__ctype_b_loc@plt>:
   10dec:	add	ip, pc, #0, 12
   10df0:	add	ip, ip, #102400	; 0x19000
   10df4:	ldr	pc, [ip, #648]!	; 0x288

00010df8 <exit@plt>:
   10df8:	add	ip, pc, #0, 12
   10dfc:	add	ip, ip, #102400	; 0x19000
   10e00:	ldr	pc, [ip, #640]!	; 0x280

00010e04 <strlen@plt>:
   10e04:	add	ip, pc, #0, 12
   10e08:	add	ip, ip, #102400	; 0x19000
   10e0c:	ldr	pc, [ip, #632]!	; 0x278

00010e10 <strchr@plt>:
   10e10:	add	ip, pc, #0, 12
   10e14:	add	ip, ip, #102400	; 0x19000
   10e18:	ldr	pc, [ip, #624]!	; 0x270

00010e1c <__errno_location@plt>:
   10e1c:	add	ip, pc, #0, 12
   10e20:	add	ip, ip, #102400	; 0x19000
   10e24:	ldr	pc, [ip, #616]!	; 0x268

00010e28 <__cxa_atexit@plt>:
   10e28:	add	ip, pc, #0, 12
   10e2c:	add	ip, ip, #102400	; 0x19000
   10e30:	ldr	pc, [ip, #608]!	; 0x260

00010e34 <memset@plt>:
   10e34:	add	ip, pc, #0, 12
   10e38:	add	ip, ip, #102400	; 0x19000
   10e3c:	ldr	pc, [ip, #600]!	; 0x258

00010e40 <__printf_chk@plt>:
   10e40:	add	ip, pc, #0, 12
   10e44:	add	ip, ip, #102400	; 0x19000
   10e48:	ldr	pc, [ip, #592]!	; 0x250

00010e4c <fileno@plt>:
   10e4c:	add	ip, pc, #0, 12
   10e50:	add	ip, ip, #102400	; 0x19000
   10e54:	ldr	pc, [ip, #584]!	; 0x248

00010e58 <__fprintf_chk@plt>:
   10e58:	add	ip, pc, #0, 12
   10e5c:	add	ip, ip, #102400	; 0x19000
   10e60:	ldr	pc, [ip, #576]!	; 0x240

00010e64 <memchr@plt>:
   10e64:	add	ip, pc, #0, 12
   10e68:	add	ip, ip, #102400	; 0x19000
   10e6c:	ldr	pc, [ip, #568]!	; 0x238

00010e70 <fclose@plt>:
   10e70:	add	ip, pc, #0, 12
   10e74:	add	ip, ip, #102400	; 0x19000
   10e78:	ldr	pc, [ip, #560]!	; 0x230

00010e7c <fseeko64@plt>:
   10e7c:	add	ip, pc, #0, 12
   10e80:	add	ip, ip, #102400	; 0x19000
   10e84:	ldr	pc, [ip, #552]!	; 0x228

00010e88 <__overflow@plt>:
   10e88:	add	ip, pc, #0, 12
   10e8c:	add	ip, ip, #102400	; 0x19000
   10e90:	ldr	pc, [ip, #544]!	; 0x220

00010e94 <setlocale@plt>:
   10e94:	add	ip, pc, #0, 12
   10e98:	add	ip, ip, #102400	; 0x19000
   10e9c:	ldr	pc, [ip, #536]!	; 0x218

00010ea0 <strrchr@plt>:
   10ea0:	add	ip, pc, #0, 12
   10ea4:	add	ip, ip, #102400	; 0x19000
   10ea8:	ldr	pc, [ip, #528]!	; 0x210

00010eac <nl_langinfo@plt>:
   10eac:	add	ip, pc, #0, 12
   10eb0:	add	ip, ip, #102400	; 0x19000
   10eb4:	ldr	pc, [ip, #520]!	; 0x208

00010eb8 <__strtoll_internal@plt>:
   10eb8:	add	ip, pc, #0, 12
   10ebc:	add	ip, ip, #102400	; 0x19000
   10ec0:	ldr	pc, [ip, #512]!	; 0x200

00010ec4 <fopen64@plt>:
   10ec4:	add	ip, pc, #0, 12
   10ec8:	add	ip, ip, #102400	; 0x19000
   10ecc:	ldr	pc, [ip, #504]!	; 0x1f8

00010ed0 <bindtextdomain@plt>:
   10ed0:	add	ip, pc, #0, 12
   10ed4:	add	ip, ip, #102400	; 0x19000
   10ed8:	ldr	pc, [ip, #496]!	; 0x1f0

00010edc <fread_unlocked@plt>:
   10edc:	add	ip, pc, #0, 12
   10ee0:	add	ip, ip, #102400	; 0x19000
   10ee4:	ldr	pc, [ip, #488]!	; 0x1e8

00010ee8 <strncmp@plt>:
   10ee8:	add	ip, pc, #0, 12
   10eec:	add	ip, ip, #102400	; 0x19000
   10ef0:	ldr	pc, [ip, #480]!	; 0x1e0

00010ef4 <abort@plt>:
   10ef4:	add	ip, pc, #0, 12
   10ef8:	add	ip, ip, #102400	; 0x19000
   10efc:	ldr	pc, [ip, #472]!	; 0x1d8

00010f00 <__assert_fail@plt>:
   10f00:	add	ip, pc, #0, 12
   10f04:	add	ip, ip, #102400	; 0x19000
   10f08:	ldr	pc, [ip, #464]!	; 0x1d0

Disassembly of section .text:

00010f0c <.text>:
   10f0c:	strd	r4, [sp, #-36]!	; 0xffffffdc
   10f10:	strd	r6, [sp, #8]
   10f14:	mov	r7, #0
   10f18:	movw	r6, #34932	; 0x8874
   10f1c:	movt	r6, #1
   10f20:	strd	r8, [sp, #16]
   10f24:	mov	r8, r1
   10f28:	strd	sl, [sp, #24]
   10f2c:	mov	sl, r0
   10f30:	movw	r9, #41296	; 0xa150
   10f34:	movt	r9, #2
   10f38:	str	lr, [sp, #32]
   10f3c:	sub	sp, sp, #60	; 0x3c
   10f40:	ldr	r0, [r1]
   10f44:	mov	r4, r7
   10f48:	bl	12640 <__assert_fail@plt+0x1740>
   10f4c:	movw	r1, #34300	; 0x85fc
   10f50:	movt	r1, #1
   10f54:	ldr	fp, [pc, #1688]	; 115f4 <__assert_fail@plt+0x6f4>
   10f58:	mov	r0, #6
   10f5c:	bl	10e94 <setlocale@plt>
   10f60:	movw	r1, #34864	; 0x8830
   10f64:	movt	r1, #1
   10f68:	movw	r0, #34696	; 0x8788
   10f6c:	movt	r0, #1
   10f70:	bl	10ed0 <bindtextdomain@plt>
   10f74:	movw	r0, #34696	; 0x8788
   10f78:	movt	r0, #1
   10f7c:	bl	10d50 <textdomain@plt>
   10f80:	movw	r0, #8892	; 0x22bc
   10f84:	movt	r0, #1
   10f88:	bl	182e8 <__assert_fail@plt+0x73e8>
   10f8c:	mov	r3, #76	; 0x4c
   10f90:	str	r3, [sp, #12]
   10f94:	mov	r5, #0
   10f98:	mov	r3, fp
   10f9c:	mov	r2, r6
   10fa0:	mov	r1, r8
   10fa4:	mov	r0, sl
   10fa8:	str	r5, [sp]
   10fac:	bl	10de0 <getopt_long@plt>
   10fb0:	cmn	r0, #1
   10fb4:	beq	11124 <__assert_fail@plt+0x224>
   10fb8:	cmp	r0, #100	; 0x64
   10fbc:	beq	110e0 <__assert_fail@plt+0x1e0>
   10fc0:	bgt	10fdc <__assert_fail@plt+0xdc>
   10fc4:	cmn	r0, #3
   10fc8:	beq	110a0 <__assert_fail@plt+0x1a0>
   10fcc:	cmn	r0, #2
   10fd0:	bne	11098 <__assert_fail@plt+0x198>
   10fd4:	mov	r0, r5
   10fd8:	bl	11774 <__assert_fail@plt+0x874>
   10fdc:	cmp	r0, #105	; 0x69
   10fe0:	beq	11054 <__assert_fail@plt+0x154>
   10fe4:	cmp	r0, #119	; 0x77
   10fe8:	bne	11098 <__assert_fail@plt+0x198>
   10fec:	movw	r2, #34300	; 0x85fc
   10ff0:	movt	r2, #1
   10ff4:	ldr	r0, [r9]
   10ff8:	mov	r1, r5
   10ffc:	add	r3, sp, #48	; 0x30
   11000:	str	r2, [sp]
   11004:	mov	r2, #10
   11008:	bl	16e80 <__assert_fail@plt+0x5f80>
   1100c:	cmp	r0, #1
   11010:	mov	ip, r0
   11014:	bhi	110e8 <__assert_fail@plt+0x1e8>
   11018:	ldrd	r2, [sp, #48]	; 0x30
   1101c:	cmp	r2, #0
   11020:	sbcs	r1, r3, #0
   11024:	blt	110e8 <__assert_fail@plt+0x1e8>
   11028:	mvn	r0, #-2147483648	; 0x80000000
   1102c:	mov	r1, #0
   11030:	cmp	r0, r2
   11034:	eor	ip, ip, #1
   11038:	sbcs	r1, r1, r3
   1103c:	movlt	ip, #0
   11040:	andge	ip, ip, #1
   11044:	cmp	ip, #0
   11048:	moveq	r2, #0
   1104c:	str	r2, [sp, #12]
   11050:	b	10f94 <__assert_fail@plt+0x94>
   11054:	mov	r7, #1
   11058:	b	10f94 <__assert_fail@plt+0x94>
   1105c:	mov	r2, #5
   11060:	movw	r1, #34940	; 0x887c
   11064:	movt	r1, #1
   11068:	mov	r0, r5
   1106c:	bl	10d38 <dcgettext@plt>
   11070:	ldr	r3, [r6]
   11074:	mov	r4, r0
   11078:	add	r3, r3, #1
   1107c:	ldr	r0, [r8, r3, lsl #2]
   11080:	bl	15fb0 <__assert_fail@plt+0x50b0>
   11084:	mov	r3, r0
   11088:	mov	r2, r4
   1108c:	mov	r1, r5
   11090:	mov	r0, r5
   11094:	bl	10da4 <error@plt>
   11098:	mov	r0, #1
   1109c:	bl	11774 <__assert_fail@plt+0x874>
   110a0:	movw	r2, #34916	; 0x8864
   110a4:	movt	r2, #1
   110a8:	movw	r3, #41192	; 0xa0e8
   110ac:	movt	r3, #2
   110b0:	movw	r0, #41292	; 0xa14c
   110b4:	movt	r0, #2
   110b8:	stm	sp, {r2, r5}
   110bc:	movw	r1, #33728	; 0x83c0
   110c0:	movt	r1, #1
   110c4:	ldr	r0, [r0]
   110c8:	movw	r2, #34692	; 0x8784
   110cc:	movt	r2, #1
   110d0:	ldr	r3, [r3]
   110d4:	bl	16674 <__assert_fail@plt+0x5774>
   110d8:	mov	r0, r5
   110dc:	bl	10df8 <exit@plt>
   110e0:	mov	r4, #1
   110e4:	b	10f94 <__assert_fail@plt+0x94>
   110e8:	mov	r2, #5
   110ec:	movw	r1, #34888	; 0x8848
   110f0:	movt	r1, #1
   110f4:	mov	r0, #0
   110f8:	bl	10d38 <dcgettext@plt>
   110fc:	mov	r4, r0
   11100:	ldr	r0, [r9]
   11104:	bl	15fb0 <__assert_fail@plt+0x50b0>
   11108:	movw	r2, #34908	; 0x885c
   1110c:	movt	r2, #1
   11110:	str	r0, [sp]
   11114:	mov	r3, r4
   11118:	mov	r1, #0
   1111c:	mov	r0, #1
   11120:	bl	10da4 <error@plt>
   11124:	movw	r6, #41272	; 0xa138
   11128:	movt	r6, #2
   1112c:	ldr	r3, [r6]
   11130:	sub	r2, sl, r3
   11134:	cmp	r2, #1
   11138:	bgt	1105c <__assert_fail@plt+0x15c>
   1113c:	cmp	r3, sl
   11140:	bge	11350 <__assert_fail@plt+0x450>
   11144:	ldr	r3, [r8, r3, lsl #2]
   11148:	movw	r1, #33700	; 0x83a4
   1114c:	movt	r1, #1
   11150:	mov	r0, r3
   11154:	str	r3, [sp, #24]
   11158:	bl	10cb4 <strcmp@plt>
   1115c:	cmp	r0, #0
   11160:	beq	1135c <__assert_fail@plt+0x45c>
   11164:	movw	r1, #34960	; 0x8890
   11168:	movt	r1, #1
   1116c:	ldr	r0, [sp, #24]
   11170:	bl	10ec4 <fopen64@plt>
   11174:	subs	r5, r0, #0
   11178:	beq	115c4 <__assert_fail@plt+0x6c4>
   1117c:	mov	r1, #2
   11180:	mov	r0, r5
   11184:	bl	123ac <__assert_fail@plt+0x14ac>
   11188:	cmp	r4, #0
   1118c:	movw	r3, #41292	; 0xa14c
   11190:	movt	r3, #2
   11194:	beq	1136c <__assert_fail@plt+0x46c>
   11198:	ldr	r3, [r3]
   1119c:	mov	r0, #4096	; 0x1000
   111a0:	str	r3, [sp, #16]
   111a4:	bl	16884 <__assert_fail@plt+0x5984>
   111a8:	mov	r9, r0
   111ac:	mov	r0, #3072	; 0xc00
   111b0:	bl	16884 <__assert_fail@plt+0x5984>
   111b4:	str	r0, [sp, #20]
   111b8:	add	r0, sp, #48	; 0x30
   111bc:	bl	11db4 <__assert_fail@plt+0xeb4>
   111c0:	str	r7, [sp, #12]
   111c4:	mov	r6, #0
   111c8:	b	111f0 <__assert_fail@plt+0x2f0>
   111cc:	ldr	r3, [r5]
   111d0:	add	r6, r6, r4
   111d4:	tst	r3, #32
   111d8:	bne	113e0 <__assert_fail@plt+0x4e0>
   111dc:	cmp	r6, #4096	; 0x1000
   111e0:	and	r3, r3, #16
   111e4:	bge	1127c <__assert_fail@plt+0x37c>
   111e8:	cmp	r3, #0
   111ec:	bne	1127c <__assert_fail@plt+0x37c>
   111f0:	mov	r3, r5
   111f4:	rsb	r2, r6, #4096	; 0x1000
   111f8:	mov	r1, #1
   111fc:	add	r0, r9, r6
   11200:	bl	10edc <fread_unlocked@plt>
   11204:	ldr	r3, [sp, #12]
   11208:	mov	r4, r0
   1120c:	cmp	r3, #0
   11210:	beq	111cc <__assert_fail@plt+0x2cc>
   11214:	cmp	r0, #0
   11218:	ble	111cc <__assert_fail@plt+0x2cc>
   1121c:	mov	r7, #0
   11220:	mov	r8, r6
   11224:	ldrb	sl, [r9, r8]
   11228:	add	fp, r9, r8
   1122c:	mov	r0, sl
   11230:	bl	11d98 <__assert_fail@plt+0xe98>
   11234:	cmp	sl, #61	; 0x3d
   11238:	orreq	r0, r0, #1
   1123c:	tst	r0, #255	; 0xff
   11240:	beq	11258 <__assert_fail@plt+0x358>
   11244:	add	r7, r7, #1
   11248:	cmp	r7, r4
   1124c:	bge	111cc <__assert_fail@plt+0x2cc>
   11250:	add	r8, r6, r7
   11254:	b	11224 <__assert_fail@plt+0x324>
   11258:	sub	r4, r4, #1
   1125c:	add	r1, r8, #1
   11260:	mov	r0, fp
   11264:	sub	r2, r4, r7
   11268:	add	r1, r9, r1
   1126c:	bl	10cd8 <memmove@plt>
   11270:	cmp	r7, r4
   11274:	blt	11224 <__assert_fail@plt+0x324>
   11278:	b	111cc <__assert_fail@plt+0x2cc>
   1127c:	mov	r2, r6
   11280:	ldr	r6, [sp, #20]
   11284:	add	r1, sp, #44	; 0x2c
   11288:	mov	r7, #3072	; 0xc00
   1128c:	add	r0, sp, #48	; 0x30
   11290:	str	r1, [sp]
   11294:	mov	r1, r9
   11298:	str	r7, [sp, #44]	; 0x2c
   1129c:	mov	r3, r6
   112a0:	bl	11dc0 <__assert_fail@plt+0xec0>
   112a4:	ldr	r8, [sp, #16]
   112a8:	mov	r4, r0
   112ac:	mov	r1, #1
   112b0:	mov	r0, r6
   112b4:	ldr	r2, [sp, #44]	; 0x2c
   112b8:	mov	r3, r8
   112bc:	bl	10d14 <fwrite_unlocked@plt>
   112c0:	ldr	r3, [sp, #44]	; 0x2c
   112c4:	cmp	r3, r0
   112c8:	bhi	11590 <__assert_fail@plt+0x690>
   112cc:	cmp	r4, #0
   112d0:	beq	115a0 <__assert_fail@plt+0x6a0>
   112d4:	ldr	r3, [r5]
   112d8:	tst	r3, #16
   112dc:	beq	111c4 <__assert_fail@plt+0x2c4>
   112e0:	ldr	r3, [sp, #48]	; 0x30
   112e4:	cmp	r3, #0
   112e8:	beq	11344 <__assert_fail@plt+0x444>
   112ec:	add	r1, sp, #44	; 0x2c
   112f0:	mov	r3, r6
   112f4:	mov	r2, #0
   112f8:	add	r0, sp, #48	; 0x30
   112fc:	str	r1, [sp]
   11300:	mov	r1, r9
   11304:	str	r7, [sp, #44]	; 0x2c
   11308:	bl	11dc0 <__assert_fail@plt+0xec0>
   1130c:	mov	r4, r0
   11310:	mov	r3, r8
   11314:	ldr	r2, [sp, #44]	; 0x2c
   11318:	mov	r1, #1
   1131c:	mov	r0, r6
   11320:	bl	10d14 <fwrite_unlocked@plt>
   11324:	ldr	r3, [sp, #44]	; 0x2c
   11328:	cmp	r3, r0
   1132c:	bhi	11590 <__assert_fail@plt+0x690>
   11330:	cmp	r4, #0
   11334:	beq	115a0 <__assert_fail@plt+0x6a0>
   11338:	ldr	r3, [r5]
   1133c:	tst	r3, #16
   11340:	beq	111c4 <__assert_fail@plt+0x2c4>
   11344:	mov	r0, r5
   11348:	ldr	r1, [sp, #24]
   1134c:	bl	116e8 <__assert_fail@plt+0x7e8>
   11350:	movw	r3, #33700	; 0x83a4
   11354:	movt	r3, #1
   11358:	str	r3, [sp, #24]
   1135c:	movw	r3, #41288	; 0xa148
   11360:	movt	r3, #2
   11364:	ldr	r5, [r3]
   11368:	b	1117c <__assert_fail@plt+0x27c>
   1136c:	mov	r0, #30720	; 0x7800
   11370:	str	r3, [sp, #20]
   11374:	ldr	r9, [r3]
   11378:	bl	16884 <__assert_fail@plt+0x5984>
   1137c:	mov	fp, r0
   11380:	mov	r0, #40960	; 0xa000
   11384:	bl	16884 <__assert_fail@plt+0x5984>
   11388:	str	r0, [sp, #16]
   1138c:	mov	r6, #0
   11390:	b	1139c <__assert_fail@plt+0x49c>
   11394:	cmp	r6, #30720	; 0x7800
   11398:	bge	1140c <__assert_fail@plt+0x50c>
   1139c:	mov	r3, r5
   113a0:	rsb	r2, r6, #30720	; 0x7800
   113a4:	add	r0, fp, r6
   113a8:	mov	r1, #1
   113ac:	bl	10edc <fread_unlocked@plt>
   113b0:	ldr	r3, [r5]
   113b4:	add	r6, r6, r0
   113b8:	tst	r3, #48	; 0x30
   113bc:	beq	11394 <__assert_fail@plt+0x494>
   113c0:	cmp	r6, #0
   113c4:	bgt	1140c <__assert_fail@plt+0x50c>
   113c8:	ldr	r2, [sp, #12]
   113cc:	cmp	r2, #0
   113d0:	cmpne	r4, #0
   113d4:	bgt	11554 <__assert_fail@plt+0x654>
   113d8:	tst	r3, #32
   113dc:	beq	11344 <__assert_fail@plt+0x444>
   113e0:	bl	10e1c <__errno_location@plt>
   113e4:	movw	r1, #34964	; 0x8894
   113e8:	movt	r1, #1
   113ec:	ldr	r4, [r0]
   113f0:	mov	r2, #5
   113f4:	mov	r0, #0
   113f8:	bl	10d38 <dcgettext@plt>
   113fc:	mov	r2, r0
   11400:	mov	r0, #1
   11404:	mov	r1, r4
   11408:	bl	10da4 <error@plt>
   1140c:	mov	r3, #3
   11410:	add	r8, r6, #2
   11414:	ldr	r7, [sp, #16]
   11418:	mov	r1, r6
   1141c:	mov	r0, fp
   11420:	udiv	r8, r8, r3
   11424:	mov	r2, r7
   11428:	lsl	r8, r8, #2
   1142c:	mov	r3, r8
   11430:	bl	11b14 <__assert_fail@plt+0xc14>
   11434:	ldr	r3, [sp, #12]
   11438:	cmp	r3, #0
   1143c:	bne	11478 <__assert_fail@plt+0x578>
   11440:	ldr	r3, [sp, #20]
   11444:	mov	r2, r8
   11448:	mov	r1, #1
   1144c:	mov	r0, r7
   11450:	ldr	r3, [r3]
   11454:	bl	10d14 <fwrite_unlocked@plt>
   11458:	cmp	r8, r0
   1145c:	bhi	11590 <__assert_fail@plt+0x690>
   11460:	ldr	r3, [r5]
   11464:	and	r2, r3, #48	; 0x30
   11468:	cmp	r6, #30720	; 0x7800
   1146c:	cmpeq	r2, #0
   11470:	beq	1138c <__assert_fail@plt+0x48c>
   11474:	b	113c8 <__assert_fail@plt+0x4c8>
   11478:	str	r5, [sp, #28]
   1147c:	add	r5, sp, #12
   11480:	mov	sl, r4
   11484:	mov	r7, #0
   11488:	str	fp, [sp, #32]
   1148c:	str	r6, [sp, #36]	; 0x24
   11490:	ldm	r5, {r5, r6, fp}
   11494:	b	114c4 <__assert_fail@plt+0x5c4>
   11498:	ldr	r3, [r9, #20]
   1149c:	ldr	r2, [r9, #24]
   114a0:	cmp	r3, r2
   114a4:	addcc	r2, r3, #1
   114a8:	strcc	r2, [r9, #20]
   114ac:	movcc	r2, #10
   114b0:	strbcc	r2, [r3]
   114b4:	bcs	11504 <__assert_fail@plt+0x604>
   114b8:	cmp	r7, r8
   114bc:	bge	11544 <__assert_fail@plt+0x644>
   114c0:	mov	sl, r4
   114c4:	sub	r4, r5, r4
   114c8:	sub	r3, r8, r7
   114cc:	cmp	r3, r4
   114d0:	movlt	r4, r3
   114d4:	cmp	r4, #0
   114d8:	beq	11498 <__assert_fail@plt+0x598>
   114dc:	mov	r2, r4
   114e0:	mov	r1, #1
   114e4:	ldr	r3, [fp]
   114e8:	add	r0, r6, r7
   114ec:	bl	10d14 <fwrite_unlocked@plt>
   114f0:	cmp	r4, r0
   114f4:	bhi	11590 <__assert_fail@plt+0x690>
   114f8:	add	r7, r7, r4
   114fc:	add	r4, r4, sl
   11500:	b	114b8 <__assert_fail@plt+0x5b8>
   11504:	mov	r1, #10
   11508:	mov	r0, r9
   1150c:	bl	10e88 <__overflow@plt>
   11510:	cmn	r0, #1
   11514:	bne	114b8 <__assert_fail@plt+0x5b8>
   11518:	bl	10e1c <__errno_location@plt>
   1151c:	ldr	r5, [r0]
   11520:	mov	r2, #5
   11524:	movw	r1, #34976	; 0x88a0
   11528:	movt	r1, #1
   1152c:	mov	r0, r4
   11530:	bl	10d38 <dcgettext@plt>
   11534:	mov	r2, r0
   11538:	mov	r0, #1
   1153c:	mov	r1, r5
   11540:	bl	10da4 <error@plt>
   11544:	ldr	r5, [sp, #28]
   11548:	ldr	fp, [sp, #32]
   1154c:	ldr	r6, [sp, #36]	; 0x24
   11550:	b	11460 <__assert_fail@plt+0x560>
   11554:	ldr	r3, [r9, #20]
   11558:	ldr	r2, [r9, #24]
   1155c:	cmp	r3, r2
   11560:	addcc	r1, r3, #1
   11564:	movcc	r2, #10
   11568:	strcc	r1, [r9, #20]
   1156c:	strbcc	r2, [r3]
   11570:	bcs	1157c <__assert_fail@plt+0x67c>
   11574:	ldr	r3, [r5]
   11578:	b	113d8 <__assert_fail@plt+0x4d8>
   1157c:	mov	r0, r9
   11580:	mov	r1, #10
   11584:	bl	10e88 <__overflow@plt>
   11588:	cmn	r0, #1
   1158c:	bne	11574 <__assert_fail@plt+0x674>
   11590:	bl	10e1c <__errno_location@plt>
   11594:	movw	r1, #34976	; 0x88a0
   11598:	movt	r1, #1
   1159c:	b	113ec <__assert_fail@plt+0x4ec>
   115a0:	mov	r2, #5
   115a4:	movw	r1, #34988	; 0x88ac
   115a8:	movt	r1, #1
   115ac:	mov	r0, #0
   115b0:	bl	10d38 <dcgettext@plt>
   115b4:	mov	r2, r0
   115b8:	mov	r1, #0
   115bc:	mov	r0, #1
   115c0:	bl	10da4 <error@plt>
   115c4:	bl	10e1c <__errno_location@plt>
   115c8:	ldr	r4, [r0]
   115cc:	mov	r1, #3
   115d0:	mov	r0, r5
   115d4:	ldr	r2, [sp, #24]
   115d8:	bl	15804 <__assert_fail@plt+0x4904>
   115dc:	mov	r3, r0
   115e0:	movw	r2, #34912	; 0x8860
   115e4:	movt	r2, #1
   115e8:	mov	r0, #1
   115ec:	mov	r1, r4
   115f0:	bl	10da4 <error@plt>
   115f4:	andeq	r8, r1, r4, asr #6
   115f8:	mov	fp, #0
   115fc:	mov	lr, #0
   11600:	pop	{r1}		; (ldr r1, [sp], #4)
   11604:	mov	r2, sp
   11608:	push	{r2}		; (str r2, [sp, #-4]!)
   1160c:	push	{r0}		; (str r0, [sp, #-4]!)
   11610:	ldr	ip, [pc, #16]	; 11628 <__assert_fail@plt+0x728>
   11614:	push	{ip}		; (str ip, [sp, #-4]!)
   11618:	ldr	r0, [pc, #12]	; 1162c <__assert_fail@plt+0x72c>
   1161c:	ldr	r3, [pc, #12]	; 11630 <__assert_fail@plt+0x730>
   11620:	bl	10dbc <__libc_start_main@plt>
   11624:	bl	10ef4 <abort@plt>
   11628:	andeq	r8, r1, r4, ror #5
   1162c:	andeq	r0, r1, ip, lsl #30
   11630:	andeq	r8, r1, r4, lsl #5
   11634:	ldr	r3, [pc, #20]	; 11650 <__assert_fail@plt+0x750>
   11638:	ldr	r2, [pc, #20]	; 11654 <__assert_fail@plt+0x754>
   1163c:	add	r3, pc, r3
   11640:	ldr	r2, [r3, r2]
   11644:	cmp	r2, #0
   11648:	bxeq	lr
   1164c:	b	10dd4 <__gmon_start__@plt>
   11650:			; <UNDEFINED> instruction: 0x000189bc
   11654:	ldrdeq	r0, [r0], -ip
   11658:	ldr	r0, [pc, #24]	; 11678 <__assert_fail@plt+0x778>
   1165c:	ldr	r3, [pc, #24]	; 1167c <__assert_fail@plt+0x77c>
   11660:	cmp	r3, r0
   11664:	bxeq	lr
   11668:	ldr	r3, [pc, #16]	; 11680 <__assert_fail@plt+0x780>
   1166c:	cmp	r3, #0
   11670:	bxeq	lr
   11674:	bx	r3
   11678:	andeq	sl, r2, r0, lsr r1
   1167c:	andeq	sl, r2, r0, lsr r1
   11680:	andeq	r0, r0, r0
   11684:	ldr	r0, [pc, #36]	; 116b0 <__assert_fail@plt+0x7b0>
   11688:	ldr	r1, [pc, #36]	; 116b4 <__assert_fail@plt+0x7b4>
   1168c:	sub	r1, r1, r0
   11690:	asr	r1, r1, #2
   11694:	add	r1, r1, r1, lsr #31
   11698:	asrs	r1, r1, #1
   1169c:	bxeq	lr
   116a0:	ldr	r3, [pc, #16]	; 116b8 <__assert_fail@plt+0x7b8>
   116a4:	cmp	r3, #0
   116a8:	bxeq	lr
   116ac:	bx	r3
   116b0:	andeq	sl, r2, r0, lsr r1
   116b4:	andeq	sl, r2, r0, lsr r1
   116b8:	andeq	r0, r0, r0
   116bc:	push	{r4, lr}
   116c0:	ldr	r4, [pc, #24]	; 116e0 <__assert_fail@plt+0x7e0>
   116c4:	ldrb	r3, [r4]
   116c8:	cmp	r3, #0
   116cc:	popne	{r4, pc}
   116d0:	bl	11658 <__assert_fail@plt+0x758>
   116d4:	mov	r3, #1
   116d8:	strb	r3, [r4]
   116dc:	pop	{r4, pc}
   116e0:	andeq	sl, r2, r4, asr r1
   116e4:	b	11684 <__assert_fail@plt+0x784>
   116e8:	str	r4, [sp, #-8]!
   116ec:	mov	r4, r1
   116f0:	str	lr, [sp, #4]
   116f4:	bl	123fc <__assert_fail@plt+0x14fc>
   116f8:	cmp	r0, #0
   116fc:	beq	11770 <__assert_fail@plt+0x870>
   11700:	movw	r1, #33700	; 0x83a4
   11704:	movt	r1, #1
   11708:	mov	r0, r4
   1170c:	bl	10cb4 <strcmp@plt>
   11710:	mov	r5, r0
   11714:	bl	10e1c <__errno_location@plt>
   11718:	cmp	r5, #0
   1171c:	ldr	r6, [r0]
   11720:	bne	11748 <__assert_fail@plt+0x848>
   11724:	mov	r2, #5
   11728:	mov	r0, r5
   1172c:	movw	r1, #33704	; 0x83a8
   11730:	movt	r1, #1
   11734:	bl	10d38 <dcgettext@plt>
   11738:	mov	r2, r0
   1173c:	mov	r1, r6
   11740:	mov	r0, #1
   11744:	bl	10da4 <error@plt>
   11748:	mov	r2, r4
   1174c:	mov	r1, #3
   11750:	mov	r0, #0
   11754:	bl	15804 <__assert_fail@plt+0x4904>
   11758:	mov	r3, r0
   1175c:	movw	r2, #34912	; 0x8860
   11760:	movt	r2, #1
   11764:	mov	r1, r6
   11768:	mov	r0, #1
   1176c:	bl	10da4 <error@plt>
   11770:	bl	10df8 <exit@plt>
   11774:	subs	r6, r0, #0
   11778:	str	r7, [sp, #-8]!
   1177c:	str	lr, [sp, #4]
   11780:	sub	sp, sp, #56	; 0x38
   11784:	beq	117cc <__assert_fail@plt+0x8cc>
   11788:	movw	r3, #41280	; 0xa140
   1178c:	movt	r3, #2
   11790:	ldr	r4, [r3]
   11794:	mov	r2, #5
   11798:	movw	r1, #33736	; 0x83c8
   1179c:	movt	r1, #1
   117a0:	mov	r0, #0
   117a4:	bl	10d38 <dcgettext@plt>
   117a8:	movw	r3, #41312	; 0xa160
   117ac:	movt	r3, #2
   117b0:	mov	r2, r0
   117b4:	mov	r1, #1
   117b8:	ldr	r3, [r3]
   117bc:	mov	r0, r4
   117c0:	bl	10e58 <__fprintf_chk@plt>
   117c4:	mov	r0, r6
   117c8:	bl	10df8 <exit@plt>
   117cc:	mov	r2, #5
   117d0:	movw	r1, #33776	; 0x83f0
   117d4:	movt	r1, #1
   117d8:	movw	r7, #41292	; 0xa14c
   117dc:	movt	r7, #2
   117e0:	bl	10d38 <dcgettext@plt>
   117e4:	movw	r3, #41312	; 0xa160
   117e8:	movt	r3, #2
   117ec:	mov	r1, r0
   117f0:	mov	r0, #1
   117f4:	ldr	r2, [r3]
   117f8:	bl	10e40 <__printf_chk@plt>
   117fc:	mov	r2, #5
   11800:	movw	r1, #33808	; 0x8410
   11804:	movt	r1, #1
   11808:	mov	r0, r6
   1180c:	bl	10d38 <dcgettext@plt>
   11810:	mov	r1, r0
   11814:	mov	r2, #64	; 0x40
   11818:	mov	r0, #1
   1181c:	bl	10e40 <__printf_chk@plt>
   11820:	mov	r2, #5
   11824:	movw	r1, #33880	; 0x8458
   11828:	movt	r1, #1
   1182c:	mov	r0, r6
   11830:	bl	10d38 <dcgettext@plt>
   11834:	ldr	r1, [r7]
   11838:	bl	10ca8 <fputs_unlocked@plt>
   1183c:	mov	r2, #5
   11840:	movw	r1, #33936	; 0x8490
   11844:	movt	r1, #1
   11848:	mov	r0, r6
   1184c:	bl	10d38 <dcgettext@plt>
   11850:	ldr	r1, [r7]
   11854:	bl	10ca8 <fputs_unlocked@plt>
   11858:	mov	r2, #5
   1185c:	movw	r1, #34012	; 0x84dc
   11860:	movt	r1, #1
   11864:	mov	r0, r6
   11868:	bl	10d38 <dcgettext@plt>
   1186c:	ldr	r1, [r7]
   11870:	bl	10ca8 <fputs_unlocked@plt>
   11874:	mov	r2, #5
   11878:	movw	r1, #34256	; 0x85d0
   1187c:	movt	r1, #1
   11880:	mov	r0, r6
   11884:	bl	10d38 <dcgettext@plt>
   11888:	ldr	r1, [r7]
   1188c:	bl	10ca8 <fputs_unlocked@plt>
   11890:	mov	r2, #5
   11894:	movw	r1, #34304	; 0x8600
   11898:	movt	r1, #1
   1189c:	mov	r0, r6
   118a0:	bl	10d38 <dcgettext@plt>
   118a4:	ldr	r1, [r7]
   118a8:	bl	10ca8 <fputs_unlocked@plt>
   118ac:	mov	r2, #5
   118b0:	movw	r1, #34360	; 0x8638
   118b4:	movt	r1, #1
   118b8:	mov	r0, r6
   118bc:	bl	10d38 <dcgettext@plt>
   118c0:	movw	r3, #33728	; 0x83c0
   118c4:	movt	r3, #1
   118c8:	mov	r1, r0
   118cc:	mov	r2, r3
   118d0:	mov	r0, #1
   118d4:	bl	10e40 <__printf_chk@plt>
   118d8:	movw	lr, #33548	; 0x830c
   118dc:	movt	lr, #1
   118e0:	ldr	ip, [lr]
   118e4:	ldr	r4, [lr, #4]
   118e8:	ldrd	r8, [lr, #8]
   118ec:	subs	r1, ip, #0
   118f0:	str	ip, [sp]
   118f4:	ldrd	r2, [lr, #16]
   118f8:	str	r4, [sp, #4]
   118fc:	ldrd	r4, [lr, #24]
   11900:	strd	r8, [sp, #8]
   11904:	ldrd	r8, [lr, #32]
   11908:	strd	r2, [sp, #16]
   1190c:	ldrd	r2, [lr, #40]	; 0x28
   11910:	strd	r4, [sp, #24]
   11914:	ldrd	r4, [lr, #48]	; 0x30
   11918:	strd	r8, [sp, #32]
   1191c:	strd	r2, [sp, #40]	; 0x28
   11920:	strd	r4, [sp, #48]	; 0x30
   11924:	movwne	r5, #33728	; 0x83c0
   11928:	mov	r4, sp
   1192c:	movtne	r5, #1
   11930:	bne	11a28 <__assert_fail@plt+0xb28>
   11934:	ldr	r4, [r4, #4]
   11938:	movw	r1, #34628	; 0x8744
   1193c:	movt	r1, #1
   11940:	mov	r2, #5
   11944:	cmp	r4, #0
   11948:	beq	11a3c <__assert_fail@plt+0xb3c>
   1194c:	mov	r0, #0
   11950:	bl	10d38 <dcgettext@plt>
   11954:	mov	r1, r0
   11958:	movw	r3, #34652	; 0x875c
   1195c:	movt	r3, #1
   11960:	movw	r2, #34692	; 0x8784
   11964:	movt	r2, #1
   11968:	mov	r0, #1
   1196c:	bl	10e40 <__printf_chk@plt>
   11970:	mov	r1, #0
   11974:	mov	r0, #5
   11978:	bl	10e94 <setlocale@plt>
   1197c:	cmp	r0, #0
   11980:	movweq	r5, #33728	; 0x83c0
   11984:	movteq	r5, #1
   11988:	beq	119ac <__assert_fail@plt+0xaac>
   1198c:	movw	r1, #34708	; 0x8794
   11990:	movt	r1, #1
   11994:	mov	r2, #3
   11998:	movw	r5, #33728	; 0x83c0
   1199c:	movt	r5, #1
   119a0:	bl	10ee8 <strncmp@plt>
   119a4:	cmp	r0, #0
   119a8:	bne	11af4 <__assert_fail@plt+0xbf4>
   119ac:	mov	r2, #5
   119b0:	movw	r1, #34784	; 0x87e0
   119b4:	movt	r1, #1
   119b8:	mov	r0, #0
   119bc:	bl	10d38 <dcgettext@plt>
   119c0:	mov	r1, r0
   119c4:	movw	r3, #33728	; 0x83c0
   119c8:	movt	r3, #1
   119cc:	movw	r2, #34652	; 0x875c
   119d0:	movt	r2, #1
   119d4:	mov	r0, #1
   119d8:	bl	10e40 <__printf_chk@plt>
   119dc:	mov	r2, #5
   119e0:	movw	r1, #34812	; 0x87fc
   119e4:	movt	r1, #1
   119e8:	mov	r0, #0
   119ec:	bl	10d38 <dcgettext@plt>
   119f0:	movw	r2, #35012	; 0x88c4
   119f4:	movt	r2, #1
   119f8:	cmp	r4, r5
   119fc:	movw	r3, #34300	; 0x85fc
   11a00:	movt	r3, #1
   11a04:	mov	r1, r0
   11a08:	moveq	r3, r2
   11a0c:	mov	r2, r4
   11a10:	mov	r0, #1
   11a14:	bl	10e40 <__printf_chk@plt>
   11a18:	b	117c4 <__assert_fail@plt+0x8c4>
   11a1c:	ldr	r1, [r4, #8]!
   11a20:	cmp	r1, #0
   11a24:	beq	11934 <__assert_fail@plt+0xa34>
   11a28:	mov	r0, r5
   11a2c:	bl	10cb4 <strcmp@plt>
   11a30:	cmp	r0, #0
   11a34:	bne	11a1c <__assert_fail@plt+0xb1c>
   11a38:	b	11934 <__assert_fail@plt+0xa34>
   11a3c:	mov	r0, r4
   11a40:	bl	10d38 <dcgettext@plt>
   11a44:	mov	r1, r0
   11a48:	movw	r3, #34652	; 0x875c
   11a4c:	movt	r3, #1
   11a50:	movw	r2, #34692	; 0x8784
   11a54:	movt	r2, #1
   11a58:	mov	r0, #1
   11a5c:	bl	10e40 <__printf_chk@plt>
   11a60:	mov	r1, r4
   11a64:	mov	r0, #5
   11a68:	bl	10e94 <setlocale@plt>
   11a6c:	cmp	r0, #0
   11a70:	beq	11a8c <__assert_fail@plt+0xb8c>
   11a74:	movw	r1, #34708	; 0x8794
   11a78:	movt	r1, #1
   11a7c:	mov	r2, #3
   11a80:	bl	10ee8 <strncmp@plt>
   11a84:	cmp	r0, #0
   11a88:	bne	11ae8 <__assert_fail@plt+0xbe8>
   11a8c:	mov	r2, #5
   11a90:	movw	r1, #34784	; 0x87e0
   11a94:	movt	r1, #1
   11a98:	mov	r0, #0
   11a9c:	bl	10d38 <dcgettext@plt>
   11aa0:	mov	r1, r0
   11aa4:	movw	r3, #33728	; 0x83c0
   11aa8:	movt	r3, #1
   11aac:	movw	r2, #34652	; 0x875c
   11ab0:	movt	r2, #1
   11ab4:	mov	r0, #1
   11ab8:	bl	10e40 <__printf_chk@plt>
   11abc:	movw	r1, #34812	; 0x87fc
   11ac0:	movt	r1, #1
   11ac4:	mov	r2, #5
   11ac8:	mov	r0, #0
   11acc:	bl	10d38 <dcgettext@plt>
   11ad0:	movw	r4, #33728	; 0x83c0
   11ad4:	movt	r4, #1
   11ad8:	movw	r3, #35012	; 0x88c4
   11adc:	movt	r3, #1
   11ae0:	mov	r1, r0
   11ae4:	b	11a0c <__assert_fail@plt+0xb0c>
   11ae8:	movw	r5, #33728	; 0x83c0
   11aec:	movt	r5, #1
   11af0:	mov	r4, r5
   11af4:	mov	r2, #5
   11af8:	movw	r1, #34712	; 0x8798
   11afc:	movt	r1, #1
   11b00:	mov	r0, #0
   11b04:	bl	10d38 <dcgettext@plt>
   11b08:	ldr	r1, [r7]
   11b0c:	bl	10ca8 <fputs_unlocked@plt>
   11b10:	b	119ac <__assert_fail@plt+0xaac>
   11b14:	tst	r3, #3
   11b18:	mov	ip, r3
   11b1c:	strd	r4, [sp, #-20]!	; 0xffffffec
   11b20:	strd	r6, [sp, #8]
   11b24:	str	lr, [sp, #16]
   11b28:	bne	11b3c <__assert_fail@plt+0xc3c>
   11b2c:	asr	r3, r3, #2
   11b30:	add	r3, r3, r3, lsl #1
   11b34:	cmp	r3, r1
   11b38:	beq	11c68 <__assert_fail@plt+0xd68>
   11b3c:	movw	r4, #35176	; 0x8968
   11b40:	movt	r4, #1
   11b44:	add	r2, r2, #4
   11b48:	mov	r5, #61	; 0x3d
   11b4c:	b	11bb8 <__assert_fail@plt+0xcb8>
   11b50:	ldrb	lr, [r0, #1]
   11b54:	cmp	ip, #2
   11b58:	add	r3, r3, lr, lsr #4
   11b5c:	and	r3, r3, #63	; 0x3f
   11b60:	ldrb	r3, [r4, r3]
   11b64:	strb	r3, [r2, #-3]
   11b68:	beq	11c3c <__assert_fail@plt+0xd3c>
   11b6c:	cmp	r1, #2
   11b70:	lsl	lr, lr, #2
   11b74:	beq	11c28 <__assert_fail@plt+0xd28>
   11b78:	ldrb	r3, [r0, #2]
   11b7c:	cmp	ip, #3
   11b80:	add	lr, lr, r3, lsr #6
   11b84:	and	lr, lr, #63	; 0x3f
   11b88:	ldrb	lr, [r4, lr]
   11b8c:	strb	lr, [r2, #-2]
   11b90:	beq	11c3c <__assert_fail@plt+0xd3c>
   11b94:	and	r3, r3, #63	; 0x3f
   11b98:	cmp	ip, #4
   11b9c:	ldrb	r3, [r4, r3]
   11ba0:	strb	r3, [r2, #-1]
   11ba4:	beq	11c3c <__assert_fail@plt+0xd3c>
   11ba8:	subs	r1, r1, #3
   11bac:	addne	r0, r0, #3
   11bb0:	sub	ip, ip, #4
   11bb4:	add	r2, r2, #4
   11bb8:	adds	r3, ip, #0
   11bbc:	sub	lr, r2, #4
   11bc0:	movne	r3, #1
   11bc4:	cmp	r1, #0
   11bc8:	moveq	r3, #0
   11bcc:	cmp	r3, #0
   11bd0:	beq	11c4c <__assert_fail@plt+0xd4c>
   11bd4:	ldrb	r3, [r0]
   11bd8:	cmp	ip, #1
   11bdc:	ldrb	lr, [r4, r3, lsr #2]
   11be0:	strb	lr, [r2, #-4]
   11be4:	beq	11c3c <__assert_fail@plt+0xd3c>
   11be8:	cmp	r1, #1
   11bec:	lsl	r3, r3, #4
   11bf0:	bne	11b50 <__assert_fail@plt+0xc50>
   11bf4:	and	r3, r3, #63	; 0x3f
   11bf8:	cmp	ip, #2
   11bfc:	ldrb	r3, [r4, r3]
   11c00:	strb	r3, [r2, #-3]
   11c04:	beq	11c3c <__assert_fail@plt+0xd3c>
   11c08:	cmp	ip, #3
   11c0c:	strb	r5, [r2, #-2]
   11c10:	beq	11c3c <__assert_fail@plt+0xd3c>
   11c14:	cmp	ip, #4
   11c18:	strb	r5, [r2, #-1]
   11c1c:	beq	11c3c <__assert_fail@plt+0xd3c>
   11c20:	mov	r1, #0
   11c24:	b	11bb0 <__assert_fail@plt+0xcb0>
   11c28:	and	lr, lr, #63	; 0x3f
   11c2c:	cmp	ip, #3
   11c30:	ldrb	r3, [r4, lr]
   11c34:	strb	r3, [r2, #-2]
   11c38:	bne	11c14 <__assert_fail@plt+0xd14>
   11c3c:	ldrd	r4, [sp]
   11c40:	ldrd	r6, [sp, #8]
   11c44:	add	sp, sp, #16
   11c48:	pop	{pc}		; (ldr pc, [sp], #4)
   11c4c:	cmp	ip, #0
   11c50:	beq	11c3c <__assert_fail@plt+0xd3c>
   11c54:	strb	r3, [r2, #-4]
   11c58:	ldrd	r4, [sp]
   11c5c:	ldrd	r6, [sp, #8]
   11c60:	add	sp, sp, #16
   11c64:	pop	{pc}		; (ldr pc, [sp], #4)
   11c68:	cmp	r3, #0
   11c6c:	beq	11c3c <__assert_fail@plt+0xd3c>
   11c70:	add	r3, r3, #3
   11c74:	movw	r5, #35176	; 0x8968
   11c78:	movt	r5, #1
   11c7c:	add	r3, r0, r3
   11c80:	add	r0, r0, #3
   11c84:	ldrb	r6, [r0, #-2]
   11c88:	mov	r1, #0
   11c8c:	add	r0, r0, #3
   11c90:	ldrb	r4, [r0, #-4]
   11c94:	ldrb	r7, [r0, #-6]
   11c98:	cmp	r3, r0
   11c9c:	lsr	lr, r6, #4
   11ca0:	lsr	ip, r4, #6
   11ca4:	and	r4, r4, #63	; 0x3f
   11ca8:	ldrb	r4, [r5, r4]
   11cac:	add	lr, lr, r7, lsl #4
   11cb0:	ldrb	r7, [r5, r7, lsr #2]
   11cb4:	add	ip, ip, r6, lsl #2
   11cb8:	and	lr, lr, #63	; 0x3f
   11cbc:	ldrb	lr, [r5, lr]
   11cc0:	and	ip, ip, #63	; 0x3f
   11cc4:	ldrb	ip, [r5, ip]
   11cc8:	bfi	r1, r7, #0, #8
   11ccc:	bfi	r1, lr, #8, #8
   11cd0:	bfi	r1, ip, #16, #8
   11cd4:	bfi	r1, r4, #24, #8
   11cd8:	str	r1, [r2], #4
   11cdc:	bne	11c84 <__assert_fail@plt+0xd84>
   11ce0:	b	11c3c <__assert_fail@plt+0xd3c>
   11ce4:	movw	r3, #21846	; 0x5556
   11ce8:	movt	r3, #21845	; 0x5555
   11cec:	strd	r4, [sp, #-24]!	; 0xffffffe8
   11cf0:	strd	r6, [sp, #8]
   11cf4:	smull	ip, r3, r3, r1
   11cf8:	str	r8, [sp, #16]
   11cfc:	str	lr, [sp, #20]
   11d00:	sub	r3, r3, r1, asr #31
   11d04:	add	ip, r3, r3, lsl #1
   11d08:	cmp	r1, ip
   11d0c:	addne	r3, r3, #1
   11d10:	asr	r7, r3, #31
   11d14:	lsl	r5, r3, #2
   11d18:	lsl	ip, r7, #2
   11d1c:	orr	ip, ip, r3, lsr #30
   11d20:	cmp	ip, r5, asr #31
   11d24:	movne	r3, #1
   11d28:	moveq	r3, #0
   11d2c:	orrs	r3, r3, r1, lsr #31
   11d30:	beq	11d58 <__assert_fail@plt+0xe58>
   11d34:	mov	r3, #0
   11d38:	mov	r5, r3
   11d3c:	str	r3, [r2]
   11d40:	mov	r0, r5
   11d44:	ldrd	r4, [sp]
   11d48:	ldrd	r6, [sp, #8]
   11d4c:	ldr	r8, [sp, #16]
   11d50:	add	sp, sp, #20
   11d54:	pop	{pc}		; (ldr pc, [sp], #4)
   11d58:	add	r8, r5, #1
   11d5c:	mov	r7, r0
   11d60:	mov	r0, r8
   11d64:	mov	r6, r2
   11d68:	mov	r4, r1
   11d6c:	bl	17f58 <__assert_fail@plt+0x7058>
   11d70:	cmp	r0, #0
   11d74:	str	r0, [r6]
   11d78:	moveq	r5, r8
   11d7c:	beq	11d40 <__assert_fail@plt+0xe40>
   11d80:	mov	r2, r0
   11d84:	mov	r3, r8
   11d88:	mov	r1, r4
   11d8c:	mov	r0, r7
   11d90:	bl	11b14 <__assert_fail@plt+0xc14>
   11d94:	b	11d40 <__assert_fail@plt+0xe40>
   11d98:	movw	r3, #35176	; 0x8968
   11d9c:	movt	r3, #1
   11da0:	add	r0, r3, r0
   11da4:	ldrb	r0, [r0, #64]	; 0x40
   11da8:	mvn	r0, r0
   11dac:	ubfx	r0, r0, #7, #1
   11db0:	bx	lr
   11db4:	mov	r3, #0
   11db8:	str	r3, [r0]
   11dbc:	bx	lr
   11dc0:	strd	r4, [sp, #-36]!	; 0xffffffdc
   11dc4:	mov	r4, r1
   11dc8:	mov	r5, r2
   11dcc:	strd	r6, [sp, #8]
   11dd0:	mov	r6, r3
   11dd4:	strd	r8, [sp, #16]
   11dd8:	strd	sl, [sp, #24]
   11ddc:	subs	sl, r0, #0
   11de0:	str	lr, [sp, #32]
   11de4:	sub	sp, sp, #20
   11de8:	ldr	r3, [sp, #56]	; 0x38
   11dec:	ldr	r8, [r3]
   11df0:	beq	12128 <__assert_fail@plt+0x1228>
   11df4:	adds	r3, r2, #0
   11df8:	ldr	fp, [sl]
   11dfc:	movne	r3, #1
   11e00:	str	r3, [sp, #8]
   11e04:	cmp	fp, #0
   11e08:	moveq	fp, r3
   11e0c:	movne	fp, #0
   11e10:	movw	r7, #35176	; 0x8968
   11e14:	movt	r7, #1
   11e18:	add	r2, sl, #4
   11e1c:	str	r2, [sp, #4]
   11e20:	cmp	fp, #0
   11e24:	bne	11f44 <__assert_fail@plt+0x1044>
   11e28:	cmp	r5, #0
   11e2c:	moveq	r0, r3
   11e30:	movne	r0, #0
   11e34:	cmp	r0, #0
   11e38:	bne	12060 <__assert_fail@plt+0x1160>
   11e3c:	cmp	r5, #0
   11e40:	bne	12018 <__assert_fail@plt+0x1118>
   11e44:	cmp	sl, #0
   11e48:	beq	12138 <__assert_fail@plt+0x1238>
   11e4c:	ldr	r5, [sl]
   11e50:	cmp	r5, #4
   11e54:	beq	120d4 <__assert_fail@plt+0x11d4>
   11e58:	mov	r9, r4
   11e5c:	cmp	r5, #0
   11e60:	ldr	r1, [sp, #4]
   11e64:	beq	12138 <__assert_fail@plt+0x1238>
   11e68:	cmp	r5, #3
   11e6c:	bgt	11e7c <__assert_fail@plt+0xf7c>
   11e70:	ldr	r2, [sp, #8]
   11e74:	cmp	r2, #0
   11e78:	bne	12140 <__assert_fail@plt+0x1240>
   11e7c:	cmp	r5, #1
   11e80:	ble	12048 <__assert_fail@plt+0x1148>
   11e84:	ldrb	r2, [r1]
   11e88:	add	r2, r7, r2
   11e8c:	ldrsb	r0, [r2, #64]	; 0x40
   11e90:	cmp	r0, #0
   11e94:	blt	1205c <__assert_fail@plt+0x115c>
   11e98:	ldrb	r2, [r1, #1]
   11e9c:	add	r2, r7, r2
   11ea0:	ldrsb	r2, [r2, #64]	; 0x40
   11ea4:	cmp	r2, #0
   11ea8:	blt	1205c <__assert_fail@plt+0x115c>
   11eac:	cmp	r8, #0
   11eb0:	beq	11ec4 <__assert_fail@plt+0xfc4>
   11eb4:	asr	ip, r2, #4
   11eb8:	sub	r8, r8, #1
   11ebc:	orr	r0, ip, r0, lsl #2
   11ec0:	strb	r0, [r6], #1
   11ec4:	cmp	r5, #2
   11ec8:	beq	1205c <__assert_fail@plt+0x115c>
   11ecc:	ldrb	r0, [r1, #2]
   11ed0:	cmp	r0, #61	; 0x3d
   11ed4:	beq	12054 <__assert_fail@plt+0x1154>
   11ed8:	add	r0, r7, r0
   11edc:	ldrsb	r0, [r0, #64]	; 0x40
   11ee0:	cmp	r0, #0
   11ee4:	blt	1205c <__assert_fail@plt+0x115c>
   11ee8:	cmp	r8, #0
   11eec:	beq	11f00 <__assert_fail@plt+0x1000>
   11ef0:	asr	ip, r0, #2
   11ef4:	sub	r8, r8, #1
   11ef8:	orr	r2, ip, r2, lsl #4
   11efc:	strb	r2, [r6], #1
   11f00:	cmp	r5, #3
   11f04:	beq	1205c <__assert_fail@plt+0x115c>
   11f08:	ldrb	r2, [r1, #3]
   11f0c:	cmp	r2, #61	; 0x3d
   11f10:	beq	12118 <__assert_fail@plt+0x1218>
   11f14:	add	r2, r7, r2
   11f18:	ldrsb	r2, [r2, #64]	; 0x40
   11f1c:	cmp	r2, #0
   11f20:	blt	1205c <__assert_fail@plt+0x115c>
   11f24:	cmp	r8, #0
   11f28:	beq	11f38 <__assert_fail@plt+0x1038>
   11f2c:	orr	r2, r2, r0, lsl #6
   11f30:	sub	r8, r8, #1
   11f34:	strb	r2, [r6], #1
   11f38:	sub	r5, r9, r4
   11f3c:	cmp	fp, #0
   11f40:	beq	11e28 <__assert_fail@plt+0xf28>
   11f44:	cmp	r5, #1
   11f48:	ble	11e28 <__assert_fail@plt+0xf28>
   11f4c:	ldrb	r2, [r4]
   11f50:	add	r2, r7, r2
   11f54:	ldrsb	r2, [r2, #64]	; 0x40
   11f58:	cmp	r2, #0
   11f5c:	blt	12018 <__assert_fail@plt+0x1118>
   11f60:	ldrb	r1, [r4, #1]
   11f64:	add	r1, r7, r1
   11f68:	ldrsb	r0, [r1, #64]	; 0x40
   11f6c:	cmp	r0, #0
   11f70:	blt	12018 <__assert_fail@plt+0x1118>
   11f74:	cmp	r8, #0
   11f78:	moveq	ip, r8
   11f7c:	beq	11f90 <__assert_fail@plt+0x1090>
   11f80:	asr	r1, r0, #4
   11f84:	sub	ip, r8, #1
   11f88:	orr	r2, r1, r2, lsl #2
   11f8c:	strb	r2, [r6], #1
   11f90:	cmp	r5, #2
   11f94:	beq	1201c <__assert_fail@plt+0x111c>
   11f98:	ldrb	r2, [r4, #2]
   11f9c:	cmp	r2, #61	; 0x3d
   11fa0:	beq	12090 <__assert_fail@plt+0x1190>
   11fa4:	add	r2, r7, r2
   11fa8:	ldrsb	r2, [r2, #64]	; 0x40
   11fac:	cmp	r2, #0
   11fb0:	blt	1201c <__assert_fail@plt+0x111c>
   11fb4:	cmp	ip, #0
   11fb8:	beq	11fcc <__assert_fail@plt+0x10cc>
   11fbc:	asr	r1, r2, #2
   11fc0:	sub	ip, ip, #1
   11fc4:	orr	r0, r1, r0, lsl #4
   11fc8:	strb	r0, [r6], #1
   11fcc:	cmp	r5, #3
   11fd0:	beq	1201c <__assert_fail@plt+0x111c>
   11fd4:	ldrb	r1, [r4, #3]
   11fd8:	cmp	r1, #61	; 0x3d
   11fdc:	beq	120e4 <__assert_fail@plt+0x11e4>
   11fe0:	add	r1, r7, r1
   11fe4:	ldrsb	r1, [r1, #64]	; 0x40
   11fe8:	cmp	r1, #0
   11fec:	blt	1201c <__assert_fail@plt+0x111c>
   11ff0:	cmp	ip, #0
   11ff4:	sub	r5, r5, #4
   11ff8:	orrne	r2, r1, r2, lsl #6
   11ffc:	subne	r8, ip, #1
   12000:	moveq	r8, ip
   12004:	add	r4, r4, #4
   12008:	strbne	r2, [r6], #1
   1200c:	cmp	r5, #1
   12010:	bgt	11f4c <__assert_fail@plt+0x104c>
   12014:	b	11e28 <__assert_fail@plt+0xf28>
   12018:	mov	ip, r8
   1201c:	ldrb	r2, [r4]
   12020:	cmp	r2, #10
   12024:	beq	120bc <__assert_fail@plt+0x11bc>
   12028:	sub	r2, r8, ip
   1202c:	cmp	sl, #0
   12030:	sub	r6, r6, r2
   12034:	add	r9, r4, r5
   12038:	bne	12148 <__assert_fail@plt+0x1248>
   1203c:	cmp	r5, #1
   12040:	mov	r1, r4
   12044:	bgt	11e84 <__assert_fail@plt+0xf84>
   12048:	clz	r0, r5
   1204c:	lsr	r0, r0, #5
   12050:	b	12060 <__assert_fail@plt+0x1160>
   12054:	cmp	r5, #4
   12058:	beq	12104 <__assert_fail@plt+0x1204>
   1205c:	mov	r0, #0
   12060:	ldr	r3, [sp, #56]	; 0x38
   12064:	ldr	r3, [r3]
   12068:	sub	r8, r3, r8
   1206c:	ldr	r3, [sp, #56]	; 0x38
   12070:	str	r8, [r3]
   12074:	add	sp, sp, #20
   12078:	ldrd	r4, [sp]
   1207c:	ldrd	r6, [sp, #8]
   12080:	ldrd	r8, [sp, #16]
   12084:	ldrd	sl, [sp, #24]
   12088:	add	sp, sp, #32
   1208c:	pop	{pc}		; (ldr pc, [sp], #4)
   12090:	cmp	r5, #4
   12094:	bne	1201c <__assert_fail@plt+0x111c>
   12098:	ldrb	r2, [r4, #3]
   1209c:	cmp	r2, #61	; 0x3d
   120a0:	bne	1201c <__assert_fail@plt+0x111c>
   120a4:	cmp	r3, #0
   120a8:	mov	r8, ip
   120ac:	add	r4, r4, #4
   120b0:	beq	11e44 <__assert_fail@plt+0xf44>
   120b4:	mov	r0, r3
   120b8:	b	12060 <__assert_fail@plt+0x1160>
   120bc:	cmp	sl, #0
   120c0:	beq	120f0 <__assert_fail@plt+0x11f0>
   120c4:	add	r4, r4, #1
   120c8:	sub	r5, r5, #1
   120cc:	mov	r8, ip
   120d0:	b	11e20 <__assert_fail@plt+0xf20>
   120d4:	mov	r3, #0
   120d8:	mov	r0, #1
   120dc:	str	r3, [sl]
   120e0:	b	12060 <__assert_fail@plt+0x1160>
   120e4:	cmp	r5, #4
   120e8:	bne	1201c <__assert_fail@plt+0x111c>
   120ec:	b	120a4 <__assert_fail@plt+0x11a4>
   120f0:	sub	r2, r8, ip
   120f4:	add	r9, r4, r5
   120f8:	sub	r6, r6, r2
   120fc:	mov	r1, r4
   12100:	b	11e68 <__assert_fail@plt+0xf68>
   12104:	ldrb	r2, [r1, #3]
   12108:	cmp	r2, #61	; 0x3d
   1210c:	bne	1205c <__assert_fail@plt+0x115c>
   12110:	sub	r5, r9, r4
   12114:	b	11f3c <__assert_fail@plt+0x103c>
   12118:	cmp	r5, #4
   1211c:	bne	1205c <__assert_fail@plt+0x115c>
   12120:	sub	r5, r9, r4
   12124:	b	11f3c <__assert_fail@plt+0x103c>
   12128:	mov	fp, #1
   1212c:	str	sl, [sp, #8]
   12130:	mov	r3, fp
   12134:	b	11e10 <__assert_fail@plt+0xf10>
   12138:	mov	r0, #1
   1213c:	b	12060 <__assert_fail@plt+0x1160>
   12140:	mov	r0, r2
   12144:	b	12060 <__assert_fail@plt+0x1160>
   12148:	ldr	r1, [sl]
   1214c:	cmp	r5, #3
   12150:	movle	r2, #0
   12154:	movgt	r2, #1
   12158:	cmp	r1, #4
   1215c:	beq	121e0 <__assert_fail@plt+0x12e0>
   12160:	cmp	r1, #0
   12164:	mov	r5, r1
   12168:	movne	r2, #0
   1216c:	cmp	r2, #0
   12170:	beq	12194 <__assert_fail@plt+0x1294>
   12174:	mov	r2, #4
   12178:	mov	r1, #10
   1217c:	str	r3, [sp, #12]
   12180:	mov	r0, r4
   12184:	bl	10e64 <memchr@plt>
   12188:	cmp	r0, #0
   1218c:	ldr	r3, [sp, #12]
   12190:	beq	121d0 <__assert_fail@plt+0x12d0>
   12194:	cmp	r9, r4
   12198:	bls	11e5c <__assert_fail@plt+0xf5c>
   1219c:	ldrb	r0, [r4], #1
   121a0:	add	r2, r5, #1
   121a4:	mov	r1, sl
   121a8:	cmp	r0, #10
   121ac:	beq	121c4 <__assert_fail@plt+0x12c4>
   121b0:	cmp	r2, #4
   121b4:	str	r2, [r1], r5
   121b8:	mov	r5, r2
   121bc:	strb	r0, [r1, #4]
   121c0:	beq	11e5c <__assert_fail@plt+0xf5c>
   121c4:	cmp	r4, r9
   121c8:	bne	1219c <__assert_fail@plt+0x129c>
   121cc:	b	11e5c <__assert_fail@plt+0xf5c>
   121d0:	mov	r5, #4
   121d4:	mov	r1, r4
   121d8:	add	r4, r4, r5
   121dc:	b	11e84 <__assert_fail@plt+0xf84>
   121e0:	mov	r5, #0
   121e4:	str	r5, [sl]
   121e8:	b	1216c <__assert_fail@plt+0x126c>
   121ec:	strd	r4, [sp, #-20]!	; 0xffffffec
   121f0:	mov	r5, r3
   121f4:	mov	r4, r2
   121f8:	strd	r6, [sp, #8]
   121fc:	mov	r6, r0
   12200:	asr	r0, r2, #2
   12204:	str	lr, [sp, #16]
   12208:	sub	sp, sp, #20
   1220c:	mov	r7, r1
   12210:	add	r3, r0, #1
   12214:	add	r3, r3, r3, lsl #1
   12218:	mov	r0, r3
   1221c:	str	r3, [sp, #12]
   12220:	bl	17f58 <__assert_fail@plt+0x7058>
   12224:	cmp	r0, #0
   12228:	str	r0, [r5]
   1222c:	beq	12284 <__assert_fail@plt+0x1384>
   12230:	add	ip, sp, #12
   12234:	mov	r3, r0
   12238:	mov	r2, r4
   1223c:	mov	r1, r7
   12240:	mov	r0, r6
   12244:	str	ip, [sp]
   12248:	bl	11dc0 <__assert_fail@plt+0xec0>
   1224c:	subs	r4, r0, #0
   12250:	beq	1228c <__assert_fail@plt+0x138c>
   12254:	ldr	r3, [sp, #40]	; 0x28
   12258:	cmp	r3, #0
   1225c:	beq	12284 <__assert_fail@plt+0x1384>
   12260:	mov	r2, r3
   12264:	ldr	r3, [sp, #12]
   12268:	str	r3, [r2]
   1226c:	mov	r0, r4
   12270:	add	sp, sp, #20
   12274:	ldrd	r4, [sp]
   12278:	ldrd	r6, [sp, #8]
   1227c:	add	sp, sp, #16
   12280:	pop	{pc}		; (ldr pc, [sp], #4)
   12284:	mov	r4, #1
   12288:	b	1226c <__assert_fail@plt+0x136c>
   1228c:	ldr	r0, [r5]
   12290:	bl	12510 <__assert_fail@plt+0x1610>
   12294:	str	r4, [r5]
   12298:	b	1226c <__assert_fail@plt+0x136c>
   1229c:	movw	r3, #41304	; 0xa158
   122a0:	movt	r3, #2
   122a4:	str	r0, [r3]
   122a8:	bx	lr
   122ac:	movw	r3, #41304	; 0xa158
   122b0:	movt	r3, #2
   122b4:	strb	r0, [r3, #4]
   122b8:	bx	lr
   122bc:	movw	r3, #41292	; 0xa14c
   122c0:	movt	r3, #2
   122c4:	strd	r4, [sp, #-16]!
   122c8:	ldr	r0, [r3]
   122cc:	str	r6, [sp, #8]
   122d0:	str	lr, [sp, #12]
   122d4:	sub	sp, sp, #8
   122d8:	bl	17fec <__assert_fail@plt+0x70ec>
   122dc:	cmp	r0, #0
   122e0:	beq	1230c <__assert_fail@plt+0x140c>
   122e4:	movw	r4, #41304	; 0xa158
   122e8:	movt	r4, #2
   122ec:	ldrb	r6, [r4, #4]
   122f0:	bl	10e1c <__errno_location@plt>
   122f4:	mov	r5, r0
   122f8:	cmp	r6, #0
   122fc:	beq	12338 <__assert_fail@plt+0x1438>
   12300:	ldr	r3, [r0]
   12304:	cmp	r3, #32
   12308:	bne	12338 <__assert_fail@plt+0x1438>
   1230c:	movw	r3, #41280	; 0xa140
   12310:	movt	r3, #2
   12314:	ldr	r0, [r3]
   12318:	bl	17fec <__assert_fail@plt+0x70ec>
   1231c:	cmp	r0, #0
   12320:	bne	12380 <__assert_fail@plt+0x1480>
   12324:	add	sp, sp, #8
   12328:	ldrd	r4, [sp]
   1232c:	ldr	r6, [sp, #8]
   12330:	add	sp, sp, #12
   12334:	pop	{pc}		; (ldr pc, [sp], #4)
   12338:	movw	r1, #34976	; 0x88a0
   1233c:	movt	r1, #1
   12340:	mov	r2, #5
   12344:	mov	r0, #0
   12348:	bl	10d38 <dcgettext@plt>
   1234c:	mov	r6, r0
   12350:	ldr	r0, [r4]
   12354:	cmp	r0, #0
   12358:	beq	12390 <__assert_fail@plt+0x1490>
   1235c:	ldr	r4, [r5]
   12360:	bl	15434 <__assert_fail@plt+0x4534>
   12364:	mov	r3, r0
   12368:	movw	r2, #34908	; 0x885c
   1236c:	movt	r2, #1
   12370:	mov	r0, #0
   12374:	str	r6, [sp]
   12378:	mov	r1, r4
   1237c:	bl	10da4 <error@plt>
   12380:	movw	r3, #41196	; 0xa0ec
   12384:	movt	r3, #2
   12388:	ldr	r0, [r3]
   1238c:	bl	10cf0 <_exit@plt>
   12390:	mov	r3, r6
   12394:	movw	r2, #34912	; 0x8860
   12398:	movt	r2, #1
   1239c:	ldr	r1, [r5]
   123a0:	bl	10da4 <error@plt>
   123a4:	b	12380 <__assert_fail@plt+0x1480>
   123a8:	b	10cc0 <posix_fadvise64@plt>
   123ac:	cmp	r0, #0
   123b0:	bxeq	lr
   123b4:	str	r4, [sp, #-16]!
   123b8:	mov	r4, r1
   123bc:	strd	r6, [sp, #4]
   123c0:	mov	r6, #0
   123c4:	mov	r7, #0
   123c8:	str	lr, [sp, #12]
   123cc:	sub	sp, sp, #16
   123d0:	bl	10e4c <fileno@plt>
   123d4:	mov	r2, r6
   123d8:	mov	r3, r7
   123dc:	strd	r6, [sp]
   123e0:	str	r4, [sp, #8]
   123e4:	bl	10cc0 <posix_fadvise64@plt>
   123e8:	add	sp, sp, #16
   123ec:	ldr	r4, [sp]
   123f0:	ldrd	r6, [sp, #4]
   123f4:	add	sp, sp, #12
   123f8:	pop	{pc}		; (ldr pc, [sp], #4)
   123fc:	strd	r4, [sp, #-12]!
   12400:	mov	r4, r0
   12404:	str	lr, [sp, #8]
   12408:	sub	sp, sp, #12
   1240c:	bl	10e4c <fileno@plt>
   12410:	cmp	r0, #0
   12414:	mov	r0, r4
   12418:	blt	1249c <__assert_fail@plt+0x159c>
   1241c:	bl	10dc8 <__freading@plt>
   12420:	cmp	r0, #0
   12424:	bne	12468 <__assert_fail@plt+0x1568>
   12428:	mov	r0, r4
   1242c:	bl	124b0 <__assert_fail@plt+0x15b0>
   12430:	cmp	r0, #0
   12434:	beq	12498 <__assert_fail@plt+0x1598>
   12438:	bl	10e1c <__errno_location@plt>
   1243c:	mov	r5, r0
   12440:	mov	r0, r4
   12444:	ldr	r4, [r5]
   12448:	bl	10e70 <fclose@plt>
   1244c:	cmp	r4, #0
   12450:	mvnne	r0, #0
   12454:	strne	r4, [r5]
   12458:	add	sp, sp, #12
   1245c:	ldrd	r4, [sp]
   12460:	add	sp, sp, #8
   12464:	pop	{pc}		; (ldr pc, [sp], #4)
   12468:	mov	r0, r4
   1246c:	bl	10e4c <fileno@plt>
   12470:	mov	r1, #1
   12474:	mov	r2, #0
   12478:	mov	r3, #0
   1247c:	str	r1, [sp]
   12480:	bl	10d74 <lseek64@plt>
   12484:	mvn	r3, #0
   12488:	mvn	r2, #0
   1248c:	cmp	r1, r3
   12490:	cmpeq	r0, r2
   12494:	bne	12428 <__assert_fail@plt+0x1528>
   12498:	mov	r0, r4
   1249c:	add	sp, sp, #12
   124a0:	ldrd	r4, [sp]
   124a4:	ldr	lr, [sp, #8]
   124a8:	add	sp, sp, #12
   124ac:	b	10e70 <fclose@plt>
   124b0:	str	r4, [sp, #-8]!
   124b4:	subs	r4, r0, #0
   124b8:	str	lr, [sp, #4]
   124bc:	sub	sp, sp, #8
   124c0:	beq	124dc <__assert_fail@plt+0x15dc>
   124c4:	bl	10dc8 <__freading@plt>
   124c8:	cmp	r0, #0
   124cc:	beq	124dc <__assert_fail@plt+0x15dc>
   124d0:	ldr	r3, [r4]
   124d4:	tst	r3, #256	; 0x100
   124d8:	bne	124f4 <__assert_fail@plt+0x15f4>
   124dc:	mov	r0, r4
   124e0:	add	sp, sp, #8
   124e4:	ldr	r4, [sp]
   124e8:	ldr	lr, [sp, #4]
   124ec:	add	sp, sp, #8
   124f0:	b	10ccc <fflush@plt>
   124f4:	mov	r1, #1
   124f8:	mov	r2, #0
   124fc:	mov	r3, #0
   12500:	mov	r0, r4
   12504:	str	r1, [sp]
   12508:	bl	12570 <__assert_fail@plt+0x1670>
   1250c:	b	124dc <__assert_fail@plt+0x15dc>
   12510:	strd	r4, [sp, #-12]!
   12514:	mov	r5, r0
   12518:	str	lr, [sp, #8]
   1251c:	sub	sp, sp, #12
   12520:	bl	10e1c <__errno_location@plt>
   12524:	mov	r4, r0
   12528:	mov	r2, #0
   1252c:	ldr	r3, [r4]
   12530:	mov	r0, r5
   12534:	str	r2, [r4]
   12538:	str	r3, [sp]
   1253c:	str	r3, [sp, #4]
   12540:	bl	10ce4 <free@plt>
   12544:	ldr	r3, [r4]
   12548:	add	r2, sp, #8
   1254c:	clz	r3, r3
   12550:	lsr	r3, r3, #5
   12554:	add	r3, r2, r3, lsl #2
   12558:	ldr	r3, [r3, #-8]
   1255c:	str	r3, [r4]
   12560:	add	sp, sp, #12
   12564:	ldrd	r4, [sp]
   12568:	add	sp, sp, #8
   1256c:	pop	{pc}		; (ldr pc, [sp], #4)
   12570:	strd	r4, [sp, #-24]!	; 0xffffffe8
   12574:	mov	r4, r0
   12578:	ldr	ip, [r0, #4]
   1257c:	strd	r6, [sp, #8]
   12580:	str	lr, [sp, #20]
   12584:	ldr	lr, [r0, #8]
   12588:	str	r8, [sp, #16]
   1258c:	sub	sp, sp, #8
   12590:	ldr	r5, [sp, #32]
   12594:	cmp	lr, ip
   12598:	beq	125c0 <__assert_fail@plt+0x16c0>
   1259c:	mov	r0, r4
   125a0:	str	r5, [sp, #32]
   125a4:	add	sp, sp, #8
   125a8:	ldrd	r4, [sp]
   125ac:	ldrd	r6, [sp, #8]
   125b0:	ldr	r8, [sp, #16]
   125b4:	ldr	lr, [sp, #20]
   125b8:	add	sp, sp, #24
   125bc:	b	10e7c <fseeko64@plt>
   125c0:	ldr	ip, [r0, #16]
   125c4:	ldr	lr, [r0, #20]
   125c8:	cmp	lr, ip
   125cc:	bne	1259c <__assert_fail@plt+0x169c>
   125d0:	ldr	r8, [r0, #36]	; 0x24
   125d4:	cmp	r8, #0
   125d8:	bne	1259c <__assert_fail@plt+0x169c>
   125dc:	mov	r6, r2
   125e0:	mov	r7, r3
   125e4:	bl	10e4c <fileno@plt>
   125e8:	mov	r2, r6
   125ec:	mov	r3, r7
   125f0:	str	r5, [sp]
   125f4:	bl	10d74 <lseek64@plt>
   125f8:	mvn	r3, #0
   125fc:	mvn	r2, #0
   12600:	cmp	r1, r3
   12604:	cmpeq	r0, r2
   12608:	beq	12638 <__assert_fail@plt+0x1738>
   1260c:	ldr	r3, [r4]
   12610:	strd	r0, [r4, #80]	; 0x50
   12614:	bic	r3, r3, #16
   12618:	str	r3, [r4]
   1261c:	mov	r0, r8
   12620:	add	sp, sp, #8
   12624:	ldrd	r4, [sp]
   12628:	ldrd	r6, [sp, #8]
   1262c:	ldr	r8, [sp, #16]
   12630:	add	sp, sp, #20
   12634:	pop	{pc}		; (ldr pc, [sp], #4)
   12638:	mvn	r8, #0
   1263c:	b	1261c <__assert_fail@plt+0x171c>
   12640:	strd	r4, [sp, #-16]!
   12644:	subs	r4, r0, #0
   12648:	str	r6, [sp, #8]
   1264c:	str	lr, [sp, #12]
   12650:	beq	126e8 <__assert_fail@plt+0x17e8>
   12654:	mov	r1, #47	; 0x2f
   12658:	bl	10ea0 <strrchr@plt>
   1265c:	subs	r5, r0, #0
   12660:	beq	126c0 <__assert_fail@plt+0x17c0>
   12664:	add	r6, r5, #1
   12668:	sub	r3, r6, r4
   1266c:	cmp	r3, #6
   12670:	ble	126c0 <__assert_fail@plt+0x17c0>
   12674:	movw	r1, #35552	; 0x8ae0
   12678:	movt	r1, #1
   1267c:	mov	r2, #7
   12680:	sub	r0, r5, #6
   12684:	bl	10ee8 <strncmp@plt>
   12688:	cmp	r0, #0
   1268c:	bne	126c0 <__assert_fail@plt+0x17c0>
   12690:	movw	r1, #35560	; 0x8ae8
   12694:	movt	r1, #1
   12698:	mov	r2, #3
   1269c:	mov	r0, r6
   126a0:	bl	10ee8 <strncmp@plt>
   126a4:	cmp	r0, #0
   126a8:	movne	r4, r6
   126ac:	bne	126c0 <__assert_fail@plt+0x17c0>
   126b0:	add	r4, r5, #4
   126b4:	movw	r3, #41264	; 0xa130
   126b8:	movt	r3, #2
   126bc:	str	r4, [r3]
   126c0:	movw	r2, #41312	; 0xa160
   126c4:	movt	r2, #2
   126c8:	ldr	r6, [sp, #8]
   126cc:	movw	r3, #41268	; 0xa134
   126d0:	movt	r3, #2
   126d4:	str	r4, [r2]
   126d8:	str	r4, [r3]
   126dc:	ldrd	r4, [sp]
   126e0:	add	sp, sp, #12
   126e4:	pop	{pc}		; (ldr pc, [sp], #4)
   126e8:	movw	r3, #41280	; 0xa140
   126ec:	movt	r3, #2
   126f0:	movw	r0, #35496	; 0x8aa8
   126f4:	movt	r0, #1
   126f8:	ldr	r3, [r3]
   126fc:	mov	r2, #55	; 0x37
   12700:	mov	r1, #1
   12704:	bl	10d68 <fwrite@plt>
   12708:	bl	10ef4 <abort@plt>
   1270c:	mov	r2, #5
   12710:	strd	r4, [sp, #-16]!
   12714:	mov	r5, r0
   12718:	str	r6, [sp, #8]
   1271c:	mov	r6, r1
   12720:	mov	r1, r0
   12724:	mov	r0, #0
   12728:	str	lr, [sp, #12]
   1272c:	bl	10d38 <dcgettext@plt>
   12730:	cmp	r5, r0
   12734:	mov	r4, r0
   12738:	beq	12750 <__assert_fail@plt+0x1850>
   1273c:	mov	r0, r4
   12740:	ldrd	r4, [sp]
   12744:	ldr	r6, [sp, #8]
   12748:	add	sp, sp, #12
   1274c:	pop	{pc}		; (ldr pc, [sp], #4)
   12750:	bl	18074 <__assert_fail@plt+0x7174>
   12754:	ldrb	r3, [r0]
   12758:	bic	r3, r3, #32
   1275c:	cmp	r3, #85	; 0x55
   12760:	bne	127c8 <__assert_fail@plt+0x18c8>
   12764:	ldrb	r3, [r0, #1]
   12768:	bic	r3, r3, #32
   1276c:	cmp	r3, #84	; 0x54
   12770:	bne	12848 <__assert_fail@plt+0x1948>
   12774:	ldrb	r3, [r0, #2]
   12778:	bic	r3, r3, #32
   1277c:	cmp	r3, #70	; 0x46
   12780:	bne	12848 <__assert_fail@plt+0x1948>
   12784:	ldrb	r3, [r0, #3]
   12788:	cmp	r3, #45	; 0x2d
   1278c:	bne	12848 <__assert_fail@plt+0x1948>
   12790:	ldrb	r3, [r0, #4]
   12794:	cmp	r3, #56	; 0x38
   12798:	bne	12848 <__assert_fail@plt+0x1948>
   1279c:	ldrb	r3, [r0, #5]
   127a0:	cmp	r3, #0
   127a4:	bne	12848 <__assert_fail@plt+0x1948>
   127a8:	ldrb	r2, [r4]
   127ac:	movw	r3, #35652	; 0x8b44
   127b0:	movt	r3, #1
   127b4:	movw	r4, #35664	; 0x8b50
   127b8:	movt	r4, #1
   127bc:	cmp	r2, #96	; 0x60
   127c0:	movne	r4, r3
   127c4:	b	1273c <__assert_fail@plt+0x183c>
   127c8:	cmp	r3, #71	; 0x47
   127cc:	bne	12848 <__assert_fail@plt+0x1948>
   127d0:	ldrb	r3, [r0, #1]
   127d4:	bic	r3, r3, #32
   127d8:	cmp	r3, #66	; 0x42
   127dc:	bne	12848 <__assert_fail@plt+0x1948>
   127e0:	ldrb	r3, [r0, #2]
   127e4:	cmp	r3, #49	; 0x31
   127e8:	bne	12848 <__assert_fail@plt+0x1948>
   127ec:	ldrb	r3, [r0, #3]
   127f0:	cmp	r3, #56	; 0x38
   127f4:	bne	12848 <__assert_fail@plt+0x1948>
   127f8:	ldrb	r3, [r0, #4]
   127fc:	cmp	r3, #48	; 0x30
   12800:	bne	12848 <__assert_fail@plt+0x1948>
   12804:	ldrb	r3, [r0, #5]
   12808:	cmp	r3, #51	; 0x33
   1280c:	bne	12848 <__assert_fail@plt+0x1948>
   12810:	ldrb	r3, [r0, #6]
   12814:	cmp	r3, #48	; 0x30
   12818:	bne	12848 <__assert_fail@plt+0x1948>
   1281c:	ldrb	r3, [r0, #7]
   12820:	cmp	r3, #0
   12824:	bne	12848 <__assert_fail@plt+0x1948>
   12828:	ldrb	r2, [r4]
   1282c:	movw	r3, #35656	; 0x8b48
   12830:	movt	r3, #1
   12834:	movw	r4, #35660	; 0x8b4c
   12838:	movt	r4, #1
   1283c:	cmp	r2, #96	; 0x60
   12840:	movne	r4, r3
   12844:	b	1273c <__assert_fail@plt+0x183c>
   12848:	movw	r3, #35668	; 0x8b54
   1284c:	movt	r3, #1
   12850:	cmp	r6, #9
   12854:	movw	r4, #35648	; 0x8b40
   12858:	movt	r4, #1
   1285c:	movne	r4, r3
   12860:	b	1273c <__assert_fail@plt+0x183c>
   12864:	strd	r4, [sp, #-36]!	; 0xffffffdc
   12868:	strd	r6, [sp, #8]
   1286c:	strd	r8, [sp, #16]
   12870:	mov	r8, r3
   12874:	strd	sl, [sp, #24]
   12878:	mov	fp, r0
   1287c:	mov	sl, r1
   12880:	str	lr, [sp, #32]
   12884:	sub	sp, sp, #140	; 0x8c
   12888:	ldr	r3, [sp, #180]	; 0xb4
   1288c:	str	r2, [sp, #28]
   12890:	and	r4, r3, #2
   12894:	ubfx	r3, r3, #1, #1
   12898:	str	r3, [sp, #44]	; 0x2c
   1289c:	bl	10d80 <__ctype_get_mb_cur_max@plt>
   128a0:	ldr	r3, [sp, #176]	; 0xb0
   128a4:	str	r0, [sp, #76]	; 0x4c
   128a8:	cmp	r3, #10
   128ac:	ldrls	pc, [pc, r3, lsl #2]
   128b0:	b	1424c <__assert_fail@plt+0x334c>
   128b4:	andeq	r2, r1, r4, lsr sp
   128b8:	andeq	r2, r1, r0, asr lr
   128bc:	andeq	r3, r1, ip, asr #7
   128c0:			; <UNDEFINED> instruction: 0x00012ebc
   128c4:	andeq	r2, r1, ip, lsr ip
   128c8:			; <UNDEFINED> instruction: 0x00012cb8
   128cc:	muleq	r1, r0, sp
   128d0:	strdeq	r2, [r1], -r8
   128d4:	andeq	r2, r1, r0, ror #17
   128d8:	andeq	r2, r1, r0, ror #17
   128dc:	andeq	r2, r1, r0, ror #17
   128e0:	ldr	r3, [sp, #176]	; 0xb0
   128e4:	cmp	r3, #10
   128e8:	beq	12914 <__assert_fail@plt+0x1a14>
   128ec:	mov	r1, r3
   128f0:	movw	r0, #35672	; 0x8b58
   128f4:	movt	r0, #1
   128f8:	bl	1270c <__assert_fail@plt+0x180c>
   128fc:	str	r0, [sp, #188]	; 0xbc
   12900:	movw	r0, #35668	; 0x8b54
   12904:	movt	r0, #1
   12908:	ldr	r1, [sp, #176]	; 0xb0
   1290c:	bl	1270c <__assert_fail@plt+0x180c>
   12910:	str	r0, [sp, #192]	; 0xc0
   12914:	cmp	r4, #0
   12918:	movne	r4, #0
   1291c:	beq	13fd8 <__assert_fail@plt+0x30d8>
   12920:	mov	r5, #0
   12924:	ldr	r0, [sp, #192]	; 0xc0
   12928:	mov	r9, r5
   1292c:	str	r5, [sp, #64]	; 0x40
   12930:	bl	10e04 <strlen@plt>
   12934:	mov	r3, #1
   12938:	ldr	r2, [sp, #44]	; 0x2c
   1293c:	cmp	r0, r5
   12940:	moveq	r2, r5
   12944:	str	r3, [sp, #32]
   12948:	str	r3, [sp, #48]	; 0x30
   1294c:	str	r5, [sp, #52]	; 0x34
   12950:	str	r3, [sp, #60]	; 0x3c
   12954:	ldr	r3, [sp, #180]	; 0xb4
   12958:	str	r0, [sp, #56]	; 0x38
   1295c:	str	r5, [sp, #68]	; 0x44
   12960:	str	r5, [sp, #80]	; 0x50
   12964:	str	r5, [sp, #84]	; 0x54
   12968:	and	r3, r3, #1
   1296c:	str	r2, [sp, #88]	; 0x58
   12970:	str	r3, [sp, #92]	; 0x5c
   12974:	ldr	r3, [sp, #180]	; 0xb4
   12978:	and	r3, r3, #4
   1297c:	str	r3, [sp, #96]	; 0x60
   12980:	ldr	r3, [sp, #192]	; 0xc0
   12984:	str	r3, [sp, #72]	; 0x48
   12988:	mov	r3, fp
   1298c:	mov	r7, #0
   12990:	mov	fp, r9
   12994:	mov	r9, r3
   12998:	cmn	r8, #1
   1299c:	beq	12fa0 <__assert_fail@plt+0x20a0>
   129a0:	subs	r6, r8, r7
   129a4:	movne	r6, #1
   129a8:	cmp	r6, #0
   129ac:	beq	12fb8 <__assert_fail@plt+0x20b8>
   129b0:	ldr	r0, [sp, #28]
   129b4:	ldr	r3, [sp, #48]	; 0x30
   129b8:	cmp	r3, #0
   129bc:	add	r3, r0, r7
   129c0:	str	r3, [sp, #36]	; 0x24
   129c4:	beq	13444 <__assert_fail@plt+0x2544>
   129c8:	ldr	r2, [sp, #56]	; 0x38
   129cc:	cmp	r2, #0
   129d0:	beq	13944 <__assert_fail@plt+0x2a44>
   129d4:	cmp	r2, #1
   129d8:	mov	r3, r2
   129dc:	movls	r3, #0
   129e0:	movhi	r3, #1
   129e4:	cmn	r8, #1
   129e8:	add	r5, r7, r2
   129ec:	movne	r3, #0
   129f0:	cmp	r3, #0
   129f4:	beq	12a00 <__assert_fail@plt+0x1b00>
   129f8:	bl	10e04 <strlen@plt>
   129fc:	mov	r8, r0
   12a00:	cmp	r5, r8
   12a04:	bhi	13944 <__assert_fail@plt+0x2a44>
   12a08:	ldr	r0, [sp, #36]	; 0x24
   12a0c:	ldr	r2, [sp, #56]	; 0x38
   12a10:	ldr	r1, [sp, #72]	; 0x48
   12a14:	bl	10d20 <memcmp@plt>
   12a18:	cmp	r0, #0
   12a1c:	bne	13944 <__assert_fail@plt+0x2a44>
   12a20:	ldr	r3, [sp, #44]	; 0x2c
   12a24:	cmp	r3, #0
   12a28:	bne	140f0 <__assert_fail@plt+0x31f0>
   12a2c:	ldr	r3, [sp, #36]	; 0x24
   12a30:	ldrb	r5, [r3]
   12a34:	cmp	r5, #126	; 0x7e
   12a38:	ldrls	pc, [pc, r5, lsl #2]
   12a3c:	b	13ed8 <__assert_fail@plt+0x2fd8>
   12a40:	andeq	r3, r1, r4, lsl r1
   12a44:	ldrdeq	r3, [r1], -r8
   12a48:	ldrdeq	r3, [r1], -r8
   12a4c:	ldrdeq	r3, [r1], -r8
   12a50:	ldrdeq	r3, [r1], -r8
   12a54:	ldrdeq	r3, [r1], -r8
   12a58:	ldrdeq	r3, [r1], -r8
   12a5c:	andeq	r3, r1, ip, rrx
   12a60:	andeq	r3, r1, r4, rrx
   12a64:	andeq	r3, r1, r4, ror r0
   12a68:	strdeq	r3, [r1], -r8
   12a6c:	andeq	r3, r1, r8, ror #3
   12a70:	andeq	r2, r1, r0, lsl pc
   12a74:	andeq	r3, r1, r4, asr #3
   12a78:	ldrdeq	r3, [r1], -r8
   12a7c:	ldrdeq	r3, [r1], -r8
   12a80:	ldrdeq	r3, [r1], -r8
   12a84:	ldrdeq	r3, [r1], -r8
   12a88:	ldrdeq	r3, [r1], -r8
   12a8c:	ldrdeq	r3, [r1], -r8
   12a90:	ldrdeq	r3, [r1], -r8
   12a94:	ldrdeq	r3, [r1], -r8
   12a98:	ldrdeq	r3, [r1], -r8
   12a9c:	ldrdeq	r3, [r1], -r8
   12aa0:	ldrdeq	r3, [r1], -r8
   12aa4:	ldrdeq	r3, [r1], -r8
   12aa8:	ldrdeq	r3, [r1], -r8
   12aac:	ldrdeq	r3, [r1], -r8
   12ab0:	ldrdeq	r3, [r1], -r8
   12ab4:	ldrdeq	r3, [r1], -r8
   12ab8:	ldrdeq	r3, [r1], -r8
   12abc:	ldrdeq	r3, [r1], -r8
   12ac0:	andeq	r3, r1, r0, ror r2
   12ac4:	andeq	r3, r1, r4, ror #4
   12ac8:	andeq	r3, r1, r4, ror #4
   12acc:	andeq	r3, r1, r8, asr r2
   12ad0:	andeq	r3, r1, r4, ror #4
   12ad4:	andeq	r3, r1, ip, lsr r3
   12ad8:	andeq	r3, r1, r4, ror #4
   12adc:	andeq	r3, r1, ip, lsr #7
   12ae0:	andeq	r3, r1, r4, ror #4
   12ae4:	andeq	r3, r1, r4, ror #4
   12ae8:	andeq	r3, r1, r4, ror #4
   12aec:	andeq	r3, r1, ip, lsr r3
   12af0:	andeq	r3, r1, ip, lsr r3
   12af4:	andeq	r3, r1, ip, lsr r3
   12af8:	andeq	r3, r1, ip, lsr r3
   12afc:	andeq	r3, r1, ip, lsr r3
   12b00:	andeq	r3, r1, ip, lsr r3
   12b04:	andeq	r3, r1, ip, lsr r3
   12b08:	andeq	r3, r1, ip, lsr r3
   12b0c:	andeq	r3, r1, ip, lsr r3
   12b10:	andeq	r3, r1, ip, lsr r3
   12b14:	andeq	r3, r1, ip, lsr r3
   12b18:	andeq	r3, r1, ip, lsr r3
   12b1c:	andeq	r3, r1, ip, lsr r3
   12b20:	andeq	r3, r1, ip, lsr r3
   12b24:	andeq	r3, r1, ip, lsr r3
   12b28:	andeq	r3, r1, ip, lsr r3
   12b2c:	andeq	r3, r1, r4, ror #4
   12b30:	andeq	r3, r1, r4, ror #4
   12b34:	andeq	r3, r1, r4, ror #4
   12b38:	andeq	r3, r1, r4, ror #4
   12b3c:	andeq	r3, r1, ip, asr r3
   12b40:	ldrdeq	r3, [r1], -r8
   12b44:	andeq	r3, r1, ip, lsr r3
   12b48:	andeq	r3, r1, ip, lsr r3
   12b4c:	andeq	r3, r1, ip, lsr r3
   12b50:	andeq	r3, r1, ip, lsr r3
   12b54:	andeq	r3, r1, ip, lsr r3
   12b58:	andeq	r3, r1, ip, lsr r3
   12b5c:	andeq	r3, r1, ip, lsr r3
   12b60:	andeq	r3, r1, ip, lsr r3
   12b64:	andeq	r3, r1, ip, lsr r3
   12b68:	andeq	r3, r1, ip, lsr r3
   12b6c:	andeq	r3, r1, ip, lsr r3
   12b70:	andeq	r3, r1, ip, lsr r3
   12b74:	andeq	r3, r1, ip, lsr r3
   12b78:	andeq	r3, r1, ip, lsr r3
   12b7c:	andeq	r3, r1, ip, lsr r3
   12b80:	andeq	r3, r1, ip, lsr r3
   12b84:	andeq	r3, r1, ip, lsr r3
   12b88:	andeq	r3, r1, ip, lsr r3
   12b8c:	andeq	r3, r1, ip, lsr r3
   12b90:	andeq	r3, r1, ip, lsr r3
   12b94:	andeq	r3, r1, ip, lsr r3
   12b98:	andeq	r3, r1, ip, lsr r3
   12b9c:	andeq	r3, r1, ip, lsr r3
   12ba0:	andeq	r3, r1, ip, lsr r3
   12ba4:	andeq	r3, r1, ip, lsr r3
   12ba8:	andeq	r3, r1, ip, lsr r3
   12bac:	andeq	r3, r1, r4, ror #4
   12bb0:	andeq	r3, r1, r0, lsl #6
   12bb4:	andeq	r3, r1, ip, lsr r3
   12bb8:	andeq	r3, r1, r4, ror #4
   12bbc:	andeq	r3, r1, ip, lsr r3
   12bc0:	andeq	r3, r1, r4, ror #4
   12bc4:	andeq	r3, r1, ip, lsr r3
   12bc8:	andeq	r3, r1, ip, lsr r3
   12bcc:	andeq	r3, r1, ip, lsr r3
   12bd0:	andeq	r3, r1, ip, lsr r3
   12bd4:	andeq	r3, r1, ip, lsr r3
   12bd8:	andeq	r3, r1, ip, lsr r3
   12bdc:	andeq	r3, r1, ip, lsr r3
   12be0:	andeq	r3, r1, ip, lsr r3
   12be4:	andeq	r3, r1, ip, lsr r3
   12be8:	andeq	r3, r1, ip, lsr r3
   12bec:	andeq	r3, r1, ip, lsr r3
   12bf0:	andeq	r3, r1, ip, lsr r3
   12bf4:	andeq	r3, r1, ip, lsr r3
   12bf8:	andeq	r3, r1, ip, lsr r3
   12bfc:	andeq	r3, r1, ip, lsr r3
   12c00:	andeq	r3, r1, ip, lsr r3
   12c04:	andeq	r3, r1, ip, lsr r3
   12c08:	andeq	r3, r1, ip, lsr r3
   12c0c:	andeq	r3, r1, ip, lsr r3
   12c10:	andeq	r3, r1, ip, lsr r3
   12c14:	andeq	r3, r1, ip, lsr r3
   12c18:	andeq	r3, r1, ip, lsr r3
   12c1c:	andeq	r3, r1, ip, lsr r3
   12c20:	andeq	r3, r1, ip, lsr r3
   12c24:	andeq	r3, r1, ip, lsr r3
   12c28:	andeq	r3, r1, ip, lsr r3
   12c2c:	andeq	r3, r1, ip, lsl #4
   12c30:	andeq	r3, r1, r4, ror #4
   12c34:	andeq	r3, r1, ip, lsl #4
   12c38:	andeq	r3, r1, r8, asr r2
   12c3c:	ldr	r3, [sp, #180]	; 0xb4
   12c40:	cmp	r4, #0
   12c44:	and	r3, r3, #1
   12c48:	str	r3, [sp, #92]	; 0x5c
   12c4c:	ldr	r3, [sp, #180]	; 0xb4
   12c50:	and	r3, r3, #4
   12c54:	str	r3, [sp, #96]	; 0x60
   12c58:	moveq	r3, #1
   12c5c:	streq	r3, [sp, #60]	; 0x3c
   12c60:	beq	133f0 <__assert_fail@plt+0x24f0>
   12c64:	mov	r3, #0
   12c68:	mov	r2, #1
   12c6c:	mov	r4, r3
   12c70:	mov	r9, r3
   12c74:	str	r2, [sp, #32]
   12c78:	str	r2, [sp, #44]	; 0x2c
   12c7c:	str	r3, [sp, #48]	; 0x30
   12c80:	str	r2, [sp, #52]	; 0x34
   12c84:	str	r2, [sp, #56]	; 0x38
   12c88:	str	r3, [sp, #60]	; 0x3c
   12c8c:	str	r2, [sp, #64]	; 0x40
   12c90:	str	r2, [sp, #68]	; 0x44
   12c94:	str	r3, [sp, #80]	; 0x50
   12c98:	str	r3, [sp, #84]	; 0x54
   12c9c:	str	r3, [sp, #88]	; 0x58
   12ca0:	movw	r3, #35668	; 0x8b54
   12ca4:	movt	r3, #1
   12ca8:	str	r3, [sp, #72]	; 0x48
   12cac:	mov	r3, #2
   12cb0:	str	r3, [sp, #176]	; 0xb0
   12cb4:	b	12988 <__assert_fail@plt+0x1a88>
   12cb8:	ldr	r3, [sp, #180]	; 0xb4
   12cbc:	cmp	r4, #0
   12cc0:	and	r3, r3, #1
   12cc4:	str	r3, [sp, #92]	; 0x5c
   12cc8:	ldr	r3, [sp, #180]	; 0xb4
   12ccc:	and	r3, r3, #4
   12cd0:	str	r3, [sp, #96]	; 0x60
   12cd4:	bne	140a8 <__assert_fail@plt+0x31a8>
   12cd8:	cmp	sl, #0
   12cdc:	beq	13e54 <__assert_fail@plt+0x2f54>
   12ce0:	mov	r3, #34	; 0x22
   12ce4:	mov	r2, r4
   12ce8:	mov	r1, #1
   12cec:	mov	r9, r2
   12cf0:	strb	r3, [fp]
   12cf4:	movw	r3, #35648	; 0x8b40
   12cf8:	movt	r3, #1
   12cfc:	mov	r4, r1
   12d00:	str	r1, [sp, #32]
   12d04:	str	r2, [sp, #44]	; 0x2c
   12d08:	str	r1, [sp, #48]	; 0x30
   12d0c:	str	r2, [sp, #52]	; 0x34
   12d10:	str	r1, [sp, #56]	; 0x38
   12d14:	str	r1, [sp, #60]	; 0x3c
   12d18:	str	r2, [sp, #64]	; 0x40
   12d1c:	str	r2, [sp, #68]	; 0x44
   12d20:	str	r3, [sp, #72]	; 0x48
   12d24:	str	r2, [sp, #80]	; 0x50
   12d28:	str	r2, [sp, #84]	; 0x54
   12d2c:	str	r2, [sp, #88]	; 0x58
   12d30:	b	12988 <__assert_fail@plt+0x1a88>
   12d34:	mov	r3, #0
   12d38:	mov	r2, #1
   12d3c:	mov	r9, r3
   12d40:	str	r2, [sp, #32]
   12d44:	str	r3, [sp, #44]	; 0x2c
   12d48:	str	r3, [sp, #48]	; 0x30
   12d4c:	str	r3, [sp, #52]	; 0x34
   12d50:	str	r3, [sp, #60]	; 0x3c
   12d54:	strd	r2, [sp, #64]	; 0x40
   12d58:	str	r3, [sp, #72]	; 0x48
   12d5c:	str	r3, [sp, #80]	; 0x50
   12d60:	str	r3, [sp, #88]	; 0x58
   12d64:	ldr	r3, [sp, #180]	; 0xb4
   12d68:	and	r3, r3, r2
   12d6c:	str	r3, [sp, #92]	; 0x5c
   12d70:	ldr	r3, [sp, #180]	; 0xb4
   12d74:	and	r3, r3, #4
   12d78:	str	r3, [sp, #96]	; 0x60
   12d7c:	ldr	r3, [sp, #176]	; 0xb0
   12d80:	mov	r4, r3
   12d84:	str	r3, [sp, #56]	; 0x38
   12d88:	str	r3, [sp, #84]	; 0x54
   12d8c:	b	12988 <__assert_fail@plt+0x1a88>
   12d90:	mov	r3, #1
   12d94:	mov	r4, #0
   12d98:	mov	r9, r4
   12d9c:	str	r3, [sp, #32]
   12da0:	str	r3, [sp, #44]	; 0x2c
   12da4:	str	r3, [sp, #48]	; 0x30
   12da8:	str	r4, [sp, #52]	; 0x34
   12dac:	str	r3, [sp, #56]	; 0x38
   12db0:	str	r3, [sp, #60]	; 0x3c
   12db4:	str	r3, [sp, #88]	; 0x58
   12db8:	movw	r3, #35648	; 0x8b40
   12dbc:	movt	r3, #1
   12dc0:	str	r4, [sp, #64]	; 0x40
   12dc4:	str	r4, [sp, #68]	; 0x44
   12dc8:	str	r3, [sp, #72]	; 0x48
   12dcc:	ldr	r3, [sp, #180]	; 0xb4
   12dd0:	str	r4, [sp, #80]	; 0x50
   12dd4:	str	r4, [sp, #84]	; 0x54
   12dd8:	and	r3, r3, #1
   12ddc:	str	r3, [sp, #92]	; 0x5c
   12de0:	ldr	r3, [sp, #180]	; 0xb4
   12de4:	and	r3, r3, #4
   12de8:	str	r3, [sp, #96]	; 0x60
   12dec:	mov	r3, #5
   12df0:	str	r3, [sp, #176]	; 0xb0
   12df4:	b	12988 <__assert_fail@plt+0x1a88>
   12df8:	mov	r3, #1
   12dfc:	mov	r4, #0
   12e00:	mov	r9, r4
   12e04:	str	r3, [sp, #32]
   12e08:	str	r4, [sp, #44]	; 0x2c
   12e0c:	str	r3, [sp, #48]	; 0x30
   12e10:	str	r3, [sp, #60]	; 0x3c
   12e14:	ldr	r3, [sp, #180]	; 0xb4
   12e18:	str	r4, [sp, #52]	; 0x34
   12e1c:	str	r4, [sp, #56]	; 0x38
   12e20:	str	r4, [sp, #64]	; 0x40
   12e24:	str	r4, [sp, #68]	; 0x44
   12e28:	and	r3, r3, #1
   12e2c:	str	r4, [sp, #72]	; 0x48
   12e30:	str	r4, [sp, #80]	; 0x50
   12e34:	str	r4, [sp, #84]	; 0x54
   12e38:	str	r3, [sp, #92]	; 0x5c
   12e3c:	ldr	r3, [sp, #180]	; 0xb4
   12e40:	str	r4, [sp, #88]	; 0x58
   12e44:	and	r3, r3, #4
   12e48:	str	r3, [sp, #96]	; 0x60
   12e4c:	b	12988 <__assert_fail@plt+0x1a88>
   12e50:	mov	r3, #0
   12e54:	mov	r2, #1
   12e58:	ldr	r1, [sp, #176]	; 0xb0
   12e5c:	mov	r4, r3
   12e60:	mov	r9, r3
   12e64:	movw	r3, #35668	; 0x8b54
   12e68:	movt	r3, #1
   12e6c:	str	r2, [sp, #32]
   12e70:	str	r2, [sp, #44]	; 0x2c
   12e74:	str	r4, [sp, #48]	; 0x30
   12e78:	strd	r2, [sp, #68]	; 0x44
   12e7c:	ldr	r3, [sp, #180]	; 0xb4
   12e80:	str	r2, [sp, #52]	; 0x34
   12e84:	str	r1, [sp, #56]	; 0x38
   12e88:	str	r4, [sp, #60]	; 0x3c
   12e8c:	str	r2, [sp, #64]	; 0x40
   12e90:	and	r3, r3, r2
   12e94:	str	r4, [sp, #80]	; 0x50
   12e98:	str	r4, [sp, #84]	; 0x54
   12e9c:	str	r4, [sp, #88]	; 0x58
   12ea0:	str	r3, [sp, #92]	; 0x5c
   12ea4:	ldr	r3, [sp, #180]	; 0xb4
   12ea8:	and	r3, r3, #4
   12eac:	str	r3, [sp, #96]	; 0x60
   12eb0:	mov	r3, #2
   12eb4:	str	r3, [sp, #176]	; 0xb0
   12eb8:	b	12988 <__assert_fail@plt+0x1a88>
   12ebc:	mov	r3, #1
   12ec0:	mov	r2, #0
   12ec4:	mov	r4, r2
   12ec8:	mov	r9, r2
   12ecc:	str	r3, [sp, #32]
   12ed0:	str	r3, [sp, #44]	; 0x2c
   12ed4:	str	r2, [sp, #48]	; 0x30
   12ed8:	str	r3, [sp, #52]	; 0x34
   12edc:	str	r3, [sp, #56]	; 0x38
   12ee0:	str	r3, [sp, #60]	; 0x3c
   12ee4:	str	r3, [sp, #64]	; 0x40
   12ee8:	str	r3, [sp, #68]	; 0x44
   12eec:	str	r3, [sp, #88]	; 0x58
   12ef0:	movw	r3, #35668	; 0x8b54
   12ef4:	movt	r3, #1
   12ef8:	str	r3, [sp, #72]	; 0x48
   12efc:	ldr	r3, [sp, #180]	; 0xb4
   12f00:	str	r2, [sp, #80]	; 0x50
   12f04:	str	r2, [sp, #84]	; 0x54
   12f08:	and	r3, r3, #1
   12f0c:	b	12ea0 <__assert_fail@plt+0x1fa0>
   12f10:	mov	r5, #102	; 0x66
   12f14:	mov	r6, #0
   12f18:	ldr	r3, [sp, #44]	; 0x2c
   12f1c:	cmp	r3, #0
   12f20:	bne	13dd0 <__assert_fail@plt+0x2ed0>
   12f24:	ldr	r2, [sp, #52]	; 0x34
   12f28:	eor	r3, fp, #1
   12f2c:	ands	r3, r2, r3
   12f30:	beq	12f68 <__assert_fail@plt+0x2068>
   12f34:	cmp	sl, r4
   12f38:	mov	fp, r3
   12f3c:	movhi	r2, #39	; 0x27
   12f40:	strbhi	r2, [r9, r4]
   12f44:	add	r2, r4, #1
   12f48:	cmp	sl, r2
   12f4c:	movhi	r1, #36	; 0x24
   12f50:	strbhi	r1, [r9, r2]
   12f54:	add	r2, r4, #2
   12f58:	add	r4, r4, #3
   12f5c:	cmp	sl, r2
   12f60:	movhi	r1, #39	; 0x27
   12f64:	strbhi	r1, [r9, r2]
   12f68:	cmp	sl, r4
   12f6c:	add	r7, r7, #1
   12f70:	movhi	r3, #92	; 0x5c
   12f74:	strbhi	r3, [r9, r4]
   12f78:	add	r4, r4, #1
   12f7c:	cmp	r4, sl
   12f80:	ldr	r3, [sp, #32]
   12f84:	strbcc	r5, [r9, r4]
   12f88:	cmp	r6, #0
   12f8c:	add	r4, r4, #1
   12f90:	moveq	r3, #0
   12f94:	cmn	r8, #1
   12f98:	str	r3, [sp, #32]
   12f9c:	bne	129a0 <__assert_fail@plt+0x1aa0>
   12fa0:	ldr	r3, [sp, #28]
   12fa4:	ldrb	r6, [r3, r7]
   12fa8:	adds	r6, r6, #0
   12fac:	movne	r6, #1
   12fb0:	cmp	r6, #0
   12fb4:	bne	129b0 <__assert_fail@plt+0x1ab0>
   12fb8:	mov	r3, r9
   12fbc:	mov	r9, fp
   12fc0:	mov	fp, r3
   12fc4:	ldr	r3, [sp, #68]	; 0x44
   12fc8:	cmp	r4, #0
   12fcc:	movne	r3, #0
   12fd0:	cmp	r3, #0
   12fd4:	bne	141c8 <__assert_fail@plt+0x32c8>
   12fd8:	ldr	r3, [sp, #44]	; 0x2c
   12fdc:	ldr	r2, [sp, #52]	; 0x34
   12fe0:	eor	r3, r3, #1
   12fe4:	ands	r2, r3, r2
   12fe8:	beq	14100 <__assert_fail@plt+0x3200>
   12fec:	ldr	r3, [sp, #80]	; 0x50
   12ff0:	cmp	r3, #0
   12ff4:	beq	14104 <__assert_fail@plt+0x3204>
   12ff8:	ldr	r3, [sp, #32]
   12ffc:	cmp	r3, #0
   13000:	bne	14178 <__assert_fail@plt+0x3278>
   13004:	ldr	r3, [sp, #84]	; 0x54
   13008:	adds	r3, r3, #0
   1300c:	movne	r3, #1
   13010:	cmp	sl, #0
   13014:	movne	r3, #0
   13018:	cmp	r3, #0
   1301c:	ldreq	r2, [sp, #80]	; 0x50
   13020:	beq	14104 <__assert_fail@plt+0x3204>
   13024:	ldr	r2, [sp, #84]	; 0x54
   13028:	mov	sl, r2
   1302c:	mov	r0, #0
   13030:	mov	r4, #1
   13034:	mov	r1, #39	; 0x27
   13038:	str	r0, [sp, #44]	; 0x2c
   1303c:	strb	r1, [fp]
   13040:	str	r0, [sp, #48]	; 0x30
   13044:	str	r4, [sp, #52]	; 0x34
   13048:	str	r4, [sp, #56]	; 0x38
   1304c:	str	r4, [sp, #64]	; 0x40
   13050:	str	r0, [sp, #68]	; 0x44
   13054:	str	r3, [sp, #80]	; 0x50
   13058:	str	r2, [sp, #84]	; 0x54
   1305c:	str	r0, [sp, #88]	; 0x58
   13060:	b	12ca0 <__assert_fail@plt+0x1da0>
   13064:	mov	r5, #98	; 0x62
   13068:	b	12f14 <__assert_fail@plt+0x2014>
   1306c:	mov	r5, #97	; 0x61
   13070:	b	12f14 <__assert_fail@plt+0x2014>
   13074:	ldr	r3, [sp, #48]	; 0x30
   13078:	str	r3, [sp, #40]	; 0x28
   1307c:	mov	r3, #116	; 0x74
   13080:	ldr	r2, [sp, #68]	; 0x44
   13084:	cmp	r2, #0
   13088:	bne	13284 <__assert_fail@plt+0x2384>
   1308c:	ldr	r2, [sp, #60]	; 0x3c
   13090:	cmp	r2, #0
   13094:	bne	131e0 <__assert_fail@plt+0x22e0>
   13098:	ldr	r3, [sp, #44]	; 0x2c
   1309c:	mov	r6, #0
   130a0:	cmp	r3, #0
   130a4:	beq	13250 <__assert_fail@plt+0x2350>
   130a8:	mov	r3, fp
   130ac:	ldr	r2, [sp, #184]	; 0xb8
   130b0:	cmp	r2, #0
   130b4:	beq	130d4 <__assert_fail@plt+0x21d4>
   130b8:	ubfx	r1, r5, #5, #8
   130bc:	mov	r0, r2
   130c0:	and	r2, r5, #31
   130c4:	ldr	r1, [r0, r1, lsl #2]
   130c8:	lsr	r2, r1, r2
   130cc:	tst	r2, #1
   130d0:	bne	12f18 <__assert_fail@plt+0x2018>
   130d4:	ldr	r2, [sp, #40]	; 0x28
   130d8:	cmp	r2, #0
   130dc:	addeq	r7, r7, #1
   130e0:	bne	12f18 <__assert_fail@plt+0x2018>
   130e4:	cmp	r3, #0
   130e8:	beq	12f7c <__assert_fail@plt+0x207c>
   130ec:	cmp	sl, r4
   130f0:	mov	fp, #0
   130f4:	movhi	r3, #39	; 0x27
   130f8:	strbhi	r3, [r9, r4]
   130fc:	add	r3, r4, #1
   13100:	add	r4, r4, #2
   13104:	cmp	sl, r3
   13108:	movhi	r2, #39	; 0x27
   1310c:	strbhi	r2, [r9, r3]
   13110:	b	12f7c <__assert_fail@plt+0x207c>
   13114:	ldr	r3, [sp, #48]	; 0x30
   13118:	str	r3, [sp, #40]	; 0x28
   1311c:	eor	r3, fp, #1
   13120:	ldr	r2, [sp, #52]	; 0x34
   13124:	ands	r2, r2, r3
   13128:	beq	13de8 <__assert_fail@plt+0x2ee8>
   1312c:	cmp	sl, r4
   13130:	movhi	r3, #39	; 0x27
   13134:	strbhi	r3, [r9, r4]
   13138:	add	r3, r4, #1
   1313c:	cmp	sl, r3
   13140:	movhi	r1, #36	; 0x24
   13144:	strbhi	r1, [r9, r3]
   13148:	add	r3, r4, #2
   1314c:	cmp	sl, r3
   13150:	movhi	r1, #39	; 0x27
   13154:	strbhi	r1, [r9, r3]
   13158:	add	r3, r4, #3
   1315c:	cmp	sl, r3
   13160:	bls	13e34 <__assert_fail@plt+0x2f34>
   13164:	mov	r4, r3
   13168:	mov	r3, #92	; 0x5c
   1316c:	mov	fp, r2
   13170:	mov	r2, r4
   13174:	strb	r3, [r9, r4]
   13178:	ldr	r3, [sp, #176]	; 0xb0
   1317c:	add	r4, r4, #1
   13180:	cmp	r3, #2
   13184:	beq	13e9c <__assert_fail@plt+0x2f9c>
   13188:	add	r3, r7, #1
   1318c:	cmp	r3, r8
   13190:	bcs	131a8 <__assert_fail@plt+0x22a8>
   13194:	ldr	r1, [sp, #28]
   13198:	ldrb	r3, [r1, r3]
   1319c:	sub	r3, r3, #48	; 0x30
   131a0:	cmp	r3, #9
   131a4:	bls	13eac <__assert_fail@plt+0x2fac>
   131a8:	mov	r3, #0
   131ac:	mov	r5, #48	; 0x30
   131b0:	ldr	r6, [sp, #64]	; 0x40
   131b4:	cmp	r6, #0
   131b8:	beq	130ac <__assert_fail@plt+0x21ac>
   131bc:	mov	r6, #0
   131c0:	b	130d4 <__assert_fail@plt+0x21d4>
   131c4:	ldr	r3, [sp, #48]	; 0x30
   131c8:	str	r3, [sp, #40]	; 0x28
   131cc:	ldr	r2, [sp, #60]	; 0x3c
   131d0:	mov	r5, #13
   131d4:	mov	r3, #114	; 0x72
   131d8:	cmp	r2, #0
   131dc:	beq	13098 <__assert_fail@plt+0x2198>
   131e0:	mov	r5, r3
   131e4:	b	12f14 <__assert_fail@plt+0x2014>
   131e8:	ldr	r3, [sp, #48]	; 0x30
   131ec:	str	r3, [sp, #40]	; 0x28
   131f0:	mov	r3, #118	; 0x76
   131f4:	b	1308c <__assert_fail@plt+0x218c>
   131f8:	ldr	r3, [sp, #48]	; 0x30
   131fc:	str	r3, [sp, #40]	; 0x28
   13200:	mov	r5, #10
   13204:	mov	r3, #110	; 0x6e
   13208:	b	1308c <__assert_fail@plt+0x218c>
   1320c:	ldr	r3, [sp, #48]	; 0x30
   13210:	cmn	r8, #1
   13214:	str	r3, [sp, #40]	; 0x28
   13218:	beq	13660 <__assert_fail@plt+0x2760>
   1321c:	subs	r3, r8, #1
   13220:	movne	r3, #1
   13224:	cmp	r3, #0
   13228:	bne	13234 <__assert_fail@plt+0x2334>
   1322c:	cmp	r7, #0
   13230:	beq	13278 <__assert_fail@plt+0x2378>
   13234:	mov	r6, #0
   13238:	ldr	r3, [sp, #64]	; 0x40
   1323c:	cmp	r3, #0
   13240:	beq	130a8 <__assert_fail@plt+0x21a8>
   13244:	ldr	r3, [sp, #44]	; 0x2c
   13248:	cmp	r3, #0
   1324c:	bne	130a8 <__assert_fail@plt+0x21a8>
   13250:	mov	r3, fp
   13254:	b	130d4 <__assert_fail@plt+0x21d4>
   13258:	ldr	r3, [sp, #48]	; 0x30
   1325c:	str	r3, [sp, #40]	; 0x28
   13260:	b	1322c <__assert_fail@plt+0x232c>
   13264:	ldr	r3, [sp, #48]	; 0x30
   13268:	str	r3, [sp, #40]	; 0x28
   1326c:	b	13234 <__assert_fail@plt+0x2334>
   13270:	ldr	r6, [sp, #48]	; 0x30
   13274:	str	r6, [sp, #40]	; 0x28
   13278:	ldr	r3, [sp, #68]	; 0x44
   1327c:	cmp	r3, #0
   13280:	beq	13238 <__assert_fail@plt+0x2338>
   13284:	mov	r3, #2
   13288:	mov	fp, r9
   1328c:	str	r3, [sp, #176]	; 0xb0
   13290:	ldr	r3, [sp, #60]	; 0x3c
   13294:	cmp	r3, #0
   13298:	ldr	r3, [sp, #176]	; 0xb0
   1329c:	movne	r3, #4
   132a0:	str	r3, [sp, #176]	; 0xb0
   132a4:	mov	lr, #0
   132a8:	mov	r0, fp
   132ac:	ldr	r2, [sp, #28]
   132b0:	ldr	r3, [sp, #180]	; 0xb4
   132b4:	ldr	r1, [sp, #188]	; 0xbc
   132b8:	bic	ip, r3, #2
   132bc:	ldr	r3, [sp, #176]	; 0xb0
   132c0:	stm	sp, {r3, ip, lr}
   132c4:	mov	r3, r8
   132c8:	ldr	ip, [sp, #192]	; 0xc0
   132cc:	str	r1, [sp, #12]
   132d0:	mov	r1, sl
   132d4:	str	ip, [sp, #16]
   132d8:	bl	12864 <__assert_fail@plt+0x1964>
   132dc:	mov	r4, r0
   132e0:	mov	r0, r4
   132e4:	add	sp, sp, #140	; 0x8c
   132e8:	ldrd	r4, [sp]
   132ec:	ldrd	r6, [sp, #8]
   132f0:	ldrd	r8, [sp, #16]
   132f4:	ldrd	sl, [sp, #24]
   132f8:	add	sp, sp, #32
   132fc:	pop	{pc}		; (ldr pc, [sp], #4)
   13300:	ldr	r3, [sp, #48]	; 0x30
   13304:	str	r3, [sp, #40]	; 0x28
   13308:	ldr	r3, [sp, #176]	; 0xb0
   1330c:	cmp	r3, #2
   13310:	beq	13688 <__assert_fail@plt+0x2788>
   13314:	ldr	r3, [sp, #88]	; 0x58
   13318:	cmp	r3, #0
   1331c:	moveq	r5, #92	; 0x5c
   13320:	moveq	r3, r5
   13324:	beq	1308c <__assert_fail@plt+0x218c>
   13328:	add	r7, r7, #1
   1332c:	mov	r3, fp
   13330:	mov	r6, #0
   13334:	mov	r5, #92	; 0x5c
   13338:	b	130e4 <__assert_fail@plt+0x21e4>
   1333c:	ldr	r3, [sp, #64]	; 0x40
   13340:	cmp	r3, #0
   13344:	bne	141bc <__assert_fail@plt+0x32bc>
   13348:	ldr	r2, [sp, #48]	; 0x30
   1334c:	mov	r3, fp
   13350:	mov	r6, r2
   13354:	str	r2, [sp, #40]	; 0x28
   13358:	b	130ac <__assert_fail@plt+0x21ac>
   1335c:	ldr	r3, [sp, #176]	; 0xb0
   13360:	cmp	r3, #2
   13364:	beq	140f8 <__assert_fail@plt+0x31f8>
   13368:	cmp	r3, #5
   1336c:	ldr	r3, [sp, #48]	; 0x30
   13370:	str	r3, [sp, #40]	; 0x28
   13374:	bne	133a0 <__assert_fail@plt+0x24a0>
   13378:	ldr	r3, [sp, #96]	; 0x60
   1337c:	cmp	r3, #0
   13380:	beq	13dfc <__assert_fail@plt+0x2efc>
   13384:	add	r3, r7, #2
   13388:	cmp	r3, r8
   1338c:	bcs	133a0 <__assert_fail@plt+0x24a0>
   13390:	ldr	r2, [sp, #36]	; 0x24
   13394:	ldrb	r5, [r2, #1]
   13398:	cmp	r5, #63	; 0x3f
   1339c:	beq	13ee4 <__assert_fail@plt+0x2fe4>
   133a0:	mov	r6, #0
   133a4:	mov	r5, #63	; 0x3f
   133a8:	b	13238 <__assert_fail@plt+0x2338>
   133ac:	ldr	r3, [sp, #176]	; 0xb0
   133b0:	cmp	r3, #2
   133b4:	ldr	r3, [sp, #48]	; 0x30
   133b8:	beq	13ba0 <__assert_fail@plt+0x2ca0>
   133bc:	mov	r5, #39	; 0x27
   133c0:	str	r3, [sp, #40]	; 0x28
   133c4:	str	r6, [sp, #80]	; 0x50
   133c8:	b	13238 <__assert_fail@plt+0x2338>
   133cc:	ldr	r3, [sp, #180]	; 0xb4
   133d0:	cmp	r4, #0
   133d4:	and	r3, r3, #1
   133d8:	str	r3, [sp, #92]	; 0x5c
   133dc:	ldr	r3, [sp, #180]	; 0xb4
   133e0:	and	r3, r3, #4
   133e4:	str	r3, [sp, #96]	; 0x60
   133e8:	bne	14208 <__assert_fail@plt+0x3308>
   133ec:	str	r4, [sp, #60]	; 0x3c
   133f0:	cmp	sl, #0
   133f4:	bne	141ec <__assert_fail@plt+0x32ec>
   133f8:	mov	r3, #1
   133fc:	movw	r2, #35668	; 0x8b54
   13400:	movt	r2, #1
   13404:	mov	r4, r3
   13408:	mov	r3, #2
   1340c:	mov	r9, sl
   13410:	str	r4, [sp, #32]
   13414:	str	sl, [sp, #44]	; 0x2c
   13418:	str	sl, [sp, #48]	; 0x30
   1341c:	str	r4, [sp, #52]	; 0x34
   13420:	str	r4, [sp, #56]	; 0x38
   13424:	str	r4, [sp, #64]	; 0x40
   13428:	str	sl, [sp, #68]	; 0x44
   1342c:	str	r2, [sp, #72]	; 0x48
   13430:	str	sl, [sp, #80]	; 0x50
   13434:	str	sl, [sp, #84]	; 0x54
   13438:	str	sl, [sp, #88]	; 0x58
   1343c:	str	r3, [sp, #176]	; 0xb0
   13440:	b	12988 <__assert_fail@plt+0x1a88>
   13444:	ldrb	r5, [r0, r7]
   13448:	cmp	r5, #126	; 0x7e
   1344c:	ldrls	pc, [pc, r5, lsl #2]
   13450:	b	137b4 <__assert_fail@plt+0x28b4>
   13454:	andeq	r3, r1, r0, lsl #15
   13458:			; <UNDEFINED> instruction: 0x000137b4
   1345c:			; <UNDEFINED> instruction: 0x000137b4
   13460:			; <UNDEFINED> instruction: 0x000137b4
   13464:			; <UNDEFINED> instruction: 0x000137b4
   13468:			; <UNDEFINED> instruction: 0x000137b4
   1346c:			; <UNDEFINED> instruction: 0x000137b4
   13470:	andeq	r3, r1, r0, ror r7
   13474:	andeq	r3, r1, r0, ror #14
   13478:	andeq	r3, r1, r4, ror #13
   1347c:	andeq	r3, r1, r0, asr r7
   13480:	andeq	r3, r1, r4, asr #13
   13484:	andeq	r3, r1, r4, lsr #15
   13488:	andeq	r3, r1, r0, lsr r7
   1348c:			; <UNDEFINED> instruction: 0x000137b4
   13490:			; <UNDEFINED> instruction: 0x000137b4
   13494:			; <UNDEFINED> instruction: 0x000137b4
   13498:			; <UNDEFINED> instruction: 0x000137b4
   1349c:			; <UNDEFINED> instruction: 0x000137b4
   134a0:			; <UNDEFINED> instruction: 0x000137b4
   134a4:			; <UNDEFINED> instruction: 0x000137b4
   134a8:			; <UNDEFINED> instruction: 0x000137b4
   134ac:			; <UNDEFINED> instruction: 0x000137b4
   134b0:			; <UNDEFINED> instruction: 0x000137b4
   134b4:			; <UNDEFINED> instruction: 0x000137b4
   134b8:			; <UNDEFINED> instruction: 0x000137b4
   134bc:			; <UNDEFINED> instruction: 0x000137b4
   134c0:			; <UNDEFINED> instruction: 0x000137b4
   134c4:			; <UNDEFINED> instruction: 0x000137b4
   134c8:			; <UNDEFINED> instruction: 0x000137b4
   134cc:			; <UNDEFINED> instruction: 0x000137b4
   134d0:			; <UNDEFINED> instruction: 0x000137b4
   134d4:	ldrdeq	r3, [r1], -r8
   134d8:	andeq	r3, r1, r0, asr #14
   134dc:	andeq	r3, r1, r0, asr #14
   134e0:			; <UNDEFINED> instruction: 0x000136b8
   134e4:	andeq	r3, r1, r0, asr #14
   134e8:	andeq	r3, r1, ip, lsr #13
   134ec:	andeq	r3, r1, r0, asr #14
   134f0:	andeq	r3, r1, ip, lsl r7
   134f4:	andeq	r3, r1, r0, asr #14
   134f8:	andeq	r3, r1, r0, asr #14
   134fc:	andeq	r3, r1, r0, asr #14
   13500:	andeq	r3, r1, ip, lsr #13
   13504:	andeq	r3, r1, ip, lsr #13
   13508:	andeq	r3, r1, ip, lsr #13
   1350c:	andeq	r3, r1, ip, lsr #13
   13510:	andeq	r3, r1, ip, lsr #13
   13514:	andeq	r3, r1, ip, lsr #13
   13518:	andeq	r3, r1, ip, lsr #13
   1351c:	andeq	r3, r1, ip, lsr #13
   13520:	andeq	r3, r1, ip, lsr #13
   13524:	andeq	r3, r1, ip, lsr #13
   13528:	andeq	r3, r1, ip, lsr #13
   1352c:	andeq	r3, r1, ip, lsr #13
   13530:	andeq	r3, r1, ip, lsr #13
   13534:	andeq	r3, r1, ip, lsr #13
   13538:	andeq	r3, r1, ip, lsr #13
   1353c:	andeq	r3, r1, ip, lsr #13
   13540:	andeq	r3, r1, r0, asr #14
   13544:	andeq	r3, r1, r0, asr #14
   13548:	andeq	r3, r1, r0, asr #14
   1354c:	andeq	r3, r1, r0, asr #14
   13550:	strdeq	r3, [r1], -r4
   13554:			; <UNDEFINED> instruction: 0x000137b4
   13558:	andeq	r3, r1, ip, lsr #13
   1355c:	andeq	r3, r1, ip, lsr #13
   13560:	andeq	r3, r1, ip, lsr #13
   13564:	andeq	r3, r1, ip, lsr #13
   13568:	andeq	r3, r1, ip, lsr #13
   1356c:	andeq	r3, r1, ip, lsr #13
   13570:	andeq	r3, r1, ip, lsr #13
   13574:	andeq	r3, r1, ip, lsr #13
   13578:	andeq	r3, r1, ip, lsr #13
   1357c:	andeq	r3, r1, ip, lsr #13
   13580:	andeq	r3, r1, ip, lsr #13
   13584:	andeq	r3, r1, ip, lsr #13
   13588:	andeq	r3, r1, ip, lsr #13
   1358c:	andeq	r3, r1, ip, lsr #13
   13590:	andeq	r3, r1, ip, lsr #13
   13594:	andeq	r3, r1, ip, lsr #13
   13598:	andeq	r3, r1, ip, lsr #13
   1359c:	andeq	r3, r1, ip, lsr #13
   135a0:	andeq	r3, r1, ip, lsr #13
   135a4:	andeq	r3, r1, ip, lsr #13
   135a8:	andeq	r3, r1, ip, lsr #13
   135ac:	andeq	r3, r1, ip, lsr #13
   135b0:	andeq	r3, r1, ip, lsr #13
   135b4:	andeq	r3, r1, ip, lsr #13
   135b8:	andeq	r3, r1, ip, lsr #13
   135bc:	andeq	r3, r1, ip, lsr #13
   135c0:	andeq	r3, r1, r0, asr #14
   135c4:	andeq	r3, r1, r4, ror r6
   135c8:	andeq	r3, r1, ip, lsr #13
   135cc:	andeq	r3, r1, r0, asr #14
   135d0:	andeq	r3, r1, ip, lsr #13
   135d4:	andeq	r3, r1, r0, asr #14
   135d8:	andeq	r3, r1, ip, lsr #13
   135dc:	andeq	r3, r1, ip, lsr #13
   135e0:	andeq	r3, r1, ip, lsr #13
   135e4:	andeq	r3, r1, ip, lsr #13
   135e8:	andeq	r3, r1, ip, lsr #13
   135ec:	andeq	r3, r1, ip, lsr #13
   135f0:	andeq	r3, r1, ip, lsr #13
   135f4:	andeq	r3, r1, ip, lsr #13
   135f8:	andeq	r3, r1, ip, lsr #13
   135fc:	andeq	r3, r1, ip, lsr #13
   13600:	andeq	r3, r1, ip, lsr #13
   13604:	andeq	r3, r1, ip, lsr #13
   13608:	andeq	r3, r1, ip, lsr #13
   1360c:	andeq	r3, r1, ip, lsr #13
   13610:	andeq	r3, r1, ip, lsr #13
   13614:	andeq	r3, r1, ip, lsr #13
   13618:	andeq	r3, r1, ip, lsr #13
   1361c:	andeq	r3, r1, ip, lsr #13
   13620:	andeq	r3, r1, ip, lsr #13
   13624:	andeq	r3, r1, ip, lsr #13
   13628:	andeq	r3, r1, ip, lsr #13
   1362c:	andeq	r3, r1, ip, lsr #13
   13630:	andeq	r3, r1, ip, lsr #13
   13634:	andeq	r3, r1, ip, lsr #13
   13638:	andeq	r3, r1, ip, lsr #13
   1363c:	andeq	r3, r1, ip, lsr #13
   13640:	andeq	r3, r1, r0, asr r6
   13644:	andeq	r3, r1, r0, asr #14
   13648:	andeq	r3, r1, r0, asr r6
   1364c:			; <UNDEFINED> instruction: 0x000136b8
   13650:	mov	r3, #0
   13654:	cmn	r8, #1
   13658:	str	r3, [sp, #40]	; 0x28
   1365c:	bne	1321c <__assert_fail@plt+0x231c>
   13660:	ldr	r3, [sp, #28]
   13664:	ldrb	r3, [r3, #1]
   13668:	adds	r3, r3, #0
   1366c:	movne	r3, #1
   13670:	b	13224 <__assert_fail@plt+0x2324>
   13674:	mov	r3, #0
   13678:	str	r3, [sp, #40]	; 0x28
   1367c:	ldr	r3, [sp, #176]	; 0xb0
   13680:	cmp	r3, #2
   13684:	bne	13314 <__assert_fail@plt+0x2414>
   13688:	ldr	r3, [sp, #44]	; 0x2c
   1368c:	cmp	r3, #0
   13690:	bne	13fd0 <__assert_fail@plt+0x30d0>
   13694:	mov	r6, r3
   13698:	add	r7, r7, #1
   1369c:	mov	r3, fp
   136a0:	mov	r5, #92	; 0x5c
   136a4:	b	130e4 <__assert_fail@plt+0x21e4>
   136a8:	ldr	r6, [sp, #48]	; 0x30
   136ac:	mov	r3, #0
   136b0:	str	r3, [sp, #40]	; 0x28
   136b4:	b	13238 <__assert_fail@plt+0x2338>
   136b8:	mov	r3, #0
   136bc:	str	r3, [sp, #40]	; 0x28
   136c0:	b	1322c <__assert_fail@plt+0x232c>
   136c4:	mov	r3, #0
   136c8:	str	r3, [sp, #40]	; 0x28
   136cc:	mov	r3, #118	; 0x76
   136d0:	b	1308c <__assert_fail@plt+0x218c>
   136d4:	ldr	r6, [sp, #48]	; 0x30
   136d8:	mov	r3, #0
   136dc:	str	r3, [sp, #40]	; 0x28
   136e0:	b	13278 <__assert_fail@plt+0x2378>
   136e4:	mov	r3, #0
   136e8:	str	r3, [sp, #40]	; 0x28
   136ec:	mov	r3, #116	; 0x74
   136f0:	b	13080 <__assert_fail@plt+0x2180>
   136f4:	ldr	r3, [sp, #176]	; 0xb0
   136f8:	cmp	r3, #2
   136fc:	beq	13c0c <__assert_fail@plt+0x2d0c>
   13700:	cmp	r3, #5
   13704:	mov	r3, #0
   13708:	str	r3, [sp, #40]	; 0x28
   1370c:	beq	13378 <__assert_fail@plt+0x2478>
   13710:	mov	r6, #0
   13714:	mov	r5, #63	; 0x3f
   13718:	b	13238 <__assert_fail@plt+0x2338>
   1371c:	ldr	r3, [sp, #176]	; 0xb0
   13720:	cmp	r3, #2
   13724:	beq	13b94 <__assert_fail@plt+0x2c94>
   13728:	mov	r3, #0
   1372c:	b	133bc <__assert_fail@plt+0x24bc>
   13730:	mov	r3, #0
   13734:	str	r3, [sp, #40]	; 0x28
   13738:	mov	r3, #114	; 0x72
   1373c:	b	13080 <__assert_fail@plt+0x2180>
   13740:	mov	r3, #0
   13744:	mov	r6, r3
   13748:	str	r3, [sp, #40]	; 0x28
   1374c:	b	13278 <__assert_fail@plt+0x2378>
   13750:	mov	r3, #0
   13754:	str	r3, [sp, #40]	; 0x28
   13758:	mov	r3, #110	; 0x6e
   1375c:	b	13080 <__assert_fail@plt+0x2180>
   13760:	mov	r3, #0
   13764:	str	r3, [sp, #40]	; 0x28
   13768:	mov	r3, #98	; 0x62
   1376c:	b	1308c <__assert_fail@plt+0x218c>
   13770:	mov	r3, #0
   13774:	str	r3, [sp, #40]	; 0x28
   13778:	mov	r3, #97	; 0x61
   1377c:	b	1308c <__assert_fail@plt+0x218c>
   13780:	ldr	r3, [sp, #60]	; 0x3c
   13784:	cmp	r3, #0
   13788:	bne	13b78 <__assert_fail@plt+0x2c78>
   1378c:	ldr	r3, [sp, #92]	; 0x5c
   13790:	cmp	r3, #0
   13794:	addne	r7, r7, #1
   13798:	bne	12998 <__assert_fail@plt+0x1a98>
   1379c:	str	r3, [sp, #40]	; 0x28
   137a0:	b	13098 <__assert_fail@plt+0x2198>
   137a4:	mov	r3, #0
   137a8:	str	r3, [sp, #40]	; 0x28
   137ac:	mov	r3, #102	; 0x66
   137b0:	b	1308c <__assert_fail@plt+0x218c>
   137b4:	mov	r3, #0
   137b8:	str	r3, [sp, #40]	; 0x28
   137bc:	ldr	r3, [sp, #76]	; 0x4c
   137c0:	cmp	r3, #1
   137c4:	bne	13c2c <__assert_fail@plt+0x2d2c>
   137c8:	bl	10dec <__ctype_b_loc@plt>
   137cc:	ldr	r2, [r0]
   137d0:	sxth	r3, r5
   137d4:	lsl	r3, r3, #1
   137d8:	ldr	r1, [sp, #76]	; 0x4c
   137dc:	ldrh	r3, [r2, r3]
   137e0:	mov	r0, r1
   137e4:	and	r3, r3, #16384	; 0x4000
   137e8:	cmp	r3, #0
   137ec:	ldr	r3, [sp, #60]	; 0x3c
   137f0:	movne	r6, #1
   137f4:	moveq	r6, #0
   137f8:	movne	r2, #0
   137fc:	andeq	r2, r3, #1
   13800:	cmp	r2, #0
   13804:	beq	13238 <__assert_fail@plt+0x2338>
   13808:	ldr	r2, [sp, #60]	; 0x3c
   1380c:	mov	r6, #0
   13810:	add	r1, r0, r7
   13814:	mov	ip, #39	; 0x27
   13818:	str	r6, [sp, #100]	; 0x64
   1381c:	mov	r0, #0
   13820:	ldr	lr, [sp, #36]	; 0x24
   13824:	str	r8, [sp, #36]	; 0x24
   13828:	ldr	r6, [sp, #40]	; 0x28
   1382c:	ldr	r8, [sp, #44]	; 0x2c
   13830:	b	138e0 <__assert_fail@plt+0x29e0>
   13834:	cmp	r8, #0
   13838:	bne	13e14 <__assert_fail@plt+0x2f14>
   1383c:	ldr	r0, [sp, #52]	; 0x34
   13840:	eor	r3, fp, #1
   13844:	ands	r3, r0, r3
   13848:	beq	13878 <__assert_fail@plt+0x2978>
   1384c:	cmp	sl, r4
   13850:	add	r0, r4, #1
   13854:	strbhi	ip, [r9, r4]
   13858:	cmp	sl, r0
   1385c:	movhi	fp, #36	; 0x24
   13860:	strbhi	fp, [r9, r0]
   13864:	add	r0, r4, #2
   13868:	mov	fp, r3
   1386c:	cmp	sl, r0
   13870:	add	r4, r4, #3
   13874:	strbhi	ip, [r9, r0]
   13878:	cmp	sl, r4
   1387c:	movhi	r3, #92	; 0x5c
   13880:	strbhi	r3, [r9, r4]
   13884:	add	r3, r4, #1
   13888:	cmp	sl, r3
   1388c:	bls	1389c <__assert_fail@plt+0x299c>
   13890:	lsr	r0, r5, #6
   13894:	add	r0, r0, #48	; 0x30
   13898:	strb	r0, [r9, r3]
   1389c:	add	r3, r4, #2
   138a0:	cmp	sl, r3
   138a4:	bls	138b4 <__assert_fail@plt+0x29b4>
   138a8:	ubfx	r0, r5, #3, #3
   138ac:	add	r0, r0, #48	; 0x30
   138b0:	strb	r0, [r9, r3]
   138b4:	add	r7, r7, #1
   138b8:	and	r5, r5, #7
   138bc:	cmp	r1, r7
   138c0:	add	r5, r5, #48	; 0x30
   138c4:	add	r4, r4, #3
   138c8:	bls	13e28 <__assert_fail@plt+0x2f28>
   138cc:	mov	r0, r2
   138d0:	cmp	sl, r4
   138d4:	strbhi	r5, [r9, r4]
   138d8:	add	r4, r4, #1
   138dc:	ldrb	r5, [lr, #1]!
   138e0:	cmp	r2, #0
   138e4:	bne	13834 <__assert_fail@plt+0x2934>
   138e8:	eor	r3, r0, #1
   138ec:	cmp	r6, #0
   138f0:	and	r3, r3, fp
   138f4:	uxtb	r3, r3
   138f8:	beq	1390c <__assert_fail@plt+0x2a0c>
   138fc:	cmp	sl, r4
   13900:	movhi	r6, #92	; 0x5c
   13904:	strbhi	r6, [r9, r4]
   13908:	add	r4, r4, #1
   1390c:	add	r7, r7, #1
   13910:	cmp	r7, r1
   13914:	bcs	13e08 <__assert_fail@plt+0x2f08>
   13918:	cmp	r3, #0
   1391c:	beq	13e4c <__assert_fail@plt+0x2f4c>
   13920:	cmp	sl, r4
   13924:	add	r3, r4, #1
   13928:	mov	r6, #0
   1392c:	strbhi	ip, [r9, r4]
   13930:	cmp	sl, r3
   13934:	add	r4, r4, #2
   13938:	mov	fp, r6
   1393c:	strbhi	ip, [r9, r3]
   13940:	b	138d0 <__assert_fail@plt+0x29d0>
   13944:	ldr	r3, [sp, #36]	; 0x24
   13948:	ldrb	r5, [r3]
   1394c:	cmp	r5, #126	; 0x7e
   13950:	ldrls	pc, [pc, r5, lsl #2]
   13954:	b	137b4 <__assert_fail@plt+0x28b4>
   13958:	andeq	r3, r1, r8, ror fp
   1395c:			; <UNDEFINED> instruction: 0x000137b4
   13960:			; <UNDEFINED> instruction: 0x000137b4
   13964:			; <UNDEFINED> instruction: 0x000137b4
   13968:			; <UNDEFINED> instruction: 0x000137b4
   1396c:			; <UNDEFINED> instruction: 0x000137b4
   13970:			; <UNDEFINED> instruction: 0x000137b4
   13974:	andeq	r3, r1, ip, rrx
   13978:	andeq	r3, r1, r4, rrx
   1397c:	andeq	r3, r1, r4, ror #13
   13980:	andeq	r3, r1, ip, ror #22
   13984:	andeq	r3, r1, r4, asr #13
   13988:	andeq	r2, r1, r0, lsl pc
   1398c:	andeq	r3, r1, r0, ror #22
   13990:			; <UNDEFINED> instruction: 0x000137b4
   13994:			; <UNDEFINED> instruction: 0x000137b4
   13998:			; <UNDEFINED> instruction: 0x000137b4
   1399c:			; <UNDEFINED> instruction: 0x000137b4
   139a0:			; <UNDEFINED> instruction: 0x000137b4
   139a4:			; <UNDEFINED> instruction: 0x000137b4
   139a8:			; <UNDEFINED> instruction: 0x000137b4
   139ac:			; <UNDEFINED> instruction: 0x000137b4
   139b0:			; <UNDEFINED> instruction: 0x000137b4
   139b4:			; <UNDEFINED> instruction: 0x000137b4
   139b8:			; <UNDEFINED> instruction: 0x000137b4
   139bc:			; <UNDEFINED> instruction: 0x000137b4
   139c0:			; <UNDEFINED> instruction: 0x000137b4
   139c4:			; <UNDEFINED> instruction: 0x000137b4
   139c8:			; <UNDEFINED> instruction: 0x000137b4
   139cc:			; <UNDEFINED> instruction: 0x000137b4
   139d0:			; <UNDEFINED> instruction: 0x000137b4
   139d4:			; <UNDEFINED> instruction: 0x000137b4
   139d8:	ldrdeq	r3, [r1], -r4
   139dc:	andeq	r3, r1, r4, asr fp
   139e0:	andeq	r3, r1, r4, asr fp
   139e4:			; <UNDEFINED> instruction: 0x000136b8
   139e8:	andeq	r3, r1, r4, asr fp
   139ec:	andeq	r3, r1, r8, lsr #13
   139f0:	andeq	r3, r1, r4, asr fp
   139f4:	andeq	r3, r1, ip, lsl r7
   139f8:	andeq	r3, r1, r4, asr fp
   139fc:	andeq	r3, r1, r4, asr fp
   13a00:	andeq	r3, r1, r4, asr fp
   13a04:	andeq	r3, r1, r8, lsr #13
   13a08:	andeq	r3, r1, r8, lsr #13
   13a0c:	andeq	r3, r1, r8, lsr #13
   13a10:	andeq	r3, r1, r8, lsr #13
   13a14:	andeq	r3, r1, r8, lsr #13
   13a18:	andeq	r3, r1, r8, lsr #13
   13a1c:	andeq	r3, r1, r8, lsr #13
   13a20:	andeq	r3, r1, r8, lsr #13
   13a24:	andeq	r3, r1, r8, lsr #13
   13a28:	andeq	r3, r1, r8, lsr #13
   13a2c:	andeq	r3, r1, r8, lsr #13
   13a30:	andeq	r3, r1, r8, lsr #13
   13a34:	andeq	r3, r1, r8, lsr #13
   13a38:	andeq	r3, r1, r8, lsr #13
   13a3c:	andeq	r3, r1, r8, lsr #13
   13a40:	andeq	r3, r1, r8, lsr #13
   13a44:	andeq	r3, r1, r4, asr fp
   13a48:	andeq	r3, r1, r4, asr fp
   13a4c:	andeq	r3, r1, r4, asr fp
   13a50:	andeq	r3, r1, r4, asr fp
   13a54:	strdeq	r3, [r1], -r4
   13a58:			; <UNDEFINED> instruction: 0x000137b4
   13a5c:	andeq	r3, r1, r8, lsr #13
   13a60:	andeq	r3, r1, r8, lsr #13
   13a64:	andeq	r3, r1, r8, lsr #13
   13a68:	andeq	r3, r1, r8, lsr #13
   13a6c:	andeq	r3, r1, r8, lsr #13
   13a70:	andeq	r3, r1, r8, lsr #13
   13a74:	andeq	r3, r1, r8, lsr #13
   13a78:	andeq	r3, r1, r8, lsr #13
   13a7c:	andeq	r3, r1, r8, lsr #13
   13a80:	andeq	r3, r1, r8, lsr #13
   13a84:	andeq	r3, r1, r8, lsr #13
   13a88:	andeq	r3, r1, r8, lsr #13
   13a8c:	andeq	r3, r1, r8, lsr #13
   13a90:	andeq	r3, r1, r8, lsr #13
   13a94:	andeq	r3, r1, r8, lsr #13
   13a98:	andeq	r3, r1, r8, lsr #13
   13a9c:	andeq	r3, r1, r8, lsr #13
   13aa0:	andeq	r3, r1, r8, lsr #13
   13aa4:	andeq	r3, r1, r8, lsr #13
   13aa8:	andeq	r3, r1, r8, lsr #13
   13aac:	andeq	r3, r1, r8, lsr #13
   13ab0:	andeq	r3, r1, r8, lsr #13
   13ab4:	andeq	r3, r1, r8, lsr #13
   13ab8:	andeq	r3, r1, r8, lsr #13
   13abc:	andeq	r3, r1, r8, lsr #13
   13ac0:	andeq	r3, r1, r8, lsr #13
   13ac4:	andeq	r3, r1, r4, asr fp
   13ac8:	andeq	r3, r1, r4, ror r6
   13acc:	andeq	r3, r1, r8, lsr #13
   13ad0:	andeq	r3, r1, r4, asr fp
   13ad4:	andeq	r3, r1, r8, lsr #13
   13ad8:	andeq	r3, r1, r4, asr fp
   13adc:	andeq	r3, r1, r8, lsr #13
   13ae0:	andeq	r3, r1, r8, lsr #13
   13ae4:	andeq	r3, r1, r8, lsr #13
   13ae8:	andeq	r3, r1, r8, lsr #13
   13aec:	andeq	r3, r1, r8, lsr #13
   13af0:	andeq	r3, r1, r8, lsr #13
   13af4:	andeq	r3, r1, r8, lsr #13
   13af8:	andeq	r3, r1, r8, lsr #13
   13afc:	andeq	r3, r1, r8, lsr #13
   13b00:	andeq	r3, r1, r8, lsr #13
   13b04:	andeq	r3, r1, r8, lsr #13
   13b08:	andeq	r3, r1, r8, lsr #13
   13b0c:	andeq	r3, r1, r8, lsr #13
   13b10:	andeq	r3, r1, r8, lsr #13
   13b14:	andeq	r3, r1, r8, lsr #13
   13b18:	andeq	r3, r1, r8, lsr #13
   13b1c:	andeq	r3, r1, r8, lsr #13
   13b20:	andeq	r3, r1, r8, lsr #13
   13b24:	andeq	r3, r1, r8, lsr #13
   13b28:	andeq	r3, r1, r8, lsr #13
   13b2c:	andeq	r3, r1, r8, lsr #13
   13b30:	andeq	r3, r1, r8, lsr #13
   13b34:	andeq	r3, r1, r8, lsr #13
   13b38:	andeq	r3, r1, r8, lsr #13
   13b3c:	andeq	r3, r1, r8, lsr #13
   13b40:	andeq	r3, r1, r8, lsr #13
   13b44:	andeq	r3, r1, r0, asr r6
   13b48:	andeq	r3, r1, r4, asr fp
   13b4c:	andeq	r3, r1, r0, asr r6
   13b50:			; <UNDEFINED> instruction: 0x000136b8
   13b54:	mov	r3, #0
   13b58:	str	r3, [sp, #40]	; 0x28
   13b5c:	b	13234 <__assert_fail@plt+0x2334>
   13b60:	mov	r3, #0
   13b64:	str	r3, [sp, #40]	; 0x28
   13b68:	b	131cc <__assert_fail@plt+0x22cc>
   13b6c:	mov	r3, #0
   13b70:	str	r3, [sp, #40]	; 0x28
   13b74:	b	13200 <__assert_fail@plt+0x2300>
   13b78:	ldr	r3, [sp, #44]	; 0x2c
   13b7c:	cmp	r3, #0
   13b80:	beq	13118 <__assert_fail@plt+0x2218>
   13b84:	ldr	r3, [sp, #52]	; 0x34
   13b88:	mov	fp, r9
   13b8c:	str	r3, [sp, #60]	; 0x3c
   13b90:	b	13290 <__assert_fail@plt+0x2390>
   13b94:	ldr	r3, [sp, #44]	; 0x2c
   13b98:	cmp	r3, #0
   13b9c:	bne	13fd0 <__assert_fail@plt+0x30d0>
   13ba0:	str	r3, [sp, #40]	; 0x28
   13ba4:	cmp	sl, #0
   13ba8:	ldr	r3, [sp, #84]	; 0x54
   13bac:	clz	r3, r3
   13bb0:	lsr	r3, r3, #5
   13bb4:	moveq	r3, #0
   13bb8:	cmp	r3, #0
   13bbc:	strne	sl, [sp, #84]	; 0x54
   13bc0:	movne	sl, #0
   13bc4:	bne	13bf4 <__assert_fail@plt+0x2cf4>
   13bc8:	cmp	sl, r4
   13bcc:	movhi	r3, #39	; 0x27
   13bd0:	strbhi	r3, [r9, r4]
   13bd4:	add	r3, r4, #1
   13bd8:	cmp	sl, r3
   13bdc:	movhi	r2, #92	; 0x5c
   13be0:	strbhi	r2, [r9, r3]
   13be4:	add	r3, r4, #2
   13be8:	cmp	sl, r3
   13bec:	movhi	r2, #39	; 0x27
   13bf0:	strbhi	r2, [r9, r3]
   13bf4:	mov	r3, #0
   13bf8:	add	r4, r4, #3
   13bfc:	str	r6, [sp, #80]	; 0x50
   13c00:	mov	fp, r3
   13c04:	mov	r5, #39	; 0x27
   13c08:	b	130d4 <__assert_fail@plt+0x21d4>
   13c0c:	ldr	r3, [sp, #44]	; 0x2c
   13c10:	cmp	r3, #0
   13c14:	bne	13fd0 <__assert_fail@plt+0x30d0>
   13c18:	mov	r6, #0
   13c1c:	mov	r5, #63	; 0x3f
   13c20:	str	r3, [sp, #40]	; 0x28
   13c24:	mov	r3, fp
   13c28:	b	130d4 <__assert_fail@plt+0x21d4>
   13c2c:	mov	r2, #0
   13c30:	mov	r3, #0
   13c34:	cmn	r8, #1
   13c38:	strd	r2, [sp, #128]	; 0x80
   13c3c:	bne	13c4c <__assert_fail@plt+0x2d4c>
   13c40:	ldr	r0, [sp, #28]
   13c44:	bl	10e04 <strlen@plt>
   13c48:	mov	r8, r0
   13c4c:	str	r9, [sp, #100]	; 0x64
   13c50:	mov	r3, #0
   13c54:	strd	sl, [sp, #104]	; 0x68
   13c58:	ldr	sl, [sp, #28]
   13c5c:	str	r5, [sp, #112]	; 0x70
   13c60:	mov	r5, r3
   13c64:	ldr	r9, [sp, #68]	; 0x44
   13c68:	str	r4, [sp, #116]	; 0x74
   13c6c:	add	r4, r7, r5
   13c70:	add	r3, sp, #128	; 0x80
   13c74:	add	fp, sl, r4
   13c78:	sub	r2, r8, r4
   13c7c:	mov	r1, fp
   13c80:	add	r0, sp, #124	; 0x7c
   13c84:	bl	180c0 <__assert_fail@plt+0x71c0>
   13c88:	subs	r1, r0, #0
   13c8c:	beq	13ccc <__assert_fail@plt+0x2dcc>
   13c90:	cmn	r1, #1
   13c94:	beq	14024 <__assert_fail@plt+0x3124>
   13c98:	cmn	r1, #2
   13c9c:	beq	14044 <__assert_fail@plt+0x3144>
   13ca0:	cmp	r9, #0
   13ca4:	bne	13cfc <__assert_fail@plt+0x2dfc>
   13ca8:	ldr	r0, [sp, #124]	; 0x7c
   13cac:	add	r5, r5, r1
   13cb0:	bl	10d5c <iswprint@plt>
   13cb4:	cmp	r0, #0
   13cb8:	add	r0, sp, #128	; 0x80
   13cbc:	moveq	r6, #0
   13cc0:	bl	10d08 <mbsinit@plt>
   13cc4:	cmp	r0, #0
   13cc8:	beq	13c6c <__assert_fail@plt+0x2d6c>
   13ccc:	ldr	r3, [sp, #60]	; 0x3c
   13cd0:	add	r9, sp, #100	; 0x64
   13cd4:	mov	r0, r5
   13cd8:	ldm	r9, {r9, sl, fp}
   13cdc:	eor	r2, r6, #1
   13ce0:	ldr	r5, [sp, #112]	; 0x70
   13ce4:	and	r2, r2, r3
   13ce8:	uxtb	r2, r2
   13cec:	ldr	r4, [sp, #116]	; 0x74
   13cf0:	cmp	r0, #1
   13cf4:	bhi	13810 <__assert_fail@plt+0x2910>
   13cf8:	b	13800 <__assert_fail@plt+0x2900>
   13cfc:	cmp	r1, #1
   13d00:	beq	13ca8 <__assert_fail@plt+0x2da8>
   13d04:	add	r2, r4, #1
   13d08:	add	r3, sl, r1
   13d0c:	add	r2, sl, r2
   13d10:	add	r4, r3, r4
   13d14:	ldrb	r3, [r2], #1
   13d18:	sub	r3, r3, #91	; 0x5b
   13d1c:	cmp	r3, #33	; 0x21
   13d20:	ldrls	pc, [pc, r3, lsl #2]
   13d24:	b	13db0 <__assert_fail@plt+0x2eb0>
   13d28:			; <UNDEFINED> instruction: 0x00013dbc
   13d2c:			; <UNDEFINED> instruction: 0x00013dbc
   13d30:			; <UNDEFINED> instruction: 0x00013db0
   13d34:			; <UNDEFINED> instruction: 0x00013dbc
   13d38:			; <UNDEFINED> instruction: 0x00013db0
   13d3c:			; <UNDEFINED> instruction: 0x00013dbc
   13d40:			; <UNDEFINED> instruction: 0x00013db0
   13d44:			; <UNDEFINED> instruction: 0x00013db0
   13d48:			; <UNDEFINED> instruction: 0x00013db0
   13d4c:			; <UNDEFINED> instruction: 0x00013db0
   13d50:			; <UNDEFINED> instruction: 0x00013db0
   13d54:			; <UNDEFINED> instruction: 0x00013db0
   13d58:			; <UNDEFINED> instruction: 0x00013db0
   13d5c:			; <UNDEFINED> instruction: 0x00013db0
   13d60:			; <UNDEFINED> instruction: 0x00013db0
   13d64:			; <UNDEFINED> instruction: 0x00013db0
   13d68:			; <UNDEFINED> instruction: 0x00013db0
   13d6c:			; <UNDEFINED> instruction: 0x00013db0
   13d70:			; <UNDEFINED> instruction: 0x00013db0
   13d74:			; <UNDEFINED> instruction: 0x00013db0
   13d78:			; <UNDEFINED> instruction: 0x00013db0
   13d7c:			; <UNDEFINED> instruction: 0x00013db0
   13d80:			; <UNDEFINED> instruction: 0x00013db0
   13d84:			; <UNDEFINED> instruction: 0x00013db0
   13d88:			; <UNDEFINED> instruction: 0x00013db0
   13d8c:			; <UNDEFINED> instruction: 0x00013db0
   13d90:			; <UNDEFINED> instruction: 0x00013db0
   13d94:			; <UNDEFINED> instruction: 0x00013db0
   13d98:			; <UNDEFINED> instruction: 0x00013db0
   13d9c:			; <UNDEFINED> instruction: 0x00013db0
   13da0:			; <UNDEFINED> instruction: 0x00013db0
   13da4:			; <UNDEFINED> instruction: 0x00013db0
   13da8:			; <UNDEFINED> instruction: 0x00013db0
   13dac:			; <UNDEFINED> instruction: 0x00013dbc
   13db0:	cmp	r4, r2
   13db4:	bne	13d14 <__assert_fail@plt+0x2e14>
   13db8:	b	13ca8 <__assert_fail@plt+0x2da8>
   13dbc:	mov	r3, #2
   13dc0:	ldr	fp, [sp, #100]	; 0x64
   13dc4:	str	r3, [sp, #176]	; 0xb0
   13dc8:	ldr	sl, [sp, #104]	; 0x68
   13dcc:	b	13290 <__assert_fail@plt+0x2390>
   13dd0:	ldr	r2, [sp, #52]	; 0x34
   13dd4:	mov	fp, r9
   13dd8:	ldr	r3, [sp, #60]	; 0x3c
   13ddc:	and	r3, r3, r2
   13de0:	str	r3, [sp, #60]	; 0x3c
   13de4:	b	13290 <__assert_fail@plt+0x2390>
   13de8:	cmp	sl, r4
   13dec:	movhi	r2, fp
   13df0:	bhi	13168 <__assert_fail@plt+0x2268>
   13df4:	mov	r2, r4
   13df8:	b	13178 <__assert_fail@plt+0x2278>
   13dfc:	mov	r6, r3
   13e00:	mov	r5, #63	; 0x3f
   13e04:	b	13238 <__assert_fail@plt+0x2338>
   13e08:	ldr	r8, [sp, #36]	; 0x24
   13e0c:	ldr	r6, [sp, #100]	; 0x64
   13e10:	b	130e4 <__assert_fail@plt+0x21e4>
   13e14:	mov	fp, r9
   13e18:	ldr	r8, [sp, #36]	; 0x24
   13e1c:	ldr	r3, [sp, #52]	; 0x34
   13e20:	str	r3, [sp, #60]	; 0x3c
   13e24:	b	13290 <__assert_fail@plt+0x2390>
   13e28:	ldr	r8, [sp, #36]	; 0x24
   13e2c:	ldr	r6, [sp, #100]	; 0x64
   13e30:	b	12f7c <__assert_fail@plt+0x207c>
   13e34:	mov	r3, #0
   13e38:	add	r4, r4, #4
   13e3c:	mov	fp, r2
   13e40:	mov	r6, r3
   13e44:	mov	r5, #48	; 0x30
   13e48:	b	130d4 <__assert_fail@plt+0x21d4>
   13e4c:	mov	r6, r3
   13e50:	b	138d0 <__assert_fail@plt+0x29d0>
   13e54:	mov	r3, #1
   13e58:	movw	r2, #35648	; 0x8b40
   13e5c:	movt	r2, #1
   13e60:	mov	r4, r3
   13e64:	mov	r9, sl
   13e68:	str	r3, [sp, #32]
   13e6c:	str	sl, [sp, #44]	; 0x2c
   13e70:	str	r3, [sp, #48]	; 0x30
   13e74:	str	sl, [sp, #52]	; 0x34
   13e78:	str	r3, [sp, #56]	; 0x38
   13e7c:	str	r3, [sp, #60]	; 0x3c
   13e80:	str	sl, [sp, #64]	; 0x40
   13e84:	str	sl, [sp, #68]	; 0x44
   13e88:	str	r2, [sp, #72]	; 0x48
   13e8c:	str	sl, [sp, #80]	; 0x50
   13e90:	str	sl, [sp, #84]	; 0x54
   13e94:	str	sl, [sp, #88]	; 0x58
   13e98:	b	12988 <__assert_fail@plt+0x1a88>
   13e9c:	mov	r3, #0
   13ea0:	mov	r5, #48	; 0x30
   13ea4:	mov	r6, r3
   13ea8:	b	130d4 <__assert_fail@plt+0x21d4>
   13eac:	cmp	sl, r4
   13eb0:	mov	r5, #48	; 0x30
   13eb4:	movhi	r3, #48	; 0x30
   13eb8:	strbhi	r3, [r9, r4]
   13ebc:	add	r3, r2, #2
   13ec0:	add	r4, r2, #3
   13ec4:	cmp	sl, r3
   13ec8:	movhi	r1, #48	; 0x30
   13ecc:	strbhi	r1, [r9, r3]
   13ed0:	mov	r3, #0
   13ed4:	b	131b0 <__assert_fail@plt+0x22b0>
   13ed8:	ldr	r3, [sp, #48]	; 0x30
   13edc:	str	r3, [sp, #40]	; 0x28
   13ee0:	b	137bc <__assert_fail@plt+0x28bc>
   13ee4:	ldr	r2, [sp, #28]
   13ee8:	ldrb	r2, [r2, r3]
   13eec:	sub	r1, r2, #33	; 0x21
   13ef0:	cmp	r1, #29
   13ef4:	ldrls	pc, [pc, r1, lsl #2]
   13ef8:	b	13234 <__assert_fail@plt+0x2334>
   13efc:	andeq	r3, r1, r4, ror pc
   13f00:	andeq	r3, r1, r4, lsr r2
   13f04:	andeq	r3, r1, r4, lsr r2
   13f08:	andeq	r3, r1, r4, lsr r2
   13f0c:	andeq	r3, r1, r4, lsr r2
   13f10:	andeq	r3, r1, r4, lsr r2
   13f14:	andeq	r3, r1, r4, ror pc
   13f18:	andeq	r3, r1, r4, ror pc
   13f1c:	andeq	r3, r1, r4, ror pc
   13f20:	andeq	r3, r1, r4, lsr r2
   13f24:	andeq	r3, r1, r4, lsr r2
   13f28:	andeq	r3, r1, r4, lsr r2
   13f2c:	andeq	r3, r1, r4, ror pc
   13f30:	andeq	r3, r1, r4, lsr r2
   13f34:	andeq	r3, r1, r4, ror pc
   13f38:	andeq	r3, r1, r4, lsr r2
   13f3c:	andeq	r3, r1, r4, lsr r2
   13f40:	andeq	r3, r1, r4, lsr r2
   13f44:	andeq	r3, r1, r4, lsr r2
   13f48:	andeq	r3, r1, r4, lsr r2
   13f4c:	andeq	r3, r1, r4, lsr r2
   13f50:	andeq	r3, r1, r4, lsr r2
   13f54:	andeq	r3, r1, r4, lsr r2
   13f58:	andeq	r3, r1, r4, lsr r2
   13f5c:	andeq	r3, r1, r4, lsr r2
   13f60:	andeq	r3, r1, r4, lsr r2
   13f64:	andeq	r3, r1, r4, lsr r2
   13f68:	andeq	r3, r1, r4, ror pc
   13f6c:	andeq	r3, r1, r4, ror pc
   13f70:	andeq	r3, r1, r4, ror pc
   13f74:	ldr	r1, [sp, #44]	; 0x2c
   13f78:	cmp	r1, #0
   13f7c:	bne	141dc <__assert_fail@plt+0x32dc>
   13f80:	cmp	sl, r4
   13f84:	mov	r7, r3
   13f88:	movhi	r1, #63	; 0x3f
   13f8c:	mov	r5, r2
   13f90:	mov	r3, fp
   13f94:	strbhi	r1, [r9, r4]
   13f98:	add	r1, r4, #1
   13f9c:	cmp	sl, r1
   13fa0:	movhi	r0, #34	; 0x22
   13fa4:	strbhi	r0, [r9, r1]
   13fa8:	add	r1, r4, #2
   13fac:	cmp	sl, r1
   13fb0:	movhi	r0, #34	; 0x22
   13fb4:	strbhi	r0, [r9, r1]
   13fb8:	add	r1, r4, #3
   13fbc:	add	r4, r4, #4
   13fc0:	cmp	sl, r1
   13fc4:	movhi	r0, #63	; 0x3f
   13fc8:	strbhi	r0, [r9, r1]
   13fcc:	b	131b0 <__assert_fail@plt+0x22b0>
   13fd0:	mov	fp, r9
   13fd4:	b	13290 <__assert_fail@plt+0x2390>
   13fd8:	ldr	r3, [sp, #188]	; 0xbc
   13fdc:	ldrb	r3, [r3]
   13fe0:	cmp	r3, #0
   13fe4:	beq	12920 <__assert_fail@plt+0x1a20>
   13fe8:	ldr	r2, [sp, #188]	; 0xbc
   13fec:	cmp	sl, r4
   13ff0:	bls	14010 <__assert_fail@plt+0x3110>
   13ff4:	strb	r3, [fp, r4]
   13ff8:	add	r4, r4, #1
   13ffc:	ldrb	r3, [r2, #1]!
   14000:	cmp	r3, #0
   14004:	beq	12920 <__assert_fail@plt+0x1a20>
   14008:	cmp	sl, r4
   1400c:	bhi	13ff4 <__assert_fail@plt+0x30f4>
   14010:	ldrb	r3, [r2, #1]!
   14014:	add	r4, r4, #1
   14018:	cmp	r3, #0
   1401c:	bne	13fec <__assert_fail@plt+0x30ec>
   14020:	b	12920 <__assert_fail@plt+0x1a20>
   14024:	add	r9, sp, #100	; 0x64
   14028:	mov	r0, r5
   1402c:	ldr	r2, [sp, #60]	; 0x3c
   14030:	mov	r6, #0
   14034:	ldm	r9, {r9, sl, fp}
   14038:	ldr	r5, [sp, #112]	; 0x70
   1403c:	ldr	r4, [sp, #116]	; 0x74
   14040:	b	13cf0 <__assert_fail@plt+0x2df0>
   14044:	cmp	r4, r8
   14048:	add	r9, sp, #100	; 0x64
   1404c:	mov	r1, r4
   14050:	mov	r2, fp
   14054:	ldm	r9, {r9, sl, fp}
   14058:	mov	r3, r5
   1405c:	mov	r0, r5
   14060:	ldr	r5, [sp, #112]	; 0x70
   14064:	ldr	r4, [sp, #116]	; 0x74
   14068:	bcs	1409c <__assert_fail@plt+0x319c>
   1406c:	ldrb	r6, [r2]
   14070:	cmp	r6, #0
   14074:	bne	14088 <__assert_fail@plt+0x3188>
   14078:	b	141d4 <__assert_fail@plt+0x32d4>
   1407c:	ldrb	r6, [r2, #1]!
   14080:	cmp	r6, #0
   14084:	beq	1416c <__assert_fail@plt+0x326c>
   14088:	add	r3, r3, #1
   1408c:	add	r1, r7, r3
   14090:	cmp	r8, r1
   14094:	bhi	1407c <__assert_fail@plt+0x317c>
   14098:	mov	r0, r3
   1409c:	mov	r6, #0
   140a0:	ldr	r2, [sp, #60]	; 0x3c
   140a4:	b	13cf0 <__assert_fail@plt+0x2df0>
   140a8:	mov	r3, #1
   140ac:	mov	r4, #0
   140b0:	mov	r9, r4
   140b4:	str	r3, [sp, #32]
   140b8:	str	r3, [sp, #44]	; 0x2c
   140bc:	str	r3, [sp, #48]	; 0x30
   140c0:	str	r4, [sp, #52]	; 0x34
   140c4:	str	r3, [sp, #56]	; 0x38
   140c8:	str	r3, [sp, #60]	; 0x3c
   140cc:	str	r3, [sp, #88]	; 0x58
   140d0:	movw	r3, #35648	; 0x8b40
   140d4:	movt	r3, #1
   140d8:	str	r4, [sp, #64]	; 0x40
   140dc:	str	r4, [sp, #68]	; 0x44
   140e0:	str	r3, [sp, #72]	; 0x48
   140e4:	str	r4, [sp, #80]	; 0x50
   140e8:	str	r4, [sp, #84]	; 0x54
   140ec:	b	12988 <__assert_fail@plt+0x1a88>
   140f0:	mov	fp, r9
   140f4:	b	132a4 <__assert_fail@plt+0x23a4>
   140f8:	ldr	r3, [sp, #48]	; 0x30
   140fc:	b	13c18 <__assert_fail@plt+0x2d18>
   14100:	mov	r2, r3
   14104:	ldr	r3, [sp, #72]	; 0x48
   14108:	cmp	r3, #0
   1410c:	moveq	r2, #0
   14110:	andne	r2, r2, #1
   14114:	cmp	r2, #0
   14118:	beq	14148 <__assert_fail@plt+0x3248>
   1411c:	mov	r2, r3
   14120:	ldrb	r3, [r3]
   14124:	cmp	r3, #0
   14128:	beq	14148 <__assert_fail@plt+0x3248>
   1412c:	cmp	sl, r4
   14130:	bls	14158 <__assert_fail@plt+0x3258>
   14134:	strb	r3, [fp, r4]
   14138:	add	r4, r4, #1
   1413c:	ldrb	r3, [r2, #1]!
   14140:	cmp	r3, #0
   14144:	bne	1412c <__assert_fail@plt+0x322c>
   14148:	cmp	sl, r4
   1414c:	movhi	r3, #0
   14150:	strbhi	r3, [fp, r4]
   14154:	b	132e0 <__assert_fail@plt+0x23e0>
   14158:	ldrb	r3, [r2, #1]!
   1415c:	add	r4, r4, #1
   14160:	cmp	r3, #0
   14164:	bne	1412c <__assert_fail@plt+0x322c>
   14168:	b	14148 <__assert_fail@plt+0x3248>
   1416c:	mov	r0, r3
   14170:	ldr	r2, [sp, #60]	; 0x3c
   14174:	b	13cf0 <__assert_fail@plt+0x2df0>
   14178:	mov	ip, #5
   1417c:	mov	r3, r8
   14180:	ldr	r1, [sp, #84]	; 0x54
   14184:	str	ip, [sp]
   14188:	ldr	r2, [sp, #180]	; 0xb4
   1418c:	ldr	ip, [sp, #188]	; 0xbc
   14190:	ldr	r0, [sp, #184]	; 0xb8
   14194:	str	r2, [sp, #4]
   14198:	ldr	r2, [sp, #28]
   1419c:	str	ip, [sp, #12]
   141a0:	ldr	ip, [sp, #192]	; 0xc0
   141a4:	str	r0, [sp, #8]
   141a8:	mov	r0, fp
   141ac:	str	ip, [sp, #16]
   141b0:	bl	12864 <__assert_fail@plt+0x1964>
   141b4:	mov	r4, r0
   141b8:	b	132e0 <__assert_fail@plt+0x23e0>
   141bc:	mov	r6, r3
   141c0:	str	r3, [sp, #40]	; 0x28
   141c4:	b	13250 <__assert_fail@plt+0x2350>
   141c8:	mov	r3, #2
   141cc:	str	r3, [sp, #176]	; 0xb0
   141d0:	b	13290 <__assert_fail@plt+0x2390>
   141d4:	ldr	r2, [sp, #60]	; 0x3c
   141d8:	b	13cf0 <__assert_fail@plt+0x2df0>
   141dc:	mov	r3, #5
   141e0:	mov	fp, r9
   141e4:	str	r3, [sp, #176]	; 0xb0
   141e8:	b	132a4 <__assert_fail@plt+0x23a4>
   141ec:	mov	r1, #1
   141f0:	mov	r9, #0
   141f4:	mov	r3, r9
   141f8:	mov	r2, r9
   141fc:	str	r1, [sp, #32]
   14200:	str	sl, [sp, #84]	; 0x54
   14204:	b	1302c <__assert_fail@plt+0x212c>
   14208:	mov	r3, #0
   1420c:	mov	r2, #1
   14210:	mov	r9, r3
   14214:	mov	r4, r3
   14218:	str	r2, [sp, #32]
   1421c:	strd	r2, [sp, #44]	; 0x2c
   14220:	strd	r2, [sp, #56]	; 0x38
   14224:	str	r3, [sp, #80]	; 0x50
   14228:	str	r3, [sp, #84]	; 0x54
   1422c:	str	r3, [sp, #88]	; 0x58
   14230:	movw	r3, #35668	; 0x8b54
   14234:	movt	r3, #1
   14238:	str	r2, [sp, #52]	; 0x34
   1423c:	str	r2, [sp, #64]	; 0x40
   14240:	str	r2, [sp, #68]	; 0x44
   14244:	str	r3, [sp, #72]	; 0x48
   14248:	b	12988 <__assert_fail@plt+0x1a88>
   1424c:	bl	10ef4 <abort@plt>
   14250:	strd	r4, [sp, #-36]!	; 0xffffffdc
   14254:	mov	r4, r0
   14258:	mov	r5, r3
   1425c:	strd	r6, [sp, #8]
   14260:	movw	r7, #41200	; 0xa0f0
   14264:	movt	r7, #2
   14268:	strd	r8, [sp, #16]
   1426c:	strd	sl, [sp, #24]
   14270:	mov	sl, r1
   14274:	mov	fp, r2
   14278:	str	lr, [sp, #32]
   1427c:	sub	sp, sp, #60	; 0x3c
   14280:	bl	10e1c <__errno_location@plt>
   14284:	mov	r8, r0
   14288:	cmn	r4, #-2147483647	; 0x80000001
   1428c:	ldr	r6, [r7]
   14290:	movne	r0, #0
   14294:	moveq	r0, #1
   14298:	ldr	r3, [r8]
   1429c:	orrs	r0, r0, r4, lsr #31
   142a0:	str	r3, [sp, #28]
   142a4:	bne	14434 <__assert_fail@plt+0x3534>
   142a8:	ldr	r3, [r7, #4]
   142ac:	cmp	r3, r4
   142b0:	bgt	14310 <__assert_fail@plt+0x3410>
   142b4:	add	r1, r7, #8
   142b8:	sub	r2, r4, r3
   142bc:	str	r3, [sp, #52]	; 0x34
   142c0:	cmp	r6, r1
   142c4:	add	r2, r2, #1
   142c8:	beq	1440c <__assert_fail@plt+0x350c>
   142cc:	mov	r1, #8
   142d0:	mov	r0, r6
   142d4:	mvn	r3, #-2147483648	; 0x80000000
   142d8:	str	r1, [sp]
   142dc:	add	r1, sp, #52	; 0x34
   142e0:	bl	16b70 <__assert_fail@plt+0x5c70>
   142e4:	mov	r6, r0
   142e8:	str	r0, [r7]
   142ec:	ldr	r0, [r7, #4]
   142f0:	mov	r1, #0
   142f4:	ldr	r2, [sp, #52]	; 0x34
   142f8:	sub	r2, r2, r0
   142fc:	add	r0, r6, r0, lsl #3
   14300:	lsl	r2, r2, #3
   14304:	bl	10e34 <memset@plt>
   14308:	ldr	r3, [sp, #52]	; 0x34
   1430c:	str	r3, [r7, #4]
   14310:	ldr	r1, [r5, #4]
   14314:	add	r0, r6, r4, lsl #3
   14318:	add	ip, r5, #8
   1431c:	mov	r3, fp
   14320:	mov	r2, sl
   14324:	ldr	r7, [r0, #4]
   14328:	str	r0, [sp, #36]	; 0x24
   1432c:	str	ip, [sp, #40]	; 0x28
   14330:	orr	r0, r1, #1
   14334:	ldr	r9, [r6, r4, lsl #3]
   14338:	str	ip, [sp, #8]
   1433c:	ldr	lr, [r5, #44]	; 0x2c
   14340:	str	r0, [sp, #4]
   14344:	ldr	ip, [r5]
   14348:	mov	r1, r9
   1434c:	str	ip, [sp, #32]
   14350:	ldr	ip, [r5, #40]	; 0x28
   14354:	str	ip, [sp, #12]
   14358:	ldr	ip, [sp, #32]
   1435c:	str	lr, [sp, #16]
   14360:	str	r0, [sp, #44]	; 0x2c
   14364:	mov	r0, r7
   14368:	str	ip, [sp]
   1436c:	bl	12864 <__assert_fail@plt+0x1964>
   14370:	cmp	r9, r0
   14374:	bhi	143e4 <__assert_fail@plt+0x34e4>
   14378:	add	r9, r0, #1
   1437c:	movw	r3, #41316	; 0xa164
   14380:	movt	r3, #2
   14384:	cmp	r7, r3
   14388:	str	r9, [r6, r4, lsl #3]
   1438c:	beq	14398 <__assert_fail@plt+0x3498>
   14390:	mov	r0, r7
   14394:	bl	12510 <__assert_fail@plt+0x1610>
   14398:	mov	r0, r9
   1439c:	bl	168cc <__assert_fail@plt+0x59cc>
   143a0:	ldr	ip, [r5]
   143a4:	mov	r3, fp
   143a8:	mov	r2, sl
   143ac:	mov	r1, r9
   143b0:	mov	r7, r0
   143b4:	ldr	lr, [sp, #36]	; 0x24
   143b8:	ldr	r4, [r5, #40]	; 0x28
   143bc:	str	r0, [lr, #4]
   143c0:	ldr	lr, [r5, #44]	; 0x2c
   143c4:	str	ip, [sp]
   143c8:	ldr	ip, [sp, #44]	; 0x2c
   143cc:	str	ip, [sp, #4]
   143d0:	ldr	ip, [sp, #40]	; 0x28
   143d4:	str	r4, [sp, #12]
   143d8:	str	lr, [sp, #16]
   143dc:	str	ip, [sp, #8]
   143e0:	bl	12864 <__assert_fail@plt+0x1964>
   143e4:	ldr	r3, [sp, #28]
   143e8:	mov	r0, r7
   143ec:	str	r3, [r8]
   143f0:	add	sp, sp, #60	; 0x3c
   143f4:	ldrd	r4, [sp]
   143f8:	ldrd	r6, [sp, #8]
   143fc:	ldrd	r8, [sp, #16]
   14400:	ldrd	sl, [sp, #24]
   14404:	add	sp, sp, #32
   14408:	pop	{pc}		; (ldr pc, [sp], #4)
   1440c:	mov	r1, #8
   14410:	mvn	r3, #-2147483648	; 0x80000000
   14414:	str	r1, [sp]
   14418:	add	r1, sp, #52	; 0x34
   1441c:	bl	16b70 <__assert_fail@plt+0x5c70>
   14420:	ldrd	r2, [r7, #8]
   14424:	mov	r6, r0
   14428:	str	r0, [r7]
   1442c:	strd	r2, [r0]
   14430:	b	142ec <__assert_fail@plt+0x33ec>
   14434:	bl	10ef4 <abort@plt>
   14438:	strd	r4, [sp, #-16]!
   1443c:	mov	r5, r0
   14440:	str	r6, [sp, #8]
   14444:	str	lr, [sp, #12]
   14448:	bl	10e1c <__errno_location@plt>
   1444c:	mov	r4, r0
   14450:	cmp	r5, #0
   14454:	ldr	r0, [pc, #32]	; 1447c <__assert_fail@plt+0x357c>
   14458:	mov	r1, #48	; 0x30
   1445c:	movne	r0, r5
   14460:	ldr	r6, [r4]
   14464:	bl	16d10 <__assert_fail@plt+0x5e10>
   14468:	str	r6, [r4]
   1446c:	ldrd	r4, [sp]
   14470:	ldr	r6, [sp, #8]
   14474:	add	sp, sp, #12
   14478:	pop	{pc}		; (ldr pc, [sp], #4)
   1447c:	andeq	sl, r2, r4, ror #4
   14480:	ldr	r3, [pc, #12]	; 14494 <__assert_fail@plt+0x3594>
   14484:	cmp	r0, #0
   14488:	moveq	r0, r3
   1448c:	ldr	r0, [r0]
   14490:	bx	lr
   14494:	andeq	sl, r2, r4, ror #4
   14498:	ldr	r3, [pc, #12]	; 144ac <__assert_fail@plt+0x35ac>
   1449c:	cmp	r0, #0
   144a0:	moveq	r0, r3
   144a4:	str	r1, [r0]
   144a8:	bx	lr
   144ac:	andeq	sl, r2, r4, ror #4
   144b0:	ldr	r3, [pc, #52]	; 144ec <__assert_fail@plt+0x35ec>
   144b4:	cmp	r0, #0
   144b8:	push	{lr}		; (str lr, [sp, #-4]!)
   144bc:	lsr	lr, r1, #5
   144c0:	and	r1, r1, #31
   144c4:	moveq	r0, r3
   144c8:	add	r3, r0, #8
   144cc:	ldr	ip, [r3, lr, lsl #2]
   144d0:	lsr	r0, ip, r1
   144d4:	eor	r2, r2, r0
   144d8:	and	r0, r0, #1
   144dc:	and	r2, r2, #1
   144e0:	eor	r1, ip, r2, lsl r1
   144e4:	str	r1, [r3, lr, lsl #2]
   144e8:	pop	{pc}		; (ldr pc, [sp], #4)
   144ec:	andeq	sl, r2, r4, ror #4
   144f0:	ldr	r3, [pc, #16]	; 14508 <__assert_fail@plt+0x3608>
   144f4:	cmp	r0, #0
   144f8:	movne	r3, r0
   144fc:	ldr	r0, [r3, #4]
   14500:	str	r1, [r3, #4]
   14504:	bx	lr
   14508:	andeq	sl, r2, r4, ror #4
   1450c:	ldr	r3, [pc, #48]	; 14544 <__assert_fail@plt+0x3644>
   14510:	cmp	r0, #0
   14514:	mov	ip, #10
   14518:	moveq	r0, r3
   1451c:	cmp	r2, #0
   14520:	cmpne	r1, #0
   14524:	str	ip, [r0]
   14528:	beq	14538 <__assert_fail@plt+0x3638>
   1452c:	str	r1, [r0, #40]	; 0x28
   14530:	str	r2, [r0, #44]	; 0x2c
   14534:	bx	lr
   14538:	str	r4, [sp, #-8]!
   1453c:	str	lr, [sp, #4]
   14540:	bl	10ef4 <abort@plt>
   14544:	andeq	sl, r2, r4, ror #4
   14548:	strd	r4, [sp, #-28]!	; 0xffffffe4
   1454c:	strd	r6, [sp, #8]
   14550:	mov	r7, r0
   14554:	mov	r6, r1
   14558:	strd	r8, [sp, #16]
   1455c:	mov	r8, r2
   14560:	mov	r9, r3
   14564:	str	lr, [sp, #24]
   14568:	sub	sp, sp, #28
   1456c:	ldr	r4, [sp, #56]	; 0x38
   14570:	ldr	ip, [pc, #104]	; 145e0 <__assert_fail@plt+0x36e0>
   14574:	cmp	r4, #0
   14578:	moveq	r4, ip
   1457c:	bl	10e1c <__errno_location@plt>
   14580:	ldr	ip, [r4, #44]	; 0x2c
   14584:	mov	r5, r0
   14588:	mov	r1, r6
   1458c:	add	lr, r4, #8
   14590:	mov	r3, r9
   14594:	ldr	r6, [r5]
   14598:	mov	r2, r8
   1459c:	mov	r0, r7
   145a0:	str	ip, [sp, #16]
   145a4:	ldr	ip, [r4, #40]	; 0x28
   145a8:	str	lr, [sp, #8]
   145ac:	str	ip, [sp, #12]
   145b0:	ldr	ip, [r4, #4]
   145b4:	str	ip, [sp, #4]
   145b8:	ldr	ip, [r4]
   145bc:	str	ip, [sp]
   145c0:	bl	12864 <__assert_fail@plt+0x1964>
   145c4:	str	r6, [r5]
   145c8:	add	sp, sp, #28
   145cc:	ldrd	r4, [sp]
   145d0:	ldrd	r6, [sp, #8]
   145d4:	ldrd	r8, [sp, #16]
   145d8:	add	sp, sp, #24
   145dc:	pop	{pc}		; (ldr pc, [sp], #4)
   145e0:	andeq	sl, r2, r4, ror #4
   145e4:	strd	r4, [sp, #-36]!	; 0xffffffdc
   145e8:	cmp	r2, #0
   145ec:	ldr	r4, [pc, #192]	; 146b4 <__assert_fail@plt+0x37b4>
   145f0:	movne	r4, r2
   145f4:	strd	r6, [sp, #8]
   145f8:	strd	r8, [sp, #16]
   145fc:	mov	r9, r1
   14600:	mov	r8, r0
   14604:	strd	sl, [sp, #24]
   14608:	str	lr, [sp, #32]
   1460c:	sub	sp, sp, #36	; 0x24
   14610:	bl	10e1c <__errno_location@plt>
   14614:	ldr	r5, [r4, #4]
   14618:	mov	r6, r0
   1461c:	add	r7, r4, #8
   14620:	mov	r1, #0
   14624:	mov	r3, r9
   14628:	ldr	ip, [r4, #44]	; 0x2c
   1462c:	mov	r2, r8
   14630:	mov	r0, r1
   14634:	ldr	sl, [r6]
   14638:	orr	r5, r5, #1
   1463c:	str	ip, [sp, #16]
   14640:	ldr	ip, [r4, #40]	; 0x28
   14644:	stmib	sp, {r5, r7, ip}
   14648:	ldr	ip, [r4]
   1464c:	str	ip, [sp]
   14650:	bl	12864 <__assert_fail@plt+0x1964>
   14654:	add	r1, r0, #1
   14658:	mov	r0, r1
   1465c:	str	r1, [sp, #28]
   14660:	bl	168cc <__assert_fail@plt+0x59cc>
   14664:	ldr	ip, [r4, #44]	; 0x2c
   14668:	mov	fp, r0
   1466c:	mov	r3, r9
   14670:	mov	r2, r8
   14674:	ldr	r1, [sp, #28]
   14678:	str	ip, [sp, #16]
   1467c:	ldr	ip, [r4, #40]	; 0x28
   14680:	stmib	sp, {r5, r7, ip}
   14684:	ldr	ip, [r4]
   14688:	str	ip, [sp]
   1468c:	bl	12864 <__assert_fail@plt+0x1964>
   14690:	mov	r0, fp
   14694:	str	sl, [r6]
   14698:	add	sp, sp, #36	; 0x24
   1469c:	ldrd	r4, [sp]
   146a0:	ldrd	r6, [sp, #8]
   146a4:	ldrd	r8, [sp, #16]
   146a8:	ldrd	sl, [sp, #24]
   146ac:	add	sp, sp, #32
   146b0:	pop	{pc}		; (ldr pc, [sp], #4)
   146b4:	andeq	sl, r2, r4, ror #4
   146b8:	strd	r4, [sp, #-36]!	; 0xffffffdc
   146bc:	cmp	r3, #0
   146c0:	ldr	r4, [pc, #220]	; 147a4 <__assert_fail@plt+0x38a4>
   146c4:	movne	r4, r3
   146c8:	strd	r6, [sp, #8]
   146cc:	mov	r6, r2
   146d0:	strd	r8, [sp, #16]
   146d4:	mov	r9, r0
   146d8:	strd	sl, [sp, #24]
   146dc:	mov	sl, r1
   146e0:	str	lr, [sp, #32]
   146e4:	sub	sp, sp, #44	; 0x2c
   146e8:	bl	10e1c <__errno_location@plt>
   146ec:	ldr	r5, [r4, #4]
   146f0:	mov	r7, r0
   146f4:	mov	r1, #0
   146f8:	add	r8, r4, #8
   146fc:	mov	r3, sl
   14700:	ldr	ip, [r4, #44]	; 0x2c
   14704:	mov	r2, r9
   14708:	mov	r0, r1
   1470c:	ldr	lr, [r7]
   14710:	cmp	r6, r1
   14714:	orreq	r5, r5, #1
   14718:	str	ip, [sp, #16]
   1471c:	ldr	ip, [r4, #40]	; 0x28
   14720:	stmib	sp, {r5, r8, ip}
   14724:	ldr	ip, [r4]
   14728:	str	lr, [sp, #28]
   1472c:	str	ip, [sp]
   14730:	bl	12864 <__assert_fail@plt+0x1964>
   14734:	add	r1, r0, #1
   14738:	mov	fp, r0
   1473c:	mov	r0, r1
   14740:	str	r1, [sp, #36]	; 0x24
   14744:	bl	168cc <__assert_fail@plt+0x59cc>
   14748:	ldr	ip, [r4, #44]	; 0x2c
   1474c:	mov	r3, sl
   14750:	mov	r2, r9
   14754:	ldr	r1, [sp, #36]	; 0x24
   14758:	str	ip, [sp, #16]
   1475c:	ldr	ip, [r4, #40]	; 0x28
   14760:	str	r0, [sp, #32]
   14764:	stmib	sp, {r5, r8, ip}
   14768:	ldr	ip, [r4]
   1476c:	str	ip, [sp]
   14770:	bl	12864 <__assert_fail@plt+0x1964>
   14774:	ldr	lr, [sp, #28]
   14778:	cmp	r6, #0
   1477c:	ldr	r0, [sp, #32]
   14780:	str	lr, [r7]
   14784:	strne	fp, [r6]
   14788:	add	sp, sp, #44	; 0x2c
   1478c:	ldrd	r4, [sp]
   14790:	ldrd	r6, [sp, #8]
   14794:	ldrd	r8, [sp, #16]
   14798:	ldrd	sl, [sp, #24]
   1479c:	add	sp, sp, #32
   147a0:	pop	{pc}		; (ldr pc, [sp], #4)
   147a4:	andeq	sl, r2, r4, ror #4
   147a8:	strd	r4, [sp, #-24]!	; 0xffffffe8
   147ac:	movw	r5, #41200	; 0xa0f0
   147b0:	movt	r5, #2
   147b4:	ldr	r3, [r5, #4]
   147b8:	strd	r6, [sp, #8]
   147bc:	str	r8, [sp, #16]
   147c0:	str	lr, [sp, #20]
   147c4:	ldr	r7, [r5]
   147c8:	cmp	r3, #1
   147cc:	ble	147f0 <__assert_fail@plt+0x38f0>
   147d0:	mov	r4, #1
   147d4:	add	r6, r7, #4
   147d8:	ldr	r0, [r6, r4, lsl #3]
   147dc:	add	r4, r4, #1
   147e0:	bl	12510 <__assert_fail@plt+0x1610>
   147e4:	ldr	r3, [r5, #4]
   147e8:	cmp	r3, r4
   147ec:	bgt	147d8 <__assert_fail@plt+0x38d8>
   147f0:	ldr	r0, [r7, #4]
   147f4:	movw	r4, #41316	; 0xa164
   147f8:	movt	r4, #2
   147fc:	cmp	r0, r4
   14800:	beq	14814 <__assert_fail@plt+0x3914>
   14804:	bl	12510 <__assert_fail@plt+0x1610>
   14808:	mov	r3, #256	; 0x100
   1480c:	str	r3, [r5, #8]
   14810:	str	r4, [r5, #12]
   14814:	ldr	r4, [pc, #44]	; 14848 <__assert_fail@plt+0x3948>
   14818:	cmp	r7, r4
   1481c:	beq	1482c <__assert_fail@plt+0x392c>
   14820:	mov	r0, r7
   14824:	bl	12510 <__assert_fail@plt+0x1610>
   14828:	str	r4, [r5]
   1482c:	mov	r3, #1
   14830:	ldrd	r6, [sp, #8]
   14834:	str	r3, [r5, #4]
   14838:	ldrd	r4, [sp]
   1483c:	ldr	r8, [sp, #16]
   14840:	add	sp, sp, #20
   14844:	pop	{pc}		; (ldr pc, [sp], #4)
   14848:	strdeq	sl, [r2], -r8
   1484c:	ldr	r3, [pc, #4]	; 14858 <__assert_fail@plt+0x3958>
   14850:	mvn	r2, #0
   14854:	b	14250 <__assert_fail@plt+0x3350>
   14858:	andeq	sl, r2, r4, ror #4
   1485c:	ldr	r3, [pc]	; 14864 <__assert_fail@plt+0x3964>
   14860:	b	14250 <__assert_fail@plt+0x3350>
   14864:	andeq	sl, r2, r4, ror #4
   14868:	strd	r4, [sp, #-36]!	; 0xffffffdc
   1486c:	movw	r4, #41200	; 0xa0f0
   14870:	movt	r4, #2
   14874:	strd	r6, [sp, #8]
   14878:	strd	r8, [sp, #16]
   1487c:	strd	sl, [sp, #24]
   14880:	mov	sl, r0
   14884:	str	lr, [sp, #32]
   14888:	sub	sp, sp, #44	; 0x2c
   1488c:	bl	10e1c <__errno_location@plt>
   14890:	ldr	r3, [r0]
   14894:	mov	r8, r0
   14898:	ldr	r2, [r4, #4]
   1489c:	ldr	r5, [r4]
   148a0:	str	r3, [sp, #28]
   148a4:	cmp	r2, #0
   148a8:	bgt	14904 <__assert_fail@plt+0x3a04>
   148ac:	add	r3, r4, #8
   148b0:	str	r2, [sp, #36]	; 0x24
   148b4:	rsb	r2, r2, #1
   148b8:	cmp	r5, r3
   148bc:	beq	149d0 <__assert_fail@plt+0x3ad0>
   148c0:	mov	r1, #8
   148c4:	mov	r0, r5
   148c8:	mvn	r3, #-2147483648	; 0x80000000
   148cc:	str	r1, [sp]
   148d0:	add	r1, sp, #36	; 0x24
   148d4:	bl	16b70 <__assert_fail@plt+0x5c70>
   148d8:	mov	r5, r0
   148dc:	str	r0, [r4]
   148e0:	ldr	r0, [r4, #4]
   148e4:	mov	r1, #0
   148e8:	ldr	r2, [sp, #36]	; 0x24
   148ec:	sub	r2, r2, r0
   148f0:	add	r0, r5, r0, lsl #3
   148f4:	lsl	r2, r2, #3
   148f8:	bl	10e34 <memset@plt>
   148fc:	ldr	r3, [sp, #36]	; 0x24
   14900:	str	r3, [r4, #4]
   14904:	movw	r4, #41316	; 0xa164
   14908:	movt	r4, #2
   1490c:	ldr	r9, [r5]
   14910:	add	fp, r4, #264	; 0x108
   14914:	mvn	r3, #0
   14918:	ldr	r7, [r4, #260]	; 0x104
   1491c:	mov	r2, sl
   14920:	ldr	r6, [r5, #4]
   14924:	str	fp, [sp, #8]
   14928:	mov	r1, r9
   1492c:	ldr	ip, [r4, #256]	; 0x100
   14930:	orr	r7, r7, #1
   14934:	ldr	lr, [r4, #300]	; 0x12c
   14938:	mov	r0, r6
   1493c:	str	ip, [sp]
   14940:	str	r7, [sp, #4]
   14944:	str	lr, [sp, #16]
   14948:	ldr	ip, [r4, #296]	; 0x128
   1494c:	str	ip, [sp, #12]
   14950:	bl	12864 <__assert_fail@plt+0x1964>
   14954:	cmp	r9, r0
   14958:	bhi	149a8 <__assert_fail@plt+0x3aa8>
   1495c:	add	r9, r0, #1
   14960:	cmp	r6, r4
   14964:	str	r9, [r5]
   14968:	beq	14974 <__assert_fail@plt+0x3a74>
   1496c:	mov	r0, r6
   14970:	bl	12510 <__assert_fail@plt+0x1610>
   14974:	mov	r0, r9
   14978:	bl	168cc <__assert_fail@plt+0x59cc>
   1497c:	ldr	r3, [r4, #256]	; 0x100
   14980:	mov	r2, sl
   14984:	mov	r1, r9
   14988:	mov	r6, r0
   1498c:	ldr	lr, [r4, #296]	; 0x128
   14990:	ldr	ip, [r4, #300]	; 0x12c
   14994:	str	r0, [r5, #4]
   14998:	stm	sp, {r3, r7, fp, lr}
   1499c:	mvn	r3, #0
   149a0:	str	ip, [sp, #16]
   149a4:	bl	12864 <__assert_fail@plt+0x1964>
   149a8:	ldr	r3, [sp, #28]
   149ac:	mov	r0, r6
   149b0:	str	r3, [r8]
   149b4:	add	sp, sp, #44	; 0x2c
   149b8:	ldrd	r4, [sp]
   149bc:	ldrd	r6, [sp, #8]
   149c0:	ldrd	r8, [sp, #16]
   149c4:	ldrd	sl, [sp, #24]
   149c8:	add	sp, sp, #32
   149cc:	pop	{pc}		; (ldr pc, [sp], #4)
   149d0:	mov	r0, #8
   149d4:	mvn	r3, #-2147483648	; 0x80000000
   149d8:	add	r1, sp, #36	; 0x24
   149dc:	str	r0, [sp]
   149e0:	mov	r0, #0
   149e4:	bl	16b70 <__assert_fail@plt+0x5c70>
   149e8:	ldrd	r2, [r4, #8]
   149ec:	mov	r5, r0
   149f0:	str	r0, [r4]
   149f4:	strd	r2, [r0]
   149f8:	b	148e0 <__assert_fail@plt+0x39e0>
   149fc:	strd	r4, [sp, #-36]!	; 0xffffffdc
   14a00:	movw	r4, #41200	; 0xa0f0
   14a04:	movt	r4, #2
   14a08:	strd	r6, [sp, #8]
   14a0c:	strd	r8, [sp, #16]
   14a10:	strd	sl, [sp, #24]
   14a14:	mov	sl, r0
   14a18:	mov	fp, r1
   14a1c:	str	lr, [sp, #32]
   14a20:	sub	sp, sp, #44	; 0x2c
   14a24:	bl	10e1c <__errno_location@plt>
   14a28:	ldr	r3, [r0]
   14a2c:	mov	r8, r0
   14a30:	ldr	r2, [r4, #4]
   14a34:	ldr	r5, [r4]
   14a38:	str	r3, [sp, #28]
   14a3c:	cmp	r2, #0
   14a40:	bgt	14a9c <__assert_fail@plt+0x3b9c>
   14a44:	add	r3, r4, #8
   14a48:	str	r2, [sp, #36]	; 0x24
   14a4c:	rsb	r2, r2, #1
   14a50:	cmp	r5, r3
   14a54:	beq	14b78 <__assert_fail@plt+0x3c78>
   14a58:	mov	r1, #8
   14a5c:	mov	r0, r5
   14a60:	mvn	r3, #-2147483648	; 0x80000000
   14a64:	str	r1, [sp]
   14a68:	add	r1, sp, #36	; 0x24
   14a6c:	bl	16b70 <__assert_fail@plt+0x5c70>
   14a70:	mov	r5, r0
   14a74:	str	r0, [r4]
   14a78:	ldr	r0, [r4, #4]
   14a7c:	mov	r1, #0
   14a80:	ldr	r2, [sp, #36]	; 0x24
   14a84:	sub	r2, r2, r0
   14a88:	add	r0, r5, r0, lsl #3
   14a8c:	lsl	r2, r2, #3
   14a90:	bl	10e34 <memset@plt>
   14a94:	ldr	r3, [sp, #36]	; 0x24
   14a98:	str	r3, [r4, #4]
   14a9c:	movw	r4, #41316	; 0xa164
   14aa0:	movt	r4, #2
   14aa4:	ldr	r9, [r5]
   14aa8:	add	r0, r4, #264	; 0x108
   14aac:	mov	r3, fp
   14ab0:	ldr	r7, [r4, #260]	; 0x104
   14ab4:	mov	r2, sl
   14ab8:	ldr	r6, [r5, #4]
   14abc:	str	r0, [sp, #8]
   14ac0:	mov	r1, r9
   14ac4:	ldr	ip, [r4, #256]	; 0x100
   14ac8:	orr	r7, r7, #1
   14acc:	ldr	lr, [r4, #300]	; 0x12c
   14ad0:	mov	r0, r6
   14ad4:	str	ip, [sp]
   14ad8:	str	r7, [sp, #4]
   14adc:	str	lr, [sp, #16]
   14ae0:	ldr	ip, [r4, #296]	; 0x128
   14ae4:	str	ip, [sp, #12]
   14ae8:	bl	12864 <__assert_fail@plt+0x1964>
   14aec:	cmp	r9, r0
   14af0:	bhi	14b50 <__assert_fail@plt+0x3c50>
   14af4:	add	r9, r0, #1
   14af8:	cmp	r6, r4
   14afc:	str	r9, [r5]
   14b00:	beq	14b0c <__assert_fail@plt+0x3c0c>
   14b04:	mov	r0, r6
   14b08:	bl	12510 <__assert_fail@plt+0x1610>
   14b0c:	mov	r0, r9
   14b10:	bl	168cc <__assert_fail@plt+0x59cc>
   14b14:	ldr	ip, [r4, #256]	; 0x100
   14b18:	mov	r1, r9
   14b1c:	mov	r3, fp
   14b20:	mov	r2, sl
   14b24:	mov	r6, r0
   14b28:	ldr	r9, [r4, #296]	; 0x128
   14b2c:	ldr	lr, [r4, #300]	; 0x12c
   14b30:	str	r0, [r5, #4]
   14b34:	str	ip, [sp]
   14b38:	ldr	ip, [pc, #100]	; 14ba4 <__assert_fail@plt+0x3ca4>
   14b3c:	str	r7, [sp, #4]
   14b40:	str	ip, [sp, #8]
   14b44:	str	r9, [sp, #12]
   14b48:	str	lr, [sp, #16]
   14b4c:	bl	12864 <__assert_fail@plt+0x1964>
   14b50:	ldr	r3, [sp, #28]
   14b54:	mov	r0, r6
   14b58:	str	r3, [r8]
   14b5c:	add	sp, sp, #44	; 0x2c
   14b60:	ldrd	r4, [sp]
   14b64:	ldrd	r6, [sp, #8]
   14b68:	ldrd	r8, [sp, #16]
   14b6c:	ldrd	sl, [sp, #24]
   14b70:	add	sp, sp, #32
   14b74:	pop	{pc}		; (ldr pc, [sp], #4)
   14b78:	mov	r0, #8
   14b7c:	mvn	r3, #-2147483648	; 0x80000000
   14b80:	add	r1, sp, #36	; 0x24
   14b84:	str	r0, [sp]
   14b88:	mov	r0, #0
   14b8c:	bl	16b70 <__assert_fail@plt+0x5c70>
   14b90:	ldrd	r2, [r4, #8]
   14b94:	mov	r5, r0
   14b98:	str	r0, [r4]
   14b9c:	strd	r2, [r0]
   14ba0:	b	14a78 <__assert_fail@plt+0x3b78>
   14ba4:	andeq	sl, r2, ip, ror #4
   14ba8:	strd	r4, [sp, #-20]!	; 0xffffffec
   14bac:	mov	r4, #0
   14bb0:	mov	r5, #0
   14bb4:	strd	r6, [sp, #8]
   14bb8:	cmp	r1, #10
   14bbc:	str	lr, [sp, #16]
   14bc0:	sub	sp, sp, #100	; 0x64
   14bc4:	strd	r4, [sp, #48]	; 0x30
   14bc8:	beq	14c10 <__assert_fail@plt+0x3d10>
   14bcc:	mov	r3, sp
   14bd0:	strd	r4, [sp, #8]
   14bd4:	str	r1, [sp, #48]	; 0x30
   14bd8:	mov	r1, r2
   14bdc:	mvn	r2, #0
   14be0:	ldrd	r6, [sp, #48]	; 0x30
   14be4:	strd	r6, [sp]
   14be8:	strd	r4, [sp, #16]
   14bec:	strd	r4, [sp, #24]
   14bf0:	strd	r4, [sp, #32]
   14bf4:	strd	r4, [sp, #40]	; 0x28
   14bf8:	bl	14250 <__assert_fail@plt+0x3350>
   14bfc:	add	sp, sp, #100	; 0x64
   14c00:	ldrd	r4, [sp]
   14c04:	ldrd	r6, [sp, #8]
   14c08:	add	sp, sp, #16
   14c0c:	pop	{pc}		; (ldr pc, [sp], #4)
   14c10:	bl	10ef4 <abort@plt>
   14c14:	strd	r4, [sp, #-20]!	; 0xffffffec
   14c18:	mov	r4, #0
   14c1c:	mov	r5, #0
   14c20:	strd	r6, [sp, #8]
   14c24:	cmp	r1, #10
   14c28:	str	lr, [sp, #16]
   14c2c:	sub	sp, sp, #100	; 0x64
   14c30:	strd	r4, [sp, #48]	; 0x30
   14c34:	beq	14c80 <__assert_fail@plt+0x3d80>
   14c38:	mov	ip, r2
   14c3c:	mov	r2, r3
   14c40:	strd	r4, [sp, #8]
   14c44:	str	r1, [sp, #48]	; 0x30
   14c48:	mov	r3, sp
   14c4c:	mov	r1, ip
   14c50:	ldrd	r6, [sp, #48]	; 0x30
   14c54:	strd	r6, [sp]
   14c58:	strd	r4, [sp, #16]
   14c5c:	strd	r4, [sp, #24]
   14c60:	strd	r4, [sp, #32]
   14c64:	strd	r4, [sp, #40]	; 0x28
   14c68:	bl	14250 <__assert_fail@plt+0x3350>
   14c6c:	add	sp, sp, #100	; 0x64
   14c70:	ldrd	r4, [sp]
   14c74:	ldrd	r6, [sp, #8]
   14c78:	add	sp, sp, #16
   14c7c:	pop	{pc}		; (ldr pc, [sp], #4)
   14c80:	bl	10ef4 <abort@plt>
   14c84:	mov	r2, #0
   14c88:	mov	r3, #0
   14c8c:	strd	r4, [sp, #-36]!	; 0xffffffdc
   14c90:	strd	r6, [sp, #8]
   14c94:	cmp	r0, #10
   14c98:	strd	r8, [sp, #16]
   14c9c:	strd	sl, [sp, #24]
   14ca0:	str	lr, [sp, #32]
   14ca4:	sub	sp, sp, #124	; 0x7c
   14ca8:	strd	r2, [sp, #72]	; 0x48
   14cac:	strd	r2, [sp, #80]	; 0x50
   14cb0:	strd	r2, [sp, #88]	; 0x58
   14cb4:	strd	r2, [sp, #96]	; 0x60
   14cb8:	strd	r2, [sp, #104]	; 0x68
   14cbc:	strd	r2, [sp, #112]	; 0x70
   14cc0:	beq	14e64 <__assert_fail@plt+0x3f64>
   14cc4:	mov	r6, r1
   14cc8:	movw	r4, #41200	; 0xa0f0
   14ccc:	movt	r4, #2
   14cd0:	str	r0, [sp, #72]	; 0x48
   14cd4:	ldrd	r0, [sp, #72]	; 0x48
   14cd8:	strd	r0, [sp, #24]
   14cdc:	strd	r2, [sp, #32]
   14ce0:	strd	r2, [sp, #40]	; 0x28
   14ce4:	strd	r2, [sp, #48]	; 0x30
   14ce8:	strd	r2, [sp, #56]	; 0x38
   14cec:	strd	r2, [sp, #64]	; 0x40
   14cf0:	bl	10e1c <__errno_location@plt>
   14cf4:	mov	r8, r0
   14cf8:	ldr	r5, [r4]
   14cfc:	ldr	r2, [r4, #4]
   14d00:	ldr	r9, [r0]
   14d04:	cmp	r2, #0
   14d08:	bgt	14d64 <__assert_fail@plt+0x3e64>
   14d0c:	add	r3, r4, #8
   14d10:	str	r2, [sp, #72]	; 0x48
   14d14:	rsb	r2, r2, #1
   14d18:	cmp	r5, r3
   14d1c:	beq	14e38 <__assert_fail@plt+0x3f38>
   14d20:	mov	r3, #8
   14d24:	mov	r0, r5
   14d28:	add	r1, sp, #72	; 0x48
   14d2c:	str	r3, [sp]
   14d30:	mvn	r3, #-2147483648	; 0x80000000
   14d34:	bl	16b70 <__assert_fail@plt+0x5c70>
   14d38:	mov	r5, r0
   14d3c:	str	r0, [r4]
   14d40:	ldr	r0, [r4, #4]
   14d44:	mov	r1, #0
   14d48:	ldr	r2, [sp, #72]	; 0x48
   14d4c:	sub	r2, r2, r0
   14d50:	add	r0, r5, r0, lsl #3
   14d54:	lsl	r2, r2, #3
   14d58:	bl	10e34 <memset@plt>
   14d5c:	ldr	r3, [sp, #72]	; 0x48
   14d60:	str	r3, [r4, #4]
   14d64:	ldr	sl, [r5]
   14d68:	add	r0, sp, #32
   14d6c:	mvn	r3, #0
   14d70:	mov	r2, r6
   14d74:	ldr	r7, [sp, #28]
   14d78:	ldr	r4, [r5, #4]
   14d7c:	mov	r1, sl
   14d80:	str	r0, [sp, #8]
   14d84:	ldr	lr, [sp, #24]
   14d88:	orr	r7, r7, #1
   14d8c:	ldr	ip, [sp, #64]	; 0x40
   14d90:	mov	r0, r4
   14d94:	ldr	fp, [sp, #68]	; 0x44
   14d98:	str	lr, [sp]
   14d9c:	str	r7, [sp, #4]
   14da0:	str	ip, [sp, #12]
   14da4:	str	fp, [sp, #16]
   14da8:	bl	12864 <__assert_fail@plt+0x1964>
   14dac:	cmp	sl, r0
   14db0:	bhi	14e14 <__assert_fail@plt+0x3f14>
   14db4:	add	sl, r0, #1
   14db8:	movw	r3, #41316	; 0xa164
   14dbc:	movt	r3, #2
   14dc0:	cmp	r4, r3
   14dc4:	str	sl, [r5]
   14dc8:	beq	14dd4 <__assert_fail@plt+0x3ed4>
   14dcc:	mov	r0, r4
   14dd0:	bl	12510 <__assert_fail@plt+0x1610>
   14dd4:	mov	r0, sl
   14dd8:	bl	168cc <__assert_fail@plt+0x59cc>
   14ddc:	ldr	r3, [sp, #24]
   14de0:	mov	r2, r6
   14de4:	mov	r1, sl
   14de8:	mov	r4, r0
   14dec:	ldr	lr, [sp, #64]	; 0x40
   14df0:	ldr	ip, [sp, #68]	; 0x44
   14df4:	str	r0, [r5, #4]
   14df8:	add	r5, sp, #32
   14dfc:	stm	sp, {r3, r7}
   14e00:	mvn	r3, #0
   14e04:	str	r5, [sp, #8]
   14e08:	str	lr, [sp, #12]
   14e0c:	str	ip, [sp, #16]
   14e10:	bl	12864 <__assert_fail@plt+0x1964>
   14e14:	mov	r0, r4
   14e18:	str	r9, [r8]
   14e1c:	add	sp, sp, #124	; 0x7c
   14e20:	ldrd	r4, [sp]
   14e24:	ldrd	r6, [sp, #8]
   14e28:	ldrd	r8, [sp, #16]
   14e2c:	ldrd	sl, [sp, #24]
   14e30:	add	sp, sp, #32
   14e34:	pop	{pc}		; (ldr pc, [sp], #4)
   14e38:	mov	r0, #8
   14e3c:	mvn	r3, #-2147483648	; 0x80000000
   14e40:	add	r1, sp, #72	; 0x48
   14e44:	str	r0, [sp]
   14e48:	mov	r0, #0
   14e4c:	bl	16b70 <__assert_fail@plt+0x5c70>
   14e50:	ldrd	r2, [r4, #8]
   14e54:	mov	r5, r0
   14e58:	str	r0, [r4]
   14e5c:	strd	r2, [r0]
   14e60:	b	14d40 <__assert_fail@plt+0x3e40>
   14e64:	bl	10ef4 <abort@plt>
   14e68:	strd	r4, [sp, #-36]!	; 0xffffffdc
   14e6c:	cmp	r0, #10
   14e70:	strd	r6, [sp, #8]
   14e74:	mov	r6, #0
   14e78:	mov	r7, #0
   14e7c:	strd	r8, [sp, #16]
   14e80:	strd	sl, [sp, #24]
   14e84:	str	lr, [sp, #32]
   14e88:	sub	sp, sp, #124	; 0x7c
   14e8c:	strd	r6, [sp, #72]	; 0x48
   14e90:	strd	r6, [sp, #80]	; 0x50
   14e94:	strd	r6, [sp, #88]	; 0x58
   14e98:	strd	r6, [sp, #96]	; 0x60
   14e9c:	strd	r6, [sp, #104]	; 0x68
   14ea0:	strd	r6, [sp, #112]	; 0x70
   14ea4:	beq	15050 <__assert_fail@plt+0x4150>
   14ea8:	mov	sl, r2
   14eac:	movw	r5, #41200	; 0xa0f0
   14eb0:	movt	r5, #2
   14eb4:	str	r0, [sp, #72]	; 0x48
   14eb8:	mov	r9, r1
   14ebc:	ldrd	r2, [sp, #72]	; 0x48
   14ec0:	strd	r2, [sp, #24]
   14ec4:	strd	r6, [sp, #32]
   14ec8:	strd	r6, [sp, #40]	; 0x28
   14ecc:	strd	r6, [sp, #48]	; 0x30
   14ed0:	strd	r6, [sp, #56]	; 0x38
   14ed4:	strd	r6, [sp, #64]	; 0x40
   14ed8:	bl	10e1c <__errno_location@plt>
   14edc:	mov	r7, r0
   14ee0:	ldr	r4, [r5]
   14ee4:	ldr	r2, [r5, #4]
   14ee8:	ldr	fp, [r0]
   14eec:	cmp	r2, #0
   14ef0:	bgt	14f4c <__assert_fail@plt+0x404c>
   14ef4:	add	r3, r5, #8
   14ef8:	str	r2, [sp, #72]	; 0x48
   14efc:	rsb	r2, r2, #1
   14f00:	cmp	r4, r3
   14f04:	beq	15024 <__assert_fail@plt+0x4124>
   14f08:	mov	r3, #8
   14f0c:	mov	r0, r4
   14f10:	add	r1, sp, #72	; 0x48
   14f14:	str	r3, [sp]
   14f18:	mvn	r3, #-2147483648	; 0x80000000
   14f1c:	bl	16b70 <__assert_fail@plt+0x5c70>
   14f20:	mov	r4, r0
   14f24:	str	r0, [r5]
   14f28:	ldr	r0, [r5, #4]
   14f2c:	mov	r1, #0
   14f30:	ldr	r2, [sp, #72]	; 0x48
   14f34:	sub	r2, r2, r0
   14f38:	add	r0, r4, r0, lsl #3
   14f3c:	lsl	r2, r2, #3
   14f40:	bl	10e34 <memset@plt>
   14f44:	ldr	r3, [sp, #72]	; 0x48
   14f48:	str	r3, [r5, #4]
   14f4c:	ldr	ip, [sp, #24]
   14f50:	add	r0, sp, #32
   14f54:	mov	r3, sl
   14f58:	mov	r2, r9
   14f5c:	ldr	r6, [sp, #28]
   14f60:	ldr	r8, [r4]
   14f64:	ldr	r5, [r4, #4]
   14f68:	str	ip, [sp]
   14f6c:	orr	r6, r6, #1
   14f70:	ldr	ip, [sp, #64]	; 0x40
   14f74:	mov	r1, r8
   14f78:	str	r6, [sp, #4]
   14f7c:	ldr	lr, [sp, #68]	; 0x44
   14f80:	str	r0, [sp, #8]
   14f84:	mov	r0, r5
   14f88:	str	ip, [sp, #12]
   14f8c:	str	lr, [sp, #16]
   14f90:	bl	12864 <__assert_fail@plt+0x1964>
   14f94:	cmp	r8, r0
   14f98:	bhi	15000 <__assert_fail@plt+0x4100>
   14f9c:	add	r8, r0, #1
   14fa0:	movw	r3, #41316	; 0xa164
   14fa4:	movt	r3, #2
   14fa8:	cmp	r5, r3
   14fac:	str	r8, [r4]
   14fb0:	beq	14fbc <__assert_fail@plt+0x40bc>
   14fb4:	mov	r0, r5
   14fb8:	bl	12510 <__assert_fail@plt+0x1610>
   14fbc:	mov	r0, r8
   14fc0:	bl	168cc <__assert_fail@plt+0x59cc>
   14fc4:	ldr	lr, [sp, #24]
   14fc8:	mov	r1, r8
   14fcc:	mov	r3, sl
   14fd0:	mov	r2, r9
   14fd4:	mov	r5, r0
   14fd8:	ldr	r8, [sp, #64]	; 0x40
   14fdc:	ldr	ip, [sp, #68]	; 0x44
   14fe0:	str	r0, [r4, #4]
   14fe4:	str	lr, [sp]
   14fe8:	add	lr, sp, #32
   14fec:	str	r6, [sp, #4]
   14ff0:	str	lr, [sp, #8]
   14ff4:	str	r8, [sp, #12]
   14ff8:	str	ip, [sp, #16]
   14ffc:	bl	12864 <__assert_fail@plt+0x1964>
   15000:	mov	r0, r5
   15004:	str	fp, [r7]
   15008:	add	sp, sp, #124	; 0x7c
   1500c:	ldrd	r4, [sp]
   15010:	ldrd	r6, [sp, #8]
   15014:	ldrd	r8, [sp, #16]
   15018:	ldrd	sl, [sp, #24]
   1501c:	add	sp, sp, #32
   15020:	pop	{pc}		; (ldr pc, [sp], #4)
   15024:	mov	r0, #8
   15028:	mvn	r3, #-2147483648	; 0x80000000
   1502c:	add	r1, sp, #72	; 0x48
   15030:	str	r0, [sp]
   15034:	mov	r0, #0
   15038:	bl	16b70 <__assert_fail@plt+0x5c70>
   1503c:	ldrd	r2, [r5, #8]
   15040:	mov	r4, r0
   15044:	str	r0, [r5]
   15048:	strd	r2, [r0]
   1504c:	b	14f28 <__assert_fail@plt+0x4028>
   15050:	bl	10ef4 <abort@plt>
   15054:	ldr	r3, [pc, #492]	; 15248 <__assert_fail@plt+0x4348>
   15058:	lsr	ip, r2, #5
   1505c:	and	r2, r2, #31
   15060:	strd	r4, [sp, #-36]!	; 0xffffffdc
   15064:	movw	r5, #41200	; 0xa0f0
   15068:	movt	r5, #2
   1506c:	strd	r6, [sp, #8]
   15070:	strd	r8, [sp, #16]
   15074:	strd	sl, [sp, #24]
   15078:	mov	sl, r0
   1507c:	mov	fp, r1
   15080:	ldrd	r0, [r3]
   15084:	str	lr, [sp, #32]
   15088:	sub	sp, sp, #92	; 0x5c
   1508c:	ldrd	r8, [r3, #8]
   15090:	add	r6, sp, #48	; 0x30
   15094:	strd	r0, [sp, #40]	; 0x28
   15098:	ldrd	r0, [r3, #16]
   1509c:	strd	r8, [sp, #48]	; 0x30
   150a0:	ldrd	r8, [r3, #24]
   150a4:	strd	r0, [sp, #56]	; 0x38
   150a8:	ldrd	r0, [r3, #32]
   150ac:	strd	r8, [sp, #64]	; 0x40
   150b0:	ldrd	r8, [r3, #40]	; 0x28
   150b4:	strd	r0, [sp, #72]	; 0x48
   150b8:	strd	r8, [sp, #80]	; 0x50
   150bc:	ldr	r3, [r6, ip, lsl #2]
   150c0:	mvn	r1, r3, lsr r2
   150c4:	and	r1, r1, #1
   150c8:	eor	r2, r3, r1, lsl r2
   150cc:	str	r2, [r6, ip, lsl #2]
   150d0:	bl	10e1c <__errno_location@plt>
   150d4:	ldr	r3, [r0]
   150d8:	mov	r8, r0
   150dc:	ldr	r2, [r5, #4]
   150e0:	ldr	r4, [r5]
   150e4:	str	r3, [sp, #28]
   150e8:	cmp	r2, #0
   150ec:	bgt	15148 <__assert_fail@plt+0x4248>
   150f0:	add	r3, r5, #8
   150f4:	str	r2, [sp, #36]	; 0x24
   150f8:	rsb	r2, r2, #1
   150fc:	cmp	r4, r3
   15100:	beq	1521c <__assert_fail@plt+0x431c>
   15104:	mov	r1, #8
   15108:	mov	r0, r4
   1510c:	mvn	r3, #-2147483648	; 0x80000000
   15110:	str	r1, [sp]
   15114:	add	r1, sp, #36	; 0x24
   15118:	bl	16b70 <__assert_fail@plt+0x5c70>
   1511c:	mov	r4, r0
   15120:	str	r0, [r5]
   15124:	ldr	r0, [r5, #4]
   15128:	mov	r1, #0
   1512c:	ldr	r2, [sp, #36]	; 0x24
   15130:	sub	r2, r2, r0
   15134:	add	r0, r4, r0, lsl #3
   15138:	lsl	r2, r2, #3
   1513c:	bl	10e34 <memset@plt>
   15140:	ldr	r3, [sp, #36]	; 0x24
   15144:	str	r3, [r5, #4]
   15148:	ldr	ip, [sp, #40]	; 0x28
   1514c:	mov	r3, fp
   15150:	mov	r2, sl
   15154:	ldr	r7, [sp, #44]	; 0x2c
   15158:	ldr	r9, [r4]
   1515c:	ldr	r5, [r4, #4]
   15160:	str	ip, [sp]
   15164:	orr	r7, r7, #1
   15168:	ldr	ip, [sp, #80]	; 0x50
   1516c:	mov	r1, r9
   15170:	str	r7, [sp, #4]
   15174:	ldr	lr, [sp, #84]	; 0x54
   15178:	mov	r0, r5
   1517c:	str	r6, [sp, #8]
   15180:	str	ip, [sp, #12]
   15184:	str	lr, [sp, #16]
   15188:	bl	12864 <__assert_fail@plt+0x1964>
   1518c:	cmp	r9, r0
   15190:	bhi	151f4 <__assert_fail@plt+0x42f4>
   15194:	add	r9, r0, #1
   15198:	movw	r3, #41316	; 0xa164
   1519c:	movt	r3, #2
   151a0:	cmp	r5, r3
   151a4:	str	r9, [r4]
   151a8:	beq	151b4 <__assert_fail@plt+0x42b4>
   151ac:	mov	r0, r5
   151b0:	bl	12510 <__assert_fail@plt+0x1610>
   151b4:	mov	r0, r9
   151b8:	bl	168cc <__assert_fail@plt+0x59cc>
   151bc:	mov	r1, r9
   151c0:	ldr	ip, [sp, #40]	; 0x28
   151c4:	mov	r3, fp
   151c8:	mov	r2, sl
   151cc:	mov	r5, r0
   151d0:	ldr	r9, [sp, #80]	; 0x50
   151d4:	ldr	lr, [sp, #84]	; 0x54
   151d8:	str	r0, [r4, #4]
   151dc:	str	ip, [sp]
   151e0:	str	r7, [sp, #4]
   151e4:	str	r6, [sp, #8]
   151e8:	str	r9, [sp, #12]
   151ec:	str	lr, [sp, #16]
   151f0:	bl	12864 <__assert_fail@plt+0x1964>
   151f4:	ldr	r3, [sp, #28]
   151f8:	mov	r0, r5
   151fc:	str	r3, [r8]
   15200:	add	sp, sp, #92	; 0x5c
   15204:	ldrd	r4, [sp]
   15208:	ldrd	r6, [sp, #8]
   1520c:	ldrd	r8, [sp, #16]
   15210:	ldrd	sl, [sp, #24]
   15214:	add	sp, sp, #32
   15218:	pop	{pc}		; (ldr pc, [sp], #4)
   1521c:	mov	r0, #8
   15220:	mvn	r3, #-2147483648	; 0x80000000
   15224:	add	r1, sp, #36	; 0x24
   15228:	str	r0, [sp]
   1522c:	mov	r0, #0
   15230:	bl	16b70 <__assert_fail@plt+0x5c70>
   15234:	ldrd	r2, [r5, #8]
   15238:	mov	r4, r0
   1523c:	str	r0, [r5]
   15240:	strd	r2, [r0]
   15244:	b	15124 <__assert_fail@plt+0x4224>
   15248:	andeq	sl, r2, r4, ror #4
   1524c:	ldr	ip, [pc, #476]	; 15430 <__assert_fail@plt+0x4530>
   15250:	strd	r4, [sp, #-36]!	; 0xffffffdc
   15254:	movw	r4, #41200	; 0xa0f0
   15258:	movt	r4, #2
   1525c:	ldrd	r2, [ip, #8]
   15260:	strd	r6, [sp, #8]
   15264:	lsr	r7, r1, #5
   15268:	mov	r6, r0
   1526c:	strd	r8, [sp, #16]
   15270:	str	lr, [sp, #32]
   15274:	and	lr, r1, #31
   15278:	ldrd	r0, [ip]
   1527c:	strd	sl, [sp, #24]
   15280:	sub	sp, sp, #84	; 0x54
   15284:	add	r5, sp, #40	; 0x28
   15288:	strd	r0, [sp, #32]
   1528c:	strd	r2, [sp, #40]	; 0x28
   15290:	ldrd	r0, [ip, #16]
   15294:	ldrd	r2, [ip, #24]
   15298:	strd	r0, [sp, #48]	; 0x30
   1529c:	ldrd	r0, [ip, #32]
   152a0:	strd	r2, [sp, #56]	; 0x38
   152a4:	ldrd	r2, [ip, #40]	; 0x28
   152a8:	strd	r0, [sp, #64]	; 0x40
   152ac:	strd	r2, [sp, #72]	; 0x48
   152b0:	ldr	r1, [r5, r7, lsl #2]
   152b4:	mvn	r3, r1, lsr lr
   152b8:	and	r3, r3, #1
   152bc:	eor	r1, r1, r3, lsl lr
   152c0:	str	r1, [r5, r7, lsl #2]
   152c4:	bl	10e1c <__errno_location@plt>
   152c8:	mov	r9, r0
   152cc:	ldr	sl, [r0]
   152d0:	ldr	r2, [r4, #4]
   152d4:	ldr	r7, [r4]
   152d8:	cmp	r2, #0
   152dc:	bgt	15338 <__assert_fail@plt+0x4438>
   152e0:	add	r3, r4, #8
   152e4:	str	r2, [sp, #28]
   152e8:	rsb	r2, r2, #1
   152ec:	cmp	r7, r3
   152f0:	beq	15404 <__assert_fail@plt+0x4504>
   152f4:	mov	r1, #8
   152f8:	mov	r0, r7
   152fc:	mvn	r3, #-2147483648	; 0x80000000
   15300:	str	r1, [sp]
   15304:	add	r1, sp, #28
   15308:	bl	16b70 <__assert_fail@plt+0x5c70>
   1530c:	mov	r7, r0
   15310:	str	r0, [r4]
   15314:	ldr	r0, [r4, #4]
   15318:	mov	r1, #0
   1531c:	ldr	r2, [sp, #28]
   15320:	sub	r2, r2, r0
   15324:	add	r0, r7, r0, lsl #3
   15328:	lsl	r2, r2, #3
   1532c:	bl	10e34 <memset@plt>
   15330:	ldr	r3, [sp, #28]
   15334:	str	r3, [r4, #4]
   15338:	ldr	ip, [sp, #32]
   1533c:	mvn	r3, #0
   15340:	mov	r2, r6
   15344:	ldr	r8, [sp, #36]	; 0x24
   15348:	ldr	fp, [r7]
   1534c:	ldr	r4, [r7, #4]
   15350:	str	ip, [sp]
   15354:	orr	r8, r8, #1
   15358:	ldr	ip, [sp, #72]	; 0x48
   1535c:	mov	r1, fp
   15360:	str	r8, [sp, #4]
   15364:	ldr	lr, [sp, #76]	; 0x4c
   15368:	mov	r0, r4
   1536c:	str	r5, [sp, #8]
   15370:	str	ip, [sp, #12]
   15374:	str	lr, [sp, #16]
   15378:	bl	12864 <__assert_fail@plt+0x1964>
   1537c:	cmp	fp, r0
   15380:	bhi	153e0 <__assert_fail@plt+0x44e0>
   15384:	add	fp, r0, #1
   15388:	movw	r3, #41316	; 0xa164
   1538c:	movt	r3, #2
   15390:	cmp	r4, r3
   15394:	str	fp, [r7]
   15398:	beq	153a4 <__assert_fail@plt+0x44a4>
   1539c:	mov	r0, r4
   153a0:	bl	12510 <__assert_fail@plt+0x1610>
   153a4:	mov	r0, fp
   153a8:	bl	168cc <__assert_fail@plt+0x59cc>
   153ac:	ldr	r3, [sp, #32]
   153b0:	mov	r2, r6
   153b4:	mov	r1, fp
   153b8:	mov	r4, r0
   153bc:	ldr	lr, [sp, #72]	; 0x48
   153c0:	ldr	ip, [sp, #76]	; 0x4c
   153c4:	str	r0, [r7, #4]
   153c8:	stm	sp, {r3, r8}
   153cc:	mvn	r3, #0
   153d0:	str	r5, [sp, #8]
   153d4:	str	lr, [sp, #12]
   153d8:	str	ip, [sp, #16]
   153dc:	bl	12864 <__assert_fail@plt+0x1964>
   153e0:	mov	r0, r4
   153e4:	str	sl, [r9]
   153e8:	add	sp, sp, #84	; 0x54
   153ec:	ldrd	r4, [sp]
   153f0:	ldrd	r6, [sp, #8]
   153f4:	ldrd	r8, [sp, #16]
   153f8:	ldrd	sl, [sp, #24]
   153fc:	add	sp, sp, #32
   15400:	pop	{pc}		; (ldr pc, [sp], #4)
   15404:	mov	r0, #8
   15408:	mvn	r3, #-2147483648	; 0x80000000
   1540c:	add	r1, sp, #28
   15410:	str	r0, [sp]
   15414:	mov	r0, #0
   15418:	bl	16b70 <__assert_fail@plt+0x5c70>
   1541c:	ldrd	r2, [r4, #8]
   15420:	mov	r7, r0
   15424:	str	r0, [r4]
   15428:	strd	r2, [r0]
   1542c:	b	15314 <__assert_fail@plt+0x4414>
   15430:	andeq	sl, r2, r4, ror #4
   15434:	ldr	ip, [pc, #472]	; 15614 <__assert_fail@plt+0x4714>
   15438:	strd	r4, [sp, #-36]!	; 0xffffffdc
   1543c:	mov	r5, r0
   15440:	movw	r4, #41200	; 0xa0f0
   15444:	movt	r4, #2
   15448:	ldrd	r2, [ip]
   1544c:	ldrd	r0, [ip, #8]
   15450:	strd	r6, [sp, #8]
   15454:	strd	r8, [sp, #16]
   15458:	strd	sl, [sp, #24]
   1545c:	str	lr, [sp, #32]
   15460:	sub	sp, sp, #84	; 0x54
   15464:	strd	r2, [sp, #32]
   15468:	strd	r0, [sp, #40]	; 0x28
   1546c:	ldr	r6, [sp, #44]	; 0x2c
   15470:	ldrd	r2, [ip, #16]
   15474:	ldrd	r0, [ip, #24]
   15478:	mvn	lr, r6
   1547c:	and	lr, lr, #67108864	; 0x4000000
   15480:	eor	lr, lr, r6
   15484:	ldrd	r6, [ip, #40]	; 0x28
   15488:	strd	r2, [sp, #48]	; 0x30
   1548c:	ldrd	r2, [ip, #32]
   15490:	str	lr, [sp, #44]	; 0x2c
   15494:	strd	r0, [sp, #56]	; 0x38
   15498:	strd	r2, [sp, #64]	; 0x40
   1549c:	strd	r6, [sp, #72]	; 0x48
   154a0:	bl	10e1c <__errno_location@plt>
   154a4:	mov	r8, r0
   154a8:	ldr	r9, [r0]
   154ac:	ldr	r2, [r4, #4]
   154b0:	ldr	r6, [r4]
   154b4:	cmp	r2, #0
   154b8:	bgt	15514 <__assert_fail@plt+0x4614>
   154bc:	add	r3, r4, #8
   154c0:	str	r2, [sp, #28]
   154c4:	rsb	r2, r2, #1
   154c8:	cmp	r6, r3
   154cc:	beq	155e8 <__assert_fail@plt+0x46e8>
   154d0:	mov	r1, #8
   154d4:	mov	r0, r6
   154d8:	mvn	r3, #-2147483648	; 0x80000000
   154dc:	str	r1, [sp]
   154e0:	add	r1, sp, #28
   154e4:	bl	16b70 <__assert_fail@plt+0x5c70>
   154e8:	mov	r6, r0
   154ec:	str	r0, [r4]
   154f0:	ldr	r0, [r4, #4]
   154f4:	mov	r1, #0
   154f8:	ldr	r2, [sp, #28]
   154fc:	sub	r2, r2, r0
   15500:	add	r0, r6, r0, lsl #3
   15504:	lsl	r2, r2, #3
   15508:	bl	10e34 <memset@plt>
   1550c:	ldr	r3, [sp, #28]
   15510:	str	r3, [r4, #4]
   15514:	ldr	sl, [r6]
   15518:	add	r0, sp, #40	; 0x28
   1551c:	mvn	r3, #0
   15520:	mov	r2, r5
   15524:	ldr	r7, [sp, #36]	; 0x24
   15528:	ldr	r4, [r6, #4]
   1552c:	mov	r1, sl
   15530:	str	r0, [sp, #8]
   15534:	ldr	lr, [sp, #32]
   15538:	orr	r7, r7, #1
   1553c:	ldr	ip, [sp, #72]	; 0x48
   15540:	mov	r0, r4
   15544:	ldr	fp, [sp, #76]	; 0x4c
   15548:	str	lr, [sp]
   1554c:	str	r7, [sp, #4]
   15550:	str	ip, [sp, #12]
   15554:	str	fp, [sp, #16]
   15558:	bl	12864 <__assert_fail@plt+0x1964>
   1555c:	cmp	sl, r0
   15560:	bhi	155c4 <__assert_fail@plt+0x46c4>
   15564:	add	sl, r0, #1
   15568:	movw	r3, #41316	; 0xa164
   1556c:	movt	r3, #2
   15570:	cmp	r4, r3
   15574:	str	sl, [r6]
   15578:	beq	15584 <__assert_fail@plt+0x4684>
   1557c:	mov	r0, r4
   15580:	bl	12510 <__assert_fail@plt+0x1610>
   15584:	mov	r0, sl
   15588:	bl	168cc <__assert_fail@plt+0x59cc>
   1558c:	ldr	r3, [sp, #32]
   15590:	mov	r2, r5
   15594:	add	r5, sp, #40	; 0x28
   15598:	mov	r1, sl
   1559c:	mov	r4, r0
   155a0:	ldr	lr, [sp, #72]	; 0x48
   155a4:	ldr	ip, [sp, #76]	; 0x4c
   155a8:	str	r0, [r6, #4]
   155ac:	stm	sp, {r3, r7}
   155b0:	mvn	r3, #0
   155b4:	str	r5, [sp, #8]
   155b8:	str	lr, [sp, #12]
   155bc:	str	ip, [sp, #16]
   155c0:	bl	12864 <__assert_fail@plt+0x1964>
   155c4:	mov	r0, r4
   155c8:	str	r9, [r8]
   155cc:	add	sp, sp, #84	; 0x54
   155d0:	ldrd	r4, [sp]
   155d4:	ldrd	r6, [sp, #8]
   155d8:	ldrd	r8, [sp, #16]
   155dc:	ldrd	sl, [sp, #24]
   155e0:	add	sp, sp, #32
   155e4:	pop	{pc}		; (ldr pc, [sp], #4)
   155e8:	mov	r0, #8
   155ec:	mvn	r3, #-2147483648	; 0x80000000
   155f0:	add	r1, sp, #28
   155f4:	str	r0, [sp]
   155f8:	mov	r0, #0
   155fc:	bl	16b70 <__assert_fail@plt+0x5c70>
   15600:	ldrd	r2, [r4, #8]
   15604:	mov	r6, r0
   15608:	str	r0, [r4]
   1560c:	strd	r2, [r0]
   15610:	b	154f0 <__assert_fail@plt+0x45f0>
   15614:	andeq	sl, r2, r4, ror #4
   15618:	ldr	ip, [pc, #480]	; 15800 <__assert_fail@plt+0x4900>
   1561c:	strd	r4, [sp, #-36]!	; 0xffffffdc
   15620:	mov	r5, r0
   15624:	movw	r4, #41200	; 0xa0f0
   15628:	movt	r4, #2
   1562c:	ldrd	r2, [ip]
   15630:	strd	r6, [sp, #8]
   15634:	mov	r6, r1
   15638:	ldrd	r0, [ip, #8]
   1563c:	strd	r8, [sp, #16]
   15640:	strd	sl, [sp, #24]
   15644:	str	lr, [sp, #32]
   15648:	sub	sp, sp, #84	; 0x54
   1564c:	ldrd	r8, [ip, #40]	; 0x28
   15650:	strd	r2, [sp, #32]
   15654:	strd	r0, [sp, #40]	; 0x28
   15658:	ldrd	r2, [ip, #16]
   1565c:	ldr	r7, [sp, #44]	; 0x2c
   15660:	ldrd	r0, [ip, #24]
   15664:	strd	r2, [sp, #48]	; 0x30
   15668:	ldrd	r2, [ip, #32]
   1566c:	mvn	lr, r7
   15670:	and	lr, lr, #67108864	; 0x4000000
   15674:	eor	lr, lr, r7
   15678:	str	lr, [sp, #44]	; 0x2c
   1567c:	strd	r0, [sp, #56]	; 0x38
   15680:	strd	r2, [sp, #64]	; 0x40
   15684:	strd	r8, [sp, #72]	; 0x48
   15688:	bl	10e1c <__errno_location@plt>
   1568c:	mov	r9, r0
   15690:	ldr	sl, [r0]
   15694:	ldr	r2, [r4, #4]
   15698:	ldr	r7, [r4]
   1569c:	cmp	r2, #0
   156a0:	bgt	156fc <__assert_fail@plt+0x47fc>
   156a4:	add	r3, r4, #8
   156a8:	str	r2, [sp, #28]
   156ac:	rsb	r2, r2, #1
   156b0:	cmp	r7, r3
   156b4:	beq	157d4 <__assert_fail@plt+0x48d4>
   156b8:	mov	r1, #8
   156bc:	mov	r0, r7
   156c0:	mvn	r3, #-2147483648	; 0x80000000
   156c4:	str	r1, [sp]
   156c8:	add	r1, sp, #28
   156cc:	bl	16b70 <__assert_fail@plt+0x5c70>
   156d0:	mov	r7, r0
   156d4:	str	r0, [r4]
   156d8:	ldr	r0, [r4, #4]
   156dc:	mov	r1, #0
   156e0:	ldr	r2, [sp, #28]
   156e4:	sub	r2, r2, r0
   156e8:	add	r0, r7, r0, lsl #3
   156ec:	lsl	r2, r2, #3
   156f0:	bl	10e34 <memset@plt>
   156f4:	ldr	r3, [sp, #28]
   156f8:	str	r3, [r4, #4]
   156fc:	ldr	ip, [sp, #32]
   15700:	add	r0, sp, #40	; 0x28
   15704:	mov	r3, r6
   15708:	mov	r2, r5
   1570c:	ldr	r8, [sp, #36]	; 0x24
   15710:	ldr	fp, [r7]
   15714:	ldr	r4, [r7, #4]
   15718:	str	ip, [sp]
   1571c:	orr	r8, r8, #1
   15720:	ldr	ip, [sp, #72]	; 0x48
   15724:	mov	r1, fp
   15728:	str	r8, [sp, #4]
   1572c:	ldr	lr, [sp, #76]	; 0x4c
   15730:	str	r0, [sp, #8]
   15734:	mov	r0, r4
   15738:	str	ip, [sp, #12]
   1573c:	str	lr, [sp, #16]
   15740:	bl	12864 <__assert_fail@plt+0x1964>
   15744:	cmp	fp, r0
   15748:	bhi	157b0 <__assert_fail@plt+0x48b0>
   1574c:	add	fp, r0, #1
   15750:	movw	r3, #41316	; 0xa164
   15754:	movt	r3, #2
   15758:	cmp	r4, r3
   1575c:	str	fp, [r7]
   15760:	beq	1576c <__assert_fail@plt+0x486c>
   15764:	mov	r0, r4
   15768:	bl	12510 <__assert_fail@plt+0x1610>
   1576c:	mov	r0, fp
   15770:	bl	168cc <__assert_fail@plt+0x59cc>
   15774:	ldr	lr, [sp, #32]
   15778:	mov	r2, r5
   1577c:	mov	r3, r6
   15780:	mov	r1, fp
   15784:	mov	r4, r0
   15788:	ldr	r5, [sp, #72]	; 0x48
   1578c:	ldr	ip, [sp, #76]	; 0x4c
   15790:	str	r0, [r7, #4]
   15794:	str	lr, [sp]
   15798:	add	lr, sp, #40	; 0x28
   1579c:	str	r8, [sp, #4]
   157a0:	str	lr, [sp, #8]
   157a4:	str	r5, [sp, #12]
   157a8:	str	ip, [sp, #16]
   157ac:	bl	12864 <__assert_fail@plt+0x1964>
   157b0:	mov	r0, r4
   157b4:	str	sl, [r9]
   157b8:	add	sp, sp, #84	; 0x54
   157bc:	ldrd	r4, [sp]
   157c0:	ldrd	r6, [sp, #8]
   157c4:	ldrd	r8, [sp, #16]
   157c8:	ldrd	sl, [sp, #24]
   157cc:	add	sp, sp, #32
   157d0:	pop	{pc}		; (ldr pc, [sp], #4)
   157d4:	mov	r0, #8
   157d8:	mvn	r3, #-2147483648	; 0x80000000
   157dc:	add	r1, sp, #28
   157e0:	str	r0, [sp]
   157e4:	mov	r0, #0
   157e8:	bl	16b70 <__assert_fail@plt+0x5c70>
   157ec:	ldrd	r2, [r4, #8]
   157f0:	mov	r7, r0
   157f4:	str	r0, [r4]
   157f8:	strd	r2, [r0]
   157fc:	b	156d8 <__assert_fail@plt+0x47d8>
   15800:	andeq	sl, r2, r4, ror #4
   15804:	strd	r4, [sp, #-12]!
   15808:	mov	r4, #0
   1580c:	mov	r5, #0
   15810:	str	lr, [sp, #8]
   15814:	sub	sp, sp, #100	; 0x64
   15818:	cmp	r1, #10
   1581c:	strd	r4, [sp]
   15820:	strd	r4, [sp, #8]
   15824:	strd	r4, [sp, #16]
   15828:	strd	r4, [sp, #24]
   1582c:	strd	r4, [sp, #32]
   15830:	strd	r4, [sp, #40]	; 0x28
   15834:	beq	15864 <__assert_fail@plt+0x4964>
   15838:	mov	ip, #67108864	; 0x4000000
   1583c:	mov	r3, sp
   15840:	str	r1, [sp]
   15844:	mov	r1, r2
   15848:	mvn	r2, #0
   1584c:	str	ip, [sp, #12]
   15850:	bl	14250 <__assert_fail@plt+0x3350>
   15854:	add	sp, sp, #100	; 0x64
   15858:	ldrd	r4, [sp]
   1585c:	add	sp, sp, #8
   15860:	pop	{pc}		; (ldr pc, [sp], #4)
   15864:	bl	10ef4 <abort@plt>
   15868:	ldr	ip, [pc, #156]	; 1590c <__assert_fail@plt+0x4a0c>
   1586c:	cmp	r2, #0
   15870:	cmpne	r1, #0
   15874:	strd	r4, [sp, #-32]!	; 0xffffffe0
   15878:	strd	r6, [sp, #8]
   1587c:	mov	r6, r2
   15880:	str	r8, [sp, #16]
   15884:	mov	r8, r3
   15888:	strd	sl, [sp, #20]
   1588c:	ldrd	r4, [ip]
   15890:	str	lr, [sp, #28]
   15894:	sub	sp, sp, #48	; 0x30
   15898:	mov	lr, #10
   1589c:	ldrd	r2, [ip, #8]
   158a0:	ldrd	sl, [ip, #16]
   158a4:	strd	r4, [sp]
   158a8:	ldrd	r4, [ip, #32]
   158ac:	str	lr, [sp]
   158b0:	strd	r2, [sp, #8]
   158b4:	strd	sl, [sp, #16]
   158b8:	ldrd	r2, [ip, #24]
   158bc:	ldrd	sl, [ip, #40]	; 0x28
   158c0:	strd	r2, [sp, #24]
   158c4:	strd	r4, [sp, #32]
   158c8:	strd	sl, [sp, #40]	; 0x28
   158cc:	beq	15908 <__assert_fail@plt+0x4a08>
   158d0:	mov	r7, r1
   158d4:	mov	r3, sp
   158d8:	mov	r1, r8
   158dc:	mvn	r2, #0
   158e0:	str	r7, [sp, #40]	; 0x28
   158e4:	str	r6, [sp, #44]	; 0x2c
   158e8:	bl	14250 <__assert_fail@plt+0x3350>
   158ec:	add	sp, sp, #48	; 0x30
   158f0:	ldrd	r4, [sp]
   158f4:	ldrd	r6, [sp, #8]
   158f8:	ldr	r8, [sp, #16]
   158fc:	ldrd	sl, [sp, #20]
   15900:	add	sp, sp, #28
   15904:	pop	{pc}		; (ldr pc, [sp], #4)
   15908:	bl	10ef4 <abort@plt>
   1590c:	andeq	sl, r2, r4, ror #4
   15910:	ldr	ip, [pc, #156]	; 159b4 <__assert_fail@plt+0x4ab4>
   15914:	cmp	r2, #0
   15918:	cmpne	r1, #0
   1591c:	strd	r4, [sp, #-32]!	; 0xffffffe0
   15920:	strd	r6, [sp, #8]
   15924:	mov	r6, r2
   15928:	str	r8, [sp, #16]
   1592c:	mov	r8, r3
   15930:	strd	sl, [sp, #20]
   15934:	ldrd	r4, [ip]
   15938:	str	lr, [sp, #28]
   1593c:	sub	sp, sp, #48	; 0x30
   15940:	mov	lr, #10
   15944:	ldrd	r2, [ip, #8]
   15948:	ldrd	sl, [ip, #16]
   1594c:	strd	r4, [sp]
   15950:	ldrd	r4, [ip, #32]
   15954:	str	lr, [sp]
   15958:	strd	r2, [sp, #8]
   1595c:	strd	sl, [sp, #16]
   15960:	ldrd	r2, [ip, #24]
   15964:	ldrd	sl, [ip, #40]	; 0x28
   15968:	strd	r2, [sp, #24]
   1596c:	strd	r4, [sp, #32]
   15970:	strd	sl, [sp, #40]	; 0x28
   15974:	beq	159b0 <__assert_fail@plt+0x4ab0>
   15978:	ldr	r2, [sp, #80]	; 0x50
   1597c:	mov	r7, r1
   15980:	mov	r3, sp
   15984:	mov	r1, r8
   15988:	str	r7, [sp, #40]	; 0x28
   1598c:	str	r6, [sp, #44]	; 0x2c
   15990:	bl	14250 <__assert_fail@plt+0x3350>
   15994:	add	sp, sp, #48	; 0x30
   15998:	ldrd	r4, [sp]
   1599c:	ldrd	r6, [sp, #8]
   159a0:	ldr	r8, [sp, #16]
   159a4:	ldrd	sl, [sp, #20]
   159a8:	add	sp, sp, #28
   159ac:	pop	{pc}		; (ldr pc, [sp], #4)
   159b0:	bl	10ef4 <abort@plt>
   159b4:	andeq	sl, r2, r4, ror #4
   159b8:	ldr	ip, [pc, #512]	; 15bc0 <__assert_fail@plt+0x4cc0>
   159bc:	cmp	r0, #0
   159c0:	strd	r4, [sp, #-36]!	; 0xffffffdc
   159c4:	ldrd	r4, [ip, #16]
   159c8:	strd	r6, [sp, #8]
   159cc:	clz	r6, r1
   159d0:	mov	r7, r1
   159d4:	strd	r8, [sp, #16]
   159d8:	mov	r8, r0
   159dc:	lsr	r6, r6, #5
   159e0:	strd	sl, [sp, #24]
   159e4:	mov	fp, r2
   159e8:	mov	sl, #10
   159ec:	ldrd	r2, [ip]
   159f0:	moveq	r6, #1
   159f4:	str	lr, [sp, #32]
   159f8:	sub	sp, sp, #92	; 0x5c
   159fc:	cmp	r6, #0
   15a00:	ldrd	r0, [ip, #8]
   15a04:	strd	r2, [sp, #40]	; 0x28
   15a08:	strd	r4, [sp, #56]	; 0x38
   15a0c:	ldrd	r2, [ip, #24]
   15a10:	strd	r0, [sp, #48]	; 0x30
   15a14:	ldrd	r0, [ip, #32]
   15a18:	str	sl, [sp, #40]	; 0x28
   15a1c:	ldrd	r4, [ip, #40]	; 0x28
   15a20:	strd	r2, [sp, #64]	; 0x40
   15a24:	strd	r0, [sp, #72]	; 0x48
   15a28:	strd	r4, [sp, #80]	; 0x50
   15a2c:	bne	15bbc <__assert_fail@plt+0x4cbc>
   15a30:	movw	r5, #41200	; 0xa0f0
   15a34:	movt	r5, #2
   15a38:	str	r8, [sp, #80]	; 0x50
   15a3c:	str	r7, [sp, #84]	; 0x54
   15a40:	bl	10e1c <__errno_location@plt>
   15a44:	ldr	r3, [r0]
   15a48:	mov	r9, r0
   15a4c:	ldr	r2, [r5, #4]
   15a50:	ldr	r4, [r5]
   15a54:	str	r3, [sp, #28]
   15a58:	cmp	r2, #0
   15a5c:	movgt	r1, sl
   15a60:	bgt	15ac8 <__assert_fail@plt+0x4bc8>
   15a64:	add	r3, r5, #8
   15a68:	str	r2, [sp, #36]	; 0x24
   15a6c:	rsb	r2, r2, #1
   15a70:	cmp	r4, r3
   15a74:	beq	15b90 <__assert_fail@plt+0x4c90>
   15a78:	mov	r1, #8
   15a7c:	mov	r0, r4
   15a80:	mvn	r3, #-2147483648	; 0x80000000
   15a84:	str	r1, [sp]
   15a88:	add	r1, sp, #36	; 0x24
   15a8c:	bl	16b70 <__assert_fail@plt+0x5c70>
   15a90:	mov	r4, r0
   15a94:	str	r0, [r5]
   15a98:	ldr	r0, [r5, #4]
   15a9c:	mov	r1, #0
   15aa0:	ldr	r2, [sp, #36]	; 0x24
   15aa4:	sub	r2, r2, r0
   15aa8:	add	r0, r4, r0, lsl #3
   15aac:	lsl	r2, r2, #3
   15ab0:	bl	10e34 <memset@plt>
   15ab4:	ldr	r3, [sp, #36]	; 0x24
   15ab8:	ldr	r1, [sp, #40]	; 0x28
   15abc:	ldr	r8, [sp, #80]	; 0x50
   15ac0:	str	r3, [r5, #4]
   15ac4:	ldr	r7, [sp, #84]	; 0x54
   15ac8:	mvn	r3, #0
   15acc:	mov	r2, fp
   15ad0:	ldr	r6, [sp, #44]	; 0x2c
   15ad4:	ldr	sl, [r4]
   15ad8:	ldr	r5, [r4, #4]
   15adc:	orr	r6, r6, #1
   15ae0:	stm	sp, {r1, r6}
   15ae4:	add	r1, sp, #48	; 0x30
   15ae8:	str	r8, [sp, #12]
   15aec:	mov	r0, r5
   15af0:	str	r1, [sp, #8]
   15af4:	mov	r1, sl
   15af8:	str	r7, [sp, #16]
   15afc:	bl	12864 <__assert_fail@plt+0x1964>
   15b00:	cmp	sl, r0
   15b04:	bhi	15b68 <__assert_fail@plt+0x4c68>
   15b08:	add	r7, r0, #1
   15b0c:	movw	r3, #41316	; 0xa164
   15b10:	movt	r3, #2
   15b14:	cmp	r5, r3
   15b18:	str	r7, [r4]
   15b1c:	beq	15b28 <__assert_fail@plt+0x4c28>
   15b20:	mov	r0, r5
   15b24:	bl	12510 <__assert_fail@plt+0x1610>
   15b28:	mov	r0, r7
   15b2c:	bl	168cc <__assert_fail@plt+0x59cc>
   15b30:	ldr	r3, [sp, #40]	; 0x28
   15b34:	mov	r2, fp
   15b38:	mov	r1, r7
   15b3c:	mov	r5, r0
   15b40:	ldr	lr, [sp, #80]	; 0x50
   15b44:	ldr	ip, [sp, #84]	; 0x54
   15b48:	str	r0, [r4, #4]
   15b4c:	add	r4, sp, #48	; 0x30
   15b50:	stm	sp, {r3, r6}
   15b54:	mvn	r3, #0
   15b58:	str	r4, [sp, #8]
   15b5c:	str	lr, [sp, #12]
   15b60:	str	ip, [sp, #16]
   15b64:	bl	12864 <__assert_fail@plt+0x1964>
   15b68:	ldr	r3, [sp, #28]
   15b6c:	mov	r0, r5
   15b70:	str	r3, [r9]
   15b74:	add	sp, sp, #92	; 0x5c
   15b78:	ldrd	r4, [sp]
   15b7c:	ldrd	r6, [sp, #8]
   15b80:	ldrd	r8, [sp, #16]
   15b84:	ldrd	sl, [sp, #24]
   15b88:	add	sp, sp, #32
   15b8c:	pop	{pc}		; (ldr pc, [sp], #4)
   15b90:	mov	r1, #8
   15b94:	mvn	r3, #-2147483648	; 0x80000000
   15b98:	mov	r0, r6
   15b9c:	str	r1, [sp]
   15ba0:	add	r1, sp, #36	; 0x24
   15ba4:	bl	16b70 <__assert_fail@plt+0x5c70>
   15ba8:	ldrd	r2, [r5, #8]
   15bac:	mov	r4, r0
   15bb0:	str	r0, [r5]
   15bb4:	strd	r2, [r0]
   15bb8:	b	15a98 <__assert_fail@plt+0x4b98>
   15bbc:	bl	10ef4 <abort@plt>
   15bc0:	andeq	sl, r2, r4, ror #4
   15bc4:	ldr	ip, [pc, #536]	; 15de4 <__assert_fail@plt+0x4ee4>
   15bc8:	cmp	r0, #0
   15bcc:	strd	r4, [sp, #-36]!	; 0xffffffdc
   15bd0:	ldrd	r4, [ip, #16]
   15bd4:	strd	r6, [sp, #8]
   15bd8:	mov	r6, r1
   15bdc:	mov	r7, r0
   15be0:	strd	r8, [sp, #16]
   15be4:	mov	r9, #10
   15be8:	strd	sl, [sp, #24]
   15bec:	mov	sl, r2
   15bf0:	mov	fp, r3
   15bf4:	str	lr, [sp, #32]
   15bf8:	clz	lr, r1
   15bfc:	sub	sp, sp, #92	; 0x5c
   15c00:	ldrd	r2, [ip]
   15c04:	lsr	lr, lr, #5
   15c08:	moveq	lr, #1
   15c0c:	ldrd	r0, [ip, #8]
   15c10:	cmp	lr, #0
   15c14:	strd	r4, [sp, #56]	; 0x38
   15c18:	ldrd	r4, [ip, #40]	; 0x28
   15c1c:	str	lr, [sp, #28]
   15c20:	strd	r2, [sp, #40]	; 0x28
   15c24:	ldrd	r2, [ip, #24]
   15c28:	strd	r0, [sp, #48]	; 0x30
   15c2c:	ldrd	r0, [ip, #32]
   15c30:	str	r9, [sp, #40]	; 0x28
   15c34:	strd	r2, [sp, #64]	; 0x40
   15c38:	strd	r4, [sp, #80]	; 0x50
   15c3c:	strd	r0, [sp, #72]	; 0x48
   15c40:	bne	15de0 <__assert_fail@plt+0x4ee0>
   15c44:	movw	r5, #41200	; 0xa0f0
   15c48:	movt	r5, #2
   15c4c:	str	r7, [sp, #80]	; 0x50
   15c50:	str	r6, [sp, #84]	; 0x54
   15c54:	bl	10e1c <__errno_location@plt>
   15c58:	ldr	r3, [r0]
   15c5c:	mov	r8, r0
   15c60:	ldr	r2, [r5, #4]
   15c64:	ldr	r4, [r5]
   15c68:	str	r3, [sp, #24]
   15c6c:	cmp	r2, #0
   15c70:	movgt	r1, r9
   15c74:	bgt	15cdc <__assert_fail@plt+0x4ddc>
   15c78:	add	r3, r5, #8
   15c7c:	str	r2, [sp, #36]	; 0x24
   15c80:	rsb	r2, r2, #1
   15c84:	cmp	r4, r3
   15c88:	beq	15db4 <__assert_fail@plt+0x4eb4>
   15c8c:	mov	r1, #8
   15c90:	mov	r0, r4
   15c94:	mvn	r3, #-2147483648	; 0x80000000
   15c98:	str	r1, [sp]
   15c9c:	add	r1, sp, #36	; 0x24
   15ca0:	bl	16b70 <__assert_fail@plt+0x5c70>
   15ca4:	mov	r4, r0
   15ca8:	str	r0, [r5]
   15cac:	ldr	r0, [r5, #4]
   15cb0:	mov	r1, #0
   15cb4:	ldr	r2, [sp, #36]	; 0x24
   15cb8:	sub	r2, r2, r0
   15cbc:	add	r0, r4, r0, lsl #3
   15cc0:	lsl	r2, r2, #3
   15cc4:	bl	10e34 <memset@plt>
   15cc8:	ldr	r3, [sp, #36]	; 0x24
   15ccc:	ldr	r1, [sp, #40]	; 0x28
   15cd0:	ldr	r7, [sp, #80]	; 0x50
   15cd4:	str	r3, [r5, #4]
   15cd8:	ldr	r6, [sp, #84]	; 0x54
   15cdc:	mov	r3, fp
   15ce0:	mov	r2, sl
   15ce4:	ldr	r0, [sp, #44]	; 0x2c
   15ce8:	ldr	r9, [r4]
   15cec:	ldr	r5, [r4, #4]
   15cf0:	orr	r0, r0, #1
   15cf4:	str	r1, [sp]
   15cf8:	add	r1, sp, #48	; 0x30
   15cfc:	str	r0, [sp, #4]
   15d00:	str	r1, [sp, #8]
   15d04:	mov	r1, r9
   15d08:	str	r7, [sp, #12]
   15d0c:	str	r6, [sp, #16]
   15d10:	str	r0, [sp, #28]
   15d14:	mov	r0, r5
   15d18:	bl	12864 <__assert_fail@plt+0x1964>
   15d1c:	cmp	r9, r0
   15d20:	bhi	15d8c <__assert_fail@plt+0x4e8c>
   15d24:	add	r6, r0, #1
   15d28:	movw	r3, #41316	; 0xa164
   15d2c:	movt	r3, #2
   15d30:	cmp	r5, r3
   15d34:	str	r6, [r4]
   15d38:	beq	15d44 <__assert_fail@plt+0x4e44>
   15d3c:	mov	r0, r5
   15d40:	bl	12510 <__assert_fail@plt+0x1610>
   15d44:	mov	r0, r6
   15d48:	bl	168cc <__assert_fail@plt+0x59cc>
   15d4c:	ldr	lr, [sp, #40]	; 0x28
   15d50:	mov	r1, r6
   15d54:	mov	r3, fp
   15d58:	mov	r2, sl
   15d5c:	mov	r5, r0
   15d60:	ldr	r6, [sp, #80]	; 0x50
   15d64:	ldr	ip, [sp, #84]	; 0x54
   15d68:	str	r0, [r4, #4]
   15d6c:	str	lr, [sp]
   15d70:	ldr	lr, [sp, #28]
   15d74:	str	lr, [sp, #4]
   15d78:	add	lr, sp, #48	; 0x30
   15d7c:	str	r6, [sp, #12]
   15d80:	str	lr, [sp, #8]
   15d84:	str	ip, [sp, #16]
   15d88:	bl	12864 <__assert_fail@plt+0x1964>
   15d8c:	ldr	r3, [sp, #24]
   15d90:	mov	r0, r5
   15d94:	str	r3, [r8]
   15d98:	add	sp, sp, #92	; 0x5c
   15d9c:	ldrd	r4, [sp]
   15da0:	ldrd	r6, [sp, #8]
   15da4:	ldrd	r8, [sp, #16]
   15da8:	ldrd	sl, [sp, #24]
   15dac:	add	sp, sp, #32
   15db0:	pop	{pc}		; (ldr pc, [sp], #4)
   15db4:	mov	r1, #8
   15db8:	mvn	r3, #-2147483648	; 0x80000000
   15dbc:	ldr	r0, [sp, #28]
   15dc0:	str	r1, [sp]
   15dc4:	add	r1, sp, #36	; 0x24
   15dc8:	bl	16b70 <__assert_fail@plt+0x5c70>
   15dcc:	ldrd	r2, [r5, #8]
   15dd0:	mov	r4, r0
   15dd4:	str	r0, [r5]
   15dd8:	strd	r2, [r0]
   15ddc:	b	15cac <__assert_fail@plt+0x4dac>
   15de0:	bl	10ef4 <abort@plt>
   15de4:	andeq	sl, r2, r4, ror #4
   15de8:	ldr	r3, [pc]	; 15df0 <__assert_fail@plt+0x4ef0>
   15dec:	b	14250 <__assert_fail@plt+0x3350>
   15df0:	andeq	sl, r2, r0, lsl #2
   15df4:	strd	r4, [sp, #-36]!	; 0xffffffdc
   15df8:	movw	r4, #41200	; 0xa0f0
   15dfc:	movt	r4, #2
   15e00:	strd	r6, [sp, #8]
   15e04:	strd	r8, [sp, #16]
   15e08:	strd	sl, [sp, #24]
   15e0c:	mov	sl, r0
   15e10:	mov	fp, r1
   15e14:	str	lr, [sp, #32]
   15e18:	sub	sp, sp, #44	; 0x2c
   15e1c:	bl	10e1c <__errno_location@plt>
   15e20:	ldr	r3, [r0]
   15e24:	mov	r8, r0
   15e28:	ldr	r2, [r4, #4]
   15e2c:	ldr	r5, [r4]
   15e30:	str	r3, [sp, #28]
   15e34:	cmp	r2, #0
   15e38:	bgt	15e94 <__assert_fail@plt+0x4f94>
   15e3c:	add	r3, r4, #8
   15e40:	str	r2, [sp, #36]	; 0x24
   15e44:	rsb	r2, r2, #1
   15e48:	cmp	r5, r3
   15e4c:	beq	15f70 <__assert_fail@plt+0x5070>
   15e50:	mov	r1, #8
   15e54:	mov	r0, r5
   15e58:	mvn	r3, #-2147483648	; 0x80000000
   15e5c:	str	r1, [sp]
   15e60:	add	r1, sp, #36	; 0x24
   15e64:	bl	16b70 <__assert_fail@plt+0x5c70>
   15e68:	mov	r5, r0
   15e6c:	str	r0, [r4]
   15e70:	ldr	r0, [r4, #4]
   15e74:	mov	r1, #0
   15e78:	ldr	r2, [sp, #36]	; 0x24
   15e7c:	sub	r2, r2, r0
   15e80:	add	r0, r5, r0, lsl #3
   15e84:	lsl	r2, r2, #3
   15e88:	bl	10e34 <memset@plt>
   15e8c:	ldr	r3, [sp, #36]	; 0x24
   15e90:	str	r3, [r4, #4]
   15e94:	ldr	ip, [r4, #16]
   15e98:	mov	r3, fp
   15e9c:	mov	r2, sl
   15ea0:	ldr	r7, [r4, #20]
   15ea4:	ldr	r0, [pc, #240]	; 15f9c <__assert_fail@plt+0x509c>
   15ea8:	ldr	r9, [r5]
   15eac:	orr	r7, r7, #1
   15eb0:	ldr	r6, [r5, #4]
   15eb4:	str	ip, [sp]
   15eb8:	ldr	ip, [r4, #56]	; 0x38
   15ebc:	mov	r1, r9
   15ec0:	str	r7, [sp, #4]
   15ec4:	ldr	lr, [r4, #60]	; 0x3c
   15ec8:	str	r0, [sp, #8]
   15ecc:	mov	r0, r6
   15ed0:	str	ip, [sp, #12]
   15ed4:	str	lr, [sp, #16]
   15ed8:	bl	12864 <__assert_fail@plt+0x1964>
   15edc:	cmp	r9, r0
   15ee0:	bhi	15f48 <__assert_fail@plt+0x5048>
   15ee4:	add	r9, r0, #1
   15ee8:	movw	r3, #41316	; 0xa164
   15eec:	movt	r3, #2
   15ef0:	cmp	r6, r3
   15ef4:	str	r9, [r5]
   15ef8:	beq	15f04 <__assert_fail@plt+0x5004>
   15efc:	mov	r0, r6
   15f00:	bl	12510 <__assert_fail@plt+0x1610>
   15f04:	mov	r0, r9
   15f08:	bl	168cc <__assert_fail@plt+0x59cc>
   15f0c:	ldr	ip, [r4, #16]
   15f10:	mov	r1, r9
   15f14:	mov	r3, fp
   15f18:	mov	r2, sl
   15f1c:	mov	r6, r0
   15f20:	ldr	r9, [r4, #56]	; 0x38
   15f24:	ldr	lr, [r4, #60]	; 0x3c
   15f28:	str	r0, [r5, #4]
   15f2c:	str	ip, [sp]
   15f30:	ldr	ip, [pc, #100]	; 15f9c <__assert_fail@plt+0x509c>
   15f34:	str	r7, [sp, #4]
   15f38:	str	ip, [sp, #8]
   15f3c:	str	r9, [sp, #12]
   15f40:	str	lr, [sp, #16]
   15f44:	bl	12864 <__assert_fail@plt+0x1964>
   15f48:	ldr	r3, [sp, #28]
   15f4c:	mov	r0, r6
   15f50:	str	r3, [r8]
   15f54:	add	sp, sp, #44	; 0x2c
   15f58:	ldrd	r4, [sp]
   15f5c:	ldrd	r6, [sp, #8]
   15f60:	ldrd	r8, [sp, #16]
   15f64:	ldrd	sl, [sp, #24]
   15f68:	add	sp, sp, #32
   15f6c:	pop	{pc}		; (ldr pc, [sp], #4)
   15f70:	mov	r0, #8
   15f74:	mvn	r3, #-2147483648	; 0x80000000
   15f78:	add	r1, sp, #36	; 0x24
   15f7c:	str	r0, [sp]
   15f80:	mov	r0, #0
   15f84:	bl	16b70 <__assert_fail@plt+0x5c70>
   15f88:	ldrd	r2, [r4, #8]
   15f8c:	mov	r5, r0
   15f90:	str	r0, [r4]
   15f94:	strd	r2, [r0]
   15f98:	b	15e70 <__assert_fail@plt+0x4f70>
   15f9c:	andeq	sl, r2, r8, lsl #2
   15fa0:	ldr	r3, [pc, #4]	; 15fac <__assert_fail@plt+0x50ac>
   15fa4:	mvn	r2, #0
   15fa8:	b	14250 <__assert_fail@plt+0x3350>
   15fac:	andeq	sl, r2, r0, lsl #2
   15fb0:	strd	r4, [sp, #-36]!	; 0xffffffdc
   15fb4:	movw	r4, #41200	; 0xa0f0
   15fb8:	movt	r4, #2
   15fbc:	strd	r6, [sp, #8]
   15fc0:	strd	r8, [sp, #16]
   15fc4:	strd	sl, [sp, #24]
   15fc8:	mov	sl, r0
   15fcc:	str	lr, [sp, #32]
   15fd0:	sub	sp, sp, #44	; 0x2c
   15fd4:	bl	10e1c <__errno_location@plt>
   15fd8:	ldr	r3, [r0]
   15fdc:	mov	r8, r0
   15fe0:	ldr	r2, [r4, #4]
   15fe4:	ldr	r5, [r4]
   15fe8:	str	r3, [sp, #28]
   15fec:	cmp	r2, #0
   15ff0:	bgt	1604c <__assert_fail@plt+0x514c>
   15ff4:	add	r3, r4, #8
   15ff8:	str	r2, [sp, #36]	; 0x24
   15ffc:	rsb	r2, r2, #1
   16000:	cmp	r5, r3
   16004:	beq	16114 <__assert_fail@plt+0x5214>
   16008:	mov	r1, #8
   1600c:	mov	r0, r5
   16010:	mvn	r3, #-2147483648	; 0x80000000
   16014:	str	r1, [sp]
   16018:	add	r1, sp, #36	; 0x24
   1601c:	bl	16b70 <__assert_fail@plt+0x5c70>
   16020:	mov	r5, r0
   16024:	str	r0, [r4]
   16028:	ldr	r0, [r4, #4]
   1602c:	mov	r1, #0
   16030:	ldr	r2, [sp, #36]	; 0x24
   16034:	sub	r2, r2, r0
   16038:	add	r0, r5, r0, lsl #3
   1603c:	lsl	r2, r2, #3
   16040:	bl	10e34 <memset@plt>
   16044:	ldr	r3, [sp, #36]	; 0x24
   16048:	str	r3, [r4, #4]
   1604c:	ldr	ip, [r4, #16]
   16050:	mvn	r3, #0
   16054:	mov	r2, sl
   16058:	ldr	r7, [r4, #20]
   1605c:	ldr	fp, [pc, #220]	; 16140 <__assert_fail@plt+0x5240>
   16060:	ldr	r9, [r5]
   16064:	orr	r7, r7, #1
   16068:	ldr	r6, [r5, #4]
   1606c:	str	ip, [sp]
   16070:	ldr	ip, [r4, #56]	; 0x38
   16074:	mov	r1, r9
   16078:	stmib	sp, {r7, fp}
   1607c:	ldr	lr, [r4, #60]	; 0x3c
   16080:	mov	r0, r6
   16084:	str	ip, [sp, #12]
   16088:	str	lr, [sp, #16]
   1608c:	bl	12864 <__assert_fail@plt+0x1964>
   16090:	cmp	r9, r0
   16094:	bhi	160ec <__assert_fail@plt+0x51ec>
   16098:	add	r9, r0, #1
   1609c:	movw	r3, #41316	; 0xa164
   160a0:	movt	r3, #2
   160a4:	cmp	r6, r3
   160a8:	str	r9, [r5]
   160ac:	beq	160b8 <__assert_fail@plt+0x51b8>
   160b0:	mov	r0, r6
   160b4:	bl	12510 <__assert_fail@plt+0x1610>
   160b8:	mov	r0, r9
   160bc:	bl	168cc <__assert_fail@plt+0x59cc>
   160c0:	ldr	r3, [r4, #16]
   160c4:	mov	r2, sl
   160c8:	mov	r1, r9
   160cc:	mov	r6, r0
   160d0:	ldr	lr, [r4, #56]	; 0x38
   160d4:	ldr	ip, [r4, #60]	; 0x3c
   160d8:	str	r0, [r5, #4]
   160dc:	stm	sp, {r3, r7, fp, lr}
   160e0:	mvn	r3, #0
   160e4:	str	ip, [sp, #16]
   160e8:	bl	12864 <__assert_fail@plt+0x1964>
   160ec:	ldr	r3, [sp, #28]
   160f0:	mov	r0, r6
   160f4:	str	r3, [r8]
   160f8:	add	sp, sp, #44	; 0x2c
   160fc:	ldrd	r4, [sp]
   16100:	ldrd	r6, [sp, #8]
   16104:	ldrd	r8, [sp, #16]
   16108:	ldrd	sl, [sp, #24]
   1610c:	add	sp, sp, #32
   16110:	pop	{pc}		; (ldr pc, [sp], #4)
   16114:	mov	r0, #8
   16118:	mvn	r3, #-2147483648	; 0x80000000
   1611c:	add	r1, sp, #36	; 0x24
   16120:	str	r0, [sp]
   16124:	mov	r0, #0
   16128:	bl	16b70 <__assert_fail@plt+0x5c70>
   1612c:	ldrd	r2, [r4, #8]
   16130:	mov	r5, r0
   16134:	str	r0, [r4]
   16138:	strd	r2, [r0]
   1613c:	b	16028 <__assert_fail@plt+0x5128>
   16140:	andeq	sl, r2, r8, lsl #2
   16144:	cmp	r1, #0
   16148:	strd	r4, [sp, #-16]!
   1614c:	mov	ip, r3
   16150:	str	r6, [sp, #8]
   16154:	mov	r4, r0
   16158:	str	lr, [sp, #12]
   1615c:	sub	sp, sp, #32
   16160:	ldr	r5, [sp, #48]	; 0x30
   16164:	ldr	r6, [sp, #52]	; 0x34
   16168:	beq	162ac <__assert_fail@plt+0x53ac>
   1616c:	mov	r3, r1
   16170:	mov	r1, #1
   16174:	stm	sp, {r2, ip}
   16178:	movw	r2, #35776	; 0x8bc0
   1617c:	movt	r2, #1
   16180:	bl	10e58 <__fprintf_chk@plt>
   16184:	mov	r2, #5
   16188:	movw	r1, #35796	; 0x8bd4
   1618c:	movt	r1, #1
   16190:	mov	r0, #0
   16194:	bl	10d38 <dcgettext@plt>
   16198:	movw	ip, #2022	; 0x7e6
   1619c:	mov	r3, r0
   161a0:	mov	r1, #1
   161a4:	movw	r2, #36524	; 0x8eac
   161a8:	movt	r2, #1
   161ac:	mov	r0, r4
   161b0:	str	ip, [sp]
   161b4:	bl	10e58 <__fprintf_chk@plt>
   161b8:	mov	r1, r4
   161bc:	mov	r0, #10
   161c0:	bl	10d2c <fputc_unlocked@plt>
   161c4:	mov	r2, #5
   161c8:	movw	r1, #35800	; 0x8bd8
   161cc:	movt	r1, #1
   161d0:	mov	r0, #0
   161d4:	bl	10d38 <dcgettext@plt>
   161d8:	mov	r2, r0
   161dc:	mov	r1, #1
   161e0:	movw	r3, #35972	; 0x8c84
   161e4:	movt	r3, #1
   161e8:	mov	r0, r4
   161ec:	bl	10e58 <__fprintf_chk@plt>
   161f0:	mov	r1, r4
   161f4:	mov	r0, #10
   161f8:	bl	10d2c <fputc_unlocked@plt>
   161fc:	cmp	r6, #9
   16200:	ldrls	pc, [pc, r6, lsl #2]
   16204:	b	16518 <__assert_fail@plt+0x5618>
   16208:	muleq	r1, r8, r2
   1620c:	andeq	r6, r1, r8, asr #5
   16210:	andeq	r6, r1, r4, lsl #6
   16214:	andeq	r6, r1, r4, asr #6
   16218:	andeq	r6, r1, ip, lsl #7
   1621c:	andeq	r6, r1, r4, asr #7
   16220:	andeq	r6, r1, ip, lsl #8
   16224:	andeq	r6, r1, r0, ror #8
   16228:			; <UNDEFINED> instruction: 0x000164b8
   1622c:	andeq	r6, r1, r0, lsr r2
   16230:	movw	r1, #36276	; 0x8db4
   16234:	movt	r1, #1
   16238:	mov	r2, #5
   1623c:	mov	r0, #0
   16240:	bl	10d38 <dcgettext@plt>
   16244:	ldr	lr, [r5, #4]
   16248:	mov	r2, r0
   1624c:	mov	r1, #1
   16250:	mov	r0, r4
   16254:	ldr	r3, [r5, #8]
   16258:	ldr	ip, [r5, #32]
   1625c:	str	lr, [sp]
   16260:	ldr	lr, [r5, #12]
   16264:	str	ip, [sp, #28]
   16268:	ldr	ip, [r5, #28]
   1626c:	str	r3, [sp, #4]
   16270:	ldr	r3, [r5, #16]
   16274:	str	lr, [sp, #8]
   16278:	ldr	lr, [r5, #20]
   1627c:	str	ip, [sp, #24]
   16280:	ldr	ip, [r5, #24]
   16284:	str	r3, [sp, #12]
   16288:	ldr	r3, [r5]
   1628c:	str	lr, [sp, #16]
   16290:	str	ip, [sp, #20]
   16294:	bl	10e58 <__fprintf_chk@plt>
   16298:	add	sp, sp, #32
   1629c:	ldrd	r4, [sp]
   162a0:	ldr	r6, [sp, #8]
   162a4:	add	sp, sp, #12
   162a8:	pop	{pc}		; (ldr pc, [sp], #4)
   162ac:	mov	r3, r2
   162b0:	mov	r1, #1
   162b4:	str	ip, [sp]
   162b8:	movw	r2, #35788	; 0x8bcc
   162bc:	movt	r2, #1
   162c0:	bl	10e58 <__fprintf_chk@plt>
   162c4:	b	16184 <__assert_fail@plt+0x5284>
   162c8:	mov	r2, #5
   162cc:	movw	r1, #36008	; 0x8ca8
   162d0:	movt	r1, #1
   162d4:	mov	r0, #0
   162d8:	bl	10d38 <dcgettext@plt>
   162dc:	ldr	r3, [r5]
   162e0:	mov	r2, r0
   162e4:	mov	r1, #1
   162e8:	mov	r0, r4
   162ec:	add	sp, sp, #32
   162f0:	ldrd	r4, [sp]
   162f4:	ldr	r6, [sp, #8]
   162f8:	ldr	lr, [sp, #12]
   162fc:	add	sp, sp, #16
   16300:	b	10e58 <__fprintf_chk@plt>
   16304:	mov	r2, #5
   16308:	movw	r1, #36024	; 0x8cb8
   1630c:	movt	r1, #1
   16310:	mov	r0, #0
   16314:	bl	10d38 <dcgettext@plt>
   16318:	ldm	r5, {r3, ip}
   1631c:	mov	r2, r0
   16320:	mov	r1, #1
   16324:	mov	r0, r4
   16328:	str	ip, [sp, #48]	; 0x30
   1632c:	add	sp, sp, #32
   16330:	ldrd	r4, [sp]
   16334:	ldr	r6, [sp, #8]
   16338:	ldr	lr, [sp, #12]
   1633c:	add	sp, sp, #16
   16340:	b	10e58 <__fprintf_chk@plt>
   16344:	mov	r2, #5
   16348:	movw	r1, #36048	; 0x8cd0
   1634c:	movt	r1, #1
   16350:	mov	r0, #0
   16354:	bl	10d38 <dcgettext@plt>
   16358:	ldm	r5, {r3, lr}
   1635c:	mov	r2, r0
   16360:	mov	r1, #1
   16364:	mov	r0, r4
   16368:	ldr	ip, [r5, #8]
   1636c:	str	lr, [sp, #48]	; 0x30
   16370:	str	ip, [sp, #52]	; 0x34
   16374:	add	sp, sp, #32
   16378:	ldrd	r4, [sp]
   1637c:	ldr	r6, [sp, #8]
   16380:	ldr	lr, [sp, #12]
   16384:	add	sp, sp, #16
   16388:	b	10e58 <__fprintf_chk@plt>
   1638c:	mov	r2, #5
   16390:	movw	r1, #36076	; 0x8cec
   16394:	movt	r1, #1
   16398:	mov	r0, #0
   1639c:	bl	10d38 <dcgettext@plt>
   163a0:	ldmib	r5, {r3, ip, lr}
   163a4:	mov	r2, r0
   163a8:	mov	r1, #1
   163ac:	mov	r0, r4
   163b0:	str	r3, [sp]
   163b4:	ldr	r3, [r5]
   163b8:	stmib	sp, {ip, lr}
   163bc:	bl	10e58 <__fprintf_chk@plt>
   163c0:	b	16298 <__assert_fail@plt+0x5398>
   163c4:	mov	r2, #5
   163c8:	movw	r1, #36108	; 0x8d0c
   163cc:	movt	r1, #1
   163d0:	mov	r0, #0
   163d4:	bl	10d38 <dcgettext@plt>
   163d8:	ldmib	r5, {ip, lr}
   163dc:	mov	r2, r0
   163e0:	mov	r1, #1
   163e4:	mov	r0, r4
   163e8:	ldr	r3, [r5, #16]
   163ec:	str	ip, [sp]
   163f0:	ldr	ip, [r5, #12]
   163f4:	str	r3, [sp, #12]
   163f8:	ldr	r3, [r5]
   163fc:	str	lr, [sp, #4]
   16400:	str	ip, [sp, #8]
   16404:	bl	10e58 <__fprintf_chk@plt>
   16408:	b	16298 <__assert_fail@plt+0x5398>
   1640c:	mov	r2, #5
   16410:	movw	r1, #36144	; 0x8d30
   16414:	movt	r1, #1
   16418:	mov	r0, #0
   1641c:	bl	10d38 <dcgettext@plt>
   16420:	ldr	lr, [r5, #4]
   16424:	mov	r2, r0
   16428:	mov	r1, #1
   1642c:	mov	r0, r4
   16430:	ldr	r3, [r5, #8]
   16434:	ldr	ip, [r5, #20]
   16438:	str	lr, [sp]
   1643c:	ldr	lr, [r5, #12]
   16440:	str	ip, [sp, #16]
   16444:	ldr	ip, [r5, #16]
   16448:	str	r3, [sp, #4]
   1644c:	ldr	r3, [r5]
   16450:	str	lr, [sp, #8]
   16454:	str	ip, [sp, #12]
   16458:	bl	10e58 <__fprintf_chk@plt>
   1645c:	b	16298 <__assert_fail@plt+0x5398>
   16460:	mov	r2, #5
   16464:	movw	r1, #36184	; 0x8d58
   16468:	movt	r1, #1
   1646c:	mov	r0, #0
   16470:	bl	10d38 <dcgettext@plt>
   16474:	ldmib	r5, {r3, ip}
   16478:	mov	r2, r0
   1647c:	mov	r1, #1
   16480:	mov	r0, r4
   16484:	ldr	lr, [r5, #24]
   16488:	str	r3, [sp]
   1648c:	ldr	r3, [r5, #12]
   16490:	str	lr, [sp, #20]
   16494:	ldr	lr, [r5, #20]
   16498:	str	ip, [sp, #4]
   1649c:	ldr	ip, [r5, #16]
   164a0:	str	r3, [sp, #8]
   164a4:	ldr	r3, [r5]
   164a8:	str	ip, [sp, #12]
   164ac:	str	lr, [sp, #16]
   164b0:	bl	10e58 <__fprintf_chk@plt>
   164b4:	b	16298 <__assert_fail@plt+0x5398>
   164b8:	mov	r2, #5
   164bc:	movw	r1, #36228	; 0x8d84
   164c0:	movt	r1, #1
   164c4:	mov	r0, #0
   164c8:	bl	10d38 <dcgettext@plt>
   164cc:	ldmib	r5, {ip, lr}
   164d0:	mov	r2, r0
   164d4:	mov	r1, #1
   164d8:	mov	r0, r4
   164dc:	ldr	r3, [r5, #28]
   164e0:	str	ip, [sp]
   164e4:	ldr	ip, [r5, #12]
   164e8:	str	r3, [sp, #24]
   164ec:	ldr	r3, [r5, #24]
   164f0:	str	lr, [sp, #4]
   164f4:	ldr	lr, [r5, #16]
   164f8:	str	ip, [sp, #8]
   164fc:	ldr	ip, [r5, #20]
   16500:	str	r3, [sp, #20]
   16504:	ldr	r3, [r5]
   16508:	str	lr, [sp, #12]
   1650c:	str	ip, [sp, #16]
   16510:	bl	10e58 <__fprintf_chk@plt>
   16514:	b	16298 <__assert_fail@plt+0x5398>
   16518:	movw	r1, #36328	; 0x8de8
   1651c:	movt	r1, #1
   16520:	b	16238 <__assert_fail@plt+0x5338>
   16524:	strd	r4, [sp, #-12]!
   16528:	str	lr, [sp, #8]
   1652c:	sub	sp, sp, #12
   16530:	ldr	r5, [sp, #24]
   16534:	ldr	ip, [r5]
   16538:	cmp	ip, #0
   1653c:	beq	16558 <__assert_fail@plt+0x5658>
   16540:	mov	lr, r5
   16544:	mov	ip, #0
   16548:	ldr	r4, [lr, #4]!
   1654c:	add	ip, ip, #1
   16550:	cmp	r4, #0
   16554:	bne	16548 <__assert_fail@plt+0x5648>
   16558:	stm	sp, {r5, ip}
   1655c:	bl	16144 <__assert_fail@plt+0x5244>
   16560:	add	sp, sp, #12
   16564:	ldrd	r4, [sp]
   16568:	add	sp, sp, #8
   1656c:	pop	{pc}		; (ldr pc, [sp], #4)
   16570:	push	{lr}		; (str lr, [sp, #-4]!)
   16574:	sub	sp, sp, #52	; 0x34
   16578:	ldr	ip, [sp, #56]	; 0x38
   1657c:	ldr	lr, [ip]
   16580:	cmp	lr, #0
   16584:	str	lr, [sp, #8]
   16588:	beq	16620 <__assert_fail@plt+0x5720>
   1658c:	ldr	lr, [ip, #4]
   16590:	cmp	lr, #0
   16594:	str	lr, [sp, #12]
   16598:	beq	16634 <__assert_fail@plt+0x5734>
   1659c:	ldr	lr, [ip, #8]
   165a0:	cmp	lr, #0
   165a4:	str	lr, [sp, #16]
   165a8:	beq	1663c <__assert_fail@plt+0x573c>
   165ac:	ldr	lr, [ip, #12]
   165b0:	cmp	lr, #0
   165b4:	str	lr, [sp, #20]
   165b8:	beq	16644 <__assert_fail@plt+0x5744>
   165bc:	ldr	lr, [ip, #16]
   165c0:	cmp	lr, #0
   165c4:	str	lr, [sp, #24]
   165c8:	beq	1664c <__assert_fail@plt+0x574c>
   165cc:	ldr	lr, [ip, #20]
   165d0:	cmp	lr, #0
   165d4:	str	lr, [sp, #28]
   165d8:	beq	16654 <__assert_fail@plt+0x5754>
   165dc:	ldr	lr, [ip, #24]
   165e0:	cmp	lr, #0
   165e4:	str	lr, [sp, #32]
   165e8:	beq	1665c <__assert_fail@plt+0x575c>
   165ec:	ldr	lr, [ip, #28]
   165f0:	cmp	lr, #0
   165f4:	str	lr, [sp, #36]	; 0x24
   165f8:	beq	16664 <__assert_fail@plt+0x5764>
   165fc:	ldr	lr, [ip, #32]
   16600:	cmp	lr, #0
   16604:	str	lr, [sp, #40]	; 0x28
   16608:	beq	1666c <__assert_fail@plt+0x576c>
   1660c:	ldr	ip, [ip, #36]	; 0x24
   16610:	cmp	ip, #0
   16614:	str	ip, [sp, #44]	; 0x2c
   16618:	movne	lr, #10
   1661c:	moveq	lr, #9
   16620:	add	ip, sp, #8
   16624:	stm	sp, {ip, lr}
   16628:	bl	16144 <__assert_fail@plt+0x5244>
   1662c:	add	sp, sp, #52	; 0x34
   16630:	pop	{pc}		; (ldr pc, [sp], #4)
   16634:	mov	lr, #1
   16638:	b	16620 <__assert_fail@plt+0x5720>
   1663c:	mov	lr, #2
   16640:	b	16620 <__assert_fail@plt+0x5720>
   16644:	mov	lr, #3
   16648:	b	16620 <__assert_fail@plt+0x5720>
   1664c:	mov	lr, #4
   16650:	b	16620 <__assert_fail@plt+0x5720>
   16654:	mov	lr, #5
   16658:	b	16620 <__assert_fail@plt+0x5720>
   1665c:	mov	lr, #6
   16660:	b	16620 <__assert_fail@plt+0x5720>
   16664:	mov	lr, #7
   16668:	b	16620 <__assert_fail@plt+0x5720>
   1666c:	mov	lr, #8
   16670:	b	16620 <__assert_fail@plt+0x5720>
   16674:	push	{r3}		; (str r3, [sp, #-4]!)
   16678:	push	{lr}		; (str lr, [sp, #-4]!)
   1667c:	sub	sp, sp, #56	; 0x38
   16680:	ldr	ip, [sp, #64]	; 0x40
   16684:	add	r3, sp, #64	; 0x40
   16688:	str	r3, [sp, #12]
   1668c:	cmp	ip, #0
   16690:	str	ip, [sp, #16]
   16694:	beq	1672c <__assert_fail@plt+0x582c>
   16698:	ldr	ip, [sp, #68]	; 0x44
   1669c:	cmp	ip, #0
   166a0:	str	ip, [sp, #20]
   166a4:	beq	16750 <__assert_fail@plt+0x5850>
   166a8:	ldr	ip, [sp, #72]	; 0x48
   166ac:	cmp	ip, #0
   166b0:	str	ip, [sp, #24]
   166b4:	beq	16758 <__assert_fail@plt+0x5858>
   166b8:	ldr	ip, [sp, #76]	; 0x4c
   166bc:	cmp	ip, #0
   166c0:	str	ip, [sp, #28]
   166c4:	beq	16760 <__assert_fail@plt+0x5860>
   166c8:	ldr	ip, [sp, #80]	; 0x50
   166cc:	cmp	ip, #0
   166d0:	str	ip, [sp, #32]
   166d4:	beq	16768 <__assert_fail@plt+0x5868>
   166d8:	ldr	ip, [sp, #84]	; 0x54
   166dc:	cmp	ip, #0
   166e0:	str	ip, [sp, #36]	; 0x24
   166e4:	beq	16770 <__assert_fail@plt+0x5870>
   166e8:	ldr	ip, [sp, #88]	; 0x58
   166ec:	cmp	ip, #0
   166f0:	str	ip, [sp, #40]	; 0x28
   166f4:	beq	16778 <__assert_fail@plt+0x5878>
   166f8:	ldr	ip, [sp, #92]	; 0x5c
   166fc:	cmp	ip, #0
   16700:	str	ip, [sp, #44]	; 0x2c
   16704:	beq	16780 <__assert_fail@plt+0x5880>
   16708:	ldr	ip, [sp, #96]	; 0x60
   1670c:	cmp	ip, #0
   16710:	str	ip, [sp, #48]	; 0x30
   16714:	beq	16788 <__assert_fail@plt+0x5888>
   16718:	ldr	r3, [sp, #100]	; 0x64
   1671c:	cmp	r3, #0
   16720:	str	r3, [sp, #52]	; 0x34
   16724:	movne	ip, #10
   16728:	moveq	ip, #9
   1672c:	ldr	r3, [sp, #60]	; 0x3c
   16730:	add	lr, sp, #16
   16734:	str	lr, [sp]
   16738:	str	ip, [sp, #4]
   1673c:	bl	16144 <__assert_fail@plt+0x5244>
   16740:	add	sp, sp, #56	; 0x38
   16744:	pop	{lr}		; (ldr lr, [sp], #4)
   16748:	add	sp, sp, #4
   1674c:	bx	lr
   16750:	mov	ip, #1
   16754:	b	1672c <__assert_fail@plt+0x582c>
   16758:	mov	ip, #2
   1675c:	b	1672c <__assert_fail@plt+0x582c>
   16760:	mov	ip, #3
   16764:	b	1672c <__assert_fail@plt+0x582c>
   16768:	mov	ip, #4
   1676c:	b	1672c <__assert_fail@plt+0x582c>
   16770:	mov	ip, #5
   16774:	b	1672c <__assert_fail@plt+0x582c>
   16778:	mov	ip, #6
   1677c:	b	1672c <__assert_fail@plt+0x582c>
   16780:	mov	ip, #7
   16784:	b	1672c <__assert_fail@plt+0x582c>
   16788:	mov	ip, #8
   1678c:	b	1672c <__assert_fail@plt+0x582c>
   16790:	movw	r3, #41292	; 0xa14c
   16794:	movt	r3, #2
   16798:	str	r4, [sp, #-8]!
   1679c:	mov	r0, #10
   167a0:	ldr	r1, [r3]
   167a4:	str	lr, [sp, #4]
   167a8:	bl	10d2c <fputc_unlocked@plt>
   167ac:	mov	r2, #5
   167b0:	movw	r1, #36388	; 0x8e24
   167b4:	movt	r1, #1
   167b8:	mov	r0, #0
   167bc:	bl	10d38 <dcgettext@plt>
   167c0:	mov	r1, r0
   167c4:	movw	r2, #36408	; 0x8e38
   167c8:	movt	r2, #1
   167cc:	mov	r0, #1
   167d0:	bl	10e40 <__printf_chk@plt>
   167d4:	mov	r2, #5
   167d8:	movw	r1, #36432	; 0x8e50
   167dc:	movt	r1, #1
   167e0:	mov	r0, #0
   167e4:	bl	10d38 <dcgettext@plt>
   167e8:	mov	r1, r0
   167ec:	movw	r3, #34652	; 0x875c
   167f0:	movt	r3, #1
   167f4:	movw	r2, #34692	; 0x8784
   167f8:	movt	r2, #1
   167fc:	mov	r0, #1
   16800:	bl	10e40 <__printf_chk@plt>
   16804:	mov	r2, #5
   16808:	movw	r1, #36452	; 0x8e64
   1680c:	movt	r1, #1
   16810:	mov	r0, #0
   16814:	bl	10d38 <dcgettext@plt>
   16818:	mov	r1, r0
   1681c:	movw	r2, #36492	; 0x8e8c
   16820:	movt	r2, #1
   16824:	mov	r0, #1
   16828:	ldr	r4, [sp]
   1682c:	ldr	lr, [sp, #4]
   16830:	add	sp, sp, #8
   16834:	b	10e40 <__printf_chk@plt>
   16838:	strd	r4, [sp, #-16]!
   1683c:	mov	r4, r0
   16840:	mov	r5, r2
   16844:	str	r6, [sp, #8]
   16848:	mov	r6, r1
   1684c:	str	lr, [sp, #12]
   16850:	bl	18130 <__assert_fail@plt+0x7230>
   16854:	cmp	r0, #0
   16858:	beq	1686c <__assert_fail@plt+0x596c>
   1685c:	ldrd	r4, [sp]
   16860:	ldr	r6, [sp, #8]
   16864:	add	sp, sp, #12
   16868:	pop	{pc}		; (ldr pc, [sp], #4)
   1686c:	cmp	r4, #0
   16870:	beq	16880 <__assert_fail@plt+0x5980>
   16874:	cmp	r6, #0
   16878:	cmpne	r5, #0
   1687c:	beq	1685c <__assert_fail@plt+0x595c>
   16880:	bl	16e3c <__assert_fail@plt+0x5f3c>
   16884:	str	r4, [sp, #-8]!
   16888:	str	lr, [sp, #4]
   1688c:	bl	17f58 <__assert_fail@plt+0x7058>
   16890:	cmp	r0, #0
   16894:	beq	168a4 <__assert_fail@plt+0x59a4>
   16898:	ldr	r4, [sp]
   1689c:	add	sp, sp, #4
   168a0:	pop	{pc}		; (ldr pc, [sp], #4)
   168a4:	bl	16e3c <__assert_fail@plt+0x5f3c>
   168a8:	str	r4, [sp, #-8]!
   168ac:	str	lr, [sp, #4]
   168b0:	bl	17f58 <__assert_fail@plt+0x7058>
   168b4:	cmp	r0, #0
   168b8:	beq	168c8 <__assert_fail@plt+0x59c8>
   168bc:	ldr	r4, [sp]
   168c0:	add	sp, sp, #4
   168c4:	pop	{pc}		; (ldr pc, [sp], #4)
   168c8:	bl	16e3c <__assert_fail@plt+0x5f3c>
   168cc:	str	r4, [sp, #-8]!
   168d0:	str	lr, [sp, #4]
   168d4:	bl	17f58 <__assert_fail@plt+0x7058>
   168d8:	cmp	r0, #0
   168dc:	beq	168ec <__assert_fail@plt+0x59ec>
   168e0:	ldr	r4, [sp]
   168e4:	add	sp, sp, #4
   168e8:	pop	{pc}		; (ldr pc, [sp], #4)
   168ec:	bl	16e3c <__assert_fail@plt+0x5f3c>
   168f0:	strd	r4, [sp, #-16]!
   168f4:	mov	r5, r0
   168f8:	mov	r4, r1
   168fc:	str	r6, [sp, #8]
   16900:	str	lr, [sp, #12]
   16904:	bl	17f94 <__assert_fail@plt+0x7094>
   16908:	cmp	r0, #0
   1690c:	beq	16920 <__assert_fail@plt+0x5a20>
   16910:	ldrd	r4, [sp]
   16914:	ldr	r6, [sp, #8]
   16918:	add	sp, sp, #12
   1691c:	pop	{pc}		; (ldr pc, [sp], #4)
   16920:	adds	r4, r4, #0
   16924:	movne	r4, #1
   16928:	cmp	r5, #0
   1692c:	moveq	r4, #1
   16930:	cmp	r4, #0
   16934:	beq	16910 <__assert_fail@plt+0x5a10>
   16938:	bl	16e3c <__assert_fail@plt+0x5f3c>
   1693c:	cmp	r1, #0
   16940:	orreq	r1, r1, #1
   16944:	str	r4, [sp, #-8]!
   16948:	str	lr, [sp, #4]
   1694c:	bl	17f94 <__assert_fail@plt+0x7094>
   16950:	cmp	r0, #0
   16954:	beq	16964 <__assert_fail@plt+0x5a64>
   16958:	ldr	r4, [sp]
   1695c:	add	sp, sp, #4
   16960:	pop	{pc}		; (ldr pc, [sp], #4)
   16964:	bl	16e3c <__assert_fail@plt+0x5f3c>
   16968:	strd	r4, [sp, #-16]!
   1696c:	mov	r4, r0
   16970:	mov	r5, r2
   16974:	str	r6, [sp, #8]
   16978:	mov	r6, r1
   1697c:	str	lr, [sp, #12]
   16980:	bl	18130 <__assert_fail@plt+0x7230>
   16984:	cmp	r0, #0
   16988:	beq	1699c <__assert_fail@plt+0x5a9c>
   1698c:	ldrd	r4, [sp]
   16990:	ldr	r6, [sp, #8]
   16994:	add	sp, sp, #12
   16998:	pop	{pc}		; (ldr pc, [sp], #4)
   1699c:	cmp	r4, #0
   169a0:	beq	169b0 <__assert_fail@plt+0x5ab0>
   169a4:	cmp	r6, #0
   169a8:	cmpne	r5, #0
   169ac:	beq	1698c <__assert_fail@plt+0x5a8c>
   169b0:	bl	16e3c <__assert_fail@plt+0x5f3c>
   169b4:	cmp	r2, #0
   169b8:	cmpne	r1, #0
   169bc:	str	r4, [sp, #-8]!
   169c0:	moveq	r2, #1
   169c4:	str	lr, [sp, #4]
   169c8:	moveq	r1, r2
   169cc:	bl	18130 <__assert_fail@plt+0x7230>
   169d0:	cmp	r0, #0
   169d4:	beq	169e4 <__assert_fail@plt+0x5ae4>
   169d8:	ldr	r4, [sp]
   169dc:	add	sp, sp, #4
   169e0:	pop	{pc}		; (ldr pc, [sp], #4)
   169e4:	bl	16e3c <__assert_fail@plt+0x5f3c>
   169e8:	mov	r2, r1
   169ec:	mov	r1, r0
   169f0:	str	r4, [sp, #-8]!
   169f4:	mov	r0, #0
   169f8:	str	lr, [sp, #4]
   169fc:	bl	18130 <__assert_fail@plt+0x7230>
   16a00:	cmp	r0, #0
   16a04:	beq	16a14 <__assert_fail@plt+0x5b14>
   16a08:	ldr	r4, [sp]
   16a0c:	add	sp, sp, #4
   16a10:	pop	{pc}		; (ldr pc, [sp], #4)
   16a14:	bl	16e3c <__assert_fail@plt+0x5f3c>
   16a18:	cmp	r1, #0
   16a1c:	cmpne	r0, #0
   16a20:	str	r4, [sp, #-8]!
   16a24:	moveq	r2, #1
   16a28:	movne	r2, r1
   16a2c:	str	lr, [sp, #4]
   16a30:	movne	r1, r0
   16a34:	moveq	r1, r2
   16a38:	mov	r0, #0
   16a3c:	bl	18130 <__assert_fail@plt+0x7230>
   16a40:	cmp	r0, #0
   16a44:	beq	16a54 <__assert_fail@plt+0x5b54>
   16a48:	ldr	r4, [sp]
   16a4c:	add	sp, sp, #4
   16a50:	pop	{pc}		; (ldr pc, [sp], #4)
   16a54:	bl	16e3c <__assert_fail@plt+0x5f3c>
   16a58:	cmp	r0, #0
   16a5c:	strd	r4, [sp, #-16]!
   16a60:	mov	r5, r1
   16a64:	ldr	r4, [r1]
   16a68:	str	r6, [sp, #8]
   16a6c:	str	lr, [sp, #12]
   16a70:	beq	16ab8 <__assert_fail@plt+0x5bb8>
   16a74:	lsr	r3, r4, #1
   16a78:	add	r3, r3, #1
   16a7c:	adds	r4, r4, r3
   16a80:	bcs	16ab4 <__assert_fail@plt+0x5bb4>
   16a84:	mov	r2, #1
   16a88:	mov	r1, r4
   16a8c:	bl	18130 <__assert_fail@plt+0x7230>
   16a90:	cmp	r0, #0
   16a94:	beq	16aac <__assert_fail@plt+0x5bac>
   16a98:	ldr	r6, [sp, #8]
   16a9c:	str	r4, [r5]
   16aa0:	ldrd	r4, [sp]
   16aa4:	add	sp, sp, #12
   16aa8:	pop	{pc}		; (ldr pc, [sp], #4)
   16aac:	cmp	r4, #0
   16ab0:	beq	16a98 <__assert_fail@plt+0x5b98>
   16ab4:	bl	16e3c <__assert_fail@plt+0x5f3c>
   16ab8:	cmp	r4, #0
   16abc:	mov	r2, #1
   16ac0:	moveq	r4, #64	; 0x40
   16ac4:	mov	r1, r4
   16ac8:	bl	18130 <__assert_fail@plt+0x7230>
   16acc:	cmp	r0, #0
   16ad0:	bne	16a98 <__assert_fail@plt+0x5b98>
   16ad4:	b	16ab4 <__assert_fail@plt+0x5bb4>
   16ad8:	cmp	r0, #0
   16adc:	strd	r4, [sp, #-16]!
   16ae0:	mov	r5, r1
   16ae4:	ldr	r4, [r1]
   16ae8:	str	r6, [sp, #8]
   16aec:	mov	r6, r2
   16af0:	str	lr, [sp, #12]
   16af4:	beq	16b3c <__assert_fail@plt+0x5c3c>
   16af8:	lsr	r3, r4, #1
   16afc:	add	r3, r3, #1
   16b00:	adds	r4, r4, r3
   16b04:	bcs	16b38 <__assert_fail@plt+0x5c38>
   16b08:	mov	r1, r4
   16b0c:	bl	18130 <__assert_fail@plt+0x7230>
   16b10:	cmp	r0, #0
   16b14:	beq	16b2c <__assert_fail@plt+0x5c2c>
   16b18:	ldr	r6, [sp, #8]
   16b1c:	str	r4, [r5]
   16b20:	ldrd	r4, [sp]
   16b24:	add	sp, sp, #12
   16b28:	pop	{pc}		; (ldr pc, [sp], #4)
   16b2c:	cmp	r4, #0
   16b30:	cmpne	r6, #0
   16b34:	beq	16b18 <__assert_fail@plt+0x5c18>
   16b38:	bl	16e3c <__assert_fail@plt+0x5f3c>
   16b3c:	cmp	r4, #0
   16b40:	bne	16b54 <__assert_fail@plt+0x5c54>
   16b44:	mov	r4, #64	; 0x40
   16b48:	udiv	r4, r4, r2
   16b4c:	cmp	r2, #64	; 0x40
   16b50:	addhi	r4, r4, #1
   16b54:	mov	r2, r6
   16b58:	mov	r1, r4
   16b5c:	mov	r0, #0
   16b60:	bl	18130 <__assert_fail@plt+0x7230>
   16b64:	cmp	r0, #0
   16b68:	bne	16b18 <__assert_fail@plt+0x5c18>
   16b6c:	b	16b38 <__assert_fail@plt+0x5c38>
   16b70:	ldr	ip, [r1]
   16b74:	strd	r4, [sp, #-24]!	; 0xffffffe8
   16b78:	strd	r6, [sp, #8]
   16b7c:	mov	r7, r1
   16b80:	mov	r6, r0
   16b84:	str	r8, [sp, #16]
   16b88:	mvn	r8, r3
   16b8c:	lsr	r8, r8, #31
   16b90:	str	lr, [sp, #20]
   16b94:	asr	r1, ip, #1
   16b98:	ldr	lr, [sp, #24]
   16b9c:	adds	r4, ip, r1
   16ba0:	mvnvs	r4, #-2147483648	; 0x80000000
   16ba4:	cmp	r3, r4
   16ba8:	movge	r1, #0
   16bac:	andlt	r1, r8, #1
   16bb0:	cmp	r1, #0
   16bb4:	movne	r4, r3
   16bb8:	smull	r0, r1, r4, lr
   16bbc:	cmp	r1, r0, asr #31
   16bc0:	bne	16c70 <__assert_fail@plt+0x5d70>
   16bc4:	cmp	r0, #63	; 0x3f
   16bc8:	mov	r5, r0
   16bcc:	ble	16c3c <__assert_fail@plt+0x5d3c>
   16bd0:	cmp	r6, #0
   16bd4:	sub	r1, r4, ip
   16bd8:	streq	r6, [r7]
   16bdc:	cmp	r1, r2
   16be0:	bge	16c10 <__assert_fail@plt+0x5d10>
   16be4:	adds	r4, ip, r2
   16be8:	bvs	16c6c <__assert_fail@plt+0x5d6c>
   16bec:	cmp	r4, r3
   16bf0:	movle	r3, #0
   16bf4:	andgt	r3, r8, #1
   16bf8:	cmp	r3, #0
   16bfc:	bne	16c6c <__assert_fail@plt+0x5d6c>
   16c00:	smull	r0, r1, r4, lr
   16c04:	cmp	r1, r0, asr #31
   16c08:	mov	r5, r0
   16c0c:	bne	16c6c <__assert_fail@plt+0x5d6c>
   16c10:	mov	r1, r5
   16c14:	mov	r0, r6
   16c18:	bl	17f94 <__assert_fail@plt+0x7094>
   16c1c:	cmp	r0, #0
   16c20:	beq	16c50 <__assert_fail@plt+0x5d50>
   16c24:	ldr	r8, [sp, #16]
   16c28:	str	r4, [r7]
   16c2c:	ldrd	r4, [sp]
   16c30:	ldrd	r6, [sp, #8]
   16c34:	add	sp, sp, #20
   16c38:	pop	{pc}		; (ldr pc, [sp], #4)
   16c3c:	mov	r0, #64	; 0x40
   16c40:	sdiv	r4, r0, lr
   16c44:	mls	r5, lr, r4, r0
   16c48:	sub	r5, r0, r5
   16c4c:	b	16bd0 <__assert_fail@plt+0x5cd0>
   16c50:	adds	r5, r5, #0
   16c54:	movne	r5, #1
   16c58:	cmp	r6, #0
   16c5c:	movne	r6, r5
   16c60:	moveq	r6, #1
   16c64:	cmp	r6, #0
   16c68:	beq	16c24 <__assert_fail@plt+0x5d24>
   16c6c:	bl	16e3c <__assert_fail@plt+0x5f3c>
   16c70:	mvn	r0, #-2147483648	; 0x80000000
   16c74:	b	16c40 <__assert_fail@plt+0x5d40>
   16c78:	mov	r1, #1
   16c7c:	str	r4, [sp, #-8]!
   16c80:	str	lr, [sp, #4]
   16c84:	bl	17ee4 <__assert_fail@plt+0x6fe4>
   16c88:	cmp	r0, #0
   16c8c:	beq	16c9c <__assert_fail@plt+0x5d9c>
   16c90:	ldr	r4, [sp]
   16c94:	add	sp, sp, #4
   16c98:	pop	{pc}		; (ldr pc, [sp], #4)
   16c9c:	bl	16e3c <__assert_fail@plt+0x5f3c>
   16ca0:	mov	r1, #1
   16ca4:	str	r4, [sp, #-8]!
   16ca8:	str	lr, [sp, #4]
   16cac:	bl	17ee4 <__assert_fail@plt+0x6fe4>
   16cb0:	cmp	r0, #0
   16cb4:	beq	16cc4 <__assert_fail@plt+0x5dc4>
   16cb8:	ldr	r4, [sp]
   16cbc:	add	sp, sp, #4
   16cc0:	pop	{pc}		; (ldr pc, [sp], #4)
   16cc4:	bl	16e3c <__assert_fail@plt+0x5f3c>
   16cc8:	str	r4, [sp, #-8]!
   16ccc:	str	lr, [sp, #4]
   16cd0:	bl	17ee4 <__assert_fail@plt+0x6fe4>
   16cd4:	cmp	r0, #0
   16cd8:	beq	16ce8 <__assert_fail@plt+0x5de8>
   16cdc:	ldr	r4, [sp]
   16ce0:	add	sp, sp, #4
   16ce4:	pop	{pc}		; (ldr pc, [sp], #4)
   16ce8:	bl	16e3c <__assert_fail@plt+0x5f3c>
   16cec:	str	r4, [sp, #-8]!
   16cf0:	str	lr, [sp, #4]
   16cf4:	bl	17ee4 <__assert_fail@plt+0x6fe4>
   16cf8:	cmp	r0, #0
   16cfc:	beq	16d0c <__assert_fail@plt+0x5e0c>
   16d00:	ldr	r4, [sp]
   16d04:	add	sp, sp, #4
   16d08:	pop	{pc}		; (ldr pc, [sp], #4)
   16d0c:	bl	16e3c <__assert_fail@plt+0x5f3c>
   16d10:	strd	r4, [sp, #-16]!
   16d14:	mov	r4, r1
   16d18:	str	r6, [sp, #8]
   16d1c:	mov	r6, r0
   16d20:	mov	r0, r1
   16d24:	str	lr, [sp, #12]
   16d28:	bl	17f58 <__assert_fail@plt+0x7058>
   16d2c:	subs	r5, r0, #0
   16d30:	beq	16d54 <__assert_fail@plt+0x5e54>
   16d34:	mov	r2, r4
   16d38:	mov	r1, r6
   16d3c:	bl	10cfc <memcpy@plt>
   16d40:	mov	r0, r5
   16d44:	ldrd	r4, [sp]
   16d48:	ldr	r6, [sp, #8]
   16d4c:	add	sp, sp, #12
   16d50:	pop	{pc}		; (ldr pc, [sp], #4)
   16d54:	bl	16e3c <__assert_fail@plt+0x5f3c>
   16d58:	strd	r4, [sp, #-16]!
   16d5c:	mov	r4, r1
   16d60:	str	r6, [sp, #8]
   16d64:	mov	r6, r0
   16d68:	mov	r0, r1
   16d6c:	str	lr, [sp, #12]
   16d70:	bl	17f58 <__assert_fail@plt+0x7058>
   16d74:	subs	r5, r0, #0
   16d78:	beq	16d9c <__assert_fail@plt+0x5e9c>
   16d7c:	mov	r2, r4
   16d80:	mov	r1, r6
   16d84:	bl	10cfc <memcpy@plt>
   16d88:	mov	r0, r5
   16d8c:	ldrd	r4, [sp]
   16d90:	ldr	r6, [sp, #8]
   16d94:	add	sp, sp, #12
   16d98:	pop	{pc}		; (ldr pc, [sp], #4)
   16d9c:	bl	16e3c <__assert_fail@plt+0x5f3c>
   16da0:	strd	r4, [sp, #-16]!
   16da4:	mov	r4, r1
   16da8:	str	r6, [sp, #8]
   16dac:	mov	r6, r0
   16db0:	add	r0, r1, #1
   16db4:	str	lr, [sp, #12]
   16db8:	bl	17f58 <__assert_fail@plt+0x7058>
   16dbc:	subs	r5, r0, #0
   16dc0:	beq	16dec <__assert_fail@plt+0x5eec>
   16dc4:	mov	r3, #0
   16dc8:	mov	r1, r6
   16dcc:	mov	r2, r4
   16dd0:	strb	r3, [r5, r4]
   16dd4:	bl	10cfc <memcpy@plt>
   16dd8:	mov	r0, r5
   16ddc:	ldrd	r4, [sp]
   16de0:	ldr	r6, [sp, #8]
   16de4:	add	sp, sp, #12
   16de8:	pop	{pc}		; (ldr pc, [sp], #4)
   16dec:	bl	16e3c <__assert_fail@plt+0x5f3c>
   16df0:	strd	r4, [sp, #-16]!
   16df4:	str	r6, [sp, #8]
   16df8:	mov	r6, r0
   16dfc:	str	lr, [sp, #12]
   16e00:	bl	10e04 <strlen@plt>
   16e04:	add	r4, r0, #1
   16e08:	mov	r0, r4
   16e0c:	bl	17f58 <__assert_fail@plt+0x7058>
   16e10:	subs	r5, r0, #0
   16e14:	beq	16e38 <__assert_fail@plt+0x5f38>
   16e18:	mov	r2, r4
   16e1c:	mov	r1, r6
   16e20:	bl	10cfc <memcpy@plt>
   16e24:	mov	r0, r5
   16e28:	ldrd	r4, [sp]
   16e2c:	ldr	r6, [sp, #8]
   16e30:	add	sp, sp, #12
   16e34:	pop	{pc}		; (ldr pc, [sp], #4)
   16e38:	bl	16e3c <__assert_fail@plt+0x5f3c>
   16e3c:	movw	r3, #41196	; 0xa0ec
   16e40:	movt	r3, #2
   16e44:	str	r4, [sp, #-8]!
   16e48:	ldr	r4, [r3]
   16e4c:	mov	r2, #5
   16e50:	movw	r1, #36572	; 0x8edc
   16e54:	movt	r1, #1
   16e58:	mov	r0, #0
   16e5c:	str	lr, [sp, #4]
   16e60:	bl	10d38 <dcgettext@plt>
   16e64:	mov	r3, r0
   16e68:	movw	r2, #34912	; 0x8860
   16e6c:	movt	r2, #1
   16e70:	mov	r1, #0
   16e74:	mov	r0, r4
   16e78:	bl	10da4 <error@plt>
   16e7c:	bl	10ef4 <abort@plt>
   16e80:	cmp	r2, #36	; 0x24
   16e84:	strd	r4, [sp, #-36]!	; 0xffffffdc
   16e88:	strd	r6, [sp, #8]
   16e8c:	strd	r8, [sp, #16]
   16e90:	strd	sl, [sp, #24]
   16e94:	str	lr, [sp, #32]
   16e98:	sub	sp, sp, #36	; 0x24
   16e9c:	bhi	17c78 <__assert_fail@plt+0x6d78>
   16ea0:	cmp	r1, #0
   16ea4:	mov	r5, r1
   16ea8:	mov	r6, r2
   16eac:	addeq	r5, sp, #28
   16eb0:	mov	sl, r0
   16eb4:	mov	r9, r3
   16eb8:	bl	10e1c <__errno_location@plt>
   16ebc:	mov	fp, r0
   16ec0:	mov	r4, #0
   16ec4:	mov	r2, r6
   16ec8:	mov	r3, r4
   16ecc:	mov	r1, r5
   16ed0:	mov	r0, sl
   16ed4:	str	r4, [fp]
   16ed8:	bl	10eb8 <__strtoll_internal@plt>
   16edc:	ldr	r8, [r5]
   16ee0:	mov	r6, r0
   16ee4:	mov	r7, r1
   16ee8:	cmp	r8, sl
   16eec:	beq	16f44 <__assert_fail@plt+0x6044>
   16ef0:	ldr	r4, [fp]
   16ef4:	cmp	r4, #0
   16ef8:	beq	16f08 <__assert_fail@plt+0x6008>
   16efc:	cmp	r4, #34	; 0x22
   16f00:	bne	17048 <__assert_fail@plt+0x6148>
   16f04:	mov	r4, #1
   16f08:	ldr	r3, [sp, #72]	; 0x48
   16f0c:	cmp	r3, #0
   16f10:	beq	16f20 <__assert_fail@plt+0x6020>
   16f14:	ldrb	sl, [r8]
   16f18:	cmp	sl, #0
   16f1c:	bne	1714c <__assert_fail@plt+0x624c>
   16f20:	strd	r6, [r9]
   16f24:	mov	r0, r4
   16f28:	add	sp, sp, #36	; 0x24
   16f2c:	ldrd	r4, [sp]
   16f30:	ldrd	r6, [sp, #8]
   16f34:	ldrd	r8, [sp, #16]
   16f38:	ldrd	sl, [sp, #24]
   16f3c:	add	sp, sp, #32
   16f40:	pop	{pc}		; (ldr pc, [sp], #4)
   16f44:	ldr	r3, [sp, #72]	; 0x48
   16f48:	cmp	r3, r4
   16f4c:	beq	17048 <__assert_fail@plt+0x6148>
   16f50:	ldrb	sl, [sl]
   16f54:	cmp	sl, r4
   16f58:	beq	17048 <__assert_fail@plt+0x6148>
   16f5c:	mov	r1, sl
   16f60:	mov	r0, r3
   16f64:	bl	10e10 <strchr@plt>
   16f68:	cmp	r0, r4
   16f6c:	movne	r6, #1
   16f70:	movne	r7, #0
   16f74:	beq	17048 <__assert_fail@plt+0x6148>
   16f78:	sub	fp, sl, #69	; 0x45
   16f7c:	cmp	fp, #47	; 0x2f
   16f80:	ldrls	pc, [pc, fp, lsl #2]
   16f84:	b	17168 <__assert_fail@plt+0x6268>
   16f88:	andeq	r7, r1, r0, asr r0
   16f8c:	andeq	r7, r1, r8, ror #2
   16f90:	andeq	r7, r1, r0, asr r0
   16f94:	andeq	r7, r1, r8, ror #2
   16f98:	andeq	r7, r1, r8, ror #2
   16f9c:	andeq	r7, r1, r8, ror #2
   16fa0:	andeq	r7, r1, r0, asr r0
   16fa4:	andeq	r7, r1, r8, ror #2
   16fa8:	andeq	r7, r1, r0, asr r0
   16fac:	andeq	r7, r1, r8, ror #2
   16fb0:	andeq	r7, r1, r8, ror #2
   16fb4:	andeq	r7, r1, r0, asr r0
   16fb8:	andeq	r7, r1, r8, ror #2
   16fbc:	andeq	r7, r1, r8, ror #2
   16fc0:	andeq	r7, r1, r8, ror #2
   16fc4:	andeq	r7, r1, r0, asr r0
   16fc8:	andeq	r7, r1, r8, ror #2
   16fcc:	andeq	r7, r1, r8, ror #2
   16fd0:	andeq	r7, r1, r8, ror #2
   16fd4:	andeq	r7, r1, r8, ror #2
   16fd8:	andeq	r7, r1, r0, asr r0
   16fdc:	andeq	r7, r1, r0, asr r0
   16fe0:	andeq	r7, r1, r8, ror #2
   16fe4:	andeq	r7, r1, r8, ror #2
   16fe8:	andeq	r7, r1, r8, ror #2
   16fec:	andeq	r7, r1, r8, ror #2
   16ff0:	andeq	r7, r1, r8, ror #2
   16ff4:	andeq	r7, r1, r8, ror #2
   16ff8:	andeq	r7, r1, r8, ror #2
   16ffc:	andeq	r7, r1, r8, ror #2
   17000:	andeq	r7, r1, r8, ror #2
   17004:	andeq	r7, r1, r8, ror #2
   17008:	andeq	r7, r1, r8, ror #2
   1700c:	andeq	r7, r1, r8, ror #2
   17010:	andeq	r7, r1, r0, asr r0
   17014:	andeq	r7, r1, r8, ror #2
   17018:	andeq	r7, r1, r8, ror #2
   1701c:	andeq	r7, r1, r8, ror #2
   17020:	andeq	r7, r1, r0, asr r0
   17024:	andeq	r7, r1, r8, ror #2
   17028:	andeq	r7, r1, r0, asr r0
   1702c:	andeq	r7, r1, r8, ror #2
   17030:	andeq	r7, r1, r8, ror #2
   17034:	andeq	r7, r1, r8, ror #2
   17038:	andeq	r7, r1, r8, ror #2
   1703c:	andeq	r7, r1, r8, ror #2
   17040:	andeq	r7, r1, r8, ror #2
   17044:	andeq	r7, r1, r0, asr r0
   17048:	mov	r4, #4
   1704c:	b	16f24 <__assert_fail@plt+0x6024>
   17050:	mov	r1, #48	; 0x30
   17054:	ldr	r0, [sp, #72]	; 0x48
   17058:	bl	10e10 <strchr@plt>
   1705c:	cmp	r0, #0
   17060:	beq	17168 <__assert_fail@plt+0x6268>
   17064:	ldrb	r3, [r8, #1]
   17068:	cmp	r3, #68	; 0x44
   1706c:	beq	17850 <__assert_fail@plt+0x6950>
   17070:	cmp	r3, #105	; 0x69
   17074:	beq	17898 <__assert_fail@plt+0x6998>
   17078:	cmp	r3, #66	; 0x42
   1707c:	beq	17850 <__assert_fail@plt+0x6950>
   17080:	cmp	fp, #47	; 0x2f
   17084:	ldrls	pc, [pc, fp, lsl #2]
   17088:	b	17160 <__assert_fail@plt+0x6260>
   1708c:	andeq	r7, r1, r0, ror r7
   17090:	andeq	r7, r1, r0, ror #2
   17094:			; <UNDEFINED> instruction: 0x000175b4
   17098:	andeq	r7, r1, r0, ror #2
   1709c:	andeq	r7, r1, r0, ror #2
   170a0:	andeq	r7, r1, r0, ror #2
   170a4:	andeq	r7, r1, r4, lsl #7
   170a8:	andeq	r7, r1, r0, ror #2
   170ac:	andeq	r7, r1, r0, lsl r7
   170b0:	andeq	r7, r1, r0, ror #2
   170b4:	andeq	r7, r1, r0, ror #2
   170b8:	andeq	r7, r1, r4, lsl r5
   170bc:	andeq	r7, r1, r0, ror #2
   170c0:	andeq	r7, r1, r0, ror #2
   170c4:	andeq	r7, r1, r0, ror #2
   170c8:	andeq	r7, r1, r4, asr r6
   170cc:	andeq	r7, r1, r0, ror #2
   170d0:	andeq	r7, r1, r0, ror #2
   170d4:	andeq	r7, r1, r0, ror #2
   170d8:	andeq	r7, r1, r0, ror #2
   170dc:	andeq	r7, r1, r0, asr r4
   170e0:	andeq	r7, r1, r8, asr r2
   170e4:	andeq	r7, r1, r0, ror #2
   170e8:	andeq	r7, r1, r0, ror #2
   170ec:	andeq	r7, r1, r0, ror #2
   170f0:	andeq	r7, r1, r0, ror #2
   170f4:	andeq	r7, r1, r0, ror #2
   170f8:	andeq	r7, r1, r0, ror #2
   170fc:	andeq	r7, r1, r0, ror #2
   17100:	andeq	r7, r1, r0, lsr #8
   17104:	andeq	r7, r1, r0, lsl r8
   17108:	andeq	r7, r1, r0, ror #2
   1710c:	andeq	r7, r1, r0, ror #2
   17110:	andeq	r7, r1, r0, ror #2
   17114:			; <UNDEFINED> instruction: 0x000175b4
   17118:	andeq	r7, r1, r0, ror #2
   1711c:	andeq	r7, r1, r0, ror #2
   17120:	andeq	r7, r1, r0, ror #2
   17124:	andeq	r7, r1, r4, lsl #7
   17128:	andeq	r7, r1, r0, ror #2
   1712c:	andeq	r7, r1, r0, lsl r7
   17130:	andeq	r7, r1, r0, ror #2
   17134:	andeq	r7, r1, r0, ror #2
   17138:	andeq	r7, r1, r0, ror #2
   1713c:	andeq	r7, r1, r0, ror #2
   17140:	andeq	r7, r1, r0, ror #2
   17144:	andeq	r7, r1, r0, ror #2
   17148:	andeq	r7, r1, r4, asr r6
   1714c:	mov	r0, r3
   17150:	mov	r1, sl
   17154:	bl	10e10 <strchr@plt>
   17158:	cmp	r0, #0
   1715c:	bne	16f78 <__assert_fail@plt+0x6078>
   17160:	orr	r4, r4, #2
   17164:	b	16f20 <__assert_fail@plt+0x6020>
   17168:	mov	fp, #1
   1716c:	mov	lr, #1024	; 0x400
   17170:	sub	sl, sl, #66	; 0x42
   17174:	cmp	sl, #53	; 0x35
   17178:	ldrls	pc, [pc, sl, lsl #2]
   1717c:	b	17160 <__assert_fail@plt+0x6260>
   17180:	strdeq	r7, [r1], -r4
   17184:	andeq	r7, r1, r0, ror #2
   17188:	andeq	r7, r1, r0, ror #2
   1718c:	andeq	r7, r1, r8, ror r7
   17190:	andeq	r7, r1, r0, ror #2
   17194:			; <UNDEFINED> instruction: 0x000175bc
   17198:	andeq	r7, r1, r0, ror #2
   1719c:	andeq	r7, r1, r0, ror #2
   171a0:	andeq	r7, r1, r0, ror #2
   171a4:	andeq	r7, r1, ip, lsl #7
   171a8:	andeq	r7, r1, r0, ror #2
   171ac:	andeq	r7, r1, r8, lsl r7
   171b0:	andeq	r7, r1, r0, ror #2
   171b4:	andeq	r7, r1, r0, ror #2
   171b8:	andeq	r7, r1, ip, lsl r5
   171bc:	andeq	r7, r1, r0, ror #2
   171c0:	andeq	r7, r1, r0, ror #2
   171c4:	andeq	r7, r1, r0, ror #2
   171c8:	andeq	r7, r1, ip, asr r6
   171cc:	andeq	r7, r1, r0, ror #2
   171d0:	andeq	r7, r1, r0, ror #2
   171d4:	andeq	r7, r1, r0, ror #2
   171d8:	andeq	r7, r1, r0, ror #2
   171dc:	andeq	r7, r1, r8, asr r4
   171e0:	andeq	r7, r1, r0, ror #4
   171e4:	andeq	r7, r1, r0, ror #2
   171e8:	andeq	r7, r1, r0, ror #2
   171ec:	andeq	r7, r1, r0, ror #2
   171f0:	andeq	r7, r1, r0, ror #2
   171f4:	andeq	r7, r1, r0, ror #2
   171f8:	andeq	r7, r1, r0, ror #2
   171fc:	andeq	r7, r1, r0, ror #2
   17200:	andeq	r7, r1, r4, lsr #8
   17204:	andeq	r7, r1, ip, ror #6
   17208:	andeq	r7, r1, r0, ror #2
   1720c:	andeq	r7, r1, r0, ror #2
   17210:	andeq	r7, r1, r0, ror #2
   17214:			; <UNDEFINED> instruction: 0x000175bc
   17218:	andeq	r7, r1, r0, ror #2
   1721c:	andeq	r7, r1, r0, ror #2
   17220:	andeq	r7, r1, r0, ror #2
   17224:	andeq	r7, r1, ip, lsl #7
   17228:	andeq	r7, r1, r0, ror #2
   1722c:	andeq	r7, r1, r8, lsl r7
   17230:	andeq	r7, r1, r0, ror #2
   17234:	andeq	r7, r1, r0, ror #2
   17238:	andeq	r7, r1, r0, ror #2
   1723c:	andeq	r7, r1, r0, ror #2
   17240:	andeq	r7, r1, r0, ror #2
   17244:	andeq	r7, r1, r0, ror #2
   17248:	andeq	r7, r1, ip, asr r6
   1724c:	andeq	r7, r1, r0, ror #2
   17250:	andeq	r7, r1, r0, ror #2
   17254:	strdeq	r7, [r1], -r8
   17258:	mov	fp, #1
   1725c:	mov	lr, #1024	; 0x400
   17260:	asr	r3, lr, #31
   17264:	mov	r2, lr
   17268:	mov	r1, #0
   1726c:	cmp	r7, r6, asr #31
   17270:	strd	r2, [sp]
   17274:	bne	17984 <__assert_fail@plt+0x6a84>
   17278:	smull	r2, r3, r6, lr
   1727c:	mov	ip, r2
   17280:	cmp	r1, #0
   17284:	bne	17818 <__assert_fail@plt+0x6918>
   17288:	mov	r6, ip
   1728c:	mov	r7, r3
   17290:	cmp	r3, r6, asr #31
   17294:	mov	ip, r1
   17298:	bne	174b8 <__assert_fail@plt+0x65b8>
   1729c:	smull	r2, r3, r6, lr
   172a0:	mov	sl, r2
   172a4:	subs	r1, ip, #0
   172a8:	bne	17818 <__assert_fail@plt+0x6918>
   172ac:	cmp	r3, sl, asr #31
   172b0:	mov	r6, sl
   172b4:	mov	ip, r1
   172b8:	mov	r7, r3
   172bc:	bne	177b4 <__assert_fail@plt+0x68b4>
   172c0:	smull	r2, r3, r6, lr
   172c4:	mov	sl, r2
   172c8:	subs	r1, ip, #0
   172cc:	bne	17818 <__assert_fail@plt+0x6918>
   172d0:	cmp	r3, sl, asr #31
   172d4:	mov	r6, sl
   172d8:	mov	ip, r1
   172dc:	mov	r7, r3
   172e0:	bne	17558 <__assert_fail@plt+0x6658>
   172e4:	smull	r2, r3, r6, lr
   172e8:	mov	sl, r2
   172ec:	subs	r1, ip, #0
   172f0:	bne	17818 <__assert_fail@plt+0x6918>
   172f4:	cmp	r3, sl, asr #31
   172f8:	mov	r6, sl
   172fc:	mov	ip, r1
   17300:	mov	r7, r3
   17304:	bne	17698 <__assert_fail@plt+0x6798>
   17308:	smull	r2, r3, r6, lr
   1730c:	mov	sl, r2
   17310:	subs	r1, ip, #0
   17314:	bne	17818 <__assert_fail@plt+0x6918>
   17318:	cmp	r3, sl, asr #31
   1731c:	mov	r6, sl
   17320:	mov	ip, r1
   17324:	mov	r7, r3
   17328:	bne	175f8 <__assert_fail@plt+0x66f8>
   1732c:	smull	r2, r3, r6, lr
   17330:	mov	sl, r2
   17334:	cmp	ip, #0
   17338:	bne	17818 <__assert_fail@plt+0x6918>
   1733c:	cmp	r3, sl, asr #31
   17340:	mov	r0, sl
   17344:	mov	r1, r3
   17348:	bne	178b0 <__assert_fail@plt+0x69b0>
   1734c:	smull	r2, r3, sl, lr
   17350:	mov	lr, r2
   17354:	mov	r2, r3
   17358:	cmp	ip, #0
   1735c:	moveq	r6, lr
   17360:	moveq	r7, r2
   17364:	bne	17834 <__assert_fail@plt+0x6934>
   17368:	orr	r4, r4, ip
   1736c:	add	r3, r8, fp
   17370:	str	r3, [r5]
   17374:	ldrb	r3, [r8, fp]
   17378:	cmp	r3, #0
   1737c:	beq	16f20 <__assert_fail@plt+0x6020>
   17380:	b	17160 <__assert_fail@plt+0x6260>
   17384:	mov	fp, #1
   17388:	mov	lr, #1024	; 0x400
   1738c:	cmp	r7, r6, asr #31
   17390:	mov	r0, lr
   17394:	mov	ip, #0
   17398:	asr	r1, lr, #31
   1739c:	bne	1785c <__assert_fail@plt+0x695c>
   173a0:	smull	r2, r3, r6, lr
   173a4:	mov	r1, r2
   173a8:	mov	lr, r3
   173ac:	cmp	ip, #0
   173b0:	bne	173c0 <__assert_fail@plt+0x64c0>
   173b4:	mov	r6, r1
   173b8:	mov	r7, lr
   173bc:	b	1736c <__assert_fail@plt+0x646c>
   173c0:	cmp	r6, #0
   173c4:	mov	r4, #1
   173c8:	sbcs	r3, r7, #0
   173cc:	blt	173ec <__assert_fail@plt+0x64ec>
   173d0:	mvn	r6, #0
   173d4:	mvn	r7, #-2147483648	; 0x80000000
   173d8:	b	1736c <__assert_fail@plt+0x646c>
   173dc:	cmp	r0, #0
   173e0:	mov	r4, #1
   173e4:	sbcs	r3, r1, #0
   173e8:	bge	173d0 <__assert_fail@plt+0x64d0>
   173ec:	mov	r6, #0
   173f0:	mov	r7, #-2147483648	; 0x80000000
   173f4:	b	1736c <__assert_fail@plt+0x646c>
   173f8:	cmp	r7, r6, asr #31
   173fc:	mov	r1, #0
   17400:	bne	17b1c <__assert_fail@plt+0x6c1c>
   17404:	adds	ip, r6, r6
   17408:	adc	r3, r7, r7
   1740c:	cmp	r1, #0
   17410:	bne	173c0 <__assert_fail@plt+0x64c0>
   17414:	mov	r6, ip
   17418:	mov	r7, r3
   1741c:	b	1736c <__assert_fail@plt+0x646c>
   17420:	mov	fp, #1
   17424:	cmp	r7, r6, asr #31
   17428:	mov	ip, #0
   1742c:	bne	17b74 <__assert_fail@plt+0x6c74>
   17430:	lsl	r3, r7, #9
   17434:	lsl	r2, r6, #9
   17438:	orr	r3, r3, r6, lsr #23
   1743c:	cmp	ip, #0
   17440:	bne	173c0 <__assert_fail@plt+0x64c0>
   17444:	mov	r6, r2
   17448:	mov	r7, r3
   1744c:	b	1736c <__assert_fail@plt+0x646c>
   17450:	mov	fp, #1
   17454:	mov	lr, #1024	; 0x400
   17458:	asr	r3, lr, #31
   1745c:	mov	r2, lr
   17460:	mov	r1, #0
   17464:	cmp	r7, r6, asr #31
   17468:	strd	r2, [sp]
   1746c:	bne	17a04 <__assert_fail@plt+0x6b04>
   17470:	smull	r2, r3, r6, lr
   17474:	mov	ip, r2
   17478:	cmp	r1, #0
   1747c:	bne	17818 <__assert_fail@plt+0x6918>
   17480:	mov	r6, ip
   17484:	mov	r7, r3
   17488:	cmp	r3, r6, asr #31
   1748c:	mov	ip, r1
   17490:	bne	17bc8 <__assert_fail@plt+0x6cc8>
   17494:	smull	r2, r3, r6, lr
   17498:	mov	sl, r2
   1749c:	subs	r1, ip, #0
   174a0:	bne	17818 <__assert_fail@plt+0x6918>
   174a4:	cmp	r3, sl, asr #31
   174a8:	mov	r6, sl
   174ac:	mov	ip, r1
   174b0:	mov	r7, r3
   174b4:	beq	1729c <__assert_fail@plt+0x639c>
   174b8:	umull	r0, r1, r6, lr
   174bc:	cmp	r3, #0
   174c0:	umull	r2, r3, lr, r3
   174c4:	strd	r0, [sp, #16]
   174c8:	mov	r0, r2
   174cc:	mov	r1, r3
   174d0:	strd	r0, [sp, #8]
   174d4:	bge	174ec <__assert_fail@plt+0x65ec>
   174d8:	subs	r3, r0, ip
   174dc:	str	r3, [sp, #8]
   174e0:	ldr	r3, [sp, #12]
   174e4:	sbc	r3, r3, lr
   174e8:	str	r3, [sp, #12]
   174ec:	ldr	r1, [sp, #8]
   174f0:	mov	r2, #0
   174f4:	ldr	r3, [sp, #20]
   174f8:	adds	r3, r1, r3
   174fc:	ldr	r1, [sp, #12]
   17500:	adc	r2, r1, r2
   17504:	cmp	r2, r3, asr #31
   17508:	bne	17e1c <__assert_fail@plt+0x6f1c>
   1750c:	ldr	sl, [sp, #16]
   17510:	b	172a4 <__assert_fail@plt+0x63a4>
   17514:	mov	fp, #1
   17518:	mov	lr, #1024	; 0x400
   1751c:	asr	r3, lr, #31
   17520:	mov	r2, lr
   17524:	mov	r1, #0
   17528:	cmp	r7, r6, asr #31
   1752c:	strd	r2, [sp]
   17530:	bne	17944 <__assert_fail@plt+0x6a44>
   17534:	smull	r2, r3, r6, lr
   17538:	mov	ip, r2
   1753c:	cmp	r1, #0
   17540:	bne	17818 <__assert_fail@plt+0x6918>
   17544:	mov	r6, ip
   17548:	mov	r7, r3
   1754c:	cmp	r3, r6, asr #31
   17550:	mov	ip, r1
   17554:	beq	172e4 <__assert_fail@plt+0x63e4>
   17558:	umull	r0, r1, r6, lr
   1755c:	cmp	r3, #0
   17560:	umull	r2, r3, lr, r3
   17564:	strd	r0, [sp, #16]
   17568:	mov	r0, r2
   1756c:	mov	r1, r3
   17570:	strd	r0, [sp, #8]
   17574:	bge	1758c <__assert_fail@plt+0x668c>
   17578:	subs	r3, r0, ip
   1757c:	str	r3, [sp, #8]
   17580:	ldr	r3, [sp, #12]
   17584:	sbc	r3, r3, lr
   17588:	str	r3, [sp, #12]
   1758c:	ldr	r1, [sp, #8]
   17590:	mov	r2, #0
   17594:	ldr	r3, [sp, #20]
   17598:	adds	r3, r1, r3
   1759c:	ldr	r1, [sp, #12]
   175a0:	adc	r2, r1, r2
   175a4:	cmp	r2, r3, asr #31
   175a8:	bne	17d4c <__assert_fail@plt+0x6e4c>
   175ac:	ldr	sl, [sp, #16]
   175b0:	b	172ec <__assert_fail@plt+0x63ec>
   175b4:	mov	fp, #1
   175b8:	mov	lr, #1024	; 0x400
   175bc:	asr	r3, lr, #31
   175c0:	mov	r2, lr
   175c4:	mov	r1, #0
   175c8:	cmp	r7, r6, asr #31
   175cc:	strd	r2, [sp]
   175d0:	bne	17904 <__assert_fail@plt+0x6a04>
   175d4:	smull	r2, r3, r6, lr
   175d8:	mov	ip, r2
   175dc:	cmp	r1, #0
   175e0:	bne	17818 <__assert_fail@plt+0x6918>
   175e4:	mov	r6, ip
   175e8:	mov	r7, r3
   175ec:	cmp	r3, r6, asr #31
   175f0:	mov	ip, r1
   175f4:	beq	1732c <__assert_fail@plt+0x642c>
   175f8:	umull	r0, r1, r6, lr
   175fc:	cmp	r3, #0
   17600:	umull	r2, r3, lr, r3
   17604:	strd	r0, [sp, #16]
   17608:	mov	r0, r2
   1760c:	mov	r1, r3
   17610:	strd	r0, [sp, #8]
   17614:	bge	1762c <__assert_fail@plt+0x672c>
   17618:	subs	r3, r0, ip
   1761c:	str	r3, [sp, #8]
   17620:	ldr	r3, [sp, #12]
   17624:	sbc	r3, r3, lr
   17628:	str	r3, [sp, #12]
   1762c:	ldr	r1, [sp, #8]
   17630:	mov	r2, #0
   17634:	ldr	r3, [sp, #20]
   17638:	adds	r3, r1, r3
   1763c:	ldr	r1, [sp, #12]
   17640:	adc	r2, r1, r2
   17644:	cmp	r2, r3, asr #31
   17648:	bne	17cbc <__assert_fail@plt+0x6dbc>
   1764c:	ldr	sl, [sp, #16]
   17650:	b	17334 <__assert_fail@plt+0x6434>
   17654:	mov	fp, #1
   17658:	mov	lr, #1024	; 0x400
   1765c:	asr	r3, lr, #31
   17660:	mov	r2, lr
   17664:	mov	r1, #0
   17668:	cmp	r7, r6, asr #31
   1766c:	strd	r2, [sp]
   17670:	bne	17adc <__assert_fail@plt+0x6bdc>
   17674:	smull	r2, r3, r6, lr
   17678:	mov	ip, r2
   1767c:	cmp	r1, #0
   17680:	bne	17818 <__assert_fail@plt+0x6918>
   17684:	mov	r6, ip
   17688:	mov	r7, r3
   1768c:	cmp	r3, r6, asr #31
   17690:	mov	ip, r1
   17694:	beq	17308 <__assert_fail@plt+0x6408>
   17698:	umull	r0, r1, r6, lr
   1769c:	cmp	r3, #0
   176a0:	umull	r2, r3, lr, r3
   176a4:	strd	r0, [sp, #16]
   176a8:	mov	r0, r2
   176ac:	mov	r1, r3
   176b0:	strd	r0, [sp, #8]
   176b4:	bge	176cc <__assert_fail@plt+0x67cc>
   176b8:	subs	r3, r0, ip
   176bc:	str	r3, [sp, #8]
   176c0:	ldr	r3, [sp, #12]
   176c4:	sbc	r3, r3, lr
   176c8:	str	r3, [sp, #12]
   176cc:	ldr	r1, [sp, #8]
   176d0:	mov	r2, #0
   176d4:	ldr	r3, [sp, #20]
   176d8:	adds	r3, r1, r3
   176dc:	ldr	r1, [sp, #12]
   176e0:	adc	r2, r1, r2
   176e4:	cmp	r2, r3, asr #31
   176e8:	bne	17d04 <__assert_fail@plt+0x6e04>
   176ec:	ldr	sl, [sp, #16]
   176f0:	b	17310 <__assert_fail@plt+0x6410>
   176f4:	cmp	r7, r6, asr #31
   176f8:	mov	ip, #0
   176fc:	bne	17a84 <__assert_fail@plt+0x6b84>
   17700:	lsl	r3, r7, #10
   17704:	lsl	r2, r6, #10
   17708:	orr	r3, r3, r6, lsr #22
   1770c:	b	1743c <__assert_fail@plt+0x653c>
   17710:	mov	fp, #1
   17714:	mov	lr, #1024	; 0x400
   17718:	asr	r3, lr, #31
   1771c:	mov	r2, lr
   17720:	mov	r1, #0
   17724:	cmp	r7, r6, asr #31
   17728:	strd	r2, [sp]
   1772c:	bne	17a44 <__assert_fail@plt+0x6b44>
   17730:	smull	r2, r3, r6, lr
   17734:	mov	sl, r2
   17738:	subs	ip, r1, #0
   1773c:	bne	173c0 <__assert_fail@plt+0x64c0>
   17740:	cmp	r3, sl, asr #31
   17744:	mov	r0, sl
   17748:	mov	r1, r3
   1774c:	bne	17c24 <__assert_fail@plt+0x6d24>
   17750:	smull	r2, r3, sl, lr
   17754:	mov	lr, r2
   17758:	mov	r2, r3
   1775c:	cmp	ip, #0
   17760:	bne	173dc <__assert_fail@plt+0x64dc>
   17764:	mov	r6, lr
   17768:	mov	r7, r2
   1776c:	b	1736c <__assert_fail@plt+0x646c>
   17770:	mov	fp, #1
   17774:	mov	lr, #1024	; 0x400
   17778:	asr	r3, lr, #31
   1777c:	mov	r2, lr
   17780:	mov	r1, #0
   17784:	cmp	r7, r6, asr #31
   17788:	strd	r2, [sp]
   1778c:	bne	179c4 <__assert_fail@plt+0x6ac4>
   17790:	smull	r2, r3, r6, lr
   17794:	mov	ip, r2
   17798:	cmp	r1, #0
   1779c:	bne	17818 <__assert_fail@plt+0x6918>
   177a0:	mov	r6, ip
   177a4:	mov	r7, r3
   177a8:	cmp	r3, r6, asr #31
   177ac:	mov	ip, r1
   177b0:	beq	172c0 <__assert_fail@plt+0x63c0>
   177b4:	umull	r0, r1, r6, lr
   177b8:	cmp	r3, #0
   177bc:	umull	r2, r3, lr, r3
   177c0:	strd	r0, [sp, #16]
   177c4:	mov	r0, r2
   177c8:	mov	r1, r3
   177cc:	strd	r0, [sp, #8]
   177d0:	bge	177e8 <__assert_fail@plt+0x68e8>
   177d4:	subs	r3, r0, ip
   177d8:	str	r3, [sp, #8]
   177dc:	ldr	r3, [sp, #12]
   177e0:	sbc	r3, r3, lr
   177e4:	str	r3, [sp, #12]
   177e8:	ldr	r1, [sp, #8]
   177ec:	mov	r2, #0
   177f0:	ldr	r3, [sp, #20]
   177f4:	adds	r3, r1, r3
   177f8:	ldr	r1, [sp, #12]
   177fc:	adc	r2, r1, r2
   17800:	cmp	r2, r3, asr #31
   17804:	bne	17d28 <__assert_fail@plt+0x6e28>
   17808:	ldr	sl, [sp, #16]
   1780c:	b	172c8 <__assert_fail@plt+0x63c8>
   17810:	mov	fp, #1
   17814:	b	1736c <__assert_fail@plt+0x646c>
   17818:	cmp	r6, #0
   1781c:	mov	ip, #1
   17820:	sbcs	r3, r7, #0
   17824:	blt	17844 <__assert_fail@plt+0x6944>
   17828:	mvn	r6, #0
   1782c:	mvn	r7, #-2147483648	; 0x80000000
   17830:	b	17368 <__assert_fail@plt+0x6468>
   17834:	cmp	r0, #0
   17838:	mov	ip, #1
   1783c:	sbcs	r3, r1, #0
   17840:	bge	17828 <__assert_fail@plt+0x6928>
   17844:	mov	r6, #0
   17848:	mov	r7, #-2147483648	; 0x80000000
   1784c:	b	17368 <__assert_fail@plt+0x6468>
   17850:	mov	fp, #2
   17854:	mov	lr, #1000	; 0x3e8
   17858:	b	17170 <__assert_fail@plt+0x6270>
   1785c:	umull	r2, r3, r6, lr
   17860:	cmp	r7, #0
   17864:	strd	r2, [sp]
   17868:	umull	r2, r3, lr, r7
   1786c:	bge	17878 <__assert_fail@plt+0x6978>
   17870:	subs	r2, r2, ip
   17874:	sbc	r3, r3, lr
   17878:	ldr	lr, [sp, #4]
   1787c:	mov	sl, #0
   17880:	adds	lr, r2, lr
   17884:	adc	sl, r3, sl
   17888:	cmp	sl, lr, asr #31
   1788c:	bne	17ddc <__assert_fail@plt+0x6edc>
   17890:	ldr	r1, [sp]
   17894:	b	173ac <__assert_fail@plt+0x64ac>
   17898:	ldrb	r3, [r8, #2]
   1789c:	mov	lr, #1024	; 0x400
   178a0:	cmp	r3, #66	; 0x42
   178a4:	movne	fp, #1
   178a8:	moveq	fp, #3
   178ac:	b	17170 <__assert_fail@plt+0x6270>
   178b0:	cmp	r3, #0
   178b4:	umull	r6, r7, sl, lr
   178b8:	umull	r2, r3, lr, r3
   178bc:	strd	r2, [sp, #8]
   178c0:	strd	r6, [sp, #16]
   178c4:	bge	178dc <__assert_fail@plt+0x69dc>
   178c8:	subs	r3, r2, ip
   178cc:	str	r3, [sp, #8]
   178d0:	ldr	r3, [sp, #12]
   178d4:	sbc	r3, r3, lr
   178d8:	str	r3, [sp, #12]
   178dc:	ldr	r3, [sp, #8]
   178e0:	mov	lr, #0
   178e4:	ldr	r6, [sp, #20]
   178e8:	adds	r2, r3, r6
   178ec:	ldr	r3, [sp, #12]
   178f0:	adc	lr, r3, lr
   178f4:	cmp	lr, r2, asr #31
   178f8:	bne	17d70 <__assert_fail@plt+0x6e70>
   178fc:	ldr	lr, [sp, #16]
   17900:	b	17358 <__assert_fail@plt+0x6458>
   17904:	umull	r2, r3, r6, lr
   17908:	cmp	r7, #0
   1790c:	strd	r2, [sp, #8]
   17910:	umull	r2, r3, lr, r7
   17914:	bge	17920 <__assert_fail@plt+0x6a20>
   17918:	subs	r2, r2, r1
   1791c:	sbc	r3, r3, lr
   17920:	ldr	r0, [sp, #12]
   17924:	mov	ip, #0
   17928:	adds	r0, r2, r0
   1792c:	adc	ip, r3, ip
   17930:	cmp	ip, r0, asr #31
   17934:	bne	17c98 <__assert_fail@plt+0x6d98>
   17938:	mov	r3, r0
   1793c:	ldr	ip, [sp, #8]
   17940:	b	175dc <__assert_fail@plt+0x66dc>
   17944:	umull	r2, r3, r6, lr
   17948:	cmp	r7, #0
   1794c:	strd	r2, [sp, #8]
   17950:	umull	r2, r3, lr, r7
   17954:	bge	17960 <__assert_fail@plt+0x6a60>
   17958:	subs	r2, r2, r1
   1795c:	sbc	r3, r3, lr
   17960:	ldr	r0, [sp, #12]
   17964:	mov	ip, #0
   17968:	adds	r0, r2, r0
   1796c:	adc	ip, r3, ip
   17970:	cmp	ip, r0, asr #31
   17974:	bne	17df8 <__assert_fail@plt+0x6ef8>
   17978:	mov	r3, r0
   1797c:	ldr	ip, [sp, #8]
   17980:	b	1753c <__assert_fail@plt+0x663c>
   17984:	umull	r2, r3, r6, lr
   17988:	cmp	r7, #0
   1798c:	strd	r2, [sp, #8]
   17990:	umull	r2, r3, lr, r7
   17994:	bge	179a0 <__assert_fail@plt+0x6aa0>
   17998:	subs	r2, r2, r1
   1799c:	sbc	r3, r3, lr
   179a0:	ldr	r0, [sp, #12]
   179a4:	mov	ip, #0
   179a8:	adds	r0, r2, r0
   179ac:	adc	ip, r3, ip
   179b0:	cmp	ip, r0, asr #31
   179b4:	bne	17ce0 <__assert_fail@plt+0x6de0>
   179b8:	mov	r3, r0
   179bc:	ldr	ip, [sp, #8]
   179c0:	b	17280 <__assert_fail@plt+0x6380>
   179c4:	umull	r2, r3, r6, lr
   179c8:	cmp	r7, #0
   179cc:	strd	r2, [sp, #8]
   179d0:	umull	r2, r3, lr, r7
   179d4:	bge	179e0 <__assert_fail@plt+0x6ae0>
   179d8:	subs	r2, r2, r1
   179dc:	sbc	r3, r3, lr
   179e0:	ldr	r0, [sp, #12]
   179e4:	mov	ip, #0
   179e8:	adds	r0, r2, r0
   179ec:	adc	ip, r3, ip
   179f0:	cmp	ip, r0, asr #31
   179f4:	bne	17e98 <__assert_fail@plt+0x6f98>
   179f8:	mov	r3, r0
   179fc:	ldr	ip, [sp, #8]
   17a00:	b	17798 <__assert_fail@plt+0x6898>
   17a04:	umull	r2, r3, r6, lr
   17a08:	cmp	r7, #0
   17a0c:	strd	r2, [sp, #8]
   17a10:	umull	r2, r3, lr, r7
   17a14:	bge	17a20 <__assert_fail@plt+0x6b20>
   17a18:	subs	r2, r2, r1
   17a1c:	sbc	r3, r3, lr
   17a20:	ldr	r0, [sp, #12]
   17a24:	mov	ip, #0
   17a28:	adds	r0, r2, r0
   17a2c:	adc	ip, r3, ip
   17a30:	cmp	ip, r0, asr #31
   17a34:	bne	17d94 <__assert_fail@plt+0x6e94>
   17a38:	mov	r3, r0
   17a3c:	ldr	ip, [sp, #8]
   17a40:	b	17478 <__assert_fail@plt+0x6578>
   17a44:	umull	r2, r3, r6, lr
   17a48:	cmp	r7, #0
   17a4c:	strd	r2, [sp, #8]
   17a50:	umull	r2, r3, lr, r7
   17a54:	bge	17a60 <__assert_fail@plt+0x6b60>
   17a58:	subs	r2, r2, r1
   17a5c:	sbc	r3, r3, lr
   17a60:	ldr	r0, [sp, #12]
   17a64:	mov	ip, #0
   17a68:	adds	r0, r2, r0
   17a6c:	adc	ip, r3, ip
   17a70:	cmp	ip, r0, asr #31
   17a74:	bne	17e40 <__assert_fail@plt+0x6f40>
   17a78:	mov	r3, r0
   17a7c:	ldr	sl, [sp, #8]
   17a80:	b	17738 <__assert_fail@plt+0x6838>
   17a84:	mov	r2, r6
   17a88:	mov	r3, #0
   17a8c:	mov	lr, #1024	; 0x400
   17a90:	cmp	r7, #0
   17a94:	strd	r2, [sp]
   17a98:	lsr	r3, r6, #22
   17a9c:	ldr	r2, [sp]
   17aa0:	umull	r0, r1, lr, r7
   17aa4:	lsl	r2, r2, #10
   17aa8:	bge	17ab4 <__assert_fail@plt+0x6bb4>
   17aac:	subs	r0, r0, ip
   17ab0:	sbc	r1, r1, lr
   17ab4:	adds	r3, r0, r3
   17ab8:	mov	lr, #0
   17abc:	adc	r1, r1, lr
   17ac0:	cmp	r1, r3, asr #31
   17ac4:	beq	1743c <__assert_fail@plt+0x653c>
   17ac8:	lsl	r3, r7, #10
   17acc:	mov	ip, #1
   17ad0:	lsl	r2, r6, #10
   17ad4:	orr	r3, r3, r6, lsr #22
   17ad8:	b	1743c <__assert_fail@plt+0x653c>
   17adc:	umull	r2, r3, r6, lr
   17ae0:	cmp	r7, #0
   17ae4:	strd	r2, [sp, #8]
   17ae8:	umull	r2, r3, lr, r7
   17aec:	bge	17af8 <__assert_fail@plt+0x6bf8>
   17af0:	subs	r2, r2, r1
   17af4:	sbc	r3, r3, lr
   17af8:	ldr	r0, [sp, #12]
   17afc:	mov	ip, #0
   17b00:	adds	r0, r2, r0
   17b04:	adc	ip, r3, ip
   17b08:	cmp	ip, r0, asr #31
   17b0c:	bne	17e64 <__assert_fail@plt+0x6f64>
   17b10:	mov	r3, r0
   17b14:	ldr	ip, [sp, #8]
   17b18:	b	1767c <__assert_fail@plt+0x677c>
   17b1c:	mov	lr, #2
   17b20:	mov	r3, #0
   17b24:	adds	ip, r6, r6
   17b28:	adc	r0, r3, r3
   17b2c:	umull	r2, r3, lr, r7
   17b30:	cmp	r7, #0
   17b34:	strd	r2, [sp]
   17b38:	bge	17b50 <__assert_fail@plt+0x6c50>
   17b3c:	subs	r3, r2, r1
   17b40:	str	r3, [sp]
   17b44:	ldr	r3, [sp, #4]
   17b48:	sbc	r3, r3, lr
   17b4c:	str	r3, [sp, #4]
   17b50:	ldr	r3, [sp]
   17b54:	mov	lr, #0
   17b58:	adds	r2, r3, r0
   17b5c:	ldr	r3, [sp, #4]
   17b60:	adc	r3, r3, lr
   17b64:	cmp	r3, r2, asr #31
   17b68:	bne	17e88 <__assert_fail@plt+0x6f88>
   17b6c:	mov	r3, r2
   17b70:	b	1740c <__assert_fail@plt+0x650c>
   17b74:	mov	r2, r6
   17b78:	mov	r3, #0
   17b7c:	mov	lr, #512	; 0x200
   17b80:	cmp	r7, #0
   17b84:	strd	r2, [sp]
   17b88:	lsr	r3, r6, #23
   17b8c:	ldr	r2, [sp]
   17b90:	umull	r0, r1, lr, r7
   17b94:	lsl	r2, r2, #9
   17b98:	bge	17ba4 <__assert_fail@plt+0x6ca4>
   17b9c:	subs	r0, r0, ip
   17ba0:	sbc	r1, r1, lr
   17ba4:	adds	r3, r0, r3
   17ba8:	mov	lr, #0
   17bac:	adc	r1, r1, lr
   17bb0:	cmp	r1, r3, asr #31
   17bb4:	lslne	r3, r7, #9
   17bb8:	movne	ip, #1
   17bbc:	lslne	r2, r6, #9
   17bc0:	orrne	r3, r3, r6, lsr #23
   17bc4:	b	1743c <__assert_fail@plt+0x653c>
   17bc8:	umull	r0, r1, r6, lr
   17bcc:	cmp	r3, #0
   17bd0:	umull	r2, r3, lr, r3
   17bd4:	strd	r0, [sp, #16]
   17bd8:	mov	r0, r2
   17bdc:	mov	r1, r3
   17be0:	strd	r0, [sp, #8]
   17be4:	bge	17bfc <__assert_fail@plt+0x6cfc>
   17be8:	subs	r3, r0, ip
   17bec:	str	r3, [sp, #8]
   17bf0:	ldr	r3, [sp, #12]
   17bf4:	sbc	r3, r3, lr
   17bf8:	str	r3, [sp, #12]
   17bfc:	ldr	r1, [sp, #8]
   17c00:	mov	r2, #0
   17c04:	ldr	r3, [sp, #20]
   17c08:	adds	r3, r1, r3
   17c0c:	ldr	r1, [sp, #12]
   17c10:	adc	r2, r1, r2
   17c14:	cmp	r2, r3, asr #31
   17c18:	bne	17db8 <__assert_fail@plt+0x6eb8>
   17c1c:	ldr	sl, [sp, #16]
   17c20:	b	1749c <__assert_fail@plt+0x659c>
   17c24:	cmp	r3, #0
   17c28:	umull	r6, r7, sl, lr
   17c2c:	umull	r2, r3, lr, r3
   17c30:	strd	r2, [sp, #8]
   17c34:	strd	r6, [sp, #16]
   17c38:	bge	17c50 <__assert_fail@plt+0x6d50>
   17c3c:	subs	r3, r2, ip
   17c40:	str	r3, [sp, #8]
   17c44:	ldr	r3, [sp, #12]
   17c48:	sbc	r3, r3, lr
   17c4c:	str	r3, [sp, #12]
   17c50:	ldr	r3, [sp, #8]
   17c54:	mov	lr, #0
   17c58:	ldr	r6, [sp, #20]
   17c5c:	adds	r2, r3, r6
   17c60:	ldr	r3, [sp, #12]
   17c64:	adc	lr, r3, lr
   17c68:	cmp	lr, r2, asr #31
   17c6c:	bne	17ebc <__assert_fail@plt+0x6fbc>
   17c70:	ldr	lr, [sp, #16]
   17c74:	b	1775c <__assert_fail@plt+0x685c>
   17c78:	movw	r3, #36592	; 0x8ef0
   17c7c:	movt	r3, #1
   17c80:	movw	r1, #36604	; 0x8efc
   17c84:	movt	r1, #1
   17c88:	movw	r0, #36620	; 0x8f0c
   17c8c:	movt	r0, #1
   17c90:	mov	r2, #85	; 0x55
   17c94:	bl	10f00 <__assert_fail@plt>
   17c98:	ldrd	r2, [sp]
   17c9c:	mov	r1, #1
   17ca0:	ldr	ip, [sp]
   17ca4:	mul	r0, r6, r3
   17ca8:	umull	r2, r3, r6, r2
   17cac:	mla	r0, ip, r7, r0
   17cb0:	mov	ip, r2
   17cb4:	add	r3, r0, r3
   17cb8:	b	175dc <__assert_fail@plt+0x66dc>
   17cbc:	ldrd	r2, [sp]
   17cc0:	mov	ip, #1
   17cc4:	ldr	r1, [sp]
   17cc8:	mul	r0, r6, r3
   17ccc:	umull	r2, r3, r6, r2
   17cd0:	mla	r0, r1, r7, r0
   17cd4:	mov	sl, r2
   17cd8:	add	r3, r0, r3
   17cdc:	b	17334 <__assert_fail@plt+0x6434>
   17ce0:	ldrd	r2, [sp]
   17ce4:	mov	r1, #1
   17ce8:	ldr	ip, [sp]
   17cec:	mul	r0, r6, r3
   17cf0:	umull	r2, r3, r6, r2
   17cf4:	mla	r0, ip, r7, r0
   17cf8:	mov	ip, r2
   17cfc:	add	r3, r0, r3
   17d00:	b	17280 <__assert_fail@plt+0x6380>
   17d04:	ldrd	r2, [sp]
   17d08:	mov	ip, #1
   17d0c:	ldr	r1, [sp]
   17d10:	mul	r0, r6, r3
   17d14:	umull	r2, r3, r6, r2
   17d18:	mla	r0, r1, r7, r0
   17d1c:	mov	sl, r2
   17d20:	add	r3, r0, r3
   17d24:	b	17310 <__assert_fail@plt+0x6410>
   17d28:	ldrd	r2, [sp]
   17d2c:	mov	ip, #1
   17d30:	ldr	r1, [sp]
   17d34:	mul	r0, r6, r3
   17d38:	umull	r2, r3, r6, r2
   17d3c:	mla	r0, r1, r7, r0
   17d40:	mov	sl, r2
   17d44:	add	r3, r0, r3
   17d48:	b	172c8 <__assert_fail@plt+0x63c8>
   17d4c:	ldrd	r2, [sp]
   17d50:	mov	ip, #1
   17d54:	ldr	r1, [sp]
   17d58:	mul	r0, r6, r3
   17d5c:	umull	r2, r3, r6, r2
   17d60:	mla	r0, r1, r7, r0
   17d64:	mov	sl, r2
   17d68:	add	r3, r0, r3
   17d6c:	b	172ec <__assert_fail@plt+0x63ec>
   17d70:	ldrd	r2, [sp]
   17d74:	mov	ip, #1
   17d78:	ldr	lr, [sp]
   17d7c:	mul	r6, r0, r3
   17d80:	umull	r2, r3, r0, r2
   17d84:	mla	r6, lr, r1, r6
   17d88:	mov	lr, r2
   17d8c:	add	r2, r6, r3
   17d90:	b	17358 <__assert_fail@plt+0x6458>
   17d94:	ldrd	r2, [sp]
   17d98:	mov	r1, #1
   17d9c:	ldr	ip, [sp]
   17da0:	mul	r0, r6, r3
   17da4:	umull	r2, r3, r6, r2
   17da8:	mla	r0, ip, r7, r0
   17dac:	mov	ip, r2
   17db0:	add	r3, r0, r3
   17db4:	b	17478 <__assert_fail@plt+0x6578>
   17db8:	ldrd	r2, [sp]
   17dbc:	mov	ip, #1
   17dc0:	ldr	r1, [sp]
   17dc4:	mul	r0, r6, r3
   17dc8:	umull	r2, r3, r6, r2
   17dcc:	mla	r0, r1, r7, r0
   17dd0:	mov	sl, r2
   17dd4:	add	r3, r0, r3
   17dd8:	b	1749c <__assert_fail@plt+0x659c>
   17ddc:	mul	lr, r6, r1
   17de0:	mov	ip, #1
   17de4:	umull	r2, r3, r6, r0
   17de8:	mla	lr, r0, r7, lr
   17dec:	mov	r1, r2
   17df0:	add	lr, lr, r3
   17df4:	b	173ac <__assert_fail@plt+0x64ac>
   17df8:	ldrd	r2, [sp]
   17dfc:	mov	r1, #1
   17e00:	ldr	ip, [sp]
   17e04:	mul	r0, r6, r3
   17e08:	umull	r2, r3, r6, r2
   17e0c:	mla	r0, ip, r7, r0
   17e10:	mov	ip, r2
   17e14:	add	r3, r0, r3
   17e18:	b	1753c <__assert_fail@plt+0x663c>
   17e1c:	ldrd	r2, [sp]
   17e20:	mov	ip, #1
   17e24:	ldr	r1, [sp]
   17e28:	mul	r0, r6, r3
   17e2c:	umull	r2, r3, r6, r2
   17e30:	mla	r0, r1, r7, r0
   17e34:	mov	sl, r2
   17e38:	add	r3, r0, r3
   17e3c:	b	172a4 <__assert_fail@plt+0x63a4>
   17e40:	ldrd	r2, [sp]
   17e44:	mov	r1, #1
   17e48:	ldr	ip, [sp]
   17e4c:	mul	r0, r6, r3
   17e50:	umull	r2, r3, r6, r2
   17e54:	mla	r0, ip, r7, r0
   17e58:	mov	sl, r2
   17e5c:	add	r3, r0, r3
   17e60:	b	17738 <__assert_fail@plt+0x6838>
   17e64:	ldrd	r2, [sp]
   17e68:	mov	r1, #1
   17e6c:	ldr	ip, [sp]
   17e70:	mul	r0, r6, r3
   17e74:	umull	r2, r3, r6, r2
   17e78:	mla	r0, ip, r7, r0
   17e7c:	mov	ip, r2
   17e80:	add	r3, r0, r3
   17e84:	b	1767c <__assert_fail@plt+0x677c>
   17e88:	adds	ip, r6, r6
   17e8c:	mov	r1, #1
   17e90:	adc	r3, r7, r7
   17e94:	b	1740c <__assert_fail@plt+0x650c>
   17e98:	ldrd	r2, [sp]
   17e9c:	mov	r1, #1
   17ea0:	ldr	ip, [sp]
   17ea4:	mul	r0, r6, r3
   17ea8:	umull	r2, r3, r6, r2
   17eac:	mla	r0, ip, r7, r0
   17eb0:	mov	ip, r2
   17eb4:	add	r3, r0, r3
   17eb8:	b	17798 <__assert_fail@plt+0x6898>
   17ebc:	ldrd	r2, [sp]
   17ec0:	mov	ip, #1
   17ec4:	ldr	lr, [sp]
   17ec8:	mul	r6, r0, r3
   17ecc:	umull	r2, r3, r0, r2
   17ed0:	mla	r6, lr, r1, r6
   17ed4:	mov	lr, r2
   17ed8:	add	r3, r6, r3
   17edc:	mov	r2, r3
   17ee0:	b	1775c <__assert_fail@plt+0x685c>
   17ee4:	cmp	r1, #0
   17ee8:	cmpne	r0, #0
   17eec:	beq	17f38 <__assert_fail@plt+0x7038>
   17ef0:	strd	r4, [sp, #-16]!
   17ef4:	umull	r4, r5, r0, r1
   17ef8:	str	r6, [sp, #8]
   17efc:	str	lr, [sp, #12]
   17f00:	adds	r3, r5, #0
   17f04:	movne	r3, #1
   17f08:	cmp	r4, #0
   17f0c:	blt	17f18 <__assert_fail@plt+0x7018>
   17f10:	cmp	r3, #0
   17f14:	beq	17f44 <__assert_fail@plt+0x7044>
   17f18:	bl	10e1c <__errno_location@plt>
   17f1c:	mov	r3, #12
   17f20:	ldrd	r4, [sp]
   17f24:	ldr	r6, [sp, #8]
   17f28:	add	sp, sp, #12
   17f2c:	str	r3, [r0]
   17f30:	mov	r0, #0
   17f34:	pop	{pc}		; (ldr pc, [sp], #4)
   17f38:	mov	r1, #1
   17f3c:	mov	r0, r1
   17f40:	b	10c9c <calloc@plt>
   17f44:	ldrd	r4, [sp]
   17f48:	ldr	r6, [sp, #8]
   17f4c:	ldr	lr, [sp, #12]
   17f50:	add	sp, sp, #16
   17f54:	b	10c9c <calloc@plt>
   17f58:	cmp	r0, #0
   17f5c:	beq	17f68 <__assert_fail@plt+0x7068>
   17f60:	blt	17f70 <__assert_fail@plt+0x7070>
   17f64:	b	10db0 <malloc@plt>
   17f68:	mov	r0, #1
   17f6c:	b	10db0 <malloc@plt>
   17f70:	str	r4, [sp, #-8]!
   17f74:	str	lr, [sp, #4]
   17f78:	bl	10e1c <__errno_location@plt>
   17f7c:	mov	r3, #12
   17f80:	ldr	r4, [sp]
   17f84:	add	sp, sp, #4
   17f88:	str	r3, [r0]
   17f8c:	mov	r0, #0
   17f90:	pop	{pc}		; (ldr pc, [sp], #4)
   17f94:	cmp	r0, #0
   17f98:	beq	17fc0 <__assert_fail@plt+0x70c0>
   17f9c:	cmp	r1, #0
   17fa0:	str	r4, [sp, #-8]!
   17fa4:	str	lr, [sp, #4]
   17fa8:	beq	17fc8 <__assert_fail@plt+0x70c8>
   17fac:	blt	17fdc <__assert_fail@plt+0x70dc>
   17fb0:	ldr	r4, [sp]
   17fb4:	ldr	lr, [sp, #4]
   17fb8:	add	sp, sp, #8
   17fbc:	b	10d44 <realloc@plt>
   17fc0:	mov	r0, r1
   17fc4:	b	17f58 <__assert_fail@plt+0x7058>
   17fc8:	bl	12510 <__assert_fail@plt+0x1610>
   17fcc:	ldr	r4, [sp]
   17fd0:	add	sp, sp, #4
   17fd4:	mov	r0, #0
   17fd8:	pop	{pc}		; (ldr pc, [sp], #4)
   17fdc:	bl	10e1c <__errno_location@plt>
   17fe0:	mov	r3, #12
   17fe4:	str	r3, [r0]
   17fe8:	b	17fcc <__assert_fail@plt+0x70cc>
   17fec:	strd	r4, [sp, #-16]!
   17ff0:	mov	r4, r0
   17ff4:	str	r6, [sp, #8]
   17ff8:	str	lr, [sp, #12]
   17ffc:	bl	10d8c <__fpending@plt>
   18000:	ldr	r5, [r4]
   18004:	mov	r6, r0
   18008:	mov	r0, r4
   1800c:	bl	123fc <__assert_fail@plt+0x14fc>
   18010:	mov	r4, r0
   18014:	and	r5, r5, #32
   18018:	cmp	r5, #0
   1801c:	bne	18054 <__assert_fail@plt+0x7154>
   18020:	cmp	r0, #0
   18024:	beq	18040 <__assert_fail@plt+0x7140>
   18028:	cmp	r6, #0
   1802c:	bne	1806c <__assert_fail@plt+0x716c>
   18030:	bl	10e1c <__errno_location@plt>
   18034:	ldr	r4, [r0]
   18038:	subs	r4, r4, #9
   1803c:	mvnne	r4, #0
   18040:	mov	r0, r4
   18044:	ldrd	r4, [sp]
   18048:	ldr	r6, [sp, #8]
   1804c:	add	sp, sp, #12
   18050:	pop	{pc}		; (ldr pc, [sp], #4)
   18054:	cmp	r0, #0
   18058:	bne	1806c <__assert_fail@plt+0x716c>
   1805c:	bl	10e1c <__errno_location@plt>
   18060:	str	r4, [r0]
   18064:	mvn	r4, #0
   18068:	b	18040 <__assert_fail@plt+0x7140>
   1806c:	mvn	r4, #0
   18070:	b	18040 <__assert_fail@plt+0x7140>
   18074:	mov	r0, #14
   18078:	str	r4, [sp, #-8]!
   1807c:	str	lr, [sp, #4]
   18080:	bl	10eac <nl_langinfo@plt>
   18084:	cmp	r0, #0
   18088:	beq	180ac <__assert_fail@plt+0x71ac>
   1808c:	ldrb	r2, [r0]
   18090:	movw	r3, #36660	; 0x8f34
   18094:	movt	r3, #1
   18098:	ldr	r4, [sp]
   1809c:	add	sp, sp, #4
   180a0:	cmp	r2, #0
   180a4:	moveq	r0, r3
   180a8:	pop	{pc}		; (ldr pc, [sp], #4)
   180ac:	ldr	r4, [sp]
   180b0:	add	sp, sp, #4
   180b4:	movw	r0, #36660	; 0x8f34
   180b8:	movt	r0, #1
   180bc:	pop	{pc}		; (ldr pc, [sp], #4)
   180c0:	strd	r4, [sp, #-20]!	; 0xffffffec
   180c4:	mov	r5, r2
   180c8:	strd	r6, [sp, #8]
   180cc:	subs	r6, r0, #0
   180d0:	mov	r7, r1
   180d4:	str	lr, [sp, #16]
   180d8:	sub	sp, sp, #12
   180dc:	addeq	r6, sp, #4
   180e0:	mov	r0, r6
   180e4:	bl	10d98 <mbrtowc@plt>
   180e8:	cmp	r5, #0
   180ec:	cmnne	r0, #3
   180f0:	mov	r4, r0
   180f4:	bhi	18110 <__assert_fail@plt+0x7210>
   180f8:	mov	r0, r4
   180fc:	add	sp, sp, #12
   18100:	ldrd	r4, [sp]
   18104:	ldrd	r6, [sp, #8]
   18108:	add	sp, sp, #16
   1810c:	pop	{pc}		; (ldr pc, [sp], #4)
   18110:	mov	r0, #0
   18114:	bl	18168 <__assert_fail@plt+0x7268>
   18118:	cmp	r0, #0
   1811c:	bne	180f8 <__assert_fail@plt+0x71f8>
   18120:	ldrb	r3, [r7]
   18124:	mov	r4, #1
   18128:	str	r3, [r6]
   1812c:	b	180f8 <__assert_fail@plt+0x71f8>
   18130:	umull	r2, r3, r1, r2
   18134:	cmp	r3, #0
   18138:	bne	18144 <__assert_fail@plt+0x7244>
   1813c:	mov	r1, r2
   18140:	b	17f94 <__assert_fail@plt+0x7094>
   18144:	str	r4, [sp, #-8]!
   18148:	str	lr, [sp, #4]
   1814c:	bl	10e1c <__errno_location@plt>
   18150:	mov	r3, #12
   18154:	ldr	r4, [sp]
   18158:	add	sp, sp, #4
   1815c:	str	r3, [r0]
   18160:	mov	r0, #0
   18164:	pop	{pc}		; (ldr pc, [sp], #4)
   18168:	push	{lr}		; (str lr, [sp, #-4]!)
   1816c:	sub	sp, sp, #268	; 0x10c
   18170:	movw	r2, #257	; 0x101
   18174:	add	r1, sp, #4
   18178:	bl	181c0 <__assert_fail@plt+0x72c0>
   1817c:	cmp	r0, #0
   18180:	movne	r0, #0
   18184:	bne	181b8 <__assert_fail@plt+0x72b8>
   18188:	movw	r1, #36668	; 0x8f3c
   1818c:	movt	r1, #1
   18190:	add	r0, sp, #4
   18194:	bl	10cb4 <strcmp@plt>
   18198:	cmp	r0, #0
   1819c:	beq	181b8 <__assert_fail@plt+0x72b8>
   181a0:	add	r0, sp, #4
   181a4:	movw	r1, #36672	; 0x8f40
   181a8:	movt	r1, #1
   181ac:	bl	10cb4 <strcmp@plt>
   181b0:	adds	r0, r0, #0
   181b4:	movne	r0, #1
   181b8:	add	sp, sp, #268	; 0x10c
   181bc:	pop	{pc}		; (ldr pc, [sp], #4)
   181c0:	strd	r4, [sp, #-16]!
   181c4:	mov	r5, r1
   181c8:	mov	r1, #0
   181cc:	mov	r4, r2
   181d0:	str	r6, [sp, #8]
   181d4:	str	lr, [sp, #12]
   181d8:	bl	10e94 <setlocale@plt>
   181dc:	subs	r6, r0, #0
   181e0:	beq	18260 <__assert_fail@plt+0x7360>
   181e4:	bl	10e04 <strlen@plt>
   181e8:	cmp	r4, r0
   181ec:	bhi	1820c <__assert_fail@plt+0x730c>
   181f0:	cmp	r4, #0
   181f4:	moveq	r0, #34	; 0x22
   181f8:	bne	18230 <__assert_fail@plt+0x7330>
   181fc:	ldrd	r4, [sp]
   18200:	ldr	r6, [sp, #8]
   18204:	add	sp, sp, #12
   18208:	pop	{pc}		; (ldr pc, [sp], #4)
   1820c:	add	r2, r0, #1
   18210:	mov	r1, r6
   18214:	mov	r0, r5
   18218:	bl	10cfc <memcpy@plt>
   1821c:	ldrd	r4, [sp]
   18220:	mov	r0, #0
   18224:	ldr	r6, [sp, #8]
   18228:	add	sp, sp, #12
   1822c:	pop	{pc}		; (ldr pc, [sp], #4)
   18230:	sub	r4, r4, #1
   18234:	mov	r1, r6
   18238:	mov	r2, r4
   1823c:	mov	r0, r5
   18240:	bl	10cfc <memcpy@plt>
   18244:	mov	r3, #0
   18248:	mov	r0, #34	; 0x22
   1824c:	strb	r3, [r5, r4]
   18250:	ldrd	r4, [sp]
   18254:	ldr	r6, [sp, #8]
   18258:	add	sp, sp, #12
   1825c:	pop	{pc}		; (ldr pc, [sp], #4)
   18260:	cmp	r4, #0
   18264:	mov	r0, #22
   18268:	strbne	r6, [r5]
   1826c:	ldrd	r4, [sp]
   18270:	ldr	r6, [sp, #8]
   18274:	add	sp, sp, #12
   18278:	pop	{pc}		; (ldr pc, [sp], #4)
   1827c:	mov	r1, #0
   18280:	b	10e94 <setlocale@plt>
   18284:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   18288:	mov	r7, r0
   1828c:	ldr	r6, [pc, #72]	; 182dc <__assert_fail@plt+0x73dc>
   18290:	ldr	r5, [pc, #72]	; 182e0 <__assert_fail@plt+0x73e0>
   18294:	add	r6, pc, r6
   18298:	add	r5, pc, r5
   1829c:	sub	r6, r6, r5
   182a0:	mov	r8, r1
   182a4:	mov	r9, r2
   182a8:	bl	10c7c <calloc@plt-0x20>
   182ac:	asrs	r6, r6, #2
   182b0:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   182b4:	mov	r4, #0
   182b8:	add	r4, r4, #1
   182bc:	ldr	r3, [r5], #4
   182c0:	mov	r2, r9
   182c4:	mov	r1, r8
   182c8:	mov	r0, r7
   182cc:	blx	r3
   182d0:	cmp	r6, r4
   182d4:	bne	182b8 <__assert_fail@plt+0x73b8>
   182d8:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   182dc:	andeq	r1, r1, r8, ror ip
   182e0:	andeq	r1, r1, r0, ror ip
   182e4:	bx	lr
   182e8:	ldr	r3, [pc, #12]	; 182fc <__assert_fail@plt+0x73fc>
   182ec:	mov	r1, #0
   182f0:	add	r3, pc, r3
   182f4:	ldr	r2, [r3]
   182f8:	b	10e28 <__cxa_atexit@plt>
   182fc:	andeq	r1, r1, ip, ror #27

Disassembly of section .fini:

00018300 <.fini>:
   18300:	push	{r3, lr}
   18304:	pop	{r3, pc}
