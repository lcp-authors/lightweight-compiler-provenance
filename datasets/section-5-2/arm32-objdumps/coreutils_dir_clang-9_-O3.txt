
../repos/coreutils/src/dir:     file format elf32-littlearm


Disassembly of section .init:

00011b68 <.init>:
   11b68:	push	{r3, lr}
   11b6c:	bl	120dc <__assert_fail@plt+0x50>
   11b70:	pop	{r3, pc}

Disassembly of section .plt:

00011b74 <calloc@plt-0x14>:
   11b74:	push	{lr}		; (str lr, [sp, #-4]!)
   11b78:	ldr	lr, [pc, #4]	; 11b84 <calloc@plt-0x4>
   11b7c:	add	lr, pc, lr
   11b80:	ldr	pc, [lr, #8]!
   11b84:	andeq	lr, r2, ip, ror r4

00011b88 <calloc@plt>:
   11b88:	add	ip, pc, #0, 12
   11b8c:	add	ip, ip, #188416	; 0x2e000
   11b90:	ldr	pc, [ip, #1148]!	; 0x47c

00011b94 <fputs_unlocked@plt>:
   11b94:	add	ip, pc, #0, 12
   11b98:	add	ip, ip, #188416	; 0x2e000
   11b9c:	ldr	pc, [ip, #1140]!	; 0x474

00011ba0 <cap_to_text@plt>:
   11ba0:	add	ip, pc, #0, 12
   11ba4:	add	ip, ip, #188416	; 0x2e000
   11ba8:	ldr	pc, [ip, #1132]!	; 0x46c

00011bac <raise@plt>:
   11bac:	add	ip, pc, #0, 12
   11bb0:	add	ip, ip, #188416	; 0x2e000
   11bb4:	ldr	pc, [ip, #1124]!	; 0x464

00011bb8 <gmtime_r@plt>:
   11bb8:	add	ip, pc, #0, 12
   11bbc:	add	ip, ip, #188416	; 0x2e000
   11bc0:	ldr	pc, [ip, #1116]!	; 0x45c

00011bc4 <getpwnam@plt>:
   11bc4:	add	ip, pc, #0, 12
   11bc8:	add	ip, ip, #188416	; 0x2e000
   11bcc:	ldr	pc, [ip, #1108]!	; 0x454

00011bd0 <strcmp@plt>:
   11bd0:	add	ip, pc, #0, 12
   11bd4:	add	ip, ip, #188416	; 0x2e000
   11bd8:	ldr	pc, [ip, #1100]!	; 0x44c

00011bdc <getpwuid@plt>:
   11bdc:	add	ip, pc, #0, 12
   11be0:	add	ip, ip, #188416	; 0x2e000
   11be4:	ldr	pc, [ip, #1092]!	; 0x444

00011be8 <mktime@plt>:
   11be8:	add	ip, pc, #0, 12
   11bec:	add	ip, ip, #188416	; 0x2e000
   11bf0:	ldr	pc, [ip, #1084]!	; 0x43c

00011bf4 <fflush@plt>:
   11bf4:	add	ip, pc, #0, 12
   11bf8:	add	ip, ip, #188416	; 0x2e000
   11bfc:	ldr	pc, [ip, #1076]!	; 0x434

00011c00 <wcwidth@plt>:
   11c00:	add	ip, pc, #0, 12
   11c04:	add	ip, ip, #188416	; 0x2e000
   11c08:	ldr	pc, [ip, #1068]!	; 0x42c

00011c0c <sigprocmask@plt>:
   11c0c:	add	ip, pc, #0, 12
   11c10:	add	ip, ip, #188416	; 0x2e000
   11c14:	ldr	pc, [ip, #1060]!	; 0x424

00011c18 <_setjmp@plt>:
   11c18:	add	ip, pc, #0, 12
   11c1c:	add	ip, ip, #188416	; 0x2e000
   11c20:	ldr	pc, [ip, #1052]!	; 0x41c

00011c24 <memmove@plt>:
   11c24:	add	ip, pc, #0, 12
   11c28:	add	ip, ip, #188416	; 0x2e000
   11c2c:	ldr	pc, [ip, #1044]!	; 0x414

00011c30 <free@plt>:
   11c30:	add	ip, pc, #0, 12
   11c34:	add	ip, ip, #188416	; 0x2e000
   11c38:	ldr	pc, [ip, #1036]!	; 0x40c

00011c3c <faccessat@plt>:
   11c3c:	add	ip, pc, #0, 12
   11c40:	add	ip, ip, #188416	; 0x2e000
   11c44:	ldr	pc, [ip, #1028]!	; 0x404

00011c48 <clock_gettime@plt>:
   11c48:	add	ip, pc, #0, 12
   11c4c:	add	ip, ip, #188416	; 0x2e000
   11c50:	ldr	pc, [ip, #1020]!	; 0x3fc

00011c54 <_exit@plt>:
   11c54:	add	ip, pc, #0, 12
   11c58:	add	ip, ip, #188416	; 0x2e000
   11c5c:	ldr	pc, [ip, #1012]!	; 0x3f4

00011c60 <memcpy@plt>:
   11c60:	add	ip, pc, #0, 12
   11c64:	add	ip, ip, #188416	; 0x2e000
   11c68:	ldr	pc, [ip, #1004]!	; 0x3ec

00011c6c <__strtoull_internal@plt>:
   11c6c:	add	ip, pc, #0, 12
   11c70:	add	ip, ip, #188416	; 0x2e000
   11c74:	ldr	pc, [ip, #996]!	; 0x3e4

00011c78 <mbsinit@plt>:
   11c78:	add	ip, pc, #0, 12
   11c7c:	add	ip, ip, #188416	; 0x2e000
   11c80:	ldr	pc, [ip, #988]!	; 0x3dc

00011c84 <signal@plt>:
   11c84:	add	ip, pc, #0, 12
   11c88:	add	ip, ip, #188416	; 0x2e000
   11c8c:	ldr	pc, [ip, #980]!	; 0x3d4

00011c90 <fwrite_unlocked@plt>:
   11c90:	add	ip, pc, #0, 12
   11c94:	add	ip, ip, #188416	; 0x2e000
   11c98:	ldr	pc, [ip, #972]!	; 0x3cc

00011c9c <stpcpy@plt>:
   11c9c:	add	ip, pc, #0, 12
   11ca0:	add	ip, ip, #188416	; 0x2e000
   11ca4:	ldr	pc, [ip, #964]!	; 0x3c4

00011ca8 <dcgettext@plt>:
   11ca8:	add	ip, pc, #0, 12
   11cac:	add	ip, ip, #188416	; 0x2e000
   11cb0:	ldr	pc, [ip, #956]!	; 0x3bc

00011cb4 <realloc@plt>:
   11cb4:	add	ip, pc, #0, 12
   11cb8:	add	ip, ip, #188416	; 0x2e000
   11cbc:	ldr	pc, [ip, #948]!	; 0x3b4

00011cc0 <sigismember@plt>:
   11cc0:	add	ip, pc, #0, 12
   11cc4:	add	ip, ip, #188416	; 0x2e000
   11cc8:	ldr	pc, [ip, #940]!	; 0x3ac

00011ccc <fgetfilecon@plt>:
   11ccc:	add	ip, pc, #0, 12
   11cd0:	add	ip, ip, #188416	; 0x2e000
   11cd4:	ldr	pc, [ip, #932]!	; 0x3a4

00011cd8 <localtime_r@plt>:
   11cd8:	add	ip, pc, #0, 12
   11cdc:	add	ip, ip, #188416	; 0x2e000
   11ce0:	ldr	pc, [ip, #924]!	; 0x39c

00011ce4 <textdomain@plt>:
   11ce4:	add	ip, pc, #0, 12
   11ce8:	add	ip, ip, #188416	; 0x2e000
   11cec:	ldr	pc, [ip, #916]!	; 0x394

00011cf0 <iswcntrl@plt>:
   11cf0:	add	ip, pc, #0, 12
   11cf4:	add	ip, ip, #188416	; 0x2e000
   11cf8:	ldr	pc, [ip, #908]!	; 0x38c

00011cfc <rawmemchr@plt>:
   11cfc:	add	ip, pc, #0, 12
   11d00:	add	ip, ip, #188416	; 0x2e000
   11d04:	ldr	pc, [ip, #900]!	; 0x384

00011d08 <fflush_unlocked@plt>:
   11d08:	add	ip, pc, #0, 12
   11d0c:	add	ip, ip, #188416	; 0x2e000
   11d10:	ldr	pc, [ip, #892]!	; 0x37c

00011d14 <iswprint@plt>:
   11d14:	add	ip, pc, #0, 12
   11d18:	add	ip, ip, #188416	; 0x2e000
   11d1c:	ldr	pc, [ip, #884]!	; 0x374

00011d20 <tzset@plt>:
   11d20:	add	ip, pc, #0, 12
   11d24:	add	ip, ip, #188416	; 0x2e000
   11d28:	ldr	pc, [ip, #876]!	; 0x36c

00011d2c <readlink@plt>:
   11d2c:	add	ip, pc, #0, 12
   11d30:	add	ip, ip, #188416	; 0x2e000
   11d34:	ldr	pc, [ip, #868]!	; 0x364

00011d38 <sigaction@plt>:
   11d38:	add	ip, pc, #0, 12
   11d3c:	add	ip, ip, #188416	; 0x2e000
   11d40:	ldr	pc, [ip, #860]!	; 0x35c

00011d44 <fwrite@plt>:
   11d44:	add	ip, pc, #0, 12
   11d48:	add	ip, ip, #188416	; 0x2e000
   11d4c:	ldr	pc, [ip, #852]!	; 0x354

00011d50 <ioctl@plt>:
   11d50:	add	ip, pc, #0, 12
   11d54:	add	ip, ip, #188416	; 0x2e000
   11d58:	ldr	pc, [ip, #844]!	; 0x34c

00011d5c <lseek64@plt>:
   11d5c:	add	ip, pc, #0, 12
   11d60:	add	ip, ip, #188416	; 0x2e000
   11d64:	ldr	pc, [ip, #836]!	; 0x344

00011d68 <__ctype_get_mb_cur_max@plt>:
   11d68:	add	ip, pc, #0, 12
   11d6c:	add	ip, ip, #188416	; 0x2e000
   11d70:	ldr	pc, [ip, #828]!	; 0x33c

00011d74 <strcpy@plt>:
   11d74:	add	ip, pc, #0, 12
   11d78:	add	ip, ip, #188416	; 0x2e000
   11d7c:	ldr	pc, [ip, #820]!	; 0x334

00011d80 <__fpending@plt>:
   11d80:	add	ip, pc, #0, 12
   11d84:	add	ip, ip, #188416	; 0x2e000
   11d88:	ldr	pc, [ip, #812]!	; 0x32c

00011d8c <mbrtowc@plt>:
   11d8c:	add	ip, pc, #0, 12
   11d90:	add	ip, ip, #188416	; 0x2e000
   11d94:	ldr	pc, [ip, #804]!	; 0x324

00011d98 <wcstombs@plt>:
   11d98:	add	ip, pc, #0, 12
   11d9c:	add	ip, ip, #188416	; 0x2e000
   11da0:	ldr	pc, [ip, #796]!	; 0x31c

00011da4 <error@plt>:
   11da4:	add	ip, pc, #0, 12
   11da8:	add	ip, ip, #188416	; 0x2e000
   11dac:	ldr	pc, [ip, #788]!	; 0x314

00011db0 <gethostname@plt>:
   11db0:	add	ip, pc, #0, 12
   11db4:	add	ip, ip, #188416	; 0x2e000
   11db8:	ldr	pc, [ip, #780]!	; 0x30c

00011dbc <opendir@plt>:
   11dbc:	add	ip, pc, #0, 12
   11dc0:	add	ip, ip, #188416	; 0x2e000
   11dc4:	ldr	pc, [ip, #772]!	; 0x304

00011dc8 <fnmatch@plt>:
   11dc8:	add	ip, pc, #0, 12
   11dcc:	add	ip, ip, #188416	; 0x2e000
   11dd0:	ldr	pc, [ip, #764]!	; 0x2fc

00011dd4 <strcoll@plt>:
   11dd4:	add	ip, pc, #0, 12
   11dd8:	add	ip, ip, #188416	; 0x2e000
   11ddc:	ldr	pc, [ip, #756]!	; 0x2f4

00011de0 <getenv@plt>:
   11de0:	add	ip, pc, #0, 12
   11de4:	add	ip, ip, #188416	; 0x2e000
   11de8:	ldr	pc, [ip, #748]!	; 0x2ec

00011dec <lgetfilecon@plt>:
   11dec:	add	ip, pc, #0, 12
   11df0:	add	ip, ip, #188416	; 0x2e000
   11df4:	ldr	pc, [ip, #740]!	; 0x2e4

00011df8 <malloc@plt>:
   11df8:	add	ip, pc, #0, 12
   11dfc:	add	ip, ip, #188416	; 0x2e000
   11e00:	ldr	pc, [ip, #732]!	; 0x2dc

00011e04 <sigaddset@plt>:
   11e04:	add	ip, pc, #0, 12
   11e08:	add	ip, ip, #188416	; 0x2e000
   11e0c:	ldr	pc, [ip, #724]!	; 0x2d4

00011e10 <__libc_start_main@plt>:
   11e10:	add	ip, pc, #0, 12
   11e14:	add	ip, ip, #188416	; 0x2e000
   11e18:	ldr	pc, [ip, #716]!	; 0x2cc

00011e1c <strftime@plt>:
   11e1c:	add	ip, pc, #0, 12
   11e20:	add	ip, ip, #188416	; 0x2e000
   11e24:	ldr	pc, [ip, #708]!	; 0x2c4

00011e28 <__freading@plt>:
   11e28:	add	ip, pc, #0, 12
   11e2c:	add	ip, ip, #188416	; 0x2e000
   11e30:	ldr	pc, [ip, #700]!	; 0x2bc

00011e34 <__ctype_tolower_loc@plt>:
   11e34:	add	ip, pc, #0, 12
   11e38:	add	ip, ip, #188416	; 0x2e000
   11e3c:	ldr	pc, [ip, #692]!	; 0x2b4

00011e40 <__ctype_toupper_loc@plt>:
   11e40:	add	ip, pc, #0, 12
   11e44:	add	ip, ip, #188416	; 0x2e000
   11e48:	ldr	pc, [ip, #684]!	; 0x2ac

00011e4c <__gmon_start__@plt>:
   11e4c:	add	ip, pc, #0, 12
   11e50:	add	ip, ip, #188416	; 0x2e000
   11e54:	ldr	pc, [ip, #676]!	; 0x2a4

00011e58 <getopt_long@plt>:
   11e58:	add	ip, pc, #0, 12
   11e5c:	add	ip, ip, #188416	; 0x2e000
   11e60:	ldr	pc, [ip, #668]!	; 0x29c

00011e64 <__ctype_b_loc@plt>:
   11e64:	add	ip, pc, #0, 12
   11e68:	add	ip, ip, #188416	; 0x2e000
   11e6c:	ldr	pc, [ip, #660]!	; 0x294

00011e70 <getcwd@plt>:
   11e70:	add	ip, pc, #0, 12
   11e74:	add	ip, ip, #188416	; 0x2e000
   11e78:	ldr	pc, [ip, #652]!	; 0x28c

00011e7c <exit@plt>:
   11e7c:	add	ip, pc, #0, 12
   11e80:	add	ip, ip, #188416	; 0x2e000
   11e84:	ldr	pc, [ip, #644]!	; 0x284

00011e88 <getfilecon@plt>:
   11e88:	add	ip, pc, #0, 12
   11e8c:	add	ip, ip, #188416	; 0x2e000
   11e90:	ldr	pc, [ip, #636]!	; 0x27c

00011e94 <bcmp@plt>:
   11e94:	add	ip, pc, #0, 12
   11e98:	add	ip, ip, #188416	; 0x2e000
   11e9c:	ldr	pc, [ip, #628]!	; 0x274

00011ea0 <tcgetpgrp@plt>:
   11ea0:	add	ip, pc, #0, 12
   11ea4:	add	ip, ip, #188416	; 0x2e000
   11ea8:	ldr	pc, [ip, #620]!	; 0x26c

00011eac <strlen@plt>:
   11eac:	add	ip, pc, #0, 12
   11eb0:	add	ip, ip, #188416	; 0x2e000
   11eb4:	ldr	pc, [ip, #612]!	; 0x264

00011eb8 <strchr@plt>:
   11eb8:	add	ip, pc, #0, 12
   11ebc:	add	ip, ip, #188416	; 0x2e000
   11ec0:	ldr	pc, [ip, #604]!	; 0x25c

00011ec4 <setenv@plt>:
   11ec4:	add	ip, pc, #0, 12
   11ec8:	add	ip, ip, #188416	; 0x2e000
   11ecc:	ldr	pc, [ip, #596]!	; 0x254

00011ed0 <__errno_location@plt>:
   11ed0:	add	ip, pc, #0, 12
   11ed4:	add	ip, ip, #188416	; 0x2e000
   11ed8:	ldr	pc, [ip, #588]!	; 0x24c

00011edc <__sprintf_chk@plt>:
   11edc:	add	ip, pc, #0, 12
   11ee0:	add	ip, ip, #188416	; 0x2e000
   11ee4:	ldr	pc, [ip, #580]!	; 0x244

00011ee8 <__cxa_atexit@plt>:
   11ee8:	add	ip, pc, #0, 12
   11eec:	add	ip, ip, #188416	; 0x2e000
   11ef0:	ldr	pc, [ip, #572]!	; 0x23c

00011ef4 <memset@plt>:
   11ef4:	add	ip, pc, #0, 12
   11ef8:	add	ip, ip, #188416	; 0x2e000
   11efc:	ldr	pc, [ip, #564]!	; 0x234

00011f00 <__printf_chk@plt>:
   11f00:	add	ip, pc, #0, 12
   11f04:	add	ip, ip, #188416	; 0x2e000
   11f08:	ldr	pc, [ip, #556]!	; 0x22c

00011f0c <stpncpy@plt>:
   11f0c:	add	ip, pc, #0, 12
   11f10:	add	ip, ip, #188416	; 0x2e000
   11f14:	ldr	pc, [ip, #548]!	; 0x224

00011f18 <fileno@plt>:
   11f18:	add	ip, pc, #0, 12
   11f1c:	add	ip, ip, #188416	; 0x2e000
   11f20:	ldr	pc, [ip, #540]!	; 0x21c

00011f24 <__fprintf_chk@plt>:
   11f24:	add	ip, pc, #0, 12
   11f28:	add	ip, ip, #188416	; 0x2e000
   11f2c:	ldr	pc, [ip, #532]!	; 0x214

00011f30 <fclose@plt>:
   11f30:	add	ip, pc, #0, 12
   11f34:	add	ip, ip, #188416	; 0x2e000
   11f38:	ldr	pc, [ip, #524]!	; 0x20c

00011f3c <fseeko64@plt>:
   11f3c:	add	ip, pc, #0, 12
   11f40:	add	ip, ip, #188416	; 0x2e000
   11f44:	ldr	pc, [ip, #516]!	; 0x204

00011f48 <statx@plt>:
   11f48:	add	ip, pc, #0, 12
   11f4c:	add	ip, ip, #188416	; 0x2e000
   11f50:	ldr	pc, [ip, #508]!	; 0x1fc

00011f54 <__overflow@plt>:
   11f54:	add	ip, pc, #0, 12
   11f58:	add	ip, ip, #188416	; 0x2e000
   11f5c:	ldr	pc, [ip, #500]!	; 0x1f4

00011f60 <setlocale@plt>:
   11f60:	add	ip, pc, #0, 12
   11f64:	add	ip, ip, #188416	; 0x2e000
   11f68:	ldr	pc, [ip, #492]!	; 0x1ec

00011f6c <sigemptyset@plt>:
   11f6c:	add	ip, pc, #0, 12
   11f70:	add	ip, ip, #188416	; 0x2e000
   11f74:	ldr	pc, [ip, #484]!	; 0x1e4

00011f78 <wcswidth@plt>:
   11f78:	add	ip, pc, #0, 12
   11f7c:	add	ip, ip, #188416	; 0x2e000
   11f80:	ldr	pc, [ip, #476]!	; 0x1dc

00011f84 <strrchr@plt>:
   11f84:	add	ip, pc, #0, 12
   11f88:	add	ip, ip, #188416	; 0x2e000
   11f8c:	ldr	pc, [ip, #468]!	; 0x1d4

00011f90 <cap_get_file@plt>:
   11f90:	add	ip, pc, #0, 12
   11f94:	add	ip, ip, #188416	; 0x2e000
   11f98:	ldr	pc, [ip, #460]!	; 0x1cc

00011f9c <nl_langinfo@plt>:
   11f9c:	add	ip, pc, #0, 12
   11fa0:	add	ip, ip, #188416	; 0x2e000
   11fa4:	ldr	pc, [ip, #452]!	; 0x1c4

00011fa8 <localeconv@plt>:
   11fa8:	add	ip, pc, #0, 12
   11fac:	add	ip, ip, #188416	; 0x2e000
   11fb0:	ldr	pc, [ip, #444]!	; 0x1bc

00011fb4 <mbstowcs@plt>:
   11fb4:	add	ip, pc, #0, 12
   11fb8:	add	ip, ip, #188416	; 0x2e000
   11fbc:	ldr	pc, [ip, #436]!	; 0x1b4

00011fc0 <readdir64@plt>:
   11fc0:	add	ip, pc, #0, 12
   11fc4:	add	ip, ip, #188416	; 0x2e000
   11fc8:	ldr	pc, [ip, #428]!	; 0x1ac

00011fcc <timegm@plt>:
   11fcc:	add	ip, pc, #0, 12
   11fd0:	add	ip, ip, #188416	; 0x2e000
   11fd4:	ldr	pc, [ip, #420]!	; 0x1a4

00011fd8 <cap_free@plt>:
   11fd8:	add	ip, pc, #0, 12
   11fdc:	add	ip, ip, #188416	; 0x2e000
   11fe0:	ldr	pc, [ip, #412]!	; 0x19c

00011fe4 <dirfd@plt>:
   11fe4:	add	ip, pc, #0, 12
   11fe8:	add	ip, ip, #188416	; 0x2e000
   11fec:	ldr	pc, [ip, #404]!	; 0x194

00011ff0 <freecon@plt>:
   11ff0:	add	ip, pc, #0, 12
   11ff4:	add	ip, ip, #188416	; 0x2e000
   11ff8:	ldr	pc, [ip, #396]!	; 0x18c

00011ffc <bindtextdomain@plt>:
   11ffc:	add	ip, pc, #0, 12
   12000:	add	ip, ip, #188416	; 0x2e000
   12004:	ldr	pc, [ip, #388]!	; 0x184

00012008 <__xstat64@plt>:
   12008:	add	ip, pc, #0, 12
   1200c:	add	ip, ip, #188416	; 0x2e000
   12010:	ldr	pc, [ip, #380]!	; 0x17c

00012014 <isatty@plt>:
   12014:	add	ip, pc, #0, 12
   12018:	add	ip, ip, #188416	; 0x2e000
   1201c:	ldr	pc, [ip, #372]!	; 0x174

00012020 <unsetenv@plt>:
   12020:	add	ip, pc, #0, 12
   12024:	add	ip, ip, #188416	; 0x2e000
   12028:	ldr	pc, [ip, #364]!	; 0x16c

0001202c <strncmp@plt>:
   1202c:	add	ip, pc, #0, 12
   12030:	add	ip, ip, #188416	; 0x2e000
   12034:	ldr	pc, [ip, #356]!	; 0x164

00012038 <abort@plt>:
   12038:	add	ip, pc, #0, 12
   1203c:	add	ip, ip, #188416	; 0x2e000
   12040:	ldr	pc, [ip, #348]!	; 0x15c

00012044 <closedir@plt>:
   12044:	add	ip, pc, #0, 12
   12048:	add	ip, ip, #188416	; 0x2e000
   1204c:	ldr	pc, [ip, #340]!	; 0x154

00012050 <getgrgid@plt>:
   12050:	add	ip, pc, #0, 12
   12054:	add	ip, ip, #188416	; 0x2e000
   12058:	ldr	pc, [ip, #332]!	; 0x14c

0001205c <getgrnam@plt>:
   1205c:	add	ip, pc, #0, 12
   12060:	add	ip, ip, #188416	; 0x2e000
   12064:	ldr	pc, [ip, #324]!	; 0x144

00012068 <__snprintf_chk@plt>:
   12068:	add	ip, pc, #0, 12
   1206c:	add	ip, ip, #188416	; 0x2e000
   12070:	ldr	pc, [ip, #316]!	; 0x13c

00012074 <strspn@plt>:
   12074:	add	ip, pc, #0, 12
   12078:	add	ip, ip, #188416	; 0x2e000
   1207c:	ldr	pc, [ip, #308]!	; 0x134

00012080 <__mempcpy_chk@plt>:
   12080:	add	ip, pc, #0, 12
   12084:	add	ip, ip, #188416	; 0x2e000
   12088:	ldr	pc, [ip, #300]!	; 0x12c

0001208c <__assert_fail@plt>:
   1208c:	add	ip, pc, #0, 12
   12090:	add	ip, ip, #188416	; 0x2e000
   12094:	ldr	pc, [ip, #292]!	; 0x124

Disassembly of section .text:

000120a0 <_obstack_begin@@Base-0x13a18>:
   120a0:	mov	fp, #0
   120a4:	mov	lr, #0
   120a8:	pop	{r1}		; (ldr r1, [sp], #4)
   120ac:	mov	r2, sp
   120b0:	push	{r2}		; (str r2, [sp, #-4]!)
   120b4:	push	{r0}		; (str r0, [sp, #-4]!)
   120b8:	ldr	ip, [pc, #16]	; 120d0 <__assert_fail@plt+0x44>
   120bc:	push	{ip}		; (str ip, [sp, #-4]!)
   120c0:	ldr	r0, [pc, #12]	; 120d4 <__assert_fail@plt+0x48>
   120c4:	ldr	r3, [pc, #12]	; 120d8 <__assert_fail@plt+0x4c>
   120c8:	bl	11e10 <__libc_start_main@plt>
   120cc:	bl	12038 <abort@plt>
   120d0:	andeq	fp, r2, r0, asr r0
   120d4:	muleq	r1, r0, r1
   120d8:	strdeq	sl, [r2], -r0
   120dc:	ldr	r3, [pc, #20]	; 120f8 <__assert_fail@plt+0x6c>
   120e0:	ldr	r2, [pc, #20]	; 120fc <__assert_fail@plt+0x70>
   120e4:	add	r3, pc, r3
   120e8:	ldr	r2, [r3, r2]
   120ec:	cmp	r2, #0
   120f0:	bxeq	lr
   120f4:	b	11e4c <__gmon_start__@plt>
   120f8:	andeq	sp, r2, r4, lsl pc
   120fc:			; <UNDEFINED> instruction: 0x000001bc
   12100:	ldr	r0, [pc, #24]	; 12120 <__assert_fail@plt+0x94>
   12104:	ldr	r3, [pc, #24]	; 12124 <__assert_fail@plt+0x98>
   12108:	cmp	r3, r0
   1210c:	bxeq	lr
   12110:	ldr	r3, [pc, #16]	; 12128 <__assert_fail@plt+0x9c>
   12114:	cmp	r3, #0
   12118:	bxeq	lr
   1211c:	bx	r3
   12120:	strdeq	r0, [r4], -r8
   12124:	strdeq	r0, [r4], -r8
   12128:	andeq	r0, r0, r0
   1212c:	ldr	r0, [pc, #36]	; 12158 <__assert_fail@plt+0xcc>
   12130:	ldr	r1, [pc, #36]	; 1215c <__assert_fail@plt+0xd0>
   12134:	sub	r1, r1, r0
   12138:	asr	r1, r1, #2
   1213c:	add	r1, r1, r1, lsr #31
   12140:	asrs	r1, r1, #1
   12144:	bxeq	lr
   12148:	ldr	r3, [pc, #16]	; 12160 <__assert_fail@plt+0xd4>
   1214c:	cmp	r3, #0
   12150:	bxeq	lr
   12154:	bx	r3
   12158:	strdeq	r0, [r4], -r8
   1215c:	strdeq	r0, [r4], -r8
   12160:	andeq	r0, r0, r0
   12164:	push	{r4, lr}
   12168:	ldr	r4, [pc, #24]	; 12188 <__assert_fail@plt+0xfc>
   1216c:	ldrb	r3, [r4]
   12170:	cmp	r3, #0
   12174:	popne	{r4, pc}
   12178:	bl	12100 <__assert_fail@plt+0x74>
   1217c:	mov	r3, #1
   12180:	strb	r3, [r4]
   12184:	pop	{r4, pc}
   12188:	andeq	r0, r4, r4, lsl r3
   1218c:	b	1212c <__assert_fail@plt+0xa0>
   12190:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12194:	add	fp, sp, #28
   12198:	sub	sp, sp, #612	; 0x264
   1219c:	sub	sp, sp, #1024	; 0x400
   121a0:	mov	r9, r0
   121a4:	ldr	r0, [r1]
   121a8:	mov	r4, r1
   121ac:	bl	25ecc <_obstack_memory_used@@Base+0x78>
   121b0:	movw	r1, #54434	; 0xd4a2
   121b4:	mov	r0, #6
   121b8:	movt	r1, #2
   121bc:	bl	11f60 <setlocale@plt>
   121c0:	movw	r6, #52999	; 0xcf07
   121c4:	movw	r1, #45180	; 0xb07c
   121c8:	movt	r6, #2
   121cc:	movt	r1, #2
   121d0:	mov	r0, r6
   121d4:	bl	11ffc <bindtextdomain@plt>
   121d8:	mov	r0, r6
   121dc:	bl	11ce4 <textdomain@plt>
   121e0:	movw	r0, #684	; 0x2ac
   121e4:	mov	r1, #2
   121e8:	movt	r0, #4
   121ec:	str	r1, [r0]
   121f0:	movw	r0, #64444	; 0xfbbc
   121f4:	movt	r0, #1
   121f8:	bl	2b054 <_obstack_memory_used@@Base+0x5200>
   121fc:	movw	r1, #4688	; 0x1250
   12200:	mov	r0, #0
   12204:	mov	r2, #0
   12208:	mvn	sl, #0
   1220c:	movw	r7, #52807	; 0xce47
   12210:	movw	r6, #55184	; 0xd790
   12214:	str	r4, [sp, #72]	; 0x48
   12218:	str	r9, [sp, #56]	; 0x38
   1221c:	movt	r1, #4
   12220:	str	r0, [sp, #44]	; 0x2c
   12224:	mov	r0, #1
   12228:	movt	r7, #2
   1222c:	movt	r6, #2
   12230:	str	r2, [r1, #28]
   12234:	str	r2, [r1, #32]
   12238:	strb	r0, [r1]
   1223c:	movw	r1, #4816	; 0x12d0
   12240:	mov	r0, #-2147483648	; 0x80000000
   12244:	movt	r1, #4
   12248:	str	r0, [r1, #68]	; 0x44
   1224c:	mvn	r0, #0
   12250:	str	sl, [r1, #72]	; 0x48
   12254:	mvn	r1, #0
   12258:	str	r0, [sp, #52]	; 0x34
   1225c:	mvn	r0, #0
   12260:	str	r1, [sp, #64]	; 0x40
   12264:	mvn	r1, #0
   12268:	str	r0, [sp, #48]	; 0x30
   1226c:	mvn	r0, #0
   12270:	str	r1, [sp, #76]	; 0x4c
   12274:	mov	r1, #0
   12278:	str	r0, [sp, #68]	; 0x44
   1227c:	mvn	r0, #0
   12280:	str	r1, [sp, #60]	; 0x3c
   12284:	b	122a4 <__assert_fail@plt+0x218>
   12288:	movw	r1, #4688	; 0x1250
   1228c:	mov	r0, #1
   12290:	movt	r1, #4
   12294:	strb	r0, [r1, #14]
   12298:	mov	r0, #0
   1229c:	str	r0, [sp, #76]	; 0x4c
   122a0:	mov	r0, r8
   122a4:	mov	r8, r0
   122a8:	sub	r0, fp, #44	; 0x2c
   122ac:	mov	r1, r4
   122b0:	mov	r2, r7
   122b4:	mov	r3, r6
   122b8:	str	sl, [fp, #-44]	; 0xffffffd4
   122bc:	str	r0, [sp]
   122c0:	mov	r0, r9
   122c4:	bl	11e58 <getopt_long@plt>
   122c8:	add	r1, r0, #3
   122cc:	cmp	r1, #276	; 0x114
   122d0:	bhi	15874 <__assert_fail@plt+0x37e8>
   122d4:	add	r2, pc, #4
   122d8:	mov	r0, #7
   122dc:	ldr	pc, [r2, r1, lsl #2]
   122e0:	andeq	r5, r1, ip, ror r8
   122e4:	strdeq	r5, [r1], -r8
   122e8:	andeq	r3, r1, r8, asr #32
   122ec:	andeq	r5, r1, r4, ror r8
   122f0:	andeq	r5, r1, r4, ror r8
   122f4:	andeq	r5, r1, r4, ror r8
   122f8:	andeq	r5, r1, r4, ror r8
   122fc:	andeq	r5, r1, r4, ror r8
   12300:	andeq	r5, r1, r4, ror r8
   12304:	andeq	r5, r1, r4, ror r8
   12308:	andeq	r5, r1, r4, ror r8
   1230c:	andeq	r5, r1, r4, ror r8
   12310:	andeq	r5, r1, r4, ror r8
   12314:	andeq	r5, r1, r4, ror r8
   12318:	andeq	r5, r1, r4, ror r8
   1231c:	andeq	r5, r1, r4, ror r8
   12320:	andeq	r5, r1, r4, ror r8
   12324:	andeq	r5, r1, r4, ror r8
   12328:	andeq	r5, r1, r4, ror r8
   1232c:	andeq	r5, r1, r4, ror r8
   12330:	andeq	r5, r1, r4, ror r8
   12334:	andeq	r5, r1, r4, ror r8
   12338:	andeq	r5, r1, r4, ror r8
   1233c:	andeq	r5, r1, r4, ror r8
   12340:	andeq	r5, r1, r4, ror r8
   12344:	andeq	r5, r1, r4, ror r8
   12348:	andeq	r5, r1, r4, ror r8
   1234c:	andeq	r5, r1, r4, ror r8
   12350:	andeq	r5, r1, r4, ror r8
   12354:	andeq	r5, r1, r4, ror r8
   12358:	andeq	r5, r1, r4, ror r8
   1235c:	andeq	r5, r1, r4, ror r8
   12360:	andeq	r5, r1, r4, ror r8
   12364:	andeq	r5, r1, r4, ror r8
   12368:	andeq	r5, r1, r4, ror r8
   1236c:	andeq	r5, r1, r4, ror r8
   12370:	andeq	r5, r1, r4, ror r8
   12374:	andeq	r5, r1, r4, ror r8
   12378:	andeq	r5, r1, r4, ror r8
   1237c:	andeq	r5, r1, r4, ror r8
   12380:	andeq	r5, r1, r4, ror r8
   12384:	andeq	r5, r1, r4, ror r8
   12388:	andeq	r5, r1, r4, ror r8
   1238c:	andeq	r5, r1, r4, ror r8
   12390:	andeq	r5, r1, r4, ror r8
   12394:	andeq	r5, r1, r4, ror r8
   12398:	andeq	r5, r1, r4, ror r8
   1239c:	andeq	r5, r1, r4, ror r8
   123a0:	andeq	r5, r1, r4, ror r8
   123a4:	andeq	r5, r1, r4, ror r8
   123a8:	andeq	r5, r1, r4, ror r8
   123ac:	andeq	r5, r1, r4, ror r8
   123b0:	andeq	r2, r1, r4, lsr r7
   123b4:	andeq	r5, r1, r4, ror r8
   123b8:	andeq	r5, r1, r4, ror r8
   123bc:	andeq	r5, r1, r4, ror r8
   123c0:	andeq	r5, r1, r4, ror r8
   123c4:	andeq	r5, r1, r4, ror r8
   123c8:	andeq	r5, r1, r4, ror r8
   123cc:	andeq	r5, r1, r4, ror r8
   123d0:	andeq	r5, r1, r4, ror r8
   123d4:	andeq	r5, r1, r4, ror r8
   123d8:	andeq	r5, r1, r4, ror r8
   123dc:	andeq	r5, r1, r4, ror r8
   123e0:	andeq	r5, r1, r4, ror r8
   123e4:	andeq	r5, r1, r4, ror r8
   123e8:	andeq	r5, r1, r4, ror r8
   123ec:	andeq	r5, r1, r4, ror r8
   123f0:	andeq	r2, r1, r0, lsr #22
   123f4:	ldrdeq	r2, [r1], -r8
   123f8:	andeq	r2, r1, r0, lsl #20
   123fc:	andeq	r2, r1, ip, lsl #24
   12400:	andeq	r5, r1, r4, ror r8
   12404:	andeq	r2, r1, r0, lsl sl
   12408:	andeq	r2, r1, ip, ror #23
   1240c:	andeq	r2, r1, r8, lsr fp
   12410:	andeq	r2, r1, r0, asr #22
   12414:	andeq	r5, r1, r4, ror r8
   12418:	andeq	r5, r1, r4, ror r8
   1241c:			; <UNDEFINED> instruction: 0x000129bc
   12420:	andeq	r5, r1, r4, ror r8
   12424:	andeq	r2, r1, r8, ror #27
   12428:	andeq	r5, r1, r4, ror r8
   1242c:	andeq	r5, r1, r4, ror r8
   12430:	andeq	r2, r1, r8, lsl #20
   12434:	ldrdeq	r2, [r1], -ip
   12438:	andeq	r2, r1, r0, ror #18
   1243c:	andeq	r2, r1, ip, lsr #26
   12440:	strdeq	r2, [r1], -r8
   12444:	andeq	r5, r1, r4, ror r8
   12448:	andeq	r5, r1, r4, ror r8
   1244c:	andeq	r2, r1, r4, asr #16
   12450:	andeq	r5, r1, r4, ror r8
   12454:	andeq	r2, r1, ip, lsl #17
   12458:	andeq	r5, r1, r4, ror r8
   1245c:	andeq	r5, r1, r4, ror r8
   12460:	andeq	r5, r1, r4, ror r8
   12464:	andeq	r5, r1, r4, ror r8
   12468:	andeq	r5, r1, r4, ror r8
   1246c:	andeq	r5, r1, r4, ror r8
   12470:	ldrdeq	r2, [r1], -r0
   12474:	andeq	r2, r1, r4, lsr #5
   12478:	andeq	r2, r1, r4, ror #16
   1247c:	andeq	r2, r1, ip, ror #16
   12480:	andeq	r5, r1, r4, ror r8
   12484:	andeq	r2, r1, r4, asr #19
   12488:	andeq	r2, r1, r8, lsl #5
   1248c:	ldrdeq	r2, [r1], -r4
   12490:	andeq	r2, r1, r4, lsr #24
   12494:	andeq	r5, r1, r4, ror r8
   12498:	strdeq	r2, [r1], -r0
   1249c:	muleq	r1, r8, r2
   124a0:	andeq	r2, r1, ip, ror fp
   124a4:	andeq	r2, r1, r4, lsl #23
   124a8:	andeq	r2, r1, r4, asr #18
   124ac:	andeq	r2, r1, r4, lsl #17
   124b0:	andeq	r2, r1, r8, asr r9
   124b4:			; <UNDEFINED> instruction: 0x000127b4
   124b8:	andeq	r2, r1, ip, asr r7
   124bc:	andeq	r2, r1, ip, asr lr
   124c0:			; <UNDEFINED> instruction: 0x00012eb8
   124c4:	ldrdeq	r2, [r1], -r0
   124c8:	muleq	r1, r4, sp
   124cc:	andeq	r2, r1, r4, lsl #24
   124d0:	andeq	r5, r1, r4, ror r8
   124d4:	andeq	r5, r1, r4, ror r8
   124d8:	andeq	r5, r1, r4, ror r8
   124dc:	andeq	r5, r1, r4, ror r8
   124e0:	andeq	r5, r1, r4, ror r8
   124e4:	andeq	r5, r1, r4, ror r8
   124e8:	andeq	r5, r1, r4, ror r8
   124ec:	andeq	r5, r1, r4, ror r8
   124f0:	andeq	r5, r1, r4, ror r8
   124f4:	andeq	r5, r1, r4, ror r8
   124f8:	andeq	r5, r1, r4, ror r8
   124fc:	andeq	r5, r1, r4, ror r8
   12500:	andeq	r5, r1, r4, ror r8
   12504:	andeq	r5, r1, r4, ror r8
   12508:	andeq	r5, r1, r4, ror r8
   1250c:	andeq	r5, r1, r4, ror r8
   12510:	andeq	r5, r1, r4, ror r8
   12514:	andeq	r5, r1, r4, ror r8
   12518:	andeq	r5, r1, r4, ror r8
   1251c:	andeq	r5, r1, r4, ror r8
   12520:	andeq	r5, r1, r4, ror r8
   12524:	andeq	r5, r1, r4, ror r8
   12528:	andeq	r5, r1, r4, ror r8
   1252c:	andeq	r5, r1, r4, ror r8
   12530:	andeq	r5, r1, r4, ror r8
   12534:	andeq	r5, r1, r4, ror r8
   12538:	andeq	r5, r1, r4, ror r8
   1253c:	andeq	r5, r1, r4, ror r8
   12540:	andeq	r5, r1, r4, ror r8
   12544:	andeq	r5, r1, r4, ror r8
   12548:	andeq	r5, r1, r4, ror r8
   1254c:	andeq	r5, r1, r4, ror r8
   12550:	andeq	r5, r1, r4, ror r8
   12554:	andeq	r5, r1, r4, ror r8
   12558:	andeq	r5, r1, r4, ror r8
   1255c:	andeq	r5, r1, r4, ror r8
   12560:	andeq	r5, r1, r4, ror r8
   12564:	andeq	r5, r1, r4, ror r8
   12568:	andeq	r5, r1, r4, ror r8
   1256c:	andeq	r5, r1, r4, ror r8
   12570:	andeq	r5, r1, r4, ror r8
   12574:	andeq	r5, r1, r4, ror r8
   12578:	andeq	r5, r1, r4, ror r8
   1257c:	andeq	r5, r1, r4, ror r8
   12580:	andeq	r5, r1, r4, ror r8
   12584:	andeq	r5, r1, r4, ror r8
   12588:	andeq	r5, r1, r4, ror r8
   1258c:	andeq	r5, r1, r4, ror r8
   12590:	andeq	r5, r1, r4, ror r8
   12594:	andeq	r5, r1, r4, ror r8
   12598:	andeq	r5, r1, r4, ror r8
   1259c:	andeq	r5, r1, r4, ror r8
   125a0:	andeq	r5, r1, r4, ror r8
   125a4:	andeq	r5, r1, r4, ror r8
   125a8:	andeq	r5, r1, r4, ror r8
   125ac:	andeq	r5, r1, r4, ror r8
   125b0:	andeq	r5, r1, r4, ror r8
   125b4:	andeq	r5, r1, r4, ror r8
   125b8:	andeq	r5, r1, r4, ror r8
   125bc:	andeq	r5, r1, r4, ror r8
   125c0:	andeq	r5, r1, r4, ror r8
   125c4:	andeq	r5, r1, r4, ror r8
   125c8:	andeq	r5, r1, r4, ror r8
   125cc:	andeq	r5, r1, r4, ror r8
   125d0:	andeq	r5, r1, r4, ror r8
   125d4:	andeq	r5, r1, r4, ror r8
   125d8:	andeq	r5, r1, r4, ror r8
   125dc:	andeq	r5, r1, r4, ror r8
   125e0:	andeq	r5, r1, r4, ror r8
   125e4:	andeq	r5, r1, r4, ror r8
   125e8:	andeq	r5, r1, r4, ror r8
   125ec:	andeq	r5, r1, r4, ror r8
   125f0:	andeq	r5, r1, r4, ror r8
   125f4:	andeq	r5, r1, r4, ror r8
   125f8:	andeq	r5, r1, r4, ror r8
   125fc:	andeq	r5, r1, r4, ror r8
   12600:	andeq	r5, r1, r4, ror r8
   12604:	andeq	r5, r1, r4, ror r8
   12608:	andeq	r5, r1, r4, ror r8
   1260c:	andeq	r5, r1, r4, ror r8
   12610:	andeq	r5, r1, r4, ror r8
   12614:	andeq	r5, r1, r4, ror r8
   12618:	andeq	r5, r1, r4, ror r8
   1261c:	andeq	r5, r1, r4, ror r8
   12620:	andeq	r5, r1, r4, ror r8
   12624:	andeq	r5, r1, r4, ror r8
   12628:	andeq	r5, r1, r4, ror r8
   1262c:	andeq	r5, r1, r4, ror r8
   12630:	andeq	r5, r1, r4, ror r8
   12634:	andeq	r5, r1, r4, ror r8
   12638:	andeq	r5, r1, r4, ror r8
   1263c:	andeq	r5, r1, r4, ror r8
   12640:	andeq	r5, r1, r4, ror r8
   12644:	andeq	r5, r1, r4, ror r8
   12648:	andeq	r5, r1, r4, ror r8
   1264c:	andeq	r5, r1, r4, ror r8
   12650:	andeq	r5, r1, r4, ror r8
   12654:	andeq	r5, r1, r4, ror r8
   12658:	andeq	r5, r1, r4, ror r8
   1265c:	andeq	r5, r1, r4, ror r8
   12660:	andeq	r5, r1, r4, ror r8
   12664:	andeq	r5, r1, r4, ror r8
   12668:	andeq	r5, r1, r4, ror r8
   1266c:	andeq	r5, r1, r4, ror r8
   12670:	andeq	r5, r1, r4, ror r8
   12674:	andeq	r5, r1, r4, ror r8
   12678:	andeq	r5, r1, r4, ror r8
   1267c:	andeq	r5, r1, r4, ror r8
   12680:	andeq	r5, r1, r4, ror r8
   12684:	andeq	r5, r1, r4, ror r8
   12688:	andeq	r5, r1, r4, ror r8
   1268c:	andeq	r5, r1, r4, ror r8
   12690:	andeq	r5, r1, r4, ror r8
   12694:	andeq	r5, r1, r4, ror r8
   12698:	andeq	r5, r1, r4, ror r8
   1269c:	andeq	r5, r1, r4, ror r8
   126a0:	andeq	r5, r1, r4, ror r8
   126a4:	andeq	r5, r1, r4, ror r8
   126a8:	andeq	r5, r1, r4, ror r8
   126ac:	andeq	r5, r1, r4, ror r8
   126b0:	andeq	r5, r1, r4, ror r8
   126b4:	andeq	r5, r1, r4, ror r8
   126b8:	andeq	r5, r1, r4, ror r8
   126bc:	andeq	r5, r1, r4, ror r8
   126c0:	andeq	r5, r1, r4, ror r8
   126c4:	andeq	r5, r1, r4, ror r8
   126c8:	andeq	r5, r1, r4, ror r8
   126cc:	andeq	r5, r1, r4, ror r8
   126d0:	andeq	r5, r1, r4, ror r8
   126d4:	andeq	r5, r1, r4, ror r8
   126d8:	andeq	r5, r1, r4, ror r8
   126dc:	andeq	r5, r1, r4, ror r8
   126e0:	andeq	r5, r1, r4, ror r8
   126e4:	andeq	r5, r1, r4, ror r8
   126e8:	andeq	r5, r1, r4, ror r8
   126ec:	andeq	r2, r1, ip, asr #16
   126f0:	andeq	r2, r1, r8, ror #18
   126f4:	andeq	r2, r1, ip, lsr ip
   126f8:	andeq	r2, r1, r0, lsl #30
   126fc:	andeq	r2, r1, ip, asr #15
   12700:	muleq	r1, r8, fp
   12704:	andeq	r2, r1, r0, ror #29
   12708:	andeq	r2, r1, r4, asr #14
   1270c:	andeq	r2, r1, r0, lsl r8
   12710:	andeq	r2, r1, r4, lsr #17
   12714:	andeq	r2, r1, ip, ror #30
   12718:	andeq	r2, r1, r8, lsl pc
   1271c:	strdeq	r2, [r1], -r0
   12720:	andeq	r2, r1, r4, ror r7
   12724:	andeq	r2, r1, r0, lsl #28
   12728:	andeq	r2, r1, r4, ror #28
   1272c:	muleq	r1, ip, r7
   12730:	strdeq	r2, [r1], -r4
   12734:	ldr	r0, [sp, #76]	; 0x4c
   12738:	cmp	r0, #0
   1273c:	movwne	r0, #1
   12740:	b	1229c <__assert_fail@plt+0x210>
   12744:	movw	r1, #4688	; 0x1250
   12748:	mov	r0, #1
   1274c:	movt	r1, #4
   12750:	strb	r0, [r1, #2]
   12754:	mov	r0, r8
   12758:	b	122a4 <__assert_fail@plt+0x218>
   1275c:	movw	r1, #4688	; 0x1250
   12760:	mov	r0, #1
   12764:	movt	r1, #4
   12768:	strb	r0, [r1, #8]
   1276c:	mov	r0, r8
   12770:	b	122a4 <__assert_fail@plt+0x218>
   12774:	movw	r2, #4816	; 0x12d0
   12778:	mov	r1, #0
   1277c:	mov	r0, #1
   12780:	movt	r2, #4
   12784:	strd	r0, [r2, #88]	; 0x58
   12788:	movw	r2, #648	; 0x288
   1278c:	movt	r2, #4
   12790:	strd	r0, [r2, #8]
   12794:	mov	r0, #144	; 0x90
   12798:	b	127f8 <__assert_fail@plt+0x76c>
   1279c:	movw	r0, #784	; 0x310
   127a0:	movt	r0, #4
   127a4:	ldr	r0, [r0]
   127a8:	str	r0, [sp, #60]	; 0x3c
   127ac:	mov	r0, r8
   127b0:	b	122a4 <__assert_fail@plt+0x218>
   127b4:	movw	r1, #4688	; 0x1250
   127b8:	mov	r0, #1
   127bc:	movt	r1, #4
   127c0:	strb	r0, [r1, #18]
   127c4:	mov	r0, r8
   127c8:	b	122a4 <__assert_fail@plt+0x218>
   127cc:	mov	r0, #2
   127d0:	b	12fbc <__assert_fail@plt+0xf30>
   127d4:	movw	r2, #4816	; 0x12d0
   127d8:	mov	r1, #0
   127dc:	mov	r0, #1
   127e0:	movt	r2, #4
   127e4:	strd	r0, [r2, #88]	; 0x58
   127e8:	movw	r2, #648	; 0x288
   127ec:	movt	r2, #4
   127f0:	strd	r0, [r2, #8]
   127f4:	mov	r0, #176	; 0xb0
   127f8:	movw	r1, #4688	; 0x1250
   127fc:	movt	r1, #4
   12800:	str	r0, [r1, #100]	; 0x64
   12804:	str	r0, [r1, #104]	; 0x68
   12808:	mov	r0, r8
   1280c:	b	122a4 <__assert_fail@plt+0x218>
   12810:	mov	r0, #8
   12814:	bl	29090 <_obstack_memory_used@@Base+0x323c>
   12818:	movw	r1, #784	; 0x310
   1281c:	movw	r2, #4688	; 0x1250
   12820:	movt	r1, #4
   12824:	movt	r2, #4
   12828:	ldr	r1, [r1]
   1282c:	mov	r3, r2
   12830:	ldr	r2, [r2, #108]	; 0x6c
   12834:	str	r0, [r3, #108]	; 0x6c
   12838:	stm	r0, {r1, r2}
   1283c:	mov	r0, r8
   12840:	b	122a4 <__assert_fail@plt+0x218>
   12844:	mov	r0, #1
   12848:	b	12ed4 <__assert_fail@plt+0xe48>
   1284c:	movw	r1, #4688	; 0x1250
   12850:	mov	r0, #1
   12854:	movt	r1, #4
   12858:	strb	r0, [r1, #19]
   1285c:	mov	r0, r8
   12860:	b	122a4 <__assert_fail@plt+0x218>
   12864:	mov	r0, #1
   12868:	b	12ebc <__assert_fail@plt+0xe30>
   1286c:	movw	r1, #4688	; 0x1250
   12870:	mov	r0, #1
   12874:	movt	r1, #4
   12878:	strb	r0, [r1, #5]
   1287c:	mov	r0, r8
   12880:	b	122a4 <__assert_fail@plt+0x218>
   12884:	mov	r0, #1
   12888:	b	12fbc <__assert_fail@plt+0xf30>
   1288c:	movw	r1, #4688	; 0x1250
   12890:	mov	r0, #1
   12894:	movt	r1, #4
   12898:	strb	r0, [r1, #7]
   1289c:	mov	r0, r8
   128a0:	b	122a4 <__assert_fail@plt+0x218>
   128a4:	movw	r0, #784	; 0x310
   128a8:	movt	r0, #4
   128ac:	ldr	r1, [r0]
   128b0:	cmp	r1, #0
   128b4:	beq	13008 <__assert_fail@plt+0xf7c>
   128b8:	movw	r0, #680	; 0x2a8
   128bc:	movw	r4, #55904	; 0xda60
   128c0:	mov	r2, #4
   128c4:	mov	r5, #1
   128c8:	movt	r0, #4
   128cc:	str	r2, [sp]
   128d0:	movw	r2, #55940	; 0xda84
   128d4:	movt	r4, #2
   128d8:	movt	r2, #2
   128dc:	ldr	r0, [r0]
   128e0:	mov	r3, r4
   128e4:	stmib	sp, {r0, r5}
   128e8:	movw	r0, #52949	; 0xced5
   128ec:	movt	r0, #2
   128f0:	bl	1edcc <__assert_fail@plt+0xcd40>
   128f4:	ldr	r0, [r4, r0, lsl #2]
   128f8:	ldr	r4, [sp, #72]	; 0x48
   128fc:	cmp	r0, #1
   12900:	beq	1301c <__assert_fail@plt+0xf90>
   12904:	cmp	r0, #2
   12908:	bne	13018 <__assert_fail@plt+0xf8c>
   1290c:	movw	r4, #648	; 0x288
   12910:	movt	r4, #4
   12914:	ldrsb	r0, [r4]
   12918:	cmn	r0, #1
   1291c:	bgt	1292c <__assert_fail@plt+0x8a0>
   12920:	mov	r0, #1
   12924:	bl	12014 <isatty@plt>
   12928:	strb	r0, [r4]
   1292c:	ldr	r4, [sp, #72]	; 0x48
   12930:	uxtb	r5, r0
   12934:	tst	r0, #255	; 0xff
   12938:	cmp	r5, #0
   1293c:	movwne	r5, #1
   12940:	b	1301c <__assert_fail@plt+0xf90>
   12944:	movw	r1, #4688	; 0x1250
   12948:	mov	r0, #1
   1294c:	movt	r1, #4
   12950:	strb	r0, [r1, #17]
   12954:	b	12298 <__assert_fail@plt+0x20c>
   12958:	mov	r0, #1
   1295c:	b	12ef4 <__assert_fail@plt+0xe68>
   12960:	mov	r0, #3
   12964:	b	12ed4 <__assert_fail@plt+0xe48>
   12968:	movw	r4, #784	; 0x310
   1296c:	movw	r5, #4688	; 0x1250
   12970:	movw	r6, #4816	; 0x12d0
   12974:	movt	r4, #4
   12978:	movt	r5, #4
   1297c:	movt	r6, #4
   12980:	ldr	r0, [r4]
   12984:	add	r1, r5, #100	; 0x64
   12988:	add	r2, r6, #88	; 0x58
   1298c:	bl	22a28 <__assert_fail@plt+0x1099c>
   12990:	cmp	r0, #0
   12994:	bne	15944 <__assert_fail@plt+0x38b8>
   12998:	ldrd	r0, [r6, #88]	; 0x58
   1299c:	movw	r2, #648	; 0x288
   129a0:	ldr	r4, [sp, #72]	; 0x48
   129a4:	mvn	sl, #0
   129a8:	movt	r2, #4
   129ac:	strd	r0, [r2, #8]
   129b0:	ldr	r0, [r5, #100]	; 0x64
   129b4:	str	r0, [r5, #104]	; 0x68
   129b8:	b	12dd8 <__assert_fail@plt+0xd4c>
   129bc:	mov	r0, #4
   129c0:	b	12f04 <__assert_fail@plt+0xe78>
   129c4:	movw	r1, #4688	; 0x1250
   129c8:	mov	r0, #0
   129cc:	movt	r1, #4
   129d0:	strb	r0, [r1, #12]
   129d4:	mov	r2, r1
   129d8:	strb	r0, [r1, #1]
   129dc:	mov	r1, #2
   129e0:	str	r1, [r2, #92]	; 0x5c
   129e4:	strb	r0, [r2, #8]
   129e8:	ldr	r0, [sp, #76]	; 0x4c
   129ec:	cmp	r0, #0
   129f0:	mvneq	r0, #0
   129f4:	str	r0, [sp, #76]	; 0x4c
   129f8:	mov	r0, #6
   129fc:	b	12ed4 <__assert_fail@plt+0xe48>
   12a00:	mov	r0, #2
   12a04:	b	1229c <__assert_fail@plt+0x210>
   12a08:	mov	r0, #5
   12a0c:	b	122a4 <__assert_fail@plt+0x218>
   12a10:	movw	r0, #784	; 0x310
   12a14:	movw	sl, #4688	; 0x1250
   12a18:	movt	r0, #4
   12a1c:	movt	sl, #4
   12a20:	ldr	r1, [r0]
   12a24:	cmp	r1, #0
   12a28:	beq	12ab4 <__assert_fail@plt+0xa28>
   12a2c:	movw	r0, #680	; 0x2a8
   12a30:	movw	r9, #55904	; 0xda60
   12a34:	mov	r3, #4
   12a38:	mov	r2, #1
   12a3c:	movt	r0, #4
   12a40:	str	r3, [sp]
   12a44:	movt	r9, #2
   12a48:	ldr	r0, [r0]
   12a4c:	mov	r3, r9
   12a50:	stmib	sp, {r0, r2}
   12a54:	movw	r0, #52881	; 0xce91
   12a58:	movw	r2, #55940	; 0xda84
   12a5c:	movt	r0, #2
   12a60:	movt	r2, #2
   12a64:	bl	1edcc <__assert_fail@plt+0xcd40>
   12a68:	ldr	r0, [r9, r0, lsl #2]
   12a6c:	ldr	r9, [sp, #56]	; 0x38
   12a70:	movw	r6, #55184	; 0xd790
   12a74:	movt	r6, #2
   12a78:	cmp	r0, #1
   12a7c:	beq	12ab4 <__assert_fail@plt+0xa28>
   12a80:	cmp	r0, #2
   12a84:	bne	12abc <__assert_fail@plt+0xa30>
   12a88:	movw	r4, #648	; 0x288
   12a8c:	movt	r4, #4
   12a90:	ldrsb	r0, [r4]
   12a94:	cmn	r0, #1
   12a98:	bgt	12aa8 <__assert_fail@plt+0xa1c>
   12a9c:	mov	r0, #1
   12aa0:	bl	12014 <isatty@plt>
   12aa4:	strb	r0, [r4]
   12aa8:	ldr	r4, [sp, #72]	; 0x48
   12aac:	tst	r0, #255	; 0xff
   12ab0:	beq	12abc <__assert_fail@plt+0xa30>
   12ab4:	mov	r0, #3
   12ab8:	str	r0, [sl, #48]	; 0x30
   12abc:	movw	r7, #52807	; 0xce47
   12ac0:	mov	r0, r8
   12ac4:	mvn	sl, #0
   12ac8:	movt	r7, #2
   12acc:	b	122a4 <__assert_fail@plt+0x218>
   12ad0:	mov	r0, #2
   12ad4:	b	12b24 <__assert_fail@plt+0xa98>
   12ad8:	mov	r0, #8
   12adc:	bl	29090 <_obstack_memory_used@@Base+0x323c>
   12ae0:	movw	r2, #4816	; 0x12d0
   12ae4:	movw	r1, #52878	; 0xce8e
   12ae8:	movt	r2, #4
   12aec:	movt	r1, #2
   12af0:	mov	r4, r2
   12af4:	ldr	r2, [r2]
   12af8:	stm	r0, {r1, r2}
   12afc:	str	r0, [r4]
   12b00:	mov	r0, #8
   12b04:	bl	29090 <_obstack_memory_used@@Base+0x323c>
   12b08:	movw	r1, #52877	; 0xce8d
   12b0c:	ldr	r2, [r4]
   12b10:	str	r0, [r4]
   12b14:	movt	r1, #2
   12b18:	stm	r0, {r1, r2}
   12b1c:	b	12e50 <__assert_fail@plt+0xdc4>
   12b20:	mov	r0, #1
   12b24:	movw	r1, #4688	; 0x1250
   12b28:	movt	r1, #4
   12b2c:	str	r0, [r1, #92]	; 0x5c
   12b30:	mov	r0, r8
   12b34:	b	122a4 <__assert_fail@plt+0x218>
   12b38:	mov	r0, #2
   12b3c:	b	12f04 <__assert_fail@plt+0xe78>
   12b40:	movw	r0, #784	; 0x310
   12b44:	movt	r0, #4
   12b48:	ldr	r4, [r0]
   12b4c:	mov	r0, #8
   12b50:	bl	29090 <_obstack_memory_used@@Base+0x323c>
   12b54:	movw	r1, #4816	; 0x12d0
   12b58:	str	r4, [r0]
   12b5c:	ldr	r4, [sp, #72]	; 0x48
   12b60:	movt	r1, #4
   12b64:	mov	r2, r1
   12b68:	ldr	r1, [r1]
   12b6c:	str	r0, [r2]
   12b70:	str	r1, [r0, #4]
   12b74:	mov	r0, r8
   12b78:	b	122a4 <__assert_fail@plt+0x218>
   12b7c:	mov	r0, #4
   12b80:	b	1229c <__assert_fail@plt+0x210>
   12b84:	movw	r1, #4688	; 0x1250
   12b88:	mov	r0, #1
   12b8c:	movt	r1, #4
   12b90:	strb	r0, [r1, #16]
   12b94:	b	12298 <__assert_fail@plt+0x20c>
   12b98:	movw	r0, #784	; 0x310
   12b9c:	movw	r4, #56092	; 0xdb1c
   12ba0:	mov	r3, #4
   12ba4:	mov	r2, #1
   12ba8:	movt	r0, #4
   12bac:	str	r3, [sp]
   12bb0:	movt	r4, #2
   12bb4:	ldr	r1, [r0]
   12bb8:	movw	r0, #680	; 0x2a8
   12bbc:	mov	r3, r4
   12bc0:	movt	r0, #4
   12bc4:	ldr	r0, [r0]
   12bc8:	stmib	sp, {r0, r2}
   12bcc:	movw	r0, #52923	; 0xcebb
   12bd0:	movw	r2, #56120	; 0xdb38
   12bd4:	movt	r0, #2
   12bd8:	movt	r2, #2
   12bdc:	bl	1edcc <__assert_fail@plt+0xcd40>
   12be0:	ldr	r0, [r4, r0, lsl #2]
   12be4:	str	r0, [sp, #76]	; 0x4c
   12be8:	b	12e50 <__assert_fail@plt+0xdc4>
   12bec:	movw	r1, #4688	; 0x1250
   12bf0:	mov	r0, #1
   12bf4:	movt	r1, #4
   12bf8:	strb	r0, [r1, #17]
   12bfc:	mov	r0, r8
   12c00:	b	122a4 <__assert_fail@plt+0x218>
   12c04:	mov	r0, #3
   12c08:	b	1229c <__assert_fail@plt+0x210>
   12c0c:	movw	r1, #4688	; 0x1250
   12c10:	mov	r0, #1
   12c14:	movt	r1, #4
   12c18:	strb	r0, [r1, #11]
   12c1c:	mov	r0, r8
   12c20:	b	122a4 <__assert_fail@plt+0x218>
   12c24:	movw	r1, #4688	; 0x1250
   12c28:	mov	r0, #1
   12c2c:	movt	r1, #4
   12c30:	strb	r0, [r1, #15]
   12c34:	mov	r0, r8
   12c38:	b	122a4 <__assert_fail@plt+0x218>
   12c3c:	movw	r0, #784	; 0x310
   12c40:	movt	r0, #4
   12c44:	ldr	r1, [r0]
   12c48:	cmp	r1, #0
   12c4c:	beq	13010 <__assert_fail@plt+0xf84>
   12c50:	movw	r0, #680	; 0x2a8
   12c54:	movw	r4, #55904	; 0xda60
   12c58:	mov	r2, #4
   12c5c:	mov	r5, #1
   12c60:	movt	r0, #4
   12c64:	str	r2, [sp]
   12c68:	movw	r2, #55940	; 0xda84
   12c6c:	movt	r4, #2
   12c70:	movt	r2, #2
   12c74:	ldr	r0, [r0]
   12c78:	mov	r3, r4
   12c7c:	stmib	sp, {r0, r5}
   12c80:	movw	r0, #52941	; 0xcecd
   12c84:	movt	r0, #2
   12c88:	bl	1edcc <__assert_fail@plt+0xcd40>
   12c8c:	ldr	r0, [r4, r0, lsl #2]
   12c90:	ldr	r4, [sp, #72]	; 0x48
   12c94:	cmp	r0, #1
   12c98:	beq	13034 <__assert_fail@plt+0xfa8>
   12c9c:	cmp	r0, #2
   12ca0:	bne	13030 <__assert_fail@plt+0xfa4>
   12ca4:	movw	r4, #648	; 0x288
   12ca8:	movt	r4, #4
   12cac:	ldrsb	r0, [r4]
   12cb0:	cmn	r0, #1
   12cb4:	bgt	12cc4 <__assert_fail@plt+0xc38>
   12cb8:	mov	r0, #1
   12cbc:	bl	12014 <isatty@plt>
   12cc0:	strb	r0, [r4]
   12cc4:	ldr	r4, [sp, #72]	; 0x48
   12cc8:	uxtb	r5, r0
   12ccc:	tst	r0, #255	; 0xff
   12cd0:	cmp	r5, #0
   12cd4:	movwne	r5, #1
   12cd8:	b	13034 <__assert_fail@plt+0xfa8>
   12cdc:	movw	r1, #4688	; 0x1250
   12ce0:	mov	r0, #1
   12ce4:	movt	r1, #4
   12ce8:	strb	r0, [r1, #6]
   12cec:	mov	r0, r8
   12cf0:	b	122a4 <__assert_fail@plt+0x218>
   12cf4:	movw	r1, #4688	; 0x1250
   12cf8:	mov	r0, #0
   12cfc:	movt	r1, #4
   12d00:	mov	r2, r1
   12d04:	strb	r0, [r1, #1]
   12d08:	mov	r1, #1
   12d0c:	strb	r1, [r2, #20]
   12d10:	ldr	r1, [sp, #76]	; 0x4c
   12d14:	cmp	r1, #0
   12d18:	movwne	r1, #1
   12d1c:	str	r1, [sp, #76]	; 0x4c
   12d20:	mov	r1, #0
   12d24:	str	r1, [sp, #64]	; 0x40
   12d28:	b	122a4 <__assert_fail@plt+0x218>
   12d2c:	movw	r0, #784	; 0x310
   12d30:	movw	r1, #52892	; 0xce9c
   12d34:	mov	r2, #5
   12d38:	mov	r5, #0
   12d3c:	movt	r0, #4
   12d40:	movt	r1, #2
   12d44:	ldr	r4, [r0]
   12d48:	mov	r0, #0
   12d4c:	bl	11ca8 <dcgettext@plt>
   12d50:	mvn	r2, #-2147483648	; 0x80000000
   12d54:	mov	r1, #2
   12d58:	mov	r3, #0
   12d5c:	stm	sp, {r2, r5}
   12d60:	movw	r2, #54434	; 0xd4a2
   12d64:	str	r0, [sp, #12]
   12d68:	mov	r0, r4
   12d6c:	ldr	r4, [sp, #72]	; 0x48
   12d70:	str	r1, [sp, #16]
   12d74:	mov	r1, #0
   12d78:	movt	r2, #2
   12d7c:	str	r2, [sp, #8]
   12d80:	mov	r2, #0
   12d84:	bl	29610 <_obstack_memory_used@@Base+0x37bc>
   12d88:	str	r0, [sp, #48]	; 0x30
   12d8c:	mov	r0, r8
   12d90:	b	122a4 <__assert_fail@plt+0x218>
   12d94:	movw	r5, #784	; 0x310
   12d98:	movw	r1, #54434	; 0xd4a2
   12d9c:	add	r3, sp, #80	; 0x50
   12da0:	mov	r2, #0
   12da4:	mov	r6, #0
   12da8:	movt	r5, #4
   12dac:	movt	r1, #2
   12db0:	ldr	r0, [r5]
   12db4:	str	r1, [sp]
   12db8:	mov	r1, #0
   12dbc:	bl	29940 <_obstack_memory_used@@Base+0x3aec>
   12dc0:	cmp	r0, #0
   12dc4:	beq	12fd0 <__assert_fail@plt+0xf44>
   12dc8:	cmp	r0, #1
   12dcc:	bne	15960 <__assert_fail@plt+0x38d4>
   12dd0:	mov	r0, #0
   12dd4:	str	r0, [sp, #52]	; 0x34
   12dd8:	mov	r0, r8
   12ddc:	movw	r6, #55184	; 0xd790
   12de0:	movt	r6, #2
   12de4:	b	122a4 <__assert_fail@plt+0x218>
   12de8:	mov	r0, #0
   12dec:	b	122a4 <__assert_fail@plt+0x218>
   12df0:	mov	r0, #1
   12df4:	str	r0, [sp, #44]	; 0x2c
   12df8:	mov	r0, r8
   12dfc:	b	122a4 <__assert_fail@plt+0x218>
   12e00:	movw	r0, #784	; 0x310
   12e04:	movw	r4, #55980	; 0xdaac
   12e08:	mov	r3, #4
   12e0c:	mov	r2, #1
   12e10:	movt	r0, #4
   12e14:	str	r3, [sp]
   12e18:	movt	r4, #2
   12e1c:	ldr	r1, [r0]
   12e20:	movw	r0, #680	; 0x2a8
   12e24:	mov	r3, r4
   12e28:	movt	r0, #4
   12e2c:	ldr	r0, [r0]
   12e30:	stmib	sp, {r0, r2}
   12e34:	movw	r0, #52909	; 0xcead
   12e38:	movw	r2, #56004	; 0xdac4
   12e3c:	movt	r0, #2
   12e40:	movt	r2, #2
   12e44:	bl	1edcc <__assert_fail@plt+0xcd40>
   12e48:	ldr	r0, [r4, r0, lsl #2]
   12e4c:	str	r0, [sp, #68]	; 0x44
   12e50:	ldr	r4, [sp, #72]	; 0x48
   12e54:	mov	r0, r8
   12e58:	b	122a4 <__assert_fail@plt+0x218>
   12e5c:	mov	r0, #5
   12e60:	b	12ed4 <__assert_fail@plt+0xe48>
   12e64:	movw	r0, #784	; 0x310
   12e68:	movw	r4, #56032	; 0xdae0
   12e6c:	mov	r3, #4
   12e70:	mov	r2, #1
   12e74:	movt	r0, #4
   12e78:	str	r3, [sp]
   12e7c:	movt	r4, #2
   12e80:	ldr	r1, [r0]
   12e84:	movw	r0, #680	; 0x2a8
   12e88:	mov	r3, r4
   12e8c:	movt	r0, #4
   12e90:	ldr	r0, [r0]
   12e94:	stmib	sp, {r0, r2}
   12e98:	movw	r0, #52916	; 0xceb4
   12e9c:	movw	r2, #56060	; 0xdafc
   12ea0:	movt	r0, #2
   12ea4:	movt	r2, #2
   12ea8:	bl	1edcc <__assert_fail@plt+0xcd40>
   12eac:	ldr	r0, [r4, r0, lsl #2]
   12eb0:	ldr	r4, [sp, #72]	; 0x48
   12eb4:	b	12ebc <__assert_fail@plt+0xe30>
   12eb8:	mov	r0, #2
   12ebc:	movw	r1, #4688	; 0x1250
   12ec0:	movt	r1, #4
   12ec4:	str	r0, [r1, #96]	; 0x60
   12ec8:	mov	r0, r8
   12ecc:	b	122a4 <__assert_fail@plt+0x218>
   12ed0:	mov	r0, #4
   12ed4:	str	r0, [sp, #68]	; 0x44
   12ed8:	mov	r0, r8
   12edc:	b	122a4 <__assert_fail@plt+0x218>
   12ee0:	movw	r0, #52932	; 0xcec4
   12ee4:	movt	r0, #2
   12ee8:	str	r0, [sp, #60]	; 0x3c
   12eec:	b	12298 <__assert_fail@plt+0x20c>
   12ef0:	mov	r0, #0
   12ef4:	str	r0, [sp, #64]	; 0x40
   12ef8:	mov	r0, r8
   12efc:	b	122a4 <__assert_fail@plt+0x218>
   12f00:	mov	r0, #3
   12f04:	movw	r1, #4688	; 0x1250
   12f08:	movt	r1, #4
   12f0c:	str	r0, [r1, #44]	; 0x2c
   12f10:	mov	r0, r8
   12f14:	b	122a4 <__assert_fail@plt+0x218>
   12f18:	movw	r0, #784	; 0x310
   12f1c:	movw	r4, #61632	; 0xf0c0
   12f20:	mov	r3, #4
   12f24:	mov	r2, #1
   12f28:	movt	r0, #4
   12f2c:	str	r3, [sp]
   12f30:	movt	r4, #2
   12f34:	ldr	r1, [r0]
   12f38:	movw	r0, #680	; 0x2a8
   12f3c:	mov	r3, r4
   12f40:	movt	r0, #4
   12f44:	ldr	r0, [r0]
   12f48:	stmib	sp, {r0, r2}
   12f4c:	movw	r0, #52979	; 0xcef3
   12f50:	movw	r2, #61588	; 0xf094
   12f54:	movt	r0, #2
   12f58:	movt	r2, #2
   12f5c:	bl	1edcc <__assert_fail@plt+0xcd40>
   12f60:	ldr	r0, [r4, r0, lsl #2]
   12f64:	ldr	r4, [sp, #72]	; 0x48
   12f68:	b	122a4 <__assert_fail@plt+0x218>
   12f6c:	movw	r0, #784	; 0x310
   12f70:	movw	r4, #56152	; 0xdb58
   12f74:	mov	r3, #4
   12f78:	mov	r2, #1
   12f7c:	movt	r0, #4
   12f80:	str	r3, [sp]
   12f84:	movt	r4, #2
   12f88:	ldr	r1, [r0]
   12f8c:	movw	r0, #680	; 0x2a8
   12f90:	mov	r3, r4
   12f94:	movt	r0, #4
   12f98:	ldr	r0, [r0]
   12f9c:	stmib	sp, {r0, r2}
   12fa0:	movw	r0, #52961	; 0xcee1
   12fa4:	movw	r2, #56168	; 0xdb68
   12fa8:	movt	r0, #2
   12fac:	movt	r2, #2
   12fb0:	bl	1edcc <__assert_fail@plt+0xcd40>
   12fb4:	ldr	r0, [r4, r0, lsl #2]
   12fb8:	ldr	r4, [sp, #72]	; 0x48
   12fbc:	movw	r1, #4688	; 0x1250
   12fc0:	movt	r1, #4
   12fc4:	str	r0, [r1, #48]	; 0x30
   12fc8:	mov	r0, r8
   12fcc:	b	122a4 <__assert_fail@plt+0x218>
   12fd0:	ldr	r0, [sp, #80]	; 0x50
   12fd4:	ldr	r1, [sp, #84]	; 0x54
   12fd8:	subs	r2, r0, #-2147483648	; 0x80000000
   12fdc:	sbcs	r1, r1, #0
   12fe0:	movwcc	r6, #1
   12fe4:	cmp	r6, #0
   12fe8:	movne	r6, r0
   12fec:	mov	r0, r8
   12ff0:	str	r6, [sp, #52]	; 0x34
   12ff4:	cmn	r6, #1
   12ff8:	movw	r6, #55184	; 0xd790
   12ffc:	movt	r6, #2
   13000:	bgt	122a4 <__assert_fail@plt+0x218>
   13004:	b	15960 <__assert_fail@plt+0x38d4>
   13008:	mov	r5, #1
   1300c:	b	1301c <__assert_fail@plt+0xf90>
   13010:	mov	r5, #1
   13014:	b	13034 <__assert_fail@plt+0xfa8>
   13018:	mov	r5, #0
   1301c:	movw	r0, #4688	; 0x1250
   13020:	movt	r0, #4
   13024:	strb	r5, [r0, #12]
   13028:	mov	r0, r8
   1302c:	b	122a4 <__assert_fail@plt+0x218>
   13030:	mov	r5, #0
   13034:	movw	r0, #4688	; 0x1250
   13038:	movt	r0, #4
   1303c:	strb	r5, [r0, #1]
   13040:	mov	r0, r8
   13044:	b	122a4 <__assert_fail@plt+0x218>
   13048:	movw	r6, #4816	; 0x12d0
   1304c:	ldr	r9, [sp, #76]	; 0x4c
   13050:	ldr	sl, [sp, #68]	; 0x44
   13054:	ldr	r7, [sp, #52]	; 0x34
   13058:	movw	r5, #4688	; 0x1250
   1305c:	movt	r6, #4
   13060:	movt	r5, #4
   13064:	ldrd	r0, [r6, #88]	; 0x58
   13068:	orrs	r0, r0, r1
   1306c:	beq	130a0 <__assert_fail@plt+0x1014>
   13070:	cmn	r9, #1
   13074:	ble	13110 <__assert_fail@plt+0x1084>
   13078:	sub	r0, r9, #2
   1307c:	str	r9, [r5, #40]	; 0x28
   13080:	cmp	r0, #3
   13084:	bcc	13164 <__assert_fail@plt+0x10d8>
   13088:	ldrb	r0, [r5, #1]
   1308c:	cmp	r0, #0
   13090:	bne	13164 <__assert_fail@plt+0x10d8>
   13094:	cmn	r7, #1
   13098:	movle	r7, #80	; 0x50
   1309c:	b	132a4 <__assert_fail@plt+0x1218>
   130a0:	movw	r0, #53045	; 0xcf35
   130a4:	movt	r0, #2
   130a8:	bl	11de0 <getenv@plt>
   130ac:	add	r1, r5, #100	; 0x64
   130b0:	add	r2, r6, #88	; 0x58
   130b4:	mov	r4, r0
   130b8:	bl	22a28 <__assert_fail@plt+0x1099c>
   130bc:	cmp	r4, #0
   130c0:	bne	130d8 <__assert_fail@plt+0x104c>
   130c4:	movw	r0, #53048	; 0xcf38
   130c8:	movt	r0, #2
   130cc:	bl	11de0 <getenv@plt>
   130d0:	cmp	r0, #0
   130d4:	beq	130f0 <__assert_fail@plt+0x1064>
   130d8:	ldrd	r0, [r6, #88]	; 0x58
   130dc:	movw	r2, #648	; 0x288
   130e0:	movt	r2, #4
   130e4:	strd	r0, [r2, #8]
   130e8:	ldr	r0, [r5, #100]	; 0x64
   130ec:	str	r0, [r5, #104]	; 0x68
   130f0:	ldr	r0, [sp, #44]	; 0x2c
   130f4:	tst	r0, #1
   130f8:	movne	r1, #0
   130fc:	movne	r0, #1024	; 0x400
   13100:	strdne	r0, [r6, #88]	; 0x58
   13104:	strne	r1, [r5, #100]	; 0x64
   13108:	cmn	r9, #1
   1310c:	bgt	13078 <__assert_fail@plt+0xfec>
   13110:	movw	r0, #672	; 0x2a0
   13114:	movt	r0, #4
   13118:	ldr	r0, [r0]
   1311c:	cmp	r0, #1
   13120:	bne	1318c <__assert_fail@plt+0x1100>
   13124:	movw	r4, #648	; 0x288
   13128:	movt	r4, #4
   1312c:	ldrsb	r0, [r4]
   13130:	cmn	r0, #1
   13134:	bgt	13144 <__assert_fail@plt+0x10b8>
   13138:	mov	r0, #1
   1313c:	bl	12014 <isatty@plt>
   13140:	strb	r0, [r4]
   13144:	tst	r0, #255	; 0xff
   13148:	tst	r0, #255	; 0xff
   1314c:	mov	r9, #2
   13150:	movweq	r9, #1
   13154:	sub	r0, r9, #2
   13158:	str	r9, [r5, #40]	; 0x28
   1315c:	cmp	r0, #3
   13160:	bcs	13088 <__assert_fail@plt+0xffc>
   13164:	cmn	r7, #1
   13168:	bgt	132a4 <__assert_fail@plt+0x1218>
   1316c:	movw	r4, #648	; 0x288
   13170:	movt	r4, #4
   13174:	ldrsb	r0, [r4]
   13178:	cmn	r0, #1
   1317c:	ble	131b0 <__assert_fail@plt+0x1124>
   13180:	tst	r0, #255	; 0xff
   13184:	bne	131c4 <__assert_fail@plt+0x1138>
   13188:	b	131e8 <__assert_fail@plt+0x115c>
   1318c:	sub	r0, r0, #2
   13190:	clz	r0, r0
   13194:	lsr	r0, r0, #5
   13198:	lsl	r9, r0, #1
   1319c:	sub	r0, r9, #2
   131a0:	str	r9, [r5, #40]	; 0x28
   131a4:	cmp	r0, #3
   131a8:	bcs	13088 <__assert_fail@plt+0xffc>
   131ac:	b	13164 <__assert_fail@plt+0x10d8>
   131b0:	mov	r0, #1
   131b4:	bl	12014 <isatty@plt>
   131b8:	strb	r0, [r4]
   131bc:	tst	r0, #255	; 0xff
   131c0:	beq	131e8 <__assert_fail@plt+0x115c>
   131c4:	add	r2, sp, #80	; 0x50
   131c8:	mov	r0, #1
   131cc:	movw	r1, #21523	; 0x5413
   131d0:	bl	11d50 <ioctl@plt>
   131d4:	cmp	r0, #0
   131d8:	bmi	131e8 <__assert_fail@plt+0x115c>
   131dc:	ldrh	r7, [sp, #82]	; 0x52
   131e0:	cmp	r7, #0
   131e4:	bne	132a4 <__assert_fail@plt+0x1218>
   131e8:	movw	r0, #53059	; 0xcf43
   131ec:	movt	r0, #2
   131f0:	bl	11de0 <getenv@plt>
   131f4:	cmp	r0, #0
   131f8:	beq	132a0 <__assert_fail@plt+0x1214>
   131fc:	mov	r6, r0
   13200:	ldrb	r0, [r0]
   13204:	cmp	r0, #0
   13208:	beq	132a0 <__assert_fail@plt+0x1214>
   1320c:	movw	r0, #54434	; 0xd4a2
   13210:	add	r3, sp, #80	; 0x50
   13214:	mov	r1, #0
   13218:	mov	r2, #0
   1321c:	mov	r7, #0
   13220:	movt	r0, #2
   13224:	str	r0, [sp]
   13228:	mov	r0, r6
   1322c:	bl	29940 <_obstack_memory_used@@Base+0x3aec>
   13230:	cmp	r0, #0
   13234:	beq	13248 <__assert_fail@plt+0x11bc>
   13238:	cmp	r0, #1
   1323c:	bne	1326c <__assert_fail@plt+0x11e0>
   13240:	mov	r7, #0
   13244:	b	132a4 <__assert_fail@plt+0x1218>
   13248:	ldr	r0, [sp, #80]	; 0x50
   1324c:	ldr	r1, [sp, #84]	; 0x54
   13250:	subs	r2, r0, #-2147483648	; 0x80000000
   13254:	sbcs	r1, r1, #0
   13258:	movwcc	r7, #1
   1325c:	cmp	r7, #0
   13260:	movne	r7, r0
   13264:	cmn	r7, #1
   13268:	bgt	132a4 <__assert_fail@plt+0x1218>
   1326c:	movw	r1, #53067	; 0xcf4b
   13270:	mov	r0, #0
   13274:	mov	r2, #5
   13278:	movt	r1, #2
   1327c:	bl	11ca8 <dcgettext@plt>
   13280:	mov	r4, r0
   13284:	mov	r0, r6
   13288:	bl	27e90 <_obstack_memory_used@@Base+0x203c>
   1328c:	mov	r3, r0
   13290:	mov	r0, #0
   13294:	mov	r1, #0
   13298:	mov	r2, r4
   1329c:	bl	11da4 <error@plt>
   132a0:	mov	r7, #80	; 0x50
   132a4:	movw	r0, #43691	; 0xaaab
   132a8:	str	r7, [r5, #112]	; 0x70
   132ac:	movt	r0, #43690	; 0xaaaa
   132b0:	umull	r0, r1, r7, r0
   132b4:	mov	r0, #1
   132b8:	lsr	r2, r1, #1
   132bc:	add	r3, r2, r2, lsl #1
   132c0:	subs	r3, r7, r3
   132c4:	addne	r2, r0, r1, lsr #1
   132c8:	str	r2, [r5, #116]	; 0x74
   132cc:	ldr	r0, [r5, #40]	; 0x28
   132d0:	sub	r0, r0, #2
   132d4:	cmp	r0, #2
   132d8:	bhi	132ec <__assert_fail@plt+0x1260>
   132dc:	ldr	r0, [sp, #48]	; 0x30
   132e0:	cmp	r0, #0
   132e4:	bmi	1334c <__assert_fail@plt+0x12c0>
   132e8:	str	r0, [r5, #36]	; 0x24
   132ec:	ldr	r0, [sp, #64]	; 0x40
   132f0:	cmn	r0, #1
   132f4:	bgt	133f4 <__assert_fail@plt+0x1368>
   132f8:	movw	r0, #672	; 0x2a0
   132fc:	mov	r1, #0
   13300:	movt	r0, #4
   13304:	str	r1, [sp, #64]	; 0x40
   13308:	ldr	r0, [r0]
   1330c:	cmp	r0, #1
   13310:	bne	133f4 <__assert_fail@plt+0x1368>
   13314:	movw	r4, #648	; 0x288
   13318:	movt	r4, #4
   1331c:	ldrsb	r0, [r4]
   13320:	cmn	r0, #1
   13324:	bgt	13334 <__assert_fail@plt+0x12a8>
   13328:	mov	r0, #1
   1332c:	bl	12014 <isatty@plt>
   13330:	strb	r0, [r4]
   13334:	tst	r0, #255	; 0xff
   13338:	uxtb	r0, r0
   1333c:	cmp	r0, #0
   13340:	movwne	r0, #1
   13344:	str	r0, [sp, #64]	; 0x40
   13348:	b	133f4 <__assert_fail@plt+0x1368>
   1334c:	mov	r0, #8
   13350:	str	r0, [r5, #36]	; 0x24
   13354:	movw	r0, #53126	; 0xcf86
   13358:	movt	r0, #2
   1335c:	bl	11de0 <getenv@plt>
   13360:	cmp	r0, #0
   13364:	beq	132ec <__assert_fail@plt+0x1260>
   13368:	mov	r6, r0
   1336c:	movw	r0, #54434	; 0xd4a2
   13370:	add	r3, sp, #80	; 0x50
   13374:	mov	r1, #0
   13378:	mov	r2, #0
   1337c:	movt	r0, #2
   13380:	str	r0, [sp]
   13384:	mov	r0, r6
   13388:	bl	29940 <_obstack_memory_used@@Base+0x3aec>
   1338c:	cmp	r0, #0
   13390:	ldreq	r0, [sp, #84]	; 0x54
   13394:	cmpeq	r0, #0
   13398:	beq	133e0 <__assert_fail@plt+0x1354>
   1339c:	movw	r1, #53134	; 0xcf8e
   133a0:	mov	r0, #0
   133a4:	mov	r2, #5
   133a8:	movt	r1, #2
   133ac:	bl	11ca8 <dcgettext@plt>
   133b0:	mov	r4, r0
   133b4:	mov	r0, r6
   133b8:	bl	27e90 <_obstack_memory_used@@Base+0x203c>
   133bc:	mov	r3, r0
   133c0:	mov	r0, #0
   133c4:	mov	r1, #0
   133c8:	mov	r2, r4
   133cc:	bl	11da4 <error@plt>
   133d0:	ldr	r0, [sp, #64]	; 0x40
   133d4:	cmn	r0, #1
   133d8:	bgt	133f4 <__assert_fail@plt+0x1368>
   133dc:	b	132f8 <__assert_fail@plt+0x126c>
   133e0:	ldr	r0, [sp, #80]	; 0x50
   133e4:	str	r0, [r5, #36]	; 0x24
   133e8:	ldr	r0, [sp, #64]	; 0x40
   133ec:	cmn	r0, #1
   133f0:	ble	132f8 <__assert_fail@plt+0x126c>
   133f4:	ldr	r0, [sp, #64]	; 0x40
   133f8:	cmp	r0, #0
   133fc:	movwne	r0, #1
   13400:	cmn	r8, #1
   13404:	strb	r0, [r5, #21]
   13408:	ble	135f8 <__assert_fail@plt+0x156c>
   1340c:	mov	r0, #0
   13410:	mov	r1, r8
   13414:	bl	25fe4 <_obstack_memory_used@@Base+0x190>
   13418:	mov	r0, #0
   1341c:	mov	r4, #0
   13420:	bl	25fcc <_obstack_memory_used@@Base+0x178>
   13424:	mov	r6, r0
   13428:	ldr	r0, [r5, #40]	; 0x28
   1342c:	cmp	r0, #0
   13430:	beq	1344c <__assert_fail@plt+0x13c0>
   13434:	orr	r0, r0, #1
   13438:	cmp	r0, #3
   1343c:	bne	1346c <__assert_fail@plt+0x13e0>
   13440:	ldr	r0, [r5, #112]	; 0x70
   13444:	cmp	r0, #0
   13448:	beq	1346c <__assert_fail@plt+0x13e0>
   1344c:	orr	r1, r6, #2
   13450:	sub	r0, r6, #6
   13454:	sub	r1, r1, #3
   13458:	clz	r0, r0
   1345c:	clz	r1, r1
   13460:	lsr	r0, r0, #5
   13464:	lsr	r1, r1, #5
   13468:	orr	r4, r0, r1
   1346c:	mov	r0, #0
   13470:	strb	r4, [r5, #22]
   13474:	bl	25f90 <_obstack_memory_used@@Base+0x13c>
   13478:	cmp	r6, #7
   1347c:	str	r0, [r5, #88]	; 0x58
   13480:	bne	13490 <__assert_fail@plt+0x1404>
   13484:	mov	r1, #32
   13488:	mov	r2, #1
   1348c:	bl	25ffc <_obstack_memory_used@@Base+0x1a8>
   13490:	ldr	r0, [r5, #48]	; 0x30
   13494:	mov	r9, sl
   13498:	cmp	r0, #2
   1349c:	bcc	134dc <__assert_fail@plt+0x1450>
   134a0:	sub	r1, r0, #2
   134a4:	cmp	r1, #5
   134a8:	beq	134dc <__assert_fail@plt+0x1450>
   134ac:	movw	r2, #53196	; 0xcfcc
   134b0:	movt	r2, #2
   134b4:	ldrb	r1, [r2, r1]
   134b8:	add	r0, r0, r2
   134bc:	sub	r4, r0, #1
   134c0:	ldr	r0, [r5, #88]	; 0x58
   134c4:	uxtb	r1, r1
   134c8:	mov	r2, #1
   134cc:	bl	25ffc <_obstack_memory_used@@Base+0x1a8>
   134d0:	ldrb	r1, [r4], #1
   134d4:	cmp	r1, #0
   134d8:	bne	134c0 <__assert_fail@plt+0x1434>
   134dc:	mov	r0, #0
   134e0:	bl	25f90 <_obstack_memory_used@@Base+0x13c>
   134e4:	mov	r1, #58	; 0x3a
   134e8:	mov	r2, #1
   134ec:	str	r0, [r5, #120]	; 0x78
   134f0:	bl	25ffc <_obstack_memory_used@@Base+0x1a8>
   134f4:	ldr	r0, [r5, #40]	; 0x28
   134f8:	ldrb	r3, [r5, #20]
   134fc:	ldrb	r2, [r5, #12]
   13500:	ldrb	r1, [r5, #11]
   13504:	clz	r7, r0
   13508:	cmp	r3, #0
   1350c:	lsr	r7, r7, #5
   13510:	bic	r2, r7, r2
   13514:	and	r1, r2, r1
   13518:	mov	r2, #10
   1351c:	movwne	r2, #0
   13520:	cmp	r2, r1
   13524:	strb	r1, [r5, #11]
   13528:	bcc	1599c <__assert_fail@plt+0x3910>
   1352c:	cmn	r9, #1
   13530:	ble	13644 <__assert_fail@plt+0x15b8>
   13534:	ldr	r4, [sp, #60]	; 0x3c
   13538:	cmp	r0, #0
   1353c:	str	r9, [r5, #60]	; 0x3c
   13540:	bne	13eac <__assert_fail@plt+0x1e20>
   13544:	cmp	r4, #0
   13548:	beq	136d8 <__assert_fail@plt+0x164c>
   1354c:	movw	r1, #56188	; 0xdb7c
   13550:	mov	r0, r4
   13554:	mov	r2, #6
   13558:	movt	r1, #2
   1355c:	bl	1202c <strncmp@plt>
   13560:	cmp	r0, #0
   13564:	bne	1359c <__assert_fail@plt+0x1510>
   13568:	movw	r6, #56188	; 0xdb7c
   1356c:	movt	r6, #2
   13570:	mov	r0, #2
   13574:	bl	205b8 <__assert_fail@plt+0xe52c>
   13578:	cmp	r0, #0
   1357c:	beq	13eac <__assert_fail@plt+0x1e20>
   13580:	add	r4, r4, #6
   13584:	mov	r1, r6
   13588:	mov	r2, #6
   1358c:	mov	r0, r4
   13590:	bl	1202c <strncmp@plt>
   13594:	cmp	r0, #0
   13598:	beq	13570 <__assert_fail@plt+0x14e4>
   1359c:	ldrb	r0, [r4]
   135a0:	cmp	r0, #43	; 0x2b
   135a4:	bne	13668 <__assert_fail@plt+0x15dc>
   135a8:	add	r8, r4, #1
   135ac:	mov	r1, #10
   135b0:	mov	r0, r8
   135b4:	bl	11eb8 <strchr@plt>
   135b8:	cmp	r0, #0
   135bc:	mov	r9, r8
   135c0:	beq	135e8 <__assert_fail@plt+0x155c>
   135c4:	add	r9, r0, #1
   135c8:	mov	r6, r0
   135cc:	mov	r1, #10
   135d0:	mov	r0, r9
   135d4:	bl	11eb8 <strchr@plt>
   135d8:	cmp	r0, #0
   135dc:	bne	15aa0 <__assert_fail@plt+0x3a14>
   135e0:	mov	r0, #0
   135e4:	strb	r0, [r6]
   135e8:	movw	r0, #648	; 0x288
   135ec:	movt	r0, #4
   135f0:	strd	r8, [r0, #16]
   135f4:	b	137f0 <__assert_fail@plt+0x1764>
   135f8:	movw	r0, #53942	; 0xd2b6
   135fc:	movt	r0, #2
   13600:	bl	11de0 <getenv@plt>
   13604:	cmp	r0, #0
   13608:	beq	1372c <__assert_fail@plt+0x16a0>
   1360c:	movw	r7, #61632	; 0xf0c0
   13610:	movw	r1, #61588	; 0xf094
   13614:	mov	r3, #4
   13618:	mov	r6, r0
   1361c:	movt	r7, #2
   13620:	movt	r1, #2
   13624:	mov	r2, r7
   13628:	bl	1ea48 <__assert_fail@plt+0xc9bc>
   1362c:	cmn	r0, #1
   13630:	ble	136f8 <__assert_fail@plt+0x166c>
   13634:	ldr	r8, [r7, r0, lsl #2]
   13638:	cmn	r8, #1
   1363c:	bgt	1340c <__assert_fail@plt+0x1380>
   13640:	b	1372c <__assert_fail@plt+0x16a0>
   13644:	cmp	r0, #0
   13648:	beq	136c4 <__assert_fail@plt+0x1638>
   1364c:	ldr	r0, [r5, #96]	; 0x60
   13650:	mov	r1, #0
   13654:	sub	r0, r0, #1
   13658:	cmp	r0, #3
   1365c:	movwcc	r1, #5
   13660:	str	r1, [r5, #60]	; 0x3c
   13664:	b	13eac <__assert_fail@plt+0x1e20>
   13668:	movw	r1, #56196	; 0xdb84
   1366c:	movw	r2, #56216	; 0xdb98
   13670:	mov	r0, r4
   13674:	mov	r3, #4
   13678:	movt	r1, #2
   1367c:	movt	r2, #2
   13680:	bl	1ea48 <__assert_fail@plt+0xc9bc>
   13684:	mov	r2, r0
   13688:	cmn	r0, #1
   1368c:	ble	159e0 <__assert_fail@plt+0x3954>
   13690:	cmp	r2, #3
   13694:	bhi	137f0 <__assert_fail@plt+0x1764>
   13698:	add	r0, pc, #0
   1369c:	ldr	pc, [r0, r2, lsl #2]
   136a0:			; <UNDEFINED> instruction: 0x000136b0
   136a4:	ldrdeq	r3, [r1], -r8
   136a8:	andeq	r3, r1, r4, ror r7
   136ac:	muleq	r1, r4, r7
   136b0:	movw	r0, #648	; 0x288
   136b4:	movw	r1, #53381	; 0xd085
   136b8:	movt	r0, #4
   136bc:	movt	r1, #2
   136c0:	b	137e8 <__assert_fail@plt+0x175c>
   136c4:	ldr	r4, [sp, #60]	; 0x3c
   136c8:	mov	r0, #0
   136cc:	str	r0, [r5, #60]	; 0x3c
   136d0:	cmp	r4, #0
   136d4:	bne	1354c <__assert_fail@plt+0x14c0>
   136d8:	movw	r0, #53238	; 0xcff6
   136dc:	movt	r0, #2
   136e0:	bl	11de0 <getenv@plt>
   136e4:	movw	r4, #45197	; 0xb08d
   136e8:	cmp	r0, #0
   136ec:	movt	r4, #2
   136f0:	movne	r4, r0
   136f4:	b	1354c <__assert_fail@plt+0x14c0>
   136f8:	movw	r1, #53956	; 0xd2c4
   136fc:	mov	r0, #0
   13700:	mov	r2, #5
   13704:	movt	r1, #2
   13708:	bl	11ca8 <dcgettext@plt>
   1370c:	mov	r4, r0
   13710:	mov	r0, r6
   13714:	bl	27e90 <_obstack_memory_used@@Base+0x203c>
   13718:	mov	r3, r0
   1371c:	mov	r0, #0
   13720:	mov	r1, #0
   13724:	mov	r2, r4
   13728:	bl	11da4 <error@plt>
   1372c:	movw	r0, #672	; 0x2a0
   13730:	mov	r8, #7
   13734:	movt	r0, #4
   13738:	ldr	r0, [r0]
   1373c:	cmp	r0, #1
   13740:	bne	1340c <__assert_fail@plt+0x1380>
   13744:	movw	r4, #648	; 0x288
   13748:	movt	r4, #4
   1374c:	ldrsb	r0, [r4]
   13750:	cmn	r0, #1
   13754:	bgt	13764 <__assert_fail@plt+0x16d8>
   13758:	mov	r0, #1
   1375c:	bl	12014 <isatty@plt>
   13760:	strb	r0, [r4]
   13764:	tst	r0, #255	; 0xff
   13768:	beq	13418 <__assert_fail@plt+0x138c>
   1376c:	mov	r8, #3
   13770:	b	1340c <__assert_fail@plt+0x1380>
   13774:	movw	r0, #648	; 0x288
   13778:	movw	r1, #53408	; 0xd0a0
   1377c:	movw	r2, #53420	; 0xd0ac
   13780:	movt	r0, #4
   13784:	movt	r2, #2
   13788:	movt	r1, #2
   1378c:	str	r2, [r0, #16]
   13790:	b	137ec <__assert_fail@plt+0x1760>
   13794:	mov	r0, #2
   13798:	bl	205b8 <__assert_fail@plt+0xe52c>
   1379c:	cmp	r0, #0
   137a0:	beq	137f0 <__assert_fail@plt+0x1764>
   137a4:	movw	r4, #648	; 0x288
   137a8:	mov	r0, #0
   137ac:	mov	r2, #2
   137b0:	movt	r4, #4
   137b4:	ldr	r1, [r4, #16]
   137b8:	bl	11ca8 <dcgettext@plt>
   137bc:	str	r0, [r4, #16]
   137c0:	mov	r0, #0
   137c4:	mov	r2, #2
   137c8:	ldr	r1, [r4, #20]
   137cc:	bl	11ca8 <dcgettext@plt>
   137d0:	str	r0, [r4, #20]
   137d4:	b	137f0 <__assert_fail@plt+0x1764>
   137d8:	movw	r0, #648	; 0x288
   137dc:	movw	r1, #53405	; 0xd09d
   137e0:	movt	r0, #4
   137e4:	movt	r1, #2
   137e8:	str	r1, [r0, #16]
   137ec:	str	r1, [r0, #20]
   137f0:	movw	r2, #648	; 0x288
   137f4:	movt	r2, #4
   137f8:	ldr	r4, [r2, #16]
   137fc:	ldrb	r0, [r4]
   13800:	cmp	r0, #37	; 0x25
   13804:	bne	1384c <__assert_fail@plt+0x17c0>
   13808:	b	1381c <__assert_fail@plt+0x1790>
   1380c:	add	r4, r4, #1
   13810:	ldrb	r0, [r4]
   13814:	cmp	r0, #37	; 0x25
   13818:	bne	1384c <__assert_fail@plt+0x17c0>
   1381c:	mov	r0, r4
   13820:	ldrb	r1, [r0, #1]!
   13824:	cmp	r1, #37	; 0x25
   13828:	beq	13838 <__assert_fail@plt+0x17ac>
   1382c:	cmp	r1, #98	; 0x62
   13830:	bne	1380c <__assert_fail@plt+0x1780>
   13834:	b	13858 <__assert_fail@plt+0x17cc>
   13838:	mov	r4, r0
   1383c:	add	r4, r4, #1
   13840:	ldrb	r0, [r4]
   13844:	cmp	r0, #37	; 0x25
   13848:	beq	1381c <__assert_fail@plt+0x1790>
   1384c:	cmp	r0, #0
   13850:	bne	1380c <__assert_fail@plt+0x1780>
   13854:	mov	r4, #0
   13858:	ldr	r0, [r2, #20]
   1385c:	str	r4, [fp, #-44]	; 0xffffffd4
   13860:	ldrb	r1, [r0]
   13864:	cmp	r1, #37	; 0x25
   13868:	bne	138ac <__assert_fail@plt+0x1820>
   1386c:	b	13880 <__assert_fail@plt+0x17f4>
   13870:	add	r0, r1, #1
   13874:	ldrb	r1, [r0]
   13878:	cmp	r1, #37	; 0x25
   1387c:	bne	138ac <__assert_fail@plt+0x1820>
   13880:	mov	r1, r0
   13884:	ldrb	r2, [r1, #1]!
   13888:	cmp	r2, #37	; 0x25
   1388c:	beq	13870 <__assert_fail@plt+0x17e4>
   13890:	cmp	r2, #98	; 0x62
   13894:	beq	138cc <__assert_fail@plt+0x1840>
   13898:	mov	r1, r0
   1389c:	add	r0, r1, #1
   138a0:	ldrb	r1, [r0]
   138a4:	cmp	r1, #37	; 0x25
   138a8:	beq	13880 <__assert_fail@plt+0x17f4>
   138ac:	cmp	r1, #0
   138b0:	mov	r1, r0
   138b4:	bne	13870 <__assert_fail@plt+0x17e4>
   138b8:	mov	r0, #0
   138bc:	cmp	r4, #0
   138c0:	str	r0, [fp, #-40]	; 0xffffffd8
   138c4:	bne	138d0 <__assert_fail@plt+0x1844>
   138c8:	b	13eac <__assert_fail@plt+0x1e20>
   138cc:	str	r0, [fp, #-40]	; 0xffffffd8
   138d0:	mov	sl, #12
   138d4:	add	r7, sp, #80	; 0x50
   138d8:	sub	r8, fp, #36	; 0x24
   138dc:	mov	r5, #0
   138e0:	mov	r9, #0
   138e4:	movw	r0, #14
   138e8:	str	sl, [fp, #-36]	; 0xffffffdc
   138ec:	movt	r0, #2
   138f0:	add	r0, r9, r0
   138f4:	bl	11f9c <nl_langinfo@plt>
   138f8:	mov	r1, #37	; 0x25
   138fc:	mov	r6, r0
   13900:	bl	11eb8 <strchr@plt>
   13904:	cmp	r0, #0
   13908:	bne	13eac <__assert_fail@plt+0x1e20>
   1390c:	bl	11e64 <__ctype_b_loc@plt>
   13910:	ldrb	r1, [r6]
   13914:	ldr	r0, [r0]
   13918:	mov	r2, #128	; 0x80
   1391c:	mov	r3, r8
   13920:	add	r0, r0, r1, lsl #1
   13924:	mov	r1, #0
   13928:	ldrh	r0, [r0]
   1392c:	str	r1, [sp, #4]
   13930:	mov	r1, r7
   13934:	ubfx	r0, r0, #11, #1
   13938:	str	r0, [sp]
   1393c:	mov	r0, r6
   13940:	bl	23100 <__assert_fail@plt+0x11074>
   13944:	cmp	r0, #127	; 0x7f
   13948:	bhi	13eac <__assert_fail@plt+0x1e20>
   1394c:	ldr	r0, [fp, #-36]	; 0xffffffdc
   13950:	add	r9, r9, #1
   13954:	add	r7, r7, #128	; 0x80
   13958:	cmp	r5, r0
   1395c:	movls	r5, r0
   13960:	cmp	r9, #12
   13964:	bne	138e4 <__assert_fail@plt+0x1858>
   13968:	cmp	sl, r5
   1396c:	mov	sl, r5
   13970:	add	r7, sp, #80	; 0x50
   13974:	bhi	138dc <__assert_fail@plt+0x1850>
   13978:	movw	r0, #648	; 0x288
   1397c:	movw	r9, #54052	; 0xd324
   13980:	mov	sl, #0
   13984:	movt	r0, #4
   13988:	movt	r9, #2
   1398c:	add	r1, r0, #16
   13990:	sub	r0, fp, #44	; 0x2c
   13994:	add	r0, r0, #4
   13998:	str	r0, [sp, #68]	; 0x44
   1399c:	add	r0, sp, #80	; 0x50
   139a0:	add	r2, r0, #1408	; 0x580
   139a4:	str	r2, [sp, #20]
   139a8:	add	r2, r0, #1280	; 0x500
   139ac:	str	r2, [sp, #24]
   139b0:	add	r2, r0, #1152	; 0x480
   139b4:	str	r2, [sp, #28]
   139b8:	add	r2, r0, #1024	; 0x400
   139bc:	str	r2, [sp, #32]
   139c0:	add	r2, r0, #896	; 0x380
   139c4:	str	r2, [sp, #36]	; 0x24
   139c8:	add	r2, r0, #768	; 0x300
   139cc:	str	r2, [sp, #40]	; 0x28
   139d0:	add	r2, r0, #640	; 0x280
   139d4:	str	r2, [sp, #44]	; 0x2c
   139d8:	add	r2, r0, #512	; 0x200
   139dc:	str	r2, [sp, #48]	; 0x30
   139e0:	add	r2, r0, #384	; 0x180
   139e4:	str	r2, [sp, #52]	; 0x34
   139e8:	add	r2, r0, #256	; 0x100
   139ec:	add	r0, r0, #128	; 0x80
   139f0:	str	r2, [sp, #60]	; 0x3c
   139f4:	str	r0, [sp, #64]	; 0x40
   139f8:	ldr	r5, [r1]
   139fc:	cmp	r4, #0
   13a00:	str	r1, [sp, #76]	; 0x4c
   13a04:	beq	13c7c <__assert_fail@plt+0x1bf0>
   13a08:	sub	r8, r4, r5
   13a0c:	cmp	r8, #128	; 0x80
   13a10:	bgt	13eac <__assert_fail@plt+0x1e20>
   13a14:	add	r0, sp, #80	; 0x50
   13a18:	add	r7, r4, #2
   13a1c:	mov	r1, #128	; 0x80
   13a20:	mov	r2, #1
   13a24:	mvn	r3, #0
   13a28:	str	r9, [sp]
   13a2c:	str	r8, [sp, #4]
   13a30:	str	r5, [sp, #8]
   13a34:	str	r0, [sp, #12]
   13a38:	movw	r0, #1224	; 0x4c8
   13a3c:	str	r7, [sp, #16]
   13a40:	movt	r0, #4
   13a44:	add	r6, r0, sl
   13a48:	mov	r0, r6
   13a4c:	bl	12068 <__snprintf_chk@plt>
   13a50:	cmp	r0, #127	; 0x7f
   13a54:	bhi	13eac <__assert_fail@plt+0x1e20>
   13a58:	ldr	r0, [sp, #64]	; 0x40
   13a5c:	mov	r1, #128	; 0x80
   13a60:	mov	r2, #1
   13a64:	mvn	r3, #0
   13a68:	str	r9, [sp]
   13a6c:	str	r8, [sp, #4]
   13a70:	str	r5, [sp, #8]
   13a74:	str	r7, [sp, #16]
   13a78:	str	r0, [sp, #12]
   13a7c:	add	r0, r6, #128	; 0x80
   13a80:	bl	12068 <__snprintf_chk@plt>
   13a84:	cmp	r0, #128	; 0x80
   13a88:	bcs	13eac <__assert_fail@plt+0x1e20>
   13a8c:	ldr	r0, [sp, #60]	; 0x3c
   13a90:	mov	r1, #128	; 0x80
   13a94:	mov	r2, #1
   13a98:	mvn	r3, #0
   13a9c:	str	r9, [sp]
   13aa0:	str	r8, [sp, #4]
   13aa4:	str	r5, [sp, #8]
   13aa8:	str	r7, [sp, #16]
   13aac:	str	r0, [sp, #12]
   13ab0:	add	r0, r6, #256	; 0x100
   13ab4:	bl	12068 <__snprintf_chk@plt>
   13ab8:	cmp	r0, #127	; 0x7f
   13abc:	bhi	13eac <__assert_fail@plt+0x1e20>
   13ac0:	ldr	r0, [sp, #52]	; 0x34
   13ac4:	mov	r1, #128	; 0x80
   13ac8:	mov	r2, #1
   13acc:	mvn	r3, #0
   13ad0:	str	r9, [sp]
   13ad4:	str	r8, [sp, #4]
   13ad8:	str	r5, [sp, #8]
   13adc:	str	r7, [sp, #16]
   13ae0:	str	r0, [sp, #12]
   13ae4:	add	r0, r6, #384	; 0x180
   13ae8:	bl	12068 <__snprintf_chk@plt>
   13aec:	cmp	r0, #127	; 0x7f
   13af0:	bhi	13eac <__assert_fail@plt+0x1e20>
   13af4:	ldr	r0, [sp, #48]	; 0x30
   13af8:	mov	r1, #128	; 0x80
   13afc:	mov	r2, #1
   13b00:	mvn	r3, #0
   13b04:	str	r9, [sp]
   13b08:	str	r8, [sp, #4]
   13b0c:	str	r5, [sp, #8]
   13b10:	str	r7, [sp, #16]
   13b14:	str	r0, [sp, #12]
   13b18:	add	r0, r6, #512	; 0x200
   13b1c:	bl	12068 <__snprintf_chk@plt>
   13b20:	cmp	r0, #127	; 0x7f
   13b24:	bhi	13eac <__assert_fail@plt+0x1e20>
   13b28:	ldr	r0, [sp, #44]	; 0x2c
   13b2c:	mov	r1, #128	; 0x80
   13b30:	mov	r2, #1
   13b34:	mvn	r3, #0
   13b38:	str	r9, [sp]
   13b3c:	str	r8, [sp, #4]
   13b40:	str	r5, [sp, #8]
   13b44:	str	r7, [sp, #16]
   13b48:	str	r0, [sp, #12]
   13b4c:	add	r0, r6, #640	; 0x280
   13b50:	bl	12068 <__snprintf_chk@plt>
   13b54:	cmp	r0, #127	; 0x7f
   13b58:	bhi	13eac <__assert_fail@plt+0x1e20>
   13b5c:	ldr	r0, [sp, #40]	; 0x28
   13b60:	mov	r1, #128	; 0x80
   13b64:	mov	r2, #1
   13b68:	mvn	r3, #0
   13b6c:	str	r9, [sp]
   13b70:	str	r8, [sp, #4]
   13b74:	str	r5, [sp, #8]
   13b78:	str	r7, [sp, #16]
   13b7c:	str	r0, [sp, #12]
   13b80:	add	r0, r6, #768	; 0x300
   13b84:	bl	12068 <__snprintf_chk@plt>
   13b88:	cmp	r0, #127	; 0x7f
   13b8c:	bhi	13eac <__assert_fail@plt+0x1e20>
   13b90:	ldr	r0, [sp, #36]	; 0x24
   13b94:	mov	r1, #128	; 0x80
   13b98:	mov	r2, #1
   13b9c:	mvn	r3, #0
   13ba0:	str	r9, [sp]
   13ba4:	str	r8, [sp, #4]
   13ba8:	str	r5, [sp, #8]
   13bac:	str	r7, [sp, #16]
   13bb0:	str	r0, [sp, #12]
   13bb4:	add	r0, r6, #896	; 0x380
   13bb8:	bl	12068 <__snprintf_chk@plt>
   13bbc:	cmp	r0, #127	; 0x7f
   13bc0:	bhi	13eac <__assert_fail@plt+0x1e20>
   13bc4:	ldr	r0, [sp, #32]
   13bc8:	mov	r1, #128	; 0x80
   13bcc:	mov	r2, #1
   13bd0:	mvn	r3, #0
   13bd4:	str	r9, [sp]
   13bd8:	str	r8, [sp, #4]
   13bdc:	str	r5, [sp, #8]
   13be0:	str	r7, [sp, #16]
   13be4:	str	r0, [sp, #12]
   13be8:	add	r0, r6, #1024	; 0x400
   13bec:	bl	12068 <__snprintf_chk@plt>
   13bf0:	cmp	r0, #127	; 0x7f
   13bf4:	bhi	13eac <__assert_fail@plt+0x1e20>
   13bf8:	ldr	r0, [sp, #28]
   13bfc:	mov	r1, #128	; 0x80
   13c00:	mov	r2, #1
   13c04:	mvn	r3, #0
   13c08:	str	r9, [sp]
   13c0c:	str	r8, [sp, #4]
   13c10:	str	r5, [sp, #8]
   13c14:	str	r7, [sp, #16]
   13c18:	str	r0, [sp, #12]
   13c1c:	add	r0, r6, #1152	; 0x480
   13c20:	bl	12068 <__snprintf_chk@plt>
   13c24:	cmp	r0, #127	; 0x7f
   13c28:	bhi	13eac <__assert_fail@plt+0x1e20>
   13c2c:	ldr	r0, [sp, #24]
   13c30:	mov	r1, #128	; 0x80
   13c34:	mov	r2, #1
   13c38:	mvn	r3, #0
   13c3c:	str	r9, [sp]
   13c40:	str	r8, [sp, #4]
   13c44:	str	r5, [sp, #8]
   13c48:	str	r7, [sp, #16]
   13c4c:	str	r0, [sp, #12]
   13c50:	add	r0, r6, #1280	; 0x500
   13c54:	bl	12068 <__snprintf_chk@plt>
   13c58:	cmp	r0, #127	; 0x7f
   13c5c:	bhi	13eac <__assert_fail@plt+0x1e20>
   13c60:	ldr	r0, [sp, #20]
   13c64:	str	r9, [sp]
   13c68:	str	r8, [sp, #4]
   13c6c:	str	r5, [sp, #8]
   13c70:	str	r7, [sp, #16]
   13c74:	str	r0, [sp, #12]
   13c78:	b	13e4c <__assert_fail@plt+0x1dc0>
   13c7c:	movw	r0, #61146	; 0xeeda
   13c80:	mov	r1, #128	; 0x80
   13c84:	mov	r2, #1
   13c88:	mvn	r3, #0
   13c8c:	movt	r0, #2
   13c90:	stm	sp, {r0, r5}
   13c94:	movw	r0, #1224	; 0x4c8
   13c98:	movt	r0, #4
   13c9c:	add	r6, r0, sl
   13ca0:	mov	r0, r6
   13ca4:	bl	12068 <__snprintf_chk@plt>
   13ca8:	cmp	r0, #127	; 0x7f
   13cac:	bhi	13eac <__assert_fail@plt+0x1e20>
   13cb0:	movw	r0, #61146	; 0xeeda
   13cb4:	mov	r1, #128	; 0x80
   13cb8:	mov	r2, #1
   13cbc:	mvn	r3, #0
   13cc0:	movt	r0, #2
   13cc4:	stm	sp, {r0, r5}
   13cc8:	add	r0, r6, #128	; 0x80
   13ccc:	bl	12068 <__snprintf_chk@plt>
   13cd0:	cmp	r0, #128	; 0x80
   13cd4:	bcs	13eac <__assert_fail@plt+0x1e20>
   13cd8:	movw	r0, #61146	; 0xeeda
   13cdc:	mov	r1, #128	; 0x80
   13ce0:	mov	r2, #1
   13ce4:	mvn	r3, #0
   13ce8:	movt	r0, #2
   13cec:	stm	sp, {r0, r5}
   13cf0:	add	r0, r6, #256	; 0x100
   13cf4:	bl	12068 <__snprintf_chk@plt>
   13cf8:	cmp	r0, #127	; 0x7f
   13cfc:	bhi	13eac <__assert_fail@plt+0x1e20>
   13d00:	movw	r0, #61146	; 0xeeda
   13d04:	mov	r1, #128	; 0x80
   13d08:	mov	r2, #1
   13d0c:	mvn	r3, #0
   13d10:	movt	r0, #2
   13d14:	stm	sp, {r0, r5}
   13d18:	add	r0, r6, #384	; 0x180
   13d1c:	bl	12068 <__snprintf_chk@plt>
   13d20:	cmp	r0, #127	; 0x7f
   13d24:	bhi	13eac <__assert_fail@plt+0x1e20>
   13d28:	movw	r0, #61146	; 0xeeda
   13d2c:	mov	r1, #128	; 0x80
   13d30:	mov	r2, #1
   13d34:	mvn	r3, #0
   13d38:	movt	r0, #2
   13d3c:	stm	sp, {r0, r5}
   13d40:	add	r0, r6, #512	; 0x200
   13d44:	bl	12068 <__snprintf_chk@plt>
   13d48:	cmp	r0, #127	; 0x7f
   13d4c:	bhi	13eac <__assert_fail@plt+0x1e20>
   13d50:	movw	r0, #61146	; 0xeeda
   13d54:	mov	r1, #128	; 0x80
   13d58:	mov	r2, #1
   13d5c:	mvn	r3, #0
   13d60:	movt	r0, #2
   13d64:	stm	sp, {r0, r5}
   13d68:	add	r0, r6, #640	; 0x280
   13d6c:	bl	12068 <__snprintf_chk@plt>
   13d70:	cmp	r0, #127	; 0x7f
   13d74:	bhi	13eac <__assert_fail@plt+0x1e20>
   13d78:	movw	r0, #61146	; 0xeeda
   13d7c:	mov	r1, #128	; 0x80
   13d80:	mov	r2, #1
   13d84:	mvn	r3, #0
   13d88:	movt	r0, #2
   13d8c:	stm	sp, {r0, r5}
   13d90:	add	r0, r6, #768	; 0x300
   13d94:	bl	12068 <__snprintf_chk@plt>
   13d98:	cmp	r0, #127	; 0x7f
   13d9c:	bhi	13eac <__assert_fail@plt+0x1e20>
   13da0:	movw	r0, #61146	; 0xeeda
   13da4:	mov	r1, #128	; 0x80
   13da8:	mov	r2, #1
   13dac:	mvn	r3, #0
   13db0:	movt	r0, #2
   13db4:	stm	sp, {r0, r5}
   13db8:	add	r0, r6, #896	; 0x380
   13dbc:	bl	12068 <__snprintf_chk@plt>
   13dc0:	cmp	r0, #127	; 0x7f
   13dc4:	bhi	13eac <__assert_fail@plt+0x1e20>
   13dc8:	movw	r0, #61146	; 0xeeda
   13dcc:	mov	r1, #128	; 0x80
   13dd0:	mov	r2, #1
   13dd4:	mvn	r3, #0
   13dd8:	movt	r0, #2
   13ddc:	stm	sp, {r0, r5}
   13de0:	add	r0, r6, #1024	; 0x400
   13de4:	bl	12068 <__snprintf_chk@plt>
   13de8:	cmp	r0, #127	; 0x7f
   13dec:	bhi	13eac <__assert_fail@plt+0x1e20>
   13df0:	movw	r0, #61146	; 0xeeda
   13df4:	mov	r1, #128	; 0x80
   13df8:	mov	r2, #1
   13dfc:	mvn	r3, #0
   13e00:	movt	r0, #2
   13e04:	stm	sp, {r0, r5}
   13e08:	add	r0, r6, #1152	; 0x480
   13e0c:	bl	12068 <__snprintf_chk@plt>
   13e10:	cmp	r0, #127	; 0x7f
   13e14:	bhi	13eac <__assert_fail@plt+0x1e20>
   13e18:	movw	r0, #61146	; 0xeeda
   13e1c:	mov	r1, #128	; 0x80
   13e20:	mov	r2, #1
   13e24:	mvn	r3, #0
   13e28:	movt	r0, #2
   13e2c:	stm	sp, {r0, r5}
   13e30:	add	r0, r6, #1280	; 0x500
   13e34:	bl	12068 <__snprintf_chk@plt>
   13e38:	cmp	r0, #127	; 0x7f
   13e3c:	bhi	13eac <__assert_fail@plt+0x1e20>
   13e40:	movw	r0, #61146	; 0xeeda
   13e44:	movt	r0, #2
   13e48:	stm	sp, {r0, r5}
   13e4c:	add	r0, r6, #1408	; 0x580
   13e50:	mov	r1, #128	; 0x80
   13e54:	mov	r2, #1
   13e58:	mvn	r3, #0
   13e5c:	bl	12068 <__snprintf_chk@plt>
   13e60:	cmp	r0, #128	; 0x80
   13e64:	bcs	13eac <__assert_fail@plt+0x1e20>
   13e68:	cmp	sl, #1536	; 0x600
   13e6c:	beq	13e9c <__assert_fail@plt+0x1e10>
   13e70:	ldr	r0, [sp, #68]	; 0x44
   13e74:	ldr	r1, [sp, #76]	; 0x4c
   13e78:	add	sl, sl, #1536	; 0x600
   13e7c:	ldr	r4, [r0], #4
   13e80:	add	r1, r1, #4
   13e84:	str	r0, [sp, #68]	; 0x44
   13e88:	ldr	r5, [r1]
   13e8c:	cmp	r4, #0
   13e90:	str	r1, [sp, #76]	; 0x4c
   13e94:	bne	13a08 <__assert_fail@plt+0x197c>
   13e98:	b	13c7c <__assert_fail@plt+0x1bf0>
   13e9c:	movw	r1, #4688	; 0x1250
   13ea0:	mov	r0, #1
   13ea4:	movt	r1, #4
   13ea8:	strb	r0, [r1, #23]
   13eac:	movw	r0, #768	; 0x300
   13eb0:	mov	sl, #1
   13eb4:	movt	r0, #4
   13eb8:	ldr	r5, [r0]
   13ebc:	movw	r0, #4688	; 0x1250
   13ec0:	movt	r0, #4
   13ec4:	ldrb	r0, [r0, #1]
   13ec8:	cmp	r0, #0
   13ecc:	beq	14604 <__assert_fail@plt+0x2578>
   13ed0:	movw	r0, #54061	; 0xd32d
   13ed4:	movt	r0, #2
   13ed8:	bl	11de0 <getenv@plt>
   13edc:	cmp	r0, #0
   13ee0:	str	r0, [sp, #80]	; 0x50
   13ee4:	beq	14480 <__assert_fail@plt+0x23f4>
   13ee8:	ldrb	r1, [r0]
   13eec:	cmp	r1, #0
   13ef0:	beq	14480 <__assert_fail@plt+0x23f4>
   13ef4:	mov	r6, #0
   13ef8:	movw	r1, #16191	; 0x3f3f
   13efc:	strb	r6, [fp, #-34]	; 0xffffffde
   13f00:	strh	r1, [fp, #-36]	; 0xffffffdc
   13f04:	bl	29594 <_obstack_memory_used@@Base+0x3740>
   13f08:	movw	r1, #4816	; 0x12d0
   13f0c:	movw	r8, #456	; 0x1c8
   13f10:	str	r0, [fp, #-44]	; 0xffffffd4
   13f14:	add	r9, sp, #80	; 0x50
   13f18:	sub	r7, fp, #36	; 0x24
   13f1c:	movt	r1, #4
   13f20:	movt	r8, #4
   13f24:	str	r0, [r1, #4]
   13f28:	mov	r0, #1
   13f2c:	sub	r0, r0, #1
   13f30:	cmp	r0, #5
   13f34:	bhi	1447c <__assert_fail@plt+0x23f0>
   13f38:	add	r1, pc, #0
   13f3c:	ldr	pc, [r1, r0, lsl #2]
   13f40:	andeq	r3, r1, r8, asr pc
   13f44:	andeq	r3, r1, ip, ror #31
   13f48:	andeq	r4, r1, ip, lsl r0
   13f4c:	muleq	r1, r8, pc	; <UNPREDICTABLE>
   13f50:	andeq	r4, r1, ip, ror r4
   13f54:	andeq	r4, r1, r0, lsr r5
   13f58:	ldr	r4, [sp, #80]	; 0x50
   13f5c:	ldrb	r0, [r4]
   13f60:	cmp	r0, #42	; 0x2a
   13f64:	beq	14300 <__assert_fail@plt+0x2274>
   13f68:	cmp	r0, #58	; 0x3a
   13f6c:	beq	142e4 <__assert_fail@plt+0x2258>
   13f70:	cmp	r0, #0
   13f74:	beq	14598 <__assert_fail@plt+0x250c>
   13f78:	strb	r0, [fp, #-36]	; 0xffffffdc
   13f7c:	add	r0, r4, #1
   13f80:	str	r0, [sp, #80]	; 0x50
   13f84:	mov	r0, #2
   13f88:	sub	r0, r0, #1
   13f8c:	cmp	r0, #5
   13f90:	bls	13f38 <__assert_fail@plt+0x1eac>
   13f94:	b	1447c <__assert_fail@plt+0x23f0>
   13f98:	ldr	r0, [sp, #80]	; 0x50
   13f9c:	add	r1, r0, #1
   13fa0:	str	r1, [sp, #80]	; 0x50
   13fa4:	ldrb	r1, [r0]
   13fa8:	mov	r0, #6
   13fac:	cmp	r1, #61	; 0x3d
   13fb0:	bne	13f2c <__assert_fail@plt+0x1ea0>
   13fb4:	ldr	r0, [fp, #-44]	; 0xffffffd4
   13fb8:	add	r3, r6, #8
   13fbc:	mov	r1, r9
   13fc0:	mov	r2, #0
   13fc4:	str	r0, [r6, #12]
   13fc8:	sub	r0, fp, #44	; 0x2c
   13fcc:	bl	19874 <__assert_fail@plt+0x77e8>
   13fd0:	cmp	r0, #0
   13fd4:	mov	r0, #6
   13fd8:	movwne	r0, #1
   13fdc:	sub	r0, r0, #1
   13fe0:	cmp	r0, #5
   13fe4:	bls	13f38 <__assert_fail@plt+0x1eac>
   13fe8:	b	1447c <__assert_fail@plt+0x23f0>
   13fec:	ldr	r1, [sp, #80]	; 0x50
   13ff0:	mov	r0, #6
   13ff4:	ldrb	r2, [r1]
   13ff8:	cmp	r2, #0
   13ffc:	addne	r0, r1, #1
   14000:	strbne	r2, [fp, #-35]	; 0xffffffdd
   14004:	strne	r0, [sp, #80]	; 0x50
   14008:	movne	r0, #3
   1400c:	sub	r0, r0, #1
   14010:	cmp	r0, #5
   14014:	bls	13f38 <__assert_fail@plt+0x1eac>
   14018:	b	1447c <__assert_fail@plt+0x23f0>
   1401c:	ldr	r0, [sp, #80]	; 0x50
   14020:	add	r1, r0, #1
   14024:	str	r1, [sp, #80]	; 0x50
   14028:	ldrb	r0, [r0]
   1402c:	cmp	r0, #61	; 0x3d
   14030:	mov	r0, #6
   14034:	bne	13f2c <__assert_fail@plt+0x1ea0>
   14038:	movw	r1, #54173	; 0xd39d
   1403c:	mov	r0, r7
   14040:	mov	r2, #3
   14044:	movt	r1, #2
   14048:	bl	11e94 <bcmp@plt>
   1404c:	cmp	r0, #0
   14050:	beq	14364 <__assert_fail@plt+0x22d8>
   14054:	movw	r1, #54176	; 0xd3a0
   14058:	mov	r0, r7
   1405c:	mov	r2, #3
   14060:	movt	r1, #2
   14064:	bl	11e94 <bcmp@plt>
   14068:	cmp	r0, #0
   1406c:	beq	1436c <__assert_fail@plt+0x22e0>
   14070:	movw	r1, #54179	; 0xd3a3
   14074:	mov	r0, r7
   14078:	mov	r2, #3
   1407c:	movt	r1, #2
   14080:	bl	11e94 <bcmp@plt>
   14084:	cmp	r0, #0
   14088:	beq	14374 <__assert_fail@plt+0x22e8>
   1408c:	movw	r1, #53542	; 0xd126
   14090:	mov	r0, r7
   14094:	mov	r2, #3
   14098:	mov	r4, #3
   1409c:	movt	r1, #2
   140a0:	bl	11e94 <bcmp@plt>
   140a4:	cmp	r0, #0
   140a8:	beq	14410 <__assert_fail@plt+0x2384>
   140ac:	movw	r1, #53800	; 0xd228
   140b0:	mov	r0, r7
   140b4:	mov	r2, #3
   140b8:	movt	r1, #2
   140bc:	bl	11e94 <bcmp@plt>
   140c0:	cmp	r0, #0
   140c4:	beq	1437c <__assert_fail@plt+0x22f0>
   140c8:	movw	r1, #54182	; 0xd3a6
   140cc:	mov	r0, r7
   140d0:	mov	r2, #3
   140d4:	movt	r1, #2
   140d8:	bl	11e94 <bcmp@plt>
   140dc:	cmp	r0, #0
   140e0:	beq	14384 <__assert_fail@plt+0x22f8>
   140e4:	movw	r1, #54185	; 0xd3a9
   140e8:	mov	r0, r7
   140ec:	mov	r2, #3
   140f0:	movt	r1, #2
   140f4:	bl	11e94 <bcmp@plt>
   140f8:	cmp	r0, #0
   140fc:	beq	1438c <__assert_fail@plt+0x2300>
   14100:	movw	r1, #54188	; 0xd3ac
   14104:	mov	r0, r7
   14108:	mov	r2, #3
   1410c:	movt	r1, #2
   14110:	bl	11e94 <bcmp@plt>
   14114:	cmp	r0, #0
   14118:	beq	14394 <__assert_fail@plt+0x2308>
   1411c:	movw	r1, #54191	; 0xd3af
   14120:	mov	r0, r7
   14124:	mov	r2, #3
   14128:	movt	r1, #2
   1412c:	bl	11e94 <bcmp@plt>
   14130:	cmp	r0, #0
   14134:	beq	1439c <__assert_fail@plt+0x2310>
   14138:	movw	r1, #54049	; 0xd321
   1413c:	mov	r0, r7
   14140:	mov	r2, #3
   14144:	movt	r1, #2
   14148:	bl	11e94 <bcmp@plt>
   1414c:	cmp	r0, #0
   14150:	beq	143a4 <__assert_fail@plt+0x2318>
   14154:	movw	r1, #54194	; 0xd3b2
   14158:	mov	r0, r7
   1415c:	mov	r2, #3
   14160:	movt	r1, #2
   14164:	bl	11e94 <bcmp@plt>
   14168:	cmp	r0, #0
   1416c:	beq	143ac <__assert_fail@plt+0x2320>
   14170:	movw	r1, #54197	; 0xd3b5
   14174:	mov	r0, r7
   14178:	mov	r2, #3
   1417c:	movt	r1, #2
   14180:	bl	11e94 <bcmp@plt>
   14184:	cmp	r0, #0
   14188:	beq	143b4 <__assert_fail@plt+0x2328>
   1418c:	movw	r1, #54200	; 0xd3b8
   14190:	mov	r0, r7
   14194:	mov	r2, #3
   14198:	movt	r1, #2
   1419c:	bl	11e94 <bcmp@plt>
   141a0:	cmp	r0, #0
   141a4:	beq	143bc <__assert_fail@plt+0x2330>
   141a8:	movw	r1, #53776	; 0xd210
   141ac:	mov	r0, r7
   141b0:	mov	r2, #3
   141b4:	movt	r1, #2
   141b8:	bl	11e94 <bcmp@plt>
   141bc:	cmp	r0, #0
   141c0:	beq	143c4 <__assert_fail@plt+0x2338>
   141c4:	movw	r1, #54203	; 0xd3bb
   141c8:	mov	r0, r7
   141cc:	mov	r2, #3
   141d0:	movt	r1, #2
   141d4:	bl	11e94 <bcmp@plt>
   141d8:	cmp	r0, #0
   141dc:	beq	143cc <__assert_fail@plt+0x2340>
   141e0:	movw	r1, #54206	; 0xd3be
   141e4:	mov	r0, r7
   141e8:	mov	r2, #3
   141ec:	movt	r1, #2
   141f0:	bl	11e94 <bcmp@plt>
   141f4:	cmp	r0, #0
   141f8:	beq	143d4 <__assert_fail@plt+0x2348>
   141fc:	movw	r1, #54209	; 0xd3c1
   14200:	mov	r0, r7
   14204:	mov	r2, #3
   14208:	movt	r1, #2
   1420c:	bl	11e94 <bcmp@plt>
   14210:	cmp	r0, #0
   14214:	beq	143dc <__assert_fail@plt+0x2350>
   14218:	movw	r1, #54212	; 0xd3c4
   1421c:	mov	r0, r7
   14220:	mov	r2, #3
   14224:	movt	r1, #2
   14228:	bl	11e94 <bcmp@plt>
   1422c:	cmp	r0, #0
   14230:	beq	143e4 <__assert_fail@plt+0x2358>
   14234:	movw	r1, #53467	; 0xd0db
   14238:	mov	r0, r7
   1423c:	mov	r2, #3
   14240:	movt	r1, #2
   14244:	bl	11e94 <bcmp@plt>
   14248:	cmp	r0, #0
   1424c:	beq	143ec <__assert_fail@plt+0x2360>
   14250:	movw	r1, #54215	; 0xd3c7
   14254:	mov	r0, r7
   14258:	mov	r2, #3
   1425c:	movt	r1, #2
   14260:	bl	11e94 <bcmp@plt>
   14264:	cmp	r0, #0
   14268:	beq	143f4 <__assert_fail@plt+0x2368>
   1426c:	movw	r1, #54218	; 0xd3ca
   14270:	mov	r0, r7
   14274:	mov	r2, #3
   14278:	movt	r1, #2
   1427c:	bl	11e94 <bcmp@plt>
   14280:	cmp	r0, #0
   14284:	beq	143fc <__assert_fail@plt+0x2370>
   14288:	movw	r1, #54221	; 0xd3cd
   1428c:	mov	r0, r7
   14290:	mov	r2, #3
   14294:	movt	r1, #2
   14298:	bl	11e94 <bcmp@plt>
   1429c:	cmp	r0, #0
   142a0:	beq	14404 <__assert_fail@plt+0x2378>
   142a4:	movw	r1, #54224	; 0xd3d0
   142a8:	mov	r0, r7
   142ac:	mov	r2, #3
   142b0:	movt	r1, #2
   142b4:	bl	11e94 <bcmp@plt>
   142b8:	cmp	r0, #0
   142bc:	beq	1440c <__assert_fail@plt+0x2380>
   142c0:	movw	r1, #54227	; 0xd3d3
   142c4:	mov	r0, r7
   142c8:	mov	r2, #3
   142cc:	movt	r1, #2
   142d0:	bl	11e94 <bcmp@plt>
   142d4:	cmp	r0, #0
   142d8:	bne	14438 <__assert_fail@plt+0x23ac>
   142dc:	mov	r4, #23
   142e0:	b	14410 <__assert_fail@plt+0x2384>
   142e4:	add	r0, r4, #1
   142e8:	str	r0, [sp, #80]	; 0x50
   142ec:	mov	r0, #1
   142f0:	sub	r0, r0, #1
   142f4:	cmp	r0, #5
   142f8:	bls	13f38 <__assert_fail@plt+0x1eac>
   142fc:	b	1447c <__assert_fail@plt+0x23f0>
   14300:	mov	r0, #20
   14304:	bl	29090 <_obstack_memory_used@@Base+0x323c>
   14308:	mov	r6, r0
   1430c:	movw	r0, #4816	; 0x12d0
   14310:	mov	r2, #1
   14314:	movt	r0, #4
   14318:	mov	r3, r6
   1431c:	mov	r1, r0
   14320:	ldr	r0, [r0, #8]
   14324:	str	r6, [r1, #8]
   14328:	mov	r1, r9
   1432c:	str	r0, [r6, #16]
   14330:	add	r0, r4, #1
   14334:	str	r0, [sp, #80]	; 0x50
   14338:	ldr	r0, [fp, #-44]	; 0xffffffd4
   1433c:	str	r0, [r6, #4]
   14340:	sub	r0, fp, #44	; 0x2c
   14344:	bl	19874 <__assert_fail@plt+0x77e8>
   14348:	cmp	r0, #0
   1434c:	mov	r0, #6
   14350:	movwne	r0, #4
   14354:	sub	r0, r0, #1
   14358:	cmp	r0, #5
   1435c:	bls	13f38 <__assert_fail@plt+0x1eac>
   14360:	b	1447c <__assert_fail@plt+0x23f0>
   14364:	mov	r4, #0
   14368:	b	14410 <__assert_fail@plt+0x2384>
   1436c:	mov	r4, #1
   14370:	b	14410 <__assert_fail@plt+0x2384>
   14374:	mov	r4, #2
   14378:	b	14410 <__assert_fail@plt+0x2384>
   1437c:	mov	r4, #4
   14380:	b	14410 <__assert_fail@plt+0x2384>
   14384:	mov	r4, #5
   14388:	b	14410 <__assert_fail@plt+0x2384>
   1438c:	mov	r4, #6
   14390:	b	14410 <__assert_fail@plt+0x2384>
   14394:	mov	r4, #7
   14398:	b	14410 <__assert_fail@plt+0x2384>
   1439c:	mov	r4, #8
   143a0:	b	14410 <__assert_fail@plt+0x2384>
   143a4:	mov	r4, #9
   143a8:	b	14410 <__assert_fail@plt+0x2384>
   143ac:	mov	r4, #10
   143b0:	b	14410 <__assert_fail@plt+0x2384>
   143b4:	mov	r4, #11
   143b8:	b	14410 <__assert_fail@plt+0x2384>
   143bc:	mov	r4, #12
   143c0:	b	14410 <__assert_fail@plt+0x2384>
   143c4:	mov	r4, #13
   143c8:	b	14410 <__assert_fail@plt+0x2384>
   143cc:	mov	r4, #14
   143d0:	b	14410 <__assert_fail@plt+0x2384>
   143d4:	mov	r4, #15
   143d8:	b	14410 <__assert_fail@plt+0x2384>
   143dc:	mov	r4, #16
   143e0:	b	14410 <__assert_fail@plt+0x2384>
   143e4:	mov	r4, #17
   143e8:	b	14410 <__assert_fail@plt+0x2384>
   143ec:	mov	r4, #18
   143f0:	b	14410 <__assert_fail@plt+0x2384>
   143f4:	mov	r4, #19
   143f8:	b	14410 <__assert_fail@plt+0x2384>
   143fc:	mov	r4, #20
   14400:	b	14410 <__assert_fail@plt+0x2384>
   14404:	mov	r4, #21
   14408:	b	14410 <__assert_fail@plt+0x2384>
   1440c:	mov	r4, #22
   14410:	ldr	r0, [fp, #-44]	; 0xffffffd4
   14414:	add	r3, r8, r4, lsl #3
   14418:	mov	r1, r9
   1441c:	mov	r2, #0
   14420:	str	r0, [r3, #4]
   14424:	sub	r0, fp, #44	; 0x2c
   14428:	bl	19874 <__assert_fail@plt+0x77e8>
   1442c:	cmp	r0, #0
   14430:	mov	r0, #1
   14434:	bne	13f2c <__assert_fail@plt+0x1ea0>
   14438:	movw	r1, #54084	; 0xd344
   1443c:	mov	r0, #0
   14440:	mov	r2, #5
   14444:	movt	r1, #2
   14448:	bl	11ca8 <dcgettext@plt>
   1444c:	mov	r4, r0
   14450:	mov	r0, r7
   14454:	bl	27e90 <_obstack_memory_used@@Base+0x203c>
   14458:	mov	r3, r0
   1445c:	mov	r0, #0
   14460:	mov	r1, #0
   14464:	mov	r2, r4
   14468:	bl	11da4 <error@plt>
   1446c:	mov	r0, #6
   14470:	sub	r0, r0, #1
   14474:	cmp	r0, #5
   14478:	bls	13f38 <__assert_fail@plt+0x1eac>
   1447c:	bl	12038 <abort@plt>
   14480:	movw	r0, #54071	; 0xd337
   14484:	movt	r0, #2
   14488:	bl	11de0 <getenv@plt>
   1448c:	cmp	r0, #0
   14490:	beq	144a0 <__assert_fail@plt+0x2414>
   14494:	ldrb	r0, [r0]
   14498:	cmp	r0, #0
   1449c:	bne	145d0 <__assert_fail@plt+0x2544>
   144a0:	movw	r0, #54076	; 0xd33c
   144a4:	movt	r0, #2
   144a8:	bl	11de0 <getenv@plt>
   144ac:	cmp	r0, #0
   144b0:	beq	145e0 <__assert_fail@plt+0x2554>
   144b4:	mov	r6, r0
   144b8:	ldrb	r0, [r0]
   144bc:	cmp	r0, #0
   144c0:	beq	145e0 <__assert_fail@plt+0x2554>
   144c4:	movw	r9, #56232	; 0xdba8
   144c8:	movw	r8, #54167	; 0xd397
   144cc:	movw	r4, #4310	; 0x10d6
   144d0:	movt	r9, #2
   144d4:	movt	r8, #2
   144d8:	mov	r7, r9
   144dc:	b	144fc <__assert_fail@plt+0x2470>
   144e0:	mov	r0, r7
   144e4:	bl	11eac <strlen@plt>
   144e8:	add	r0, r0, r7
   144ec:	add	r7, r0, #1
   144f0:	sub	r0, r7, r9
   144f4:	cmp	r0, r4
   144f8:	bcs	145e0 <__assert_fail@plt+0x2554>
   144fc:	mov	r0, r7
   14500:	mov	r1, r8
   14504:	mov	r2, #5
   14508:	bl	1202c <strncmp@plt>
   1450c:	cmp	r0, #0
   14510:	bne	144e0 <__assert_fail@plt+0x2454>
   14514:	add	r0, r7, #5
   14518:	mov	r1, r6
   1451c:	mov	r2, #0
   14520:	bl	11dc8 <fnmatch@plt>
   14524:	cmp	r0, #0
   14528:	bne	144e0 <__assert_fail@plt+0x2454>
   1452c:	b	145d0 <__assert_fail@plt+0x2544>
   14530:	movw	r1, #54108	; 0xd35c
   14534:	mov	r0, #0
   14538:	mov	r2, #5
   1453c:	mov	r4, #0
   14540:	movt	r1, #2
   14544:	bl	11ca8 <dcgettext@plt>
   14548:	mov	r2, r0
   1454c:	mov	r0, #0
   14550:	mov	r1, #0
   14554:	bl	11da4 <error@plt>
   14558:	movw	r0, #4816	; 0x12d0
   1455c:	movt	r0, #4
   14560:	mov	r6, r0
   14564:	ldr	r0, [r0, #4]
   14568:	bl	2056c <__assert_fail@plt+0xe4e0>
   1456c:	ldr	r0, [r6, #8]
   14570:	cmp	r0, #0
   14574:	beq	1458c <__assert_fail@plt+0x2500>
   14578:	ldr	r6, [r0, #16]
   1457c:	bl	2056c <__assert_fail@plt+0xe4e0>
   14580:	cmp	r6, #0
   14584:	mov	r0, r6
   14588:	bne	14578 <__assert_fail@plt+0x24ec>
   1458c:	movw	r0, #4688	; 0x1250
   14590:	movt	r0, #4
   14594:	strb	r4, [r0, #1]
   14598:	ldr	r0, [r8, #56]	; 0x38
   1459c:	cmp	r0, #6
   145a0:	bne	145d0 <__assert_fail@plt+0x2544>
   145a4:	ldr	r0, [r8, #60]	; 0x3c
   145a8:	movw	r1, #54160	; 0xd390
   145ac:	mov	r2, #6
   145b0:	movt	r1, #2
   145b4:	bl	1202c <strncmp@plt>
   145b8:	cmp	r0, #0
   145bc:	bne	145d0 <__assert_fail@plt+0x2544>
   145c0:	movw	r1, #4688	; 0x1250
   145c4:	mov	r0, #1
   145c8:	movt	r1, #4
   145cc:	strb	r0, [r1, #4]
   145d0:	movw	r0, #4688	; 0x1250
   145d4:	movt	r0, #4
   145d8:	ldrb	r0, [r0, #1]
   145dc:	b	145f0 <__assert_fail@plt+0x2564>
   145e0:	movw	r1, #4688	; 0x1250
   145e4:	mov	r0, #0
   145e8:	movt	r1, #4
   145ec:	strb	r0, [r1, #1]
   145f0:	cmp	r0, #0
   145f4:	movwne	r0, #4688	; 0x1250
   145f8:	movne	sl, #0
   145fc:	movtne	r0, #4
   14600:	strne	sl, [r0, #36]	; 0x24
   14604:	movw	r1, #4688	; 0x1250
   14608:	movt	r1, #4
   1460c:	ldrb	r0, [r1, #2]
   14610:	cmp	r0, #1
   14614:	bne	14630 <__assert_fail@plt+0x25a4>
   14618:	movw	r9, #4816	; 0x12d0
   1461c:	mov	r0, #1
   14620:	movt	r9, #4
   14624:	strb	r0, [r1, #3]
   14628:	mov	r7, r9
   1462c:	b	1476c <__assert_fail@plt+0x26e0>
   14630:	movw	r9, #4816	; 0x12d0
   14634:	cmp	sl, #0
   14638:	movt	r9, #4
   1463c:	mov	r7, r9
   14640:	bne	1476c <__assert_fail@plt+0x26e0>
   14644:	movw	r4, #456	; 0x1c8
   14648:	movt	r4, #4
   1464c:	ldr	r1, [r4, #104]	; 0x68
   14650:	cmp	r1, #0
   14654:	beq	14694 <__assert_fail@plt+0x2608>
   14658:	ldr	r0, [r4, #108]	; 0x6c
   1465c:	cmp	r1, #2
   14660:	beq	1467c <__assert_fail@plt+0x25f0>
   14664:	cmp	r1, #1
   14668:	bne	1475c <__assert_fail@plt+0x26d0>
   1466c:	ldrb	r0, [r0]
   14670:	cmp	r0, #48	; 0x30
   14674:	beq	14694 <__assert_fail@plt+0x2608>
   14678:	b	1475c <__assert_fail@plt+0x26d0>
   1467c:	movw	r1, #52640	; 0xcda0
   14680:	mov	r2, #2
   14684:	movt	r1, #2
   14688:	bl	1202c <strncmp@plt>
   1468c:	cmp	r0, #0
   14690:	bne	1475c <__assert_fail@plt+0x26d0>
   14694:	ldr	r1, [r4, #112]	; 0x70
   14698:	cmp	r1, #0
   1469c:	beq	146f0 <__assert_fail@plt+0x2664>
   146a0:	ldr	r0, [r4, #116]	; 0x74
   146a4:	cmp	r1, #2
   146a8:	beq	146c4 <__assert_fail@plt+0x2638>
   146ac:	cmp	r1, #1
   146b0:	bne	146dc <__assert_fail@plt+0x2650>
   146b4:	ldrb	r0, [r0]
   146b8:	cmp	r0, #48	; 0x30
   146bc:	bne	146dc <__assert_fail@plt+0x2650>
   146c0:	b	146f0 <__assert_fail@plt+0x2664>
   146c4:	movw	r1, #52640	; 0xcda0
   146c8:	mov	r2, #2
   146cc:	movt	r1, #2
   146d0:	bl	1202c <strncmp@plt>
   146d4:	cmp	r0, #0
   146d8:	beq	146f0 <__assert_fail@plt+0x2664>
   146dc:	movw	r0, #4688	; 0x1250
   146e0:	movt	r0, #4
   146e4:	ldrb	r0, [r0, #4]
   146e8:	cmp	r0, #0
   146ec:	bne	1475c <__assert_fail@plt+0x26d0>
   146f0:	ldr	r1, [r4, #96]	; 0x60
   146f4:	cmp	r1, #0
   146f8:	beq	1476c <__assert_fail@plt+0x26e0>
   146fc:	ldr	r2, [r4, #100]	; 0x64
   14700:	cmp	r1, #2
   14704:	beq	14724 <__assert_fail@plt+0x2698>
   14708:	mov	r0, #1
   1470c:	cmp	r1, #1
   14710:	bne	14740 <__assert_fail@plt+0x26b4>
   14714:	ldrb	r1, [r2]
   14718:	cmp	r1, #48	; 0x30
   1471c:	bne	14740 <__assert_fail@plt+0x26b4>
   14720:	b	1476c <__assert_fail@plt+0x26e0>
   14724:	movw	r1, #52640	; 0xcda0
   14728:	mov	r0, r2
   1472c:	mov	r2, #2
   14730:	movt	r1, #2
   14734:	bl	1202c <strncmp@plt>
   14738:	cmp	r0, #0
   1473c:	movwne	r0, #1
   14740:	cmp	r0, #0
   14744:	beq	1476c <__assert_fail@plt+0x26e0>
   14748:	movw	r0, #4688	; 0x1250
   1474c:	movt	r0, #4
   14750:	ldr	r0, [r0, #40]	; 0x28
   14754:	cmp	r0, #0
   14758:	bne	1476c <__assert_fail@plt+0x26e0>
   1475c:	movw	r1, #4688	; 0x1250
   14760:	mov	r0, #1
   14764:	movt	r1, #4
   14768:	strb	r0, [r1, #3]
   1476c:	movw	r4, #4688	; 0x1250
   14770:	movt	r4, #4
   14774:	ldr	r0, [r4, #44]	; 0x2c
   14778:	cmp	r0, #0
   1477c:	bne	147ac <__assert_fail@plt+0x2720>
   14780:	ldr	r0, [r4, #40]	; 0x28
   14784:	mov	r1, #3
   14788:	cmp	r0, #0
   1478c:	ldr	r0, [r4, #48]	; 0x30
   14790:	movweq	r1, #1
   14794:	cmp	r0, #3
   14798:	ldrb	r0, [r4, #5]
   1479c:	movweq	r1, #1
   147a0:	cmp	r0, #0
   147a4:	movwne	r1, #1
   147a8:	str	r1, [r4, #44]	; 0x2c
   147ac:	ldrb	r0, [r4, #6]
   147b0:	movw	r6, #1388	; 0x56c
   147b4:	movt	r6, #2
   147b8:	cmp	r0, #1
   147bc:	bne	1481c <__assert_fail@plt+0x2790>
   147c0:	movw	r0, #23356	; 0x5b3c
   147c4:	movw	r2, #23252	; 0x5ad4
   147c8:	movw	r3, #23284	; 0x5af4
   147cc:	mov	r1, #0
   147d0:	movt	r0, #1
   147d4:	movt	r2, #1
   147d8:	movt	r3, #1
   147dc:	str	r0, [sp]
   147e0:	mov	r0, #30
   147e4:	bl	20b1c <__assert_fail@plt+0xea90>
   147e8:	cmp	r0, #0
   147ec:	str	r0, [r4, #52]	; 0x34
   147f0:	beq	15940 <__assert_fail@plt+0x38b4>
   147f4:	movw	r0, #4936	; 0x1348
   147f8:	movw	r3, #42568	; 0xa648
   147fc:	mov	r1, #0
   14800:	mov	r2, #0
   14804:	str	r6, [sp]
   14808:	movt	r0, #4
   1480c:	movt	r3, #2
   14810:	bl	25ab8 <_obstack_begin@@Base>
   14814:	movw	r4, #4688	; 0x1250
   14818:	movt	r4, #4
   1481c:	movw	r0, #45204	; 0xb094
   14820:	movt	r0, #2
   14824:	bl	11de0 <getenv@plt>
   14828:	bl	28238 <_obstack_memory_used@@Base+0x23e4>
   1482c:	str	r0, [r4, #56]	; 0x38
   14830:	ldr	r0, [r4, #40]	; 0x28
   14834:	cmp	r0, #0
   14838:	beq	1484c <__assert_fail@plt+0x27c0>
   1483c:	ldr	r0, [r4, #60]	; 0x3c
   14840:	cmp	r0, #5
   14844:	cmpne	r0, #3
   14848:	bne	149d4 <__assert_fail@plt+0x2948>
   1484c:	mov	r0, #1
   14850:	strb	r0, [r4, #9]
   14854:	mov	r0, #0
   14858:	and	r0, r0, #1
   1485c:	movw	r9, #4936	; 0x1348
   14860:	strb	r0, [r4, #10]
   14864:	movt	r9, #4
   14868:	ldrb	r0, [r4, #11]
   1486c:	cmp	r0, #0
   14870:	beq	148b0 <__assert_fail@plt+0x2824>
   14874:	movw	r4, #42568	; 0xa648
   14878:	add	r0, r9, #44	; 0x2c
   1487c:	mov	r1, #0
   14880:	mov	r2, #0
   14884:	str	r6, [sp]
   14888:	movt	r4, #2
   1488c:	mov	r3, r4
   14890:	bl	25ab8 <_obstack_begin@@Base>
   14894:	movw	r0, #792	; 0x318
   14898:	mov	r1, #0
   1489c:	mov	r2, #0
   148a0:	mov	r3, r4
   148a4:	str	r6, [sp]
   148a8:	movt	r0, #4
   148ac:	bl	25ab8 <_obstack_begin@@Base>
   148b0:	movw	r4, #4688	; 0x1250
   148b4:	movt	r4, #4
   148b8:	ldrb	r0, [r4, #12]
   148bc:	cmp	r0, #0
   148c0:	beq	1493c <__assert_fail@plt+0x28b0>
   148c4:	movw	r4, #836	; 0x344
   148c8:	mov	r6, #0
   148cc:	movt	r4, #4
   148d0:	b	148ec <__assert_fail@plt+0x2860>
   148d4:	ldrb	r0, [r4, r6]
   148d8:	orr	r0, r0, r1
   148dc:	strb	r0, [r4, r6]
   148e0:	add	r6, r6, #1
   148e4:	cmp	r6, #256	; 0x100
   148e8:	beq	1491c <__assert_fail@plt+0x2890>
   148ec:	mov	r0, r6
   148f0:	bl	1f018 <__assert_fail@plt+0xcf8c>
   148f4:	mov	r1, #1
   148f8:	cmp	r0, #0
   148fc:	bne	148d4 <__assert_fail@plt+0x2848>
   14900:	sub	r0, r6, #45	; 0x2d
   14904:	cmp	r0, #2
   14908:	bcc	148d4 <__assert_fail@plt+0x2848>
   1490c:	cmp	r6, #95	; 0x5f
   14910:	cmpne	r6, #126	; 0x7e
   14914:	movne	r1, #0
   14918:	b	148d4 <__assert_fail@plt+0x2848>
   1491c:	bl	2970c <_obstack_memory_used@@Base+0x38b8>
   14920:	movw	r4, #4688	; 0x1250
   14924:	movw	r1, #54434	; 0xd4a2
   14928:	cmp	r0, #0
   1492c:	movt	r4, #4
   14930:	movt	r1, #2
   14934:	movne	r1, r0
   14938:	str	r1, [r4, #64]	; 0x40
   1493c:	mov	r0, #100	; 0x64
   14940:	mov	r1, #152	; 0x98
   14944:	mov	sl, r7
   14948:	str	r0, [r4, #68]	; 0x44
   1494c:	mov	r0, #100	; 0x64
   14950:	bl	29160 <_obstack_memory_used@@Base+0x330c>
   14954:	str	r0, [r4, #72]	; 0x48
   14958:	ldr	r0, [sp, #56]	; 0x38
   1495c:	mov	r1, #0
   14960:	str	r1, [r4, #76]	; 0x4c
   14964:	sub	r8, r0, r5
   14968:	bl	15b40 <__assert_fail@plt+0x3ab4>
   1496c:	cmp	r8, #1
   14970:	blt	149a8 <__assert_fail@plt+0x291c>
   14974:	ldr	r4, [sp, #72]	; 0x48
   14978:	ldr	r7, [sp, #56]	; 0x38
   1497c:	movw	r6, #54434	; 0xd4a2
   14980:	movt	r6, #2
   14984:	ldr	r0, [r4, r5, lsl #2]
   14988:	mov	r1, #0
   1498c:	mov	r2, #1
   14990:	mov	r3, r6
   14994:	bl	15bf4 <__assert_fail@plt+0x3b68>
   14998:	add	r5, r5, #1
   1499c:	cmp	r5, r7
   149a0:	blt	14984 <__assert_fail@plt+0x28f8>
   149a4:	b	14a58 <__assert_fail@plt+0x29cc>
   149a8:	ldrb	r0, [r4, #5]
   149ac:	cmp	r0, #1
   149b0:	bne	14a1c <__assert_fail@plt+0x2990>
   149b4:	movw	r0, #61162	; 0xeeea
   149b8:	movw	r3, #54434	; 0xd4a2
   149bc:	mov	r1, #3
   149c0:	mov	r2, #1
   149c4:	movt	r0, #2
   149c8:	movt	r3, #2
   149cc:	bl	15bf4 <__assert_fail@plt+0x3b68>
   149d0:	b	14a58 <__assert_fail@plt+0x29cc>
   149d4:	ldrb	r0, [r4, #7]
   149d8:	ldrb	r1, [r4, #8]
   149dc:	orr	r0, r0, r1
   149e0:	ands	r0, r0, #1
   149e4:	strb	r0, [r4, #9]
   149e8:	mov	r0, #0
   149ec:	bne	14858 <__assert_fail@plt+0x27cc>
   149f0:	ldrb	r1, [r4, #6]
   149f4:	mov	r0, #1
   149f8:	cmp	r1, #0
   149fc:	bne	14858 <__assert_fail@plt+0x27cc>
   14a00:	ldr	r0, [r4, #48]	; 0x30
   14a04:	ldrb	r1, [r4, #1]
   14a08:	ldrb	r2, [r4, #2]
   14a0c:	orrs	r0, r1, r0
   14a10:	movwne	r0, #1
   14a14:	orr	r0, r2, r0
   14a18:	b	14858 <__assert_fail@plt+0x27cc>
   14a1c:	mov	r0, #16
   14a20:	mov	r5, r4
   14a24:	bl	29090 <_obstack_memory_used@@Base+0x323c>
   14a28:	mov	r4, r0
   14a2c:	mov	r0, #0
   14a30:	str	r0, [r4, #4]
   14a34:	movw	r0, #61162	; 0xeeea
   14a38:	movt	r0, #2
   14a3c:	bl	29594 <_obstack_memory_used@@Base+0x3740>
   14a40:	mov	r1, #1
   14a44:	strb	r1, [r4, #8]
   14a48:	str	r0, [r4]
   14a4c:	ldr	r0, [r5, #32]
   14a50:	str	r4, [r5, #32]
   14a54:	str	r0, [r4, #12]
   14a58:	movw	r5, #4688	; 0x1250
   14a5c:	movt	r5, #4
   14a60:	ldr	r0, [r5, #76]	; 0x4c
   14a64:	cmp	r0, #0
   14a68:	beq	14ae4 <__assert_fail@plt+0x2a58>
   14a6c:	bl	16d90 <__assert_fail@plt+0x4d04>
   14a70:	ldrb	r0, [r5, #5]
   14a74:	cmp	r0, #0
   14a78:	moveq	r0, #0
   14a7c:	moveq	r1, #1
   14a80:	bleq	17180 <__assert_fail@plt+0x50f4>
   14a84:	ldr	r0, [r5, #76]	; 0x4c
   14a88:	cmp	r0, #0
   14a8c:	beq	14ae4 <__assert_fail@plt+0x2a58>
   14a90:	bl	17538 <__assert_fail@plt+0x54ac>
   14a94:	ldr	r6, [r5, #32]
   14a98:	cmp	r6, #0
   14a9c:	beq	155a0 <__assert_fail@plt+0x3514>
   14aa0:	ldrd	r0, [sl, #80]	; 0x50
   14aa4:	mov	r8, sl
   14aa8:	adds	r0, r0, #1
   14aac:	adc	r1, r1, #0
   14ab0:	strd	r0, [r8, #80]	; 0x50
   14ab4:	movw	r0, #780	; 0x30c
   14ab8:	movt	r0, #4
   14abc:	ldr	r0, [r0]
   14ac0:	ldr	r1, [r0, #20]
   14ac4:	ldr	r2, [r0, #24]
   14ac8:	cmp	r1, r2
   14acc:	bcs	1558c <__assert_fail@plt+0x3500>
   14ad0:	add	r2, r1, #1
   14ad4:	str	r2, [r0, #20]
   14ad8:	mov	r0, #10
   14adc:	strb	r0, [r1]
   14ae0:	b	14b1c <__assert_fail@plt+0x2a90>
   14ae4:	ldr	r6, [r5, #32]
   14ae8:	cmp	r8, #1
   14aec:	bgt	14b10 <__assert_fail@plt+0x2a84>
   14af0:	cmp	r6, #0
   14af4:	beq	14b10 <__assert_fail@plt+0x2a84>
   14af8:	ldr	r0, [r6, #12]
   14afc:	mov	r8, sl
   14b00:	cmp	r0, #0
   14b04:	moveq	r0, #0
   14b08:	strbeq	r0, [r5]
   14b0c:	b	14b1c <__assert_fail@plt+0x2a90>
   14b10:	mov	r8, sl
   14b14:	cmp	r6, #0
   14b18:	beq	155a0 <__assert_fail@plt+0x3514>
   14b1c:	add	r0, sp, #80	; 0x50
   14b20:	add	r1, r0, #1
   14b24:	add	r0, r0, #96	; 0x60
   14b28:	str	r1, [sp, #52]	; 0x34
   14b2c:	str	r0, [sp, #56]	; 0x38
   14b30:	b	14b7c <__assert_fail@plt+0x2af0>
   14b34:	ldr	r0, [r5, #28]
   14b38:	mov	r8, r9
   14b3c:	movw	r9, #4936	; 0x1348
   14b40:	movt	r9, #4
   14b44:	cmp	r0, #0
   14b48:	moveq	r0, #1
   14b4c:	streq	r0, [r5, #28]
   14b50:	ldr	r0, [r6]
   14b54:	bl	2056c <__assert_fail@plt+0xe4e0>
   14b58:	ldr	r0, [r6, #4]
   14b5c:	bl	2056c <__assert_fail@plt+0xe4e0>
   14b60:	mov	r0, r6
   14b64:	bl	2056c <__assert_fail@plt+0xe4e0>
   14b68:	mov	r0, #1
   14b6c:	strb	r0, [r5]
   14b70:	ldr	r6, [r5, #32]
   14b74:	cmp	r6, #0
   14b78:	beq	155a0 <__assert_fail@plt+0x3514>
   14b7c:	ldr	r0, [r6, #12]
   14b80:	str	r0, [r5, #32]
   14b84:	ldr	r0, [r5, #52]	; 0x34
   14b88:	ldr	r4, [r6]
   14b8c:	cmp	r0, #0
   14b90:	beq	14bfc <__assert_fail@plt+0x2b70>
   14b94:	cmp	r4, #0
   14b98:	bne	14bfc <__assert_fail@plt+0x2b70>
   14b9c:	ldr	r2, [r9, #8]
   14ba0:	ldr	r1, [r9, #12]
   14ba4:	sub	r2, r1, r2
   14ba8:	cmp	r2, #15
   14bac:	bls	15900 <__assert_fail@plt+0x3874>
   14bb0:	sub	r1, r1, #16
   14bb4:	str	r1, [r9, #12]
   14bb8:	vld1.64	{d16-d17}, [r1]
   14bbc:	add	r1, sp, #80	; 0x50
   14bc0:	vst1.64	{d16-d17}, [r1]
   14bc4:	bl	217c0 <__assert_fail@plt+0xf734>
   14bc8:	cmp	r0, #0
   14bcc:	beq	15920 <__assert_fail@plt+0x3894>
   14bd0:	bl	2056c <__assert_fail@plt+0xe4e0>
   14bd4:	ldr	r0, [r6]
   14bd8:	bl	2056c <__assert_fail@plt+0xe4e0>
   14bdc:	ldr	r0, [r6, #4]
   14be0:	bl	2056c <__assert_fail@plt+0xe4e0>
   14be4:	mov	r0, r6
   14be8:	bl	2056c <__assert_fail@plt+0xe4e0>
   14bec:	ldr	r6, [r5, #32]
   14bf0:	cmp	r6, #0
   14bf4:	bne	14b7c <__assert_fail@plt+0x2af0>
   14bf8:	b	155a0 <__assert_fail@plt+0x3514>
   14bfc:	ldr	r0, [r6, #4]
   14c00:	ldrb	sl, [r6, #8]
   14c04:	str	r0, [sp, #64]	; 0x40
   14c08:	bl	11ed0 <__errno_location@plt>
   14c0c:	mov	r7, r0
   14c10:	mov	r0, #0
   14c14:	str	r0, [r7]
   14c18:	mov	r0, r4
   14c1c:	bl	11dbc <opendir@plt>
   14c20:	cmp	r0, #0
   14c24:	str	r0, [sp, #72]	; 0x48
   14c28:	beq	14d48 <__assert_fail@plt+0x2cbc>
   14c2c:	ldr	r0, [r5, #52]	; 0x34
   14c30:	str	sl, [sp, #68]	; 0x44
   14c34:	str	r4, [sp, #76]	; 0x4c
   14c38:	str	r6, [sp, #60]	; 0x3c
   14c3c:	cmp	r0, #0
   14c40:	beq	14e88 <__assert_fail@plt+0x2dfc>
   14c44:	ldr	r0, [sp, #72]	; 0x48
   14c48:	bl	11fe4 <dirfd@plt>
   14c4c:	cmp	r0, #0
   14c50:	bmi	14db0 <__assert_fail@plt+0x2d24>
   14c54:	mov	r1, #256	; 0x100
   14c58:	add	r2, sp, #80	; 0x50
   14c5c:	mov	r3, #4096	; 0x1000
   14c60:	str	r1, [sp]
   14c64:	movw	r1, #54434	; 0xd4a2
   14c68:	movt	r1, #2
   14c6c:	bl	1a784 <__assert_fail@plt+0x86f8>
   14c70:	cmn	r0, #1
   14c74:	ble	14dd4 <__assert_fail@plt+0x2d48>
   14c78:	ldr	r0, [sp, #56]	; 0x38
   14c7c:	ldr	r6, [sp, #80]	; 0x50
   14c80:	ldr	r5, [sp, #84]	; 0x54
   14c84:	ldr	sl, [r0]
   14c88:	ldr	r9, [r0, #4]
   14c8c:	mov	r0, #16
   14c90:	bl	29090 <_obstack_memory_used@@Base+0x323c>
   14c94:	mov	r4, r0
   14c98:	str	sl, [r0]
   14c9c:	str	r9, [r0, #4]
   14ca0:	str	r6, [r0, #8]
   14ca4:	str	r5, [r0, #12]
   14ca8:	movw	r0, #4688	; 0x1250
   14cac:	movt	r0, #4
   14cb0:	mov	r1, r4
   14cb4:	ldr	r0, [r0, #52]	; 0x34
   14cb8:	bl	21778 <__assert_fail@plt+0xf6ec>
   14cbc:	cmp	r0, #0
   14cc0:	beq	15940 <__assert_fail@plt+0x38b4>
   14cc4:	cmp	r0, r4
   14cc8:	beq	14e30 <__assert_fail@plt+0x2da4>
   14ccc:	mov	r0, r4
   14cd0:	bl	2056c <__assert_fail@plt+0xe4e0>
   14cd4:	movw	r1, #54295	; 0xd417
   14cd8:	mov	r0, #0
   14cdc:	mov	r2, #5
   14ce0:	movt	r1, #2
   14ce4:	bl	11ca8 <dcgettext@plt>
   14ce8:	ldr	r2, [sp, #76]	; 0x4c
   14cec:	mov	r4, r0
   14cf0:	mov	r0, #0
   14cf4:	mov	r1, #3
   14cf8:	bl	27be4 <_obstack_memory_used@@Base+0x1d90>
   14cfc:	mov	r3, r0
   14d00:	mov	r0, #0
   14d04:	mov	r1, #0
   14d08:	mov	r2, r4
   14d0c:	bl	11da4 <error@plt>
   14d10:	ldr	r0, [sp, #72]	; 0x48
   14d14:	bl	12044 <closedir@plt>
   14d18:	movw	r5, #4688	; 0x1250
   14d1c:	movw	r9, #4816	; 0x12d0
   14d20:	movw	sl, #4936	; 0x1348
   14d24:	ldr	r6, [sp, #60]	; 0x3c
   14d28:	mov	r0, #2
   14d2c:	movt	r5, #4
   14d30:	movt	r9, #4
   14d34:	movt	sl, #4
   14d38:	mov	r8, r9
   14d3c:	str	r0, [r5, #28]
   14d40:	mov	r9, sl
   14d44:	b	14b50 <__assert_fail@plt+0x2ac4>
   14d48:	movw	r1, #54230	; 0xd3d6
   14d4c:	mov	r0, #0
   14d50:	mov	r2, #5
   14d54:	mov	r9, r8
   14d58:	movt	r1, #2
   14d5c:	bl	11ca8 <dcgettext@plt>
   14d60:	ldr	r5, [r7]
   14d64:	mov	r8, r0
   14d68:	mov	r0, #4
   14d6c:	mov	r1, r4
   14d70:	bl	27968 <_obstack_memory_used@@Base+0x1b14>
   14d74:	mov	r3, r0
   14d78:	mov	r0, #0
   14d7c:	mov	r1, r5
   14d80:	mov	r2, r8
   14d84:	bl	11da4 <error@plt>
   14d88:	movw	r5, #4688	; 0x1250
   14d8c:	cmp	sl, #0
   14d90:	movt	r5, #4
   14d94:	beq	14b34 <__assert_fail@plt+0x2aa8>
   14d98:	mov	r0, #2
   14d9c:	mov	r8, r9
   14da0:	movw	r9, #4936	; 0x1348
   14da4:	str	r0, [r5, #28]
   14da8:	movt	r9, #4
   14dac:	b	14b50 <__assert_fail@plt+0x2ac4>
   14db0:	ldr	r1, [sp, #76]	; 0x4c
   14db4:	mov	r0, #256	; 0x100
   14db8:	add	r2, sp, #80	; 0x50
   14dbc:	mov	r3, #0
   14dc0:	str	r0, [sp]
   14dc4:	mvn	r0, #99	; 0x63
   14dc8:	bl	1a784 <__assert_fail@plt+0x86f8>
   14dcc:	cmn	r0, #1
   14dd0:	bgt	14c78 <__assert_fail@plt+0x2bec>
   14dd4:	movw	r1, #54255	; 0xd3ef
   14dd8:	mov	r0, #0
   14ddc:	mov	r2, #5
   14de0:	movt	r1, #2
   14de4:	bl	11ca8 <dcgettext@plt>
   14de8:	ldr	r1, [sp, #76]	; 0x4c
   14dec:	ldr	r5, [r7]
   14df0:	mov	r4, r0
   14df4:	mov	r0, #4
   14df8:	bl	27968 <_obstack_memory_used@@Base+0x1b14>
   14dfc:	mov	r3, r0
   14e00:	mov	r0, #0
   14e04:	mov	r1, r5
   14e08:	mov	r2, r4
   14e0c:	bl	11da4 <error@plt>
   14e10:	ldr	r1, [sp, #68]	; 0x44
   14e14:	movw	r5, #4688	; 0x1250
   14e18:	mov	r0, #2
   14e1c:	movt	r5, #4
   14e20:	cmp	r1, #0
   14e24:	beq	14fd0 <__assert_fail@plt+0x2f44>
   14e28:	str	r0, [r5, #28]
   14e2c:	b	14fdc <__assert_fail@plt+0x2f50>
   14e30:	movw	r4, #4936	; 0x1348
   14e34:	movt	r4, #4
   14e38:	ldr	r0, [r4, #12]
   14e3c:	ldr	r1, [r4, #16]
   14e40:	sub	r1, r1, r0
   14e44:	cmp	r1, #15
   14e48:	bhi	14e5c <__assert_fail@plt+0x2dd0>
   14e4c:	mov	r0, r4
   14e50:	mov	r1, #16
   14e54:	bl	25c0c <_obstack_newchunk@@Base>
   14e58:	ldr	r0, [r4, #12]
   14e5c:	add	r1, r0, #16
   14e60:	str	r1, [r4, #12]
   14e64:	str	r9, [r0, #4]
   14e68:	movw	r9, #4816	; 0x12d0
   14e6c:	str	sl, [r0]
   14e70:	str	r5, [r0, #12]
   14e74:	movw	r5, #4688	; 0x1250
   14e78:	str	r6, [r0, #8]
   14e7c:	movt	r9, #4
   14e80:	movt	r5, #4
   14e84:	mov	r8, r9
   14e88:	bl	15b40 <__assert_fail@plt+0x3ab4>
   14e8c:	ldrb	r0, [r5, #6]
   14e90:	movw	sl, #780	; 0x30c
   14e94:	movt	sl, #4
   14e98:	cmp	r0, #0
   14e9c:	bne	14eac <__assert_fail@plt+0x2e20>
   14ea0:	ldrb	r0, [r5]
   14ea4:	cmp	r0, #0
   14ea8:	beq	150e4 <__assert_fail@plt+0x3058>
   14eac:	ldrb	r0, [r5, #24]
   14eb0:	cmp	r0, #1
   14eb4:	bne	14eec <__assert_fail@plt+0x2e60>
   14eb8:	ldrd	r0, [r8, #80]	; 0x50
   14ebc:	adds	r0, r0, #1
   14ec0:	adc	r1, r1, #0
   14ec4:	strd	r0, [r8, #80]	; 0x50
   14ec8:	ldr	r0, [sl]
   14ecc:	ldr	r1, [r0, #20]
   14ed0:	ldr	r2, [r0, #24]
   14ed4:	cmp	r1, r2
   14ed8:	bcs	15580 <__assert_fail@plt+0x34f4>
   14edc:	add	r2, r1, #1
   14ee0:	str	r2, [r0, #20]
   14ee4:	mov	r0, #10
   14ee8:	strb	r0, [r1]
   14eec:	mov	r0, #1
   14ef0:	strb	r0, [r5, #24]
   14ef4:	ldrb	r0, [r5, #11]
   14ef8:	cmp	r0, #0
   14efc:	beq	14f54 <__assert_fail@plt+0x2ec8>
   14f00:	ldrd	r0, [r8, #80]	; 0x50
   14f04:	ldr	r4, [sl]
   14f08:	adds	r0, r0, #2
   14f0c:	adc	r1, r1, #0
   14f10:	strd	r0, [r8, #80]	; 0x50
   14f14:	ldr	r0, [r4, #20]
   14f18:	ldr	r1, [r4, #24]
   14f1c:	cmp	r0, r1
   14f20:	bcs	15014 <__assert_fail@plt+0x2f88>
   14f24:	add	r1, r0, #1
   14f28:	str	r1, [r4, #20]
   14f2c:	mov	r1, #32
   14f30:	strb	r1, [r0]
   14f34:	ldr	r0, [r4, #20]
   14f38:	ldr	r1, [r4, #24]
   14f3c:	cmp	r0, r1
   14f40:	bcs	1502c <__assert_fail@plt+0x2fa0>
   14f44:	add	r1, r0, #1
   14f48:	str	r1, [r4, #20]
   14f4c:	mov	r1, #32
   14f50:	strb	r1, [r0]
   14f54:	ldrb	r0, [r5, #12]
   14f58:	cmp	r0, #0
   14f5c:	beq	15044 <__assert_fail@plt+0x2fb8>
   14f60:	ldr	r9, [sp, #76]	; 0x4c
   14f64:	mov	r1, #2
   14f68:	mov	r0, r9
   14f6c:	bl	1f3d0 <__assert_fail@plt+0xd344>
   14f70:	mov	r4, r0
   14f74:	cmp	r0, #0
   14f78:	bne	1504c <__assert_fail@plt+0x2fc0>
   14f7c:	movw	r1, #54336	; 0xd440
   14f80:	mov	r0, #0
   14f84:	mov	r2, #5
   14f88:	movt	r1, #2
   14f8c:	bl	11ca8 <dcgettext@plt>
   14f90:	ldr	r6, [r7]
   14f94:	mov	r4, r0
   14f98:	mov	r0, #4
   14f9c:	mov	r1, r9
   14fa0:	bl	27968 <_obstack_memory_used@@Base+0x1b14>
   14fa4:	mov	r3, r0
   14fa8:	mov	r0, #0
   14fac:	mov	r1, r6
   14fb0:	mov	r2, r4
   14fb4:	bl	11da4 <error@plt>
   14fb8:	ldr	r0, [sp, #68]	; 0x44
   14fbc:	cmp	r0, #0
   14fc0:	beq	14fe8 <__assert_fail@plt+0x2f5c>
   14fc4:	mov	r0, #2
   14fc8:	str	r0, [r5, #28]
   14fcc:	b	14ff4 <__assert_fail@plt+0x2f68>
   14fd0:	ldr	r0, [r5, #28]
   14fd4:	cmp	r0, #0
   14fd8:	beq	15004 <__assert_fail@plt+0x2f78>
   14fdc:	ldr	r0, [sp, #72]	; 0x48
   14fe0:	bl	12044 <closedir@plt>
   14fe4:	b	14b50 <__assert_fail@plt+0x2ac4>
   14fe8:	ldr	r0, [r5, #28]
   14fec:	cmp	r0, #0
   14ff0:	beq	1500c <__assert_fail@plt+0x2f80>
   14ff4:	movw	sl, #780	; 0x30c
   14ff8:	mov	r4, #0
   14ffc:	movt	sl, #4
   15000:	b	15048 <__assert_fail@plt+0x2fbc>
   15004:	mov	r0, #1
   15008:	b	14e28 <__assert_fail@plt+0x2d9c>
   1500c:	mov	r0, #1
   15010:	b	14fc8 <__assert_fail@plt+0x2f3c>
   15014:	mov	r0, r4
   15018:	mov	r1, #32
   1501c:	bl	11f54 <__overflow@plt>
   15020:	cmn	r0, #1
   15024:	bne	14f34 <__assert_fail@plt+0x2ea8>
   15028:	b	14f54 <__assert_fail@plt+0x2ec8>
   1502c:	mov	r0, r4
   15030:	mov	r1, #32
   15034:	bl	11f54 <__overflow@plt>
   15038:	ldrb	r0, [r5, #12]
   1503c:	cmp	r0, #0
   15040:	bne	14f60 <__assert_fail@plt+0x2ed4>
   15044:	mov	r4, #0
   15048:	ldr	r9, [sp, #76]	; 0x4c
   1504c:	mov	r0, #1
   15050:	ldr	r1, [r5, #120]	; 0x78
   15054:	mvn	r2, #0
   15058:	mov	r3, #0
   1505c:	str	r0, [sp]
   15060:	movw	r0, #792	; 0x318
   15064:	movt	r0, #4
   15068:	stmib	sp, {r0, r4}
   1506c:	ldr	r0, [sp, #64]	; 0x40
   15070:	cmp	r0, #0
   15074:	moveq	r0, r9
   15078:	bl	1a19c <__assert_fail@plt+0x8110>
   1507c:	mov	r0, r4
   15080:	bl	2056c <__assert_fail@plt+0xe4e0>
   15084:	movw	r0, #4816	; 0x12d0
   15088:	ldr	r4, [sl]
   1508c:	movt	r0, #4
   15090:	mov	r2, r0
   15094:	ldrd	r0, [r0, #80]	; 0x50
   15098:	adds	r0, r0, #2
   1509c:	adc	r1, r1, #0
   150a0:	strd	r0, [r2, #80]	; 0x50
   150a4:	ldr	r0, [r4, #20]
   150a8:	ldr	r1, [r4, #24]
   150ac:	cmp	r0, r1
   150b0:	bcs	15530 <__assert_fail@plt+0x34a4>
   150b4:	add	r1, r0, #1
   150b8:	str	r1, [r4, #20]
   150bc:	mov	r1, #58	; 0x3a
   150c0:	strb	r1, [r0]
   150c4:	ldr	r0, [r4, #20]
   150c8:	ldr	r1, [r4, #24]
   150cc:	cmp	r0, r1
   150d0:	bcs	15548 <__assert_fail@plt+0x34bc>
   150d4:	add	r1, r0, #1
   150d8:	str	r1, [r4, #20]
   150dc:	mov	r1, #10
   150e0:	strb	r1, [r0]
   150e4:	ldr	r6, [sp, #72]	; 0x48
   150e8:	mov	sl, #0
   150ec:	mov	r8, #0
   150f0:	b	1512c <__assert_fail@plt+0x30a0>
   150f4:	ldr	r3, [sp, #76]	; 0x4c
   150f8:	mov	r0, r9
   150fc:	mov	r2, #0
   15100:	bl	15bf4 <__assert_fail@plt+0x3b68>
   15104:	movw	r5, #4688	; 0x1250
   15108:	adds	sl, r0, sl
   1510c:	movt	r5, #4
   15110:	adc	r8, r1, r8
   15114:	ldr	r0, [r5, #40]	; 0x28
   15118:	cmp	r0, #1
   1511c:	ldreq	r0, [r5, #60]	; 0x3c
   15120:	cmpeq	r0, #6
   15124:	beq	152d4 <__assert_fail@plt+0x3248>
   15128:	bl	1a6a8 <__assert_fail@plt+0x861c>
   1512c:	mov	r0, #0
   15130:	str	r0, [r7]
   15134:	mov	r0, r6
   15138:	bl	11fc0 <readdir64@plt>
   1513c:	cmp	r0, #0
   15140:	beq	15230 <__assert_fail@plt+0x31a4>
   15144:	mov	r4, r0
   15148:	add	r9, r0, #19
   1514c:	ldr	r0, [r5, #92]	; 0x5c
   15150:	cmp	r0, #2
   15154:	beq	151cc <__assert_fail@plt+0x3140>
   15158:	ldrb	r1, [r9]
   1515c:	cmp	r1, #46	; 0x2e
   15160:	bne	1518c <__assert_fail@plt+0x3100>
   15164:	cmp	r0, #0
   15168:	beq	152a4 <__assert_fail@plt+0x3218>
   1516c:	ldrb	r1, [r4, #20]
   15170:	cmp	r1, #46	; 0x2e
   15174:	mov	r1, #1
   15178:	movweq	r1, #2
   1517c:	add	r1, r4, r1
   15180:	ldrb	r1, [r1, #19]
   15184:	cmp	r1, #0
   15188:	beq	152a4 <__assert_fail@plt+0x3218>
   1518c:	cmp	r0, #0
   15190:	bne	151cc <__assert_fail@plt+0x3140>
   15194:	movw	r0, #4688	; 0x1250
   15198:	movt	r0, #4
   1519c:	ldr	r5, [r0, #108]	; 0x6c
   151a0:	cmp	r5, #0
   151a4:	beq	151cc <__assert_fail@plt+0x3140>
   151a8:	ldr	r0, [r5]
   151ac:	mov	r1, r9
   151b0:	mov	r2, #4
   151b4:	bl	11dc8 <fnmatch@plt>
   151b8:	cmp	r0, #0
   151bc:	beq	152a4 <__assert_fail@plt+0x3218>
   151c0:	ldr	r5, [r5, #4]
   151c4:	cmp	r5, #0
   151c8:	bne	151a8 <__assert_fail@plt+0x311c>
   151cc:	movw	r0, #4816	; 0x12d0
   151d0:	movt	r0, #4
   151d4:	ldr	r5, [r0]
   151d8:	cmp	r5, #0
   151dc:	beq	15204 <__assert_fail@plt+0x3178>
   151e0:	ldr	r0, [r5]
   151e4:	mov	r1, r9
   151e8:	mov	r2, #4
   151ec:	bl	11dc8 <fnmatch@plt>
   151f0:	cmp	r0, #0
   151f4:	beq	152a4 <__assert_fail@plt+0x3218>
   151f8:	ldr	r5, [r5, #4]
   151fc:	cmp	r5, #0
   15200:	bne	151e0 <__assert_fail@plt+0x3154>
   15204:	ldrb	r0, [r4, #18]
   15208:	mov	r1, #0
   1520c:	sub	r0, r0, #1
   15210:	uxtb	r2, r0
   15214:	cmp	r2, #13
   15218:	bhi	150f4 <__assert_fail@plt+0x3068>
   1521c:	movw	r1, #60928	; 0xee00
   15220:	sxtb	r0, r0
   15224:	movt	r1, #2
   15228:	ldr	r1, [r1, r0, lsl #2]
   1522c:	b	150f4 <__assert_fail@plt+0x3068>
   15230:	ldr	r0, [r7]
   15234:	ldr	r6, [sp, #68]	; 0x44
   15238:	cmp	r0, #0
   1523c:	beq	15314 <__assert_fail@plt+0x3288>
   15240:	movw	r1, #54360	; 0xd458
   15244:	mov	r0, #0
   15248:	mov	r2, #5
   1524c:	movt	r1, #2
   15250:	bl	11ca8 <dcgettext@plt>
   15254:	ldr	r1, [sp, #76]	; 0x4c
   15258:	ldr	r5, [r7]
   1525c:	mov	r4, r0
   15260:	mov	r0, #4
   15264:	bl	27968 <_obstack_memory_used@@Base+0x1b14>
   15268:	mov	r3, r0
   1526c:	mov	r1, r5
   15270:	movw	r5, #4688	; 0x1250
   15274:	mov	r0, #0
   15278:	mov	r2, r4
   1527c:	movt	r5, #4
   15280:	bl	11da4 <error@plt>
   15284:	mov	r0, #2
   15288:	cmp	r6, #0
   1528c:	beq	152b4 <__assert_fail@plt+0x3228>
   15290:	str	r0, [r5, #28]
   15294:	ldr	r0, [r7]
   15298:	cmp	r0, #75	; 0x4b
   1529c:	beq	152cc <__assert_fail@plt+0x3240>
   152a0:	b	15314 <__assert_fail@plt+0x3288>
   152a4:	movw	r5, #4688	; 0x1250
   152a8:	movt	r5, #4
   152ac:	bl	1a6a8 <__assert_fail@plt+0x861c>
   152b0:	b	1512c <__assert_fail@plt+0x30a0>
   152b4:	ldr	r0, [r5, #28]
   152b8:	cmp	r0, #0
   152bc:	beq	15300 <__assert_fail@plt+0x3274>
   152c0:	ldr	r0, [r7]
   152c4:	cmp	r0, #75	; 0x4b
   152c8:	bne	15314 <__assert_fail@plt+0x3288>
   152cc:	ldr	r6, [sp, #72]	; 0x48
   152d0:	b	15128 <__assert_fail@plt+0x309c>
   152d4:	ldrb	r0, [r5, #8]
   152d8:	cmp	r0, #0
   152dc:	bne	15128 <__assert_fail@plt+0x309c>
   152e0:	ldrb	r0, [r5, #6]
   152e4:	cmp	r0, #0
   152e8:	bne	15128 <__assert_fail@plt+0x309c>
   152ec:	bl	16d90 <__assert_fail@plt+0x4d04>
   152f0:	bl	17538 <__assert_fail@plt+0x54ac>
   152f4:	bl	15b40 <__assert_fail@plt+0x3ab4>
   152f8:	bl	1a6a8 <__assert_fail@plt+0x861c>
   152fc:	b	1512c <__assert_fail@plt+0x30a0>
   15300:	mov	r0, #1
   15304:	str	r0, [r5, #28]
   15308:	ldr	r0, [r7]
   1530c:	cmp	r0, #75	; 0x4b
   15310:	beq	152cc <__assert_fail@plt+0x3240>
   15314:	ldr	r0, [sp, #72]	; 0x48
   15318:	bl	12044 <closedir@plt>
   1531c:	ldr	r9, [sp, #76]	; 0x4c
   15320:	cmp	r0, #0
   15324:	beq	1538c <__assert_fail@plt+0x3300>
   15328:	movw	r1, #54381	; 0xd46d
   1532c:	mov	r0, #0
   15330:	mov	r2, #5
   15334:	movt	r1, #2
   15338:	bl	11ca8 <dcgettext@plt>
   1533c:	ldr	r5, [r7]
   15340:	mov	r4, r0
   15344:	mov	r0, #4
   15348:	mov	r1, r9
   1534c:	bl	27968 <_obstack_memory_used@@Base+0x1b14>
   15350:	mov	r3, r0
   15354:	mov	r0, #0
   15358:	mov	r1, r5
   1535c:	mov	r2, r4
   15360:	bl	11da4 <error@plt>
   15364:	movw	r5, #4688	; 0x1250
   15368:	cmp	r6, #0
   1536c:	movt	r5, #4
   15370:	beq	15380 <__assert_fail@plt+0x32f4>
   15374:	mov	r0, #2
   15378:	str	r0, [r5, #28]
   1537c:	b	1538c <__assert_fail@plt+0x3300>
   15380:	ldr	r0, [r5, #28]
   15384:	cmp	r0, #0
   15388:	beq	15528 <__assert_fail@plt+0x349c>
   1538c:	bl	16d90 <__assert_fail@plt+0x4d04>
   15390:	ldrb	r0, [r5, #6]
   15394:	cmp	r0, #1
   15398:	moveq	r0, r9
   1539c:	moveq	r1, #0
   153a0:	bleq	17180 <__assert_fail@plt+0x50f4>
   153a4:	ldr	r0, [r5, #40]	; 0x28
   153a8:	cmp	r0, #0
   153ac:	beq	153bc <__assert_fail@plt+0x3330>
   153b0:	ldrb	r0, [r5, #8]
   153b4:	cmp	r0, #1
   153b8:	bne	154fc <__assert_fail@plt+0x3470>
   153bc:	movw	r0, #4816	; 0x12d0
   153c0:	mov	r2, #512	; 0x200
   153c4:	ldr	r3, [r5, #100]	; 0x64
   153c8:	movt	r0, #4
   153cc:	str	r2, [sp]
   153d0:	mov	r2, #0
   153d4:	str	r2, [sp, #4]
   153d8:	ldr	r2, [sp, #52]	; 0x34
   153dc:	mov	r7, r0
   153e0:	ldrd	r0, [r0, #88]	; 0x58
   153e4:	str	r0, [sp, #8]
   153e8:	str	r1, [sp, #12]
   153ec:	mov	r0, sl
   153f0:	mov	r1, r8
   153f4:	bl	21b38 <__assert_fail@plt+0xfaac>
   153f8:	mov	r4, r0
   153fc:	bl	11eac <strlen@plt>
   15400:	mov	r2, r5
   15404:	mov	r5, r4
   15408:	mov	r1, #32
   1540c:	movw	r8, #780	; 0x30c
   15410:	strb	r1, [r5, #-1]!
   15414:	movt	r8, #4
   15418:	ldrb	r1, [r2, #20]
   1541c:	cmp	r1, #0
   15420:	mov	r1, #10
   15424:	movwne	r1, #0
   15428:	strb	r1, [r4, r0]!
   1542c:	ldrb	r0, [r2, #11]
   15430:	cmp	r0, #0
   15434:	beq	1548c <__assert_fail@plt+0x3400>
   15438:	ldrd	r0, [r7, #80]	; 0x50
   1543c:	ldr	r6, [r8]
   15440:	adds	r0, r0, #2
   15444:	adc	r1, r1, #0
   15448:	strd	r0, [r7, #80]	; 0x50
   1544c:	ldr	r0, [r6, #20]
   15450:	ldr	r1, [r6, #24]
   15454:	cmp	r0, r1
   15458:	bcs	15558 <__assert_fail@plt+0x34cc>
   1545c:	add	r1, r0, #1
   15460:	str	r1, [r6, #20]
   15464:	mov	r1, #32
   15468:	strb	r1, [r0]
   1546c:	ldr	r0, [r6, #20]
   15470:	ldr	r1, [r6, #24]
   15474:	cmp	r0, r1
   15478:	bcs	15570 <__assert_fail@plt+0x34e4>
   1547c:	add	r1, r0, #1
   15480:	str	r1, [r6, #20]
   15484:	mov	r1, #32
   15488:	strb	r1, [r0]
   1548c:	movw	r1, #54402	; 0xd482
   15490:	mov	r0, #0
   15494:	mov	r2, #5
   15498:	add	r6, r4, #1
   1549c:	movt	r1, #2
   154a0:	bl	11ca8 <dcgettext@plt>
   154a4:	mov	r4, r0
   154a8:	bl	11eac <strlen@plt>
   154ac:	mov	r2, r0
   154b0:	ldrd	r0, [r7, #80]	; 0x50
   154b4:	ldr	r3, [r8]
   154b8:	adds	r0, r0, r2
   154bc:	adc	r1, r1, #0
   154c0:	strd	r0, [r7, #80]	; 0x50
   154c4:	mov	r0, r4
   154c8:	mov	r1, #1
   154cc:	bl	11c90 <fwrite_unlocked@plt>
   154d0:	ldrd	r0, [r7, #80]	; 0x50
   154d4:	sub	r2, r6, r5
   154d8:	ldr	r3, [r8]
   154dc:	adds	r0, r0, r2
   154e0:	adc	r1, r1, #0
   154e4:	strd	r0, [r7, #80]	; 0x50
   154e8:	mov	r0, r5
   154ec:	mov	r1, #1
   154f0:	bl	11c90 <fwrite_unlocked@plt>
   154f4:	movw	r5, #4688	; 0x1250
   154f8:	movt	r5, #4
   154fc:	ldr	r0, [r5, #76]	; 0x4c
   15500:	movw	r9, #4816	; 0x12d0
   15504:	movw	sl, #4936	; 0x1348
   15508:	ldr	r6, [sp, #60]	; 0x3c
   1550c:	movt	r9, #4
   15510:	movt	sl, #4
   15514:	mov	r8, r9
   15518:	mov	r9, sl
   1551c:	cmp	r0, #0
   15520:	blne	17538 <__assert_fail@plt+0x54ac>
   15524:	b	14b50 <__assert_fail@plt+0x2ac4>
   15528:	mov	r0, #1
   1552c:	b	15378 <__assert_fail@plt+0x32ec>
   15530:	mov	r0, r4
   15534:	mov	r1, #58	; 0x3a
   15538:	bl	11f54 <__overflow@plt>
   1553c:	cmn	r0, #1
   15540:	bne	150c4 <__assert_fail@plt+0x3038>
   15544:	b	150e4 <__assert_fail@plt+0x3058>
   15548:	mov	r0, r4
   1554c:	mov	r1, #10
   15550:	bl	11f54 <__overflow@plt>
   15554:	b	150e4 <__assert_fail@plt+0x3058>
   15558:	mov	r0, r6
   1555c:	mov	r1, #32
   15560:	bl	11f54 <__overflow@plt>
   15564:	cmn	r0, #1
   15568:	bne	1546c <__assert_fail@plt+0x33e0>
   1556c:	b	1548c <__assert_fail@plt+0x3400>
   15570:	mov	r0, r6
   15574:	mov	r1, #32
   15578:	bl	11f54 <__overflow@plt>
   1557c:	b	1548c <__assert_fail@plt+0x3400>
   15580:	mov	r1, #10
   15584:	bl	11f54 <__overflow@plt>
   15588:	b	14eec <__assert_fail@plt+0x2e60>
   1558c:	mov	r1, #10
   15590:	bl	11f54 <__overflow@plt>
   15594:	ldr	r6, [r5, #32]
   15598:	cmp	r6, #0
   1559c:	bne	14b1c <__assert_fail@plt+0x2a90>
   155a0:	ldrb	r0, [r5, #1]
   155a4:	cmp	r0, #0
   155a8:	beq	15644 <__assert_fail@plt+0x35b8>
   155ac:	ldrb	r0, [r5, #13]
   155b0:	cmp	r0, #1
   155b4:	bne	15644 <__assert_fail@plt+0x35b8>
   155b8:	movw	r4, #456	; 0x1c8
   155bc:	movt	r4, #4
   155c0:	ldr	r0, [r4]
   155c4:	cmp	r0, #2
   155c8:	bne	155f0 <__assert_fail@plt+0x3564>
   155cc:	ldr	r0, [r4, #4]
   155d0:	movw	r1, #45245	; 0xb0bd
   155d4:	mov	r2, #2
   155d8:	movt	r1, #2
   155dc:	bl	11e94 <bcmp@plt>
   155e0:	cmp	r0, #0
   155e4:	ldreq	r0, [r4, #8]
   155e8:	cmpeq	r0, #1
   155ec:	beq	15848 <__assert_fail@plt+0x37bc>
   155f0:	mov	r0, r4
   155f4:	bl	19174 <__assert_fail@plt+0x70e8>
   155f8:	add	r0, r4, #8
   155fc:	bl	19174 <__assert_fail@plt+0x70e8>
   15600:	movw	r0, #780	; 0x30c
   15604:	movt	r0, #4
   15608:	ldr	r0, [r0]
   1560c:	bl	11d08 <fflush_unlocked@plt>
   15610:	mov	r0, #0
   15614:	bl	19204 <__assert_fail@plt+0x7178>
   15618:	ldr	r4, [r5, #80]	; 0x50
   1561c:	cmp	r4, #0
   15620:	beq	15634 <__assert_fail@plt+0x35a8>
   15624:	mov	r0, #19
   15628:	bl	11bac <raise@plt>
   1562c:	subs	r4, r4, #1
   15630:	bne	15624 <__assert_fail@plt+0x3598>
   15634:	ldr	r0, [r5, #84]	; 0x54
   15638:	cmp	r0, #0
   1563c:	beq	15644 <__assert_fail@plt+0x35b8>
   15640:	bl	11bac <raise@plt>
   15644:	ldrb	r0, [r5, #11]
   15648:	cmp	r0, #0
   1564c:	beq	15818 <__assert_fail@plt+0x378c>
   15650:	ldr	r6, [r9, #52]	; 0x34
   15654:	ldr	r0, [r9, #56]	; 0x38
   15658:	mov	r8, #0
   1565c:	sub	r1, r0, r6
   15660:	cmp	r8, r1, lsr #3
   15664:	beq	15714 <__assert_fail@plt+0x3688>
   15668:	cmp	r0, r6
   1566c:	bne	1567c <__assert_fail@plt+0x35f0>
   15670:	ldrb	r2, [r9, #84]	; 0x54
   15674:	orr	r2, r2, #2
   15678:	strb	r2, [r9, #84]	; 0x54
   1567c:	ldr	r3, [r9, #68]	; 0x44
   15680:	lsr	r7, r1, #3
   15684:	ldr	r1, [r9, #48]	; 0x30
   15688:	ldr	r2, [r9, #60]	; 0x3c
   1568c:	movw	r5, #780	; 0x30c
   15690:	movt	r5, #4
   15694:	add	r0, r3, r0
   15698:	bic	r0, r0, r3
   1569c:	sub	r3, r0, r1
   156a0:	sub	r1, r2, r1
   156a4:	cmp	r3, r1
   156a8:	ldr	r1, [r5]
   156ac:	movhi	r0, r2
   156b0:	str	r0, [r9, #52]	; 0x34
   156b4:	str	r0, [r9, #56]	; 0x38
   156b8:	movw	r0, #45248	; 0xb0c0
   156bc:	movt	r0, #2
   156c0:	bl	11b94 <fputs_unlocked@plt>
   156c4:	movw	r4, #52801	; 0xce41
   156c8:	movt	r4, #2
   156cc:	ldrd	r2, [r6]
   156d0:	mov	r0, #1
   156d4:	mov	r1, r4
   156d8:	bl	11f00 <__printf_chk@plt>
   156dc:	add	r6, r6, #8
   156e0:	subs	r7, r7, #1
   156e4:	bne	156cc <__assert_fail@plt+0x3640>
   156e8:	ldr	r0, [r5]
   156ec:	ldr	r1, [r0, #20]
   156f0:	ldr	r2, [r0, #24]
   156f4:	cmp	r1, r2
   156f8:	bcs	1585c <__assert_fail@plt+0x37d0>
   156fc:	add	r2, r1, #1
   15700:	str	r2, [r0, #20]
   15704:	mov	r0, #10
   15708:	strb	r0, [r1]
   1570c:	movw	r5, #4688	; 0x1250
   15710:	movt	r5, #4
   15714:	movw	r0, #792	; 0x318
   15718:	movt	r0, #4
   1571c:	ldr	r6, [r0, #8]
   15720:	ldr	r0, [r0, #12]
   15724:	sub	r1, r0, r6
   15728:	cmp	r8, r1, lsr #3
   1572c:	beq	157f4 <__assert_fail@plt+0x3768>
   15730:	cmp	r0, r6
   15734:	bne	15750 <__assert_fail@plt+0x36c4>
   15738:	movw	r2, #792	; 0x318
   1573c:	movt	r2, #4
   15740:	mov	r3, r2
   15744:	ldrb	r2, [r2, #40]	; 0x28
   15748:	orr	r2, r2, #2
   1574c:	strb	r2, [r3, #40]	; 0x28
   15750:	lsr	r5, r1, #3
   15754:	movw	r1, #792	; 0x318
   15758:	movt	r1, #4
   1575c:	mov	r7, r1
   15760:	ldr	r1, [r1, #4]
   15764:	ldr	r3, [r7, #24]
   15768:	ldr	r2, [r7, #16]
   1576c:	add	r0, r3, r0
   15770:	bic	r0, r0, r3
   15774:	sub	r3, r0, r1
   15778:	sub	r1, r2, r1
   1577c:	cmp	r3, r1
   15780:	movhi	r0, r2
   15784:	str	r0, [r7, #8]
   15788:	str	r0, [r7, #12]
   1578c:	movw	r7, #780	; 0x30c
   15790:	movw	r0, #45258	; 0xb0ca
   15794:	movt	r7, #4
   15798:	movt	r0, #2
   1579c:	ldr	r1, [r7]
   157a0:	bl	11b94 <fputs_unlocked@plt>
   157a4:	movw	r4, #52801	; 0xce41
   157a8:	movt	r4, #2
   157ac:	ldrd	r2, [r6]
   157b0:	mov	r0, #1
   157b4:	mov	r1, r4
   157b8:	bl	11f00 <__printf_chk@plt>
   157bc:	add	r6, r6, #8
   157c0:	subs	r5, r5, #1
   157c4:	bne	157ac <__assert_fail@plt+0x3720>
   157c8:	ldr	r0, [r7]
   157cc:	movw	r5, #4688	; 0x1250
   157d0:	movt	r5, #4
   157d4:	ldr	r1, [r0, #20]
   157d8:	ldr	r2, [r0, #24]
   157dc:	cmp	r1, r2
   157e0:	bcs	15868 <__assert_fail@plt+0x37dc>
   157e4:	add	r2, r1, #1
   157e8:	str	r2, [r0, #20]
   157ec:	mov	r0, #10
   157f0:	strb	r0, [r1]
   157f4:	ldr	r0, [r5, #88]	; 0x58
   157f8:	bl	25fcc <_obstack_memory_used@@Base+0x178>
   157fc:	movw	r1, #61588	; 0xf094
   15800:	movt	r1, #2
   15804:	ldr	r2, [r1, r0, lsl #2]
   15808:	movw	r1, #45271	; 0xb0d7
   1580c:	mov	r0, #1
   15810:	movt	r1, #2
   15814:	bl	11f00 <__printf_chk@plt>
   15818:	ldr	r4, [r5, #52]	; 0x34
   1581c:	cmp	r4, #0
   15820:	beq	1583c <__assert_fail@plt+0x37b0>
   15824:	mov	r0, r4
   15828:	bl	20638 <__assert_fail@plt+0xe5ac>
   1582c:	cmp	r0, #0
   15830:	bne	159c0 <__assert_fail@plt+0x3934>
   15834:	mov	r0, r4
   15838:	bl	20e38 <__assert_fail@plt+0xedac>
   1583c:	ldr	r0, [r5, #28]
   15840:	sub	sp, fp, #28
   15844:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15848:	ldr	r0, [r4, #12]
   1584c:	ldrb	r0, [r0]
   15850:	cmp	r0, #109	; 0x6d
   15854:	bne	155f0 <__assert_fail@plt+0x3564>
   15858:	b	15600 <__assert_fail@plt+0x3574>
   1585c:	mov	r1, #10
   15860:	bl	11f54 <__overflow@plt>
   15864:	b	1570c <__assert_fail@plt+0x3680>
   15868:	mov	r1, #10
   1586c:	bl	11f54 <__overflow@plt>
   15870:	b	157f4 <__assert_fail@plt+0x3768>
   15874:	mov	r0, #2
   15878:	bl	18bf4 <__assert_fail@plt+0x6b68>
   1587c:	movw	r1, #672	; 0x2a0
   15880:	movw	r0, #676	; 0x2a4
   15884:	movw	r6, #53009	; 0xcf11
   15888:	movw	r7, #53029	; 0xcf25
   1588c:	movt	r1, #4
   15890:	movt	r0, #4
   15894:	movt	r6, #2
   15898:	movt	r7, #2
   1589c:	ldr	r2, [r1]
   158a0:	ldr	r3, [r0]
   158a4:	movw	r0, #780	; 0x30c
   158a8:	mov	r1, #0
   158ac:	stm	sp, {r6, r7}
   158b0:	movw	r7, #52635	; 0xcd9b
   158b4:	movt	r0, #4
   158b8:	str	r1, [sp, #8]
   158bc:	movw	r1, #53653	; 0xd195
   158c0:	movt	r7, #2
   158c4:	movt	r1, #2
   158c8:	ldr	r0, [r0]
   158cc:	cmp	r2, #2
   158d0:	moveq	r7, r1
   158d4:	cmp	r2, #1
   158d8:	movw	r2, #52995	; 0xcf03
   158dc:	movw	r1, #53006	; 0xcf0e
   158e0:	movt	r2, #2
   158e4:	movt	r1, #2
   158e8:	movne	r1, r7
   158ec:	bl	28e5c <_obstack_memory_used@@Base+0x3008>
   158f0:	mov	r0, #0
   158f4:	bl	11e7c <exit@plt>
   158f8:	mov	r0, #0
   158fc:	bl	18bf4 <__assert_fail@plt+0x6b68>
   15900:	movw	r0, #52643	; 0xcda3
   15904:	movw	r1, #45213	; 0xb09d
   15908:	movw	r3, #52698	; 0xcdda
   1590c:	movw	r2, #1053	; 0x41d
   15910:	movt	r0, #2
   15914:	movt	r1, #2
   15918:	movt	r3, #2
   1591c:	bl	1208c <__assert_fail@plt>
   15920:	movw	r0, #45207	; 0xb097
   15924:	movw	r1, #45213	; 0xb09d
   15928:	movw	r3, #45222	; 0xb0a6
   1592c:	movw	r2, #1805	; 0x70d
   15930:	movt	r0, #2
   15934:	movt	r1, #2
   15938:	movt	r3, #2
   1593c:	bl	1208c <__assert_fail@plt>
   15940:	bl	295cc <_obstack_memory_used@@Base+0x3778>
   15944:	ldr	r2, [r4]
   15948:	ldr	r1, [fp, #-44]	; 0xffffffd4
   1594c:	movw	r3, #55184	; 0xd790
   15950:	movt	r3, #2
   15954:	str	r2, [sp]
   15958:	mov	r2, #0
   1595c:	bl	2987c <_obstack_memory_used@@Base+0x3a28>
   15960:	movw	r1, #52858	; 0xce7a
   15964:	mov	r0, #0
   15968:	mov	r2, #5
   1596c:	movt	r1, #2
   15970:	bl	11ca8 <dcgettext@plt>
   15974:	mov	r4, r0
   15978:	ldr	r0, [r5]
   1597c:	bl	27e90 <_obstack_memory_used@@Base+0x203c>
   15980:	movw	r2, #52851	; 0xce73
   15984:	str	r0, [sp]
   15988:	mov	r0, #2
   1598c:	mov	r1, #0
   15990:	mov	r3, r4
   15994:	movt	r2, #2
   15998:	bl	11da4 <error@plt>
   1599c:	movw	r1, #53202	; 0xcfd2
   159a0:	mov	r0, #0
   159a4:	mov	r2, #5
   159a8:	movt	r1, #2
   159ac:	bl	11ca8 <dcgettext@plt>
   159b0:	mov	r2, r0
   159b4:	mov	r0, #2
   159b8:	mov	r1, #0
   159bc:	bl	11da4 <error@plt>
   159c0:	movw	r0, #45309	; 0xb0fd
   159c4:	movw	r1, #45213	; 0xb09d
   159c8:	movw	r3, #45222	; 0xb0a6
   159cc:	movw	r2, #1857	; 0x741
   159d0:	movt	r0, #2
   159d4:	movt	r1, #2
   159d8:	movt	r3, #2
   159dc:	bl	1208c <__assert_fail@plt>
   159e0:	movw	r0, #53278	; 0xd01e
   159e4:	mov	r1, r4
   159e8:	movt	r0, #2
   159ec:	bl	1ec0c <__assert_fail@plt+0xcb80>
   159f0:	movw	r1, #53289	; 0xd029
   159f4:	mov	r0, #0
   159f8:	mov	r2, #5
   159fc:	movt	r1, #2
   15a00:	bl	11ca8 <dcgettext@plt>
   15a04:	movw	r5, #776	; 0x308
   15a08:	movt	r5, #4
   15a0c:	ldr	r1, [r5]
   15a10:	bl	11b94 <fputs_unlocked@plt>
   15a14:	movw	r4, #53311	; 0xd03f
   15a18:	ldr	r0, [r5]
   15a1c:	movw	r3, #52932	; 0xcec4
   15a20:	mov	r1, #1
   15a24:	movt	r4, #2
   15a28:	movt	r3, #2
   15a2c:	mov	r2, r4
   15a30:	bl	11f24 <__fprintf_chk@plt>
   15a34:	ldr	r0, [r5]
   15a38:	movw	r3, #54043	; 0xd31b
   15a3c:	mov	r1, #1
   15a40:	mov	r2, r4
   15a44:	movt	r3, #2
   15a48:	bl	11f24 <__fprintf_chk@plt>
   15a4c:	ldr	r0, [r5]
   15a50:	movw	r3, #54048	; 0xd320
   15a54:	mov	r1, #1
   15a58:	mov	r2, r4
   15a5c:	movt	r3, #2
   15a60:	bl	11f24 <__fprintf_chk@plt>
   15a64:	ldr	r0, [r5]
   15a68:	movw	r3, #45197	; 0xb08d
   15a6c:	mov	r1, #1
   15a70:	mov	r2, r4
   15a74:	movt	r3, #2
   15a78:	bl	11f24 <__fprintf_chk@plt>
   15a7c:	movw	r1, #53327	; 0xd04f
   15a80:	mov	r0, #0
   15a84:	mov	r2, #5
   15a88:	movt	r1, #2
   15a8c:	bl	11ca8 <dcgettext@plt>
   15a90:	ldr	r1, [r5]
   15a94:	bl	11b94 <fputs_unlocked@plt>
   15a98:	mov	r0, #2
   15a9c:	bl	18bf4 <__assert_fail@plt+0x6b68>
   15aa0:	movw	r1, #53249	; 0xd001
   15aa4:	mov	r0, #0
   15aa8:	mov	r2, #5
   15aac:	movt	r1, #2
   15ab0:	bl	11ca8 <dcgettext@plt>
   15ab4:	mov	r4, r0
   15ab8:	mov	r0, r8
   15abc:	bl	27e90 <_obstack_memory_used@@Base+0x203c>
   15ac0:	mov	r3, r0
   15ac4:	mov	r0, #2
   15ac8:	mov	r1, #0
   15acc:	mov	r2, r4
   15ad0:	bl	11da4 <error@plt>
   15ad4:	push	{fp, lr}
   15ad8:	mov	fp, sp
   15adc:	mov	r2, r1
   15ae0:	ldrd	r0, [r0]
   15ae4:	mov	r3, #0
   15ae8:	bl	2ae3c <_obstack_memory_used@@Base+0x4fe8>
   15aec:	mov	r0, r2
   15af0:	pop	{fp, pc}
   15af4:	push	{r4, r5, fp, lr}
   15af8:	add	fp, sp, #8
   15afc:	ldrd	r2, [r1]
   15b00:	ldrd	r4, [r0]
   15b04:	eor	r3, r5, r3
   15b08:	eor	r2, r4, r2
   15b0c:	orrs	r2, r2, r3
   15b10:	mov	r2, #0
   15b14:	bne	15b34 <__assert_fail@plt+0x3aa8>
   15b18:	ldrd	r2, [r1, #8]
   15b1c:	ldrd	r0, [r0, #8]
   15b20:	eor	r1, r1, r3
   15b24:	eor	r0, r0, r2
   15b28:	orr	r0, r0, r1
   15b2c:	clz	r0, r0
   15b30:	lsr	r2, r0, #5
   15b34:	mov	r0, r2
   15b38:	pop	{r4, r5, fp, pc}
   15b3c:	b	2056c <__assert_fail@plt+0xe4e0>
   15b40:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   15b44:	add	fp, sp, #24
   15b48:	movw	r8, #4688	; 0x1250
   15b4c:	movw	r4, #4816	; 0x12d0
   15b50:	movt	r8, #4
   15b54:	movt	r4, #4
   15b58:	ldr	r0, [r8, #76]	; 0x4c
   15b5c:	cmp	r0, #0
   15b60:	beq	15bbc <__assert_fail@plt+0x3b30>
   15b64:	movw	r0, #648	; 0x288
   15b68:	mov	r6, #0
   15b6c:	movt	r0, #4
   15b70:	add	r7, r0, #1
   15b74:	b	15b88 <__assert_fail@plt+0x3afc>
   15b78:	ldr	r0, [r8, #76]	; 0x4c
   15b7c:	add	r6, r6, #1
   15b80:	cmp	r6, r0
   15b84:	bcs	15bbc <__assert_fail@plt+0x3b30>
   15b88:	ldr	r0, [r4, #12]
   15b8c:	ldr	r5, [r0, r6, lsl #2]
   15b90:	ldr	r0, [r5]
   15b94:	bl	2056c <__assert_fail@plt+0xe4e0>
   15b98:	ldr	r0, [r5, #4]
   15b9c:	bl	2056c <__assert_fail@plt+0xe4e0>
   15ba0:	ldr	r0, [r5, #8]
   15ba4:	bl	2056c <__assert_fail@plt+0xe4e0>
   15ba8:	ldr	r0, [r5, #128]	; 0x80
   15bac:	cmp	r0, r7
   15bb0:	beq	15b78 <__assert_fail@plt+0x3aec>
   15bb4:	bl	11ff0 <freecon@plt>
   15bb8:	b	15b78 <__assert_fail@plt+0x3aec>
   15bbc:	mov	r0, #0
   15bc0:	strh	r0, [r8, #25]
   15bc4:	str	r0, [r4, #48]	; 0x30
   15bc8:	str	r0, [r4, #52]	; 0x34
   15bcc:	str	r0, [r4, #16]
   15bd0:	str	r0, [r4, #20]
   15bd4:	str	r0, [r4, #24]
   15bd8:	str	r0, [r4, #28]
   15bdc:	str	r0, [r4, #32]
   15be0:	str	r0, [r4, #36]	; 0x24
   15be4:	str	r0, [r4, #40]	; 0x28
   15be8:	str	r0, [r8, #76]	; 0x4c
   15bec:	str	r0, [r4, #44]	; 0x2c
   15bf0:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   15bf4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   15bf8:	add	fp, sp, #28
   15bfc:	sub	sp, sp, #716	; 0x2cc
   15c00:	movw	r9, #4688	; 0x1250
   15c04:	mov	r5, r0
   15c08:	mov	r8, r3
   15c0c:	str	r2, [fp, #-720]	; 0xfffffd30
   15c10:	str	r1, [fp, #-724]	; 0xfffffd2c
   15c14:	movt	r9, #4
   15c18:	ldr	r0, [r9, #68]	; 0x44
   15c1c:	ldr	sl, [r9, #76]	; 0x4c
   15c20:	cmp	sl, r0
   15c24:	bne	15c54 <__assert_fail@plt+0x3bc8>
   15c28:	ldr	r0, [r9, #72]	; 0x48
   15c2c:	mov	r1, sl
   15c30:	mov	r2, #304	; 0x130
   15c34:	bl	29054 <_obstack_memory_used@@Base+0x3200>
   15c38:	str	r0, [r9, #72]	; 0x48
   15c3c:	mov	r6, r0
   15c40:	ldr	r0, [r9, #68]	; 0x44
   15c44:	ldr	sl, [r9, #76]	; 0x4c
   15c48:	lsl	r0, r0, #1
   15c4c:	str	r0, [r9, #68]	; 0x44
   15c50:	b	15c58 <__assert_fail@plt+0x3bcc>
   15c54:	ldr	r6, [r9, #72]	; 0x48
   15c58:	mov	r0, #152	; 0x98
   15c5c:	mov	r1, #0
   15c60:	mov	r2, #152	; 0x98
   15c64:	mla	r4, sl, r0, r6
   15c68:	mov	r0, r4
   15c6c:	bl	11ef4 <memset@plt>
   15c70:	mvn	r0, #0
   15c74:	mov	r7, r4
   15c78:	str	r4, [fp, #-728]	; 0xfffffd28
   15c7c:	str	r0, [r7, #144]!	; 0x90
   15c80:	ldr	r0, [fp, #-724]	; 0xfffffd2c
   15c84:	str	r0, [r4, #120]!	; 0x78
   15c88:	ldrb	r0, [r9, #25]
   15c8c:	str	r4, [fp, #-736]	; 0xfffffd20
   15c90:	cmp	r0, #0
   15c94:	bne	15d0c <__assert_fail@plt+0x3c80>
   15c98:	ldrb	r0, [r9, #22]
   15c9c:	cmp	r0, #0
   15ca0:	beq	15d0c <__assert_fail@plt+0x3c80>
   15ca4:	ldr	r0, [r9, #88]	; 0x58
   15ca8:	sub	sp, sp, #8
   15cac:	str	r0, [sp]
   15cb0:	sub	r0, fp, #688	; 0x2b0
   15cb4:	mov	r1, #2
   15cb8:	mov	r2, r5
   15cbc:	mvn	r3, #0
   15cc0:	bl	26090 <_obstack_memory_used@@Base+0x23c>
   15cc4:	add	sp, sp, #8
   15cc8:	mov	r4, r0
   15ccc:	ldrb	r0, [r5]
   15cd0:	ldrb	r1, [fp, #-688]	; 0xfffffd50
   15cd4:	cmp	r0, r1
   15cd8:	bne	15cfc <__assert_fail@plt+0x3c70>
   15cdc:	mov	r0, r5
   15ce0:	bl	11eac <strlen@plt>
   15ce4:	subs	r1, r0, r4
   15ce8:	movwne	r1, #1
   15cec:	cmp	r0, r4
   15cf0:	str	r1, [r7]
   15cf4:	bne	15d04 <__assert_fail@plt+0x3c78>
   15cf8:	b	15d0c <__assert_fail@plt+0x3c80>
   15cfc:	mov	r0, #1
   15d00:	str	r0, [r7]
   15d04:	mov	r0, #1
   15d08:	strb	r0, [r9, #25]
   15d0c:	str	r5, [fp, #-732]	; 0xfffffd24
   15d10:	ldrb	r0, [r9, #9]
   15d14:	ldrb	r5, [r9, #12]
   15d18:	str	r7, [fp, #-740]	; 0xfffffd1c
   15d1c:	str	r6, [fp, #-716]	; 0xfffffd34
   15d20:	orr	r0, r0, r5
   15d24:	tst	r0, #255	; 0xff
   15d28:	ldreq	r0, [fp, #-720]	; 0xfffffd30
   15d2c:	cmpeq	r0, #0
   15d30:	beq	15e78 <__assert_fail@plt+0x3dec>
   15d34:	ldr	r7, [fp, #-732]	; 0xfffffd24
   15d38:	ldrb	r0, [r7]
   15d3c:	mov	r4, r7
   15d40:	cmp	r0, #47	; 0x2f
   15d44:	beq	15df0 <__assert_fail@plt+0x3d64>
   15d48:	ldrb	r6, [r8]
   15d4c:	mov	r4, r7
   15d50:	cmp	r6, #0
   15d54:	beq	15df0 <__assert_fail@plt+0x3d64>
   15d58:	mov	r0, r7
   15d5c:	bl	11eac <strlen@plt>
   15d60:	mov	r4, r0
   15d64:	mov	r0, r8
   15d68:	bl	11eac <strlen@plt>
   15d6c:	add	r0, r4, r0
   15d70:	add	r0, r0, #9
   15d74:	bic	r0, r0, #7
   15d78:	sub	r4, sp, r0
   15d7c:	mov	sp, r4
   15d80:	cmp	r6, #46	; 0x2e
   15d84:	bne	15d98 <__assert_fail@plt+0x3d0c>
   15d88:	ldrb	r0, [r8, #1]
   15d8c:	cmp	r0, #0
   15d90:	mov	r0, r4
   15d94:	beq	15dc8 <__assert_fail@plt+0x3d3c>
   15d98:	mov	r1, r8
   15d9c:	mov	r0, r4
   15da0:	strb	r6, [r0], #1
   15da4:	ldrb	r6, [r1, #1]!
   15da8:	cmp	r6, #0
   15dac:	bne	15da0 <__assert_fail@plt+0x3d14>
   15db0:	cmp	r1, r8
   15db4:	bls	15dc8 <__assert_fail@plt+0x3d3c>
   15db8:	ldrb	r1, [r1, #-1]
   15dbc:	cmp	r1, #47	; 0x2f
   15dc0:	movne	r1, #47	; 0x2f
   15dc4:	strbne	r1, [r0], #1
   15dc8:	ldrb	r1, [r7]
   15dcc:	cmp	r1, #0
   15dd0:	beq	15de8 <__assert_fail@plt+0x3d5c>
   15dd4:	add	r2, r7, #1
   15dd8:	strb	r1, [r0], #1
   15ddc:	ldrb	r1, [r2], #1
   15de0:	cmp	r1, #0
   15de4:	bne	15dd8 <__assert_fail@plt+0x3d4c>
   15de8:	mov	r1, #0
   15dec:	strb	r1, [r0]
   15df0:	ldr	r7, [fp, #-716]	; 0xfffffd34
   15df4:	cmp	r5, #0
   15df8:	beq	15edc <__assert_fail@plt+0x3e50>
   15dfc:	mov	r0, #152	; 0x98
   15e00:	mov	r1, #2
   15e04:	mla	r5, sl, r0, r7
   15e08:	mov	r0, r4
   15e0c:	bl	1f3d0 <__assert_fail@plt+0xd344>
   15e10:	cmp	r0, #0
   15e14:	str	r0, [r5, #8]
   15e18:	bne	15edc <__assert_fail@plt+0x3e50>
   15e1c:	movw	r1, #54336	; 0xd440
   15e20:	mov	r0, #0
   15e24:	mov	r2, #5
   15e28:	movt	r1, #2
   15e2c:	bl	11ca8 <dcgettext@plt>
   15e30:	mov	r7, r0
   15e34:	bl	11ed0 <__errno_location@plt>
   15e38:	ldr	r5, [r0]
   15e3c:	mov	r0, #4
   15e40:	mov	r1, r4
   15e44:	bl	27968 <_obstack_memory_used@@Base+0x1b14>
   15e48:	mov	r3, r0
   15e4c:	mov	r0, #0
   15e50:	mov	r1, r5
   15e54:	mov	r2, r7
   15e58:	bl	11da4 <error@plt>
   15e5c:	ldr	r0, [fp, #-720]	; 0xfffffd30
   15e60:	cmp	r0, #0
   15e64:	beq	15ec8 <__assert_fail@plt+0x3e3c>
   15e68:	ldr	r7, [fp, #-716]	; 0xfffffd34
   15e6c:	mov	r0, #2
   15e70:	str	r0, [r9, #28]
   15e74:	b	15edc <__assert_fail@plt+0x3e50>
   15e78:	ldr	r0, [fp, #-724]	; 0xfffffd2c
   15e7c:	ldrb	r4, [r9, #1]
   15e80:	cmp	r0, #3
   15e84:	bne	16b90 <__assert_fail@plt+0x4b04>
   15e88:	cmp	r4, #0
   15e8c:	beq	16b90 <__assert_fail@plt+0x4b04>
   15e90:	movw	r6, #456	; 0x1c8
   15e94:	movt	r6, #4
   15e98:	ldr	r1, [r6, #152]	; 0x98
   15e9c:	cmp	r1, #0
   15ea0:	beq	16128 <__assert_fail@plt+0x409c>
   15ea4:	ldr	r0, [r6, #156]	; 0x9c
   15ea8:	cmp	r1, #2
   15eac:	beq	16110 <__assert_fail@plt+0x4084>
   15eb0:	cmp	r1, #1
   15eb4:	bne	15d34 <__assert_fail@plt+0x3ca8>
   15eb8:	ldrb	r0, [r0]
   15ebc:	cmp	r0, #48	; 0x30
   15ec0:	bne	15d34 <__assert_fail@plt+0x3ca8>
   15ec4:	b	16128 <__assert_fail@plt+0x409c>
   15ec8:	ldr	r0, [r9, #28]
   15ecc:	ldr	r7, [fp, #-716]	; 0xfffffd34
   15ed0:	cmp	r0, #0
   15ed4:	moveq	r0, #1
   15ed8:	streq	r0, [r9, #28]
   15edc:	ldr	r0, [fp, #-728]	; 0xfffffd28
   15ee0:	add	r8, r0, #16
   15ee4:	ldr	r0, [r9, #44]	; 0x2c
   15ee8:	sub	r1, r0, #2
   15eec:	cmp	r1, #2
   15ef0:	bcs	15f58 <__assert_fail@plt+0x3ecc>
   15ef4:	ldr	r0, [fp, #-720]	; 0xfffffd30
   15ef8:	cmp	r0, #0
   15efc:	beq	15fa4 <__assert_fail@plt+0x3f18>
   15f00:	bl	1af94 <__assert_fail@plt+0x8f08>
   15f04:	sub	sp, sp, #8
   15f08:	str	r0, [sp]
   15f0c:	mvn	r0, #99	; 0x63
   15f10:	mov	r1, r4
   15f14:	mov	r2, r8
   15f18:	mov	r3, #0
   15f1c:	bl	1a784 <__assert_fail@plt+0x86f8>
   15f20:	add	sp, sp, #8
   15f24:	ldr	r1, [r9, #44]	; 0x2c
   15f28:	mov	r6, #1
   15f2c:	cmp	r1, #2
   15f30:	beq	15f88 <__assert_fail@plt+0x3efc>
   15f34:	cmn	r0, #1
   15f38:	ble	15f94 <__assert_fail@plt+0x3f08>
   15f3c:	mov	r1, #152	; 0x98
   15f40:	mla	r1, sl, r1, r7
   15f44:	ldr	r1, [r1, #32]
   15f48:	and	r1, r1, #61440	; 0xf000
   15f4c:	cmp	r1, #16384	; 0x4000
   15f50:	beq	15f88 <__assert_fail@plt+0x3efc>
   15f54:	b	15fa4 <__assert_fail@plt+0x3f18>
   15f58:	cmp	r0, #4
   15f5c:	bne	15fa4 <__assert_fail@plt+0x3f18>
   15f60:	bl	1af94 <__assert_fail@plt+0x8f08>
   15f64:	sub	sp, sp, #8
   15f68:	str	r0, [sp]
   15f6c:	mvn	r0, #99	; 0x63
   15f70:	mov	r1, r4
   15f74:	mov	r2, r8
   15f78:	mov	r3, #0
   15f7c:	bl	1a784 <__assert_fail@plt+0x86f8>
   15f80:	add	sp, sp, #8
   15f84:	mov	r6, #1
   15f88:	cmp	r0, #0
   15f8c:	bne	15fd4 <__assert_fail@plt+0x3f48>
   15f90:	b	1605c <__assert_fail@plt+0x3fd0>
   15f94:	bl	11ed0 <__errno_location@plt>
   15f98:	ldr	r0, [r0]
   15f9c:	cmp	r0, #2
   15fa0:	bne	15fd4 <__assert_fail@plt+0x3f48>
   15fa4:	bl	1af94 <__assert_fail@plt+0x8f08>
   15fa8:	sub	sp, sp, #8
   15fac:	str	r0, [sp]
   15fb0:	mvn	r0, #99	; 0x63
   15fb4:	mov	r1, r4
   15fb8:	mov	r2, r8
   15fbc:	mov	r3, #256	; 0x100
   15fc0:	bl	1a784 <__assert_fail@plt+0x86f8>
   15fc4:	add	sp, sp, #8
   15fc8:	mov	r6, #0
   15fcc:	cmp	r0, #0
   15fd0:	beq	1605c <__assert_fail@plt+0x3fd0>
   15fd4:	movw	r1, #54442	; 0xd4aa
   15fd8:	mov	r0, #0
   15fdc:	mov	r2, #5
   15fe0:	mov	r6, #0
   15fe4:	movt	r1, #2
   15fe8:	bl	11ca8 <dcgettext@plt>
   15fec:	mov	r5, r0
   15ff0:	bl	11ed0 <__errno_location@plt>
   15ff4:	ldr	r7, [r0]
   15ff8:	mov	r0, #4
   15ffc:	mov	r1, r4
   16000:	bl	27968 <_obstack_memory_used@@Base+0x1b14>
   16004:	mov	r3, r0
   16008:	mov	r0, #0
   1600c:	mov	r1, r7
   16010:	mov	r2, r5
   16014:	bl	11da4 <error@plt>
   16018:	ldr	r0, [fp, #-720]	; 0xfffffd30
   1601c:	cmp	r0, #0
   16020:	beq	160cc <__assert_fail@plt+0x4040>
   16024:	ldr	r1, [fp, #-716]	; 0xfffffd34
   16028:	mov	r0, #2
   1602c:	mov	r7, #0
   16030:	str	r0, [r9, #28]
   16034:	mov	r0, #152	; 0x98
   16038:	mla	r0, sl, r0, r1
   1603c:	movw	r1, #648	; 0x288
   16040:	movt	r1, #4
   16044:	add	r1, r1, #1
   16048:	str	r1, [r0, #128]	; 0x80
   1604c:	mov	r0, r6
   16050:	mov	r1, r7
   16054:	sub	sp, fp, #28
   16058:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1605c:	mov	r0, #152	; 0x98
   16060:	mov	r1, #1
   16064:	mla	r0, sl, r0, r7
   16068:	strb	r1, [r0, #132]	; 0x84
   1606c:	ldr	r1, [fp, #-724]	; 0xfffffd2c
   16070:	cmp	r1, #5
   16074:	beq	16088 <__assert_fail@plt+0x3ffc>
   16078:	ldr	r0, [r0, #32]
   1607c:	and	r0, r0, #61440	; 0xf000
   16080:	cmp	r0, #32768	; 0x8000
   16084:	bne	16230 <__assert_fail@plt+0x41a4>
   16088:	ldrb	r0, [r9, #1]
   1608c:	cmp	r0, #0
   16090:	beq	16230 <__assert_fail@plt+0x41a4>
   16094:	movw	r0, #456	; 0x1c8
   16098:	movt	r0, #4
   1609c:	ldr	r1, [r0, #168]	; 0xa8
   160a0:	cmp	r1, #0
   160a4:	beq	16230 <__assert_fail@plt+0x41a4>
   160a8:	ldr	r0, [r0, #172]	; 0xac
   160ac:	cmp	r1, #2
   160b0:	beq	16158 <__assert_fail@plt+0x40cc>
   160b4:	cmp	r1, #1
   160b8:	bne	16170 <__assert_fail@plt+0x40e4>
   160bc:	ldrb	r0, [r0]
   160c0:	cmp	r0, #48	; 0x30
   160c4:	bne	16170 <__assert_fail@plt+0x40e4>
   160c8:	b	16230 <__assert_fail@plt+0x41a4>
   160cc:	ldr	r0, [r9, #28]
   160d0:	ldr	r1, [fp, #-716]	; 0xfffffd34
   160d4:	cmp	r0, #0
   160d8:	moveq	r0, #1
   160dc:	streq	r0, [r9, #28]
   160e0:	mov	r0, #152	; 0x98
   160e4:	mla	r0, sl, r0, r1
   160e8:	movw	r1, #648	; 0x288
   160ec:	movt	r1, #4
   160f0:	add	r1, r1, #1
   160f4:	str	r1, [r0, #128]	; 0x80
   160f8:	ldr	r0, [fp, #-732]	; 0xfffffd24
   160fc:	bl	29594 <_obstack_memory_used@@Base+0x3740>
   16100:	ldr	r1, [fp, #-728]	; 0xfffffd28
   16104:	mov	r6, #0
   16108:	mov	r7, #0
   1610c:	b	169e8 <__assert_fail@plt+0x495c>
   16110:	movw	r1, #52640	; 0xcda0
   16114:	mov	r2, #2
   16118:	movt	r1, #2
   1611c:	bl	1202c <strncmp@plt>
   16120:	cmp	r0, #0
   16124:	bne	15d34 <__assert_fail@plt+0x3ca8>
   16128:	ldr	r1, [r6, #144]	; 0x90
   1612c:	cmp	r1, #0
   16130:	beq	163d4 <__assert_fail@plt+0x4348>
   16134:	ldr	r0, [r6, #148]	; 0x94
   16138:	cmp	r1, #2
   1613c:	beq	163bc <__assert_fail@plt+0x4330>
   16140:	cmp	r1, #1
   16144:	bne	15d34 <__assert_fail@plt+0x3ca8>
   16148:	ldrb	r0, [r0]
   1614c:	cmp	r0, #48	; 0x30
   16150:	bne	15d34 <__assert_fail@plt+0x3ca8>
   16154:	b	163d4 <__assert_fail@plt+0x4348>
   16158:	movw	r1, #52640	; 0xcda0
   1615c:	mov	r2, #2
   16160:	movt	r1, #2
   16164:	bl	1202c <strncmp@plt>
   16168:	cmp	r0, #0
   1616c:	beq	16230 <__assert_fail@plt+0x41a4>
   16170:	mov	r0, #152	; 0x98
   16174:	movw	r1, #4816	; 0x12d0
   16178:	mla	r7, sl, r0, r7
   1617c:	movt	r1, #4
   16180:	ldrd	r2, [r1, #96]	; 0x60
   16184:	ldr	r0, [r7, #16]!
   16188:	ldr	r1, [r7, #4]
   1618c:	eor	r0, r0, r2
   16190:	eor	r1, r1, r3
   16194:	orrs	r0, r0, r1
   16198:	bne	161b0 <__assert_fail@plt+0x4124>
   1619c:	bl	11ed0 <__errno_location@plt>
   161a0:	mov	r1, #95	; 0x5f
   161a4:	str	r1, [r0]
   161a8:	mov	r0, #0
   161ac:	b	16220 <__assert_fail@plt+0x4194>
   161b0:	mov	r0, r4
   161b4:	bl	11f90 <cap_get_file@plt>
   161b8:	cmp	r0, #0
   161bc:	beq	161f8 <__assert_fail@plt+0x416c>
   161c0:	mov	r1, #0
   161c4:	mov	r5, r0
   161c8:	bl	11ba0 <cap_to_text@plt>
   161cc:	str	r0, [fp, #-724]	; 0xfffffd2c
   161d0:	mov	r0, r5
   161d4:	bl	11fd8 <cap_free@plt>
   161d8:	ldr	r0, [fp, #-724]	; 0xfffffd2c
   161dc:	cmp	r0, #0
   161e0:	beq	161f8 <__assert_fail@plt+0x416c>
   161e4:	ldrb	r5, [r0]
   161e8:	bl	11fd8 <cap_free@plt>
   161ec:	mov	r0, #1
   161f0:	cmp	r5, #0
   161f4:	bne	16220 <__assert_fail@plt+0x4194>
   161f8:	bl	11ed0 <__errno_location@plt>
   161fc:	ldr	r1, [r0]
   16200:	mov	r0, #0
   16204:	cmp	r1, #22
   16208:	cmpne	r1, #95	; 0x5f
   1620c:	bne	16b6c <__assert_fail@plt+0x4ae0>
   16210:	ldrd	r2, [r7]
   16214:	movw	r1, #4816	; 0x12d0
   16218:	movt	r1, #4
   1621c:	strd	r2, [r1, #96]	; 0x60
   16220:	ldr	r7, [fp, #-716]	; 0xfffffd34
   16224:	mov	r1, #152	; 0x98
   16228:	mla	r1, sl, r1, r7
   1622c:	strb	r0, [r1, #140]	; 0x8c
   16230:	ldr	r0, [r9, #40]	; 0x28
   16234:	cmp	r0, #0
   16238:	beq	16248 <__assert_fail@plt+0x41bc>
   1623c:	ldrb	r0, [r9, #7]
   16240:	cmp	r0, #1
   16244:	bne	164b0 <__assert_fail@plt+0x4424>
   16248:	mov	r0, #152	; 0x98
   1624c:	movw	r2, #4816	; 0x12d0
   16250:	mla	r0, sl, r0, r7
   16254:	movt	r2, #4
   16258:	ldrd	r2, [r2, #104]	; 0x68
   1625c:	mov	r7, r0
   16260:	ldr	r1, [r7, #16]!
   16264:	eor	r1, r1, r2
   16268:	ldr	r2, [r7, #4]
   1626c:	eor	r2, r2, r3
   16270:	orrs	r1, r1, r2
   16274:	bne	16288 <__assert_fail@plt+0x41fc>
   16278:	bl	11ed0 <__errno_location@plt>
   1627c:	mov	r1, #95	; 0x5f
   16280:	str	r1, [r0]
   16284:	b	16304 <__assert_fail@plt+0x4278>
   16288:	add	r5, r0, #128	; 0x80
   1628c:	mov	r0, r4
   16290:	cmp	r6, #0
   16294:	mov	r1, r5
   16298:	beq	162d0 <__assert_fail@plt+0x4244>
   1629c:	bl	2803c <_obstack_memory_used@@Base+0x21e8>
   162a0:	cmn	r0, #1
   162a4:	ble	162dc <__assert_fail@plt+0x4250>
   162a8:	ldr	r1, [r5]
   162ac:	movw	r0, #54459	; 0xd4bb
   162b0:	movt	r0, #2
   162b4:	bl	11bd0 <strcmp@plt>
   162b8:	ldr	r7, [fp, #-716]	; 0xfffffd34
   162bc:	cmp	r0, #0
   162c0:	mov	r5, r0
   162c4:	mov	r0, #0
   162c8:	movwne	r5, #1
   162cc:	b	16344 <__assert_fail@plt+0x42b8>
   162d0:	bl	280b0 <_obstack_memory_used@@Base+0x225c>
   162d4:	cmn	r0, #1
   162d8:	bgt	162a8 <__assert_fail@plt+0x421c>
   162dc:	bl	11ed0 <__errno_location@plt>
   162e0:	ldr	r0, [r0]
   162e4:	cmp	r0, #22
   162e8:	cmpne	r0, #95	; 0x5f
   162ec:	bne	16b60 <__assert_fail@plt+0x4ad4>
   162f0:	ldrd	r0, [r7]
   162f4:	movw	r2, #4816	; 0x12d0
   162f8:	movt	r2, #4
   162fc:	strd	r0, [r2, #104]	; 0x68
   16300:	bl	11ed0 <__errno_location@plt>
   16304:	ldr	r7, [fp, #-716]	; 0xfffffd34
   16308:	mov	r1, #152	; 0x98
   1630c:	movw	r2, #648	; 0x288
   16310:	movt	r2, #4
   16314:	add	r2, r2, #1
   16318:	mla	r1, sl, r1, r7
   1631c:	str	r2, [r1, #128]	; 0x80
   16320:	ldr	r0, [r0]
   16324:	cmp	r0, #95	; 0x5f
   16328:	cmpne	r0, #61	; 0x3d
   1632c:	bne	1633c <__assert_fail@plt+0x42b0>
   16330:	mov	r5, #0
   16334:	mov	r0, #0
   16338:	b	16344 <__assert_fail@plt+0x42b8>
   1633c:	mov	r0, #1
   16340:	mov	r5, #0
   16344:	ldr	r1, [r9, #40]	; 0x28
   16348:	mov	r6, #0
   1634c:	orrs	r1, r1, r0
   16350:	mov	r1, #0
   16354:	bne	16438 <__assert_fail@plt+0x43ac>
   16358:	movw	r0, #4816	; 0x12d0
   1635c:	ldrd	r2, [r8]
   16360:	movt	r0, #4
   16364:	ldrd	r0, [r0, #112]	; 0x70
   16368:	eor	r1, r3, r1
   1636c:	eor	r0, r2, r0
   16370:	orr	r7, r0, r1
   16374:	bl	11ed0 <__errno_location@plt>
   16378:	cmp	r7, #0
   1637c:	bne	16394 <__assert_fail@plt+0x4308>
   16380:	ldr	r7, [fp, #-716]	; 0xfffffd34
   16384:	mov	r1, #95	; 0x5f
   16388:	str	r1, [r0]
   1638c:	mov	r0, #0
   16390:	b	16428 <__assert_fail@plt+0x439c>
   16394:	mov	r1, #0
   16398:	mov	r7, r0
   1639c:	str	r1, [r0]
   163a0:	mov	r0, r4
   163a4:	mov	r1, r8
   163a8:	bl	1fd84 <__assert_fail@plt+0xdcf8>
   163ac:	cmp	r0, #0
   163b0:	ble	16404 <__assert_fail@plt+0x4378>
   163b4:	ldr	r7, [fp, #-716]	; 0xfffffd34
   163b8:	b	16428 <__assert_fail@plt+0x439c>
   163bc:	movw	r1, #52640	; 0xcda0
   163c0:	mov	r2, #2
   163c4:	movt	r1, #2
   163c8:	bl	1202c <strncmp@plt>
   163cc:	cmp	r0, #0
   163d0:	bne	15d34 <__assert_fail@plt+0x3ca8>
   163d4:	ldr	r1, [r6, #160]	; 0xa0
   163d8:	cmp	r1, #0
   163dc:	beq	16b90 <__assert_fail@plt+0x4b04>
   163e0:	ldr	r0, [r6, #164]	; 0xa4
   163e4:	cmp	r1, #2
   163e8:	beq	16b78 <__assert_fail@plt+0x4aec>
   163ec:	cmp	r1, #1
   163f0:	bne	15d34 <__assert_fail@plt+0x3ca8>
   163f4:	ldrb	r0, [r0]
   163f8:	cmp	r0, #48	; 0x30
   163fc:	bne	15d34 <__assert_fail@plt+0x3ca8>
   16400:	b	16b90 <__assert_fail@plt+0x4b04>
   16404:	ldr	r1, [r7]
   16408:	ldr	r7, [fp, #-716]	; 0xfffffd34
   1640c:	cmp	r1, #22
   16410:	cmpne	r1, #95	; 0x5f
   16414:	bne	16c70 <__assert_fail@plt+0x4be4>
   16418:	ldrd	r2, [r8]
   1641c:	movw	r1, #4816	; 0x12d0
   16420:	movt	r1, #4
   16424:	strd	r2, [r1, #112]	; 0x70
   16428:	cmp	r0, #0
   1642c:	mov	r1, #0
   16430:	lsr	r0, r0, #31
   16434:	movwgt	r1, #1
   16438:	orr	r2, r5, r1
   1643c:	cmp	r2, #1
   16440:	bne	16458 <__assert_fail@plt+0x43cc>
   16444:	cmp	r1, #0
   16448:	mov	r6, #1
   1644c:	movwne	r6, #2
   16450:	cmp	r5, #0
   16454:	moveq	r6, #2
   16458:	mov	r1, #152	; 0x98
   1645c:	cmp	r6, #0
   16460:	mla	r1, sl, r1, r7
   16464:	str	r6, [r1, #136]	; 0x88
   16468:	movwne	r6, #1
   1646c:	cmp	r0, #0
   16470:	ldrb	r1, [r9, #26]
   16474:	orr	r1, r1, r6
   16478:	strb	r1, [r9, #26]
   1647c:	beq	164b0 <__assert_fail@plt+0x4424>
   16480:	bl	11ed0 <__errno_location@plt>
   16484:	ldr	r5, [r0]
   16488:	mov	r0, #0
   1648c:	mov	r1, #3
   16490:	mov	r2, r4
   16494:	bl	27be4 <_obstack_memory_used@@Base+0x1d90>
   16498:	movw	r2, #61146	; 0xeeda
   1649c:	mov	r3, r0
   164a0:	mov	r0, #0
   164a4:	mov	r1, r5
   164a8:	movt	r2, #2
   164ac:	bl	11da4 <error@plt>
   164b0:	mov	r0, #152	; 0x98
   164b4:	mla	r5, sl, r0, r7
   164b8:	ldr	r0, [r5, #32]!
   164bc:	and	r1, r0, #61440	; 0xf000
   164c0:	cmp	r1, #40960	; 0xa000
   164c4:	bne	166cc <__assert_fail@plt+0x4640>
   164c8:	ldr	r1, [r9, #40]	; 0x28
   164cc:	cmp	r1, #0
   164d0:	beq	164e0 <__assert_fail@plt+0x4454>
   164d4:	ldrb	r1, [r9, #3]
   164d8:	cmp	r1, #1
   164dc:	bne	166cc <__assert_fail@plt+0x4640>
   164e0:	mov	r0, #152	; 0x98
   164e4:	mla	r6, sl, r0, r7
   164e8:	mov	r0, r4
   164ec:	ldr	r1, [r6, #64]	; 0x40
   164f0:	bl	1e868 <__assert_fail@plt+0xc7dc>
   164f4:	mov	r7, r0
   164f8:	str	r0, [r6, #4]!
   164fc:	cmp	r0, #0
   16500:	str	r5, [fp, #-724]	; 0xfffffd2c
   16504:	bne	16578 <__assert_fail@plt+0x44ec>
   16508:	movw	r1, #54469	; 0xd4c5
   1650c:	mov	r0, #0
   16510:	mov	r2, #5
   16514:	movt	r1, #2
   16518:	bl	11ca8 <dcgettext@plt>
   1651c:	mov	r8, r0
   16520:	bl	11ed0 <__errno_location@plt>
   16524:	ldr	r7, [r0]
   16528:	mov	r0, #4
   1652c:	mov	r1, r4
   16530:	bl	27968 <_obstack_memory_used@@Base+0x1b14>
   16534:	mov	r3, r0
   16538:	mov	r0, #0
   1653c:	mov	r1, r7
   16540:	mov	r2, r8
   16544:	bl	11da4 <error@plt>
   16548:	ldr	r1, [fp, #-720]	; 0xfffffd30
   1654c:	mov	r0, #2
   16550:	cmp	r1, #0
   16554:	bne	16568 <__assert_fail@plt+0x44dc>
   16558:	ldr	r0, [r9, #28]
   1655c:	cmp	r0, #0
   16560:	bne	1656c <__assert_fail@plt+0x44e0>
   16564:	mov	r0, #1
   16568:	str	r0, [r9, #28]
   1656c:	ldr	r7, [r6]
   16570:	cmp	r7, #0
   16574:	beq	166b4 <__assert_fail@plt+0x4628>
   16578:	ldrb	r0, [r7]
   1657c:	cmp	r0, #47	; 0x2f
   16580:	beq	165dc <__assert_fail@plt+0x4550>
   16584:	mov	r0, r4
   16588:	bl	1fca8 <__assert_fail@plt+0xdc1c>
   1658c:	cmp	r0, #0
   16590:	beq	165dc <__assert_fail@plt+0x4550>
   16594:	mov	r5, r0
   16598:	mov	r0, r7
   1659c:	bl	11eac <strlen@plt>
   165a0:	add	r0, r5, r0
   165a4:	add	r0, r0, #2
   165a8:	bl	29090 <_obstack_memory_used@@Base+0x323c>
   165ac:	mov	r8, r0
   165b0:	add	r0, r5, r4
   165b4:	mov	r1, r4
   165b8:	ldrb	r0, [r0, #-1]
   165bc:	cmp	r0, #47	; 0x2f
   165c0:	mov	r0, r8
   165c4:	addne	r5, r5, #1
   165c8:	mov	r2, r5
   165cc:	bl	11f0c <stpncpy@plt>
   165d0:	mov	r1, r7
   165d4:	bl	11c9c <stpcpy@plt>
   165d8:	b	165e8 <__assert_fail@plt+0x455c>
   165dc:	mov	r0, r7
   165e0:	bl	29594 <_obstack_memory_used@@Base+0x3740>
   165e4:	mov	r8, r0
   165e8:	ldr	r0, [fp, #-740]	; 0xfffffd1c
   165ec:	ldr	r7, [fp, #-716]	; 0xfffffd34
   165f0:	ldr	r0, [r0]
   165f4:	cmp	r0, #0
   165f8:	bne	16654 <__assert_fail@plt+0x45c8>
   165fc:	ldr	r4, [r6]
   16600:	ldr	r0, [r9, #88]	; 0x58
   16604:	sub	sp, sp, #8
   16608:	str	r0, [sp]
   1660c:	sub	r0, fp, #688	; 0x2b0
   16610:	mov	r1, #2
   16614:	mov	r2, r4
   16618:	mvn	r3, #0
   1661c:	bl	26090 <_obstack_memory_used@@Base+0x23c>
   16620:	add	sp, sp, #8
   16624:	mov	r5, r0
   16628:	ldrb	r0, [r4]
   1662c:	ldrb	r1, [fp, #-688]	; 0xfffffd50
   16630:	cmp	r0, r1
   16634:	bne	16648 <__assert_fail@plt+0x45bc>
   16638:	mov	r0, r4
   1663c:	bl	11eac <strlen@plt>
   16640:	cmp	r0, r5
   16644:	beq	16654 <__assert_fail@plt+0x45c8>
   16648:	ldr	r1, [fp, #-740]	; 0xfffffd1c
   1664c:	mvn	r0, #0
   16650:	str	r0, [r1]
   16654:	ldr	r0, [r9, #48]	; 0x30
   16658:	cmp	r0, #1
   1665c:	bhi	1666c <__assert_fail@plt+0x45e0>
   16660:	ldrb	r0, [r9, #3]
   16664:	cmp	r0, #1
   16668:	bne	166bc <__assert_fail@plt+0x4630>
   1666c:	sub	sp, sp, #8
   16670:	mov	r0, #2
   16674:	sub	r2, fp, #688	; 0x2b0
   16678:	mov	r1, r8
   1667c:	mov	r3, #0
   16680:	str	r0, [sp]
   16684:	mvn	r0, #99	; 0x63
   16688:	bl	1a784 <__assert_fail@plt+0x86f8>
   1668c:	add	sp, sp, #8
   16690:	cmp	r0, #0
   16694:	bne	166bc <__assert_fail@plt+0x4630>
   16698:	mov	r0, #152	; 0x98
   1669c:	mov	r1, #1
   166a0:	mla	r0, sl, r0, r7
   166a4:	strb	r1, [r0, #133]	; 0x85
   166a8:	ldr	r1, [fp, #-672]	; 0xfffffd60
   166ac:	str	r1, [r0, #124]	; 0x7c
   166b0:	b	166bc <__assert_fail@plt+0x4630>
   166b4:	ldr	r7, [fp, #-716]	; 0xfffffd34
   166b8:	mov	r8, #0
   166bc:	mov	r0, r8
   166c0:	bl	2056c <__assert_fail@plt+0xe4e0>
   166c4:	ldr	r5, [fp, #-724]	; 0xfffffd2c
   166c8:	ldr	r0, [r5]
   166cc:	and	r0, r0, #61440	; 0xf000
   166d0:	cmp	r0, #40960	; 0xa000
   166d4:	beq	16704 <__assert_fail@plt+0x4678>
   166d8:	ldr	r2, [fp, #-736]	; 0xfffffd20
   166dc:	cmp	r0, #16384	; 0x4000
   166e0:	bne	16710 <__assert_fail@plt+0x4684>
   166e4:	ldr	r0, [fp, #-720]	; 0xfffffd30
   166e8:	cmp	r0, #0
   166ec:	beq	16718 <__assert_fail@plt+0x468c>
   166f0:	ldrb	r1, [r9, #5]
   166f4:	mov	r0, #9
   166f8:	cmp	r1, #1
   166fc:	moveq	r0, #3
   16700:	b	1671c <__assert_fail@plt+0x4690>
   16704:	ldr	r2, [fp, #-736]	; 0xfffffd20
   16708:	mov	r0, #6
   1670c:	b	1671c <__assert_fail@plt+0x4690>
   16710:	mov	r0, #5
   16714:	b	1671c <__assert_fail@plt+0x4690>
   16718:	mov	r0, #3
   1671c:	str	r0, [r2]
   16720:	mov	r0, #152	; 0x98
   16724:	mla	r0, sl, r0, r7
   16728:	ldrd	r6, [r0, #80]	; 0x50
   1672c:	ldr	r0, [r9, #40]	; 0x28
   16730:	cmp	r0, #0
   16734:	beq	16744 <__assert_fail@plt+0x46b8>
   16738:	ldrb	r0, [r9, #8]
   1673c:	cmp	r0, #1
   16740:	bne	16964 <__assert_fail@plt+0x48d8>
   16744:	movw	r8, #4816	; 0x12d0
   16748:	ldr	r3, [r9, #100]	; 0x64
   1674c:	movt	r8, #4
   16750:	ldrd	r0, [r8, #88]	; 0x58
   16754:	sub	sp, sp, #16
   16758:	mov	r2, #0
   1675c:	mov	r4, #512	; 0x200
   16760:	str	r0, [sp, #8]
   16764:	str	r1, [sp, #12]
   16768:	mov	r0, r6
   1676c:	mov	r1, r7
   16770:	str	r2, [sp, #4]
   16774:	sub	r2, fp, #688	; 0x2b0
   16778:	str	r4, [sp]
   1677c:	bl	21b38 <__assert_fail@plt+0xfaac>
   16780:	add	sp, sp, #16
   16784:	mov	r1, #0
   16788:	bl	23588 <__assert_fail@plt+0x114fc>
   1678c:	ldr	r1, [r8, #20]
   16790:	cmp	r1, r0
   16794:	strlt	r0, [r8, #20]
   16798:	ldr	r0, [r9, #40]	; 0x28
   1679c:	cmp	r0, #0
   167a0:	bne	16964 <__assert_fail@plt+0x48d8>
   167a4:	ldrb	r0, [r9, #14]
   167a8:	cmp	r0, #0
   167ac:	beq	16804 <__assert_fail@plt+0x4778>
   167b0:	ldrb	r0, [r9, #17]
   167b4:	cmp	r0, #0
   167b8:	beq	168dc <__assert_fail@plt+0x4850>
   167bc:	ldrb	r0, [r9, #19]
   167c0:	cmp	r0, #1
   167c4:	bne	16964 <__assert_fail@plt+0x48d8>
   167c8:	ldr	r1, [fp, #-716]	; 0xfffffd34
   167cc:	mov	r0, #152	; 0x98
   167d0:	mla	r0, sl, r0, r1
   167d4:	ldr	r4, [r0, #40]	; 0x28
   167d8:	ldrb	r0, [r9, #16]
   167dc:	cmp	r0, #0
   167e0:	bne	16840 <__assert_fail@plt+0x47b4>
   167e4:	mov	r0, r4
   167e8:	bl	22bf0 <__assert_fail@plt+0x10b64>
   167ec:	cmp	r0, #0
   167f0:	beq	16840 <__assert_fail@plt+0x47b4>
   167f4:	mov	r1, #0
   167f8:	bl	23588 <__assert_fail@plt+0x114fc>
   167fc:	bic	r0, r0, r0, asr #31
   16800:	b	16874 <__assert_fail@plt+0x47e8>
   16804:	ldr	r1, [fp, #-716]	; 0xfffffd34
   16808:	mov	r0, #152	; 0x98
   1680c:	mla	r0, sl, r0, r1
   16810:	ldr	r4, [r0, #40]	; 0x28
   16814:	ldrb	r0, [r9, #16]
   16818:	cmp	r0, #0
   1681c:	bne	16890 <__assert_fail@plt+0x4804>
   16820:	mov	r0, r4
   16824:	bl	22bf0 <__assert_fail@plt+0x10b64>
   16828:	cmp	r0, #0
   1682c:	beq	16890 <__assert_fail@plt+0x4804>
   16830:	mov	r1, #0
   16834:	bl	23588 <__assert_fail@plt+0x114fc>
   16838:	bic	r0, r0, r0, asr #31
   1683c:	b	168c4 <__assert_fail@plt+0x4838>
   16840:	sub	sp, sp, #16
   16844:	mov	r0, #0
   16848:	mov	r1, #0
   1684c:	mov	r2, #1
   16850:	mvn	r3, #0
   16854:	str	r4, [sp, #8]
   16858:	str	r0, [sp, #12]
   1685c:	movw	r0, #54498	; 0xd4e2
   16860:	movt	r0, #2
   16864:	str	r0, [sp]
   16868:	mov	r0, #0
   1686c:	bl	12068 <__snprintf_chk@plt>
   16870:	add	sp, sp, #16
   16874:	ldr	r1, [r8, #36]	; 0x24
   16878:	cmp	r1, r0
   1687c:	strlt	r0, [r8, #36]	; 0x24
   16880:	ldrb	r0, [r9, #7]
   16884:	cmp	r0, #1
   16888:	beq	16970 <__assert_fail@plt+0x48e4>
   1688c:	b	16998 <__assert_fail@plt+0x490c>
   16890:	sub	sp, sp, #16
   16894:	mov	r0, #0
   16898:	mov	r1, #0
   1689c:	mov	r2, #1
   168a0:	mvn	r3, #0
   168a4:	str	r4, [sp, #8]
   168a8:	str	r0, [sp, #12]
   168ac:	movw	r0, #54498	; 0xd4e2
   168b0:	movt	r0, #2
   168b4:	str	r0, [sp]
   168b8:	mov	r0, #0
   168bc:	bl	12068 <__snprintf_chk@plt>
   168c0:	add	sp, sp, #16
   168c4:	ldr	r1, [r8, #28]
   168c8:	cmp	r1, r0
   168cc:	strlt	r0, [r8, #28]
   168d0:	ldrb	r0, [r9, #17]
   168d4:	cmp	r0, #0
   168d8:	bne	167bc <__assert_fail@plt+0x4730>
   168dc:	ldr	r1, [fp, #-716]	; 0xfffffd34
   168e0:	mov	r0, #152	; 0x98
   168e4:	mla	r0, sl, r0, r1
   168e8:	ldr	r4, [r0, #44]	; 0x2c
   168ec:	ldrb	r0, [r9, #16]
   168f0:	cmp	r0, #0
   168f4:	bne	16918 <__assert_fail@plt+0x488c>
   168f8:	mov	r0, r4
   168fc:	bl	22db8 <__assert_fail@plt+0x10d2c>
   16900:	cmp	r0, #0
   16904:	beq	16918 <__assert_fail@plt+0x488c>
   16908:	mov	r1, #0
   1690c:	bl	23588 <__assert_fail@plt+0x114fc>
   16910:	bic	r0, r0, r0, asr #31
   16914:	b	1694c <__assert_fail@plt+0x48c0>
   16918:	sub	sp, sp, #16
   1691c:	mov	r0, #0
   16920:	mov	r1, #0
   16924:	mov	r2, #1
   16928:	mvn	r3, #0
   1692c:	str	r4, [sp, #8]
   16930:	str	r0, [sp, #12]
   16934:	movw	r0, #54498	; 0xd4e2
   16938:	movt	r0, #2
   1693c:	str	r0, [sp]
   16940:	mov	r0, #0
   16944:	bl	12068 <__snprintf_chk@plt>
   16948:	add	sp, sp, #16
   1694c:	ldr	r1, [r8, #32]
   16950:	cmp	r1, r0
   16954:	strlt	r0, [r8, #32]
   16958:	ldrb	r0, [r9, #19]
   1695c:	cmp	r0, #1
   16960:	beq	167c8 <__assert_fail@plt+0x473c>
   16964:	ldrb	r0, [r9, #7]
   16968:	cmp	r0, #1
   1696c:	bne	16998 <__assert_fail@plt+0x490c>
   16970:	ldr	r1, [fp, #-716]	; 0xfffffd34
   16974:	mov	r0, #152	; 0x98
   16978:	mla	r0, sl, r0, r1
   1697c:	ldr	r0, [r0, #128]	; 0x80
   16980:	bl	11eac <strlen@plt>
   16984:	movw	r1, #4816	; 0x12d0
   16988:	movt	r1, #4
   1698c:	ldr	r2, [r1, #40]	; 0x28
   16990:	cmp	r2, r0
   16994:	strlt	r0, [r1, #40]	; 0x28
   16998:	ldr	r0, [r9, #40]	; 0x28
   1699c:	cmp	r0, #0
   169a0:	beq	16a08 <__assert_fail@plt+0x497c>
   169a4:	ldrb	r0, [r9, #15]
   169a8:	cmp	r0, #1
   169ac:	bne	169dc <__assert_fail@plt+0x4950>
   169b0:	ldr	r0, [fp, #-728]	; 0xfffffd28
   169b4:	sub	r2, fp, #688	; 0x2b0
   169b8:	add	r0, r0, #112	; 0x70
   169bc:	ldrd	r0, [r0]
   169c0:	bl	23040 <__assert_fail@plt+0x10fb4>
   169c4:	bl	11eac <strlen@plt>
   169c8:	movw	r1, #4816	; 0x12d0
   169cc:	movt	r1, #4
   169d0:	ldr	r2, [r1, #16]
   169d4:	cmp	r2, r0
   169d8:	strlt	r0, [r1, #16]
   169dc:	ldr	r0, [fp, #-732]	; 0xfffffd24
   169e0:	bl	29594 <_obstack_memory_used@@Base+0x3740>
   169e4:	ldr	r1, [fp, #-728]	; 0xfffffd28
   169e8:	str	r0, [r1]
   169ec:	ldr	r0, [r9, #76]	; 0x4c
   169f0:	add	r0, r0, #1
   169f4:	str	r0, [r9, #76]	; 0x4c
   169f8:	mov	r0, r6
   169fc:	mov	r1, r7
   16a00:	sub	sp, fp, #28
   16a04:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   16a08:	ldr	r1, [fp, #-716]	; 0xfffffd34
   16a0c:	mov	r0, #152	; 0x98
   16a10:	sub	lr, fp, #512	; 0x200
   16a14:	sub	r2, lr, #197	; 0xc5
   16a18:	mla	r0, sl, r0, r1
   16a1c:	mov	r1, #0
   16a20:	ldr	r0, [r0, #36]	; 0x24
   16a24:	bl	23040 <__assert_fail@plt+0x10fb4>
   16a28:	bl	11eac <strlen@plt>
   16a2c:	movw	r4, #4816	; 0x12d0
   16a30:	movt	r4, #4
   16a34:	ldr	r1, [r4, #24]
   16a38:	cmp	r1, r0
   16a3c:	strlt	r0, [r4, #24]
   16a40:	ldr	r0, [r5]
   16a44:	and	r0, r0, #45056	; 0xb000
   16a48:	orr	r0, r0, #16384	; 0x4000
   16a4c:	cmp	r0, #24576	; 0x6000
   16a50:	bne	16ae8 <__assert_fail@plt+0x4a5c>
   16a54:	ldr	r1, [fp, #-716]	; 0xfffffd34
   16a58:	mov	r0, #152	; 0x98
   16a5c:	sub	r2, fp, #688	; 0x2b0
   16a60:	mla	r5, sl, r0, r1
   16a64:	ldr	r0, [r5, #48]!	; 0x30
   16a68:	ldr	r1, [r5, #4]
   16a6c:	lsr	r0, r0, #8
   16a70:	lsr	r1, r1, #12
   16a74:	bfi	r0, r1, #12, #20
   16a78:	mov	r1, #0
   16a7c:	bl	23040 <__assert_fail@plt+0x10fb4>
   16a80:	bl	11eac <strlen@plt>
   16a84:	ldr	r1, [r4, #44]	; 0x2c
   16a88:	cmp	r1, r0
   16a8c:	mov	r1, #0
   16a90:	strlt	r0, [r4, #44]	; 0x2c
   16a94:	ldrd	r2, [r5]
   16a98:	lsr	r0, r2, #12
   16a9c:	orr	r0, r0, r3, lsl #20
   16aa0:	bfi	r0, r2, #0, #8
   16aa4:	sub	r2, fp, #688	; 0x2b0
   16aa8:	bl	23040 <__assert_fail@plt+0x10fb4>
   16aac:	bl	11eac <strlen@plt>
   16ab0:	ldr	r1, [r4, #48]	; 0x30
   16ab4:	cmp	r1, r0
   16ab8:	strlt	r0, [r4, #48]	; 0x30
   16abc:	movlt	r1, r0
   16ac0:	ldr	r0, [r4, #44]	; 0x2c
   16ac4:	ldr	r2, [r4, #52]	; 0x34
   16ac8:	add	r0, r0, r1
   16acc:	add	r0, r0, #2
   16ad0:	cmp	r2, r0
   16ad4:	strlt	r0, [r4, #52]	; 0x34
   16ad8:	ldrb	r0, [r9, #15]
   16adc:	cmp	r0, #1
   16ae0:	beq	169b0 <__assert_fail@plt+0x4924>
   16ae4:	b	169dc <__assert_fail@plt+0x4950>
   16ae8:	ldr	r1, [fp, #-716]	; 0xfffffd34
   16aec:	mov	r0, #152	; 0x98
   16af0:	movw	r2, #648	; 0x288
   16af4:	ldr	r3, [r9, #104]	; 0x68
   16af8:	movt	r2, #4
   16afc:	ldr	r5, [r2, #12]
   16b00:	ldr	r2, [r2, #8]
   16b04:	mla	r0, sl, r0, r1
   16b08:	ldr	lr, [r0, #68]	; 0x44
   16b0c:	ldr	r0, [r0, #64]	; 0x40
   16b10:	sub	sp, sp, #16
   16b14:	mov	r1, #1
   16b18:	mov	ip, #0
   16b1c:	stm	sp, {r1, ip}
   16b20:	str	r2, [sp, #8]
   16b24:	sub	r2, fp, #688	; 0x2b0
   16b28:	mov	r1, lr
   16b2c:	str	r5, [sp, #12]
   16b30:	bl	21b38 <__assert_fail@plt+0xfaac>
   16b34:	add	sp, sp, #16
   16b38:	mov	r1, #0
   16b3c:	bl	23588 <__assert_fail@plt+0x114fc>
   16b40:	ldr	r1, [r4, #52]	; 0x34
   16b44:	cmp	r1, r0
   16b48:	bge	169a4 <__assert_fail@plt+0x4918>
   16b4c:	str	r0, [r4, #52]	; 0x34
   16b50:	ldrb	r0, [r9, #15]
   16b54:	cmp	r0, #1
   16b58:	beq	169b0 <__assert_fail@plt+0x4924>
   16b5c:	b	169dc <__assert_fail@plt+0x4950>
   16b60:	cmp	r0, #38	; 0x26
   16b64:	beq	162f0 <__assert_fail@plt+0x4264>
   16b68:	b	16300 <__assert_fail@plt+0x4274>
   16b6c:	cmp	r1, #38	; 0x26
   16b70:	beq	16210 <__assert_fail@plt+0x4184>
   16b74:	b	16220 <__assert_fail@plt+0x4194>
   16b78:	movw	r1, #52640	; 0xcda0
   16b7c:	mov	r2, #2
   16b80:	movt	r1, #2
   16b84:	bl	1202c <strncmp@plt>
   16b88:	cmp	r0, #0
   16b8c:	bne	15d34 <__assert_fail@plt+0x3ca8>
   16b90:	ldrb	r0, [r9, #10]
   16b94:	ldrb	r1, [r9, #15]
   16b98:	cmp	r0, #0
   16b9c:	cmpeq	r1, #0
   16ba0:	beq	16be8 <__assert_fail@plt+0x4b5c>
   16ba4:	ldr	r2, [fp, #-724]	; 0xfffffd2c
   16ba8:	cmp	r2, #6
   16bac:	beq	16bbc <__assert_fail@plt+0x4b30>
   16bb0:	ldr	r2, [fp, #-724]	; 0xfffffd2c
   16bb4:	cmp	r2, #0
   16bb8:	bne	16be8 <__assert_fail@plt+0x4b5c>
   16bbc:	ldr	r2, [r9, #44]	; 0x2c
   16bc0:	cmp	r2, #4
   16bc4:	beq	15d34 <__assert_fail@plt+0x3ca8>
   16bc8:	ldrb	r2, [r9, #4]
   16bcc:	cmp	r2, #0
   16bd0:	bne	15d34 <__assert_fail@plt+0x3ca8>
   16bd4:	ldrb	r2, [r9, #3]
   16bd8:	orr	r1, r1, r2
   16bdc:	tst	r1, #1
   16be0:	beq	16bf0 <__assert_fail@plt+0x4b64>
   16be4:	b	15d34 <__assert_fail@plt+0x3ca8>
   16be8:	cmp	r1, #0
   16bec:	bne	15d34 <__assert_fail@plt+0x3ca8>
   16bf0:	cmp	r0, #0
   16bf4:	beq	16d74 <__assert_fail@plt+0x4ce8>
   16bf8:	ldr	r0, [fp, #-724]	; 0xfffffd2c
   16bfc:	cmp	r0, #0
   16c00:	beq	15d34 <__assert_fail@plt+0x3ca8>
   16c04:	ldr	r0, [fp, #-720]	; 0xfffffd30
   16c08:	cmp	r0, #0
   16c0c:	bne	15d34 <__assert_fail@plt+0x3ca8>
   16c10:	ldr	r0, [fp, #-724]	; 0xfffffd2c
   16c14:	mov	r6, #0
   16c18:	mov	r7, #0
   16c1c:	cmp	r0, #5
   16c20:	bne	169a4 <__assert_fail@plt+0x4918>
   16c24:	ldr	r0, [r9, #48]	; 0x30
   16c28:	cmp	r0, #3
   16c2c:	beq	15d34 <__assert_fail@plt+0x3ca8>
   16c30:	cmp	r4, #0
   16c34:	beq	16d74 <__assert_fail@plt+0x4ce8>
   16c38:	movw	r4, #456	; 0x1c8
   16c3c:	movt	r4, #4
   16c40:	ldr	r1, [r4, #112]	; 0x70
   16c44:	cmp	r1, #0
   16c48:	beq	16c94 <__assert_fail@plt+0x4c08>
   16c4c:	ldr	r0, [r4, #116]	; 0x74
   16c50:	cmp	r1, #2
   16c54:	beq	16c7c <__assert_fail@plt+0x4bf0>
   16c58:	cmp	r1, #1
   16c5c:	bne	15d34 <__assert_fail@plt+0x3ca8>
   16c60:	ldrb	r0, [r0]
   16c64:	cmp	r0, #48	; 0x30
   16c68:	bne	15d34 <__assert_fail@plt+0x3ca8>
   16c6c:	b	16c94 <__assert_fail@plt+0x4c08>
   16c70:	cmp	r1, #38	; 0x26
   16c74:	beq	16418 <__assert_fail@plt+0x438c>
   16c78:	b	16428 <__assert_fail@plt+0x439c>
   16c7c:	movw	r1, #52640	; 0xcda0
   16c80:	mov	r2, #2
   16c84:	movt	r1, #2
   16c88:	bl	1202c <strncmp@plt>
   16c8c:	cmp	r0, #0
   16c90:	bne	15d34 <__assert_fail@plt+0x3ca8>
   16c94:	ldr	r1, [r4, #128]	; 0x80
   16c98:	cmp	r1, #0
   16c9c:	beq	16cdc <__assert_fail@plt+0x4c50>
   16ca0:	ldr	r0, [r4, #132]	; 0x84
   16ca4:	cmp	r1, #2
   16ca8:	beq	16cc4 <__assert_fail@plt+0x4c38>
   16cac:	cmp	r1, #1
   16cb0:	bne	15d34 <__assert_fail@plt+0x3ca8>
   16cb4:	ldrb	r0, [r0]
   16cb8:	cmp	r0, #48	; 0x30
   16cbc:	bne	15d34 <__assert_fail@plt+0x3ca8>
   16cc0:	b	16cdc <__assert_fail@plt+0x4c50>
   16cc4:	movw	r1, #52640	; 0xcda0
   16cc8:	mov	r2, #2
   16ccc:	movt	r1, #2
   16cd0:	bl	1202c <strncmp@plt>
   16cd4:	cmp	r0, #0
   16cd8:	bne	15d34 <__assert_fail@plt+0x3ca8>
   16cdc:	ldr	r1, [r4, #136]	; 0x88
   16ce0:	cmp	r1, #0
   16ce4:	beq	16d24 <__assert_fail@plt+0x4c98>
   16ce8:	ldr	r0, [r4, #140]	; 0x8c
   16cec:	cmp	r1, #2
   16cf0:	beq	16d0c <__assert_fail@plt+0x4c80>
   16cf4:	cmp	r1, #1
   16cf8:	bne	15d34 <__assert_fail@plt+0x3ca8>
   16cfc:	ldrb	r0, [r0]
   16d00:	cmp	r0, #48	; 0x30
   16d04:	bne	15d34 <__assert_fail@plt+0x3ca8>
   16d08:	b	16d24 <__assert_fail@plt+0x4c98>
   16d0c:	movw	r1, #52640	; 0xcda0
   16d10:	mov	r2, #2
   16d14:	movt	r1, #2
   16d18:	bl	1202c <strncmp@plt>
   16d1c:	cmp	r0, #0
   16d20:	bne	15d34 <__assert_fail@plt+0x3ca8>
   16d24:	ldr	r1, [r4, #168]	; 0xa8
   16d28:	cmp	r1, #0
   16d2c:	beq	16d74 <__assert_fail@plt+0x4ce8>
   16d30:	ldr	r0, [r4, #172]	; 0xac
   16d34:	cmp	r1, #2
   16d38:	beq	16d5c <__assert_fail@plt+0x4cd0>
   16d3c:	cmp	r1, #1
   16d40:	bne	15d34 <__assert_fail@plt+0x3ca8>
   16d44:	ldrb	r0, [r0]
   16d48:	mov	r6, #0
   16d4c:	mov	r7, #0
   16d50:	cmp	r0, #48	; 0x30
   16d54:	bne	15d34 <__assert_fail@plt+0x3ca8>
   16d58:	b	169a4 <__assert_fail@plt+0x4918>
   16d5c:	movw	r1, #52640	; 0xcda0
   16d60:	mov	r2, #2
   16d64:	movt	r1, #2
   16d68:	bl	1202c <strncmp@plt>
   16d6c:	cmp	r0, #0
   16d70:	bne	15d34 <__assert_fail@plt+0x3ca8>
   16d74:	mov	r6, #0
   16d78:	mov	r7, #0
   16d7c:	ldrb	r0, [r9, #15]
   16d80:	cmp	r0, #1
   16d84:	bne	169dc <__assert_fail@plt+0x4950>
   16d88:	b	169b0 <__assert_fail@plt+0x4924>
   16d8c:	nop	{0}
   16d90:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   16d94:	add	fp, sp, #28
   16d98:	sub	sp, sp, #28
   16d9c:	sub	sp, sp, #8192	; 0x2000
   16da0:	movw	r4, #4688	; 0x1250
   16da4:	movw	r5, #4816	; 0x12d0
   16da8:	movt	r4, #4
   16dac:	movt	r5, #4
   16db0:	ldr	r0, [r4, #76]	; 0x4c
   16db4:	ldr	r1, [r5, #56]	; 0x38
   16db8:	add	r2, r0, r0, lsr #1
   16dbc:	cmp	r1, r2
   16dc0:	bcs	16df8 <__assert_fail@plt+0x4d6c>
   16dc4:	ldr	r0, [r5, #12]
   16dc8:	bl	2056c <__assert_fail@plt+0xe4e0>
   16dcc:	movw	r0, #4688	; 0x1250
   16dd0:	mov	r1, #12
   16dd4:	movt	r0, #4
   16dd8:	ldr	r0, [r0, #76]	; 0x4c
   16ddc:	bl	29160 <_obstack_memory_used@@Base+0x330c>
   16de0:	movw	r4, #4688	; 0x1250
   16de4:	str	r0, [r5, #12]
   16de8:	movt	r4, #4
   16dec:	ldr	r0, [r4, #76]	; 0x4c
   16df0:	add	r1, r0, r0, lsl #1
   16df4:	str	r1, [r5, #56]	; 0x38
   16df8:	cmp	r0, #0
   16dfc:	beq	16ed8 <__assert_fail@plt+0x4e4c>
   16e00:	ldr	lr, [r5, #12]
   16e04:	ldr	r2, [r4, #72]	; 0x48
   16e08:	mov	r3, #0
   16e0c:	cmp	r0, #4
   16e10:	bcc	16eb8 <__assert_fail@plt+0x4e2c>
   16e14:	bic	r3, r0, #3
   16e18:	mov	r6, #1
   16e1c:	subs	r1, r3, #4
   16e20:	add	r1, r6, r1, lsr #2
   16e24:	add	r6, pc, #836	; 0x344
   16e28:	and	ip, r1, #1
   16e2c:	beq	1711c <__assert_fail@plt+0x5090>
   16e30:	sub	r5, r1, ip
   16e34:	add	r1, pc, #820	; 0x334
   16e38:	vdup.32	q10, r2
   16e3c:	vmov.i32	q9, #152	; 0x00000098
   16e40:	vmov.i32	q12, #8	; 0x00000008
   16e44:	mov	r6, #0
   16e48:	mov	r4, #32
   16e4c:	vld1.64	{d16-d17}, [r1 :128]
   16e50:	mov	r1, #608	; 0x260
   16e54:	vdup.32	q11, r1
   16e58:	mov	r1, lr
   16e5c:	vorr	q13, q10, q10
   16e60:	add	r7, r1, #16
   16e64:	subs	r5, r5, #2
   16e68:	add	r6, r6, #8
   16e6c:	vmla.i32	q13, q8, q9
   16e70:	vadd.i32	q8, q8, q12
   16e74:	vadd.i32	q14, q13, q11
   16e78:	vst1.32	{d26-d27}, [r1], r4
   16e7c:	vst1.32	{d28-d29}, [r7]
   16e80:	bne	16e5c <__assert_fail@plt+0x4dd0>
   16e84:	movw	r5, #4816	; 0x12d0
   16e88:	cmp	ip, #0
   16e8c:	movt	r5, #4
   16e90:	beq	16ea8 <__assert_fail@plt+0x4e1c>
   16e94:	vdup.32	q10, r2
   16e98:	vmov.i32	q9, #152	; 0x00000098
   16e9c:	add	r1, lr, r6, lsl #2
   16ea0:	vmla.i32	q10, q8, q9
   16ea4:	vst1.32	{d20-d21}, [r1]
   16ea8:	movw	r4, #4688	; 0x1250
   16eac:	cmp	r0, r3
   16eb0:	movt	r4, #4
   16eb4:	beq	16ed8 <__assert_fail@plt+0x4e4c>
   16eb8:	mov	r1, #152	; 0x98
   16ebc:	mla	r1, r3, r1, r2
   16ec0:	add	r2, lr, r3, lsl #2
   16ec4:	sub	r3, r0, r3
   16ec8:	str	r1, [r2], #4
   16ecc:	add	r1, r1, #152	; 0x98
   16ed0:	subs	r3, r3, #1
   16ed4:	bne	16ec8 <__assert_fail@plt+0x4e3c>
   16ed8:	ldr	r1, [r4, #60]	; 0x3c
   16edc:	cmp	r1, #2
   16ee0:	bne	16ef0 <__assert_fail@plt+0x4e64>
   16ee4:	cmp	r0, #0
   16ee8:	bne	16f10 <__assert_fail@plt+0x4e84>
   16eec:	b	16fb4 <__assert_fail@plt+0x4f28>
   16ef0:	ldr	r2, [r4, #112]	; 0x70
   16ef4:	cmp	r2, #0
   16ef8:	cmpne	r0, #0
   16efc:	beq	16fac <__assert_fail@plt+0x4f20>
   16f00:	ldr	r2, [r4, #40]	; 0x28
   16f04:	orr	r2, r2, #1
   16f08:	cmp	r2, #3
   16f0c:	bne	16fac <__assert_fail@plt+0x4f20>
   16f10:	mov	r6, #0
   16f14:	add	r7, sp, #24
   16f18:	add	r8, sp, #16
   16f1c:	add	sl, sp, #20
   16f20:	b	16f54 <__assert_fail@plt+0x4ec8>
   16f24:	ldrb	r0, [sp, #15]
   16f28:	ldr	r1, [sp, #16]
   16f2c:	movw	r4, #4688	; 0x1250
   16f30:	movw	r5, #4816	; 0x12d0
   16f34:	movt	r4, #4
   16f38:	movt	r5, #4
   16f3c:	add	r1, r1, r0
   16f40:	ldr	r0, [r4, #76]	; 0x4c
   16f44:	add	r6, r6, #1
   16f48:	str	r1, [r9, #148]	; 0x94
   16f4c:	cmp	r6, r0
   16f50:	bcs	16fa8 <__assert_fail@plt+0x4f1c>
   16f54:	ldr	r1, [r5, #12]
   16f58:	ldr	r9, [r1, r6, lsl #2]
   16f5c:	ldr	r1, [r9, #148]	; 0x94
   16f60:	cmp	r1, #0
   16f64:	bne	16f44 <__assert_fail@plt+0x4eb8>
   16f68:	ldr	r5, [r9]
   16f6c:	ldr	r3, [r9, #144]	; 0x90
   16f70:	ldr	r2, [r4, #88]	; 0x58
   16f74:	add	r0, sp, #15
   16f78:	str	r7, [sp, #20]
   16f7c:	str	r8, [sp]
   16f80:	str	r0, [sp, #4]
   16f84:	mov	r0, sl
   16f88:	mov	r1, r5
   16f8c:	bl	1a918 <__assert_fail@plt+0x888c>
   16f90:	ldr	r0, [sp, #20]
   16f94:	cmp	r0, r7
   16f98:	cmpne	r0, r5
   16f9c:	beq	16f24 <__assert_fail@plt+0x4e98>
   16fa0:	bl	2056c <__assert_fail@plt+0xe4e0>
   16fa4:	b	16f24 <__assert_fail@plt+0x4e98>
   16fa8:	ldr	r1, [r4, #60]	; 0x3c
   16fac:	cmp	r1, #6
   16fb0:	beq	17114 <__assert_fail@plt+0x5088>
   16fb4:	movw	r0, #4296	; 0x10c8
   16fb8:	movt	r0, #4
   16fbc:	bl	11c18 <_setjmp@plt>
   16fc0:	movw	r7, #4688	; 0x1250
   16fc4:	cmp	r0, #0
   16fc8:	movt	r7, #4
   16fcc:	beq	170a4 <__assert_fail@plt+0x5018>
   16fd0:	ldr	r9, [r7, #60]	; 0x3c
   16fd4:	cmp	r9, #4
   16fd8:	beq	1714c <__assert_fail@plt+0x50c0>
   16fdc:	ldr	r1, [r7, #76]	; 0x4c
   16fe0:	mov	r8, #1
   16fe4:	cmp	r1, #0
   16fe8:	beq	170dc <__assert_fail@plt+0x5050>
   16fec:	ldr	r2, [r5, #12]
   16ff0:	ldr	lr, [r7, #72]	; 0x48
   16ff4:	mov	r5, #0
   16ff8:	cmp	r1, #4
   16ffc:	bcc	170b4 <__assert_fail@plt+0x5028>
   17000:	bic	r5, r1, #3
   17004:	mov	r7, #1
   17008:	add	r4, pc, #352	; 0x160
   1700c:	subs	r3, r5, #4
   17010:	add	r3, r7, r3, lsr #2
   17014:	and	ip, r3, #1
   17018:	beq	17138 <__assert_fail@plt+0x50ac>
   1701c:	sub	r7, r3, ip
   17020:	add	r3, pc, #328	; 0x148
   17024:	vdup.32	q10, lr
   17028:	vmov.i32	q9, #152	; 0x00000098
   1702c:	vmov.i32	q12, #8	; 0x00000008
   17030:	mov	r6, #0
   17034:	mov	r4, #32
   17038:	vld1.64	{d16-d17}, [r3 :128]
   1703c:	mov	r3, #608	; 0x260
   17040:	vdup.32	q11, r3
   17044:	mov	r3, r2
   17048:	vorr	q13, q10, q10
   1704c:	add	r0, r3, #16
   17050:	subs	r7, r7, #2
   17054:	add	r6, r6, #8
   17058:	vmla.i32	q13, q8, q9
   1705c:	vadd.i32	q8, q8, q12
   17060:	vadd.i32	q14, q13, q11
   17064:	vst1.32	{d26-d27}, [r3], r4
   17068:	vst1.32	{d28-d29}, [r0]
   1706c:	bne	17048 <__assert_fail@plt+0x4fbc>
   17070:	cmp	ip, #0
   17074:	beq	1708c <__assert_fail@plt+0x5000>
   17078:	vdup.32	q10, lr
   1707c:	vmov.i32	q9, #152	; 0x00000098
   17080:	add	r0, r2, r6, lsl #2
   17084:	vmla.i32	q10, q8, q9
   17088:	vst1.32	{d20-d21}, [r0]
   1708c:	movw	r7, #4688	; 0x1250
   17090:	cmp	r1, r5
   17094:	movt	r7, #4
   17098:	bne	170b4 <__assert_fail@plt+0x5028>
   1709c:	mov	r8, #1
   170a0:	b	170d0 <__assert_fail@plt+0x5044>
   170a4:	ldr	r9, [r7, #60]	; 0x3c
   170a8:	ldr	r1, [r7, #76]	; 0x4c
   170ac:	mov	r8, #0
   170b0:	b	170e0 <__assert_fail@plt+0x5054>
   170b4:	mov	r0, #152	; 0x98
   170b8:	mla	r3, r5, r0, lr
   170bc:	str	r3, [r2, r5, lsl #2]
   170c0:	add	r5, r5, #1
   170c4:	add	r3, r3, #152	; 0x98
   170c8:	cmp	r1, r5
   170cc:	bne	170bc <__assert_fail@plt+0x5030>
   170d0:	movw	r5, #4816	; 0x12d0
   170d4:	movt	r5, #4
   170d8:	b	170e0 <__assert_fail@plt+0x5054>
   170dc:	mov	r1, #0
   170e0:	ldr	r0, [r7, #96]	; 0x60
   170e4:	cmp	r9, #5
   170e8:	ldrb	r3, [r7, #18]
   170ec:	ldrb	r2, [r7, #2]
   170f0:	addeq	r9, r9, r0
   170f4:	movw	r0, #60544	; 0xec80
   170f8:	movt	r0, #2
   170fc:	add	r0, r0, r9, lsl #5
   17100:	add	r0, r0, r8, lsl #4
   17104:	add	r0, r0, r3, lsl #3
   17108:	ldr	r2, [r0, r2, lsl #2]
   1710c:	ldr	r0, [r5, #12]
   17110:	bl	23bb8 <__assert_fail@plt+0x11b2c>
   17114:	sub	sp, fp, #28
   17118:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1711c:	vld1.64	{d16-d17}, [r6 :128]
   17120:	mov	r6, #0
   17124:	movw	r5, #4816	; 0x12d0
   17128:	cmp	ip, #0
   1712c:	movt	r5, #4
   17130:	bne	16e94 <__assert_fail@plt+0x4e08>
   17134:	b	16ea8 <__assert_fail@plt+0x4e1c>
   17138:	vld1.64	{d16-d17}, [r4 :128]
   1713c:	mov	r6, #0
   17140:	cmp	ip, #0
   17144:	bne	17078 <__assert_fail@plt+0x4fec>
   17148:	b	1708c <__assert_fail@plt+0x5000>
   1714c:	movw	r0, #54503	; 0xd4e7
   17150:	movw	r1, #45213	; 0xb09d
   17154:	movw	r3, #54529	; 0xd501
   17158:	movw	r2, #4102	; 0x1006
   1715c:	movt	r0, #2
   17160:	movt	r1, #2
   17164:	movt	r3, #2
   17168:	bl	1208c <__assert_fail@plt>
   1716c:	nop	{0}
   17170:	andeq	r0, r0, r0
   17174:	andeq	r0, r0, r1
   17178:	andeq	r0, r0, r2
   1717c:	andeq	r0, r0, r3
   17180:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   17184:	add	fp, sp, #28
   17188:	sub	sp, sp, #12
   1718c:	movw	r5, #4688	; 0x1250
   17190:	cmp	r0, #0
   17194:	str	r0, [sp, #4]
   17198:	str	r1, [sp, #8]
   1719c:	movt	r5, #4
   171a0:	ldrne	r0, [r5, #52]	; 0x34
   171a4:	cmpne	r0, #0
   171a8:	bne	17364 <__assert_fail@plt+0x52d8>
   171ac:	ldr	r0, [r5, #76]	; 0x4c
   171b0:	mov	r8, #0
   171b4:	cmp	r0, #0
   171b8:	beq	1752c <__assert_fail@plt+0x54a0>
   171bc:	ldr	r1, [sp, #4]
   171c0:	cmp	r1, #0
   171c4:	beq	173a8 <__assert_fail@plt+0x531c>
   171c8:	rsb	sl, r0, #1
   171cc:	movw	r0, #648	; 0x288
   171d0:	movt	r0, #4
   171d4:	add	r0, r0, #1
   171d8:	str	r0, [sp]
   171dc:	b	1720c <__assert_fail@plt+0x5180>
   171e0:	ldrb	r1, [r0, #1]
   171e4:	cmp	r1, #46	; 0x2e
   171e8:	mov	r1, #1
   171ec:	movweq	r1, #2
   171f0:	ldrb	r0, [r0, r1]
   171f4:	cmp	r0, #0
   171f8:	cmpne	r0, #47	; 0x2f
   171fc:	bne	17244 <__assert_fail@plt+0x51b8>
   17200:	add	sl, sl, #1
   17204:	cmp	sl, #1
   17208:	beq	17494 <__assert_fail@plt+0x5408>
   1720c:	movw	r0, #4816	; 0x12d0
   17210:	movt	r0, #4
   17214:	ldr	r0, [r0, #12]
   17218:	ldr	r9, [r0, -sl, lsl #2]
   1721c:	ldr	r0, [r9, #120]	; 0x78
   17220:	cmp	r0, #9
   17224:	cmpne	r0, #3
   17228:	bne	17200 <__assert_fail@plt+0x5174>
   1722c:	ldr	r6, [r9]
   17230:	mov	r0, r6
   17234:	bl	1ef80 <__assert_fail@plt+0xcef4>
   17238:	ldrb	r1, [r0]
   1723c:	cmp	r1, #46	; 0x2e
   17240:	beq	171e0 <__assert_fail@plt+0x5154>
   17244:	ldrb	r0, [r6]
   17248:	cmp	r0, #47	; 0x2f
   1724c:	bne	17274 <__assert_fail@plt+0x51e8>
   17250:	ldr	r4, [r9, #4]
   17254:	mov	r0, #16
   17258:	bl	29090 <_obstack_memory_used@@Base+0x323c>
   1725c:	mov	r7, r0
   17260:	cmp	r4, #0
   17264:	beq	172f4 <__assert_fail@plt+0x5268>
   17268:	mov	r0, r4
   1726c:	bl	29594 <_obstack_memory_used@@Base+0x3740>
   17270:	b	172f8 <__assert_fail@plt+0x526c>
   17274:	ldr	r0, [sp, #4]
   17278:	mov	r1, r6
   1727c:	mov	r2, #0
   17280:	mov	r5, #0
   17284:	bl	1ffbc <__assert_fail@plt+0xdf30>
   17288:	ldr	r4, [r9, #4]
   1728c:	mov	r6, r0
   17290:	mov	r0, #16
   17294:	bl	29090 <_obstack_memory_used@@Base+0x323c>
   17298:	mov	r7, r0
   1729c:	cmp	r4, #0
   172a0:	beq	172b0 <__assert_fail@plt+0x5224>
   172a4:	mov	r0, r4
   172a8:	bl	29594 <_obstack_memory_used@@Base+0x3740>
   172ac:	mov	r5, r0
   172b0:	mov	r0, r6
   172b4:	str	r5, [r7, #4]
   172b8:	bl	29594 <_obstack_memory_used@@Base+0x3740>
   172bc:	ldr	r1, [sp, #8]
   172c0:	movw	r5, #4688	; 0x1250
   172c4:	movt	r5, #4
   172c8:	strb	r1, [r7, #8]
   172cc:	str	r0, [r7]
   172d0:	ldr	r0, [r5, #32]
   172d4:	str	r7, [r5, #32]
   172d8:	str	r0, [r7, #12]
   172dc:	mov	r0, r6
   172e0:	bl	2056c <__assert_fail@plt+0xe4e0>
   172e4:	ldr	r0, [r9, #120]	; 0x78
   172e8:	cmp	r0, #9
   172ec:	bne	17200 <__assert_fail@plt+0x5174>
   172f0:	b	17328 <__assert_fail@plt+0x529c>
   172f4:	mov	r0, #0
   172f8:	str	r0, [r7, #4]
   172fc:	mov	r0, r6
   17300:	bl	29594 <_obstack_memory_used@@Base+0x3740>
   17304:	ldr	r1, [sp, #8]
   17308:	strb	r1, [r7, #8]
   1730c:	str	r0, [r7]
   17310:	ldr	r0, [r5, #32]
   17314:	str	r7, [r5, #32]
   17318:	str	r0, [r7, #12]
   1731c:	ldr	r0, [r9, #120]	; 0x78
   17320:	cmp	r0, #9
   17324:	bne	17200 <__assert_fail@plt+0x5174>
   17328:	ldr	r0, [r9]
   1732c:	bl	2056c <__assert_fail@plt+0xe4e0>
   17330:	ldr	r0, [r9, #4]
   17334:	bl	2056c <__assert_fail@plt+0xe4e0>
   17338:	ldr	r0, [r9, #8]
   1733c:	bl	2056c <__assert_fail@plt+0xe4e0>
   17340:	ldr	r0, [r9, #128]	; 0x80
   17344:	ldr	r1, [sp]
   17348:	cmp	r0, r1
   1734c:	beq	17200 <__assert_fail@plt+0x5174>
   17350:	bl	11ff0 <freecon@plt>
   17354:	add	sl, sl, #1
   17358:	cmp	sl, #1
   1735c:	bne	1720c <__assert_fail@plt+0x5180>
   17360:	b	17494 <__assert_fail@plt+0x5408>
   17364:	mov	r0, #16
   17368:	bl	29090 <_obstack_memory_used@@Base+0x323c>
   1736c:	mov	r4, r0
   17370:	ldr	r0, [sp, #4]
   17374:	bl	29594 <_obstack_memory_used@@Base+0x3740>
   17378:	mov	r1, #0
   1737c:	strb	r1, [r4, #8]
   17380:	str	r1, [r4]
   17384:	str	r0, [r4, #4]
   17388:	ldr	r0, [r5, #32]
   1738c:	str	r4, [r5, #32]
   17390:	str	r0, [r4, #12]
   17394:	ldr	r0, [r5, #76]	; 0x4c
   17398:	mov	r8, #0
   1739c:	cmp	r0, #0
   173a0:	bne	171bc <__assert_fail@plt+0x5130>
   173a4:	b	1752c <__assert_fail@plt+0x54a0>
   173a8:	rsb	r4, r0, #1
   173ac:	movw	r0, #648	; 0x288
   173b0:	movt	r0, #4
   173b4:	add	r0, r0, #1
   173b8:	str	r0, [sp, #4]
   173bc:	b	173cc <__assert_fail@plt+0x5340>
   173c0:	add	r4, r4, #1
   173c4:	cmp	r4, #1
   173c8:	beq	17494 <__assert_fail@plt+0x5408>
   173cc:	movw	r0, #4816	; 0x12d0
   173d0:	movt	r0, #4
   173d4:	ldr	r0, [r0, #12]
   173d8:	ldr	r7, [r0, -r4, lsl #2]
   173dc:	ldr	r0, [r7, #120]	; 0x78
   173e0:	cmp	r0, #9
   173e4:	cmpne	r0, #3
   173e8:	bne	173c0 <__assert_fail@plt+0x5334>
   173ec:	ldr	sl, [r7]
   173f0:	ldr	r9, [r7, #4]
   173f4:	mov	r0, #16
   173f8:	bl	29090 <_obstack_memory_used@@Base+0x323c>
   173fc:	mov	r5, r0
   17400:	mov	r6, #0
   17404:	cmp	r9, #0
   17408:	mov	r0, #0
   1740c:	beq	17418 <__assert_fail@plt+0x538c>
   17410:	mov	r0, r9
   17414:	bl	29594 <_obstack_memory_used@@Base+0x3740>
   17418:	cmp	sl, #0
   1741c:	str	r0, [r5, #4]
   17420:	beq	17430 <__assert_fail@plt+0x53a4>
   17424:	mov	r0, sl
   17428:	bl	29594 <_obstack_memory_used@@Base+0x3740>
   1742c:	mov	r6, r0
   17430:	ldr	r0, [sp, #8]
   17434:	strb	r0, [r5, #8]
   17438:	movw	r0, #4688	; 0x1250
   1743c:	str	r6, [r5]
   17440:	movt	r0, #4
   17444:	mov	r1, r0
   17448:	ldr	r0, [r0, #32]
   1744c:	str	r5, [r1, #32]
   17450:	str	r0, [r5, #12]
   17454:	mov	r5, r1
   17458:	ldr	r0, [r7, #120]	; 0x78
   1745c:	cmp	r0, #9
   17460:	bne	173c0 <__assert_fail@plt+0x5334>
   17464:	ldr	r0, [r7]
   17468:	bl	2056c <__assert_fail@plt+0xe4e0>
   1746c:	ldr	r0, [r7, #4]
   17470:	bl	2056c <__assert_fail@plt+0xe4e0>
   17474:	ldr	r0, [r7, #8]
   17478:	bl	2056c <__assert_fail@plt+0xe4e0>
   1747c:	ldr	r0, [r7, #128]	; 0x80
   17480:	ldr	r1, [sp, #4]
   17484:	cmp	r0, r1
   17488:	beq	173c0 <__assert_fail@plt+0x5334>
   1748c:	bl	11ff0 <freecon@plt>
   17490:	b	173c0 <__assert_fail@plt+0x5334>
   17494:	ldr	r2, [r5, #76]	; 0x4c
   17498:	cmp	r2, #0
   1749c:	beq	1752c <__assert_fail@plt+0x54a0>
   174a0:	movw	r0, #4816	; 0x12d0
   174a4:	and	r1, r2, #1
   174a8:	cmp	r2, #1
   174ac:	movt	r0, #4
   174b0:	ldr	r7, [r0, #12]
   174b4:	bne	174cc <__assert_fail@plt+0x5440>
   174b8:	mov	r2, #0
   174bc:	mov	r8, #0
   174c0:	cmp	r1, #0
   174c4:	bne	17518 <__assert_fail@plt+0x548c>
   174c8:	b	1752c <__assert_fail@plt+0x54a0>
   174cc:	sub	r3, r2, r1
   174d0:	mov	r2, #0
   174d4:	mov	r8, #0
   174d8:	mov	r0, r7
   174dc:	ldr	r6, [r0, r2, lsl #2]!
   174e0:	add	r2, r2, #2
   174e4:	str	r6, [r7, r8, lsl #2]
   174e8:	ldr	r6, [r6, #120]	; 0x78
   174ec:	ldr	r0, [r0, #4]
   174f0:	cmp	r6, #9
   174f4:	addne	r8, r8, #1
   174f8:	str	r0, [r7, r8, lsl #2]
   174fc:	ldr	r0, [r0, #120]	; 0x78
   17500:	cmp	r0, #9
   17504:	addne	r8, r8, #1
   17508:	cmp	r3, r2
   1750c:	bne	174d8 <__assert_fail@plt+0x544c>
   17510:	cmp	r1, #0
   17514:	beq	1752c <__assert_fail@plt+0x54a0>
   17518:	ldr	r0, [r7, r2, lsl #2]
   1751c:	str	r0, [r7, r8, lsl #2]
   17520:	ldr	r0, [r0, #120]	; 0x78
   17524:	cmp	r0, #9
   17528:	addne	r8, r8, #1
   1752c:	str	r8, [r5, #76]	; 0x4c
   17530:	sub	sp, fp, #28
   17534:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   17538:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1753c:	add	fp, sp, #28
   17540:	sub	sp, sp, #708	; 0x2c4
   17544:	sub	sp, sp, #4096	; 0x1000
   17548:	movw	r4, #4688	; 0x1250
   1754c:	movt	r4, #4
   17550:	ldr	r0, [r4, #40]	; 0x28
   17554:	cmp	r0, #4
   17558:	bhi	18974 <__assert_fail@plt+0x68e8>
   1755c:	add	r1, pc, #0
   17560:	ldr	pc, [r1, r0, lsl #2]
   17564:	andeq	r7, r1, r8, ror r5
   17568:	andeq	r8, r1, r0, lsl #13
   1756c:	andeq	r8, r1, ip, lsl #14
   17570:	andeq	r8, r1, ip, ror r9
   17574:	andeq	r8, r1, r0, ror r6
   17578:	ldr	r0, [r4, #76]	; 0x4c
   1757c:	cmp	r0, #0
   17580:	beq	18974 <__assert_fail@plt+0x68e8>
   17584:	sub	lr, fp, #1024	; 0x400
   17588:	movw	r8, #4816	; 0x12d0
   1758c:	mov	sl, #0
   17590:	mov	r5, #0
   17594:	sub	r0, lr, #69	; 0x45
   17598:	movt	r8, #4
   1759c:	add	r0, r0, #1
   175a0:	str	r0, [sp, #20]
   175a4:	movw	r0, #4936	; 0x1348
   175a8:	movt	r0, #4
   175ac:	add	r0, r0, #44	; 0x2c
   175b0:	str	r0, [sp, #28]
   175b4:	ldrb	r0, [r4, #1]
   175b8:	cmp	r0, #0
   175bc:	beq	17648 <__assert_fail@plt+0x55bc>
   175c0:	movw	r0, #456	; 0x1c8
   175c4:	movt	r0, #4
   175c8:	ldr	r1, [r0, #32]
   175cc:	cmp	r1, #0
   175d0:	beq	17648 <__assert_fail@plt+0x55bc>
   175d4:	movw	r0, #456	; 0x1c8
   175d8:	cmp	r1, #2
   175dc:	movt	r0, #4
   175e0:	ldr	r0, [r0, #36]	; 0x24
   175e4:	beq	17600 <__assert_fail@plt+0x5574>
   175e8:	cmp	r1, #1
   175ec:	bne	17620 <__assert_fail@plt+0x5594>
   175f0:	ldrb	r0, [r0]
   175f4:	cmp	r0, #48	; 0x30
   175f8:	bne	17620 <__assert_fail@plt+0x5594>
   175fc:	b	17648 <__assert_fail@plt+0x55bc>
   17600:	movw	r1, #52640	; 0xcda0
   17604:	mov	r2, #2
   17608:	movt	r1, #2
   1760c:	bl	1202c <strncmp@plt>
   17610:	movw	r4, #4688	; 0x1250
   17614:	cmp	r0, #0
   17618:	movt	r4, #4
   1761c:	beq	17648 <__assert_fail@plt+0x55bc>
   17620:	movw	r4, #456	; 0x1c8
   17624:	movt	r4, #4
   17628:	mov	r0, r4
   1762c:	bl	19174 <__assert_fail@plt+0x70e8>
   17630:	add	r0, r4, #32
   17634:	bl	19174 <__assert_fail@plt+0x70e8>
   17638:	add	r0, r4, #8
   1763c:	bl	19174 <__assert_fail@plt+0x70e8>
   17640:	movw	r4, #4688	; 0x1250
   17644:	movt	r4, #4
   17648:	ldr	r0, [r8, #12]
   1764c:	ldr	r6, [r0, r5, lsl #2]
   17650:	ldrb	r0, [r6, #132]	; 0x84
   17654:	cmp	r0, #0
   17658:	beq	1769c <__assert_fail@plt+0x5610>
   1765c:	sub	lr, fp, #1024	; 0x400
   17660:	add	r0, r6, #16
   17664:	sub	r1, lr, #69	; 0x45
   17668:	bl	1ffb4 <__assert_fail@plt+0xdf28>
   1766c:	movw	r4, #4688	; 0x1250
   17670:	movt	r4, #4
   17674:	ldrb	r0, [r4, #26]
   17678:	cmp	r0, #0
   1767c:	beq	176dc <__assert_fail@plt+0x5650>
   17680:	ldr	r0, [r6, #136]	; 0x88
   17684:	cmp	r0, #1
   17688:	beq	176e4 <__assert_fail@plt+0x5658>
   1768c:	cmp	r0, #2
   17690:	bne	176ec <__assert_fail@plt+0x5660>
   17694:	mov	r0, #43	; 0x2b
   17698:	b	176e8 <__assert_fail@plt+0x565c>
   1769c:	ldr	r0, [r6, #120]	; 0x78
   176a0:	movw	r1, #54551	; 0xd517
   176a4:	movt	r1, #2
   176a8:	ldrb	r0, [r1, r0]
   176ac:	movw	r1, #16191	; 0x3f3f
   176b0:	strb	r0, [fp, #-1093]	; 0xfffffbbb
   176b4:	ldr	r0, [sp, #20]
   176b8:	strh	r1, [r0, #8]
   176bc:	movw	r1, #16191	; 0x3f3f
   176c0:	movt	r1, #16191	; 0x3f3f
   176c4:	str	r1, [r0, #4]
   176c8:	str	r1, [r0]
   176cc:	strb	sl, [fp, #-1082]	; 0xfffffbc6
   176d0:	ldrb	r0, [r4, #26]
   176d4:	cmp	r0, #0
   176d8:	bne	17680 <__assert_fail@plt+0x55f4>
   176dc:	mov	r0, #0
   176e0:	b	176e8 <__assert_fail@plt+0x565c>
   176e4:	mov	r0, #46	; 0x2e
   176e8:	strb	r0, [fp, #-1083]	; 0xfffffbc5
   176ec:	ldr	r0, [r4, #96]	; 0x60
   176f0:	cmp	r0, #3
   176f4:	bhi	18bf0 <__assert_fail@plt+0x6b64>
   176f8:	add	r2, pc, #8
   176fc:	add	r1, r6, #96	; 0x60
   17700:	str	r5, [sp, #36]	; 0x24
   17704:	ldr	pc, [r2, r0, lsl #2]
   17708:	andeq	r7, r1, r8, lsl r7
   1770c:	andeq	r7, r1, r8, asr #14
   17710:	andeq	r7, r1, r0, lsr #14
   17714:	andeq	r7, r1, r8, lsr #14
   17718:	ldrd	r0, [r1]
   1771c:	b	17750 <__assert_fail@plt+0x56c4>
   17720:	add	r0, r6, #88	; 0x58
   17724:	b	1774c <__assert_fail@plt+0x56c0>
   17728:	ldrd	r0, [r1]
   1772c:	str	r0, [sp, #88]	; 0x58
   17730:	str	r1, [sp, #92]	; 0x5c
   17734:	and	r0, r1, r0
   17738:	mvn	r1, #0
   1773c:	subs	r0, r0, r1
   17740:	movwne	r0, #1
   17744:	b	1775c <__assert_fail@plt+0x56d0>
   17748:	add	r0, r6, #104	; 0x68
   1774c:	ldrd	r0, [r0]
   17750:	str	r0, [sp, #88]	; 0x58
   17754:	str	r1, [sp, #92]	; 0x5c
   17758:	mov	r0, #1
   1775c:	str	r0, [sp, #32]
   17760:	ldrb	r0, [r4, #15]
   17764:	add	r5, sp, #96	; 0x60
   17768:	cmp	r0, #1
   1776c:	bne	177e4 <__assert_fail@plt+0x5758>
   17770:	ldrb	r0, [r6, #132]	; 0x84
   17774:	ldr	r4, [r8, #16]
   17778:	cmp	r0, #0
   1777c:	movw	r0, #54082	; 0xd342
   17780:	movt	r0, #2
   17784:	beq	177b4 <__assert_fail@plt+0x5728>
   17788:	add	r0, r6, #112	; 0x70
   1778c:	ldr	r2, [r0]
   17790:	ldr	r1, [r0, #4]
   17794:	orrs	r0, r2, r1
   17798:	movw	r0, #54082	; 0xd342
   1779c:	movt	r0, #2
   177a0:	beq	177b4 <__assert_fail@plt+0x5728>
   177a4:	sub	lr, fp, #1024	; 0x400
   177a8:	mov	r0, r2
   177ac:	sub	r2, lr, #57	; 0x39
   177b0:	bl	23040 <__assert_fail@plt+0x10fb4>
   177b4:	movw	r3, #54575	; 0xd52f
   177b8:	str	r4, [sp]
   177bc:	add	r4, sp, #96	; 0x60
   177c0:	str	r0, [sp, #4]
   177c4:	mov	r1, #1
   177c8:	movw	r2, #3643	; 0xe3b
   177cc:	movt	r3, #2
   177d0:	mov	r0, r4
   177d4:	bl	11edc <__sprintf_chk@plt>
   177d8:	add	r5, r4, r0
   177dc:	movw	r4, #4688	; 0x1250
   177e0:	movt	r4, #4
   177e4:	ldrb	r0, [r4, #8]
   177e8:	str	r6, [sp, #40]	; 0x28
   177ec:	cmp	r0, #1
   177f0:	bne	17894 <__assert_fail@plt+0x5808>
   177f4:	ldrb	r0, [r6, #132]	; 0x84
   177f8:	movw	r4, #54082	; 0xd342
   177fc:	movt	r4, #2
   17800:	cmp	r0, #0
   17804:	beq	1784c <__assert_fail@plt+0x57c0>
   17808:	movw	r2, #4688	; 0x1250
   1780c:	add	r0, r6, #80	; 0x50
   17810:	mov	r6, #512	; 0x200
   17814:	ldr	r7, [r8, #92]	; 0x5c
   17818:	sub	lr, fp, #1024	; 0x400
   1781c:	movt	r2, #4
   17820:	ldrd	r0, [r0]
   17824:	ldr	r3, [r2, #100]	; 0x64
   17828:	ldr	r2, [r8, #88]	; 0x58
   1782c:	str	r6, [sp]
   17830:	ldr	r6, [sp, #40]	; 0x28
   17834:	str	sl, [sp, #4]
   17838:	str	r7, [sp, #12]
   1783c:	str	r2, [sp, #8]
   17840:	sub	r2, lr, #57	; 0x39
   17844:	bl	21b38 <__assert_fail@plt+0xfaac>
   17848:	mov	r4, r0
   1784c:	ldr	r7, [r8, #20]
   17850:	mov	r0, r4
   17854:	mov	r1, #0
   17858:	bl	23588 <__assert_fail@plt+0x114fc>
   1785c:	sub	r7, r7, r0
   17860:	cmp	r7, #1
   17864:	blt	1787c <__assert_fail@plt+0x57f0>
   17868:	mov	r0, r5
   1786c:	mov	r1, #32
   17870:	mov	r2, r7
   17874:	bl	11ef4 <memset@plt>
   17878:	add	r5, r5, r7
   1787c:	ldrb	r0, [r4], #1
   17880:	strb	r0, [r5], #1
   17884:	cmp	r0, #0
   17888:	bne	1787c <__assert_fail@plt+0x57f0>
   1788c:	mov	r0, #32
   17890:	strb	r0, [r5, #-1]
   17894:	ldrb	r0, [r6, #132]	; 0x84
   17898:	ldr	r4, [r8, #24]
   1789c:	cmp	r0, #0
   178a0:	movw	r0, #54082	; 0xd342
   178a4:	movt	r0, #2
   178a8:	beq	178c0 <__assert_fail@plt+0x5834>
   178ac:	ldr	r0, [r6, #36]	; 0x24
   178b0:	sub	lr, fp, #1024	; 0x400
   178b4:	mov	r1, #0
   178b8:	sub	r2, lr, #57	; 0x39
   178bc:	bl	23040 <__assert_fail@plt+0x10fb4>
   178c0:	movw	r3, #54562	; 0xd522
   178c4:	sub	lr, fp, #1024	; 0x400
   178c8:	mvn	r2, #0
   178cc:	sub	r1, lr, #69	; 0x45
   178d0:	movt	r3, #2
   178d4:	stm	sp, {r1, r4}
   178d8:	str	r0, [sp, #8]
   178dc:	mov	r0, r5
   178e0:	mov	r1, #1
   178e4:	bl	11edc <__sprintf_chk@plt>
   178e8:	movw	r6, #4688	; 0x1250
   178ec:	mov	r4, r0
   178f0:	movt	r6, #4
   178f4:	ldrb	r0, [r6, #11]
   178f8:	cmp	r0, #0
   178fc:	beq	1795c <__assert_fail@plt+0x58d0>
   17900:	ldrd	r0, [r8, #80]	; 0x50
   17904:	adds	r0, r0, #2
   17908:	adc	r1, r1, #0
   1790c:	strd	r0, [r8, #80]	; 0x50
   17910:	movw	r0, #780	; 0x30c
   17914:	movt	r0, #4
   17918:	ldr	r7, [r0]
   1791c:	ldr	r0, [r7, #20]
   17920:	ldr	r1, [r7, #24]
   17924:	cmp	r0, r1
   17928:	bcs	185c0 <__assert_fail@plt+0x6534>
   1792c:	add	r1, r0, #1
   17930:	str	r1, [r7, #20]
   17934:	mov	r1, #32
   17938:	strb	r1, [r0]
   1793c:	ldr	r0, [r7, #20]
   17940:	ldr	r1, [r7, #24]
   17944:	cmp	r0, r1
   17948:	bcs	185e0 <__assert_fail@plt+0x6554>
   1794c:	add	r1, r0, #1
   17950:	str	r1, [r7, #20]
   17954:	mov	r1, #32
   17958:	strb	r1, [r0]
   1795c:	ldrb	r0, [r6, #14]
   17960:	add	r5, r5, r4
   17964:	cmp	r0, #1
   17968:	bne	17990 <__assert_fail@plt+0x5904>
   1796c:	ldrb	r0, [r6, #17]
   17970:	cmp	r0, #1
   17974:	bne	17990 <__assert_fail@plt+0x5904>
   17978:	ldrb	r0, [r6, #19]
   1797c:	cmp	r0, #0
   17980:	bne	17990 <__assert_fail@plt+0x5904>
   17984:	ldrb	r0, [r6, #7]
   17988:	cmp	r0, #1
   1798c:	bne	17e74 <__assert_fail@plt+0x5de8>
   17990:	movw	r7, #780	; 0x30c
   17994:	ldr	r4, [r8, #80]	; 0x50
   17998:	ldr	r1, [r8, #84]	; 0x54
   1799c:	add	r0, sp, #96	; 0x60
   179a0:	movt	r7, #4
   179a4:	sub	r2, r5, r0
   179a8:	ldr	r3, [r7]
   179ac:	adds	r4, r4, r2
   179b0:	adc	r1, r1, #0
   179b4:	str	r4, [r8, #80]	; 0x50
   179b8:	str	r1, [r8, #84]	; 0x54
   179bc:	mov	r1, #1
   179c0:	bl	11c90 <fwrite_unlocked@plt>
   179c4:	movw	r6, #4688	; 0x1250
   179c8:	movt	r6, #4
   179cc:	ldrb	r0, [r6, #14]
   179d0:	cmp	r0, #0
   179d4:	bne	17b10 <__assert_fail@plt+0x5a84>
   179d8:	ldr	r0, [sp, #40]	; 0x28
   179dc:	ldr	r4, [r8, #28]
   179e0:	movw	r5, #54082	; 0xd342
   179e4:	movt	r5, #2
   179e8:	ldrb	r0, [r0, #132]	; 0x84
   179ec:	cmp	r0, #0
   179f0:	beq	17a1c <__assert_fail@plt+0x5990>
   179f4:	ldr	r0, [sp, #40]	; 0x28
   179f8:	ldr	r7, [r0, #40]	; 0x28
   179fc:	ldrb	r0, [r6, #16]
   17a00:	cmp	r0, #0
   17a04:	bne	17ad8 <__assert_fail@plt+0x5a4c>
   17a08:	mov	r0, r7
   17a0c:	bl	22bf0 <__assert_fail@plt+0x10b64>
   17a10:	mov	r5, r0
   17a14:	cmp	r0, #0
   17a18:	beq	17ad8 <__assert_fail@plt+0x5a4c>
   17a1c:	mov	r0, r5
   17a20:	mov	r1, #0
   17a24:	bl	23588 <__assert_fail@plt+0x114fc>
   17a28:	mov	r7, r0
   17a2c:	mov	r0, r5
   17a30:	bl	11eac <strlen@plt>
   17a34:	mov	r2, r0
   17a38:	ldrd	r0, [r8, #80]	; 0x50
   17a3c:	adds	r0, r0, r2
   17a40:	adc	r1, r1, #0
   17a44:	strd	r0, [r8, #80]	; 0x50
   17a48:	movw	r0, #780	; 0x30c
   17a4c:	mov	r1, #1
   17a50:	movt	r0, #4
   17a54:	ldr	r3, [r0]
   17a58:	mov	r0, r5
   17a5c:	bl	11c90 <fwrite_unlocked@plt>
   17a60:	sub	r0, r4, r7
   17a64:	movw	r6, #4688	; 0x1250
   17a68:	movw	r7, #780	; 0x30c
   17a6c:	mov	r5, #32
   17a70:	bic	r0, r0, r0, asr #31
   17a74:	movt	r6, #4
   17a78:	movt	r7, #4
   17a7c:	add	r4, r0, #1
   17a80:	ldrd	r0, [r8, #80]	; 0x50
   17a84:	adds	r0, r0, #1
   17a88:	adc	r1, r1, #0
   17a8c:	strd	r0, [r8, #80]	; 0x50
   17a90:	ldr	r0, [r7]
   17a94:	ldr	r1, [r0, #20]
   17a98:	ldr	r2, [r0, #24]
   17a9c:	cmp	r1, r2
   17aa0:	bcs	17abc <__assert_fail@plt+0x5a30>
   17aa4:	add	r2, r1, #1
   17aa8:	str	r2, [r0, #20]
   17aac:	strb	r5, [r1]
   17ab0:	subs	r4, r4, #1
   17ab4:	bne	17a80 <__assert_fail@plt+0x59f4>
   17ab8:	b	17b10 <__assert_fail@plt+0x5a84>
   17abc:	mov	r1, #32
   17ac0:	bl	11f54 <__overflow@plt>
   17ac4:	movw	r6, #4688	; 0x1250
   17ac8:	movt	r6, #4
   17acc:	subs	r4, r4, #1
   17ad0:	bne	17a80 <__assert_fail@plt+0x59f4>
   17ad4:	b	17b10 <__assert_fail@plt+0x5a84>
   17ad8:	movw	r1, #54580	; 0xd534
   17adc:	mov	r0, #1
   17ae0:	mov	r2, r4
   17ae4:	stm	sp, {r7, sl}
   17ae8:	movt	r1, #2
   17aec:	bl	11f00 <__printf_chk@plt>
   17af0:	ldrd	r2, [r8, #80]	; 0x50
   17af4:	movw	r6, #4688	; 0x1250
   17af8:	movw	r7, #780	; 0x30c
   17afc:	movt	r6, #4
   17b00:	movt	r7, #4
   17b04:	adds	r2, r2, r0
   17b08:	adc	r3, r3, r0, asr #31
   17b0c:	strd	r2, [r8, #80]	; 0x50
   17b10:	ldrb	r0, [r6, #17]
   17b14:	cmp	r0, #0
   17b18:	bne	17c54 <__assert_fail@plt+0x5bc8>
   17b1c:	ldr	r0, [sp, #40]	; 0x28
   17b20:	ldr	r4, [r8, #32]
   17b24:	movw	r5, #54082	; 0xd342
   17b28:	movt	r5, #2
   17b2c:	ldrb	r0, [r0, #132]	; 0x84
   17b30:	cmp	r0, #0
   17b34:	beq	17b60 <__assert_fail@plt+0x5ad4>
   17b38:	ldr	r0, [sp, #40]	; 0x28
   17b3c:	ldr	r7, [r0, #44]	; 0x2c
   17b40:	ldrb	r0, [r6, #16]
   17b44:	cmp	r0, #0
   17b48:	bne	17c1c <__assert_fail@plt+0x5b90>
   17b4c:	mov	r0, r7
   17b50:	bl	22db8 <__assert_fail@plt+0x10d2c>
   17b54:	mov	r5, r0
   17b58:	cmp	r0, #0
   17b5c:	beq	17c1c <__assert_fail@plt+0x5b90>
   17b60:	mov	r0, r5
   17b64:	mov	r1, #0
   17b68:	bl	23588 <__assert_fail@plt+0x114fc>
   17b6c:	mov	r7, r0
   17b70:	mov	r0, r5
   17b74:	bl	11eac <strlen@plt>
   17b78:	mov	r2, r0
   17b7c:	ldrd	r0, [r8, #80]	; 0x50
   17b80:	adds	r0, r0, r2
   17b84:	adc	r1, r1, #0
   17b88:	strd	r0, [r8, #80]	; 0x50
   17b8c:	movw	r0, #780	; 0x30c
   17b90:	mov	r1, #1
   17b94:	movt	r0, #4
   17b98:	ldr	r3, [r0]
   17b9c:	mov	r0, r5
   17ba0:	bl	11c90 <fwrite_unlocked@plt>
   17ba4:	sub	r0, r4, r7
   17ba8:	movw	r6, #4688	; 0x1250
   17bac:	movw	r7, #780	; 0x30c
   17bb0:	mov	r5, #32
   17bb4:	bic	r0, r0, r0, asr #31
   17bb8:	movt	r6, #4
   17bbc:	movt	r7, #4
   17bc0:	add	r4, r0, #1
   17bc4:	ldrd	r0, [r8, #80]	; 0x50
   17bc8:	adds	r0, r0, #1
   17bcc:	adc	r1, r1, #0
   17bd0:	strd	r0, [r8, #80]	; 0x50
   17bd4:	ldr	r0, [r7]
   17bd8:	ldr	r1, [r0, #20]
   17bdc:	ldr	r2, [r0, #24]
   17be0:	cmp	r1, r2
   17be4:	bcs	17c00 <__assert_fail@plt+0x5b74>
   17be8:	add	r2, r1, #1
   17bec:	str	r2, [r0, #20]
   17bf0:	strb	r5, [r1]
   17bf4:	subs	r4, r4, #1
   17bf8:	bne	17bc4 <__assert_fail@plt+0x5b38>
   17bfc:	b	17c54 <__assert_fail@plt+0x5bc8>
   17c00:	mov	r1, #32
   17c04:	bl	11f54 <__overflow@plt>
   17c08:	movw	r6, #4688	; 0x1250
   17c0c:	movt	r6, #4
   17c10:	subs	r4, r4, #1
   17c14:	bne	17bc4 <__assert_fail@plt+0x5b38>
   17c18:	b	17c54 <__assert_fail@plt+0x5bc8>
   17c1c:	movw	r1, #54580	; 0xd534
   17c20:	mov	r0, #1
   17c24:	mov	r2, r4
   17c28:	stm	sp, {r7, sl}
   17c2c:	movt	r1, #2
   17c30:	bl	11f00 <__printf_chk@plt>
   17c34:	ldrd	r2, [r8, #80]	; 0x50
   17c38:	movw	r6, #4688	; 0x1250
   17c3c:	movw	r7, #780	; 0x30c
   17c40:	movt	r6, #4
   17c44:	movt	r7, #4
   17c48:	adds	r2, r2, r0
   17c4c:	adc	r3, r3, r0, asr #31
   17c50:	strd	r2, [r8, #80]	; 0x50
   17c54:	ldrb	r0, [r6, #19]
   17c58:	cmp	r0, #1
   17c5c:	bne	17d98 <__assert_fail@plt+0x5d0c>
   17c60:	ldr	r0, [sp, #40]	; 0x28
   17c64:	ldr	r4, [r8, #36]	; 0x24
   17c68:	movw	r5, #54082	; 0xd342
   17c6c:	movt	r5, #2
   17c70:	ldrb	r0, [r0, #132]	; 0x84
   17c74:	cmp	r0, #0
   17c78:	beq	17ca4 <__assert_fail@plt+0x5c18>
   17c7c:	ldr	r0, [sp, #40]	; 0x28
   17c80:	ldr	r7, [r0, #40]	; 0x28
   17c84:	ldrb	r0, [r6, #16]
   17c88:	cmp	r0, #0
   17c8c:	bne	17d60 <__assert_fail@plt+0x5cd4>
   17c90:	mov	r0, r7
   17c94:	bl	22bf0 <__assert_fail@plt+0x10b64>
   17c98:	mov	r5, r0
   17c9c:	cmp	r0, #0
   17ca0:	beq	17d60 <__assert_fail@plt+0x5cd4>
   17ca4:	mov	r0, r5
   17ca8:	mov	r1, #0
   17cac:	bl	23588 <__assert_fail@plt+0x114fc>
   17cb0:	mov	r7, r0
   17cb4:	mov	r0, r5
   17cb8:	bl	11eac <strlen@plt>
   17cbc:	mov	r2, r0
   17cc0:	ldrd	r0, [r8, #80]	; 0x50
   17cc4:	adds	r0, r0, r2
   17cc8:	adc	r1, r1, #0
   17ccc:	strd	r0, [r8, #80]	; 0x50
   17cd0:	movw	r0, #780	; 0x30c
   17cd4:	mov	r1, #1
   17cd8:	movt	r0, #4
   17cdc:	ldr	r3, [r0]
   17ce0:	mov	r0, r5
   17ce4:	bl	11c90 <fwrite_unlocked@plt>
   17ce8:	sub	r0, r4, r7
   17cec:	movw	r6, #4688	; 0x1250
   17cf0:	movw	r7, #780	; 0x30c
   17cf4:	mov	r5, #32
   17cf8:	bic	r0, r0, r0, asr #31
   17cfc:	movt	r6, #4
   17d00:	movt	r7, #4
   17d04:	add	r4, r0, #1
   17d08:	ldrd	r0, [r8, #80]	; 0x50
   17d0c:	adds	r0, r0, #1
   17d10:	adc	r1, r1, #0
   17d14:	strd	r0, [r8, #80]	; 0x50
   17d18:	ldr	r0, [r7]
   17d1c:	ldr	r1, [r0, #20]
   17d20:	ldr	r2, [r0, #24]
   17d24:	cmp	r1, r2
   17d28:	bcs	17d44 <__assert_fail@plt+0x5cb8>
   17d2c:	add	r2, r1, #1
   17d30:	str	r2, [r0, #20]
   17d34:	strb	r5, [r1]
   17d38:	subs	r4, r4, #1
   17d3c:	bne	17d08 <__assert_fail@plt+0x5c7c>
   17d40:	b	17d98 <__assert_fail@plt+0x5d0c>
   17d44:	mov	r1, #32
   17d48:	bl	11f54 <__overflow@plt>
   17d4c:	movw	r6, #4688	; 0x1250
   17d50:	movt	r6, #4
   17d54:	subs	r4, r4, #1
   17d58:	bne	17d08 <__assert_fail@plt+0x5c7c>
   17d5c:	b	17d98 <__assert_fail@plt+0x5d0c>
   17d60:	movw	r1, #54580	; 0xd534
   17d64:	mov	r0, #1
   17d68:	mov	r2, r4
   17d6c:	stm	sp, {r7, sl}
   17d70:	movt	r1, #2
   17d74:	bl	11f00 <__printf_chk@plt>
   17d78:	ldrd	r2, [r8, #80]	; 0x50
   17d7c:	movw	r6, #4688	; 0x1250
   17d80:	movw	r7, #780	; 0x30c
   17d84:	movt	r6, #4
   17d88:	movt	r7, #4
   17d8c:	adds	r2, r2, r0
   17d90:	adc	r3, r3, r0, asr #31
   17d94:	strd	r2, [r8, #80]	; 0x50
   17d98:	ldrb	r0, [r6, #7]
   17d9c:	add	r5, sp, #96	; 0x60
   17da0:	cmp	r0, #1
   17da4:	bne	17e74 <__assert_fail@plt+0x5de8>
   17da8:	ldr	r0, [sp, #40]	; 0x28
   17dac:	ldr	r4, [r8, #40]	; 0x28
   17db0:	ldr	r5, [r0, #128]	; 0x80
   17db4:	cmp	r5, #0
   17db8:	beq	17f88 <__assert_fail@plt+0x5efc>
   17dbc:	mov	r0, r5
   17dc0:	mov	r1, #0
   17dc4:	bl	23588 <__assert_fail@plt+0x114fc>
   17dc8:	mov	r6, r7
   17dcc:	mov	r7, r0
   17dd0:	mov	r0, r5
   17dd4:	bl	11eac <strlen@plt>
   17dd8:	mov	r2, r0
   17ddc:	ldrd	r0, [r8, #80]	; 0x50
   17de0:	ldr	r3, [r6]
   17de4:	adds	r0, r0, r2
   17de8:	adc	r1, r1, #0
   17dec:	strd	r0, [r8, #80]	; 0x50
   17df0:	mov	r0, r5
   17df4:	mov	r1, #1
   17df8:	bl	11c90 <fwrite_unlocked@plt>
   17dfc:	sub	r0, r4, r7
   17e00:	movw	r6, #4688	; 0x1250
   17e04:	movw	r7, #780	; 0x30c
   17e08:	mov	r5, #32
   17e0c:	bic	r0, r0, r0, asr #31
   17e10:	movt	r6, #4
   17e14:	movt	r7, #4
   17e18:	add	r4, r0, #1
   17e1c:	ldrd	r0, [r8, #80]	; 0x50
   17e20:	adds	r0, r0, #1
   17e24:	adc	r1, r1, #0
   17e28:	strd	r0, [r8, #80]	; 0x50
   17e2c:	ldr	r0, [r7]
   17e30:	ldr	r1, [r0, #20]
   17e34:	ldr	r2, [r0, #24]
   17e38:	cmp	r1, r2
   17e3c:	bcs	17e58 <__assert_fail@plt+0x5dcc>
   17e40:	add	r2, r1, #1
   17e44:	str	r2, [r0, #20]
   17e48:	strb	r5, [r1]
   17e4c:	subs	r4, r4, #1
   17e50:	bne	17e1c <__assert_fail@plt+0x5d90>
   17e54:	b	17e70 <__assert_fail@plt+0x5de4>
   17e58:	mov	r1, #32
   17e5c:	bl	11f54 <__overflow@plt>
   17e60:	movw	r6, #4688	; 0x1250
   17e64:	movt	r6, #4
   17e68:	subs	r4, r4, #1
   17e6c:	bne	17e1c <__assert_fail@plt+0x5d90>
   17e70:	add	r5, sp, #96	; 0x60
   17e74:	ldr	r9, [sp, #40]	; 0x28
   17e78:	ldrb	r0, [r9, #132]	; 0x84
   17e7c:	cmp	r0, #0
   17e80:	beq	17fd0 <__assert_fail@plt+0x5f44>
   17e84:	ldr	r0, [r9, #32]
   17e88:	and	r0, r0, #45056	; 0xb000
   17e8c:	orr	r0, r0, #16384	; 0x4000
   17e90:	cmp	r0, #24576	; 0x6000
   17e94:	bne	17f48 <__assert_fail@plt+0x5ebc>
   17e98:	add	r7, r9, #48	; 0x30
   17e9c:	ldr	r4, [r8, #44]	; 0x2c
   17ea0:	ldr	r6, [r8, #48]	; 0x30
   17ea4:	sub	lr, fp, #1024	; 0x400
   17ea8:	ldrd	r0, [r7]
   17eac:	sub	r2, lr, #57	; 0x39
   17eb0:	lsr	r1, r1, #12
   17eb4:	lsr	r0, r0, #8
   17eb8:	bfi	r0, r1, #12, #20
   17ebc:	ldr	r1, [r8, #52]	; 0x34
   17ec0:	str	r1, [sp, #24]
   17ec4:	mov	r1, #0
   17ec8:	bl	23040 <__assert_fail@plt+0x10fb4>
   17ecc:	ldrd	r2, [r7]
   17ed0:	mov	sl, r0
   17ed4:	ldr	r7, [r8, #48]	; 0x30
   17ed8:	mov	r1, #0
   17edc:	lsr	r0, r2, #12
   17ee0:	orr	r0, r0, r3, lsl #20
   17ee4:	bfi	r0, r2, #0, #8
   17ee8:	sub	r2, fp, #80	; 0x50
   17eec:	bl	23040 <__assert_fail@plt+0x10fb4>
   17ef0:	ldr	r1, [sp, #24]
   17ef4:	movw	r3, #54570	; 0xd52a
   17ef8:	movt	r3, #2
   17efc:	sub	r1, r1, #2
   17f00:	sub	r2, r1, r4
   17f04:	sub	r2, r2, r6
   17f08:	cmp	r2, #0
   17f0c:	mvn	r2, #0
   17f10:	subgt	r4, r1, r6
   17f14:	mov	r1, #1
   17f18:	stm	sp, {r4, sl}
   17f1c:	str	r0, [sp, #12]
   17f20:	mov	r0, r5
   17f24:	str	r7, [sp, #8]
   17f28:	bl	11edc <__sprintf_chk@plt>
   17f2c:	movw	r3, #4688	; 0x1250
   17f30:	movw	r7, #780	; 0x30c
   17f34:	add	r5, r5, r0
   17f38:	mov	r6, r9
   17f3c:	movt	r3, #4
   17f40:	movt	r7, #4
   17f44:	b	18034 <__assert_fail@plt+0x5fa8>
   17f48:	movw	r2, #648	; 0x288
   17f4c:	add	r0, r9, #64	; 0x40
   17f50:	ldr	r3, [r6, #104]	; 0x68
   17f54:	mov	r6, #1
   17f58:	sub	lr, fp, #1024	; 0x400
   17f5c:	movt	r2, #4
   17f60:	ldrd	r0, [r0]
   17f64:	ldr	r7, [r2, #12]
   17f68:	ldr	r2, [r2, #8]
   17f6c:	stm	sp, {r6, sl}
   17f70:	str	r2, [sp, #8]
   17f74:	sub	r2, lr, #57	; 0x39
   17f78:	str	r7, [sp, #12]
   17f7c:	bl	21b38 <__assert_fail@plt+0xfaac>
   17f80:	mov	r4, r0
   17f84:	b	17fd8 <__assert_fail@plt+0x5f4c>
   17f88:	movw	r1, #54580	; 0xd534
   17f8c:	mov	r0, #1
   17f90:	mov	r2, r4
   17f94:	str	sl, [sp]
   17f98:	str	sl, [sp, #4]
   17f9c:	movt	r1, #2
   17fa0:	bl	11f00 <__printf_chk@plt>
   17fa4:	ldrd	r2, [r8, #80]	; 0x50
   17fa8:	movw	r6, #4688	; 0x1250
   17fac:	add	r5, sp, #96	; 0x60
   17fb0:	movt	r6, #4
   17fb4:	adds	r2, r2, r0
   17fb8:	adc	r3, r3, r0, asr #31
   17fbc:	strd	r2, [r8, #80]	; 0x50
   17fc0:	ldr	r9, [sp, #40]	; 0x28
   17fc4:	ldrb	r0, [r9, #132]	; 0x84
   17fc8:	cmp	r0, #0
   17fcc:	bne	17e84 <__assert_fail@plt+0x5df8>
   17fd0:	movw	r4, #54082	; 0xd342
   17fd4:	movt	r4, #2
   17fd8:	ldr	r7, [r8, #52]	; 0x34
   17fdc:	mov	r0, r4
   17fe0:	mov	r1, #0
   17fe4:	bl	23588 <__assert_fail@plt+0x114fc>
   17fe8:	sub	r7, r7, r0
   17fec:	cmp	r7, #1
   17ff0:	blt	18008 <__assert_fail@plt+0x5f7c>
   17ff4:	mov	r0, r5
   17ff8:	mov	r1, #32
   17ffc:	mov	r2, r7
   18000:	bl	11ef4 <memset@plt>
   18004:	add	r5, r5, r7
   18008:	ldr	r6, [sp, #40]	; 0x28
   1800c:	movw	r3, #4688	; 0x1250
   18010:	movw	r7, #780	; 0x30c
   18014:	movt	r3, #4
   18018:	movt	r7, #4
   1801c:	ldrb	r0, [r4], #1
   18020:	strb	r0, [r5], #1
   18024:	cmp	r0, #0
   18028:	bne	1801c <__assert_fail@plt+0x5f90>
   1802c:	mov	r0, #32
   18030:	strb	r0, [r5, #-1]
   18034:	mov	r0, #1
   18038:	strb	r0, [r5]
   1803c:	ldr	r0, [sp, #32]
   18040:	eor	r9, r0, #1
   18044:	ldrb	r0, [r6, #132]	; 0x84
   18048:	cmp	r0, #0
   1804c:	beq	181a0 <__assert_fail@plt+0x6114>
   18050:	cmp	r9, #0
   18054:	bne	181a0 <__assert_fail@plt+0x6114>
   18058:	ldr	r0, [r3, #56]	; 0x38
   1805c:	add	r1, sp, #88	; 0x58
   18060:	add	r2, sp, #44	; 0x2c
   18064:	bl	282fc <_obstack_memory_used@@Base+0x24a8>
   18068:	cmp	r0, #0
   1806c:	beq	1818c <__assert_fail@plt+0x6100>
   18070:	ldr	r1, [r8, #68]	; 0x44
   18074:	ldr	r2, [sp, #88]	; 0x58
   18078:	ldr	r3, [r8, #72]	; 0x48
   1807c:	ldr	ip, [sp, #92]	; 0x5c
   18080:	mov	r7, #0
   18084:	mov	r4, #0
   18088:	cmp	r1, r2
   1808c:	movwgt	r7, #1
   18090:	sublt	r7, r7, #1
   18094:	cmp	r3, ip
   18098:	movwgt	r4, #1
   1809c:	sublt	r4, r4, #1
   180a0:	add	r7, r4, r7, lsl #1
   180a4:	cmn	r7, #1
   180a8:	bgt	180c4 <__assert_fail@plt+0x6038>
   180ac:	add	r0, r8, #68	; 0x44
   180b0:	bl	20594 <__assert_fail@plt+0xe508>
   180b4:	ldr	r1, [r8, #68]	; 0x44
   180b8:	ldr	r3, [r8, #72]	; 0x48
   180bc:	ldr	r2, [sp, #88]	; 0x58
   180c0:	ldr	ip, [sp, #92]	; 0x5c
   180c4:	movw	r0, #15700	; 0x3d54
   180c8:	mov	lr, #0
   180cc:	movt	r0, #65295	; 0xff0f
   180d0:	add	r7, r1, r0
   180d4:	mov	r0, #0
   180d8:	cmp	r7, r2
   180dc:	mov	r7, #0
   180e0:	movwgt	r0, #1
   180e4:	sublt	r0, r0, #1
   180e8:	cmp	r3, ip
   180ec:	mov	r3, #0
   180f0:	movwlt	r3, #1
   180f4:	movwgt	r7, #1
   180f8:	sub	r4, r7, r3
   180fc:	add	r0, r4, r0, lsl #1
   18100:	cmn	r0, #1
   18104:	bgt	18124 <__assert_fail@plt+0x6098>
   18108:	cmp	r2, r1
   1810c:	mov	r0, #0
   18110:	sub	r1, r3, r7
   18114:	movwgt	r0, #1
   18118:	sublt	r0, r0, #1
   1811c:	add	r0, r1, r0, lsl #1
   18120:	lsr	lr, r0, #31
   18124:	movw	r0, #4688	; 0x1250
   18128:	movt	r0, #4
   1812c:	ldr	r1, [r0, #56]	; 0x38
   18130:	ldrb	r0, [r0, #23]
   18134:	cmp	r0, #1
   18138:	bne	18158 <__assert_fail@plt+0x60cc>
   1813c:	movw	r2, #1224	; 0x4c8
   18140:	add	r0, lr, lr, lsl #1
   18144:	movt	r2, #4
   18148:	add	r0, r2, r0, lsl #9
   1814c:	ldr	r2, [sp, #60]	; 0x3c
   18150:	add	r2, r0, r2, lsl #7
   18154:	b	18168 <__assert_fail@plt+0x60dc>
   18158:	movw	r0, #648	; 0x288
   1815c:	movt	r0, #4
   18160:	add	r0, r0, lr, lsl #2
   18164:	ldr	r2, [r0, #16]
   18168:	movw	r7, #780	; 0x30c
   1816c:	stm	sp, {r1, ip}
   18170:	mov	r0, r5
   18174:	movw	r1, #1001	; 0x3e9
   18178:	add	r3, sp, #44	; 0x2c
   1817c:	movt	r7, #4
   18180:	bl	23e64 <__assert_fail@plt+0x11dd8>
   18184:	cmp	r0, #0
   18188:	bne	182bc <__assert_fail@plt+0x6230>
   1818c:	ldrb	r0, [r5]
   18190:	movw	r3, #4688	; 0x1250
   18194:	movt	r3, #4
   18198:	cmp	r0, #0
   1819c:	beq	182b8 <__assert_fail@plt+0x622c>
   181a0:	movw	r0, #648	; 0x288
   181a4:	movt	r0, #4
   181a8:	ldr	r4, [r0, #4]
   181ac:	cmn	r4, #1
   181b0:	bgt	18260 <__assert_fail@plt+0x61d4>
   181b4:	mov	r0, #0
   181b8:	sub	r6, fp, #80	; 0x50
   181bc:	sub	r1, fp, #36	; 0x24
   181c0:	mov	r4, r3
   181c4:	str	r0, [fp, #-36]	; 0xffffffdc
   181c8:	ldr	r0, [r3, #56]	; 0x38
   181cc:	mov	r2, r6
   181d0:	bl	282fc <_obstack_memory_used@@Base+0x24a8>
   181d4:	movw	sl, #648	; 0x288
   181d8:	cmp	r0, #0
   181dc:	movt	sl, #4
   181e0:	beq	1824c <__assert_fail@plt+0x61c0>
   181e4:	ldrb	r0, [r4, #23]
   181e8:	ldr	r1, [r4, #56]	; 0x38
   181ec:	ldr	r4, [fp, #-64]	; 0xffffffc0
   181f0:	ldr	r2, [sl, #16]
   181f4:	sub	lr, fp, #1024	; 0x400
   181f8:	mov	r3, r6
   181fc:	cmp	r0, #0
   18200:	movw	r0, #1224	; 0x4c8
   18204:	str	r1, [sp]
   18208:	mov	r1, #0
   1820c:	movt	r0, #4
   18210:	str	r1, [sp, #4]
   18214:	movw	r1, #1001	; 0x3e9
   18218:	addne	r2, r0, r4, lsl #7
   1821c:	sub	r0, lr, #57	; 0x39
   18220:	bl	23e64 <__assert_fail@plt+0x11dd8>
   18224:	cmp	r0, #0
   18228:	beq	1824c <__assert_fail@plt+0x61c0>
   1822c:	sub	lr, fp, #1024	; 0x400
   18230:	mov	r1, r0
   18234:	mov	r2, #0
   18238:	sub	r0, lr, #57	; 0x39
   1823c:	bl	235b0 <__assert_fail@plt+0x11524>
   18240:	mov	r4, r0
   18244:	str	r0, [sl, #4]
   18248:	b	18250 <__assert_fail@plt+0x61c4>
   1824c:	ldr	r4, [sl, #4]
   18250:	ldr	r6, [sp, #40]	; 0x28
   18254:	cmn	r4, #1
   18258:	movle	r4, #0
   1825c:	strle	r4, [sl, #4]
   18260:	ldrb	r0, [r6, #132]	; 0x84
   18264:	clz	r0, r0
   18268:	lsr	r0, r0, #5
   1826c:	orrs	r0, r0, r9
   18270:	movw	r0, #54082	; 0xd342
   18274:	movt	r0, #2
   18278:	bne	18290 <__assert_fail@plt+0x6204>
   1827c:	ldr	r0, [sp, #88]	; 0x58
   18280:	sub	lr, fp, #1024	; 0x400
   18284:	sub	r2, lr, #57	; 0x39
   18288:	asr	r1, r0, #31
   1828c:	bl	22f80 <__assert_fail@plt+0x10ef4>
   18290:	movw	r3, #54575	; 0xd52f
   18294:	str	r0, [sp, #4]
   18298:	mov	r0, r5
   1829c:	mov	r1, #1
   182a0:	mvn	r2, #0
   182a4:	str	r4, [sp]
   182a8:	movt	r3, #2
   182ac:	bl	11edc <__sprintf_chk@plt>
   182b0:	add	r1, r5, r0
   182b4:	b	182c8 <__assert_fail@plt+0x623c>
   182b8:	mov	r0, #0
   182bc:	mov	r1, #32
   182c0:	strb	r1, [r5, r0]!
   182c4:	add	r1, r5, #1
   182c8:	add	r0, sp, #96	; 0x60
   182cc:	ldr	r2, [r8, #80]	; 0x50
   182d0:	ldr	r3, [r7]
   182d4:	mov	sl, #0
   182d8:	sub	r5, r1, r0
   182dc:	ldr	r1, [r8, #84]	; 0x54
   182e0:	adds	r2, r2, r5
   182e4:	adc	r1, r1, #0
   182e8:	str	r2, [r8, #80]	; 0x50
   182ec:	mov	r2, r5
   182f0:	str	r1, [r8, #84]	; 0x54
   182f4:	mov	r1, #1
   182f8:	bl	11c90 <fwrite_unlocked@plt>
   182fc:	ldr	r2, [sp, #28]
   18300:	mov	r0, r6
   18304:	mov	r1, #0
   18308:	mov	r3, r5
   1830c:	bl	1da24 <__assert_fail@plt+0xb998>
   18310:	mov	r7, r0
   18314:	ldr	r0, [r6, #120]	; 0x78
   18318:	cmp	r0, #6
   1831c:	bne	18430 <__assert_fail@plt+0x63a4>
   18320:	ldr	r0, [r6, #4]
   18324:	movw	r4, #4688	; 0x1250
   18328:	movt	r4, #4
   1832c:	cmp	r0, #0
   18330:	beq	184b8 <__assert_fail@plt+0x642c>
   18334:	ldrd	r0, [r8, #80]	; 0x50
   18338:	adds	r0, r0, #4
   1833c:	adc	r1, r1, #0
   18340:	strd	r0, [r8, #80]	; 0x50
   18344:	movw	r0, #780	; 0x30c
   18348:	movt	r0, #4
   1834c:	ldr	r9, [r0]
   18350:	ldr	r0, [r9, #20]
   18354:	ldr	r1, [r9, #24]
   18358:	cmp	r0, r1
   1835c:	bcs	18608 <__assert_fail@plt+0x657c>
   18360:	add	r1, r0, #1
   18364:	str	r1, [r9, #20]
   18368:	mov	r1, #32
   1836c:	strb	r1, [r0]
   18370:	ldr	r0, [r9, #20]
   18374:	ldr	r1, [r9, #24]
   18378:	cmp	r0, r1
   1837c:	bcs	18620 <__assert_fail@plt+0x6594>
   18380:	add	r1, r0, #1
   18384:	str	r1, [r9, #20]
   18388:	mov	r1, #45	; 0x2d
   1838c:	strb	r1, [r0]
   18390:	ldr	r0, [r9, #20]
   18394:	ldr	r1, [r9, #24]
   18398:	cmp	r0, r1
   1839c:	bcs	18638 <__assert_fail@plt+0x65ac>
   183a0:	add	r1, r0, #1
   183a4:	str	r1, [r9, #20]
   183a8:	mov	r1, #62	; 0x3e
   183ac:	strb	r1, [r0]
   183b0:	ldr	r0, [r9, #20]
   183b4:	ldr	r1, [r9, #24]
   183b8:	cmp	r0, r1
   183bc:	bcs	18650 <__assert_fail@plt+0x65c4>
   183c0:	add	r1, r0, #1
   183c4:	str	r1, [r9, #20]
   183c8:	mov	r1, #32
   183cc:	strb	r1, [r0]
   183d0:	add	r0, r5, r7
   183d4:	mov	r1, #1
   183d8:	mov	r2, #0
   183dc:	add	r3, r0, #4
   183e0:	mov	r0, r6
   183e4:	bl	1da24 <__assert_fail@plt+0xb998>
   183e8:	movw	r4, #4688	; 0x1250
   183ec:	mov	sl, #0
   183f0:	movt	r4, #4
   183f4:	ldr	r1, [r4, #48]	; 0x30
   183f8:	cmp	r1, #0
   183fc:	beq	184b8 <__assert_fail@plt+0x642c>
   18400:	ldr	r2, [r6, #124]	; 0x7c
   18404:	and	r0, r2, #61440	; 0xf000
   18408:	cmp	r0, #16384	; 0x4000
   1840c:	beq	18474 <__assert_fail@plt+0x63e8>
   18410:	cmp	r0, #32768	; 0x8000
   18414:	bne	18564 <__assert_fail@plt+0x64d8>
   18418:	cmp	r1, #3
   1841c:	bne	184b8 <__assert_fail@plt+0x642c>
   18420:	ands	r0, r2, #73	; 0x49
   18424:	mov	r1, #42	; 0x2a
   18428:	bne	18478 <__assert_fail@plt+0x63ec>
   1842c:	b	184b8 <__assert_fail@plt+0x642c>
   18430:	movw	r4, #4688	; 0x1250
   18434:	movt	r4, #4
   18438:	ldr	r3, [r4, #48]	; 0x30
   1843c:	cmp	r3, #0
   18440:	beq	184b8 <__assert_fail@plt+0x642c>
   18444:	ldrb	r7, [r6, #132]	; 0x84
   18448:	ldr	r2, [r6, #32]
   1844c:	cmp	r7, #0
   18450:	beq	18518 <__assert_fail@plt+0x648c>
   18454:	and	r1, r2, #61440	; 0xf000
   18458:	cmp	r1, #16384	; 0x4000
   1845c:	beq	18474 <__assert_fail@plt+0x63e8>
   18460:	cmp	r1, #32768	; 0x8000
   18464:	bne	18534 <__assert_fail@plt+0x64a8>
   18468:	cmp	r3, #3
   1846c:	beq	18420 <__assert_fail@plt+0x6394>
   18470:	b	184b8 <__assert_fail@plt+0x642c>
   18474:	mov	r1, #47	; 0x2f
   18478:	ldr	r0, [r8, #80]	; 0x50
   1847c:	ldr	r3, [r8, #84]	; 0x54
   18480:	adds	r0, r0, #1
   18484:	str	r0, [r8, #80]	; 0x50
   18488:	movw	r0, #780	; 0x30c
   1848c:	adc	r3, r3, #0
   18490:	movt	r0, #4
   18494:	str	r3, [r8, #84]	; 0x54
   18498:	ldr	r0, [r0]
   1849c:	ldr	r2, [r0, #20]
   184a0:	ldr	r3, [r0, #24]
   184a4:	cmp	r2, r3
   184a8:	bcs	18660 <__assert_fail@plt+0x65d4>
   184ac:	add	r3, r2, #1
   184b0:	str	r3, [r0, #20]
   184b4:	strb	r1, [r2]
   184b8:	ldrd	r0, [r8, #80]	; 0x50
   184bc:	adds	r0, r0, #1
   184c0:	adc	r1, r1, #0
   184c4:	strd	r0, [r8, #80]	; 0x50
   184c8:	ldrb	r0, [r4, #20]
   184cc:	mov	r1, #10
   184d0:	cmp	r0, #0
   184d4:	movw	r0, #780	; 0x30c
   184d8:	movt	r0, #4
   184dc:	movwne	r1, #0
   184e0:	ldr	r0, [r0]
   184e4:	ldr	r2, [r0, #20]
   184e8:	ldr	r3, [r0, #24]
   184ec:	cmp	r2, r3
   184f0:	bcs	185b0 <__assert_fail@plt+0x6524>
   184f4:	add	r3, r2, #1
   184f8:	str	r3, [r0, #20]
   184fc:	strb	r1, [r2]
   18500:	ldr	r5, [sp, #36]	; 0x24
   18504:	ldr	r0, [r4, #76]	; 0x4c
   18508:	add	r5, r5, #1
   1850c:	cmp	r5, r0
   18510:	bcc	175b4 <__assert_fail@plt+0x5528>
   18514:	b	18974 <__assert_fail@plt+0x68e8>
   18518:	mov	r1, #47	; 0x2f
   1851c:	cmp	r0, #3
   18520:	beq	18478 <__assert_fail@plt+0x63ec>
   18524:	cmp	r0, #5
   18528:	beq	184b8 <__assert_fail@plt+0x642c>
   1852c:	cmp	r0, #9
   18530:	beq	18478 <__assert_fail@plt+0x63ec>
   18534:	cmp	r3, #1
   18538:	beq	184b8 <__assert_fail@plt+0x642c>
   1853c:	cmp	r7, #0
   18540:	beq	18588 <__assert_fail@plt+0x64fc>
   18544:	and	r0, r2, #61440	; 0xf000
   18548:	cmp	r0, #4096	; 0x1000
   1854c:	beq	185a0 <__assert_fail@plt+0x6514>
   18550:	cmp	r0, #40960	; 0xa000
   18554:	beq	185a8 <__assert_fail@plt+0x651c>
   18558:	cmp	r0, #49152	; 0xc000
   1855c:	beq	18598 <__assert_fail@plt+0x650c>
   18560:	b	184b8 <__assert_fail@plt+0x642c>
   18564:	cmp	r1, #1
   18568:	beq	184b8 <__assert_fail@plt+0x642c>
   1856c:	cmp	r0, #49152	; 0xc000
   18570:	beq	18598 <__assert_fail@plt+0x650c>
   18574:	cmp	r0, #40960	; 0xa000
   18578:	beq	185a8 <__assert_fail@plt+0x651c>
   1857c:	cmp	r0, #4096	; 0x1000
   18580:	bne	184b8 <__assert_fail@plt+0x642c>
   18584:	b	185a0 <__assert_fail@plt+0x6514>
   18588:	cmp	r0, #1
   1858c:	beq	185a0 <__assert_fail@plt+0x6514>
   18590:	cmp	r0, #7
   18594:	bne	184b8 <__assert_fail@plt+0x642c>
   18598:	mov	r1, #61	; 0x3d
   1859c:	b	18478 <__assert_fail@plt+0x63ec>
   185a0:	mov	r1, #124	; 0x7c
   185a4:	b	18478 <__assert_fail@plt+0x63ec>
   185a8:	mov	r1, #64	; 0x40
   185ac:	b	18478 <__assert_fail@plt+0x63ec>
   185b0:	bl	11f54 <__overflow@plt>
   185b4:	movw	r4, #4688	; 0x1250
   185b8:	movt	r4, #4
   185bc:	b	18500 <__assert_fail@plt+0x6474>
   185c0:	mov	r0, r7
   185c4:	mov	r1, #32
   185c8:	bl	11f54 <__overflow@plt>
   185cc:	movw	r6, #4688	; 0x1250
   185d0:	cmn	r0, #1
   185d4:	movt	r6, #4
   185d8:	bne	1793c <__assert_fail@plt+0x58b0>
   185dc:	b	1795c <__assert_fail@plt+0x58d0>
   185e0:	mov	r0, r7
   185e4:	mov	r1, #32
   185e8:	bl	11f54 <__overflow@plt>
   185ec:	movw	r6, #4688	; 0x1250
   185f0:	movt	r6, #4
   185f4:	ldrb	r0, [r6, #14]
   185f8:	add	r5, r5, r4
   185fc:	cmp	r0, #1
   18600:	beq	1796c <__assert_fail@plt+0x58e0>
   18604:	b	17990 <__assert_fail@plt+0x5904>
   18608:	mov	r0, r9
   1860c:	mov	r1, #32
   18610:	bl	11f54 <__overflow@plt>
   18614:	cmn	r0, #1
   18618:	bne	18370 <__assert_fail@plt+0x62e4>
   1861c:	b	183d0 <__assert_fail@plt+0x6344>
   18620:	mov	r0, r9
   18624:	mov	r1, #45	; 0x2d
   18628:	bl	11f54 <__overflow@plt>
   1862c:	cmn	r0, #1
   18630:	bne	18390 <__assert_fail@plt+0x6304>
   18634:	b	183d0 <__assert_fail@plt+0x6344>
   18638:	mov	r0, r9
   1863c:	mov	r1, #62	; 0x3e
   18640:	bl	11f54 <__overflow@plt>
   18644:	cmn	r0, #1
   18648:	bne	183b0 <__assert_fail@plt+0x6324>
   1864c:	b	183d0 <__assert_fail@plt+0x6344>
   18650:	mov	r0, r9
   18654:	mov	r1, #32
   18658:	bl	11f54 <__overflow@plt>
   1865c:	b	183d0 <__assert_fail@plt+0x6344>
   18660:	bl	11f54 <__overflow@plt>
   18664:	movw	r4, #4688	; 0x1250
   18668:	movt	r4, #4
   1866c:	b	184b8 <__assert_fail@plt+0x642c>
   18670:	mov	r0, #44	; 0x2c
   18674:	sub	sp, fp, #28
   18678:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1867c:	b	1d8a8 <__assert_fail@plt+0xb81c>
   18680:	ldr	r0, [r4, #76]	; 0x4c
   18684:	cmp	r0, #0
   18688:	beq	18974 <__assert_fail@plt+0x68e8>
   1868c:	movw	r5, #4816	; 0x12d0
   18690:	movw	r6, #780	; 0x30c
   18694:	mov	r4, #0
   18698:	movt	r5, #4
   1869c:	movt	r6, #4
   186a0:	ldr	r0, [r5, #12]
   186a4:	mov	r1, #0
   186a8:	ldr	r0, [r0, r4, lsl #2]
   186ac:	bl	1d5a0 <__assert_fail@plt+0xb514>
   186b0:	movw	r7, #4688	; 0x1250
   186b4:	mov	r1, #10
   186b8:	movt	r7, #4
   186bc:	ldrb	r0, [r7, #20]
   186c0:	cmp	r0, #0
   186c4:	ldr	r0, [r6]
   186c8:	movwne	r1, #0
   186cc:	ldr	r2, [r0, #20]
   186d0:	ldr	r3, [r0, #24]
   186d4:	cmp	r2, r3
   186d8:	bcs	186fc <__assert_fail@plt+0x6670>
   186dc:	add	r3, r2, #1
   186e0:	str	r3, [r0, #20]
   186e4:	strb	r1, [r2]
   186e8:	ldr	r0, [r7, #76]	; 0x4c
   186ec:	add	r4, r4, #1
   186f0:	cmp	r4, r0
   186f4:	bcc	186a0 <__assert_fail@plt+0x6614>
   186f8:	b	18974 <__assert_fail@plt+0x68e8>
   186fc:	bl	11f54 <__overflow@plt>
   18700:	movw	r7, #4688	; 0x1250
   18704:	movt	r7, #4
   18708:	b	186e8 <__assert_fail@plt+0x665c>
   1870c:	ldr	r0, [r4, #112]	; 0x70
   18710:	cmp	r0, #0
   18714:	beq	18ba0 <__assert_fail@plt+0x6b14>
   18718:	mov	r0, #1
   1871c:	bl	1e41c <__assert_fail@plt+0xc390>
   18720:	movw	r1, #4688	; 0x1250
   18724:	movt	r1, #4
   18728:	ldr	r1, [r1, #76]	; 0x4c
   1872c:	udiv	r7, r1, r0
   18730:	mls	r1, r7, r0, r1
   18734:	cmp	r1, #0
   18738:	addne	r7, r7, #1
   1873c:	cmp	r7, #0
   18740:	beq	18974 <__assert_fail@plt+0x68e8>
   18744:	movw	r1, #4816	; 0x12d0
   18748:	add	r0, r0, r0, lsl #1
   1874c:	mov	r4, #0
   18750:	movt	r1, #4
   18754:	ldr	r1, [r1, #60]	; 0x3c
   18758:	add	r0, r1, r0, lsl #2
   1875c:	sub	r0, r0, #4
   18760:	str	r0, [sp, #36]	; 0x24
   18764:	str	r7, [sp, #40]	; 0x28
   18768:	movw	r0, #4816	; 0x12d0
   1876c:	movt	r0, #4
   18770:	ldr	r0, [r0, #12]
   18774:	ldr	r6, [r0, r4, lsl #2]
   18778:	mov	r0, r6
   1877c:	bl	1e144 <__assert_fail@plt+0xc0b8>
   18780:	mov	r5, r0
   18784:	ldr	r0, [sp, #36]	; 0x24
   18788:	mov	r1, #0
   1878c:	ldr	r0, [r0]
   18790:	ldr	sl, [r0]
   18794:	mov	r0, r6
   18798:	bl	1d5a0 <__assert_fail@plt+0xb514>
   1879c:	movw	r6, #4688	; 0x1250
   187a0:	add	r8, r4, r7
   187a4:	str	r4, [sp, #32]
   187a8:	movt	r6, #4
   187ac:	ldr	r0, [r6, #76]	; 0x4c
   187b0:	cmp	r8, r0
   187b4:	bcs	1891c <__assert_fail@plt+0x6890>
   187b8:	mov	r0, #0
   187bc:	mov	r9, #1
   187c0:	b	1881c <__assert_fail@plt+0x6790>
   187c4:	movw	r0, #4816	; 0x12d0
   187c8:	movt	r0, #4
   187cc:	ldr	r0, [r0, #12]
   187d0:	ldr	r6, [r0, r8, lsl #2]
   187d4:	mov	r0, r6
   187d8:	bl	1e144 <__assert_fail@plt+0xc0b8>
   187dc:	mov	r5, r0
   187e0:	ldr	r0, [sp, #36]	; 0x24
   187e4:	mov	r1, r4
   187e8:	ldr	r0, [r0]
   187ec:	ldr	sl, [r0, r9, lsl #2]
   187f0:	mov	r0, r6
   187f4:	bl	1d5a0 <__assert_fail@plt+0xb514>
   187f8:	ldr	r0, [sp, #40]	; 0x28
   187fc:	movw	r6, #4688	; 0x1250
   18800:	add	r9, r9, #1
   18804:	movt	r6, #4
   18808:	add	r8, r8, r0
   1880c:	ldr	r0, [r6, #76]	; 0x4c
   18810:	cmp	r8, r0
   18814:	mov	r0, r4
   18818:	bcs	1891c <__assert_fail@plt+0x6890>
   1881c:	movw	r7, #780	; 0x30c
   18820:	add	r4, r0, sl
   18824:	add	r5, r0, r5
   18828:	mov	ip, #32
   1882c:	mov	lr, #9
   18830:	movt	r7, #4
   18834:	cmp	r5, r4
   18838:	bcs	187c4 <__assert_fail@plt+0x6738>
   1883c:	ldr	r1, [r6, #36]	; 0x24
   18840:	cmp	r1, #0
   18844:	beq	1889c <__assert_fail@plt+0x6810>
   18848:	add	r2, r5, #1
   1884c:	udiv	r0, r4, r1
   18850:	udiv	r2, r2, r1
   18854:	cmp	r0, r2
   18858:	bls	1889c <__assert_fail@plt+0x6810>
   1885c:	ldr	r0, [r7]
   18860:	ldr	r2, [r0, #20]
   18864:	ldr	r3, [r0, #24]
   18868:	cmp	r2, r3
   1886c:	bcs	188fc <__assert_fail@plt+0x6870>
   18870:	add	r3, r2, #1
   18874:	str	r3, [r0, #20]
   18878:	strb	lr, [r2]
   1887c:	udiv	r0, r5, r1
   18880:	mul	r0, r0, r1
   18884:	sub	r0, r0, r5
   18888:	add	r0, r1, r0
   1888c:	add	r5, r0, r5
   18890:	cmp	r5, r4
   18894:	bcc	1883c <__assert_fail@plt+0x67b0>
   18898:	b	187c4 <__assert_fail@plt+0x6738>
   1889c:	ldr	r0, [r7]
   188a0:	ldr	r1, [r0, #20]
   188a4:	ldr	r2, [r0, #24]
   188a8:	cmp	r1, r2
   188ac:	bcs	188d0 <__assert_fail@plt+0x6844>
   188b0:	add	r2, r1, #1
   188b4:	str	r2, [r0, #20]
   188b8:	strb	ip, [r1]
   188bc:	mov	r0, #1
   188c0:	add	r5, r0, r5
   188c4:	cmp	r5, r4
   188c8:	bcc	1883c <__assert_fail@plt+0x67b0>
   188cc:	b	187c4 <__assert_fail@plt+0x6738>
   188d0:	mov	r1, #32
   188d4:	bl	11f54 <__overflow@plt>
   188d8:	movw	r6, #4688	; 0x1250
   188dc:	mov	lr, #9
   188e0:	mov	ip, #32
   188e4:	movt	r6, #4
   188e8:	mov	r0, #1
   188ec:	add	r5, r0, r5
   188f0:	cmp	r5, r4
   188f4:	bcc	1883c <__assert_fail@plt+0x67b0>
   188f8:	b	187c4 <__assert_fail@plt+0x6738>
   188fc:	mov	r1, #9
   18900:	bl	11f54 <__overflow@plt>
   18904:	movw	r6, #4688	; 0x1250
   18908:	mov	lr, #9
   1890c:	mov	ip, #32
   18910:	movt	r6, #4
   18914:	ldr	r1, [r6, #36]	; 0x24
   18918:	b	1887c <__assert_fail@plt+0x67f0>
   1891c:	ldrb	r0, [r6, #20]
   18920:	mov	r1, #10
   18924:	cmp	r0, #0
   18928:	movw	r0, #780	; 0x30c
   1892c:	movt	r0, #4
   18930:	movwne	r1, #0
   18934:	ldr	r0, [r0]
   18938:	ldr	r2, [r0, #20]
   1893c:	ldr	r3, [r0, #24]
   18940:	cmp	r2, r3
   18944:	bcs	1896c <__assert_fail@plt+0x68e0>
   18948:	add	r3, r2, #1
   1894c:	str	r3, [r0, #20]
   18950:	strb	r1, [r2]
   18954:	ldr	r4, [sp, #32]
   18958:	ldr	r7, [sp, #40]	; 0x28
   1895c:	add	r4, r4, #1
   18960:	cmp	r4, r7
   18964:	bcc	18768 <__assert_fail@plt+0x66dc>
   18968:	b	18974 <__assert_fail@plt+0x68e8>
   1896c:	bl	11f54 <__overflow@plt>
   18970:	b	18954 <__assert_fail@plt+0x68c8>
   18974:	sub	sp, fp, #28
   18978:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1897c:	ldr	r0, [r4, #112]	; 0x70
   18980:	cmp	r0, #0
   18984:	beq	18ba0 <__assert_fail@plt+0x6b14>
   18988:	mov	r0, #0
   1898c:	mov	r8, #0
   18990:	bl	1e41c <__assert_fail@plt+0xc390>
   18994:	movw	r1, #4816	; 0x12d0
   18998:	add	r2, r0, r0, lsl #1
   1899c:	str	r0, [sp, #36]	; 0x24
   189a0:	movt	r1, #4
   189a4:	ldr	r3, [r1, #12]
   189a8:	ldr	r1, [r1, #60]	; 0x3c
   189ac:	ldr	r9, [r3]
   189b0:	add	r4, r1, r2, lsl #2
   189b4:	mov	r0, r9
   189b8:	bl	1e144 <__assert_fail@plt+0xc0b8>
   189bc:	mov	r6, r0
   189c0:	ldr	r0, [r4, #-4]!
   189c4:	mov	r1, #0
   189c8:	str	r4, [sp, #32]
   189cc:	ldr	r5, [r0]
   189d0:	mov	r0, r9
   189d4:	bl	1d5a0 <__assert_fail@plt+0xb514>
   189d8:	movw	r7, #4688	; 0x1250
   189dc:	movw	sl, #780	; 0x30c
   189e0:	movt	r7, #4
   189e4:	movt	sl, #4
   189e8:	ldr	r0, [r7, #76]	; 0x4c
   189ec:	cmp	r0, #2
   189f0:	bcc	18bb0 <__assert_fail@plt+0x6b24>
   189f4:	mov	r4, #1
   189f8:	mov	r9, #32
   189fc:	b	18a54 <__assert_fail@plt+0x69c8>
   18a00:	mov	r8, r5
   18a04:	movw	r0, #4816	; 0x12d0
   18a08:	mov	r1, r8
   18a0c:	movt	r0, #4
   18a10:	ldr	r0, [r0, #12]
   18a14:	ldr	r6, [r0, r4, lsl #2]
   18a18:	mov	r0, r6
   18a1c:	bl	1d5a0 <__assert_fail@plt+0xb514>
   18a20:	mov	r0, r6
   18a24:	bl	1e144 <__assert_fail@plt+0xc0b8>
   18a28:	mov	r6, r0
   18a2c:	ldr	r0, [sp, #32]
   18a30:	ldr	r1, [sp, #40]	; 0x28
   18a34:	movw	r7, #4688	; 0x1250
   18a38:	add	r4, r4, #1
   18a3c:	movt	r7, #4
   18a40:	ldr	r0, [r0]
   18a44:	ldr	r5, [r0, r1, lsl #2]
   18a48:	ldr	r0, [r7, #76]	; 0x4c
   18a4c:	cmp	r4, r0
   18a50:	bcs	18bb0 <__assert_fail@plt+0x6b24>
   18a54:	ldr	r1, [sp, #36]	; 0x24
   18a58:	udiv	r0, r4, r1
   18a5c:	mls	r0, r0, r1, r4
   18a60:	cmp	r0, #0
   18a64:	str	r0, [sp, #40]	; 0x28
   18a68:	beq	18a90 <__assert_fail@plt+0x6a04>
   18a6c:	add	r5, r8, r5
   18a70:	add	r6, r8, r6
   18a74:	cmp	r6, r5
   18a78:	bcs	18a00 <__assert_fail@plt+0x6974>
   18a7c:	mov	r8, #9
   18a80:	ldr	r1, [r7, #36]	; 0x24
   18a84:	cmp	r1, #0
   18a88:	bne	18af4 <__assert_fail@plt+0x6a68>
   18a8c:	b	18b48 <__assert_fail@plt+0x6abc>
   18a90:	ldrb	r0, [r7, #20]
   18a94:	mov	r1, #10
   18a98:	cmp	r0, #0
   18a9c:	ldr	r0, [sl]
   18aa0:	movwne	r1, #0
   18aa4:	ldr	r2, [r0, #20]
   18aa8:	ldr	r3, [r0, #24]
   18aac:	cmp	r2, r3
   18ab0:	bcs	18b94 <__assert_fail@plt+0x6b08>
   18ab4:	add	r3, r2, #1
   18ab8:	mov	r8, #0
   18abc:	str	r3, [r0, #20]
   18ac0:	strb	r1, [r2]
   18ac4:	b	18a04 <__assert_fail@plt+0x6978>
   18ac8:	mov	r1, #32
   18acc:	bl	11f54 <__overflow@plt>
   18ad0:	movw	r7, #4688	; 0x1250
   18ad4:	movt	r7, #4
   18ad8:	mov	r0, #1
   18adc:	add	r6, r0, r6
   18ae0:	cmp	r6, r5
   18ae4:	bcs	18a00 <__assert_fail@plt+0x6974>
   18ae8:	ldr	r1, [r7, #36]	; 0x24
   18aec:	cmp	r1, #0
   18af0:	beq	18b48 <__assert_fail@plt+0x6abc>
   18af4:	add	r2, r6, #1
   18af8:	udiv	r0, r5, r1
   18afc:	udiv	r2, r2, r1
   18b00:	cmp	r0, r2
   18b04:	bls	18b48 <__assert_fail@plt+0x6abc>
   18b08:	ldr	r0, [sl]
   18b0c:	ldr	r2, [r0, #20]
   18b10:	ldr	r3, [r0, #24]
   18b14:	cmp	r2, r3
   18b18:	bcs	18b7c <__assert_fail@plt+0x6af0>
   18b1c:	add	r3, r2, #1
   18b20:	str	r3, [r0, #20]
   18b24:	strb	r8, [r2]
   18b28:	udiv	r0, r6, r1
   18b2c:	mul	r0, r0, r1
   18b30:	sub	r0, r0, r6
   18b34:	add	r0, r1, r0
   18b38:	add	r6, r0, r6
   18b3c:	cmp	r6, r5
   18b40:	bcc	18ae8 <__assert_fail@plt+0x6a5c>
   18b44:	b	18a00 <__assert_fail@plt+0x6974>
   18b48:	ldr	r0, [sl]
   18b4c:	ldr	r1, [r0, #20]
   18b50:	ldr	r2, [r0, #24]
   18b54:	cmp	r1, r2
   18b58:	bcs	18ac8 <__assert_fail@plt+0x6a3c>
   18b5c:	add	r2, r1, #1
   18b60:	str	r2, [r0, #20]
   18b64:	strb	r9, [r1]
   18b68:	mov	r0, #1
   18b6c:	add	r6, r0, r6
   18b70:	cmp	r6, r5
   18b74:	bcc	18ae8 <__assert_fail@plt+0x6a5c>
   18b78:	b	18a00 <__assert_fail@plt+0x6974>
   18b7c:	mov	r1, #9
   18b80:	bl	11f54 <__overflow@plt>
   18b84:	movw	r7, #4688	; 0x1250
   18b88:	movt	r7, #4
   18b8c:	ldr	r1, [r7, #36]	; 0x24
   18b90:	b	18b28 <__assert_fail@plt+0x6a9c>
   18b94:	bl	11f54 <__overflow@plt>
   18b98:	mov	r8, #0
   18b9c:	b	18a04 <__assert_fail@plt+0x6978>
   18ba0:	mov	r0, #32
   18ba4:	sub	sp, fp, #28
   18ba8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   18bac:	b	1d8a8 <__assert_fail@plt+0xb81c>
   18bb0:	ldrb	r0, [r7, #20]
   18bb4:	mov	r1, #10
   18bb8:	cmp	r0, #0
   18bbc:	ldr	r0, [sl]
   18bc0:	movwne	r1, #0
   18bc4:	ldr	r2, [r0, #20]
   18bc8:	ldr	r3, [r0, #24]
   18bcc:	cmp	r2, r3
   18bd0:	addcc	r3, r2, #1
   18bd4:	strcc	r3, [r0, #20]
   18bd8:	strbcc	r1, [r2]
   18bdc:	subcc	sp, fp, #28
   18be0:	popcc	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   18be4:	sub	sp, fp, #28
   18be8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   18bec:	b	11f54 <__overflow@plt>
   18bf0:	bl	12038 <abort@plt>
   18bf4:	push	{fp, lr}
   18bf8:	mov	fp, sp
   18bfc:	sub	sp, sp, #56	; 0x38
   18c00:	mov	r4, r0
   18c04:	cmp	r0, #0
   18c08:	bne	19130 <__assert_fail@plt+0x70a4>
   18c0c:	movw	r1, #45389	; 0xb14d
   18c10:	mov	r0, #0
   18c14:	mov	r2, #5
   18c18:	movt	r1, #2
   18c1c:	bl	11ca8 <dcgettext@plt>
   18c20:	mov	r1, r0
   18c24:	movw	r0, #5048	; 0x13b8
   18c28:	movt	r0, #4
   18c2c:	ldr	r2, [r0]
   18c30:	mov	r0, #1
   18c34:	bl	11f00 <__printf_chk@plt>
   18c38:	movw	r1, #45422	; 0xb16e
   18c3c:	mov	r0, #0
   18c40:	mov	r2, #5
   18c44:	movt	r1, #2
   18c48:	bl	11ca8 <dcgettext@plt>
   18c4c:	movw	r7, #780	; 0x30c
   18c50:	movt	r7, #4
   18c54:	ldr	r1, [r7]
   18c58:	bl	11b94 <fputs_unlocked@plt>
   18c5c:	movw	r1, #54587	; 0xd53b
   18c60:	mov	r0, #0
   18c64:	mov	r2, #5
   18c68:	movt	r1, #2
   18c6c:	bl	11ca8 <dcgettext@plt>
   18c70:	ldr	r1, [r7]
   18c74:	bl	11b94 <fputs_unlocked@plt>
   18c78:	movw	r1, #45566	; 0xb1fe
   18c7c:	mov	r0, #0
   18c80:	mov	r2, #5
   18c84:	movt	r1, #2
   18c88:	bl	11ca8 <dcgettext@plt>
   18c8c:	ldr	r1, [r7]
   18c90:	bl	11b94 <fputs_unlocked@plt>
   18c94:	movw	r1, #45837	; 0xb30d
   18c98:	mov	r0, #0
   18c9c:	mov	r2, #5
   18ca0:	movt	r1, #2
   18ca4:	bl	11ca8 <dcgettext@plt>
   18ca8:	ldr	r1, [r7]
   18cac:	bl	11b94 <fputs_unlocked@plt>
   18cb0:	movw	r1, #45993	; 0xb3a9
   18cb4:	mov	r0, #0
   18cb8:	mov	r2, #5
   18cbc:	movt	r1, #2
   18cc0:	bl	11ca8 <dcgettext@plt>
   18cc4:	ldr	r1, [r7]
   18cc8:	bl	11b94 <fputs_unlocked@plt>
   18ccc:	movw	r1, #46355	; 0xb513
   18cd0:	mov	r0, #0
   18cd4:	mov	r2, #5
   18cd8:	movt	r1, #2
   18cdc:	bl	11ca8 <dcgettext@plt>
   18ce0:	ldr	r1, [r7]
   18ce4:	bl	11b94 <fputs_unlocked@plt>
   18ce8:	movw	r1, #46630	; 0xb626
   18cec:	mov	r0, #0
   18cf0:	mov	r2, #5
   18cf4:	movt	r1, #2
   18cf8:	bl	11ca8 <dcgettext@plt>
   18cfc:	ldr	r1, [r7]
   18d00:	bl	11b94 <fputs_unlocked@plt>
   18d04:	movw	r1, #47045	; 0xb7c5
   18d08:	mov	r0, #0
   18d0c:	mov	r2, #5
   18d10:	movt	r1, #2
   18d14:	bl	11ca8 <dcgettext@plt>
   18d18:	ldr	r1, [r7]
   18d1c:	bl	11b94 <fputs_unlocked@plt>
   18d20:	movw	r1, #47106	; 0xb802
   18d24:	mov	r0, #0
   18d28:	mov	r2, #5
   18d2c:	movt	r1, #2
   18d30:	bl	11ca8 <dcgettext@plt>
   18d34:	ldr	r1, [r7]
   18d38:	bl	11b94 <fputs_unlocked@plt>
   18d3c:	movw	r1, #47351	; 0xb8f7
   18d40:	mov	r0, #0
   18d44:	mov	r2, #5
   18d48:	movt	r1, #2
   18d4c:	bl	11ca8 <dcgettext@plt>
   18d50:	ldr	r1, [r7]
   18d54:	bl	11b94 <fputs_unlocked@plt>
   18d58:	movw	r1, #47424	; 0xb940
   18d5c:	mov	r0, #0
   18d60:	mov	r2, #5
   18d64:	movt	r1, #2
   18d68:	bl	11ca8 <dcgettext@plt>
   18d6c:	ldr	r1, [r7]
   18d70:	bl	11b94 <fputs_unlocked@plt>
   18d74:	movw	r1, #47574	; 0xb9d6
   18d78:	mov	r0, #0
   18d7c:	mov	r2, #5
   18d80:	movt	r1, #2
   18d84:	bl	11ca8 <dcgettext@plt>
   18d88:	ldr	r1, [r7]
   18d8c:	bl	11b94 <fputs_unlocked@plt>
   18d90:	movw	r1, #47996	; 0xbb7c
   18d94:	mov	r0, #0
   18d98:	mov	r2, #5
   18d9c:	movt	r1, #2
   18da0:	bl	11ca8 <dcgettext@plt>
   18da4:	ldr	r1, [r7]
   18da8:	bl	11b94 <fputs_unlocked@plt>
   18dac:	movw	r1, #48052	; 0xbbb4
   18db0:	mov	r0, #0
   18db4:	mov	r2, #5
   18db8:	movt	r1, #2
   18dbc:	bl	11ca8 <dcgettext@plt>
   18dc0:	ldr	r1, [r7]
   18dc4:	bl	11b94 <fputs_unlocked@plt>
   18dc8:	movw	r1, #48406	; 0xbd16
   18dcc:	mov	r0, #0
   18dd0:	mov	r2, #5
   18dd4:	movt	r1, #2
   18dd8:	bl	11ca8 <dcgettext@plt>
   18ddc:	ldr	r1, [r7]
   18de0:	bl	11b94 <fputs_unlocked@plt>
   18de4:	movw	r1, #48561	; 0xbdb1
   18de8:	mov	r0, #0
   18dec:	mov	r2, #5
   18df0:	movt	r1, #2
   18df4:	bl	11ca8 <dcgettext@plt>
   18df8:	ldr	r1, [r7]
   18dfc:	bl	11b94 <fputs_unlocked@plt>
   18e00:	movw	r1, #48920	; 0xbf18
   18e04:	mov	r0, #0
   18e08:	mov	r2, #5
   18e0c:	movt	r1, #2
   18e10:	bl	11ca8 <dcgettext@plt>
   18e14:	ldr	r1, [r7]
   18e18:	bl	11b94 <fputs_unlocked@plt>
   18e1c:	movw	r1, #49223	; 0xc047
   18e20:	mov	r0, #0
   18e24:	mov	r2, #5
   18e28:	movt	r1, #2
   18e2c:	bl	11ca8 <dcgettext@plt>
   18e30:	ldr	r1, [r7]
   18e34:	bl	11b94 <fputs_unlocked@plt>
   18e38:	movw	r1, #49808	; 0xc290
   18e3c:	mov	r0, #0
   18e40:	mov	r2, #5
   18e44:	movt	r1, #2
   18e48:	bl	11ca8 <dcgettext@plt>
   18e4c:	ldr	r1, [r7]
   18e50:	bl	11b94 <fputs_unlocked@plt>
   18e54:	movw	r1, #50005	; 0xc355
   18e58:	mov	r0, #0
   18e5c:	mov	r2, #5
   18e60:	movt	r1, #2
   18e64:	bl	11ca8 <dcgettext@plt>
   18e68:	ldr	r1, [r7]
   18e6c:	bl	11b94 <fputs_unlocked@plt>
   18e70:	movw	r1, #50646	; 0xc5d6
   18e74:	mov	r0, #0
   18e78:	mov	r2, #5
   18e7c:	movt	r1, #2
   18e80:	bl	11ca8 <dcgettext@plt>
   18e84:	ldr	r1, [r7]
   18e88:	bl	11b94 <fputs_unlocked@plt>
   18e8c:	movw	r1, #50725	; 0xc625
   18e90:	mov	r0, #0
   18e94:	mov	r2, #5
   18e98:	movt	r1, #2
   18e9c:	bl	11ca8 <dcgettext@plt>
   18ea0:	ldr	r1, [r7]
   18ea4:	bl	11b94 <fputs_unlocked@plt>
   18ea8:	movw	r1, #50866	; 0xc6b2
   18eac:	mov	r0, #0
   18eb0:	mov	r2, #5
   18eb4:	movt	r1, #2
   18eb8:	bl	11ca8 <dcgettext@plt>
   18ebc:	ldr	r1, [r7]
   18ec0:	bl	11b94 <fputs_unlocked@plt>
   18ec4:	movw	r1, #51238	; 0xc826
   18ec8:	mov	r0, #0
   18ecc:	mov	r2, #5
   18ed0:	movt	r1, #2
   18ed4:	bl	11ca8 <dcgettext@plt>
   18ed8:	ldr	r1, [r7]
   18edc:	bl	11b94 <fputs_unlocked@plt>
   18ee0:	movw	r1, #51646	; 0xc9be
   18ee4:	mov	r0, #0
   18ee8:	mov	r2, #5
   18eec:	movt	r1, #2
   18ef0:	bl	11ca8 <dcgettext@plt>
   18ef4:	ldr	r1, [r7]
   18ef8:	bl	11b94 <fputs_unlocked@plt>
   18efc:	movw	r1, #51691	; 0xc9eb
   18f00:	mov	r0, #0
   18f04:	mov	r2, #5
   18f08:	movt	r1, #2
   18f0c:	bl	11ca8 <dcgettext@plt>
   18f10:	ldr	r1, [r7]
   18f14:	bl	11b94 <fputs_unlocked@plt>
   18f18:	movw	r1, #54662	; 0xd586
   18f1c:	mov	r0, #0
   18f20:	mov	r2, #5
   18f24:	movt	r1, #2
   18f28:	bl	11ca8 <dcgettext@plt>
   18f2c:	ldr	r1, [r7]
   18f30:	bl	11b94 <fputs_unlocked@plt>
   18f34:	movw	r1, #51745	; 0xca21
   18f38:	mov	r0, #0
   18f3c:	mov	r2, #5
   18f40:	movt	r1, #2
   18f44:	bl	11ca8 <dcgettext@plt>
   18f48:	ldr	r1, [r7]
   18f4c:	bl	11b94 <fputs_unlocked@plt>
   18f50:	movw	r1, #52121	; 0xcb99
   18f54:	mov	r0, #0
   18f58:	mov	r2, #5
   18f5c:	movt	r1, #2
   18f60:	bl	11ca8 <dcgettext@plt>
   18f64:	ldr	r1, [r7]
   18f68:	bl	11b94 <fputs_unlocked@plt>
   18f6c:	movw	r1, #52197	; 0xcbe5
   18f70:	mov	r0, #0
   18f74:	mov	r2, #5
   18f78:	movt	r1, #2
   18f7c:	bl	11ca8 <dcgettext@plt>
   18f80:	ldr	r1, [r7]
   18f84:	bl	11b94 <fputs_unlocked@plt>
   18f88:	movw	r1, #52483	; 0xcd03
   18f8c:	mov	r0, #0
   18f90:	mov	r2, #5
   18f94:	movt	r1, #2
   18f98:	bl	11ca8 <dcgettext@plt>
   18f9c:	ldr	r1, [r7]
   18fa0:	bl	11b94 <fputs_unlocked@plt>
   18fa4:	movw	r1, #60872	; 0xedc8
   18fa8:	mov	r5, #48	; 0x30
   18fac:	movw	r0, #672	; 0x2a0
   18fb0:	mov	r6, sp
   18fb4:	movt	r1, #2
   18fb8:	movt	r0, #4
   18fbc:	add	r2, r1, #16
   18fc0:	add	r3, r1, #32
   18fc4:	vld1.64	{d16-d17}, [r1], r5
   18fc8:	ldr	r0, [r0]
   18fcc:	vld1.64	{d20-d21}, [r2]
   18fd0:	vldr	d22, [r1]
   18fd4:	add	r1, r6, #16
   18fd8:	vld1.64	{d18-d19}, [r3]
   18fdc:	add	r2, r6, #32
   18fe0:	cmp	r0, #2
   18fe4:	vst1.64	{d20-d21}, [r1]
   18fe8:	mov	r1, r6
   18fec:	vst1.64	{d18-d19}, [r2]
   18ff0:	movw	r2, #52635	; 0xcd9b
   18ff4:	vst1.64	{d16-d17}, [r1], r5
   18ff8:	movt	r2, #2
   18ffc:	movw	r5, #53006	; 0xcf0e
   19000:	vstr	d22, [r1]
   19004:	movw	r1, #53653	; 0xd195
   19008:	movt	r5, #2
   1900c:	movt	r1, #2
   19010:	moveq	r2, r1
   19014:	movw	r1, #45246	; 0xb0be
   19018:	cmp	r0, #1
   1901c:	movt	r1, #2
   19020:	movne	r5, r2
   19024:	mov	r0, r5
   19028:	bl	11bd0 <strcmp@plt>
   1902c:	cmp	r0, #0
   19030:	ldrne	r1, [r6, #8]!
   19034:	cmpne	r1, #0
   19038:	bne	19024 <__assert_fail@plt+0x6f98>
   1903c:	movw	r1, #54967	; 0xd6b7
   19040:	ldr	r6, [r6, #4]
   19044:	mov	r0, #0
   19048:	mov	r2, #5
   1904c:	movt	r1, #2
   19050:	bl	11ca8 <dcgettext@plt>
   19054:	movw	r2, #52995	; 0xcf03
   19058:	movw	r3, #54990	; 0xd6ce
   1905c:	mov	r1, r0
   19060:	mov	r0, #1
   19064:	movt	r2, #2
   19068:	movt	r3, #2
   1906c:	bl	11f00 <__printf_chk@plt>
   19070:	cmp	r6, #0
   19074:	mov	r0, #5
   19078:	mov	r1, #0
   1907c:	moveq	r6, r5
   19080:	bl	11f60 <setlocale@plt>
   19084:	cmp	r0, #0
   19088:	beq	190c0 <__assert_fail@plt+0x7034>
   1908c:	movw	r1, #55030	; 0xd6f6
   19090:	mov	r2, #3
   19094:	movt	r1, #2
   19098:	bl	1202c <strncmp@plt>
   1909c:	cmp	r0, #0
   190a0:	beq	190c0 <__assert_fail@plt+0x7034>
   190a4:	movw	r1, #55034	; 0xd6fa
   190a8:	mov	r0, #0
   190ac:	mov	r2, #5
   190b0:	movt	r1, #2
   190b4:	bl	11ca8 <dcgettext@plt>
   190b8:	ldr	r1, [r7]
   190bc:	bl	11b94 <fputs_unlocked@plt>
   190c0:	movw	r1, #55105	; 0xd741
   190c4:	mov	r0, #0
   190c8:	mov	r2, #5
   190cc:	movt	r1, #2
   190d0:	bl	11ca8 <dcgettext@plt>
   190d4:	movw	r2, #54990	; 0xd6ce
   190d8:	mov	r1, r0
   190dc:	mov	r0, #1
   190e0:	mov	r3, r5
   190e4:	movt	r2, #2
   190e8:	bl	11f00 <__printf_chk@plt>
   190ec:	movw	r1, #55132	; 0xd75c
   190f0:	mov	r0, #0
   190f4:	mov	r2, #5
   190f8:	movt	r1, #2
   190fc:	bl	11ca8 <dcgettext@plt>
   19100:	mov	r1, r0
   19104:	movw	r0, #54900	; 0xd674
   19108:	movw	r3, #54434	; 0xd4a2
   1910c:	cmp	r6, r5
   19110:	mov	r2, r6
   19114:	movt	r0, #2
   19118:	movt	r3, #2
   1911c:	moveq	r3, r0
   19120:	mov	r0, #1
   19124:	bl	11f00 <__printf_chk@plt>
   19128:	mov	r0, r4
   1912c:	bl	11e7c <exit@plt>
   19130:	movw	r0, #776	; 0x308
   19134:	movw	r1, #45350	; 0xb126
   19138:	mov	r2, #5
   1913c:	movt	r0, #4
   19140:	movt	r1, #2
   19144:	ldr	r5, [r0]
   19148:	mov	r0, #0
   1914c:	bl	11ca8 <dcgettext@plt>
   19150:	mov	r2, r0
   19154:	movw	r0, #5048	; 0x13b8
   19158:	mov	r1, #1
   1915c:	movt	r0, #4
   19160:	ldr	r3, [r0]
   19164:	mov	r0, r5
   19168:	bl	11f24 <__fprintf_chk@plt>
   1916c:	mov	r0, r4
   19170:	bl	11e7c <exit@plt>
   19174:	push	{r4, r5, fp, lr}
   19178:	add	fp, sp, #8
   1917c:	mov	r4, r0
   19180:	movw	r0, #4688	; 0x1250
   19184:	movt	r0, #4
   19188:	ldrb	r1, [r0, #13]
   1918c:	cmp	r1, #0
   19190:	bne	191e4 <__assert_fail@plt+0x7158>
   19194:	mov	r1, #1
   19198:	strb	r1, [r0, #13]
   1919c:	mov	r0, #1
   191a0:	bl	11ea0 <tcgetpgrp@plt>
   191a4:	cmp	r0, #0
   191a8:	movpl	r0, #1
   191ac:	blpl	19204 <__assert_fail@plt+0x7178>
   191b0:	movw	r5, #456	; 0x1c8
   191b4:	movt	r5, #4
   191b8:	ldr	r0, [r5, #20]
   191bc:	cmp	r0, #0
   191c0:	beq	191cc <__assert_fail@plt+0x7140>
   191c4:	add	r0, r5, #16
   191c8:	b	191e0 <__assert_fail@plt+0x7154>
   191cc:	mov	r0, r5
   191d0:	bl	19174 <__assert_fail@plt+0x70e8>
   191d4:	add	r0, r5, #24
   191d8:	bl	19174 <__assert_fail@plt+0x70e8>
   191dc:	add	r0, r5, #8
   191e0:	bl	19174 <__assert_fail@plt+0x70e8>
   191e4:	movw	r0, #780	; 0x30c
   191e8:	ldr	r1, [r4]
   191ec:	mov	r2, #1
   191f0:	movt	r0, #4
   191f4:	ldr	r3, [r0]
   191f8:	ldr	r0, [r4, #4]
   191fc:	pop	{r4, r5, fp, lr}
   19200:	b	11c90 <fwrite_unlocked@plt>
   19204:	push	{r4, sl, fp, lr}
   19208:	add	fp, sp, #8
   1920c:	sub	sp, sp, #144	; 0x90
   19210:	cmp	r0, #0
   19214:	beq	19678 <__assert_fail@plt+0x75ec>
   19218:	movw	r0, #1096	; 0x448
   1921c:	movt	r0, #4
   19220:	bl	11f6c <sigemptyset@plt>
   19224:	add	r2, sp, #4
   19228:	mov	r0, #20
   1922c:	mov	r1, #0
   19230:	bl	11d38 <sigaction@plt>
   19234:	ldr	r0, [sp, #4]
   19238:	cmp	r0, #1
   1923c:	beq	19250 <__assert_fail@plt+0x71c4>
   19240:	movw	r0, #1096	; 0x448
   19244:	mov	r1, #20
   19248:	movt	r0, #4
   1924c:	bl	11e04 <sigaddset@plt>
   19250:	add	r2, sp, #4
   19254:	mov	r0, #14
   19258:	mov	r1, #0
   1925c:	bl	11d38 <sigaction@plt>
   19260:	ldr	r0, [sp, #4]
   19264:	cmp	r0, #1
   19268:	beq	1927c <__assert_fail@plt+0x71f0>
   1926c:	movw	r0, #1096	; 0x448
   19270:	mov	r1, #14
   19274:	movt	r0, #4
   19278:	bl	11e04 <sigaddset@plt>
   1927c:	add	r2, sp, #4
   19280:	mov	r0, #1
   19284:	mov	r1, #0
   19288:	bl	11d38 <sigaction@plt>
   1928c:	ldr	r0, [sp, #4]
   19290:	cmp	r0, #1
   19294:	beq	192a8 <__assert_fail@plt+0x721c>
   19298:	movw	r0, #1096	; 0x448
   1929c:	mov	r1, #1
   192a0:	movt	r0, #4
   192a4:	bl	11e04 <sigaddset@plt>
   192a8:	add	r2, sp, #4
   192ac:	mov	r0, #2
   192b0:	mov	r1, #0
   192b4:	bl	11d38 <sigaction@plt>
   192b8:	ldr	r0, [sp, #4]
   192bc:	cmp	r0, #1
   192c0:	beq	192d4 <__assert_fail@plt+0x7248>
   192c4:	movw	r0, #1096	; 0x448
   192c8:	mov	r1, #2
   192cc:	movt	r0, #4
   192d0:	bl	11e04 <sigaddset@plt>
   192d4:	add	r2, sp, #4
   192d8:	mov	r0, #13
   192dc:	mov	r1, #0
   192e0:	bl	11d38 <sigaction@plt>
   192e4:	ldr	r0, [sp, #4]
   192e8:	cmp	r0, #1
   192ec:	beq	19300 <__assert_fail@plt+0x7274>
   192f0:	movw	r0, #1096	; 0x448
   192f4:	mov	r1, #13
   192f8:	movt	r0, #4
   192fc:	bl	11e04 <sigaddset@plt>
   19300:	add	r2, sp, #4
   19304:	mov	r0, #3
   19308:	mov	r1, #0
   1930c:	bl	11d38 <sigaction@plt>
   19310:	ldr	r0, [sp, #4]
   19314:	cmp	r0, #1
   19318:	beq	1932c <__assert_fail@plt+0x72a0>
   1931c:	movw	r0, #1096	; 0x448
   19320:	mov	r1, #3
   19324:	movt	r0, #4
   19328:	bl	11e04 <sigaddset@plt>
   1932c:	add	r2, sp, #4
   19330:	mov	r0, #15
   19334:	mov	r1, #0
   19338:	bl	11d38 <sigaction@plt>
   1933c:	ldr	r0, [sp, #4]
   19340:	cmp	r0, #1
   19344:	beq	19358 <__assert_fail@plt+0x72cc>
   19348:	movw	r0, #1096	; 0x448
   1934c:	mov	r1, #15
   19350:	movt	r0, #4
   19354:	bl	11e04 <sigaddset@plt>
   19358:	add	r2, sp, #4
   1935c:	mov	r0, #29
   19360:	mov	r1, #0
   19364:	bl	11d38 <sigaction@plt>
   19368:	ldr	r0, [sp, #4]
   1936c:	cmp	r0, #1
   19370:	beq	19384 <__assert_fail@plt+0x72f8>
   19374:	movw	r0, #1096	; 0x448
   19378:	mov	r1, #29
   1937c:	movt	r0, #4
   19380:	bl	11e04 <sigaddset@plt>
   19384:	add	r2, sp, #4
   19388:	mov	r0, #27
   1938c:	mov	r1, #0
   19390:	bl	11d38 <sigaction@plt>
   19394:	ldr	r0, [sp, #4]
   19398:	cmp	r0, #1
   1939c:	beq	193b0 <__assert_fail@plt+0x7324>
   193a0:	movw	r0, #1096	; 0x448
   193a4:	mov	r1, #27
   193a8:	movt	r0, #4
   193ac:	bl	11e04 <sigaddset@plt>
   193b0:	add	r2, sp, #4
   193b4:	mov	r0, #26
   193b8:	mov	r1, #0
   193bc:	bl	11d38 <sigaction@plt>
   193c0:	ldr	r0, [sp, #4]
   193c4:	cmp	r0, #1
   193c8:	beq	193dc <__assert_fail@plt+0x7350>
   193cc:	movw	r0, #1096	; 0x448
   193d0:	mov	r1, #26
   193d4:	movt	r0, #4
   193d8:	bl	11e04 <sigaddset@plt>
   193dc:	add	r2, sp, #4
   193e0:	mov	r0, #24
   193e4:	mov	r1, #0
   193e8:	bl	11d38 <sigaction@plt>
   193ec:	ldr	r0, [sp, #4]
   193f0:	cmp	r0, #1
   193f4:	beq	19408 <__assert_fail@plt+0x737c>
   193f8:	movw	r0, #1096	; 0x448
   193fc:	mov	r1, #24
   19400:	movt	r0, #4
   19404:	bl	11e04 <sigaddset@plt>
   19408:	add	r4, sp, #4
   1940c:	mov	r0, #25
   19410:	mov	r1, #0
   19414:	mov	r2, r4
   19418:	bl	11d38 <sigaction@plt>
   1941c:	ldr	r0, [sp, #4]
   19420:	cmp	r0, #1
   19424:	beq	19438 <__assert_fail@plt+0x73ac>
   19428:	movw	r0, #1096	; 0x448
   1942c:	mov	r1, #25
   19430:	movt	r0, #4
   19434:	bl	11e04 <sigaddset@plt>
   19438:	add	r0, r4, #4
   1943c:	movw	r4, #1096	; 0x448
   19440:	mov	r2, #128	; 0x80
   19444:	movt	r4, #4
   19448:	mov	r1, r4
   1944c:	bl	11c60 <memcpy@plt>
   19450:	mov	r0, #268435456	; 0x10000000
   19454:	mov	r1, #20
   19458:	str	r0, [sp, #136]	; 0x88
   1945c:	mov	r0, r4
   19460:	bl	11cc0 <sigismember@plt>
   19464:	cmp	r0, #0
   19468:	beq	19488 <__assert_fail@plt+0x73fc>
   1946c:	movw	r0, #38968	; 0x9838
   19470:	add	r1, sp, #4
   19474:	mov	r2, #0
   19478:	movt	r0, #1
   1947c:	str	r0, [sp, #4]
   19480:	mov	r0, #20
   19484:	bl	11d38 <sigaction@plt>
   19488:	movw	r0, #1096	; 0x448
   1948c:	mov	r1, #14
   19490:	movt	r0, #4
   19494:	bl	11cc0 <sigismember@plt>
   19498:	movw	r4, #39004	; 0x985c
   1949c:	cmp	r0, #0
   194a0:	movt	r4, #1
   194a4:	beq	194bc <__assert_fail@plt+0x7430>
   194a8:	add	r1, sp, #4
   194ac:	mov	r0, #14
   194b0:	mov	r2, #0
   194b4:	str	r4, [sp, #4]
   194b8:	bl	11d38 <sigaction@plt>
   194bc:	movw	r0, #1096	; 0x448
   194c0:	mov	r1, #1
   194c4:	movt	r0, #4
   194c8:	bl	11cc0 <sigismember@plt>
   194cc:	cmp	r0, #0
   194d0:	beq	194e8 <__assert_fail@plt+0x745c>
   194d4:	add	r1, sp, #4
   194d8:	mov	r0, #1
   194dc:	mov	r2, #0
   194e0:	str	r4, [sp, #4]
   194e4:	bl	11d38 <sigaction@plt>
   194e8:	movw	r0, #1096	; 0x448
   194ec:	mov	r1, #2
   194f0:	movt	r0, #4
   194f4:	bl	11cc0 <sigismember@plt>
   194f8:	cmp	r0, #0
   194fc:	beq	19514 <__assert_fail@plt+0x7488>
   19500:	add	r1, sp, #4
   19504:	mov	r0, #2
   19508:	mov	r2, #0
   1950c:	str	r4, [sp, #4]
   19510:	bl	11d38 <sigaction@plt>
   19514:	movw	r0, #1096	; 0x448
   19518:	mov	r1, #13
   1951c:	movt	r0, #4
   19520:	bl	11cc0 <sigismember@plt>
   19524:	cmp	r0, #0
   19528:	beq	19540 <__assert_fail@plt+0x74b4>
   1952c:	add	r1, sp, #4
   19530:	mov	r0, #13
   19534:	mov	r2, #0
   19538:	str	r4, [sp, #4]
   1953c:	bl	11d38 <sigaction@plt>
   19540:	movw	r0, #1096	; 0x448
   19544:	mov	r1, #3
   19548:	movt	r0, #4
   1954c:	bl	11cc0 <sigismember@plt>
   19550:	cmp	r0, #0
   19554:	beq	1956c <__assert_fail@plt+0x74e0>
   19558:	add	r1, sp, #4
   1955c:	mov	r0, #3
   19560:	mov	r2, #0
   19564:	str	r4, [sp, #4]
   19568:	bl	11d38 <sigaction@plt>
   1956c:	movw	r0, #1096	; 0x448
   19570:	mov	r1, #15
   19574:	movt	r0, #4
   19578:	bl	11cc0 <sigismember@plt>
   1957c:	cmp	r0, #0
   19580:	beq	19598 <__assert_fail@plt+0x750c>
   19584:	add	r1, sp, #4
   19588:	mov	r0, #15
   1958c:	mov	r2, #0
   19590:	str	r4, [sp, #4]
   19594:	bl	11d38 <sigaction@plt>
   19598:	movw	r0, #1096	; 0x448
   1959c:	mov	r1, #29
   195a0:	movt	r0, #4
   195a4:	bl	11cc0 <sigismember@plt>
   195a8:	cmp	r0, #0
   195ac:	beq	195c4 <__assert_fail@plt+0x7538>
   195b0:	add	r1, sp, #4
   195b4:	mov	r0, #29
   195b8:	mov	r2, #0
   195bc:	str	r4, [sp, #4]
   195c0:	bl	11d38 <sigaction@plt>
   195c4:	movw	r0, #1096	; 0x448
   195c8:	mov	r1, #27
   195cc:	movt	r0, #4
   195d0:	bl	11cc0 <sigismember@plt>
   195d4:	cmp	r0, #0
   195d8:	beq	195f0 <__assert_fail@plt+0x7564>
   195dc:	add	r1, sp, #4
   195e0:	mov	r0, #27
   195e4:	mov	r2, #0
   195e8:	str	r4, [sp, #4]
   195ec:	bl	11d38 <sigaction@plt>
   195f0:	movw	r0, #1096	; 0x448
   195f4:	mov	r1, #26
   195f8:	movt	r0, #4
   195fc:	bl	11cc0 <sigismember@plt>
   19600:	cmp	r0, #0
   19604:	beq	1961c <__assert_fail@plt+0x7590>
   19608:	add	r1, sp, #4
   1960c:	mov	r0, #26
   19610:	mov	r2, #0
   19614:	str	r4, [sp, #4]
   19618:	bl	11d38 <sigaction@plt>
   1961c:	movw	r0, #1096	; 0x448
   19620:	mov	r1, #24
   19624:	movt	r0, #4
   19628:	bl	11cc0 <sigismember@plt>
   1962c:	cmp	r0, #0
   19630:	beq	19648 <__assert_fail@plt+0x75bc>
   19634:	add	r1, sp, #4
   19638:	mov	r0, #24
   1963c:	mov	r2, #0
   19640:	str	r4, [sp, #4]
   19644:	bl	11d38 <sigaction@plt>
   19648:	movw	r0, #1096	; 0x448
   1964c:	mov	r1, #25
   19650:	movt	r0, #4
   19654:	bl	11cc0 <sigismember@plt>
   19658:	cmp	r0, #0
   1965c:	beq	19830 <__assert_fail@plt+0x77a4>
   19660:	add	r1, sp, #4
   19664:	mov	r0, #25
   19668:	mov	r2, #0
   1966c:	str	r4, [sp, #4]
   19670:	bl	11d38 <sigaction@plt>
   19674:	b	19830 <__assert_fail@plt+0x77a4>
   19678:	movw	r0, #1096	; 0x448
   1967c:	mov	r1, #20
   19680:	movt	r0, #4
   19684:	bl	11cc0 <sigismember@plt>
   19688:	cmp	r0, #0
   1968c:	beq	1969c <__assert_fail@plt+0x7610>
   19690:	mov	r0, #20
   19694:	mov	r1, #0
   19698:	bl	11c84 <signal@plt>
   1969c:	movw	r0, #1096	; 0x448
   196a0:	mov	r1, #14
   196a4:	movt	r0, #4
   196a8:	bl	11cc0 <sigismember@plt>
   196ac:	cmp	r0, #0
   196b0:	beq	196c0 <__assert_fail@plt+0x7634>
   196b4:	mov	r0, #14
   196b8:	mov	r1, #0
   196bc:	bl	11c84 <signal@plt>
   196c0:	movw	r0, #1096	; 0x448
   196c4:	mov	r1, #1
   196c8:	movt	r0, #4
   196cc:	bl	11cc0 <sigismember@plt>
   196d0:	cmp	r0, #0
   196d4:	beq	196e4 <__assert_fail@plt+0x7658>
   196d8:	mov	r0, #1
   196dc:	mov	r1, #0
   196e0:	bl	11c84 <signal@plt>
   196e4:	movw	r0, #1096	; 0x448
   196e8:	mov	r1, #2
   196ec:	movt	r0, #4
   196f0:	bl	11cc0 <sigismember@plt>
   196f4:	cmp	r0, #0
   196f8:	beq	19708 <__assert_fail@plt+0x767c>
   196fc:	mov	r0, #2
   19700:	mov	r1, #0
   19704:	bl	11c84 <signal@plt>
   19708:	movw	r0, #1096	; 0x448
   1970c:	mov	r1, #13
   19710:	movt	r0, #4
   19714:	bl	11cc0 <sigismember@plt>
   19718:	cmp	r0, #0
   1971c:	beq	1972c <__assert_fail@plt+0x76a0>
   19720:	mov	r0, #13
   19724:	mov	r1, #0
   19728:	bl	11c84 <signal@plt>
   1972c:	movw	r0, #1096	; 0x448
   19730:	mov	r1, #3
   19734:	movt	r0, #4
   19738:	bl	11cc0 <sigismember@plt>
   1973c:	cmp	r0, #0
   19740:	beq	19750 <__assert_fail@plt+0x76c4>
   19744:	mov	r0, #3
   19748:	mov	r1, #0
   1974c:	bl	11c84 <signal@plt>
   19750:	movw	r0, #1096	; 0x448
   19754:	mov	r1, #15
   19758:	movt	r0, #4
   1975c:	bl	11cc0 <sigismember@plt>
   19760:	cmp	r0, #0
   19764:	beq	19774 <__assert_fail@plt+0x76e8>
   19768:	mov	r0, #15
   1976c:	mov	r1, #0
   19770:	bl	11c84 <signal@plt>
   19774:	movw	r0, #1096	; 0x448
   19778:	mov	r1, #29
   1977c:	movt	r0, #4
   19780:	bl	11cc0 <sigismember@plt>
   19784:	cmp	r0, #0
   19788:	beq	19798 <__assert_fail@plt+0x770c>
   1978c:	mov	r0, #29
   19790:	mov	r1, #0
   19794:	bl	11c84 <signal@plt>
   19798:	movw	r0, #1096	; 0x448
   1979c:	mov	r1, #27
   197a0:	movt	r0, #4
   197a4:	bl	11cc0 <sigismember@plt>
   197a8:	cmp	r0, #0
   197ac:	beq	197bc <__assert_fail@plt+0x7730>
   197b0:	mov	r0, #27
   197b4:	mov	r1, #0
   197b8:	bl	11c84 <signal@plt>
   197bc:	movw	r0, #1096	; 0x448
   197c0:	mov	r1, #26
   197c4:	movt	r0, #4
   197c8:	bl	11cc0 <sigismember@plt>
   197cc:	cmp	r0, #0
   197d0:	beq	197e0 <__assert_fail@plt+0x7754>
   197d4:	mov	r0, #26
   197d8:	mov	r1, #0
   197dc:	bl	11c84 <signal@plt>
   197e0:	movw	r0, #1096	; 0x448
   197e4:	mov	r1, #24
   197e8:	movt	r0, #4
   197ec:	bl	11cc0 <sigismember@plt>
   197f0:	cmp	r0, #0
   197f4:	beq	19804 <__assert_fail@plt+0x7778>
   197f8:	mov	r0, #24
   197fc:	mov	r1, #0
   19800:	bl	11c84 <signal@plt>
   19804:	movw	r0, #1096	; 0x448
   19808:	mov	r1, #25
   1980c:	movt	r0, #4
   19810:	bl	11cc0 <sigismember@plt>
   19814:	cmp	r0, #0
   19818:	beq	19830 <__assert_fail@plt+0x77a4>
   1981c:	mov	r0, #25
   19820:	mov	r1, #0
   19824:	sub	sp, fp, #8
   19828:	pop	{r4, sl, fp, lr}
   1982c:	b	11c84 <signal@plt>
   19830:	sub	sp, fp, #8
   19834:	pop	{r4, sl, fp, pc}
   19838:	movw	r0, #4688	; 0x1250
   1983c:	movt	r0, #4
   19840:	ldr	r1, [r0, #84]	; 0x54
   19844:	cmp	r1, #0
   19848:	bxne	lr
   1984c:	ldr	r1, [r0, #80]	; 0x50
   19850:	add	r1, r1, #1
   19854:	str	r1, [r0, #80]	; 0x50
   19858:	bx	lr
   1985c:	movw	r1, #4688	; 0x1250
   19860:	movt	r1, #4
   19864:	ldr	r2, [r1, #84]	; 0x54
   19868:	cmp	r2, #0
   1986c:	streq	r0, [r1, #84]	; 0x54
   19870:	bx	lr
   19874:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   19878:	add	fp, sp, #28
   1987c:	sub	sp, sp, #4
   19880:	ldr	lr, [r0]
   19884:	ldr	ip, [r1]
   19888:	mov	r4, #0
   1988c:	mov	r8, #127	; 0x7f
   19890:	mov	r9, #0
   19894:	mov	r6, #0
   19898:	cmp	r2, #0
   1989c:	bne	198bc <__assert_fail@plt+0x7830>
   198a0:	b	19d5c <__assert_fail@plt+0x7cd0>
   198a4:	add	r2, r2, r7, lsl #3
   198a8:	add	ip, ip, #1
   198ac:	mov	r4, #2
   198b0:	sub	r6, r2, #48	; 0x30
   198b4:	cmp	r4, #5
   198b8:	bcs	1a17c <__assert_fail@plt+0x80f0>
   198bc:	cmp	r4, #4
   198c0:	bhi	1a198 <__assert_fail@plt+0x810c>
   198c4:	add	r2, pc, #4
   198c8:	mov	r7, r6
   198cc:	ldr	pc, [r2, r4, lsl #2]
   198d0:	andeq	r9, r1, r4, ror #17
   198d4:	andeq	r9, r1, r8, lsl sl
   198d8:	andeq	r9, r1, ip, asr #19
   198dc:	andeq	r9, r1, r4, ror #19
   198e0:	andeq	r9, r1, ip, lsr #19
   198e4:	ldrb	r5, [ip]
   198e8:	mov	r4, #5
   198ec:	sub	r2, r5, #58	; 0x3a
   198f0:	cmp	r2, #36	; 0x24
   198f4:	bhi	19c98 <__assert_fail@plt+0x7c0c>
   198f8:	add	r6, pc, #0
   198fc:	ldr	pc, [r6, r2, lsl #2]
   19900:	andeq	sl, r1, ip, ror r1
   19904:	andeq	r9, r1, r0, lsr #25
   19908:	andeq	r9, r1, r0, lsr #25
   1990c:	andeq	sl, r1, ip, ror r1
   19910:	andeq	r9, r1, r0, lsr #25
   19914:	andeq	r9, r1, r0, lsr #25
   19918:	andeq	r9, r1, r0, lsr #25
   1991c:	andeq	r9, r1, r0, lsr #25
   19920:	andeq	r9, r1, r0, lsr #25
   19924:	andeq	r9, r1, r0, lsr #25
   19928:	andeq	r9, r1, r0, lsr #25
   1992c:	andeq	r9, r1, r0, lsr #25
   19930:	andeq	r9, r1, r0, lsr #25
   19934:	andeq	r9, r1, r0, lsr #25
   19938:	andeq	r9, r1, r0, lsr #25
   1993c:	andeq	r9, r1, r0, lsr #25
   19940:	andeq	r9, r1, r0, lsr #25
   19944:	andeq	r9, r1, r0, lsr #25
   19948:	andeq	r9, r1, r0, lsr #25
   1994c:	andeq	r9, r1, r0, lsr #25
   19950:	andeq	r9, r1, r0, lsr #25
   19954:	andeq	r9, r1, r0, lsr #25
   19958:	andeq	r9, r1, r0, lsr #25
   1995c:	andeq	r9, r1, r0, lsr #25
   19960:	andeq	r9, r1, r0, lsr #25
   19964:	andeq	r9, r1, r0, lsr #25
   19968:	andeq	r9, r1, r0, lsr #25
   1996c:	andeq	r9, r1, r0, lsr #25
   19970:	andeq	r9, r1, r0, lsr #25
   19974:	andeq	r9, r1, r0, lsr #25
   19978:	andeq	r9, r1, r0, lsr #25
   1997c:	andeq	r9, r1, r0, lsr #25
   19980:	andeq	r9, r1, r0, lsr #25
   19984:	andeq	r9, r1, r0, lsr #25
   19988:	muleq	r1, r4, r9
   1998c:	andeq	r9, r1, r0, lsr #25
   19990:	andeq	r9, r1, r4, ror #24
   19994:	add	ip, ip, #1
   19998:	mov	r4, #1
   1999c:	mov	r6, r7
   199a0:	cmp	r4, #5
   199a4:	bcc	198bc <__assert_fail@plt+0x7830>
   199a8:	b	1a17c <__assert_fail@plt+0x80f0>
   199ac:	ldrb	r2, [ip]
   199b0:	sub	r4, r2, #64	; 0x40
   199b4:	uxtb	r4, r4
   199b8:	cmp	r4, #63	; 0x3f
   199bc:	bcs	19c34 <__assert_fail@plt+0x7ba8>
   199c0:	and	r2, r2, #31
   199c4:	strb	r2, [lr], #1
   199c8:	b	19ca4 <__assert_fail@plt+0x7c18>
   199cc:	ldrb	r2, [ip]
   199d0:	and	r4, r2, #248	; 0xf8
   199d4:	cmp	r4, #48	; 0x30
   199d8:	beq	198a4 <__assert_fail@plt+0x7818>
   199dc:	strb	r7, [lr], #1
   199e0:	b	19c40 <__assert_fail@plt+0x7bb4>
   199e4:	ldrb	r4, [ip]
   199e8:	sub	r2, r4, #48	; 0x30
   199ec:	cmp	r2, #10
   199f0:	bcc	19c58 <__assert_fail@plt+0x7bcc>
   199f4:	sub	r2, r4, #97	; 0x61
   199f8:	cmp	r2, #6
   199fc:	bcc	19c7c <__assert_fail@plt+0x7bf0>
   19a00:	sub	r2, r4, #65	; 0x41
   19a04:	cmp	r2, #5
   19a08:	bhi	199dc <__assert_fail@plt+0x7950>
   19a0c:	add	r2, r4, r7, lsl #4
   19a10:	sub	r6, r2, #55	; 0x37
   19a14:	b	19c84 <__assert_fail@plt+0x7bf8>
   19a18:	ldrb	r2, [ip]
   19a1c:	cmp	r2, #120	; 0x78
   19a20:	bhi	19cd8 <__assert_fail@plt+0x7c4c>
   19a24:	add	r5, pc, #12
   19a28:	mov	sl, #7
   19a2c:	mov	r4, #3
   19a30:	mov	r6, #0
   19a34:	ldr	pc, [r5, r2, lsl #2]
   19a38:	andeq	r9, r1, r0, asr #25
   19a3c:	ldrdeq	r9, [r1], -r8
   19a40:	ldrdeq	r9, [r1], -r8
   19a44:	ldrdeq	r9, [r1], -r8
   19a48:	ldrdeq	r9, [r1], -r8
   19a4c:	ldrdeq	r9, [r1], -r8
   19a50:	ldrdeq	r9, [r1], -r8
   19a54:	ldrdeq	r9, [r1], -r8
   19a58:	ldrdeq	r9, [r1], -r8
   19a5c:	ldrdeq	r9, [r1], -r8
   19a60:	ldrdeq	r9, [r1], -r8
   19a64:	ldrdeq	r9, [r1], -r8
   19a68:	ldrdeq	r9, [r1], -r8
   19a6c:	ldrdeq	r9, [r1], -r8
   19a70:	ldrdeq	r9, [r1], -r8
   19a74:	ldrdeq	r9, [r1], -r8
   19a78:	ldrdeq	r9, [r1], -r8
   19a7c:	ldrdeq	r9, [r1], -r8
   19a80:	ldrdeq	r9, [r1], -r8
   19a84:	ldrdeq	r9, [r1], -r8
   19a88:	ldrdeq	r9, [r1], -r8
   19a8c:	ldrdeq	r9, [r1], -r8
   19a90:	ldrdeq	r9, [r1], -r8
   19a94:	ldrdeq	r9, [r1], -r8
   19a98:	ldrdeq	r9, [r1], -r8
   19a9c:	ldrdeq	r9, [r1], -r8
   19aa0:	ldrdeq	r9, [r1], -r8
   19aa4:	ldrdeq	r9, [r1], -r8
   19aa8:	ldrdeq	r9, [r1], -r8
   19aac:	ldrdeq	r9, [r1], -r8
   19ab0:	ldrdeq	r9, [r1], -r8
   19ab4:	ldrdeq	r9, [r1], -r8
   19ab8:	ldrdeq	r9, [r1], -r8
   19abc:	ldrdeq	r9, [r1], -r8
   19ac0:	ldrdeq	r9, [r1], -r8
   19ac4:	ldrdeq	r9, [r1], -r8
   19ac8:	ldrdeq	r9, [r1], -r8
   19acc:	ldrdeq	r9, [r1], -r8
   19ad0:	ldrdeq	r9, [r1], -r8
   19ad4:	ldrdeq	r9, [r1], -r8
   19ad8:	ldrdeq	r9, [r1], -r8
   19adc:	ldrdeq	r9, [r1], -r8
   19ae0:	ldrdeq	r9, [r1], -r8
   19ae4:	ldrdeq	r9, [r1], -r8
   19ae8:	ldrdeq	r9, [r1], -r8
   19aec:	ldrdeq	r9, [r1], -r8
   19af0:	ldrdeq	r9, [r1], -r8
   19af4:	ldrdeq	r9, [r1], -r8
   19af8:	andeq	r9, r1, ip, lsl ip
   19afc:	andeq	r9, r1, ip, lsl ip
   19b00:	andeq	r9, r1, ip, lsl ip
   19b04:	andeq	r9, r1, ip, lsl ip
   19b08:	andeq	r9, r1, ip, lsl ip
   19b0c:	andeq	r9, r1, ip, lsl ip
   19b10:	andeq	r9, r1, ip, lsl ip
   19b14:	andeq	r9, r1, ip, lsl ip
   19b18:	ldrdeq	r9, [r1], -r8
   19b1c:	ldrdeq	r9, [r1], -r8
   19b20:	ldrdeq	r9, [r1], -r8
   19b24:	ldrdeq	r9, [r1], -r8
   19b28:	ldrdeq	r9, [r1], -r8
   19b2c:	ldrdeq	r9, [r1], -r8
   19b30:	ldrdeq	r9, [r1], -r8
   19b34:	andeq	r9, r1, r0, ror #25
   19b38:	ldrdeq	r9, [r1], -r8
   19b3c:	ldrdeq	r9, [r1], -r8
   19b40:	ldrdeq	r9, [r1], -r8
   19b44:	ldrdeq	r9, [r1], -r8
   19b48:	ldrdeq	r9, [r1], -r8
   19b4c:	ldrdeq	r9, [r1], -r8
   19b50:	ldrdeq	r9, [r1], -r8
   19b54:	ldrdeq	r9, [r1], -r8
   19b58:	ldrdeq	r9, [r1], -r8
   19b5c:	ldrdeq	r9, [r1], -r8
   19b60:	ldrdeq	r9, [r1], -r8
   19b64:	ldrdeq	r9, [r1], -r8
   19b68:	ldrdeq	r9, [r1], -r8
   19b6c:	ldrdeq	r9, [r1], -r8
   19b70:	ldrdeq	r9, [r1], -r8
   19b74:	ldrdeq	r9, [r1], -r8
   19b78:	ldrdeq	r9, [r1], -r8
   19b7c:	ldrdeq	r9, [r1], -r8
   19b80:	ldrdeq	r9, [r1], -r8
   19b84:	ldrdeq	r9, [r1], -r8
   19b88:	ldrdeq	r9, [r1], -r8
   19b8c:	ldrdeq	r9, [r1], -r8
   19b90:	ldrdeq	r9, [r1], -r8
   19b94:	ldrdeq	r9, [r1], -r8
   19b98:	andeq	r9, r1, r4, lsr sp
   19b9c:	ldrdeq	r9, [r1], -r8
   19ba0:	ldrdeq	r9, [r1], -r8
   19ba4:	ldrdeq	r9, [r1], -r8
   19ba8:	ldrdeq	r9, [r1], -r8
   19bac:	ldrdeq	r9, [r1], -r8
   19bb0:	ldrdeq	r9, [r1], -r8
   19bb4:	andeq	r9, r1, r8, ror #25
   19bb8:	ldrdeq	r9, [r1], -r8
   19bbc:	andeq	r9, r1, r4, lsr #26
   19bc0:	strdeq	r9, [r1], -r0
   19bc4:	ldrdeq	r9, [r1], -r8
   19bc8:	ldrdeq	r9, [r1], -r8
   19bcc:	strdeq	r9, [r1], -r8
   19bd0:	andeq	r9, r1, r0, lsl #26
   19bd4:	ldrdeq	r9, [r1], -r8
   19bd8:	ldrdeq	r9, [r1], -r8
   19bdc:	ldrdeq	r9, [r1], -r8
   19be0:	ldrdeq	r9, [r1], -r8
   19be4:	ldrdeq	r9, [r1], -r8
   19be8:	ldrdeq	r9, [r1], -r8
   19bec:	ldrdeq	r9, [r1], -r8
   19bf0:	andeq	r9, r1, r8, lsl #26
   19bf4:	ldrdeq	r9, [r1], -r8
   19bf8:	ldrdeq	r9, [r1], -r8
   19bfc:	ldrdeq	r9, [r1], -r8
   19c00:	andeq	r9, r1, r0, lsl sp
   19c04:	ldrdeq	r9, [r1], -r8
   19c08:	andeq	r9, r1, r8, lsl sp
   19c0c:	ldrdeq	r9, [r1], -r8
   19c10:	andeq	r9, r1, r0, lsr #26
   19c14:	ldrdeq	r9, [r1], -r8
   19c18:	andeq	r9, r1, r4, lsr sp
   19c1c:	sub	r6, r2, #48	; 0x30
   19c20:	mov	r4, #2
   19c24:	add	ip, ip, #1
   19c28:	cmp	r4, #5
   19c2c:	bcc	198bc <__assert_fail@plt+0x7830>
   19c30:	b	1a17c <__assert_fail@plt+0x80f0>
   19c34:	cmp	r2, #63	; 0x3f
   19c38:	bne	1a178 <__assert_fail@plt+0x80ec>
   19c3c:	strb	r8, [lr], #1
   19c40:	add	r9, r9, #1
   19c44:	mov	r4, #0
   19c48:	mov	r6, r7
   19c4c:	cmp	r4, #5
   19c50:	bcc	198bc <__assert_fail@plt+0x7830>
   19c54:	b	1a17c <__assert_fail@plt+0x80f0>
   19c58:	add	r2, r4, r7, lsl #4
   19c5c:	sub	r6, r2, #48	; 0x30
   19c60:	b	19c84 <__assert_fail@plt+0x7bf8>
   19c64:	add	ip, ip, #1
   19c68:	mov	r4, #4
   19c6c:	mov	r6, r7
   19c70:	cmp	r4, #5
   19c74:	bcc	198bc <__assert_fail@plt+0x7830>
   19c78:	b	1a17c <__assert_fail@plt+0x80f0>
   19c7c:	add	r2, r4, r7, lsl #4
   19c80:	sub	r6, r2, #87	; 0x57
   19c84:	add	ip, ip, #1
   19c88:	mov	r4, #3
   19c8c:	cmp	r4, #5
   19c90:	bcc	198bc <__assert_fail@plt+0x7830>
   19c94:	b	1a17c <__assert_fail@plt+0x80f0>
   19c98:	cmp	r5, #0
   19c9c:	beq	1a17c <__assert_fail@plt+0x80f0>
   19ca0:	strb	r5, [lr], #1
   19ca4:	add	r9, r9, #1
   19ca8:	add	ip, ip, #1
   19cac:	mov	r4, #0
   19cb0:	mov	r6, r7
   19cb4:	cmp	r4, #5
   19cb8:	bcc	198bc <__assert_fail@plt+0x7830>
   19cbc:	b	1a17c <__assert_fail@plt+0x80f0>
   19cc0:	mov	r4, #6
   19cc4:	mov	r6, r7
   19cc8:	add	ip, ip, #1
   19ccc:	cmp	r4, #5
   19cd0:	bcc	198bc <__assert_fail@plt+0x7830>
   19cd4:	b	1a17c <__assert_fail@plt+0x80f0>
   19cd8:	mov	sl, r2
   19cdc:	b	19d24 <__assert_fail@plt+0x7c98>
   19ce0:	mov	sl, #127	; 0x7f
   19ce4:	b	19d24 <__assert_fail@plt+0x7c98>
   19ce8:	mov	sl, #32
   19cec:	b	19d24 <__assert_fail@plt+0x7c98>
   19cf0:	mov	sl, #8
   19cf4:	b	19d24 <__assert_fail@plt+0x7c98>
   19cf8:	mov	sl, #27
   19cfc:	b	19d24 <__assert_fail@plt+0x7c98>
   19d00:	mov	sl, #12
   19d04:	b	19d24 <__assert_fail@plt+0x7c98>
   19d08:	mov	sl, #10
   19d0c:	b	19d24 <__assert_fail@plt+0x7c98>
   19d10:	mov	sl, #13
   19d14:	b	19d24 <__assert_fail@plt+0x7c98>
   19d18:	mov	sl, #9
   19d1c:	b	19d24 <__assert_fail@plt+0x7c98>
   19d20:	mov	sl, #11
   19d24:	strb	sl, [lr], #1
   19d28:	add	r9, r9, #1
   19d2c:	mov	r4, #0
   19d30:	mov	r6, sl
   19d34:	add	ip, ip, #1
   19d38:	cmp	r4, #5
   19d3c:	bcc	198bc <__assert_fail@plt+0x7830>
   19d40:	b	1a17c <__assert_fail@plt+0x80f0>
   19d44:	add	r2, r2, r7, lsl #3
   19d48:	add	ip, ip, #1
   19d4c:	mov	r4, #2
   19d50:	sub	r6, r2, #48	; 0x30
   19d54:	cmp	r4, #5
   19d58:	bcs	1a17c <__assert_fail@plt+0x80f0>
   19d5c:	cmp	r4, #4
   19d60:	bhi	1a198 <__assert_fail@plt+0x810c>
   19d64:	add	r2, pc, #4
   19d68:	mov	r7, r6
   19d6c:	ldr	pc, [r2, r4, lsl #2]
   19d70:	andeq	r9, r1, r4, lsl #27
   19d74:	andeq	r9, r1, r8, ror #27
   19d78:	ldrdeq	r9, [r1], -r0
   19d7c:	andeq	sl, r1, r4
   19d80:			; <UNDEFINED> instruction: 0x00019db0
   19d84:	ldrb	r5, [ip]
   19d88:	cmp	r5, #93	; 0x5d
   19d8c:	bgt	1a06c <__assert_fail@plt+0x7fe0>
   19d90:	cmp	r5, #92	; 0x5c
   19d94:	bne	1a0c4 <__assert_fail@plt+0x8038>
   19d98:	add	ip, ip, #1
   19d9c:	mov	r4, #1
   19da0:	mov	r6, r7
   19da4:	cmp	r4, #5
   19da8:	bcc	19d5c <__assert_fail@plt+0x7cd0>
   19dac:	b	1a17c <__assert_fail@plt+0x80f0>
   19db0:	ldrb	r2, [ip]
   19db4:	sub	r4, r2, #64	; 0x40
   19db8:	uxtb	r4, r4
   19dbc:	cmp	r4, #62	; 0x3e
   19dc0:	bhi	1a048 <__assert_fail@plt+0x7fbc>
   19dc4:	and	r2, r2, #31
   19dc8:	strb	r2, [lr], #1
   19dcc:	b	1a0d8 <__assert_fail@plt+0x804c>
   19dd0:	ldrb	r2, [ip]
   19dd4:	and	r4, r2, #248	; 0xf8
   19dd8:	cmp	r4, #48	; 0x30
   19ddc:	beq	19d44 <__assert_fail@plt+0x7cb8>
   19de0:	strb	r7, [lr], #1
   19de4:	b	1a054 <__assert_fail@plt+0x7fc8>
   19de8:	ldrb	r5, [ip]
   19dec:	cmp	r5, #120	; 0x78
   19df0:	bhi	1a0f4 <__assert_fail@plt+0x8068>
   19df4:	add	r2, pc, #12
   19df8:	mov	sl, #7
   19dfc:	mov	r4, #3
   19e00:	mov	r6, #0
   19e04:	ldr	pc, [r2, r5, lsl #2]
   19e08:	andeq	sl, r1, r4, lsl #2
   19e0c:	strdeq	sl, [r1], -r4
   19e10:	strdeq	sl, [r1], -r4
   19e14:	strdeq	sl, [r1], -r4
   19e18:	strdeq	sl, [r1], -r4
   19e1c:	strdeq	sl, [r1], -r4
   19e20:	strdeq	sl, [r1], -r4
   19e24:	strdeq	sl, [r1], -r4
   19e28:	strdeq	sl, [r1], -r4
   19e2c:	strdeq	sl, [r1], -r4
   19e30:	strdeq	sl, [r1], -r4
   19e34:	strdeq	sl, [r1], -r4
   19e38:	strdeq	sl, [r1], -r4
   19e3c:	strdeq	sl, [r1], -r4
   19e40:	strdeq	sl, [r1], -r4
   19e44:	strdeq	sl, [r1], -r4
   19e48:	strdeq	sl, [r1], -r4
   19e4c:	strdeq	sl, [r1], -r4
   19e50:	strdeq	sl, [r1], -r4
   19e54:	strdeq	sl, [r1], -r4
   19e58:	strdeq	sl, [r1], -r4
   19e5c:	strdeq	sl, [r1], -r4
   19e60:	strdeq	sl, [r1], -r4
   19e64:	strdeq	sl, [r1], -r4
   19e68:	strdeq	sl, [r1], -r4
   19e6c:	strdeq	sl, [r1], -r4
   19e70:	strdeq	sl, [r1], -r4
   19e74:	strdeq	sl, [r1], -r4
   19e78:	strdeq	sl, [r1], -r4
   19e7c:	strdeq	sl, [r1], -r4
   19e80:	strdeq	sl, [r1], -r4
   19e84:	strdeq	sl, [r1], -r4
   19e88:	strdeq	sl, [r1], -r4
   19e8c:	strdeq	sl, [r1], -r4
   19e90:	strdeq	sl, [r1], -r4
   19e94:	strdeq	sl, [r1], -r4
   19e98:	strdeq	sl, [r1], -r4
   19e9c:	strdeq	sl, [r1], -r4
   19ea0:	strdeq	sl, [r1], -r4
   19ea4:	strdeq	sl, [r1], -r4
   19ea8:	strdeq	sl, [r1], -r4
   19eac:	strdeq	sl, [r1], -r4
   19eb0:	strdeq	sl, [r1], -r4
   19eb4:	strdeq	sl, [r1], -r4
   19eb8:	strdeq	sl, [r1], -r4
   19ebc:	strdeq	sl, [r1], -r4
   19ec0:	strdeq	sl, [r1], -r4
   19ec4:	strdeq	sl, [r1], -r4
   19ec8:	andeq	r9, r1, ip, ror #31
   19ecc:	andeq	r9, r1, ip, ror #31
   19ed0:	andeq	r9, r1, ip, ror #31
   19ed4:	andeq	r9, r1, ip, ror #31
   19ed8:	andeq	r9, r1, ip, ror #31
   19edc:	andeq	r9, r1, ip, ror #31
   19ee0:	andeq	r9, r1, ip, ror #31
   19ee4:	andeq	r9, r1, ip, ror #31
   19ee8:	strdeq	sl, [r1], -r4
   19eec:	strdeq	sl, [r1], -r4
   19ef0:	strdeq	sl, [r1], -r4
   19ef4:	strdeq	sl, [r1], -r4
   19ef8:	strdeq	sl, [r1], -r4
   19efc:	strdeq	sl, [r1], -r4
   19f00:	strdeq	sl, [r1], -r4
   19f04:	andeq	sl, r1, ip, lsl r1
   19f08:	strdeq	sl, [r1], -r4
   19f0c:	strdeq	sl, [r1], -r4
   19f10:	strdeq	sl, [r1], -r4
   19f14:	strdeq	sl, [r1], -r4
   19f18:	strdeq	sl, [r1], -r4
   19f1c:	strdeq	sl, [r1], -r4
   19f20:	strdeq	sl, [r1], -r4
   19f24:	strdeq	sl, [r1], -r4
   19f28:	strdeq	sl, [r1], -r4
   19f2c:	strdeq	sl, [r1], -r4
   19f30:	strdeq	sl, [r1], -r4
   19f34:	strdeq	sl, [r1], -r4
   19f38:	strdeq	sl, [r1], -r4
   19f3c:	strdeq	sl, [r1], -r4
   19f40:	strdeq	sl, [r1], -r4
   19f44:	strdeq	sl, [r1], -r4
   19f48:	strdeq	sl, [r1], -r4
   19f4c:	strdeq	sl, [r1], -r4
   19f50:	strdeq	sl, [r1], -r4
   19f54:	strdeq	sl, [r1], -r4
   19f58:	strdeq	sl, [r1], -r4
   19f5c:	strdeq	sl, [r1], -r4
   19f60:	strdeq	sl, [r1], -r4
   19f64:	strdeq	sl, [r1], -r4
   19f68:	andeq	sl, r1, r8, ror #2
   19f6c:	strdeq	sl, [r1], -r4
   19f70:	strdeq	sl, [r1], -r4
   19f74:	strdeq	sl, [r1], -r4
   19f78:	strdeq	sl, [r1], -r4
   19f7c:	strdeq	sl, [r1], -r4
   19f80:	strdeq	sl, [r1], -r4
   19f84:	andeq	sl, r1, r4, lsr #2
   19f88:	strdeq	sl, [r1], -r4
   19f8c:	andeq	sl, r1, r8, asr r1
   19f90:	andeq	sl, r1, ip, lsr #2
   19f94:	strdeq	sl, [r1], -r4
   19f98:	strdeq	sl, [r1], -r4
   19f9c:	andeq	sl, r1, r4, lsr r1
   19fa0:	andeq	sl, r1, ip, lsr r1
   19fa4:	strdeq	sl, [r1], -r4
   19fa8:	strdeq	sl, [r1], -r4
   19fac:	strdeq	sl, [r1], -r4
   19fb0:	strdeq	sl, [r1], -r4
   19fb4:	strdeq	sl, [r1], -r4
   19fb8:	strdeq	sl, [r1], -r4
   19fbc:	strdeq	sl, [r1], -r4
   19fc0:	andeq	sl, r1, r4, asr #2
   19fc4:	strdeq	sl, [r1], -r4
   19fc8:	strdeq	sl, [r1], -r4
   19fcc:	strdeq	sl, [r1], -r4
   19fd0:	andeq	sl, r1, ip, asr #2
   19fd4:	strdeq	sl, [r1], -r4
   19fd8:	strdeq	sl, [r1], -ip
   19fdc:	strdeq	sl, [r1], -r4
   19fe0:	andeq	sl, r1, r4, asr r1
   19fe4:	strdeq	sl, [r1], -r4
   19fe8:	andeq	sl, r1, r8, ror #2
   19fec:	sub	r6, r5, #48	; 0x30
   19ff0:	mov	r4, #2
   19ff4:	add	ip, ip, #1
   19ff8:	cmp	r4, #5
   19ffc:	bcc	19d5c <__assert_fail@plt+0x7cd0>
   1a000:	b	1a17c <__assert_fail@plt+0x80f0>
   1a004:	ldrb	r4, [ip]
   1a008:	sub	r2, r4, #48	; 0x30
   1a00c:	cmp	r2, #10
   1a010:	bcc	1a08c <__assert_fail@plt+0x8000>
   1a014:	sub	r2, r4, #65	; 0x41
   1a018:	cmp	r2, #6
   1a01c:	bcc	1a0a8 <__assert_fail@plt+0x801c>
   1a020:	sub	r2, r4, #97	; 0x61
   1a024:	cmp	r2, #6
   1a028:	bcs	19de0 <__assert_fail@plt+0x7d54>
   1a02c:	add	r2, r4, r7, lsl #4
   1a030:	sub	r6, r2, #87	; 0x57
   1a034:	add	ip, ip, #1
   1a038:	mov	r4, #3
   1a03c:	cmp	r4, #5
   1a040:	bcc	19d5c <__assert_fail@plt+0x7cd0>
   1a044:	b	1a17c <__assert_fail@plt+0x80f0>
   1a048:	cmp	r2, #63	; 0x3f
   1a04c:	bne	1a178 <__assert_fail@plt+0x80ec>
   1a050:	strb	r8, [lr], #1
   1a054:	add	r9, r9, #1
   1a058:	mov	r4, #0
   1a05c:	mov	r6, r7
   1a060:	cmp	r4, #5
   1a064:	bcc	19d5c <__assert_fail@plt+0x7cd0>
   1a068:	b	1a17c <__assert_fail@plt+0x80f0>
   1a06c:	cmp	r5, #94	; 0x5e
   1a070:	bne	1a0d4 <__assert_fail@plt+0x8048>
   1a074:	add	ip, ip, #1
   1a078:	mov	r4, #4
   1a07c:	mov	r6, r7
   1a080:	cmp	r4, #5
   1a084:	bcc	19d5c <__assert_fail@plt+0x7cd0>
   1a088:	b	1a17c <__assert_fail@plt+0x80f0>
   1a08c:	add	r2, r4, r7, lsl #4
   1a090:	sub	r6, r2, #48	; 0x30
   1a094:	add	ip, ip, #1
   1a098:	mov	r4, #3
   1a09c:	cmp	r4, #5
   1a0a0:	bcc	19d5c <__assert_fail@plt+0x7cd0>
   1a0a4:	b	1a17c <__assert_fail@plt+0x80f0>
   1a0a8:	add	r2, r4, r7, lsl #4
   1a0ac:	sub	r6, r2, #55	; 0x37
   1a0b0:	add	ip, ip, #1
   1a0b4:	mov	r4, #3
   1a0b8:	cmp	r4, #5
   1a0bc:	bcc	19d5c <__assert_fail@plt+0x7cd0>
   1a0c0:	b	1a17c <__assert_fail@plt+0x80f0>
   1a0c4:	cmp	r5, #0
   1a0c8:	mov	r4, #5
   1a0cc:	cmpne	r5, #58	; 0x3a
   1a0d0:	beq	1a17c <__assert_fail@plt+0x80f0>
   1a0d4:	strb	r5, [lr], #1
   1a0d8:	add	r9, r9, #1
   1a0dc:	add	ip, ip, #1
   1a0e0:	mov	r4, #0
   1a0e4:	mov	r6, r7
   1a0e8:	cmp	r4, #5
   1a0ec:	bcc	19d5c <__assert_fail@plt+0x7cd0>
   1a0f0:	b	1a17c <__assert_fail@plt+0x80f0>
   1a0f4:	mov	sl, r5
   1a0f8:	b	1a158 <__assert_fail@plt+0x80cc>
   1a0fc:	mov	sl, #9
   1a100:	b	1a158 <__assert_fail@plt+0x80cc>
   1a104:	mov	r4, #6
   1a108:	mov	r6, r7
   1a10c:	add	ip, ip, #1
   1a110:	cmp	r4, #5
   1a114:	bcc	19d5c <__assert_fail@plt+0x7cd0>
   1a118:	b	1a17c <__assert_fail@plt+0x80f0>
   1a11c:	mov	sl, #127	; 0x7f
   1a120:	b	1a158 <__assert_fail@plt+0x80cc>
   1a124:	mov	sl, #32
   1a128:	b	1a158 <__assert_fail@plt+0x80cc>
   1a12c:	mov	sl, #8
   1a130:	b	1a158 <__assert_fail@plt+0x80cc>
   1a134:	mov	sl, #27
   1a138:	b	1a158 <__assert_fail@plt+0x80cc>
   1a13c:	mov	sl, #12
   1a140:	b	1a158 <__assert_fail@plt+0x80cc>
   1a144:	mov	sl, #10
   1a148:	b	1a158 <__assert_fail@plt+0x80cc>
   1a14c:	mov	sl, #13
   1a150:	b	1a158 <__assert_fail@plt+0x80cc>
   1a154:	mov	sl, #11
   1a158:	strb	sl, [lr], #1
   1a15c:	add	r9, r9, #1
   1a160:	mov	r4, #0
   1a164:	mov	r6, sl
   1a168:	add	ip, ip, #1
   1a16c:	cmp	r4, #5
   1a170:	bcc	19d5c <__assert_fail@plt+0x7cd0>
   1a174:	b	1a17c <__assert_fail@plt+0x80f0>
   1a178:	mov	r4, #6
   1a17c:	str	lr, [r0]
   1a180:	subs	r0, r4, #6
   1a184:	str	ip, [r1]
   1a188:	str	r9, [r3]
   1a18c:	movwne	r0, #1
   1a190:	sub	sp, fp, #28
   1a194:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1a198:	bl	12038 <abort@plt>
   1a19c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1a1a0:	add	fp, sp, #28
   1a1a4:	sub	sp, sp, #36	; 0x24
   1a1a8:	sub	sp, sp, #8192	; 0x2000
   1a1ac:	mov	r6, r0
   1a1b0:	mov	r7, r3
   1a1b4:	mov	r3, r2
   1a1b8:	mov	r2, r1
   1a1bc:	add	r0, sp, #27
   1a1c0:	mov	r1, #0
   1a1c4:	add	r9, sp, #32
   1a1c8:	str	r1, [sp]
   1a1cc:	str	r0, [sp, #4]
   1a1d0:	add	r0, sp, #28
   1a1d4:	mov	r1, r6
   1a1d8:	str	r9, [sp, #28]
   1a1dc:	str	r6, [sp, #20]
   1a1e0:	bl	1a918 <__assert_fail@plt+0x888c>
   1a1e4:	ldrb	r5, [sp, #27]
   1a1e8:	mov	r8, r0
   1a1ec:	movw	sl, #780	; 0x30c
   1a1f0:	movw	r4, #4816	; 0x12d0
   1a1f4:	movt	sl, #4
   1a1f8:	movt	r4, #4
   1a1fc:	cmp	r5, #0
   1a200:	ldrne	r0, [fp, #8]
   1a204:	cmpne	r0, #0
   1a208:	bne	1a218 <__assert_fail@plt+0x818c>
   1a20c:	cmp	r7, #0
   1a210:	bne	1a254 <__assert_fail@plt+0x81c8>
   1a214:	b	1a2d4 <__assert_fail@plt+0x8248>
   1a218:	ldrd	r0, [r4, #80]	; 0x50
   1a21c:	adds	r0, r0, #1
   1a220:	adc	r1, r1, #0
   1a224:	strd	r0, [r4, #80]	; 0x50
   1a228:	ldr	r0, [sl]
   1a22c:	ldr	r1, [r0, #20]
   1a230:	ldr	r2, [r0, #24]
   1a234:	cmp	r1, r2
   1a238:	bcs	1a67c <__assert_fail@plt+0x85f0>
   1a23c:	add	r2, r1, #1
   1a240:	str	r2, [r0, #20]
   1a244:	mov	r0, #32
   1a248:	strb	r0, [r1]
   1a24c:	cmp	r7, #0
   1a250:	beq	1a2d4 <__assert_fail@plt+0x8248>
   1a254:	movw	r4, #456	; 0x1c8
   1a258:	movt	r4, #4
   1a25c:	ldr	r1, [r4, #32]
   1a260:	cmp	r1, #0
   1a264:	beq	1a2b4 <__assert_fail@plt+0x8228>
   1a268:	ldr	r0, [r4, #36]	; 0x24
   1a26c:	cmp	r1, #2
   1a270:	beq	1a28c <__assert_fail@plt+0x8200>
   1a274:	cmp	r1, #1
   1a278:	bne	1a2a4 <__assert_fail@plt+0x8218>
   1a27c:	ldrb	r0, [r0]
   1a280:	cmp	r0, #48	; 0x30
   1a284:	bne	1a2a4 <__assert_fail@plt+0x8218>
   1a288:	b	1a2b4 <__assert_fail@plt+0x8228>
   1a28c:	movw	r1, #52640	; 0xcda0
   1a290:	mov	r2, #2
   1a294:	movt	r1, #2
   1a298:	bl	1202c <strncmp@plt>
   1a29c:	cmp	r0, #0
   1a2a0:	beq	1a2b4 <__assert_fail@plt+0x8228>
   1a2a4:	mov	r0, r4
   1a2a8:	bl	19174 <__assert_fail@plt+0x70e8>
   1a2ac:	add	r0, r4, #8
   1a2b0:	bl	19174 <__assert_fail@plt+0x70e8>
   1a2b4:	mov	r0, r4
   1a2b8:	bl	19174 <__assert_fail@plt+0x70e8>
   1a2bc:	mov	r0, r7
   1a2c0:	bl	19174 <__assert_fail@plt+0x70e8>
   1a2c4:	add	r0, r4, #8
   1a2c8:	bl	19174 <__assert_fail@plt+0x70e8>
   1a2cc:	movw	r4, #4816	; 0x12d0
   1a2d0:	movt	r4, #4
   1a2d4:	ldr	r0, [fp, #16]
   1a2d8:	movw	r6, #4688	; 0x1250
   1a2dc:	movt	r6, #4
   1a2e0:	cmp	r0, #0
   1a2e4:	beq	1a514 <__assert_fail@plt+0x8488>
   1a2e8:	ldrb	r0, [r6, #22]
   1a2ec:	mov	r1, #0
   1a2f0:	str	r1, [sp, #16]
   1a2f4:	cmp	r0, #0
   1a2f8:	beq	1a340 <__assert_fail@plt+0x82b4>
   1a2fc:	cmp	r5, #0
   1a300:	bne	1a340 <__assert_fail@plt+0x82b4>
   1a304:	ldrb	r0, [r6, #25]
   1a308:	cmp	r0, #0
   1a30c:	beq	1a340 <__assert_fail@plt+0x82b4>
   1a310:	ldr	r0, [sp, #28]
   1a314:	ldrb	r1, [r0]
   1a318:	ldr	r0, [sl]
   1a31c:	ldr	r2, [r0, #20]
   1a320:	ldr	r3, [r0, #24]
   1a324:	cmp	r2, r3
   1a328:	bcs	1a690 <__assert_fail@plt+0x8604>
   1a32c:	add	r3, r2, #1
   1a330:	str	r3, [r0, #20]
   1a334:	strb	r1, [r2]
   1a338:	mov	r0, #1
   1a33c:	str	r0, [sp, #16]
   1a340:	ldr	r5, [r6, #64]	; 0x40
   1a344:	str	r8, [sp, #12]
   1a348:	mov	r0, r5
   1a34c:	bl	11eac <strlen@plt>
   1a350:	add	r1, r0, #1
   1a354:	mov	r0, #3
   1a358:	bl	29160 <_obstack_memory_used@@Base+0x330c>
   1a35c:	mov	r7, r0
   1a360:	ldrb	r0, [r5]
   1a364:	movw	r9, #836	; 0x344
   1a368:	movt	r9, #4
   1a36c:	mov	r4, r7
   1a370:	cmp	r0, #0
   1a374:	beq	1a3e0 <__assert_fail@plt+0x8354>
   1a378:	add	r6, r5, #1
   1a37c:	movw	r5, #54435	; 0xd4a3
   1a380:	mov	r4, r7
   1a384:	movt	r5, #2
   1a388:	uxtb	r1, r0
   1a38c:	ldrb	r2, [r9, r1]
   1a390:	cmp	r2, #0
   1a394:	bne	1a3d0 <__assert_fail@plt+0x8344>
   1a398:	str	r1, [sp]
   1a39c:	mov	r0, r4
   1a3a0:	mov	r1, #1
   1a3a4:	mvn	r2, #0
   1a3a8:	mov	r3, r5
   1a3ac:	bl	11edc <__sprintf_chk@plt>
   1a3b0:	add	r4, r4, r0
   1a3b4:	ldrb	r0, [r6], #1
   1a3b8:	cmp	r0, #0
   1a3bc:	beq	1a3e0 <__assert_fail@plt+0x8354>
   1a3c0:	uxtb	r1, r0
   1a3c4:	ldrb	r2, [r9, r1]
   1a3c8:	cmp	r2, #0
   1a3cc:	beq	1a398 <__assert_fail@plt+0x830c>
   1a3d0:	strb	r0, [r4], #1
   1a3d4:	ldrb	r0, [r6], #1
   1a3d8:	cmp	r0, #0
   1a3dc:	bne	1a3c0 <__assert_fail@plt+0x8334>
   1a3e0:	mov	r0, #0
   1a3e4:	strb	r0, [r4]
   1a3e8:	ldr	r4, [fp, #16]
   1a3ec:	mov	r0, r4
   1a3f0:	bl	11eac <strlen@plt>
   1a3f4:	add	r1, r0, #1
   1a3f8:	mov	r0, #3
   1a3fc:	bl	29160 <_obstack_memory_used@@Base+0x330c>
   1a400:	mov	r6, r0
   1a404:	ldrb	r0, [r4]
   1a408:	mov	r4, r6
   1a40c:	cmp	r0, #0
   1a410:	beq	1a49c <__assert_fail@plt+0x8410>
   1a414:	ldr	r1, [fp, #16]
   1a418:	movw	r5, #54435	; 0xd4a3
   1a41c:	mov	r8, #47	; 0x2f
   1a420:	mov	r4, r6
   1a424:	movt	r5, #2
   1a428:	add	sl, r1, #1
   1a42c:	uxtb	r1, r0
   1a430:	cmp	r1, #47	; 0x2f
   1a434:	bne	1a454 <__assert_fail@plt+0x83c8>
   1a438:	strb	r8, [r4], #1
   1a43c:	ldrb	r0, [sl], #1
   1a440:	cmp	r0, #0
   1a444:	beq	1a49c <__assert_fail@plt+0x8410>
   1a448:	uxtb	r1, r0
   1a44c:	cmp	r1, #47	; 0x2f
   1a450:	beq	1a438 <__assert_fail@plt+0x83ac>
   1a454:	ldrb	r2, [r9, r1]
   1a458:	cmp	r2, #0
   1a45c:	beq	1a474 <__assert_fail@plt+0x83e8>
   1a460:	strb	r0, [r4], #1
   1a464:	ldrb	r0, [sl], #1
   1a468:	cmp	r0, #0
   1a46c:	bne	1a448 <__assert_fail@plt+0x83bc>
   1a470:	b	1a49c <__assert_fail@plt+0x8410>
   1a474:	str	r1, [sp]
   1a478:	mov	r0, r4
   1a47c:	mov	r1, #1
   1a480:	mvn	r2, #0
   1a484:	mov	r3, r5
   1a488:	bl	11edc <__sprintf_chk@plt>
   1a48c:	add	r4, r4, r0
   1a490:	ldrb	r0, [sl], #1
   1a494:	cmp	r0, #0
   1a498:	bne	1a448 <__assert_fail@plt+0x83bc>
   1a49c:	mov	r0, #0
   1a4a0:	movw	r1, #54434	; 0xd4a2
   1a4a4:	movw	r3, #45256	; 0xb0c8
   1a4a8:	mov	r2, r7
   1a4ac:	str	r6, [sp]
   1a4b0:	strb	r0, [r4]
   1a4b4:	movt	r1, #2
   1a4b8:	movt	r3, #2
   1a4bc:	ldrb	r0, [r6]
   1a4c0:	cmp	r0, #47	; 0x2f
   1a4c4:	mov	r0, #1
   1a4c8:	moveq	r3, r1
   1a4cc:	movw	r1, #54408	; 0xd488
   1a4d0:	movt	r1, #2
   1a4d4:	bl	11f00 <__printf_chk@plt>
   1a4d8:	mov	r0, r7
   1a4dc:	bl	2056c <__assert_fail@plt+0xe4e0>
   1a4e0:	mov	r0, r6
   1a4e4:	bl	2056c <__assert_fail@plt+0xe4e0>
   1a4e8:	add	r6, sp, #32
   1a4ec:	ldr	r8, [sp, #12]
   1a4f0:	ldr	r5, [sp, #16]
   1a4f4:	movw	sl, #780	; 0x30c
   1a4f8:	movw	r4, #4816	; 0x12d0
   1a4fc:	mov	r9, r6
   1a500:	movw	r6, #4688	; 0x1250
   1a504:	movt	sl, #4
   1a508:	movt	r4, #4
   1a50c:	movt	r6, #4
   1a510:	b	1a518 <__assert_fail@plt+0x848c>
   1a514:	mov	r5, #0
   1a518:	ldrb	r0, [r6, #11]
   1a51c:	ldr	r7, [fp, #12]
   1a520:	cmp	r0, #0
   1a524:	cmpne	r7, #0
   1a528:	beq	1a568 <__assert_fail@plt+0x84dc>
   1a52c:	ldr	r0, [r7, #12]
   1a530:	ldr	r1, [r7, #16]
   1a534:	sub	r1, r1, r0
   1a538:	cmp	r1, #8
   1a53c:	bcs	1a550 <__assert_fail@plt+0x84c4>
   1a540:	mov	r0, r7
   1a544:	mov	r1, #8
   1a548:	bl	25c0c <_obstack_newchunk@@Base>
   1a54c:	ldr	r0, [r7, #12]
   1a550:	ldrd	r2, [r4, #80]	; 0x50
   1a554:	str	r3, [r0, #4]
   1a558:	str	r2, [r0]
   1a55c:	ldr	r0, [r7, #12]
   1a560:	add	r0, r0, #8
   1a564:	str	r0, [r7, #12]
   1a568:	ldr	r0, [sp, #28]
   1a56c:	ldr	r3, [sl]
   1a570:	sub	r2, r8, r5, lsl #1
   1a574:	mov	r1, #1
   1a578:	add	r0, r0, r5
   1a57c:	bl	11c90 <fwrite_unlocked@plt>
   1a580:	movw	r2, #4688	; 0x1250
   1a584:	ldrd	r0, [r4, #80]	; 0x50
   1a588:	movt	r2, #4
   1a58c:	ldrb	r2, [r2, #11]
   1a590:	adds	r0, r0, r8
   1a594:	adc	r1, r1, #0
   1a598:	strd	r0, [r4, #80]	; 0x50
   1a59c:	cmp	r2, #0
   1a5a0:	cmpne	r7, #0
   1a5a4:	bne	1a5b8 <__assert_fail@plt+0x852c>
   1a5a8:	ldr	r0, [fp, #16]
   1a5ac:	cmp	r0, #0
   1a5b0:	bne	1a600 <__assert_fail@plt+0x8574>
   1a5b4:	b	1a644 <__assert_fail@plt+0x85b8>
   1a5b8:	ldr	r2, [r7, #12]
   1a5bc:	ldr	r3, [r7, #16]
   1a5c0:	sub	r3, r3, r2
   1a5c4:	cmp	r3, #8
   1a5c8:	bcs	1a5e0 <__assert_fail@plt+0x8554>
   1a5cc:	mov	r0, r7
   1a5d0:	mov	r1, #8
   1a5d4:	bl	25c0c <_obstack_newchunk@@Base>
   1a5d8:	ldrd	r0, [r4, #80]	; 0x50
   1a5dc:	ldr	r2, [r7, #12]
   1a5e0:	str	r0, [r2]
   1a5e4:	str	r1, [r2, #4]
   1a5e8:	ldr	r0, [r7, #12]
   1a5ec:	add	r0, r0, #8
   1a5f0:	str	r0, [r7, #12]
   1a5f4:	ldr	r0, [fp, #16]
   1a5f8:	cmp	r0, #0
   1a5fc:	beq	1a644 <__assert_fail@plt+0x85b8>
   1a600:	ldr	r1, [sl]
   1a604:	movw	r0, #54428	; 0xd49c
   1a608:	movt	r0, #2
   1a60c:	bl	11b94 <fputs_unlocked@plt>
   1a610:	cmp	r5, #0
   1a614:	beq	1a644 <__assert_fail@plt+0x85b8>
   1a618:	ldr	r0, [sp, #28]
   1a61c:	add	r0, r0, r8
   1a620:	ldrb	r1, [r0, #-1]
   1a624:	ldr	r0, [sl]
   1a628:	ldr	r2, [r0, #20]
   1a62c:	ldr	r3, [r0, #24]
   1a630:	cmp	r2, r3
   1a634:	bcs	1a6a0 <__assert_fail@plt+0x8614>
   1a638:	add	r3, r2, #1
   1a63c:	str	r3, [r0, #20]
   1a640:	strb	r1, [r2]
   1a644:	ldr	r0, [sp, #28]
   1a648:	cmp	r0, r9
   1a64c:	ldrne	r1, [sp, #20]
   1a650:	cmpne	r0, r1
   1a654:	bne	1a668 <__assert_fail@plt+0x85dc>
   1a658:	ldrb	r0, [sp, #27]
   1a65c:	add	r0, r8, r0
   1a660:	sub	sp, fp, #28
   1a664:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1a668:	bl	2056c <__assert_fail@plt+0xe4e0>
   1a66c:	ldrb	r0, [sp, #27]
   1a670:	add	r0, r8, r0
   1a674:	sub	sp, fp, #28
   1a678:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1a67c:	mov	r1, #32
   1a680:	bl	11f54 <__overflow@plt>
   1a684:	cmp	r7, #0
   1a688:	bne	1a254 <__assert_fail@plt+0x81c8>
   1a68c:	b	1a2d4 <__assert_fail@plt+0x8248>
   1a690:	bl	11f54 <__overflow@plt>
   1a694:	movw	r6, #4688	; 0x1250
   1a698:	movt	r6, #4
   1a69c:	b	1a338 <__assert_fail@plt+0x82ac>
   1a6a0:	bl	11f54 <__overflow@plt>
   1a6a4:	b	1a644 <__assert_fail@plt+0x85b8>
   1a6a8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1a6ac:	add	fp, sp, #28
   1a6b0:	sub	sp, sp, #132	; 0x84
   1a6b4:	movw	r8, #456	; 0x1c8
   1a6b8:	movw	r5, #4688	; 0x1250
   1a6bc:	movw	sl, #780	; 0x30c
   1a6c0:	movw	r6, #1096	; 0x448
   1a6c4:	add	r7, sp, #4
   1a6c8:	movt	r8, #4
   1a6cc:	movt	r5, #4
   1a6d0:	movt	sl, #4
   1a6d4:	movt	r6, #4
   1a6d8:	add	r9, r8, #8
   1a6dc:	ldr	r0, [r5, #84]	; 0x54
   1a6e0:	cmp	r0, #0
   1a6e4:	bne	1a728 <__assert_fail@plt+0x869c>
   1a6e8:	b	1a71c <__assert_fail@plt+0x8690>
   1a6ec:	mov	r0, r4
   1a6f0:	mov	r1, #0
   1a6f4:	bl	11c84 <signal@plt>
   1a6f8:	mov	r0, r4
   1a6fc:	bl	11bac <raise@plt>
   1a700:	mov	r0, #2
   1a704:	mov	r1, r7
   1a708:	mov	r2, #0
   1a70c:	bl	11c0c <sigprocmask@plt>
   1a710:	ldr	r0, [r5, #84]	; 0x54
   1a714:	cmp	r0, #0
   1a718:	bne	1a728 <__assert_fail@plt+0x869c>
   1a71c:	ldr	r0, [r5, #80]	; 0x50
   1a720:	cmp	r0, #0
   1a724:	beq	1a77c <__assert_fail@plt+0x86f0>
   1a728:	ldrb	r0, [r5, #13]
   1a72c:	cmp	r0, #1
   1a730:	bne	1a744 <__assert_fail@plt+0x86b8>
   1a734:	mov	r0, r8
   1a738:	bl	19174 <__assert_fail@plt+0x70e8>
   1a73c:	mov	r0, r9
   1a740:	bl	19174 <__assert_fail@plt+0x70e8>
   1a744:	ldr	r0, [sl]
   1a748:	bl	11d08 <fflush_unlocked@plt>
   1a74c:	mov	r0, #0
   1a750:	mov	r1, r6
   1a754:	mov	r2, r7
   1a758:	bl	11c0c <sigprocmask@plt>
   1a75c:	ldr	r4, [r5, #84]	; 0x54
   1a760:	ldr	r0, [r5, #80]	; 0x50
   1a764:	cmp	r0, #0
   1a768:	beq	1a6ec <__assert_fail@plt+0x8660>
   1a76c:	sub	r0, r0, #1
   1a770:	mov	r4, #19
   1a774:	str	r0, [r5, #80]	; 0x50
   1a778:	b	1a6f8 <__assert_fail@plt+0x866c>
   1a77c:	sub	sp, fp, #28
   1a780:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1a784:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1a788:	add	fp, sp, #28
   1a78c:	sub	sp, sp, #292	; 0x124
   1a790:	mov	r7, r3
   1a794:	ldr	r3, [fp, #8]
   1a798:	mov	r4, r2
   1a79c:	add	r5, sp, #32
   1a7a0:	mov	r2, r7
   1a7a4:	str	r5, [sp]
   1a7a8:	bl	11f48 <statx@plt>
   1a7ac:	cmp	r0, #0
   1a7b0:	bmi	1a8f8 <__assert_fail@plt+0x886c>
   1a7b4:	add	r7, r4, #32
   1a7b8:	ldr	r8, [sp, #168]	; 0xa8
   1a7bc:	add	r2, r5, #40	; 0x28
   1a7c0:	add	r6, r4, #88	; 0x58
   1a7c4:	add	r1, r5, #32
   1a7c8:	add	ip, r5, #96	; 0x60
   1a7cc:	add	r3, r5, #112	; 0x70
   1a7d0:	add	lr, r4, #80	; 0x50
   1a7d4:	str	r7, [sp, #4]
   1a7d8:	add	r7, r4, #48	; 0x30
   1a7dc:	str	r2, [sp, #16]
   1a7e0:	add	r2, r5, #48	; 0x30
   1a7e4:	str	r6, [sp, #28]
   1a7e8:	add	r6, r4, #96	; 0x60
   1a7ec:	str	r7, [sp, #8]
   1a7f0:	add	r7, r4, #64	; 0x40
   1a7f4:	str	r2, [sp, #24]
   1a7f8:	add	r2, r5, #64	; 0x40
   1a7fc:	str	r7, [sp, #12]
   1a800:	add	r7, r4, #72	; 0x48
   1a804:	str	r7, [sp, #20]
   1a808:	ldr	r7, [sp, #172]	; 0xac
   1a80c:	mov	r9, r8
   1a810:	bfc	r9, #0, #12
   1a814:	bic	sl, r7, #255	; 0xff
   1a818:	uxtb	r7, r7
   1a81c:	orr	r9, r9, sl, lsr #20
   1a820:	bfi	r7, r8, #8, #12
   1a824:	orr	r8, r7, sl, lsl #12
   1a828:	strd	r8, [r4]
   1a82c:	ldrd	r8, [r1]
   1a830:	strd	r8, [r6]
   1a834:	mov	r8, r5
   1a838:	add	r9, r4, #16
   1a83c:	ldrh	r1, [sp, #60]	; 0x3c
   1a840:	ldr	r5, [sp, #56]	; 0x38
   1a844:	ldr	r6, [sp, #48]	; 0x30
   1a848:	ldr	r7, [sp, #52]	; 0x34
   1a84c:	stm	r9, {r1, r6, r7}
   1a850:	str	r5, [r4, #28]
   1a854:	ldr	r5, [sp, #164]	; 0xa4
   1a858:	ldr	r1, [sp, #160]	; 0xa0
   1a85c:	bic	r6, r5, #255	; 0xff
   1a860:	uxtb	r5, r5
   1a864:	mov	r7, r1
   1a868:	bfc	r7, #0, #12
   1a86c:	bfi	r5, r1, #8, #12
   1a870:	ldr	r1, [sp, #4]
   1a874:	orr	r7, r7, r6, lsr #20
   1a878:	orr	r6, r5, r6, lsl #12
   1a87c:	strd	r6, [r1]
   1a880:	ldr	r1, [sp, #16]
   1a884:	ldrd	r6, [r1]
   1a888:	ldr	r1, [sp, #8]
   1a88c:	strd	r6, [r1]
   1a890:	ldr	r1, [sp, #36]	; 0x24
   1a894:	str	r1, [r4, #56]	; 0x38
   1a898:	ldr	r1, [sp, #24]
   1a89c:	ldrd	r6, [r1]
   1a8a0:	ldr	r1, [sp, #12]
   1a8a4:	strd	r6, [r1]
   1a8a8:	ldr	r6, [r2]
   1a8ac:	ldr	r7, [r2, #8]
   1a8b0:	ldr	r1, [sp, #20]
   1a8b4:	strd	r6, [r1]
   1a8b8:	ldr	r2, [r3]
   1a8bc:	ldr	r3, [r3, #8]
   1a8c0:	strd	r2, [lr]
   1a8c4:	ldr	r2, [ip]
   1a8c8:	ldr	r3, [ip, #8]
   1a8cc:	ldr	r1, [sp, #28]
   1a8d0:	strd	r2, [r1]
   1a8d4:	ldr	r1, [fp, #8]
   1a8d8:	tst	r1, #2048	; 0x800
   1a8dc:	beq	1a8f8 <__assert_fail@plt+0x886c>
   1a8e0:	ldrb	r1, [sp, #33]	; 0x21
   1a8e4:	tst	r1, #8
   1a8e8:	bne	1a900 <__assert_fail@plt+0x8874>
   1a8ec:	mvn	r1, #0
   1a8f0:	str	r1, [r4, #80]	; 0x50
   1a8f4:	str	r1, [r4, #84]	; 0x54
   1a8f8:	sub	sp, fp, #28
   1a8fc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1a900:	add	r1, r8, #80	; 0x50
   1a904:	ldr	r2, [r1]
   1a908:	ldr	r3, [r1, #8]
   1a90c:	strd	r2, [lr]
   1a910:	sub	sp, fp, #28
   1a914:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1a918:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1a91c:	add	fp, sp, #28
   1a920:	sub	sp, sp, #52	; 0x34
   1a924:	ldr	r7, [r0]
   1a928:	mov	r9, r0
   1a92c:	mov	r0, r2
   1a930:	mov	r5, r3
   1a934:	mov	r6, r2
   1a938:	mov	r4, r1
   1a93c:	bl	25fcc <_obstack_memory_used@@Base+0x178>
   1a940:	movw	r1, #4688	; 0x1250
   1a944:	movt	r1, #4
   1a948:	ldrb	r1, [r1, #21]
   1a94c:	cmp	r1, #0
   1a950:	beq	1aa24 <__assert_fail@plt+0x8998>
   1a954:	sub	r1, r0, #1
   1a958:	clz	r0, r0
   1a95c:	mov	r2, #0
   1a960:	cmp	r1, #2
   1a964:	lsr	r0, r0, #5
   1a968:	movwcc	r2, #1
   1a96c:	orr	r8, r0, r2
   1a970:	cmp	r5, #0
   1a974:	str	r9, [sp, #32]
   1a978:	beq	1aa34 <__assert_fail@plt+0x89a8>
   1a97c:	mov	r0, r7
   1a980:	mov	r1, #8192	; 0x2000
   1a984:	mov	r2, r4
   1a988:	mvn	r3, #0
   1a98c:	str	r6, [sp]
   1a990:	bl	26090 <_obstack_memory_used@@Base+0x23c>
   1a994:	mov	sl, r0
   1a998:	cmp	r0, #8192	; 0x2000
   1a99c:	bcc	1a9c4 <__assert_fail@plt+0x8938>
   1a9a0:	add	r7, sl, #1
   1a9a4:	mov	r0, r7
   1a9a8:	bl	29090 <_obstack_memory_used@@Base+0x323c>
   1a9ac:	mov	r1, r7
   1a9b0:	mov	r2, r4
   1a9b4:	mvn	r3, #0
   1a9b8:	str	r6, [sp]
   1a9bc:	mov	r7, r0
   1a9c0:	bl	26090 <_obstack_memory_used@@Base+0x23c>
   1a9c4:	ldrb	r0, [r7]
   1a9c8:	ldrb	r1, [r4]
   1a9cc:	mov	r5, #1
   1a9d0:	cmp	r1, r0
   1a9d4:	bne	1a9e8 <__assert_fail@plt+0x895c>
   1a9d8:	mov	r0, r4
   1a9dc:	bl	11eac <strlen@plt>
   1a9e0:	subs	r5, r0, sl
   1a9e4:	movwne	r5, #1
   1a9e8:	ldr	r6, [fp, #8]
   1a9ec:	cmp	r8, #0
   1a9f0:	bne	1aa7c <__assert_fail@plt+0x89f0>
   1a9f4:	cmp	r6, #0
   1a9f8:	str	r5, [sp, #24]
   1a9fc:	beq	1aee0 <__assert_fail@plt+0x8e54>
   1aa00:	bl	11d68 <__ctype_get_mb_cur_max@plt>
   1aa04:	cmp	r0, #2
   1aa08:	bcc	1aee4 <__assert_fail@plt+0x8e58>
   1aa0c:	mov	r0, r7
   1aa10:	mov	r1, sl
   1aa14:	mov	r2, #0
   1aa18:	bl	235b0 <__assert_fail@plt+0x11524>
   1aa1c:	mov	r9, r0
   1aa20:	b	1af48 <__assert_fail@plt+0x8ebc>
   1aa24:	mov	r8, #0
   1aa28:	cmp	r5, #0
   1aa2c:	str	r9, [sp, #32]
   1aa30:	bne	1a97c <__assert_fail@plt+0x88f0>
   1aa34:	mov	r0, r4
   1aa38:	bl	11eac <strlen@plt>
   1aa3c:	mov	sl, r0
   1aa40:	mov	r5, #0
   1aa44:	cmp	r8, #0
   1aa48:	beq	1aecc <__assert_fail@plt+0x8e40>
   1aa4c:	add	r6, sl, #1
   1aa50:	cmp	sl, #8192	; 0x2000
   1aa54:	bcc	1aa64 <__assert_fail@plt+0x89d8>
   1aa58:	mov	r0, r6
   1aa5c:	bl	29090 <_obstack_memory_used@@Base+0x323c>
   1aa60:	mov	r7, r0
   1aa64:	mov	r0, r7
   1aa68:	mov	r1, r4
   1aa6c:	mov	r2, r6
   1aa70:	bl	11c60 <memcpy@plt>
   1aa74:	ldr	r6, [fp, #8]
   1aa78:	mov	r5, #0
   1aa7c:	add	r0, r7, sl
   1aa80:	str	r0, [sp, #28]
   1aa84:	bl	11d68 <__ctype_get_mb_cur_max@plt>
   1aa88:	cmp	r0, #1
   1aa8c:	str	r5, [sp, #24]
   1aa90:	bls	1ae80 <__assert_fail@plt+0x8df4>
   1aa94:	cmp	sl, #1
   1aa98:	blt	1af20 <__assert_fail@plt+0x8e94>
   1aa9c:	ldr	r6, [sp, #28]
   1aaa0:	movw	r3, #4688	; 0x1250
   1aaa4:	mov	r4, #0
   1aaa8:	add	sl, sp, #36	; 0x24
   1aaac:	mov	r9, #0
   1aab0:	mov	r8, r7
   1aab4:	mov	r5, r7
   1aab8:	movt	r3, #4
   1aabc:	ldrb	r0, [r5]
   1aac0:	sub	r1, r0, #32
   1aac4:	cmp	r1, #94	; 0x5e
   1aac8:	bhi	1ac68 <__assert_fail@plt+0x8bdc>
   1aacc:	add	r2, pc, #0
   1aad0:	ldr	pc, [r2, r1, lsl #2]
   1aad4:	andeq	sl, r1, r0, asr ip
   1aad8:	andeq	sl, r1, r0, asr ip
   1aadc:	andeq	sl, r1, r0, asr ip
   1aae0:	andeq	sl, r1, r0, asr ip
   1aae4:	andeq	sl, r1, r8, ror #24
   1aae8:	andeq	sl, r1, r0, asr ip
   1aaec:	andeq	sl, r1, r0, asr ip
   1aaf0:	andeq	sl, r1, r0, asr ip
   1aaf4:	andeq	sl, r1, r0, asr ip
   1aaf8:	andeq	sl, r1, r0, asr ip
   1aafc:	andeq	sl, r1, r0, asr ip
   1ab00:	andeq	sl, r1, r0, asr ip
   1ab04:	andeq	sl, r1, r0, asr ip
   1ab08:	andeq	sl, r1, r0, asr ip
   1ab0c:	andeq	sl, r1, r0, asr ip
   1ab10:	andeq	sl, r1, r0, asr ip
   1ab14:	andeq	sl, r1, r0, asr ip
   1ab18:	andeq	sl, r1, r0, asr ip
   1ab1c:	andeq	sl, r1, r0, asr ip
   1ab20:	andeq	sl, r1, r0, asr ip
   1ab24:	andeq	sl, r1, r0, asr ip
   1ab28:	andeq	sl, r1, r0, asr ip
   1ab2c:	andeq	sl, r1, r0, asr ip
   1ab30:	andeq	sl, r1, r0, asr ip
   1ab34:	andeq	sl, r1, r0, asr ip
   1ab38:	andeq	sl, r1, r0, asr ip
   1ab3c:	andeq	sl, r1, r0, asr ip
   1ab40:	andeq	sl, r1, r0, asr ip
   1ab44:	andeq	sl, r1, r0, asr ip
   1ab48:	andeq	sl, r1, r0, asr ip
   1ab4c:	andeq	sl, r1, r0, asr ip
   1ab50:	andeq	sl, r1, r0, asr ip
   1ab54:	andeq	sl, r1, r8, ror #24
   1ab58:	andeq	sl, r1, r0, asr ip
   1ab5c:	andeq	sl, r1, r0, asr ip
   1ab60:	andeq	sl, r1, r0, asr ip
   1ab64:	andeq	sl, r1, r0, asr ip
   1ab68:	andeq	sl, r1, r0, asr ip
   1ab6c:	andeq	sl, r1, r0, asr ip
   1ab70:	andeq	sl, r1, r0, asr ip
   1ab74:	andeq	sl, r1, r0, asr ip
   1ab78:	andeq	sl, r1, r0, asr ip
   1ab7c:	andeq	sl, r1, r0, asr ip
   1ab80:	andeq	sl, r1, r0, asr ip
   1ab84:	andeq	sl, r1, r0, asr ip
   1ab88:	andeq	sl, r1, r0, asr ip
   1ab8c:	andeq	sl, r1, r0, asr ip
   1ab90:	andeq	sl, r1, r0, asr ip
   1ab94:	andeq	sl, r1, r0, asr ip
   1ab98:	andeq	sl, r1, r0, asr ip
   1ab9c:	andeq	sl, r1, r0, asr ip
   1aba0:	andeq	sl, r1, r0, asr ip
   1aba4:	andeq	sl, r1, r0, asr ip
   1aba8:	andeq	sl, r1, r0, asr ip
   1abac:	andeq	sl, r1, r0, asr ip
   1abb0:	andeq	sl, r1, r0, asr ip
   1abb4:	andeq	sl, r1, r0, asr ip
   1abb8:	andeq	sl, r1, r0, asr ip
   1abbc:	andeq	sl, r1, r0, asr ip
   1abc0:	andeq	sl, r1, r0, asr ip
   1abc4:	andeq	sl, r1, r0, asr ip
   1abc8:	andeq	sl, r1, r0, asr ip
   1abcc:	andeq	sl, r1, r0, asr ip
   1abd0:	andeq	sl, r1, r0, asr ip
   1abd4:	andeq	sl, r1, r8, ror #24
   1abd8:	andeq	sl, r1, r0, asr ip
   1abdc:	andeq	sl, r1, r0, asr ip
   1abe0:	andeq	sl, r1, r0, asr ip
   1abe4:	andeq	sl, r1, r0, asr ip
   1abe8:	andeq	sl, r1, r0, asr ip
   1abec:	andeq	sl, r1, r0, asr ip
   1abf0:	andeq	sl, r1, r0, asr ip
   1abf4:	andeq	sl, r1, r0, asr ip
   1abf8:	andeq	sl, r1, r0, asr ip
   1abfc:	andeq	sl, r1, r0, asr ip
   1ac00:	andeq	sl, r1, r0, asr ip
   1ac04:	andeq	sl, r1, r0, asr ip
   1ac08:	andeq	sl, r1, r0, asr ip
   1ac0c:	andeq	sl, r1, r0, asr ip
   1ac10:	andeq	sl, r1, r0, asr ip
   1ac14:	andeq	sl, r1, r0, asr ip
   1ac18:	andeq	sl, r1, r0, asr ip
   1ac1c:	andeq	sl, r1, r0, asr ip
   1ac20:	andeq	sl, r1, r0, asr ip
   1ac24:	andeq	sl, r1, r0, asr ip
   1ac28:	andeq	sl, r1, r0, asr ip
   1ac2c:	andeq	sl, r1, r0, asr ip
   1ac30:	andeq	sl, r1, r0, asr ip
   1ac34:	andeq	sl, r1, r0, asr ip
   1ac38:	andeq	sl, r1, r0, asr ip
   1ac3c:	andeq	sl, r1, r0, asr ip
   1ac40:	andeq	sl, r1, r0, asr ip
   1ac44:	andeq	sl, r1, r0, asr ip
   1ac48:	andeq	sl, r1, r0, asr ip
   1ac4c:	andeq	sl, r1, r0, asr ip
   1ac50:	strb	r0, [r8], #1
   1ac54:	add	r9, r9, #1
   1ac58:	add	r5, r5, #1
   1ac5c:	cmp	r5, r6
   1ac60:	bcc	1aabc <__assert_fail@plt+0x8a30>
   1ac64:	b	1af30 <__assert_fail@plt+0x8ea4>
   1ac68:	str	r4, [sp, #44]	; 0x2c
   1ac6c:	str	r4, [sp, #40]	; 0x28
   1ac70:	add	r4, sp, #40	; 0x28
   1ac74:	str	r7, [sp, #8]
   1ac78:	b	1aca8 <__assert_fail@plt+0x8c1c>
   1ac7c:	mov	r0, #63	; 0x3f
   1ac80:	add	r5, r5, r4
   1ac84:	strb	r0, [r8], #1
   1ac88:	mov	r0, #1
   1ac8c:	add	r4, sp, #40	; 0x28
   1ac90:	add	r9, r0, r9
   1ac94:	mov	r0, r4
   1ac98:	bl	11c78 <mbsinit@plt>
   1ac9c:	ldr	r6, [sp, #28]
   1aca0:	cmp	r0, #0
   1aca4:	bne	1ae68 <__assert_fail@plt+0x8ddc>
   1aca8:	sub	r2, r6, r5
   1acac:	mov	r0, sl
   1acb0:	mov	r1, r5
   1acb4:	mov	r3, r4
   1acb8:	bl	2309c <__assert_fail@plt+0x11010>
   1acbc:	cmp	r0, #0
   1acc0:	beq	1ae30 <__assert_fail@plt+0x8da4>
   1acc4:	mov	r4, r0
   1acc8:	cmn	r0, #2
   1accc:	beq	1ae48 <__assert_fail@plt+0x8dbc>
   1acd0:	cmn	r4, #1
   1acd4:	beq	1ae54 <__assert_fail@plt+0x8dc8>
   1acd8:	ldr	r0, [sp, #36]	; 0x24
   1acdc:	bl	11c00 <wcwidth@plt>
   1ace0:	cmp	r0, #0
   1ace4:	bmi	1ac7c <__assert_fail@plt+0x8bf0>
   1ace8:	cmp	r4, #16
   1acec:	bcc	1add4 <__assert_fail@plt+0x8d48>
   1acf0:	add	r1, r5, r4
   1acf4:	cmp	r8, r1
   1acf8:	addcc	r1, r8, r4
   1acfc:	cmpcc	r5, r1
   1ad00:	bcc	1add4 <__assert_fail@plt+0x8d48>
   1ad04:	str	r0, [sp, #16]
   1ad08:	bic	r0, r4, #15
   1ad0c:	mov	r1, #1
   1ad10:	mov	r3, #0
   1ad14:	sub	r7, r0, #16
   1ad18:	str	r0, [sp, #12]
   1ad1c:	add	r2, r1, r7, lsr #4
   1ad20:	cmp	r7, #48	; 0x30
   1ad24:	and	r0, r2, #3
   1ad28:	str	r0, [sp, #20]
   1ad2c:	mov	r0, #48	; 0x30
   1ad30:	bcc	1ad8c <__assert_fail@plt+0x8d00>
   1ad34:	ldr	r1, [sp, #20]
   1ad38:	mov	r3, #0
   1ad3c:	sub	r2, r2, r1
   1ad40:	add	r7, r5, r3
   1ad44:	add	ip, r8, r3
   1ad48:	subs	r2, r2, #4
   1ad4c:	add	r3, r3, #64	; 0x40
   1ad50:	mov	r1, r7
   1ad54:	mov	lr, ip
   1ad58:	add	sl, r7, #16
   1ad5c:	add	r6, ip, #16
   1ad60:	vld1.8	{d16-d17}, [r1], r0
   1ad64:	vst1.8	{d16-d17}, [lr], r0
   1ad68:	vld1.8	{d16-d17}, [sl]
   1ad6c:	vst1.8	{d16-d17}, [r6]
   1ad70:	add	r6, r7, #32
   1ad74:	add	r7, ip, #32
   1ad78:	vld1.8	{d16-d17}, [r6]
   1ad7c:	vst1.8	{d16-d17}, [r7]
   1ad80:	vld1.8	{d16-d17}, [r1]
   1ad84:	vst1.8	{d16-d17}, [lr]
   1ad88:	bne	1ad40 <__assert_fail@plt+0x8cb4>
   1ad8c:	ldr	r1, [sp, #20]
   1ad90:	ldr	r0, [sp, #16]
   1ad94:	cmp	r1, #0
   1ad98:	beq	1adb8 <__assert_fail@plt+0x8d2c>
   1ad9c:	add	r2, r8, r3
   1ada0:	add	r3, r5, r3
   1ada4:	rsb	r7, r1, #0
   1ada8:	vld1.8	{d16-d17}, [r3]!
   1adac:	adds	r7, r7, #1
   1adb0:	vst1.8	{d16-d17}, [r2]!
   1adb4:	bcc	1ada8 <__assert_fail@plt+0x8d1c>
   1adb8:	ldr	r1, [sp, #12]
   1adbc:	ldr	r7, [sp, #8]
   1adc0:	add	sl, sp, #36	; 0x24
   1adc4:	add	r5, r5, r1
   1adc8:	add	r8, r8, r1
   1adcc:	subs	r4, r4, r1
   1add0:	beq	1ac8c <__assert_fail@plt+0x8c00>
   1add4:	ands	r2, r4, #3
   1add8:	sub	r1, r4, #1
   1addc:	beq	1adf4 <__assert_fail@plt+0x8d68>
   1ade0:	ldrb	r3, [r5], #1
   1ade4:	subs	r2, r2, #1
   1ade8:	sub	r4, r4, #1
   1adec:	strb	r3, [r8], #1
   1adf0:	bne	1ade0 <__assert_fail@plt+0x8d54>
   1adf4:	cmp	r1, #3
   1adf8:	bcc	1ac8c <__assert_fail@plt+0x8c00>
   1adfc:	ldrb	r1, [r5]
   1ae00:	subs	r4, r4, #4
   1ae04:	strb	r1, [r8]
   1ae08:	ldrb	r1, [r5, #1]
   1ae0c:	strb	r1, [r8, #1]
   1ae10:	ldrb	r1, [r5, #2]
   1ae14:	strb	r1, [r8, #2]
   1ae18:	ldrb	r1, [r5, #3]
   1ae1c:	add	r5, r5, #4
   1ae20:	strb	r1, [r8, #3]
   1ae24:	add	r8, r8, #4
   1ae28:	bne	1adfc <__assert_fail@plt+0x8d70>
   1ae2c:	b	1ac8c <__assert_fail@plt+0x8c00>
   1ae30:	mov	r4, #1
   1ae34:	ldr	r0, [sp, #36]	; 0x24
   1ae38:	bl	11c00 <wcwidth@plt>
   1ae3c:	cmp	r0, #0
   1ae40:	bpl	1ace8 <__assert_fail@plt+0x8c5c>
   1ae44:	b	1ac7c <__assert_fail@plt+0x8bf0>
   1ae48:	ldr	r6, [sp, #28]
   1ae4c:	mov	r5, r6
   1ae50:	b	1ae5c <__assert_fail@plt+0x8dd0>
   1ae54:	ldr	r6, [sp, #28]
   1ae58:	add	r5, r5, #1
   1ae5c:	mov	r0, #63	; 0x3f
   1ae60:	add	r9, r9, #1
   1ae64:	strb	r0, [r8], #1
   1ae68:	movw	r3, #4688	; 0x1250
   1ae6c:	mov	r4, #0
   1ae70:	movt	r3, #4
   1ae74:	cmp	r5, r6
   1ae78:	bcc	1aabc <__assert_fail@plt+0x8a30>
   1ae7c:	b	1af30 <__assert_fail@plt+0x8ea4>
   1ae80:	cmp	sl, #1
   1ae84:	blt	1af3c <__assert_fail@plt+0x8eb0>
   1ae88:	bl	11e64 <__ctype_b_loc@plt>
   1ae8c:	ldr	r4, [sp, #28]
   1ae90:	mov	r1, #63	; 0x3f
   1ae94:	mov	ip, r7
   1ae98:	mov	r2, r7
   1ae9c:	ldrb	r3, [r2]
   1aea0:	ldr	r7, [r0]
   1aea4:	add	r3, r7, r3, lsl #1
   1aea8:	ldrb	r3, [r3, #1]
   1aeac:	tst	r3, #64	; 0x40
   1aeb0:	strbeq	r1, [r2]
   1aeb4:	add	r2, r2, #1
   1aeb8:	cmp	r2, r4
   1aebc:	bcc	1ae9c <__assert_fail@plt+0x8e10>
   1aec0:	mov	r9, sl
   1aec4:	mov	r7, ip
   1aec8:	b	1af48 <__assert_fail@plt+0x8ebc>
   1aecc:	ldr	r6, [fp, #8]
   1aed0:	mov	r7, r4
   1aed4:	cmp	r6, #0
   1aed8:	str	r5, [sp, #24]
   1aedc:	bne	1aa00 <__assert_fail@plt+0x8974>
   1aee0:	b	1af48 <__assert_fail@plt+0x8ebc>
   1aee4:	cmp	sl, #1
   1aee8:	blt	1af44 <__assert_fail@plt+0x8eb8>
   1aeec:	add	r4, r7, sl
   1aef0:	bl	11e64 <__ctype_b_loc@plt>
   1aef4:	ldr	r0, [r0]
   1aef8:	mov	r9, #0
   1aefc:	mov	r1, r7
   1af00:	ldrb	r2, [r1], #1
   1af04:	cmp	r1, r4
   1af08:	add	r2, r0, r2, lsl #1
   1af0c:	ldrh	r2, [r2]
   1af10:	ubfx	r2, r2, #14, #1
   1af14:	add	r9, r9, r2
   1af18:	bcc	1af00 <__assert_fail@plt+0x8e74>
   1af1c:	b	1af48 <__assert_fail@plt+0x8ebc>
   1af20:	movw	r3, #4688	; 0x1250
   1af24:	mov	r9, #0
   1af28:	mov	r8, r7
   1af2c:	movt	r3, #4
   1af30:	ldr	r6, [fp, #8]
   1af34:	sub	sl, r8, r7
   1af38:	b	1af50 <__assert_fail@plt+0x8ec4>
   1af3c:	mov	r9, sl
   1af40:	b	1af48 <__assert_fail@plt+0x8ebc>
   1af44:	mov	r9, #0
   1af48:	movw	r3, #4688	; 0x1250
   1af4c:	movt	r3, #4
   1af50:	ldrb	r2, [r3, #22]
   1af54:	ldr	r0, [fp, #12]
   1af58:	mov	r1, #0
   1af5c:	cmp	r2, #0
   1af60:	beq	1af74 <__assert_fail@plt+0x8ee8>
   1af64:	ldrb	r2, [r3, #25]
   1af68:	cmp	r2, #1
   1af6c:	ldreq	r1, [sp, #24]
   1af70:	eoreq	r1, r1, #1
   1af74:	strb	r1, [r0]
   1af78:	ldr	r0, [sp, #32]
   1af7c:	cmp	r6, #0
   1af80:	strne	r9, [r6]
   1af84:	str	r7, [r0]
   1af88:	mov	r0, sl
   1af8c:	sub	sp, fp, #28
   1af90:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1af94:	push	{fp, lr}
   1af98:	mov	fp, sp
   1af9c:	movw	r1, #4688	; 0x1250
   1afa0:	mov	r0, #2
   1afa4:	movt	r1, #4
   1afa8:	ldrb	r3, [r1, #15]
   1afac:	ldrb	r2, [r1, #8]
   1afb0:	cmp	r3, #0
   1afb4:	movwne	r0, #258	; 0x102
   1afb8:	bfi	r0, r2, #10, #1
   1afbc:	ldr	r2, [r1, #40]	; 0x28
   1afc0:	cmp	r2, #0
   1afc4:	bne	1b010 <__assert_fail@plt+0x8f84>
   1afc8:	ldr	r2, [r1, #96]	; 0x60
   1afcc:	cmp	r2, #4
   1afd0:	bcs	1b058 <__assert_fail@plt+0x8fcc>
   1afd4:	movw	r3, #61012	; 0xee54
   1afd8:	movt	r3, #2
   1afdc:	ldr	r2, [r3, r2, lsl #2]
   1afe0:	orr	r0, r2, r0
   1afe4:	ldrb	r2, [r1, #14]
   1afe8:	cmp	r2, #1
   1afec:	bne	1b000 <__assert_fail@plt+0x8f74>
   1aff0:	ldrb	r2, [r1, #19]
   1aff4:	cmp	r2, #1
   1aff8:	orreq	r0, r0, #8
   1affc:	b	1b004 <__assert_fail@plt+0x8f78>
   1b000:	orr	r0, r0, #8
   1b004:	ldrb	r2, [r1, #17]
   1b008:	cmp	r2, #0
   1b00c:	orreq	r0, r0, #16
   1b010:	ldr	r2, [r1, #60]	; 0x3c
   1b014:	cmp	r2, #6
   1b018:	bhi	1b058 <__assert_fail@plt+0x8fcc>
   1b01c:	mov	ip, #1
   1b020:	mov	r3, #87	; 0x57
   1b024:	tst	r3, ip, lsl r2
   1b028:	popne	{fp, pc}
   1b02c:	cmp	r2, #3
   1b030:	bne	1b03c <__assert_fail@plt+0x8fb0>
   1b034:	orr	r0, r0, #512	; 0x200
   1b038:	pop	{fp, pc}
   1b03c:	ldr	r1, [r1, #96]	; 0x60
   1b040:	cmp	r1, #4
   1b044:	movwcc	r2, #61028	; 0xee64
   1b048:	movtcc	r2, #2
   1b04c:	ldrcc	r1, [r2, r1, lsl #2]
   1b050:	orrcc	r0, r1, r0
   1b054:	popcc	{fp, pc}
   1b058:	bl	12038 <abort@plt>
   1b05c:	push	{r4, r5, fp, lr}
   1b060:	add	fp, sp, #8
   1b064:	ldr	r4, [r1]
   1b068:	ldr	r5, [r0]
   1b06c:	bl	11ed0 <__errno_location@plt>
   1b070:	mov	r1, #0
   1b074:	str	r1, [r0]
   1b078:	mov	r0, r5
   1b07c:	mov	r1, r4
   1b080:	pop	{r4, r5, fp, lr}
   1b084:	b	11dd4 <strcoll@plt>
   1b088:	push	{r4, r5, fp, lr}
   1b08c:	add	fp, sp, #8
   1b090:	ldr	r5, [r1, #120]	; 0x78
   1b094:	mov	r2, #1
   1b098:	mov	r3, #1
   1b09c:	cmp	r5, #3
   1b0a0:	beq	1b0c4 <__assert_fail@plt+0x9038>
   1b0a4:	cmp	r5, #9
   1b0a8:	mov	r3, #1
   1b0ac:	beq	1b0c4 <__assert_fail@plt+0x9038>
   1b0b0:	ldr	r3, [r1, #124]	; 0x7c
   1b0b4:	and	r3, r3, #61440	; 0xf000
   1b0b8:	sub	r3, r3, #16384	; 0x4000
   1b0bc:	clz	r3, r3
   1b0c0:	lsr	r3, r3, #5
   1b0c4:	ldr	r5, [r0, #120]	; 0x78
   1b0c8:	cmp	r5, #3
   1b0cc:	cmpne	r5, #9
   1b0d0:	beq	1b0e8 <__assert_fail@plt+0x905c>
   1b0d4:	ldr	r2, [r0, #124]	; 0x7c
   1b0d8:	and	r2, r2, #61440	; 0xf000
   1b0dc:	sub	r2, r2, #16384	; 0x4000
   1b0e0:	clz	r2, r2
   1b0e4:	lsr	r2, r2, #5
   1b0e8:	subs	r2, r3, r2
   1b0ec:	movne	r0, r2
   1b0f0:	popne	{r4, r5, fp, pc}
   1b0f4:	ldr	r4, [r1]
   1b0f8:	ldr	r5, [r0]
   1b0fc:	bl	11ed0 <__errno_location@plt>
   1b100:	mov	r1, #0
   1b104:	str	r1, [r0]
   1b108:	mov	r0, r5
   1b10c:	mov	r1, r4
   1b110:	pop	{r4, r5, fp, lr}
   1b114:	b	11dd4 <strcoll@plt>
   1b118:	push	{r4, r5, fp, lr}
   1b11c:	add	fp, sp, #8
   1b120:	ldr	r4, [r0]
   1b124:	ldr	r5, [r1]
   1b128:	bl	11ed0 <__errno_location@plt>
   1b12c:	mov	r1, #0
   1b130:	str	r1, [r0]
   1b134:	mov	r0, r5
   1b138:	mov	r1, r4
   1b13c:	pop	{r4, r5, fp, lr}
   1b140:	b	11dd4 <strcoll@plt>
   1b144:	push	{r4, r5, fp, lr}
   1b148:	add	fp, sp, #8
   1b14c:	ldr	r5, [r1, #120]	; 0x78
   1b150:	mov	r2, #1
   1b154:	mov	r3, #1
   1b158:	cmp	r5, #3
   1b15c:	beq	1b180 <__assert_fail@plt+0x90f4>
   1b160:	cmp	r5, #9
   1b164:	mov	r3, #1
   1b168:	beq	1b180 <__assert_fail@plt+0x90f4>
   1b16c:	ldr	r3, [r1, #124]	; 0x7c
   1b170:	and	r3, r3, #61440	; 0xf000
   1b174:	sub	r3, r3, #16384	; 0x4000
   1b178:	clz	r3, r3
   1b17c:	lsr	r3, r3, #5
   1b180:	ldr	r5, [r0, #120]	; 0x78
   1b184:	cmp	r5, #3
   1b188:	cmpne	r5, #9
   1b18c:	beq	1b1a4 <__assert_fail@plt+0x9118>
   1b190:	ldr	r2, [r0, #124]	; 0x7c
   1b194:	and	r2, r2, #61440	; 0xf000
   1b198:	sub	r2, r2, #16384	; 0x4000
   1b19c:	clz	r2, r2
   1b1a0:	lsr	r2, r2, #5
   1b1a4:	subs	r2, r3, r2
   1b1a8:	movne	r0, r2
   1b1ac:	popne	{r4, r5, fp, pc}
   1b1b0:	ldr	r4, [r0]
   1b1b4:	ldr	r5, [r1]
   1b1b8:	bl	11ed0 <__errno_location@plt>
   1b1bc:	mov	r1, #0
   1b1c0:	str	r1, [r0]
   1b1c4:	mov	r0, r5
   1b1c8:	mov	r1, r4
   1b1cc:	pop	{r4, r5, fp, lr}
   1b1d0:	b	11dd4 <strcoll@plt>
   1b1d4:	ldr	r1, [r1]
   1b1d8:	ldr	r0, [r0]
   1b1dc:	b	11bd0 <strcmp@plt>
   1b1e0:	ldr	r2, [r1, #120]	; 0x78
   1b1e4:	mov	ip, #1
   1b1e8:	mov	r3, #1
   1b1ec:	cmp	r2, #3
   1b1f0:	beq	1b214 <__assert_fail@plt+0x9188>
   1b1f4:	cmp	r2, #9
   1b1f8:	mov	r3, #1
   1b1fc:	beq	1b214 <__assert_fail@plt+0x9188>
   1b200:	ldr	r2, [r1, #124]	; 0x7c
   1b204:	and	r2, r2, #61440	; 0xf000
   1b208:	sub	r2, r2, #16384	; 0x4000
   1b20c:	clz	r2, r2
   1b210:	lsr	r3, r2, #5
   1b214:	ldr	r2, [r0, #120]	; 0x78
   1b218:	cmp	r2, #3
   1b21c:	cmpne	r2, #9
   1b220:	beq	1b238 <__assert_fail@plt+0x91ac>
   1b224:	ldr	r2, [r0, #124]	; 0x7c
   1b228:	and	r2, r2, #61440	; 0xf000
   1b22c:	sub	r2, r2, #16384	; 0x4000
   1b230:	clz	r2, r2
   1b234:	lsr	ip, r2, #5
   1b238:	subs	r2, r3, ip
   1b23c:	movne	r0, r2
   1b240:	bxne	lr
   1b244:	ldr	r1, [r1]
   1b248:	ldr	r0, [r0]
   1b24c:	b	11bd0 <strcmp@plt>
   1b250:	ldr	r2, [r0]
   1b254:	ldr	r0, [r1]
   1b258:	mov	r1, r2
   1b25c:	b	11bd0 <strcmp@plt>
   1b260:	ldr	r2, [r1, #120]	; 0x78
   1b264:	mov	ip, #1
   1b268:	mov	r3, #1
   1b26c:	cmp	r2, #3
   1b270:	beq	1b294 <__assert_fail@plt+0x9208>
   1b274:	cmp	r2, #9
   1b278:	mov	r3, #1
   1b27c:	beq	1b294 <__assert_fail@plt+0x9208>
   1b280:	ldr	r2, [r1, #124]	; 0x7c
   1b284:	and	r2, r2, #61440	; 0xf000
   1b288:	sub	r2, r2, #16384	; 0x4000
   1b28c:	clz	r2, r2
   1b290:	lsr	r3, r2, #5
   1b294:	ldr	r2, [r0, #120]	; 0x78
   1b298:	cmp	r2, #3
   1b29c:	cmpne	r2, #9
   1b2a0:	beq	1b2b8 <__assert_fail@plt+0x922c>
   1b2a4:	ldr	r2, [r0, #124]	; 0x7c
   1b2a8:	and	r2, r2, #61440	; 0xf000
   1b2ac:	sub	r2, r2, #16384	; 0x4000
   1b2b0:	clz	r2, r2
   1b2b4:	lsr	ip, r2, #5
   1b2b8:	subs	r2, r3, ip
   1b2bc:	movne	r0, r2
   1b2c0:	bxne	lr
   1b2c4:	ldr	r2, [r0]
   1b2c8:	ldr	r0, [r1]
   1b2cc:	mov	r1, r2
   1b2d0:	b	11bd0 <strcmp@plt>
   1b2d4:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   1b2d8:	add	fp, sp, #24
   1b2dc:	ldr	r8, [r0]
   1b2e0:	mov	r5, r1
   1b2e4:	mov	r1, #46	; 0x2e
   1b2e8:	mov	r0, r8
   1b2ec:	bl	11f84 <strrchr@plt>
   1b2f0:	ldr	r5, [r5]
   1b2f4:	mov	r7, r0
   1b2f8:	mov	r1, #46	; 0x2e
   1b2fc:	mov	r0, r5
   1b300:	bl	11f84 <strrchr@plt>
   1b304:	mov	r4, r0
   1b308:	bl	11ed0 <__errno_location@plt>
   1b30c:	movw	r1, #54434	; 0xd4a2
   1b310:	cmp	r7, #0
   1b314:	mov	r9, #0
   1b318:	mov	r6, r0
   1b31c:	movt	r1, #2
   1b320:	str	r9, [r0]
   1b324:	moveq	r7, r1
   1b328:	cmp	r4, #0
   1b32c:	movne	r1, r4
   1b330:	mov	r0, r7
   1b334:	bl	11dd4 <strcoll@plt>
   1b338:	cmp	r0, #0
   1b33c:	beq	1b344 <__assert_fail@plt+0x92b8>
   1b340:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   1b344:	str	r9, [r6]
   1b348:	mov	r0, r8
   1b34c:	mov	r1, r5
   1b350:	pop	{r4, r5, r6, r7, r8, r9, fp, lr}
   1b354:	b	11dd4 <strcoll@plt>
   1b358:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   1b35c:	add	fp, sp, #24
   1b360:	ldr	r3, [r1, #120]	; 0x78
   1b364:	mov	r4, r1
   1b368:	mov	r1, #1
   1b36c:	mov	r2, #1
   1b370:	cmp	r3, #3
   1b374:	beq	1b398 <__assert_fail@plt+0x930c>
   1b378:	cmp	r3, #9
   1b37c:	mov	r2, #1
   1b380:	beq	1b398 <__assert_fail@plt+0x930c>
   1b384:	ldr	r2, [r4, #124]	; 0x7c
   1b388:	and	r2, r2, #61440	; 0xf000
   1b38c:	sub	r2, r2, #16384	; 0x4000
   1b390:	clz	r2, r2
   1b394:	lsr	r2, r2, #5
   1b398:	ldr	r3, [r0, #120]	; 0x78
   1b39c:	cmp	r3, #3
   1b3a0:	cmpne	r3, #9
   1b3a4:	bne	1b428 <__assert_fail@plt+0x939c>
   1b3a8:	subs	r1, r2, r1
   1b3ac:	bne	1b444 <__assert_fail@plt+0x93b8>
   1b3b0:	ldr	r8, [r0]
   1b3b4:	mov	r1, #46	; 0x2e
   1b3b8:	mov	r0, r8
   1b3bc:	bl	11f84 <strrchr@plt>
   1b3c0:	ldr	r4, [r4]
   1b3c4:	mov	r7, r0
   1b3c8:	mov	r1, #46	; 0x2e
   1b3cc:	mov	r0, r4
   1b3d0:	bl	11f84 <strrchr@plt>
   1b3d4:	mov	r5, r0
   1b3d8:	bl	11ed0 <__errno_location@plt>
   1b3dc:	movw	r1, #54434	; 0xd4a2
   1b3e0:	cmp	r7, #0
   1b3e4:	mov	r9, #0
   1b3e8:	mov	r6, r0
   1b3ec:	movt	r1, #2
   1b3f0:	str	r9, [r0]
   1b3f4:	moveq	r7, r1
   1b3f8:	cmp	r5, #0
   1b3fc:	movne	r1, r5
   1b400:	mov	r0, r7
   1b404:	bl	11dd4 <strcoll@plt>
   1b408:	mov	r1, r0
   1b40c:	cmp	r0, #0
   1b410:	bne	1b444 <__assert_fail@plt+0x93b8>
   1b414:	str	r9, [r6]
   1b418:	mov	r0, r8
   1b41c:	mov	r1, r4
   1b420:	pop	{r4, r5, r6, r7, r8, r9, fp, lr}
   1b424:	b	11dd4 <strcoll@plt>
   1b428:	ldr	r1, [r0, #124]	; 0x7c
   1b42c:	and	r1, r1, #61440	; 0xf000
   1b430:	sub	r1, r1, #16384	; 0x4000
   1b434:	clz	r1, r1
   1b438:	lsr	r1, r1, #5
   1b43c:	subs	r1, r2, r1
   1b440:	beq	1b3b0 <__assert_fail@plt+0x9324>
   1b444:	mov	r0, r1
   1b448:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   1b44c:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   1b450:	add	fp, sp, #24
   1b454:	ldr	r8, [r1]
   1b458:	mov	r5, r0
   1b45c:	mov	r1, #46	; 0x2e
   1b460:	mov	r0, r8
   1b464:	bl	11f84 <strrchr@plt>
   1b468:	ldr	r5, [r5]
   1b46c:	mov	r7, r0
   1b470:	mov	r1, #46	; 0x2e
   1b474:	mov	r0, r5
   1b478:	bl	11f84 <strrchr@plt>
   1b47c:	mov	r4, r0
   1b480:	bl	11ed0 <__errno_location@plt>
   1b484:	movw	r1, #54434	; 0xd4a2
   1b488:	cmp	r7, #0
   1b48c:	mov	r9, #0
   1b490:	mov	r6, r0
   1b494:	movt	r1, #2
   1b498:	str	r9, [r0]
   1b49c:	moveq	r7, r1
   1b4a0:	cmp	r4, #0
   1b4a4:	movne	r1, r4
   1b4a8:	mov	r0, r7
   1b4ac:	bl	11dd4 <strcoll@plt>
   1b4b0:	cmp	r0, #0
   1b4b4:	beq	1b4bc <__assert_fail@plt+0x9430>
   1b4b8:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   1b4bc:	str	r9, [r6]
   1b4c0:	mov	r0, r8
   1b4c4:	mov	r1, r5
   1b4c8:	pop	{r4, r5, r6, r7, r8, r9, fp, lr}
   1b4cc:	b	11dd4 <strcoll@plt>
   1b4d0:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   1b4d4:	add	fp, sp, #24
   1b4d8:	ldr	r3, [r1, #120]	; 0x78
   1b4dc:	mov	r4, r0
   1b4e0:	mov	r0, #1
   1b4e4:	mov	r2, #1
   1b4e8:	cmp	r3, #3
   1b4ec:	beq	1b510 <__assert_fail@plt+0x9484>
   1b4f0:	cmp	r3, #9
   1b4f4:	mov	r2, #1
   1b4f8:	beq	1b510 <__assert_fail@plt+0x9484>
   1b4fc:	ldr	r2, [r1, #124]	; 0x7c
   1b500:	and	r2, r2, #61440	; 0xf000
   1b504:	sub	r2, r2, #16384	; 0x4000
   1b508:	clz	r2, r2
   1b50c:	lsr	r2, r2, #5
   1b510:	ldr	r3, [r4, #120]	; 0x78
   1b514:	cmp	r3, #3
   1b518:	cmpne	r3, #9
   1b51c:	bne	1b59c <__assert_fail@plt+0x9510>
   1b520:	subs	r0, r2, r0
   1b524:	bne	1b5b8 <__assert_fail@plt+0x952c>
   1b528:	ldr	r8, [r1]
   1b52c:	mov	r1, #46	; 0x2e
   1b530:	mov	r0, r8
   1b534:	bl	11f84 <strrchr@plt>
   1b538:	ldr	r4, [r4]
   1b53c:	mov	r7, r0
   1b540:	mov	r1, #46	; 0x2e
   1b544:	mov	r0, r4
   1b548:	bl	11f84 <strrchr@plt>
   1b54c:	mov	r5, r0
   1b550:	bl	11ed0 <__errno_location@plt>
   1b554:	movw	r1, #54434	; 0xd4a2
   1b558:	cmp	r7, #0
   1b55c:	mov	r9, #0
   1b560:	mov	r6, r0
   1b564:	movt	r1, #2
   1b568:	str	r9, [r0]
   1b56c:	moveq	r7, r1
   1b570:	cmp	r5, #0
   1b574:	movne	r1, r5
   1b578:	mov	r0, r7
   1b57c:	bl	11dd4 <strcoll@plt>
   1b580:	cmp	r0, #0
   1b584:	bne	1b5b8 <__assert_fail@plt+0x952c>
   1b588:	str	r9, [r6]
   1b58c:	mov	r0, r8
   1b590:	mov	r1, r4
   1b594:	pop	{r4, r5, r6, r7, r8, r9, fp, lr}
   1b598:	b	11dd4 <strcoll@plt>
   1b59c:	ldr	r0, [r4, #124]	; 0x7c
   1b5a0:	and	r0, r0, #61440	; 0xf000
   1b5a4:	sub	r0, r0, #16384	; 0x4000
   1b5a8:	clz	r0, r0
   1b5ac:	lsr	r0, r0, #5
   1b5b0:	subs	r0, r2, r0
   1b5b4:	beq	1b528 <__assert_fail@plt+0x949c>
   1b5b8:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   1b5bc:	push	{r4, r5, r6, sl, fp, lr}
   1b5c0:	add	fp, sp, #16
   1b5c4:	ldr	r4, [r0]
   1b5c8:	mov	r5, r1
   1b5cc:	mov	r1, #46	; 0x2e
   1b5d0:	mov	r0, r4
   1b5d4:	bl	11f84 <strrchr@plt>
   1b5d8:	ldr	r5, [r5]
   1b5dc:	mov	r6, r0
   1b5e0:	mov	r1, #46	; 0x2e
   1b5e4:	mov	r0, r5
   1b5e8:	bl	11f84 <strrchr@plt>
   1b5ec:	movw	r1, #54434	; 0xd4a2
   1b5f0:	cmp	r6, #0
   1b5f4:	movt	r1, #2
   1b5f8:	moveq	r6, r1
   1b5fc:	cmp	r0, #0
   1b600:	movne	r1, r0
   1b604:	mov	r0, r6
   1b608:	bl	11bd0 <strcmp@plt>
   1b60c:	cmp	r0, #0
   1b610:	popne	{r4, r5, r6, sl, fp, pc}
   1b614:	mov	r0, r4
   1b618:	mov	r1, r5
   1b61c:	pop	{r4, r5, r6, sl, fp, lr}
   1b620:	b	11bd0 <strcmp@plt>
   1b624:	push	{r4, r5, r6, sl, fp, lr}
   1b628:	add	fp, sp, #16
   1b62c:	ldr	r3, [r1, #120]	; 0x78
   1b630:	mov	r4, r1
   1b634:	mov	r1, #1
   1b638:	mov	r2, #1
   1b63c:	cmp	r3, #3
   1b640:	beq	1b664 <__assert_fail@plt+0x95d8>
   1b644:	cmp	r3, #9
   1b648:	mov	r2, #1
   1b64c:	beq	1b664 <__assert_fail@plt+0x95d8>
   1b650:	ldr	r2, [r4, #124]	; 0x7c
   1b654:	and	r2, r2, #61440	; 0xf000
   1b658:	sub	r2, r2, #16384	; 0x4000
   1b65c:	clz	r2, r2
   1b660:	lsr	r2, r2, #5
   1b664:	ldr	r3, [r0, #120]	; 0x78
   1b668:	cmp	r3, #3
   1b66c:	cmpne	r3, #9
   1b670:	bne	1b6dc <__assert_fail@plt+0x9650>
   1b674:	subs	r1, r2, r1
   1b678:	bne	1b6f8 <__assert_fail@plt+0x966c>
   1b67c:	ldr	r5, [r0]
   1b680:	mov	r1, #46	; 0x2e
   1b684:	mov	r0, r5
   1b688:	bl	11f84 <strrchr@plt>
   1b68c:	ldr	r4, [r4]
   1b690:	mov	r6, r0
   1b694:	mov	r1, #46	; 0x2e
   1b698:	mov	r0, r4
   1b69c:	bl	11f84 <strrchr@plt>
   1b6a0:	movw	r1, #54434	; 0xd4a2
   1b6a4:	cmp	r6, #0
   1b6a8:	movt	r1, #2
   1b6ac:	moveq	r6, r1
   1b6b0:	cmp	r0, #0
   1b6b4:	movne	r1, r0
   1b6b8:	mov	r0, r6
   1b6bc:	bl	11bd0 <strcmp@plt>
   1b6c0:	mov	r1, r0
   1b6c4:	cmp	r0, #0
   1b6c8:	bne	1b6f8 <__assert_fail@plt+0x966c>
   1b6cc:	mov	r0, r5
   1b6d0:	mov	r1, r4
   1b6d4:	pop	{r4, r5, r6, sl, fp, lr}
   1b6d8:	b	11bd0 <strcmp@plt>
   1b6dc:	ldr	r1, [r0, #124]	; 0x7c
   1b6e0:	and	r1, r1, #61440	; 0xf000
   1b6e4:	sub	r1, r1, #16384	; 0x4000
   1b6e8:	clz	r1, r1
   1b6ec:	lsr	r1, r1, #5
   1b6f0:	subs	r1, r2, r1
   1b6f4:	beq	1b67c <__assert_fail@plt+0x95f0>
   1b6f8:	mov	r0, r1
   1b6fc:	pop	{r4, r5, r6, sl, fp, pc}
   1b700:	push	{r4, r5, r6, sl, fp, lr}
   1b704:	add	fp, sp, #16
   1b708:	ldr	r4, [r1]
   1b70c:	mov	r5, r0
   1b710:	mov	r1, #46	; 0x2e
   1b714:	mov	r0, r4
   1b718:	bl	11f84 <strrchr@plt>
   1b71c:	ldr	r5, [r5]
   1b720:	mov	r6, r0
   1b724:	mov	r1, #46	; 0x2e
   1b728:	mov	r0, r5
   1b72c:	bl	11f84 <strrchr@plt>
   1b730:	movw	r1, #54434	; 0xd4a2
   1b734:	cmp	r6, #0
   1b738:	movt	r1, #2
   1b73c:	moveq	r6, r1
   1b740:	cmp	r0, #0
   1b744:	movne	r1, r0
   1b748:	mov	r0, r6
   1b74c:	bl	11bd0 <strcmp@plt>
   1b750:	cmp	r0, #0
   1b754:	popne	{r4, r5, r6, sl, fp, pc}
   1b758:	mov	r0, r4
   1b75c:	mov	r1, r5
   1b760:	pop	{r4, r5, r6, sl, fp, lr}
   1b764:	b	11bd0 <strcmp@plt>
   1b768:	push	{r4, r5, r6, sl, fp, lr}
   1b76c:	add	fp, sp, #16
   1b770:	ldr	r3, [r1, #120]	; 0x78
   1b774:	mov	r4, r0
   1b778:	mov	r0, #1
   1b77c:	mov	r2, #1
   1b780:	cmp	r3, #3
   1b784:	beq	1b7a8 <__assert_fail@plt+0x971c>
   1b788:	cmp	r3, #9
   1b78c:	mov	r2, #1
   1b790:	beq	1b7a8 <__assert_fail@plt+0x971c>
   1b794:	ldr	r2, [r1, #124]	; 0x7c
   1b798:	and	r2, r2, #61440	; 0xf000
   1b79c:	sub	r2, r2, #16384	; 0x4000
   1b7a0:	clz	r2, r2
   1b7a4:	lsr	r2, r2, #5
   1b7a8:	ldr	r3, [r4, #120]	; 0x78
   1b7ac:	cmp	r3, #3
   1b7b0:	cmpne	r3, #9
   1b7b4:	beq	1b7cc <__assert_fail@plt+0x9740>
   1b7b8:	ldr	r0, [r4, #124]	; 0x7c
   1b7bc:	and	r0, r0, #61440	; 0xf000
   1b7c0:	sub	r0, r0, #16384	; 0x4000
   1b7c4:	clz	r0, r0
   1b7c8:	lsr	r0, r0, #5
   1b7cc:	subs	r0, r2, r0
   1b7d0:	popne	{r4, r5, r6, sl, fp, pc}
   1b7d4:	ldr	r5, [r1]
   1b7d8:	mov	r1, #46	; 0x2e
   1b7dc:	mov	r0, r5
   1b7e0:	bl	11f84 <strrchr@plt>
   1b7e4:	ldr	r4, [r4]
   1b7e8:	mov	r6, r0
   1b7ec:	mov	r1, #46	; 0x2e
   1b7f0:	mov	r0, r4
   1b7f4:	bl	11f84 <strrchr@plt>
   1b7f8:	movw	r1, #54434	; 0xd4a2
   1b7fc:	cmp	r6, #0
   1b800:	movt	r1, #2
   1b804:	moveq	r6, r1
   1b808:	cmp	r0, #0
   1b80c:	movne	r1, r0
   1b810:	mov	r0, r6
   1b814:	bl	11bd0 <strcmp@plt>
   1b818:	cmp	r0, #0
   1b81c:	beq	1b824 <__assert_fail@plt+0x9798>
   1b820:	pop	{r4, r5, r6, sl, fp, pc}
   1b824:	mov	r0, r5
   1b828:	mov	r1, r4
   1b82c:	pop	{r4, r5, r6, sl, fp, lr}
   1b830:	b	11bd0 <strcmp@plt>
   1b834:	movw	r2, #54360	; 0xd458
   1b838:	movt	r2, #1
   1b83c:	b	1d484 <__assert_fail@plt+0xb3f8>
   1b840:	ldr	r2, [r1, #120]	; 0x78
   1b844:	mov	ip, #1
   1b848:	mov	r3, #1
   1b84c:	cmp	r2, #3
   1b850:	beq	1b874 <__assert_fail@plt+0x97e8>
   1b854:	cmp	r2, #9
   1b858:	mov	r3, #1
   1b85c:	beq	1b874 <__assert_fail@plt+0x97e8>
   1b860:	ldr	r2, [r1, #124]	; 0x7c
   1b864:	and	r2, r2, #61440	; 0xf000
   1b868:	sub	r2, r2, #16384	; 0x4000
   1b86c:	clz	r2, r2
   1b870:	lsr	r3, r2, #5
   1b874:	ldr	r2, [r0, #120]	; 0x78
   1b878:	cmp	r2, #3
   1b87c:	cmpne	r2, #9
   1b880:	beq	1b898 <__assert_fail@plt+0x980c>
   1b884:	ldr	r2, [r0, #124]	; 0x7c
   1b888:	and	r2, r2, #61440	; 0xf000
   1b88c:	sub	r2, r2, #16384	; 0x4000
   1b890:	clz	r2, r2
   1b894:	lsr	ip, r2, #5
   1b898:	subs	r2, r3, ip
   1b89c:	movne	r0, r2
   1b8a0:	bxne	lr
   1b8a4:	movw	r2, #54360	; 0xd458
   1b8a8:	movt	r2, #1
   1b8ac:	b	1d484 <__assert_fail@plt+0xb3f8>
   1b8b0:	movw	r2, #54360	; 0xd458
   1b8b4:	mov	r3, r0
   1b8b8:	mov	r0, r1
   1b8bc:	movt	r2, #1
   1b8c0:	mov	r1, r3
   1b8c4:	b	1d484 <__assert_fail@plt+0xb3f8>
   1b8c8:	ldr	r3, [r1, #120]	; 0x78
   1b8cc:	mov	ip, r0
   1b8d0:	mov	r0, #1
   1b8d4:	mov	r2, #1
   1b8d8:	cmp	r3, #3
   1b8dc:	beq	1b900 <__assert_fail@plt+0x9874>
   1b8e0:	cmp	r3, #9
   1b8e4:	mov	r2, #1
   1b8e8:	beq	1b900 <__assert_fail@plt+0x9874>
   1b8ec:	ldr	r2, [r1, #124]	; 0x7c
   1b8f0:	and	r2, r2, #61440	; 0xf000
   1b8f4:	sub	r2, r2, #16384	; 0x4000
   1b8f8:	clz	r2, r2
   1b8fc:	lsr	r2, r2, #5
   1b900:	ldr	r3, [ip, #120]	; 0x78
   1b904:	cmp	r3, #3
   1b908:	cmpne	r3, #9
   1b90c:	beq	1b924 <__assert_fail@plt+0x9898>
   1b910:	ldr	r0, [ip, #124]	; 0x7c
   1b914:	and	r0, r0, #61440	; 0xf000
   1b918:	sub	r0, r0, #16384	; 0x4000
   1b91c:	clz	r0, r0
   1b920:	lsr	r0, r0, #5
   1b924:	subs	r0, r2, r0
   1b928:	bxne	lr
   1b92c:	movw	r2, #54360	; 0xd458
   1b930:	mov	r0, r1
   1b934:	mov	r1, ip
   1b938:	movt	r2, #1
   1b93c:	b	1d484 <__assert_fail@plt+0xb3f8>
   1b940:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   1b944:	add	fp, sp, #24
   1b948:	sub	sp, sp, #24
   1b94c:	sub	sp, sp, #8192	; 0x2000
   1b950:	ldr	r7, [r0, #148]	; 0x94
   1b954:	mov	r5, r1
   1b958:	mov	r4, r0
   1b95c:	cmp	r7, #0
   1b960:	beq	1b980 <__assert_fail@plt+0x98f4>
   1b964:	ldr	r0, [r5, #148]	; 0x94
   1b968:	cmp	r0, #0
   1b96c:	beq	1b9e4 <__assert_fail@plt+0x9958>
   1b970:	subs	r0, r7, r0
   1b974:	beq	1ba44 <__assert_fail@plt+0x99b8>
   1b978:	sub	sp, fp, #24
   1b97c:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   1b980:	movw	r0, #4688	; 0x1250
   1b984:	ldr	r6, [r4]
   1b988:	ldr	r3, [r4, #144]	; 0x90
   1b98c:	sub	r1, fp, #32
   1b990:	add	r7, sp, #15
   1b994:	movt	r0, #4
   1b998:	str	r1, [sp]
   1b99c:	str	r7, [fp, #-28]	; 0xffffffe4
   1b9a0:	ldr	r2, [r0, #88]	; 0x58
   1b9a4:	sub	r0, fp, #33	; 0x21
   1b9a8:	str	r0, [sp, #4]
   1b9ac:	sub	r0, fp, #28
   1b9b0:	mov	r1, r6
   1b9b4:	bl	1a918 <__assert_fail@plt+0x888c>
   1b9b8:	ldr	r0, [fp, #-28]	; 0xffffffe4
   1b9bc:	cmp	r0, r7
   1b9c0:	cmpne	r0, r6
   1b9c4:	beq	1b9cc <__assert_fail@plt+0x9940>
   1b9c8:	bl	2056c <__assert_fail@plt+0xe4e0>
   1b9cc:	ldrb	r0, [fp, #-33]	; 0xffffffdf
   1b9d0:	ldr	r1, [fp, #-32]	; 0xffffffe0
   1b9d4:	add	r7, r1, r0
   1b9d8:	ldr	r0, [r5, #148]	; 0x94
   1b9dc:	cmp	r0, #0
   1b9e0:	bne	1b970 <__assert_fail@plt+0x98e4>
   1b9e4:	movw	r0, #4688	; 0x1250
   1b9e8:	ldr	r6, [r5]
   1b9ec:	ldr	r3, [r5, #144]	; 0x90
   1b9f0:	sub	r1, fp, #32
   1b9f4:	add	r8, sp, #15
   1b9f8:	movt	r0, #4
   1b9fc:	str	r1, [sp]
   1ba00:	str	r8, [fp, #-28]	; 0xffffffe4
   1ba04:	ldr	r2, [r0, #88]	; 0x58
   1ba08:	sub	r0, fp, #33	; 0x21
   1ba0c:	str	r0, [sp, #4]
   1ba10:	sub	r0, fp, #28
   1ba14:	mov	r1, r6
   1ba18:	bl	1a918 <__assert_fail@plt+0x888c>
   1ba1c:	ldr	r0, [fp, #-28]	; 0xffffffe4
   1ba20:	cmp	r0, r8
   1ba24:	cmpne	r0, r6
   1ba28:	beq	1ba30 <__assert_fail@plt+0x99a4>
   1ba2c:	bl	2056c <__assert_fail@plt+0xe4e0>
   1ba30:	ldrb	r0, [fp, #-33]	; 0xffffffdf
   1ba34:	ldr	r1, [fp, #-32]	; 0xffffffe0
   1ba38:	add	r0, r1, r0
   1ba3c:	subs	r0, r7, r0
   1ba40:	bne	1b978 <__assert_fail@plt+0x98ec>
   1ba44:	ldr	r1, [r5]
   1ba48:	ldr	r0, [r4]
   1ba4c:	bl	11bd0 <strcmp@plt>
   1ba50:	sub	sp, fp, #24
   1ba54:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   1ba58:	ldr	r2, [r1, #120]	; 0x78
   1ba5c:	mov	ip, #1
   1ba60:	mov	r3, #1
   1ba64:	cmp	r2, #3
   1ba68:	beq	1ba8c <__assert_fail@plt+0x9a00>
   1ba6c:	cmp	r2, #9
   1ba70:	mov	r3, #1
   1ba74:	beq	1ba8c <__assert_fail@plt+0x9a00>
   1ba78:	ldr	r2, [r1, #124]	; 0x7c
   1ba7c:	and	r2, r2, #61440	; 0xf000
   1ba80:	sub	r2, r2, #16384	; 0x4000
   1ba84:	clz	r2, r2
   1ba88:	lsr	r3, r2, #5
   1ba8c:	ldr	r2, [r0, #120]	; 0x78
   1ba90:	cmp	r2, #3
   1ba94:	cmpne	r2, #9
   1ba98:	bne	1baac <__assert_fail@plt+0x9a20>
   1ba9c:	subs	r2, r3, ip
   1baa0:	movne	r0, r2
   1baa4:	bxne	lr
   1baa8:	b	1b940 <__assert_fail@plt+0x98b4>
   1baac:	ldr	r2, [r0, #124]	; 0x7c
   1bab0:	and	r2, r2, #61440	; 0xf000
   1bab4:	sub	r2, r2, #16384	; 0x4000
   1bab8:	clz	r2, r2
   1babc:	lsr	ip, r2, #5
   1bac0:	subs	r2, r3, ip
   1bac4:	movne	r0, r2
   1bac8:	bxne	lr
   1bacc:	b	1b940 <__assert_fail@plt+0x98b4>
   1bad0:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   1bad4:	add	fp, sp, #24
   1bad8:	sub	sp, sp, #24
   1badc:	sub	sp, sp, #8192	; 0x2000
   1bae0:	ldr	r7, [r1, #148]	; 0x94
   1bae4:	mov	r4, r1
   1bae8:	mov	r5, r0
   1baec:	cmp	r7, #0
   1baf0:	beq	1bb10 <__assert_fail@plt+0x9a84>
   1baf4:	ldr	r0, [r5, #148]	; 0x94
   1baf8:	cmp	r0, #0
   1bafc:	beq	1bb74 <__assert_fail@plt+0x9ae8>
   1bb00:	subs	r0, r7, r0
   1bb04:	beq	1bbd4 <__assert_fail@plt+0x9b48>
   1bb08:	sub	sp, fp, #24
   1bb0c:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   1bb10:	movw	r0, #4688	; 0x1250
   1bb14:	ldr	r6, [r4]
   1bb18:	ldr	r3, [r4, #144]	; 0x90
   1bb1c:	sub	r1, fp, #32
   1bb20:	add	r7, sp, #15
   1bb24:	movt	r0, #4
   1bb28:	str	r1, [sp]
   1bb2c:	str	r7, [fp, #-28]	; 0xffffffe4
   1bb30:	ldr	r2, [r0, #88]	; 0x58
   1bb34:	sub	r0, fp, #33	; 0x21
   1bb38:	str	r0, [sp, #4]
   1bb3c:	sub	r0, fp, #28
   1bb40:	mov	r1, r6
   1bb44:	bl	1a918 <__assert_fail@plt+0x888c>
   1bb48:	ldr	r0, [fp, #-28]	; 0xffffffe4
   1bb4c:	cmp	r0, r7
   1bb50:	cmpne	r0, r6
   1bb54:	beq	1bb5c <__assert_fail@plt+0x9ad0>
   1bb58:	bl	2056c <__assert_fail@plt+0xe4e0>
   1bb5c:	ldrb	r0, [fp, #-33]	; 0xffffffdf
   1bb60:	ldr	r1, [fp, #-32]	; 0xffffffe0
   1bb64:	add	r7, r1, r0
   1bb68:	ldr	r0, [r5, #148]	; 0x94
   1bb6c:	cmp	r0, #0
   1bb70:	bne	1bb00 <__assert_fail@plt+0x9a74>
   1bb74:	movw	r0, #4688	; 0x1250
   1bb78:	ldr	r6, [r5]
   1bb7c:	ldr	r3, [r5, #144]	; 0x90
   1bb80:	sub	r1, fp, #32
   1bb84:	add	r8, sp, #15
   1bb88:	movt	r0, #4
   1bb8c:	str	r1, [sp]
   1bb90:	str	r8, [fp, #-28]	; 0xffffffe4
   1bb94:	ldr	r2, [r0, #88]	; 0x58
   1bb98:	sub	r0, fp, #33	; 0x21
   1bb9c:	str	r0, [sp, #4]
   1bba0:	sub	r0, fp, #28
   1bba4:	mov	r1, r6
   1bba8:	bl	1a918 <__assert_fail@plt+0x888c>
   1bbac:	ldr	r0, [fp, #-28]	; 0xffffffe4
   1bbb0:	cmp	r0, r8
   1bbb4:	cmpne	r0, r6
   1bbb8:	beq	1bbc0 <__assert_fail@plt+0x9b34>
   1bbbc:	bl	2056c <__assert_fail@plt+0xe4e0>
   1bbc0:	ldrb	r0, [fp, #-33]	; 0xffffffdf
   1bbc4:	ldr	r1, [fp, #-32]	; 0xffffffe0
   1bbc8:	add	r0, r1, r0
   1bbcc:	subs	r0, r7, r0
   1bbd0:	bne	1bb08 <__assert_fail@plt+0x9a7c>
   1bbd4:	ldr	r1, [r5]
   1bbd8:	ldr	r0, [r4]
   1bbdc:	bl	11bd0 <strcmp@plt>
   1bbe0:	sub	sp, fp, #24
   1bbe4:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   1bbe8:	ldr	r2, [r1, #120]	; 0x78
   1bbec:	mov	ip, #1
   1bbf0:	mov	r3, #1
   1bbf4:	cmp	r2, #3
   1bbf8:	beq	1bc1c <__assert_fail@plt+0x9b90>
   1bbfc:	cmp	r2, #9
   1bc00:	mov	r3, #1
   1bc04:	beq	1bc1c <__assert_fail@plt+0x9b90>
   1bc08:	ldr	r2, [r1, #124]	; 0x7c
   1bc0c:	and	r2, r2, #61440	; 0xf000
   1bc10:	sub	r2, r2, #16384	; 0x4000
   1bc14:	clz	r2, r2
   1bc18:	lsr	r3, r2, #5
   1bc1c:	ldr	r2, [r0, #120]	; 0x78
   1bc20:	cmp	r2, #3
   1bc24:	cmpne	r2, #9
   1bc28:	bne	1bc3c <__assert_fail@plt+0x9bb0>
   1bc2c:	subs	r2, r3, ip
   1bc30:	movne	r0, r2
   1bc34:	bxne	lr
   1bc38:	b	1bad0 <__assert_fail@plt+0x9a44>
   1bc3c:	ldr	r2, [r0, #124]	; 0x7c
   1bc40:	and	r2, r2, #61440	; 0xf000
   1bc44:	sub	r2, r2, #16384	; 0x4000
   1bc48:	clz	r2, r2
   1bc4c:	lsr	ip, r2, #5
   1bc50:	subs	r2, r3, ip
   1bc54:	movne	r0, r2
   1bc58:	bxne	lr
   1bc5c:	b	1bad0 <__assert_fail@plt+0x9a44>
   1bc60:	push	{r4, r5, r6, r8, r9, sl, fp, lr}
   1bc64:	add	fp, sp, #24
   1bc68:	ldrd	r4, [r1, #64]	; 0x40
   1bc6c:	ldrd	r8, [r0, #64]	; 0x40
   1bc70:	mov	r6, #0
   1bc74:	subs	r2, r8, r4
   1bc78:	sbcs	r2, r9, r5
   1bc7c:	mov	r2, #0
   1bc80:	movwlt	r2, #1
   1bc84:	subs	r3, r4, r8
   1bc88:	sbcs	r3, r5, r9
   1bc8c:	mvnlt	r2, #0
   1bc90:	cmp	r2, #0
   1bc94:	beq	1bca0 <__assert_fail@plt+0x9c14>
   1bc98:	mov	r0, r2
   1bc9c:	pop	{r4, r5, r6, r8, r9, sl, fp, pc}
   1bca0:	ldr	r4, [r1]
   1bca4:	ldr	r5, [r0]
   1bca8:	bl	11ed0 <__errno_location@plt>
   1bcac:	str	r6, [r0]
   1bcb0:	mov	r0, r5
   1bcb4:	mov	r1, r4
   1bcb8:	pop	{r4, r5, r6, r8, r9, sl, fp, lr}
   1bcbc:	b	11dd4 <strcoll@plt>
   1bcc0:	push	{r4, r5, r6, r8, r9, sl, fp, lr}
   1bcc4:	add	fp, sp, #24
   1bcc8:	ldr	r6, [r1, #120]	; 0x78
   1bccc:	mov	r2, #1
   1bcd0:	mov	r3, #1
   1bcd4:	cmp	r6, #3
   1bcd8:	beq	1bcfc <__assert_fail@plt+0x9c70>
   1bcdc:	cmp	r6, #9
   1bce0:	mov	r3, #1
   1bce4:	beq	1bcfc <__assert_fail@plt+0x9c70>
   1bce8:	ldr	r3, [r1, #124]	; 0x7c
   1bcec:	and	r3, r3, #61440	; 0xf000
   1bcf0:	sub	r3, r3, #16384	; 0x4000
   1bcf4:	clz	r3, r3
   1bcf8:	lsr	r3, r3, #5
   1bcfc:	ldr	r6, [r0, #120]	; 0x78
   1bd00:	cmp	r6, #3
   1bd04:	cmpne	r6, #9
   1bd08:	bne	1bd64 <__assert_fail@plt+0x9cd8>
   1bd0c:	subs	r2, r3, r2
   1bd10:	bne	1bd80 <__assert_fail@plt+0x9cf4>
   1bd14:	ldrd	r4, [r1, #64]	; 0x40
   1bd18:	ldrd	r8, [r0, #64]	; 0x40
   1bd1c:	mov	r6, #0
   1bd20:	subs	r2, r8, r4
   1bd24:	sbcs	r2, r9, r5
   1bd28:	mov	r2, #0
   1bd2c:	movwlt	r2, #1
   1bd30:	subs	r3, r4, r8
   1bd34:	sbcs	r3, r5, r9
   1bd38:	mvnlt	r2, #0
   1bd3c:	cmp	r2, #0
   1bd40:	bne	1bd80 <__assert_fail@plt+0x9cf4>
   1bd44:	ldr	r4, [r1]
   1bd48:	ldr	r5, [r0]
   1bd4c:	bl	11ed0 <__errno_location@plt>
   1bd50:	str	r6, [r0]
   1bd54:	mov	r0, r5
   1bd58:	mov	r1, r4
   1bd5c:	pop	{r4, r5, r6, r8, r9, sl, fp, lr}
   1bd60:	b	11dd4 <strcoll@plt>
   1bd64:	ldr	r2, [r0, #124]	; 0x7c
   1bd68:	and	r2, r2, #61440	; 0xf000
   1bd6c:	sub	r2, r2, #16384	; 0x4000
   1bd70:	clz	r2, r2
   1bd74:	lsr	r2, r2, #5
   1bd78:	subs	r2, r3, r2
   1bd7c:	beq	1bd14 <__assert_fail@plt+0x9c88>
   1bd80:	mov	r0, r2
   1bd84:	pop	{r4, r5, r6, r8, r9, sl, fp, pc}
   1bd88:	push	{r4, r5, r6, r8, r9, sl, fp, lr}
   1bd8c:	add	fp, sp, #24
   1bd90:	ldrd	r4, [r0, #64]	; 0x40
   1bd94:	ldrd	r8, [r1, #64]	; 0x40
   1bd98:	mov	r6, #0
   1bd9c:	subs	r2, r8, r4
   1bda0:	sbcs	r2, r9, r5
   1bda4:	mov	r2, #0
   1bda8:	movwlt	r2, #1
   1bdac:	subs	r3, r4, r8
   1bdb0:	sbcs	r3, r5, r9
   1bdb4:	mvnlt	r2, #0
   1bdb8:	cmp	r2, #0
   1bdbc:	beq	1bdc8 <__assert_fail@plt+0x9d3c>
   1bdc0:	mov	r0, r2
   1bdc4:	pop	{r4, r5, r6, r8, r9, sl, fp, pc}
   1bdc8:	ldr	r4, [r0]
   1bdcc:	ldr	r5, [r1]
   1bdd0:	bl	11ed0 <__errno_location@plt>
   1bdd4:	str	r6, [r0]
   1bdd8:	mov	r0, r5
   1bddc:	mov	r1, r4
   1bde0:	pop	{r4, r5, r6, r8, r9, sl, fp, lr}
   1bde4:	b	11dd4 <strcoll@plt>
   1bde8:	push	{r4, r5, r6, r8, r9, sl, fp, lr}
   1bdec:	add	fp, sp, #24
   1bdf0:	ldr	r6, [r1, #120]	; 0x78
   1bdf4:	mov	r2, #1
   1bdf8:	mov	r3, #1
   1bdfc:	cmp	r6, #3
   1be00:	beq	1be24 <__assert_fail@plt+0x9d98>
   1be04:	cmp	r6, #9
   1be08:	mov	r3, #1
   1be0c:	beq	1be24 <__assert_fail@plt+0x9d98>
   1be10:	ldr	r3, [r1, #124]	; 0x7c
   1be14:	and	r3, r3, #61440	; 0xf000
   1be18:	sub	r3, r3, #16384	; 0x4000
   1be1c:	clz	r3, r3
   1be20:	lsr	r3, r3, #5
   1be24:	ldr	r6, [r0, #120]	; 0x78
   1be28:	cmp	r6, #3
   1be2c:	cmpne	r6, #9
   1be30:	bne	1be8c <__assert_fail@plt+0x9e00>
   1be34:	subs	r2, r3, r2
   1be38:	bne	1bea8 <__assert_fail@plt+0x9e1c>
   1be3c:	ldrd	r4, [r0, #64]	; 0x40
   1be40:	ldrd	r8, [r1, #64]	; 0x40
   1be44:	mov	r6, #0
   1be48:	subs	r2, r8, r4
   1be4c:	sbcs	r2, r9, r5
   1be50:	mov	r2, #0
   1be54:	movwlt	r2, #1
   1be58:	subs	r3, r4, r8
   1be5c:	sbcs	r3, r5, r9
   1be60:	mvnlt	r2, #0
   1be64:	cmp	r2, #0
   1be68:	bne	1bea8 <__assert_fail@plt+0x9e1c>
   1be6c:	ldr	r4, [r0]
   1be70:	ldr	r5, [r1]
   1be74:	bl	11ed0 <__errno_location@plt>
   1be78:	str	r6, [r0]
   1be7c:	mov	r0, r5
   1be80:	mov	r1, r4
   1be84:	pop	{r4, r5, r6, r8, r9, sl, fp, lr}
   1be88:	b	11dd4 <strcoll@plt>
   1be8c:	ldr	r2, [r0, #124]	; 0x7c
   1be90:	and	r2, r2, #61440	; 0xf000
   1be94:	sub	r2, r2, #16384	; 0x4000
   1be98:	clz	r2, r2
   1be9c:	lsr	r2, r2, #5
   1bea0:	subs	r2, r3, r2
   1bea4:	beq	1be3c <__assert_fail@plt+0x9db0>
   1bea8:	mov	r0, r2
   1beac:	pop	{r4, r5, r6, r8, r9, sl, fp, pc}
   1beb0:	push	{r4, r5, r6, r7, fp, lr}
   1beb4:	add	fp, sp, #16
   1beb8:	ldrd	r4, [r1, #64]	; 0x40
   1bebc:	ldrd	r6, [r0, #64]	; 0x40
   1bec0:	mov	r2, #0
   1bec4:	subs	r3, r6, r4
   1bec8:	sbcs	r3, r7, r5
   1becc:	movwlt	r2, #1
   1bed0:	subs	r3, r4, r6
   1bed4:	sbcs	r3, r5, r7
   1bed8:	mvnlt	r2, #0
   1bedc:	cmp	r2, #0
   1bee0:	beq	1beec <__assert_fail@plt+0x9e60>
   1bee4:	mov	r0, r2
   1bee8:	pop	{r4, r5, r6, r7, fp, pc}
   1beec:	ldr	r1, [r1]
   1bef0:	ldr	r0, [r0]
   1bef4:	pop	{r4, r5, r6, r7, fp, lr}
   1bef8:	b	11bd0 <strcmp@plt>
   1befc:	push	{r4, r5, r6, r7, fp, lr}
   1bf00:	add	fp, sp, #16
   1bf04:	ldr	r2, [r1, #120]	; 0x78
   1bf08:	mov	ip, #1
   1bf0c:	mov	r3, #1
   1bf10:	cmp	r2, #3
   1bf14:	beq	1bf38 <__assert_fail@plt+0x9eac>
   1bf18:	cmp	r2, #9
   1bf1c:	mov	r3, #1
   1bf20:	beq	1bf38 <__assert_fail@plt+0x9eac>
   1bf24:	ldr	r2, [r1, #124]	; 0x7c
   1bf28:	and	r2, r2, #61440	; 0xf000
   1bf2c:	sub	r2, r2, #16384	; 0x4000
   1bf30:	clz	r2, r2
   1bf34:	lsr	r3, r2, #5
   1bf38:	ldr	r2, [r0, #120]	; 0x78
   1bf3c:	cmp	r2, #3
   1bf40:	cmpne	r2, #9
   1bf44:	bne	1bf8c <__assert_fail@plt+0x9f00>
   1bf48:	subs	r2, r3, ip
   1bf4c:	bne	1bfa8 <__assert_fail@plt+0x9f1c>
   1bf50:	ldrd	r4, [r1, #64]	; 0x40
   1bf54:	ldrd	r6, [r0, #64]	; 0x40
   1bf58:	mov	r2, #0
   1bf5c:	subs	r3, r6, r4
   1bf60:	sbcs	r3, r7, r5
   1bf64:	movwlt	r2, #1
   1bf68:	subs	r3, r4, r6
   1bf6c:	sbcs	r3, r5, r7
   1bf70:	mvnlt	r2, #0
   1bf74:	cmp	r2, #0
   1bf78:	bne	1bfa8 <__assert_fail@plt+0x9f1c>
   1bf7c:	ldr	r1, [r1]
   1bf80:	ldr	r0, [r0]
   1bf84:	pop	{r4, r5, r6, r7, fp, lr}
   1bf88:	b	11bd0 <strcmp@plt>
   1bf8c:	ldr	r2, [r0, #124]	; 0x7c
   1bf90:	and	r2, r2, #61440	; 0xf000
   1bf94:	sub	r2, r2, #16384	; 0x4000
   1bf98:	clz	r2, r2
   1bf9c:	lsr	ip, r2, #5
   1bfa0:	subs	r2, r3, ip
   1bfa4:	beq	1bf50 <__assert_fail@plt+0x9ec4>
   1bfa8:	mov	r0, r2
   1bfac:	pop	{r4, r5, r6, r7, fp, pc}
   1bfb0:	push	{r4, r5, r6, r7, fp, lr}
   1bfb4:	add	fp, sp, #16
   1bfb8:	ldrd	r4, [r0, #64]	; 0x40
   1bfbc:	ldrd	r6, [r1, #64]	; 0x40
   1bfc0:	mov	r2, #0
   1bfc4:	subs	r3, r6, r4
   1bfc8:	sbcs	r3, r7, r5
   1bfcc:	movwlt	r2, #1
   1bfd0:	subs	r3, r4, r6
   1bfd4:	sbcs	r3, r5, r7
   1bfd8:	mvnlt	r2, #0
   1bfdc:	cmp	r2, #0
   1bfe0:	beq	1bfec <__assert_fail@plt+0x9f60>
   1bfe4:	mov	r0, r2
   1bfe8:	pop	{r4, r5, r6, r7, fp, pc}
   1bfec:	ldr	r2, [r0]
   1bff0:	ldr	r0, [r1]
   1bff4:	mov	r1, r2
   1bff8:	pop	{r4, r5, r6, r7, fp, lr}
   1bffc:	b	11bd0 <strcmp@plt>
   1c000:	push	{r4, r5, r6, r7, fp, lr}
   1c004:	add	fp, sp, #16
   1c008:	ldr	r2, [r1, #120]	; 0x78
   1c00c:	mov	ip, #1
   1c010:	mov	r3, #1
   1c014:	cmp	r2, #3
   1c018:	beq	1c03c <__assert_fail@plt+0x9fb0>
   1c01c:	cmp	r2, #9
   1c020:	mov	r3, #1
   1c024:	beq	1c03c <__assert_fail@plt+0x9fb0>
   1c028:	ldr	r2, [r1, #124]	; 0x7c
   1c02c:	and	r2, r2, #61440	; 0xf000
   1c030:	sub	r2, r2, #16384	; 0x4000
   1c034:	clz	r2, r2
   1c038:	lsr	r3, r2, #5
   1c03c:	ldr	r2, [r0, #120]	; 0x78
   1c040:	cmp	r2, #3
   1c044:	cmpne	r2, #9
   1c048:	bne	1c094 <__assert_fail@plt+0xa008>
   1c04c:	subs	r2, r3, ip
   1c050:	bne	1c0b0 <__assert_fail@plt+0xa024>
   1c054:	ldrd	r4, [r0, #64]	; 0x40
   1c058:	ldrd	r6, [r1, #64]	; 0x40
   1c05c:	mov	r2, #0
   1c060:	subs	r3, r6, r4
   1c064:	sbcs	r3, r7, r5
   1c068:	movwlt	r2, #1
   1c06c:	subs	r3, r4, r6
   1c070:	sbcs	r3, r5, r7
   1c074:	mvnlt	r2, #0
   1c078:	cmp	r2, #0
   1c07c:	bne	1c0b0 <__assert_fail@plt+0xa024>
   1c080:	ldr	r2, [r0]
   1c084:	ldr	r0, [r1]
   1c088:	mov	r1, r2
   1c08c:	pop	{r4, r5, r6, r7, fp, lr}
   1c090:	b	11bd0 <strcmp@plt>
   1c094:	ldr	r2, [r0, #124]	; 0x7c
   1c098:	and	r2, r2, #61440	; 0xf000
   1c09c:	sub	r2, r2, #16384	; 0x4000
   1c0a0:	clz	r2, r2
   1c0a4:	lsr	ip, r2, #5
   1c0a8:	subs	r2, r3, ip
   1c0ac:	beq	1c054 <__assert_fail@plt+0x9fc8>
   1c0b0:	mov	r0, r2
   1c0b4:	pop	{r4, r5, r6, r7, fp, pc}
   1c0b8:	ldr	r1, [r1]
   1c0bc:	ldr	r0, [r0]
   1c0c0:	b	200b4 <__assert_fail@plt+0xe028>
   1c0c4:	ldr	r2, [r1, #120]	; 0x78
   1c0c8:	mov	ip, #1
   1c0cc:	mov	r3, #1
   1c0d0:	cmp	r2, #3
   1c0d4:	beq	1c0f8 <__assert_fail@plt+0xa06c>
   1c0d8:	cmp	r2, #9
   1c0dc:	mov	r3, #1
   1c0e0:	beq	1c0f8 <__assert_fail@plt+0xa06c>
   1c0e4:	ldr	r2, [r1, #124]	; 0x7c
   1c0e8:	and	r2, r2, #61440	; 0xf000
   1c0ec:	sub	r2, r2, #16384	; 0x4000
   1c0f0:	clz	r2, r2
   1c0f4:	lsr	r3, r2, #5
   1c0f8:	ldr	r2, [r0, #120]	; 0x78
   1c0fc:	cmp	r2, #3
   1c100:	cmpne	r2, #9
   1c104:	beq	1c11c <__assert_fail@plt+0xa090>
   1c108:	ldr	r2, [r0, #124]	; 0x7c
   1c10c:	and	r2, r2, #61440	; 0xf000
   1c110:	sub	r2, r2, #16384	; 0x4000
   1c114:	clz	r2, r2
   1c118:	lsr	ip, r2, #5
   1c11c:	subs	r2, r3, ip
   1c120:	movne	r0, r2
   1c124:	bxne	lr
   1c128:	ldr	r1, [r1]
   1c12c:	ldr	r0, [r0]
   1c130:	b	200b4 <__assert_fail@plt+0xe028>
   1c134:	ldr	r2, [r0]
   1c138:	ldr	r0, [r1]
   1c13c:	mov	r1, r2
   1c140:	b	200b4 <__assert_fail@plt+0xe028>
   1c144:	ldr	r2, [r1, #120]	; 0x78
   1c148:	mov	ip, #1
   1c14c:	mov	r3, #1
   1c150:	cmp	r2, #3
   1c154:	beq	1c178 <__assert_fail@plt+0xa0ec>
   1c158:	cmp	r2, #9
   1c15c:	mov	r3, #1
   1c160:	beq	1c178 <__assert_fail@plt+0xa0ec>
   1c164:	ldr	r2, [r1, #124]	; 0x7c
   1c168:	and	r2, r2, #61440	; 0xf000
   1c16c:	sub	r2, r2, #16384	; 0x4000
   1c170:	clz	r2, r2
   1c174:	lsr	r3, r2, #5
   1c178:	ldr	r2, [r0, #120]	; 0x78
   1c17c:	cmp	r2, #3
   1c180:	cmpne	r2, #9
   1c184:	beq	1c19c <__assert_fail@plt+0xa110>
   1c188:	ldr	r2, [r0, #124]	; 0x7c
   1c18c:	and	r2, r2, #61440	; 0xf000
   1c190:	sub	r2, r2, #16384	; 0x4000
   1c194:	clz	r2, r2
   1c198:	lsr	ip, r2, #5
   1c19c:	subs	r2, r3, ip
   1c1a0:	movne	r0, r2
   1c1a4:	bxne	lr
   1c1a8:	ldr	r2, [r0]
   1c1ac:	ldr	r0, [r1]
   1c1b0:	mov	r1, r2
   1c1b4:	b	200b4 <__assert_fail@plt+0xe028>
   1c1b8:	push	{r4, r5, r6, sl, fp, lr}
   1c1bc:	add	fp, sp, #16
   1c1c0:	ldrd	r2, [r0, #96]	; 0x60
   1c1c4:	ldrd	r4, [r1, #96]	; 0x60
   1c1c8:	mov	r6, #0
   1c1cc:	cmp	r4, r2
   1c1d0:	mov	r2, #0
   1c1d4:	movwgt	r2, #1
   1c1d8:	sublt	r2, r2, #1
   1c1dc:	cmp	r5, r3
   1c1e0:	mov	r3, #0
   1c1e4:	movwgt	r3, #1
   1c1e8:	sublt	r3, r3, #1
   1c1ec:	add	r2, r3, r2, lsl #1
   1c1f0:	cmp	r2, #0
   1c1f4:	beq	1c200 <__assert_fail@plt+0xa174>
   1c1f8:	mov	r0, r2
   1c1fc:	pop	{r4, r5, r6, sl, fp, pc}
   1c200:	ldr	r4, [r1]
   1c204:	ldr	r5, [r0]
   1c208:	bl	11ed0 <__errno_location@plt>
   1c20c:	str	r6, [r0]
   1c210:	mov	r0, r5
   1c214:	mov	r1, r4
   1c218:	pop	{r4, r5, r6, sl, fp, lr}
   1c21c:	b	11dd4 <strcoll@plt>
   1c220:	push	{r4, r5, r6, sl, fp, lr}
   1c224:	add	fp, sp, #16
   1c228:	ldr	r6, [r1, #120]	; 0x78
   1c22c:	mov	r2, #1
   1c230:	mov	r3, #1
   1c234:	cmp	r6, #3
   1c238:	beq	1c25c <__assert_fail@plt+0xa1d0>
   1c23c:	cmp	r6, #9
   1c240:	mov	r3, #1
   1c244:	beq	1c25c <__assert_fail@plt+0xa1d0>
   1c248:	ldr	r3, [r1, #124]	; 0x7c
   1c24c:	and	r3, r3, #61440	; 0xf000
   1c250:	sub	r3, r3, #16384	; 0x4000
   1c254:	clz	r3, r3
   1c258:	lsr	r3, r3, #5
   1c25c:	ldr	r6, [r0, #120]	; 0x78
   1c260:	cmp	r6, #3
   1c264:	cmpne	r6, #9
   1c268:	bne	1c2cc <__assert_fail@plt+0xa240>
   1c26c:	subs	r2, r3, r2
   1c270:	bne	1c2e8 <__assert_fail@plt+0xa25c>
   1c274:	ldrd	r2, [r0, #96]	; 0x60
   1c278:	ldrd	r4, [r1, #96]	; 0x60
   1c27c:	mov	r6, #0
   1c280:	cmp	r4, r2
   1c284:	mov	r2, #0
   1c288:	movwgt	r2, #1
   1c28c:	sublt	r2, r2, #1
   1c290:	cmp	r5, r3
   1c294:	mov	r3, #0
   1c298:	movwgt	r3, #1
   1c29c:	sublt	r3, r3, #1
   1c2a0:	add	r2, r3, r2, lsl #1
   1c2a4:	cmp	r2, #0
   1c2a8:	bne	1c2e8 <__assert_fail@plt+0xa25c>
   1c2ac:	ldr	r4, [r1]
   1c2b0:	ldr	r5, [r0]
   1c2b4:	bl	11ed0 <__errno_location@plt>
   1c2b8:	str	r6, [r0]
   1c2bc:	mov	r0, r5
   1c2c0:	mov	r1, r4
   1c2c4:	pop	{r4, r5, r6, sl, fp, lr}
   1c2c8:	b	11dd4 <strcoll@plt>
   1c2cc:	ldr	r2, [r0, #124]	; 0x7c
   1c2d0:	and	r2, r2, #61440	; 0xf000
   1c2d4:	sub	r2, r2, #16384	; 0x4000
   1c2d8:	clz	r2, r2
   1c2dc:	lsr	r2, r2, #5
   1c2e0:	subs	r2, r3, r2
   1c2e4:	beq	1c274 <__assert_fail@plt+0xa1e8>
   1c2e8:	mov	r0, r2
   1c2ec:	pop	{r4, r5, r6, sl, fp, pc}
   1c2f0:	push	{r4, r5, r6, sl, fp, lr}
   1c2f4:	add	fp, sp, #16
   1c2f8:	ldrd	r2, [r1, #96]	; 0x60
   1c2fc:	ldrd	r4, [r0, #96]	; 0x60
   1c300:	mov	r6, #0
   1c304:	cmp	r4, r2
   1c308:	mov	r2, #0
   1c30c:	movwgt	r2, #1
   1c310:	sublt	r2, r2, #1
   1c314:	cmp	r5, r3
   1c318:	mov	r3, #0
   1c31c:	movwgt	r3, #1
   1c320:	sublt	r3, r3, #1
   1c324:	add	r2, r3, r2, lsl #1
   1c328:	cmp	r2, #0
   1c32c:	beq	1c338 <__assert_fail@plt+0xa2ac>
   1c330:	mov	r0, r2
   1c334:	pop	{r4, r5, r6, sl, fp, pc}
   1c338:	ldr	r4, [r0]
   1c33c:	ldr	r5, [r1]
   1c340:	bl	11ed0 <__errno_location@plt>
   1c344:	str	r6, [r0]
   1c348:	mov	r0, r5
   1c34c:	mov	r1, r4
   1c350:	pop	{r4, r5, r6, sl, fp, lr}
   1c354:	b	11dd4 <strcoll@plt>
   1c358:	push	{r4, r5, r6, sl, fp, lr}
   1c35c:	add	fp, sp, #16
   1c360:	ldr	r6, [r1, #120]	; 0x78
   1c364:	mov	r2, #1
   1c368:	mov	r3, #1
   1c36c:	cmp	r6, #3
   1c370:	beq	1c394 <__assert_fail@plt+0xa308>
   1c374:	cmp	r6, #9
   1c378:	mov	r3, #1
   1c37c:	beq	1c394 <__assert_fail@plt+0xa308>
   1c380:	ldr	r3, [r1, #124]	; 0x7c
   1c384:	and	r3, r3, #61440	; 0xf000
   1c388:	sub	r3, r3, #16384	; 0x4000
   1c38c:	clz	r3, r3
   1c390:	lsr	r3, r3, #5
   1c394:	ldr	r6, [r0, #120]	; 0x78
   1c398:	cmp	r6, #3
   1c39c:	cmpne	r6, #9
   1c3a0:	bne	1c404 <__assert_fail@plt+0xa378>
   1c3a4:	subs	r2, r3, r2
   1c3a8:	bne	1c420 <__assert_fail@plt+0xa394>
   1c3ac:	ldrd	r2, [r1, #96]	; 0x60
   1c3b0:	ldrd	r4, [r0, #96]	; 0x60
   1c3b4:	mov	r6, #0
   1c3b8:	cmp	r4, r2
   1c3bc:	mov	r2, #0
   1c3c0:	movwgt	r2, #1
   1c3c4:	sublt	r2, r2, #1
   1c3c8:	cmp	r5, r3
   1c3cc:	mov	r3, #0
   1c3d0:	movwgt	r3, #1
   1c3d4:	sublt	r3, r3, #1
   1c3d8:	add	r2, r3, r2, lsl #1
   1c3dc:	cmp	r2, #0
   1c3e0:	bne	1c420 <__assert_fail@plt+0xa394>
   1c3e4:	ldr	r4, [r0]
   1c3e8:	ldr	r5, [r1]
   1c3ec:	bl	11ed0 <__errno_location@plt>
   1c3f0:	str	r6, [r0]
   1c3f4:	mov	r0, r5
   1c3f8:	mov	r1, r4
   1c3fc:	pop	{r4, r5, r6, sl, fp, lr}
   1c400:	b	11dd4 <strcoll@plt>
   1c404:	ldr	r2, [r0, #124]	; 0x7c
   1c408:	and	r2, r2, #61440	; 0xf000
   1c40c:	sub	r2, r2, #16384	; 0x4000
   1c410:	clz	r2, r2
   1c414:	lsr	r2, r2, #5
   1c418:	subs	r2, r3, r2
   1c41c:	beq	1c3ac <__assert_fail@plt+0xa320>
   1c420:	mov	r0, r2
   1c424:	pop	{r4, r5, r6, sl, fp, pc}
   1c428:	push	{r4, r5, r7, sl, fp, lr}
   1c42c:	add	fp, sp, #16
   1c430:	ldr	r2, [r0, #96]	; 0x60
   1c434:	ldrd	r4, [r1, #96]	; 0x60
   1c438:	ldr	r7, [r0, #100]	; 0x64
   1c43c:	mov	r3, #0
   1c440:	cmp	r4, r2
   1c444:	mov	r2, #0
   1c448:	movwgt	r2, #1
   1c44c:	sublt	r2, r2, #1
   1c450:	cmp	r5, r7
   1c454:	movwgt	r3, #1
   1c458:	sublt	r3, r3, #1
   1c45c:	add	r2, r3, r2, lsl #1
   1c460:	cmp	r2, #0
   1c464:	beq	1c470 <__assert_fail@plt+0xa3e4>
   1c468:	mov	r0, r2
   1c46c:	pop	{r4, r5, r7, sl, fp, pc}
   1c470:	ldr	r1, [r1]
   1c474:	ldr	r0, [r0]
   1c478:	pop	{r4, r5, r7, sl, fp, lr}
   1c47c:	b	11bd0 <strcmp@plt>
   1c480:	push	{r4, r5, r7, sl, fp, lr}
   1c484:	add	fp, sp, #16
   1c488:	ldr	r2, [r1, #120]	; 0x78
   1c48c:	mov	ip, #1
   1c490:	mov	r3, #1
   1c494:	cmp	r2, #3
   1c498:	beq	1c4bc <__assert_fail@plt+0xa430>
   1c49c:	cmp	r2, #9
   1c4a0:	mov	r3, #1
   1c4a4:	beq	1c4bc <__assert_fail@plt+0xa430>
   1c4a8:	ldr	r2, [r1, #124]	; 0x7c
   1c4ac:	and	r2, r2, #61440	; 0xf000
   1c4b0:	sub	r2, r2, #16384	; 0x4000
   1c4b4:	clz	r2, r2
   1c4b8:	lsr	r3, r2, #5
   1c4bc:	ldr	r2, [r0, #120]	; 0x78
   1c4c0:	cmp	r2, #3
   1c4c4:	cmpne	r2, #9
   1c4c8:	bne	1c51c <__assert_fail@plt+0xa490>
   1c4cc:	subs	r2, r3, ip
   1c4d0:	bne	1c538 <__assert_fail@plt+0xa4ac>
   1c4d4:	ldr	r2, [r0, #96]	; 0x60
   1c4d8:	ldrd	r4, [r1, #96]	; 0x60
   1c4dc:	ldr	r7, [r0, #100]	; 0x64
   1c4e0:	mov	r3, #0
   1c4e4:	cmp	r4, r2
   1c4e8:	mov	r2, #0
   1c4ec:	movwgt	r2, #1
   1c4f0:	sublt	r2, r2, #1
   1c4f4:	cmp	r5, r7
   1c4f8:	movwgt	r3, #1
   1c4fc:	sublt	r3, r3, #1
   1c500:	add	r2, r3, r2, lsl #1
   1c504:	cmp	r2, #0
   1c508:	bne	1c538 <__assert_fail@plt+0xa4ac>
   1c50c:	ldr	r1, [r1]
   1c510:	ldr	r0, [r0]
   1c514:	pop	{r4, r5, r7, sl, fp, lr}
   1c518:	b	11bd0 <strcmp@plt>
   1c51c:	ldr	r2, [r0, #124]	; 0x7c
   1c520:	and	r2, r2, #61440	; 0xf000
   1c524:	sub	r2, r2, #16384	; 0x4000
   1c528:	clz	r2, r2
   1c52c:	lsr	ip, r2, #5
   1c530:	subs	r2, r3, ip
   1c534:	beq	1c4d4 <__assert_fail@plt+0xa448>
   1c538:	mov	r0, r2
   1c53c:	pop	{r4, r5, r7, sl, fp, pc}
   1c540:	push	{r4, r5, r7, sl, fp, lr}
   1c544:	add	fp, sp, #16
   1c548:	ldr	r2, [r1, #96]	; 0x60
   1c54c:	ldrd	r4, [r0, #96]	; 0x60
   1c550:	ldr	r7, [r1, #100]	; 0x64
   1c554:	mov	r3, #0
   1c558:	cmp	r4, r2
   1c55c:	mov	r2, #0
   1c560:	movwgt	r2, #1
   1c564:	sublt	r2, r2, #1
   1c568:	cmp	r5, r7
   1c56c:	movwgt	r3, #1
   1c570:	sublt	r3, r3, #1
   1c574:	add	r2, r3, r2, lsl #1
   1c578:	cmp	r2, #0
   1c57c:	beq	1c588 <__assert_fail@plt+0xa4fc>
   1c580:	mov	r0, r2
   1c584:	pop	{r4, r5, r7, sl, fp, pc}
   1c588:	ldr	r2, [r0]
   1c58c:	ldr	r0, [r1]
   1c590:	mov	r1, r2
   1c594:	pop	{r4, r5, r7, sl, fp, lr}
   1c598:	b	11bd0 <strcmp@plt>
   1c59c:	push	{r4, r5, r7, sl, fp, lr}
   1c5a0:	add	fp, sp, #16
   1c5a4:	ldr	r2, [r1, #120]	; 0x78
   1c5a8:	mov	ip, #1
   1c5ac:	mov	r3, #1
   1c5b0:	cmp	r2, #3
   1c5b4:	beq	1c5d8 <__assert_fail@plt+0xa54c>
   1c5b8:	cmp	r2, #9
   1c5bc:	mov	r3, #1
   1c5c0:	beq	1c5d8 <__assert_fail@plt+0xa54c>
   1c5c4:	ldr	r2, [r1, #124]	; 0x7c
   1c5c8:	and	r2, r2, #61440	; 0xf000
   1c5cc:	sub	r2, r2, #16384	; 0x4000
   1c5d0:	clz	r2, r2
   1c5d4:	lsr	r3, r2, #5
   1c5d8:	ldr	r2, [r0, #120]	; 0x78
   1c5dc:	cmp	r2, #3
   1c5e0:	cmpne	r2, #9
   1c5e4:	bne	1c63c <__assert_fail@plt+0xa5b0>
   1c5e8:	subs	r2, r3, ip
   1c5ec:	bne	1c658 <__assert_fail@plt+0xa5cc>
   1c5f0:	ldr	r2, [r1, #96]	; 0x60
   1c5f4:	ldrd	r4, [r0, #96]	; 0x60
   1c5f8:	ldr	r7, [r1, #100]	; 0x64
   1c5fc:	mov	r3, #0
   1c600:	cmp	r4, r2
   1c604:	mov	r2, #0
   1c608:	movwgt	r2, #1
   1c60c:	sublt	r2, r2, #1
   1c610:	cmp	r5, r7
   1c614:	movwgt	r3, #1
   1c618:	sublt	r3, r3, #1
   1c61c:	add	r2, r3, r2, lsl #1
   1c620:	cmp	r2, #0
   1c624:	bne	1c658 <__assert_fail@plt+0xa5cc>
   1c628:	ldr	r2, [r0]
   1c62c:	ldr	r0, [r1]
   1c630:	mov	r1, r2
   1c634:	pop	{r4, r5, r7, sl, fp, lr}
   1c638:	b	11bd0 <strcmp@plt>
   1c63c:	ldr	r2, [r0, #124]	; 0x7c
   1c640:	and	r2, r2, #61440	; 0xf000
   1c644:	sub	r2, r2, #16384	; 0x4000
   1c648:	clz	r2, r2
   1c64c:	lsr	ip, r2, #5
   1c650:	subs	r2, r3, ip
   1c654:	beq	1c5f0 <__assert_fail@plt+0xa564>
   1c658:	mov	r0, r2
   1c65c:	pop	{r4, r5, r7, sl, fp, pc}
   1c660:	push	{r4, r5, r6, sl, fp, lr}
   1c664:	add	fp, sp, #16
   1c668:	ldrd	r2, [r0, #104]	; 0x68
   1c66c:	ldrd	r4, [r1, #104]	; 0x68
   1c670:	mov	r6, #0
   1c674:	cmp	r4, r2
   1c678:	mov	r2, #0
   1c67c:	movwgt	r2, #1
   1c680:	sublt	r2, r2, #1
   1c684:	cmp	r5, r3
   1c688:	mov	r3, #0
   1c68c:	movwgt	r3, #1
   1c690:	sublt	r3, r3, #1
   1c694:	add	r2, r3, r2, lsl #1
   1c698:	cmp	r2, #0
   1c69c:	beq	1c6a8 <__assert_fail@plt+0xa61c>
   1c6a0:	mov	r0, r2
   1c6a4:	pop	{r4, r5, r6, sl, fp, pc}
   1c6a8:	ldr	r4, [r1]
   1c6ac:	ldr	r5, [r0]
   1c6b0:	bl	11ed0 <__errno_location@plt>
   1c6b4:	str	r6, [r0]
   1c6b8:	mov	r0, r5
   1c6bc:	mov	r1, r4
   1c6c0:	pop	{r4, r5, r6, sl, fp, lr}
   1c6c4:	b	11dd4 <strcoll@plt>
   1c6c8:	push	{r4, r5, r6, sl, fp, lr}
   1c6cc:	add	fp, sp, #16
   1c6d0:	ldr	r6, [r1, #120]	; 0x78
   1c6d4:	mov	r2, #1
   1c6d8:	mov	r3, #1
   1c6dc:	cmp	r6, #3
   1c6e0:	beq	1c704 <__assert_fail@plt+0xa678>
   1c6e4:	cmp	r6, #9
   1c6e8:	mov	r3, #1
   1c6ec:	beq	1c704 <__assert_fail@plt+0xa678>
   1c6f0:	ldr	r3, [r1, #124]	; 0x7c
   1c6f4:	and	r3, r3, #61440	; 0xf000
   1c6f8:	sub	r3, r3, #16384	; 0x4000
   1c6fc:	clz	r3, r3
   1c700:	lsr	r3, r3, #5
   1c704:	ldr	r6, [r0, #120]	; 0x78
   1c708:	cmp	r6, #3
   1c70c:	cmpne	r6, #9
   1c710:	bne	1c774 <__assert_fail@plt+0xa6e8>
   1c714:	subs	r2, r3, r2
   1c718:	bne	1c790 <__assert_fail@plt+0xa704>
   1c71c:	ldrd	r2, [r0, #104]	; 0x68
   1c720:	ldrd	r4, [r1, #104]	; 0x68
   1c724:	mov	r6, #0
   1c728:	cmp	r4, r2
   1c72c:	mov	r2, #0
   1c730:	movwgt	r2, #1
   1c734:	sublt	r2, r2, #1
   1c738:	cmp	r5, r3
   1c73c:	mov	r3, #0
   1c740:	movwgt	r3, #1
   1c744:	sublt	r3, r3, #1
   1c748:	add	r2, r3, r2, lsl #1
   1c74c:	cmp	r2, #0
   1c750:	bne	1c790 <__assert_fail@plt+0xa704>
   1c754:	ldr	r4, [r1]
   1c758:	ldr	r5, [r0]
   1c75c:	bl	11ed0 <__errno_location@plt>
   1c760:	str	r6, [r0]
   1c764:	mov	r0, r5
   1c768:	mov	r1, r4
   1c76c:	pop	{r4, r5, r6, sl, fp, lr}
   1c770:	b	11dd4 <strcoll@plt>
   1c774:	ldr	r2, [r0, #124]	; 0x7c
   1c778:	and	r2, r2, #61440	; 0xf000
   1c77c:	sub	r2, r2, #16384	; 0x4000
   1c780:	clz	r2, r2
   1c784:	lsr	r2, r2, #5
   1c788:	subs	r2, r3, r2
   1c78c:	beq	1c71c <__assert_fail@plt+0xa690>
   1c790:	mov	r0, r2
   1c794:	pop	{r4, r5, r6, sl, fp, pc}
   1c798:	push	{r4, r5, r6, sl, fp, lr}
   1c79c:	add	fp, sp, #16
   1c7a0:	ldrd	r2, [r1, #104]	; 0x68
   1c7a4:	ldrd	r4, [r0, #104]	; 0x68
   1c7a8:	mov	r6, #0
   1c7ac:	cmp	r4, r2
   1c7b0:	mov	r2, #0
   1c7b4:	movwgt	r2, #1
   1c7b8:	sublt	r2, r2, #1
   1c7bc:	cmp	r5, r3
   1c7c0:	mov	r3, #0
   1c7c4:	movwgt	r3, #1
   1c7c8:	sublt	r3, r3, #1
   1c7cc:	add	r2, r3, r2, lsl #1
   1c7d0:	cmp	r2, #0
   1c7d4:	beq	1c7e0 <__assert_fail@plt+0xa754>
   1c7d8:	mov	r0, r2
   1c7dc:	pop	{r4, r5, r6, sl, fp, pc}
   1c7e0:	ldr	r4, [r0]
   1c7e4:	ldr	r5, [r1]
   1c7e8:	bl	11ed0 <__errno_location@plt>
   1c7ec:	str	r6, [r0]
   1c7f0:	mov	r0, r5
   1c7f4:	mov	r1, r4
   1c7f8:	pop	{r4, r5, r6, sl, fp, lr}
   1c7fc:	b	11dd4 <strcoll@plt>
   1c800:	push	{r4, r5, r6, sl, fp, lr}
   1c804:	add	fp, sp, #16
   1c808:	ldr	r6, [r1, #120]	; 0x78
   1c80c:	mov	r2, #1
   1c810:	mov	r3, #1
   1c814:	cmp	r6, #3
   1c818:	beq	1c83c <__assert_fail@plt+0xa7b0>
   1c81c:	cmp	r6, #9
   1c820:	mov	r3, #1
   1c824:	beq	1c83c <__assert_fail@plt+0xa7b0>
   1c828:	ldr	r3, [r1, #124]	; 0x7c
   1c82c:	and	r3, r3, #61440	; 0xf000
   1c830:	sub	r3, r3, #16384	; 0x4000
   1c834:	clz	r3, r3
   1c838:	lsr	r3, r3, #5
   1c83c:	ldr	r6, [r0, #120]	; 0x78
   1c840:	cmp	r6, #3
   1c844:	cmpne	r6, #9
   1c848:	bne	1c8ac <__assert_fail@plt+0xa820>
   1c84c:	subs	r2, r3, r2
   1c850:	bne	1c8c8 <__assert_fail@plt+0xa83c>
   1c854:	ldrd	r2, [r1, #104]	; 0x68
   1c858:	ldrd	r4, [r0, #104]	; 0x68
   1c85c:	mov	r6, #0
   1c860:	cmp	r4, r2
   1c864:	mov	r2, #0
   1c868:	movwgt	r2, #1
   1c86c:	sublt	r2, r2, #1
   1c870:	cmp	r5, r3
   1c874:	mov	r3, #0
   1c878:	movwgt	r3, #1
   1c87c:	sublt	r3, r3, #1
   1c880:	add	r2, r3, r2, lsl #1
   1c884:	cmp	r2, #0
   1c888:	bne	1c8c8 <__assert_fail@plt+0xa83c>
   1c88c:	ldr	r4, [r0]
   1c890:	ldr	r5, [r1]
   1c894:	bl	11ed0 <__errno_location@plt>
   1c898:	str	r6, [r0]
   1c89c:	mov	r0, r5
   1c8a0:	mov	r1, r4
   1c8a4:	pop	{r4, r5, r6, sl, fp, lr}
   1c8a8:	b	11dd4 <strcoll@plt>
   1c8ac:	ldr	r2, [r0, #124]	; 0x7c
   1c8b0:	and	r2, r2, #61440	; 0xf000
   1c8b4:	sub	r2, r2, #16384	; 0x4000
   1c8b8:	clz	r2, r2
   1c8bc:	lsr	r2, r2, #5
   1c8c0:	subs	r2, r3, r2
   1c8c4:	beq	1c854 <__assert_fail@plt+0xa7c8>
   1c8c8:	mov	r0, r2
   1c8cc:	pop	{r4, r5, r6, sl, fp, pc}
   1c8d0:	push	{r4, r5, r7, sl, fp, lr}
   1c8d4:	add	fp, sp, #16
   1c8d8:	ldr	r2, [r0, #104]	; 0x68
   1c8dc:	ldrd	r4, [r1, #104]	; 0x68
   1c8e0:	ldr	r7, [r0, #108]	; 0x6c
   1c8e4:	mov	r3, #0
   1c8e8:	cmp	r4, r2
   1c8ec:	mov	r2, #0
   1c8f0:	movwgt	r2, #1
   1c8f4:	sublt	r2, r2, #1
   1c8f8:	cmp	r5, r7
   1c8fc:	movwgt	r3, #1
   1c900:	sublt	r3, r3, #1
   1c904:	add	r2, r3, r2, lsl #1
   1c908:	cmp	r2, #0
   1c90c:	beq	1c918 <__assert_fail@plt+0xa88c>
   1c910:	mov	r0, r2
   1c914:	pop	{r4, r5, r7, sl, fp, pc}
   1c918:	ldr	r1, [r1]
   1c91c:	ldr	r0, [r0]
   1c920:	pop	{r4, r5, r7, sl, fp, lr}
   1c924:	b	11bd0 <strcmp@plt>
   1c928:	push	{r4, r5, r7, sl, fp, lr}
   1c92c:	add	fp, sp, #16
   1c930:	ldr	r2, [r1, #120]	; 0x78
   1c934:	mov	ip, #1
   1c938:	mov	r3, #1
   1c93c:	cmp	r2, #3
   1c940:	beq	1c964 <__assert_fail@plt+0xa8d8>
   1c944:	cmp	r2, #9
   1c948:	mov	r3, #1
   1c94c:	beq	1c964 <__assert_fail@plt+0xa8d8>
   1c950:	ldr	r2, [r1, #124]	; 0x7c
   1c954:	and	r2, r2, #61440	; 0xf000
   1c958:	sub	r2, r2, #16384	; 0x4000
   1c95c:	clz	r2, r2
   1c960:	lsr	r3, r2, #5
   1c964:	ldr	r2, [r0, #120]	; 0x78
   1c968:	cmp	r2, #3
   1c96c:	cmpne	r2, #9
   1c970:	bne	1c9c4 <__assert_fail@plt+0xa938>
   1c974:	subs	r2, r3, ip
   1c978:	bne	1c9e0 <__assert_fail@plt+0xa954>
   1c97c:	ldr	r2, [r0, #104]	; 0x68
   1c980:	ldrd	r4, [r1, #104]	; 0x68
   1c984:	ldr	r7, [r0, #108]	; 0x6c
   1c988:	mov	r3, #0
   1c98c:	cmp	r4, r2
   1c990:	mov	r2, #0
   1c994:	movwgt	r2, #1
   1c998:	sublt	r2, r2, #1
   1c99c:	cmp	r5, r7
   1c9a0:	movwgt	r3, #1
   1c9a4:	sublt	r3, r3, #1
   1c9a8:	add	r2, r3, r2, lsl #1
   1c9ac:	cmp	r2, #0
   1c9b0:	bne	1c9e0 <__assert_fail@plt+0xa954>
   1c9b4:	ldr	r1, [r1]
   1c9b8:	ldr	r0, [r0]
   1c9bc:	pop	{r4, r5, r7, sl, fp, lr}
   1c9c0:	b	11bd0 <strcmp@plt>
   1c9c4:	ldr	r2, [r0, #124]	; 0x7c
   1c9c8:	and	r2, r2, #61440	; 0xf000
   1c9cc:	sub	r2, r2, #16384	; 0x4000
   1c9d0:	clz	r2, r2
   1c9d4:	lsr	ip, r2, #5
   1c9d8:	subs	r2, r3, ip
   1c9dc:	beq	1c97c <__assert_fail@plt+0xa8f0>
   1c9e0:	mov	r0, r2
   1c9e4:	pop	{r4, r5, r7, sl, fp, pc}
   1c9e8:	push	{r4, r5, r7, sl, fp, lr}
   1c9ec:	add	fp, sp, #16
   1c9f0:	ldr	r2, [r1, #104]	; 0x68
   1c9f4:	ldrd	r4, [r0, #104]	; 0x68
   1c9f8:	ldr	r7, [r1, #108]	; 0x6c
   1c9fc:	mov	r3, #0
   1ca00:	cmp	r4, r2
   1ca04:	mov	r2, #0
   1ca08:	movwgt	r2, #1
   1ca0c:	sublt	r2, r2, #1
   1ca10:	cmp	r5, r7
   1ca14:	movwgt	r3, #1
   1ca18:	sublt	r3, r3, #1
   1ca1c:	add	r2, r3, r2, lsl #1
   1ca20:	cmp	r2, #0
   1ca24:	beq	1ca30 <__assert_fail@plt+0xa9a4>
   1ca28:	mov	r0, r2
   1ca2c:	pop	{r4, r5, r7, sl, fp, pc}
   1ca30:	ldr	r2, [r0]
   1ca34:	ldr	r0, [r1]
   1ca38:	mov	r1, r2
   1ca3c:	pop	{r4, r5, r7, sl, fp, lr}
   1ca40:	b	11bd0 <strcmp@plt>
   1ca44:	push	{r4, r5, r7, sl, fp, lr}
   1ca48:	add	fp, sp, #16
   1ca4c:	ldr	r2, [r1, #120]	; 0x78
   1ca50:	mov	ip, #1
   1ca54:	mov	r3, #1
   1ca58:	cmp	r2, #3
   1ca5c:	beq	1ca80 <__assert_fail@plt+0xa9f4>
   1ca60:	cmp	r2, #9
   1ca64:	mov	r3, #1
   1ca68:	beq	1ca80 <__assert_fail@plt+0xa9f4>
   1ca6c:	ldr	r2, [r1, #124]	; 0x7c
   1ca70:	and	r2, r2, #61440	; 0xf000
   1ca74:	sub	r2, r2, #16384	; 0x4000
   1ca78:	clz	r2, r2
   1ca7c:	lsr	r3, r2, #5
   1ca80:	ldr	r2, [r0, #120]	; 0x78
   1ca84:	cmp	r2, #3
   1ca88:	cmpne	r2, #9
   1ca8c:	bne	1cae4 <__assert_fail@plt+0xaa58>
   1ca90:	subs	r2, r3, ip
   1ca94:	bne	1cb00 <__assert_fail@plt+0xaa74>
   1ca98:	ldr	r2, [r1, #104]	; 0x68
   1ca9c:	ldrd	r4, [r0, #104]	; 0x68
   1caa0:	ldr	r7, [r1, #108]	; 0x6c
   1caa4:	mov	r3, #0
   1caa8:	cmp	r4, r2
   1caac:	mov	r2, #0
   1cab0:	movwgt	r2, #1
   1cab4:	sublt	r2, r2, #1
   1cab8:	cmp	r5, r7
   1cabc:	movwgt	r3, #1
   1cac0:	sublt	r3, r3, #1
   1cac4:	add	r2, r3, r2, lsl #1
   1cac8:	cmp	r2, #0
   1cacc:	bne	1cb00 <__assert_fail@plt+0xaa74>
   1cad0:	ldr	r2, [r0]
   1cad4:	ldr	r0, [r1]
   1cad8:	mov	r1, r2
   1cadc:	pop	{r4, r5, r7, sl, fp, lr}
   1cae0:	b	11bd0 <strcmp@plt>
   1cae4:	ldr	r2, [r0, #124]	; 0x7c
   1cae8:	and	r2, r2, #61440	; 0xf000
   1caec:	sub	r2, r2, #16384	; 0x4000
   1caf0:	clz	r2, r2
   1caf4:	lsr	ip, r2, #5
   1caf8:	subs	r2, r3, ip
   1cafc:	beq	1ca98 <__assert_fail@plt+0xaa0c>
   1cb00:	mov	r0, r2
   1cb04:	pop	{r4, r5, r7, sl, fp, pc}
   1cb08:	push	{r4, r5, r6, sl, fp, lr}
   1cb0c:	add	fp, sp, #16
   1cb10:	ldrd	r2, [r0, #88]	; 0x58
   1cb14:	ldrd	r4, [r1, #88]	; 0x58
   1cb18:	mov	r6, #0
   1cb1c:	cmp	r4, r2
   1cb20:	mov	r2, #0
   1cb24:	movwgt	r2, #1
   1cb28:	sublt	r2, r2, #1
   1cb2c:	cmp	r5, r3
   1cb30:	mov	r3, #0
   1cb34:	movwgt	r3, #1
   1cb38:	sublt	r3, r3, #1
   1cb3c:	add	r2, r3, r2, lsl #1
   1cb40:	cmp	r2, #0
   1cb44:	beq	1cb50 <__assert_fail@plt+0xaac4>
   1cb48:	mov	r0, r2
   1cb4c:	pop	{r4, r5, r6, sl, fp, pc}
   1cb50:	ldr	r4, [r1]
   1cb54:	ldr	r5, [r0]
   1cb58:	bl	11ed0 <__errno_location@plt>
   1cb5c:	str	r6, [r0]
   1cb60:	mov	r0, r5
   1cb64:	mov	r1, r4
   1cb68:	pop	{r4, r5, r6, sl, fp, lr}
   1cb6c:	b	11dd4 <strcoll@plt>
   1cb70:	push	{r4, r5, r6, sl, fp, lr}
   1cb74:	add	fp, sp, #16
   1cb78:	ldr	r6, [r1, #120]	; 0x78
   1cb7c:	mov	r2, #1
   1cb80:	mov	r3, #1
   1cb84:	cmp	r6, #3
   1cb88:	beq	1cbac <__assert_fail@plt+0xab20>
   1cb8c:	cmp	r6, #9
   1cb90:	mov	r3, #1
   1cb94:	beq	1cbac <__assert_fail@plt+0xab20>
   1cb98:	ldr	r3, [r1, #124]	; 0x7c
   1cb9c:	and	r3, r3, #61440	; 0xf000
   1cba0:	sub	r3, r3, #16384	; 0x4000
   1cba4:	clz	r3, r3
   1cba8:	lsr	r3, r3, #5
   1cbac:	ldr	r6, [r0, #120]	; 0x78
   1cbb0:	cmp	r6, #3
   1cbb4:	cmpne	r6, #9
   1cbb8:	bne	1cc1c <__assert_fail@plt+0xab90>
   1cbbc:	subs	r2, r3, r2
   1cbc0:	bne	1cc38 <__assert_fail@plt+0xabac>
   1cbc4:	ldrd	r2, [r0, #88]	; 0x58
   1cbc8:	ldrd	r4, [r1, #88]	; 0x58
   1cbcc:	mov	r6, #0
   1cbd0:	cmp	r4, r2
   1cbd4:	mov	r2, #0
   1cbd8:	movwgt	r2, #1
   1cbdc:	sublt	r2, r2, #1
   1cbe0:	cmp	r5, r3
   1cbe4:	mov	r3, #0
   1cbe8:	movwgt	r3, #1
   1cbec:	sublt	r3, r3, #1
   1cbf0:	add	r2, r3, r2, lsl #1
   1cbf4:	cmp	r2, #0
   1cbf8:	bne	1cc38 <__assert_fail@plt+0xabac>
   1cbfc:	ldr	r4, [r1]
   1cc00:	ldr	r5, [r0]
   1cc04:	bl	11ed0 <__errno_location@plt>
   1cc08:	str	r6, [r0]
   1cc0c:	mov	r0, r5
   1cc10:	mov	r1, r4
   1cc14:	pop	{r4, r5, r6, sl, fp, lr}
   1cc18:	b	11dd4 <strcoll@plt>
   1cc1c:	ldr	r2, [r0, #124]	; 0x7c
   1cc20:	and	r2, r2, #61440	; 0xf000
   1cc24:	sub	r2, r2, #16384	; 0x4000
   1cc28:	clz	r2, r2
   1cc2c:	lsr	r2, r2, #5
   1cc30:	subs	r2, r3, r2
   1cc34:	beq	1cbc4 <__assert_fail@plt+0xab38>
   1cc38:	mov	r0, r2
   1cc3c:	pop	{r4, r5, r6, sl, fp, pc}
   1cc40:	push	{r4, r5, r6, sl, fp, lr}
   1cc44:	add	fp, sp, #16
   1cc48:	ldrd	r2, [r1, #88]	; 0x58
   1cc4c:	ldrd	r4, [r0, #88]	; 0x58
   1cc50:	mov	r6, #0
   1cc54:	cmp	r4, r2
   1cc58:	mov	r2, #0
   1cc5c:	movwgt	r2, #1
   1cc60:	sublt	r2, r2, #1
   1cc64:	cmp	r5, r3
   1cc68:	mov	r3, #0
   1cc6c:	movwgt	r3, #1
   1cc70:	sublt	r3, r3, #1
   1cc74:	add	r2, r3, r2, lsl #1
   1cc78:	cmp	r2, #0
   1cc7c:	beq	1cc88 <__assert_fail@plt+0xabfc>
   1cc80:	mov	r0, r2
   1cc84:	pop	{r4, r5, r6, sl, fp, pc}
   1cc88:	ldr	r4, [r0]
   1cc8c:	ldr	r5, [r1]
   1cc90:	bl	11ed0 <__errno_location@plt>
   1cc94:	str	r6, [r0]
   1cc98:	mov	r0, r5
   1cc9c:	mov	r1, r4
   1cca0:	pop	{r4, r5, r6, sl, fp, lr}
   1cca4:	b	11dd4 <strcoll@plt>
   1cca8:	push	{r4, r5, r6, sl, fp, lr}
   1ccac:	add	fp, sp, #16
   1ccb0:	ldr	r6, [r1, #120]	; 0x78
   1ccb4:	mov	r2, #1
   1ccb8:	mov	r3, #1
   1ccbc:	cmp	r6, #3
   1ccc0:	beq	1cce4 <__assert_fail@plt+0xac58>
   1ccc4:	cmp	r6, #9
   1ccc8:	mov	r3, #1
   1cccc:	beq	1cce4 <__assert_fail@plt+0xac58>
   1ccd0:	ldr	r3, [r1, #124]	; 0x7c
   1ccd4:	and	r3, r3, #61440	; 0xf000
   1ccd8:	sub	r3, r3, #16384	; 0x4000
   1ccdc:	clz	r3, r3
   1cce0:	lsr	r3, r3, #5
   1cce4:	ldr	r6, [r0, #120]	; 0x78
   1cce8:	cmp	r6, #3
   1ccec:	cmpne	r6, #9
   1ccf0:	bne	1cd54 <__assert_fail@plt+0xacc8>
   1ccf4:	subs	r2, r3, r2
   1ccf8:	bne	1cd70 <__assert_fail@plt+0xace4>
   1ccfc:	ldrd	r2, [r1, #88]	; 0x58
   1cd00:	ldrd	r4, [r0, #88]	; 0x58
   1cd04:	mov	r6, #0
   1cd08:	cmp	r4, r2
   1cd0c:	mov	r2, #0
   1cd10:	movwgt	r2, #1
   1cd14:	sublt	r2, r2, #1
   1cd18:	cmp	r5, r3
   1cd1c:	mov	r3, #0
   1cd20:	movwgt	r3, #1
   1cd24:	sublt	r3, r3, #1
   1cd28:	add	r2, r3, r2, lsl #1
   1cd2c:	cmp	r2, #0
   1cd30:	bne	1cd70 <__assert_fail@plt+0xace4>
   1cd34:	ldr	r4, [r0]
   1cd38:	ldr	r5, [r1]
   1cd3c:	bl	11ed0 <__errno_location@plt>
   1cd40:	str	r6, [r0]
   1cd44:	mov	r0, r5
   1cd48:	mov	r1, r4
   1cd4c:	pop	{r4, r5, r6, sl, fp, lr}
   1cd50:	b	11dd4 <strcoll@plt>
   1cd54:	ldr	r2, [r0, #124]	; 0x7c
   1cd58:	and	r2, r2, #61440	; 0xf000
   1cd5c:	sub	r2, r2, #16384	; 0x4000
   1cd60:	clz	r2, r2
   1cd64:	lsr	r2, r2, #5
   1cd68:	subs	r2, r3, r2
   1cd6c:	beq	1ccfc <__assert_fail@plt+0xac70>
   1cd70:	mov	r0, r2
   1cd74:	pop	{r4, r5, r6, sl, fp, pc}
   1cd78:	push	{r4, r5, r7, sl, fp, lr}
   1cd7c:	add	fp, sp, #16
   1cd80:	ldr	r2, [r0, #88]	; 0x58
   1cd84:	ldrd	r4, [r1, #88]	; 0x58
   1cd88:	ldr	r7, [r0, #92]	; 0x5c
   1cd8c:	mov	r3, #0
   1cd90:	cmp	r4, r2
   1cd94:	mov	r2, #0
   1cd98:	movwgt	r2, #1
   1cd9c:	sublt	r2, r2, #1
   1cda0:	cmp	r5, r7
   1cda4:	movwgt	r3, #1
   1cda8:	sublt	r3, r3, #1
   1cdac:	add	r2, r3, r2, lsl #1
   1cdb0:	cmp	r2, #0
   1cdb4:	beq	1cdc0 <__assert_fail@plt+0xad34>
   1cdb8:	mov	r0, r2
   1cdbc:	pop	{r4, r5, r7, sl, fp, pc}
   1cdc0:	ldr	r1, [r1]
   1cdc4:	ldr	r0, [r0]
   1cdc8:	pop	{r4, r5, r7, sl, fp, lr}
   1cdcc:	b	11bd0 <strcmp@plt>
   1cdd0:	push	{r4, r5, r7, sl, fp, lr}
   1cdd4:	add	fp, sp, #16
   1cdd8:	ldr	r2, [r1, #120]	; 0x78
   1cddc:	mov	ip, #1
   1cde0:	mov	r3, #1
   1cde4:	cmp	r2, #3
   1cde8:	beq	1ce0c <__assert_fail@plt+0xad80>
   1cdec:	cmp	r2, #9
   1cdf0:	mov	r3, #1
   1cdf4:	beq	1ce0c <__assert_fail@plt+0xad80>
   1cdf8:	ldr	r2, [r1, #124]	; 0x7c
   1cdfc:	and	r2, r2, #61440	; 0xf000
   1ce00:	sub	r2, r2, #16384	; 0x4000
   1ce04:	clz	r2, r2
   1ce08:	lsr	r3, r2, #5
   1ce0c:	ldr	r2, [r0, #120]	; 0x78
   1ce10:	cmp	r2, #3
   1ce14:	cmpne	r2, #9
   1ce18:	bne	1ce6c <__assert_fail@plt+0xade0>
   1ce1c:	subs	r2, r3, ip
   1ce20:	bne	1ce88 <__assert_fail@plt+0xadfc>
   1ce24:	ldr	r2, [r0, #88]	; 0x58
   1ce28:	ldrd	r4, [r1, #88]	; 0x58
   1ce2c:	ldr	r7, [r0, #92]	; 0x5c
   1ce30:	mov	r3, #0
   1ce34:	cmp	r4, r2
   1ce38:	mov	r2, #0
   1ce3c:	movwgt	r2, #1
   1ce40:	sublt	r2, r2, #1
   1ce44:	cmp	r5, r7
   1ce48:	movwgt	r3, #1
   1ce4c:	sublt	r3, r3, #1
   1ce50:	add	r2, r3, r2, lsl #1
   1ce54:	cmp	r2, #0
   1ce58:	bne	1ce88 <__assert_fail@plt+0xadfc>
   1ce5c:	ldr	r1, [r1]
   1ce60:	ldr	r0, [r0]
   1ce64:	pop	{r4, r5, r7, sl, fp, lr}
   1ce68:	b	11bd0 <strcmp@plt>
   1ce6c:	ldr	r2, [r0, #124]	; 0x7c
   1ce70:	and	r2, r2, #61440	; 0xf000
   1ce74:	sub	r2, r2, #16384	; 0x4000
   1ce78:	clz	r2, r2
   1ce7c:	lsr	ip, r2, #5
   1ce80:	subs	r2, r3, ip
   1ce84:	beq	1ce24 <__assert_fail@plt+0xad98>
   1ce88:	mov	r0, r2
   1ce8c:	pop	{r4, r5, r7, sl, fp, pc}
   1ce90:	push	{r4, r5, r7, sl, fp, lr}
   1ce94:	add	fp, sp, #16
   1ce98:	ldr	r2, [r1, #88]	; 0x58
   1ce9c:	ldrd	r4, [r0, #88]	; 0x58
   1cea0:	ldr	r7, [r1, #92]	; 0x5c
   1cea4:	mov	r3, #0
   1cea8:	cmp	r4, r2
   1ceac:	mov	r2, #0
   1ceb0:	movwgt	r2, #1
   1ceb4:	sublt	r2, r2, #1
   1ceb8:	cmp	r5, r7
   1cebc:	movwgt	r3, #1
   1cec0:	sublt	r3, r3, #1
   1cec4:	add	r2, r3, r2, lsl #1
   1cec8:	cmp	r2, #0
   1cecc:	beq	1ced8 <__assert_fail@plt+0xae4c>
   1ced0:	mov	r0, r2
   1ced4:	pop	{r4, r5, r7, sl, fp, pc}
   1ced8:	ldr	r2, [r0]
   1cedc:	ldr	r0, [r1]
   1cee0:	mov	r1, r2
   1cee4:	pop	{r4, r5, r7, sl, fp, lr}
   1cee8:	b	11bd0 <strcmp@plt>
   1ceec:	push	{r4, r5, r7, sl, fp, lr}
   1cef0:	add	fp, sp, #16
   1cef4:	ldr	r2, [r1, #120]	; 0x78
   1cef8:	mov	ip, #1
   1cefc:	mov	r3, #1
   1cf00:	cmp	r2, #3
   1cf04:	beq	1cf28 <__assert_fail@plt+0xae9c>
   1cf08:	cmp	r2, #9
   1cf0c:	mov	r3, #1
   1cf10:	beq	1cf28 <__assert_fail@plt+0xae9c>
   1cf14:	ldr	r2, [r1, #124]	; 0x7c
   1cf18:	and	r2, r2, #61440	; 0xf000
   1cf1c:	sub	r2, r2, #16384	; 0x4000
   1cf20:	clz	r2, r2
   1cf24:	lsr	r3, r2, #5
   1cf28:	ldr	r2, [r0, #120]	; 0x78
   1cf2c:	cmp	r2, #3
   1cf30:	cmpne	r2, #9
   1cf34:	bne	1cf8c <__assert_fail@plt+0xaf00>
   1cf38:	subs	r2, r3, ip
   1cf3c:	bne	1cfa8 <__assert_fail@plt+0xaf1c>
   1cf40:	ldr	r2, [r1, #88]	; 0x58
   1cf44:	ldrd	r4, [r0, #88]	; 0x58
   1cf48:	ldr	r7, [r1, #92]	; 0x5c
   1cf4c:	mov	r3, #0
   1cf50:	cmp	r4, r2
   1cf54:	mov	r2, #0
   1cf58:	movwgt	r2, #1
   1cf5c:	sublt	r2, r2, #1
   1cf60:	cmp	r5, r7
   1cf64:	movwgt	r3, #1
   1cf68:	sublt	r3, r3, #1
   1cf6c:	add	r2, r3, r2, lsl #1
   1cf70:	cmp	r2, #0
   1cf74:	bne	1cfa8 <__assert_fail@plt+0xaf1c>
   1cf78:	ldr	r2, [r0]
   1cf7c:	ldr	r0, [r1]
   1cf80:	mov	r1, r2
   1cf84:	pop	{r4, r5, r7, sl, fp, lr}
   1cf88:	b	11bd0 <strcmp@plt>
   1cf8c:	ldr	r2, [r0, #124]	; 0x7c
   1cf90:	and	r2, r2, #61440	; 0xf000
   1cf94:	sub	r2, r2, #16384	; 0x4000
   1cf98:	clz	r2, r2
   1cf9c:	lsr	ip, r2, #5
   1cfa0:	subs	r2, r3, ip
   1cfa4:	beq	1cf40 <__assert_fail@plt+0xaeb4>
   1cfa8:	mov	r0, r2
   1cfac:	pop	{r4, r5, r7, sl, fp, pc}
   1cfb0:	push	{r4, r5, r6, sl, fp, lr}
   1cfb4:	add	fp, sp, #16
   1cfb8:	ldrd	r2, [r0, #96]	; 0x60
   1cfbc:	ldrd	r4, [r1, #96]	; 0x60
   1cfc0:	mov	r6, #0
   1cfc4:	cmp	r4, r2
   1cfc8:	mov	r2, #0
   1cfcc:	movwgt	r2, #1
   1cfd0:	sublt	r2, r2, #1
   1cfd4:	cmp	r5, r3
   1cfd8:	mov	r3, #0
   1cfdc:	movwgt	r3, #1
   1cfe0:	sublt	r3, r3, #1
   1cfe4:	add	r2, r3, r2, lsl #1
   1cfe8:	cmp	r2, #0
   1cfec:	beq	1cff8 <__assert_fail@plt+0xaf6c>
   1cff0:	mov	r0, r2
   1cff4:	pop	{r4, r5, r6, sl, fp, pc}
   1cff8:	ldr	r4, [r1]
   1cffc:	ldr	r5, [r0]
   1d000:	bl	11ed0 <__errno_location@plt>
   1d004:	str	r6, [r0]
   1d008:	mov	r0, r5
   1d00c:	mov	r1, r4
   1d010:	pop	{r4, r5, r6, sl, fp, lr}
   1d014:	b	11dd4 <strcoll@plt>
   1d018:	push	{r4, r5, r6, sl, fp, lr}
   1d01c:	add	fp, sp, #16
   1d020:	ldr	r6, [r1, #120]	; 0x78
   1d024:	mov	r2, #1
   1d028:	mov	r3, #1
   1d02c:	cmp	r6, #3
   1d030:	beq	1d054 <__assert_fail@plt+0xafc8>
   1d034:	cmp	r6, #9
   1d038:	mov	r3, #1
   1d03c:	beq	1d054 <__assert_fail@plt+0xafc8>
   1d040:	ldr	r3, [r1, #124]	; 0x7c
   1d044:	and	r3, r3, #61440	; 0xf000
   1d048:	sub	r3, r3, #16384	; 0x4000
   1d04c:	clz	r3, r3
   1d050:	lsr	r3, r3, #5
   1d054:	ldr	r6, [r0, #120]	; 0x78
   1d058:	cmp	r6, #3
   1d05c:	cmpne	r6, #9
   1d060:	bne	1d0c4 <__assert_fail@plt+0xb038>
   1d064:	subs	r2, r3, r2
   1d068:	bne	1d0e0 <__assert_fail@plt+0xb054>
   1d06c:	ldrd	r2, [r0, #96]	; 0x60
   1d070:	ldrd	r4, [r1, #96]	; 0x60
   1d074:	mov	r6, #0
   1d078:	cmp	r4, r2
   1d07c:	mov	r2, #0
   1d080:	movwgt	r2, #1
   1d084:	sublt	r2, r2, #1
   1d088:	cmp	r5, r3
   1d08c:	mov	r3, #0
   1d090:	movwgt	r3, #1
   1d094:	sublt	r3, r3, #1
   1d098:	add	r2, r3, r2, lsl #1
   1d09c:	cmp	r2, #0
   1d0a0:	bne	1d0e0 <__assert_fail@plt+0xb054>
   1d0a4:	ldr	r4, [r1]
   1d0a8:	ldr	r5, [r0]
   1d0ac:	bl	11ed0 <__errno_location@plt>
   1d0b0:	str	r6, [r0]
   1d0b4:	mov	r0, r5
   1d0b8:	mov	r1, r4
   1d0bc:	pop	{r4, r5, r6, sl, fp, lr}
   1d0c0:	b	11dd4 <strcoll@plt>
   1d0c4:	ldr	r2, [r0, #124]	; 0x7c
   1d0c8:	and	r2, r2, #61440	; 0xf000
   1d0cc:	sub	r2, r2, #16384	; 0x4000
   1d0d0:	clz	r2, r2
   1d0d4:	lsr	r2, r2, #5
   1d0d8:	subs	r2, r3, r2
   1d0dc:	beq	1d06c <__assert_fail@plt+0xafe0>
   1d0e0:	mov	r0, r2
   1d0e4:	pop	{r4, r5, r6, sl, fp, pc}
   1d0e8:	push	{r4, r5, r6, sl, fp, lr}
   1d0ec:	add	fp, sp, #16
   1d0f0:	ldrd	r2, [r1, #96]	; 0x60
   1d0f4:	ldrd	r4, [r0, #96]	; 0x60
   1d0f8:	mov	r6, #0
   1d0fc:	cmp	r4, r2
   1d100:	mov	r2, #0
   1d104:	movwgt	r2, #1
   1d108:	sublt	r2, r2, #1
   1d10c:	cmp	r5, r3
   1d110:	mov	r3, #0
   1d114:	movwgt	r3, #1
   1d118:	sublt	r3, r3, #1
   1d11c:	add	r2, r3, r2, lsl #1
   1d120:	cmp	r2, #0
   1d124:	beq	1d130 <__assert_fail@plt+0xb0a4>
   1d128:	mov	r0, r2
   1d12c:	pop	{r4, r5, r6, sl, fp, pc}
   1d130:	ldr	r4, [r0]
   1d134:	ldr	r5, [r1]
   1d138:	bl	11ed0 <__errno_location@plt>
   1d13c:	str	r6, [r0]
   1d140:	mov	r0, r5
   1d144:	mov	r1, r4
   1d148:	pop	{r4, r5, r6, sl, fp, lr}
   1d14c:	b	11dd4 <strcoll@plt>
   1d150:	push	{r4, r5, r6, sl, fp, lr}
   1d154:	add	fp, sp, #16
   1d158:	ldr	r6, [r1, #120]	; 0x78
   1d15c:	mov	r2, #1
   1d160:	mov	r3, #1
   1d164:	cmp	r6, #3
   1d168:	beq	1d18c <__assert_fail@plt+0xb100>
   1d16c:	cmp	r6, #9
   1d170:	mov	r3, #1
   1d174:	beq	1d18c <__assert_fail@plt+0xb100>
   1d178:	ldr	r3, [r1, #124]	; 0x7c
   1d17c:	and	r3, r3, #61440	; 0xf000
   1d180:	sub	r3, r3, #16384	; 0x4000
   1d184:	clz	r3, r3
   1d188:	lsr	r3, r3, #5
   1d18c:	ldr	r6, [r0, #120]	; 0x78
   1d190:	cmp	r6, #3
   1d194:	cmpne	r6, #9
   1d198:	bne	1d1fc <__assert_fail@plt+0xb170>
   1d19c:	subs	r2, r3, r2
   1d1a0:	bne	1d218 <__assert_fail@plt+0xb18c>
   1d1a4:	ldrd	r2, [r1, #96]	; 0x60
   1d1a8:	ldrd	r4, [r0, #96]	; 0x60
   1d1ac:	mov	r6, #0
   1d1b0:	cmp	r4, r2
   1d1b4:	mov	r2, #0
   1d1b8:	movwgt	r2, #1
   1d1bc:	sublt	r2, r2, #1
   1d1c0:	cmp	r5, r3
   1d1c4:	mov	r3, #0
   1d1c8:	movwgt	r3, #1
   1d1cc:	sublt	r3, r3, #1
   1d1d0:	add	r2, r3, r2, lsl #1
   1d1d4:	cmp	r2, #0
   1d1d8:	bne	1d218 <__assert_fail@plt+0xb18c>
   1d1dc:	ldr	r4, [r0]
   1d1e0:	ldr	r5, [r1]
   1d1e4:	bl	11ed0 <__errno_location@plt>
   1d1e8:	str	r6, [r0]
   1d1ec:	mov	r0, r5
   1d1f0:	mov	r1, r4
   1d1f4:	pop	{r4, r5, r6, sl, fp, lr}
   1d1f8:	b	11dd4 <strcoll@plt>
   1d1fc:	ldr	r2, [r0, #124]	; 0x7c
   1d200:	and	r2, r2, #61440	; 0xf000
   1d204:	sub	r2, r2, #16384	; 0x4000
   1d208:	clz	r2, r2
   1d20c:	lsr	r2, r2, #5
   1d210:	subs	r2, r3, r2
   1d214:	beq	1d1a4 <__assert_fail@plt+0xb118>
   1d218:	mov	r0, r2
   1d21c:	pop	{r4, r5, r6, sl, fp, pc}
   1d220:	push	{r4, r5, r7, sl, fp, lr}
   1d224:	add	fp, sp, #16
   1d228:	ldr	r2, [r0, #96]	; 0x60
   1d22c:	ldrd	r4, [r1, #96]	; 0x60
   1d230:	ldr	r7, [r0, #100]	; 0x64
   1d234:	mov	r3, #0
   1d238:	cmp	r4, r2
   1d23c:	mov	r2, #0
   1d240:	movwgt	r2, #1
   1d244:	sublt	r2, r2, #1
   1d248:	cmp	r5, r7
   1d24c:	movwgt	r3, #1
   1d250:	sublt	r3, r3, #1
   1d254:	add	r2, r3, r2, lsl #1
   1d258:	cmp	r2, #0
   1d25c:	beq	1d268 <__assert_fail@plt+0xb1dc>
   1d260:	mov	r0, r2
   1d264:	pop	{r4, r5, r7, sl, fp, pc}
   1d268:	ldr	r1, [r1]
   1d26c:	ldr	r0, [r0]
   1d270:	pop	{r4, r5, r7, sl, fp, lr}
   1d274:	b	11bd0 <strcmp@plt>
   1d278:	push	{r4, r5, r7, sl, fp, lr}
   1d27c:	add	fp, sp, #16
   1d280:	ldr	r2, [r1, #120]	; 0x78
   1d284:	mov	ip, #1
   1d288:	mov	r3, #1
   1d28c:	cmp	r2, #3
   1d290:	beq	1d2b4 <__assert_fail@plt+0xb228>
   1d294:	cmp	r2, #9
   1d298:	mov	r3, #1
   1d29c:	beq	1d2b4 <__assert_fail@plt+0xb228>
   1d2a0:	ldr	r2, [r1, #124]	; 0x7c
   1d2a4:	and	r2, r2, #61440	; 0xf000
   1d2a8:	sub	r2, r2, #16384	; 0x4000
   1d2ac:	clz	r2, r2
   1d2b0:	lsr	r3, r2, #5
   1d2b4:	ldr	r2, [r0, #120]	; 0x78
   1d2b8:	cmp	r2, #3
   1d2bc:	cmpne	r2, #9
   1d2c0:	bne	1d314 <__assert_fail@plt+0xb288>
   1d2c4:	subs	r2, r3, ip
   1d2c8:	bne	1d330 <__assert_fail@plt+0xb2a4>
   1d2cc:	ldr	r2, [r0, #96]	; 0x60
   1d2d0:	ldrd	r4, [r1, #96]	; 0x60
   1d2d4:	ldr	r7, [r0, #100]	; 0x64
   1d2d8:	mov	r3, #0
   1d2dc:	cmp	r4, r2
   1d2e0:	mov	r2, #0
   1d2e4:	movwgt	r2, #1
   1d2e8:	sublt	r2, r2, #1
   1d2ec:	cmp	r5, r7
   1d2f0:	movwgt	r3, #1
   1d2f4:	sublt	r3, r3, #1
   1d2f8:	add	r2, r3, r2, lsl #1
   1d2fc:	cmp	r2, #0
   1d300:	bne	1d330 <__assert_fail@plt+0xb2a4>
   1d304:	ldr	r1, [r1]
   1d308:	ldr	r0, [r0]
   1d30c:	pop	{r4, r5, r7, sl, fp, lr}
   1d310:	b	11bd0 <strcmp@plt>
   1d314:	ldr	r2, [r0, #124]	; 0x7c
   1d318:	and	r2, r2, #61440	; 0xf000
   1d31c:	sub	r2, r2, #16384	; 0x4000
   1d320:	clz	r2, r2
   1d324:	lsr	ip, r2, #5
   1d328:	subs	r2, r3, ip
   1d32c:	beq	1d2cc <__assert_fail@plt+0xb240>
   1d330:	mov	r0, r2
   1d334:	pop	{r4, r5, r7, sl, fp, pc}
   1d338:	push	{r4, r5, r7, sl, fp, lr}
   1d33c:	add	fp, sp, #16
   1d340:	ldr	r2, [r1, #96]	; 0x60
   1d344:	ldrd	r4, [r0, #96]	; 0x60
   1d348:	ldr	r7, [r1, #100]	; 0x64
   1d34c:	mov	r3, #0
   1d350:	cmp	r4, r2
   1d354:	mov	r2, #0
   1d358:	movwgt	r2, #1
   1d35c:	sublt	r2, r2, #1
   1d360:	cmp	r5, r7
   1d364:	movwgt	r3, #1
   1d368:	sublt	r3, r3, #1
   1d36c:	add	r2, r3, r2, lsl #1
   1d370:	cmp	r2, #0
   1d374:	beq	1d380 <__assert_fail@plt+0xb2f4>
   1d378:	mov	r0, r2
   1d37c:	pop	{r4, r5, r7, sl, fp, pc}
   1d380:	ldr	r2, [r0]
   1d384:	ldr	r0, [r1]
   1d388:	mov	r1, r2
   1d38c:	pop	{r4, r5, r7, sl, fp, lr}
   1d390:	b	11bd0 <strcmp@plt>
   1d394:	push	{r4, r5, r7, sl, fp, lr}
   1d398:	add	fp, sp, #16
   1d39c:	ldr	r2, [r1, #120]	; 0x78
   1d3a0:	mov	ip, #1
   1d3a4:	mov	r3, #1
   1d3a8:	cmp	r2, #3
   1d3ac:	beq	1d3d0 <__assert_fail@plt+0xb344>
   1d3b0:	cmp	r2, #9
   1d3b4:	mov	r3, #1
   1d3b8:	beq	1d3d0 <__assert_fail@plt+0xb344>
   1d3bc:	ldr	r2, [r1, #124]	; 0x7c
   1d3c0:	and	r2, r2, #61440	; 0xf000
   1d3c4:	sub	r2, r2, #16384	; 0x4000
   1d3c8:	clz	r2, r2
   1d3cc:	lsr	r3, r2, #5
   1d3d0:	ldr	r2, [r0, #120]	; 0x78
   1d3d4:	cmp	r2, #3
   1d3d8:	cmpne	r2, #9
   1d3dc:	bne	1d434 <__assert_fail@plt+0xb3a8>
   1d3e0:	subs	r2, r3, ip
   1d3e4:	bne	1d450 <__assert_fail@plt+0xb3c4>
   1d3e8:	ldr	r2, [r1, #96]	; 0x60
   1d3ec:	ldrd	r4, [r0, #96]	; 0x60
   1d3f0:	ldr	r7, [r1, #100]	; 0x64
   1d3f4:	mov	r3, #0
   1d3f8:	cmp	r4, r2
   1d3fc:	mov	r2, #0
   1d400:	movwgt	r2, #1
   1d404:	sublt	r2, r2, #1
   1d408:	cmp	r5, r7
   1d40c:	movwgt	r3, #1
   1d410:	sublt	r3, r3, #1
   1d414:	add	r2, r3, r2, lsl #1
   1d418:	cmp	r2, #0
   1d41c:	bne	1d450 <__assert_fail@plt+0xb3c4>
   1d420:	ldr	r2, [r0]
   1d424:	ldr	r0, [r1]
   1d428:	mov	r1, r2
   1d42c:	pop	{r4, r5, r7, sl, fp, lr}
   1d430:	b	11bd0 <strcmp@plt>
   1d434:	ldr	r2, [r0, #124]	; 0x7c
   1d438:	and	r2, r2, #61440	; 0xf000
   1d43c:	sub	r2, r2, #16384	; 0x4000
   1d440:	clz	r2, r2
   1d444:	lsr	ip, r2, #5
   1d448:	subs	r2, r3, ip
   1d44c:	beq	1d3e8 <__assert_fail@plt+0xb35c>
   1d450:	mov	r0, r2
   1d454:	pop	{r4, r5, r7, sl, fp, pc}
   1d458:	push	{r4, r5, fp, lr}
   1d45c:	add	fp, sp, #8
   1d460:	mov	r4, r1
   1d464:	mov	r5, r0
   1d468:	bl	11ed0 <__errno_location@plt>
   1d46c:	mov	r1, #0
   1d470:	str	r1, [r0]
   1d474:	mov	r0, r5
   1d478:	mov	r1, r4
   1d47c:	pop	{r4, r5, fp, lr}
   1d480:	b	11dd4 <strcoll@plt>
   1d484:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   1d488:	add	fp, sp, #24
   1d48c:	sub	sp, sp, #24
   1d490:	sub	sp, sp, #8192	; 0x2000
   1d494:	ldr	r4, [r0, #148]	; 0x94
   1d498:	mov	r8, r2
   1d49c:	mov	r6, r1
   1d4a0:	mov	r5, r0
   1d4a4:	cmp	r4, #0
   1d4a8:	beq	1d4c8 <__assert_fail@plt+0xb43c>
   1d4ac:	ldr	r0, [r6, #148]	; 0x94
   1d4b0:	cmp	r0, #0
   1d4b4:	beq	1d52c <__assert_fail@plt+0xb4a0>
   1d4b8:	subs	r0, r4, r0
   1d4bc:	beq	1d58c <__assert_fail@plt+0xb500>
   1d4c0:	sub	sp, fp, #24
   1d4c4:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   1d4c8:	movw	r0, #4688	; 0x1250
   1d4cc:	ldr	r7, [r5]
   1d4d0:	ldr	r3, [r5, #144]	; 0x90
   1d4d4:	sub	r1, fp, #36	; 0x24
   1d4d8:	add	r4, sp, #11
   1d4dc:	movt	r0, #4
   1d4e0:	str	r1, [sp]
   1d4e4:	str	r4, [fp, #-32]	; 0xffffffe0
   1d4e8:	ldr	r2, [r0, #88]	; 0x58
   1d4ec:	sub	r0, fp, #37	; 0x25
   1d4f0:	str	r0, [sp, #4]
   1d4f4:	sub	r0, fp, #32
   1d4f8:	mov	r1, r7
   1d4fc:	bl	1a918 <__assert_fail@plt+0x888c>
   1d500:	ldr	r0, [fp, #-32]	; 0xffffffe0
   1d504:	cmp	r0, r4
   1d508:	cmpne	r0, r7
   1d50c:	beq	1d514 <__assert_fail@plt+0xb488>
   1d510:	bl	2056c <__assert_fail@plt+0xe4e0>
   1d514:	ldrb	r0, [fp, #-37]	; 0xffffffdb
   1d518:	ldr	r1, [fp, #-36]	; 0xffffffdc
   1d51c:	add	r4, r1, r0
   1d520:	ldr	r0, [r6, #148]	; 0x94
   1d524:	cmp	r0, #0
   1d528:	bne	1d4b8 <__assert_fail@plt+0xb42c>
   1d52c:	movw	r0, #4688	; 0x1250
   1d530:	ldr	r7, [r6]
   1d534:	ldr	r3, [r6, #144]	; 0x90
   1d538:	sub	r1, fp, #36	; 0x24
   1d53c:	add	r9, sp, #11
   1d540:	movt	r0, #4
   1d544:	str	r1, [sp]
   1d548:	str	r9, [fp, #-32]	; 0xffffffe0
   1d54c:	ldr	r2, [r0, #88]	; 0x58
   1d550:	sub	r0, fp, #37	; 0x25
   1d554:	str	r0, [sp, #4]
   1d558:	sub	r0, fp, #32
   1d55c:	mov	r1, r7
   1d560:	bl	1a918 <__assert_fail@plt+0x888c>
   1d564:	ldr	r0, [fp, #-32]	; 0xffffffe0
   1d568:	cmp	r0, r9
   1d56c:	cmpne	r0, r7
   1d570:	beq	1d578 <__assert_fail@plt+0xb4ec>
   1d574:	bl	2056c <__assert_fail@plt+0xe4e0>
   1d578:	ldrb	r0, [fp, #-37]	; 0xffffffdb
   1d57c:	ldr	r1, [fp, #-36]	; 0xffffffdc
   1d580:	add	r0, r1, r0
   1d584:	subs	r0, r4, r0
   1d588:	bne	1d4c0 <__assert_fail@plt+0xb434>
   1d58c:	ldr	r1, [r6]
   1d590:	ldr	r0, [r5]
   1d594:	blx	r8
   1d598:	sub	sp, fp, #24
   1d59c:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   1d5a0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1d5a4:	add	fp, sp, #28
   1d5a8:	sub	sp, sp, #676	; 0x2a4
   1d5ac:	movw	r7, #4688	; 0x1250
   1d5b0:	mov	r4, r0
   1d5b4:	mov	sl, r1
   1d5b8:	movt	r7, #4
   1d5bc:	ldrb	r0, [r7, #1]
   1d5c0:	cmp	r0, #0
   1d5c4:	beq	1d630 <__assert_fail@plt+0xb5a4>
   1d5c8:	movw	r6, #456	; 0x1c8
   1d5cc:	movt	r6, #4
   1d5d0:	ldr	r1, [r6, #32]
   1d5d4:	cmp	r1, #0
   1d5d8:	beq	1d630 <__assert_fail@plt+0xb5a4>
   1d5dc:	ldr	r0, [r6, #36]	; 0x24
   1d5e0:	cmp	r1, #2
   1d5e4:	beq	1d600 <__assert_fail@plt+0xb574>
   1d5e8:	cmp	r1, #1
   1d5ec:	bne	1d618 <__assert_fail@plt+0xb58c>
   1d5f0:	ldrb	r0, [r0]
   1d5f4:	cmp	r0, #48	; 0x30
   1d5f8:	bne	1d618 <__assert_fail@plt+0xb58c>
   1d5fc:	b	1d630 <__assert_fail@plt+0xb5a4>
   1d600:	movw	r1, #52640	; 0xcda0
   1d604:	mov	r2, #2
   1d608:	movt	r1, #2
   1d60c:	bl	1202c <strncmp@plt>
   1d610:	cmp	r0, #0
   1d614:	beq	1d630 <__assert_fail@plt+0xb5a4>
   1d618:	mov	r0, r6
   1d61c:	bl	19174 <__assert_fail@plt+0x70e8>
   1d620:	add	r0, r6, #32
   1d624:	bl	19174 <__assert_fail@plt+0x70e8>
   1d628:	add	r0, r6, #8
   1d62c:	bl	19174 <__assert_fail@plt+0x70e8>
   1d630:	ldrb	r0, [r7, #15]
   1d634:	cmp	r0, #1
   1d638:	bne	1d738 <__assert_fail@plt+0xb6ac>
   1d63c:	movw	r0, #4816	; 0x12d0
   1d640:	ldr	r1, [r7, #40]	; 0x28
   1d644:	movw	r3, #54082	; 0xd342
   1d648:	movt	r0, #4
   1d64c:	movt	r3, #2
   1d650:	ldr	r0, [r0, #16]
   1d654:	subs	r6, r1, #4
   1d658:	movne	r6, r0
   1d65c:	ldrb	r0, [r4, #132]	; 0x84
   1d660:	cmp	r0, #0
   1d664:	addne	r0, r4, #112	; 0x70
   1d668:	ldrdne	r0, [r0]
   1d66c:	orrsne	r2, r0, r1
   1d670:	beq	1d680 <__assert_fail@plt+0xb5f4>
   1d674:	add	r2, sp, #20
   1d678:	bl	23040 <__assert_fail@plt+0x10fb4>
   1d67c:	mov	r3, r0
   1d680:	movw	r1, #54575	; 0xd52f
   1d684:	mov	r0, #1
   1d688:	mov	r2, r6
   1d68c:	movt	r1, #2
   1d690:	bl	11f00 <__printf_chk@plt>
   1d694:	ldrb	r0, [r7, #8]
   1d698:	cmp	r0, #1
   1d69c:	beq	1d744 <__assert_fail@plt+0xb6b8>
   1d6a0:	ldrb	r0, [r7, #7]
   1d6a4:	cmp	r0, #1
   1d6a8:	bne	1d6d8 <__assert_fail@plt+0xb64c>
   1d6ac:	movw	r0, #4816	; 0x12d0
   1d6b0:	ldr	r1, [r7, #40]	; 0x28
   1d6b4:	ldr	r3, [r4, #128]	; 0x80
   1d6b8:	movt	r0, #4
   1d6bc:	ldr	r0, [r0, #40]	; 0x28
   1d6c0:	subs	r2, r1, #4
   1d6c4:	movw	r1, #54575	; 0xd52f
   1d6c8:	movt	r1, #2
   1d6cc:	movne	r2, r0
   1d6d0:	mov	r0, #1
   1d6d4:	bl	11f00 <__printf_chk@plt>
   1d6d8:	mov	r0, r4
   1d6dc:	mov	r1, #0
   1d6e0:	mov	r2, #0
   1d6e4:	mov	r3, sl
   1d6e8:	bl	1da24 <__assert_fail@plt+0xb998>
   1d6ec:	ldr	r2, [r7, #48]	; 0x30
   1d6f0:	cmp	r2, #0
   1d6f4:	beq	1d864 <__assert_fail@plt+0xb7d8>
   1d6f8:	ldrb	r7, [r4, #132]	; 0x84
   1d6fc:	ldr	r3, [r4, #32]
   1d700:	ldr	r0, [r4, #120]	; 0x78
   1d704:	cmp	r7, #0
   1d708:	beq	1d7a8 <__assert_fail@plt+0xb71c>
   1d70c:	and	r1, r3, #61440	; 0xf000
   1d710:	cmp	r1, #16384	; 0x4000
   1d714:	beq	1d820 <__assert_fail@plt+0xb794>
   1d718:	cmp	r1, #32768	; 0x8000
   1d71c:	bne	1d7c4 <__assert_fail@plt+0xb738>
   1d720:	tst	r3, #73	; 0x49
   1d724:	beq	1d864 <__assert_fail@plt+0xb7d8>
   1d728:	mov	r1, #42	; 0x2a
   1d72c:	cmp	r2, #3
   1d730:	beq	1d824 <__assert_fail@plt+0xb798>
   1d734:	b	1d864 <__assert_fail@plt+0xb7d8>
   1d738:	ldrb	r0, [r7, #8]
   1d73c:	cmp	r0, #1
   1d740:	bne	1d6a0 <__assert_fail@plt+0xb614>
   1d744:	movw	r0, #4816	; 0x12d0
   1d748:	ldr	r2, [r7, #40]	; 0x28
   1d74c:	movt	r0, #4
   1d750:	ldr	r1, [r0, #20]
   1d754:	subs	r6, r2, #4
   1d758:	movne	r6, r1
   1d75c:	ldrb	r1, [r4, #132]	; 0x84
   1d760:	cmp	r1, #0
   1d764:	beq	1d7f4 <__assert_fail@plt+0xb768>
   1d768:	add	r1, r4, #80	; 0x50
   1d76c:	ldr	r3, [r7, #100]	; 0x64
   1d770:	mov	r2, #0
   1d774:	mov	r5, #512	; 0x200
   1d778:	ldrd	r8, [r1]
   1d77c:	ldrd	r0, [r0, #88]	; 0x58
   1d780:	str	r2, [sp, #4]
   1d784:	add	r2, sp, #20
   1d788:	str	r5, [sp]
   1d78c:	str	r0, [sp, #8]
   1d790:	str	r1, [sp, #12]
   1d794:	mov	r0, r8
   1d798:	mov	r1, r9
   1d79c:	bl	21b38 <__assert_fail@plt+0xfaac>
   1d7a0:	mov	r3, r0
   1d7a4:	b	1d7fc <__assert_fail@plt+0xb770>
   1d7a8:	mov	r1, #47	; 0x2f
   1d7ac:	cmp	r0, #3
   1d7b0:	beq	1d824 <__assert_fail@plt+0xb798>
   1d7b4:	cmp	r0, #5
   1d7b8:	beq	1d864 <__assert_fail@plt+0xb7d8>
   1d7bc:	cmp	r0, #9
   1d7c0:	beq	1d824 <__assert_fail@plt+0xb798>
   1d7c4:	cmp	r2, #1
   1d7c8:	beq	1d864 <__assert_fail@plt+0xb7d8>
   1d7cc:	cmp	r7, #0
   1d7d0:	beq	1d86c <__assert_fail@plt+0xb7e0>
   1d7d4:	and	r0, r3, #61440	; 0xf000
   1d7d8:	cmp	r0, #4096	; 0x1000
   1d7dc:	beq	1d884 <__assert_fail@plt+0xb7f8>
   1d7e0:	cmp	r0, #40960	; 0xa000
   1d7e4:	beq	1d894 <__assert_fail@plt+0xb808>
   1d7e8:	cmp	r0, #49152	; 0xc000
   1d7ec:	bne	1d864 <__assert_fail@plt+0xb7d8>
   1d7f0:	b	1d88c <__assert_fail@plt+0xb800>
   1d7f4:	movw	r3, #54082	; 0xd342
   1d7f8:	movt	r3, #2
   1d7fc:	movw	r1, #54575	; 0xd52f
   1d800:	mov	r0, #1
   1d804:	mov	r2, r6
   1d808:	movt	r1, #2
   1d80c:	bl	11f00 <__printf_chk@plt>
   1d810:	ldrb	r0, [r7, #7]
   1d814:	cmp	r0, #1
   1d818:	beq	1d6ac <__assert_fail@plt+0xb620>
   1d81c:	b	1d6d8 <__assert_fail@plt+0xb64c>
   1d820:	mov	r1, #47	; 0x2f
   1d824:	movw	r0, #4816	; 0x12d0
   1d828:	movt	r0, #4
   1d82c:	ldrd	r2, [r0, #80]	; 0x50
   1d830:	adds	r2, r2, #1
   1d834:	adc	r3, r3, #0
   1d838:	strd	r2, [r0, #80]	; 0x50
   1d83c:	movw	r0, #780	; 0x30c
   1d840:	movt	r0, #4
   1d844:	ldr	r0, [r0]
   1d848:	ldr	r2, [r0, #20]
   1d84c:	ldr	r3, [r0, #24]
   1d850:	cmp	r2, r3
   1d854:	bcs	1d89c <__assert_fail@plt+0xb810>
   1d858:	add	r3, r2, #1
   1d85c:	str	r3, [r0, #20]
   1d860:	strb	r1, [r2]
   1d864:	sub	sp, fp, #28
   1d868:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1d86c:	cmp	r0, #7
   1d870:	beq	1d88c <__assert_fail@plt+0xb800>
   1d874:	cmp	r0, #6
   1d878:	beq	1d894 <__assert_fail@plt+0xb808>
   1d87c:	cmp	r0, #1
   1d880:	bne	1d864 <__assert_fail@plt+0xb7d8>
   1d884:	mov	r1, #124	; 0x7c
   1d888:	b	1d824 <__assert_fail@plt+0xb798>
   1d88c:	mov	r1, #61	; 0x3d
   1d890:	b	1d824 <__assert_fail@plt+0xb798>
   1d894:	mov	r1, #64	; 0x40
   1d898:	b	1d824 <__assert_fail@plt+0xb798>
   1d89c:	bl	11f54 <__overflow@plt>
   1d8a0:	sub	sp, fp, #28
   1d8a4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1d8a8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1d8ac:	add	fp, sp, #28
   1d8b0:	push	{r0}		; (str r0, [sp, #-4]!)
   1d8b4:	movw	sl, #4688	; 0x1250
   1d8b8:	movt	sl, #4
   1d8bc:	ldr	r0, [sl, #76]	; 0x4c
   1d8c0:	cmp	r0, #0
   1d8c4:	beq	1d9dc <__assert_fail@plt+0xb950>
   1d8c8:	mov	r9, #0
   1d8cc:	mov	r7, #0
   1d8d0:	b	1d8f8 <__assert_fail@plt+0xb86c>
   1d8d4:	mov	r8, r7
   1d8d8:	mov	r0, r5
   1d8dc:	mov	r1, r8
   1d8e0:	bl	1d5a0 <__assert_fail@plt+0xb514>
   1d8e4:	ldr	r0, [sl, #76]	; 0x4c
   1d8e8:	add	r9, r9, #1
   1d8ec:	add	r7, r8, r6
   1d8f0:	cmp	r9, r0
   1d8f4:	bcs	1d9dc <__assert_fail@plt+0xb950>
   1d8f8:	movw	r0, #4816	; 0x12d0
   1d8fc:	mov	r6, #0
   1d900:	movt	r0, #4
   1d904:	ldr	r0, [r0, #12]
   1d908:	ldr	r5, [r0, r9, lsl #2]
   1d90c:	ldr	r0, [sl, #112]	; 0x70
   1d910:	cmp	r0, #0
   1d914:	beq	1d924 <__assert_fail@plt+0xb898>
   1d918:	mov	r0, r5
   1d91c:	bl	1e144 <__assert_fail@plt+0xc0b8>
   1d920:	mov	r6, r0
   1d924:	cmp	r9, #0
   1d928:	beq	1d8d4 <__assert_fail@plt+0xb848>
   1d92c:	ldr	r0, [sl, #112]	; 0x70
   1d930:	add	r8, r7, #2
   1d934:	mov	r4, #32
   1d938:	cmp	r0, #0
   1d93c:	beq	1d96c <__assert_fail@plt+0xb8e0>
   1d940:	mvn	r1, #2
   1d944:	sub	r1, r1, r6
   1d948:	cmp	r7, r1
   1d94c:	addls	r1, r8, r6
   1d950:	cmpls	r1, r0
   1d954:	bcc	1d96c <__assert_fail@plt+0xb8e0>
   1d958:	ldrb	r0, [sl, #20]
   1d95c:	mov	r4, #10
   1d960:	mov	r8, #0
   1d964:	cmp	r0, #0
   1d968:	movwne	r4, #0
   1d96c:	movw	r0, #780	; 0x30c
   1d970:	movt	r0, #4
   1d974:	ldr	r0, [r0]
   1d978:	ldr	r1, [r0, #20]
   1d97c:	ldr	r2, [r0, #24]
   1d980:	cmp	r1, r2
   1d984:	bcs	1d9c4 <__assert_fail@plt+0xb938>
   1d988:	add	r2, r1, #1
   1d98c:	str	r2, [r0, #20]
   1d990:	ldr	r0, [sp]
   1d994:	strb	r0, [r1]
   1d998:	movw	r0, #780	; 0x30c
   1d99c:	movt	r0, #4
   1d9a0:	ldr	r0, [r0]
   1d9a4:	ldr	r1, [r0, #20]
   1d9a8:	ldr	r2, [r0, #24]
   1d9ac:	cmp	r1, r2
   1d9b0:	bcs	1d9d0 <__assert_fail@plt+0xb944>
   1d9b4:	add	r2, r1, #1
   1d9b8:	str	r2, [r0, #20]
   1d9bc:	strb	r4, [r1]
   1d9c0:	b	1d8d8 <__assert_fail@plt+0xb84c>
   1d9c4:	ldr	r1, [sp]
   1d9c8:	bl	11f54 <__overflow@plt>
   1d9cc:	b	1d998 <__assert_fail@plt+0xb90c>
   1d9d0:	mov	r1, r4
   1d9d4:	bl	11f54 <__overflow@plt>
   1d9d8:	b	1d8d8 <__assert_fail@plt+0xb84c>
   1d9dc:	ldrb	r0, [sl, #20]
   1d9e0:	mov	r1, #10
   1d9e4:	cmp	r0, #0
   1d9e8:	movw	r0, #780	; 0x30c
   1d9ec:	movt	r0, #4
   1d9f0:	movwne	r1, #0
   1d9f4:	ldr	r0, [r0]
   1d9f8:	ldr	r2, [r0, #20]
   1d9fc:	ldr	r3, [r0, #24]
   1da00:	cmp	r2, r3
   1da04:	addcc	r3, r2, #1
   1da08:	strcc	r3, [r0, #20]
   1da0c:	strbcc	r1, [r2]
   1da10:	subcc	sp, fp, #28
   1da14:	popcc	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1da18:	sub	sp, fp, #28
   1da1c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1da20:	b	11f54 <__overflow@plt>
   1da24:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1da28:	add	fp, sp, #28
   1da2c:	sub	sp, sp, #28
   1da30:	movw	r5, #4688	; 0x1250
   1da34:	cmp	r1, #0
   1da38:	mov	sl, r0
   1da3c:	mov	r7, r1
   1da40:	movw	r9, #456	; 0x1c8
   1da44:	mov	r8, r3
   1da48:	mov	r4, r2
   1da4c:	movt	r5, #4
   1da50:	addne	r0, r0, #4
   1da54:	movt	r9, #4
   1da58:	ldr	r1, [r0]
   1da5c:	ldrb	r0, [r5, #1]
   1da60:	str	r1, [sp, #24]
   1da64:	cmp	r0, #0
   1da68:	beq	1e074 <__assert_fail@plt+0xbfe8>
   1da6c:	cmp	r7, #0
   1da70:	str	r4, [sp, #16]
   1da74:	beq	1dad0 <__assert_fail@plt+0xba44>
   1da78:	ldrb	r0, [sl, #133]	; 0x85
   1da7c:	ldr	r3, [sl, #4]
   1da80:	ldr	r4, [sl, #124]	; 0x7c
   1da84:	mov	r6, #0
   1da88:	cmp	r0, #0
   1da8c:	bne	1daf4 <__assert_fail@plt+0xba68>
   1da90:	ldr	r1, [r9, #96]	; 0x60
   1da94:	mvn	r6, #0
   1da98:	cmp	r1, #0
   1da9c:	beq	1daf4 <__assert_fail@plt+0xba68>
   1daa0:	ldr	r0, [r9, #100]	; 0x64
   1daa4:	mov	r5, #12
   1daa8:	cmp	r1, #2
   1daac:	beq	1dcec <__assert_fail@plt+0xbc60>
   1dab0:	mov	r2, #0
   1dab4:	cmp	r1, #1
   1dab8:	str	r2, [sp, #20]
   1dabc:	bne	1dffc <__assert_fail@plt+0xbf70>
   1dac0:	ldrb	r0, [r0]
   1dac4:	cmp	r0, #48	; 0x30
   1dac8:	beq	1daf4 <__assert_fail@plt+0xba68>
   1dacc:	b	1dffc <__assert_fail@plt+0xbf70>
   1dad0:	ldrb	r0, [r5, #4]
   1dad4:	ldrb	r6, [sl, #133]	; 0x85
   1dad8:	mov	r1, #32
   1dadc:	ldr	r3, [sl]
   1dae0:	cmp	r0, #0
   1dae4:	movwne	r1, #124	; 0x7c
   1dae8:	cmp	r6, #0
   1daec:	movweq	r1, #32
   1daf0:	ldr	r4, [sl, r1]
   1daf4:	ldrb	r0, [sl, #132]	; 0x84
   1daf8:	cmp	r0, #0
   1dafc:	beq	1db64 <__assert_fail@plt+0xbad8>
   1db00:	and	r0, r4, #61440	; 0xf000
   1db04:	sub	r0, r0, #4096	; 0x1000
   1db08:	lsr	r1, r0, #12
   1db0c:	mov	r0, #0
   1db10:	cmp	r1, #11
   1db14:	str	r0, [sp, #20]
   1db18:	bhi	1dc44 <__assert_fail@plt+0xbbb8>
   1db1c:	add	r2, pc, #8
   1db20:	mov	r5, #8
   1db24:	mov	r0, #7
   1db28:	ldr	pc, [r2, r1, lsl #2]
   1db2c:	strdeq	sp, [r1], -ip
   1db30:	andeq	sp, r1, ip, asr fp
   1db34:	andeq	sp, r1, r4, asr #24
   1db38:	andeq	sp, r1, ip, asr #24
   1db3c:	andeq	sp, r1, r4, asr #24
   1db40:	andeq	sp, r1, r0, lsr #25
   1db44:	andeq	sp, r1, r4, asr #24
   1db48:	andeq	sp, r1, r8, lsr #25
   1db4c:	andeq	sp, r1, r4, asr #24
   1db50:	andeq	sp, r1, ip, lsl #24
   1db54:	andeq	sp, r1, r4, asr #24
   1db58:	andeq	sp, r1, r4, ror #25
   1db5c:	mov	r5, #11
   1db60:	b	1dffc <__assert_fail@plt+0xbf70>
   1db64:	ldr	r0, [sl, #120]	; 0x78
   1db68:	cmp	r0, #8
   1db6c:	cmpne	r0, #5
   1db70:	bne	1dc00 <__assert_fail@plt+0xbb74>
   1db74:	mov	r0, r3
   1db78:	mov	r9, r8
   1db7c:	mov	r6, r3
   1db80:	bl	11eac <strlen@plt>
   1db84:	mov	r8, r0
   1db88:	movw	r0, #4816	; 0x12d0
   1db8c:	mov	r5, #5
   1db90:	movt	r0, #4
   1db94:	ldr	r4, [r0, #8]
   1db98:	mov	r0, #0
   1db9c:	cmp	r4, #0
   1dba0:	beq	1dbec <__assert_fail@plt+0xbb60>
   1dba4:	add	r6, r6, r8
   1dba8:	str	r0, [sp, #20]
   1dbac:	ldr	r2, [r4]
   1dbb0:	cmp	r2, r8
   1dbb4:	bls	1dbd0 <__assert_fail@plt+0xbb44>
   1dbb8:	ldr	r4, [r4, #16]
   1dbbc:	cmp	r4, #0
   1dbc0:	beq	1dbf0 <__assert_fail@plt+0xbb64>
   1dbc4:	ldr	r2, [r4]
   1dbc8:	cmp	r2, r8
   1dbcc:	bhi	1dbb8 <__assert_fail@plt+0xbb2c>
   1dbd0:	ldr	r1, [r4, #4]
   1dbd4:	sub	r0, r6, r2
   1dbd8:	bl	1f33c <__assert_fail@plt+0xd2b0>
   1dbdc:	cmp	r0, #0
   1dbe0:	bne	1dbb8 <__assert_fail@plt+0xbb2c>
   1dbe4:	str	r4, [sp, #20]
   1dbe8:	b	1dbf0 <__assert_fail@plt+0xbb64>
   1dbec:	str	r0, [sp, #20]
   1dbf0:	mov	r8, r9
   1dbf4:	movw	r9, #456	; 0x1c8
   1dbf8:	movt	r9, #4
   1dbfc:	b	1dffc <__assert_fail@plt+0xbf70>
   1dc00:	movw	r1, #60832	; 0xeda0
   1dc04:	movt	r1, #2
   1dc08:	ldr	r0, [r1, r0, lsl #2]
   1dc0c:	cmp	r6, #0
   1dc10:	cmpeq	r0, #7
   1dc14:	beq	1dc28 <__assert_fail@plt+0xbb9c>
   1dc18:	mov	r1, #0
   1dc1c:	mov	r5, r0
   1dc20:	str	r1, [sp, #20]
   1dc24:	b	1dffc <__assert_fail@plt+0xbf70>
   1dc28:	mov	r0, #0
   1dc2c:	str	r0, [sp, #20]
   1dc30:	movw	r0, #4688	; 0x1250
   1dc34:	movt	r0, #4
   1dc38:	ldrb	r0, [r0, #4]
   1dc3c:	cmp	r0, #0
   1dc40:	beq	1dd18 <__assert_fail@plt+0xbc8c>
   1dc44:	mov	r5, #13
   1dc48:	b	1dffc <__assert_fail@plt+0xbf70>
   1dc4c:	and	r6, r4, #512	; 0x200
   1dc50:	mov	r0, #1
   1dc54:	str	r8, [sp, #12]
   1dc58:	ands	r4, r4, #2
   1dc5c:	eor	r8, r0, r6, lsr #9
   1dc60:	beq	1dd80 <__assert_fail@plt+0xbcf4>
   1dc64:	cmp	r8, #0
   1dc68:	bne	1dd80 <__assert_fail@plt+0xbcf4>
   1dc6c:	ldr	r1, [r9, #160]	; 0xa0
   1dc70:	cmp	r1, #0
   1dc74:	beq	1dd80 <__assert_fail@plt+0xbcf4>
   1dc78:	ldr	r0, [r9, #164]	; 0xa4
   1dc7c:	mov	r5, #20
   1dc80:	cmp	r1, #2
   1dc84:	beq	1dd68 <__assert_fail@plt+0xbcdc>
   1dc88:	cmp	r1, #1
   1dc8c:	bne	1de98 <__assert_fail@plt+0xbe0c>
   1dc90:	ldrb	r0, [r0]
   1dc94:	cmp	r0, #48	; 0x30
   1dc98:	beq	1dd80 <__assert_fail@plt+0xbcf4>
   1dc9c:	b	1de98 <__assert_fail@plt+0xbe0c>
   1dca0:	mov	r5, #10
   1dca4:	b	1dffc <__assert_fail@plt+0xbf70>
   1dca8:	tst	r4, #2048	; 0x800
   1dcac:	beq	1de34 <__assert_fail@plt+0xbda8>
   1dcb0:	ldr	r1, [r9, #128]	; 0x80
   1dcb4:	cmp	r1, #0
   1dcb8:	beq	1de34 <__assert_fail@plt+0xbda8>
   1dcbc:	ldr	r0, [r9, #132]	; 0x84
   1dcc0:	mov	r5, #16
   1dcc4:	cmp	r1, #2
   1dcc8:	beq	1de14 <__assert_fail@plt+0xbd88>
   1dccc:	cmp	r1, #1
   1dcd0:	bne	1dffc <__assert_fail@plt+0xbf70>
   1dcd4:	ldrb	r0, [r0]
   1dcd8:	cmp	r0, #48	; 0x30
   1dcdc:	beq	1de34 <__assert_fail@plt+0xbda8>
   1dce0:	b	1dffc <__assert_fail@plt+0xbf70>
   1dce4:	mov	r5, #9
   1dce8:	b	1dffc <__assert_fail@plt+0xbf70>
   1dcec:	mov	r1, #0
   1dcf0:	mov	r2, #2
   1dcf4:	str	r3, [sp, #12]
   1dcf8:	str	r1, [sp, #20]
   1dcfc:	movw	r1, #52640	; 0xcda0
   1dd00:	movt	r1, #2
   1dd04:	bl	1202c <strncmp@plt>
   1dd08:	ldr	r3, [sp, #12]
   1dd0c:	cmp	r0, #0
   1dd10:	bne	1dffc <__assert_fail@plt+0xbf70>
   1dd14:	b	1daf4 <__assert_fail@plt+0xba68>
   1dd18:	ldr	r1, [r9, #104]	; 0x68
   1dd1c:	mov	r5, #7
   1dd20:	cmp	r1, #0
   1dd24:	beq	1dffc <__assert_fail@plt+0xbf70>
   1dd28:	ldr	r0, [r9, #108]	; 0x6c
   1dd2c:	cmp	r1, #2
   1dd30:	beq	1dd4c <__assert_fail@plt+0xbcc0>
   1dd34:	cmp	r1, #1
   1dd38:	bne	1dc44 <__assert_fail@plt+0xbbb8>
   1dd3c:	ldrb	r0, [r0]
   1dd40:	cmp	r0, #48	; 0x30
   1dd44:	movne	r5, #13
   1dd48:	b	1dffc <__assert_fail@plt+0xbf70>
   1dd4c:	movw	r1, #52640	; 0xcda0
   1dd50:	mov	r2, #2
   1dd54:	movt	r1, #2
   1dd58:	bl	1202c <strncmp@plt>
   1dd5c:	cmp	r0, #0
   1dd60:	bne	1dc44 <__assert_fail@plt+0xbbb8>
   1dd64:	b	1dffc <__assert_fail@plt+0xbf70>
   1dd68:	movw	r1, #52640	; 0xcda0
   1dd6c:	mov	r2, #2
   1dd70:	movt	r1, #2
   1dd74:	bl	1202c <strncmp@plt>
   1dd78:	cmp	r0, #0
   1dd7c:	bne	1de98 <__assert_fail@plt+0xbe0c>
   1dd80:	cmp	r4, #0
   1dd84:	beq	1ddd0 <__assert_fail@plt+0xbd44>
   1dd88:	ldr	r1, [r9, #152]	; 0x98
   1dd8c:	cmp	r1, #0
   1dd90:	beq	1ddd0 <__assert_fail@plt+0xbd44>
   1dd94:	ldr	r0, [r9, #156]	; 0x9c
   1dd98:	cmp	r1, #2
   1dd9c:	beq	1de70 <__assert_fail@plt+0xbde4>
   1dda0:	mov	r5, #19
   1dda4:	cmp	r1, #1
   1dda8:	bne	1de98 <__assert_fail@plt+0xbe0c>
   1ddac:	ldrb	r0, [r0]
   1ddb0:	mov	r5, #6
   1ddb4:	cmp	r0, #48	; 0x30
   1ddb8:	movwne	r5, #19
   1ddbc:	subs	r0, r0, #48	; 0x30
   1ddc0:	movwne	r0, #1
   1ddc4:	orrs	r0, r0, r8
   1ddc8:	beq	1dddc <__assert_fail@plt+0xbd50>
   1ddcc:	b	1de98 <__assert_fail@plt+0xbe0c>
   1ddd0:	mov	r5, #6
   1ddd4:	cmp	r6, #0
   1ddd8:	beq	1de98 <__assert_fail@plt+0xbe0c>
   1dddc:	ldr	r1, [r9, #144]	; 0x90
   1dde0:	ldr	r8, [sp, #12]
   1dde4:	mov	r5, #6
   1dde8:	cmp	r1, #0
   1ddec:	beq	1dffc <__assert_fail@plt+0xbf70>
   1ddf0:	ldr	r0, [r9, #148]	; 0x94
   1ddf4:	cmp	r1, #2
   1ddf8:	beq	1df5c <__assert_fail@plt+0xbed0>
   1ddfc:	cmp	r1, #1
   1de00:	bne	1df74 <__assert_fail@plt+0xbee8>
   1de04:	ldrb	r0, [r0]
   1de08:	cmp	r0, #48	; 0x30
   1de0c:	movne	r5, #18
   1de10:	b	1dffc <__assert_fail@plt+0xbf70>
   1de14:	movw	r1, #52640	; 0xcda0
   1de18:	mov	r2, #2
   1de1c:	mov	r6, r3
   1de20:	movt	r1, #2
   1de24:	bl	1202c <strncmp@plt>
   1de28:	mov	r3, r6
   1de2c:	cmp	r0, #0
   1de30:	bne	1dffc <__assert_fail@plt+0xbf70>
   1de34:	tst	r4, #1024	; 0x400
   1de38:	beq	1dec0 <__assert_fail@plt+0xbe34>
   1de3c:	ldr	r1, [r9, #136]	; 0x88
   1de40:	cmp	r1, #0
   1de44:	beq	1dec0 <__assert_fail@plt+0xbe34>
   1de48:	ldr	r0, [r9, #140]	; 0x8c
   1de4c:	mov	r5, #17
   1de50:	cmp	r1, #2
   1de54:	beq	1dea0 <__assert_fail@plt+0xbe14>
   1de58:	cmp	r1, #1
   1de5c:	bne	1dffc <__assert_fail@plt+0xbf70>
   1de60:	ldrb	r0, [r0]
   1de64:	cmp	r0, #48	; 0x30
   1de68:	beq	1dec0 <__assert_fail@plt+0xbe34>
   1de6c:	b	1dffc <__assert_fail@plt+0xbf70>
   1de70:	movw	r1, #52640	; 0xcda0
   1de74:	mov	r2, #2
   1de78:	movt	r1, #2
   1de7c:	bl	1202c <strncmp@plt>
   1de80:	cmp	r0, #0
   1de84:	mov	r5, #6
   1de88:	movwne	r0, #1
   1de8c:	movwne	r5, #19
   1de90:	orrs	r0, r0, r8
   1de94:	beq	1dddc <__assert_fail@plt+0xbd50>
   1de98:	ldr	r8, [sp, #12]
   1de9c:	b	1dffc <__assert_fail@plt+0xbf70>
   1dea0:	movw	r1, #52640	; 0xcda0
   1dea4:	mov	r2, #2
   1dea8:	mov	r6, r3
   1deac:	movt	r1, #2
   1deb0:	bl	1202c <strncmp@plt>
   1deb4:	mov	r3, r6
   1deb8:	cmp	r0, #0
   1debc:	bne	1dffc <__assert_fail@plt+0xbf70>
   1dec0:	ldr	r1, [r9, #168]	; 0xa8
   1dec4:	cmp	r1, #0
   1dec8:	beq	1df20 <__assert_fail@plt+0xbe94>
   1decc:	ldr	r0, [r9, #172]	; 0xac
   1ded0:	cmp	r1, #2
   1ded4:	beq	1def0 <__assert_fail@plt+0xbe64>
   1ded8:	cmp	r1, #1
   1dedc:	bne	1df10 <__assert_fail@plt+0xbe84>
   1dee0:	ldrb	r0, [r0]
   1dee4:	cmp	r0, #48	; 0x30
   1dee8:	bne	1df10 <__assert_fail@plt+0xbe84>
   1deec:	b	1df20 <__assert_fail@plt+0xbe94>
   1def0:	movw	r1, #52640	; 0xcda0
   1def4:	mov	r2, #2
   1def8:	mov	r5, r3
   1defc:	movt	r1, #2
   1df00:	bl	1202c <strncmp@plt>
   1df04:	mov	r3, r5
   1df08:	cmp	r0, #0
   1df0c:	beq	1df20 <__assert_fail@plt+0xbe94>
   1df10:	ldrb	r0, [sl, #140]	; 0x8c
   1df14:	mov	r5, #21
   1df18:	cmp	r0, #0
   1df1c:	bne	1dffc <__assert_fail@plt+0xbf70>
   1df20:	tst	r4, #73	; 0x49
   1df24:	beq	1df9c <__assert_fail@plt+0xbf10>
   1df28:	ldr	r1, [r9, #112]	; 0x70
   1df2c:	cmp	r1, #0
   1df30:	beq	1df9c <__assert_fail@plt+0xbf10>
   1df34:	ldr	r0, [r9, #116]	; 0x74
   1df38:	mov	r5, #14
   1df3c:	cmp	r1, #2
   1df40:	beq	1df7c <__assert_fail@plt+0xbef0>
   1df44:	cmp	r1, #1
   1df48:	bne	1dffc <__assert_fail@plt+0xbf70>
   1df4c:	ldrb	r0, [r0]
   1df50:	cmp	r0, #48	; 0x30
   1df54:	beq	1df9c <__assert_fail@plt+0xbf10>
   1df58:	b	1dffc <__assert_fail@plt+0xbf70>
   1df5c:	movw	r1, #52640	; 0xcda0
   1df60:	mov	r2, #2
   1df64:	movt	r1, #2
   1df68:	bl	1202c <strncmp@plt>
   1df6c:	cmp	r0, #0
   1df70:	beq	1dffc <__assert_fail@plt+0xbf70>
   1df74:	mov	r5, #18
   1df78:	b	1dffc <__assert_fail@plt+0xbf70>
   1df7c:	movw	r1, #52640	; 0xcda0
   1df80:	mov	r2, #2
   1df84:	mov	r4, r3
   1df88:	movt	r1, #2
   1df8c:	bl	1202c <strncmp@plt>
   1df90:	mov	r3, r4
   1df94:	cmp	r0, #0
   1df98:	bne	1dffc <__assert_fail@plt+0xbf70>
   1df9c:	ldr	r0, [sl, #36]	; 0x24
   1dfa0:	cmp	r0, #2
   1dfa4:	bcc	1db74 <__assert_fail@plt+0xbae8>
   1dfa8:	ldr	r1, [r9, #176]	; 0xb0
   1dfac:	cmp	r1, #0
   1dfb0:	beq	1db74 <__assert_fail@plt+0xbae8>
   1dfb4:	ldr	r0, [r9, #180]	; 0xb4
   1dfb8:	mov	r5, #22
   1dfbc:	cmp	r1, #2
   1dfc0:	beq	1dfdc <__assert_fail@plt+0xbf50>
   1dfc4:	cmp	r1, #1
   1dfc8:	bne	1dffc <__assert_fail@plt+0xbf70>
   1dfcc:	ldrb	r0, [r0]
   1dfd0:	cmp	r0, #48	; 0x30
   1dfd4:	beq	1db74 <__assert_fail@plt+0xbae8>
   1dfd8:	b	1dffc <__assert_fail@plt+0xbf70>
   1dfdc:	movw	r1, #52640	; 0xcda0
   1dfe0:	mov	r2, #2
   1dfe4:	mov	r4, r3
   1dfe8:	movt	r1, #2
   1dfec:	bl	1202c <strncmp@plt>
   1dff0:	mov	r3, r4
   1dff4:	cmp	r0, #0
   1dff8:	beq	1db74 <__assert_fail@plt+0xbae8>
   1dffc:	ldr	r0, [sp, #20]
   1e000:	ldr	r4, [sp, #16]
   1e004:	mov	r6, #1
   1e008:	cmp	r0, #0
   1e00c:	add	r3, r0, #8
   1e010:	addeq	r3, r9, r5, lsl #3
   1e014:	ldr	r0, [r3, #4]
   1e018:	cmp	r0, #0
   1e01c:	beq	1e02c <__assert_fail@plt+0xbfa0>
   1e020:	movw	r5, #4688	; 0x1250
   1e024:	movt	r5, #4
   1e028:	b	1e07c <__assert_fail@plt+0xbff0>
   1e02c:	ldr	r1, [r9, #32]
   1e030:	movw	r5, #4688	; 0x1250
   1e034:	movt	r5, #4
   1e038:	cmp	r1, #0
   1e03c:	beq	1e074 <__assert_fail@plt+0xbfe8>
   1e040:	ldr	r0, [r9, #36]	; 0x24
   1e044:	cmp	r1, #2
   1e048:	beq	1e120 <__assert_fail@plt+0xc094>
   1e04c:	cmp	r1, #1
   1e050:	bne	1e068 <__assert_fail@plt+0xbfdc>
   1e054:	ldrb	r0, [r0]
   1e058:	mov	r3, #0
   1e05c:	mov	r6, #0
   1e060:	cmp	r0, #48	; 0x30
   1e064:	beq	1e07c <__assert_fail@plt+0xbff0>
   1e068:	mov	r3, #0
   1e06c:	mov	r6, #1
   1e070:	b	1e07c <__assert_fail@plt+0xbff0>
   1e074:	mov	r3, #0
   1e078:	mov	r6, #0
   1e07c:	ldr	r0, [sl, #8]
   1e080:	ldr	r2, [sl, #144]	; 0x90
   1e084:	ldr	r1, [r5, #88]	; 0x58
   1e088:	eor	r7, r7, #1
   1e08c:	str	r4, [sp, #4]
   1e090:	str	r7, [sp]
   1e094:	str	r0, [sp, #8]
   1e098:	ldr	r0, [sp, #24]
   1e09c:	bl	1a19c <__assert_fail@plt+0x8110>
   1e0a0:	mov	r4, r0
   1e0a4:	bl	1a6a8 <__assert_fail@plt+0x861c>
   1e0a8:	cmp	r6, #0
   1e0ac:	beq	1e0ec <__assert_fail@plt+0xc060>
   1e0b0:	ldr	r0, [r9, #20]
   1e0b4:	cmp	r0, #0
   1e0b8:	beq	1e0f8 <__assert_fail@plt+0xc06c>
   1e0bc:	add	r0, r9, #16
   1e0c0:	bl	19174 <__assert_fail@plt+0x70e8>
   1e0c4:	ldr	r0, [r5, #112]	; 0x70
   1e0c8:	cmp	r0, #0
   1e0cc:	beq	1e0ec <__assert_fail@plt+0xc060>
   1e0d0:	add	r2, r8, r4
   1e0d4:	udiv	r1, r8, r0
   1e0d8:	sub	r2, r2, #1
   1e0dc:	udiv	r0, r2, r0
   1e0e0:	cmp	r1, r0
   1e0e4:	addne	r0, r9, #184	; 0xb8
   1e0e8:	blne	19174 <__assert_fail@plt+0x70e8>
   1e0ec:	mov	r0, r4
   1e0f0:	sub	sp, fp, #28
   1e0f4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1e0f8:	mov	r0, r9
   1e0fc:	bl	19174 <__assert_fail@plt+0x70e8>
   1e100:	add	r0, r9, #24
   1e104:	bl	19174 <__assert_fail@plt+0x70e8>
   1e108:	add	r0, r9, #8
   1e10c:	bl	19174 <__assert_fail@plt+0x70e8>
   1e110:	ldr	r0, [r5, #112]	; 0x70
   1e114:	cmp	r0, #0
   1e118:	bne	1e0d0 <__assert_fail@plt+0xc044>
   1e11c:	b	1e0ec <__assert_fail@plt+0xc060>
   1e120:	movw	r1, #52640	; 0xcda0
   1e124:	mov	r2, #2
   1e128:	movt	r1, #2
   1e12c:	bl	1202c <strncmp@plt>
   1e130:	cmp	r0, #0
   1e134:	mov	r6, r0
   1e138:	mov	r3, #0
   1e13c:	movwne	r6, #1
   1e140:	b	1e07c <__assert_fail@plt+0xbff0>
   1e144:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   1e148:	add	fp, sp, #24
   1e14c:	sub	sp, sp, #688	; 0x2b0
   1e150:	sub	sp, sp, #8192	; 0x2000
   1e154:	movw	r6, #4688	; 0x1250
   1e158:	mov	r4, r0
   1e15c:	mov	r7, #0
   1e160:	movt	r6, #4
   1e164:	ldrb	r0, [r6, #15]
   1e168:	cmp	r0, #1
   1e16c:	bne	1e1a4 <__assert_fail@plt+0xc118>
   1e170:	ldr	r0, [r6, #40]	; 0x28
   1e174:	cmp	r0, #4
   1e178:	bne	1e208 <__assert_fail@plt+0xc17c>
   1e17c:	add	r0, r4, #112	; 0x70
   1e180:	add	r2, sp, #23
   1e184:	ldrd	r0, [r0]
   1e188:	bl	23040 <__assert_fail@plt+0x10fb4>
   1e18c:	bl	11eac <strlen@plt>
   1e190:	add	r7, r0, #1
   1e194:	ldrb	r0, [r6, #8]
   1e198:	cmp	r0, #1
   1e19c:	bne	1e224 <__assert_fail@plt+0xc198>
   1e1a0:	b	1e1b0 <__assert_fail@plt+0xc124>
   1e1a4:	ldrb	r0, [r6, #8]
   1e1a8:	cmp	r0, #1
   1e1ac:	bne	1e224 <__assert_fail@plt+0xc198>
   1e1b0:	ldr	r0, [r6, #40]	; 0x28
   1e1b4:	cmp	r0, #4
   1e1b8:	bne	1e248 <__assert_fail@plt+0xc1bc>
   1e1bc:	ldrb	r0, [r4, #132]	; 0x84
   1e1c0:	cmp	r0, #0
   1e1c4:	beq	1e2e4 <__assert_fail@plt+0xc258>
   1e1c8:	movw	r2, #4816	; 0x12d0
   1e1cc:	add	r0, r4, #80	; 0x50
   1e1d0:	ldr	r3, [r6, #100]	; 0x64
   1e1d4:	mov	r1, #512	; 0x200
   1e1d8:	mov	ip, #0
   1e1dc:	movt	r2, #4
   1e1e0:	ldm	r0, {r0, r9}
   1e1e4:	stm	sp, {r1, ip}
   1e1e8:	mov	r1, r9
   1e1ec:	ldr	r5, [r2, #92]	; 0x5c
   1e1f0:	ldr	r2, [r2, #88]	; 0x58
   1e1f4:	str	r2, [sp, #8]
   1e1f8:	add	r2, sp, #23
   1e1fc:	str	r5, [sp, #12]
   1e200:	bl	21b38 <__assert_fail@plt+0xfaac>
   1e204:	b	1e2ec <__assert_fail@plt+0xc260>
   1e208:	movw	r0, #4816	; 0x12d0
   1e20c:	movt	r0, #4
   1e210:	ldr	r0, [r0, #16]
   1e214:	add	r7, r0, #1
   1e218:	ldrb	r0, [r6, #8]
   1e21c:	cmp	r0, #1
   1e220:	beq	1e1b0 <__assert_fail@plt+0xc124>
   1e224:	ldrb	r0, [r6, #7]
   1e228:	cmp	r0, #1
   1e22c:	bne	1e304 <__assert_fail@plt+0xc278>
   1e230:	ldr	r0, [r6, #40]	; 0x28
   1e234:	cmp	r0, #4
   1e238:	bne	1e258 <__assert_fail@plt+0xc1cc>
   1e23c:	ldr	r0, [r4, #128]	; 0x80
   1e240:	bl	11eac <strlen@plt>
   1e244:	b	1e264 <__assert_fail@plt+0xc1d8>
   1e248:	movw	r0, #4816	; 0x12d0
   1e24c:	movt	r0, #4
   1e250:	ldr	r0, [r0, #20]
   1e254:	b	1e2f0 <__assert_fail@plt+0xc264>
   1e258:	movw	r0, #4816	; 0x12d0
   1e25c:	movt	r0, #4
   1e260:	ldr	r0, [r0, #40]	; 0x28
   1e264:	add	r0, r7, r0
   1e268:	add	r7, r0, #1
   1e26c:	ldr	r0, [r4, #148]	; 0x94
   1e270:	cmp	r0, #0
   1e274:	bne	1e310 <__assert_fail@plt+0xc284>
   1e278:	ldr	r5, [r4]
   1e27c:	ldr	r2, [r6, #88]	; 0x58
   1e280:	ldr	r3, [r4, #144]	; 0x90
   1e284:	add	lr, sp, #512	; 0x200
   1e288:	add	r1, sp, #676	; 0x2a4
   1e28c:	add	r8, sp, #684	; 0x2ac
   1e290:	add	r0, lr, #163	; 0xa3
   1e294:	str	r1, [sp]
   1e298:	str	r8, [sp, #680]	; 0x2a8
   1e29c:	str	r0, [sp, #4]
   1e2a0:	add	r0, sp, #680	; 0x2a8
   1e2a4:	mov	r1, r5
   1e2a8:	bl	1a918 <__assert_fail@plt+0x888c>
   1e2ac:	ldr	r0, [sp, #680]	; 0x2a8
   1e2b0:	cmp	r0, r8
   1e2b4:	cmpne	r0, r5
   1e2b8:	beq	1e2c0 <__assert_fail@plt+0xc234>
   1e2bc:	bl	2056c <__assert_fail@plt+0xe4e0>
   1e2c0:	ldrb	r0, [sp, #675]	; 0x2a3
   1e2c4:	ldr	r1, [sp, #676]	; 0x2a4
   1e2c8:	add	r0, r1, r0
   1e2cc:	ldr	r3, [r6, #48]	; 0x30
   1e2d0:	add	r0, r0, r7
   1e2d4:	cmp	r3, #0
   1e2d8:	bne	1e320 <__assert_fail@plt+0xc294>
   1e2dc:	sub	sp, fp, #24
   1e2e0:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   1e2e4:	movw	r0, #54082	; 0xd342
   1e2e8:	movt	r0, #2
   1e2ec:	bl	11eac <strlen@plt>
   1e2f0:	add	r0, r7, r0
   1e2f4:	add	r7, r0, #1
   1e2f8:	ldrb	r0, [r6, #7]
   1e2fc:	cmp	r0, #1
   1e300:	beq	1e230 <__assert_fail@plt+0xc1a4>
   1e304:	ldr	r0, [r4, #148]	; 0x94
   1e308:	cmp	r0, #0
   1e30c:	beq	1e278 <__assert_fail@plt+0xc1ec>
   1e310:	ldr	r3, [r6, #48]	; 0x30
   1e314:	add	r0, r0, r7
   1e318:	cmp	r3, #0
   1e31c:	beq	1e2dc <__assert_fail@plt+0xc250>
   1e320:	ldrb	r7, [r4, #132]	; 0x84
   1e324:	ldr	r2, [r4, #32]
   1e328:	ldr	r6, [r4, #120]	; 0x78
   1e32c:	cmp	r7, #0
   1e330:	beq	1e378 <__assert_fail@plt+0xc2ec>
   1e334:	and	r1, r2, #61440	; 0xf000
   1e338:	cmp	r1, #16384	; 0x4000
   1e33c:	beq	1e3c4 <__assert_fail@plt+0xc338>
   1e340:	cmp	r1, #32768	; 0x8000
   1e344:	bne	1e390 <__assert_fail@plt+0xc304>
   1e348:	sub	r1, r3, #3
   1e34c:	cmp	r7, #0
   1e350:	clz	r1, r1
   1e354:	movwne	r7, #1
   1e358:	ands	r2, r2, #73	; 0x49
   1e35c:	lsr	r1, r1, #5
   1e360:	movwne	r2, #1
   1e364:	and	r1, r1, r7
   1e368:	and	r1, r1, r2
   1e36c:	add	r0, r1, r0
   1e370:	sub	sp, fp, #24
   1e374:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   1e378:	cmp	r6, #3
   1e37c:	mov	r1, #1
   1e380:	cmpne	r6, #9
   1e384:	beq	1e3b8 <__assert_fail@plt+0xc32c>
   1e388:	cmp	r6, #5
   1e38c:	beq	1e348 <__assert_fail@plt+0xc2bc>
   1e390:	mov	r1, #0
   1e394:	cmp	r3, #1
   1e398:	beq	1e3b8 <__assert_fail@plt+0xc32c>
   1e39c:	cmp	r7, #0
   1e3a0:	beq	1e3d4 <__assert_fail@plt+0xc348>
   1e3a4:	and	r2, r2, #61440	; 0xf000
   1e3a8:	mov	r1, #1
   1e3ac:	cmp	r2, #4096	; 0x1000
   1e3b0:	cmpne	r2, #40960	; 0xa000
   1e3b4:	bne	1e3f8 <__assert_fail@plt+0xc36c>
   1e3b8:	add	r0, r1, r0
   1e3bc:	sub	sp, fp, #24
   1e3c0:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   1e3c4:	mov	r1, #1
   1e3c8:	add	r0, r1, r0
   1e3cc:	sub	sp, fp, #24
   1e3d0:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   1e3d4:	sub	r1, r6, #1
   1e3d8:	cmp	r1, #7
   1e3dc:	bcs	1e40c <__assert_fail@plt+0xc380>
   1e3e0:	movw	r2, #60984	; 0xee38
   1e3e4:	movt	r2, #2
   1e3e8:	ldr	r1, [r2, r1, lsl #2]
   1e3ec:	add	r0, r1, r0
   1e3f0:	sub	sp, fp, #24
   1e3f4:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   1e3f8:	cmp	r2, #49152	; 0xc000
   1e3fc:	movne	r1, #0
   1e400:	add	r0, r1, r0
   1e404:	sub	sp, fp, #24
   1e408:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   1e40c:	mov	r1, #0
   1e410:	add	r0, r1, r0
   1e414:	sub	sp, fp, #24
   1e418:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   1e41c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1e420:	add	fp, sp, #28
   1e424:	sub	sp, sp, #12
   1e428:	movw	r1, #4688	; 0x1250
   1e42c:	str	r0, [sp, #4]
   1e430:	movw	r4, #4816	; 0x12d0
   1e434:	movt	r1, #4
   1e438:	movt	r4, #4
   1e43c:	ldr	r0, [r1, #76]	; 0x4c
   1e440:	ldr	r1, [r1, #116]	; 0x74
   1e444:	cmp	r1, r0
   1e448:	mov	sl, r0
   1e44c:	movcc	sl, r1
   1e450:	cmp	r1, #0
   1e454:	moveq	sl, r0
   1e458:	ldr	r0, [r4, #64]	; 0x40
   1e45c:	cmp	r0, sl
   1e460:	bcs	1e584 <__assert_fail@plt+0xc4f8>
   1e464:	ldr	r0, [r4, #60]	; 0x3c
   1e468:	cmp	r1, #0
   1e46c:	beq	1e498 <__assert_fail@plt+0xc40c>
   1e470:	lsr	r2, r1, #1
   1e474:	cmp	r2, sl
   1e478:	bhi	1e498 <__assert_fail@plt+0xc40c>
   1e47c:	mov	r2, #12
   1e480:	bl	29054 <_obstack_memory_used@@Base+0x3200>
   1e484:	str	r0, [r4, #60]	; 0x3c
   1e488:	movw	r0, #4688	; 0x1250
   1e48c:	movt	r0, #4
   1e490:	ldr	r5, [r0, #116]	; 0x74
   1e494:	b	1e4ac <__assert_fail@plt+0xc420>
   1e498:	mov	r1, sl
   1e49c:	mov	r2, #24
   1e4a0:	bl	29054 <_obstack_memory_used@@Base+0x3200>
   1e4a4:	str	r0, [r4, #60]	; 0x3c
   1e4a8:	lsl	r5, sl, #1
   1e4ac:	ldr	r1, [r4, #64]	; 0x40
   1e4b0:	add	r0, r5, r1
   1e4b4:	add	r0, r0, #1
   1e4b8:	cmp	r0, r5
   1e4bc:	bcc	1e864 <__assert_fail@plt+0xc7d8>
   1e4c0:	sub	r2, r5, r1
   1e4c4:	mul	r1, r0, r2
   1e4c8:	udiv	r2, r1, r2
   1e4cc:	cmp	r2, r0
   1e4d0:	bne	1e864 <__assert_fail@plt+0xc7d8>
   1e4d4:	lsr	r0, r1, #1
   1e4d8:	mov	r1, #4
   1e4dc:	bl	29160 <_obstack_memory_used@@Base+0x330c>
   1e4e0:	ldr	r1, [r4, #64]	; 0x40
   1e4e4:	cmp	r5, r1
   1e4e8:	bls	1e580 <__assert_fail@plt+0xc4f4>
   1e4ec:	mvn	r2, r1
   1e4f0:	add	r3, r5, r2
   1e4f4:	sub	r2, r5, r1
   1e4f8:	ands	r7, r2, #3
   1e4fc:	ldr	r2, [r4, #60]	; 0x3c
   1e500:	beq	1e524 <__assert_fail@plt+0xc498>
   1e504:	add	r6, r1, r1, lsl #1
   1e508:	add	r6, r2, r6, lsl #2
   1e50c:	add	r6, r6, #8
   1e510:	add	r1, r1, #1
   1e514:	str	r0, [r6], #12
   1e518:	subs	r7, r7, #1
   1e51c:	add	r0, r0, r1, lsl #2
   1e520:	bne	1e510 <__assert_fail@plt+0xc484>
   1e524:	cmp	r3, #3
   1e528:	bcc	1e580 <__assert_fail@plt+0xc4f4>
   1e52c:	add	r3, r1, r1, lsl #1
   1e530:	add	r1, r1, #4
   1e534:	add	r2, r2, r3, lsl #2
   1e538:	rsb	r3, r5, #0
   1e53c:	add	r2, r2, #32
   1e540:	str	r0, [r2, #-24]	; 0xffffffe8
   1e544:	add	r0, r0, r1, lsl #2
   1e548:	sub	r0, r0, #12
   1e54c:	str	r0, [r2, #-12]
   1e550:	add	r0, r0, r1, lsl #2
   1e554:	sub	r0, r0, #8
   1e558:	str	r0, [r2]
   1e55c:	add	r0, r0, r1, lsl #2
   1e560:	sub	r0, r0, #4
   1e564:	str	r0, [r2, #12]
   1e568:	add	r0, r0, r1, lsl #2
   1e56c:	add	r1, r1, #4
   1e570:	add	r2, r2, #48	; 0x30
   1e574:	add	r7, r3, r1
   1e578:	cmp	r7, #4
   1e57c:	bne	1e540 <__assert_fail@plt+0xc4b4>
   1e580:	str	r5, [r4, #64]	; 0x40
   1e584:	cmp	sl, #0
   1e588:	beq	1e670 <__assert_fail@plt+0xc5e4>
   1e58c:	movw	r0, #4816	; 0x12d0
   1e590:	mov	r6, #0
   1e594:	mov	ip, #1
   1e598:	mov	r2, #3
   1e59c:	vmov.i32	q8, #3	; 0x00000003
   1e5a0:	mov	r3, #64	; 0x40
   1e5a4:	mov	r5, #1
   1e5a8:	movt	r0, #4
   1e5ac:	ldr	lr, [r0, #60]	; 0x3c
   1e5b0:	b	1e5c0 <__assert_fail@plt+0xc534>
   1e5b4:	add	r5, r5, #1
   1e5b8:	cmp	r6, sl
   1e5bc:	beq	1e670 <__assert_fail@plt+0xc5e4>
   1e5c0:	add	r0, r6, r6, lsl #1
   1e5c4:	mov	r4, lr
   1e5c8:	mov	r1, r6
   1e5cc:	add	r6, r6, #1
   1e5d0:	cmp	r6, #4
   1e5d4:	strb	ip, [r4, r0, lsl #2]!
   1e5d8:	add	r0, r6, r6, lsl #1
   1e5dc:	str	r0, [r4, #4]
   1e5e0:	mov	r0, #0
   1e5e4:	ldr	r9, [r4, #8]
   1e5e8:	bcc	1e65c <__assert_fail@plt+0xc5d0>
   1e5ec:	sub	r4, r1, #3
   1e5f0:	mov	r8, #0
   1e5f4:	add	r0, ip, r4, lsr #2
   1e5f8:	cmp	r4, #12
   1e5fc:	and	r1, r0, #3
   1e600:	bcc	1e638 <__assert_fail@plt+0xc5ac>
   1e604:	sub	r0, r0, r1
   1e608:	mov	r8, #0
   1e60c:	mov	r7, r9
   1e610:	add	r4, r7, #48	; 0x30
   1e614:	subs	r0, r0, #4
   1e618:	add	r8, r8, #16
   1e61c:	vst1.32	{d16-d17}, [r4]
   1e620:	add	r4, r7, #32
   1e624:	vst1.32	{d16-d17}, [r4]
   1e628:	add	r4, r7, #16
   1e62c:	vst1.32	{d16-d17}, [r4]
   1e630:	vst1.32	{d16-d17}, [r7], r3
   1e634:	bne	1e610 <__assert_fail@plt+0xc584>
   1e638:	bic	r0, r6, #3
   1e63c:	cmp	r1, #0
   1e640:	beq	1e654 <__assert_fail@plt+0xc5c8>
   1e644:	add	r4, r9, r8, lsl #2
   1e648:	vst1.32	{d16-d17}, [r4]!
   1e64c:	subs	r1, r1, #1
   1e650:	bne	1e648 <__assert_fail@plt+0xc5bc>
   1e654:	cmp	r6, r0
   1e658:	beq	1e5b4 <__assert_fail@plt+0xc528>
   1e65c:	str	r2, [r9, r0, lsl #2]
   1e660:	add	r0, r0, #1
   1e664:	cmp	r5, r0
   1e668:	bne	1e65c <__assert_fail@plt+0xc5d0>
   1e66c:	b	1e5b4 <__assert_fail@plt+0xc528>
   1e670:	movw	r0, #4688	; 0x1250
   1e674:	movw	r9, #4816	; 0x12d0
   1e678:	movt	r0, #4
   1e67c:	movt	r9, #4
   1e680:	ldr	r0, [r0, #76]	; 0x4c
   1e684:	cmp	r0, #0
   1e688:	beq	1e830 <__assert_fail@plt+0xc7a4>
   1e68c:	mov	r8, #0
   1e690:	b	1e6ac <__assert_fail@plt+0xc620>
   1e694:	movw	r0, #4688	; 0x1250
   1e698:	movt	r0, #4
   1e69c:	ldr	lr, [r0, #76]	; 0x4c
   1e6a0:	add	r8, r8, #1
   1e6a4:	cmp	r8, lr
   1e6a8:	bcs	1e830 <__assert_fail@plt+0xc7a4>
   1e6ac:	ldr	r0, [r9, #12]
   1e6b0:	ldr	r0, [r0, r8, lsl #2]
   1e6b4:	bl	1e144 <__assert_fail@plt+0xc0b8>
   1e6b8:	cmp	sl, #0
   1e6bc:	beq	1e694 <__assert_fail@plt+0xc608>
   1e6c0:	movw	r1, #4688	; 0x1250
   1e6c4:	ldr	r9, [r9, #60]	; 0x3c
   1e6c8:	movt	r1, #4
   1e6cc:	ldr	lr, [r1, #76]	; 0x4c
   1e6d0:	ldr	ip, [r1, #112]	; 0x70
   1e6d4:	ldr	r1, [sp, #4]
   1e6d8:	cmp	r1, #0
   1e6dc:	beq	1e7ac <__assert_fail@plt+0xc720>
   1e6e0:	mov	r7, #0
   1e6e4:	str	r0, [sp, #8]
   1e6e8:	b	1e6f8 <__assert_fail@plt+0xc66c>
   1e6ec:	add	r7, r7, #1
   1e6f0:	cmp	r7, sl
   1e6f4:	beq	1e794 <__assert_fail@plt+0xc708>
   1e6f8:	add	r1, r7, r7, lsl #1
   1e6fc:	mov	r3, r9
   1e700:	ldrb	r2, [r3, r1, lsl #2]!
   1e704:	cmp	r2, #0
   1e708:	beq	1e6ec <__assert_fail@plt+0xc660>
   1e70c:	add	r4, lr, r7
   1e710:	add	r2, r7, #1
   1e714:	add	r1, r9, r1, lsl #2
   1e718:	udiv	r4, r4, r2
   1e71c:	ldr	r5, [r1, #8]
   1e720:	udiv	r4, r8, r4
   1e724:	ldr	r6, [r5, r4, lsl #2]
   1e728:	cmp	r4, r7
   1e72c:	mov	r7, r0
   1e730:	addne	r7, r7, #2
   1e734:	cmp	r7, r6
   1e738:	bls	1e788 <__assert_fail@plt+0xc6fc>
   1e73c:	mov	r0, r8
   1e740:	mov	r8, lr
   1e744:	mov	lr, sl
   1e748:	mov	sl, ip
   1e74c:	ldr	ip, [r1, #4]
   1e750:	sub	r6, r7, r6
   1e754:	add	r6, r6, ip
   1e758:	mov	ip, sl
   1e75c:	mov	sl, lr
   1e760:	mov	lr, r8
   1e764:	mov	r8, r0
   1e768:	ldr	r0, [sp, #8]
   1e76c:	str	r6, [r1, #4]
   1e770:	str	r7, [r5, r4, lsl #2]
   1e774:	ldr	r1, [r1, #4]
   1e778:	cmp	r1, ip
   1e77c:	mov	r1, #0
   1e780:	movwcc	r1, #1
   1e784:	strb	r1, [r3]
   1e788:	mov	r7, r2
   1e78c:	cmp	r7, sl
   1e790:	bne	1e6f8 <__assert_fail@plt+0xc66c>
   1e794:	movw	r9, #4816	; 0x12d0
   1e798:	movt	r9, #4
   1e79c:	add	r8, r8, #1
   1e7a0:	cmp	r8, lr
   1e7a4:	bcc	1e6ac <__assert_fail@plt+0xc620>
   1e7a8:	b	1e830 <__assert_fail@plt+0xc7a4>
   1e7ac:	add	r3, r9, #4
   1e7b0:	movw	r9, #4816	; 0x12d0
   1e7b4:	mov	r7, #0
   1e7b8:	movt	r9, #4
   1e7bc:	b	1e7cc <__assert_fail@plt+0xc740>
   1e7c0:	add	r3, r3, #12
   1e7c4:	cmp	sl, r7
   1e7c8:	beq	1e6a0 <__assert_fail@plt+0xc614>
   1e7cc:	ldrb	r2, [r3, #-4]
   1e7d0:	mov	r1, r7
   1e7d4:	add	r7, r7, #1
   1e7d8:	cmp	r2, #0
   1e7dc:	beq	1e7c0 <__assert_fail@plt+0xc734>
   1e7e0:	udiv	r2, r8, r7
   1e7e4:	ldr	r4, [r3, #4]
   1e7e8:	mls	r2, r2, r7, r8
   1e7ec:	ldr	r5, [r4, r2, lsl #2]
   1e7f0:	cmp	r1, r2
   1e7f4:	mov	r1, r0
   1e7f8:	addne	r1, r1, #2
   1e7fc:	cmp	r1, r5
   1e800:	bls	1e7c0 <__assert_fail@plt+0xc734>
   1e804:	sub	r6, r1, r5
   1e808:	ldr	r5, [r3]
   1e80c:	add	r6, r6, r5
   1e810:	str	r6, [r3]
   1e814:	str	r1, [r4, r2, lsl #2]
   1e818:	ldr	r1, [r3]
   1e81c:	cmp	r1, ip
   1e820:	mov	r1, #0
   1e824:	movwcc	r1, #1
   1e828:	strb	r1, [r3, #-4]
   1e82c:	b	1e7c0 <__assert_fail@plt+0xc734>
   1e830:	ldr	r0, [r9, #60]	; 0x3c
   1e834:	add	r1, sl, sl, lsl #1
   1e838:	add	r0, r0, r1, lsl #2
   1e83c:	sub	r1, r0, #12
   1e840:	mov	r0, sl
   1e844:	cmp	sl, #2
   1e848:	bcc	1e85c <__assert_fail@plt+0xc7d0>
   1e84c:	ldrb	r2, [r1], #-12
   1e850:	sub	sl, r0, #1
   1e854:	cmp	r2, #0
   1e858:	beq	1e840 <__assert_fail@plt+0xc7b4>
   1e85c:	sub	sp, fp, #28
   1e860:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1e864:	bl	295cc <_obstack_memory_used@@Base+0x3778>
   1e868:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   1e86c:	add	fp, sp, #24
   1e870:	sub	sp, sp, #128	; 0x80
   1e874:	mov	r5, r0
   1e878:	cmp	r1, #0
   1e87c:	beq	1e8fc <__assert_fail@plt+0xc870>
   1e880:	cmp	r1, #1024	; 0x400
   1e884:	movw	r4, #1025	; 0x401
   1e888:	addls	r4, r1, #1
   1e88c:	mov	r0, r4
   1e890:	bl	2a648 <_obstack_memory_used@@Base+0x47f4>
   1e894:	cmp	r0, #0
   1e898:	beq	1e984 <__assert_fail@plt+0xc8f8>
   1e89c:	mov	r6, r0
   1e8a0:	b	1e8bc <__assert_fail@plt+0xc830>
   1e8a4:	lsl	r4, r4, #1
   1e8a8:	mov	r0, r4
   1e8ac:	bl	2a648 <_obstack_memory_used@@Base+0x47f4>
   1e8b0:	mov	r6, r0
   1e8b4:	cmp	r0, #0
   1e8b8:	beq	1e984 <__assert_fail@plt+0xc8f8>
   1e8bc:	mov	r0, r5
   1e8c0:	mov	r1, r6
   1e8c4:	mov	r2, r4
   1e8c8:	bl	11d2c <readlink@plt>
   1e8cc:	cmn	r0, #1
   1e8d0:	ble	1e994 <__assert_fail@plt+0xc908>
   1e8d4:	cmp	r0, r4
   1e8d8:	bcc	1e9ec <__assert_fail@plt+0xc960>
   1e8dc:	mov	r0, r6
   1e8e0:	bl	2056c <__assert_fail@plt+0xe4e0>
   1e8e4:	cmn	r4, #-1073741823	; 0xc0000001
   1e8e8:	bls	1e8a4 <__assert_fail@plt+0xc818>
   1e8ec:	cmn	r4, #-2147483647	; 0x80000001
   1e8f0:	mvn	r4, #-2147483648	; 0x80000000
   1e8f4:	bcc	1e8a8 <__assert_fail@plt+0xc81c>
   1e8f8:	b	1e984 <__assert_fail@plt+0xc8f8>
   1e8fc:	mov	r4, #128	; 0x80
   1e900:	mov	r8, sp
   1e904:	mov	r6, #0
   1e908:	cmp	r4, #128	; 0x80
   1e90c:	mov	r7, r8
   1e910:	beq	1e948 <__assert_fail@plt+0xc8bc>
   1e914:	b	1e930 <__assert_fail@plt+0xc8a4>
   1e918:	lsl	r0, r4, #1
   1e91c:	mov	r4, r0
   1e920:	mov	r6, #0
   1e924:	cmp	r4, #128	; 0x80
   1e928:	mov	r7, r8
   1e92c:	beq	1e948 <__assert_fail@plt+0xc8bc>
   1e930:	mov	r0, r4
   1e934:	bl	2a648 <_obstack_memory_used@@Base+0x47f4>
   1e938:	mov	r7, r0
   1e93c:	cmp	r0, #0
   1e940:	mov	r6, r0
   1e944:	beq	1e984 <__assert_fail@plt+0xc8f8>
   1e948:	mov	r0, r5
   1e94c:	mov	r1, r7
   1e950:	mov	r2, r4
   1e954:	bl	11d2c <readlink@plt>
   1e958:	cmp	r0, #0
   1e95c:	bmi	1e994 <__assert_fail@plt+0xc908>
   1e960:	cmp	r0, r4
   1e964:	bcc	1e9ac <__assert_fail@plt+0xc920>
   1e968:	mov	r0, r6
   1e96c:	bl	2056c <__assert_fail@plt+0xe4e0>
   1e970:	cmp	r4, #1073741824	; 0x40000000
   1e974:	bcc	1e918 <__assert_fail@plt+0xc88c>
   1e978:	mvn	r0, #-2147483648	; 0x80000000
   1e97c:	cmn	r4, #-2147483647	; 0x80000001
   1e980:	bcc	1e91c <__assert_fail@plt+0xc890>
   1e984:	bl	11ed0 <__errno_location@plt>
   1e988:	mov	r1, #12
   1e98c:	str	r1, [r0]
   1e990:	b	1e99c <__assert_fail@plt+0xc910>
   1e994:	mov	r0, r6
   1e998:	bl	2056c <__assert_fail@plt+0xe4e0>
   1e99c:	mov	r5, #0
   1e9a0:	mov	r0, r5
   1e9a4:	sub	sp, fp, #24
   1e9a8:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   1e9ac:	mov	r5, #0
   1e9b0:	add	r8, r0, #1
   1e9b4:	cmp	r6, #0
   1e9b8:	strb	r5, [r7, r0]
   1e9bc:	beq	1ea10 <__assert_fail@plt+0xc984>
   1e9c0:	cmp	r8, r4
   1e9c4:	bcs	1ea00 <__assert_fail@plt+0xc974>
   1e9c8:	mov	r0, r6
   1e9cc:	mov	r1, r8
   1e9d0:	bl	2a678 <_obstack_memory_used@@Base+0x4824>
   1e9d4:	cmp	r0, #0
   1e9d8:	mov	r5, r0
   1e9dc:	moveq	r5, r6
   1e9e0:	mov	r0, r5
   1e9e4:	sub	sp, fp, #24
   1e9e8:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   1e9ec:	mov	r1, #0
   1e9f0:	add	r8, r0, #1
   1e9f4:	strb	r1, [r6, r0]
   1e9f8:	cmp	r8, r4
   1e9fc:	bcc	1e9c8 <__assert_fail@plt+0xc93c>
   1ea00:	mov	r5, r6
   1ea04:	mov	r0, r5
   1ea08:	sub	sp, fp, #24
   1ea0c:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   1ea10:	mov	r0, r8
   1ea14:	bl	2a648 <_obstack_memory_used@@Base+0x47f4>
   1ea18:	cmp	r0, #0
   1ea1c:	beq	1e9a0 <__assert_fail@plt+0xc914>
   1ea20:	mov	r1, r7
   1ea24:	mov	r2, r8
   1ea28:	mov	r4, r0
   1ea2c:	bl	11c60 <memcpy@plt>
   1ea30:	mov	r5, r4
   1ea34:	mov	r0, r5
   1ea38:	sub	sp, fp, #24
   1ea3c:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   1ea40:	mov	r0, #1
   1ea44:	b	18bf4 <__assert_fail@plt+0x6b68>
   1ea48:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1ea4c:	add	fp, sp, #28
   1ea50:	sub	sp, sp, #12
   1ea54:	mov	r4, r3
   1ea58:	mov	r9, r2
   1ea5c:	mov	r7, r1
   1ea60:	mov	r8, r0
   1ea64:	bl	11eac <strlen@plt>
   1ea68:	ldr	r6, [r7]
   1ea6c:	cmp	r6, #0
   1ea70:	beq	1eb1c <__assert_fail@plt+0xca90>
   1ea74:	mov	r5, r0
   1ea78:	cmp	r9, #0
   1ea7c:	beq	1eb2c <__assert_fail@plt+0xcaa0>
   1ea80:	add	r0, r7, #4
   1ea84:	mvn	sl, #0
   1ea88:	mov	r7, #0
   1ea8c:	str	r9, [sp]
   1ea90:	str	r0, [sp, #8]
   1ea94:	mov	r0, #0
   1ea98:	str	r0, [sp, #4]
   1ea9c:	mov	r0, r9
   1eaa0:	b	1eae4 <__assert_fail@plt+0xca58>
   1eaa4:	ldr	r0, [sp]
   1eaa8:	mov	r1, r9
   1eaac:	mov	r2, r4
   1eab0:	mla	r0, sl, r4, r0
   1eab4:	bl	11e94 <bcmp@plt>
   1eab8:	ldr	r1, [sp, #4]
   1eabc:	cmp	r0, #0
   1eac0:	movwne	r0, #1
   1eac4:	orr	r1, r1, r0
   1eac8:	str	r1, [sp, #4]
   1eacc:	ldr	r0, [sp, #8]
   1ead0:	add	r9, r9, r4
   1ead4:	ldr	r6, [r0, r7, lsl #2]
   1ead8:	add	r7, r7, #1
   1eadc:	cmp	r6, #0
   1eae0:	beq	1eba0 <__assert_fail@plt+0xcb14>
   1eae4:	mov	r0, r6
   1eae8:	mov	r1, r8
   1eaec:	mov	r2, r5
   1eaf0:	bl	1202c <strncmp@plt>
   1eaf4:	cmp	r0, #0
   1eaf8:	bne	1eacc <__assert_fail@plt+0xca40>
   1eafc:	mov	r0, r6
   1eb00:	bl	11eac <strlen@plt>
   1eb04:	cmp	r0, r5
   1eb08:	beq	1eb20 <__assert_fail@plt+0xca94>
   1eb0c:	cmn	sl, #1
   1eb10:	bne	1eaa4 <__assert_fail@plt+0xca18>
   1eb14:	mov	sl, r7
   1eb18:	b	1eacc <__assert_fail@plt+0xca40>
   1eb1c:	mvn	r7, #0
   1eb20:	mov	r0, r7
   1eb24:	sub	sp, fp, #28
   1eb28:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1eb2c:	add	r4, r7, #4
   1eb30:	mov	r0, #0
   1eb34:	mvn	r9, #0
   1eb38:	mvn	sl, #0
   1eb3c:	mov	r7, #0
   1eb40:	str	r0, [sp, #4]
   1eb44:	b	1eb74 <__assert_fail@plt+0xcae8>
   1eb48:	ldr	r1, [sp, #4]
   1eb4c:	subs	r0, sl, r9
   1eb50:	movwne	r0, #1
   1eb54:	cmn	sl, #1
   1eb58:	moveq	sl, r7
   1eb5c:	orr	r1, r1, r0
   1eb60:	str	r1, [sp, #4]
   1eb64:	ldr	r6, [r4, r7, lsl #2]
   1eb68:	add	r7, r7, #1
   1eb6c:	cmp	r6, #0
   1eb70:	beq	1eba0 <__assert_fail@plt+0xcb14>
   1eb74:	mov	r0, r6
   1eb78:	mov	r1, r8
   1eb7c:	mov	r2, r5
   1eb80:	bl	1202c <strncmp@plt>
   1eb84:	cmp	r0, #0
   1eb88:	bne	1eb64 <__assert_fail@plt+0xcad8>
   1eb8c:	mov	r0, r6
   1eb90:	bl	11eac <strlen@plt>
   1eb94:	cmp	r0, r5
   1eb98:	bne	1eb48 <__assert_fail@plt+0xcabc>
   1eb9c:	b	1eb20 <__assert_fail@plt+0xca94>
   1eba0:	ldr	r0, [sp, #4]
   1eba4:	tst	r0, #1
   1eba8:	mvnne	sl, #1
   1ebac:	mov	r0, sl
   1ebb0:	sub	sp, fp, #28
   1ebb4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1ebb8:	push	{r4, r5, r6, r7, fp, lr}
   1ebbc:	add	fp, sp, #16
   1ebc0:	mov	r5, r0
   1ebc4:	ldr	r0, [r1]
   1ebc8:	mvn	r4, #0
   1ebcc:	cmp	r0, #0
   1ebd0:	beq	1ebfc <__assert_fail@plt+0xcb70>
   1ebd4:	add	r7, r1, #4
   1ebd8:	mov	r6, #0
   1ebdc:	mov	r1, r5
   1ebe0:	bl	11bd0 <strcmp@plt>
   1ebe4:	cmp	r0, #0
   1ebe8:	beq	1ec04 <__assert_fail@plt+0xcb78>
   1ebec:	ldr	r0, [r7, r6, lsl #2]
   1ebf0:	add	r6, r6, #1
   1ebf4:	cmp	r0, #0
   1ebf8:	bne	1ebdc <__assert_fail@plt+0xcb50>
   1ebfc:	mov	r0, r4
   1ec00:	pop	{r4, r5, r6, r7, fp, pc}
   1ec04:	mov	r0, r6
   1ec08:	pop	{r4, r5, r6, r7, fp, pc}
   1ec0c:	push	{r4, r5, r6, sl, fp, lr}
   1ec10:	add	fp, sp, #16
   1ec14:	sub	sp, sp, #8
   1ec18:	mov	r5, r0
   1ec1c:	movw	r0, #61059	; 0xee83
   1ec20:	mov	r4, r1
   1ec24:	movw	r1, #61086	; 0xee9e
   1ec28:	cmn	r2, #1
   1ec2c:	mov	r2, #5
   1ec30:	movt	r0, #2
   1ec34:	movt	r1, #2
   1ec38:	moveq	r1, r0
   1ec3c:	mov	r0, #0
   1ec40:	bl	11ca8 <dcgettext@plt>
   1ec44:	mov	r6, r0
   1ec48:	mov	r0, #0
   1ec4c:	mov	r1, #8
   1ec50:	mov	r2, r4
   1ec54:	bl	278c0 <_obstack_memory_used@@Base+0x1a6c>
   1ec58:	mov	r4, r0
   1ec5c:	mov	r0, #1
   1ec60:	mov	r1, r5
   1ec64:	bl	27e80 <_obstack_memory_used@@Base+0x202c>
   1ec68:	str	r0, [sp]
   1ec6c:	mov	r0, #0
   1ec70:	mov	r1, #0
   1ec74:	mov	r2, r6
   1ec78:	mov	r3, r4
   1ec7c:	bl	11da4 <error@plt>
   1ec80:	sub	sp, fp, #16
   1ec84:	pop	{r4, r5, r6, sl, fp, pc}
   1ec88:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1ec8c:	add	fp, sp, #28
   1ec90:	sub	sp, sp, #4
   1ec94:	mov	sl, r1
   1ec98:	movw	r1, #61115	; 0xeebb
   1ec9c:	mov	r4, r2
   1eca0:	mov	r6, r0
   1eca4:	mov	r0, #0
   1eca8:	mov	r2, #5
   1ecac:	mov	r8, #0
   1ecb0:	movt	r1, #2
   1ecb4:	bl	11ca8 <dcgettext@plt>
   1ecb8:	movw	r1, #776	; 0x308
   1ecbc:	movt	r1, #4
   1ecc0:	ldr	r1, [r1]
   1ecc4:	bl	11b94 <fputs_unlocked@plt>
   1ecc8:	ldr	r7, [r6]
   1eccc:	cmp	r7, #0
   1ecd0:	beq	1ed8c <__assert_fail@plt+0xcd00>
   1ecd4:	add	r0, r6, #4
   1ecd8:	mov	r9, #0
   1ecdc:	mov	r6, #0
   1ece0:	str	r0, [sp]
   1ece4:	cmp	r9, #0
   1ece8:	bne	1ed40 <__assert_fail@plt+0xccb4>
   1ecec:	mov	r5, #0
   1ecf0:	movw	r0, #776	; 0x308
   1ecf4:	movt	r0, #4
   1ecf8:	ldr	r6, [r0]
   1ecfc:	mov	r0, r7
   1ed00:	bl	27e90 <_obstack_memory_used@@Base+0x203c>
   1ed04:	movw	r2, #61136	; 0xeed0
   1ed08:	mov	r3, r0
   1ed0c:	mov	r0, r6
   1ed10:	mov	r1, #1
   1ed14:	movt	r2, #2
   1ed18:	bl	11f24 <__fprintf_chk@plt>
   1ed1c:	add	r6, sl, r5
   1ed20:	ldr	r0, [sp]
   1ed24:	add	r8, r8, r4
   1ed28:	ldr	r7, [r0, -r9, lsl #2]
   1ed2c:	sub	r9, r9, #1
   1ed30:	cmp	r7, #0
   1ed34:	beq	1ed8c <__assert_fail@plt+0xcd00>
   1ed38:	cmp	r9, #0
   1ed3c:	beq	1ecec <__assert_fail@plt+0xcc60>
   1ed40:	add	r1, sl, r8
   1ed44:	mov	r0, r6
   1ed48:	mov	r2, r4
   1ed4c:	bl	11e94 <bcmp@plt>
   1ed50:	cmp	r0, #0
   1ed54:	mov	r5, r8
   1ed58:	bne	1ecf0 <__assert_fail@plt+0xcc64>
   1ed5c:	movw	r0, #776	; 0x308
   1ed60:	movt	r0, #4
   1ed64:	ldr	r5, [r0]
   1ed68:	mov	r0, r7
   1ed6c:	bl	27e90 <_obstack_memory_used@@Base+0x203c>
   1ed70:	movw	r2, #61144	; 0xeed8
   1ed74:	mov	r3, r0
   1ed78:	mov	r0, r5
   1ed7c:	mov	r1, #1
   1ed80:	movt	r2, #2
   1ed84:	bl	11f24 <__fprintf_chk@plt>
   1ed88:	b	1ed20 <__assert_fail@plt+0xcc94>
   1ed8c:	movw	r0, #776	; 0x308
   1ed90:	movt	r0, #4
   1ed94:	ldr	r0, [r0]
   1ed98:	ldr	r1, [r0, #20]
   1ed9c:	ldr	r2, [r0, #24]
   1eda0:	cmp	r1, r2
   1eda4:	addcc	r2, r1, #1
   1eda8:	strcc	r2, [r0, #20]
   1edac:	movcc	r0, #10
   1edb0:	strbcc	r0, [r1]
   1edb4:	subcc	sp, fp, #28
   1edb8:	popcc	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1edbc:	mov	r1, #10
   1edc0:	sub	sp, fp, #28
   1edc4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1edc8:	b	11f54 <__overflow@plt>
   1edcc:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1edd0:	add	fp, sp, #28
   1edd4:	sub	sp, sp, #12
   1edd8:	mov	sl, r0
   1eddc:	ldr	r0, [fp, #16]
   1ede0:	ldr	r9, [fp, #8]
   1ede4:	mov	r5, r3
   1ede8:	mov	r8, r2
   1edec:	mov	r6, r1
   1edf0:	cmp	r0, #0
   1edf4:	beq	1ee24 <__assert_fail@plt+0xcd98>
   1edf8:	mov	r0, r6
   1edfc:	mov	r1, r8
   1ee00:	mov	r2, r5
   1ee04:	mov	r3, r9
   1ee08:	bl	1ea48 <__assert_fail@plt+0xc9bc>
   1ee0c:	mov	r4, r0
   1ee10:	cmn	r4, #1
   1ee14:	ble	1ee74 <__assert_fail@plt+0xcde8>
   1ee18:	mov	r0, r4
   1ee1c:	sub	sp, fp, #28
   1ee20:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1ee24:	ldr	r0, [r8]
   1ee28:	movw	r7, #61059	; 0xee83
   1ee2c:	str	r5, [sp, #8]
   1ee30:	movt	r7, #2
   1ee34:	cmp	r0, #0
   1ee38:	beq	1ee8c <__assert_fail@plt+0xce00>
   1ee3c:	add	r5, r8, #4
   1ee40:	mov	r4, #0
   1ee44:	mov	r1, r6
   1ee48:	bl	11bd0 <strcmp@plt>
   1ee4c:	cmp	r0, #0
   1ee50:	beq	1ee68 <__assert_fail@plt+0xcddc>
   1ee54:	ldr	r0, [r5, r4, lsl #2]
   1ee58:	add	r4, r4, #1
   1ee5c:	cmp	r0, #0
   1ee60:	bne	1ee44 <__assert_fail@plt+0xcdb8>
   1ee64:	b	1ee8c <__assert_fail@plt+0xce00>
   1ee68:	ldr	r5, [sp, #8]
   1ee6c:	cmn	r4, #1
   1ee70:	bgt	1ee18 <__assert_fail@plt+0xcd8c>
   1ee74:	movw	r0, #61059	; 0xee83
   1ee78:	movw	r7, #61086	; 0xee9e
   1ee7c:	str	r5, [sp, #8]
   1ee80:	movt	r0, #2
   1ee84:	movt	r7, #2
   1ee88:	moveq	r7, r0
   1ee8c:	ldr	r5, [fp, #12]
   1ee90:	mov	r0, #0
   1ee94:	mov	r1, r7
   1ee98:	mov	r2, #5
   1ee9c:	bl	11ca8 <dcgettext@plt>
   1eea0:	mov	r4, r0
   1eea4:	mov	r0, #0
   1eea8:	mov	r1, #8
   1eeac:	mov	r2, r6
   1eeb0:	bl	278c0 <_obstack_memory_used@@Base+0x1a6c>
   1eeb4:	mov	r6, r0
   1eeb8:	mov	r0, #1
   1eebc:	mov	r1, sl
   1eec0:	bl	27e80 <_obstack_memory_used@@Base+0x202c>
   1eec4:	str	r0, [sp]
   1eec8:	mov	r0, #0
   1eecc:	mov	r1, #0
   1eed0:	mov	r2, r4
   1eed4:	mov	r3, r6
   1eed8:	bl	11da4 <error@plt>
   1eedc:	ldr	r1, [sp, #8]
   1eee0:	mov	r0, r8
   1eee4:	mov	r2, r9
   1eee8:	bl	1ec88 <__assert_fail@plt+0xcbfc>
   1eeec:	blx	r5
   1eef0:	mvn	r4, #0
   1eef4:	mov	r0, r4
   1eef8:	sub	sp, fp, #28
   1eefc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1ef00:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   1ef04:	add	fp, sp, #24
   1ef08:	ldr	r6, [r1]
   1ef0c:	cmp	r6, #0
   1ef10:	beq	1ef74 <__assert_fail@plt+0xcee8>
   1ef14:	mov	r8, r1
   1ef18:	mov	r7, r2
   1ef1c:	mov	r1, r2
   1ef20:	mov	r2, r3
   1ef24:	mov	r4, r3
   1ef28:	mov	r9, r0
   1ef2c:	bl	11e94 <bcmp@plt>
   1ef30:	cmp	r0, #0
   1ef34:	beq	1ef6c <__assert_fail@plt+0xcee0>
   1ef38:	add	r7, r7, r4
   1ef3c:	add	r5, r8, #4
   1ef40:	ldr	r6, [r5]
   1ef44:	cmp	r6, #0
   1ef48:	beq	1ef74 <__assert_fail@plt+0xcee8>
   1ef4c:	mov	r0, r9
   1ef50:	mov	r1, r7
   1ef54:	mov	r2, r4
   1ef58:	bl	11e94 <bcmp@plt>
   1ef5c:	add	r7, r7, r4
   1ef60:	add	r5, r5, #4
   1ef64:	cmp	r0, #0
   1ef68:	bne	1ef40 <__assert_fail@plt+0xceb4>
   1ef6c:	mov	r0, r6
   1ef70:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   1ef74:	mov	r6, #0
   1ef78:	mov	r0, r6
   1ef7c:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   1ef80:	sub	r0, r0, #1
   1ef84:	ldrb	r3, [r0, #1]!
   1ef88:	cmp	r3, #47	; 0x2f
   1ef8c:	beq	1ef84 <__assert_fail@plt+0xcef8>
   1ef90:	mov	r2, #0
   1ef94:	mov	r1, r0
   1ef98:	uxtb	r3, r3
   1ef9c:	cmp	r3, #47	; 0x2f
   1efa0:	bne	1efb8 <__assert_fail@plt+0xcf2c>
   1efa4:	ldrb	r3, [r1, #1]!
   1efa8:	mov	r2, #1
   1efac:	uxtb	r3, r3
   1efb0:	cmp	r3, #47	; 0x2f
   1efb4:	beq	1efa4 <__assert_fail@plt+0xcf18>
   1efb8:	cmp	r3, #0
   1efbc:	bxeq	lr
   1efc0:	tst	r2, #1
   1efc4:	mov	r2, #0
   1efc8:	movne	r0, r1
   1efcc:	ldrb	r3, [r1, #1]!
   1efd0:	uxtb	r3, r3
   1efd4:	cmp	r3, #47	; 0x2f
   1efd8:	bne	1efb8 <__assert_fail@plt+0xcf2c>
   1efdc:	b	1efa4 <__assert_fail@plt+0xcf18>
   1efe0:	push	{r4, sl, fp, lr}
   1efe4:	add	fp, sp, #8
   1efe8:	mov	r4, r0
   1efec:	bl	11eac <strlen@plt>
   1eff0:	mov	r1, r0
   1eff4:	sub	r2, r4, #1
   1eff8:	mov	r0, r1
   1effc:	cmp	r1, #2
   1f000:	bcc	1f014 <__assert_fail@plt+0xcf88>
   1f004:	ldrb	r3, [r2, r0]
   1f008:	sub	r1, r0, #1
   1f00c:	cmp	r3, #47	; 0x2f
   1f010:	beq	1eff8 <__assert_fail@plt+0xcf6c>
   1f014:	pop	{r4, sl, fp, pc}
   1f018:	sub	r2, r0, #65	; 0x41
   1f01c:	mov	r1, r0
   1f020:	mov	r0, #1
   1f024:	cmp	r2, #26
   1f028:	subcs	r2, r1, #97	; 0x61
   1f02c:	cmpcs	r2, #26
   1f030:	bcs	1f038 <__assert_fail@plt+0xcfac>
   1f034:	bx	lr
   1f038:	sub	r1, r1, #48	; 0x30
   1f03c:	cmp	r1, #10
   1f040:	movcs	r0, #0
   1f044:	bx	lr
   1f048:	sub	r2, r0, #65	; 0x41
   1f04c:	mov	r1, r0
   1f050:	mov	r0, #1
   1f054:	cmp	r2, #26
   1f058:	subcs	r1, r1, #97	; 0x61
   1f05c:	cmpcs	r1, #26
   1f060:	movcs	r0, #0
   1f064:	bx	lr
   1f068:	cmp	r0, #128	; 0x80
   1f06c:	mov	r1, #0
   1f070:	movwcc	r1, #1
   1f074:	mov	r0, r1
   1f078:	bx	lr
   1f07c:	sub	r1, r0, #9
   1f080:	sub	r0, r0, #32
   1f084:	clz	r1, r1
   1f088:	clz	r0, r0
   1f08c:	lsr	r1, r1, #5
   1f090:	lsr	r0, r0, #5
   1f094:	orr	r0, r0, r1
   1f098:	bx	lr
   1f09c:	mov	r1, r0
   1f0a0:	mov	r0, #1
   1f0a4:	cmp	r1, #32
   1f0a8:	bxcc	lr
   1f0ac:	cmp	r1, #127	; 0x7f
   1f0b0:	movne	r0, #0
   1f0b4:	bx	lr
   1f0b8:	sub	r1, r0, #48	; 0x30
   1f0bc:	mov	r0, #0
   1f0c0:	cmp	r1, #10
   1f0c4:	movwcc	r0, #1
   1f0c8:	bx	lr
   1f0cc:	sub	r1, r0, #33	; 0x21
   1f0d0:	mov	r0, #0
   1f0d4:	cmp	r1, #94	; 0x5e
   1f0d8:	movwcc	r0, #1
   1f0dc:	bx	lr
   1f0e0:	sub	r1, r0, #97	; 0x61
   1f0e4:	mov	r0, #0
   1f0e8:	cmp	r1, #26
   1f0ec:	movwcc	r0, #1
   1f0f0:	bx	lr
   1f0f4:	sub	r1, r0, #32
   1f0f8:	mov	r0, #0
   1f0fc:	cmp	r1, #95	; 0x5f
   1f100:	movwcc	r0, #1
   1f104:	bx	lr
   1f108:	sub	r1, r0, #33	; 0x21
   1f10c:	cmp	r1, #93	; 0x5d
   1f110:	bhi	1f29c <__assert_fail@plt+0xd210>
   1f114:	add	r2, pc, #4
   1f118:	mov	r0, #1
   1f11c:	ldr	pc, [r2, r1, lsl #2]
   1f120:	muleq	r1, r8, r2
   1f124:	muleq	r1, r8, r2
   1f128:	muleq	r1, r8, r2
   1f12c:	muleq	r1, r8, r2
   1f130:	muleq	r1, r8, r2
   1f134:	muleq	r1, r8, r2
   1f138:	muleq	r1, r8, r2
   1f13c:	muleq	r1, r8, r2
   1f140:	muleq	r1, r8, r2
   1f144:	muleq	r1, r8, r2
   1f148:	muleq	r1, r8, r2
   1f14c:	muleq	r1, r8, r2
   1f150:	muleq	r1, r8, r2
   1f154:	muleq	r1, r8, r2
   1f158:	muleq	r1, r8, r2
   1f15c:	muleq	r1, ip, r2
   1f160:	muleq	r1, ip, r2
   1f164:	muleq	r1, ip, r2
   1f168:	muleq	r1, ip, r2
   1f16c:	muleq	r1, ip, r2
   1f170:	muleq	r1, ip, r2
   1f174:	muleq	r1, ip, r2
   1f178:	muleq	r1, ip, r2
   1f17c:	muleq	r1, ip, r2
   1f180:	muleq	r1, ip, r2
   1f184:	muleq	r1, r8, r2
   1f188:	muleq	r1, r8, r2
   1f18c:	muleq	r1, r8, r2
   1f190:	muleq	r1, r8, r2
   1f194:	muleq	r1, r8, r2
   1f198:	muleq	r1, r8, r2
   1f19c:	muleq	r1, r8, r2
   1f1a0:	muleq	r1, ip, r2
   1f1a4:	muleq	r1, ip, r2
   1f1a8:	muleq	r1, ip, r2
   1f1ac:	muleq	r1, ip, r2
   1f1b0:	muleq	r1, ip, r2
   1f1b4:	muleq	r1, ip, r2
   1f1b8:	muleq	r1, ip, r2
   1f1bc:	muleq	r1, ip, r2
   1f1c0:	muleq	r1, ip, r2
   1f1c4:	muleq	r1, ip, r2
   1f1c8:	muleq	r1, ip, r2
   1f1cc:	muleq	r1, ip, r2
   1f1d0:	muleq	r1, ip, r2
   1f1d4:	muleq	r1, ip, r2
   1f1d8:	muleq	r1, ip, r2
   1f1dc:	muleq	r1, ip, r2
   1f1e0:	muleq	r1, ip, r2
   1f1e4:	muleq	r1, ip, r2
   1f1e8:	muleq	r1, ip, r2
   1f1ec:	muleq	r1, ip, r2
   1f1f0:	muleq	r1, ip, r2
   1f1f4:	muleq	r1, ip, r2
   1f1f8:	muleq	r1, ip, r2
   1f1fc:	muleq	r1, ip, r2
   1f200:	muleq	r1, ip, r2
   1f204:	muleq	r1, ip, r2
   1f208:	muleq	r1, r8, r2
   1f20c:	muleq	r1, r8, r2
   1f210:	muleq	r1, r8, r2
   1f214:	muleq	r1, r8, r2
   1f218:	muleq	r1, r8, r2
   1f21c:	muleq	r1, r8, r2
   1f220:	muleq	r1, ip, r2
   1f224:	muleq	r1, ip, r2
   1f228:	muleq	r1, ip, r2
   1f22c:	muleq	r1, ip, r2
   1f230:	muleq	r1, ip, r2
   1f234:	muleq	r1, ip, r2
   1f238:	muleq	r1, ip, r2
   1f23c:	muleq	r1, ip, r2
   1f240:	muleq	r1, ip, r2
   1f244:	muleq	r1, ip, r2
   1f248:	muleq	r1, ip, r2
   1f24c:	muleq	r1, ip, r2
   1f250:	muleq	r1, ip, r2
   1f254:	muleq	r1, ip, r2
   1f258:	muleq	r1, ip, r2
   1f25c:	muleq	r1, ip, r2
   1f260:	muleq	r1, ip, r2
   1f264:	muleq	r1, ip, r2
   1f268:	muleq	r1, ip, r2
   1f26c:	muleq	r1, ip, r2
   1f270:	muleq	r1, ip, r2
   1f274:	muleq	r1, ip, r2
   1f278:	muleq	r1, ip, r2
   1f27c:	muleq	r1, ip, r2
   1f280:	muleq	r1, ip, r2
   1f284:	muleq	r1, ip, r2
   1f288:	muleq	r1, r8, r2
   1f28c:	muleq	r1, r8, r2
   1f290:	muleq	r1, r8, r2
   1f294:	muleq	r1, r8, r2
   1f298:	bx	lr
   1f29c:	mov	r0, #0
   1f2a0:	bx	lr
   1f2a4:	sub	r0, r0, #9
   1f2a8:	cmp	r0, #23
   1f2ac:	movhi	r0, #0
   1f2b0:	bxhi	lr
   1f2b4:	movw	r1, #31
   1f2b8:	bic	r0, r0, #-16777216	; 0xff000000
   1f2bc:	mov	r2, #1
   1f2c0:	movt	r1, #128	; 0x80
   1f2c4:	and	r0, r2, r1, lsr r0
   1f2c8:	bx	lr
   1f2cc:	sub	r1, r0, #65	; 0x41
   1f2d0:	mov	r0, #0
   1f2d4:	cmp	r1, #26
   1f2d8:	movwcc	r0, #1
   1f2dc:	bx	lr
   1f2e0:	sub	r2, r0, #48	; 0x30
   1f2e4:	mov	r1, r0
   1f2e8:	mov	r0, #1
   1f2ec:	cmp	r2, #22
   1f2f0:	bhi	1f308 <__assert_fail@plt+0xd27c>
   1f2f4:	movw	r3, #1023	; 0x3ff
   1f2f8:	mov	ip, #1
   1f2fc:	movt	r3, #126	; 0x7e
   1f300:	tst	r3, ip, lsl r2
   1f304:	bxne	lr
   1f308:	sub	r1, r1, #97	; 0x61
   1f30c:	cmp	r1, #6
   1f310:	movcs	r0, #0
   1f314:	bxcs	lr
   1f318:	bx	lr
   1f31c:	sub	r1, r0, #65	; 0x41
   1f320:	cmp	r1, #26
   1f324:	addcc	r0, r0, #32
   1f328:	bx	lr
   1f32c:	sub	r1, r0, #97	; 0x61
   1f330:	cmp	r1, #26
   1f334:	subcc	r0, r0, #32
   1f338:	bx	lr
   1f33c:	push	{fp, lr}
   1f340:	mov	fp, sp
   1f344:	cmp	r0, r1
   1f348:	mov	r3, #0
   1f34c:	cmpne	r2, #0
   1f350:	bne	1f35c <__assert_fail@plt+0xd2d0>
   1f354:	mov	r0, r3
   1f358:	pop	{fp, pc}
   1f35c:	sub	lr, r2, #1
   1f360:	ldrb	r2, [r1]
   1f364:	ldrb	ip, [r0]
   1f368:	sub	r3, r2, #65	; 0x41
   1f36c:	cmp	r3, #26
   1f370:	sub	r3, ip, #65	; 0x41
   1f374:	addcc	r2, r2, #32
   1f378:	cmp	r3, #26
   1f37c:	addcc	ip, ip, #32
   1f380:	cmp	lr, #0
   1f384:	uxtb	ip, ip
   1f388:	beq	1f3ac <__assert_fail@plt+0xd320>
   1f38c:	cmp	ip, #0
   1f390:	beq	1f3bc <__assert_fail@plt+0xd330>
   1f394:	uxtb	r3, r2
   1f398:	sub	lr, lr, #1
   1f39c:	add	r1, r1, #1
   1f3a0:	add	r0, r0, #1
   1f3a4:	cmp	ip, r3
   1f3a8:	beq	1f360 <__assert_fail@plt+0xd2d4>
   1f3ac:	uxtb	r0, r2
   1f3b0:	sub	r3, ip, r0
   1f3b4:	mov	r0, r3
   1f3b8:	pop	{fp, pc}
   1f3bc:	mov	ip, #0
   1f3c0:	uxtb	r0, r2
   1f3c4:	sub	r3, ip, r0
   1f3c8:	mov	r0, r3
   1f3cc:	pop	{fp, pc}
   1f3d0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1f3d4:	add	fp, sp, #28
   1f3d8:	sub	sp, sp, #180	; 0xb4
   1f3dc:	sub	sp, sp, #3072	; 0xc00
   1f3e0:	and	r7, r1, #3
   1f3e4:	mov	r8, r0
   1f3e8:	sub	r0, r7, #1
   1f3ec:	tst	r7, r0
   1f3f0:	bne	1f4bc <__assert_fail@plt+0xd430>
   1f3f4:	cmp	r8, #0
   1f3f8:	beq	1f4bc <__assert_fail@plt+0xd430>
   1f3fc:	ldrb	r0, [r8]
   1f400:	cmp	r0, #0
   1f404:	beq	1fa38 <__assert_fail@plt+0xd9ac>
   1f408:	mov	r4, r1
   1f40c:	mov	r1, #1024	; 0x400
   1f410:	sub	lr, fp, #1024	; 0x400
   1f414:	cmp	r0, #47	; 0x2f
   1f418:	str	r1, [fp, #-1060]	; 0xfffffbdc
   1f41c:	str	r1, [sp, #52]	; 0x34
   1f420:	str	r1, [sp, #1188]	; 0x4a4
   1f424:	add	r1, sp, #1184	; 0x4a0
   1f428:	sub	r2, lr, #40	; 0x28
   1f42c:	add	r1, r1, #8
   1f430:	add	r2, r2, #8
   1f434:	str	r1, [sp, #16]
   1f438:	str	r1, [sp, #1184]	; 0x4a0
   1f43c:	add	r1, sp, #48	; 0x30
   1f440:	str	r2, [sp, #12]
   1f444:	str	r2, [fp, #-1064]	; 0xfffffbd8
   1f448:	add	r5, r1, #8
   1f44c:	mov	r0, r5
   1f450:	str	r5, [sp, #48]	; 0x30
   1f454:	str	r5, [sp, #8]
   1f458:	bne	1fa44 <__assert_fail@plt+0xd9b8>
   1f45c:	mov	r1, r8
   1f460:	mov	r2, #0
   1f464:	mov	r3, #1024	; 0x400
   1f468:	bl	12080 <__mempcpy_chk@plt>
   1f46c:	mov	r6, r0
   1f470:	mov	r0, #47	; 0x2f
   1f474:	strb	r0, [r6], #1
   1f478:	ldrb	r0, [r8]
   1f47c:	cmp	r0, #0
   1f480:	beq	1fa70 <__assert_fail@plt+0xd9e4>
   1f484:	and	r1, r4, #4
   1f488:	add	r9, sp, #48	; 0x30
   1f48c:	str	r7, [sp, #32]
   1f490:	str	r1, [sp, #40]	; 0x28
   1f494:	mov	r1, #0
   1f498:	str	r1, [sp, #24]
   1f49c:	mov	r1, #0
   1f4a0:	str	r1, [sp, #36]	; 0x24
   1f4a4:	mov	r1, #0
   1f4a8:	str	r1, [sp, #20]
   1f4ac:	uxtb	r1, r0
   1f4b0:	cmp	r1, #47	; 0x2f
   1f4b4:	beq	1f4f4 <__assert_fail@plt+0xd468>
   1f4b8:	b	1f500 <__assert_fail@plt+0xd474>
   1f4bc:	bl	11ed0 <__errno_location@plt>
   1f4c0:	mov	r1, #22
   1f4c4:	mov	r4, #0
   1f4c8:	str	r1, [r0]
   1f4cc:	mov	r0, r4
   1f4d0:	sub	sp, fp, #28
   1f4d4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1f4d8:	mov	r8, sl
   1f4dc:	ldrb	r0, [r8]
   1f4e0:	cmp	r0, #0
   1f4e4:	beq	1fa78 <__assert_fail@plt+0xd9ec>
   1f4e8:	uxtb	r1, r0
   1f4ec:	cmp	r1, #47	; 0x2f
   1f4f0:	bne	1f500 <__assert_fail@plt+0xd474>
   1f4f4:	ldrb	r0, [r8, #1]!
   1f4f8:	cmp	r0, #47	; 0x2f
   1f4fc:	beq	1f4f4 <__assert_fail@plt+0xd468>
   1f500:	mov	r1, r0
   1f504:	mov	sl, r8
   1f508:	b	1f510 <__assert_fail@plt+0xd484>
   1f50c:	ldrb	r1, [sl, #1]!
   1f510:	uxtb	r1, r1
   1f514:	cmp	r1, #0
   1f518:	cmpne	r1, #47	; 0x2f
   1f51c:	bne	1f50c <__assert_fail@plt+0xd480>
   1f520:	sub	r2, sl, r8
   1f524:	cmp	r2, #1
   1f528:	beq	1f540 <__assert_fail@plt+0xd4b4>
   1f52c:	cmp	r2, #2
   1f530:	beq	1f560 <__assert_fail@plt+0xd4d4>
   1f534:	cmp	r2, #0
   1f538:	bne	1f5b8 <__assert_fail@plt+0xd52c>
   1f53c:	b	1fa78 <__assert_fail@plt+0xd9ec>
   1f540:	uxtb	r0, r0
   1f544:	cmp	r0, #46	; 0x2e
   1f548:	bne	1f5b8 <__assert_fail@plt+0xd52c>
   1f54c:	mov	r8, sl
   1f550:	ldrb	r0, [r8]
   1f554:	cmp	r0, #0
   1f558:	bne	1f4e8 <__assert_fail@plt+0xd45c>
   1f55c:	b	1fa78 <__assert_fail@plt+0xd9ec>
   1f560:	uxtb	r0, r0
   1f564:	cmp	r0, #46	; 0x2e
   1f568:	bne	1f5b8 <__assert_fail@plt+0xd52c>
   1f56c:	ldrb	r0, [r8, #1]
   1f570:	cmp	r0, #46	; 0x2e
   1f574:	bne	1f5b8 <__assert_fail@plt+0xd52c>
   1f578:	add	r0, r5, #1
   1f57c:	cmp	r6, r0
   1f580:	bls	1f868 <__assert_fail@plt+0xd7dc>
   1f584:	sub	r0, r6, #1
   1f588:	mov	r6, r0
   1f58c:	cmp	r0, r5
   1f590:	bls	1fa10 <__assert_fail@plt+0xd984>
   1f594:	mov	r0, r6
   1f598:	ldrb	r1, [r0, #-1]!
   1f59c:	cmp	r1, #47	; 0x2f
   1f5a0:	bne	1f588 <__assert_fail@plt+0xd4fc>
   1f5a4:	mov	r8, sl
   1f5a8:	ldrb	r0, [r8]
   1f5ac:	cmp	r0, #0
   1f5b0:	bne	1f4e8 <__assert_fail@plt+0xd45c>
   1f5b4:	b	1fa78 <__assert_fail@plt+0xd9ec>
   1f5b8:	ldrb	r0, [r6, #-1]
   1f5bc:	add	r4, r2, #2
   1f5c0:	str	r2, [sp, #44]	; 0x2c
   1f5c4:	cmp	r0, #47	; 0x2f
   1f5c8:	movne	r0, #47	; 0x2f
   1f5cc:	strbne	r0, [r6], #1
   1f5d0:	ldr	r0, [sp, #52]	; 0x34
   1f5d4:	add	r0, r5, r0
   1f5d8:	sub	r0, r0, r6
   1f5dc:	cmp	r0, r4
   1f5e0:	bcs	1f618 <__assert_fail@plt+0xd58c>
   1f5e4:	mov	r0, r9
   1f5e8:	bl	27f84 <_obstack_memory_used@@Base+0x2130>
   1f5ec:	cmp	r0, #0
   1f5f0:	beq	1fb78 <__assert_fail@plt+0xdaec>
   1f5f4:	sub	r0, r6, r5
   1f5f8:	ldr	r5, [sp, #48]	; 0x30
   1f5fc:	ldr	r1, [sp, #52]	; 0x34
   1f600:	add	r6, r5, r0
   1f604:	add	r0, r5, r1
   1f608:	sub	r0, r0, r6
   1f60c:	cmp	r0, r4
   1f610:	bcc	1f5e4 <__assert_fail@plt+0xd558>
   1f614:	ldr	r2, [sp, #44]	; 0x2c
   1f618:	mov	r0, r6
   1f61c:	mov	r1, r8
   1f620:	mvn	r3, #0
   1f624:	bl	12080 <__mempcpy_chk@plt>
   1f628:	mov	r6, r0
   1f62c:	mov	r0, #0
   1f630:	strb	r0, [r6]
   1f634:	ldr	r0, [sp, #40]	; 0x28
   1f638:	cmp	r0, #0
   1f63c:	bne	1f6a0 <__assert_fail@plt+0xd614>
   1f640:	ldr	r0, [sp, #1188]	; 0x4a4
   1f644:	ldr	r7, [sp, #1184]	; 0x4a0
   1f648:	sub	r9, r0, #1
   1f64c:	mov	r0, r5
   1f650:	mov	r1, r7
   1f654:	mov	r2, r9
   1f658:	bl	11d2c <readlink@plt>
   1f65c:	cmp	r0, r9
   1f660:	blt	1f678 <__assert_fail@plt+0xd5ec>
   1f664:	add	r0, sp, #1184	; 0x4a0
   1f668:	bl	27f14 <_obstack_memory_used@@Base+0x20c0>
   1f66c:	cmp	r0, #0
   1f670:	bne	1f640 <__assert_fail@plt+0xd5b4>
   1f674:	b	1fb78 <__assert_fail@plt+0xdaec>
   1f678:	mov	r4, r0
   1f67c:	cmp	r0, #0
   1f680:	add	r9, sp, #48	; 0x30
   1f684:	bmi	1f6a0 <__assert_fail@plt+0xd614>
   1f688:	ldr	r0, [sp, #24]
   1f68c:	cmp	r0, #19
   1f690:	bgt	1f73c <__assert_fail@plt+0xd6b0>
   1f694:	add	r0, r0, #1
   1f698:	str	r0, [sp, #24]
   1f69c:	b	1f8ec <__assert_fail@plt+0xd860>
   1f6a0:	ldr	r7, [sp, #32]
   1f6a4:	cmp	r7, #2
   1f6a8:	beq	1f4d8 <__assert_fail@plt+0xd44c>
   1f6ac:	ldrb	r0, [sl]
   1f6b0:	cmp	r0, #47	; 0x2f
   1f6b4:	bne	1f81c <__assert_fail@plt+0xd790>
   1f6b8:	mov	r2, sl
   1f6bc:	mov	r1, r2
   1f6c0:	ldrb	r3, [r2, #1]!
   1f6c4:	cmp	r3, #47	; 0x2f
   1f6c8:	beq	1f6bc <__assert_fail@plt+0xd630>
   1f6cc:	cmp	r3, #46	; 0x2e
   1f6d0:	bne	1f814 <__assert_fail@plt+0xd788>
   1f6d4:	add	r2, r1, #2
   1f6d8:	ldrb	r3, [r2]
   1f6dc:	cmp	r3, #47	; 0x2f
   1f6e0:	beq	1f6bc <__assert_fail@plt+0xd630>
   1f6e4:	cmp	r3, #0
   1f6e8:	beq	1f704 <__assert_fail@plt+0xd678>
   1f6ec:	cmp	r3, #46	; 0x2e
   1f6f0:	bne	1f81c <__assert_fail@plt+0xd790>
   1f6f4:	ldrb	r1, [r1, #3]
   1f6f8:	cmp	r1, #47	; 0x2f
   1f6fc:	cmpne	r1, #0
   1f700:	bne	1f81c <__assert_fail@plt+0xd790>
   1f704:	mov	r0, #47	; 0x2f
   1f708:	mov	r1, r5
   1f70c:	mov	r2, #0
   1f710:	mov	r3, #512	; 0x200
   1f714:	strh	r0, [r6]
   1f718:	mvn	r0, #99	; 0x63
   1f71c:	bl	11c3c <faccessat@plt>
   1f720:	cmp	r0, #0
   1f724:	bne	1f898 <__assert_fail@plt+0xd80c>
   1f728:	mov	r8, sl
   1f72c:	ldrb	r0, [r8]
   1f730:	cmp	r0, #0
   1f734:	bne	1f4e8 <__assert_fail@plt+0xd45c>
   1f738:	b	1fa78 <__assert_fail@plt+0xd9ec>
   1f73c:	ldrb	r0, [r8]
   1f740:	add	lr, sp, #1024	; 0x400
   1f744:	add	r2, lr, #56	; 0x38
   1f748:	cmp	r0, #0
   1f74c:	beq	1f8ec <__assert_fail@plt+0xd860>
   1f750:	ldr	r9, [sp, #44]	; 0x2c
   1f754:	mov	r0, #0
   1f758:	mov	r1, r5
   1f75c:	strb	r0, [r6, -r9]
   1f760:	ldrb	r0, [r5]
   1f764:	cmp	r0, #0
   1f768:	movw	r0, #61162	; 0xeeea
   1f76c:	movt	r0, #2
   1f770:	moveq	r1, r0
   1f774:	mov	r0, #3
   1f778:	bl	12008 <__xstat64@plt>
   1f77c:	cmp	r0, #0
   1f780:	bne	1fb88 <__assert_fail@plt+0xdafc>
   1f784:	rsb	r0, r9, #0
   1f788:	ldr	r9, [sp, #20]
   1f78c:	ldrb	r1, [r8]
   1f790:	cmp	r9, #0
   1f794:	strb	r1, [r6, r0]
   1f798:	bne	1f7d0 <__assert_fail@plt+0xd744>
   1f79c:	movw	r0, #6936	; 0x1b18
   1f7a0:	movw	r2, #6776	; 0x1a78
   1f7a4:	movw	r3, #6832	; 0x1ab0
   1f7a8:	mov	r1, #0
   1f7ac:	movt	r0, #2
   1f7b0:	movt	r2, #2
   1f7b4:	movt	r3, #2
   1f7b8:	str	r0, [sp]
   1f7bc:	mov	r0, #7
   1f7c0:	bl	20b1c <__assert_fail@plt+0xea90>
   1f7c4:	mov	r9, r0
   1f7c8:	cmp	r0, #0
   1f7cc:	beq	1fb78 <__assert_fail@plt+0xdaec>
   1f7d0:	add	lr, sp, #1024	; 0x400
   1f7d4:	mov	r0, r9
   1f7d8:	mov	r1, r8
   1f7dc:	add	r2, lr, #56	; 0x38
   1f7e0:	bl	1fe08 <__assert_fail@plt+0xdd7c>
   1f7e4:	cmp	r0, #0
   1f7e8:	str	r9, [sp, #20]
   1f7ec:	beq	1f8d8 <__assert_fail@plt+0xd84c>
   1f7f0:	ldr	r7, [sp, #32]
   1f7f4:	cmp	r7, #2
   1f7f8:	bne	1fb7c <__assert_fail@plt+0xdaf0>
   1f7fc:	mov	r8, sl
   1f800:	add	r9, sp, #48	; 0x30
   1f804:	ldrb	r0, [r8]
   1f808:	cmp	r0, #0
   1f80c:	bne	1f4e8 <__assert_fail@plt+0xd45c>
   1f810:	b	1fa78 <__assert_fail@plt+0xd9ec>
   1f814:	cmp	r3, #0
   1f818:	beq	1f704 <__assert_fail@plt+0xd678>
   1f81c:	ldr	r1, [sp, #40]	; 0x28
   1f820:	cmp	r1, #0
   1f824:	beq	1f844 <__assert_fail@plt+0xd7b8>
   1f828:	cmp	r0, #0
   1f82c:	beq	1f87c <__assert_fail@plt+0xd7f0>
   1f830:	mov	r8, sl
   1f834:	ldrb	r0, [r8]
   1f838:	cmp	r0, #0
   1f83c:	bne	1f4e8 <__assert_fail@plt+0xd45c>
   1f840:	b	1fa78 <__assert_fail@plt+0xd9ec>
   1f844:	bl	11ed0 <__errno_location@plt>
   1f848:	ldr	r0, [r0]
   1f84c:	cmp	r0, #22
   1f850:	bne	1f898 <__assert_fail@plt+0xd80c>
   1f854:	mov	r8, sl
   1f858:	ldrb	r0, [r8]
   1f85c:	cmp	r0, #0
   1f860:	bne	1f4e8 <__assert_fail@plt+0xd45c>
   1f864:	b	1fa78 <__assert_fail@plt+0xd9ec>
   1f868:	mov	r8, sl
   1f86c:	ldrb	r0, [r8]
   1f870:	cmp	r0, #0
   1f874:	bne	1f4e8 <__assert_fail@plt+0xd45c>
   1f878:	b	1fa78 <__assert_fail@plt+0xd9ec>
   1f87c:	mvn	r0, #99	; 0x63
   1f880:	mov	r1, r5
   1f884:	mov	r2, #0
   1f888:	mov	r3, #512	; 0x200
   1f88c:	bl	11c3c <faccessat@plt>
   1f890:	cmp	r0, #0
   1f894:	beq	1fa24 <__assert_fail@plt+0xd998>
   1f898:	mov	r4, #1
   1f89c:	cmp	r7, #1
   1f8a0:	bne	1fa98 <__assert_fail@plt+0xda0c>
   1f8a4:	bl	11ed0 <__errno_location@plt>
   1f8a8:	ldr	r0, [r0]
   1f8ac:	cmp	r0, #2
   1f8b0:	bne	1fa98 <__assert_fail@plt+0xda0c>
   1f8b4:	movw	r1, #45256	; 0xb0c8
   1f8b8:	mov	r0, sl
   1f8bc:	movt	r1, #2
   1f8c0:	bl	12074 <strspn@plt>
   1f8c4:	ldrb	r0, [sl, r0]
   1f8c8:	mov	r8, sl
   1f8cc:	cmp	r0, #0
   1f8d0:	beq	1f4dc <__assert_fail@plt+0xd450>
   1f8d4:	b	1fa98 <__assert_fail@plt+0xda0c>
   1f8d8:	add	lr, sp, #1024	; 0x400
   1f8dc:	mov	r0, r9
   1f8e0:	mov	r1, r8
   1f8e4:	add	r2, lr, #56	; 0x38
   1f8e8:	bl	1fd8c <__assert_fail@plt+0xdd00>
   1f8ec:	mov	r0, #0
   1f8f0:	strb	r0, [r7, r4]
   1f8f4:	ldr	r0, [sp, #36]	; 0x24
   1f8f8:	ldr	r8, [fp, #-1064]	; 0xfffffbd8
   1f8fc:	tst	r0, #1
   1f900:	ldr	r0, [sp, #28]
   1f904:	subne	r0, sl, r8
   1f908:	str	r0, [sp, #28]
   1f90c:	mov	r0, sl
   1f910:	bl	11eac <strlen@plt>
   1f914:	mvn	r1, r4
   1f918:	cmp	r0, r1
   1f91c:	bhi	1fb78 <__assert_fail@plt+0xdaec>
   1f920:	str	r0, [sp, #44]	; 0x2c
   1f924:	add	r9, r0, r4
   1f928:	ldr	r0, [fp, #-1060]	; 0xfffffbdc
   1f92c:	cmp	r0, r9
   1f930:	bhi	1f958 <__assert_fail@plt+0xd8cc>
   1f934:	sub	lr, fp, #1024	; 0x400
   1f938:	sub	r0, lr, #40	; 0x28
   1f93c:	bl	27f84 <_obstack_memory_used@@Base+0x2130>
   1f940:	cmp	r0, #0
   1f944:	beq	1fb78 <__assert_fail@plt+0xdaec>
   1f948:	ldr	r0, [fp, #-1060]	; 0xfffffbdc
   1f94c:	cmp	r0, r9
   1f950:	bls	1f934 <__assert_fail@plt+0xd8a8>
   1f954:	ldr	r8, [fp, #-1064]	; 0xfffffbd8
   1f958:	ldr	r0, [sp, #36]	; 0x24
   1f95c:	ldr	r1, [sp, #44]	; 0x2c
   1f960:	tst	r0, #1
   1f964:	ldr	r0, [sp, #28]
   1f968:	add	r2, r1, #1
   1f96c:	addne	sl, r8, r0
   1f970:	add	r0, r8, r4
   1f974:	mov	r1, sl
   1f978:	bl	11c24 <memmove@plt>
   1f97c:	mov	r0, r8
   1f980:	mov	r1, r7
   1f984:	mov	r2, r4
   1f988:	bl	11c60 <memcpy@plt>
   1f98c:	ldrb	r0, [r7]
   1f990:	cmp	r0, #47	; 0x2f
   1f994:	bne	1f9d4 <__assert_fail@plt+0xd948>
   1f998:	mov	r0, r5
   1f99c:	mov	r1, r7
   1f9a0:	mov	r2, #0
   1f9a4:	mvn	r3, #0
   1f9a8:	bl	12080 <__mempcpy_chk@plt>
   1f9ac:	mov	r6, r0
   1f9b0:	mov	r0, #47	; 0x2f
   1f9b4:	strb	r0, [r6], #1
   1f9b8:	mov	r0, #1
   1f9bc:	str	r0, [sp, #36]	; 0x24
   1f9c0:	add	r9, sp, #48	; 0x30
   1f9c4:	ldrb	r0, [r8]
   1f9c8:	cmp	r0, #0
   1f9cc:	bne	1f4e8 <__assert_fail@plt+0xd45c>
   1f9d0:	b	1fa78 <__assert_fail@plt+0xd9ec>
   1f9d4:	add	r0, r5, #1
   1f9d8:	mov	r1, #1
   1f9dc:	add	r9, sp, #48	; 0x30
   1f9e0:	cmp	r6, r0
   1f9e4:	str	r1, [sp, #36]	; 0x24
   1f9e8:	bls	1f4dc <__assert_fail@plt+0xd450>
   1f9ec:	sub	r0, r6, #1
   1f9f0:	mov	r6, r0
   1f9f4:	cmp	r0, r5
   1f9f8:	bls	1f4dc <__assert_fail@plt+0xd450>
   1f9fc:	mov	r0, r6
   1fa00:	ldrb	r1, [r0, #-1]!
   1fa04:	cmp	r1, #47	; 0x2f
   1fa08:	bne	1f9f0 <__assert_fail@plt+0xd964>
   1fa0c:	b	1f4dc <__assert_fail@plt+0xd450>
   1fa10:	mov	r8, sl
   1fa14:	ldrb	r0, [r8]
   1fa18:	cmp	r0, #0
   1fa1c:	bne	1f4e8 <__assert_fail@plt+0xd45c>
   1fa20:	b	1fa78 <__assert_fail@plt+0xd9ec>
   1fa24:	mov	r8, sl
   1fa28:	ldrb	r0, [r8]
   1fa2c:	cmp	r0, #0
   1fa30:	bne	1f4e8 <__assert_fail@plt+0xd45c>
   1fa34:	b	1fa78 <__assert_fail@plt+0xd9ec>
   1fa38:	bl	11ed0 <__errno_location@plt>
   1fa3c:	mov	r1, #2
   1fa40:	b	1f4c4 <__assert_fail@plt+0xd438>
   1fa44:	mov	r1, #1024	; 0x400
   1fa48:	bl	11e70 <getcwd@plt>
   1fa4c:	cmp	r0, #0
   1fa50:	beq	1faac <__assert_fail@plt+0xda20>
   1fa54:	mov	r0, r5
   1fa58:	mov	r1, #0
   1fa5c:	bl	11cfc <rawmemchr@plt>
   1fa60:	mov	r6, r0
   1fa64:	ldrb	r0, [r8]
   1fa68:	cmp	r0, #0
   1fa6c:	bne	1f484 <__assert_fail@plt+0xd3f8>
   1fa70:	mov	r0, #0
   1fa74:	str	r0, [sp, #20]
   1fa78:	add	r0, r5, #1
   1fa7c:	cmp	r6, r0
   1fa80:	bls	1fa94 <__assert_fail@plt+0xda08>
   1fa84:	mov	r0, r6
   1fa88:	ldrb	r1, [r0, #-1]!
   1fa8c:	cmp	r1, #47	; 0x2f
   1fa90:	moveq	r6, r0
   1fa94:	mov	r4, #0
   1fa98:	ldr	r0, [sp, #20]
   1fa9c:	cmp	r0, #0
   1faa0:	beq	1fb04 <__assert_fail@plt+0xda78>
   1faa4:	bl	20e38 <__assert_fail@plt+0xedac>
   1faa8:	b	1fb04 <__assert_fail@plt+0xda78>
   1faac:	bl	11ed0 <__errno_location@plt>
   1fab0:	ldr	r5, [sp, #8]
   1fab4:	mov	r6, r0
   1fab8:	add	r9, sp, #48	; 0x30
   1fabc:	ldr	r0, [r6]
   1fac0:	cmp	r0, #34	; 0x22
   1fac4:	bne	1faf4 <__assert_fail@plt+0xda68>
   1fac8:	mov	r0, r9
   1facc:	bl	27f14 <_obstack_memory_used@@Base+0x20c0>
   1fad0:	cmp	r0, #0
   1fad4:	beq	1fb78 <__assert_fail@plt+0xdaec>
   1fad8:	ldr	r5, [sp, #48]	; 0x30
   1fadc:	ldr	r1, [sp, #52]	; 0x34
   1fae0:	mov	r0, r5
   1fae4:	bl	11e70 <getcwd@plt>
   1fae8:	cmp	r0, #0
   1faec:	beq	1fabc <__assert_fail@plt+0xda30>
   1faf0:	b	1fa54 <__assert_fail@plt+0xd9c8>
   1faf4:	cmp	r0, #12
   1faf8:	beq	1fb78 <__assert_fail@plt+0xdaec>
   1fafc:	mov	r4, #1
   1fb00:	mov	r6, r5
   1fb04:	ldr	r1, [sp, #12]
   1fb08:	ldr	r0, [fp, #-1064]	; 0xfffffbd8
   1fb0c:	ldr	r7, [sp, #16]
   1fb10:	cmp	r0, r1
   1fb14:	beq	1fb1c <__assert_fail@plt+0xda90>
   1fb18:	bl	2056c <__assert_fail@plt+0xe4e0>
   1fb1c:	ldr	r0, [sp, #1184]	; 0x4a0
   1fb20:	cmp	r0, r7
   1fb24:	beq	1fb2c <__assert_fail@plt+0xdaa0>
   1fb28:	bl	2056c <__assert_fail@plt+0xe4e0>
   1fb2c:	cmp	r4, #0
   1fb30:	beq	1fb58 <__assert_fail@plt+0xdacc>
   1fb34:	ldr	r0, [sp, #48]	; 0x30
   1fb38:	ldr	r1, [sp, #8]
   1fb3c:	mov	r4, #0
   1fb40:	cmp	r0, r1
   1fb44:	beq	1f4cc <__assert_fail@plt+0xd440>
   1fb48:	bl	2056c <__assert_fail@plt+0xe4e0>
   1fb4c:	mov	r0, r4
   1fb50:	sub	sp, fp, #28
   1fb54:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1fb58:	mov	r0, #0
   1fb5c:	strb	r0, [r6], -r5
   1fb60:	add	r0, sp, #48	; 0x30
   1fb64:	add	r1, r6, #1
   1fb68:	bl	27ea8 <_obstack_memory_used@@Base+0x2054>
   1fb6c:	mov	r4, r0
   1fb70:	cmp	r0, #0
   1fb74:	bne	1f4cc <__assert_fail@plt+0xd440>
   1fb78:	bl	295cc <_obstack_memory_used@@Base+0x3778>
   1fb7c:	bl	11ed0 <__errno_location@plt>
   1fb80:	mov	r1, #40	; 0x28
   1fb84:	str	r1, [r0]
   1fb88:	mov	r4, #1
   1fb8c:	ldr	r0, [sp, #20]
   1fb90:	cmp	r0, #0
   1fb94:	bne	1faa4 <__assert_fail@plt+0xda18>
   1fb98:	b	1fb04 <__assert_fail@plt+0xda78>
   1fb9c:	movw	r1, #5024	; 0x13a0
   1fba0:	movt	r1, #4
   1fba4:	str	r0, [r1, #4]
   1fba8:	bx	lr
   1fbac:	movw	r1, #5024	; 0x13a0
   1fbb0:	movt	r1, #4
   1fbb4:	strb	r0, [r1]
   1fbb8:	bx	lr
   1fbbc:	push	{r4, r5, r6, sl, fp, lr}
   1fbc0:	add	fp, sp, #16
   1fbc4:	sub	sp, sp, #8
   1fbc8:	movw	r0, #780	; 0x30c
   1fbcc:	movt	r0, #4
   1fbd0:	ldr	r0, [r0]
   1fbd4:	bl	2a6cc <_obstack_memory_used@@Base+0x4878>
   1fbd8:	cmp	r0, #0
   1fbdc:	beq	1fc04 <__assert_fail@plt+0xdb78>
   1fbe0:	movw	r5, #5024	; 0x13a0
   1fbe4:	movt	r5, #4
   1fbe8:	ldrb	r0, [r5]
   1fbec:	cmp	r0, #0
   1fbf0:	beq	1fc30 <__assert_fail@plt+0xdba4>
   1fbf4:	bl	11ed0 <__errno_location@plt>
   1fbf8:	ldr	r0, [r0]
   1fbfc:	cmp	r0, #32
   1fc00:	bne	1fc30 <__assert_fail@plt+0xdba4>
   1fc04:	movw	r0, #776	; 0x308
   1fc08:	movt	r0, #4
   1fc0c:	ldr	r0, [r0]
   1fc10:	bl	2a6cc <_obstack_memory_used@@Base+0x4878>
   1fc14:	cmp	r0, #0
   1fc18:	subeq	sp, fp, #16
   1fc1c:	popeq	{r4, r5, r6, sl, fp, pc}
   1fc20:	movw	r0, #684	; 0x2ac
   1fc24:	movt	r0, #4
   1fc28:	ldr	r0, [r0]
   1fc2c:	bl	11c54 <_exit@plt>
   1fc30:	movw	r1, #61149	; 0xeedd
   1fc34:	mov	r0, #0
   1fc38:	mov	r2, #5
   1fc3c:	movt	r1, #2
   1fc40:	bl	11ca8 <dcgettext@plt>
   1fc44:	ldr	r6, [r5, #4]
   1fc48:	mov	r4, r0
   1fc4c:	bl	11ed0 <__errno_location@plt>
   1fc50:	ldr	r5, [r0]
   1fc54:	cmp	r6, #0
   1fc58:	bne	1fc74 <__assert_fail@plt+0xdbe8>
   1fc5c:	movw	r2, #61146	; 0xeeda
   1fc60:	mov	r0, #0
   1fc64:	mov	r1, r5
   1fc68:	mov	r3, r4
   1fc6c:	movt	r2, #2
   1fc70:	b	1fc94 <__assert_fail@plt+0xdc08>
   1fc74:	mov	r0, r6
   1fc78:	bl	27b08 <_obstack_memory_used@@Base+0x1cb4>
   1fc7c:	movw	r2, #52851	; 0xce73
   1fc80:	mov	r3, r0
   1fc84:	str	r4, [sp]
   1fc88:	mov	r0, #0
   1fc8c:	mov	r1, r5
   1fc90:	movt	r2, #2
   1fc94:	bl	11da4 <error@plt>
   1fc98:	movw	r0, #684	; 0x2ac
   1fc9c:	movt	r0, #4
   1fca0:	ldr	r0, [r0]
   1fca4:	bl	11c54 <_exit@plt>
   1fca8:	push	{r4, r5, r6, sl, fp, lr}
   1fcac:	add	fp, sp, #16
   1fcb0:	mov	r5, r0
   1fcb4:	mov	r4, r0
   1fcb8:	ldrb	r6, [r5], #-1
   1fcbc:	bl	1ef80 <__assert_fail@plt+0xcef4>
   1fcc0:	sub	r2, r0, r4
   1fcc4:	sub	r0, r6, #47	; 0x2f
   1fcc8:	clz	r0, r0
   1fccc:	lsr	r1, r0, #5
   1fcd0:	mov	r0, r2
   1fcd4:	cmp	r2, r1
   1fcd8:	bls	1fcec <__assert_fail@plt+0xdc60>
   1fcdc:	ldrb	r3, [r5, r0]
   1fce0:	sub	r2, r0, #1
   1fce4:	cmp	r3, #47	; 0x2f
   1fce8:	beq	1fcd0 <__assert_fail@plt+0xdc44>
   1fcec:	pop	{r4, r5, r6, sl, fp, pc}
   1fcf0:	push	{r4, r5, r6, sl, fp, lr}
   1fcf4:	add	fp, sp, #16
   1fcf8:	mov	r6, r0
   1fcfc:	mov	r4, r0
   1fd00:	ldrb	r5, [r6], #-1
   1fd04:	bl	1ef80 <__assert_fail@plt+0xcef4>
   1fd08:	sub	r1, r0, r4
   1fd0c:	sub	r0, r5, #47	; 0x2f
   1fd10:	clz	r0, r0
   1fd14:	lsr	r0, r0, #5
   1fd18:	mov	r5, r1
   1fd1c:	cmp	r1, r0
   1fd20:	bls	1fd34 <__assert_fail@plt+0xdca8>
   1fd24:	ldrb	r2, [r6, r5]
   1fd28:	sub	r1, r5, #1
   1fd2c:	cmp	r2, #47	; 0x2f
   1fd30:	beq	1fd18 <__assert_fail@plt+0xdc8c>
   1fd34:	cmp	r5, #0
   1fd38:	mov	r0, r5
   1fd3c:	addeq	r0, r0, #1
   1fd40:	add	r0, r0, #1
   1fd44:	bl	2a648 <_obstack_memory_used@@Base+0x47f4>
   1fd48:	mov	r6, r0
   1fd4c:	cmp	r0, #0
   1fd50:	beq	1fd7c <__assert_fail@plt+0xdcf0>
   1fd54:	mov	r0, r6
   1fd58:	mov	r1, r4
   1fd5c:	mov	r2, r5
   1fd60:	bl	11c60 <memcpy@plt>
   1fd64:	cmp	r5, #0
   1fd68:	moveq	r0, #46	; 0x2e
   1fd6c:	moveq	r5, #1
   1fd70:	strbeq	r0, [r6]
   1fd74:	mov	r0, #0
   1fd78:	strb	r0, [r6, r5]
   1fd7c:	mov	r0, r6
   1fd80:	pop	{r4, r5, r6, sl, fp, pc}
   1fd84:	mov	r0, #0
   1fd88:	bx	lr
   1fd8c:	push	{r4, r5, r6, r7, fp, lr}
   1fd90:	add	fp, sp, #16
   1fd94:	cmp	r0, #0
   1fd98:	beq	1fe00 <__assert_fail@plt+0xdd74>
   1fd9c:	mov	r5, r0
   1fda0:	mov	r0, #24
   1fda4:	mov	r6, r2
   1fda8:	mov	r7, r1
   1fdac:	bl	29090 <_obstack_memory_used@@Base+0x323c>
   1fdb0:	mov	r4, r0
   1fdb4:	mov	r0, r7
   1fdb8:	bl	29594 <_obstack_memory_used@@Base+0x3740>
   1fdbc:	str	r0, [r4]
   1fdc0:	ldrd	r0, [r6, #96]	; 0x60
   1fdc4:	str	r0, [r4, #8]
   1fdc8:	str	r1, [r4, #12]
   1fdcc:	ldrd	r0, [r6]
   1fdd0:	str	r1, [r4, #20]
   1fdd4:	str	r0, [r4, #16]
   1fdd8:	mov	r0, r5
   1fddc:	mov	r1, r4
   1fde0:	bl	21778 <__assert_fail@plt+0xf6ec>
   1fde4:	cmp	r0, #0
   1fde8:	beq	1fe04 <__assert_fail@plt+0xdd78>
   1fdec:	cmp	r0, r4
   1fdf0:	beq	1fe00 <__assert_fail@plt+0xdd74>
   1fdf4:	mov	r0, r4
   1fdf8:	pop	{r4, r5, r6, r7, fp, lr}
   1fdfc:	b	21b18 <__assert_fail@plt+0xfa8c>
   1fe00:	pop	{r4, r5, r6, r7, fp, pc}
   1fe04:	bl	295cc <_obstack_memory_used@@Base+0x3778>
   1fe08:	cmp	r0, #0
   1fe0c:	moveq	r0, #0
   1fe10:	bxeq	lr
   1fe14:	push	{r4, r5, fp, lr}
   1fe18:	add	fp, sp, #8
   1fe1c:	sub	sp, sp, #24
   1fe20:	str	r1, [sp]
   1fe24:	mov	ip, sp
   1fe28:	mov	r1, sp
   1fe2c:	ldrd	r4, [r2, #96]	; 0x60
   1fe30:	add	r3, ip, #8
   1fe34:	add	ip, ip, #16
   1fe38:	strd	r4, [r3]
   1fe3c:	ldrd	r2, [r2]
   1fe40:	strd	r2, [ip]
   1fe44:	bl	20848 <__assert_fail@plt+0xe7bc>
   1fe48:	cmp	r0, #0
   1fe4c:	movwne	r0, #1
   1fe50:	sub	sp, fp, #8
   1fe54:	pop	{r4, r5, fp, pc}
   1fe58:	push	{fp, lr}
   1fe5c:	mov	fp, sp
   1fe60:	and	r2, r0, #61440	; 0xf000
   1fe64:	sub	r2, r2, #4096	; 0x1000
   1fe68:	lsr	r3, r2, #12
   1fe6c:	cmp	r3, #11
   1fe70:	bhi	1fec0 <__assert_fail@plt+0xde34>
   1fe74:	add	r2, pc, #4
   1fe78:	mov	ip, #45	; 0x2d
   1fe7c:	ldr	pc, [r2, r3, lsl #2]
   1fe80:			; <UNDEFINED> instruction: 0x0001feb0
   1fe84:			; <UNDEFINED> instruction: 0x0001feb8
   1fe88:	andeq	pc, r1, r0, asr #29
   1fe8c:	andeq	pc, r1, r8, asr #29
   1fe90:	andeq	pc, r1, r0, asr #29
   1fe94:	andeq	pc, r1, r0, ror #29
   1fe98:	andeq	pc, r1, r0, asr #29
   1fe9c:	andeq	pc, r1, r4, ror #29
   1fea0:	andeq	pc, r1, r0, asr #29
   1fea4:	ldrdeq	pc, [r1], -r0
   1fea8:	andeq	pc, r1, r0, asr #29
   1feac:	ldrdeq	pc, [r1], -r8
   1feb0:	mov	ip, #112	; 0x70
   1feb4:	b	1fee4 <__assert_fail@plt+0xde58>
   1feb8:	mov	ip, #99	; 0x63
   1febc:	b	1fee4 <__assert_fail@plt+0xde58>
   1fec0:	mov	ip, #63	; 0x3f
   1fec4:	b	1fee4 <__assert_fail@plt+0xde58>
   1fec8:	mov	ip, #100	; 0x64
   1fecc:	b	1fee4 <__assert_fail@plt+0xde58>
   1fed0:	mov	ip, #108	; 0x6c
   1fed4:	b	1fee4 <__assert_fail@plt+0xde58>
   1fed8:	mov	ip, #115	; 0x73
   1fedc:	b	1fee4 <__assert_fail@plt+0xde58>
   1fee0:	mov	ip, #98	; 0x62
   1fee4:	tst	r0, #2
   1fee8:	mov	r3, #119	; 0x77
   1feec:	mov	r2, #32
   1fef0:	mov	lr, #45	; 0x2d
   1fef4:	movweq	r3, #45	; 0x2d
   1fef8:	tst	r0, #4
   1fefc:	strh	r2, [r1, #10]
   1ff00:	mov	r2, #114	; 0x72
   1ff04:	strb	ip, [r1]
   1ff08:	mov	ip, #119	; 0x77
   1ff0c:	movweq	r2, #45	; 0x2d
   1ff10:	tst	r0, #16
   1ff14:	strb	r3, [r1, #8]
   1ff18:	mov	r3, #114	; 0x72
   1ff1c:	strb	r2, [r1, #7]
   1ff20:	mov	r2, #119	; 0x77
   1ff24:	movweq	r2, #45	; 0x2d
   1ff28:	tst	r0, #32
   1ff2c:	strb	r2, [r1, #5]
   1ff30:	mov	r2, #114	; 0x72
   1ff34:	movweq	r2, #45	; 0x2d
   1ff38:	tst	r0, #128	; 0x80
   1ff3c:	movweq	ip, #45	; 0x2d
   1ff40:	tst	r0, #256	; 0x100
   1ff44:	strb	r2, [r1, #4]
   1ff48:	movweq	r3, #45	; 0x2d
   1ff4c:	ands	r2, r0, #1
   1ff50:	strb	ip, [r1, #2]
   1ff54:	mov	r2, #84	; 0x54
   1ff58:	mov	ip, #45	; 0x2d
   1ff5c:	strb	r3, [r1, #1]
   1ff60:	mov	r3, #45	; 0x2d
   1ff64:	movwne	r3, #120	; 0x78
   1ff68:	movwne	r2, #116	; 0x74
   1ff6c:	tst	r0, #512	; 0x200
   1ff70:	moveq	r2, r3
   1ff74:	mov	r3, #83	; 0x53
   1ff78:	strb	r2, [r1, #9]
   1ff7c:	ands	r2, r0, #8
   1ff80:	mov	r2, #83	; 0x53
   1ff84:	movwne	lr, #120	; 0x78
   1ff88:	movwne	r2, #115	; 0x73
   1ff8c:	tst	r0, #1024	; 0x400
   1ff90:	moveq	r2, lr
   1ff94:	strb	r2, [r1, #6]
   1ff98:	ands	r2, r0, #64	; 0x40
   1ff9c:	movwne	ip, #120	; 0x78
   1ffa0:	movwne	r3, #115	; 0x73
   1ffa4:	tst	r0, #2048	; 0x800
   1ffa8:	moveq	r3, ip
   1ffac:	strb	r3, [r1, #3]
   1ffb0:	pop	{fp, pc}
   1ffb4:	ldr	r0, [r0, #16]
   1ffb8:	b	1fe58 <__assert_fail@plt+0xddcc>
   1ffbc:	push	{fp, lr}
   1ffc0:	mov	fp, sp
   1ffc4:	bl	1ffd4 <__assert_fail@plt+0xdf48>
   1ffc8:	cmp	r0, #0
   1ffcc:	popne	{fp, pc}
   1ffd0:	bl	295cc <_obstack_memory_used@@Base+0x3778>
   1ffd4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1ffd8:	add	fp, sp, #28
   1ffdc:	push	{r2}		; (str r2, [sp, #-4]!)
   1ffe0:	mov	sl, r1
   1ffe4:	mov	r7, r0
   1ffe8:	bl	1ef80 <__assert_fail@plt+0xcef4>
   1ffec:	sub	r4, r0, r7
   1fff0:	bl	1efe0 <__assert_fail@plt+0xcf54>
   1fff4:	mov	r6, r0
   1fff8:	add	r5, r4, r0
   1fffc:	mov	r0, sl
   20000:	bl	11eac <strlen@plt>
   20004:	mov	r9, r0
   20008:	cmp	r6, #0
   2000c:	beq	20034 <__assert_fail@plt+0xdfa8>
   20010:	add	r0, r5, r7
   20014:	mov	r4, #0
   20018:	ldrb	r0, [r0, #-1]
   2001c:	cmp	r0, #47	; 0x2f
   20020:	beq	20044 <__assert_fail@plt+0xdfb8>
   20024:	ldrb	r0, [sl]
   20028:	subs	r4, r0, #47	; 0x2f
   2002c:	movwne	r4, #47	; 0x2f
   20030:	b	20044 <__assert_fail@plt+0xdfb8>
   20034:	ldrb	r0, [sl]
   20038:	mov	r4, #0
   2003c:	cmp	r0, #47	; 0x2f
   20040:	movweq	r4, #46	; 0x2e
   20044:	uxtb	r8, r4
   20048:	add	r0, r9, r5
   2004c:	cmp	r8, #0
   20050:	movwne	r8, #1
   20054:	add	r0, r0, r8
   20058:	add	r0, r0, #1
   2005c:	bl	2a648 <_obstack_memory_used@@Base+0x47f4>
   20060:	mov	r6, r0
   20064:	cmp	r0, #0
   20068:	beq	200a8 <__assert_fail@plt+0xe01c>
   2006c:	mov	r0, r6
   20070:	mov	r1, r7
   20074:	mov	r2, r5
   20078:	mvn	r3, #0
   2007c:	bl	12080 <__mempcpy_chk@plt>
   20080:	ldr	r1, [sp]
   20084:	strb	r4, [r0], r8
   20088:	mov	r2, r9
   2008c:	mvn	r3, #0
   20090:	cmp	r1, #0
   20094:	strne	r0, [r1]
   20098:	mov	r1, sl
   2009c:	bl	12080 <__mempcpy_chk@plt>
   200a0:	mov	r1, #0
   200a4:	strb	r1, [r0]
   200a8:	mov	r0, r6
   200ac:	sub	sp, fp, #28
   200b0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   200b4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   200b8:	add	fp, sp, #28
   200bc:	sub	sp, sp, #12
   200c0:	mov	r8, r1
   200c4:	mov	r9, r0
   200c8:	bl	11bd0 <strcmp@plt>
   200cc:	cmp	r0, #0
   200d0:	beq	2016c <__assert_fail@plt+0xe0e0>
   200d4:	ldrb	r4, [r9]
   200d8:	cmp	r4, #0
   200dc:	beq	20160 <__assert_fail@plt+0xe0d4>
   200e0:	ldrb	r6, [r8]
   200e4:	cmp	r6, #0
   200e8:	beq	20544 <__assert_fail@plt+0xe4b8>
   200ec:	mov	sl, r0
   200f0:	movw	r0, #61162	; 0xeeea
   200f4:	mov	r1, r9
   200f8:	movt	r0, #2
   200fc:	bl	11bd0 <strcmp@plt>
   20100:	cmp	r0, #0
   20104:	beq	20160 <__assert_fail@plt+0xe0d4>
   20108:	movw	r0, #61162	; 0xeeea
   2010c:	mov	r1, r8
   20110:	movt	r0, #2
   20114:	bl	11bd0 <strcmp@plt>
   20118:	cmp	r0, #0
   2011c:	beq	20544 <__assert_fail@plt+0xe4b8>
   20120:	movw	r0, #61161	; 0xeee9
   20124:	mov	r1, r9
   20128:	movt	r0, #2
   2012c:	bl	11bd0 <strcmp@plt>
   20130:	cmp	r0, #0
   20134:	beq	20160 <__assert_fail@plt+0xe0d4>
   20138:	movw	r0, #61161	; 0xeee9
   2013c:	mov	r1, r8
   20140:	movt	r0, #2
   20144:	bl	11bd0 <strcmp@plt>
   20148:	cmp	r0, #0
   2014c:	beq	20544 <__assert_fail@plt+0xe4b8>
   20150:	cmp	r4, #46	; 0x2e
   20154:	bne	20178 <__assert_fail@plt+0xe0ec>
   20158:	cmp	r6, #46	; 0x2e
   2015c:	beq	20178 <__assert_fail@plt+0xe0ec>
   20160:	mvn	r0, #0
   20164:	sub	sp, fp, #28
   20168:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2016c:	mov	r0, #0
   20170:	sub	sp, fp, #28
   20174:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   20178:	cmp	r4, #46	; 0x2e
   2017c:	bne	201b8 <__assert_fail@plt+0xe12c>
   20180:	mov	r4, #46	; 0x2e
   20184:	cmp	r6, #46	; 0x2e
   20188:	bne	201c0 <__assert_fail@plt+0xe134>
   2018c:	ldrb	r4, [r9, #1]!
   20190:	add	r8, r8, #1
   20194:	cmp	r4, #0
   20198:	bne	201c0 <__assert_fail@plt+0xe134>
   2019c:	mov	r7, #0
   201a0:	mov	r6, r9
   201a4:	ldrb	r0, [r8]
   201a8:	str	r7, [sp, #8]
   201ac:	cmp	r0, #0
   201b0:	bne	20268 <__assert_fail@plt+0xe1dc>
   201b4:	b	20304 <__assert_fail@plt+0xe278>
   201b8:	cmp	r6, #46	; 0x2e
   201bc:	beq	20544 <__assert_fail@plt+0xe4b8>
   201c0:	mov	r1, #0
   201c4:	mvn	r5, #64	; 0x40
   201c8:	mov	r6, r9
   201cc:	mov	r7, #0
   201d0:	tst	r1, #1
   201d4:	beq	20220 <__assert_fail@plt+0xe194>
   201d8:	b	201fc <__assert_fail@plt+0xe170>
   201dc:	cmp	r7, #0
   201e0:	mov	r1, #1
   201e4:	moveq	r7, r6
   201e8:	ldrb	r4, [r6, #1]!
   201ec:	cmp	r4, #0
   201f0:	beq	20258 <__assert_fail@plt+0xe1cc>
   201f4:	tst	r1, #1
   201f8:	beq	20220 <__assert_fail@plt+0xe194>
   201fc:	uxtab	r0, r5, r4
   20200:	mov	r1, #0
   20204:	cmp	r0, #26
   20208:	bcc	201e8 <__assert_fail@plt+0xe15c>
   2020c:	uxtb	r0, r4
   20210:	sub	r2, r0, #97	; 0x61
   20214:	cmp	r2, #26
   20218:	bcc	201e8 <__assert_fail@plt+0xe15c>
   2021c:	b	20240 <__assert_fail@plt+0xe1b4>
   20220:	uxtb	r0, r4
   20224:	cmp	r0, #46	; 0x2e
   20228:	beq	201dc <__assert_fail@plt+0xe150>
   2022c:	bl	1f018 <__assert_fail@plt+0xcf8c>
   20230:	mov	r1, #0
   20234:	cmp	r0, #0
   20238:	bne	201e8 <__assert_fail@plt+0xe15c>
   2023c:	ldrb	r0, [r6]
   20240:	mov	r1, #0
   20244:	cmp	r0, #126	; 0x7e
   20248:	movne	r7, r1
   2024c:	ldrb	r4, [r6, #1]!
   20250:	cmp	r4, #0
   20254:	bne	201f4 <__assert_fail@plt+0xe168>
   20258:	ldrb	r0, [r8]
   2025c:	str	r7, [sp, #8]
   20260:	cmp	r0, #0
   20264:	beq	20304 <__assert_fail@plt+0xe278>
   20268:	mov	r1, #0
   2026c:	mvn	r5, #64	; 0x40
   20270:	mov	r4, r8
   20274:	mov	r7, #0
   20278:	tst	r1, #1
   2027c:	beq	202c8 <__assert_fail@plt+0xe23c>
   20280:	b	202a4 <__assert_fail@plt+0xe218>
   20284:	cmp	r7, #0
   20288:	mov	r1, #1
   2028c:	moveq	r7, r4
   20290:	ldrb	r0, [r4, #1]!
   20294:	cmp	r0, #0
   20298:	beq	2030c <__assert_fail@plt+0xe280>
   2029c:	tst	r1, #1
   202a0:	beq	202c8 <__assert_fail@plt+0xe23c>
   202a4:	uxtab	r2, r5, r0
   202a8:	mov	r1, #0
   202ac:	cmp	r2, #26
   202b0:	bcc	20290 <__assert_fail@plt+0xe204>
   202b4:	uxtb	r0, r0
   202b8:	sub	r2, r0, #97	; 0x61
   202bc:	cmp	r2, #26
   202c0:	bcc	20290 <__assert_fail@plt+0xe204>
   202c4:	b	202e8 <__assert_fail@plt+0xe25c>
   202c8:	uxtb	r0, r0
   202cc:	cmp	r0, #46	; 0x2e
   202d0:	beq	20284 <__assert_fail@plt+0xe1f8>
   202d4:	bl	1f018 <__assert_fail@plt+0xcf8c>
   202d8:	mov	r1, #0
   202dc:	cmp	r0, #0
   202e0:	bne	20290 <__assert_fail@plt+0xe204>
   202e4:	ldrb	r0, [r4]
   202e8:	mov	r1, #0
   202ec:	cmp	r0, #126	; 0x7e
   202f0:	movne	r7, r1
   202f4:	ldrb	r0, [r4, #1]!
   202f8:	cmp	r0, #0
   202fc:	bne	2029c <__assert_fail@plt+0xe210>
   20300:	b	2030c <__assert_fail@plt+0xe280>
   20304:	mov	r7, #0
   20308:	mov	r4, r8
   2030c:	ldr	r1, [sp, #8]
   20310:	cmp	r7, #0
   20314:	mov	r0, r4
   20318:	movne	r0, r7
   2031c:	sub	lr, r0, r8
   20320:	mov	r0, r6
   20324:	cmp	r1, #0
   20328:	movne	r0, r1
   2032c:	sub	r2, r0, r9
   20330:	orrs	r0, r1, r7
   20334:	beq	20364 <__assert_fail@plt+0xe2d8>
   20338:	cmp	r2, lr
   2033c:	bne	20364 <__assert_fail@plt+0xe2d8>
   20340:	mov	r0, r9
   20344:	mov	r1, r8
   20348:	mov	r5, r2
   2034c:	bl	1202c <strncmp@plt>
   20350:	cmp	r0, #0
   20354:	mov	r2, r5
   20358:	mov	lr, r5
   2035c:	subeq	lr, r4, r8
   20360:	subeq	r2, r6, r9
   20364:	mov	ip, #0
   20368:	mov	r6, #0
   2036c:	cmp	ip, lr
   20370:	cmpcs	r6, r2
   20374:	bcs	20560 <__assert_fail@plt+0xe4d4>
   20378:	cmp	r6, r2
   2037c:	bcs	20390 <__assert_fail@plt+0xe304>
   20380:	ldrb	r0, [r9, r6]
   20384:	sub	r0, r0, #48	; 0x30
   20388:	cmp	r0, #9
   2038c:	bhi	203a8 <__assert_fail@plt+0xe31c>
   20390:	cmp	ip, lr
   20394:	bcs	20470 <__assert_fail@plt+0xe3e4>
   20398:	ldrb	r0, [r8, ip]
   2039c:	sub	r0, r0, #48	; 0x30
   203a0:	cmp	r0, #10
   203a4:	bcc	20470 <__assert_fail@plt+0xe3e4>
   203a8:	mov	r0, #0
   203ac:	cmp	r2, r6
   203b0:	mov	r1, #0
   203b4:	beq	20404 <__assert_fail@plt+0xe378>
   203b8:	ldrb	r3, [r9, r6]
   203bc:	sub	r1, r3, #48	; 0x30
   203c0:	cmp	r1, #10
   203c4:	mov	r1, #0
   203c8:	bcc	20404 <__assert_fail@plt+0xe378>
   203cc:	sub	r1, r3, #65	; 0x41
   203d0:	cmp	r1, #26
   203d4:	bcc	20400 <__assert_fail@plt+0xe374>
   203d8:	sub	r1, r3, #97	; 0x61
   203dc:	cmp	r1, #26
   203e0:	mov	r1, r3
   203e4:	bcc	20404 <__assert_fail@plt+0xe378>
   203e8:	cmp	r3, #126	; 0x7e
   203ec:	orr	r1, r3, #256	; 0x100
   203f0:	mvneq	r1, #0
   203f4:	cmp	lr, ip
   203f8:	bne	2040c <__assert_fail@plt+0xe380>
   203fc:	b	20454 <__assert_fail@plt+0xe3c8>
   20400:	mov	r1, r3
   20404:	cmp	lr, ip
   20408:	beq	20454 <__assert_fail@plt+0xe3c8>
   2040c:	ldrb	r3, [r8, ip]
   20410:	sub	r7, r3, #48	; 0x30
   20414:	cmp	r7, #10
   20418:	bcc	20454 <__assert_fail@plt+0xe3c8>
   2041c:	sub	r0, r3, #65	; 0x41
   20420:	cmp	r0, #26
   20424:	bcc	20450 <__assert_fail@plt+0xe3c4>
   20428:	sub	r0, r3, #97	; 0x61
   2042c:	cmp	r0, #26
   20430:	mov	r0, r3
   20434:	bcc	20454 <__assert_fail@plt+0xe3c8>
   20438:	cmp	r3, #126	; 0x7e
   2043c:	orr	r0, r3, #256	; 0x100
   20440:	mvneq	r0, #0
   20444:	cmp	r1, r0
   20448:	beq	2045c <__assert_fail@plt+0xe3d0>
   2044c:	b	20550 <__assert_fail@plt+0xe4c4>
   20450:	mov	r0, r3
   20454:	cmp	r1, r0
   20458:	bne	20550 <__assert_fail@plt+0xe4c4>
   2045c:	add	ip, ip, #1
   20460:	add	r6, r6, #1
   20464:	cmp	r6, r2
   20468:	bcc	20380 <__assert_fail@plt+0xe2f4>
   2046c:	b	20390 <__assert_fail@plt+0xe304>
   20470:	mov	r3, r6
   20474:	ldrb	r4, [r9, r3]
   20478:	add	r3, r3, #1
   2047c:	cmp	r4, #48	; 0x30
   20480:	beq	20474 <__assert_fail@plt+0xe3e8>
   20484:	sub	r6, r3, #1
   20488:	ldrb	r5, [r8, ip]
   2048c:	add	ip, ip, #1
   20490:	cmp	r5, #48	; 0x30
   20494:	beq	20488 <__assert_fail@plt+0xe3fc>
   20498:	sub	r1, r5, #48	; 0x30
   2049c:	sub	r7, r4, #48	; 0x30
   204a0:	mov	r0, #0
   204a4:	cmp	r1, #10
   204a8:	mov	r1, #0
   204ac:	movwcc	r1, #1
   204b0:	cmp	r7, #9
   204b4:	bhi	2052c <__assert_fail@plt+0xe4a0>
   204b8:	add	r0, r8, ip
   204bc:	mvn	r6, #0
   204c0:	mov	r7, r9
   204c4:	str	lr, [sp, #4]
   204c8:	str	r0, [sp, #8]
   204cc:	mov	r0, #0
   204d0:	tst	r1, #1
   204d4:	beq	20544 <__assert_fail@plt+0xe4b8>
   204d8:	ldr	r1, [sp, #8]
   204dc:	cmp	r0, #0
   204e0:	subeq	r0, r4, r5
   204e4:	ldrb	r4, [r7, r3]
   204e8:	add	r7, r7, #1
   204ec:	add	r1, r1, r6
   204f0:	add	r6, r6, #1
   204f4:	ldrb	r5, [r1, #1]
   204f8:	sub	lr, r4, #48	; 0x30
   204fc:	sub	r1, r5, #48	; 0x30
   20500:	cmp	r1, #10
   20504:	mov	r1, #0
   20508:	movwcc	r1, #1
   2050c:	cmp	lr, #10
   20510:	bcc	204d0 <__assert_fail@plt+0xe444>
   20514:	ldr	lr, [sp, #4]
   20518:	add	ip, ip, r6
   2051c:	add	r6, r3, r6
   20520:	cmp	r1, #0
   20524:	beq	20538 <__assert_fail@plt+0xe4ac>
   20528:	b	20160 <__assert_fail@plt+0xe0d4>
   2052c:	sub	ip, ip, #1
   20530:	cmp	r1, #0
   20534:	bne	20160 <__assert_fail@plt+0xe0d4>
   20538:	cmp	r0, #0
   2053c:	beq	2036c <__assert_fail@plt+0xe2e0>
   20540:	b	20558 <__assert_fail@plt+0xe4cc>
   20544:	mov	r0, #1
   20548:	sub	sp, fp, #28
   2054c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   20550:	subs	r0, r1, r0
   20554:	moveq	r0, sl
   20558:	sub	sp, fp, #28
   2055c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   20560:	mov	r0, sl
   20564:	sub	sp, fp, #28
   20568:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2056c:	push	{r4, r5, r6, sl, fp, lr}
   20570:	add	fp, sp, #16
   20574:	mov	r4, r0
   20578:	bl	11ed0 <__errno_location@plt>
   2057c:	ldr	r6, [r0]
   20580:	mov	r5, r0
   20584:	mov	r0, r4
   20588:	bl	11c30 <free@plt>
   2058c:	str	r6, [r5]
   20590:	pop	{r4, r5, r6, sl, fp, pc}
   20594:	mov	r1, r0
   20598:	mov	r0, #0
   2059c:	b	11c48 <clock_gettime@plt>
   205a0:	push	{fp, lr}
   205a4:	mov	fp, sp
   205a8:	mov	r1, r0
   205ac:	mov	r0, #0
   205b0:	bl	11c48 <clock_gettime@plt>
   205b4:	pop	{fp, pc}
   205b8:	push	{r4, sl, fp, lr}
   205bc:	add	fp, sp, #8
   205c0:	sub	sp, sp, #264	; 0x108
   205c4:	add	r1, sp, #7
   205c8:	movw	r2, #257	; 0x101
   205cc:	bl	28198 <_obstack_memory_used@@Base+0x2344>
   205d0:	mov	r4, #0
   205d4:	cmp	r0, #0
   205d8:	bne	20618 <__assert_fail@plt+0xe58c>
   205dc:	movw	r1, #61164	; 0xeeec
   205e0:	add	r0, sp, #7
   205e4:	mov	r2, #2
   205e8:	movt	r1, #2
   205ec:	bl	11e94 <bcmp@plt>
   205f0:	cmp	r0, #0
   205f4:	beq	20618 <__assert_fail@plt+0xe58c>
   205f8:	movw	r1, #61166	; 0xeeee
   205fc:	add	r0, sp, #7
   20600:	mov	r2, #6
   20604:	movt	r1, #2
   20608:	bl	11e94 <bcmp@plt>
   2060c:	cmp	r0, #0
   20610:	mov	r4, r0
   20614:	movwne	r4, #1
   20618:	mov	r0, r4
   2061c:	sub	sp, fp, #8
   20620:	pop	{r4, sl, fp, pc}
   20624:	andeq	r0, r0, r0
   20628:	ldr	r0, [r0, #8]
   2062c:	bx	lr
   20630:	ldr	r0, [r0, #12]
   20634:	bx	lr
   20638:	ldr	r0, [r0, #16]
   2063c:	bx	lr
   20640:	ldm	r0, {r2, ip}
   20644:	mov	r0, #0
   20648:	cmp	r2, ip
   2064c:	bxcs	lr
   20650:	mov	r0, #0
   20654:	ldr	r1, [r2]
   20658:	cmp	r1, #0
   2065c:	bne	20678 <__assert_fail@plt+0xe5ec>
   20660:	add	r2, r2, #8
   20664:	cmp	r2, ip
   20668:	bcs	206a4 <__assert_fail@plt+0xe618>
   2066c:	ldr	r1, [r2]
   20670:	cmp	r1, #0
   20674:	beq	20660 <__assert_fail@plt+0xe5d4>
   20678:	mov	r3, #0
   2067c:	mov	r1, r2
   20680:	ldr	r1, [r1, #4]
   20684:	add	r3, r3, #1
   20688:	cmp	r1, #0
   2068c:	bne	20680 <__assert_fail@plt+0xe5f4>
   20690:	cmp	r3, r0
   20694:	movhi	r0, r3
   20698:	add	r2, r2, #8
   2069c:	cmp	r2, ip
   206a0:	bcc	2066c <__assert_fail@plt+0xe5e0>
   206a4:	bx	lr
   206a8:	push	{fp, lr}
   206ac:	mov	fp, sp
   206b0:	ldm	r0, {r3, ip}
   206b4:	mov	lr, #0
   206b8:	mov	r1, #0
   206bc:	cmp	r3, ip
   206c0:	bcs	20714 <__assert_fail@plt+0xe688>
   206c4:	mov	r1, #0
   206c8:	mov	lr, #0
   206cc:	ldr	r2, [r3]
   206d0:	cmp	r2, #0
   206d4:	bne	206f0 <__assert_fail@plt+0xe664>
   206d8:	add	r3, r3, #8
   206dc:	cmp	r3, ip
   206e0:	bcs	20714 <__assert_fail@plt+0xe688>
   206e4:	ldr	r2, [r3]
   206e8:	cmp	r2, #0
   206ec:	beq	206d8 <__assert_fail@plt+0xe64c>
   206f0:	mov	r2, r3
   206f4:	ldr	r2, [r2, #4]
   206f8:	add	r1, r1, #1
   206fc:	cmp	r2, #0
   20700:	bne	206f4 <__assert_fail@plt+0xe668>
   20704:	add	lr, lr, #1
   20708:	add	r3, r3, #8
   2070c:	cmp	r3, ip
   20710:	bcc	206e4 <__assert_fail@plt+0xe658>
   20714:	ldr	r2, [r0, #12]
   20718:	cmp	lr, r2
   2071c:	bne	20734 <__assert_fail@plt+0xe6a8>
   20720:	ldr	r2, [r0, #16]
   20724:	mov	r0, #1
   20728:	cmp	r1, r2
   2072c:	movne	r0, #0
   20730:	pop	{fp, pc}
   20734:	mov	r0, #0
   20738:	pop	{fp, pc}
   2073c:	nop	{0}
   20740:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   20744:	add	fp, sp, #24
   20748:	sub	sp, sp, #8
   2074c:	ldr	r6, [r0]
   20750:	ldmib	r0, {r2, r7, r8}
   20754:	ldr	r3, [r0, #16]
   20758:	mov	r4, r1
   2075c:	mov	r5, #0
   20760:	cmp	r6, r2
   20764:	bcs	207bc <__assert_fail@plt+0xe730>
   20768:	mov	r5, #0
   2076c:	ldr	r0, [r6]
   20770:	cmp	r0, #0
   20774:	bne	20790 <__assert_fail@plt+0xe704>
   20778:	add	r6, r6, #8
   2077c:	cmp	r6, r2
   20780:	bcs	207bc <__assert_fail@plt+0xe730>
   20784:	ldr	r0, [r6]
   20788:	cmp	r0, #0
   2078c:	beq	20778 <__assert_fail@plt+0xe6ec>
   20790:	mov	r0, #0
   20794:	mov	r1, r6
   20798:	ldr	r1, [r1, #4]
   2079c:	add	r0, r0, #1
   207a0:	cmp	r1, #0
   207a4:	bne	20798 <__assert_fail@plt+0xe70c>
   207a8:	cmp	r0, r5
   207ac:	movhi	r5, r0
   207b0:	add	r6, r6, #8
   207b4:	cmp	r6, r2
   207b8:	bcc	20784 <__assert_fail@plt+0xe6f8>
   207bc:	movw	r2, #61172	; 0xeef4
   207c0:	mov	r0, r4
   207c4:	mov	r1, #1
   207c8:	movt	r2, #2
   207cc:	bl	11f24 <__fprintf_chk@plt>
   207d0:	movw	r2, #61196	; 0xef0c
   207d4:	mov	r0, r4
   207d8:	mov	r1, #1
   207dc:	mov	r3, r7
   207e0:	movt	r2, #2
   207e4:	bl	11f24 <__fprintf_chk@plt>
   207e8:	vmov	s0, r8
   207ec:	vldr	d16, [pc, #76]	; 20840 <__assert_fail@plt+0xe7b4>
   207f0:	movw	r2, #61220	; 0xef24
   207f4:	mov	r0, r4
   207f8:	mov	r1, #1
   207fc:	mov	r3, r8
   20800:	movt	r2, #2
   20804:	vcvt.f64.u32	d17, s0
   20808:	vmov	s0, r7
   2080c:	vcvt.f64.u32	d18, s0
   20810:	vmul.f64	d16, d17, d16
   20814:	vdiv.f64	d16, d16, d18
   20818:	vstr	d16, [sp]
   2081c:	bl	11f24 <__fprintf_chk@plt>
   20820:	movw	r2, #61253	; 0xef45
   20824:	mov	r0, r4
   20828:	mov	r1, #1
   2082c:	mov	r3, r5
   20830:	movt	r2, #2
   20834:	sub	sp, fp, #24
   20838:	pop	{r4, r5, r6, r7, r8, sl, fp, lr}
   2083c:	b	11f24 <__fprintf_chk@plt>
   20840:	andeq	r0, r0, r0
   20844:	subsmi	r0, r9, r0
   20848:	push	{r4, r5, r6, r7, fp, lr}
   2084c:	add	fp, sp, #16
   20850:	mov	r4, r1
   20854:	ldr	r1, [r0, #8]
   20858:	ldr	r2, [r0, #24]
   2085c:	mov	r5, r0
   20860:	mov	r0, r4
   20864:	blx	r2
   20868:	ldr	r1, [r5, #8]
   2086c:	cmp	r0, r1
   20870:	bcs	208d8 <__assert_fail@plt+0xe84c>
   20874:	ldr	r7, [r5]
   20878:	mov	r6, #0
   2087c:	ldr	r1, [r7, r0, lsl #3]!
   20880:	cmp	r1, #0
   20884:	cmpne	r7, #0
   20888:	bne	208b8 <__assert_fail@plt+0xe82c>
   2088c:	mov	r0, r6
   20890:	pop	{r4, r5, r6, r7, fp, pc}
   20894:	ldr	r2, [r5, #28]
   20898:	mov	r0, r4
   2089c:	blx	r2
   208a0:	cmp	r0, #0
   208a4:	bne	208cc <__assert_fail@plt+0xe840>
   208a8:	ldr	r7, [r7, #4]
   208ac:	cmp	r7, #0
   208b0:	beq	2088c <__assert_fail@plt+0xe800>
   208b4:	ldr	r1, [r7]
   208b8:	cmp	r1, r4
   208bc:	bne	20894 <__assert_fail@plt+0xe808>
   208c0:	mov	r6, r4
   208c4:	mov	r0, r6
   208c8:	pop	{r4, r5, r6, r7, fp, pc}
   208cc:	ldr	r6, [r7]
   208d0:	mov	r0, r6
   208d4:	pop	{r4, r5, r6, r7, fp, pc}
   208d8:	bl	12038 <abort@plt>
   208dc:	push	{fp, lr}
   208e0:	mov	fp, sp
   208e4:	ldr	r1, [r0, #16]
   208e8:	cmp	r1, #0
   208ec:	beq	2090c <__assert_fail@plt+0xe880>
   208f0:	ldm	r0, {r1, r2}
   208f4:	cmp	r1, r2
   208f8:	bcs	20914 <__assert_fail@plt+0xe888>
   208fc:	ldr	r0, [r1], #8
   20900:	cmp	r0, #0
   20904:	beq	208f4 <__assert_fail@plt+0xe868>
   20908:	pop	{fp, pc}
   2090c:	mov	r0, #0
   20910:	pop	{fp, pc}
   20914:	bl	12038 <abort@plt>
   20918:	push	{r4, r5, fp, lr}
   2091c:	add	fp, sp, #8
   20920:	mov	r5, r1
   20924:	ldr	r1, [r0, #8]
   20928:	ldr	r2, [r0, #24]
   2092c:	mov	r4, r0
   20930:	mov	r0, r5
   20934:	blx	r2
   20938:	ldr	r1, [r4, #8]
   2093c:	cmp	r0, r1
   20940:	bcs	209a4 <__assert_fail@plt+0xe918>
   20944:	ldr	r1, [r4]
   20948:	add	r2, r1, r0, lsl #3
   2094c:	ldr	r3, [r2]
   20950:	ldr	r2, [r2, #4]
   20954:	cmp	r3, r5
   20958:	beq	20968 <__assert_fail@plt+0xe8dc>
   2095c:	cmp	r2, #0
   20960:	bne	2094c <__assert_fail@plt+0xe8c0>
   20964:	b	20978 <__assert_fail@plt+0xe8ec>
   20968:	cmp	r2, #0
   2096c:	beq	20978 <__assert_fail@plt+0xe8ec>
   20970:	ldr	r0, [r2]
   20974:	pop	{r4, r5, fp, pc}
   20978:	ldr	r2, [r4, #4]
   2097c:	add	r0, r1, r0, lsl #3
   20980:	add	r1, r0, #8
   20984:	cmp	r1, r2
   20988:	bcs	2099c <__assert_fail@plt+0xe910>
   2098c:	ldr	r0, [r1], #8
   20990:	cmp	r0, #0
   20994:	beq	20984 <__assert_fail@plt+0xe8f8>
   20998:	pop	{r4, r5, fp, pc}
   2099c:	mov	r0, #0
   209a0:	pop	{r4, r5, fp, pc}
   209a4:	bl	12038 <abort@plt>
   209a8:	push	{r4, r5, fp, lr}
   209ac:	add	fp, sp, #8
   209b0:	ldm	r0, {r5, lr}
   209b4:	mov	ip, r0
   209b8:	mov	r0, #0
   209bc:	cmp	r5, lr
   209c0:	popcs	{r4, r5, fp, pc}
   209c4:	mov	r0, #0
   209c8:	ldr	r3, [r5]
   209cc:	cmp	r3, #0
   209d0:	cmpne	r5, #0
   209d4:	beq	209e0 <__assert_fail@plt+0xe954>
   209d8:	b	209fc <__assert_fail@plt+0xe970>
   209dc:	ldr	lr, [ip, #4]
   209e0:	add	r5, r5, #8
   209e4:	cmp	r5, lr
   209e8:	bcs	20a24 <__assert_fail@plt+0xe998>
   209ec:	ldr	r3, [r5]
   209f0:	cmp	r3, #0
   209f4:	cmpne	r5, #0
   209f8:	beq	209e0 <__assert_fail@plt+0xe954>
   209fc:	mov	r3, r5
   20a00:	cmp	r0, r2
   20a04:	bcs	20a24 <__assert_fail@plt+0xe998>
   20a08:	ldr	r4, [r3]
   20a0c:	str	r4, [r1, r0, lsl #2]
   20a10:	add	r0, r0, #1
   20a14:	ldr	r3, [r3, #4]
   20a18:	cmp	r3, #0
   20a1c:	bne	20a00 <__assert_fail@plt+0xe974>
   20a20:	b	209dc <__assert_fail@plt+0xe950>
   20a24:	pop	{r4, r5, fp, pc}
   20a28:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   20a2c:	add	fp, sp, #24
   20a30:	mov	r5, r1
   20a34:	ldr	r4, [r0]
   20a38:	ldr	r1, [r0, #4]
   20a3c:	mov	r6, #0
   20a40:	cmp	r4, r1
   20a44:	bcs	20ac0 <__assert_fail@plt+0xea34>
   20a48:	mov	r9, r2
   20a4c:	mov	r8, r0
   20a50:	mov	r6, #0
   20a54:	ldr	r0, [r4]
   20a58:	cmp	r0, #0
   20a5c:	cmpne	r4, #0
   20a60:	beq	20a6c <__assert_fail@plt+0xe9e0>
   20a64:	b	20a88 <__assert_fail@plt+0xe9fc>
   20a68:	ldr	r1, [r8, #4]
   20a6c:	add	r4, r4, #8
   20a70:	cmp	r4, r1
   20a74:	bcs	20ac0 <__assert_fail@plt+0xea34>
   20a78:	ldr	r0, [r4]
   20a7c:	cmp	r0, #0
   20a80:	cmpne	r4, #0
   20a84:	beq	20a6c <__assert_fail@plt+0xe9e0>
   20a88:	mov	r1, r9
   20a8c:	blx	r5
   20a90:	cmp	r0, #0
   20a94:	beq	20ac0 <__assert_fail@plt+0xea34>
   20a98:	mov	r7, r4
   20a9c:	ldr	r7, [r7, #4]
   20aa0:	add	r6, r6, #1
   20aa4:	cmp	r7, #0
   20aa8:	beq	20a68 <__assert_fail@plt+0xe9dc>
   20aac:	ldr	r0, [r7]
   20ab0:	mov	r1, r9
   20ab4:	blx	r5
   20ab8:	cmp	r0, #0
   20abc:	bne	20a9c <__assert_fail@plt+0xea10>
   20ac0:	mov	r0, r6
   20ac4:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   20ac8:	ldrb	r2, [r0]
   20acc:	cmp	r2, #0
   20ad0:	moveq	r0, #0
   20ad4:	bxeq	lr
   20ad8:	add	r3, r0, #1
   20adc:	mov	r0, #0
   20ae0:	rsb	r0, r0, r0, lsl #5
   20ae4:	uxtab	r0, r0, r2
   20ae8:	udiv	r2, r0, r1
   20aec:	mls	r0, r2, r1, r0
   20af0:	ldrb	r2, [r3], #1
   20af4:	cmp	r2, #0
   20af8:	bne	20ae0 <__assert_fail@plt+0xea54>
   20afc:	bx	lr
   20b00:	movw	r1, #61280	; 0xef60
   20b04:	movt	r1, #2
   20b08:	vld1.32	{d16-d17}, [r1]!
   20b0c:	ldr	r1, [r1]
   20b10:	vst1.32	{d16-d17}, [r0]!
   20b14:	str	r1, [r0]
   20b18:	bx	lr
   20b1c:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   20b20:	add	fp, sp, #24
   20b24:	movw	r9, #3408	; 0xd50
   20b28:	cmp	r3, #0
   20b2c:	movw	r5, #3388	; 0xd3c
   20b30:	mov	r6, r0
   20b34:	mov	r0, #40	; 0x28
   20b38:	mov	r7, r1
   20b3c:	movt	r9, #2
   20b40:	movne	r9, r3
   20b44:	cmp	r2, #0
   20b48:	movt	r5, #2
   20b4c:	movne	r5, r2
   20b50:	bl	2a648 <_obstack_memory_used@@Base+0x47f4>
   20b54:	mov	r8, #0
   20b58:	cmp	r0, #0
   20b5c:	beq	20d24 <__assert_fail@plt+0xec98>
   20b60:	mov	r4, r0
   20b64:	movw	r0, #61280	; 0xef60
   20b68:	cmp	r7, #0
   20b6c:	movt	r0, #2
   20b70:	moveq	r7, r0
   20b74:	cmp	r7, r0
   20b78:	str	r7, [r4, #20]
   20b7c:	beq	20bf8 <__assert_fail@plt+0xeb6c>
   20b80:	vldr	s2, [pc, #420]	; 20d2c <__assert_fail@plt+0xeca0>
   20b84:	vldr	s0, [r7, #8]
   20b88:	vcmpe.f32	s0, s2
   20b8c:	vmrs	APSR_nzcv, fpscr
   20b90:	ble	20ca4 <__assert_fail@plt+0xec18>
   20b94:	vldr	s4, [pc, #404]	; 20d30 <__assert_fail@plt+0xeca4>
   20b98:	vcmpe.f32	s0, s4
   20b9c:	vmrs	APSR_nzcv, fpscr
   20ba0:	bpl	20ca4 <__assert_fail@plt+0xec18>
   20ba4:	vldr	s4, [pc, #392]	; 20d34 <__assert_fail@plt+0xeca8>
   20ba8:	vldr	s6, [r7, #12]
   20bac:	vcmpe.f32	s6, s4
   20bb0:	vmrs	APSR_nzcv, fpscr
   20bb4:	ble	20ca4 <__assert_fail@plt+0xec18>
   20bb8:	vldr	s4, [r7]
   20bbc:	vcmpe.f32	s4, #0.0
   20bc0:	vmrs	APSR_nzcv, fpscr
   20bc4:	blt	20ca4 <__assert_fail@plt+0xec18>
   20bc8:	vadd.f32	s2, s4, s2
   20bcc:	vcmpe.f32	s2, s0
   20bd0:	vmrs	APSR_nzcv, fpscr
   20bd4:	bpl	20ca4 <__assert_fail@plt+0xec18>
   20bd8:	vldr	s0, [r7, #4]
   20bdc:	vmov.f32	s4, #112	; 0x3f800000  1.0
   20be0:	vcmpe.f32	s0, s4
   20be4:	vmrs	APSR_nzcv, fpscr
   20be8:	bhi	20ca4 <__assert_fail@plt+0xec18>
   20bec:	vcmpe.f32	s2, s0
   20bf0:	vmrs	APSR_nzcv, fpscr
   20bf4:	bpl	20ca4 <__assert_fail@plt+0xec18>
   20bf8:	ldrb	r0, [r7, #16]
   20bfc:	cmp	r0, #0
   20c00:	bne	20c2c <__assert_fail@plt+0xeba0>
   20c04:	vmov	s2, r6
   20c08:	vldr	s0, [r7, #8]
   20c0c:	vldr	s4, [pc, #292]	; 20d38 <__assert_fail@plt+0xecac>
   20c10:	vcvt.f32.u32	s2, s2
   20c14:	vdiv.f32	s2, s2, s0
   20c18:	vcvt.u32.f32	s0, s2
   20c1c:	vcmpe.f32	s2, s4
   20c20:	vmrs	APSR_nzcv, fpscr
   20c24:	bge	20cc0 <__assert_fail@plt+0xec34>
   20c28:	vmov	r6, s0
   20c2c:	cmp	r6, #10
   20c30:	movls	r6, #10
   20c34:	orr	r0, r6, #1
   20c38:	cmn	r0, #1
   20c3c:	beq	20cc0 <__assert_fail@plt+0xec34>
   20c40:	ldr	r6, [fp, #8]
   20c44:	mov	r1, #3
   20c48:	cmp	r0, #10
   20c4c:	bcc	20c84 <__assert_fail@plt+0xebf8>
   20c50:	mov	r1, #3
   20c54:	mov	r3, #9
   20c58:	mov	r2, #12
   20c5c:	udiv	r7, r0, r1
   20c60:	mls	r7, r7, r1, r0
   20c64:	cmp	r7, #0
   20c68:	beq	20c84 <__assert_fail@plt+0xebf8>
   20c6c:	add	r3, r3, r2
   20c70:	add	r2, r2, #8
   20c74:	add	r1, r1, #2
   20c78:	add	r3, r3, #4
   20c7c:	cmp	r3, r0
   20c80:	bcc	20c5c <__assert_fail@plt+0xebd0>
   20c84:	udiv	r2, r0, r1
   20c88:	mls	r1, r2, r1, r0
   20c8c:	cmp	r1, #0
   20c90:	bne	20cb8 <__assert_fail@plt+0xec2c>
   20c94:	add	r0, r0, #2
   20c98:	cmn	r0, #1
   20c9c:	bne	20c44 <__assert_fail@plt+0xebb8>
   20ca0:	b	20cc0 <__assert_fail@plt+0xec34>
   20ca4:	str	r0, [r4, #20]
   20ca8:	mov	r0, r4
   20cac:	bl	2056c <__assert_fail@plt+0xe4e0>
   20cb0:	mov	r0, r8
   20cb4:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   20cb8:	cmp	r0, #536870912	; 0x20000000
   20cbc:	bcc	20cd8 <__assert_fail@plt+0xec4c>
   20cc0:	mov	r0, #0
   20cc4:	str	r0, [r4, #8]
   20cc8:	mov	r0, r4
   20ccc:	bl	2056c <__assert_fail@plt+0xe4e0>
   20cd0:	mov	r0, r8
   20cd4:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   20cd8:	cmp	r0, #0
   20cdc:	str	r0, [r4, #8]
   20ce0:	beq	20cc8 <__assert_fail@plt+0xec3c>
   20ce4:	mov	r1, #8
   20ce8:	bl	2a5f4 <_obstack_memory_used@@Base+0x47a0>
   20cec:	cmp	r0, #0
   20cf0:	str	r0, [r4]
   20cf4:	beq	20cc8 <__assert_fail@plt+0xec3c>
   20cf8:	mov	r1, #0
   20cfc:	str	r5, [r4, #24]
   20d00:	str	r9, [r4, #28]
   20d04:	str	r6, [r4, #32]
   20d08:	mov	r8, r4
   20d0c:	str	r1, [r4, #36]	; 0x24
   20d10:	str	r1, [r4, #12]
   20d14:	str	r1, [r4, #16]
   20d18:	ldr	r1, [r4, #8]
   20d1c:	add	r0, r0, r1, lsl #3
   20d20:	str	r0, [r4, #4]
   20d24:	mov	r0, r8
   20d28:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   20d2c:	stclcc	12, cr12, [ip, #820]	; 0x334
   20d30:	svccc	0x00666666
   20d34:	svccc	0x008ccccd
   20d38:	svcmi	0x00800000
   20d3c:	ror	r2, r0, #3
   20d40:	udiv	r2, r2, r1
   20d44:	mul	r1, r2, r1
   20d48:	rsb	r0, r1, r0, ror #3
   20d4c:	bx	lr
   20d50:	sub	r0, r0, r1
   20d54:	clz	r0, r0
   20d58:	lsr	r0, r0, #5
   20d5c:	bx	lr
   20d60:	push	{r4, r5, r6, r7, fp, lr}
   20d64:	add	fp, sp, #16
   20d68:	mov	r4, r0
   20d6c:	ldr	r5, [r0]
   20d70:	ldr	r0, [r0, #4]
   20d74:	cmp	r5, r0
   20d78:	bcs	20e28 <__assert_fail@plt+0xed9c>
   20d7c:	mov	r6, #0
   20d80:	ldr	r1, [r5]
   20d84:	cmp	r1, #0
   20d88:	bne	20db4 <__assert_fail@plt+0xed28>
   20d8c:	b	20d9c <__assert_fail@plt+0xed10>
   20d90:	str	r6, [r5]
   20d94:	str	r6, [r5, #4]
   20d98:	ldr	r0, [r4, #4]
   20d9c:	add	r5, r5, #8
   20da0:	cmp	r5, r0
   20da4:	bcs	20e28 <__assert_fail@plt+0xed9c>
   20da8:	ldr	r1, [r5]
   20dac:	cmp	r1, #0
   20db0:	beq	20d9c <__assert_fail@plt+0xed10>
   20db4:	ldr	r1, [r4, #32]
   20db8:	ldr	r7, [r5, #4]
   20dbc:	cmp	r1, #0
   20dc0:	mov	r0, r1
   20dc4:	movwne	r0, #1
   20dc8:	cmp	r7, #0
   20dcc:	bne	20e10 <__assert_fail@plt+0xed84>
   20dd0:	cmp	r0, #0
   20dd4:	beq	20d90 <__assert_fail@plt+0xed04>
   20dd8:	ldr	r0, [r5]
   20ddc:	blx	r1
   20de0:	b	20d90 <__assert_fail@plt+0xed04>
   20de4:	str	r6, [r7]
   20de8:	cmp	r1, #0
   20dec:	ldr	r2, [r7, #4]
   20df0:	ldr	r0, [r4, #36]	; 0x24
   20df4:	str	r0, [r7, #4]
   20df8:	mov	r0, r1
   20dfc:	str	r7, [r4, #36]	; 0x24
   20e00:	movwne	r0, #1
   20e04:	cmp	r2, #0
   20e08:	mov	r7, r2
   20e0c:	beq	20dd0 <__assert_fail@plt+0xed44>
   20e10:	tst	r0, #1
   20e14:	beq	20de4 <__assert_fail@plt+0xed58>
   20e18:	ldr	r0, [r7]
   20e1c:	blx	r1
   20e20:	ldr	r1, [r4, #32]
   20e24:	b	20de4 <__assert_fail@plt+0xed58>
   20e28:	mov	r0, #0
   20e2c:	str	r0, [r4, #12]
   20e30:	str	r0, [r4, #16]
   20e34:	pop	{r4, r5, r6, r7, fp, pc}
   20e38:	push	{r4, r5, r6, sl, fp, lr}
   20e3c:	add	fp, sp, #16
   20e40:	mov	r4, r0
   20e44:	ldr	r0, [r0, #32]
   20e48:	cmp	r0, #0
   20e4c:	beq	20ec0 <__assert_fail@plt+0xee34>
   20e50:	ldr	r0, [r4, #16]
   20e54:	cmp	r0, #0
   20e58:	beq	20ec0 <__assert_fail@plt+0xee34>
   20e5c:	ldr	r5, [r4]
   20e60:	ldr	r1, [r4, #4]
   20e64:	cmp	r5, r1
   20e68:	bcc	20e80 <__assert_fail@plt+0xedf4>
   20e6c:	b	20ec0 <__assert_fail@plt+0xee34>
   20e70:	ldr	r1, [r4, #4]
   20e74:	add	r5, r5, #8
   20e78:	cmp	r5, r1
   20e7c:	bcs	20ec0 <__assert_fail@plt+0xee34>
   20e80:	ldr	r0, [r5]
   20e84:	cmp	r0, #0
   20e88:	cmpne	r5, #0
   20e8c:	beq	20e74 <__assert_fail@plt+0xede8>
   20e90:	ldr	r1, [r4, #32]
   20e94:	blx	r1
   20e98:	ldr	r6, [r5, #4]
   20e9c:	cmp	r6, #0
   20ea0:	beq	20e70 <__assert_fail@plt+0xede4>
   20ea4:	ldr	r1, [r4, #32]
   20ea8:	ldr	r0, [r6]
   20eac:	blx	r1
   20eb0:	ldr	r6, [r6, #4]
   20eb4:	cmp	r6, #0
   20eb8:	bne	20ea4 <__assert_fail@plt+0xee18>
   20ebc:	b	20e70 <__assert_fail@plt+0xede4>
   20ec0:	ldr	r5, [r4]
   20ec4:	ldr	r1, [r4, #4]
   20ec8:	cmp	r5, r1
   20ecc:	bcc	20ee0 <__assert_fail@plt+0xee54>
   20ed0:	b	20f08 <__assert_fail@plt+0xee7c>
   20ed4:	add	r5, r5, #8
   20ed8:	cmp	r5, r1
   20edc:	bcs	20f08 <__assert_fail@plt+0xee7c>
   20ee0:	ldr	r0, [r5, #4]
   20ee4:	cmp	r0, #0
   20ee8:	beq	20ed4 <__assert_fail@plt+0xee48>
   20eec:	ldr	r6, [r0, #4]
   20ef0:	bl	2056c <__assert_fail@plt+0xe4e0>
   20ef4:	cmp	r6, #0
   20ef8:	mov	r0, r6
   20efc:	bne	20eec <__assert_fail@plt+0xee60>
   20f00:	ldr	r1, [r4, #4]
   20f04:	b	20ed4 <__assert_fail@plt+0xee48>
   20f08:	ldr	r0, [r4, #36]	; 0x24
   20f0c:	cmp	r0, #0
   20f10:	beq	20f28 <__assert_fail@plt+0xee9c>
   20f14:	ldr	r5, [r0, #4]
   20f18:	bl	2056c <__assert_fail@plt+0xe4e0>
   20f1c:	cmp	r5, #0
   20f20:	mov	r0, r5
   20f24:	bne	20f14 <__assert_fail@plt+0xee88>
   20f28:	ldr	r0, [r4]
   20f2c:	bl	2056c <__assert_fail@plt+0xe4e0>
   20f30:	mov	r0, r4
   20f34:	pop	{r4, r5, r6, sl, fp, lr}
   20f38:	b	2056c <__assert_fail@plt+0xe4e0>
   20f3c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   20f40:	add	fp, sp, #28
   20f44:	sub	sp, sp, #44	; 0x2c
   20f48:	mov	r7, r0
   20f4c:	mov	r4, r0
   20f50:	ldr	r0, [r7, #20]!
   20f54:	ldrb	r2, [r0, #16]
   20f58:	cmp	r2, #0
   20f5c:	bne	20f8c <__assert_fail@plt+0xef00>
   20f60:	vmov	s2, r1
   20f64:	vldr	s0, [r0, #8]
   20f68:	vldr	s4, [pc, #592]	; 211c0 <__assert_fail@plt+0xf134>
   20f6c:	mov	r5, #0
   20f70:	vcvt.f32.u32	s2, s2
   20f74:	vdiv.f32	s2, s2, s0
   20f78:	vcvt.u32.f32	s0, s2
   20f7c:	vcmpe.f32	s2, s4
   20f80:	vmrs	APSR_nzcv, fpscr
   20f84:	bge	210b0 <__assert_fail@plt+0xf024>
   20f88:	vmov	r1, s0
   20f8c:	cmp	r1, #10
   20f90:	mov	r5, #0
   20f94:	movls	r1, #10
   20f98:	orr	r6, r1, #1
   20f9c:	cmn	r6, #1
   20fa0:	beq	210b0 <__assert_fail@plt+0xf024>
   20fa4:	mov	r0, #3
   20fa8:	cmp	r6, #10
   20fac:	bcc	20fe4 <__assert_fail@plt+0xef58>
   20fb0:	mov	r0, #3
   20fb4:	mov	r2, #9
   20fb8:	mov	r1, #12
   20fbc:	udiv	r3, r6, r0
   20fc0:	mls	r3, r3, r0, r6
   20fc4:	cmp	r3, #0
   20fc8:	beq	20fe4 <__assert_fail@plt+0xef58>
   20fcc:	add	r2, r2, r1
   20fd0:	add	r1, r1, #8
   20fd4:	add	r0, r0, #2
   20fd8:	add	r2, r2, #4
   20fdc:	cmp	r2, r6
   20fe0:	bcc	20fbc <__assert_fail@plt+0xef30>
   20fe4:	udiv	r1, r6, r0
   20fe8:	mls	r0, r1, r0, r6
   20fec:	cmp	r0, #0
   20ff0:	bne	21004 <__assert_fail@plt+0xef78>
   20ff4:	add	r6, r6, #2
   20ff8:	cmn	r6, #1
   20ffc:	bne	20fa4 <__assert_fail@plt+0xef18>
   21000:	b	210b0 <__assert_fail@plt+0xf024>
   21004:	sub	r0, r6, #1
   21008:	cmn	r0, #-536870910	; 0xe0000002
   2100c:	bhi	210b0 <__assert_fail@plt+0xf024>
   21010:	ldr	r0, [r4, #8]
   21014:	cmp	r6, r0
   21018:	bne	2102c <__assert_fail@plt+0xefa0>
   2101c:	mov	r5, #1
   21020:	mov	r0, r5
   21024:	sub	sp, fp, #28
   21028:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2102c:	mov	r0, r6
   21030:	mov	r1, #8
   21034:	bl	2a5f4 <_obstack_memory_used@@Base+0x47a0>
   21038:	cmp	r0, #0
   2103c:	str	r0, [sp, #4]
   21040:	beq	210b0 <__assert_fail@plt+0xf024>
   21044:	add	r0, r0, r6, lsl #3
   21048:	mov	r1, #0
   2104c:	add	r5, sp, #4
   21050:	mov	sl, r4
   21054:	mov	r2, #0
   21058:	str	r1, [sp, #20]
   2105c:	str	r1, [sp, #16]
   21060:	str	r6, [sp, #12]
   21064:	mov	r1, r4
   21068:	str	r0, [sp, #8]
   2106c:	add	r0, r5, #20
   21070:	vld1.32	{d16-d17}, [r7]
   21074:	vst1.32	{d16-d17}, [r0]
   21078:	ldr	r0, [sl, #36]!	; 0x24
   2107c:	str	r0, [sp, #40]	; 0x28
   21080:	mov	r0, r5
   21084:	bl	211c4 <__assert_fail@plt+0xf138>
   21088:	cmp	r0, #0
   2108c:	beq	210bc <__assert_fail@plt+0xf030>
   21090:	ldr	r0, [r4]
   21094:	bl	2056c <__assert_fail@plt+0xe4e0>
   21098:	mov	r0, #36	; 0x24
   2109c:	vld1.32	{d16-d17}, [r5], r0
   210a0:	vst1.32	{d16-d17}, [r4], r0
   210a4:	ldr	r0, [r5]
   210a8:	mov	r5, #1
   210ac:	str	r0, [r4]
   210b0:	mov	r0, r5
   210b4:	sub	sp, fp, #28
   210b8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   210bc:	ldr	r0, [sp, #40]	; 0x28
   210c0:	str	r0, [sl]
   210c4:	ldr	r0, [sp, #8]
   210c8:	ldr	r8, [sp, #4]
   210cc:	cmp	r8, r0
   210d0:	str	r0, [sp]
   210d4:	bcs	2118c <__assert_fail@plt+0xf100>
   210d8:	mov	r9, #0
   210dc:	ldr	r0, [r8]
   210e0:	cmp	r0, #0
   210e4:	bne	2110c <__assert_fail@plt+0xf080>
   210e8:	b	210f0 <__assert_fail@plt+0xf064>
   210ec:	str	r9, [r8, #4]
   210f0:	ldr	r0, [sp]
   210f4:	add	r8, r8, #8
   210f8:	cmp	r8, r0
   210fc:	bcs	2118c <__assert_fail@plt+0xf100>
   21100:	ldr	r0, [r8]
   21104:	cmp	r0, #0
   21108:	beq	210f0 <__assert_fail@plt+0xf064>
   2110c:	ldr	r6, [r8, #4]
   21110:	cmp	r6, #0
   21114:	beq	210ec <__assert_fail@plt+0xf060>
   21118:	ldr	r1, [r4, #8]
   2111c:	b	21140 <__assert_fail@plt+0xf0b4>
   21120:	add	r0, r3, r0, lsl #3
   21124:	add	r0, r0, #4
   21128:	ldr	r3, [r0]
   2112c:	cmp	r2, #0
   21130:	str	r3, [r6, #4]
   21134:	str	r6, [r0]
   21138:	mov	r6, r2
   2113c:	beq	210ec <__assert_fail@plt+0xf060>
   21140:	ldr	r5, [r6]
   21144:	ldr	r2, [r4, #24]
   21148:	mov	r0, r5
   2114c:	blx	r2
   21150:	ldr	r1, [r4, #8]
   21154:	cmp	r0, r1
   21158:	bcs	211bc <__assert_fail@plt+0xf130>
   2115c:	ldr	r3, [r4]
   21160:	ldr	r2, [r6, #4]
   21164:	ldr	r7, [r3, r0, lsl #3]
   21168:	cmp	r7, #0
   2116c:	bne	21120 <__assert_fail@plt+0xf094>
   21170:	str	r5, [r3, r0, lsl #3]
   21174:	ldr	r0, [r4, #12]
   21178:	add	r0, r0, #1
   2117c:	str	r0, [r4, #12]
   21180:	mov	r0, sl
   21184:	str	r9, [r6]
   21188:	b	21128 <__assert_fail@plt+0xf09c>
   2118c:	add	r1, sp, #4
   21190:	mov	r0, r4
   21194:	mov	r2, #0
   21198:	mov	r5, #0
   2119c:	bl	211c4 <__assert_fail@plt+0xf138>
   211a0:	cmp	r0, #0
   211a4:	beq	211bc <__assert_fail@plt+0xf130>
   211a8:	ldr	r0, [sp, #4]
   211ac:	bl	2056c <__assert_fail@plt+0xe4e0>
   211b0:	mov	r0, r5
   211b4:	sub	sp, fp, #28
   211b8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   211bc:	bl	12038 <abort@plt>
   211c0:	svcmi	0x00800000
   211c4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   211c8:	add	fp, sp, #28
   211cc:	sub	sp, sp, #4
   211d0:	ldr	r8, [r1]
   211d4:	ldr	r3, [r1, #4]
   211d8:	mov	r6, r0
   211dc:	mov	r0, #1
   211e0:	str	r1, [sp]
   211e4:	cmp	r8, r3
   211e8:	bcs	213fc <__assert_fail@plt+0xf370>
   211ec:	add	sl, r6, #36	; 0x24
   211f0:	cmp	r2, #0
   211f4:	beq	212b0 <__assert_fail@plt+0xf224>
   211f8:	mov	r9, #0
   211fc:	ldr	r1, [r8]
   21200:	cmp	r1, #0
   21204:	bne	21230 <__assert_fail@plt+0xf1a4>
   21208:	b	21218 <__assert_fail@plt+0xf18c>
   2120c:	ldr	r0, [sp]
   21210:	ldr	r3, [r0, #4]
   21214:	str	r9, [r8, #4]
   21218:	add	r8, r8, #8
   2121c:	cmp	r8, r3
   21220:	bcs	213f8 <__assert_fail@plt+0xf36c>
   21224:	ldr	r1, [r8]
   21228:	cmp	r1, #0
   2122c:	beq	21218 <__assert_fail@plt+0xf18c>
   21230:	ldr	r7, [r8, #4]
   21234:	cmp	r7, #0
   21238:	beq	21214 <__assert_fail@plt+0xf188>
   2123c:	ldr	r1, [r6, #8]
   21240:	b	21274 <__assert_fail@plt+0xf1e8>
   21244:	str	r4, [r3, r0, lsl #3]
   21248:	ldr	r0, [r6, #12]
   2124c:	add	r0, r0, #1
   21250:	str	r0, [r6, #12]
   21254:	mov	r0, sl
   21258:	str	r9, [r7]
   2125c:	ldr	r3, [r0]
   21260:	cmp	r2, #0
   21264:	str	r3, [r7, #4]
   21268:	str	r7, [r0]
   2126c:	mov	r7, r2
   21270:	beq	2120c <__assert_fail@plt+0xf180>
   21274:	ldr	r4, [r7]
   21278:	ldr	r2, [r6, #24]
   2127c:	mov	r0, r4
   21280:	blx	r2
   21284:	ldr	r1, [r6, #8]
   21288:	cmp	r0, r1
   2128c:	bcs	21410 <__assert_fail@plt+0xf384>
   21290:	ldr	r3, [r6]
   21294:	ldr	r2, [r7, #4]
   21298:	ldr	r5, [r3, r0, lsl #3]
   2129c:	cmp	r5, #0
   212a0:	beq	21244 <__assert_fail@plt+0xf1b8>
   212a4:	add	r0, r3, r0, lsl #3
   212a8:	add	r0, r0, #4
   212ac:	b	2125c <__assert_fail@plt+0xf1d0>
   212b0:	mov	r5, #0
   212b4:	ldr	r7, [r8]
   212b8:	cmp	r7, #0
   212bc:	bne	21304 <__assert_fail@plt+0xf278>
   212c0:	b	212ec <__assert_fail@plt+0xf260>
   212c4:	str	r7, [r9, r4, lsl #3]
   212c8:	ldr	r0, [r6, #12]
   212cc:	add	r0, r0, #1
   212d0:	str	r0, [r6, #12]
   212d4:	ldr	r0, [sp]
   212d8:	str	r5, [r8]
   212dc:	ldr	r1, [r0, #12]
   212e0:	ldr	r3, [r0, #4]
   212e4:	sub	r1, r1, #1
   212e8:	str	r1, [r0, #12]
   212ec:	add	r8, r8, #8
   212f0:	cmp	r8, r3
   212f4:	bcs	213f8 <__assert_fail@plt+0xf36c>
   212f8:	ldr	r7, [r8]
   212fc:	cmp	r7, #0
   21300:	beq	212ec <__assert_fail@plt+0xf260>
   21304:	ldr	r9, [r8, #4]
   21308:	ldr	r1, [r6, #8]
   2130c:	cmp	r9, #0
   21310:	bne	21338 <__assert_fail@plt+0xf2ac>
   21314:	b	21388 <__assert_fail@plt+0xf2fc>
   21318:	add	r0, r3, r0, lsl #3
   2131c:	add	r0, r0, #4
   21320:	ldr	r3, [r0]
   21324:	cmp	r2, #0
   21328:	str	r3, [r9, #4]
   2132c:	str	r9, [r0]
   21330:	mov	r9, r2
   21334:	beq	21384 <__assert_fail@plt+0xf2f8>
   21338:	ldr	r4, [r9]
   2133c:	ldr	r2, [r6, #24]
   21340:	mov	r0, r4
   21344:	blx	r2
   21348:	ldr	r1, [r6, #8]
   2134c:	cmp	r0, r1
   21350:	bcs	21410 <__assert_fail@plt+0xf384>
   21354:	ldr	r3, [r6]
   21358:	ldr	r2, [r9, #4]
   2135c:	ldr	r7, [r3, r0, lsl #3]
   21360:	cmp	r7, #0
   21364:	bne	21318 <__assert_fail@plt+0xf28c>
   21368:	str	r4, [r3, r0, lsl #3]
   2136c:	ldr	r0, [r6, #12]
   21370:	add	r0, r0, #1
   21374:	str	r0, [r6, #12]
   21378:	mov	r0, sl
   2137c:	str	r5, [r9]
   21380:	b	21320 <__assert_fail@plt+0xf294>
   21384:	ldr	r7, [r8]
   21388:	str	r5, [r8, #4]
   2138c:	mov	r0, r7
   21390:	ldr	r2, [r6, #24]
   21394:	blx	r2
   21398:	mov	r4, r0
   2139c:	ldr	r0, [r6, #8]
   213a0:	cmp	r4, r0
   213a4:	bcs	21410 <__assert_fail@plt+0xf384>
   213a8:	ldr	r9, [r6]
   213ac:	ldr	r0, [r9, r4, lsl #3]
   213b0:	cmp	r0, #0
   213b4:	beq	212c4 <__assert_fail@plt+0xf238>
   213b8:	ldr	r0, [sl]
   213bc:	cmp	r0, #0
   213c0:	beq	213d0 <__assert_fail@plt+0xf344>
   213c4:	ldr	r1, [r0, #4]
   213c8:	str	r1, [sl]
   213cc:	b	213e0 <__assert_fail@plt+0xf354>
   213d0:	mov	r0, #8
   213d4:	bl	2a648 <_obstack_memory_used@@Base+0x47f4>
   213d8:	cmp	r0, #0
   213dc:	beq	21404 <__assert_fail@plt+0xf378>
   213e0:	add	r1, r9, r4, lsl #3
   213e4:	str	r7, [r0]
   213e8:	ldr	r2, [r1, #4]
   213ec:	str	r2, [r0, #4]
   213f0:	str	r0, [r1, #4]
   213f4:	b	212d4 <__assert_fail@plt+0xf248>
   213f8:	mov	r0, #1
   213fc:	sub	sp, fp, #28
   21400:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   21404:	mov	r0, #0
   21408:	sub	sp, fp, #28
   2140c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   21410:	bl	12038 <abort@plt>
   21414:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   21418:	add	fp, sp, #28
   2141c:	sub	sp, sp, #4
   21420:	cmp	r1, #0
   21424:	beq	21760 <__assert_fail@plt+0xf6d4>
   21428:	mov	r8, r2
   2142c:	mov	sl, r1
   21430:	ldr	r1, [r0, #8]
   21434:	ldr	r2, [r0, #24]
   21438:	mov	r4, r0
   2143c:	mov	r0, sl
   21440:	blx	r2
   21444:	mov	r7, r0
   21448:	ldr	r0, [r4, #8]
   2144c:	cmp	r7, r0
   21450:	bcs	21760 <__assert_fail@plt+0xf6d4>
   21454:	ldr	r5, [r4]
   21458:	mov	r9, r5
   2145c:	ldr	r1, [r9, r7, lsl #3]!
   21460:	cmp	r1, #0
   21464:	beq	214f8 <__assert_fail@plt+0xf46c>
   21468:	cmp	r1, sl
   2146c:	beq	21498 <__assert_fail@plt+0xf40c>
   21470:	ldr	r2, [r4, #28]
   21474:	mov	r0, sl
   21478:	blx	r2
   2147c:	cmp	r0, #0
   21480:	mov	r6, r9
   21484:	beq	214b4 <__assert_fail@plt+0xf428>
   21488:	ldr	r0, [r6]
   2148c:	cmp	r0, #0
   21490:	bne	2149c <__assert_fail@plt+0xf410>
   21494:	b	214f8 <__assert_fail@plt+0xf46c>
   21498:	mov	r0, sl
   2149c:	cmp	r8, #0
   214a0:	mov	r7, #0
   214a4:	strne	r0, [r8]
   214a8:	mov	r0, r7
   214ac:	sub	sp, fp, #28
   214b0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   214b4:	add	r6, r5, r7, lsl #3
   214b8:	ldr	r0, [r6, #4]!
   214bc:	cmp	r0, #0
   214c0:	beq	214f8 <__assert_fail@plt+0xf46c>
   214c4:	ldr	r1, [r0]
   214c8:	cmp	r1, sl
   214cc:	beq	214ec <__assert_fail@plt+0xf460>
   214d0:	ldr	r2, [r4, #28]
   214d4:	mov	r0, sl
   214d8:	blx	r2
   214dc:	ldr	r6, [r6]
   214e0:	cmp	r0, #0
   214e4:	beq	214b8 <__assert_fail@plt+0xf42c>
   214e8:	b	21488 <__assert_fail@plt+0xf3fc>
   214ec:	mov	r0, sl
   214f0:	cmp	r0, #0
   214f4:	bne	2149c <__assert_fail@plt+0xf410>
   214f8:	vldr	s0, [r4, #8]
   214fc:	vldr	s2, [r4, #12]
   21500:	ldr	r0, [r4, #20]
   21504:	vcvt.f32.u32	s0, s0
   21508:	vcvt.f32.u32	s4, s2
   2150c:	vldr	s2, [r0, #8]
   21510:	vmul.f32	s6, s2, s0
   21514:	vcmpe.f32	s6, s4
   21518:	vmrs	APSR_nzcv, fpscr
   2151c:	bpl	21680 <__assert_fail@plt+0xf5f4>
   21520:	movw	r1, #61280	; 0xef60
   21524:	movt	r1, #2
   21528:	cmp	r0, r1
   2152c:	beq	215c8 <__assert_fail@plt+0xf53c>
   21530:	vldr	s6, [pc, #556]	; 21764 <__assert_fail@plt+0xf6d8>
   21534:	vcmpe.f32	s2, s6
   21538:	vmrs	APSR_nzcv, fpscr
   2153c:	ble	215a4 <__assert_fail@plt+0xf518>
   21540:	vldr	s8, [pc, #544]	; 21768 <__assert_fail@plt+0xf6dc>
   21544:	vcmpe.f32	s2, s8
   21548:	vmrs	APSR_nzcv, fpscr
   2154c:	bpl	215a4 <__assert_fail@plt+0xf518>
   21550:	vldr	s8, [pc, #532]	; 2176c <__assert_fail@plt+0xf6e0>
   21554:	vldr	s10, [r0, #12]
   21558:	vcmpe.f32	s10, s8
   2155c:	vmrs	APSR_nzcv, fpscr
   21560:	ble	215a4 <__assert_fail@plt+0xf518>
   21564:	vldr	s8, [r0]
   21568:	vcmpe.f32	s8, #0.0
   2156c:	vmrs	APSR_nzcv, fpscr
   21570:	blt	215a4 <__assert_fail@plt+0xf518>
   21574:	vadd.f32	s6, s8, s6
   21578:	vcmpe.f32	s6, s2
   2157c:	vmrs	APSR_nzcv, fpscr
   21580:	bpl	215a4 <__assert_fail@plt+0xf518>
   21584:	vldr	s8, [r0, #4]
   21588:	vmov.f32	s10, #112	; 0x3f800000  1.0
   2158c:	vcmpe.f32	s8, s10
   21590:	vmrs	APSR_nzcv, fpscr
   21594:	bhi	215a4 <__assert_fail@plt+0xf518>
   21598:	vcmpe.f32	s6, s8
   2159c:	vmrs	APSR_nzcv, fpscr
   215a0:	bmi	215b4 <__assert_fail@plt+0xf528>
   215a4:	vldr	s2, [pc, #452]	; 21770 <__assert_fail@plt+0xf6e4>
   215a8:	movw	r0, #61280	; 0xef60
   215ac:	movt	r0, #2
   215b0:	str	r0, [r4, #20]
   215b4:	vmul.f32	s6, s2, s0
   215b8:	vcmpe.f32	s6, s4
   215bc:	vmrs	APSR_nzcv, fpscr
   215c0:	bmi	215dc <__assert_fail@plt+0xf550>
   215c4:	b	21680 <__assert_fail@plt+0xf5f4>
   215c8:	mov	r0, r1
   215cc:	vmul.f32	s6, s2, s0
   215d0:	vcmpe.f32	s6, s4
   215d4:	vmrs	APSR_nzcv, fpscr
   215d8:	bpl	21680 <__assert_fail@plt+0xf5f4>
   215dc:	vldr	s4, [r0, #12]
   215e0:	ldrb	r0, [r0, #16]
   215e4:	mvn	r7, #0
   215e8:	cmp	r0, #0
   215ec:	vmul.f32	s0, s4, s0
   215f0:	vldr	s4, [pc, #380]	; 21774 <__assert_fail@plt+0xf6e8>
   215f4:	vmul.f32	s2, s2, s0
   215f8:	vseleq.f32	s0, s2, s0
   215fc:	vcmpe.f32	s0, s4
   21600:	vmrs	APSR_nzcv, fpscr
   21604:	bge	216f4 <__assert_fail@plt+0xf668>
   21608:	vcvt.u32.f32	s0, s0
   2160c:	mov	r0, r4
   21610:	vmov	r1, s0
   21614:	bl	20f3c <__assert_fail@plt+0xeeb0>
   21618:	cmp	r0, #0
   2161c:	beq	216f4 <__assert_fail@plt+0xf668>
   21620:	ldr	r1, [r4, #8]
   21624:	ldr	r2, [r4, #24]
   21628:	mov	r0, sl
   2162c:	blx	r2
   21630:	mov	r7, r0
   21634:	ldr	r0, [r4, #8]
   21638:	cmp	r7, r0
   2163c:	bcs	21760 <__assert_fail@plt+0xf6d4>
   21640:	ldr	r5, [r4]
   21644:	mov	r9, r5
   21648:	ldr	r1, [r9, r7, lsl #3]!
   2164c:	cmp	r1, #0
   21650:	beq	21680 <__assert_fail@plt+0xf5f4>
   21654:	cmp	r1, sl
   21658:	mov	r0, sl
   2165c:	beq	21678 <__assert_fail@plt+0xf5ec>
   21660:	ldr	r2, [r4, #28]
   21664:	mov	r0, sl
   21668:	blx	r2
   2166c:	cmp	r0, #0
   21670:	beq	21710 <__assert_fail@plt+0xf684>
   21674:	ldr	r0, [r9]
   21678:	cmp	r0, #0
   2167c:	bne	21760 <__assert_fail@plt+0xf6d4>
   21680:	ldr	r0, [r9]
   21684:	cmp	r0, #0
   21688:	beq	216a4 <__assert_fail@plt+0xf618>
   2168c:	ldr	r0, [r4, #36]	; 0x24
   21690:	cmp	r0, #0
   21694:	beq	216c4 <__assert_fail@plt+0xf638>
   21698:	ldr	r1, [r0, #4]
   2169c:	str	r1, [r4, #36]	; 0x24
   216a0:	b	216d4 <__assert_fail@plt+0xf648>
   216a4:	str	sl, [r9]
   216a8:	ldr	r0, [r4, #12]
   216ac:	ldr	r1, [r4, #16]
   216b0:	add	r0, r0, #1
   216b4:	add	r1, r1, #1
   216b8:	str	r0, [r4, #12]
   216bc:	str	r1, [r4, #16]
   216c0:	b	216f0 <__assert_fail@plt+0xf664>
   216c4:	mov	r0, #8
   216c8:	bl	2a648 <_obstack_memory_used@@Base+0x47f4>
   216cc:	cmp	r0, #0
   216d0:	beq	21700 <__assert_fail@plt+0xf674>
   216d4:	str	sl, [r0]
   216d8:	ldr	r1, [r9, #4]
   216dc:	str	r1, [r0, #4]
   216e0:	str	r0, [r9, #4]
   216e4:	ldr	r0, [r4, #16]
   216e8:	add	r0, r0, #1
   216ec:	str	r0, [r4, #16]
   216f0:	mov	r7, #1
   216f4:	mov	r0, r7
   216f8:	sub	sp, fp, #28
   216fc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   21700:	mvn	r7, #0
   21704:	mov	r0, r7
   21708:	sub	sp, fp, #28
   2170c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   21710:	add	r6, r5, r7, lsl #3
   21714:	ldr	r0, [r6, #4]!
   21718:	cmp	r0, #0
   2171c:	beq	21680 <__assert_fail@plt+0xf5f4>
   21720:	ldr	r1, [r0]
   21724:	cmp	r1, sl
   21728:	beq	21754 <__assert_fail@plt+0xf6c8>
   2172c:	ldr	r2, [r4, #28]
   21730:	mov	r0, sl
   21734:	blx	r2
   21738:	ldr	r6, [r6]
   2173c:	cmp	r0, #0
   21740:	beq	21714 <__assert_fail@plt+0xf688>
   21744:	ldr	r0, [r6]
   21748:	cmp	r0, #0
   2174c:	beq	21680 <__assert_fail@plt+0xf5f4>
   21750:	b	21760 <__assert_fail@plt+0xf6d4>
   21754:	mov	r0, sl
   21758:	cmp	r0, #0
   2175c:	beq	21680 <__assert_fail@plt+0xf5f4>
   21760:	bl	12038 <abort@plt>
   21764:	stclcc	12, cr12, [ip, #820]	; 0x334
   21768:	svccc	0x00666666
   2176c:	svccc	0x008ccccd
   21770:	svccc	0x004ccccd
   21774:	svcmi	0x00800000
   21778:	push	{r4, sl, fp, lr}
   2177c:	add	fp, sp, #8
   21780:	sub	sp, sp, #8
   21784:	add	r2, sp, #4
   21788:	mov	r4, r1
   2178c:	bl	21414 <__assert_fail@plt+0xf388>
   21790:	cmn	r0, #1
   21794:	beq	217b0 <__assert_fail@plt+0xf724>
   21798:	ldr	r1, [sp, #4]
   2179c:	cmp	r0, #0
   217a0:	moveq	r4, r1
   217a4:	mov	r0, r4
   217a8:	sub	sp, fp, #8
   217ac:	pop	{r4, sl, fp, pc}
   217b0:	mov	r4, #0
   217b4:	mov	r0, r4
   217b8:	sub	sp, fp, #8
   217bc:	pop	{r4, sl, fp, pc}
   217c0:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   217c4:	add	fp, sp, #24
   217c8:	mov	r9, r1
   217cc:	ldr	r1, [r0, #8]
   217d0:	ldr	r2, [r0, #24]
   217d4:	mov	r5, r0
   217d8:	mov	r0, r9
   217dc:	blx	r2
   217e0:	mov	r7, r0
   217e4:	ldr	r0, [r5, #8]
   217e8:	cmp	r7, r0
   217ec:	bcs	21a60 <__assert_fail@plt+0xf9d4>
   217f0:	ldr	r6, [r5]
   217f4:	mov	r8, #0
   217f8:	mov	r4, r6
   217fc:	ldr	r1, [r4, r7, lsl #3]!
   21800:	cmp	r1, #0
   21804:	beq	218b8 <__assert_fail@plt+0xf82c>
   21808:	cmp	r1, r9
   2180c:	beq	21828 <__assert_fail@plt+0xf79c>
   21810:	ldr	r2, [r5, #28]
   21814:	mov	r0, r9
   21818:	blx	r2
   2181c:	cmp	r0, #0
   21820:	beq	21860 <__assert_fail@plt+0xf7d4>
   21824:	ldr	r9, [r4]
   21828:	add	r0, r6, r7, lsl #3
   2182c:	ldr	r0, [r0, #4]
   21830:	cmp	r0, #0
   21834:	beq	218a8 <__assert_fail@plt+0xf81c>
   21838:	ldm	r0, {r1, r2}
   2183c:	stm	r4, {r1, r2}
   21840:	mov	r1, #0
   21844:	str	r1, [r0]
   21848:	ldr	r1, [r5, #36]	; 0x24
   2184c:	str	r1, [r0, #4]
   21850:	str	r0, [r5, #36]	; 0x24
   21854:	cmp	r9, #0
   21858:	bne	218f0 <__assert_fail@plt+0xf864>
   2185c:	b	218b8 <__assert_fail@plt+0xf82c>
   21860:	add	r7, r6, r7, lsl #3
   21864:	ldr	r0, [r7, #4]!
   21868:	cmp	r0, #0
   2186c:	beq	218b8 <__assert_fail@plt+0xf82c>
   21870:	ldr	r1, [r0]
   21874:	cmp	r1, r9
   21878:	beq	218c0 <__assert_fail@plt+0xf834>
   2187c:	ldr	r2, [r5, #28]
   21880:	mov	r0, r9
   21884:	blx	r2
   21888:	ldr	r1, [r7]
   2188c:	cmp	r0, #0
   21890:	bne	218c8 <__assert_fail@plt+0xf83c>
   21894:	ldr	r0, [r1, #4]!
   21898:	mov	r7, r1
   2189c:	cmp	r0, #0
   218a0:	bne	21870 <__assert_fail@plt+0xf7e4>
   218a4:	b	218b8 <__assert_fail@plt+0xf82c>
   218a8:	mov	r0, #0
   218ac:	str	r0, [r4]
   218b0:	cmp	r9, #0
   218b4:	bne	218f0 <__assert_fail@plt+0xf864>
   218b8:	mov	r0, r8
   218bc:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   218c0:	mov	r1, r0
   218c4:	b	218cc <__assert_fail@plt+0xf840>
   218c8:	ldr	r9, [r1]
   218cc:	ldr	r0, [r1, #4]
   218d0:	str	r0, [r7]
   218d4:	mov	r0, #0
   218d8:	str	r0, [r1]
   218dc:	ldr	r0, [r5, #36]	; 0x24
   218e0:	str	r0, [r1, #4]
   218e4:	str	r1, [r5, #36]	; 0x24
   218e8:	cmp	r9, #0
   218ec:	beq	218b8 <__assert_fail@plt+0xf82c>
   218f0:	ldr	r0, [r5, #16]
   218f4:	sub	r0, r0, #1
   218f8:	str	r0, [r5, #16]
   218fc:	ldr	r0, [r4]
   21900:	cmp	r0, #0
   21904:	bne	21a54 <__assert_fail@plt+0xf9c8>
   21908:	ldr	r0, [r5, #12]
   2190c:	vldr	s0, [r5, #8]
   21910:	sub	r1, r0, #1
   21914:	str	r1, [r5, #12]
   21918:	vmov	s2, r1
   2191c:	ldr	r0, [r5, #20]
   21920:	vcvt.f32.u32	s0, s0
   21924:	vcvt.f32.u32	s2, s2
   21928:	vldr	s4, [r0]
   2192c:	vmul.f32	s6, s4, s0
   21930:	vcmpe.f32	s6, s2
   21934:	vmrs	APSR_nzcv, fpscr
   21938:	ble	21a54 <__assert_fail@plt+0xf9c8>
   2193c:	movw	r1, #61280	; 0xef60
   21940:	movt	r1, #2
   21944:	cmp	r0, r1
   21948:	beq	219e4 <__assert_fail@plt+0xf958>
   2194c:	vldr	s8, [pc, #272]	; 21a64 <__assert_fail@plt+0xf9d8>
   21950:	vldr	s6, [r0, #8]
   21954:	vcmpe.f32	s6, s8
   21958:	vmrs	APSR_nzcv, fpscr
   2195c:	ble	219c0 <__assert_fail@plt+0xf934>
   21960:	vldr	s10, [pc, #256]	; 21a68 <__assert_fail@plt+0xf9dc>
   21964:	vcmpe.f32	s6, s10
   21968:	vmrs	APSR_nzcv, fpscr
   2196c:	bpl	219c0 <__assert_fail@plt+0xf934>
   21970:	vcmpe.f32	s4, #0.0
   21974:	vmrs	APSR_nzcv, fpscr
   21978:	blt	219c0 <__assert_fail@plt+0xf934>
   2197c:	vldr	s10, [r0, #12]
   21980:	vldr	s12, [pc, #228]	; 21a6c <__assert_fail@plt+0xf9e0>
   21984:	vcmpe.f32	s10, s12
   21988:	vmrs	APSR_nzcv, fpscr
   2198c:	ble	219c0 <__assert_fail@plt+0xf934>
   21990:	vadd.f32	s8, s4, s8
   21994:	vcmpe.f32	s8, s6
   21998:	vmrs	APSR_nzcv, fpscr
   2199c:	bpl	219c0 <__assert_fail@plt+0xf934>
   219a0:	vldr	s6, [r0, #4]
   219a4:	vmov.f32	s10, #112	; 0x3f800000  1.0
   219a8:	vcmpe.f32	s6, s10
   219ac:	vmrs	APSR_nzcv, fpscr
   219b0:	bhi	219c0 <__assert_fail@plt+0xf934>
   219b4:	vcmpe.f32	s8, s6
   219b8:	vmrs	APSR_nzcv, fpscr
   219bc:	bmi	219d0 <__assert_fail@plt+0xf944>
   219c0:	vldr	s4, [pc, #168]	; 21a70 <__assert_fail@plt+0xf9e4>
   219c4:	movw	r0, #61280	; 0xef60
   219c8:	movt	r0, #2
   219cc:	str	r0, [r5, #20]
   219d0:	vmul.f32	s4, s4, s0
   219d4:	vcmpe.f32	s4, s2
   219d8:	vmrs	APSR_nzcv, fpscr
   219dc:	bgt	219f8 <__assert_fail@plt+0xf96c>
   219e0:	b	21a54 <__assert_fail@plt+0xf9c8>
   219e4:	mov	r0, r1
   219e8:	vmul.f32	s4, s4, s0
   219ec:	vcmpe.f32	s4, s2
   219f0:	vmrs	APSR_nzcv, fpscr
   219f4:	ble	21a54 <__assert_fail@plt+0xf9c8>
   219f8:	vldr	s2, [r0, #4]
   219fc:	ldrb	r1, [r0, #16]
   21a00:	cmp	r1, #0
   21a04:	vmul.f32	s0, s2, s0
   21a08:	bne	21a14 <__assert_fail@plt+0xf988>
   21a0c:	vldr	s2, [r0, #8]
   21a10:	vmul.f32	s0, s0, s2
   21a14:	vcvt.u32.f32	s0, s0
   21a18:	mov	r0, r5
   21a1c:	vmov	r1, s0
   21a20:	bl	20f3c <__assert_fail@plt+0xeeb0>
   21a24:	cmp	r0, #0
   21a28:	bne	21a54 <__assert_fail@plt+0xf9c8>
   21a2c:	ldr	r0, [r5, #36]	; 0x24
   21a30:	cmp	r0, #0
   21a34:	beq	21a4c <__assert_fail@plt+0xf9c0>
   21a38:	ldr	r4, [r0, #4]
   21a3c:	bl	2056c <__assert_fail@plt+0xe4e0>
   21a40:	cmp	r4, #0
   21a44:	mov	r0, r4
   21a48:	bne	21a38 <__assert_fail@plt+0xf9ac>
   21a4c:	mov	r0, #0
   21a50:	str	r0, [r5, #36]	; 0x24
   21a54:	mov	r8, r9
   21a58:	mov	r0, r8
   21a5c:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   21a60:	bl	12038 <abort@plt>
   21a64:	stclcc	12, cr12, [ip, #820]	; 0x334
   21a68:	svccc	0x00666666
   21a6c:	svccc	0x008ccccd
   21a70:	andeq	r0, r0, r0
   21a74:	b	217c0 <__assert_fail@plt+0xf734>
   21a78:	push	{r4, r5, fp, lr}
   21a7c:	add	fp, sp, #8
   21a80:	mov	r5, r0
   21a84:	ldr	r0, [r0]
   21a88:	mov	r4, r1
   21a8c:	bl	2a8f0 <_obstack_memory_used@@Base+0x4a9c>
   21a90:	ldrd	r2, [r5, #8]
   21a94:	eor	r0, r2, r0
   21a98:	mov	r1, r3
   21a9c:	mov	r2, r4
   21aa0:	mov	r3, #0
   21aa4:	bl	2ae3c <_obstack_memory_used@@Base+0x4fe8>
   21aa8:	mov	r0, r2
   21aac:	pop	{r4, r5, fp, pc}
   21ab0:	push	{r4, r5, fp, lr}
   21ab4:	add	fp, sp, #8
   21ab8:	mov	lr, r1
   21abc:	mov	r2, r0
   21ac0:	ldr	r3, [r2, #8]!
   21ac4:	ldr	ip, [lr, #8]!
   21ac8:	ldr	r4, [r2, #4]
   21acc:	eor	ip, r3, ip
   21ad0:	ldr	r3, [lr, #4]
   21ad4:	eor	r3, r4, r3
   21ad8:	orrs	r3, ip, r3
   21adc:	mov	ip, #0
   21ae0:	bne	21b10 <__assert_fail@plt+0xfa84>
   21ae4:	ldrd	r4, [lr, #8]
   21ae8:	ldrd	r2, [r2, #8]
   21aec:	eor	r3, r3, r5
   21af0:	eor	r2, r2, r4
   21af4:	orrs	r2, r2, r3
   21af8:	bne	21b10 <__assert_fail@plt+0xfa84>
   21afc:	ldr	r1, [r1]
   21b00:	ldr	r0, [r0]
   21b04:	bl	11bd0 <strcmp@plt>
   21b08:	clz	r0, r0
   21b0c:	lsr	ip, r0, #5
   21b10:	mov	r0, ip
   21b14:	pop	{r4, r5, fp, pc}
   21b18:	push	{r4, sl, fp, lr}
   21b1c:	add	fp, sp, #8
   21b20:	mov	r4, r0
   21b24:	ldr	r0, [r0]
   21b28:	bl	2056c <__assert_fail@plt+0xe4e0>
   21b2c:	mov	r0, r4
   21b30:	pop	{r4, sl, fp, lr}
   21b34:	b	2056c <__assert_fail@plt+0xe4e0>
   21b38:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   21b3c:	add	fp, sp, #28
   21b40:	sub	sp, sp, #4
   21b44:	vpush	{d8-d9}
   21b48:	sub	sp, sp, #104	; 0x68
   21b4c:	mov	r6, r3
   21b50:	mov	r7, r2
   21b54:	str	r1, [sp, #44]	; 0x2c
   21b58:	mov	sl, r0
   21b5c:	bl	11fa8 <localeconv@plt>
   21b60:	ldr	r5, [r0]
   21b64:	mov	r4, r0
   21b68:	mov	r0, r5
   21b6c:	bl	11eac <strlen@plt>
   21b70:	sub	r1, r0, #1
   21b74:	movw	r2, #61162	; 0xeeea
   21b78:	cmp	r1, #16
   21b7c:	movt	r2, #2
   21b80:	movcs	r0, #1
   21b84:	movcc	r2, r5
   21b88:	ldr	r5, [r4, #4]
   21b8c:	str	r0, [sp, #12]
   21b90:	ldr	r0, [r4, #8]
   21b94:	str	r2, [sp, #8]
   21b98:	str	r0, [sp, #16]
   21b9c:	mov	r0, r5
   21ba0:	bl	11eac <strlen@plt>
   21ba4:	cmp	r0, #17
   21ba8:	movw	r0, #647	; 0x287
   21bac:	movw	r1, #54434	; 0xd4a2
   21bb0:	str	r7, [sp, #32]
   21bb4:	ldr	r4, [fp, #16]
   21bb8:	str	r6, [sp, #40]	; 0x28
   21bbc:	add	r0, r7, r0
   21bc0:	movt	r1, #2
   21bc4:	movcc	r1, r5
   21bc8:	ldr	r7, [fp, #8]
   21bcc:	ldr	r5, [fp, #12]
   21bd0:	str	r0, [sp, #36]	; 0x24
   21bd4:	ands	r0, r6, #32
   21bd8:	str	r1, [sp, #52]	; 0x34
   21bdc:	str	r0, [sp, #24]
   21be0:	mov	r0, #1000	; 0x3e8
   21be4:	movwne	r0, #1024	; 0x400
   21be8:	str	r0, [sp, #20]
   21bec:	and	r0, r6, #3
   21bf0:	ldr	r6, [fp, #20]
   21bf4:	str	r0, [sp, #48]	; 0x30
   21bf8:	subs	r0, r7, r4
   21bfc:	sbcs	r0, r5, r6
   21c00:	bcs	21cec <__assert_fail@plt+0xfc60>
   21c04:	orrs	r0, r7, r5
   21c08:	beq	21df4 <__assert_fail@plt+0xfd68>
   21c0c:	ldr	r9, [fp, #16]
   21c10:	mov	r1, r6
   21c14:	mov	r2, r7
   21c18:	mov	r3, r5
   21c1c:	mov	r0, r9
   21c20:	bl	2ae3c <_obstack_memory_used@@Base+0x4fe8>
   21c24:	mov	r4, r0
   21c28:	mov	r8, r1
   21c2c:	umull	r0, r1, r0, r7
   21c30:	mla	r1, r4, r5, r1
   21c34:	mla	r1, r8, r7, r1
   21c38:	subs	r0, r9, r0
   21c3c:	sbc	r1, r6, r1
   21c40:	orrs	r0, r0, r1
   21c44:	bne	21df4 <__assert_fail@plt+0xfd68>
   21c48:	ldr	r5, [sp, #44]	; 0x2c
   21c4c:	mov	r0, sl
   21c50:	mov	r2, r4
   21c54:	mov	r3, r8
   21c58:	mov	r1, r5
   21c5c:	bl	2ae3c <_obstack_memory_used@@Base+0x4fe8>
   21c60:	mov	r9, r1
   21c64:	umull	r2, r1, r0, r4
   21c68:	str	r0, [sp, #28]
   21c6c:	mov	r3, r8
   21c70:	mla	r1, r0, r8, r1
   21c74:	mla	r1, r9, r4, r1
   21c78:	subs	r0, sl, r2
   21c7c:	mov	r2, #10
   21c80:	sbc	r1, r5, r1
   21c84:	umull	r5, r0, r0, r2
   21c88:	mov	r2, r4
   21c8c:	add	r1, r1, r1, lsl #2
   21c90:	add	r6, r0, r1, lsl #1
   21c94:	mov	r0, r5
   21c98:	mov	r1, r6
   21c9c:	bl	2ae3c <_obstack_memory_used@@Base+0x4fe8>
   21ca0:	mov	r7, r0
   21ca4:	umull	r0, r2, r0, r4
   21ca8:	mla	r2, r7, r8, r2
   21cac:	mla	r1, r1, r4, r2
   21cb0:	mov	r2, #2
   21cb4:	subs	r0, r5, r0
   21cb8:	sbc	r1, r6, r1
   21cbc:	subs	r3, r4, r0, lsl #1
   21cc0:	lsl	r1, r1, #1
   21cc4:	orr	r1, r1, r0, lsr #31
   21cc8:	orr	ip, r1, r0, lsl #1
   21ccc:	sbcs	r3, r8, r1
   21cd0:	movwcc	r2, #3
   21cd4:	cmp	ip, #0
   21cd8:	movwne	ip, #1
   21cdc:	rsbs	r0, r4, r0, lsl #1
   21ce0:	sbcs	r0, r1, r8
   21ce4:	movcs	ip, r2
   21ce8:	b	21d58 <__assert_fail@plt+0xfccc>
   21cec:	mov	r0, r7
   21cf0:	mov	r1, r5
   21cf4:	mov	r2, r4
   21cf8:	mov	r3, r6
   21cfc:	bl	2ae3c <_obstack_memory_used@@Base+0x4fe8>
   21d00:	mov	r2, r0
   21d04:	mov	r3, r1
   21d08:	umull	r0, r1, r0, r4
   21d0c:	mla	r1, r2, r6, r1
   21d10:	mla	r1, r3, r4, r1
   21d14:	subs	r0, r7, r0
   21d18:	sbc	r1, r5, r1
   21d1c:	orrs	r0, r0, r1
   21d20:	bne	21df4 <__assert_fail@plt+0xfd68>
   21d24:	ldr	r4, [sp, #44]	; 0x2c
   21d28:	umull	r0, r1, r2, sl
   21d2c:	mla	r1, r2, r4, r1
   21d30:	str	r0, [sp, #28]
   21d34:	mla	r9, r3, sl, r1
   21d38:	mov	r1, r9
   21d3c:	bl	2ae3c <_obstack_memory_used@@Base+0x4fe8>
   21d40:	eor	r1, r1, r4
   21d44:	eor	r0, r0, sl
   21d48:	orrs	r0, r0, r1
   21d4c:	bne	21df4 <__assert_fail@plt+0xfd68>
   21d50:	mov	ip, #0
   21d54:	mov	r7, #0
   21d58:	ldr	r0, [sp, #40]	; 0x28
   21d5c:	ldr	r8, [sp, #20]
   21d60:	ldr	r5, [sp, #48]	; 0x30
   21d64:	mvn	r3, #0
   21d68:	ands	r4, r0, #16
   21d6c:	beq	22108 <__assert_fail@plt+0x1007c>
   21d70:	ldr	sl, [sp, #28]
   21d74:	mov	r3, #0
   21d78:	subs	r0, sl, r8
   21d7c:	sbcs	r0, r9, #0
   21d80:	bcc	226cc <__assert_fail@plt+0x10640>
   21d84:	mov	r0, sl
   21d88:	mov	r1, r9
   21d8c:	mov	r2, r8
   21d90:	mov	r3, #0
   21d94:	mov	r6, r5
   21d98:	mov	r5, ip
   21d9c:	bl	2ae3c <_obstack_memory_used@@Base+0x4fe8>
   21da0:	mov	r3, sl
   21da4:	mov	sl, r0
   21da8:	mov	r2, r5
   21dac:	mov	r9, r1
   21db0:	mls	r0, r0, r8, r3
   21db4:	add	r0, r0, r0, lsl #2
   21db8:	add	r0, r7, r0, lsl #1
   21dbc:	udiv	r7, r0, r8
   21dc0:	mls	r0, r7, r8, r0
   21dc4:	lsl	r0, r0, #1
   21dc8:	orr	r0, r0, r5, lsr #1
   21dcc:	cmp	r0, r8
   21dd0:	bcs	22310 <__assert_fail@plt+0x10284>
   21dd4:	rsb	r1, r2, #0
   21dd8:	subs	ip, r0, r1
   21ddc:	movwne	ip, #1
   21de0:	subs	r0, sl, r8
   21de4:	mov	r3, #1
   21de8:	sbcs	r0, r9, #0
   21dec:	bcs	22330 <__assert_fail@plt+0x102a4>
   21df0:	b	22454 <__assert_fail@plt+0x103c8>
   21df4:	ldr	r9, [fp, #16]
   21df8:	mov	r1, r6
   21dfc:	mov	r0, r9
   21e00:	bl	2acf4 <_obstack_memory_used@@Base+0x4ea0>
   21e04:	vmov	d8, r0, r1
   21e08:	ldr	r1, [sp, #44]	; 0x2c
   21e0c:	mov	r0, sl
   21e10:	bl	2acf4 <_obstack_memory_used@@Base+0x4ea0>
   21e14:	mov	r4, r0
   21e18:	mov	r6, r1
   21e1c:	mov	r0, r7
   21e20:	mov	r1, r5
   21e24:	bl	2acf4 <_obstack_memory_used@@Base+0x4ea0>
   21e28:	vmov	d16, r0, r1
   21e2c:	vmov	d17, r4, r6
   21e30:	ldr	r5, [sp, #40]	; 0x28
   21e34:	tst	r5, #16
   21e38:	vdiv.f64	d16, d16, d8
   21e3c:	vmul.f64	d8, d16, d17
   21e40:	bne	21ec0 <__assert_fail@plt+0xfe34>
   21e44:	ldr	r6, [sp, #48]	; 0x30
   21e48:	cmp	r6, #1
   21e4c:	beq	22150 <__assert_fail@plt+0x100c4>
   21e50:	vldr	d16, [pc, #752]	; 22148 <__assert_fail@plt+0x100bc>
   21e54:	ldr	r7, [sp, #36]	; 0x24
   21e58:	ldr	sl, [sp, #32]
   21e5c:	vcmpe.f64	d8, d16
   21e60:	vmrs	APSR_nzcv, fpscr
   21e64:	bpl	22158 <__assert_fail@plt+0x100cc>
   21e68:	vmov	r0, r1, d8
   21e6c:	bl	2ae88 <_obstack_memory_used@@Base+0x5034>
   21e70:	mov	r4, r0
   21e74:	mov	r8, r1
   21e78:	mov	r0, #0
   21e7c:	cmp	r6, #0
   21e80:	mov	r2, #0
   21e84:	bne	21eac <__assert_fail@plt+0xfe20>
   21e88:	mov	r0, r4
   21e8c:	mov	r1, r8
   21e90:	bl	2acf4 <_obstack_memory_used@@Base+0x4ea0>
   21e94:	vmov	d16, r0, r1
   21e98:	mov	r2, #0
   21e9c:	mov	r0, #0
   21ea0:	vcmp.f64	d8, d16
   21ea4:	vmrs	APSR_nzcv, fpscr
   21ea8:	movwne	r0, #1
   21eac:	adds	r0, r0, r4
   21eb0:	adc	r1, r2, r8
   21eb4:	bl	2acf4 <_obstack_memory_used@@Base+0x4ea0>
   21eb8:	vmov	d8, r0, r1
   21ebc:	b	22158 <__assert_fail@plt+0x100cc>
   21ec0:	ldr	r0, [sp, #20]
   21ec4:	mov	r1, #1
   21ec8:	vmov	s0, r0
   21ecc:	vcvt.f64.u32	d16, s0
   21ed0:	ldr	r6, [sp, #48]	; 0x30
   21ed4:	vmul.f64	d17, d16, d16
   21ed8:	vcmpe.f64	d17, d8
   21edc:	vmrs	APSR_nzcv, fpscr
   21ee0:	bls	21ef8 <__assert_fail@plt+0xfe6c>
   21ee4:	ldr	r7, [sp, #36]	; 0x24
   21ee8:	ldr	sl, [sp, #32]
   21eec:	ldr	r9, [sp, #12]
   21ef0:	vmov.f64	d17, d16
   21ef4:	b	21f94 <__assert_fail@plt+0xff08>
   21ef8:	vmul.f64	d18, d17, d16
   21efc:	ldr	r7, [sp, #36]	; 0x24
   21f00:	ldr	sl, [sp, #32]
   21f04:	ldr	r9, [sp, #12]
   21f08:	mov	r1, #2
   21f0c:	vcmpe.f64	d18, d8
   21f10:	vmrs	APSR_nzcv, fpscr
   21f14:	bhi	21f94 <__assert_fail@plt+0xff08>
   21f18:	vmul.f64	d19, d18, d16
   21f1c:	vmov.f64	d17, d18
   21f20:	mov	r1, #3
   21f24:	vcmpe.f64	d19, d8
   21f28:	vmrs	APSR_nzcv, fpscr
   21f2c:	bhi	21f94 <__assert_fail@plt+0xff08>
   21f30:	vmul.f64	d18, d19, d16
   21f34:	vmov.f64	d17, d19
   21f38:	mov	r1, #4
   21f3c:	vcmpe.f64	d18, d8
   21f40:	vmrs	APSR_nzcv, fpscr
   21f44:	bhi	21f94 <__assert_fail@plt+0xff08>
   21f48:	vmul.f64	d19, d18, d16
   21f4c:	vmov.f64	d17, d18
   21f50:	mov	r1, #5
   21f54:	vcmpe.f64	d19, d8
   21f58:	vmrs	APSR_nzcv, fpscr
   21f5c:	bhi	21f94 <__assert_fail@plt+0xff08>
   21f60:	vmul.f64	d18, d19, d16
   21f64:	vmov.f64	d17, d19
   21f68:	mov	r1, #6
   21f6c:	vcmpe.f64	d18, d8
   21f70:	vmrs	APSR_nzcv, fpscr
   21f74:	bhi	21f94 <__assert_fail@plt+0xff08>
   21f78:	vmul.f64	d16, d18, d16
   21f7c:	mov	r1, #7
   21f80:	vmov.f64	d17, d18
   21f84:	vcmpe.f64	d16, d8
   21f88:	vmrs	APSR_nzcv, fpscr
   21f8c:	movls	r1, #8
   21f90:	vmovls.f64	d17, d16
   21f94:	vdiv.f64	d8, d8, d17
   21f98:	cmp	r6, #1
   21f9c:	str	r1, [sp, #28]
   21fa0:	vmov.f64	d16, d8
   21fa4:	beq	22014 <__assert_fail@plt+0xff88>
   21fa8:	vldr	d16, [pc, #408]	; 22148 <__assert_fail@plt+0x100bc>
   21fac:	vcmpe.f64	d8, d16
   21fb0:	vmov.f64	d16, d8
   21fb4:	vmrs	APSR_nzcv, fpscr
   21fb8:	bpl	22014 <__assert_fail@plt+0xff88>
   21fbc:	vmov	r0, r1, d8
   21fc0:	bl	2ae88 <_obstack_memory_used@@Base+0x5034>
   21fc4:	mov	r4, r0
   21fc8:	mov	r8, r1
   21fcc:	mov	r0, #0
   21fd0:	cmp	r6, #0
   21fd4:	mov	r2, #0
   21fd8:	bne	22000 <__assert_fail@plt+0xff74>
   21fdc:	mov	r0, r4
   21fe0:	mov	r1, r8
   21fe4:	bl	2acf4 <_obstack_memory_used@@Base+0x4ea0>
   21fe8:	vmov	d16, r0, r1
   21fec:	mov	r2, #0
   21ff0:	mov	r0, #0
   21ff4:	vcmp.f64	d8, d16
   21ff8:	vmrs	APSR_nzcv, fpscr
   21ffc:	movwne	r0, #1
   22000:	adds	r0, r0, r4
   22004:	adc	r1, r2, r8
   22008:	bl	2acf4 <_obstack_memory_used@@Base+0x4ea0>
   2200c:	vmov	d16, r0, r1
   22010:	ldr	r6, [sp, #48]	; 0x30
   22014:	movw	r3, #61306	; 0xef7a
   22018:	mov	r0, sl
   2201c:	mov	r1, #1
   22020:	mvn	r2, #0
   22024:	vstr	d16, [sp]
   22028:	movt	r3, #2
   2202c:	bl	11edc <__sprintf_chk@plt>
   22030:	ldr	r1, [sp, #24]
   22034:	mov	r0, #3
   22038:	cmp	r1, #0
   2203c:	movwne	r0, #2
   22040:	add	r4, r0, r9
   22044:	mov	r0, sl
   22048:	bl	11eac <strlen@plt>
   2204c:	cmp	r4, r0
   22050:	bcs	220d0 <__assert_fail@plt+0x10044>
   22054:	vmov.f64	d9, #36	; 0x41200000  10.0
   22058:	cmp	r6, #1
   2205c:	vmul.f64	d8, d8, d9
   22060:	beq	220f8 <__assert_fail@plt+0x1006c>
   22064:	vldr	d16, [pc, #220]	; 22148 <__assert_fail@plt+0x100bc>
   22068:	vcmpe.f64	d8, d16
   2206c:	vmrs	APSR_nzcv, fpscr
   22070:	bpl	220f8 <__assert_fail@plt+0x1006c>
   22074:	vmov	r0, r1, d8
   22078:	bl	2ae88 <_obstack_memory_used@@Base+0x5034>
   2207c:	ldr	r9, [fp, #16]
   22080:	mov	r4, r0
   22084:	mov	r8, r1
   22088:	mov	r0, #0
   2208c:	cmp	r6, #0
   22090:	mov	r2, #0
   22094:	bne	220bc <__assert_fail@plt+0x10030>
   22098:	mov	r0, r4
   2209c:	mov	r1, r8
   220a0:	bl	2acf4 <_obstack_memory_used@@Base+0x4ea0>
   220a4:	vmov	d16, r0, r1
   220a8:	mov	r2, #0
   220ac:	mov	r0, #0
   220b0:	vcmp.f64	d8, d16
   220b4:	vmrs	APSR_nzcv, fpscr
   220b8:	movwne	r0, #1
   220bc:	adds	r0, r0, r4
   220c0:	adc	r1, r2, r8
   220c4:	bl	2acf4 <_obstack_memory_used@@Base+0x4ea0>
   220c8:	vmov	d8, r0, r1
   220cc:	b	220fc <__assert_fail@plt+0x10070>
   220d0:	mov	r2, r0
   220d4:	add	r4, r9, #1
   220d8:	tst	r5, #8
   220dc:	beq	220f0 <__assert_fail@plt+0x10064>
   220e0:	add	r0, r2, sl
   220e4:	ldrb	r0, [r0, #-1]
   220e8:	cmp	r0, #48	; 0x30
   220ec:	beq	22054 <__assert_fail@plt+0xffc8>
   220f0:	ldr	r9, [fp, #16]
   220f4:	b	2218c <__assert_fail@plt+0x10100>
   220f8:	ldr	r9, [fp, #16]
   220fc:	vdiv.f64	d16, d8, d9
   22100:	vstr	d16, [sp]
   22104:	b	22164 <__assert_fail@plt+0x100d8>
   22108:	ldr	r6, [sp, #36]	; 0x24
   2210c:	ldr	sl, [sp, #28]
   22110:	cmp	r5, #0
   22114:	beq	226d8 <__assert_fail@plt+0x1064c>
   22118:	cmp	r5, #1
   2211c:	bne	22748 <__assert_fail@plt+0x106bc>
   22120:	mov	r0, #0
   22124:	rsbs	r1, ip, #0
   22128:	and	r2, sl, #1
   2212c:	sbc	r0, r0, #0
   22130:	eor	r1, r2, r1
   22134:	orrs	r0, r1, r0
   22138:	addne	r7, r7, #1
   2213c:	cmp	r7, #5
   22140:	bgt	226e4 <__assert_fail@plt+0x10658>
   22144:	b	22748 <__assert_fail@plt+0x106bc>
   22148:	andeq	r0, r0, r0
   2214c:	mvnsmi	r0, #0
   22150:	ldr	r7, [sp, #36]	; 0x24
   22154:	ldr	sl, [sp, #32]
   22158:	mvn	r0, #0
   2215c:	vstr	d8, [sp]
   22160:	str	r0, [sp, #28]
   22164:	movw	r3, #61300	; 0xef74
   22168:	mov	r0, sl
   2216c:	mov	r1, #1
   22170:	mvn	r2, #0
   22174:	movt	r3, #2
   22178:	bl	11edc <__sprintf_chk@plt>
   2217c:	mov	r0, sl
   22180:	bl	11eac <strlen@plt>
   22184:	mov	r2, r0
   22188:	mov	r4, #0
   2218c:	sub	r0, r7, r2
   22190:	mov	r1, sl
   22194:	mov	r8, r0
   22198:	bl	11c24 <memmove@plt>
   2219c:	sub	r6, r7, r4
   221a0:	tst	r5, #4
   221a4:	bne	227a0 <__assert_fail@plt+0x10714>
   221a8:	ldr	r3, [sp, #28]
   221ac:	tst	r5, #128	; 0x80
   221b0:	beq	228b8 <__assert_fail@plt+0x1082c>
   221b4:	cmn	r3, #1
   221b8:	bgt	222a4 <__assert_fail@plt+0x10218>
   221bc:	subs	r0, r9, #2
   221c0:	ldr	r0, [fp, #20]
   221c4:	mov	r3, #0
   221c8:	sbcs	r0, r0, #0
   221cc:	bcc	222a4 <__assert_fail@plt+0x10218>
   221d0:	ldr	r0, [sp, #20]
   221d4:	mov	r3, #1
   221d8:	subs	r0, r0, r9
   221dc:	ldr	r0, [fp, #20]
   221e0:	rscs	r0, r0, #0
   221e4:	bcs	222a4 <__assert_fail@plt+0x10218>
   221e8:	ldr	r0, [sp, #20]
   221ec:	mov	r3, #2
   221f0:	umull	r1, r0, r0, r0
   221f4:	subs	r2, r1, r9
   221f8:	ldr	r2, [fp, #20]
   221fc:	sbcs	r2, r0, r2
   22200:	bcs	222a4 <__assert_fail@plt+0x10218>
   22204:	ldr	r3, [sp, #20]
   22208:	umull	r1, r2, r1, r3
   2220c:	mla	r2, r0, r3, r2
   22210:	mov	r3, #3
   22214:	subs	r0, r1, r9
   22218:	ldr	r0, [fp, #20]
   2221c:	sbcs	r0, r2, r0
   22220:	bcs	222a4 <__assert_fail@plt+0x10218>
   22224:	ldr	r3, [sp, #20]
   22228:	umull	r0, r1, r1, r3
   2222c:	mla	r1, r2, r3, r1
   22230:	mov	r3, #4
   22234:	subs	r2, r0, r9
   22238:	ldr	r2, [fp, #20]
   2223c:	sbcs	r2, r1, r2
   22240:	bcs	222a4 <__assert_fail@plt+0x10218>
   22244:	ldr	r3, [sp, #20]
   22248:	umull	r0, r2, r0, r3
   2224c:	mla	r1, r1, r3, r2
   22250:	mov	r3, #5
   22254:	subs	r2, r0, r9
   22258:	ldr	r2, [fp, #20]
   2225c:	sbcs	r2, r1, r2
   22260:	bcs	222a4 <__assert_fail@plt+0x10218>
   22264:	ldr	r3, [sp, #20]
   22268:	umull	r0, r2, r0, r3
   2226c:	mla	r1, r1, r3, r2
   22270:	mov	r3, #6
   22274:	subs	r2, r0, r9
   22278:	ldr	r2, [fp, #20]
   2227c:	sbcs	r2, r1, r2
   22280:	bcs	222a4 <__assert_fail@plt+0x10218>
   22284:	ldr	r3, [sp, #20]
   22288:	umull	r0, r2, r0, r3
   2228c:	mla	r1, r1, r3, r2
   22290:	mov	r3, #7
   22294:	subs	r0, r0, r9
   22298:	ldr	r0, [fp, #20]
   2229c:	sbcs	r0, r1, r0
   222a0:	movwcc	r3, #8
   222a4:	and	r0, r5, #256	; 0x100
   222a8:	tst	r5, #64	; 0x40
   222ac:	orrsne	r1, r3, r0
   222b0:	movne	r1, #32
   222b4:	addne	r7, sl, #648	; 0x288
   222b8:	strbne	r1, [sl, #647]	; 0x287
   222bc:	cmp	r3, #0
   222c0:	beq	222e8 <__assert_fail@plt+0x1025c>
   222c4:	ldr	r1, [sp, #24]
   222c8:	cmp	r1, #0
   222cc:	moveq	r1, #107	; 0x6b
   222d0:	cmpeq	r3, #1
   222d4:	beq	222e4 <__assert_fail@plt+0x10258>
   222d8:	movw	r1, #61356	; 0xefac
   222dc:	movt	r1, #2
   222e0:	ldrb	r1, [r1, r3]
   222e4:	strb	r1, [r7], #1
   222e8:	cmp	r0, #0
   222ec:	beq	228b8 <__assert_fail@plt+0x1082c>
   222f0:	ldr	r0, [sp, #24]
   222f4:	cmp	r0, #0
   222f8:	cmpne	r3, #0
   222fc:	movne	r0, #105	; 0x69
   22300:	strbne	r0, [r7], #1
   22304:	mov	r0, #66	; 0x42
   22308:	strb	r0, [r7], #1
   2230c:	b	228b8 <__assert_fail@plt+0x1082c>
   22310:	add	r0, r0, r2
   22314:	mov	ip, #2
   22318:	cmp	r8, r0
   2231c:	movwcc	ip, #3
   22320:	subs	r0, sl, r8
   22324:	mov	r3, #1
   22328:	sbcs	r0, r9, #0
   2232c:	bcc	22454 <__assert_fail@plt+0x103c8>
   22330:	mov	r0, sl
   22334:	mov	r1, r9
   22338:	mov	r2, r8
   2233c:	mov	r3, #0
   22340:	str	r4, [sp, #44]	; 0x2c
   22344:	mov	r4, ip
   22348:	bl	2ae3c <_obstack_memory_used@@Base+0x4fe8>
   2234c:	mov	r2, r4
   22350:	mov	r4, r0
   22354:	mls	r0, r0, r8, sl
   22358:	mov	r9, r1
   2235c:	add	r0, r0, r0, lsl #2
   22360:	add	r0, r7, r0, lsl #1
   22364:	udiv	r7, r0, r8
   22368:	mls	r0, r7, r8, r0
   2236c:	lsl	r0, r0, #1
   22370:	orr	r0, r0, r2, lsr #1
   22374:	cmp	r0, r8
   22378:	bcs	2239c <__assert_fail@plt+0x10310>
   2237c:	rsb	r1, r2, #0
   22380:	subs	ip, r0, r1
   22384:	movwne	ip, #1
   22388:	subs	r0, r4, r8
   2238c:	mov	r3, #2
   22390:	sbcs	r0, r9, #0
   22394:	bcs	223d8 <__assert_fail@plt+0x1034c>
   22398:	b	223bc <__assert_fail@plt+0x10330>
   2239c:	add	r0, r0, r2
   223a0:	mov	ip, #2
   223a4:	cmp	r8, r0
   223a8:	movwcc	ip, #3
   223ac:	subs	r0, r4, r8
   223b0:	mov	r3, #2
   223b4:	sbcs	r0, r9, #0
   223b8:	bcs	223d8 <__assert_fail@plt+0x1034c>
   223bc:	mov	sl, r4
   223c0:	ldr	r4, [sp, #44]	; 0x2c
   223c4:	mov	r5, r6
   223c8:	rsbs	r0, sl, #9
   223cc:	rscs	r0, r9, #0
   223d0:	bcc	226cc <__assert_fail@plt+0x10640>
   223d4:	b	22464 <__assert_fail@plt+0x103d8>
   223d8:	mov	r0, r4
   223dc:	mov	r1, r9
   223e0:	mov	r2, r8
   223e4:	mov	r3, #0
   223e8:	mov	r5, ip
   223ec:	bl	2ae3c <_obstack_memory_used@@Base+0x4fe8>
   223f0:	mov	sl, r0
   223f4:	mls	r0, r0, r8, r4
   223f8:	mov	r2, r5
   223fc:	mov	r9, r1
   22400:	add	r0, r0, r0, lsl #2
   22404:	add	r0, r7, r0, lsl #1
   22408:	udiv	r7, r0, r8
   2240c:	mls	r0, r7, r8, r0
   22410:	lsl	r0, r0, #1
   22414:	orr	r0, r0, r5, lsr #1
   22418:	cmp	r0, r8
   2241c:	bcs	22430 <__assert_fail@plt+0x103a4>
   22420:	rsb	r1, r2, #0
   22424:	subs	ip, r0, r1
   22428:	movwne	ip, #1
   2242c:	b	22440 <__assert_fail@plt+0x103b4>
   22430:	add	r0, r0, r2
   22434:	mov	ip, #2
   22438:	cmp	r8, r0
   2243c:	movwcc	ip, #3
   22440:	ldr	r4, [sp, #44]	; 0x2c
   22444:	subs	r0, sl, r8
   22448:	mov	r3, #3
   2244c:	sbcs	r0, r9, #0
   22450:	bcs	22530 <__assert_fail@plt+0x104a4>
   22454:	mov	r5, r6
   22458:	rsbs	r0, sl, #9
   2245c:	rscs	r0, r9, #0
   22460:	bcc	226cc <__assert_fail@plt+0x10640>
   22464:	cmp	r5, #1
   22468:	bne	22480 <__assert_fail@plt+0x103f4>
   2246c:	and	r0, r7, #1
   22470:	add	r0, ip, r0
   22474:	cmp	r0, #2
   22478:	bhi	22490 <__assert_fail@plt+0x10404>
   2247c:	b	224c4 <__assert_fail@plt+0x10438>
   22480:	cmp	r5, #0
   22484:	bne	224c4 <__assert_fail@plt+0x10438>
   22488:	cmp	ip, #0
   2248c:	beq	224c4 <__assert_fail@plt+0x10438>
   22490:	adds	r0, sl, #1
   22494:	add	r7, r7, #1
   22498:	mov	ip, #0
   2249c:	adc	r1, r9, #0
   224a0:	cmp	r7, #10
   224a4:	bne	224c4 <__assert_fail@plt+0x10438>
   224a8:	rsbs	r2, r0, #9
   224ac:	mov	r7, #0
   224b0:	mov	sl, r0
   224b4:	mov	r9, r1
   224b8:	mov	ip, #0
   224bc:	rscs	r2, r1, #0
   224c0:	bcc	22598 <__assert_fail@plt+0x1050c>
   224c4:	ldr	r0, [sp, #40]	; 0x28
   224c8:	tst	r0, #8
   224cc:	beq	224ec <__assert_fail@plt+0x10460>
   224d0:	cmp	r7, #0
   224d4:	bne	224ec <__assert_fail@plt+0x10460>
   224d8:	ldr	r6, [sp, #36]	; 0x24
   224dc:	mov	r7, #0
   224e0:	cmp	r5, #0
   224e4:	bne	22118 <__assert_fail@plt+0x1008c>
   224e8:	b	226d8 <__assert_fail@plt+0x1064c>
   224ec:	ldr	r1, [sp, #32]
   224f0:	ldr	r2, [sp, #12]
   224f4:	add	r0, r7, #48	; 0x30
   224f8:	mov	r7, r4
   224fc:	mov	r4, r3
   22500:	strb	r0, [r1, #646]!	; 0x286
   22504:	sub	r0, r1, r2
   22508:	ldr	r1, [sp, #8]
   2250c:	mov	r6, r0
   22510:	bl	11c60 <memcpy@plt>
   22514:	mov	r3, r4
   22518:	mov	r4, r7
   2251c:	mov	ip, #0
   22520:	mov	r7, #0
   22524:	cmp	r5, #0
   22528:	bne	22118 <__assert_fail@plt+0x1008c>
   2252c:	b	226d8 <__assert_fail@plt+0x1064c>
   22530:	mov	r0, sl
   22534:	mov	r1, r9
   22538:	mov	r2, r8
   2253c:	mov	r3, #0
   22540:	mov	r4, ip
   22544:	bl	2ae3c <_obstack_memory_used@@Base+0x4fe8>
   22548:	mov	r2, r4
   2254c:	mov	r4, r0
   22550:	mls	r0, r0, r8, sl
   22554:	mov	r9, r1
   22558:	add	r0, r0, r0, lsl #2
   2255c:	add	r0, r7, r0, lsl #1
   22560:	udiv	r7, r0, r8
   22564:	mls	r0, r7, r8, r0
   22568:	lsl	r0, r0, #1
   2256c:	orr	r0, r0, r2, lsr #1
   22570:	cmp	r0, r8
   22574:	bcs	225b4 <__assert_fail@plt+0x10528>
   22578:	rsb	r1, r2, #0
   2257c:	subs	ip, r0, r1
   22580:	movwne	ip, #1
   22584:	subs	r0, r4, r8
   22588:	mov	r3, #4
   2258c:	sbcs	r0, r9, #0
   22590:	bcc	223bc <__assert_fail@plt+0x10330>
   22594:	b	225d4 <__assert_fail@plt+0x10548>
   22598:	ldr	r6, [sp, #36]	; 0x24
   2259c:	mov	ip, #0
   225a0:	mov	sl, #10
   225a4:	mov	r9, #0
   225a8:	cmp	r5, #0
   225ac:	bne	22118 <__assert_fail@plt+0x1008c>
   225b0:	b	226d8 <__assert_fail@plt+0x1064c>
   225b4:	add	r0, r0, r2
   225b8:	mov	ip, #2
   225bc:	cmp	r8, r0
   225c0:	movwcc	ip, #3
   225c4:	subs	r0, r4, r8
   225c8:	mov	r3, #4
   225cc:	sbcs	r0, r9, #0
   225d0:	bcc	223bc <__assert_fail@plt+0x10330>
   225d4:	mov	r0, r4
   225d8:	mov	r1, r9
   225dc:	mov	r2, r8
   225e0:	mov	r3, #0
   225e4:	mov	r5, ip
   225e8:	bl	2ae3c <_obstack_memory_used@@Base+0x4fe8>
   225ec:	mov	sl, r0
   225f0:	mls	r0, r0, r8, r4
   225f4:	mov	r2, r5
   225f8:	mov	r9, r1
   225fc:	add	r0, r0, r0, lsl #2
   22600:	add	r0, r7, r0, lsl #1
   22604:	udiv	r7, r0, r8
   22608:	mls	r0, r7, r8, r0
   2260c:	lsl	r0, r0, #1
   22610:	orr	r0, r0, r5, lsr #1
   22614:	cmp	r0, r8
   22618:	bcs	2262c <__assert_fail@plt+0x105a0>
   2261c:	rsb	r1, r2, #0
   22620:	subs	ip, r0, r1
   22624:	movwne	ip, #1
   22628:	b	2263c <__assert_fail@plt+0x105b0>
   2262c:	add	r0, r0, r2
   22630:	mov	ip, #2
   22634:	cmp	r8, r0
   22638:	movwcc	ip, #3
   2263c:	ldr	r4, [sp, #44]	; 0x2c
   22640:	subs	r0, sl, r8
   22644:	mov	r3, #5
   22648:	sbcs	r0, r9, #0
   2264c:	bcc	22454 <__assert_fail@plt+0x103c8>
   22650:	mov	r0, sl
   22654:	mov	r1, r9
   22658:	mov	r2, r8
   2265c:	mov	r3, #0
   22660:	mov	r4, ip
   22664:	bl	2ae3c <_obstack_memory_used@@Base+0x4fe8>
   22668:	mov	r2, r4
   2266c:	mov	r4, r0
   22670:	mls	r0, r0, r8, sl
   22674:	mov	r9, r1
   22678:	add	r0, r0, r0, lsl #2
   2267c:	add	r0, r7, r0, lsl #1
   22680:	udiv	r7, r0, r8
   22684:	mls	r0, r7, r8, r0
   22688:	lsl	r0, r0, #1
   2268c:	orr	r0, r0, r2, lsr #1
   22690:	cmp	r0, r8
   22694:	bcs	228d4 <__assert_fail@plt+0x10848>
   22698:	rsb	r1, r2, #0
   2269c:	subs	ip, r0, r1
   226a0:	movwne	ip, #1
   226a4:	subs	r0, r4, r8
   226a8:	mov	r3, #6
   226ac:	sbcs	r0, r9, #0
   226b0:	bcs	228f4 <__assert_fail@plt+0x10868>
   226b4:	mov	sl, r4
   226b8:	ldr	r4, [sp, #44]	; 0x2c
   226bc:	mov	r5, r6
   226c0:	rsbs	r0, sl, #9
   226c4:	rscs	r0, r9, #0
   226c8:	bcs	22464 <__assert_fail@plt+0x103d8>
   226cc:	ldr	r6, [sp, #36]	; 0x24
   226d0:	cmp	r5, #0
   226d4:	bne	22118 <__assert_fail@plt+0x1008c>
   226d8:	add	r0, r7, ip
   226dc:	cmp	r0, #1
   226e0:	blt	22748 <__assert_fail@plt+0x106bc>
   226e4:	adds	sl, sl, #1
   226e8:	adc	r9, r9, #0
   226ec:	cmp	r3, #7
   226f0:	bgt	22748 <__assert_fail@plt+0x106bc>
   226f4:	cmp	r4, #0
   226f8:	beq	22748 <__assert_fail@plt+0x106bc>
   226fc:	ldr	r7, [sp, #36]	; 0x24
   22700:	eor	r0, sl, r8
   22704:	orrs	r0, r0, r9
   22708:	bne	2274c <__assert_fail@plt+0x106c0>
   2270c:	ldr	r0, [sp, #40]	; 0x28
   22710:	add	r3, r3, #1
   22714:	mov	r9, #0
   22718:	mov	sl, #1
   2271c:	str	r3, [sp, #28]
   22720:	tst	r0, #8
   22724:	bne	22750 <__assert_fail@plt+0x106c4>
   22728:	ldr	r2, [sp, #12]
   2272c:	mov	r0, #48	; 0x30
   22730:	ldr	r1, [sp, #8]
   22734:	strb	r0, [r6, #-1]!
   22738:	sub	r6, r6, r2
   2273c:	mov	r0, r6
   22740:	bl	11c60 <memcpy@plt>
   22744:	b	22750 <__assert_fail@plt+0x106c4>
   22748:	ldr	r7, [sp, #36]	; 0x24
   2274c:	str	r3, [sp, #28]
   22750:	mov	r8, r6
   22754:	mov	r0, sl
   22758:	mov	r1, r9
   2275c:	mov	r2, #10
   22760:	mov	r3, #0
   22764:	bl	2ae3c <_obstack_memory_used@@Base+0x4fe8>
   22768:	add	r2, r0, r0, lsl #2
   2276c:	sub	r2, sl, r2, lsl #1
   22770:	orr	r2, r2, #48	; 0x30
   22774:	strb	r2, [r8, #-1]!
   22778:	rsbs	r2, sl, #9
   2277c:	mov	sl, r0
   22780:	rscs	r2, r9, #0
   22784:	mov	r9, r1
   22788:	bcc	22754 <__assert_fail@plt+0x106c8>
   2278c:	ldr	sl, [sp, #32]
   22790:	ldr	r5, [sp, #40]	; 0x28
   22794:	ldr	r9, [fp, #16]
   22798:	tst	r5, #4
   2279c:	beq	221a8 <__assert_fail@plt+0x1011c>
   227a0:	ldr	r9, [sp, #52]	; 0x34
   227a4:	mov	r5, r8
   227a8:	sub	r4, r6, r8
   227ac:	mov	r0, r9
   227b0:	bl	11eac <strlen@plt>
   227b4:	add	r8, sp, #56	; 0x38
   227b8:	str	r0, [sp, #48]	; 0x30
   227bc:	mov	r1, r5
   227c0:	mov	r2, r4
   227c4:	mov	r0, r8
   227c8:	bl	11c60 <memcpy@plt>
   227cc:	ldr	r5, [sp, #16]
   227d0:	ldrb	r7, [r5]
   227d4:	cmp	r7, #255	; 0xff
   227d8:	mov	sl, r7
   227dc:	moveq	sl, r4
   227e0:	cmp	r7, #0
   227e4:	mvneq	sl, #0
   227e8:	cmp	sl, r4
   227ec:	movhi	sl, r4
   227f0:	sub	r0, r6, sl
   227f4:	sub	r6, r4, sl
   227f8:	mov	r2, sl
   227fc:	add	r1, r8, r6
   22800:	mov	r8, r0
   22804:	bl	11c60 <memcpy@plt>
   22808:	cmp	r6, #0
   2280c:	beq	2289c <__assert_fail@plt+0x10810>
   22810:	clz	r0, r7
   22814:	lsr	r9, r0, #5
   22818:	ldr	r0, [sp, #48]	; 0x30
   2281c:	rsb	r0, r0, #0
   22820:	str	r0, [sp, #44]	; 0x2c
   22824:	ldr	r0, [sp, #44]	; 0x2c
   22828:	ldr	r1, [sp, #52]	; 0x34
   2282c:	ldr	r2, [sp, #48]	; 0x30
   22830:	add	r4, r8, r0
   22834:	mov	r0, r4
   22838:	bl	11c60 <memcpy@plt>
   2283c:	tst	r9, #1
   22840:	add	r0, sp, #56	; 0x38
   22844:	addeq	r5, r5, #1
   22848:	mov	r9, r5
   2284c:	ldrb	r5, [r5]
   22850:	cmp	r5, #255	; 0xff
   22854:	mov	r7, r5
   22858:	moveq	r7, r6
   2285c:	cmp	r5, #0
   22860:	moveq	r7, sl
   22864:	cmp	r6, r7
   22868:	movcc	r7, r6
   2286c:	sub	r6, r6, r7
   22870:	sub	r8, r4, r7
   22874:	mov	r2, r7
   22878:	add	r1, r0, r6
   2287c:	mov	r0, r8
   22880:	bl	11c60 <memcpy@plt>
   22884:	clz	r0, r5
   22888:	mov	r5, r9
   2288c:	cmp	r6, #0
   22890:	mov	sl, r7
   22894:	lsr	r9, r0, #5
   22898:	bne	22824 <__assert_fail@plt+0x10798>
   2289c:	ldr	r7, [sp, #36]	; 0x24
   228a0:	ldr	sl, [sp, #32]
   228a4:	ldr	r5, [sp, #40]	; 0x28
   228a8:	ldr	r9, [fp, #16]
   228ac:	ldr	r3, [sp, #28]
   228b0:	tst	r5, #128	; 0x80
   228b4:	bne	221b4 <__assert_fail@plt+0x10128>
   228b8:	mov	r0, #0
   228bc:	strb	r0, [r7]
   228c0:	mov	r0, r8
   228c4:	sub	sp, fp, #48	; 0x30
   228c8:	vpop	{d8-d9}
   228cc:	add	sp, sp, #4
   228d0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   228d4:	add	r0, r0, r2
   228d8:	mov	ip, #2
   228dc:	cmp	r8, r0
   228e0:	movwcc	ip, #3
   228e4:	subs	r0, r4, r8
   228e8:	mov	r3, #6
   228ec:	sbcs	r0, r9, #0
   228f0:	bcc	226b4 <__assert_fail@plt+0x10628>
   228f4:	mov	r0, r4
   228f8:	mov	r1, r9
   228fc:	mov	r2, r8
   22900:	mov	r3, #0
   22904:	mov	r5, ip
   22908:	bl	2ae3c <_obstack_memory_used@@Base+0x4fe8>
   2290c:	mov	r6, r8
   22910:	mov	r8, r0
   22914:	mov	r2, r5
   22918:	mov	r9, r1
   2291c:	mls	r0, r0, r6, r4
   22920:	add	r0, r0, r0, lsl #2
   22924:	add	r0, r7, r0, lsl #1
   22928:	udiv	r4, r0, r6
   2292c:	mls	r0, r4, r6, r0
   22930:	lsl	r0, r0, #1
   22934:	orr	r0, r0, r2, lsr #1
   22938:	cmp	r0, r6
   2293c:	bcs	22980 <__assert_fail@plt+0x108f4>
   22940:	rsb	r1, r2, #0
   22944:	subs	ip, r0, r1
   22948:	movwne	ip, #1
   2294c:	subs	r0, r8, r6
   22950:	mov	r3, #7
   22954:	sbcs	r0, r9, #0
   22958:	bcs	229a0 <__assert_fail@plt+0x10914>
   2295c:	mov	r7, r4
   22960:	ldr	r5, [sp, #48]	; 0x30
   22964:	ldr	r4, [sp, #44]	; 0x2c
   22968:	mov	sl, r8
   2296c:	mov	r8, r6
   22970:	rsbs	r0, sl, #9
   22974:	rscs	r0, r9, #0
   22978:	bcc	226cc <__assert_fail@plt+0x10640>
   2297c:	b	22464 <__assert_fail@plt+0x103d8>
   22980:	add	r0, r0, r2
   22984:	mov	ip, #2
   22988:	cmp	r6, r0
   2298c:	movwcc	ip, #3
   22990:	subs	r0, r8, r6
   22994:	mov	r3, #7
   22998:	sbcs	r0, r9, #0
   2299c:	bcc	2295c <__assert_fail@plt+0x108d0>
   229a0:	mov	r0, r8
   229a4:	mov	r1, r9
   229a8:	mov	r2, r6
   229ac:	mov	r3, #0
   229b0:	mov	r5, ip
   229b4:	bl	2ae3c <_obstack_memory_used@@Base+0x4fe8>
   229b8:	mov	sl, r0
   229bc:	mls	r0, r0, r6, r8
   229c0:	mov	r2, r5
   229c4:	mov	r9, r1
   229c8:	mov	r8, r6
   229cc:	add	r0, r0, r0, lsl #2
   229d0:	add	r0, r4, r0, lsl #1
   229d4:	udiv	r7, r0, r6
   229d8:	mls	r0, r7, r6, r0
   229dc:	lsl	r0, r0, #1
   229e0:	orr	r0, r0, r5, lsr #1
   229e4:	cmp	r0, r6
   229e8:	bcs	229fc <__assert_fail@plt+0x10970>
   229ec:	rsb	r1, r2, #0
   229f0:	subs	ip, r0, r1
   229f4:	movwne	ip, #1
   229f8:	b	22a0c <__assert_fail@plt+0x10980>
   229fc:	add	r0, r0, r2
   22a00:	mov	ip, #2
   22a04:	cmp	r8, r0
   22a08:	movwcc	ip, #3
   22a0c:	ldr	r5, [sp, #48]	; 0x30
   22a10:	ldr	r4, [sp, #44]	; 0x2c
   22a14:	mov	r3, #8
   22a18:	rsbs	r0, sl, #9
   22a1c:	rscs	r0, r9, #0
   22a20:	bcc	226cc <__assert_fail@plt+0x10640>
   22a24:	b	22464 <__assert_fail@plt+0x103d8>
   22a28:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   22a2c:	add	fp, sp, #24
   22a30:	sub	sp, sp, #8
   22a34:	mov	r4, r2
   22a38:	mov	r8, r1
   22a3c:	cmp	r0, #0
   22a40:	bne	22a6c <__assert_fail@plt+0x109e0>
   22a44:	movw	r0, #53048	; 0xcf38
   22a48:	movt	r0, #2
   22a4c:	bl	11de0 <getenv@plt>
   22a50:	cmp	r0, #0
   22a54:	bne	22a6c <__assert_fail@plt+0x109e0>
   22a58:	movw	r0, #61312	; 0xef80
   22a5c:	movt	r0, #2
   22a60:	bl	11de0 <getenv@plt>
   22a64:	cmp	r0, #0
   22a68:	beq	22b98 <__assert_fail@plt+0x10b0c>
   22a6c:	mov	r6, r0
   22a70:	movw	r7, #61380	; 0xefc4
   22a74:	movw	r1, #61368	; 0xefb8
   22a78:	mov	r3, #4
   22a7c:	ldrb	r5, [r6], #1
   22a80:	movt	r7, #2
   22a84:	movt	r1, #2
   22a88:	mov	r2, r7
   22a8c:	cmp	r5, #39	; 0x27
   22a90:	movne	r6, r0
   22a94:	mov	r0, r6
   22a98:	bl	1ea48 <__assert_fail@plt+0xc9bc>
   22a9c:	sub	r1, r5, #39	; 0x27
   22aa0:	cmp	r0, #0
   22aa4:	clz	r1, r1
   22aa8:	lsr	r1, r1, #5
   22aac:	lsl	r5, r1, #2
   22ab0:	bmi	22ae8 <__assert_fail@plt+0x10a5c>
   22ab4:	ldr	r0, [r7, r0, lsl #2]
   22ab8:	mov	r2, #1
   22abc:	mov	r1, #0
   22ac0:	str	r2, [r4]
   22ac4:	str	r1, [r4, #4]
   22ac8:	orr	r1, r0, r5
   22acc:	mov	r0, #0
   22ad0:	str	r1, [r8]
   22ad4:	ldrd	r2, [r4]
   22ad8:	orrs	r1, r2, r3
   22adc:	beq	22b24 <__assert_fail@plt+0x10a98>
   22ae0:	sub	sp, fp, #24
   22ae4:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   22ae8:	movw	r0, #61322	; 0xef8a
   22aec:	add	r1, sp, #4
   22af0:	mov	r2, #0
   22af4:	mov	r3, r4
   22af8:	mov	r7, #0
   22afc:	movt	r0, #2
   22b00:	str	r0, [sp]
   22b04:	mov	r0, r6
   22b08:	bl	29940 <_obstack_memory_used@@Base+0x3aec>
   22b0c:	cmp	r0, #0
   22b10:	beq	22b54 <__assert_fail@plt+0x10ac8>
   22b14:	str	r7, [r8]
   22b18:	ldrd	r2, [r4]
   22b1c:	orrs	r1, r2, r3
   22b20:	bne	22ae0 <__assert_fail@plt+0x10a54>
   22b24:	movw	r0, #61340	; 0xef9c
   22b28:	movt	r0, #2
   22b2c:	bl	11de0 <getenv@plt>
   22b30:	cmp	r0, #0
   22b34:	mov	r2, #512	; 0x200
   22b38:	mov	r0, #4
   22b3c:	mov	r1, #0
   22b40:	movweq	r2, #1024	; 0x400
   22b44:	str	r2, [r4]
   22b48:	str	r1, [r4, #4]
   22b4c:	sub	sp, fp, #24
   22b50:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   22b54:	ldrb	r0, [r6]
   22b58:	sub	r0, r0, #48	; 0x30
   22b5c:	uxtb	r0, r0
   22b60:	cmp	r0, #10
   22b64:	bcc	22b90 <__assert_fail@plt+0x10b04>
   22b68:	ldr	r0, [sp, #4]
   22b6c:	cmp	r0, r6
   22b70:	beq	22bc0 <__assert_fail@plt+0x10b34>
   22b74:	ldrb	r2, [r6, #1]
   22b78:	add	r1, r6, #1
   22b7c:	mov	r6, r1
   22b80:	sub	r2, r2, #48	; 0x30
   22b84:	uxtb	r2, r2
   22b88:	cmp	r2, #10
   22b8c:	bcs	22b6c <__assert_fail@plt+0x10ae0>
   22b90:	mov	r1, r5
   22b94:	b	22acc <__assert_fail@plt+0x10a40>
   22b98:	movw	r0, #61340	; 0xef9c
   22b9c:	movt	r0, #2
   22ba0:	bl	11de0 <getenv@plt>
   22ba4:	cmp	r0, #0
   22ba8:	mov	r2, #512	; 0x200
   22bac:	mov	r1, #0
   22bb0:	movweq	r2, #1024	; 0x400
   22bb4:	str	r2, [r4]
   22bb8:	str	r1, [r4, #4]
   22bbc:	b	22acc <__assert_fail@plt+0x10a40>
   22bc0:	ldrb	r2, [r0, #-1]
   22bc4:	orr	r1, r5, #384	; 0x180
   22bc8:	cmp	r2, #66	; 0x42
   22bcc:	mov	r2, r1
   22bd0:	orrne	r2, r5, #128	; 0x80
   22bd4:	bne	22be8 <__assert_fail@plt+0x10b5c>
   22bd8:	ldrb	r0, [r0, #-2]
   22bdc:	cmp	r0, #105	; 0x69
   22be0:	orreq	r1, r2, #32
   22be4:	b	22acc <__assert_fail@plt+0x10a40>
   22be8:	orr	r1, r2, #32
   22bec:	b	22acc <__assert_fail@plt+0x10a40>
   22bf0:	push	{r4, r5, r6, r7, fp, lr}
   22bf4:	add	fp, sp, #16
   22bf8:	movw	r7, #5032	; 0x13a8
   22bfc:	mov	r4, r0
   22c00:	movt	r7, #4
   22c04:	ldr	r5, [r7]
   22c08:	cmp	r5, #0
   22c0c:	beq	22c28 <__assert_fail@plt+0x10b9c>
   22c10:	ldr	r0, [r5]
   22c14:	cmp	r0, r4
   22c18:	beq	22c7c <__assert_fail@plt+0x10bf0>
   22c1c:	ldr	r5, [r5, #4]
   22c20:	cmp	r5, #0
   22c24:	bne	22c10 <__assert_fail@plt+0x10b84>
   22c28:	mov	r0, r4
   22c2c:	bl	11bdc <getpwuid@plt>
   22c30:	cmp	r0, #0
   22c34:	beq	22c40 <__assert_fail@plt+0x10bb4>
   22c38:	ldr	r6, [r0]
   22c3c:	b	22c48 <__assert_fail@plt+0x10bbc>
   22c40:	movw	r6, #54434	; 0xd4a2
   22c44:	movt	r6, #2
   22c48:	mov	r0, r6
   22c4c:	bl	11eac <strlen@plt>
   22c50:	add	r0, r0, #12
   22c54:	bic	r0, r0, #3
   22c58:	bl	29090 <_obstack_memory_used@@Base+0x323c>
   22c5c:	mov	r5, r0
   22c60:	str	r4, [r0]
   22c64:	add	r0, r0, #8
   22c68:	mov	r1, r6
   22c6c:	bl	11d74 <strcpy@plt>
   22c70:	ldr	r0, [r7]
   22c74:	str	r5, [r7]
   22c78:	str	r0, [r5, #4]
   22c7c:	ldrb	r0, [r5, #8]!
   22c80:	cmp	r0, #0
   22c84:	moveq	r5, r0
   22c88:	mov	r0, r5
   22c8c:	pop	{r4, r5, r6, r7, fp, pc}
   22c90:	push	{r4, r5, r6, r7, fp, lr}
   22c94:	add	fp, sp, #16
   22c98:	movw	r7, #5032	; 0x13a8
   22c9c:	mov	r4, r0
   22ca0:	movt	r7, #4
   22ca4:	ldr	r5, [r7]
   22ca8:	cmp	r5, #0
   22cac:	beq	22cf8 <__assert_fail@plt+0x10c6c>
   22cb0:	ldrb	r6, [r4]
   22cb4:	mov	r0, r5
   22cb8:	ldrb	r1, [r0, #8]!
   22cbc:	cmp	r1, r6
   22cc0:	beq	22ce0 <__assert_fail@plt+0x10c54>
   22cc4:	ldr	r5, [r5, #4]
   22cc8:	cmp	r5, #0
   22ccc:	beq	22cf8 <__assert_fail@plt+0x10c6c>
   22cd0:	mov	r0, r5
   22cd4:	ldrb	r1, [r0, #8]!
   22cd8:	cmp	r1, r6
   22cdc:	bne	22cc4 <__assert_fail@plt+0x10c38>
   22ce0:	mov	r1, r4
   22ce4:	bl	11bd0 <strcmp@plt>
   22ce8:	cmp	r0, #0
   22cec:	bne	22cc4 <__assert_fail@plt+0x10c38>
   22cf0:	mov	r0, r5
   22cf4:	pop	{r4, r5, r6, r7, fp, pc}
   22cf8:	ldr	r5, [r7, #4]
   22cfc:	cmp	r5, #0
   22d00:	beq	22d50 <__assert_fail@plt+0x10cc4>
   22d04:	ldrb	r6, [r4]
   22d08:	mov	r0, r5
   22d0c:	ldrb	r1, [r0, #8]!
   22d10:	cmp	r1, r6
   22d14:	beq	22d34 <__assert_fail@plt+0x10ca8>
   22d18:	ldr	r5, [r5, #4]
   22d1c:	cmp	r5, #0
   22d20:	beq	22d50 <__assert_fail@plt+0x10cc4>
   22d24:	mov	r0, r5
   22d28:	ldrb	r1, [r0, #8]!
   22d2c:	cmp	r1, r6
   22d30:	bne	22d18 <__assert_fail@plt+0x10c8c>
   22d34:	mov	r1, r4
   22d38:	bl	11bd0 <strcmp@plt>
   22d3c:	cmp	r0, #0
   22d40:	bne	22d18 <__assert_fail@plt+0x10c8c>
   22d44:	mov	r5, #0
   22d48:	mov	r0, r5
   22d4c:	pop	{r4, r5, r6, r7, fp, pc}
   22d50:	mov	r0, r4
   22d54:	bl	11bc4 <getpwnam@plt>
   22d58:	mov	r6, r0
   22d5c:	mov	r0, r4
   22d60:	bl	11eac <strlen@plt>
   22d64:	add	r0, r0, #12
   22d68:	bic	r0, r0, #3
   22d6c:	bl	29090 <_obstack_memory_used@@Base+0x323c>
   22d70:	mov	r5, r0
   22d74:	add	r0, r0, #8
   22d78:	mov	r1, r4
   22d7c:	bl	11d74 <strcpy@plt>
   22d80:	cmp	r6, #0
   22d84:	beq	22da0 <__assert_fail@plt+0x10d14>
   22d88:	ldr	r0, [r6, #8]
   22d8c:	ldr	r1, [r7]
   22d90:	str	r5, [r7]
   22d94:	stm	r5, {r0, r1}
   22d98:	mov	r0, r5
   22d9c:	pop	{r4, r5, r6, r7, fp, pc}
   22da0:	ldr	r0, [r7, #4]
   22da4:	str	r5, [r7, #4]
   22da8:	str	r0, [r5, #4]
   22dac:	mov	r5, #0
   22db0:	mov	r0, r5
   22db4:	pop	{r4, r5, r6, r7, fp, pc}
   22db8:	push	{r4, r5, r6, r7, fp, lr}
   22dbc:	add	fp, sp, #16
   22dc0:	movw	r7, #5032	; 0x13a8
   22dc4:	mov	r4, r0
   22dc8:	movt	r7, #4
   22dcc:	ldr	r5, [r7, #8]
   22dd0:	cmp	r5, #0
   22dd4:	beq	22df0 <__assert_fail@plt+0x10d64>
   22dd8:	ldr	r0, [r5]
   22ddc:	cmp	r0, r4
   22de0:	beq	22e44 <__assert_fail@plt+0x10db8>
   22de4:	ldr	r5, [r5, #4]
   22de8:	cmp	r5, #0
   22dec:	bne	22dd8 <__assert_fail@plt+0x10d4c>
   22df0:	mov	r0, r4
   22df4:	bl	12050 <getgrgid@plt>
   22df8:	cmp	r0, #0
   22dfc:	beq	22e08 <__assert_fail@plt+0x10d7c>
   22e00:	ldr	r6, [r0]
   22e04:	b	22e10 <__assert_fail@plt+0x10d84>
   22e08:	movw	r6, #54434	; 0xd4a2
   22e0c:	movt	r6, #2
   22e10:	mov	r0, r6
   22e14:	bl	11eac <strlen@plt>
   22e18:	add	r0, r0, #12
   22e1c:	bic	r0, r0, #3
   22e20:	bl	29090 <_obstack_memory_used@@Base+0x323c>
   22e24:	mov	r5, r0
   22e28:	str	r4, [r0]
   22e2c:	add	r0, r0, #8
   22e30:	mov	r1, r6
   22e34:	bl	11d74 <strcpy@plt>
   22e38:	ldr	r0, [r7, #8]
   22e3c:	str	r5, [r7, #8]
   22e40:	str	r0, [r5, #4]
   22e44:	ldrb	r0, [r5, #8]!
   22e48:	cmp	r0, #0
   22e4c:	moveq	r5, r0
   22e50:	mov	r0, r5
   22e54:	pop	{r4, r5, r6, r7, fp, pc}
   22e58:	push	{r4, r5, r6, r7, fp, lr}
   22e5c:	add	fp, sp, #16
   22e60:	movw	r7, #5032	; 0x13a8
   22e64:	mov	r4, r0
   22e68:	movt	r7, #4
   22e6c:	ldr	r5, [r7, #8]
   22e70:	cmp	r5, #0
   22e74:	beq	22ec0 <__assert_fail@plt+0x10e34>
   22e78:	ldrb	r6, [r4]
   22e7c:	mov	r0, r5
   22e80:	ldrb	r1, [r0, #8]!
   22e84:	cmp	r1, r6
   22e88:	beq	22ea8 <__assert_fail@plt+0x10e1c>
   22e8c:	ldr	r5, [r5, #4]
   22e90:	cmp	r5, #0
   22e94:	beq	22ec0 <__assert_fail@plt+0x10e34>
   22e98:	mov	r0, r5
   22e9c:	ldrb	r1, [r0, #8]!
   22ea0:	cmp	r1, r6
   22ea4:	bne	22e8c <__assert_fail@plt+0x10e00>
   22ea8:	mov	r1, r4
   22eac:	bl	11bd0 <strcmp@plt>
   22eb0:	cmp	r0, #0
   22eb4:	bne	22e8c <__assert_fail@plt+0x10e00>
   22eb8:	mov	r0, r5
   22ebc:	pop	{r4, r5, r6, r7, fp, pc}
   22ec0:	ldr	r5, [r7, #12]
   22ec4:	cmp	r5, #0
   22ec8:	beq	22f18 <__assert_fail@plt+0x10e8c>
   22ecc:	ldrb	r6, [r4]
   22ed0:	mov	r0, r5
   22ed4:	ldrb	r1, [r0, #8]!
   22ed8:	cmp	r1, r6
   22edc:	beq	22efc <__assert_fail@plt+0x10e70>
   22ee0:	ldr	r5, [r5, #4]
   22ee4:	cmp	r5, #0
   22ee8:	beq	22f18 <__assert_fail@plt+0x10e8c>
   22eec:	mov	r0, r5
   22ef0:	ldrb	r1, [r0, #8]!
   22ef4:	cmp	r1, r6
   22ef8:	bne	22ee0 <__assert_fail@plt+0x10e54>
   22efc:	mov	r1, r4
   22f00:	bl	11bd0 <strcmp@plt>
   22f04:	cmp	r0, #0
   22f08:	bne	22ee0 <__assert_fail@plt+0x10e54>
   22f0c:	mov	r5, #0
   22f10:	mov	r0, r5
   22f14:	pop	{r4, r5, r6, r7, fp, pc}
   22f18:	mov	r0, r4
   22f1c:	bl	1205c <getgrnam@plt>
   22f20:	mov	r6, r0
   22f24:	mov	r0, r4
   22f28:	bl	11eac <strlen@plt>
   22f2c:	add	r0, r0, #12
   22f30:	bic	r0, r0, #3
   22f34:	bl	29090 <_obstack_memory_used@@Base+0x323c>
   22f38:	mov	r5, r0
   22f3c:	add	r0, r0, #8
   22f40:	mov	r1, r4
   22f44:	bl	11d74 <strcpy@plt>
   22f48:	cmp	r6, #0
   22f4c:	beq	22f68 <__assert_fail@plt+0x10edc>
   22f50:	ldr	r0, [r6, #8]
   22f54:	ldr	r1, [r7, #8]
   22f58:	str	r5, [r7, #8]
   22f5c:	stm	r5, {r0, r1}
   22f60:	mov	r0, r5
   22f64:	pop	{r4, r5, r6, r7, fp, pc}
   22f68:	ldr	r0, [r7, #12]
   22f6c:	str	r5, [r7, #12]
   22f70:	str	r0, [r5, #4]
   22f74:	mov	r5, #0
   22f78:	mov	r0, r5
   22f7c:	pop	{r4, r5, r6, r7, fp, pc}
   22f80:	push	{r4, r5, r6, sl, fp, lr}
   22f84:	add	fp, sp, #16
   22f88:	mov	r5, r0
   22f8c:	mov	r0, #0
   22f90:	mov	r4, r1
   22f94:	add	r6, r2, #19
   22f98:	cmp	r1, #0
   22f9c:	strb	r0, [r2, #20]
   22fa0:	bmi	22ff0 <__assert_fail@plt+0x10f64>
   22fa4:	mov	r0, r5
   22fa8:	mov	r1, r4
   22fac:	mov	r2, #10
   22fb0:	mov	r3, #0
   22fb4:	bl	2ad68 <_obstack_memory_used@@Base+0x4f14>
   22fb8:	add	r2, r0, r0, lsl #2
   22fbc:	sub	r2, r5, r2, lsl #1
   22fc0:	add	r2, r2, #48	; 0x30
   22fc4:	strb	r2, [r6], #-1
   22fc8:	adds	r2, r5, #9
   22fcc:	mov	r5, r0
   22fd0:	adc	r3, r4, #0
   22fd4:	rsbs	r2, r2, #18
   22fd8:	mov	r4, r1
   22fdc:	rscs	r2, r3, #0
   22fe0:	bcc	22fa4 <__assert_fail@plt+0x10f18>
   22fe4:	add	r6, r6, #1
   22fe8:	mov	r0, r6
   22fec:	pop	{r4, r5, r6, sl, fp, pc}
   22ff0:	mov	r0, r5
   22ff4:	mov	r1, r4
   22ff8:	mov	r2, #10
   22ffc:	mov	r3, #0
   23000:	bl	2ad68 <_obstack_memory_used@@Base+0x4f14>
   23004:	add	r2, r0, r0, lsl #2
   23008:	rsb	r2, r5, r2, lsl #1
   2300c:	add	r2, r2, #48	; 0x30
   23010:	strb	r2, [r6], #-1
   23014:	adds	r2, r5, #9
   23018:	mov	r5, r0
   2301c:	adc	r3, r4, #0
   23020:	rsbs	r2, r2, #18
   23024:	mov	r4, r1
   23028:	rscs	r2, r3, #0
   2302c:	bcc	22ff0 <__assert_fail@plt+0x10f64>
   23030:	mov	r0, #45	; 0x2d
   23034:	strb	r0, [r6]
   23038:	mov	r0, r6
   2303c:	pop	{r4, r5, r6, sl, fp, pc}
   23040:	push	{r4, r5, r6, sl, fp, lr}
   23044:	add	fp, sp, #16
   23048:	mov	r5, r0
   2304c:	mov	r0, #0
   23050:	mov	r4, r1
   23054:	add	r6, r2, #19
   23058:	strb	r0, [r2, #20]
   2305c:	mov	r0, r5
   23060:	mov	r1, r4
   23064:	mov	r2, #10
   23068:	mov	r3, #0
   2306c:	bl	2ae3c <_obstack_memory_used@@Base+0x4fe8>
   23070:	add	r2, r0, r0, lsl #2
   23074:	sub	r2, r5, r2, lsl #1
   23078:	orr	r2, r2, #48	; 0x30
   2307c:	strb	r2, [r6], #-1
   23080:	rsbs	r2, r5, #9
   23084:	mov	r5, r0
   23088:	rscs	r2, r4, #0
   2308c:	mov	r4, r1
   23090:	bcc	2305c <__assert_fail@plt+0x10fd0>
   23094:	add	r0, r6, #1
   23098:	pop	{r4, r5, r6, sl, fp, pc}
   2309c:	push	{r4, r5, r6, r7, fp, lr}
   230a0:	add	fp, sp, #16
   230a4:	sub	sp, sp, #8
   230a8:	cmp	r0, #0
   230ac:	add	r5, sp, #4
   230b0:	mov	r7, r2
   230b4:	mov	r4, r1
   230b8:	movne	r5, r0
   230bc:	mov	r0, r5
   230c0:	bl	11d8c <mbrtowc@plt>
   230c4:	mov	r6, r0
   230c8:	cmp	r7, #0
   230cc:	beq	230f4 <__assert_fail@plt+0x11068>
   230d0:	cmn	r6, #2
   230d4:	bcc	230f4 <__assert_fail@plt+0x11068>
   230d8:	mov	r0, #0
   230dc:	bl	205b8 <__assert_fail@plt+0xe52c>
   230e0:	cmp	r0, #0
   230e4:	bne	230f4 <__assert_fail@plt+0x11068>
   230e8:	ldrb	r0, [r4]
   230ec:	mov	r6, #1
   230f0:	str	r0, [r5]
   230f4:	mov	r0, r6
   230f8:	sub	sp, fp, #16
   230fc:	pop	{r4, r5, r6, r7, fp, pc}
   23100:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   23104:	add	fp, sp, #28
   23108:	sub	sp, sp, #20
   2310c:	mov	r4, r3
   23110:	str	r2, [sp, #16]
   23114:	str	r1, [sp, #12]
   23118:	mov	r5, r0
   2311c:	bl	11eac <strlen@plt>
   23120:	ldr	r3, [fp, #12]
   23124:	mov	r8, r0
   23128:	mov	sl, #0
   2312c:	tst	r3, #2
   23130:	bne	23204 <__assert_fail@plt+0x11178>
   23134:	bl	11d68 <__ctype_get_mb_cur_max@plt>
   23138:	mov	r6, #0
   2313c:	cmp	r0, #2
   23140:	bcc	23214 <__assert_fail@plt+0x11188>
   23144:	mov	r0, #0
   23148:	mov	r1, r5
   2314c:	mov	r2, #0
   23150:	bl	11fb4 <mbstowcs@plt>
   23154:	cmn	r0, #1
   23158:	beq	233bc <__assert_fail@plt+0x11330>
   2315c:	add	r9, r0, #1
   23160:	mov	r7, r0
   23164:	lsl	r0, r9, #2
   23168:	bl	2a648 <_obstack_memory_used@@Base+0x47f4>
   2316c:	cmp	r0, #0
   23170:	beq	233b8 <__assert_fail@plt+0x1132c>
   23174:	mov	r1, r5
   23178:	mov	r2, r9
   2317c:	mov	r6, r0
   23180:	bl	11fb4 <mbstowcs@plt>
   23184:	cmp	r0, #0
   23188:	beq	233dc <__assert_fail@plt+0x11350>
   2318c:	str	r5, [sp, #4]
   23190:	mov	r5, #0
   23194:	mov	r1, r6
   23198:	str	r6, [sp]
   2319c:	str	r5, [r6, r7, lsl #2]
   231a0:	ldr	r0, [r6]
   231a4:	cmp	r0, #0
   231a8:	beq	233ec <__assert_fail@plt+0x11360>
   231ac:	add	r6, r1, #4
   231b0:	movw	r7, #65533	; 0xfffd
   231b4:	bl	11d14 <iswprint@plt>
   231b8:	cmp	r0, #0
   231bc:	streq	r7, [r6, #-4]
   231c0:	moveq	r5, #1
   231c4:	ldr	r0, [r6], #4
   231c8:	cmp	r0, #0
   231cc:	bne	231b4 <__assert_fail@plt+0x11128>
   231d0:	ldr	r6, [sp]
   231d4:	mov	r1, r9
   231d8:	mov	r0, r6
   231dc:	bl	11f78 <wcswidth@plt>
   231e0:	mov	r7, r0
   231e4:	tst	r5, #1
   231e8:	beq	233fc <__assert_fail@plt+0x11370>
   231ec:	mov	r0, #0
   231f0:	mov	r1, r6
   231f4:	mov	r2, #0
   231f8:	bl	11d98 <wcstombs@plt>
   231fc:	ldr	r5, [sp, #4]
   23200:	b	23414 <__assert_fail@plt+0x11388>
   23204:	mov	r6, #0
   23208:	mov	r2, #0
   2320c:	mov	r7, r8
   23210:	b	23220 <__assert_fail@plt+0x11194>
   23214:	mov	r2, #0
   23218:	mov	r7, r8
   2321c:	ldr	r3, [fp, #12]
   23220:	ldr	r0, [r4]
   23224:	str	r5, [sp, #4]
   23228:	ldr	r5, [fp, #8]
   2322c:	mov	r1, r7
   23230:	str	r6, [sp, #8]
   23234:	cmp	r7, r0
   23238:	movhi	r1, r0
   2323c:	movhi	r8, r0
   23240:	cmp	r0, r7
   23244:	subhi	sl, r0, r1
   23248:	cmp	r5, #0
   2324c:	str	r1, [r4]
   23250:	beq	23268 <__assert_fail@plt+0x111dc>
   23254:	cmp	r5, #1
   23258:	bne	23270 <__assert_fail@plt+0x111e4>
   2325c:	mov	r9, #0
   23260:	mov	r5, sl
   23264:	b	2327c <__assert_fail@plt+0x111f0>
   23268:	mov	r9, sl
   2326c:	b	2327c <__assert_fail@plt+0x111f0>
   23270:	and	r0, sl, #1
   23274:	lsr	r9, sl, #1
   23278:	add	r5, r0, sl, lsr #1
   2327c:	ldr	r0, [sp, #16]
   23280:	ldr	r4, [sp, #12]
   23284:	tst	r3, #8
   23288:	mov	r6, #0
   2328c:	mov	r7, #0
   23290:	moveq	r6, r9
   23294:	tst	r3, #4
   23298:	moveq	r7, r5
   2329c:	cmp	r0, #0
   232a0:	beq	23390 <__assert_fail@plt+0x11304>
   232a4:	add	r0, r4, r0
   232a8:	str	r2, [sp]
   232ac:	sub	sl, r0, #1
   232b0:	mov	r0, r4
   232b4:	cmp	sl, r4
   232b8:	bls	23308 <__assert_fail@plt+0x1127c>
   232bc:	cmp	r7, #0
   232c0:	mov	r0, r4
   232c4:	beq	23308 <__assert_fail@plt+0x1127c>
   232c8:	mvn	r0, r4
   232cc:	sub	r1, r7, #1
   232d0:	add	r0, sl, r0
   232d4:	cmp	r1, r0
   232d8:	movhi	r1, r0
   232dc:	mov	r0, r4
   232e0:	add	r2, r1, #1
   232e4:	mov	r1, #32
   232e8:	bl	11ef4 <memset@plt>
   232ec:	ldr	r1, [sp, #16]
   232f0:	sub	r0, r5, #1
   232f4:	sub	r1, r1, #2
   232f8:	cmp	r0, r1
   232fc:	movcc	r1, r0
   23300:	add	r0, r1, r4
   23304:	add	r0, r0, #1
   23308:	ldr	r1, [sp, #4]
   2330c:	sub	r2, sl, r0
   23310:	mov	r4, #0
   23314:	mvn	r3, #0
   23318:	cmp	r8, r2
   2331c:	strb	r4, [r0]
   23320:	movcc	r2, r8
   23324:	bl	12080 <__mempcpy_chk@plt>
   23328:	mov	r5, r0
   2332c:	cmp	r6, #0
   23330:	beq	23388 <__assert_fail@plt+0x112fc>
   23334:	cmp	r5, sl
   23338:	bcs	23388 <__assert_fail@plt+0x112fc>
   2333c:	mvn	r0, r5
   23340:	sub	r1, r6, #1
   23344:	add	r0, sl, r0
   23348:	cmp	r1, r0
   2334c:	movhi	r1, r0
   23350:	mov	r0, r5
   23354:	add	r2, r1, #1
   23358:	mov	r1, #32
   2335c:	bl	11ef4 <memset@plt>
   23360:	ldr	r0, [sp, #16]
   23364:	ldr	r1, [sp, #12]
   23368:	sub	r0, r0, r5
   2336c:	add	r0, r0, r1
   23370:	sub	r1, r9, #1
   23374:	sub	r0, r0, #2
   23378:	cmp	r1, r0
   2337c:	movhi	r1, r0
   23380:	add	r0, r1, r5
   23384:	add	r5, r0, #1
   23388:	ldr	r2, [sp]
   2338c:	strb	r4, [r5]
   23390:	add	r0, r7, r8
   23394:	add	r9, r0, r6
   23398:	ldr	r6, [sp, #8]
   2339c:	mov	r0, r2
   233a0:	bl	2056c <__assert_fail@plt+0xe4e0>
   233a4:	mov	r0, r6
   233a8:	bl	2056c <__assert_fail@plt+0xe4e0>
   233ac:	mov	r0, r9
   233b0:	sub	sp, fp, #28
   233b4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   233b8:	mov	r6, #0
   233bc:	ldr	r3, [fp, #12]
   233c0:	mvn	r9, #0
   233c4:	mov	r2, #0
   233c8:	mov	r7, r8
   233cc:	mov	r0, #0
   233d0:	tst	r3, #1
   233d4:	bne	23220 <__assert_fail@plt+0x11194>
   233d8:	b	233a0 <__assert_fail@plt+0x11314>
   233dc:	mov	r2, r6
   233e0:	mov	r7, r8
   233e4:	mov	r6, #0
   233e8:	b	2321c <__assert_fail@plt+0x11190>
   233ec:	mov	r0, r1
   233f0:	mov	r1, r9
   233f4:	bl	11f78 <wcswidth@plt>
   233f8:	mov	r7, r0
   233fc:	ldr	r0, [r4]
   23400:	ldr	r5, [sp, #4]
   23404:	mov	r6, #0
   23408:	cmp	r7, r0
   2340c:	mov	r0, r8
   23410:	bls	23480 <__assert_fail@plt+0x113f4>
   23414:	add	r6, r0, #1
   23418:	mov	r0, r6
   2341c:	bl	2a648 <_obstack_memory_used@@Base+0x47f4>
   23420:	cmp	r0, #0
   23424:	beq	23488 <__assert_fail@plt+0x113fc>
   23428:	ldr	r1, [sp]
   2342c:	str	r0, [sp, #8]
   23430:	str	r6, [sp, #4]
   23434:	ldr	r0, [r1]
   23438:	cmp	r0, #0
   2343c:	beq	234a8 <__assert_fail@plt+0x1141c>
   23440:	ldr	r5, [r4]
   23444:	mov	r8, #0
   23448:	movw	r9, #65533	; 0xfffd
   2344c:	mov	r6, r1
   23450:	bl	11c00 <wcwidth@plt>
   23454:	cmn	r0, #1
   23458:	moveq	r0, #1
   2345c:	streq	r9, [r6]
   23460:	add	r7, r0, r8
   23464:	cmp	r7, r5
   23468:	bhi	234b4 <__assert_fail@plt+0x11428>
   2346c:	ldr	r0, [r6, #4]!
   23470:	mov	r8, r7
   23474:	cmp	r0, #0
   23478:	bne	23450 <__assert_fail@plt+0x113c4>
   2347c:	b	234b8 <__assert_fail@plt+0x1142c>
   23480:	ldr	r2, [sp]
   23484:	b	2321c <__assert_fail@plt+0x11190>
   23488:	ldr	r3, [fp, #12]
   2348c:	ldr	r2, [sp]
   23490:	mov	r6, #0
   23494:	mvn	r9, #0
   23498:	tst	r3, #1
   2349c:	mov	r0, r2
   234a0:	bne	23220 <__assert_fail@plt+0x11194>
   234a4:	b	233a0 <__assert_fail@plt+0x11314>
   234a8:	mov	r6, r1
   234ac:	mov	r7, #0
   234b0:	b	234b8 <__assert_fail@plt+0x1142c>
   234b4:	mov	r7, r8
   234b8:	mov	r0, #0
   234bc:	ldr	r5, [sp]
   234c0:	ldr	r2, [sp, #4]
   234c4:	str	r0, [r6]
   234c8:	ldr	r6, [sp, #8]
   234cc:	mov	r1, r5
   234d0:	mov	r0, r6
   234d4:	bl	11d98 <wcstombs@plt>
   234d8:	mov	r2, r5
   234dc:	mov	r8, r0
   234e0:	mov	r5, r6
   234e4:	b	2321c <__assert_fail@plt+0x11190>
   234e8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   234ec:	add	fp, sp, #28
   234f0:	sub	sp, sp, #12
   234f4:	ldr	r8, [r1]
   234f8:	mov	sl, r0
   234fc:	mov	r9, r2
   23500:	mov	r6, r1
   23504:	mov	r7, #0
   23508:	str	r3, [sp, #8]
   2350c:	mov	r0, r8
   23510:	mov	r5, r8
   23514:	cmp	r0, r5
   23518:	bcc	2357c <__assert_fail@plt+0x114f0>
   2351c:	add	r5, r0, #1
   23520:	mov	r0, r7
   23524:	mov	r1, r5
   23528:	bl	2a678 <_obstack_memory_used@@Base+0x4824>
   2352c:	cmp	r0, #0
   23530:	beq	23570 <__assert_fail@plt+0x114e4>
   23534:	mov	r4, r0
   23538:	ldr	r0, [sp, #8]
   2353c:	str	r8, [r6]
   23540:	mov	r2, r5
   23544:	mov	r3, r6
   23548:	str	r9, [sp]
   2354c:	mov	r1, r4
   23550:	str	r0, [sp, #4]
   23554:	mov	r0, sl
   23558:	bl	23100 <__assert_fail@plt+0x11074>
   2355c:	cmn	r0, #1
   23560:	mov	r7, r4
   23564:	bne	23514 <__assert_fail@plt+0x11488>
   23568:	mov	r0, r4
   2356c:	b	23574 <__assert_fail@plt+0x114e8>
   23570:	mov	r0, r7
   23574:	bl	2056c <__assert_fail@plt+0xe4e0>
   23578:	mov	r7, #0
   2357c:	mov	r0, r7
   23580:	sub	sp, fp, #28
   23584:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   23588:	push	{r4, r5, fp, lr}
   2358c:	add	fp, sp, #8
   23590:	mov	r4, r1
   23594:	mov	r5, r0
   23598:	bl	11eac <strlen@plt>
   2359c:	mov	r1, r0
   235a0:	mov	r0, r5
   235a4:	mov	r2, r4
   235a8:	pop	{r4, r5, fp, lr}
   235ac:	b	235b0 <__assert_fail@plt+0x11524>
   235b0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   235b4:	add	fp, sp, #28
   235b8:	sub	sp, sp, #20
   235bc:	mov	r5, r2
   235c0:	mov	r6, r1
   235c4:	mov	r4, r0
   235c8:	add	r7, r0, r1
   235cc:	bl	11d68 <__ctype_get_mb_cur_max@plt>
   235d0:	cmp	r0, #1
   235d4:	bls	23894 <__assert_fail@plt+0x11808>
   235d8:	cmp	r6, #1
   235dc:	blt	238e8 <__assert_fail@plt+0x1185c>
   235e0:	and	r2, r5, #1
   235e4:	mov	r3, #0
   235e8:	add	r8, sp, #4
   235ec:	add	r9, sp, #8
   235f0:	mvn	sl, #-2147483648	; 0x80000000
   235f4:	tst	r5, #2
   235f8:	bne	238f8 <__assert_fail@plt+0x1186c>
   235fc:	mov	r5, #0
   23600:	ldrb	r0, [r4]
   23604:	sub	r0, r0, #32
   23608:	cmp	r0, #94	; 0x5e
   2360c:	bhi	237a8 <__assert_fail@plt+0x1171c>
   23610:	add	r1, pc, #0
   23614:	ldr	pc, [r1, r0, lsl #2]
   23618:	muleq	r2, r4, r7
   2361c:	muleq	r2, r4, r7
   23620:	muleq	r2, r4, r7
   23624:	muleq	r2, r4, r7
   23628:	andeq	r3, r2, r8, lsr #15
   2362c:	muleq	r2, r4, r7
   23630:	muleq	r2, r4, r7
   23634:	muleq	r2, r4, r7
   23638:	muleq	r2, r4, r7
   2363c:	muleq	r2, r4, r7
   23640:	muleq	r2, r4, r7
   23644:	muleq	r2, r4, r7
   23648:	muleq	r2, r4, r7
   2364c:	muleq	r2, r4, r7
   23650:	muleq	r2, r4, r7
   23654:	muleq	r2, r4, r7
   23658:	muleq	r2, r4, r7
   2365c:	muleq	r2, r4, r7
   23660:	muleq	r2, r4, r7
   23664:	muleq	r2, r4, r7
   23668:	muleq	r2, r4, r7
   2366c:	muleq	r2, r4, r7
   23670:	muleq	r2, r4, r7
   23674:	muleq	r2, r4, r7
   23678:	muleq	r2, r4, r7
   2367c:	muleq	r2, r4, r7
   23680:	muleq	r2, r4, r7
   23684:	muleq	r2, r4, r7
   23688:	muleq	r2, r4, r7
   2368c:	muleq	r2, r4, r7
   23690:	muleq	r2, r4, r7
   23694:	muleq	r2, r4, r7
   23698:	andeq	r3, r2, r8, lsr #15
   2369c:	muleq	r2, r4, r7
   236a0:	muleq	r2, r4, r7
   236a4:	muleq	r2, r4, r7
   236a8:	muleq	r2, r4, r7
   236ac:	muleq	r2, r4, r7
   236b0:	muleq	r2, r4, r7
   236b4:	muleq	r2, r4, r7
   236b8:	muleq	r2, r4, r7
   236bc:	muleq	r2, r4, r7
   236c0:	muleq	r2, r4, r7
   236c4:	muleq	r2, r4, r7
   236c8:	muleq	r2, r4, r7
   236cc:	muleq	r2, r4, r7
   236d0:	muleq	r2, r4, r7
   236d4:	muleq	r2, r4, r7
   236d8:	muleq	r2, r4, r7
   236dc:	muleq	r2, r4, r7
   236e0:	muleq	r2, r4, r7
   236e4:	muleq	r2, r4, r7
   236e8:	muleq	r2, r4, r7
   236ec:	muleq	r2, r4, r7
   236f0:	muleq	r2, r4, r7
   236f4:	muleq	r2, r4, r7
   236f8:	muleq	r2, r4, r7
   236fc:	muleq	r2, r4, r7
   23700:	muleq	r2, r4, r7
   23704:	muleq	r2, r4, r7
   23708:	muleq	r2, r4, r7
   2370c:	muleq	r2, r4, r7
   23710:	muleq	r2, r4, r7
   23714:	muleq	r2, r4, r7
   23718:	andeq	r3, r2, r8, lsr #15
   2371c:	muleq	r2, r4, r7
   23720:	muleq	r2, r4, r7
   23724:	muleq	r2, r4, r7
   23728:	muleq	r2, r4, r7
   2372c:	muleq	r2, r4, r7
   23730:	muleq	r2, r4, r7
   23734:	muleq	r2, r4, r7
   23738:	muleq	r2, r4, r7
   2373c:	muleq	r2, r4, r7
   23740:	muleq	r2, r4, r7
   23744:	muleq	r2, r4, r7
   23748:	muleq	r2, r4, r7
   2374c:	muleq	r2, r4, r7
   23750:	muleq	r2, r4, r7
   23754:	muleq	r2, r4, r7
   23758:	muleq	r2, r4, r7
   2375c:	muleq	r2, r4, r7
   23760:	muleq	r2, r4, r7
   23764:	muleq	r2, r4, r7
   23768:	muleq	r2, r4, r7
   2376c:	muleq	r2, r4, r7
   23770:	muleq	r2, r4, r7
   23774:	muleq	r2, r4, r7
   23778:	muleq	r2, r4, r7
   2377c:	muleq	r2, r4, r7
   23780:	muleq	r2, r4, r7
   23784:	muleq	r2, r4, r7
   23788:	muleq	r2, r4, r7
   2378c:	muleq	r2, r4, r7
   23790:	muleq	r2, r4, r7
   23794:	add	r5, r5, #1
   23798:	add	r4, r4, #1
   2379c:	cmp	r4, r7
   237a0:	bcc	23600 <__assert_fail@plt+0x11574>
   237a4:	b	23b8c <__assert_fail@plt+0x11b00>
   237a8:	str	r2, [sp]
   237ac:	str	r3, [sp, #12]
   237b0:	str	r3, [sp, #8]
   237b4:	b	237dc <__assert_fail@plt+0x11750>
   237b8:	ldr	r0, [sp, #4]
   237bc:	bl	11cf0 <iswcntrl@plt>
   237c0:	cmp	r0, #0
   237c4:	beq	23848 <__assert_fail@plt+0x117bc>
   237c8:	mov	r0, r9
   237cc:	add	r4, r4, r6
   237d0:	bl	11c78 <mbsinit@plt>
   237d4:	cmp	r0, #0
   237d8:	bne	23880 <__assert_fail@plt+0x117f4>
   237dc:	sub	r2, r7, r4
   237e0:	mov	r0, r8
   237e4:	mov	r1, r4
   237e8:	mov	r3, r9
   237ec:	bl	2309c <__assert_fail@plt+0x11010>
   237f0:	cmp	r0, #0
   237f4:	beq	23830 <__assert_fail@plt+0x117a4>
   237f8:	mov	r6, r0
   237fc:	cmn	r0, #2
   23800:	beq	23858 <__assert_fail@plt+0x117cc>
   23804:	cmn	r6, #1
   23808:	beq	2386c <__assert_fail@plt+0x117e0>
   2380c:	ldr	r0, [sp, #4]
   23810:	bl	11c00 <wcwidth@plt>
   23814:	cmn	r0, #1
   23818:	ble	237b8 <__assert_fail@plt+0x1172c>
   2381c:	sub	r1, sl, r5
   23820:	cmp	r0, r1
   23824:	bgt	23b98 <__assert_fail@plt+0x11b0c>
   23828:	add	r5, r0, r5
   2382c:	b	237c8 <__assert_fail@plt+0x1173c>
   23830:	mov	r6, #1
   23834:	ldr	r0, [sp, #4]
   23838:	bl	11c00 <wcwidth@plt>
   2383c:	cmn	r0, #1
   23840:	bgt	2381c <__assert_fail@plt+0x11790>
   23844:	b	237b8 <__assert_fail@plt+0x1172c>
   23848:	cmn	r5, #-2147483647	; 0x80000001
   2384c:	beq	23b98 <__assert_fail@plt+0x11b0c>
   23850:	add	r5, r5, #1
   23854:	b	237c8 <__assert_fail@plt+0x1173c>
   23858:	ldr	r0, [sp]
   2385c:	mov	r4, r7
   23860:	cmp	r0, #0
   23864:	beq	2387c <__assert_fail@plt+0x117f0>
   23868:	b	23ba8 <__assert_fail@plt+0x11b1c>
   2386c:	ldr	r0, [sp]
   23870:	cmp	r0, #0
   23874:	bne	23ba8 <__assert_fail@plt+0x11b1c>
   23878:	add	r4, r4, #1
   2387c:	add	r5, r5, #1
   23880:	ldr	r2, [sp]
   23884:	mov	r3, #0
   23888:	cmp	r4, r7
   2388c:	bcc	23600 <__assert_fail@plt+0x11574>
   23890:	b	23b8c <__assert_fail@plt+0x11b00>
   23894:	cmp	r6, #1
   23898:	blt	238e8 <__assert_fail@plt+0x1185c>
   2389c:	bl	11e64 <__ctype_b_loc@plt>
   238a0:	ldr	r0, [r0]
   238a4:	tst	r5, #2
   238a8:	bne	23b5c <__assert_fail@plt+0x11ad0>
   238ac:	mov	r5, #0
   238b0:	b	238c8 <__assert_fail@plt+0x1183c>
   238b4:	cmn	r5, #-2147483647	; 0x80000001
   238b8:	beq	23b98 <__assert_fail@plt+0x11b0c>
   238bc:	add	r5, r5, #1
   238c0:	cmp	r4, r7
   238c4:	bcs	23b8c <__assert_fail@plt+0x11b00>
   238c8:	ldrb	r1, [r4], #1
   238cc:	add	r1, r0, r1, lsl #1
   238d0:	ldrh	r1, [r1]
   238d4:	tst	r1, #16384	; 0x4000
   238d8:	bne	238b4 <__assert_fail@plt+0x11828>
   238dc:	tst	r1, #2
   238e0:	beq	238b4 <__assert_fail@plt+0x11828>
   238e4:	b	238c0 <__assert_fail@plt+0x11834>
   238e8:	mov	r5, #0
   238ec:	mov	r0, r5
   238f0:	sub	sp, fp, #28
   238f4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   238f8:	mov	r5, #0
   238fc:	ldrb	r0, [r4]
   23900:	sub	r0, r0, #32
   23904:	cmp	r0, #94	; 0x5e
   23908:	bhi	23aa4 <__assert_fail@plt+0x11a18>
   2390c:	add	r1, pc, #0
   23910:	ldr	pc, [r1, r0, lsl #2]
   23914:	muleq	r2, r0, sl
   23918:	muleq	r2, r0, sl
   2391c:	muleq	r2, r0, sl
   23920:	muleq	r2, r0, sl
   23924:	andeq	r3, r2, r4, lsr #21
   23928:	muleq	r2, r0, sl
   2392c:	muleq	r2, r0, sl
   23930:	muleq	r2, r0, sl
   23934:	muleq	r2, r0, sl
   23938:	muleq	r2, r0, sl
   2393c:	muleq	r2, r0, sl
   23940:	muleq	r2, r0, sl
   23944:	muleq	r2, r0, sl
   23948:	muleq	r2, r0, sl
   2394c:	muleq	r2, r0, sl
   23950:	muleq	r2, r0, sl
   23954:	muleq	r2, r0, sl
   23958:	muleq	r2, r0, sl
   2395c:	muleq	r2, r0, sl
   23960:	muleq	r2, r0, sl
   23964:	muleq	r2, r0, sl
   23968:	muleq	r2, r0, sl
   2396c:	muleq	r2, r0, sl
   23970:	muleq	r2, r0, sl
   23974:	muleq	r2, r0, sl
   23978:	muleq	r2, r0, sl
   2397c:	muleq	r2, r0, sl
   23980:	muleq	r2, r0, sl
   23984:	muleq	r2, r0, sl
   23988:	muleq	r2, r0, sl
   2398c:	muleq	r2, r0, sl
   23990:	muleq	r2, r0, sl
   23994:	andeq	r3, r2, r4, lsr #21
   23998:	muleq	r2, r0, sl
   2399c:	muleq	r2, r0, sl
   239a0:	muleq	r2, r0, sl
   239a4:	muleq	r2, r0, sl
   239a8:	muleq	r2, r0, sl
   239ac:	muleq	r2, r0, sl
   239b0:	muleq	r2, r0, sl
   239b4:	muleq	r2, r0, sl
   239b8:	muleq	r2, r0, sl
   239bc:	muleq	r2, r0, sl
   239c0:	muleq	r2, r0, sl
   239c4:	muleq	r2, r0, sl
   239c8:	muleq	r2, r0, sl
   239cc:	muleq	r2, r0, sl
   239d0:	muleq	r2, r0, sl
   239d4:	muleq	r2, r0, sl
   239d8:	muleq	r2, r0, sl
   239dc:	muleq	r2, r0, sl
   239e0:	muleq	r2, r0, sl
   239e4:	muleq	r2, r0, sl
   239e8:	muleq	r2, r0, sl
   239ec:	muleq	r2, r0, sl
   239f0:	muleq	r2, r0, sl
   239f4:	muleq	r2, r0, sl
   239f8:	muleq	r2, r0, sl
   239fc:	muleq	r2, r0, sl
   23a00:	muleq	r2, r0, sl
   23a04:	muleq	r2, r0, sl
   23a08:	muleq	r2, r0, sl
   23a0c:	muleq	r2, r0, sl
   23a10:	muleq	r2, r0, sl
   23a14:	andeq	r3, r2, r4, lsr #21
   23a18:	muleq	r2, r0, sl
   23a1c:	muleq	r2, r0, sl
   23a20:	muleq	r2, r0, sl
   23a24:	muleq	r2, r0, sl
   23a28:	muleq	r2, r0, sl
   23a2c:	muleq	r2, r0, sl
   23a30:	muleq	r2, r0, sl
   23a34:	muleq	r2, r0, sl
   23a38:	muleq	r2, r0, sl
   23a3c:	muleq	r2, r0, sl
   23a40:	muleq	r2, r0, sl
   23a44:	muleq	r2, r0, sl
   23a48:	muleq	r2, r0, sl
   23a4c:	muleq	r2, r0, sl
   23a50:	muleq	r2, r0, sl
   23a54:	muleq	r2, r0, sl
   23a58:	muleq	r2, r0, sl
   23a5c:	muleq	r2, r0, sl
   23a60:	muleq	r2, r0, sl
   23a64:	muleq	r2, r0, sl
   23a68:	muleq	r2, r0, sl
   23a6c:	muleq	r2, r0, sl
   23a70:	muleq	r2, r0, sl
   23a74:	muleq	r2, r0, sl
   23a78:	muleq	r2, r0, sl
   23a7c:	muleq	r2, r0, sl
   23a80:	muleq	r2, r0, sl
   23a84:	muleq	r2, r0, sl
   23a88:	muleq	r2, r0, sl
   23a8c:	muleq	r2, r0, sl
   23a90:	add	r5, r5, #1
   23a94:	add	r4, r4, #1
   23a98:	cmp	r4, r7
   23a9c:	bcc	238fc <__assert_fail@plt+0x11870>
   23aa0:	b	23b8c <__assert_fail@plt+0x11b00>
   23aa4:	str	r2, [sp]
   23aa8:	str	r3, [sp, #12]
   23aac:	str	r3, [sp, #8]
   23ab0:	sub	r2, r7, r4
   23ab4:	mov	r0, r8
   23ab8:	mov	r1, r4
   23abc:	mov	r3, r9
   23ac0:	bl	2309c <__assert_fail@plt+0x11010>
   23ac4:	cmp	r0, #0
   23ac8:	beq	23ae4 <__assert_fail@plt+0x11a58>
   23acc:	mov	r6, r0
   23ad0:	cmn	r0, #2
   23ad4:	beq	23b20 <__assert_fail@plt+0x11a94>
   23ad8:	cmn	r6, #1
   23adc:	bne	23ae8 <__assert_fail@plt+0x11a5c>
   23ae0:	b	23b34 <__assert_fail@plt+0x11aa8>
   23ae4:	mov	r6, #1
   23ae8:	ldr	r0, [sp, #4]
   23aec:	bl	11c00 <wcwidth@plt>
   23af0:	cmp	r0, #0
   23af4:	bmi	23ba8 <__assert_fail@plt+0x11b1c>
   23af8:	sub	r1, sl, r5
   23afc:	cmp	r0, r1
   23b00:	bgt	23b98 <__assert_fail@plt+0x11b0c>
   23b04:	add	r5, r0, r5
   23b08:	mov	r0, r9
   23b0c:	add	r4, r4, r6
   23b10:	bl	11c78 <mbsinit@plt>
   23b14:	cmp	r0, #0
   23b18:	beq	23ab0 <__assert_fail@plt+0x11a24>
   23b1c:	b	23b48 <__assert_fail@plt+0x11abc>
   23b20:	ldr	r0, [sp]
   23b24:	mov	r4, r7
   23b28:	cmp	r0, #0
   23b2c:	beq	23b44 <__assert_fail@plt+0x11ab8>
   23b30:	b	23ba8 <__assert_fail@plt+0x11b1c>
   23b34:	ldr	r0, [sp]
   23b38:	cmp	r0, #0
   23b3c:	bne	23ba8 <__assert_fail@plt+0x11b1c>
   23b40:	add	r4, r4, #1
   23b44:	add	r5, r5, #1
   23b48:	ldr	r2, [sp]
   23b4c:	mov	r3, #0
   23b50:	cmp	r4, r7
   23b54:	bcc	238fc <__assert_fail@plt+0x11870>
   23b58:	b	23b8c <__assert_fail@plt+0x11b00>
   23b5c:	mov	r5, #0
   23b60:	ldrb	r1, [r4, r5]
   23b64:	add	r1, r0, r1, lsl #1
   23b68:	ldrb	r1, [r1, #1]
   23b6c:	tst	r1, #64	; 0x40
   23b70:	beq	23ba8 <__assert_fail@plt+0x11b1c>
   23b74:	cmn	r5, #-2147483647	; 0x80000001
   23b78:	beq	23b98 <__assert_fail@plt+0x11b0c>
   23b7c:	add	r5, r5, #1
   23b80:	add	r1, r4, r5
   23b84:	cmp	r1, r7
   23b88:	bcc	23b60 <__assert_fail@plt+0x11ad4>
   23b8c:	mov	r0, r5
   23b90:	sub	sp, fp, #28
   23b94:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   23b98:	mvn	r5, #-2147483648	; 0x80000000
   23b9c:	mov	r0, r5
   23ba0:	sub	sp, fp, #28
   23ba4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   23ba8:	mvn	r5, #0
   23bac:	mov	r0, r5
   23bb0:	sub	sp, fp, #28
   23bb4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   23bb8:	mov	r3, r2
   23bbc:	add	r2, r0, r1, lsl #2
   23bc0:	b	23bc4 <__assert_fail@plt+0x11b38>
   23bc4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   23bc8:	add	fp, sp, #28
   23bcc:	sub	sp, sp, #44	; 0x2c
   23bd0:	mov	r5, r3
   23bd4:	mov	r8, r0
   23bd8:	cmp	r1, #2
   23bdc:	bhi	23c08 <__assert_fail@plt+0x11b7c>
   23be0:	bne	23c00 <__assert_fail@plt+0x11b74>
   23be4:	ldm	r8, {r6, r7}
   23be8:	mov	r1, r7
   23bec:	mov	r0, r6
   23bf0:	blx	r5
   23bf4:	cmp	r0, #1
   23bf8:	strge	r7, [r8]
   23bfc:	strge	r6, [r8, #4]
   23c00:	sub	sp, fp, #28
   23c04:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   23c08:	lsr	r9, r1, #1
   23c0c:	mov	r7, r1
   23c10:	sub	r1, r1, r1, lsr #1
   23c14:	mov	r3, r5
   23c18:	mov	sl, r2
   23c1c:	add	r4, r8, r9, lsl #2
   23c20:	mov	r0, r4
   23c24:	bl	23bc4 <__assert_fail@plt+0x11b38>
   23c28:	cmp	r7, #3
   23c2c:	str	r8, [sp, #28]
   23c30:	str	r9, [sp, #36]	; 0x24
   23c34:	str	sl, [sp, #32]
   23c38:	bne	23c48 <__assert_fail@plt+0x11bbc>
   23c3c:	ldr	r6, [r8]
   23c40:	str	r6, [sl]
   23c44:	b	23d70 <__assert_fail@plt+0x11ce4>
   23c48:	str	r4, [sp, #8]
   23c4c:	lsr	r4, r7, #2
   23c50:	sub	r1, r9, r7, lsr #2
   23c54:	mov	r2, sl
   23c58:	mov	r3, r5
   23c5c:	str	r7, [sp, #12]
   23c60:	add	r0, r8, r4, lsl #2
   23c64:	bl	23bc4 <__assert_fail@plt+0x11b38>
   23c68:	mov	r0, r8
   23c6c:	mov	r1, r4
   23c70:	mov	r2, sl
   23c74:	mov	r3, r5
   23c78:	str	r5, [fp, #-32]	; 0xffffffe0
   23c7c:	bl	23bc4 <__assert_fail@plt+0x11b38>
   23c80:	ldr	r6, [r8, r4, lsl #2]
   23c84:	rsb	r0, r9, #1
   23c88:	add	r2, r8, #4
   23c8c:	mov	r1, #0
   23c90:	mov	r3, r4
   23c94:	mov	r5, sl
   23c98:	str	r4, [sp, #20]
   23c9c:	str	r0, [sp, #4]
   23ca0:	str	r2, [sp]
   23ca4:	ldr	r8, [r8, r1, lsl #2]
   23ca8:	add	sl, r2, r3, lsl #2
   23cac:	add	r9, r0, r3
   23cb0:	mvn	r7, #3
   23cb4:	mov	r4, #0
   23cb8:	str	r3, [sp, #16]
   23cbc:	str	r1, [sp, #24]
   23cc0:	ldr	r2, [fp, #-32]	; 0xffffffe0
   23cc4:	mov	r0, r8
   23cc8:	mov	r1, r6
   23ccc:	blx	r2
   23cd0:	cmp	r0, #0
   23cd4:	ble	23cf4 <__assert_fail@plt+0x11c68>
   23cd8:	adds	r0, r9, r4
   23cdc:	str	r6, [r5, r4, lsl #2]
   23ce0:	beq	23d30 <__assert_fail@plt+0x11ca4>
   23ce4:	ldr	r6, [sl, r4, lsl #2]
   23ce8:	sub	r7, r7, #4
   23cec:	add	r4, r4, #1
   23cf0:	b	23cc0 <__assert_fail@plt+0x11c34>
   23cf4:	ldr	r1, [sp, #24]
   23cf8:	ldr	r0, [sp, #20]
   23cfc:	mov	r2, r5
   23d00:	str	r8, [r5, r4, lsl #2]
   23d04:	add	r1, r1, #1
   23d08:	cmp	r1, r0
   23d0c:	beq	23e4c <__assert_fail@plt+0x11dc0>
   23d10:	ldr	r3, [sp, #16]
   23d14:	sub	r2, r2, r7
   23d18:	ldr	r8, [sp, #28]
   23d1c:	ldr	r0, [sp, #4]
   23d20:	mov	r5, r2
   23d24:	ldr	r2, [sp]
   23d28:	add	r3, r3, r4
   23d2c:	b	23ca4 <__assert_fail@plt+0x11c18>
   23d30:	ldr	r8, [sp, #28]
   23d34:	ldr	r9, [sp, #36]	; 0x24
   23d38:	ldr	r3, [sp, #24]
   23d3c:	mov	r2, r5
   23d40:	add	r0, r2, r4, lsl #2
   23d44:	ldr	r2, [sp, #20]
   23d48:	add	r1, r8, r3, lsl #2
   23d4c:	add	r0, r0, #4
   23d50:	sub	r2, r2, r3
   23d54:	lsl	r2, r2, #2
   23d58:	bl	11c60 <memcpy@plt>
   23d5c:	ldr	r0, [sp, #32]
   23d60:	ldr	r7, [sp, #12]
   23d64:	ldr	r4, [sp, #8]
   23d68:	ldr	r5, [fp, #-32]	; 0xffffffe0
   23d6c:	ldr	r6, [r0]
   23d70:	rsb	r0, r7, #1
   23d74:	ldr	r7, [r4]
   23d78:	mov	r1, #0
   23d7c:	add	r2, r8, #4
   23d80:	mov	r3, r9
   23d84:	str	r1, [fp, #-32]	; 0xffffffe0
   23d88:	mov	r1, #0
   23d8c:	str	r0, [sp, #16]
   23d90:	str	r2, [sp, #12]
   23d94:	add	r8, r8, r1, lsl #2
   23d98:	add	r4, r2, r3, lsl #2
   23d9c:	add	sl, r0, r3
   23da0:	mov	r9, #0
   23da4:	str	r1, [sp, #20]
   23da8:	str	r3, [sp, #24]
   23dac:	mov	r0, r6
   23db0:	mov	r1, r7
   23db4:	blx	r5
   23db8:	cmp	r0, #0
   23dbc:	ble	23dd8 <__assert_fail@plt+0x11d4c>
   23dc0:	adds	r0, sl, r9
   23dc4:	str	r7, [r8, r9, lsl #2]
   23dc8:	beq	23e20 <__assert_fail@plt+0x11d94>
   23dcc:	ldr	r7, [r4, r9, lsl #2]
   23dd0:	add	r9, r9, #1
   23dd4:	b	23dac <__assert_fail@plt+0x11d20>
   23dd8:	ldr	r1, [fp, #-32]	; 0xffffffe0
   23ddc:	ldr	r0, [sp, #36]	; 0x24
   23de0:	str	r6, [r8, r9, lsl #2]
   23de4:	ldr	r8, [sp, #28]
   23de8:	add	r1, r1, #1
   23dec:	cmp	r1, r0
   23df0:	beq	23c00 <__assert_fail@plt+0x11b74>
   23df4:	ldr	r0, [sp, #32]
   23df8:	ldr	r3, [sp, #24]
   23dfc:	str	r1, [fp, #-32]	; 0xffffffe0
   23e00:	ldr	r2, [sp, #12]
   23e04:	ldr	r6, [r0, r1, lsl #2]
   23e08:	ldr	r0, [sp, #20]
   23e0c:	add	r3, r3, r9
   23e10:	add	r0, r0, r9
   23e14:	add	r1, r0, #1
   23e18:	ldr	r0, [sp, #16]
   23e1c:	b	23d94 <__assert_fail@plt+0x11d08>
   23e20:	ldr	r0, [sp, #32]
   23e24:	ldr	r2, [fp, #-32]	; 0xffffffe0
   23e28:	add	r1, r0, r2, lsl #2
   23e2c:	ldr	r0, [sp, #36]	; 0x24
   23e30:	sub	r0, r0, r2
   23e34:	lsl	r2, r0, #2
   23e38:	add	r0, r8, r9, lsl #2
   23e3c:	add	r0, r0, #4
   23e40:	sub	sp, fp, #28
   23e44:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   23e48:	b	11c60 <memcpy@plt>
   23e4c:	ldr	r9, [sp, #36]	; 0x24
   23e50:	ldr	r0, [sp, #16]
   23e54:	str	r9, [sp, #20]
   23e58:	add	r3, r0, r4
   23e5c:	ldr	r8, [sp, #28]
   23e60:	b	23d40 <__assert_fail@plt+0x11cb4>
   23e64:	push	{fp, lr}
   23e68:	mov	fp, sp
   23e6c:	sub	sp, sp, #24
   23e70:	mvn	ip, #0
   23e74:	str	ip, [sp, #8]
   23e78:	mov	ip, #0
   23e7c:	str	ip, [sp, #4]
   23e80:	str	ip, [sp]
   23e84:	ldr	ip, [fp, #12]
   23e88:	str	ip, [sp, #16]
   23e8c:	ldr	ip, [fp, #8]
   23e90:	str	ip, [sp, #12]
   23e94:	bl	23ea0 <__assert_fail@plt+0x11e14>
   23e98:	mov	sp, fp
   23e9c:	pop	{fp, pc}
   23ea0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   23ea4:	add	fp, sp, #28
   23ea8:	sub	sp, sp, #140	; 0x8c
   23eac:	sub	sp, sp, #1024	; 0x400
   23eb0:	mov	r4, r3
   23eb4:	mov	r6, r2
   23eb8:	str	r1, [sp, #104]	; 0x68
   23ebc:	str	r0, [sp, #108]	; 0x6c
   23ec0:	bl	11ed0 <__errno_location@plt>
   23ec4:	mov	r2, r4
   23ec8:	ldrb	r3, [r6]
   23ecc:	str	r0, [sp, #76]	; 0x4c
   23ed0:	ldr	r0, [r0]
   23ed4:	movw	r5, #54434	; 0xd4a2
   23ed8:	ldr	r1, [r2, #8]!
   23edc:	movt	r5, #2
   23ee0:	str	r0, [sp, #72]	; 0x48
   23ee4:	cmp	r1, #0
   23ee8:	mov	r7, r1
   23eec:	movweq	r7, #12
   23ef0:	cmp	r1, #12
   23ef4:	subgt	r7, r1, #12
   23ef8:	ldr	r1, [r2, #32]
   23efc:	cmp	r1, #0
   23f00:	movne	r5, r1
   23f04:	cmp	r3, #0
   23f08:	beq	25a60 <__assert_fail@plt+0x139d4>
   23f0c:	sub	r0, fp, #48	; 0x30
   23f10:	mvn	r1, #13
   23f14:	str	r2, [sp, #60]	; 0x3c
   23f18:	str	r7, [sp, #56]	; 0x38
   23f1c:	ldr	r7, [fp, #16]
   23f20:	ldr	ip, [sp, #108]	; 0x6c
   23f24:	sub	r9, r5, #2
   23f28:	mov	sl, r6
   23f2c:	mov	lr, #0
   23f30:	mov	r8, #-2147483648	; 0x80000000
   23f34:	str	r5, [sp, #64]	; 0x40
   23f38:	str	r4, [sp, #88]	; 0x58
   23f3c:	sub	r1, r1, r0
   23f40:	str	r9, [sp, #32]
   23f44:	str	r1, [sp, #44]	; 0x2c
   23f48:	add	r1, sp, #112	; 0x70
   23f4c:	add	r1, r1, #1
   23f50:	str	r1, [sp, #48]	; 0x30
   23f54:	sub	r1, fp, #53	; 0x35
   23f58:	add	r2, r1, #3
   23f5c:	add	r1, r1, #2
   23f60:	str	r1, [sp, #84]	; 0x54
   23f64:	add	r1, r4, #12
   23f68:	str	r2, [sp, #68]	; 0x44
   23f6c:	str	r1, [sp, #52]	; 0x34
   23f70:	sub	r1, r0, #2
   23f74:	str	r1, [sp, #28]
   23f78:	add	r1, r0, #8
   23f7c:	str	r1, [sp, #24]
   23f80:	add	r1, r0, #13
   23f84:	add	r0, r0, #14
   23f88:	str	r0, [sp, #80]	; 0x50
   23f8c:	mvn	r0, r0
   23f90:	str	r1, [sp, #40]	; 0x28
   23f94:	str	r0, [sp, #36]	; 0x24
   23f98:	uxtb	r1, r3
   23f9c:	cmp	r1, #37	; 0x25
   23fa0:	beq	23fcc <__assert_fail@plt+0x11f40>
   23fa4:	b	24078 <__assert_fail@plt+0x11fec>
   23fa8:	mov	ip, #0
   23fac:	add	lr, r5, lr
   23fb0:	ldrb	r3, [sl, #1]!
   23fb4:	mvn	r7, #0
   23fb8:	cmp	r3, #0
   23fbc:	beq	25a68 <__assert_fail@plt+0x139dc>
   23fc0:	uxtb	r1, r3
   23fc4:	cmp	r1, #37	; 0x25
   23fc8:	bne	24078 <__assert_fail@plt+0x11fec>
   23fcc:	ldr	r0, [fp, #8]
   23fd0:	mov	r6, #0
   23fd4:	mov	r9, #0
   23fd8:	str	sl, [sp, #100]	; 0x64
   23fdc:	mov	r4, r0
   23fe0:	add	r1, sl, #2
   23fe4:	add	sl, sl, #1
   23fe8:	ldrb	r0, [sl]
   23fec:	sub	r2, r0, #35	; 0x23
   23ff0:	cmp	r2, #13
   23ff4:	bhi	24038 <__assert_fail@plt+0x11fac>
   23ff8:	add	r3, pc, #0
   23ffc:	ldr	pc, [r3, r2, lsl #2]
   24000:	andeq	r4, r2, r0, ror r0
   24004:	strdeq	r4, [r2], -r4	; <UNPREDICTABLE>
   24008:	strdeq	r4, [r2], -r4	; <UNPREDICTABLE>
   2400c:	strdeq	r4, [r2], -r4	; <UNPREDICTABLE>
   24010:	strdeq	r4, [r2], -r4	; <UNPREDICTABLE>
   24014:	strdeq	r4, [r2], -r4	; <UNPREDICTABLE>
   24018:	strdeq	r4, [r2], -r4	; <UNPREDICTABLE>
   2401c:	strdeq	r4, [r2], -r4	; <UNPREDICTABLE>
   24020:	andeq	r4, r2, r0, asr #32
   24024:	strdeq	r4, [r2], -r4	; <UNPREDICTABLE>
   24028:	andeq	r4, r2, r0, asr #32
   2402c:	strdeq	r4, [r2], -r4	; <UNPREDICTABLE>
   24030:	strdeq	r4, [r2], -r4	; <UNPREDICTABLE>
   24034:	andeq	r4, r2, r0, asr #32
   24038:	cmp	r0, #95	; 0x5f
   2403c:	bne	24060 <__assert_fail@plt+0x11fd4>
   24040:	add	r1, r1, #1
   24044:	add	sl, sl, #1
   24048:	mov	r9, r0
   2404c:	ldrb	r0, [sl]
   24050:	sub	r2, r0, #35	; 0x23
   24054:	cmp	r2, #13
   24058:	bls	23ff8 <__assert_fail@plt+0x11f6c>
   2405c:	b	24038 <__assert_fail@plt+0x11fac>
   24060:	cmp	r0, #94	; 0x5e
   24064:	bne	240f4 <__assert_fail@plt+0x12068>
   24068:	mov	r4, #1
   2406c:	b	23fe0 <__assert_fail@plt+0x11f54>
   24070:	mov	r6, #1
   24074:	b	23fe0 <__assert_fail@plt+0x11f54>
   24078:	ldr	r0, [sp, #104]	; 0x68
   2407c:	bic	r1, r7, r7, asr #31
   24080:	cmp	r1, #1
   24084:	mov	r5, r1
   24088:	movls	r5, #1
   2408c:	sub	r2, r0, lr
   24090:	cmp	r5, r2
   24094:	bcs	25a94 <__assert_fail@plt+0x13a08>
   24098:	cmp	ip, #0
   2409c:	beq	23fa8 <__assert_fail@plt+0x11f1c>
   240a0:	cmp	r1, #2
   240a4:	bcc	240d8 <__assert_fail@plt+0x1204c>
   240a8:	sub	r4, r1, #1
   240ac:	mov	r0, ip
   240b0:	mov	r1, #32
   240b4:	mov	r7, lr
   240b8:	mov	r6, ip
   240bc:	mov	r2, r4
   240c0:	bl	11ef4 <memset@plt>
   240c4:	ldrb	r3, [sl]
   240c8:	mov	ip, r6
   240cc:	mov	lr, r7
   240d0:	add	ip, r6, r4
   240d4:	mov	r8, #-2147483648	; 0x80000000
   240d8:	strb	r3, [ip], #1
   240dc:	add	lr, r5, lr
   240e0:	ldrb	r3, [sl, #1]!
   240e4:	mvn	r7, #0
   240e8:	cmp	r3, #0
   240ec:	bne	23fc0 <__assert_fail@plt+0x11f34>
   240f0:	b	25a68 <__assert_fail@plt+0x139dc>
   240f4:	sub	r2, r0, #48	; 0x30
   240f8:	cmp	r2, #9
   240fc:	bhi	2417c <__assert_fail@plt+0x120f0>
   24100:	movw	r5, #52428	; 0xcccc
   24104:	mov	r7, #0
   24108:	movt	r5, #3276	; 0xccc
   2410c:	cmn	r7, #1
   24110:	bgt	24148 <__assert_fail@plt+0x120bc>
   24114:	b	24154 <__assert_fail@plt+0x120c8>
   24118:	add	r2, r7, r7, lsl #2
   2411c:	lsl	r3, r2, #1
   24120:	uxtab	r0, r3, r0
   24124:	sub	r7, r0, #48	; 0x30
   24128:	cmp	r7, r2, lsl #1
   2412c:	mvnvs	r7, #-2147483648	; 0x80000000
   24130:	ldrb	r0, [r1], #1
   24134:	sub	r2, r0, #48	; 0x30
   24138:	cmp	r2, #10
   2413c:	bcs	24178 <__assert_fail@plt+0x120ec>
   24140:	cmn	r7, #1
   24144:	ble	24154 <__assert_fail@plt+0x120c8>
   24148:	cmp	r7, r5
   2414c:	ble	24118 <__assert_fail@plt+0x1208c>
   24150:	b	24164 <__assert_fail@plt+0x120d8>
   24154:	beq	24118 <__assert_fail@plt+0x1208c>
   24158:	sdiv	r2, r8, r7
   2415c:	cmp	r2, #10
   24160:	bge	24118 <__assert_fail@plt+0x1208c>
   24164:	mvn	r7, #-2147483648	; 0x80000000
   24168:	ldrb	r0, [r1], #1
   2416c:	sub	r2, r0, #48	; 0x30
   24170:	cmp	r2, #10
   24174:	bcc	24140 <__assert_fail@plt+0x120b4>
   24178:	sub	sl, r1, #1
   2417c:	cmp	r0, #79	; 0x4f
   24180:	str	ip, [sp, #108]	; 0x6c
   24184:	str	r4, [sp, #96]	; 0x60
   24188:	cmpne	r0, #69	; 0x45
   2418c:	bne	241a0 <__assert_fail@plt+0x12114>
   24190:	ldrb	r1, [sl, #1]!
   24194:	cmp	r1, #122	; 0x7a
   24198:	bls	241b0 <__assert_fail@plt+0x12124>
   2419c:	b	24cc0 <__assert_fail@plt+0x12c34>
   241a0:	mov	r1, r0
   241a4:	mov	r0, #0
   241a8:	cmp	r1, #122	; 0x7a
   241ac:	bhi	24cc0 <__assert_fail@plt+0x12c34>
   241b0:	movw	r4, #53414	; 0xd0a6
   241b4:	add	r2, pc, #12
   241b8:	mov	r5, #0
   241bc:	mvn	r8, #0
   241c0:	movt	r4, #2
   241c4:	ldr	pc, [r2, r1, lsl #2]
   241c8:	andeq	r4, r2, r0, lsr r5
   241cc:	andeq	r4, r2, r0, asr #25
   241d0:	andeq	r4, r2, r0, asr #25
   241d4:	andeq	r4, r2, r0, asr #25
   241d8:	andeq	r4, r2, r0, asr #25
   241dc:	andeq	r4, r2, r0, asr #25
   241e0:	andeq	r4, r2, r0, asr #25
   241e4:	andeq	r4, r2, r0, asr #25
   241e8:	andeq	r4, r2, r0, asr #25
   241ec:	andeq	r4, r2, r0, asr #25
   241f0:	andeq	r4, r2, r0, asr #25
   241f4:	andeq	r4, r2, r0, asr #25
   241f8:	andeq	r4, r2, r0, asr #25
   241fc:	andeq	r4, r2, r0, asr #25
   24200:	andeq	r4, r2, r0, asr #25
   24204:	andeq	r4, r2, r0, asr #25
   24208:	andeq	r4, r2, r0, asr #25
   2420c:	andeq	r4, r2, r0, asr #25
   24210:	andeq	r4, r2, r0, asr #25
   24214:	andeq	r4, r2, r0, asr #25
   24218:	andeq	r4, r2, r0, asr #25
   2421c:	andeq	r4, r2, r0, asr #25
   24220:	andeq	r4, r2, r0, asr #25
   24224:	andeq	r4, r2, r0, asr #25
   24228:	andeq	r4, r2, r0, asr #25
   2422c:	andeq	r4, r2, r0, asr #25
   24230:	andeq	r4, r2, r0, asr #25
   24234:	andeq	r4, r2, r0, asr #25
   24238:	andeq	r4, r2, r0, asr #25
   2423c:	andeq	r4, r2, r0, asr #25
   24240:	andeq	r4, r2, r0, asr #25
   24244:	andeq	r4, r2, r0, asr #25
   24248:	andeq	r4, r2, r0, asr #25
   2424c:	andeq	r4, r2, r0, asr #25
   24250:	andeq	r4, r2, r0, asr #25
   24254:	andeq	r4, r2, r0, asr #25
   24258:	andeq	r4, r2, r0, asr #25
   2425c:	andeq	r4, r2, r0, lsr #10
   24260:	andeq	r4, r2, r0, asr #25
   24264:	andeq	r4, r2, r0, asr #25
   24268:	andeq	r4, r2, r0, asr #25
   2426c:	andeq	r4, r2, r0, asr #25
   24270:	andeq	r4, r2, r0, asr #25
   24274:	andeq	r4, r2, r0, asr #25
   24278:	andeq	r4, r2, r0, asr #25
   2427c:	andeq	r4, r2, r0, asr #25
   24280:	andeq	r4, r2, r0, asr #25
   24284:	andeq	r4, r2, r0, asr #25
   24288:	andeq	r4, r2, r0, asr #25
   2428c:	andeq	r4, r2, r0, asr #25
   24290:	andeq	r4, r2, r0, asr #25
   24294:	andeq	r4, r2, r0, asr #25
   24298:	andeq	r4, r2, r0, asr #25
   2429c:	andeq	r4, r2, r0, asr #25
   242a0:	andeq	r4, r2, r0, asr #25
   242a4:	andeq	r4, r2, r0, asr #25
   242a8:	andeq	r4, r2, r0, asr #25
   242ac:	andeq	r4, r2, r0, asr #25
   242b0:	andeq	r4, r2, r8, lsr r5
   242b4:	andeq	r4, r2, r0, asr #25
   242b8:	andeq	r4, r2, r0, asr #25
   242bc:	andeq	r4, r2, r0, asr #25
   242c0:	andeq	r4, r2, r0, asr #25
   242c4:	andeq	r4, r2, r0, asr #25
   242c8:	andeq	r4, r2, r0, asr #25
   242cc:			; <UNDEFINED> instruction: 0x000245b4
   242d0:	ldrdeq	r4, [r2], -r4	; <UNPREDICTABLE>
   242d4:	strdeq	r4, [r2], -r4	; <UNPREDICTABLE>
   242d8:	andeq	r4, r2, r8, lsl #12
   242dc:	andeq	r4, r2, r0, asr #25
   242e0:	andeq	r4, r2, ip, lsl r6
   242e4:			; <UNDEFINED> instruction: 0x000243b4
   242e8:	andeq	r4, r2, r8, asr #12
   242ec:	andeq	r4, r2, ip, asr r6
   242f0:	andeq	r4, r2, r0, asr #25
   242f4:	andeq	r4, r2, r0, asr #25
   242f8:	andeq	r4, r2, r0, asr #25
   242fc:	andeq	r4, r2, r0, ror r6
   24300:	andeq	r4, r2, r4, lsl #13
   24304:	andeq	r4, r2, r0, asr #25
   24308:	andeq	r4, r2, r8, lsl #14
   2430c:	andeq	r4, r2, r0, asr #25
   24310:	andeq	r4, r2, r4, asr #14
   24314:	andeq	r4, r2, r8, lsr #14
   24318:	andeq	r4, r2, ip, lsr r7
   2431c:	andeq	r4, r2, ip, ror #15
   24320:			; <UNDEFINED> instruction: 0x000243b4
   24324:	andeq	r4, r2, r8, lsl r8
   24328:	andeq	r4, r2, r4, ror #16
   2432c:	andeq	r4, r2, r8, ror r8
   24330:			; <UNDEFINED> instruction: 0x000248b4
   24334:	andeq	r4, r2, r0, asr #25
   24338:	andeq	r4, r2, r0, asr #25
   2433c:	andeq	r4, r2, r0, asr #25
   24340:	andeq	r4, r2, r0, asr #25
   24344:	andeq	r4, r2, r0, asr #25
   24348:	andeq	r4, r2, r0, asr #25
   2434c:	andeq	r4, r2, r0, lsr #18
   24350:	andeq	r4, r2, r4, lsl #10
   24354:	andeq	r4, r2, r0, asr #18
   24358:	andeq	r4, r2, r4, asr r9
   2435c:	andeq	r4, r2, r8, ror #18
   24360:	andeq	r4, r2, r0, asr #25
   24364:			; <UNDEFINED> instruction: 0x000243b4
   24368:	andeq	r4, r2, r4, lsl #10
   2436c:	andeq	r4, r2, r0, asr #25
   24370:	andeq	r4, r2, r8, ror r9
   24374:	muleq	r2, r0, r9
   24378:	andeq	r4, r2, r4, lsr #19
   2437c:	andeq	r4, r2, ip, asr #21
   24380:	strdeq	r4, [r2], -r4	; <UNPREDICTABLE>
   24384:	andeq	r4, r2, r0, asr #25
   24388:	andeq	r4, r2, ip, lsl #14
   2438c:	andeq	r4, r2, r0, asr fp
   24390:			; <UNDEFINED> instruction: 0x000257bc
   24394:	andeq	r4, r2, r0, ror fp
   24398:	andeq	r4, r2, r0, lsl ip
   2439c:	andeq	r4, r2, ip, ror #24
   243a0:	andeq	r4, r2, r0, asr #25
   243a4:	andeq	r4, r2, r0, lsr #25
   243a8:			; <UNDEFINED> instruction: 0x00024cb8
   243ac:	andeq	r4, r2, ip, asr #28
   243b0:	andeq	r4, r2, r4, ror #10
   243b4:	cmp	r0, #69	; 0x45
   243b8:	beq	24cc0 <__assert_fail@plt+0x12c34>
   243bc:	ldr	r2, [sp, #88]	; 0x58
   243c0:	movw	ip, #9363	; 0x2493
   243c4:	str	lr, [sp, #92]	; 0x5c
   243c8:	movw	r6, #382	; 0x17e
   243cc:	movt	ip, #37449	; 0x9249
   243d0:	ldr	r8, [r2, #24]
   243d4:	ldr	r5, [r2, #28]
   243d8:	ldr	lr, [r2, #20]
   243dc:	sub	r2, r5, r8
   243e0:	cmp	lr, #0
   243e4:	add	r2, r2, r6
   243e8:	smmla	r4, r2, ip, r2
   243ec:	asr	r6, r4, #2
   243f0:	add	r4, r6, r4, lsr #31
   243f4:	rsb	r4, r4, r4, lsl #3
   243f8:	sub	r2, r4, r2
   243fc:	add	r2, r5, r2
   24400:	add	r4, r2, #3
   24404:	mvn	r2, #99	; 0x63
   24408:	movwmi	r2, #300	; 0x12c
   2440c:	add	r2, r2, lr
   24410:	cmn	r4, #1
   24414:	ble	2500c <__assert_fail@plt+0x12f80>
   24418:	movw	r6, #365	; 0x16d
   2441c:	tst	r2, #3
   24420:	bne	2446c <__assert_fail@plt+0x123e0>
   24424:	movw	r6, #34079	; 0x851f
   24428:	mov	ip, #100	; 0x64
   2442c:	movt	r6, #20971	; 0x51eb
   24430:	smmul	r6, r2, r6
   24434:	asr	r3, r6, #5
   24438:	add	r3, r3, r6, lsr #31
   2443c:	mls	ip, r3, ip, r2
   24440:	asr	r3, r6, #7
   24444:	add	r3, r3, r6, lsr #31
   24448:	mov	r6, #400	; 0x190
   2444c:	mls	r2, r3, r6, r2
   24450:	movw	r6, #365	; 0x16d
   24454:	cmp	r2, #0
   24458:	movweq	r6, #366	; 0x16e
   2445c:	cmp	ip, #0
   24460:	movw	ip, #9363	; 0x2493
   24464:	movt	ip, #37449	; 0x9249
   24468:	movwne	r6, #366	; 0x16e
   2446c:	add	r2, r8, r6
   24470:	movw	r3, #382	; 0x17e
   24474:	sub	r2, r5, r2
   24478:	add	r2, r2, r3
   2447c:	smmla	r2, r2, ip, r2
   24480:	asr	r3, r2, #2
   24484:	add	r2, r3, r2, lsr #31
   24488:	movw	r3, #379	; 0x17b
   2448c:	rsb	r2, r2, r2, lsl #3
   24490:	add	r2, r8, r2
   24494:	sub	r2, r2, r3
   24498:	cmn	r2, #1
   2449c:	movgt	r4, r2
   244a0:	mvn	r2, r2
   244a4:	lsr	r3, r2, #31
   244a8:	cmp	r1, #71	; 0x47
   244ac:	beq	25090 <__assert_fail@plt+0x13004>
   244b0:	cmp	r1, #103	; 0x67
   244b4:	bne	250c0 <__assert_fail@plt+0x13034>
   244b8:	movw	r2, #34079	; 0x851f
   244bc:	mov	ip, #2
   244c0:	movt	r2, #20971	; 0x51eb
   244c4:	smmul	r6, lr, r2
   244c8:	asr	r5, r6, #5
   244cc:	add	r6, r5, r6, lsr #31
   244d0:	mov	r5, #100	; 0x64
   244d4:	mls	r6, r6, r5, lr
   244d8:	add	r6, r3, r6
   244dc:	smmul	r2, r6, r2
   244e0:	asr	r4, r2, #5
   244e4:	add	r2, r4, r2, lsr #31
   244e8:	mls	r4, r2, r5, r6
   244ec:	mov	r2, #0
   244f0:	cmn	r4, #1
   244f4:	ble	254d4 <__assert_fail@plt+0x13448>
   244f8:	ldr	lr, [sp, #92]	; 0x5c
   244fc:	mov	r3, r4
   24500:	b	2551c <__assert_fail@plt+0x13490>
   24504:	ldr	r2, [sp, #96]	; 0x60
   24508:	mov	r5, #0
   2450c:	cmp	r0, #69	; 0x45
   24510:	orr	r2, r6, r2
   24514:	str	r2, [sp, #96]	; 0x60
   24518:	beq	24cc0 <__assert_fail@plt+0x12c34>
   2451c:	b	257bc <__assert_fail@plt+0x13730>
   24520:	ldr	r1, [sp, #100]	; 0x64
   24524:	sub	r0, sl, #1
   24528:	cmp	r0, r1
   2452c:	beq	25270 <__assert_fail@plt+0x131e4>
   24530:	sub	sl, sl, #1
   24534:	b	24cc0 <__assert_fail@plt+0x12c34>
   24538:	mov	r5, #1
   2453c:	ldrb	r2, [sl, r5]
   24540:	cmp	r2, #58	; 0x3a
   24544:	bne	24558 <__assert_fail@plt+0x124cc>
   24548:	add	r5, r5, #1
   2454c:	ldrb	r2, [sl, r5]
   24550:	cmp	r2, #58	; 0x3a
   24554:	beq	24548 <__assert_fail@plt+0x124bc>
   24558:	cmp	r2, #122	; 0x7a
   2455c:	bne	24cc0 <__assert_fail@plt+0x12c34>
   24560:	add	sl, sl, r5
   24564:	ldr	r3, [sp, #88]	; 0x58
   24568:	ldr	r2, [r3, #32]
   2456c:	cmp	r2, #0
   24570:	bmi	25870 <__assert_fail@plt+0x137e4>
   24574:	mov	r8, lr
   24578:	ldr	lr, [r3, #36]	; 0x24
   2457c:	cmp	lr, #0
   24580:	bmi	25338 <__assert_fail@plt+0x132ac>
   24584:	ldr	r3, [sp, #108]	; 0x6c
   24588:	mov	r2, #0
   2458c:	bne	25340 <__assert_fail@plt+0x132b4>
   24590:	ldr	r2, [sp, #64]	; 0x40
   24594:	ldrb	r2, [r2]
   24598:	sub	r2, r2, #45	; 0x2d
   2459c:	clz	r2, r2
   245a0:	lsr	r2, r2, #5
   245a4:	cmp	r5, #3
   245a8:	bls	25348 <__assert_fail@plt+0x132bc>
   245ac:	mov	lr, r8
   245b0:	b	24cc4 <__assert_fail@plt+0x12c38>
   245b4:	cmp	r0, #0
   245b8:	bne	24cc0 <__assert_fail@plt+0x12c34>
   245bc:	ldr	r1, [sp, #96]	; 0x60
   245c0:	mov	r5, #0
   245c4:	orr	r1, r6, r1
   245c8:	str	r1, [sp, #96]	; 0x60
   245cc:	mov	r1, #65	; 0x41
   245d0:	b	257bc <__assert_fail@plt+0x13730>
   245d4:	cmp	r0, #69	; 0x45
   245d8:	beq	24cc0 <__assert_fail@plt+0x12c34>
   245dc:	ldr	r1, [sp, #96]	; 0x60
   245e0:	mov	r5, #0
   245e4:	orr	r1, r6, r1
   245e8:	str	r1, [sp, #96]	; 0x60
   245ec:	mov	r1, #66	; 0x42
   245f0:	b	257bc <__assert_fail@plt+0x13730>
   245f4:	cmp	r0, #69	; 0x45
   245f8:	bne	250dc <__assert_fail@plt+0x13050>
   245fc:	mov	r5, #0
   24600:	mov	r1, #67	; 0x43
   24604:	b	257bc <__assert_fail@plt+0x13730>
   24608:	cmp	r0, #0
   2460c:	bne	24cc0 <__assert_fail@plt+0x12c34>
   24610:	movw	r4, #61388	; 0xefcc
   24614:	movt	r4, #2
   24618:	b	24744 <__assert_fail@plt+0x126b8>
   2461c:	cmp	r0, #0
   24620:	bne	24cc0 <__assert_fail@plt+0x12c34>
   24624:	movw	r4, #61397	; 0xefd5
   24628:	cmp	r9, #0
   2462c:	movt	r4, #2
   24630:	bne	254f4 <__assert_fail@plt+0x13468>
   24634:	cmp	r7, #0
   24638:	bpl	254f4 <__assert_fail@plt+0x13468>
   2463c:	mov	r9, #43	; 0x2b
   24640:	mov	r8, #4
   24644:	b	24744 <__assert_fail@plt+0x126b8>
   24648:	cmp	r0, #69	; 0x45
   2464c:	beq	24cc0 <__assert_fail@plt+0x12c34>
   24650:	ldr	r2, [sp, #60]	; 0x3c
   24654:	ldr	r3, [r2]
   24658:	b	249b8 <__assert_fail@plt+0x1292c>
   2465c:	mov	ip, #2
   24660:	cmp	r0, #69	; 0x45
   24664:	beq	24cc0 <__assert_fail@plt+0x12c34>
   24668:	ldr	r3, [sp, #56]	; 0x38
   2466c:	b	249bc <__assert_fail@plt+0x12930>
   24670:	cmp	r0, #69	; 0x45
   24674:	beq	24cc0 <__assert_fail@plt+0x12c34>
   24678:	ldr	r2, [sp, #88]	; 0x58
   2467c:	ldr	r3, [r2, #4]
   24680:	b	249b8 <__assert_fail@plt+0x1292c>
   24684:	cmp	r0, #69	; 0x45
   24688:	beq	24cc0 <__assert_fail@plt+0x12c34>
   2468c:	ldr	r1, [fp, #24]
   24690:	ldr	ip, [sp, #108]	; 0x6c
   24694:	cmp	r7, #1
   24698:	sub	r5, fp, #48	; 0x30
   2469c:	mov	r4, #9
   246a0:	mov	r0, #8
   246a4:	movwlt	r7, #9
   246a8:	mov	r8, r5
   246ac:	cmp	r7, r4
   246b0:	blt	246e0 <__assert_fail@plt+0x12654>
   246b4:	movw	r2, #26215	; 0x6667
   246b8:	cmp	r4, #2
   246bc:	movt	r2, #26214	; 0x6666
   246c0:	blt	25130 <__assert_fail@plt+0x130a4>
   246c4:	smmul	r3, r1, r2
   246c8:	asr	r6, r3, #2
   246cc:	add	r3, r6, r3, lsr #31
   246d0:	add	r3, r3, r3, lsl #2
   246d4:	sub	r3, r1, r3, lsl #1
   246d8:	cmp	r3, #0
   246dc:	bne	25130 <__assert_fail@plt+0x130a4>
   246e0:	movw	r2, #26215	; 0x6667
   246e4:	sub	r0, r0, #1
   246e8:	sub	r4, r4, #1
   246ec:	movt	r2, #26214	; 0x6666
   246f0:	smmul	r1, r1, r2
   246f4:	asr	r2, r1, #2
   246f8:	add	r1, r2, r1, lsr #31
   246fc:	cmp	r7, r4
   24700:	blt	246e0 <__assert_fail@plt+0x12654>
   24704:	b	246b4 <__assert_fail@plt+0x12628>
   24708:	mov	r5, #1
   2470c:	ldr	r2, [sp, #96]	; 0x60
   24710:	eor	r1, r6, #1
   24714:	orr	r5, r6, r5
   24718:	and	r2, r2, r1
   2471c:	mov	r1, #112	; 0x70
   24720:	str	r2, [sp, #96]	; 0x60
   24724:	b	257bc <__assert_fail@plt+0x13730>
   24728:	cmp	r0, #69	; 0x45
   2472c:	beq	24cc0 <__assert_fail@plt+0x12c34>
   24730:	ldr	r2, [sp, #88]	; 0x58
   24734:	ldr	r3, [r2]
   24738:	b	249b8 <__assert_fail@plt+0x1292c>
   2473c:	movw	r4, #61406	; 0xefde
   24740:	movt	r4, #2
   24744:	ldr	r0, [sp, #96]	; 0x60
   24748:	ldr	r3, [sp, #88]	; 0x58
   2474c:	mvn	r1, #0
   24750:	mov	r2, r4
   24754:	str	lr, [sp, #92]	; 0x5c
   24758:	and	r0, r0, #1
   2475c:	stm	sp, {r0, r9}
   24760:	str	r0, [sp, #100]	; 0x64
   24764:	ldr	r0, [fp, #20]
   24768:	str	r8, [sp, #8]
   2476c:	str	r0, [sp, #12]
   24770:	ldr	r0, [fp, #24]
   24774:	str	r0, [sp, #16]
   24778:	mov	r0, #0
   2477c:	bl	23ea0 <__assert_fail@plt+0x11e14>
   24780:	mov	r6, r0
   24784:	subs	r0, r9, #45	; 0x2d
   24788:	ldr	lr, [sp, #92]	; 0x5c
   2478c:	ldr	r1, [sp, #104]	; 0x68
   24790:	movne	r0, r7
   24794:	cmp	r7, #0
   24798:	mov	r5, r6
   2479c:	movwmi	r0, #0
   247a0:	cmp	r0, r6
   247a4:	movhi	r5, r0
   247a8:	sub	r1, r1, lr
   247ac:	cmp	r5, r1
   247b0:	bcs	25a94 <__assert_fail@plt+0x13a08>
   247b4:	ldr	r7, [sp, #108]	; 0x6c
   247b8:	cmp	r7, #0
   247bc:	beq	24e60 <__assert_fail@plt+0x12dd4>
   247c0:	cmp	r0, r6
   247c4:	bls	24e68 <__assert_fail@plt+0x12ddc>
   247c8:	cmp	r9, #48	; 0x30
   247cc:	sub	r2, r0, r6
   247d0:	str	r1, [sp, #20]
   247d4:	cmpne	r9, #43	; 0x2b
   247d8:	str	r2, [sp, #96]	; 0x60
   247dc:	bne	25464 <__assert_fail@plt+0x133d8>
   247e0:	mov	r0, r7
   247e4:	mov	r1, #48	; 0x30
   247e8:	b	2546c <__assert_fail@plt+0x133e0>
   247ec:	cmp	r0, #69	; 0x45
   247f0:	beq	24cc0 <__assert_fail@plt+0x12c34>
   247f4:	ldr	r3, [sp, #88]	; 0x58
   247f8:	ldr	r2, [r3, #24]
   247fc:	ldr	r3, [r3, #28]
   24800:	sub	r2, r3, r2
   24804:	movw	r3, #9363	; 0x2493
   24808:	movt	r3, #37449	; 0x9249
   2480c:	add	r2, r2, #7
   24810:	smmla	r2, r2, r3, r2
   24814:	b	24858 <__assert_fail@plt+0x127cc>
   24818:	cmp	r0, #69	; 0x45
   2481c:	beq	24cc0 <__assert_fail@plt+0x12c34>
   24820:	ldr	r3, [sp, #88]	; 0x58
   24824:	movw	r6, #9363	; 0x2493
   24828:	movt	r6, #37449	; 0x9249
   2482c:	ldr	r2, [r3, #24]
   24830:	ldr	r3, [r3, #28]
   24834:	add	r2, r2, #6
   24838:	smmla	r5, r2, r6, r2
   2483c:	asr	r4, r5, #2
   24840:	add	r5, r4, r5, lsr #31
   24844:	rsb	r5, r5, r5, lsl #3
   24848:	sub	r2, r5, r2
   2484c:	add	r2, r3, r2
   24850:	add	r2, r2, #7
   24854:	smmla	r2, r2, r6, r2
   24858:	asr	r3, r2, #2
   2485c:	add	r3, r3, r2, lsr #31
   24860:	b	249b8 <__assert_fail@plt+0x1292c>
   24864:	cmp	r0, #79	; 0x4f
   24868:	beq	24cc0 <__assert_fail@plt+0x12c34>
   2486c:	mov	r5, #0
   24870:	mov	r1, #88	; 0x58
   24874:	b	257bc <__assert_fail@plt+0x13730>
   24878:	cmp	r0, #69	; 0x45
   2487c:	beq	253bc <__assert_fail@plt+0x13330>
   24880:	cmp	r0, #79	; 0x4f
   24884:	beq	24cc0 <__assert_fail@plt+0x12c34>
   24888:	ldr	r2, [sp, #88]	; 0x58
   2488c:	movw	r6, #63636	; 0xf894
   24890:	mov	ip, #4
   24894:	movt	r6, #65535	; 0xffff
   24898:	ldr	r3, [r2, #20]
   2489c:	mov	r2, #0
   248a0:	cmp	r3, r6
   248a4:	movw	r6, #1900	; 0x76c
   248a8:	movwlt	r2, #1
   248ac:	add	r3, r3, r6
   248b0:	b	2551c <__assert_fail@plt+0x13490>
   248b4:	ldr	r0, [sp, #64]	; 0x40
   248b8:	subs	r5, r9, #45	; 0x2d
   248bc:	bicne	r5, r7, r7, asr #31
   248c0:	mov	r7, lr
   248c4:	bl	11eac <strlen@plt>
   248c8:	mov	r8, r0
   248cc:	cmp	r5, r0
   248d0:	mov	r4, r0
   248d4:	ldr	r0, [sp, #104]	; 0x68
   248d8:	movhi	r4, r5
   248dc:	sub	r0, r0, r7
   248e0:	cmp	r4, r0
   248e4:	bcs	25a94 <__assert_fail@plt+0x13a08>
   248e8:	ldr	ip, [sp, #108]	; 0x6c
   248ec:	mov	lr, r7
   248f0:	cmp	ip, #0
   248f4:	beq	252d0 <__assert_fail@plt+0x13244>
   248f8:	cmp	r5, r8
   248fc:	bls	253c8 <__assert_fail@plt+0x1333c>
   24900:	uxtb	r0, r9
   24904:	sub	r5, r5, r8
   24908:	cmp	r0, #48	; 0x30
   2490c:	cmpne	r0, #43	; 0x2b
   24910:	bne	25624 <__assert_fail@plt+0x13598>
   24914:	mov	r0, ip
   24918:	mov	r1, #48	; 0x30
   2491c:	b	2562c <__assert_fail@plt+0x135a0>
   24920:	cmp	r0, #0
   24924:	bne	24cc0 <__assert_fail@plt+0x12c34>
   24928:	ldr	r1, [sp, #96]	; 0x60
   2492c:	mov	r5, #0
   24930:	orr	r1, r6, r1
   24934:	str	r1, [sp, #96]	; 0x60
   24938:	mov	r1, #97	; 0x61
   2493c:	b	257bc <__assert_fail@plt+0x13730>
   24940:	cmp	r0, #79	; 0x4f
   24944:	beq	24cc0 <__assert_fail@plt+0x12c34>
   24948:	mov	r5, #0
   2494c:	mov	r1, #99	; 0x63
   24950:	b	257bc <__assert_fail@plt+0x13730>
   24954:	cmp	r0, #69	; 0x45
   24958:	beq	24cc0 <__assert_fail@plt+0x12c34>
   2495c:	ldr	r2, [sp, #52]	; 0x34
   24960:	ldr	r3, [r2]
   24964:	b	249b8 <__assert_fail@plt+0x1292c>
   24968:	ldr	r2, [sp, #52]	; 0x34
   2496c:	cmp	r0, #69	; 0x45
   24970:	bne	2499c <__assert_fail@plt+0x12910>
   24974:	b	24cc0 <__assert_fail@plt+0x12c34>
   24978:	cmp	r0, #69	; 0x45
   2497c:	beq	24cc0 <__assert_fail@plt+0x12c34>
   24980:	ldr	r2, [sp, #88]	; 0x58
   24984:	mov	ip, #3
   24988:	ldr	r3, [r2, #28]
   2498c:	b	24ae0 <__assert_fail@plt+0x12a54>
   24990:	ldr	r2, [sp, #60]	; 0x3c
   24994:	cmp	r0, #69	; 0x45
   24998:	beq	24cc0 <__assert_fail@plt+0x12c34>
   2499c:	ldr	r3, [r2]
   249a0:	b	249b0 <__assert_fail@plt+0x12924>
   249a4:	ldr	r3, [sp, #56]	; 0x38
   249a8:	cmp	r0, #69	; 0x45
   249ac:	beq	24cc0 <__assert_fail@plt+0x12c34>
   249b0:	cmp	r9, #0
   249b4:	movweq	r9, #95	; 0x5f
   249b8:	mov	ip, #2
   249bc:	lsr	r2, r3, #31
   249c0:	cmp	r2, #0
   249c4:	mov	r6, #0
   249c8:	mov	r4, #0
   249cc:	movwne	r2, #1
   249d0:	cmp	r0, #79	; 0x4f
   249d4:	moveq	r5, #0
   249d8:	cmpeq	r2, #0
   249dc:	beq	257bc <__assert_fail@plt+0x13730>
   249e0:	ldr	r8, [sp, #80]	; 0x50
   249e4:	cmp	r2, #0
   249e8:	rsbne	r3, r3, #0
   249ec:	tst	r6, #1
   249f0:	asr	r6, r6, #1
   249f4:	movne	r0, #58	; 0x3a
   249f8:	strbne	r0, [r8, #-1]!
   249fc:	movw	r0, #52429	; 0xcccd
   24a00:	cmp	r3, #9
   24a04:	movt	r0, #52428	; 0xcccc
   24a08:	umull	r0, r1, r3, r0
   24a0c:	lsr	r0, r1, #3
   24a10:	add	r1, r0, r0, lsl #2
   24a14:	sub	r1, r3, r1, lsl #1
   24a18:	mov	r3, r0
   24a1c:	orr	r1, r1, #48	; 0x30
   24a20:	strb	r1, [r8, #-1]!
   24a24:	bhi	249ec <__assert_fail@plt+0x12960>
   24a28:	cmp	r6, #0
   24a2c:	mov	r3, r0
   24a30:	bne	249ec <__assert_fail@plt+0x12960>
   24a34:	cmp	r7, #0
   24a38:	ldr	r3, [sp, #108]	; 0x6c
   24a3c:	str	sl, [sp, #100]	; 0x64
   24a40:	movmi	r7, ip
   24a44:	ldr	ip, [sp, #96]	; 0x60
   24a48:	cmp	r4, #0
   24a4c:	movwne	r4, #43	; 0x2b
   24a50:	cmp	r9, #0
   24a54:	movweq	r9, #48	; 0x30
   24a58:	ldr	r1, [sp, #80]	; 0x50
   24a5c:	cmp	r2, #0
   24a60:	mov	r0, r7
   24a64:	movwne	r4, #45	; 0x2d
   24a68:	cmp	r4, #0
   24a6c:	subne	r0, r0, #1
   24a70:	sub	sl, r1, r8
   24a74:	sub	r0, r0, sl
   24a78:	cmp	r0, #1
   24a7c:	movwlt	r0, #0
   24a80:	subs	r5, r9, #45	; 0x2d
   24a84:	movne	r5, r0
   24a88:	cmp	r4, #0
   24a8c:	beq	24ea4 <__assert_fail@plt+0x12e18>
   24a90:	cmp	r9, #95	; 0x5f
   24a94:	bne	24e80 <__assert_fail@plt+0x12df4>
   24a98:	cmp	r3, #0
   24a9c:	beq	24e74 <__assert_fail@plt+0x12de8>
   24aa0:	mov	r0, r3
   24aa4:	mov	r1, #32
   24aa8:	mov	r2, r5
   24aac:	str	lr, [sp, #92]	; 0x5c
   24ab0:	mov	r6, r3
   24ab4:	bl	11ef4 <memset@plt>
   24ab8:	ldr	ip, [sp, #96]	; 0x60
   24abc:	ldr	lr, [sp, #92]	; 0x5c
   24ac0:	mov	r3, r6
   24ac4:	add	r3, r6, r5
   24ac8:	b	24e78 <__assert_fail@plt+0x12dec>
   24acc:	cmp	r0, #69	; 0x45
   24ad0:	beq	24cc0 <__assert_fail@plt+0x12c34>
   24ad4:	ldr	r2, [sp, #88]	; 0x58
   24ad8:	mov	ip, #2
   24adc:	ldr	r3, [r2, #16]
   24ae0:	mov	r2, #0
   24ae4:	cmn	r3, #1
   24ae8:	add	r3, r3, #1
   24aec:	movwlt	r2, #1
   24af0:	b	249c0 <__assert_fail@plt+0x12934>
   24af4:	subs	r0, r9, #45	; 0x2d
   24af8:	ldr	r1, [sp, #104]	; 0x68
   24afc:	bicne	r0, r7, r7, asr #31
   24b00:	cmp	r0, #1
   24b04:	mov	r5, r0
   24b08:	movls	r5, #1
   24b0c:	sub	r1, r1, lr
   24b10:	cmp	r5, r1
   24b14:	bcs	25a94 <__assert_fail@plt+0x13a08>
   24b18:	ldr	ip, [sp, #108]	; 0x6c
   24b1c:	mov	r8, #-2147483648	; 0x80000000
   24b20:	cmp	ip, #0
   24b24:	beq	23fa8 <__assert_fail@plt+0x11f1c>
   24b28:	cmp	r0, #2
   24b2c:	bcc	25710 <__assert_fail@plt+0x13684>
   24b30:	uxtb	r1, r9
   24b34:	sub	r4, r0, #1
   24b38:	cmp	r1, #48	; 0x30
   24b3c:	cmpne	r1, #43	; 0x2b
   24b40:	bne	256e8 <__assert_fail@plt+0x1365c>
   24b44:	mov	r0, ip
   24b48:	mov	r1, #48	; 0x30
   24b4c:	b	256f0 <__assert_fail@plt+0x13664>
   24b50:	ldr	r2, [sp, #88]	; 0x58
   24b54:	mov	r3, #11
   24b58:	mov	ip, #1
   24b5c:	ldr	r2, [r2, #16]
   24b60:	mul	r2, r2, r3
   24b64:	add	r3, ip, r2, asr #5
   24b68:	mov	r2, #0
   24b6c:	b	249c0 <__assert_fail@plt+0x12934>
   24b70:	ldr	r2, [sp, #88]	; 0x58
   24b74:	mov	r0, #28
   24b78:	add	r1, sp, #112	; 0x70
   24b7c:	str	lr, [sp, #92]	; 0x5c
   24b80:	mov	r4, r1
   24b84:	mov	r3, r2
   24b88:	add	r2, r2, #16
   24b8c:	vld1.32	{d16-d17}, [r3], r0
   24b90:	vld1.32	{d18-d19}, [r2]
   24b94:	add	r2, r1, #16
   24b98:	vld1.32	{d20-d21}, [r3]
   24b9c:	vst1.64	{d16-d17}, [r4], r0
   24ba0:	mvn	r0, #0
   24ba4:	vst1.64	{d18-d19}, [r2]
   24ba8:	vst1.32	{d20-d21}, [r4]
   24bac:	str	r0, [r4]
   24bb0:	ldr	r0, [fp, #20]
   24bb4:	bl	286f0 <_obstack_memory_used@@Base+0x289c>
   24bb8:	ldr	r1, [r4]
   24bbc:	cmp	r1, #0
   24bc0:	bmi	25ab0 <__assert_fail@plt+0x13a24>
   24bc4:	movw	r1, #26215	; 0x6667
   24bc8:	cmp	r0, #0
   24bcc:	movt	r1, #26214	; 0x6666
   24bd0:	bmi	252d8 <__assert_fail@plt+0x1324c>
   24bd4:	ldr	r4, [sp, #96]	; 0x60
   24bd8:	ldr	r2, [sp, #40]	; 0x28
   24bdc:	mov	r3, r0
   24be0:	smmul	r6, r3, r1
   24be4:	asr	r5, r6, #2
   24be8:	add	r6, r5, r6, lsr #31
   24bec:	add	r5, r6, r6, lsl #2
   24bf0:	sub	r5, r3, r5, lsl #1
   24bf4:	add	r3, r3, #9
   24bf8:	cmp	r3, #18
   24bfc:	mov	r3, r6
   24c00:	add	r5, r5, #48	; 0x30
   24c04:	strb	r5, [r2], #-1
   24c08:	bhi	24be0 <__assert_fail@plt+0x12b54>
   24c0c:	b	25310 <__assert_fail@plt+0x13284>
   24c10:	subs	r0, r9, #45	; 0x2d
   24c14:	ldr	r1, [sp, #104]	; 0x68
   24c18:	bicne	r0, r7, r7, asr #31
   24c1c:	cmp	r0, #1
   24c20:	mov	r5, r0
   24c24:	movls	r5, #1
   24c28:	sub	r1, r1, lr
   24c2c:	cmp	r5, r1
   24c30:	bcs	25a94 <__assert_fail@plt+0x13a08>
   24c34:	ldr	ip, [sp, #108]	; 0x6c
   24c38:	mov	r8, #-2147483648	; 0x80000000
   24c3c:	cmp	ip, #0
   24c40:	beq	23fa8 <__assert_fail@plt+0x11f1c>
   24c44:	cmp	r0, #2
   24c48:	bcc	25740 <__assert_fail@plt+0x136b4>
   24c4c:	uxtb	r1, r9
   24c50:	sub	r4, r0, #1
   24c54:	cmp	r1, #48	; 0x30
   24c58:	cmpne	r1, #43	; 0x2b
   24c5c:	bne	25718 <__assert_fail@plt+0x1368c>
   24c60:	mov	r0, ip
   24c64:	mov	r1, #48	; 0x30
   24c68:	b	25720 <__assert_fail@plt+0x13694>
   24c6c:	ldr	r2, [sp, #88]	; 0x58
   24c70:	movw	r3, #9363	; 0x2493
   24c74:	mov	ip, #1
   24c78:	movt	r3, #37449	; 0x9249
   24c7c:	ldr	r2, [r2, #24]
   24c80:	add	r2, r2, #6
   24c84:	smmla	r3, r2, r3, r2
   24c88:	asr	r6, r3, #2
   24c8c:	add	r3, r6, r3, lsr #31
   24c90:	rsb	r3, r3, r3, lsl #3
   24c94:	sub	r2, r2, r3
   24c98:	add	r3, r2, #1
   24c9c:	b	249bc <__assert_fail@plt+0x12930>
   24ca0:	cmp	r0, #69	; 0x45
   24ca4:	beq	24cc0 <__assert_fail@plt+0x12c34>
   24ca8:	ldr	r2, [sp, #88]	; 0x58
   24cac:	mov	ip, #1
   24cb0:	ldr	r3, [r2, #24]
   24cb4:	b	249bc <__assert_fail@plt+0x12930>
   24cb8:	cmp	r0, #79	; 0x4f
   24cbc:	bne	25228 <__assert_fail@plt+0x1319c>
   24cc0:	ldr	r3, [sp, #108]	; 0x6c
   24cc4:	ldr	r0, [sp, #100]	; 0x64
   24cc8:	subs	r5, r9, #45	; 0x2d
   24ccc:	bicne	r5, r7, r7, asr #31
   24cd0:	sub	r8, sl, r0
   24cd4:	ldr	r0, [sp, #104]	; 0x68
   24cd8:	add	r4, r8, #1
   24cdc:	cmp	r5, r4
   24ce0:	mov	r7, r4
   24ce4:	movhi	r7, r5
   24ce8:	sub	r0, r0, lr
   24cec:	cmp	r7, r0
   24cf0:	bcs	25a94 <__assert_fail@plt+0x13a08>
   24cf4:	cmp	r3, #0
   24cf8:	beq	24d2c <__assert_fail@plt+0x12ca0>
   24cfc:	cmp	r5, r4
   24d00:	mov	ip, r3
   24d04:	bls	24d50 <__assert_fail@plt+0x12cc4>
   24d08:	uxtb	r0, r9
   24d0c:	sub	r6, r5, r4
   24d10:	str	lr, [sp, #92]	; 0x5c
   24d14:	cmp	r0, #48	; 0x30
   24d18:	cmpne	r0, #43	; 0x2b
   24d1c:	bne	24d34 <__assert_fail@plt+0x12ca8>
   24d20:	mov	r0, r3
   24d24:	mov	r1, #48	; 0x30
   24d28:	b	24d3c <__assert_fail@plt+0x12cb0>
   24d2c:	mov	ip, #0
   24d30:	b	24e30 <__assert_fail@plt+0x12da4>
   24d34:	mov	r0, r3
   24d38:	mov	r1, #32
   24d3c:	mov	r2, r6
   24d40:	mov	r9, r3
   24d44:	bl	11ef4 <memset@plt>
   24d48:	ldr	lr, [sp, #92]	; 0x5c
   24d4c:	add	ip, r9, r6
   24d50:	ldr	r0, [sp, #96]	; 0x60
   24d54:	tst	r0, #1
   24d58:	beq	24e0c <__assert_fail@plt+0x12d80>
   24d5c:	cmp	r4, #0
   24d60:	beq	24e2c <__assert_fail@plt+0x12da0>
   24d64:	ldr	r0, [sp, #100]	; 0x64
   24d68:	str	lr, [sp, #92]	; 0x5c
   24d6c:	mov	r6, ip
   24d70:	sub	r0, sl, r0
   24d74:	add	r9, r0, #1
   24d78:	bl	11e40 <__ctype_toupper_loc@plt>
   24d7c:	mov	ip, r6
   24d80:	tst	r9, #1
   24d84:	mov	r1, r4
   24d88:	beq	24da0 <__assert_fail@plt+0x12d14>
   24d8c:	ldrb	r1, [sl]
   24d90:	ldr	r2, [r0]
   24d94:	ldr	r1, [r2, r1, lsl #2]
   24d98:	strb	r1, [ip, r8]
   24d9c:	mov	r1, r8
   24da0:	ldr	r2, [sp, #100]	; 0x64
   24da4:	ldr	lr, [sp, #92]	; 0x5c
   24da8:	ldr	r3, [sp, #108]	; 0x6c
   24dac:	cmp	sl, r2
   24db0:	beq	24e2c <__assert_fail@plt+0x12da0>
   24db4:	ldr	r6, [sp, #100]	; 0x64
   24db8:	cmp	r5, r9
   24dbc:	movhi	r9, r5
   24dc0:	add	r2, r1, r6
   24dc4:	add	r2, r2, r9
   24dc8:	sub	r2, r2, sl
   24dcc:	add	r2, r3, r2
   24dd0:	sub	r3, r6, #2
   24dd4:	sub	r2, r2, #2
   24dd8:	add	r6, r3, r1
   24ddc:	ldr	r5, [r0]
   24de0:	ldrb	r6, [r6, #1]
   24de4:	ldr	r6, [r5, r6, lsl #2]
   24de8:	strb	r6, [r2]
   24dec:	ldrb	r6, [r3, r1]
   24df0:	ldr	r5, [r0]
   24df4:	subs	r1, r1, #2
   24df8:	ldr	r6, [r5, r6, lsl #2]
   24dfc:	strb	r6, [r2, #-1]
   24e00:	sub	r2, r2, #2
   24e04:	bne	24dd8 <__assert_fail@plt+0x12d4c>
   24e08:	b	24e2c <__assert_fail@plt+0x12da0>
   24e0c:	ldr	r1, [sp, #100]	; 0x64
   24e10:	mov	r0, ip
   24e14:	mov	r2, r4
   24e18:	mov	r5, lr
   24e1c:	mov	r6, ip
   24e20:	bl	11c60 <memcpy@plt>
   24e24:	mov	ip, r6
   24e28:	mov	lr, r5
   24e2c:	add	ip, ip, r4
   24e30:	add	lr, r7, lr
   24e34:	mov	r8, #-2147483648	; 0x80000000
   24e38:	ldrb	r3, [sl, #1]!
   24e3c:	mvn	r7, #0
   24e40:	cmp	r3, #0
   24e44:	bne	23fc0 <__assert_fail@plt+0x11f34>
   24e48:	b	25a68 <__assert_fail@plt+0x139dc>
   24e4c:	cmp	r0, #69	; 0x45
   24e50:	bne	25234 <__assert_fail@plt+0x131a8>
   24e54:	mov	r5, #0
   24e58:	mov	r1, #121	; 0x79
   24e5c:	b	257bc <__assert_fail@plt+0x13730>
   24e60:	mov	ip, #0
   24e64:	b	254b8 <__assert_fail@plt+0x1342c>
   24e68:	ldr	r3, [sp, #88]	; 0x58
   24e6c:	ldr	r0, [sp, #100]	; 0x64
   24e70:	b	25488 <__assert_fail@plt+0x133fc>
   24e74:	mov	r3, #0
   24e78:	sub	r7, r7, r5
   24e7c:	add	lr, r5, lr
   24e80:	ldr	r0, [sp, #104]	; 0x68
   24e84:	sub	r0, r0, lr
   24e88:	cmp	r0, #2
   24e8c:	bcc	25a94 <__assert_fail@plt+0x13a08>
   24e90:	cmp	r3, #0
   24e94:	sub	r7, r7, #1
   24e98:	add	lr, lr, #1
   24e9c:	strbne	r4, [r3], #1
   24ea0:	moveq	r3, #0
   24ea4:	subs	r5, r9, #45	; 0x2d
   24ea8:	ldr	r0, [sp, #104]	; 0x68
   24eac:	mov	r4, sl
   24eb0:	bicne	r5, r7, r7, asr #31
   24eb4:	cmp	r5, sl
   24eb8:	movhi	r4, r5
   24ebc:	sub	r0, r0, lr
   24ec0:	cmp	r4, r0
   24ec4:	bcs	25a94 <__assert_fail@plt+0x13a08>
   24ec8:	cmp	r3, #0
   24ecc:	beq	24efc <__assert_fail@plt+0x12e70>
   24ed0:	cmp	r5, sl
   24ed4:	mov	r6, r3
   24ed8:	bls	24f28 <__assert_fail@plt+0x12e9c>
   24edc:	cmp	r9, #48	; 0x30
   24ee0:	sub	r6, r5, sl
   24ee4:	str	lr, [sp, #92]	; 0x5c
   24ee8:	cmpne	r9, #43	; 0x2b
   24eec:	bne	24f04 <__assert_fail@plt+0x12e78>
   24ef0:	mov	r0, r3
   24ef4:	mov	r1, #48	; 0x30
   24ef8:	b	24f0c <__assert_fail@plt+0x12e80>
   24efc:	mov	ip, #0
   24f00:	b	24fec <__assert_fail@plt+0x12f60>
   24f04:	mov	r0, r3
   24f08:	mov	r1, #32
   24f0c:	mov	r2, r6
   24f10:	mov	r7, r3
   24f14:	bl	11ef4 <memset@plt>
   24f18:	ldr	lr, [sp, #92]	; 0x5c
   24f1c:	ldr	ip, [sp, #96]	; 0x60
   24f20:	add	r6, r7, r6
   24f24:	mov	r3, r7
   24f28:	tst	ip, #1
   24f2c:	beq	24fd0 <__assert_fail@plt+0x12f44>
   24f30:	cmp	sl, #0
   24f34:	beq	24fe8 <__assert_fail@plt+0x12f5c>
   24f38:	str	r3, [sp, #108]	; 0x6c
   24f3c:	mov	r7, lr
   24f40:	mvn	r9, r8
   24f44:	bl	11e40 <__ctype_toupper_loc@plt>
   24f48:	tst	sl, #1
   24f4c:	mov	r1, sl
   24f50:	beq	24f68 <__assert_fail@plt+0x12edc>
   24f54:	sub	r1, sl, #1
   24f58:	ldr	r3, [r0]
   24f5c:	ldrb	r2, [r8, r1]
   24f60:	ldr	r2, [r3, r2, lsl #2]
   24f64:	strb	r2, [r6, r1]
   24f68:	ldr	r2, [sp, #44]	; 0x2c
   24f6c:	mov	lr, r7
   24f70:	ldr	r7, [sp, #108]	; 0x6c
   24f74:	cmp	r9, r2
   24f78:	beq	24fe8 <__assert_fail@plt+0x12f5c>
   24f7c:	ldr	r3, [sp, #36]	; 0x24
   24f80:	cmp	r5, sl
   24f84:	add	r2, r1, r8
   24f88:	movls	r5, sl
   24f8c:	add	r2, r2, r5
   24f90:	add	r3, r7, r3
   24f94:	add	r2, r3, r2
   24f98:	sub	r3, r8, #2
   24f9c:	add	r5, r3, r1
   24fa0:	ldr	r7, [r0]
   24fa4:	ldrb	r5, [r5, #1]
   24fa8:	ldr	r7, [r7, r5, lsl #2]
   24fac:	strb	r7, [r2]
   24fb0:	ldrb	r7, [r3, r1]
   24fb4:	ldr	r5, [r0]
   24fb8:	subs	r1, r1, #2
   24fbc:	ldr	r7, [r5, r7, lsl #2]
   24fc0:	strb	r7, [r2, #-1]
   24fc4:	sub	r2, r2, #2
   24fc8:	bne	24f9c <__assert_fail@plt+0x12f10>
   24fcc:	b	24fe8 <__assert_fail@plt+0x12f5c>
   24fd0:	mov	r0, r6
   24fd4:	mov	r1, r8
   24fd8:	mov	r2, sl
   24fdc:	mov	r5, lr
   24fe0:	bl	11c60 <memcpy@plt>
   24fe4:	mov	lr, r5
   24fe8:	add	ip, r6, sl
   24fec:	ldr	sl, [sp, #100]	; 0x64
   24ff0:	add	lr, r4, lr
   24ff4:	mov	r8, #-2147483648	; 0x80000000
   24ff8:	ldrb	r3, [sl, #1]!
   24ffc:	mvn	r7, #0
   25000:	cmp	r3, #0
   25004:	bne	23fc0 <__assert_fail@plt+0x11f34>
   25008:	b	25a68 <__assert_fail@plt+0x139dc>
   2500c:	sub	r2, r2, #1
   25010:	movw	r4, #365	; 0x16d
   25014:	tst	r2, #3
   25018:	bne	2505c <__assert_fail@plt+0x12fd0>
   2501c:	movw	r4, #34079	; 0x851f
   25020:	movt	r4, #20971	; 0x51eb
   25024:	smmul	r4, r2, r4
   25028:	asr	r6, r4, #5
   2502c:	add	r3, r6, r4, lsr #31
   25030:	mov	r6, #100	; 0x64
   25034:	mls	r3, r3, r6, r2
   25038:	asr	r6, r4, #7
   2503c:	add	r4, r6, r4, lsr #31
   25040:	mov	r6, #400	; 0x190
   25044:	mls	r2, r4, r6, r2
   25048:	movw	r4, #365	; 0x16d
   2504c:	cmp	r2, #0
   25050:	movweq	r4, #366	; 0x16e
   25054:	cmp	r3, #0
   25058:	movwne	r4, #366	; 0x16e
   2505c:	add	r2, r4, r5
   25060:	movw	r4, #382	; 0x17e
   25064:	sub	r3, r4, r8
   25068:	add	r2, r3, r2
   2506c:	smmla	r2, r2, ip, r2
   25070:	asr	r4, r2, #2
   25074:	add	r2, r4, r2, lsr #31
   25078:	rsb	r2, r2, r2, lsl #3
   2507c:	sub	r2, r2, r3
   25080:	mvn	r3, #0
   25084:	add	r4, r2, #3
   25088:	cmp	r1, #71	; 0x47
   2508c:	bne	244b0 <__assert_fail@plt+0x12424>
   25090:	movw	r2, #63636	; 0xf894
   25094:	mov	ip, #4
   25098:	movt	r2, #65535	; 0xffff
   2509c:	sub	r6, r2, r3
   250a0:	add	r3, lr, r3
   250a4:	mov	r2, #0
   250a8:	cmp	lr, r6
   250ac:	ldr	lr, [sp, #92]	; 0x5c
   250b0:	movw	r6, #1900	; 0x76c
   250b4:	movwlt	r2, #1
   250b8:	add	r3, r3, r6
   250bc:	b	2551c <__assert_fail@plt+0x13490>
   250c0:	smmla	r2, r4, ip, r4
   250c4:	ldr	lr, [sp, #92]	; 0x5c
   250c8:	mov	ip, #2
   250cc:	asr	r3, r2, #2
   250d0:	add	r2, r3, r2, lsr #31
   250d4:	add	r3, r2, #1
   250d8:	b	249bc <__assert_fail@plt+0x12930>
   250dc:	ldr	r2, [sp, #88]	; 0x58
   250e0:	movw	r5, #63636	; 0xf894
   250e4:	mov	r3, #0
   250e8:	mvn	r4, #98	; 0x62
   250ec:	mov	ip, #2
   250f0:	movt	r5, #65535	; 0xffff
   250f4:	ldr	r6, [r2, #20]
   250f8:	mov	r2, #0
   250fc:	cmp	r6, r5
   25100:	movwge	r3, #1
   25104:	cmp	r6, r5
   25108:	and	r3, r3, r6, lsr #31
   2510c:	movwlt	r2, #1
   25110:	smlabb	r3, r3, r4, r6
   25114:	movw	r4, #34079	; 0x851f
   25118:	movt	r4, #20971	; 0x51eb
   2511c:	smmul	r3, r3, r4
   25120:	asr	r4, r3, #5
   25124:	add	r3, r4, r3, lsr #31
   25128:	add	r3, r3, #19
   2512c:	b	2551c <__assert_fail@plt+0x13490>
   25130:	cmp	r4, #1
   25134:	blt	25168 <__assert_fail@plt+0x130dc>
   25138:	smmul	r3, r1, r2
   2513c:	cmp	r0, #0
   25140:	asr	r6, r3, #2
   25144:	add	r3, r6, r3, lsr #31
   25148:	add	r6, r3, r3, lsl #2
   2514c:	sub	r1, r1, r6, lsl #1
   25150:	add	r1, r1, #48	; 0x30
   25154:	strb	r1, [r8, r0]
   25158:	sub	r1, r0, #1
   2515c:	mov	r0, r1
   25160:	mov	r1, r3
   25164:	bgt	25138 <__assert_fail@plt+0x130ac>
   25168:	ldr	r0, [sp, #104]	; 0x68
   2516c:	cmp	r9, #0
   25170:	movweq	r9, #48	; 0x30
   25174:	sub	r8, r0, lr
   25178:	cmp	r4, r8
   2517c:	bcs	25a94 <__assert_fail@plt+0x13a08>
   25180:	mov	r2, #0
   25184:	cmp	ip, #0
   25188:	mov	r5, #0
   2518c:	beq	255b8 <__assert_fail@plt+0x1352c>
   25190:	ldr	r0, [sp, #96]	; 0x60
   25194:	tst	r0, #1
   25198:	beq	25590 <__assert_fail@plt+0x13504>
   2519c:	cmp	r4, #0
   251a0:	beq	255b0 <__assert_fail@plt+0x13524>
   251a4:	mov	r5, lr
   251a8:	mov	r6, ip
   251ac:	bl	11e40 <__ctype_toupper_loc@plt>
   251b0:	mov	ip, r6
   251b4:	tst	r4, #1
   251b8:	mov	r1, r4
   251bc:	beq	251e0 <__assert_fail@plt+0x13154>
   251c0:	ldr	r1, [sp, #24]
   251c4:	ldr	r2, [r0]
   251c8:	add	r1, r1, r4
   251cc:	ldrb	r1, [r1, #-9]
   251d0:	ldr	r1, [r2, r1, lsl #2]
   251d4:	add	r2, ip, r4
   251d8:	strb	r1, [r2, #-1]
   251dc:	sub	r1, r4, #1
   251e0:	ldr	r6, [sp, #28]
   251e4:	cmp	r4, #1
   251e8:	mov	lr, r5
   251ec:	beq	255b0 <__assert_fail@plt+0x13524>
   251f0:	sub	r2, ip, #2
   251f4:	add	r3, r6, r1
   251f8:	ldr	r5, [r0]
   251fc:	ldrb	r3, [r3, #1]
   25200:	ldr	r3, [r5, r3, lsl #2]
   25204:	add	r5, r2, r1
   25208:	strb	r3, [r5, #1]
   2520c:	ldrb	r3, [r6, r1]
   25210:	ldr	r5, [r0]
   25214:	ldr	r3, [r5, r3, lsl #2]
   25218:	strb	r3, [r2, r1]
   2521c:	subs	r1, r1, #2
   25220:	bne	251f4 <__assert_fail@plt+0x13168>
   25224:	b	255b0 <__assert_fail@plt+0x13524>
   25228:	mov	r5, #0
   2522c:	mov	r1, #120	; 0x78
   25230:	b	257bc <__assert_fail@plt+0x13730>
   25234:	ldr	r2, [sp, #88]	; 0x58
   25238:	mov	ip, #2
   2523c:	ldr	r6, [r2, #20]
   25240:	movw	r2, #34079	; 0x851f
   25244:	movt	r2, #20971	; 0x51eb
   25248:	smmul	r2, r6, r2
   2524c:	asr	r3, r2, #5
   25250:	add	r2, r3, r2, lsr #31
   25254:	mov	r3, #100	; 0x64
   25258:	mls	r5, r2, r3, r6
   2525c:	mov	r2, #0
   25260:	cmn	r5, #1
   25264:	ble	25508 <__assert_fail@plt+0x1347c>
   25268:	mov	r3, r5
   2526c:	b	2551c <__assert_fail@plt+0x13490>
   25270:	subs	r0, r9, #45	; 0x2d
   25274:	ldr	r1, [sp, #104]	; 0x68
   25278:	bicne	r0, r7, r7, asr #31
   2527c:	cmp	r0, #1
   25280:	mov	r5, r0
   25284:	movls	r5, #1
   25288:	sub	r1, r1, lr
   2528c:	cmp	r5, r1
   25290:	bcs	25a94 <__assert_fail@plt+0x13a08>
   25294:	ldr	ip, [sp, #108]	; 0x6c
   25298:	mov	r8, #-2147483648	; 0x80000000
   2529c:	cmp	ip, #0
   252a0:	beq	23fa8 <__assert_fail@plt+0x11f1c>
   252a4:	mov	r1, #37	; 0x25
   252a8:	cmp	r0, #2
   252ac:	bcc	25a3c <__assert_fail@plt+0x139b0>
   252b0:	uxtb	r1, r9
   252b4:	sub	r4, r0, #1
   252b8:	cmp	r1, #48	; 0x30
   252bc:	cmpne	r1, #43	; 0x2b
   252c0:	bne	25a10 <__assert_fail@plt+0x13984>
   252c4:	mov	r0, ip
   252c8:	mov	r1, #48	; 0x30
   252cc:	b	25a18 <__assert_fail@plt+0x1398c>
   252d0:	mov	ip, #0
   252d4:	b	256cc <__assert_fail@plt+0x13640>
   252d8:	ldr	r4, [sp, #96]	; 0x60
   252dc:	ldr	r2, [sp, #40]	; 0x28
   252e0:	mov	r3, r0
   252e4:	smmul	r6, r3, r1
   252e8:	asr	r5, r6, #2
   252ec:	add	r6, r5, r6, lsr #31
   252f0:	add	r5, r6, r6, lsl #2
   252f4:	rsb	r5, r3, r5, lsl #1
   252f8:	add	r3, r3, #9
   252fc:	cmp	r3, #18
   25300:	mov	r3, r6
   25304:	add	r5, r5, #48	; 0x30
   25308:	strb	r5, [r2], #-1
   2530c:	bhi	252e4 <__assert_fail@plt+0x13258>
   25310:	ldr	lr, [sp, #92]	; 0x5c
   25314:	ldr	r3, [sp, #108]	; 0x6c
   25318:	cmp	r7, #0
   2531c:	add	r8, r2, #1
   25320:	mov	ip, r4
   25324:	lsr	r2, r0, #31
   25328:	mov	r4, #0
   2532c:	str	sl, [sp, #100]	; 0x64
   25330:	movwmi	r7, #1
   25334:	b	24a50 <__assert_fail@plt+0x129c4>
   25338:	ldr	r3, [sp, #108]	; 0x6c
   2533c:	mov	r2, #1
   25340:	cmp	r5, #3
   25344:	bhi	245ac <__assert_fail@plt+0x12520>
   25348:	movw	ip, #34953	; 0x8889
   2534c:	movt	ip, #34952	; 0x8888
   25350:	smmla	r6, lr, ip, lr
   25354:	asr	r3, r6, #5
   25358:	add	r6, r3, r6, lsr #31
   2535c:	smmla	r3, r6, ip, r6
   25360:	asr	r4, r3, #5
   25364:	add	r3, r4, r3, lsr #31
   25368:	rsb	r3, r3, r3, lsl #4
   2536c:	sub	ip, r6, r3, lsl #2
   25370:	movw	r3, #46021	; 0xb3c5
   25374:	movt	r3, #37282	; 0x91a2
   25378:	smmla	r3, lr, r3, lr
   2537c:	asr	r4, r3, #11
   25380:	add	r3, r4, r3, lsr #31
   25384:	rsb	r4, r6, r6, lsl #4
   25388:	add	r6, pc, #4
   2538c:	sub	r4, lr, r4, lsl #2
   25390:	ldr	pc, [r6, r5, lsl #2]
   25394:	andeq	r5, r2, r4, lsr #7
   25398:	muleq	r2, r4, r7
   2539c:	andeq	r5, r2, r0, ror r5
   253a0:	andeq	r5, r2, r8, ror #10
   253a4:	mov	r6, #100	; 0x64
   253a8:	mla	r3, r3, r6, ip
   253ac:	mov	ip, #5
   253b0:	mov	r4, #1
   253b4:	mov	r6, #0
   253b8:	b	257a8 <__assert_fail@plt+0x1371c>
   253bc:	mov	r5, #0
   253c0:	mov	r1, #89	; 0x59
   253c4:	b	257bc <__assert_fail@plt+0x13730>
   253c8:	ldr	r9, [sp, #32]
   253cc:	mov	r0, r6
   253d0:	tst	r0, #1
   253d4:	bne	25654 <__assert_fail@plt+0x135c8>
   253d8:	ldr	r1, [sp, #96]	; 0x60
   253dc:	eor	r0, r0, #1
   253e0:	and	r0, r1, r0
   253e4:	tst	r0, #1
   253e8:	beq	25604 <__assert_fail@plt+0x13578>
   253ec:	cmp	r8, #0
   253f0:	beq	256c8 <__assert_fail@plt+0x1363c>
   253f4:	mov	r5, ip
   253f8:	bl	11e40 <__ctype_toupper_loc@plt>
   253fc:	mov	ip, r5
   25400:	tst	r8, #1
   25404:	mov	r1, r8
   25408:	beq	25424 <__assert_fail@plt+0x13398>
   2540c:	ldr	r2, [sp, #64]	; 0x40
   25410:	sub	r1, r8, #1
   25414:	ldr	r3, [r0]
   25418:	ldrb	r2, [r2, r1]
   2541c:	ldr	r2, [r3, r2, lsl #2]
   25420:	strb	r2, [ip, r1]
   25424:	cmp	r8, #1
   25428:	mov	lr, r7
   2542c:	beq	256c8 <__assert_fail@plt+0x1363c>
   25430:	add	r2, r9, r1
   25434:	ldr	r3, [r0]
   25438:	ldrb	r2, [r2, #1]
   2543c:	ldr	r2, [r3, r2, lsl #2]
   25440:	add	r3, ip, r1
   25444:	strb	r2, [r3, #-1]
   25448:	ldrb	r2, [r9, r1]
   2544c:	ldr	r7, [r0]
   25450:	subs	r1, r1, #2
   25454:	ldr	r2, [r7, r2, lsl #2]
   25458:	strb	r2, [r3, #-2]
   2545c:	bne	25430 <__assert_fail@plt+0x133a4>
   25460:	b	256c8 <__assert_fail@plt+0x1363c>
   25464:	mov	r0, r7
   25468:	mov	r1, #32
   2546c:	ldr	r2, [sp, #96]	; 0x60
   25470:	bl	11ef4 <memset@plt>
   25474:	ldr	r2, [sp, #96]	; 0x60
   25478:	ldr	r1, [sp, #20]
   2547c:	ldr	r3, [sp, #88]	; 0x58
   25480:	ldr	r0, [sp, #100]	; 0x64
   25484:	add	r7, r7, r2
   25488:	stm	sp, {r0, r9}
   2548c:	ldr	r0, [fp, #20]
   25490:	mov	r2, r4
   25494:	str	r8, [sp, #8]
   25498:	str	r0, [sp, #12]
   2549c:	ldr	r0, [fp, #24]
   254a0:	str	r0, [sp, #16]
   254a4:	mov	r0, r7
   254a8:	bl	23ea0 <__assert_fail@plt+0x11e14>
   254ac:	ldr	lr, [sp, #92]	; 0x5c
   254b0:	mov	ip, r7
   254b4:	add	ip, r7, r6
   254b8:	mov	r8, #-2147483648	; 0x80000000
   254bc:	add	lr, r5, lr
   254c0:	ldrb	r3, [sl, #1]!
   254c4:	mvn	r7, #0
   254c8:	cmp	r3, #0
   254cc:	bne	23fc0 <__assert_fail@plt+0x11f34>
   254d0:	b	25a68 <__assert_fail@plt+0x139dc>
   254d4:	movw	r5, #63636	; 0xf894
   254d8:	movt	r5, #65535	; 0xffff
   254dc:	sub	r5, r5, r3
   254e0:	add	r3, r4, #100	; 0x64
   254e4:	cmp	lr, r5
   254e8:	ldr	lr, [sp, #92]	; 0x5c
   254ec:	rsblt	r3, r4, #0
   254f0:	b	2551c <__assert_fail@plt+0x13490>
   254f4:	cmp	r7, #6
   254f8:	mov	r0, r7
   254fc:	movle	r0, #6
   25500:	sub	r8, r0, #6
   25504:	b	24744 <__assert_fail@plt+0x126b8>
   25508:	movw	r4, #63636	; 0xf894
   2550c:	add	r3, r5, #100	; 0x64
   25510:	movt	r4, #65535	; 0xffff
   25514:	cmp	r6, r4
   25518:	rsblt	r3, r5, #0
   2551c:	ldr	r4, [fp, #12]
   25520:	cmp	r9, #0
   25524:	mov	r6, #0
   25528:	moveq	r9, r4
   2552c:	mov	r4, #0
   25530:	cmp	r9, #43	; 0x2b
   25534:	bne	249d0 <__assert_fail@plt+0x12944>
   25538:	cmp	ip, r7
   2553c:	mov	r4, #0
   25540:	movw	r5, #9999	; 0x270f
   25544:	mov	r8, lr
   25548:	mov	lr, #0
   2554c:	movwlt	r4, #1
   25550:	cmp	ip, #2
   25554:	movweq	r5, #99	; 0x63
   25558:	cmp	r5, r3
   2555c:	movwcc	lr, #1
   25560:	orr	r4, r4, lr
   25564:	b	257a8 <__assert_fail@plt+0x1371c>
   25568:	cmp	r4, #0
   2556c:	beq	2578c <__assert_fail@plt+0x13700>
   25570:	movw	r6, #10000	; 0x2710
   25574:	mla	r3, r3, r6, r4
   25578:	mov	r6, #100	; 0x64
   2557c:	mov	r4, #1
   25580:	mla	r3, ip, r6, r3
   25584:	mov	ip, #9
   25588:	mov	r6, #20
   2558c:	b	257a8 <__assert_fail@plt+0x1371c>
   25590:	sub	r1, fp, #48	; 0x30
   25594:	mov	r0, ip
   25598:	mov	r2, r4
   2559c:	mov	r5, lr
   255a0:	mov	r6, ip
   255a4:	bl	11c60 <memcpy@plt>
   255a8:	mov	ip, r6
   255ac:	mov	lr, r5
   255b0:	add	r5, ip, r4
   255b4:	mov	r2, #0
   255b8:	cmp	r9, #45	; 0x2d
   255bc:	subne	r0, r7, r4
   255c0:	bicne	r2, r0, r0, asr #31
   255c4:	sub	r0, r8, r4
   255c8:	cmp	r2, r0
   255cc:	bcs	25a94 <__assert_fail@plt+0x13a08>
   255d0:	cmp	r5, #0
   255d4:	beq	255fc <__assert_fail@plt+0x13570>
   255d8:	cmp	r2, #0
   255dc:	beq	255fc <__assert_fail@plt+0x13570>
   255e0:	uxtb	r0, r9
   255e4:	cmp	r0, #48	; 0x30
   255e8:	cmpne	r0, #43	; 0x2b
   255ec:	bne	25760 <__assert_fail@plt+0x136d4>
   255f0:	mov	r0, r5
   255f4:	mov	r1, #48	; 0x30
   255f8:	b	25768 <__assert_fail@plt+0x136dc>
   255fc:	mov	ip, r5
   25600:	b	25780 <__assert_fail@plt+0x136f4>
   25604:	ldr	r1, [sp, #64]	; 0x40
   25608:	mov	r0, ip
   2560c:	mov	r2, r8
   25610:	mov	r5, ip
   25614:	bl	11c60 <memcpy@plt>
   25618:	mov	ip, r5
   2561c:	mov	lr, r7
   25620:	b	256c8 <__assert_fail@plt+0x1363c>
   25624:	mov	r0, ip
   25628:	mov	r1, #32
   2562c:	mov	r2, r5
   25630:	mov	r9, ip
   25634:	bl	11ef4 <memset@plt>
   25638:	mov	ip, r9
   2563c:	ldr	r9, [sp, #32]
   25640:	mov	r0, r6
   25644:	mov	lr, r7
   25648:	add	ip, ip, r5
   2564c:	tst	r0, #1
   25650:	beq	253d8 <__assert_fail@plt+0x1334c>
   25654:	cmp	r8, #0
   25658:	beq	256c8 <__assert_fail@plt+0x1363c>
   2565c:	mov	r5, ip
   25660:	bl	11e34 <__ctype_tolower_loc@plt>
   25664:	mov	ip, r5
   25668:	tst	r8, #1
   2566c:	mov	r1, r8
   25670:	beq	2568c <__assert_fail@plt+0x13600>
   25674:	ldr	r2, [sp, #64]	; 0x40
   25678:	sub	r1, r8, #1
   2567c:	ldr	r3, [r0]
   25680:	ldrb	r2, [r2, r1]
   25684:	ldr	r2, [r3, r2, lsl #2]
   25688:	strb	r2, [ip, r1]
   2568c:	cmp	r8, #1
   25690:	mov	lr, r7
   25694:	beq	256c8 <__assert_fail@plt+0x1363c>
   25698:	add	r2, r9, r1
   2569c:	ldr	r3, [r0]
   256a0:	ldrb	r2, [r2, #1]
   256a4:	ldr	r2, [r3, r2, lsl #2]
   256a8:	add	r3, ip, r1
   256ac:	strb	r2, [r3, #-1]
   256b0:	ldrb	r2, [r9, r1]
   256b4:	ldr	r7, [r0]
   256b8:	subs	r1, r1, #2
   256bc:	ldr	r2, [r7, r2, lsl #2]
   256c0:	strb	r2, [r3, #-2]
   256c4:	bne	25698 <__assert_fail@plt+0x1360c>
   256c8:	add	ip, ip, r8
   256cc:	mov	r8, #-2147483648	; 0x80000000
   256d0:	add	lr, r4, lr
   256d4:	ldrb	r3, [sl, #1]!
   256d8:	mvn	r7, #0
   256dc:	cmp	r3, #0
   256e0:	bne	23fc0 <__assert_fail@plt+0x11f34>
   256e4:	b	25a68 <__assert_fail@plt+0x139dc>
   256e8:	mov	r0, ip
   256ec:	mov	r1, #32
   256f0:	mov	r2, r4
   256f4:	mov	r6, lr
   256f8:	mov	r7, ip
   256fc:	bl	11ef4 <memset@plt>
   25700:	mov	ip, r7
   25704:	mov	lr, r6
   25708:	add	ip, r7, r4
   2570c:	mov	r8, #-2147483648	; 0x80000000
   25710:	mov	r0, #10
   25714:	b	25744 <__assert_fail@plt+0x136b8>
   25718:	mov	r0, ip
   2571c:	mov	r1, #32
   25720:	mov	r2, r4
   25724:	mov	r6, lr
   25728:	mov	r7, ip
   2572c:	bl	11ef4 <memset@plt>
   25730:	mov	ip, r7
   25734:	mov	lr, r6
   25738:	add	ip, r7, r4
   2573c:	mov	r8, #-2147483648	; 0x80000000
   25740:	mov	r0, #9
   25744:	strb	r0, [ip], #1
   25748:	add	lr, r5, lr
   2574c:	ldrb	r3, [sl, #1]!
   25750:	mvn	r7, #0
   25754:	cmp	r3, #0
   25758:	bne	23fc0 <__assert_fail@plt+0x11f34>
   2575c:	b	25a68 <__assert_fail@plt+0x139dc>
   25760:	mov	r0, r5
   25764:	mov	r1, #32
   25768:	mov	r7, r2
   2576c:	mov	r6, lr
   25770:	bl	11ef4 <memset@plt>
   25774:	mov	r2, r7
   25778:	mov	lr, r6
   2577c:	add	ip, r5, r7
   25780:	add	r0, r2, lr
   25784:	add	lr, r0, r4
   25788:	b	24e34 <__assert_fail@plt+0x12da8>
   2578c:	cmp	ip, #0
   25790:	beq	25a58 <__assert_fail@plt+0x139cc>
   25794:	mov	r6, #100	; 0x64
   25798:	mov	r4, #1
   2579c:	mla	r3, r3, r6, ip
   257a0:	mov	ip, #6
   257a4:	mov	r6, #4
   257a8:	mov	lr, r8
   257ac:	cmp	r0, #79	; 0x4f
   257b0:	moveq	r5, #0
   257b4:	cmpeq	r2, #0
   257b8:	bne	249e0 <__assert_fail@plt+0x12954>
   257bc:	movw	r2, #9504	; 0x2520
   257c0:	cmp	r0, #0
   257c4:	ldr	r3, [sp, #88]	; 0x58
   257c8:	str	lr, [sp, #92]	; 0x5c
   257cc:	strh	r2, [fp, #-53]	; 0xffffffcb
   257d0:	ldr	r2, [sp, #84]	; 0x54
   257d4:	ldrne	r2, [sp, #68]	; 0x44
   257d8:	strbne	r0, [fp, #-51]	; 0xffffffcd
   257dc:	mov	r0, #0
   257e0:	strb	r0, [r2, #1]
   257e4:	strb	r1, [r2]
   257e8:	add	r0, sp, #112	; 0x70
   257ec:	sub	r2, fp, #53	; 0x35
   257f0:	mov	r1, #1024	; 0x400
   257f4:	bl	11e1c <strftime@plt>
   257f8:	cmp	r0, #0
   257fc:	beq	2586c <__assert_fail@plt+0x137e0>
   25800:	subs	r4, r9, #45	; 0x2d
   25804:	mov	r6, r0
   25808:	sub	r8, r0, #1
   2580c:	ldr	lr, [sp, #92]	; 0x5c
   25810:	ldr	r0, [sp, #104]	; 0x68
   25814:	movne	r4, r7
   25818:	cmp	r7, #0
   2581c:	mov	r7, r8
   25820:	movwmi	r4, #0
   25824:	cmp	r4, r8
   25828:	movhi	r7, r4
   2582c:	sub	r0, r0, lr
   25830:	cmp	r7, r0
   25834:	bcs	25a94 <__assert_fail@plt+0x13a08>
   25838:	ldr	r0, [sp, #108]	; 0x6c
   2583c:	cmp	r0, #0
   25840:	beq	2588c <__assert_fail@plt+0x13800>
   25844:	cmp	r4, r8
   25848:	mov	r2, r0
   2584c:	bls	258b0 <__assert_fail@plt+0x13824>
   25850:	cmp	r9, #48	; 0x30
   25854:	sub	r2, r4, r8
   25858:	cmpne	r9, #43	; 0x2b
   2585c:	str	r2, [sp, #100]	; 0x64
   25860:	bne	25894 <__assert_fail@plt+0x13808>
   25864:	mov	r1, #48	; 0x30
   25868:	b	25898 <__assert_fail@plt+0x1380c>
   2586c:	ldr	lr, [sp, #92]	; 0x5c
   25870:	ldr	ip, [sp, #108]	; 0x6c
   25874:	mov	r8, #-2147483648	; 0x80000000
   25878:	ldrb	r3, [sl, #1]!
   2587c:	mvn	r7, #0
   25880:	cmp	r3, #0
   25884:	bne	23fc0 <__assert_fail@plt+0x11f34>
   25888:	b	25a68 <__assert_fail@plt+0x139dc>
   2588c:	mov	ip, #0
   25890:	b	259f4 <__assert_fail@plt+0x13968>
   25894:	mov	r1, #32
   25898:	mov	r9, r0
   2589c:	bl	11ef4 <memset@plt>
   258a0:	ldr	r0, [sp, #100]	; 0x64
   258a4:	ldr	lr, [sp, #92]	; 0x5c
   258a8:	add	r2, r9, r0
   258ac:	mov	r0, r9
   258b0:	tst	r5, #1
   258b4:	str	r2, [sp, #100]	; 0x64
   258b8:	beq	25944 <__assert_fail@plt+0x138b8>
   258bc:	cmp	r8, #0
   258c0:	beq	259ec <__assert_fail@plt+0x13960>
   258c4:	mov	r5, r0
   258c8:	bl	11e34 <__ctype_tolower_loc@plt>
   258cc:	add	ip, sp, #112	; 0x70
   258d0:	tst	r8, #1
   258d4:	mov	r1, r8
   258d8:	beq	258f4 <__assert_fail@plt+0x13868>
   258dc:	ldrb	r1, [ip, r8]
   258e0:	ldr	r2, [r0]
   258e4:	ldr	r3, [sp, #100]	; 0x64
   258e8:	ldr	r2, [r2, r1, lsl #2]
   258ec:	sub	r1, r6, #2
   258f0:	strb	r2, [r3, r1]
   258f4:	ldr	lr, [sp, #92]	; 0x5c
   258f8:	cmp	r6, #2
   258fc:	beq	259ec <__assert_fail@plt+0x13960>
   25900:	cmp	r4, r8
   25904:	movls	r4, r8
   25908:	sub	r2, r4, r6
   2590c:	add	r5, r5, r2
   25910:	ldrb	r3, [ip, r1]
   25914:	ldr	r6, [r0]
   25918:	mov	r2, r5
   2591c:	ldr	r3, [r6, r3, lsl #2]
   25920:	strb	r3, [r2, r1]!
   25924:	add	r3, ip, r1
   25928:	subs	r1, r1, #2
   2592c:	ldrb	r3, [r3, #-1]
   25930:	ldr	r6, [r0]
   25934:	ldr	r3, [r6, r3, lsl #2]
   25938:	strb	r3, [r2, #-1]
   2593c:	bne	25910 <__assert_fail@plt+0x13884>
   25940:	b	259ec <__assert_fail@plt+0x13960>
   25944:	ldr	r1, [sp, #96]	; 0x60
   25948:	tst	r1, #1
   2594c:	beq	259d8 <__assert_fail@plt+0x1394c>
   25950:	cmp	r8, #0
   25954:	beq	259ec <__assert_fail@plt+0x13960>
   25958:	mov	r5, r0
   2595c:	bl	11e40 <__ctype_toupper_loc@plt>
   25960:	add	ip, sp, #112	; 0x70
   25964:	tst	r8, #1
   25968:	mov	r1, r8
   2596c:	beq	25988 <__assert_fail@plt+0x138fc>
   25970:	ldrb	r1, [ip, r8]
   25974:	ldr	r2, [r0]
   25978:	ldr	r3, [sp, #100]	; 0x64
   2597c:	ldr	r2, [r2, r1, lsl #2]
   25980:	sub	r1, r6, #2
   25984:	strb	r2, [r3, r1]
   25988:	ldr	lr, [sp, #92]	; 0x5c
   2598c:	cmp	r6, #2
   25990:	beq	259ec <__assert_fail@plt+0x13960>
   25994:	cmp	r4, r8
   25998:	movls	r4, r8
   2599c:	sub	r2, r4, r6
   259a0:	add	r5, r5, r2
   259a4:	ldrb	r3, [ip, r1]
   259a8:	ldr	r6, [r0]
   259ac:	mov	r2, r5
   259b0:	ldr	r3, [r6, r3, lsl #2]
   259b4:	strb	r3, [r2, r1]!
   259b8:	add	r3, ip, r1
   259bc:	subs	r1, r1, #2
   259c0:	ldrb	r3, [r3, #-1]
   259c4:	ldr	r6, [r0]
   259c8:	ldr	r3, [r6, r3, lsl #2]
   259cc:	strb	r3, [r2, #-1]
   259d0:	bne	259a4 <__assert_fail@plt+0x13918>
   259d4:	b	259ec <__assert_fail@plt+0x13960>
   259d8:	ldr	r1, [sp, #48]	; 0x30
   259dc:	mov	r0, r2
   259e0:	mov	r2, r8
   259e4:	bl	11c60 <memcpy@plt>
   259e8:	ldr	lr, [sp, #92]	; 0x5c
   259ec:	ldr	r0, [sp, #100]	; 0x64
   259f0:	add	ip, r0, r8
   259f4:	mov	r8, #-2147483648	; 0x80000000
   259f8:	add	lr, r7, lr
   259fc:	ldrb	r3, [sl, #1]!
   25a00:	mvn	r7, #0
   25a04:	cmp	r3, #0
   25a08:	bne	23fc0 <__assert_fail@plt+0x11f34>
   25a0c:	b	25a68 <__assert_fail@plt+0x139dc>
   25a10:	mov	r0, ip
   25a14:	mov	r1, #32
   25a18:	mov	r2, r4
   25a1c:	mov	r6, lr
   25a20:	mov	r7, ip
   25a24:	bl	11ef4 <memset@plt>
   25a28:	ldrb	r1, [sl]
   25a2c:	mov	ip, r7
   25a30:	mov	lr, r6
   25a34:	add	ip, r7, r4
   25a38:	mov	r8, #-2147483648	; 0x80000000
   25a3c:	strb	r1, [ip], #1
   25a40:	add	lr, r5, lr
   25a44:	ldrb	r3, [sl, #1]!
   25a48:	mvn	r7, #0
   25a4c:	cmp	r3, #0
   25a50:	bne	23fc0 <__assert_fail@plt+0x11f34>
   25a54:	b	25a68 <__assert_fail@plt+0x139dc>
   25a58:	mov	ip, #3
   25a5c:	b	253b0 <__assert_fail@plt+0x13324>
   25a60:	ldr	ip, [sp, #108]	; 0x6c
   25a64:	mov	lr, #0
   25a68:	ldr	r0, [sp, #104]	; 0x68
   25a6c:	ldr	r1, [sp, #72]	; 0x48
   25a70:	cmp	r0, #0
   25a74:	cmpne	ip, #0
   25a78:	movne	r0, #0
   25a7c:	strbne	r0, [ip]
   25a80:	ldr	r0, [sp, #76]	; 0x4c
   25a84:	str	r1, [r0]
   25a88:	mov	r0, lr
   25a8c:	sub	sp, fp, #28
   25a90:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   25a94:	mov	r0, #34	; 0x22
   25a98:	ldr	r1, [sp, #76]	; 0x4c
   25a9c:	mov	lr, #0
   25aa0:	str	r0, [r1]
   25aa4:	mov	r0, lr
   25aa8:	sub	sp, fp, #28
   25aac:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   25ab0:	mov	r0, #75	; 0x4b
   25ab4:	b	25a98 <__assert_fail@plt+0x13a0c>

00025ab8 <_obstack_begin@@Base>:
   25ab8:	push	{r4, r5, r6, sl, fp, lr}
   25abc:	add	fp, sp, #16
   25ac0:	cmp	r1, #0
   25ac4:	mov	r4, r0
   25ac8:	str	r3, [r0, #28]
   25acc:	mov	r5, r2
   25ad0:	movweq	r1, #4072	; 0xfe8
   25ad4:	cmp	r2, #0
   25ad8:	str	r1, [r0]
   25adc:	ldr	r0, [fp, #8]
   25ae0:	movweq	r5, #8
   25ae4:	sub	r6, r5, #1
   25ae8:	str	r0, [r4, #32]
   25aec:	str	r6, [r4, #24]
   25af0:	ldrb	r0, [r4, #40]	; 0x28
   25af4:	and	r0, r0, #254	; 0xfe
   25af8:	strb	r0, [r4, #40]	; 0x28
   25afc:	mov	r0, r1
   25b00:	blx	r3
   25b04:	cmp	r0, #0
   25b08:	str	r0, [r4, #4]
   25b0c:	addne	r1, r0, r6
   25b10:	rsbne	r2, r5, #0
   25b14:	addne	r1, r1, #8
   25b18:	andne	r1, r1, r2
   25b1c:	strne	r1, [r4, #12]
   25b20:	strne	r1, [r4, #8]
   25b24:	ldrne	r1, [r4]
   25b28:	addne	r1, r0, r1
   25b2c:	strne	r1, [r0]
   25b30:	strne	r1, [r4, #16]
   25b34:	movne	r1, #0
   25b38:	strne	r1, [r0, #4]
   25b3c:	ldrbne	r0, [r4, #40]	; 0x28
   25b40:	andne	r0, r0, #249	; 0xf9
   25b44:	strbne	r0, [r4, #40]	; 0x28
   25b48:	movne	r0, #1
   25b4c:	popne	{r4, r5, r6, sl, fp, pc}
   25b50:	movw	r0, #688	; 0x2b0
   25b54:	movt	r0, #4
   25b58:	ldr	r0, [r0]
   25b5c:	blx	r0

00025b60 <_obstack_begin_1@@Base>:
   25b60:	push	{r4, r5, r6, sl, fp, lr}
   25b64:	add	fp, sp, #16
   25b68:	cmp	r1, #0
   25b6c:	mov	r5, r2
   25b70:	mov	r4, r0
   25b74:	str	r3, [r0, #28]
   25b78:	ldr	r2, [fp, #8]
   25b7c:	movweq	r1, #4072	; 0xfe8
   25b80:	cmp	r5, #0
   25b84:	str	r1, [r0]
   25b88:	ldr	r0, [fp, #12]
   25b8c:	movweq	r5, #8
   25b90:	sub	r6, r5, #1
   25b94:	str	r0, [r4, #36]	; 0x24
   25b98:	str	r2, [r4, #32]
   25b9c:	str	r6, [r4, #24]
   25ba0:	ldrb	r2, [r4, #40]	; 0x28
   25ba4:	orr	r2, r2, #1
   25ba8:	strb	r2, [r4, #40]	; 0x28
   25bac:	blx	r3
   25bb0:	cmp	r0, #0
   25bb4:	str	r0, [r4, #4]
   25bb8:	addne	r1, r0, r6
   25bbc:	rsbne	r2, r5, #0
   25bc0:	addne	r1, r1, #8
   25bc4:	andne	r1, r1, r2
   25bc8:	strne	r1, [r4, #12]
   25bcc:	strne	r1, [r4, #8]
   25bd0:	ldrne	r1, [r4]
   25bd4:	addne	r1, r0, r1
   25bd8:	strne	r1, [r0]
   25bdc:	strne	r1, [r4, #16]
   25be0:	movne	r1, #0
   25be4:	strne	r1, [r0, #4]
   25be8:	ldrbne	r0, [r4, #40]	; 0x28
   25bec:	andne	r0, r0, #249	; 0xf9
   25bf0:	strbne	r0, [r4, #40]	; 0x28
   25bf4:	movne	r0, #1
   25bf8:	popne	{r4, r5, r6, sl, fp, pc}
   25bfc:	movw	r0, #688	; 0x2b0
   25c00:	movt	r0, #4
   25c04:	ldr	r0, [r0]
   25c08:	blx	r0

00025c0c <_obstack_newchunk@@Base>:
   25c0c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   25c10:	add	fp, sp, #28
   25c14:	sub	sp, sp, #4
   25c18:	mov	r4, r0
   25c1c:	ldr	r2, [r0]
   25c20:	ldr	r0, [r0, #8]
   25c24:	ldr	r3, [r4, #12]
   25c28:	sub	r9, r3, r0
   25c2c:	ldr	r0, [r4, #24]
   25c30:	mov	r3, #0
   25c34:	add	r1, r9, r1
   25c38:	adds	r6, r1, r0
   25c3c:	adc	r0, r3, #0
   25c40:	mov	r3, #100	; 0x64
   25c44:	add	r3, r3, r9, lsr #3
   25c48:	adds	r7, r3, r6
   25c4c:	movcs	r7, r6
   25c50:	cmp	r7, r2
   25c54:	movcc	r7, r2
   25c58:	cmp	r1, r9
   25c5c:	bcc	25d60 <_obstack_newchunk@@Base+0x154>
   25c60:	cmp	r0, #0
   25c64:	bne	25d60 <_obstack_newchunk@@Base+0x154>
   25c68:	ldrb	r0, [r4, #40]	; 0x28
   25c6c:	ldr	r8, [r4, #4]
   25c70:	tst	r0, #1
   25c74:	bne	25c94 <_obstack_newchunk@@Base+0x88>
   25c78:	ldr	r1, [r4, #28]
   25c7c:	mov	r0, r7
   25c80:	blx	r1
   25c84:	mov	r6, r0
   25c88:	cmp	r0, #0
   25c8c:	bne	25cb0 <_obstack_newchunk@@Base+0xa4>
   25c90:	b	25d60 <_obstack_newchunk@@Base+0x154>
   25c94:	ldr	r2, [r4, #28]
   25c98:	ldr	r0, [r4, #36]	; 0x24
   25c9c:	mov	r1, r7
   25ca0:	blx	r2
   25ca4:	mov	r6, r0
   25ca8:	cmp	r0, #0
   25cac:	beq	25d60 <_obstack_newchunk@@Base+0x154>
   25cb0:	add	r0, r6, r7
   25cb4:	str	r6, [r4, #4]
   25cb8:	str	r8, [r6, #4]
   25cbc:	mov	r2, r9
   25cc0:	str	r0, [r4, #16]
   25cc4:	str	r0, [r6]
   25cc8:	ldr	r5, [r4, #24]
   25ccc:	ldr	sl, [r4, #8]
   25cd0:	add	r0, r6, r5
   25cd4:	mov	r1, sl
   25cd8:	add	r0, r0, #8
   25cdc:	bic	r7, r0, r5
   25ce0:	mov	r0, r7
   25ce4:	bl	11c60 <memcpy@plt>
   25ce8:	ldrb	r0, [r4, #40]	; 0x28
   25cec:	tst	r0, #2
   25cf0:	bne	25d40 <_obstack_newchunk@@Base+0x134>
   25cf4:	add	r1, r8, r5
   25cf8:	mvn	r0, r5
   25cfc:	add	r1, r1, #8
   25d00:	and	r0, r1, r0
   25d04:	cmp	sl, r0
   25d08:	bne	25d40 <_obstack_newchunk@@Base+0x134>
   25d0c:	ldr	r0, [r8, #4]
   25d10:	str	r0, [r6, #4]
   25d14:	ldrb	r0, [r4, #40]	; 0x28
   25d18:	tst	r0, #1
   25d1c:	bne	25d30 <_obstack_newchunk@@Base+0x124>
   25d20:	ldr	r1, [r4, #32]
   25d24:	mov	r0, r8
   25d28:	blx	r1
   25d2c:	b	25d40 <_obstack_newchunk@@Base+0x134>
   25d30:	ldr	r2, [r4, #32]
   25d34:	ldr	r0, [r4, #36]	; 0x24
   25d38:	mov	r1, r8
   25d3c:	blx	r2
   25d40:	add	r0, r7, r9
   25d44:	str	r7, [r4, #8]
   25d48:	str	r0, [r4, #12]
   25d4c:	ldrb	r0, [r4, #40]	; 0x28
   25d50:	and	r0, r0, #253	; 0xfd
   25d54:	strb	r0, [r4, #40]	; 0x28
   25d58:	sub	sp, fp, #28
   25d5c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   25d60:	movw	r0, #688	; 0x2b0
   25d64:	movt	r0, #4
   25d68:	ldr	r0, [r0]
   25d6c:	blx	r0

00025d70 <_obstack_allocated_p@@Base>:
   25d70:	ldr	r2, [r0, #4]
   25d74:	mov	r0, #0
   25d78:	cmp	r2, #0
   25d7c:	bxeq	lr
   25d80:	cmp	r2, r1
   25d84:	bcc	25d9c <_obstack_allocated_p@@Base+0x2c>
   25d88:	ldr	r2, [r2, #4]
   25d8c:	cmp	r2, #0
   25d90:	bxeq	lr
   25d94:	cmp	r2, r1
   25d98:	bcs	25d88 <_obstack_allocated_p@@Base+0x18>
   25d9c:	ldr	r3, [r2]
   25da0:	cmp	r3, r1
   25da4:	bcc	25d88 <_obstack_allocated_p@@Base+0x18>
   25da8:	mov	r0, #1
   25dac:	bx	lr

00025db0 <_obstack_free@@Base>:
   25db0:	push	{r4, r5, r6, sl, fp, lr}
   25db4:	add	fp, sp, #16
   25db8:	mov	r5, r1
   25dbc:	ldr	r1, [r0, #4]
   25dc0:	cmp	r1, #0
   25dc4:	beq	25e30 <_obstack_free@@Base+0x80>
   25dc8:	mov	r4, r0
   25dcc:	cmp	r1, r5
   25dd0:	bcs	25e10 <_obstack_free@@Base+0x60>
   25dd4:	b	25e04 <_obstack_free@@Base+0x54>
   25dd8:	ldr	r2, [r4, #32]
   25ddc:	mov	r0, r1
   25de0:	blx	r2
   25de4:	ldrb	r0, [r4, #40]	; 0x28
   25de8:	cmp	r6, #0
   25dec:	mov	r1, r6
   25df0:	orr	r0, r0, #2
   25df4:	strb	r0, [r4, #40]	; 0x28
   25df8:	beq	25e30 <_obstack_free@@Base+0x80>
   25dfc:	cmp	r1, r5
   25e00:	bcs	25e10 <_obstack_free@@Base+0x60>
   25e04:	ldr	r0, [r1]
   25e08:	cmp	r0, r5
   25e0c:	bcs	25e3c <_obstack_free@@Base+0x8c>
   25e10:	ldrb	r0, [r4, #40]	; 0x28
   25e14:	ldr	r6, [r1, #4]
   25e18:	tst	r0, #1
   25e1c:	beq	25dd8 <_obstack_free@@Base+0x28>
   25e20:	ldr	r2, [r4, #32]
   25e24:	ldr	r0, [r4, #36]	; 0x24
   25e28:	blx	r2
   25e2c:	b	25de4 <_obstack_free@@Base+0x34>
   25e30:	cmp	r5, #0
   25e34:	popeq	{r4, r5, r6, sl, fp, pc}
   25e38:	bl	12038 <abort@plt>
   25e3c:	str	r5, [r4, #8]
   25e40:	str	r5, [r4, #12]
   25e44:	ldr	r0, [r1]
   25e48:	str	r1, [r4, #4]
   25e4c:	str	r0, [r4, #16]
   25e50:	pop	{r4, r5, r6, sl, fp, pc}

00025e54 <_obstack_memory_used@@Base>:
   25e54:	ldr	r1, [r0, #4]
   25e58:	mov	r0, #0
   25e5c:	b	25e70 <_obstack_memory_used@@Base+0x1c>
   25e60:	ldr	r2, [r1]
   25e64:	sub	r0, r0, r1
   25e68:	ldr	r1, [r1, #4]
   25e6c:	add	r0, r0, r2
   25e70:	cmp	r1, #0
   25e74:	bxeq	lr
   25e78:	b	25e60 <_obstack_memory_used@@Base+0xc>
   25e7c:	push	{fp, lr}
   25e80:	mov	fp, sp
   25e84:	movw	r0, #776	; 0x308
   25e88:	movw	r1, #61415	; 0xefe7
   25e8c:	mov	r2, #5
   25e90:	movt	r0, #4
   25e94:	movt	r1, #2
   25e98:	ldr	r4, [r0]
   25e9c:	mov	r0, #0
   25ea0:	bl	11ca8 <dcgettext@plt>
   25ea4:	movw	r2, #61680	; 0xf0f0
   25ea8:	mov	r3, r0
   25eac:	mov	r0, r4
   25eb0:	mov	r1, #1
   25eb4:	movt	r2, #2
   25eb8:	bl	11f24 <__fprintf_chk@plt>
   25ebc:	movw	r0, #684	; 0x2ac
   25ec0:	movt	r0, #4
   25ec4:	ldr	r0, [r0]
   25ec8:	bl	11e7c <exit@plt>
   25ecc:	push	{r4, r5, fp, lr}
   25ed0:	add	fp, sp, #8
   25ed4:	cmp	r0, #0
   25ed8:	beq	25f6c <_obstack_memory_used@@Base+0x118>
   25edc:	mov	r1, #47	; 0x2f
   25ee0:	mov	r4, r0
   25ee4:	bl	11f84 <strrchr@plt>
   25ee8:	cmp	r0, #0
   25eec:	mov	r5, r4
   25ef0:	addne	r5, r0, #1
   25ef4:	sub	r0, r5, r4
   25ef8:	cmp	r0, #7
   25efc:	blt	25f50 <_obstack_memory_used@@Base+0xfc>
   25f00:	movw	r1, #61488	; 0xf030
   25f04:	sub	r0, r5, #7
   25f08:	mov	r2, #7
   25f0c:	movt	r1, #2
   25f10:	bl	1202c <strncmp@plt>
   25f14:	cmp	r0, #0
   25f18:	bne	25f50 <_obstack_memory_used@@Base+0xfc>
   25f1c:	movw	r1, #61496	; 0xf038
   25f20:	mov	r0, r5
   25f24:	mov	r2, #3
   25f28:	movt	r1, #2
   25f2c:	bl	1202c <strncmp@plt>
   25f30:	cmp	r0, #0
   25f34:	beq	25f40 <_obstack_memory_used@@Base+0xec>
   25f38:	mov	r4, r5
   25f3c:	b	25f50 <_obstack_memory_used@@Base+0xfc>
   25f40:	movw	r0, #760	; 0x2f8
   25f44:	add	r4, r5, #3
   25f48:	movt	r0, #4
   25f4c:	str	r4, [r0]
   25f50:	movw	r0, #764	; 0x2fc
   25f54:	movt	r0, #4
   25f58:	str	r4, [r0]
   25f5c:	movw	r0, #5048	; 0x13b8
   25f60:	movt	r0, #4
   25f64:	str	r4, [r0]
   25f68:	pop	{r4, r5, fp, pc}
   25f6c:	movw	r0, #776	; 0x308
   25f70:	mov	r1, #55	; 0x37
   25f74:	mov	r2, #1
   25f78:	movt	r0, #4
   25f7c:	ldr	r3, [r0]
   25f80:	movw	r0, #61432	; 0xeff8
   25f84:	movt	r0, #2
   25f88:	bl	11d44 <fwrite@plt>
   25f8c:	bl	12038 <abort@plt>
   25f90:	push	{r4, r5, r6, sl, fp, lr}
   25f94:	add	fp, sp, #16
   25f98:	mov	r4, r0
   25f9c:	movw	r0, #5056	; 0x13c0
   25fa0:	movt	r0, #4
   25fa4:	cmp	r4, #0
   25fa8:	moveq	r4, r0
   25fac:	bl	11ed0 <__errno_location@plt>
   25fb0:	ldr	r6, [r0]
   25fb4:	mov	r5, r0
   25fb8:	mov	r0, r4
   25fbc:	mov	r1, #48	; 0x30
   25fc0:	bl	294f0 <_obstack_memory_used@@Base+0x369c>
   25fc4:	str	r6, [r5]
   25fc8:	pop	{r4, r5, r6, sl, fp, pc}
   25fcc:	movw	r1, #5056	; 0x13c0
   25fd0:	cmp	r0, #0
   25fd4:	movt	r1, #4
   25fd8:	movne	r1, r0
   25fdc:	ldr	r0, [r1]
   25fe0:	bx	lr
   25fe4:	movw	r2, #5056	; 0x13c0
   25fe8:	cmp	r0, #0
   25fec:	movt	r2, #4
   25ff0:	movne	r2, r0
   25ff4:	str	r1, [r2]
   25ff8:	bx	lr
   25ffc:	movw	r3, #5056	; 0x13c0
   26000:	cmp	r0, #0
   26004:	and	r2, r2, #1
   26008:	movt	r3, #4
   2600c:	movne	r3, r0
   26010:	ubfx	r0, r1, #5, #3
   26014:	and	r1, r1, #31
   26018:	add	ip, r3, r0, lsl #2
   2601c:	mov	r0, #1
   26020:	ldr	r3, [ip, #8]
   26024:	and	r0, r0, r3, lsr r1
   26028:	eor	r2, r0, r2
   2602c:	eor	r1, r3, r2, lsl r1
   26030:	str	r1, [ip, #8]
   26034:	bx	lr
   26038:	movw	r2, #5056	; 0x13c0
   2603c:	cmp	r0, #0
   26040:	movt	r2, #4
   26044:	movne	r2, r0
   26048:	ldr	r0, [r2, #4]
   2604c:	str	r1, [r2, #4]
   26050:	bx	lr
   26054:	push	{fp, lr}
   26058:	mov	fp, sp
   2605c:	movw	r3, #5056	; 0x13c0
   26060:	cmp	r0, #0
   26064:	movt	r3, #4
   26068:	movne	r3, r0
   2606c:	cmp	r1, #0
   26070:	mov	r0, #10
   26074:	cmpne	r2, #0
   26078:	str	r0, [r3]
   2607c:	bne	26084 <_obstack_memory_used@@Base+0x230>
   26080:	bl	12038 <abort@plt>
   26084:	str	r1, [r3, #40]	; 0x28
   26088:	str	r2, [r3, #44]	; 0x2c
   2608c:	pop	{fp, pc}
   26090:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   26094:	add	fp, sp, #28
   26098:	sub	sp, sp, #20
   2609c:	mov	r7, r0
   260a0:	ldr	r0, [fp, #8]
   260a4:	movw	r5, #5056	; 0x13c0
   260a8:	mov	r8, r3
   260ac:	mov	r9, r2
   260b0:	mov	sl, r1
   260b4:	movt	r5, #4
   260b8:	cmp	r0, #0
   260bc:	movne	r5, r0
   260c0:	bl	11ed0 <__errno_location@plt>
   260c4:	ldr	r2, [r5, #40]	; 0x28
   260c8:	ldr	r3, [r5, #44]	; 0x2c
   260cc:	mov	r4, r0
   260d0:	ldm	r5, {r0, r1}
   260d4:	add	r5, r5, #8
   260d8:	ldr	r6, [r4]
   260dc:	stm	sp, {r0, r1, r5}
   260e0:	mov	r0, r7
   260e4:	mov	r1, sl
   260e8:	str	r2, [sp, #12]
   260ec:	str	r3, [sp, #16]
   260f0:	mov	r2, r9
   260f4:	mov	r3, r8
   260f8:	bl	26108 <_obstack_memory_used@@Base+0x2b4>
   260fc:	str	r6, [r4]
   26100:	sub	sp, fp, #28
   26104:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   26108:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2610c:	add	fp, sp, #28
   26110:	sub	sp, sp, #156	; 0x9c
   26114:	str	r0, [fp, #-84]	; 0xffffffac
   26118:	add	r0, r2, #1
   2611c:	mov	r6, r1
   26120:	mov	r7, r3
   26124:	str	r2, [fp, #-80]	; 0xffffffb0
   26128:	str	r0, [sp, #80]	; 0x50
   2612c:	ldr	r0, [fp, #12]
   26130:	and	r1, r0, #1
   26134:	str	r1, [sp, #36]	; 0x24
   26138:	and	r1, r0, #4
   2613c:	str	r1, [sp, #32]
   26140:	ubfx	r8, r0, #1, #1
   26144:	bl	11d68 <__ctype_get_mb_cur_max@plt>
   26148:	str	r0, [sp, #40]	; 0x28
   2614c:	ldr	r0, [fp, #24]
   26150:	ldr	r4, [fp, #8]
   26154:	mov	r1, #0
   26158:	str	r1, [fp, #-52]	; 0xffffffcc
   2615c:	mov	r1, #0
   26160:	str	r1, [sp, #60]	; 0x3c
   26164:	mov	r1, #1
   26168:	str	r1, [sp, #84]	; 0x54
   2616c:	str	r0, [sp, #76]	; 0x4c
   26170:	ldr	r0, [fp, #20]
   26174:	str	r0, [sp, #72]	; 0x48
   26178:	mov	r0, #0
   2617c:	str	r0, [sp, #56]	; 0x38
   26180:	mov	r0, #0
   26184:	str	r0, [fp, #-88]	; 0xffffffa8
   26188:	mov	r0, #0
   2618c:	str	r0, [fp, #-72]	; 0xffffffb8
   26190:	mov	r0, #0
   26194:	cmp	r4, #10
   26198:	bhi	274b4 <_obstack_memory_used@@Base+0x1660>
   2619c:	add	r1, pc, #24
   261a0:	ldr	ip, [fp, #-84]	; 0xffffffac
   261a4:	ldr	lr, [fp, #-80]	; 0xffffffb0
   261a8:	mov	r5, r6
   261ac:	mov	r9, #0
   261b0:	mov	r2, #1
   261b4:	mov	r3, #0
   261b8:	ldr	pc, [r1, r4, lsl #2]
   261bc:	andeq	r6, r2, r4, lsl #5
   261c0:	andeq	r6, r2, r0, asr #5
   261c4:	muleq	r2, r4, r2
   261c8:	andeq	r6, r2, ip, ror r2
   261cc:			; <UNDEFINED> instruction: 0x000262b4
   261d0:	andeq	r6, r2, r8, lsl r3
   261d4:	andeq	r6, r2, r4, lsr #5
   261d8:	muleq	r2, r0, r5
   261dc:	andeq	r6, r2, r8, ror #3
   261e0:	andeq	r6, r2, r8, ror #3
   261e4:	andeq	r6, r2, r0, lsr #8
   261e8:	movw	r6, #61570	; 0xf082
   261ec:	mov	r0, #0
   261f0:	mov	r2, #5
   261f4:	movt	r6, #2
   261f8:	mov	r1, r6
   261fc:	bl	11ca8 <dcgettext@plt>
   26200:	cmp	r0, r6
   26204:	str	r0, [sp, #72]	; 0x48
   26208:	bne	263f8 <_obstack_memory_used@@Base+0x5a4>
   2620c:	bl	2a934 <_obstack_memory_used@@Base+0x4ae0>
   26210:	ldrb	r1, [r0]
   26214:	and	r1, r1, #223	; 0xdf
   26218:	cmp	r1, #71	; 0x47
   2621c:	beq	26378 <_obstack_memory_used@@Base+0x524>
   26220:	cmp	r1, #85	; 0x55
   26224:	bne	263dc <_obstack_memory_used@@Base+0x588>
   26228:	ldrb	r1, [r0, #1]
   2622c:	and	r1, r1, #223	; 0xdf
   26230:	cmp	r1, #84	; 0x54
   26234:	bne	263dc <_obstack_memory_used@@Base+0x588>
   26238:	ldrb	r1, [r0, #2]
   2623c:	and	r1, r1, #223	; 0xdf
   26240:	cmp	r1, #70	; 0x46
   26244:	bne	263dc <_obstack_memory_used@@Base+0x588>
   26248:	ldrb	r1, [r0, #3]
   2624c:	cmp	r1, #45	; 0x2d
   26250:	bne	263dc <_obstack_memory_used@@Base+0x588>
   26254:	ldrb	r1, [r0, #4]
   26258:	cmp	r1, #56	; 0x38
   2625c:	bne	263dc <_obstack_memory_used@@Base+0x588>
   26260:	ldrb	r0, [r0, #5]
   26264:	cmp	r0, #0
   26268:	movw	r0, #61572	; 0xf084
   2626c:	movt	r0, #2
   26270:	str	r0, [sp, #72]	; 0x48
   26274:	bne	263dc <_obstack_memory_used@@Base+0x588>
   26278:	b	263f8 <_obstack_memory_used@@Base+0x5a4>
   2627c:	mov	r0, #1
   26280:	b	262c0 <_obstack_memory_used@@Base+0x46c>
   26284:	mov	r4, #0
   26288:	mov	r9, #0
   2628c:	mov	r2, r0
   26290:	b	26310 <_obstack_memory_used@@Base+0x4bc>
   26294:	tst	r8, #1
   26298:	bne	262c0 <_obstack_memory_used@@Base+0x46c>
   2629c:	mov	r2, r0
   262a0:	b	262e8 <_obstack_memory_used@@Base+0x494>
   262a4:	mov	r0, #1
   262a8:	mov	r9, #0
   262ac:	mov	r4, #5
   262b0:	b	2632c <_obstack_memory_used@@Base+0x4d8>
   262b4:	mov	r2, #1
   262b8:	tst	r8, #1
   262bc:	beq	262e8 <_obstack_memory_used@@Base+0x494>
   262c0:	mov	r1, #1
   262c4:	mov	r9, #0
   262c8:	mov	r4, #2
   262cc:	mov	r2, r0
   262d0:	mov	r3, #1
   262d4:	str	r1, [fp, #-72]	; 0xffffffb8
   262d8:	movw	r1, #62484	; 0xf414
   262dc:	movt	r1, #2
   262e0:	str	r1, [fp, #-88]	; 0xffffffa8
   262e4:	b	26590 <_obstack_memory_used@@Base+0x73c>
   262e8:	cmp	r5, #0
   262ec:	mov	r9, #1
   262f0:	mov	r4, #2
   262f4:	movne	r0, #39	; 0x27
   262f8:	strbne	r0, [ip]
   262fc:	movw	r0, #62484	; 0xf414
   26300:	movt	r0, #2
   26304:	str	r0, [fp, #-88]	; 0xffffffa8
   26308:	mov	r0, #1
   2630c:	str	r0, [fp, #-72]	; 0xffffffb8
   26310:	mov	r3, #0
   26314:	b	26590 <_obstack_memory_used@@Base+0x73c>
   26318:	mov	r4, #5
   2631c:	tst	r8, #1
   26320:	beq	26348 <_obstack_memory_used@@Base+0x4f4>
   26324:	mov	r0, #1
   26328:	mov	r9, #0
   2632c:	str	r0, [fp, #-72]	; 0xffffffb8
   26330:	movw	r0, #61568	; 0xf080
   26334:	mov	r2, #1
   26338:	mov	r3, #1
   2633c:	movt	r0, #2
   26340:	str	r0, [fp, #-88]	; 0xffffffa8
   26344:	b	26590 <_obstack_memory_used@@Base+0x73c>
   26348:	cmp	r5, #0
   2634c:	mov	r3, #0
   26350:	mov	r9, #1
   26354:	mov	r2, #1
   26358:	movne	r0, #34	; 0x22
   2635c:	strbne	r0, [ip]
   26360:	movw	r0, #61568	; 0xf080
   26364:	movt	r0, #2
   26368:	str	r0, [fp, #-88]	; 0xffffffa8
   2636c:	mov	r0, #1
   26370:	str	r0, [fp, #-72]	; 0xffffffb8
   26374:	b	26590 <_obstack_memory_used@@Base+0x73c>
   26378:	ldrb	r1, [r0, #1]
   2637c:	and	r1, r1, #223	; 0xdf
   26380:	cmp	r1, #66	; 0x42
   26384:	bne	263dc <_obstack_memory_used@@Base+0x588>
   26388:	ldrb	r1, [r0, #2]
   2638c:	cmp	r1, #49	; 0x31
   26390:	bne	263dc <_obstack_memory_used@@Base+0x588>
   26394:	ldrb	r1, [r0, #3]
   26398:	cmp	r1, #56	; 0x38
   2639c:	bne	263dc <_obstack_memory_used@@Base+0x588>
   263a0:	ldrb	r1, [r0, #4]
   263a4:	cmp	r1, #48	; 0x30
   263a8:	bne	263dc <_obstack_memory_used@@Base+0x588>
   263ac:	ldrb	r1, [r0, #5]
   263b0:	cmp	r1, #51	; 0x33
   263b4:	bne	263dc <_obstack_memory_used@@Base+0x588>
   263b8:	ldrb	r1, [r0, #6]
   263bc:	cmp	r1, #48	; 0x30
   263c0:	bne	263dc <_obstack_memory_used@@Base+0x588>
   263c4:	ldrb	r0, [r0, #7]
   263c8:	cmp	r0, #0
   263cc:	movw	r0, #61580	; 0xf08c
   263d0:	movt	r0, #2
   263d4:	str	r0, [sp, #72]	; 0x48
   263d8:	beq	263f8 <_obstack_memory_used@@Base+0x5a4>
   263dc:	movw	r1, #61568	; 0xf080
   263e0:	movw	r0, #62484	; 0xf414
   263e4:	cmp	r4, #9
   263e8:	movt	r1, #2
   263ec:	movt	r0, #2
   263f0:	moveq	r0, r1
   263f4:	str	r0, [sp, #72]	; 0x48
   263f8:	movw	r6, #62484	; 0xf414
   263fc:	mov	r0, #0
   26400:	mov	r2, #5
   26404:	movt	r6, #2
   26408:	mov	r1, r6
   2640c:	bl	11ca8 <dcgettext@plt>
   26410:	cmp	r0, r6
   26414:	str	r0, [sp, #76]	; 0x4c
   26418:	beq	26464 <_obstack_memory_used@@Base+0x610>
   2641c:	ldr	ip, [fp, #-84]	; 0xffffffac
   26420:	mov	r9, #0
   26424:	tst	r8, #1
   26428:	bne	2656c <_obstack_memory_used@@Base+0x718>
   2642c:	ldr	r0, [sp, #72]	; 0x48
   26430:	ldrb	r0, [r0]
   26434:	cmp	r0, #0
   26438:	beq	2656c <_obstack_memory_used@@Base+0x718>
   2643c:	ldr	r1, [sp, #72]	; 0x48
   26440:	mov	r9, #0
   26444:	add	r1, r1, #1
   26448:	cmp	r9, r5
   2644c:	strbcc	r0, [ip, r9]
   26450:	ldrb	r0, [r1, r9]
   26454:	add	r9, r9, #1
   26458:	cmp	r0, #0
   2645c:	bne	26448 <_obstack_memory_used@@Base+0x5f4>
   26460:	b	2656c <_obstack_memory_used@@Base+0x718>
   26464:	bl	2a934 <_obstack_memory_used@@Base+0x4ae0>
   26468:	ldrb	r1, [r0]
   2646c:	and	r1, r1, #223	; 0xdf
   26470:	cmp	r1, #71	; 0x47
   26474:	beq	264e4 <_obstack_memory_used@@Base+0x690>
   26478:	ldr	ip, [fp, #-84]	; 0xffffffac
   2647c:	cmp	r1, #85	; 0x55
   26480:	bne	26540 <_obstack_memory_used@@Base+0x6ec>
   26484:	ldrb	r1, [r0, #1]
   26488:	and	r1, r1, #223	; 0xdf
   2648c:	cmp	r1, #84	; 0x54
   26490:	bne	26540 <_obstack_memory_used@@Base+0x6ec>
   26494:	ldrb	r1, [r0, #2]
   26498:	and	r1, r1, #223	; 0xdf
   2649c:	cmp	r1, #70	; 0x46
   264a0:	bne	26540 <_obstack_memory_used@@Base+0x6ec>
   264a4:	ldrb	r1, [r0, #3]
   264a8:	cmp	r1, #45	; 0x2d
   264ac:	bne	26540 <_obstack_memory_used@@Base+0x6ec>
   264b0:	ldrb	r1, [r0, #4]
   264b4:	cmp	r1, #56	; 0x38
   264b8:	bne	26540 <_obstack_memory_used@@Base+0x6ec>
   264bc:	ldrb	r0, [r0, #5]
   264c0:	cmp	r0, #0
   264c4:	bne	26540 <_obstack_memory_used@@Base+0x6ec>
   264c8:	movw	r0, #61576	; 0xf088
   264cc:	movt	r0, #2
   264d0:	str	r0, [sp, #76]	; 0x4c
   264d4:	mov	r9, #0
   264d8:	tst	r8, #1
   264dc:	beq	2642c <_obstack_memory_used@@Base+0x5d8>
   264e0:	b	2656c <_obstack_memory_used@@Base+0x718>
   264e4:	ldrb	r1, [r0, #1]
   264e8:	ldr	ip, [fp, #-84]	; 0xffffffac
   264ec:	and	r1, r1, #223	; 0xdf
   264f0:	cmp	r1, #66	; 0x42
   264f4:	bne	26540 <_obstack_memory_used@@Base+0x6ec>
   264f8:	ldrb	r1, [r0, #2]
   264fc:	cmp	r1, #49	; 0x31
   26500:	bne	26540 <_obstack_memory_used@@Base+0x6ec>
   26504:	ldrb	r1, [r0, #3]
   26508:	cmp	r1, #56	; 0x38
   2650c:	bne	26540 <_obstack_memory_used@@Base+0x6ec>
   26510:	ldrb	r1, [r0, #4]
   26514:	cmp	r1, #48	; 0x30
   26518:	bne	26540 <_obstack_memory_used@@Base+0x6ec>
   2651c:	ldrb	r1, [r0, #5]
   26520:	cmp	r1, #51	; 0x33
   26524:	bne	26540 <_obstack_memory_used@@Base+0x6ec>
   26528:	ldrb	r1, [r0, #6]
   2652c:	cmp	r1, #48	; 0x30
   26530:	bne	26540 <_obstack_memory_used@@Base+0x6ec>
   26534:	ldrb	r0, [r0, #7]
   26538:	cmp	r0, #0
   2653c:	beq	27354 <_obstack_memory_used@@Base+0x1500>
   26540:	movw	r0, #62484	; 0xf414
   26544:	cmp	r4, #9
   26548:	movt	r0, #2
   2654c:	mov	r1, r0
   26550:	movw	r0, #61568	; 0xf080
   26554:	movt	r0, #2
   26558:	moveq	r1, r0
   2655c:	str	r1, [sp, #76]	; 0x4c
   26560:	mov	r9, #0
   26564:	tst	r8, #1
   26568:	beq	2642c <_obstack_memory_used@@Base+0x5d8>
   2656c:	ldr	r6, [sp, #76]	; 0x4c
   26570:	mov	r0, r6
   26574:	bl	11eac <strlen@plt>
   26578:	ldr	ip, [fp, #-84]	; 0xffffffac
   2657c:	ldr	lr, [fp, #-80]	; 0xffffffb0
   26580:	str	r0, [fp, #-72]	; 0xffffffb8
   26584:	str	r6, [fp, #-88]	; 0xffffffa8
   26588:	mov	r2, #1
   2658c:	mov	r3, r8
   26590:	ldr	r0, [fp, #-72]	; 0xffffffb8
   26594:	str	r4, [fp, #-64]	; 0xffffffc0
   26598:	mov	sl, #0
   2659c:	str	r3, [fp, #-76]	; 0xffffffb4
   265a0:	str	r2, [sp, #88]	; 0x58
   265a4:	cmp	r0, #0
   265a8:	movwne	r0, #1
   265ac:	and	r1, r0, r3
   265b0:	and	r1, r2, r1
   265b4:	str	r1, [sp, #48]	; 0x30
   265b8:	sub	r1, r4, #2
   265bc:	clz	r1, r1
   265c0:	lsr	r1, r1, #5
   265c4:	and	r1, r1, r3
   265c8:	str	r1, [sp, #44]	; 0x2c
   265cc:	subs	r1, r4, #2
   265d0:	eor	r4, r3, #1
   265d4:	movwne	r1, #1
   265d8:	str	r4, [sp, #92]	; 0x5c
   265dc:	orr	r4, r1, r4
   265e0:	and	r1, r1, r2
   265e4:	and	r0, r0, r1
   265e8:	str	r4, [sp, #64]	; 0x40
   265ec:	ldr	r4, [sp, #84]	; 0x54
   265f0:	str	r0, [fp, #-60]	; 0xffffffc4
   265f4:	orr	r0, r1, r3
   265f8:	ldr	r1, [fp, #16]
   265fc:	eor	r0, r0, #1
   26600:	clz	r1, r1
   26604:	lsr	r1, r1, #5
   26608:	orr	r0, r1, r0
   2660c:	str	r0, [fp, #-68]	; 0xffffffbc
   26610:	eor	r0, r2, #1
   26614:	str	r0, [sp, #52]	; 0x34
   26618:	cmn	r7, #1
   2661c:	beq	2662c <_obstack_memory_used@@Base+0x7d8>
   26620:	cmp	sl, r7
   26624:	bne	26638 <_obstack_memory_used@@Base+0x7e4>
   26628:	b	272cc <_obstack_memory_used@@Base+0x1478>
   2662c:	ldrb	r0, [lr, sl]
   26630:	cmp	r0, #0
   26634:	beq	272d4 <_obstack_memory_used@@Base+0x1480>
   26638:	ldr	r0, [fp, #-60]	; 0xffffffc4
   2663c:	cmp	r0, #0
   26640:	beq	266a0 <_obstack_memory_used@@Base+0x84c>
   26644:	ldr	r0, [fp, #-72]	; 0xffffffb8
   26648:	mov	r6, r5
   2664c:	add	r5, sl, r0
   26650:	cmp	r0, #2
   26654:	bcc	266c0 <_obstack_memory_used@@Base+0x86c>
   26658:	mov	r0, #0
   2665c:	cmn	r7, #1
   26660:	str	r0, [fp, #-56]	; 0xffffffc8
   26664:	bne	2667c <_obstack_memory_used@@Base+0x828>
   26668:	mov	r0, lr
   2666c:	bl	11eac <strlen@plt>
   26670:	ldr	lr, [fp, #-80]	; 0xffffffb0
   26674:	ldr	ip, [fp, #-84]	; 0xffffffac
   26678:	mov	r7, r0
   2667c:	cmp	r5, r7
   26680:	bls	266d0 <_obstack_memory_used@@Base+0x87c>
   26684:	mov	r0, #0
   26688:	mov	r5, r6
   2668c:	str	r0, [fp, #-48]	; 0xffffffd0
   26690:	ldrb	r6, [lr, sl]
   26694:	cmp	r6, #126	; 0x7e
   26698:	bls	26720 <_obstack_memory_used@@Base+0x8cc>
   2669c:	b	26c7c <_obstack_memory_used@@Base+0xe28>
   266a0:	mov	r0, #0
   266a4:	str	r0, [fp, #-56]	; 0xffffffc8
   266a8:	mov	r0, #0
   266ac:	str	r0, [fp, #-48]	; 0xffffffd0
   266b0:	ldrb	r6, [lr, sl]
   266b4:	cmp	r6, #126	; 0x7e
   266b8:	bls	26720 <_obstack_memory_used@@Base+0x8cc>
   266bc:	b	26c7c <_obstack_memory_used@@Base+0xe28>
   266c0:	mov	r0, #0
   266c4:	str	r0, [fp, #-56]	; 0xffffffc8
   266c8:	cmp	r5, r7
   266cc:	bhi	26684 <_obstack_memory_used@@Base+0x830>
   266d0:	ldr	r1, [fp, #-88]	; 0xffffffa8
   266d4:	ldr	r2, [fp, #-72]	; 0xffffffb8
   266d8:	add	r0, lr, sl
   266dc:	bl	11e94 <bcmp@plt>
   266e0:	ldr	r2, [sp, #92]	; 0x5c
   266e4:	cmp	r0, #0
   266e8:	mov	r1, r0
   266ec:	mov	r5, r6
   266f0:	movwne	r1, #1
   266f4:	orr	r1, r1, r2
   266f8:	tst	r1, #1
   266fc:	beq	27394 <_obstack_memory_used@@Base+0x1540>
   26700:	ldr	ip, [fp, #-84]	; 0xffffffac
   26704:	ldr	lr, [fp, #-80]	; 0xffffffb0
   26708:	clz	r0, r0
   2670c:	lsr	r0, r0, #5
   26710:	str	r0, [fp, #-48]	; 0xffffffd0
   26714:	ldrb	r6, [lr, sl]
   26718:	cmp	r6, #126	; 0x7e
   2671c:	bhi	26c7c <_obstack_memory_used@@Base+0xe28>
   26720:	add	r3, pc, #16
   26724:	mov	r8, #1
   26728:	mov	r2, #110	; 0x6e
   2672c:	mov	r0, #97	; 0x61
   26730:	mov	r1, #0
   26734:	ldr	pc, [r3, r6, lsl #2]
   26738:	andeq	r6, r2, r4, lsr sl
   2673c:	andeq	r6, r2, ip, ror ip
   26740:	andeq	r6, r2, ip, ror ip
   26744:	andeq	r6, r2, ip, ror ip
   26748:	andeq	r6, r2, ip, ror ip
   2674c:	andeq	r6, r2, ip, ror ip
   26750:	andeq	r6, r2, ip, ror ip
   26754:	andeq	r6, r2, r0, lsr sp
   26758:	andeq	r6, r2, r4, lsl sl
   2675c:	andeq	r6, r2, ip, lsl #20
   26760:	andeq	r6, r2, r0, lsr #20
   26764:	andeq	r6, r2, r0, asr fp
   26768:	andeq	r6, r2, r4, lsl #20
   2676c:	andeq	r6, r2, ip, lsl sl
   26770:	andeq	r6, r2, ip, ror ip
   26774:	andeq	r6, r2, ip, ror ip
   26778:	andeq	r6, r2, ip, ror ip
   2677c:	andeq	r6, r2, ip, ror ip
   26780:	andeq	r6, r2, ip, ror ip
   26784:	andeq	r6, r2, ip, ror ip
   26788:	andeq	r6, r2, ip, ror ip
   2678c:	andeq	r6, r2, ip, ror ip
   26790:	andeq	r6, r2, ip, ror ip
   26794:	andeq	r6, r2, ip, ror ip
   26798:	andeq	r6, r2, ip, ror ip
   2679c:	andeq	r6, r2, ip, ror ip
   267a0:	andeq	r6, r2, ip, ror ip
   267a4:	andeq	r6, r2, ip, ror ip
   267a8:	andeq	r6, r2, ip, ror ip
   267ac:	andeq	r6, r2, ip, ror ip
   267b0:	andeq	r6, r2, ip, ror ip
   267b4:	andeq	r6, r2, ip, ror ip
   267b8:	andeq	r6, r2, r8, lsr #19
   267bc:	andeq	r6, r2, ip, lsr #19
   267c0:	andeq	r6, r2, ip, lsr #19
   267c4:	muleq	r2, ip, r9
   267c8:	andeq	r6, r2, ip, lsr #19
   267cc:	andeq	r6, r2, r4, lsr r9
   267d0:	andeq	r6, r2, ip, lsr #19
   267d4:	andeq	r6, r2, r8, asr fp
   267d8:	andeq	r6, r2, ip, lsr #19
   267dc:	andeq	r6, r2, ip, lsr #19
   267e0:	andeq	r6, r2, ip, lsr #19
   267e4:	andeq	r6, r2, r4, lsr r9
   267e8:	andeq	r6, r2, r4, lsr r9
   267ec:	andeq	r6, r2, r4, lsr r9
   267f0:	andeq	r6, r2, r4, lsr r9
   267f4:	andeq	r6, r2, r4, lsr r9
   267f8:	andeq	r6, r2, r4, lsr r9
   267fc:	andeq	r6, r2, r4, lsr r9
   26800:	andeq	r6, r2, r4, lsr r9
   26804:	andeq	r6, r2, r4, lsr r9
   26808:	andeq	r6, r2, r4, lsr r9
   2680c:	andeq	r6, r2, r4, lsr r9
   26810:	andeq	r6, r2, r4, lsr r9
   26814:	andeq	r6, r2, r4, lsr r9
   26818:	andeq	r6, r2, r4, lsr r9
   2681c:	andeq	r6, r2, r4, lsr r9
   26820:	andeq	r6, r2, r4, lsr r9
   26824:	andeq	r6, r2, ip, lsr #19
   26828:	andeq	r6, r2, ip, lsr #19
   2682c:	andeq	r6, r2, ip, lsr #19
   26830:	andeq	r6, r2, ip, lsr #19
   26834:	andeq	r6, r2, ip, lsl fp
   26838:	andeq	r6, r2, ip, ror ip
   2683c:	andeq	r6, r2, r4, lsr r9
   26840:	andeq	r6, r2, r4, lsr r9
   26844:	andeq	r6, r2, r4, lsr r9
   26848:	andeq	r6, r2, r4, lsr r9
   2684c:	andeq	r6, r2, r4, lsr r9
   26850:	andeq	r6, r2, r4, lsr r9
   26854:	andeq	r6, r2, r4, lsr r9
   26858:	andeq	r6, r2, r4, lsr r9
   2685c:	andeq	r6, r2, r4, lsr r9
   26860:	andeq	r6, r2, r4, lsr r9
   26864:	andeq	r6, r2, r4, lsr r9
   26868:	andeq	r6, r2, r4, lsr r9
   2686c:	andeq	r6, r2, r4, lsr r9
   26870:	andeq	r6, r2, r4, lsr r9
   26874:	andeq	r6, r2, r4, lsr r9
   26878:	andeq	r6, r2, r4, lsr r9
   2687c:	andeq	r6, r2, r4, lsr r9
   26880:	andeq	r6, r2, r4, lsr r9
   26884:	andeq	r6, r2, r4, lsr r9
   26888:	andeq	r6, r2, r4, lsr r9
   2688c:	andeq	r6, r2, r4, lsr r9
   26890:	andeq	r6, r2, r4, lsr r9
   26894:	andeq	r6, r2, r4, lsr r9
   26898:	andeq	r6, r2, r4, lsr r9
   2689c:	andeq	r6, r2, r4, lsr r9
   268a0:	andeq	r6, r2, r4, lsr r9
   268a4:	andeq	r6, r2, ip, lsr #19
   268a8:	andeq	r6, r2, r0, ror #19
   268ac:	andeq	r6, r2, r4, lsr r9
   268b0:	andeq	r6, r2, ip, lsr #19
   268b4:	andeq	r6, r2, r4, lsr r9
   268b8:	andeq	r6, r2, ip, lsr #19
   268bc:	andeq	r6, r2, r4, lsr r9
   268c0:	andeq	r6, r2, r4, lsr r9
   268c4:	andeq	r6, r2, r4, lsr r9
   268c8:	andeq	r6, r2, r4, lsr r9
   268cc:	andeq	r6, r2, r4, lsr r9
   268d0:	andeq	r6, r2, r4, lsr r9
   268d4:	andeq	r6, r2, r4, lsr r9
   268d8:	andeq	r6, r2, r4, lsr r9
   268dc:	andeq	r6, r2, r4, lsr r9
   268e0:	andeq	r6, r2, r4, lsr r9
   268e4:	andeq	r6, r2, r4, lsr r9
   268e8:	andeq	r6, r2, r4, lsr r9
   268ec:	andeq	r6, r2, r4, lsr r9
   268f0:	andeq	r6, r2, r4, lsr r9
   268f4:	andeq	r6, r2, r4, lsr r9
   268f8:	andeq	r6, r2, r4, lsr r9
   268fc:	andeq	r6, r2, r4, lsr r9
   26900:	andeq	r6, r2, r4, lsr r9
   26904:	andeq	r6, r2, r4, lsr r9
   26908:	andeq	r6, r2, r4, lsr r9
   2690c:	andeq	r6, r2, r4, lsr r9
   26910:	andeq	r6, r2, r4, lsr r9
   26914:	andeq	r6, r2, r4, lsr r9
   26918:	andeq	r6, r2, r4, lsr r9
   2691c:	andeq	r6, r2, r4, lsr r9
   26920:	andeq	r6, r2, r4, lsr r9
   26924:	andeq	r6, r2, r4, ror r9
   26928:	andeq	r6, r2, ip, lsr #19
   2692c:	andeq	r6, r2, r4, ror r9
   26930:	muleq	r2, ip, r9
   26934:	ldr	r0, [fp, #-68]	; 0xffffffbc
   26938:	tst	r0, #1
   2693c:	bne	26bf4 <_obstack_memory_used@@Base+0xda0>
   26940:	ldr	r1, [fp, #16]
   26944:	ubfx	r0, r6, #5, #3
   26948:	mov	r2, #1
   2694c:	ldr	r0, [r1, r0, lsl #2]
   26950:	and	r1, r6, #31
   26954:	tst	r0, r2, lsl r1
   26958:	beq	26bf4 <_obstack_memory_used@@Base+0xda0>
   2695c:	mov	r0, r6
   26960:	mov	r1, r8
   26964:	ldr	r2, [fp, #-76]	; 0xffffffb4
   26968:	tst	r2, #1
   2696c:	beq	26c14 <_obstack_memory_used@@Base+0xdc0>
   26970:	b	27370 <_obstack_memory_used@@Base+0x151c>
   26974:	cmp	r7, #1
   26978:	beq	2699c <_obstack_memory_used@@Base+0xb48>
   2697c:	mov	r8, #0
   26980:	cmn	r7, #1
   26984:	bne	26be0 <_obstack_memory_used@@Base+0xd8c>
   26988:	ldrb	r0, [lr, #1]
   2698c:	cmp	r0, #0
   26990:	beq	2699c <_obstack_memory_used@@Base+0xb48>
   26994:	mvn	r7, #0
   26998:	b	26be0 <_obstack_memory_used@@Base+0xd8c>
   2699c:	mov	r8, #0
   269a0:	cmp	sl, #0
   269a4:	bne	26be0 <_obstack_memory_used@@Base+0xd8c>
   269a8:	mov	r1, #1
   269ac:	ldr	r0, [fp, #-64]	; 0xffffffc0
   269b0:	cmp	r0, #2
   269b4:	bne	269cc <_obstack_memory_used@@Base+0xb78>
   269b8:	ldr	r0, [fp, #-76]	; 0xffffffb4
   269bc:	mov	r8, r1
   269c0:	tst	r0, #1
   269c4:	beq	26934 <_obstack_memory_used@@Base+0xae0>
   269c8:	b	27370 <_obstack_memory_used@@Base+0x151c>
   269cc:	mov	r8, r1
   269d0:	ldr	r0, [fp, #-68]	; 0xffffffbc
   269d4:	tst	r0, #1
   269d8:	beq	26940 <_obstack_memory_used@@Base+0xaec>
   269dc:	b	26bf4 <_obstack_memory_used@@Base+0xda0>
   269e0:	ldr	r0, [fp, #-64]	; 0xffffffc0
   269e4:	cmp	r0, #2
   269e8:	bne	26ca8 <_obstack_memory_used@@Base+0xe54>
   269ec:	ldr	r0, [fp, #-76]	; 0xffffffb4
   269f0:	tst	r0, #1
   269f4:	bne	27370 <_obstack_memory_used@@Base+0x151c>
   269f8:	mov	r0, #0
   269fc:	str	r0, [fp, #-56]	; 0xffffffc8
   26a00:	b	26cc0 <_obstack_memory_used@@Base+0xe6c>
   26a04:	mov	r0, #102	; 0x66
   26a08:	b	26d30 <_obstack_memory_used@@Base+0xedc>
   26a0c:	mov	r2, #116	; 0x74
   26a10:	b	26a20 <_obstack_memory_used@@Base+0xbcc>
   26a14:	mov	r0, #98	; 0x62
   26a18:	b	26d30 <_obstack_memory_used@@Base+0xedc>
   26a1c:	mov	r2, #114	; 0x72
   26a20:	ldr	r0, [sp, #64]	; 0x40
   26a24:	tst	r0, #1
   26a28:	mov	r0, r2
   26a2c:	bne	26d30 <_obstack_memory_used@@Base+0xedc>
   26a30:	b	27370 <_obstack_memory_used@@Base+0x151c>
   26a34:	ldr	r0, [sp, #88]	; 0x58
   26a38:	tst	r0, #1
   26a3c:	beq	26d50 <_obstack_memory_used@@Base+0xefc>
   26a40:	ldr	r0, [fp, #-76]	; 0xffffffb4
   26a44:	tst	r0, #1
   26a48:	bne	274ac <_obstack_memory_used@@Base+0x1658>
   26a4c:	ldr	r0, [fp, #-64]	; 0xffffffc0
   26a50:	ldr	r1, [fp, #-52]	; 0xffffffcc
   26a54:	subs	r0, r0, #2
   26a58:	movwne	r0, #1
   26a5c:	orr	r0, r0, r1
   26a60:	tst	r0, #1
   26a64:	bne	26aa0 <_obstack_memory_used@@Base+0xc4c>
   26a68:	cmp	r9, r5
   26a6c:	movcc	r0, #39	; 0x27
   26a70:	strbcc	r0, [ip, r9]
   26a74:	add	r0, r9, #1
   26a78:	cmp	r0, r5
   26a7c:	movcc	r1, #36	; 0x24
   26a80:	strbcc	r1, [ip, r0]
   26a84:	add	r0, r9, #2
   26a88:	add	r9, r9, #3
   26a8c:	cmp	r0, r5
   26a90:	movcc	r1, #39	; 0x27
   26a94:	strbcc	r1, [ip, r0]
   26a98:	mov	r0, #1
   26a9c:	str	r0, [fp, #-52]	; 0xffffffcc
   26aa0:	mov	r1, #1
   26aa4:	cmp	r9, r5
   26aa8:	mov	r8, #0
   26aac:	mov	r6, #48	; 0x30
   26ab0:	str	r1, [fp, #-56]	; 0xffffffc8
   26ab4:	ldr	r1, [fp, #-64]	; 0xffffffc0
   26ab8:	movcc	r0, #92	; 0x5c
   26abc:	strbcc	r0, [ip, r9]
   26ac0:	add	r0, r9, #1
   26ac4:	cmp	r1, #2
   26ac8:	beq	26f1c <_obstack_memory_used@@Base+0x10c8>
   26acc:	add	r1, sl, #1
   26ad0:	cmp	r1, r7
   26ad4:	bcs	26f1c <_obstack_memory_used@@Base+0x10c8>
   26ad8:	ldrb	r1, [lr, r1]
   26adc:	sub	r1, r1, #48	; 0x30
   26ae0:	uxtb	r1, r1
   26ae4:	cmp	r1, #9
   26ae8:	bhi	26f1c <_obstack_memory_used@@Base+0x10c8>
   26aec:	cmp	r0, r5
   26af0:	movcc	r1, #48	; 0x30
   26af4:	strbcc	r1, [ip, r0]
   26af8:	add	r0, r9, #2
   26afc:	add	r9, r9, #3
   26b00:	cmp	r0, r5
   26b04:	movcc	r1, #48	; 0x30
   26b08:	strbcc	r1, [ip, r0]
   26b0c:	ldr	r0, [fp, #-68]	; 0xffffffbc
   26b10:	tst	r0, #1
   26b14:	beq	26940 <_obstack_memory_used@@Base+0xaec>
   26b18:	b	26bf4 <_obstack_memory_used@@Base+0xda0>
   26b1c:	ldr	r0, [fp, #-64]	; 0xffffffc0
   26b20:	mov	r6, #63	; 0x3f
   26b24:	cmp	r0, #5
   26b28:	beq	26f30 <_obstack_memory_used@@Base+0x10dc>
   26b2c:	mov	r1, #0
   26b30:	cmp	r0, #2
   26b34:	str	r1, [fp, #-56]	; 0xffffffc8
   26b38:	bne	26ff8 <_obstack_memory_used@@Base+0x11a4>
   26b3c:	ldr	r0, [fp, #-76]	; 0xffffffb4
   26b40:	mov	r8, #0
   26b44:	tst	r0, #1
   26b48:	beq	26934 <_obstack_memory_used@@Base+0xae0>
   26b4c:	b	27370 <_obstack_memory_used@@Base+0x151c>
   26b50:	mov	r0, #118	; 0x76
   26b54:	b	26d30 <_obstack_memory_used@@Base+0xedc>
   26b58:	mov	r0, #1
   26b5c:	mov	r6, #39	; 0x27
   26b60:	str	r0, [sp, #60]	; 0x3c
   26b64:	ldr	r0, [fp, #-64]	; 0xffffffc0
   26b68:	cmp	r0, #2
   26b6c:	bne	26d70 <_obstack_memory_used@@Base+0xf1c>
   26b70:	ldr	r0, [fp, #-76]	; 0xffffffb4
   26b74:	tst	r0, #1
   26b78:	bne	27370 <_obstack_memory_used@@Base+0x151c>
   26b7c:	ldr	r2, [sp, #56]	; 0x38
   26b80:	clz	r1, r5
   26b84:	mov	r8, #1
   26b88:	lsr	r1, r1, #5
   26b8c:	cmp	r2, #0
   26b90:	mov	r0, r2
   26b94:	movwne	r0, #1
   26b98:	orrs	r0, r0, r1
   26b9c:	moveq	r2, r5
   26ba0:	moveq	r5, r0
   26ba4:	cmp	r9, r5
   26ba8:	str	r2, [sp, #56]	; 0x38
   26bac:	movcc	r0, #39	; 0x27
   26bb0:	strbcc	r0, [ip, r9]
   26bb4:	add	r0, r9, #1
   26bb8:	cmp	r0, r5
   26bbc:	movcc	r1, #92	; 0x5c
   26bc0:	strbcc	r1, [ip, r0]
   26bc4:	add	r0, r9, #2
   26bc8:	add	r9, r9, #3
   26bcc:	cmp	r0, r5
   26bd0:	movcc	r1, #39	; 0x27
   26bd4:	strbcc	r1, [ip, r0]
   26bd8:	mov	r0, #0
   26bdc:	str	r0, [fp, #-52]	; 0xffffffcc
   26be0:	mov	r0, #0
   26be4:	str	r0, [fp, #-56]	; 0xffffffc8
   26be8:	ldr	r0, [fp, #-68]	; 0xffffffbc
   26bec:	tst	r0, #1
   26bf0:	beq	26940 <_obstack_memory_used@@Base+0xaec>
   26bf4:	ldr	r0, [fp, #-48]	; 0xffffffd0
   26bf8:	mov	r1, r8
   26bfc:	cmp	r0, #0
   26c00:	mov	r0, r6
   26c04:	beq	26cc8 <_obstack_memory_used@@Base+0xe74>
   26c08:	ldr	r2, [fp, #-76]	; 0xffffffb4
   26c0c:	tst	r2, #1
   26c10:	bne	27370 <_obstack_memory_used@@Base+0x151c>
   26c14:	ldr	r2, [fp, #-64]	; 0xffffffc0
   26c18:	ldr	r3, [fp, #-52]	; 0xffffffcc
   26c1c:	subs	r2, r2, #2
   26c20:	movwne	r2, #1
   26c24:	orr	r2, r2, r3
   26c28:	tst	r2, #1
   26c2c:	bne	26c68 <_obstack_memory_used@@Base+0xe14>
   26c30:	cmp	r9, r5
   26c34:	movcc	r2, #39	; 0x27
   26c38:	strbcc	r2, [ip, r9]
   26c3c:	add	r2, r9, #1
   26c40:	cmp	r2, r5
   26c44:	movcc	r3, #36	; 0x24
   26c48:	strbcc	r3, [ip, r2]
   26c4c:	add	r2, r9, #2
   26c50:	add	r9, r9, #3
   26c54:	cmp	r2, r5
   26c58:	movcc	r3, #39	; 0x27
   26c5c:	strbcc	r3, [ip, r2]
   26c60:	mov	r2, #1
   26c64:	str	r2, [fp, #-52]	; 0xffffffcc
   26c68:	cmp	r9, r5
   26c6c:	movcc	r2, #92	; 0x5c
   26c70:	strbcc	r2, [ip, r9]
   26c74:	add	r9, r9, #1
   26c78:	b	26d10 <_obstack_memory_used@@Base+0xebc>
   26c7c:	ldr	r0, [sp, #40]	; 0x28
   26c80:	cmp	r0, #1
   26c84:	bne	26d84 <_obstack_memory_used@@Base+0xf30>
   26c88:	bl	11e64 <__ctype_b_loc@plt>
   26c8c:	ldr	r0, [r0]
   26c90:	ldr	lr, [fp, #-80]	; 0xffffffb0
   26c94:	mov	r1, #1
   26c98:	add	r0, r0, r6, lsl #1
   26c9c:	ldrb	r0, [r0, #1]
   26ca0:	ubfx	r8, r0, #6, #1
   26ca4:	b	270dc <_obstack_memory_used@@Base+0x1288>
   26ca8:	ldr	r1, [sp, #48]	; 0x30
   26cac:	mov	r0, #0
   26cb0:	str	r0, [fp, #-56]	; 0xffffffc8
   26cb4:	mov	r0, #92	; 0x5c
   26cb8:	cmp	r1, #0
   26cbc:	beq	26d30 <_obstack_memory_used@@Base+0xedc>
   26cc0:	mov	r6, #92	; 0x5c
   26cc4:	mov	r8, #0
   26cc8:	ldr	r0, [fp, #-56]	; 0xffffffc8
   26ccc:	cmp	r0, #0
   26cd0:	bne	26d08 <_obstack_memory_used@@Base+0xeb4>
   26cd4:	ldr	r0, [fp, #-52]	; 0xffffffcc
   26cd8:	tst	r0, #1
   26cdc:	beq	26d08 <_obstack_memory_used@@Base+0xeb4>
   26ce0:	cmp	r9, r5
   26ce4:	movcc	r0, #39	; 0x27
   26ce8:	strbcc	r0, [ip, r9]
   26cec:	add	r0, r9, #1
   26cf0:	add	r9, r9, #2
   26cf4:	cmp	r0, r5
   26cf8:	movcc	r1, #39	; 0x27
   26cfc:	strbcc	r1, [ip, r0]
   26d00:	mov	r0, #0
   26d04:	str	r0, [fp, #-52]	; 0xffffffcc
   26d08:	mov	r1, r8
   26d0c:	mov	r0, r6
   26d10:	cmp	r9, r5
   26d14:	and	r4, r4, r1
   26d18:	strbcc	r0, [ip, r9]
   26d1c:	add	r9, r9, #1
   26d20:	add	sl, sl, #1
   26d24:	cmn	r7, #1
   26d28:	bne	26620 <_obstack_memory_used@@Base+0x7cc>
   26d2c:	b	2662c <_obstack_memory_used@@Base+0x7d8>
   26d30:	mov	r1, #0
   26d34:	mov	r8, #0
   26d38:	str	r1, [fp, #-56]	; 0xffffffc8
   26d3c:	ldr	r1, [sp, #88]	; 0x58
   26d40:	tst	r1, #1
   26d44:	mov	r1, #0
   26d48:	beq	26934 <_obstack_memory_used@@Base+0xae0>
   26d4c:	b	26c08 <_obstack_memory_used@@Base+0xdb4>
   26d50:	ldr	r0, [sp, #36]	; 0x24
   26d54:	mov	r6, #0
   26d58:	mov	r8, #0
   26d5c:	cmp	r0, #0
   26d60:	mov	r0, #0
   26d64:	str	r0, [fp, #-56]	; 0xffffffc8
   26d68:	bne	26d20 <_obstack_memory_used@@Base+0xecc>
   26d6c:	b	26934 <_obstack_memory_used@@Base+0xae0>
   26d70:	mov	r8, #1
   26d74:	ldr	r0, [fp, #-68]	; 0xffffffbc
   26d78:	tst	r0, #1
   26d7c:	beq	26940 <_obstack_memory_used@@Base+0xaec>
   26d80:	b	26bf4 <_obstack_memory_used@@Base+0xda0>
   26d84:	mov	r0, #0
   26d88:	cmn	r7, #1
   26d8c:	str	r0, [fp, #-36]	; 0xffffffdc
   26d90:	str	r0, [fp, #-40]	; 0xffffffd8
   26d94:	bne	26da8 <_obstack_memory_used@@Base+0xf54>
   26d98:	mov	r0, lr
   26d9c:	bl	11eac <strlen@plt>
   26da0:	ldr	lr, [fp, #-80]	; 0xffffffb0
   26da4:	mov	r7, r0
   26da8:	ldr	r0, [sp, #44]	; 0x2c
   26dac:	str	r4, [sp, #84]	; 0x54
   26db0:	str	r5, [sp, #28]
   26db4:	cmp	r0, #0
   26db8:	beq	2700c <_obstack_memory_used@@Base+0x11b8>
   26dbc:	ldr	r0, [sp, #80]	; 0x50
   26dc0:	mov	r8, #1
   26dc4:	mov	r5, #0
   26dc8:	add	r0, r0, sl
   26dcc:	str	r0, [sp, #24]
   26dd0:	sub	r0, fp, #40	; 0x28
   26dd4:	mov	r3, r0
   26dd8:	b	26e14 <_obstack_memory_used@@Base+0xfc0>
   26ddc:	ldr	r5, [sp, #68]	; 0x44
   26de0:	add	r5, r0, r5
   26de4:	ldr	r0, [fp, #-44]	; 0xffffffd4
   26de8:	bl	11d14 <iswprint@plt>
   26dec:	cmp	r0, #0
   26df0:	sub	r4, fp, #40	; 0x28
   26df4:	movwne	r0, #1
   26df8:	and	r8, r8, r0
   26dfc:	mov	r0, r4
   26e00:	bl	11c78 <mbsinit@plt>
   26e04:	ldr	lr, [fp, #-80]	; 0xffffffb0
   26e08:	mov	r3, r4
   26e0c:	cmp	r0, #0
   26e10:	bne	270d0 <_obstack_memory_used@@Base+0x127c>
   26e14:	str	r5, [sp, #68]	; 0x44
   26e18:	add	r5, r5, sl
   26e1c:	sub	r0, fp, #44	; 0x2c
   26e20:	add	r1, lr, r5
   26e24:	sub	r2, r7, r5
   26e28:	bl	2309c <__assert_fail@plt+0x11010>
   26e2c:	cmn	r0, #2
   26e30:	beq	27090 <_obstack_memory_used@@Base+0x123c>
   26e34:	ldr	ip, [fp, #-84]	; 0xffffffac
   26e38:	cmn	r0, #1
   26e3c:	beq	27084 <_obstack_memory_used@@Base+0x1230>
   26e40:	cmp	r0, #0
   26e44:	beq	27088 <_obstack_memory_used@@Base+0x1234>
   26e48:	cmp	r0, #2
   26e4c:	bcc	26ddc <_obstack_memory_used@@Base+0xf88>
   26e50:	ldr	r1, [sp, #68]	; 0x44
   26e54:	ldr	r2, [sp, #24]
   26e58:	add	r1, r2, r1
   26e5c:	sub	r2, r0, #1
   26e60:	ldrb	r3, [r1]
   26e64:	sub	r3, r3, #91	; 0x5b
   26e68:	cmp	r3, #33	; 0x21
   26e6c:	bls	26e8c <_obstack_memory_used@@Base+0x1038>
   26e70:	add	r1, r1, #1
   26e74:	subs	r2, r2, #1
   26e78:	beq	26ddc <_obstack_memory_used@@Base+0xf88>
   26e7c:	ldrb	r3, [r1]
   26e80:	sub	r3, r3, #91	; 0x5b
   26e84:	cmp	r3, #33	; 0x21
   26e88:	bhi	26e70 <_obstack_memory_used@@Base+0x101c>
   26e8c:	add	r5, pc, #0
   26e90:	ldr	pc, [r5, r3, lsl #2]
   26e94:	andeq	r7, r2, r8, lsr #7
   26e98:	andeq	r7, r2, r8, lsr #7
   26e9c:	andeq	r6, r2, r0, ror lr
   26ea0:	andeq	r7, r2, r8, lsr #7
   26ea4:	andeq	r6, r2, r0, ror lr
   26ea8:	andeq	r7, r2, r8, lsr #7
   26eac:	andeq	r6, r2, r0, ror lr
   26eb0:	andeq	r6, r2, r0, ror lr
   26eb4:	andeq	r6, r2, r0, ror lr
   26eb8:	andeq	r6, r2, r0, ror lr
   26ebc:	andeq	r6, r2, r0, ror lr
   26ec0:	andeq	r6, r2, r0, ror lr
   26ec4:	andeq	r6, r2, r0, ror lr
   26ec8:	andeq	r6, r2, r0, ror lr
   26ecc:	andeq	r6, r2, r0, ror lr
   26ed0:	andeq	r6, r2, r0, ror lr
   26ed4:	andeq	r6, r2, r0, ror lr
   26ed8:	andeq	r6, r2, r0, ror lr
   26edc:	andeq	r6, r2, r0, ror lr
   26ee0:	andeq	r6, r2, r0, ror lr
   26ee4:	andeq	r6, r2, r0, ror lr
   26ee8:	andeq	r6, r2, r0, ror lr
   26eec:	andeq	r6, r2, r0, ror lr
   26ef0:	andeq	r6, r2, r0, ror lr
   26ef4:	andeq	r6, r2, r0, ror lr
   26ef8:	andeq	r6, r2, r0, ror lr
   26efc:	andeq	r6, r2, r0, ror lr
   26f00:	andeq	r6, r2, r0, ror lr
   26f04:	andeq	r6, r2, r0, ror lr
   26f08:	andeq	r6, r2, r0, ror lr
   26f0c:	andeq	r6, r2, r0, ror lr
   26f10:	andeq	r6, r2, r0, ror lr
   26f14:	andeq	r6, r2, r0, ror lr
   26f18:	andeq	r7, r2, r8, lsr #7
   26f1c:	mov	r9, r0
   26f20:	ldr	r0, [fp, #-68]	; 0xffffffbc
   26f24:	tst	r0, #1
   26f28:	beq	26940 <_obstack_memory_used@@Base+0xaec>
   26f2c:	b	26bf4 <_obstack_memory_used@@Base+0xda0>
   26f30:	mov	r0, #0
   26f34:	str	r0, [fp, #-56]	; 0xffffffc8
   26f38:	ldr	r0, [sp, #32]
   26f3c:	cmp	r0, #0
   26f40:	beq	26ff8 <_obstack_memory_used@@Base+0x11a4>
   26f44:	add	r0, sl, #2
   26f48:	mov	r1, r7
   26f4c:	cmp	r0, r7
   26f50:	bcs	26ff8 <_obstack_memory_used@@Base+0x11a4>
   26f54:	add	r1, sl, lr
   26f58:	ldrb	r1, [r1, #1]
   26f5c:	cmp	r1, #63	; 0x3f
   26f60:	bne	26ff8 <_obstack_memory_used@@Base+0x11a4>
   26f64:	ldrb	r8, [lr, r0]
   26f68:	sub	r2, r8, #33	; 0x21
   26f6c:	cmp	r2, #29
   26f70:	bhi	26ff8 <_obstack_memory_used@@Base+0x11a4>
   26f74:	mov	r1, r4
   26f78:	movw	r4, #20929	; 0x51c1
   26f7c:	mov	r3, #1
   26f80:	movt	r4, #14336	; 0x3800
   26f84:	tst	r4, r3, lsl r2
   26f88:	beq	272b4 <_obstack_memory_used@@Base+0x1460>
   26f8c:	ldr	r2, [fp, #-76]	; 0xffffffb4
   26f90:	tst	r2, #1
   26f94:	bne	27370 <_obstack_memory_used@@Base+0x151c>
   26f98:	cmp	r9, r5
   26f9c:	mov	r6, r8
   26fa0:	mov	r4, r1
   26fa4:	mov	sl, r0
   26fa8:	mov	r8, #0
   26fac:	movcc	r2, #63	; 0x3f
   26fb0:	strbcc	r2, [ip, r9]
   26fb4:	add	r2, r9, #1
   26fb8:	cmp	r2, r5
   26fbc:	movcc	r3, #34	; 0x22
   26fc0:	strbcc	r3, [ip, r2]
   26fc4:	add	r2, r9, #2
   26fc8:	cmp	r2, r5
   26fcc:	movcc	r3, #34	; 0x22
   26fd0:	strbcc	r3, [ip, r2]
   26fd4:	add	r2, r9, #3
   26fd8:	add	r9, r9, #4
   26fdc:	cmp	r2, r5
   26fe0:	movcc	r3, #63	; 0x3f
   26fe4:	strbcc	r3, [ip, r2]
   26fe8:	ldr	r0, [fp, #-68]	; 0xffffffbc
   26fec:	tst	r0, #1
   26ff0:	beq	26940 <_obstack_memory_used@@Base+0xaec>
   26ff4:	b	26bf4 <_obstack_memory_used@@Base+0xda0>
   26ff8:	mov	r8, #0
   26ffc:	ldr	r0, [fp, #-68]	; 0xffffffbc
   27000:	tst	r0, #1
   27004:	beq	26940 <_obstack_memory_used@@Base+0xaec>
   27008:	b	26bf4 <_obstack_memory_used@@Base+0xda0>
   2700c:	mov	r8, #1
   27010:	mov	r5, #0
   27014:	sub	r4, fp, #40	; 0x28
   27018:	str	r5, [sp, #68]	; 0x44
   2701c:	add	r5, r5, sl
   27020:	sub	r0, fp, #44	; 0x2c
   27024:	mov	r3, r4
   27028:	add	r1, lr, r5
   2702c:	sub	r2, r7, r5
   27030:	bl	2309c <__assert_fail@plt+0x11010>
   27034:	cmn	r0, #2
   27038:	beq	27090 <_obstack_memory_used@@Base+0x123c>
   2703c:	cmn	r0, #1
   27040:	beq	27084 <_obstack_memory_used@@Base+0x1230>
   27044:	ldr	r5, [sp, #68]	; 0x44
   27048:	cmp	r0, #0
   2704c:	beq	270cc <_obstack_memory_used@@Base+0x1278>
   27050:	add	r5, r0, r5
   27054:	ldr	r0, [fp, #-44]	; 0xffffffd4
   27058:	bl	11d14 <iswprint@plt>
   2705c:	cmp	r0, #0
   27060:	sub	r4, fp, #40	; 0x28
   27064:	movwne	r0, #1
   27068:	and	r8, r8, r0
   2706c:	mov	r0, r4
   27070:	bl	11c78 <mbsinit@plt>
   27074:	ldr	lr, [fp, #-80]	; 0xffffffb0
   27078:	cmp	r0, #0
   2707c:	beq	27018 <_obstack_memory_used@@Base+0x11c4>
   27080:	b	270d0 <_obstack_memory_used@@Base+0x127c>
   27084:	mov	r8, #0
   27088:	ldr	lr, [fp, #-80]	; 0xffffffb0
   2708c:	b	270c4 <_obstack_memory_used@@Base+0x1270>
   27090:	ldr	lr, [fp, #-80]	; 0xffffffb0
   27094:	mov	r8, #0
   27098:	cmp	r5, r7
   2709c:	bcs	270c4 <_obstack_memory_used@@Base+0x1270>
   270a0:	ldrb	r0, [lr, r5]
   270a4:	cmp	r0, #0
   270a8:	beq	270c4 <_obstack_memory_used@@Base+0x1270>
   270ac:	ldr	r0, [sp, #68]	; 0x44
   270b0:	add	r0, r0, #1
   270b4:	add	r5, r0, sl
   270b8:	str	r0, [sp, #68]	; 0x44
   270bc:	cmp	r5, r7
   270c0:	bcc	270a0 <_obstack_memory_used@@Base+0x124c>
   270c4:	ldr	r5, [sp, #68]	; 0x44
   270c8:	b	270d0 <_obstack_memory_used@@Base+0x127c>
   270cc:	ldr	lr, [fp, #-80]	; 0xffffffb0
   270d0:	mov	r1, r5
   270d4:	ldr	r5, [sp, #28]
   270d8:	ldr	r4, [sp, #84]	; 0x54
   270dc:	ldr	r0, [sp, #52]	; 0x34
   270e0:	ldr	ip, [fp, #-84]	; 0xffffffac
   270e4:	cmp	r1, #1
   270e8:	orr	r2, r8, r0
   270ec:	mov	r0, r1
   270f0:	bhi	270fc <_obstack_memory_used@@Base+0x12a8>
   270f4:	tst	r2, #1
   270f8:	bne	26934 <_obstack_memory_used@@Base+0xae0>
   270fc:	add	r0, r0, sl
   27100:	str	r2, [sp, #84]	; 0x54
   27104:	str	r0, [fp, #-56]	; 0xffffffc8
   27108:	mov	r0, #0
   2710c:	tst	r2, #1
   27110:	bne	271f0 <_obstack_memory_used@@Base+0x139c>
   27114:	ldr	r1, [fp, #-76]	; 0xffffffb4
   27118:	tst	r1, #1
   2711c:	bne	27370 <_obstack_memory_used@@Base+0x151c>
   27120:	ldr	r1, [fp, #-64]	; 0xffffffc0
   27124:	ldr	r0, [fp, #-52]	; 0xffffffcc
   27128:	subs	r2, r1, #2
   2712c:	movwne	r2, #1
   27130:	orr	r2, r2, r0
   27134:	tst	r2, #1
   27138:	bne	27174 <_obstack_memory_used@@Base+0x1320>
   2713c:	cmp	r9, r5
   27140:	add	r2, r9, #1
   27144:	mov	r0, #1
   27148:	movcc	r1, #39	; 0x27
   2714c:	str	r0, [fp, #-52]	; 0xffffffcc
   27150:	strbcc	r1, [ip, r9]
   27154:	cmp	r2, r5
   27158:	movcc	r1, #36	; 0x24
   2715c:	strbcc	r1, [ip, r2]
   27160:	add	r2, r9, #2
   27164:	add	r9, r9, #3
   27168:	cmp	r2, r5
   2716c:	movcc	r1, #39	; 0x27
   27170:	strbcc	r1, [ip, r2]
   27174:	cmp	r9, r5
   27178:	add	r2, r9, #1
   2717c:	movcc	r1, #92	; 0x5c
   27180:	strbcc	r1, [ip, r9]
   27184:	cmp	r2, r5
   27188:	bcs	2719c <_obstack_memory_used@@Base+0x1348>
   2718c:	uxtb	r3, r6
   27190:	mov	r1, #48	; 0x30
   27194:	orr	r3, r1, r3, lsr #6
   27198:	strb	r3, [ip, r2]
   2719c:	add	r2, r9, #2
   271a0:	add	r9, r9, #3
   271a4:	cmp	r2, r5
   271a8:	lsrcc	r3, r6, #3
   271ac:	movcc	r1, #6
   271b0:	bficc	r3, r1, #3, #29
   271b4:	mov	r1, #6
   271b8:	bfi	r6, r1, #3, #29
   271bc:	strbcc	r3, [ip, r2]
   271c0:	mov	r2, #1
   271c4:	b	27224 <_obstack_memory_used@@Base+0x13d0>
   271c8:	ldr	r1, [sp, #80]	; 0x50
   271cc:	cmp	r9, r2
   271d0:	mov	r5, r2
   271d4:	ldr	r2, [sp, #84]	; 0x54
   271d8:	strbcc	r6, [ip, r9]
   271dc:	add	r9, r9, #1
   271e0:	ldrb	r6, [r1, sl]
   271e4:	mov	sl, r3
   271e8:	tst	r2, #1
   271ec:	beq	27114 <_obstack_memory_used@@Base+0x12c0>
   271f0:	ldr	r1, [fp, #-48]	; 0xffffffd0
   271f4:	tst	r1, #1
   271f8:	beq	27218 <_obstack_memory_used@@Base+0x13c4>
   271fc:	cmp	r9, r5
   27200:	mov	r2, r0
   27204:	movcc	r1, #92	; 0x5c
   27208:	strbcc	r1, [ip, r9]
   2720c:	add	r9, r9, #1
   27210:	mov	r1, #0
   27214:	b	27220 <_obstack_memory_used@@Base+0x13cc>
   27218:	mov	r1, #0
   2721c:	mov	r2, r0
   27220:	str	r1, [fp, #-48]	; 0xffffffd0
   27224:	mov	r0, r2
   27228:	and	r1, r2, #1
   2722c:	ldr	r2, [fp, #-56]	; 0xffffffc8
   27230:	add	r3, sl, #1
   27234:	cmp	r2, r3
   27238:	bls	27298 <_obstack_memory_used@@Base+0x1444>
   2723c:	mov	r2, r5
   27240:	ldr	r5, [fp, #-52]	; 0xffffffcc
   27244:	cmp	r1, #0
   27248:	movwne	r1, #1
   2724c:	mvn	r5, r5
   27250:	orr	r5, r5, r1
   27254:	tst	r5, #1
   27258:	bne	271c8 <_obstack_memory_used@@Base+0x1374>
   2725c:	cmp	r9, r2
   27260:	movcc	r5, r4
   27264:	movcc	r4, #39	; 0x27
   27268:	strbcc	r4, [ip, r9]
   2726c:	movcc	r4, r5
   27270:	add	r5, r9, #1
   27274:	add	r9, r9, #2
   27278:	cmp	r5, r2
   2727c:	movcc	r1, r4
   27280:	movcc	r4, #39	; 0x27
   27284:	strbcc	r4, [ip, r5]
   27288:	movcc	r4, r1
   2728c:	mov	r1, #0
   27290:	str	r1, [fp, #-52]	; 0xffffffcc
   27294:	b	271c8 <_obstack_memory_used@@Base+0x1374>
   27298:	cmp	r1, #0
   2729c:	movwne	r1, #1
   272a0:	str	r1, [fp, #-56]	; 0xffffffc8
   272a4:	ldr	r0, [fp, #-56]	; 0xffffffc8
   272a8:	cmp	r0, #0
   272ac:	beq	26cd4 <_obstack_memory_used@@Base+0xe80>
   272b0:	b	26d08 <_obstack_memory_used@@Base+0xeb4>
   272b4:	mov	r8, #0
   272b8:	mov	r4, r1
   272bc:	ldr	r0, [fp, #-68]	; 0xffffffbc
   272c0:	tst	r0, #1
   272c4:	beq	26940 <_obstack_memory_used@@Base+0xaec>
   272c8:	b	26bf4 <_obstack_memory_used@@Base+0xda0>
   272cc:	mov	r7, sl
   272d0:	b	272d8 <_obstack_memory_used@@Base+0x1484>
   272d4:	mvn	r7, #0
   272d8:	ldr	r1, [fp, #-64]	; 0xffffffc0
   272dc:	ldr	r3, [fp, #-76]	; 0xffffffb4
   272e0:	ldr	r2, [sp, #88]	; 0x58
   272e4:	eor	r0, r1, #2
   272e8:	orr	r0, r0, r9
   272ec:	clz	r0, r0
   272f0:	lsr	r0, r0, #5
   272f4:	tst	r3, r0
   272f8:	bne	27370 <_obstack_memory_used@@Base+0x151c>
   272fc:	subs	r0, r1, #2
   27300:	movwne	r0, #1
   27304:	orr	r0, r3, r0
   27308:	tst	r0, #1
   2730c:	ldreq	r0, [sp, #60]	; 0x3c
   27310:	eoreq	r0, r0, #1
   27314:	tsteq	r0, #1
   27318:	bne	2744c <_obstack_memory_used@@Base+0x15f8>
   2731c:	tst	r4, #1
   27320:	bne	27410 <_obstack_memory_used@@Base+0x15bc>
   27324:	ldr	r6, [sp, #56]	; 0x38
   27328:	mov	r8, #0
   2732c:	cmp	r6, #0
   27330:	beq	27448 <_obstack_memory_used@@Base+0x15f4>
   27334:	mov	r1, #0
   27338:	mov	r4, #2
   2733c:	cmp	r5, #0
   27340:	mov	r0, r2
   27344:	mov	r3, #0
   27348:	str	r1, [sp, #84]	; 0x54
   2734c:	beq	26194 <_obstack_memory_used@@Base+0x340>
   27350:	b	2744c <_obstack_memory_used@@Base+0x15f8>
   27354:	movw	r0, #61584	; 0xf090
   27358:	movt	r0, #2
   2735c:	str	r0, [sp, #76]	; 0x4c
   27360:	mov	r9, #0
   27364:	tst	r8, #1
   27368:	beq	2642c <_obstack_memory_used@@Base+0x5d8>
   2736c:	b	2656c <_obstack_memory_used@@Base+0x718>
   27370:	ldr	r1, [sp, #88]	; 0x58
   27374:	mov	r0, #2
   27378:	tst	r1, #1
   2737c:	movwne	r0, #4
   27380:	ldr	r2, [fp, #-64]	; 0xffffffc0
   27384:	ldr	r1, [fp, #12]
   27388:	cmp	r2, #2
   2738c:	moveq	r2, r0
   27390:	b	273c8 <_obstack_memory_used@@Base+0x1574>
   27394:	ldr	ip, [fp, #-84]	; 0xffffffac
   27398:	ldr	lr, [fp, #-80]	; 0xffffffb0
   2739c:	ldr	r1, [fp, #12]
   273a0:	ldr	r2, [fp, #-64]	; 0xffffffc0
   273a4:	b	273c8 <_obstack_memory_used@@Base+0x1574>
   273a8:	ldr	r1, [sp, #88]	; 0x58
   273ac:	ldr	lr, [fp, #-80]	; 0xffffffb0
   273b0:	ldr	r5, [sp, #28]
   273b4:	mov	r0, #2
   273b8:	tst	r1, #1
   273bc:	ldr	r1, [fp, #12]
   273c0:	movwne	r0, #4
   273c4:	mov	r2, r0
   273c8:	mov	r0, #0
   273cc:	bic	r1, r1, #2
   273d0:	str	r2, [sp]
   273d4:	mov	r2, lr
   273d8:	str	r0, [sp, #8]
   273dc:	ldr	r0, [sp, #72]	; 0x48
   273e0:	str	r1, [sp, #4]
   273e4:	mov	r1, r5
   273e8:	str	r0, [sp, #12]
   273ec:	ldr	r0, [sp, #76]	; 0x4c
   273f0:	str	r0, [sp, #16]
   273f4:	mov	r0, ip
   273f8:	mov	r3, r7
   273fc:	bl	26108 <_obstack_memory_used@@Base+0x2b4>
   27400:	mov	r9, r0
   27404:	mov	r0, r9
   27408:	sub	sp, fp, #28
   2740c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   27410:	mov	r0, #5
   27414:	ldr	r1, [sp, #56]	; 0x38
   27418:	ldr	r2, [fp, #-80]	; 0xffffffb0
   2741c:	str	r0, [sp]
   27420:	ldr	r0, [fp, #12]
   27424:	str	r0, [sp, #4]
   27428:	ldr	r0, [fp, #16]
   2742c:	str	r0, [sp, #8]
   27430:	ldr	r0, [sp, #72]	; 0x48
   27434:	str	r0, [sp, #12]
   27438:	ldr	r0, [sp, #76]	; 0x4c
   2743c:	str	r0, [sp, #16]
   27440:	ldr	r0, [fp, #-84]	; 0xffffffac
   27444:	b	273f8 <_obstack_memory_used@@Base+0x15a4>
   27448:	mov	r3, #0
   2744c:	ldr	r1, [fp, #-88]	; 0xffffffa8
   27450:	cmp	r1, #0
   27454:	beq	27490 <_obstack_memory_used@@Base+0x163c>
   27458:	ldr	r2, [fp, #-84]	; 0xffffffac
   2745c:	tst	r3, #1
   27460:	bne	27494 <_obstack_memory_used@@Base+0x1640>
   27464:	ldrb	r0, [r1]
   27468:	cmp	r0, #0
   2746c:	beq	27494 <_obstack_memory_used@@Base+0x1640>
   27470:	add	r1, r1, #1
   27474:	cmp	r9, r5
   27478:	strbcc	r0, [r2, r9]
   2747c:	add	r9, r9, #1
   27480:	ldrb	r0, [r1], #1
   27484:	cmp	r0, #0
   27488:	bne	27474 <_obstack_memory_used@@Base+0x1620>
   2748c:	b	27494 <_obstack_memory_used@@Base+0x1640>
   27490:	ldr	r2, [fp, #-84]	; 0xffffffac
   27494:	cmp	r9, r5
   27498:	movcc	r0, #0
   2749c:	strbcc	r0, [r2, r9]
   274a0:	mov	r0, r9
   274a4:	sub	sp, fp, #28
   274a8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   274ac:	mov	r0, #4
   274b0:	b	27380 <_obstack_memory_used@@Base+0x152c>
   274b4:	bl	12038 <abort@plt>
   274b8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   274bc:	add	fp, sp, #28
   274c0:	sub	sp, sp, #28
   274c4:	movw	r5, #5056	; 0x13c0
   274c8:	cmp	r2, #0
   274cc:	mov	r4, r1
   274d0:	mov	r7, r0
   274d4:	str	r0, [sp, #20]
   274d8:	movt	r5, #4
   274dc:	movne	r5, r2
   274e0:	bl	11ed0 <__errno_location@plt>
   274e4:	mov	sl, r0
   274e8:	ldr	r2, [r5, #40]	; 0x28
   274ec:	ldr	r3, [r5, #44]	; 0x2c
   274f0:	ldm	r5, {r0, r1}
   274f4:	orr	r8, r1, #1
   274f8:	add	r9, r5, #8
   274fc:	mov	r1, #0
   27500:	ldr	r6, [sl]
   27504:	stm	sp, {r0, r8, r9}
   27508:	mov	r0, #0
   2750c:	str	r2, [sp, #12]
   27510:	str	r3, [sp, #16]
   27514:	mov	r2, r7
   27518:	mov	r3, r4
   2751c:	str	r6, [sp, #24]
   27520:	mov	r6, r4
   27524:	bl	26108 <_obstack_memory_used@@Base+0x2b4>
   27528:	add	r7, r0, #1
   2752c:	mov	r0, r7
   27530:	bl	290c0 <_obstack_memory_used@@Base+0x326c>
   27534:	mov	r4, r0
   27538:	ldr	r0, [r5]
   2753c:	ldr	r2, [r5, #44]	; 0x2c
   27540:	ldr	r1, [r5, #40]	; 0x28
   27544:	mov	r3, r6
   27548:	stm	sp, {r0, r8, r9}
   2754c:	str	r2, [sp, #16]
   27550:	ldr	r2, [sp, #20]
   27554:	str	r1, [sp, #12]
   27558:	mov	r0, r4
   2755c:	mov	r1, r7
   27560:	bl	26108 <_obstack_memory_used@@Base+0x2b4>
   27564:	ldr	r0, [sp, #24]
   27568:	str	r0, [sl]
   2756c:	mov	r0, r4
   27570:	sub	sp, fp, #28
   27574:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   27578:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2757c:	add	fp, sp, #28
   27580:	sub	sp, sp, #36	; 0x24
   27584:	movw	r8, #5056	; 0x13c0
   27588:	cmp	r3, #0
   2758c:	mov	r4, r2
   27590:	str	r2, [sp, #24]
   27594:	mov	r5, r1
   27598:	mov	r6, r0
   2759c:	str	r0, [sp, #20]
   275a0:	movt	r8, #4
   275a4:	movne	r8, r3
   275a8:	bl	11ed0 <__errno_location@plt>
   275ac:	str	r0, [sp, #28]
   275b0:	ldr	r1, [r8, #40]	; 0x28
   275b4:	ldr	r2, [r8, #44]	; 0x2c
   275b8:	ldr	r7, [r0]
   275bc:	cmp	r4, #0
   275c0:	add	sl, r8, #8
   275c4:	mov	r0, #0
   275c8:	ldm	r8, {r3, r9}
   275cc:	orreq	r9, r9, #1
   275d0:	stm	sp, {r3, r9, sl}
   275d4:	str	r1, [sp, #12]
   275d8:	str	r2, [sp, #16]
   275dc:	mov	r1, #0
   275e0:	mov	r2, r6
   275e4:	mov	r3, r5
   275e8:	str	r7, [sp, #32]
   275ec:	mov	r7, r5
   275f0:	bl	26108 <_obstack_memory_used@@Base+0x2b4>
   275f4:	add	r4, r0, #1
   275f8:	mov	r5, r0
   275fc:	mov	r0, r4
   27600:	bl	290c0 <_obstack_memory_used@@Base+0x326c>
   27604:	mov	r6, r0
   27608:	ldr	r0, [r8]
   2760c:	ldr	r2, [r8, #44]	; 0x2c
   27610:	ldr	r1, [r8, #40]	; 0x28
   27614:	mov	r3, r7
   27618:	stm	sp, {r0, r9, sl}
   2761c:	str	r2, [sp, #16]
   27620:	ldr	r2, [sp, #20]
   27624:	str	r1, [sp, #12]
   27628:	mov	r0, r6
   2762c:	mov	r1, r4
   27630:	bl	26108 <_obstack_memory_used@@Base+0x2b4>
   27634:	ldr	r0, [sp, #24]
   27638:	ldr	r1, [sp, #32]
   2763c:	ldr	r2, [sp, #28]
   27640:	cmp	r0, #0
   27644:	str	r1, [r2]
   27648:	strne	r5, [r0]
   2764c:	mov	r0, r6
   27650:	sub	sp, fp, #28
   27654:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   27658:	push	{r4, r5, r6, r7, fp, lr}
   2765c:	add	fp, sp, #16
   27660:	movw	r4, #744	; 0x2e8
   27664:	movt	r4, #4
   27668:	ldrd	r6, [r4]
   2766c:	cmp	r7, #2
   27670:	blt	2769c <_obstack_memory_used@@Base+0x1848>
   27674:	add	r5, r6, #12
   27678:	mov	r7, #0
   2767c:	ldr	r0, [r5, r7, lsl #3]
   27680:	bl	2056c <__assert_fail@plt+0xe4e0>
   27684:	ldr	r1, [r4, #4]
   27688:	add	r2, r7, #2
   2768c:	add	r0, r7, #1
   27690:	mov	r7, r0
   27694:	cmp	r2, r1
   27698:	blt	2767c <_obstack_memory_used@@Base+0x1828>
   2769c:	ldr	r0, [r6, #4]
   276a0:	movw	r5, #5104	; 0x13f0
   276a4:	movt	r5, #4
   276a8:	cmp	r0, r5
   276ac:	beq	276c0 <_obstack_memory_used@@Base+0x186c>
   276b0:	bl	2056c <__assert_fail@plt+0xe4e0>
   276b4:	mov	r0, #256	; 0x100
   276b8:	str	r0, [r4, #8]
   276bc:	str	r5, [r4, #12]
   276c0:	add	r5, r4, #8
   276c4:	cmp	r6, r5
   276c8:	beq	276d8 <_obstack_memory_used@@Base+0x1884>
   276cc:	mov	r0, r6
   276d0:	bl	2056c <__assert_fail@plt+0xe4e0>
   276d4:	str	r5, [r4]
   276d8:	mov	r0, #1
   276dc:	str	r0, [r4, #4]
   276e0:	pop	{r4, r5, r6, r7, fp, pc}
   276e4:	movw	r3, #5056	; 0x13c0
   276e8:	mvn	r2, #0
   276ec:	movt	r3, #4
   276f0:	b	276f4 <_obstack_memory_used@@Base+0x18a0>
   276f4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   276f8:	add	fp, sp, #28
   276fc:	sub	sp, sp, #44	; 0x2c
   27700:	mov	r7, r3
   27704:	str	r2, [sp, #36]	; 0x24
   27708:	str	r1, [sp, #32]
   2770c:	mov	r5, r0
   27710:	bl	11ed0 <__errno_location@plt>
   27714:	cmp	r5, #0
   27718:	bmi	27880 <_obstack_memory_used@@Base+0x1a2c>
   2771c:	cmn	r5, #-2147483647	; 0x80000001
   27720:	beq	27880 <_obstack_memory_used@@Base+0x1a2c>
   27724:	movw	r8, #744	; 0x2e8
   27728:	mov	r4, r0
   2772c:	ldr	r0, [r0]
   27730:	movt	r8, #4
   27734:	str	r4, [sp, #28]
   27738:	ldr	r1, [r8, #4]
   2773c:	ldr	r6, [r8]
   27740:	str	r0, [sp, #24]
   27744:	cmp	r1, r5
   27748:	ble	27754 <_obstack_memory_used@@Base+0x1900>
   2774c:	mov	sl, r6
   27750:	b	277bc <_obstack_memory_used@@Base+0x1968>
   27754:	mov	r0, #8
   27758:	add	r9, r8, #8
   2775c:	str	r1, [fp, #-32]	; 0xffffffe0
   27760:	sub	r1, r5, r1
   27764:	mvn	r3, #-2147483648	; 0x80000000
   27768:	str	r0, [sp]
   2776c:	subs	r0, r6, r9
   27770:	add	r2, r1, #1
   27774:	sub	r1, fp, #32
   27778:	movne	r0, r6
   2777c:	bl	292c0 <_obstack_memory_used@@Base+0x346c>
   27780:	mov	sl, r0
   27784:	cmp	r6, r9
   27788:	str	r0, [r8]
   2778c:	bne	27798 <_obstack_memory_used@@Base+0x1944>
   27790:	ldrd	r0, [r8, #8]
   27794:	stm	sl, {r0, r1}
   27798:	ldr	r1, [r8, #4]
   2779c:	ldr	r2, [fp, #-32]	; 0xffffffe0
   277a0:	add	r0, sl, r1, lsl #3
   277a4:	sub	r1, r2, r1
   277a8:	lsl	r2, r1, #3
   277ac:	mov	r1, #0
   277b0:	bl	11ef4 <memset@plt>
   277b4:	ldr	r0, [fp, #-32]	; 0xffffffe0
   277b8:	str	r0, [r8, #4]
   277bc:	mov	r9, sl
   277c0:	ldm	r7, {r0, r1}
   277c4:	orr	r8, r1, #1
   277c8:	add	r1, r7, #8
   277cc:	ldr	r2, [r7, #40]	; 0x28
   277d0:	ldr	r3, [r7, #44]	; 0x2c
   277d4:	ldr	r6, [r9, r5, lsl #3]!
   277d8:	str	r1, [sp, #20]
   277dc:	ldr	r4, [r9, #4]!
   277e0:	stm	sp, {r0, r8}
   277e4:	add	r0, sp, #8
   277e8:	stm	r0, {r1, r2, r3}
   277ec:	ldr	r2, [sp, #32]
   277f0:	ldr	r3, [sp, #36]	; 0x24
   277f4:	mov	r1, r6
   277f8:	mov	r0, r4
   277fc:	bl	26108 <_obstack_memory_used@@Base+0x2b4>
   27800:	cmp	r6, r0
   27804:	bhi	27868 <_obstack_memory_used@@Base+0x1a14>
   27808:	add	r6, r0, #1
   2780c:	movw	r0, #5104	; 0x13f0
   27810:	movt	r0, #4
   27814:	str	r6, [sl, r5, lsl #3]
   27818:	cmp	r4, r0
   2781c:	beq	27828 <_obstack_memory_used@@Base+0x19d4>
   27820:	mov	r0, r4
   27824:	bl	2056c <__assert_fail@plt+0xe4e0>
   27828:	mov	r0, r6
   2782c:	bl	290c0 <_obstack_memory_used@@Base+0x326c>
   27830:	str	r0, [r9]
   27834:	mov	r4, r0
   27838:	add	r3, sp, #8
   2783c:	ldr	r0, [r7]
   27840:	ldr	r1, [r7, #40]	; 0x28
   27844:	ldr	r2, [r7, #44]	; 0x2c
   27848:	stm	sp, {r0, r8}
   2784c:	ldr	r0, [sp, #20]
   27850:	stm	r3, {r0, r1, r2}
   27854:	ldr	r2, [sp, #32]
   27858:	ldr	r3, [sp, #36]	; 0x24
   2785c:	mov	r0, r4
   27860:	mov	r1, r6
   27864:	bl	26108 <_obstack_memory_used@@Base+0x2b4>
   27868:	ldr	r1, [sp, #24]
   2786c:	ldr	r0, [sp, #28]
   27870:	str	r1, [r0]
   27874:	mov	r0, r4
   27878:	sub	sp, fp, #28
   2787c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   27880:	bl	12038 <abort@plt>
   27884:	movw	r3, #5056	; 0x13c0
   27888:	movt	r3, #4
   2788c:	b	276f4 <_obstack_memory_used@@Base+0x18a0>
   27890:	movw	r3, #5056	; 0x13c0
   27894:	mov	r1, r0
   27898:	mov	r0, #0
   2789c:	mvn	r2, #0
   278a0:	movt	r3, #4
   278a4:	b	276f4 <_obstack_memory_used@@Base+0x18a0>
   278a8:	movw	r3, #5056	; 0x13c0
   278ac:	mov	r2, r1
   278b0:	mov	r1, r0
   278b4:	mov	r0, #0
   278b8:	movt	r3, #4
   278bc:	b	276f4 <_obstack_memory_used@@Base+0x18a0>
   278c0:	push	{fp, lr}
   278c4:	mov	fp, sp
   278c8:	sub	sp, sp, #48	; 0x30
   278cc:	vmov.i32	q8, #0	; 0x00000000
   278d0:	mov	ip, #32
   278d4:	mov	r3, sp
   278d8:	mov	lr, r2
   278dc:	cmp	r1, #10
   278e0:	add	r2, r3, #16
   278e4:	vst1.64	{d16-d17}, [r3], ip
   278e8:	vst1.64	{d16-d17}, [r2]
   278ec:	vst1.64	{d16-d17}, [r3]
   278f0:	beq	27910 <_obstack_memory_used@@Base+0x1abc>
   278f4:	str	r1, [sp]
   278f8:	mov	r3, sp
   278fc:	mov	r1, lr
   27900:	mvn	r2, #0
   27904:	bl	276f4 <_obstack_memory_used@@Base+0x18a0>
   27908:	mov	sp, fp
   2790c:	pop	{fp, pc}
   27910:	bl	12038 <abort@plt>
   27914:	push	{r4, sl, fp, lr}
   27918:	add	fp, sp, #8
   2791c:	sub	sp, sp, #48	; 0x30
   27920:	vmov.i32	q8, #0	; 0x00000000
   27924:	mov	ip, r3
   27928:	mov	r3, sp
   2792c:	mov	lr, #32
   27930:	cmp	r1, #10
   27934:	add	r4, r3, #16
   27938:	vst1.64	{d16-d17}, [r3], lr
   2793c:	vst1.64	{d16-d17}, [r4]
   27940:	vst1.64	{d16-d17}, [r3]
   27944:	beq	27964 <_obstack_memory_used@@Base+0x1b10>
   27948:	str	r1, [sp]
   2794c:	mov	r1, r2
   27950:	mov	r3, sp
   27954:	mov	r2, ip
   27958:	bl	276f4 <_obstack_memory_used@@Base+0x18a0>
   2795c:	sub	sp, fp, #8
   27960:	pop	{r4, sl, fp, pc}
   27964:	bl	12038 <abort@plt>
   27968:	push	{fp, lr}
   2796c:	mov	fp, sp
   27970:	sub	sp, sp, #48	; 0x30
   27974:	vmov.i32	q8, #0	; 0x00000000
   27978:	mov	r3, sp
   2797c:	mov	ip, #32
   27980:	cmp	r0, #10
   27984:	add	r2, r3, #16
   27988:	vst1.64	{d16-d17}, [r3], ip
   2798c:	vst1.64	{d16-d17}, [r2]
   27990:	vst1.64	{d16-d17}, [r3]
   27994:	beq	279b4 <_obstack_memory_used@@Base+0x1b60>
   27998:	str	r0, [sp]
   2799c:	mov	r3, sp
   279a0:	mov	r0, #0
   279a4:	mvn	r2, #0
   279a8:	bl	276f4 <_obstack_memory_used@@Base+0x18a0>
   279ac:	mov	sp, fp
   279b0:	pop	{fp, pc}
   279b4:	bl	12038 <abort@plt>
   279b8:	push	{fp, lr}
   279bc:	mov	fp, sp
   279c0:	sub	sp, sp, #48	; 0x30
   279c4:	vmov.i32	q8, #0	; 0x00000000
   279c8:	mov	r3, sp
   279cc:	mov	ip, #32
   279d0:	cmp	r0, #10
   279d4:	add	lr, r3, #16
   279d8:	vst1.64	{d16-d17}, [r3], ip
   279dc:	vst1.64	{d16-d17}, [lr]
   279e0:	vst1.64	{d16-d17}, [r3]
   279e4:	beq	27a00 <_obstack_memory_used@@Base+0x1bac>
   279e8:	str	r0, [sp]
   279ec:	mov	r3, sp
   279f0:	mov	r0, #0
   279f4:	bl	276f4 <_obstack_memory_used@@Base+0x18a0>
   279f8:	mov	sp, fp
   279fc:	pop	{fp, pc}
   27a00:	bl	12038 <abort@plt>
   27a04:	push	{r4, sl, fp, lr}
   27a08:	add	fp, sp, #8
   27a0c:	sub	sp, sp, #48	; 0x30
   27a10:	mov	lr, r0
   27a14:	movw	r0, #5056	; 0x13c0
   27a18:	mov	ip, r1
   27a1c:	mov	r1, #32
   27a20:	mov	r4, #1
   27a24:	movt	r0, #4
   27a28:	add	r3, r0, #16
   27a2c:	vld1.64	{d16-d17}, [r0], r1
   27a30:	vld1.64	{d20-d21}, [r0]
   27a34:	vld1.64	{d18-d19}, [r3]
   27a38:	mov	r3, sp
   27a3c:	add	r0, r3, #32
   27a40:	add	r1, r3, #16
   27a44:	vst1.64	{d20-d21}, [r0]
   27a48:	mov	r0, #28
   27a4c:	vst1.64	{d18-d19}, [r1]
   27a50:	mov	r1, r3
   27a54:	and	r0, r0, r2, lsr #3
   27a58:	and	r2, r2, #31
   27a5c:	vst1.64	{d16-d17}, [r1], r0
   27a60:	ldr	r0, [r1, #8]
   27a64:	bic	r4, r4, r0, lsr r2
   27a68:	eor	r0, r0, r4, lsl r2
   27a6c:	mov	r2, ip
   27a70:	str	r0, [r1, #8]
   27a74:	mov	r0, #0
   27a78:	mov	r1, lr
   27a7c:	bl	276f4 <_obstack_memory_used@@Base+0x18a0>
   27a80:	sub	sp, fp, #8
   27a84:	pop	{r4, sl, fp, pc}
   27a88:	push	{fp, lr}
   27a8c:	mov	fp, sp
   27a90:	sub	sp, sp, #48	; 0x30
   27a94:	mov	ip, r0
   27a98:	movw	r0, #5056	; 0x13c0
   27a9c:	mov	r2, #32
   27aa0:	movt	r0, #4
   27aa4:	add	r3, r0, #16
   27aa8:	vld1.64	{d16-d17}, [r0], r2
   27aac:	vld1.64	{d20-d21}, [r0]
   27ab0:	vld1.64	{d18-d19}, [r3]
   27ab4:	mov	r3, sp
   27ab8:	add	r0, r3, #32
   27abc:	add	r2, r3, #16
   27ac0:	vst1.64	{d20-d21}, [r0]
   27ac4:	mov	r0, #28
   27ac8:	vst1.64	{d18-d19}, [r2]
   27acc:	mov	r2, r3
   27ad0:	and	r0, r0, r1, lsr #3
   27ad4:	and	r1, r1, #31
   27ad8:	vst1.64	{d16-d17}, [r2], r0
   27adc:	mov	r0, #1
   27ae0:	ldr	lr, [r2, #8]
   27ae4:	bic	r0, r0, lr, lsr r1
   27ae8:	eor	r0, lr, r0, lsl r1
   27aec:	mov	r1, ip
   27af0:	str	r0, [r2, #8]
   27af4:	mov	r0, #0
   27af8:	mvn	r2, #0
   27afc:	bl	276f4 <_obstack_memory_used@@Base+0x18a0>
   27b00:	mov	sp, fp
   27b04:	pop	{fp, pc}
   27b08:	push	{fp, lr}
   27b0c:	mov	fp, sp
   27b10:	sub	sp, sp, #48	; 0x30
   27b14:	mov	r1, r0
   27b18:	movw	r0, #5056	; 0x13c0
   27b1c:	mov	r3, #32
   27b20:	movt	r0, #4
   27b24:	add	r2, r0, #16
   27b28:	vld1.64	{d16-d17}, [r0], r3
   27b2c:	mov	r3, sp
   27b30:	vld1.64	{d18-d19}, [r2]
   27b34:	vld1.64	{d20-d21}, [r0]
   27b38:	add	r2, r3, #16
   27b3c:	add	r0, r3, #32
   27b40:	vst1.64	{d18-d19}, [r2]
   27b44:	vst1.64	{d20-d21}, [r0]
   27b48:	mov	r0, #12
   27b4c:	mov	r2, r3
   27b50:	vst1.64	{d16-d17}, [r2], r0
   27b54:	ldr	r0, [r2]
   27b58:	orr	r0, r0, #67108864	; 0x4000000
   27b5c:	str	r0, [r2]
   27b60:	mov	r0, #0
   27b64:	mvn	r2, #0
   27b68:	bl	276f4 <_obstack_memory_used@@Base+0x18a0>
   27b6c:	mov	sp, fp
   27b70:	pop	{fp, pc}
   27b74:	push	{fp, lr}
   27b78:	mov	fp, sp
   27b7c:	sub	sp, sp, #48	; 0x30
   27b80:	mov	ip, r1
   27b84:	mov	r1, r0
   27b88:	movw	r0, #5056	; 0x13c0
   27b8c:	mov	r2, #32
   27b90:	movt	r0, #4
   27b94:	add	r3, r0, #16
   27b98:	vld1.64	{d16-d17}, [r0], r2
   27b9c:	vld1.64	{d18-d19}, [r3]
   27ba0:	vld1.64	{d20-d21}, [r0]
   27ba4:	mov	r3, sp
   27ba8:	add	r2, r3, #16
   27bac:	add	r0, r3, #32
   27bb0:	vst1.64	{d18-d19}, [r2]
   27bb4:	vst1.64	{d20-d21}, [r0]
   27bb8:	mov	r0, #12
   27bbc:	mov	r2, r3
   27bc0:	vst1.64	{d16-d17}, [r2], r0
   27bc4:	ldr	r0, [r2]
   27bc8:	orr	r0, r0, #67108864	; 0x4000000
   27bcc:	str	r0, [r2]
   27bd0:	mov	r0, #0
   27bd4:	mov	r2, ip
   27bd8:	bl	276f4 <_obstack_memory_used@@Base+0x18a0>
   27bdc:	mov	sp, fp
   27be0:	pop	{fp, pc}
   27be4:	push	{r4, sl, fp, lr}
   27be8:	add	fp, sp, #8
   27bec:	sub	sp, sp, #96	; 0x60
   27bf0:	vmov.i32	q8, #0	; 0x00000000
   27bf4:	mov	ip, r2
   27bf8:	mov	r2, sp
   27bfc:	mov	r4, #28
   27c00:	cmp	r1, #10
   27c04:	mov	r3, r2
   27c08:	add	lr, r2, #16
   27c0c:	vst1.64	{d16-d17}, [r3], r4
   27c10:	vst1.64	{d16-d17}, [lr]
   27c14:	vst1.32	{d16-d17}, [r3]
   27c18:	beq	27c68 <_obstack_memory_used@@Base+0x1e14>
   27c1c:	vld1.64	{d16-d17}, [r2], r4
   27c20:	vld1.64	{d18-d19}, [lr]
   27c24:	add	r3, sp, #48	; 0x30
   27c28:	vld1.32	{d20-d21}, [r2]
   27c2c:	add	r2, r3, #20
   27c30:	add	r4, r3, #4
   27c34:	vst1.32	{d18-d19}, [r2]
   27c38:	add	r2, r3, #32
   27c3c:	vst1.32	{d16-d17}, [r4]
   27c40:	vst1.32	{d20-d21}, [r2]
   27c44:	str	r1, [sp, #48]	; 0x30
   27c48:	mvn	r2, #0
   27c4c:	ldr	r1, [sp, #60]	; 0x3c
   27c50:	orr	r1, r1, #67108864	; 0x4000000
   27c54:	str	r1, [sp, #60]	; 0x3c
   27c58:	mov	r1, ip
   27c5c:	bl	276f4 <_obstack_memory_used@@Base+0x18a0>
   27c60:	sub	sp, fp, #8
   27c64:	pop	{r4, sl, fp, pc}
   27c68:	bl	12038 <abort@plt>
   27c6c:	push	{r4, r5, r6, sl, fp, lr}
   27c70:	add	fp, sp, #16
   27c74:	sub	sp, sp, #48	; 0x30
   27c78:	mov	ip, r3
   27c7c:	movw	r3, #5056	; 0x13c0
   27c80:	mov	r6, #32
   27c84:	cmp	r1, #0
   27c88:	mov	r4, sp
   27c8c:	movt	r3, #4
   27c90:	cmpne	r2, #0
   27c94:	add	r5, r4, #16
   27c98:	add	lr, r3, #16
   27c9c:	vld1.64	{d16-d17}, [r3], r6
   27ca0:	vld1.64	{d18-d19}, [lr]
   27ca4:	vld1.64	{d20-d21}, [r3]
   27ca8:	mov	r3, #10
   27cac:	vst1.64	{d16-d17}, [r4], r6
   27cb0:	vst1.64	{d18-d19}, [r5]
   27cb4:	vst1.64	{d20-d21}, [r4]
   27cb8:	str	r3, [sp]
   27cbc:	bne	27cc4 <_obstack_memory_used@@Base+0x1e70>
   27cc0:	bl	12038 <abort@plt>
   27cc4:	str	r2, [sp, #44]	; 0x2c
   27cc8:	str	r1, [sp, #40]	; 0x28
   27ccc:	mov	r3, sp
   27cd0:	mov	r1, ip
   27cd4:	mvn	r2, #0
   27cd8:	bl	276f4 <_obstack_memory_used@@Base+0x18a0>
   27cdc:	sub	sp, fp, #16
   27ce0:	pop	{r4, r5, r6, sl, fp, pc}
   27ce4:	push	{r4, r5, r6, sl, fp, lr}
   27ce8:	add	fp, sp, #16
   27cec:	sub	sp, sp, #48	; 0x30
   27cf0:	mov	lr, r3
   27cf4:	movw	r3, #5056	; 0x13c0
   27cf8:	mov	r6, #32
   27cfc:	cmp	r1, #0
   27d00:	mov	r4, sp
   27d04:	movt	r3, #4
   27d08:	cmpne	r2, #0
   27d0c:	add	r5, r4, #16
   27d10:	add	ip, r3, #16
   27d14:	vld1.64	{d16-d17}, [r3], r6
   27d18:	vld1.64	{d18-d19}, [ip]
   27d1c:	vld1.64	{d20-d21}, [r3]
   27d20:	mov	r3, #10
   27d24:	vst1.64	{d16-d17}, [r4], r6
   27d28:	vst1.64	{d18-d19}, [r5]
   27d2c:	vst1.64	{d20-d21}, [r4]
   27d30:	str	r3, [sp]
   27d34:	bne	27d3c <_obstack_memory_used@@Base+0x1ee8>
   27d38:	bl	12038 <abort@plt>
   27d3c:	ldr	ip, [fp, #8]
   27d40:	str	r2, [sp, #44]	; 0x2c
   27d44:	str	r1, [sp, #40]	; 0x28
   27d48:	mov	r3, sp
   27d4c:	mov	r1, lr
   27d50:	mov	r2, ip
   27d54:	bl	276f4 <_obstack_memory_used@@Base+0x18a0>
   27d58:	sub	sp, fp, #16
   27d5c:	pop	{r4, r5, r6, sl, fp, pc}
   27d60:	push	{r4, sl, fp, lr}
   27d64:	add	fp, sp, #8
   27d68:	sub	sp, sp, #48	; 0x30
   27d6c:	movw	r3, #5056	; 0x13c0
   27d70:	mov	lr, #32
   27d74:	mov	ip, r2
   27d78:	cmp	r0, #0
   27d7c:	movt	r3, #4
   27d80:	cmpne	r1, #0
   27d84:	add	r2, r3, #16
   27d88:	vld1.64	{d16-d17}, [r3], lr
   27d8c:	vld1.64	{d20-d21}, [r3]
   27d90:	vld1.64	{d18-d19}, [r2]
   27d94:	mov	r2, sp
   27d98:	add	r4, r2, #16
   27d9c:	vst1.64	{d16-d17}, [r2], lr
   27da0:	vst1.64	{d20-d21}, [r2]
   27da4:	mov	r2, #10
   27da8:	vst1.64	{d18-d19}, [r4]
   27dac:	str	r2, [sp]
   27db0:	bne	27db8 <_obstack_memory_used@@Base+0x1f64>
   27db4:	bl	12038 <abort@plt>
   27db8:	str	r1, [sp, #44]	; 0x2c
   27dbc:	str	r0, [sp, #40]	; 0x28
   27dc0:	mov	r3, sp
   27dc4:	mov	r0, #0
   27dc8:	mov	r1, ip
   27dcc:	mvn	r2, #0
   27dd0:	bl	276f4 <_obstack_memory_used@@Base+0x18a0>
   27dd4:	sub	sp, fp, #8
   27dd8:	pop	{r4, sl, fp, pc}
   27ddc:	push	{r4, r5, fp, lr}
   27de0:	add	fp, sp, #8
   27de4:	sub	sp, sp, #48	; 0x30
   27de8:	mov	ip, r3
   27dec:	movw	r3, #5056	; 0x13c0
   27df0:	mov	r4, #32
   27df4:	mov	lr, r2
   27df8:	cmp	r0, #0
   27dfc:	movt	r3, #4
   27e00:	cmpne	r1, #0
   27e04:	add	r2, r3, #16
   27e08:	vld1.64	{d16-d17}, [r3], r4
   27e0c:	vld1.64	{d20-d21}, [r3]
   27e10:	vld1.64	{d18-d19}, [r2]
   27e14:	mov	r2, sp
   27e18:	add	r5, r2, #16
   27e1c:	vst1.64	{d16-d17}, [r2], r4
   27e20:	vst1.64	{d20-d21}, [r2]
   27e24:	mov	r2, #10
   27e28:	vst1.64	{d18-d19}, [r5]
   27e2c:	str	r2, [sp]
   27e30:	bne	27e38 <_obstack_memory_used@@Base+0x1fe4>
   27e34:	bl	12038 <abort@plt>
   27e38:	str	r1, [sp, #44]	; 0x2c
   27e3c:	str	r0, [sp, #40]	; 0x28
   27e40:	mov	r3, sp
   27e44:	mov	r0, #0
   27e48:	mov	r1, lr
   27e4c:	mov	r2, ip
   27e50:	bl	276f4 <_obstack_memory_used@@Base+0x18a0>
   27e54:	sub	sp, fp, #8
   27e58:	pop	{r4, r5, fp, pc}
   27e5c:	movw	r3, #696	; 0x2b8
   27e60:	movt	r3, #4
   27e64:	b	276f4 <_obstack_memory_used@@Base+0x18a0>
   27e68:	movw	r3, #696	; 0x2b8
   27e6c:	mov	r2, r1
   27e70:	mov	r1, r0
   27e74:	mov	r0, #0
   27e78:	movt	r3, #4
   27e7c:	b	276f4 <_obstack_memory_used@@Base+0x18a0>
   27e80:	movw	r3, #696	; 0x2b8
   27e84:	mvn	r2, #0
   27e88:	movt	r3, #4
   27e8c:	b	276f4 <_obstack_memory_used@@Base+0x18a0>
   27e90:	movw	r3, #696	; 0x2b8
   27e94:	mov	r1, r0
   27e98:	mov	r0, #0
   27e9c:	mvn	r2, #0
   27ea0:	movt	r3, #4
   27ea4:	b	276f4 <_obstack_memory_used@@Base+0x18a0>
   27ea8:	push	{r4, r5, r6, sl, fp, lr}
   27eac:	add	fp, sp, #16
   27eb0:	ldr	r4, [r0], #8
   27eb4:	mov	r5, r1
   27eb8:	cmp	r4, r0
   27ebc:	beq	27ee0 <_obstack_memory_used@@Base+0x208c>
   27ec0:	mov	r0, r4
   27ec4:	mov	r1, r5
   27ec8:	bl	2a678 <_obstack_memory_used@@Base+0x4824>
   27ecc:	cmp	r0, #0
   27ed0:	mov	r6, r0
   27ed4:	moveq	r6, r4
   27ed8:	mov	r0, r6
   27edc:	pop	{r4, r5, r6, sl, fp, pc}
   27ee0:	mov	r0, r5
   27ee4:	bl	2a648 <_obstack_memory_used@@Base+0x47f4>
   27ee8:	cmp	r0, #0
   27eec:	beq	27f08 <_obstack_memory_used@@Base+0x20b4>
   27ef0:	mov	r1, r4
   27ef4:	mov	r2, r5
   27ef8:	mov	r6, r0
   27efc:	bl	11c60 <memcpy@plt>
   27f00:	mov	r0, r6
   27f04:	pop	{r4, r5, r6, sl, fp, pc}
   27f08:	mov	r6, #0
   27f0c:	mov	r0, r6
   27f10:	pop	{r4, r5, r6, sl, fp, pc}
   27f14:	push	{r4, r5, r6, sl, fp, lr}
   27f18:	add	fp, sp, #16
   27f1c:	mov	r4, r0
   27f20:	add	r6, r0, #8
   27f24:	ldrd	r0, [r0]
   27f28:	lsl	r5, r1, #1
   27f2c:	cmp	r0, r6
   27f30:	beq	27f3c <_obstack_memory_used@@Base+0x20e8>
   27f34:	bl	2056c <__assert_fail@plt+0xe4e0>
   27f38:	ldr	r1, [r4, #4]
   27f3c:	cmp	r5, r1
   27f40:	bcc	27f64 <_obstack_memory_used@@Base+0x2110>
   27f44:	mov	r0, r5
   27f48:	bl	2a648 <_obstack_memory_used@@Base+0x47f4>
   27f4c:	cmp	r0, #0
   27f50:	strne	r0, [r4]
   27f54:	movne	r0, #1
   27f58:	strne	r5, [r4, #4]
   27f5c:	popne	{r4, r5, r6, sl, fp, pc}
   27f60:	b	27f70 <_obstack_memory_used@@Base+0x211c>
   27f64:	bl	11ed0 <__errno_location@plt>
   27f68:	mov	r1, #12
   27f6c:	str	r1, [r0]
   27f70:	mov	r0, #0
   27f74:	mov	r5, #1024	; 0x400
   27f78:	str	r6, [r4]
   27f7c:	str	r5, [r4, #4]
   27f80:	pop	{r4, r5, r6, sl, fp, pc}
   27f84:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   27f88:	add	fp, sp, #24
   27f8c:	ldrd	r8, [r0]
   27f90:	add	r7, r0, #8
   27f94:	mov	r4, r0
   27f98:	lsl	r5, r9, #1
   27f9c:	cmp	r8, r7
   27fa0:	beq	27fd4 <_obstack_memory_used@@Base+0x2180>
   27fa4:	cmp	r5, r9
   27fa8:	bcc	2800c <_obstack_memory_used@@Base+0x21b8>
   27fac:	mov	r0, r8
   27fb0:	mov	r1, r5
   27fb4:	bl	2a678 <_obstack_memory_used@@Base+0x4824>
   27fb8:	mov	r6, r0
   27fbc:	cmp	r0, #0
   27fc0:	beq	2801c <_obstack_memory_used@@Base+0x21c8>
   27fc4:	mov	r0, #1
   27fc8:	str	r6, [r4]
   27fcc:	str	r5, [r4, #4]
   27fd0:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   27fd4:	mov	r0, r5
   27fd8:	bl	2a648 <_obstack_memory_used@@Base+0x47f4>
   27fdc:	cmp	r0, #0
   27fe0:	beq	28004 <_obstack_memory_used@@Base+0x21b0>
   27fe4:	ldr	r2, [r4, #4]
   27fe8:	mov	r1, r8
   27fec:	mov	r6, r0
   27ff0:	bl	11c60 <memcpy@plt>
   27ff4:	mov	r0, #1
   27ff8:	str	r6, [r4]
   27ffc:	str	r5, [r4, #4]
   28000:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   28004:	mov	r0, #0
   28008:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   2800c:	bl	11ed0 <__errno_location@plt>
   28010:	mov	r1, #12
   28014:	str	r1, [r0]
   28018:	b	28020 <_obstack_memory_used@@Base+0x21cc>
   2801c:	ldr	r8, [r4]
   28020:	mov	r0, r8
   28024:	bl	2056c <__assert_fail@plt+0xe4e0>
   28028:	mov	r0, #0
   2802c:	mov	r5, #1024	; 0x400
   28030:	str	r7, [r4]
   28034:	str	r5, [r4, #4]
   28038:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   2803c:	push	{r4, r5, fp, lr}
   28040:	add	fp, sp, #8
   28044:	mov	r4, r1
   28048:	bl	11e88 <getfilecon@plt>
   2804c:	cmp	r0, #10
   28050:	beq	28068 <_obstack_memory_used@@Base+0x2214>
   28054:	cmp	r0, #0
   28058:	bne	280ac <_obstack_memory_used@@Base+0x2258>
   2805c:	bl	11ed0 <__errno_location@plt>
   28060:	mov	r1, #95	; 0x5f
   28064:	b	280a4 <_obstack_memory_used@@Base+0x2250>
   28068:	ldr	r5, [r4]
   2806c:	movw	r1, #54459	; 0xd4bb
   28070:	movt	r1, #2
   28074:	mov	r0, r5
   28078:	bl	11bd0 <strcmp@plt>
   2807c:	mov	r1, r0
   28080:	mov	r0, #10
   28084:	cmp	r1, #0
   28088:	popne	{r4, r5, fp, pc}
   2808c:	mov	r0, r5
   28090:	bl	11ff0 <freecon@plt>
   28094:	mov	r0, #0
   28098:	str	r0, [r4]
   2809c:	bl	11ed0 <__errno_location@plt>
   280a0:	mov	r1, #61	; 0x3d
   280a4:	str	r1, [r0]
   280a8:	mvn	r0, #0
   280ac:	pop	{r4, r5, fp, pc}
   280b0:	push	{r4, r5, fp, lr}
   280b4:	add	fp, sp, #8
   280b8:	mov	r4, r1
   280bc:	bl	11dec <lgetfilecon@plt>
   280c0:	cmp	r0, #10
   280c4:	beq	280dc <_obstack_memory_used@@Base+0x2288>
   280c8:	cmp	r0, #0
   280cc:	bne	28120 <_obstack_memory_used@@Base+0x22cc>
   280d0:	bl	11ed0 <__errno_location@plt>
   280d4:	mov	r1, #95	; 0x5f
   280d8:	b	28118 <_obstack_memory_used@@Base+0x22c4>
   280dc:	ldr	r5, [r4]
   280e0:	movw	r1, #54459	; 0xd4bb
   280e4:	movt	r1, #2
   280e8:	mov	r0, r5
   280ec:	bl	11bd0 <strcmp@plt>
   280f0:	mov	r1, r0
   280f4:	mov	r0, #10
   280f8:	cmp	r1, #0
   280fc:	popne	{r4, r5, fp, pc}
   28100:	mov	r0, r5
   28104:	bl	11ff0 <freecon@plt>
   28108:	mov	r0, #0
   2810c:	str	r0, [r4]
   28110:	bl	11ed0 <__errno_location@plt>
   28114:	mov	r1, #61	; 0x3d
   28118:	str	r1, [r0]
   2811c:	mvn	r0, #0
   28120:	pop	{r4, r5, fp, pc}
   28124:	push	{r4, r5, fp, lr}
   28128:	add	fp, sp, #8
   2812c:	mov	r4, r1
   28130:	bl	11ccc <fgetfilecon@plt>
   28134:	cmp	r0, #10
   28138:	beq	28150 <_obstack_memory_used@@Base+0x22fc>
   2813c:	cmp	r0, #0
   28140:	bne	28194 <_obstack_memory_used@@Base+0x2340>
   28144:	bl	11ed0 <__errno_location@plt>
   28148:	mov	r1, #95	; 0x5f
   2814c:	b	2818c <_obstack_memory_used@@Base+0x2338>
   28150:	ldr	r5, [r4]
   28154:	movw	r1, #54459	; 0xd4bb
   28158:	movt	r1, #2
   2815c:	mov	r0, r5
   28160:	bl	11bd0 <strcmp@plt>
   28164:	mov	r1, r0
   28168:	mov	r0, #10
   2816c:	cmp	r1, #0
   28170:	popne	{r4, r5, fp, pc}
   28174:	mov	r0, r5
   28178:	bl	11ff0 <freecon@plt>
   2817c:	mov	r0, #0
   28180:	str	r0, [r4]
   28184:	bl	11ed0 <__errno_location@plt>
   28188:	mov	r1, #61	; 0x3d
   2818c:	str	r1, [r0]
   28190:	mvn	r0, #0
   28194:	pop	{r4, r5, fp, pc}
   28198:	push	{r4, r5, r6, r7, fp, lr}
   2819c:	add	fp, sp, #16
   281a0:	mov	r4, r1
   281a4:	mov	r1, #0
   281a8:	mov	r6, r2
   281ac:	bl	11f60 <setlocale@plt>
   281b0:	cmp	r0, #0
   281b4:	beq	281e4 <_obstack_memory_used@@Base+0x2390>
   281b8:	mov	r7, r0
   281bc:	bl	11eac <strlen@plt>
   281c0:	cmp	r0, r6
   281c4:	bcs	28200 <_obstack_memory_used@@Base+0x23ac>
   281c8:	add	r2, r0, #1
   281cc:	mov	r0, r4
   281d0:	mov	r1, r7
   281d4:	bl	11c60 <memcpy@plt>
   281d8:	mov	r5, #0
   281dc:	mov	r0, r5
   281e0:	pop	{r4, r5, r6, r7, fp, pc}
   281e4:	mov	r5, #22
   281e8:	cmp	r6, #0
   281ec:	beq	28228 <_obstack_memory_used@@Base+0x23d4>
   281f0:	mov	r0, #0
   281f4:	strb	r0, [r4]
   281f8:	mov	r0, r5
   281fc:	pop	{r4, r5, r6, r7, fp, pc}
   28200:	mov	r5, #34	; 0x22
   28204:	cmp	r6, #0
   28208:	beq	28228 <_obstack_memory_used@@Base+0x23d4>
   2820c:	sub	r6, r6, #1
   28210:	mov	r0, r4
   28214:	mov	r1, r7
   28218:	mov	r2, r6
   2821c:	bl	11c60 <memcpy@plt>
   28220:	mov	r0, #0
   28224:	strb	r0, [r4, r6]
   28228:	mov	r0, r5
   2822c:	pop	{r4, r5, r6, r7, fp, pc}
   28230:	mov	r1, #0
   28234:	b	11f60 <setlocale@plt>
   28238:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   2823c:	add	fp, sp, #24
   28240:	mov	r4, r0
   28244:	cmp	r0, #0
   28248:	beq	2827c <_obstack_memory_used@@Base+0x2428>
   2824c:	mov	r0, r4
   28250:	bl	11eac <strlen@plt>
   28254:	add	r5, r0, #1
   28258:	cmp	r5, #58	; 0x3a
   2825c:	bls	28280 <_obstack_memory_used@@Base+0x242c>
   28260:	add	r0, r0, #10
   28264:	bic	r0, r0, #3
   28268:	bl	2a648 <_obstack_memory_used@@Base+0x47f4>
   2826c:	mov	r6, r0
   28270:	cmp	r0, #0
   28274:	bne	28294 <_obstack_memory_used@@Base+0x2440>
   28278:	b	282cc <_obstack_memory_used@@Base+0x2478>
   2827c:	mov	r5, #0
   28280:	mov	r0, #64	; 0x40
   28284:	bl	2a648 <_obstack_memory_used@@Base+0x47f4>
   28288:	mov	r6, r0
   2828c:	cmp	r0, #0
   28290:	beq	282cc <_obstack_memory_used@@Base+0x2478>
   28294:	cmp	r4, #0
   28298:	mov	r0, r4
   2829c:	mov	r8, #0
   282a0:	mov	r7, r6
   282a4:	movwne	r0, #1
   282a8:	str	r8, [r6]
   282ac:	strb	r0, [r6, #4]
   282b0:	strb	r8, [r7, #5]!
   282b4:	beq	282cc <_obstack_memory_used@@Base+0x2478>
   282b8:	mov	r0, r7
   282bc:	mov	r1, r4
   282c0:	mov	r2, r5
   282c4:	bl	11c60 <memcpy@plt>
   282c8:	strb	r8, [r7, r5]
   282cc:	mov	r0, r6
   282d0:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   282d4:	push	{r4, sl, fp, lr}
   282d8:	add	fp, sp, #8
   282dc:	cmp	r0, #2
   282e0:	popcc	{r4, sl, fp, pc}
   282e4:	ldr	r4, [r0]
   282e8:	bl	2056c <__assert_fail@plt+0xe4e0>
   282ec:	cmp	r4, #0
   282f0:	mov	r0, r4
   282f4:	bne	282e4 <_obstack_memory_used@@Base+0x2490>
   282f8:	pop	{r4, sl, fp, pc}
   282fc:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   28300:	add	fp, sp, #28
   28304:	sub	sp, sp, #4
   28308:	mov	r7, r2
   2830c:	mov	r5, r1
   28310:	cmp	r0, #0
   28314:	beq	28390 <_obstack_memory_used@@Base+0x253c>
   28318:	mov	r6, r0
   2831c:	movw	r0, #45204	; 0xb094
   28320:	movt	r0, #2
   28324:	bl	11de0 <getenv@plt>
   28328:	mov	r9, r0
   2832c:	ldrb	r0, [r6, #4]
   28330:	cmp	r9, #0
   28334:	beq	283a4 <_obstack_memory_used@@Base+0x2550>
   28338:	cmp	r0, #0
   2833c:	beq	28354 <_obstack_memory_used@@Base+0x2500>
   28340:	add	r0, r6, #5
   28344:	mov	r1, r9
   28348:	bl	11bd0 <strcmp@plt>
   2834c:	cmp	r0, #0
   28350:	beq	28494 <_obstack_memory_used@@Base+0x2640>
   28354:	mov	r0, r9
   28358:	str	r7, [sp]
   2835c:	bl	11eac <strlen@plt>
   28360:	add	sl, r0, #1
   28364:	mov	r8, #1
   28368:	cmp	sl, #58	; 0x3a
   2836c:	bls	283b8 <_obstack_memory_used@@Base+0x2564>
   28370:	add	r0, r0, #10
   28374:	bic	r0, r0, #3
   28378:	bl	2a648 <_obstack_memory_used@@Base+0x47f4>
   2837c:	cmp	r0, #0
   28380:	bne	283c8 <_obstack_memory_used@@Base+0x2574>
   28384:	mov	r0, #0
   28388:	sub	sp, fp, #28
   2838c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   28390:	mov	r0, r5
   28394:	mov	r1, r7
   28398:	sub	sp, fp, #28
   2839c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   283a0:	b	11bb8 <gmtime_r@plt>
   283a4:	mov	r8, #0
   283a8:	cmp	r0, #0
   283ac:	mov	sl, #0
   283b0:	str	r7, [sp]
   283b4:	beq	28490 <_obstack_memory_used@@Base+0x263c>
   283b8:	mov	r0, #64	; 0x40
   283bc:	bl	2a648 <_obstack_memory_used@@Base+0x47f4>
   283c0:	cmp	r0, #0
   283c4:	beq	28384 <_obstack_memory_used@@Base+0x2530>
   283c8:	mov	r4, r0
   283cc:	mov	r7, r5
   283d0:	strb	r8, [r0, #4]
   283d4:	mov	r0, #0
   283d8:	cmp	r8, #0
   283dc:	mov	r5, r4
   283e0:	str	r0, [r4]
   283e4:	strb	r0, [r5, #5]!
   283e8:	beq	28404 <_obstack_memory_used@@Base+0x25b0>
   283ec:	mov	r0, r5
   283f0:	mov	r1, r9
   283f4:	mov	r2, sl
   283f8:	mov	r8, #0
   283fc:	bl	11c60 <memcpy@plt>
   28400:	strb	r8, [r5, sl]
   28404:	ldrb	r0, [r6, #4]
   28408:	mov	r5, r7
   2840c:	cmp	r0, #0
   28410:	beq	28470 <_obstack_memory_used@@Base+0x261c>
   28414:	movw	r0, #45204	; 0xb094
   28418:	add	r1, r6, #5
   2841c:	mov	r2, #1
   28420:	movt	r0, #2
   28424:	bl	11ec4 <setenv@plt>
   28428:	ldr	r7, [sp]
   2842c:	cmp	r0, #0
   28430:	beq	28488 <_obstack_memory_used@@Base+0x2634>
   28434:	bl	11ed0 <__errno_location@plt>
   28438:	ldr	r6, [r0]
   2843c:	mov	r5, r0
   28440:	cmp	r4, #2
   28444:	bcc	28460 <_obstack_memory_used@@Base+0x260c>
   28448:	ldr	r7, [r4]
   2844c:	mov	r0, r4
   28450:	bl	2056c <__assert_fail@plt+0xe4e0>
   28454:	cmp	r7, #0
   28458:	mov	r4, r7
   2845c:	bne	28448 <_obstack_memory_used@@Base+0x25f4>
   28460:	str	r6, [r5]
   28464:	mov	r0, #0
   28468:	sub	sp, fp, #28
   2846c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   28470:	movw	r0, #45204	; 0xb094
   28474:	movt	r0, #2
   28478:	bl	12020 <unsetenv@plt>
   2847c:	ldr	r7, [sp]
   28480:	cmp	r0, #0
   28484:	bne	28434 <_obstack_memory_used@@Base+0x25e0>
   28488:	bl	11d20 <tzset@plt>
   2848c:	b	28498 <_obstack_memory_used@@Base+0x2644>
   28490:	ldr	r7, [sp]
   28494:	mov	r4, #1
   28498:	mov	r0, r5
   2849c:	mov	r1, r7
   284a0:	bl	11cd8 <localtime_r@plt>
   284a4:	mov	sl, #1
   284a8:	cmp	r0, #0
   284ac:	mov	r9, #1
   284b0:	beq	284c4 <_obstack_memory_used@@Base+0x2670>
   284b4:	mov	r0, r6
   284b8:	mov	r1, r7
   284bc:	bl	28570 <_obstack_memory_used@@Base+0x271c>
   284c0:	eor	r9, r0, #1
   284c4:	cmp	r4, #1
   284c8:	beq	2852c <_obstack_memory_used@@Base+0x26d8>
   284cc:	bl	11ed0 <__errno_location@plt>
   284d0:	mov	r6, r0
   284d4:	ldr	r8, [r0]
   284d8:	ldrb	r0, [r4, #4]
   284dc:	cmp	r0, #0
   284e0:	beq	28548 <_obstack_memory_used@@Base+0x26f4>
   284e4:	movw	r0, #45204	; 0xb094
   284e8:	add	r1, r4, #5
   284ec:	mov	r2, #1
   284f0:	movt	r0, #2
   284f4:	bl	11ec4 <setenv@plt>
   284f8:	cmp	r0, #0
   284fc:	beq	2855c <_obstack_memory_used@@Base+0x2708>
   28500:	ldr	r8, [r6]
   28504:	mov	sl, #0
   28508:	cmp	r4, #2
   2850c:	bcc	28528 <_obstack_memory_used@@Base+0x26d4>
   28510:	ldr	r5, [r4]
   28514:	mov	r0, r4
   28518:	bl	2056c <__assert_fail@plt+0xe4e0>
   2851c:	cmp	r5, #0
   28520:	mov	r4, r5
   28524:	bne	28510 <_obstack_memory_used@@Base+0x26bc>
   28528:	str	r8, [r6]
   2852c:	cmp	sl, #0
   28530:	moveq	r7, sl
   28534:	cmp	r9, #0
   28538:	movwne	r7, #0
   2853c:	mov	r0, r7
   28540:	sub	sp, fp, #28
   28544:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   28548:	movw	r0, #45204	; 0xb094
   2854c:	movt	r0, #2
   28550:	bl	12020 <unsetenv@plt>
   28554:	cmp	r0, #0
   28558:	bne	28500 <_obstack_memory_used@@Base+0x26ac>
   2855c:	bl	11d20 <tzset@plt>
   28560:	mov	sl, #1
   28564:	cmp	r4, #2
   28568:	bcs	28510 <_obstack_memory_used@@Base+0x26bc>
   2856c:	b	28528 <_obstack_memory_used@@Base+0x26d4>
   28570:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   28574:	add	fp, sp, #28
   28578:	sub	sp, sp, #4
   2857c:	ldr	r7, [r1, #40]	; 0x28
   28580:	mov	r8, #1
   28584:	cmp	r7, #0
   28588:	beq	28628 <_obstack_memory_used@@Base+0x27d4>
   2858c:	mov	r5, r1
   28590:	mov	r6, r0
   28594:	cmp	r7, r1
   28598:	bcc	285a8 <_obstack_memory_used@@Base+0x2754>
   2859c:	add	r0, r5, #44	; 0x2c
   285a0:	cmp	r7, r0
   285a4:	bcc	28628 <_obstack_memory_used@@Base+0x27d4>
   285a8:	ldrb	r0, [r7]
   285ac:	cmp	r0, #0
   285b0:	beq	2861c <_obstack_memory_used@@Base+0x27c8>
   285b4:	add	r4, r6, #5
   285b8:	mov	r0, r4
   285bc:	mov	r1, r7
   285c0:	bl	11bd0 <strcmp@plt>
   285c4:	cmp	r0, #0
   285c8:	beq	286cc <_obstack_memory_used@@Base+0x2878>
   285cc:	ldrb	r0, [r4]
   285d0:	cmp	r0, #0
   285d4:	bne	285f0 <_obstack_memory_used@@Base+0x279c>
   285d8:	add	r0, r6, #5
   285dc:	cmp	r4, r0
   285e0:	bne	28634 <_obstack_memory_used@@Base+0x27e0>
   285e4:	ldrb	r0, [r6, #4]
   285e8:	cmp	r0, #0
   285ec:	beq	28634 <_obstack_memory_used@@Base+0x27e0>
   285f0:	mov	r0, r4
   285f4:	bl	11eac <strlen@plt>
   285f8:	add	r4, r0, r4
   285fc:	ldrb	r0, [r4, #1]!
   28600:	cmp	r0, #0
   28604:	bne	285b8 <_obstack_memory_used@@Base+0x2764>
   28608:	ldr	r0, [r6]
   2860c:	cmp	r0, #0
   28610:	addne	r4, r0, #5
   28614:	movne	r6, r0
   28618:	b	285b8 <_obstack_memory_used@@Base+0x2764>
   2861c:	movw	r4, #54434	; 0xd4a2
   28620:	movt	r4, #2
   28624:	str	r4, [r5, #40]	; 0x28
   28628:	mov	r0, r8
   2862c:	sub	sp, fp, #28
   28630:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   28634:	sub	r0, r6, r4
   28638:	add	sl, r0, #64	; 0x40
   2863c:	mov	r0, r7
   28640:	bl	11eac <strlen@plt>
   28644:	add	r9, r0, #1
   28648:	cmp	r9, sl
   2864c:	bge	28678 <_obstack_memory_used@@Base+0x2824>
   28650:	mov	r0, r4
   28654:	mov	r1, r7
   28658:	mov	r2, r9
   2865c:	bl	11c60 <memcpy@plt>
   28660:	mov	r0, #0
   28664:	strb	r0, [r4, r9]
   28668:	str	r4, [r5, #40]	; 0x28
   2866c:	mov	r0, r8
   28670:	sub	sp, fp, #28
   28674:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   28678:	add	r0, r0, #10
   2867c:	cmp	r9, #59	; 0x3b
   28680:	bic	r0, r0, #3
   28684:	movwcc	r0, #64	; 0x40
   28688:	bl	2a648 <_obstack_memory_used@@Base+0x47f4>
   2868c:	cmp	r0, #0
   28690:	beq	286dc <_obstack_memory_used@@Base+0x2888>
   28694:	mov	sl, r0
   28698:	mov	r0, #1
   2869c:	mov	r1, r7
   286a0:	mov	r2, r9
   286a4:	strh	r0, [sl, #4]
   286a8:	mov	r0, #0
   286ac:	add	r4, sl, #5
   286b0:	str	r0, [sl]
   286b4:	mov	r0, r4
   286b8:	bl	11c60 <memcpy@plt>
   286bc:	mov	r0, #0
   286c0:	strb	r0, [r4, r9]
   286c4:	str	sl, [r6]
   286c8:	strb	r0, [sl, #4]
   286cc:	str	r4, [r5, #40]	; 0x28
   286d0:	mov	r0, r8
   286d4:	sub	sp, fp, #28
   286d8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   286dc:	mov	r8, #0
   286e0:	str	r8, [r6]
   286e4:	mov	r0, r8
   286e8:	sub	sp, fp, #28
   286ec:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   286f0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   286f4:	add	fp, sp, #28
   286f8:	sub	sp, sp, #52	; 0x34
   286fc:	mov	r9, r1
   28700:	cmp	r0, #0
   28704:	beq	28780 <_obstack_memory_used@@Base+0x292c>
   28708:	mov	r7, r0
   2870c:	movw	r0, #45204	; 0xb094
   28710:	movt	r0, #2
   28714:	bl	11de0 <getenv@plt>
   28718:	mov	r5, r0
   2871c:	ldrb	r0, [r7, #4]
   28720:	cmp	r5, #0
   28724:	beq	28790 <_obstack_memory_used@@Base+0x293c>
   28728:	cmp	r0, #0
   2872c:	beq	28744 <_obstack_memory_used@@Base+0x28f0>
   28730:	add	r0, r7, #5
   28734:	mov	r1, r5
   28738:	bl	11bd0 <strcmp@plt>
   2873c:	cmp	r0, #0
   28740:	beq	28854 <_obstack_memory_used@@Base+0x2a00>
   28744:	mov	r0, r5
   28748:	bl	11eac <strlen@plt>
   2874c:	add	sl, r0, #1
   28750:	mov	r8, #1
   28754:	cmp	sl, #58	; 0x3a
   28758:	bls	287a0 <_obstack_memory_used@@Base+0x294c>
   2875c:	add	r0, r0, #10
   28760:	bic	r0, r0, #3
   28764:	bl	2a648 <_obstack_memory_used@@Base+0x47f4>
   28768:	mvn	r6, #0
   2876c:	cmp	r0, #0
   28770:	bne	287b4 <_obstack_memory_used@@Base+0x2960>
   28774:	mov	r0, r6
   28778:	sub	sp, fp, #28
   2877c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   28780:	mov	r0, r9
   28784:	sub	sp, fp, #28
   28788:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2878c:	b	11fcc <timegm@plt>
   28790:	mov	r8, #0
   28794:	cmp	r0, #0
   28798:	mov	sl, #0
   2879c:	beq	28854 <_obstack_memory_used@@Base+0x2a00>
   287a0:	mov	r0, #64	; 0x40
   287a4:	bl	2a648 <_obstack_memory_used@@Base+0x47f4>
   287a8:	mvn	r6, #0
   287ac:	cmp	r0, #0
   287b0:	beq	28774 <_obstack_memory_used@@Base+0x2920>
   287b4:	mov	r4, r0
   287b8:	strb	r8, [r0, #4]
   287bc:	mov	r0, #0
   287c0:	cmp	r8, #0
   287c4:	mov	r6, r4
   287c8:	str	r0, [r4]
   287cc:	strb	r0, [r6, #5]!
   287d0:	beq	287ec <_obstack_memory_used@@Base+0x2998>
   287d4:	mov	r0, r6
   287d8:	mov	r1, r5
   287dc:	mov	r2, sl
   287e0:	mov	r8, #0
   287e4:	bl	11c60 <memcpy@plt>
   287e8:	strb	r8, [r6, sl]
   287ec:	ldrb	r0, [r7, #4]
   287f0:	cmp	r0, #0
   287f4:	beq	2885c <_obstack_memory_used@@Base+0x2a08>
   287f8:	movw	r0, #45204	; 0xb094
   287fc:	add	r1, r7, #5
   28800:	mov	r2, #1
   28804:	movt	r0, #2
   28808:	bl	11ec4 <setenv@plt>
   2880c:	cmp	r0, #0
   28810:	beq	28870 <_obstack_memory_used@@Base+0x2a1c>
   28814:	bl	11ed0 <__errno_location@plt>
   28818:	ldr	r5, [r0]
   2881c:	mov	r6, r0
   28820:	cmp	r4, #2
   28824:	bcc	28840 <_obstack_memory_used@@Base+0x29ec>
   28828:	ldr	r7, [r4]
   2882c:	mov	r0, r4
   28830:	bl	2056c <__assert_fail@plt+0xe4e0>
   28834:	cmp	r7, #0
   28838:	mov	r4, r7
   2883c:	bne	28828 <_obstack_memory_used@@Base+0x29d4>
   28840:	str	r5, [r6]
   28844:	mvn	r6, #0
   28848:	mov	r0, r6
   2884c:	sub	sp, fp, #28
   28850:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   28854:	mov	r4, #1
   28858:	b	28874 <_obstack_memory_used@@Base+0x2a20>
   2885c:	movw	r0, #45204	; 0xb094
   28860:	movt	r0, #2
   28864:	bl	12020 <unsetenv@plt>
   28868:	cmp	r0, #0
   2886c:	bne	28814 <_obstack_memory_used@@Base+0x29c0>
   28870:	bl	11d20 <tzset@plt>
   28874:	mov	r0, #32
   28878:	mov	r1, r9
   2887c:	add	r5, sp, #8
   28880:	vld1.32	{d16-d17}, [r1], r0
   28884:	mov	r2, r5
   28888:	vst1.32	{d16-d17}, [r2], r0
   2888c:	ldr	r0, [r9, #16]
   28890:	ldr	r3, [r9, #20]
   28894:	str	r0, [sp, #24]
   28898:	mvn	r0, #0
   2889c:	str	r0, [sp, #36]	; 0x24
   288a0:	str	r3, [sp, #28]
   288a4:	ldr	r0, [r1]
   288a8:	str	r0, [r2]
   288ac:	mov	r0, r5
   288b0:	bl	11be8 <mktime@plt>
   288b4:	mov	r6, r0
   288b8:	ldr	r0, [sp, #36]	; 0x24
   288bc:	mov	sl, #1
   288c0:	mov	r8, #1
   288c4:	cmp	r0, #0
   288c8:	bmi	288dc <_obstack_memory_used@@Base+0x2a88>
   288cc:	add	r1, sp, #8
   288d0:	mov	r0, r7
   288d4:	bl	28570 <_obstack_memory_used@@Base+0x271c>
   288d8:	eor	r8, r0, #1
   288dc:	cmp	r4, #1
   288e0:	beq	28954 <_obstack_memory_used@@Base+0x2b00>
   288e4:	bl	11ed0 <__errno_location@plt>
   288e8:	mov	r7, r0
   288ec:	ldr	sl, [r0]
   288f0:	ldrb	r0, [r4, #4]
   288f4:	cmp	r0, #0
   288f8:	beq	289a0 <_obstack_memory_used@@Base+0x2b4c>
   288fc:	movw	r0, #45204	; 0xb094
   28900:	add	r1, r4, #5
   28904:	mov	r2, #1
   28908:	movt	r0, #2
   2890c:	bl	11ec4 <setenv@plt>
   28910:	cmp	r0, #0
   28914:	str	r6, [sp, #4]
   28918:	beq	289b8 <_obstack_memory_used@@Base+0x2b64>
   2891c:	ldr	r0, [r7]
   28920:	mov	sl, #0
   28924:	str	r0, [sp]
   28928:	cmp	r4, #2
   2892c:	bcc	28948 <_obstack_memory_used@@Base+0x2af4>
   28930:	ldr	r6, [r4]
   28934:	mov	r0, r4
   28938:	bl	2056c <__assert_fail@plt+0xe4e0>
   2893c:	cmp	r6, #0
   28940:	mov	r4, r6
   28944:	bne	28930 <_obstack_memory_used@@Base+0x2adc>
   28948:	ldr	r0, [sp]
   2894c:	ldr	r6, [sp, #4]
   28950:	str	r0, [r7]
   28954:	eor	r0, sl, #1
   28958:	orrs	r0, r8, r0
   2895c:	beq	28970 <_obstack_memory_used@@Base+0x2b1c>
   28960:	mvn	r6, #0
   28964:	mov	r0, r6
   28968:	sub	sp, fp, #28
   2896c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   28970:	mov	r0, #28
   28974:	add	r1, r5, #16
   28978:	vld1.32	{d16-d17}, [r5], r0
   2897c:	vld1.64	{d18-d19}, [r1]
   28980:	add	r1, r9, #16
   28984:	vld1.32	{d20-d21}, [r5]
   28988:	vst1.32	{d16-d17}, [r9], r0
   2898c:	vst1.32	{d18-d19}, [r1]
   28990:	vst1.32	{d20-d21}, [r9]
   28994:	mov	r0, r6
   28998:	sub	sp, fp, #28
   2899c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   289a0:	movw	r0, #45204	; 0xb094
   289a4:	movt	r0, #2
   289a8:	bl	12020 <unsetenv@plt>
   289ac:	cmp	r0, #0
   289b0:	str	r6, [sp, #4]
   289b4:	bne	2891c <_obstack_memory_used@@Base+0x2ac8>
   289b8:	str	sl, [sp]
   289bc:	bl	11d20 <tzset@plt>
   289c0:	mov	sl, #1
   289c4:	cmp	r4, #2
   289c8:	bcs	28930 <_obstack_memory_used@@Base+0x2adc>
   289cc:	b	28948 <_obstack_memory_used@@Base+0x2af4>
   289d0:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   289d4:	add	fp, sp, #24
   289d8:	sub	sp, sp, #32
   289dc:	ldr	r6, [fp, #12]
   289e0:	ldr	r7, [fp, #8]
   289e4:	mov	r4, r2
   289e8:	mov	r8, r0
   289ec:	cmp	r1, #0
   289f0:	beq	28a18 <_obstack_memory_used@@Base+0x2bc4>
   289f4:	movw	r2, #61672	; 0xf0e8
   289f8:	mov	r5, r1
   289fc:	str	r3, [sp, #4]
   28a00:	str	r4, [sp]
   28a04:	mov	r0, r8
   28a08:	mov	r1, #1
   28a0c:	movt	r2, #2
   28a10:	mov	r3, r5
   28a14:	b	28a30 <_obstack_memory_used@@Base+0x2bdc>
   28a18:	movw	r2, #61684	; 0xf0f4
   28a1c:	str	r3, [sp]
   28a20:	mov	r0, r8
   28a24:	mov	r1, #1
   28a28:	mov	r3, r4
   28a2c:	movt	r2, #2
   28a30:	bl	11f24 <__fprintf_chk@plt>
   28a34:	movw	r1, #61691	; 0xf0fb
   28a38:	mov	r0, #0
   28a3c:	mov	r2, #5
   28a40:	movt	r1, #2
   28a44:	bl	11ca8 <dcgettext@plt>
   28a48:	movw	r2, #62409	; 0xf3c9
   28a4c:	mov	r3, r0
   28a50:	movw	r0, #2022	; 0x7e6
   28a54:	mov	r1, #1
   28a58:	movt	r2, #2
   28a5c:	str	r0, [sp]
   28a60:	mov	r0, r8
   28a64:	bl	11f24 <__fprintf_chk@plt>
   28a68:	movw	r4, #55181	; 0xd78d
   28a6c:	mov	r1, r8
   28a70:	movt	r4, #2
   28a74:	mov	r0, r4
   28a78:	bl	11b94 <fputs_unlocked@plt>
   28a7c:	movw	r1, #61695	; 0xf0ff
   28a80:	mov	r0, #0
   28a84:	mov	r2, #5
   28a88:	movt	r1, #2
   28a8c:	bl	11ca8 <dcgettext@plt>
   28a90:	movw	r3, #61866	; 0xf1aa
   28a94:	mov	r2, r0
   28a98:	mov	r0, r8
   28a9c:	mov	r1, #1
   28aa0:	movt	r3, #2
   28aa4:	bl	11f24 <__fprintf_chk@plt>
   28aa8:	mov	r0, r4
   28aac:	mov	r1, r8
   28ab0:	bl	11b94 <fputs_unlocked@plt>
   28ab4:	cmp	r6, #9
   28ab8:	bhi	28af4 <_obstack_memory_used@@Base+0x2ca0>
   28abc:	add	r0, pc, #0
   28ac0:	ldr	pc, [r0, r6, lsl #2]
   28ac4:	andeq	r8, r2, ip, ror #21
   28ac8:	andeq	r8, r2, r0, lsl #22
   28acc:	andeq	r8, r2, r0, lsr fp
   28ad0:	andeq	r8, r2, r8, asr fp
   28ad4:	andeq	r8, r2, r0, lsl #23
   28ad8:	andeq	r8, r2, r8, lsr #23
   28adc:	ldrdeq	r8, [r2], -r0
   28ae0:	andeq	r8, r2, r8, lsl #24
   28ae4:			; <UNDEFINED> instruction: 0x00028cb0
   28ae8:	andeq	r8, r2, r8, asr ip
   28aec:	sub	sp, fp, #24
   28af0:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   28af4:	movw	r1, #62219	; 0xf30b
   28af8:	movt	r1, #2
   28afc:	b	28c60 <_obstack_memory_used@@Base+0x2e0c>
   28b00:	movw	r1, #61900	; 0xf1cc
   28b04:	mov	r0, #0
   28b08:	mov	r2, #5
   28b0c:	movt	r1, #2
   28b10:	bl	11ca8 <dcgettext@plt>
   28b14:	ldr	r3, [r7]
   28b18:	mov	r2, r0
   28b1c:	mov	r0, r8
   28b20:	mov	r1, #1
   28b24:	sub	sp, fp, #24
   28b28:	pop	{r4, r5, r6, r7, r8, sl, fp, lr}
   28b2c:	b	11f24 <__fprintf_chk@plt>
   28b30:	movw	r1, #61916	; 0xf1dc
   28b34:	mov	r0, #0
   28b38:	mov	r2, #5
   28b3c:	movt	r1, #2
   28b40:	bl	11ca8 <dcgettext@plt>
   28b44:	mov	r2, r0
   28b48:	ldr	r3, [r7]
   28b4c:	ldr	r0, [r7, #4]
   28b50:	str	r0, [sp]
   28b54:	b	28c44 <_obstack_memory_used@@Base+0x2df0>
   28b58:	movw	r1, #61939	; 0xf1f3
   28b5c:	mov	r0, #0
   28b60:	mov	r2, #5
   28b64:	movt	r1, #2
   28b68:	bl	11ca8 <dcgettext@plt>
   28b6c:	mov	r2, r0
   28b70:	ldr	r3, [r7]
   28b74:	ldmib	r7, {r0, r1}
   28b78:	stm	sp, {r0, r1}
   28b7c:	b	28c44 <_obstack_memory_used@@Base+0x2df0>
   28b80:	movw	r1, #61967	; 0xf20f
   28b84:	mov	r0, #0
   28b88:	mov	r2, #5
   28b8c:	movt	r1, #2
   28b90:	bl	11ca8 <dcgettext@plt>
   28b94:	ldr	r3, [r7]
   28b98:	mov	r2, r0
   28b9c:	ldmib	r7, {r0, r1, r7}
   28ba0:	stm	sp, {r0, r1, r7}
   28ba4:	b	28c44 <_obstack_memory_used@@Base+0x2df0>
   28ba8:	movw	r1, #61999	; 0xf22f
   28bac:	mov	r0, #0
   28bb0:	mov	r2, #5
   28bb4:	movt	r1, #2
   28bb8:	bl	11ca8 <dcgettext@plt>
   28bbc:	ldr	r3, [r7]
   28bc0:	mov	r2, r0
   28bc4:	ldmib	r7, {r0, r1, r6, r7}
   28bc8:	stm	sp, {r0, r1, r6, r7}
   28bcc:	b	28c44 <_obstack_memory_used@@Base+0x2df0>
   28bd0:	movw	r1, #62035	; 0xf253
   28bd4:	mov	r0, #0
   28bd8:	mov	r2, #5
   28bdc:	movt	r1, #2
   28be0:	bl	11ca8 <dcgettext@plt>
   28be4:	mov	r2, r0
   28be8:	ldr	r3, [r7]
   28bec:	ldmib	r7, {r0, r1, r6}
   28bf0:	ldr	r5, [r7, #16]
   28bf4:	ldr	r7, [r7, #20]
   28bf8:	stm	sp, {r0, r1, r6}
   28bfc:	str	r5, [sp, #12]
   28c00:	str	r7, [sp, #16]
   28c04:	b	28c44 <_obstack_memory_used@@Base+0x2df0>
   28c08:	movw	r1, #62075	; 0xf27b
   28c0c:	mov	r0, #0
   28c10:	mov	r2, #5
   28c14:	movt	r1, #2
   28c18:	bl	11ca8 <dcgettext@plt>
   28c1c:	mov	r2, r0
   28c20:	ldr	r3, [r7]
   28c24:	ldmib	r7, {r0, r1, r6}
   28c28:	ldr	r5, [r7, #16]
   28c2c:	ldr	r4, [r7, #20]
   28c30:	ldr	r7, [r7, #24]
   28c34:	stm	sp, {r0, r1, r6}
   28c38:	str	r5, [sp, #12]
   28c3c:	str	r4, [sp, #16]
   28c40:	str	r7, [sp, #20]
   28c44:	mov	r0, r8
   28c48:	mov	r1, #1
   28c4c:	bl	11f24 <__fprintf_chk@plt>
   28c50:	sub	sp, fp, #24
   28c54:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   28c58:	movw	r1, #62167	; 0xf2d7
   28c5c:	movt	r1, #2
   28c60:	mov	r0, #0
   28c64:	mov	r2, #5
   28c68:	bl	11ca8 <dcgettext@plt>
   28c6c:	mov	ip, r0
   28c70:	ldr	r3, [r7]
   28c74:	ldr	r0, [r7, #4]
   28c78:	ldr	r1, [r7, #8]
   28c7c:	ldr	r6, [r7, #12]
   28c80:	ldr	r5, [r7, #16]
   28c84:	ldr	r4, [r7, #20]
   28c88:	ldr	r2, [r7, #24]
   28c8c:	ldr	lr, [r7, #28]
   28c90:	ldr	r7, [r7, #32]
   28c94:	stm	sp, {r0, r1, r6}
   28c98:	str	r5, [sp, #12]
   28c9c:	str	r4, [sp, #16]
   28ca0:	str	r2, [sp, #20]
   28ca4:	str	lr, [sp, #24]
   28ca8:	str	r7, [sp, #28]
   28cac:	b	28cf4 <_obstack_memory_used@@Base+0x2ea0>
   28cb0:	movw	r1, #62119	; 0xf2a7
   28cb4:	mov	r0, #0
   28cb8:	mov	r2, #5
   28cbc:	movt	r1, #2
   28cc0:	bl	11ca8 <dcgettext@plt>
   28cc4:	mov	ip, r0
   28cc8:	ldr	r3, [r7]
   28ccc:	ldmib	r7, {r0, r1, r6}
   28cd0:	ldr	r5, [r7, #16]
   28cd4:	ldr	r4, [r7, #20]
   28cd8:	ldr	r2, [r7, #24]
   28cdc:	ldr	r7, [r7, #28]
   28ce0:	stm	sp, {r0, r1, r6}
   28ce4:	str	r5, [sp, #12]
   28ce8:	str	r4, [sp, #16]
   28cec:	str	r2, [sp, #20]
   28cf0:	str	r7, [sp, #24]
   28cf4:	mov	r0, r8
   28cf8:	mov	r1, #1
   28cfc:	mov	r2, ip
   28d00:	bl	11f24 <__fprintf_chk@plt>
   28d04:	sub	sp, fp, #24
   28d08:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   28d0c:	push	{r4, sl, fp, lr}
   28d10:	add	fp, sp, #8
   28d14:	sub	sp, sp, #8
   28d18:	ldr	ip, [fp, #8]
   28d1c:	mov	lr, #0
   28d20:	ldr	r4, [ip, lr, lsl #2]
   28d24:	add	lr, lr, #1
   28d28:	cmp	r4, #0
   28d2c:	bne	28d20 <_obstack_memory_used@@Base+0x2ecc>
   28d30:	sub	r4, lr, #1
   28d34:	str	ip, [sp]
   28d38:	str	r4, [sp, #4]
   28d3c:	bl	289d0 <_obstack_memory_used@@Base+0x2b7c>
   28d40:	sub	sp, fp, #8
   28d44:	pop	{r4, sl, fp, pc}
   28d48:	push	{fp, lr}
   28d4c:	mov	fp, sp
   28d50:	sub	sp, sp, #48	; 0x30
   28d54:	ldr	ip, [fp, #8]
   28d58:	ldr	lr, [ip]
   28d5c:	cmp	lr, #0
   28d60:	str	lr, [sp, #8]
   28d64:	beq	28e00 <_obstack_memory_used@@Base+0x2fac>
   28d68:	ldr	lr, [ip, #4]
   28d6c:	cmp	lr, #0
   28d70:	str	lr, [sp, #12]
   28d74:	beq	28e08 <_obstack_memory_used@@Base+0x2fb4>
   28d78:	ldr	lr, [ip, #8]
   28d7c:	cmp	lr, #0
   28d80:	str	lr, [sp, #16]
   28d84:	beq	28e10 <_obstack_memory_used@@Base+0x2fbc>
   28d88:	ldr	lr, [ip, #12]
   28d8c:	cmp	lr, #0
   28d90:	str	lr, [sp, #20]
   28d94:	beq	28e18 <_obstack_memory_used@@Base+0x2fc4>
   28d98:	ldr	lr, [ip, #16]
   28d9c:	cmp	lr, #0
   28da0:	str	lr, [sp, #24]
   28da4:	beq	28e20 <_obstack_memory_used@@Base+0x2fcc>
   28da8:	ldr	lr, [ip, #20]
   28dac:	cmp	lr, #0
   28db0:	str	lr, [sp, #28]
   28db4:	beq	28e28 <_obstack_memory_used@@Base+0x2fd4>
   28db8:	ldr	lr, [ip, #24]
   28dbc:	cmp	lr, #0
   28dc0:	str	lr, [sp, #32]
   28dc4:	beq	28e30 <_obstack_memory_used@@Base+0x2fdc>
   28dc8:	ldr	lr, [ip, #28]
   28dcc:	cmp	lr, #0
   28dd0:	str	lr, [sp, #36]	; 0x24
   28dd4:	beq	28e38 <_obstack_memory_used@@Base+0x2fe4>
   28dd8:	ldr	lr, [ip, #32]
   28ddc:	cmp	lr, #0
   28de0:	str	lr, [sp, #40]	; 0x28
   28de4:	beq	28e40 <_obstack_memory_used@@Base+0x2fec>
   28de8:	ldr	lr, [ip, #36]	; 0x24
   28dec:	mov	ip, #10
   28df0:	cmp	lr, #0
   28df4:	str	lr, [sp, #44]	; 0x2c
   28df8:	movweq	ip, #9
   28dfc:	b	28e44 <_obstack_memory_used@@Base+0x2ff0>
   28e00:	mov	ip, #0
   28e04:	b	28e44 <_obstack_memory_used@@Base+0x2ff0>
   28e08:	mov	ip, #1
   28e0c:	b	28e44 <_obstack_memory_used@@Base+0x2ff0>
   28e10:	mov	ip, #2
   28e14:	b	28e44 <_obstack_memory_used@@Base+0x2ff0>
   28e18:	mov	ip, #3
   28e1c:	b	28e44 <_obstack_memory_used@@Base+0x2ff0>
   28e20:	mov	ip, #4
   28e24:	b	28e44 <_obstack_memory_used@@Base+0x2ff0>
   28e28:	mov	ip, #5
   28e2c:	b	28e44 <_obstack_memory_used@@Base+0x2ff0>
   28e30:	mov	ip, #6
   28e34:	b	28e44 <_obstack_memory_used@@Base+0x2ff0>
   28e38:	mov	ip, #7
   28e3c:	b	28e44 <_obstack_memory_used@@Base+0x2ff0>
   28e40:	mov	ip, #8
   28e44:	add	lr, sp, #8
   28e48:	str	ip, [sp, #4]
   28e4c:	str	lr, [sp]
   28e50:	bl	289d0 <_obstack_memory_used@@Base+0x2b7c>
   28e54:	mov	sp, fp
   28e58:	pop	{fp, pc}
   28e5c:	push	{fp, lr}
   28e60:	mov	fp, sp
   28e64:	sub	sp, sp, #56	; 0x38
   28e68:	add	ip, fp, #8
   28e6c:	str	ip, [sp, #12]
   28e70:	ldr	lr, [fp, #8]
   28e74:	cmp	lr, #0
   28e78:	str	lr, [sp, #16]
   28e7c:	beq	28f18 <_obstack_memory_used@@Base+0x30c4>
   28e80:	ldr	lr, [ip, #4]
   28e84:	cmp	lr, #0
   28e88:	str	lr, [sp, #20]
   28e8c:	beq	28f20 <_obstack_memory_used@@Base+0x30cc>
   28e90:	ldr	lr, [ip, #8]
   28e94:	cmp	lr, #0
   28e98:	str	lr, [sp, #24]
   28e9c:	beq	28f28 <_obstack_memory_used@@Base+0x30d4>
   28ea0:	ldr	lr, [ip, #12]
   28ea4:	cmp	lr, #0
   28ea8:	str	lr, [sp, #28]
   28eac:	beq	28f30 <_obstack_memory_used@@Base+0x30dc>
   28eb0:	ldr	lr, [ip, #16]
   28eb4:	cmp	lr, #0
   28eb8:	str	lr, [sp, #32]
   28ebc:	beq	28f38 <_obstack_memory_used@@Base+0x30e4>
   28ec0:	ldr	lr, [ip, #20]
   28ec4:	cmp	lr, #0
   28ec8:	str	lr, [sp, #36]	; 0x24
   28ecc:	beq	28f40 <_obstack_memory_used@@Base+0x30ec>
   28ed0:	ldr	lr, [ip, #24]
   28ed4:	cmp	lr, #0
   28ed8:	str	lr, [sp, #40]	; 0x28
   28edc:	beq	28f48 <_obstack_memory_used@@Base+0x30f4>
   28ee0:	ldr	lr, [ip, #28]
   28ee4:	cmp	lr, #0
   28ee8:	str	lr, [sp, #44]	; 0x2c
   28eec:	beq	28f50 <_obstack_memory_used@@Base+0x30fc>
   28ef0:	ldr	lr, [ip, #32]
   28ef4:	cmp	lr, #0
   28ef8:	str	lr, [sp, #48]	; 0x30
   28efc:	beq	28f58 <_obstack_memory_used@@Base+0x3104>
   28f00:	ldr	lr, [ip, #36]	; 0x24
   28f04:	mov	ip, #10
   28f08:	cmp	lr, #0
   28f0c:	str	lr, [sp, #52]	; 0x34
   28f10:	movweq	ip, #9
   28f14:	b	28f5c <_obstack_memory_used@@Base+0x3108>
   28f18:	mov	ip, #0
   28f1c:	b	28f5c <_obstack_memory_used@@Base+0x3108>
   28f20:	mov	ip, #1
   28f24:	b	28f5c <_obstack_memory_used@@Base+0x3108>
   28f28:	mov	ip, #2
   28f2c:	b	28f5c <_obstack_memory_used@@Base+0x3108>
   28f30:	mov	ip, #3
   28f34:	b	28f5c <_obstack_memory_used@@Base+0x3108>
   28f38:	mov	ip, #4
   28f3c:	b	28f5c <_obstack_memory_used@@Base+0x3108>
   28f40:	mov	ip, #5
   28f44:	b	28f5c <_obstack_memory_used@@Base+0x3108>
   28f48:	mov	ip, #6
   28f4c:	b	28f5c <_obstack_memory_used@@Base+0x3108>
   28f50:	mov	ip, #7
   28f54:	b	28f5c <_obstack_memory_used@@Base+0x3108>
   28f58:	mov	ip, #8
   28f5c:	add	lr, sp, #16
   28f60:	str	ip, [sp, #4]
   28f64:	str	lr, [sp]
   28f68:	bl	289d0 <_obstack_memory_used@@Base+0x2b7c>
   28f6c:	mov	sp, fp
   28f70:	pop	{fp, pc}
   28f74:	push	{fp, lr}
   28f78:	mov	fp, sp
   28f7c:	movw	r0, #780	; 0x30c
   28f80:	movt	r0, #4
   28f84:	ldr	r1, [r0]
   28f88:	movw	r0, #55181	; 0xd78d
   28f8c:	movt	r0, #2
   28f90:	bl	11b94 <fputs_unlocked@plt>
   28f94:	movw	r1, #62279	; 0xf347
   28f98:	mov	r0, #0
   28f9c:	mov	r2, #5
   28fa0:	movt	r1, #2
   28fa4:	bl	11ca8 <dcgettext@plt>
   28fa8:	movw	r2, #62299	; 0xf35b
   28fac:	mov	r1, r0
   28fb0:	mov	r0, #1
   28fb4:	movt	r2, #2
   28fb8:	bl	11f00 <__printf_chk@plt>
   28fbc:	movw	r1, #62321	; 0xf371
   28fc0:	mov	r0, #0
   28fc4:	mov	r2, #5
   28fc8:	movt	r1, #2
   28fcc:	bl	11ca8 <dcgettext@plt>
   28fd0:	movw	r2, #52995	; 0xcf03
   28fd4:	movw	r3, #54990	; 0xd6ce
   28fd8:	mov	r1, r0
   28fdc:	mov	r0, #1
   28fe0:	movt	r2, #2
   28fe4:	movt	r3, #2
   28fe8:	bl	11f00 <__printf_chk@plt>
   28fec:	movw	r1, #62341	; 0xf385
   28ff0:	mov	r0, #0
   28ff4:	mov	r2, #5
   28ff8:	movt	r1, #2
   28ffc:	bl	11ca8 <dcgettext@plt>
   29000:	movw	r2, #62380	; 0xf3ac
   29004:	mov	r1, r0
   29008:	mov	r0, #1
   2900c:	movt	r2, #2
   29010:	pop	{fp, lr}
   29014:	b	11f00 <__printf_chk@plt>
   29018:	push	{r4, r5, r6, sl, fp, lr}
   2901c:	add	fp, sp, #16
   29020:	mov	r4, r2
   29024:	mov	r5, r1
   29028:	mov	r6, r0
   2902c:	bl	2a96c <_obstack_memory_used@@Base+0x4b18>
   29030:	cmp	r0, #0
   29034:	popne	{r4, r5, r6, sl, fp, pc}
   29038:	cmp	r6, #0
   2903c:	beq	29050 <_obstack_memory_used@@Base+0x31fc>
   29040:	cmp	r5, #0
   29044:	cmpne	r4, #0
   29048:	bne	29050 <_obstack_memory_used@@Base+0x31fc>
   2904c:	pop	{r4, r5, r6, sl, fp, pc}
   29050:	bl	295cc <_obstack_memory_used@@Base+0x3778>
   29054:	push	{r4, r5, r6, sl, fp, lr}
   29058:	add	fp, sp, #16
   2905c:	mov	r4, r2
   29060:	mov	r5, r1
   29064:	mov	r6, r0
   29068:	bl	2a96c <_obstack_memory_used@@Base+0x4b18>
   2906c:	cmp	r0, #0
   29070:	popne	{r4, r5, r6, sl, fp, pc}
   29074:	cmp	r6, #0
   29078:	beq	2908c <_obstack_memory_used@@Base+0x3238>
   2907c:	cmp	r5, #0
   29080:	cmpne	r4, #0
   29084:	bne	2908c <_obstack_memory_used@@Base+0x3238>
   29088:	pop	{r4, r5, r6, sl, fp, pc}
   2908c:	bl	295cc <_obstack_memory_used@@Base+0x3778>
   29090:	push	{fp, lr}
   29094:	mov	fp, sp
   29098:	bl	2a648 <_obstack_memory_used@@Base+0x47f4>
   2909c:	cmp	r0, #0
   290a0:	popne	{fp, pc}
   290a4:	bl	295cc <_obstack_memory_used@@Base+0x3778>
   290a8:	push	{fp, lr}
   290ac:	mov	fp, sp
   290b0:	bl	2a648 <_obstack_memory_used@@Base+0x47f4>
   290b4:	cmp	r0, #0
   290b8:	popne	{fp, pc}
   290bc:	bl	295cc <_obstack_memory_used@@Base+0x3778>
   290c0:	push	{fp, lr}
   290c4:	mov	fp, sp
   290c8:	bl	2a648 <_obstack_memory_used@@Base+0x47f4>
   290cc:	cmp	r0, #0
   290d0:	popne	{fp, pc}
   290d4:	bl	295cc <_obstack_memory_used@@Base+0x3778>
   290d8:	push	{r4, r5, fp, lr}
   290dc:	add	fp, sp, #8
   290e0:	mov	r4, r1
   290e4:	mov	r5, r0
   290e8:	bl	2a678 <_obstack_memory_used@@Base+0x4824>
   290ec:	cmp	r0, #0
   290f0:	popne	{r4, r5, fp, pc}
   290f4:	cmp	r5, #0
   290f8:	beq	29108 <_obstack_memory_used@@Base+0x32b4>
   290fc:	cmp	r4, #0
   29100:	bne	29108 <_obstack_memory_used@@Base+0x32b4>
   29104:	pop	{r4, r5, fp, pc}
   29108:	bl	295cc <_obstack_memory_used@@Base+0x3778>
   2910c:	push	{fp, lr}
   29110:	mov	fp, sp
   29114:	cmp	r1, #0
   29118:	orreq	r1, r1, #1
   2911c:	bl	2a678 <_obstack_memory_used@@Base+0x4824>
   29120:	cmp	r0, #0
   29124:	popne	{fp, pc}
   29128:	bl	295cc <_obstack_memory_used@@Base+0x3778>
   2912c:	push	{fp, lr}
   29130:	mov	fp, sp
   29134:	clz	r3, r2
   29138:	lsr	ip, r3, #5
   2913c:	clz	r3, r1
   29140:	lsr	r3, r3, #5
   29144:	orrs	r3, r3, ip
   29148:	movwne	r1, #1
   2914c:	movwne	r2, #1
   29150:	bl	2a96c <_obstack_memory_used@@Base+0x4b18>
   29154:	cmp	r0, #0
   29158:	popne	{fp, pc}
   2915c:	bl	295cc <_obstack_memory_used@@Base+0x3778>
   29160:	push	{fp, lr}
   29164:	mov	fp, sp
   29168:	mov	r2, r1
   2916c:	mov	r1, r0
   29170:	mov	r0, #0
   29174:	bl	2a96c <_obstack_memory_used@@Base+0x4b18>
   29178:	cmp	r0, #0
   2917c:	popne	{fp, pc}
   29180:	bl	295cc <_obstack_memory_used@@Base+0x3778>
   29184:	push	{fp, lr}
   29188:	mov	fp, sp
   2918c:	mov	r2, r1
   29190:	mov	r1, r0
   29194:	clz	r0, r2
   29198:	clz	r3, r1
   2919c:	lsr	r0, r0, #5
   291a0:	lsr	r3, r3, #5
   291a4:	orrs	r0, r3, r0
   291a8:	mov	r0, #0
   291ac:	movwne	r1, #1
   291b0:	movwne	r2, #1
   291b4:	bl	2a96c <_obstack_memory_used@@Base+0x4b18>
   291b8:	cmp	r0, #0
   291bc:	popne	{fp, pc}
   291c0:	bl	295cc <_obstack_memory_used@@Base+0x3778>
   291c4:	push	{r4, r5, r6, sl, fp, lr}
   291c8:	add	fp, sp, #16
   291cc:	ldr	r5, [r1]
   291d0:	mov	r4, r1
   291d4:	mov	r6, r0
   291d8:	cmp	r0, #0
   291dc:	beq	291f4 <_obstack_memory_used@@Base+0x33a0>
   291e0:	mov	r0, #1
   291e4:	add	r0, r0, r5, lsr #1
   291e8:	adds	r5, r5, r0
   291ec:	bcc	291fc <_obstack_memory_used@@Base+0x33a8>
   291f0:	b	29238 <_obstack_memory_used@@Base+0x33e4>
   291f4:	cmp	r5, #0
   291f8:	movweq	r5, #64	; 0x40
   291fc:	mov	r0, r6
   29200:	mov	r1, r5
   29204:	mov	r2, #1
   29208:	bl	2a96c <_obstack_memory_used@@Base+0x4b18>
   2920c:	cmp	r5, #0
   29210:	mov	r1, r5
   29214:	movwne	r1, #1
   29218:	cmp	r0, #0
   2921c:	bne	29230 <_obstack_memory_used@@Base+0x33dc>
   29220:	clz	r2, r6
   29224:	lsr	r2, r2, #5
   29228:	orrs	r1, r2, r1
   2922c:	bne	29238 <_obstack_memory_used@@Base+0x33e4>
   29230:	str	r5, [r4]
   29234:	pop	{r4, r5, r6, sl, fp, pc}
   29238:	bl	295cc <_obstack_memory_used@@Base+0x3778>
   2923c:	push	{r4, r5, r6, r7, fp, lr}
   29240:	add	fp, sp, #16
   29244:	ldr	r5, [r1]
   29248:	mov	r6, r2
   2924c:	mov	r4, r1
   29250:	mov	r7, r0
   29254:	cmp	r0, #0
   29258:	beq	29270 <_obstack_memory_used@@Base+0x341c>
   2925c:	mov	r0, #1
   29260:	add	r0, r0, r5, lsr #1
   29264:	adds	r5, r5, r0
   29268:	bcc	29288 <_obstack_memory_used@@Base+0x3434>
   2926c:	b	292bc <_obstack_memory_used@@Base+0x3468>
   29270:	cmp	r5, #0
   29274:	bne	29288 <_obstack_memory_used@@Base+0x3434>
   29278:	mov	r0, #64	; 0x40
   2927c:	cmp	r6, #64	; 0x40
   29280:	udiv	r5, r0, r6
   29284:	addhi	r5, r5, #1
   29288:	mov	r0, r7
   2928c:	mov	r1, r5
   29290:	mov	r2, r6
   29294:	bl	2a96c <_obstack_memory_used@@Base+0x4b18>
   29298:	cmp	r0, #0
   2929c:	bne	292b4 <_obstack_memory_used@@Base+0x3460>
   292a0:	cmp	r7, #0
   292a4:	beq	292bc <_obstack_memory_used@@Base+0x3468>
   292a8:	cmp	r6, #0
   292ac:	cmpne	r5, #0
   292b0:	bne	292bc <_obstack_memory_used@@Base+0x3468>
   292b4:	str	r5, [r4]
   292b8:	pop	{r4, r5, r6, r7, fp, pc}
   292bc:	bl	295cc <_obstack_memory_used@@Base+0x3778>
   292c0:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   292c4:	add	fp, sp, #24
   292c8:	mov	r8, r1
   292cc:	ldr	r1, [r1]
   292d0:	mov	r5, r0
   292d4:	add	r0, r1, r1, asr #1
   292d8:	cmp	r0, r1
   292dc:	mvnvs	r0, #-2147483648	; 0x80000000
   292e0:	cmp	r0, r3
   292e4:	mov	r7, r0
   292e8:	movgt	r7, r3
   292ec:	cmn	r3, #1
   292f0:	movle	r7, r0
   292f4:	ldr	r0, [fp, #8]
   292f8:	cmn	r0, #1
   292fc:	ble	29324 <_obstack_memory_used@@Base+0x34d0>
   29300:	cmp	r0, #0
   29304:	beq	29378 <_obstack_memory_used@@Base+0x3524>
   29308:	cmn	r7, #1
   2930c:	ble	2934c <_obstack_memory_used@@Base+0x34f8>
   29310:	mvn	r4, #-2147483648	; 0x80000000
   29314:	udiv	r6, r4, r0
   29318:	cmp	r6, r7
   2931c:	bge	29378 <_obstack_memory_used@@Base+0x3524>
   29320:	b	29388 <_obstack_memory_used@@Base+0x3534>
   29324:	cmn	r7, #1
   29328:	ble	29368 <_obstack_memory_used@@Base+0x3514>
   2932c:	cmn	r0, #1
   29330:	beq	29378 <_obstack_memory_used@@Base+0x3524>
   29334:	mov	r6, #-2147483648	; 0x80000000
   29338:	mvn	r4, #-2147483648	; 0x80000000
   2933c:	sdiv	r6, r6, r0
   29340:	cmp	r6, r7
   29344:	bge	29378 <_obstack_memory_used@@Base+0x3524>
   29348:	b	29388 <_obstack_memory_used@@Base+0x3534>
   2934c:	beq	29378 <_obstack_memory_used@@Base+0x3524>
   29350:	mov	r6, #-2147483648	; 0x80000000
   29354:	mvn	r4, #-2147483648	; 0x80000000
   29358:	sdiv	r6, r6, r7
   2935c:	cmp	r6, r0
   29360:	bge	29378 <_obstack_memory_used@@Base+0x3524>
   29364:	b	29388 <_obstack_memory_used@@Base+0x3534>
   29368:	mvn	r4, #-2147483648	; 0x80000000
   2936c:	sdiv	r6, r4, r0
   29370:	cmp	r7, r6
   29374:	blt	29388 <_obstack_memory_used@@Base+0x3534>
   29378:	mul	r6, r7, r0
   2937c:	mov	r4, #64	; 0x40
   29380:	cmp	r6, #63	; 0x3f
   29384:	bgt	29390 <_obstack_memory_used@@Base+0x353c>
   29388:	sdiv	r7, r4, r0
   2938c:	mul	r6, r7, r0
   29390:	cmp	r5, #0
   29394:	moveq	r4, #0
   29398:	streq	r4, [r8]
   2939c:	sub	r4, r7, r1
   293a0:	cmp	r4, r2
   293a4:	bge	29450 <_obstack_memory_used@@Base+0x35fc>
   293a8:	add	r7, r1, r2
   293ac:	mov	r6, #0
   293b0:	mov	r2, #0
   293b4:	cmp	r7, r3
   293b8:	movwgt	r6, #1
   293bc:	cmn	r3, #1
   293c0:	movwgt	r2, #1
   293c4:	cmp	r7, r1
   293c8:	bvs	29484 <_obstack_memory_used@@Base+0x3630>
   293cc:	ands	r1, r2, r6
   293d0:	bne	29484 <_obstack_memory_used@@Base+0x3630>
   293d4:	cmn	r0, #1
   293d8:	ble	29400 <_obstack_memory_used@@Base+0x35ac>
   293dc:	cmp	r0, #0
   293e0:	beq	2944c <_obstack_memory_used@@Base+0x35f8>
   293e4:	cmn	r7, #1
   293e8:	ble	29424 <_obstack_memory_used@@Base+0x35d0>
   293ec:	mvn	r1, #-2147483648	; 0x80000000
   293f0:	udiv	r1, r1, r0
   293f4:	cmp	r1, r7
   293f8:	bge	2944c <_obstack_memory_used@@Base+0x35f8>
   293fc:	b	29484 <_obstack_memory_used@@Base+0x3630>
   29400:	cmn	r7, #1
   29404:	ble	2943c <_obstack_memory_used@@Base+0x35e8>
   29408:	cmn	r0, #1
   2940c:	beq	2944c <_obstack_memory_used@@Base+0x35f8>
   29410:	mov	r1, #-2147483648	; 0x80000000
   29414:	sdiv	r1, r1, r0
   29418:	cmp	r1, r7
   2941c:	bge	2944c <_obstack_memory_used@@Base+0x35f8>
   29420:	b	29484 <_obstack_memory_used@@Base+0x3630>
   29424:	beq	2944c <_obstack_memory_used@@Base+0x35f8>
   29428:	mov	r1, #-2147483648	; 0x80000000
   2942c:	sdiv	r1, r1, r7
   29430:	cmp	r1, r0
   29434:	bge	2944c <_obstack_memory_used@@Base+0x35f8>
   29438:	b	29484 <_obstack_memory_used@@Base+0x3630>
   2943c:	mvn	r1, #-2147483648	; 0x80000000
   29440:	sdiv	r1, r1, r0
   29444:	cmp	r7, r1
   29448:	blt	29484 <_obstack_memory_used@@Base+0x3630>
   2944c:	mul	r6, r7, r0
   29450:	mov	r0, r5
   29454:	mov	r1, r6
   29458:	bl	2a678 <_obstack_memory_used@@Base+0x4824>
   2945c:	cmp	r6, #0
   29460:	movwne	r6, #1
   29464:	cmp	r0, #0
   29468:	bne	2947c <_obstack_memory_used@@Base+0x3628>
   2946c:	clz	r1, r5
   29470:	lsr	r1, r1, #5
   29474:	orrs	r1, r1, r6
   29478:	bne	29484 <_obstack_memory_used@@Base+0x3630>
   2947c:	str	r7, [r8]
   29480:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   29484:	bl	295cc <_obstack_memory_used@@Base+0x3778>
   29488:	push	{fp, lr}
   2948c:	mov	fp, sp
   29490:	mov	r1, #1
   29494:	bl	2a5f4 <_obstack_memory_used@@Base+0x47a0>
   29498:	cmp	r0, #0
   2949c:	popne	{fp, pc}
   294a0:	bl	295cc <_obstack_memory_used@@Base+0x3778>
   294a4:	push	{fp, lr}
   294a8:	mov	fp, sp
   294ac:	bl	2a5f4 <_obstack_memory_used@@Base+0x47a0>
   294b0:	cmp	r0, #0
   294b4:	popne	{fp, pc}
   294b8:	bl	295cc <_obstack_memory_used@@Base+0x3778>
   294bc:	push	{fp, lr}
   294c0:	mov	fp, sp
   294c4:	mov	r1, #1
   294c8:	bl	2a5f4 <_obstack_memory_used@@Base+0x47a0>
   294cc:	cmp	r0, #0
   294d0:	popne	{fp, pc}
   294d4:	bl	295cc <_obstack_memory_used@@Base+0x3778>
   294d8:	push	{fp, lr}
   294dc:	mov	fp, sp
   294e0:	bl	2a5f4 <_obstack_memory_used@@Base+0x47a0>
   294e4:	cmp	r0, #0
   294e8:	popne	{fp, pc}
   294ec:	bl	295cc <_obstack_memory_used@@Base+0x3778>
   294f0:	push	{r4, r5, fp, lr}
   294f4:	add	fp, sp, #8
   294f8:	mov	r5, r0
   294fc:	mov	r0, r1
   29500:	mov	r4, r1
   29504:	bl	2a648 <_obstack_memory_used@@Base+0x47f4>
   29508:	cmp	r0, #0
   2950c:	beq	29520 <_obstack_memory_used@@Base+0x36cc>
   29510:	mov	r1, r5
   29514:	mov	r2, r4
   29518:	pop	{r4, r5, fp, lr}
   2951c:	b	11c60 <memcpy@plt>
   29520:	bl	295cc <_obstack_memory_used@@Base+0x3778>
   29524:	push	{r4, r5, fp, lr}
   29528:	add	fp, sp, #8
   2952c:	mov	r5, r0
   29530:	mov	r0, r1
   29534:	mov	r4, r1
   29538:	bl	2a648 <_obstack_memory_used@@Base+0x47f4>
   2953c:	cmp	r0, #0
   29540:	beq	29554 <_obstack_memory_used@@Base+0x3700>
   29544:	mov	r1, r5
   29548:	mov	r2, r4
   2954c:	pop	{r4, r5, fp, lr}
   29550:	b	11c60 <memcpy@plt>
   29554:	bl	295cc <_obstack_memory_used@@Base+0x3778>
   29558:	push	{r4, r5, fp, lr}
   2955c:	add	fp, sp, #8
   29560:	mov	r5, r0
   29564:	add	r0, r1, #1
   29568:	mov	r4, r1
   2956c:	bl	2a648 <_obstack_memory_used@@Base+0x47f4>
   29570:	cmp	r0, #0
   29574:	beq	29590 <_obstack_memory_used@@Base+0x373c>
   29578:	mov	r1, #0
   2957c:	mov	r2, r4
   29580:	strb	r1, [r0, r4]
   29584:	mov	r1, r5
   29588:	pop	{r4, r5, fp, lr}
   2958c:	b	11c60 <memcpy@plt>
   29590:	bl	295cc <_obstack_memory_used@@Base+0x3778>
   29594:	push	{r4, r5, fp, lr}
   29598:	add	fp, sp, #8
   2959c:	mov	r4, r0
   295a0:	bl	11eac <strlen@plt>
   295a4:	add	r5, r0, #1
   295a8:	mov	r0, r5
   295ac:	bl	2a648 <_obstack_memory_used@@Base+0x47f4>
   295b0:	cmp	r0, #0
   295b4:	beq	295c8 <_obstack_memory_used@@Base+0x3774>
   295b8:	mov	r1, r4
   295bc:	mov	r2, r5
   295c0:	pop	{r4, r5, fp, lr}
   295c4:	b	11c60 <memcpy@plt>
   295c8:	bl	295cc <_obstack_memory_used@@Base+0x3778>
   295cc:	push	{fp, lr}
   295d0:	mov	fp, sp
   295d4:	movw	r0, #684	; 0x2ac
   295d8:	movw	r1, #61415	; 0xefe7
   295dc:	mov	r2, #5
   295e0:	movt	r0, #4
   295e4:	movt	r1, #2
   295e8:	ldr	r4, [r0]
   295ec:	mov	r0, #0
   295f0:	bl	11ca8 <dcgettext@plt>
   295f4:	movw	r2, #61146	; 0xeeda
   295f8:	mov	r3, r0
   295fc:	mov	r0, r4
   29600:	mov	r1, #0
   29604:	movt	r2, #2
   29608:	bl	11da4 <error@plt>
   2960c:	bl	12038 <abort@plt>
   29610:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   29614:	add	fp, sp, #24
   29618:	sub	sp, sp, #16
   2961c:	mov	r8, r0
   29620:	ldr	r0, [fp, #16]
   29624:	mov	r5, r3
   29628:	mov	r6, r2
   2962c:	mov	r2, r1
   29630:	add	r3, sp, #8
   29634:	mov	r1, #0
   29638:	str	r0, [sp]
   2963c:	mov	r0, r8
   29640:	bl	29940 <_obstack_memory_used@@Base+0x3aec>
   29644:	cmp	r0, #0
   29648:	bne	296d4 <_obstack_memory_used@@Base+0x3880>
   2964c:	ldr	r4, [sp, #8]
   29650:	ldr	r7, [sp, #12]
   29654:	subs	r0, r4, r6
   29658:	sbcs	r0, r7, r5
   2965c:	bcc	29680 <_obstack_memory_used@@Base+0x382c>
   29660:	ldr	r1, [fp, #8]
   29664:	ldr	r0, [fp, #12]
   29668:	subs	r1, r1, r4
   2966c:	sbcs	r0, r0, r7
   29670:	movcs	r0, r4
   29674:	movcs	r1, r7
   29678:	subcs	sp, fp, #24
   2967c:	popcs	{r4, r5, r6, r7, r8, sl, fp, pc}
   29680:	bl	11ed0 <__errno_location@plt>
   29684:	subs	r1, r4, #1073741824	; 0x40000000
   29688:	sbcs	r1, r7, #0
   2968c:	movcc	r1, #34	; 0x22
   29690:	movcs	r1, #75	; 0x4b
   29694:	str	r1, [r0]
   29698:	ldr	r6, [r0]
   2969c:	ldr	r4, [fp, #24]
   296a0:	ldr	r5, [fp, #20]
   296a4:	mov	r0, r8
   296a8:	bl	27e90 <_obstack_memory_used@@Base+0x203c>
   296ac:	subs	r1, r6, #22
   296b0:	movw	r2, #52851	; 0xce73
   296b4:	str	r0, [sp]
   296b8:	mov	r3, r5
   296bc:	movne	r1, r6
   296c0:	cmp	r4, #0
   296c4:	movt	r2, #2
   296c8:	movweq	r4, #1
   296cc:	mov	r0, r4
   296d0:	bl	11da4 <error@plt>
   296d4:	cmp	r0, #1
   296d8:	beq	296f0 <_obstack_memory_used@@Base+0x389c>
   296dc:	cmp	r0, #3
   296e0:	bne	296fc <_obstack_memory_used@@Base+0x38a8>
   296e4:	bl	11ed0 <__errno_location@plt>
   296e8:	mov	r1, #0
   296ec:	b	29694 <_obstack_memory_used@@Base+0x3840>
   296f0:	bl	11ed0 <__errno_location@plt>
   296f4:	mov	r1, #75	; 0x4b
   296f8:	b	29694 <_obstack_memory_used@@Base+0x3840>
   296fc:	bl	11ed0 <__errno_location@plt>
   29700:	b	29698 <_obstack_memory_used@@Base+0x3844>
   29704:	mov	r1, #10
   29708:	b	29610 <_obstack_memory_used@@Base+0x37bc>
   2970c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   29710:	add	fp, sp, #28
   29714:	sub	sp, sp, #108	; 0x6c
   29718:	mov	r5, #100	; 0x64
   2971c:	mov	r9, #0
   29720:	add	r7, sp, #8
   29724:	str	r5, [sp, #4]
   29728:	bl	11ed0 <__errno_location@plt>
   2972c:	mov	r4, r0
   29730:	mov	sl, #1
   29734:	add	r8, sp, #4
   29738:	mov	r6, #0
   2973c:	sub	r5, r5, #1
   29740:	mov	r0, r7
   29744:	mov	r1, r5
   29748:	strb	r9, [r7, r5]
   2974c:	str	r9, [r4]
   29750:	bl	11db0 <gethostname@plt>
   29754:	cmp	r0, #0
   29758:	bne	29774 <_obstack_memory_used@@Base+0x3920>
   2975c:	mov	r0, r7
   29760:	bl	11eac <strlen@plt>
   29764:	add	r1, r0, #1
   29768:	cmp	r1, r5
   2976c:	blt	2985c <_obstack_memory_used@@Base+0x3a08>
   29770:	str	r9, [r4]
   29774:	mov	r0, r6
   29778:	bl	2056c <__assert_fail@plt+0xe4e0>
   2977c:	ldr	r0, [r4]
   29780:	cmp	r0, #36	; 0x24
   29784:	bhi	2984c <_obstack_memory_used@@Base+0x39f8>
   29788:	add	r1, pc, #0
   2978c:	ldr	pc, [r1, r0, lsl #2]
   29790:	andeq	r9, r2, r4, lsr #16
   29794:	andeq	r9, r2, ip, asr #16
   29798:	andeq	r9, r2, ip, asr #16
   2979c:	andeq	r9, r2, ip, asr #16
   297a0:	andeq	r9, r2, ip, asr #16
   297a4:	andeq	r9, r2, ip, asr #16
   297a8:	andeq	r9, r2, ip, asr #16
   297ac:	andeq	r9, r2, ip, asr #16
   297b0:	andeq	r9, r2, ip, asr #16
   297b4:	andeq	r9, r2, ip, asr #16
   297b8:	andeq	r9, r2, ip, asr #16
   297bc:	andeq	r9, r2, ip, asr #16
   297c0:	andeq	r9, r2, r4, lsr #16
   297c4:	andeq	r9, r2, ip, asr #16
   297c8:	andeq	r9, r2, ip, asr #16
   297cc:	andeq	r9, r2, ip, asr #16
   297d0:	andeq	r9, r2, ip, asr #16
   297d4:	andeq	r9, r2, ip, asr #16
   297d8:	andeq	r9, r2, ip, asr #16
   297dc:	andeq	r9, r2, ip, asr #16
   297e0:	andeq	r9, r2, ip, asr #16
   297e4:	andeq	r9, r2, ip, asr #16
   297e8:	andeq	r9, r2, r4, lsr #16
   297ec:	andeq	r9, r2, ip, asr #16
   297f0:	andeq	r9, r2, ip, asr #16
   297f4:	andeq	r9, r2, ip, asr #16
   297f8:	andeq	r9, r2, ip, asr #16
   297fc:	andeq	r9, r2, ip, asr #16
   29800:	andeq	r9, r2, ip, asr #16
   29804:	andeq	r9, r2, ip, asr #16
   29808:	andeq	r9, r2, ip, asr #16
   2980c:	andeq	r9, r2, ip, asr #16
   29810:	andeq	r9, r2, ip, asr #16
   29814:	andeq	r9, r2, ip, asr #16
   29818:	andeq	r9, r2, ip, asr #16
   2981c:	andeq	r9, r2, ip, asr #16
   29820:	andeq	r9, r2, r4, lsr #16
   29824:	mov	r0, #0
   29828:	mov	r1, r8
   2982c:	mov	r2, #1
   29830:	mvn	r3, #0
   29834:	str	sl, [sp]
   29838:	bl	292c0 <_obstack_memory_used@@Base+0x346c>
   2983c:	ldr	r5, [sp, #4]
   29840:	mov	r6, r0
   29844:	mov	r7, r0
   29848:	b	2973c <_obstack_memory_used@@Base+0x38e8>
   2984c:	mov	r6, #0
   29850:	mov	r0, r6
   29854:	sub	sp, fp, #28
   29858:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2985c:	cmp	r6, #0
   29860:	bne	29850 <_obstack_memory_used@@Base+0x39fc>
   29864:	mov	r0, r7
   29868:	bl	29524 <_obstack_memory_used@@Base+0x36d0>
   2986c:	mov	r6, r0
   29870:	mov	r0, r6
   29874:	sub	sp, fp, #28
   29878:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2987c:	push	{fp, lr}
   29880:	mov	fp, sp
   29884:	sub	sp, sp, #8
   29888:	movw	ip, #684	; 0x2ac
   2988c:	movt	ip, #4
   29890:	ldr	ip, [ip]
   29894:	str	ip, [sp, #4]
   29898:	ldr	ip, [fp, #8]
   2989c:	str	ip, [sp]
   298a0:	bl	298a8 <_obstack_memory_used@@Base+0x3a54>
   298a4:	bl	12038 <abort@plt>
   298a8:	push	{r4, r5, r6, r7, fp, lr}
   298ac:	add	fp, sp, #16
   298b0:	sub	sp, sp, #16
   298b4:	sub	r0, r0, #1
   298b8:	cmp	r0, #4
   298bc:	bcs	2993c <_obstack_memory_used@@Base+0x3ae8>
   298c0:	mov	r5, r1
   298c4:	movw	r1, #62552	; 0xf458
   298c8:	ldr	r4, [fp, #12]
   298cc:	ldr	r6, [fp, #8]
   298d0:	movt	r1, #2
   298d4:	cmn	r5, #1
   298d8:	ldr	r1, [r1, r0, lsl #2]
   298dc:	ble	298f0 <_obstack_memory_used@@Base+0x3a9c>
   298e0:	ldr	r7, [r3, r5, lsl #4]
   298e4:	movw	r5, #62456	; 0xf3f8
   298e8:	movt	r5, #2
   298ec:	b	2990c <_obstack_memory_used@@Base+0x3ab8>
   298f0:	mov	r0, #0
   298f4:	add	r7, sp, #14
   298f8:	strb	r0, [sp, #15]
   298fc:	movw	r0, #62456	; 0xf3f8
   29900:	strb	r2, [sp, #14]
   29904:	movt	r0, #2
   29908:	sub	r5, r0, r5
   2990c:	mov	r0, #0
   29910:	mov	r2, #5
   29914:	bl	11ca8 <dcgettext@plt>
   29918:	mov	r2, r0
   2991c:	mov	r0, r4
   29920:	mov	r1, #0
   29924:	mov	r3, r5
   29928:	str	r7, [sp]
   2992c:	str	r6, [sp, #4]
   29930:	bl	11da4 <error@plt>
   29934:	sub	sp, fp, #16
   29938:	pop	{r4, r5, r6, r7, fp, pc}
   2993c:	bl	12038 <abort@plt>
   29940:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   29944:	add	fp, sp, #28
   29948:	sub	sp, sp, #44	; 0x2c
   2994c:	cmp	r2, #37	; 0x25
   29950:	bcs	2a5d4 <_obstack_memory_used@@Base+0x4780>
   29954:	ldr	sl, [fp, #8]
   29958:	mov	r6, r2
   2995c:	mov	r7, r1
   29960:	mov	r4, r0
   29964:	str	r3, [sp, #36]	; 0x24
   29968:	bl	11ed0 <__errno_location@plt>
   2996c:	mov	r5, r0
   29970:	mov	r0, #0
   29974:	str	r0, [r5]
   29978:	bl	11e64 <__ctype_b_loc@plt>
   2997c:	ldr	r1, [r0]
   29980:	mov	r2, r4
   29984:	ldrb	r0, [r2], #1
   29988:	add	r3, r1, r0, lsl #1
   2998c:	ldrb	r3, [r3, #1]
   29990:	tst	r3, #32
   29994:	bne	29984 <_obstack_memory_used@@Base+0x3b30>
   29998:	cmp	r7, #0
   2999c:	sub	r9, fp, #32
   299a0:	mov	r8, #4
   299a4:	movne	r9, r7
   299a8:	cmp	r0, #45	; 0x2d
   299ac:	beq	29d6c <_obstack_memory_used@@Base+0x3f18>
   299b0:	mov	r0, r4
   299b4:	mov	r1, r9
   299b8:	mov	r2, r6
   299bc:	mov	r3, #0
   299c0:	bl	11c6c <__strtoull_internal@plt>
   299c4:	mov	r7, r1
   299c8:	ldr	r1, [r9]
   299cc:	cmp	r1, r4
   299d0:	beq	29a08 <_obstack_memory_used@@Base+0x3bb4>
   299d4:	mov	r6, r0
   299d8:	ldr	r0, [r5]
   299dc:	cmp	r0, #0
   299e0:	beq	29d24 <_obstack_memory_used@@Base+0x3ed0>
   299e4:	cmp	r0, #34	; 0x22
   299e8:	bne	29d6c <_obstack_memory_used@@Base+0x3f18>
   299ec:	mov	r8, #1
   299f0:	cmp	sl, #0
   299f4:	beq	2a5c0 <_obstack_memory_used@@Base+0x476c>
   299f8:	ldrb	r4, [r1]
   299fc:	cmp	r4, #0
   29a00:	bne	29a4c <_obstack_memory_used@@Base+0x3bf8>
   29a04:	b	2a5c0 <_obstack_memory_used@@Base+0x476c>
   29a08:	cmp	sl, #0
   29a0c:	beq	29d6c <_obstack_memory_used@@Base+0x3f18>
   29a10:	mov	r5, r1
   29a14:	ldrb	r1, [r4]
   29a18:	cmp	r1, #0
   29a1c:	beq	29d6c <_obstack_memory_used@@Base+0x3f18>
   29a20:	mov	r0, sl
   29a24:	bl	11eb8 <strchr@plt>
   29a28:	cmp	r0, #0
   29a2c:	beq	29d6c <_obstack_memory_used@@Base+0x3f18>
   29a30:	mov	r1, r5
   29a34:	mov	r8, #0
   29a38:	mov	r6, #1
   29a3c:	mov	r7, #0
   29a40:	ldrb	r4, [r1]
   29a44:	cmp	r4, #0
   29a48:	beq	2a5c0 <_obstack_memory_used@@Base+0x476c>
   29a4c:	str	r1, [sp, #32]
   29a50:	mov	r0, sl
   29a54:	mov	r1, r4
   29a58:	bl	11eb8 <strchr@plt>
   29a5c:	cmp	r0, #0
   29a60:	beq	29d60 <_obstack_memory_used@@Base+0x3f0c>
   29a64:	sub	r0, r4, #69	; 0x45
   29a68:	mov	r1, #1
   29a6c:	mov	r3, #0
   29a70:	mov	r5, #1024	; 0x400
   29a74:	cmp	r0, #47	; 0x2f
   29a78:	str	r1, [sp, #28]
   29a7c:	bhi	29b80 <_obstack_memory_used@@Base+0x3d2c>
   29a80:	add	r1, pc, #0
   29a84:	ldr	pc, [r1, r0, lsl #2]
   29a88:	andeq	r9, r2, r8, asr #22
   29a8c:	andeq	r9, r2, r0, lsl #23
   29a90:	andeq	r9, r2, r8, asr #22
   29a94:	andeq	r9, r2, r0, lsl #23
   29a98:	andeq	r9, r2, r0, lsl #23
   29a9c:	andeq	r9, r2, r0, lsl #23
   29aa0:	andeq	r9, r2, r8, asr #22
   29aa4:	andeq	r9, r2, r0, lsl #23
   29aa8:	andeq	r9, r2, r8, asr #22
   29aac:	andeq	r9, r2, r0, lsl #23
   29ab0:	andeq	r9, r2, r0, lsl #23
   29ab4:	andeq	r9, r2, r8, asr #22
   29ab8:	andeq	r9, r2, r0, lsl #23
   29abc:	andeq	r9, r2, r0, lsl #23
   29ac0:	andeq	r9, r2, r0, lsl #23
   29ac4:	andeq	r9, r2, r8, asr #22
   29ac8:	andeq	r9, r2, r0, lsl #23
   29acc:	andeq	r9, r2, r0, lsl #23
   29ad0:	andeq	r9, r2, r0, lsl #23
   29ad4:	andeq	r9, r2, r0, lsl #23
   29ad8:	andeq	r9, r2, r8, asr #22
   29adc:	andeq	r9, r2, r8, asr #22
   29ae0:	andeq	r9, r2, r0, lsl #23
   29ae4:	andeq	r9, r2, r0, lsl #23
   29ae8:	andeq	r9, r2, r0, lsl #23
   29aec:	andeq	r9, r2, r0, lsl #23
   29af0:	andeq	r9, r2, r0, lsl #23
   29af4:	andeq	r9, r2, r0, lsl #23
   29af8:	andeq	r9, r2, r0, lsl #23
   29afc:	andeq	r9, r2, r0, lsl #23
   29b00:	andeq	r9, r2, r0, lsl #23
   29b04:	andeq	r9, r2, r0, lsl #23
   29b08:	andeq	r9, r2, r0, lsl #23
   29b0c:	andeq	r9, r2, r0, lsl #23
   29b10:	andeq	r9, r2, r8, asr #22
   29b14:	andeq	r9, r2, r0, lsl #23
   29b18:	andeq	r9, r2, r0, lsl #23
   29b1c:	andeq	r9, r2, r0, lsl #23
   29b20:	andeq	r9, r2, r8, asr #22
   29b24:	andeq	r9, r2, r0, lsl #23
   29b28:	andeq	r9, r2, r8, asr #22
   29b2c:	andeq	r9, r2, r0, lsl #23
   29b30:	andeq	r9, r2, r0, lsl #23
   29b34:	andeq	r9, r2, r0, lsl #23
   29b38:	andeq	r9, r2, r0, lsl #23
   29b3c:	andeq	r9, r2, r0, lsl #23
   29b40:	andeq	r9, r2, r0, lsl #23
   29b44:	andeq	r9, r2, r8, asr #22
   29b48:	mov	r0, sl
   29b4c:	mov	r1, #48	; 0x30
   29b50:	bl	11eb8 <strchr@plt>
   29b54:	cmp	r0, #0
   29b58:	beq	29b7c <_obstack_memory_used@@Base+0x3d28>
   29b5c:	ldr	r1, [sp, #32]
   29b60:	ldrb	r0, [r1, #1]
   29b64:	cmp	r0, #66	; 0x42
   29b68:	cmpne	r0, #68	; 0x44
   29b6c:	bne	29d34 <_obstack_memory_used@@Base+0x3ee0>
   29b70:	mov	r5, #1000	; 0x3e8
   29b74:	mov	r0, #2
   29b78:	str	r0, [sp, #28]
   29b7c:	mov	r3, #0
   29b80:	sub	r0, r4, #66	; 0x42
   29b84:	cmp	r0, #53	; 0x35
   29b88:	bhi	29d60 <_obstack_memory_used@@Base+0x3f0c>
   29b8c:	add	r1, pc, #0
   29b90:	ldr	pc, [r1, r0, lsl #2]
   29b94:	ldrdeq	sl, [r2], -r0
   29b98:	andeq	r9, r2, r0, ror #26
   29b9c:	andeq	r9, r2, r0, ror #26
   29ba0:	strdeq	sl, [r2], -r8
   29ba4:	andeq	r9, r2, r0, ror #26
   29ba8:	andeq	r9, r2, ip, ror #24
   29bac:	andeq	r9, r2, r0, ror #26
   29bb0:	andeq	r9, r2, r0, ror #26
   29bb4:	andeq	r9, r2, r0, ror #26
   29bb8:	andeq	r9, r2, r8, ror sp
   29bbc:	andeq	r9, r2, r0, ror #26
   29bc0:	andeq	r9, r2, r0, asr #27
   29bc4:	andeq	r9, r2, r0, ror #26
   29bc8:	andeq	r9, r2, r0, ror #26
   29bcc:	andeq	sl, r2, ip, asr #4
   29bd0:	andeq	r9, r2, r0, ror #26
   29bd4:	andeq	r9, r2, r0, ror #26
   29bd8:	andeq	r9, r2, r0, ror #26
   29bdc:	andeq	r9, r2, ip, asr #28
   29be0:	andeq	r9, r2, r0, ror #26
   29be4:	andeq	r9, r2, r0, ror #26
   29be8:	andeq	r9, r2, r0, ror #26
   29bec:	andeq	r9, r2, r0, ror #26
   29bf0:	andeq	sl, r2, r4, ror r3
   29bf4:	andeq	r9, r2, r4, lsr pc
   29bf8:	andeq	r9, r2, r0, ror #26
   29bfc:	andeq	r9, r2, r0, ror #26
   29c00:	andeq	r9, r2, r0, ror #26
   29c04:	andeq	r9, r2, r0, ror #26
   29c08:	andeq	r9, r2, r0, ror #26
   29c0c:	andeq	r9, r2, r0, ror #26
   29c10:	andeq	r9, r2, r0, ror #26
   29c14:	andeq	sl, r2, r8, asr #10
   29c18:	andeq	sl, r2, r0, lsr #11
   29c1c:	andeq	r9, r2, r0, ror #26
   29c20:	andeq	r9, r2, r0, ror #26
   29c24:	andeq	r9, r2, r0, ror #26
   29c28:	andeq	r9, r2, ip, ror #24
   29c2c:	andeq	r9, r2, r0, ror #26
   29c30:	andeq	r9, r2, r0, ror #26
   29c34:	andeq	r9, r2, r0, ror #26
   29c38:	andeq	r9, r2, r8, ror sp
   29c3c:	andeq	r9, r2, r0, ror #26
   29c40:	andeq	r9, r2, r0, asr #27
   29c44:	andeq	r9, r2, r0, ror #26
   29c48:	andeq	r9, r2, r0, ror #26
   29c4c:	andeq	r9, r2, r0, ror #26
   29c50:	andeq	r9, r2, r0, ror #26
   29c54:	andeq	r9, r2, r0, ror #26
   29c58:	andeq	r9, r2, r0, ror #26
   29c5c:	andeq	r9, r2, ip, asr #28
   29c60:	andeq	r9, r2, r0, ror #26
   29c64:	andeq	r9, r2, r0, ror #26
   29c68:	andeq	sl, r2, ip, ror r5
   29c6c:	mvn	r0, #0
   29c70:	mvn	r1, #0
   29c74:	mov	r2, r5
   29c78:	mov	sl, r3
   29c7c:	bl	2ae3c <_obstack_memory_used@@Base+0x4fe8>
   29c80:	subs	r3, r0, r6
   29c84:	umull	r4, r2, r6, r5
   29c88:	mov	lr, #0
   29c8c:	str	r1, [sp, #20]
   29c90:	sbcs	r3, r1, r7
   29c94:	movwcc	lr, #1
   29c98:	mla	ip, r6, sl, r2
   29c9c:	mov	r2, r1
   29ca0:	mov	r2, #0
   29ca4:	cmp	lr, #0
   29ca8:	mla	r7, r7, r5, ip
   29cac:	mvnne	r4, #0
   29cb0:	mvnne	r7, #0
   29cb4:	subs	r6, r0, r4
   29cb8:	sbcs	r6, r1, r7
   29cbc:	umull	r3, r6, r4, r5
   29cc0:	movwcc	r2, #1
   29cc4:	cmp	r2, #0
   29cc8:	mvnne	r3, #0
   29ccc:	cmp	r2, #0
   29cd0:	str	r6, [sp, #16]
   29cd4:	umull	r6, ip, r3, r5
   29cd8:	mla	r1, r3, sl, ip
   29cdc:	ldr	ip, [sp, #16]
   29ce0:	str	r1, [sp, #12]
   29ce4:	mla	r4, r4, sl, ip
   29ce8:	mla	r4, r7, r5, r4
   29cec:	mvnne	r4, #0
   29cf0:	subs	r0, r0, r3
   29cf4:	ldr	r0, [sp, #20]
   29cf8:	ldr	r7, [sp, #12]
   29cfc:	sbcs	r0, r0, r4
   29d00:	mov	r0, #0
   29d04:	mla	r7, r4, r5, r7
   29d08:	movwcc	r0, #1
   29d0c:	cmp	r0, #0
   29d10:	mov	r1, r0
   29d14:	orr	r0, lr, r2
   29d18:	mvnne	r7, #0
   29d1c:	mvnne	r6, #0
   29d20:	b	2a36c <_obstack_memory_used@@Base+0x4518>
   29d24:	mov	r8, r0
   29d28:	cmp	sl, #0
   29d2c:	bne	299f8 <_obstack_memory_used@@Base+0x3ba4>
   29d30:	b	2a5c0 <_obstack_memory_used@@Base+0x476c>
   29d34:	cmp	r0, #105	; 0x69
   29d38:	mov	r3, #0
   29d3c:	bne	29b80 <_obstack_memory_used@@Base+0x3d2c>
   29d40:	ldrb	r0, [r1, #2]
   29d44:	mov	r1, #1
   29d48:	cmp	r0, #66	; 0x42
   29d4c:	movweq	r1, #3
   29d50:	str	r1, [sp, #28]
   29d54:	sub	r0, r4, #66	; 0x42
   29d58:	cmp	r0, #53	; 0x35
   29d5c:	bls	29b8c <_obstack_memory_used@@Base+0x3d38>
   29d60:	ldr	r0, [sp, #36]	; 0x24
   29d64:	orr	r8, r8, #2
   29d68:	strd	r6, [r0]
   29d6c:	mov	r0, r8
   29d70:	sub	sp, fp, #28
   29d74:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   29d78:	mvn	r0, #0
   29d7c:	mvn	r1, #0
   29d80:	mov	r2, r5
   29d84:	mov	r4, r3
   29d88:	bl	2ae3c <_obstack_memory_used@@Base+0x4fe8>
   29d8c:	subs	r0, r0, r6
   29d90:	mov	r2, #0
   29d94:	sbcs	r0, r1, r7
   29d98:	umull	r0, r1, r6, r5
   29d9c:	movwcc	r2, #1
   29da0:	cmp	r2, #0
   29da4:	mla	r1, r6, r4, r1
   29da8:	mov	r3, r2
   29dac:	mvnne	r0, #0
   29db0:	mla	r7, r7, r5, r1
   29db4:	mvnne	r7, #0
   29db8:	mov	r6, r0
   29dbc:	b	2a5a0 <_obstack_memory_used@@Base+0x474c>
   29dc0:	mvn	r0, #0
   29dc4:	mvn	r1, #0
   29dc8:	mov	r2, r5
   29dcc:	str	r3, [sp, #24]
   29dd0:	bl	2ae3c <_obstack_memory_used@@Base+0x4fe8>
   29dd4:	subs	r3, r0, r6
   29dd8:	mov	ip, r0
   29ddc:	umull	r4, r0, r6, r5
   29de0:	mov	sl, #0
   29de4:	sbcs	r3, r1, r7
   29de8:	mov	r3, #0
   29dec:	movwcc	r3, #1
   29df0:	cmp	r3, #0
   29df4:	str	r0, [sp, #20]
   29df8:	ldr	r0, [sp, #24]
   29dfc:	mvnne	r4, #0
   29e00:	cmp	r3, #0
   29e04:	umull	lr, r2, r4, r5
   29e08:	mla	r2, r4, r0, r2
   29e0c:	str	r2, [sp, #16]
   29e10:	ldr	r2, [sp, #20]
   29e14:	mla	r6, r6, r0, r2
   29e18:	ldr	r0, [sp, #16]
   29e1c:	mla	r6, r7, r5, r6
   29e20:	mvnne	r6, #0
   29e24:	mla	r7, r6, r5, r0
   29e28:	subs	r0, ip, r4
   29e2c:	sbcs	r0, r1, r6
   29e30:	movwcc	sl, #1
   29e34:	cmp	sl, #0
   29e38:	orr	r3, r3, sl
   29e3c:	mvnne	lr, #0
   29e40:	mvnne	r7, #0
   29e44:	mov	r6, lr
   29e48:	b	2a5a0 <_obstack_memory_used@@Base+0x474c>
   29e4c:	mvn	r0, #0
   29e50:	mvn	r1, #0
   29e54:	mov	r2, r5
   29e58:	mov	sl, r3
   29e5c:	bl	2ae3c <_obstack_memory_used@@Base+0x4fe8>
   29e60:	subs	r3, r0, r6
   29e64:	mov	ip, r1
   29e68:	umull	r2, lr, r6, r5
   29e6c:	str	r0, [sp, #20]
   29e70:	sbcs	r3, r1, r7
   29e74:	mov	r1, #0
   29e78:	str	ip, [sp, #16]
   29e7c:	movwcc	r1, #1
   29e80:	mla	r6, r6, sl, lr
   29e84:	mov	lr, #0
   29e88:	cmp	r1, #0
   29e8c:	mla	r7, r7, r5, r6
   29e90:	mvnne	r2, #0
   29e94:	cmp	r1, #0
   29e98:	umull	r3, r4, r2, r5
   29e9c:	mvnne	r7, #0
   29ea0:	mla	r4, r2, sl, r4
   29ea4:	subs	r2, r0, r2
   29ea8:	sbcs	r2, ip, r7
   29eac:	mla	r4, r7, r5, r4
   29eb0:	mov	r2, #0
   29eb4:	movwcc	lr, #1
   29eb8:	cmp	lr, #0
   29ebc:	mvnne	r3, #0
   29ec0:	mvnne	r4, #0
   29ec4:	subs	r7, r0, r3
   29ec8:	mov	r0, r5
   29ecc:	sbcs	r7, ip, r4
   29ed0:	umull	r5, r7, r3, r5
   29ed4:	movwcc	r2, #1
   29ed8:	cmp	r2, #0
   29edc:	mla	r3, r3, sl, r7
   29ee0:	mvnne	r5, #0
   29ee4:	cmp	r2, #0
   29ee8:	mla	r3, r4, r0, r3
   29eec:	umull	r6, ip, r5, r0
   29ef0:	mvnne	r3, #0
   29ef4:	mla	ip, r5, sl, ip
   29ef8:	mla	r7, r3, r0, ip
   29efc:	ldr	r0, [sp, #20]
   29f00:	subs	r0, r0, r5
   29f04:	ldr	r0, [sp, #16]
   29f08:	sbcs	r0, r0, r3
   29f0c:	mov	r0, #0
   29f10:	movwcc	r0, #1
   29f14:	cmp	r0, #0
   29f18:	mov	r3, r0
   29f1c:	orr	r0, r1, lr
   29f20:	orr	r0, r0, r2
   29f24:	mvnne	r7, #0
   29f28:	mvnne	r6, #0
   29f2c:	orr	r3, r0, r3
   29f30:	b	2a5a0 <_obstack_memory_used@@Base+0x474c>
   29f34:	mvn	r0, #0
   29f38:	mvn	r1, #0
   29f3c:	mov	r2, r5
   29f40:	mov	r4, r3
   29f44:	str	r3, [sp, #24]
   29f48:	bl	2ae3c <_obstack_memory_used@@Base+0x4fe8>
   29f4c:	umull	r3, r2, r6, r5
   29f50:	mla	r2, r6, r4, r2
   29f54:	subs	r6, r0, r6
   29f58:	sbcs	r6, r1, r7
   29f5c:	mov	r6, #0
   29f60:	mla	r2, r7, r5, r2
   29f64:	mov	r7, #0
   29f68:	movwcc	r6, #1
   29f6c:	cmp	r6, #0
   29f70:	str	r6, [sp, #20]
   29f74:	mvnne	r3, #0
   29f78:	mvnne	r2, #0
   29f7c:	subs	r4, r0, r3
   29f80:	umull	r6, ip, r3, r5
   29f84:	sbcs	r4, r1, r2
   29f88:	ldr	r4, [sp, #24]
   29f8c:	movwcc	r7, #1
   29f90:	cmp	r7, #0
   29f94:	mov	lr, r7
   29f98:	str	r7, [sp, #16]
   29f9c:	mvnne	r6, #0
   29fa0:	cmp	lr, #0
   29fa4:	mov	lr, #0
   29fa8:	umull	sl, r7, r6, r5
   29fac:	mla	r3, r3, r4, ip
   29fb0:	mla	r2, r2, r5, r3
   29fb4:	mvnne	r2, #0
   29fb8:	subs	r3, r0, r6
   29fbc:	mla	r7, r6, r4, r7
   29fc0:	mov	r4, r0
   29fc4:	mov	r0, #0
   29fc8:	mla	r7, r2, r5, r7
   29fcc:	sbcs	r2, r1, r2
   29fd0:	mov	r3, r4
   29fd4:	movwcc	r0, #1
   29fd8:	str	r3, [sp, #4]
   29fdc:	cmp	r0, #0
   29fe0:	str	r0, [sp, #12]
   29fe4:	mov	r0, r1
   29fe8:	mvnne	sl, #0
   29fec:	mvnne	r7, #0
   29ff0:	str	r0, [sp, #8]
   29ff4:	subs	r2, r4, sl
   29ff8:	ldr	r4, [sp, #24]
   29ffc:	sbcs	r2, r1, r7
   2a000:	umull	r6, r2, sl, r5
   2a004:	movwcc	lr, #1
   2a008:	cmp	lr, #0
   2a00c:	mvnne	r6, #0
   2a010:	mla	r2, sl, r4, r2
   2a014:	cmp	lr, #0
   2a018:	umull	r1, ip, r6, r5
   2a01c:	mla	r2, r7, r5, r2
   2a020:	mvnne	r2, #0
   2a024:	mla	ip, r6, r4, ip
   2a028:	subs	r6, r3, r6
   2a02c:	mla	r7, r2, r5, ip
   2a030:	sbcs	r2, r0, r2
   2a034:	mov	ip, #0
   2a038:	mov	r2, #0
   2a03c:	movwcc	ip, #1
   2a040:	cmp	ip, #0
   2a044:	mvnne	r1, #0
   2a048:	mvnne	r7, #0
   2a04c:	subs	r6, r3, r1
   2a050:	ldr	r3, [sp, #24]
   2a054:	sbcs	r6, r0, r7
   2a058:	umull	r0, sl, r1, r5
   2a05c:	movwcc	r2, #1
   2a060:	cmp	r2, #0
   2a064:	mvnne	r0, #0
   2a068:	mla	r1, r1, r3, sl
   2a06c:	cmp	r2, #0
   2a070:	umull	r6, r4, r0, r5
   2a074:	mla	r1, r7, r5, r1
   2a078:	mvnne	r1, #0
   2a07c:	mla	r4, r0, r3, r4
   2a080:	ldr	r3, [sp, #4]
   2a084:	mla	r7, r1, r5, r4
   2a088:	ldr	r5, [sp, #16]
   2a08c:	subs	r0, r3, r0
   2a090:	ldr	r0, [sp, #8]
   2a094:	sbcs	r0, r0, r1
   2a098:	mov	r0, #0
   2a09c:	movwcc	r0, #1
   2a0a0:	cmp	r0, #0
   2a0a4:	mov	r1, r0
   2a0a8:	ldr	r0, [sp, #20]
   2a0ac:	mvnne	r7, #0
   2a0b0:	mvnne	r6, #0
   2a0b4:	orr	r0, r0, r5
   2a0b8:	ldr	r5, [sp, #12]
   2a0bc:	orr	r0, r0, r5
   2a0c0:	orr	r0, r0, lr
   2a0c4:	orr	r0, r0, ip
   2a0c8:	orr	r0, r0, r2
   2a0cc:	b	2a53c <_obstack_memory_used@@Base+0x46e8>
   2a0d0:	mov	r1, #0
   2a0d4:	lsl	r2, r7, #10
   2a0d8:	lsl	r0, r6, #10
   2a0dc:	lsr	r3, r7, #22
   2a0e0:	cmp	r1, r7, lsr #22
   2a0e4:	orr	r2, r2, r6, lsr #22
   2a0e8:	mvnne	r0, #0
   2a0ec:	movwne	r3, #1
   2a0f0:	cmp	r1, r7, lsr #22
   2a0f4:	b	2a56c <_obstack_memory_used@@Base+0x4718>
   2a0f8:	mvn	r0, #0
   2a0fc:	mvn	r1, #0
   2a100:	mov	r2, r5
   2a104:	mov	sl, r3
   2a108:	bl	2ae3c <_obstack_memory_used@@Base+0x4fe8>
   2a10c:	subs	r2, r0, r6
   2a110:	mov	ip, r0
   2a114:	mov	r0, #0
   2a118:	sbcs	r2, r1, r7
   2a11c:	umull	r4, r2, r6, r5
   2a120:	movwcc	r0, #1
   2a124:	cmp	r0, #0
   2a128:	mla	r2, r6, sl, r2
   2a12c:	str	r0, [sp, #20]
   2a130:	mvnne	r4, #0
   2a134:	cmp	r0, #0
   2a138:	mla	r2, r7, r5, r2
   2a13c:	mov	r0, #0
   2a140:	umull	lr, r3, r4, r5
   2a144:	mvnne	r2, #0
   2a148:	mla	r3, r4, sl, r3
   2a14c:	mla	r6, r2, r5, r3
   2a150:	subs	r3, ip, r4
   2a154:	mov	r3, r1
   2a158:	sbcs	r2, r1, r2
   2a15c:	str	r3, [sp, #8]
   2a160:	movwcc	r0, #1
   2a164:	cmp	r0, #0
   2a168:	str	r0, [sp, #16]
   2a16c:	mov	r0, ip
   2a170:	mvnne	lr, #0
   2a174:	mvnne	r6, #0
   2a178:	str	r0, [sp, #12]
   2a17c:	subs	r2, ip, lr
   2a180:	umull	r7, r4, lr, r5
   2a184:	sbcs	r2, r1, r6
   2a188:	mov	r2, #0
   2a18c:	movwcc	r2, #1
   2a190:	mla	r4, lr, sl, r4
   2a194:	cmp	r2, #0
   2a198:	mla	r6, r6, r5, r4
   2a19c:	mov	r4, #0
   2a1a0:	mvnne	r7, #0
   2a1a4:	cmp	r2, #0
   2a1a8:	umull	r1, ip, r7, r5
   2a1ac:	mvnne	r6, #0
   2a1b0:	mla	ip, r7, sl, ip
   2a1b4:	subs	r7, r0, r7
   2a1b8:	sbcs	r7, r3, r6
   2a1bc:	mla	lr, r6, r5, ip
   2a1c0:	mov	ip, #0
   2a1c4:	movwcc	ip, #1
   2a1c8:	cmp	ip, #0
   2a1cc:	mvnne	r1, #0
   2a1d0:	mvnne	lr, #0
   2a1d4:	subs	r7, r0, r1
   2a1d8:	sbcs	r7, r3, lr
   2a1dc:	umull	r0, r7, r1, r5
   2a1e0:	movwcc	r4, #1
   2a1e4:	cmp	r4, #0
   2a1e8:	mla	r1, r1, sl, r7
   2a1ec:	mvnne	r0, #0
   2a1f0:	cmp	r4, #0
   2a1f4:	mla	r1, lr, r5, r1
   2a1f8:	umull	r6, r3, r0, r5
   2a1fc:	mvnne	r1, #0
   2a200:	mla	r3, r0, sl, r3
   2a204:	mla	r7, r1, r5, r3
   2a208:	ldr	r3, [sp, #12]
   2a20c:	subs	r0, r3, r0
   2a210:	ldr	r0, [sp, #8]
   2a214:	ldr	r3, [sp, #16]
   2a218:	sbcs	r0, r0, r1
   2a21c:	mov	r0, #0
   2a220:	movwcc	r0, #1
   2a224:	cmp	r0, #0
   2a228:	mov	r1, r0
   2a22c:	ldr	r0, [sp, #20]
   2a230:	mvnne	r7, #0
   2a234:	mvnne	r6, #0
   2a238:	orr	r0, r0, r3
   2a23c:	orr	r0, r0, r2
   2a240:	orr	r0, r0, ip
   2a244:	orr	r0, r0, r4
   2a248:	b	2a36c <_obstack_memory_used@@Base+0x4518>
   2a24c:	mvn	r0, #0
   2a250:	mvn	r1, #0
   2a254:	mov	r2, r5
   2a258:	mov	sl, r3
   2a25c:	bl	2ae3c <_obstack_memory_used@@Base+0x4fe8>
   2a260:	umull	r3, r2, r6, r5
   2a264:	mov	lr, r1
   2a268:	mov	r1, r0
   2a26c:	mla	r2, r6, sl, r2
   2a270:	subs	r6, r0, r6
   2a274:	mov	r0, #0
   2a278:	sbcs	r6, lr, r7
   2a27c:	mla	r2, r7, r5, r2
   2a280:	movwcc	r0, #1
   2a284:	cmp	r0, #0
   2a288:	str	r0, [sp, #20]
   2a28c:	mov	r0, r1
   2a290:	mvnne	r3, #0
   2a294:	mvnne	r2, #0
   2a298:	str	r0, [sp, #16]
   2a29c:	subs	r4, r1, r3
   2a2a0:	umull	r7, ip, r3, r5
   2a2a4:	sbcs	r4, lr, r2
   2a2a8:	mov	r4, #0
   2a2ac:	movwcc	r4, #1
   2a2b0:	mla	r3, r3, sl, ip
   2a2b4:	mov	ip, #0
   2a2b8:	cmp	r4, #0
   2a2bc:	mla	r2, r2, r5, r3
   2a2c0:	mvnne	r7, #0
   2a2c4:	cmp	r4, #0
   2a2c8:	umull	r1, r6, r7, r5
   2a2cc:	mvnne	r2, #0
   2a2d0:	mla	r6, r7, sl, r6
   2a2d4:	mla	r3, r2, r5, r6
   2a2d8:	subs	r6, r0, r7
   2a2dc:	sbcs	r2, lr, r2
   2a2e0:	mov	r2, #0
   2a2e4:	movwcc	ip, #1
   2a2e8:	cmp	ip, #0
   2a2ec:	mvnne	r1, #0
   2a2f0:	mvnne	r3, #0
   2a2f4:	subs	r6, r0, r1
   2a2f8:	sbcs	r6, lr, r3
   2a2fc:	umull	r0, r6, r1, r5
   2a300:	movwcc	r2, #1
   2a304:	cmp	r2, #0
   2a308:	mvnne	r0, #0
   2a30c:	cmp	r2, #0
   2a310:	str	r6, [sp, #12]
   2a314:	umull	r6, r7, r0, r5
   2a318:	mla	r7, r0, sl, r7
   2a31c:	str	r7, [sp, #8]
   2a320:	ldr	r7, [sp, #12]
   2a324:	mla	r1, r1, sl, r7
   2a328:	mla	r1, r3, r5, r1
   2a32c:	ldr	r3, [sp, #8]
   2a330:	mvnne	r1, #0
   2a334:	mla	r7, r1, r5, r3
   2a338:	ldr	r3, [sp, #16]
   2a33c:	subs	r0, r3, r0
   2a340:	sbcs	r0, lr, r1
   2a344:	mov	r0, #0
   2a348:	movwcc	r0, #1
   2a34c:	cmp	r0, #0
   2a350:	mov	r1, r0
   2a354:	ldr	r0, [sp, #20]
   2a358:	mvnne	r7, #0
   2a35c:	mvnne	r6, #0
   2a360:	orr	r0, r0, r4
   2a364:	orr	r0, r0, ip
   2a368:	orr	r0, r0, r2
   2a36c:	orr	r3, r0, r1
   2a370:	b	2a5a0 <_obstack_memory_used@@Base+0x474c>
   2a374:	mvn	r0, #0
   2a378:	mvn	r1, #0
   2a37c:	mov	r2, r5
   2a380:	mov	sl, r3
   2a384:	bl	2ae3c <_obstack_memory_used@@Base+0x4fe8>
   2a388:	mov	ip, r1
   2a38c:	subs	r1, r0, r6
   2a390:	umull	r3, lr, r6, r5
   2a394:	mov	r2, r5
   2a398:	sbcs	r1, ip, r7
   2a39c:	mov	r1, #0
   2a3a0:	str	ip, [sp, #4]
   2a3a4:	movwcc	r1, #1
   2a3a8:	mla	r6, r6, sl, lr
   2a3ac:	cmp	r1, #0
   2a3b0:	mla	r7, r7, r2, r6
   2a3b4:	str	r1, [sp, #20]
   2a3b8:	mvnne	r3, #0
   2a3bc:	cmp	r1, #0
   2a3c0:	mov	r1, r0
   2a3c4:	umull	r4, r5, r3, r5
   2a3c8:	mvnne	r7, #0
   2a3cc:	mov	lr, r1
   2a3d0:	mla	r5, r3, sl, r5
   2a3d4:	subs	r3, r0, r3
   2a3d8:	sbcs	r0, ip, r7
   2a3dc:	mov	r0, #0
   2a3e0:	mla	r5, r7, r2, r5
   2a3e4:	movwcc	r0, #1
   2a3e8:	cmp	r0, #0
   2a3ec:	str	r0, [sp, #16]
   2a3f0:	mvnne	r4, #0
   2a3f4:	mvnne	r5, #0
   2a3f8:	subs	r0, r1, r4
   2a3fc:	mov	r1, #0
   2a400:	sbcs	r0, ip, r5
   2a404:	umull	r3, r0, r4, r2
   2a408:	movwcc	r1, #1
   2a40c:	cmp	r1, #0
   2a410:	mla	r0, r4, sl, r0
   2a414:	mov	r4, lr
   2a418:	str	r1, [sp, #12]
   2a41c:	mvnne	r3, #0
   2a420:	cmp	r1, #0
   2a424:	mla	r0, r5, r2, r0
   2a428:	str	r4, [sp]
   2a42c:	umull	r7, r6, r3, r2
   2a430:	mvnne	r0, #0
   2a434:	mla	r6, r3, sl, r6
   2a438:	subs	r3, lr, r3
   2a43c:	mov	r3, #0
   2a440:	mla	r5, r0, r2, r6
   2a444:	sbcs	r0, ip, r0
   2a448:	mov	r0, #0
   2a44c:	movwcc	r0, #1
   2a450:	cmp	r0, #0
   2a454:	str	r0, [sp, #8]
   2a458:	mvnne	r7, #0
   2a45c:	mvnne	r5, #0
   2a460:	subs	r0, lr, r7
   2a464:	sbcs	r0, ip, r5
   2a468:	umull	r6, r0, r7, r2
   2a46c:	movwcc	r3, #1
   2a470:	cmp	r3, #0
   2a474:	mla	r7, r7, sl, r0
   2a478:	mov	r0, ip
   2a47c:	mvnne	r6, #0
   2a480:	cmp	r3, #0
   2a484:	mla	r7, r5, r2, r7
   2a488:	mov	r5, #0
   2a48c:	umull	r1, lr, r6, r2
   2a490:	mvnne	r7, #0
   2a494:	mla	lr, r6, sl, lr
   2a498:	subs	r6, r4, r6
   2a49c:	mla	lr, r7, r2, lr
   2a4a0:	sbcs	r7, ip, r7
   2a4a4:	mov	ip, #0
   2a4a8:	movwcc	ip, #1
   2a4ac:	cmp	ip, #0
   2a4b0:	mvnne	r1, #0
   2a4b4:	mvnne	lr, #0
   2a4b8:	subs	r7, r4, r1
   2a4bc:	sbcs	r7, r0, lr
   2a4c0:	umull	r0, r7, r1, r2
   2a4c4:	movwcc	r5, #1
   2a4c8:	cmp	r5, #0
   2a4cc:	mla	r1, r1, sl, r7
   2a4d0:	mvnne	r0, #0
   2a4d4:	cmp	r5, #0
   2a4d8:	mla	r1, lr, r2, r1
   2a4dc:	umull	r6, r4, r0, r2
   2a4e0:	mvnne	r1, #0
   2a4e4:	mla	r4, r0, sl, r4
   2a4e8:	mla	r7, r1, r2, r4
   2a4ec:	ldr	r2, [sp]
   2a4f0:	subs	r0, r2, r0
   2a4f4:	ldr	r0, [sp, #4]
   2a4f8:	ldr	r2, [sp, #16]
   2a4fc:	sbcs	r0, r0, r1
   2a500:	mov	r0, #0
   2a504:	movwcc	r0, #1
   2a508:	cmp	r0, #0
   2a50c:	mov	r1, r0
   2a510:	ldr	r0, [sp, #20]
   2a514:	mvnne	r7, #0
   2a518:	mvnne	r6, #0
   2a51c:	orr	r0, r0, r2
   2a520:	ldr	r2, [sp, #12]
   2a524:	orr	r0, r0, r2
   2a528:	ldr	r2, [sp, #8]
   2a52c:	orr	r0, r0, r2
   2a530:	orr	r0, r0, r3
   2a534:	orr	r0, r0, ip
   2a538:	orr	r0, r0, r5
   2a53c:	orr	r0, r0, r1
   2a540:	and	r3, r0, #1
   2a544:	b	2a5a0 <_obstack_memory_used@@Base+0x474c>
   2a548:	mov	r1, #0
   2a54c:	lsl	r2, r7, #9
   2a550:	lsl	r0, r6, #9
   2a554:	lsr	r3, r7, #23
   2a558:	cmp	r1, r7, lsr #23
   2a55c:	orr	r2, r2, r6, lsr #23
   2a560:	mvnne	r0, #0
   2a564:	movwne	r3, #1
   2a568:	cmp	r1, r7, lsr #23
   2a56c:	mvnne	r2, #0
   2a570:	mov	r6, r0
   2a574:	mov	r7, r2
   2a578:	b	2a5a0 <_obstack_memory_used@@Base+0x474c>
   2a57c:	lsl	r1, r7, #1
   2a580:	cmp	r7, #0
   2a584:	lsl	r0, r6, #1
   2a588:	lsr	r3, r7, #31
   2a58c:	orr	r1, r1, r6, lsr #31
   2a590:	mvnmi	r0, #0
   2a594:	mvnmi	r1, #0
   2a598:	mov	r6, r0
   2a59c:	mov	r7, r1
   2a5a0:	ldr	r1, [sp, #32]
   2a5a4:	ldr	r2, [sp, #28]
   2a5a8:	orr	r8, r3, r8
   2a5ac:	add	r0, r1, r2
   2a5b0:	str	r0, [r9]
   2a5b4:	ldrb	r0, [r1, r2]
   2a5b8:	cmp	r0, #0
   2a5bc:	orrne	r8, r8, #2
   2a5c0:	ldr	r0, [sp, #36]	; 0x24
   2a5c4:	strd	r6, [r0]
   2a5c8:	mov	r0, r8
   2a5cc:	sub	sp, fp, #28
   2a5d0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2a5d4:	movw	r0, #62568	; 0xf468
   2a5d8:	movw	r1, #62606	; 0xf48e
   2a5dc:	movw	r3, #62622	; 0xf49e
   2a5e0:	mov	r2, #85	; 0x55
   2a5e4:	movt	r0, #2
   2a5e8:	movt	r1, #2
   2a5ec:	movt	r3, #2
   2a5f0:	bl	1208c <__assert_fail@plt>
   2a5f4:	clz	r2, r1
   2a5f8:	clz	r3, r0
   2a5fc:	lsr	r2, r2, #5
   2a600:	lsr	r3, r3, #5
   2a604:	orrs	r2, r3, r2
   2a608:	movwne	r1, #1
   2a60c:	movwne	r0, #1
   2a610:	cmp	r1, #0
   2a614:	beq	2a644 <_obstack_memory_used@@Base+0x47f0>
   2a618:	mvn	r2, #-2147483648	; 0x80000000
   2a61c:	udiv	r2, r2, r1
   2a620:	cmp	r2, r0
   2a624:	bcs	2a644 <_obstack_memory_used@@Base+0x47f0>
   2a628:	push	{fp, lr}
   2a62c:	mov	fp, sp
   2a630:	bl	11ed0 <__errno_location@plt>
   2a634:	mov	r1, #12
   2a638:	str	r1, [r0]
   2a63c:	mov	r0, #0
   2a640:	pop	{fp, pc}
   2a644:	b	11b88 <calloc@plt>
   2a648:	cmp	r0, #0
   2a64c:	movweq	r0, #1
   2a650:	cmn	r0, #1
   2a654:	ble	2a65c <_obstack_memory_used@@Base+0x4808>
   2a658:	b	11df8 <malloc@plt>
   2a65c:	push	{fp, lr}
   2a660:	mov	fp, sp
   2a664:	bl	11ed0 <__errno_location@plt>
   2a668:	mov	r1, #12
   2a66c:	str	r1, [r0]
   2a670:	mov	r0, #0
   2a674:	pop	{fp, pc}
   2a678:	push	{fp, lr}
   2a67c:	mov	fp, sp
   2a680:	cmp	r0, #0
   2a684:	beq	2a6a0 <_obstack_memory_used@@Base+0x484c>
   2a688:	cmp	r1, #0
   2a68c:	beq	2a6ac <_obstack_memory_used@@Base+0x4858>
   2a690:	cmn	r1, #1
   2a694:	ble	2a6b8 <_obstack_memory_used@@Base+0x4864>
   2a698:	pop	{fp, lr}
   2a69c:	b	11cb4 <realloc@plt>
   2a6a0:	mov	r0, r1
   2a6a4:	pop	{fp, lr}
   2a6a8:	b	2a648 <_obstack_memory_used@@Base+0x47f4>
   2a6ac:	bl	2056c <__assert_fail@plt+0xe4e0>
   2a6b0:	mov	r0, #0
   2a6b4:	pop	{fp, pc}
   2a6b8:	bl	11ed0 <__errno_location@plt>
   2a6bc:	mov	r1, #12
   2a6c0:	str	r1, [r0]
   2a6c4:	mov	r0, #0
   2a6c8:	pop	{fp, pc}
   2a6cc:	push	{r4, r5, r6, sl, fp, lr}
   2a6d0:	add	fp, sp, #16
   2a6d4:	mov	r4, r0
   2a6d8:	bl	11d80 <__fpending@plt>
   2a6dc:	ldr	r6, [r4]
   2a6e0:	mov	r5, r0
   2a6e4:	mov	r0, r4
   2a6e8:	bl	2a750 <_obstack_memory_used@@Base+0x48fc>
   2a6ec:	tst	r6, #32
   2a6f0:	bne	2a728 <_obstack_memory_used@@Base+0x48d4>
   2a6f4:	cmp	r0, #0
   2a6f8:	mov	r4, r0
   2a6fc:	mvnne	r4, #0
   2a700:	cmp	r5, #0
   2a704:	bne	2a734 <_obstack_memory_used@@Base+0x48e0>
   2a708:	cmp	r0, #0
   2a70c:	beq	2a734 <_obstack_memory_used@@Base+0x48e0>
   2a710:	bl	11ed0 <__errno_location@plt>
   2a714:	ldr	r0, [r0]
   2a718:	subs	r4, r0, #9
   2a71c:	mvnne	r4, #0
   2a720:	mov	r0, r4
   2a724:	pop	{r4, r5, r6, sl, fp, pc}
   2a728:	mvn	r4, #0
   2a72c:	cmp	r0, #0
   2a730:	beq	2a73c <_obstack_memory_used@@Base+0x48e8>
   2a734:	mov	r0, r4
   2a738:	pop	{r4, r5, r6, sl, fp, pc}
   2a73c:	bl	11ed0 <__errno_location@plt>
   2a740:	mov	r1, #0
   2a744:	str	r1, [r0]
   2a748:	mov	r0, r4
   2a74c:	pop	{r4, r5, r6, sl, fp, pc}
   2a750:	push	{r4, r5, r6, sl, fp, lr}
   2a754:	add	fp, sp, #16
   2a758:	sub	sp, sp, #8
   2a75c:	mov	r4, r0
   2a760:	bl	11f18 <fileno@plt>
   2a764:	cmn	r0, #1
   2a768:	ble	2a7dc <_obstack_memory_used@@Base+0x4988>
   2a76c:	mov	r0, r4
   2a770:	bl	11e28 <__freading@plt>
   2a774:	cmp	r0, #0
   2a778:	beq	2a7a4 <_obstack_memory_used@@Base+0x4950>
   2a77c:	mov	r0, r4
   2a780:	bl	11f18 <fileno@plt>
   2a784:	mov	r1, #1
   2a788:	mov	r2, #0
   2a78c:	mov	r3, #0
   2a790:	str	r1, [sp]
   2a794:	bl	11d5c <lseek64@plt>
   2a798:	and	r0, r0, r1
   2a79c:	cmn	r0, #1
   2a7a0:	beq	2a7dc <_obstack_memory_used@@Base+0x4988>
   2a7a4:	mov	r0, r4
   2a7a8:	bl	2a7ec <_obstack_memory_used@@Base+0x4998>
   2a7ac:	cmp	r0, #0
   2a7b0:	beq	2a7dc <_obstack_memory_used@@Base+0x4988>
   2a7b4:	bl	11ed0 <__errno_location@plt>
   2a7b8:	ldr	r6, [r0]
   2a7bc:	mov	r5, r0
   2a7c0:	mov	r0, r4
   2a7c4:	bl	11f30 <fclose@plt>
   2a7c8:	cmp	r6, #0
   2a7cc:	strne	r6, [r5]
   2a7d0:	mvnne	r0, #0
   2a7d4:	sub	sp, fp, #16
   2a7d8:	pop	{r4, r5, r6, sl, fp, pc}
   2a7dc:	mov	r0, r4
   2a7e0:	sub	sp, fp, #16
   2a7e4:	pop	{r4, r5, r6, sl, fp, lr}
   2a7e8:	b	11f30 <fclose@plt>
   2a7ec:	push	{r4, sl, fp, lr}
   2a7f0:	add	fp, sp, #8
   2a7f4:	sub	sp, sp, #8
   2a7f8:	mov	r4, r0
   2a7fc:	cmp	r0, #0
   2a800:	beq	2a838 <_obstack_memory_used@@Base+0x49e4>
   2a804:	mov	r0, r4
   2a808:	bl	11e28 <__freading@plt>
   2a80c:	cmp	r0, #0
   2a810:	beq	2a838 <_obstack_memory_used@@Base+0x49e4>
   2a814:	ldrb	r0, [r4, #1]
   2a818:	tst	r0, #1
   2a81c:	beq	2a838 <_obstack_memory_used@@Base+0x49e4>
   2a820:	mov	r0, #1
   2a824:	mov	r2, #0
   2a828:	mov	r3, #0
   2a82c:	str	r0, [sp]
   2a830:	mov	r0, r4
   2a834:	bl	2a848 <_obstack_memory_used@@Base+0x49f4>
   2a838:	mov	r0, r4
   2a83c:	sub	sp, fp, #8
   2a840:	pop	{r4, sl, fp, lr}
   2a844:	b	11bf4 <fflush@plt>
   2a848:	push	{r4, r5, r6, r7, fp, lr}
   2a84c:	add	fp, sp, #16
   2a850:	sub	sp, sp, #8
   2a854:	mov	r4, r0
   2a858:	ldr	r0, [r0, #4]
   2a85c:	mov	r5, r3
   2a860:	mov	r6, r2
   2a864:	ldr	r1, [r4, #8]
   2a868:	cmp	r1, r0
   2a86c:	bne	2a888 <_obstack_memory_used@@Base+0x4a34>
   2a870:	ldrd	r0, [r4, #16]
   2a874:	cmp	r1, r0
   2a878:	bne	2a888 <_obstack_memory_used@@Base+0x4a34>
   2a87c:	ldr	r0, [r4, #36]	; 0x24
   2a880:	cmp	r0, #0
   2a884:	beq	2a8a0 <_obstack_memory_used@@Base+0x4a4c>
   2a888:	mov	r0, r4
   2a88c:	mov	r2, r6
   2a890:	mov	r3, r5
   2a894:	sub	sp, fp, #16
   2a898:	pop	{r4, r5, r6, r7, fp, lr}
   2a89c:	b	11f3c <fseeko64@plt>
   2a8a0:	ldr	r7, [fp, #8]
   2a8a4:	mov	r0, r4
   2a8a8:	bl	11f18 <fileno@plt>
   2a8ac:	mov	r2, r6
   2a8b0:	mov	r3, r5
   2a8b4:	str	r7, [sp]
   2a8b8:	bl	11d5c <lseek64@plt>
   2a8bc:	and	r2, r0, r1
   2a8c0:	cmn	r2, #1
   2a8c4:	beq	2a8e4 <_obstack_memory_used@@Base+0x4a90>
   2a8c8:	strd	r0, [r4, #80]	; 0x50
   2a8cc:	ldr	r0, [r4]
   2a8d0:	bic	r0, r0, #16
   2a8d4:	str	r0, [r4]
   2a8d8:	mov	r0, #0
   2a8dc:	sub	sp, fp, #16
   2a8e0:	pop	{r4, r5, r6, r7, fp, pc}
   2a8e4:	mvn	r0, #0
   2a8e8:	sub	sp, fp, #16
   2a8ec:	pop	{r4, r5, r6, r7, fp, pc}
   2a8f0:	ldrb	r2, [r0]
   2a8f4:	cmp	r2, #0
   2a8f8:	beq	2a924 <_obstack_memory_used@@Base+0x4ad0>
   2a8fc:	add	r3, r0, #1
   2a900:	mov	r0, #0
   2a904:	ror	r0, r0, #23
   2a908:	uxtab	r0, r0, r2
   2a90c:	ldrb	r2, [r3], #1
   2a910:	cmp	r2, #0
   2a914:	bne	2a904 <_obstack_memory_used@@Base+0x4ab0>
   2a918:	udiv	r2, r0, r1
   2a91c:	mls	r0, r2, r1, r0
   2a920:	bx	lr
   2a924:	mov	r0, #0
   2a928:	udiv	r2, r0, r1
   2a92c:	mls	r0, r2, r1, r0
   2a930:	bx	lr
   2a934:	push	{fp, lr}
   2a938:	mov	fp, sp
   2a93c:	mov	r0, #14
   2a940:	bl	11f9c <nl_langinfo@plt>
   2a944:	movw	r1, #54434	; 0xd4a2
   2a948:	cmp	r0, #0
   2a94c:	movt	r1, #2
   2a950:	movne	r1, r0
   2a954:	movw	r0, #62701	; 0xf4ed
   2a958:	ldrb	r2, [r1]
   2a95c:	movt	r0, #2
   2a960:	cmp	r2, #0
   2a964:	movne	r0, r1
   2a968:	pop	{fp, pc}
   2a96c:	cmp	r2, #0
   2a970:	beq	2a9a0 <_obstack_memory_used@@Base+0x4b4c>
   2a974:	mvn	r3, #0
   2a978:	udiv	r3, r3, r2
   2a97c:	cmp	r3, r1
   2a980:	bcs	2a9a0 <_obstack_memory_used@@Base+0x4b4c>
   2a984:	push	{fp, lr}
   2a988:	mov	fp, sp
   2a98c:	bl	11ed0 <__errno_location@plt>
   2a990:	mov	r1, #12
   2a994:	str	r1, [r0]
   2a998:	mov	r0, #0
   2a99c:	pop	{fp, pc}
   2a9a0:	mul	r1, r2, r1
   2a9a4:	b	2a678 <_obstack_memory_used@@Base+0x4824>
   2a9a8:	eor	r1, r1, #-2147483648	; 0x80000000
   2a9ac:	b	2a9b4 <_obstack_memory_used@@Base+0x4b60>
   2a9b0:	eor	r3, r3, #-2147483648	; 0x80000000
   2a9b4:	push	{r4, r5, lr}
   2a9b8:	lsl	r4, r1, #1
   2a9bc:	lsl	r5, r3, #1
   2a9c0:	teq	r4, r5
   2a9c4:	teqeq	r0, r2
   2a9c8:	orrsne	ip, r4, r0
   2a9cc:	orrsne	ip, r5, r2
   2a9d0:	mvnsne	ip, r4, asr #21
   2a9d4:	mvnsne	ip, r5, asr #21
   2a9d8:	beq	2abc4 <_obstack_memory_used@@Base+0x4d70>
   2a9dc:	lsr	r4, r4, #21
   2a9e0:	rsbs	r5, r4, r5, lsr #21
   2a9e4:	rsblt	r5, r5, #0
   2a9e8:	ble	2aa08 <_obstack_memory_used@@Base+0x4bb4>
   2a9ec:	add	r4, r4, r5
   2a9f0:	eor	r2, r0, r2
   2a9f4:	eor	r3, r1, r3
   2a9f8:	eor	r0, r2, r0
   2a9fc:	eor	r1, r3, r1
   2aa00:	eor	r2, r0, r2
   2aa04:	eor	r3, r1, r3
   2aa08:	cmp	r5, #54	; 0x36
   2aa0c:	pophi	{r4, r5, pc}
   2aa10:	tst	r1, #-2147483648	; 0x80000000
   2aa14:	lsl	r1, r1, #12
   2aa18:	mov	ip, #1048576	; 0x100000
   2aa1c:	orr	r1, ip, r1, lsr #12
   2aa20:	beq	2aa2c <_obstack_memory_used@@Base+0x4bd8>
   2aa24:	rsbs	r0, r0, #0
   2aa28:	rsc	r1, r1, #0
   2aa2c:	tst	r3, #-2147483648	; 0x80000000
   2aa30:	lsl	r3, r3, #12
   2aa34:	orr	r3, ip, r3, lsr #12
   2aa38:	beq	2aa44 <_obstack_memory_used@@Base+0x4bf0>
   2aa3c:	rsbs	r2, r2, #0
   2aa40:	rsc	r3, r3, #0
   2aa44:	teq	r4, r5
   2aa48:	beq	2abac <_obstack_memory_used@@Base+0x4d58>
   2aa4c:	sub	r4, r4, #1
   2aa50:	rsbs	lr, r5, #32
   2aa54:	blt	2aa70 <_obstack_memory_used@@Base+0x4c1c>
   2aa58:	lsl	ip, r2, lr
   2aa5c:	adds	r0, r0, r2, lsr r5
   2aa60:	adc	r1, r1, #0
   2aa64:	adds	r0, r0, r3, lsl lr
   2aa68:	adcs	r1, r1, r3, asr r5
   2aa6c:	b	2aa8c <_obstack_memory_used@@Base+0x4c38>
   2aa70:	sub	r5, r5, #32
   2aa74:	add	lr, lr, #32
   2aa78:	cmp	r2, #1
   2aa7c:	lsl	ip, r3, lr
   2aa80:	orrcs	ip, ip, #2
   2aa84:	adds	r0, r0, r3, asr r5
   2aa88:	adcs	r1, r1, r3, asr #31
   2aa8c:	and	r5, r1, #-2147483648	; 0x80000000
   2aa90:	bpl	2aaa0 <_obstack_memory_used@@Base+0x4c4c>
   2aa94:	rsbs	ip, ip, #0
   2aa98:	rscs	r0, r0, #0
   2aa9c:	rsc	r1, r1, #0
   2aaa0:	cmp	r1, #1048576	; 0x100000
   2aaa4:	bcc	2aae4 <_obstack_memory_used@@Base+0x4c90>
   2aaa8:	cmp	r1, #2097152	; 0x200000
   2aaac:	bcc	2aacc <_obstack_memory_used@@Base+0x4c78>
   2aab0:	lsrs	r1, r1, #1
   2aab4:	rrxs	r0, r0
   2aab8:	rrx	ip, ip
   2aabc:	add	r4, r4, #1
   2aac0:	lsl	r2, r4, #21
   2aac4:	cmn	r2, #4194304	; 0x400000
   2aac8:	bcs	2ac24 <_obstack_memory_used@@Base+0x4dd0>
   2aacc:	cmp	ip, #-2147483648	; 0x80000000
   2aad0:	lsrseq	ip, r0, #1
   2aad4:	adcs	r0, r0, #0
   2aad8:	adc	r1, r1, r4, lsl #20
   2aadc:	orr	r1, r1, r5
   2aae0:	pop	{r4, r5, pc}
   2aae4:	lsls	ip, ip, #1
   2aae8:	adcs	r0, r0, r0
   2aaec:	adc	r1, r1, r1
   2aaf0:	tst	r1, #1048576	; 0x100000
   2aaf4:	sub	r4, r4, #1
   2aaf8:	bne	2aacc <_obstack_memory_used@@Base+0x4c78>
   2aafc:	teq	r1, #0
   2ab00:	moveq	r1, r0
   2ab04:	moveq	r0, #0
   2ab08:	clz	r3, r1
   2ab0c:	addeq	r3, r3, #32
   2ab10:	sub	r3, r3, #11
   2ab14:	subs	r2, r3, #32
   2ab18:	bge	2ab3c <_obstack_memory_used@@Base+0x4ce8>
   2ab1c:	adds	r2, r2, #12
   2ab20:	ble	2ab38 <_obstack_memory_used@@Base+0x4ce4>
   2ab24:	add	ip, r2, #20
   2ab28:	rsb	r2, r2, #12
   2ab2c:	lsl	r0, r1, ip
   2ab30:	lsr	r1, r1, r2
   2ab34:	b	2ab4c <_obstack_memory_used@@Base+0x4cf8>
   2ab38:	add	r2, r2, #20
   2ab3c:	rsble	ip, r2, #32
   2ab40:	lsl	r1, r1, r2
   2ab44:	orrle	r1, r1, r0, lsr ip
   2ab48:	lslle	r0, r0, r2
   2ab4c:	subs	r4, r4, r3
   2ab50:	addge	r1, r1, r4, lsl #20
   2ab54:	orrge	r1, r1, r5
   2ab58:	popge	{r4, r5, pc}
   2ab5c:	mvn	r4, r4
   2ab60:	subs	r4, r4, #31
   2ab64:	bge	2aba0 <_obstack_memory_used@@Base+0x4d4c>
   2ab68:	adds	r4, r4, #12
   2ab6c:	bgt	2ab88 <_obstack_memory_used@@Base+0x4d34>
   2ab70:	add	r4, r4, #20
   2ab74:	rsb	r2, r4, #32
   2ab78:	lsr	r0, r0, r4
   2ab7c:	orr	r0, r0, r1, lsl r2
   2ab80:	orr	r1, r5, r1, lsr r4
   2ab84:	pop	{r4, r5, pc}
   2ab88:	rsb	r4, r4, #12
   2ab8c:	rsb	r2, r4, #32
   2ab90:	lsr	r0, r0, r2
   2ab94:	orr	r0, r0, r1, lsl r4
   2ab98:	mov	r1, r5
   2ab9c:	pop	{r4, r5, pc}
   2aba0:	lsr	r0, r1, r4
   2aba4:	mov	r1, r5
   2aba8:	pop	{r4, r5, pc}
   2abac:	teq	r4, #0
   2abb0:	eor	r3, r3, #1048576	; 0x100000
   2abb4:	eoreq	r1, r1, #1048576	; 0x100000
   2abb8:	addeq	r4, r4, #1
   2abbc:	subne	r5, r5, #1
   2abc0:	b	2aa4c <_obstack_memory_used@@Base+0x4bf8>
   2abc4:	mvns	ip, r4, asr #21
   2abc8:	mvnsne	ip, r5, asr #21
   2abcc:	beq	2ac34 <_obstack_memory_used@@Base+0x4de0>
   2abd0:	teq	r4, r5
   2abd4:	teqeq	r0, r2
   2abd8:	beq	2abec <_obstack_memory_used@@Base+0x4d98>
   2abdc:	orrs	ip, r4, r0
   2abe0:	moveq	r1, r3
   2abe4:	moveq	r0, r2
   2abe8:	pop	{r4, r5, pc}
   2abec:	teq	r1, r3
   2abf0:	movne	r1, #0
   2abf4:	movne	r0, #0
   2abf8:	popne	{r4, r5, pc}
   2abfc:	lsrs	ip, r4, #21
   2ac00:	bne	2ac14 <_obstack_memory_used@@Base+0x4dc0>
   2ac04:	lsls	r0, r0, #1
   2ac08:	adcs	r1, r1, r1
   2ac0c:	orrcs	r1, r1, #-2147483648	; 0x80000000
   2ac10:	pop	{r4, r5, pc}
   2ac14:	adds	r4, r4, #4194304	; 0x400000
   2ac18:	addcc	r1, r1, #1048576	; 0x100000
   2ac1c:	popcc	{r4, r5, pc}
   2ac20:	and	r5, r1, #-2147483648	; 0x80000000
   2ac24:	orr	r1, r5, #2130706432	; 0x7f000000
   2ac28:	orr	r1, r1, #15728640	; 0xf00000
   2ac2c:	mov	r0, #0
   2ac30:	pop	{r4, r5, pc}
   2ac34:	mvns	ip, r4, asr #21
   2ac38:	movne	r1, r3
   2ac3c:	movne	r0, r2
   2ac40:	mvnseq	ip, r5, asr #21
   2ac44:	movne	r3, r1
   2ac48:	movne	r2, r0
   2ac4c:	orrs	r4, r0, r1, lsl #12
   2ac50:	orrseq	r5, r2, r3, lsl #12
   2ac54:	teqeq	r1, r3
   2ac58:	orrne	r1, r1, #524288	; 0x80000
   2ac5c:	pop	{r4, r5, pc}
   2ac60:	teq	r0, #0
   2ac64:	moveq	r1, #0
   2ac68:	bxeq	lr
   2ac6c:	push	{r4, r5, lr}
   2ac70:	mov	r4, #1024	; 0x400
   2ac74:	add	r4, r4, #50	; 0x32
   2ac78:	mov	r5, #0
   2ac7c:	mov	r1, #0
   2ac80:	b	2aafc <_obstack_memory_used@@Base+0x4ca8>
   2ac84:	teq	r0, #0
   2ac88:	moveq	r1, #0
   2ac8c:	bxeq	lr
   2ac90:	push	{r4, r5, lr}
   2ac94:	mov	r4, #1024	; 0x400
   2ac98:	add	r4, r4, #50	; 0x32
   2ac9c:	ands	r5, r0, #-2147483648	; 0x80000000
   2aca0:	rsbmi	r0, r0, #0
   2aca4:	mov	r1, #0
   2aca8:	b	2aafc <_obstack_memory_used@@Base+0x4ca8>
   2acac:	lsls	r2, r0, #1
   2acb0:	asr	r1, r2, #3
   2acb4:	rrx	r1, r1
   2acb8:	lsl	r0, r2, #28
   2acbc:	andsne	r3, r2, #-16777216	; 0xff000000
   2acc0:	teqne	r3, #-16777216	; 0xff000000
   2acc4:	eorne	r1, r1, #939524096	; 0x38000000
   2acc8:	bxne	lr
   2accc:	bics	r2, r2, #-16777216	; 0xff000000
   2acd0:	bxeq	lr
   2acd4:	teq	r3, #-16777216	; 0xff000000
   2acd8:	orreq	r1, r1, #524288	; 0x80000
   2acdc:	bxeq	lr
   2ace0:	push	{r4, r5, lr}
   2ace4:	mov	r4, #896	; 0x380
   2ace8:	and	r5, r1, #-2147483648	; 0x80000000
   2acec:	bic	r1, r1, #-2147483648	; 0x80000000
   2acf0:	b	2aafc <_obstack_memory_used@@Base+0x4ca8>
   2acf4:	orrs	r2, r0, r1
   2acf8:	bxeq	lr
   2acfc:	push	{r4, r5, lr}
   2ad00:	mov	r5, #0
   2ad04:	b	2ad24 <_obstack_memory_used@@Base+0x4ed0>
   2ad08:	orrs	r2, r0, r1
   2ad0c:	bxeq	lr
   2ad10:	push	{r4, r5, lr}
   2ad14:	ands	r5, r1, #-2147483648	; 0x80000000
   2ad18:	bpl	2ad24 <_obstack_memory_used@@Base+0x4ed0>
   2ad1c:	rsbs	r0, r0, #0
   2ad20:	rsc	r1, r1, #0
   2ad24:	mov	r4, #1024	; 0x400
   2ad28:	add	r4, r4, #50	; 0x32
   2ad2c:	lsrs	ip, r1, #22
   2ad30:	beq	2aaa0 <_obstack_memory_used@@Base+0x4c4c>
   2ad34:	mov	r2, #3
   2ad38:	lsrs	ip, ip, #3
   2ad3c:	addne	r2, r2, #3
   2ad40:	lsrs	ip, ip, #3
   2ad44:	addne	r2, r2, #3
   2ad48:	add	r2, r2, ip, lsr #3
   2ad4c:	rsb	r3, r2, #32
   2ad50:	lsl	ip, r0, r3
   2ad54:	lsr	r0, r0, r2
   2ad58:	orr	r0, r0, r1, lsl r3
   2ad5c:	lsr	r1, r1, r2
   2ad60:	add	r4, r4, r2
   2ad64:	b	2aaa0 <_obstack_memory_used@@Base+0x4c4c>
   2ad68:	cmp	r3, #0
   2ad6c:	cmpeq	r2, #0
   2ad70:	bne	2ad94 <_obstack_memory_used@@Base+0x4f40>
   2ad74:	cmp	r1, #0
   2ad78:	movlt	r1, #-2147483648	; 0x80000000
   2ad7c:	movlt	r0, #0
   2ad80:	blt	2ad90 <_obstack_memory_used@@Base+0x4f3c>
   2ad84:	cmpeq	r0, #0
   2ad88:	mvnne	r1, #-2147483648	; 0x80000000
   2ad8c:	mvnne	r0, #0
   2ad90:	b	2ae78 <_obstack_memory_used@@Base+0x5024>
   2ad94:	sub	sp, sp, #8
   2ad98:	push	{sp, lr}
   2ad9c:	cmp	r1, #0
   2ada0:	blt	2adc0 <_obstack_memory_used@@Base+0x4f6c>
   2ada4:	cmp	r3, #0
   2ada8:	blt	2adf4 <_obstack_memory_used@@Base+0x4fa0>
   2adac:	bl	2aec8 <_obstack_memory_used@@Base+0x5074>
   2adb0:	ldr	lr, [sp, #4]
   2adb4:	add	sp, sp, #8
   2adb8:	pop	{r2, r3}
   2adbc:	bx	lr
   2adc0:	rsbs	r0, r0, #0
   2adc4:	sbc	r1, r1, r1, lsl #1
   2adc8:	cmp	r3, #0
   2adcc:	blt	2ae18 <_obstack_memory_used@@Base+0x4fc4>
   2add0:	bl	2aec8 <_obstack_memory_used@@Base+0x5074>
   2add4:	ldr	lr, [sp, #4]
   2add8:	add	sp, sp, #8
   2addc:	pop	{r2, r3}
   2ade0:	rsbs	r0, r0, #0
   2ade4:	sbc	r1, r1, r1, lsl #1
   2ade8:	rsbs	r2, r2, #0
   2adec:	sbc	r3, r3, r3, lsl #1
   2adf0:	bx	lr
   2adf4:	rsbs	r2, r2, #0
   2adf8:	sbc	r3, r3, r3, lsl #1
   2adfc:	bl	2aec8 <_obstack_memory_used@@Base+0x5074>
   2ae00:	ldr	lr, [sp, #4]
   2ae04:	add	sp, sp, #8
   2ae08:	pop	{r2, r3}
   2ae0c:	rsbs	r0, r0, #0
   2ae10:	sbc	r1, r1, r1, lsl #1
   2ae14:	bx	lr
   2ae18:	rsbs	r2, r2, #0
   2ae1c:	sbc	r3, r3, r3, lsl #1
   2ae20:	bl	2aec8 <_obstack_memory_used@@Base+0x5074>
   2ae24:	ldr	lr, [sp, #4]
   2ae28:	add	sp, sp, #8
   2ae2c:	pop	{r2, r3}
   2ae30:	rsbs	r2, r2, #0
   2ae34:	sbc	r3, r3, r3, lsl #1
   2ae38:	bx	lr
   2ae3c:	cmp	r3, #0
   2ae40:	cmpeq	r2, #0
   2ae44:	bne	2ae5c <_obstack_memory_used@@Base+0x5008>
   2ae48:	cmp	r1, #0
   2ae4c:	cmpeq	r0, #0
   2ae50:	mvnne	r1, #0
   2ae54:	mvnne	r0, #0
   2ae58:	b	2ae78 <_obstack_memory_used@@Base+0x5024>
   2ae5c:	sub	sp, sp, #8
   2ae60:	push	{sp, lr}
   2ae64:	bl	2aec8 <_obstack_memory_used@@Base+0x5074>
   2ae68:	ldr	lr, [sp, #4]
   2ae6c:	add	sp, sp, #8
   2ae70:	pop	{r2, r3}
   2ae74:	bx	lr
   2ae78:	push	{r1, lr}
   2ae7c:	mov	r0, #8
   2ae80:	bl	11bac <raise@plt>
   2ae84:	pop	{r1, pc}
   2ae88:	vmov	d6, r0, r1
   2ae8c:	vldr	d7, [pc, #36]	; 2aeb8 <_obstack_memory_used@@Base+0x5064>
   2ae90:	vldr	d5, [pc, #40]	; 2aec0 <_obstack_memory_used@@Base+0x506c>
   2ae94:	vmul.f64	d7, d6, d7
   2ae98:	vcvt.u32.f64	s14, d7
   2ae9c:	vcvt.f64.u32	d4, s14
   2aea0:	vmov	r1, s14
   2aea4:	vmls.f64	d6, d4, d5
   2aea8:	vcvt.u32.f64	s15, d6
   2aeac:	vmov	r0, s15
   2aeb0:	bx	lr
   2aeb4:	nop			; (mov r0, r0)
   2aeb8:	andeq	r0, r0, r0
   2aebc:	ldclcc	0, cr0, [r0]
   2aec0:	andeq	r0, r0, r0
   2aec4:	mvnsmi	r0, r0
   2aec8:	cmp	r1, r3
   2aecc:	cmpeq	r0, r2
   2aed0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2aed4:	mov	r4, r0
   2aed8:	movcc	r0, #0
   2aedc:	mov	r5, r1
   2aee0:	ldr	lr, [sp, #36]	; 0x24
   2aee4:	movcc	r1, r0
   2aee8:	bcc	2afe4 <_obstack_memory_used@@Base+0x5190>
   2aeec:	cmp	r3, #0
   2aef0:	clzeq	ip, r2
   2aef4:	clzne	ip, r3
   2aef8:	addeq	ip, ip, #32
   2aefc:	cmp	r5, #0
   2af00:	clzeq	r1, r4
   2af04:	addeq	r1, r1, #32
   2af08:	clzne	r1, r5
   2af0c:	sub	ip, ip, r1
   2af10:	sub	sl, ip, #32
   2af14:	lsl	r9, r3, ip
   2af18:	rsb	fp, ip, #32
   2af1c:	orr	r9, r9, r2, lsl sl
   2af20:	orr	r9, r9, r2, lsr fp
   2af24:	lsl	r8, r2, ip
   2af28:	cmp	r5, r9
   2af2c:	cmpeq	r4, r8
   2af30:	movcc	r0, #0
   2af34:	movcc	r1, r0
   2af38:	bcc	2af54 <_obstack_memory_used@@Base+0x5100>
   2af3c:	mov	r0, #1
   2af40:	subs	r4, r4, r8
   2af44:	lsl	r1, r0, sl
   2af48:	orr	r1, r1, r0, lsr fp
   2af4c:	lsl	r0, r0, ip
   2af50:	sbc	r5, r5, r9
   2af54:	cmp	ip, #0
   2af58:	beq	2afe4 <_obstack_memory_used@@Base+0x5190>
   2af5c:	lsr	r6, r8, #1
   2af60:	orr	r6, r6, r9, lsl #31
   2af64:	lsr	r7, r9, #1
   2af68:	mov	r2, ip
   2af6c:	b	2af90 <_obstack_memory_used@@Base+0x513c>
   2af70:	subs	r3, r4, r6
   2af74:	sbc	r8, r5, r7
   2af78:	adds	r3, r3, r3
   2af7c:	adc	r8, r8, r8
   2af80:	adds	r4, r3, #1
   2af84:	adc	r5, r8, #0
   2af88:	subs	r2, r2, #1
   2af8c:	beq	2afac <_obstack_memory_used@@Base+0x5158>
   2af90:	cmp	r5, r7
   2af94:	cmpeq	r4, r6
   2af98:	bcs	2af70 <_obstack_memory_used@@Base+0x511c>
   2af9c:	adds	r4, r4, r4
   2afa0:	adc	r5, r5, r5
   2afa4:	subs	r2, r2, #1
   2afa8:	bne	2af90 <_obstack_memory_used@@Base+0x513c>
   2afac:	lsr	r3, r4, ip
   2afb0:	orr	r3, r3, r5, lsl fp
   2afb4:	lsr	r2, r5, ip
   2afb8:	orr	r3, r3, r5, lsr sl
   2afbc:	adds	r0, r0, r4
   2afc0:	mov	r4, r3
   2afc4:	lsl	r3, r2, ip
   2afc8:	orr	r3, r3, r4, lsl sl
   2afcc:	lsl	ip, r4, ip
   2afd0:	orr	r3, r3, r4, lsr fp
   2afd4:	adc	r1, r1, r5
   2afd8:	subs	r0, r0, ip
   2afdc:	mov	r5, r2
   2afe0:	sbc	r1, r1, r3
   2afe4:	cmp	lr, #0
   2afe8:	strdne	r4, [lr]
   2afec:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2aff0:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   2aff4:	mov	r7, r0
   2aff8:	ldr	r6, [pc, #72]	; 2b048 <_obstack_memory_used@@Base+0x51f4>
   2affc:	ldr	r5, [pc, #72]	; 2b04c <_obstack_memory_used@@Base+0x51f8>
   2b000:	add	r6, pc, r6
   2b004:	add	r5, pc, r5
   2b008:	sub	r6, r6, r5
   2b00c:	mov	r8, r1
   2b010:	mov	r9, r2
   2b014:	bl	11b68 <calloc@plt-0x20>
   2b018:	asrs	r6, r6, #2
   2b01c:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   2b020:	mov	r4, #0
   2b024:	add	r4, r4, #1
   2b028:	ldr	r3, [r5], #4
   2b02c:	mov	r2, r9
   2b030:	mov	r1, r8
   2b034:	mov	r0, r7
   2b038:	blx	r3
   2b03c:	cmp	r6, r4
   2b040:	bne	2b024 <_obstack_memory_used@@Base+0x51d0>
   2b044:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   2b048:	strdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   2b04c:	andeq	r4, r1, ip, ror #29
   2b050:	bx	lr
   2b054:	ldr	r3, [pc, #12]	; 2b068 <_obstack_memory_used@@Base+0x5214>
   2b058:	mov	r1, #0
   2b05c:	add	r3, pc, r3
   2b060:	ldr	r2, [r3]
   2b064:	b	11ee8 <__cxa_atexit@plt>
   2b068:	andeq	r5, r1, r0, ror #2

Disassembly of section .fini:

0002b06c <.fini>:
   2b06c:	push	{r3, lr}
   2b070:	pop	{r3, pc}
