
../repos/coreutils/src/fold:     file format elf32-littlearm


Disassembly of section .init:

00010c80 <.init>:
   10c80:	push	{r3, lr}
   10c84:	bl	111e8 <__assert_fail@plt+0x2e4>
   10c88:	pop	{r3, pc}

Disassembly of section .plt:

00010c8c <calloc@plt-0x14>:
   10c8c:	push	{lr}		; (str lr, [sp, #-4]!)
   10c90:	ldr	lr, [pc, #4]	; 10c9c <calloc@plt-0x4>
   10c94:	add	lr, pc, lr
   10c98:	ldr	pc, [lr, #8]!
   10c9c:	andeq	r8, r1, r4, ror #6

00010ca0 <calloc@plt>:
   10ca0:	add	ip, pc, #0, 12
   10ca4:	add	ip, ip, #24, 20	; 0x18000
   10ca8:	ldr	pc, [ip, #868]!	; 0x364

00010cac <fputs_unlocked@plt>:
   10cac:	add	ip, pc, #0, 12
   10cb0:	add	ip, ip, #24, 20	; 0x18000
   10cb4:	ldr	pc, [ip, #860]!	; 0x35c

00010cb8 <strcmp@plt>:
   10cb8:	add	ip, pc, #0, 12
   10cbc:	add	ip, ip, #24, 20	; 0x18000
   10cc0:	ldr	pc, [ip, #852]!	; 0x354

00010cc4 <posix_fadvise64@plt>:
   10cc4:	add	ip, pc, #0, 12
   10cc8:	add	ip, ip, #24, 20	; 0x18000
   10ccc:	ldr	pc, [ip, #844]!	; 0x34c

00010cd0 <fflush@plt>:
   10cd0:	add	ip, pc, #0, 12
   10cd4:	add	ip, ip, #24, 20	; 0x18000
   10cd8:	ldr	pc, [ip, #836]!	; 0x344

00010cdc <memmove@plt>:
   10cdc:	add	ip, pc, #0, 12
   10ce0:	add	ip, ip, #24, 20	; 0x18000
   10ce4:	ldr	pc, [ip, #828]!	; 0x33c

00010ce8 <free@plt>:
   10ce8:	add	ip, pc, #0, 12
   10cec:	add	ip, ip, #24, 20	; 0x18000
   10cf0:	ldr	pc, [ip, #820]!	; 0x334

00010cf4 <_exit@plt>:
   10cf4:	add	ip, pc, #0, 12
   10cf8:	add	ip, ip, #24, 20	; 0x18000
   10cfc:	ldr	pc, [ip, #812]!	; 0x32c

00010d00 <memcpy@plt>:
   10d00:	add	ip, pc, #0, 12
   10d04:	add	ip, ip, #24, 20	; 0x18000
   10d08:	ldr	pc, [ip, #804]!	; 0x324

00010d0c <__strtoull_internal@plt>:
   10d0c:	add	ip, pc, #0, 12
   10d10:	add	ip, ip, #24, 20	; 0x18000
   10d14:	ldr	pc, [ip, #796]!	; 0x31c

00010d18 <mbsinit@plt>:
   10d18:	add	ip, pc, #0, 12
   10d1c:	add	ip, ip, #24, 20	; 0x18000
   10d20:	ldr	pc, [ip, #788]!	; 0x314

00010d24 <fwrite_unlocked@plt>:
   10d24:	add	ip, pc, #0, 12
   10d28:	add	ip, ip, #24, 20	; 0x18000
   10d2c:	ldr	pc, [ip, #780]!	; 0x30c

00010d30 <memcmp@plt>:
   10d30:	add	ip, pc, #0, 12
   10d34:	add	ip, ip, #24, 20	; 0x18000
   10d38:	ldr	pc, [ip, #772]!	; 0x304

00010d3c <fputc_unlocked@plt>:
   10d3c:	add	ip, pc, #0, 12
   10d40:	add	ip, ip, #24, 20	; 0x18000
   10d44:	ldr	pc, [ip, #764]!	; 0x2fc

00010d48 <dcgettext@plt>:
   10d48:	add	ip, pc, #0, 12
   10d4c:	add	ip, ip, #24, 20	; 0x18000
   10d50:	ldr	pc, [ip, #756]!	; 0x2f4

00010d54 <realloc@plt>:
   10d54:	add	ip, pc, #0, 12
   10d58:	add	ip, ip, #24, 20	; 0x18000
   10d5c:	ldr	pc, [ip, #748]!	; 0x2ec

00010d60 <textdomain@plt>:
   10d60:	add	ip, pc, #0, 12
   10d64:	add	ip, ip, #24, 20	; 0x18000
   10d68:	ldr	pc, [ip, #740]!	; 0x2e4

00010d6c <iswprint@plt>:
   10d6c:	add	ip, pc, #0, 12
   10d70:	add	ip, ip, #24, 20	; 0x18000
   10d74:	ldr	pc, [ip, #732]!	; 0x2dc

00010d78 <fwrite@plt>:
   10d78:	add	ip, pc, #0, 12
   10d7c:	add	ip, ip, #24, 20	; 0x18000
   10d80:	ldr	pc, [ip, #724]!	; 0x2d4

00010d84 <lseek64@plt>:
   10d84:	add	ip, pc, #0, 12
   10d88:	add	ip, ip, #24, 20	; 0x18000
   10d8c:	ldr	pc, [ip, #716]!	; 0x2cc

00010d90 <__ctype_get_mb_cur_max@plt>:
   10d90:	add	ip, pc, #0, 12
   10d94:	add	ip, ip, #24, 20	; 0x18000
   10d98:	ldr	pc, [ip, #708]!	; 0x2c4

00010d9c <__fpending@plt>:
   10d9c:	add	ip, pc, #0, 12
   10da0:	add	ip, ip, #24, 20	; 0x18000
   10da4:	ldr	pc, [ip, #700]!	; 0x2bc

00010da8 <mbrtowc@plt>:
   10da8:	add	ip, pc, #0, 12
   10dac:	add	ip, ip, #24, 20	; 0x18000
   10db0:	ldr	pc, [ip, #692]!	; 0x2b4

00010db4 <error@plt>:
   10db4:	add	ip, pc, #0, 12
   10db8:	add	ip, ip, #24, 20	; 0x18000
   10dbc:	ldr	pc, [ip, #684]!	; 0x2ac

00010dc0 <malloc@plt>:
   10dc0:	add	ip, pc, #0, 12
   10dc4:	add	ip, ip, #24, 20	; 0x18000
   10dc8:	ldr	pc, [ip, #676]!	; 0x2a4

00010dcc <__libc_start_main@plt>:
   10dcc:	add	ip, pc, #0, 12
   10dd0:	add	ip, ip, #24, 20	; 0x18000
   10dd4:	ldr	pc, [ip, #668]!	; 0x29c

00010dd8 <__freading@plt>:
   10dd8:	add	ip, pc, #0, 12
   10ddc:	add	ip, ip, #24, 20	; 0x18000
   10de0:	ldr	pc, [ip, #660]!	; 0x294

00010de4 <__gmon_start__@plt>:
   10de4:	add	ip, pc, #0, 12
   10de8:	add	ip, ip, #24, 20	; 0x18000
   10dec:	ldr	pc, [ip, #652]!	; 0x28c

00010df0 <getopt_long@plt>:
   10df0:	add	ip, pc, #0, 12
   10df4:	add	ip, ip, #24, 20	; 0x18000
   10df8:	ldr	pc, [ip, #644]!	; 0x284

00010dfc <__ctype_b_loc@plt>:
   10dfc:	add	ip, pc, #0, 12
   10e00:	add	ip, ip, #24, 20	; 0x18000
   10e04:	ldr	pc, [ip, #636]!	; 0x27c

00010e08 <exit@plt>:
   10e08:	add	ip, pc, #0, 12
   10e0c:	add	ip, ip, #24, 20	; 0x18000
   10e10:	ldr	pc, [ip, #628]!	; 0x274

00010e14 <strlen@plt>:
   10e14:	add	ip, pc, #0, 12
   10e18:	add	ip, ip, #24, 20	; 0x18000
   10e1c:	ldr	pc, [ip, #620]!	; 0x26c

00010e20 <strchr@plt>:
   10e20:	add	ip, pc, #0, 12
   10e24:	add	ip, ip, #24, 20	; 0x18000
   10e28:	ldr	pc, [ip, #612]!	; 0x264

00010e2c <__errno_location@plt>:
   10e2c:	add	ip, pc, #0, 12
   10e30:	add	ip, ip, #24, 20	; 0x18000
   10e34:	ldr	pc, [ip, #604]!	; 0x25c

00010e38 <__cxa_atexit@plt>:
   10e38:	add	ip, pc, #0, 12
   10e3c:	add	ip, ip, #24, 20	; 0x18000
   10e40:	ldr	pc, [ip, #596]!	; 0x254

00010e44 <memset@plt>:
   10e44:	add	ip, pc, #0, 12
   10e48:	add	ip, ip, #24, 20	; 0x18000
   10e4c:	ldr	pc, [ip, #588]!	; 0x24c

00010e50 <__printf_chk@plt>:
   10e50:	add	ip, pc, #0, 12
   10e54:	add	ip, ip, #24, 20	; 0x18000
   10e58:	ldr	pc, [ip, #580]!	; 0x244

00010e5c <fileno@plt>:
   10e5c:	add	ip, pc, #0, 12
   10e60:	add	ip, ip, #24, 20	; 0x18000
   10e64:	ldr	pc, [ip, #572]!	; 0x23c

00010e68 <__fprintf_chk@plt>:
   10e68:	add	ip, pc, #0, 12
   10e6c:	add	ip, ip, #24, 20	; 0x18000
   10e70:	ldr	pc, [ip, #564]!	; 0x234

00010e74 <fclose@plt>:
   10e74:	add	ip, pc, #0, 12
   10e78:	add	ip, ip, #24, 20	; 0x18000
   10e7c:	ldr	pc, [ip, #556]!	; 0x22c

00010e80 <fseeko64@plt>:
   10e80:	add	ip, pc, #0, 12
   10e84:	add	ip, ip, #24, 20	; 0x18000
   10e88:	ldr	pc, [ip, #548]!	; 0x224

00010e8c <__uflow@plt>:
   10e8c:	add	ip, pc, #0, 12
   10e90:	add	ip, ip, #24, 20	; 0x18000
   10e94:	ldr	pc, [ip, #540]!	; 0x21c

00010e98 <__overflow@plt>:
   10e98:	add	ip, pc, #0, 12
   10e9c:	add	ip, ip, #24, 20	; 0x18000
   10ea0:	ldr	pc, [ip, #532]!	; 0x214

00010ea4 <setlocale@plt>:
   10ea4:	add	ip, pc, #0, 12
   10ea8:	add	ip, ip, #24, 20	; 0x18000
   10eac:	ldr	pc, [ip, #524]!	; 0x20c

00010eb0 <strrchr@plt>:
   10eb0:	add	ip, pc, #0, 12
   10eb4:	add	ip, ip, #24, 20	; 0x18000
   10eb8:	ldr	pc, [ip, #516]!	; 0x204

00010ebc <nl_langinfo@plt>:
   10ebc:	add	ip, pc, #0, 12
   10ec0:	add	ip, ip, #24, 20	; 0x18000
   10ec4:	ldr	pc, [ip, #508]!	; 0x1fc

00010ec8 <clearerr_unlocked@plt>:
   10ec8:	add	ip, pc, #0, 12
   10ecc:	add	ip, ip, #24, 20	; 0x18000
   10ed0:	ldr	pc, [ip, #500]!	; 0x1f4

00010ed4 <fopen64@plt>:
   10ed4:	add	ip, pc, #0, 12
   10ed8:	add	ip, ip, #24, 20	; 0x18000
   10edc:	ldr	pc, [ip, #492]!	; 0x1ec

00010ee0 <bindtextdomain@plt>:
   10ee0:	add	ip, pc, #0, 12
   10ee4:	add	ip, ip, #24, 20	; 0x18000
   10ee8:	ldr	pc, [ip, #484]!	; 0x1e4

00010eec <strncmp@plt>:
   10eec:	add	ip, pc, #0, 12
   10ef0:	add	ip, ip, #24, 20	; 0x18000
   10ef4:	ldr	pc, [ip, #476]!	; 0x1dc

00010ef8 <abort@plt>:
   10ef8:	add	ip, pc, #0, 12
   10efc:	add	ip, ip, #24, 20	; 0x18000
   10f00:	ldr	pc, [ip, #468]!	; 0x1d4

00010f04 <__assert_fail@plt>:
   10f04:	add	ip, pc, #0, 12
   10f08:	add	ip, ip, #24, 20	; 0x18000
   10f0c:	ldr	pc, [ip, #460]!	; 0x1cc

Disassembly of section .text:

00010f10 <.text>:
   10f10:	movw	r3, #32272	; 0x7e10
   10f14:	movt	r3, #1
   10f18:	strd	r4, [sp, #-36]!	; 0xffffffdc
   10f1c:	strd	r6, [sp, #8]
   10f20:	mov	r7, r0
   10f24:	mov	r6, r1
   10f28:	strd	r8, [sp, #16]
   10f2c:	movw	r5, #37208	; 0x9158
   10f30:	movt	r5, #2
   10f34:	strd	sl, [sp, #24]
   10f38:	mov	fp, #80	; 0x50
   10f3c:	str	lr, [sp, #32]
   10f40:	sub	sp, sp, #44	; 0x2c
   10f44:	ldr	r0, [r1]
   10f48:	str	r3, [sp, #28]
   10f4c:	bl	11d8c <__assert_fail@plt+0xe88>
   10f50:	movw	r1, #31564	; 0x7b4c
   10f54:	movt	r1, #1
   10f58:	ldr	r8, [pc, #580]	; 111a4 <__assert_fail@plt+0x2a0>
   10f5c:	mov	r0, #6
   10f60:	mov	r9, r1
   10f64:	bl	10ea4 <setlocale@plt>
   10f68:	movw	r1, #32248	; 0x7df8
   10f6c:	movt	r1, #1
   10f70:	movw	r0, #32080	; 0x7d50
   10f74:	movt	r0, #1
   10f78:	bl	10ee0 <bindtextdomain@plt>
   10f7c:	movw	r0, #32080	; 0x7d50
   10f80:	movt	r0, #1
   10f84:	bl	10d60 <textdomain@plt>
   10f88:	movw	r0, #6760	; 0x1a68
   10f8c:	movt	r0, #1
   10f90:	bl	17a14 <__assert_fail@plt+0x6b10>
   10f94:	mov	r3, #0
   10f98:	strb	r3, [r5]
   10f9c:	strb	r3, [r5, #12]
   10fa0:	strb	r3, [r5, #13]
   10fa4:	mov	r4, #0
   10fa8:	mov	r3, r8
   10fac:	ldr	r2, [pc, #500]	; 111a8 <__assert_fail@plt+0x2a4>
   10fb0:	mov	r1, r6
   10fb4:	mov	r0, r7
   10fb8:	str	r4, [sp]
   10fbc:	bl	10df0 <getopt_long@plt>
   10fc0:	cmn	r0, #1
   10fc4:	beq	110e8 <__assert_fail@plt+0x1e4>
   10fc8:	cmp	r0, #57	; 0x39
   10fcc:	ble	1102c <__assert_fail@plt+0x128>
   10fd0:	cmp	r0, #115	; 0x73
   10fd4:	beq	1109c <__assert_fail@plt+0x198>
   10fd8:	cmp	r0, #119	; 0x77
   10fdc:	movweq	r3, #37200	; 0x9150
   10fe0:	movteq	r3, #2
   10fe4:	bne	1107c <__assert_fail@plt+0x178>
   10fe8:	ldr	r4, [r3]
   10fec:	mov	r2, #5
   10ff0:	mov	r0, #0
   10ff4:	mov	fp, #0
   10ff8:	mvn	sl, #9
   10ffc:	ldr	r1, [sp, #28]
   11000:	bl	10d48 <dcgettext@plt>
   11004:	mov	r1, #0
   11008:	mov	r2, #1
   1100c:	strd	sl, [sp]
   11010:	mov	r3, #0
   11014:	str	r9, [sp, #8]
   11018:	strd	r0, [sp, #12]
   1101c:	mov	r0, r4
   11020:	bl	16710 <__assert_fail@plt+0x580c>
   11024:	mov	fp, r0
   11028:	b	10fa4 <__assert_fail@plt+0xa0>
   1102c:	cmp	r0, #48	; 0x30
   11030:	bge	110a8 <__assert_fail@plt+0x1a4>
   11034:	cmn	r0, #3
   11038:	bne	1108c <__assert_fail@plt+0x188>
   1103c:	movw	r2, #32300	; 0x7e2c
   11040:	movt	r2, #1
   11044:	movw	r3, #37096	; 0x90e8
   11048:	movt	r3, #2
   1104c:	movw	r0, #37196	; 0x914c
   11050:	movt	r0, #2
   11054:	stm	sp, {r2, r4}
   11058:	movw	r1, #31484	; 0x7afc
   1105c:	movt	r1, #1
   11060:	ldr	r0, [r0]
   11064:	movw	r2, #32076	; 0x7d4c
   11068:	movt	r2, #1
   1106c:	ldr	r3, [r3]
   11070:	bl	15dc0 <__assert_fail@plt+0x4ebc>
   11074:	mov	r0, r4
   11078:	bl	10e08 <exit@plt>
   1107c:	cmp	r0, #98	; 0x62
   11080:	beq	110c8 <__assert_fail@plt+0x1c4>
   11084:	mov	r0, #1
   11088:	bl	116dc <__assert_fail@plt+0x7d8>
   1108c:	cmn	r0, #2
   11090:	bne	11084 <__assert_fail@plt+0x180>
   11094:	mov	r0, r4
   11098:	bl	116dc <__assert_fail@plt+0x7d8>
   1109c:	mov	r3, #1
   110a0:	strb	r3, [r5, #13]
   110a4:	b	10fa4 <__assert_fail@plt+0xa0>
   110a8:	movw	r3, #37200	; 0x9150
   110ac:	movt	r3, #2
   110b0:	ldr	r2, [r3]
   110b4:	cmp	r2, #0
   110b8:	beq	110d4 <__assert_fail@plt+0x1d0>
   110bc:	sub	r2, r2, #1
   110c0:	str	r2, [r3]
   110c4:	b	10fe8 <__assert_fail@plt+0xe4>
   110c8:	mov	r3, #1
   110cc:	strb	r3, [r5, #12]
   110d0:	b	10fa4 <__assert_fail@plt+0xa0>
   110d4:	add	r1, sp, #36	; 0x24
   110d8:	strb	r0, [sp, #36]	; 0x24
   110dc:	strb	r2, [sp, #37]	; 0x25
   110e0:	str	r1, [r3]
   110e4:	b	10fe8 <__assert_fail@plt+0xe4>
   110e8:	movw	r3, #37176	; 0x9138
   110ec:	movt	r3, #2
   110f0:	ldr	r8, [r3]
   110f4:	cmp	r8, r7
   110f8:	beq	1118c <__assert_fail@plt+0x288>
   110fc:	movge	r4, #1
   11100:	bge	1112c <__assert_fail@plt+0x228>
   11104:	add	r8, r6, r8, lsl #2
   11108:	mov	r4, #1
   1110c:	add	r6, r6, r7, lsl #2
   11110:	ldr	r0, [r8], #4
   11114:	mov	r1, fp
   11118:	bl	1129c <__assert_fail@plt+0x398>
   1111c:	and	r4, r4, r0
   11120:	uxtb	r4, r4
   11124:	cmp	r8, r6
   11128:	bne	11110 <__assert_fail@plt+0x20c>
   1112c:	ldrb	r3, [r5]
   11130:	cmp	r3, #0
   11134:	bne	1115c <__assert_fail@plt+0x258>
   11138:	eor	r0, r4, #1
   1113c:	uxtb	r0, r0
   11140:	add	sp, sp, #44	; 0x2c
   11144:	ldrd	r4, [sp]
   11148:	ldrd	r6, [sp, #8]
   1114c:	ldrd	r8, [sp, #16]
   11150:	ldrd	sl, [sp, #24]
   11154:	add	sp, sp, #32
   11158:	pop	{pc}		; (ldr pc, [sp], #4)
   1115c:	movw	r3, #37192	; 0x9148
   11160:	movt	r3, #2
   11164:	ldr	r0, [r3]
   11168:	bl	11ba8 <__assert_fail@plt+0xca4>
   1116c:	cmn	r0, #1
   11170:	bne	11138 <__assert_fail@plt+0x234>
   11174:	bl	10e2c <__errno_location@plt>
   11178:	movw	r2, #31476	; 0x7af4
   1117c:	movt	r2, #1
   11180:	ldr	r1, [r0]
   11184:	mov	r0, #1
   11188:	bl	10db4 <error@plt>
   1118c:	mov	r1, fp
   11190:	movw	r0, #31476	; 0x7af4
   11194:	movt	r0, #1
   11198:	bl	1129c <__assert_fail@plt+0x398>
   1119c:	mov	r4, r0
   111a0:	b	1112c <__assert_fail@plt+0x228>
   111a4:	andeq	r7, r1, r0, ror sl
   111a8:	ldrdeq	r7, [r1], -r0
   111ac:	mov	fp, #0
   111b0:	mov	lr, #0
   111b4:	pop	{r1}		; (ldr r1, [sp], #4)
   111b8:	mov	r2, sp
   111bc:	push	{r2}		; (str r2, [sp, #-4]!)
   111c0:	push	{r0}		; (str r0, [sp, #-4]!)
   111c4:	ldr	ip, [pc, #16]	; 111dc <__assert_fail@plt+0x2d8>
   111c8:	push	{ip}		; (str ip, [sp, #-4]!)
   111cc:	ldr	r0, [pc, #12]	; 111e0 <__assert_fail@plt+0x2dc>
   111d0:	ldr	r3, [pc, #12]	; 111e4 <__assert_fail@plt+0x2e0>
   111d4:	bl	10dcc <__libc_start_main@plt>
   111d8:	bl	10ef8 <abort@plt>
   111dc:	andeq	r7, r1, r0, lsl sl
   111e0:	andeq	r0, r1, r0, lsl pc
   111e4:			; <UNDEFINED> instruction: 0x000179b0
   111e8:	ldr	r3, [pc, #20]	; 11204 <__assert_fail@plt+0x300>
   111ec:	ldr	r2, [pc, #20]	; 11208 <__assert_fail@plt+0x304>
   111f0:	add	r3, pc, r3
   111f4:	ldr	r2, [r3, r2]
   111f8:	cmp	r2, #0
   111fc:	bxeq	lr
   11200:	b	10de4 <__gmon_start__@plt>
   11204:	andeq	r7, r1, r8, lsl #28
   11208:	ldrdeq	r0, [r0], -ip
   1120c:	ldr	r0, [pc, #24]	; 1122c <__assert_fail@plt+0x328>
   11210:	ldr	r3, [pc, #24]	; 11230 <__assert_fail@plt+0x32c>
   11214:	cmp	r3, r0
   11218:	bxeq	lr
   1121c:	ldr	r3, [pc, #16]	; 11234 <__assert_fail@plt+0x330>
   11220:	cmp	r3, #0
   11224:	bxeq	lr
   11228:	bx	r3
   1122c:	andeq	r9, r2, r0, lsr r1
   11230:	andeq	r9, r2, r0, lsr r1
   11234:	andeq	r0, r0, r0
   11238:	ldr	r0, [pc, #36]	; 11264 <__assert_fail@plt+0x360>
   1123c:	ldr	r1, [pc, #36]	; 11268 <__assert_fail@plt+0x364>
   11240:	sub	r1, r1, r0
   11244:	asr	r1, r1, #2
   11248:	add	r1, r1, r1, lsr #31
   1124c:	asrs	r1, r1, #1
   11250:	bxeq	lr
   11254:	ldr	r3, [pc, #16]	; 1126c <__assert_fail@plt+0x368>
   11258:	cmp	r3, #0
   1125c:	bxeq	lr
   11260:	bx	r3
   11264:	andeq	r9, r2, r0, lsr r1
   11268:	andeq	r9, r2, r0, lsr r1
   1126c:	andeq	r0, r0, r0
   11270:	push	{r4, lr}
   11274:	ldr	r4, [pc, #24]	; 11294 <__assert_fail@plt+0x390>
   11278:	ldrb	r3, [r4]
   1127c:	cmp	r3, #0
   11280:	popne	{r4, pc}
   11284:	bl	1120c <__assert_fail@plt+0x308>
   11288:	mov	r3, #1
   1128c:	strb	r3, [r4]
   11290:	pop	{r4, pc}
   11294:	andeq	r9, r2, r4, asr r1
   11298:	b	11238 <__assert_fail@plt+0x334>
   1129c:	strd	r4, [sp, #-36]!	; 0xffffffdc
   112a0:	strd	r6, [sp, #8]
   112a4:	strd	r8, [sp, #16]
   112a8:	strd	sl, [sp, #24]
   112ac:	mov	sl, r1
   112b0:	movw	r1, #31476	; 0x7af4
   112b4:	movt	r1, #1
   112b8:	str	lr, [sp, #32]
   112bc:	sub	sp, sp, #20
   112c0:	str	r0, [sp, #8]
   112c4:	bl	10cb8 <strcmp@plt>
   112c8:	cmp	r0, #0
   112cc:	bne	1161c <__assert_fail@plt+0x718>
   112d0:	movw	r3, #37192	; 0x9148
   112d4:	movt	r3, #2
   112d8:	ldr	r8, [r3]
   112dc:	mov	r1, #1
   112e0:	movw	r2, #37208	; 0x9158
   112e4:	movt	r2, #2
   112e8:	strb	r1, [r2]
   112ec:	bl	10e2c <__errno_location@plt>
   112f0:	cmp	r8, #0
   112f4:	str	r0, [sp, #12]
   112f8:	beq	11640 <__assert_fail@plt+0x73c>
   112fc:	mov	r5, #0
   11300:	mov	r1, #2
   11304:	mov	r0, r8
   11308:	movw	r9, #37196	; 0x914c
   1130c:	movt	r9, #2
   11310:	mov	r6, r5
   11314:	bl	11b58 <__assert_fail@plt+0xc54>
   11318:	ldr	r3, [r8, #4]
   1131c:	ldr	r2, [r8, #8]
   11320:	cmp	r3, r2
   11324:	bcs	113c4 <__assert_fail@plt+0x4c0>
   11328:	add	r2, r3, #1
   1132c:	str	r2, [r8, #4]
   11330:	ldrb	r7, [r3]
   11334:	movw	r4, #37208	; 0x9158
   11338:	movt	r4, #2
   1133c:	add	fp, r5, #1
   11340:	ldr	r3, [r4, #4]
   11344:	ldr	r2, [r4, #8]
   11348:	cmp	fp, r2
   1134c:	bcs	114d0 <__assert_fail@plt+0x5cc>
   11350:	cmp	r7, #10
   11354:	beq	114ac <__assert_fail@plt+0x5a8>
   11358:	ldrb	r2, [r4, #12]
   1135c:	uxtb	r7, r7
   11360:	mov	fp, #10
   11364:	cmp	r2, #0
   11368:	bne	1138c <__assert_fail@plt+0x488>
   1136c:	cmp	r7, #8
   11370:	beq	115ec <__assert_fail@plt+0x6e8>
   11374:	cmp	r7, #13
   11378:	beq	1149c <__assert_fail@plt+0x598>
   1137c:	cmp	r7, #9
   11380:	biceq	r6, r6, #7
   11384:	addeq	r6, r6, #8
   11388:	beq	11390 <__assert_fail@plt+0x48c>
   1138c:	add	r6, r6, #1
   11390:	cmp	r6, sl
   11394:	bls	114a0 <__assert_fail@plt+0x59c>
   11398:	ldrb	r2, [r4, #13]
   1139c:	cmp	r2, #0
   113a0:	bne	114e8 <__assert_fail@plt+0x5e4>
   113a4:	cmp	r5, #0
   113a8:	bne	11460 <__assert_fail@plt+0x55c>
   113ac:	mov	r5, #1
   113b0:	strb	r7, [r3]
   113b4:	ldr	r3, [r8, #4]
   113b8:	ldr	r2, [r8, #8]
   113bc:	cmp	r3, r2
   113c0:	bcc	11328 <__assert_fail@plt+0x424>
   113c4:	mov	r0, r8
   113c8:	bl	10e8c <__uflow@plt>
   113cc:	cmn	r0, #1
   113d0:	mov	r7, r0
   113d4:	bne	11334 <__assert_fail@plt+0x430>
   113d8:	ldr	r3, [r8]
   113dc:	ldr	r2, [sp, #12]
   113e0:	tst	r3, #32
   113e4:	ldr	r4, [r2]
   113e8:	moveq	r4, #0
   113ec:	cmp	r5, #0
   113f0:	beq	11418 <__assert_fail@plt+0x514>
   113f4:	movw	r3, #37196	; 0x914c
   113f8:	movt	r3, #2
   113fc:	movw	r0, #37208	; 0x9158
   11400:	movt	r0, #2
   11404:	ldr	r3, [r3]
   11408:	mov	r2, r5
   1140c:	mov	r1, #1
   11410:	ldr	r0, [r0, #4]
   11414:	bl	10d24 <fwrite_unlocked@plt>
   11418:	movw	r1, #31476	; 0x7af4
   1141c:	movt	r1, #1
   11420:	ldr	r0, [sp, #8]
   11424:	bl	10cb8 <strcmp@plt>
   11428:	cmp	r0, #0
   1142c:	mov	r0, r8
   11430:	bne	115fc <__assert_fail@plt+0x6f8>
   11434:	bl	10ec8 <clearerr_unlocked@plt>
   11438:	cmp	r4, #0
   1143c:	moveq	r0, #1
   11440:	bne	11680 <__assert_fail@plt+0x77c>
   11444:	add	sp, sp, #20
   11448:	ldrd	r4, [sp]
   1144c:	ldrd	r6, [sp, #8]
   11450:	ldrd	r8, [sp, #16]
   11454:	ldrd	sl, [sp, #24]
   11458:	add	sp, sp, #32
   1145c:	pop	{pc}		; (ldr pc, [sp], #4)
   11460:	add	r2, r5, #1
   11464:	mov	r0, r3
   11468:	strb	fp, [r3, r5]
   1146c:	mov	r1, #1
   11470:	ldr	r3, [r9]
   11474:	bl	10d24 <fwrite_unlocked@plt>
   11478:	ldrb	r5, [r4, #12]
   1147c:	cmp	r5, #0
   11480:	bne	115dc <__assert_fail@plt+0x6d8>
   11484:	cmp	r7, #8
   11488:	mov	r6, r5
   1148c:	ldr	r3, [r4, #4]
   11490:	beq	113ac <__assert_fail@plt+0x4a8>
   11494:	cmp	r7, #13
   11498:	bne	1137c <__assert_fail@plt+0x478>
   1149c:	mov	r6, #0
   114a0:	add	r3, r3, r5
   114a4:	add	r5, r5, #1
   114a8:	b	113b0 <__assert_fail@plt+0x4ac>
   114ac:	mov	r2, fp
   114b0:	mov	r0, r3
   114b4:	strb	r7, [r3, r5]
   114b8:	mov	r1, #1
   114bc:	mov	r5, #0
   114c0:	ldr	r3, [r9]
   114c4:	mov	r6, r5
   114c8:	bl	10d24 <fwrite_unlocked@plt>
   114cc:	b	11318 <__assert_fail@plt+0x414>
   114d0:	mov	r0, r3
   114d4:	add	r1, r4, #8
   114d8:	bl	161a4 <__assert_fail@plt+0x52a0>
   114dc:	mov	r3, r0
   114e0:	str	r0, [r4, #4]
   114e4:	b	11350 <__assert_fail@plt+0x44c>
   114e8:	cmp	r5, #0
   114ec:	beq	113ac <__assert_fail@plt+0x4a8>
   114f0:	str	r3, [sp, #4]
   114f4:	mov	r6, r5
   114f8:	bl	10dfc <__ctype_b_loc@plt>
   114fc:	ldr	r3, [sp, #4]
   11500:	ldr	ip, [r0]
   11504:	add	r0, r3, r5
   11508:	b	11514 <__assert_fail@plt+0x610>
   1150c:	subs	r6, r1, #0
   11510:	beq	11460 <__assert_fail@plt+0x55c>
   11514:	ldrb	r2, [r0, #-1]!
   11518:	sub	r1, r6, #1
   1151c:	lsl	r2, r2, #1
   11520:	ldrh	r2, [ip, r2]
   11524:	tst	r2, #1
   11528:	beq	1150c <__assert_fail@plt+0x608>
   1152c:	mov	r0, r3
   11530:	mov	r2, r6
   11534:	ldr	r3, [r9]
   11538:	mov	r1, #1
   1153c:	bl	10d24 <fwrite_unlocked@plt>
   11540:	ldr	r0, [r9]
   11544:	ldr	r3, [r0, #20]
   11548:	ldr	r2, [r0, #24]
   1154c:	cmp	r3, r2
   11550:	addcc	r2, r3, #1
   11554:	strcc	r2, [r0, #20]
   11558:	strbcc	fp, [r3]
   1155c:	bcs	116c8 <__assert_fail@plt+0x7c4>
   11560:	ldr	r3, [r4, #4]
   11564:	sub	r5, r5, r6
   11568:	mov	r2, r5
   1156c:	add	r1, r3, r6
   11570:	mov	r0, r3
   11574:	bl	10cdc <memmove@plt>
   11578:	cmp	r5, #0
   1157c:	mov	r3, r0
   11580:	ldrb	r2, [r4, #12]
   11584:	beq	116b0 <__assert_fail@plt+0x7ac>
   11588:	cmp	r2, #0
   1158c:	bne	11678 <__assert_fail@plt+0x774>
   11590:	sub	r1, r0, #1
   11594:	mov	r6, r2
   11598:	add	r0, r1, r5
   1159c:	b	115c4 <__assert_fail@plt+0x6c0>
   115a0:	cmp	r2, #13
   115a4:	moveq	r6, #0
   115a8:	beq	115bc <__assert_fail@plt+0x6b8>
   115ac:	cmp	r2, #9
   115b0:	biceq	r6, r6, #7
   115b4:	addne	r6, r6, #1
   115b8:	addeq	r6, r6, #8
   115bc:	cmp	r0, r1
   115c0:	beq	1136c <__assert_fail@plt+0x468>
   115c4:	ldrb	r2, [r1, #1]!
   115c8:	cmp	r2, #8
   115cc:	bne	115a0 <__assert_fail@plt+0x69c>
   115d0:	cmp	r6, #0
   115d4:	subne	r6, r6, #1
   115d8:	b	115bc <__assert_fail@plt+0x6b8>
   115dc:	mov	r6, #1
   115e0:	mov	r5, #0
   115e4:	ldr	r3, [r4, #4]
   115e8:	b	11390 <__assert_fail@plt+0x48c>
   115ec:	cmp	r6, #0
   115f0:	beq	114a0 <__assert_fail@plt+0x59c>
   115f4:	sub	r6, r6, #1
   115f8:	b	11390 <__assert_fail@plt+0x48c>
   115fc:	bl	11ba8 <__assert_fail@plt+0xca4>
   11600:	cmp	r0, #0
   11604:	beq	11438 <__assert_fail@plt+0x534>
   11608:	cmp	r4, #0
   1160c:	bne	11680 <__assert_fail@plt+0x77c>
   11610:	ldr	r3, [sp, #12]
   11614:	ldr	r4, [r3]
   11618:	b	11438 <__assert_fail@plt+0x534>
   1161c:	movw	r1, #31480	; 0x7af8
   11620:	movt	r1, #1
   11624:	ldr	r0, [sp, #8]
   11628:	bl	10ed4 <fopen64@plt>
   1162c:	mov	r8, r0
   11630:	bl	10e2c <__errno_location@plt>
   11634:	cmp	r8, #0
   11638:	str	r0, [sp, #12]
   1163c:	bne	112fc <__assert_fail@plt+0x3f8>
   11640:	mov	r3, r0
   11644:	mov	r1, #3
   11648:	ldr	r2, [sp, #8]
   1164c:	mov	r0, r8
   11650:	ldr	r4, [r3]
   11654:	bl	14f50 <__assert_fail@plt+0x404c>
   11658:	mov	r3, r0
   1165c:	movw	r2, #32496	; 0x7ef0
   11660:	movt	r2, #1
   11664:	mov	r0, r8
   11668:	mov	r1, r4
   1166c:	bl	10db4 <error@plt>
   11670:	mov	r0, r8
   11674:	b	11444 <__assert_fail@plt+0x540>
   11678:	mov	r6, r5
   1167c:	b	11364 <__assert_fail@plt+0x460>
   11680:	mov	r1, #3
   11684:	mov	r0, #0
   11688:	ldr	r2, [sp, #8]
   1168c:	bl	14f50 <__assert_fail@plt+0x404c>
   11690:	mov	r3, r0
   11694:	mov	r1, r4
   11698:	mov	r0, #0
   1169c:	movw	r2, #32496	; 0x7ef0
   116a0:	movt	r2, #1
   116a4:	bl	10db4 <error@plt>
   116a8:	mov	r0, #0
   116ac:	b	11444 <__assert_fail@plt+0x540>
   116b0:	cmp	r2, #0
   116b4:	bne	116d4 <__assert_fail@plt+0x7d0>
   116b8:	cmp	r7, #8
   116bc:	mov	r6, r5
   116c0:	bne	11374 <__assert_fail@plt+0x470>
   116c4:	b	113ac <__assert_fail@plt+0x4a8>
   116c8:	mov	r1, #10
   116cc:	bl	10e98 <__overflow@plt>
   116d0:	b	11560 <__assert_fail@plt+0x65c>
   116d4:	mov	r6, #1
   116d8:	b	11390 <__assert_fail@plt+0x48c>
   116dc:	subs	r6, r0, #0
   116e0:	str	r7, [sp, #-8]!
   116e4:	str	lr, [sp, #4]
   116e8:	sub	sp, sp, #56	; 0x38
   116ec:	beq	11734 <__assert_fail@plt+0x830>
   116f0:	movw	r3, #37184	; 0x9140
   116f4:	movt	r3, #2
   116f8:	ldr	r4, [r3]
   116fc:	mov	r2, #5
   11700:	movw	r1, #31492	; 0x7b04
   11704:	movt	r1, #1
   11708:	mov	r0, #0
   1170c:	bl	10d48 <dcgettext@plt>
   11710:	movw	r3, #37232	; 0x9170
   11714:	movt	r3, #2
   11718:	mov	r2, r0
   1171c:	mov	r1, #1
   11720:	ldr	r3, [r3]
   11724:	mov	r0, r4
   11728:	bl	10e68 <__fprintf_chk@plt>
   1172c:	mov	r0, r6
   11730:	bl	10e08 <exit@plt>
   11734:	mov	r2, #5
   11738:	movw	r1, #31532	; 0x7b2c
   1173c:	movt	r1, #1
   11740:	movw	r7, #37196	; 0x914c
   11744:	movt	r7, #2
   11748:	bl	10d48 <dcgettext@plt>
   1174c:	movw	r3, #37232	; 0x9170
   11750:	movt	r3, #2
   11754:	mov	r1, r0
   11758:	mov	r0, #1
   1175c:	ldr	r2, [r3]
   11760:	bl	10e50 <__printf_chk@plt>
   11764:	mov	r2, #5
   11768:	movw	r1, #31568	; 0x7b50
   1176c:	movt	r1, #1
   11770:	mov	r0, r6
   11774:	bl	10d48 <dcgettext@plt>
   11778:	ldr	r1, [r7]
   1177c:	bl	10cac <fputs_unlocked@plt>
   11780:	mov	r2, #5
   11784:	movw	r1, #31628	; 0x7b8c
   11788:	movt	r1, #1
   1178c:	mov	r0, r6
   11790:	bl	10d48 <dcgettext@plt>
   11794:	ldr	r1, [r7]
   11798:	bl	10cac <fputs_unlocked@plt>
   1179c:	mov	r2, #5
   117a0:	movw	r1, #31684	; 0x7bc4
   117a4:	movt	r1, #1
   117a8:	mov	r0, r6
   117ac:	bl	10d48 <dcgettext@plt>
   117b0:	ldr	r1, [r7]
   117b4:	bl	10cac <fputs_unlocked@plt>
   117b8:	mov	r2, #5
   117bc:	movw	r1, #31760	; 0x7c10
   117c0:	movt	r1, #1
   117c4:	mov	r0, r6
   117c8:	bl	10d48 <dcgettext@plt>
   117cc:	ldr	r1, [r7]
   117d0:	bl	10cac <fputs_unlocked@plt>
   117d4:	mov	r2, #5
   117d8:	movw	r1, #31908	; 0x7ca4
   117dc:	movt	r1, #1
   117e0:	mov	r0, r6
   117e4:	bl	10d48 <dcgettext@plt>
   117e8:	ldr	r1, [r7]
   117ec:	bl	10cac <fputs_unlocked@plt>
   117f0:	mov	r2, #5
   117f4:	movw	r1, #31956	; 0x7cd4
   117f8:	movt	r1, #1
   117fc:	mov	r0, r6
   11800:	bl	10d48 <dcgettext@plt>
   11804:	ldr	r1, [r7]
   11808:	bl	10cac <fputs_unlocked@plt>
   1180c:	movw	lr, #31288	; 0x7a38
   11810:	movt	lr, #1
   11814:	ldr	ip, [lr]
   11818:	ldr	r4, [lr, #4]
   1181c:	ldrd	r8, [lr, #8]
   11820:	subs	r1, ip, #0
   11824:	str	ip, [sp]
   11828:	ldrd	r2, [lr, #16]
   1182c:	str	r4, [sp, #4]
   11830:	ldrd	r4, [lr, #24]
   11834:	strd	r8, [sp, #8]
   11838:	ldrd	r8, [lr, #32]
   1183c:	strd	r2, [sp, #16]
   11840:	ldrd	r2, [lr, #40]	; 0x28
   11844:	strd	r4, [sp, #24]
   11848:	ldrd	r4, [lr, #48]	; 0x30
   1184c:	strd	r8, [sp, #32]
   11850:	strd	r2, [sp, #40]	; 0x28
   11854:	strd	r4, [sp, #48]	; 0x30
   11858:	movwne	r5, #31484	; 0x7afc
   1185c:	mov	r4, sp
   11860:	movtne	r5, #1
   11864:	bne	1195c <__assert_fail@plt+0xa58>
   11868:	ldr	r4, [r4, #4]
   1186c:	movw	r1, #32012	; 0x7d0c
   11870:	movt	r1, #1
   11874:	mov	r2, #5
   11878:	cmp	r4, #0
   1187c:	beq	11970 <__assert_fail@plt+0xa6c>
   11880:	mov	r0, #0
   11884:	bl	10d48 <dcgettext@plt>
   11888:	mov	r1, r0
   1188c:	movw	r3, #32036	; 0x7d24
   11890:	movt	r3, #1
   11894:	movw	r2, #32076	; 0x7d4c
   11898:	movt	r2, #1
   1189c:	mov	r0, #1
   118a0:	bl	10e50 <__printf_chk@plt>
   118a4:	mov	r1, #0
   118a8:	mov	r0, #5
   118ac:	bl	10ea4 <setlocale@plt>
   118b0:	cmp	r0, #0
   118b4:	movweq	r5, #31484	; 0x7afc
   118b8:	movteq	r5, #1
   118bc:	beq	118e0 <__assert_fail@plt+0x9dc>
   118c0:	movw	r1, #32092	; 0x7d5c
   118c4:	movt	r1, #1
   118c8:	mov	r2, #3
   118cc:	movw	r5, #31484	; 0x7afc
   118d0:	movt	r5, #1
   118d4:	bl	10eec <strncmp@plt>
   118d8:	cmp	r0, #0
   118dc:	bne	11a28 <__assert_fail@plt+0xb24>
   118e0:	mov	r2, #5
   118e4:	movw	r1, #32168	; 0x7da8
   118e8:	movt	r1, #1
   118ec:	mov	r0, #0
   118f0:	bl	10d48 <dcgettext@plt>
   118f4:	mov	r1, r0
   118f8:	movw	r3, #31484	; 0x7afc
   118fc:	movt	r3, #1
   11900:	movw	r2, #32036	; 0x7d24
   11904:	movt	r2, #1
   11908:	mov	r0, #1
   1190c:	bl	10e50 <__printf_chk@plt>
   11910:	mov	r2, #5
   11914:	movw	r1, #32196	; 0x7dc4
   11918:	movt	r1, #1
   1191c:	mov	r0, #0
   11920:	bl	10d48 <dcgettext@plt>
   11924:	movw	r2, #32324	; 0x7e44
   11928:	movt	r2, #1
   1192c:	cmp	r4, r5
   11930:	movw	r3, #31564	; 0x7b4c
   11934:	movt	r3, #1
   11938:	mov	r1, r0
   1193c:	moveq	r3, r2
   11940:	mov	r2, r4
   11944:	mov	r0, #1
   11948:	bl	10e50 <__printf_chk@plt>
   1194c:	b	1172c <__assert_fail@plt+0x828>
   11950:	ldr	r1, [r4, #8]!
   11954:	cmp	r1, #0
   11958:	beq	11868 <__assert_fail@plt+0x964>
   1195c:	mov	r0, r5
   11960:	bl	10cb8 <strcmp@plt>
   11964:	cmp	r0, #0
   11968:	bne	11950 <__assert_fail@plt+0xa4c>
   1196c:	b	11868 <__assert_fail@plt+0x964>
   11970:	mov	r0, r4
   11974:	bl	10d48 <dcgettext@plt>
   11978:	mov	r1, r0
   1197c:	movw	r3, #32036	; 0x7d24
   11980:	movt	r3, #1
   11984:	movw	r2, #32076	; 0x7d4c
   11988:	movt	r2, #1
   1198c:	mov	r0, #1
   11990:	bl	10e50 <__printf_chk@plt>
   11994:	mov	r1, r4
   11998:	mov	r0, #5
   1199c:	bl	10ea4 <setlocale@plt>
   119a0:	cmp	r0, #0
   119a4:	beq	119c0 <__assert_fail@plt+0xabc>
   119a8:	movw	r1, #32092	; 0x7d5c
   119ac:	movt	r1, #1
   119b0:	mov	r2, #3
   119b4:	bl	10eec <strncmp@plt>
   119b8:	cmp	r0, #0
   119bc:	bne	11a1c <__assert_fail@plt+0xb18>
   119c0:	mov	r2, #5
   119c4:	movw	r1, #32168	; 0x7da8
   119c8:	movt	r1, #1
   119cc:	mov	r0, #0
   119d0:	bl	10d48 <dcgettext@plt>
   119d4:	mov	r1, r0
   119d8:	movw	r3, #31484	; 0x7afc
   119dc:	movt	r3, #1
   119e0:	movw	r2, #32036	; 0x7d24
   119e4:	movt	r2, #1
   119e8:	mov	r0, #1
   119ec:	bl	10e50 <__printf_chk@plt>
   119f0:	movw	r1, #32196	; 0x7dc4
   119f4:	movt	r1, #1
   119f8:	mov	r2, #5
   119fc:	mov	r0, #0
   11a00:	bl	10d48 <dcgettext@plt>
   11a04:	movw	r4, #31484	; 0x7afc
   11a08:	movt	r4, #1
   11a0c:	movw	r3, #32324	; 0x7e44
   11a10:	movt	r3, #1
   11a14:	mov	r1, r0
   11a18:	b	11940 <__assert_fail@plt+0xa3c>
   11a1c:	movw	r5, #31484	; 0x7afc
   11a20:	movt	r5, #1
   11a24:	mov	r4, r5
   11a28:	mov	r2, #5
   11a2c:	movw	r1, #32096	; 0x7d60
   11a30:	movt	r1, #1
   11a34:	mov	r0, #0
   11a38:	bl	10d48 <dcgettext@plt>
   11a3c:	ldr	r1, [r7]
   11a40:	bl	10cac <fputs_unlocked@plt>
   11a44:	b	118e0 <__assert_fail@plt+0x9dc>
   11a48:	movw	r3, #37224	; 0x9168
   11a4c:	movt	r3, #2
   11a50:	str	r0, [r3]
   11a54:	bx	lr
   11a58:	movw	r3, #37224	; 0x9168
   11a5c:	movt	r3, #2
   11a60:	strb	r0, [r3, #4]
   11a64:	bx	lr
   11a68:	movw	r3, #37196	; 0x914c
   11a6c:	movt	r3, #2
   11a70:	strd	r4, [sp, #-16]!
   11a74:	ldr	r0, [r3]
   11a78:	str	r6, [sp, #8]
   11a7c:	str	lr, [sp, #12]
   11a80:	sub	sp, sp, #8
   11a84:	bl	176b8 <__assert_fail@plt+0x67b4>
   11a88:	cmp	r0, #0
   11a8c:	beq	11ab8 <__assert_fail@plt+0xbb4>
   11a90:	movw	r4, #37224	; 0x9168
   11a94:	movt	r4, #2
   11a98:	ldrb	r6, [r4, #4]
   11a9c:	bl	10e2c <__errno_location@plt>
   11aa0:	mov	r5, r0
   11aa4:	cmp	r6, #0
   11aa8:	beq	11ae4 <__assert_fail@plt+0xbe0>
   11aac:	ldr	r3, [r0]
   11ab0:	cmp	r3, #32
   11ab4:	bne	11ae4 <__assert_fail@plt+0xbe0>
   11ab8:	movw	r3, #37184	; 0x9140
   11abc:	movt	r3, #2
   11ac0:	ldr	r0, [r3]
   11ac4:	bl	176b8 <__assert_fail@plt+0x67b4>
   11ac8:	cmp	r0, #0
   11acc:	bne	11b2c <__assert_fail@plt+0xc28>
   11ad0:	add	sp, sp, #8
   11ad4:	ldrd	r4, [sp]
   11ad8:	ldr	r6, [sp, #8]
   11adc:	add	sp, sp, #12
   11ae0:	pop	{pc}		; (ldr pc, [sp], #4)
   11ae4:	movw	r1, #32480	; 0x7ee0
   11ae8:	movt	r1, #1
   11aec:	mov	r2, #5
   11af0:	mov	r0, #0
   11af4:	bl	10d48 <dcgettext@plt>
   11af8:	mov	r6, r0
   11afc:	ldr	r0, [r4]
   11b00:	cmp	r0, #0
   11b04:	beq	11b3c <__assert_fail@plt+0xc38>
   11b08:	ldr	r4, [r5]
   11b0c:	bl	14b80 <__assert_fail@plt+0x3c7c>
   11b10:	mov	r3, r0
   11b14:	movw	r2, #32492	; 0x7eec
   11b18:	movt	r2, #1
   11b1c:	mov	r0, #0
   11b20:	str	r6, [sp]
   11b24:	mov	r1, r4
   11b28:	bl	10db4 <error@plt>
   11b2c:	movw	r3, #37100	; 0x90ec
   11b30:	movt	r3, #2
   11b34:	ldr	r0, [r3]
   11b38:	bl	10cf4 <_exit@plt>
   11b3c:	mov	r3, r6
   11b40:	movw	r2, #32496	; 0x7ef0
   11b44:	movt	r2, #1
   11b48:	ldr	r1, [r5]
   11b4c:	bl	10db4 <error@plt>
   11b50:	b	11b2c <__assert_fail@plt+0xc28>
   11b54:	b	10cc4 <posix_fadvise64@plt>
   11b58:	cmp	r0, #0
   11b5c:	bxeq	lr
   11b60:	str	r4, [sp, #-16]!
   11b64:	mov	r4, r1
   11b68:	strd	r6, [sp, #4]
   11b6c:	mov	r6, #0
   11b70:	mov	r7, #0
   11b74:	str	lr, [sp, #12]
   11b78:	sub	sp, sp, #16
   11b7c:	bl	10e5c <fileno@plt>
   11b80:	mov	r2, r6
   11b84:	mov	r3, r7
   11b88:	strd	r6, [sp]
   11b8c:	str	r4, [sp, #8]
   11b90:	bl	10cc4 <posix_fadvise64@plt>
   11b94:	add	sp, sp, #16
   11b98:	ldr	r4, [sp]
   11b9c:	ldrd	r6, [sp, #4]
   11ba0:	add	sp, sp, #12
   11ba4:	pop	{pc}		; (ldr pc, [sp], #4)
   11ba8:	strd	r4, [sp, #-12]!
   11bac:	mov	r4, r0
   11bb0:	str	lr, [sp, #8]
   11bb4:	sub	sp, sp, #12
   11bb8:	bl	10e5c <fileno@plt>
   11bbc:	cmp	r0, #0
   11bc0:	mov	r0, r4
   11bc4:	blt	11c48 <__assert_fail@plt+0xd44>
   11bc8:	bl	10dd8 <__freading@plt>
   11bcc:	cmp	r0, #0
   11bd0:	bne	11c14 <__assert_fail@plt+0xd10>
   11bd4:	mov	r0, r4
   11bd8:	bl	11c5c <__assert_fail@plt+0xd58>
   11bdc:	cmp	r0, #0
   11be0:	beq	11c44 <__assert_fail@plt+0xd40>
   11be4:	bl	10e2c <__errno_location@plt>
   11be8:	mov	r5, r0
   11bec:	mov	r0, r4
   11bf0:	ldr	r4, [r5]
   11bf4:	bl	10e74 <fclose@plt>
   11bf8:	cmp	r4, #0
   11bfc:	mvnne	r0, #0
   11c00:	strne	r4, [r5]
   11c04:	add	sp, sp, #12
   11c08:	ldrd	r4, [sp]
   11c0c:	add	sp, sp, #8
   11c10:	pop	{pc}		; (ldr pc, [sp], #4)
   11c14:	mov	r0, r4
   11c18:	bl	10e5c <fileno@plt>
   11c1c:	mov	r1, #1
   11c20:	mov	r2, #0
   11c24:	mov	r3, #0
   11c28:	str	r1, [sp]
   11c2c:	bl	10d84 <lseek64@plt>
   11c30:	mvn	r3, #0
   11c34:	mvn	r2, #0
   11c38:	cmp	r1, r3
   11c3c:	cmpeq	r0, r2
   11c40:	bne	11bd4 <__assert_fail@plt+0xcd0>
   11c44:	mov	r0, r4
   11c48:	add	sp, sp, #12
   11c4c:	ldrd	r4, [sp]
   11c50:	ldr	lr, [sp, #8]
   11c54:	add	sp, sp, #12
   11c58:	b	10e74 <fclose@plt>
   11c5c:	str	r4, [sp, #-8]!
   11c60:	subs	r4, r0, #0
   11c64:	str	lr, [sp, #4]
   11c68:	sub	sp, sp, #8
   11c6c:	beq	11c88 <__assert_fail@plt+0xd84>
   11c70:	bl	10dd8 <__freading@plt>
   11c74:	cmp	r0, #0
   11c78:	beq	11c88 <__assert_fail@plt+0xd84>
   11c7c:	ldr	r3, [r4]
   11c80:	tst	r3, #256	; 0x100
   11c84:	bne	11ca0 <__assert_fail@plt+0xd9c>
   11c88:	mov	r0, r4
   11c8c:	add	sp, sp, #8
   11c90:	ldr	r4, [sp]
   11c94:	ldr	lr, [sp, #4]
   11c98:	add	sp, sp, #8
   11c9c:	b	10cd0 <fflush@plt>
   11ca0:	mov	r1, #1
   11ca4:	mov	r2, #0
   11ca8:	mov	r3, #0
   11cac:	mov	r0, r4
   11cb0:	str	r1, [sp]
   11cb4:	bl	11cbc <__assert_fail@plt+0xdb8>
   11cb8:	b	11c88 <__assert_fail@plt+0xd84>
   11cbc:	strd	r4, [sp, #-24]!	; 0xffffffe8
   11cc0:	mov	r4, r0
   11cc4:	ldr	ip, [r0, #4]
   11cc8:	strd	r6, [sp, #8]
   11ccc:	str	lr, [sp, #20]
   11cd0:	ldr	lr, [r0, #8]
   11cd4:	str	r8, [sp, #16]
   11cd8:	sub	sp, sp, #8
   11cdc:	ldr	r5, [sp, #32]
   11ce0:	cmp	lr, ip
   11ce4:	beq	11d0c <__assert_fail@plt+0xe08>
   11ce8:	mov	r0, r4
   11cec:	str	r5, [sp, #32]
   11cf0:	add	sp, sp, #8
   11cf4:	ldrd	r4, [sp]
   11cf8:	ldrd	r6, [sp, #8]
   11cfc:	ldr	r8, [sp, #16]
   11d00:	ldr	lr, [sp, #20]
   11d04:	add	sp, sp, #24
   11d08:	b	10e80 <fseeko64@plt>
   11d0c:	ldr	ip, [r0, #16]
   11d10:	ldr	lr, [r0, #20]
   11d14:	cmp	lr, ip
   11d18:	bne	11ce8 <__assert_fail@plt+0xde4>
   11d1c:	ldr	r8, [r0, #36]	; 0x24
   11d20:	cmp	r8, #0
   11d24:	bne	11ce8 <__assert_fail@plt+0xde4>
   11d28:	mov	r6, r2
   11d2c:	mov	r7, r3
   11d30:	bl	10e5c <fileno@plt>
   11d34:	mov	r2, r6
   11d38:	mov	r3, r7
   11d3c:	str	r5, [sp]
   11d40:	bl	10d84 <lseek64@plt>
   11d44:	mvn	r3, #0
   11d48:	mvn	r2, #0
   11d4c:	cmp	r1, r3
   11d50:	cmpeq	r0, r2
   11d54:	beq	11d84 <__assert_fail@plt+0xe80>
   11d58:	ldr	r3, [r4]
   11d5c:	strd	r0, [r4, #80]	; 0x50
   11d60:	bic	r3, r3, #16
   11d64:	str	r3, [r4]
   11d68:	mov	r0, r8
   11d6c:	add	sp, sp, #8
   11d70:	ldrd	r4, [sp]
   11d74:	ldrd	r6, [sp, #8]
   11d78:	ldr	r8, [sp, #16]
   11d7c:	add	sp, sp, #20
   11d80:	pop	{pc}		; (ldr pc, [sp], #4)
   11d84:	mvn	r8, #0
   11d88:	b	11d68 <__assert_fail@plt+0xe64>
   11d8c:	strd	r4, [sp, #-16]!
   11d90:	subs	r4, r0, #0
   11d94:	str	r6, [sp, #8]
   11d98:	str	lr, [sp, #12]
   11d9c:	beq	11e34 <__assert_fail@plt+0xf30>
   11da0:	mov	r1, #47	; 0x2f
   11da4:	bl	10eb0 <strrchr@plt>
   11da8:	subs	r5, r0, #0
   11dac:	beq	11e0c <__assert_fail@plt+0xf08>
   11db0:	add	r6, r5, #1
   11db4:	sub	r3, r6, r4
   11db8:	cmp	r3, #6
   11dbc:	ble	11e0c <__assert_fail@plt+0xf08>
   11dc0:	movw	r1, #32556	; 0x7f2c
   11dc4:	movt	r1, #1
   11dc8:	mov	r2, #7
   11dcc:	sub	r0, r5, #6
   11dd0:	bl	10eec <strncmp@plt>
   11dd4:	cmp	r0, #0
   11dd8:	bne	11e0c <__assert_fail@plt+0xf08>
   11ddc:	movw	r1, #32564	; 0x7f34
   11de0:	movt	r1, #1
   11de4:	mov	r2, #3
   11de8:	mov	r0, r6
   11dec:	bl	10eec <strncmp@plt>
   11df0:	cmp	r0, #0
   11df4:	movne	r4, r6
   11df8:	bne	11e0c <__assert_fail@plt+0xf08>
   11dfc:	add	r4, r5, #4
   11e00:	movw	r3, #37168	; 0x9130
   11e04:	movt	r3, #2
   11e08:	str	r4, [r3]
   11e0c:	movw	r2, #37232	; 0x9170
   11e10:	movt	r2, #2
   11e14:	ldr	r6, [sp, #8]
   11e18:	movw	r3, #37172	; 0x9134
   11e1c:	movt	r3, #2
   11e20:	str	r4, [r2]
   11e24:	str	r4, [r3]
   11e28:	ldrd	r4, [sp]
   11e2c:	add	sp, sp, #12
   11e30:	pop	{pc}		; (ldr pc, [sp], #4)
   11e34:	movw	r3, #37184	; 0x9140
   11e38:	movt	r3, #2
   11e3c:	movw	r0, #32500	; 0x7ef4
   11e40:	movt	r0, #1
   11e44:	ldr	r3, [r3]
   11e48:	mov	r2, #55	; 0x37
   11e4c:	mov	r1, #1
   11e50:	bl	10d78 <fwrite@plt>
   11e54:	bl	10ef8 <abort@plt>
   11e58:	mov	r2, #5
   11e5c:	strd	r4, [sp, #-16]!
   11e60:	mov	r5, r0
   11e64:	str	r6, [sp, #8]
   11e68:	mov	r6, r1
   11e6c:	mov	r1, r0
   11e70:	mov	r0, #0
   11e74:	str	lr, [sp, #12]
   11e78:	bl	10d48 <dcgettext@plt>
   11e7c:	cmp	r5, r0
   11e80:	mov	r4, r0
   11e84:	beq	11e9c <__assert_fail@plt+0xf98>
   11e88:	mov	r0, r4
   11e8c:	ldrd	r4, [sp]
   11e90:	ldr	r6, [sp, #8]
   11e94:	add	sp, sp, #12
   11e98:	pop	{pc}		; (ldr pc, [sp], #4)
   11e9c:	bl	177a0 <__assert_fail@plt+0x689c>
   11ea0:	ldrb	r3, [r0]
   11ea4:	bic	r3, r3, #32
   11ea8:	cmp	r3, #85	; 0x55
   11eac:	bne	11f14 <__assert_fail@plt+0x1010>
   11eb0:	ldrb	r3, [r0, #1]
   11eb4:	bic	r3, r3, #32
   11eb8:	cmp	r3, #84	; 0x54
   11ebc:	bne	11f94 <__assert_fail@plt+0x1090>
   11ec0:	ldrb	r3, [r0, #2]
   11ec4:	bic	r3, r3, #32
   11ec8:	cmp	r3, #70	; 0x46
   11ecc:	bne	11f94 <__assert_fail@plt+0x1090>
   11ed0:	ldrb	r3, [r0, #3]
   11ed4:	cmp	r3, #45	; 0x2d
   11ed8:	bne	11f94 <__assert_fail@plt+0x1090>
   11edc:	ldrb	r3, [r0, #4]
   11ee0:	cmp	r3, #56	; 0x38
   11ee4:	bne	11f94 <__assert_fail@plt+0x1090>
   11ee8:	ldrb	r3, [r0, #5]
   11eec:	cmp	r3, #0
   11ef0:	bne	11f94 <__assert_fail@plt+0x1090>
   11ef4:	ldrb	r2, [r4]
   11ef8:	movw	r3, #32656	; 0x7f90
   11efc:	movt	r3, #1
   11f00:	movw	r4, #32668	; 0x7f9c
   11f04:	movt	r4, #1
   11f08:	cmp	r2, #96	; 0x60
   11f0c:	movne	r4, r3
   11f10:	b	11e88 <__assert_fail@plt+0xf84>
   11f14:	cmp	r3, #71	; 0x47
   11f18:	bne	11f94 <__assert_fail@plt+0x1090>
   11f1c:	ldrb	r3, [r0, #1]
   11f20:	bic	r3, r3, #32
   11f24:	cmp	r3, #66	; 0x42
   11f28:	bne	11f94 <__assert_fail@plt+0x1090>
   11f2c:	ldrb	r3, [r0, #2]
   11f30:	cmp	r3, #49	; 0x31
   11f34:	bne	11f94 <__assert_fail@plt+0x1090>
   11f38:	ldrb	r3, [r0, #3]
   11f3c:	cmp	r3, #56	; 0x38
   11f40:	bne	11f94 <__assert_fail@plt+0x1090>
   11f44:	ldrb	r3, [r0, #4]
   11f48:	cmp	r3, #48	; 0x30
   11f4c:	bne	11f94 <__assert_fail@plt+0x1090>
   11f50:	ldrb	r3, [r0, #5]
   11f54:	cmp	r3, #51	; 0x33
   11f58:	bne	11f94 <__assert_fail@plt+0x1090>
   11f5c:	ldrb	r3, [r0, #6]
   11f60:	cmp	r3, #48	; 0x30
   11f64:	bne	11f94 <__assert_fail@plt+0x1090>
   11f68:	ldrb	r3, [r0, #7]
   11f6c:	cmp	r3, #0
   11f70:	bne	11f94 <__assert_fail@plt+0x1090>
   11f74:	ldrb	r2, [r4]
   11f78:	movw	r3, #32660	; 0x7f94
   11f7c:	movt	r3, #1
   11f80:	movw	r4, #32664	; 0x7f98
   11f84:	movt	r4, #1
   11f88:	cmp	r2, #96	; 0x60
   11f8c:	movne	r4, r3
   11f90:	b	11e88 <__assert_fail@plt+0xf84>
   11f94:	movw	r3, #32672	; 0x7fa0
   11f98:	movt	r3, #1
   11f9c:	cmp	r6, #9
   11fa0:	movw	r4, #32652	; 0x7f8c
   11fa4:	movt	r4, #1
   11fa8:	movne	r4, r3
   11fac:	b	11e88 <__assert_fail@plt+0xf84>
   11fb0:	strd	r4, [sp, #-36]!	; 0xffffffdc
   11fb4:	strd	r6, [sp, #8]
   11fb8:	strd	r8, [sp, #16]
   11fbc:	mov	r8, r3
   11fc0:	strd	sl, [sp, #24]
   11fc4:	mov	fp, r0
   11fc8:	mov	sl, r1
   11fcc:	str	lr, [sp, #32]
   11fd0:	sub	sp, sp, #140	; 0x8c
   11fd4:	ldr	r3, [sp, #180]	; 0xb4
   11fd8:	str	r2, [sp, #28]
   11fdc:	and	r4, r3, #2
   11fe0:	ubfx	r3, r3, #1, #1
   11fe4:	str	r3, [sp, #44]	; 0x2c
   11fe8:	bl	10d90 <__ctype_get_mb_cur_max@plt>
   11fec:	ldr	r3, [sp, #176]	; 0xb0
   11ff0:	str	r0, [sp, #76]	; 0x4c
   11ff4:	cmp	r3, #10
   11ff8:	ldrls	pc, [pc, r3, lsl #2]
   11ffc:	b	13998 <__assert_fail@plt+0x2a94>
   12000:	andeq	r2, r1, r0, lsl #9
   12004:	muleq	r1, ip, r5
   12008:	andeq	r2, r1, r8, lsl fp
   1200c:	andeq	r2, r1, r8, lsl #12
   12010:	andeq	r2, r1, r8, lsl #7
   12014:	andeq	r2, r1, r4, lsl #8
   12018:	ldrdeq	r2, [r1], -ip
   1201c:	andeq	r2, r1, r4, asr #10
   12020:	andeq	r2, r1, ip, lsr #32
   12024:	andeq	r2, r1, ip, lsr #32
   12028:	andeq	r2, r1, ip, lsr #32
   1202c:	ldr	r3, [sp, #176]	; 0xb0
   12030:	cmp	r3, #10
   12034:	beq	12060 <__assert_fail@plt+0x115c>
   12038:	mov	r1, r3
   1203c:	movw	r0, #32676	; 0x7fa4
   12040:	movt	r0, #1
   12044:	bl	11e58 <__assert_fail@plt+0xf54>
   12048:	str	r0, [sp, #188]	; 0xbc
   1204c:	movw	r0, #32672	; 0x7fa0
   12050:	movt	r0, #1
   12054:	ldr	r1, [sp, #176]	; 0xb0
   12058:	bl	11e58 <__assert_fail@plt+0xf54>
   1205c:	str	r0, [sp, #192]	; 0xc0
   12060:	cmp	r4, #0
   12064:	movne	r4, #0
   12068:	beq	13724 <__assert_fail@plt+0x2820>
   1206c:	mov	r5, #0
   12070:	ldr	r0, [sp, #192]	; 0xc0
   12074:	mov	r9, r5
   12078:	str	r5, [sp, #64]	; 0x40
   1207c:	bl	10e14 <strlen@plt>
   12080:	mov	r3, #1
   12084:	ldr	r2, [sp, #44]	; 0x2c
   12088:	cmp	r0, r5
   1208c:	moveq	r2, r5
   12090:	str	r3, [sp, #32]
   12094:	str	r3, [sp, #48]	; 0x30
   12098:	str	r5, [sp, #52]	; 0x34
   1209c:	str	r3, [sp, #60]	; 0x3c
   120a0:	ldr	r3, [sp, #180]	; 0xb4
   120a4:	str	r0, [sp, #56]	; 0x38
   120a8:	str	r5, [sp, #68]	; 0x44
   120ac:	str	r5, [sp, #80]	; 0x50
   120b0:	str	r5, [sp, #84]	; 0x54
   120b4:	and	r3, r3, #1
   120b8:	str	r2, [sp, #88]	; 0x58
   120bc:	str	r3, [sp, #92]	; 0x5c
   120c0:	ldr	r3, [sp, #180]	; 0xb4
   120c4:	and	r3, r3, #4
   120c8:	str	r3, [sp, #96]	; 0x60
   120cc:	ldr	r3, [sp, #192]	; 0xc0
   120d0:	str	r3, [sp, #72]	; 0x48
   120d4:	mov	r3, fp
   120d8:	mov	r7, #0
   120dc:	mov	fp, r9
   120e0:	mov	r9, r3
   120e4:	cmn	r8, #1
   120e8:	beq	126ec <__assert_fail@plt+0x17e8>
   120ec:	subs	r6, r8, r7
   120f0:	movne	r6, #1
   120f4:	cmp	r6, #0
   120f8:	beq	12704 <__assert_fail@plt+0x1800>
   120fc:	ldr	r0, [sp, #28]
   12100:	ldr	r3, [sp, #48]	; 0x30
   12104:	cmp	r3, #0
   12108:	add	r3, r0, r7
   1210c:	str	r3, [sp, #36]	; 0x24
   12110:	beq	12b90 <__assert_fail@plt+0x1c8c>
   12114:	ldr	r2, [sp, #56]	; 0x38
   12118:	cmp	r2, #0
   1211c:	beq	13090 <__assert_fail@plt+0x218c>
   12120:	cmp	r2, #1
   12124:	mov	r3, r2
   12128:	movls	r3, #0
   1212c:	movhi	r3, #1
   12130:	cmn	r8, #1
   12134:	add	r5, r7, r2
   12138:	movne	r3, #0
   1213c:	cmp	r3, #0
   12140:	beq	1214c <__assert_fail@plt+0x1248>
   12144:	bl	10e14 <strlen@plt>
   12148:	mov	r8, r0
   1214c:	cmp	r5, r8
   12150:	bhi	13090 <__assert_fail@plt+0x218c>
   12154:	ldr	r0, [sp, #36]	; 0x24
   12158:	ldr	r2, [sp, #56]	; 0x38
   1215c:	ldr	r1, [sp, #72]	; 0x48
   12160:	bl	10d30 <memcmp@plt>
   12164:	cmp	r0, #0
   12168:	bne	13090 <__assert_fail@plt+0x218c>
   1216c:	ldr	r3, [sp, #44]	; 0x2c
   12170:	cmp	r3, #0
   12174:	bne	1383c <__assert_fail@plt+0x2938>
   12178:	ldr	r3, [sp, #36]	; 0x24
   1217c:	ldrb	r5, [r3]
   12180:	cmp	r5, #126	; 0x7e
   12184:	ldrls	pc, [pc, r5, lsl #2]
   12188:	b	13624 <__assert_fail@plt+0x2720>
   1218c:	andeq	r2, r1, r0, ror #16
   12190:	andeq	r3, r1, r4, lsr #12
   12194:	andeq	r3, r1, r4, lsr #12
   12198:	andeq	r3, r1, r4, lsr #12
   1219c:	andeq	r3, r1, r4, lsr #12
   121a0:	andeq	r3, r1, r4, lsr #12
   121a4:	andeq	r3, r1, r4, lsr #12
   121a8:			; <UNDEFINED> instruction: 0x000127b8
   121ac:			; <UNDEFINED> instruction: 0x000127b0
   121b0:	andeq	r2, r1, r0, asr #15
   121b4:	andeq	r2, r1, r4, asr #18
   121b8:	andeq	r2, r1, r4, lsr r9
   121bc:	andeq	r2, r1, ip, asr r6
   121c0:	andeq	r2, r1, r0, lsl r9
   121c4:	andeq	r3, r1, r4, lsr #12
   121c8:	andeq	r3, r1, r4, lsr #12
   121cc:	andeq	r3, r1, r4, lsr #12
   121d0:	andeq	r3, r1, r4, lsr #12
   121d4:	andeq	r3, r1, r4, lsr #12
   121d8:	andeq	r3, r1, r4, lsr #12
   121dc:	andeq	r3, r1, r4, lsr #12
   121e0:	andeq	r3, r1, r4, lsr #12
   121e4:	andeq	r3, r1, r4, lsr #12
   121e8:	andeq	r3, r1, r4, lsr #12
   121ec:	andeq	r3, r1, r4, lsr #12
   121f0:	andeq	r3, r1, r4, lsr #12
   121f4:	andeq	r3, r1, r4, lsr #12
   121f8:	andeq	r3, r1, r4, lsr #12
   121fc:	andeq	r3, r1, r4, lsr #12
   12200:	andeq	r3, r1, r4, lsr #12
   12204:	andeq	r3, r1, r4, lsr #12
   12208:	andeq	r3, r1, r4, lsr #12
   1220c:			; <UNDEFINED> instruction: 0x000129bc
   12210:			; <UNDEFINED> instruction: 0x000129b0
   12214:			; <UNDEFINED> instruction: 0x000129b0
   12218:	andeq	r2, r1, r4, lsr #19
   1221c:			; <UNDEFINED> instruction: 0x000129b0
   12220:	andeq	r2, r1, r8, lsl #21
   12224:			; <UNDEFINED> instruction: 0x000129b0
   12228:	strdeq	r2, [r1], -r8
   1222c:			; <UNDEFINED> instruction: 0x000129b0
   12230:			; <UNDEFINED> instruction: 0x000129b0
   12234:			; <UNDEFINED> instruction: 0x000129b0
   12238:	andeq	r2, r1, r8, lsl #21
   1223c:	andeq	r2, r1, r8, lsl #21
   12240:	andeq	r2, r1, r8, lsl #21
   12244:	andeq	r2, r1, r8, lsl #21
   12248:	andeq	r2, r1, r8, lsl #21
   1224c:	andeq	r2, r1, r8, lsl #21
   12250:	andeq	r2, r1, r8, lsl #21
   12254:	andeq	r2, r1, r8, lsl #21
   12258:	andeq	r2, r1, r8, lsl #21
   1225c:	andeq	r2, r1, r8, lsl #21
   12260:	andeq	r2, r1, r8, lsl #21
   12264:	andeq	r2, r1, r8, lsl #21
   12268:	andeq	r2, r1, r8, lsl #21
   1226c:	andeq	r2, r1, r8, lsl #21
   12270:	andeq	r2, r1, r8, lsl #21
   12274:	andeq	r2, r1, r8, lsl #21
   12278:			; <UNDEFINED> instruction: 0x000129b0
   1227c:			; <UNDEFINED> instruction: 0x000129b0
   12280:			; <UNDEFINED> instruction: 0x000129b0
   12284:			; <UNDEFINED> instruction: 0x000129b0
   12288:	andeq	r2, r1, r8, lsr #21
   1228c:	andeq	r3, r1, r4, lsr #12
   12290:	andeq	r2, r1, r8, lsl #21
   12294:	andeq	r2, r1, r8, lsl #21
   12298:	andeq	r2, r1, r8, lsl #21
   1229c:	andeq	r2, r1, r8, lsl #21
   122a0:	andeq	r2, r1, r8, lsl #21
   122a4:	andeq	r2, r1, r8, lsl #21
   122a8:	andeq	r2, r1, r8, lsl #21
   122ac:	andeq	r2, r1, r8, lsl #21
   122b0:	andeq	r2, r1, r8, lsl #21
   122b4:	andeq	r2, r1, r8, lsl #21
   122b8:	andeq	r2, r1, r8, lsl #21
   122bc:	andeq	r2, r1, r8, lsl #21
   122c0:	andeq	r2, r1, r8, lsl #21
   122c4:	andeq	r2, r1, r8, lsl #21
   122c8:	andeq	r2, r1, r8, lsl #21
   122cc:	andeq	r2, r1, r8, lsl #21
   122d0:	andeq	r2, r1, r8, lsl #21
   122d4:	andeq	r2, r1, r8, lsl #21
   122d8:	andeq	r2, r1, r8, lsl #21
   122dc:	andeq	r2, r1, r8, lsl #21
   122e0:	andeq	r2, r1, r8, lsl #21
   122e4:	andeq	r2, r1, r8, lsl #21
   122e8:	andeq	r2, r1, r8, lsl #21
   122ec:	andeq	r2, r1, r8, lsl #21
   122f0:	andeq	r2, r1, r8, lsl #21
   122f4:	andeq	r2, r1, r8, lsl #21
   122f8:			; <UNDEFINED> instruction: 0x000129b0
   122fc:	andeq	r2, r1, ip, asr #20
   12300:	andeq	r2, r1, r8, lsl #21
   12304:			; <UNDEFINED> instruction: 0x000129b0
   12308:	andeq	r2, r1, r8, lsl #21
   1230c:			; <UNDEFINED> instruction: 0x000129b0
   12310:	andeq	r2, r1, r8, lsl #21
   12314:	andeq	r2, r1, r8, lsl #21
   12318:	andeq	r2, r1, r8, lsl #21
   1231c:	andeq	r2, r1, r8, lsl #21
   12320:	andeq	r2, r1, r8, lsl #21
   12324:	andeq	r2, r1, r8, lsl #21
   12328:	andeq	r2, r1, r8, lsl #21
   1232c:	andeq	r2, r1, r8, lsl #21
   12330:	andeq	r2, r1, r8, lsl #21
   12334:	andeq	r2, r1, r8, lsl #21
   12338:	andeq	r2, r1, r8, lsl #21
   1233c:	andeq	r2, r1, r8, lsl #21
   12340:	andeq	r2, r1, r8, lsl #21
   12344:	andeq	r2, r1, r8, lsl #21
   12348:	andeq	r2, r1, r8, lsl #21
   1234c:	andeq	r2, r1, r8, lsl #21
   12350:	andeq	r2, r1, r8, lsl #21
   12354:	andeq	r2, r1, r8, lsl #21
   12358:	andeq	r2, r1, r8, lsl #21
   1235c:	andeq	r2, r1, r8, lsl #21
   12360:	andeq	r2, r1, r8, lsl #21
   12364:	andeq	r2, r1, r8, lsl #21
   12368:	andeq	r2, r1, r8, lsl #21
   1236c:	andeq	r2, r1, r8, lsl #21
   12370:	andeq	r2, r1, r8, lsl #21
   12374:	andeq	r2, r1, r8, lsl #21
   12378:	andeq	r2, r1, r8, asr r9
   1237c:			; <UNDEFINED> instruction: 0x000129b0
   12380:	andeq	r2, r1, r8, asr r9
   12384:	andeq	r2, r1, r4, lsr #19
   12388:	ldr	r3, [sp, #180]	; 0xb4
   1238c:	cmp	r4, #0
   12390:	and	r3, r3, #1
   12394:	str	r3, [sp, #92]	; 0x5c
   12398:	ldr	r3, [sp, #180]	; 0xb4
   1239c:	and	r3, r3, #4
   123a0:	str	r3, [sp, #96]	; 0x60
   123a4:	moveq	r3, #1
   123a8:	streq	r3, [sp, #60]	; 0x3c
   123ac:	beq	12b3c <__assert_fail@plt+0x1c38>
   123b0:	mov	r3, #0
   123b4:	mov	r2, #1
   123b8:	mov	r4, r3
   123bc:	mov	r9, r3
   123c0:	str	r2, [sp, #32]
   123c4:	str	r2, [sp, #44]	; 0x2c
   123c8:	str	r3, [sp, #48]	; 0x30
   123cc:	str	r2, [sp, #52]	; 0x34
   123d0:	str	r2, [sp, #56]	; 0x38
   123d4:	str	r3, [sp, #60]	; 0x3c
   123d8:	str	r2, [sp, #64]	; 0x40
   123dc:	str	r2, [sp, #68]	; 0x44
   123e0:	str	r3, [sp, #80]	; 0x50
   123e4:	str	r3, [sp, #84]	; 0x54
   123e8:	str	r3, [sp, #88]	; 0x58
   123ec:	movw	r3, #32672	; 0x7fa0
   123f0:	movt	r3, #1
   123f4:	str	r3, [sp, #72]	; 0x48
   123f8:	mov	r3, #2
   123fc:	str	r3, [sp, #176]	; 0xb0
   12400:	b	120d4 <__assert_fail@plt+0x11d0>
   12404:	ldr	r3, [sp, #180]	; 0xb4
   12408:	cmp	r4, #0
   1240c:	and	r3, r3, #1
   12410:	str	r3, [sp, #92]	; 0x5c
   12414:	ldr	r3, [sp, #180]	; 0xb4
   12418:	and	r3, r3, #4
   1241c:	str	r3, [sp, #96]	; 0x60
   12420:	bne	137f4 <__assert_fail@plt+0x28f0>
   12424:	cmp	sl, #0
   12428:	beq	135a0 <__assert_fail@plt+0x269c>
   1242c:	mov	r3, #34	; 0x22
   12430:	mov	r2, r4
   12434:	mov	r1, #1
   12438:	mov	r9, r2
   1243c:	strb	r3, [fp]
   12440:	movw	r3, #32652	; 0x7f8c
   12444:	movt	r3, #1
   12448:	mov	r4, r1
   1244c:	str	r1, [sp, #32]
   12450:	str	r2, [sp, #44]	; 0x2c
   12454:	str	r1, [sp, #48]	; 0x30
   12458:	str	r2, [sp, #52]	; 0x34
   1245c:	str	r1, [sp, #56]	; 0x38
   12460:	str	r1, [sp, #60]	; 0x3c
   12464:	str	r2, [sp, #64]	; 0x40
   12468:	str	r2, [sp, #68]	; 0x44
   1246c:	str	r3, [sp, #72]	; 0x48
   12470:	str	r2, [sp, #80]	; 0x50
   12474:	str	r2, [sp, #84]	; 0x54
   12478:	str	r2, [sp, #88]	; 0x58
   1247c:	b	120d4 <__assert_fail@plt+0x11d0>
   12480:	mov	r3, #0
   12484:	mov	r2, #1
   12488:	mov	r9, r3
   1248c:	str	r2, [sp, #32]
   12490:	str	r3, [sp, #44]	; 0x2c
   12494:	str	r3, [sp, #48]	; 0x30
   12498:	str	r3, [sp, #52]	; 0x34
   1249c:	str	r3, [sp, #60]	; 0x3c
   124a0:	strd	r2, [sp, #64]	; 0x40
   124a4:	str	r3, [sp, #72]	; 0x48
   124a8:	str	r3, [sp, #80]	; 0x50
   124ac:	str	r3, [sp, #88]	; 0x58
   124b0:	ldr	r3, [sp, #180]	; 0xb4
   124b4:	and	r3, r3, r2
   124b8:	str	r3, [sp, #92]	; 0x5c
   124bc:	ldr	r3, [sp, #180]	; 0xb4
   124c0:	and	r3, r3, #4
   124c4:	str	r3, [sp, #96]	; 0x60
   124c8:	ldr	r3, [sp, #176]	; 0xb0
   124cc:	mov	r4, r3
   124d0:	str	r3, [sp, #56]	; 0x38
   124d4:	str	r3, [sp, #84]	; 0x54
   124d8:	b	120d4 <__assert_fail@plt+0x11d0>
   124dc:	mov	r3, #1
   124e0:	mov	r4, #0
   124e4:	mov	r9, r4
   124e8:	str	r3, [sp, #32]
   124ec:	str	r3, [sp, #44]	; 0x2c
   124f0:	str	r3, [sp, #48]	; 0x30
   124f4:	str	r4, [sp, #52]	; 0x34
   124f8:	str	r3, [sp, #56]	; 0x38
   124fc:	str	r3, [sp, #60]	; 0x3c
   12500:	str	r3, [sp, #88]	; 0x58
   12504:	movw	r3, #32652	; 0x7f8c
   12508:	movt	r3, #1
   1250c:	str	r4, [sp, #64]	; 0x40
   12510:	str	r4, [sp, #68]	; 0x44
   12514:	str	r3, [sp, #72]	; 0x48
   12518:	ldr	r3, [sp, #180]	; 0xb4
   1251c:	str	r4, [sp, #80]	; 0x50
   12520:	str	r4, [sp, #84]	; 0x54
   12524:	and	r3, r3, #1
   12528:	str	r3, [sp, #92]	; 0x5c
   1252c:	ldr	r3, [sp, #180]	; 0xb4
   12530:	and	r3, r3, #4
   12534:	str	r3, [sp, #96]	; 0x60
   12538:	mov	r3, #5
   1253c:	str	r3, [sp, #176]	; 0xb0
   12540:	b	120d4 <__assert_fail@plt+0x11d0>
   12544:	mov	r3, #1
   12548:	mov	r4, #0
   1254c:	mov	r9, r4
   12550:	str	r3, [sp, #32]
   12554:	str	r4, [sp, #44]	; 0x2c
   12558:	str	r3, [sp, #48]	; 0x30
   1255c:	str	r3, [sp, #60]	; 0x3c
   12560:	ldr	r3, [sp, #180]	; 0xb4
   12564:	str	r4, [sp, #52]	; 0x34
   12568:	str	r4, [sp, #56]	; 0x38
   1256c:	str	r4, [sp, #64]	; 0x40
   12570:	str	r4, [sp, #68]	; 0x44
   12574:	and	r3, r3, #1
   12578:	str	r4, [sp, #72]	; 0x48
   1257c:	str	r4, [sp, #80]	; 0x50
   12580:	str	r4, [sp, #84]	; 0x54
   12584:	str	r3, [sp, #92]	; 0x5c
   12588:	ldr	r3, [sp, #180]	; 0xb4
   1258c:	str	r4, [sp, #88]	; 0x58
   12590:	and	r3, r3, #4
   12594:	str	r3, [sp, #96]	; 0x60
   12598:	b	120d4 <__assert_fail@plt+0x11d0>
   1259c:	mov	r3, #0
   125a0:	mov	r2, #1
   125a4:	ldr	r1, [sp, #176]	; 0xb0
   125a8:	mov	r4, r3
   125ac:	mov	r9, r3
   125b0:	movw	r3, #32672	; 0x7fa0
   125b4:	movt	r3, #1
   125b8:	str	r2, [sp, #32]
   125bc:	str	r2, [sp, #44]	; 0x2c
   125c0:	str	r4, [sp, #48]	; 0x30
   125c4:	strd	r2, [sp, #68]	; 0x44
   125c8:	ldr	r3, [sp, #180]	; 0xb4
   125cc:	str	r2, [sp, #52]	; 0x34
   125d0:	str	r1, [sp, #56]	; 0x38
   125d4:	str	r4, [sp, #60]	; 0x3c
   125d8:	str	r2, [sp, #64]	; 0x40
   125dc:	and	r3, r3, r2
   125e0:	str	r4, [sp, #80]	; 0x50
   125e4:	str	r4, [sp, #84]	; 0x54
   125e8:	str	r4, [sp, #88]	; 0x58
   125ec:	str	r3, [sp, #92]	; 0x5c
   125f0:	ldr	r3, [sp, #180]	; 0xb4
   125f4:	and	r3, r3, #4
   125f8:	str	r3, [sp, #96]	; 0x60
   125fc:	mov	r3, #2
   12600:	str	r3, [sp, #176]	; 0xb0
   12604:	b	120d4 <__assert_fail@plt+0x11d0>
   12608:	mov	r3, #1
   1260c:	mov	r2, #0
   12610:	mov	r4, r2
   12614:	mov	r9, r2
   12618:	str	r3, [sp, #32]
   1261c:	str	r3, [sp, #44]	; 0x2c
   12620:	str	r2, [sp, #48]	; 0x30
   12624:	str	r3, [sp, #52]	; 0x34
   12628:	str	r3, [sp, #56]	; 0x38
   1262c:	str	r3, [sp, #60]	; 0x3c
   12630:	str	r3, [sp, #64]	; 0x40
   12634:	str	r3, [sp, #68]	; 0x44
   12638:	str	r3, [sp, #88]	; 0x58
   1263c:	movw	r3, #32672	; 0x7fa0
   12640:	movt	r3, #1
   12644:	str	r3, [sp, #72]	; 0x48
   12648:	ldr	r3, [sp, #180]	; 0xb4
   1264c:	str	r2, [sp, #80]	; 0x50
   12650:	str	r2, [sp, #84]	; 0x54
   12654:	and	r3, r3, #1
   12658:	b	125ec <__assert_fail@plt+0x16e8>
   1265c:	mov	r5, #102	; 0x66
   12660:	mov	r6, #0
   12664:	ldr	r3, [sp, #44]	; 0x2c
   12668:	cmp	r3, #0
   1266c:	bne	1351c <__assert_fail@plt+0x2618>
   12670:	ldr	r2, [sp, #52]	; 0x34
   12674:	eor	r3, fp, #1
   12678:	ands	r3, r2, r3
   1267c:	beq	126b4 <__assert_fail@plt+0x17b0>
   12680:	cmp	sl, r4
   12684:	mov	fp, r3
   12688:	movhi	r2, #39	; 0x27
   1268c:	strbhi	r2, [r9, r4]
   12690:	add	r2, r4, #1
   12694:	cmp	sl, r2
   12698:	movhi	r1, #36	; 0x24
   1269c:	strbhi	r1, [r9, r2]
   126a0:	add	r2, r4, #2
   126a4:	add	r4, r4, #3
   126a8:	cmp	sl, r2
   126ac:	movhi	r1, #39	; 0x27
   126b0:	strbhi	r1, [r9, r2]
   126b4:	cmp	sl, r4
   126b8:	add	r7, r7, #1
   126bc:	movhi	r3, #92	; 0x5c
   126c0:	strbhi	r3, [r9, r4]
   126c4:	add	r4, r4, #1
   126c8:	cmp	r4, sl
   126cc:	ldr	r3, [sp, #32]
   126d0:	strbcc	r5, [r9, r4]
   126d4:	cmp	r6, #0
   126d8:	add	r4, r4, #1
   126dc:	moveq	r3, #0
   126e0:	cmn	r8, #1
   126e4:	str	r3, [sp, #32]
   126e8:	bne	120ec <__assert_fail@plt+0x11e8>
   126ec:	ldr	r3, [sp, #28]
   126f0:	ldrb	r6, [r3, r7]
   126f4:	adds	r6, r6, #0
   126f8:	movne	r6, #1
   126fc:	cmp	r6, #0
   12700:	bne	120fc <__assert_fail@plt+0x11f8>
   12704:	mov	r3, r9
   12708:	mov	r9, fp
   1270c:	mov	fp, r3
   12710:	ldr	r3, [sp, #68]	; 0x44
   12714:	cmp	r4, #0
   12718:	movne	r3, #0
   1271c:	cmp	r3, #0
   12720:	bne	13914 <__assert_fail@plt+0x2a10>
   12724:	ldr	r3, [sp, #44]	; 0x2c
   12728:	ldr	r2, [sp, #52]	; 0x34
   1272c:	eor	r3, r3, #1
   12730:	ands	r2, r3, r2
   12734:	beq	1384c <__assert_fail@plt+0x2948>
   12738:	ldr	r3, [sp, #80]	; 0x50
   1273c:	cmp	r3, #0
   12740:	beq	13850 <__assert_fail@plt+0x294c>
   12744:	ldr	r3, [sp, #32]
   12748:	cmp	r3, #0
   1274c:	bne	138c4 <__assert_fail@plt+0x29c0>
   12750:	ldr	r3, [sp, #84]	; 0x54
   12754:	adds	r3, r3, #0
   12758:	movne	r3, #1
   1275c:	cmp	sl, #0
   12760:	movne	r3, #0
   12764:	cmp	r3, #0
   12768:	ldreq	r2, [sp, #80]	; 0x50
   1276c:	beq	13850 <__assert_fail@plt+0x294c>
   12770:	ldr	r2, [sp, #84]	; 0x54
   12774:	mov	sl, r2
   12778:	mov	r0, #0
   1277c:	mov	r4, #1
   12780:	mov	r1, #39	; 0x27
   12784:	str	r0, [sp, #44]	; 0x2c
   12788:	strb	r1, [fp]
   1278c:	str	r0, [sp, #48]	; 0x30
   12790:	str	r4, [sp, #52]	; 0x34
   12794:	str	r4, [sp, #56]	; 0x38
   12798:	str	r4, [sp, #64]	; 0x40
   1279c:	str	r0, [sp, #68]	; 0x44
   127a0:	str	r3, [sp, #80]	; 0x50
   127a4:	str	r2, [sp, #84]	; 0x54
   127a8:	str	r0, [sp, #88]	; 0x58
   127ac:	b	123ec <__assert_fail@plt+0x14e8>
   127b0:	mov	r5, #98	; 0x62
   127b4:	b	12660 <__assert_fail@plt+0x175c>
   127b8:	mov	r5, #97	; 0x61
   127bc:	b	12660 <__assert_fail@plt+0x175c>
   127c0:	ldr	r3, [sp, #48]	; 0x30
   127c4:	str	r3, [sp, #40]	; 0x28
   127c8:	mov	r3, #116	; 0x74
   127cc:	ldr	r2, [sp, #68]	; 0x44
   127d0:	cmp	r2, #0
   127d4:	bne	129d0 <__assert_fail@plt+0x1acc>
   127d8:	ldr	r2, [sp, #60]	; 0x3c
   127dc:	cmp	r2, #0
   127e0:	bne	1292c <__assert_fail@plt+0x1a28>
   127e4:	ldr	r3, [sp, #44]	; 0x2c
   127e8:	mov	r6, #0
   127ec:	cmp	r3, #0
   127f0:	beq	1299c <__assert_fail@plt+0x1a98>
   127f4:	mov	r3, fp
   127f8:	ldr	r2, [sp, #184]	; 0xb8
   127fc:	cmp	r2, #0
   12800:	beq	12820 <__assert_fail@plt+0x191c>
   12804:	ubfx	r1, r5, #5, #8
   12808:	mov	r0, r2
   1280c:	and	r2, r5, #31
   12810:	ldr	r1, [r0, r1, lsl #2]
   12814:	lsr	r2, r1, r2
   12818:	tst	r2, #1
   1281c:	bne	12664 <__assert_fail@plt+0x1760>
   12820:	ldr	r2, [sp, #40]	; 0x28
   12824:	cmp	r2, #0
   12828:	addeq	r7, r7, #1
   1282c:	bne	12664 <__assert_fail@plt+0x1760>
   12830:	cmp	r3, #0
   12834:	beq	126c8 <__assert_fail@plt+0x17c4>
   12838:	cmp	sl, r4
   1283c:	mov	fp, #0
   12840:	movhi	r3, #39	; 0x27
   12844:	strbhi	r3, [r9, r4]
   12848:	add	r3, r4, #1
   1284c:	add	r4, r4, #2
   12850:	cmp	sl, r3
   12854:	movhi	r2, #39	; 0x27
   12858:	strbhi	r2, [r9, r3]
   1285c:	b	126c8 <__assert_fail@plt+0x17c4>
   12860:	ldr	r3, [sp, #48]	; 0x30
   12864:	str	r3, [sp, #40]	; 0x28
   12868:	eor	r3, fp, #1
   1286c:	ldr	r2, [sp, #52]	; 0x34
   12870:	ands	r2, r2, r3
   12874:	beq	13534 <__assert_fail@plt+0x2630>
   12878:	cmp	sl, r4
   1287c:	movhi	r3, #39	; 0x27
   12880:	strbhi	r3, [r9, r4]
   12884:	add	r3, r4, #1
   12888:	cmp	sl, r3
   1288c:	movhi	r1, #36	; 0x24
   12890:	strbhi	r1, [r9, r3]
   12894:	add	r3, r4, #2
   12898:	cmp	sl, r3
   1289c:	movhi	r1, #39	; 0x27
   128a0:	strbhi	r1, [r9, r3]
   128a4:	add	r3, r4, #3
   128a8:	cmp	sl, r3
   128ac:	bls	13580 <__assert_fail@plt+0x267c>
   128b0:	mov	r4, r3
   128b4:	mov	r3, #92	; 0x5c
   128b8:	mov	fp, r2
   128bc:	mov	r2, r4
   128c0:	strb	r3, [r9, r4]
   128c4:	ldr	r3, [sp, #176]	; 0xb0
   128c8:	add	r4, r4, #1
   128cc:	cmp	r3, #2
   128d0:	beq	135e8 <__assert_fail@plt+0x26e4>
   128d4:	add	r3, r7, #1
   128d8:	cmp	r3, r8
   128dc:	bcs	128f4 <__assert_fail@plt+0x19f0>
   128e0:	ldr	r1, [sp, #28]
   128e4:	ldrb	r3, [r1, r3]
   128e8:	sub	r3, r3, #48	; 0x30
   128ec:	cmp	r3, #9
   128f0:	bls	135f8 <__assert_fail@plt+0x26f4>
   128f4:	mov	r3, #0
   128f8:	mov	r5, #48	; 0x30
   128fc:	ldr	r6, [sp, #64]	; 0x40
   12900:	cmp	r6, #0
   12904:	beq	127f8 <__assert_fail@plt+0x18f4>
   12908:	mov	r6, #0
   1290c:	b	12820 <__assert_fail@plt+0x191c>
   12910:	ldr	r3, [sp, #48]	; 0x30
   12914:	str	r3, [sp, #40]	; 0x28
   12918:	ldr	r2, [sp, #60]	; 0x3c
   1291c:	mov	r5, #13
   12920:	mov	r3, #114	; 0x72
   12924:	cmp	r2, #0
   12928:	beq	127e4 <__assert_fail@plt+0x18e0>
   1292c:	mov	r5, r3
   12930:	b	12660 <__assert_fail@plt+0x175c>
   12934:	ldr	r3, [sp, #48]	; 0x30
   12938:	str	r3, [sp, #40]	; 0x28
   1293c:	mov	r3, #118	; 0x76
   12940:	b	127d8 <__assert_fail@plt+0x18d4>
   12944:	ldr	r3, [sp, #48]	; 0x30
   12948:	str	r3, [sp, #40]	; 0x28
   1294c:	mov	r5, #10
   12950:	mov	r3, #110	; 0x6e
   12954:	b	127d8 <__assert_fail@plt+0x18d4>
   12958:	ldr	r3, [sp, #48]	; 0x30
   1295c:	cmn	r8, #1
   12960:	str	r3, [sp, #40]	; 0x28
   12964:	beq	12dac <__assert_fail@plt+0x1ea8>
   12968:	subs	r3, r8, #1
   1296c:	movne	r3, #1
   12970:	cmp	r3, #0
   12974:	bne	12980 <__assert_fail@plt+0x1a7c>
   12978:	cmp	r7, #0
   1297c:	beq	129c4 <__assert_fail@plt+0x1ac0>
   12980:	mov	r6, #0
   12984:	ldr	r3, [sp, #64]	; 0x40
   12988:	cmp	r3, #0
   1298c:	beq	127f4 <__assert_fail@plt+0x18f0>
   12990:	ldr	r3, [sp, #44]	; 0x2c
   12994:	cmp	r3, #0
   12998:	bne	127f4 <__assert_fail@plt+0x18f0>
   1299c:	mov	r3, fp
   129a0:	b	12820 <__assert_fail@plt+0x191c>
   129a4:	ldr	r3, [sp, #48]	; 0x30
   129a8:	str	r3, [sp, #40]	; 0x28
   129ac:	b	12978 <__assert_fail@plt+0x1a74>
   129b0:	ldr	r3, [sp, #48]	; 0x30
   129b4:	str	r3, [sp, #40]	; 0x28
   129b8:	b	12980 <__assert_fail@plt+0x1a7c>
   129bc:	ldr	r6, [sp, #48]	; 0x30
   129c0:	str	r6, [sp, #40]	; 0x28
   129c4:	ldr	r3, [sp, #68]	; 0x44
   129c8:	cmp	r3, #0
   129cc:	beq	12984 <__assert_fail@plt+0x1a80>
   129d0:	mov	r3, #2
   129d4:	mov	fp, r9
   129d8:	str	r3, [sp, #176]	; 0xb0
   129dc:	ldr	r3, [sp, #60]	; 0x3c
   129e0:	cmp	r3, #0
   129e4:	ldr	r3, [sp, #176]	; 0xb0
   129e8:	movne	r3, #4
   129ec:	str	r3, [sp, #176]	; 0xb0
   129f0:	mov	lr, #0
   129f4:	mov	r0, fp
   129f8:	ldr	r2, [sp, #28]
   129fc:	ldr	r3, [sp, #180]	; 0xb4
   12a00:	ldr	r1, [sp, #188]	; 0xbc
   12a04:	bic	ip, r3, #2
   12a08:	ldr	r3, [sp, #176]	; 0xb0
   12a0c:	stm	sp, {r3, ip, lr}
   12a10:	mov	r3, r8
   12a14:	ldr	ip, [sp, #192]	; 0xc0
   12a18:	str	r1, [sp, #12]
   12a1c:	mov	r1, sl
   12a20:	str	ip, [sp, #16]
   12a24:	bl	11fb0 <__assert_fail@plt+0x10ac>
   12a28:	mov	r4, r0
   12a2c:	mov	r0, r4
   12a30:	add	sp, sp, #140	; 0x8c
   12a34:	ldrd	r4, [sp]
   12a38:	ldrd	r6, [sp, #8]
   12a3c:	ldrd	r8, [sp, #16]
   12a40:	ldrd	sl, [sp, #24]
   12a44:	add	sp, sp, #32
   12a48:	pop	{pc}		; (ldr pc, [sp], #4)
   12a4c:	ldr	r3, [sp, #48]	; 0x30
   12a50:	str	r3, [sp, #40]	; 0x28
   12a54:	ldr	r3, [sp, #176]	; 0xb0
   12a58:	cmp	r3, #2
   12a5c:	beq	12dd4 <__assert_fail@plt+0x1ed0>
   12a60:	ldr	r3, [sp, #88]	; 0x58
   12a64:	cmp	r3, #0
   12a68:	moveq	r5, #92	; 0x5c
   12a6c:	moveq	r3, r5
   12a70:	beq	127d8 <__assert_fail@plt+0x18d4>
   12a74:	add	r7, r7, #1
   12a78:	mov	r3, fp
   12a7c:	mov	r6, #0
   12a80:	mov	r5, #92	; 0x5c
   12a84:	b	12830 <__assert_fail@plt+0x192c>
   12a88:	ldr	r3, [sp, #64]	; 0x40
   12a8c:	cmp	r3, #0
   12a90:	bne	13908 <__assert_fail@plt+0x2a04>
   12a94:	ldr	r2, [sp, #48]	; 0x30
   12a98:	mov	r3, fp
   12a9c:	mov	r6, r2
   12aa0:	str	r2, [sp, #40]	; 0x28
   12aa4:	b	127f8 <__assert_fail@plt+0x18f4>
   12aa8:	ldr	r3, [sp, #176]	; 0xb0
   12aac:	cmp	r3, #2
   12ab0:	beq	13844 <__assert_fail@plt+0x2940>
   12ab4:	cmp	r3, #5
   12ab8:	ldr	r3, [sp, #48]	; 0x30
   12abc:	str	r3, [sp, #40]	; 0x28
   12ac0:	bne	12aec <__assert_fail@plt+0x1be8>
   12ac4:	ldr	r3, [sp, #96]	; 0x60
   12ac8:	cmp	r3, #0
   12acc:	beq	13548 <__assert_fail@plt+0x2644>
   12ad0:	add	r3, r7, #2
   12ad4:	cmp	r3, r8
   12ad8:	bcs	12aec <__assert_fail@plt+0x1be8>
   12adc:	ldr	r2, [sp, #36]	; 0x24
   12ae0:	ldrb	r5, [r2, #1]
   12ae4:	cmp	r5, #63	; 0x3f
   12ae8:	beq	13630 <__assert_fail@plt+0x272c>
   12aec:	mov	r6, #0
   12af0:	mov	r5, #63	; 0x3f
   12af4:	b	12984 <__assert_fail@plt+0x1a80>
   12af8:	ldr	r3, [sp, #176]	; 0xb0
   12afc:	cmp	r3, #2
   12b00:	ldr	r3, [sp, #48]	; 0x30
   12b04:	beq	132ec <__assert_fail@plt+0x23e8>
   12b08:	mov	r5, #39	; 0x27
   12b0c:	str	r3, [sp, #40]	; 0x28
   12b10:	str	r6, [sp, #80]	; 0x50
   12b14:	b	12984 <__assert_fail@plt+0x1a80>
   12b18:	ldr	r3, [sp, #180]	; 0xb4
   12b1c:	cmp	r4, #0
   12b20:	and	r3, r3, #1
   12b24:	str	r3, [sp, #92]	; 0x5c
   12b28:	ldr	r3, [sp, #180]	; 0xb4
   12b2c:	and	r3, r3, #4
   12b30:	str	r3, [sp, #96]	; 0x60
   12b34:	bne	13954 <__assert_fail@plt+0x2a50>
   12b38:	str	r4, [sp, #60]	; 0x3c
   12b3c:	cmp	sl, #0
   12b40:	bne	13938 <__assert_fail@plt+0x2a34>
   12b44:	mov	r3, #1
   12b48:	movw	r2, #32672	; 0x7fa0
   12b4c:	movt	r2, #1
   12b50:	mov	r4, r3
   12b54:	mov	r3, #2
   12b58:	mov	r9, sl
   12b5c:	str	r4, [sp, #32]
   12b60:	str	sl, [sp, #44]	; 0x2c
   12b64:	str	sl, [sp, #48]	; 0x30
   12b68:	str	r4, [sp, #52]	; 0x34
   12b6c:	str	r4, [sp, #56]	; 0x38
   12b70:	str	r4, [sp, #64]	; 0x40
   12b74:	str	sl, [sp, #68]	; 0x44
   12b78:	str	r2, [sp, #72]	; 0x48
   12b7c:	str	sl, [sp, #80]	; 0x50
   12b80:	str	sl, [sp, #84]	; 0x54
   12b84:	str	sl, [sp, #88]	; 0x58
   12b88:	str	r3, [sp, #176]	; 0xb0
   12b8c:	b	120d4 <__assert_fail@plt+0x11d0>
   12b90:	ldrb	r5, [r0, r7]
   12b94:	cmp	r5, #126	; 0x7e
   12b98:	ldrls	pc, [pc, r5, lsl #2]
   12b9c:	b	12f00 <__assert_fail@plt+0x1ffc>
   12ba0:	andeq	r2, r1, ip, asr #29
   12ba4:	andeq	r2, r1, r0, lsl #30
   12ba8:	andeq	r2, r1, r0, lsl #30
   12bac:	andeq	r2, r1, r0, lsl #30
   12bb0:	andeq	r2, r1, r0, lsl #30
   12bb4:	andeq	r2, r1, r0, lsl #30
   12bb8:	andeq	r2, r1, r0, lsl #30
   12bbc:			; <UNDEFINED> instruction: 0x00012ebc
   12bc0:	andeq	r2, r1, ip, lsr #29
   12bc4:	andeq	r2, r1, r0, lsr lr
   12bc8:	muleq	r1, ip, lr
   12bcc:	andeq	r2, r1, r0, lsl lr
   12bd0:	strdeq	r2, [r1], -r0
   12bd4:	andeq	r2, r1, ip, ror lr
   12bd8:	andeq	r2, r1, r0, lsl #30
   12bdc:	andeq	r2, r1, r0, lsl #30
   12be0:	andeq	r2, r1, r0, lsl #30
   12be4:	andeq	r2, r1, r0, lsl #30
   12be8:	andeq	r2, r1, r0, lsl #30
   12bec:	andeq	r2, r1, r0, lsl #30
   12bf0:	andeq	r2, r1, r0, lsl #30
   12bf4:	andeq	r2, r1, r0, lsl #30
   12bf8:	andeq	r2, r1, r0, lsl #30
   12bfc:	andeq	r2, r1, r0, lsl #30
   12c00:	andeq	r2, r1, r0, lsl #30
   12c04:	andeq	r2, r1, r0, lsl #30
   12c08:	andeq	r2, r1, r0, lsl #30
   12c0c:	andeq	r2, r1, r0, lsl #30
   12c10:	andeq	r2, r1, r0, lsl #30
   12c14:	andeq	r2, r1, r0, lsl #30
   12c18:	andeq	r2, r1, r0, lsl #30
   12c1c:	andeq	r2, r1, r0, lsl #30
   12c20:	andeq	r2, r1, r4, lsr #28
   12c24:	andeq	r2, r1, ip, lsl #29
   12c28:	andeq	r2, r1, ip, lsl #29
   12c2c:	andeq	r2, r1, r4, lsl #28
   12c30:	andeq	r2, r1, ip, lsl #29
   12c34:	strdeq	r2, [r1], -r8
   12c38:	andeq	r2, r1, ip, lsl #29
   12c3c:	andeq	r2, r1, r8, ror #28
   12c40:	andeq	r2, r1, ip, lsl #29
   12c44:	andeq	r2, r1, ip, lsl #29
   12c48:	andeq	r2, r1, ip, lsl #29
   12c4c:	strdeq	r2, [r1], -r8
   12c50:	strdeq	r2, [r1], -r8
   12c54:	strdeq	r2, [r1], -r8
   12c58:	strdeq	r2, [r1], -r8
   12c5c:	strdeq	r2, [r1], -r8
   12c60:	strdeq	r2, [r1], -r8
   12c64:	strdeq	r2, [r1], -r8
   12c68:	strdeq	r2, [r1], -r8
   12c6c:	strdeq	r2, [r1], -r8
   12c70:	strdeq	r2, [r1], -r8
   12c74:	strdeq	r2, [r1], -r8
   12c78:	strdeq	r2, [r1], -r8
   12c7c:	strdeq	r2, [r1], -r8
   12c80:	strdeq	r2, [r1], -r8
   12c84:	strdeq	r2, [r1], -r8
   12c88:	strdeq	r2, [r1], -r8
   12c8c:	andeq	r2, r1, ip, lsl #29
   12c90:	andeq	r2, r1, ip, lsl #29
   12c94:	andeq	r2, r1, ip, lsl #29
   12c98:	andeq	r2, r1, ip, lsl #29
   12c9c:	andeq	r2, r1, r0, asr #28
   12ca0:	andeq	r2, r1, r0, lsl #30
   12ca4:	strdeq	r2, [r1], -r8
   12ca8:	strdeq	r2, [r1], -r8
   12cac:	strdeq	r2, [r1], -r8
   12cb0:	strdeq	r2, [r1], -r8
   12cb4:	strdeq	r2, [r1], -r8
   12cb8:	strdeq	r2, [r1], -r8
   12cbc:	strdeq	r2, [r1], -r8
   12cc0:	strdeq	r2, [r1], -r8
   12cc4:	strdeq	r2, [r1], -r8
   12cc8:	strdeq	r2, [r1], -r8
   12ccc:	strdeq	r2, [r1], -r8
   12cd0:	strdeq	r2, [r1], -r8
   12cd4:	strdeq	r2, [r1], -r8
   12cd8:	strdeq	r2, [r1], -r8
   12cdc:	strdeq	r2, [r1], -r8
   12ce0:	strdeq	r2, [r1], -r8
   12ce4:	strdeq	r2, [r1], -r8
   12ce8:	strdeq	r2, [r1], -r8
   12cec:	strdeq	r2, [r1], -r8
   12cf0:	strdeq	r2, [r1], -r8
   12cf4:	strdeq	r2, [r1], -r8
   12cf8:	strdeq	r2, [r1], -r8
   12cfc:	strdeq	r2, [r1], -r8
   12d00:	strdeq	r2, [r1], -r8
   12d04:	strdeq	r2, [r1], -r8
   12d08:	strdeq	r2, [r1], -r8
   12d0c:	andeq	r2, r1, ip, lsl #29
   12d10:	andeq	r2, r1, r0, asr #27
   12d14:	strdeq	r2, [r1], -r8
   12d18:	andeq	r2, r1, ip, lsl #29
   12d1c:	strdeq	r2, [r1], -r8
   12d20:	andeq	r2, r1, ip, lsl #29
   12d24:	strdeq	r2, [r1], -r8
   12d28:	strdeq	r2, [r1], -r8
   12d2c:	strdeq	r2, [r1], -r8
   12d30:	strdeq	r2, [r1], -r8
   12d34:	strdeq	r2, [r1], -r8
   12d38:	strdeq	r2, [r1], -r8
   12d3c:	strdeq	r2, [r1], -r8
   12d40:	strdeq	r2, [r1], -r8
   12d44:	strdeq	r2, [r1], -r8
   12d48:	strdeq	r2, [r1], -r8
   12d4c:	strdeq	r2, [r1], -r8
   12d50:	strdeq	r2, [r1], -r8
   12d54:	strdeq	r2, [r1], -r8
   12d58:	strdeq	r2, [r1], -r8
   12d5c:	strdeq	r2, [r1], -r8
   12d60:	strdeq	r2, [r1], -r8
   12d64:	strdeq	r2, [r1], -r8
   12d68:	strdeq	r2, [r1], -r8
   12d6c:	strdeq	r2, [r1], -r8
   12d70:	strdeq	r2, [r1], -r8
   12d74:	strdeq	r2, [r1], -r8
   12d78:	strdeq	r2, [r1], -r8
   12d7c:	strdeq	r2, [r1], -r8
   12d80:	strdeq	r2, [r1], -r8
   12d84:	strdeq	r2, [r1], -r8
   12d88:	strdeq	r2, [r1], -r8
   12d8c:	muleq	r1, ip, sp
   12d90:	andeq	r2, r1, ip, lsl #29
   12d94:	muleq	r1, ip, sp
   12d98:	andeq	r2, r1, r4, lsl #28
   12d9c:	mov	r3, #0
   12da0:	cmn	r8, #1
   12da4:	str	r3, [sp, #40]	; 0x28
   12da8:	bne	12968 <__assert_fail@plt+0x1a64>
   12dac:	ldr	r3, [sp, #28]
   12db0:	ldrb	r3, [r3, #1]
   12db4:	adds	r3, r3, #0
   12db8:	movne	r3, #1
   12dbc:	b	12970 <__assert_fail@plt+0x1a6c>
   12dc0:	mov	r3, #0
   12dc4:	str	r3, [sp, #40]	; 0x28
   12dc8:	ldr	r3, [sp, #176]	; 0xb0
   12dcc:	cmp	r3, #2
   12dd0:	bne	12a60 <__assert_fail@plt+0x1b5c>
   12dd4:	ldr	r3, [sp, #44]	; 0x2c
   12dd8:	cmp	r3, #0
   12ddc:	bne	1371c <__assert_fail@plt+0x2818>
   12de0:	mov	r6, r3
   12de4:	add	r7, r7, #1
   12de8:	mov	r3, fp
   12dec:	mov	r5, #92	; 0x5c
   12df0:	b	12830 <__assert_fail@plt+0x192c>
   12df4:	ldr	r6, [sp, #48]	; 0x30
   12df8:	mov	r3, #0
   12dfc:	str	r3, [sp, #40]	; 0x28
   12e00:	b	12984 <__assert_fail@plt+0x1a80>
   12e04:	mov	r3, #0
   12e08:	str	r3, [sp, #40]	; 0x28
   12e0c:	b	12978 <__assert_fail@plt+0x1a74>
   12e10:	mov	r3, #0
   12e14:	str	r3, [sp, #40]	; 0x28
   12e18:	mov	r3, #118	; 0x76
   12e1c:	b	127d8 <__assert_fail@plt+0x18d4>
   12e20:	ldr	r6, [sp, #48]	; 0x30
   12e24:	mov	r3, #0
   12e28:	str	r3, [sp, #40]	; 0x28
   12e2c:	b	129c4 <__assert_fail@plt+0x1ac0>
   12e30:	mov	r3, #0
   12e34:	str	r3, [sp, #40]	; 0x28
   12e38:	mov	r3, #116	; 0x74
   12e3c:	b	127cc <__assert_fail@plt+0x18c8>
   12e40:	ldr	r3, [sp, #176]	; 0xb0
   12e44:	cmp	r3, #2
   12e48:	beq	13358 <__assert_fail@plt+0x2454>
   12e4c:	cmp	r3, #5
   12e50:	mov	r3, #0
   12e54:	str	r3, [sp, #40]	; 0x28
   12e58:	beq	12ac4 <__assert_fail@plt+0x1bc0>
   12e5c:	mov	r6, #0
   12e60:	mov	r5, #63	; 0x3f
   12e64:	b	12984 <__assert_fail@plt+0x1a80>
   12e68:	ldr	r3, [sp, #176]	; 0xb0
   12e6c:	cmp	r3, #2
   12e70:	beq	132e0 <__assert_fail@plt+0x23dc>
   12e74:	mov	r3, #0
   12e78:	b	12b08 <__assert_fail@plt+0x1c04>
   12e7c:	mov	r3, #0
   12e80:	str	r3, [sp, #40]	; 0x28
   12e84:	mov	r3, #114	; 0x72
   12e88:	b	127cc <__assert_fail@plt+0x18c8>
   12e8c:	mov	r3, #0
   12e90:	mov	r6, r3
   12e94:	str	r3, [sp, #40]	; 0x28
   12e98:	b	129c4 <__assert_fail@plt+0x1ac0>
   12e9c:	mov	r3, #0
   12ea0:	str	r3, [sp, #40]	; 0x28
   12ea4:	mov	r3, #110	; 0x6e
   12ea8:	b	127cc <__assert_fail@plt+0x18c8>
   12eac:	mov	r3, #0
   12eb0:	str	r3, [sp, #40]	; 0x28
   12eb4:	mov	r3, #98	; 0x62
   12eb8:	b	127d8 <__assert_fail@plt+0x18d4>
   12ebc:	mov	r3, #0
   12ec0:	str	r3, [sp, #40]	; 0x28
   12ec4:	mov	r3, #97	; 0x61
   12ec8:	b	127d8 <__assert_fail@plt+0x18d4>
   12ecc:	ldr	r3, [sp, #60]	; 0x3c
   12ed0:	cmp	r3, #0
   12ed4:	bne	132c4 <__assert_fail@plt+0x23c0>
   12ed8:	ldr	r3, [sp, #92]	; 0x5c
   12edc:	cmp	r3, #0
   12ee0:	addne	r7, r7, #1
   12ee4:	bne	120e4 <__assert_fail@plt+0x11e0>
   12ee8:	str	r3, [sp, #40]	; 0x28
   12eec:	b	127e4 <__assert_fail@plt+0x18e0>
   12ef0:	mov	r3, #0
   12ef4:	str	r3, [sp, #40]	; 0x28
   12ef8:	mov	r3, #102	; 0x66
   12efc:	b	127d8 <__assert_fail@plt+0x18d4>
   12f00:	mov	r3, #0
   12f04:	str	r3, [sp, #40]	; 0x28
   12f08:	ldr	r3, [sp, #76]	; 0x4c
   12f0c:	cmp	r3, #1
   12f10:	bne	13378 <__assert_fail@plt+0x2474>
   12f14:	bl	10dfc <__ctype_b_loc@plt>
   12f18:	ldr	r2, [r0]
   12f1c:	sxth	r3, r5
   12f20:	lsl	r3, r3, #1
   12f24:	ldr	r1, [sp, #76]	; 0x4c
   12f28:	ldrh	r3, [r2, r3]
   12f2c:	mov	r0, r1
   12f30:	and	r3, r3, #16384	; 0x4000
   12f34:	cmp	r3, #0
   12f38:	ldr	r3, [sp, #60]	; 0x3c
   12f3c:	movne	r6, #1
   12f40:	moveq	r6, #0
   12f44:	movne	r2, #0
   12f48:	andeq	r2, r3, #1
   12f4c:	cmp	r2, #0
   12f50:	beq	12984 <__assert_fail@plt+0x1a80>
   12f54:	ldr	r2, [sp, #60]	; 0x3c
   12f58:	mov	r6, #0
   12f5c:	add	r1, r0, r7
   12f60:	mov	ip, #39	; 0x27
   12f64:	str	r6, [sp, #100]	; 0x64
   12f68:	mov	r0, #0
   12f6c:	ldr	lr, [sp, #36]	; 0x24
   12f70:	str	r8, [sp, #36]	; 0x24
   12f74:	ldr	r6, [sp, #40]	; 0x28
   12f78:	ldr	r8, [sp, #44]	; 0x2c
   12f7c:	b	1302c <__assert_fail@plt+0x2128>
   12f80:	cmp	r8, #0
   12f84:	bne	13560 <__assert_fail@plt+0x265c>
   12f88:	ldr	r0, [sp, #52]	; 0x34
   12f8c:	eor	r3, fp, #1
   12f90:	ands	r3, r0, r3
   12f94:	beq	12fc4 <__assert_fail@plt+0x20c0>
   12f98:	cmp	sl, r4
   12f9c:	add	r0, r4, #1
   12fa0:	strbhi	ip, [r9, r4]
   12fa4:	cmp	sl, r0
   12fa8:	movhi	fp, #36	; 0x24
   12fac:	strbhi	fp, [r9, r0]
   12fb0:	add	r0, r4, #2
   12fb4:	mov	fp, r3
   12fb8:	cmp	sl, r0
   12fbc:	add	r4, r4, #3
   12fc0:	strbhi	ip, [r9, r0]
   12fc4:	cmp	sl, r4
   12fc8:	movhi	r3, #92	; 0x5c
   12fcc:	strbhi	r3, [r9, r4]
   12fd0:	add	r3, r4, #1
   12fd4:	cmp	sl, r3
   12fd8:	bls	12fe8 <__assert_fail@plt+0x20e4>
   12fdc:	lsr	r0, r5, #6
   12fe0:	add	r0, r0, #48	; 0x30
   12fe4:	strb	r0, [r9, r3]
   12fe8:	add	r3, r4, #2
   12fec:	cmp	sl, r3
   12ff0:	bls	13000 <__assert_fail@plt+0x20fc>
   12ff4:	ubfx	r0, r5, #3, #3
   12ff8:	add	r0, r0, #48	; 0x30
   12ffc:	strb	r0, [r9, r3]
   13000:	add	r7, r7, #1
   13004:	and	r5, r5, #7
   13008:	cmp	r1, r7
   1300c:	add	r5, r5, #48	; 0x30
   13010:	add	r4, r4, #3
   13014:	bls	13574 <__assert_fail@plt+0x2670>
   13018:	mov	r0, r2
   1301c:	cmp	sl, r4
   13020:	strbhi	r5, [r9, r4]
   13024:	add	r4, r4, #1
   13028:	ldrb	r5, [lr, #1]!
   1302c:	cmp	r2, #0
   13030:	bne	12f80 <__assert_fail@plt+0x207c>
   13034:	eor	r3, r0, #1
   13038:	cmp	r6, #0
   1303c:	and	r3, r3, fp
   13040:	uxtb	r3, r3
   13044:	beq	13058 <__assert_fail@plt+0x2154>
   13048:	cmp	sl, r4
   1304c:	movhi	r6, #92	; 0x5c
   13050:	strbhi	r6, [r9, r4]
   13054:	add	r4, r4, #1
   13058:	add	r7, r7, #1
   1305c:	cmp	r7, r1
   13060:	bcs	13554 <__assert_fail@plt+0x2650>
   13064:	cmp	r3, #0
   13068:	beq	13598 <__assert_fail@plt+0x2694>
   1306c:	cmp	sl, r4
   13070:	add	r3, r4, #1
   13074:	mov	r6, #0
   13078:	strbhi	ip, [r9, r4]
   1307c:	cmp	sl, r3
   13080:	add	r4, r4, #2
   13084:	mov	fp, r6
   13088:	strbhi	ip, [r9, r3]
   1308c:	b	1301c <__assert_fail@plt+0x2118>
   13090:	ldr	r3, [sp, #36]	; 0x24
   13094:	ldrb	r5, [r3]
   13098:	cmp	r5, #126	; 0x7e
   1309c:	ldrls	pc, [pc, r5, lsl #2]
   130a0:	b	12f00 <__assert_fail@plt+0x1ffc>
   130a4:	andeq	r3, r1, r4, asr #5
   130a8:	andeq	r2, r1, r0, lsl #30
   130ac:	andeq	r2, r1, r0, lsl #30
   130b0:	andeq	r2, r1, r0, lsl #30
   130b4:	andeq	r2, r1, r0, lsl #30
   130b8:	andeq	r2, r1, r0, lsl #30
   130bc:	andeq	r2, r1, r0, lsl #30
   130c0:			; <UNDEFINED> instruction: 0x000127b8
   130c4:			; <UNDEFINED> instruction: 0x000127b0
   130c8:	andeq	r2, r1, r0, lsr lr
   130cc:			; <UNDEFINED> instruction: 0x000132b8
   130d0:	andeq	r2, r1, r0, lsl lr
   130d4:	andeq	r2, r1, ip, asr r6
   130d8:	andeq	r3, r1, ip, lsr #5
   130dc:	andeq	r2, r1, r0, lsl #30
   130e0:	andeq	r2, r1, r0, lsl #30
   130e4:	andeq	r2, r1, r0, lsl #30
   130e8:	andeq	r2, r1, r0, lsl #30
   130ec:	andeq	r2, r1, r0, lsl #30
   130f0:	andeq	r2, r1, r0, lsl #30
   130f4:	andeq	r2, r1, r0, lsl #30
   130f8:	andeq	r2, r1, r0, lsl #30
   130fc:	andeq	r2, r1, r0, lsl #30
   13100:	andeq	r2, r1, r0, lsl #30
   13104:	andeq	r2, r1, r0, lsl #30
   13108:	andeq	r2, r1, r0, lsl #30
   1310c:	andeq	r2, r1, r0, lsl #30
   13110:	andeq	r2, r1, r0, lsl #30
   13114:	andeq	r2, r1, r0, lsl #30
   13118:	andeq	r2, r1, r0, lsl #30
   1311c:	andeq	r2, r1, r0, lsl #30
   13120:	andeq	r2, r1, r0, lsl #30
   13124:	andeq	r2, r1, r0, lsr #28
   13128:	andeq	r3, r1, r0, lsr #5
   1312c:	andeq	r3, r1, r0, lsr #5
   13130:	andeq	r2, r1, r4, lsl #28
   13134:	andeq	r3, r1, r0, lsr #5
   13138:	strdeq	r2, [r1], -r4
   1313c:	andeq	r3, r1, r0, lsr #5
   13140:	andeq	r2, r1, r8, ror #28
   13144:	andeq	r3, r1, r0, lsr #5
   13148:	andeq	r3, r1, r0, lsr #5
   1314c:	andeq	r3, r1, r0, lsr #5
   13150:	strdeq	r2, [r1], -r4
   13154:	strdeq	r2, [r1], -r4
   13158:	strdeq	r2, [r1], -r4
   1315c:	strdeq	r2, [r1], -r4
   13160:	strdeq	r2, [r1], -r4
   13164:	strdeq	r2, [r1], -r4
   13168:	strdeq	r2, [r1], -r4
   1316c:	strdeq	r2, [r1], -r4
   13170:	strdeq	r2, [r1], -r4
   13174:	strdeq	r2, [r1], -r4
   13178:	strdeq	r2, [r1], -r4
   1317c:	strdeq	r2, [r1], -r4
   13180:	strdeq	r2, [r1], -r4
   13184:	strdeq	r2, [r1], -r4
   13188:	strdeq	r2, [r1], -r4
   1318c:	strdeq	r2, [r1], -r4
   13190:	andeq	r3, r1, r0, lsr #5
   13194:	andeq	r3, r1, r0, lsr #5
   13198:	andeq	r3, r1, r0, lsr #5
   1319c:	andeq	r3, r1, r0, lsr #5
   131a0:	andeq	r2, r1, r0, asr #28
   131a4:	andeq	r2, r1, r0, lsl #30
   131a8:	strdeq	r2, [r1], -r4
   131ac:	strdeq	r2, [r1], -r4
   131b0:	strdeq	r2, [r1], -r4
   131b4:	strdeq	r2, [r1], -r4
   131b8:	strdeq	r2, [r1], -r4
   131bc:	strdeq	r2, [r1], -r4
   131c0:	strdeq	r2, [r1], -r4
   131c4:	strdeq	r2, [r1], -r4
   131c8:	strdeq	r2, [r1], -r4
   131cc:	strdeq	r2, [r1], -r4
   131d0:	strdeq	r2, [r1], -r4
   131d4:	strdeq	r2, [r1], -r4
   131d8:	strdeq	r2, [r1], -r4
   131dc:	strdeq	r2, [r1], -r4
   131e0:	strdeq	r2, [r1], -r4
   131e4:	strdeq	r2, [r1], -r4
   131e8:	strdeq	r2, [r1], -r4
   131ec:	strdeq	r2, [r1], -r4
   131f0:	strdeq	r2, [r1], -r4
   131f4:	strdeq	r2, [r1], -r4
   131f8:	strdeq	r2, [r1], -r4
   131fc:	strdeq	r2, [r1], -r4
   13200:	strdeq	r2, [r1], -r4
   13204:	strdeq	r2, [r1], -r4
   13208:	strdeq	r2, [r1], -r4
   1320c:	strdeq	r2, [r1], -r4
   13210:	andeq	r3, r1, r0, lsr #5
   13214:	andeq	r2, r1, r0, asr #27
   13218:	strdeq	r2, [r1], -r4
   1321c:	andeq	r3, r1, r0, lsr #5
   13220:	strdeq	r2, [r1], -r4
   13224:	andeq	r3, r1, r0, lsr #5
   13228:	strdeq	r2, [r1], -r4
   1322c:	strdeq	r2, [r1], -r4
   13230:	strdeq	r2, [r1], -r4
   13234:	strdeq	r2, [r1], -r4
   13238:	strdeq	r2, [r1], -r4
   1323c:	strdeq	r2, [r1], -r4
   13240:	strdeq	r2, [r1], -r4
   13244:	strdeq	r2, [r1], -r4
   13248:	strdeq	r2, [r1], -r4
   1324c:	strdeq	r2, [r1], -r4
   13250:	strdeq	r2, [r1], -r4
   13254:	strdeq	r2, [r1], -r4
   13258:	strdeq	r2, [r1], -r4
   1325c:	strdeq	r2, [r1], -r4
   13260:	strdeq	r2, [r1], -r4
   13264:	strdeq	r2, [r1], -r4
   13268:	strdeq	r2, [r1], -r4
   1326c:	strdeq	r2, [r1], -r4
   13270:	strdeq	r2, [r1], -r4
   13274:	strdeq	r2, [r1], -r4
   13278:	strdeq	r2, [r1], -r4
   1327c:	strdeq	r2, [r1], -r4
   13280:	strdeq	r2, [r1], -r4
   13284:	strdeq	r2, [r1], -r4
   13288:	strdeq	r2, [r1], -r4
   1328c:	strdeq	r2, [r1], -r4
   13290:	muleq	r1, ip, sp
   13294:	andeq	r3, r1, r0, lsr #5
   13298:	muleq	r1, ip, sp
   1329c:	andeq	r2, r1, r4, lsl #28
   132a0:	mov	r3, #0
   132a4:	str	r3, [sp, #40]	; 0x28
   132a8:	b	12980 <__assert_fail@plt+0x1a7c>
   132ac:	mov	r3, #0
   132b0:	str	r3, [sp, #40]	; 0x28
   132b4:	b	12918 <__assert_fail@plt+0x1a14>
   132b8:	mov	r3, #0
   132bc:	str	r3, [sp, #40]	; 0x28
   132c0:	b	1294c <__assert_fail@plt+0x1a48>
   132c4:	ldr	r3, [sp, #44]	; 0x2c
   132c8:	cmp	r3, #0
   132cc:	beq	12864 <__assert_fail@plt+0x1960>
   132d0:	ldr	r3, [sp, #52]	; 0x34
   132d4:	mov	fp, r9
   132d8:	str	r3, [sp, #60]	; 0x3c
   132dc:	b	129dc <__assert_fail@plt+0x1ad8>
   132e0:	ldr	r3, [sp, #44]	; 0x2c
   132e4:	cmp	r3, #0
   132e8:	bne	1371c <__assert_fail@plt+0x2818>
   132ec:	str	r3, [sp, #40]	; 0x28
   132f0:	cmp	sl, #0
   132f4:	ldr	r3, [sp, #84]	; 0x54
   132f8:	clz	r3, r3
   132fc:	lsr	r3, r3, #5
   13300:	moveq	r3, #0
   13304:	cmp	r3, #0
   13308:	strne	sl, [sp, #84]	; 0x54
   1330c:	movne	sl, #0
   13310:	bne	13340 <__assert_fail@plt+0x243c>
   13314:	cmp	sl, r4
   13318:	movhi	r3, #39	; 0x27
   1331c:	strbhi	r3, [r9, r4]
   13320:	add	r3, r4, #1
   13324:	cmp	sl, r3
   13328:	movhi	r2, #92	; 0x5c
   1332c:	strbhi	r2, [r9, r3]
   13330:	add	r3, r4, #2
   13334:	cmp	sl, r3
   13338:	movhi	r2, #39	; 0x27
   1333c:	strbhi	r2, [r9, r3]
   13340:	mov	r3, #0
   13344:	add	r4, r4, #3
   13348:	str	r6, [sp, #80]	; 0x50
   1334c:	mov	fp, r3
   13350:	mov	r5, #39	; 0x27
   13354:	b	12820 <__assert_fail@plt+0x191c>
   13358:	ldr	r3, [sp, #44]	; 0x2c
   1335c:	cmp	r3, #0
   13360:	bne	1371c <__assert_fail@plt+0x2818>
   13364:	mov	r6, #0
   13368:	mov	r5, #63	; 0x3f
   1336c:	str	r3, [sp, #40]	; 0x28
   13370:	mov	r3, fp
   13374:	b	12820 <__assert_fail@plt+0x191c>
   13378:	mov	r2, #0
   1337c:	mov	r3, #0
   13380:	cmn	r8, #1
   13384:	strd	r2, [sp, #128]	; 0x80
   13388:	bne	13398 <__assert_fail@plt+0x2494>
   1338c:	ldr	r0, [sp, #28]
   13390:	bl	10e14 <strlen@plt>
   13394:	mov	r8, r0
   13398:	str	r9, [sp, #100]	; 0x64
   1339c:	mov	r3, #0
   133a0:	strd	sl, [sp, #104]	; 0x68
   133a4:	ldr	sl, [sp, #28]
   133a8:	str	r5, [sp, #112]	; 0x70
   133ac:	mov	r5, r3
   133b0:	ldr	r9, [sp, #68]	; 0x44
   133b4:	str	r4, [sp, #116]	; 0x74
   133b8:	add	r4, r7, r5
   133bc:	add	r3, sp, #128	; 0x80
   133c0:	add	fp, sl, r4
   133c4:	sub	r2, r8, r4
   133c8:	mov	r1, fp
   133cc:	add	r0, sp, #124	; 0x7c
   133d0:	bl	177ec <__assert_fail@plt+0x68e8>
   133d4:	subs	r1, r0, #0
   133d8:	beq	13418 <__assert_fail@plt+0x2514>
   133dc:	cmn	r1, #1
   133e0:	beq	13770 <__assert_fail@plt+0x286c>
   133e4:	cmn	r1, #2
   133e8:	beq	13790 <__assert_fail@plt+0x288c>
   133ec:	cmp	r9, #0
   133f0:	bne	13448 <__assert_fail@plt+0x2544>
   133f4:	ldr	r0, [sp, #124]	; 0x7c
   133f8:	add	r5, r5, r1
   133fc:	bl	10d6c <iswprint@plt>
   13400:	cmp	r0, #0
   13404:	add	r0, sp, #128	; 0x80
   13408:	moveq	r6, #0
   1340c:	bl	10d18 <mbsinit@plt>
   13410:	cmp	r0, #0
   13414:	beq	133b8 <__assert_fail@plt+0x24b4>
   13418:	ldr	r3, [sp, #60]	; 0x3c
   1341c:	add	r9, sp, #100	; 0x64
   13420:	mov	r0, r5
   13424:	ldm	r9, {r9, sl, fp}
   13428:	eor	r2, r6, #1
   1342c:	ldr	r5, [sp, #112]	; 0x70
   13430:	and	r2, r2, r3
   13434:	uxtb	r2, r2
   13438:	ldr	r4, [sp, #116]	; 0x74
   1343c:	cmp	r0, #1
   13440:	bhi	12f5c <__assert_fail@plt+0x2058>
   13444:	b	12f4c <__assert_fail@plt+0x2048>
   13448:	cmp	r1, #1
   1344c:	beq	133f4 <__assert_fail@plt+0x24f0>
   13450:	add	r2, r4, #1
   13454:	add	r3, sl, r1
   13458:	add	r2, sl, r2
   1345c:	add	r4, r3, r4
   13460:	ldrb	r3, [r2], #1
   13464:	sub	r3, r3, #91	; 0x5b
   13468:	cmp	r3, #33	; 0x21
   1346c:	ldrls	pc, [pc, r3, lsl #2]
   13470:	b	134fc <__assert_fail@plt+0x25f8>
   13474:	andeq	r3, r1, r8, lsl #10
   13478:	andeq	r3, r1, r8, lsl #10
   1347c:	strdeq	r3, [r1], -ip
   13480:	andeq	r3, r1, r8, lsl #10
   13484:	strdeq	r3, [r1], -ip
   13488:	andeq	r3, r1, r8, lsl #10
   1348c:	strdeq	r3, [r1], -ip
   13490:	strdeq	r3, [r1], -ip
   13494:	strdeq	r3, [r1], -ip
   13498:	strdeq	r3, [r1], -ip
   1349c:	strdeq	r3, [r1], -ip
   134a0:	strdeq	r3, [r1], -ip
   134a4:	strdeq	r3, [r1], -ip
   134a8:	strdeq	r3, [r1], -ip
   134ac:	strdeq	r3, [r1], -ip
   134b0:	strdeq	r3, [r1], -ip
   134b4:	strdeq	r3, [r1], -ip
   134b8:	strdeq	r3, [r1], -ip
   134bc:	strdeq	r3, [r1], -ip
   134c0:	strdeq	r3, [r1], -ip
   134c4:	strdeq	r3, [r1], -ip
   134c8:	strdeq	r3, [r1], -ip
   134cc:	strdeq	r3, [r1], -ip
   134d0:	strdeq	r3, [r1], -ip
   134d4:	strdeq	r3, [r1], -ip
   134d8:	strdeq	r3, [r1], -ip
   134dc:	strdeq	r3, [r1], -ip
   134e0:	strdeq	r3, [r1], -ip
   134e4:	strdeq	r3, [r1], -ip
   134e8:	strdeq	r3, [r1], -ip
   134ec:	strdeq	r3, [r1], -ip
   134f0:	strdeq	r3, [r1], -ip
   134f4:	strdeq	r3, [r1], -ip
   134f8:	andeq	r3, r1, r8, lsl #10
   134fc:	cmp	r4, r2
   13500:	bne	13460 <__assert_fail@plt+0x255c>
   13504:	b	133f4 <__assert_fail@plt+0x24f0>
   13508:	mov	r3, #2
   1350c:	ldr	fp, [sp, #100]	; 0x64
   13510:	str	r3, [sp, #176]	; 0xb0
   13514:	ldr	sl, [sp, #104]	; 0x68
   13518:	b	129dc <__assert_fail@plt+0x1ad8>
   1351c:	ldr	r2, [sp, #52]	; 0x34
   13520:	mov	fp, r9
   13524:	ldr	r3, [sp, #60]	; 0x3c
   13528:	and	r3, r3, r2
   1352c:	str	r3, [sp, #60]	; 0x3c
   13530:	b	129dc <__assert_fail@plt+0x1ad8>
   13534:	cmp	sl, r4
   13538:	movhi	r2, fp
   1353c:	bhi	128b4 <__assert_fail@plt+0x19b0>
   13540:	mov	r2, r4
   13544:	b	128c4 <__assert_fail@plt+0x19c0>
   13548:	mov	r6, r3
   1354c:	mov	r5, #63	; 0x3f
   13550:	b	12984 <__assert_fail@plt+0x1a80>
   13554:	ldr	r8, [sp, #36]	; 0x24
   13558:	ldr	r6, [sp, #100]	; 0x64
   1355c:	b	12830 <__assert_fail@plt+0x192c>
   13560:	mov	fp, r9
   13564:	ldr	r8, [sp, #36]	; 0x24
   13568:	ldr	r3, [sp, #52]	; 0x34
   1356c:	str	r3, [sp, #60]	; 0x3c
   13570:	b	129dc <__assert_fail@plt+0x1ad8>
   13574:	ldr	r8, [sp, #36]	; 0x24
   13578:	ldr	r6, [sp, #100]	; 0x64
   1357c:	b	126c8 <__assert_fail@plt+0x17c4>
   13580:	mov	r3, #0
   13584:	add	r4, r4, #4
   13588:	mov	fp, r2
   1358c:	mov	r6, r3
   13590:	mov	r5, #48	; 0x30
   13594:	b	12820 <__assert_fail@plt+0x191c>
   13598:	mov	r6, r3
   1359c:	b	1301c <__assert_fail@plt+0x2118>
   135a0:	mov	r3, #1
   135a4:	movw	r2, #32652	; 0x7f8c
   135a8:	movt	r2, #1
   135ac:	mov	r4, r3
   135b0:	mov	r9, sl
   135b4:	str	r3, [sp, #32]
   135b8:	str	sl, [sp, #44]	; 0x2c
   135bc:	str	r3, [sp, #48]	; 0x30
   135c0:	str	sl, [sp, #52]	; 0x34
   135c4:	str	r3, [sp, #56]	; 0x38
   135c8:	str	r3, [sp, #60]	; 0x3c
   135cc:	str	sl, [sp, #64]	; 0x40
   135d0:	str	sl, [sp, #68]	; 0x44
   135d4:	str	r2, [sp, #72]	; 0x48
   135d8:	str	sl, [sp, #80]	; 0x50
   135dc:	str	sl, [sp, #84]	; 0x54
   135e0:	str	sl, [sp, #88]	; 0x58
   135e4:	b	120d4 <__assert_fail@plt+0x11d0>
   135e8:	mov	r3, #0
   135ec:	mov	r5, #48	; 0x30
   135f0:	mov	r6, r3
   135f4:	b	12820 <__assert_fail@plt+0x191c>
   135f8:	cmp	sl, r4
   135fc:	mov	r5, #48	; 0x30
   13600:	movhi	r3, #48	; 0x30
   13604:	strbhi	r3, [r9, r4]
   13608:	add	r3, r2, #2
   1360c:	add	r4, r2, #3
   13610:	cmp	sl, r3
   13614:	movhi	r1, #48	; 0x30
   13618:	strbhi	r1, [r9, r3]
   1361c:	mov	r3, #0
   13620:	b	128fc <__assert_fail@plt+0x19f8>
   13624:	ldr	r3, [sp, #48]	; 0x30
   13628:	str	r3, [sp, #40]	; 0x28
   1362c:	b	12f08 <__assert_fail@plt+0x2004>
   13630:	ldr	r2, [sp, #28]
   13634:	ldrb	r2, [r2, r3]
   13638:	sub	r1, r2, #33	; 0x21
   1363c:	cmp	r1, #29
   13640:	ldrls	pc, [pc, r1, lsl #2]
   13644:	b	12980 <__assert_fail@plt+0x1a7c>
   13648:	andeq	r3, r1, r0, asr #13
   1364c:	andeq	r2, r1, r0, lsl #19
   13650:	andeq	r2, r1, r0, lsl #19
   13654:	andeq	r2, r1, r0, lsl #19
   13658:	andeq	r2, r1, r0, lsl #19
   1365c:	andeq	r2, r1, r0, lsl #19
   13660:	andeq	r3, r1, r0, asr #13
   13664:	andeq	r3, r1, r0, asr #13
   13668:	andeq	r3, r1, r0, asr #13
   1366c:	andeq	r2, r1, r0, lsl #19
   13670:	andeq	r2, r1, r0, lsl #19
   13674:	andeq	r2, r1, r0, lsl #19
   13678:	andeq	r3, r1, r0, asr #13
   1367c:	andeq	r2, r1, r0, lsl #19
   13680:	andeq	r3, r1, r0, asr #13
   13684:	andeq	r2, r1, r0, lsl #19
   13688:	andeq	r2, r1, r0, lsl #19
   1368c:	andeq	r2, r1, r0, lsl #19
   13690:	andeq	r2, r1, r0, lsl #19
   13694:	andeq	r2, r1, r0, lsl #19
   13698:	andeq	r2, r1, r0, lsl #19
   1369c:	andeq	r2, r1, r0, lsl #19
   136a0:	andeq	r2, r1, r0, lsl #19
   136a4:	andeq	r2, r1, r0, lsl #19
   136a8:	andeq	r2, r1, r0, lsl #19
   136ac:	andeq	r2, r1, r0, lsl #19
   136b0:	andeq	r2, r1, r0, lsl #19
   136b4:	andeq	r3, r1, r0, asr #13
   136b8:	andeq	r3, r1, r0, asr #13
   136bc:	andeq	r3, r1, r0, asr #13
   136c0:	ldr	r1, [sp, #44]	; 0x2c
   136c4:	cmp	r1, #0
   136c8:	bne	13928 <__assert_fail@plt+0x2a24>
   136cc:	cmp	sl, r4
   136d0:	mov	r7, r3
   136d4:	movhi	r1, #63	; 0x3f
   136d8:	mov	r5, r2
   136dc:	mov	r3, fp
   136e0:	strbhi	r1, [r9, r4]
   136e4:	add	r1, r4, #1
   136e8:	cmp	sl, r1
   136ec:	movhi	r0, #34	; 0x22
   136f0:	strbhi	r0, [r9, r1]
   136f4:	add	r1, r4, #2
   136f8:	cmp	sl, r1
   136fc:	movhi	r0, #34	; 0x22
   13700:	strbhi	r0, [r9, r1]
   13704:	add	r1, r4, #3
   13708:	add	r4, r4, #4
   1370c:	cmp	sl, r1
   13710:	movhi	r0, #63	; 0x3f
   13714:	strbhi	r0, [r9, r1]
   13718:	b	128fc <__assert_fail@plt+0x19f8>
   1371c:	mov	fp, r9
   13720:	b	129dc <__assert_fail@plt+0x1ad8>
   13724:	ldr	r3, [sp, #188]	; 0xbc
   13728:	ldrb	r3, [r3]
   1372c:	cmp	r3, #0
   13730:	beq	1206c <__assert_fail@plt+0x1168>
   13734:	ldr	r2, [sp, #188]	; 0xbc
   13738:	cmp	sl, r4
   1373c:	bls	1375c <__assert_fail@plt+0x2858>
   13740:	strb	r3, [fp, r4]
   13744:	add	r4, r4, #1
   13748:	ldrb	r3, [r2, #1]!
   1374c:	cmp	r3, #0
   13750:	beq	1206c <__assert_fail@plt+0x1168>
   13754:	cmp	sl, r4
   13758:	bhi	13740 <__assert_fail@plt+0x283c>
   1375c:	ldrb	r3, [r2, #1]!
   13760:	add	r4, r4, #1
   13764:	cmp	r3, #0
   13768:	bne	13738 <__assert_fail@plt+0x2834>
   1376c:	b	1206c <__assert_fail@plt+0x1168>
   13770:	add	r9, sp, #100	; 0x64
   13774:	mov	r0, r5
   13778:	ldr	r2, [sp, #60]	; 0x3c
   1377c:	mov	r6, #0
   13780:	ldm	r9, {r9, sl, fp}
   13784:	ldr	r5, [sp, #112]	; 0x70
   13788:	ldr	r4, [sp, #116]	; 0x74
   1378c:	b	1343c <__assert_fail@plt+0x2538>
   13790:	cmp	r4, r8
   13794:	add	r9, sp, #100	; 0x64
   13798:	mov	r1, r4
   1379c:	mov	r2, fp
   137a0:	ldm	r9, {r9, sl, fp}
   137a4:	mov	r3, r5
   137a8:	mov	r0, r5
   137ac:	ldr	r5, [sp, #112]	; 0x70
   137b0:	ldr	r4, [sp, #116]	; 0x74
   137b4:	bcs	137e8 <__assert_fail@plt+0x28e4>
   137b8:	ldrb	r6, [r2]
   137bc:	cmp	r6, #0
   137c0:	bne	137d4 <__assert_fail@plt+0x28d0>
   137c4:	b	13920 <__assert_fail@plt+0x2a1c>
   137c8:	ldrb	r6, [r2, #1]!
   137cc:	cmp	r6, #0
   137d0:	beq	138b8 <__assert_fail@plt+0x29b4>
   137d4:	add	r3, r3, #1
   137d8:	add	r1, r7, r3
   137dc:	cmp	r8, r1
   137e0:	bhi	137c8 <__assert_fail@plt+0x28c4>
   137e4:	mov	r0, r3
   137e8:	mov	r6, #0
   137ec:	ldr	r2, [sp, #60]	; 0x3c
   137f0:	b	1343c <__assert_fail@plt+0x2538>
   137f4:	mov	r3, #1
   137f8:	mov	r4, #0
   137fc:	mov	r9, r4
   13800:	str	r3, [sp, #32]
   13804:	str	r3, [sp, #44]	; 0x2c
   13808:	str	r3, [sp, #48]	; 0x30
   1380c:	str	r4, [sp, #52]	; 0x34
   13810:	str	r3, [sp, #56]	; 0x38
   13814:	str	r3, [sp, #60]	; 0x3c
   13818:	str	r3, [sp, #88]	; 0x58
   1381c:	movw	r3, #32652	; 0x7f8c
   13820:	movt	r3, #1
   13824:	str	r4, [sp, #64]	; 0x40
   13828:	str	r4, [sp, #68]	; 0x44
   1382c:	str	r3, [sp, #72]	; 0x48
   13830:	str	r4, [sp, #80]	; 0x50
   13834:	str	r4, [sp, #84]	; 0x54
   13838:	b	120d4 <__assert_fail@plt+0x11d0>
   1383c:	mov	fp, r9
   13840:	b	129f0 <__assert_fail@plt+0x1aec>
   13844:	ldr	r3, [sp, #48]	; 0x30
   13848:	b	13364 <__assert_fail@plt+0x2460>
   1384c:	mov	r2, r3
   13850:	ldr	r3, [sp, #72]	; 0x48
   13854:	cmp	r3, #0
   13858:	moveq	r2, #0
   1385c:	andne	r2, r2, #1
   13860:	cmp	r2, #0
   13864:	beq	13894 <__assert_fail@plt+0x2990>
   13868:	mov	r2, r3
   1386c:	ldrb	r3, [r3]
   13870:	cmp	r3, #0
   13874:	beq	13894 <__assert_fail@plt+0x2990>
   13878:	cmp	sl, r4
   1387c:	bls	138a4 <__assert_fail@plt+0x29a0>
   13880:	strb	r3, [fp, r4]
   13884:	add	r4, r4, #1
   13888:	ldrb	r3, [r2, #1]!
   1388c:	cmp	r3, #0
   13890:	bne	13878 <__assert_fail@plt+0x2974>
   13894:	cmp	sl, r4
   13898:	movhi	r3, #0
   1389c:	strbhi	r3, [fp, r4]
   138a0:	b	12a2c <__assert_fail@plt+0x1b28>
   138a4:	ldrb	r3, [r2, #1]!
   138a8:	add	r4, r4, #1
   138ac:	cmp	r3, #0
   138b0:	bne	13878 <__assert_fail@plt+0x2974>
   138b4:	b	13894 <__assert_fail@plt+0x2990>
   138b8:	mov	r0, r3
   138bc:	ldr	r2, [sp, #60]	; 0x3c
   138c0:	b	1343c <__assert_fail@plt+0x2538>
   138c4:	mov	ip, #5
   138c8:	mov	r3, r8
   138cc:	ldr	r1, [sp, #84]	; 0x54
   138d0:	str	ip, [sp]
   138d4:	ldr	r2, [sp, #180]	; 0xb4
   138d8:	ldr	ip, [sp, #188]	; 0xbc
   138dc:	ldr	r0, [sp, #184]	; 0xb8
   138e0:	str	r2, [sp, #4]
   138e4:	ldr	r2, [sp, #28]
   138e8:	str	ip, [sp, #12]
   138ec:	ldr	ip, [sp, #192]	; 0xc0
   138f0:	str	r0, [sp, #8]
   138f4:	mov	r0, fp
   138f8:	str	ip, [sp, #16]
   138fc:	bl	11fb0 <__assert_fail@plt+0x10ac>
   13900:	mov	r4, r0
   13904:	b	12a2c <__assert_fail@plt+0x1b28>
   13908:	mov	r6, r3
   1390c:	str	r3, [sp, #40]	; 0x28
   13910:	b	1299c <__assert_fail@plt+0x1a98>
   13914:	mov	r3, #2
   13918:	str	r3, [sp, #176]	; 0xb0
   1391c:	b	129dc <__assert_fail@plt+0x1ad8>
   13920:	ldr	r2, [sp, #60]	; 0x3c
   13924:	b	1343c <__assert_fail@plt+0x2538>
   13928:	mov	r3, #5
   1392c:	mov	fp, r9
   13930:	str	r3, [sp, #176]	; 0xb0
   13934:	b	129f0 <__assert_fail@plt+0x1aec>
   13938:	mov	r1, #1
   1393c:	mov	r9, #0
   13940:	mov	r3, r9
   13944:	mov	r2, r9
   13948:	str	r1, [sp, #32]
   1394c:	str	sl, [sp, #84]	; 0x54
   13950:	b	12778 <__assert_fail@plt+0x1874>
   13954:	mov	r3, #0
   13958:	mov	r2, #1
   1395c:	mov	r9, r3
   13960:	mov	r4, r3
   13964:	str	r2, [sp, #32]
   13968:	strd	r2, [sp, #44]	; 0x2c
   1396c:	strd	r2, [sp, #56]	; 0x38
   13970:	str	r3, [sp, #80]	; 0x50
   13974:	str	r3, [sp, #84]	; 0x54
   13978:	str	r3, [sp, #88]	; 0x58
   1397c:	movw	r3, #32672	; 0x7fa0
   13980:	movt	r3, #1
   13984:	str	r2, [sp, #52]	; 0x34
   13988:	str	r2, [sp, #64]	; 0x40
   1398c:	str	r2, [sp, #68]	; 0x44
   13990:	str	r3, [sp, #72]	; 0x48
   13994:	b	120d4 <__assert_fail@plt+0x11d0>
   13998:	bl	10ef8 <abort@plt>
   1399c:	strd	r4, [sp, #-36]!	; 0xffffffdc
   139a0:	mov	r4, r0
   139a4:	mov	r5, r3
   139a8:	strd	r6, [sp, #8]
   139ac:	movw	r7, #37104	; 0x90f0
   139b0:	movt	r7, #2
   139b4:	strd	r8, [sp, #16]
   139b8:	strd	sl, [sp, #24]
   139bc:	mov	sl, r1
   139c0:	mov	fp, r2
   139c4:	str	lr, [sp, #32]
   139c8:	sub	sp, sp, #60	; 0x3c
   139cc:	bl	10e2c <__errno_location@plt>
   139d0:	mov	r8, r0
   139d4:	cmn	r4, #-2147483647	; 0x80000001
   139d8:	ldr	r6, [r7]
   139dc:	movne	r0, #0
   139e0:	moveq	r0, #1
   139e4:	ldr	r3, [r8]
   139e8:	orrs	r0, r0, r4, lsr #31
   139ec:	str	r3, [sp, #28]
   139f0:	bne	13b80 <__assert_fail@plt+0x2c7c>
   139f4:	ldr	r3, [r7, #4]
   139f8:	cmp	r3, r4
   139fc:	bgt	13a5c <__assert_fail@plt+0x2b58>
   13a00:	add	r1, r7, #8
   13a04:	sub	r2, r4, r3
   13a08:	str	r3, [sp, #52]	; 0x34
   13a0c:	cmp	r6, r1
   13a10:	add	r2, r2, #1
   13a14:	beq	13b58 <__assert_fail@plt+0x2c54>
   13a18:	mov	r1, #8
   13a1c:	mov	r0, r6
   13a20:	mvn	r3, #-2147483648	; 0x80000000
   13a24:	str	r1, [sp]
   13a28:	add	r1, sp, #52	; 0x34
   13a2c:	bl	162bc <__assert_fail@plt+0x53b8>
   13a30:	mov	r6, r0
   13a34:	str	r0, [r7]
   13a38:	ldr	r0, [r7, #4]
   13a3c:	mov	r1, #0
   13a40:	ldr	r2, [sp, #52]	; 0x34
   13a44:	sub	r2, r2, r0
   13a48:	add	r0, r6, r0, lsl #3
   13a4c:	lsl	r2, r2, #3
   13a50:	bl	10e44 <memset@plt>
   13a54:	ldr	r3, [sp, #52]	; 0x34
   13a58:	str	r3, [r7, #4]
   13a5c:	ldr	r1, [r5, #4]
   13a60:	add	r0, r6, r4, lsl #3
   13a64:	add	ip, r5, #8
   13a68:	mov	r3, fp
   13a6c:	mov	r2, sl
   13a70:	ldr	r7, [r0, #4]
   13a74:	str	r0, [sp, #36]	; 0x24
   13a78:	str	ip, [sp, #40]	; 0x28
   13a7c:	orr	r0, r1, #1
   13a80:	ldr	r9, [r6, r4, lsl #3]
   13a84:	str	ip, [sp, #8]
   13a88:	ldr	lr, [r5, #44]	; 0x2c
   13a8c:	str	r0, [sp, #4]
   13a90:	ldr	ip, [r5]
   13a94:	mov	r1, r9
   13a98:	str	ip, [sp, #32]
   13a9c:	ldr	ip, [r5, #40]	; 0x28
   13aa0:	str	ip, [sp, #12]
   13aa4:	ldr	ip, [sp, #32]
   13aa8:	str	lr, [sp, #16]
   13aac:	str	r0, [sp, #44]	; 0x2c
   13ab0:	mov	r0, r7
   13ab4:	str	ip, [sp]
   13ab8:	bl	11fb0 <__assert_fail@plt+0x10ac>
   13abc:	cmp	r9, r0
   13ac0:	bhi	13b30 <__assert_fail@plt+0x2c2c>
   13ac4:	add	r9, r0, #1
   13ac8:	movw	r3, #37236	; 0x9174
   13acc:	movt	r3, #2
   13ad0:	cmp	r7, r3
   13ad4:	str	r9, [r6, r4, lsl #3]
   13ad8:	beq	13ae4 <__assert_fail@plt+0x2be0>
   13adc:	mov	r0, r7
   13ae0:	bl	17740 <__assert_fail@plt+0x683c>
   13ae4:	mov	r0, r9
   13ae8:	bl	16018 <__assert_fail@plt+0x5114>
   13aec:	ldr	ip, [r5]
   13af0:	mov	r3, fp
   13af4:	mov	r2, sl
   13af8:	mov	r1, r9
   13afc:	mov	r7, r0
   13b00:	ldr	lr, [sp, #36]	; 0x24
   13b04:	ldr	r4, [r5, #40]	; 0x28
   13b08:	str	r0, [lr, #4]
   13b0c:	ldr	lr, [r5, #44]	; 0x2c
   13b10:	str	ip, [sp]
   13b14:	ldr	ip, [sp, #44]	; 0x2c
   13b18:	str	ip, [sp, #4]
   13b1c:	ldr	ip, [sp, #40]	; 0x28
   13b20:	str	r4, [sp, #12]
   13b24:	str	lr, [sp, #16]
   13b28:	str	ip, [sp, #8]
   13b2c:	bl	11fb0 <__assert_fail@plt+0x10ac>
   13b30:	ldr	r3, [sp, #28]
   13b34:	mov	r0, r7
   13b38:	str	r3, [r8]
   13b3c:	add	sp, sp, #60	; 0x3c
   13b40:	ldrd	r4, [sp]
   13b44:	ldrd	r6, [sp, #8]
   13b48:	ldrd	r8, [sp, #16]
   13b4c:	ldrd	sl, [sp, #24]
   13b50:	add	sp, sp, #32
   13b54:	pop	{pc}		; (ldr pc, [sp], #4)
   13b58:	mov	r1, #8
   13b5c:	mvn	r3, #-2147483648	; 0x80000000
   13b60:	str	r1, [sp]
   13b64:	add	r1, sp, #52	; 0x34
   13b68:	bl	162bc <__assert_fail@plt+0x53b8>
   13b6c:	ldrd	r2, [r7, #8]
   13b70:	mov	r6, r0
   13b74:	str	r0, [r7]
   13b78:	strd	r2, [r0]
   13b7c:	b	13a38 <__assert_fail@plt+0x2b34>
   13b80:	bl	10ef8 <abort@plt>
   13b84:	strd	r4, [sp, #-16]!
   13b88:	mov	r5, r0
   13b8c:	str	r6, [sp, #8]
   13b90:	str	lr, [sp, #12]
   13b94:	bl	10e2c <__errno_location@plt>
   13b98:	mov	r4, r0
   13b9c:	cmp	r5, #0
   13ba0:	ldr	r0, [pc, #32]	; 13bc8 <__assert_fail@plt+0x2cc4>
   13ba4:	mov	r1, #48	; 0x30
   13ba8:	movne	r0, r5
   13bac:	ldr	r6, [r4]
   13bb0:	bl	1645c <__assert_fail@plt+0x5558>
   13bb4:	str	r6, [r4]
   13bb8:	ldrd	r4, [sp]
   13bbc:	ldr	r6, [sp, #8]
   13bc0:	add	sp, sp, #12
   13bc4:	pop	{pc}		; (ldr pc, [sp], #4)
   13bc8:	andeq	r9, r2, r4, ror r2
   13bcc:	ldr	r3, [pc, #12]	; 13be0 <__assert_fail@plt+0x2cdc>
   13bd0:	cmp	r0, #0
   13bd4:	moveq	r0, r3
   13bd8:	ldr	r0, [r0]
   13bdc:	bx	lr
   13be0:	andeq	r9, r2, r4, ror r2
   13be4:	ldr	r3, [pc, #12]	; 13bf8 <__assert_fail@plt+0x2cf4>
   13be8:	cmp	r0, #0
   13bec:	moveq	r0, r3
   13bf0:	str	r1, [r0]
   13bf4:	bx	lr
   13bf8:	andeq	r9, r2, r4, ror r2
   13bfc:	ldr	r3, [pc, #52]	; 13c38 <__assert_fail@plt+0x2d34>
   13c00:	cmp	r0, #0
   13c04:	push	{lr}		; (str lr, [sp, #-4]!)
   13c08:	lsr	lr, r1, #5
   13c0c:	and	r1, r1, #31
   13c10:	moveq	r0, r3
   13c14:	add	r3, r0, #8
   13c18:	ldr	ip, [r3, lr, lsl #2]
   13c1c:	lsr	r0, ip, r1
   13c20:	eor	r2, r2, r0
   13c24:	and	r0, r0, #1
   13c28:	and	r2, r2, #1
   13c2c:	eor	r1, ip, r2, lsl r1
   13c30:	str	r1, [r3, lr, lsl #2]
   13c34:	pop	{pc}		; (ldr pc, [sp], #4)
   13c38:	andeq	r9, r2, r4, ror r2
   13c3c:	ldr	r3, [pc, #16]	; 13c54 <__assert_fail@plt+0x2d50>
   13c40:	cmp	r0, #0
   13c44:	movne	r3, r0
   13c48:	ldr	r0, [r3, #4]
   13c4c:	str	r1, [r3, #4]
   13c50:	bx	lr
   13c54:	andeq	r9, r2, r4, ror r2
   13c58:	ldr	r3, [pc, #48]	; 13c90 <__assert_fail@plt+0x2d8c>
   13c5c:	cmp	r0, #0
   13c60:	mov	ip, #10
   13c64:	moveq	r0, r3
   13c68:	cmp	r2, #0
   13c6c:	cmpne	r1, #0
   13c70:	str	ip, [r0]
   13c74:	beq	13c84 <__assert_fail@plt+0x2d80>
   13c78:	str	r1, [r0, #40]	; 0x28
   13c7c:	str	r2, [r0, #44]	; 0x2c
   13c80:	bx	lr
   13c84:	str	r4, [sp, #-8]!
   13c88:	str	lr, [sp, #4]
   13c8c:	bl	10ef8 <abort@plt>
   13c90:	andeq	r9, r2, r4, ror r2
   13c94:	strd	r4, [sp, #-28]!	; 0xffffffe4
   13c98:	strd	r6, [sp, #8]
   13c9c:	mov	r7, r0
   13ca0:	mov	r6, r1
   13ca4:	strd	r8, [sp, #16]
   13ca8:	mov	r8, r2
   13cac:	mov	r9, r3
   13cb0:	str	lr, [sp, #24]
   13cb4:	sub	sp, sp, #28
   13cb8:	ldr	r4, [sp, #56]	; 0x38
   13cbc:	ldr	ip, [pc, #104]	; 13d2c <__assert_fail@plt+0x2e28>
   13cc0:	cmp	r4, #0
   13cc4:	moveq	r4, ip
   13cc8:	bl	10e2c <__errno_location@plt>
   13ccc:	ldr	ip, [r4, #44]	; 0x2c
   13cd0:	mov	r5, r0
   13cd4:	mov	r1, r6
   13cd8:	add	lr, r4, #8
   13cdc:	mov	r3, r9
   13ce0:	ldr	r6, [r5]
   13ce4:	mov	r2, r8
   13ce8:	mov	r0, r7
   13cec:	str	ip, [sp, #16]
   13cf0:	ldr	ip, [r4, #40]	; 0x28
   13cf4:	str	lr, [sp, #8]
   13cf8:	str	ip, [sp, #12]
   13cfc:	ldr	ip, [r4, #4]
   13d00:	str	ip, [sp, #4]
   13d04:	ldr	ip, [r4]
   13d08:	str	ip, [sp]
   13d0c:	bl	11fb0 <__assert_fail@plt+0x10ac>
   13d10:	str	r6, [r5]
   13d14:	add	sp, sp, #28
   13d18:	ldrd	r4, [sp]
   13d1c:	ldrd	r6, [sp, #8]
   13d20:	ldrd	r8, [sp, #16]
   13d24:	add	sp, sp, #24
   13d28:	pop	{pc}		; (ldr pc, [sp], #4)
   13d2c:	andeq	r9, r2, r4, ror r2
   13d30:	strd	r4, [sp, #-36]!	; 0xffffffdc
   13d34:	cmp	r2, #0
   13d38:	ldr	r4, [pc, #192]	; 13e00 <__assert_fail@plt+0x2efc>
   13d3c:	movne	r4, r2
   13d40:	strd	r6, [sp, #8]
   13d44:	strd	r8, [sp, #16]
   13d48:	mov	r9, r1
   13d4c:	mov	r8, r0
   13d50:	strd	sl, [sp, #24]
   13d54:	str	lr, [sp, #32]
   13d58:	sub	sp, sp, #36	; 0x24
   13d5c:	bl	10e2c <__errno_location@plt>
   13d60:	ldr	r5, [r4, #4]
   13d64:	mov	r6, r0
   13d68:	add	r7, r4, #8
   13d6c:	mov	r1, #0
   13d70:	mov	r3, r9
   13d74:	ldr	ip, [r4, #44]	; 0x2c
   13d78:	mov	r2, r8
   13d7c:	mov	r0, r1
   13d80:	ldr	sl, [r6]
   13d84:	orr	r5, r5, #1
   13d88:	str	ip, [sp, #16]
   13d8c:	ldr	ip, [r4, #40]	; 0x28
   13d90:	stmib	sp, {r5, r7, ip}
   13d94:	ldr	ip, [r4]
   13d98:	str	ip, [sp]
   13d9c:	bl	11fb0 <__assert_fail@plt+0x10ac>
   13da0:	add	r1, r0, #1
   13da4:	mov	r0, r1
   13da8:	str	r1, [sp, #28]
   13dac:	bl	16018 <__assert_fail@plt+0x5114>
   13db0:	ldr	ip, [r4, #44]	; 0x2c
   13db4:	mov	fp, r0
   13db8:	mov	r3, r9
   13dbc:	mov	r2, r8
   13dc0:	ldr	r1, [sp, #28]
   13dc4:	str	ip, [sp, #16]
   13dc8:	ldr	ip, [r4, #40]	; 0x28
   13dcc:	stmib	sp, {r5, r7, ip}
   13dd0:	ldr	ip, [r4]
   13dd4:	str	ip, [sp]
   13dd8:	bl	11fb0 <__assert_fail@plt+0x10ac>
   13ddc:	mov	r0, fp
   13de0:	str	sl, [r6]
   13de4:	add	sp, sp, #36	; 0x24
   13de8:	ldrd	r4, [sp]
   13dec:	ldrd	r6, [sp, #8]
   13df0:	ldrd	r8, [sp, #16]
   13df4:	ldrd	sl, [sp, #24]
   13df8:	add	sp, sp, #32
   13dfc:	pop	{pc}		; (ldr pc, [sp], #4)
   13e00:	andeq	r9, r2, r4, ror r2
   13e04:	strd	r4, [sp, #-36]!	; 0xffffffdc
   13e08:	cmp	r3, #0
   13e0c:	ldr	r4, [pc, #220]	; 13ef0 <__assert_fail@plt+0x2fec>
   13e10:	movne	r4, r3
   13e14:	strd	r6, [sp, #8]
   13e18:	mov	r6, r2
   13e1c:	strd	r8, [sp, #16]
   13e20:	mov	r9, r0
   13e24:	strd	sl, [sp, #24]
   13e28:	mov	sl, r1
   13e2c:	str	lr, [sp, #32]
   13e30:	sub	sp, sp, #44	; 0x2c
   13e34:	bl	10e2c <__errno_location@plt>
   13e38:	ldr	r5, [r4, #4]
   13e3c:	mov	r7, r0
   13e40:	mov	r1, #0
   13e44:	add	r8, r4, #8
   13e48:	mov	r3, sl
   13e4c:	ldr	ip, [r4, #44]	; 0x2c
   13e50:	mov	r2, r9
   13e54:	mov	r0, r1
   13e58:	ldr	lr, [r7]
   13e5c:	cmp	r6, r1
   13e60:	orreq	r5, r5, #1
   13e64:	str	ip, [sp, #16]
   13e68:	ldr	ip, [r4, #40]	; 0x28
   13e6c:	stmib	sp, {r5, r8, ip}
   13e70:	ldr	ip, [r4]
   13e74:	str	lr, [sp, #28]
   13e78:	str	ip, [sp]
   13e7c:	bl	11fb0 <__assert_fail@plt+0x10ac>
   13e80:	add	r1, r0, #1
   13e84:	mov	fp, r0
   13e88:	mov	r0, r1
   13e8c:	str	r1, [sp, #36]	; 0x24
   13e90:	bl	16018 <__assert_fail@plt+0x5114>
   13e94:	ldr	ip, [r4, #44]	; 0x2c
   13e98:	mov	r3, sl
   13e9c:	mov	r2, r9
   13ea0:	ldr	r1, [sp, #36]	; 0x24
   13ea4:	str	ip, [sp, #16]
   13ea8:	ldr	ip, [r4, #40]	; 0x28
   13eac:	str	r0, [sp, #32]
   13eb0:	stmib	sp, {r5, r8, ip}
   13eb4:	ldr	ip, [r4]
   13eb8:	str	ip, [sp]
   13ebc:	bl	11fb0 <__assert_fail@plt+0x10ac>
   13ec0:	ldr	lr, [sp, #28]
   13ec4:	cmp	r6, #0
   13ec8:	ldr	r0, [sp, #32]
   13ecc:	str	lr, [r7]
   13ed0:	strne	fp, [r6]
   13ed4:	add	sp, sp, #44	; 0x2c
   13ed8:	ldrd	r4, [sp]
   13edc:	ldrd	r6, [sp, #8]
   13ee0:	ldrd	r8, [sp, #16]
   13ee4:	ldrd	sl, [sp, #24]
   13ee8:	add	sp, sp, #32
   13eec:	pop	{pc}		; (ldr pc, [sp], #4)
   13ef0:	andeq	r9, r2, r4, ror r2
   13ef4:	strd	r4, [sp, #-24]!	; 0xffffffe8
   13ef8:	movw	r5, #37104	; 0x90f0
   13efc:	movt	r5, #2
   13f00:	ldr	r3, [r5, #4]
   13f04:	strd	r6, [sp, #8]
   13f08:	str	r8, [sp, #16]
   13f0c:	str	lr, [sp, #20]
   13f10:	ldr	r7, [r5]
   13f14:	cmp	r3, #1
   13f18:	ble	13f3c <__assert_fail@plt+0x3038>
   13f1c:	mov	r4, #1
   13f20:	add	r6, r7, #4
   13f24:	ldr	r0, [r6, r4, lsl #3]
   13f28:	add	r4, r4, #1
   13f2c:	bl	17740 <__assert_fail@plt+0x683c>
   13f30:	ldr	r3, [r5, #4]
   13f34:	cmp	r3, r4
   13f38:	bgt	13f24 <__assert_fail@plt+0x3020>
   13f3c:	ldr	r0, [r7, #4]
   13f40:	movw	r4, #37236	; 0x9174
   13f44:	movt	r4, #2
   13f48:	cmp	r0, r4
   13f4c:	beq	13f60 <__assert_fail@plt+0x305c>
   13f50:	bl	17740 <__assert_fail@plt+0x683c>
   13f54:	mov	r3, #256	; 0x100
   13f58:	str	r3, [r5, #8]
   13f5c:	str	r4, [r5, #12]
   13f60:	ldr	r4, [pc, #44]	; 13f94 <__assert_fail@plt+0x3090>
   13f64:	cmp	r7, r4
   13f68:	beq	13f78 <__assert_fail@plt+0x3074>
   13f6c:	mov	r0, r7
   13f70:	bl	17740 <__assert_fail@plt+0x683c>
   13f74:	str	r4, [r5]
   13f78:	mov	r3, #1
   13f7c:	ldrd	r6, [sp, #8]
   13f80:	str	r3, [r5, #4]
   13f84:	ldrd	r4, [sp]
   13f88:	ldr	r8, [sp, #16]
   13f8c:	add	sp, sp, #20
   13f90:	pop	{pc}		; (ldr pc, [sp], #4)
   13f94:	strdeq	r9, [r2], -r8
   13f98:	ldr	r3, [pc, #4]	; 13fa4 <__assert_fail@plt+0x30a0>
   13f9c:	mvn	r2, #0
   13fa0:	b	1399c <__assert_fail@plt+0x2a98>
   13fa4:	andeq	r9, r2, r4, ror r2
   13fa8:	ldr	r3, [pc]	; 13fb0 <__assert_fail@plt+0x30ac>
   13fac:	b	1399c <__assert_fail@plt+0x2a98>
   13fb0:	andeq	r9, r2, r4, ror r2
   13fb4:	strd	r4, [sp, #-36]!	; 0xffffffdc
   13fb8:	movw	r4, #37104	; 0x90f0
   13fbc:	movt	r4, #2
   13fc0:	strd	r6, [sp, #8]
   13fc4:	strd	r8, [sp, #16]
   13fc8:	strd	sl, [sp, #24]
   13fcc:	mov	sl, r0
   13fd0:	str	lr, [sp, #32]
   13fd4:	sub	sp, sp, #44	; 0x2c
   13fd8:	bl	10e2c <__errno_location@plt>
   13fdc:	ldr	r3, [r0]
   13fe0:	mov	r8, r0
   13fe4:	ldr	r2, [r4, #4]
   13fe8:	ldr	r5, [r4]
   13fec:	str	r3, [sp, #28]
   13ff0:	cmp	r2, #0
   13ff4:	bgt	14050 <__assert_fail@plt+0x314c>
   13ff8:	add	r3, r4, #8
   13ffc:	str	r2, [sp, #36]	; 0x24
   14000:	rsb	r2, r2, #1
   14004:	cmp	r5, r3
   14008:	beq	1411c <__assert_fail@plt+0x3218>
   1400c:	mov	r1, #8
   14010:	mov	r0, r5
   14014:	mvn	r3, #-2147483648	; 0x80000000
   14018:	str	r1, [sp]
   1401c:	add	r1, sp, #36	; 0x24
   14020:	bl	162bc <__assert_fail@plt+0x53b8>
   14024:	mov	r5, r0
   14028:	str	r0, [r4]
   1402c:	ldr	r0, [r4, #4]
   14030:	mov	r1, #0
   14034:	ldr	r2, [sp, #36]	; 0x24
   14038:	sub	r2, r2, r0
   1403c:	add	r0, r5, r0, lsl #3
   14040:	lsl	r2, r2, #3
   14044:	bl	10e44 <memset@plt>
   14048:	ldr	r3, [sp, #36]	; 0x24
   1404c:	str	r3, [r4, #4]
   14050:	movw	r4, #37236	; 0x9174
   14054:	movt	r4, #2
   14058:	ldr	r9, [r5]
   1405c:	add	fp, r4, #264	; 0x108
   14060:	mvn	r3, #0
   14064:	ldr	r7, [r4, #260]	; 0x104
   14068:	mov	r2, sl
   1406c:	ldr	r6, [r5, #4]
   14070:	str	fp, [sp, #8]
   14074:	mov	r1, r9
   14078:	ldr	ip, [r4, #256]	; 0x100
   1407c:	orr	r7, r7, #1
   14080:	ldr	lr, [r4, #300]	; 0x12c
   14084:	mov	r0, r6
   14088:	str	ip, [sp]
   1408c:	str	r7, [sp, #4]
   14090:	str	lr, [sp, #16]
   14094:	ldr	ip, [r4, #296]	; 0x128
   14098:	str	ip, [sp, #12]
   1409c:	bl	11fb0 <__assert_fail@plt+0x10ac>
   140a0:	cmp	r9, r0
   140a4:	bhi	140f4 <__assert_fail@plt+0x31f0>
   140a8:	add	r9, r0, #1
   140ac:	cmp	r6, r4
   140b0:	str	r9, [r5]
   140b4:	beq	140c0 <__assert_fail@plt+0x31bc>
   140b8:	mov	r0, r6
   140bc:	bl	17740 <__assert_fail@plt+0x683c>
   140c0:	mov	r0, r9
   140c4:	bl	16018 <__assert_fail@plt+0x5114>
   140c8:	ldr	r3, [r4, #256]	; 0x100
   140cc:	mov	r2, sl
   140d0:	mov	r1, r9
   140d4:	mov	r6, r0
   140d8:	ldr	lr, [r4, #296]	; 0x128
   140dc:	ldr	ip, [r4, #300]	; 0x12c
   140e0:	str	r0, [r5, #4]
   140e4:	stm	sp, {r3, r7, fp, lr}
   140e8:	mvn	r3, #0
   140ec:	str	ip, [sp, #16]
   140f0:	bl	11fb0 <__assert_fail@plt+0x10ac>
   140f4:	ldr	r3, [sp, #28]
   140f8:	mov	r0, r6
   140fc:	str	r3, [r8]
   14100:	add	sp, sp, #44	; 0x2c
   14104:	ldrd	r4, [sp]
   14108:	ldrd	r6, [sp, #8]
   1410c:	ldrd	r8, [sp, #16]
   14110:	ldrd	sl, [sp, #24]
   14114:	add	sp, sp, #32
   14118:	pop	{pc}		; (ldr pc, [sp], #4)
   1411c:	mov	r0, #8
   14120:	mvn	r3, #-2147483648	; 0x80000000
   14124:	add	r1, sp, #36	; 0x24
   14128:	str	r0, [sp]
   1412c:	mov	r0, #0
   14130:	bl	162bc <__assert_fail@plt+0x53b8>
   14134:	ldrd	r2, [r4, #8]
   14138:	mov	r5, r0
   1413c:	str	r0, [r4]
   14140:	strd	r2, [r0]
   14144:	b	1402c <__assert_fail@plt+0x3128>
   14148:	strd	r4, [sp, #-36]!	; 0xffffffdc
   1414c:	movw	r4, #37104	; 0x90f0
   14150:	movt	r4, #2
   14154:	strd	r6, [sp, #8]
   14158:	strd	r8, [sp, #16]
   1415c:	strd	sl, [sp, #24]
   14160:	mov	sl, r0
   14164:	mov	fp, r1
   14168:	str	lr, [sp, #32]
   1416c:	sub	sp, sp, #44	; 0x2c
   14170:	bl	10e2c <__errno_location@plt>
   14174:	ldr	r3, [r0]
   14178:	mov	r8, r0
   1417c:	ldr	r2, [r4, #4]
   14180:	ldr	r5, [r4]
   14184:	str	r3, [sp, #28]
   14188:	cmp	r2, #0
   1418c:	bgt	141e8 <__assert_fail@plt+0x32e4>
   14190:	add	r3, r4, #8
   14194:	str	r2, [sp, #36]	; 0x24
   14198:	rsb	r2, r2, #1
   1419c:	cmp	r5, r3
   141a0:	beq	142c4 <__assert_fail@plt+0x33c0>
   141a4:	mov	r1, #8
   141a8:	mov	r0, r5
   141ac:	mvn	r3, #-2147483648	; 0x80000000
   141b0:	str	r1, [sp]
   141b4:	add	r1, sp, #36	; 0x24
   141b8:	bl	162bc <__assert_fail@plt+0x53b8>
   141bc:	mov	r5, r0
   141c0:	str	r0, [r4]
   141c4:	ldr	r0, [r4, #4]
   141c8:	mov	r1, #0
   141cc:	ldr	r2, [sp, #36]	; 0x24
   141d0:	sub	r2, r2, r0
   141d4:	add	r0, r5, r0, lsl #3
   141d8:	lsl	r2, r2, #3
   141dc:	bl	10e44 <memset@plt>
   141e0:	ldr	r3, [sp, #36]	; 0x24
   141e4:	str	r3, [r4, #4]
   141e8:	movw	r4, #37236	; 0x9174
   141ec:	movt	r4, #2
   141f0:	ldr	r9, [r5]
   141f4:	add	r0, r4, #264	; 0x108
   141f8:	mov	r3, fp
   141fc:	ldr	r7, [r4, #260]	; 0x104
   14200:	mov	r2, sl
   14204:	ldr	r6, [r5, #4]
   14208:	str	r0, [sp, #8]
   1420c:	mov	r1, r9
   14210:	ldr	ip, [r4, #256]	; 0x100
   14214:	orr	r7, r7, #1
   14218:	ldr	lr, [r4, #300]	; 0x12c
   1421c:	mov	r0, r6
   14220:	str	ip, [sp]
   14224:	str	r7, [sp, #4]
   14228:	str	lr, [sp, #16]
   1422c:	ldr	ip, [r4, #296]	; 0x128
   14230:	str	ip, [sp, #12]
   14234:	bl	11fb0 <__assert_fail@plt+0x10ac>
   14238:	cmp	r9, r0
   1423c:	bhi	1429c <__assert_fail@plt+0x3398>
   14240:	add	r9, r0, #1
   14244:	cmp	r6, r4
   14248:	str	r9, [r5]
   1424c:	beq	14258 <__assert_fail@plt+0x3354>
   14250:	mov	r0, r6
   14254:	bl	17740 <__assert_fail@plt+0x683c>
   14258:	mov	r0, r9
   1425c:	bl	16018 <__assert_fail@plt+0x5114>
   14260:	ldr	ip, [r4, #256]	; 0x100
   14264:	mov	r1, r9
   14268:	mov	r3, fp
   1426c:	mov	r2, sl
   14270:	mov	r6, r0
   14274:	ldr	r9, [r4, #296]	; 0x128
   14278:	ldr	lr, [r4, #300]	; 0x12c
   1427c:	str	r0, [r5, #4]
   14280:	str	ip, [sp]
   14284:	ldr	ip, [pc, #100]	; 142f0 <__assert_fail@plt+0x33ec>
   14288:	str	r7, [sp, #4]
   1428c:	str	ip, [sp, #8]
   14290:	str	r9, [sp, #12]
   14294:	str	lr, [sp, #16]
   14298:	bl	11fb0 <__assert_fail@plt+0x10ac>
   1429c:	ldr	r3, [sp, #28]
   142a0:	mov	r0, r6
   142a4:	str	r3, [r8]
   142a8:	add	sp, sp, #44	; 0x2c
   142ac:	ldrd	r4, [sp]
   142b0:	ldrd	r6, [sp, #8]
   142b4:	ldrd	r8, [sp, #16]
   142b8:	ldrd	sl, [sp, #24]
   142bc:	add	sp, sp, #32
   142c0:	pop	{pc}		; (ldr pc, [sp], #4)
   142c4:	mov	r0, #8
   142c8:	mvn	r3, #-2147483648	; 0x80000000
   142cc:	add	r1, sp, #36	; 0x24
   142d0:	str	r0, [sp]
   142d4:	mov	r0, #0
   142d8:	bl	162bc <__assert_fail@plt+0x53b8>
   142dc:	ldrd	r2, [r4, #8]
   142e0:	mov	r5, r0
   142e4:	str	r0, [r4]
   142e8:	strd	r2, [r0]
   142ec:	b	141c4 <__assert_fail@plt+0x32c0>
   142f0:	andeq	r9, r2, ip, ror r2
   142f4:	strd	r4, [sp, #-20]!	; 0xffffffec
   142f8:	mov	r4, #0
   142fc:	mov	r5, #0
   14300:	strd	r6, [sp, #8]
   14304:	cmp	r1, #10
   14308:	str	lr, [sp, #16]
   1430c:	sub	sp, sp, #100	; 0x64
   14310:	strd	r4, [sp, #48]	; 0x30
   14314:	beq	1435c <__assert_fail@plt+0x3458>
   14318:	mov	r3, sp
   1431c:	strd	r4, [sp, #8]
   14320:	str	r1, [sp, #48]	; 0x30
   14324:	mov	r1, r2
   14328:	mvn	r2, #0
   1432c:	ldrd	r6, [sp, #48]	; 0x30
   14330:	strd	r6, [sp]
   14334:	strd	r4, [sp, #16]
   14338:	strd	r4, [sp, #24]
   1433c:	strd	r4, [sp, #32]
   14340:	strd	r4, [sp, #40]	; 0x28
   14344:	bl	1399c <__assert_fail@plt+0x2a98>
   14348:	add	sp, sp, #100	; 0x64
   1434c:	ldrd	r4, [sp]
   14350:	ldrd	r6, [sp, #8]
   14354:	add	sp, sp, #16
   14358:	pop	{pc}		; (ldr pc, [sp], #4)
   1435c:	bl	10ef8 <abort@plt>
   14360:	strd	r4, [sp, #-20]!	; 0xffffffec
   14364:	mov	r4, #0
   14368:	mov	r5, #0
   1436c:	strd	r6, [sp, #8]
   14370:	cmp	r1, #10
   14374:	str	lr, [sp, #16]
   14378:	sub	sp, sp, #100	; 0x64
   1437c:	strd	r4, [sp, #48]	; 0x30
   14380:	beq	143cc <__assert_fail@plt+0x34c8>
   14384:	mov	ip, r2
   14388:	mov	r2, r3
   1438c:	strd	r4, [sp, #8]
   14390:	str	r1, [sp, #48]	; 0x30
   14394:	mov	r3, sp
   14398:	mov	r1, ip
   1439c:	ldrd	r6, [sp, #48]	; 0x30
   143a0:	strd	r6, [sp]
   143a4:	strd	r4, [sp, #16]
   143a8:	strd	r4, [sp, #24]
   143ac:	strd	r4, [sp, #32]
   143b0:	strd	r4, [sp, #40]	; 0x28
   143b4:	bl	1399c <__assert_fail@plt+0x2a98>
   143b8:	add	sp, sp, #100	; 0x64
   143bc:	ldrd	r4, [sp]
   143c0:	ldrd	r6, [sp, #8]
   143c4:	add	sp, sp, #16
   143c8:	pop	{pc}		; (ldr pc, [sp], #4)
   143cc:	bl	10ef8 <abort@plt>
   143d0:	mov	r2, #0
   143d4:	mov	r3, #0
   143d8:	strd	r4, [sp, #-36]!	; 0xffffffdc
   143dc:	strd	r6, [sp, #8]
   143e0:	cmp	r0, #10
   143e4:	strd	r8, [sp, #16]
   143e8:	strd	sl, [sp, #24]
   143ec:	str	lr, [sp, #32]
   143f0:	sub	sp, sp, #124	; 0x7c
   143f4:	strd	r2, [sp, #72]	; 0x48
   143f8:	strd	r2, [sp, #80]	; 0x50
   143fc:	strd	r2, [sp, #88]	; 0x58
   14400:	strd	r2, [sp, #96]	; 0x60
   14404:	strd	r2, [sp, #104]	; 0x68
   14408:	strd	r2, [sp, #112]	; 0x70
   1440c:	beq	145b0 <__assert_fail@plt+0x36ac>
   14410:	mov	r6, r1
   14414:	movw	r4, #37104	; 0x90f0
   14418:	movt	r4, #2
   1441c:	str	r0, [sp, #72]	; 0x48
   14420:	ldrd	r0, [sp, #72]	; 0x48
   14424:	strd	r0, [sp, #24]
   14428:	strd	r2, [sp, #32]
   1442c:	strd	r2, [sp, #40]	; 0x28
   14430:	strd	r2, [sp, #48]	; 0x30
   14434:	strd	r2, [sp, #56]	; 0x38
   14438:	strd	r2, [sp, #64]	; 0x40
   1443c:	bl	10e2c <__errno_location@plt>
   14440:	mov	r8, r0
   14444:	ldr	r5, [r4]
   14448:	ldr	r2, [r4, #4]
   1444c:	ldr	r9, [r0]
   14450:	cmp	r2, #0
   14454:	bgt	144b0 <__assert_fail@plt+0x35ac>
   14458:	add	r3, r4, #8
   1445c:	str	r2, [sp, #72]	; 0x48
   14460:	rsb	r2, r2, #1
   14464:	cmp	r5, r3
   14468:	beq	14584 <__assert_fail@plt+0x3680>
   1446c:	mov	r3, #8
   14470:	mov	r0, r5
   14474:	add	r1, sp, #72	; 0x48
   14478:	str	r3, [sp]
   1447c:	mvn	r3, #-2147483648	; 0x80000000
   14480:	bl	162bc <__assert_fail@plt+0x53b8>
   14484:	mov	r5, r0
   14488:	str	r0, [r4]
   1448c:	ldr	r0, [r4, #4]
   14490:	mov	r1, #0
   14494:	ldr	r2, [sp, #72]	; 0x48
   14498:	sub	r2, r2, r0
   1449c:	add	r0, r5, r0, lsl #3
   144a0:	lsl	r2, r2, #3
   144a4:	bl	10e44 <memset@plt>
   144a8:	ldr	r3, [sp, #72]	; 0x48
   144ac:	str	r3, [r4, #4]
   144b0:	ldr	sl, [r5]
   144b4:	add	r0, sp, #32
   144b8:	mvn	r3, #0
   144bc:	mov	r2, r6
   144c0:	ldr	r7, [sp, #28]
   144c4:	ldr	r4, [r5, #4]
   144c8:	mov	r1, sl
   144cc:	str	r0, [sp, #8]
   144d0:	ldr	lr, [sp, #24]
   144d4:	orr	r7, r7, #1
   144d8:	ldr	ip, [sp, #64]	; 0x40
   144dc:	mov	r0, r4
   144e0:	ldr	fp, [sp, #68]	; 0x44
   144e4:	str	lr, [sp]
   144e8:	str	r7, [sp, #4]
   144ec:	str	ip, [sp, #12]
   144f0:	str	fp, [sp, #16]
   144f4:	bl	11fb0 <__assert_fail@plt+0x10ac>
   144f8:	cmp	sl, r0
   144fc:	bhi	14560 <__assert_fail@plt+0x365c>
   14500:	add	sl, r0, #1
   14504:	movw	r3, #37236	; 0x9174
   14508:	movt	r3, #2
   1450c:	cmp	r4, r3
   14510:	str	sl, [r5]
   14514:	beq	14520 <__assert_fail@plt+0x361c>
   14518:	mov	r0, r4
   1451c:	bl	17740 <__assert_fail@plt+0x683c>
   14520:	mov	r0, sl
   14524:	bl	16018 <__assert_fail@plt+0x5114>
   14528:	ldr	r3, [sp, #24]
   1452c:	mov	r2, r6
   14530:	mov	r1, sl
   14534:	mov	r4, r0
   14538:	ldr	lr, [sp, #64]	; 0x40
   1453c:	ldr	ip, [sp, #68]	; 0x44
   14540:	str	r0, [r5, #4]
   14544:	add	r5, sp, #32
   14548:	stm	sp, {r3, r7}
   1454c:	mvn	r3, #0
   14550:	str	r5, [sp, #8]
   14554:	str	lr, [sp, #12]
   14558:	str	ip, [sp, #16]
   1455c:	bl	11fb0 <__assert_fail@plt+0x10ac>
   14560:	mov	r0, r4
   14564:	str	r9, [r8]
   14568:	add	sp, sp, #124	; 0x7c
   1456c:	ldrd	r4, [sp]
   14570:	ldrd	r6, [sp, #8]
   14574:	ldrd	r8, [sp, #16]
   14578:	ldrd	sl, [sp, #24]
   1457c:	add	sp, sp, #32
   14580:	pop	{pc}		; (ldr pc, [sp], #4)
   14584:	mov	r0, #8
   14588:	mvn	r3, #-2147483648	; 0x80000000
   1458c:	add	r1, sp, #72	; 0x48
   14590:	str	r0, [sp]
   14594:	mov	r0, #0
   14598:	bl	162bc <__assert_fail@plt+0x53b8>
   1459c:	ldrd	r2, [r4, #8]
   145a0:	mov	r5, r0
   145a4:	str	r0, [r4]
   145a8:	strd	r2, [r0]
   145ac:	b	1448c <__assert_fail@plt+0x3588>
   145b0:	bl	10ef8 <abort@plt>
   145b4:	strd	r4, [sp, #-36]!	; 0xffffffdc
   145b8:	cmp	r0, #10
   145bc:	strd	r6, [sp, #8]
   145c0:	mov	r6, #0
   145c4:	mov	r7, #0
   145c8:	strd	r8, [sp, #16]
   145cc:	strd	sl, [sp, #24]
   145d0:	str	lr, [sp, #32]
   145d4:	sub	sp, sp, #124	; 0x7c
   145d8:	strd	r6, [sp, #72]	; 0x48
   145dc:	strd	r6, [sp, #80]	; 0x50
   145e0:	strd	r6, [sp, #88]	; 0x58
   145e4:	strd	r6, [sp, #96]	; 0x60
   145e8:	strd	r6, [sp, #104]	; 0x68
   145ec:	strd	r6, [sp, #112]	; 0x70
   145f0:	beq	1479c <__assert_fail@plt+0x3898>
   145f4:	mov	sl, r2
   145f8:	movw	r5, #37104	; 0x90f0
   145fc:	movt	r5, #2
   14600:	str	r0, [sp, #72]	; 0x48
   14604:	mov	r9, r1
   14608:	ldrd	r2, [sp, #72]	; 0x48
   1460c:	strd	r2, [sp, #24]
   14610:	strd	r6, [sp, #32]
   14614:	strd	r6, [sp, #40]	; 0x28
   14618:	strd	r6, [sp, #48]	; 0x30
   1461c:	strd	r6, [sp, #56]	; 0x38
   14620:	strd	r6, [sp, #64]	; 0x40
   14624:	bl	10e2c <__errno_location@plt>
   14628:	mov	r7, r0
   1462c:	ldr	r4, [r5]
   14630:	ldr	r2, [r5, #4]
   14634:	ldr	fp, [r0]
   14638:	cmp	r2, #0
   1463c:	bgt	14698 <__assert_fail@plt+0x3794>
   14640:	add	r3, r5, #8
   14644:	str	r2, [sp, #72]	; 0x48
   14648:	rsb	r2, r2, #1
   1464c:	cmp	r4, r3
   14650:	beq	14770 <__assert_fail@plt+0x386c>
   14654:	mov	r3, #8
   14658:	mov	r0, r4
   1465c:	add	r1, sp, #72	; 0x48
   14660:	str	r3, [sp]
   14664:	mvn	r3, #-2147483648	; 0x80000000
   14668:	bl	162bc <__assert_fail@plt+0x53b8>
   1466c:	mov	r4, r0
   14670:	str	r0, [r5]
   14674:	ldr	r0, [r5, #4]
   14678:	mov	r1, #0
   1467c:	ldr	r2, [sp, #72]	; 0x48
   14680:	sub	r2, r2, r0
   14684:	add	r0, r4, r0, lsl #3
   14688:	lsl	r2, r2, #3
   1468c:	bl	10e44 <memset@plt>
   14690:	ldr	r3, [sp, #72]	; 0x48
   14694:	str	r3, [r5, #4]
   14698:	ldr	ip, [sp, #24]
   1469c:	add	r0, sp, #32
   146a0:	mov	r3, sl
   146a4:	mov	r2, r9
   146a8:	ldr	r6, [sp, #28]
   146ac:	ldr	r8, [r4]
   146b0:	ldr	r5, [r4, #4]
   146b4:	str	ip, [sp]
   146b8:	orr	r6, r6, #1
   146bc:	ldr	ip, [sp, #64]	; 0x40
   146c0:	mov	r1, r8
   146c4:	str	r6, [sp, #4]
   146c8:	ldr	lr, [sp, #68]	; 0x44
   146cc:	str	r0, [sp, #8]
   146d0:	mov	r0, r5
   146d4:	str	ip, [sp, #12]
   146d8:	str	lr, [sp, #16]
   146dc:	bl	11fb0 <__assert_fail@plt+0x10ac>
   146e0:	cmp	r8, r0
   146e4:	bhi	1474c <__assert_fail@plt+0x3848>
   146e8:	add	r8, r0, #1
   146ec:	movw	r3, #37236	; 0x9174
   146f0:	movt	r3, #2
   146f4:	cmp	r5, r3
   146f8:	str	r8, [r4]
   146fc:	beq	14708 <__assert_fail@plt+0x3804>
   14700:	mov	r0, r5
   14704:	bl	17740 <__assert_fail@plt+0x683c>
   14708:	mov	r0, r8
   1470c:	bl	16018 <__assert_fail@plt+0x5114>
   14710:	ldr	lr, [sp, #24]
   14714:	mov	r1, r8
   14718:	mov	r3, sl
   1471c:	mov	r2, r9
   14720:	mov	r5, r0
   14724:	ldr	r8, [sp, #64]	; 0x40
   14728:	ldr	ip, [sp, #68]	; 0x44
   1472c:	str	r0, [r4, #4]
   14730:	str	lr, [sp]
   14734:	add	lr, sp, #32
   14738:	str	r6, [sp, #4]
   1473c:	str	lr, [sp, #8]
   14740:	str	r8, [sp, #12]
   14744:	str	ip, [sp, #16]
   14748:	bl	11fb0 <__assert_fail@plt+0x10ac>
   1474c:	mov	r0, r5
   14750:	str	fp, [r7]
   14754:	add	sp, sp, #124	; 0x7c
   14758:	ldrd	r4, [sp]
   1475c:	ldrd	r6, [sp, #8]
   14760:	ldrd	r8, [sp, #16]
   14764:	ldrd	sl, [sp, #24]
   14768:	add	sp, sp, #32
   1476c:	pop	{pc}		; (ldr pc, [sp], #4)
   14770:	mov	r0, #8
   14774:	mvn	r3, #-2147483648	; 0x80000000
   14778:	add	r1, sp, #72	; 0x48
   1477c:	str	r0, [sp]
   14780:	mov	r0, #0
   14784:	bl	162bc <__assert_fail@plt+0x53b8>
   14788:	ldrd	r2, [r5, #8]
   1478c:	mov	r4, r0
   14790:	str	r0, [r5]
   14794:	strd	r2, [r0]
   14798:	b	14674 <__assert_fail@plt+0x3770>
   1479c:	bl	10ef8 <abort@plt>
   147a0:	ldr	r3, [pc, #492]	; 14994 <__assert_fail@plt+0x3a90>
   147a4:	lsr	ip, r2, #5
   147a8:	and	r2, r2, #31
   147ac:	strd	r4, [sp, #-36]!	; 0xffffffdc
   147b0:	movw	r5, #37104	; 0x90f0
   147b4:	movt	r5, #2
   147b8:	strd	r6, [sp, #8]
   147bc:	strd	r8, [sp, #16]
   147c0:	strd	sl, [sp, #24]
   147c4:	mov	sl, r0
   147c8:	mov	fp, r1
   147cc:	ldrd	r0, [r3]
   147d0:	str	lr, [sp, #32]
   147d4:	sub	sp, sp, #92	; 0x5c
   147d8:	ldrd	r8, [r3, #8]
   147dc:	add	r6, sp, #48	; 0x30
   147e0:	strd	r0, [sp, #40]	; 0x28
   147e4:	ldrd	r0, [r3, #16]
   147e8:	strd	r8, [sp, #48]	; 0x30
   147ec:	ldrd	r8, [r3, #24]
   147f0:	strd	r0, [sp, #56]	; 0x38
   147f4:	ldrd	r0, [r3, #32]
   147f8:	strd	r8, [sp, #64]	; 0x40
   147fc:	ldrd	r8, [r3, #40]	; 0x28
   14800:	strd	r0, [sp, #72]	; 0x48
   14804:	strd	r8, [sp, #80]	; 0x50
   14808:	ldr	r3, [r6, ip, lsl #2]
   1480c:	mvn	r1, r3, lsr r2
   14810:	and	r1, r1, #1
   14814:	eor	r2, r3, r1, lsl r2
   14818:	str	r2, [r6, ip, lsl #2]
   1481c:	bl	10e2c <__errno_location@plt>
   14820:	ldr	r3, [r0]
   14824:	mov	r8, r0
   14828:	ldr	r2, [r5, #4]
   1482c:	ldr	r4, [r5]
   14830:	str	r3, [sp, #28]
   14834:	cmp	r2, #0
   14838:	bgt	14894 <__assert_fail@plt+0x3990>
   1483c:	add	r3, r5, #8
   14840:	str	r2, [sp, #36]	; 0x24
   14844:	rsb	r2, r2, #1
   14848:	cmp	r4, r3
   1484c:	beq	14968 <__assert_fail@plt+0x3a64>
   14850:	mov	r1, #8
   14854:	mov	r0, r4
   14858:	mvn	r3, #-2147483648	; 0x80000000
   1485c:	str	r1, [sp]
   14860:	add	r1, sp, #36	; 0x24
   14864:	bl	162bc <__assert_fail@plt+0x53b8>
   14868:	mov	r4, r0
   1486c:	str	r0, [r5]
   14870:	ldr	r0, [r5, #4]
   14874:	mov	r1, #0
   14878:	ldr	r2, [sp, #36]	; 0x24
   1487c:	sub	r2, r2, r0
   14880:	add	r0, r4, r0, lsl #3
   14884:	lsl	r2, r2, #3
   14888:	bl	10e44 <memset@plt>
   1488c:	ldr	r3, [sp, #36]	; 0x24
   14890:	str	r3, [r5, #4]
   14894:	ldr	ip, [sp, #40]	; 0x28
   14898:	mov	r3, fp
   1489c:	mov	r2, sl
   148a0:	ldr	r7, [sp, #44]	; 0x2c
   148a4:	ldr	r9, [r4]
   148a8:	ldr	r5, [r4, #4]
   148ac:	str	ip, [sp]
   148b0:	orr	r7, r7, #1
   148b4:	ldr	ip, [sp, #80]	; 0x50
   148b8:	mov	r1, r9
   148bc:	str	r7, [sp, #4]
   148c0:	ldr	lr, [sp, #84]	; 0x54
   148c4:	mov	r0, r5
   148c8:	str	r6, [sp, #8]
   148cc:	str	ip, [sp, #12]
   148d0:	str	lr, [sp, #16]
   148d4:	bl	11fb0 <__assert_fail@plt+0x10ac>
   148d8:	cmp	r9, r0
   148dc:	bhi	14940 <__assert_fail@plt+0x3a3c>
   148e0:	add	r9, r0, #1
   148e4:	movw	r3, #37236	; 0x9174
   148e8:	movt	r3, #2
   148ec:	cmp	r5, r3
   148f0:	str	r9, [r4]
   148f4:	beq	14900 <__assert_fail@plt+0x39fc>
   148f8:	mov	r0, r5
   148fc:	bl	17740 <__assert_fail@plt+0x683c>
   14900:	mov	r0, r9
   14904:	bl	16018 <__assert_fail@plt+0x5114>
   14908:	mov	r1, r9
   1490c:	ldr	ip, [sp, #40]	; 0x28
   14910:	mov	r3, fp
   14914:	mov	r2, sl
   14918:	mov	r5, r0
   1491c:	ldr	r9, [sp, #80]	; 0x50
   14920:	ldr	lr, [sp, #84]	; 0x54
   14924:	str	r0, [r4, #4]
   14928:	str	ip, [sp]
   1492c:	str	r7, [sp, #4]
   14930:	str	r6, [sp, #8]
   14934:	str	r9, [sp, #12]
   14938:	str	lr, [sp, #16]
   1493c:	bl	11fb0 <__assert_fail@plt+0x10ac>
   14940:	ldr	r3, [sp, #28]
   14944:	mov	r0, r5
   14948:	str	r3, [r8]
   1494c:	add	sp, sp, #92	; 0x5c
   14950:	ldrd	r4, [sp]
   14954:	ldrd	r6, [sp, #8]
   14958:	ldrd	r8, [sp, #16]
   1495c:	ldrd	sl, [sp, #24]
   14960:	add	sp, sp, #32
   14964:	pop	{pc}		; (ldr pc, [sp], #4)
   14968:	mov	r0, #8
   1496c:	mvn	r3, #-2147483648	; 0x80000000
   14970:	add	r1, sp, #36	; 0x24
   14974:	str	r0, [sp]
   14978:	mov	r0, #0
   1497c:	bl	162bc <__assert_fail@plt+0x53b8>
   14980:	ldrd	r2, [r5, #8]
   14984:	mov	r4, r0
   14988:	str	r0, [r5]
   1498c:	strd	r2, [r0]
   14990:	b	14870 <__assert_fail@plt+0x396c>
   14994:	andeq	r9, r2, r4, ror r2
   14998:	ldr	ip, [pc, #476]	; 14b7c <__assert_fail@plt+0x3c78>
   1499c:	strd	r4, [sp, #-36]!	; 0xffffffdc
   149a0:	movw	r4, #37104	; 0x90f0
   149a4:	movt	r4, #2
   149a8:	ldrd	r2, [ip, #8]
   149ac:	strd	r6, [sp, #8]
   149b0:	lsr	r7, r1, #5
   149b4:	mov	r6, r0
   149b8:	strd	r8, [sp, #16]
   149bc:	str	lr, [sp, #32]
   149c0:	and	lr, r1, #31
   149c4:	ldrd	r0, [ip]
   149c8:	strd	sl, [sp, #24]
   149cc:	sub	sp, sp, #84	; 0x54
   149d0:	add	r5, sp, #40	; 0x28
   149d4:	strd	r0, [sp, #32]
   149d8:	strd	r2, [sp, #40]	; 0x28
   149dc:	ldrd	r0, [ip, #16]
   149e0:	ldrd	r2, [ip, #24]
   149e4:	strd	r0, [sp, #48]	; 0x30
   149e8:	ldrd	r0, [ip, #32]
   149ec:	strd	r2, [sp, #56]	; 0x38
   149f0:	ldrd	r2, [ip, #40]	; 0x28
   149f4:	strd	r0, [sp, #64]	; 0x40
   149f8:	strd	r2, [sp, #72]	; 0x48
   149fc:	ldr	r1, [r5, r7, lsl #2]
   14a00:	mvn	r3, r1, lsr lr
   14a04:	and	r3, r3, #1
   14a08:	eor	r1, r1, r3, lsl lr
   14a0c:	str	r1, [r5, r7, lsl #2]
   14a10:	bl	10e2c <__errno_location@plt>
   14a14:	mov	r9, r0
   14a18:	ldr	sl, [r0]
   14a1c:	ldr	r2, [r4, #4]
   14a20:	ldr	r7, [r4]
   14a24:	cmp	r2, #0
   14a28:	bgt	14a84 <__assert_fail@plt+0x3b80>
   14a2c:	add	r3, r4, #8
   14a30:	str	r2, [sp, #28]
   14a34:	rsb	r2, r2, #1
   14a38:	cmp	r7, r3
   14a3c:	beq	14b50 <__assert_fail@plt+0x3c4c>
   14a40:	mov	r1, #8
   14a44:	mov	r0, r7
   14a48:	mvn	r3, #-2147483648	; 0x80000000
   14a4c:	str	r1, [sp]
   14a50:	add	r1, sp, #28
   14a54:	bl	162bc <__assert_fail@plt+0x53b8>
   14a58:	mov	r7, r0
   14a5c:	str	r0, [r4]
   14a60:	ldr	r0, [r4, #4]
   14a64:	mov	r1, #0
   14a68:	ldr	r2, [sp, #28]
   14a6c:	sub	r2, r2, r0
   14a70:	add	r0, r7, r0, lsl #3
   14a74:	lsl	r2, r2, #3
   14a78:	bl	10e44 <memset@plt>
   14a7c:	ldr	r3, [sp, #28]
   14a80:	str	r3, [r4, #4]
   14a84:	ldr	ip, [sp, #32]
   14a88:	mvn	r3, #0
   14a8c:	mov	r2, r6
   14a90:	ldr	r8, [sp, #36]	; 0x24
   14a94:	ldr	fp, [r7]
   14a98:	ldr	r4, [r7, #4]
   14a9c:	str	ip, [sp]
   14aa0:	orr	r8, r8, #1
   14aa4:	ldr	ip, [sp, #72]	; 0x48
   14aa8:	mov	r1, fp
   14aac:	str	r8, [sp, #4]
   14ab0:	ldr	lr, [sp, #76]	; 0x4c
   14ab4:	mov	r0, r4
   14ab8:	str	r5, [sp, #8]
   14abc:	str	ip, [sp, #12]
   14ac0:	str	lr, [sp, #16]
   14ac4:	bl	11fb0 <__assert_fail@plt+0x10ac>
   14ac8:	cmp	fp, r0
   14acc:	bhi	14b2c <__assert_fail@plt+0x3c28>
   14ad0:	add	fp, r0, #1
   14ad4:	movw	r3, #37236	; 0x9174
   14ad8:	movt	r3, #2
   14adc:	cmp	r4, r3
   14ae0:	str	fp, [r7]
   14ae4:	beq	14af0 <__assert_fail@plt+0x3bec>
   14ae8:	mov	r0, r4
   14aec:	bl	17740 <__assert_fail@plt+0x683c>
   14af0:	mov	r0, fp
   14af4:	bl	16018 <__assert_fail@plt+0x5114>
   14af8:	ldr	r3, [sp, #32]
   14afc:	mov	r2, r6
   14b00:	mov	r1, fp
   14b04:	mov	r4, r0
   14b08:	ldr	lr, [sp, #72]	; 0x48
   14b0c:	ldr	ip, [sp, #76]	; 0x4c
   14b10:	str	r0, [r7, #4]
   14b14:	stm	sp, {r3, r8}
   14b18:	mvn	r3, #0
   14b1c:	str	r5, [sp, #8]
   14b20:	str	lr, [sp, #12]
   14b24:	str	ip, [sp, #16]
   14b28:	bl	11fb0 <__assert_fail@plt+0x10ac>
   14b2c:	mov	r0, r4
   14b30:	str	sl, [r9]
   14b34:	add	sp, sp, #84	; 0x54
   14b38:	ldrd	r4, [sp]
   14b3c:	ldrd	r6, [sp, #8]
   14b40:	ldrd	r8, [sp, #16]
   14b44:	ldrd	sl, [sp, #24]
   14b48:	add	sp, sp, #32
   14b4c:	pop	{pc}		; (ldr pc, [sp], #4)
   14b50:	mov	r0, #8
   14b54:	mvn	r3, #-2147483648	; 0x80000000
   14b58:	add	r1, sp, #28
   14b5c:	str	r0, [sp]
   14b60:	mov	r0, #0
   14b64:	bl	162bc <__assert_fail@plt+0x53b8>
   14b68:	ldrd	r2, [r4, #8]
   14b6c:	mov	r7, r0
   14b70:	str	r0, [r4]
   14b74:	strd	r2, [r0]
   14b78:	b	14a60 <__assert_fail@plt+0x3b5c>
   14b7c:	andeq	r9, r2, r4, ror r2
   14b80:	ldr	ip, [pc, #472]	; 14d60 <__assert_fail@plt+0x3e5c>
   14b84:	strd	r4, [sp, #-36]!	; 0xffffffdc
   14b88:	mov	r5, r0
   14b8c:	movw	r4, #37104	; 0x90f0
   14b90:	movt	r4, #2
   14b94:	ldrd	r2, [ip]
   14b98:	ldrd	r0, [ip, #8]
   14b9c:	strd	r6, [sp, #8]
   14ba0:	strd	r8, [sp, #16]
   14ba4:	strd	sl, [sp, #24]
   14ba8:	str	lr, [sp, #32]
   14bac:	sub	sp, sp, #84	; 0x54
   14bb0:	strd	r2, [sp, #32]
   14bb4:	strd	r0, [sp, #40]	; 0x28
   14bb8:	ldr	r6, [sp, #44]	; 0x2c
   14bbc:	ldrd	r2, [ip, #16]
   14bc0:	ldrd	r0, [ip, #24]
   14bc4:	mvn	lr, r6
   14bc8:	and	lr, lr, #67108864	; 0x4000000
   14bcc:	eor	lr, lr, r6
   14bd0:	ldrd	r6, [ip, #40]	; 0x28
   14bd4:	strd	r2, [sp, #48]	; 0x30
   14bd8:	ldrd	r2, [ip, #32]
   14bdc:	str	lr, [sp, #44]	; 0x2c
   14be0:	strd	r0, [sp, #56]	; 0x38
   14be4:	strd	r2, [sp, #64]	; 0x40
   14be8:	strd	r6, [sp, #72]	; 0x48
   14bec:	bl	10e2c <__errno_location@plt>
   14bf0:	mov	r8, r0
   14bf4:	ldr	r9, [r0]
   14bf8:	ldr	r2, [r4, #4]
   14bfc:	ldr	r6, [r4]
   14c00:	cmp	r2, #0
   14c04:	bgt	14c60 <__assert_fail@plt+0x3d5c>
   14c08:	add	r3, r4, #8
   14c0c:	str	r2, [sp, #28]
   14c10:	rsb	r2, r2, #1
   14c14:	cmp	r6, r3
   14c18:	beq	14d34 <__assert_fail@plt+0x3e30>
   14c1c:	mov	r1, #8
   14c20:	mov	r0, r6
   14c24:	mvn	r3, #-2147483648	; 0x80000000
   14c28:	str	r1, [sp]
   14c2c:	add	r1, sp, #28
   14c30:	bl	162bc <__assert_fail@plt+0x53b8>
   14c34:	mov	r6, r0
   14c38:	str	r0, [r4]
   14c3c:	ldr	r0, [r4, #4]
   14c40:	mov	r1, #0
   14c44:	ldr	r2, [sp, #28]
   14c48:	sub	r2, r2, r0
   14c4c:	add	r0, r6, r0, lsl #3
   14c50:	lsl	r2, r2, #3
   14c54:	bl	10e44 <memset@plt>
   14c58:	ldr	r3, [sp, #28]
   14c5c:	str	r3, [r4, #4]
   14c60:	ldr	sl, [r6]
   14c64:	add	r0, sp, #40	; 0x28
   14c68:	mvn	r3, #0
   14c6c:	mov	r2, r5
   14c70:	ldr	r7, [sp, #36]	; 0x24
   14c74:	ldr	r4, [r6, #4]
   14c78:	mov	r1, sl
   14c7c:	str	r0, [sp, #8]
   14c80:	ldr	lr, [sp, #32]
   14c84:	orr	r7, r7, #1
   14c88:	ldr	ip, [sp, #72]	; 0x48
   14c8c:	mov	r0, r4
   14c90:	ldr	fp, [sp, #76]	; 0x4c
   14c94:	str	lr, [sp]
   14c98:	str	r7, [sp, #4]
   14c9c:	str	ip, [sp, #12]
   14ca0:	str	fp, [sp, #16]
   14ca4:	bl	11fb0 <__assert_fail@plt+0x10ac>
   14ca8:	cmp	sl, r0
   14cac:	bhi	14d10 <__assert_fail@plt+0x3e0c>
   14cb0:	add	sl, r0, #1
   14cb4:	movw	r3, #37236	; 0x9174
   14cb8:	movt	r3, #2
   14cbc:	cmp	r4, r3
   14cc0:	str	sl, [r6]
   14cc4:	beq	14cd0 <__assert_fail@plt+0x3dcc>
   14cc8:	mov	r0, r4
   14ccc:	bl	17740 <__assert_fail@plt+0x683c>
   14cd0:	mov	r0, sl
   14cd4:	bl	16018 <__assert_fail@plt+0x5114>
   14cd8:	ldr	r3, [sp, #32]
   14cdc:	mov	r2, r5
   14ce0:	add	r5, sp, #40	; 0x28
   14ce4:	mov	r1, sl
   14ce8:	mov	r4, r0
   14cec:	ldr	lr, [sp, #72]	; 0x48
   14cf0:	ldr	ip, [sp, #76]	; 0x4c
   14cf4:	str	r0, [r6, #4]
   14cf8:	stm	sp, {r3, r7}
   14cfc:	mvn	r3, #0
   14d00:	str	r5, [sp, #8]
   14d04:	str	lr, [sp, #12]
   14d08:	str	ip, [sp, #16]
   14d0c:	bl	11fb0 <__assert_fail@plt+0x10ac>
   14d10:	mov	r0, r4
   14d14:	str	r9, [r8]
   14d18:	add	sp, sp, #84	; 0x54
   14d1c:	ldrd	r4, [sp]
   14d20:	ldrd	r6, [sp, #8]
   14d24:	ldrd	r8, [sp, #16]
   14d28:	ldrd	sl, [sp, #24]
   14d2c:	add	sp, sp, #32
   14d30:	pop	{pc}		; (ldr pc, [sp], #4)
   14d34:	mov	r0, #8
   14d38:	mvn	r3, #-2147483648	; 0x80000000
   14d3c:	add	r1, sp, #28
   14d40:	str	r0, [sp]
   14d44:	mov	r0, #0
   14d48:	bl	162bc <__assert_fail@plt+0x53b8>
   14d4c:	ldrd	r2, [r4, #8]
   14d50:	mov	r6, r0
   14d54:	str	r0, [r4]
   14d58:	strd	r2, [r0]
   14d5c:	b	14c3c <__assert_fail@plt+0x3d38>
   14d60:	andeq	r9, r2, r4, ror r2
   14d64:	ldr	ip, [pc, #480]	; 14f4c <__assert_fail@plt+0x4048>
   14d68:	strd	r4, [sp, #-36]!	; 0xffffffdc
   14d6c:	mov	r5, r0
   14d70:	movw	r4, #37104	; 0x90f0
   14d74:	movt	r4, #2
   14d78:	ldrd	r2, [ip]
   14d7c:	strd	r6, [sp, #8]
   14d80:	mov	r6, r1
   14d84:	ldrd	r0, [ip, #8]
   14d88:	strd	r8, [sp, #16]
   14d8c:	strd	sl, [sp, #24]
   14d90:	str	lr, [sp, #32]
   14d94:	sub	sp, sp, #84	; 0x54
   14d98:	ldrd	r8, [ip, #40]	; 0x28
   14d9c:	strd	r2, [sp, #32]
   14da0:	strd	r0, [sp, #40]	; 0x28
   14da4:	ldrd	r2, [ip, #16]
   14da8:	ldr	r7, [sp, #44]	; 0x2c
   14dac:	ldrd	r0, [ip, #24]
   14db0:	strd	r2, [sp, #48]	; 0x30
   14db4:	ldrd	r2, [ip, #32]
   14db8:	mvn	lr, r7
   14dbc:	and	lr, lr, #67108864	; 0x4000000
   14dc0:	eor	lr, lr, r7
   14dc4:	str	lr, [sp, #44]	; 0x2c
   14dc8:	strd	r0, [sp, #56]	; 0x38
   14dcc:	strd	r2, [sp, #64]	; 0x40
   14dd0:	strd	r8, [sp, #72]	; 0x48
   14dd4:	bl	10e2c <__errno_location@plt>
   14dd8:	mov	r9, r0
   14ddc:	ldr	sl, [r0]
   14de0:	ldr	r2, [r4, #4]
   14de4:	ldr	r7, [r4]
   14de8:	cmp	r2, #0
   14dec:	bgt	14e48 <__assert_fail@plt+0x3f44>
   14df0:	add	r3, r4, #8
   14df4:	str	r2, [sp, #28]
   14df8:	rsb	r2, r2, #1
   14dfc:	cmp	r7, r3
   14e00:	beq	14f20 <__assert_fail@plt+0x401c>
   14e04:	mov	r1, #8
   14e08:	mov	r0, r7
   14e0c:	mvn	r3, #-2147483648	; 0x80000000
   14e10:	str	r1, [sp]
   14e14:	add	r1, sp, #28
   14e18:	bl	162bc <__assert_fail@plt+0x53b8>
   14e1c:	mov	r7, r0
   14e20:	str	r0, [r4]
   14e24:	ldr	r0, [r4, #4]
   14e28:	mov	r1, #0
   14e2c:	ldr	r2, [sp, #28]
   14e30:	sub	r2, r2, r0
   14e34:	add	r0, r7, r0, lsl #3
   14e38:	lsl	r2, r2, #3
   14e3c:	bl	10e44 <memset@plt>
   14e40:	ldr	r3, [sp, #28]
   14e44:	str	r3, [r4, #4]
   14e48:	ldr	ip, [sp, #32]
   14e4c:	add	r0, sp, #40	; 0x28
   14e50:	mov	r3, r6
   14e54:	mov	r2, r5
   14e58:	ldr	r8, [sp, #36]	; 0x24
   14e5c:	ldr	fp, [r7]
   14e60:	ldr	r4, [r7, #4]
   14e64:	str	ip, [sp]
   14e68:	orr	r8, r8, #1
   14e6c:	ldr	ip, [sp, #72]	; 0x48
   14e70:	mov	r1, fp
   14e74:	str	r8, [sp, #4]
   14e78:	ldr	lr, [sp, #76]	; 0x4c
   14e7c:	str	r0, [sp, #8]
   14e80:	mov	r0, r4
   14e84:	str	ip, [sp, #12]
   14e88:	str	lr, [sp, #16]
   14e8c:	bl	11fb0 <__assert_fail@plt+0x10ac>
   14e90:	cmp	fp, r0
   14e94:	bhi	14efc <__assert_fail@plt+0x3ff8>
   14e98:	add	fp, r0, #1
   14e9c:	movw	r3, #37236	; 0x9174
   14ea0:	movt	r3, #2
   14ea4:	cmp	r4, r3
   14ea8:	str	fp, [r7]
   14eac:	beq	14eb8 <__assert_fail@plt+0x3fb4>
   14eb0:	mov	r0, r4
   14eb4:	bl	17740 <__assert_fail@plt+0x683c>
   14eb8:	mov	r0, fp
   14ebc:	bl	16018 <__assert_fail@plt+0x5114>
   14ec0:	ldr	lr, [sp, #32]
   14ec4:	mov	r2, r5
   14ec8:	mov	r3, r6
   14ecc:	mov	r1, fp
   14ed0:	mov	r4, r0
   14ed4:	ldr	r5, [sp, #72]	; 0x48
   14ed8:	ldr	ip, [sp, #76]	; 0x4c
   14edc:	str	r0, [r7, #4]
   14ee0:	str	lr, [sp]
   14ee4:	add	lr, sp, #40	; 0x28
   14ee8:	str	r8, [sp, #4]
   14eec:	str	lr, [sp, #8]
   14ef0:	str	r5, [sp, #12]
   14ef4:	str	ip, [sp, #16]
   14ef8:	bl	11fb0 <__assert_fail@plt+0x10ac>
   14efc:	mov	r0, r4
   14f00:	str	sl, [r9]
   14f04:	add	sp, sp, #84	; 0x54
   14f08:	ldrd	r4, [sp]
   14f0c:	ldrd	r6, [sp, #8]
   14f10:	ldrd	r8, [sp, #16]
   14f14:	ldrd	sl, [sp, #24]
   14f18:	add	sp, sp, #32
   14f1c:	pop	{pc}		; (ldr pc, [sp], #4)
   14f20:	mov	r0, #8
   14f24:	mvn	r3, #-2147483648	; 0x80000000
   14f28:	add	r1, sp, #28
   14f2c:	str	r0, [sp]
   14f30:	mov	r0, #0
   14f34:	bl	162bc <__assert_fail@plt+0x53b8>
   14f38:	ldrd	r2, [r4, #8]
   14f3c:	mov	r7, r0
   14f40:	str	r0, [r4]
   14f44:	strd	r2, [r0]
   14f48:	b	14e24 <__assert_fail@plt+0x3f20>
   14f4c:	andeq	r9, r2, r4, ror r2
   14f50:	strd	r4, [sp, #-12]!
   14f54:	mov	r4, #0
   14f58:	mov	r5, #0
   14f5c:	str	lr, [sp, #8]
   14f60:	sub	sp, sp, #100	; 0x64
   14f64:	cmp	r1, #10
   14f68:	strd	r4, [sp]
   14f6c:	strd	r4, [sp, #8]
   14f70:	strd	r4, [sp, #16]
   14f74:	strd	r4, [sp, #24]
   14f78:	strd	r4, [sp, #32]
   14f7c:	strd	r4, [sp, #40]	; 0x28
   14f80:	beq	14fb0 <__assert_fail@plt+0x40ac>
   14f84:	mov	ip, #67108864	; 0x4000000
   14f88:	mov	r3, sp
   14f8c:	str	r1, [sp]
   14f90:	mov	r1, r2
   14f94:	mvn	r2, #0
   14f98:	str	ip, [sp, #12]
   14f9c:	bl	1399c <__assert_fail@plt+0x2a98>
   14fa0:	add	sp, sp, #100	; 0x64
   14fa4:	ldrd	r4, [sp]
   14fa8:	add	sp, sp, #8
   14fac:	pop	{pc}		; (ldr pc, [sp], #4)
   14fb0:	bl	10ef8 <abort@plt>
   14fb4:	ldr	ip, [pc, #156]	; 15058 <__assert_fail@plt+0x4154>
   14fb8:	cmp	r2, #0
   14fbc:	cmpne	r1, #0
   14fc0:	strd	r4, [sp, #-32]!	; 0xffffffe0
   14fc4:	strd	r6, [sp, #8]
   14fc8:	mov	r6, r2
   14fcc:	str	r8, [sp, #16]
   14fd0:	mov	r8, r3
   14fd4:	strd	sl, [sp, #20]
   14fd8:	ldrd	r4, [ip]
   14fdc:	str	lr, [sp, #28]
   14fe0:	sub	sp, sp, #48	; 0x30
   14fe4:	mov	lr, #10
   14fe8:	ldrd	r2, [ip, #8]
   14fec:	ldrd	sl, [ip, #16]
   14ff0:	strd	r4, [sp]
   14ff4:	ldrd	r4, [ip, #32]
   14ff8:	str	lr, [sp]
   14ffc:	strd	r2, [sp, #8]
   15000:	strd	sl, [sp, #16]
   15004:	ldrd	r2, [ip, #24]
   15008:	ldrd	sl, [ip, #40]	; 0x28
   1500c:	strd	r2, [sp, #24]
   15010:	strd	r4, [sp, #32]
   15014:	strd	sl, [sp, #40]	; 0x28
   15018:	beq	15054 <__assert_fail@plt+0x4150>
   1501c:	mov	r7, r1
   15020:	mov	r3, sp
   15024:	mov	r1, r8
   15028:	mvn	r2, #0
   1502c:	str	r7, [sp, #40]	; 0x28
   15030:	str	r6, [sp, #44]	; 0x2c
   15034:	bl	1399c <__assert_fail@plt+0x2a98>
   15038:	add	sp, sp, #48	; 0x30
   1503c:	ldrd	r4, [sp]
   15040:	ldrd	r6, [sp, #8]
   15044:	ldr	r8, [sp, #16]
   15048:	ldrd	sl, [sp, #20]
   1504c:	add	sp, sp, #28
   15050:	pop	{pc}		; (ldr pc, [sp], #4)
   15054:	bl	10ef8 <abort@plt>
   15058:	andeq	r9, r2, r4, ror r2
   1505c:	ldr	ip, [pc, #156]	; 15100 <__assert_fail@plt+0x41fc>
   15060:	cmp	r2, #0
   15064:	cmpne	r1, #0
   15068:	strd	r4, [sp, #-32]!	; 0xffffffe0
   1506c:	strd	r6, [sp, #8]
   15070:	mov	r6, r2
   15074:	str	r8, [sp, #16]
   15078:	mov	r8, r3
   1507c:	strd	sl, [sp, #20]
   15080:	ldrd	r4, [ip]
   15084:	str	lr, [sp, #28]
   15088:	sub	sp, sp, #48	; 0x30
   1508c:	mov	lr, #10
   15090:	ldrd	r2, [ip, #8]
   15094:	ldrd	sl, [ip, #16]
   15098:	strd	r4, [sp]
   1509c:	ldrd	r4, [ip, #32]
   150a0:	str	lr, [sp]
   150a4:	strd	r2, [sp, #8]
   150a8:	strd	sl, [sp, #16]
   150ac:	ldrd	r2, [ip, #24]
   150b0:	ldrd	sl, [ip, #40]	; 0x28
   150b4:	strd	r2, [sp, #24]
   150b8:	strd	r4, [sp, #32]
   150bc:	strd	sl, [sp, #40]	; 0x28
   150c0:	beq	150fc <__assert_fail@plt+0x41f8>
   150c4:	ldr	r2, [sp, #80]	; 0x50
   150c8:	mov	r7, r1
   150cc:	mov	r3, sp
   150d0:	mov	r1, r8
   150d4:	str	r7, [sp, #40]	; 0x28
   150d8:	str	r6, [sp, #44]	; 0x2c
   150dc:	bl	1399c <__assert_fail@plt+0x2a98>
   150e0:	add	sp, sp, #48	; 0x30
   150e4:	ldrd	r4, [sp]
   150e8:	ldrd	r6, [sp, #8]
   150ec:	ldr	r8, [sp, #16]
   150f0:	ldrd	sl, [sp, #20]
   150f4:	add	sp, sp, #28
   150f8:	pop	{pc}		; (ldr pc, [sp], #4)
   150fc:	bl	10ef8 <abort@plt>
   15100:	andeq	r9, r2, r4, ror r2
   15104:	ldr	ip, [pc, #512]	; 1530c <__assert_fail@plt+0x4408>
   15108:	cmp	r0, #0
   1510c:	strd	r4, [sp, #-36]!	; 0xffffffdc
   15110:	ldrd	r4, [ip, #16]
   15114:	strd	r6, [sp, #8]
   15118:	clz	r6, r1
   1511c:	mov	r7, r1
   15120:	strd	r8, [sp, #16]
   15124:	mov	r8, r0
   15128:	lsr	r6, r6, #5
   1512c:	strd	sl, [sp, #24]
   15130:	mov	fp, r2
   15134:	mov	sl, #10
   15138:	ldrd	r2, [ip]
   1513c:	moveq	r6, #1
   15140:	str	lr, [sp, #32]
   15144:	sub	sp, sp, #92	; 0x5c
   15148:	cmp	r6, #0
   1514c:	ldrd	r0, [ip, #8]
   15150:	strd	r2, [sp, #40]	; 0x28
   15154:	strd	r4, [sp, #56]	; 0x38
   15158:	ldrd	r2, [ip, #24]
   1515c:	strd	r0, [sp, #48]	; 0x30
   15160:	ldrd	r0, [ip, #32]
   15164:	str	sl, [sp, #40]	; 0x28
   15168:	ldrd	r4, [ip, #40]	; 0x28
   1516c:	strd	r2, [sp, #64]	; 0x40
   15170:	strd	r0, [sp, #72]	; 0x48
   15174:	strd	r4, [sp, #80]	; 0x50
   15178:	bne	15308 <__assert_fail@plt+0x4404>
   1517c:	movw	r5, #37104	; 0x90f0
   15180:	movt	r5, #2
   15184:	str	r8, [sp, #80]	; 0x50
   15188:	str	r7, [sp, #84]	; 0x54
   1518c:	bl	10e2c <__errno_location@plt>
   15190:	ldr	r3, [r0]
   15194:	mov	r9, r0
   15198:	ldr	r2, [r5, #4]
   1519c:	ldr	r4, [r5]
   151a0:	str	r3, [sp, #28]
   151a4:	cmp	r2, #0
   151a8:	movgt	r1, sl
   151ac:	bgt	15214 <__assert_fail@plt+0x4310>
   151b0:	add	r3, r5, #8
   151b4:	str	r2, [sp, #36]	; 0x24
   151b8:	rsb	r2, r2, #1
   151bc:	cmp	r4, r3
   151c0:	beq	152dc <__assert_fail@plt+0x43d8>
   151c4:	mov	r1, #8
   151c8:	mov	r0, r4
   151cc:	mvn	r3, #-2147483648	; 0x80000000
   151d0:	str	r1, [sp]
   151d4:	add	r1, sp, #36	; 0x24
   151d8:	bl	162bc <__assert_fail@plt+0x53b8>
   151dc:	mov	r4, r0
   151e0:	str	r0, [r5]
   151e4:	ldr	r0, [r5, #4]
   151e8:	mov	r1, #0
   151ec:	ldr	r2, [sp, #36]	; 0x24
   151f0:	sub	r2, r2, r0
   151f4:	add	r0, r4, r0, lsl #3
   151f8:	lsl	r2, r2, #3
   151fc:	bl	10e44 <memset@plt>
   15200:	ldr	r3, [sp, #36]	; 0x24
   15204:	ldr	r1, [sp, #40]	; 0x28
   15208:	ldr	r8, [sp, #80]	; 0x50
   1520c:	str	r3, [r5, #4]
   15210:	ldr	r7, [sp, #84]	; 0x54
   15214:	mvn	r3, #0
   15218:	mov	r2, fp
   1521c:	ldr	r6, [sp, #44]	; 0x2c
   15220:	ldr	sl, [r4]
   15224:	ldr	r5, [r4, #4]
   15228:	orr	r6, r6, #1
   1522c:	stm	sp, {r1, r6}
   15230:	add	r1, sp, #48	; 0x30
   15234:	str	r8, [sp, #12]
   15238:	mov	r0, r5
   1523c:	str	r1, [sp, #8]
   15240:	mov	r1, sl
   15244:	str	r7, [sp, #16]
   15248:	bl	11fb0 <__assert_fail@plt+0x10ac>
   1524c:	cmp	sl, r0
   15250:	bhi	152b4 <__assert_fail@plt+0x43b0>
   15254:	add	r7, r0, #1
   15258:	movw	r3, #37236	; 0x9174
   1525c:	movt	r3, #2
   15260:	cmp	r5, r3
   15264:	str	r7, [r4]
   15268:	beq	15274 <__assert_fail@plt+0x4370>
   1526c:	mov	r0, r5
   15270:	bl	17740 <__assert_fail@plt+0x683c>
   15274:	mov	r0, r7
   15278:	bl	16018 <__assert_fail@plt+0x5114>
   1527c:	ldr	r3, [sp, #40]	; 0x28
   15280:	mov	r2, fp
   15284:	mov	r1, r7
   15288:	mov	r5, r0
   1528c:	ldr	lr, [sp, #80]	; 0x50
   15290:	ldr	ip, [sp, #84]	; 0x54
   15294:	str	r0, [r4, #4]
   15298:	add	r4, sp, #48	; 0x30
   1529c:	stm	sp, {r3, r6}
   152a0:	mvn	r3, #0
   152a4:	str	r4, [sp, #8]
   152a8:	str	lr, [sp, #12]
   152ac:	str	ip, [sp, #16]
   152b0:	bl	11fb0 <__assert_fail@plt+0x10ac>
   152b4:	ldr	r3, [sp, #28]
   152b8:	mov	r0, r5
   152bc:	str	r3, [r9]
   152c0:	add	sp, sp, #92	; 0x5c
   152c4:	ldrd	r4, [sp]
   152c8:	ldrd	r6, [sp, #8]
   152cc:	ldrd	r8, [sp, #16]
   152d0:	ldrd	sl, [sp, #24]
   152d4:	add	sp, sp, #32
   152d8:	pop	{pc}		; (ldr pc, [sp], #4)
   152dc:	mov	r1, #8
   152e0:	mvn	r3, #-2147483648	; 0x80000000
   152e4:	mov	r0, r6
   152e8:	str	r1, [sp]
   152ec:	add	r1, sp, #36	; 0x24
   152f0:	bl	162bc <__assert_fail@plt+0x53b8>
   152f4:	ldrd	r2, [r5, #8]
   152f8:	mov	r4, r0
   152fc:	str	r0, [r5]
   15300:	strd	r2, [r0]
   15304:	b	151e4 <__assert_fail@plt+0x42e0>
   15308:	bl	10ef8 <abort@plt>
   1530c:	andeq	r9, r2, r4, ror r2
   15310:	ldr	ip, [pc, #536]	; 15530 <__assert_fail@plt+0x462c>
   15314:	cmp	r0, #0
   15318:	strd	r4, [sp, #-36]!	; 0xffffffdc
   1531c:	ldrd	r4, [ip, #16]
   15320:	strd	r6, [sp, #8]
   15324:	mov	r6, r1
   15328:	mov	r7, r0
   1532c:	strd	r8, [sp, #16]
   15330:	mov	r9, #10
   15334:	strd	sl, [sp, #24]
   15338:	mov	sl, r2
   1533c:	mov	fp, r3
   15340:	str	lr, [sp, #32]
   15344:	clz	lr, r1
   15348:	sub	sp, sp, #92	; 0x5c
   1534c:	ldrd	r2, [ip]
   15350:	lsr	lr, lr, #5
   15354:	moveq	lr, #1
   15358:	ldrd	r0, [ip, #8]
   1535c:	cmp	lr, #0
   15360:	strd	r4, [sp, #56]	; 0x38
   15364:	ldrd	r4, [ip, #40]	; 0x28
   15368:	str	lr, [sp, #28]
   1536c:	strd	r2, [sp, #40]	; 0x28
   15370:	ldrd	r2, [ip, #24]
   15374:	strd	r0, [sp, #48]	; 0x30
   15378:	ldrd	r0, [ip, #32]
   1537c:	str	r9, [sp, #40]	; 0x28
   15380:	strd	r2, [sp, #64]	; 0x40
   15384:	strd	r4, [sp, #80]	; 0x50
   15388:	strd	r0, [sp, #72]	; 0x48
   1538c:	bne	1552c <__assert_fail@plt+0x4628>
   15390:	movw	r5, #37104	; 0x90f0
   15394:	movt	r5, #2
   15398:	str	r7, [sp, #80]	; 0x50
   1539c:	str	r6, [sp, #84]	; 0x54
   153a0:	bl	10e2c <__errno_location@plt>
   153a4:	ldr	r3, [r0]
   153a8:	mov	r8, r0
   153ac:	ldr	r2, [r5, #4]
   153b0:	ldr	r4, [r5]
   153b4:	str	r3, [sp, #24]
   153b8:	cmp	r2, #0
   153bc:	movgt	r1, r9
   153c0:	bgt	15428 <__assert_fail@plt+0x4524>
   153c4:	add	r3, r5, #8
   153c8:	str	r2, [sp, #36]	; 0x24
   153cc:	rsb	r2, r2, #1
   153d0:	cmp	r4, r3
   153d4:	beq	15500 <__assert_fail@plt+0x45fc>
   153d8:	mov	r1, #8
   153dc:	mov	r0, r4
   153e0:	mvn	r3, #-2147483648	; 0x80000000
   153e4:	str	r1, [sp]
   153e8:	add	r1, sp, #36	; 0x24
   153ec:	bl	162bc <__assert_fail@plt+0x53b8>
   153f0:	mov	r4, r0
   153f4:	str	r0, [r5]
   153f8:	ldr	r0, [r5, #4]
   153fc:	mov	r1, #0
   15400:	ldr	r2, [sp, #36]	; 0x24
   15404:	sub	r2, r2, r0
   15408:	add	r0, r4, r0, lsl #3
   1540c:	lsl	r2, r2, #3
   15410:	bl	10e44 <memset@plt>
   15414:	ldr	r3, [sp, #36]	; 0x24
   15418:	ldr	r1, [sp, #40]	; 0x28
   1541c:	ldr	r7, [sp, #80]	; 0x50
   15420:	str	r3, [r5, #4]
   15424:	ldr	r6, [sp, #84]	; 0x54
   15428:	mov	r3, fp
   1542c:	mov	r2, sl
   15430:	ldr	r0, [sp, #44]	; 0x2c
   15434:	ldr	r9, [r4]
   15438:	ldr	r5, [r4, #4]
   1543c:	orr	r0, r0, #1
   15440:	str	r1, [sp]
   15444:	add	r1, sp, #48	; 0x30
   15448:	str	r0, [sp, #4]
   1544c:	str	r1, [sp, #8]
   15450:	mov	r1, r9
   15454:	str	r7, [sp, #12]
   15458:	str	r6, [sp, #16]
   1545c:	str	r0, [sp, #28]
   15460:	mov	r0, r5
   15464:	bl	11fb0 <__assert_fail@plt+0x10ac>
   15468:	cmp	r9, r0
   1546c:	bhi	154d8 <__assert_fail@plt+0x45d4>
   15470:	add	r6, r0, #1
   15474:	movw	r3, #37236	; 0x9174
   15478:	movt	r3, #2
   1547c:	cmp	r5, r3
   15480:	str	r6, [r4]
   15484:	beq	15490 <__assert_fail@plt+0x458c>
   15488:	mov	r0, r5
   1548c:	bl	17740 <__assert_fail@plt+0x683c>
   15490:	mov	r0, r6
   15494:	bl	16018 <__assert_fail@plt+0x5114>
   15498:	ldr	lr, [sp, #40]	; 0x28
   1549c:	mov	r1, r6
   154a0:	mov	r3, fp
   154a4:	mov	r2, sl
   154a8:	mov	r5, r0
   154ac:	ldr	r6, [sp, #80]	; 0x50
   154b0:	ldr	ip, [sp, #84]	; 0x54
   154b4:	str	r0, [r4, #4]
   154b8:	str	lr, [sp]
   154bc:	ldr	lr, [sp, #28]
   154c0:	str	lr, [sp, #4]
   154c4:	add	lr, sp, #48	; 0x30
   154c8:	str	r6, [sp, #12]
   154cc:	str	lr, [sp, #8]
   154d0:	str	ip, [sp, #16]
   154d4:	bl	11fb0 <__assert_fail@plt+0x10ac>
   154d8:	ldr	r3, [sp, #24]
   154dc:	mov	r0, r5
   154e0:	str	r3, [r8]
   154e4:	add	sp, sp, #92	; 0x5c
   154e8:	ldrd	r4, [sp]
   154ec:	ldrd	r6, [sp, #8]
   154f0:	ldrd	r8, [sp, #16]
   154f4:	ldrd	sl, [sp, #24]
   154f8:	add	sp, sp, #32
   154fc:	pop	{pc}		; (ldr pc, [sp], #4)
   15500:	mov	r1, #8
   15504:	mvn	r3, #-2147483648	; 0x80000000
   15508:	ldr	r0, [sp, #28]
   1550c:	str	r1, [sp]
   15510:	add	r1, sp, #36	; 0x24
   15514:	bl	162bc <__assert_fail@plt+0x53b8>
   15518:	ldrd	r2, [r5, #8]
   1551c:	mov	r4, r0
   15520:	str	r0, [r5]
   15524:	strd	r2, [r0]
   15528:	b	153f8 <__assert_fail@plt+0x44f4>
   1552c:	bl	10ef8 <abort@plt>
   15530:	andeq	r9, r2, r4, ror r2
   15534:	ldr	r3, [pc]	; 1553c <__assert_fail@plt+0x4638>
   15538:	b	1399c <__assert_fail@plt+0x2a98>
   1553c:	andeq	r9, r2, r0, lsl #2
   15540:	strd	r4, [sp, #-36]!	; 0xffffffdc
   15544:	movw	r4, #37104	; 0x90f0
   15548:	movt	r4, #2
   1554c:	strd	r6, [sp, #8]
   15550:	strd	r8, [sp, #16]
   15554:	strd	sl, [sp, #24]
   15558:	mov	sl, r0
   1555c:	mov	fp, r1
   15560:	str	lr, [sp, #32]
   15564:	sub	sp, sp, #44	; 0x2c
   15568:	bl	10e2c <__errno_location@plt>
   1556c:	ldr	r3, [r0]
   15570:	mov	r8, r0
   15574:	ldr	r2, [r4, #4]
   15578:	ldr	r5, [r4]
   1557c:	str	r3, [sp, #28]
   15580:	cmp	r2, #0
   15584:	bgt	155e0 <__assert_fail@plt+0x46dc>
   15588:	add	r3, r4, #8
   1558c:	str	r2, [sp, #36]	; 0x24
   15590:	rsb	r2, r2, #1
   15594:	cmp	r5, r3
   15598:	beq	156bc <__assert_fail@plt+0x47b8>
   1559c:	mov	r1, #8
   155a0:	mov	r0, r5
   155a4:	mvn	r3, #-2147483648	; 0x80000000
   155a8:	str	r1, [sp]
   155ac:	add	r1, sp, #36	; 0x24
   155b0:	bl	162bc <__assert_fail@plt+0x53b8>
   155b4:	mov	r5, r0
   155b8:	str	r0, [r4]
   155bc:	ldr	r0, [r4, #4]
   155c0:	mov	r1, #0
   155c4:	ldr	r2, [sp, #36]	; 0x24
   155c8:	sub	r2, r2, r0
   155cc:	add	r0, r5, r0, lsl #3
   155d0:	lsl	r2, r2, #3
   155d4:	bl	10e44 <memset@plt>
   155d8:	ldr	r3, [sp, #36]	; 0x24
   155dc:	str	r3, [r4, #4]
   155e0:	ldr	ip, [r4, #16]
   155e4:	mov	r3, fp
   155e8:	mov	r2, sl
   155ec:	ldr	r7, [r4, #20]
   155f0:	ldr	r0, [pc, #240]	; 156e8 <__assert_fail@plt+0x47e4>
   155f4:	ldr	r9, [r5]
   155f8:	orr	r7, r7, #1
   155fc:	ldr	r6, [r5, #4]
   15600:	str	ip, [sp]
   15604:	ldr	ip, [r4, #56]	; 0x38
   15608:	mov	r1, r9
   1560c:	str	r7, [sp, #4]
   15610:	ldr	lr, [r4, #60]	; 0x3c
   15614:	str	r0, [sp, #8]
   15618:	mov	r0, r6
   1561c:	str	ip, [sp, #12]
   15620:	str	lr, [sp, #16]
   15624:	bl	11fb0 <__assert_fail@plt+0x10ac>
   15628:	cmp	r9, r0
   1562c:	bhi	15694 <__assert_fail@plt+0x4790>
   15630:	add	r9, r0, #1
   15634:	movw	r3, #37236	; 0x9174
   15638:	movt	r3, #2
   1563c:	cmp	r6, r3
   15640:	str	r9, [r5]
   15644:	beq	15650 <__assert_fail@plt+0x474c>
   15648:	mov	r0, r6
   1564c:	bl	17740 <__assert_fail@plt+0x683c>
   15650:	mov	r0, r9
   15654:	bl	16018 <__assert_fail@plt+0x5114>
   15658:	ldr	ip, [r4, #16]
   1565c:	mov	r1, r9
   15660:	mov	r3, fp
   15664:	mov	r2, sl
   15668:	mov	r6, r0
   1566c:	ldr	r9, [r4, #56]	; 0x38
   15670:	ldr	lr, [r4, #60]	; 0x3c
   15674:	str	r0, [r5, #4]
   15678:	str	ip, [sp]
   1567c:	ldr	ip, [pc, #100]	; 156e8 <__assert_fail@plt+0x47e4>
   15680:	str	r7, [sp, #4]
   15684:	str	ip, [sp, #8]
   15688:	str	r9, [sp, #12]
   1568c:	str	lr, [sp, #16]
   15690:	bl	11fb0 <__assert_fail@plt+0x10ac>
   15694:	ldr	r3, [sp, #28]
   15698:	mov	r0, r6
   1569c:	str	r3, [r8]
   156a0:	add	sp, sp, #44	; 0x2c
   156a4:	ldrd	r4, [sp]
   156a8:	ldrd	r6, [sp, #8]
   156ac:	ldrd	r8, [sp, #16]
   156b0:	ldrd	sl, [sp, #24]
   156b4:	add	sp, sp, #32
   156b8:	pop	{pc}		; (ldr pc, [sp], #4)
   156bc:	mov	r0, #8
   156c0:	mvn	r3, #-2147483648	; 0x80000000
   156c4:	add	r1, sp, #36	; 0x24
   156c8:	str	r0, [sp]
   156cc:	mov	r0, #0
   156d0:	bl	162bc <__assert_fail@plt+0x53b8>
   156d4:	ldrd	r2, [r4, #8]
   156d8:	mov	r5, r0
   156dc:	str	r0, [r4]
   156e0:	strd	r2, [r0]
   156e4:	b	155bc <__assert_fail@plt+0x46b8>
   156e8:	andeq	r9, r2, r8, lsl #2
   156ec:	ldr	r3, [pc, #4]	; 156f8 <__assert_fail@plt+0x47f4>
   156f0:	mvn	r2, #0
   156f4:	b	1399c <__assert_fail@plt+0x2a98>
   156f8:	andeq	r9, r2, r0, lsl #2
   156fc:	strd	r4, [sp, #-36]!	; 0xffffffdc
   15700:	movw	r4, #37104	; 0x90f0
   15704:	movt	r4, #2
   15708:	strd	r6, [sp, #8]
   1570c:	strd	r8, [sp, #16]
   15710:	strd	sl, [sp, #24]
   15714:	mov	sl, r0
   15718:	str	lr, [sp, #32]
   1571c:	sub	sp, sp, #44	; 0x2c
   15720:	bl	10e2c <__errno_location@plt>
   15724:	ldr	r3, [r0]
   15728:	mov	r8, r0
   1572c:	ldr	r2, [r4, #4]
   15730:	ldr	r5, [r4]
   15734:	str	r3, [sp, #28]
   15738:	cmp	r2, #0
   1573c:	bgt	15798 <__assert_fail@plt+0x4894>
   15740:	add	r3, r4, #8
   15744:	str	r2, [sp, #36]	; 0x24
   15748:	rsb	r2, r2, #1
   1574c:	cmp	r5, r3
   15750:	beq	15860 <__assert_fail@plt+0x495c>
   15754:	mov	r1, #8
   15758:	mov	r0, r5
   1575c:	mvn	r3, #-2147483648	; 0x80000000
   15760:	str	r1, [sp]
   15764:	add	r1, sp, #36	; 0x24
   15768:	bl	162bc <__assert_fail@plt+0x53b8>
   1576c:	mov	r5, r0
   15770:	str	r0, [r4]
   15774:	ldr	r0, [r4, #4]
   15778:	mov	r1, #0
   1577c:	ldr	r2, [sp, #36]	; 0x24
   15780:	sub	r2, r2, r0
   15784:	add	r0, r5, r0, lsl #3
   15788:	lsl	r2, r2, #3
   1578c:	bl	10e44 <memset@plt>
   15790:	ldr	r3, [sp, #36]	; 0x24
   15794:	str	r3, [r4, #4]
   15798:	ldr	ip, [r4, #16]
   1579c:	mvn	r3, #0
   157a0:	mov	r2, sl
   157a4:	ldr	r7, [r4, #20]
   157a8:	ldr	fp, [pc, #220]	; 1588c <__assert_fail@plt+0x4988>
   157ac:	ldr	r9, [r5]
   157b0:	orr	r7, r7, #1
   157b4:	ldr	r6, [r5, #4]
   157b8:	str	ip, [sp]
   157bc:	ldr	ip, [r4, #56]	; 0x38
   157c0:	mov	r1, r9
   157c4:	stmib	sp, {r7, fp}
   157c8:	ldr	lr, [r4, #60]	; 0x3c
   157cc:	mov	r0, r6
   157d0:	str	ip, [sp, #12]
   157d4:	str	lr, [sp, #16]
   157d8:	bl	11fb0 <__assert_fail@plt+0x10ac>
   157dc:	cmp	r9, r0
   157e0:	bhi	15838 <__assert_fail@plt+0x4934>
   157e4:	add	r9, r0, #1
   157e8:	movw	r3, #37236	; 0x9174
   157ec:	movt	r3, #2
   157f0:	cmp	r6, r3
   157f4:	str	r9, [r5]
   157f8:	beq	15804 <__assert_fail@plt+0x4900>
   157fc:	mov	r0, r6
   15800:	bl	17740 <__assert_fail@plt+0x683c>
   15804:	mov	r0, r9
   15808:	bl	16018 <__assert_fail@plt+0x5114>
   1580c:	ldr	r3, [r4, #16]
   15810:	mov	r2, sl
   15814:	mov	r1, r9
   15818:	mov	r6, r0
   1581c:	ldr	lr, [r4, #56]	; 0x38
   15820:	ldr	ip, [r4, #60]	; 0x3c
   15824:	str	r0, [r5, #4]
   15828:	stm	sp, {r3, r7, fp, lr}
   1582c:	mvn	r3, #0
   15830:	str	ip, [sp, #16]
   15834:	bl	11fb0 <__assert_fail@plt+0x10ac>
   15838:	ldr	r3, [sp, #28]
   1583c:	mov	r0, r6
   15840:	str	r3, [r8]
   15844:	add	sp, sp, #44	; 0x2c
   15848:	ldrd	r4, [sp]
   1584c:	ldrd	r6, [sp, #8]
   15850:	ldrd	r8, [sp, #16]
   15854:	ldrd	sl, [sp, #24]
   15858:	add	sp, sp, #32
   1585c:	pop	{pc}		; (ldr pc, [sp], #4)
   15860:	mov	r0, #8
   15864:	mvn	r3, #-2147483648	; 0x80000000
   15868:	add	r1, sp, #36	; 0x24
   1586c:	str	r0, [sp]
   15870:	mov	r0, #0
   15874:	bl	162bc <__assert_fail@plt+0x53b8>
   15878:	ldrd	r2, [r4, #8]
   1587c:	mov	r5, r0
   15880:	str	r0, [r4]
   15884:	strd	r2, [r0]
   15888:	b	15774 <__assert_fail@plt+0x4870>
   1588c:	andeq	r9, r2, r8, lsl #2
   15890:	cmp	r1, #0
   15894:	strd	r4, [sp, #-16]!
   15898:	mov	ip, r3
   1589c:	str	r6, [sp, #8]
   158a0:	mov	r4, r0
   158a4:	str	lr, [sp, #12]
   158a8:	sub	sp, sp, #32
   158ac:	ldr	r5, [sp, #48]	; 0x30
   158b0:	ldr	r6, [sp, #52]	; 0x34
   158b4:	beq	159f8 <__assert_fail@plt+0x4af4>
   158b8:	mov	r3, r1
   158bc:	mov	r1, #1
   158c0:	stm	sp, {r2, ip}
   158c4:	movw	r2, #32780	; 0x800c
   158c8:	movt	r2, #1
   158cc:	bl	10e68 <__fprintf_chk@plt>
   158d0:	mov	r2, #5
   158d4:	movw	r1, #32800	; 0x8020
   158d8:	movt	r1, #1
   158dc:	mov	r0, #0
   158e0:	bl	10d48 <dcgettext@plt>
   158e4:	movw	ip, #2022	; 0x7e6
   158e8:	mov	r3, r0
   158ec:	mov	r1, #1
   158f0:	movw	r2, #33528	; 0x82f8
   158f4:	movt	r2, #1
   158f8:	mov	r0, r4
   158fc:	str	ip, [sp]
   15900:	bl	10e68 <__fprintf_chk@plt>
   15904:	mov	r1, r4
   15908:	mov	r0, #10
   1590c:	bl	10d3c <fputc_unlocked@plt>
   15910:	mov	r2, #5
   15914:	movw	r1, #32804	; 0x8024
   15918:	movt	r1, #1
   1591c:	mov	r0, #0
   15920:	bl	10d48 <dcgettext@plt>
   15924:	mov	r2, r0
   15928:	mov	r1, #1
   1592c:	movw	r3, #32976	; 0x80d0
   15930:	movt	r3, #1
   15934:	mov	r0, r4
   15938:	bl	10e68 <__fprintf_chk@plt>
   1593c:	mov	r1, r4
   15940:	mov	r0, #10
   15944:	bl	10d3c <fputc_unlocked@plt>
   15948:	cmp	r6, #9
   1594c:	ldrls	pc, [pc, r6, lsl #2]
   15950:	b	15c64 <__assert_fail@plt+0x4d60>
   15954:	andeq	r5, r1, r4, ror #19
   15958:	andeq	r5, r1, r4, lsl sl
   1595c:	andeq	r5, r1, r0, asr sl
   15960:	muleq	r1, r0, sl
   15964:	ldrdeq	r5, [r1], -r8
   15968:	andeq	r5, r1, r0, lsl fp
   1596c:	andeq	r5, r1, r8, asr fp
   15970:	andeq	r5, r1, ip, lsr #23
   15974:	andeq	r5, r1, r4, lsl #24
   15978:	andeq	r5, r1, ip, ror r9
   1597c:	movw	r1, #33280	; 0x8200
   15980:	movt	r1, #1
   15984:	mov	r2, #5
   15988:	mov	r0, #0
   1598c:	bl	10d48 <dcgettext@plt>
   15990:	ldr	lr, [r5, #4]
   15994:	mov	r2, r0
   15998:	mov	r1, #1
   1599c:	mov	r0, r4
   159a0:	ldr	r3, [r5, #8]
   159a4:	ldr	ip, [r5, #32]
   159a8:	str	lr, [sp]
   159ac:	ldr	lr, [r5, #12]
   159b0:	str	ip, [sp, #28]
   159b4:	ldr	ip, [r5, #28]
   159b8:	str	r3, [sp, #4]
   159bc:	ldr	r3, [r5, #16]
   159c0:	str	lr, [sp, #8]
   159c4:	ldr	lr, [r5, #20]
   159c8:	str	ip, [sp, #24]
   159cc:	ldr	ip, [r5, #24]
   159d0:	str	r3, [sp, #12]
   159d4:	ldr	r3, [r5]
   159d8:	str	lr, [sp, #16]
   159dc:	str	ip, [sp, #20]
   159e0:	bl	10e68 <__fprintf_chk@plt>
   159e4:	add	sp, sp, #32
   159e8:	ldrd	r4, [sp]
   159ec:	ldr	r6, [sp, #8]
   159f0:	add	sp, sp, #12
   159f4:	pop	{pc}		; (ldr pc, [sp], #4)
   159f8:	mov	r3, r2
   159fc:	mov	r1, #1
   15a00:	str	ip, [sp]
   15a04:	movw	r2, #32792	; 0x8018
   15a08:	movt	r2, #1
   15a0c:	bl	10e68 <__fprintf_chk@plt>
   15a10:	b	158d0 <__assert_fail@plt+0x49cc>
   15a14:	mov	r2, #5
   15a18:	movw	r1, #33012	; 0x80f4
   15a1c:	movt	r1, #1
   15a20:	mov	r0, #0
   15a24:	bl	10d48 <dcgettext@plt>
   15a28:	ldr	r3, [r5]
   15a2c:	mov	r2, r0
   15a30:	mov	r1, #1
   15a34:	mov	r0, r4
   15a38:	add	sp, sp, #32
   15a3c:	ldrd	r4, [sp]
   15a40:	ldr	r6, [sp, #8]
   15a44:	ldr	lr, [sp, #12]
   15a48:	add	sp, sp, #16
   15a4c:	b	10e68 <__fprintf_chk@plt>
   15a50:	mov	r2, #5
   15a54:	movw	r1, #33028	; 0x8104
   15a58:	movt	r1, #1
   15a5c:	mov	r0, #0
   15a60:	bl	10d48 <dcgettext@plt>
   15a64:	ldm	r5, {r3, ip}
   15a68:	mov	r2, r0
   15a6c:	mov	r1, #1
   15a70:	mov	r0, r4
   15a74:	str	ip, [sp, #48]	; 0x30
   15a78:	add	sp, sp, #32
   15a7c:	ldrd	r4, [sp]
   15a80:	ldr	r6, [sp, #8]
   15a84:	ldr	lr, [sp, #12]
   15a88:	add	sp, sp, #16
   15a8c:	b	10e68 <__fprintf_chk@plt>
   15a90:	mov	r2, #5
   15a94:	movw	r1, #33052	; 0x811c
   15a98:	movt	r1, #1
   15a9c:	mov	r0, #0
   15aa0:	bl	10d48 <dcgettext@plt>
   15aa4:	ldm	r5, {r3, lr}
   15aa8:	mov	r2, r0
   15aac:	mov	r1, #1
   15ab0:	mov	r0, r4
   15ab4:	ldr	ip, [r5, #8]
   15ab8:	str	lr, [sp, #48]	; 0x30
   15abc:	str	ip, [sp, #52]	; 0x34
   15ac0:	add	sp, sp, #32
   15ac4:	ldrd	r4, [sp]
   15ac8:	ldr	r6, [sp, #8]
   15acc:	ldr	lr, [sp, #12]
   15ad0:	add	sp, sp, #16
   15ad4:	b	10e68 <__fprintf_chk@plt>
   15ad8:	mov	r2, #5
   15adc:	movw	r1, #33080	; 0x8138
   15ae0:	movt	r1, #1
   15ae4:	mov	r0, #0
   15ae8:	bl	10d48 <dcgettext@plt>
   15aec:	ldmib	r5, {r3, ip, lr}
   15af0:	mov	r2, r0
   15af4:	mov	r1, #1
   15af8:	mov	r0, r4
   15afc:	str	r3, [sp]
   15b00:	ldr	r3, [r5]
   15b04:	stmib	sp, {ip, lr}
   15b08:	bl	10e68 <__fprintf_chk@plt>
   15b0c:	b	159e4 <__assert_fail@plt+0x4ae0>
   15b10:	mov	r2, #5
   15b14:	movw	r1, #33112	; 0x8158
   15b18:	movt	r1, #1
   15b1c:	mov	r0, #0
   15b20:	bl	10d48 <dcgettext@plt>
   15b24:	ldmib	r5, {ip, lr}
   15b28:	mov	r2, r0
   15b2c:	mov	r1, #1
   15b30:	mov	r0, r4
   15b34:	ldr	r3, [r5, #16]
   15b38:	str	ip, [sp]
   15b3c:	ldr	ip, [r5, #12]
   15b40:	str	r3, [sp, #12]
   15b44:	ldr	r3, [r5]
   15b48:	str	lr, [sp, #4]
   15b4c:	str	ip, [sp, #8]
   15b50:	bl	10e68 <__fprintf_chk@plt>
   15b54:	b	159e4 <__assert_fail@plt+0x4ae0>
   15b58:	mov	r2, #5
   15b5c:	movw	r1, #33148	; 0x817c
   15b60:	movt	r1, #1
   15b64:	mov	r0, #0
   15b68:	bl	10d48 <dcgettext@plt>
   15b6c:	ldr	lr, [r5, #4]
   15b70:	mov	r2, r0
   15b74:	mov	r1, #1
   15b78:	mov	r0, r4
   15b7c:	ldr	r3, [r5, #8]
   15b80:	ldr	ip, [r5, #20]
   15b84:	str	lr, [sp]
   15b88:	ldr	lr, [r5, #12]
   15b8c:	str	ip, [sp, #16]
   15b90:	ldr	ip, [r5, #16]
   15b94:	str	r3, [sp, #4]
   15b98:	ldr	r3, [r5]
   15b9c:	str	lr, [sp, #8]
   15ba0:	str	ip, [sp, #12]
   15ba4:	bl	10e68 <__fprintf_chk@plt>
   15ba8:	b	159e4 <__assert_fail@plt+0x4ae0>
   15bac:	mov	r2, #5
   15bb0:	movw	r1, #33188	; 0x81a4
   15bb4:	movt	r1, #1
   15bb8:	mov	r0, #0
   15bbc:	bl	10d48 <dcgettext@plt>
   15bc0:	ldmib	r5, {r3, ip}
   15bc4:	mov	r2, r0
   15bc8:	mov	r1, #1
   15bcc:	mov	r0, r4
   15bd0:	ldr	lr, [r5, #24]
   15bd4:	str	r3, [sp]
   15bd8:	ldr	r3, [r5, #12]
   15bdc:	str	lr, [sp, #20]
   15be0:	ldr	lr, [r5, #20]
   15be4:	str	ip, [sp, #4]
   15be8:	ldr	ip, [r5, #16]
   15bec:	str	r3, [sp, #8]
   15bf0:	ldr	r3, [r5]
   15bf4:	str	ip, [sp, #12]
   15bf8:	str	lr, [sp, #16]
   15bfc:	bl	10e68 <__fprintf_chk@plt>
   15c00:	b	159e4 <__assert_fail@plt+0x4ae0>
   15c04:	mov	r2, #5
   15c08:	movw	r1, #33232	; 0x81d0
   15c0c:	movt	r1, #1
   15c10:	mov	r0, #0
   15c14:	bl	10d48 <dcgettext@plt>
   15c18:	ldmib	r5, {ip, lr}
   15c1c:	mov	r2, r0
   15c20:	mov	r1, #1
   15c24:	mov	r0, r4
   15c28:	ldr	r3, [r5, #28]
   15c2c:	str	ip, [sp]
   15c30:	ldr	ip, [r5, #12]
   15c34:	str	r3, [sp, #24]
   15c38:	ldr	r3, [r5, #24]
   15c3c:	str	lr, [sp, #4]
   15c40:	ldr	lr, [r5, #16]
   15c44:	str	ip, [sp, #8]
   15c48:	ldr	ip, [r5, #20]
   15c4c:	str	r3, [sp, #20]
   15c50:	ldr	r3, [r5]
   15c54:	str	lr, [sp, #12]
   15c58:	str	ip, [sp, #16]
   15c5c:	bl	10e68 <__fprintf_chk@plt>
   15c60:	b	159e4 <__assert_fail@plt+0x4ae0>
   15c64:	movw	r1, #33332	; 0x8234
   15c68:	movt	r1, #1
   15c6c:	b	15984 <__assert_fail@plt+0x4a80>
   15c70:	strd	r4, [sp, #-12]!
   15c74:	str	lr, [sp, #8]
   15c78:	sub	sp, sp, #12
   15c7c:	ldr	r5, [sp, #24]
   15c80:	ldr	ip, [r5]
   15c84:	cmp	ip, #0
   15c88:	beq	15ca4 <__assert_fail@plt+0x4da0>
   15c8c:	mov	lr, r5
   15c90:	mov	ip, #0
   15c94:	ldr	r4, [lr, #4]!
   15c98:	add	ip, ip, #1
   15c9c:	cmp	r4, #0
   15ca0:	bne	15c94 <__assert_fail@plt+0x4d90>
   15ca4:	stm	sp, {r5, ip}
   15ca8:	bl	15890 <__assert_fail@plt+0x498c>
   15cac:	add	sp, sp, #12
   15cb0:	ldrd	r4, [sp]
   15cb4:	add	sp, sp, #8
   15cb8:	pop	{pc}		; (ldr pc, [sp], #4)
   15cbc:	push	{lr}		; (str lr, [sp, #-4]!)
   15cc0:	sub	sp, sp, #52	; 0x34
   15cc4:	ldr	ip, [sp, #56]	; 0x38
   15cc8:	ldr	lr, [ip]
   15ccc:	cmp	lr, #0
   15cd0:	str	lr, [sp, #8]
   15cd4:	beq	15d6c <__assert_fail@plt+0x4e68>
   15cd8:	ldr	lr, [ip, #4]
   15cdc:	cmp	lr, #0
   15ce0:	str	lr, [sp, #12]
   15ce4:	beq	15d80 <__assert_fail@plt+0x4e7c>
   15ce8:	ldr	lr, [ip, #8]
   15cec:	cmp	lr, #0
   15cf0:	str	lr, [sp, #16]
   15cf4:	beq	15d88 <__assert_fail@plt+0x4e84>
   15cf8:	ldr	lr, [ip, #12]
   15cfc:	cmp	lr, #0
   15d00:	str	lr, [sp, #20]
   15d04:	beq	15d90 <__assert_fail@plt+0x4e8c>
   15d08:	ldr	lr, [ip, #16]
   15d0c:	cmp	lr, #0
   15d10:	str	lr, [sp, #24]
   15d14:	beq	15d98 <__assert_fail@plt+0x4e94>
   15d18:	ldr	lr, [ip, #20]
   15d1c:	cmp	lr, #0
   15d20:	str	lr, [sp, #28]
   15d24:	beq	15da0 <__assert_fail@plt+0x4e9c>
   15d28:	ldr	lr, [ip, #24]
   15d2c:	cmp	lr, #0
   15d30:	str	lr, [sp, #32]
   15d34:	beq	15da8 <__assert_fail@plt+0x4ea4>
   15d38:	ldr	lr, [ip, #28]
   15d3c:	cmp	lr, #0
   15d40:	str	lr, [sp, #36]	; 0x24
   15d44:	beq	15db0 <__assert_fail@plt+0x4eac>
   15d48:	ldr	lr, [ip, #32]
   15d4c:	cmp	lr, #0
   15d50:	str	lr, [sp, #40]	; 0x28
   15d54:	beq	15db8 <__assert_fail@plt+0x4eb4>
   15d58:	ldr	ip, [ip, #36]	; 0x24
   15d5c:	cmp	ip, #0
   15d60:	str	ip, [sp, #44]	; 0x2c
   15d64:	movne	lr, #10
   15d68:	moveq	lr, #9
   15d6c:	add	ip, sp, #8
   15d70:	stm	sp, {ip, lr}
   15d74:	bl	15890 <__assert_fail@plt+0x498c>
   15d78:	add	sp, sp, #52	; 0x34
   15d7c:	pop	{pc}		; (ldr pc, [sp], #4)
   15d80:	mov	lr, #1
   15d84:	b	15d6c <__assert_fail@plt+0x4e68>
   15d88:	mov	lr, #2
   15d8c:	b	15d6c <__assert_fail@plt+0x4e68>
   15d90:	mov	lr, #3
   15d94:	b	15d6c <__assert_fail@plt+0x4e68>
   15d98:	mov	lr, #4
   15d9c:	b	15d6c <__assert_fail@plt+0x4e68>
   15da0:	mov	lr, #5
   15da4:	b	15d6c <__assert_fail@plt+0x4e68>
   15da8:	mov	lr, #6
   15dac:	b	15d6c <__assert_fail@plt+0x4e68>
   15db0:	mov	lr, #7
   15db4:	b	15d6c <__assert_fail@plt+0x4e68>
   15db8:	mov	lr, #8
   15dbc:	b	15d6c <__assert_fail@plt+0x4e68>
   15dc0:	push	{r3}		; (str r3, [sp, #-4]!)
   15dc4:	push	{lr}		; (str lr, [sp, #-4]!)
   15dc8:	sub	sp, sp, #56	; 0x38
   15dcc:	ldr	ip, [sp, #64]	; 0x40
   15dd0:	add	r3, sp, #64	; 0x40
   15dd4:	str	r3, [sp, #12]
   15dd8:	cmp	ip, #0
   15ddc:	str	ip, [sp, #16]
   15de0:	beq	15e78 <__assert_fail@plt+0x4f74>
   15de4:	ldr	ip, [sp, #68]	; 0x44
   15de8:	cmp	ip, #0
   15dec:	str	ip, [sp, #20]
   15df0:	beq	15e9c <__assert_fail@plt+0x4f98>
   15df4:	ldr	ip, [sp, #72]	; 0x48
   15df8:	cmp	ip, #0
   15dfc:	str	ip, [sp, #24]
   15e00:	beq	15ea4 <__assert_fail@plt+0x4fa0>
   15e04:	ldr	ip, [sp, #76]	; 0x4c
   15e08:	cmp	ip, #0
   15e0c:	str	ip, [sp, #28]
   15e10:	beq	15eac <__assert_fail@plt+0x4fa8>
   15e14:	ldr	ip, [sp, #80]	; 0x50
   15e18:	cmp	ip, #0
   15e1c:	str	ip, [sp, #32]
   15e20:	beq	15eb4 <__assert_fail@plt+0x4fb0>
   15e24:	ldr	ip, [sp, #84]	; 0x54
   15e28:	cmp	ip, #0
   15e2c:	str	ip, [sp, #36]	; 0x24
   15e30:	beq	15ebc <__assert_fail@plt+0x4fb8>
   15e34:	ldr	ip, [sp, #88]	; 0x58
   15e38:	cmp	ip, #0
   15e3c:	str	ip, [sp, #40]	; 0x28
   15e40:	beq	15ec4 <__assert_fail@plt+0x4fc0>
   15e44:	ldr	ip, [sp, #92]	; 0x5c
   15e48:	cmp	ip, #0
   15e4c:	str	ip, [sp, #44]	; 0x2c
   15e50:	beq	15ecc <__assert_fail@plt+0x4fc8>
   15e54:	ldr	ip, [sp, #96]	; 0x60
   15e58:	cmp	ip, #0
   15e5c:	str	ip, [sp, #48]	; 0x30
   15e60:	beq	15ed4 <__assert_fail@plt+0x4fd0>
   15e64:	ldr	r3, [sp, #100]	; 0x64
   15e68:	cmp	r3, #0
   15e6c:	str	r3, [sp, #52]	; 0x34
   15e70:	movne	ip, #10
   15e74:	moveq	ip, #9
   15e78:	ldr	r3, [sp, #60]	; 0x3c
   15e7c:	add	lr, sp, #16
   15e80:	str	lr, [sp]
   15e84:	str	ip, [sp, #4]
   15e88:	bl	15890 <__assert_fail@plt+0x498c>
   15e8c:	add	sp, sp, #56	; 0x38
   15e90:	pop	{lr}		; (ldr lr, [sp], #4)
   15e94:	add	sp, sp, #4
   15e98:	bx	lr
   15e9c:	mov	ip, #1
   15ea0:	b	15e78 <__assert_fail@plt+0x4f74>
   15ea4:	mov	ip, #2
   15ea8:	b	15e78 <__assert_fail@plt+0x4f74>
   15eac:	mov	ip, #3
   15eb0:	b	15e78 <__assert_fail@plt+0x4f74>
   15eb4:	mov	ip, #4
   15eb8:	b	15e78 <__assert_fail@plt+0x4f74>
   15ebc:	mov	ip, #5
   15ec0:	b	15e78 <__assert_fail@plt+0x4f74>
   15ec4:	mov	ip, #6
   15ec8:	b	15e78 <__assert_fail@plt+0x4f74>
   15ecc:	mov	ip, #7
   15ed0:	b	15e78 <__assert_fail@plt+0x4f74>
   15ed4:	mov	ip, #8
   15ed8:	b	15e78 <__assert_fail@plt+0x4f74>
   15edc:	movw	r3, #37196	; 0x914c
   15ee0:	movt	r3, #2
   15ee4:	str	r4, [sp, #-8]!
   15ee8:	mov	r0, #10
   15eec:	ldr	r1, [r3]
   15ef0:	str	lr, [sp, #4]
   15ef4:	bl	10d3c <fputc_unlocked@plt>
   15ef8:	mov	r2, #5
   15efc:	movw	r1, #33392	; 0x8270
   15f00:	movt	r1, #1
   15f04:	mov	r0, #0
   15f08:	bl	10d48 <dcgettext@plt>
   15f0c:	mov	r1, r0
   15f10:	movw	r2, #33412	; 0x8284
   15f14:	movt	r2, #1
   15f18:	mov	r0, #1
   15f1c:	bl	10e50 <__printf_chk@plt>
   15f20:	mov	r2, #5
   15f24:	movw	r1, #33436	; 0x829c
   15f28:	movt	r1, #1
   15f2c:	mov	r0, #0
   15f30:	bl	10d48 <dcgettext@plt>
   15f34:	mov	r1, r0
   15f38:	movw	r3, #32036	; 0x7d24
   15f3c:	movt	r3, #1
   15f40:	movw	r2, #32076	; 0x7d4c
   15f44:	movt	r2, #1
   15f48:	mov	r0, #1
   15f4c:	bl	10e50 <__printf_chk@plt>
   15f50:	mov	r2, #5
   15f54:	movw	r1, #33456	; 0x82b0
   15f58:	movt	r1, #1
   15f5c:	mov	r0, #0
   15f60:	bl	10d48 <dcgettext@plt>
   15f64:	mov	r1, r0
   15f68:	movw	r2, #33496	; 0x82d8
   15f6c:	movt	r2, #1
   15f70:	mov	r0, #1
   15f74:	ldr	r4, [sp]
   15f78:	ldr	lr, [sp, #4]
   15f7c:	add	sp, sp, #8
   15f80:	b	10e50 <__printf_chk@plt>
   15f84:	strd	r4, [sp, #-16]!
   15f88:	mov	r4, r0
   15f8c:	mov	r5, r2
   15f90:	str	r6, [sp, #8]
   15f94:	mov	r6, r1
   15f98:	str	lr, [sp, #12]
   15f9c:	bl	1785c <__assert_fail@plt+0x6958>
   15fa0:	cmp	r0, #0
   15fa4:	beq	15fb8 <__assert_fail@plt+0x50b4>
   15fa8:	ldrd	r4, [sp]
   15fac:	ldr	r6, [sp, #8]
   15fb0:	add	sp, sp, #12
   15fb4:	pop	{pc}		; (ldr pc, [sp], #4)
   15fb8:	cmp	r4, #0
   15fbc:	beq	15fcc <__assert_fail@plt+0x50c8>
   15fc0:	cmp	r6, #0
   15fc4:	cmpne	r5, #0
   15fc8:	beq	15fa8 <__assert_fail@plt+0x50a4>
   15fcc:	bl	16588 <__assert_fail@plt+0x5684>
   15fd0:	str	r4, [sp, #-8]!
   15fd4:	str	lr, [sp, #4]
   15fd8:	bl	17624 <__assert_fail@plt+0x6720>
   15fdc:	cmp	r0, #0
   15fe0:	beq	15ff0 <__assert_fail@plt+0x50ec>
   15fe4:	ldr	r4, [sp]
   15fe8:	add	sp, sp, #4
   15fec:	pop	{pc}		; (ldr pc, [sp], #4)
   15ff0:	bl	16588 <__assert_fail@plt+0x5684>
   15ff4:	str	r4, [sp, #-8]!
   15ff8:	str	lr, [sp, #4]
   15ffc:	bl	17624 <__assert_fail@plt+0x6720>
   16000:	cmp	r0, #0
   16004:	beq	16014 <__assert_fail@plt+0x5110>
   16008:	ldr	r4, [sp]
   1600c:	add	sp, sp, #4
   16010:	pop	{pc}		; (ldr pc, [sp], #4)
   16014:	bl	16588 <__assert_fail@plt+0x5684>
   16018:	str	r4, [sp, #-8]!
   1601c:	str	lr, [sp, #4]
   16020:	bl	17624 <__assert_fail@plt+0x6720>
   16024:	cmp	r0, #0
   16028:	beq	16038 <__assert_fail@plt+0x5134>
   1602c:	ldr	r4, [sp]
   16030:	add	sp, sp, #4
   16034:	pop	{pc}		; (ldr pc, [sp], #4)
   16038:	bl	16588 <__assert_fail@plt+0x5684>
   1603c:	strd	r4, [sp, #-16]!
   16040:	mov	r5, r0
   16044:	mov	r4, r1
   16048:	str	r6, [sp, #8]
   1604c:	str	lr, [sp, #12]
   16050:	bl	17660 <__assert_fail@plt+0x675c>
   16054:	cmp	r0, #0
   16058:	beq	1606c <__assert_fail@plt+0x5168>
   1605c:	ldrd	r4, [sp]
   16060:	ldr	r6, [sp, #8]
   16064:	add	sp, sp, #12
   16068:	pop	{pc}		; (ldr pc, [sp], #4)
   1606c:	adds	r4, r4, #0
   16070:	movne	r4, #1
   16074:	cmp	r5, #0
   16078:	moveq	r4, #1
   1607c:	cmp	r4, #0
   16080:	beq	1605c <__assert_fail@plt+0x5158>
   16084:	bl	16588 <__assert_fail@plt+0x5684>
   16088:	cmp	r1, #0
   1608c:	orreq	r1, r1, #1
   16090:	str	r4, [sp, #-8]!
   16094:	str	lr, [sp, #4]
   16098:	bl	17660 <__assert_fail@plt+0x675c>
   1609c:	cmp	r0, #0
   160a0:	beq	160b0 <__assert_fail@plt+0x51ac>
   160a4:	ldr	r4, [sp]
   160a8:	add	sp, sp, #4
   160ac:	pop	{pc}		; (ldr pc, [sp], #4)
   160b0:	bl	16588 <__assert_fail@plt+0x5684>
   160b4:	strd	r4, [sp, #-16]!
   160b8:	mov	r4, r0
   160bc:	mov	r5, r2
   160c0:	str	r6, [sp, #8]
   160c4:	mov	r6, r1
   160c8:	str	lr, [sp, #12]
   160cc:	bl	1785c <__assert_fail@plt+0x6958>
   160d0:	cmp	r0, #0
   160d4:	beq	160e8 <__assert_fail@plt+0x51e4>
   160d8:	ldrd	r4, [sp]
   160dc:	ldr	r6, [sp, #8]
   160e0:	add	sp, sp, #12
   160e4:	pop	{pc}		; (ldr pc, [sp], #4)
   160e8:	cmp	r4, #0
   160ec:	beq	160fc <__assert_fail@plt+0x51f8>
   160f0:	cmp	r6, #0
   160f4:	cmpne	r5, #0
   160f8:	beq	160d8 <__assert_fail@plt+0x51d4>
   160fc:	bl	16588 <__assert_fail@plt+0x5684>
   16100:	cmp	r2, #0
   16104:	cmpne	r1, #0
   16108:	str	r4, [sp, #-8]!
   1610c:	moveq	r2, #1
   16110:	str	lr, [sp, #4]
   16114:	moveq	r1, r2
   16118:	bl	1785c <__assert_fail@plt+0x6958>
   1611c:	cmp	r0, #0
   16120:	beq	16130 <__assert_fail@plt+0x522c>
   16124:	ldr	r4, [sp]
   16128:	add	sp, sp, #4
   1612c:	pop	{pc}		; (ldr pc, [sp], #4)
   16130:	bl	16588 <__assert_fail@plt+0x5684>
   16134:	mov	r2, r1
   16138:	mov	r1, r0
   1613c:	str	r4, [sp, #-8]!
   16140:	mov	r0, #0
   16144:	str	lr, [sp, #4]
   16148:	bl	1785c <__assert_fail@plt+0x6958>
   1614c:	cmp	r0, #0
   16150:	beq	16160 <__assert_fail@plt+0x525c>
   16154:	ldr	r4, [sp]
   16158:	add	sp, sp, #4
   1615c:	pop	{pc}		; (ldr pc, [sp], #4)
   16160:	bl	16588 <__assert_fail@plt+0x5684>
   16164:	cmp	r1, #0
   16168:	cmpne	r0, #0
   1616c:	str	r4, [sp, #-8]!
   16170:	moveq	r2, #1
   16174:	movne	r2, r1
   16178:	str	lr, [sp, #4]
   1617c:	movne	r1, r0
   16180:	moveq	r1, r2
   16184:	mov	r0, #0
   16188:	bl	1785c <__assert_fail@plt+0x6958>
   1618c:	cmp	r0, #0
   16190:	beq	161a0 <__assert_fail@plt+0x529c>
   16194:	ldr	r4, [sp]
   16198:	add	sp, sp, #4
   1619c:	pop	{pc}		; (ldr pc, [sp], #4)
   161a0:	bl	16588 <__assert_fail@plt+0x5684>
   161a4:	cmp	r0, #0
   161a8:	strd	r4, [sp, #-16]!
   161ac:	mov	r5, r1
   161b0:	ldr	r4, [r1]
   161b4:	str	r6, [sp, #8]
   161b8:	str	lr, [sp, #12]
   161bc:	beq	16204 <__assert_fail@plt+0x5300>
   161c0:	lsr	r3, r4, #1
   161c4:	add	r3, r3, #1
   161c8:	adds	r4, r4, r3
   161cc:	bcs	16200 <__assert_fail@plt+0x52fc>
   161d0:	mov	r2, #1
   161d4:	mov	r1, r4
   161d8:	bl	1785c <__assert_fail@plt+0x6958>
   161dc:	cmp	r0, #0
   161e0:	beq	161f8 <__assert_fail@plt+0x52f4>
   161e4:	ldr	r6, [sp, #8]
   161e8:	str	r4, [r5]
   161ec:	ldrd	r4, [sp]
   161f0:	add	sp, sp, #12
   161f4:	pop	{pc}		; (ldr pc, [sp], #4)
   161f8:	cmp	r4, #0
   161fc:	beq	161e4 <__assert_fail@plt+0x52e0>
   16200:	bl	16588 <__assert_fail@plt+0x5684>
   16204:	cmp	r4, #0
   16208:	mov	r2, #1
   1620c:	moveq	r4, #64	; 0x40
   16210:	mov	r1, r4
   16214:	bl	1785c <__assert_fail@plt+0x6958>
   16218:	cmp	r0, #0
   1621c:	bne	161e4 <__assert_fail@plt+0x52e0>
   16220:	b	16200 <__assert_fail@plt+0x52fc>
   16224:	cmp	r0, #0
   16228:	strd	r4, [sp, #-16]!
   1622c:	mov	r5, r1
   16230:	ldr	r4, [r1]
   16234:	str	r6, [sp, #8]
   16238:	mov	r6, r2
   1623c:	str	lr, [sp, #12]
   16240:	beq	16288 <__assert_fail@plt+0x5384>
   16244:	lsr	r3, r4, #1
   16248:	add	r3, r3, #1
   1624c:	adds	r4, r4, r3
   16250:	bcs	16284 <__assert_fail@plt+0x5380>
   16254:	mov	r1, r4
   16258:	bl	1785c <__assert_fail@plt+0x6958>
   1625c:	cmp	r0, #0
   16260:	beq	16278 <__assert_fail@plt+0x5374>
   16264:	ldr	r6, [sp, #8]
   16268:	str	r4, [r5]
   1626c:	ldrd	r4, [sp]
   16270:	add	sp, sp, #12
   16274:	pop	{pc}		; (ldr pc, [sp], #4)
   16278:	cmp	r4, #0
   1627c:	cmpne	r6, #0
   16280:	beq	16264 <__assert_fail@plt+0x5360>
   16284:	bl	16588 <__assert_fail@plt+0x5684>
   16288:	cmp	r4, #0
   1628c:	bne	162a0 <__assert_fail@plt+0x539c>
   16290:	mov	r4, #64	; 0x40
   16294:	udiv	r4, r4, r2
   16298:	cmp	r2, #64	; 0x40
   1629c:	addhi	r4, r4, #1
   162a0:	mov	r2, r6
   162a4:	mov	r1, r4
   162a8:	mov	r0, #0
   162ac:	bl	1785c <__assert_fail@plt+0x6958>
   162b0:	cmp	r0, #0
   162b4:	bne	16264 <__assert_fail@plt+0x5360>
   162b8:	b	16284 <__assert_fail@plt+0x5380>
   162bc:	ldr	ip, [r1]
   162c0:	strd	r4, [sp, #-24]!	; 0xffffffe8
   162c4:	strd	r6, [sp, #8]
   162c8:	mov	r7, r1
   162cc:	mov	r6, r0
   162d0:	str	r8, [sp, #16]
   162d4:	mvn	r8, r3
   162d8:	lsr	r8, r8, #31
   162dc:	str	lr, [sp, #20]
   162e0:	asr	r1, ip, #1
   162e4:	ldr	lr, [sp, #24]
   162e8:	adds	r4, ip, r1
   162ec:	mvnvs	r4, #-2147483648	; 0x80000000
   162f0:	cmp	r3, r4
   162f4:	movge	r1, #0
   162f8:	andlt	r1, r8, #1
   162fc:	cmp	r1, #0
   16300:	movne	r4, r3
   16304:	smull	r0, r1, r4, lr
   16308:	cmp	r1, r0, asr #31
   1630c:	bne	163bc <__assert_fail@plt+0x54b8>
   16310:	cmp	r0, #63	; 0x3f
   16314:	mov	r5, r0
   16318:	ble	16388 <__assert_fail@plt+0x5484>
   1631c:	cmp	r6, #0
   16320:	sub	r1, r4, ip
   16324:	streq	r6, [r7]
   16328:	cmp	r1, r2
   1632c:	bge	1635c <__assert_fail@plt+0x5458>
   16330:	adds	r4, ip, r2
   16334:	bvs	163b8 <__assert_fail@plt+0x54b4>
   16338:	cmp	r4, r3
   1633c:	movle	r3, #0
   16340:	andgt	r3, r8, #1
   16344:	cmp	r3, #0
   16348:	bne	163b8 <__assert_fail@plt+0x54b4>
   1634c:	smull	r0, r1, r4, lr
   16350:	cmp	r1, r0, asr #31
   16354:	mov	r5, r0
   16358:	bne	163b8 <__assert_fail@plt+0x54b4>
   1635c:	mov	r1, r5
   16360:	mov	r0, r6
   16364:	bl	17660 <__assert_fail@plt+0x675c>
   16368:	cmp	r0, #0
   1636c:	beq	1639c <__assert_fail@plt+0x5498>
   16370:	ldr	r8, [sp, #16]
   16374:	str	r4, [r7]
   16378:	ldrd	r4, [sp]
   1637c:	ldrd	r6, [sp, #8]
   16380:	add	sp, sp, #20
   16384:	pop	{pc}		; (ldr pc, [sp], #4)
   16388:	mov	r0, #64	; 0x40
   1638c:	sdiv	r4, r0, lr
   16390:	mls	r5, lr, r4, r0
   16394:	sub	r5, r0, r5
   16398:	b	1631c <__assert_fail@plt+0x5418>
   1639c:	adds	r5, r5, #0
   163a0:	movne	r5, #1
   163a4:	cmp	r6, #0
   163a8:	movne	r6, r5
   163ac:	moveq	r6, #1
   163b0:	cmp	r6, #0
   163b4:	beq	16370 <__assert_fail@plt+0x546c>
   163b8:	bl	16588 <__assert_fail@plt+0x5684>
   163bc:	mvn	r0, #-2147483648	; 0x80000000
   163c0:	b	1638c <__assert_fail@plt+0x5488>
   163c4:	mov	r1, #1
   163c8:	str	r4, [sp, #-8]!
   163cc:	str	lr, [sp, #4]
   163d0:	bl	175b0 <__assert_fail@plt+0x66ac>
   163d4:	cmp	r0, #0
   163d8:	beq	163e8 <__assert_fail@plt+0x54e4>
   163dc:	ldr	r4, [sp]
   163e0:	add	sp, sp, #4
   163e4:	pop	{pc}		; (ldr pc, [sp], #4)
   163e8:	bl	16588 <__assert_fail@plt+0x5684>
   163ec:	mov	r1, #1
   163f0:	str	r4, [sp, #-8]!
   163f4:	str	lr, [sp, #4]
   163f8:	bl	175b0 <__assert_fail@plt+0x66ac>
   163fc:	cmp	r0, #0
   16400:	beq	16410 <__assert_fail@plt+0x550c>
   16404:	ldr	r4, [sp]
   16408:	add	sp, sp, #4
   1640c:	pop	{pc}		; (ldr pc, [sp], #4)
   16410:	bl	16588 <__assert_fail@plt+0x5684>
   16414:	str	r4, [sp, #-8]!
   16418:	str	lr, [sp, #4]
   1641c:	bl	175b0 <__assert_fail@plt+0x66ac>
   16420:	cmp	r0, #0
   16424:	beq	16434 <__assert_fail@plt+0x5530>
   16428:	ldr	r4, [sp]
   1642c:	add	sp, sp, #4
   16430:	pop	{pc}		; (ldr pc, [sp], #4)
   16434:	bl	16588 <__assert_fail@plt+0x5684>
   16438:	str	r4, [sp, #-8]!
   1643c:	str	lr, [sp, #4]
   16440:	bl	175b0 <__assert_fail@plt+0x66ac>
   16444:	cmp	r0, #0
   16448:	beq	16458 <__assert_fail@plt+0x5554>
   1644c:	ldr	r4, [sp]
   16450:	add	sp, sp, #4
   16454:	pop	{pc}		; (ldr pc, [sp], #4)
   16458:	bl	16588 <__assert_fail@plt+0x5684>
   1645c:	strd	r4, [sp, #-16]!
   16460:	mov	r4, r1
   16464:	str	r6, [sp, #8]
   16468:	mov	r6, r0
   1646c:	mov	r0, r1
   16470:	str	lr, [sp, #12]
   16474:	bl	17624 <__assert_fail@plt+0x6720>
   16478:	subs	r5, r0, #0
   1647c:	beq	164a0 <__assert_fail@plt+0x559c>
   16480:	mov	r2, r4
   16484:	mov	r1, r6
   16488:	bl	10d00 <memcpy@plt>
   1648c:	mov	r0, r5
   16490:	ldrd	r4, [sp]
   16494:	ldr	r6, [sp, #8]
   16498:	add	sp, sp, #12
   1649c:	pop	{pc}		; (ldr pc, [sp], #4)
   164a0:	bl	16588 <__assert_fail@plt+0x5684>
   164a4:	strd	r4, [sp, #-16]!
   164a8:	mov	r4, r1
   164ac:	str	r6, [sp, #8]
   164b0:	mov	r6, r0
   164b4:	mov	r0, r1
   164b8:	str	lr, [sp, #12]
   164bc:	bl	17624 <__assert_fail@plt+0x6720>
   164c0:	subs	r5, r0, #0
   164c4:	beq	164e8 <__assert_fail@plt+0x55e4>
   164c8:	mov	r2, r4
   164cc:	mov	r1, r6
   164d0:	bl	10d00 <memcpy@plt>
   164d4:	mov	r0, r5
   164d8:	ldrd	r4, [sp]
   164dc:	ldr	r6, [sp, #8]
   164e0:	add	sp, sp, #12
   164e4:	pop	{pc}		; (ldr pc, [sp], #4)
   164e8:	bl	16588 <__assert_fail@plt+0x5684>
   164ec:	strd	r4, [sp, #-16]!
   164f0:	mov	r4, r1
   164f4:	str	r6, [sp, #8]
   164f8:	mov	r6, r0
   164fc:	add	r0, r1, #1
   16500:	str	lr, [sp, #12]
   16504:	bl	17624 <__assert_fail@plt+0x6720>
   16508:	subs	r5, r0, #0
   1650c:	beq	16538 <__assert_fail@plt+0x5634>
   16510:	mov	r3, #0
   16514:	mov	r1, r6
   16518:	mov	r2, r4
   1651c:	strb	r3, [r5, r4]
   16520:	bl	10d00 <memcpy@plt>
   16524:	mov	r0, r5
   16528:	ldrd	r4, [sp]
   1652c:	ldr	r6, [sp, #8]
   16530:	add	sp, sp, #12
   16534:	pop	{pc}		; (ldr pc, [sp], #4)
   16538:	bl	16588 <__assert_fail@plt+0x5684>
   1653c:	strd	r4, [sp, #-16]!
   16540:	str	r6, [sp, #8]
   16544:	mov	r6, r0
   16548:	str	lr, [sp, #12]
   1654c:	bl	10e14 <strlen@plt>
   16550:	add	r4, r0, #1
   16554:	mov	r0, r4
   16558:	bl	17624 <__assert_fail@plt+0x6720>
   1655c:	subs	r5, r0, #0
   16560:	beq	16584 <__assert_fail@plt+0x5680>
   16564:	mov	r2, r4
   16568:	mov	r1, r6
   1656c:	bl	10d00 <memcpy@plt>
   16570:	mov	r0, r5
   16574:	ldrd	r4, [sp]
   16578:	ldr	r6, [sp, #8]
   1657c:	add	sp, sp, #12
   16580:	pop	{pc}		; (ldr pc, [sp], #4)
   16584:	bl	16588 <__assert_fail@plt+0x5684>
   16588:	movw	r3, #37100	; 0x90ec
   1658c:	movt	r3, #2
   16590:	str	r4, [sp, #-8]!
   16594:	ldr	r4, [r3]
   16598:	mov	r2, #5
   1659c:	movw	r1, #33576	; 0x8328
   165a0:	movt	r1, #1
   165a4:	mov	r0, #0
   165a8:	str	lr, [sp, #4]
   165ac:	bl	10d48 <dcgettext@plt>
   165b0:	mov	r3, r0
   165b4:	movw	r2, #32496	; 0x7ef0
   165b8:	movt	r2, #1
   165bc:	mov	r1, #0
   165c0:	mov	r0, r4
   165c4:	bl	10db4 <error@plt>
   165c8:	bl	10ef8 <abort@plt>
   165cc:	strd	r4, [sp, #-24]!	; 0xffffffe8
   165d0:	strd	r6, [sp, #8]
   165d4:	mov	r6, r2
   165d8:	mov	r7, r3
   165dc:	str	r8, [sp, #16]
   165e0:	mov	r2, r1
   165e4:	mov	r1, #0
   165e8:	str	lr, [sp, #20]
   165ec:	sub	sp, sp, #16
   165f0:	mov	r8, r0
   165f4:	ldr	ip, [sp, #48]	; 0x30
   165f8:	add	r3, sp, #8
   165fc:	str	ip, [sp]
   16600:	bl	16854 <__assert_fail@plt+0x5950>
   16604:	subs	r4, r0, #0
   16608:	bne	16658 <__assert_fail@plt+0x5754>
   1660c:	ldrd	r4, [sp, #8]
   16610:	ldrd	r0, [sp, #40]	; 0x28
   16614:	cmp	r5, r7
   16618:	cmpeq	r4, r6
   1661c:	movcc	r3, #1
   16620:	movcs	r3, #0
   16624:	cmp	r5, r1
   16628:	cmpeq	r4, r0
   1662c:	orrhi	r3, r3, #1
   16630:	cmp	r3, #0
   16634:	bne	166d8 <__assert_fail@plt+0x57d4>
   16638:	mov	r0, r4
   1663c:	mov	r1, r5
   16640:	add	sp, sp, #16
   16644:	ldrd	r4, [sp]
   16648:	ldrd	r6, [sp, #8]
   1664c:	ldr	r8, [sp, #16]
   16650:	add	sp, sp, #20
   16654:	pop	{pc}		; (ldr pc, [sp], #4)
   16658:	bl	10e2c <__errno_location@plt>
   1665c:	cmp	r4, #1
   16660:	moveq	r3, #75	; 0x4b
   16664:	moveq	r4, r3
   16668:	streq	r3, [r0]
   1666c:	beq	166c0 <__assert_fail@plt+0x57bc>
   16670:	cmp	r4, #3
   16674:	beq	166b4 <__assert_fail@plt+0x57b0>
   16678:	ldr	r3, [sp, #56]	; 0x38
   1667c:	ldr	r4, [r0]
   16680:	cmp	r3, #0
   16684:	beq	166cc <__assert_fail@plt+0x57c8>
   16688:	cmp	r4, #22
   1668c:	moveq	r4, #0
   16690:	mov	r0, r8
   16694:	bl	156fc <__assert_fail@plt+0x47f8>
   16698:	movw	r2, #32492	; 0x7eec
   1669c:	movt	r2, #1
   166a0:	str	r0, [sp]
   166a4:	mov	r1, r4
   166a8:	ldr	r3, [sp, #52]	; 0x34
   166ac:	ldr	r0, [sp, #56]	; 0x38
   166b0:	bl	10db4 <error@plt>
   166b4:	mov	r3, #0
   166b8:	mov	r4, r3
   166bc:	str	r3, [r0]
   166c0:	ldr	r3, [sp, #56]	; 0x38
   166c4:	cmp	r3, #0
   166c8:	bne	16690 <__assert_fail@plt+0x578c>
   166cc:	mov	r3, #1
   166d0:	str	r3, [sp, #56]	; 0x38
   166d4:	b	16688 <__assert_fail@plt+0x5784>
   166d8:	bl	10e2c <__errno_location@plt>
   166dc:	mov	r3, #0
   166e0:	mvn	r2, #-1073741824	; 0xc0000000
   166e4:	cmp	r5, r3
   166e8:	cmpeq	r4, r2
   166ec:	movhi	r3, #75	; 0x4b
   166f0:	movls	r3, #34	; 0x22
   166f4:	mov	r4, r3
   166f8:	str	r3, [r0]
   166fc:	ldr	r3, [sp, #56]	; 0x38
   16700:	cmp	r3, #0
   16704:	moveq	r3, #1
   16708:	str	r3, [sp, #56]	; 0x38
   1670c:	b	16690 <__assert_fail@plt+0x578c>
   16710:	strd	r4, [sp, #-24]!	; 0xffffffe8
   16714:	mov	r1, #0
   16718:	strd	r6, [sp, #8]
   1671c:	mov	r6, r2
   16720:	mov	r7, r3
   16724:	str	r8, [sp, #16]
   16728:	mov	r2, #10
   1672c:	mov	r8, r0
   16730:	str	lr, [sp, #20]
   16734:	sub	sp, sp, #16
   16738:	ldr	ip, [sp, #48]	; 0x30
   1673c:	add	r3, sp, #8
   16740:	str	ip, [sp]
   16744:	bl	16854 <__assert_fail@plt+0x5950>
   16748:	subs	r4, r0, #0
   1674c:	bne	1679c <__assert_fail@plt+0x5898>
   16750:	ldrd	r4, [sp, #8]
   16754:	ldrd	r0, [sp, #40]	; 0x28
   16758:	cmp	r7, r5
   1675c:	cmpeq	r6, r4
   16760:	movhi	r3, #1
   16764:	movls	r3, #0
   16768:	cmp	r1, r5
   1676c:	cmpeq	r0, r4
   16770:	orrcc	r3, r3, #1
   16774:	cmp	r3, #0
   16778:	bne	1681c <__assert_fail@plt+0x5918>
   1677c:	mov	r0, r4
   16780:	mov	r1, r5
   16784:	add	sp, sp, #16
   16788:	ldrd	r4, [sp]
   1678c:	ldrd	r6, [sp, #8]
   16790:	ldr	r8, [sp, #16]
   16794:	add	sp, sp, #20
   16798:	pop	{pc}		; (ldr pc, [sp], #4)
   1679c:	bl	10e2c <__errno_location@plt>
   167a0:	cmp	r4, #1
   167a4:	moveq	r3, #75	; 0x4b
   167a8:	moveq	r4, r3
   167ac:	streq	r3, [r0]
   167b0:	beq	1680c <__assert_fail@plt+0x5908>
   167b4:	cmp	r4, #3
   167b8:	beq	16800 <__assert_fail@plt+0x58fc>
   167bc:	ldr	r3, [sp, #56]	; 0x38
   167c0:	ldr	r4, [r0]
   167c4:	cmp	r3, #0
   167c8:	bne	167d4 <__assert_fail@plt+0x58d0>
   167cc:	mov	r3, #1
   167d0:	str	r3, [sp, #56]	; 0x38
   167d4:	cmp	r4, #22
   167d8:	moveq	r4, #0
   167dc:	mov	r0, r8
   167e0:	bl	156fc <__assert_fail@plt+0x47f8>
   167e4:	movw	r2, #32492	; 0x7eec
   167e8:	movt	r2, #1
   167ec:	str	r0, [sp]
   167f0:	mov	r1, r4
   167f4:	ldr	r3, [sp, #52]	; 0x34
   167f8:	ldr	r0, [sp, #56]	; 0x38
   167fc:	bl	10db4 <error@plt>
   16800:	mov	r3, #0
   16804:	mov	r4, r3
   16808:	str	r3, [r0]
   1680c:	ldr	r3, [sp, #56]	; 0x38
   16810:	cmp	r3, #0
   16814:	bne	167dc <__assert_fail@plt+0x58d8>
   16818:	b	167cc <__assert_fail@plt+0x58c8>
   1681c:	bl	10e2c <__errno_location@plt>
   16820:	mov	r3, #0
   16824:	mvn	r2, #-1073741824	; 0xc0000000
   16828:	cmp	r5, r3
   1682c:	cmpeq	r4, r2
   16830:	movhi	r3, #75	; 0x4b
   16834:	movls	r3, #34	; 0x22
   16838:	mov	r4, r3
   1683c:	str	r3, [r0]
   16840:	ldr	r3, [sp, #56]	; 0x38
   16844:	cmp	r3, #0
   16848:	moveq	r3, #1
   1684c:	str	r3, [sp, #56]	; 0x38
   16850:	b	167dc <__assert_fail@plt+0x58d8>
   16854:	cmp	r2, #36	; 0x24
   16858:	strd	r4, [sp, #-36]!	; 0xffffffdc
   1685c:	strd	r6, [sp, #8]
   16860:	strd	r8, [sp, #16]
   16864:	strd	sl, [sp, #24]
   16868:	str	lr, [sp, #32]
   1686c:	sub	sp, sp, #36	; 0x24
   16870:	bhi	174e8 <__assert_fail@plt+0x65e4>
   16874:	cmp	r1, #0
   16878:	mov	r6, r2
   1687c:	mov	r5, r1
   16880:	mov	sl, r0
   16884:	addeq	r5, sp, #28
   16888:	mov	r9, r3
   1688c:	bl	10e2c <__errno_location@plt>
   16890:	mov	r3, #0
   16894:	mov	fp, r0
   16898:	str	r3, [r0]
   1689c:	ldrb	r4, [sl]
   168a0:	bl	10dfc <__ctype_b_loc@plt>
   168a4:	ldr	r2, [r0]
   168a8:	lsl	r3, r4, #1
   168ac:	ldrh	r3, [r2, r3]
   168b0:	tst	r3, #8192	; 0x2000
   168b4:	beq	168d0 <__assert_fail@plt+0x59cc>
   168b8:	mov	r3, sl
   168bc:	ldrb	r4, [r3, #1]!
   168c0:	lsl	r1, r4, #1
   168c4:	ldrh	r1, [r2, r1]
   168c8:	tst	r1, #8192	; 0x2000
   168cc:	bne	168bc <__assert_fail@plt+0x59b8>
   168d0:	cmp	r4, #45	; 0x2d
   168d4:	beq	16970 <__assert_fail@plt+0x5a6c>
   168d8:	mov	r2, r6
   168dc:	mov	r3, #0
   168e0:	mov	r1, r5
   168e4:	mov	r0, sl
   168e8:	bl	10d0c <__strtoull_internal@plt>
   168ec:	ldr	r8, [r5]
   168f0:	mov	r6, r0
   168f4:	mov	r7, r1
   168f8:	cmp	r8, sl
   168fc:	beq	16958 <__assert_fail@plt+0x5a54>
   16900:	ldr	r4, [fp]
   16904:	cmp	r4, #0
   16908:	bne	16948 <__assert_fail@plt+0x5a44>
   1690c:	ldr	r3, [sp, #72]	; 0x48
   16910:	cmp	r3, #0
   16914:	beq	16924 <__assert_fail@plt+0x5a20>
   16918:	ldrb	sl, [r8]
   1691c:	cmp	sl, #0
   16920:	bne	16cdc <__assert_fail@plt+0x5dd8>
   16924:	strd	r6, [r9]
   16928:	mov	r0, r4
   1692c:	add	sp, sp, #36	; 0x24
   16930:	ldrd	r4, [sp]
   16934:	ldrd	r6, [sp, #8]
   16938:	ldrd	r8, [sp, #16]
   1693c:	ldrd	sl, [sp, #24]
   16940:	add	sp, sp, #32
   16944:	pop	{pc}		; (ldr pc, [sp], #4)
   16948:	cmp	r4, #34	; 0x22
   1694c:	bne	16970 <__assert_fail@plt+0x5a6c>
   16950:	mov	r4, #1
   16954:	b	1690c <__assert_fail@plt+0x5a08>
   16958:	ldr	r3, [sp, #72]	; 0x48
   1695c:	cmp	r3, #0
   16960:	beq	16970 <__assert_fail@plt+0x5a6c>
   16964:	ldrb	sl, [sl]
   16968:	cmp	sl, #0
   1696c:	bne	16978 <__assert_fail@plt+0x5a74>
   16970:	mov	r4, #4
   16974:	b	16928 <__assert_fail@plt+0x5a24>
   16978:	mov	r1, sl
   1697c:	mov	r0, r3
   16980:	bl	10e20 <strchr@plt>
   16984:	cmp	r0, #0
   16988:	movne	r4, #0
   1698c:	movne	r6, #1
   16990:	movne	r7, r4
   16994:	beq	16970 <__assert_fail@plt+0x5a6c>
   16998:	sub	r3, sl, #69	; 0x45
   1699c:	cmp	r3, #47	; 0x2f
   169a0:	ldrls	pc, [pc, r3, lsl #2]
   169a4:	b	16aac <__assert_fail@plt+0x5ba8>
   169a8:	andeq	r6, r1, r8, ror #20
   169ac:	andeq	r6, r1, ip, lsr #21
   169b0:	andeq	r6, r1, r8, ror #20
   169b4:	andeq	r6, r1, ip, lsr #21
   169b8:	andeq	r6, r1, ip, lsr #21
   169bc:	andeq	r6, r1, ip, lsr #21
   169c0:	andeq	r6, r1, r8, ror #20
   169c4:	andeq	r6, r1, ip, lsr #21
   169c8:	andeq	r6, r1, r8, ror #20
   169cc:	andeq	r6, r1, ip, lsr #21
   169d0:	andeq	r6, r1, ip, lsr #21
   169d4:	andeq	r6, r1, r8, ror #20
   169d8:	andeq	r6, r1, ip, lsr #21
   169dc:	andeq	r6, r1, ip, lsr #21
   169e0:	andeq	r6, r1, ip, lsr #21
   169e4:	andeq	r6, r1, r8, ror #20
   169e8:	andeq	r6, r1, ip, lsr #21
   169ec:	andeq	r6, r1, ip, lsr #21
   169f0:	andeq	r6, r1, ip, lsr #21
   169f4:	andeq	r6, r1, ip, lsr #21
   169f8:	andeq	r6, r1, r8, ror #20
   169fc:	andeq	r6, r1, r8, ror #20
   16a00:	andeq	r6, r1, ip, lsr #21
   16a04:	andeq	r6, r1, ip, lsr #21
   16a08:	andeq	r6, r1, ip, lsr #21
   16a0c:	andeq	r6, r1, ip, lsr #21
   16a10:	andeq	r6, r1, ip, lsr #21
   16a14:	andeq	r6, r1, ip, lsr #21
   16a18:	andeq	r6, r1, ip, lsr #21
   16a1c:	andeq	r6, r1, ip, lsr #21
   16a20:	andeq	r6, r1, ip, lsr #21
   16a24:	andeq	r6, r1, ip, lsr #21
   16a28:	andeq	r6, r1, ip, lsr #21
   16a2c:	andeq	r6, r1, ip, lsr #21
   16a30:	andeq	r6, r1, r8, ror #20
   16a34:	andeq	r6, r1, ip, lsr #21
   16a38:	andeq	r6, r1, ip, lsr #21
   16a3c:	andeq	r6, r1, ip, lsr #21
   16a40:	andeq	r6, r1, r8, ror #20
   16a44:	andeq	r6, r1, ip, lsr #21
   16a48:	andeq	r6, r1, r8, ror #20
   16a4c:	andeq	r6, r1, ip, lsr #21
   16a50:	andeq	r6, r1, ip, lsr #21
   16a54:	andeq	r6, r1, ip, lsr #21
   16a58:	andeq	r6, r1, ip, lsr #21
   16a5c:	andeq	r6, r1, ip, lsr #21
   16a60:	andeq	r6, r1, ip, lsr #21
   16a64:	andeq	r6, r1, r8, ror #20
   16a68:	mov	r1, #48	; 0x30
   16a6c:	ldr	r0, [sp, #72]	; 0x48
   16a70:	bl	10e20 <strchr@plt>
   16a74:	cmp	r0, #0
   16a78:	beq	16aac <__assert_fail@plt+0x5ba8>
   16a7c:	ldrb	r3, [r8, #1]
   16a80:	cmp	r3, #68	; 0x44
   16a84:	beq	1703c <__assert_fail@plt+0x6138>
   16a88:	cmp	r3, #105	; 0x69
   16a8c:	beq	16cf4 <__assert_fail@plt+0x5df0>
   16a90:	cmp	r3, #66	; 0x42
   16a94:	moveq	r3, #2
   16a98:	movne	r3, #1
   16a9c:	moveq	ip, #1000	; 0x3e8
   16aa0:	movne	ip, #1024	; 0x400
   16aa4:	str	r3, [sp, #12]
   16aa8:	b	16ab8 <__assert_fail@plt+0x5bb4>
   16aac:	mov	r3, #1
   16ab0:	mov	ip, #1024	; 0x400
   16ab4:	str	r3, [sp, #12]
   16ab8:	sub	sl, sl, #66	; 0x42
   16abc:	cmp	sl, #53	; 0x35
   16ac0:	ldrls	pc, [pc, sl, lsl #2]
   16ac4:	b	16ca0 <__assert_fail@plt+0x5d9c>
   16ac8:	andeq	r6, r1, r8, lsl #31
   16acc:	andeq	r6, r1, r0, lsr #25
   16ad0:	andeq	r6, r1, r0, lsr #25
   16ad4:	andeq	r6, r1, r8, lsr #30
   16ad8:	andeq	r6, r1, r0, lsr #25
   16adc:	andeq	r6, r1, r4, lsr #31
   16ae0:	andeq	r6, r1, r0, lsr #25
   16ae4:	andeq	r6, r1, r0, lsr #25
   16ae8:	andeq	r6, r1, r0, lsr #25
   16aec:	andeq	r6, r1, r8, lsr #25
   16af0:	andeq	r6, r1, r0, lsr #25
   16af4:	ldrdeq	r6, [r1], -r0
   16af8:	andeq	r6, r1, r0, lsr #25
   16afc:	andeq	r6, r1, r0, lsr #25
   16b00:	andeq	r6, r1, r4, ror lr
   16b04:	andeq	r6, r1, r0, lsr #25
   16b08:	andeq	r6, r1, r0, lsr #25
   16b0c:	andeq	r6, r1, r0, lsr #25
   16b10:	andeq	r6, r1, r4, lsl lr
   16b14:	andeq	r6, r1, r0, lsr #25
   16b18:	andeq	r6, r1, r0, lsr #25
   16b1c:	andeq	r6, r1, r0, lsr #25
   16b20:	andeq	r6, r1, r0, lsr #25
   16b24:	andeq	r6, r1, r8, asr #26
   16b28:	andeq	r6, r1, r0, lsr #23
   16b2c:	andeq	r6, r1, r0, lsr #25
   16b30:	andeq	r6, r1, r0, lsr #25
   16b34:	andeq	r6, r1, r0, lsr #25
   16b38:	andeq	r6, r1, r0, lsr #25
   16b3c:	andeq	r6, r1, r0, lsr #25
   16b40:	andeq	r6, r1, r0, lsr #25
   16b44:	andeq	r6, r1, r0, lsr #25
   16b48:	andeq	r6, r1, r8, lsr #26
   16b4c:	andeq	r6, r1, r8, lsl #25
   16b50:	andeq	r6, r1, r0, lsr #25
   16b54:	andeq	r6, r1, r0, lsr #25
   16b58:	andeq	r6, r1, r0, lsr #25
   16b5c:	andeq	r6, r1, r4, lsr #31
   16b60:	andeq	r6, r1, r0, lsr #25
   16b64:	andeq	r6, r1, r0, lsr #25
   16b68:	andeq	r6, r1, r0, lsr #25
   16b6c:	andeq	r6, r1, r8, lsr #25
   16b70:	andeq	r6, r1, r0, lsr #25
   16b74:	ldrdeq	r6, [r1], -r0
   16b78:	andeq	r6, r1, r0, lsr #25
   16b7c:	andeq	r6, r1, r0, lsr #25
   16b80:	andeq	r6, r1, r0, lsr #25
   16b84:	andeq	r6, r1, r0, lsr #25
   16b88:	andeq	r6, r1, r0, lsr #25
   16b8c:	andeq	r6, r1, r0, lsr #25
   16b90:	andeq	r6, r1, r4, lsl lr
   16b94:	andeq	r6, r1, r0, lsr #25
   16b98:	andeq	r6, r1, r0, lsr #25
   16b9c:	andeq	r6, r1, r0, lsl sp
   16ba0:	asr	r3, ip, #31
   16ba4:	mov	r2, ip
   16ba8:	cmp	r7, #0
   16bac:	mov	r1, #0
   16bb0:	strd	r2, [sp]
   16bb4:	bne	170f4 <__assert_fail@plt+0x61f0>
   16bb8:	umull	r6, r7, r6, ip
   16bbc:	mov	r2, r6
   16bc0:	mov	r3, r7
   16bc4:	cmp	r1, #0
   16bc8:	bne	17008 <__assert_fail@plt+0x6104>
   16bcc:	cmp	r3, #0
   16bd0:	mov	lr, r1
   16bd4:	bne	17220 <__assert_fail@plt+0x631c>
   16bd8:	umull	r2, r3, r2, ip
   16bdc:	mov	r0, r2
   16be0:	mov	r1, r3
   16be4:	cmp	lr, #0
   16be8:	bne	17008 <__assert_fail@plt+0x6104>
   16bec:	cmp	r1, #0
   16bf0:	bne	171fc <__assert_fail@plt+0x62f8>
   16bf4:	umull	r0, r1, r0, ip
   16bf8:	mov	r2, r0
   16bfc:	mov	r3, r1
   16c00:	cmp	lr, #0
   16c04:	bne	17008 <__assert_fail@plt+0x6104>
   16c08:	cmp	r3, #0
   16c0c:	bne	16eac <__assert_fail@plt+0x5fa8>
   16c10:	umull	r2, r3, r2, ip
   16c14:	mov	r0, r2
   16c18:	mov	r1, r3
   16c1c:	cmp	lr, #0
   16c20:	bne	17008 <__assert_fail@plt+0x6104>
   16c24:	cmp	r1, #0
   16c28:	bne	170ac <__assert_fail@plt+0x61a8>
   16c2c:	umull	r0, r1, r0, ip
   16c30:	mov	r2, r0
   16c34:	mov	r3, r1
   16c38:	cmp	lr, #0
   16c3c:	bne	17008 <__assert_fail@plt+0x6104>
   16c40:	cmp	r3, #0
   16c44:	mov	r7, lr
   16c48:	bne	17088 <__assert_fail@plt+0x6184>
   16c4c:	umull	r2, r3, r2, ip
   16c50:	mov	r6, r2
   16c54:	mov	lr, r3
   16c58:	cmp	r7, #0
   16c5c:	bne	17008 <__assert_fail@plt+0x6104>
   16c60:	cmp	lr, #0
   16c64:	bne	1704c <__assert_fail@plt+0x6148>
   16c68:	umull	r2, r3, r6, ip
   16c6c:	mov	r0, r2
   16c70:	mov	r2, r3
   16c74:	subs	r3, r7, #0
   16c78:	bne	17008 <__assert_fail@plt+0x6104>
   16c7c:	mov	r6, r0
   16c80:	mov	r7, r2
   16c84:	orr	r4, r4, r3
   16c88:	ldr	r2, [sp, #12]
   16c8c:	add	r3, r8, r2
   16c90:	str	r3, [r5]
   16c94:	ldrb	r3, [r8, r2]
   16c98:	cmp	r3, #0
   16c9c:	beq	16924 <__assert_fail@plt+0x5a20>
   16ca0:	orr	r4, r4, #2
   16ca4:	b	16924 <__assert_fail@plt+0x5a20>
   16ca8:	cmp	r7, #0
   16cac:	asr	r1, ip, #31
   16cb0:	mov	lr, #0
   16cb4:	bne	17018 <__assert_fail@plt+0x6114>
   16cb8:	umull	r2, r3, r6, ip
   16cbc:	mov	r6, r2
   16cc0:	mov	r7, r3
   16cc4:	cmp	lr, #0
   16cc8:	beq	16c88 <__assert_fail@plt+0x5d84>
   16ccc:	mvn	r6, #0
   16cd0:	mov	r4, #1
   16cd4:	mov	r7, r6
   16cd8:	b	16c88 <__assert_fail@plt+0x5d84>
   16cdc:	mov	r0, r3
   16ce0:	mov	r1, sl
   16ce4:	bl	10e20 <strchr@plt>
   16ce8:	cmp	r0, #0
   16cec:	bne	16998 <__assert_fail@plt+0x5a94>
   16cf0:	b	16ca0 <__assert_fail@plt+0x5d9c>
   16cf4:	ldrb	r3, [r8, #2]
   16cf8:	mov	ip, #1024	; 0x400
   16cfc:	cmp	r3, #66	; 0x42
   16d00:	movne	r3, #1
   16d04:	moveq	r3, #3
   16d08:	str	r3, [sp, #12]
   16d0c:	b	16ab8 <__assert_fail@plt+0x5bb4>
   16d10:	lsr	r3, r7, #31
   16d14:	adds	r6, r6, r6
   16d18:	adc	r7, r7, r7
   16d1c:	cmp	r3, #0
   16d20:	beq	16c88 <__assert_fail@plt+0x5d84>
   16d24:	b	16ccc <__assert_fail@plt+0x5dc8>
   16d28:	lsr	r3, r7, #23
   16d2c:	lsl	r7, r7, #9
   16d30:	cmp	r3, #0
   16d34:	lsl	r3, r6, #9
   16d38:	orr	r7, r7, r6, lsr #23
   16d3c:	bne	16ccc <__assert_fail@plt+0x5dc8>
   16d40:	mov	r6, r3
   16d44:	b	16c88 <__assert_fail@plt+0x5d84>
   16d48:	asr	r3, ip, #31
   16d4c:	mov	r2, ip
   16d50:	cmp	r7, #0
   16d54:	mov	r1, #0
   16d58:	strd	r2, [sp]
   16d5c:	bne	17168 <__assert_fail@plt+0x6264>
   16d60:	umull	r6, r7, r6, ip
   16d64:	mov	r0, r6
   16d68:	mov	fp, r7
   16d6c:	cmp	r1, #0
   16d70:	bne	17008 <__assert_fail@plt+0x6104>
   16d74:	cmp	fp, #0
   16d78:	mov	lr, r1
   16d7c:	bne	172f8 <__assert_fail@plt+0x63f4>
   16d80:	umull	r0, r1, r0, ip
   16d84:	mov	r2, r0
   16d88:	mov	r3, r1
   16d8c:	cmp	lr, #0
   16d90:	bne	17008 <__assert_fail@plt+0x6104>
   16d94:	cmp	r3, #0
   16d98:	bne	17320 <__assert_fail@plt+0x641c>
   16d9c:	umull	r2, r3, r2, ip
   16da0:	mov	r0, r2
   16da4:	mov	r1, r3
   16da8:	cmp	lr, #0
   16dac:	bne	17008 <__assert_fail@plt+0x6104>
   16db0:	cmp	r1, #0
   16db4:	bne	172a0 <__assert_fail@plt+0x639c>
   16db8:	umull	r0, r1, r0, ip
   16dbc:	mov	r2, r0
   16dc0:	mov	r3, r1
   16dc4:	cmp	lr, #0
   16dc8:	bne	17008 <__assert_fail@plt+0x6104>
   16dcc:	cmp	r3, #0
   16dd0:	bne	170d0 <__assert_fail@plt+0x61cc>
   16dd4:	umull	r2, r3, r2, ip
   16dd8:	mov	r0, r2
   16ddc:	mov	r1, r3
   16de0:	cmp	lr, #0
   16de4:	bne	17008 <__assert_fail@plt+0x6104>
   16de8:	cmp	r1, #0
   16dec:	beq	16c2c <__assert_fail@plt+0x5d28>
   16df0:	umull	r6, r7, r0, ip
   16df4:	mov	fp, lr
   16df8:	mov	sl, r7
   16dfc:	umlal	sl, fp, r1, ip
   16e00:	cmp	fp, #0
   16e04:	bne	17508 <__assert_fail@plt+0x6604>
   16e08:	mov	r2, r6
   16e0c:	mov	r3, sl
   16e10:	b	16c38 <__assert_fail@plt+0x5d34>
   16e14:	asr	r3, ip, #31
   16e18:	mov	r2, ip
   16e1c:	cmp	r7, #0
   16e20:	mov	r1, #0
   16e24:	strd	r2, [sp]
   16e28:	bne	1718c <__assert_fail@plt+0x6288>
   16e2c:	umull	r6, r7, r6, ip
   16e30:	mov	r0, r6
   16e34:	mov	fp, r7
   16e38:	cmp	r1, #0
   16e3c:	bne	17008 <__assert_fail@plt+0x6104>
   16e40:	cmp	fp, #0
   16e44:	mov	lr, r1
   16e48:	beq	16c2c <__assert_fail@plt+0x5d28>
   16e4c:	umull	r6, r7, r0, ip
   16e50:	mov	r3, r1
   16e54:	mov	r2, r7
   16e58:	umlal	r2, r3, fp, ip
   16e5c:	cmp	r3, #0
   16e60:	strd	r2, [sp, #16]
   16e64:	bne	173ec <__assert_fail@plt+0x64e8>
   16e68:	mov	r2, r6
   16e6c:	ldr	r3, [sp, #16]
   16e70:	b	16c38 <__assert_fail@plt+0x5d34>
   16e74:	asr	r3, ip, #31
   16e78:	mov	r2, ip
   16e7c:	cmp	r7, #0
   16e80:	mov	r1, #0
   16e84:	strd	r2, [sp]
   16e88:	bne	171d4 <__assert_fail@plt+0x62d0>
   16e8c:	umull	r6, r7, r6, ip
   16e90:	mov	r2, r6
   16e94:	mov	r3, r7
   16e98:	cmp	r1, #0
   16e9c:	bne	17008 <__assert_fail@plt+0x6104>
   16ea0:	cmp	r3, #0
   16ea4:	mov	lr, r1
   16ea8:	beq	16c10 <__assert_fail@plt+0x5d0c>
   16eac:	umull	r6, r7, r2, ip
   16eb0:	mov	fp, lr
   16eb4:	mov	sl, r7
   16eb8:	umlal	sl, fp, r3, ip
   16ebc:	cmp	fp, #0
   16ec0:	bne	174cc <__assert_fail@plt+0x65c8>
   16ec4:	mov	r0, r6
   16ec8:	mov	r1, sl
   16ecc:	b	16c1c <__assert_fail@plt+0x5d18>
   16ed0:	asr	r3, ip, #31
   16ed4:	mov	r2, ip
   16ed8:	cmp	r7, #0
   16edc:	mov	r1, #0
   16ee0:	strd	r2, [sp]
   16ee4:	bne	171b0 <__assert_fail@plt+0x62ac>
   16ee8:	umull	r6, r7, r6, ip
   16eec:	mov	sl, r6
   16ef0:	mov	lr, r7
   16ef4:	cmp	r1, #0
   16ef8:	bne	16ccc <__assert_fail@plt+0x5dc8>
   16efc:	cmp	lr, #0
   16f00:	mov	r7, r1
   16f04:	bne	172c4 <__assert_fail@plt+0x63c0>
   16f08:	umull	sl, fp, sl, ip
   16f0c:	mov	r0, sl
   16f10:	mov	r2, fp
   16f14:	cmp	r7, #0
   16f18:	mov	r6, r0
   16f1c:	mov	r7, r2
   16f20:	beq	16c88 <__assert_fail@plt+0x5d84>
   16f24:	b	16ccc <__assert_fail@plt+0x5dc8>
   16f28:	asr	r3, ip, #31
   16f2c:	mov	r2, ip
   16f30:	cmp	r7, #0
   16f34:	mov	r1, #0
   16f38:	strd	r2, [sp]
   16f3c:	bne	17144 <__assert_fail@plt+0x6240>
   16f40:	umull	r6, r7, r6, ip
   16f44:	mov	r0, r6
   16f48:	mov	fp, r7
   16f4c:	cmp	r1, #0
   16f50:	bne	17008 <__assert_fail@plt+0x6104>
   16f54:	cmp	fp, #0
   16f58:	mov	lr, r1
   16f5c:	beq	16db8 <__assert_fail@plt+0x5eb4>
   16f60:	umull	r6, r7, r0, ip
   16f64:	mov	r3, r1
   16f68:	mov	r2, r7
   16f6c:	umlal	r2, r3, fp, ip
   16f70:	cmp	r3, #0
   16f74:	strd	r2, [sp, #16]
   16f78:	bne	1745c <__assert_fail@plt+0x6558>
   16f7c:	mov	r2, r6
   16f80:	ldr	r3, [sp, #16]
   16f84:	b	16dc4 <__assert_fail@plt+0x5ec0>
   16f88:	lsr	r3, r7, #22
   16f8c:	lsl	r7, r7, #10
   16f90:	cmp	r3, #0
   16f94:	lsl	r3, r6, #10
   16f98:	orr	r7, r7, r6, lsr #22
   16f9c:	beq	16d40 <__assert_fail@plt+0x5e3c>
   16fa0:	b	16ccc <__assert_fail@plt+0x5dc8>
   16fa4:	asr	r3, ip, #31
   16fa8:	mov	r2, ip
   16fac:	cmp	r7, #0
   16fb0:	mov	r1, #0
   16fb4:	strd	r2, [sp]
   16fb8:	bne	1711c <__assert_fail@plt+0x6218>
   16fbc:	umull	r6, r7, r6, ip
   16fc0:	mov	r2, r6
   16fc4:	mov	r3, r7
   16fc8:	cmp	r1, #0
   16fcc:	bne	16ccc <__assert_fail@plt+0x5dc8>
   16fd0:	cmp	r3, #0
   16fd4:	mov	r7, r1
   16fd8:	bne	17280 <__assert_fail@plt+0x637c>
   16fdc:	umull	r2, r3, r2, ip
   16fe0:	mov	r6, r2
   16fe4:	mov	lr, r3
   16fe8:	cmp	r7, #0
   16fec:	bne	16ccc <__assert_fail@plt+0x5dc8>
   16ff0:	cmp	lr, #0
   16ff4:	bne	17244 <__assert_fail@plt+0x6340>
   16ff8:	umull	r2, r3, r6, ip
   16ffc:	mov	r0, r2
   17000:	mov	r2, r3
   17004:	b	16f14 <__assert_fail@plt+0x6010>
   17008:	mvn	r6, #0
   1700c:	mov	r3, #1
   17010:	mov	r7, r6
   17014:	b	16c84 <__assert_fail@plt+0x5d80>
   17018:	umull	sl, fp, r6, ip
   1701c:	mov	r3, lr
   17020:	mov	r2, fp
   17024:	umlal	r2, r3, r7, ip
   17028:	cmp	r3, #0
   1702c:	bne	17424 <__assert_fail@plt+0x6520>
   17030:	mov	r6, sl
   17034:	mov	r7, r2
   17038:	b	16cc4 <__assert_fail@plt+0x5dc0>
   1703c:	mov	r3, #2
   17040:	mov	ip, #1000	; 0x3e8
   17044:	str	r3, [sp, #12]
   17048:	b	16ab8 <__assert_fail@plt+0x5bb4>
   1704c:	umull	r0, r1, r6, ip
   17050:	mov	r3, r7
   17054:	mov	r2, r1
   17058:	strd	r0, [sp, #16]
   1705c:	umlal	r2, r3, lr, ip
   17060:	cmp	r3, #0
   17064:	beq	16c74 <__assert_fail@plt+0x5d70>
   17068:	ldrd	sl, [sp]
   1706c:	mov	r7, #1
   17070:	ldr	r0, [sp, #16]
   17074:	ldr	r3, [sp, #20]
   17078:	mul	r2, r6, fp
   1707c:	mla	r2, lr, sl, r2
   17080:	add	r2, r2, r3
   17084:	b	16c74 <__assert_fail@plt+0x5d70>
   17088:	umull	sl, fp, r2, ip
   1708c:	mov	r1, lr
   17090:	mov	r0, fp
   17094:	umlal	r0, r1, r3, ip
   17098:	cmp	r1, #0
   1709c:	bne	1737c <__assert_fail@plt+0x6478>
   170a0:	mov	r6, sl
   170a4:	mov	lr, r0
   170a8:	b	16c58 <__assert_fail@plt+0x5d54>
   170ac:	umull	sl, fp, r0, ip
   170b0:	mov	r7, lr
   170b4:	mov	r6, fp
   170b8:	umlal	r6, r7, r1, ip
   170bc:	cmp	r7, #0
   170c0:	bne	17524 <__assert_fail@plt+0x6620>
   170c4:	mov	r2, sl
   170c8:	mov	r3, r6
   170cc:	b	16c38 <__assert_fail@plt+0x5d34>
   170d0:	umull	sl, fp, r2, ip
   170d4:	mov	r7, lr
   170d8:	mov	r6, fp
   170dc:	umlal	r6, r7, r3, ip
   170e0:	cmp	r7, #0
   170e4:	bne	173b4 <__assert_fail@plt+0x64b0>
   170e8:	mov	r0, sl
   170ec:	mov	r1, r6
   170f0:	b	16de0 <__assert_fail@plt+0x5edc>
   170f4:	umull	sl, fp, r6, ip
   170f8:	mov	r3, r1
   170fc:	mov	r2, fp
   17100:	umlal	r2, r3, r7, ip
   17104:	cmp	r3, #0
   17108:	strd	r2, [sp, #16]
   1710c:	bne	17398 <__assert_fail@plt+0x6494>
   17110:	mov	r2, sl
   17114:	ldr	r3, [sp, #16]
   17118:	b	16bc4 <__assert_fail@plt+0x5cc0>
   1711c:	umull	sl, fp, r6, ip
   17120:	mov	r3, r1
   17124:	mov	r2, fp
   17128:	umlal	r2, r3, r7, ip
   1712c:	cmp	r3, #0
   17130:	strd	r2, [sp, #16]
   17134:	bne	17478 <__assert_fail@plt+0x6574>
   17138:	mov	r2, sl
   1713c:	ldr	r3, [sp, #16]
   17140:	b	16fc8 <__assert_fail@plt+0x60c4>
   17144:	umull	sl, fp, r6, ip
   17148:	mov	r3, r1
   1714c:	mov	r2, fp
   17150:	umlal	r2, r3, r7, ip
   17154:	cmp	r3, #0
   17158:	bne	17344 <__assert_fail@plt+0x6440>
   1715c:	mov	r0, sl
   17160:	mov	fp, r2
   17164:	b	16f4c <__assert_fail@plt+0x6048>
   17168:	umull	sl, fp, r6, ip
   1716c:	mov	r3, r1
   17170:	mov	r2, fp
   17174:	umlal	r2, r3, r7, ip
   17178:	cmp	r3, #0
   1717c:	bne	17408 <__assert_fail@plt+0x6504>
   17180:	mov	r0, sl
   17184:	mov	fp, r2
   17188:	b	16d6c <__assert_fail@plt+0x5e68>
   1718c:	umull	sl, fp, r6, ip
   17190:	mov	r3, r1
   17194:	mov	r2, fp
   17198:	umlal	r2, r3, r7, ip
   1719c:	cmp	r3, #0
   171a0:	bne	17494 <__assert_fail@plt+0x6590>
   171a4:	mov	r0, sl
   171a8:	mov	fp, r2
   171ac:	b	16e38 <__assert_fail@plt+0x5f34>
   171b0:	umull	sl, fp, r6, ip
   171b4:	mov	r3, r1
   171b8:	mov	r2, fp
   171bc:	strd	sl, [sp, #16]
   171c0:	umlal	r2, r3, r7, ip
   171c4:	cmp	r3, #0
   171c8:	bne	1743c <__assert_fail@plt+0x6538>
   171cc:	mov	lr, r2
   171d0:	b	16ef4 <__assert_fail@plt+0x5ff0>
   171d4:	umull	sl, fp, r6, ip
   171d8:	mov	r3, r1
   171dc:	mov	r2, fp
   171e0:	umlal	r2, r3, r7, ip
   171e4:	cmp	r3, #0
   171e8:	strd	r2, [sp, #16]
   171ec:	bne	17540 <__assert_fail@plt+0x663c>
   171f0:	mov	r2, sl
   171f4:	ldr	r3, [sp, #16]
   171f8:	b	16e98 <__assert_fail@plt+0x5f94>
   171fc:	umull	sl, fp, r0, ip
   17200:	mov	r7, lr
   17204:	mov	r6, fp
   17208:	umlal	r6, r7, r1, ip
   1720c:	cmp	r7, #0
   17210:	bne	1755c <__assert_fail@plt+0x6658>
   17214:	mov	r2, sl
   17218:	mov	r3, r6
   1721c:	b	16c00 <__assert_fail@plt+0x5cfc>
   17220:	umull	r6, r7, r2, ip
   17224:	mov	fp, r1
   17228:	mov	sl, r7
   1722c:	umlal	sl, fp, r3, ip
   17230:	cmp	fp, #0
   17234:	bne	173d0 <__assert_fail@plt+0x64cc>
   17238:	mov	r0, r6
   1723c:	mov	r1, sl
   17240:	b	16be4 <__assert_fail@plt+0x5ce0>
   17244:	umull	r0, r1, r6, ip
   17248:	mov	r3, r7
   1724c:	mov	r2, r1
   17250:	strd	r0, [sp, #16]
   17254:	umlal	r2, r3, lr, ip
   17258:	cmp	r3, #0
   1725c:	beq	16f14 <__assert_fail@plt+0x6010>
   17260:	ldrd	sl, [sp]
   17264:	mov	r7, #1
   17268:	ldr	r0, [sp, #16]
   1726c:	ldr	r3, [sp, #20]
   17270:	mul	r2, r6, fp
   17274:	mla	r2, lr, sl, r2
   17278:	add	r2, r2, r3
   1727c:	b	16f14 <__assert_fail@plt+0x6010>
   17280:	umull	sl, fp, r2, ip
   17284:	mov	r0, fp
   17288:	umlal	r0, r1, r3, ip
   1728c:	cmp	r1, #0
   17290:	bne	17578 <__assert_fail@plt+0x6674>
   17294:	mov	r6, sl
   17298:	mov	lr, r0
   1729c:	b	16fe8 <__assert_fail@plt+0x60e4>
   172a0:	umull	r6, r7, r0, ip
   172a4:	mov	fp, lr
   172a8:	mov	sl, r7
   172ac:	umlal	sl, fp, r1, ip
   172b0:	cmp	fp, #0
   172b4:	bne	174b0 <__assert_fail@plt+0x65ac>
   172b8:	mov	r2, r6
   172bc:	mov	r3, sl
   172c0:	b	16dc4 <__assert_fail@plt+0x5ec0>
   172c4:	umull	r0, r1, sl, ip
   172c8:	mov	r3, r7
   172cc:	mov	r2, r1
   172d0:	umlal	r2, r3, lr, ip
   172d4:	cmp	r3, #0
   172d8:	beq	16f14 <__assert_fail@plt+0x6010>
   172dc:	ldr	r3, [sp, #4]
   172e0:	mov	r7, #1
   172e4:	mul	r2, sl, r3
   172e8:	ldr	r3, [sp]
   172ec:	mla	r2, lr, r3, r2
   172f0:	add	r2, r2, r1
   172f4:	b	16f14 <__assert_fail@plt+0x6010>
   172f8:	umull	r6, r7, r0, ip
   172fc:	mov	r3, r1
   17300:	mov	r2, r7
   17304:	umlal	r2, r3, fp, ip
   17308:	cmp	r3, #0
   1730c:	strd	r2, [sp, #16]
   17310:	bne	17594 <__assert_fail@plt+0x6690>
   17314:	mov	r2, r6
   17318:	ldr	r3, [sp, #16]
   1731c:	b	16d8c <__assert_fail@plt+0x5e88>
   17320:	umull	sl, fp, r2, ip
   17324:	mov	r7, lr
   17328:	mov	r6, fp
   1732c:	umlal	r6, r7, r3, ip
   17330:	cmp	r7, #0
   17334:	bne	17360 <__assert_fail@plt+0x645c>
   17338:	mov	r0, sl
   1733c:	mov	r1, r6
   17340:	b	16da8 <__assert_fail@plt+0x5ea4>
   17344:	ldrd	r2, [sp]
   17348:	mov	r0, sl
   1734c:	mov	r1, #1
   17350:	mul	r6, r6, r3
   17354:	mla	r7, r2, r7, r6
   17358:	add	fp, r7, fp
   1735c:	b	16f4c <__assert_fail@plt+0x6048>
   17360:	ldrd	r6, [sp]
   17364:	mov	r0, sl
   17368:	mov	lr, #1
   1736c:	mul	r2, r2, r7
   17370:	mla	r1, r3, r6, r2
   17374:	add	r1, r1, fp
   17378:	b	16da8 <__assert_fail@plt+0x5ea4>
   1737c:	ldrd	r0, [sp]
   17380:	mov	r6, sl
   17384:	mov	r7, #1
   17388:	mul	r2, r2, r1
   1738c:	mla	lr, r3, r0, r2
   17390:	add	lr, lr, fp
   17394:	b	16c58 <__assert_fail@plt+0x5d54>
   17398:	ldm	sp, {r0, r3}
   1739c:	mov	r2, sl
   173a0:	mov	r1, #1
   173a4:	mul	r3, r6, r3
   173a8:	mla	r3, r0, r7, r3
   173ac:	add	r3, r3, fp
   173b0:	b	16bc4 <__assert_fail@plt+0x5cc0>
   173b4:	ldrd	r6, [sp]
   173b8:	mov	r0, sl
   173bc:	mov	lr, #1
   173c0:	mul	r2, r2, r7
   173c4:	mla	r1, r3, r6, r2
   173c8:	add	r1, r1, fp
   173cc:	b	16de0 <__assert_fail@plt+0x5edc>
   173d0:	ldrd	sl, [sp]
   173d4:	mov	r0, r6
   173d8:	mov	lr, #1
   173dc:	mul	r2, r2, fp
   173e0:	mla	r1, r3, sl, r2
   173e4:	add	r1, r1, r7
   173e8:	b	16be4 <__assert_fail@plt+0x5ce0>
   173ec:	ldm	sp, {r1, r3}
   173f0:	mov	r2, r6
   173f4:	mov	lr, #1
   173f8:	mul	r3, r0, r3
   173fc:	mla	r3, fp, r1, r3
   17400:	add	r3, r3, r7
   17404:	b	16c38 <__assert_fail@plt+0x5d34>
   17408:	ldrd	r2, [sp]
   1740c:	mov	r0, sl
   17410:	mov	r1, #1
   17414:	mul	r6, r6, r3
   17418:	mla	r7, r2, r7, r6
   1741c:	add	fp, r7, fp
   17420:	b	16d6c <__assert_fail@plt+0x5e68>
   17424:	mul	r3, r6, r1
   17428:	mov	lr, #1
   1742c:	mov	r6, sl
   17430:	mla	r7, ip, r7, r3
   17434:	add	r7, r7, fp
   17438:	b	16cc4 <__assert_fail@plt+0x5dc0>
   1743c:	ldrd	r2, [sp]
   17440:	mov	r1, #1
   17444:	ldr	sl, [sp, #16]
   17448:	mul	lr, r6, r3
   1744c:	ldr	r3, [sp, #20]
   17450:	mla	lr, r2, r7, lr
   17454:	add	lr, lr, r3
   17458:	b	16ef4 <__assert_fail@plt+0x5ff0>
   1745c:	ldm	sp, {r1, r3}
   17460:	mov	r2, r6
   17464:	mov	lr, #1
   17468:	mul	r3, r0, r3
   1746c:	mla	r3, fp, r1, r3
   17470:	add	r3, r3, r7
   17474:	b	16dc4 <__assert_fail@plt+0x5ec0>
   17478:	ldm	sp, {r0, r3}
   1747c:	mov	r2, sl
   17480:	mov	r1, #1
   17484:	mul	r3, r6, r3
   17488:	mla	r3, r0, r7, r3
   1748c:	add	r3, r3, fp
   17490:	b	16fc8 <__assert_fail@plt+0x60c4>
   17494:	ldrd	r2, [sp]
   17498:	mov	r0, sl
   1749c:	mov	r1, #1
   174a0:	mul	r6, r6, r3
   174a4:	mla	r7, r2, r7, r6
   174a8:	add	fp, r7, fp
   174ac:	b	16e38 <__assert_fail@plt+0x5f34>
   174b0:	ldrd	sl, [sp]
   174b4:	mov	r2, r6
   174b8:	mov	lr, #1
   174bc:	mul	r3, r0, fp
   174c0:	mla	r3, r1, sl, r3
   174c4:	add	r3, r3, r7
   174c8:	b	16dc4 <__assert_fail@plt+0x5ec0>
   174cc:	ldrd	sl, [sp]
   174d0:	mov	r0, r6
   174d4:	mov	lr, #1
   174d8:	mul	r2, r2, fp
   174dc:	mla	r1, r3, sl, r2
   174e0:	add	r1, r1, r7
   174e4:	b	16c1c <__assert_fail@plt+0x5d18>
   174e8:	movw	r3, #33596	; 0x833c
   174ec:	movt	r3, #1
   174f0:	movw	r1, #33608	; 0x8348
   174f4:	movt	r1, #1
   174f8:	movw	r0, #33624	; 0x8358
   174fc:	movt	r0, #1
   17500:	mov	r2, #85	; 0x55
   17504:	bl	10f04 <__assert_fail@plt>
   17508:	ldrd	sl, [sp]
   1750c:	mov	r2, r6
   17510:	mov	lr, #1
   17514:	mul	r3, r0, fp
   17518:	mla	r3, r1, sl, r3
   1751c:	add	r3, r3, r7
   17520:	b	16c38 <__assert_fail@plt+0x5d34>
   17524:	ldrd	r6, [sp]
   17528:	mov	r2, sl
   1752c:	mov	lr, #1
   17530:	mul	r3, r0, r7
   17534:	mla	r3, r1, r6, r3
   17538:	add	r3, r3, fp
   1753c:	b	16c38 <__assert_fail@plt+0x5d34>
   17540:	ldm	sp, {r0, r3}
   17544:	mov	r2, sl
   17548:	mov	r1, #1
   1754c:	mul	r3, r6, r3
   17550:	mla	r3, r0, r7, r3
   17554:	add	r3, r3, fp
   17558:	b	16e98 <__assert_fail@plt+0x5f94>
   1755c:	ldrd	r6, [sp]
   17560:	mov	r2, sl
   17564:	mov	lr, #1
   17568:	mul	r3, r0, r7
   1756c:	mla	r3, r1, r6, r3
   17570:	add	r3, r3, fp
   17574:	b	16c00 <__assert_fail@plt+0x5cfc>
   17578:	ldrd	r0, [sp]
   1757c:	mov	r6, sl
   17580:	mov	r7, #1
   17584:	mul	r2, r2, r1
   17588:	mla	lr, r3, r0, r2
   1758c:	add	lr, lr, fp
   17590:	b	16fe8 <__assert_fail@plt+0x60e4>
   17594:	ldm	sp, {r1, r3}
   17598:	mov	r2, r6
   1759c:	mov	lr, #1
   175a0:	mul	r3, r0, r3
   175a4:	mla	r3, fp, r1, r3
   175a8:	add	r3, r3, r7
   175ac:	b	16d8c <__assert_fail@plt+0x5e88>
   175b0:	cmp	r1, #0
   175b4:	cmpne	r0, #0
   175b8:	beq	17604 <__assert_fail@plt+0x6700>
   175bc:	strd	r4, [sp, #-16]!
   175c0:	umull	r4, r5, r0, r1
   175c4:	str	r6, [sp, #8]
   175c8:	str	lr, [sp, #12]
   175cc:	adds	r3, r5, #0
   175d0:	movne	r3, #1
   175d4:	cmp	r4, #0
   175d8:	blt	175e4 <__assert_fail@plt+0x66e0>
   175dc:	cmp	r3, #0
   175e0:	beq	17610 <__assert_fail@plt+0x670c>
   175e4:	bl	10e2c <__errno_location@plt>
   175e8:	mov	r3, #12
   175ec:	ldrd	r4, [sp]
   175f0:	ldr	r6, [sp, #8]
   175f4:	add	sp, sp, #12
   175f8:	str	r3, [r0]
   175fc:	mov	r0, #0
   17600:	pop	{pc}		; (ldr pc, [sp], #4)
   17604:	mov	r1, #1
   17608:	mov	r0, r1
   1760c:	b	10ca0 <calloc@plt>
   17610:	ldrd	r4, [sp]
   17614:	ldr	r6, [sp, #8]
   17618:	ldr	lr, [sp, #12]
   1761c:	add	sp, sp, #16
   17620:	b	10ca0 <calloc@plt>
   17624:	cmp	r0, #0
   17628:	beq	17634 <__assert_fail@plt+0x6730>
   1762c:	blt	1763c <__assert_fail@plt+0x6738>
   17630:	b	10dc0 <malloc@plt>
   17634:	mov	r0, #1
   17638:	b	10dc0 <malloc@plt>
   1763c:	str	r4, [sp, #-8]!
   17640:	str	lr, [sp, #4]
   17644:	bl	10e2c <__errno_location@plt>
   17648:	mov	r3, #12
   1764c:	ldr	r4, [sp]
   17650:	add	sp, sp, #4
   17654:	str	r3, [r0]
   17658:	mov	r0, #0
   1765c:	pop	{pc}		; (ldr pc, [sp], #4)
   17660:	cmp	r0, #0
   17664:	beq	1768c <__assert_fail@plt+0x6788>
   17668:	cmp	r1, #0
   1766c:	str	r4, [sp, #-8]!
   17670:	str	lr, [sp, #4]
   17674:	beq	17694 <__assert_fail@plt+0x6790>
   17678:	blt	176a8 <__assert_fail@plt+0x67a4>
   1767c:	ldr	r4, [sp]
   17680:	ldr	lr, [sp, #4]
   17684:	add	sp, sp, #8
   17688:	b	10d54 <realloc@plt>
   1768c:	mov	r0, r1
   17690:	b	17624 <__assert_fail@plt+0x6720>
   17694:	bl	17740 <__assert_fail@plt+0x683c>
   17698:	ldr	r4, [sp]
   1769c:	add	sp, sp, #4
   176a0:	mov	r0, #0
   176a4:	pop	{pc}		; (ldr pc, [sp], #4)
   176a8:	bl	10e2c <__errno_location@plt>
   176ac:	mov	r3, #12
   176b0:	str	r3, [r0]
   176b4:	b	17698 <__assert_fail@plt+0x6794>
   176b8:	strd	r4, [sp, #-16]!
   176bc:	mov	r4, r0
   176c0:	str	r6, [sp, #8]
   176c4:	str	lr, [sp, #12]
   176c8:	bl	10d9c <__fpending@plt>
   176cc:	ldr	r5, [r4]
   176d0:	mov	r6, r0
   176d4:	mov	r0, r4
   176d8:	bl	11ba8 <__assert_fail@plt+0xca4>
   176dc:	mov	r4, r0
   176e0:	and	r5, r5, #32
   176e4:	cmp	r5, #0
   176e8:	bne	17720 <__assert_fail@plt+0x681c>
   176ec:	cmp	r0, #0
   176f0:	beq	1770c <__assert_fail@plt+0x6808>
   176f4:	cmp	r6, #0
   176f8:	bne	17738 <__assert_fail@plt+0x6834>
   176fc:	bl	10e2c <__errno_location@plt>
   17700:	ldr	r4, [r0]
   17704:	subs	r4, r4, #9
   17708:	mvnne	r4, #0
   1770c:	mov	r0, r4
   17710:	ldrd	r4, [sp]
   17714:	ldr	r6, [sp, #8]
   17718:	add	sp, sp, #12
   1771c:	pop	{pc}		; (ldr pc, [sp], #4)
   17720:	cmp	r0, #0
   17724:	bne	17738 <__assert_fail@plt+0x6834>
   17728:	bl	10e2c <__errno_location@plt>
   1772c:	str	r4, [r0]
   17730:	mvn	r4, #0
   17734:	b	1770c <__assert_fail@plt+0x6808>
   17738:	mvn	r4, #0
   1773c:	b	1770c <__assert_fail@plt+0x6808>
   17740:	strd	r4, [sp, #-12]!
   17744:	mov	r5, r0
   17748:	str	lr, [sp, #8]
   1774c:	sub	sp, sp, #12
   17750:	bl	10e2c <__errno_location@plt>
   17754:	mov	r4, r0
   17758:	mov	r2, #0
   1775c:	ldr	r3, [r4]
   17760:	mov	r0, r5
   17764:	str	r2, [r4]
   17768:	str	r3, [sp]
   1776c:	str	r3, [sp, #4]
   17770:	bl	10ce8 <free@plt>
   17774:	ldr	r3, [r4]
   17778:	add	r2, sp, #8
   1777c:	clz	r3, r3
   17780:	lsr	r3, r3, #5
   17784:	add	r3, r2, r3, lsl #2
   17788:	ldr	r3, [r3, #-8]
   1778c:	str	r3, [r4]
   17790:	add	sp, sp, #12
   17794:	ldrd	r4, [sp]
   17798:	add	sp, sp, #8
   1779c:	pop	{pc}		; (ldr pc, [sp], #4)
   177a0:	mov	r0, #14
   177a4:	str	r4, [sp, #-8]!
   177a8:	str	lr, [sp, #4]
   177ac:	bl	10ebc <nl_langinfo@plt>
   177b0:	cmp	r0, #0
   177b4:	beq	177d8 <__assert_fail@plt+0x68d4>
   177b8:	ldrb	r2, [r0]
   177bc:	movw	r3, #33664	; 0x8380
   177c0:	movt	r3, #1
   177c4:	ldr	r4, [sp]
   177c8:	add	sp, sp, #4
   177cc:	cmp	r2, #0
   177d0:	moveq	r0, r3
   177d4:	pop	{pc}		; (ldr pc, [sp], #4)
   177d8:	ldr	r4, [sp]
   177dc:	add	sp, sp, #4
   177e0:	movw	r0, #33664	; 0x8380
   177e4:	movt	r0, #1
   177e8:	pop	{pc}		; (ldr pc, [sp], #4)
   177ec:	strd	r4, [sp, #-20]!	; 0xffffffec
   177f0:	mov	r5, r2
   177f4:	strd	r6, [sp, #8]
   177f8:	subs	r6, r0, #0
   177fc:	mov	r7, r1
   17800:	str	lr, [sp, #16]
   17804:	sub	sp, sp, #12
   17808:	addeq	r6, sp, #4
   1780c:	mov	r0, r6
   17810:	bl	10da8 <mbrtowc@plt>
   17814:	cmp	r5, #0
   17818:	cmnne	r0, #3
   1781c:	mov	r4, r0
   17820:	bhi	1783c <__assert_fail@plt+0x6938>
   17824:	mov	r0, r4
   17828:	add	sp, sp, #12
   1782c:	ldrd	r4, [sp]
   17830:	ldrd	r6, [sp, #8]
   17834:	add	sp, sp, #16
   17838:	pop	{pc}		; (ldr pc, [sp], #4)
   1783c:	mov	r0, #0
   17840:	bl	17894 <__assert_fail@plt+0x6990>
   17844:	cmp	r0, #0
   17848:	bne	17824 <__assert_fail@plt+0x6920>
   1784c:	ldrb	r3, [r7]
   17850:	mov	r4, #1
   17854:	str	r3, [r6]
   17858:	b	17824 <__assert_fail@plt+0x6920>
   1785c:	umull	r2, r3, r1, r2
   17860:	cmp	r3, #0
   17864:	bne	17870 <__assert_fail@plt+0x696c>
   17868:	mov	r1, r2
   1786c:	b	17660 <__assert_fail@plt+0x675c>
   17870:	str	r4, [sp, #-8]!
   17874:	str	lr, [sp, #4]
   17878:	bl	10e2c <__errno_location@plt>
   1787c:	mov	r3, #12
   17880:	ldr	r4, [sp]
   17884:	add	sp, sp, #4
   17888:	str	r3, [r0]
   1788c:	mov	r0, #0
   17890:	pop	{pc}		; (ldr pc, [sp], #4)
   17894:	push	{lr}		; (str lr, [sp, #-4]!)
   17898:	sub	sp, sp, #268	; 0x10c
   1789c:	movw	r2, #257	; 0x101
   178a0:	add	r1, sp, #4
   178a4:	bl	178ec <__assert_fail@plt+0x69e8>
   178a8:	cmp	r0, #0
   178ac:	movne	r0, #0
   178b0:	bne	178e4 <__assert_fail@plt+0x69e0>
   178b4:	movw	r1, #33672	; 0x8388
   178b8:	movt	r1, #1
   178bc:	add	r0, sp, #4
   178c0:	bl	10cb8 <strcmp@plt>
   178c4:	cmp	r0, #0
   178c8:	beq	178e4 <__assert_fail@plt+0x69e0>
   178cc:	add	r0, sp, #4
   178d0:	movw	r1, #33676	; 0x838c
   178d4:	movt	r1, #1
   178d8:	bl	10cb8 <strcmp@plt>
   178dc:	adds	r0, r0, #0
   178e0:	movne	r0, #1
   178e4:	add	sp, sp, #268	; 0x10c
   178e8:	pop	{pc}		; (ldr pc, [sp], #4)
   178ec:	strd	r4, [sp, #-16]!
   178f0:	mov	r5, r1
   178f4:	mov	r1, #0
   178f8:	mov	r4, r2
   178fc:	str	r6, [sp, #8]
   17900:	str	lr, [sp, #12]
   17904:	bl	10ea4 <setlocale@plt>
   17908:	subs	r6, r0, #0
   1790c:	beq	1798c <__assert_fail@plt+0x6a88>
   17910:	bl	10e14 <strlen@plt>
   17914:	cmp	r4, r0
   17918:	bhi	17938 <__assert_fail@plt+0x6a34>
   1791c:	cmp	r4, #0
   17920:	moveq	r0, #34	; 0x22
   17924:	bne	1795c <__assert_fail@plt+0x6a58>
   17928:	ldrd	r4, [sp]
   1792c:	ldr	r6, [sp, #8]
   17930:	add	sp, sp, #12
   17934:	pop	{pc}		; (ldr pc, [sp], #4)
   17938:	add	r2, r0, #1
   1793c:	mov	r1, r6
   17940:	mov	r0, r5
   17944:	bl	10d00 <memcpy@plt>
   17948:	ldrd	r4, [sp]
   1794c:	mov	r0, #0
   17950:	ldr	r6, [sp, #8]
   17954:	add	sp, sp, #12
   17958:	pop	{pc}		; (ldr pc, [sp], #4)
   1795c:	sub	r4, r4, #1
   17960:	mov	r1, r6
   17964:	mov	r2, r4
   17968:	mov	r0, r5
   1796c:	bl	10d00 <memcpy@plt>
   17970:	mov	r3, #0
   17974:	mov	r0, #34	; 0x22
   17978:	strb	r3, [r5, r4]
   1797c:	ldrd	r4, [sp]
   17980:	ldr	r6, [sp, #8]
   17984:	add	sp, sp, #12
   17988:	pop	{pc}		; (ldr pc, [sp], #4)
   1798c:	cmp	r4, #0
   17990:	mov	r0, #22
   17994:	strbne	r6, [r5]
   17998:	ldrd	r4, [sp]
   1799c:	ldr	r6, [sp, #8]
   179a0:	add	sp, sp, #12
   179a4:	pop	{pc}		; (ldr pc, [sp], #4)
   179a8:	mov	r1, #0
   179ac:	b	10ea4 <setlocale@plt>
   179b0:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   179b4:	mov	r7, r0
   179b8:	ldr	r6, [pc, #72]	; 17a08 <__assert_fail@plt+0x6b04>
   179bc:	ldr	r5, [pc, #72]	; 17a0c <__assert_fail@plt+0x6b08>
   179c0:	add	r6, pc, r6
   179c4:	add	r5, pc, r5
   179c8:	sub	r6, r6, r5
   179cc:	mov	r8, r1
   179d0:	mov	r9, r2
   179d4:	bl	10c80 <calloc@plt-0x20>
   179d8:	asrs	r6, r6, #2
   179dc:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   179e0:	mov	r4, #0
   179e4:	add	r4, r4, #1
   179e8:	ldr	r3, [r5], #4
   179ec:	mov	r2, r9
   179f0:	mov	r1, r8
   179f4:	mov	r0, r7
   179f8:	blx	r3
   179fc:	cmp	r6, r4
   17a00:	bne	179e4 <__assert_fail@plt+0x6ae0>
   17a04:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   17a08:	andeq	r1, r1, ip, asr #10
   17a0c:	andeq	r1, r1, r4, asr #10
   17a10:	bx	lr
   17a14:	ldr	r3, [pc, #12]	; 17a28 <__assert_fail@plt+0x6b24>
   17a18:	mov	r1, #0
   17a1c:	add	r3, pc, r3
   17a20:	ldr	r2, [r3]
   17a24:	b	10e38 <__cxa_atexit@plt>
   17a28:	andeq	r1, r1, r0, asr #13

Disassembly of section .fini:

00017a2c <.fini>:
   17a2c:	push	{r3, lr}
   17a30:	pop	{r3, pc}
