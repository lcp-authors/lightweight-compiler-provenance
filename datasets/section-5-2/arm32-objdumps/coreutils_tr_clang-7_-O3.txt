
../repos/coreutils/src/tr:     file format elf32-littlearm


Disassembly of section .init:

00010e10 <.init>:
   10e10:	push	{r3, lr}
   10e14:	bl	110ec <__assert_fail@plt+0x4c>
   10e18:	pop	{r3, pc}

Disassembly of section .plt:

00010e1c <calloc@plt-0x14>:
   10e1c:	push	{lr}		; (str lr, [sp, #-4]!)
   10e20:	ldr	lr, [pc, #4]	; 10e2c <calloc@plt-0x4>
   10e24:	add	lr, pc, lr
   10e28:	ldr	pc, [lr, #8]!
   10e2c:	ldrdeq	r9, [r1], -r4

00010e30 <calloc@plt>:
   10e30:	add	ip, pc, #0, 12
   10e34:	add	ip, ip, #102400	; 0x19000
   10e38:	ldr	pc, [ip, #468]!	; 0x1d4

00010e3c <fputs_unlocked@plt>:
   10e3c:	add	ip, pc, #0, 12
   10e40:	add	ip, ip, #102400	; 0x19000
   10e44:	ldr	pc, [ip, #460]!	; 0x1cc

00010e48 <raise@plt>:
   10e48:	add	ip, pc, #0, 12
   10e4c:	add	ip, ip, #102400	; 0x19000
   10e50:	ldr	pc, [ip, #452]!	; 0x1c4

00010e54 <strcmp@plt>:
   10e54:	add	ip, pc, #0, 12
   10e58:	add	ip, ip, #102400	; 0x19000
   10e5c:	ldr	pc, [ip, #444]!	; 0x1bc

00010e60 <posix_fadvise64@plt>:
   10e60:	add	ip, pc, #0, 12
   10e64:	add	ip, ip, #102400	; 0x19000
   10e68:	ldr	pc, [ip, #436]!	; 0x1b4

00010e6c <read@plt>:
   10e6c:	add	ip, pc, #0, 12
   10e70:	add	ip, ip, #102400	; 0x19000
   10e74:	ldr	pc, [ip, #428]!	; 0x1ac

00010e78 <fflush@plt>:
   10e78:	add	ip, pc, #0, 12
   10e7c:	add	ip, ip, #102400	; 0x19000
   10e80:	ldr	pc, [ip, #420]!	; 0x1a4

00010e84 <free@plt>:
   10e84:	add	ip, pc, #0, 12
   10e88:	add	ip, ip, #102400	; 0x19000
   10e8c:	ldr	pc, [ip, #412]!	; 0x19c

00010e90 <_exit@plt>:
   10e90:	add	ip, pc, #0, 12
   10e94:	add	ip, ip, #102400	; 0x19000
   10e98:	ldr	pc, [ip, #404]!	; 0x194

00010e9c <memcpy@plt>:
   10e9c:	add	ip, pc, #0, 12
   10ea0:	add	ip, ip, #102400	; 0x19000
   10ea4:	ldr	pc, [ip, #396]!	; 0x18c

00010ea8 <__strtoull_internal@plt>:
   10ea8:	add	ip, pc, #0, 12
   10eac:	add	ip, ip, #102400	; 0x19000
   10eb0:	ldr	pc, [ip, #388]!	; 0x184

00010eb4 <mbsinit@plt>:
   10eb4:	add	ip, pc, #0, 12
   10eb8:	add	ip, ip, #102400	; 0x19000
   10ebc:	ldr	pc, [ip, #380]!	; 0x17c

00010ec0 <fwrite_unlocked@plt>:
   10ec0:	add	ip, pc, #0, 12
   10ec4:	add	ip, ip, #102400	; 0x19000
   10ec8:	ldr	pc, [ip, #372]!	; 0x174

00010ecc <memcmp@plt>:
   10ecc:	add	ip, pc, #0, 12
   10ed0:	add	ip, ip, #102400	; 0x19000
   10ed4:	ldr	pc, [ip, #364]!	; 0x16c

00010ed8 <stpcpy@plt>:
   10ed8:	add	ip, pc, #0, 12
   10edc:	add	ip, ip, #102400	; 0x19000
   10ee0:	ldr	pc, [ip, #356]!	; 0x164

00010ee4 <dcgettext@plt>:
   10ee4:	add	ip, pc, #0, 12
   10ee8:	add	ip, ip, #102400	; 0x19000
   10eec:	ldr	pc, [ip, #348]!	; 0x15c

00010ef0 <realloc@plt>:
   10ef0:	add	ip, pc, #0, 12
   10ef4:	add	ip, ip, #102400	; 0x19000
   10ef8:	ldr	pc, [ip, #340]!	; 0x154

00010efc <textdomain@plt>:
   10efc:	add	ip, pc, #0, 12
   10f00:	add	ip, ip, #102400	; 0x19000
   10f04:	ldr	pc, [ip, #332]!	; 0x14c

00010f08 <iswprint@plt>:
   10f08:	add	ip, pc, #0, 12
   10f0c:	add	ip, ip, #102400	; 0x19000
   10f10:	ldr	pc, [ip, #324]!	; 0x144

00010f14 <fwrite@plt>:
   10f14:	add	ip, pc, #0, 12
   10f18:	add	ip, ip, #102400	; 0x19000
   10f1c:	ldr	pc, [ip, #316]!	; 0x13c

00010f20 <lseek64@plt>:
   10f20:	add	ip, pc, #0, 12
   10f24:	add	ip, ip, #102400	; 0x19000
   10f28:	ldr	pc, [ip, #308]!	; 0x134

00010f2c <__ctype_get_mb_cur_max@plt>:
   10f2c:	add	ip, pc, #0, 12
   10f30:	add	ip, ip, #102400	; 0x19000
   10f34:	ldr	pc, [ip, #300]!	; 0x12c

00010f38 <__fpending@plt>:
   10f38:	add	ip, pc, #0, 12
   10f3c:	add	ip, ip, #102400	; 0x19000
   10f40:	ldr	pc, [ip, #292]!	; 0x124

00010f44 <mbrtowc@plt>:
   10f44:	add	ip, pc, #0, 12
   10f48:	add	ip, ip, #102400	; 0x19000
   10f4c:	ldr	pc, [ip, #284]!	; 0x11c

00010f50 <error@plt>:
   10f50:	add	ip, pc, #0, 12
   10f54:	add	ip, ip, #102400	; 0x19000
   10f58:	ldr	pc, [ip, #276]!	; 0x114

00010f5c <malloc@plt>:
   10f5c:	add	ip, pc, #0, 12
   10f60:	add	ip, ip, #102400	; 0x19000
   10f64:	ldr	pc, [ip, #268]!	; 0x10c

00010f68 <__libc_start_main@plt>:
   10f68:	add	ip, pc, #0, 12
   10f6c:	add	ip, ip, #102400	; 0x19000
   10f70:	ldr	pc, [ip, #260]!	; 0x104

00010f74 <__freading@plt>:
   10f74:	add	ip, pc, #0, 12
   10f78:	add	ip, ip, #102400	; 0x19000
   10f7c:	ldr	pc, [ip, #252]!	; 0xfc

00010f80 <__ctype_tolower_loc@plt>:
   10f80:	add	ip, pc, #0, 12
   10f84:	add	ip, ip, #102400	; 0x19000
   10f88:	ldr	pc, [ip, #244]!	; 0xf4

00010f8c <__ctype_toupper_loc@plt>:
   10f8c:	add	ip, pc, #0, 12
   10f90:	add	ip, ip, #102400	; 0x19000
   10f94:	ldr	pc, [ip, #236]!	; 0xec

00010f98 <__gmon_start__@plt>:
   10f98:	add	ip, pc, #0, 12
   10f9c:	add	ip, ip, #102400	; 0x19000
   10fa0:	ldr	pc, [ip, #228]!	; 0xe4

00010fa4 <getopt_long@plt>:
   10fa4:	add	ip, pc, #0, 12
   10fa8:	add	ip, ip, #102400	; 0x19000
   10fac:	ldr	pc, [ip, #220]!	; 0xdc

00010fb0 <__ctype_b_loc@plt>:
   10fb0:	add	ip, pc, #0, 12
   10fb4:	add	ip, ip, #102400	; 0x19000
   10fb8:	ldr	pc, [ip, #212]!	; 0xd4

00010fbc <exit@plt>:
   10fbc:	add	ip, pc, #0, 12
   10fc0:	add	ip, ip, #102400	; 0x19000
   10fc4:	ldr	pc, [ip, #204]!	; 0xcc

00010fc8 <strlen@plt>:
   10fc8:	add	ip, pc, #0, 12
   10fcc:	add	ip, ip, #102400	; 0x19000
   10fd0:	ldr	pc, [ip, #196]!	; 0xc4

00010fd4 <strchr@plt>:
   10fd4:	add	ip, pc, #0, 12
   10fd8:	add	ip, ip, #102400	; 0x19000
   10fdc:	ldr	pc, [ip, #188]!	; 0xbc

00010fe0 <__errno_location@plt>:
   10fe0:	add	ip, pc, #0, 12
   10fe4:	add	ip, ip, #102400	; 0x19000
   10fe8:	ldr	pc, [ip, #180]!	; 0xb4

00010fec <__sprintf_chk@plt>:
   10fec:	add	ip, pc, #0, 12
   10ff0:	add	ip, ip, #102400	; 0x19000
   10ff4:	ldr	pc, [ip, #172]!	; 0xac

00010ff8 <__cxa_atexit@plt>:
   10ff8:	add	ip, pc, #0, 12
   10ffc:	add	ip, ip, #102400	; 0x19000
   11000:	ldr	pc, [ip, #164]!	; 0xa4

00011004 <memset@plt>:
   11004:	add	ip, pc, #0, 12
   11008:	add	ip, ip, #102400	; 0x19000
   1100c:	ldr	pc, [ip, #156]!	; 0x9c

00011010 <__printf_chk@plt>:
   11010:	add	ip, pc, #0, 12
   11014:	add	ip, ip, #102400	; 0x19000
   11018:	ldr	pc, [ip, #148]!	; 0x94

0001101c <fileno@plt>:
   1101c:	add	ip, pc, #0, 12
   11020:	add	ip, ip, #102400	; 0x19000
   11024:	ldr	pc, [ip, #140]!	; 0x8c

00011028 <__fprintf_chk@plt>:
   11028:	add	ip, pc, #0, 12
   1102c:	add	ip, ip, #102400	; 0x19000
   11030:	ldr	pc, [ip, #132]!	; 0x84

00011034 <fclose@plt>:
   11034:	add	ip, pc, #0, 12
   11038:	add	ip, ip, #102400	; 0x19000
   1103c:	ldr	pc, [ip, #124]!	; 0x7c

00011040 <fseeko64@plt>:
   11040:	add	ip, pc, #0, 12
   11044:	add	ip, ip, #102400	; 0x19000
   11048:	ldr	pc, [ip, #116]!	; 0x74

0001104c <setlocale@plt>:
   1104c:	add	ip, pc, #0, 12
   11050:	add	ip, ip, #102400	; 0x19000
   11054:	ldr	pc, [ip, #108]!	; 0x6c

00011058 <strrchr@plt>:
   11058:	add	ip, pc, #0, 12
   1105c:	add	ip, ip, #102400	; 0x19000
   11060:	ldr	pc, [ip, #100]!	; 0x64

00011064 <nl_langinfo@plt>:
   11064:	add	ip, pc, #0, 12
   11068:	add	ip, ip, #102400	; 0x19000
   1106c:	ldr	pc, [ip, #92]!	; 0x5c

00011070 <bindtextdomain@plt>:
   11070:	add	ip, pc, #0, 12
   11074:	add	ip, ip, #102400	; 0x19000
   11078:	ldr	pc, [ip, #84]!	; 0x54

0001107c <strncmp@plt>:
   1107c:	add	ip, pc, #0, 12
   11080:	add	ip, ip, #102400	; 0x19000
   11084:	ldr	pc, [ip, #76]!	; 0x4c

00011088 <abort@plt>:
   11088:	add	ip, pc, #0, 12
   1108c:	add	ip, ip, #102400	; 0x19000
   11090:	ldr	pc, [ip, #68]!	; 0x44

00011094 <close@plt>:
   11094:	add	ip, pc, #0, 12
   11098:	add	ip, ip, #102400	; 0x19000
   1109c:	ldr	pc, [ip, #60]!	; 0x3c

000110a0 <__assert_fail@plt>:
   110a0:	add	ip, pc, #0, 12
   110a4:	add	ip, ip, #102400	; 0x19000
   110a8:	ldr	pc, [ip, #52]!	; 0x34

Disassembly of section .text:

000110b0 <.text>:
   110b0:	mov	fp, #0
   110b4:	mov	lr, #0
   110b8:	pop	{r1}		; (ldr r1, [sp], #4)
   110bc:	mov	r2, sp
   110c0:	push	{r2}		; (str r2, [sp, #-4]!)
   110c4:	push	{r0}		; (str r0, [sp, #-4]!)
   110c8:	ldr	ip, [pc, #16]	; 110e0 <__assert_fail@plt+0x40>
   110cc:	push	{ip}		; (str ip, [sp, #-4]!)
   110d0:	ldr	r0, [pc, #12]	; 110e4 <__assert_fail@plt+0x44>
   110d4:	ldr	r3, [pc, #12]	; 110e8 <__assert_fail@plt+0x48>
   110d8:	bl	10f68 <__libc_start_main@plt>
   110dc:	bl	11088 <abort@plt>
   110e0:	andeq	r8, r1, r4, lsr #7
   110e4:	andeq	r1, r1, r0, ror #8
   110e8:	andeq	r8, r1, r4, asr #6
   110ec:	ldr	r3, [pc, #20]	; 11108 <__assert_fail@plt+0x68>
   110f0:	ldr	r2, [pc, #20]	; 1110c <__assert_fail@plt+0x6c>
   110f4:	add	r3, pc, r3
   110f8:	ldr	r2, [r3, r2]
   110fc:	cmp	r2, #0
   11100:	bxeq	lr
   11104:	b	10f98 <__gmon_start__@plt>
   11108:	andeq	r8, r1, r4, lsl #30
   1110c:	andeq	r0, r0, r0, ror #1
   11110:	ldr	r0, [pc, #24]	; 11130 <__assert_fail@plt+0x90>
   11114:	ldr	r3, [pc, #24]	; 11134 <__assert_fail@plt+0x94>
   11118:	cmp	r3, r0
   1111c:	bxeq	lr
   11120:	ldr	r3, [pc, #16]	; 11138 <__assert_fail@plt+0x98>
   11124:	cmp	r3, #0
   11128:	bxeq	lr
   1112c:	bx	r3
   11130:	andeq	sl, r2, r8, lsr r1
   11134:	andeq	sl, r2, r8, lsr r1
   11138:	andeq	r0, r0, r0
   1113c:	ldr	r0, [pc, #36]	; 11168 <__assert_fail@plt+0xc8>
   11140:	ldr	r1, [pc, #36]	; 1116c <__assert_fail@plt+0xcc>
   11144:	sub	r1, r1, r0
   11148:	asr	r1, r1, #2
   1114c:	add	r1, r1, r1, lsr #31
   11150:	asrs	r1, r1, #1
   11154:	bxeq	lr
   11158:	ldr	r3, [pc, #16]	; 11170 <__assert_fail@plt+0xd0>
   1115c:	cmp	r3, #0
   11160:	bxeq	lr
   11164:	bx	r3
   11168:	andeq	sl, r2, r8, lsr r1
   1116c:	andeq	sl, r2, r8, lsr r1
   11170:	andeq	r0, r0, r0
   11174:	push	{r4, lr}
   11178:	ldr	r4, [pc, #24]	; 11198 <__assert_fail@plt+0xf8>
   1117c:	ldrb	r3, [r4]
   11180:	cmp	r3, #0
   11184:	popne	{r4, pc}
   11188:	bl	11110 <__assert_fail@plt+0x70>
   1118c:	mov	r3, #1
   11190:	strb	r3, [r4]
   11194:	pop	{r4, pc}
   11198:	andeq	sl, r2, r0, ror #2
   1119c:	b	1113c <__assert_fail@plt+0x9c>
   111a0:	push	{fp, lr}
   111a4:	mov	fp, sp
   111a8:	sub	sp, sp, #56	; 0x38
   111ac:	mov	r4, r0
   111b0:	cmp	r0, #0
   111b4:	bne	11410 <__assert_fail@plt+0x370>
   111b8:	movw	r1, #33779	; 0x83f3
   111bc:	mov	r0, #0
   111c0:	mov	r2, #5
   111c4:	movt	r1, #1
   111c8:	bl	10ee4 <dcgettext@plt>
   111cc:	mov	r1, r0
   111d0:	movw	r0, #50304	; 0xc480
   111d4:	movt	r0, #2
   111d8:	ldr	r2, [r0]
   111dc:	mov	r0, #1
   111e0:	bl	11010 <__printf_chk@plt>
   111e4:	movw	r1, #33814	; 0x8416
   111e8:	mov	r0, #0
   111ec:	mov	r2, #5
   111f0:	movt	r1, #1
   111f4:	bl	10ee4 <dcgettext@plt>
   111f8:	movw	r7, #41308	; 0xa15c
   111fc:	movt	r7, #2
   11200:	ldr	r1, [r7]
   11204:	bl	10e3c <fputs_unlocked@plt>
   11208:	movw	r1, #34310	; 0x8606
   1120c:	mov	r0, #0
   11210:	mov	r2, #5
   11214:	movt	r1, #1
   11218:	bl	10ee4 <dcgettext@plt>
   1121c:	ldr	r1, [r7]
   11220:	bl	10e3c <fputs_unlocked@plt>
   11224:	movw	r1, #34355	; 0x8633
   11228:	mov	r0, #0
   1122c:	mov	r2, #5
   11230:	movt	r1, #1
   11234:	bl	10ee4 <dcgettext@plt>
   11238:	ldr	r1, [r7]
   1123c:	bl	10e3c <fputs_unlocked@plt>
   11240:	movw	r1, #34409	; 0x8669
   11244:	mov	r0, #0
   11248:	mov	r2, #5
   1124c:	movt	r1, #1
   11250:	bl	10ee4 <dcgettext@plt>
   11254:	ldr	r1, [r7]
   11258:	bl	10e3c <fputs_unlocked@plt>
   1125c:	movw	r1, #34782	; 0x87de
   11260:	mov	r0, #0
   11264:	mov	r2, #5
   11268:	movt	r1, #1
   1126c:	bl	10ee4 <dcgettext@plt>
   11270:	ldr	r1, [r7]
   11274:	bl	10e3c <fputs_unlocked@plt>
   11278:	movw	r1, #35207	; 0x8987
   1127c:	mov	r0, #0
   11280:	mov	r2, #5
   11284:	movt	r1, #1
   11288:	bl	10ee4 <dcgettext@plt>
   1128c:	ldr	r1, [r7]
   11290:	bl	10e3c <fputs_unlocked@plt>
   11294:	movw	r1, #35618	; 0x8b22
   11298:	mov	r0, #0
   1129c:	mov	r2, #5
   112a0:	movt	r1, #1
   112a4:	bl	10ee4 <dcgettext@plt>
   112a8:	ldr	r1, [r7]
   112ac:	bl	10e3c <fputs_unlocked@plt>
   112b0:	movw	r0, #39056	; 0x9890
   112b4:	mov	r2, #48	; 0x30
   112b8:	mov	r6, sp
   112bc:	movw	r5, #36090	; 0x8cfa
   112c0:	movt	r0, #1
   112c4:	movt	r5, #1
   112c8:	add	r1, r0, #32
   112cc:	add	r3, r0, #16
   112d0:	vld1.64	{d18-d19}, [r0], r2
   112d4:	vld1.64	{d16-d17}, [r1]
   112d8:	vld1.64	{d20-d21}, [r3]
   112dc:	add	r1, r6, #32
   112e0:	vldr	d22, [r0]
   112e4:	add	r0, r6, #16
   112e8:	vst1.64	{d16-d17}, [r1]
   112ec:	movw	r1, #36505	; 0x8e99
   112f0:	vst1.64	{d20-d21}, [r0]
   112f4:	mov	r0, r6
   112f8:	vst1.64	{d18-d19}, [r0], r2
   112fc:	movt	r1, #1
   11300:	vstr	d22, [r0]
   11304:	mov	r0, r5
   11308:	bl	10e54 <strcmp@plt>
   1130c:	cmp	r0, #0
   11310:	ldrne	r1, [r6, #8]!
   11314:	cmpne	r1, #0
   11318:	bne	11304 <__assert_fail@plt+0x264>
   1131c:	ldr	r6, [r6, #4]
   11320:	movw	r1, #36600	; 0x8ef8
   11324:	mov	r0, #0
   11328:	mov	r2, #5
   1132c:	movt	r1, #1
   11330:	bl	10ee4 <dcgettext@plt>
   11334:	movw	r2, #36127	; 0x8d1f
   11338:	movw	r3, #36623	; 0x8f0f
   1133c:	mov	r1, r0
   11340:	mov	r0, #1
   11344:	movt	r2, #1
   11348:	movt	r3, #1
   1134c:	bl	11010 <__printf_chk@plt>
   11350:	cmp	r6, #0
   11354:	mov	r0, #5
   11358:	mov	r1, #0
   1135c:	moveq	r6, r5
   11360:	bl	1104c <setlocale@plt>
   11364:	cmp	r0, #0
   11368:	beq	113a0 <__assert_fail@plt+0x300>
   1136c:	movw	r1, #36663	; 0x8f37
   11370:	mov	r2, #3
   11374:	movt	r1, #1
   11378:	bl	1107c <strncmp@plt>
   1137c:	cmp	r0, #0
   11380:	beq	113a0 <__assert_fail@plt+0x300>
   11384:	movw	r1, #36667	; 0x8f3b
   11388:	mov	r0, #0
   1138c:	mov	r2, #5
   11390:	movt	r1, #1
   11394:	bl	10ee4 <dcgettext@plt>
   11398:	ldr	r1, [r7]
   1139c:	bl	10e3c <fputs_unlocked@plt>
   113a0:	movw	r1, #36738	; 0x8f82
   113a4:	mov	r0, #0
   113a8:	mov	r2, #5
   113ac:	movt	r1, #1
   113b0:	bl	10ee4 <dcgettext@plt>
   113b4:	movw	r2, #36623	; 0x8f0f
   113b8:	mov	r1, r0
   113bc:	mov	r0, #1
   113c0:	mov	r3, r5
   113c4:	movt	r2, #1
   113c8:	bl	11010 <__printf_chk@plt>
   113cc:	movw	r1, #36765	; 0x8f9d
   113d0:	mov	r0, #0
   113d4:	mov	r2, #5
   113d8:	movt	r1, #1
   113dc:	bl	10ee4 <dcgettext@plt>
   113e0:	movw	r3, #36815	; 0x8fcf
   113e4:	mov	r1, r0
   113e8:	movw	r0, #36533	; 0x8eb5
   113ec:	cmp	r6, r5
   113f0:	mov	r2, r6
   113f4:	movt	r0, #1
   113f8:	movt	r3, #1
   113fc:	moveq	r3, r0
   11400:	mov	r0, #1
   11404:	bl	11010 <__printf_chk@plt>
   11408:	mov	r0, r4
   1140c:	bl	10fbc <exit@plt>
   11410:	movw	r0, #41296	; 0xa150
   11414:	movw	r1, #33740	; 0x83cc
   11418:	mov	r2, #5
   1141c:	movt	r0, #2
   11420:	movt	r1, #1
   11424:	ldr	r5, [r0]
   11428:	mov	r0, #0
   1142c:	bl	10ee4 <dcgettext@plt>
   11430:	mov	r2, r0
   11434:	movw	r0, #50304	; 0xc480
   11438:	mov	r1, #1
   1143c:	movt	r0, #2
   11440:	ldr	r3, [r0]
   11444:	mov	r0, r5
   11448:	bl	11028 <__fprintf_chk@plt>
   1144c:	mov	r0, r4
   11450:	bl	10fbc <exit@plt>
   11454:	nop	{0}
   11458:	nop	{0}
   1145c:	nop	{0}
   11460:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   11464:	add	fp, sp, #28
   11468:	sub	sp, sp, #420	; 0x1a4
   1146c:	mov	r4, r0
   11470:	ldr	r0, [r1]
   11474:	mov	r9, r1
   11478:	bl	143e0 <__assert_fail@plt+0x3340>
   1147c:	movw	r1, #36815	; 0x8fcf
   11480:	mov	r0, #6
   11484:	movt	r1, #1
   11488:	bl	1104c <setlocale@plt>
   1148c:	movw	r6, #36131	; 0x8d23
   11490:	movw	r1, #36093	; 0x8cfd
   11494:	movt	r6, #1
   11498:	movt	r1, #1
   1149c:	mov	r0, r6
   114a0:	bl	11070 <bindtextdomain@plt>
   114a4:	mov	r0, r6
   114a8:	bl	10efc <textdomain@plt>
   114ac:	movw	r0, #17036	; 0x428c
   114b0:	movt	r0, #1
   114b4:	bl	183a8 <__assert_fail@plt+0x7308>
   114b8:	movw	r6, #36117	; 0x8d15
   114bc:	movw	r7, #38944	; 0x9820
   114c0:	movw	r8, #36125	; 0x8d1d
   114c4:	mov	r5, #0
   114c8:	mov	sl, #1
   114cc:	movt	r6, #1
   114d0:	movt	r7, #1
   114d4:	movt	r8, #1
   114d8:	b	114e8 <__assert_fail@plt+0x448>
   114dc:	movw	r0, #50288	; 0xc470
   114e0:	movt	r0, #2
   114e4:	strb	sl, [r0]
   114e8:	mov	r0, r4
   114ec:	mov	r1, r9
   114f0:	mov	r2, r6
   114f4:	mov	r3, r7
   114f8:	str	r5, [sp]
   114fc:	bl	10fa4 <getopt_long@plt>
   11500:	cmp	r0, #64	; 0x40
   11504:	ble	11638 <__assert_fail@plt+0x598>
   11508:	sub	r0, r0, #65	; 0x41
   1150c:	cmp	r0, #51	; 0x33
   11510:	bhi	12980 <__assert_fail@plt+0x18e0>
   11514:	add	r1, pc, #0
   11518:	ldr	pc, [r1, r0, lsl #2]
   1151c:	andeq	r1, r1, ip, ror #11
   11520:	andeq	r2, r1, r0, lsl #19
   11524:	ldrdeq	r1, [r1], -ip
   11528:	andeq	r2, r1, r0, lsl #19
   1152c:	andeq	r2, r1, r0, lsl #19
   11530:	andeq	r2, r1, r0, lsl #19
   11534:	andeq	r2, r1, r0, lsl #19
   11538:	andeq	r2, r1, r0, lsl #19
   1153c:	andeq	r2, r1, r0, lsl #19
   11540:	andeq	r2, r1, r0, lsl #19
   11544:	andeq	r2, r1, r0, lsl #19
   11548:	andeq	r2, r1, r0, lsl #19
   1154c:	andeq	r2, r1, r0, lsl #19
   11550:	andeq	r2, r1, r0, lsl #19
   11554:	andeq	r2, r1, r0, lsl #19
   11558:	andeq	r2, r1, r0, lsl #19
   1155c:	andeq	r2, r1, r0, lsl #19
   11560:	andeq	r2, r1, r0, lsl #19
   11564:	andeq	r2, r1, r0, lsl #19
   11568:	andeq	r2, r1, r0, lsl #19
   1156c:	andeq	r2, r1, r0, lsl #19
   11570:	andeq	r2, r1, r0, lsl #19
   11574:	andeq	r2, r1, r0, lsl #19
   11578:	andeq	r2, r1, r0, lsl #19
   1157c:	andeq	r2, r1, r0, lsl #19
   11580:	andeq	r2, r1, r0, lsl #19
   11584:	andeq	r2, r1, r0, lsl #19
   11588:	andeq	r2, r1, r0, lsl #19
   1158c:	andeq	r2, r1, r0, lsl #19
   11590:	andeq	r2, r1, r0, lsl #19
   11594:	andeq	r2, r1, r0, lsl #19
   11598:	andeq	r2, r1, r0, lsl #19
   1159c:	andeq	r2, r1, r0, lsl #19
   115a0:	andeq	r2, r1, r0, lsl #19
   115a4:	ldrdeq	r1, [r1], -ip
   115a8:	andeq	r1, r1, r8, lsr #12
   115ac:	andeq	r2, r1, r0, lsl #19
   115b0:	andeq	r2, r1, r0, lsl #19
   115b4:	andeq	r2, r1, r0, lsl #19
   115b8:	andeq	r2, r1, r0, lsl #19
   115bc:	andeq	r2, r1, r0, lsl #19
   115c0:	andeq	r2, r1, r0, lsl #19
   115c4:	andeq	r2, r1, r0, lsl #19
   115c8:	andeq	r2, r1, r0, lsl #19
   115cc:	andeq	r2, r1, r0, lsl #19
   115d0:	andeq	r2, r1, r0, lsl #19
   115d4:	andeq	r2, r1, r0, lsl #19
   115d8:	andeq	r2, r1, r0, lsl #19
   115dc:	andeq	r2, r1, r0, lsl #19
   115e0:	andeq	r2, r1, r0, lsl #19
   115e4:	andeq	r1, r1, r8, lsl r6
   115e8:	andeq	r1, r1, r8, lsl #12
   115ec:	mov	r0, #3
   115f0:	mov	r1, r8
   115f4:	bl	1104c <setlocale@plt>
   115f8:	mov	r0, #0
   115fc:	mov	r1, r8
   11600:	bl	1104c <setlocale@plt>
   11604:	b	114e8 <__assert_fail@plt+0x448>
   11608:	movw	r0, #50288	; 0xc470
   1160c:	movt	r0, #2
   11610:	strb	sl, [r0, #3]
   11614:	b	114e8 <__assert_fail@plt+0x448>
   11618:	movw	r0, #50288	; 0xc470
   1161c:	movt	r0, #2
   11620:	strb	sl, [r0, #2]
   11624:	b	114e8 <__assert_fail@plt+0x448>
   11628:	movw	r0, #50288	; 0xc470
   1162c:	movt	r0, #2
   11630:	strb	sl, [r0, #1]
   11634:	b	114e8 <__assert_fail@plt+0x448>
   11638:	cmn	r0, #1
   1163c:	bne	12808 <__assert_fail@plt+0x1768>
   11640:	movw	sl, #41288	; 0xa148
   11644:	movw	r8, #50288	; 0xc470
   11648:	mov	r5, #2
   1164c:	movt	sl, #2
   11650:	movt	r8, #2
   11654:	ldr	r0, [sl]
   11658:	ldrb	r1, [r8, #2]
   1165c:	sub	r7, r4, r0
   11660:	sub	r0, r7, #2
   11664:	clz	r0, r0
   11668:	lsr	r3, r0, #5
   1166c:	ldrb	r0, [r8, #1]
   11670:	eor	r2, r0, #1
   11674:	cmp	r0, #0
   11678:	and	r2, r3, r2
   1167c:	movwne	r5, #1
   11680:	cmp	r1, #0
   11684:	strb	r2, [r8, #4]
   11688:	movwne	r5, #2
   1168c:	mov	r2, #2
   11690:	teq	r0, r1
   11694:	movwne	r2, #1
   11698:	cmp	r7, r2
   1169c:	blt	12868 <__assert_fail@plt+0x17c8>
   116a0:	cmp	r5, r7
   116a4:	str	r3, [sp, #36]	; 0x24
   116a8:	blt	1289c <__assert_fail@plt+0x17fc>
   116ac:	mov	r0, #24
   116b0:	bl	16a98 <__assert_fail@plt+0x59f8>
   116b4:	mov	r4, #0
   116b8:	str	r0, [sp, #112]	; 0x70
   116bc:	str	r0, [sp, #116]	; 0x74
   116c0:	add	r1, sp, #112	; 0x70
   116c4:	str	r4, [r0, #4]
   116c8:	ldr	r0, [sl]
   116cc:	ldr	r0, [r9, r0, lsl #2]
   116d0:	bl	12ab4 <__assert_fail@plt+0x1a14>
   116d4:	mov	r6, #1
   116d8:	cmp	r0, #0
   116dc:	beq	12790 <__assert_fail@plt+0x16f0>
   116e0:	cmp	r7, #2
   116e4:	bne	11720 <__assert_fail@plt+0x680>
   116e8:	mov	r0, #24
   116ec:	bl	16a98 <__assert_fail@plt+0x59f8>
   116f0:	mov	r1, #0
   116f4:	str	r0, [sp, #72]	; 0x48
   116f8:	str	r0, [sp, #76]	; 0x4c
   116fc:	add	r4, sp, #72	; 0x48
   11700:	str	r1, [r0, #4]
   11704:	ldr	r0, [sl]
   11708:	mov	r1, r4
   1170c:	add	r0, r9, r0, lsl #2
   11710:	ldr	r0, [r0, #4]
   11714:	bl	12ab4 <__assert_fail@plt+0x1a14>
   11718:	cmp	r0, #0
   1171c:	beq	12790 <__assert_fail@plt+0x16f0>
   11720:	add	r0, sp, #112	; 0x70
   11724:	str	r7, [sp, #32]
   11728:	bl	13f80 <__assert_fail@plt+0x2ee0>
   1172c:	ldrb	r0, [r8]
   11730:	mvn	sl, #0
   11734:	str	r4, [sp, #68]	; 0x44
   11738:	cmp	r0, #1
   1173c:	bne	117bc <__assert_fail@plt+0x71c>
   11740:	add	r5, sp, #152	; 0x98
   11744:	mov	r1, #0
   11748:	mov	r2, #256	; 0x100
   1174c:	mov	r6, #0
   11750:	mov	r7, #256	; 0x100
   11754:	mov	r0, r5
   11758:	bl	11004 <memset@plt>
   1175c:	mvn	r0, #1
   11760:	mov	r1, #0
   11764:	str	sl, [sp, #124]	; 0x7c
   11768:	str	r0, [sp, #120]	; 0x78
   1176c:	add	r0, sp, #112	; 0x70
   11770:	bl	13a58 <__assert_fail@plt+0x29b8>
   11774:	cmn	r0, #1
   11778:	beq	117b4 <__assert_fail@plt+0x714>
   1177c:	mov	r7, #256	; 0x100
   11780:	mov	r4, #1
   11784:	add	r6, sp, #112	; 0x70
   11788:	ldrb	r1, [r5, r0]
   1178c:	strb	r4, [r5, r0]
   11790:	eor	r0, r1, #1
   11794:	mov	r1, #0
   11798:	sub	r7, r7, r0
   1179c:	mov	r0, r6
   117a0:	bl	13a58 <__assert_fail@plt+0x29b8>
   117a4:	cmn	r0, #1
   117a8:	bne	11788 <__assert_fail@plt+0x6e8>
   117ac:	ldr	r4, [sp, #68]	; 0x44
   117b0:	asr	r6, r7, #31
   117b4:	str	r7, [sp, #128]	; 0x80
   117b8:	str	r6, [sp, #132]	; 0x84
   117bc:	ldr	r0, [sp, #136]	; 0x88
   117c0:	cmp	r0, #0
   117c4:	bne	12994 <__assert_fail@plt+0x18f4>
   117c8:	cmp	r4, #0
   117cc:	beq	11c64 <__assert_fail@plt+0xbc4>
   117d0:	ldr	r5, [sp, #128]	; 0x80
   117d4:	ldr	r9, [sp, #132]	; 0x84
   117d8:	mov	r0, r4
   117dc:	bl	13f80 <__assert_fail@plt+0x2ee0>
   117e0:	mov	r0, r4
   117e4:	ldr	r2, [r0, #16]!
   117e8:	ldr	r1, [r0, #4]
   117ec:	str	r0, [sp, #52]	; 0x34
   117f0:	subs	r0, r5, r2
   117f4:	sbcs	r0, r9, r1
   117f8:	bcs	11b2c <__assert_fail@plt+0xa8c>
   117fc:	mov	r5, r2
   11800:	mov	r9, r1
   11804:	ldr	r0, [r4, #24]
   11808:	cmp	r0, #2
   1180c:	bcs	11b84 <__assert_fail@plt+0xae4>
   11810:	ldrb	r1, [r8, #4]
   11814:	cmp	r1, #0
   11818:	beq	11b60 <__assert_fail@plt+0xac0>
   1181c:	ldrb	r0, [r4, #32]
   11820:	cmp	r0, #0
   11824:	bne	129b4 <__assert_fail@plt+0x1914>
   11828:	ldrb	r0, [r4, #34]	; 0x22
   1182c:	cmp	r0, #0
   11830:	bne	129c0 <__assert_fail@plt+0x1920>
   11834:	add	r0, sp, #112	; 0x70
   11838:	ldr	r2, [r4, #4]
   1183c:	add	r0, r0, #16
   11840:	str	r0, [sp, #48]	; 0x30
   11844:	ldrd	r6, [r0]
   11848:	ldrb	r0, [r8]
   1184c:	cmp	r0, #0
   11850:	bne	11ad0 <__assert_fail@plt+0xa30>
   11854:	ldrb	r0, [r4, #33]	; 0x21
   11858:	cmp	r0, #0
   1185c:	beq	11ad0 <__assert_fail@plt+0xa30>
   11860:	ldr	r0, [sp, #116]	; 0x74
   11864:	str	r7, [sp, #16]
   11868:	str	r2, [sp, #20]
   1186c:	str	r9, [sp, #24]
   11870:	str	r5, [sp, #28]
   11874:	str	r0, [sp, #8]
   11878:	bl	10fb0 <__ctype_b_loc@plt>
   1187c:	ldr	r0, [r0]
   11880:	vmov.i32	q8, #0	; 0x00000000
   11884:	mov	r1, #0
   11888:	vmov.i16	d20, #1	; 0x0001
   1188c:	vmov.i32	q9, #0	; 0x00000000
   11890:	add	r2, r0, r1
   11894:	add	r1, r1, #8
   11898:	vld1.16	{d21}, [r2]
   1189c:	cmp	r1, #512	; 0x200
   118a0:	vshr.u16	d22, d21, #9
   118a4:	vshr.u16	d21, d21, #8
   118a8:	vand	d22, d22, d20
   118ac:	vand	d21, d21, d20
   118b0:	vaddw.u16	q9, q9, d22
   118b4:	vaddw.u16	q8, q8, d21
   118b8:	bne	11890 <__assert_fail@plt+0x7f0>
   118bc:	vext.8	q10, q8, q8, #8
   118c0:	vext.8	q11, q9, q8, #8
   118c4:	mvn	r0, #1
   118c8:	str	sl, [sp, #124]	; 0x7c
   118cc:	mov	r9, #1
   118d0:	mov	r8, #1
   118d4:	str	r6, [sp, #12]
   118d8:	vadd.i32	q8, q8, q10
   118dc:	vadd.i32	q9, q9, q11
   118e0:	str	r0, [sp, #120]	; 0x78
   118e4:	str	r0, [r4, #8]!
   118e8:	vdup.32	q10, d16[1]
   118ec:	vdup.32	q11, d18[1]
   118f0:	str	r4, [sp, #60]	; 0x3c
   118f4:	str	sl, [r4, #4]
   118f8:	vadd.i32	q8, q8, q10
   118fc:	vadd.i32	q9, q9, q11
   11900:	vmov.32	r0, d16[0]
   11904:	str	r0, [sp, #44]	; 0x2c
   11908:	vmov.32	r0, d18[0]
   1190c:	str	r0, [sp, #40]	; 0x28
   11910:	add	r0, sp, #112	; 0x70
   11914:	add	r0, r0, #8
   11918:	str	r0, [sp, #56]	; 0x38
   1191c:	add	r0, sp, #112	; 0x70
   11920:	add	r1, sp, #152	; 0x98
   11924:	bl	13a58 <__assert_fail@plt+0x29b8>
   11928:	mov	r5, r0
   1192c:	ldr	r0, [sp, #68]	; 0x44
   11930:	sub	r1, fp, #36	; 0x24
   11934:	bl	13a58 <__assert_fail@plt+0x29b8>
   11938:	ldr	sl, [fp, #-36]	; 0xffffffdc
   1193c:	tst	r9, #1
   11940:	cmpne	sl, #2
   11944:	bne	11970 <__assert_fail@plt+0x8d0>
   11948:	cmp	sl, #2
   1194c:	bne	11994 <__assert_fail@plt+0x8f4>
   11950:	ldr	r1, [sp, #56]	; 0x38
   11954:	mvn	ip, #0
   11958:	mvn	lr, #1
   1195c:	ldrd	r2, [r1]
   11960:	ldr	r1, [sp, #60]	; 0x3c
   11964:	ldr	r4, [r1]
   11968:	ldr	r1, [r1, #4]
   1196c:	b	11a3c <__assert_fail@plt+0x99c>
   11970:	ldr	r4, [sp, #152]	; 0x98
   11974:	str	r0, [sp, #64]	; 0x40
   11978:	mov	r0, r5
   1197c:	mvn	lr, #1
   11980:	subs	r2, r4, #2
   11984:	movwne	r2, #1
   11988:	tst	r8, r2
   1198c:	bne	119a4 <__assert_fail@plt+0x904>
   11990:	b	12988 <__assert_fail@plt+0x18e8>
   11994:	ldr	r4, [sp, #152]	; 0x98
   11998:	str	r0, [sp, #64]	; 0x40
   1199c:	mov	r0, r5
   119a0:	mvn	lr, #1
   119a4:	ldr	r2, [sp, #116]	; 0x74
   119a8:	ldr	r1, [sp, #56]	; 0x38
   119ac:	ldr	r6, [sp, #68]	; 0x44
   119b0:	mvn	ip, #0
   119b4:	ldr	r2, [r2, #4]
   119b8:	str	r2, [sp, #116]	; 0x74
   119bc:	adds	r2, lr, #1
   119c0:	adc	r3, ip, #0
   119c4:	cmp	r4, #1
   119c8:	strd	r2, [r1]
   119cc:	ldr	r7, [r6, #4]
   119d0:	ldr	r7, [r7, #4]
   119d4:	str	r7, [r6, #4]
   119d8:	ldr	r7, [sp, #60]	; 0x3c
   119dc:	strd	r2, [r7]
   119e0:	ldr	r6, [sp, #48]	; 0x30
   119e4:	ldr	r1, [sp, #40]	; 0x28
   119e8:	ldr	r5, [sp, #44]	; 0x2c
   119ec:	ldm	r6, {r4, r9}
   119f0:	mov	r7, r1
   119f4:	moveq	r7, r5
   119f8:	sub	r7, r7, #1
   119fc:	subs	r4, r4, r7
   11a00:	sbc	r7, r9, #0
   11a04:	cmp	sl, #1
   11a08:	stm	r6, {r4, r7}
   11a0c:	moveq	r1, r5
   11a10:	mov	r5, r0
   11a14:	ldr	r6, [sp, #52]	; 0x34
   11a18:	sub	r1, r1, #1
   11a1c:	ldm	r6, {r4, r7}
   11a20:	subs	r4, r4, r1
   11a24:	sbc	r1, r7, #0
   11a28:	str	r4, [r6]
   11a2c:	mov	r4, r2
   11a30:	str	r1, [r6, #4]
   11a34:	mov	r1, r3
   11a38:	ldr	r0, [sp, #64]	; 0x40
   11a3c:	adds	r6, lr, #1
   11a40:	adc	r7, ip, #0
   11a44:	cmn	r5, #1
   11a48:	eorne	r5, r4, r6
   11a4c:	eorne	r1, r1, r7
   11a50:	orrne	r1, r5, r1
   11a54:	clzne	r1, r1
   11a58:	lsrne	r9, r1, #5
   11a5c:	eorne	r1, r2, r6
   11a60:	eorne	r2, r3, r7
   11a64:	orrne	r1, r1, r2
   11a68:	clzne	r1, r1
   11a6c:	lsrne	r8, r1, #5
   11a70:	cmnne	r0, #1
   11a74:	bne	1191c <__assert_fail@plt+0x87c>
   11a78:	ldr	r0, [sp, #48]	; 0x30
   11a7c:	movw	r8, #50288	; 0xc470
   11a80:	movt	r8, #2
   11a84:	ldrd	r6, [r0]
   11a88:	ldr	r0, [sp, #12]
   11a8c:	subs	r0, r0, r6
   11a90:	ldr	r0, [sp, #16]
   11a94:	sbcs	r0, r0, r7
   11a98:	bcc	129e4 <__assert_fail@plt+0x1944>
   11a9c:	ldr	r0, [sp, #52]	; 0x34
   11aa0:	ldm	r0, {r5, r9}
   11aa4:	ldr	r0, [sp, #28]
   11aa8:	subs	r0, r0, r5
   11aac:	ldr	r0, [sp, #24]
   11ab0:	sbcs	r0, r0, r9
   11ab4:	bcc	129e4 <__assert_fail@plt+0x1944>
   11ab8:	ldr	r0, [sp, #8]
   11abc:	ldr	r4, [sp, #68]	; 0x44
   11ac0:	ldr	r2, [sp, #20]
   11ac4:	mvn	sl, #0
   11ac8:	str	r0, [sp, #116]	; 0x74
   11acc:	str	r2, [r4, #4]
   11ad0:	subs	r0, r5, r6
   11ad4:	sbcs	r0, r9, r7
   11ad8:	bcs	11bf0 <__assert_fail@plt+0xb50>
   11adc:	ldrb	r0, [r8, #3]
   11ae0:	cmp	r0, #0
   11ae4:	bne	11bf0 <__assert_fail@plt+0xb50>
   11ae8:	orrs	r0, r5, r9
   11aec:	beq	12a08 <__assert_fail@plt+0x1968>
   11af0:	ldrb	r0, [r8, #4]
   11af4:	cmp	r0, #0
   11af8:	beq	12a14 <__assert_fail@plt+0x1974>
   11afc:	ldr	r0, [r2]
   11b00:	cmp	r0, #4
   11b04:	bhi	12a04 <__assert_fail@plt+0x1964>
   11b08:	add	r1, pc, #0
   11b0c:	ldr	pc, [r1, r0, lsl #2]
   11b10:	andeq	r1, r1, r4, lsr #22
   11b14:	muleq	r1, r0, fp
   11b18:	andeq	r2, r1, r4, lsr sl
   11b1c:	andeq	r2, r1, r4, lsl #20
   11b20:	andeq	r1, r1, r4, lsr #22
   11b24:	add	r0, r2, #8
   11b28:	b	11b94 <__assert_fail@plt+0xaf4>
   11b2c:	ldr	r0, [r4, #24]
   11b30:	cmp	r0, #1
   11b34:	bne	11b74 <__assert_fail@plt+0xad4>
   11b38:	subs	r0, r5, r2
   11b3c:	ldr	r2, [r4, #28]
   11b40:	sbc	r1, r9, r1
   11b44:	strd	r0, [r2, #16]
   11b48:	ldr	r0, [sp, #52]	; 0x34
   11b4c:	stm	r0, {r5, r9}
   11b50:	ldr	r0, [r4, #24]
   11b54:	cmp	r0, #2
   11b58:	bcc	11810 <__assert_fail@plt+0x770>
   11b5c:	b	11b84 <__assert_fail@plt+0xae4>
   11b60:	cmp	r0, #0
   11b64:	beq	11c64 <__assert_fail@plt+0xbc4>
   11b68:	movw	r1, #38291	; 0x9593
   11b6c:	movt	r1, #1
   11b70:	b	129c8 <__assert_fail@plt+0x1928>
   11b74:	mov	r5, r2
   11b78:	mov	r9, r1
   11b7c:	cmp	r0, #2
   11b80:	bcc	11810 <__assert_fail@plt+0x770>
   11b84:	movw	r1, #37922	; 0x9422
   11b88:	movt	r1, #1
   11b8c:	b	129c8 <__assert_fail@plt+0x1928>
   11b90:	add	r0, r2, #9
   11b94:	ldrb	r4, [r0]
   11b98:	mov	r0, #24
   11b9c:	bl	16a98 <__assert_fail@plt+0x59f8>
   11ba0:	mov	r2, #4
   11ba4:	mov	r1, #0
   11ba8:	str	r2, [r0]
   11bac:	str	r1, [r0, #4]
   11bb0:	strb	r4, [r0, #8]
   11bb4:	subs	r2, r6, r5
   11bb8:	ldr	r4, [sp, #68]	; 0x44
   11bbc:	sbc	r3, r7, r9
   11bc0:	strd	r2, [r0, #16]
   11bc4:	ldr	r1, [r4, #4]
   11bc8:	cmp	r1, #0
   11bcc:	beq	12a40 <__assert_fail@plt+0x19a0>
   11bd0:	str	r0, [r1, #4]
   11bd4:	str	r0, [r4, #4]
   11bd8:	ldr	r0, [sp, #48]	; 0x30
   11bdc:	ldrd	r6, [r0]
   11be0:	ldr	r0, [sp, #52]	; 0x34
   11be4:	mov	r5, r6
   11be8:	mov	r9, r7
   11bec:	strd	r6, [r0]
   11bf0:	ldrb	r0, [r8]
   11bf4:	cmp	r0, #1
   11bf8:	bne	11c64 <__assert_fail@plt+0xbc4>
   11bfc:	ldrb	r0, [sp, #145]	; 0x91
   11c00:	cmp	r0, #0
   11c04:	beq	11c64 <__assert_fail@plt+0xbc4>
   11c08:	eor	r0, r5, r6
   11c0c:	eor	r1, r9, r7
   11c10:	orrs	r0, r0, r1
   11c14:	bne	11c58 <__assert_fail@plt+0xbb8>
   11c18:	mvn	r0, #1
   11c1c:	mov	r1, #0
   11c20:	str	r0, [r4, #8]
   11c24:	mov	r0, r4
   11c28:	str	sl, [r4, #12]
   11c2c:	bl	13a58 <__assert_fail@plt+0x29b8>
   11c30:	cmn	r0, #1
   11c34:	beq	11c58 <__assert_fail@plt+0xbb8>
   11c38:	mov	r5, r0
   11c3c:	mov	r0, r4
   11c40:	mov	r1, #0
   11c44:	bl	13a58 <__assert_fail@plt+0x29b8>
   11c48:	cmn	r0, #1
   11c4c:	beq	11c64 <__assert_fail@plt+0xbc4>
   11c50:	cmp	r0, r5
   11c54:	beq	11c3c <__assert_fail@plt+0xb9c>
   11c58:	movw	r1, #38184	; 0x9528
   11c5c:	movt	r1, #1
   11c60:	b	129c8 <__assert_fail@plt+0x1928>
   11c64:	movw	r0, #41304	; 0xa158
   11c68:	mov	r1, #2
   11c6c:	movt	r0, #2
   11c70:	ldr	r0, [r0]
   11c74:	bl	1437c <__assert_fail@plt+0x32dc>
   11c78:	ldr	r1, [sp, #32]
   11c7c:	ldrb	r0, [r8, #2]
   11c80:	cmp	r1, #1
   11c84:	bne	11e04 <__assert_fail@plt+0xd64>
   11c88:	cmp	r0, #0
   11c8c:	beq	11e04 <__assert_fail@plt+0xd64>
   11c90:	ldrb	r5, [r8]
   11c94:	mvn	r0, #1
   11c98:	mov	r1, #0
   11c9c:	str	sl, [sp, #124]	; 0x7c
   11ca0:	str	r0, [sp, #120]	; 0x78
   11ca4:	add	r0, sp, #112	; 0x70
   11ca8:	bl	13a58 <__assert_fail@plt+0x29b8>
   11cac:	cmn	r0, #1
   11cb0:	beq	11cdc <__assert_fail@plt+0xc3c>
   11cb4:	movw	r6, #41328	; 0xa170
   11cb8:	mov	r7, #1
   11cbc:	add	r4, sp, #112	; 0x70
   11cc0:	movt	r6, #2
   11cc4:	strb	r7, [r6, r0]
   11cc8:	mov	r0, r4
   11ccc:	mov	r1, #0
   11cd0:	bl	13a58 <__assert_fail@plt+0x29b8>
   11cd4:	cmn	r0, #1
   11cd8:	bne	11cc4 <__assert_fail@plt+0xc24>
   11cdc:	cmp	r5, #0
   11ce0:	beq	11df4 <__assert_fail@plt+0xd54>
   11ce4:	movw	r1, #41328	; 0xa170
   11ce8:	vmov.i8	q8, #1	; 0x01
   11cec:	mov	r5, #224	; 0xe0
   11cf0:	movt	r1, #2
   11cf4:	add	r2, r1, #48	; 0x30
   11cf8:	add	r3, r1, #32
   11cfc:	add	r7, r1, #16
   11d00:	mov	r6, r1
   11d04:	add	r0, r1, #64	; 0x40
   11d08:	add	r4, r1, #80	; 0x50
   11d0c:	vld1.64	{d18-d19}, [r7 :128]
   11d10:	vld1.64	{d20-d21}, [r3 :128]
   11d14:	vld1.64	{d22-d23}, [r2 :128]
   11d18:	vld1.64	{d24-d25}, [r0 :128]
   11d1c:	vld1.8	{d26-d27}, [r6 :128], r5
   11d20:	add	r5, r1, #96	; 0x60
   11d24:	veor	q9, q9, q8
   11d28:	veor	q10, q10, q8
   11d2c:	veor	q11, q11, q8
   11d30:	veor	q12, q12, q8
   11d34:	vst1.64	{d18-d19}, [r7 :128]
   11d38:	vst1.64	{d20-d21}, [r3 :128]
   11d3c:	vst1.64	{d22-d23}, [r2 :128]
   11d40:	add	r3, r1, #128	; 0x80
   11d44:	add	r7, r1, #112	; 0x70
   11d48:	add	r2, r1, #144	; 0x90
   11d4c:	vld1.64	{d18-d19}, [r4 :128]
   11d50:	vld1.64	{d20-d21}, [r5 :128]
   11d54:	vld1.64	{d22-d23}, [r7 :128]
   11d58:	vld1.64	{d28-d29}, [r3 :128]
   11d5c:	vld1.64	{d30-d31}, [r2 :128]
   11d60:	vst1.64	{d24-d25}, [r0 :128]
   11d64:	mov	r0, r1
   11d68:	veor	q9, q9, q8
   11d6c:	veor	q10, q10, q8
   11d70:	veor	q11, q11, q8
   11d74:	veor	q14, q14, q8
   11d78:	veor	q15, q15, q8
   11d7c:	vst1.64	{d18-d19}, [r4 :128]
   11d80:	vst1.64	{d20-d21}, [r5 :128]
   11d84:	vst1.64	{d22-d23}, [r7 :128]
   11d88:	vst1.64	{d28-d29}, [r3 :128]
   11d8c:	mov	r3, #240	; 0xf0
   11d90:	veor	q9, q13, q8
   11d94:	vst1.8	{d18-d19}, [r0 :128], r3
   11d98:	vst1.64	{d30-d31}, [r2 :128]
   11d9c:	add	r2, r1, #160	; 0xa0
   11da0:	vld1.64	{d18-d19}, [r2 :128]
   11da4:	veor	q9, q9, q8
   11da8:	vst1.64	{d18-d19}, [r2 :128]
   11dac:	add	r2, r1, #176	; 0xb0
   11db0:	vld1.64	{d18-d19}, [r2 :128]
   11db4:	veor	q9, q9, q8
   11db8:	vst1.64	{d18-d19}, [r2 :128]
   11dbc:	add	r2, r1, #192	; 0xc0
   11dc0:	add	r1, r1, #208	; 0xd0
   11dc4:	vld1.64	{d18-d19}, [r2 :128]
   11dc8:	veor	q9, q9, q8
   11dcc:	vst1.64	{d18-d19}, [r2 :128]
   11dd0:	vld1.64	{d18-d19}, [r1 :128]
   11dd4:	veor	q9, q9, q8
   11dd8:	vst1.64	{d18-d19}, [r1 :128]
   11ddc:	vld1.64	{d18-d19}, [r6 :128]
   11de0:	veor	q9, q9, q8
   11de4:	vst1.64	{d18-d19}, [r6 :128]
   11de8:	vld1.64	{d18-d19}, [r0 :128]
   11dec:	veor	q8, q9, q8
   11df0:	vst1.64	{d16-d17}, [r0 :128]
   11df4:	movw	r0, #14636	; 0x392c
   11df8:	movt	r0, #1
   11dfc:	bl	13778 <__assert_fail@plt+0x26d8>
   11e00:	b	1277c <__assert_fail@plt+0x16dc>
   11e04:	ldr	r2, [sp, #32]
   11e08:	ldrb	r1, [r8, #1]
   11e0c:	cmp	r2, #1
   11e10:	bne	11ff0 <__assert_fail@plt+0xf50>
   11e14:	cmp	r1, #0
   11e18:	beq	11ff0 <__assert_fail@plt+0xf50>
   11e1c:	ldrb	r5, [r8]
   11e20:	mvn	r0, #1
   11e24:	mov	r1, #0
   11e28:	str	sl, [sp, #124]	; 0x7c
   11e2c:	str	r0, [sp, #120]	; 0x78
   11e30:	add	r0, sp, #112	; 0x70
   11e34:	bl	13a58 <__assert_fail@plt+0x29b8>
   11e38:	cmn	r0, #1
   11e3c:	beq	11e68 <__assert_fail@plt+0xdc8>
   11e40:	movw	r6, #49776	; 0xc270
   11e44:	mov	r7, #1
   11e48:	add	r4, sp, #112	; 0x70
   11e4c:	movt	r6, #2
   11e50:	strb	r7, [r6, r0]
   11e54:	mov	r0, r4
   11e58:	mov	r1, #0
   11e5c:	bl	13a58 <__assert_fail@plt+0x29b8>
   11e60:	cmn	r0, #1
   11e64:	bne	11e50 <__assert_fail@plt+0xdb0>
   11e68:	cmp	r5, #0
   11e6c:	beq	11f80 <__assert_fail@plt+0xee0>
   11e70:	movw	r1, #49776	; 0xc270
   11e74:	vmov.i8	q8, #1	; 0x01
   11e78:	mov	r5, #224	; 0xe0
   11e7c:	movt	r1, #2
   11e80:	add	r2, r1, #48	; 0x30
   11e84:	add	r3, r1, #32
   11e88:	add	r7, r1, #16
   11e8c:	mov	r6, r1
   11e90:	add	r0, r1, #64	; 0x40
   11e94:	add	r4, r1, #80	; 0x50
   11e98:	vld1.64	{d18-d19}, [r7 :128]
   11e9c:	vld1.64	{d20-d21}, [r3 :128]
   11ea0:	vld1.64	{d22-d23}, [r2 :128]
   11ea4:	vld1.64	{d24-d25}, [r0 :128]
   11ea8:	vld1.8	{d26-d27}, [r6 :128], r5
   11eac:	add	r5, r1, #96	; 0x60
   11eb0:	veor	q9, q9, q8
   11eb4:	veor	q10, q10, q8
   11eb8:	veor	q11, q11, q8
   11ebc:	veor	q12, q12, q8
   11ec0:	vst1.64	{d18-d19}, [r7 :128]
   11ec4:	vst1.64	{d20-d21}, [r3 :128]
   11ec8:	vst1.64	{d22-d23}, [r2 :128]
   11ecc:	add	r3, r1, #128	; 0x80
   11ed0:	add	r7, r1, #112	; 0x70
   11ed4:	add	r2, r1, #144	; 0x90
   11ed8:	vld1.64	{d18-d19}, [r4 :128]
   11edc:	vld1.64	{d20-d21}, [r5 :128]
   11ee0:	vld1.64	{d22-d23}, [r7 :128]
   11ee4:	vld1.64	{d28-d29}, [r3 :128]
   11ee8:	vld1.64	{d30-d31}, [r2 :128]
   11eec:	vst1.64	{d24-d25}, [r0 :128]
   11ef0:	mov	r0, r1
   11ef4:	veor	q9, q9, q8
   11ef8:	veor	q10, q10, q8
   11efc:	veor	q11, q11, q8
   11f00:	veor	q14, q14, q8
   11f04:	veor	q15, q15, q8
   11f08:	vst1.64	{d18-d19}, [r4 :128]
   11f0c:	vst1.64	{d20-d21}, [r5 :128]
   11f10:	vst1.64	{d22-d23}, [r7 :128]
   11f14:	vst1.64	{d28-d29}, [r3 :128]
   11f18:	mov	r3, #240	; 0xf0
   11f1c:	veor	q9, q13, q8
   11f20:	vst1.8	{d18-d19}, [r0 :128], r3
   11f24:	vst1.64	{d30-d31}, [r2 :128]
   11f28:	add	r2, r1, #160	; 0xa0
   11f2c:	vld1.64	{d18-d19}, [r2 :128]
   11f30:	veor	q9, q9, q8
   11f34:	vst1.64	{d18-d19}, [r2 :128]
   11f38:	add	r2, r1, #176	; 0xb0
   11f3c:	vld1.64	{d18-d19}, [r2 :128]
   11f40:	veor	q9, q9, q8
   11f44:	vst1.64	{d18-d19}, [r2 :128]
   11f48:	add	r2, r1, #192	; 0xc0
   11f4c:	add	r1, r1, #208	; 0xd0
   11f50:	vld1.64	{d18-d19}, [r2 :128]
   11f54:	veor	q9, q9, q8
   11f58:	vst1.64	{d18-d19}, [r2 :128]
   11f5c:	vld1.64	{d18-d19}, [r1 :128]
   11f60:	veor	q9, q9, q8
   11f64:	vst1.64	{d18-d19}, [r1 :128]
   11f68:	vld1.64	{d18-d19}, [r6 :128]
   11f6c:	veor	q9, q9, q8
   11f70:	vst1.64	{d18-d19}, [r6 :128]
   11f74:	vld1.64	{d18-d19}, [r0 :128]
   11f78:	veor	q8, q9, q8
   11f7c:	vst1.64	{d16-d17}, [r0 :128]
   11f80:	movw	r4, #41584	; 0xa270
   11f84:	movw	r6, #41308	; 0xa15c
   11f88:	movt	r4, #2
   11f8c:	movt	r6, #2
   11f90:	mov	r0, r4
   11f94:	mov	r1, #8192	; 0x2000
   11f98:	bl	13978 <__assert_fail@plt+0x28d8>
   11f9c:	cmp	r0, #0
   11fa0:	beq	1277c <__assert_fail@plt+0x16dc>
   11fa4:	ldr	r3, [r6]
   11fa8:	mov	r5, r0
   11fac:	mov	r0, r4
   11fb0:	mov	r1, #1
   11fb4:	mov	r2, r5
   11fb8:	bl	10ec0 <fwrite_unlocked@plt>
   11fbc:	cmp	r0, r5
   11fc0:	beq	11f90 <__assert_fail@plt+0xef0>
   11fc4:	bl	10fe0 <__errno_location@plt>
   11fc8:	ldr	r4, [r0]
   11fcc:	movw	r1, #36394	; 0x8e2a
   11fd0:	movt	r1, #1
   11fd4:	mov	r0, #0
   11fd8:	mov	r2, #5
   11fdc:	bl	10ee4 <dcgettext@plt>
   11fe0:	mov	r2, r0
   11fe4:	mov	r0, #1
   11fe8:	mov	r1, r4
   11fec:	bl	10f50 <error@plt>
   11ff0:	ldr	r2, [sp, #36]	; 0x24
   11ff4:	and	r1, r2, r1
   11ff8:	and	r0, r0, r1
   11ffc:	cmp	r0, #1
   12000:	bne	121bc <__assert_fail@plt+0x111c>
   12004:	ldrb	r6, [r8]
   12008:	mvn	r0, #1
   1200c:	mov	r1, #0
   12010:	str	sl, [sp, #124]	; 0x7c
   12014:	str	r0, [sp, #120]	; 0x78
   12018:	add	r0, sp, #112	; 0x70
   1201c:	bl	13a58 <__assert_fail@plt+0x29b8>
   12020:	cmn	r0, #1
   12024:	beq	12050 <__assert_fail@plt+0xfb0>
   12028:	movw	r4, #49776	; 0xc270
   1202c:	mov	r7, #1
   12030:	add	r5, sp, #112	; 0x70
   12034:	movt	r4, #2
   12038:	strb	r7, [r4, r0]
   1203c:	mov	r0, r5
   12040:	mov	r1, #0
   12044:	bl	13a58 <__assert_fail@plt+0x29b8>
   12048:	cmn	r0, #1
   1204c:	bne	12038 <__assert_fail@plt+0xf98>
   12050:	cmp	r6, #0
   12054:	beq	12168 <__assert_fail@plt+0x10c8>
   12058:	movw	r1, #49776	; 0xc270
   1205c:	vmov.i8	q8, #1	; 0x01
   12060:	mov	r5, #224	; 0xe0
   12064:	movt	r1, #2
   12068:	add	r2, r1, #48	; 0x30
   1206c:	add	r3, r1, #32
   12070:	add	r7, r1, #16
   12074:	mov	r6, r1
   12078:	add	r0, r1, #64	; 0x40
   1207c:	add	r4, r1, #80	; 0x50
   12080:	vld1.64	{d18-d19}, [r7 :128]
   12084:	vld1.64	{d20-d21}, [r3 :128]
   12088:	vld1.64	{d22-d23}, [r2 :128]
   1208c:	vld1.64	{d24-d25}, [r0 :128]
   12090:	vld1.8	{d26-d27}, [r6 :128], r5
   12094:	add	r5, r1, #96	; 0x60
   12098:	veor	q9, q9, q8
   1209c:	veor	q10, q10, q8
   120a0:	veor	q11, q11, q8
   120a4:	veor	q12, q12, q8
   120a8:	vst1.64	{d18-d19}, [r7 :128]
   120ac:	vst1.64	{d20-d21}, [r3 :128]
   120b0:	vst1.64	{d22-d23}, [r2 :128]
   120b4:	add	r3, r1, #128	; 0x80
   120b8:	add	r7, r1, #112	; 0x70
   120bc:	add	r2, r1, #144	; 0x90
   120c0:	vld1.64	{d18-d19}, [r4 :128]
   120c4:	vld1.64	{d20-d21}, [r5 :128]
   120c8:	vld1.64	{d22-d23}, [r7 :128]
   120cc:	vld1.64	{d28-d29}, [r3 :128]
   120d0:	vld1.64	{d30-d31}, [r2 :128]
   120d4:	vst1.64	{d24-d25}, [r0 :128]
   120d8:	mov	r0, r1
   120dc:	veor	q9, q9, q8
   120e0:	veor	q10, q10, q8
   120e4:	veor	q11, q11, q8
   120e8:	veor	q14, q14, q8
   120ec:	veor	q15, q15, q8
   120f0:	vst1.64	{d18-d19}, [r4 :128]
   120f4:	vst1.64	{d20-d21}, [r5 :128]
   120f8:	vst1.64	{d22-d23}, [r7 :128]
   120fc:	vst1.64	{d28-d29}, [r3 :128]
   12100:	mov	r3, #240	; 0xf0
   12104:	veor	q9, q13, q8
   12108:	vst1.8	{d18-d19}, [r0 :128], r3
   1210c:	vst1.64	{d30-d31}, [r2 :128]
   12110:	add	r2, r1, #160	; 0xa0
   12114:	vld1.64	{d18-d19}, [r2 :128]
   12118:	veor	q9, q9, q8
   1211c:	vst1.64	{d18-d19}, [r2 :128]
   12120:	add	r2, r1, #176	; 0xb0
   12124:	vld1.64	{d18-d19}, [r2 :128]
   12128:	veor	q9, q9, q8
   1212c:	vst1.64	{d18-d19}, [r2 :128]
   12130:	add	r2, r1, #192	; 0xc0
   12134:	add	r1, r1, #208	; 0xd0
   12138:	vld1.64	{d18-d19}, [r2 :128]
   1213c:	veor	q9, q9, q8
   12140:	vst1.64	{d18-d19}, [r2 :128]
   12144:	vld1.64	{d18-d19}, [r1 :128]
   12148:	veor	q9, q9, q8
   1214c:	vst1.64	{d18-d19}, [r1 :128]
   12150:	vld1.64	{d18-d19}, [r6 :128]
   12154:	veor	q9, q9, q8
   12158:	vst1.64	{d18-d19}, [r6 :128]
   1215c:	vld1.64	{d18-d19}, [r0 :128]
   12160:	veor	q8, q9, q8
   12164:	vst1.64	{d16-d17}, [r0 :128]
   12168:	ldr	r6, [sp, #68]	; 0x44
   1216c:	mvn	r0, #1
   12170:	mov	r1, #0
   12174:	str	r0, [r6, #8]
   12178:	mov	r0, r6
   1217c:	str	sl, [r6, #12]
   12180:	bl	13a58 <__assert_fail@plt+0x29b8>
   12184:	cmn	r0, #1
   12188:	beq	121b0 <__assert_fail@plt+0x1110>
   1218c:	movw	r4, #41328	; 0xa170
   12190:	mov	r5, #1
   12194:	movt	r4, #2
   12198:	strb	r5, [r4, r0]
   1219c:	mov	r0, r6
   121a0:	mov	r1, #0
   121a4:	bl	13a58 <__assert_fail@plt+0x29b8>
   121a8:	cmn	r0, #1
   121ac:	bne	12198 <__assert_fail@plt+0x10f8>
   121b0:	movw	r0, #14712	; 0x3978
   121b4:	movt	r0, #1
   121b8:	b	11dfc <__assert_fail@plt+0xd5c>
   121bc:	ldrb	r0, [r8, #4]
   121c0:	cmp	r0, #0
   121c4:	beq	1277c <__assert_fail@plt+0x16dc>
   121c8:	ldrb	r0, [r8]
   121cc:	cmp	r0, #1
   121d0:	bne	12384 <__assert_fail@plt+0x12e4>
   121d4:	mvn	r0, #1
   121d8:	mov	r1, #0
   121dc:	str	sl, [sp, #124]	; 0x7c
   121e0:	mov	r6, #0
   121e4:	str	r0, [sp, #120]	; 0x78
   121e8:	add	r0, sp, #112	; 0x70
   121ec:	bl	13a58 <__assert_fail@plt+0x29b8>
   121f0:	cmn	r0, #1
   121f4:	beq	12220 <__assert_fail@plt+0x1180>
   121f8:	movw	r4, #49776	; 0xc270
   121fc:	mov	r7, #1
   12200:	add	r5, sp, #112	; 0x70
   12204:	movt	r4, #2
   12208:	strb	r7, [r4, r0]
   1220c:	mov	r0, r5
   12210:	mov	r1, #0
   12214:	bl	13a58 <__assert_fail@plt+0x29b8>
   12218:	cmn	r0, #1
   1221c:	bne	12208 <__assert_fail@plt+0x1168>
   12220:	ldr	r0, [sp, #68]	; 0x44
   12224:	mvn	r1, #1
   12228:	movw	r5, #50032	; 0xc370
   1222c:	movt	r5, #2
   12230:	str	r1, [r0, #8]
   12234:	add	ip, pc, #916	; 0x394
   12238:	add	r1, pc, #928	; 0x3a0
   1223c:	add	r2, pc, #940	; 0x3ac
   12240:	add	r3, pc, #952	; 0x3b8
   12244:	add	r7, pc, #964	; 0x3c4
   12248:	str	sl, [r0, #12]
   1224c:	add	r4, pc, #972	; 0x3cc
   12250:	add	r0, pc, #984	; 0x3d8
   12254:	vld1.64	{d16-d17}, [r7 :128]
   12258:	vld1.64	{d18-d19}, [r0 :128]
   1225c:	add	r0, pc, #988	; 0x3dc
   12260:	add	r7, r5, #16
   12264:	vld1.64	{d26-d27}, [r3 :128]
   12268:	vld1.64	{d30-d31}, [r1 :128]
   1226c:	vld1.64	{d28-d29}, [r2 :128]
   12270:	vld1.64	{d0-d1}, [ip :128]
   12274:	vld1.64	{d2-d3}, [r4 :128]
   12278:	vld1.64	{d20-d21}, [r0 :128]
   1227c:	add	r0, pc, #972	; 0x3cc
   12280:	vld1.64	{d22-d23}, [r0 :128]
   12284:	add	r0, pc, #980	; 0x3d4
   12288:	vld1.64	{d24-d25}, [r0 :128]
   1228c:	add	r0, r5, #32
   12290:	vst1.64	{d16-d17}, [r7 :128]
   12294:	add	r1, pc, #980	; 0x3d4
   12298:	vst1.64	{d18-d19}, [r0 :128]
   1229c:	add	r0, r5, #48	; 0x30
   122a0:	movw	r7, #49776	; 0xc270
   122a4:	vld1.64	{d16-d17}, [r1 :128]
   122a8:	add	r1, pc, #976	; 0x3d0
   122ac:	vst1.64	{d20-d21}, [r0 :128]
   122b0:	add	r0, r5, #64	; 0x40
   122b4:	movt	r7, #2
   122b8:	vld1.64	{d18-d19}, [r1 :128]
   122bc:	add	r1, pc, #972	; 0x3cc
   122c0:	vst1.64	{d22-d23}, [r0 :128]
   122c4:	add	r0, r5, #80	; 0x50
   122c8:	vld1.64	{d20-d21}, [r1 :128]
   122cc:	add	r1, pc, #972	; 0x3cc
   122d0:	vst1.64	{d24-d25}, [r0 :128]
   122d4:	add	r0, r5, #96	; 0x60
   122d8:	vld1.64	{d22-d23}, [r1 :128]
   122dc:	add	r1, pc, #972	; 0x3cc
   122e0:	vst1.64	{d26-d27}, [r0 :128]
   122e4:	add	r0, r5, #112	; 0x70
   122e8:	vld1.64	{d24-d25}, [r1 :128]
   122ec:	add	r1, pc, #972	; 0x3cc
   122f0:	vst1.64	{d28-d29}, [r0 :128]
   122f4:	add	r0, r5, #128	; 0x80
   122f8:	vst1.64	{d30-d31}, [r0 :128]
   122fc:	add	r0, r5, #144	; 0x90
   12300:	vld1.64	{d26-d27}, [r1 :128]
   12304:	mov	r1, r5
   12308:	vst1.64	{d0-d1}, [r0 :128]
   1230c:	add	r0, r5, #160	; 0xa0
   12310:	vst1.64	{d2-d3}, [r0 :128]
   12314:	add	r0, r5, #176	; 0xb0
   12318:	vst1.64	{d16-d17}, [r0 :128]
   1231c:	add	r0, r5, #192	; 0xc0
   12320:	vst1.64	{d18-d19}, [r0 :128]
   12324:	add	r0, r5, #208	; 0xd0
   12328:	vst1.64	{d20-d21}, [r0 :128]
   1232c:	add	r0, r5, #224	; 0xe0
   12330:	vst1.64	{d22-d23}, [r0 :128]
   12334:	mov	r0, #240	; 0xf0
   12338:	vst1.8	{d24-d25}, [r1 :128], r0
   1233c:	vst1.64	{d26-d27}, [r1 :128]
   12340:	ldrb	r0, [r7, r6]
   12344:	cmp	r0, #0
   12348:	beq	1235c <__assert_fail@plt+0x12bc>
   1234c:	add	r6, r6, #1
   12350:	cmp	r6, #256	; 0x100
   12354:	bcc	12340 <__assert_fail@plt+0x12a0>
   12358:	b	127a8 <__assert_fail@plt+0x1708>
   1235c:	ldr	r0, [sp, #68]	; 0x44
   12360:	mov	r1, #0
   12364:	bl	13a58 <__assert_fail@plt+0x29b8>
   12368:	cmn	r0, #1
   1236c:	beq	1279c <__assert_fail@plt+0x16fc>
   12370:	strb	r0, [r5, r6]
   12374:	add	r6, r6, #1
   12378:	cmp	r6, #256	; 0x100
   1237c:	bcc	12340 <__assert_fail@plt+0x12a0>
   12380:	b	127a8 <__assert_fail@plt+0x1708>
   12384:	add	r0, pc, #580	; 0x244
   12388:	add	r1, pc, #592	; 0x250
   1238c:	add	r2, pc, #604	; 0x25c
   12390:	add	r3, pc, #616	; 0x268
   12394:	add	r7, pc, #628	; 0x274
   12398:	add	r5, pc, #640	; 0x280
   1239c:	add	r4, pc, #652	; 0x28c
   123a0:	movw	r6, #50032	; 0xc370
   123a4:	vld1.64	{d18-d19}, [r4 :128]
   123a8:	add	r4, pc, #656	; 0x290
   123ac:	vld1.64	{d16-d17}, [r7 :128]
   123b0:	movt	r6, #2
   123b4:	vld1.64	{d0-d1}, [r0 :128]
   123b8:	vld1.64	{d26-d27}, [r3 :128]
   123bc:	vld1.64	{d30-d31}, [r1 :128]
   123c0:	vld1.64	{d28-d29}, [r2 :128]
   123c4:	vld1.64	{d2-d3}, [r5 :128]
   123c8:	vld1.64	{d20-d21}, [r4 :128]
   123cc:	add	r4, pc, #636	; 0x27c
   123d0:	add	r7, r6, #16
   123d4:	add	r0, r6, #32
   123d8:	vld1.64	{d22-d23}, [r4 :128]
   123dc:	add	r4, pc, #636	; 0x27c
   123e0:	vld1.64	{d24-d25}, [r4 :128]
   123e4:	vst1.64	{d16-d17}, [r7 :128]
   123e8:	add	r1, pc, #640	; 0x280
   123ec:	vst1.64	{d18-d19}, [r0 :128]
   123f0:	add	r0, r6, #48	; 0x30
   123f4:	vld1.64	{d16-d17}, [r1 :128]
   123f8:	add	r1, pc, #640	; 0x280
   123fc:	vst1.64	{d20-d21}, [r0 :128]
   12400:	add	r0, r6, #64	; 0x40
   12404:	vld1.64	{d18-d19}, [r1 :128]
   12408:	add	r1, pc, #640	; 0x280
   1240c:	vst1.64	{d22-d23}, [r0 :128]
   12410:	add	r0, r6, #80	; 0x50
   12414:	vld1.64	{d20-d21}, [r1 :128]
   12418:	add	r1, pc, #640	; 0x280
   1241c:	vst1.64	{d24-d25}, [r0 :128]
   12420:	add	r0, r6, #96	; 0x60
   12424:	vld1.64	{d22-d23}, [r1 :128]
   12428:	add	r1, pc, #640	; 0x280
   1242c:	vst1.64	{d26-d27}, [r0 :128]
   12430:	add	r0, r6, #112	; 0x70
   12434:	vld1.64	{d24-d25}, [r1 :128]
   12438:	add	r1, pc, #640	; 0x280
   1243c:	vst1.64	{d28-d29}, [r0 :128]
   12440:	add	r0, r6, #128	; 0x80
   12444:	ldr	r4, [sp, #68]	; 0x44
   12448:	str	sl, [sp, #124]	; 0x7c
   1244c:	vst1.64	{d30-d31}, [r0 :128]
   12450:	add	r0, r6, #144	; 0x90
   12454:	vld1.64	{d26-d27}, [r1 :128]
   12458:	mov	r1, r6
   1245c:	vst1.64	{d0-d1}, [r0 :128]
   12460:	add	r0, r6, #160	; 0xa0
   12464:	vst1.64	{d2-d3}, [r0 :128]
   12468:	add	r0, r6, #176	; 0xb0
   1246c:	vst1.64	{d16-d17}, [r0 :128]
   12470:	add	r0, r6, #192	; 0xc0
   12474:	mov	r9, r4
   12478:	vst1.64	{d18-d19}, [r0 :128]
   1247c:	add	r0, r6, #208	; 0xd0
   12480:	vst1.64	{d20-d21}, [r0 :128]
   12484:	add	r0, r6, #224	; 0xe0
   12488:	vst1.64	{d22-d23}, [r0 :128]
   1248c:	mov	r0, #240	; 0xf0
   12490:	vst1.8	{d24-d25}, [r1 :128], r0
   12494:	mvn	r0, #1
   12498:	vst1.64	{d26-d27}, [r1 :128]
   1249c:	str	r0, [sp, #120]	; 0x78
   124a0:	str	r0, [r9, #8]!
   124a4:	add	r0, sp, #112	; 0x70
   124a8:	add	r0, r0, #8
   124ac:	str	sl, [r9, #4]
   124b0:	str	r0, [sp, #64]	; 0x40
   124b4:	b	124e8 <__assert_fail@plt+0x1448>
   124b8:	ldr	r0, [sp, #116]	; 0x74
   124bc:	ldr	r2, [sp, #64]	; 0x40
   124c0:	ldr	r0, [r0, #4]
   124c4:	str	r0, [sp, #116]	; 0x74
   124c8:	adds	r0, r1, #1
   124cc:	mvn	r1, #0
   124d0:	adc	r1, r1, #0
   124d4:	strd	r0, [r2]
   124d8:	ldr	r2, [r4, #4]
   124dc:	ldr	r2, [r2, #4]
   124e0:	str	r2, [r4, #4]
   124e4:	strd	r0, [r9]
   124e8:	add	r0, sp, #112	; 0x70
   124ec:	add	r1, sp, #152	; 0x98
   124f0:	bl	13a58 <__assert_fail@plt+0x29b8>
   124f4:	mov	r5, r0
   124f8:	mov	r0, r4
   124fc:	sub	r1, fp, #36	; 0x24
   12500:	bl	13a58 <__assert_fail@plt+0x29b8>
   12504:	ldr	r1, [sp, #152]	; 0x98
   12508:	ldr	sl, [fp, #-36]	; 0xffffffdc
   1250c:	cmp	r1, #0
   12510:	cmpeq	sl, #1
   12514:	beq	12544 <__assert_fail@plt+0x14a4>
   12518:	cmp	r1, #1
   1251c:	cmpeq	sl, #0
   12520:	beq	12580 <__assert_fail@plt+0x14e0>
   12524:	cmn	r5, #1
   12528:	cmnne	r0, #1
   1252c:	beq	126d0 <__assert_fail@plt+0x1630>
   12530:	strb	r0, [r6, r5]
   12534:	cmp	sl, #2
   12538:	mvn	r1, #1
   1253c:	beq	124e8 <__assert_fail@plt+0x1448>
   12540:	b	124b8 <__assert_fail@plt+0x1418>
   12544:	bl	10fb0 <__ctype_b_loc@plt>
   12548:	ldr	r5, [r0]
   1254c:	mov	r8, #0
   12550:	ldrb	r0, [r5, #1]
   12554:	tst	r0, #2
   12558:	beq	1256c <__assert_fail@plt+0x14cc>
   1255c:	bl	10f8c <__ctype_toupper_loc@plt>
   12560:	ldr	r0, [r0]
   12564:	ldr	r0, [r0, r8, lsl #2]
   12568:	strb	r0, [r6, r8]
   1256c:	add	r8, r8, #1
   12570:	add	r5, r5, #2
   12574:	cmp	r8, #256	; 0x100
   12578:	bne	12550 <__assert_fail@plt+0x14b0>
   1257c:	b	125b8 <__assert_fail@plt+0x1518>
   12580:	bl	10fb0 <__ctype_b_loc@plt>
   12584:	ldr	r5, [r0]
   12588:	mov	r7, #0
   1258c:	ldrb	r0, [r5, #1]
   12590:	tst	r0, #1
   12594:	beq	125a8 <__assert_fail@plt+0x1508>
   12598:	bl	10f80 <__ctype_tolower_loc@plt>
   1259c:	ldr	r0, [r0]
   125a0:	ldr	r0, [r0, r7, lsl #2]
   125a4:	strb	r0, [r6, r7]
   125a8:	add	r7, r7, #1
   125ac:	add	r5, r5, #2
   125b0:	cmp	r7, #256	; 0x100
   125b4:	bne	1258c <__assert_fail@plt+0x14ec>
   125b8:	cmp	sl, #2
   125bc:	mvn	r1, #1
   125c0:	beq	124e8 <__assert_fail@plt+0x1448>
   125c4:	b	124b8 <__assert_fail@plt+0x1418>
   125c8:	nop	{0}
   125cc:	nop	{0}
   125d0:	orrsls	r9, r2, #144, 2	; 0x24
   125d4:			; <UNDEFINED> instruction: 0x97969594
   125d8:	blls	fe6b8c40 <stdout@@GLIBC_2.4+0xfe68eae4>
   125dc:	svcls	0x009e9d9c
   125e0:	orrhi	r8, r2, #128, 2
   125e4:	strhi	r8, [r6, r4, lsl #11]
   125e8:	blhi	fe2b4c10 <stdout@@GLIBC_2.4+0xfe28aab4>
   125ec:	svchi	0x008e8d8c
   125f0:	cmnvc	r2, #112, 2
   125f4:			; <UNDEFINED> instruction: 0x77767574
   125f8:	blvc	1eb0be0 <stdout@@GLIBC_2.4+0x1e86a84>
   125fc:	svcvc	0x007e7d7c
   12600:	cmnvs	r2, #96, 2
   12604:	strbvs	r6, [r6, -r4, ror #10]!
   12608:	blvs	1aacbb0 <stdout@@GLIBC_2.4+0x1a82a54>
   1260c:	svcvs	0x006e6d6c
   12610:	tstne	r2, #16, 2
   12614:			; <UNDEFINED> instruction: 0x17161514
   12618:	blne	698a80 <stdout@@GLIBC_2.4+0x66e924>
   1261c:	svcne	0x001e1d1c
   12620:			; <UNDEFINED> instruction: 0xa3a2a1a0
   12624:	strge	sl, [r6, r4, lsr #11]!
   12628:	blge	feabccd0 <stdout@@GLIBC_2.4+0xfea92b74>
   1262c:	svcge	0x00aeadac
   12630:			; <UNDEFINED> instruction: 0x23222120
   12634:	strcs	r2, [r6, -r4, lsr #10]!
   12638:	blcs	a9cae0 <stdout@@GLIBC_2.4+0xa72984>
   1263c:	svccs	0x002e2d2c
   12640:	teqcc	r2, #48, 2
   12644:			; <UNDEFINED> instruction: 0x37363534
   12648:	blcc	ea0b30 <stdout@@GLIBC_2.4+0xe769d4>
   1264c:	svccc	0x003e3d3c
   12650:	movtmi	r4, #8512	; 0x2140
   12654:	strbmi	r4, [r6, -r4, asr #10]
   12658:	blmi	12a4b80 <stdout@@GLIBC_2.4+0x127aa24>
   1265c:	svcmi	0x004e4d4c
   12660:	cmppl	r2, #80, 2
   12664:			; <UNDEFINED> instruction: 0x57565554
   12668:	blpl	16a8bd0 <stdout@@GLIBC_2.4+0x167ea74>
   1266c:	svcpl	0x005e5d5c
   12670:			; <UNDEFINED> instruction: 0xb3b2b1b0
   12674:			; <UNDEFINED> instruction: 0xb7b6b5b4
   12678:	bllt	feec0d60 <stdout@@GLIBC_2.4+0xfee96c04>
   1267c:	svclt	0x00bebdbc
   12680:	bicgt	ip, r2, #192, 2	; 0x30
   12684:	strbgt	ip, [r6, r4, asr #11]
   12688:	blgt	ff2c4db0 <stdout@@GLIBC_2.4+0xff29ac54>
   1268c:	svcgt	0x00cecdcc
   12690:	bicsle	sp, r2, #208, 2	; 0x34
   12694:			; <UNDEFINED> instruction: 0xd7d6d5d4
   12698:	blle	ff6c8e00 <stdout@@GLIBC_2.4+0xff69eca4>
   1269c:	svcle	0x00dedddc
   126a0:	mvn	lr, #224, 2	; 0x38
   126a4:	strb	lr, [r6, r4, ror #11]!
   126a8:	bl	ffacce50 <stdout@@GLIBC_2.4+0xffaa2cf4>
   126ac:	svc	0x00eeedec
   126b0:	movweq	r0, #8448	; 0x2100
   126b4:	streq	r0, [r6, -r4, lsl #10]
   126b8:	bleq	294ae0 <stdout@@GLIBC_2.4+0x26a984>
   126bc:	svceq	0x000e0d0c
   126c0:	vsra.u64	<illegal reg q15.5>, q8, #14
   126c4:			; <UNDEFINED> instruction: 0xf7f6f5f4
   126c8:	blx	ffed0eb2 <stdout@@GLIBC_2.4+0xffea6d56>
   126cc:			; <UNDEFINED> instruction: 0xfffefdfc
   126d0:	movw	r8, #50288	; 0xc470
   126d4:	cmn	r5, #1
   126d8:	movt	r8, #2
   126dc:	beq	126ec <__assert_fail@plt+0x164c>
   126e0:	ldrb	r0, [r8, #3]
   126e4:	cmp	r0, #0
   126e8:	beq	12a74 <__assert_fail@plt+0x19d4>
   126ec:	mvn	sl, #0
   126f0:	ldrb	r0, [r8, #2]
   126f4:	cmp	r0, #0
   126f8:	bne	127b4 <__assert_fail@plt+0x1714>
   126fc:	movw	r4, #41584	; 0xa270
   12700:	movw	r6, #50032	; 0xc370
   12704:	movw	r7, #41308	; 0xa15c
   12708:	movt	r4, #2
   1270c:	movt	r6, #2
   12710:	movt	r7, #2
   12714:	mov	r0, #0
   12718:	mov	r1, r4
   1271c:	mov	r2, #8192	; 0x2000
   12720:	bl	16374 <__assert_fail@plt+0x52d4>
   12724:	cmp	r0, #0
   12728:	beq	1277c <__assert_fail@plt+0x16dc>
   1272c:	mov	r5, r0
   12730:	cmn	r0, #1
   12734:	beq	12a60 <__assert_fail@plt+0x19c0>
   12738:	mov	r0, #0
   1273c:	ldrb	r1, [r4, r0]
   12740:	ldrb	r1, [r6, r1]
   12744:	strb	r1, [r4, r0]
   12748:	add	r0, r0, #1
   1274c:	cmp	r5, r0
   12750:	bne	1273c <__assert_fail@plt+0x169c>
   12754:	cmp	r5, #0
   12758:	beq	1277c <__assert_fail@plt+0x16dc>
   1275c:	ldr	r3, [r7]
   12760:	mov	r0, r4
   12764:	mov	r1, #1
   12768:	mov	r2, r5
   1276c:	bl	10ec0 <fwrite_unlocked@plt>
   12770:	cmp	r0, r5
   12774:	beq	12714 <__assert_fail@plt+0x1674>
   12778:	b	11fc4 <__assert_fail@plt+0xf24>
   1277c:	mov	r0, #0
   12780:	mov	r6, #0
   12784:	bl	11094 <close@plt>
   12788:	cmp	r0, #0
   1278c:	bne	129a0 <__assert_fail@plt+0x1900>
   12790:	mov	r0, r6
   12794:	sub	sp, fp, #28
   12798:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1279c:	ldrb	r0, [r8, #3]
   127a0:	cmp	r0, #0
   127a4:	beq	12a94 <__assert_fail@plt+0x19f4>
   127a8:	ldrb	r0, [r8, #2]
   127ac:	cmp	r0, #0
   127b0:	beq	126fc <__assert_fail@plt+0x165c>
   127b4:	ldr	r6, [sp, #68]	; 0x44
   127b8:	mvn	r0, #1
   127bc:	mov	r1, #0
   127c0:	str	r0, [r6, #8]
   127c4:	mov	r0, r6
   127c8:	str	sl, [r6, #12]
   127cc:	bl	13a58 <__assert_fail@plt+0x29b8>
   127d0:	cmn	r0, #1
   127d4:	beq	127fc <__assert_fail@plt+0x175c>
   127d8:	movw	r4, #41328	; 0xa170
   127dc:	mov	r5, #1
   127e0:	movt	r4, #2
   127e4:	strb	r5, [r4, r0]
   127e8:	mov	r0, r6
   127ec:	mov	r1, #0
   127f0:	bl	13a58 <__assert_fail@plt+0x29b8>
   127f4:	cmn	r0, #1
   127f8:	bne	127e4 <__assert_fail@plt+0x1744>
   127fc:	movw	r0, #15812	; 0x3dc4
   12800:	movt	r0, #1
   12804:	b	11dfc <__assert_fail@plt+0xd5c>
   12808:	cmn	r0, #3
   1280c:	bne	12858 <__assert_fail@plt+0x17b8>
   12810:	movw	r0, #41200	; 0xa0f0
   12814:	movw	r2, #36141	; 0x8d2d
   12818:	mov	r1, #0
   1281c:	movt	r0, #2
   12820:	movt	r2, #1
   12824:	str	r1, [sp, #4]
   12828:	movw	r1, #36090	; 0x8cfa
   1282c:	ldr	r3, [r0]
   12830:	movw	r0, #41308	; 0xa15c
   12834:	str	r2, [sp]
   12838:	movw	r2, #36127	; 0x8d1f
   1283c:	movt	r1, #1
   12840:	movt	r0, #2
   12844:	movt	r2, #1
   12848:	ldr	r0, [r0]
   1284c:	bl	16864 <__assert_fail@plt+0x57c4>
   12850:	mov	r0, #0
   12854:	bl	10fbc <exit@plt>
   12858:	cmn	r0, #2
   1285c:	bne	12980 <__assert_fail@plt+0x18e0>
   12860:	mov	r0, #0
   12864:	bl	111a0 <__assert_fail@plt+0x100>
   12868:	cmp	r7, #0
   1286c:	bne	128f4 <__assert_fail@plt+0x1854>
   12870:	movw	r1, #36154	; 0x8d3a
   12874:	mov	r0, #0
   12878:	mov	r2, #5
   1287c:	movt	r1, #1
   12880:	bl	10ee4 <dcgettext@plt>
   12884:	mov	r2, r0
   12888:	mov	r0, #0
   1288c:	mov	r1, #0
   12890:	bl	10f50 <error@plt>
   12894:	mov	r0, #1
   12898:	bl	111a0 <__assert_fail@plt+0x100>
   1289c:	movw	r1, #36307	; 0x8dd3
   128a0:	mov	r0, #0
   128a4:	mov	r2, #5
   128a8:	movt	r1, #1
   128ac:	bl	10ee4 <dcgettext@plt>
   128b0:	mov	r4, r0
   128b4:	ldr	r0, [sl]
   128b8:	add	r0, r0, r5
   128bc:	ldr	r0, [r9, r0, lsl #2]
   128c0:	bl	1635c <__assert_fail@plt+0x52bc>
   128c4:	mov	r3, r0
   128c8:	mov	r0, #0
   128cc:	mov	r1, #0
   128d0:	mov	r2, r4
   128d4:	bl	10f50 <error@plt>
   128d8:	cmp	r7, #2
   128dc:	bne	12980 <__assert_fail@plt+0x18e0>
   128e0:	movw	r0, #41296	; 0xa150
   128e4:	movw	r1, #36324	; 0x8de4
   128e8:	movt	r0, #2
   128ec:	movt	r1, #1
   128f0:	b	12958 <__assert_fail@plt+0x18b8>
   128f4:	movw	r1, #36170	; 0x8d4a
   128f8:	mov	r0, #0
   128fc:	mov	r2, #5
   12900:	movt	r1, #1
   12904:	bl	10ee4 <dcgettext@plt>
   12908:	mov	r6, r0
   1290c:	add	r0, r9, r4, lsl #2
   12910:	ldr	r0, [r0, #-4]
   12914:	bl	1635c <__assert_fail@plt+0x52bc>
   12918:	mov	r3, r0
   1291c:	mov	r0, #0
   12920:	mov	r1, #0
   12924:	mov	r2, r6
   12928:	bl	10f50 <error@plt>
   1292c:	movw	r0, #50288	; 0xc470
   12930:	movw	r2, #36195	; 0x8d63
   12934:	movw	r1, #36263	; 0x8da7
   12938:	movt	r0, #2
   1293c:	movt	r2, #1
   12940:	movt	r1, #1
   12944:	ldrb	r0, [r0, #2]
   12948:	cmp	r0, #0
   1294c:	movw	r0, #41296	; 0xa150
   12950:	movt	r0, #2
   12954:	movne	r1, r2
   12958:	ldr	r4, [r0]
   1295c:	mov	r0, #0
   12960:	mov	r2, #5
   12964:	bl	10ee4 <dcgettext@plt>
   12968:	movw	r2, #39392	; 0x99e0
   1296c:	mov	r3, r0
   12970:	mov	r0, r4
   12974:	mov	r1, #1
   12978:	movt	r2, #1
   1297c:	bl	11028 <__fprintf_chk@plt>
   12980:	mov	r0, #1
   12984:	bl	111a0 <__assert_fail@plt+0x100>
   12988:	movw	r1, #38467	; 0x9643
   1298c:	movt	r1, #1
   12990:	b	129c8 <__assert_fail@plt+0x1928>
   12994:	movw	r1, #37870	; 0x93ee
   12998:	movt	r1, #1
   1299c:	b	129c8 <__assert_fail@plt+0x1928>
   129a0:	bl	10fe0 <__errno_location@plt>
   129a4:	ldr	r4, [r0]
   129a8:	movw	r1, #36490	; 0x8e8a
   129ac:	movt	r1, #1
   129b0:	b	11fd4 <__assert_fail@plt+0xf34>
   129b4:	movw	r1, #37975	; 0x9457
   129b8:	movt	r1, #1
   129bc:	b	129c8 <__assert_fail@plt+0x1928>
   129c0:	movw	r1, #38036	; 0x9494
   129c4:	movt	r1, #1
   129c8:	mov	r0, #0
   129cc:	mov	r2, #5
   129d0:	bl	10ee4 <dcgettext@plt>
   129d4:	mov	r2, r0
   129d8:	mov	r0, #1
   129dc:	mov	r1, #0
   129e0:	bl	10f50 <error@plt>
   129e4:	movw	r0, #38515	; 0x9673
   129e8:	movw	r1, #36432	; 0x8e50
   129ec:	movw	r3, #38568	; 0x96a8
   129f0:	movw	r2, #1224	; 0x4c8
   129f4:	movt	r0, #1
   129f8:	movt	r1, #1
   129fc:	movt	r3, #1
   12a00:	bl	110a0 <__assert_fail@plt>
   12a04:	bl	11088 <abort@plt>
   12a08:	movw	r1, #38132	; 0x94f4
   12a0c:	movt	r1, #1
   12a10:	b	129c8 <__assert_fail@plt+0x1928>
   12a14:	movw	r0, #38024	; 0x9488
   12a18:	movw	r1, #36432	; 0x8e50
   12a1c:	movw	r3, #38635	; 0x96eb
   12a20:	movw	r2, #1377	; 0x561
   12a24:	movt	r0, #1
   12a28:	movt	r1, #1
   12a2c:	movt	r3, #1
   12a30:	bl	110a0 <__assert_fail@plt>
   12a34:	movw	r1, #38701	; 0x972d
   12a38:	movt	r1, #1
   12a3c:	b	129c8 <__assert_fail@plt+0x1928>
   12a40:	movw	r0, #37205	; 0x9155
   12a44:	movw	r1, #36432	; 0x8e50
   12a48:	movw	r3, #37607	; 0x92e7
   12a4c:	movw	r2, #721	; 0x2d1
   12a50:	movt	r0, #1
   12a54:	movt	r1, #1
   12a58:	movt	r3, #1
   12a5c:	bl	110a0 <__assert_fail@plt>
   12a60:	bl	10fe0 <__errno_location@plt>
   12a64:	ldr	r4, [r0]
   12a68:	movw	r1, #38806	; 0x9796
   12a6c:	movt	r1, #1
   12a70:	b	11fd4 <__assert_fail@plt+0xf34>
   12a74:	movw	r0, #36464	; 0x8e70
   12a78:	movw	r1, #36432	; 0x8e50
   12a7c:	movw	r3, #36441	; 0x8e59
   12a80:	movw	r2, #1893	; 0x765
   12a84:	movt	r0, #1
   12a88:	movt	r1, #1
   12a8c:	movt	r3, #1
   12a90:	bl	110a0 <__assert_fail@plt>
   12a94:	movw	r0, #36406	; 0x8e36
   12a98:	movw	r1, #36432	; 0x8e50
   12a9c:	movw	r3, #36441	; 0x8e59
   12aa0:	mov	r2, #1840	; 0x730
   12aa4:	movt	r0, #1
   12aa8:	movt	r1, #1
   12aac:	movt	r3, #1
   12ab0:	bl	110a0 <__assert_fail@plt>
   12ab4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12ab8:	add	fp, sp, #28
   12abc:	sub	sp, sp, #76	; 0x4c
   12ac0:	str	r1, [sp, #48]	; 0x30
   12ac4:	mov	r7, r0
   12ac8:	bl	10fc8 <strlen@plt>
   12acc:	mov	r5, r0
   12ad0:	bl	16a98 <__assert_fail@plt+0x59f8>
   12ad4:	mov	r4, r0
   12ad8:	mov	r0, r5
   12adc:	mov	r1, #1
   12ae0:	mov	r8, #1
   12ae4:	bl	16eac <__assert_fail@plt+0x5e0c>
   12ae8:	mov	ip, r0
   12aec:	mov	sl, #0
   12af0:	mov	r5, #0
   12af4:	str	r0, [sp, #52]	; 0x34
   12af8:	str	r4, [fp, #-44]	; 0xffffffd4
   12afc:	ldrb	r0, [r7, r5]
   12b00:	cmp	r0, #92	; 0x5c
   12b04:	bne	12b24 <__assert_fail@plt+0x1a84>
   12b08:	b	12b30 <__assert_fail@plt+0x1a90>
   12b0c:	strb	r0, [r4, sl]
   12b10:	add	r5, r5, #1
   12b14:	add	sl, sl, #1
   12b18:	ldrb	r0, [r7, r5]
   12b1c:	cmp	r0, #92	; 0x5c
   12b20:	beq	12b30 <__assert_fail@plt+0x1a90>
   12b24:	cmp	r0, #0
   12b28:	bne	12b0c <__assert_fail@plt+0x1a6c>
   12b2c:	b	12e4c <__assert_fail@plt+0x1dac>
   12b30:	strb	r8, [ip, sl]
   12b34:	add	r9, r5, #1
   12b38:	ldrb	r0, [r7, r9]
   12b3c:	cmp	r0, #118	; 0x76
   12b40:	bhi	12e44 <__assert_fail@plt+0x1da4>
   12b44:	add	r1, pc, #0
   12b48:	ldr	pc, [r1, r0, lsl #2]
   12b4c:	muleq	r1, r4, sp
   12b50:	andeq	r2, r1, r4, asr #28
   12b54:	andeq	r2, r1, r4, asr #28
   12b58:	andeq	r2, r1, r4, asr #28
   12b5c:	andeq	r2, r1, r4, asr #28
   12b60:	andeq	r2, r1, r4, asr #28
   12b64:	andeq	r2, r1, r4, asr #28
   12b68:	andeq	r2, r1, r4, asr #28
   12b6c:	andeq	r2, r1, r4, asr #28
   12b70:	andeq	r2, r1, r4, asr #28
   12b74:	andeq	r2, r1, r4, asr #28
   12b78:	andeq	r2, r1, r4, asr #28
   12b7c:	andeq	r2, r1, r4, asr #28
   12b80:	andeq	r2, r1, r4, asr #28
   12b84:	andeq	r2, r1, r4, asr #28
   12b88:	andeq	r2, r1, r4, asr #28
   12b8c:	andeq	r2, r1, r4, asr #28
   12b90:	andeq	r2, r1, r4, asr #28
   12b94:	andeq	r2, r1, r4, asr #28
   12b98:	andeq	r2, r1, r4, asr #28
   12b9c:	andeq	r2, r1, r4, asr #28
   12ba0:	andeq	r2, r1, r4, asr #28
   12ba4:	andeq	r2, r1, r4, asr #28
   12ba8:	andeq	r2, r1, r4, asr #28
   12bac:	andeq	r2, r1, r4, asr #28
   12bb0:	andeq	r2, r1, r4, asr #28
   12bb4:	andeq	r2, r1, r4, asr #28
   12bb8:	andeq	r2, r1, r4, asr #28
   12bbc:	andeq	r2, r1, r4, asr #28
   12bc0:	andeq	r2, r1, r4, asr #28
   12bc4:	andeq	r2, r1, r4, asr #28
   12bc8:	andeq	r2, r1, r4, asr #28
   12bcc:	andeq	r2, r1, r4, asr #28
   12bd0:	andeq	r2, r1, r4, asr #28
   12bd4:	andeq	r2, r1, r4, asr #28
   12bd8:	andeq	r2, r1, r4, asr #28
   12bdc:	andeq	r2, r1, r4, asr #28
   12be0:	andeq	r2, r1, r4, asr #28
   12be4:	andeq	r2, r1, r4, asr #28
   12be8:	andeq	r2, r1, r4, asr #28
   12bec:	andeq	r2, r1, r4, asr #28
   12bf0:	andeq	r2, r1, r4, asr #28
   12bf4:	andeq	r2, r1, r4, asr #28
   12bf8:	andeq	r2, r1, r4, asr #28
   12bfc:	andeq	r2, r1, r4, asr #28
   12c00:	andeq	r2, r1, r4, asr #28
   12c04:	andeq	r2, r1, r4, asr #28
   12c08:	andeq	r2, r1, r4, asr #28
   12c0c:	andeq	r2, r1, r8, lsr #26
   12c10:	andeq	r2, r1, r8, lsr #26
   12c14:	andeq	r2, r1, r8, lsr #26
   12c18:	andeq	r2, r1, r8, lsr #26
   12c1c:	andeq	r2, r1, r8, lsr #26
   12c20:	andeq	r2, r1, r8, lsr #26
   12c24:	andeq	r2, r1, r8, lsr #26
   12c28:	andeq	r2, r1, r8, lsr #26
   12c2c:	andeq	r2, r1, r4, asr #28
   12c30:	andeq	r2, r1, r4, asr #28
   12c34:	andeq	r2, r1, r4, asr #28
   12c38:	andeq	r2, r1, r4, asr #28
   12c3c:	andeq	r2, r1, r4, asr #28
   12c40:	andeq	r2, r1, r4, asr #28
   12c44:	andeq	r2, r1, r4, asr #28
   12c48:	andeq	r2, r1, r4, asr #28
   12c4c:	andeq	r2, r1, r4, asr #28
   12c50:	andeq	r2, r1, r4, asr #28
   12c54:	andeq	r2, r1, r4, asr #28
   12c58:	andeq	r2, r1, r4, asr #28
   12c5c:	andeq	r2, r1, r4, asr #28
   12c60:	andeq	r2, r1, r4, asr #28
   12c64:	andeq	r2, r1, r4, asr #28
   12c68:	andeq	r2, r1, r4, asr #28
   12c6c:	andeq	r2, r1, r4, asr #28
   12c70:	andeq	r2, r1, r4, asr #28
   12c74:	andeq	r2, r1, r4, asr #28
   12c78:	andeq	r2, r1, r4, asr #28
   12c7c:	andeq	r2, r1, r4, asr #28
   12c80:	andeq	r2, r1, r4, asr #28
   12c84:	andeq	r2, r1, r4, asr #28
   12c88:	andeq	r2, r1, r4, asr #28
   12c8c:	andeq	r2, r1, r4, asr #28
   12c90:	andeq	r2, r1, r4, asr #28
   12c94:	andeq	r2, r1, r4, asr #28
   12c98:	andeq	r2, r1, r4, asr #28
   12c9c:	andeq	r2, r1, r4, asr #28
   12ca0:	andeq	r2, r1, r4, asr #28
   12ca4:	andeq	r2, r1, r4, asr #28
   12ca8:	andeq	r2, r1, r4, asr #28
   12cac:	andeq	r2, r1, r4, asr #28
   12cb0:	andeq	r2, r1, r4, asr #28
   12cb4:	andeq	r2, r1, r4, asr #28
   12cb8:	andeq	r2, r1, r4, asr #28
   12cbc:	andeq	r2, r1, r4, asr #28
   12cc0:	andeq	r2, r1, r4, asr #28
   12cc4:	andeq	r2, r1, r4, asr #28
   12cc8:	andeq	r2, r1, r4, asr #28
   12ccc:	andeq	r2, r1, r4, asr #28
   12cd0:	andeq	r2, r1, r0, asr #28
   12cd4:	andeq	r2, r1, r4, lsl #27
   12cd8:	andeq	r2, r1, r4, asr #28
   12cdc:	andeq	r2, r1, r4, asr #28
   12ce0:	andeq	r2, r1, r4, asr #28
   12ce4:	ldrdeq	r2, [r1], -r4
   12ce8:	andeq	r2, r1, r4, asr #28
   12cec:	andeq	r2, r1, r4, asr #28
   12cf0:	andeq	r2, r1, r4, asr #28
   12cf4:	andeq	r2, r1, r4, asr #28
   12cf8:	andeq	r2, r1, r4, asr #28
   12cfc:	andeq	r2, r1, r4, asr #28
   12d00:	andeq	r2, r1, r4, asr #28
   12d04:	andeq	r2, r1, ip, lsl #27
   12d08:	andeq	r2, r1, r4, asr #28
   12d0c:	andeq	r2, r1, r4, asr #28
   12d10:	andeq	r2, r1, r4, asr #28
   12d14:	andeq	r2, r1, ip, ror sp
   12d18:	andeq	r2, r1, r4, asr #28
   12d1c:	andeq	r2, r1, r0, lsr lr
   12d20:	andeq	r2, r1, r4, asr #28
   12d24:	andeq	r2, r1, r8, lsr lr
   12d28:	add	r6, r5, #2
   12d2c:	sub	r0, r0, #48	; 0x30
   12d30:	ldrb	r1, [r7, r6]
   12d34:	and	r2, r1, #248	; 0xf8
   12d38:	cmp	r2, #48	; 0x30
   12d3c:	bne	12e44 <__assert_fail@plt+0x1da4>
   12d40:	add	r0, r1, r0, lsl #3
   12d44:	add	r5, r5, #3
   12d48:	sub	r8, r0, #48	; 0x30
   12d4c:	ldrb	r0, [r7, r5]
   12d50:	and	r1, r0, #248	; 0xf8
   12d54:	cmp	r1, #48	; 0x30
   12d58:	bne	12e20 <__assert_fail@plt+0x1d80>
   12d5c:	uxtb	r1, r8
   12d60:	add	r0, r0, r1, lsl #3
   12d64:	sub	r0, r0, #48	; 0x30
   12d68:	cmp	r0, #255	; 0xff
   12d6c:	bgt	12ddc <__assert_fail@plt+0x1d3c>
   12d70:	mov	r5, r6
   12d74:	mov	r8, #1
   12d78:	b	12e44 <__assert_fail@plt+0x1da4>
   12d7c:	mov	r0, #13
   12d80:	b	12e44 <__assert_fail@plt+0x1da4>
   12d84:	mov	r0, #8
   12d88:	b	12e44 <__assert_fail@plt+0x1da4>
   12d8c:	mov	r0, #10
   12d90:	b	12e44 <__assert_fail@plt+0x1da4>
   12d94:	movw	r1, #36977	; 0x9071
   12d98:	mov	r0, #0
   12d9c:	mov	r2, #5
   12da0:	movt	r1, #1
   12da4:	bl	10ee4 <dcgettext@plt>
   12da8:	mov	r2, r0
   12dac:	mov	r0, #0
   12db0:	mov	r1, #0
   12db4:	bl	10f50 <error@plt>
   12db8:	ldr	ip, [sp, #52]	; 0x34
   12dbc:	ldr	r4, [fp, #-44]	; 0xffffffd4
   12dc0:	mov	r0, #0
   12dc4:	sub	r5, r5, #1
   12dc8:	strb	r0, [ip, sl]
   12dcc:	mov	r0, #92	; 0x5c
   12dd0:	b	12e44 <__assert_fail@plt+0x1da4>
   12dd4:	mov	r0, #12
   12dd8:	b	12e44 <__assert_fail@plt+0x1da4>
   12ddc:	movw	r1, #36877	; 0x900d
   12de0:	mov	r0, #0
   12de4:	mov	r2, #5
   12de8:	movt	r1, #1
   12dec:	bl	10ee4 <dcgettext@plt>
   12df0:	mov	r2, r0
   12df4:	ldrb	r3, [r7, r9]
   12df8:	ldrb	r0, [r7, r6]
   12dfc:	ldrb	r1, [r7, r5]
   12e00:	stm	sp, {r0, r1, r3}
   12e04:	str	r0, [sp, #12]
   12e08:	str	r1, [sp, #16]
   12e0c:	mov	r0, #0
   12e10:	mov	r1, #0
   12e14:	bl	10f50 <error@plt>
   12e18:	ldr	r4, [fp, #-44]	; 0xffffffd4
   12e1c:	ldr	ip, [sp, #52]	; 0x34
   12e20:	mov	r0, r8
   12e24:	mov	r5, r9
   12e28:	mov	r8, #1
   12e2c:	b	12e44 <__assert_fail@plt+0x1da4>
   12e30:	mov	r0, #9
   12e34:	b	12e44 <__assert_fail@plt+0x1da4>
   12e38:	mov	r0, #11
   12e3c:	b	12e44 <__assert_fail@plt+0x1da4>
   12e40:	mov	r0, #7
   12e44:	add	r5, r5, #1
   12e48:	b	12b0c <__assert_fail@plt+0x1a6c>
   12e4c:	mov	r8, #0
   12e50:	cmp	sl, #3
   12e54:	bcc	13478 <__assert_fail@plt+0x23d8>
   12e58:	mvn	r0, #2
   12e5c:	mov	r9, #2
   12e60:	mov	r8, #0
   12e64:	sub	r0, r0, r4
   12e68:	str	r0, [sp, #32]
   12e6c:	add	r0, ip, #3
   12e70:	str	r0, [sp, #44]	; 0x2c
   12e74:	add	r0, r4, #3
   12e78:	str	r0, [sp, #40]	; 0x28
   12e7c:	sub	r0, sl, #1
   12e80:	str	r0, [fp, #-48]	; 0xffffffd0
   12e84:	add	r0, r4, #2
   12e88:	str	r0, [sp, #36]	; 0x24
   12e8c:	b	13404 <__assert_fail@plt+0x2364>
   12e90:	add	r0, r8, #1
   12e94:	ldrb	r6, [r4, r0]
   12e98:	cmp	r6, #61	; 0x3d
   12e9c:	cmpne	r6, #58	; 0x3a
   12ea0:	bne	132d4 <__assert_fail@plt+0x2234>
   12ea4:	ldrb	r0, [ip, r0]
   12ea8:	cmp	r0, #0
   12eac:	bne	132d4 <__assert_fail@plt+0x2234>
   12eb0:	ldr	r0, [fp, #-48]	; 0xffffffd0
   12eb4:	cmp	r0, r9
   12eb8:	bls	132d4 <__assert_fail@plt+0x2234>
   12ebc:	add	r0, r9, #2
   12ec0:	mov	r7, r0
   12ec4:	add	r0, r4, r0
   12ec8:	ldrb	r1, [r0, #-2]
   12ecc:	cmp	r1, r6
   12ed0:	ldrbeq	r0, [r0, #-1]
   12ed4:	cmpeq	r0, #93	; 0x5d
   12ed8:	beq	12ef4 <__assert_fail@plt+0x1e54>
   12edc:	ldr	r2, [fp, #-48]	; 0xffffffd0
   12ee0:	sub	r1, r7, #1
   12ee4:	add	r0, r7, #1
   12ee8:	cmp	r1, r2
   12eec:	bcc	12ec0 <__assert_fail@plt+0x1e20>
   12ef0:	b	132d4 <__assert_fail@plt+0x2234>
   12ef4:	add	r0, ip, r7
   12ef8:	ldrb	r1, [r0, #-2]
   12efc:	cmp	r1, #0
   12f00:	bne	12edc <__assert_fail@plt+0x1e3c>
   12f04:	ldrb	r0, [r0, #-1]
   12f08:	cmp	r0, #0
   12f0c:	bne	12edc <__assert_fail@plt+0x1e3c>
   12f10:	mvn	r0, #2
   12f14:	sub	r0, r0, r8
   12f18:	add	r2, r0, r7
   12f1c:	add	r3, r2, #3
   12f20:	cmp	r3, #4
   12f24:	beq	13610 <__assert_fail@plt+0x2570>
   12f28:	ldr	r1, [sp, #36]	; 0x24
   12f2c:	cmp	r6, #58	; 0x3a
   12f30:	add	r0, r1, r8
   12f34:	bne	13200 <__assert_fail@plt+0x2160>
   12f38:	movw	r1, #37282	; 0x91a2
   12f3c:	sub	r2, r2, #1
   12f40:	mov	r4, r0
   12f44:	str	r3, [sp, #24]
   12f48:	movt	r1, #1
   12f4c:	str	r2, [sp, #20]
   12f50:	bl	1107c <strncmp@plt>
   12f54:	ldr	r1, [sp, #24]
   12f58:	cmp	r1, #9
   12f5c:	moveq	r2, #0
   12f60:	cmpeq	r0, #0
   12f64:	beq	13244 <__assert_fail@plt+0x21a4>
   12f68:	ldr	r2, [sp, #20]
   12f6c:	movw	r1, #37288	; 0x91a8
   12f70:	mov	r0, r4
   12f74:	str	r4, [sp, #28]
   12f78:	movt	r1, #1
   12f7c:	bl	1107c <strncmp@plt>
   12f80:	ldr	r1, [sp, #24]
   12f84:	cmp	r1, #9
   12f88:	ldr	r1, [sp, #28]
   12f8c:	moveq	r2, #1
   12f90:	cmpeq	r0, #0
   12f94:	beq	13244 <__assert_fail@plt+0x21a4>
   12f98:	ldr	r2, [sp, #20]
   12f9c:	mov	r0, r1
   12fa0:	movw	r1, #37294	; 0x91ae
   12fa4:	movt	r1, #1
   12fa8:	bl	1107c <strncmp@plt>
   12fac:	ldr	r1, [sp, #24]
   12fb0:	cmp	r1, #9
   12fb4:	ldr	r1, [sp, #28]
   12fb8:	moveq	r2, #2
   12fbc:	cmpeq	r0, #0
   12fc0:	beq	13244 <__assert_fail@plt+0x21a4>
   12fc4:	ldr	r2, [sp, #20]
   12fc8:	mov	r0, r1
   12fcc:	movw	r1, #37300	; 0x91b4
   12fd0:	movt	r1, #1
   12fd4:	bl	1107c <strncmp@plt>
   12fd8:	ldr	r1, [sp, #24]
   12fdc:	cmp	r1, #9
   12fe0:	ldr	r1, [sp, #28]
   12fe4:	moveq	r2, #3
   12fe8:	cmpeq	r0, #0
   12fec:	beq	13244 <__assert_fail@plt+0x21a4>
   12ff0:	ldr	r2, [sp, #20]
   12ff4:	mov	r0, r1
   12ff8:	movw	r1, #37343	; 0x91df
   12ffc:	movt	r1, #1
   13000:	bl	1107c <strncmp@plt>
   13004:	ldr	r1, [sp, #24]
   13008:	cmp	r1, #9
   1300c:	ldr	r1, [sp, #28]
   13010:	moveq	r2, #4
   13014:	cmpeq	r0, #0
   13018:	beq	13244 <__assert_fail@plt+0x21a4>
   1301c:	ldr	r2, [sp, #20]
   13020:	mov	r0, r1
   13024:	movw	r1, #37306	; 0x91ba
   13028:	movt	r1, #1
   1302c:	bl	1107c <strncmp@plt>
   13030:	ldr	r1, [sp, #24]
   13034:	cmp	r1, #9
   13038:	ldr	r1, [sp, #28]
   1303c:	moveq	r2, #5
   13040:	cmpeq	r0, #0
   13044:	beq	13244 <__assert_fail@plt+0x21a4>
   13048:	ldr	r2, [sp, #20]
   1304c:	mov	r0, r1
   13050:	movw	r1, #37312	; 0x91c0
   13054:	movt	r1, #1
   13058:	bl	1107c <strncmp@plt>
   1305c:	ldr	r1, [sp, #24]
   13060:	cmp	r1, #9
   13064:	ldr	r1, [sp, #28]
   13068:	moveq	r2, #6
   1306c:	cmpeq	r0, #0
   13070:	beq	13244 <__assert_fail@plt+0x21a4>
   13074:	ldr	r2, [sp, #20]
   13078:	mov	r0, r1
   1307c:	movw	r1, #37318	; 0x91c6
   13080:	movt	r1, #1
   13084:	bl	1107c <strncmp@plt>
   13088:	ldr	r1, [sp, #24]
   1308c:	cmp	r1, #9
   13090:	ldr	r1, [sp, #28]
   13094:	moveq	r2, #7
   13098:	cmpeq	r0, #0
   1309c:	beq	13244 <__assert_fail@plt+0x21a4>
   130a0:	ldr	r2, [sp, #20]
   130a4:	mov	r0, r1
   130a8:	movw	r1, #37324	; 0x91cc
   130ac:	movt	r1, #1
   130b0:	bl	1107c <strncmp@plt>
   130b4:	ldr	r1, [sp, #24]
   130b8:	cmp	r1, #9
   130bc:	ldr	r1, [sp, #28]
   130c0:	moveq	r2, #8
   130c4:	cmpeq	r0, #0
   130c8:	beq	13244 <__assert_fail@plt+0x21a4>
   130cc:	ldr	r2, [sp, #20]
   130d0:	mov	r0, r1
   130d4:	movw	r1, #37330	; 0x91d2
   130d8:	movt	r1, #1
   130dc:	bl	1107c <strncmp@plt>
   130e0:	ldr	r1, [sp, #24]
   130e4:	cmp	r1, #9
   130e8:	ldr	r1, [sp, #28]
   130ec:	moveq	r2, #9
   130f0:	cmpeq	r0, #0
   130f4:	beq	13244 <__assert_fail@plt+0x21a4>
   130f8:	ldr	r2, [sp, #20]
   130fc:	mov	r0, r1
   13100:	movw	r1, #37336	; 0x91d8
   13104:	movt	r1, #1
   13108:	bl	1107c <strncmp@plt>
   1310c:	ldr	r4, [sp, #24]
   13110:	ldr	r1, [sp, #28]
   13114:	cmp	r4, #9
   13118:	moveq	r2, #10
   1311c:	cmpeq	r0, #0
   13120:	beq	13244 <__assert_fail@plt+0x21a4>
   13124:	ldr	r2, [sp, #20]
   13128:	mov	r0, r1
   1312c:	movw	r1, #37342	; 0x91de
   13130:	movt	r1, #1
   13134:	bl	1107c <strncmp@plt>
   13138:	ldr	r1, [sp, #28]
   1313c:	cmp	r4, #10
   13140:	moveq	r2, #11
   13144:	cmpeq	r0, #0
   13148:	beq	13244 <__assert_fail@plt+0x21a4>
   1314c:	ldr	r4, [fp, #-44]	; 0xffffffd4
   13150:	mov	r0, r1
   13154:	ldr	ip, [sp, #52]	; 0x34
   13158:	ldrb	r1, [r4, r9]
   1315c:	cmp	r1, #42	; 0x2a
   13160:	ldrbeq	r1, [ip, r9]
   13164:	cmpeq	r1, #0
   13168:	bne	13698 <__assert_fail@plt+0x25f8>
   1316c:	add	r2, r9, #1
   13170:	cmp	r2, sl
   13174:	bcs	13698 <__assert_fail@plt+0x25f8>
   13178:	ldrb	r1, [r4, r2]
   1317c:	mov	r3, r2
   13180:	sub	r2, r1, #48	; 0x30
   13184:	cmp	r2, #9
   13188:	bhi	1319c <__assert_fail@plt+0x20fc>
   1318c:	ldrb	lr, [ip, r3]
   13190:	add	r2, r3, #1
   13194:	cmp	lr, #0
   13198:	beq	13170 <__assert_fail@plt+0x20d0>
   1319c:	cmp	r1, #93	; 0x5d
   131a0:	ldrbeq	r1, [ip, r3]
   131a4:	cmpeq	r1, #0
   131a8:	beq	132d4 <__assert_fail@plt+0x2234>
   131ac:	b	13698 <__assert_fail@plt+0x25f8>
   131b0:	add	r0, r4, r8
   131b4:	ldrb	r7, [r0, #2]
   131b8:	cmp	r7, r5
   131bc:	bcc	134e4 <__assert_fail@plt+0x2444>
   131c0:	mov	r0, #24
   131c4:	bl	16a98 <__assert_fail@plt+0x59f8>
   131c8:	mov	r2, #1
   131cc:	mov	r1, #0
   131d0:	str	r2, [r0]
   131d4:	str	r1, [r0, #4]
   131d8:	strb	r5, [r0, #8]
   131dc:	strb	r7, [r0, #9]
   131e0:	ldr	r2, [sp, #48]	; 0x30
   131e4:	ldr	r1, [r2, #4]
   131e8:	cmp	r1, #0
   131ec:	beq	136f8 <__assert_fail@plt+0x2658>
   131f0:	str	r0, [r1, #4]
   131f4:	str	r0, [r2, #4]
   131f8:	add	r8, r8, #3
   131fc:	b	13464 <__assert_fail@plt+0x23c4>
   13200:	cmp	r3, #5
   13204:	str	r0, [sp, #28]
   13208:	bne	13280 <__assert_fail@plt+0x21e0>
   1320c:	mov	r0, #24
   13210:	bl	16a98 <__assert_fail@plt+0x59f8>
   13214:	mov	r2, #3
   13218:	mov	r1, #0
   1321c:	str	r2, [r0]
   13220:	str	r1, [r0, #4]
   13224:	ldr	r1, [sp, #28]
   13228:	ldr	r2, [sp, #48]	; 0x30
   1322c:	ldrb	r1, [r1]
   13230:	strb	r1, [r0, #8]
   13234:	ldr	r1, [r2, #4]
   13238:	cmp	r1, #0
   1323c:	bne	13270 <__assert_fail@plt+0x21d0>
   13240:	b	13718 <__assert_fail@plt+0x2678>
   13244:	mov	r0, #24
   13248:	mov	r4, r2
   1324c:	bl	16a98 <__assert_fail@plt+0x59f8>
   13250:	mov	r1, #2
   13254:	str	r1, [r0]
   13258:	mov	r1, #0
   1325c:	stmib	r0, {r1, r4}
   13260:	ldr	r2, [sp, #48]	; 0x30
   13264:	ldr	r1, [r2, #4]
   13268:	cmp	r1, #0
   1326c:	beq	13738 <__assert_fail@plt+0x2698>
   13270:	str	r0, [r1, #4]
   13274:	str	r0, [r2, #4]
   13278:	mov	r8, r7
   1327c:	b	13464 <__assert_fail@plt+0x23c4>
   13280:	ldrb	r0, [r4, r9]
   13284:	cmp	r0, #42	; 0x2a
   13288:	ldrbeq	r0, [ip, r9]
   1328c:	cmpeq	r0, #0
   13290:	bne	135cc <__assert_fail@plt+0x252c>
   13294:	add	r2, r9, #1
   13298:	cmp	r2, sl
   1329c:	bcs	135cc <__assert_fail@plt+0x252c>
   132a0:	ldrb	r1, [r4, r2]
   132a4:	mov	r0, r2
   132a8:	sub	r2, r1, #48	; 0x30
   132ac:	cmp	r2, #9
   132b0:	bhi	132c4 <__assert_fail@plt+0x2224>
   132b4:	ldrb	r3, [ip, r0]
   132b8:	add	r2, r0, #1
   132bc:	cmp	r3, #0
   132c0:	beq	13298 <__assert_fail@plt+0x21f8>
   132c4:	cmp	r1, #93	; 0x5d
   132c8:	ldrbeq	r0, [ip, r0]
   132cc:	cmpeq	r0, #0
   132d0:	bne	135cc <__assert_fail@plt+0x252c>
   132d4:	add	r0, r8, #2
   132d8:	cmp	r0, sl
   132dc:	bcs	136d8 <__assert_fail@plt+0x2638>
   132e0:	ldrb	r1, [r4, r0]
   132e4:	cmp	r1, #42	; 0x2a
   132e8:	ldrbeq	r0, [ip, r0]
   132ec:	cmpeq	r0, #0
   132f0:	bne	13418 <__assert_fail@plt+0x2378>
   132f4:	add	r0, r8, #3
   132f8:	cmp	r0, sl
   132fc:	bcs	13418 <__assert_fail@plt+0x2378>
   13300:	ldr	r1, [sp, #44]	; 0x2c
   13304:	ldr	r2, [sp, #40]	; 0x28
   13308:	mov	r7, #0
   1330c:	add	r1, r1, r8
   13310:	add	r2, r2, r8
   13314:	ldrb	r3, [r1, r7]
   13318:	cmp	r3, #0
   1331c:	bne	13418 <__assert_fail@plt+0x2378>
   13320:	ldrb	r3, [r2, r7]
   13324:	cmp	r3, #93	; 0x5d
   13328:	beq	13344 <__assert_fail@plt+0x22a4>
   1332c:	add	r7, r7, #1
   13330:	add	r3, r8, r7
   13334:	add	r3, r3, #3
   13338:	cmp	r3, sl
   1333c:	bcc	13314 <__assert_fail@plt+0x2274>
   13340:	b	13418 <__assert_fail@plt+0x2378>
   13344:	cmp	r7, #0
   13348:	beq	133ac <__assert_fail@plt+0x230c>
   1334c:	ldrb	r0, [r4, r0]!
   13350:	mov	r1, #0
   13354:	mov	r2, #10
   13358:	sub	r3, fp, #40	; 0x28
   1335c:	str	r1, [sp]
   13360:	sub	r1, fp, #32
   13364:	cmp	r0, #48	; 0x30
   13368:	mov	r0, r4
   1336c:	movweq	r2, #8
   13370:	bl	1703c <__assert_fail@plt+0x5f9c>
   13374:	cmp	r0, #0
   13378:	bne	13628 <__assert_fail@plt+0x2588>
   1337c:	ldr	r5, [fp, #-40]	; 0xffffffd8
   13380:	ldr	r9, [fp, #-36]	; 0xffffffdc
   13384:	and	r0, r5, r9
   13388:	cmn	r0, #1
   1338c:	beq	13628 <__assert_fail@plt+0x2588>
   13390:	ldr	r0, [sp, #32]
   13394:	ldr	r1, [fp, #-32]	; 0xffffffe0
   13398:	sub	r0, r0, r8
   1339c:	add	r0, r1, r0
   133a0:	cmp	r0, r7
   133a4:	beq	133bc <__assert_fail@plt+0x231c>
   133a8:	b	13628 <__assert_fail@plt+0x2588>
   133ac:	mov	r5, #0
   133b0:	mov	r9, #0
   133b4:	str	r5, [fp, #-36]	; 0xffffffdc
   133b8:	str	r5, [fp, #-40]	; 0xffffffd8
   133bc:	mov	r0, #24
   133c0:	bl	16a98 <__assert_fail@plt+0x59f8>
   133c4:	mov	r2, #4
   133c8:	mov	r1, #0
   133cc:	str	r2, [r0]
   133d0:	str	r1, [r0, #4]
   133d4:	strb	r6, [r0, #8]
   133d8:	str	r5, [r0, #16]
   133dc:	str	r9, [r0, #20]
   133e0:	ldr	r2, [sp, #48]	; 0x30
   133e4:	ldr	r1, [r2, #4]
   133e8:	cmp	r1, #0
   133ec:	beq	13758 <__assert_fail@plt+0x26b8>
   133f0:	str	r0, [r1, #4]
   133f4:	str	r0, [r2, #4]
   133f8:	add	r0, r8, r7
   133fc:	add	r8, r0, #4
   13400:	b	13464 <__assert_fail@plt+0x23c4>
   13404:	ldrb	r5, [r4, r8]
   13408:	cmp	r5, #91	; 0x5b
   1340c:	ldrbeq	r0, [ip, r8]
   13410:	cmpeq	r0, #0
   13414:	beq	12e90 <__assert_fail@plt+0x1df0>
   13418:	add	r6, r8, #1
   1341c:	ldrb	r0, [r4, r6]
   13420:	cmp	r0, #45	; 0x2d
   13424:	ldrbeq	r0, [ip, r6]
   13428:	cmpeq	r0, #0
   1342c:	beq	131b0 <__assert_fail@plt+0x2110>
   13430:	mov	r0, #24
   13434:	bl	16a98 <__assert_fail@plt+0x59f8>
   13438:	ldr	r2, [sp, #48]	; 0x30
   1343c:	mov	r1, #0
   13440:	str	r1, [r0]
   13444:	str	r1, [r0, #4]
   13448:	strb	r5, [r0, #8]
   1344c:	ldr	r1, [r2, #4]
   13450:	cmp	r1, #0
   13454:	beq	136b8 <__assert_fail@plt+0x2618>
   13458:	mov	r8, r6
   1345c:	str	r0, [r1, #4]
   13460:	str	r0, [r2, #4]
   13464:	ldr	ip, [sp, #52]	; 0x34
   13468:	ldr	r4, [fp, #-44]	; 0xffffffd4
   1346c:	add	r9, r8, #2
   13470:	cmp	r9, sl
   13474:	bcc	13404 <__assert_fail@plt+0x2364>
   13478:	mov	r9, #1
   1347c:	cmp	r8, sl
   13480:	bcs	134c8 <__assert_fail@plt+0x2428>
   13484:	ldr	r7, [sp, #48]	; 0x30
   13488:	mov	r5, #0
   1348c:	ldrb	r6, [r4, r8]
   13490:	mov	r0, #24
   13494:	bl	16a98 <__assert_fail@plt+0x59f8>
   13498:	str	r5, [r0]
   1349c:	str	r5, [r0, #4]
   134a0:	strb	r6, [r0, #8]
   134a4:	ldr	r1, [r7, #4]
   134a8:	cmp	r1, #0
   134ac:	beq	136b8 <__assert_fail@plt+0x2618>
   134b0:	ldr	r4, [fp, #-44]	; 0xffffffd4
   134b4:	add	r8, r8, #1
   134b8:	str	r0, [r1, #4]
   134bc:	str	r0, [r7, #4]
   134c0:	cmp	r8, sl
   134c4:	bcc	1348c <__assert_fail@plt+0x23ec>
   134c8:	mov	r0, r4
   134cc:	bl	143b8 <__assert_fail@plt+0x3318>
   134d0:	ldr	r0, [sp, #52]	; 0x34
   134d4:	bl	143b8 <__assert_fail@plt+0x3318>
   134d8:	mov	r0, r9
   134dc:	sub	sp, fp, #28
   134e0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   134e4:	mov	r0, #5
   134e8:	bl	16a98 <__assert_fail@plt+0x59f8>
   134ec:	mov	r8, r0
   134f0:	bl	10fb0 <__ctype_b_loc@plt>
   134f4:	mov	r9, r0
   134f8:	ldr	r0, [r0]
   134fc:	add	r0, r0, r5, lsl #1
   13500:	ldrb	r0, [r0, #1]
   13504:	tst	r0, #64	; 0x40
   13508:	bne	1352c <__assert_fail@plt+0x248c>
   1350c:	movw	r3, #37372	; 0x91fc
   13510:	mov	r0, r8
   13514:	mov	r1, #1
   13518:	mov	r2, #5
   1351c:	str	r5, [sp]
   13520:	movt	r3, #1
   13524:	bl	10fec <__sprintf_chk@plt>
   13528:	b	13538 <__assert_fail@plt+0x2498>
   1352c:	mov	r0, #0
   13530:	strb	r0, [r8, #1]
   13534:	strb	r5, [r8]
   13538:	mov	r0, #5
   1353c:	bl	16a98 <__assert_fail@plt+0x59f8>
   13540:	mov	r6, r0
   13544:	ldr	r0, [r9]
   13548:	add	r0, r0, r7, lsl #1
   1354c:	ldrb	r0, [r0, #1]
   13550:	tst	r0, #64	; 0x40
   13554:	bne	13578 <__assert_fail@plt+0x24d8>
   13558:	movw	r3, #37372	; 0x91fc
   1355c:	mov	r0, r6
   13560:	mov	r1, #1
   13564:	mov	r2, #5
   13568:	str	r7, [sp]
   1356c:	movt	r3, #1
   13570:	bl	10fec <__sprintf_chk@plt>
   13574:	b	13584 <__assert_fail@plt+0x24e4>
   13578:	mov	r0, #0
   1357c:	strb	r0, [r6, #1]
   13580:	strb	r7, [r6]
   13584:	movw	r1, #37675	; 0x932b
   13588:	mov	r0, #0
   1358c:	mov	r2, #5
   13590:	mov	r9, #0
   13594:	movt	r1, #1
   13598:	bl	10ee4 <dcgettext@plt>
   1359c:	mov	r2, r0
   135a0:	mov	r0, #0
   135a4:	mov	r1, #0
   135a8:	mov	r3, r8
   135ac:	str	r6, [sp]
   135b0:	bl	10f50 <error@plt>
   135b4:	mov	r0, r8
   135b8:	bl	143b8 <__assert_fail@plt+0x3318>
   135bc:	mov	r0, r6
   135c0:	bl	143b8 <__assert_fail@plt+0x3318>
   135c4:	ldr	r4, [fp, #-44]	; 0xffffffd4
   135c8:	b	134c8 <__assert_fail@plt+0x2428>
   135cc:	sub	r0, r7, r8
   135d0:	sub	r1, r0, #4
   135d4:	ldr	r0, [sp, #28]
   135d8:	bl	13e40 <__assert_fail@plt+0x2da0>
   135dc:	movw	r1, #37148	; 0x911c
   135e0:	mov	r6, r0
   135e4:	mov	r0, #0
   135e8:	mov	r2, #5
   135ec:	mov	r9, #0
   135f0:	movt	r1, #1
   135f4:	bl	10ee4 <dcgettext@plt>
   135f8:	mov	r2, r0
   135fc:	mov	r0, #0
   13600:	mov	r1, #0
   13604:	mov	r3, r6
   13608:	bl	10f50 <error@plt>
   1360c:	b	135bc <__assert_fail@plt+0x251c>
   13610:	mov	r9, #0
   13614:	cmp	r6, #58	; 0x3a
   13618:	bne	13670 <__assert_fail@plt+0x25d0>
   1361c:	movw	r1, #37042	; 0x90b2
   13620:	movt	r1, #1
   13624:	b	13678 <__assert_fail@plt+0x25d8>
   13628:	mov	r0, r4
   1362c:	mov	r1, r7
   13630:	bl	13e40 <__assert_fail@plt+0x2da0>
   13634:	movw	r1, #37564	; 0x92bc
   13638:	mov	r6, r0
   1363c:	mov	r9, #0
   13640:	movt	r1, #1
   13644:	mov	r0, #0
   13648:	mov	r2, #5
   1364c:	bl	10ee4 <dcgettext@plt>
   13650:	mov	r8, r0
   13654:	mov	r0, r6
   13658:	bl	1635c <__assert_fail@plt+0x52bc>
   1365c:	mov	r3, r0
   13660:	mov	r0, #0
   13664:	mov	r1, #0
   13668:	mov	r2, r8
   1366c:	b	13608 <__assert_fail@plt+0x2568>
   13670:	movw	r1, #37078	; 0x90d6
   13674:	movt	r1, #1
   13678:	mov	r0, #0
   1367c:	mov	r2, #5
   13680:	bl	10ee4 <dcgettext@plt>
   13684:	mov	r2, r0
   13688:	mov	r0, #0
   1368c:	mov	r1, #0
   13690:	bl	10f50 <error@plt>
   13694:	b	135c4 <__assert_fail@plt+0x2524>
   13698:	sub	r1, r7, r8
   1369c:	sub	r1, r1, #4
   136a0:	bl	13e40 <__assert_fail@plt+0x2da0>
   136a4:	movw	r1, #37121	; 0x9101
   136a8:	mov	r6, r0
   136ac:	mov	r9, #0
   136b0:	movt	r1, #1
   136b4:	b	13644 <__assert_fail@plt+0x25a4>
   136b8:	movw	r0, #37205	; 0x9155
   136bc:	movw	r1, #36432	; 0x8e50
   136c0:	movw	r3, #37811	; 0x93b3
   136c4:	movw	r2, #649	; 0x289
   136c8:	movt	r0, #1
   136cc:	movt	r1, #1
   136d0:	movt	r3, #1
   136d4:	bl	110a0 <__assert_fail@plt>
   136d8:	movw	r0, #37445	; 0x9245
   136dc:	movw	r1, #36432	; 0x8e50
   136e0:	movw	r3, #37469	; 0x925d
   136e4:	mov	r2, #784	; 0x310
   136e8:	movt	r0, #1
   136ec:	movt	r1, #1
   136f0:	movt	r3, #1
   136f4:	bl	110a0 <__assert_fail@plt>
   136f8:	movw	r0, #37205	; 0x9155
   136fc:	movw	r1, #36432	; 0x8e50
   13700:	movw	r3, #37742	; 0x936e
   13704:	movw	r2, #679	; 0x2a7
   13708:	movt	r0, #1
   1370c:	movt	r1, #1
   13710:	movt	r3, #1
   13714:	bl	110a0 <__assert_fail@plt>
   13718:	movw	r0, #37205	; 0x9155
   1371c:	movw	r1, #36432	; 0x8e50
   13720:	movw	r3, #37378	; 0x9202
   13724:	movw	r2, #743	; 0x2e7
   13728:	movt	r0, #1
   1372c:	movt	r1, #1
   13730:	movt	r3, #1
   13734:	bl	110a0 <__assert_fail@plt>
   13738:	movw	r0, #37205	; 0x9155
   1373c:	movw	r1, #36432	; 0x8e50
   13740:	movw	r3, #37216	; 0x9160
   13744:	movw	r2, #701	; 0x2bd
   13748:	movt	r0, #1
   1374c:	movt	r1, #1
   13750:	movt	r3, #1
   13754:	bl	110a0 <__assert_fail@plt>
   13758:	movw	r0, #37205	; 0x9155
   1375c:	movw	r1, #36432	; 0x8e50
   13760:	movw	r3, #37607	; 0x92e7
   13764:	movw	r2, #721	; 0x2d1
   13768:	movt	r0, #1
   1376c:	movt	r1, #1
   13770:	movt	r3, #1
   13774:	bl	110a0 <__assert_fail@plt>
   13778:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1377c:	add	fp, sp, #28
   13780:	sub	sp, sp, #4
   13784:	movw	r5, #41584	; 0xa270
   13788:	movw	sl, #41328	; 0xa170
   1378c:	mov	r8, r0
   13790:	mvn	r7, #-2147483648	; 0x80000000
   13794:	mov	r0, #0
   13798:	mov	r6, #0
   1379c:	movt	r5, #2
   137a0:	movt	sl, #2
   137a4:	b	137b0 <__assert_fail@plt+0x2710>
   137a8:	mov	r0, r4
   137ac:	mvn	r7, #-2147483648	; 0x80000000
   137b0:	cmp	r0, r6
   137b4:	bcs	13844 <__assert_fail@plt+0x27a4>
   137b8:	cmn	r7, #-2147483647	; 0x80000001
   137bc:	bne	1386c <__assert_fail@plt+0x27cc>
   137c0:	cmp	r6, r0
   137c4:	mov	r4, r0
   137c8:	bls	137ec <__assert_fail@plt+0x274c>
   137cc:	mov	r4, r0
   137d0:	ldrb	r1, [r5, r4]
   137d4:	ldrb	r1, [sl, r1]
   137d8:	cmp	r1, #0
   137dc:	bne	137ec <__assert_fail@plt+0x274c>
   137e0:	add	r4, r4, #2
   137e4:	cmp	r4, r6
   137e8:	bcc	137d0 <__assert_fail@plt+0x2730>
   137ec:	cmp	r4, r6
   137f0:	bne	13808 <__assert_fail@plt+0x2768>
   137f4:	sub	r4, r6, #1
   137f8:	ldrb	r1, [r5, r4]
   137fc:	ldrb	r1, [sl, r1]
   13800:	cmp	r1, #0
   13804:	moveq	r4, r6
   13808:	cmp	r4, r6
   1380c:	bcs	13888 <__assert_fail@plt+0x27e8>
   13810:	ldrb	r9, [r5, r4]
   13814:	sub	r1, r4, r0
   13818:	cmp	r4, #0
   1381c:	add	r7, r1, #1
   13820:	beq	13834 <__assert_fail@plt+0x2794>
   13824:	add	r2, r5, r4
   13828:	ldrb	r2, [r2, #-1]
   1382c:	cmp	r2, r9
   13830:	moveq	r7, r1
   13834:	add	r4, r4, #1
   13838:	cmp	r7, #0
   1383c:	bne	13898 <__assert_fail@plt+0x27f8>
   13840:	b	138bc <__assert_fail@plt+0x281c>
   13844:	mov	r0, r5
   13848:	mov	r1, #8192	; 0x2000
   1384c:	blx	r8
   13850:	cmp	r0, #0
   13854:	subeq	sp, fp, #28
   13858:	popeq	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1385c:	mov	r6, r0
   13860:	mov	r0, #0
   13864:	cmn	r7, #-2147483647	; 0x80000001
   13868:	beq	137c0 <__assert_fail@plt+0x2720>
   1386c:	mov	r9, r7
   13870:	mov	r4, r0
   13874:	cmp	r4, r6
   13878:	mov	r0, r4
   1387c:	mov	r7, r9
   13880:	bcs	137b0 <__assert_fail@plt+0x2710>
   13884:	b	138dc <__assert_fail@plt+0x283c>
   13888:	sub	r7, r6, r0
   1388c:	mvn	r9, #-2147483648	; 0x80000000
   13890:	cmp	r7, #0
   13894:	beq	138bc <__assert_fail@plt+0x281c>
   13898:	movw	r1, #41308	; 0xa15c
   1389c:	add	r0, r5, r0
   138a0:	mov	r2, r7
   138a4:	movt	r1, #2
   138a8:	ldr	r3, [r1]
   138ac:	mov	r1, #1
   138b0:	bl	10ec0 <fwrite_unlocked@plt>
   138b4:	cmp	r0, r7
   138b8:	bne	13900 <__assert_fail@plt+0x2860>
   138bc:	cmn	r9, #-2147483647	; 0x80000001
   138c0:	mov	r0, r4
   138c4:	mvn	r7, #-2147483648	; 0x80000000
   138c8:	beq	137b0 <__assert_fail@plt+0x2710>
   138cc:	cmp	r4, r6
   138d0:	mov	r0, r4
   138d4:	mov	r7, r9
   138d8:	bcs	137b0 <__assert_fail@plt+0x2710>
   138dc:	ldrb	r0, [r5, r4]
   138e0:	cmp	r9, r0
   138e4:	bne	137a8 <__assert_fail@plt+0x2708>
   138e8:	add	r4, r4, #1
   138ec:	cmp	r4, r6
   138f0:	bcc	138dc <__assert_fail@plt+0x283c>
   138f4:	mov	r0, r4
   138f8:	mov	r7, r9
   138fc:	b	137b0 <__assert_fail@plt+0x2710>
   13900:	bl	10fe0 <__errno_location@plt>
   13904:	ldr	r4, [r0]
   13908:	movw	r1, #36394	; 0x8e2a
   1390c:	mov	r0, #0
   13910:	mov	r2, #5
   13914:	movt	r1, #1
   13918:	bl	10ee4 <dcgettext@plt>
   1391c:	mov	r2, r0
   13920:	mov	r0, #1
   13924:	mov	r1, r4
   13928:	bl	10f50 <error@plt>
   1392c:	push	{r4, sl, fp, lr}
   13930:	add	fp, sp, #8
   13934:	mov	r2, r1
   13938:	mov	r1, r0
   1393c:	mov	r0, #0
   13940:	bl	16374 <__assert_fail@plt+0x52d4>
   13944:	cmn	r0, #1
   13948:	popne	{r4, sl, fp, pc}
   1394c:	bl	10fe0 <__errno_location@plt>
   13950:	ldr	r4, [r0]
   13954:	movw	r1, #38806	; 0x9796
   13958:	mov	r0, #0
   1395c:	mov	r2, #5
   13960:	movt	r1, #1
   13964:	bl	10ee4 <dcgettext@plt>
   13968:	mov	r2, r0
   1396c:	mov	r0, #1
   13970:	mov	r1, r4
   13974:	bl	10f50 <error@plt>
   13978:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   1397c:	add	fp, sp, #24
   13980:	movw	r7, #49776	; 0xc270
   13984:	mov	r4, r1
   13988:	mov	r5, r0
   1398c:	add	r8, r0, #1
   13990:	movt	r7, #2
   13994:	mov	r0, #0
   13998:	mov	r1, r5
   1399c:	mov	r2, r4
   139a0:	bl	16374 <__assert_fail@plt+0x52d4>
   139a4:	cmp	r0, #0
   139a8:	popeq	{r4, r5, r6, r7, r8, sl, fp, pc}
   139ac:	cmn	r0, #1
   139b0:	beq	13a2c <__assert_fail@plt+0x298c>
   139b4:	mov	r2, #0
   139b8:	ldrb	r1, [r5, r2]
   139bc:	ldrb	r1, [r7, r1]
   139c0:	cmp	r1, #0
   139c4:	bne	139d4 <__assert_fail@plt+0x2934>
   139c8:	add	r2, r2, #1
   139cc:	cmp	r2, r0
   139d0:	bcc	139b8 <__assert_fail@plt+0x2918>
   139d4:	add	r1, r2, #1
   139d8:	cmp	r1, r0
   139dc:	bcs	13a1c <__assert_fail@plt+0x297c>
   139e0:	sub	r0, r0, #1
   139e4:	add	r1, r8, r2
   139e8:	sub	r3, r0, r2
   139ec:	mov	r0, r2
   139f0:	ldrb	r2, [r1]
   139f4:	add	r1, r1, #1
   139f8:	ldrb	r6, [r7, r2]
   139fc:	cmp	r6, #0
   13a00:	strbeq	r2, [r5, r0]
   13a04:	addeq	r0, r0, #1
   13a08:	subs	r3, r3, #1
   13a0c:	bne	139f0 <__assert_fail@plt+0x2950>
   13a10:	cmp	r0, #0
   13a14:	beq	13994 <__assert_fail@plt+0x28f4>
   13a18:	b	13a28 <__assert_fail@plt+0x2988>
   13a1c:	mov	r0, r2
   13a20:	cmp	r0, #0
   13a24:	beq	13994 <__assert_fail@plt+0x28f4>
   13a28:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   13a2c:	bl	10fe0 <__errno_location@plt>
   13a30:	ldr	r4, [r0]
   13a34:	movw	r1, #38806	; 0x9796
   13a38:	mov	r0, #0
   13a3c:	mov	r2, #5
   13a40:	movt	r1, #1
   13a44:	bl	10ee4 <dcgettext@plt>
   13a48:	mov	r2, r0
   13a4c:	mov	r0, #1
   13a50:	mov	r1, r4
   13a54:	bl	10f50 <error@plt>
   13a58:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13a5c:	add	fp, sp, #28
   13a60:	sub	sp, sp, #4
   13a64:	mov	r4, r0
   13a68:	add	sl, r0, #8
   13a6c:	mvn	r9, #0
   13a70:	cmp	r1, #0
   13a74:	beq	13a80 <__assert_fail@plt+0x29e0>
   13a78:	mov	ip, #2
   13a7c:	b	13a98 <__assert_fail@plt+0x29f8>
   13a80:	ldm	sl, {r0, r3}
   13a84:	b	13b44 <__assert_fail@plt+0x2aa4>
   13a88:	ldr	r0, [r6, #4]
   13a8c:	str	r0, [r4, #4]
   13a90:	str	r9, [sl]
   13a94:	str	r9, [sl, #4]
   13a98:	str	ip, [r1]
   13a9c:	subs	r7, r9, #1
   13aa0:	ldm	sl, {r0, r3}
   13aa4:	sbc	r6, r9, #0
   13aa8:	eor	r6, r3, r6
   13aac:	eor	r7, r0, r7
   13ab0:	orrs	r7, r7, r6
   13ab4:	bne	13ae0 <__assert_fail@plt+0x2a40>
   13ab8:	ldr	r0, [r4]
   13abc:	mvn	r3, #0
   13ac0:	ldr	r6, [r0, #4]
   13ac4:	mvn	r0, #0
   13ac8:	str	r6, [r4, #4]
   13acc:	str	r9, [sl]
   13ad0:	str	r9, [sl, #4]
   13ad4:	cmp	r6, #0
   13ad8:	bne	13aec <__assert_fail@plt+0x2a4c>
   13adc:	b	13d80 <__assert_fail@plt+0x2ce0>
   13ae0:	ldr	r6, [r4, #4]
   13ae4:	cmp	r6, #0
   13ae8:	beq	13d80 <__assert_fail@plt+0x2ce0>
   13aec:	ldr	r7, [r6]
   13af0:	cmp	r7, #4
   13af4:	bhi	13da0 <__assert_fail@plt+0x2d00>
   13af8:	add	r5, pc, #0
   13afc:	ldr	pc, [r5, r7, lsl #2]
   13b00:	andeq	r3, r1, r0, lsl ip
   13b04:	andeq	r3, r1, r0, lsr ip
   13b08:	andeq	r3, r1, ip, asr #24
   13b0c:	andeq	r3, r1, r0, lsl ip
   13b10:	andeq	r3, r1, r4, lsl fp
   13b14:	mov	r7, r6
   13b18:	ldr	r5, [r7, #16]!
   13b1c:	ldr	r2, [r7, #4]
   13b20:	orrs	r2, r5, r2
   13b24:	beq	13a88 <__assert_fail@plt+0x29e8>
   13b28:	b	13bcc <__assert_fail@plt+0x2b2c>
   13b2c:	ldr	r0, [r6, #4]
   13b30:	mvn	r3, #0
   13b34:	str	r0, [r4, #4]
   13b38:	str	r9, [sl]
   13b3c:	str	r9, [sl, #4]
   13b40:	mvn	r0, #0
   13b44:	subs	r2, r9, #1
   13b48:	sbc	r7, r9, #0
   13b4c:	eor	r2, r0, r2
   13b50:	eor	r7, r3, r7
   13b54:	orrs	r2, r2, r7
   13b58:	bne	13b84 <__assert_fail@plt+0x2ae4>
   13b5c:	ldr	r0, [r4]
   13b60:	mvn	r3, #0
   13b64:	ldr	r6, [r0, #4]
   13b68:	mvn	r0, #0
   13b6c:	str	r6, [r4, #4]
   13b70:	str	r9, [sl]
   13b74:	str	r9, [sl, #4]
   13b78:	cmp	r6, #0
   13b7c:	bne	13b90 <__assert_fail@plt+0x2af0>
   13b80:	b	13d90 <__assert_fail@plt+0x2cf0>
   13b84:	ldr	r6, [r4, #4]
   13b88:	cmp	r6, #0
   13b8c:	beq	13d90 <__assert_fail@plt+0x2cf0>
   13b90:	ldr	r2, [r6]
   13b94:	cmp	r2, #4
   13b98:	bhi	13da0 <__assert_fail@plt+0x2d00>
   13b9c:	add	r7, pc, #0
   13ba0:	ldr	pc, [r7, r2, lsl #2]
   13ba4:	andeq	r3, r1, r0, lsl ip
   13ba8:	andeq	r3, r1, r0, lsr ip
   13bac:	andeq	r3, r1, ip, asr #24
   13bb0:	andeq	r3, r1, r0, lsl ip
   13bb4:			; <UNDEFINED> instruction: 0x00013bb8
   13bb8:	mov	r7, r6
   13bbc:	ldr	r2, [r7, #16]!
   13bc0:	ldr	r5, [r7, #4]
   13bc4:	orrs	r2, r2, r5
   13bc8:	beq	13b2c <__assert_fail@plt+0x2a8c>
   13bcc:	eor	r1, r0, r9
   13bd0:	eor	r2, r3, r9
   13bd4:	orrs	r1, r1, r2
   13bd8:	moveq	r0, #0
   13bdc:	moveq	r3, #0
   13be0:	streq	r0, [sl]
   13be4:	streq	r0, [sl, #4]
   13be8:	adds	r0, r0, #1
   13bec:	adc	r1, r3, #0
   13bf0:	strd	r0, [sl]
   13bf4:	ldrd	r2, [r7]
   13bf8:	ldrb	r8, [r6, #8]
   13bfc:	eor	r1, r1, r3
   13c00:	eor	r0, r0, r2
   13c04:	orrs	r0, r0, r1
   13c08:	bne	13c90 <__assert_fail@plt+0x2bf0>
   13c0c:	b	13d64 <__assert_fail@plt+0x2cc4>
   13c10:	ldrb	r8, [r6, #8]
   13c14:	str	r9, [sl]
   13c18:	str	r9, [sl, #4]
   13c1c:	ldr	r0, [r6, #4]
   13c20:	str	r0, [r4, #4]
   13c24:	mov	r0, r8
   13c28:	sub	sp, fp, #28
   13c2c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13c30:	eor	r1, r0, r9
   13c34:	eor	r2, r3, r9
   13c38:	orrs	r1, r1, r2
   13c3c:	bne	13c70 <__assert_fail@plt+0x2bd0>
   13c40:	ldrb	r8, [r6, #8]
   13c44:	mov	r1, #0
   13c48:	b	13c78 <__assert_fail@plt+0x2bd8>
   13c4c:	cmp	r1, #0
   13c50:	beq	13ca4 <__assert_fail@plt+0x2c04>
   13c54:	ldr	r0, [r6, #8]
   13c58:	cmp	r0, #10
   13c5c:	beq	13c9c <__assert_fail@plt+0x2bfc>
   13c60:	cmp	r0, #6
   13c64:	bne	13ca4 <__assert_fail@plt+0x2c04>
   13c68:	mov	r0, #0
   13c6c:	b	13ca0 <__assert_fail@plt+0x2c00>
   13c70:	adds	r8, r0, #1
   13c74:	adc	r1, r3, #0
   13c78:	str	r8, [sl]
   13c7c:	str	r1, [sl, #4]
   13c80:	ldrb	r0, [r6, #9]
   13c84:	eor	r0, r8, r0
   13c88:	orrs	r0, r0, r1
   13c8c:	beq	13d64 <__assert_fail@plt+0x2cc4>
   13c90:	mov	r0, r8
   13c94:	sub	sp, fp, #28
   13c98:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13c9c:	mov	r0, #1
   13ca0:	str	r0, [r1]
   13ca4:	ldr	r8, [sl]
   13ca8:	ldr	r1, [sl, #4]
   13cac:	eor	r0, r1, r9
   13cb0:	eor	r1, r8, r9
   13cb4:	orrs	r0, r1, r0
   13cb8:	bne	13d10 <__assert_fail@plt+0x2c70>
   13cbc:	ldr	r5, [r6, #8]
   13cc0:	mov	r8, #0
   13cc4:	uxtb	r1, r8
   13cc8:	mov	r0, r5
   13ccc:	bl	141a8 <__assert_fail@plt+0x3108>
   13cd0:	cmp	r0, #0
   13cd4:	bne	13d04 <__assert_fail@plt+0x2c64>
   13cd8:	add	r8, r8, #1
   13cdc:	cmp	r8, #256	; 0x100
   13ce0:	bcc	13cc4 <__assert_fail@plt+0x2c24>
   13ce4:	movw	r0, #38817	; 0x97a1
   13ce8:	movw	r1, #36432	; 0x8e50
   13cec:	movw	r3, #38829	; 0x97ad
   13cf0:	movw	r2, #1079	; 0x437
   13cf4:	movt	r0, #1
   13cf8:	movt	r1, #1
   13cfc:	movt	r3, #1
   13d00:	bl	110a0 <__assert_fail@plt>
   13d04:	mov	r1, #0
   13d08:	str	r8, [sl]
   13d0c:	str	r1, [sl, #4]
   13d10:	ldr	r5, [r6, #8]
   13d14:	uxtb	r1, r8
   13d18:	mov	r0, r5
   13d1c:	bl	141a8 <__assert_fail@plt+0x3108>
   13d20:	cmp	r0, #0
   13d24:	beq	13da4 <__assert_fail@plt+0x2d04>
   13d28:	mov	r7, r8
   13d2c:	add	r7, r7, #1
   13d30:	cmp	r7, #255	; 0xff
   13d34:	bgt	13d64 <__assert_fail@plt+0x2cc4>
   13d38:	uxtb	r1, r7
   13d3c:	mov	r0, r5
   13d40:	bl	141a8 <__assert_fail@plt+0x3108>
   13d44:	cmp	r0, #0
   13d48:	beq	13d2c <__assert_fail@plt+0x2c8c>
   13d4c:	asr	r1, r7, #31
   13d50:	str	r7, [sl]
   13d54:	str	r1, [sl, #4]
   13d58:	mov	r0, r8
   13d5c:	sub	sp, fp, #28
   13d60:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13d64:	ldr	r0, [r6, #4]
   13d68:	str	r0, [r4, #4]
   13d6c:	str	r9, [sl]
   13d70:	str	r9, [sl, #4]
   13d74:	mov	r0, r8
   13d78:	sub	sp, fp, #28
   13d7c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13d80:	mvn	r8, #0
   13d84:	mov	r0, r8
   13d88:	sub	sp, fp, #28
   13d8c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13d90:	mvn	r8, #0
   13d94:	mov	r0, r8
   13d98:	sub	sp, fp, #28
   13d9c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13da0:	bl	11088 <abort@plt>
   13da4:	movw	r0, #38888	; 0x97e8
   13da8:	movw	r1, #36432	; 0x8e50
   13dac:	movw	r3, #38829	; 0x97ad
   13db0:	movw	r2, #1082	; 0x43a
   13db4:	movt	r0, #1
   13db8:	movt	r1, #1
   13dbc:	movt	r3, #1
   13dc0:	bl	110a0 <__assert_fail@plt>
   13dc4:	push	{r4, sl, fp, lr}
   13dc8:	add	fp, sp, #8
   13dcc:	mov	r4, r0
   13dd0:	mov	r2, r1
   13dd4:	mov	r0, #0
   13dd8:	mov	r1, r4
   13ddc:	bl	16374 <__assert_fail@plt+0x52d4>
   13de0:	cmp	r0, #0
   13de4:	popeq	{r4, sl, fp, pc}
   13de8:	cmn	r0, #1
   13dec:	beq	13e14 <__assert_fail@plt+0x2d74>
   13df0:	movw	r1, #50032	; 0xc370
   13df4:	mov	r2, r0
   13df8:	movt	r1, #2
   13dfc:	ldrb	r3, [r4]
   13e00:	subs	r2, r2, #1
   13e04:	ldrb	r3, [r1, r3]
   13e08:	strb	r3, [r4], #1
   13e0c:	bne	13dfc <__assert_fail@plt+0x2d5c>
   13e10:	pop	{r4, sl, fp, pc}
   13e14:	bl	10fe0 <__errno_location@plt>
   13e18:	ldr	r4, [r0]
   13e1c:	movw	r1, #38806	; 0x9796
   13e20:	mov	r0, #0
   13e24:	mov	r2, #5
   13e28:	movt	r1, #1
   13e2c:	bl	10ee4 <dcgettext@plt>
   13e30:	mov	r2, r0
   13e34:	mov	r0, #1
   13e38:	mov	r1, r4
   13e3c:	bl	10f50 <error@plt>
   13e40:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13e44:	add	fp, sp, #28
   13e48:	sub	sp, sp, #12
   13e4c:	mov	r5, r0
   13e50:	mov	r4, r1
   13e54:	add	r0, r1, #1
   13e58:	mov	r1, #4
   13e5c:	bl	16b68 <__assert_fail@plt+0x5ac8>
   13e60:	mov	sl, r0
   13e64:	cmp	r4, #0
   13e68:	beq	13f70 <__assert_fail@plt+0x2ed0>
   13e6c:	movw	r7, #37349	; 0x91e5
   13e70:	add	r9, sp, #7
   13e74:	mov	r6, sl
   13e78:	movt	r7, #1
   13e7c:	ldrb	r8, [r5]
   13e80:	sub	r0, r8, #7
   13e84:	cmp	r0, #6
   13e88:	bhi	13ebc <__assert_fail@plt+0x2e1c>
   13e8c:	add	r1, pc, #0
   13e90:	ldr	pc, [r1, r0, lsl #2]
   13e94:			; <UNDEFINED> instruction: 0x00013eb0
   13e98:	andeq	r3, r1, r0, lsl #30
   13e9c:	andeq	r3, r1, ip, lsl #30
   13ea0:	andeq	r3, r1, r8, lsl pc
   13ea4:	andeq	r3, r1, r4, lsr #30
   13ea8:	andeq	r3, r1, r0, lsr pc
   13eac:	andeq	r3, r1, ip, lsr pc
   13eb0:	movw	r1, #37351	; 0x91e7
   13eb4:	movt	r1, #1
   13eb8:	b	13f58 <__assert_fail@plt+0x2eb8>
   13ebc:	cmp	r8, #92	; 0x5c
   13ec0:	mov	r1, r7
   13ec4:	beq	13f58 <__assert_fail@plt+0x2eb8>
   13ec8:	bl	10fb0 <__ctype_b_loc@plt>
   13ecc:	ldr	r0, [r0]
   13ed0:	add	r0, r0, r8, lsl #1
   13ed4:	ldrb	r0, [r0, #1]
   13ed8:	tst	r0, #64	; 0x40
   13edc:	bne	13f48 <__assert_fail@plt+0x2ea8>
   13ee0:	movw	r3, #37372	; 0x91fc
   13ee4:	mov	r0, r9
   13ee8:	mov	r1, #1
   13eec:	mov	r2, #5
   13ef0:	str	r8, [sp]
   13ef4:	movt	r3, #1
   13ef8:	bl	10fec <__sprintf_chk@plt>
   13efc:	b	13f54 <__assert_fail@plt+0x2eb4>
   13f00:	movw	r1, #37354	; 0x91ea
   13f04:	movt	r1, #1
   13f08:	b	13f58 <__assert_fail@plt+0x2eb8>
   13f0c:	movw	r1, #37366	; 0x91f6
   13f10:	movt	r1, #1
   13f14:	b	13f58 <__assert_fail@plt+0x2eb8>
   13f18:	movw	r1, #37360	; 0x91f0
   13f1c:	movt	r1, #1
   13f20:	b	13f58 <__assert_fail@plt+0x2eb8>
   13f24:	movw	r1, #37369	; 0x91f9
   13f28:	movt	r1, #1
   13f2c:	b	13f58 <__assert_fail@plt+0x2eb8>
   13f30:	movw	r1, #37357	; 0x91ed
   13f34:	movt	r1, #1
   13f38:	b	13f58 <__assert_fail@plt+0x2eb8>
   13f3c:	movw	r1, #37363	; 0x91f3
   13f40:	movt	r1, #1
   13f44:	b	13f58 <__assert_fail@plt+0x2eb8>
   13f48:	mov	r0, #0
   13f4c:	strb	r0, [sp, #8]
   13f50:	strb	r8, [sp, #7]
   13f54:	mov	r1, r9
   13f58:	mov	r0, r6
   13f5c:	bl	10ed8 <stpcpy@plt>
   13f60:	mov	r6, r0
   13f64:	subs	r4, r4, #1
   13f68:	add	r5, r5, #1
   13f6c:	bne	13e7c <__assert_fail@plt+0x2ddc>
   13f70:	mov	r0, sl
   13f74:	sub	sp, fp, #28
   13f78:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13f7c:	nop	{0}
   13f80:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13f84:	add	fp, sp, #28
   13f88:	sub	sp, sp, #4
   13f8c:	vpush	{d8-d10}
   13f90:	sub	sp, sp, #8
   13f94:	mov	r2, #0
   13f98:	vldr	d8, [pc, #512]	; 141a0 <__assert_fail@plt+0x3100>
   13f9c:	mov	r1, #0
   13fa0:	mov	ip, #1
   13fa4:	vmov.i32	d9, #255	; 0x000000ff
   13fa8:	vmov.i32	d10, #2	; 0x00000002
   13fac:	mov	r8, #0
   13fb0:	mov	r6, #0
   13fb4:	str	r0, [sp, #4]
   13fb8:	str	r2, [r0, #24]
   13fbc:	strb	r2, [r0, #34]	; 0x22
   13fc0:	strh	r2, [r0, #32]
   13fc4:	str	r1, [sp]
   13fc8:	ldr	r7, [r0]
   13fcc:	ldr	r7, [r7, #4]
   13fd0:	cmp	r7, #0
   13fd4:	beq	14150 <__assert_fail@plt+0x30b0>
   13fd8:	ldr	r2, [r7]
   13fdc:	cmp	r2, #4
   13fe0:	bhi	14168 <__assert_fail@plt+0x30c8>
   13fe4:	add	r1, pc, #8
   13fe8:	mov	r5, #0
   13fec:	mov	r4, #1
   13ff0:	ldr	pc, [r1, r2, lsl #2]
   13ff4:	andeq	r4, r1, r4, lsl #2
   13ff8:	andeq	r4, r1, r8
   13ffc:	andeq	r4, r1, r4, asr r0
   14000:	andeq	r4, r1, r4, lsr #1
   14004:	andeq	r4, r1, r8, lsr #32
   14008:	ldrb	r2, [r7, #8]
   1400c:	ldrb	r1, [r7, #9]
   14010:	cmp	r1, r2
   14014:	bcc	1416c <__assert_fail@plt+0x30cc>
   14018:	add	r1, r1, #1
   1401c:	sub	r4, r1, r2
   14020:	asr	r5, r4, #31
   14024:	b	14104 <__assert_fail@plt+0x3064>
   14028:	ldrd	r4, [r7, #16]
   1402c:	orrs	r1, r4, r5
   14030:	bne	14104 <__assert_fail@plt+0x3064>
   14034:	ldr	r1, [sp]
   14038:	mov	r4, #0
   1403c:	mov	r5, #0
   14040:	add	r1, r1, #1
   14044:	str	r1, [sp]
   14048:	str	r1, [r0, #24]
   1404c:	str	r7, [r0, #28]
   14050:	b	14104 <__assert_fail@plt+0x3064>
   14054:	strb	ip, [r0, #33]	; 0x21
   14058:	mov	sl, #0
   1405c:	mov	r4, #0
   14060:	mov	r5, #0
   14064:	ldr	r9, [r7, #8]
   14068:	uxtb	r1, sl
   1406c:	mov	r0, r9
   14070:	bl	141a8 <__assert_fail@plt+0x3108>
   14074:	adds	r4, r4, r0
   14078:	add	sl, sl, #1
   1407c:	adc	r5, r5, #0
   14080:	cmp	sl, #256	; 0x100
   14084:	bne	14068 <__assert_fail@plt+0x2fc8>
   14088:	cmp	r9, #6
   1408c:	beq	140fc <__assert_fail@plt+0x305c>
   14090:	ldr	r0, [sp, #4]
   14094:	cmp	r9, #10
   14098:	mov	ip, #1
   1409c:	strbne	ip, [r0, #34]	; 0x22
   140a0:	b	14104 <__assert_fail@plt+0x3064>
   140a4:	ldrb	r1, [r7, #8]
   140a8:	vmov.i32	q8, #0	; 0x00000000
   140ac:	mov	r2, #256	; 0x100
   140b0:	vorr	d19, d8, d8
   140b4:	vdup.32	d18, r1
   140b8:	add	r1, pc, #208	; 0xd0
   140bc:	vand	d20, d19, d9
   140c0:	vand	d21, d18, d9
   140c4:	subs	r2, r2, #2
   140c8:	vadd.i32	d19, d19, d10
   140cc:	vld1.64	{d22-d23}, [r1 :128]
   140d0:	vceq.i32	d20, d21, d20
   140d4:	vmovl.u32	q10, d20
   140d8:	vand	q10, q10, q11
   140dc:	vadd.i64	q8, q8, q10
   140e0:	bne	140b8 <__assert_fail@plt+0x3018>
   140e4:	vorr	d18, d17, d17
   140e8:	strb	ip, [r0, #32]
   140ec:	vadd.i64	q8, q8, q9
   140f0:	vmov.32	r5, d16[1]
   140f4:	vmov.32	r4, d16[0]
   140f8:	b	14104 <__assert_fail@plt+0x3064>
   140fc:	ldr	r0, [sp, #4]
   14100:	mov	ip, #1
   14104:	adds	r3, r4, r8
   14108:	adc	r1, r5, r6
   1410c:	subs	r2, r3, r8
   14110:	sbcs	r2, r1, r6
   14114:	bcc	1412c <__assert_fail@plt+0x308c>
   14118:	and	r2, r3, r1
   1411c:	mov	r8, r3
   14120:	mov	r6, r1
   14124:	cmn	r2, #1
   14128:	bne	13fcc <__assert_fail@plt+0x2f2c>
   1412c:	movw	r1, #38440	; 0x9628
   14130:	mov	r0, #0
   14134:	mov	r2, #5
   14138:	movt	r1, #1
   1413c:	bl	10ee4 <dcgettext@plt>
   14140:	mov	r2, r0
   14144:	mov	r0, #1
   14148:	mov	r1, #0
   1414c:	bl	10f50 <error@plt>
   14150:	str	r8, [r0, #16]
   14154:	str	r6, [r0, #20]
   14158:	sub	sp, fp, #56	; 0x38
   1415c:	vpop	{d8-d10}
   14160:	add	sp, sp, #4
   14164:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14168:	bl	11088 <abort@plt>
   1416c:	movw	r0, #38354	; 0x95d2
   14170:	movw	r1, #36432	; 0x8e50
   14174:	movw	r3, #38400	; 0x9600
   14178:	movw	r2, #1265	; 0x4f1
   1417c:	movt	r0, #1
   14180:	movt	r1, #1
   14184:	movt	r3, #1
   14188:	bl	110a0 <__assert_fail@plt>
   1418c:	nop	{0}
   14190:	andeq	r0, r0, r1
   14194:	andeq	r0, r0, r0
   14198:	andeq	r0, r0, r1
	...
   141a4:	andeq	r0, r0, r1
   141a8:	push	{r4, r5, fp, lr}
   141ac:	add	fp, sp, #8
   141b0:	cmp	r0, #11
   141b4:	bhi	14268 <__assert_fail@plt+0x31c8>
   141b8:	mov	r4, r1
   141bc:	add	r1, pc, #4
   141c0:	mov	r5, #8
   141c4:	ldr	pc, [r1, r0, lsl #2]
   141c8:	andeq	r4, r1, ip, asr #4
   141cc:	strdeq	r4, [r1], -r8
   141d0:	andeq	r4, r1, r0, lsl r2
   141d4:	andeq	r4, r1, r0, lsr #4
   141d8:	andeq	r4, r1, r8, lsl #4
   141dc:	andeq	r4, r1, r0, lsr r2
   141e0:	andeq	r4, r1, r8, lsr r2
   141e4:	andeq	r4, r1, r8, lsr #4
   141e8:	andeq	r4, r1, r0, asr #4
   141ec:	andeq	r4, r1, r8, lsl r2
   141f0:	andeq	r4, r1, r8, asr #4
   141f4:	andeq	r4, r1, r0, lsl #4
   141f8:	mov	r5, #1024	; 0x400
   141fc:	b	1424c <__assert_fail@plt+0x31ac>
   14200:	mov	r5, #4096	; 0x1000
   14204:	b	1424c <__assert_fail@plt+0x31ac>
   14208:	mov	r5, #2048	; 0x800
   1420c:	b	1424c <__assert_fail@plt+0x31ac>
   14210:	mov	r5, #1
   14214:	b	1424c <__assert_fail@plt+0x31ac>
   14218:	mov	r5, #8192	; 0x2000
   1421c:	b	1424c <__assert_fail@plt+0x31ac>
   14220:	mov	r5, #2
   14224:	b	1424c <__assert_fail@plt+0x31ac>
   14228:	mov	r5, #16384	; 0x4000
   1422c:	b	1424c <__assert_fail@plt+0x31ac>
   14230:	mov	r5, #32768	; 0x8000
   14234:	b	1424c <__assert_fail@plt+0x31ac>
   14238:	mov	r5, #512	; 0x200
   1423c:	b	1424c <__assert_fail@plt+0x31ac>
   14240:	mov	r5, #4
   14244:	b	1424c <__assert_fail@plt+0x31ac>
   14248:	mov	r5, #256	; 0x100
   1424c:	bl	10fb0 <__ctype_b_loc@plt>
   14250:	ldr	r0, [r0]
   14254:	add	r0, r0, r4, lsl #1
   14258:	ldrh	r0, [r0]
   1425c:	ands	r0, r0, r5
   14260:	movwne	r0, #1
   14264:	pop	{r4, r5, fp, pc}
   14268:	bl	11088 <abort@plt>
   1426c:	movw	r1, #50296	; 0xc478
   14270:	movt	r1, #2
   14274:	str	r0, [r1, #4]
   14278:	bx	lr
   1427c:	movw	r1, #50296	; 0xc478
   14280:	movt	r1, #2
   14284:	strb	r0, [r1]
   14288:	bx	lr
   1428c:	push	{r4, r5, r6, sl, fp, lr}
   14290:	add	fp, sp, #16
   14294:	sub	sp, sp, #8
   14298:	movw	r0, #41308	; 0xa15c
   1429c:	movt	r0, #2
   142a0:	ldr	r0, [r0]
   142a4:	bl	17dc8 <__assert_fail@plt+0x6d28>
   142a8:	cmp	r0, #0
   142ac:	beq	142d4 <__assert_fail@plt+0x3234>
   142b0:	movw	r5, #50296	; 0xc478
   142b4:	movt	r5, #2
   142b8:	ldrb	r0, [r5]
   142bc:	cmp	r0, #0
   142c0:	beq	14300 <__assert_fail@plt+0x3260>
   142c4:	bl	10fe0 <__errno_location@plt>
   142c8:	ldr	r0, [r0]
   142cc:	cmp	r0, #32
   142d0:	bne	14300 <__assert_fail@plt+0x3260>
   142d4:	movw	r0, #41296	; 0xa150
   142d8:	movt	r0, #2
   142dc:	ldr	r0, [r0]
   142e0:	bl	17dc8 <__assert_fail@plt+0x6d28>
   142e4:	cmp	r0, #0
   142e8:	subeq	sp, fp, #16
   142ec:	popeq	{r4, r5, r6, sl, fp, pc}
   142f0:	movw	r0, #41204	; 0xa0f4
   142f4:	movt	r0, #2
   142f8:	ldr	r0, [r0]
   142fc:	bl	10e90 <_exit@plt>
   14300:	movw	r1, #36394	; 0x8e2a
   14304:	mov	r0, #0
   14308:	mov	r2, #5
   1430c:	movt	r1, #1
   14310:	bl	10ee4 <dcgettext@plt>
   14314:	ldr	r6, [r5, #4]
   14318:	mov	r4, r0
   1431c:	bl	10fe0 <__errno_location@plt>
   14320:	ldr	r5, [r0]
   14324:	cmp	r6, #0
   14328:	bne	14344 <__assert_fail@plt+0x32a4>
   1432c:	movw	r2, #39131	; 0x98db
   14330:	mov	r0, #0
   14334:	mov	r1, r5
   14338:	mov	r3, r4
   1433c:	movt	r2, #1
   14340:	b	14364 <__assert_fail@plt+0x32c4>
   14344:	mov	r0, r6
   14348:	bl	15fd4 <__assert_fail@plt+0x4f34>
   1434c:	movw	r2, #39127	; 0x98d7
   14350:	mov	r3, r0
   14354:	str	r4, [sp]
   14358:	mov	r0, #0
   1435c:	mov	r1, r5
   14360:	movt	r2, #1
   14364:	bl	10f50 <error@plt>
   14368:	movw	r0, #41204	; 0xa0f4
   1436c:	movt	r0, #2
   14370:	ldr	r0, [r0]
   14374:	bl	10e90 <_exit@plt>
   14378:	b	10e60 <posix_fadvise64@plt>
   1437c:	cmp	r0, #0
   14380:	bxeq	lr
   14384:	push	{r4, sl, fp, lr}
   14388:	add	fp, sp, #8
   1438c:	sub	sp, sp, #16
   14390:	mov	r4, r1
   14394:	bl	1101c <fileno@plt>
   14398:	mov	r1, #0
   1439c:	mov	r2, #0
   143a0:	mov	r3, #0
   143a4:	str	r1, [sp]
   143a8:	stmib	sp, {r1, r4}
   143ac:	bl	10e60 <posix_fadvise64@plt>
   143b0:	sub	sp, fp, #8
   143b4:	pop	{r4, sl, fp, pc}
   143b8:	push	{r4, r5, r6, sl, fp, lr}
   143bc:	add	fp, sp, #16
   143c0:	mov	r4, r0
   143c4:	bl	10fe0 <__errno_location@plt>
   143c8:	ldr	r6, [r0]
   143cc:	mov	r5, r0
   143d0:	mov	r0, r4
   143d4:	bl	10e84 <free@plt>
   143d8:	str	r6, [r5]
   143dc:	pop	{r4, r5, r6, sl, fp, pc}
   143e0:	push	{r4, r5, fp, lr}
   143e4:	add	fp, sp, #8
   143e8:	cmp	r0, #0
   143ec:	beq	14480 <__assert_fail@plt+0x33e0>
   143f0:	mov	r1, #47	; 0x2f
   143f4:	mov	r4, r0
   143f8:	bl	11058 <strrchr@plt>
   143fc:	cmp	r0, #0
   14400:	mov	r5, r4
   14404:	addne	r5, r0, #1
   14408:	sub	r0, r5, r4
   1440c:	cmp	r0, #7
   14410:	blt	14464 <__assert_fail@plt+0x33c4>
   14414:	movw	r1, #39190	; 0x9916
   14418:	sub	r0, r5, #7
   1441c:	mov	r2, #7
   14420:	movt	r1, #1
   14424:	bl	1107c <strncmp@plt>
   14428:	cmp	r0, #0
   1442c:	bne	14464 <__assert_fail@plt+0x33c4>
   14430:	movw	r1, #39198	; 0x991e
   14434:	mov	r0, r5
   14438:	mov	r2, #3
   1443c:	movt	r1, #1
   14440:	bl	1107c <strncmp@plt>
   14444:	cmp	r0, #0
   14448:	beq	14454 <__assert_fail@plt+0x33b4>
   1444c:	mov	r4, r5
   14450:	b	14464 <__assert_fail@plt+0x33c4>
   14454:	movw	r0, #41280	; 0xa140
   14458:	add	r4, r5, #3
   1445c:	movt	r0, #2
   14460:	str	r4, [r0]
   14464:	movw	r0, #41284	; 0xa144
   14468:	movt	r0, #2
   1446c:	str	r4, [r0]
   14470:	movw	r0, #50304	; 0xc480
   14474:	movt	r0, #2
   14478:	str	r4, [r0]
   1447c:	pop	{r4, r5, fp, pc}
   14480:	movw	r0, #41296	; 0xa150
   14484:	mov	r1, #55	; 0x37
   14488:	mov	r2, #1
   1448c:	movt	r0, #2
   14490:	ldr	r3, [r0]
   14494:	movw	r0, #39134	; 0x98de
   14498:	movt	r0, #1
   1449c:	bl	10f14 <fwrite@plt>
   144a0:	bl	11088 <abort@plt>
   144a4:	push	{r4, r5, r6, sl, fp, lr}
   144a8:	add	fp, sp, #16
   144ac:	mov	r4, r0
   144b0:	movw	r0, #50312	; 0xc488
   144b4:	movt	r0, #2
   144b8:	cmp	r4, #0
   144bc:	moveq	r4, r0
   144c0:	bl	10fe0 <__errno_location@plt>
   144c4:	ldr	r6, [r0]
   144c8:	mov	r5, r0
   144cc:	mov	r0, r4
   144d0:	mov	r1, #48	; 0x30
   144d4:	bl	16ef8 <__assert_fail@plt+0x5e58>
   144d8:	str	r6, [r5]
   144dc:	pop	{r4, r5, r6, sl, fp, pc}
   144e0:	movw	r1, #50312	; 0xc488
   144e4:	cmp	r0, #0
   144e8:	movt	r1, #2
   144ec:	movne	r1, r0
   144f0:	ldr	r0, [r1]
   144f4:	bx	lr
   144f8:	movw	r2, #50312	; 0xc488
   144fc:	cmp	r0, #0
   14500:	movt	r2, #2
   14504:	movne	r2, r0
   14508:	str	r1, [r2]
   1450c:	bx	lr
   14510:	movw	r3, #50312	; 0xc488
   14514:	cmp	r0, #0
   14518:	movt	r3, #2
   1451c:	movne	r3, r0
   14520:	ubfx	r0, r1, #5, #3
   14524:	and	r1, r1, #31
   14528:	add	r0, r3, r0, lsl #2
   1452c:	ldr	r3, [r0, #8]
   14530:	eor	r2, r2, r3, lsr r1
   14534:	and	r2, r2, #1
   14538:	eor	r2, r3, r2, lsl r1
   1453c:	str	r2, [r0, #8]
   14540:	mov	r0, #1
   14544:	and	r0, r0, r3, lsr r1
   14548:	bx	lr
   1454c:	movw	r2, #50312	; 0xc488
   14550:	cmp	r0, #0
   14554:	movt	r2, #2
   14558:	movne	r2, r0
   1455c:	ldr	r0, [r2, #4]
   14560:	str	r1, [r2, #4]
   14564:	bx	lr
   14568:	movw	r3, #50312	; 0xc488
   1456c:	cmp	r0, #0
   14570:	movt	r3, #2
   14574:	movne	r3, r0
   14578:	cmp	r1, #0
   1457c:	mov	r0, #10
   14580:	cmpne	r2, #0
   14584:	str	r0, [r3]
   14588:	bne	14598 <__assert_fail@plt+0x34f8>
   1458c:	push	{fp, lr}
   14590:	mov	fp, sp
   14594:	bl	11088 <abort@plt>
   14598:	str	r1, [r3, #40]	; 0x28
   1459c:	str	r2, [r3, #44]	; 0x2c
   145a0:	bx	lr
   145a4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   145a8:	add	fp, sp, #28
   145ac:	sub	sp, sp, #20
   145b0:	mov	r7, r0
   145b4:	ldr	r0, [fp, #8]
   145b8:	movw	r5, #50312	; 0xc488
   145bc:	mov	r8, r3
   145c0:	mov	r9, r2
   145c4:	mov	sl, r1
   145c8:	movt	r5, #2
   145cc:	cmp	r0, #0
   145d0:	movne	r5, r0
   145d4:	bl	10fe0 <__errno_location@plt>
   145d8:	mov	r4, r0
   145dc:	ldm	r5, {r0, r1}
   145e0:	ldr	r2, [r5, #40]	; 0x28
   145e4:	ldr	r3, [r5, #44]	; 0x2c
   145e8:	add	r5, r5, #8
   145ec:	ldr	r6, [r4]
   145f0:	stm	sp, {r0, r1, r5}
   145f4:	str	r2, [sp, #12]
   145f8:	str	r3, [sp, #16]
   145fc:	mov	r0, r7
   14600:	mov	r1, sl
   14604:	mov	r2, r9
   14608:	mov	r3, r8
   1460c:	bl	1461c <__assert_fail@plt+0x357c>
   14610:	str	r6, [r4]
   14614:	sub	sp, fp, #28
   14618:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1461c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   14620:	add	fp, sp, #28
   14624:	sub	sp, sp, #156	; 0x9c
   14628:	str	r0, [sp, #76]	; 0x4c
   1462c:	ldr	r0, [fp, #12]
   14630:	mov	r6, r1
   14634:	str	r3, [sp, #84]	; 0x54
   14638:	str	r2, [fp, #-84]	; 0xffffffac
   1463c:	and	r1, r0, #4
   14640:	str	r1, [sp, #24]
   14644:	and	r1, r0, #1
   14648:	str	r1, [sp, #28]
   1464c:	ubfx	r8, r0, #1, #1
   14650:	bl	10f2c <__ctype_get_mb_cur_max@plt>
   14654:	str	r0, [sp, #32]
   14658:	ldr	r0, [fp, #24]
   1465c:	ldr	r7, [fp, #8]
   14660:	mov	r1, #0
   14664:	mov	r2, #0
   14668:	mov	r4, #1
   1466c:	str	r1, [sp, #52]	; 0x34
   14670:	str	r0, [sp, #72]	; 0x48
   14674:	ldr	r0, [fp, #20]
   14678:	str	r0, [sp, #68]	; 0x44
   1467c:	mov	r0, #0
   14680:	str	r0, [sp, #48]	; 0x30
   14684:	mov	r0, #0
   14688:	str	r0, [sp, #92]	; 0x5c
   1468c:	mov	r0, #0
   14690:	str	r0, [fp, #-76]	; 0xffffffb4
   14694:	mov	r0, #0
   14698:	cmp	r7, #10
   1469c:	bhi	15984 <__assert_fail@plt+0x48e4>
   146a0:	add	r1, pc, #28
   146a4:	mov	sl, r6
   146a8:	ldr	r6, [sp, #76]	; 0x4c
   146ac:	ldr	ip, [fp, #-84]	; 0xffffffac
   146b0:	ldr	lr, [sp, #84]	; 0x54
   146b4:	mov	r9, #0
   146b8:	mov	r3, #1
   146bc:	mov	r5, #0
   146c0:	ldr	pc, [r1, r7, lsl #2]
   146c4:	muleq	r1, r4, r7
   146c8:	ldrdeq	r4, [r1], -r0
   146cc:	andeq	r4, r1, r4, lsr #15
   146d0:	andeq	r4, r1, ip, lsl #15
   146d4:	andeq	r4, r1, r4, asr #15
   146d8:	strdeq	r4, [r1], -r8
   146dc:			; <UNDEFINED> instruction: 0x000147b4
   146e0:	andeq	r4, r1, r4, lsl #20
   146e4:	strdeq	r4, [r1], -r0
   146e8:	strdeq	r4, [r1], -r0
   146ec:	muleq	r1, r8, r9
   146f0:	mov	r9, r4
   146f4:	movw	r4, #39280	; 0x9970
   146f8:	mov	r5, r8
   146fc:	mov	r8, r2
   14700:	mov	r0, #0
   14704:	mov	r2, #5
   14708:	movt	r4, #1
   1470c:	mov	r1, r4
   14710:	bl	10ee4 <dcgettext@plt>
   14714:	cmp	r0, r4
   14718:	str	r0, [sp, #68]	; 0x44
   1471c:	bne	148ac <__assert_fail@plt+0x380c>
   14720:	bl	17ff4 <__assert_fail@plt+0x6f54>
   14724:	ldrb	r1, [r0]
   14728:	and	r1, r1, #223	; 0xdf
   1472c:	cmp	r1, #71	; 0x47
   14730:	beq	14878 <__assert_fail@plt+0x37d8>
   14734:	cmp	r1, #85	; 0x55
   14738:	bne	14890 <__assert_fail@plt+0x37f0>
   1473c:	ldrb	r1, [r0, #1]
   14740:	and	r1, r1, #223	; 0xdf
   14744:	cmp	r1, #84	; 0x54
   14748:	bne	14890 <__assert_fail@plt+0x37f0>
   1474c:	ldrb	r1, [r0, #2]
   14750:	and	r1, r1, #223	; 0xdf
   14754:	cmp	r1, #70	; 0x46
   14758:	bne	14890 <__assert_fail@plt+0x37f0>
   1475c:	ldrb	r1, [r0, #3]
   14760:	cmp	r1, #45	; 0x2d
   14764:	ldrbeq	r1, [r0, #4]
   14768:	cmpeq	r1, #56	; 0x38
   1476c:	bne	14890 <__assert_fail@plt+0x37f0>
   14770:	ldrb	r0, [r0, #5]
   14774:	cmp	r0, #0
   14778:	movw	r0, #39282	; 0x9972
   1477c:	movt	r0, #1
   14780:	str	r0, [sp, #68]	; 0x44
   14784:	bne	14890 <__assert_fail@plt+0x37f0>
   14788:	b	148ac <__assert_fail@plt+0x380c>
   1478c:	mov	r0, #1
   14790:	b	147d0 <__assert_fail@plt+0x3730>
   14794:	mov	r7, #0
   14798:	mov	r9, #0
   1479c:	mov	r3, r0
   147a0:	b	14870 <__assert_fail@plt+0x37d0>
   147a4:	tst	r8, #1
   147a8:	bne	147d0 <__assert_fail@plt+0x3730>
   147ac:	mov	r3, r0
   147b0:	b	14828 <__assert_fail@plt+0x3788>
   147b4:	mov	r0, #1
   147b8:	mov	r9, #0
   147bc:	mov	r7, #5
   147c0:	b	1480c <__assert_fail@plt+0x376c>
   147c4:	mov	r3, #1
   147c8:	tst	r8, #1
   147cc:	beq	14828 <__assert_fail@plt+0x3788>
   147d0:	mov	r1, #1
   147d4:	mov	r9, #0
   147d8:	mov	r7, #2
   147dc:	mov	r3, r0
   147e0:	mov	r5, #1
   147e4:	str	r1, [fp, #-76]	; 0xffffffb4
   147e8:	movw	r1, #37076	; 0x90d4
   147ec:	movt	r1, #1
   147f0:	str	r1, [sp, #92]	; 0x5c
   147f4:	b	14a04 <__assert_fail@plt+0x3964>
   147f8:	mov	r7, #5
   147fc:	tst	r8, #1
   14800:	beq	14848 <__assert_fail@plt+0x37a8>
   14804:	mov	r0, #1
   14808:	mov	r9, #0
   1480c:	str	r0, [fp, #-76]	; 0xffffffb4
   14810:	movw	r0, #39278	; 0x996e
   14814:	mov	r3, #1
   14818:	mov	r5, #1
   1481c:	movt	r0, #1
   14820:	str	r0, [sp, #92]	; 0x5c
   14824:	b	14a04 <__assert_fail@plt+0x3964>
   14828:	cmp	sl, #0
   1482c:	mov	r9, #1
   14830:	mov	r7, #2
   14834:	movne	r0, #39	; 0x27
   14838:	strbne	r0, [r6]
   1483c:	movw	r0, #37076	; 0x90d4
   14840:	movt	r0, #1
   14844:	b	14864 <__assert_fail@plt+0x37c4>
   14848:	cmp	sl, #0
   1484c:	mov	r9, #1
   14850:	mov	r3, #1
   14854:	movne	r0, #34	; 0x22
   14858:	strbne	r0, [r6]
   1485c:	movw	r0, #39278	; 0x996e
   14860:	movt	r0, #1
   14864:	str	r0, [sp, #92]	; 0x5c
   14868:	mov	r0, #1
   1486c:	str	r0, [fp, #-76]	; 0xffffffb4
   14870:	mov	r5, #0
   14874:	b	14a04 <__assert_fail@plt+0x3964>
   14878:	ldrb	r1, [r0, #1]
   1487c:	and	r1, r1, #223	; 0xdf
   14880:	cmp	r1, #66	; 0x42
   14884:	ldrbeq	r1, [r0, #2]
   14888:	cmpeq	r1, #49	; 0x31
   1488c:	beq	157ac <__assert_fail@plt+0x470c>
   14890:	movw	r0, #37076	; 0x90d4
   14894:	movw	r1, #39278	; 0x996e
   14898:	cmp	r7, #9
   1489c:	movt	r0, #1
   148a0:	movt	r1, #1
   148a4:	moveq	r0, r1
   148a8:	str	r0, [sp, #68]	; 0x44
   148ac:	movw	r4, #37076	; 0x90d4
   148b0:	mov	r0, #0
   148b4:	mov	r2, #5
   148b8:	movt	r4, #1
   148bc:	mov	r1, r4
   148c0:	bl	10ee4 <dcgettext@plt>
   148c4:	cmp	r0, r4
   148c8:	str	r0, [sp, #72]	; 0x48
   148cc:	beq	148dc <__assert_fail@plt+0x383c>
   148d0:	mov	r4, r9
   148d4:	mov	r2, r8
   148d8:	b	14994 <__assert_fail@plt+0x38f4>
   148dc:	bl	17ff4 <__assert_fail@plt+0x6f54>
   148e0:	ldrb	r1, [r0]
   148e4:	mov	r4, r9
   148e8:	and	r1, r1, #223	; 0xdf
   148ec:	cmp	r1, #71	; 0x47
   148f0:	beq	1494c <__assert_fail@plt+0x38ac>
   148f4:	cmp	r1, #85	; 0x55
   148f8:	mov	r2, r8
   148fc:	bne	14974 <__assert_fail@plt+0x38d4>
   14900:	ldrb	r1, [r0, #1]
   14904:	and	r1, r1, #223	; 0xdf
   14908:	cmp	r1, #84	; 0x54
   1490c:	bne	14974 <__assert_fail@plt+0x38d4>
   14910:	ldrb	r1, [r0, #2]
   14914:	and	r1, r1, #223	; 0xdf
   14918:	cmp	r1, #70	; 0x46
   1491c:	ldrbeq	r1, [r0, #3]
   14920:	cmpeq	r1, #45	; 0x2d
   14924:	bne	14974 <__assert_fail@plt+0x38d4>
   14928:	ldrb	r1, [r0, #4]
   1492c:	cmp	r1, #56	; 0x38
   14930:	ldrbeq	r0, [r0, #5]
   14934:	cmpeq	r0, #0
   14938:	bne	14974 <__assert_fail@plt+0x38d4>
   1493c:	movw	r0, #39286	; 0x9976
   14940:	movt	r0, #1
   14944:	str	r0, [sp, #72]	; 0x48
   14948:	b	14994 <__assert_fail@plt+0x38f4>
   1494c:	ldrb	r1, [r0, #1]
   14950:	mov	r2, r8
   14954:	and	r1, r1, #223	; 0xdf
   14958:	cmp	r1, #66	; 0x42
   1495c:	bne	14974 <__assert_fail@plt+0x38d4>
   14960:	ldrb	r1, [r0, #2]
   14964:	cmp	r1, #49	; 0x31
   14968:	ldrbeq	r1, [r0, #3]
   1496c:	cmpeq	r1, #56	; 0x38
   14970:	beq	157f0 <__assert_fail@plt+0x4750>
   14974:	movw	r0, #37076	; 0x90d4
   14978:	cmp	r7, #9
   1497c:	movt	r0, #1
   14980:	mov	r1, r0
   14984:	movw	r0, #39278	; 0x996e
   14988:	movt	r0, #1
   1498c:	moveq	r1, r0
   14990:	str	r1, [sp, #72]	; 0x48
   14994:	mov	r8, r5
   14998:	mov	r9, #0
   1499c:	tst	r8, #1
   149a0:	mov	r5, r8
   149a4:	str	r2, [fp, #-48]	; 0xffffffd0
   149a8:	bne	149e0 <__assert_fail@plt+0x3940>
   149ac:	ldr	r0, [sp, #68]	; 0x44
   149b0:	ldrb	r0, [r0]
   149b4:	cmp	r0, #0
   149b8:	beq	149e0 <__assert_fail@plt+0x3940>
   149bc:	ldr	r1, [sp, #68]	; 0x44
   149c0:	mov	r9, #0
   149c4:	add	r1, r1, #1
   149c8:	cmp	r9, sl
   149cc:	strbcc	r0, [r6, r9]
   149d0:	ldrb	r0, [r1, r9]
   149d4:	add	r9, r9, #1
   149d8:	cmp	r0, #0
   149dc:	bne	149c8 <__assert_fail@plt+0x3928>
   149e0:	ldr	r8, [sp, #72]	; 0x48
   149e4:	mov	r0, r8
   149e8:	bl	10fc8 <strlen@plt>
   149ec:	ldr	ip, [fp, #-84]	; 0xffffffac
   149f0:	ldr	lr, [sp, #84]	; 0x54
   149f4:	ldr	r2, [fp, #-48]	; 0xffffffd0
   149f8:	str	r0, [fp, #-76]	; 0xffffffb4
   149fc:	str	r8, [sp, #92]	; 0x5c
   14a00:	mov	r3, #1
   14a04:	ldr	r0, [fp, #16]
   14a08:	str	r7, [fp, #-64]	; 0xffffffc0
   14a0c:	str	r5, [fp, #-72]	; 0xffffffb8
   14a10:	str	r3, [sp, #80]	; 0x50
   14a14:	cmp	r0, #0
   14a18:	movwne	r0, #1
   14a1c:	and	r0, r0, r5
   14a20:	str	r0, [fp, #-88]	; 0xffffffa8
   14a24:	ldr	r0, [fp, #-76]	; 0xffffffb4
   14a28:	cmp	r0, #0
   14a2c:	movwne	r0, #1
   14a30:	subs	r7, r7, #2
   14a34:	and	r1, r0, r5
   14a38:	str	r7, [fp, #-80]	; 0xffffffb0
   14a3c:	and	r1, r3, r1
   14a40:	str	r1, [sp, #40]	; 0x28
   14a44:	clz	r1, r7
   14a48:	lsr	r1, r1, #5
   14a4c:	and	r1, r1, r5
   14a50:	eor	r5, r5, #1
   14a54:	str	r1, [sp, #36]	; 0x24
   14a58:	mov	r1, r7
   14a5c:	str	r5, [sp, #88]	; 0x58
   14a60:	mov	r7, #0
   14a64:	movwne	r1, #1
   14a68:	orr	r5, r1, r5
   14a6c:	and	r1, r1, r3
   14a70:	and	r0, r0, r1
   14a74:	str	r5, [sp, #60]	; 0x3c
   14a78:	str	r1, [fp, #-68]	; 0xffffffbc
   14a7c:	str	r0, [fp, #-60]	; 0xffffffc4
   14a80:	eor	r0, r3, #1
   14a84:	str	r0, [sp, #44]	; 0x2c
   14a88:	cmn	lr, #1
   14a8c:	beq	14a9c <__assert_fail@plt+0x39fc>
   14a90:	cmp	r7, lr
   14a94:	bne	14aa8 <__assert_fail@plt+0x3a08>
   14a98:	b	15720 <__assert_fail@plt+0x4680>
   14a9c:	ldrb	r0, [ip, r7]
   14aa0:	cmp	r0, #0
   14aa4:	beq	15728 <__assert_fail@plt+0x4688>
   14aa8:	ldr	r0, [fp, #-60]	; 0xffffffc4
   14aac:	mov	r8, #0
   14ab0:	str	r4, [fp, #-52]	; 0xffffffcc
   14ab4:	str	r2, [fp, #-48]	; 0xffffffd0
   14ab8:	cmp	r0, #0
   14abc:	beq	14af0 <__assert_fail@plt+0x3a50>
   14ac0:	ldr	r0, [fp, #-76]	; 0xffffffb4
   14ac4:	add	r4, r7, r0
   14ac8:	cmp	r0, #2
   14acc:	bcc	14ae8 <__assert_fail@plt+0x3a48>
   14ad0:	cmn	lr, #1
   14ad4:	bne	14ae8 <__assert_fail@plt+0x3a48>
   14ad8:	mov	r0, ip
   14adc:	bl	10fc8 <strlen@plt>
   14ae0:	ldr	ip, [fp, #-84]	; 0xffffffac
   14ae4:	mov	lr, r0
   14ae8:	cmp	r4, lr
   14aec:	bls	14b08 <__assert_fail@plt+0x3a68>
   14af0:	mov	r0, #0
   14af4:	str	r0, [fp, #-56]	; 0xffffffc8
   14af8:	ldrb	r5, [ip, r7]
   14afc:	cmp	r5, #126	; 0x7e
   14b00:	bls	14b58 <__assert_fail@plt+0x3ab8>
   14b04:	b	14f60 <__assert_fail@plt+0x3ec0>
   14b08:	ldr	r1, [sp, #92]	; 0x5c
   14b0c:	ldr	r2, [fp, #-76]	; 0xffffffb4
   14b10:	add	r0, ip, r7
   14b14:	mov	r4, lr
   14b18:	bl	10ecc <memcmp@plt>
   14b1c:	ldr	r2, [sp, #88]	; 0x58
   14b20:	cmp	r0, #0
   14b24:	mov	r1, r0
   14b28:	movwne	r1, #1
   14b2c:	orr	r1, r1, r2
   14b30:	tst	r1, #1
   14b34:	beq	15834 <__assert_fail@plt+0x4794>
   14b38:	ldr	ip, [fp, #-84]	; 0xffffffac
   14b3c:	clz	r0, r0
   14b40:	mov	lr, r4
   14b44:	lsr	r0, r0, #5
   14b48:	str	r0, [fp, #-56]	; 0xffffffc8
   14b4c:	ldrb	r5, [ip, r7]
   14b50:	cmp	r5, #126	; 0x7e
   14b54:	bhi	14f60 <__assert_fail@plt+0x3ec0>
   14b58:	add	r3, pc, #16
   14b5c:	mov	r4, #1
   14b60:	mov	r2, #110	; 0x6e
   14b64:	mov	r0, #97	; 0x61
   14b68:	mov	r1, #0
   14b6c:	ldr	pc, [r3, r5, lsl #2]
   14b70:	andeq	r4, r1, r0, asr #28
   14b74:	andeq	r4, r1, r0, ror #30
   14b78:	andeq	r4, r1, r0, ror #30
   14b7c:	andeq	r4, r1, r0, ror #30
   14b80:	andeq	r4, r1, r0, ror #30
   14b84:	andeq	r4, r1, r0, ror #30
   14b88:	andeq	r4, r1, r0, ror #30
   14b8c:	andeq	r5, r1, ip, lsr r0
   14b90:	andeq	r4, r1, r0, lsr #28
   14b94:	andeq	r4, r1, r8, lsl #28
   14b98:	andeq	r4, r1, ip, lsr #28
   14b9c:			; <UNDEFINED> instruction: 0x00014ebc
   14ba0:	andeq	r4, r1, r0, lsl #28
   14ba4:	andeq	r4, r1, r8, lsr #28
   14ba8:	andeq	r4, r1, r0, ror #30
   14bac:	andeq	r4, r1, r0, ror #30
   14bb0:	andeq	r4, r1, r0, ror #30
   14bb4:	andeq	r4, r1, r0, ror #30
   14bb8:	andeq	r4, r1, r0, ror #30
   14bbc:	andeq	r4, r1, r0, ror #30
   14bc0:	andeq	r4, r1, r0, ror #30
   14bc4:	andeq	r4, r1, r0, ror #30
   14bc8:	andeq	r4, r1, r0, ror #30
   14bcc:	andeq	r4, r1, r0, ror #30
   14bd0:	andeq	r4, r1, r0, ror #30
   14bd4:	andeq	r4, r1, r0, ror #30
   14bd8:	andeq	r4, r1, r0, ror #30
   14bdc:	andeq	r4, r1, r0, ror #30
   14be0:	andeq	r4, r1, r0, ror #30
   14be4:	andeq	r4, r1, r0, ror #30
   14be8:	andeq	r4, r1, r0, ror #30
   14bec:	andeq	r4, r1, r0, ror #30
   14bf0:			; <UNDEFINED> instruction: 0x00014fb8
   14bf4:			; <UNDEFINED> instruction: 0x00014fbc
   14bf8:			; <UNDEFINED> instruction: 0x00014fbc
   14bfc:	andeq	r4, r1, ip, lsl #27
   14c00:			; <UNDEFINED> instruction: 0x00014fbc
   14c04:	andeq	r4, r1, ip, ror #26
   14c08:			; <UNDEFINED> instruction: 0x00014fbc
   14c0c:	andeq	r4, r1, r4, asr #29
   14c10:			; <UNDEFINED> instruction: 0x00014fbc
   14c14:			; <UNDEFINED> instruction: 0x00014fbc
   14c18:			; <UNDEFINED> instruction: 0x00014fbc
   14c1c:	andeq	r4, r1, ip, ror #26
   14c20:	andeq	r4, r1, ip, ror #26
   14c24:	andeq	r4, r1, ip, ror #26
   14c28:	andeq	r4, r1, ip, ror #26
   14c2c:	andeq	r4, r1, ip, ror #26
   14c30:	andeq	r4, r1, ip, ror #26
   14c34:	andeq	r4, r1, ip, ror #26
   14c38:	andeq	r4, r1, ip, ror #26
   14c3c:	andeq	r4, r1, ip, ror #26
   14c40:	andeq	r4, r1, ip, ror #26
   14c44:	andeq	r4, r1, ip, ror #26
   14c48:	andeq	r4, r1, ip, ror #26
   14c4c:	andeq	r4, r1, ip, ror #26
   14c50:	andeq	r4, r1, ip, ror #26
   14c54:	andeq	r4, r1, ip, ror #26
   14c58:	andeq	r4, r1, ip, ror #26
   14c5c:			; <UNDEFINED> instruction: 0x00014fbc
   14c60:			; <UNDEFINED> instruction: 0x00014fbc
   14c64:			; <UNDEFINED> instruction: 0x00014fbc
   14c68:			; <UNDEFINED> instruction: 0x00014fbc
   14c6c:	andeq	r4, r1, r0, lsl #29
   14c70:	andeq	r4, r1, r0, ror #30
   14c74:	andeq	r4, r1, ip, ror #26
   14c78:	andeq	r4, r1, ip, ror #26
   14c7c:	andeq	r4, r1, ip, ror #26
   14c80:	andeq	r4, r1, ip, ror #26
   14c84:	andeq	r4, r1, ip, ror #26
   14c88:	andeq	r4, r1, ip, ror #26
   14c8c:	andeq	r4, r1, ip, ror #26
   14c90:	andeq	r4, r1, ip, ror #26
   14c94:	andeq	r4, r1, ip, ror #26
   14c98:	andeq	r4, r1, ip, ror #26
   14c9c:	andeq	r4, r1, ip, ror #26
   14ca0:	andeq	r4, r1, ip, ror #26
   14ca4:	andeq	r4, r1, ip, ror #26
   14ca8:	andeq	r4, r1, ip, ror #26
   14cac:	andeq	r4, r1, ip, ror #26
   14cb0:	andeq	r4, r1, ip, ror #26
   14cb4:	andeq	r4, r1, ip, ror #26
   14cb8:	andeq	r4, r1, ip, ror #26
   14cbc:	andeq	r4, r1, ip, ror #26
   14cc0:	andeq	r4, r1, ip, ror #26
   14cc4:	andeq	r4, r1, ip, ror #26
   14cc8:	andeq	r4, r1, ip, ror #26
   14ccc:	andeq	r4, r1, ip, ror #26
   14cd0:	andeq	r4, r1, ip, ror #26
   14cd4:	andeq	r4, r1, ip, ror #26
   14cd8:	andeq	r4, r1, ip, ror #26
   14cdc:			; <UNDEFINED> instruction: 0x00014fbc
   14ce0:	andeq	r4, r1, ip, asr #27
   14ce4:	andeq	r4, r1, ip, ror #26
   14ce8:			; <UNDEFINED> instruction: 0x00014fbc
   14cec:	andeq	r4, r1, ip, ror #26
   14cf0:			; <UNDEFINED> instruction: 0x00014fbc
   14cf4:	andeq	r4, r1, ip, ror #26
   14cf8:	andeq	r4, r1, ip, ror #26
   14cfc:	andeq	r4, r1, ip, ror #26
   14d00:	andeq	r4, r1, ip, ror #26
   14d04:	andeq	r4, r1, ip, ror #26
   14d08:	andeq	r4, r1, ip, ror #26
   14d0c:	andeq	r4, r1, ip, ror #26
   14d10:	andeq	r4, r1, ip, ror #26
   14d14:	andeq	r4, r1, ip, ror #26
   14d18:	andeq	r4, r1, ip, ror #26
   14d1c:	andeq	r4, r1, ip, ror #26
   14d20:	andeq	r4, r1, ip, ror #26
   14d24:	andeq	r4, r1, ip, ror #26
   14d28:	andeq	r4, r1, ip, ror #26
   14d2c:	andeq	r4, r1, ip, ror #26
   14d30:	andeq	r4, r1, ip, ror #26
   14d34:	andeq	r4, r1, ip, ror #26
   14d38:	andeq	r4, r1, ip, ror #26
   14d3c:	andeq	r4, r1, ip, ror #26
   14d40:	andeq	r4, r1, ip, ror #26
   14d44:	andeq	r4, r1, ip, ror #26
   14d48:	andeq	r4, r1, ip, ror #26
   14d4c:	andeq	r4, r1, ip, ror #26
   14d50:	andeq	r4, r1, ip, ror #26
   14d54:	andeq	r4, r1, ip, ror #26
   14d58:	andeq	r4, r1, ip, ror #26
   14d5c:	andeq	r4, r1, ip, lsr #27
   14d60:			; <UNDEFINED> instruction: 0x00014fbc
   14d64:	andeq	r4, r1, ip, lsr #27
   14d68:	andeq	r4, r1, ip, lsl #27
   14d6c:	ldr	r0, [fp, #-68]	; 0xffffffbc
   14d70:	cmp	r0, #0
   14d74:	beq	15050 <__assert_fail@plt+0x3fb0>
   14d78:	ldr	r0, [fp, #16]
   14d7c:	cmp	r0, #0
   14d80:	mov	r0, r5
   14d84:	bne	15060 <__assert_fail@plt+0x3fc0>
   14d88:	b	15080 <__assert_fail@plt+0x3fe0>
   14d8c:	mov	r4, #0
   14d90:	cmp	r7, #0
   14d94:	beq	14fb8 <__assert_fail@plt+0x3f18>
   14d98:	mov	r8, #0
   14d9c:	ldr	r0, [fp, #-68]	; 0xffffffbc
   14da0:	cmp	r0, #0
   14da4:	bne	14d78 <__assert_fail@plt+0x3cd8>
   14da8:	b	15050 <__assert_fail@plt+0x3fb0>
   14dac:	mov	r4, #0
   14db0:	cmn	lr, #1
   14db4:	beq	14f90 <__assert_fail@plt+0x3ef0>
   14db8:	cmp	r7, #0
   14dbc:	bne	14d98 <__assert_fail@plt+0x3cf8>
   14dc0:	cmp	lr, #1
   14dc4:	beq	14fb8 <__assert_fail@plt+0x3f18>
   14dc8:	b	14d98 <__assert_fail@plt+0x3cf8>
   14dcc:	ldr	r0, [fp, #-64]	; 0xffffffc0
   14dd0:	cmp	r0, #2
   14dd4:	bne	14fe8 <__assert_fail@plt+0x3f48>
   14dd8:	ldr	r0, [fp, #-72]	; 0xffffffb8
   14ddc:	tst	r0, #1
   14de0:	bne	15848 <__assert_fail@plt+0x47a8>
   14de4:	mov	r8, #0
   14de8:	mov	r0, #92	; 0x5c
   14dec:	mov	r4, #0
   14df0:	cmp	r8, #0
   14df4:	beq	15008 <__assert_fail@plt+0x3f68>
   14df8:	ldr	r2, [fp, #-48]	; 0xffffffd0
   14dfc:	b	150fc <__assert_fail@plt+0x405c>
   14e00:	mov	r0, #102	; 0x66
   14e04:	b	1503c <__assert_fail@plt+0x3f9c>
   14e08:	mov	r2, #116	; 0x74
   14e0c:	ldr	r0, [sp, #60]	; 0x3c
   14e10:	tst	r0, #1
   14e14:	mov	r0, r2
   14e18:	bne	1503c <__assert_fail@plt+0x3f9c>
   14e1c:	b	15848 <__assert_fail@plt+0x47a8>
   14e20:	mov	r0, #98	; 0x62
   14e24:	b	1503c <__assert_fail@plt+0x3f9c>
   14e28:	mov	r2, #114	; 0x72
   14e2c:	ldr	r0, [sp, #60]	; 0x3c
   14e30:	tst	r0, #1
   14e34:	mov	r0, r2
   14e38:	bne	1503c <__assert_fail@plt+0x3f9c>
   14e3c:	b	15848 <__assert_fail@plt+0x47a8>
   14e40:	ldr	r0, [sp, #80]	; 0x50
   14e44:	tst	r0, #1
   14e48:	beq	15124 <__assert_fail@plt+0x4084>
   14e4c:	ldr	r0, [fp, #-72]	; 0xffffffb8
   14e50:	tst	r0, #1
   14e54:	bne	15970 <__assert_fail@plt+0x48d0>
   14e58:	ldr	r0, [fp, #-64]	; 0xffffffc0
   14e5c:	ldr	r2, [fp, #-48]	; 0xffffffd0
   14e60:	cmp	r0, #2
   14e64:	ldr	r0, [fp, #-80]	; 0xffffffb0
   14e68:	movwne	r0, #1
   14e6c:	orr	r0, r0, r2
   14e70:	tst	r0, #1
   14e74:	beq	1541c <__assert_fail@plt+0x437c>
   14e78:	mov	r0, r9
   14e7c:	b	15450 <__assert_fail@plt+0x43b0>
   14e80:	ldr	r0, [fp, #-64]	; 0xffffffc0
   14e84:	mov	r8, #0
   14e88:	mov	r5, #63	; 0x3f
   14e8c:	cmp	r0, #5
   14e90:	beq	152d8 <__assert_fail@plt+0x4238>
   14e94:	cmp	r0, #2
   14e98:	bne	15388 <__assert_fail@plt+0x42e8>
   14e9c:	ldr	r0, [fp, #-72]	; 0xffffffb8
   14ea0:	tst	r0, #1
   14ea4:	bne	15848 <__assert_fail@plt+0x47a8>
   14ea8:	mov	r4, #0
   14eac:	ldr	r0, [fp, #-68]	; 0xffffffbc
   14eb0:	cmp	r0, #0
   14eb4:	bne	14d78 <__assert_fail@plt+0x3cd8>
   14eb8:	b	15050 <__assert_fail@plt+0x3fb0>
   14ebc:	mov	r0, #118	; 0x76
   14ec0:	b	1503c <__assert_fail@plt+0x3f9c>
   14ec4:	mov	r0, #1
   14ec8:	mov	r5, #39	; 0x27
   14ecc:	str	r0, [sp, #52]	; 0x34
   14ed0:	ldr	r0, [fp, #-64]	; 0xffffffc0
   14ed4:	cmp	r0, #2
   14ed8:	bne	14f4c <__assert_fail@plt+0x3eac>
   14edc:	ldr	r0, [fp, #-72]	; 0xffffffb8
   14ee0:	tst	r0, #1
   14ee4:	bne	15848 <__assert_fail@plt+0x47a8>
   14ee8:	ldr	r2, [sp, #48]	; 0x30
   14eec:	clz	r1, sl
   14ef0:	mov	r8, #0
   14ef4:	lsr	r1, r1, #5
   14ef8:	cmp	r2, #0
   14efc:	mov	r0, r2
   14f00:	movwne	r0, #1
   14f04:	orrs	r0, r0, r1
   14f08:	moveq	r2, sl
   14f0c:	moveq	sl, r0
   14f10:	cmp	r9, sl
   14f14:	str	r2, [sp, #48]	; 0x30
   14f18:	movcc	r0, #39	; 0x27
   14f1c:	strbcc	r0, [r6, r9]
   14f20:	add	r0, r9, #1
   14f24:	cmp	r0, sl
   14f28:	movcc	r1, #92	; 0x5c
   14f2c:	strbcc	r1, [r6, r0]
   14f30:	add	r0, r9, #2
   14f34:	add	r9, r9, #3
   14f38:	cmp	r0, sl
   14f3c:	movcc	r1, #39	; 0x27
   14f40:	strbcc	r1, [r6, r0]
   14f44:	mov	r0, #0
   14f48:	str	r0, [fp, #-48]	; 0xffffffd0
   14f4c:	mov	r4, #1
   14f50:	ldr	r0, [fp, #-68]	; 0xffffffbc
   14f54:	cmp	r0, #0
   14f58:	bne	14d78 <__assert_fail@plt+0x3cd8>
   14f5c:	b	15050 <__assert_fail@plt+0x3fb0>
   14f60:	ldr	r0, [sp, #32]
   14f64:	cmp	r0, #1
   14f68:	bne	15154 <__assert_fail@plt+0x40b4>
   14f6c:	str	lr, [sp, #84]	; 0x54
   14f70:	bl	10fb0 <__ctype_b_loc@plt>
   14f74:	ldr	r0, [r0]
   14f78:	ldr	ip, [fp, #-84]	; 0xffffffac
   14f7c:	mov	r1, #1
   14f80:	add	r0, r0, r5, lsl #1
   14f84:	ldrb	r0, [r0, #1]
   14f88:	ubfx	r4, r0, #6, #1
   14f8c:	b	1554c <__assert_fail@plt+0x44ac>
   14f90:	cmp	r7, #0
   14f94:	ldrbeq	r0, [ip, #1]
   14f98:	cmpeq	r0, #0
   14f9c:	beq	14fb8 <__assert_fail@plt+0x3f18>
   14fa0:	mvn	lr, #0
   14fa4:	mov	r8, #0
   14fa8:	ldr	r0, [fp, #-68]	; 0xffffffbc
   14fac:	cmp	r0, #0
   14fb0:	bne	14d78 <__assert_fail@plt+0x3cd8>
   14fb4:	b	15050 <__assert_fail@plt+0x3fb0>
   14fb8:	mov	r1, #1
   14fbc:	ldr	r0, [fp, #-64]	; 0xffffffc0
   14fc0:	cmp	r0, #2
   14fc4:	bne	14fd4 <__assert_fail@plt+0x3f34>
   14fc8:	ldr	r0, [fp, #-72]	; 0xffffffb8
   14fcc:	tst	r0, #1
   14fd0:	bne	15848 <__assert_fail@plt+0x47a8>
   14fd4:	mov	r4, r1
   14fd8:	ldr	r0, [fp, #-68]	; 0xffffffbc
   14fdc:	cmp	r0, #0
   14fe0:	bne	14d78 <__assert_fail@plt+0x3cd8>
   14fe4:	b	15050 <__assert_fail@plt+0x3fb0>
   14fe8:	ldr	r1, [sp, #40]	; 0x28
   14fec:	mov	r8, #0
   14ff0:	mov	r0, #92	; 0x5c
   14ff4:	cmp	r1, #0
   14ff8:	beq	1503c <__assert_fail@plt+0x3f9c>
   14ffc:	mov	r4, #0
   15000:	cmp	r8, #0
   15004:	bne	14df8 <__assert_fail@plt+0x3d58>
   15008:	ldr	r2, [fp, #-48]	; 0xffffffd0
   1500c:	tst	r2, #1
   15010:	beq	150fc <__assert_fail@plt+0x405c>
   15014:	cmp	r9, sl
   15018:	movcc	r1, #39	; 0x27
   1501c:	strbcc	r1, [r6, r9]
   15020:	add	r1, r9, #1
   15024:	add	r9, r9, #2
   15028:	cmp	r1, sl
   1502c:	movcc	r2, #39	; 0x27
   15030:	strbcc	r2, [r6, r1]
   15034:	mov	r2, #0
   15038:	b	150fc <__assert_fail@plt+0x405c>
   1503c:	ldr	r1, [sp, #80]	; 0x50
   15040:	mov	r4, #0
   15044:	mov	r8, #0
   15048:	tst	r1, #1
   1504c:	bne	1508c <__assert_fail@plt+0x3fec>
   15050:	ldr	r0, [fp, #-88]	; 0xffffffa8
   15054:	cmp	r0, #0
   15058:	mov	r0, r5
   1505c:	beq	15080 <__assert_fail@plt+0x3fe0>
   15060:	ldr	r1, [fp, #16]
   15064:	ubfx	r0, r5, #5, #3
   15068:	mov	r2, #1
   1506c:	ldr	r0, [r1, r0, lsl #2]
   15070:	and	r1, r5, #31
   15074:	tst	r0, r2, lsl r1
   15078:	mov	r0, r5
   1507c:	bne	1508c <__assert_fail@plt+0x3fec>
   15080:	ldr	r1, [fp, #-56]	; 0xffffffc8
   15084:	cmp	r1, #0
   15088:	beq	154e4 <__assert_fail@plt+0x4444>
   1508c:	ldr	r1, [fp, #-72]	; 0xffffffb8
   15090:	tst	r1, #1
   15094:	bne	15828 <__assert_fail@plt+0x4788>
   15098:	ldr	r1, [fp, #-64]	; 0xffffffc0
   1509c:	ldr	r2, [fp, #-48]	; 0xffffffd0
   150a0:	cmp	r1, #2
   150a4:	ldr	r1, [fp, #-80]	; 0xffffffb0
   150a8:	movwne	r1, #1
   150ac:	orr	r1, r1, r2
   150b0:	tst	r1, #1
   150b4:	bne	150ec <__assert_fail@plt+0x404c>
   150b8:	cmp	r9, sl
   150bc:	movcc	r1, #39	; 0x27
   150c0:	strbcc	r1, [r6, r9]
   150c4:	add	r1, r9, #1
   150c8:	cmp	r1, sl
   150cc:	movcc	r2, #36	; 0x24
   150d0:	strbcc	r2, [r6, r1]
   150d4:	add	r1, r9, #2
   150d8:	add	r9, r9, #3
   150dc:	cmp	r1, sl
   150e0:	movcc	r2, #39	; 0x27
   150e4:	strbcc	r2, [r6, r1]
   150e8:	mov	r2, #1
   150ec:	cmp	r9, sl
   150f0:	movcc	r1, #92	; 0x5c
   150f4:	strbcc	r1, [r6, r9]
   150f8:	add	r9, r9, #1
   150fc:	cmp	r9, sl
   15100:	add	r7, r7, #1
   15104:	strbcc	r0, [r6, r9]
   15108:	ldr	r0, [fp, #-52]	; 0xffffffcc
   1510c:	add	r9, r9, #1
   15110:	and	r0, r0, r4
   15114:	mov	r4, r0
   15118:	cmn	lr, #1
   1511c:	bne	14a90 <__assert_fail@plt+0x39f0>
   15120:	b	14a9c <__assert_fail@plt+0x39fc>
   15124:	ldr	r0, [sp, #28]
   15128:	mov	r4, #0
   1512c:	mov	r8, #0
   15130:	mov	r5, #0
   15134:	cmp	r0, #0
   15138:	beq	15050 <__assert_fail@plt+0x3fb0>
   1513c:	ldr	r4, [fp, #-52]	; 0xffffffcc
   15140:	ldr	r2, [fp, #-48]	; 0xffffffd0
   15144:	add	r7, r7, #1
   15148:	cmn	lr, #1
   1514c:	bne	14a90 <__assert_fail@plt+0x39f0>
   15150:	b	14a9c <__assert_fail@plt+0x39fc>
   15154:	mov	r0, #0
   15158:	cmn	lr, #1
   1515c:	str	r0, [fp, #-36]	; 0xffffffdc
   15160:	str	r0, [fp, #-40]	; 0xffffffd8
   15164:	bne	15178 <__assert_fail@plt+0x40d8>
   15168:	mov	r0, ip
   1516c:	bl	10fc8 <strlen@plt>
   15170:	ldr	ip, [fp, #-84]	; 0xffffffac
   15174:	mov	lr, r0
   15178:	ldr	r0, [sp, #36]	; 0x24
   1517c:	str	sl, [sp, #56]	; 0x38
   15180:	str	lr, [sp, #84]	; 0x54
   15184:	cmp	r0, #0
   15188:	beq	153a0 <__assert_fail@plt+0x4300>
   1518c:	add	r0, ip, r7
   15190:	mov	r4, #1
   15194:	mov	r6, #0
   15198:	sub	sl, fp, #40	; 0x28
   1519c:	str	r0, [sp, #20]
   151a0:	str	r6, [sp, #64]	; 0x40
   151a4:	add	r6, r6, r7
   151a8:	sub	r0, fp, #44	; 0x2c
   151ac:	mov	r3, sl
   151b0:	add	r1, ip, r6
   151b4:	sub	r2, lr, r6
   151b8:	bl	1802c <__assert_fail@plt+0x6f8c>
   151bc:	cmn	r0, #2
   151c0:	beq	154fc <__assert_fail@plt+0x445c>
   151c4:	ldr	sl, [sp, #56]	; 0x38
   151c8:	cmn	r0, #1
   151cc:	beq	154f0 <__assert_fail@plt+0x4450>
   151d0:	cmp	r0, #0
   151d4:	beq	154f4 <__assert_fail@plt+0x4454>
   151d8:	cmp	r0, #2
   151dc:	bcc	1529c <__assert_fail@plt+0x41fc>
   151e0:	ldr	r1, [sp, #64]	; 0x40
   151e4:	ldr	r2, [sp, #20]
   151e8:	add	r1, r2, r1
   151ec:	mov	r2, #1
   151f0:	ldrb	r3, [r1, r2]
   151f4:	sub	r3, r3, #91	; 0x5b
   151f8:	cmp	r3, #33	; 0x21
   151fc:	bhi	15290 <__assert_fail@plt+0x41f0>
   15200:	add	r6, pc, #0
   15204:	ldr	pc, [r6, r3, lsl #2]
   15208:	andeq	r5, r1, r4, asr r8
   1520c:	andeq	r5, r1, r4, asr r8
   15210:	muleq	r1, r0, r2
   15214:	andeq	r5, r1, r4, asr r8
   15218:	muleq	r1, r0, r2
   1521c:	andeq	r5, r1, r4, asr r8
   15220:	muleq	r1, r0, r2
   15224:	muleq	r1, r0, r2
   15228:	muleq	r1, r0, r2
   1522c:	muleq	r1, r0, r2
   15230:	muleq	r1, r0, r2
   15234:	muleq	r1, r0, r2
   15238:	muleq	r1, r0, r2
   1523c:	muleq	r1, r0, r2
   15240:	muleq	r1, r0, r2
   15244:	muleq	r1, r0, r2
   15248:	muleq	r1, r0, r2
   1524c:	muleq	r1, r0, r2
   15250:	muleq	r1, r0, r2
   15254:	muleq	r1, r0, r2
   15258:	muleq	r1, r0, r2
   1525c:	muleq	r1, r0, r2
   15260:	muleq	r1, r0, r2
   15264:	muleq	r1, r0, r2
   15268:	muleq	r1, r0, r2
   1526c:	muleq	r1, r0, r2
   15270:	muleq	r1, r0, r2
   15274:	muleq	r1, r0, r2
   15278:	muleq	r1, r0, r2
   1527c:	muleq	r1, r0, r2
   15280:	muleq	r1, r0, r2
   15284:	muleq	r1, r0, r2
   15288:	muleq	r1, r0, r2
   1528c:	andeq	r5, r1, r4, asr r8
   15290:	add	r2, r2, #1
   15294:	cmp	r2, r0
   15298:	bcc	151f0 <__assert_fail@plt+0x4150>
   1529c:	ldr	r6, [sp, #64]	; 0x40
   152a0:	add	r6, r0, r6
   152a4:	ldr	r0, [fp, #-44]	; 0xffffffd4
   152a8:	bl	10f08 <iswprint@plt>
   152ac:	cmp	r0, #0
   152b0:	sub	sl, fp, #40	; 0x28
   152b4:	movwne	r0, #1
   152b8:	and	r4, r4, r0
   152bc:	mov	r0, sl
   152c0:	bl	10eb4 <mbsinit@plt>
   152c4:	ldr	ip, [fp, #-84]	; 0xffffffac
   152c8:	ldr	lr, [sp, #84]	; 0x54
   152cc:	cmp	r0, #0
   152d0:	beq	151a0 <__assert_fail@plt+0x4100>
   152d4:	b	15540 <__assert_fail@plt+0x44a0>
   152d8:	ldr	r0, [sp, #24]
   152dc:	cmp	r0, #0
   152e0:	beq	15388 <__assert_fail@plt+0x42e8>
   152e4:	add	r0, r7, #2
   152e8:	cmp	r0, lr
   152ec:	bcs	15388 <__assert_fail@plt+0x42e8>
   152f0:	add	r1, ip, r7
   152f4:	ldrb	r1, [r1, #1]
   152f8:	cmp	r1, #63	; 0x3f
   152fc:	bne	15388 <__assert_fail@plt+0x42e8>
   15300:	ldrb	r5, [ip, r0]
   15304:	sub	r1, r5, #33	; 0x21
   15308:	cmp	r1, #29
   1530c:	bhi	15388 <__assert_fail@plt+0x42e8>
   15310:	movw	r3, #20929	; 0x51c1
   15314:	mov	r2, #1
   15318:	movt	r3, #14336	; 0x3800
   1531c:	tst	r3, r2, lsl r1
   15320:	beq	15388 <__assert_fail@plt+0x42e8>
   15324:	ldr	r1, [fp, #-72]	; 0xffffffb8
   15328:	tst	r1, #1
   1532c:	bne	15978 <__assert_fail@plt+0x48d8>
   15330:	cmp	r9, sl
   15334:	mov	r7, r0
   15338:	mov	r4, #0
   1533c:	movcc	r1, #63	; 0x3f
   15340:	strbcc	r1, [r6, r9]
   15344:	add	r1, r9, #1
   15348:	cmp	r1, sl
   1534c:	movcc	r2, #34	; 0x22
   15350:	strbcc	r2, [r6, r1]
   15354:	add	r1, r9, #2
   15358:	cmp	r1, sl
   1535c:	movcc	r2, #34	; 0x22
   15360:	strbcc	r2, [r6, r1]
   15364:	add	r1, r9, #3
   15368:	add	r9, r9, #4
   1536c:	cmp	r1, sl
   15370:	movcc	r2, #63	; 0x3f
   15374:	strbcc	r2, [r6, r1]
   15378:	ldr	r0, [fp, #-68]	; 0xffffffbc
   1537c:	cmp	r0, #0
   15380:	bne	14d78 <__assert_fail@plt+0x3cd8>
   15384:	b	15050 <__assert_fail@plt+0x3fb0>
   15388:	mov	r5, #63	; 0x3f
   1538c:	mov	r4, #0
   15390:	ldr	r0, [fp, #-68]	; 0xffffffbc
   15394:	cmp	r0, #0
   15398:	bne	14d78 <__assert_fail@plt+0x3cd8>
   1539c:	b	15050 <__assert_fail@plt+0x3fb0>
   153a0:	mov	r4, #1
   153a4:	mov	r6, #0
   153a8:	sub	sl, fp, #40	; 0x28
   153ac:	str	r6, [sp, #64]	; 0x40
   153b0:	add	r6, r6, r7
   153b4:	sub	r0, fp, #44	; 0x2c
   153b8:	mov	r3, sl
   153bc:	add	r1, ip, r6
   153c0:	sub	r2, lr, r6
   153c4:	bl	1802c <__assert_fail@plt+0x6f8c>
   153c8:	cmn	r0, #2
   153cc:	beq	154fc <__assert_fail@plt+0x445c>
   153d0:	cmn	r0, #1
   153d4:	beq	154f0 <__assert_fail@plt+0x4450>
   153d8:	ldr	r6, [sp, #64]	; 0x40
   153dc:	cmp	r0, #0
   153e0:	beq	1553c <__assert_fail@plt+0x449c>
   153e4:	add	r6, r0, r6
   153e8:	ldr	r0, [fp, #-44]	; 0xffffffd4
   153ec:	bl	10f08 <iswprint@plt>
   153f0:	cmp	r0, #0
   153f4:	sub	sl, fp, #40	; 0x28
   153f8:	movwne	r0, #1
   153fc:	and	r4, r4, r0
   15400:	mov	r0, sl
   15404:	bl	10eb4 <mbsinit@plt>
   15408:	ldr	ip, [fp, #-84]	; 0xffffffac
   1540c:	ldr	lr, [sp, #84]	; 0x54
   15410:	cmp	r0, #0
   15414:	beq	153ac <__assert_fail@plt+0x430c>
   15418:	b	15540 <__assert_fail@plt+0x44a0>
   1541c:	cmp	r9, sl
   15420:	mov	r2, #1
   15424:	movcc	r0, #39	; 0x27
   15428:	strbcc	r0, [r6, r9]
   1542c:	add	r0, r9, #1
   15430:	cmp	r0, sl
   15434:	movcc	r1, #36	; 0x24
   15438:	strbcc	r1, [r6, r0]
   1543c:	add	r0, r9, #2
   15440:	cmp	r0, sl
   15444:	movcc	r1, #39	; 0x27
   15448:	strbcc	r1, [r6, r0]
   1544c:	add	r0, r9, #3
   15450:	cmp	r0, sl
   15454:	add	r9, r0, #1
   15458:	str	r2, [fp, #-48]	; 0xffffffd0
   1545c:	movcc	r1, #92	; 0x5c
   15460:	strbcc	r1, [r6, r0]
   15464:	ldr	r1, [fp, #-64]	; 0xffffffc0
   15468:	cmp	r1, #2
   1546c:	beq	154cc <__assert_fail@plt+0x442c>
   15470:	add	r1, r7, #1
   15474:	mov	r4, #0
   15478:	mov	r8, #1
   1547c:	mov	r5, #48	; 0x30
   15480:	cmp	r1, lr
   15484:	bcs	14d6c <__assert_fail@plt+0x3ccc>
   15488:	ldrb	r1, [ip, r1]
   1548c:	sub	r1, r1, #48	; 0x30
   15490:	uxtb	r1, r1
   15494:	cmp	r1, #9
   15498:	bhi	14d6c <__assert_fail@plt+0x3ccc>
   1549c:	cmp	r9, sl
   154a0:	movcc	r1, #48	; 0x30
   154a4:	strbcc	r1, [r6, r9]
   154a8:	add	r1, r0, #2
   154ac:	add	r9, r0, #3
   154b0:	cmp	r1, sl
   154b4:	movcc	r2, #48	; 0x30
   154b8:	strbcc	r2, [r6, r1]
   154bc:	ldr	r0, [fp, #-68]	; 0xffffffbc
   154c0:	cmp	r0, #0
   154c4:	bne	14d78 <__assert_fail@plt+0x3cd8>
   154c8:	b	15050 <__assert_fail@plt+0x3fb0>
   154cc:	mov	r0, #48	; 0x30
   154d0:	mov	r8, #1
   154d4:	mov	r4, #0
   154d8:	ldr	r1, [fp, #-56]	; 0xffffffc8
   154dc:	cmp	r1, #0
   154e0:	bne	1508c <__assert_fail@plt+0x3fec>
   154e4:	cmp	r8, #0
   154e8:	beq	15008 <__assert_fail@plt+0x3f68>
   154ec:	b	14df8 <__assert_fail@plt+0x3d58>
   154f0:	mov	r4, #0
   154f4:	ldr	ip, [fp, #-84]	; 0xffffffac
   154f8:	b	15534 <__assert_fail@plt+0x4494>
   154fc:	ldr	r1, [sp, #84]	; 0x54
   15500:	ldr	ip, [fp, #-84]	; 0xffffffac
   15504:	mov	r4, #0
   15508:	cmp	r6, r1
   1550c:	bcs	15534 <__assert_fail@plt+0x4494>
   15510:	ldrb	r0, [ip, r6]
   15514:	cmp	r0, #0
   15518:	beq	15534 <__assert_fail@plt+0x4494>
   1551c:	ldr	r0, [sp, #64]	; 0x40
   15520:	add	r0, r0, #1
   15524:	add	r6, r0, r7
   15528:	str	r0, [sp, #64]	; 0x40
   1552c:	cmp	r6, r1
   15530:	bcc	15510 <__assert_fail@plt+0x4470>
   15534:	ldr	r6, [sp, #64]	; 0x40
   15538:	b	15540 <__assert_fail@plt+0x44a0>
   1553c:	ldr	ip, [fp, #-84]	; 0xffffffac
   15540:	mov	r1, r6
   15544:	ldr	r6, [sp, #76]	; 0x4c
   15548:	ldr	sl, [sp, #56]	; 0x38
   1554c:	ldr	r0, [sp, #44]	; 0x2c
   15550:	cmp	r1, #1
   15554:	orr	r2, r4, r0
   15558:	mov	r0, r1
   1555c:	bhi	1557c <__assert_fail@plt+0x44dc>
   15560:	tst	r2, #1
   15564:	beq	1557c <__assert_fail@plt+0x44dc>
   15568:	ldr	lr, [sp, #84]	; 0x54
   1556c:	ldr	r0, [fp, #-68]	; 0xffffffbc
   15570:	cmp	r0, #0
   15574:	bne	14d78 <__assert_fail@plt+0x3cd8>
   15578:	b	15050 <__assert_fail@plt+0x3fb0>
   1557c:	str	r2, [sp, #64]	; 0x40
   15580:	add	r0, r0, r7
   15584:	add	r1, r7, #1
   15588:	ldr	lr, [sp, #84]	; 0x54
   1558c:	ldr	r7, [fp, #-64]	; 0xffffffc0
   15590:	ldr	r2, [fp, #-48]	; 0xffffffd0
   15594:	mov	r3, #0
   15598:	str	r0, [sp, #56]	; 0x38
   1559c:	ldr	r0, [sp, #64]	; 0x40
   155a0:	tst	r0, #1
   155a4:	bne	1568c <__assert_fail@plt+0x45ec>
   155a8:	ldr	r0, [fp, #-72]	; 0xffffffb8
   155ac:	tst	r0, #1
   155b0:	bne	1582c <__assert_fail@plt+0x478c>
   155b4:	ldr	r3, [fp, #-80]	; 0xffffffb0
   155b8:	cmp	r7, #2
   155bc:	movwne	r3, #1
   155c0:	orr	r3, r3, r2
   155c4:	tst	r3, #1
   155c8:	bne	15600 <__assert_fail@plt+0x4560>
   155cc:	cmp	r9, sl
   155d0:	add	r3, r9, #1
   155d4:	movcc	r2, #39	; 0x27
   155d8:	strbcc	r2, [r6, r9]
   155dc:	cmp	r3, sl
   155e0:	movcc	r2, #36	; 0x24
   155e4:	strbcc	r2, [r6, r3]
   155e8:	add	r3, r9, #2
   155ec:	add	r9, r9, #3
   155f0:	cmp	r3, sl
   155f4:	movcc	r2, #39	; 0x27
   155f8:	strbcc	r2, [r6, r3]
   155fc:	mov	r2, #1
   15600:	cmp	r9, sl
   15604:	mov	r0, r2
   15608:	movcc	r3, #92	; 0x5c
   1560c:	strbcc	r3, [r6, r9]
   15610:	add	r3, r9, #1
   15614:	cmp	r3, sl
   15618:	andcc	r7, r5, #192	; 0xc0
   1561c:	movcc	r2, #48	; 0x30
   15620:	orrcc	r7, r2, r7, lsr #6
   15624:	strbcc	r7, [r6, r3]
   15628:	add	r3, r9, #2
   1562c:	add	r9, r9, #3
   15630:	cmp	r3, sl
   15634:	lsrcc	r7, r5, #3
   15638:	movcc	r2, #6
   1563c:	bficc	r7, r2, #3, #29
   15640:	mov	r2, #6
   15644:	strbcc	r7, [r6, r3]
   15648:	bfi	r5, r2, #3, #29
   1564c:	mov	r3, #1
   15650:	mov	r2, r0
   15654:	ldr	r0, [sp, #56]	; 0x38
   15658:	and	r8, r3, #1
   1565c:	cmp	r0, r1
   15660:	bhi	156c0 <__assert_fail@plt+0x4620>
   15664:	b	15700 <__assert_fail@plt+0x4660>
   15668:	cmp	r9, sl
   1566c:	ldr	r7, [fp, #-64]	; 0xffffffc0
   15670:	strbcc	r5, [r6, r9]
   15674:	add	r9, r9, #1
   15678:	ldrb	r5, [ip, r1]
   1567c:	add	r1, r1, #1
   15680:	ldr	r0, [sp, #64]	; 0x40
   15684:	tst	r0, #1
   15688:	beq	155a8 <__assert_fail@plt+0x4508>
   1568c:	ldr	r7, [fp, #-56]	; 0xffffffc8
   15690:	tst	r7, #1
   15694:	beq	156a8 <__assert_fail@plt+0x4608>
   15698:	cmp	r9, sl
   1569c:	movcc	r7, #92	; 0x5c
   156a0:	strbcc	r7, [r6, r9]
   156a4:	add	r9, r9, #1
   156a8:	mov	r7, #0
   156ac:	str	r7, [fp, #-56]	; 0xffffffc8
   156b0:	ldr	r0, [sp, #56]	; 0x38
   156b4:	and	r8, r3, #1
   156b8:	cmp	r0, r1
   156bc:	bls	15700 <__assert_fail@plt+0x4660>
   156c0:	cmp	r8, #0
   156c4:	mvn	r7, r2
   156c8:	movwne	r8, #1
   156cc:	orr	r7, r7, r8
   156d0:	tst	r7, #1
   156d4:	bne	15668 <__assert_fail@plt+0x45c8>
   156d8:	cmp	r9, sl
   156dc:	movcc	r7, #39	; 0x27
   156e0:	strbcc	r7, [r6, r9]
   156e4:	add	r7, r9, #1
   156e8:	add	r9, r9, #2
   156ec:	cmp	r7, sl
   156f0:	movcc	r2, #39	; 0x27
   156f4:	strbcc	r2, [r6, r7]
   156f8:	mov	r2, #0
   156fc:	b	15668 <__assert_fail@plt+0x45c8>
   15700:	cmp	r8, #0
   15704:	sub	r7, r1, #1
   15708:	mov	r0, r5
   1570c:	str	r2, [fp, #-48]	; 0xffffffd0
   15710:	movwne	r8, #1
   15714:	cmp	r8, #0
   15718:	beq	15008 <__assert_fail@plt+0x3f68>
   1571c:	b	14df8 <__assert_fail@plt+0x3d58>
   15720:	mov	lr, r7
   15724:	b	1572c <__assert_fail@plt+0x468c>
   15728:	mvn	lr, #0
   1572c:	ldr	r7, [fp, #-64]	; 0xffffffc0
   15730:	ldr	r1, [fp, #-72]	; 0xffffffb8
   15734:	eor	r0, r7, #2
   15738:	orr	r0, r0, r9
   1573c:	clz	r0, r0
   15740:	lsr	r0, r0, #5
   15744:	tst	r1, r0
   15748:	bne	15848 <__assert_fail@plt+0x47a8>
   1574c:	mov	r0, r1
   15750:	ldr	r1, [fp, #-80]	; 0xffffffb0
   15754:	cmp	r7, #2
   15758:	movwne	r1, #1
   1575c:	orr	r0, r0, r1
   15760:	tst	r0, #1
   15764:	ldreq	r0, [sp, #52]	; 0x34
   15768:	streq	lr, [sp, #84]	; 0x54
   1576c:	eoreq	r0, r0, #1
   15770:	tsteq	r0, #1
   15774:	bne	1590c <__assert_fail@plt+0x486c>
   15778:	tst	r4, #1
   1577c:	bne	158c8 <__assert_fail@plt+0x4828>
   15780:	ldr	r6, [sp, #48]	; 0x30
   15784:	mov	r8, #0
   15788:	cmp	r6, #0
   1578c:	beq	15904 <__assert_fail@plt+0x4864>
   15790:	ldr	r0, [sp, #80]	; 0x50
   15794:	mov	r1, #0
   15798:	cmp	sl, #0
   1579c:	mov	r4, #0
   157a0:	str	r1, [fp, #-72]	; 0xffffffb8
   157a4:	beq	14698 <__assert_fail@plt+0x35f8>
   157a8:	b	1590c <__assert_fail@plt+0x486c>
   157ac:	ldrb	r1, [r0, #3]
   157b0:	cmp	r1, #56	; 0x38
   157b4:	ldrbeq	r1, [r0, #4]
   157b8:	cmpeq	r1, #48	; 0x30
   157bc:	bne	14890 <__assert_fail@plt+0x37f0>
   157c0:	ldrb	r1, [r0, #5]
   157c4:	cmp	r1, #51	; 0x33
   157c8:	ldrbeq	r1, [r0, #6]
   157cc:	cmpeq	r1, #48	; 0x30
   157d0:	bne	14890 <__assert_fail@plt+0x37f0>
   157d4:	ldrb	r0, [r0, #7]
   157d8:	cmp	r0, #0
   157dc:	movw	r0, #39290	; 0x997a
   157e0:	movt	r0, #1
   157e4:	str	r0, [sp, #68]	; 0x44
   157e8:	bne	14890 <__assert_fail@plt+0x37f0>
   157ec:	b	148ac <__assert_fail@plt+0x380c>
   157f0:	ldrb	r1, [r0, #4]
   157f4:	cmp	r1, #48	; 0x30
   157f8:	ldrbeq	r1, [r0, #5]
   157fc:	cmpeq	r1, #51	; 0x33
   15800:	bne	14974 <__assert_fail@plt+0x38d4>
   15804:	ldrb	r1, [r0, #6]
   15808:	cmp	r1, #48	; 0x30
   1580c:	ldrbeq	r0, [r0, #7]
   15810:	cmpeq	r0, #0
   15814:	bne	14974 <__assert_fail@plt+0x38d4>
   15818:	movw	r0, #39294	; 0x997e
   1581c:	movt	r0, #1
   15820:	str	r0, [sp, #72]	; 0x48
   15824:	b	14994 <__assert_fail@plt+0x38f4>
   15828:	ldr	r7, [fp, #-64]	; 0xffffffc0
   1582c:	ldr	r2, [sp, #80]	; 0x50
   15830:	b	15868 <__assert_fail@plt+0x47c8>
   15834:	ldr	ip, [fp, #-84]	; 0xffffffac
   15838:	mov	r2, #1
   1583c:	mov	lr, r4
   15840:	ldr	r7, [fp, #-64]	; 0xffffffc0
   15844:	b	15868 <__assert_fail@plt+0x47c8>
   15848:	ldr	r2, [sp, #80]	; 0x50
   1584c:	mov	r7, #2
   15850:	b	15868 <__assert_fail@plt+0x47c8>
   15854:	ldr	r6, [sp, #76]	; 0x4c
   15858:	ldr	ip, [fp, #-84]	; 0xffffffac
   1585c:	ldr	lr, [sp, #84]	; 0x54
   15860:	ldr	r2, [sp, #80]	; 0x50
   15864:	mov	r7, #2
   15868:	mov	r0, #0
   1586c:	ldr	r1, [fp, #12]
   15870:	tst	r2, #1
   15874:	mov	r2, r7
   15878:	mov	r3, lr
   1587c:	str	r0, [sp, #8]
   15880:	ldr	r0, [sp, #68]	; 0x44
   15884:	movwne	r2, #4
   15888:	cmp	r7, #2
   1588c:	movne	r2, r7
   15890:	str	r2, [sp]
   15894:	mov	r2, ip
   15898:	bic	r1, r1, #2
   1589c:	str	r0, [sp, #12]
   158a0:	ldr	r0, [sp, #72]	; 0x48
   158a4:	str	r1, [sp, #4]
   158a8:	mov	r1, sl
   158ac:	str	r0, [sp, #16]
   158b0:	mov	r0, r6
   158b4:	bl	1461c <__assert_fail@plt+0x357c>
   158b8:	mov	r9, r0
   158bc:	mov	r0, r9
   158c0:	sub	sp, fp, #28
   158c4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   158c8:	mov	r0, #5
   158cc:	ldr	r1, [sp, #48]	; 0x30
   158d0:	ldr	r2, [fp, #-84]	; 0xffffffac
   158d4:	ldr	r3, [sp, #84]	; 0x54
   158d8:	str	r0, [sp]
   158dc:	ldr	r0, [fp, #12]
   158e0:	str	r0, [sp, #4]
   158e4:	ldr	r0, [fp, #16]
   158e8:	str	r0, [sp, #8]
   158ec:	ldr	r0, [sp, #68]	; 0x44
   158f0:	str	r0, [sp, #12]
   158f4:	ldr	r0, [sp, #72]	; 0x48
   158f8:	str	r0, [sp, #16]
   158fc:	ldr	r0, [sp, #76]	; 0x4c
   15900:	b	158b4 <__assert_fail@plt+0x4814>
   15904:	mov	r0, #0
   15908:	str	r0, [fp, #-72]	; 0xffffffb8
   1590c:	ldr	r1, [sp, #92]	; 0x5c
   15910:	cmp	r1, #0
   15914:	beq	15954 <__assert_fail@plt+0x48b4>
   15918:	ldr	r0, [fp, #-72]	; 0xffffffb8
   1591c:	ldr	r2, [sp, #76]	; 0x4c
   15920:	tst	r0, #1
   15924:	bne	15958 <__assert_fail@plt+0x48b8>
   15928:	ldrb	r0, [r1]
   1592c:	cmp	r0, #0
   15930:	beq	15958 <__assert_fail@plt+0x48b8>
   15934:	add	r1, r1, #1
   15938:	cmp	r9, sl
   1593c:	strbcc	r0, [r2, r9]
   15940:	add	r9, r9, #1
   15944:	ldrb	r0, [r1], #1
   15948:	cmp	r0, #0
   1594c:	bne	15938 <__assert_fail@plt+0x4898>
   15950:	b	15958 <__assert_fail@plt+0x48b8>
   15954:	ldr	r2, [sp, #76]	; 0x4c
   15958:	cmp	r9, sl
   1595c:	movcc	r0, #0
   15960:	strbcc	r0, [r2, r9]
   15964:	mov	r0, r9
   15968:	sub	sp, fp, #28
   1596c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15970:	mov	r2, #1
   15974:	b	15840 <__assert_fail@plt+0x47a0>
   15978:	ldr	r2, [sp, #80]	; 0x50
   1597c:	mov	r7, #5
   15980:	b	15868 <__assert_fail@plt+0x47c8>
   15984:	bl	11088 <abort@plt>
   15988:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1598c:	add	fp, sp, #28
   15990:	sub	sp, sp, #28
   15994:	movw	r5, #50312	; 0xc488
   15998:	cmp	r2, #0
   1599c:	mov	r4, r1
   159a0:	mov	r7, r0
   159a4:	str	r0, [sp, #20]
   159a8:	movt	r5, #2
   159ac:	movne	r5, r2
   159b0:	bl	10fe0 <__errno_location@plt>
   159b4:	mov	sl, r0
   159b8:	ldm	r5, {r0, r1}
   159bc:	ldr	r2, [r5, #40]	; 0x28
   159c0:	ldr	r3, [r5, #44]	; 0x2c
   159c4:	add	r9, r5, #8
   159c8:	ldr	r6, [sl]
   159cc:	orr	r8, r1, #1
   159d0:	mov	r1, #0
   159d4:	str	r6, [sp, #24]
   159d8:	stm	sp, {r0, r8, r9}
   159dc:	str	r2, [sp, #12]
   159e0:	str	r3, [sp, #16]
   159e4:	mov	r0, #0
   159e8:	mov	r2, r7
   159ec:	mov	r3, r4
   159f0:	mov	r6, r4
   159f4:	bl	1461c <__assert_fail@plt+0x357c>
   159f8:	add	r7, r0, #1
   159fc:	mov	r0, r7
   15a00:	bl	16ac8 <__assert_fail@plt+0x5a28>
   15a04:	mov	r4, r0
   15a08:	ldr	r0, [r5]
   15a0c:	ldr	r2, [r5, #44]	; 0x2c
   15a10:	ldr	r1, [r5, #40]	; 0x28
   15a14:	mov	r3, r6
   15a18:	stm	sp, {r0, r8, r9}
   15a1c:	str	r2, [sp, #16]
   15a20:	str	r1, [sp, #12]
   15a24:	mov	r0, r4
   15a28:	mov	r1, r7
   15a2c:	ldr	r2, [sp, #20]
   15a30:	bl	1461c <__assert_fail@plt+0x357c>
   15a34:	ldr	r0, [sp, #24]
   15a38:	str	r0, [sl]
   15a3c:	mov	r0, r4
   15a40:	sub	sp, fp, #28
   15a44:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15a48:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   15a4c:	add	fp, sp, #28
   15a50:	sub	sp, sp, #36	; 0x24
   15a54:	movw	r8, #50312	; 0xc488
   15a58:	cmp	r3, #0
   15a5c:	mov	r4, r2
   15a60:	str	r2, [sp, #24]
   15a64:	mov	r5, r1
   15a68:	mov	r6, r0
   15a6c:	str	r0, [sp, #20]
   15a70:	movt	r8, #2
   15a74:	movne	r8, r3
   15a78:	bl	10fe0 <__errno_location@plt>
   15a7c:	str	r0, [sp, #28]
   15a80:	cmp	r4, #0
   15a84:	add	sl, r8, #8
   15a88:	ldm	r8, {r3, r9}
   15a8c:	ldr	r7, [r0]
   15a90:	ldr	r1, [r8, #40]	; 0x28
   15a94:	ldr	r2, [r8, #44]	; 0x2c
   15a98:	mov	r0, #0
   15a9c:	orreq	r9, r9, #1
   15aa0:	str	r7, [sp, #32]
   15aa4:	mov	r7, r5
   15aa8:	stm	sp, {r3, r9, sl}
   15aac:	str	r1, [sp, #12]
   15ab0:	str	r2, [sp, #16]
   15ab4:	mov	r1, #0
   15ab8:	mov	r2, r6
   15abc:	mov	r3, r5
   15ac0:	bl	1461c <__assert_fail@plt+0x357c>
   15ac4:	add	r4, r0, #1
   15ac8:	mov	r5, r0
   15acc:	mov	r0, r4
   15ad0:	bl	16ac8 <__assert_fail@plt+0x5a28>
   15ad4:	mov	r6, r0
   15ad8:	ldr	r0, [r8]
   15adc:	ldr	r2, [r8, #44]	; 0x2c
   15ae0:	ldr	r1, [r8, #40]	; 0x28
   15ae4:	mov	r3, r7
   15ae8:	stm	sp, {r0, r9, sl}
   15aec:	str	r2, [sp, #16]
   15af0:	str	r1, [sp, #12]
   15af4:	mov	r0, r6
   15af8:	mov	r1, r4
   15afc:	ldr	r2, [sp, #20]
   15b00:	bl	1461c <__assert_fail@plt+0x357c>
   15b04:	ldr	r0, [sp, #24]
   15b08:	ldr	r1, [sp, #32]
   15b0c:	ldr	r2, [sp, #28]
   15b10:	cmp	r0, #0
   15b14:	str	r1, [r2]
   15b18:	strne	r5, [r0]
   15b1c:	mov	r0, r6
   15b20:	sub	sp, fp, #28
   15b24:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15b28:	push	{r4, r5, r6, r7, fp, lr}
   15b2c:	add	fp, sp, #16
   15b30:	movw	r4, #41256	; 0xa128
   15b34:	movt	r4, #2
   15b38:	ldrd	r6, [r4]
   15b3c:	cmp	r7, #2
   15b40:	blt	15b6c <__assert_fail@plt+0x4acc>
   15b44:	add	r5, r6, #12
   15b48:	mov	r7, #0
   15b4c:	ldr	r0, [r5, r7, lsl #3]
   15b50:	bl	143b8 <__assert_fail@plt+0x3318>
   15b54:	ldr	r1, [r4, #4]
   15b58:	add	r2, r7, #2
   15b5c:	add	r0, r7, #1
   15b60:	mov	r7, r0
   15b64:	cmp	r2, r1
   15b68:	blt	15b4c <__assert_fail@plt+0x4aac>
   15b6c:	ldr	r0, [r6, #4]
   15b70:	movw	r5, #50360	; 0xc4b8
   15b74:	movt	r5, #2
   15b78:	cmp	r0, r5
   15b7c:	beq	15b90 <__assert_fail@plt+0x4af0>
   15b80:	bl	143b8 <__assert_fail@plt+0x3318>
   15b84:	mov	r0, #256	; 0x100
   15b88:	str	r0, [r4, #8]
   15b8c:	str	r5, [r4, #12]
   15b90:	add	r5, r4, #8
   15b94:	cmp	r6, r5
   15b98:	beq	15ba8 <__assert_fail@plt+0x4b08>
   15b9c:	mov	r0, r6
   15ba0:	bl	143b8 <__assert_fail@plt+0x3318>
   15ba4:	str	r5, [r4]
   15ba8:	mov	r0, #1
   15bac:	str	r0, [r4, #4]
   15bb0:	pop	{r4, r5, r6, r7, fp, pc}
   15bb4:	movw	r3, #50312	; 0xc488
   15bb8:	mvn	r2, #0
   15bbc:	movt	r3, #2
   15bc0:	b	15bc4 <__assert_fail@plt+0x4b24>
   15bc4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   15bc8:	add	fp, sp, #28
   15bcc:	sub	sp, sp, #44	; 0x2c
   15bd0:	mov	r7, r3
   15bd4:	str	r2, [sp, #36]	; 0x24
   15bd8:	str	r1, [sp, #32]
   15bdc:	mov	r5, r0
   15be0:	bl	10fe0 <__errno_location@plt>
   15be4:	cmp	r5, #0
   15be8:	blt	15d4c <__assert_fail@plt+0x4cac>
   15bec:	cmn	r5, #-2147483647	; 0x80000001
   15bf0:	beq	15d4c <__assert_fail@plt+0x4cac>
   15bf4:	movw	r8, #41256	; 0xa128
   15bf8:	mov	r4, r0
   15bfc:	movt	r8, #2
   15c00:	ldr	r6, [r8]
   15c04:	ldr	r1, [r8, #4]
   15c08:	ldr	r0, [r0]
   15c0c:	str	r4, [sp, #28]
   15c10:	cmp	r1, r5
   15c14:	str	r0, [sp, #24]
   15c18:	ble	15c24 <__assert_fail@plt+0x4b84>
   15c1c:	mov	sl, r6
   15c20:	b	15c88 <__assert_fail@plt+0x4be8>
   15c24:	mov	r0, #8
   15c28:	add	r9, r8, #8
   15c2c:	add	r2, r5, #1
   15c30:	str	r1, [fp, #-32]	; 0xffffffe0
   15c34:	mvn	r3, #-2147483648	; 0x80000000
   15c38:	str	r0, [sp]
   15c3c:	subs	r0, r6, r9
   15c40:	sub	r2, r2, r1
   15c44:	sub	r1, fp, #32
   15c48:	movne	r0, r6
   15c4c:	bl	16cc8 <__assert_fail@plt+0x5c28>
   15c50:	str	r0, [r8]
   15c54:	cmp	r6, r9
   15c58:	mov	sl, r0
   15c5c:	ldrdeq	r0, [r8, #8]
   15c60:	stmeq	sl, {r0, r1}
   15c64:	ldr	r1, [r8, #4]
   15c68:	ldr	r2, [fp, #-32]	; 0xffffffe0
   15c6c:	add	r0, sl, r1, lsl #3
   15c70:	sub	r1, r2, r1
   15c74:	lsl	r2, r1, #3
   15c78:	mov	r1, #0
   15c7c:	bl	11004 <memset@plt>
   15c80:	ldr	r0, [fp, #-32]	; 0xffffffe0
   15c84:	str	r0, [r8, #4]
   15c88:	mov	r9, sl
   15c8c:	ldr	r6, [r9, r5, lsl #3]!
   15c90:	ldr	r4, [r9, #4]!
   15c94:	ldm	r7, {r0, r1}
   15c98:	ldr	r2, [r7, #40]	; 0x28
   15c9c:	ldr	r3, [r7, #44]	; 0x2c
   15ca0:	orr	r8, r1, #1
   15ca4:	add	r1, r7, #8
   15ca8:	stm	sp, {r0, r8}
   15cac:	add	r0, sp, #8
   15cb0:	str	r1, [sp, #20]
   15cb4:	stm	r0, {r1, r2, r3}
   15cb8:	mov	r0, r4
   15cbc:	mov	r1, r6
   15cc0:	ldr	r2, [sp, #32]
   15cc4:	ldr	r3, [sp, #36]	; 0x24
   15cc8:	bl	1461c <__assert_fail@plt+0x357c>
   15ccc:	cmp	r6, r0
   15cd0:	bhi	15d34 <__assert_fail@plt+0x4c94>
   15cd4:	add	r6, r0, #1
   15cd8:	movw	r0, #50360	; 0xc4b8
   15cdc:	movt	r0, #2
   15ce0:	str	r6, [sl, r5, lsl #3]
   15ce4:	cmp	r4, r0
   15ce8:	beq	15cf4 <__assert_fail@plt+0x4c54>
   15cec:	mov	r0, r4
   15cf0:	bl	143b8 <__assert_fail@plt+0x3318>
   15cf4:	mov	r0, r6
   15cf8:	bl	16ac8 <__assert_fail@plt+0x5a28>
   15cfc:	str	r0, [r9]
   15d00:	mov	r4, r0
   15d04:	add	r3, sp, #8
   15d08:	ldr	r0, [r7]
   15d0c:	ldr	r1, [r7, #40]	; 0x28
   15d10:	ldr	r2, [r7, #44]	; 0x2c
   15d14:	stm	sp, {r0, r8}
   15d18:	ldr	r0, [sp, #20]
   15d1c:	stm	r3, {r0, r1, r2}
   15d20:	mov	r0, r4
   15d24:	mov	r1, r6
   15d28:	ldr	r2, [sp, #32]
   15d2c:	ldr	r3, [sp, #36]	; 0x24
   15d30:	bl	1461c <__assert_fail@plt+0x357c>
   15d34:	ldr	r1, [sp, #24]
   15d38:	ldr	r0, [sp, #28]
   15d3c:	str	r1, [r0]
   15d40:	mov	r0, r4
   15d44:	sub	sp, fp, #28
   15d48:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15d4c:	bl	11088 <abort@plt>
   15d50:	movw	r3, #50312	; 0xc488
   15d54:	movt	r3, #2
   15d58:	b	15bc4 <__assert_fail@plt+0x4b24>
   15d5c:	movw	r3, #50312	; 0xc488
   15d60:	mov	r1, r0
   15d64:	mov	r0, #0
   15d68:	mvn	r2, #0
   15d6c:	movt	r3, #2
   15d70:	b	15bc4 <__assert_fail@plt+0x4b24>
   15d74:	movw	r3, #50312	; 0xc488
   15d78:	mov	r2, r1
   15d7c:	mov	r1, r0
   15d80:	mov	r0, #0
   15d84:	movt	r3, #2
   15d88:	b	15bc4 <__assert_fail@plt+0x4b24>
   15d8c:	push	{fp, lr}
   15d90:	mov	fp, sp
   15d94:	sub	sp, sp, #48	; 0x30
   15d98:	vmov.i32	q8, #0	; 0x00000000
   15d9c:	mov	ip, #32
   15da0:	mov	r3, sp
   15da4:	mov	lr, r2
   15da8:	cmp	r1, #10
   15dac:	add	r2, r3, #16
   15db0:	vst1.64	{d16-d17}, [r3], ip
   15db4:	vst1.64	{d16-d17}, [r3]
   15db8:	vst1.64	{d16-d17}, [r2]
   15dbc:	beq	15ddc <__assert_fail@plt+0x4d3c>
   15dc0:	str	r1, [sp]
   15dc4:	mov	r3, sp
   15dc8:	mov	r1, lr
   15dcc:	mvn	r2, #0
   15dd0:	bl	15bc4 <__assert_fail@plt+0x4b24>
   15dd4:	mov	sp, fp
   15dd8:	pop	{fp, pc}
   15ddc:	bl	11088 <abort@plt>
   15de0:	push	{r4, sl, fp, lr}
   15de4:	add	fp, sp, #8
   15de8:	sub	sp, sp, #48	; 0x30
   15dec:	mov	ip, r3
   15df0:	mov	r3, sp
   15df4:	vmov.i32	q8, #0	; 0x00000000
   15df8:	mov	lr, #32
   15dfc:	cmp	r1, #10
   15e00:	add	r4, r3, #16
   15e04:	vst1.64	{d16-d17}, [r3], lr
   15e08:	vst1.64	{d16-d17}, [r3]
   15e0c:	vst1.64	{d16-d17}, [r4]
   15e10:	beq	15e30 <__assert_fail@plt+0x4d90>
   15e14:	str	r1, [sp]
   15e18:	mov	r1, r2
   15e1c:	mov	r3, sp
   15e20:	mov	r2, ip
   15e24:	bl	15bc4 <__assert_fail@plt+0x4b24>
   15e28:	sub	sp, fp, #8
   15e2c:	pop	{r4, sl, fp, pc}
   15e30:	bl	11088 <abort@plt>
   15e34:	push	{fp, lr}
   15e38:	mov	fp, sp
   15e3c:	sub	sp, sp, #48	; 0x30
   15e40:	mov	r3, sp
   15e44:	vmov.i32	q8, #0	; 0x00000000
   15e48:	mov	ip, #32
   15e4c:	cmp	r0, #10
   15e50:	add	r2, r3, #16
   15e54:	vst1.64	{d16-d17}, [r3], ip
   15e58:	vst1.64	{d16-d17}, [r3]
   15e5c:	vst1.64	{d16-d17}, [r2]
   15e60:	beq	15e80 <__assert_fail@plt+0x4de0>
   15e64:	str	r0, [sp]
   15e68:	mov	r3, sp
   15e6c:	mov	r0, #0
   15e70:	mvn	r2, #0
   15e74:	bl	15bc4 <__assert_fail@plt+0x4b24>
   15e78:	mov	sp, fp
   15e7c:	pop	{fp, pc}
   15e80:	bl	11088 <abort@plt>
   15e84:	push	{fp, lr}
   15e88:	mov	fp, sp
   15e8c:	sub	sp, sp, #48	; 0x30
   15e90:	mov	r3, sp
   15e94:	vmov.i32	q8, #0	; 0x00000000
   15e98:	mov	ip, #32
   15e9c:	cmp	r0, #10
   15ea0:	add	lr, r3, #16
   15ea4:	vst1.64	{d16-d17}, [r3], ip
   15ea8:	vst1.64	{d16-d17}, [r3]
   15eac:	vst1.64	{d16-d17}, [lr]
   15eb0:	beq	15ecc <__assert_fail@plt+0x4e2c>
   15eb4:	str	r0, [sp]
   15eb8:	mov	r3, sp
   15ebc:	mov	r0, #0
   15ec0:	bl	15bc4 <__assert_fail@plt+0x4b24>
   15ec4:	mov	sp, fp
   15ec8:	pop	{fp, pc}
   15ecc:	bl	11088 <abort@plt>
   15ed0:	push	{r4, sl, fp, lr}
   15ed4:	add	fp, sp, #8
   15ed8:	sub	sp, sp, #48	; 0x30
   15edc:	mov	lr, r0
   15ee0:	movw	r0, #50312	; 0xc488
   15ee4:	mov	r3, #32
   15ee8:	mov	ip, r1
   15eec:	mov	r4, #1
   15ef0:	movt	r0, #2
   15ef4:	add	r1, r0, #16
   15ef8:	vld1.64	{d16-d17}, [r0], r3
   15efc:	mov	r3, sp
   15f00:	vld1.64	{d18-d19}, [r1]
   15f04:	add	r1, r3, #16
   15f08:	vld1.64	{d20-d21}, [r0]
   15f0c:	add	r0, r3, #32
   15f10:	vst1.64	{d18-d19}, [r1]
   15f14:	mov	r1, r3
   15f18:	vst1.64	{d20-d21}, [r0]
   15f1c:	mov	r0, #28
   15f20:	and	r0, r0, r2, lsr #3
   15f24:	and	r2, r2, #31
   15f28:	vst1.64	{d16-d17}, [r1], r0
   15f2c:	ldr	r0, [r1, #8]
   15f30:	bic	r4, r4, r0, lsr r2
   15f34:	eor	r0, r0, r4, lsl r2
   15f38:	mov	r2, ip
   15f3c:	str	r0, [r1, #8]
   15f40:	mov	r0, #0
   15f44:	mov	r1, lr
   15f48:	bl	15bc4 <__assert_fail@plt+0x4b24>
   15f4c:	sub	sp, fp, #8
   15f50:	pop	{r4, sl, fp, pc}
   15f54:	push	{fp, lr}
   15f58:	mov	fp, sp
   15f5c:	sub	sp, sp, #48	; 0x30
   15f60:	mov	ip, r0
   15f64:	movw	r0, #50312	; 0xc488
   15f68:	mov	r3, #32
   15f6c:	movt	r0, #2
   15f70:	add	r2, r0, #16
   15f74:	vld1.64	{d16-d17}, [r0], r3
   15f78:	mov	r3, sp
   15f7c:	vld1.64	{d18-d19}, [r2]
   15f80:	add	r2, r3, #16
   15f84:	vld1.64	{d20-d21}, [r0]
   15f88:	add	r0, r3, #32
   15f8c:	vst1.64	{d18-d19}, [r2]
   15f90:	mov	r2, r3
   15f94:	vst1.64	{d20-d21}, [r0]
   15f98:	mov	r0, #28
   15f9c:	and	r0, r0, r1, lsr #3
   15fa0:	and	r1, r1, #31
   15fa4:	vst1.64	{d16-d17}, [r2], r0
   15fa8:	mov	r0, #1
   15fac:	ldr	lr, [r2, #8]
   15fb0:	bic	r0, r0, lr, lsr r1
   15fb4:	eor	r0, lr, r0, lsl r1
   15fb8:	mov	r1, ip
   15fbc:	str	r0, [r2, #8]
   15fc0:	mov	r0, #0
   15fc4:	mvn	r2, #0
   15fc8:	bl	15bc4 <__assert_fail@plt+0x4b24>
   15fcc:	mov	sp, fp
   15fd0:	pop	{fp, pc}
   15fd4:	push	{fp, lr}
   15fd8:	mov	fp, sp
   15fdc:	sub	sp, sp, #48	; 0x30
   15fe0:	movw	r2, #50312	; 0xc488
   15fe4:	mov	r3, #32
   15fe8:	mov	r1, r0
   15fec:	movt	r2, #2
   15ff0:	add	r0, r2, #16
   15ff4:	vld1.64	{d16-d17}, [r2], r3
   15ff8:	mov	r3, sp
   15ffc:	vld1.64	{d18-d19}, [r0]
   16000:	add	r0, r3, #16
   16004:	vld1.64	{d20-d21}, [r2]
   16008:	mov	r2, r3
   1600c:	vst1.64	{d18-d19}, [r0]
   16010:	add	r0, r3, #32
   16014:	vst1.64	{d20-d21}, [r0]
   16018:	mov	r0, #12
   1601c:	vst1.64	{d16-d17}, [r2], r0
   16020:	ldr	r0, [r2]
   16024:	orr	r0, r0, #67108864	; 0x4000000
   16028:	str	r0, [r2]
   1602c:	mov	r0, #0
   16030:	mvn	r2, #0
   16034:	bl	15bc4 <__assert_fail@plt+0x4b24>
   16038:	mov	sp, fp
   1603c:	pop	{fp, pc}
   16040:	push	{fp, lr}
   16044:	mov	fp, sp
   16048:	sub	sp, sp, #48	; 0x30
   1604c:	mov	ip, r1
   16050:	mov	r1, r0
   16054:	movw	r0, #50312	; 0xc488
   16058:	mov	r3, #32
   1605c:	movt	r0, #2
   16060:	add	r2, r0, #16
   16064:	vld1.64	{d16-d17}, [r0], r3
   16068:	mov	r3, sp
   1606c:	vld1.64	{d18-d19}, [r2]
   16070:	add	r2, r3, #16
   16074:	vld1.64	{d20-d21}, [r0]
   16078:	add	r0, r3, #32
   1607c:	vst1.64	{d18-d19}, [r2]
   16080:	mov	r2, r3
   16084:	vst1.64	{d20-d21}, [r0]
   16088:	mov	r0, #12
   1608c:	vst1.64	{d16-d17}, [r2], r0
   16090:	ldr	r0, [r2]
   16094:	orr	r0, r0, #67108864	; 0x4000000
   16098:	str	r0, [r2]
   1609c:	mov	r0, #0
   160a0:	mov	r2, ip
   160a4:	bl	15bc4 <__assert_fail@plt+0x4b24>
   160a8:	mov	sp, fp
   160ac:	pop	{fp, pc}
   160b0:	push	{r4, sl, fp, lr}
   160b4:	add	fp, sp, #8
   160b8:	sub	sp, sp, #96	; 0x60
   160bc:	mov	ip, r2
   160c0:	mov	r2, sp
   160c4:	vmov.i32	q8, #0	; 0x00000000
   160c8:	mov	r4, #28
   160cc:	cmp	r1, #10
   160d0:	mov	r3, r2
   160d4:	add	lr, r2, #16
   160d8:	vst1.64	{d16-d17}, [r3], r4
   160dc:	vst1.64	{d16-d17}, [lr]
   160e0:	vst1.32	{d16-d17}, [r3]
   160e4:	beq	16134 <__assert_fail@plt+0x5094>
   160e8:	vld1.64	{d16-d17}, [r2], r4
   160ec:	vld1.64	{d18-d19}, [lr]
   160f0:	add	r3, sp, #48	; 0x30
   160f4:	add	r4, r3, #4
   160f8:	vld1.32	{d20-d21}, [r2]
   160fc:	add	r2, r3, #20
   16100:	vst1.32	{d16-d17}, [r4]
   16104:	vst1.32	{d18-d19}, [r2]
   16108:	add	r2, r3, #32
   1610c:	vst1.32	{d20-d21}, [r2]
   16110:	str	r1, [sp, #48]	; 0x30
   16114:	mvn	r2, #0
   16118:	ldr	r1, [sp, #60]	; 0x3c
   1611c:	orr	r1, r1, #67108864	; 0x4000000
   16120:	str	r1, [sp, #60]	; 0x3c
   16124:	mov	r1, ip
   16128:	bl	15bc4 <__assert_fail@plt+0x4b24>
   1612c:	sub	sp, fp, #8
   16130:	pop	{r4, sl, fp, pc}
   16134:	bl	11088 <abort@plt>
   16138:	push	{r4, r5, fp, lr}
   1613c:	add	fp, sp, #8
   16140:	sub	sp, sp, #48	; 0x30
   16144:	mov	ip, r3
   16148:	movw	r3, #50312	; 0xc488
   1614c:	mov	lr, #32
   16150:	cmp	r1, #0
   16154:	mov	r5, sp
   16158:	movt	r3, #2
   1615c:	cmpne	r2, #0
   16160:	add	r4, r3, #16
   16164:	vld1.64	{d16-d17}, [r3], lr
   16168:	vld1.64	{d18-d19}, [r4]
   1616c:	add	r4, r5, #16
   16170:	vld1.64	{d20-d21}, [r3]
   16174:	vst1.64	{d16-d17}, [r5], lr
   16178:	mov	r3, #10
   1617c:	vst1.64	{d18-d19}, [r4]
   16180:	vst1.64	{d20-d21}, [r5]
   16184:	str	r3, [sp]
   16188:	bne	16190 <__assert_fail@plt+0x50f0>
   1618c:	bl	11088 <abort@plt>
   16190:	str	r2, [sp, #44]	; 0x2c
   16194:	str	r1, [sp, #40]	; 0x28
   16198:	mov	r3, sp
   1619c:	mov	r1, ip
   161a0:	mvn	r2, #0
   161a4:	bl	15bc4 <__assert_fail@plt+0x4b24>
   161a8:	sub	sp, fp, #8
   161ac:	pop	{r4, r5, fp, pc}
   161b0:	push	{r4, r5, fp, lr}
   161b4:	add	fp, sp, #8
   161b8:	sub	sp, sp, #48	; 0x30
   161bc:	mov	lr, r3
   161c0:	movw	r3, #50312	; 0xc488
   161c4:	mov	ip, #32
   161c8:	cmp	r1, #0
   161cc:	mov	r5, sp
   161d0:	movt	r3, #2
   161d4:	cmpne	r2, #0
   161d8:	add	r4, r3, #16
   161dc:	vld1.64	{d16-d17}, [r3], ip
   161e0:	vld1.64	{d18-d19}, [r4]
   161e4:	add	r4, r5, #16
   161e8:	vld1.64	{d20-d21}, [r3]
   161ec:	vst1.64	{d16-d17}, [r5], ip
   161f0:	mov	r3, #10
   161f4:	vst1.64	{d18-d19}, [r4]
   161f8:	vst1.64	{d20-d21}, [r5]
   161fc:	str	r3, [sp]
   16200:	bne	16208 <__assert_fail@plt+0x5168>
   16204:	bl	11088 <abort@plt>
   16208:	ldr	ip, [fp, #8]
   1620c:	str	r2, [sp, #44]	; 0x2c
   16210:	str	r1, [sp, #40]	; 0x28
   16214:	mov	r3, sp
   16218:	mov	r1, lr
   1621c:	mov	r2, ip
   16220:	bl	15bc4 <__assert_fail@plt+0x4b24>
   16224:	sub	sp, fp, #8
   16228:	pop	{r4, r5, fp, pc}
   1622c:	push	{r4, sl, fp, lr}
   16230:	add	fp, sp, #8
   16234:	sub	sp, sp, #48	; 0x30
   16238:	mov	ip, r2
   1623c:	movw	r2, #50312	; 0xc488
   16240:	mov	lr, #32
   16244:	cmp	r0, #0
   16248:	mov	r4, sp
   1624c:	movt	r2, #2
   16250:	cmpne	r1, #0
   16254:	add	r3, r2, #16
   16258:	vld1.64	{d16-d17}, [r2], lr
   1625c:	vld1.64	{d18-d19}, [r3]
   16260:	add	r3, r4, #16
   16264:	vld1.64	{d20-d21}, [r2]
   16268:	vst1.64	{d16-d17}, [r4], lr
   1626c:	mov	r2, #10
   16270:	vst1.64	{d18-d19}, [r3]
   16274:	vst1.64	{d20-d21}, [r4]
   16278:	str	r2, [sp]
   1627c:	bne	16284 <__assert_fail@plt+0x51e4>
   16280:	bl	11088 <abort@plt>
   16284:	str	r1, [sp, #44]	; 0x2c
   16288:	str	r0, [sp, #40]	; 0x28
   1628c:	mov	r3, sp
   16290:	mov	r0, #0
   16294:	mov	r1, ip
   16298:	mvn	r2, #0
   1629c:	bl	15bc4 <__assert_fail@plt+0x4b24>
   162a0:	sub	sp, fp, #8
   162a4:	pop	{r4, sl, fp, pc}
   162a8:	push	{r4, r5, fp, lr}
   162ac:	add	fp, sp, #8
   162b0:	sub	sp, sp, #48	; 0x30
   162b4:	mov	lr, r2
   162b8:	movw	r2, #50312	; 0xc488
   162bc:	mov	ip, r3
   162c0:	mov	r3, #32
   162c4:	cmp	r0, #0
   162c8:	mov	r5, sp
   162cc:	movt	r2, #2
   162d0:	cmpne	r1, #0
   162d4:	add	r4, r2, #16
   162d8:	vld1.64	{d16-d17}, [r2], r3
   162dc:	vld1.64	{d18-d19}, [r4]
   162e0:	add	r4, r5, #16
   162e4:	vld1.64	{d20-d21}, [r2]
   162e8:	vst1.64	{d16-d17}, [r5], r3
   162ec:	mov	r2, #10
   162f0:	vst1.64	{d18-d19}, [r4]
   162f4:	vst1.64	{d20-d21}, [r5]
   162f8:	str	r2, [sp]
   162fc:	bne	16304 <__assert_fail@plt+0x5264>
   16300:	bl	11088 <abort@plt>
   16304:	str	r1, [sp, #44]	; 0x2c
   16308:	str	r0, [sp, #40]	; 0x28
   1630c:	mov	r3, sp
   16310:	mov	r0, #0
   16314:	mov	r1, lr
   16318:	mov	r2, ip
   1631c:	bl	15bc4 <__assert_fail@plt+0x4b24>
   16320:	sub	sp, fp, #8
   16324:	pop	{r4, r5, fp, pc}
   16328:	movw	r3, #41208	; 0xa0f8
   1632c:	movt	r3, #2
   16330:	b	15bc4 <__assert_fail@plt+0x4b24>
   16334:	movw	r3, #41208	; 0xa0f8
   16338:	mov	r2, r1
   1633c:	mov	r1, r0
   16340:	mov	r0, #0
   16344:	movt	r3, #2
   16348:	b	15bc4 <__assert_fail@plt+0x4b24>
   1634c:	movw	r3, #41208	; 0xa0f8
   16350:	mvn	r2, #0
   16354:	movt	r3, #2
   16358:	b	15bc4 <__assert_fail@plt+0x4b24>
   1635c:	movw	r3, #41208	; 0xa0f8
   16360:	mov	r1, r0
   16364:	mov	r0, #0
   16368:	mvn	r2, #0
   1636c:	movt	r3, #2
   16370:	b	15bc4 <__assert_fail@plt+0x4b24>
   16374:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   16378:	add	fp, sp, #24
   1637c:	movw	r8, #0
   16380:	mov	r6, r2
   16384:	mov	r4, r1
   16388:	mov	r5, r0
   1638c:	movt	r8, #32752	; 0x7ff0
   16390:	mov	r0, r5
   16394:	mov	r1, r4
   16398:	mov	r2, r6
   1639c:	bl	10e6c <read@plt>
   163a0:	mov	r7, r0
   163a4:	cmn	r0, #1
   163a8:	bgt	163d0 <__assert_fail@plt+0x5330>
   163ac:	bl	10fe0 <__errno_location@plt>
   163b0:	ldr	r0, [r0]
   163b4:	cmp	r0, #4
   163b8:	beq	16390 <__assert_fail@plt+0x52f0>
   163bc:	cmp	r6, r8
   163c0:	bls	163d0 <__assert_fail@plt+0x5330>
   163c4:	cmp	r0, #22
   163c8:	mov	r6, r8
   163cc:	beq	16390 <__assert_fail@plt+0x52f0>
   163d0:	mov	r0, r7
   163d4:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   163d8:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   163dc:	add	fp, sp, #24
   163e0:	sub	sp, sp, #32
   163e4:	ldr	r6, [fp, #12]
   163e8:	ldr	r7, [fp, #8]
   163ec:	mov	r4, r2
   163f0:	mov	r8, r0
   163f4:	cmp	r1, #0
   163f8:	beq	16420 <__assert_fail@plt+0x5380>
   163fc:	movw	r2, #39384	; 0x99d8
   16400:	mov	r5, r1
   16404:	str	r3, [sp, #4]
   16408:	str	r4, [sp]
   1640c:	mov	r0, r8
   16410:	mov	r1, #1
   16414:	movt	r2, #1
   16418:	mov	r3, r5
   1641c:	b	16438 <__assert_fail@plt+0x5398>
   16420:	movw	r2, #39396	; 0x99e4
   16424:	str	r3, [sp]
   16428:	mov	r0, r8
   1642c:	mov	r1, #1
   16430:	mov	r3, r4
   16434:	movt	r2, #1
   16438:	bl	11028 <__fprintf_chk@plt>
   1643c:	movw	r1, #39403	; 0x99eb
   16440:	mov	r0, #0
   16444:	mov	r2, #5
   16448:	movt	r1, #1
   1644c:	bl	10ee4 <dcgettext@plt>
   16450:	movw	r2, #40121	; 0x9cb9
   16454:	mov	r3, r0
   16458:	movw	r0, #2022	; 0x7e6
   1645c:	mov	r1, #1
   16460:	str	r0, [sp]
   16464:	movt	r2, #1
   16468:	mov	r0, r8
   1646c:	bl	11028 <__fprintf_chk@plt>
   16470:	movw	r4, #36814	; 0x8fce
   16474:	mov	r1, r8
   16478:	movt	r4, #1
   1647c:	mov	r0, r4
   16480:	bl	10e3c <fputs_unlocked@plt>
   16484:	movw	r1, #39407	; 0x99ef
   16488:	mov	r0, #0
   1648c:	mov	r2, #5
   16490:	movt	r1, #1
   16494:	bl	10ee4 <dcgettext@plt>
   16498:	movw	r3, #39578	; 0x9a9a
   1649c:	mov	r2, r0
   164a0:	mov	r0, r8
   164a4:	mov	r1, #1
   164a8:	movt	r3, #1
   164ac:	bl	11028 <__fprintf_chk@plt>
   164b0:	mov	r0, r4
   164b4:	mov	r1, r8
   164b8:	bl	10e3c <fputs_unlocked@plt>
   164bc:	cmp	r6, #9
   164c0:	bhi	164fc <__assert_fail@plt+0x545c>
   164c4:	add	r0, pc, #0
   164c8:	ldr	pc, [r0, r6, lsl #2]
   164cc:	strdeq	r6, [r1], -r4
   164d0:	andeq	r6, r1, r8, lsl #10
   164d4:	andeq	r6, r1, r8, lsr r5
   164d8:	andeq	r6, r1, r0, ror #10
   164dc:	andeq	r6, r1, r8, lsl #11
   164e0:			; <UNDEFINED> instruction: 0x000165b0
   164e4:	ldrdeq	r6, [r1], -r8
   164e8:	andeq	r6, r1, r0, lsl r6
   164ec:			; <UNDEFINED> instruction: 0x000166b8
   164f0:	andeq	r6, r1, r0, ror #12
   164f4:	sub	sp, fp, #24
   164f8:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   164fc:	movw	r1, #39931	; 0x9bfb
   16500:	movt	r1, #1
   16504:	b	16668 <__assert_fail@plt+0x55c8>
   16508:	movw	r1, #39612	; 0x9abc
   1650c:	mov	r0, #0
   16510:	mov	r2, #5
   16514:	movt	r1, #1
   16518:	bl	10ee4 <dcgettext@plt>
   1651c:	ldr	r3, [r7]
   16520:	mov	r2, r0
   16524:	mov	r0, r8
   16528:	mov	r1, #1
   1652c:	sub	sp, fp, #24
   16530:	pop	{r4, r5, r6, r7, r8, sl, fp, lr}
   16534:	b	11028 <__fprintf_chk@plt>
   16538:	movw	r1, #39628	; 0x9acc
   1653c:	mov	r0, #0
   16540:	mov	r2, #5
   16544:	movt	r1, #1
   16548:	bl	10ee4 <dcgettext@plt>
   1654c:	mov	r2, r0
   16550:	ldr	r3, [r7]
   16554:	ldr	r0, [r7, #4]
   16558:	str	r0, [sp]
   1655c:	b	1664c <__assert_fail@plt+0x55ac>
   16560:	movw	r1, #39651	; 0x9ae3
   16564:	mov	r0, #0
   16568:	mov	r2, #5
   1656c:	movt	r1, #1
   16570:	bl	10ee4 <dcgettext@plt>
   16574:	ldr	r3, [r7]
   16578:	mov	r2, r0
   1657c:	ldmib	r7, {r0, r1}
   16580:	stm	sp, {r0, r1}
   16584:	b	1664c <__assert_fail@plt+0x55ac>
   16588:	movw	r1, #39679	; 0x9aff
   1658c:	mov	r0, #0
   16590:	mov	r2, #5
   16594:	movt	r1, #1
   16598:	bl	10ee4 <dcgettext@plt>
   1659c:	ldr	r3, [r7]
   165a0:	mov	r2, r0
   165a4:	ldmib	r7, {r0, r1, r7}
   165a8:	stm	sp, {r0, r1, r7}
   165ac:	b	1664c <__assert_fail@plt+0x55ac>
   165b0:	movw	r1, #39711	; 0x9b1f
   165b4:	mov	r0, #0
   165b8:	mov	r2, #5
   165bc:	movt	r1, #1
   165c0:	bl	10ee4 <dcgettext@plt>
   165c4:	ldr	r3, [r7]
   165c8:	mov	r2, r0
   165cc:	ldmib	r7, {r0, r1, r6, r7}
   165d0:	stm	sp, {r0, r1, r6, r7}
   165d4:	b	1664c <__assert_fail@plt+0x55ac>
   165d8:	movw	r1, #39747	; 0x9b43
   165dc:	mov	r0, #0
   165e0:	mov	r2, #5
   165e4:	movt	r1, #1
   165e8:	bl	10ee4 <dcgettext@plt>
   165ec:	ldr	r3, [r7]
   165f0:	mov	r2, r0
   165f4:	ldmib	r7, {r0, r1, r6}
   165f8:	ldr	r5, [r7, #16]
   165fc:	ldr	r7, [r7, #20]
   16600:	stm	sp, {r0, r1, r6}
   16604:	str	r5, [sp, #12]
   16608:	str	r7, [sp, #16]
   1660c:	b	1664c <__assert_fail@plt+0x55ac>
   16610:	movw	r1, #39787	; 0x9b6b
   16614:	mov	r0, #0
   16618:	mov	r2, #5
   1661c:	movt	r1, #1
   16620:	bl	10ee4 <dcgettext@plt>
   16624:	ldr	r3, [r7]
   16628:	mov	r2, r0
   1662c:	ldmib	r7, {r0, r1, r6}
   16630:	ldr	r5, [r7, #16]
   16634:	ldr	r4, [r7, #20]
   16638:	ldr	r7, [r7, #24]
   1663c:	stm	sp, {r0, r1, r6}
   16640:	str	r5, [sp, #12]
   16644:	str	r4, [sp, #16]
   16648:	str	r7, [sp, #20]
   1664c:	mov	r0, r8
   16650:	mov	r1, #1
   16654:	bl	11028 <__fprintf_chk@plt>
   16658:	sub	sp, fp, #24
   1665c:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   16660:	movw	r1, #39879	; 0x9bc7
   16664:	movt	r1, #1
   16668:	mov	r0, #0
   1666c:	mov	r2, #5
   16670:	bl	10ee4 <dcgettext@plt>
   16674:	mov	ip, r0
   16678:	ldr	r3, [r7]
   1667c:	ldr	r0, [r7, #4]
   16680:	ldr	r1, [r7, #8]
   16684:	ldr	r6, [r7, #12]
   16688:	ldr	r5, [r7, #16]
   1668c:	ldr	r4, [r7, #20]
   16690:	ldr	r2, [r7, #24]
   16694:	ldr	lr, [r7, #28]
   16698:	ldr	r7, [r7, #32]
   1669c:	stm	sp, {r0, r1, r6}
   166a0:	str	r5, [sp, #12]
   166a4:	str	r4, [sp, #16]
   166a8:	str	r2, [sp, #20]
   166ac:	str	lr, [sp, #24]
   166b0:	str	r7, [sp, #28]
   166b4:	b	166fc <__assert_fail@plt+0x565c>
   166b8:	movw	r1, #39831	; 0x9b97
   166bc:	mov	r0, #0
   166c0:	mov	r2, #5
   166c4:	movt	r1, #1
   166c8:	bl	10ee4 <dcgettext@plt>
   166cc:	mov	ip, r0
   166d0:	ldr	r3, [r7]
   166d4:	ldmib	r7, {r0, r1, r6}
   166d8:	ldr	r5, [r7, #16]
   166dc:	ldr	r4, [r7, #20]
   166e0:	ldr	r2, [r7, #24]
   166e4:	ldr	r7, [r7, #28]
   166e8:	stm	sp, {r0, r1, r6}
   166ec:	str	r5, [sp, #12]
   166f0:	str	r4, [sp, #16]
   166f4:	str	r2, [sp, #20]
   166f8:	str	r7, [sp, #24]
   166fc:	mov	r0, r8
   16700:	mov	r1, #1
   16704:	mov	r2, ip
   16708:	bl	11028 <__fprintf_chk@plt>
   1670c:	sub	sp, fp, #24
   16710:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   16714:	push	{r4, sl, fp, lr}
   16718:	add	fp, sp, #8
   1671c:	sub	sp, sp, #8
   16720:	ldr	ip, [fp, #8]
   16724:	mov	lr, #0
   16728:	ldr	r4, [ip, lr, lsl #2]
   1672c:	add	lr, lr, #1
   16730:	cmp	r4, #0
   16734:	bne	16728 <__assert_fail@plt+0x5688>
   16738:	sub	r4, lr, #1
   1673c:	str	ip, [sp]
   16740:	str	r4, [sp, #4]
   16744:	bl	163d8 <__assert_fail@plt+0x5338>
   16748:	sub	sp, fp, #8
   1674c:	pop	{r4, sl, fp, pc}
   16750:	push	{fp, lr}
   16754:	mov	fp, sp
   16758:	sub	sp, sp, #48	; 0x30
   1675c:	ldr	ip, [fp, #8]
   16760:	ldr	lr, [ip]
   16764:	cmp	lr, #0
   16768:	str	lr, [sp, #8]
   1676c:	beq	16808 <__assert_fail@plt+0x5768>
   16770:	ldr	lr, [ip, #4]
   16774:	cmp	lr, #0
   16778:	str	lr, [sp, #12]
   1677c:	beq	16810 <__assert_fail@plt+0x5770>
   16780:	ldr	lr, [ip, #8]
   16784:	cmp	lr, #0
   16788:	str	lr, [sp, #16]
   1678c:	beq	16818 <__assert_fail@plt+0x5778>
   16790:	ldr	lr, [ip, #12]
   16794:	cmp	lr, #0
   16798:	str	lr, [sp, #20]
   1679c:	beq	16820 <__assert_fail@plt+0x5780>
   167a0:	ldr	lr, [ip, #16]
   167a4:	cmp	lr, #0
   167a8:	str	lr, [sp, #24]
   167ac:	beq	16828 <__assert_fail@plt+0x5788>
   167b0:	ldr	lr, [ip, #20]
   167b4:	cmp	lr, #0
   167b8:	str	lr, [sp, #28]
   167bc:	beq	16830 <__assert_fail@plt+0x5790>
   167c0:	ldr	lr, [ip, #24]
   167c4:	cmp	lr, #0
   167c8:	str	lr, [sp, #32]
   167cc:	beq	16838 <__assert_fail@plt+0x5798>
   167d0:	ldr	lr, [ip, #28]
   167d4:	cmp	lr, #0
   167d8:	str	lr, [sp, #36]	; 0x24
   167dc:	beq	16840 <__assert_fail@plt+0x57a0>
   167e0:	ldr	lr, [ip, #32]
   167e4:	cmp	lr, #0
   167e8:	str	lr, [sp, #40]	; 0x28
   167ec:	beq	16848 <__assert_fail@plt+0x57a8>
   167f0:	ldr	lr, [ip, #36]	; 0x24
   167f4:	mov	ip, #10
   167f8:	cmp	lr, #0
   167fc:	str	lr, [sp, #44]	; 0x2c
   16800:	movweq	ip, #9
   16804:	b	1684c <__assert_fail@plt+0x57ac>
   16808:	mov	ip, #0
   1680c:	b	1684c <__assert_fail@plt+0x57ac>
   16810:	mov	ip, #1
   16814:	b	1684c <__assert_fail@plt+0x57ac>
   16818:	mov	ip, #2
   1681c:	b	1684c <__assert_fail@plt+0x57ac>
   16820:	mov	ip, #3
   16824:	b	1684c <__assert_fail@plt+0x57ac>
   16828:	mov	ip, #4
   1682c:	b	1684c <__assert_fail@plt+0x57ac>
   16830:	mov	ip, #5
   16834:	b	1684c <__assert_fail@plt+0x57ac>
   16838:	mov	ip, #6
   1683c:	b	1684c <__assert_fail@plt+0x57ac>
   16840:	mov	ip, #7
   16844:	b	1684c <__assert_fail@plt+0x57ac>
   16848:	mov	ip, #8
   1684c:	add	lr, sp, #8
   16850:	str	ip, [sp, #4]
   16854:	str	lr, [sp]
   16858:	bl	163d8 <__assert_fail@plt+0x5338>
   1685c:	mov	sp, fp
   16860:	pop	{fp, pc}
   16864:	push	{fp, lr}
   16868:	mov	fp, sp
   1686c:	sub	sp, sp, #56	; 0x38
   16870:	add	ip, fp, #8
   16874:	str	ip, [sp, #12]
   16878:	ldr	lr, [fp, #8]
   1687c:	cmp	lr, #0
   16880:	str	lr, [sp, #16]
   16884:	beq	16920 <__assert_fail@plt+0x5880>
   16888:	ldr	lr, [ip, #4]
   1688c:	cmp	lr, #0
   16890:	str	lr, [sp, #20]
   16894:	beq	16928 <__assert_fail@plt+0x5888>
   16898:	ldr	lr, [ip, #8]
   1689c:	cmp	lr, #0
   168a0:	str	lr, [sp, #24]
   168a4:	beq	16930 <__assert_fail@plt+0x5890>
   168a8:	ldr	lr, [ip, #12]
   168ac:	cmp	lr, #0
   168b0:	str	lr, [sp, #28]
   168b4:	beq	16938 <__assert_fail@plt+0x5898>
   168b8:	ldr	lr, [ip, #16]
   168bc:	cmp	lr, #0
   168c0:	str	lr, [sp, #32]
   168c4:	beq	16940 <__assert_fail@plt+0x58a0>
   168c8:	ldr	lr, [ip, #20]
   168cc:	cmp	lr, #0
   168d0:	str	lr, [sp, #36]	; 0x24
   168d4:	beq	16948 <__assert_fail@plt+0x58a8>
   168d8:	ldr	lr, [ip, #24]
   168dc:	cmp	lr, #0
   168e0:	str	lr, [sp, #40]	; 0x28
   168e4:	beq	16950 <__assert_fail@plt+0x58b0>
   168e8:	ldr	lr, [ip, #28]
   168ec:	cmp	lr, #0
   168f0:	str	lr, [sp, #44]	; 0x2c
   168f4:	beq	16958 <__assert_fail@plt+0x58b8>
   168f8:	ldr	lr, [ip, #32]
   168fc:	cmp	lr, #0
   16900:	str	lr, [sp, #48]	; 0x30
   16904:	beq	16960 <__assert_fail@plt+0x58c0>
   16908:	ldr	lr, [ip, #36]	; 0x24
   1690c:	mov	ip, #10
   16910:	cmp	lr, #0
   16914:	str	lr, [sp, #52]	; 0x34
   16918:	movweq	ip, #9
   1691c:	b	16964 <__assert_fail@plt+0x58c4>
   16920:	mov	ip, #0
   16924:	b	16964 <__assert_fail@plt+0x58c4>
   16928:	mov	ip, #1
   1692c:	b	16964 <__assert_fail@plt+0x58c4>
   16930:	mov	ip, #2
   16934:	b	16964 <__assert_fail@plt+0x58c4>
   16938:	mov	ip, #3
   1693c:	b	16964 <__assert_fail@plt+0x58c4>
   16940:	mov	ip, #4
   16944:	b	16964 <__assert_fail@plt+0x58c4>
   16948:	mov	ip, #5
   1694c:	b	16964 <__assert_fail@plt+0x58c4>
   16950:	mov	ip, #6
   16954:	b	16964 <__assert_fail@plt+0x58c4>
   16958:	mov	ip, #7
   1695c:	b	16964 <__assert_fail@plt+0x58c4>
   16960:	mov	ip, #8
   16964:	add	lr, sp, #16
   16968:	str	ip, [sp, #4]
   1696c:	str	lr, [sp]
   16970:	bl	163d8 <__assert_fail@plt+0x5338>
   16974:	mov	sp, fp
   16978:	pop	{fp, pc}
   1697c:	push	{fp, lr}
   16980:	mov	fp, sp
   16984:	movw	r0, #41308	; 0xa15c
   16988:	movt	r0, #2
   1698c:	ldr	r1, [r0]
   16990:	movw	r0, #36814	; 0x8fce
   16994:	movt	r0, #1
   16998:	bl	10e3c <fputs_unlocked@plt>
   1699c:	movw	r1, #39991	; 0x9c37
   169a0:	mov	r0, #0
   169a4:	mov	r2, #5
   169a8:	movt	r1, #1
   169ac:	bl	10ee4 <dcgettext@plt>
   169b0:	movw	r2, #40011	; 0x9c4b
   169b4:	mov	r1, r0
   169b8:	mov	r0, #1
   169bc:	movt	r2, #1
   169c0:	bl	11010 <__printf_chk@plt>
   169c4:	movw	r1, #40033	; 0x9c61
   169c8:	mov	r0, #0
   169cc:	mov	r2, #5
   169d0:	movt	r1, #1
   169d4:	bl	10ee4 <dcgettext@plt>
   169d8:	movw	r2, #36127	; 0x8d1f
   169dc:	movw	r3, #36623	; 0x8f0f
   169e0:	mov	r1, r0
   169e4:	mov	r0, #1
   169e8:	movt	r2, #1
   169ec:	movt	r3, #1
   169f0:	bl	11010 <__printf_chk@plt>
   169f4:	movw	r1, #40053	; 0x9c75
   169f8:	mov	r0, #0
   169fc:	mov	r2, #5
   16a00:	movt	r1, #1
   16a04:	bl	10ee4 <dcgettext@plt>
   16a08:	movw	r2, #40092	; 0x9c9c
   16a0c:	mov	r1, r0
   16a10:	mov	r0, #1
   16a14:	movt	r2, #1
   16a18:	pop	{fp, lr}
   16a1c:	b	11010 <__printf_chk@plt>
   16a20:	push	{r4, r5, r6, sl, fp, lr}
   16a24:	add	fp, sp, #16
   16a28:	mov	r4, r2
   16a2c:	mov	r5, r1
   16a30:	mov	r6, r0
   16a34:	bl	1808c <__assert_fail@plt+0x6fec>
   16a38:	cmp	r0, #0
   16a3c:	popne	{r4, r5, r6, sl, fp, pc}
   16a40:	cmp	r6, #0
   16a44:	beq	16a58 <__assert_fail@plt+0x59b8>
   16a48:	cmp	r5, #0
   16a4c:	cmpne	r4, #0
   16a50:	bne	16a58 <__assert_fail@plt+0x59b8>
   16a54:	pop	{r4, r5, r6, sl, fp, pc}
   16a58:	bl	16ff8 <__assert_fail@plt+0x5f58>
   16a5c:	push	{r4, r5, r6, sl, fp, lr}
   16a60:	add	fp, sp, #16
   16a64:	mov	r4, r2
   16a68:	mov	r5, r1
   16a6c:	mov	r6, r0
   16a70:	bl	1808c <__assert_fail@plt+0x6fec>
   16a74:	cmp	r0, #0
   16a78:	popne	{r4, r5, r6, sl, fp, pc}
   16a7c:	cmp	r6, #0
   16a80:	beq	16a94 <__assert_fail@plt+0x59f4>
   16a84:	cmp	r5, #0
   16a88:	cmpne	r4, #0
   16a8c:	bne	16a94 <__assert_fail@plt+0x59f4>
   16a90:	pop	{r4, r5, r6, sl, fp, pc}
   16a94:	bl	16ff8 <__assert_fail@plt+0x5f58>
   16a98:	push	{fp, lr}
   16a9c:	mov	fp, sp
   16aa0:	bl	17d44 <__assert_fail@plt+0x6ca4>
   16aa4:	cmp	r0, #0
   16aa8:	popne	{fp, pc}
   16aac:	bl	16ff8 <__assert_fail@plt+0x5f58>
   16ab0:	push	{fp, lr}
   16ab4:	mov	fp, sp
   16ab8:	bl	17d44 <__assert_fail@plt+0x6ca4>
   16abc:	cmp	r0, #0
   16ac0:	popne	{fp, pc}
   16ac4:	bl	16ff8 <__assert_fail@plt+0x5f58>
   16ac8:	push	{fp, lr}
   16acc:	mov	fp, sp
   16ad0:	bl	17d44 <__assert_fail@plt+0x6ca4>
   16ad4:	cmp	r0, #0
   16ad8:	popne	{fp, pc}
   16adc:	bl	16ff8 <__assert_fail@plt+0x5f58>
   16ae0:	push	{r4, r5, fp, lr}
   16ae4:	add	fp, sp, #8
   16ae8:	mov	r4, r1
   16aec:	mov	r5, r0
   16af0:	bl	17d74 <__assert_fail@plt+0x6cd4>
   16af4:	cmp	r0, #0
   16af8:	popne	{r4, r5, fp, pc}
   16afc:	cmp	r5, #0
   16b00:	beq	16b10 <__assert_fail@plt+0x5a70>
   16b04:	cmp	r4, #0
   16b08:	bne	16b10 <__assert_fail@plt+0x5a70>
   16b0c:	pop	{r4, r5, fp, pc}
   16b10:	bl	16ff8 <__assert_fail@plt+0x5f58>
   16b14:	push	{fp, lr}
   16b18:	mov	fp, sp
   16b1c:	cmp	r1, #0
   16b20:	orreq	r1, r1, #1
   16b24:	bl	17d74 <__assert_fail@plt+0x6cd4>
   16b28:	cmp	r0, #0
   16b2c:	popne	{fp, pc}
   16b30:	bl	16ff8 <__assert_fail@plt+0x5f58>
   16b34:	push	{fp, lr}
   16b38:	mov	fp, sp
   16b3c:	clz	r3, r2
   16b40:	lsr	ip, r3, #5
   16b44:	clz	r3, r1
   16b48:	lsr	r3, r3, #5
   16b4c:	orrs	r3, r3, ip
   16b50:	movwne	r1, #1
   16b54:	movwne	r2, #1
   16b58:	bl	1808c <__assert_fail@plt+0x6fec>
   16b5c:	cmp	r0, #0
   16b60:	popne	{fp, pc}
   16b64:	bl	16ff8 <__assert_fail@plt+0x5f58>
   16b68:	push	{fp, lr}
   16b6c:	mov	fp, sp
   16b70:	mov	r2, r1
   16b74:	mov	r1, r0
   16b78:	mov	r0, #0
   16b7c:	bl	1808c <__assert_fail@plt+0x6fec>
   16b80:	cmp	r0, #0
   16b84:	popne	{fp, pc}
   16b88:	bl	16ff8 <__assert_fail@plt+0x5f58>
   16b8c:	push	{fp, lr}
   16b90:	mov	fp, sp
   16b94:	mov	r2, r1
   16b98:	mov	r1, r0
   16b9c:	clz	r0, r2
   16ba0:	clz	r3, r1
   16ba4:	lsr	r0, r0, #5
   16ba8:	lsr	r3, r3, #5
   16bac:	orrs	r0, r3, r0
   16bb0:	movwne	r1, #1
   16bb4:	movwne	r2, #1
   16bb8:	mov	r0, #0
   16bbc:	bl	1808c <__assert_fail@plt+0x6fec>
   16bc0:	cmp	r0, #0
   16bc4:	popne	{fp, pc}
   16bc8:	bl	16ff8 <__assert_fail@plt+0x5f58>
   16bcc:	push	{r4, r5, r6, sl, fp, lr}
   16bd0:	add	fp, sp, #16
   16bd4:	ldr	r5, [r1]
   16bd8:	mov	r4, r1
   16bdc:	mov	r6, r0
   16be0:	cmp	r0, #0
   16be4:	beq	16bfc <__assert_fail@plt+0x5b5c>
   16be8:	mov	r0, #1
   16bec:	add	r0, r0, r5, lsr #1
   16bf0:	adds	r5, r5, r0
   16bf4:	bcc	16c04 <__assert_fail@plt+0x5b64>
   16bf8:	b	16c40 <__assert_fail@plt+0x5ba0>
   16bfc:	cmp	r5, #0
   16c00:	movweq	r5, #64	; 0x40
   16c04:	mov	r0, r6
   16c08:	mov	r1, r5
   16c0c:	mov	r2, #1
   16c10:	bl	1808c <__assert_fail@plt+0x6fec>
   16c14:	cmp	r5, #0
   16c18:	mov	r1, r5
   16c1c:	movwne	r1, #1
   16c20:	cmp	r0, #0
   16c24:	bne	16c38 <__assert_fail@plt+0x5b98>
   16c28:	clz	r2, r6
   16c2c:	lsr	r2, r2, #5
   16c30:	orrs	r1, r2, r1
   16c34:	bne	16c40 <__assert_fail@plt+0x5ba0>
   16c38:	str	r5, [r4]
   16c3c:	pop	{r4, r5, r6, sl, fp, pc}
   16c40:	bl	16ff8 <__assert_fail@plt+0x5f58>
   16c44:	push	{r4, r5, r6, r7, fp, lr}
   16c48:	add	fp, sp, #16
   16c4c:	ldr	r5, [r1]
   16c50:	mov	r6, r2
   16c54:	mov	r4, r1
   16c58:	mov	r7, r0
   16c5c:	cmp	r0, #0
   16c60:	beq	16c78 <__assert_fail@plt+0x5bd8>
   16c64:	mov	r0, #1
   16c68:	add	r0, r0, r5, lsr #1
   16c6c:	adds	r5, r5, r0
   16c70:	bcc	16c90 <__assert_fail@plt+0x5bf0>
   16c74:	b	16cc4 <__assert_fail@plt+0x5c24>
   16c78:	cmp	r5, #0
   16c7c:	bne	16c90 <__assert_fail@plt+0x5bf0>
   16c80:	mov	r0, #64	; 0x40
   16c84:	cmp	r6, #64	; 0x40
   16c88:	udiv	r5, r0, r6
   16c8c:	addhi	r5, r5, #1
   16c90:	mov	r0, r7
   16c94:	mov	r1, r5
   16c98:	mov	r2, r6
   16c9c:	bl	1808c <__assert_fail@plt+0x6fec>
   16ca0:	cmp	r0, #0
   16ca4:	bne	16cbc <__assert_fail@plt+0x5c1c>
   16ca8:	cmp	r7, #0
   16cac:	beq	16cc4 <__assert_fail@plt+0x5c24>
   16cb0:	cmp	r6, #0
   16cb4:	cmpne	r5, #0
   16cb8:	bne	16cc4 <__assert_fail@plt+0x5c24>
   16cbc:	str	r5, [r4]
   16cc0:	pop	{r4, r5, r6, r7, fp, pc}
   16cc4:	bl	16ff8 <__assert_fail@plt+0x5f58>
   16cc8:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   16ccc:	add	fp, sp, #24
   16cd0:	mov	r8, r1
   16cd4:	ldr	r1, [r1]
   16cd8:	mov	r5, r0
   16cdc:	add	r0, r1, r1, asr #1
   16ce0:	cmp	r0, r1
   16ce4:	mvnvs	r0, #-2147483648	; 0x80000000
   16ce8:	cmp	r0, r3
   16cec:	mov	r7, r0
   16cf0:	movgt	r7, r3
   16cf4:	cmn	r3, #1
   16cf8:	movle	r7, r0
   16cfc:	ldr	r0, [fp, #8]
   16d00:	cmn	r0, #1
   16d04:	ble	16d2c <__assert_fail@plt+0x5c8c>
   16d08:	cmp	r0, #0
   16d0c:	beq	16d80 <__assert_fail@plt+0x5ce0>
   16d10:	cmn	r7, #1
   16d14:	ble	16d54 <__assert_fail@plt+0x5cb4>
   16d18:	mvn	r4, #-2147483648	; 0x80000000
   16d1c:	udiv	r6, r4, r0
   16d20:	cmp	r6, r7
   16d24:	bge	16d80 <__assert_fail@plt+0x5ce0>
   16d28:	b	16d90 <__assert_fail@plt+0x5cf0>
   16d2c:	cmn	r7, #1
   16d30:	ble	16d70 <__assert_fail@plt+0x5cd0>
   16d34:	cmn	r0, #1
   16d38:	beq	16d80 <__assert_fail@plt+0x5ce0>
   16d3c:	mov	r6, #-2147483648	; 0x80000000
   16d40:	mvn	r4, #-2147483648	; 0x80000000
   16d44:	sdiv	r6, r6, r0
   16d48:	cmp	r6, r7
   16d4c:	bge	16d80 <__assert_fail@plt+0x5ce0>
   16d50:	b	16d90 <__assert_fail@plt+0x5cf0>
   16d54:	beq	16d80 <__assert_fail@plt+0x5ce0>
   16d58:	mov	r6, #-2147483648	; 0x80000000
   16d5c:	mvn	r4, #-2147483648	; 0x80000000
   16d60:	sdiv	r6, r6, r7
   16d64:	cmp	r6, r0
   16d68:	bge	16d80 <__assert_fail@plt+0x5ce0>
   16d6c:	b	16d90 <__assert_fail@plt+0x5cf0>
   16d70:	mvn	r4, #-2147483648	; 0x80000000
   16d74:	sdiv	r6, r4, r0
   16d78:	cmp	r7, r6
   16d7c:	blt	16d90 <__assert_fail@plt+0x5cf0>
   16d80:	mul	r6, r7, r0
   16d84:	mov	r4, #64	; 0x40
   16d88:	cmp	r6, #63	; 0x3f
   16d8c:	bgt	16d98 <__assert_fail@plt+0x5cf8>
   16d90:	sdiv	r7, r4, r0
   16d94:	mul	r6, r7, r0
   16d98:	cmp	r5, #0
   16d9c:	moveq	r4, #0
   16da0:	streq	r4, [r8]
   16da4:	sub	r4, r7, r1
   16da8:	cmp	r4, r2
   16dac:	bge	16e58 <__assert_fail@plt+0x5db8>
   16db0:	add	r7, r1, r2
   16db4:	mov	r6, #0
   16db8:	mov	r2, #0
   16dbc:	cmp	r7, r3
   16dc0:	movwgt	r6, #1
   16dc4:	cmn	r3, #1
   16dc8:	movwgt	r2, #1
   16dcc:	cmp	r7, r1
   16dd0:	bvs	16e8c <__assert_fail@plt+0x5dec>
   16dd4:	ands	r1, r2, r6
   16dd8:	bne	16e8c <__assert_fail@plt+0x5dec>
   16ddc:	cmn	r0, #1
   16de0:	ble	16e08 <__assert_fail@plt+0x5d68>
   16de4:	cmp	r0, #0
   16de8:	beq	16e54 <__assert_fail@plt+0x5db4>
   16dec:	cmn	r7, #1
   16df0:	ble	16e2c <__assert_fail@plt+0x5d8c>
   16df4:	mvn	r1, #-2147483648	; 0x80000000
   16df8:	udiv	r1, r1, r0
   16dfc:	cmp	r1, r7
   16e00:	bge	16e54 <__assert_fail@plt+0x5db4>
   16e04:	b	16e8c <__assert_fail@plt+0x5dec>
   16e08:	cmn	r7, #1
   16e0c:	ble	16e44 <__assert_fail@plt+0x5da4>
   16e10:	cmn	r0, #1
   16e14:	beq	16e54 <__assert_fail@plt+0x5db4>
   16e18:	mov	r1, #-2147483648	; 0x80000000
   16e1c:	sdiv	r1, r1, r0
   16e20:	cmp	r1, r7
   16e24:	bge	16e54 <__assert_fail@plt+0x5db4>
   16e28:	b	16e8c <__assert_fail@plt+0x5dec>
   16e2c:	beq	16e54 <__assert_fail@plt+0x5db4>
   16e30:	mov	r1, #-2147483648	; 0x80000000
   16e34:	sdiv	r1, r1, r7
   16e38:	cmp	r1, r0
   16e3c:	bge	16e54 <__assert_fail@plt+0x5db4>
   16e40:	b	16e8c <__assert_fail@plt+0x5dec>
   16e44:	mvn	r1, #-2147483648	; 0x80000000
   16e48:	sdiv	r1, r1, r0
   16e4c:	cmp	r7, r1
   16e50:	blt	16e8c <__assert_fail@plt+0x5dec>
   16e54:	mul	r6, r7, r0
   16e58:	mov	r0, r5
   16e5c:	mov	r1, r6
   16e60:	bl	17d74 <__assert_fail@plt+0x6cd4>
   16e64:	cmp	r6, #0
   16e68:	movwne	r6, #1
   16e6c:	cmp	r0, #0
   16e70:	bne	16e84 <__assert_fail@plt+0x5de4>
   16e74:	clz	r1, r5
   16e78:	lsr	r1, r1, #5
   16e7c:	orrs	r1, r1, r6
   16e80:	bne	16e8c <__assert_fail@plt+0x5dec>
   16e84:	str	r7, [r8]
   16e88:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   16e8c:	bl	16ff8 <__assert_fail@plt+0x5f58>
   16e90:	push	{fp, lr}
   16e94:	mov	fp, sp
   16e98:	mov	r1, #1
   16e9c:	bl	17cf0 <__assert_fail@plt+0x6c50>
   16ea0:	cmp	r0, #0
   16ea4:	popne	{fp, pc}
   16ea8:	bl	16ff8 <__assert_fail@plt+0x5f58>
   16eac:	push	{fp, lr}
   16eb0:	mov	fp, sp
   16eb4:	bl	17cf0 <__assert_fail@plt+0x6c50>
   16eb8:	cmp	r0, #0
   16ebc:	popne	{fp, pc}
   16ec0:	bl	16ff8 <__assert_fail@plt+0x5f58>
   16ec4:	push	{fp, lr}
   16ec8:	mov	fp, sp
   16ecc:	mov	r1, #1
   16ed0:	bl	17cf0 <__assert_fail@plt+0x6c50>
   16ed4:	cmp	r0, #0
   16ed8:	popne	{fp, pc}
   16edc:	bl	16ff8 <__assert_fail@plt+0x5f58>
   16ee0:	push	{fp, lr}
   16ee4:	mov	fp, sp
   16ee8:	bl	17cf0 <__assert_fail@plt+0x6c50>
   16eec:	cmp	r0, #0
   16ef0:	popne	{fp, pc}
   16ef4:	bl	16ff8 <__assert_fail@plt+0x5f58>
   16ef8:	push	{r4, r5, r6, sl, fp, lr}
   16efc:	add	fp, sp, #16
   16f00:	mov	r5, r0
   16f04:	mov	r0, r1
   16f08:	mov	r4, r1
   16f0c:	bl	17d44 <__assert_fail@plt+0x6ca4>
   16f10:	cmp	r0, #0
   16f14:	beq	16f30 <__assert_fail@plt+0x5e90>
   16f18:	mov	r1, r5
   16f1c:	mov	r2, r4
   16f20:	mov	r6, r0
   16f24:	bl	10e9c <memcpy@plt>
   16f28:	mov	r0, r6
   16f2c:	pop	{r4, r5, r6, sl, fp, pc}
   16f30:	bl	16ff8 <__assert_fail@plt+0x5f58>
   16f34:	push	{r4, r5, r6, sl, fp, lr}
   16f38:	add	fp, sp, #16
   16f3c:	mov	r5, r0
   16f40:	mov	r0, r1
   16f44:	mov	r4, r1
   16f48:	bl	17d44 <__assert_fail@plt+0x6ca4>
   16f4c:	cmp	r0, #0
   16f50:	beq	16f6c <__assert_fail@plt+0x5ecc>
   16f54:	mov	r1, r5
   16f58:	mov	r2, r4
   16f5c:	mov	r6, r0
   16f60:	bl	10e9c <memcpy@plt>
   16f64:	mov	r0, r6
   16f68:	pop	{r4, r5, r6, sl, fp, pc}
   16f6c:	bl	16ff8 <__assert_fail@plt+0x5f58>
   16f70:	push	{r4, r5, r6, sl, fp, lr}
   16f74:	add	fp, sp, #16
   16f78:	mov	r5, r0
   16f7c:	add	r0, r1, #1
   16f80:	mov	r4, r1
   16f84:	bl	17d44 <__assert_fail@plt+0x6ca4>
   16f88:	cmp	r0, #0
   16f8c:	beq	16fb4 <__assert_fail@plt+0x5f14>
   16f90:	mov	r6, r0
   16f94:	mov	r0, #0
   16f98:	mov	r1, r5
   16f9c:	mov	r2, r4
   16fa0:	strb	r0, [r6, r4]
   16fa4:	mov	r0, r6
   16fa8:	bl	10e9c <memcpy@plt>
   16fac:	mov	r0, r6
   16fb0:	pop	{r4, r5, r6, sl, fp, pc}
   16fb4:	bl	16ff8 <__assert_fail@plt+0x5f58>
   16fb8:	push	{r4, r5, r6, sl, fp, lr}
   16fbc:	add	fp, sp, #16
   16fc0:	mov	r4, r0
   16fc4:	bl	10fc8 <strlen@plt>
   16fc8:	add	r5, r0, #1
   16fcc:	mov	r0, r5
   16fd0:	bl	17d44 <__assert_fail@plt+0x6ca4>
   16fd4:	cmp	r0, #0
   16fd8:	beq	16ff4 <__assert_fail@plt+0x5f54>
   16fdc:	mov	r1, r4
   16fe0:	mov	r2, r5
   16fe4:	mov	r6, r0
   16fe8:	bl	10e9c <memcpy@plt>
   16fec:	mov	r0, r6
   16ff0:	pop	{r4, r5, r6, sl, fp, pc}
   16ff4:	bl	16ff8 <__assert_fail@plt+0x5f58>
   16ff8:	push	{fp, lr}
   16ffc:	mov	fp, sp
   17000:	movw	r0, #41204	; 0xa0f4
   17004:	movw	r1, #40168	; 0x9ce8
   17008:	mov	r2, #5
   1700c:	movt	r0, #2
   17010:	movt	r1, #1
   17014:	ldr	r4, [r0]
   17018:	mov	r0, #0
   1701c:	bl	10ee4 <dcgettext@plt>
   17020:	movw	r2, #39131	; 0x98db
   17024:	mov	r3, r0
   17028:	mov	r0, r4
   1702c:	mov	r1, #0
   17030:	movt	r2, #1
   17034:	bl	10f50 <error@plt>
   17038:	bl	11088 <abort@plt>
   1703c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   17040:	add	fp, sp, #28
   17044:	sub	sp, sp, #44	; 0x2c
   17048:	cmp	r2, #37	; 0x25
   1704c:	bcs	17cd0 <__assert_fail@plt+0x6c30>
   17050:	ldr	sl, [fp, #8]
   17054:	mov	r6, r2
   17058:	mov	r7, r1
   1705c:	mov	r4, r0
   17060:	str	r3, [sp, #36]	; 0x24
   17064:	bl	10fe0 <__errno_location@plt>
   17068:	mov	r5, r0
   1706c:	mov	r0, #0
   17070:	str	r0, [r5]
   17074:	bl	10fb0 <__ctype_b_loc@plt>
   17078:	ldr	r1, [r0]
   1707c:	mov	r2, r4
   17080:	ldrb	r0, [r2], #1
   17084:	add	r3, r1, r0, lsl #1
   17088:	ldrb	r3, [r3, #1]
   1708c:	tst	r3, #32
   17090:	bne	17080 <__assert_fail@plt+0x5fe0>
   17094:	sub	r9, fp, #32
   17098:	cmp	r7, #0
   1709c:	mov	r8, #4
   170a0:	movne	r9, r7
   170a4:	cmp	r0, #45	; 0x2d
   170a8:	beq	17468 <__assert_fail@plt+0x63c8>
   170ac:	mov	r0, r4
   170b0:	mov	r1, r9
   170b4:	mov	r2, r6
   170b8:	mov	r3, #0
   170bc:	bl	10ea8 <__strtoull_internal@plt>
   170c0:	mov	r7, r1
   170c4:	ldr	r1, [r9]
   170c8:	cmp	r1, r4
   170cc:	beq	17104 <__assert_fail@plt+0x6064>
   170d0:	mov	r6, r0
   170d4:	ldr	r0, [r5]
   170d8:	cmp	r0, #0
   170dc:	beq	17420 <__assert_fail@plt+0x6380>
   170e0:	cmp	r0, #34	; 0x22
   170e4:	bne	17468 <__assert_fail@plt+0x63c8>
   170e8:	mov	r8, #1
   170ec:	cmp	sl, #0
   170f0:	beq	17cbc <__assert_fail@plt+0x6c1c>
   170f4:	ldrb	r4, [r1]
   170f8:	cmp	r4, #0
   170fc:	bne	17148 <__assert_fail@plt+0x60a8>
   17100:	b	17cbc <__assert_fail@plt+0x6c1c>
   17104:	cmp	sl, #0
   17108:	beq	17468 <__assert_fail@plt+0x63c8>
   1710c:	mov	r5, r1
   17110:	ldrb	r1, [r4]
   17114:	cmp	r1, #0
   17118:	beq	17468 <__assert_fail@plt+0x63c8>
   1711c:	mov	r0, sl
   17120:	bl	10fd4 <strchr@plt>
   17124:	cmp	r0, #0
   17128:	beq	17468 <__assert_fail@plt+0x63c8>
   1712c:	mov	r1, r5
   17130:	mov	r8, #0
   17134:	mov	r6, #1
   17138:	mov	r7, #0
   1713c:	ldrb	r4, [r1]
   17140:	cmp	r4, #0
   17144:	beq	17cbc <__assert_fail@plt+0x6c1c>
   17148:	str	r1, [sp, #32]
   1714c:	mov	r0, sl
   17150:	mov	r1, r4
   17154:	bl	10fd4 <strchr@plt>
   17158:	cmp	r0, #0
   1715c:	beq	1745c <__assert_fail@plt+0x63bc>
   17160:	sub	r0, r4, #69	; 0x45
   17164:	mov	r1, #1
   17168:	mov	r3, #0
   1716c:	mov	r5, #1024	; 0x400
   17170:	cmp	r0, #47	; 0x2f
   17174:	str	r1, [sp, #28]
   17178:	bhi	1727c <__assert_fail@plt+0x61dc>
   1717c:	add	r1, pc, #0
   17180:	ldr	pc, [r1, r0, lsl #2]
   17184:	andeq	r7, r1, r4, asr #4
   17188:	andeq	r7, r1, ip, ror r2
   1718c:	andeq	r7, r1, r4, asr #4
   17190:	andeq	r7, r1, ip, ror r2
   17194:	andeq	r7, r1, ip, ror r2
   17198:	andeq	r7, r1, ip, ror r2
   1719c:	andeq	r7, r1, r4, asr #4
   171a0:	andeq	r7, r1, ip, ror r2
   171a4:	andeq	r7, r1, r4, asr #4
   171a8:	andeq	r7, r1, ip, ror r2
   171ac:	andeq	r7, r1, ip, ror r2
   171b0:	andeq	r7, r1, r4, asr #4
   171b4:	andeq	r7, r1, ip, ror r2
   171b8:	andeq	r7, r1, ip, ror r2
   171bc:	andeq	r7, r1, ip, ror r2
   171c0:	andeq	r7, r1, r4, asr #4
   171c4:	andeq	r7, r1, ip, ror r2
   171c8:	andeq	r7, r1, ip, ror r2
   171cc:	andeq	r7, r1, ip, ror r2
   171d0:	andeq	r7, r1, ip, ror r2
   171d4:	andeq	r7, r1, r4, asr #4
   171d8:	andeq	r7, r1, r4, asr #4
   171dc:	andeq	r7, r1, ip, ror r2
   171e0:	andeq	r7, r1, ip, ror r2
   171e4:	andeq	r7, r1, ip, ror r2
   171e8:	andeq	r7, r1, ip, ror r2
   171ec:	andeq	r7, r1, ip, ror r2
   171f0:	andeq	r7, r1, ip, ror r2
   171f4:	andeq	r7, r1, ip, ror r2
   171f8:	andeq	r7, r1, ip, ror r2
   171fc:	andeq	r7, r1, ip, ror r2
   17200:	andeq	r7, r1, ip, ror r2
   17204:	andeq	r7, r1, ip, ror r2
   17208:	andeq	r7, r1, ip, ror r2
   1720c:	andeq	r7, r1, r4, asr #4
   17210:	andeq	r7, r1, ip, ror r2
   17214:	andeq	r7, r1, ip, ror r2
   17218:	andeq	r7, r1, ip, ror r2
   1721c:	andeq	r7, r1, r4, asr #4
   17220:	andeq	r7, r1, ip, ror r2
   17224:	andeq	r7, r1, r4, asr #4
   17228:	andeq	r7, r1, ip, ror r2
   1722c:	andeq	r7, r1, ip, ror r2
   17230:	andeq	r7, r1, ip, ror r2
   17234:	andeq	r7, r1, ip, ror r2
   17238:	andeq	r7, r1, ip, ror r2
   1723c:	andeq	r7, r1, ip, ror r2
   17240:	andeq	r7, r1, r4, asr #4
   17244:	mov	r0, sl
   17248:	mov	r1, #48	; 0x30
   1724c:	bl	10fd4 <strchr@plt>
   17250:	cmp	r0, #0
   17254:	beq	17278 <__assert_fail@plt+0x61d8>
   17258:	ldr	r1, [sp, #32]
   1725c:	ldrb	r0, [r1, #1]
   17260:	cmp	r0, #66	; 0x42
   17264:	cmpne	r0, #68	; 0x44
   17268:	bne	17430 <__assert_fail@plt+0x6390>
   1726c:	mov	r5, #1000	; 0x3e8
   17270:	mov	r0, #2
   17274:	str	r0, [sp, #28]
   17278:	mov	r3, #0
   1727c:	sub	r0, r4, #66	; 0x42
   17280:	cmp	r0, #53	; 0x35
   17284:	bhi	1745c <__assert_fail@plt+0x63bc>
   17288:	add	r1, pc, #0
   1728c:	ldr	pc, [r1, r0, lsl #2]
   17290:	andeq	r7, r1, ip, asr #15
   17294:	andeq	r7, r1, ip, asr r4
   17298:	andeq	r7, r1, ip, asr r4
   1729c:	strdeq	r7, [r1], -r4
   172a0:	andeq	r7, r1, ip, asr r4
   172a4:	andeq	r7, r1, r8, ror #6
   172a8:	andeq	r7, r1, ip, asr r4
   172ac:	andeq	r7, r1, ip, asr r4
   172b0:	andeq	r7, r1, ip, asr r4
   172b4:	andeq	r7, r1, r4, ror r4
   172b8:	andeq	r7, r1, ip, asr r4
   172bc:			; <UNDEFINED> instruction: 0x000174bc
   172c0:	andeq	r7, r1, ip, asr r4
   172c4:	andeq	r7, r1, ip, asr r4
   172c8:	andeq	r7, r1, r8, asr #18
   172cc:	andeq	r7, r1, ip, asr r4
   172d0:	andeq	r7, r1, ip, asr r4
   172d4:	andeq	r7, r1, ip, asr r4
   172d8:	andeq	r7, r1, r8, asr #10
   172dc:	andeq	r7, r1, ip, asr r4
   172e0:	andeq	r7, r1, ip, asr r4
   172e4:	andeq	r7, r1, ip, asr r4
   172e8:	andeq	r7, r1, ip, asr r4
   172ec:	andeq	r7, r1, r0, ror sl
   172f0:	andeq	r7, r1, r0, lsr r6
   172f4:	andeq	r7, r1, ip, asr r4
   172f8:	andeq	r7, r1, ip, asr r4
   172fc:	andeq	r7, r1, ip, asr r4
   17300:	andeq	r7, r1, ip, asr r4
   17304:	andeq	r7, r1, ip, asr r4
   17308:	andeq	r7, r1, ip, asr r4
   1730c:	andeq	r7, r1, ip, asr r4
   17310:	andeq	r7, r1, r4, asr #24
   17314:	muleq	r1, ip, ip
   17318:	andeq	r7, r1, ip, asr r4
   1731c:	andeq	r7, r1, ip, asr r4
   17320:	andeq	r7, r1, ip, asr r4
   17324:	andeq	r7, r1, r8, ror #6
   17328:	andeq	r7, r1, ip, asr r4
   1732c:	andeq	r7, r1, ip, asr r4
   17330:	andeq	r7, r1, ip, asr r4
   17334:	andeq	r7, r1, r4, ror r4
   17338:	andeq	r7, r1, ip, asr r4
   1733c:			; <UNDEFINED> instruction: 0x000174bc
   17340:	andeq	r7, r1, ip, asr r4
   17344:	andeq	r7, r1, ip, asr r4
   17348:	andeq	r7, r1, ip, asr r4
   1734c:	andeq	r7, r1, ip, asr r4
   17350:	andeq	r7, r1, ip, asr r4
   17354:	andeq	r7, r1, ip, asr r4
   17358:	andeq	r7, r1, r8, asr #10
   1735c:	andeq	r7, r1, ip, asr r4
   17360:	andeq	r7, r1, ip, asr r4
   17364:	andeq	r7, r1, r8, ror ip
   17368:	mvn	r0, #0
   1736c:	mvn	r1, #0
   17370:	mov	r2, r5
   17374:	mov	sl, r3
   17378:	bl	181d0 <__assert_fail@plt+0x7130>
   1737c:	subs	r3, r0, r6
   17380:	mov	lr, #0
   17384:	umull	r4, r2, r6, r5
   17388:	str	r1, [sp, #20]
   1738c:	sbcs	r3, r1, r7
   17390:	mla	ip, r6, sl, r2
   17394:	mov	r2, r1
   17398:	movwcc	lr, #1
   1739c:	mla	r7, r7, r5, ip
   173a0:	mov	r2, #0
   173a4:	cmp	lr, #0
   173a8:	mvnne	r4, #0
   173ac:	mvnne	r7, #0
   173b0:	subs	r6, r0, r4
   173b4:	sbcs	r6, r1, r7
   173b8:	movwcc	r2, #1
   173bc:	umull	r3, r6, r4, r5
   173c0:	cmp	r2, #0
   173c4:	str	r6, [sp, #16]
   173c8:	mvnne	r3, #0
   173cc:	cmp	r2, #0
   173d0:	umull	r6, ip, r3, r5
   173d4:	mla	r1, r3, sl, ip
   173d8:	ldr	ip, [sp, #16]
   173dc:	str	r1, [sp, #12]
   173e0:	mla	r4, r4, sl, ip
   173e4:	mla	r4, r7, r5, r4
   173e8:	ldr	r7, [sp, #12]
   173ec:	mvnne	r4, #0
   173f0:	subs	r0, r0, r3
   173f4:	ldr	r0, [sp, #20]
   173f8:	mla	r7, r4, r5, r7
   173fc:	sbcs	r0, r0, r4
   17400:	mov	r0, #0
   17404:	movwcc	r0, #1
   17408:	cmp	r0, #0
   1740c:	mov	r1, r0
   17410:	orr	r0, lr, r2
   17414:	mvnne	r7, #0
   17418:	mvnne	r6, #0
   1741c:	b	17a68 <__assert_fail@plt+0x69c8>
   17420:	mov	r8, r0
   17424:	cmp	sl, #0
   17428:	bne	170f4 <__assert_fail@plt+0x6054>
   1742c:	b	17cbc <__assert_fail@plt+0x6c1c>
   17430:	cmp	r0, #105	; 0x69
   17434:	mov	r3, #0
   17438:	bne	1727c <__assert_fail@plt+0x61dc>
   1743c:	ldrb	r0, [r1, #2]
   17440:	mov	r1, #1
   17444:	cmp	r0, #66	; 0x42
   17448:	movweq	r1, #3
   1744c:	str	r1, [sp, #28]
   17450:	sub	r0, r4, #66	; 0x42
   17454:	cmp	r0, #53	; 0x35
   17458:	bls	17288 <__assert_fail@plt+0x61e8>
   1745c:	ldr	r0, [sp, #36]	; 0x24
   17460:	orr	r8, r8, #2
   17464:	strd	r6, [r0]
   17468:	mov	r0, r8
   1746c:	sub	sp, fp, #28
   17470:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   17474:	mvn	r0, #0
   17478:	mvn	r1, #0
   1747c:	mov	r2, r5
   17480:	mov	r4, r3
   17484:	bl	181d0 <__assert_fail@plt+0x7130>
   17488:	subs	r0, r0, r6
   1748c:	mov	r2, #0
   17490:	sbcs	r0, r1, r7
   17494:	movwcc	r2, #1
   17498:	umull	r0, r1, r6, r5
   1749c:	mla	r1, r6, r4, r1
   174a0:	cmp	r2, #0
   174a4:	mov	r3, r2
   174a8:	mla	r7, r7, r5, r1
   174ac:	mvnne	r0, #0
   174b0:	mvnne	r7, #0
   174b4:	mov	r6, r0
   174b8:	b	17c9c <__assert_fail@plt+0x6bfc>
   174bc:	mvn	r0, #0
   174c0:	mvn	r1, #0
   174c4:	mov	r2, r5
   174c8:	str	r3, [sp, #24]
   174cc:	bl	181d0 <__assert_fail@plt+0x7130>
   174d0:	subs	r3, r0, r6
   174d4:	mov	ip, r0
   174d8:	umull	r4, r0, r6, r5
   174dc:	mov	sl, #0
   174e0:	sbcs	r3, r1, r7
   174e4:	str	r0, [sp, #20]
   174e8:	ldr	r0, [sp, #24]
   174ec:	mov	r3, #0
   174f0:	movwcc	r3, #1
   174f4:	cmp	r3, #0
   174f8:	mvnne	r4, #0
   174fc:	cmp	r3, #0
   17500:	umull	lr, r2, r4, r5
   17504:	mla	r2, r4, r0, r2
   17508:	str	r2, [sp, #16]
   1750c:	ldr	r2, [sp, #20]
   17510:	mla	r6, r6, r0, r2
   17514:	ldr	r0, [sp, #16]
   17518:	mla	r6, r7, r5, r6
   1751c:	mvnne	r6, #0
   17520:	mla	r7, r6, r5, r0
   17524:	subs	r0, ip, r4
   17528:	sbcs	r0, r1, r6
   1752c:	movwcc	sl, #1
   17530:	cmp	sl, #0
   17534:	orr	r3, r3, sl
   17538:	mvnne	lr, #0
   1753c:	mvnne	r7, #0
   17540:	mov	r6, lr
   17544:	b	17c9c <__assert_fail@plt+0x6bfc>
   17548:	mvn	r0, #0
   1754c:	mvn	r1, #0
   17550:	mov	r2, r5
   17554:	mov	sl, r3
   17558:	bl	181d0 <__assert_fail@plt+0x7130>
   1755c:	subs	r3, r0, r6
   17560:	mov	ip, r1
   17564:	umull	r2, lr, r6, r5
   17568:	str	r0, [sp, #20]
   1756c:	sbcs	r3, r1, r7
   17570:	mov	r1, #0
   17574:	mla	r6, r6, sl, lr
   17578:	mov	lr, #0
   1757c:	str	ip, [sp, #16]
   17580:	movwcc	r1, #1
   17584:	mla	r7, r7, r5, r6
   17588:	cmp	r1, #0
   1758c:	mvnne	r2, #0
   17590:	cmp	r1, #0
   17594:	umull	r3, r4, r2, r5
   17598:	mvnne	r7, #0
   1759c:	mla	r4, r2, sl, r4
   175a0:	subs	r2, r0, r2
   175a4:	sbcs	r2, ip, r7
   175a8:	mla	r4, r7, r5, r4
   175ac:	movwcc	lr, #1
   175b0:	mov	r2, #0
   175b4:	cmp	lr, #0
   175b8:	mvnne	r3, #0
   175bc:	mvnne	r4, #0
   175c0:	subs	r7, r0, r3
   175c4:	mov	r0, r5
   175c8:	sbcs	r7, ip, r4
   175cc:	movwcc	r2, #1
   175d0:	umull	r5, r7, r3, r5
   175d4:	cmp	r2, #0
   175d8:	mla	r3, r3, sl, r7
   175dc:	mvnne	r5, #0
   175e0:	mla	r3, r4, r0, r3
   175e4:	cmp	r2, #0
   175e8:	umull	r6, ip, r5, r0
   175ec:	mvnne	r3, #0
   175f0:	mla	ip, r5, sl, ip
   175f4:	mla	r7, r3, r0, ip
   175f8:	ldr	r0, [sp, #20]
   175fc:	subs	r0, r0, r5
   17600:	ldr	r0, [sp, #16]
   17604:	sbcs	r0, r0, r3
   17608:	mov	r0, #0
   1760c:	movwcc	r0, #1
   17610:	cmp	r0, #0
   17614:	mov	r3, r0
   17618:	orr	r0, r1, lr
   1761c:	orr	r0, r0, r2
   17620:	mvnne	r7, #0
   17624:	mvnne	r6, #0
   17628:	orr	r3, r0, r3
   1762c:	b	17c9c <__assert_fail@plt+0x6bfc>
   17630:	mvn	r0, #0
   17634:	mvn	r1, #0
   17638:	mov	r2, r5
   1763c:	mov	r4, r3
   17640:	str	r3, [sp, #24]
   17644:	bl	181d0 <__assert_fail@plt+0x7130>
   17648:	umull	r3, r2, r6, r5
   1764c:	mla	r2, r6, r4, r2
   17650:	subs	r6, r0, r6
   17654:	sbcs	r6, r1, r7
   17658:	mla	r2, r7, r5, r2
   1765c:	mov	r7, #0
   17660:	mov	r6, #0
   17664:	movwcc	r6, #1
   17668:	cmp	r6, #0
   1766c:	str	r6, [sp, #20]
   17670:	mvnne	r3, #0
   17674:	mvnne	r2, #0
   17678:	subs	r4, r0, r3
   1767c:	umull	r6, ip, r3, r5
   17680:	sbcs	r4, r1, r2
   17684:	ldr	r4, [sp, #24]
   17688:	movwcc	r7, #1
   1768c:	cmp	r7, #0
   17690:	mov	lr, r7
   17694:	str	r7, [sp, #16]
   17698:	mvnne	r6, #0
   1769c:	cmp	lr, #0
   176a0:	mov	lr, #0
   176a4:	umull	sl, r7, r6, r5
   176a8:	mla	r3, r3, r4, ip
   176ac:	mla	r7, r6, r4, r7
   176b0:	mov	r4, r0
   176b4:	mla	r2, r2, r5, r3
   176b8:	mvnne	r2, #0
   176bc:	subs	r3, r0, r6
   176c0:	mov	r0, #0
   176c4:	mla	r7, r2, r5, r7
   176c8:	sbcs	r2, r1, r2
   176cc:	mov	r3, r4
   176d0:	movwcc	r0, #1
   176d4:	str	r3, [sp, #4]
   176d8:	cmp	r0, #0
   176dc:	str	r0, [sp, #12]
   176e0:	mov	r0, r1
   176e4:	mvnne	sl, #0
   176e8:	mvnne	r7, #0
   176ec:	str	r0, [sp, #8]
   176f0:	subs	r2, r4, sl
   176f4:	ldr	r4, [sp, #24]
   176f8:	sbcs	r2, r1, r7
   176fc:	movwcc	lr, #1
   17700:	umull	r6, r2, sl, r5
   17704:	cmp	lr, #0
   17708:	mvnne	r6, #0
   1770c:	mla	r2, sl, r4, r2
   17710:	cmp	lr, #0
   17714:	umull	r1, ip, r6, r5
   17718:	mla	r2, r7, r5, r2
   1771c:	mla	ip, r6, r4, ip
   17720:	mvnne	r2, #0
   17724:	subs	r6, r3, r6
   17728:	mla	r7, r2, r5, ip
   1772c:	sbcs	r2, r0, r2
   17730:	mov	ip, #0
   17734:	movwcc	ip, #1
   17738:	mov	r2, #0
   1773c:	cmp	ip, #0
   17740:	mvnne	r1, #0
   17744:	mvnne	r7, #0
   17748:	subs	r6, r3, r1
   1774c:	ldr	r3, [sp, #24]
   17750:	sbcs	r6, r0, r7
   17754:	umull	r0, sl, r1, r5
   17758:	movwcc	r2, #1
   1775c:	cmp	r2, #0
   17760:	mvnne	r0, #0
   17764:	mla	r1, r1, r3, sl
   17768:	cmp	r2, #0
   1776c:	umull	r6, r4, r0, r5
   17770:	mla	r1, r7, r5, r1
   17774:	mla	r4, r0, r3, r4
   17778:	ldr	r3, [sp, #4]
   1777c:	mvnne	r1, #0
   17780:	mla	r7, r1, r5, r4
   17784:	ldr	r5, [sp, #16]
   17788:	subs	r0, r3, r0
   1778c:	ldr	r0, [sp, #8]
   17790:	sbcs	r0, r0, r1
   17794:	mov	r0, #0
   17798:	movwcc	r0, #1
   1779c:	cmp	r0, #0
   177a0:	mov	r1, r0
   177a4:	ldr	r0, [sp, #20]
   177a8:	mvnne	r7, #0
   177ac:	mvnne	r6, #0
   177b0:	orr	r0, r0, r5
   177b4:	ldr	r5, [sp, #12]
   177b8:	orr	r0, r0, r5
   177bc:	orr	r0, r0, lr
   177c0:	orr	r0, r0, ip
   177c4:	orr	r0, r0, r2
   177c8:	b	17c38 <__assert_fail@plt+0x6b98>
   177cc:	mov	r1, #0
   177d0:	lsl	r2, r7, #10
   177d4:	lsl	r0, r6, #10
   177d8:	lsr	r3, r7, #22
   177dc:	cmp	r1, r7, lsr #22
   177e0:	orr	r2, r2, r6, lsr #22
   177e4:	mvnne	r0, #0
   177e8:	movwne	r3, #1
   177ec:	cmp	r1, r7, lsr #22
   177f0:	b	17c68 <__assert_fail@plt+0x6bc8>
   177f4:	mvn	r0, #0
   177f8:	mvn	r1, #0
   177fc:	mov	r2, r5
   17800:	mov	sl, r3
   17804:	bl	181d0 <__assert_fail@plt+0x7130>
   17808:	subs	r2, r0, r6
   1780c:	mov	ip, r0
   17810:	mov	r0, #0
   17814:	sbcs	r2, r1, r7
   17818:	movwcc	r0, #1
   1781c:	umull	r4, r2, r6, r5
   17820:	cmp	r0, #0
   17824:	mla	r2, r6, sl, r2
   17828:	str	r0, [sp, #20]
   1782c:	mvnne	r4, #0
   17830:	cmp	r0, #0
   17834:	mla	r2, r7, r5, r2
   17838:	mov	r0, #0
   1783c:	umull	lr, r3, r4, r5
   17840:	mvnne	r2, #0
   17844:	mla	r3, r4, sl, r3
   17848:	mla	r6, r2, r5, r3
   1784c:	subs	r3, ip, r4
   17850:	sbcs	r2, r1, r2
   17854:	mov	r3, r1
   17858:	movwcc	r0, #1
   1785c:	str	r3, [sp, #8]
   17860:	cmp	r0, #0
   17864:	str	r0, [sp, #16]
   17868:	mov	r0, ip
   1786c:	mvnne	lr, #0
   17870:	mvnne	r6, #0
   17874:	str	r0, [sp, #12]
   17878:	subs	r2, ip, lr
   1787c:	umull	r7, r4, lr, r5
   17880:	sbcs	r2, r1, r6
   17884:	mla	r4, lr, sl, r4
   17888:	mov	r2, #0
   1788c:	mla	r6, r6, r5, r4
   17890:	mov	r4, #0
   17894:	movwcc	r2, #1
   17898:	cmp	r2, #0
   1789c:	mvnne	r7, #0
   178a0:	cmp	r2, #0
   178a4:	umull	r1, ip, r7, r5
   178a8:	mvnne	r6, #0
   178ac:	mla	ip, r7, sl, ip
   178b0:	subs	r7, r0, r7
   178b4:	mla	lr, r6, r5, ip
   178b8:	sbcs	r7, r3, r6
   178bc:	mov	ip, #0
   178c0:	movwcc	ip, #1
   178c4:	cmp	ip, #0
   178c8:	mvnne	r1, #0
   178cc:	mvnne	lr, #0
   178d0:	subs	r7, r0, r1
   178d4:	sbcs	r7, r3, lr
   178d8:	movwcc	r4, #1
   178dc:	umull	r0, r7, r1, r5
   178e0:	cmp	r4, #0
   178e4:	mla	r1, r1, sl, r7
   178e8:	mvnne	r0, #0
   178ec:	mla	r1, lr, r5, r1
   178f0:	cmp	r4, #0
   178f4:	umull	r6, r3, r0, r5
   178f8:	mvnne	r1, #0
   178fc:	mla	r3, r0, sl, r3
   17900:	mla	r7, r1, r5, r3
   17904:	ldr	r3, [sp, #12]
   17908:	subs	r0, r3, r0
   1790c:	ldr	r3, [sp, #16]
   17910:	ldr	r0, [sp, #8]
   17914:	sbcs	r0, r0, r1
   17918:	mov	r0, #0
   1791c:	movwcc	r0, #1
   17920:	cmp	r0, #0
   17924:	mov	r1, r0
   17928:	ldr	r0, [sp, #20]
   1792c:	mvnne	r7, #0
   17930:	mvnne	r6, #0
   17934:	orr	r0, r0, r3
   17938:	orr	r0, r0, r2
   1793c:	orr	r0, r0, ip
   17940:	orr	r0, r0, r4
   17944:	b	17a68 <__assert_fail@plt+0x69c8>
   17948:	mvn	r0, #0
   1794c:	mvn	r1, #0
   17950:	mov	r2, r5
   17954:	mov	sl, r3
   17958:	bl	181d0 <__assert_fail@plt+0x7130>
   1795c:	umull	r3, r2, r6, r5
   17960:	mov	lr, r1
   17964:	mov	r1, r0
   17968:	mla	r2, r6, sl, r2
   1796c:	subs	r6, r0, r6
   17970:	mov	r0, #0
   17974:	sbcs	r6, lr, r7
   17978:	mla	r2, r7, r5, r2
   1797c:	movwcc	r0, #1
   17980:	cmp	r0, #0
   17984:	str	r0, [sp, #20]
   17988:	mov	r0, r1
   1798c:	mvnne	r3, #0
   17990:	mvnne	r2, #0
   17994:	str	r0, [sp, #16]
   17998:	subs	r4, r1, r3
   1799c:	umull	r7, ip, r3, r5
   179a0:	sbcs	r4, lr, r2
   179a4:	mla	r3, r3, sl, ip
   179a8:	mov	ip, #0
   179ac:	mov	r4, #0
   179b0:	mla	r2, r2, r5, r3
   179b4:	movwcc	r4, #1
   179b8:	cmp	r4, #0
   179bc:	mvnne	r7, #0
   179c0:	cmp	r4, #0
   179c4:	umull	r1, r6, r7, r5
   179c8:	mvnne	r2, #0
   179cc:	mla	r6, r7, sl, r6
   179d0:	mla	r3, r2, r5, r6
   179d4:	subs	r6, r0, r7
   179d8:	sbcs	r2, lr, r2
   179dc:	movwcc	ip, #1
   179e0:	mov	r2, #0
   179e4:	cmp	ip, #0
   179e8:	mvnne	r1, #0
   179ec:	mvnne	r3, #0
   179f0:	subs	r6, r0, r1
   179f4:	sbcs	r6, lr, r3
   179f8:	movwcc	r2, #1
   179fc:	umull	r0, r6, r1, r5
   17a00:	cmp	r2, #0
   17a04:	str	r6, [sp, #12]
   17a08:	mvnne	r0, #0
   17a0c:	cmp	r2, #0
   17a10:	umull	r6, r7, r0, r5
   17a14:	mla	r7, r0, sl, r7
   17a18:	str	r7, [sp, #8]
   17a1c:	ldr	r7, [sp, #12]
   17a20:	mla	r1, r1, sl, r7
   17a24:	mla	r1, r3, r5, r1
   17a28:	ldr	r3, [sp, #8]
   17a2c:	mvnne	r1, #0
   17a30:	mla	r7, r1, r5, r3
   17a34:	ldr	r3, [sp, #16]
   17a38:	subs	r0, r3, r0
   17a3c:	sbcs	r0, lr, r1
   17a40:	mov	r0, #0
   17a44:	movwcc	r0, #1
   17a48:	cmp	r0, #0
   17a4c:	mov	r1, r0
   17a50:	ldr	r0, [sp, #20]
   17a54:	mvnne	r7, #0
   17a58:	mvnne	r6, #0
   17a5c:	orr	r0, r0, r4
   17a60:	orr	r0, r0, ip
   17a64:	orr	r0, r0, r2
   17a68:	orr	r3, r0, r1
   17a6c:	b	17c9c <__assert_fail@plt+0x6bfc>
   17a70:	mvn	r0, #0
   17a74:	mvn	r1, #0
   17a78:	mov	r2, r5
   17a7c:	mov	sl, r3
   17a80:	bl	181d0 <__assert_fail@plt+0x7130>
   17a84:	mov	ip, r1
   17a88:	subs	r1, r0, r6
   17a8c:	umull	r3, lr, r6, r5
   17a90:	mov	r2, r5
   17a94:	sbcs	r1, ip, r7
   17a98:	mla	r6, r6, sl, lr
   17a9c:	str	ip, [sp, #4]
   17aa0:	mov	r1, #0
   17aa4:	mla	r7, r7, r2, r6
   17aa8:	movwcc	r1, #1
   17aac:	cmp	r1, #0
   17ab0:	str	r1, [sp, #20]
   17ab4:	mvnne	r3, #0
   17ab8:	cmp	r1, #0
   17abc:	mov	r1, r0
   17ac0:	umull	r4, r5, r3, r5
   17ac4:	mvnne	r7, #0
   17ac8:	mov	lr, r1
   17acc:	mla	r5, r3, sl, r5
   17ad0:	subs	r3, r0, r3
   17ad4:	sbcs	r0, ip, r7
   17ad8:	mla	r5, r7, r2, r5
   17adc:	mov	r0, #0
   17ae0:	movwcc	r0, #1
   17ae4:	cmp	r0, #0
   17ae8:	str	r0, [sp, #16]
   17aec:	mvnne	r4, #0
   17af0:	mvnne	r5, #0
   17af4:	subs	r0, r1, r4
   17af8:	mov	r1, #0
   17afc:	sbcs	r0, ip, r5
   17b00:	movwcc	r1, #1
   17b04:	umull	r3, r0, r4, r2
   17b08:	cmp	r1, #0
   17b0c:	mla	r0, r4, sl, r0
   17b10:	mov	r4, lr
   17b14:	str	r1, [sp, #12]
   17b18:	mvnne	r3, #0
   17b1c:	mla	r0, r5, r2, r0
   17b20:	cmp	r1, #0
   17b24:	str	r4, [sp]
   17b28:	umull	r7, r6, r3, r2
   17b2c:	mvnne	r0, #0
   17b30:	mla	r6, r3, sl, r6
   17b34:	subs	r3, lr, r3
   17b38:	mla	r5, r0, r2, r6
   17b3c:	sbcs	r0, ip, r0
   17b40:	mov	r3, #0
   17b44:	mov	r0, #0
   17b48:	movwcc	r0, #1
   17b4c:	cmp	r0, #0
   17b50:	str	r0, [sp, #8]
   17b54:	mvnne	r7, #0
   17b58:	mvnne	r5, #0
   17b5c:	subs	r0, lr, r7
   17b60:	sbcs	r0, ip, r5
   17b64:	movwcc	r3, #1
   17b68:	umull	r6, r0, r7, r2
   17b6c:	cmp	r3, #0
   17b70:	mla	r7, r7, sl, r0
   17b74:	mov	r0, ip
   17b78:	mvnne	r6, #0
   17b7c:	mla	r7, r5, r2, r7
   17b80:	cmp	r3, #0
   17b84:	mov	r5, #0
   17b88:	umull	r1, lr, r6, r2
   17b8c:	mvnne	r7, #0
   17b90:	mla	lr, r6, sl, lr
   17b94:	subs	r6, r4, r6
   17b98:	mla	lr, r7, r2, lr
   17b9c:	sbcs	r7, ip, r7
   17ba0:	mov	ip, #0
   17ba4:	movwcc	ip, #1
   17ba8:	cmp	ip, #0
   17bac:	mvnne	r1, #0
   17bb0:	mvnne	lr, #0
   17bb4:	subs	r7, r4, r1
   17bb8:	sbcs	r7, r0, lr
   17bbc:	movwcc	r5, #1
   17bc0:	umull	r0, r7, r1, r2
   17bc4:	cmp	r5, #0
   17bc8:	mla	r1, r1, sl, r7
   17bcc:	mvnne	r0, #0
   17bd0:	mla	r1, lr, r2, r1
   17bd4:	cmp	r5, #0
   17bd8:	umull	r6, r4, r0, r2
   17bdc:	mvnne	r1, #0
   17be0:	mla	r4, r0, sl, r4
   17be4:	mla	r7, r1, r2, r4
   17be8:	ldr	r2, [sp]
   17bec:	subs	r0, r2, r0
   17bf0:	ldr	r2, [sp, #16]
   17bf4:	ldr	r0, [sp, #4]
   17bf8:	sbcs	r0, r0, r1
   17bfc:	mov	r0, #0
   17c00:	movwcc	r0, #1
   17c04:	cmp	r0, #0
   17c08:	mov	r1, r0
   17c0c:	ldr	r0, [sp, #20]
   17c10:	mvnne	r7, #0
   17c14:	mvnne	r6, #0
   17c18:	orr	r0, r0, r2
   17c1c:	ldr	r2, [sp, #12]
   17c20:	orr	r0, r0, r2
   17c24:	ldr	r2, [sp, #8]
   17c28:	orr	r0, r0, r2
   17c2c:	orr	r0, r0, r3
   17c30:	orr	r0, r0, ip
   17c34:	orr	r0, r0, r5
   17c38:	orr	r0, r0, r1
   17c3c:	and	r3, r0, #1
   17c40:	b	17c9c <__assert_fail@plt+0x6bfc>
   17c44:	mov	r1, #0
   17c48:	lsl	r2, r7, #9
   17c4c:	lsl	r0, r6, #9
   17c50:	lsr	r3, r7, #23
   17c54:	cmp	r1, r7, lsr #23
   17c58:	orr	r2, r2, r6, lsr #23
   17c5c:	mvnne	r0, #0
   17c60:	movwne	r3, #1
   17c64:	cmp	r1, r7, lsr #23
   17c68:	mvnne	r2, #0
   17c6c:	mov	r6, r0
   17c70:	mov	r7, r2
   17c74:	b	17c9c <__assert_fail@plt+0x6bfc>
   17c78:	lsl	r1, r7, #1
   17c7c:	lsl	r0, r6, #1
   17c80:	cmp	r7, #0
   17c84:	lsr	r3, r7, #31
   17c88:	orr	r1, r1, r6, lsr #31
   17c8c:	mvnlt	r0, #0
   17c90:	mvnlt	r1, #0
   17c94:	mov	r6, r0
   17c98:	mov	r7, r1
   17c9c:	ldr	r1, [sp, #32]
   17ca0:	ldr	r2, [sp, #28]
   17ca4:	orr	r8, r3, r8
   17ca8:	add	r0, r1, r2
   17cac:	str	r0, [r9]
   17cb0:	ldrb	r0, [r1, r2]
   17cb4:	cmp	r0, #0
   17cb8:	orrne	r8, r8, #2
   17cbc:	ldr	r0, [sp, #36]	; 0x24
   17cc0:	strd	r6, [r0]
   17cc4:	mov	r0, r8
   17cc8:	sub	sp, fp, #28
   17ccc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   17cd0:	movw	r0, #40185	; 0x9cf9
   17cd4:	movw	r1, #40223	; 0x9d1f
   17cd8:	movw	r3, #40239	; 0x9d2f
   17cdc:	mov	r2, #85	; 0x55
   17ce0:	movt	r0, #1
   17ce4:	movt	r1, #1
   17ce8:	movt	r3, #1
   17cec:	bl	110a0 <__assert_fail@plt>
   17cf0:	clz	r2, r1
   17cf4:	clz	r3, r0
   17cf8:	lsr	r2, r2, #5
   17cfc:	lsr	r3, r3, #5
   17d00:	orrs	r2, r3, r2
   17d04:	movwne	r1, #1
   17d08:	movwne	r0, #1
   17d0c:	cmp	r1, #0
   17d10:	beq	17d40 <__assert_fail@plt+0x6ca0>
   17d14:	mvn	r2, #-2147483648	; 0x80000000
   17d18:	udiv	r2, r2, r1
   17d1c:	cmp	r2, r0
   17d20:	bcs	17d40 <__assert_fail@plt+0x6ca0>
   17d24:	push	{fp, lr}
   17d28:	mov	fp, sp
   17d2c:	bl	10fe0 <__errno_location@plt>
   17d30:	mov	r1, #12
   17d34:	str	r1, [r0]
   17d38:	mov	r0, #0
   17d3c:	pop	{fp, pc}
   17d40:	b	10e30 <calloc@plt>
   17d44:	cmp	r0, #0
   17d48:	movweq	r0, #1
   17d4c:	cmn	r0, #1
   17d50:	ble	17d58 <__assert_fail@plt+0x6cb8>
   17d54:	b	10f5c <malloc@plt>
   17d58:	push	{fp, lr}
   17d5c:	mov	fp, sp
   17d60:	bl	10fe0 <__errno_location@plt>
   17d64:	mov	r1, #12
   17d68:	str	r1, [r0]
   17d6c:	mov	r0, #0
   17d70:	pop	{fp, pc}
   17d74:	push	{fp, lr}
   17d78:	mov	fp, sp
   17d7c:	cmp	r0, #0
   17d80:	beq	17d9c <__assert_fail@plt+0x6cfc>
   17d84:	cmp	r1, #0
   17d88:	beq	17da8 <__assert_fail@plt+0x6d08>
   17d8c:	cmn	r1, #1
   17d90:	ble	17db4 <__assert_fail@plt+0x6d14>
   17d94:	pop	{fp, lr}
   17d98:	b	10ef0 <realloc@plt>
   17d9c:	mov	r0, r1
   17da0:	pop	{fp, lr}
   17da4:	b	17d44 <__assert_fail@plt+0x6ca4>
   17da8:	bl	143b8 <__assert_fail@plt+0x3318>
   17dac:	mov	r0, #0
   17db0:	pop	{fp, pc}
   17db4:	bl	10fe0 <__errno_location@plt>
   17db8:	mov	r1, #12
   17dbc:	str	r1, [r0]
   17dc0:	mov	r0, #0
   17dc4:	pop	{fp, pc}
   17dc8:	push	{r4, r5, r6, sl, fp, lr}
   17dcc:	add	fp, sp, #16
   17dd0:	mov	r4, r0
   17dd4:	bl	10f38 <__fpending@plt>
   17dd8:	ldr	r6, [r4]
   17ddc:	mov	r5, r0
   17de0:	mov	r0, r4
   17de4:	bl	17e4c <__assert_fail@plt+0x6dac>
   17de8:	tst	r6, #32
   17dec:	bne	17e24 <__assert_fail@plt+0x6d84>
   17df0:	cmp	r0, #0
   17df4:	mov	r4, r0
   17df8:	mvnne	r4, #0
   17dfc:	cmp	r5, #0
   17e00:	bne	17e30 <__assert_fail@plt+0x6d90>
   17e04:	cmp	r0, #0
   17e08:	beq	17e30 <__assert_fail@plt+0x6d90>
   17e0c:	bl	10fe0 <__errno_location@plt>
   17e10:	ldr	r0, [r0]
   17e14:	subs	r4, r0, #9
   17e18:	mvnne	r4, #0
   17e1c:	mov	r0, r4
   17e20:	pop	{r4, r5, r6, sl, fp, pc}
   17e24:	mvn	r4, #0
   17e28:	cmp	r0, #0
   17e2c:	beq	17e38 <__assert_fail@plt+0x6d98>
   17e30:	mov	r0, r4
   17e34:	pop	{r4, r5, r6, sl, fp, pc}
   17e38:	bl	10fe0 <__errno_location@plt>
   17e3c:	mov	r1, #0
   17e40:	str	r1, [r0]
   17e44:	mov	r0, r4
   17e48:	pop	{r4, r5, r6, sl, fp, pc}
   17e4c:	push	{r4, r5, r6, sl, fp, lr}
   17e50:	add	fp, sp, #16
   17e54:	sub	sp, sp, #8
   17e58:	mov	r4, r0
   17e5c:	bl	1101c <fileno@plt>
   17e60:	cmn	r0, #1
   17e64:	ble	17ed8 <__assert_fail@plt+0x6e38>
   17e68:	mov	r0, r4
   17e6c:	bl	10f74 <__freading@plt>
   17e70:	cmp	r0, #0
   17e74:	beq	17ea0 <__assert_fail@plt+0x6e00>
   17e78:	mov	r0, r4
   17e7c:	bl	1101c <fileno@plt>
   17e80:	mov	r1, #1
   17e84:	mov	r2, #0
   17e88:	mov	r3, #0
   17e8c:	str	r1, [sp]
   17e90:	bl	10f20 <lseek64@plt>
   17e94:	and	r0, r0, r1
   17e98:	cmn	r0, #1
   17e9c:	beq	17ed8 <__assert_fail@plt+0x6e38>
   17ea0:	mov	r0, r4
   17ea4:	bl	17ee8 <__assert_fail@plt+0x6e48>
   17ea8:	cmp	r0, #0
   17eac:	beq	17ed8 <__assert_fail@plt+0x6e38>
   17eb0:	bl	10fe0 <__errno_location@plt>
   17eb4:	ldr	r6, [r0]
   17eb8:	mov	r5, r0
   17ebc:	mov	r0, r4
   17ec0:	bl	11034 <fclose@plt>
   17ec4:	cmp	r6, #0
   17ec8:	strne	r6, [r5]
   17ecc:	mvnne	r0, #0
   17ed0:	sub	sp, fp, #16
   17ed4:	pop	{r4, r5, r6, sl, fp, pc}
   17ed8:	mov	r0, r4
   17edc:	sub	sp, fp, #16
   17ee0:	pop	{r4, r5, r6, sl, fp, lr}
   17ee4:	b	11034 <fclose@plt>
   17ee8:	push	{r4, sl, fp, lr}
   17eec:	add	fp, sp, #8
   17ef0:	sub	sp, sp, #8
   17ef4:	mov	r4, r0
   17ef8:	cmp	r0, #0
   17efc:	beq	17f18 <__assert_fail@plt+0x6e78>
   17f00:	mov	r0, r4
   17f04:	bl	10f74 <__freading@plt>
   17f08:	cmp	r0, #0
   17f0c:	ldrbne	r0, [r4, #1]
   17f10:	tstne	r0, #1
   17f14:	bne	17f28 <__assert_fail@plt+0x6e88>
   17f18:	mov	r0, r4
   17f1c:	sub	sp, fp, #8
   17f20:	pop	{r4, sl, fp, lr}
   17f24:	b	10e78 <fflush@plt>
   17f28:	mov	r0, #1
   17f2c:	mov	r2, #0
   17f30:	mov	r3, #0
   17f34:	str	r0, [sp]
   17f38:	mov	r0, r4
   17f3c:	bl	17f50 <__assert_fail@plt+0x6eb0>
   17f40:	mov	r0, r4
   17f44:	sub	sp, fp, #8
   17f48:	pop	{r4, sl, fp, lr}
   17f4c:	b	10e78 <fflush@plt>
   17f50:	push	{r4, r5, r6, r7, fp, lr}
   17f54:	add	fp, sp, #16
   17f58:	sub	sp, sp, #8
   17f5c:	mov	r4, r0
   17f60:	ldr	r0, [r0, #4]
   17f64:	mov	r5, r3
   17f68:	mov	r6, r2
   17f6c:	ldr	r1, [r4, #8]
   17f70:	cmp	r1, r0
   17f74:	bne	17f90 <__assert_fail@plt+0x6ef0>
   17f78:	ldrd	r0, [r4, #16]
   17f7c:	cmp	r1, r0
   17f80:	bne	17f90 <__assert_fail@plt+0x6ef0>
   17f84:	ldr	r0, [r4, #36]	; 0x24
   17f88:	cmp	r0, #0
   17f8c:	beq	17fa8 <__assert_fail@plt+0x6f08>
   17f90:	mov	r0, r4
   17f94:	mov	r2, r6
   17f98:	mov	r3, r5
   17f9c:	sub	sp, fp, #16
   17fa0:	pop	{r4, r5, r6, r7, fp, lr}
   17fa4:	b	11040 <fseeko64@plt>
   17fa8:	ldr	r7, [fp, #8]
   17fac:	mov	r0, r4
   17fb0:	bl	1101c <fileno@plt>
   17fb4:	mov	r2, r6
   17fb8:	mov	r3, r5
   17fbc:	str	r7, [sp]
   17fc0:	bl	10f20 <lseek64@plt>
   17fc4:	and	r2, r0, r1
   17fc8:	cmn	r2, #1
   17fcc:	mvneq	r0, #0
   17fd0:	subeq	sp, fp, #16
   17fd4:	popeq	{r4, r5, r6, r7, fp, pc}
   17fd8:	strd	r0, [r4, #80]	; 0x50
   17fdc:	ldr	r0, [r4]
   17fe0:	bic	r0, r0, #16
   17fe4:	str	r0, [r4]
   17fe8:	mov	r0, #0
   17fec:	sub	sp, fp, #16
   17ff0:	pop	{r4, r5, r6, r7, fp, pc}
   17ff4:	push	{fp, lr}
   17ff8:	mov	fp, sp
   17ffc:	mov	r0, #14
   18000:	bl	11064 <nl_langinfo@plt>
   18004:	movw	r1, #36815	; 0x8fcf
   18008:	cmp	r0, #0
   1800c:	movt	r1, #1
   18010:	movne	r1, r0
   18014:	movw	r0, #40318	; 0x9d7e
   18018:	ldrb	r2, [r1]
   1801c:	movt	r0, #1
   18020:	cmp	r2, #0
   18024:	movne	r0, r1
   18028:	pop	{fp, pc}
   1802c:	push	{r4, r5, r6, r7, fp, lr}
   18030:	add	fp, sp, #16
   18034:	sub	sp, sp, #8
   18038:	add	r5, sp, #4
   1803c:	cmp	r0, #0
   18040:	mov	r7, r2
   18044:	mov	r4, r1
   18048:	movne	r5, r0
   1804c:	mov	r0, r5
   18050:	bl	10f44 <mbrtowc@plt>
   18054:	mov	r6, r0
   18058:	cmp	r7, #0
   1805c:	beq	18080 <__assert_fail@plt+0x6fe0>
   18060:	cmn	r6, #2
   18064:	bcc	18080 <__assert_fail@plt+0x6fe0>
   18068:	mov	r0, #0
   1806c:	bl	180c8 <__assert_fail@plt+0x7028>
   18070:	cmp	r0, #0
   18074:	ldrbeq	r0, [r4]
   18078:	moveq	r6, #1
   1807c:	streq	r0, [r5]
   18080:	mov	r0, r6
   18084:	sub	sp, fp, #16
   18088:	pop	{r4, r5, r6, r7, fp, pc}
   1808c:	cmp	r2, #0
   18090:	beq	180c0 <__assert_fail@plt+0x7020>
   18094:	mvn	r3, #0
   18098:	udiv	r3, r3, r2
   1809c:	cmp	r3, r1
   180a0:	bcs	180c0 <__assert_fail@plt+0x7020>
   180a4:	push	{fp, lr}
   180a8:	mov	fp, sp
   180ac:	bl	10fe0 <__errno_location@plt>
   180b0:	mov	r1, #12
   180b4:	str	r1, [r0]
   180b8:	mov	r0, #0
   180bc:	pop	{fp, pc}
   180c0:	mul	r1, r2, r1
   180c4:	b	17d74 <__assert_fail@plt+0x6cd4>
   180c8:	push	{r4, sl, fp, lr}
   180cc:	add	fp, sp, #8
   180d0:	sub	sp, sp, #264	; 0x108
   180d4:	add	r1, sp, #7
   180d8:	movw	r2, #257	; 0x101
   180dc:	bl	1812c <__assert_fail@plt+0x708c>
   180e0:	mov	r4, #0
   180e4:	cmp	r0, #0
   180e8:	bne	18120 <__assert_fail@plt+0x7080>
   180ec:	movw	r1, #36125	; 0x8d1d
   180f0:	add	r0, sp, #7
   180f4:	movt	r1, #1
   180f8:	bl	10e54 <strcmp@plt>
   180fc:	cmp	r0, #0
   18100:	beq	18120 <__assert_fail@plt+0x7080>
   18104:	movw	r1, #40324	; 0x9d84
   18108:	add	r0, sp, #7
   1810c:	movt	r1, #1
   18110:	bl	10e54 <strcmp@plt>
   18114:	mov	r4, r0
   18118:	cmp	r0, #0
   1811c:	movwne	r4, #1
   18120:	mov	r0, r4
   18124:	sub	sp, fp, #8
   18128:	pop	{r4, sl, fp, pc}
   1812c:	push	{r4, r5, r6, r7, fp, lr}
   18130:	add	fp, sp, #16
   18134:	mov	r4, r1
   18138:	mov	r1, #0
   1813c:	mov	r6, r2
   18140:	bl	1104c <setlocale@plt>
   18144:	cmp	r0, #0
   18148:	beq	18178 <__assert_fail@plt+0x70d8>
   1814c:	mov	r7, r0
   18150:	bl	10fc8 <strlen@plt>
   18154:	cmp	r0, r6
   18158:	bcs	18198 <__assert_fail@plt+0x70f8>
   1815c:	add	r2, r0, #1
   18160:	mov	r0, r4
   18164:	mov	r1, r7
   18168:	bl	10e9c <memcpy@plt>
   1816c:	mov	r5, #0
   18170:	mov	r0, r5
   18174:	pop	{r4, r5, r6, r7, fp, pc}
   18178:	cmp	r6, #0
   1817c:	mov	r5, #22
   18180:	movne	r0, #0
   18184:	strbne	r0, [r4]
   18188:	movne	r0, r5
   1818c:	popne	{r4, r5, r6, r7, fp, pc}
   18190:	mov	r0, r5
   18194:	pop	{r4, r5, r6, r7, fp, pc}
   18198:	mov	r5, #34	; 0x22
   1819c:	cmp	r6, #0
   181a0:	beq	181c0 <__assert_fail@plt+0x7120>
   181a4:	sub	r6, r6, #1
   181a8:	mov	r0, r4
   181ac:	mov	r1, r7
   181b0:	mov	r2, r6
   181b4:	bl	10e9c <memcpy@plt>
   181b8:	mov	r0, #0
   181bc:	strb	r0, [r4, r6]
   181c0:	mov	r0, r5
   181c4:	pop	{r4, r5, r6, r7, fp, pc}
   181c8:	mov	r1, #0
   181cc:	b	1104c <setlocale@plt>
   181d0:	cmp	r3, #0
   181d4:	cmpeq	r2, #0
   181d8:	bne	181f0 <__assert_fail@plt+0x7150>
   181dc:	cmp	r1, #0
   181e0:	cmpeq	r0, #0
   181e4:	mvnne	r1, #0
   181e8:	mvnne	r0, #0
   181ec:	b	1820c <__assert_fail@plt+0x716c>
   181f0:	sub	sp, sp, #8
   181f4:	push	{sp, lr}
   181f8:	bl	1821c <__assert_fail@plt+0x717c>
   181fc:	ldr	lr, [sp, #4]
   18200:	add	sp, sp, #8
   18204:	pop	{r2, r3}
   18208:	bx	lr
   1820c:	push	{r1, lr}
   18210:	mov	r0, #8
   18214:	bl	10e48 <raise@plt>
   18218:	pop	{r1, pc}
   1821c:	cmp	r1, r3
   18220:	cmpeq	r0, r2
   18224:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   18228:	mov	r4, r0
   1822c:	movcc	r0, #0
   18230:	mov	r5, r1
   18234:	ldr	lr, [sp, #36]	; 0x24
   18238:	movcc	r1, r0
   1823c:	bcc	18338 <__assert_fail@plt+0x7298>
   18240:	cmp	r3, #0
   18244:	clzeq	ip, r2
   18248:	clzne	ip, r3
   1824c:	addeq	ip, ip, #32
   18250:	cmp	r5, #0
   18254:	clzeq	r1, r4
   18258:	addeq	r1, r1, #32
   1825c:	clzne	r1, r5
   18260:	sub	ip, ip, r1
   18264:	sub	sl, ip, #32
   18268:	lsl	r9, r3, ip
   1826c:	rsb	fp, ip, #32
   18270:	orr	r9, r9, r2, lsl sl
   18274:	orr	r9, r9, r2, lsr fp
   18278:	lsl	r8, r2, ip
   1827c:	cmp	r5, r9
   18280:	cmpeq	r4, r8
   18284:	movcc	r0, #0
   18288:	movcc	r1, r0
   1828c:	bcc	182a8 <__assert_fail@plt+0x7208>
   18290:	mov	r0, #1
   18294:	subs	r4, r4, r8
   18298:	lsl	r1, r0, sl
   1829c:	orr	r1, r1, r0, lsr fp
   182a0:	lsl	r0, r0, ip
   182a4:	sbc	r5, r5, r9
   182a8:	cmp	ip, #0
   182ac:	beq	18338 <__assert_fail@plt+0x7298>
   182b0:	lsr	r6, r8, #1
   182b4:	orr	r6, r6, r9, lsl #31
   182b8:	lsr	r7, r9, #1
   182bc:	mov	r2, ip
   182c0:	b	182e4 <__assert_fail@plt+0x7244>
   182c4:	subs	r3, r4, r6
   182c8:	sbc	r8, r5, r7
   182cc:	adds	r3, r3, r3
   182d0:	adc	r8, r8, r8
   182d4:	adds	r4, r3, #1
   182d8:	adc	r5, r8, #0
   182dc:	subs	r2, r2, #1
   182e0:	beq	18300 <__assert_fail@plt+0x7260>
   182e4:	cmp	r5, r7
   182e8:	cmpeq	r4, r6
   182ec:	bcs	182c4 <__assert_fail@plt+0x7224>
   182f0:	adds	r4, r4, r4
   182f4:	adc	r5, r5, r5
   182f8:	subs	r2, r2, #1
   182fc:	bne	182e4 <__assert_fail@plt+0x7244>
   18300:	lsr	r3, r4, ip
   18304:	orr	r3, r3, r5, lsl fp
   18308:	lsr	r2, r5, ip
   1830c:	orr	r3, r3, r5, lsr sl
   18310:	adds	r0, r0, r4
   18314:	mov	r4, r3
   18318:	lsl	r3, r2, ip
   1831c:	orr	r3, r3, r4, lsl sl
   18320:	lsl	ip, r4, ip
   18324:	orr	r3, r3, r4, lsr fp
   18328:	adc	r1, r1, r5
   1832c:	subs	r0, r0, ip
   18330:	mov	r5, r2
   18334:	sbc	r1, r1, r3
   18338:	cmp	lr, #0
   1833c:	strdne	r4, [lr]
   18340:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   18344:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   18348:	mov	r7, r0
   1834c:	ldr	r6, [pc, #72]	; 1839c <__assert_fail@plt+0x72fc>
   18350:	ldr	r5, [pc, #72]	; 183a0 <__assert_fail@plt+0x7300>
   18354:	add	r6, pc, r6
   18358:	add	r5, pc, r5
   1835c:	sub	r6, r6, r5
   18360:	mov	r8, r1
   18364:	mov	r9, r2
   18368:	bl	10e10 <calloc@plt-0x20>
   1836c:	asrs	r6, r6, #2
   18370:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   18374:	mov	r4, #0
   18378:	add	r4, r4, #1
   1837c:	ldr	r3, [r5], #4
   18380:	mov	r2, r9
   18384:	mov	r1, r8
   18388:	mov	r0, r7
   1838c:	blx	r3
   18390:	cmp	r6, r4
   18394:	bne	18378 <__assert_fail@plt+0x72d8>
   18398:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   1839c:			; <UNDEFINED> instruction: 0x00011bb0
   183a0:	andeq	r1, r1, r8, lsr #23
   183a4:	bx	lr
   183a8:	ldr	r3, [pc, #12]	; 183bc <__assert_fail@plt+0x731c>
   183ac:	mov	r1, #0
   183b0:	add	r3, pc, r3
   183b4:	ldr	r2, [r3]
   183b8:	b	10ff8 <__cxa_atexit@plt>
   183bc:	andeq	r1, r1, r4, lsr sp

Disassembly of section .fini:

000183c0 <.fini>:
   183c0:	push	{r3, lr}
   183c4:	pop	{r3, pc}
