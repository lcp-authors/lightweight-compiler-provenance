
../repos/prog2/0.1:     file format elf32-littlearm


Disassembly of section .init:

00010554 <.init>:
   10554:	push	{r3, lr}
   10558:	bl	106b4 <_start@@Base+0x3c>
   1055c:	pop	{r3, pc}

Disassembly of section .plt:

00010560 <printf@plt-0x14>:
   10560:	push	{lr}		; (str lr, [sp, #-4]!)
   10564:	ldr	lr, [pc, #4]	; 10570 <printf@plt-0x4>
   10568:	add	lr, pc, lr
   1056c:	ldr	pc, [lr, #8]!
   10570:	muleq	r1, r0, sl

00010574 <printf@plt>:
   10574:	add	ip, pc, #0, 12
   10578:	add	ip, ip, #16, 20	; 0x10000
   1057c:	ldr	pc, [ip, #2704]!	; 0xa90

00010580 <__libc_start_main@plt>:
   10580:	add	ip, pc, #0, 12
   10584:	add	ip, ip, #16, 20	; 0x10000
   10588:	ldr	pc, [ip, #2696]!	; 0xa88

0001058c <__gmon_start__@plt>:
   1058c:	add	ip, pc, #0, 12
   10590:	add	ip, ip, #16, 20	; 0x10000
   10594:	ldr	pc, [ip, #2688]!	; 0xa80

00010598 <__isoc99_scanf@plt>:
   10598:	add	ip, pc, #0, 12
   1059c:	add	ip, ip, #16, 20	; 0x10000
   105a0:	ldr	pc, [ip, #2680]!	; 0xa78

000105a4 <abort@plt>:
   105a4:	add	ip, pc, #0, 12
   105a8:	add	ip, ip, #16, 20	; 0x10000
   105ac:	ldr	pc, [ip, #2672]!	; 0xa70

Disassembly of section .text:

000105b0 <main@@Base>:
   105b0:	push	{r4, lr}
   105b4:	sub	sp, sp, #24
   105b8:	ldr	r0, [pc, #164]	; 10664 <main@@Base+0xb4>
   105bc:	bl	10574 <printf@plt>
   105c0:	add	r1, sp, #20
   105c4:	ldr	r0, [pc, #156]	; 10668 <main@@Base+0xb8>
   105c8:	bl	10598 <__isoc99_scanf@plt>
   105cc:	ldr	r0, [pc, #152]	; 1066c <main@@Base+0xbc>
   105d0:	bl	10574 <printf@plt>
   105d4:	add	r1, sp, #8
   105d8:	ldr	r0, [pc, #136]	; 10668 <main@@Base+0xb8>
   105dc:	bl	10598 <__isoc99_scanf@plt>
   105e0:	ldr	r4, [pc, #136]	; 10670 <main@@Base+0xc0>
   105e4:	add	r1, sp, #12
   105e8:	ldr	r0, [pc, #120]	; 10668 <main@@Base+0xb8>
   105ec:	bl	10598 <__isoc99_scanf@plt>
   105f0:	ldr	r0, [pc, #124]	; 10674 <main@@Base+0xc4>
   105f4:	bl	10574 <printf@plt>
   105f8:	add	r1, sp, #16
   105fc:	ldr	r0, [pc, #100]	; 10668 <main@@Base+0xb8>
   10600:	bl	10598 <__isoc99_scanf@plt>
   10604:	mov	r3, #0
   10608:	str	r3, [sp, #8]
   1060c:	vldr	s13, [sp, #8]
   10610:	vldr	s15, [sp, #12]
   10614:	vcmpe.f32	s13, s15
   10618:	vmrs	APSR_nzcv, fpscr
   1061c:	bls	1062c <main@@Base+0x7c>
   10620:	mov	r0, #0
   10624:	add	sp, sp, #24
   10628:	pop	{r4, pc}
   1062c:	vldr	s14, [sp, #20]
   10630:	mov	r0, r4
   10634:	vmul.f32	s14, s13, s14
   10638:	vmul.f32	s14, s14, s13
   1063c:	vcvt.f64.f32	d7, s14
   10640:	vstr	d7, [sp]
   10644:	vcvt.f64.f32	d7, s13
   10648:	vmov	r2, r3, d7
   1064c:	bl	10574 <printf@plt>
   10650:	vldr	s15, [sp, #8]
   10654:	vldr	s14, [sp, #16]
   10658:	vadd.f32	s15, s15, s14
   1065c:	vstr	s15, [sp, #8]
   10660:	b	1060c <main@@Base+0x5c>
   10664:	ldrdeq	r0, [r1], -r8
   10668:	andeq	r0, r1, ip, ror #15
   1066c:	andeq	r0, r1, pc, ror #15
   10670:	andeq	r0, r1, r6, lsl r8
   10674:	andeq	r0, r1, r2, lsl #16

00010678 <_start@@Base>:
   10678:	mov	fp, #0
   1067c:	mov	lr, #0
   10680:	pop	{r1}		; (ldr r1, [sp], #4)
   10684:	mov	r2, sp
   10688:	push	{r2}		; (str r2, [sp, #-4]!)
   1068c:	push	{r0}		; (str r0, [sp, #-4]!)
   10690:	ldr	ip, [pc, #16]	; 106a8 <_start@@Base+0x30>
   10694:	push	{ip}		; (str ip, [sp, #-4]!)
   10698:	ldr	r0, [pc, #12]	; 106ac <_start@@Base+0x34>
   1069c:	ldr	r3, [pc, #12]	; 106b0 <_start@@Base+0x38>
   106a0:	bl	10580 <__libc_start_main@plt>
   106a4:	bl	105a4 <abort@plt>
   106a8:	andeq	r0, r1, r8, asr #15
   106ac:			; <UNDEFINED> instruction: 0x000105b0
   106b0:	andeq	r0, r1, r8, ror #14
   106b4:	ldr	r3, [pc, #20]	; 106d0 <_start@@Base+0x58>
   106b8:	ldr	r2, [pc, #20]	; 106d4 <_start@@Base+0x5c>
   106bc:	add	r3, pc, r3
   106c0:	ldr	r2, [r3, r2]
   106c4:	cmp	r2, #0
   106c8:	bxeq	lr
   106cc:	b	1058c <__gmon_start__@plt>
   106d0:	andeq	r0, r1, ip, lsr r9
   106d4:	andeq	r0, r0, r0, lsr #32
   106d8:	ldr	r0, [pc, #24]	; 106f8 <_start@@Base+0x80>
   106dc:	ldr	r3, [pc, #24]	; 106fc <_start@@Base+0x84>
   106e0:	cmp	r3, r0
   106e4:	bxeq	lr
   106e8:	ldr	r3, [pc, #16]	; 10700 <_start@@Base+0x88>
   106ec:	cmp	r3, #0
   106f0:	bxeq	lr
   106f4:	bx	r3
   106f8:	andeq	r1, r2, ip, lsr #32
   106fc:	andeq	r1, r2, ip, lsr #32
   10700:	andeq	r0, r0, r0
   10704:	ldr	r0, [pc, #36]	; 10730 <_start@@Base+0xb8>
   10708:	ldr	r1, [pc, #36]	; 10734 <_start@@Base+0xbc>
   1070c:	sub	r1, r1, r0
   10710:	asr	r1, r1, #2
   10714:	add	r1, r1, r1, lsr #31
   10718:	asrs	r1, r1, #1
   1071c:	bxeq	lr
   10720:	ldr	r3, [pc, #16]	; 10738 <_start@@Base+0xc0>
   10724:	cmp	r3, #0
   10728:	bxeq	lr
   1072c:	bx	r3
   10730:	andeq	r1, r2, ip, lsr #32
   10734:	andeq	r1, r2, ip, lsr #32
   10738:	andeq	r0, r0, r0
   1073c:	push	{r4, lr}
   10740:	ldr	r4, [pc, #24]	; 10760 <_start@@Base+0xe8>
   10744:	ldrb	r3, [r4]
   10748:	cmp	r3, #0
   1074c:	popne	{r4, pc}
   10750:	bl	106d8 <_start@@Base+0x60>
   10754:	mov	r3, #1
   10758:	strb	r3, [r4]
   1075c:	pop	{r4, pc}
   10760:	andeq	r1, r2, ip, lsr #32
   10764:	b	10704 <_start@@Base+0x8c>

00010768 <__libc_csu_init@@Base>:
   10768:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   1076c:	mov	r7, r0
   10770:	ldr	r6, [pc, #72]	; 107c0 <__libc_csu_init@@Base+0x58>
   10774:	ldr	r5, [pc, #72]	; 107c4 <__libc_csu_init@@Base+0x5c>
   10778:	add	r6, pc, r6
   1077c:	add	r5, pc, r5
   10780:	sub	r6, r6, r5
   10784:	mov	r8, r1
   10788:	mov	r9, r2
   1078c:	bl	10554 <printf@plt-0x20>
   10790:	asrs	r6, r6, #2
   10794:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   10798:	mov	r4, #0
   1079c:	add	r4, r4, #1
   107a0:	ldr	r3, [r5], #4
   107a4:	mov	r2, r9
   107a8:	mov	r1, r8
   107ac:	mov	r0, r7
   107b0:	blx	r3
   107b4:	cmp	r6, r4
   107b8:	bne	1079c <__libc_csu_init@@Base+0x34>
   107bc:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   107c0:	muleq	r1, r4, r7
   107c4:	andeq	r0, r1, ip, lsl #15

000107c8 <__libc_csu_fini@@Base>:
   107c8:	bx	lr

Disassembly of section .fini:

000107cc <.fini>:
   107cc:	push	{r3, lr}
   107d0:	pop	{r3, pc}
