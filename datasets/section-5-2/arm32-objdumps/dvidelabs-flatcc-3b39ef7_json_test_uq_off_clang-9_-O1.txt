
../repos/dvidelabs-flatcc-3b39ef7/test/json_test/json_test_uq_off:     file format elf32-littlearm


Disassembly of section .init:

00014e0c <.init>:
   14e0c:	push	{r3, lr}
   14e10:	bl	14f8c <_start@@Base+0x3c>
   14e14:	pop	{r3, pc}

Disassembly of section .plt:

00014e18 <raise@plt-0x14>:
   14e18:	push	{lr}		; (str lr, [sp, #-4]!)
   14e1c:	ldr	lr, [pc, #4]	; 14e28 <raise@plt-0x4>
   14e20:	add	lr, pc, lr
   14e24:	ldr	pc, [lr, #8]!
   14e28:	ldrdeq	r3, [r3], -r8

00014e2c <raise@plt>:
   14e2c:	add	ip, pc, #0, 12
   14e30:	add	ip, ip, #208896	; 0x33000
   14e34:	ldr	pc, [ip, #472]!	; 0x1d8

00014e38 <strcmp@plt>:
   14e38:	add	ip, pc, #0, 12
   14e3c:	add	ip, ip, #208896	; 0x33000
   14e40:	ldr	pc, [ip, #464]!	; 0x1d0

00014e44 <memmove@plt>:
   14e44:	add	ip, pc, #0, 12
   14e48:	add	ip, ip, #208896	; 0x33000
   14e4c:	ldr	pc, [ip, #456]!	; 0x1c8

00014e50 <free@plt>:
   14e50:	add	ip, pc, #0, 12
   14e54:	add	ip, ip, #208896	; 0x33000
   14e58:	ldr	pc, [ip, #448]!	; 0x1c0

00014e5c <memcpy@plt>:
   14e5c:	add	ip, pc, #0, 12
   14e60:	add	ip, ip, #208896	; 0x33000
   14e64:	ldr	pc, [ip, #440]!	; 0x1b8

00014e68 <__isinff@plt>:
   14e68:	add	ip, pc, #0, 12
   14e6c:	add	ip, ip, #208896	; 0x33000
   14e70:	ldr	pc, [ip, #432]!	; 0x1b0

00014e74 <__isinf@plt>:
   14e74:	add	ip, pc, #0, 12
   14e78:	add	ip, ip, #208896	; 0x33000
   14e7c:	ldr	pc, [ip, #424]!	; 0x1a8

00014e80 <realloc@plt>:
   14e80:	add	ip, pc, #0, 12
   14e84:	add	ip, ip, #208896	; 0x33000
   14e88:	ldr	pc, [ip, #416]!	; 0x1a0

00014e8c <fwrite@plt>:
   14e8c:	add	ip, pc, #0, 12
   14e90:	add	ip, ip, #208896	; 0x33000
   14e94:	ldr	pc, [ip, #408]!	; 0x198

00014e98 <malloc@plt>:
   14e98:	add	ip, pc, #0, 12
   14e9c:	add	ip, ip, #208896	; 0x33000
   14ea0:	ldr	pc, [ip, #400]!	; 0x190

00014ea4 <__libc_start_main@plt>:
   14ea4:	add	ip, pc, #0, 12
   14ea8:	add	ip, ip, #208896	; 0x33000
   14eac:	ldr	pc, [ip, #392]!	; 0x188

00014eb0 <__gmon_start__@plt>:
   14eb0:	add	ip, pc, #0, 12
   14eb4:	add	ip, ip, #208896	; 0x33000
   14eb8:	ldr	pc, [ip, #384]!	; 0x180

00014ebc <bcmp@plt>:
   14ebc:	add	ip, pc, #0, 12
   14ec0:	add	ip, ip, #208896	; 0x33000
   14ec4:	ldr	pc, [ip, #376]!	; 0x178

00014ec8 <strlen@plt>:
   14ec8:	add	ip, pc, #0, 12
   14ecc:	add	ip, ip, #208896	; 0x33000
   14ed0:	ldr	pc, [ip, #368]!	; 0x170

00014ed4 <fprintf@plt>:
   14ed4:	add	ip, pc, #0, 12
   14ed8:	add	ip, ip, #208896	; 0x33000
   14edc:	ldr	pc, [ip, #360]!	; 0x168

00014ee0 <posix_memalign@plt>:
   14ee0:	add	ip, pc, #0, 12
   14ee4:	add	ip, ip, #208896	; 0x33000
   14ee8:	ldr	pc, [ip, #352]!	; 0x160

00014eec <memset@plt>:
   14eec:	add	ip, pc, #0, 12
   14ef0:	add	ip, ip, #208896	; 0x33000
   14ef4:	ldr	pc, [ip, #344]!	; 0x158

00014ef8 <strncpy@plt>:
   14ef8:	add	ip, pc, #0, 12
   14efc:	add	ip, ip, #208896	; 0x33000
   14f00:	ldr	pc, [ip, #336]!	; 0x150

00014f04 <strtod@plt>:
   14f04:	add	ip, pc, #0, 12
   14f08:	add	ip, ip, #208896	; 0x33000
   14f0c:	ldr	pc, [ip, #328]!	; 0x148

00014f10 <memchr@plt>:
   14f10:	add	ip, pc, #0, 12
   14f14:	add	ip, ip, #208896	; 0x33000
   14f18:	ldr	pc, [ip, #320]!	; 0x140

00014f1c <fputc@plt>:
   14f1c:	add	ip, pc, #0, 12
   14f20:	add	ip, ip, #208896	; 0x33000
   14f24:	ldr	pc, [ip, #312]!	; 0x138

00014f28 <sprintf@plt>:
   14f28:	add	ip, pc, #0, 12
   14f2c:	add	ip, ip, #208896	; 0x33000
   14f30:	ldr	pc, [ip, #304]!	; 0x130

00014f34 <abort@plt>:
   14f34:	add	ip, pc, #0, 12
   14f38:	add	ip, ip, #208896	; 0x33000
   14f3c:	ldr	pc, [ip, #296]!	; 0x128

00014f40 <__assert_fail@plt>:
   14f40:	add	ip, pc, #0, 12
   14f44:	add	ip, ip, #208896	; 0x33000
   14f48:	ldr	pc, [ip, #288]!	; 0x120

Disassembly of section .text:

00014f50 <_start@@Base>:
   14f50:	mov	fp, #0
   14f54:	mov	lr, #0
   14f58:	pop	{r1}		; (ldr r1, [sp], #4)
   14f5c:	mov	r2, sp
   14f60:	push	{r2}		; (str r2, [sp, #-4]!)
   14f64:	push	{r0}		; (str r0, [sp, #-4]!)
   14f68:	ldr	ip, [pc, #16]	; 14f80 <_start@@Base+0x30>
   14f6c:	push	{ip}		; (str ip, [sp, #-4]!)
   14f70:	ldr	r0, [pc, #12]	; 14f84 <_start@@Base+0x34>
   14f74:	ldr	r3, [pc, #12]	; 14f88 <_start@@Base+0x38>
   14f78:	bl	14ea4 <__libc_start_main@plt>
   14f7c:	bl	14f34 <abort@plt>
   14f80:	andeq	r1, r3, ip, asr #11
   14f84:	muleq	r1, r0, sp
   14f88:	andeq	r1, r3, ip, ror #10
   14f8c:	ldr	r3, [pc, #20]	; 14fa8 <_start@@Base+0x58>
   14f90:	ldr	r2, [pc, #20]	; 14fac <_start@@Base+0x5c>
   14f94:	add	r3, pc, r3
   14f98:	ldr	r2, [r3, r2]
   14f9c:	cmp	r2, #0
   14fa0:	bxeq	lr
   14fa4:	b	14eb0 <__gmon_start__@plt>
   14fa8:	andeq	r3, r3, r4, rrx
   14fac:	andeq	r0, r0, ip, rrx
   14fb0:	ldr	r0, [pc, #24]	; 14fd0 <_start@@Base+0x80>
   14fb4:	ldr	r3, [pc, #24]	; 14fd4 <_start@@Base+0x84>
   14fb8:	cmp	r3, r0
   14fbc:	bxeq	lr
   14fc0:	ldr	r3, [pc, #16]	; 14fd8 <_start@@Base+0x88>
   14fc4:	cmp	r3, #0
   14fc8:	bxeq	lr
   14fcc:	bx	r3
   14fd0:	andeq	r8, r4, r4, asr #6
   14fd4:	andeq	r8, r4, r4, asr #6
   14fd8:	andeq	r0, r0, r0
   14fdc:	ldr	r0, [pc, #36]	; 15008 <_start@@Base+0xb8>
   14fe0:	ldr	r1, [pc, #36]	; 1500c <_start@@Base+0xbc>
   14fe4:	sub	r1, r1, r0
   14fe8:	asr	r1, r1, #2
   14fec:	add	r1, r1, r1, lsr #31
   14ff0:	asrs	r1, r1, #1
   14ff4:	bxeq	lr
   14ff8:	ldr	r3, [pc, #16]	; 15010 <_start@@Base+0xc0>
   14ffc:	cmp	r3, #0
   15000:	bxeq	lr
   15004:	bx	r3
   15008:	andeq	r8, r4, r4, asr #6
   1500c:	andeq	r8, r4, r4, asr #6
   15010:	andeq	r0, r0, r0
   15014:	push	{r4, lr}
   15018:	ldr	r4, [pc, #24]	; 15038 <_start@@Base+0xe8>
   1501c:	ldrb	r3, [r4]
   15020:	cmp	r3, #0
   15024:	popne	{r4, pc}
   15028:	bl	14fb0 <_start@@Base+0x60>
   1502c:	mov	r3, #1
   15030:	strb	r3, [r4]
   15034:	pop	{r4, pc}
   15038:	andeq	r8, r4, r0, asr r3
   1503c:	b	14fdc <_start@@Base+0x8c>

00015040 <test_json@@Base>:
   15040:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   15044:	add	fp, sp, #28
   15048:	sub	sp, sp, #348	; 0x15c
   1504c:	mov	r7, r3
   15050:	mov	r9, r2
   15054:	mov	r8, r1
   15058:	mov	r6, r0
   1505c:	add	r4, sp, #104	; 0x68
   15060:	mov	r0, r4
   15064:	bl	2113c <flatcc_builder_init@@Base>
   15068:	add	r5, sp, #16
   1506c:	mov	sl, #0
   15070:	mov	r0, r5
   15074:	mov	r1, #0
   15078:	bl	2fdc0 <flatcc_json_printer_init_dynamic_buffer@@Base>
   1507c:	ldr	r1, [fp, #12]
   15080:	mov	r0, r5
   15084:	bl	1531c <test_json@@Base+0x2dc>
   15088:	mov	r0, r8
   1508c:	bl	14ec8 <strlen@plt>
   15090:	mov	r3, r0
   15094:	ldm	r6, {r0, r1}
   15098:	stmib	sp, {r0, r1}
   1509c:	ldr	r0, [fp, #8]
   150a0:	str	r0, [sp]
   150a4:	add	r1, sp, #64	; 0x40
   150a8:	mov	r0, r4
   150ac:	mov	r2, r8
   150b0:	bl	284f4 <flatcc_json_parser_table_as_root@@Base>
   150b4:	ldr	r4, [fp, #16]
   150b8:	cmp	r0, r7
   150bc:	bne	15168 <test_json@@Base+0x128>
   150c0:	cmp	r7, #0
   150c4:	beq	150d0 <test_json@@Base+0x90>
   150c8:	mov	r5, #0
   150cc:	b	15144 <test_json@@Base+0x104>
   150d0:	add	r0, sp, #104	; 0x68
   150d4:	sub	r1, fp, #36	; 0x24
   150d8:	bl	240e4 <flatcc_builder_finalize_aligned_buffer@@Base>
   150dc:	mov	r5, r0
   150e0:	ldr	r2, [r6]
   150e4:	ldr	r3, [r6, #12]
   150e8:	ldr	r1, [fp, #-36]	; 0xffffffdc
   150ec:	bl	252e0 <flatcc_verify_table_as_root@@Base>
   150f0:	cmp	r0, #0
   150f4:	bne	15220 <test_json@@Base+0x1e0>
   150f8:	ldr	r3, [r6]
   150fc:	ldr	r0, [r6, #8]
   15100:	ldr	r2, [fp, #-36]	; 0xffffffdc
   15104:	str	r0, [sp]
   15108:	add	r6, sp, #16
   1510c:	mov	r0, r6
   15110:	mov	r1, r5
   15114:	bl	2f940 <flatcc_json_printer_table_as_root@@Base>
   15118:	sub	r1, fp, #40	; 0x28
   1511c:	mov	r0, r6
   15120:	bl	2feec <flatcc_json_printer_get_buffer@@Base>
   15124:	mov	r6, r0
   15128:	cmp	r0, #0
   1512c:	beq	1519c <test_json@@Base+0x15c>
   15130:	mov	r0, r9
   15134:	mov	r1, r6
   15138:	bl	14e38 <strcmp@plt>
   1513c:	cmp	r0, #0
   15140:	bne	1519c <test_json@@Base+0x15c>
   15144:	mov	r0, r5
   15148:	bl	241c4 <flatcc_builder_aligned_free@@Base>
   1514c:	add	r0, sp, #104	; 0x68
   15150:	bl	212c0 <flatcc_builder_clear@@Base>
   15154:	add	r0, sp, #16
   15158:	bl	2ff54 <flatcc_json_printer_clear@@Base>
   1515c:	mov	r0, sl
   15160:	sub	sp, fp, #28
   15164:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15168:	cmp	r7, #0
   1516c:	movw	r6, #33608	; 0x8348
   15170:	movt	r6, #4
   15174:	beq	151fc <test_json@@Base+0x1bc>
   15178:	ldr	r5, [r6]
   1517c:	cmp	r0, #0
   15180:	bne	15278 <test_json@@Base+0x238>
   15184:	mov	r0, r7
   15188:	bl	25f80 <flatcc_json_parser_error_string@@Base>
   1518c:	mov	r3, r0
   15190:	movw	r1, #5634	; 0x1602
   15194:	movt	r1, #3
   15198:	b	15210 <test_json@@Base+0x1d0>
   1519c:	movw	r7, #33608	; 0x8348
   151a0:	movt	r7, #4
   151a4:	ldr	r0, [r7]
   151a8:	movw	r1, #5848	; 0x16d8
   151ac:	movt	r1, #3
   151b0:	mov	r2, r4
   151b4:	bl	14ed4 <fprintf@plt>
   151b8:	ldr	r0, [r7]
   151bc:	movw	r4, #16673	; 0x4121
   151c0:	movt	r4, #3
   151c4:	mov	r1, r4
   151c8:	mov	r2, r6
   151cc:	bl	14ed4 <fprintf@plt>
   151d0:	ldr	r3, [r7]
   151d4:	movw	r0, #5901	; 0x170d
   151d8:	movt	r0, #3
   151dc:	mov	r1, #10
   151e0:	mov	r2, #1
   151e4:	bl	14e8c <fwrite@plt>
   151e8:	ldr	r0, [r7]
   151ec:	mov	r1, r4
   151f0:	mov	r2, r9
   151f4:	bl	14ed4 <fprintf@plt>
   151f8:	b	15250 <test_json@@Base+0x210>
   151fc:	ldr	r5, [r6]
   15200:	bl	25f80 <flatcc_json_parser_error_string@@Base>
   15204:	mov	r3, r0
   15208:	movw	r1, #5698	; 0x1642
   1520c:	movt	r1, #3
   15210:	mov	r0, r5
   15214:	mov	r2, r4
   15218:	bl	14ed4 <fprintf@plt>
   1521c:	b	152b4 <test_json@@Base+0x274>
   15220:	movw	r1, #33608	; 0x8348
   15224:	movt	r1, #4
   15228:	ldr	r6, [r1]
   1522c:	bl	24998 <flatcc_verify_error_string@@Base>
   15230:	str	r0, [sp]
   15234:	movw	r1, #5734	; 0x1666
   15238:	movt	r1, #3
   1523c:	movw	r2, #5773	; 0x168d
   15240:	movt	r2, #3
   15244:	mov	r0, r6
   15248:	mov	r3, r4
   1524c:	bl	14ed4 <fprintf@plt>
   15250:	mvn	sl, #0
   15254:	cmp	r5, #0
   15258:	beq	150c8 <test_json@@Base+0x88>
   1525c:	movw	r0, #33608	; 0x8348
   15260:	movt	r0, #4
   15264:	ldr	r2, [r0]
   15268:	ldr	r1, [fp, #-36]	; 0xffffffdc
   1526c:	mov	r0, r5
   15270:	bl	15370 <test_json@@Base+0x330>
   15274:	b	15144 <test_json@@Base+0x104>
   15278:	bl	25f80 <flatcc_json_parser_error_string@@Base>
   1527c:	mov	r3, r0
   15280:	movw	r1, #5596	; 0x15dc
   15284:	movt	r1, #3
   15288:	mov	r0, r5
   1528c:	mov	r2, r4
   15290:	bl	14ed4 <fprintf@plt>
   15294:	ldr	r4, [r6]
   15298:	mov	r0, r7
   1529c:	bl	25f80 <flatcc_json_parser_error_string@@Base>
   152a0:	mov	r2, r0
   152a4:	movw	r1, #5667	; 0x1623
   152a8:	movt	r1, #3
   152ac:	mov	r0, r4
   152b0:	bl	14ed4 <fprintf@plt>
   152b4:	ldr	r0, [r6]
   152b8:	movw	r1, #16673	; 0x4121
   152bc:	movt	r1, #3
   152c0:	mov	r2, r8
   152c4:	bl	14ed4 <fprintf@plt>
   152c8:	ldr	r3, [r6]
   152cc:	ldr	r0, [sp, #80]	; 0x50
   152d0:	cmp	r0, #2
   152d4:	blt	15300 <test_json@@Base+0x2c0>
   152d8:	mov	r4, #0
   152dc:	mov	r0, #32
   152e0:	mov	r1, r3
   152e4:	bl	14f1c <fputc@plt>
   152e8:	add	r4, r4, #1
   152ec:	ldr	r3, [r6]
   152f0:	ldr	r0, [sp, #80]	; 0x50
   152f4:	sub	r0, r0, #1
   152f8:	cmp	r4, r0
   152fc:	blt	152dc <test_json@@Base+0x29c>
   15300:	movw	r0, #5731	; 0x1663
   15304:	movt	r0, #3
   15308:	mov	r1, #2
   1530c:	mov	r2, #1
   15310:	bl	14e8c <fwrite@plt>
   15314:	mvn	sl, #0
   15318:	b	150c8 <test_json@@Base+0x88>
   1531c:	push	{r4, r5, fp, lr}
   15320:	add	fp, sp, #8
   15324:	mov	r5, r1
   15328:	mov	r4, r0
   1532c:	and	r0, r1, #1
   15330:	strb	r0, [r4, #26]
   15334:	uxtb	r0, r1
   15338:	ubfx	r1, r0, #3, #1
   1533c:	strb	r1, [r4, #29]
   15340:	ubfx	r1, r0, #2, #1
   15344:	strb	r1, [r4, #28]
   15348:	ubfx	r0, r0, #1, #1
   1534c:	strb	r0, [r4, #27]
   15350:	tst	r5, #16
   15354:	movne	r0, r4
   15358:	blne	16640 <main@@Base+0x8b0>
   1535c:	tst	r5, #32
   15360:	popeq	{r4, r5, fp, pc}
   15364:	mov	r0, r4
   15368:	pop	{r4, r5, fp, lr}
   1536c:	b	1664c <main@@Base+0x8bc>
   15370:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   15374:	add	fp, sp, #28
   15378:	sub	sp, sp, #20
   1537c:	mov	r4, r2
   15380:	mov	r5, r1
   15384:	mov	r6, r0
   15388:	movw	r1, #16666	; 0x411a
   1538c:	movt	r1, #3
   15390:	movw	r2, #5912	; 0x1718
   15394:	movt	r2, #3
   15398:	mov	r0, r4
   1539c:	bl	14ed4 <fprintf@plt>
   153a0:	cmp	r5, #0
   153a4:	beq	15490 <test_json@@Base+0x450>
   153a8:	add	r7, sp, #3
   153ac:	movw	sl, #16685	; 0x412d
   153b0:	movt	sl, #3
   153b4:	mov	r8, #0
   153b8:	ands	r9, r8, #15
   153bc:	bne	15420 <test_json@@Base+0x3e0>
   153c0:	b	15438 <test_json@@Base+0x3f8>
   153c4:	mov	r0, r4
   153c8:	movw	r1, #16677	; 0x4125
   153cc:	movt	r1, #3
   153d0:	mov	r2, r8
   153d4:	bl	14ed4 <fprintf@plt>
   153d8:	ldrb	r2, [r6, r8]
   153dc:	mov	r0, r4
   153e0:	mov	r1, sl
   153e4:	bl	14ed4 <fprintf@plt>
   153e8:	ldrb	r0, [r6, r8]
   153ec:	sub	r1, r0, #32
   153f0:	uxtb	r1, r1
   153f4:	cmp	r1, #94	; 0x5e
   153f8:	movwhi	r0, #46	; 0x2e
   153fc:	strb	r0, [r7, r9]
   15400:	add	r0, r7, r9
   15404:	mov	r1, #0
   15408:	strb	r1, [r0, #1]
   1540c:	add	r8, r8, #1
   15410:	cmp	r5, r8
   15414:	beq	15458 <test_json@@Base+0x418>
   15418:	ands	r9, r8, #15
   1541c:	beq	15438 <test_json@@Base+0x3f8>
   15420:	tst	r8, #7
   15424:	bne	153d8 <test_json@@Base+0x398>
   15428:	mov	r0, #32
   1542c:	mov	r1, r4
   15430:	bl	14f1c <fputc@plt>
   15434:	b	153d8 <test_json@@Base+0x398>
   15438:	cmp	r8, #0
   1543c:	beq	153c4 <test_json@@Base+0x384>
   15440:	mov	r0, r4
   15444:	movw	r1, #16671	; 0x411f
   15448:	movt	r1, #3
   1544c:	mov	r2, r7
   15450:	bl	14ed4 <fprintf@plt>
   15454:	b	153c4 <test_json@@Base+0x384>
   15458:	tst	r5, #15
   1545c:	beq	15490 <test_json@@Base+0x450>
   15460:	add	r6, r5, #1
   15464:	movw	r5, #16691	; 0x4133
   15468:	movt	r5, #3
   1546c:	mov	r0, r5
   15470:	mov	r1, #3
   15474:	mov	r2, #1
   15478:	mov	r3, r4
   1547c:	bl	14e8c <fwrite@plt>
   15480:	add	r0, r6, #1
   15484:	tst	r6, #15
   15488:	mov	r6, r0
   1548c:	bne	1546c <test_json@@Base+0x42c>
   15490:	movw	r1, #16671	; 0x411f
   15494:	movt	r1, #3
   15498:	add	r2, sp, #3
   1549c:	mov	r0, r4
   154a0:	bl	14ed4 <fprintf@plt>
   154a4:	sub	sp, fp, #28
   154a8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}

000154ac <edge_case_tests@@Base>:
   154ac:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   154b0:	add	fp, sp, #28
   154b4:	sub	sp, sp, #28
   154b8:	mov	r0, #158	; 0x9e
   154bc:	mov	r9, #0
   154c0:	str	r9, [sp]
   154c4:	str	r9, [sp, #4]
   154c8:	str	r0, [sp, #8]
   154cc:	movw	r4, #17620	; 0x44d4
   154d0:	movt	r4, #3
   154d4:	movw	r1, #5926	; 0x1726
   154d8:	movt	r1, #3
   154dc:	movw	r2, #5979	; 0x175b
   154e0:	movt	r2, #3
   154e4:	mov	r0, r4
   154e8:	mov	r3, #0
   154ec:	bl	15040 <test_json@@Base>
   154f0:	str	r0, [sp, #24]
   154f4:	mov	r0, #168	; 0xa8
   154f8:	mov	r7, #2
   154fc:	stm	sp, {r7, r9}
   15500:	str	r0, [sp, #8]
   15504:	movw	r5, #6009	; 0x1779
   15508:	movt	r5, #3
   1550c:	movw	sl, #6042	; 0x179a
   15510:	movt	sl, #3
   15514:	mov	r0, r4
   15518:	mov	r1, r5
   1551c:	mov	r2, sl
   15520:	mov	r3, #0
   15524:	bl	15040 <test_json@@Base>
   15528:	str	r0, [sp, #20]
   1552c:	mov	r0, #172	; 0xac
   15530:	str	r9, [sp]
   15534:	str	r7, [sp, #4]
   15538:	str	r0, [sp, #8]
   1553c:	movw	r1, #6076	; 0x17bc
   15540:	movt	r1, #3
   15544:	movw	r2, #6115	; 0x17e3
   15548:	movt	r2, #3
   1554c:	mov	r0, r4
   15550:	mov	r3, #0
   15554:	bl	15040 <test_json@@Base>
   15558:	str	r0, [sp, #16]
   1555c:	mov	r0, #176	; 0xb0
   15560:	mov	r1, #4
   15564:	str	r7, [sp]
   15568:	str	r1, [sp, #4]
   1556c:	str	r0, [sp, #8]
   15570:	movw	r2, #6144	; 0x1800
   15574:	movt	r2, #3
   15578:	mov	r0, r4
   1557c:	mov	r1, r5
   15580:	mov	r3, #0
   15584:	bl	15040 <test_json@@Base>
   15588:	str	r0, [sp, #12]
   1558c:	mov	r0, #180	; 0xb4
   15590:	mov	r1, #8
   15594:	str	r9, [sp]
   15598:	str	r1, [sp, #4]
   1559c:	str	r0, [sp, #8]
   155a0:	movw	r1, #6163	; 0x1813
   155a4:	movt	r1, #3
   155a8:	movw	r2, #6197	; 0x1835
   155ac:	movt	r2, #3
   155b0:	mov	r0, r4
   155b4:	mov	r3, #0
   155b8:	bl	15040 <test_json@@Base>
   155bc:	mov	r6, r0
   155c0:	mov	r0, #195	; 0xc3
   155c4:	stm	sp, {r7, r9}
   155c8:	str	r0, [sp, #8]
   155cc:	movw	r1, #6471	; 0x1947
   155d0:	movt	r1, #3
   155d4:	mov	r0, r4
   155d8:	mov	r2, sl
   155dc:	mov	r3, #0
   155e0:	bl	15040 <test_json@@Base>
   155e4:	mov	r7, r0
   155e8:	mov	r0, #199	; 0xc7
   155ec:	mov	sl, #1
   155f0:	str	sl, [sp]
   155f4:	str	r9, [sp, #4]
   155f8:	str	r0, [sp, #8]
   155fc:	movw	r5, #6509	; 0x196d
   15600:	movt	r5, #3
   15604:	movw	r2, #6559	; 0x199f
   15608:	movt	r2, #3
   1560c:	mov	r0, r4
   15610:	mov	r1, r5
   15614:	mov	r3, #0
   15618:	bl	15040 <test_json@@Base>
   1561c:	mov	r8, r0
   15620:	mov	r0, #203	; 0xcb
   15624:	str	sl, [sp]
   15628:	str	sl, [sp, #4]
   1562c:	str	r0, [sp, #8]
   15630:	movw	r2, #6586	; 0x19ba
   15634:	movt	r2, #3
   15638:	mov	r0, r4
   1563c:	mov	r1, r5
   15640:	mov	r3, #0
   15644:	bl	15040 <test_json@@Base>
   15648:	mov	r1, #209	; 0xd1
   1564c:	str	sl, [sp]
   15650:	str	r9, [sp, #4]
   15654:	str	r1, [sp, #8]
   15658:	ldr	r1, [sp, #24]
   1565c:	ldr	r2, [sp, #20]
   15660:	orr	r1, r2, r1
   15664:	ldr	r2, [sp, #16]
   15668:	orr	r1, r1, r2
   1566c:	ldr	r2, [sp, #12]
   15670:	orr	r1, r1, r2
   15674:	orr	r1, r1, r6
   15678:	orr	r1, r1, r7
   1567c:	orr	r1, r1, r8
   15680:	orr	r5, r1, r0
   15684:	movw	r1, #6609	; 0x19d1
   15688:	movt	r1, #3
   1568c:	mov	r0, r4
   15690:	movw	r2, #6559	; 0x199f
   15694:	movt	r2, #3
   15698:	mov	r3, #0
   1569c:	bl	15040 <test_json@@Base>
   156a0:	orr	r0, r5, r0
   156a4:	sub	sp, fp, #28
   156a8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}

000156ac <error_case_tests@@Base>:
   156ac:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   156b0:	add	fp, sp, #28
   156b4:	sub	sp, sp, #36	; 0x24
   156b8:	movw	r0, #285	; 0x11d
   156bc:	mov	r6, #0
   156c0:	str	r6, [sp]
   156c4:	str	r6, [sp, #4]
   156c8:	str	r0, [sp, #8]
   156cc:	movw	r4, #17620	; 0x44d4
   156d0:	movt	r4, #3
   156d4:	movw	r1, #6722	; 0x1a42
   156d8:	movt	r1, #3
   156dc:	mov	r0, r4
   156e0:	mov	r2, #0
   156e4:	mov	r3, #13
   156e8:	bl	15040 <test_json@@Base>
   156ec:	str	r0, [sp, #32]
   156f0:	movw	r0, #287	; 0x11f
   156f4:	str	r6, [sp]
   156f8:	str	r6, [sp, #4]
   156fc:	str	r0, [sp, #8]
   15700:	movw	r1, #6748	; 0x1a5c
   15704:	movt	r1, #3
   15708:	mov	r0, r4
   1570c:	mov	r2, #0
   15710:	mov	r3, #13
   15714:	bl	15040 <test_json@@Base>
   15718:	str	r0, [sp, #28]
   1571c:	movw	r0, #289	; 0x121
   15720:	str	r6, [sp]
   15724:	str	r6, [sp, #4]
   15728:	str	r0, [sp, #8]
   1572c:	movw	r1, #6845	; 0x1abd
   15730:	movt	r1, #3
   15734:	mov	r0, r4
   15738:	mov	r2, #0
   1573c:	mov	r3, #13
   15740:	bl	15040 <test_json@@Base>
   15744:	str	r0, [sp, #24]
   15748:	movw	r0, #291	; 0x123
   1574c:	str	r6, [sp]
   15750:	str	r6, [sp, #4]
   15754:	str	r0, [sp, #8]
   15758:	movw	r1, #6939	; 0x1b1b
   1575c:	movt	r1, #3
   15760:	mov	r0, r4
   15764:	mov	r2, #0
   15768:	mov	r3, #13
   1576c:	bl	15040 <test_json@@Base>
   15770:	str	r0, [sp, #20]
   15774:	movw	r0, #293	; 0x125
   15778:	str	r6, [sp]
   1577c:	str	r6, [sp, #4]
   15780:	str	r0, [sp, #8]
   15784:	movw	r1, #7027	; 0x1b73
   15788:	movt	r1, #3
   1578c:	mov	r0, r4
   15790:	mov	r2, #0
   15794:	mov	r3, #13
   15798:	bl	15040 <test_json@@Base>
   1579c:	str	r0, [sp, #16]
   157a0:	mov	r0, #296	; 0x128
   157a4:	str	r6, [sp]
   157a8:	str	r6, [sp, #4]
   157ac:	str	r0, [sp, #8]
   157b0:	movw	r1, #7112	; 0x1bc8
   157b4:	movt	r1, #3
   157b8:	mov	r0, r4
   157bc:	mov	r2, #0
   157c0:	mov	r3, #13
   157c4:	bl	15040 <test_json@@Base>
   157c8:	mov	r7, r0
   157cc:	movw	r0, #299	; 0x12b
   157d0:	str	r6, [sp]
   157d4:	str	r6, [sp, #4]
   157d8:	str	r0, [sp, #8]
   157dc:	movw	r1, #7270	; 0x1c66
   157e0:	movt	r1, #3
   157e4:	mov	r0, r4
   157e8:	mov	r2, #0
   157ec:	mov	r3, #13
   157f0:	bl	15040 <test_json@@Base>
   157f4:	mov	r8, r0
   157f8:	movw	r0, #303	; 0x12f
   157fc:	str	r6, [sp]
   15800:	str	r6, [sp, #4]
   15804:	str	r0, [sp, #8]
   15808:	movw	r1, #7425	; 0x1d01
   1580c:	movt	r1, #3
   15810:	mov	r0, r4
   15814:	mov	r2, #0
   15818:	mov	r3, #13
   1581c:	bl	15040 <test_json@@Base>
   15820:	mov	r9, r0
   15824:	movw	r0, #307	; 0x133
   15828:	str	r6, [sp]
   1582c:	str	r6, [sp, #4]
   15830:	str	r0, [sp, #8]
   15834:	movw	r1, #7624	; 0x1dc8
   15838:	movt	r1, #3
   1583c:	mov	r0, r4
   15840:	mov	r2, #0
   15844:	mov	r3, #13
   15848:	bl	15040 <test_json@@Base>
   1584c:	mov	sl, r0
   15850:	movw	r0, #311	; 0x137
   15854:	str	r6, [sp]
   15858:	str	r6, [sp, #4]
   1585c:	str	r0, [sp, #8]
   15860:	movw	r1, #7823	; 0x1e8f
   15864:	movt	r1, #3
   15868:	mov	r0, r4
   1586c:	mov	r2, #0
   15870:	mov	r3, #5
   15874:	bl	15040 <test_json@@Base>
   15878:	mov	r5, r0
   1587c:	movw	r0, #314	; 0x13a
   15880:	str	r6, [sp]
   15884:	str	r6, [sp, #4]
   15888:	str	r0, [sp, #8]
   1588c:	movw	r1, #7847	; 0x1ea7
   15890:	movt	r1, #3
   15894:	mov	r0, r4
   15898:	mov	r2, #0
   1589c:	mov	r3, #5
   158a0:	bl	15040 <test_json@@Base>
   158a4:	movw	r1, #317	; 0x13d
   158a8:	str	r6, [sp]
   158ac:	str	r6, [sp, #4]
   158b0:	str	r1, [sp, #8]
   158b4:	ldr	r1, [sp, #32]
   158b8:	ldr	r2, [sp, #28]
   158bc:	orr	r1, r2, r1
   158c0:	ldr	r2, [sp, #24]
   158c4:	orr	r1, r1, r2
   158c8:	ldr	r2, [sp, #20]
   158cc:	orr	r1, r1, r2
   158d0:	ldr	r2, [sp, #16]
   158d4:	orr	r1, r1, r2
   158d8:	orr	r1, r1, r7
   158dc:	orr	r1, r1, r8
   158e0:	orr	r1, r1, r9
   158e4:	orr	r1, r1, sl
   158e8:	orr	r1, r1, r5
   158ec:	orr	r5, r1, r0
   158f0:	movw	r1, #7885	; 0x1ecd
   158f4:	movt	r1, #3
   158f8:	mov	r0, r4
   158fc:	mov	r2, #0
   15900:	mov	r3, #5
   15904:	bl	15040 <test_json@@Base>
   15908:	orr	r0, r5, r0
   1590c:	sub	sp, fp, #28
   15910:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}

00015914 <base64_tests@@Base>:
   15914:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   15918:	add	fp, sp, #28
   1591c:	sub	sp, sp, #20
   15920:	movw	r0, #369	; 0x171
   15924:	mov	r8, #0
   15928:	str	r8, [sp]
   1592c:	str	r8, [sp, #4]
   15930:	str	r0, [sp, #8]
   15934:	movw	r4, #17620	; 0x44d4
   15938:	movt	r4, #3
   1593c:	movw	r1, #7941	; 0x1f05
   15940:	movt	r1, #3
   15944:	movw	r2, #6144	; 0x1800
   15948:	movt	r2, #3
   1594c:	mov	r0, r4
   15950:	mov	r3, #0
   15954:	bl	15040 <test_json@@Base>
   15958:	str	r0, [sp, #16]
   1595c:	mov	r0, #372	; 0x174
   15960:	str	r8, [sp]
   15964:	str	r8, [sp, #4]
   15968:	str	r0, [sp, #8]
   1596c:	movw	r1, #7963	; 0x1f1b
   15970:	movt	r1, #3
   15974:	movw	r2, #8002	; 0x1f42
   15978:	movt	r2, #3
   1597c:	mov	r0, r4
   15980:	mov	r3, #0
   15984:	bl	15040 <test_json@@Base>
   15988:	mov	r9, r0
   1598c:	mov	r0, #376	; 0x178
   15990:	str	r8, [sp]
   15994:	str	r8, [sp, #4]
   15998:	str	r0, [sp, #8]
   1599c:	movw	r1, #8037	; 0x1f65
   159a0:	movt	r1, #3
   159a4:	movw	r6, #8222	; 0x201e
   159a8:	movt	r6, #3
   159ac:	mov	r0, r4
   159b0:	mov	r2, r6
   159b4:	mov	r3, #0
   159b8:	bl	15040 <test_json@@Base>
   159bc:	mov	sl, r0
   159c0:	movw	r0, #379	; 0x17b
   159c4:	str	r8, [sp]
   159c8:	str	r8, [sp, #4]
   159cc:	str	r0, [sp, #8]
   159d0:	movw	r1, #8402	; 0x20d2
   159d4:	movt	r1, #3
   159d8:	movw	r7, #8590	; 0x218e
   159dc:	movt	r7, #3
   159e0:	mov	r0, r4
   159e4:	mov	r2, r7
   159e8:	mov	r3, #0
   159ec:	bl	15040 <test_json@@Base>
   159f0:	mov	r5, r0
   159f4:	movw	r0, #382	; 0x17e
   159f8:	str	r8, [sp]
   159fc:	str	r8, [sp, #4]
   15a00:	str	r0, [sp, #8]
   15a04:	movw	r1, #8773	; 0x2245
   15a08:	movt	r1, #3
   15a0c:	mov	r0, r4
   15a10:	mov	r2, r6
   15a14:	mov	r3, #0
   15a18:	bl	15040 <test_json@@Base>
   15a1c:	mov	r6, r0
   15a20:	movw	r0, #385	; 0x181
   15a24:	str	r8, [sp]
   15a28:	str	r8, [sp, #4]
   15a2c:	str	r0, [sp, #8]
   15a30:	movw	r1, #8956	; 0x22fc
   15a34:	movt	r1, #3
   15a38:	mov	r0, r4
   15a3c:	mov	r2, r7
   15a40:	mov	r3, #0
   15a44:	bl	15040 <test_json@@Base>
   15a48:	mov	r7, r0
   15a4c:	mov	r0, #388	; 0x184
   15a50:	str	r8, [sp]
   15a54:	str	r8, [sp, #4]
   15a58:	str	r0, [sp, #8]
   15a5c:	movw	r1, #9142	; 0x23b6
   15a60:	movt	r1, #3
   15a64:	mov	r0, r4
   15a68:	mov	r2, #0
   15a6c:	mov	r3, #31
   15a70:	bl	15040 <test_json@@Base>
   15a74:	movw	r1, #391	; 0x187
   15a78:	str	r8, [sp]
   15a7c:	str	r8, [sp, #4]
   15a80:	str	r1, [sp, #8]
   15a84:	ldr	r1, [sp, #16]
   15a88:	orr	r1, r9, r1
   15a8c:	orr	r1, r1, sl
   15a90:	orr	r1, r1, r5
   15a94:	orr	r1, r1, r6
   15a98:	orr	r1, r1, r7
   15a9c:	orr	r5, r1, r0
   15aa0:	movw	r1, #9327	; 0x246f
   15aa4:	movt	r1, #3
   15aa8:	mov	r0, r4
   15aac:	mov	r2, #0
   15ab0:	mov	r3, #32
   15ab4:	bl	15040 <test_json@@Base>
   15ab8:	orr	r0, r5, r0
   15abc:	sub	sp, fp, #28
   15ac0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}

00015ac4 <mixed_type_union_tests@@Base>:
   15ac4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   15ac8:	add	fp, sp, #28
   15acc:	sub	sp, sp, #20
   15ad0:	mov	r0, #432	; 0x1b0
   15ad4:	mov	r8, #0
   15ad8:	str	r8, [sp]
   15adc:	str	r8, [sp, #4]
   15ae0:	str	r0, [sp, #8]
   15ae4:	movw	r4, #17636	; 0x44e4
   15ae8:	movt	r4, #3
   15aec:	movw	r1, #9515	; 0x252b
   15af0:	movt	r1, #3
   15af4:	movw	r2, #9594	; 0x257a
   15af8:	movt	r2, #3
   15afc:	mov	r0, r4
   15b00:	mov	r3, #0
   15b04:	bl	15040 <test_json@@Base>
   15b08:	str	r0, [sp, #16]
   15b0c:	movw	r0, #437	; 0x1b5
   15b10:	str	r8, [sp]
   15b14:	str	r8, [sp, #4]
   15b18:	str	r0, [sp, #8]
   15b1c:	movw	r1, #9665	; 0x25c1
   15b20:	movt	r1, #3
   15b24:	movw	r9, #9796	; 0x2644
   15b28:	movt	r9, #3
   15b2c:	mov	r0, r4
   15b30:	mov	r2, r9
   15b34:	mov	r3, #0
   15b38:	bl	15040 <test_json@@Base>
   15b3c:	mov	sl, r0
   15b40:	movw	r0, #442	; 0x1ba
   15b44:	str	r8, [sp]
   15b48:	str	r8, [sp, #4]
   15b4c:	str	r0, [sp, #8]
   15b50:	movw	r1, #9915	; 0x26bb
   15b54:	movt	r1, #3
   15b58:	mov	r0, r4
   15b5c:	mov	r2, r9
   15b60:	mov	r3, #0
   15b64:	bl	15040 <test_json@@Base>
   15b68:	mov	r5, r0
   15b6c:	movw	r0, #449	; 0x1c1
   15b70:	str	r8, [sp]
   15b74:	str	r8, [sp, #4]
   15b78:	str	r0, [sp, #8]
   15b7c:	movw	r1, #10065	; 0x2751
   15b80:	movt	r1, #3
   15b84:	movw	r2, #10286	; 0x282e
   15b88:	movt	r2, #3
   15b8c:	mov	r0, r4
   15b90:	mov	r3, #0
   15b94:	bl	15040 <test_json@@Base>
   15b98:	mov	r6, r0
   15b9c:	movw	r0, #458	; 0x1ca
   15ba0:	str	r8, [sp]
   15ba4:	str	r8, [sp, #4]
   15ba8:	str	r0, [sp, #8]
   15bac:	movw	r1, #10471	; 0x28e7
   15bb0:	movt	r1, #3
   15bb4:	movw	r2, #10733	; 0x29ed
   15bb8:	movt	r2, #3
   15bbc:	mov	r0, r4
   15bc0:	mov	r3, #0
   15bc4:	bl	15040 <test_json@@Base>
   15bc8:	mov	r7, r0
   15bcc:	movw	r0, #469	; 0x1d5
   15bd0:	str	r8, [sp]
   15bd4:	str	r8, [sp, #4]
   15bd8:	str	r0, [sp, #8]
   15bdc:	movw	r1, #10955	; 0x2acb
   15be0:	movt	r1, #3
   15be4:	movw	r2, #11340	; 0x2c4c
   15be8:	movt	r2, #3
   15bec:	mov	r0, r4
   15bf0:	mov	r3, #0
   15bf4:	bl	15040 <test_json@@Base>
   15bf8:	movw	r1, #474	; 0x1da
   15bfc:	str	r8, [sp]
   15c00:	str	r8, [sp, #4]
   15c04:	str	r1, [sp, #8]
   15c08:	ldr	r1, [sp, #16]
   15c0c:	orr	r1, sl, r1
   15c10:	orr	r1, r1, r5
   15c14:	orr	r1, r1, r6
   15c18:	orr	r1, r1, r7
   15c1c:	orr	r5, r1, r0
   15c20:	movw	r1, #11666	; 0x2d92
   15c24:	movt	r1, #3
   15c28:	mov	r0, r4
   15c2c:	mov	r2, r9
   15c30:	mov	r3, #0
   15c34:	bl	15040 <test_json@@Base>
   15c38:	orr	r0, r5, r0
   15c3c:	sub	sp, fp, #28
   15c40:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}

00015c44 <union_vector_tests@@Base>:
   15c44:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   15c48:	add	fp, sp, #28
   15c4c:	sub	sp, sp, #12
   15c50:	movw	r0, #485	; 0x1e5
   15c54:	mov	r7, #0
   15c58:	str	r7, [sp]
   15c5c:	str	r7, [sp, #4]
   15c60:	str	r0, [sp, #8]
   15c64:	movw	r4, #17652	; 0x44f4
   15c68:	movt	r4, #3
   15c6c:	movw	r1, #11807	; 0x2e1f
   15c70:	movt	r1, #3
   15c74:	movw	r8, #11871	; 0x2e5f
   15c78:	movt	r8, #3
   15c7c:	mov	r0, r4
   15c80:	mov	r2, r8
   15c84:	mov	r3, #0
   15c88:	bl	15040 <test_json@@Base>
   15c8c:	mov	r9, r0
   15c90:	mov	r0, #488	; 0x1e8
   15c94:	str	r7, [sp]
   15c98:	str	r7, [sp, #4]
   15c9c:	str	r0, [sp, #8]
   15ca0:	movw	r1, #11927	; 0x2e97
   15ca4:	movt	r1, #3
   15ca8:	movw	r2, #11978	; 0x2eca
   15cac:	movt	r2, #3
   15cb0:	mov	r0, r4
   15cb4:	mov	r3, #0
   15cb8:	bl	15040 <test_json@@Base>
   15cbc:	mov	sl, r0
   15cc0:	movw	r0, #491	; 0x1eb
   15cc4:	str	r7, [sp]
   15cc8:	str	r7, [sp, #4]
   15ccc:	str	r0, [sp, #8]
   15cd0:	movw	r1, #12021	; 0x2ef5
   15cd4:	movt	r1, #3
   15cd8:	movw	r2, #12098	; 0x2f42
   15cdc:	movt	r2, #3
   15ce0:	mov	r0, r4
   15ce4:	mov	r3, #0
   15ce8:	bl	15040 <test_json@@Base>
   15cec:	mov	r6, r0
   15cf0:	movw	r0, #494	; 0x1ee
   15cf4:	str	r7, [sp]
   15cf8:	str	r7, [sp, #4]
   15cfc:	str	r0, [sp, #8]
   15d00:	movw	r1, #12166	; 0x2f86
   15d04:	movt	r1, #3
   15d08:	movw	r2, #12291	; 0x3003
   15d0c:	movt	r2, #3
   15d10:	mov	r0, r4
   15d14:	mov	r3, #0
   15d18:	bl	15040 <test_json@@Base>
   15d1c:	mov	r5, r0
   15d20:	movw	r0, #497	; 0x1f1
   15d24:	str	r7, [sp]
   15d28:	str	r7, [sp, #4]
   15d2c:	str	r0, [sp, #8]
   15d30:	movw	r1, #12399	; 0x306f
   15d34:	movt	r1, #3
   15d38:	mov	r0, r4
   15d3c:	mov	r2, r8
   15d40:	mov	r3, #0
   15d44:	bl	15040 <test_json@@Base>
   15d48:	mov	r1, #500	; 0x1f4
   15d4c:	str	r7, [sp]
   15d50:	str	r7, [sp, #4]
   15d54:	str	r1, [sp, #8]
   15d58:	orr	r1, sl, r9
   15d5c:	orr	r1, r1, r6
   15d60:	orr	r1, r1, r5
   15d64:	orr	r5, r1, r0
   15d68:	movw	r1, #12462	; 0x30ae
   15d6c:	movt	r1, #3
   15d70:	movw	r2, #12564	; 0x3114
   15d74:	movt	r2, #3
   15d78:	mov	r0, r4
   15d7c:	mov	r3, #0
   15d80:	bl	15040 <test_json@@Base>
   15d84:	orr	r0, r5, r0
   15d88:	sub	sp, fp, #28
   15d8c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}

00015d90 <main@@Base>:
   15d90:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   15d94:	add	fp, sp, #28
   15d98:	sub	sp, sp, #164	; 0xa4
   15d9c:	bl	154ac <edge_case_tests@@Base>
   15da0:	str	r0, [fp, #-32]	; 0xffffffe0
   15da4:	bl	156ac <error_case_tests@@Base>
   15da8:	str	r0, [fp, #-36]	; 0xffffffdc
   15dac:	bl	15c44 <union_vector_tests@@Base>
   15db0:	str	r0, [fp, #-40]	; 0xffffffd8
   15db4:	bl	15914 <base64_tests@@Base>
   15db8:	str	r0, [fp, #-44]	; 0xffffffd4
   15dbc:	bl	15ac4 <mixed_type_union_tests@@Base>
   15dc0:	str	r0, [fp, #-48]	; 0xffffffd0
   15dc4:	movw	r0, #525	; 0x20d
   15dc8:	mov	r8, #0
   15dcc:	str	r8, [sp]
   15dd0:	str	r8, [sp, #4]
   15dd4:	str	r0, [sp, #8]
   15dd8:	movw	r4, #17620	; 0x44d4
   15ddc:	movt	r4, #3
   15de0:	movw	r1, #12656	; 0x3170
   15de4:	movt	r1, #3
   15de8:	movw	r9, #6144	; 0x1800
   15dec:	movt	r9, #3
   15df0:	mov	r0, r4
   15df4:	mov	r2, r9
   15df8:	mov	r3, #0
   15dfc:	bl	15040 <test_json@@Base>
   15e00:	str	r0, [fp, #-52]	; 0xffffffcc
   15e04:	mov	r0, #528	; 0x210
   15e08:	str	r8, [sp]
   15e0c:	str	r8, [sp, #4]
   15e10:	str	r0, [sp, #8]
   15e14:	movw	r1, #12679	; 0x3187
   15e18:	movt	r1, #3
   15e1c:	movw	r5, #12718	; 0x31ae
   15e20:	movt	r5, #3
   15e24:	mov	r0, r4
   15e28:	mov	r2, r5
   15e2c:	mov	r3, #0
   15e30:	bl	15040 <test_json@@Base>
   15e34:	str	r0, [fp, #-56]	; 0xffffffc8
   15e38:	movw	r0, #531	; 0x213
   15e3c:	str	r8, [sp]
   15e40:	str	r8, [sp, #4]
   15e44:	str	r0, [sp, #8]
   15e48:	movw	r1, #12751	; 0x31cf
   15e4c:	movt	r1, #3
   15e50:	movw	r7, #12791	; 0x31f7
   15e54:	movt	r7, #3
   15e58:	mov	r0, r4
   15e5c:	mov	r2, r7
   15e60:	mov	r3, #0
   15e64:	bl	15040 <test_json@@Base>
   15e68:	str	r0, [fp, #-60]	; 0xffffffc4
   15e6c:	movw	r0, #534	; 0x216
   15e70:	str	r8, [sp]
   15e74:	str	r8, [sp, #4]
   15e78:	str	r0, [sp, #8]
   15e7c:	movw	r1, #12826	; 0x321a
   15e80:	movt	r1, #3
   15e84:	movw	r6, #12875	; 0x324b
   15e88:	movt	r6, #3
   15e8c:	mov	r0, r4
   15e90:	mov	r2, r6
   15e94:	mov	r3, #0
   15e98:	bl	15040 <test_json@@Base>
   15e9c:	str	r0, [fp, #-64]	; 0xffffffc0
   15ea0:	movw	r0, #537	; 0x219
   15ea4:	str	r8, [sp]
   15ea8:	str	r8, [sp, #4]
   15eac:	str	r0, [sp, #8]
   15eb0:	movw	r1, #12919	; 0x3277
   15eb4:	movt	r1, #3
   15eb8:	mov	r0, r4
   15ebc:	mov	r2, r6
   15ec0:	mov	r3, #0
   15ec4:	bl	15040 <test_json@@Base>
   15ec8:	str	r0, [fp, #-68]	; 0xffffffbc
   15ecc:	mov	r0, #540	; 0x21c
   15ed0:	str	r8, [sp]
   15ed4:	str	r8, [sp, #4]
   15ed8:	str	r0, [sp, #8]
   15edc:	movw	r1, #12977	; 0x32b1
   15ee0:	movt	r1, #3
   15ee4:	mov	r0, r4
   15ee8:	mov	r2, r5
   15eec:	mov	r3, #0
   15ef0:	bl	15040 <test_json@@Base>
   15ef4:	str	r0, [fp, #-72]	; 0xffffffb8
   15ef8:	movw	r0, #543	; 0x21f
   15efc:	str	r8, [sp]
   15f00:	str	r8, [sp, #4]
   15f04:	str	r0, [sp, #8]
   15f08:	movw	r1, #13015	; 0x32d7
   15f0c:	movt	r1, #3
   15f10:	mov	r0, r4
   15f14:	mov	r2, r7
   15f18:	mov	r3, #0
   15f1c:	bl	15040 <test_json@@Base>
   15f20:	str	r0, [fp, #-76]	; 0xffffffb4
   15f24:	movw	r0, #547	; 0x223
   15f28:	str	r8, [sp]
   15f2c:	str	r8, [sp, #4]
   15f30:	str	r0, [sp, #8]
   15f34:	movw	r1, #13056	; 0x3300
   15f38:	movt	r1, #3
   15f3c:	mov	r0, r4
   15f40:	mov	r2, r9
   15f44:	mov	r3, #0
   15f48:	bl	15040 <test_json@@Base>
   15f4c:	str	r0, [fp, #-80]	; 0xffffffb0
   15f50:	movw	r0, #551	; 0x227
   15f54:	str	r8, [sp]
   15f58:	str	r8, [sp, #4]
   15f5c:	str	r0, [sp, #8]
   15f60:	movw	r1, #6009	; 0x1779
   15f64:	movt	r1, #3
   15f68:	mov	r0, r4
   15f6c:	mov	r2, r9
   15f70:	mov	r3, #0
   15f74:	bl	15040 <test_json@@Base>
   15f78:	str	r0, [fp, #-84]	; 0xffffffac
   15f7c:	movw	r0, #601	; 0x259
   15f80:	str	r8, [sp]
   15f84:	str	r8, [sp, #4]
   15f88:	str	r0, [sp, #8]
   15f8c:	movw	r1, #13095	; 0x3327
   15f90:	movt	r1, #3
   15f94:	mov	r0, r4
   15f98:	mov	r2, r5
   15f9c:	mov	r3, #0
   15fa0:	bl	15040 <test_json@@Base>
   15fa4:	str	r0, [fp, #-88]	; 0xffffffa8
   15fa8:	mov	r0, #604	; 0x25c
   15fac:	str	r8, [sp]
   15fb0:	str	r8, [sp, #4]
   15fb4:	str	r0, [sp, #8]
   15fb8:	movw	r1, #13128	; 0x3348
   15fbc:	movt	r1, #3
   15fc0:	mov	r0, r4
   15fc4:	mov	r2, r7
   15fc8:	mov	r3, #0
   15fcc:	bl	15040 <test_json@@Base>
   15fd0:	str	r0, [fp, #-92]	; 0xffffffa4
   15fd4:	movw	r0, #607	; 0x25f
   15fd8:	str	r8, [sp]
   15fdc:	str	r8, [sp, #4]
   15fe0:	str	r0, [sp, #8]
   15fe4:	movw	r1, #13161	; 0x3369
   15fe8:	movt	r1, #3
   15fec:	movw	r2, #13194	; 0x338a
   15ff0:	movt	r2, #3
   15ff4:	mov	r0, r4
   15ff8:	mov	r3, #0
   15ffc:	bl	15040 <test_json@@Base>
   16000:	str	r0, [sp, #96]	; 0x60
   16004:	movw	r0, #610	; 0x262
   16008:	str	r8, [sp]
   1600c:	str	r8, [sp, #4]
   16010:	str	r0, [sp, #8]
   16014:	movw	r1, #13232	; 0x33b0
   16018:	movt	r1, #3
   1601c:	mov	r0, r4
   16020:	mov	r2, r6
   16024:	mov	r3, #0
   16028:	bl	15040 <test_json@@Base>
   1602c:	str	r0, [sp, #92]	; 0x5c
   16030:	movw	r0, #613	; 0x265
   16034:	str	r8, [sp]
   16038:	str	r8, [sp, #4]
   1603c:	str	r0, [sp, #8]
   16040:	movw	r1, #13266	; 0x33d2
   16044:	movt	r1, #3
   16048:	movw	r2, #13300	; 0x33f4
   1604c:	movt	r2, #3
   16050:	mov	r0, r4
   16054:	mov	r3, #0
   16058:	bl	15040 <test_json@@Base>
   1605c:	str	r0, [sp, #88]	; 0x58
   16060:	mov	r0, #616	; 0x268
   16064:	str	r8, [sp]
   16068:	str	r8, [sp, #4]
   1606c:	str	r0, [sp, #8]
   16070:	movw	r1, #13330	; 0x3412
   16074:	movt	r1, #3
   16078:	movw	r2, #13364	; 0x3434
   1607c:	movt	r2, #3
   16080:	mov	r0, r4
   16084:	mov	r3, #0
   16088:	bl	15040 <test_json@@Base>
   1608c:	str	r0, [sp, #84]	; 0x54
   16090:	movw	r0, #619	; 0x26b
   16094:	str	r8, [sp]
   16098:	str	r8, [sp, #4]
   1609c:	str	r0, [sp, #8]
   160a0:	movw	r1, #13394	; 0x3452
   160a4:	movt	r1, #3
   160a8:	movw	r2, #13427	; 0x3473
   160ac:	movt	r2, #3
   160b0:	mov	r0, r4
   160b4:	mov	r3, #0
   160b8:	bl	15040 <test_json@@Base>
   160bc:	str	r0, [sp, #80]	; 0x50
   160c0:	movw	r0, #622	; 0x26e
   160c4:	str	r8, [sp]
   160c8:	str	r8, [sp, #4]
   160cc:	str	r0, [sp, #8]
   160d0:	movw	r1, #13456	; 0x3490
   160d4:	movt	r1, #3
   160d8:	mov	r0, r4
   160dc:	mov	r2, r5
   160e0:	mov	r3, #0
   160e4:	bl	15040 <test_json@@Base>
   160e8:	str	r0, [sp, #76]	; 0x4c
   160ec:	movw	r0, #625	; 0x271
   160f0:	str	r8, [sp]
   160f4:	str	r8, [sp, #4]
   160f8:	str	r0, [sp, #8]
   160fc:	movw	r1, #13499	; 0x34bb
   16100:	movt	r1, #3
   16104:	mov	r0, r4
   16108:	mov	r2, r5
   1610c:	mov	r3, #0
   16110:	bl	15040 <test_json@@Base>
   16114:	str	r0, [sp, #72]	; 0x48
   16118:	mov	r0, #628	; 0x274
   1611c:	str	r8, [sp]
   16120:	str	r8, [sp, #4]
   16124:	str	r0, [sp, #8]
   16128:	movw	r5, #13557	; 0x34f5
   1612c:	movt	r5, #3
   16130:	movw	r6, #13599	; 0x351f
   16134:	movt	r6, #3
   16138:	mov	r0, r4
   1613c:	mov	r1, r5
   16140:	mov	r2, r6
   16144:	mov	r3, #0
   16148:	bl	15040 <test_json@@Base>
   1614c:	str	r0, [sp, #68]	; 0x44
   16150:	movw	r0, #631	; 0x277
   16154:	str	r8, [sp]
   16158:	str	r8, [sp, #4]
   1615c:	str	r0, [sp, #8]
   16160:	mov	r0, r4
   16164:	mov	r1, r5
   16168:	mov	r2, r6
   1616c:	mov	r3, #0
   16170:	bl	15040 <test_json@@Base>
   16174:	str	r0, [sp, #64]	; 0x40
   16178:	movw	r0, #634	; 0x27a
   1617c:	str	r8, [sp]
   16180:	str	r8, [sp, #4]
   16184:	str	r0, [sp, #8]
   16188:	movw	r1, #13625	; 0x3539
   1618c:	movt	r1, #3
   16190:	movw	r2, #13706	; 0x358a
   16194:	movt	r2, #3
   16198:	mov	r0, r4
   1619c:	mov	r3, #0
   161a0:	bl	15040 <test_json@@Base>
   161a4:	str	r0, [sp, #60]	; 0x3c
   161a8:	movw	r0, #638	; 0x27e
   161ac:	str	r8, [sp]
   161b0:	str	r8, [sp, #4]
   161b4:	str	r0, [sp, #8]
   161b8:	movw	r1, #13777	; 0x35d1
   161bc:	movt	r1, #3
   161c0:	movw	r2, #13862	; 0x3626
   161c4:	movt	r2, #3
   161c8:	mov	r0, r4
   161cc:	mov	r3, #0
   161d0:	bl	15040 <test_json@@Base>
   161d4:	str	r0, [sp, #56]	; 0x38
   161d8:	movw	r0, #642	; 0x282
   161dc:	str	r8, [sp]
   161e0:	str	r8, [sp, #4]
   161e4:	str	r0, [sp, #8]
   161e8:	movw	r1, #13936	; 0x3670
   161ec:	movt	r1, #3
   161f0:	movw	r2, #14047	; 0x36df
   161f4:	movt	r2, #3
   161f8:	mov	r0, r4
   161fc:	mov	r3, #0
   16200:	bl	15040 <test_json@@Base>
   16204:	str	r0, [sp, #52]	; 0x34
   16208:	movw	r0, #646	; 0x286
   1620c:	str	r8, [sp]
   16210:	str	r8, [sp, #4]
   16214:	str	r0, [sp, #8]
   16218:	movw	r1, #14145	; 0x3741
   1621c:	movt	r1, #3
   16220:	mov	r0, r4
   16224:	mov	r2, r9
   16228:	mov	r3, #0
   1622c:	bl	15040 <test_json@@Base>
   16230:	str	r0, [sp, #48]	; 0x30
   16234:	movw	r0, #649	; 0x289
   16238:	str	r8, [sp]
   1623c:	str	r8, [sp, #4]
   16240:	str	r0, [sp, #8]
   16244:	movw	r1, #14188	; 0x376c
   16248:	movt	r1, #3
   1624c:	mov	r0, r4
   16250:	mov	r2, r9
   16254:	mov	r3, #0
   16258:	bl	15040 <test_json@@Base>
   1625c:	str	r0, [sp, #44]	; 0x2c
   16260:	mov	r0, #716	; 0x2cc
   16264:	str	r8, [sp]
   16268:	str	r8, [sp, #4]
   1626c:	str	r0, [sp, #8]
   16270:	movw	r1, #14226	; 0x3792
   16274:	movt	r1, #3
   16278:	movw	r2, #14335	; 0x37ff
   1627c:	movt	r2, #3
   16280:	mov	r0, r4
   16284:	mov	r3, #0
   16288:	bl	15040 <test_json@@Base>
   1628c:	str	r0, [sp, #40]	; 0x28
   16290:	movw	r0, #731	; 0x2db
   16294:	str	r8, [sp]
   16298:	str	r8, [sp, #4]
   1629c:	str	r0, [sp, #8]
   162a0:	movw	r1, #14429	; 0x385d
   162a4:	movt	r1, #3
   162a8:	movw	r2, #14490	; 0x389a
   162ac:	movt	r2, #3
   162b0:	mov	r0, r4
   162b4:	mov	r3, #0
   162b8:	bl	15040 <test_json@@Base>
   162bc:	str	r0, [sp, #36]	; 0x24
   162c0:	movw	r0, #734	; 0x2de
   162c4:	str	r8, [sp]
   162c8:	str	r8, [sp, #4]
   162cc:	str	r0, [sp, #8]
   162d0:	movw	r1, #14538	; 0x38ca
   162d4:	movt	r1, #3
   162d8:	movw	r2, #14564	; 0x38e4
   162dc:	movt	r2, #3
   162e0:	mov	r0, r4
   162e4:	mov	r3, #0
   162e8:	bl	15040 <test_json@@Base>
   162ec:	str	r0, [sp, #32]
   162f0:	movw	r0, #738	; 0x2e2
   162f4:	str	r8, [sp]
   162f8:	str	r8, [sp, #4]
   162fc:	str	r0, [sp, #8]
   16300:	movw	r1, #14582	; 0x38f6
   16304:	movt	r1, #3
   16308:	movw	r5, #14654	; 0x393e
   1630c:	movt	r5, #3
   16310:	mov	r0, r4
   16314:	mov	r2, r5
   16318:	mov	r3, #0
   1631c:	bl	15040 <test_json@@Base>
   16320:	str	r0, [sp, #28]
   16324:	movw	r0, #750	; 0x2ee
   16328:	str	r8, [sp]
   1632c:	str	r8, [sp, #4]
   16330:	str	r0, [sp, #8]
   16334:	movw	r1, #14719	; 0x397f
   16338:	movt	r1, #3
   1633c:	mov	r0, r4
   16340:	mov	r2, r5
   16344:	mov	r3, #0
   16348:	bl	15040 <test_json@@Base>
   1634c:	str	r0, [sp, #24]
   16350:	movw	r0, #766	; 0x2fe
   16354:	str	r8, [sp]
   16358:	str	r8, [sp, #4]
   1635c:	str	r0, [sp, #8]
   16360:	movw	r1, #14876	; 0x3a1c
   16364:	movt	r1, #3
   16368:	movw	r2, #14915	; 0x3a43
   1636c:	movt	r2, #3
   16370:	mov	r0, r4
   16374:	mov	r3, #0
   16378:	bl	15040 <test_json@@Base>
   1637c:	str	r0, [sp, #20]
   16380:	movw	r0, #770	; 0x302
   16384:	str	r8, [sp]
   16388:	str	r8, [sp, #4]
   1638c:	str	r0, [sp, #8]
   16390:	movw	r1, #14949	; 0x3a65
   16394:	movt	r1, #3
   16398:	movw	r2, #14996	; 0x3a94
   1639c:	movt	r2, #3
   163a0:	mov	r0, r4
   163a4:	mov	r3, #0
   163a8:	bl	15040 <test_json@@Base>
   163ac:	str	r0, [sp, #16]
   163b0:	mov	r0, #776	; 0x308
   163b4:	str	r8, [sp]
   163b8:	str	r8, [sp, #4]
   163bc:	str	r0, [sp, #8]
   163c0:	movw	r1, #15038	; 0x3abe
   163c4:	movt	r1, #3
   163c8:	movw	r2, #15161	; 0x3b39
   163cc:	movt	r2, #3
   163d0:	mov	r0, r4
   163d4:	mov	r3, #0
   163d8:	bl	15040 <test_json@@Base>
   163dc:	mov	r7, r0
   163e0:	movw	r0, #781	; 0x30d
   163e4:	str	r8, [sp]
   163e8:	str	r8, [sp, #4]
   163ec:	str	r0, [sp, #8]
   163f0:	movw	r1, #15273	; 0x3ba9
   163f4:	movt	r1, #3
   163f8:	mov	r0, r4
   163fc:	mov	r2, r9
   16400:	mov	r3, #0
   16404:	bl	15040 <test_json@@Base>
   16408:	mov	r6, r0
   1640c:	movw	r0, #786	; 0x312
   16410:	str	r8, [sp]
   16414:	str	r8, [sp, #4]
   16418:	str	r0, [sp, #8]
   1641c:	movw	r1, #15393	; 0x3c21
   16420:	movt	r1, #3
   16424:	movw	r2, #15515	; 0x3c9b
   16428:	movt	r2, #3
   1642c:	mov	r0, r4
   16430:	mov	r3, #0
   16434:	bl	15040 <test_json@@Base>
   16438:	mov	r9, r0
   1643c:	movw	r0, #791	; 0x317
   16440:	str	r8, [sp]
   16444:	str	r8, [sp, #4]
   16448:	str	r0, [sp, #8]
   1644c:	movw	r1, #15626	; 0x3d0a
   16450:	movt	r1, #3
   16454:	movw	r2, #15765	; 0x3d95
   16458:	movt	r2, #3
   1645c:	mov	r0, r4
   16460:	mov	r3, #0
   16464:	bl	15040 <test_json@@Base>
   16468:	mov	sl, r0
   1646c:	mov	r0, #796	; 0x31c
   16470:	str	r8, [sp]
   16474:	str	r8, [sp, #4]
   16478:	str	r0, [sp, #8]
   1647c:	movw	r1, #15891	; 0x3e13
   16480:	movt	r1, #3
   16484:	movw	r2, #16014	; 0x3e8e
   16488:	movt	r2, #3
   1648c:	mov	r0, r4
   16490:	mov	r3, #0
   16494:	bl	15040 <test_json@@Base>
   16498:	mov	r5, r0
   1649c:	movw	r0, #801	; 0x321
   164a0:	str	r8, [sp]
   164a4:	str	r8, [sp, #4]
   164a8:	str	r0, [sp, #8]
   164ac:	movw	r1, #16126	; 0x3efe
   164b0:	movt	r1, #3
   164b4:	movw	r2, #16264	; 0x3f88
   164b8:	movt	r2, #3
   164bc:	mov	r0, r4
   164c0:	mov	r3, #0
   164c4:	bl	15040 <test_json@@Base>
   164c8:	movw	r1, #806	; 0x326
   164cc:	str	r8, [sp]
   164d0:	str	r8, [sp, #4]
   164d4:	str	r1, [sp, #8]
   164d8:	ldr	r1, [fp, #-32]	; 0xffffffe0
   164dc:	ldr	r2, [fp, #-36]	; 0xffffffdc
   164e0:	orr	r1, r2, r1
   164e4:	ldr	r2, [fp, #-40]	; 0xffffffd8
   164e8:	orr	r1, r1, r2
   164ec:	ldr	r2, [fp, #-44]	; 0xffffffd4
   164f0:	orr	r1, r1, r2
   164f4:	ldr	r2, [fp, #-48]	; 0xffffffd0
   164f8:	orr	r1, r1, r2
   164fc:	ldr	r2, [fp, #-52]	; 0xffffffcc
   16500:	orr	r1, r1, r2
   16504:	ldr	r2, [fp, #-56]	; 0xffffffc8
   16508:	orr	r1, r1, r2
   1650c:	ldr	r2, [fp, #-60]	; 0xffffffc4
   16510:	orr	r1, r1, r2
   16514:	ldr	r2, [fp, #-64]	; 0xffffffc0
   16518:	orr	r1, r1, r2
   1651c:	ldr	r2, [fp, #-68]	; 0xffffffbc
   16520:	orr	r1, r1, r2
   16524:	ldr	r2, [fp, #-72]	; 0xffffffb8
   16528:	orr	r1, r1, r2
   1652c:	ldr	r2, [fp, #-76]	; 0xffffffb4
   16530:	orr	r1, r1, r2
   16534:	ldr	r2, [fp, #-80]	; 0xffffffb0
   16538:	orr	r1, r1, r2
   1653c:	ldr	r2, [fp, #-84]	; 0xffffffac
   16540:	orr	r1, r1, r2
   16544:	ldr	r2, [fp, #-88]	; 0xffffffa8
   16548:	orr	r1, r1, r2
   1654c:	ldr	r2, [fp, #-92]	; 0xffffffa4
   16550:	orr	r1, r1, r2
   16554:	ldr	r2, [sp, #96]	; 0x60
   16558:	orr	r1, r1, r2
   1655c:	ldr	r2, [sp, #92]	; 0x5c
   16560:	orr	r1, r1, r2
   16564:	ldr	r2, [sp, #88]	; 0x58
   16568:	orr	r1, r1, r2
   1656c:	ldr	r2, [sp, #84]	; 0x54
   16570:	orr	r1, r1, r2
   16574:	ldr	r2, [sp, #80]	; 0x50
   16578:	orr	r1, r1, r2
   1657c:	ldr	r2, [sp, #76]	; 0x4c
   16580:	orr	r1, r1, r2
   16584:	ldr	r2, [sp, #72]	; 0x48
   16588:	orr	r1, r1, r2
   1658c:	ldr	r2, [sp, #68]	; 0x44
   16590:	orr	r1, r1, r2
   16594:	ldr	r2, [sp, #64]	; 0x40
   16598:	orr	r1, r1, r2
   1659c:	ldr	r2, [sp, #60]	; 0x3c
   165a0:	orr	r1, r1, r2
   165a4:	ldr	r2, [sp, #56]	; 0x38
   165a8:	orr	r1, r1, r2
   165ac:	ldr	r2, [sp, #52]	; 0x34
   165b0:	orr	r1, r1, r2
   165b4:	ldr	r2, [sp, #48]	; 0x30
   165b8:	orr	r1, r1, r2
   165bc:	ldr	r2, [sp, #44]	; 0x2c
   165c0:	orr	r1, r1, r2
   165c4:	ldr	r2, [sp, #40]	; 0x28
   165c8:	orr	r1, r1, r2
   165cc:	ldr	r2, [sp, #36]	; 0x24
   165d0:	orr	r1, r1, r2
   165d4:	ldr	r2, [sp, #32]
   165d8:	orr	r1, r1, r2
   165dc:	ldr	r2, [sp, #28]
   165e0:	orr	r1, r1, r2
   165e4:	ldr	r2, [sp, #24]
   165e8:	orr	r1, r1, r2
   165ec:	ldr	r2, [sp, #20]
   165f0:	orr	r1, r1, r2
   165f4:	ldr	r2, [sp, #16]
   165f8:	orr	r1, r1, r2
   165fc:	orr	r1, r1, r7
   16600:	orr	r1, r1, r6
   16604:	orr	r1, r1, r9
   16608:	orr	r1, r1, sl
   1660c:	orr	r1, r1, r5
   16610:	orr	r5, r1, r0
   16614:	movw	r1, #16391	; 0x4007
   16618:	movt	r1, #3
   1661c:	movw	r2, #16534	; 0x4096
   16620:	movt	r2, #3
   16624:	mov	r0, r4
   16628:	mov	r3, #0
   1662c:	bl	15040 <test_json@@Base>
   16630:	orrs	r0, r5, r0
   16634:	mvnne	r0, #0
   16638:	sub	sp, fp, #28
   1663c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   16640:	mov	r1, #2
   16644:	strb	r1, [r0, #25]
   16648:	bx	lr
   1664c:	push	{r4, sl, fp, lr}
   16650:	add	fp, sp, #8
   16654:	mov	r4, r0
   16658:	bl	16640 <main@@Base+0x8b0>
   1665c:	mov	r0, r4
   16660:	bl	16670 <main@@Base+0x8e0>
   16664:	mov	r0, r4
   16668:	pop	{r4, sl, fp, lr}
   1666c:	b	1667c <main@@Base+0x8ec>
   16670:	mov	r1, #1
   16674:	strb	r1, [r0, #26]
   16678:	bx	lr
   1667c:	mov	r1, #0
   16680:	strb	r1, [r0, #27]
   16684:	bx	lr
   16688:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1668c:	add	fp, sp, #28
   16690:	sub	sp, sp, #4
   16694:	vpush	{d8-d9}
   16698:	sub	sp, sp, #56	; 0x38
   1669c:	mov	r6, r3
   166a0:	mov	r4, r2
   166a4:	mov	r8, r1
   166a8:	mov	r1, #0
   166ac:	str	r1, [r3]
   166b0:	str	r0, [sp, #28]
   166b4:	ldr	r0, [r0]
   166b8:	mov	r1, #36	; 0x24
   166bc:	bl	22744 <flatcc_builder_start_table@@Base>
   166c0:	cmp	r0, #0
   166c4:	beq	166f4 <main@@Base+0x964>
   166c8:	ldr	r0, [sp, #28]
   166cc:	mov	r1, r8
   166d0:	mov	r2, r4
   166d4:	mov	r3, #33	; 0x21
   166d8:	bl	25fa0 <flatcc_json_parser_set_error@@Base>
   166dc:	mov	r8, r0
   166e0:	mov	r0, r8
   166e4:	sub	sp, fp, #48	; 0x30
   166e8:	vpop	{d8-d9}
   166ec:	add	sp, sp, #4
   166f0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   166f4:	add	r0, sp, #44	; 0x2c
   166f8:	str	r0, [sp]
   166fc:	ldr	r0, [sp, #28]
   16700:	mov	r1, r8
   16704:	mov	r2, r4
   16708:	mov	r3, #1
   1670c:	bl	279d0 <flatcc_json_parser_prepare_unions@@Base>
   16710:	cmp	r0, r4
   16714:	beq	166c8 <main@@Base+0x938>
   16718:	add	r3, sp, #52	; 0x34
   1671c:	ldr	r0, [sp, #28]
   16720:	mov	r1, r8
   16724:	mov	r2, r4
   16728:	bl	195e8 <main@@Base+0x3858>
   1672c:	mov	r8, r0
   16730:	ldr	r0, [sp, #52]	; 0x34
   16734:	cmp	r0, #0
   16738:	beq	18c08 <main@@Base+0x2e78>
   1673c:	vmov.f32	s16, #8	; 0x40400000  3.0
   16740:	vldr	s18, [pc, #936]	; 16af0 <main@@Base+0xd60>
   16744:	movw	r0, #13407	; 0x345f
   16748:	movt	r0, #29494	; 0x7336
   1674c:	sub	r0, r0, #512	; 0x200
   16750:	sub	r0, r0, #196608	; 0x30000
   16754:	add	r1, sp, #16
   16758:	stm	r1, {r0, r4, r6}
   1675c:	b	1679c <main@@Base+0xa0c>
   16760:	ldr	r0, [sp, #28]
   16764:	mov	r1, r9
   16768:	mov	r2, r4
   1676c:	bl	2669c <flatcc_json_parser_unmatched_symbol@@Base>
   16770:	mov	r8, r0
   16774:	add	r9, sp, #52	; 0x34
   16778:	ldr	r0, [sp, #28]
   1677c:	mov	r1, r8
   16780:	mov	r2, r4
   16784:	mov	r3, r9
   16788:	bl	1c5b0 <main@@Base+0x6820>
   1678c:	mov	r8, r0
   16790:	ldr	r0, [sp, #52]	; 0x34
   16794:	cmp	r0, #0
   16798:	beq	18c08 <main@@Base+0x2e78>
   1679c:	ldr	r0, [sp, #28]
   167a0:	mov	r1, r8
   167a4:	mov	r2, r4
   167a8:	bl	19678 <main@@Base+0x38e8>
   167ac:	mov	r9, r0
   167b0:	mov	r1, r4
   167b4:	bl	196a0 <main@@Base+0x3910>
   167b8:	mov	sl, r0
   167bc:	mov	r7, r1
   167c0:	movw	r0, #29281	; 0x7261
   167c4:	movt	r0, #24946	; 0x6172
   167c8:	subs	r0, sl, r0
   167cc:	movw	r3, #29556	; 0x7374
   167d0:	movt	r3, #29797	; 0x7465
   167d4:	sbcs	r0, r1, r3
   167d8:	bcs	16884 <main@@Base+0xaf4>
   167dc:	movw	r0, #28004	; 0x6d64
   167e0:	movt	r0, #28257	; 0x6e61
   167e4:	cmp	r7, r0
   167e8:	bhi	16a60 <main@@Base+0xcd0>
   167ec:	movw	r0, #25975	; 0x6577
   167f0:	movt	r0, #26220	; 0x666c
   167f4:	cmp	r7, r0
   167f8:	bhi	16b88 <main@@Base+0xdf8>
   167fc:	movw	r0, #27759	; 0x6c6f
   16800:	movt	r0, #25455	; 0x636f
   16804:	eor	r1, r7, r0
   16808:	and	r0, sl, #-16777216	; 0xff000000
   1680c:	eor	r2, r0, #1912602624	; 0x72000000
   16810:	orrs	r1, r2, r1
   16814:	beq	173a0 <main@@Base+0x1610>
   16818:	movw	r1, #25965	; 0x656d
   1681c:	movt	r1, #25966	; 0x656e
   16820:	eor	r1, r7, r1
   16824:	eor	r0, r0, #2030043136	; 0x79000000
   16828:	orrs	r0, r0, r1
   1682c:	bne	16760 <main@@Base+0x9d0>
   16830:	ldr	r0, [sp, #28]
   16834:	mov	r1, r9
   16838:	mov	r2, r4
   1683c:	mov	r3, #5
   16840:	bl	196a4 <main@@Base+0x3914>
   16844:	mov	r1, r0
   16848:	cmp	r9, r0
   1684c:	beq	178c0 <main@@Base+0x1b30>
   16850:	ldr	r0, [sp, #28]
   16854:	mov	r2, r4
   16858:	add	r3, sp, #48	; 0x30
   1685c:	bl	16688 <main@@Base+0x8f8>
   16860:	mov	r8, r0
   16864:	ldr	r0, [sp, #48]	; 0x30
   16868:	cmp	r0, #0
   1686c:	add	r9, sp, #52	; 0x34
   16870:	beq	166c8 <main@@Base+0x938>
   16874:	ldr	r0, [sp, #28]
   16878:	ldr	r0, [r0]
   1687c:	mov	r1, #12
   16880:	b	18ab4 <main@@Base+0x2d24>
   16884:	movw	r0, #0
   16888:	movt	r0, #26163	; 0x6633
   1688c:	subs	r0, sl, r0
   16890:	sbcs	r0, r7, r3
   16894:	bcs	16af4 <main@@Base+0xd64>
   16898:	movw	r0, #29281	; 0x7261
   1689c:	movt	r0, #24946	; 0x6172
   168a0:	eor	r1, sl, r0
   168a4:	eor	r0, r7, r3
   168a8:	orrs	r1, r1, r0
   168ac:	bne	16cf4 <main@@Base+0xf64>
   168b0:	add	r7, r9, #8
   168b4:	mov	r0, r7
   168b8:	mov	r1, r4
   168bc:	bl	196a0 <main@@Base+0x3910>
   168c0:	movw	r2, #26989	; 0x696d
   168c4:	movt	r2, #29810	; 0x7472
   168c8:	subs	r2, r2, r0
   168cc:	movw	r5, #26227	; 0x6673
   168d0:	movt	r5, #31087	; 0x796f
   168d4:	sbcs	r2, r5, r1
   168d8:	bcc	16f3c <main@@Base+0x11ac>
   168dc:	movw	r2, #29797	; 0x7465
   168e0:	movt	r2, #28530	; 0x6f72
   168e4:	eor	r2, r0, r2
   168e8:	eor	r3, r1, r5
   168ec:	orrs	r2, r2, r3
   168f0:	beq	178c8 <main@@Base+0x1b38>
   168f4:	movw	r2, #27763	; 0x6c73
   168f8:	movt	r2, #28527	; 0x6f6f
   168fc:	eor	r0, r0, r2
   16900:	movw	r2, #26210	; 0x6662
   16904:	movt	r2, #31087	; 0x796f
   16908:	eor	r1, r1, r2
   1690c:	orrs	r0, r0, r1
   16910:	bne	179bc <main@@Base+0x1c2c>
   16914:	ldr	r0, [sp, #28]
   16918:	mov	r1, r7
   1691c:	mov	r2, r4
   16920:	mov	r3, #8
   16924:	bl	196a4 <main@@Base+0x3914>
   16928:	mov	r8, r0
   1692c:	cmp	r7, r0
   16930:	add	r9, sp, #52	; 0x34
   16934:	beq	17ff4 <main@@Base+0x2264>
   16938:	ldr	r0, [sp, #28]
   1693c:	ldr	r0, [r0]
   16940:	mov	r1, #1
   16944:	mov	r2, #1
   16948:	mvn	r3, #0
   1694c:	bl	22470 <flatcc_builder_start_vector@@Base>
   16950:	cmp	r0, #0
   16954:	bne	166c8 <main@@Base+0x938>
   16958:	ldr	r0, [sp, #28]
   1695c:	mov	r1, r8
   16960:	mov	r2, r4
   16964:	mov	r3, r9
   16968:	bl	1a228 <main@@Base+0x4498>
   1696c:	mov	r8, r0
   16970:	ldr	r0, [sp, #52]	; 0x34
   16974:	cmp	r0, #0
   16978:	beq	16a38 <main@@Base+0xca8>
   1697c:	mov	r0, #0
   16980:	strb	r0, [sp, #32]
   16984:	ldr	r0, [sp, #28]
   16988:	ldr	r0, [r0]
   1698c:	mov	r1, #1
   16990:	bl	21e84 <flatcc_builder_extend_vector@@Base>
   16994:	cmp	r0, #0
   16998:	beq	166c8 <main@@Base+0x938>
   1699c:	mov	r7, r0
   169a0:	ldr	r0, [sp, #28]
   169a4:	mov	r1, r8
   169a8:	mov	r2, r4
   169ac:	mov	r5, r4
   169b0:	add	r4, sp, #32
   169b4:	mov	r3, r4
   169b8:	bl	1b1fc <main@@Base+0x546c>
   169bc:	mov	r6, r0
   169c0:	cmp	r8, r0
   169c4:	beq	169d4 <main@@Base+0xc44>
   169c8:	mov	r8, r6
   169cc:	mov	r4, r5
   169d0:	b	16a04 <main@@Base+0xc74>
   169d4:	str	r4, [sp]
   169d8:	ldr	r0, [sp, #28]
   169dc:	mov	r1, r6
   169e0:	mov	r2, r5
   169e4:	movw	r3, #32968	; 0x80c8
   169e8:	movt	r3, #4
   169ec:	bl	1b2b8 <main@@Base+0x5528>
   169f0:	mov	r8, r0
   169f4:	cmp	r0, r6
   169f8:	mov	r4, r5
   169fc:	cmpne	r8, r4
   16a00:	beq	166c8 <main@@Base+0x938>
   16a04:	ldrb	r1, [sp, #32]
   16a08:	mov	r0, r7
   16a0c:	bl	1b3d4 <main@@Base+0x5644>
   16a10:	ldr	r0, [sp, #28]
   16a14:	mov	r1, r8
   16a18:	mov	r2, r4
   16a1c:	mov	r3, r9
   16a20:	bl	1a484 <main@@Base+0x46f4>
   16a24:	mov	r8, r0
   16a28:	ldr	r0, [sp, #52]	; 0x34
   16a2c:	cmp	r0, #0
   16a30:	ldr	r6, [sp, #24]
   16a34:	bne	1697c <main@@Base+0xbec>
   16a38:	ldr	r0, [sp, #28]
   16a3c:	ldr	r0, [r0]
   16a40:	bl	230a8 <flatcc_builder_end_vector@@Base>
   16a44:	str	r0, [sp, #48]	; 0x30
   16a48:	cmp	r0, #0
   16a4c:	beq	166c8 <main@@Base+0x938>
   16a50:	ldr	r0, [sp, #28]
   16a54:	ldr	r0, [r0]
   16a58:	mov	r1, #24
   16a5c:	b	18ab4 <main@@Base+0x2d24>
   16a60:	movw	r0, #29555	; 0x7373
   16a64:	movt	r0, #29797	; 0x7465
   16a68:	cmp	r7, r0
   16a6c:	movw	r1, #29285	; 0x7265
   16a70:	movt	r1, #28769	; 0x7061
   16a74:	movw	r2, #24430	; 0x5f6e
   16a78:	movt	r2, #28276	; 0x6e74
   16a7c:	bhi	16dac <main@@Base+0x101c>
   16a80:	subs	r0, sl, r2
   16a84:	sbcs	r0, r7, r1
   16a88:	bcs	17054 <main@@Base+0x12c4>
   16a8c:	movw	r0, #28005	; 0x6d65
   16a90:	movt	r0, #28257	; 0x6e61
   16a94:	teq	r7, r0
   16a98:	bne	16760 <main@@Base+0x9d0>
   16a9c:	ldr	r0, [sp, #28]
   16aa0:	mov	r1, r9
   16aa4:	mov	r2, r4
   16aa8:	mov	r3, #4
   16aac:	bl	196a4 <main@@Base+0x3914>
   16ab0:	mov	r1, r0
   16ab4:	cmp	r9, r0
   16ab8:	beq	178c0 <main@@Base+0x1b30>
   16abc:	ldr	r0, [sp, #28]
   16ac0:	mov	r2, r4
   16ac4:	add	r3, sp, #48	; 0x30
   16ac8:	bl	2787c <flatcc_json_parser_build_string@@Base>
   16acc:	mov	r8, r0
   16ad0:	ldr	r0, [sp, #48]	; 0x30
   16ad4:	cmp	r0, #0
   16ad8:	add	r9, sp, #52	; 0x34
   16adc:	beq	166c8 <main@@Base+0x938>
   16ae0:	ldr	r0, [sp, #28]
   16ae4:	ldr	r0, [r0]
   16ae8:	mov	r1, #3
   16aec:	b	18ab4 <main@@Base+0x2d24>
   16af0:	ldmmi	r9, {r5, r6, r7, r8, sl, sp, lr}
   16af4:	movw	r1, #29544	; 0x7368
   16af8:	movt	r1, #26721	; 0x6861
   16afc:	subs	r0, sl, r1
   16b00:	sbcs	r0, r7, r3
   16b04:	bcs	16e8c <main@@Base+0x10fc>
   16b08:	eor	r0, r7, r3
   16b0c:	bfc	sl, #0, #16
   16b10:	movw	r1, #0
   16b14:	movt	r1, #26163	; 0x6633
   16b18:	eor	r1, sl, r1
   16b1c:	orrs	r0, r1, r0
   16b20:	bne	16760 <main@@Base+0x9d0>
   16b24:	ldr	r0, [sp, #28]
   16b28:	mov	r1, r9
   16b2c:	mov	r2, r4
   16b30:	mov	r3, #6
   16b34:	bl	196a4 <main@@Base+0x3914>
   16b38:	mov	r6, r0
   16b3c:	cmp	r9, r0
   16b40:	beq	17e7c <main@@Base+0x20ec>
   16b44:	mov	r0, #0
   16b48:	str	r0, [sp, #32]
   16b4c:	ldr	r0, [sp, #28]
   16b50:	mov	r1, r6
   16b54:	mov	r2, r4
   16b58:	mov	r5, r4
   16b5c:	add	r4, sp, #32
   16b60:	mov	r3, r4
   16b64:	bl	26cd0 <flatcc_json_parser_float@@Base>
   16b68:	mov	r7, r0
   16b6c:	cmp	r6, r0
   16b70:	add	r9, sp, #52	; 0x34
   16b74:	beq	17c70 <main@@Base+0x1ee0>
   16b78:	mov	r8, r7
   16b7c:	ldr	r6, [sp, #24]
   16b80:	mov	r4, r5
   16b84:	b	17ca4 <main@@Base+0x1f14>
   16b88:	movw	r0, #65535	; 0xffff
   16b8c:	movt	r0, #26735	; 0x686f
   16b90:	cmp	r7, r0
   16b94:	bhi	17118 <main@@Base+0x1388>
   16b98:	movw	r0, #25976	; 0x6578
   16b9c:	movt	r0, #26220	; 0x666c
   16ba0:	teq	r7, r0
   16ba4:	bne	16760 <main@@Base+0x9d0>
   16ba8:	ldr	r0, [sp, #28]
   16bac:	mov	r1, r9
   16bb0:	mov	r2, r4
   16bb4:	mov	r3, #4
   16bb8:	bl	196a4 <main@@Base+0x3914>
   16bbc:	mov	r8, r0
   16bc0:	cmp	r9, r0
   16bc4:	beq	17afc <main@@Base+0x1d6c>
   16bc8:	ldr	r0, [sp, #28]
   16bcc:	ldr	r0, [r0]
   16bd0:	mov	r1, #1
   16bd4:	mov	r2, #1
   16bd8:	mvn	r3, #0
   16bdc:	bl	22470 <flatcc_builder_start_vector@@Base>
   16be0:	cmp	r0, #0
   16be4:	add	r9, sp, #52	; 0x34
   16be8:	bne	166c8 <main@@Base+0x938>
   16bec:	ldr	r0, [sp, #28]
   16bf0:	mov	r1, r8
   16bf4:	mov	r2, r4
   16bf8:	mov	r3, r9
   16bfc:	bl	1a228 <main@@Base+0x4498>
   16c00:	mov	r8, r0
   16c04:	ldr	r0, [sp, #52]	; 0x34
   16c08:	cmp	r0, #0
   16c0c:	beq	16ccc <main@@Base+0xf3c>
   16c10:	mov	r0, #0
   16c14:	strb	r0, [sp, #32]
   16c18:	ldr	r0, [sp, #28]
   16c1c:	ldr	r0, [r0]
   16c20:	mov	r1, #1
   16c24:	bl	21e84 <flatcc_builder_extend_vector@@Base>
   16c28:	cmp	r0, #0
   16c2c:	beq	166c8 <main@@Base+0x938>
   16c30:	mov	r7, r0
   16c34:	ldr	r0, [sp, #28]
   16c38:	mov	r1, r8
   16c3c:	mov	r2, r4
   16c40:	mov	r5, r4
   16c44:	add	r4, sp, #32
   16c48:	mov	r3, r4
   16c4c:	bl	1a2b8 <main@@Base+0x4528>
   16c50:	mov	r6, r0
   16c54:	cmp	r8, r0
   16c58:	beq	16c68 <main@@Base+0xed8>
   16c5c:	mov	r8, r6
   16c60:	mov	r4, r5
   16c64:	b	16c98 <main@@Base+0xf08>
   16c68:	str	r4, [sp]
   16c6c:	ldr	r0, [sp, #28]
   16c70:	mov	r1, r6
   16c74:	mov	r2, r5
   16c78:	movw	r3, #32904	; 0x8088
   16c7c:	movt	r3, #4
   16c80:	bl	1a348 <main@@Base+0x45b8>
   16c84:	mov	r8, r0
   16c88:	cmp	r0, r6
   16c8c:	mov	r4, r5
   16c90:	cmpne	r8, r4
   16c94:	beq	166c8 <main@@Base+0x938>
   16c98:	ldrb	r1, [sp, #32]
   16c9c:	mov	r0, r7
   16ca0:	bl	1a464 <main@@Base+0x46d4>
   16ca4:	ldr	r0, [sp, #28]
   16ca8:	mov	r1, r8
   16cac:	mov	r2, r4
   16cb0:	mov	r3, r9
   16cb4:	bl	1a484 <main@@Base+0x46f4>
   16cb8:	mov	r8, r0
   16cbc:	ldr	r0, [sp, #52]	; 0x34
   16cc0:	cmp	r0, #0
   16cc4:	ldr	r6, [sp, #24]
   16cc8:	bne	16c10 <main@@Base+0xe80>
   16ccc:	ldr	r0, [sp, #28]
   16cd0:	ldr	r0, [r0]
   16cd4:	bl	230a8 <flatcc_builder_end_vector@@Base>
   16cd8:	str	r0, [sp, #48]	; 0x30
   16cdc:	cmp	r0, #0
   16ce0:	beq	166c8 <main@@Base+0x938>
   16ce4:	ldr	r0, [sp, #28]
   16ce8:	ldr	r0, [r0]
   16cec:	mov	r1, #30
   16cf0:	b	18ab4 <main@@Base+0x2d24>
   16cf4:	movw	r1, #28788	; 0x7074
   16cf8:	movt	r1, #25965	; 0x656d
   16cfc:	subs	r1, sl, r1
   16d00:	sbcs	r1, r7, r3
   16d04:	bcs	171a8 <main@@Base+0x1418>
   16d08:	movw	r1, #28524	; 0x6f6c
   16d0c:	movt	r1, #25199	; 0x626f
   16d10:	eor	r1, sl, r1
   16d14:	orrs	r1, r1, r0
   16d18:	beq	179c4 <main@@Base+0x1c34>
   16d1c:	movw	r1, #29541	; 0x7365
   16d20:	movt	r1, #25185	; 0x6261
   16d24:	eor	r1, sl, r1
   16d28:	orrs	r0, r1, r0
   16d2c:	bne	16760 <main@@Base+0x9d0>
   16d30:	add	r6, r9, #8
   16d34:	mov	r0, r6
   16d38:	mov	r1, r4
   16d3c:	bl	196a0 <main@@Base+0x3910>
   16d40:	bfc	r1, #0, #16
   16d44:	movw	r0, #0
   16d48:	movt	r0, #13876	; 0x3634
   16d4c:	teq	r1, r0
   16d50:	bne	17e7c <main@@Base+0x20ec>
   16d54:	ldr	r0, [sp, #28]
   16d58:	mov	r1, r6
   16d5c:	mov	r2, r4
   16d60:	mov	r3, #2
   16d64:	bl	196a4 <main@@Base+0x3914>
   16d68:	mov	r1, r0
   16d6c:	cmp	r6, r0
   16d70:	add	r9, sp, #52	; 0x34
   16d74:	beq	17ea4 <main@@Base+0x2114>
   16d78:	ldr	r0, [sp, #28]
   16d7c:	mov	r2, r4
   16d80:	add	r3, sp, #48	; 0x30
   16d84:	bl	1b614 <main@@Base+0x5884>
   16d88:	mov	r8, r0
   16d8c:	ldr	r0, [sp, #48]	; 0x30
   16d90:	cmp	r0, #0
   16d94:	ldr	r6, [sp, #24]
   16d98:	beq	166c8 <main@@Base+0x938>
   16d9c:	ldr	r0, [sp, #28]
   16da0:	ldr	r0, [r0]
   16da4:	mov	r1, #35	; 0x23
   16da8:	b	18ab4 <main@@Base+0x2d24>
   16dac:	eor	r6, r7, r3
   16db0:	and	r4, sl, #-16777216	; 0xff000000
   16db4:	eor	r0, r4, #872415232	; 0x34000000
   16db8:	orrs	r0, r0, r6
   16dbc:	bne	17240 <main@@Base+0x14b0>
   16dc0:	ldr	r0, [sp, #28]
   16dc4:	mov	r1, r9
   16dc8:	ldr	r4, [sp, #20]
   16dcc:	mov	r2, r4
   16dd0:	mov	r3, #5
   16dd4:	bl	196a4 <main@@Base+0x3914>
   16dd8:	mov	r8, r0
   16ddc:	cmp	r9, r0
   16de0:	beq	17de0 <main@@Base+0x2050>
   16de4:	ldr	r0, [sp, #28]
   16de8:	ldr	r0, [r0]
   16dec:	mov	r1, #4
   16df0:	mov	r2, #2
   16df4:	mvn	r3, #-1073741824	; 0xc0000000
   16df8:	bl	22470 <flatcc_builder_start_vector@@Base>
   16dfc:	cmp	r0, #0
   16e00:	bne	166c8 <main@@Base+0x938>
   16e04:	ldr	r5, [sp, #28]
   16e08:	mov	r0, r5
   16e0c:	mov	r1, r8
   16e10:	mov	r2, r4
   16e14:	add	r9, sp, #52	; 0x34
   16e18:	mov	r3, r9
   16e1c:	bl	1a228 <main@@Base+0x4498>
   16e20:	mov	r8, r0
   16e24:	ldr	r0, [r5]
   16e28:	ldr	r1, [sp, #52]	; 0x34
   16e2c:	cmp	r1, #0
   16e30:	beq	17cd4 <main@@Base+0x1f44>
   16e34:	ldr	r6, [sp, #24]
   16e38:	mov	r1, #1
   16e3c:	bl	21e84 <flatcc_builder_extend_vector@@Base>
   16e40:	cmp	r0, #0
   16e44:	beq	166c8 <main@@Base+0x938>
   16e48:	mov	r3, r0
   16e4c:	ldr	r5, [sp, #28]
   16e50:	mov	r0, r5
   16e54:	mov	r1, r8
   16e58:	mov	r2, r4
   16e5c:	bl	1ac98 <main@@Base+0x4f08>
   16e60:	mov	r1, r0
   16e64:	mov	r0, r5
   16e68:	mov	r2, r4
   16e6c:	mov	r3, r9
   16e70:	bl	1a484 <main@@Base+0x46f4>
   16e74:	mov	r8, r0
   16e78:	ldr	r0, [r5]
   16e7c:	ldr	r1, [sp, #52]	; 0x34
   16e80:	cmp	r1, #0
   16e84:	bne	16e38 <main@@Base+0x10a8>
   16e88:	b	17cd8 <main@@Base+0x1f48>
   16e8c:	eor	r1, sl, r1
   16e90:	eor	r0, r7, r3
   16e94:	orrs	r1, r1, r0
   16e98:	bne	172ac <main@@Base+0x151c>
   16e9c:	add	r7, r9, #8
   16ea0:	mov	r0, r7
   16ea4:	mov	r1, r4
   16ea8:	bl	196a0 <main@@Base+0x3910>
   16eac:	movw	r3, #30257	; 0x7631
   16eb0:	movt	r3, #26222	; 0x666e
   16eb4:	subs	r2, r0, r3
   16eb8:	movw	r2, #13407	; 0x345f
   16ebc:	movt	r2, #29494	; 0x7336
   16ec0:	sbcs	r2, r1, r2
   16ec4:	bcs	173fc <main@@Base+0x166c>
   16ec8:	eor	r0, r0, r3
   16ecc:	ldr	r2, [sp, #16]
   16ed0:	eor	r1, r1, r2
   16ed4:	orrs	r0, r0, r1
   16ed8:	add	r9, sp, #52	; 0x34
   16edc:	bne	18184 <main@@Base+0x23f4>
   16ee0:	ldr	r0, [sp, #28]
   16ee4:	mov	r1, r7
   16ee8:	mov	r2, r4
   16eec:	mov	r3, #8
   16ef0:	bl	196a4 <main@@Base+0x3914>
   16ef4:	mov	r6, r0
   16ef8:	cmp	r7, r0
   16efc:	beq	181a8 <main@@Base+0x2418>
   16f00:	mov	r0, #0
   16f04:	str	r0, [sp, #32]
   16f08:	ldr	r0, [sp, #28]
   16f0c:	mov	r1, r6
   16f10:	mov	r2, r4
   16f14:	mov	r5, r4
   16f18:	add	r4, sp, #32
   16f1c:	mov	r3, r4
   16f20:	bl	1bd1c <main@@Base+0x5f8c>
   16f24:	mov	r7, r0
   16f28:	cmp	r6, r0
   16f2c:	beq	18400 <main@@Base+0x2670>
   16f30:	mov	r8, r7
   16f34:	mov	r4, r5
   16f38:	b	18430 <main@@Base+0x26a0>
   16f3c:	movw	r2, #27749	; 0x6c65
   16f40:	movt	r2, #24930	; 0x6162
   16f44:	eor	r2, r0, r2
   16f48:	movw	r3, #26228	; 0x6674
   16f4c:	movt	r3, #31087	; 0x796f
   16f50:	eor	r3, r1, r3
   16f54:	orrs	r2, r2, r3
   16f58:	beq	17a24 <main@@Base+0x1c94>
   16f5c:	movw	r2, #26990	; 0x696e
   16f60:	movt	r2, #29810	; 0x7472
   16f64:	eor	r0, r0, r2
   16f68:	eor	r1, r1, r5
   16f6c:	orrs	r0, r0, r1
   16f70:	bne	179b0 <main@@Base+0x1c20>
   16f74:	add	r7, r9, #16
   16f78:	mov	r0, r7
   16f7c:	mov	r1, r4
   16f80:	bl	196a0 <main@@Base+0x3910>
   16f84:	mov	r0, r1
   16f88:	bfc	r0, #0, #16
   16f8c:	movw	r2, #0
   16f90:	movt	r2, #26418	; 0x6732
   16f94:	teq	r0, r2
   16f98:	bne	17eac <main@@Base+0x211c>
   16f9c:	ldr	r0, [sp, #28]
   16fa0:	mov	r1, r7
   16fa4:	mov	r2, r4
   16fa8:	mov	r3, #2
   16fac:	bl	196a4 <main@@Base+0x3914>
   16fb0:	mov	r8, r0
   16fb4:	cmp	r7, r0
   16fb8:	add	r9, sp, #52	; 0x34
   16fbc:	beq	1819c <main@@Base+0x240c>
   16fc0:	ldr	r0, [sp, #28]
   16fc4:	ldr	r0, [r0]
   16fc8:	bl	22500 <flatcc_builder_start_offset_vector@@Base>
   16fcc:	cmp	r0, #0
   16fd0:	bne	166c8 <main@@Base+0x938>
   16fd4:	ldr	r0, [sp, #28]
   16fd8:	mov	r1, r8
   16fdc:	mov	r2, r4
   16fe0:	mov	r3, r9
   16fe4:	bl	1a228 <main@@Base+0x4498>
   16fe8:	mov	r8, r0
   16fec:	ldr	r0, [sp, #52]	; 0x34
   16ff0:	cmp	r0, #0
   16ff4:	beq	18544 <main@@Base+0x27b4>
   16ff8:	ldr	r0, [sp, #28]
   16ffc:	mov	r1, r8
   17000:	mov	r2, r4
   17004:	add	r3, sp, #48	; 0x30
   17008:	bl	2787c <flatcc_json_parser_build_string@@Base>
   1700c:	mov	r8, r0
   17010:	ldr	r0, [sp, #48]	; 0x30
   17014:	cmp	r0, #0
   17018:	beq	166c8 <main@@Base+0x938>
   1701c:	ldr	r0, [sp, #28]
   17020:	ldr	r0, [r0]
   17024:	mov	r1, #1
   17028:	bl	2204c <flatcc_builder_extend_offset_vector@@Base>
   1702c:	cmp	r0, #0
   17030:	beq	166c8 <main@@Base+0x938>
   17034:	ldr	r1, [sp, #48]	; 0x30
   17038:	str	r1, [r0]
   1703c:	ldr	r0, [sp, #28]
   17040:	mov	r1, r8
   17044:	mov	r2, r4
   17048:	mov	r3, r9
   1704c:	bl	1a484 <main@@Base+0x46f4>
   17050:	b	16fe8 <main@@Base+0x1258>
   17054:	eor	r0, sl, r2
   17058:	eor	r1, r7, r1
   1705c:	orrs	r0, r0, r1
   17060:	bne	17494 <main@@Base+0x1704>
   17064:	add	r6, r9, #8
   17068:	mov	r0, r6
   1706c:	mov	r1, r4
   17070:	bl	196a0 <main@@Base+0x3910>
   17074:	movw	r2, #25971	; 0x6573
   17078:	movt	r2, #24941	; 0x616d
   1707c:	eor	r1, r1, r2
   17080:	movw	r2, #25445	; 0x6365
   17084:	movt	r2, #28769	; 0x7061
   17088:	eor	r0, r0, r2
   1708c:	orrs	r0, r0, r1
   17090:	bne	17e7c <main@@Base+0x20ec>
   17094:	add	r7, r9, #16
   17098:	mov	r0, r7
   1709c:	mov	r1, r4
   170a0:	bl	196a0 <main@@Base+0x3910>
   170a4:	movw	r2, #25971	; 0x6573
   170a8:	movt	r2, #24436	; 0x5f74
   170ac:	eor	r1, r1, r2
   170b0:	and	r0, r0, #-16777216	; 0xff000000
   170b4:	eor	r0, r0, #1946157056	; 0x74000000
   170b8:	orrs	r0, r0, r1
   170bc:	bne	17ffc <main@@Base+0x226c>
   170c0:	ldr	r0, [sp, #28]
   170c4:	mov	r1, r7
   170c8:	mov	r2, r4
   170cc:	mov	r3, #5
   170d0:	bl	196a4 <main@@Base+0x3914>
   170d4:	mov	r1, r0
   170d8:	cmp	r7, r0
   170dc:	ldr	r6, [sp, #24]
   170e0:	add	r9, sp, #52	; 0x34
   170e4:	beq	18594 <main@@Base+0x2804>
   170e8:	ldr	r0, [sp, #28]
   170ec:	mov	r2, r4
   170f0:	add	r3, sp, #48	; 0x30
   170f4:	bl	1a710 <main@@Base+0x4980>
   170f8:	mov	r8, r0
   170fc:	ldr	r0, [sp, #48]	; 0x30
   17100:	cmp	r0, #0
   17104:	beq	166c8 <main@@Base+0x938>
   17108:	ldr	r0, [sp, #28]
   1710c:	ldr	r0, [r0]
   17110:	mov	r1, #34	; 0x22
   17114:	b	18ab4 <main@@Base+0x2d24>
   17118:	movw	r2, #28530	; 0x6f72
   1711c:	movt	r2, #28276	; 0x6e74
   17120:	subs	r0, sl, r2
   17124:	movw	r1, #30309	; 0x7665
   17128:	movt	r1, #26990	; 0x696e
   1712c:	sbcs	r0, r7, r1
   17130:	bcs	17508 <main@@Base+0x1778>
   17134:	bfc	r7, #0, #16
   17138:	movw	r0, #0
   1713c:	movt	r0, #26736	; 0x6870
   17140:	teq	r7, r0
   17144:	bne	16760 <main@@Base+0x9d0>
   17148:	ldr	r0, [sp, #28]
   1714c:	mov	r1, r9
   17150:	mov	r2, r4
   17154:	mov	r3, #2
   17158:	bl	196a4 <main@@Base+0x3914>
   1715c:	mov	r6, r0
   17160:	cmp	r9, r0
   17164:	beq	17e7c <main@@Base+0x20ec>
   17168:	mov	r0, #0
   1716c:	strh	r0, [sp, #32]
   17170:	ldr	r0, [sp, #28]
   17174:	mov	r1, r6
   17178:	mov	r2, r4
   1717c:	mov	r5, r4
   17180:	add	r4, sp, #32
   17184:	mov	r3, r4
   17188:	bl	1a544 <main@@Base+0x47b4>
   1718c:	mov	r7, r0
   17190:	cmp	r6, r0
   17194:	add	r9, sp, #52	; 0x34
   17198:	beq	18478 <main@@Base+0x26e8>
   1719c:	mov	r8, r7
   171a0:	ldr	r6, [sp, #24]
   171a4:	b	184ac <main@@Base+0x271c>
   171a8:	mvn	r1, #-1711276032	; 0x9a000000
   171ac:	subs	r1, r1, sl
   171b0:	sbcs	r1, r3, r7
   171b4:	bcc	17684 <main@@Base+0x18f4>
   171b8:	movw	r1, #28788	; 0x7074
   171bc:	movt	r1, #25965	; 0x656d
   171c0:	eor	r1, sl, r1
   171c4:	orrs	r0, r1, r0
   171c8:	bne	16760 <main@@Base+0x9d0>
   171cc:	add	r6, r9, #8
   171d0:	mov	r0, r6
   171d4:	mov	r1, r4
   171d8:	bl	196a0 <main@@Base+0x3910>
   171dc:	and	r0, r1, #-16777216	; 0xff000000
   171e0:	teq	r0, #2030043136	; 0x79000000
   171e4:	bne	17e7c <main@@Base+0x20ec>
   171e8:	ldr	r0, [sp, #28]
   171ec:	mov	r1, r6
   171f0:	mov	r2, r4
   171f4:	mov	r3, #1
   171f8:	bl	196a4 <main@@Base+0x3914>
   171fc:	mov	r1, r0
   17200:	cmp	r6, r0
   17204:	add	r9, sp, #52	; 0x34
   17208:	beq	17ea4 <main@@Base+0x2114>
   1720c:	ldr	r0, [sp, #28]
   17210:	mov	r2, r4
   17214:	add	r3, sp, #48	; 0x30
   17218:	bl	1b894 <main@@Base+0x5b04>
   1721c:	mov	r8, r0
   17220:	ldr	r0, [sp, #48]	; 0x30
   17224:	cmp	r0, #0
   17228:	ldr	r6, [sp, #24]
   1722c:	beq	166c8 <main@@Base+0x938>
   17230:	ldr	r0, [sp, #28]
   17234:	ldr	r0, [r0]
   17238:	mov	r1, #14
   1723c:	b	18ab4 <main@@Base+0x2d24>
   17240:	teq	r7, r3
   17244:	bne	17d04 <main@@Base+0x1f74>
   17248:	ldr	r8, [sp, #28]
   1724c:	mov	r0, r8
   17250:	mov	r1, r9
   17254:	ldr	r5, [sp, #20]
   17258:	mov	r2, r5
   1725c:	mov	r3, #4
   17260:	bl	196a4 <main@@Base+0x3914>
   17264:	mov	r1, r0
   17268:	cmp	r9, r0
   1726c:	beq	17cf8 <main@@Base+0x1f68>
   17270:	ldr	r0, [sp, #44]	; 0x2c
   17274:	mov	r2, #8
   17278:	str	r2, [sp]
   1727c:	str	r0, [sp, #4]
   17280:	movw	r0, #44712	; 0xaea8
   17284:	movt	r0, #1
   17288:	str	r0, [sp, #8]
   1728c:	mov	r0, r8
   17290:	mov	r2, r5
   17294:	mov	r3, #0
   17298:	bl	27a98 <flatcc_json_parser_union@@Base>
   1729c:	mov	r8, r0
   172a0:	mov	r4, r5
   172a4:	ldr	r6, [sp, #24]
   172a8:	b	16774 <main@@Base+0x9e4>
   172ac:	movw	r3, #24431	; 0x5f6f
   172b0:	movt	r3, #28530	; 0x6f72
   172b4:	subs	r1, sl, r3
   172b8:	movw	r2, #25460	; 0x6374
   172bc:	movt	r2, #30309	; 0x7665
   172c0:	sbcs	r1, r7, r2
   172c4:	bcs	17710 <main@@Base+0x1980>
   172c8:	movw	r1, #29556	; 0x7374
   172cc:	movt	r1, #28261	; 0x6e65
   172d0:	eor	r1, sl, r1
   172d4:	orrs	r0, r1, r0
   172d8:	bne	16760 <main@@Base+0x9d0>
   172dc:	add	r6, r9, #8
   172e0:	mov	r0, r6
   172e4:	mov	r1, r4
   172e8:	bl	196a0 <main@@Base+0x3910>
   172ec:	movw	r2, #26220	; 0x666c
   172f0:	movt	r2, #25956	; 0x6564
   172f4:	eor	r1, r1, r2
   172f8:	movw	r2, #25205	; 0x6275
   172fc:	movt	r2, #24948	; 0x6174
   17300:	eor	r0, r0, r2
   17304:	orrs	r0, r0, r1
   17308:	bne	17e7c <main@@Base+0x20ec>
   1730c:	add	r6, r9, #16
   17310:	mov	r0, r6
   17314:	mov	r1, r4
   17318:	bl	196a0 <main@@Base+0x3910>
   1731c:	movw	r0, #25970	; 0x6572
   17320:	movt	r0, #26214	; 0x6666
   17324:	teq	r1, r0
   17328:	bne	17e7c <main@@Base+0x20ec>
   1732c:	ldr	r0, [sp, #28]
   17330:	mov	r1, r6
   17334:	mov	r2, r4
   17338:	mov	r3, #4
   1733c:	bl	196a4 <main@@Base+0x3914>
   17340:	mov	r8, r0
   17344:	cmp	r6, r0
   17348:	add	r9, sp, #52	; 0x34
   1734c:	beq	17fe8 <main@@Base+0x2258>
   17350:	cmp	r8, r4
   17354:	ldr	r6, [sp, #24]
   17358:	beq	188e4 <main@@Base+0x2b54>
   1735c:	ldrb	r0, [r8]
   17360:	cmp	r0, #91	; 0x5b
   17364:	bne	188e4 <main@@Base+0x2b54>
   17368:	ldr	r0, [sp, #28]
   1736c:	ldr	r0, [r0]
   17370:	mov	r1, #1
   17374:	mov	r2, #1
   17378:	mvn	r3, #0
   1737c:	bl	22470 <flatcc_builder_start_vector@@Base>
   17380:	cmp	r0, #0
   17384:	bne	166c8 <main@@Base+0x938>
   17388:	ldr	r0, [sp, #28]
   1738c:	mov	r1, r8
   17390:	mov	r2, r4
   17394:	mov	r3, r9
   17398:	bl	1a228 <main@@Base+0x4498>
   1739c:	b	18368 <main@@Base+0x25d8>
   173a0:	ldr	r0, [sp, #28]
   173a4:	mov	r1, r9
   173a8:	mov	r2, r4
   173ac:	mov	r3, #5
   173b0:	bl	196a4 <main@@Base+0x3914>
   173b4:	mov	r6, r0
   173b8:	cmp	r9, r0
   173bc:	beq	17e7c <main@@Base+0x20ec>
   173c0:	mov	r0, #0
   173c4:	strb	r0, [sp, #32]
   173c8:	ldr	r0, [sp, #28]
   173cc:	mov	r1, r6
   173d0:	mov	r2, r4
   173d4:	add	r8, sp, #32
   173d8:	mov	r3, r8
   173dc:	bl	1a05c <main@@Base+0x42cc>
   173e0:	mov	r7, r0
   173e4:	cmp	r6, r0
   173e8:	add	r9, sp, #52	; 0x34
   173ec:	beq	17f70 <main@@Base+0x21e0>
   173f0:	mov	r8, r7
   173f4:	ldr	r6, [sp, #24]
   173f8:	b	17fa0 <main@@Base+0x2210>
   173fc:	movw	r2, #30256	; 0x7630
   17400:	movt	r2, #26222	; 0x666e
   17404:	subs	r2, r2, r0
   17408:	movw	r2, #12895	; 0x325f
   1740c:	movt	r2, #30003	; 0x7533
   17410:	sbcs	r2, r2, r1
   17414:	add	r9, sp, #52	; 0x34
   17418:	eor	r0, r0, r3
   1741c:	bcc	17b08 <main@@Base+0x1d78>
   17420:	movw	r2, #13407	; 0x345f
   17424:	movt	r2, #29494	; 0x7336
   17428:	eor	r1, r1, r2
   1742c:	orrs	r0, r0, r1
   17430:	bne	18184 <main@@Base+0x23f4>
   17434:	ldr	r0, [sp, #28]
   17438:	mov	r1, r7
   1743c:	mov	r2, r4
   17440:	mov	r3, #8
   17444:	bl	196a4 <main@@Base+0x3914>
   17448:	mov	r6, r0
   1744c:	cmp	r7, r0
   17450:	beq	1859c <main@@Base+0x280c>
   17454:	mov	r0, #0
   17458:	str	r0, [sp, #36]	; 0x24
   1745c:	str	r0, [sp, #32]
   17460:	ldr	r0, [sp, #28]
   17464:	mov	r1, r6
   17468:	mov	r2, r4
   1746c:	mov	r5, r4
   17470:	add	r4, sp, #32
   17474:	mov	r3, r4
   17478:	bl	1bee8 <main@@Base+0x6158>
   1747c:	mov	r7, r0
   17480:	cmp	r6, r0
   17484:	beq	18734 <main@@Base+0x29a4>
   17488:	mov	r8, r7
   1748c:	mov	r4, r5
   17490:	b	18764 <main@@Base+0x29d4>
   17494:	bic	r0, r7, #255	; 0xff
   17498:	movw	r1, #29440	; 0x7300
   1749c:	movt	r1, #28783	; 0x706f
   174a0:	teq	r0, r1
   174a4:	bne	16760 <main@@Base+0x9d0>
   174a8:	ldr	r0, [sp, #28]
   174ac:	mov	r1, r9
   174b0:	mov	r2, r4
   174b4:	mov	r3, #3
   174b8:	bl	196a4 <main@@Base+0x3914>
   174bc:	mov	r8, r0
   174c0:	cmp	r9, r0
   174c4:	beq	17afc <main@@Base+0x1d6c>
   174c8:	ldr	r0, [sp, #28]
   174cc:	ldr	r0, [r0]
   174d0:	mov	r1, #0
   174d4:	mov	r2, #32
   174d8:	mov	r3, #16
   174dc:	bl	23540 <flatcc_builder_table_add@@Base>
   174e0:	cmp	r0, #0
   174e4:	add	r9, sp, #52	; 0x34
   174e8:	beq	166c8 <main@@Base+0x938>
   174ec:	mov	r3, r0
   174f0:	ldr	r0, [sp, #28]
   174f4:	mov	r1, r8
   174f8:	mov	r2, r4
   174fc:	bl	1a7f8 <main@@Base+0x4a68>
   17500:	mov	r8, r0
   17504:	b	16778 <main@@Base+0x9e8>
   17508:	eor	r0, sl, r2
   1750c:	eor	r1, r7, r1
   17510:	orrs	r0, r0, r1
   17514:	bne	17b8c <main@@Base+0x1dfc>
   17518:	add	r6, r9, #8
   1751c:	mov	r0, r6
   17520:	mov	r1, r4
   17524:	bl	196a0 <main@@Base+0x3910>
   17528:	and	r0, r1, #-16777216	; 0xff000000
   1752c:	teq	r0, #2030043136	; 0x79000000
   17530:	bne	17e7c <main@@Base+0x20ec>
   17534:	ldr	r0, [sp, #28]
   17538:	mov	r1, r6
   1753c:	mov	r2, r4
   17540:	mov	r3, #1
   17544:	bl	196a4 <main@@Base+0x3914>
   17548:	mov	r8, r0
   1754c:	cmp	r6, r0
   17550:	add	r9, sp, #52	; 0x34
   17554:	beq	17fe8 <main@@Base+0x2258>
   17558:	ldr	r0, [sp, #28]
   1755c:	ldr	r0, [r0]
   17560:	mov	r1, #1
   17564:	mov	r2, #1
   17568:	mvn	r3, #0
   1756c:	bl	22470 <flatcc_builder_start_vector@@Base>
   17570:	cmp	r0, #0
   17574:	ldr	r6, [sp, #24]
   17578:	bne	166c8 <main@@Base+0x938>
   1757c:	ldr	r0, [sp, #28]
   17580:	mov	r1, r8
   17584:	mov	r2, r4
   17588:	mov	r3, r9
   1758c:	bl	1a228 <main@@Base+0x4498>
   17590:	mov	r8, r0
   17594:	ldr	r0, [sp, #52]	; 0x34
   17598:	cmp	r0, #0
   1759c:	beq	1765c <main@@Base+0x18cc>
   175a0:	mov	r0, #0
   175a4:	strb	r0, [sp, #32]
   175a8:	ldr	r0, [sp, #28]
   175ac:	ldr	r0, [r0]
   175b0:	mov	r1, #1
   175b4:	bl	21e84 <flatcc_builder_extend_vector@@Base>
   175b8:	cmp	r0, #0
   175bc:	beq	166c8 <main@@Base+0x938>
   175c0:	mov	r7, r0
   175c4:	ldr	r0, [sp, #28]
   175c8:	mov	r1, r8
   175cc:	mov	r2, r4
   175d0:	mov	r5, r4
   175d4:	add	r4, sp, #32
   175d8:	mov	r3, r4
   175dc:	bl	1a2b8 <main@@Base+0x4528>
   175e0:	mov	r6, r0
   175e4:	cmp	r8, r0
   175e8:	beq	175f8 <main@@Base+0x1868>
   175ec:	mov	r8, r6
   175f0:	mov	r4, r5
   175f4:	b	17628 <main@@Base+0x1898>
   175f8:	str	r4, [sp]
   175fc:	ldr	r0, [sp, #28]
   17600:	mov	r1, r6
   17604:	mov	r2, r5
   17608:	movw	r3, #32928	; 0x80a0
   1760c:	movt	r3, #4
   17610:	bl	1a348 <main@@Base+0x45b8>
   17614:	mov	r8, r0
   17618:	cmp	r0, r6
   1761c:	mov	r4, r5
   17620:	cmpne	r8, r4
   17624:	beq	166c8 <main@@Base+0x938>
   17628:	ldrb	r1, [sp, #32]
   1762c:	mov	r0, r7
   17630:	bl	1a464 <main@@Base+0x46d4>
   17634:	ldr	r0, [sp, #28]
   17638:	mov	r1, r8
   1763c:	mov	r2, r4
   17640:	mov	r3, r9
   17644:	bl	1a484 <main@@Base+0x46f4>
   17648:	mov	r8, r0
   1764c:	ldr	r0, [sp, #52]	; 0x34
   17650:	cmp	r0, #0
   17654:	ldr	r6, [sp, #24]
   17658:	bne	175a0 <main@@Base+0x1810>
   1765c:	ldr	r0, [sp, #28]
   17660:	ldr	r0, [r0]
   17664:	bl	230a8 <flatcc_builder_end_vector@@Base>
   17668:	str	r0, [sp, #48]	; 0x30
   1766c:	cmp	r0, #0
   17670:	beq	166c8 <main@@Base+0x938>
   17674:	ldr	r0, [sp, #28]
   17678:	ldr	r0, [r0]
   1767c:	mov	r1, #5
   17680:	b	18ab4 <main@@Base+0x2d24>
   17684:	mov	r1, sl
   17688:	bfc	r1, #0, #16
   1768c:	movw	r2, #0
   17690:	movt	r2, #26163	; 0x6633
   17694:	subs	r2, r2, #65536	; 0x10000
   17698:	eor	r1, r1, r2
   1769c:	sbc	r2, r3, #0
   176a0:	eor	r2, r7, r2
   176a4:	orrs	r1, r1, r2
   176a8:	bne	17bfc <main@@Base+0x1e6c>
   176ac:	ldr	r0, [sp, #28]
   176b0:	mov	r1, r9
   176b4:	mov	r2, r4
   176b8:	mov	r3, #6
   176bc:	bl	196a4 <main@@Base+0x3914>
   176c0:	mov	r6, r0
   176c4:	cmp	r9, r0
   176c8:	beq	17e7c <main@@Base+0x20ec>
   176cc:	mov	r0, #0
   176d0:	str	r0, [sp, #32]
   176d4:	ldr	r0, [sp, #28]
   176d8:	mov	r1, r6
   176dc:	mov	r2, r4
   176e0:	mov	r9, r4
   176e4:	add	r4, sp, #32
   176e8:	mov	r3, r4
   176ec:	bl	26cd0 <flatcc_json_parser_float@@Base>
   176f0:	mov	r7, r0
   176f4:	cmp	r6, r0
   176f8:	beq	184d8 <main@@Base+0x2748>
   176fc:	mov	r8, r7
   17700:	ldr	r6, [sp, #24]
   17704:	mov	r4, r9
   17708:	add	r9, sp, #52	; 0x34
   1770c:	b	18514 <main@@Base+0x2784>
   17710:	eor	r0, sl, r3
   17714:	eor	r1, r7, r2
   17718:	orrs	r0, r0, r1
   1771c:	bne	16760 <main@@Base+0x9d0>
   17720:	add	r7, r9, #8
   17724:	mov	r0, r7
   17728:	mov	r1, r4
   1772c:	bl	196a0 <main@@Base+0x3910>
   17730:	movw	r2, #25711	; 0x646f
   17734:	movt	r2, #26207	; 0x665f
   17738:	eor	r2, r1, r2
   1773c:	movw	r3, #27749	; 0x6c65
   17740:	movt	r3, #30050	; 0x7562
   17744:	eor	r3, r0, r3
   17748:	orrs	r2, r3, r2
   1774c:	bne	18008 <main@@Base+0x2278>
   17750:	add	r6, r9, #16
   17754:	mov	r0, r6
   17758:	mov	r1, r4
   1775c:	bl	196a0 <main@@Base+0x3910>
   17760:	and	r0, r1, #-16777216	; 0xff000000
   17764:	teq	r0, #1929379840	; 0x73000000
   17768:	bne	17e7c <main@@Base+0x20ec>
   1776c:	ldr	r0, [sp, #28]
   17770:	mov	r1, r6
   17774:	mov	r2, r4
   17778:	mov	r3, #1
   1777c:	bl	196a4 <main@@Base+0x3914>
   17780:	mov	r8, r0
   17784:	cmp	r6, r0
   17788:	add	r9, sp, #52	; 0x34
   1778c:	beq	17fe8 <main@@Base+0x2258>
   17790:	ldr	r0, [sp, #28]
   17794:	ldr	r0, [r0]
   17798:	mov	r1, #8
   1779c:	mov	r2, #8
   177a0:	mvn	r3, #-536870912	; 0xe0000000
   177a4:	bl	22470 <flatcc_builder_start_vector@@Base>
   177a8:	cmp	r0, #0
   177ac:	ldr	r6, [sp, #24]
   177b0:	bne	166c8 <main@@Base+0x938>
   177b4:	ldr	r0, [sp, #28]
   177b8:	mov	r1, r8
   177bc:	mov	r2, r4
   177c0:	mov	r3, r9
   177c4:	bl	1a228 <main@@Base+0x4498>
   177c8:	mov	r8, r0
   177cc:	ldr	r0, [sp, #52]	; 0x34
   177d0:	cmp	r0, #0
   177d4:	beq	17898 <main@@Base+0x1b08>
   177d8:	mov	r0, #0
   177dc:	str	r0, [sp, #36]	; 0x24
   177e0:	str	r0, [sp, #32]
   177e4:	ldr	r0, [sp, #28]
   177e8:	ldr	r0, [r0]
   177ec:	mov	r1, #1
   177f0:	bl	21e84 <flatcc_builder_extend_vector@@Base>
   177f4:	cmp	r0, #0
   177f8:	beq	166c8 <main@@Base+0x938>
   177fc:	mov	r7, r0
   17800:	ldr	r0, [sp, #28]
   17804:	mov	r1, r8
   17808:	mov	r2, r4
   1780c:	mov	r5, r4
   17810:	add	r4, sp, #32
   17814:	mov	r3, r4
   17818:	bl	26bf8 <flatcc_json_parser_double@@Base>
   1781c:	mov	r6, r0
   17820:	cmp	r8, r0
   17824:	beq	17834 <main@@Base+0x1aa4>
   17828:	mov	r8, r6
   1782c:	mov	r4, r5
   17830:	b	17864 <main@@Base+0x1ad4>
   17834:	str	r4, [sp]
   17838:	ldr	r0, [sp, #28]
   1783c:	mov	r1, r6
   17840:	mov	r2, r5
   17844:	movw	r3, #33136	; 0x8170
   17848:	movt	r3, #4
   1784c:	bl	1c484 <main@@Base+0x66f4>
   17850:	mov	r8, r0
   17854:	cmp	r0, r6
   17858:	mov	r4, r5
   1785c:	cmpne	r8, r4
   17860:	beq	166c8 <main@@Base+0x938>
   17864:	vldr	d0, [sp, #32]
   17868:	mov	r0, r7
   1786c:	bl	1c598 <main@@Base+0x6808>
   17870:	ldr	r0, [sp, #28]
   17874:	mov	r1, r8
   17878:	mov	r2, r4
   1787c:	mov	r3, r9
   17880:	bl	1a484 <main@@Base+0x46f4>
   17884:	mov	r8, r0
   17888:	ldr	r0, [sp, #52]	; 0x34
   1788c:	cmp	r0, #0
   17890:	ldr	r6, [sp, #24]
   17894:	bne	177d8 <main@@Base+0x1a48>
   17898:	ldr	r0, [sp, #28]
   1789c:	ldr	r0, [r0]
   178a0:	bl	230a8 <flatcc_builder_end_vector@@Base>
   178a4:	str	r0, [sp, #48]	; 0x30
   178a8:	cmp	r0, #0
   178ac:	beq	166c8 <main@@Base+0x938>
   178b0:	ldr	r0, [sp, #28]
   178b4:	ldr	r0, [r0]
   178b8:	mov	r1, #33	; 0x21
   178bc:	b	18ab4 <main@@Base+0x2d24>
   178c0:	ldr	r0, [sp, #28]
   178c4:	b	16768 <main@@Base+0x9d8>
   178c8:	add	r7, r9, #16
   178cc:	mov	r0, r7
   178d0:	mov	r1, r4
   178d4:	bl	196a0 <main@@Base+0x3910>
   178d8:	lsr	r0, r0, #8
   178dc:	orr	r0, r0, r1, lsl #24
   178e0:	movw	r2, #25460	; 0x6374
   178e4:	movt	r2, #29301	; 0x7275
   178e8:	eor	r0, r0, r2
   178ec:	movw	r2, #29556	; 0x7374
   178f0:	movt	r2, #100	; 0x64
   178f4:	eor	r1, r2, r1, lsr #8
   178f8:	orrs	r0, r0, r1
   178fc:	bne	179b0 <main@@Base+0x1c20>
   17900:	ldr	r0, [sp, #28]
   17904:	mov	r1, r7
   17908:	mov	r2, r4
   1790c:	mov	r3, #7
   17910:	bl	196a4 <main@@Base+0x3914>
   17914:	mov	r8, r0
   17918:	cmp	r7, r0
   1791c:	add	r9, sp, #52	; 0x34
   17920:	beq	1819c <main@@Base+0x240c>
   17924:	ldr	r0, [sp, #28]
   17928:	ldr	r0, [r0]
   1792c:	mov	r1, #8
   17930:	mov	r2, #4
   17934:	mvn	r3, #-536870912	; 0xe0000000
   17938:	bl	22470 <flatcc_builder_start_vector@@Base>
   1793c:	cmp	r0, #0
   17940:	bne	166c8 <main@@Base+0x938>
   17944:	ldr	r5, [sp, #28]
   17948:	mov	r0, r5
   1794c:	mov	r1, r8
   17950:	mov	r2, r4
   17954:	mov	r3, r9
   17958:	bl	1a228 <main@@Base+0x4498>
   1795c:	mov	r8, r0
   17960:	ldr	r0, [r5]
   17964:	ldr	r1, [sp, #52]	; 0x34
   17968:	cmp	r1, #0
   1796c:	beq	1831c <main@@Base+0x258c>
   17970:	mov	r1, #1
   17974:	bl	21e84 <flatcc_builder_extend_vector@@Base>
   17978:	cmp	r0, #0
   1797c:	beq	166c8 <main@@Base+0x938>
   17980:	mov	r3, r0
   17984:	ldr	r5, [sp, #28]
   17988:	mov	r0, r5
   1798c:	mov	r1, r8
   17990:	mov	r2, r4
   17994:	bl	1b3f4 <main@@Base+0x5664>
   17998:	mov	r1, r0
   1799c:	mov	r0, r5
   179a0:	mov	r2, r4
   179a4:	mov	r3, r9
   179a8:	bl	1a484 <main@@Base+0x46f4>
   179ac:	b	1795c <main@@Base+0x1bcc>
   179b0:	ldr	r0, [sp, #28]
   179b4:	mov	r1, r7
   179b8:	b	16768 <main@@Base+0x9d8>
   179bc:	add	r9, sp, #52	; 0x34
   179c0:	b	18184 <main@@Base+0x23f4>
   179c4:	ldr	r0, [sp, #28]
   179c8:	mov	r1, r9
   179cc:	mov	r2, r4
   179d0:	mov	r3, #8
   179d4:	bl	196a4 <main@@Base+0x3914>
   179d8:	mov	r6, r0
   179dc:	cmp	r9, r0
   179e0:	beq	17e7c <main@@Base+0x20ec>
   179e4:	mov	r0, #0
   179e8:	strb	r0, [sp, #32]
   179ec:	ldr	r0, [sp, #28]
   179f0:	mov	r1, r6
   179f4:	mov	r2, r4
   179f8:	mov	r5, r4
   179fc:	add	r4, sp, #32
   17a00:	mov	r3, r4
   17a04:	bl	1b1fc <main@@Base+0x546c>
   17a08:	mov	r7, r0
   17a0c:	cmp	r6, r0
   17a10:	add	r9, sp, #52	; 0x34
   17a14:	beq	18280 <main@@Base+0x24f0>
   17a18:	mov	r8, r7
   17a1c:	mov	r4, r5
   17a20:	b	182b0 <main@@Base+0x2520>
   17a24:	add	r6, r9, #16
   17a28:	mov	r0, r6
   17a2c:	mov	r1, r4
   17a30:	bl	196a0 <main@@Base+0x3910>
   17a34:	and	r0, r1, #-16777216	; 0xff000000
   17a38:	teq	r0, #1929379840	; 0x73000000
   17a3c:	bne	17e7c <main@@Base+0x20ec>
   17a40:	ldr	r0, [sp, #28]
   17a44:	mov	r1, r6
   17a48:	mov	r2, r4
   17a4c:	mov	r3, #1
   17a50:	bl	196a4 <main@@Base+0x3914>
   17a54:	mov	r8, r0
   17a58:	cmp	r6, r0
   17a5c:	add	r9, sp, #52	; 0x34
   17a60:	beq	17fe8 <main@@Base+0x2258>
   17a64:	ldr	r0, [sp, #28]
   17a68:	ldr	r0, [r0]
   17a6c:	bl	22500 <flatcc_builder_start_offset_vector@@Base>
   17a70:	cmp	r0, #0
   17a74:	ldr	r6, [sp, #24]
   17a78:	bne	166c8 <main@@Base+0x938>
   17a7c:	ldr	r0, [sp, #28]
   17a80:	mov	r1, r8
   17a84:	mov	r2, r4
   17a88:	mov	r3, r9
   17a8c:	bl	1a228 <main@@Base+0x4498>
   17a90:	mov	r8, r0
   17a94:	ldr	r0, [sp, #52]	; 0x34
   17a98:	cmp	r0, #0
   17a9c:	beq	1856c <main@@Base+0x27dc>
   17aa0:	ldr	r0, [sp, #28]
   17aa4:	mov	r1, r8
   17aa8:	mov	r2, r4
   17aac:	add	r3, sp, #48	; 0x30
   17ab0:	bl	16688 <main@@Base+0x8f8>
   17ab4:	mov	r8, r0
   17ab8:	ldr	r0, [sp, #48]	; 0x30
   17abc:	cmp	r0, #0
   17ac0:	beq	166c8 <main@@Base+0x938>
   17ac4:	ldr	r0, [sp, #28]
   17ac8:	ldr	r0, [r0]
   17acc:	mov	r1, #1
   17ad0:	bl	2204c <flatcc_builder_extend_offset_vector@@Base>
   17ad4:	cmp	r0, #0
   17ad8:	beq	166c8 <main@@Base+0x938>
   17adc:	ldr	r1, [sp, #48]	; 0x30
   17ae0:	str	r1, [r0]
   17ae4:	ldr	r0, [sp, #28]
   17ae8:	mov	r1, r8
   17aec:	mov	r2, r4
   17af0:	mov	r3, r9
   17af4:	bl	1a484 <main@@Base+0x46f4>
   17af8:	b	17a90 <main@@Base+0x1d00>
   17afc:	ldr	r0, [sp, #28]
   17b00:	mov	r1, r8
   17b04:	b	16768 <main@@Base+0x9d8>
   17b08:	movw	r2, #13407	; 0x345f
   17b0c:	movt	r2, #30006	; 0x7536
   17b10:	eor	r2, r1, r2
   17b14:	orrs	r2, r0, r2
   17b18:	beq	18220 <main@@Base+0x2490>
   17b1c:	movw	r2, #12895	; 0x325f
   17b20:	movt	r2, #30003	; 0x7533
   17b24:	eor	r1, r1, r2
   17b28:	orrs	r0, r0, r1
   17b2c:	bne	18184 <main@@Base+0x23f4>
   17b30:	ldr	r0, [sp, #28]
   17b34:	mov	r1, r7
   17b38:	mov	r2, r4
   17b3c:	mov	r3, #8
   17b40:	bl	196a4 <main@@Base+0x3914>
   17b44:	mov	r6, r0
   17b48:	cmp	r7, r0
   17b4c:	beq	18618 <main@@Base+0x2888>
   17b50:	mov	r0, #0
   17b54:	str	r0, [sp, #32]
   17b58:	ldr	r0, [sp, #28]
   17b5c:	mov	r1, r6
   17b60:	mov	r2, r4
   17b64:	mov	r5, r4
   17b68:	add	r4, sp, #32
   17b6c:	mov	r3, r4
   17b70:	bl	1c0d0 <main@@Base+0x6340>
   17b74:	mov	r7, r0
   17b78:	cmp	r6, r0
   17b7c:	beq	18938 <main@@Base+0x2ba8>
   17b80:	mov	r8, r7
   17b84:	mov	r4, r5
   17b88:	b	18968 <main@@Base+0x2bd8>
   17b8c:	movw	r0, #28257	; 0x6e61
   17b90:	movt	r0, #28001	; 0x6d61
   17b94:	teq	r7, r0
   17b98:	bne	16760 <main@@Base+0x9d0>
   17b9c:	ldr	r0, [sp, #28]
   17ba0:	mov	r1, r9
   17ba4:	mov	r2, r4
   17ba8:	mov	r3, #4
   17bac:	bl	196a4 <main@@Base+0x3914>
   17bb0:	mov	r6, r0
   17bb4:	cmp	r9, r0
   17bb8:	beq	17e7c <main@@Base+0x20ec>
   17bbc:	mov	r0, #0
   17bc0:	strh	r0, [sp, #32]
   17bc4:	ldr	r0, [sp, #28]
   17bc8:	mov	r1, r6
   17bcc:	mov	r2, r4
   17bd0:	mov	r5, r4
   17bd4:	add	r4, sp, #32
   17bd8:	mov	r3, r4
   17bdc:	bl	1a544 <main@@Base+0x47b4>
   17be0:	mov	r7, r0
   17be4:	cmp	r6, r0
   17be8:	add	r9, sp, #52	; 0x34
   17bec:	beq	187b4 <main@@Base+0x2a24>
   17bf0:	mov	r8, r7
   17bf4:	ldr	r6, [sp, #24]
   17bf8:	b	187e8 <main@@Base+0x2a58>
   17bfc:	and	r1, sl, #-16777216	; 0xff000000
   17c00:	eor	r1, r1, #1711276032	; 0x66000000
   17c04:	orrs	r0, r1, r0
   17c08:	bne	16760 <main@@Base+0x9d0>
   17c0c:	ldr	r0, [sp, #28]
   17c10:	mov	r1, r9
   17c14:	mov	r2, r4
   17c18:	mov	r3, #5
   17c1c:	bl	196a4 <main@@Base+0x3914>
   17c20:	mov	r6, r0
   17c24:	cmp	r9, r0
   17c28:	beq	17e7c <main@@Base+0x20ec>
   17c2c:	mov	r0, #0
   17c30:	str	r0, [sp, #32]
   17c34:	ldr	r0, [sp, #28]
   17c38:	mov	r1, r6
   17c3c:	mov	r2, r4
   17c40:	mov	r9, r4
   17c44:	add	r4, sp, #32
   17c48:	mov	r3, r4
   17c4c:	bl	26cd0 <flatcc_json_parser_float@@Base>
   17c50:	mov	r7, r0
   17c54:	cmp	r6, r0
   17c58:	beq	18834 <main@@Base+0x2aa4>
   17c5c:	mov	r8, r7
   17c60:	ldr	r6, [sp, #24]
   17c64:	mov	r4, r9
   17c68:	add	r9, sp, #52	; 0x34
   17c6c:	b	18870 <main@@Base+0x2ae0>
   17c70:	str	r4, [sp]
   17c74:	ldr	r0, [sp, #28]
   17c78:	mov	r1, r7
   17c7c:	mov	r2, r5
   17c80:	movw	r3, #33016	; 0x80f8
   17c84:	movt	r3, #4
   17c88:	bl	1bbf8 <main@@Base+0x5e68>
   17c8c:	mov	r8, r0
   17c90:	cmp	r0, r7
   17c94:	ldr	r6, [sp, #24]
   17c98:	mov	r4, r5
   17c9c:	cmpne	r8, r4
   17ca0:	beq	166c8 <main@@Base+0x938>
   17ca4:	vldr	s0, [sp, #32]
   17ca8:	vcmp.f32	s0, #0.0
   17cac:	vmrs	APSR_nzcv, fpscr
   17cb0:	bne	17cc4 <main@@Base+0x1f34>
   17cb4:	ldr	r0, [sp, #28]
   17cb8:	ldrb	r0, [r0, #8]
   17cbc:	tst	r0, #2
   17cc0:	beq	16778 <main@@Base+0x9e8>
   17cc4:	ldr	r0, [sp, #28]
   17cc8:	ldr	r0, [r0]
   17ccc:	mov	r1, #27
   17cd0:	b	1889c <main@@Base+0x2b0c>
   17cd4:	ldr	r6, [sp, #24]
   17cd8:	bl	230a8 <flatcc_builder_end_vector@@Base>
   17cdc:	str	r0, [sp, #48]	; 0x30
   17ce0:	cmp	r0, #0
   17ce4:	beq	166c8 <main@@Base+0x938>
   17ce8:	ldr	r0, [sp, #28]
   17cec:	ldr	r0, [r0]
   17cf0:	mov	r1, #9
   17cf4:	b	18ab4 <main@@Base+0x2d24>
   17cf8:	mov	r9, r1
   17cfc:	movw	r3, #29556	; 0x7374
   17d00:	movt	r3, #29797	; 0x7465
   17d04:	eor	r0, r7, r3
   17d08:	eor	r1, r4, #889192448	; 0x35000000
   17d0c:	orrs	r0, r1, r0
   17d10:	bne	17de8 <main@@Base+0x2058>
   17d14:	ldr	r0, [sp, #28]
   17d18:	mov	r1, r9
   17d1c:	ldr	r4, [sp, #20]
   17d20:	mov	r2, r4
   17d24:	mov	r3, #5
   17d28:	bl	196a4 <main@@Base+0x3914>
   17d2c:	mov	r8, r0
   17d30:	cmp	r9, r0
   17d34:	beq	17de0 <main@@Base+0x2050>
   17d38:	ldr	r0, [sp, #28]
   17d3c:	ldr	r0, [r0]
   17d40:	mov	r1, #4
   17d44:	mov	r2, #2
   17d48:	mvn	r3, #-1073741824	; 0xc0000000
   17d4c:	bl	22470 <flatcc_builder_start_vector@@Base>
   17d50:	cmp	r0, #0
   17d54:	bne	166c8 <main@@Base+0x938>
   17d58:	ldr	r5, [sp, #28]
   17d5c:	mov	r0, r5
   17d60:	mov	r1, r8
   17d64:	mov	r2, r4
   17d68:	add	r9, sp, #52	; 0x34
   17d6c:	mov	r3, r9
   17d70:	bl	1a228 <main@@Base+0x4498>
   17d74:	mov	r8, r0
   17d78:	ldr	r0, [r5]
   17d7c:	ldr	r1, [sp, #52]	; 0x34
   17d80:	cmp	r1, #0
   17d84:	beq	182f8 <main@@Base+0x2568>
   17d88:	ldr	r6, [sp, #24]
   17d8c:	mov	r1, #1
   17d90:	bl	21e84 <flatcc_builder_extend_vector@@Base>
   17d94:	cmp	r0, #0
   17d98:	beq	166c8 <main@@Base+0x938>
   17d9c:	mov	r3, r0
   17da0:	ldr	r5, [sp, #28]
   17da4:	mov	r0, r5
   17da8:	mov	r1, r8
   17dac:	mov	r2, r4
   17db0:	bl	1ac98 <main@@Base+0x4f08>
   17db4:	mov	r1, r0
   17db8:	mov	r0, r5
   17dbc:	mov	r2, r4
   17dc0:	mov	r3, r9
   17dc4:	bl	1a484 <main@@Base+0x46f4>
   17dc8:	mov	r8, r0
   17dcc:	ldr	r0, [r5]
   17dd0:	ldr	r1, [sp, #52]	; 0x34
   17dd4:	cmp	r1, #0
   17dd8:	bne	17d8c <main@@Base+0x1ffc>
   17ddc:	b	182fc <main@@Base+0x256c>
   17de0:	mov	r9, r8
   17de4:	b	17dec <main@@Base+0x205c>
   17de8:	ldr	r4, [sp, #20]
   17dec:	movw	r0, #31088	; 0x7970
   17df0:	movt	r0, #24436	; 0x5f74
   17df4:	eor	r0, sl, r0
   17df8:	orrs	r0, r0, r6
   17dfc:	bne	17e98 <main@@Base+0x2108>
   17e00:	add	r6, r9, #8
   17e04:	mov	r0, r6
   17e08:	mov	r1, r4
   17e0c:	bl	196a0 <main@@Base+0x3910>
   17e10:	and	r0, r1, #-16777216	; 0xff000000
   17e14:	teq	r0, #1694498816	; 0x65000000
   17e18:	bne	17e7c <main@@Base+0x20ec>
   17e1c:	ldr	r0, [sp, #28]
   17e20:	mov	r1, r6
   17e24:	mov	r2, r4
   17e28:	mov	r3, #1
   17e2c:	bl	196a4 <main@@Base+0x3914>
   17e30:	mov	r1, r0
   17e34:	cmp	r6, r0
   17e38:	add	r9, sp, #52	; 0x34
   17e3c:	beq	17ea4 <main@@Base+0x2114>
   17e40:	ldr	r0, [sp, #44]	; 0x2c
   17e44:	mov	r2, #8
   17e48:	str	r2, [sp]
   17e4c:	str	r0, [sp, #4]
   17e50:	movw	r0, #32952	; 0x80b8
   17e54:	movt	r0, #4
   17e58:	str	r0, [sp, #8]
   17e5c:	movw	r0, #44712	; 0xaea8
   17e60:	movt	r0, #1
   17e64:	str	r0, [sp, #12]
   17e68:	ldr	r0, [sp, #28]
   17e6c:	mov	r2, r4
   17e70:	mov	r3, #0
   17e74:	bl	27bbc <flatcc_json_parser_union_type@@Base>
   17e78:	b	18728 <main@@Base+0x2998>
   17e7c:	ldr	r0, [sp, #28]
   17e80:	mov	r1, r6
   17e84:	mov	r2, r4
   17e88:	bl	2669c <flatcc_json_parser_unmatched_symbol@@Base>
   17e8c:	mov	r8, r0
   17e90:	ldr	r6, [sp, #24]
   17e94:	b	16774 <main@@Base+0x9e4>
   17e98:	ldr	r0, [sp, #28]
   17e9c:	mov	r1, r9
   17ea0:	b	17e84 <main@@Base+0x20f4>
   17ea4:	ldr	r0, [sp, #28]
   17ea8:	b	18720 <main@@Base+0x2990>
   17eac:	and	r0, r1, #-16777216	; 0xff000000
   17eb0:	teq	r0, #1728053248	; 0x67000000
   17eb4:	add	r9, sp, #52	; 0x34
   17eb8:	bne	18184 <main@@Base+0x23f4>
   17ebc:	ldr	r0, [sp, #28]
   17ec0:	mov	r1, r7
   17ec4:	mov	r2, r4
   17ec8:	mov	r3, #1
   17ecc:	bl	196a4 <main@@Base+0x3914>
   17ed0:	mov	r8, r0
   17ed4:	cmp	r7, r0
   17ed8:	beq	1819c <main@@Base+0x240c>
   17edc:	ldr	r0, [sp, #28]
   17ee0:	ldr	r0, [r0]
   17ee4:	bl	22500 <flatcc_builder_start_offset_vector@@Base>
   17ee8:	cmp	r0, #0
   17eec:	bne	166c8 <main@@Base+0x938>
   17ef0:	ldr	r0, [sp, #28]
   17ef4:	mov	r1, r8
   17ef8:	mov	r2, r4
   17efc:	mov	r3, r9
   17f00:	bl	1a228 <main@@Base+0x4498>
   17f04:	mov	r8, r0
   17f08:	ldr	r0, [sp, #52]	; 0x34
   17f0c:	cmp	r0, #0
   17f10:	beq	188bc <main@@Base+0x2b2c>
   17f14:	ldr	r0, [sp, #28]
   17f18:	mov	r1, r8
   17f1c:	mov	r2, r4
   17f20:	add	r3, sp, #48	; 0x30
   17f24:	bl	2787c <flatcc_json_parser_build_string@@Base>
   17f28:	mov	r8, r0
   17f2c:	ldr	r0, [sp, #48]	; 0x30
   17f30:	cmp	r0, #0
   17f34:	beq	166c8 <main@@Base+0x938>
   17f38:	ldr	r0, [sp, #28]
   17f3c:	ldr	r0, [r0]
   17f40:	mov	r1, #1
   17f44:	bl	2204c <flatcc_builder_extend_offset_vector@@Base>
   17f48:	cmp	r0, #0
   17f4c:	beq	166c8 <main@@Base+0x938>
   17f50:	ldr	r1, [sp, #48]	; 0x30
   17f54:	str	r1, [r0]
   17f58:	ldr	r0, [sp, #28]
   17f5c:	mov	r1, r8
   17f60:	mov	r2, r4
   17f64:	mov	r3, r9
   17f68:	bl	1a484 <main@@Base+0x46f4>
   17f6c:	b	17f04 <main@@Base+0x2174>
   17f70:	str	r8, [sp]
   17f74:	ldr	r0, [sp, #28]
   17f78:	mov	r1, r7
   17f7c:	mov	r2, r4
   17f80:	movw	r3, #32888	; 0x8078
   17f84:	movt	r3, #4
   17f88:	bl	1a0ec <main@@Base+0x435c>
   17f8c:	mov	r8, r0
   17f90:	cmp	r0, r7
   17f94:	ldr	r6, [sp, #24]
   17f98:	cmpne	r8, r4
   17f9c:	beq	166c8 <main@@Base+0x938>
   17fa0:	ldrb	r4, [sp, #32]
   17fa4:	cmp	r4, #8
   17fa8:	bne	17fbc <main@@Base+0x222c>
   17fac:	ldr	r0, [sp, #28]
   17fb0:	ldrb	r0, [r0, #8]
   17fb4:	tst	r0, #2
   17fb8:	beq	1882c <main@@Base+0x2a9c>
   17fbc:	ldr	r0, [sp, #28]
   17fc0:	ldr	r0, [r0]
   17fc4:	mov	r1, #6
   17fc8:	mov	r2, #1
   17fcc:	mov	r3, #1
   17fd0:	bl	23540 <flatcc_builder_table_add@@Base>
   17fd4:	cmp	r0, #0
   17fd8:	beq	18c80 <main@@Base+0x2ef0>
   17fdc:	sxtb	r1, r4
   17fe0:	bl	1a208 <main@@Base+0x4478>
   17fe4:	b	1882c <main@@Base+0x2a9c>
   17fe8:	ldr	r0, [sp, #28]
   17fec:	mov	r1, r8
   17ff0:	b	18720 <main@@Base+0x2990>
   17ff4:	mov	r7, r8
   17ff8:	b	18184 <main@@Base+0x23f4>
   17ffc:	ldr	r0, [sp, #28]
   18000:	mov	r1, r7
   18004:	b	17e84 <main@@Base+0x20f4>
   18008:	movw	r2, #24428	; 0x5f6c
   1800c:	movt	r2, #102	; 0x66
   18010:	eor	r2, r2, r1, lsr #8
   18014:	lsr	r0, r0, #8
   18018:	orr	r0, r0, r1, lsl #24
   1801c:	movw	r1, #26483	; 0x6773
   18020:	movt	r1, #28526	; 0x6f6e
   18024:	eor	r0, r0, r1
   18028:	orrs	r0, r0, r2
   1802c:	add	r9, sp, #52	; 0x34
   18030:	bne	18184 <main@@Base+0x23f4>
   18034:	ldr	r0, [sp, #28]
   18038:	mov	r1, r7
   1803c:	mov	r2, r4
   18040:	mov	r3, #7
   18044:	bl	196a4 <main@@Base+0x3914>
   18048:	mov	r8, r0
   1804c:	cmp	r7, r0
   18050:	beq	1819c <main@@Base+0x240c>
   18054:	ldr	r0, [sp, #28]
   18058:	ldr	r0, [r0]
   1805c:	mov	r1, #8
   18060:	mov	r2, #8
   18064:	mvn	r3, #-536870912	; 0xe0000000
   18068:	bl	22470 <flatcc_builder_start_vector@@Base>
   1806c:	cmp	r0, #0
   18070:	bne	166c8 <main@@Base+0x938>
   18074:	ldr	r0, [sp, #28]
   18078:	mov	r1, r8
   1807c:	mov	r2, r4
   18080:	mov	r3, r9
   18084:	bl	1a228 <main@@Base+0x4498>
   18088:	mov	r8, r0
   1808c:	ldr	r0, [sp, #52]	; 0x34
   18090:	cmp	r0, #0
   18094:	beq	1815c <main@@Base+0x23cc>
   18098:	mov	r0, #0
   1809c:	str	r0, [sp, #36]	; 0x24
   180a0:	str	r0, [sp, #32]
   180a4:	ldr	r0, [sp, #28]
   180a8:	ldr	r0, [r0]
   180ac:	mov	r1, #1
   180b0:	bl	21e84 <flatcc_builder_extend_vector@@Base>
   180b4:	cmp	r0, #0
   180b8:	beq	166c8 <main@@Base+0x938>
   180bc:	mov	r7, r0
   180c0:	ldr	r0, [sp, #28]
   180c4:	mov	r1, r8
   180c8:	mov	r2, r4
   180cc:	mov	r5, r4
   180d0:	add	r4, sp, #32
   180d4:	mov	r3, r4
   180d8:	bl	1bee8 <main@@Base+0x6158>
   180dc:	mov	r6, r0
   180e0:	cmp	r8, r0
   180e4:	beq	180f4 <main@@Base+0x2364>
   180e8:	mov	r8, r6
   180ec:	mov	r4, r5
   180f0:	b	18124 <main@@Base+0x2394>
   180f4:	str	r4, [sp]
   180f8:	ldr	r0, [sp, #28]
   180fc:	mov	r1, r6
   18100:	mov	r2, r5
   18104:	movw	r3, #33148	; 0x817c
   18108:	movt	r3, #4
   1810c:	bl	1bf7c <main@@Base+0x61ec>
   18110:	mov	r8, r0
   18114:	cmp	r0, r6
   18118:	mov	r4, r5
   1811c:	cmpne	r8, r4
   18120:	beq	166c8 <main@@Base+0x938>
   18124:	ldr	r2, [sp, #32]
   18128:	ldr	r3, [sp, #36]	; 0x24
   1812c:	mov	r0, r7
   18130:	bl	1c0a8 <main@@Base+0x6318>
   18134:	ldr	r0, [sp, #28]
   18138:	mov	r1, r8
   1813c:	mov	r2, r4
   18140:	mov	r3, r9
   18144:	bl	1a484 <main@@Base+0x46f4>
   18148:	mov	r8, r0
   1814c:	ldr	r0, [sp, #52]	; 0x34
   18150:	cmp	r0, #0
   18154:	ldr	r6, [sp, #24]
   18158:	bne	18098 <main@@Base+0x2308>
   1815c:	ldr	r0, [sp, #28]
   18160:	ldr	r0, [r0]
   18164:	bl	230a8 <flatcc_builder_end_vector@@Base>
   18168:	str	r0, [sp, #48]	; 0x30
   1816c:	cmp	r0, #0
   18170:	beq	166c8 <main@@Base+0x938>
   18174:	ldr	r0, [sp, #28]
   18178:	ldr	r0, [r0]
   1817c:	mov	r1, #32
   18180:	b	18ab4 <main@@Base+0x2d24>
   18184:	ldr	r0, [sp, #28]
   18188:	mov	r1, r7
   1818c:	mov	r2, r4
   18190:	bl	2669c <flatcc_json_parser_unmatched_symbol@@Base>
   18194:	mov	r8, r0
   18198:	b	16778 <main@@Base+0x9e8>
   1819c:	ldr	r0, [sp, #28]
   181a0:	mov	r1, r8
   181a4:	b	1818c <main@@Base+0x23fc>
   181a8:	add	r6, r6, #8
   181ac:	mov	r0, r6
   181b0:	mov	r1, r4
   181b4:	bl	196a0 <main@@Base+0x3910>
   181b8:	and	r0, r1, #-16777216	; 0xff000000
   181bc:	teq	r0, #1627389952	; 0x61000000
   181c0:	bne	1870c <main@@Base+0x297c>
   181c4:	ldr	r0, [sp, #28]
   181c8:	mov	r1, r6
   181cc:	mov	r2, r4
   181d0:	mov	r3, #1
   181d4:	bl	196a4 <main@@Base+0x3914>
   181d8:	mov	r7, r0
   181dc:	cmp	r6, r0
   181e0:	beq	18718 <main@@Base+0x2988>
   181e4:	mov	r0, #0
   181e8:	str	r0, [sp, #32]
   181ec:	ldr	r0, [sp, #28]
   181f0:	mov	r1, r7
   181f4:	mov	r2, r4
   181f8:	mov	r5, r4
   181fc:	add	r4, sp, #32
   18200:	mov	r3, r4
   18204:	bl	1bd1c <main@@Base+0x5f8c>
   18208:	mov	r6, r0
   1820c:	cmp	r7, r0
   18210:	beq	18a34 <main@@Base+0x2ca4>
   18214:	mov	r8, r6
   18218:	mov	r4, r5
   1821c:	b	18a64 <main@@Base+0x2cd4>
   18220:	ldr	r0, [sp, #28]
   18224:	mov	r1, r7
   18228:	mov	r2, r4
   1822c:	mov	r3, #8
   18230:	bl	196a4 <main@@Base+0x3914>
   18234:	mov	r6, r0
   18238:	cmp	r7, r0
   1823c:	beq	18690 <main@@Base+0x2900>
   18240:	mov	r0, #0
   18244:	str	r0, [sp, #36]	; 0x24
   18248:	str	r0, [sp, #32]
   1824c:	ldr	r0, [sp, #28]
   18250:	mov	r1, r6
   18254:	mov	r2, r4
   18258:	mov	r5, r4
   1825c:	add	r4, sp, #32
   18260:	mov	r3, r4
   18264:	bl	1c29c <main@@Base+0x650c>
   18268:	mov	r7, r0
   1826c:	cmp	r6, r0
   18270:	beq	189b0 <main@@Base+0x2c20>
   18274:	mov	r8, r7
   18278:	mov	r4, r5
   1827c:	b	189e0 <main@@Base+0x2c50>
   18280:	str	r4, [sp]
   18284:	ldr	r0, [sp, #28]
   18288:	mov	r1, r7
   1828c:	mov	r2, r5
   18290:	movw	r3, #32980	; 0x80d4
   18294:	movt	r3, #4
   18298:	bl	1b2b8 <main@@Base+0x5528>
   1829c:	mov	r8, r0
   182a0:	cmp	r0, r7
   182a4:	mov	r4, r5
   182a8:	cmpne	r8, r4
   182ac:	beq	166c8 <main@@Base+0x938>
   182b0:	ldrb	r6, [sp, #32]
   182b4:	cmp	r6, #1
   182b8:	bne	182cc <main@@Base+0x253c>
   182bc:	ldr	r0, [sp, #28]
   182c0:	ldrb	r0, [r0, #8]
   182c4:	tst	r0, #2
   182c8:	beq	18a2c <main@@Base+0x2c9c>
   182cc:	ldr	r0, [sp, #28]
   182d0:	ldr	r0, [r0]
   182d4:	mov	r1, #15
   182d8:	mov	r2, #1
   182dc:	mov	r3, #1
   182e0:	bl	23540 <flatcc_builder_table_add@@Base>
   182e4:	cmp	r0, #0
   182e8:	beq	166c8 <main@@Base+0x938>
   182ec:	mov	r1, r6
   182f0:	bl	1b3d4 <main@@Base+0x5644>
   182f4:	b	18a2c <main@@Base+0x2c9c>
   182f8:	ldr	r6, [sp, #24]
   182fc:	bl	230a8 <flatcc_builder_end_vector@@Base>
   18300:	str	r0, [sp, #48]	; 0x30
   18304:	cmp	r0, #0
   18308:	beq	166c8 <main@@Base+0x938>
   1830c:	ldr	r0, [sp, #28]
   18310:	ldr	r0, [r0]
   18314:	mov	r1, #31
   18318:	b	18ab4 <main@@Base+0x2d24>
   1831c:	bl	230a8 <flatcc_builder_end_vector@@Base>
   18320:	str	r0, [sp, #48]	; 0x30
   18324:	cmp	r0, #0
   18328:	beq	166c8 <main@@Base+0x938>
   1832c:	ldr	r0, [sp, #28]
   18330:	ldr	r0, [r0]
   18334:	mov	r1, #29
   18338:	b	18ab4 <main@@Base+0x2d24>
   1833c:	mov	r8, r6
   18340:	ldr	r6, [sp, #24]
   18344:	mov	r4, r5
   18348:	ldrb	r1, [sp, #32]
   1834c:	mov	r0, r7
   18350:	bl	1a464 <main@@Base+0x46d4>
   18354:	ldr	r0, [sp, #28]
   18358:	mov	r1, r8
   1835c:	mov	r2, r4
   18360:	mov	r3, r9
   18364:	bl	1a484 <main@@Base+0x46f4>
   18368:	mov	r8, r0
   1836c:	ldr	r0, [sp, #52]	; 0x34
   18370:	cmp	r0, #0
   18374:	beq	18a90 <main@@Base+0x2d00>
   18378:	mov	r0, #0
   1837c:	strb	r0, [sp, #32]
   18380:	ldr	r0, [sp, #28]
   18384:	ldr	r0, [r0]
   18388:	mov	r1, #1
   1838c:	bl	21e84 <flatcc_builder_extend_vector@@Base>
   18390:	cmp	r0, #0
   18394:	beq	166c8 <main@@Base+0x938>
   18398:	mov	r7, r0
   1839c:	ldr	r0, [sp, #28]
   183a0:	mov	r1, r8
   183a4:	mov	r2, r4
   183a8:	mov	r5, r4
   183ac:	add	r4, sp, #32
   183b0:	mov	r3, r4
   183b4:	bl	1a2b8 <main@@Base+0x4528>
   183b8:	mov	r6, r0
   183bc:	cmp	r8, r0
   183c0:	bne	1833c <main@@Base+0x25ac>
   183c4:	str	r4, [sp]
   183c8:	ldr	r0, [sp, #28]
   183cc:	mov	r1, r6
   183d0:	mov	r2, r5
   183d4:	movw	r3, #33124	; 0x8164
   183d8:	movt	r3, #4
   183dc:	bl	1a348 <main@@Base+0x45b8>
   183e0:	mov	r8, r0
   183e4:	cmp	r0, r6
   183e8:	mov	r4, r5
   183ec:	beq	166c8 <main@@Base+0x938>
   183f0:	cmp	r8, r4
   183f4:	ldr	r6, [sp, #24]
   183f8:	bne	18348 <main@@Base+0x25b8>
   183fc:	b	166c8 <main@@Base+0x938>
   18400:	str	r4, [sp]
   18404:	ldr	r0, [sp, #28]
   18408:	mov	r1, r7
   1840c:	mov	r2, r5
   18410:	movw	r3, #33028	; 0x8104
   18414:	movt	r3, #4
   18418:	bl	1bdac <main@@Base+0x601c>
   1841c:	mov	r8, r0
   18420:	cmp	r0, r7
   18424:	mov	r4, r5
   18428:	cmpne	r8, r4
   1842c:	beq	166c8 <main@@Base+0x938>
   18430:	ldr	r6, [sp, #32]
   18434:	cmp	r6, #0
   18438:	bne	1844c <main@@Base+0x26bc>
   1843c:	ldr	r0, [sp, #28]
   18440:	ldrb	r0, [r0, #8]
   18444:	tst	r0, #2
   18448:	beq	18a2c <main@@Base+0x2c9c>
   1844c:	ldr	r0, [sp, #28]
   18450:	ldr	r0, [r0]
   18454:	mov	r1, #16
   18458:	mov	r2, #4
   1845c:	mov	r3, #4
   18460:	bl	23540 <flatcc_builder_table_add@@Base>
   18464:	cmp	r0, #0
   18468:	beq	166c8 <main@@Base+0x938>
   1846c:	mov	r1, r6
   18470:	bl	1bec8 <main@@Base+0x6138>
   18474:	b	18a2c <main@@Base+0x2c9c>
   18478:	str	r4, [sp]
   1847c:	ldr	r0, [sp, #28]
   18480:	mov	r1, r7
   18484:	mov	r2, r5
   18488:	movw	r3, #32916	; 0x8094
   1848c:	movt	r3, #4
   18490:	bl	1a5d4 <main@@Base+0x4844>
   18494:	mov	r8, r0
   18498:	cmp	r0, r7
   1849c:	ldr	r6, [sp, #24]
   184a0:	mov	r4, r5
   184a4:	cmpne	r8, r4
   184a8:	beq	166c8 <main@@Base+0x938>
   184ac:	ldrh	r4, [sp, #32]
   184b0:	cmp	r4, #100	; 0x64
   184b4:	bne	184c8 <main@@Base+0x2738>
   184b8:	ldr	r0, [sp, #28]
   184bc:	ldrb	r0, [r0, #8]
   184c0:	tst	r0, #2
   184c4:	beq	1882c <main@@Base+0x2a9c>
   184c8:	ldr	r0, [sp, #28]
   184cc:	ldr	r0, [r0]
   184d0:	mov	r1, #2
   184d4:	b	18810 <main@@Base+0x2a80>
   184d8:	str	r4, [sp]
   184dc:	ldr	r0, [sp, #28]
   184e0:	mov	r1, r7
   184e4:	mov	r2, r9
   184e8:	movw	r3, #32992	; 0x80e0
   184ec:	movt	r3, #4
   184f0:	bl	1bbf8 <main@@Base+0x5e68>
   184f4:	mov	r8, r0
   184f8:	cmp	r0, r7
   184fc:	ldr	r6, [sp, #24]
   18500:	mov	r4, r9
   18504:	beq	166c8 <main@@Base+0x938>
   18508:	cmp	r8, r4
   1850c:	add	r9, sp, #52	; 0x34
   18510:	beq	166c8 <main@@Base+0x938>
   18514:	vldr	s0, [sp, #32]
   18518:	vcmp.f32	s0, s16
   1851c:	vmrs	APSR_nzcv, fpscr
   18520:	bne	18534 <main@@Base+0x27a4>
   18524:	ldr	r0, [sp, #28]
   18528:	ldrb	r0, [r0, #8]
   1852c:	tst	r0, #2
   18530:	beq	16778 <main@@Base+0x9e8>
   18534:	ldr	r0, [sp, #28]
   18538:	ldr	r0, [r0]
   1853c:	mov	r1, #26
   18540:	b	1889c <main@@Base+0x2b0c>
   18544:	ldr	r0, [sp, #28]
   18548:	ldr	r0, [r0]
   1854c:	bl	225b4 <flatcc_builder_end_offset_vector@@Base>
   18550:	str	r0, [sp, #48]	; 0x30
   18554:	cmp	r0, #0
   18558:	beq	166c8 <main@@Base+0x938>
   1855c:	ldr	r0, [sp, #28]
   18560:	ldr	r0, [r0]
   18564:	mov	r1, #28
   18568:	b	18ab4 <main@@Base+0x2d24>
   1856c:	ldr	r0, [sp, #28]
   18570:	ldr	r0, [r0]
   18574:	bl	225b4 <flatcc_builder_end_offset_vector@@Base>
   18578:	str	r0, [sp, #48]	; 0x30
   1857c:	cmp	r0, #0
   18580:	beq	166c8 <main@@Base+0x938>
   18584:	ldr	r0, [sp, #28]
   18588:	ldr	r0, [r0]
   1858c:	mov	r1, #11
   18590:	b	18ab4 <main@@Base+0x2d24>
   18594:	ldr	r0, [sp, #28]
   18598:	b	1818c <main@@Base+0x23fc>
   1859c:	add	r6, r6, #8
   185a0:	mov	r0, r6
   185a4:	mov	r1, r4
   185a8:	bl	196a0 <main@@Base+0x3910>
   185ac:	and	r0, r1, #-16777216	; 0xff000000
   185b0:	teq	r0, #1627389952	; 0x61000000
   185b4:	bne	1870c <main@@Base+0x297c>
   185b8:	ldr	r0, [sp, #28]
   185bc:	mov	r1, r6
   185c0:	mov	r2, r4
   185c4:	mov	r3, #1
   185c8:	bl	196a4 <main@@Base+0x3914>
   185cc:	mov	r7, r0
   185d0:	cmp	r6, r0
   185d4:	beq	18718 <main@@Base+0x2988>
   185d8:	mov	r0, #0
   185dc:	str	r0, [sp, #36]	; 0x24
   185e0:	str	r0, [sp, #32]
   185e4:	ldr	r0, [sp, #28]
   185e8:	mov	r1, r7
   185ec:	mov	r2, r4
   185f0:	mov	r5, r4
   185f4:	add	r4, sp, #32
   185f8:	mov	r3, r4
   185fc:	bl	1bee8 <main@@Base+0x6158>
   18600:	mov	r6, r0
   18604:	cmp	r7, r0
   18608:	beq	18acc <main@@Base+0x2d3c>
   1860c:	mov	r8, r6
   18610:	mov	r4, r5
   18614:	b	18afc <main@@Base+0x2d6c>
   18618:	add	r6, r6, #8
   1861c:	mov	r0, r6
   18620:	mov	r1, r4
   18624:	bl	196a0 <main@@Base+0x3910>
   18628:	and	r0, r1, #-16777216	; 0xff000000
   1862c:	teq	r0, #1627389952	; 0x61000000
   18630:	bne	1870c <main@@Base+0x297c>
   18634:	ldr	r0, [sp, #28]
   18638:	mov	r1, r6
   1863c:	mov	r2, r4
   18640:	mov	r3, #1
   18644:	bl	196a4 <main@@Base+0x3914>
   18648:	mov	r7, r0
   1864c:	cmp	r6, r0
   18650:	beq	18718 <main@@Base+0x2988>
   18654:	mov	r0, #0
   18658:	str	r0, [sp, #32]
   1865c:	ldr	r0, [sp, #28]
   18660:	mov	r1, r7
   18664:	mov	r2, r4
   18668:	mov	r5, r4
   1866c:	add	r4, sp, #32
   18670:	mov	r3, r4
   18674:	bl	1c0d0 <main@@Base+0x6340>
   18678:	mov	r6, r0
   1867c:	cmp	r7, r0
   18680:	beq	18b4c <main@@Base+0x2dbc>
   18684:	mov	r8, r6
   18688:	mov	r4, r5
   1868c:	b	18b7c <main@@Base+0x2dec>
   18690:	add	r6, r6, #8
   18694:	mov	r0, r6
   18698:	mov	r1, r4
   1869c:	bl	196a0 <main@@Base+0x3910>
   186a0:	and	r0, r1, #-16777216	; 0xff000000
   186a4:	teq	r0, #1627389952	; 0x61000000
   186a8:	bne	1870c <main@@Base+0x297c>
   186ac:	ldr	r0, [sp, #28]
   186b0:	mov	r1, r6
   186b4:	mov	r2, r4
   186b8:	mov	r3, #1
   186bc:	bl	196a4 <main@@Base+0x3914>
   186c0:	mov	r7, r0
   186c4:	cmp	r6, r0
   186c8:	beq	18718 <main@@Base+0x2988>
   186cc:	mov	r0, #0
   186d0:	str	r0, [sp, #36]	; 0x24
   186d4:	str	r0, [sp, #32]
   186d8:	ldr	r0, [sp, #28]
   186dc:	mov	r1, r7
   186e0:	mov	r2, r4
   186e4:	mov	r5, r4
   186e8:	add	r4, sp, #32
   186ec:	mov	r3, r4
   186f0:	bl	1c29c <main@@Base+0x650c>
   186f4:	mov	r6, r0
   186f8:	cmp	r7, r0
   186fc:	beq	18ba8 <main@@Base+0x2e18>
   18700:	mov	r8, r6
   18704:	mov	r4, r5
   18708:	b	18bd8 <main@@Base+0x2e48>
   1870c:	ldr	r0, [sp, #28]
   18710:	mov	r1, r6
   18714:	b	18720 <main@@Base+0x2990>
   18718:	ldr	r0, [sp, #28]
   1871c:	mov	r1, r7
   18720:	mov	r2, r4
   18724:	bl	2669c <flatcc_json_parser_unmatched_symbol@@Base>
   18728:	mov	r8, r0
   1872c:	ldr	r6, [sp, #24]
   18730:	b	16778 <main@@Base+0x9e8>
   18734:	str	r4, [sp]
   18738:	ldr	r0, [sp, #28]
   1873c:	mov	r1, r7
   18740:	mov	r2, r5
   18744:	movw	r3, #33052	; 0x811c
   18748:	movt	r3, #4
   1874c:	bl	1bf7c <main@@Base+0x61ec>
   18750:	mov	r8, r0
   18754:	cmp	r0, r7
   18758:	mov	r4, r5
   1875c:	cmpne	r8, r4
   18760:	beq	166c8 <main@@Base+0x938>
   18764:	ldr	r7, [sp, #32]
   18768:	ldr	r6, [sp, #36]	; 0x24
   1876c:	orrs	r0, r7, r6
   18770:	bne	18784 <main@@Base+0x29f4>
   18774:	ldr	r0, [sp, #28]
   18778:	ldrb	r0, [r0, #8]
   1877c:	tst	r0, #2
   18780:	beq	18a2c <main@@Base+0x2c9c>
   18784:	ldr	r0, [sp, #28]
   18788:	ldr	r0, [r0]
   1878c:	mov	r1, #18
   18790:	mov	r2, #8
   18794:	mov	r3, #8
   18798:	bl	23540 <flatcc_builder_table_add@@Base>
   1879c:	cmp	r0, #0
   187a0:	beq	166c8 <main@@Base+0x938>
   187a4:	mov	r2, r7
   187a8:	mov	r3, r6
   187ac:	bl	1c0a8 <main@@Base+0x6318>
   187b0:	b	18a2c <main@@Base+0x2c9c>
   187b4:	str	r4, [sp]
   187b8:	ldr	r0, [sp, #28]
   187bc:	mov	r1, r7
   187c0:	mov	r2, r5
   187c4:	movw	r3, #32940	; 0x80ac
   187c8:	movt	r3, #4
   187cc:	bl	1a5d4 <main@@Base+0x4844>
   187d0:	mov	r8, r0
   187d4:	cmp	r0, r7
   187d8:	ldr	r6, [sp, #24]
   187dc:	mov	r4, r5
   187e0:	cmpne	r8, r4
   187e4:	beq	166c8 <main@@Base+0x938>
   187e8:	ldrh	r4, [sp, #32]
   187ec:	cmp	r4, #150	; 0x96
   187f0:	bne	18804 <main@@Base+0x2a74>
   187f4:	ldr	r0, [sp, #28]
   187f8:	ldrb	r0, [r0, #8]
   187fc:	tst	r0, #2
   18800:	beq	1882c <main@@Base+0x2a9c>
   18804:	ldr	r0, [sp, #28]
   18808:	ldr	r0, [r0]
   1880c:	mov	r1, #1
   18810:	mov	r2, #2
   18814:	mov	r3, #2
   18818:	bl	23540 <flatcc_builder_table_add@@Base>
   1881c:	cmp	r0, #0
   18820:	beq	18c80 <main@@Base+0x2ef0>
   18824:	sxth	r1, r4
   18828:	bl	1a6f0 <main@@Base+0x4960>
   1882c:	ldr	r4, [sp, #20]
   18830:	b	16778 <main@@Base+0x9e8>
   18834:	str	r4, [sp]
   18838:	ldr	r0, [sp, #28]
   1883c:	mov	r1, r7
   18840:	mov	r2, r9
   18844:	movw	r3, #33004	; 0x80ec
   18848:	movt	r3, #4
   1884c:	bl	1bbf8 <main@@Base+0x5e68>
   18850:	mov	r8, r0
   18854:	cmp	r0, r7
   18858:	ldr	r6, [sp, #24]
   1885c:	mov	r4, r9
   18860:	beq	166c8 <main@@Base+0x938>
   18864:	cmp	r8, r4
   18868:	add	r9, sp, #52	; 0x34
   1886c:	beq	166c8 <main@@Base+0x938>
   18870:	vldr	s0, [sp, #32]
   18874:	vcmp.f32	s0, s18
   18878:	vmrs	APSR_nzcv, fpscr
   1887c:	bne	18890 <main@@Base+0x2b00>
   18880:	ldr	r0, [sp, #28]
   18884:	ldrb	r0, [r0, #8]
   18888:	tst	r0, #2
   1888c:	beq	16778 <main@@Base+0x9e8>
   18890:	ldr	r0, [sp, #28]
   18894:	ldr	r0, [r0]
   18898:	mov	r1, #25
   1889c:	mov	r2, #4
   188a0:	mov	r3, #4
   188a4:	bl	23540 <flatcc_builder_table_add@@Base>
   188a8:	cmp	r0, #0
   188ac:	beq	166c8 <main@@Base+0x938>
   188b0:	vldr	s0, [sp, #32]
   188b4:	bl	1bd04 <main@@Base+0x5f74>
   188b8:	b	16778 <main@@Base+0x9e8>
   188bc:	ldr	r0, [sp, #28]
   188c0:	ldr	r0, [r0]
   188c4:	bl	225b4 <flatcc_builder_end_offset_vector@@Base>
   188c8:	str	r0, [sp, #48]	; 0x30
   188cc:	cmp	r0, #0
   188d0:	beq	166c8 <main@@Base+0x938>
   188d4:	ldr	r0, [sp, #28]
   188d8:	ldr	r0, [r0]
   188dc:	mov	r1, #10
   188e0:	b	18ab4 <main@@Base+0x2d24>
   188e4:	ldr	r0, [sp, #28]
   188e8:	ldr	r0, [r0]
   188ec:	mov	r1, #0
   188f0:	mov	r2, #0
   188f4:	mov	r3, #0
   188f8:	bl	21a58 <flatcc_builder_start_buffer@@Base>
   188fc:	cmp	r0, #0
   18900:	bne	166c8 <main@@Base+0x938>
   18904:	ldr	r0, [sp, #28]
   18908:	mov	r1, r8
   1890c:	mov	r2, r4
   18910:	add	r3, sp, #48	; 0x30
   18914:	bl	16688 <main@@Base+0x8f8>
   18918:	mov	r8, r0
   1891c:	ldr	r1, [sp, #48]	; 0x30
   18920:	cmp	r1, #0
   18924:	beq	166c8 <main@@Base+0x938>
   18928:	ldr	r0, [sp, #28]
   1892c:	ldr	r0, [r0]
   18930:	bl	21c0c <flatcc_builder_end_buffer@@Base>
   18934:	b	18a9c <main@@Base+0x2d0c>
   18938:	str	r4, [sp]
   1893c:	ldr	r0, [sp, #28]
   18940:	mov	r1, r7
   18944:	mov	r2, r5
   18948:	movw	r3, #33076	; 0x8134
   1894c:	movt	r3, #4
   18950:	bl	1c160 <main@@Base+0x63d0>
   18954:	mov	r8, r0
   18958:	cmp	r0, r7
   1895c:	mov	r4, r5
   18960:	cmpne	r8, r4
   18964:	beq	166c8 <main@@Base+0x938>
   18968:	ldr	r6, [sp, #32]
   1896c:	cmp	r6, #0
   18970:	bne	18984 <main@@Base+0x2bf4>
   18974:	ldr	r0, [sp, #28]
   18978:	ldrb	r0, [r0, #8]
   1897c:	tst	r0, #2
   18980:	beq	18a2c <main@@Base+0x2c9c>
   18984:	ldr	r0, [sp, #28]
   18988:	ldr	r0, [r0]
   1898c:	mov	r1, #17
   18990:	mov	r2, #4
   18994:	mov	r3, #4
   18998:	bl	23540 <flatcc_builder_table_add@@Base>
   1899c:	cmp	r0, #0
   189a0:	beq	166c8 <main@@Base+0x938>
   189a4:	mov	r1, r6
   189a8:	bl	1c27c <main@@Base+0x64ec>
   189ac:	b	18a2c <main@@Base+0x2c9c>
   189b0:	str	r4, [sp]
   189b4:	ldr	r0, [sp, #28]
   189b8:	mov	r1, r7
   189bc:	mov	r2, r5
   189c0:	movw	r3, #33100	; 0x814c
   189c4:	movt	r3, #4
   189c8:	bl	1c330 <main@@Base+0x65a0>
   189cc:	mov	r8, r0
   189d0:	cmp	r0, r7
   189d4:	mov	r4, r5
   189d8:	cmpne	r8, r4
   189dc:	beq	166c8 <main@@Base+0x938>
   189e0:	ldr	r6, [sp, #32]
   189e4:	ldr	r7, [sp, #36]	; 0x24
   189e8:	orrs	r0, r6, r7
   189ec:	bne	18a00 <main@@Base+0x2c70>
   189f0:	ldr	r0, [sp, #28]
   189f4:	ldrb	r0, [r0, #8]
   189f8:	tst	r0, #2
   189fc:	beq	18a2c <main@@Base+0x2c9c>
   18a00:	ldr	r0, [sp, #28]
   18a04:	ldr	r0, [r0]
   18a08:	mov	r1, #19
   18a0c:	mov	r2, #8
   18a10:	mov	r3, #8
   18a14:	bl	23540 <flatcc_builder_table_add@@Base>
   18a18:	cmp	r0, #0
   18a1c:	beq	166c8 <main@@Base+0x938>
   18a20:	mov	r2, r6
   18a24:	mov	r3, r7
   18a28:	bl	1c45c <main@@Base+0x66cc>
   18a2c:	ldr	r6, [sp, #24]
   18a30:	b	16778 <main@@Base+0x9e8>
   18a34:	str	r4, [sp]
   18a38:	ldr	r0, [sp, #28]
   18a3c:	mov	r1, r6
   18a40:	mov	r2, r5
   18a44:	movw	r3, #33040	; 0x8110
   18a48:	movt	r3, #4
   18a4c:	bl	1bdac <main@@Base+0x601c>
   18a50:	mov	r8, r0
   18a54:	cmp	r0, r6
   18a58:	mov	r4, r5
   18a5c:	cmpne	r8, r4
   18a60:	beq	166c8 <main@@Base+0x938>
   18a64:	ldr	r6, [sp, #32]
   18a68:	cmp	r6, #0
   18a6c:	bne	18a80 <main@@Base+0x2cf0>
   18a70:	ldr	r0, [sp, #28]
   18a74:	ldrb	r0, [r0, #8]
   18a78:	tst	r0, #2
   18a7c:	beq	18a2c <main@@Base+0x2c9c>
   18a80:	ldr	r0, [sp, #28]
   18a84:	ldr	r0, [r0]
   18a88:	mov	r1, #20
   18a8c:	b	18458 <main@@Base+0x26c8>
   18a90:	ldr	r0, [sp, #28]
   18a94:	ldr	r0, [r0]
   18a98:	bl	230a8 <flatcc_builder_end_vector@@Base>
   18a9c:	str	r0, [sp, #48]	; 0x30
   18aa0:	cmp	r0, #0
   18aa4:	beq	166c8 <main@@Base+0x938>
   18aa8:	ldr	r0, [sp, #28]
   18aac:	ldr	r0, [r0]
   18ab0:	mov	r1, #13
   18ab4:	bl	2347c <flatcc_builder_table_add_offset@@Base>
   18ab8:	cmp	r0, #0
   18abc:	beq	166c8 <main@@Base+0x938>
   18ac0:	ldr	r1, [sp, #48]	; 0x30
   18ac4:	str	r1, [r0]
   18ac8:	b	16778 <main@@Base+0x9e8>
   18acc:	str	r4, [sp]
   18ad0:	ldr	r0, [sp, #28]
   18ad4:	mov	r1, r6
   18ad8:	mov	r2, r5
   18adc:	movw	r3, #33064	; 0x8128
   18ae0:	movt	r3, #4
   18ae4:	bl	1bf7c <main@@Base+0x61ec>
   18ae8:	mov	r8, r0
   18aec:	cmp	r0, r6
   18af0:	mov	r4, r5
   18af4:	cmpne	r8, r4
   18af8:	beq	166c8 <main@@Base+0x938>
   18afc:	ldr	r6, [sp, #32]
   18b00:	ldr	r7, [sp, #36]	; 0x24
   18b04:	orrs	r0, r6, r7
   18b08:	bne	18b1c <main@@Base+0x2d8c>
   18b0c:	ldr	r0, [sp, #28]
   18b10:	ldrb	r0, [r0, #8]
   18b14:	tst	r0, #2
   18b18:	beq	18a2c <main@@Base+0x2c9c>
   18b1c:	ldr	r0, [sp, #28]
   18b20:	ldr	r0, [r0]
   18b24:	mov	r1, #22
   18b28:	mov	r2, #8
   18b2c:	mov	r3, #8
   18b30:	bl	23540 <flatcc_builder_table_add@@Base>
   18b34:	cmp	r0, #0
   18b38:	beq	166c8 <main@@Base+0x938>
   18b3c:	mov	r2, r6
   18b40:	mov	r3, r7
   18b44:	bl	1c0a8 <main@@Base+0x6318>
   18b48:	b	18a2c <main@@Base+0x2c9c>
   18b4c:	str	r4, [sp]
   18b50:	ldr	r0, [sp, #28]
   18b54:	mov	r1, r6
   18b58:	mov	r2, r5
   18b5c:	movw	r3, #33088	; 0x8140
   18b60:	movt	r3, #4
   18b64:	bl	1c160 <main@@Base+0x63d0>
   18b68:	mov	r8, r0
   18b6c:	cmp	r0, r6
   18b70:	mov	r4, r5
   18b74:	cmpne	r8, r4
   18b78:	beq	166c8 <main@@Base+0x938>
   18b7c:	ldr	r6, [sp, #32]
   18b80:	cmp	r6, #0
   18b84:	bne	18b98 <main@@Base+0x2e08>
   18b88:	ldr	r0, [sp, #28]
   18b8c:	ldrb	r0, [r0, #8]
   18b90:	tst	r0, #2
   18b94:	beq	18a2c <main@@Base+0x2c9c>
   18b98:	ldr	r0, [sp, #28]
   18b9c:	ldr	r0, [r0]
   18ba0:	mov	r1, #21
   18ba4:	b	18990 <main@@Base+0x2c00>
   18ba8:	str	r4, [sp]
   18bac:	ldr	r0, [sp, #28]
   18bb0:	mov	r1, r6
   18bb4:	mov	r2, r5
   18bb8:	movw	r3, #33112	; 0x8158
   18bbc:	movt	r3, #4
   18bc0:	bl	1c330 <main@@Base+0x65a0>
   18bc4:	mov	r8, r0
   18bc8:	cmp	r0, r6
   18bcc:	mov	r4, r5
   18bd0:	cmpne	r8, r4
   18bd4:	beq	166c8 <main@@Base+0x938>
   18bd8:	ldr	r6, [sp, #32]
   18bdc:	ldr	r7, [sp, #36]	; 0x24
   18be0:	orrs	r0, r6, r7
   18be4:	bne	18bf8 <main@@Base+0x2e68>
   18be8:	ldr	r0, [sp, #28]
   18bec:	ldrb	r0, [r0, #8]
   18bf0:	tst	r0, #2
   18bf4:	beq	18a2c <main@@Base+0x2c9c>
   18bf8:	ldr	r0, [sp, #28]
   18bfc:	ldr	r0, [r0]
   18c00:	mov	r1, #23
   18c04:	b	18a0c <main@@Base+0x2c7c>
   18c08:	ldr	r0, [sp, #28]
   18c0c:	ldr	r0, [r0, #20]
   18c10:	cmp	r0, #0
   18c14:	bne	166c8 <main@@Base+0x938>
   18c18:	ldr	r0, [sp, #28]
   18c1c:	ldr	r0, [r0]
   18c20:	mov	r1, #3
   18c24:	bl	22cd4 <flatcc_builder_check_required_field@@Base>
   18c28:	cmp	r0, #0
   18c2c:	beq	18c64 <main@@Base+0x2ed4>
   18c30:	ldr	r3, [sp, #44]	; 0x2c
   18c34:	ldr	r5, [sp, #28]
   18c38:	mov	r0, r5
   18c3c:	mov	r1, r8
   18c40:	mov	r2, r4
   18c44:	bl	27a3c <flatcc_json_parser_finalize_unions@@Base>
   18c48:	mov	r8, r0
   18c4c:	ldr	r0, [r5]
   18c50:	bl	22e50 <flatcc_builder_end_table@@Base>
   18c54:	str	r0, [r6]
   18c58:	cmp	r0, #0
   18c5c:	bne	166e0 <main@@Base+0x950>
   18c60:	b	166c8 <main@@Base+0x938>
   18c64:	ldr	r0, [sp, #28]
   18c68:	mov	r1, r8
   18c6c:	mov	r2, r4
   18c70:	mov	r3, #29
   18c74:	bl	25fa0 <flatcc_json_parser_set_error@@Base>
   18c78:	mov	r8, r0
   18c7c:	b	166c8 <main@@Base+0x938>
   18c80:	ldr	r4, [sp, #20]
   18c84:	b	166c8 <main@@Base+0x938>
   18c88:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   18c8c:	add	fp, sp, #28
   18c90:	sub	sp, sp, #20
   18c94:	mov	r4, r1
   18c98:	mov	r5, r0
   18c9c:	movw	r0, #65400	; 0xff78
   18ca0:	movt	r0, #1
   18ca4:	mov	r1, #3
   18ca8:	str	r1, [sp]
   18cac:	str	r0, [sp, #4]
   18cb0:	mov	r8, #0
   18cb4:	movw	r3, #16711	; 0x4147
   18cb8:	movt	r3, #3
   18cbc:	mov	r0, r5
   18cc0:	mov	r1, r4
   18cc4:	mov	r2, #0
   18cc8:	bl	2f694 <flatcc_json_printer_struct_field@@Base>
   18ccc:	mov	r0, #150	; 0x96
   18cd0:	mov	r1, #4
   18cd4:	str	r1, [sp]
   18cd8:	mov	r6, #4
   18cdc:	str	r0, [sp, #4]
   18ce0:	movw	r3, #16715	; 0x414b
   18ce4:	movt	r3, #3
   18ce8:	mov	r0, r5
   18cec:	mov	r1, r4
   18cf0:	mov	r2, #1
   18cf4:	bl	2ab1c <flatcc_json_printer_int16_field@@Base>
   18cf8:	mov	r0, #100	; 0x64
   18cfc:	mov	r1, #2
   18d00:	str	r1, [sp]
   18d04:	str	r0, [sp, #4]
   18d08:	movw	r3, #16720	; 0x4150
   18d0c:	movt	r3, #3
   18d10:	mov	r0, r5
   18d14:	mov	r1, r4
   18d18:	mov	r2, #2
   18d1c:	bl	2ab1c <flatcc_json_printer_int16_field@@Base>
   18d20:	str	r6, [sp]
   18d24:	movw	r3, #16723	; 0x4153
   18d28:	movt	r3, #3
   18d2c:	mov	r0, r5
   18d30:	mov	r1, r4
   18d34:	mov	r2, #3
   18d38:	bl	2a3e0 <flatcc_json_printer_string_field@@Base>
   18d3c:	mov	r0, #9
   18d40:	str	r0, [sp]
   18d44:	mov	r7, #5
   18d48:	movw	r3, #16728	; 0x4158
   18d4c:	movt	r3, #3
   18d50:	mov	r0, r5
   18d54:	mov	r1, r4
   18d58:	mov	r2, #5
   18d5c:	bl	2c350 <flatcc_json_printer_uint8_vector_field@@Base>
   18d60:	movw	r0, #116	; 0x74
   18d64:	movt	r0, #2
   18d68:	mov	r1, #8
   18d6c:	str	r7, [sp]
   18d70:	mov	r7, #5
   18d74:	str	r1, [sp, #4]
   18d78:	str	r0, [sp, #8]
   18d7c:	movw	r3, #16738	; 0x4162
   18d80:	movt	r3, #3
   18d84:	mov	r0, r5
   18d88:	mov	r1, r4
   18d8c:	mov	r2, #6
   18d90:	bl	2b3b0 <flatcc_json_printer_int8_enum_field@@Base>
   18d94:	movw	r0, #448	; 0x1c0
   18d98:	movt	r0, #2
   18d9c:	movw	r1, #332	; 0x14c
   18da0:	movt	r1, #2
   18da4:	str	r6, [sp]
   18da8:	str	r1, [sp, #4]
   18dac:	str	r0, [sp, #8]
   18db0:	movw	r3, #17114	; 0x42da
   18db4:	movt	r3, #3
   18db8:	mov	r0, r5
   18dbc:	mov	r1, r4
   18dc0:	mov	r2, #8
   18dc4:	bl	2f2e8 <flatcc_json_printer_union_field@@Base>
   18dc8:	movw	r0, #488	; 0x1e8
   18dcc:	movt	r0, #2
   18dd0:	str	r7, [sp]
   18dd4:	mov	sl, #5
   18dd8:	str	r6, [sp, #4]
   18ddc:	str	r0, [sp, #8]
   18de0:	movw	r3, #16744	; 0x4168
   18de4:	movt	r3, #3
   18de8:	mov	r0, r5
   18dec:	mov	r1, r4
   18df0:	mov	r2, #9
   18df4:	bl	2e8f0 <flatcc_json_printer_struct_vector_field@@Base>
   18df8:	mov	r7, #17
   18dfc:	str	r7, [sp]
   18e00:	movw	r3, #16750	; 0x416e
   18e04:	movt	r3, #3
   18e08:	mov	r0, r5
   18e0c:	mov	r1, r4
   18e10:	mov	r2, #10
   18e14:	bl	2eb78 <flatcc_json_printer_string_vector_field@@Base>
   18e18:	movw	r9, #35976	; 0x8c88
   18e1c:	movt	r9, #1
   18e20:	stm	sp, {r7, r9}
   18e24:	movw	r3, #16768	; 0x4180
   18e28:	movt	r3, #3
   18e2c:	mov	r0, r5
   18e30:	mov	r1, r4
   18e34:	mov	r2, #11
   18e38:	bl	2ed28 <flatcc_json_printer_table_vector_field@@Base>
   18e3c:	str	sl, [sp]
   18e40:	mov	sl, #5
   18e44:	str	r9, [sp, #4]
   18e48:	movw	r3, #16786	; 0x4192
   18e4c:	movt	r3, #3
   18e50:	mov	r0, r5
   18e54:	mov	r1, r4
   18e58:	mov	r2, #12
   18e5c:	bl	2f25c <flatcc_json_printer_table_field@@Base>
   18e60:	mov	r0, #20
   18e64:	stm	sp, {r0, r8, r9}
   18e68:	movw	r3, #16792	; 0x4198
   18e6c:	movt	r3, #3
   18e70:	mov	r0, r5
   18e74:	mov	r1, r4
   18e78:	mov	r2, #13
   18e7c:	bl	2faf4 <flatcc_json_printer_table_as_nested_root@@Base>
   18e80:	movw	r0, #584	; 0x248
   18e84:	movt	r0, #2
   18e88:	mov	r1, #9
   18e8c:	str	r1, [sp]
   18e90:	str	r0, [sp, #4]
   18e94:	movw	r3, #16813	; 0x41ad
   18e98:	movt	r3, #3
   18e9c:	mov	r0, r5
   18ea0:	mov	r1, r4
   18ea4:	mov	r2, #14
   18ea8:	bl	2f25c <flatcc_json_printer_table_field@@Base>
   18eac:	mov	r9, #8
   18eb0:	str	r9, [sp]
   18eb4:	mov	r0, #1
   18eb8:	str	r0, [sp, #4]
   18ebc:	movw	r3, #16823	; 0x41b7
   18ec0:	movt	r3, #3
   18ec4:	mov	r0, r5
   18ec8:	mov	r1, r4
   18ecc:	mov	r2, #15
   18ed0:	bl	2ad68 <flatcc_json_printer_bool_field@@Base>
   18ed4:	mov	r6, #16
   18ed8:	stm	sp, {r6, r8}
   18edc:	movw	r3, #16832	; 0x41c0
   18ee0:	movt	r3, #3
   18ee4:	mov	r0, r5
   18ee8:	mov	r1, r4
   18eec:	mov	r2, #16
   18ef0:	bl	2abd4 <flatcc_json_printer_int32_field@@Base>
   18ef4:	stm	sp, {r6, r8}
   18ef8:	movw	r3, #16849	; 0x41d1
   18efc:	movt	r3, #3
   18f00:	mov	r0, r5
   18f04:	mov	r1, r4
   18f08:	mov	r2, #17
   18f0c:	bl	2a8d0 <flatcc_json_printer_uint32_field@@Base>
   18f10:	str	r8, [sp, #8]
   18f14:	str	r8, [sp, #12]
   18f18:	str	r6, [sp]
   18f1c:	movw	r3, #16866	; 0x41e2
   18f20:	movt	r3, #3
   18f24:	mov	r0, r5
   18f28:	mov	r1, r4
   18f2c:	mov	r2, #18
   18f30:	bl	2ac8c <flatcc_json_printer_int64_field@@Base>
   18f34:	str	r8, [sp, #8]
   18f38:	str	r8, [sp, #12]
   18f3c:	str	r6, [sp]
   18f40:	movw	r3, #16883	; 0x41f3
   18f44:	movt	r3, #3
   18f48:	mov	r0, r5
   18f4c:	mov	r1, r4
   18f50:	mov	r2, #19
   18f54:	bl	2a988 <flatcc_json_printer_uint64_field@@Base>
   18f58:	stm	sp, {r7, r8}
   18f5c:	movw	r3, #16900	; 0x4204
   18f60:	movt	r3, #3
   18f64:	mov	r0, r5
   18f68:	mov	r1, r4
   18f6c:	mov	r2, #20
   18f70:	bl	2abd4 <flatcc_json_printer_int32_field@@Base>
   18f74:	stm	sp, {r7, r8}
   18f78:	movw	r3, #16918	; 0x4216
   18f7c:	movt	r3, #3
   18f80:	mov	r0, r5
   18f84:	mov	r1, r4
   18f88:	mov	r2, #21
   18f8c:	bl	2a8d0 <flatcc_json_printer_uint32_field@@Base>
   18f90:	str	r8, [sp, #8]
   18f94:	str	r8, [sp, #12]
   18f98:	str	r7, [sp]
   18f9c:	movw	r3, #16936	; 0x4228
   18fa0:	movt	r3, #3
   18fa4:	mov	r0, r5
   18fa8:	mov	r1, r4
   18fac:	mov	r2, #22
   18fb0:	bl	2ac8c <flatcc_json_printer_int64_field@@Base>
   18fb4:	str	r8, [sp, #8]
   18fb8:	str	r8, [sp, #12]
   18fbc:	str	r7, [sp]
   18fc0:	mov	r8, #23
   18fc4:	movw	r3, #16954	; 0x423a
   18fc8:	movt	r3, #3
   18fcc:	mov	r0, r5
   18fd0:	mov	r1, r4
   18fd4:	mov	r2, #23
   18fd8:	bl	2a988 <flatcc_json_printer_uint64_field@@Base>
   18fdc:	str	r6, [sp]
   18fe0:	movw	r3, #16972	; 0x424c
   18fe4:	movt	r3, #3
   18fe8:	mov	r0, r5
   18fec:	mov	r1, r4
   18ff0:	mov	r2, #24
   18ff4:	bl	2d150 <flatcc_json_printer_bool_vector_field@@Base>
   18ff8:	str	sl, [sp]
   18ffc:	vldr	s0, [pc, #392]	; 1918c <main@@Base+0x33fc>
   19000:	movw	r3, #16989	; 0x425d
   19004:	movt	r3, #3
   19008:	mov	r0, r5
   1900c:	mov	r1, r4
   19010:	mov	r2, #25
   19014:	bl	2ae60 <flatcc_json_printer_float_field@@Base>
   19018:	mov	r6, #6
   1901c:	str	r6, [sp]
   19020:	movw	r3, #16995	; 0x4263
   19024:	movt	r3, #3
   19028:	vmov.f32	s0, #8	; 0x40400000  3.0
   1902c:	mov	r0, r5
   19030:	mov	r1, r4
   19034:	mov	r2, #26
   19038:	bl	2ae60 <flatcc_json_printer_float_field@@Base>
   1903c:	str	r6, [sp]
   19040:	vldr	s0, [pc, #328]	; 19190 <main@@Base+0x3400>
   19044:	movw	r3, #17002	; 0x426a
   19048:	movt	r3, #3
   1904c:	mov	r0, r5
   19050:	mov	r1, r4
   19054:	mov	r2, #27
   19058:	bl	2ae60 <flatcc_json_printer_float_field@@Base>
   1905c:	mov	r0, #18
   19060:	str	r0, [sp]
   19064:	movw	r3, #17009	; 0x4271
   19068:	movt	r3, #3
   1906c:	mov	r0, r5
   19070:	mov	r1, r4
   19074:	mov	r2, #28
   19078:	bl	2eb78 <flatcc_json_printer_string_vector_field@@Base>
   1907c:	movw	r0, #716	; 0x2cc
   19080:	movt	r0, #2
   19084:	stm	sp, {r8, r9}
   19088:	str	r0, [sp, #8]
   1908c:	movw	r3, #17028	; 0x4284
   19090:	movt	r3, #3
   19094:	mov	r0, r5
   19098:	mov	r1, r4
   1909c:	mov	r2, #29
   190a0:	bl	2e8f0 <flatcc_json_printer_struct_vector_field@@Base>
   190a4:	mov	r6, #4
   190a8:	str	r6, [sp]
   190ac:	movw	r3, #17052	; 0x429c
   190b0:	movt	r3, #3
   190b4:	mov	r0, r5
   190b8:	mov	r1, r4
   190bc:	mov	r2, #30
   190c0:	bl	2c350 <flatcc_json_printer_uint8_vector_field@@Base>
   190c4:	str	sl, [sp]
   190c8:	str	r6, [sp, #4]
   190cc:	movw	r0, #488	; 0x1e8
   190d0:	movt	r0, #2
   190d4:	str	r0, [sp, #8]
   190d8:	movw	r3, #17057	; 0x42a1
   190dc:	movt	r3, #3
   190e0:	mov	r0, r5
   190e4:	mov	r1, r4
   190e8:	mov	r2, #31
   190ec:	bl	2e8f0 <flatcc_json_printer_struct_vector_field@@Base>
   190f0:	mov	r0, #15
   190f4:	str	r0, [sp]
   190f8:	movw	r3, #17063	; 0x42a7
   190fc:	movt	r3, #3
   19100:	mov	r0, r5
   19104:	mov	r1, r4
   19108:	mov	r2, #32
   1910c:	bl	2cf90 <flatcc_json_printer_int64_vector_field@@Base>
   19110:	str	r7, [sp]
   19114:	movw	r3, #17079	; 0x42b7
   19118:	movt	r3, #3
   1911c:	mov	r0, r5
   19120:	mov	r1, r4
   19124:	mov	r2, #33	; 0x21
   19128:	bl	2d4d8 <flatcc_json_printer_double_vector_field@@Base>
   1912c:	movw	r0, #824	; 0x338
   19130:	movt	r0, #2
   19134:	mov	r1, #21
   19138:	str	r1, [sp]
   1913c:	str	r0, [sp, #4]
   19140:	movw	r3, #17097	; 0x42c9
   19144:	movt	r3, #3
   19148:	mov	r0, r5
   1914c:	mov	r1, r4
   19150:	mov	r2, #34	; 0x22
   19154:	bl	2f25c <flatcc_json_printer_table_field@@Base>
   19158:	movw	r0, #828	; 0x33c
   1915c:	movt	r0, #2
   19160:	mov	r1, #10
   19164:	str	r1, [sp]
   19168:	str	r0, [sp, #4]
   1916c:	movw	r3, #17119	; 0x42df
   19170:	movt	r3, #3
   19174:	mov	r0, r5
   19178:	mov	r1, r4
   1917c:	mov	r2, #35	; 0x23
   19180:	bl	2f25c <flatcc_json_printer_table_field@@Base>
   19184:	sub	sp, fp, #28
   19188:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1918c:	ldmmi	r9, {r5, r6, r7, r8, sl, sp, lr}
   19190:	andeq	r0, r0, r0
   19194:	push	{r4, r5, r6, r7, fp, lr}
   19198:	add	fp, sp, #16
   1919c:	sub	sp, sp, #8
   191a0:	mov	r4, r0
   191a4:	mov	r1, #0
   191a8:	mov	r2, #32
   191ac:	mov	r3, #16
   191b0:	bl	249b8 <flatcc_verify_field@@Base>
   191b4:	cmp	r0, #0
   191b8:	bne	195c0 <main@@Base+0x3830>
   191bc:	mov	r0, r4
   191c0:	mov	r1, #2
   191c4:	mov	r2, #2
   191c8:	mov	r3, #2
   191cc:	bl	249b8 <flatcc_verify_field@@Base>
   191d0:	cmp	r0, #0
   191d4:	bne	195c0 <main@@Base+0x3830>
   191d8:	mov	r0, r4
   191dc:	mov	r1, #1
   191e0:	mov	r2, #2
   191e4:	mov	r3, #2
   191e8:	bl	249b8 <flatcc_verify_field@@Base>
   191ec:	cmp	r0, #0
   191f0:	bne	195c0 <main@@Base+0x3830>
   191f4:	mov	r0, r4
   191f8:	mov	r1, #3
   191fc:	mov	r2, #1
   19200:	bl	24a24 <flatcc_verify_string_field@@Base>
   19204:	cmp	r0, #0
   19208:	bne	195c0 <main@@Base+0x3830>
   1920c:	mov	r5, #1
   19210:	mov	r0, r4
   19214:	mov	r1, #6
   19218:	mov	r2, #1
   1921c:	mov	r3, #1
   19220:	bl	249b8 <flatcc_verify_field@@Base>
   19224:	cmp	r0, #0
   19228:	bne	195c0 <main@@Base+0x3830>
   1922c:	mvn	r0, #0
   19230:	str	r5, [sp]
   19234:	str	r0, [sp, #4]
   19238:	mov	r0, r4
   1923c:	mov	r1, #5
   19240:	mov	r2, #0
   19244:	mov	r3, #1
   19248:	bl	24b78 <flatcc_verify_vector_field@@Base>
   1924c:	cmp	r0, #0
   19250:	bne	195c0 <main@@Base+0x3830>
   19254:	movw	r3, #37268	; 0x9194
   19258:	movt	r3, #1
   1925c:	mov	r0, r4
   19260:	mov	r1, #11
   19264:	mov	r2, #0
   19268:	bl	24ee4 <flatcc_verify_table_vector_field@@Base>
   1926c:	cmp	r0, #0
   19270:	bne	195c0 <main@@Base+0x3830>
   19274:	mov	r0, r4
   19278:	mov	r1, #10
   1927c:	mov	r2, #0
   19280:	bl	24c68 <flatcc_verify_string_vector_field@@Base>
   19284:	cmp	r0, #0
   19288:	bne	195c0 <main@@Base+0x3830>
   1928c:	mov	r0, r4
   19290:	mov	r1, #28
   19294:	mov	r2, #0
   19298:	bl	24c68 <flatcc_verify_string_vector_field@@Base>
   1929c:	cmp	r0, #0
   192a0:	bne	195c0 <main@@Base+0x3830>
   192a4:	mvn	r0, #0
   192a8:	mov	r1, #1
   192ac:	str	r1, [sp]
   192b0:	str	r0, [sp, #4]
   192b4:	mov	r0, r4
   192b8:	mov	r1, #24
   192bc:	mov	r2, #0
   192c0:	mov	r3, #1
   192c4:	bl	24b78 <flatcc_verify_vector_field@@Base>
   192c8:	cmp	r0, #0
   192cc:	bne	195c0 <main@@Base+0x3830>
   192d0:	mvn	r0, #-536870912	; 0xe0000000
   192d4:	mov	r1, #4
   192d8:	str	r1, [sp]
   192dc:	str	r0, [sp, #4]
   192e0:	mov	r0, r4
   192e4:	mov	r1, #29
   192e8:	mov	r2, #0
   192ec:	mov	r3, #8
   192f0:	bl	24b78 <flatcc_verify_vector_field@@Base>
   192f4:	cmp	r0, #0
   192f8:	bne	195c0 <main@@Base+0x3830>
   192fc:	movw	r5, #37268	; 0x9194
   19300:	movt	r5, #1
   19304:	mov	r0, r4
   19308:	mov	r1, #12
   1930c:	mov	r2, #0
   19310:	mov	r3, r5
   19314:	bl	24d70 <flatcc_verify_table_field@@Base>
   19318:	cmp	r0, #0
   1931c:	bne	195c0 <main@@Base+0x3830>
   19320:	movw	r3, #2668	; 0xa6c
   19324:	movt	r3, #2
   19328:	mov	r0, r4
   1932c:	mov	r1, #8
   19330:	mov	r2, #0
   19334:	bl	255ac <flatcc_verify_union_field@@Base>
   19338:	cmp	r0, #0
   1933c:	bne	195c0 <main@@Base+0x3830>
   19340:	mvn	r6, #-1073741824	; 0xc0000000
   19344:	mov	r7, #2
   19348:	str	r7, [sp]
   1934c:	str	r6, [sp, #4]
   19350:	mov	r0, r4
   19354:	mov	r1, #9
   19358:	mov	r2, #0
   1935c:	mov	r3, #4
   19360:	bl	24b78 <flatcc_verify_vector_field@@Base>
   19364:	cmp	r0, #0
   19368:	bne	195c0 <main@@Base+0x3830>
   1936c:	str	r7, [sp]
   19370:	str	r6, [sp, #4]
   19374:	mov	r0, r4
   19378:	mov	r1, #31
   1937c:	mov	r2, #0
   19380:	mov	r3, #4
   19384:	bl	24b78 <flatcc_verify_vector_field@@Base>
   19388:	cmp	r0, #0
   1938c:	bne	195c0 <main@@Base+0x3830>
   19390:	mov	r0, #1
   19394:	stm	sp, {r0, r5}
   19398:	mov	r0, r4
   1939c:	mov	r1, #13
   193a0:	mov	r2, #0
   193a4:	mov	r3, #0
   193a8:	bl	254a0 <flatcc_verify_table_as_nested_root@@Base>
   193ac:	cmp	r0, #0
   193b0:	bne	195c0 <main@@Base+0x3830>
   193b4:	movw	r3, #2712	; 0xa98
   193b8:	movt	r3, #2
   193bc:	mov	r0, r4
   193c0:	mov	r1, #14
   193c4:	mov	r2, #0
   193c8:	bl	24d70 <flatcc_verify_table_field@@Base>
   193cc:	cmp	r0, #0
   193d0:	bne	195c0 <main@@Base+0x3830>
   193d4:	mov	r0, r4
   193d8:	mov	r1, #15
   193dc:	mov	r2, #1
   193e0:	mov	r3, #1
   193e4:	bl	249b8 <flatcc_verify_field@@Base>
   193e8:	cmp	r0, #0
   193ec:	bne	195c0 <main@@Base+0x3830>
   193f0:	mov	r0, r4
   193f4:	mov	r1, #16
   193f8:	mov	r2, #4
   193fc:	mov	r3, #4
   19400:	bl	249b8 <flatcc_verify_field@@Base>
   19404:	cmp	r0, #0
   19408:	bne	195c0 <main@@Base+0x3830>
   1940c:	mov	r0, r4
   19410:	mov	r1, #17
   19414:	mov	r2, #4
   19418:	mov	r3, #4
   1941c:	bl	249b8 <flatcc_verify_field@@Base>
   19420:	cmp	r0, #0
   19424:	bne	195c0 <main@@Base+0x3830>
   19428:	mov	r0, r4
   1942c:	mov	r1, #18
   19430:	mov	r2, #8
   19434:	mov	r3, #8
   19438:	bl	249b8 <flatcc_verify_field@@Base>
   1943c:	cmp	r0, #0
   19440:	bne	195c0 <main@@Base+0x3830>
   19444:	mov	r0, r4
   19448:	mov	r1, #19
   1944c:	mov	r2, #8
   19450:	mov	r3, #8
   19454:	bl	249b8 <flatcc_verify_field@@Base>
   19458:	cmp	r0, #0
   1945c:	bne	195c0 <main@@Base+0x3830>
   19460:	mov	r0, r4
   19464:	mov	r1, #20
   19468:	mov	r2, #4
   1946c:	mov	r3, #4
   19470:	bl	249b8 <flatcc_verify_field@@Base>
   19474:	cmp	r0, #0
   19478:	bne	195c0 <main@@Base+0x3830>
   1947c:	mov	r0, r4
   19480:	mov	r1, #21
   19484:	mov	r2, #4
   19488:	mov	r3, #4
   1948c:	bl	249b8 <flatcc_verify_field@@Base>
   19490:	cmp	r0, #0
   19494:	bne	195c0 <main@@Base+0x3830>
   19498:	mov	r0, r4
   1949c:	mov	r1, #22
   194a0:	mov	r2, #8
   194a4:	mov	r3, #8
   194a8:	bl	249b8 <flatcc_verify_field@@Base>
   194ac:	cmp	r0, #0
   194b0:	bne	195c0 <main@@Base+0x3830>
   194b4:	mov	r0, r4
   194b8:	mov	r1, #23
   194bc:	mov	r2, #8
   194c0:	mov	r3, #8
   194c4:	bl	249b8 <flatcc_verify_field@@Base>
   194c8:	cmp	r0, #0
   194cc:	bne	195c0 <main@@Base+0x3830>
   194d0:	mov	r0, r4
   194d4:	mov	r1, #25
   194d8:	mov	r2, #4
   194dc:	mov	r3, #4
   194e0:	bl	249b8 <flatcc_verify_field@@Base>
   194e4:	cmp	r0, #0
   194e8:	bne	195c0 <main@@Base+0x3830>
   194ec:	mov	r0, r4
   194f0:	mov	r1, #26
   194f4:	mov	r2, #4
   194f8:	mov	r3, #4
   194fc:	bl	249b8 <flatcc_verify_field@@Base>
   19500:	cmp	r0, #0
   19504:	bne	195c0 <main@@Base+0x3830>
   19508:	mov	r0, r4
   1950c:	mov	r1, #27
   19510:	mov	r2, #4
   19514:	mov	r3, #4
   19518:	bl	249b8 <flatcc_verify_field@@Base>
   1951c:	cmp	r0, #0
   19520:	bne	195c0 <main@@Base+0x3830>
   19524:	mvn	r0, #0
   19528:	mov	r1, #1
   1952c:	str	r1, [sp]
   19530:	str	r0, [sp, #4]
   19534:	mov	r0, r4
   19538:	mov	r1, #30
   1953c:	mov	r2, #0
   19540:	mov	r3, #1
   19544:	bl	24b78 <flatcc_verify_vector_field@@Base>
   19548:	cmp	r0, #0
   1954c:	bne	195c0 <main@@Base+0x3830>
   19550:	mvn	r5, #-536870912	; 0xe0000000
   19554:	mov	r6, #8
   19558:	str	r6, [sp]
   1955c:	str	r5, [sp, #4]
   19560:	mov	r0, r4
   19564:	mov	r1, #32
   19568:	mov	r2, #0
   1956c:	mov	r3, #8
   19570:	bl	24b78 <flatcc_verify_vector_field@@Base>
   19574:	cmp	r0, #0
   19578:	bne	195c0 <main@@Base+0x3830>
   1957c:	str	r6, [sp]
   19580:	str	r5, [sp, #4]
   19584:	mov	r0, r4
   19588:	mov	r1, #33	; 0x21
   1958c:	mov	r2, #0
   19590:	mov	r3, #8
   19594:	bl	24b78 <flatcc_verify_vector_field@@Base>
   19598:	cmp	r0, #0
   1959c:	bne	195c0 <main@@Base+0x3830>
   195a0:	movw	r3, #2800	; 0xaf0
   195a4:	movt	r3, #2
   195a8:	mov	r0, r4
   195ac:	mov	r1, #34	; 0x22
   195b0:	mov	r2, #0
   195b4:	bl	24d70 <flatcc_verify_table_field@@Base>
   195b8:	cmp	r0, #0
   195bc:	beq	195c8 <main@@Base+0x3838>
   195c0:	sub	sp, fp, #16
   195c4:	pop	{r4, r5, r6, r7, fp, pc}
   195c8:	movw	r3, #2808	; 0xaf8
   195cc:	movt	r3, #2
   195d0:	mov	r0, r4
   195d4:	mov	r1, #35	; 0x23
   195d8:	mov	r2, #0
   195dc:	sub	sp, fp, #16
   195e0:	pop	{r4, r5, r6, r7, fp, lr}
   195e4:	b	24d70 <flatcc_verify_table_field@@Base>
   195e8:	push	{r4, r5, r6, sl, fp, lr}
   195ec:	add	fp, sp, #16
   195f0:	mov	r5, r3
   195f4:	mov	r4, r2
   195f8:	mov	r6, r0
   195fc:	cmp	r1, r2
   19600:	beq	19650 <main@@Base+0x38c0>
   19604:	ldrb	r0, [r1]
   19608:	cmp	r0, #123	; 0x7b
   1960c:	bne	19650 <main@@Base+0x38c0>
   19610:	add	r1, r1, #1
   19614:	mov	r0, r6
   19618:	mov	r2, r4
   1961c:	bl	1c670 <main@@Base+0x68e0>
   19620:	cmp	r0, r4
   19624:	beq	1966c <main@@Base+0x38dc>
   19628:	ldrb	r1, [r0]
   1962c:	cmp	r1, #125	; 0x7d
   19630:	bne	1966c <main@@Base+0x38dc>
   19634:	mov	r1, #0
   19638:	str	r1, [r5]
   1963c:	add	r1, r0, #1
   19640:	mov	r0, r6
   19644:	mov	r2, r4
   19648:	pop	{r4, r5, r6, sl, fp, lr}
   1964c:	b	1c670 <main@@Base+0x68e0>
   19650:	mov	r0, #0
   19654:	str	r0, [r5]
   19658:	mov	r0, r6
   1965c:	mov	r2, r4
   19660:	mov	r3, #21
   19664:	pop	{r4, r5, r6, sl, fp, lr}
   19668:	b	25fa0 <flatcc_json_parser_set_error@@Base>
   1966c:	mov	r1, #1
   19670:	str	r1, [r5]
   19674:	pop	{r4, r5, r6, sl, fp, pc}
   19678:	cmp	r1, r2
   1967c:	beq	19690 <main@@Base+0x3900>
   19680:	ldrb	r3, [r1]
   19684:	cmp	r3, #34	; 0x22
   19688:	bne	19698 <main@@Base+0x3908>
   1968c:	add	r1, r1, #1
   19690:	mov	r0, r1
   19694:	bx	lr
   19698:	mov	r3, #5
   1969c:	b	25fa0 <flatcc_json_parser_set_error@@Base>
   196a0:	b	1c6a8 <main@@Base+0x6918>
   196a4:	push	{r4, r5, fp, lr}
   196a8:	add	fp, sp, #8
   196ac:	mov	r5, r0
   196b0:	sub	r0, r2, r1
   196b4:	cmp	r0, r3
   196b8:	ble	19708 <main@@Base+0x3978>
   196bc:	ldrb	r0, [r1, r3]
   196c0:	cmp	r0, #34	; 0x22
   196c4:	bne	19708 <main@@Base+0x3978>
   196c8:	mov	r4, r2
   196cc:	add	r0, r3, r1
   196d0:	add	r1, r0, #1
   196d4:	mov	r0, r5
   196d8:	bl	1c670 <main@@Base+0x68e0>
   196dc:	mov	r1, r0
   196e0:	cmp	r0, r4
   196e4:	beq	19710 <main@@Base+0x3980>
   196e8:	ldrb	r0, [r1]
   196ec:	cmp	r0, #58	; 0x3a
   196f0:	bne	19710 <main@@Base+0x3980>
   196f4:	add	r1, r1, #1
   196f8:	mov	r0, r5
   196fc:	mov	r2, r4
   19700:	pop	{r4, r5, fp, lr}
   19704:	b	1c670 <main@@Base+0x68e0>
   19708:	mov	r0, r1
   1970c:	pop	{r4, r5, fp, pc}
   19710:	mov	r0, r5
   19714:	mov	r2, r4
   19718:	mov	r3, #4
   1971c:	pop	{r4, r5, fp, lr}
   19720:	b	25fa0 <flatcc_json_parser_set_error@@Base>
   19724:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   19728:	add	fp, sp, #24
   1972c:	sub	sp, sp, #8
   19730:	mov	r9, r3
   19734:	mov	r6, r2
   19738:	mov	r5, r1
   1973c:	mov	r7, r0
   19740:	mov	r0, r1
   19744:	mov	r1, r2
   19748:	bl	196a0 <main@@Base+0x3910>
   1974c:	ldr	ip, [fp, #12]
   19750:	ldr	r8, [fp, #8]
   19754:	movw	r3, #25957	; 0x6565
   19758:	movt	r3, #18290	; 0x4772
   1975c:	mvn	r4, #-1845493760	; 0x92000000
   19760:	subs	r4, r4, r0
   19764:	sbcs	r4, r3, r1
   19768:	bcc	197a8 <main@@Base+0x3a18>
   1976c:	movw	r0, #30053	; 0x7565
   19770:	movt	r0, #17004	; 0x426c
   19774:	teq	r1, r0
   19778:	bne	19834 <main@@Base+0x3aa4>
   1977c:	str	ip, [sp]
   19780:	mov	r0, r7
   19784:	mov	r1, r5
   19788:	mov	r2, r6
   1978c:	mov	r3, #4
   19790:	bl	265ec <flatcc_json_parser_match_constant@@Base>
   19794:	cmp	r0, r5
   19798:	beq	19834 <main@@Base+0x3aa4>
   1979c:	mov	r1, #0
   197a0:	mov	r2, #8
   197a4:	b	19824 <main@@Base+0x3a94>
   197a8:	bic	r4, r1, #255	; 0xff
   197ac:	movw	r2, #25600	; 0x6400
   197b0:	movt	r2, #21093	; 0x5265
   197b4:	teq	r4, r2
   197b8:	bne	197e8 <main@@Base+0x3a58>
   197bc:	str	ip, [sp]
   197c0:	mov	r0, r7
   197c4:	mov	r1, r5
   197c8:	mov	r2, r6
   197cc:	mov	r3, #3
   197d0:	bl	265ec <flatcc_json_parser_match_constant@@Base>
   197d4:	cmp	r0, r5
   197d8:	beq	19834 <main@@Base+0x3aa4>
   197dc:	mov	r1, #0
   197e0:	mov	r2, #1
   197e4:	b	19824 <main@@Base+0x3a94>
   197e8:	eor	r1, r1, r3
   197ec:	and	r0, r0, #-16777216	; 0xff000000
   197f0:	eor	r0, r0, #1845493760	; 0x6e000000
   197f4:	orrs	r0, r0, r1
   197f8:	bne	19834 <main@@Base+0x3aa4>
   197fc:	str	ip, [sp]
   19800:	mov	r0, r7
   19804:	mov	r1, r5
   19808:	mov	r2, r6
   1980c:	mov	r3, #5
   19810:	bl	265ec <flatcc_json_parser_match_constant@@Base>
   19814:	cmp	r0, r5
   19818:	beq	19834 <main@@Base+0x3aa4>
   1981c:	mov	r1, #0
   19820:	mov	r2, #2
   19824:	str	r2, [r8]
   19828:	str	r1, [r8, #4]
   1982c:	str	r1, [r9]
   19830:	mov	r5, r0
   19834:	mov	r0, r5
   19838:	sub	sp, fp, #24
   1983c:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   19840:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   19844:	add	fp, sp, #28
   19848:	sub	sp, sp, #4
   1984c:	mov	r9, r3
   19850:	mov	r5, r2
   19854:	mov	r7, r1
   19858:	mov	sl, r0
   1985c:	mov	r0, r1
   19860:	mov	r1, r2
   19864:	bl	196a0 <main@@Base+0x3910>
   19868:	movw	r2, #30815	; 0x785f
   1986c:	movt	r2, #26725	; 0x6865
   19870:	movw	r4, #30061	; 0x756d
   19874:	movt	r4, #25966	; 0x656e
   19878:	subs	r3, r0, r4
   1987c:	sbcs	r3, r1, r2
   19880:	bcs	198e4 <main@@Base+0x3b54>
   19884:	bic	r3, r1, #255	; 0xff
   19888:	movw	r2, #27759	; 0x6c6f
   1988c:	movt	r2, #17263	; 0x436f
   19890:	mvn	r4, #-1912602624	; 0x8e000000
   19894:	subs	r4, r4, r0
   19898:	sbcs	r4, r2, r1
   1989c:	bcc	1993c <main@@Base+0x3bac>
   198a0:	movw	r0, #30976	; 0x7900
   198a4:	movt	r0, #16750	; 0x416e
   198a8:	teq	r3, r0
   198ac:	bne	19ad8 <main@@Base+0x3d48>
   198b0:	mov	r0, r7
   198b4:	mov	r1, r5
   198b8:	mov	r2, #3
   198bc:	bl	1c734 <main@@Base+0x69a4>
   198c0:	cmp	r0, r7
   198c4:	beq	19ad8 <main@@Base+0x3d48>
   198c8:	mov	r1, r0
   198cc:	mov	r0, sl
   198d0:	mov	r2, r5
   198d4:	mov	r3, r9
   198d8:	sub	sp, fp, #28
   198dc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   198e0:	b	1afac <main@@Base+0x521c>
   198e4:	add	r3, r2, #64512	; 0xfc00
   198e8:	add	r3, r3, #17301504	; 0x1080000
   198ec:	subs	r6, r0, r4
   198f0:	sbcs	r6, r1, r3
   198f4:	bcs	19980 <main@@Base+0x3bf0>
   198f8:	eor	r0, r0, r4
   198fc:	eor	r1, r1, r2
   19900:	orrs	r0, r0, r1
   19904:	bne	19ad8 <main@@Base+0x3d48>
   19908:	mov	r0, r7
   1990c:	mov	r1, r5
   19910:	mov	r2, #8
   19914:	bl	1c734 <main@@Base+0x69a4>
   19918:	cmp	r0, r7
   1991c:	beq	19ad8 <main@@Base+0x3d48>
   19920:	mov	r1, r0
   19924:	mov	r0, sl
   19928:	mov	r2, r5
   1992c:	mov	r3, r9
   19930:	sub	sp, fp, #28
   19934:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   19938:	b	1c86c <main@@Base+0x6adc>
   1993c:	movw	r4, #28416	; 0x6f00
   19940:	movt	r4, #18031	; 0x466f
   19944:	teq	r3, r4
   19948:	bne	199d8 <main@@Base+0x3c48>
   1994c:	mov	r0, r7
   19950:	mov	r1, r5
   19954:	mov	r2, #3
   19958:	bl	1c734 <main@@Base+0x69a4>
   1995c:	cmp	r0, r7
   19960:	beq	19ad8 <main@@Base+0x3d48>
   19964:	mov	r1, r0
   19968:	mov	r0, sl
   1996c:	mov	r2, r5
   19970:	mov	r3, r9
   19974:	sub	sp, fp, #28
   19978:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1997c:	b	1c754 <main@@Base+0x69c4>
   19980:	sub	r2, r2, #4352	; 0x1100
   19984:	sub	r2, r2, #-100663296	; 0xfa000000
   19988:	subs	r6, r0, r4
   1998c:	sbcs	r2, r1, r2
   19990:	bcs	19a20 <main@@Base+0x3c90>
   19994:	eor	r0, r0, r4
   19998:	eor	r1, r1, r3
   1999c:	orrs	r0, r0, r1
   199a0:	bne	19ad8 <main@@Base+0x3d48>
   199a4:	mov	r0, r7
   199a8:	mov	r1, r5
   199ac:	mov	r2, #8
   199b0:	bl	1c734 <main@@Base+0x69a4>
   199b4:	cmp	r0, r7
   199b8:	beq	19ad8 <main@@Base+0x3d48>
   199bc:	mov	r1, r0
   199c0:	mov	r0, sl
   199c4:	mov	r2, r5
   199c8:	mov	r3, r9
   199cc:	sub	sp, fp, #28
   199d0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   199d4:	b	1c994 <main@@Base+0x6c04>
   199d8:	eor	r1, r1, r2
   199dc:	and	r0, r0, #-16777216	; 0xff000000
   199e0:	eor	r0, r0, #1912602624	; 0x72000000
   199e4:	orrs	r0, r0, r1
   199e8:	bne	19ad8 <main@@Base+0x3d48>
   199ec:	mov	r0, r7
   199f0:	mov	r1, r5
   199f4:	mov	r2, #5
   199f8:	bl	1c734 <main@@Base+0x69a4>
   199fc:	cmp	r0, r7
   19a00:	beq	19ad8 <main@@Base+0x3d48>
   19a04:	mov	r1, r0
   19a08:	mov	r0, sl
   19a0c:	mov	r2, r5
   19a10:	mov	r3, r9
   19a14:	sub	sp, fp, #28
   19a18:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   19a1c:	b	19724 <main@@Base+0x3994>
   19a20:	movw	r2, #29817	; 0x7479
   19a24:	movt	r2, #28016	; 0x6d70
   19a28:	eor	r2, r0, r2
   19a2c:	movw	r3, #29797	; 0x7465
   19a30:	movt	r3, #28271	; 0x6e6f
   19a34:	eor	r3, r1, r3
   19a38:	orrs	r2, r2, r3
   19a3c:	beq	19a8c <main@@Base+0x3cfc>
   19a40:	eor	r0, r0, r4
   19a44:	movw	r2, #26463	; 0x675f
   19a48:	movt	r2, #28261	; 0x6e65
   19a4c:	eor	r1, r1, r2
   19a50:	orrs	r0, r0, r1
   19a54:	bne	19ad8 <main@@Base+0x3d48>
   19a58:	mov	r0, r7
   19a5c:	mov	r1, r5
   19a60:	mov	r2, #8
   19a64:	bl	1c734 <main@@Base+0x69a4>
   19a68:	cmp	r0, r7
   19a6c:	beq	19ad8 <main@@Base+0x3d48>
   19a70:	mov	r1, r0
   19a74:	mov	r0, sl
   19a78:	mov	r2, r5
   19a7c:	mov	r3, r9
   19a80:	sub	sp, fp, #28
   19a84:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   19a88:	b	1cb08 <main@@Base+0x6d78>
   19a8c:	add	r8, r7, #8
   19a90:	mov	r0, r8
   19a94:	mov	r1, r5
   19a98:	bl	196a0 <main@@Base+0x3910>
   19a9c:	teq	r1, r4
   19aa0:	bne	19ad8 <main@@Base+0x3d48>
   19aa4:	mov	r0, r8
   19aa8:	mov	r1, r5
   19aac:	mov	r2, #4
   19ab0:	bl	1c734 <main@@Base+0x69a4>
   19ab4:	cmp	r0, r8
   19ab8:	beq	19ad8 <main@@Base+0x3d48>
   19abc:	mov	r1, r0
   19ac0:	mov	r0, sl
   19ac4:	mov	r2, r5
   19ac8:	mov	r3, r9
   19acc:	sub	sp, fp, #28
   19ad0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   19ad4:	b	1cc18 <main@@Base+0x6e88>
   19ad8:	mov	r0, r7
   19adc:	sub	sp, fp, #28
   19ae0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   19ae4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   19ae8:	add	fp, sp, #28
   19aec:	sub	sp, sp, #4
   19af0:	mov	sl, r3
   19af4:	mov	r5, r2
   19af8:	mov	r7, r1
   19afc:	mov	r8, r0
   19b00:	mov	r0, r1
   19b04:	mov	r1, r2
   19b08:	bl	196a0 <main@@Base+0x3910>
   19b0c:	movw	r2, #18273	; 0x4761
   19b10:	movt	r2, #19833	; 0x4d79
   19b14:	movw	r3, #11844	; 0x2e44
   19b18:	movt	r3, #28005	; 0x6d65
   19b1c:	subs	r3, r3, r0
   19b20:	sbcs	r3, r2, r1
   19b24:	bcc	19bc4 <main@@Base+0x3e34>
   19b28:	movw	r2, #31022	; 0x792e
   19b2c:	movt	r2, #24947	; 0x6173
   19b30:	eor	r0, r0, r2
   19b34:	movw	r2, #28276	; 0x6e74
   19b38:	movt	r2, #18017	; 0x4661
   19b3c:	eor	r1, r1, r2
   19b40:	orrs	r0, r0, r1
   19b44:	bne	1a050 <main@@Base+0x42c0>
   19b48:	add	r0, r7, #8
   19b4c:	mov	r1, r5
   19b50:	bl	196a0 <main@@Base+0x3910>
   19b54:	movw	r2, #24946	; 0x6172
   19b58:	movt	r2, #17256	; 0x4368
   19b5c:	eor	r1, r1, r2
   19b60:	movw	r2, #29797	; 0x7465
   19b64:	movt	r2, #24931	; 0x6163
   19b68:	eor	r0, r0, r2
   19b6c:	orrs	r0, r0, r1
   19b70:	bne	1a050 <main@@Base+0x42c0>
   19b74:	add	r4, r7, #16
   19b78:	mov	r0, r4
   19b7c:	mov	r1, r5
   19b80:	bl	196a0 <main@@Base+0x3910>
   19b84:	and	r0, r1, #-16777216	; 0xff000000
   19b88:	teq	r0, #1912602624	; 0x72000000
   19b8c:	bne	1a050 <main@@Base+0x42c0>
   19b90:	mov	r0, r4
   19b94:	mov	r1, r5
   19b98:	mov	r2, #1
   19b9c:	bl	1c734 <main@@Base+0x69a4>
   19ba0:	cmp	r0, r4
   19ba4:	beq	1a050 <main@@Base+0x42c0>
   19ba8:	mov	r1, r0
   19bac:	mov	r0, r8
   19bb0:	mov	r2, r5
   19bb4:	mov	r3, sl
   19bb8:	sub	sp, fp, #28
   19bbc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   19bc0:	b	1cc94 <main@@Base+0x6f04>
   19bc4:	movw	r3, #11855	; 0x2e4f
   19bc8:	movt	r3, #28005	; 0x6d65
   19bcc:	eor	r3, r0, r3
   19bd0:	eor	r1, r1, r2
   19bd4:	orrs	r2, r3, r1
   19bd8:	beq	19c9c <main@@Base+0x3f0c>
   19bdc:	movw	r2, #11845	; 0x2e45
   19be0:	movt	r2, #28005	; 0x6d65
   19be4:	eor	r0, r0, r2
   19be8:	orrs	r0, r0, r1
   19bec:	bne	1a050 <main@@Base+0x42c0>
   19bf0:	add	r0, r7, #8
   19bf4:	mov	r1, r5
   19bf8:	bl	196a0 <main@@Base+0x3910>
   19bfc:	movw	r2, #28016	; 0x6d70
   19c00:	movt	r2, #30817	; 0x7861
   19c04:	movw	r3, #11880	; 0x2e68
   19c08:	movt	r3, #27749	; 0x6c65
   19c0c:	subs	r6, r0, r3
   19c10:	sbcs	r6, r1, r2
   19c14:	bcs	19d70 <main@@Base+0x3fe0>
   19c18:	subs	r6, r3, #37	; 0x25
   19c1c:	sbc	r4, r2, #0
   19c20:	subs	r6, r0, r6
   19c24:	sbcs	r6, r1, r4
   19c28:	bcs	19dec <main@@Base+0x405c>
   19c2c:	subs	r3, r3, #39	; 0x27
   19c30:	eor	r0, r0, r3
   19c34:	sbc	r2, r2, #0
   19c38:	eor	r1, r1, r2
   19c3c:	orrs	r0, r0, r1
   19c40:	bne	1a050 <main@@Base+0x42c0>
   19c44:	add	r4, r7, #16
   19c48:	mov	r0, r4
   19c4c:	mov	r1, r5
   19c50:	bl	196a0 <main@@Base+0x3910>
   19c54:	bfc	r1, #0, #16
   19c58:	movw	r0, #0
   19c5c:	movt	r0, #28281	; 0x6e79
   19c60:	teq	r1, r0
   19c64:	bne	1a050 <main@@Base+0x42c0>
   19c68:	mov	r0, r4
   19c6c:	mov	r1, r5
   19c70:	mov	r2, #2
   19c74:	bl	1c734 <main@@Base+0x69a4>
   19c78:	cmp	r0, r4
   19c7c:	beq	1a050 <main@@Base+0x42c0>
   19c80:	mov	r1, r0
   19c84:	mov	r0, r8
   19c88:	mov	r2, r5
   19c8c:	mov	r3, sl
   19c90:	sub	sp, fp, #28
   19c94:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   19c98:	b	1afac <main@@Base+0x521c>
   19c9c:	add	r0, r7, #8
   19ca0:	mov	r1, r5
   19ca4:	bl	196a0 <main@@Base+0x3910>
   19ca8:	movw	r2, #25970	; 0x6572
   19cac:	movt	r2, #29800	; 0x7468
   19cb0:	eor	r1, r1, r2
   19cb4:	movw	r2, #28005	; 0x6d65
   19cb8:	movt	r2, #20065	; 0x4e61
   19cbc:	eor	r0, r0, r2
   19cc0:	orrs	r0, r0, r1
   19cc4:	bne	1a050 <main@@Base+0x42c0>
   19cc8:	add	r0, r7, #16
   19ccc:	mov	r1, r5
   19cd0:	bl	196a0 <main@@Base+0x3910>
   19cd4:	movw	r2, #24931	; 0x6163
   19cd8:	movt	r2, #21360	; 0x5370
   19cdc:	eor	r1, r1, r2
   19ce0:	movw	r2, #18034	; 0x4672
   19ce4:	movt	r2, #25902	; 0x652e
   19ce8:	eor	r0, r0, r2
   19cec:	orrs	r0, r0, r1
   19cf0:	bne	1a050 <main@@Base+0x42c0>
   19cf4:	add	r0, r7, #24
   19cf8:	mov	r1, r5
   19cfc:	bl	196a0 <main@@Base+0x3910>
   19d00:	movw	r2, #18798	; 0x496e
   19d04:	movt	r2, #28525	; 0x6f6d
   19d08:	eor	r1, r1, r2
   19d0c:	movw	r2, #30052	; 0x7564
   19d10:	movt	r2, #25452	; 0x636c
   19d14:	eor	r0, r0, r2
   19d18:	orrs	r0, r0, r1
   19d1c:	bne	1a050 <main@@Base+0x42c0>
   19d20:	add	r4, r7, #32
   19d24:	mov	r0, r4
   19d28:	mov	r1, r5
   19d2c:	bl	196a0 <main@@Base+0x3910>
   19d30:	and	r0, r1, #-16777216	; 0xff000000
   19d34:	teq	r0, #1694498816	; 0x65000000
   19d38:	bne	1a050 <main@@Base+0x42c0>
   19d3c:	mov	r0, r4
   19d40:	mov	r1, r5
   19d44:	mov	r2, #1
   19d48:	bl	1c734 <main@@Base+0x69a4>
   19d4c:	cmp	r0, r4
   19d50:	beq	1a050 <main@@Base+0x42c0>
   19d54:	mov	r1, r0
   19d58:	mov	r0, r8
   19d5c:	mov	r2, r5
   19d60:	mov	r3, sl
   19d64:	sub	sp, fp, #28
   19d68:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   19d6c:	b	1cf18 <main@@Base+0x7188>
   19d70:	eor	r6, r0, r3
   19d74:	eor	r4, r1, r2
   19d78:	orrs	r6, r6, r4
   19d7c:	bne	19e6c <main@@Base+0x40dc>
   19d80:	add	r4, r7, #16
   19d84:	mov	r0, r4
   19d88:	mov	r1, r5
   19d8c:	bl	196a0 <main@@Base+0x3910>
   19d90:	movw	r2, #24421	; 0x5f65
   19d94:	movt	r2, #25959	; 0x6567
   19d98:	add	r2, r2, #1114112	; 0x110000
   19d9c:	eor	r1, r1, r2
   19da0:	bic	r0, r0, #255	; 0xff
   19da4:	movw	r2, #27904	; 0x6d00
   19da8:	movt	r2, #28277	; 0x6e75
   19dac:	eor	r0, r0, r2
   19db0:	orrs	r0, r0, r1
   19db4:	bne	1a050 <main@@Base+0x42c0>
   19db8:	mov	r0, r4
   19dbc:	mov	r1, r5
   19dc0:	mov	r2, #7
   19dc4:	bl	1c734 <main@@Base+0x69a4>
   19dc8:	cmp	r0, r4
   19dcc:	beq	1a050 <main@@Base+0x42c0>
   19dd0:	mov	r1, r0
   19dd4:	mov	r0, r8
   19dd8:	mov	r2, r5
   19ddc:	mov	r3, sl
   19de0:	sub	sp, fp, #28
   19de4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   19de8:	b	1c86c <main@@Base+0x6adc>
   19dec:	movw	r3, #11846	; 0x2e46
   19df0:	movt	r3, #27749	; 0x6c65
   19df4:	eor	r3, r0, r3
   19df8:	eor	r1, r1, r2
   19dfc:	orrs	r2, r3, r1
   19e00:	beq	19f7c <main@@Base+0x41ec>
   19e04:	movw	r2, #11843	; 0x2e43
   19e08:	movt	r2, #27749	; 0x6c65
   19e0c:	eor	r0, r0, r2
   19e10:	orrs	r0, r0, r1
   19e14:	bne	1a050 <main@@Base+0x42c0>
   19e18:	add	r4, r7, #16
   19e1c:	mov	r0, r4
   19e20:	mov	r1, r5
   19e24:	bl	196a0 <main@@Base+0x3910>
   19e28:	movw	r0, #28530	; 0x6f72
   19e2c:	movt	r0, #28524	; 0x6f6c
   19e30:	teq	r1, r0
   19e34:	bne	1a050 <main@@Base+0x42c0>
   19e38:	mov	r0, r4
   19e3c:	mov	r1, r5
   19e40:	mov	r2, #4
   19e44:	bl	1c734 <main@@Base+0x69a4>
   19e48:	cmp	r0, r4
   19e4c:	beq	1a050 <main@@Base+0x42c0>
   19e50:	mov	r1, r0
   19e54:	mov	r0, r8
   19e58:	mov	r2, r5
   19e5c:	mov	r3, sl
   19e60:	sub	sp, fp, #28
   19e64:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   19e68:	b	19724 <main@@Base+0x3994>
   19e6c:	add	ip, r3, #6
   19e70:	subs	r6, r0, ip
   19e74:	sbcs	r1, r1, r2
   19e78:	bcs	19efc <main@@Base+0x416c>
   19e7c:	add	r1, r3, #1
   19e80:	eor	r0, r0, r1
   19e84:	orrs	r0, r0, r4
   19e88:	bne	1a050 <main@@Base+0x42c0>
   19e8c:	add	r4, r7, #16
   19e90:	mov	r0, r4
   19e94:	mov	r1, r5
   19e98:	bl	196a0 <main@@Base+0x3910>
   19e9c:	movw	r2, #24421	; 0x5f65
   19ea0:	movt	r2, #25959	; 0x6567
   19ea4:	add	r2, r2, #851968	; 0xd0000
   19ea8:	add	r2, r2, #150994944	; 0x9000000
   19eac:	eor	r1, r1, r2
   19eb0:	bic	r0, r0, #255	; 0xff
   19eb4:	movw	r2, #27904	; 0x6d00
   19eb8:	movt	r2, #28277	; 0x6e75
   19ebc:	eor	r0, r0, r2
   19ec0:	orrs	r0, r0, r1
   19ec4:	bne	1a050 <main@@Base+0x42c0>
   19ec8:	mov	r0, r4
   19ecc:	mov	r1, r5
   19ed0:	mov	r2, #7
   19ed4:	bl	1c734 <main@@Base+0x69a4>
   19ed8:	cmp	r0, r4
   19edc:	beq	1a050 <main@@Base+0x42c0>
   19ee0:	mov	r1, r0
   19ee4:	mov	r0, r8
   19ee8:	mov	r2, r5
   19eec:	mov	r3, sl
   19ef0:	sub	sp, fp, #28
   19ef4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   19ef8:	b	1c994 <main@@Base+0x6c04>
   19efc:	eor	r0, r0, ip
   19f00:	orrs	r0, r0, r4
   19f04:	bne	1a050 <main@@Base+0x42c0>
   19f08:	add	r6, r7, #16
   19f0c:	mov	r0, r6
   19f10:	mov	r1, r5
   19f14:	bl	196a0 <main@@Base+0x3910>
   19f18:	mov	r4, r0
   19f1c:	mov	r9, r1
   19f20:	lsr	r0, r0, #8
   19f24:	orr	r0, r0, r1, lsl #24
   19f28:	movw	r1, #30061	; 0x756d
   19f2c:	movt	r1, #25966	; 0x656e
   19f30:	eor	r0, r0, r1
   19f34:	movw	r1, #26463	; 0x675f
   19f38:	movt	r1, #101	; 0x65
   19f3c:	eor	r1, r1, r9, lsr #8
   19f40:	orrs	r0, r0, r1
   19f44:	bne	19fd8 <main@@Base+0x4248>
   19f48:	mov	r0, r6
   19f4c:	mov	r1, r5
   19f50:	mov	r2, #7
   19f54:	bl	1c734 <main@@Base+0x69a4>
   19f58:	mov	r1, r0
   19f5c:	cmp	r0, r6
   19f60:	beq	19fd4 <main@@Base+0x4244>
   19f64:	mov	r0, r8
   19f68:	mov	r2, r5
   19f6c:	mov	r3, sl
   19f70:	sub	sp, fp, #28
   19f74:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   19f78:	b	1cb08 <main@@Base+0x6d78>
   19f7c:	add	r4, r7, #16
   19f80:	mov	r0, r4
   19f84:	mov	r1, r5
   19f88:	bl	196a0 <main@@Base+0x3910>
   19f8c:	bfc	r1, #0, #16
   19f90:	movw	r0, #0
   19f94:	movt	r0, #28527	; 0x6f6f
   19f98:	teq	r1, r0
   19f9c:	bne	1a050 <main@@Base+0x42c0>
   19fa0:	mov	r0, r4
   19fa4:	mov	r1, r5
   19fa8:	mov	r2, #2
   19fac:	bl	1c734 <main@@Base+0x69a4>
   19fb0:	cmp	r0, r4
   19fb4:	beq	1a050 <main@@Base+0x42c0>
   19fb8:	mov	r1, r0
   19fbc:	mov	r0, r8
   19fc0:	mov	r2, r5
   19fc4:	mov	r3, sl
   19fc8:	sub	sp, fp, #28
   19fcc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   19fd0:	b	1c754 <main@@Base+0x69c4>
   19fd4:	mov	r6, r1
   19fd8:	movw	r0, #31077	; 0x7965
   19fdc:	movt	r0, #28788	; 0x7074
   19fe0:	eor	r0, r4, r0
   19fe4:	movw	r1, #25965	; 0x656d
   19fe8:	movt	r1, #28532	; 0x6f74
   19fec:	eor	r1, r9, r1
   19ff0:	orrs	r0, r0, r1
   19ff4:	bne	1a050 <main@@Base+0x42c0>
   19ff8:	add	r4, r6, #8
   19ffc:	mov	r0, r4
   1a000:	mov	r1, r5
   1a004:	bl	196a0 <main@@Base+0x3910>
   1a008:	bic	r0, r1, #255	; 0xff
   1a00c:	movw	r1, #27904	; 0x6d00
   1a010:	movt	r1, #28277	; 0x6e75
   1a014:	teq	r0, r1
   1a018:	bne	1a050 <main@@Base+0x42c0>
   1a01c:	mov	r0, r4
   1a020:	mov	r1, r5
   1a024:	mov	r2, #3
   1a028:	bl	1c734 <main@@Base+0x69a4>
   1a02c:	cmp	r0, r4
   1a030:	beq	1a050 <main@@Base+0x42c0>
   1a034:	mov	r1, r0
   1a038:	mov	r0, r8
   1a03c:	mov	r2, r5
   1a040:	mov	r3, sl
   1a044:	sub	sp, fp, #28
   1a048:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1a04c:	b	1cc18 <main@@Base+0x6e88>
   1a050:	mov	r0, r7
   1a054:	sub	sp, fp, #28
   1a058:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1a05c:	push	{r4, r5, r6, r7, fp, lr}
   1a060:	add	fp, sp, #16
   1a064:	sub	sp, sp, #24
   1a068:	mov	r7, r1
   1a06c:	mov	r6, r0
   1a070:	mov	r0, #0
   1a074:	str	r0, [sp, #20]
   1a078:	str	r0, [sp, #16]
   1a07c:	str	r0, [sp, #12]
   1a080:	strb	r0, [r3]
   1a084:	cmp	r1, r2
   1a088:	beq	1a0e0 <main@@Base+0x4350>
   1a08c:	mov	r5, r3
   1a090:	mov	r4, r2
   1a094:	add	r0, sp, #16
   1a098:	str	r0, [sp]
   1a09c:	add	r3, sp, #12
   1a0a0:	mov	r0, r6
   1a0a4:	mov	r1, r7
   1a0a8:	bl	27380 <flatcc_json_parser_integer@@Base>
   1a0ac:	mov	r1, r0
   1a0b0:	cmp	r0, r7
   1a0b4:	beq	1a0dc <main@@Base+0x434c>
   1a0b8:	ldr	r3, [sp, #12]
   1a0bc:	ldr	r0, [sp, #16]
   1a0c0:	ldr	r2, [sp, #20]
   1a0c4:	stm	sp, {r0, r2, r5}
   1a0c8:	mov	r0, r6
   1a0cc:	mov	r2, r4
   1a0d0:	bl	1d01c <main@@Base+0x728c>
   1a0d4:	mov	r7, r0
   1a0d8:	b	1a0e0 <main@@Base+0x4350>
   1a0dc:	mov	r7, r1
   1a0e0:	mov	r0, r7
   1a0e4:	sub	sp, fp, #16
   1a0e8:	pop	{r4, r5, r6, r7, fp, pc}
   1a0ec:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1a0f0:	add	fp, sp, #28
   1a0f4:	sub	sp, sp, #36	; 0x24
   1a0f8:	mov	r8, r3
   1a0fc:	mov	r6, r2
   1a100:	mov	r5, r0
   1a104:	mov	r0, #0
   1a108:	strb	r0, [fp, #-29]	; 0xffffffe3
   1a10c:	ldr	sl, [fp, #8]
   1a110:	strb	r0, [sl]
   1a114:	mov	r0, r5
   1a118:	bl	1d078 <main@@Base+0x72e8>
   1a11c:	mov	r4, r0
   1a120:	cmp	r0, r6
   1a124:	beq	1a1d4 <main@@Base+0x4444>
   1a128:	mov	r9, r8
   1a12c:	b	1a140 <main@@Base+0x43b0>
   1a130:	ldr	r0, [r9, #4]!
   1a134:	cmp	r0, #0
   1a138:	mov	r4, r7
   1a13c:	beq	1a1e4 <main@@Base+0x4454>
   1a140:	ldr	r7, [r9]
   1a144:	add	r0, sp, #24
   1a148:	str	r0, [sp]
   1a14c:	add	r0, sp, #16
   1a150:	str	r0, [sp, #4]
   1a154:	mov	r0, r5
   1a158:	mov	r1, r4
   1a15c:	mov	r2, r6
   1a160:	add	r3, sp, #20
   1a164:	blx	r7
   1a168:	mov	r7, r0
   1a16c:	cmp	r0, r6
   1a170:	beq	1a1fc <main@@Base+0x446c>
   1a174:	cmp	r7, r4
   1a178:	beq	1a130 <main@@Base+0x43a0>
   1a17c:	ldr	r3, [sp, #20]
   1a180:	ldr	r0, [sp, #24]
   1a184:	ldr	r1, [sp, #28]
   1a188:	stm	sp, {r0, r1}
   1a18c:	sub	r0, fp, #29
   1a190:	str	r0, [sp, #8]
   1a194:	mov	r0, r5
   1a198:	mov	r1, r7
   1a19c:	mov	r2, r6
   1a1a0:	bl	1d01c <main@@Base+0x728c>
   1a1a4:	cmp	r0, r6
   1a1a8:	beq	1a1dc <main@@Base+0x444c>
   1a1ac:	ldrb	r0, [sl]
   1a1b0:	ldrb	r1, [fp, #-29]	; 0xffffffe3
   1a1b4:	add	r0, r0, r1
   1a1b8:	strb	r0, [sl]
   1a1bc:	ldr	r0, [sp, #16]
   1a1c0:	cmp	r0, #0
   1a1c4:	mov	r4, r7
   1a1c8:	mov	r9, r8
   1a1cc:	bne	1a140 <main@@Base+0x43b0>
   1a1d0:	b	1a1fc <main@@Base+0x446c>
   1a1d4:	mov	r7, r4
   1a1d8:	b	1a1fc <main@@Base+0x446c>
   1a1dc:	mov	r7, r6
   1a1e0:	b	1a1fc <main@@Base+0x446c>
   1a1e4:	mov	r0, r5
   1a1e8:	mov	r1, r7
   1a1ec:	mov	r2, r6
   1a1f0:	mov	r3, #23
   1a1f4:	bl	25fa0 <flatcc_json_parser_set_error@@Base>
   1a1f8:	mov	r7, r0
   1a1fc:	mov	r0, r7
   1a200:	sub	sp, fp, #28
   1a204:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1a208:	push	{r4, r5, fp, lr}
   1a20c:	add	fp, sp, #8
   1a210:	mov	r4, r1
   1a214:	mov	r5, r0
   1a218:	mov	r0, r1
   1a21c:	bl	1d0a0 <main@@Base+0x7310>
   1a220:	strb	r4, [r5]
   1a224:	pop	{r4, r5, fp, pc}
   1a228:	push	{r4, r5, r6, sl, fp, lr}
   1a22c:	add	fp, sp, #16
   1a230:	mov	r5, r3
   1a234:	mov	r4, r2
   1a238:	mov	r6, r0
   1a23c:	cmp	r1, r2
   1a240:	beq	1a290 <main@@Base+0x4500>
   1a244:	ldrb	r0, [r1]
   1a248:	cmp	r0, #91	; 0x5b
   1a24c:	bne	1a290 <main@@Base+0x4500>
   1a250:	add	r1, r1, #1
   1a254:	mov	r0, r6
   1a258:	mov	r2, r4
   1a25c:	bl	1c670 <main@@Base+0x68e0>
   1a260:	cmp	r0, r4
   1a264:	beq	1a2ac <main@@Base+0x451c>
   1a268:	ldrb	r1, [r0]
   1a26c:	cmp	r1, #93	; 0x5d
   1a270:	bne	1a2ac <main@@Base+0x451c>
   1a274:	mov	r1, #0
   1a278:	str	r1, [r5]
   1a27c:	add	r1, r0, #1
   1a280:	mov	r0, r6
   1a284:	mov	r2, r4
   1a288:	pop	{r4, r5, r6, sl, fp, lr}
   1a28c:	b	1c670 <main@@Base+0x68e0>
   1a290:	mov	r0, #0
   1a294:	str	r0, [r5]
   1a298:	mov	r0, r6
   1a29c:	mov	r2, r4
   1a2a0:	mov	r3, #22
   1a2a4:	pop	{r4, r5, r6, sl, fp, lr}
   1a2a8:	b	25fa0 <flatcc_json_parser_set_error@@Base>
   1a2ac:	mov	r1, #1
   1a2b0:	str	r1, [r5]
   1a2b4:	pop	{r4, r5, r6, sl, fp, pc}
   1a2b8:	push	{r4, r5, r6, r7, fp, lr}
   1a2bc:	add	fp, sp, #16
   1a2c0:	sub	sp, sp, #24
   1a2c4:	mov	r7, r1
   1a2c8:	mov	r6, r0
   1a2cc:	mov	r0, #0
   1a2d0:	str	r0, [sp, #20]
   1a2d4:	str	r0, [sp, #16]
   1a2d8:	str	r0, [sp, #12]
   1a2dc:	strb	r0, [r3]
   1a2e0:	cmp	r1, r2
   1a2e4:	beq	1a33c <main@@Base+0x45ac>
   1a2e8:	mov	r5, r3
   1a2ec:	mov	r4, r2
   1a2f0:	add	r0, sp, #16
   1a2f4:	str	r0, [sp]
   1a2f8:	add	r3, sp, #12
   1a2fc:	mov	r0, r6
   1a300:	mov	r1, r7
   1a304:	bl	27380 <flatcc_json_parser_integer@@Base>
   1a308:	mov	r1, r0
   1a30c:	cmp	r0, r7
   1a310:	beq	1a338 <main@@Base+0x45a8>
   1a314:	ldr	r3, [sp, #12]
   1a318:	ldr	r0, [sp, #16]
   1a31c:	ldr	r2, [sp, #20]
   1a320:	stm	sp, {r0, r2, r5}
   1a324:	mov	r0, r6
   1a328:	mov	r2, r4
   1a32c:	bl	1d0a4 <main@@Base+0x7314>
   1a330:	mov	r7, r0
   1a334:	b	1a33c <main@@Base+0x45ac>
   1a338:	mov	r7, r1
   1a33c:	mov	r0, r7
   1a340:	sub	sp, fp, #16
   1a344:	pop	{r4, r5, r6, r7, fp, pc}
   1a348:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1a34c:	add	fp, sp, #28
   1a350:	sub	sp, sp, #36	; 0x24
   1a354:	mov	r8, r3
   1a358:	mov	r6, r2
   1a35c:	mov	r5, r0
   1a360:	mov	r0, #0
   1a364:	strb	r0, [fp, #-29]	; 0xffffffe3
   1a368:	ldr	sl, [fp, #8]
   1a36c:	strb	r0, [sl]
   1a370:	mov	r0, r5
   1a374:	bl	1d078 <main@@Base+0x72e8>
   1a378:	mov	r4, r0
   1a37c:	cmp	r0, r6
   1a380:	beq	1a430 <main@@Base+0x46a0>
   1a384:	mov	r9, r8
   1a388:	b	1a39c <main@@Base+0x460c>
   1a38c:	ldr	r0, [r9, #4]!
   1a390:	cmp	r0, #0
   1a394:	mov	r4, r7
   1a398:	beq	1a440 <main@@Base+0x46b0>
   1a39c:	ldr	r7, [r9]
   1a3a0:	add	r0, sp, #24
   1a3a4:	str	r0, [sp]
   1a3a8:	add	r0, sp, #16
   1a3ac:	str	r0, [sp, #4]
   1a3b0:	mov	r0, r5
   1a3b4:	mov	r1, r4
   1a3b8:	mov	r2, r6
   1a3bc:	add	r3, sp, #20
   1a3c0:	blx	r7
   1a3c4:	mov	r7, r0
   1a3c8:	cmp	r0, r6
   1a3cc:	beq	1a458 <main@@Base+0x46c8>
   1a3d0:	cmp	r7, r4
   1a3d4:	beq	1a38c <main@@Base+0x45fc>
   1a3d8:	ldr	r3, [sp, #20]
   1a3dc:	ldr	r0, [sp, #24]
   1a3e0:	ldr	r1, [sp, #28]
   1a3e4:	stm	sp, {r0, r1}
   1a3e8:	sub	r0, fp, #29
   1a3ec:	str	r0, [sp, #8]
   1a3f0:	mov	r0, r5
   1a3f4:	mov	r1, r7
   1a3f8:	mov	r2, r6
   1a3fc:	bl	1d0a4 <main@@Base+0x7314>
   1a400:	cmp	r0, r6
   1a404:	beq	1a438 <main@@Base+0x46a8>
   1a408:	ldrb	r0, [sl]
   1a40c:	ldrb	r1, [fp, #-29]	; 0xffffffe3
   1a410:	add	r0, r0, r1
   1a414:	strb	r0, [sl]
   1a418:	ldr	r0, [sp, #16]
   1a41c:	cmp	r0, #0
   1a420:	mov	r4, r7
   1a424:	mov	r9, r8
   1a428:	bne	1a39c <main@@Base+0x460c>
   1a42c:	b	1a458 <main@@Base+0x46c8>
   1a430:	mov	r7, r4
   1a434:	b	1a458 <main@@Base+0x46c8>
   1a438:	mov	r7, r6
   1a43c:	b	1a458 <main@@Base+0x46c8>
   1a440:	mov	r0, r5
   1a444:	mov	r1, r7
   1a448:	mov	r2, r6
   1a44c:	mov	r3, #23
   1a450:	bl	25fa0 <flatcc_json_parser_set_error@@Base>
   1a454:	mov	r7, r0
   1a458:	mov	r0, r7
   1a45c:	sub	sp, fp, #28
   1a460:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1a464:	push	{r4, r5, fp, lr}
   1a468:	add	fp, sp, #8
   1a46c:	mov	r4, r1
   1a470:	mov	r5, r0
   1a474:	mov	r0, r1
   1a478:	bl	1d0f0 <main@@Base+0x7360>
   1a47c:	strb	r4, [r5]
   1a480:	pop	{r4, r5, fp, pc}
   1a484:	push	{r4, r5, r6, sl, fp, lr}
   1a488:	add	fp, sp, #16
   1a48c:	mov	r6, r3
   1a490:	mov	r4, r2
   1a494:	mov	r5, r0
   1a498:	bl	1c670 <main@@Base+0x68e0>
   1a49c:	mov	r1, r0
   1a4a0:	cmp	r0, r4
   1a4a4:	beq	1a4e8 <main@@Base+0x4758>
   1a4a8:	ldrb	r0, [r1]
   1a4ac:	cmp	r0, #44	; 0x2c
   1a4b0:	bne	1a4f0 <main@@Base+0x4760>
   1a4b4:	add	r1, r1, #1
   1a4b8:	mov	r0, r5
   1a4bc:	mov	r2, r4
   1a4c0:	bl	1c670 <main@@Base+0x68e0>
   1a4c4:	mov	r1, r0
   1a4c8:	cmp	r0, r4
   1a4cc:	beq	1a518 <main@@Base+0x4788>
   1a4d0:	ldrb	r0, [r1]
   1a4d4:	cmp	r0, #93	; 0x5d
   1a4d8:	bne	1a534 <main@@Base+0x47a4>
   1a4dc:	mov	r0, #0
   1a4e0:	str	r0, [r6]
   1a4e4:	b	1a504 <main@@Base+0x4774>
   1a4e8:	mov	r0, #0
   1a4ec:	b	1a538 <main@@Base+0x47a8>
   1a4f0:	mov	r0, #0
   1a4f4:	str	r0, [r6]
   1a4f8:	ldrb	r0, [r1]
   1a4fc:	cmp	r0, #93	; 0x5d
   1a500:	bne	1a520 <main@@Base+0x4790>
   1a504:	add	r1, r1, #1
   1a508:	mov	r0, r5
   1a50c:	mov	r2, r4
   1a510:	pop	{r4, r5, r6, sl, fp, lr}
   1a514:	b	1c670 <main@@Base+0x68e0>
   1a518:	mov	r0, #0
   1a51c:	str	r0, [r6]
   1a520:	mov	r0, r5
   1a524:	mov	r2, r4
   1a528:	mov	r3, #9
   1a52c:	pop	{r4, r5, r6, sl, fp, lr}
   1a530:	b	25fa0 <flatcc_json_parser_set_error@@Base>
   1a534:	mov	r0, #1
   1a538:	str	r0, [r6]
   1a53c:	mov	r0, r1
   1a540:	pop	{r4, r5, r6, sl, fp, pc}
   1a544:	push	{r4, r5, r6, r7, fp, lr}
   1a548:	add	fp, sp, #16
   1a54c:	sub	sp, sp, #24
   1a550:	mov	r7, r1
   1a554:	mov	r6, r0
   1a558:	mov	r0, #0
   1a55c:	str	r0, [sp, #20]
   1a560:	str	r0, [sp, #16]
   1a564:	str	r0, [sp, #12]
   1a568:	strh	r0, [r3]
   1a56c:	cmp	r1, r2
   1a570:	beq	1a5c8 <main@@Base+0x4838>
   1a574:	mov	r5, r3
   1a578:	mov	r4, r2
   1a57c:	add	r0, sp, #16
   1a580:	str	r0, [sp]
   1a584:	add	r3, sp, #12
   1a588:	mov	r0, r6
   1a58c:	mov	r1, r7
   1a590:	bl	27380 <flatcc_json_parser_integer@@Base>
   1a594:	mov	r1, r0
   1a598:	cmp	r0, r7
   1a59c:	beq	1a5c4 <main@@Base+0x4834>
   1a5a0:	ldr	r3, [sp, #12]
   1a5a4:	ldr	r0, [sp, #16]
   1a5a8:	ldr	r2, [sp, #20]
   1a5ac:	stm	sp, {r0, r2, r5}
   1a5b0:	mov	r0, r6
   1a5b4:	mov	r2, r4
   1a5b8:	bl	1d0f4 <main@@Base+0x7364>
   1a5bc:	mov	r7, r0
   1a5c0:	b	1a5c8 <main@@Base+0x4838>
   1a5c4:	mov	r7, r1
   1a5c8:	mov	r0, r7
   1a5cc:	sub	sp, fp, #16
   1a5d0:	pop	{r4, r5, r6, r7, fp, pc}
   1a5d4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1a5d8:	add	fp, sp, #28
   1a5dc:	sub	sp, sp, #36	; 0x24
   1a5e0:	mov	r8, r3
   1a5e4:	mov	r6, r2
   1a5e8:	mov	r5, r0
   1a5ec:	mov	r0, #0
   1a5f0:	strh	r0, [fp, #-30]	; 0xffffffe2
   1a5f4:	ldr	sl, [fp, #8]
   1a5f8:	strh	r0, [sl]
   1a5fc:	mov	r0, r5
   1a600:	bl	1d078 <main@@Base+0x72e8>
   1a604:	mov	r4, r0
   1a608:	cmp	r0, r6
   1a60c:	beq	1a6bc <main@@Base+0x492c>
   1a610:	mov	r9, r8
   1a614:	b	1a628 <main@@Base+0x4898>
   1a618:	ldr	r0, [r9, #4]!
   1a61c:	cmp	r0, #0
   1a620:	mov	r4, r7
   1a624:	beq	1a6cc <main@@Base+0x493c>
   1a628:	ldr	r7, [r9]
   1a62c:	add	r0, sp, #24
   1a630:	str	r0, [sp]
   1a634:	add	r0, sp, #16
   1a638:	str	r0, [sp, #4]
   1a63c:	mov	r0, r5
   1a640:	mov	r1, r4
   1a644:	mov	r2, r6
   1a648:	add	r3, sp, #20
   1a64c:	blx	r7
   1a650:	mov	r7, r0
   1a654:	cmp	r0, r6
   1a658:	beq	1a6e4 <main@@Base+0x4954>
   1a65c:	cmp	r7, r4
   1a660:	beq	1a618 <main@@Base+0x4888>
   1a664:	ldr	r3, [sp, #20]
   1a668:	ldr	r0, [sp, #24]
   1a66c:	ldr	r1, [sp, #28]
   1a670:	stm	sp, {r0, r1}
   1a674:	sub	r0, fp, #30
   1a678:	str	r0, [sp, #8]
   1a67c:	mov	r0, r5
   1a680:	mov	r1, r7
   1a684:	mov	r2, r6
   1a688:	bl	1d0f4 <main@@Base+0x7364>
   1a68c:	cmp	r0, r6
   1a690:	beq	1a6c4 <main@@Base+0x4934>
   1a694:	ldrh	r0, [sl]
   1a698:	ldrh	r1, [fp, #-30]	; 0xffffffe2
   1a69c:	add	r0, r0, r1
   1a6a0:	strh	r0, [sl]
   1a6a4:	ldr	r0, [sp, #16]
   1a6a8:	cmp	r0, #0
   1a6ac:	mov	r4, r7
   1a6b0:	mov	r9, r8
   1a6b4:	bne	1a628 <main@@Base+0x4898>
   1a6b8:	b	1a6e4 <main@@Base+0x4954>
   1a6bc:	mov	r7, r4
   1a6c0:	b	1a6e4 <main@@Base+0x4954>
   1a6c4:	mov	r7, r6
   1a6c8:	b	1a6e4 <main@@Base+0x4954>
   1a6cc:	mov	r0, r5
   1a6d0:	mov	r1, r7
   1a6d4:	mov	r2, r6
   1a6d8:	mov	r3, #23
   1a6dc:	bl	25fa0 <flatcc_json_parser_set_error@@Base>
   1a6e0:	mov	r7, r0
   1a6e4:	mov	r0, r7
   1a6e8:	sub	sp, fp, #28
   1a6ec:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1a6f0:	push	{r4, r5, fp, lr}
   1a6f4:	add	fp, sp, #8
   1a6f8:	mov	r4, r1
   1a6fc:	mov	r5, r0
   1a700:	mov	r0, r1
   1a704:	bl	1d154 <main@@Base+0x73c4>
   1a708:	strh	r4, [r5]
   1a70c:	pop	{r4, r5, fp, pc}
   1a710:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   1a714:	add	fp, sp, #24
   1a718:	sub	sp, sp, #8
   1a71c:	mov	r8, r3
   1a720:	mov	r4, r2
   1a724:	mov	r7, r1
   1a728:	mov	r5, r0
   1a72c:	mov	r0, #0
   1a730:	str	r0, [r3]
   1a734:	ldr	r0, [r5]
   1a738:	mov	r1, #0
   1a73c:	bl	22744 <flatcc_builder_start_table@@Base>
   1a740:	cmp	r0, #0
   1a744:	bne	1a7d4 <main@@Base+0x4a44>
   1a748:	add	r3, sp, #4
   1a74c:	mov	r0, r5
   1a750:	mov	r1, r7
   1a754:	mov	r2, r4
   1a758:	bl	195e8 <main@@Base+0x3858>
   1a75c:	mov	r7, r0
   1a760:	ldr	r0, [sp, #4]
   1a764:	cmp	r0, #0
   1a768:	beq	1a7b4 <main@@Base+0x4a24>
   1a76c:	add	r6, sp, #4
   1a770:	mov	r0, r5
   1a774:	mov	r1, r7
   1a778:	mov	r2, r4
   1a77c:	bl	19678 <main@@Base+0x38e8>
   1a780:	mov	r1, r0
   1a784:	mov	r0, r5
   1a788:	mov	r2, r4
   1a78c:	bl	2669c <flatcc_json_parser_unmatched_symbol@@Base>
   1a790:	mov	r1, r0
   1a794:	mov	r0, r5
   1a798:	mov	r2, r4
   1a79c:	mov	r3, r6
   1a7a0:	bl	1c5b0 <main@@Base+0x6820>
   1a7a4:	mov	r7, r0
   1a7a8:	ldr	r0, [sp, #4]
   1a7ac:	cmp	r0, #0
   1a7b0:	bne	1a770 <main@@Base+0x49e0>
   1a7b4:	ldr	r0, [r5, #20]
   1a7b8:	cmp	r0, #0
   1a7bc:	bne	1a7d4 <main@@Base+0x4a44>
   1a7c0:	ldr	r0, [r5]
   1a7c4:	bl	22e50 <flatcc_builder_end_table@@Base>
   1a7c8:	str	r0, [r8]
   1a7cc:	cmp	r0, #0
   1a7d0:	bne	1a7ec <main@@Base+0x4a5c>
   1a7d4:	mov	r0, r5
   1a7d8:	mov	r1, r7
   1a7dc:	mov	r2, r4
   1a7e0:	mov	r3, #33	; 0x21
   1a7e4:	bl	25fa0 <flatcc_json_parser_set_error@@Base>
   1a7e8:	mov	r7, r0
   1a7ec:	mov	r0, r7
   1a7f0:	sub	sp, fp, #24
   1a7f4:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   1a7f8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1a7fc:	add	fp, sp, #28
   1a800:	sub	sp, sp, #44	; 0x2c
   1a804:	mov	r6, r3
   1a808:	mov	r4, r2
   1a80c:	mov	r5, r0
   1a810:	sub	r3, fp, #32
   1a814:	bl	195e8 <main@@Base+0x3858>
   1a818:	mov	r1, r0
   1a81c:	ldr	r0, [fp, #-32]	; 0xffffffe0
   1a820:	cmp	r0, #0
   1a824:	beq	1ac8c <main@@Base+0x4efc>
   1a828:	add	r0, r6, #24
   1a82c:	str	r0, [sp, #28]
   1a830:	add	r0, r6, #16
   1a834:	str	r0, [sp, #24]
   1a838:	add	r0, r6, #26
   1a83c:	str	r0, [sp, #20]
   1a840:	add	r0, r6, #8
   1a844:	str	r0, [sp, #12]
   1a848:	str	r6, [sp, #16]
   1a84c:	add	r0, r6, #4
   1a850:	str	r0, [sp, #8]
   1a854:	movw	r9, #29556	; 0x7374
   1a858:	movt	r9, #29797	; 0x7465
   1a85c:	mvn	sl, #-855638016	; 0xcd000000
   1a860:	sub	r6, fp, #32
   1a864:	b	1a8a4 <main@@Base+0x4b14>
   1a868:	mov	r0, r5
   1a86c:	mov	r1, r6
   1a870:	mov	r2, r4
   1a874:	bl	2669c <flatcc_json_parser_unmatched_symbol@@Base>
   1a878:	mov	r8, r0
   1a87c:	sub	r6, fp, #32
   1a880:	mov	r0, r5
   1a884:	mov	r1, r8
   1a888:	mov	r2, r4
   1a88c:	mov	r3, r6
   1a890:	bl	1c5b0 <main@@Base+0x6820>
   1a894:	mov	r1, r0
   1a898:	ldr	r0, [fp, #-32]	; 0xffffffe0
   1a89c:	cmp	r0, #0
   1a8a0:	beq	1ac8c <main@@Base+0x4efc>
   1a8a4:	mov	r0, r5
   1a8a8:	mov	r2, r4
   1a8ac:	bl	19678 <main@@Base+0x38e8>
   1a8b0:	mov	r7, r0
   1a8b4:	mov	r1, r4
   1a8b8:	bl	196a0 <main@@Base+0x3910>
   1a8bc:	subs	r2, sl, r0
   1a8c0:	sbcs	r2, r9, r1
   1a8c4:	bcc	1a97c <main@@Base+0x4bec>
   1a8c8:	eor	r2, r1, r9
   1a8cc:	and	r0, r0, #-16777216	; 0xff000000
   1a8d0:	eor	r3, r0, #822083584	; 0x31000000
   1a8d4:	orrs	r2, r3, r2
   1a8d8:	beq	1aa74 <main@@Base+0x4ce4>
   1a8dc:	eor	r1, r1, r9
   1a8e0:	eor	r0, r0, #838860800	; 0x32000000
   1a8e4:	orrs	r0, r0, r1
   1a8e8:	bne	1abac <main@@Base+0x4e1c>
   1a8ec:	mov	r0, r5
   1a8f0:	mov	r1, r7
   1a8f4:	mov	r2, r4
   1a8f8:	mov	r3, #5
   1a8fc:	bl	196a4 <main@@Base+0x3914>
   1a900:	mov	r6, r0
   1a904:	cmp	r7, r0
   1a908:	beq	1a868 <main@@Base+0x4ad8>
   1a90c:	mov	r0, #0
   1a910:	strb	r0, [sp, #32]
   1a914:	mov	r0, r5
   1a918:	mov	r1, r6
   1a91c:	mov	r2, r4
   1a920:	add	r7, sp, #32
   1a924:	mov	r3, r7
   1a928:	bl	1a05c <main@@Base+0x42cc>
   1a92c:	mov	r8, r0
   1a930:	cmp	r6, r0
   1a934:	bne	1a968 <main@@Base+0x4bd8>
   1a938:	str	r7, [sp]
   1a93c:	mov	r0, r5
   1a940:	mov	r1, r8
   1a944:	mov	r2, r4
   1a948:	movw	r3, #33160	; 0x8188
   1a94c:	movt	r3, #4
   1a950:	bl	1a0ec <main@@Base+0x435c>
   1a954:	mov	r1, r0
   1a958:	cmp	r0, r8
   1a95c:	cmpne	r1, r4
   1a960:	beq	1ac78 <main@@Base+0x4ee8>
   1a964:	mov	r8, r1
   1a968:	sub	r6, fp, #32
   1a96c:	ldrsb	r1, [sp, #32]
   1a970:	ldr	r0, [sp, #28]
   1a974:	bl	1a208 <main@@Base+0x4478>
   1a978:	b	1a880 <main@@Base+0x4af0>
   1a97c:	cmn	r1, #-2013265919	; 0x88000001
   1a980:	bhi	1a9cc <main@@Base+0x4c3c>
   1a984:	eor	r1, r1, r9
   1a988:	and	r0, r0, #-16777216	; 0xff000000
   1a98c:	eor	r0, r0, #855638016	; 0x33000000
   1a990:	orrs	r0, r0, r1
   1a994:	bne	1abac <main@@Base+0x4e1c>
   1a998:	mov	r0, r5
   1a99c:	mov	r1, r7
   1a9a0:	mov	r2, r4
   1a9a4:	mov	r3, #5
   1a9a8:	bl	196a4 <main@@Base+0x3914>
   1a9ac:	mov	r1, r0
   1a9b0:	cmp	r7, r0
   1a9b4:	beq	1abe0 <main@@Base+0x4e50>
   1a9b8:	mov	r0, r5
   1a9bc:	mov	r2, r4
   1a9c0:	ldr	r3, [sp, #20]
   1a9c4:	bl	1ac98 <main@@Base+0x4f08>
   1a9c8:	b	1abbc <main@@Base+0x4e2c>
   1a9cc:	and	r0, r1, #-16777216	; 0xff000000
   1a9d0:	lsr	r1, r1, #24
   1a9d4:	cmp	r1, #120	; 0x78
   1a9d8:	bhi	1ab0c <main@@Base+0x4d7c>
   1a9dc:	teq	r0, #2013265920	; 0x78000000
   1a9e0:	bne	1abac <main@@Base+0x4e1c>
   1a9e4:	mov	r0, r5
   1a9e8:	mov	r1, r7
   1a9ec:	mov	r2, r4
   1a9f0:	mov	r3, #1
   1a9f4:	bl	196a4 <main@@Base+0x3914>
   1a9f8:	mov	r6, r0
   1a9fc:	cmp	r7, r0
   1aa00:	beq	1a868 <main@@Base+0x4ad8>
   1aa04:	mov	r0, #0
   1aa08:	str	r0, [sp, #32]
   1aa0c:	mov	r0, r5
   1aa10:	mov	r1, r6
   1aa14:	mov	r2, r4
   1aa18:	add	r7, sp, #32
   1aa1c:	mov	r3, r7
   1aa20:	bl	26cd0 <flatcc_json_parser_float@@Base>
   1aa24:	mov	r8, r0
   1aa28:	cmp	r6, r0
   1aa2c:	bne	1aa60 <main@@Base+0x4cd0>
   1aa30:	str	r7, [sp]
   1aa34:	mov	r0, r5
   1aa38:	mov	r1, r8
   1aa3c:	mov	r2, r4
   1aa40:	movw	r3, #33188	; 0x81a4
   1aa44:	movt	r3, #4
   1aa48:	bl	1bbf8 <main@@Base+0x5e68>
   1aa4c:	mov	r1, r0
   1aa50:	cmp	r0, r8
   1aa54:	cmpne	r1, r4
   1aa58:	beq	1ac78 <main@@Base+0x4ee8>
   1aa5c:	mov	r8, r1
   1aa60:	sub	r6, fp, #32
   1aa64:	vldr	s0, [sp, #32]
   1aa68:	ldr	r0, [sp, #16]
   1aa6c:	bl	1bd04 <main@@Base+0x5f74>
   1aa70:	b	1a880 <main@@Base+0x4af0>
   1aa74:	mov	r0, r5
   1aa78:	mov	r1, r7
   1aa7c:	mov	r2, r4
   1aa80:	mov	r3, #5
   1aa84:	bl	196a4 <main@@Base+0x3914>
   1aa88:	mov	sl, r0
   1aa8c:	cmp	r7, r0
   1aa90:	beq	1abc4 <main@@Base+0x4e34>
   1aa94:	mov	r0, #0
   1aa98:	str	r0, [sp, #36]	; 0x24
   1aa9c:	str	r0, [sp, #32]
   1aaa0:	mov	r0, r5
   1aaa4:	mov	r1, sl
   1aaa8:	mov	r2, r4
   1aaac:	add	r6, sp, #32
   1aab0:	mov	r3, r6
   1aab4:	bl	26bf8 <flatcc_json_parser_double@@Base>
   1aab8:	mov	r8, r0
   1aabc:	cmp	sl, r0
   1aac0:	bne	1aaf4 <main@@Base+0x4d64>
   1aac4:	str	r6, [sp]
   1aac8:	mov	r0, r5
   1aacc:	mov	r1, r8
   1aad0:	mov	r2, r4
   1aad4:	movw	r3, #33176	; 0x8198
   1aad8:	movt	r3, #4
   1aadc:	bl	1c484 <main@@Base+0x66f4>
   1aae0:	mov	r1, r0
   1aae4:	cmp	r0, r8
   1aae8:	cmpne	r1, r4
   1aaec:	beq	1ac78 <main@@Base+0x4ee8>
   1aaf0:	mov	r8, r1
   1aaf4:	mvn	sl, #-855638016	; 0xcd000000
   1aaf8:	sub	r6, fp, #32
   1aafc:	vldr	d0, [sp, #32]
   1ab00:	ldr	r0, [sp, #24]
   1ab04:	bl	1c598 <main@@Base+0x6808>
   1ab08:	b	1a880 <main@@Base+0x4af0>
   1ab0c:	teq	r0, #2030043136	; 0x79000000
   1ab10:	beq	1abe8 <main@@Base+0x4e58>
   1ab14:	teq	r0, #2046820352	; 0x7a000000
   1ab18:	bne	1abac <main@@Base+0x4e1c>
   1ab1c:	mov	r0, r5
   1ab20:	mov	r1, r7
   1ab24:	mov	r2, r4
   1ab28:	mov	r3, #1
   1ab2c:	bl	196a4 <main@@Base+0x3914>
   1ab30:	mov	r6, r0
   1ab34:	cmp	r7, r0
   1ab38:	beq	1a868 <main@@Base+0x4ad8>
   1ab3c:	mov	r0, #0
   1ab40:	str	r0, [sp, #32]
   1ab44:	mov	r0, r5
   1ab48:	mov	r1, r6
   1ab4c:	mov	r2, r4
   1ab50:	add	r7, sp, #32
   1ab54:	mov	r3, r7
   1ab58:	bl	26cd0 <flatcc_json_parser_float@@Base>
   1ab5c:	mov	r8, r0
   1ab60:	cmp	r6, r0
   1ab64:	bne	1ab98 <main@@Base+0x4e08>
   1ab68:	str	r7, [sp]
   1ab6c:	mov	r0, r5
   1ab70:	mov	r1, r8
   1ab74:	mov	r2, r4
   1ab78:	movw	r3, #33200	; 0x81b0
   1ab7c:	movt	r3, #4
   1ab80:	bl	1bbf8 <main@@Base+0x5e68>
   1ab84:	mov	r1, r0
   1ab88:	cmp	r0, r8
   1ab8c:	cmpne	r1, r4
   1ab90:	beq	1ac78 <main@@Base+0x4ee8>
   1ab94:	mov	r8, r1
   1ab98:	sub	r6, fp, #32
   1ab9c:	vldr	s0, [sp, #32]
   1aba0:	ldr	r0, [sp, #12]
   1aba4:	bl	1bd04 <main@@Base+0x5f74>
   1aba8:	b	1a880 <main@@Base+0x4af0>
   1abac:	mov	r0, r5
   1abb0:	mov	r1, r7
   1abb4:	mov	r2, r4
   1abb8:	bl	2669c <flatcc_json_parser_unmatched_symbol@@Base>
   1abbc:	mov	r8, r0
   1abc0:	b	1a880 <main@@Base+0x4af0>
   1abc4:	mov	r0, r5
   1abc8:	mov	r1, sl
   1abcc:	mov	r2, r4
   1abd0:	bl	2669c <flatcc_json_parser_unmatched_symbol@@Base>
   1abd4:	mov	r8, r0
   1abd8:	mvn	sl, #-855638016	; 0xcd000000
   1abdc:	b	1a880 <main@@Base+0x4af0>
   1abe0:	mov	r0, r5
   1abe4:	b	1abb4 <main@@Base+0x4e24>
   1abe8:	mov	r0, r5
   1abec:	mov	r1, r7
   1abf0:	mov	r2, r4
   1abf4:	mov	r3, #1
   1abf8:	bl	196a4 <main@@Base+0x3914>
   1abfc:	mov	r6, r0
   1ac00:	cmp	r7, r0
   1ac04:	beq	1a868 <main@@Base+0x4ad8>
   1ac08:	mov	r0, #0
   1ac0c:	str	r0, [sp, #32]
   1ac10:	mov	r0, r5
   1ac14:	mov	r1, r6
   1ac18:	mov	r2, r4
   1ac1c:	add	r7, sp, #32
   1ac20:	mov	r3, r7
   1ac24:	bl	26cd0 <flatcc_json_parser_float@@Base>
   1ac28:	mov	r8, r0
   1ac2c:	cmp	r6, r0
   1ac30:	bne	1ac64 <main@@Base+0x4ed4>
   1ac34:	str	r7, [sp]
   1ac38:	mov	r0, r5
   1ac3c:	mov	r1, r8
   1ac40:	mov	r2, r4
   1ac44:	movw	r3, #33212	; 0x81bc
   1ac48:	movt	r3, #4
   1ac4c:	bl	1bbf8 <main@@Base+0x5e68>
   1ac50:	mov	r1, r0
   1ac54:	cmp	r0, r8
   1ac58:	cmpne	r1, r4
   1ac5c:	beq	1ac78 <main@@Base+0x4ee8>
   1ac60:	mov	r8, r1
   1ac64:	sub	r6, fp, #32
   1ac68:	vldr	s0, [sp, #32]
   1ac6c:	ldr	r0, [sp, #8]
   1ac70:	bl	1bd04 <main@@Base+0x5f74>
   1ac74:	b	1a880 <main@@Base+0x4af0>
   1ac78:	mov	r0, r5
   1ac7c:	mov	r2, r4
   1ac80:	mov	r3, #33	; 0x21
   1ac84:	bl	25fa0 <flatcc_json_parser_set_error@@Base>
   1ac88:	mov	r1, r0
   1ac8c:	mov	r0, r1
   1ac90:	sub	sp, fp, #28
   1ac94:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1ac98:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1ac9c:	add	fp, sp, #28
   1aca0:	sub	sp, sp, #20
   1aca4:	mov	r6, r3
   1aca8:	mov	r4, r2
   1acac:	mov	r5, r0
   1acb0:	add	r3, sp, #16
   1acb4:	bl	195e8 <main@@Base+0x3858>
   1acb8:	mov	r1, r0
   1acbc:	ldr	r0, [sp, #16]
   1acc0:	cmp	r0, #0
   1acc4:	beq	1ae9c <main@@Base+0x510c>
   1acc8:	str	r6, [sp, #8]
   1accc:	add	r0, r6, #2
   1acd0:	str	r0, [sp, #4]
   1acd4:	add	sl, sp, #12
   1acd8:	add	r9, sp, #16
   1acdc:	b	1ad18 <main@@Base+0x4f88>
   1ace0:	mov	r0, r5
   1ace4:	mov	r1, r6
   1ace8:	mov	r2, r4
   1acec:	bl	2669c <flatcc_json_parser_unmatched_symbol@@Base>
   1acf0:	mov	r8, r0
   1acf4:	mov	r0, r5
   1acf8:	mov	r1, r8
   1acfc:	mov	r2, r4
   1ad00:	mov	r3, r9
   1ad04:	bl	1c5b0 <main@@Base+0x6820>
   1ad08:	mov	r1, r0
   1ad0c:	ldr	r0, [sp, #16]
   1ad10:	cmp	r0, #0
   1ad14:	beq	1ae9c <main@@Base+0x510c>
   1ad18:	mov	r0, r5
   1ad1c:	mov	r2, r4
   1ad20:	bl	19678 <main@@Base+0x38e8>
   1ad24:	mov	r6, r0
   1ad28:	mov	r1, r4
   1ad2c:	bl	196a0 <main@@Base+0x3910>
   1ad30:	and	r0, r1, #-16777216	; 0xff000000
   1ad34:	teq	r0, #1627389952	; 0x61000000
   1ad38:	beq	1add8 <main@@Base+0x5048>
   1ad3c:	teq	r0, #1644167168	; 0x62000000
   1ad40:	bne	1ace0 <main@@Base+0x4f50>
   1ad44:	mov	r7, sl
   1ad48:	mov	r0, r5
   1ad4c:	mov	r1, r6
   1ad50:	mov	r2, r4
   1ad54:	mov	r3, #1
   1ad58:	bl	196a4 <main@@Base+0x3914>
   1ad5c:	mov	sl, r0
   1ad60:	cmp	r6, r0
   1ad64:	beq	1ae60 <main@@Base+0x50d0>
   1ad68:	mov	r0, #0
   1ad6c:	strb	r0, [sp, #15]
   1ad70:	mov	r0, r5
   1ad74:	mov	r1, sl
   1ad78:	mov	r2, r4
   1ad7c:	add	r6, sp, #15
   1ad80:	mov	r3, r6
   1ad84:	bl	1a05c <main@@Base+0x42cc>
   1ad88:	mov	r8, r0
   1ad8c:	cmp	sl, r0
   1ad90:	bne	1adc4 <main@@Base+0x5034>
   1ad94:	str	r6, [sp]
   1ad98:	mov	r0, r5
   1ad9c:	mov	r1, r8
   1ada0:	mov	r2, r4
   1ada4:	movw	r3, #33224	; 0x81c8
   1ada8:	movt	r3, #4
   1adac:	bl	1a0ec <main@@Base+0x435c>
   1adb0:	mov	r1, r0
   1adb4:	cmp	r0, r8
   1adb8:	cmpne	r1, r4
   1adbc:	beq	1ae88 <main@@Base+0x50f8>
   1adc0:	mov	r8, r1
   1adc4:	mov	sl, r7
   1adc8:	ldrsb	r1, [sp, #15]
   1adcc:	ldr	r0, [sp, #4]
   1add0:	bl	1a208 <main@@Base+0x4478>
   1add4:	b	1acf4 <main@@Base+0x4f64>
   1add8:	mov	r0, r5
   1addc:	mov	r1, r6
   1ade0:	mov	r2, r4
   1ade4:	mov	r3, #1
   1ade8:	bl	196a4 <main@@Base+0x3914>
   1adec:	mov	r7, r0
   1adf0:	cmp	r6, r0
   1adf4:	beq	1ae7c <main@@Base+0x50ec>
   1adf8:	mov	r0, #0
   1adfc:	strh	r0, [sp, #12]
   1ae00:	mov	r0, r5
   1ae04:	mov	r1, r7
   1ae08:	mov	r2, r4
   1ae0c:	mov	r3, sl
   1ae10:	bl	1a544 <main@@Base+0x47b4>
   1ae14:	mov	r8, r0
   1ae18:	cmp	r7, r0
   1ae1c:	bne	1ae50 <main@@Base+0x50c0>
   1ae20:	str	sl, [sp]
   1ae24:	mov	r0, r5
   1ae28:	mov	r1, r8
   1ae2c:	mov	r2, r4
   1ae30:	movw	r3, #33236	; 0x81d4
   1ae34:	movt	r3, #4
   1ae38:	bl	1a5d4 <main@@Base+0x4844>
   1ae3c:	mov	r1, r0
   1ae40:	cmp	r0, r8
   1ae44:	cmpne	r1, r4
   1ae48:	beq	1ae88 <main@@Base+0x50f8>
   1ae4c:	mov	r8, r1
   1ae50:	ldrsh	r1, [sp, #12]
   1ae54:	ldr	r0, [sp, #8]
   1ae58:	bl	1a6f0 <main@@Base+0x4960>
   1ae5c:	b	1acf4 <main@@Base+0x4f64>
   1ae60:	mov	r0, r5
   1ae64:	mov	r1, sl
   1ae68:	mov	r2, r4
   1ae6c:	bl	2669c <flatcc_json_parser_unmatched_symbol@@Base>
   1ae70:	mov	r8, r0
   1ae74:	mov	sl, r7
   1ae78:	b	1acf4 <main@@Base+0x4f64>
   1ae7c:	mov	r0, r5
   1ae80:	mov	r1, r7
   1ae84:	b	1ace8 <main@@Base+0x4f58>
   1ae88:	mov	r0, r5
   1ae8c:	mov	r2, r4
   1ae90:	mov	r3, #33	; 0x21
   1ae94:	bl	25fa0 <flatcc_json_parser_set_error@@Base>
   1ae98:	mov	r1, r0
   1ae9c:	mov	r0, r1
   1aea0:	sub	sp, fp, #28
   1aea4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1aea8:	push	{r4, r5, r6, sl, fp, lr}
   1aeac:	add	fp, sp, #16
   1aeb0:	mov	r4, r2
   1aeb4:	mov	r5, r0
   1aeb8:	ldr	r6, [fp, #8]
   1aebc:	mov	r0, #0
   1aec0:	str	r0, [r6]
   1aec4:	cmp	r3, #4
   1aec8:	bhi	1af68 <main@@Base+0x51d8>
   1aecc:	add	r0, pc, #0
   1aed0:	ldr	pc, [r0, r3, lsl #2]
   1aed4:	andeq	sl, r1, r8, ror #29
   1aed8:	strdeq	sl, [r1], -r8
   1aedc:	andeq	sl, r1, ip, lsl #30
   1aee0:	andeq	sl, r1, r0, lsr #30
   1aee4:	andeq	sl, r1, r4, lsr pc
   1aee8:	mov	r0, r5
   1aeec:	mov	r2, r4
   1aef0:	pop	{r4, r5, r6, sl, fp, lr}
   1aef4:	b	1d158 <main@@Base+0x73c8>
   1aef8:	mov	r0, r5
   1aefc:	mov	r2, r4
   1af00:	mov	r3, r6
   1af04:	bl	16688 <main@@Base+0x8f8>
   1af08:	b	1af44 <main@@Base+0x51b4>
   1af0c:	mov	r0, r5
   1af10:	mov	r2, r4
   1af14:	mov	r3, r6
   1af18:	bl	1d1b4 <main@@Base+0x7424>
   1af1c:	b	1af44 <main@@Base+0x51b4>
   1af20:	mov	r0, r5
   1af24:	mov	r2, r4
   1af28:	mov	r3, r6
   1af2c:	bl	1d614 <main@@Base+0x7884>
   1af30:	b	1af44 <main@@Base+0x51b4>
   1af34:	mov	r0, r5
   1af38:	mov	r2, r4
   1af3c:	mov	r3, r6
   1af40:	bl	1d6fc <main@@Base+0x796c>
   1af44:	mov	r1, r0
   1af48:	ldr	r0, [r5, #20]
   1af4c:	cmp	r0, #0
   1af50:	bne	1af60 <main@@Base+0x51d0>
   1af54:	ldr	r0, [r6]
   1af58:	cmp	r0, #0
   1af5c:	beq	1af88 <main@@Base+0x51f8>
   1af60:	mov	r0, r1
   1af64:	pop	{r4, r5, r6, sl, fp, pc}
   1af68:	ldrb	r0, [r5, #8]
   1af6c:	tst	r0, #1
   1af70:	bne	1af9c <main@@Base+0x520c>
   1af74:	mov	r0, r5
   1af78:	mov	r2, r4
   1af7c:	mov	r3, #15
   1af80:	pop	{r4, r5, r6, sl, fp, lr}
   1af84:	b	25fa0 <flatcc_json_parser_set_error@@Base>
   1af88:	mov	r0, r5
   1af8c:	mov	r2, r4
   1af90:	mov	r3, #33	; 0x21
   1af94:	pop	{r4, r5, r6, sl, fp, lr}
   1af98:	b	25fa0 <flatcc_json_parser_set_error@@Base>
   1af9c:	mov	r0, r5
   1afa0:	mov	r2, r4
   1afa4:	pop	{r4, r5, r6, sl, fp, lr}
   1afa8:	b	267a0 <flatcc_json_parser_generic_json@@Base>
   1afac:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1afb0:	add	fp, sp, #28
   1afb4:	sub	sp, sp, #4
   1afb8:	mov	r8, r3
   1afbc:	mov	r6, r2
   1afc0:	mov	r5, r1
   1afc4:	mov	r9, r0
   1afc8:	mov	r0, r1
   1afcc:	mov	r1, r2
   1afd0:	bl	196a0 <main@@Base+0x3910>
   1afd4:	mov	r7, r0
   1afd8:	mov	r4, r1
   1afdc:	movw	r1, #28275	; 0x6e73
   1afe0:	movt	r1, #19823	; 0x4d6f
   1afe4:	movw	r0, #29184	; 0x7200
   1afe8:	movt	r0, #29797	; 0x7465
   1afec:	ldr	r3, [fp, #12]
   1aff0:	ldr	sl, [fp, #8]
   1aff4:	subs	r2, r7, r0
   1aff8:	sbcs	r2, r4, r1
   1affc:	bcs	1b040 <main@@Base+0x52b0>
   1b000:	bic	r0, r4, #255	; 0xff
   1b004:	movw	r1, #29696	; 0x7400
   1b008:	movt	r1, #16748	; 0x416c
   1b00c:	teq	r0, r1
   1b010:	bne	1b08c <main@@Base+0x52fc>
   1b014:	str	r3, [sp]
   1b018:	mov	r0, r9
   1b01c:	mov	r1, r5
   1b020:	mov	r2, r6
   1b024:	mov	r3, #3
   1b028:	bl	265ec <flatcc_json_parser_match_constant@@Base>
   1b02c:	cmp	r0, r5
   1b030:	beq	1b08c <main@@Base+0x52fc>
   1b034:	mov	r1, #0
   1b038:	mov	r2, #4
   1b03c:	b	1b07c <main@@Base+0x52ec>
   1b040:	eor	r1, r4, r1
   1b044:	add	r2, r0, #50	; 0x32
   1b048:	eor	r2, r7, r2
   1b04c:	orrs	r2, r2, r1
   1b050:	bne	1b098 <main@@Base+0x5308>
   1b054:	str	r3, [sp]
   1b058:	mov	r0, r9
   1b05c:	mov	r1, r5
   1b060:	mov	r2, r6
   1b064:	mov	r3, #8
   1b068:	bl	265ec <flatcc_json_parser_match_constant@@Base>
   1b06c:	cmp	r0, r5
   1b070:	beq	1b08c <main@@Base+0x52fc>
   1b074:	mov	r1, #0
   1b078:	mov	r2, #3
   1b07c:	str	r2, [sl]
   1b080:	str	r1, [sl, #4]
   1b084:	str	r1, [r8]
   1b088:	mov	r5, r0
   1b08c:	mov	r0, r5
   1b090:	sub	sp, fp, #28
   1b094:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1b098:	bic	r2, r7, #255	; 0xff
   1b09c:	eor	r0, r2, r0
   1b0a0:	orrs	r0, r0, r1
   1b0a4:	mov	sl, r5
   1b0a8:	bne	1b0f0 <main@@Base+0x5360>
   1b0ac:	str	r3, [sp]
   1b0b0:	mov	r0, r9
   1b0b4:	mov	r1, r5
   1b0b8:	mov	r2, r6
   1b0bc:	mov	r3, #7
   1b0c0:	bl	265ec <flatcc_json_parser_match_constant@@Base>
   1b0c4:	mov	sl, r0
   1b0c8:	cmp	r0, r5
   1b0cc:	beq	1b0ec <main@@Base+0x535c>
   1b0d0:	mov	r1, #0
   1b0d4:	mov	r0, #1
   1b0d8:	ldr	r2, [fp, #8]
   1b0dc:	strd	r0, [r2]
   1b0e0:	str	r1, [r8]
   1b0e4:	mov	r5, sl
   1b0e8:	b	1b08c <main@@Base+0x52fc>
   1b0ec:	ldr	r3, [fp, #12]
   1b0f0:	movw	r0, #20037	; 0x4e45
   1b0f4:	movt	r0, #20047	; 0x4e4f
   1b0f8:	teq	r4, r0
   1b0fc:	bne	1b13c <main@@Base+0x53ac>
   1b100:	str	r3, [sp]
   1b104:	mov	r0, r9
   1b108:	mov	r1, sl
   1b10c:	mov	r2, r6
   1b110:	mov	r3, #4
   1b114:	bl	265ec <flatcc_json_parser_match_constant@@Base>
   1b118:	cmp	r0, sl
   1b11c:	beq	1b134 <main@@Base+0x53a4>
   1b120:	mov	r1, #0
   1b124:	ldr	r2, [fp, #8]
   1b128:	str	r1, [r2]
   1b12c:	str	r1, [r2, #4]
   1b130:	b	1b084 <main@@Base+0x52f4>
   1b134:	mov	sl, r0
   1b138:	ldr	r3, [fp, #12]
   1b13c:	movw	r0, #28016	; 0x6d70
   1b140:	movt	r0, #21353	; 0x5369
   1b144:	eor	r0, r7, r0
   1b148:	movw	r1, #29556	; 0x7374
   1b14c:	movt	r1, #21605	; 0x5465
   1b150:	eor	r1, r4, r1
   1b154:	orrs	r0, r0, r1
   1b158:	bne	1b08c <main@@Base+0x52fc>
   1b15c:	mov	r7, r3
   1b160:	add	r0, sl, #8
   1b164:	mov	r1, r6
   1b168:	bl	196a0 <main@@Base+0x3910>
   1b16c:	movw	r2, #21601	; 0x5461
   1b170:	movt	r2, #27749	; 0x6c65
   1b174:	eor	r1, r1, r2
   1b178:	movw	r2, #25943	; 0x6557
   1b17c:	movt	r2, #25196	; 0x626c
   1b180:	eor	r0, r0, r2
   1b184:	orrs	r0, r0, r1
   1b188:	bne	1b08c <main@@Base+0x52fc>
   1b18c:	add	r4, sl, #16
   1b190:	mov	r0, r4
   1b194:	mov	r1, r6
   1b198:	bl	196a0 <main@@Base+0x3910>
   1b19c:	lsr	r0, r0, #8
   1b1a0:	orr	r0, r0, r1, lsl #24
   1b1a4:	movw	r2, #30061	; 0x756d
   1b1a8:	movt	r2, #17774	; 0x456e
   1b1ac:	eor	r0, r0, r2
   1b1b0:	movw	r2, #29800	; 0x7468
   1b1b4:	movt	r2, #105	; 0x69
   1b1b8:	eor	r1, r2, r1, lsr #8
   1b1bc:	orrs	r0, r0, r1
   1b1c0:	bne	1b08c <main@@Base+0x52fc>
   1b1c4:	str	r7, [sp]
   1b1c8:	mov	r0, r9
   1b1cc:	mov	r1, r4
   1b1d0:	mov	r2, r6
   1b1d4:	mov	r3, #7
   1b1d8:	bl	265ec <flatcc_json_parser_match_constant@@Base>
   1b1dc:	cmp	r0, r4
   1b1e0:	ldr	r3, [fp, #8]
   1b1e4:	beq	1b08c <main@@Base+0x52fc>
   1b1e8:	mov	r1, #0
   1b1ec:	mov	r2, #2
   1b1f0:	str	r2, [r3]
   1b1f4:	str	r1, [r3, #4]
   1b1f8:	b	1b084 <main@@Base+0x52f4>
   1b1fc:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   1b200:	add	fp, sp, #24
   1b204:	sub	sp, sp, #8
   1b208:	mov	r8, r3
   1b20c:	mov	r6, r2
   1b210:	mov	r5, r1
   1b214:	mov	r7, r0
   1b218:	sub	r4, r2, r1
   1b21c:	cmp	r4, #4
   1b220:	blt	1b264 <main@@Base+0x54d4>
   1b224:	movw	r1, #16700	; 0x413c
   1b228:	movt	r1, #3
   1b22c:	mov	r0, r5
   1b230:	mov	r2, #4
   1b234:	bl	14ebc <bcmp@plt>
   1b238:	cmp	r0, #0
   1b23c:	beq	1b290 <main@@Base+0x5500>
   1b240:	cmp	r4, #5
   1b244:	blt	1b264 <main@@Base+0x54d4>
   1b248:	movw	r1, #16705	; 0x4141
   1b24c:	movt	r1, #3
   1b250:	mov	r0, r5
   1b254:	mov	r2, #5
   1b258:	bl	14ebc <bcmp@plt>
   1b25c:	cmp	r0, #0
   1b260:	beq	1b2a4 <main@@Base+0x5514>
   1b264:	add	r3, sp, #7
   1b268:	mov	r0, r7
   1b26c:	mov	r1, r5
   1b270:	mov	r2, r6
   1b274:	bl	1a2b8 <main@@Base+0x4528>
   1b278:	ldrb	r1, [sp, #7]
   1b27c:	cmp	r1, #0
   1b280:	movwne	r1, #1
   1b284:	strb	r1, [r8]
   1b288:	sub	sp, fp, #24
   1b28c:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   1b290:	mov	r0, #1
   1b294:	strb	r0, [r8]
   1b298:	add	r0, r5, #4
   1b29c:	sub	sp, fp, #24
   1b2a0:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   1b2a4:	mov	r0, #0
   1b2a8:	strb	r0, [r8]
   1b2ac:	add	r0, r5, #5
   1b2b0:	sub	sp, fp, #24
   1b2b4:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   1b2b8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1b2bc:	add	fp, sp, #28
   1b2c0:	sub	sp, sp, #36	; 0x24
   1b2c4:	mov	r8, r3
   1b2c8:	mov	r6, r2
   1b2cc:	mov	r5, r0
   1b2d0:	mov	r0, #0
   1b2d4:	strb	r0, [fp, #-29]	; 0xffffffe3
   1b2d8:	ldr	sl, [fp, #8]
   1b2dc:	strb	r0, [sl]
   1b2e0:	mov	r0, r5
   1b2e4:	bl	1d078 <main@@Base+0x72e8>
   1b2e8:	mov	r4, r0
   1b2ec:	cmp	r0, r6
   1b2f0:	beq	1b3a0 <main@@Base+0x5610>
   1b2f4:	mov	r9, r8
   1b2f8:	b	1b30c <main@@Base+0x557c>
   1b2fc:	ldr	r0, [r9, #4]!
   1b300:	cmp	r0, #0
   1b304:	mov	r4, r7
   1b308:	beq	1b3b0 <main@@Base+0x5620>
   1b30c:	ldr	r7, [r9]
   1b310:	add	r0, sp, #24
   1b314:	str	r0, [sp]
   1b318:	add	r0, sp, #16
   1b31c:	str	r0, [sp, #4]
   1b320:	mov	r0, r5
   1b324:	mov	r1, r4
   1b328:	mov	r2, r6
   1b32c:	add	r3, sp, #20
   1b330:	blx	r7
   1b334:	mov	r7, r0
   1b338:	cmp	r0, r6
   1b33c:	beq	1b3c8 <main@@Base+0x5638>
   1b340:	cmp	r7, r4
   1b344:	beq	1b2fc <main@@Base+0x556c>
   1b348:	ldr	r3, [sp, #20]
   1b34c:	ldr	r0, [sp, #24]
   1b350:	ldr	r1, [sp, #28]
   1b354:	stm	sp, {r0, r1}
   1b358:	sub	r0, fp, #29
   1b35c:	str	r0, [sp, #8]
   1b360:	mov	r0, r5
   1b364:	mov	r1, r7
   1b368:	mov	r2, r6
   1b36c:	bl	1fda4 <main@@Base+0xa014>
   1b370:	cmp	r0, r6
   1b374:	beq	1b3a8 <main@@Base+0x5618>
   1b378:	ldrb	r0, [sl]
   1b37c:	ldrb	r1, [fp, #-29]	; 0xffffffe3
   1b380:	add	r0, r0, r1
   1b384:	strb	r0, [sl]
   1b388:	ldr	r0, [sp, #16]
   1b38c:	cmp	r0, #0
   1b390:	mov	r4, r7
   1b394:	mov	r9, r8
   1b398:	bne	1b30c <main@@Base+0x557c>
   1b39c:	b	1b3c8 <main@@Base+0x5638>
   1b3a0:	mov	r7, r4
   1b3a4:	b	1b3c8 <main@@Base+0x5638>
   1b3a8:	mov	r7, r6
   1b3ac:	b	1b3c8 <main@@Base+0x5638>
   1b3b0:	mov	r0, r5
   1b3b4:	mov	r1, r7
   1b3b8:	mov	r2, r6
   1b3bc:	mov	r3, #23
   1b3c0:	bl	25fa0 <flatcc_json_parser_set_error@@Base>
   1b3c4:	mov	r7, r0
   1b3c8:	mov	r0, r7
   1b3cc:	sub	sp, fp, #28
   1b3d0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1b3d4:	push	{r4, r5, fp, lr}
   1b3d8:	add	fp, sp, #8
   1b3dc:	mov	r4, r1
   1b3e0:	mov	r5, r0
   1b3e4:	mov	r0, r1
   1b3e8:	bl	1fdd0 <main@@Base+0xa040>
   1b3ec:	strb	r4, [r5]
   1b3f0:	pop	{r4, r5, fp, pc}
   1b3f4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1b3f8:	add	fp, sp, #28
   1b3fc:	sub	sp, sp, #28
   1b400:	mov	r6, r3
   1b404:	mov	r4, r2
   1b408:	mov	r8, r0
   1b40c:	add	r3, sp, #24
   1b410:	bl	195e8 <main@@Base+0x3858>
   1b414:	mov	r1, r0
   1b418:	ldr	r0, [sp, #24]
   1b41c:	cmp	r0, #0
   1b420:	beq	1b608 <main@@Base+0x5878>
   1b424:	str	r6, [sp, #12]
   1b428:	add	r0, r6, #4
   1b42c:	str	r0, [sp, #8]
   1b430:	add	r5, sp, #20
   1b434:	mov	sl, r5
   1b438:	b	1b478 <main@@Base+0x56e8>
   1b43c:	mov	r0, r8
   1b440:	mov	r1, r7
   1b444:	mov	r2, r4
   1b448:	bl	2669c <flatcc_json_parser_unmatched_symbol@@Base>
   1b44c:	mov	r9, r0
   1b450:	mov	r0, r8
   1b454:	mov	r1, r9
   1b458:	mov	r2, r4
   1b45c:	add	r3, sp, #24
   1b460:	bl	1c5b0 <main@@Base+0x6820>
   1b464:	mov	r1, r0
   1b468:	ldr	r0, [sp, #24]
   1b46c:	cmp	r0, #0
   1b470:	mov	r5, sl
   1b474:	beq	1b608 <main@@Base+0x5878>
   1b478:	mov	r0, r8
   1b47c:	mov	r2, r4
   1b480:	bl	19678 <main@@Base+0x38e8>
   1b484:	mov	r6, r0
   1b488:	mov	r1, r4
   1b48c:	bl	196a0 <main@@Base+0x3910>
   1b490:	mov	r2, r1
   1b494:	bfc	r2, #0, #16
   1b498:	movw	r3, #0
   1b49c:	movt	r3, #26980	; 0x6964
   1b4a0:	teq	r2, r3
   1b4a4:	bne	1b4f8 <main@@Base+0x5768>
   1b4a8:	mov	r0, r8
   1b4ac:	mov	r1, r6
   1b4b0:	mov	r2, r4
   1b4b4:	mov	r3, #2
   1b4b8:	bl	196a4 <main@@Base+0x3914>
   1b4bc:	mov	r7, r0
   1b4c0:	cmp	r6, r0
   1b4c4:	beq	1b43c <main@@Base+0x56ac>
   1b4c8:	mov	r0, #0
   1b4cc:	str	r0, [sp, #20]
   1b4d0:	mov	r0, r8
   1b4d4:	mov	r1, r7
   1b4d8:	mov	r2, r4
   1b4dc:	mov	r3, r5
   1b4e0:	bl	1c0d0 <main@@Base+0x6340>
   1b4e4:	mov	r6, r0
   1b4e8:	cmp	r7, r0
   1b4ec:	beq	1b578 <main@@Base+0x57e8>
   1b4f0:	mov	r9, r6
   1b4f4:	b	1b5a4 <main@@Base+0x5814>
   1b4f8:	movw	r2, #25445	; 0x6365
   1b4fc:	movt	r2, #24942	; 0x616e
   1b500:	eor	r0, r0, r2
   1b504:	movw	r2, #29556	; 0x7374
   1b508:	movt	r2, #25705	; 0x6469
   1b50c:	eor	r1, r1, r2
   1b510:	orrs	r0, r0, r1
   1b514:	bne	1b56c <main@@Base+0x57dc>
   1b518:	mov	r0, r8
   1b51c:	mov	r1, r6
   1b520:	mov	r2, r4
   1b524:	mov	r3, #8
   1b528:	bl	196a4 <main@@Base+0x3914>
   1b52c:	mov	r7, r0
   1b530:	cmp	r6, r0
   1b534:	beq	1b43c <main@@Base+0x56ac>
   1b538:	mov	r0, #0
   1b53c:	str	r0, [sp, #16]
   1b540:	mov	r0, r8
   1b544:	mov	r1, r7
   1b548:	mov	r2, r4
   1b54c:	add	r5, sp, #16
   1b550:	mov	r3, r5
   1b554:	bl	1c0d0 <main@@Base+0x6340>
   1b558:	mov	r6, r0
   1b55c:	cmp	r7, r0
   1b560:	beq	1b5b4 <main@@Base+0x5824>
   1b564:	mov	r9, r6
   1b568:	b	1b5e0 <main@@Base+0x5850>
   1b56c:	mov	r0, r8
   1b570:	mov	r1, r6
   1b574:	b	1b444 <main@@Base+0x56b4>
   1b578:	str	r5, [sp]
   1b57c:	mov	r0, r8
   1b580:	mov	r1, r6
   1b584:	mov	r2, r4
   1b588:	movw	r3, #33556	; 0x8314
   1b58c:	movt	r3, #4
   1b590:	bl	1c160 <main@@Base+0x63d0>
   1b594:	mov	r9, r0
   1b598:	cmp	r0, r6
   1b59c:	cmpne	r9, r4
   1b5a0:	beq	1b5f0 <main@@Base+0x5860>
   1b5a4:	ldr	r1, [sp, #20]
   1b5a8:	ldr	r0, [sp, #12]
   1b5ac:	bl	1c27c <main@@Base+0x64ec>
   1b5b0:	b	1b450 <main@@Base+0x56c0>
   1b5b4:	str	r5, [sp]
   1b5b8:	mov	r0, r8
   1b5bc:	mov	r1, r6
   1b5c0:	mov	r2, r4
   1b5c4:	movw	r3, #33568	; 0x8320
   1b5c8:	movt	r3, #4
   1b5cc:	bl	1c160 <main@@Base+0x63d0>
   1b5d0:	mov	r9, r0
   1b5d4:	cmp	r0, r6
   1b5d8:	cmpne	r9, r4
   1b5dc:	beq	1b5f0 <main@@Base+0x5860>
   1b5e0:	ldr	r1, [sp, #16]
   1b5e4:	ldr	r0, [sp, #8]
   1b5e8:	bl	1c27c <main@@Base+0x64ec>
   1b5ec:	b	1b450 <main@@Base+0x56c0>
   1b5f0:	mov	r0, r8
   1b5f4:	mov	r1, r9
   1b5f8:	mov	r2, r4
   1b5fc:	mov	r3, #33	; 0x21
   1b600:	bl	25fa0 <flatcc_json_parser_set_error@@Base>
   1b604:	mov	r1, r0
   1b608:	mov	r0, r1
   1b60c:	sub	sp, fp, #28
   1b610:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1b614:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1b618:	add	fp, sp, #28
   1b61c:	sub	sp, sp, #20
   1b620:	mov	r7, r3
   1b624:	mov	r4, r2
   1b628:	mov	r6, r1
   1b62c:	mov	r5, r0
   1b630:	mov	r0, #0
   1b634:	str	r0, [r3]
   1b638:	ldr	r0, [r5]
   1b63c:	mov	r1, #3
   1b640:	bl	22744 <flatcc_builder_start_table@@Base>
   1b644:	cmp	r0, #0
   1b648:	bne	1b854 <main@@Base+0x5ac4>
   1b64c:	add	r3, sp, #16
   1b650:	mov	r0, r5
   1b654:	mov	r1, r6
   1b658:	mov	r2, r4
   1b65c:	bl	195e8 <main@@Base+0x3858>
   1b660:	mov	r6, r0
   1b664:	ldr	r0, [sp, #16]
   1b668:	cmp	r0, #0
   1b66c:	str	r7, [sp, #8]
   1b670:	beq	1b848 <main@@Base+0x5ab8>
   1b674:	movw	r7, #29556	; 0x7374
   1b678:	movt	r7, #28261	; 0x6e65
   1b67c:	movw	r8, #0
   1b680:	movt	r8, #25956	; 0x6564
   1b684:	movw	r9, #29793	; 0x7461
   1b688:	movt	r9, #25697	; 0x6461
   1b68c:	add	sl, sp, #16
   1b690:	b	1b6cc <main@@Base+0x593c>
   1b694:	mov	r0, r5
   1b698:	mov	r1, r6
   1b69c:	mov	r2, r4
   1b6a0:	bl	2669c <flatcc_json_parser_unmatched_symbol@@Base>
   1b6a4:	mov	r6, r0
   1b6a8:	mov	r0, r5
   1b6ac:	mov	r1, r6
   1b6b0:	mov	r2, r4
   1b6b4:	mov	r3, sl
   1b6b8:	bl	1c5b0 <main@@Base+0x6820>
   1b6bc:	mov	r6, r0
   1b6c0:	ldr	r0, [sp, #16]
   1b6c4:	cmp	r0, #0
   1b6c8:	beq	1b848 <main@@Base+0x5ab8>
   1b6cc:	mov	r0, r5
   1b6d0:	mov	r1, r6
   1b6d4:	mov	r2, r4
   1b6d8:	bl	19678 <main@@Base+0x38e8>
   1b6dc:	mov	r6, r0
   1b6e0:	mov	r1, r4
   1b6e4:	bl	196a0 <main@@Base+0x3910>
   1b6e8:	subs	r2, r0, r8
   1b6ec:	sbcs	r2, r1, r7
   1b6f0:	bcs	1b750 <main@@Base+0x59c0>
   1b6f4:	teq	r1, r9
   1b6f8:	bne	1b694 <main@@Base+0x5904>
   1b6fc:	mov	r0, r5
   1b700:	mov	r1, r6
   1b704:	mov	r2, r4
   1b708:	mov	r3, #4
   1b70c:	bl	196a4 <main@@Base+0x3914>
   1b710:	mov	r1, r0
   1b714:	cmp	r6, r0
   1b718:	beq	1b840 <main@@Base+0x5ab0>
   1b71c:	mov	r0, #0
   1b720:	str	r0, [sp]
   1b724:	mov	r0, r5
   1b728:	mov	r2, r4
   1b72c:	add	r3, sp, #12
   1b730:	bl	274a4 <flatcc_json_parser_build_uint8_vector_base64@@Base>
   1b734:	mov	r6, r0
   1b738:	ldr	r0, [sp, #12]
   1b73c:	cmp	r0, #0
   1b740:	beq	1b854 <main@@Base+0x5ac4>
   1b744:	ldr	r0, [r5]
   1b748:	mov	r1, #0
   1b74c:	b	1b828 <main@@Base+0x5a98>
   1b750:	movw	r2, #29292	; 0x726c
   1b754:	movt	r2, #117	; 0x75
   1b758:	eor	r2, r2, r1, lsr #8
   1b75c:	lsr	r3, r0, #8
   1b760:	orr	r3, r3, r1, lsl #24
   1b764:	eor	r3, r3, r9
   1b768:	orrs	r2, r3, r2
   1b76c:	bne	1b7c4 <main@@Base+0x5a34>
   1b770:	mov	r0, r5
   1b774:	mov	r1, r6
   1b778:	mov	r2, r4
   1b77c:	mov	r3, #7
   1b780:	bl	196a4 <main@@Base+0x3914>
   1b784:	mov	r1, r0
   1b788:	cmp	r6, r0
   1b78c:	beq	1b840 <main@@Base+0x5ab0>
   1b790:	mov	r0, #1
   1b794:	str	r0, [sp]
   1b798:	mov	r0, r5
   1b79c:	mov	r2, r4
   1b7a0:	add	r3, sp, #12
   1b7a4:	bl	274a4 <flatcc_json_parser_build_uint8_vector_base64@@Base>
   1b7a8:	mov	r6, r0
   1b7ac:	ldr	r0, [sp, #12]
   1b7b0:	cmp	r0, #0
   1b7b4:	beq	1b854 <main@@Base+0x5ac4>
   1b7b8:	ldr	r0, [r5]
   1b7bc:	mov	r1, #1
   1b7c0:	b	1b828 <main@@Base+0x5a98>
   1b7c4:	eor	r1, r1, r7
   1b7c8:	bfc	r0, #0, #16
   1b7cc:	eor	r0, r0, r8
   1b7d0:	orrs	r0, r0, r1
   1b7d4:	bne	1b694 <main@@Base+0x5904>
   1b7d8:	mov	r0, r5
   1b7dc:	mov	r1, r6
   1b7e0:	mov	r2, r4
   1b7e4:	mov	r3, #6
   1b7e8:	bl	196a4 <main@@Base+0x3914>
   1b7ec:	mov	r1, r0
   1b7f0:	cmp	r6, r0
   1b7f4:	beq	1b840 <main@@Base+0x5ab0>
   1b7f8:	mov	r0, #0
   1b7fc:	str	r0, [sp]
   1b800:	mov	r0, r5
   1b804:	mov	r2, r4
   1b808:	add	r3, sp, #12
   1b80c:	bl	274a4 <flatcc_json_parser_build_uint8_vector_base64@@Base>
   1b810:	mov	r6, r0
   1b814:	ldr	r0, [sp, #12]
   1b818:	cmp	r0, #0
   1b81c:	beq	1b854 <main@@Base+0x5ac4>
   1b820:	ldr	r0, [r5]
   1b824:	mov	r1, #2
   1b828:	bl	2347c <flatcc_builder_table_add_offset@@Base>
   1b82c:	cmp	r0, #0
   1b830:	beq	1b854 <main@@Base+0x5ac4>
   1b834:	ldr	r1, [sp, #12]
   1b838:	str	r1, [r0]
   1b83c:	b	1b6a8 <main@@Base+0x5918>
   1b840:	mov	r0, r5
   1b844:	b	1b69c <main@@Base+0x590c>
   1b848:	ldr	r0, [r5, #20]
   1b84c:	cmp	r0, #0
   1b850:	beq	1b878 <main@@Base+0x5ae8>
   1b854:	mov	r0, r5
   1b858:	mov	r1, r6
   1b85c:	mov	r2, r4
   1b860:	mov	r3, #33	; 0x21
   1b864:	bl	25fa0 <flatcc_json_parser_set_error@@Base>
   1b868:	mov	r6, r0
   1b86c:	mov	r0, r6
   1b870:	sub	sp, fp, #28
   1b874:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1b878:	ldr	r0, [r5]
   1b87c:	bl	22e50 <flatcc_builder_end_table@@Base>
   1b880:	ldr	r1, [sp, #8]
   1b884:	str	r0, [r1]
   1b888:	cmp	r0, #0
   1b88c:	bne	1b86c <main@@Base+0x5adc>
   1b890:	b	1b854 <main@@Base+0x5ac4>
   1b894:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1b898:	add	fp, sp, #28
   1b89c:	sub	sp, sp, #28
   1b8a0:	mov	r6, r3
   1b8a4:	mov	r4, r2
   1b8a8:	mov	sl, r1
   1b8ac:	mov	r5, r0
   1b8b0:	mov	r0, #0
   1b8b4:	str	r0, [r3]
   1b8b8:	ldr	r0, [r5]
   1b8bc:	mov	r1, #3
   1b8c0:	bl	22744 <flatcc_builder_start_table@@Base>
   1b8c4:	cmp	r0, #0
   1b8c8:	beq	1b8f0 <main@@Base+0x5b60>
   1b8cc:	mov	r0, r5
   1b8d0:	mov	r1, sl
   1b8d4:	mov	r2, r4
   1b8d8:	mov	r3, #33	; 0x21
   1b8dc:	bl	25fa0 <flatcc_json_parser_set_error@@Base>
   1b8e0:	mov	sl, r0
   1b8e4:	mov	r0, sl
   1b8e8:	sub	sp, fp, #28
   1b8ec:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1b8f0:	str	r6, [sp, #4]
   1b8f4:	add	r3, sp, #24
   1b8f8:	mov	r0, r5
   1b8fc:	mov	r1, sl
   1b900:	mov	r2, r4
   1b904:	bl	195e8 <main@@Base+0x3858>
   1b908:	mov	sl, r0
   1b90c:	ldr	r0, [sp, #24]
   1b910:	cmp	r0, #0
   1b914:	beq	1bbd0 <main@@Base+0x5e40>
   1b918:	movw	r9, #65535	; 0xffff
   1b91c:	movt	r9, #26979	; 0x6963
   1b920:	add	r8, sp, #24
   1b924:	b	1b960 <main@@Base+0x5bd0>
   1b928:	mov	r0, r5
   1b92c:	mov	r1, r6
   1b930:	mov	r2, r4
   1b934:	bl	2669c <flatcc_json_parser_unmatched_symbol@@Base>
   1b938:	mov	sl, r0
   1b93c:	mov	r0, r5
   1b940:	mov	r1, sl
   1b944:	mov	r2, r4
   1b948:	mov	r3, r8
   1b94c:	bl	1c5b0 <main@@Base+0x6820>
   1b950:	mov	sl, r0
   1b954:	ldr	r0, [sp, #24]
   1b958:	cmp	r0, #0
   1b95c:	beq	1bbd0 <main@@Base+0x5e40>
   1b960:	mov	r0, r5
   1b964:	mov	r1, sl
   1b968:	mov	r2, r4
   1b96c:	bl	19678 <main@@Base+0x38e8>
   1b970:	mov	r6, r0
   1b974:	mov	r1, r4
   1b978:	bl	196a0 <main@@Base+0x3910>
   1b97c:	cmp	r1, r9
   1b980:	bhi	1b9f4 <main@@Base+0x5c64>
   1b984:	movw	r2, #30062	; 0x756e
   1b988:	movt	r2, #25455	; 0x636f
   1b98c:	eor	r1, r1, r2
   1b990:	and	r0, r0, #-16777216	; 0xff000000
   1b994:	eor	r0, r0, #1946157056	; 0x74000000
   1b998:	orrs	r0, r0, r1
   1b99c:	bne	1b928 <main@@Base+0x5b98>
   1b9a0:	mov	r0, r5
   1b9a4:	mov	r1, r6
   1b9a8:	mov	r2, r4
   1b9ac:	mov	r3, #5
   1b9b0:	bl	196a4 <main@@Base+0x3914>
   1b9b4:	mov	r7, r0
   1b9b8:	cmp	r6, r0
   1b9bc:	add	sl, sp, #8
   1b9c0:	beq	1bad4 <main@@Base+0x5d44>
   1b9c4:	mov	r0, #0
   1b9c8:	strh	r0, [sp, #8]
   1b9cc:	mov	r0, r5
   1b9d0:	mov	r1, r7
   1b9d4:	mov	r2, r4
   1b9d8:	mov	r3, sl
   1b9dc:	bl	1f9d4 <main@@Base+0x9c44>
   1b9e0:	mov	r6, r0
   1b9e4:	cmp	r7, r0
   1b9e8:	beq	1bae0 <main@@Base+0x5d50>
   1b9ec:	mov	sl, r6
   1b9f0:	b	1bb0c <main@@Base+0x5d7c>
   1b9f4:	bic	r0, r1, #255	; 0xff
   1b9f8:	movw	r2, #27648	; 0x6c00
   1b9fc:	movt	r2, #30305	; 0x7661
   1ba00:	teq	r0, r2
   1ba04:	add	sl, sp, #8
   1ba08:	bne	1ba60 <main@@Base+0x5cd0>
   1ba0c:	mov	r0, r5
   1ba10:	mov	r1, r6
   1ba14:	mov	r2, r4
   1ba18:	mov	r3, #3
   1ba1c:	bl	196a4 <main@@Base+0x3914>
   1ba20:	mov	r7, r0
   1ba24:	cmp	r6, r0
   1ba28:	beq	1bad4 <main@@Base+0x5d44>
   1ba2c:	mov	r0, #0
   1ba30:	str	r0, [sp, #12]
   1ba34:	str	r0, [sp, #8]
   1ba38:	mov	r0, r5
   1ba3c:	mov	r1, r7
   1ba40:	mov	r2, r4
   1ba44:	mov	r3, sl
   1ba48:	bl	1bee8 <main@@Base+0x6158>
   1ba4c:	mov	r6, r0
   1ba50:	cmp	r7, r0
   1ba54:	beq	1bb4c <main@@Base+0x5dbc>
   1ba58:	mov	sl, r6
   1ba5c:	b	1bb78 <main@@Base+0x5de8>
   1ba60:	bfc	r1, #0, #16
   1ba64:	movw	r0, #0
   1ba68:	movt	r0, #26980	; 0x6964
   1ba6c:	teq	r1, r0
   1ba70:	bne	1b928 <main@@Base+0x5b98>
   1ba74:	mov	r0, r5
   1ba78:	mov	r1, r6
   1ba7c:	mov	r2, r4
   1ba80:	mov	r3, #2
   1ba84:	bl	196a4 <main@@Base+0x3914>
   1ba88:	mov	r1, r0
   1ba8c:	cmp	r6, r0
   1ba90:	beq	1bbc8 <main@@Base+0x5e38>
   1ba94:	mov	r0, r5
   1ba98:	mov	r2, r4
   1ba9c:	add	r3, sp, #20
   1baa0:	bl	2787c <flatcc_json_parser_build_string@@Base>
   1baa4:	mov	sl, r0
   1baa8:	ldr	r0, [sp, #20]
   1baac:	cmp	r0, #0
   1bab0:	beq	1b8cc <main@@Base+0x5b3c>
   1bab4:	ldr	r0, [r5]
   1bab8:	mov	r1, #0
   1babc:	bl	2347c <flatcc_builder_table_add_offset@@Base>
   1bac0:	cmp	r0, #0
   1bac4:	beq	1b8cc <main@@Base+0x5b3c>
   1bac8:	ldr	r1, [sp, #20]
   1bacc:	str	r1, [r0]
   1bad0:	b	1b93c <main@@Base+0x5bac>
   1bad4:	mov	r0, r5
   1bad8:	mov	r1, r7
   1badc:	b	1b930 <main@@Base+0x5ba0>
   1bae0:	str	sl, [sp]
   1bae4:	mov	r0, r5
   1bae8:	mov	r1, r6
   1baec:	mov	r2, r4
   1baf0:	movw	r3, #33580	; 0x832c
   1baf4:	movt	r3, #4
   1baf8:	bl	1fa64 <main@@Base+0x9cd4>
   1bafc:	mov	sl, r0
   1bb00:	cmp	r0, r6
   1bb04:	cmpne	sl, r4
   1bb08:	beq	1b8cc <main@@Base+0x5b3c>
   1bb0c:	ldrh	r6, [sp, #8]
   1bb10:	cmp	r6, #0
   1bb14:	bne	1bb24 <main@@Base+0x5d94>
   1bb18:	ldrb	r0, [r5, #8]
   1bb1c:	tst	r0, #2
   1bb20:	beq	1b93c <main@@Base+0x5bac>
   1bb24:	ldr	r0, [r5]
   1bb28:	mov	r1, #2
   1bb2c:	mov	r2, #2
   1bb30:	mov	r3, #2
   1bb34:	bl	23540 <flatcc_builder_table_add@@Base>
   1bb38:	cmp	r0, #0
   1bb3c:	beq	1b8cc <main@@Base+0x5b3c>
   1bb40:	mov	r1, r6
   1bb44:	bl	1fb80 <main@@Base+0x9df0>
   1bb48:	b	1b93c <main@@Base+0x5bac>
   1bb4c:	str	sl, [sp]
   1bb50:	mov	r0, r5
   1bb54:	mov	r1, r6
   1bb58:	mov	r2, r4
   1bb5c:	movw	r3, #33592	; 0x8338
   1bb60:	movt	r3, #4
   1bb64:	bl	1bf7c <main@@Base+0x61ec>
   1bb68:	mov	sl, r0
   1bb6c:	cmp	r0, r6
   1bb70:	cmpne	sl, r4
   1bb74:	beq	1b8cc <main@@Base+0x5b3c>
   1bb78:	mov	r7, r9
   1bb7c:	ldr	r6, [sp, #8]
   1bb80:	ldr	r9, [sp, #12]
   1bb84:	orrs	r0, r6, r9
   1bb88:	bne	1bb98 <main@@Base+0x5e08>
   1bb8c:	ldrb	r0, [r5, #8]
   1bb90:	tst	r0, #2
   1bb94:	beq	1bbc0 <main@@Base+0x5e30>
   1bb98:	ldr	r0, [r5]
   1bb9c:	mov	r1, #1
   1bba0:	mov	r2, #8
   1bba4:	mov	r3, #8
   1bba8:	bl	23540 <flatcc_builder_table_add@@Base>
   1bbac:	cmp	r0, #0
   1bbb0:	beq	1b8cc <main@@Base+0x5b3c>
   1bbb4:	mov	r2, r6
   1bbb8:	mov	r3, r9
   1bbbc:	bl	1c0a8 <main@@Base+0x6318>
   1bbc0:	mov	r9, r7
   1bbc4:	b	1b93c <main@@Base+0x5bac>
   1bbc8:	mov	r0, r5
   1bbcc:	b	1b930 <main@@Base+0x5ba0>
   1bbd0:	ldr	r0, [r5, #20]
   1bbd4:	cmp	r0, #0
   1bbd8:	bne	1b8cc <main@@Base+0x5b3c>
   1bbdc:	ldr	r0, [r5]
   1bbe0:	bl	22e50 <flatcc_builder_end_table@@Base>
   1bbe4:	ldr	r1, [sp, #4]
   1bbe8:	str	r0, [r1]
   1bbec:	cmp	r0, #0
   1bbf0:	bne	1b8e4 <main@@Base+0x5b54>
   1bbf4:	b	1b8cc <main@@Base+0x5b3c>
   1bbf8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1bbfc:	add	fp, sp, #28
   1bc00:	sub	sp, sp, #28
   1bc04:	mov	r8, r3
   1bc08:	mov	r7, r2
   1bc0c:	mov	r5, r0
   1bc10:	mov	r0, #0
   1bc14:	str	r0, [sp, #24]
   1bc18:	ldr	sl, [fp, #8]
   1bc1c:	str	r0, [sl]
   1bc20:	mov	r0, r5
   1bc24:	bl	1d078 <main@@Base+0x72e8>
   1bc28:	mov	r6, r0
   1bc2c:	cmp	r0, r7
   1bc30:	beq	1bcd0 <main@@Base+0x5f40>
   1bc34:	mov	r9, r8
   1bc38:	b	1bc4c <main@@Base+0x5ebc>
   1bc3c:	ldr	r0, [r9, #4]!
   1bc40:	cmp	r0, #0
   1bc44:	mov	r6, r4
   1bc48:	beq	1bce0 <main@@Base+0x5f50>
   1bc4c:	ldr	r4, [r9]
   1bc50:	add	r0, sp, #16
   1bc54:	str	r0, [sp]
   1bc58:	add	r0, sp, #8
   1bc5c:	str	r0, [sp, #4]
   1bc60:	mov	r0, r5
   1bc64:	mov	r1, r6
   1bc68:	mov	r2, r7
   1bc6c:	add	r3, sp, #12
   1bc70:	blx	r4
   1bc74:	mov	r4, r0
   1bc78:	cmp	r0, r7
   1bc7c:	beq	1bcf8 <main@@Base+0x5f68>
   1bc80:	cmp	r4, r6
   1bc84:	beq	1bc3c <main@@Base+0x5eac>
   1bc88:	add	r3, sp, #12
   1bc8c:	ldm	r3, {r1, r2, r3}
   1bc90:	add	r0, sp, #24
   1bc94:	str	r0, [sp]
   1bc98:	mov	r0, r4
   1bc9c:	bl	1fdd4 <main@@Base+0xa044>
   1bca0:	cmp	r4, r7
   1bca4:	beq	1bcd8 <main@@Base+0x5f48>
   1bca8:	vldr	s0, [sp, #24]
   1bcac:	vldr	s2, [sl]
   1bcb0:	vadd.f32	s0, s0, s2
   1bcb4:	vstr	s0, [sl]
   1bcb8:	ldr	r0, [sp, #8]
   1bcbc:	cmp	r0, #0
   1bcc0:	mov	r6, r4
   1bcc4:	mov	r9, r8
   1bcc8:	bne	1bc4c <main@@Base+0x5ebc>
   1bccc:	b	1bcf8 <main@@Base+0x5f68>
   1bcd0:	mov	r4, r6
   1bcd4:	b	1bcf8 <main@@Base+0x5f68>
   1bcd8:	mov	r4, r7
   1bcdc:	b	1bcf8 <main@@Base+0x5f68>
   1bce0:	mov	r0, r5
   1bce4:	mov	r1, r4
   1bce8:	mov	r2, r7
   1bcec:	mov	r3, #23
   1bcf0:	bl	25fa0 <flatcc_json_parser_set_error@@Base>
   1bcf4:	mov	r4, r0
   1bcf8:	mov	r0, r4
   1bcfc:	sub	sp, fp, #28
   1bd00:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1bd04:	push	{r4, sl, fp, lr}
   1bd08:	add	fp, sp, #8
   1bd0c:	mov	r4, r0
   1bd10:	bl	1fe10 <main@@Base+0xa080>
   1bd14:	vstr	s0, [r4]
   1bd18:	pop	{r4, sl, fp, pc}
   1bd1c:	push	{r4, r5, r6, r7, fp, lr}
   1bd20:	add	fp, sp, #16
   1bd24:	sub	sp, sp, #24
   1bd28:	mov	r7, r1
   1bd2c:	mov	r6, r0
   1bd30:	mov	r0, #0
   1bd34:	str	r0, [sp, #20]
   1bd38:	str	r0, [sp, #16]
   1bd3c:	str	r0, [sp, #12]
   1bd40:	str	r0, [r3]
   1bd44:	cmp	r1, r2
   1bd48:	beq	1bda0 <main@@Base+0x6010>
   1bd4c:	mov	r5, r3
   1bd50:	mov	r4, r2
   1bd54:	add	r0, sp, #16
   1bd58:	str	r0, [sp]
   1bd5c:	add	r3, sp, #12
   1bd60:	mov	r0, r6
   1bd64:	mov	r1, r7
   1bd68:	bl	27380 <flatcc_json_parser_integer@@Base>
   1bd6c:	mov	r1, r0
   1bd70:	cmp	r0, r7
   1bd74:	beq	1bd9c <main@@Base+0x600c>
   1bd78:	ldr	r3, [sp, #12]
   1bd7c:	ldr	r0, [sp, #16]
   1bd80:	ldr	r2, [sp, #20]
   1bd84:	stm	sp, {r0, r2, r5}
   1bd88:	mov	r0, r6
   1bd8c:	mov	r2, r4
   1bd90:	bl	1fe14 <main@@Base+0xa084>
   1bd94:	mov	r7, r0
   1bd98:	b	1bda0 <main@@Base+0x6010>
   1bd9c:	mov	r7, r1
   1bda0:	mov	r0, r7
   1bda4:	sub	sp, fp, #16
   1bda8:	pop	{r4, r5, r6, r7, fp, pc}
   1bdac:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1bdb0:	add	fp, sp, #28
   1bdb4:	sub	sp, sp, #36	; 0x24
   1bdb8:	mov	r8, r3
   1bdbc:	mov	r6, r2
   1bdc0:	mov	r5, r0
   1bdc4:	mov	r0, #0
   1bdc8:	str	r0, [sp, #32]
   1bdcc:	ldr	sl, [fp, #8]
   1bdd0:	str	r0, [sl]
   1bdd4:	mov	r0, r5
   1bdd8:	bl	1d078 <main@@Base+0x72e8>
   1bddc:	mov	r4, r0
   1bde0:	cmp	r0, r6
   1bde4:	beq	1be94 <main@@Base+0x6104>
   1bde8:	mov	r9, r8
   1bdec:	b	1be00 <main@@Base+0x6070>
   1bdf0:	ldr	r0, [r9, #4]!
   1bdf4:	cmp	r0, #0
   1bdf8:	mov	r4, r7
   1bdfc:	beq	1bea4 <main@@Base+0x6114>
   1be00:	ldr	r7, [r9]
   1be04:	add	r0, sp, #24
   1be08:	str	r0, [sp]
   1be0c:	add	r0, sp, #16
   1be10:	str	r0, [sp, #4]
   1be14:	mov	r0, r5
   1be18:	mov	r1, r4
   1be1c:	mov	r2, r6
   1be20:	add	r3, sp, #20
   1be24:	blx	r7
   1be28:	mov	r7, r0
   1be2c:	cmp	r0, r6
   1be30:	beq	1bebc <main@@Base+0x612c>
   1be34:	cmp	r7, r4
   1be38:	beq	1bdf0 <main@@Base+0x6060>
   1be3c:	ldr	r3, [sp, #20]
   1be40:	ldr	r0, [sp, #24]
   1be44:	ldr	r1, [sp, #28]
   1be48:	stm	sp, {r0, r1}
   1be4c:	add	r0, sp, #32
   1be50:	str	r0, [sp, #8]
   1be54:	mov	r0, r5
   1be58:	mov	r1, r7
   1be5c:	mov	r2, r6
   1be60:	bl	1fe14 <main@@Base+0xa084>
   1be64:	cmp	r0, r6
   1be68:	beq	1be9c <main@@Base+0x610c>
   1be6c:	ldr	r0, [sl]
   1be70:	ldr	r1, [sp, #32]
   1be74:	add	r0, r0, r1
   1be78:	str	r0, [sl]
   1be7c:	ldr	r0, [sp, #16]
   1be80:	cmp	r0, #0
   1be84:	mov	r4, r7
   1be88:	mov	r9, r8
   1be8c:	bne	1be00 <main@@Base+0x6070>
   1be90:	b	1bebc <main@@Base+0x612c>
   1be94:	mov	r7, r4
   1be98:	b	1bebc <main@@Base+0x612c>
   1be9c:	mov	r7, r6
   1bea0:	b	1bebc <main@@Base+0x612c>
   1bea4:	mov	r0, r5
   1bea8:	mov	r1, r7
   1beac:	mov	r2, r6
   1beb0:	mov	r3, #23
   1beb4:	bl	25fa0 <flatcc_json_parser_set_error@@Base>
   1beb8:	mov	r7, r0
   1bebc:	mov	r0, r7
   1bec0:	sub	sp, fp, #28
   1bec4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1bec8:	push	{r4, r5, fp, lr}
   1becc:	add	fp, sp, #8
   1bed0:	mov	r4, r1
   1bed4:	mov	r5, r0
   1bed8:	mov	r0, r1
   1bedc:	bl	1fe70 <main@@Base+0xa0e0>
   1bee0:	str	r4, [r5]
   1bee4:	pop	{r4, r5, fp, pc}
   1bee8:	push	{r4, r5, r6, r7, fp, lr}
   1beec:	add	fp, sp, #16
   1bef0:	sub	sp, sp, #24
   1bef4:	mov	r7, r1
   1bef8:	mov	r6, r0
   1befc:	mov	r0, #0
   1bf00:	str	r0, [sp, #20]
   1bf04:	str	r0, [sp, #16]
   1bf08:	str	r0, [sp, #12]
   1bf0c:	str	r0, [r3]
   1bf10:	str	r0, [r3, #4]
   1bf14:	cmp	r1, r2
   1bf18:	beq	1bf70 <main@@Base+0x61e0>
   1bf1c:	mov	r5, r3
   1bf20:	mov	r4, r2
   1bf24:	add	r0, sp, #16
   1bf28:	str	r0, [sp]
   1bf2c:	add	r3, sp, #12
   1bf30:	mov	r0, r6
   1bf34:	mov	r1, r7
   1bf38:	bl	27380 <flatcc_json_parser_integer@@Base>
   1bf3c:	mov	r1, r0
   1bf40:	cmp	r0, r7
   1bf44:	beq	1bf6c <main@@Base+0x61dc>
   1bf48:	ldr	r3, [sp, #12]
   1bf4c:	ldr	r0, [sp, #16]
   1bf50:	ldr	r2, [sp, #20]
   1bf54:	stm	sp, {r0, r2, r5}
   1bf58:	mov	r0, r6
   1bf5c:	mov	r2, r4
   1bf60:	bl	1fe74 <main@@Base+0xa0e4>
   1bf64:	mov	r7, r0
   1bf68:	b	1bf70 <main@@Base+0x61e0>
   1bf6c:	mov	r7, r1
   1bf70:	mov	r0, r7
   1bf74:	sub	sp, fp, #16
   1bf78:	pop	{r4, r5, r6, r7, fp, pc}
   1bf7c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1bf80:	add	fp, sp, #28
   1bf84:	sub	sp, sp, #44	; 0x2c
   1bf88:	mov	r8, r3
   1bf8c:	mov	r6, r2
   1bf90:	mov	r5, r0
   1bf94:	mov	r0, #0
   1bf98:	str	r0, [sp, #36]	; 0x24
   1bf9c:	str	r0, [sp, #32]
   1bfa0:	ldr	sl, [fp, #8]
   1bfa4:	str	r0, [sl]
   1bfa8:	str	r0, [sl, #4]
   1bfac:	mov	r0, r5
   1bfb0:	bl	1d078 <main@@Base+0x72e8>
   1bfb4:	mov	r4, r0
   1bfb8:	cmp	r0, r6
   1bfbc:	beq	1c074 <main@@Base+0x62e4>
   1bfc0:	mov	r9, r8
   1bfc4:	b	1bfd8 <main@@Base+0x6248>
   1bfc8:	ldr	r0, [r9, #4]!
   1bfcc:	cmp	r0, #0
   1bfd0:	mov	r4, r7
   1bfd4:	beq	1c084 <main@@Base+0x62f4>
   1bfd8:	ldr	r7, [r9]
   1bfdc:	add	r0, sp, #24
   1bfe0:	str	r0, [sp]
   1bfe4:	add	r0, sp, #16
   1bfe8:	str	r0, [sp, #4]
   1bfec:	mov	r0, r5
   1bff0:	mov	r1, r4
   1bff4:	mov	r2, r6
   1bff8:	add	r3, sp, #20
   1bffc:	blx	r7
   1c000:	mov	r7, r0
   1c004:	cmp	r0, r6
   1c008:	beq	1c09c <main@@Base+0x630c>
   1c00c:	cmp	r7, r4
   1c010:	beq	1bfc8 <main@@Base+0x6238>
   1c014:	ldr	r3, [sp, #20]
   1c018:	ldr	r0, [sp, #24]
   1c01c:	ldr	r1, [sp, #28]
   1c020:	stm	sp, {r0, r1}
   1c024:	add	r0, sp, #32
   1c028:	str	r0, [sp, #8]
   1c02c:	mov	r0, r5
   1c030:	mov	r1, r7
   1c034:	mov	r2, r6
   1c038:	bl	1fe74 <main@@Base+0xa0e4>
   1c03c:	cmp	r0, r6
   1c040:	beq	1c07c <main@@Base+0x62ec>
   1c044:	ldrd	r0, [sl]
   1c048:	ldr	r2, [sp, #32]
   1c04c:	ldr	r3, [sp, #36]	; 0x24
   1c050:	adds	r0, r0, r2
   1c054:	adc	r1, r1, r3
   1c058:	strd	r0, [sl]
   1c05c:	ldr	r0, [sp, #16]
   1c060:	cmp	r0, #0
   1c064:	mov	r4, r7
   1c068:	mov	r9, r8
   1c06c:	bne	1bfd8 <main@@Base+0x6248>
   1c070:	b	1c09c <main@@Base+0x630c>
   1c074:	mov	r7, r4
   1c078:	b	1c09c <main@@Base+0x630c>
   1c07c:	mov	r7, r6
   1c080:	b	1c09c <main@@Base+0x630c>
   1c084:	mov	r0, r5
   1c088:	mov	r1, r7
   1c08c:	mov	r2, r6
   1c090:	mov	r3, #23
   1c094:	bl	25fa0 <flatcc_json_parser_set_error@@Base>
   1c098:	mov	r7, r0
   1c09c:	mov	r0, r7
   1c0a0:	sub	sp, fp, #28
   1c0a4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1c0a8:	push	{r4, r6, r7, sl, fp, lr}
   1c0ac:	add	fp, sp, #16
   1c0b0:	mov	r1, r3
   1c0b4:	mov	r6, r2
   1c0b8:	mov	r4, r0
   1c0bc:	mov	r0, r2
   1c0c0:	bl	1fecc <main@@Base+0xa13c>
   1c0c4:	mov	r7, r1
   1c0c8:	strd	r6, [r4]
   1c0cc:	pop	{r4, r6, r7, sl, fp, pc}
   1c0d0:	push	{r4, r5, r6, r7, fp, lr}
   1c0d4:	add	fp, sp, #16
   1c0d8:	sub	sp, sp, #24
   1c0dc:	mov	r7, r1
   1c0e0:	mov	r6, r0
   1c0e4:	mov	r0, #0
   1c0e8:	str	r0, [sp, #20]
   1c0ec:	str	r0, [sp, #16]
   1c0f0:	str	r0, [sp, #12]
   1c0f4:	str	r0, [r3]
   1c0f8:	cmp	r1, r2
   1c0fc:	beq	1c154 <main@@Base+0x63c4>
   1c100:	mov	r5, r3
   1c104:	mov	r4, r2
   1c108:	add	r0, sp, #16
   1c10c:	str	r0, [sp]
   1c110:	add	r3, sp, #12
   1c114:	mov	r0, r6
   1c118:	mov	r1, r7
   1c11c:	bl	27380 <flatcc_json_parser_integer@@Base>
   1c120:	mov	r1, r0
   1c124:	cmp	r0, r7
   1c128:	beq	1c150 <main@@Base+0x63c0>
   1c12c:	ldr	r3, [sp, #12]
   1c130:	ldr	r0, [sp, #16]
   1c134:	ldr	r2, [sp, #20]
   1c138:	stm	sp, {r0, r2, r5}
   1c13c:	mov	r0, r6
   1c140:	mov	r2, r4
   1c144:	bl	1fed0 <main@@Base+0xa140>
   1c148:	mov	r7, r0
   1c14c:	b	1c154 <main@@Base+0x63c4>
   1c150:	mov	r7, r1
   1c154:	mov	r0, r7
   1c158:	sub	sp, fp, #16
   1c15c:	pop	{r4, r5, r6, r7, fp, pc}
   1c160:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1c164:	add	fp, sp, #28
   1c168:	sub	sp, sp, #36	; 0x24
   1c16c:	mov	r8, r3
   1c170:	mov	r6, r2
   1c174:	mov	r5, r0
   1c178:	mov	r0, #0
   1c17c:	str	r0, [sp, #32]
   1c180:	ldr	sl, [fp, #8]
   1c184:	str	r0, [sl]
   1c188:	mov	r0, r5
   1c18c:	bl	1d078 <main@@Base+0x72e8>
   1c190:	mov	r4, r0
   1c194:	cmp	r0, r6
   1c198:	beq	1c248 <main@@Base+0x64b8>
   1c19c:	mov	r9, r8
   1c1a0:	b	1c1b4 <main@@Base+0x6424>
   1c1a4:	ldr	r0, [r9, #4]!
   1c1a8:	cmp	r0, #0
   1c1ac:	mov	r4, r7
   1c1b0:	beq	1c258 <main@@Base+0x64c8>
   1c1b4:	ldr	r7, [r9]
   1c1b8:	add	r0, sp, #24
   1c1bc:	str	r0, [sp]
   1c1c0:	add	r0, sp, #16
   1c1c4:	str	r0, [sp, #4]
   1c1c8:	mov	r0, r5
   1c1cc:	mov	r1, r4
   1c1d0:	mov	r2, r6
   1c1d4:	add	r3, sp, #20
   1c1d8:	blx	r7
   1c1dc:	mov	r7, r0
   1c1e0:	cmp	r0, r6
   1c1e4:	beq	1c270 <main@@Base+0x64e0>
   1c1e8:	cmp	r7, r4
   1c1ec:	beq	1c1a4 <main@@Base+0x6414>
   1c1f0:	ldr	r3, [sp, #20]
   1c1f4:	ldr	r0, [sp, #24]
   1c1f8:	ldr	r1, [sp, #28]
   1c1fc:	stm	sp, {r0, r1}
   1c200:	add	r0, sp, #32
   1c204:	str	r0, [sp, #8]
   1c208:	mov	r0, r5
   1c20c:	mov	r1, r7
   1c210:	mov	r2, r6
   1c214:	bl	1fed0 <main@@Base+0xa140>
   1c218:	cmp	r0, r6
   1c21c:	beq	1c250 <main@@Base+0x64c0>
   1c220:	ldr	r0, [sl]
   1c224:	ldr	r1, [sp, #32]
   1c228:	add	r0, r0, r1
   1c22c:	str	r0, [sl]
   1c230:	ldr	r0, [sp, #16]
   1c234:	cmp	r0, #0
   1c238:	mov	r4, r7
   1c23c:	mov	r9, r8
   1c240:	bne	1c1b4 <main@@Base+0x6424>
   1c244:	b	1c270 <main@@Base+0x64e0>
   1c248:	mov	r7, r4
   1c24c:	b	1c270 <main@@Base+0x64e0>
   1c250:	mov	r7, r6
   1c254:	b	1c270 <main@@Base+0x64e0>
   1c258:	mov	r0, r5
   1c25c:	mov	r1, r7
   1c260:	mov	r2, r6
   1c264:	mov	r3, #23
   1c268:	bl	25fa0 <flatcc_json_parser_set_error@@Base>
   1c26c:	mov	r7, r0
   1c270:	mov	r0, r7
   1c274:	sub	sp, fp, #28
   1c278:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1c27c:	push	{r4, r5, fp, lr}
   1c280:	add	fp, sp, #8
   1c284:	mov	r4, r1
   1c288:	mov	r5, r0
   1c28c:	mov	r0, r1
   1c290:	bl	1ff08 <main@@Base+0xa178>
   1c294:	str	r4, [r5]
   1c298:	pop	{r4, r5, fp, pc}
   1c29c:	push	{r4, r5, r6, r7, fp, lr}
   1c2a0:	add	fp, sp, #16
   1c2a4:	sub	sp, sp, #24
   1c2a8:	mov	r7, r1
   1c2ac:	mov	r6, r0
   1c2b0:	mov	r0, #0
   1c2b4:	str	r0, [sp, #20]
   1c2b8:	str	r0, [sp, #16]
   1c2bc:	str	r0, [sp, #12]
   1c2c0:	str	r0, [r3]
   1c2c4:	str	r0, [r3, #4]
   1c2c8:	cmp	r1, r2
   1c2cc:	beq	1c324 <main@@Base+0x6594>
   1c2d0:	mov	r5, r3
   1c2d4:	mov	r4, r2
   1c2d8:	add	r0, sp, #16
   1c2dc:	str	r0, [sp]
   1c2e0:	add	r3, sp, #12
   1c2e4:	mov	r0, r6
   1c2e8:	mov	r1, r7
   1c2ec:	bl	27380 <flatcc_json_parser_integer@@Base>
   1c2f0:	mov	r1, r0
   1c2f4:	cmp	r0, r7
   1c2f8:	beq	1c320 <main@@Base+0x6590>
   1c2fc:	ldr	r3, [sp, #12]
   1c300:	ldr	r0, [sp, #16]
   1c304:	ldr	r2, [sp, #20]
   1c308:	stm	sp, {r0, r2, r5}
   1c30c:	mov	r0, r6
   1c310:	mov	r2, r4
   1c314:	bl	1ff0c <main@@Base+0xa17c>
   1c318:	mov	r7, r0
   1c31c:	b	1c324 <main@@Base+0x6594>
   1c320:	mov	r7, r1
   1c324:	mov	r0, r7
   1c328:	sub	sp, fp, #16
   1c32c:	pop	{r4, r5, r6, r7, fp, pc}
   1c330:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1c334:	add	fp, sp, #28
   1c338:	sub	sp, sp, #44	; 0x2c
   1c33c:	mov	r8, r3
   1c340:	mov	r6, r2
   1c344:	mov	r5, r0
   1c348:	mov	r0, #0
   1c34c:	str	r0, [sp, #36]	; 0x24
   1c350:	str	r0, [sp, #32]
   1c354:	ldr	sl, [fp, #8]
   1c358:	str	r0, [sl]
   1c35c:	str	r0, [sl, #4]
   1c360:	mov	r0, r5
   1c364:	bl	1d078 <main@@Base+0x72e8>
   1c368:	mov	r4, r0
   1c36c:	cmp	r0, r6
   1c370:	beq	1c428 <main@@Base+0x6698>
   1c374:	mov	r9, r8
   1c378:	b	1c38c <main@@Base+0x65fc>
   1c37c:	ldr	r0, [r9, #4]!
   1c380:	cmp	r0, #0
   1c384:	mov	r4, r7
   1c388:	beq	1c438 <main@@Base+0x66a8>
   1c38c:	ldr	r7, [r9]
   1c390:	add	r0, sp, #24
   1c394:	str	r0, [sp]
   1c398:	add	r0, sp, #16
   1c39c:	str	r0, [sp, #4]
   1c3a0:	mov	r0, r5
   1c3a4:	mov	r1, r4
   1c3a8:	mov	r2, r6
   1c3ac:	add	r3, sp, #20
   1c3b0:	blx	r7
   1c3b4:	mov	r7, r0
   1c3b8:	cmp	r0, r6
   1c3bc:	beq	1c450 <main@@Base+0x66c0>
   1c3c0:	cmp	r7, r4
   1c3c4:	beq	1c37c <main@@Base+0x65ec>
   1c3c8:	ldr	r3, [sp, #20]
   1c3cc:	ldr	r0, [sp, #24]
   1c3d0:	ldr	r1, [sp, #28]
   1c3d4:	stm	sp, {r0, r1}
   1c3d8:	add	r0, sp, #32
   1c3dc:	str	r0, [sp, #8]
   1c3e0:	mov	r0, r5
   1c3e4:	mov	r1, r7
   1c3e8:	mov	r2, r6
   1c3ec:	bl	1ff0c <main@@Base+0xa17c>
   1c3f0:	cmp	r0, r6
   1c3f4:	beq	1c430 <main@@Base+0x66a0>
   1c3f8:	ldrd	r0, [sl]
   1c3fc:	ldr	r2, [sp, #32]
   1c400:	ldr	r3, [sp, #36]	; 0x24
   1c404:	adds	r0, r0, r2
   1c408:	adc	r1, r1, r3
   1c40c:	strd	r0, [sl]
   1c410:	ldr	r0, [sp, #16]
   1c414:	cmp	r0, #0
   1c418:	mov	r4, r7
   1c41c:	mov	r9, r8
   1c420:	bne	1c38c <main@@Base+0x65fc>
   1c424:	b	1c450 <main@@Base+0x66c0>
   1c428:	mov	r7, r4
   1c42c:	b	1c450 <main@@Base+0x66c0>
   1c430:	mov	r7, r6
   1c434:	b	1c450 <main@@Base+0x66c0>
   1c438:	mov	r0, r5
   1c43c:	mov	r1, r7
   1c440:	mov	r2, r6
   1c444:	mov	r3, #23
   1c448:	bl	25fa0 <flatcc_json_parser_set_error@@Base>
   1c44c:	mov	r7, r0
   1c450:	mov	r0, r7
   1c454:	sub	sp, fp, #28
   1c458:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1c45c:	push	{r4, r6, r7, sl, fp, lr}
   1c460:	add	fp, sp, #16
   1c464:	mov	r1, r3
   1c468:	mov	r6, r2
   1c46c:	mov	r4, r0
   1c470:	mov	r0, r2
   1c474:	bl	1ff30 <main@@Base+0xa1a0>
   1c478:	mov	r7, r1
   1c47c:	strd	r6, [r4]
   1c480:	pop	{r4, r6, r7, sl, fp, pc}
   1c484:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1c488:	add	fp, sp, #28
   1c48c:	sub	sp, sp, #36	; 0x24
   1c490:	mov	r8, r3
   1c494:	mov	r7, r2
   1c498:	mov	r5, r0
   1c49c:	mov	r0, #0
   1c4a0:	str	r0, [sp, #28]
   1c4a4:	str	r0, [sp, #24]
   1c4a8:	ldr	sl, [fp, #8]
   1c4ac:	str	r0, [sl]
   1c4b0:	str	r0, [sl, #4]
   1c4b4:	mov	r0, r5
   1c4b8:	bl	1d078 <main@@Base+0x72e8>
   1c4bc:	mov	r6, r0
   1c4c0:	cmp	r0, r7
   1c4c4:	beq	1c564 <main@@Base+0x67d4>
   1c4c8:	mov	r9, r8
   1c4cc:	b	1c4e0 <main@@Base+0x6750>
   1c4d0:	ldr	r0, [r9, #4]!
   1c4d4:	cmp	r0, #0
   1c4d8:	mov	r6, r4
   1c4dc:	beq	1c574 <main@@Base+0x67e4>
   1c4e0:	ldr	r4, [r9]
   1c4e4:	add	r0, sp, #16
   1c4e8:	str	r0, [sp]
   1c4ec:	add	r0, sp, #8
   1c4f0:	str	r0, [sp, #4]
   1c4f4:	mov	r0, r5
   1c4f8:	mov	r1, r6
   1c4fc:	mov	r2, r7
   1c500:	add	r3, sp, #12
   1c504:	blx	r4
   1c508:	mov	r4, r0
   1c50c:	cmp	r0, r7
   1c510:	beq	1c58c <main@@Base+0x67fc>
   1c514:	cmp	r4, r6
   1c518:	beq	1c4d0 <main@@Base+0x6740>
   1c51c:	add	r3, sp, #12
   1c520:	ldm	r3, {r1, r2, r3}
   1c524:	add	r0, sp, #24
   1c528:	str	r0, [sp]
   1c52c:	mov	r0, r4
   1c530:	bl	1ff34 <main@@Base+0xa1a4>
   1c534:	cmp	r4, r7
   1c538:	beq	1c56c <main@@Base+0x67dc>
   1c53c:	vldr	d16, [sp, #24]
   1c540:	vldr	d17, [sl]
   1c544:	vadd.f64	d16, d16, d17
   1c548:	vstr	d16, [sl]
   1c54c:	ldr	r0, [sp, #8]
   1c550:	cmp	r0, #0
   1c554:	mov	r6, r4
   1c558:	mov	r9, r8
   1c55c:	bne	1c4e0 <main@@Base+0x6750>
   1c560:	b	1c58c <main@@Base+0x67fc>
   1c564:	mov	r4, r6
   1c568:	b	1c58c <main@@Base+0x67fc>
   1c56c:	mov	r4, r7
   1c570:	b	1c58c <main@@Base+0x67fc>
   1c574:	mov	r0, r5
   1c578:	mov	r1, r4
   1c57c:	mov	r2, r7
   1c580:	mov	r3, #23
   1c584:	bl	25fa0 <flatcc_json_parser_set_error@@Base>
   1c588:	mov	r4, r0
   1c58c:	mov	r0, r4
   1c590:	sub	sp, fp, #28
   1c594:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1c598:	push	{r4, sl, fp, lr}
   1c59c:	add	fp, sp, #8
   1c5a0:	mov	r4, r0
   1c5a4:	bl	1ff74 <main@@Base+0xa1e4>
   1c5a8:	vstr	d0, [r4]
   1c5ac:	pop	{r4, sl, fp, pc}
   1c5b0:	push	{r4, r5, r6, sl, fp, lr}
   1c5b4:	add	fp, sp, #16
   1c5b8:	mov	r6, r3
   1c5bc:	mov	r4, r2
   1c5c0:	mov	r5, r0
   1c5c4:	bl	1c670 <main@@Base+0x68e0>
   1c5c8:	mov	r1, r0
   1c5cc:	cmp	r0, r4
   1c5d0:	beq	1c614 <main@@Base+0x6884>
   1c5d4:	ldrb	r0, [r1]
   1c5d8:	cmp	r0, #44	; 0x2c
   1c5dc:	bne	1c61c <main@@Base+0x688c>
   1c5e0:	add	r1, r1, #1
   1c5e4:	mov	r0, r5
   1c5e8:	mov	r2, r4
   1c5ec:	bl	1c670 <main@@Base+0x68e0>
   1c5f0:	mov	r1, r0
   1c5f4:	cmp	r0, r4
   1c5f8:	beq	1c644 <main@@Base+0x68b4>
   1c5fc:	ldrb	r0, [r1]
   1c600:	cmp	r0, #125	; 0x7d
   1c604:	bne	1c660 <main@@Base+0x68d0>
   1c608:	mov	r0, #0
   1c60c:	str	r0, [r6]
   1c610:	b	1c630 <main@@Base+0x68a0>
   1c614:	mov	r0, #0
   1c618:	b	1c664 <main@@Base+0x68d4>
   1c61c:	mov	r0, #0
   1c620:	str	r0, [r6]
   1c624:	ldrb	r0, [r1]
   1c628:	cmp	r0, #125	; 0x7d
   1c62c:	bne	1c64c <main@@Base+0x68bc>
   1c630:	add	r1, r1, #1
   1c634:	mov	r0, r5
   1c638:	mov	r2, r4
   1c63c:	pop	{r4, r5, r6, sl, fp, lr}
   1c640:	b	1c670 <main@@Base+0x68e0>
   1c644:	mov	r0, #0
   1c648:	str	r0, [r6]
   1c64c:	mov	r0, r5
   1c650:	mov	r2, r4
   1c654:	mov	r3, #10
   1c658:	pop	{r4, r5, r6, sl, fp, lr}
   1c65c:	b	25fa0 <flatcc_json_parser_set_error@@Base>
   1c660:	mov	r0, #1
   1c664:	str	r0, [r6]
   1c668:	mov	r0, r1
   1c66c:	pop	{r4, r5, r6, sl, fp, pc}
   1c670:	sub	r3, r2, r1
   1c674:	cmp	r3, #2
   1c678:	blt	1c6a4 <main@@Base+0x6914>
   1c67c:	ldrb	r3, [r1]
   1c680:	cmp	r3, #32
   1c684:	movhi	r0, r1
   1c688:	bxhi	lr
   1c68c:	bne	1c6a4 <main@@Base+0x6914>
   1c690:	mov	ip, r1
   1c694:	ldrb	r3, [ip, #1]!
   1c698:	cmp	r3, #32
   1c69c:	movhi	r0, ip
   1c6a0:	bxhi	lr
   1c6a4:	b	26028 <flatcc_json_parser_space_ext@@Base>
   1c6a8:	mov	ip, r0
   1c6ac:	sub	r0, r1, r0
   1c6b0:	cmp	r0, #8
   1c6b4:	movcs	r0, #8
   1c6b8:	sub	r3, r0, #1
   1c6bc:	mov	r1, #0
   1c6c0:	mov	r0, #0
   1c6c4:	cmp	r3, #7
   1c6c8:	bxhi	lr
   1c6cc:	add	r2, pc, #0
   1c6d0:	ldr	pc, [r2, r3, lsl #2]
   1c6d4:	andeq	ip, r1, r8, lsr #14
   1c6d8:	andeq	ip, r1, r0, lsr #14
   1c6dc:	andeq	ip, r1, r8, lsl r7
   1c6e0:	andeq	ip, r1, r0, lsl r7
   1c6e4:	andeq	ip, r1, r8, lsl #14
   1c6e8:	andeq	ip, r1, r0, lsl #14
   1c6ec:	strdeq	ip, [r1], -r8
   1c6f0:	strdeq	ip, [r1], -r4
   1c6f4:	ldrb	r0, [ip, #7]
   1c6f8:	ldrb	r2, [ip, #6]
   1c6fc:	orr	r0, r0, r2, lsl #8
   1c700:	ldrb	r2, [ip, #5]
   1c704:	orr	r0, r0, r2, lsl #16
   1c708:	ldrb	r2, [ip, #4]
   1c70c:	orr	r0, r0, r2, lsl #24
   1c710:	ldrb	r2, [ip, #3]
   1c714:	orr	r1, r2, r1
   1c718:	ldrb	r2, [ip, #2]
   1c71c:	orr	r1, r1, r2, lsl #8
   1c720:	ldrb	r2, [ip, #1]
   1c724:	orr	r1, r1, r2, lsl #16
   1c728:	ldrb	r2, [ip]
   1c72c:	orr	r1, r1, r2, lsl #24
   1c730:	bx	lr
   1c734:	sub	r1, r1, r0
   1c738:	cmp	r1, r2
   1c73c:	bxle	lr
   1c740:	mov	r1, r0
   1c744:	ldrb	r2, [r1, r2]!
   1c748:	cmp	r2, #46	; 0x2e
   1c74c:	addeq	r0, r1, #1
   1c750:	bx	lr
   1c754:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   1c758:	add	fp, sp, #24
   1c75c:	sub	sp, sp, #8
   1c760:	mov	r8, r3
   1c764:	mov	r6, r2
   1c768:	mov	r5, r1
   1c76c:	mov	r7, r0
   1c770:	mov	r0, r1
   1c774:	mov	r1, r2
   1c778:	bl	196a0 <main@@Base+0x3910>
   1c77c:	movw	r2, #20577	; 0x5061
   1c780:	movt	r2, #18798	; 0x496e
   1c784:	eor	r2, r1, r2
   1c788:	movw	r3, #28276	; 0x6e74
   1c78c:	movt	r3, #29285	; 0x7265
   1c790:	eor	r0, r0, r3
   1c794:	orrs	r0, r0, r2
   1c798:	ldr	r9, [fp, #12]
   1c79c:	bne	1c810 <main@@Base+0x6a80>
   1c7a0:	add	r0, r5, #8
   1c7a4:	mov	r1, r6
   1c7a8:	bl	196a0 <main@@Base+0x3910>
   1c7ac:	movw	r2, #28005	; 0x6d65
   1c7b0:	movt	r2, #20065	; 0x4e61
   1c7b4:	eor	r1, r1, r2
   1c7b8:	movw	r2, #24931	; 0x6163
   1c7bc:	movt	r2, #29552	; 0x7370
   1c7c0:	eor	r0, r0, r2
   1c7c4:	orrs	r0, r0, r1
   1c7c8:	bne	1c860 <main@@Base+0x6ad0>
   1c7cc:	add	r4, r5, #16
   1c7d0:	mov	r0, r4
   1c7d4:	mov	r1, r6
   1c7d8:	bl	196a0 <main@@Base+0x3910>
   1c7dc:	and	r0, r1, #-16777216	; 0xff000000
   1c7e0:	teq	r0, #1694498816	; 0x65000000
   1c7e4:	bne	1c860 <main@@Base+0x6ad0>
   1c7e8:	str	r9, [sp]
   1c7ec:	mov	r9, #1
   1c7f0:	mov	r0, r7
   1c7f4:	mov	r1, r4
   1c7f8:	mov	r2, r6
   1c7fc:	mov	r3, #1
   1c800:	bl	265ec <flatcc_json_parser_match_constant@@Base>
   1c804:	cmp	r0, r4
   1c808:	bne	1c844 <main@@Base+0x6ab4>
   1c80c:	b	1c860 <main@@Base+0x6ad0>
   1c810:	movw	r0, #20037	; 0x4e45
   1c814:	movt	r0, #20047	; 0x4e4f
   1c818:	teq	r1, r0
   1c81c:	bne	1c860 <main@@Base+0x6ad0>
   1c820:	str	r9, [sp]
   1c824:	mov	r0, r7
   1c828:	mov	r1, r5
   1c82c:	mov	r2, r6
   1c830:	mov	r3, #4
   1c834:	bl	265ec <flatcc_json_parser_match_constant@@Base>
   1c838:	cmp	r0, r5
   1c83c:	beq	1c860 <main@@Base+0x6ad0>
   1c840:	mov	r9, #0
   1c844:	mov	r1, #0
   1c848:	mov	r5, r0
   1c84c:	ldr	r0, [fp, #8]
   1c850:	str	r9, [r0]
   1c854:	str	r1, [r0, #4]
   1c858:	mov	r0, #0
   1c85c:	str	r0, [r8]
   1c860:	mov	r0, r5
   1c864:	sub	sp, fp, #24
   1c868:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   1c86c:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   1c870:	add	fp, sp, #24
   1c874:	sub	sp, sp, #8
   1c878:	mov	r9, r3
   1c87c:	mov	r6, r2
   1c880:	mov	r5, r1
   1c884:	mov	r7, r0
   1c888:	mov	r0, r1
   1c88c:	mov	r1, r2
   1c890:	bl	196a0 <main@@Base+0x3910>
   1c894:	ldr	r2, [fp, #12]
   1c898:	ldr	r8, [fp, #8]
   1c89c:	movw	r3, #30769	; 0x7831
   1c8a0:	movt	r3, #26725	; 0x6865
   1c8a4:	cmp	r1, r3
   1c8a8:	bhi	1c8e0 <main@@Base+0x6b50>
   1c8ac:	teq	r1, r3
   1c8b0:	bne	1c988 <main@@Base+0x6bf8>
   1c8b4:	str	r2, [sp]
   1c8b8:	mov	r0, r7
   1c8bc:	mov	r1, r5
   1c8c0:	mov	r2, r6
   1c8c4:	mov	r3, #4
   1c8c8:	bl	265ec <flatcc_json_parser_match_constant@@Base>
   1c8cc:	cmp	r0, r5
   1c8d0:	beq	1c988 <main@@Base+0x6bf8>
   1c8d4:	mov	r1, #0
   1c8d8:	mov	r2, #3
   1c8dc:	b	1c978 <main@@Base+0x6be8>
   1c8e0:	movw	r3, #26725	; 0x6865
   1c8e4:	eor	r3, r3, r1, lsr #16
   1c8e8:	lsr	r0, r0, #16
   1c8ec:	orr	r0, r0, r1, lsl #16
   1c8f0:	movw	r4, #25959	; 0x6567
   1c8f4:	movt	r4, #30830	; 0x786e
   1c8f8:	eor	r0, r0, r4
   1c8fc:	orrs	r0, r0, r3
   1c900:	bne	1c93c <main@@Base+0x6bac>
   1c904:	str	r2, [sp]
   1c908:	mov	r0, r7
   1c90c:	mov	r1, r5
   1c910:	mov	r2, r6
   1c914:	mov	r3, #6
   1c918:	bl	265ec <flatcc_json_parser_match_constant@@Base>
   1c91c:	cmp	r0, r5
   1c920:	beq	1c988 <main@@Base+0x6bf8>
   1c924:	mvn	r1, #0
   1c928:	mvn	r2, #1
   1c92c:	str	r2, [r8]
   1c930:	str	r1, [r8, #4]
   1c934:	mov	r1, #1
   1c938:	b	1c980 <main@@Base+0x6bf0>
   1c93c:	movw	r0, #30770	; 0x7832
   1c940:	movt	r0, #26725	; 0x6865
   1c944:	teq	r1, r0
   1c948:	bne	1c988 <main@@Base+0x6bf8>
   1c94c:	str	r2, [sp]
   1c950:	mov	r0, r7
   1c954:	mov	r1, r5
   1c958:	mov	r2, r6
   1c95c:	mov	r3, #4
   1c960:	bl	265ec <flatcc_json_parser_match_constant@@Base>
   1c964:	cmp	r0, r5
   1c968:	beq	1c988 <main@@Base+0x6bf8>
   1c96c:	mov	r1, #0
   1c970:	movw	r2, #48815	; 0xbeaf
   1c974:	movt	r2, #32431	; 0x7eaf
   1c978:	str	r2, [r8]
   1c97c:	str	r1, [r8, #4]
   1c980:	str	r1, [r9]
   1c984:	mov	r5, r0
   1c988:	mov	r0, r5
   1c98c:	sub	sp, fp, #24
   1c990:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   1c994:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   1c998:	add	fp, sp, #24
   1c99c:	sub	sp, sp, #8
   1c9a0:	mov	r9, r3
   1c9a4:	mov	r6, r2
   1c9a8:	mov	r5, r1
   1c9ac:	mov	r7, r0
   1c9b0:	mov	r0, r1
   1c9b4:	mov	r1, r2
   1c9b8:	bl	196a0 <main@@Base+0x3910>
   1c9bc:	ldr	ip, [fp, #12]
   1c9c0:	ldr	r8, [fp, #8]
   1c9c4:	movw	r3, #29745	; 0x7431
   1c9c8:	movt	r3, #26990	; 0x696e
   1c9cc:	cmp	r1, r3
   1c9d0:	bhi	1ca08 <main@@Base+0x6c78>
   1c9d4:	teq	r1, r3
   1c9d8:	bne	1cafc <main@@Base+0x6d6c>
   1c9dc:	str	ip, [sp]
   1c9e0:	mov	r0, r7
   1c9e4:	mov	r1, r5
   1c9e8:	mov	r2, r6
   1c9ec:	mov	r3, #4
   1c9f0:	bl	265ec <flatcc_json_parser_match_constant@@Base>
   1c9f4:	cmp	r0, r5
   1c9f8:	beq	1cafc <main@@Base+0x6d6c>
   1c9fc:	mov	r1, #0
   1ca00:	mov	r2, #2
   1ca04:	b	1ca5c <main@@Base+0x6ccc>
   1ca08:	movw	r4, #29806	; 0x746e
   1ca0c:	movt	r4, #26990	; 0x696e
   1ca10:	movw	r3, #0
   1ca14:	movt	r3, #25959	; 0x6567
   1ca18:	subs	r2, r0, r3
   1ca1c:	sbcs	r2, r1, r4
   1ca20:	bcs	1ca68 <main@@Base+0x6cd8>
   1ca24:	movw	r0, #29746	; 0x7432
   1ca28:	movt	r0, #26990	; 0x696e
   1ca2c:	teq	r1, r0
   1ca30:	bne	1cafc <main@@Base+0x6d6c>
   1ca34:	str	ip, [sp]
   1ca38:	mov	r0, r7
   1ca3c:	mov	r1, r5
   1ca40:	mov	r2, r6
   1ca44:	mov	r3, #4
   1ca48:	bl	265ec <flatcc_json_parser_match_constant@@Base>
   1ca4c:	cmp	r0, r5
   1ca50:	beq	1cafc <main@@Base+0x6d6c>
   1ca54:	mov	r1, #0
   1ca58:	mov	r2, #42	; 0x2a
   1ca5c:	str	r2, [r8]
   1ca60:	str	r1, [r8, #4]
   1ca64:	b	1caf4 <main@@Base+0x6d64>
   1ca68:	eor	r1, r1, r4
   1ca6c:	add	r2, r3, #12800	; 0x3200
   1ca70:	bic	r4, r0, #255	; 0xff
   1ca74:	eor	r2, r4, r2
   1ca78:	orrs	r2, r2, r1
   1ca7c:	bne	1cab0 <main@@Base+0x6d20>
   1ca80:	str	ip, [sp]
   1ca84:	mov	r0, r7
   1ca88:	mov	r1, r5
   1ca8c:	mov	r2, r6
   1ca90:	mov	r3, #7
   1ca94:	bl	265ec <flatcc_json_parser_match_constant@@Base>
   1ca98:	cmp	r0, r5
   1ca9c:	beq	1cafc <main@@Base+0x6d6c>
   1caa0:	mvn	r1, #0
   1caa4:	mvn	r2, #1
   1caa8:	orr	r2, r2, #1
   1caac:	b	1cae8 <main@@Base+0x6d58>
   1cab0:	bfc	r0, #0, #16
   1cab4:	eor	r0, r0, r3
   1cab8:	orrs	r0, r0, r1
   1cabc:	bne	1cafc <main@@Base+0x6d6c>
   1cac0:	str	ip, [sp]
   1cac4:	mov	r0, r7
   1cac8:	mov	r1, r5
   1cacc:	mov	r2, r6
   1cad0:	mov	r3, #6
   1cad4:	bl	265ec <flatcc_json_parser_match_constant@@Base>
   1cad8:	cmp	r0, r5
   1cadc:	beq	1cafc <main@@Base+0x6d6c>
   1cae0:	mvn	r1, #0
   1cae4:	mvn	r2, #1
   1cae8:	str	r2, [r8]
   1caec:	str	r1, [r8, #4]
   1caf0:	mov	r1, #1
   1caf4:	str	r1, [r9]
   1caf8:	mov	r5, r0
   1cafc:	mov	r0, r5
   1cb00:	sub	sp, fp, #24
   1cb04:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   1cb08:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   1cb0c:	add	fp, sp, #24
   1cb10:	sub	sp, sp, #8
   1cb14:	mov	r4, r3
   1cb18:	mov	r6, r2
   1cb1c:	mov	r5, r1
   1cb20:	mov	r7, r0
   1cb24:	mov	r0, r1
   1cb28:	mov	r1, r2
   1cb2c:	bl	196a0 <main@@Base+0x3910>
   1cb30:	ldr	r0, [fp, #12]
   1cb34:	ldr	r8, [fp, #8]
   1cb38:	movw	r2, #26417	; 0x6731
   1cb3c:	movt	r2, #28261	; 0x6e65
   1cb40:	cmp	r1, r2
   1cb44:	bhi	1cb7c <main@@Base+0x6dec>
   1cb48:	teq	r1, r2
   1cb4c:	bne	1cc0c <main@@Base+0x6e7c>
   1cb50:	str	r0, [sp]
   1cb54:	mov	r0, r7
   1cb58:	mov	r1, r5
   1cb5c:	mov	r2, r6
   1cb60:	mov	r3, #4
   1cb64:	bl	265ec <flatcc_json_parser_match_constant@@Base>
   1cb68:	cmp	r0, r5
   1cb6c:	beq	1cc0c <main@@Base+0x6e7c>
   1cb70:	mvn	r1, #0
   1cb74:	mvn	r2, #11
   1cb78:	b	1cbf8 <main@@Base+0x6e68>
   1cb7c:	movw	r2, #26418	; 0x6732
   1cb80:	movt	r2, #28261	; 0x6e65
   1cb84:	teq	r1, r2
   1cb88:	beq	1cbcc <main@@Base+0x6e3c>
   1cb8c:	movw	r2, #26419	; 0x6733
   1cb90:	movt	r2, #28261	; 0x6e65
   1cb94:	teq	r1, r2
   1cb98:	bne	1cc0c <main@@Base+0x6e7c>
   1cb9c:	str	r0, [sp]
   1cba0:	mov	r0, r7
   1cba4:	mov	r1, r5
   1cba8:	mov	r2, r6
   1cbac:	mov	r3, #4
   1cbb0:	bl	265ec <flatcc_json_parser_match_constant@@Base>
   1cbb4:	cmp	r0, r5
   1cbb8:	beq	1cc0c <main@@Base+0x6e7c>
   1cbbc:	mvn	r1, #0
   1cbc0:	mvn	r2, #11
   1cbc4:	orr	r2, r2, #2
   1cbc8:	b	1cbf8 <main@@Base+0x6e68>
   1cbcc:	str	r0, [sp]
   1cbd0:	mov	r0, r7
   1cbd4:	mov	r1, r5
   1cbd8:	mov	r2, r6
   1cbdc:	mov	r3, #4
   1cbe0:	bl	265ec <flatcc_json_parser_match_constant@@Base>
   1cbe4:	cmp	r0, r5
   1cbe8:	beq	1cc0c <main@@Base+0x6e7c>
   1cbec:	mvn	r1, #0
   1cbf0:	mvn	r2, #11
   1cbf4:	orr	r2, r2, #1
   1cbf8:	str	r2, [r8]
   1cbfc:	str	r1, [r8, #4]
   1cc00:	mov	r1, #1
   1cc04:	str	r1, [r4]
   1cc08:	mov	r5, r0
   1cc0c:	mov	r0, r5
   1cc10:	sub	sp, fp, #24
   1cc14:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   1cc18:	push	{r4, r5, r6, r7, fp, lr}
   1cc1c:	add	fp, sp, #16
   1cc20:	sub	sp, sp, #8
   1cc24:	mov	r4, r3
   1cc28:	mov	r6, r2
   1cc2c:	mov	r5, r1
   1cc30:	mov	r7, r0
   1cc34:	mov	r0, r1
   1cc38:	mov	r1, r2
   1cc3c:	bl	196a0 <main@@Base+0x3910>
   1cc40:	and	r0, r1, #-16777216	; 0xff000000
   1cc44:	teq	r0, #2013265920	; 0x78000000
   1cc48:	bne	1cc88 <main@@Base+0x6ef8>
   1cc4c:	ldr	r0, [fp, #12]
   1cc50:	str	r0, [sp]
   1cc54:	mov	r0, r7
   1cc58:	mov	r1, r5
   1cc5c:	mov	r2, r6
   1cc60:	mov	r3, #1
   1cc64:	bl	265ec <flatcc_json_parser_match_constant@@Base>
   1cc68:	cmp	r0, r5
   1cc6c:	beq	1cc88 <main@@Base+0x6ef8>
   1cc70:	ldr	r1, [fp, #8]
   1cc74:	mov	r2, #0
   1cc78:	str	r2, [r1]
   1cc7c:	str	r2, [r1, #4]
   1cc80:	str	r2, [r4]
   1cc84:	mov	r5, r0
   1cc88:	mov	r0, r5
   1cc8c:	sub	sp, fp, #16
   1cc90:	pop	{r4, r5, r6, r7, fp, pc}
   1cc94:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1cc98:	add	fp, sp, #28
   1cc9c:	sub	sp, sp, #4
   1cca0:	mov	r9, r3
   1cca4:	mov	r6, r2
   1cca8:	mov	r5, r1
   1ccac:	mov	sl, r0
   1ccb0:	mov	r0, r1
   1ccb4:	mov	r1, r2
   1ccb8:	bl	196a0 <main@@Base+0x3910>
   1ccbc:	ldr	lr, [fp, #12]
   1ccc0:	ldr	r8, [fp, #8]
   1ccc4:	movw	r2, #20036	; 0x4e44
   1ccc8:	movt	r2, #20047	; 0x4e4f
   1cccc:	cmp	r1, r2
   1ccd0:	bhi	1cd38 <main@@Base+0x6fa8>
   1ccd4:	and	r2, r0, #-16777216	; 0xff000000
   1ccd8:	movw	r4, #28523	; 0x6f6b
   1ccdc:	movt	r4, #17007	; 0x426f
   1cce0:	movw	r3, #28160	; 0x6e00
   1cce4:	movt	r3, #18017	; 0x4661
   1cce8:	subs	r7, r0, r3
   1ccec:	sbcs	r7, r1, r4
   1ccf0:	bcs	1cd8c <main@@Base+0x6ffc>
   1ccf4:	movw	r0, #27756	; 0x6c6c
   1ccf8:	movt	r0, #16997	; 0x4265
   1ccfc:	eor	r0, r1, r0
   1cd00:	eor	r1, r2, #1694498816	; 0x65000000
   1cd04:	orrs	r0, r1, r0
   1cd08:	bne	1cec8 <main@@Base+0x7138>
   1cd0c:	str	lr, [sp]
   1cd10:	mov	r0, sl
   1cd14:	mov	r1, r5
   1cd18:	mov	r2, r6
   1cd1c:	mov	r3, #5
   1cd20:	bl	265ec <flatcc_json_parser_match_constant@@Base>
   1cd24:	cmp	r0, r5
   1cd28:	beq	1cec8 <main@@Base+0x7138>
   1cd2c:	mov	r1, #0
   1cd30:	mov	r2, #9
   1cd34:	b	1ceb8 <main@@Base+0x7128>
   1cd38:	movw	r3, #26725	; 0x6865
   1cd3c:	movt	r3, #20340	; 0x4f74
   1cd40:	mvn	r2, #-1912602624	; 0x8e000000
   1cd44:	subs	r2, r2, r0
   1cd48:	sbcs	r2, r3, r1
   1cd4c:	bcc	1cdd0 <main@@Base+0x7040>
   1cd50:	movw	r0, #20037	; 0x4e45
   1cd54:	movt	r0, #20047	; 0x4e4f
   1cd58:	teq	r1, r0
   1cd5c:	bne	1cec8 <main@@Base+0x7138>
   1cd60:	str	lr, [sp]
   1cd64:	mov	r0, sl
   1cd68:	mov	r1, r5
   1cd6c:	mov	r2, r6
   1cd70:	mov	r3, #4
   1cd74:	bl	265ec <flatcc_json_parser_match_constant@@Base>
   1cd78:	cmp	r0, r5
   1cd7c:	beq	1cec8 <main@@Base+0x7138>
   1cd80:	mov	r1, #0
   1cd84:	str	r1, [r8]
   1cd88:	b	1cebc <main@@Base+0x712c>
   1cd8c:	movw	r7, #19553	; 0x4c61
   1cd90:	movt	r7, #19829	; 0x4d75
   1cd94:	eor	r7, r1, r7
   1cd98:	eor	r2, r2, #1845493760	; 0x6e000000
   1cd9c:	orrs	r2, r2, r7
   1cda0:	bne	1ce2c <main@@Base+0x709c>
   1cda4:	str	lr, [sp]
   1cda8:	mov	r0, sl
   1cdac:	mov	r1, r5
   1cdb0:	mov	r2, r6
   1cdb4:	mov	r3, #5
   1cdb8:	bl	265ec <flatcc_json_parser_match_constant@@Base>
   1cdbc:	cmp	r0, r5
   1cdc0:	beq	1cec8 <main@@Base+0x7138>
   1cdc4:	mov	r1, #0
   1cdc8:	mov	r2, #2
   1cdcc:	b	1ceb8 <main@@Base+0x7128>
   1cdd0:	movw	ip, #28789	; 0x7075
   1cdd4:	movt	ip, #21089	; 0x5261
   1cdd8:	movw	r4, #25964	; 0x656c
   1cddc:	movt	r4, #28282	; 0x6e7a
   1cde0:	subs	r2, r0, r4
   1cde4:	sbcs	r2, r1, ip
   1cde8:	bcs	1ce6c <main@@Base+0x70dc>
   1cdec:	eor	r1, r1, r3
   1cdf0:	and	r0, r0, #-16777216	; 0xff000000
   1cdf4:	eor	r0, r0, #1912602624	; 0x72000000
   1cdf8:	orrs	r0, r0, r1
   1cdfc:	bne	1cec8 <main@@Base+0x7138>
   1ce00:	str	lr, [sp]
   1ce04:	mov	r0, sl
   1ce08:	mov	r1, r5
   1ce0c:	mov	r2, r6
   1ce10:	mov	r3, #5
   1ce14:	bl	265ec <flatcc_json_parser_match_constant@@Base>
   1ce18:	cmp	r0, r5
   1ce1c:	beq	1cec8 <main@@Base+0x7138>
   1ce20:	mov	r1, #0
   1ce24:	mov	r2, #11
   1ce28:	b	1ceb8 <main@@Base+0x7128>
   1ce2c:	eor	r1, r1, r4
   1ce30:	bic	r0, r0, #255	; 0xff
   1ce34:	eor	r0, r0, r3
   1ce38:	orrs	r0, r0, r1
   1ce3c:	bne	1cec8 <main@@Base+0x7138>
   1ce40:	str	lr, [sp]
   1ce44:	mov	r0, sl
   1ce48:	mov	r1, r5
   1ce4c:	mov	r2, r6
   1ce50:	mov	r3, #7
   1ce54:	bl	265ec <flatcc_json_parser_match_constant@@Base>
   1ce58:	cmp	r0, r5
   1ce5c:	beq	1cec8 <main@@Base+0x7138>
   1ce60:	mov	r1, #0
   1ce64:	mov	r2, #10
   1ce68:	b	1ceb8 <main@@Base+0x7128>
   1ce6c:	movw	r2, #21870	; 0x556e
   1ce70:	eor	r2, r2, r1, lsr #16
   1ce74:	lsr	r3, r0, #16
   1ce78:	orr	r3, r3, r1, lsl #16
   1ce7c:	movw	r7, #25956	; 0x6564
   1ce80:	movt	r7, #30067	; 0x7573
   1ce84:	eor	r3, r3, r7
   1ce88:	orrs	r2, r3, r2
   1ce8c:	bne	1ced4 <main@@Base+0x7144>
   1ce90:	str	lr, [sp]
   1ce94:	mov	r0, sl
   1ce98:	mov	r1, r5
   1ce9c:	mov	r2, r6
   1cea0:	mov	r3, #6
   1cea4:	bl	265ec <flatcc_json_parser_match_constant@@Base>
   1cea8:	cmp	r0, r5
   1ceac:	beq	1cec8 <main@@Base+0x7138>
   1ceb0:	mov	r1, #0
   1ceb4:	mov	r2, #255	; 0xff
   1ceb8:	str	r2, [r8]
   1cebc:	str	r1, [r8, #4]
   1cec0:	str	r1, [r9]
   1cec4:	mov	r5, r0
   1cec8:	mov	r0, r5
   1cecc:	sub	sp, fp, #28
   1ced0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1ced4:	eor	r0, r0, r4
   1ced8:	eor	r1, r1, ip
   1cedc:	orrs	r0, r0, r1
   1cee0:	bne	1cec8 <main@@Base+0x7138>
   1cee4:	str	lr, [sp]
   1cee8:	mov	r4, #8
   1ceec:	mov	r0, sl
   1cef0:	mov	r1, r5
   1cef4:	mov	r2, r6
   1cef8:	mov	r3, #8
   1cefc:	bl	265ec <flatcc_json_parser_match_constant@@Base>
   1cf00:	cmp	r0, r5
   1cf04:	beq	1cec8 <main@@Base+0x7138>
   1cf08:	mov	r5, #0
   1cf0c:	strd	r4, [r8]
   1cf10:	str	r5, [r9]
   1cf14:	b	1cec4 <main@@Base+0x7134>
   1cf18:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1cf1c:	add	fp, sp, #28
   1cf20:	sub	sp, sp, #4
   1cf24:	mov	r8, r3
   1cf28:	mov	r6, r2
   1cf2c:	mov	r5, r1
   1cf30:	mov	r9, r0
   1cf34:	mov	r0, r1
   1cf38:	mov	r1, r2
   1cf3c:	bl	196a0 <main@@Base+0x3910>
   1cf40:	mov	r7, r0
   1cf44:	mov	r4, r1
   1cf48:	bic	r0, r1, #255	; 0xff
   1cf4c:	ldr	sl, [fp, #12]
   1cf50:	movw	r1, #28416	; 0x6f00
   1cf54:	movt	r1, #18031	; 0x466f
   1cf58:	teq	r0, r1
   1cf5c:	mov	r0, r5
   1cf60:	bne	1cf90 <main@@Base+0x7200>
   1cf64:	str	sl, [sp]
   1cf68:	mov	r0, r9
   1cf6c:	mov	r1, r5
   1cf70:	mov	r2, r6
   1cf74:	mov	r3, #3
   1cf78:	bl	265ec <flatcc_json_parser_match_constant@@Base>
   1cf7c:	cmp	r0, r5
   1cf80:	beq	1cf90 <main@@Base+0x7200>
   1cf84:	mov	r3, #0
   1cf88:	mov	r2, #17
   1cf8c:	b	1cffc <main@@Base+0x726c>
   1cf90:	movw	r1, #25942	; 0x6556
   1cf94:	movt	r1, #30052	; 0x7564
   1cf98:	eor	r1, r7, r1
   1cf9c:	movw	r2, #25452	; 0x636c
   1cfa0:	movt	r2, #18798	; 0x496e
   1cfa4:	eor	r2, r4, r2
   1cfa8:	orrs	r1, r1, r2
   1cfac:	bne	1d010 <main@@Base+0x7280>
   1cfb0:	add	r4, r0, #8
   1cfb4:	mov	r0, r4
   1cfb8:	mov	r1, r6
   1cfbc:	bl	196a0 <main@@Base+0x3910>
   1cfc0:	bfc	r1, #0, #16
   1cfc4:	movw	r0, #0
   1cfc8:	movt	r0, #24940	; 0x616c
   1cfcc:	teq	r1, r0
   1cfd0:	bne	1d010 <main@@Base+0x7280>
   1cfd4:	str	sl, [sp]
   1cfd8:	mov	r0, r9
   1cfdc:	mov	r1, r4
   1cfe0:	mov	r2, r6
   1cfe4:	mov	r3, #2
   1cfe8:	bl	265ec <flatcc_json_parser_match_constant@@Base>
   1cfec:	cmp	r0, r4
   1cff0:	beq	1d010 <main@@Base+0x7280>
   1cff4:	mov	r2, #0
   1cff8:	mov	r3, #0
   1cffc:	mov	r5, r0
   1d000:	ldr	r0, [fp, #8]
   1d004:	strd	r2, [r0]
   1d008:	mov	r0, #0
   1d00c:	str	r0, [r8]
   1d010:	mov	r0, r5
   1d014:	sub	sp, fp, #28
   1d018:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1d01c:	push	{r4, sl, fp, lr}
   1d020:	add	fp, sp, #8
   1d024:	ldr	r4, [fp, #12]
   1d028:	ldr	ip, [fp, #8]
   1d02c:	ldr	lr, [fp, #16]
   1d030:	cmp	r3, #0
   1d034:	beq	1d050 <main@@Base+0x72c0>
   1d038:	subs	r3, ip, #129	; 0x81
   1d03c:	sbcs	r3, r4, #0
   1d040:	bcc	1d068 <main@@Base+0x72d8>
   1d044:	mov	r3, #8
   1d048:	pop	{r4, sl, fp, lr}
   1d04c:	b	25fa0 <flatcc_json_parser_set_error@@Base>
   1d050:	subs	r3, ip, #128	; 0x80
   1d054:	sbcs	r3, r4, #0
   1d058:	bcc	1d06c <main@@Base+0x72dc>
   1d05c:	mov	r3, #7
   1d060:	pop	{r4, sl, fp, lr}
   1d064:	b	25fa0 <flatcc_json_parser_set_error@@Base>
   1d068:	rsb	ip, ip, #0
   1d06c:	strb	ip, [lr]
   1d070:	mov	r0, r1
   1d074:	pop	{r4, sl, fp, pc}
   1d078:	push	{r4, r5, fp, lr}
   1d07c:	add	fp, sp, #8
   1d080:	mov	r4, r2
   1d084:	mov	r5, r0
   1d088:	bl	19678 <main@@Base+0x38e8>
   1d08c:	mov	r1, r0
   1d090:	mov	r0, r5
   1d094:	mov	r2, r4
   1d098:	pop	{r4, r5, fp, lr}
   1d09c:	b	1c670 <main@@Base+0x68e0>
   1d0a0:	bx	lr
   1d0a4:	push	{fp, lr}
   1d0a8:	mov	fp, sp
   1d0ac:	cmp	r3, #0
   1d0b0:	beq	1d0c0 <main@@Base+0x7330>
   1d0b4:	mov	r3, #8
   1d0b8:	pop	{fp, lr}
   1d0bc:	b	25fa0 <flatcc_json_parser_set_error@@Base>
   1d0c0:	ldr	ip, [fp, #12]
   1d0c4:	ldr	lr, [fp, #8]
   1d0c8:	subs	r3, lr, #256	; 0x100
   1d0cc:	sbcs	r3, ip, #0
   1d0d0:	bcc	1d0e0 <main@@Base+0x7350>
   1d0d4:	mov	r3, #7
   1d0d8:	pop	{fp, lr}
   1d0dc:	b	25fa0 <flatcc_json_parser_set_error@@Base>
   1d0e0:	ldr	r0, [fp, #16]
   1d0e4:	strb	lr, [r0]
   1d0e8:	mov	r0, r1
   1d0ec:	pop	{fp, pc}
   1d0f0:	bx	lr
   1d0f4:	push	{r4, sl, fp, lr}
   1d0f8:	add	fp, sp, #8
   1d0fc:	ldr	r4, [fp, #12]
   1d100:	ldr	ip, [fp, #8]
   1d104:	ldr	lr, [fp, #16]
   1d108:	cmp	r3, #0
   1d10c:	beq	1d12c <main@@Base+0x739c>
   1d110:	movw	r3, #32769	; 0x8001
   1d114:	subs	r3, ip, r3
   1d118:	sbcs	r3, r4, #0
   1d11c:	bcc	1d144 <main@@Base+0x73b4>
   1d120:	mov	r3, #8
   1d124:	pop	{r4, sl, fp, lr}
   1d128:	b	25fa0 <flatcc_json_parser_set_error@@Base>
   1d12c:	subs	r3, ip, #32768	; 0x8000
   1d130:	sbcs	r3, r4, #0
   1d134:	bcc	1d148 <main@@Base+0x73b8>
   1d138:	mov	r3, #7
   1d13c:	pop	{r4, sl, fp, lr}
   1d140:	b	25fa0 <flatcc_json_parser_set_error@@Base>
   1d144:	rsb	ip, ip, #0
   1d148:	strh	ip, [lr]
   1d14c:	mov	r0, r1
   1d150:	pop	{r4, sl, fp, pc}
   1d154:	bx	lr
   1d158:	push	{r4, r5, r6, sl, fp, lr}
   1d15c:	add	fp, sp, #16
   1d160:	mov	r4, r2
   1d164:	mov	r5, r1
   1d168:	mov	r6, r0
   1d16c:	sub	r0, r2, r1
   1d170:	cmp	r0, #4
   1d174:	blt	1d194 <main@@Base+0x7404>
   1d178:	movw	r1, #27470	; 0x6b4e
   1d17c:	movt	r1, #3
   1d180:	mov	r0, r5
   1d184:	mov	r2, #4
   1d188:	bl	14ebc <bcmp@plt>
   1d18c:	cmp	r0, #0
   1d190:	beq	1d1ac <main@@Base+0x741c>
   1d194:	mov	r0, r6
   1d198:	mov	r1, r5
   1d19c:	mov	r2, r4
   1d1a0:	mov	r3, #26
   1d1a4:	pop	{r4, r5, r6, sl, fp, lr}
   1d1a8:	b	25fa0 <flatcc_json_parser_set_error@@Base>
   1d1ac:	add	r0, r5, #4
   1d1b0:	pop	{r4, r5, r6, sl, fp, pc}
   1d1b4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1d1b8:	add	fp, sp, #28
   1d1bc:	sub	sp, sp, #20
   1d1c0:	mov	r5, r3
   1d1c4:	mov	r4, r2
   1d1c8:	mov	r8, r1
   1d1cc:	mov	r9, r0
   1d1d0:	mov	r0, #0
   1d1d4:	str	r0, [r3]
   1d1d8:	ldr	r0, [r9]
   1d1dc:	mov	r1, #4
   1d1e0:	bl	22744 <flatcc_builder_start_table@@Base>
   1d1e4:	cmp	r0, #0
   1d1e8:	beq	1d210 <main@@Base+0x7480>
   1d1ec:	mov	r0, r9
   1d1f0:	mov	r1, r8
   1d1f4:	mov	r2, r4
   1d1f8:	mov	r3, #33	; 0x21
   1d1fc:	bl	25fa0 <flatcc_json_parser_set_error@@Base>
   1d200:	mov	r8, r0
   1d204:	mov	r0, r8
   1d208:	sub	sp, fp, #28
   1d20c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1d210:	add	r3, sp, #16
   1d214:	mov	r0, r9
   1d218:	mov	r1, r8
   1d21c:	mov	r2, r4
   1d220:	bl	195e8 <main@@Base+0x3858>
   1d224:	mov	r8, r0
   1d228:	ldr	r0, [sp, #16]
   1d22c:	cmp	r0, #0
   1d230:	str	r5, [sp, #8]
   1d234:	beq	1d5ec <main@@Base+0x785c>
   1d238:	add	sl, sp, #13
   1d23c:	add	r7, sp, #12
   1d240:	b	1d27c <main@@Base+0x74ec>
   1d244:	mov	r0, r9
   1d248:	mov	r1, r6
   1d24c:	mov	r2, r4
   1d250:	bl	2669c <flatcc_json_parser_unmatched_symbol@@Base>
   1d254:	mov	r8, r0
   1d258:	mov	r0, r9
   1d25c:	mov	r1, r8
   1d260:	mov	r2, r4
   1d264:	add	r3, sp, #16
   1d268:	bl	1c5b0 <main@@Base+0x6820>
   1d26c:	mov	r8, r0
   1d270:	ldr	r0, [sp, #16]
   1d274:	cmp	r0, #0
   1d278:	beq	1d5ec <main@@Base+0x785c>
   1d27c:	mov	r0, r9
   1d280:	mov	r1, r8
   1d284:	mov	r2, r4
   1d288:	bl	19678 <main@@Base+0x38e8>
   1d28c:	mov	r5, r0
   1d290:	mov	r1, r4
   1d294:	bl	196a0 <main@@Base+0x3910>
   1d298:	mov	r6, r1
   1d29c:	lsr	r1, r0, #16
   1d2a0:	orr	r1, r1, r6, lsl #16
   1d2a4:	movw	r2, #29234	; 0x7232
   1d2a8:	movt	r2, #27759	; 0x6c6f
   1d2ac:	eor	r1, r1, r2
   1d2b0:	movw	r2, #25455	; 0x636f
   1d2b4:	eor	r2, r2, r6, lsr #16
   1d2b8:	orrs	r1, r1, r2
   1d2bc:	bne	1d314 <main@@Base+0x7584>
   1d2c0:	mov	r0, r9
   1d2c4:	mov	r1, r5
   1d2c8:	mov	r2, r4
   1d2cc:	mov	r3, #6
   1d2d0:	bl	196a4 <main@@Base+0x3914>
   1d2d4:	mov	r7, r0
   1d2d8:	cmp	r5, r0
   1d2dc:	add	r5, sp, #15
   1d2e0:	beq	1d384 <main@@Base+0x75f4>
   1d2e4:	mov	r0, #0
   1d2e8:	strb	r0, [sp, #15]
   1d2ec:	mov	r0, r9
   1d2f0:	mov	r1, r7
   1d2f4:	mov	r2, r4
   1d2f8:	mov	r3, r5
   1d2fc:	bl	1a05c <main@@Base+0x42cc>
   1d300:	mov	r6, r0
   1d304:	cmp	r7, r0
   1d308:	beq	1d464 <main@@Base+0x76d4>
   1d30c:	mov	r8, r6
   1d310:	b	1d490 <main@@Base+0x7700>
   1d314:	movw	r1, #27759	; 0x6c6f
   1d318:	movt	r1, #25455	; 0x636f
   1d31c:	eor	r1, r6, r1
   1d320:	and	r0, r0, #-16777216	; 0xff000000
   1d324:	eor	r0, r0, #1912602624	; 0x72000000
   1d328:	orrs	r0, r0, r1
   1d32c:	bne	1d38c <main@@Base+0x75fc>
   1d330:	mov	r0, r9
   1d334:	mov	r1, r5
   1d338:	mov	r2, r4
   1d33c:	mov	r3, #5
   1d340:	bl	196a4 <main@@Base+0x3914>
   1d344:	mov	r7, r0
   1d348:	cmp	r5, r0
   1d34c:	beq	1d384 <main@@Base+0x75f4>
   1d350:	mov	r0, #0
   1d354:	strb	r0, [sp, #14]
   1d358:	mov	r0, r9
   1d35c:	mov	r1, r7
   1d360:	mov	r2, r4
   1d364:	add	r5, sp, #14
   1d368:	mov	r3, r5
   1d36c:	bl	1a05c <main@@Base+0x42cc>
   1d370:	mov	r6, r0
   1d374:	cmp	r7, r0
   1d378:	beq	1d4b8 <main@@Base+0x7728>
   1d37c:	mov	r8, r6
   1d380:	b	1d4e4 <main@@Base+0x7754>
   1d384:	mov	r5, r7
   1d388:	add	r7, sp, #12
   1d38c:	bic	r0, r6, #255	; 0xff
   1d390:	movw	r1, #12800	; 0x3200
   1d394:	movt	r1, #30051	; 0x7563
   1d398:	teq	r0, r1
   1d39c:	bne	1d3f0 <main@@Base+0x7660>
   1d3a0:	mov	r0, r9
   1d3a4:	mov	r1, r5
   1d3a8:	mov	r2, r4
   1d3ac:	mov	r3, #3
   1d3b0:	bl	196a4 <main@@Base+0x3914>
   1d3b4:	mov	r6, r0
   1d3b8:	cmp	r5, r0
   1d3bc:	beq	1d244 <main@@Base+0x74b4>
   1d3c0:	mov	r0, #0
   1d3c4:	strb	r0, [sp, #13]
   1d3c8:	mov	r0, r9
   1d3cc:	mov	r1, r6
   1d3d0:	mov	r2, r4
   1d3d4:	mov	r3, sl
   1d3d8:	bl	1a2b8 <main@@Base+0x4528>
   1d3dc:	mov	r7, r0
   1d3e0:	cmp	r6, r0
   1d3e4:	beq	1d528 <main@@Base+0x7798>
   1d3e8:	mov	r8, r7
   1d3ec:	b	1d554 <main@@Base+0x77c4>
   1d3f0:	bfc	r6, #0, #16
   1d3f4:	movw	r0, #0
   1d3f8:	movt	r0, #30051	; 0x7563
   1d3fc:	teq	r6, r0
   1d400:	bne	1d458 <main@@Base+0x76c8>
   1d404:	mov	r0, r9
   1d408:	mov	r1, r5
   1d40c:	mov	r2, r4
   1d410:	mov	r3, #2
   1d414:	bl	196a4 <main@@Base+0x3914>
   1d418:	mov	r6, r0
   1d41c:	cmp	r5, r0
   1d420:	beq	1d244 <main@@Base+0x74b4>
   1d424:	mov	r0, #0
   1d428:	strb	r0, [sp, #12]
   1d42c:	mov	r0, r9
   1d430:	mov	r1, r6
   1d434:	mov	r2, r4
   1d438:	mov	r3, r7
   1d43c:	bl	1a2b8 <main@@Base+0x4528>
   1d440:	mov	r1, r7
   1d444:	mov	r7, r0
   1d448:	cmp	r6, r0
   1d44c:	beq	1d57c <main@@Base+0x77ec>
   1d450:	mov	r8, r7
   1d454:	b	1d5a8 <main@@Base+0x7818>
   1d458:	mov	r0, r9
   1d45c:	mov	r1, r5
   1d460:	b	1d24c <main@@Base+0x74bc>
   1d464:	str	r5, [sp]
   1d468:	mov	r0, r9
   1d46c:	mov	r1, r6
   1d470:	mov	r2, r4
   1d474:	movw	r3, #33248	; 0x81e0
   1d478:	movt	r3, #4
   1d47c:	bl	1a0ec <main@@Base+0x435c>
   1d480:	mov	r8, r0
   1d484:	cmp	r0, r6
   1d488:	cmpne	r8, r4
   1d48c:	beq	1d1ec <main@@Base+0x745c>
   1d490:	ldrb	r5, [sp, #15]
   1d494:	cmp	r5, #2
   1d498:	add	r7, sp, #12
   1d49c:	bne	1d4ac <main@@Base+0x771c>
   1d4a0:	ldrb	r0, [r9, #8]
   1d4a4:	tst	r0, #2
   1d4a8:	beq	1d258 <main@@Base+0x74c8>
   1d4ac:	ldr	r0, [r9]
   1d4b0:	mov	r1, #1
   1d4b4:	b	1d508 <main@@Base+0x7778>
   1d4b8:	str	r5, [sp]
   1d4bc:	mov	r0, r9
   1d4c0:	mov	r1, r6
   1d4c4:	mov	r2, r4
   1d4c8:	movw	r3, #33264	; 0x81f0
   1d4cc:	movt	r3, #4
   1d4d0:	bl	1a0ec <main@@Base+0x435c>
   1d4d4:	mov	r8, r0
   1d4d8:	cmp	r0, r6
   1d4dc:	cmpne	r8, r4
   1d4e0:	beq	1d1ec <main@@Base+0x745c>
   1d4e4:	ldrb	r5, [sp, #14]
   1d4e8:	cmp	r5, #2
   1d4ec:	add	r7, sp, #12
   1d4f0:	bne	1d500 <main@@Base+0x7770>
   1d4f4:	ldrb	r0, [r9, #8]
   1d4f8:	tst	r0, #2
   1d4fc:	beq	1d258 <main@@Base+0x74c8>
   1d500:	ldr	r0, [r9]
   1d504:	mov	r1, #0
   1d508:	mov	r2, #1
   1d50c:	mov	r3, #1
   1d510:	bl	23540 <flatcc_builder_table_add@@Base>
   1d514:	cmp	r0, #0
   1d518:	beq	1d1ec <main@@Base+0x745c>
   1d51c:	sxtb	r1, r5
   1d520:	bl	1a208 <main@@Base+0x4478>
   1d524:	b	1d258 <main@@Base+0x74c8>
   1d528:	str	sl, [sp]
   1d52c:	mov	r0, r9
   1d530:	mov	r1, r7
   1d534:	mov	r2, r4
   1d538:	movw	r3, #33280	; 0x8200
   1d53c:	movt	r3, #4
   1d540:	bl	1a348 <main@@Base+0x45b8>
   1d544:	mov	r8, r0
   1d548:	cmp	r0, r7
   1d54c:	cmpne	r8, r4
   1d550:	beq	1d1ec <main@@Base+0x745c>
   1d554:	ldrb	r6, [sp, #13]
   1d558:	cmp	r6, #2
   1d55c:	add	r7, sp, #12
   1d560:	bne	1d570 <main@@Base+0x77e0>
   1d564:	ldrb	r0, [r9, #8]
   1d568:	tst	r0, #2
   1d56c:	beq	1d258 <main@@Base+0x74c8>
   1d570:	ldr	r0, [r9]
   1d574:	mov	r1, #3
   1d578:	b	1d5cc <main@@Base+0x783c>
   1d57c:	str	r1, [sp]
   1d580:	mov	r0, r9
   1d584:	mov	r1, r7
   1d588:	mov	r2, r4
   1d58c:	movw	r3, #33292	; 0x820c
   1d590:	movt	r3, #4
   1d594:	bl	1a348 <main@@Base+0x45b8>
   1d598:	mov	r8, r0
   1d59c:	cmp	r0, r7
   1d5a0:	cmpne	r8, r4
   1d5a4:	beq	1d1ec <main@@Base+0x745c>
   1d5a8:	ldrb	r6, [sp, #12]
   1d5ac:	cmp	r6, #2
   1d5b0:	add	r7, sp, #12
   1d5b4:	bne	1d5c4 <main@@Base+0x7834>
   1d5b8:	ldrb	r0, [r9, #8]
   1d5bc:	tst	r0, #2
   1d5c0:	beq	1d258 <main@@Base+0x74c8>
   1d5c4:	ldr	r0, [r9]
   1d5c8:	mov	r1, #2
   1d5cc:	mov	r2, #1
   1d5d0:	mov	r3, #1
   1d5d4:	bl	23540 <flatcc_builder_table_add@@Base>
   1d5d8:	cmp	r0, #0
   1d5dc:	beq	1d1ec <main@@Base+0x745c>
   1d5e0:	mov	r1, r6
   1d5e4:	bl	1a464 <main@@Base+0x46d4>
   1d5e8:	b	1d258 <main@@Base+0x74c8>
   1d5ec:	ldr	r0, [r9, #20]
   1d5f0:	cmp	r0, #0
   1d5f4:	bne	1d1ec <main@@Base+0x745c>
   1d5f8:	ldr	r0, [r9]
   1d5fc:	bl	22e50 <flatcc_builder_end_table@@Base>
   1d600:	ldr	r1, [sp, #8]
   1d604:	str	r0, [r1]
   1d608:	cmp	r0, #0
   1d60c:	bne	1d204 <main@@Base+0x7474>
   1d610:	b	1d1ec <main@@Base+0x745c>
   1d614:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   1d618:	add	fp, sp, #24
   1d61c:	sub	sp, sp, #8
   1d620:	mov	r8, r3
   1d624:	mov	r4, r2
   1d628:	mov	r7, r1
   1d62c:	mov	r5, r0
   1d630:	mov	r0, #0
   1d634:	str	r0, [r3]
   1d638:	ldr	r0, [r5]
   1d63c:	mov	r1, #0
   1d640:	bl	22744 <flatcc_builder_start_table@@Base>
   1d644:	cmp	r0, #0
   1d648:	bne	1d6d8 <main@@Base+0x7948>
   1d64c:	add	r3, sp, #4
   1d650:	mov	r0, r5
   1d654:	mov	r1, r7
   1d658:	mov	r2, r4
   1d65c:	bl	195e8 <main@@Base+0x3858>
   1d660:	mov	r7, r0
   1d664:	ldr	r0, [sp, #4]
   1d668:	cmp	r0, #0
   1d66c:	beq	1d6b8 <main@@Base+0x7928>
   1d670:	add	r6, sp, #4
   1d674:	mov	r0, r5
   1d678:	mov	r1, r7
   1d67c:	mov	r2, r4
   1d680:	bl	19678 <main@@Base+0x38e8>
   1d684:	mov	r1, r0
   1d688:	mov	r0, r5
   1d68c:	mov	r2, r4
   1d690:	bl	2669c <flatcc_json_parser_unmatched_symbol@@Base>
   1d694:	mov	r1, r0
   1d698:	mov	r0, r5
   1d69c:	mov	r2, r4
   1d6a0:	mov	r3, r6
   1d6a4:	bl	1c5b0 <main@@Base+0x6820>
   1d6a8:	mov	r7, r0
   1d6ac:	ldr	r0, [sp, #4]
   1d6b0:	cmp	r0, #0
   1d6b4:	bne	1d674 <main@@Base+0x78e4>
   1d6b8:	ldr	r0, [r5, #20]
   1d6bc:	cmp	r0, #0
   1d6c0:	bne	1d6d8 <main@@Base+0x7948>
   1d6c4:	ldr	r0, [r5]
   1d6c8:	bl	22e50 <flatcc_builder_end_table@@Base>
   1d6cc:	str	r0, [r8]
   1d6d0:	cmp	r0, #0
   1d6d4:	bne	1d6f0 <main@@Base+0x7960>
   1d6d8:	mov	r0, r5
   1d6dc:	mov	r1, r7
   1d6e0:	mov	r2, r4
   1d6e4:	mov	r3, #33	; 0x21
   1d6e8:	bl	25fa0 <flatcc_json_parser_set_error@@Base>
   1d6ec:	mov	r7, r0
   1d6f0:	mov	r0, r7
   1d6f4:	sub	sp, fp, #24
   1d6f8:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   1d6fc:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1d700:	add	fp, sp, #28
   1d704:	sub	sp, sp, #36	; 0x24
   1d708:	mov	r7, r3
   1d70c:	mov	r4, r2
   1d710:	mov	r6, r1
   1d714:	mov	r5, r0
   1d718:	mov	r0, #0
   1d71c:	str	r0, [r3]
   1d720:	ldr	r0, [r5]
   1d724:	mov	r1, #4
   1d728:	bl	22744 <flatcc_builder_start_table@@Base>
   1d72c:	cmp	r0, #0
   1d730:	beq	1d758 <main@@Base+0x79c8>
   1d734:	mov	r0, r5
   1d738:	mov	r1, r6
   1d73c:	mov	r2, r4
   1d740:	mov	r3, #33	; 0x21
   1d744:	bl	25fa0 <flatcc_json_parser_set_error@@Base>
   1d748:	mov	r6, r0
   1d74c:	mov	r0, r6
   1d750:	sub	sp, fp, #28
   1d754:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1d758:	add	r0, sp, #24
   1d75c:	str	r0, [sp]
   1d760:	mov	r0, r5
   1d764:	mov	r1, r6
   1d768:	mov	r2, r4
   1d76c:	mov	r3, #1
   1d770:	bl	279d0 <flatcc_json_parser_prepare_unions@@Base>
   1d774:	cmp	r0, r4
   1d778:	beq	1d734 <main@@Base+0x79a4>
   1d77c:	str	r7, [sp, #20]
   1d780:	add	r3, sp, #32
   1d784:	mov	r0, r5
   1d788:	mov	r1, r6
   1d78c:	mov	r2, r4
   1d790:	bl	195e8 <main@@Base+0x3858>
   1d794:	mov	r6, r0
   1d798:	ldr	r0, [sp, #32]
   1d79c:	cmp	r0, #0
   1d7a0:	beq	1da10 <main@@Base+0x7c80>
   1d7a4:	movw	r0, #30976	; 0x7900
   1d7a8:	movt	r0, #24942	; 0x616e
   1d7ac:	add	r9, r0, #95	; 0x5f
   1d7b0:	add	sl, sp, #32
   1d7b4:	b	1d7f0 <main@@Base+0x7a60>
   1d7b8:	mov	r0, r5
   1d7bc:	mov	r1, r6
   1d7c0:	mov	r2, r4
   1d7c4:	bl	2669c <flatcc_json_parser_unmatched_symbol@@Base>
   1d7c8:	mov	r6, r0
   1d7cc:	mov	r0, r5
   1d7d0:	mov	r1, r6
   1d7d4:	mov	r2, r4
   1d7d8:	mov	r3, sl
   1d7dc:	bl	1c5b0 <main@@Base+0x6820>
   1d7e0:	mov	r6, r0
   1d7e4:	ldr	r0, [sp, #32]
   1d7e8:	cmp	r0, #0
   1d7ec:	beq	1da10 <main@@Base+0x7c80>
   1d7f0:	mov	r0, r5
   1d7f4:	mov	r1, r6
   1d7f8:	mov	r2, r4
   1d7fc:	bl	19678 <main@@Base+0x38e8>
   1d800:	mov	r6, r0
   1d804:	mov	r1, r4
   1d808:	bl	196a0 <main@@Base+0x3910>
   1d80c:	mov	r7, r0
   1d810:	mov	r8, r1
   1d814:	movw	r0, #28281	; 0x6e79
   1d818:	movt	r0, #28001	; 0x6d61
   1d81c:	eor	r0, r1, r0
   1d820:	eor	r1, r7, r9
   1d824:	orrs	r1, r1, r0
   1d828:	bne	1d8b4 <main@@Base+0x7b24>
   1d82c:	add	r6, r6, #8
   1d830:	mov	r0, r6
   1d834:	mov	r1, r4
   1d838:	bl	196a0 <main@@Base+0x3910>
   1d83c:	movw	r0, #28773	; 0x7065
   1d840:	movt	r0, #29817	; 0x7479
   1d844:	teq	r1, r0
   1d848:	bne	1d7b8 <main@@Base+0x7a28>
   1d84c:	mov	r0, r5
   1d850:	mov	r1, r6
   1d854:	mov	r2, r4
   1d858:	mov	r3, #4
   1d85c:	bl	196a4 <main@@Base+0x3914>
   1d860:	mov	r1, r0
   1d864:	cmp	r6, r0
   1d868:	beq	1da08 <main@@Base+0x7c78>
   1d86c:	ldr	r0, [sp, #24]
   1d870:	mov	r2, #3
   1d874:	str	r2, [sp]
   1d878:	str	r0, [sp, #4]
   1d87c:	movw	r0, #33304	; 0x8218
   1d880:	movt	r0, #4
   1d884:	str	r0, [sp, #8]
   1d888:	movw	r0, #44712	; 0xaea8
   1d88c:	movt	r0, #1
   1d890:	str	r0, [sp, #12]
   1d894:	movw	r0, #55888	; 0xda50
   1d898:	movt	r0, #1
   1d89c:	str	r0, [sp, #16]
   1d8a0:	mov	r0, r5
   1d8a4:	mov	r2, r4
   1d8a8:	mov	r3, #0
   1d8ac:	bl	2816c <flatcc_json_parser_union_type_vector@@Base>
   1d8b0:	b	1d7c8 <main@@Base+0x7a38>
   1d8b4:	bic	r1, r7, #255	; 0xff
   1d8b8:	movw	r2, #30976	; 0x7900
   1d8bc:	movt	r2, #24942	; 0x616e
   1d8c0:	eor	r1, r1, r2
   1d8c4:	orrs	r0, r1, r0
   1d8c8:	bne	1d920 <main@@Base+0x7b90>
   1d8cc:	mov	r0, r5
   1d8d0:	mov	r1, r6
   1d8d4:	mov	r2, r4
   1d8d8:	mov	r3, #7
   1d8dc:	bl	196a4 <main@@Base+0x3914>
   1d8e0:	mov	r1, r0
   1d8e4:	cmp	r6, r0
   1d8e8:	beq	1d91c <main@@Base+0x7b8c>
   1d8ec:	ldr	r0, [sp, #24]
   1d8f0:	mov	r2, #3
   1d8f4:	str	r2, [sp]
   1d8f8:	str	r0, [sp, #4]
   1d8fc:	movw	r0, #44712	; 0xaea8
   1d900:	movt	r0, #1
   1d904:	str	r0, [sp, #8]
   1d908:	mov	r0, r5
   1d90c:	mov	r2, r4
   1d910:	mov	r3, #0
   1d914:	bl	27f10 <flatcc_json_parser_union_vector@@Base>
   1d918:	b	1d7c8 <main@@Base+0x7a38>
   1d91c:	mov	r6, r1
   1d920:	movw	r0, #28786	; 0x7072
   1d924:	eor	r0, r0, r8, lsr #16
   1d928:	lsr	r1, r7, #16
   1d92c:	orr	r1, r1, r8, lsl #16
   1d930:	movw	r2, #27000	; 0x6978
   1d934:	movt	r2, #25958	; 0x6566
   1d938:	eor	r1, r1, r2
   1d93c:	orrs	r0, r1, r0
   1d940:	bne	1d990 <main@@Base+0x7c00>
   1d944:	mov	r0, r5
   1d948:	mov	r1, r6
   1d94c:	mov	r2, r4
   1d950:	mov	r3, #6
   1d954:	bl	196a4 <main@@Base+0x3914>
   1d958:	mov	r1, r0
   1d95c:	cmp	r6, r0
   1d960:	beq	1da08 <main@@Base+0x7c78>
   1d964:	mov	r0, r5
   1d968:	mov	r2, r4
   1d96c:	add	r3, sp, #28
   1d970:	bl	1da64 <main@@Base+0x7cd4>
   1d974:	mov	r6, r0
   1d978:	ldr	r7, [sp, #28]
   1d97c:	cmp	r7, #0
   1d980:	beq	1d734 <main@@Base+0x79a4>
   1d984:	ldr	r0, [r5]
   1d988:	mov	r1, #0
   1d98c:	b	1d9f4 <main@@Base+0x7c64>
   1d990:	movw	r0, #30313	; 0x7669
   1d994:	movt	r0, #28015	; 0x6d6f
   1d998:	eor	r0, r8, r0
   1d99c:	and	r1, r7, #-16777216	; 0xff000000
   1d9a0:	eor	r1, r1, #1694498816	; 0x65000000
   1d9a4:	orrs	r0, r1, r0
   1d9a8:	bne	1d7b8 <main@@Base+0x7a28>
   1d9ac:	mov	r0, r5
   1d9b0:	mov	r1, r6
   1d9b4:	mov	r2, r4
   1d9b8:	mov	r3, #5
   1d9bc:	bl	196a4 <main@@Base+0x3914>
   1d9c0:	mov	r1, r0
   1d9c4:	cmp	r6, r0
   1d9c8:	beq	1da08 <main@@Base+0x7c78>
   1d9cc:	mov	r0, r5
   1d9d0:	mov	r2, r4
   1d9d4:	add	r3, sp, #28
   1d9d8:	bl	1dd74 <main@@Base+0x7fe4>
   1d9dc:	mov	r6, r0
   1d9e0:	ldr	r7, [sp, #28]
   1d9e4:	cmp	r7, #0
   1d9e8:	beq	1d734 <main@@Base+0x79a4>
   1d9ec:	ldr	r0, [r5]
   1d9f0:	mov	r1, #1
   1d9f4:	bl	2347c <flatcc_builder_table_add_offset@@Base>
   1d9f8:	cmp	r0, #0
   1d9fc:	beq	1d734 <main@@Base+0x79a4>
   1da00:	str	r7, [r0]
   1da04:	b	1d7cc <main@@Base+0x7a3c>
   1da08:	mov	r0, r5
   1da0c:	b	1d7c0 <main@@Base+0x7a30>
   1da10:	ldr	r0, [r5, #20]
   1da14:	cmp	r0, #0
   1da18:	bne	1d734 <main@@Base+0x79a4>
   1da1c:	ldr	r3, [sp, #24]
   1da20:	mov	r0, r5
   1da24:	mov	r1, r6
   1da28:	mov	r2, r4
   1da2c:	bl	27a3c <flatcc_json_parser_finalize_unions@@Base>
   1da30:	mov	r6, r0
   1da34:	ldr	r0, [r5]
   1da38:	bl	22e50 <flatcc_builder_end_table@@Base>
   1da3c:	ldr	r1, [sp, #20]
   1da40:	str	r0, [r1]
   1da44:	cmp	r0, #0
   1da48:	bne	1d74c <main@@Base+0x79bc>
   1da4c:	b	1d734 <main@@Base+0x79a4>
   1da50:	mov	r1, #0
   1da54:	cmp	r0, #5
   1da58:	movwcc	r1, #1
   1da5c:	mov	r0, r1
   1da60:	bx	lr
   1da64:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1da68:	add	fp, sp, #28
   1da6c:	sub	sp, sp, #12
   1da70:	mov	r7, r3
   1da74:	mov	r4, r2
   1da78:	mov	r6, r1
   1da7c:	mov	r5, r0
   1da80:	mov	r0, #0
   1da84:	str	r0, [r3]
   1da88:	ldr	r0, [r5]
   1da8c:	mov	r1, #3
   1da90:	bl	22744 <flatcc_builder_start_table@@Base>
   1da94:	cmp	r0, #0
   1da98:	bne	1dd34 <main@@Base+0x7fa4>
   1da9c:	add	r3, sp, #8
   1daa0:	mov	r0, r5
   1daa4:	mov	r1, r6
   1daa8:	mov	r2, r4
   1daac:	bl	195e8 <main@@Base+0x3858>
   1dab0:	mov	r6, r0
   1dab4:	ldr	r0, [sp, #8]
   1dab8:	cmp	r0, #0
   1dabc:	str	r7, [sp]
   1dac0:	beq	1dd28 <main@@Base+0x7f98>
   1dac4:	movw	r9, #29556	; 0x7374
   1dac8:	movt	r9, #29797	; 0x7465
   1dacc:	movw	sl, #28526	; 0x6f6e
   1dad0:	movt	sl, #27251	; 0x6a73
   1dad4:	movw	r8, #25958	; 0x6566
   1dad8:	movt	r8, #28786	; 0x7072
   1dadc:	add	r7, sp, #8
   1dae0:	b	1db2c <main@@Base+0x7d9c>
   1dae4:	mov	r6, r1
   1dae8:	movw	r8, #25958	; 0x6566
   1daec:	movt	r8, #28786	; 0x7072
   1daf0:	add	r7, sp, #8
   1daf4:	mov	r0, r5
   1daf8:	mov	r1, r6
   1dafc:	mov	r2, r4
   1db00:	bl	2669c <flatcc_json_parser_unmatched_symbol@@Base>
   1db04:	mov	r6, r0
   1db08:	mov	r0, r5
   1db0c:	mov	r1, r6
   1db10:	mov	r2, r4
   1db14:	mov	r3, r7
   1db18:	bl	1c5b0 <main@@Base+0x6820>
   1db1c:	mov	r6, r0
   1db20:	ldr	r0, [sp, #8]
   1db24:	cmp	r0, #0
   1db28:	beq	1dd28 <main@@Base+0x7f98>
   1db2c:	mov	r0, r5
   1db30:	mov	r1, r6
   1db34:	mov	r2, r4
   1db38:	bl	19678 <main@@Base+0x38e8>
   1db3c:	mov	r6, r0
   1db40:	mov	r1, r4
   1db44:	bl	196a0 <main@@Base+0x3910>
   1db48:	eor	r1, r1, r9
   1db4c:	eor	r0, r0, sl
   1db50:	orrs	r0, r0, r1
   1db54:	bne	1daf4 <main@@Base+0x7d64>
   1db58:	add	r7, r6, #8
   1db5c:	mov	r0, r7
   1db60:	mov	r1, r4
   1db64:	bl	196a0 <main@@Base+0x3910>
   1db68:	eor	r1, r1, r8
   1db6c:	movw	r2, #28769	; 0x7061
   1db70:	movt	r2, #27000	; 0x6978
   1db74:	eor	r0, r0, r2
   1db78:	orrs	r0, r0, r1
   1db7c:	bne	1dc04 <main@@Base+0x7e74>
   1db80:	add	r6, r6, #16
   1db84:	mov	r0, r6
   1db88:	mov	r1, r4
   1db8c:	bl	196a0 <main@@Base+0x3910>
   1db90:	movw	r2, #26990	; 0x696e
   1db94:	movt	r2, #29299	; 0x7273
   1db98:	eor	r7, r1, r2
   1db9c:	mov	r8, r0
   1dba0:	bfc	r8, #0, #16
   1dba4:	movw	r1, #0
   1dba8:	movt	r1, #26418	; 0x6732
   1dbac:	eor	r1, r8, r1
   1dbb0:	orrs	r1, r1, r7
   1dbb4:	bne	1dc1c <main@@Base+0x7e8c>
   1dbb8:	mov	r0, r5
   1dbbc:	mov	r1, r6
   1dbc0:	mov	r2, r4
   1dbc4:	mov	r3, #6
   1dbc8:	bl	196a4 <main@@Base+0x3914>
   1dbcc:	mov	r1, r0
   1dbd0:	cmp	r6, r0
   1dbd4:	beq	1dae4 <main@@Base+0x7d54>
   1dbd8:	mov	r0, r5
   1dbdc:	mov	r2, r4
   1dbe0:	add	r3, sp, #4
   1dbe4:	bl	1e4d8 <main@@Base+0x8748>
   1dbe8:	mov	r6, r0
   1dbec:	ldr	r7, [sp, #4]
   1dbf0:	cmp	r7, #0
   1dbf4:	beq	1dd34 <main@@Base+0x7fa4>
   1dbf8:	ldr	r0, [r5]
   1dbfc:	mov	r1, #1
   1dc00:	b	1dc74 <main@@Base+0x7ee4>
   1dc04:	mov	r0, r5
   1dc08:	mov	r1, r7
   1dc0c:	mov	r2, r4
   1dc10:	bl	2669c <flatcc_json_parser_unmatched_symbol@@Base>
   1dc14:	mov	r6, r0
   1dc18:	b	1dc8c <main@@Base+0x7efc>
   1dc1c:	and	r0, r0, #-16777216	; 0xff000000
   1dc20:	eor	r0, r0, #1728053248	; 0x67000000
   1dc24:	orrs	r0, r0, r7
   1dc28:	bne	1dc98 <main@@Base+0x7f08>
   1dc2c:	mov	r0, r5
   1dc30:	mov	r1, r6
   1dc34:	mov	r2, r4
   1dc38:	mov	r3, #5
   1dc3c:	bl	196a4 <main@@Base+0x3914>
   1dc40:	mov	r1, r0
   1dc44:	cmp	r6, r0
   1dc48:	beq	1dc94 <main@@Base+0x7f04>
   1dc4c:	mov	r0, r5
   1dc50:	mov	r2, r4
   1dc54:	add	r3, sp, #4
   1dc58:	bl	1e81c <main@@Base+0x8a8c>
   1dc5c:	mov	r6, r0
   1dc60:	ldr	r7, [sp, #4]
   1dc64:	cmp	r7, #0
   1dc68:	beq	1dd34 <main@@Base+0x7fa4>
   1dc6c:	ldr	r0, [r5]
   1dc70:	mov	r1, #0
   1dc74:	bl	2347c <flatcc_builder_table_add_offset@@Base>
   1dc78:	cmp	r0, #0
   1dc7c:	beq	1dd34 <main@@Base+0x7fa4>
   1dc80:	str	r7, [r0]
   1dc84:	movw	r8, #25958	; 0x6566
   1dc88:	movt	r8, #28786	; 0x7072
   1dc8c:	add	r7, sp, #8
   1dc90:	b	1db08 <main@@Base+0x7d78>
   1dc94:	mov	r6, r1
   1dc98:	movw	r0, #0
   1dc9c:	movt	r0, #26418	; 0x6732
   1dca0:	add	r0, r0, #65536	; 0x10000
   1dca4:	eor	r0, r8, r0
   1dca8:	orrs	r0, r0, r7
   1dcac:	bne	1dae8 <main@@Base+0x7d58>
   1dcb0:	mov	r0, r5
   1dcb4:	mov	r1, r6
   1dcb8:	mov	r2, r4
   1dcbc:	mov	r3, #6
   1dcc0:	bl	196a4 <main@@Base+0x3914>
   1dcc4:	mov	r1, r0
   1dcc8:	cmp	r6, r0
   1dccc:	beq	1dd14 <main@@Base+0x7f84>
   1dcd0:	mov	r0, r5
   1dcd4:	mov	r2, r4
   1dcd8:	add	r3, sp, #4
   1dcdc:	bl	1ef70 <main@@Base+0x91e0>
   1dce0:	mov	r6, r0
   1dce4:	ldr	r7, [sp, #4]
   1dce8:	cmp	r7, #0
   1dcec:	movw	r8, #25958	; 0x6566
   1dcf0:	movt	r8, #28786	; 0x7072
   1dcf4:	beq	1dd34 <main@@Base+0x7fa4>
   1dcf8:	ldr	r0, [r5]
   1dcfc:	mov	r1, #2
   1dd00:	bl	2347c <flatcc_builder_table_add_offset@@Base>
   1dd04:	cmp	r0, #0
   1dd08:	beq	1dd34 <main@@Base+0x7fa4>
   1dd0c:	str	r7, [r0]
   1dd10:	b	1dc8c <main@@Base+0x7efc>
   1dd14:	mov	r0, r5
   1dd18:	mov	r2, r4
   1dd1c:	bl	2669c <flatcc_json_parser_unmatched_symbol@@Base>
   1dd20:	mov	r6, r0
   1dd24:	b	1dc84 <main@@Base+0x7ef4>
   1dd28:	ldr	r0, [r5, #20]
   1dd2c:	cmp	r0, #0
   1dd30:	beq	1dd58 <main@@Base+0x7fc8>
   1dd34:	mov	r0, r5
   1dd38:	mov	r1, r6
   1dd3c:	mov	r2, r4
   1dd40:	mov	r3, #33	; 0x21
   1dd44:	bl	25fa0 <flatcc_json_parser_set_error@@Base>
   1dd48:	mov	r6, r0
   1dd4c:	mov	r0, r6
   1dd50:	sub	sp, fp, #28
   1dd54:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1dd58:	ldr	r0, [r5]
   1dd5c:	bl	22e50 <flatcc_builder_end_table@@Base>
   1dd60:	ldr	r1, [sp]
   1dd64:	str	r0, [r1]
   1dd68:	cmp	r0, #0
   1dd6c:	bne	1dd4c <main@@Base+0x7fbc>
   1dd70:	b	1dd34 <main@@Base+0x7fa4>
   1dd74:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1dd78:	add	fp, sp, #28
   1dd7c:	sub	sp, sp, #36	; 0x24
   1dd80:	mov	r7, r3
   1dd84:	mov	r4, r2
   1dd88:	mov	r6, r1
   1dd8c:	mov	r5, r0
   1dd90:	mov	r0, #0
   1dd94:	str	r0, [r3]
   1dd98:	ldr	r0, [r5]
   1dd9c:	mov	r1, #10
   1dda0:	bl	22744 <flatcc_builder_start_table@@Base>
   1dda4:	cmp	r0, #0
   1dda8:	beq	1ddd0 <main@@Base+0x8040>
   1ddac:	mov	r0, r5
   1ddb0:	mov	r1, r6
   1ddb4:	mov	r2, r4
   1ddb8:	mov	r3, #33	; 0x21
   1ddbc:	bl	25fa0 <flatcc_json_parser_set_error@@Base>
   1ddc0:	mov	r6, r0
   1ddc4:	mov	r0, r6
   1ddc8:	sub	sp, fp, #28
   1ddcc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1ddd0:	add	r0, sp, #28
   1ddd4:	str	r0, [sp]
   1ddd8:	mov	r0, r5
   1dddc:	mov	r1, r6
   1dde0:	mov	r2, r4
   1dde4:	mov	r3, #5
   1dde8:	bl	279d0 <flatcc_json_parser_prepare_unions@@Base>
   1ddec:	cmp	r0, r4
   1ddf0:	beq	1ddac <main@@Base+0x801c>
   1ddf4:	add	r3, sp, #32
   1ddf8:	mov	r0, r5
   1ddfc:	mov	r1, r6
   1de00:	mov	r2, r4
   1de04:	bl	195e8 <main@@Base+0x3858>
   1de08:	mov	r6, r0
   1de0c:	ldr	r0, [sp, #32]
   1de10:	cmp	r0, #0
   1de14:	str	r7, [sp, #20]
   1de18:	beq	1e498 <main@@Base+0x8708>
   1de1c:	movw	r8, #24946	; 0x6172
   1de20:	movt	r8, #25448	; 0x6368
   1de24:	movw	r9, #29797	; 0x7465
   1de28:	movt	r9, #24931	; 0x6163
   1de2c:	movw	r0, #24436	; 0x5f74
   1de30:	movt	r0, #29299	; 0x7273
   1de34:	movw	sl, #29817	; 0x7479
   1de38:	movt	sl, #28511	; 0x6f5f
   1de3c:	add	r0, r0, #65536	; 0x10000
   1de40:	add	r0, r0, #16777216	; 0x1000000
   1de44:	str	r0, [sp, #24]
   1de48:	add	r7, sp, #32
   1de4c:	b	1de84 <main@@Base+0x80f4>
   1de50:	mov	r0, r5
   1de54:	mov	r1, r6
   1de58:	mov	r2, r4
   1de5c:	bl	2669c <flatcc_json_parser_unmatched_symbol@@Base>
   1de60:	mov	r1, r0
   1de64:	mov	r0, r5
   1de68:	mov	r2, r4
   1de6c:	mov	r3, r7
   1de70:	bl	1c5b0 <main@@Base+0x6820>
   1de74:	mov	r6, r0
   1de78:	ldr	r0, [sp, #32]
   1de7c:	cmp	r0, #0
   1de80:	beq	1e498 <main@@Base+0x8708>
   1de84:	mov	r0, r5
   1de88:	mov	r1, r6
   1de8c:	mov	r2, r4
   1de90:	bl	19678 <main@@Base+0x38e8>
   1de94:	mov	r6, r0
   1de98:	mov	r1, r4
   1de9c:	bl	196a0 <main@@Base+0x3910>
   1dea0:	subs	r2, r0, r9
   1dea4:	sbcs	r2, r1, r8
   1dea8:	bcs	1df74 <main@@Base+0x81e4>
   1deac:	eor	r3, r0, sl
   1deb0:	movw	r2, #28005	; 0x6d65
   1deb4:	movt	r2, #25441	; 0x6361
   1deb8:	eor	r2, r1, r2
   1debc:	orrs	r3, r3, r2
   1dec0:	beq	1e12c <main@@Base+0x839c>
   1dec4:	movw	r3, #28265	; 0x6e69
   1dec8:	movt	r3, #26479	; 0x676f
   1decc:	eor	r3, r0, r3
   1ded0:	movw	r7, #29793	; 0x7461
   1ded4:	movt	r7, #24942	; 0x616e
   1ded8:	eor	r1, r1, r7
   1dedc:	orrs	r1, r3, r1
   1dee0:	bne	1e1ac <main@@Base+0x841c>
   1dee4:	add	r6, r6, #8
   1dee8:	mov	r0, r6
   1deec:	mov	r1, r4
   1def0:	bl	196a0 <main@@Base+0x3910>
   1def4:	ldr	r2, [sp, #24]
   1def8:	eor	r2, r1, r2
   1defc:	bic	r0, r0, #255	; 0xff
   1df00:	movw	r3, #25856	; 0x6500
   1df04:	movt	r3, #31088	; 0x7970
   1df08:	eor	r0, r0, r3
   1df0c:	orrs	r0, r0, r2
   1df10:	bne	1e210 <main@@Base+0x8480>
   1df14:	mov	r0, r5
   1df18:	mov	r1, r6
   1df1c:	mov	r2, r4
   1df20:	mov	r3, #7
   1df24:	bl	196a4 <main@@Base+0x3914>
   1df28:	mov	r1, r0
   1df2c:	cmp	r6, r0
   1df30:	add	r7, sp, #32
   1df34:	beq	1e458 <main@@Base+0x86c8>
   1df38:	ldr	r0, [sp, #28]
   1df3c:	mov	r2, #3
   1df40:	str	r2, [sp]
   1df44:	str	r0, [sp, #4]
   1df48:	movw	r0, #33440	; 0x82a0
   1df4c:	movt	r0, #4
   1df50:	str	r0, [sp, #8]
   1df54:	movw	r0, #62316	; 0xf36c
   1df58:	movt	r0, #1
   1df5c:	str	r0, [sp, #12]
   1df60:	mov	r0, r5
   1df64:	mov	r2, r4
   1df68:	mov	r3, #1
   1df6c:	bl	27bbc <flatcc_json_parser_union_type@@Base>
   1df70:	b	1de60 <main@@Base+0x80d0>
   1df74:	movw	r2, #26720	; 0x6860
   1df78:	movt	r2, #24419	; 0x5f63
   1df7c:	subs	r2, r2, r0
   1df80:	movw	r2, #26990	; 0x696e
   1df84:	movt	r2, #28001	; 0x6d61
   1df88:	sbcs	r2, r2, r1
   1df8c:	bcc	1e03c <main@@Base+0x82ac>
   1df90:	eor	r0, r0, r9
   1df94:	eor	r1, r1, r8
   1df98:	orrs	r0, r0, r1
   1df9c:	bne	1de50 <main@@Base+0x80c0>
   1dfa0:	add	r6, r6, #8
   1dfa4:	mov	r0, r6
   1dfa8:	mov	r1, r4
   1dfac:	bl	196a0 <main@@Base+0x3910>
   1dfb0:	movw	r2, #24436	; 0x5f74
   1dfb4:	movt	r2, #29299	; 0x7273
   1dfb8:	eor	r2, r1, r2
   1dfbc:	bic	r0, r0, #255	; 0xff
   1dfc0:	movw	r3, #25856	; 0x6500
   1dfc4:	movt	r3, #31088	; 0x7970
   1dfc8:	eor	r0, r0, r3
   1dfcc:	orrs	r0, r0, r2
   1dfd0:	bne	1e324 <main@@Base+0x8594>
   1dfd4:	mov	r0, r5
   1dfd8:	mov	r1, r6
   1dfdc:	mov	r2, r4
   1dfe0:	mov	r3, #7
   1dfe4:	bl	196a4 <main@@Base+0x3914>
   1dfe8:	mov	r1, r0
   1dfec:	cmp	r6, r0
   1dff0:	beq	1e458 <main@@Base+0x86c8>
   1dff4:	ldr	r0, [sp, #28]
   1dff8:	mov	r2, #9
   1dffc:	str	r2, [sp]
   1e000:	str	r0, [sp, #4]
   1e004:	movw	r0, #33472	; 0x82c0
   1e008:	movt	r0, #4
   1e00c:	str	r0, [sp, #8]
   1e010:	movw	r0, #62316	; 0xf36c
   1e014:	movt	r0, #1
   1e018:	str	r0, [sp, #12]
   1e01c:	movw	r0, #62612	; 0xf494
   1e020:	movt	r0, #1
   1e024:	str	r0, [sp, #16]
   1e028:	mov	r0, r5
   1e02c:	mov	r2, r4
   1e030:	mov	r3, #4
   1e034:	bl	2816c <flatcc_json_parser_union_type_vector@@Base>
   1e038:	b	1de60 <main@@Base+0x80d0>
   1e03c:	movw	r2, #26979	; 0x6963
   1e040:	movt	r2, #24427	; 0x5f6b
   1e044:	eor	r2, r0, r2
   1e048:	movw	r3, #25701	; 0x6465
   1e04c:	movt	r3, #29545	; 0x7369
   1e050:	eor	r3, r1, r3
   1e054:	orrs	r2, r2, r3
   1e058:	beq	1e278 <main@@Base+0x84e8>
   1e05c:	movw	r2, #26721	; 0x6861
   1e060:	movt	r2, #24419	; 0x5f63
   1e064:	eor	r0, r0, r2
   1e068:	movw	r2, #26990	; 0x696e
   1e06c:	movt	r2, #28001	; 0x6d61
   1e070:	eor	r1, r1, r2
   1e074:	orrs	r0, r0, r1
   1e078:	bne	1de50 <main@@Base+0x80c0>
   1e07c:	movw	r9, #25856	; 0x6500
   1e080:	movt	r9, #31088	; 0x7970
   1e084:	add	r7, r6, #8
   1e088:	mov	r0, r7
   1e08c:	mov	r1, r4
   1e090:	bl	196a0 <main@@Base+0x3910>
   1e094:	movw	r2, #25460	; 0x6374
   1e098:	movt	r2, #29281	; 0x7261
   1e09c:	eor	r2, r1, r2
   1e0a0:	movw	r3, #24436	; 0x5f74
   1e0a4:	movt	r3, #25970	; 0x6572
   1e0a8:	eor	r3, r0, r3
   1e0ac:	orrs	r2, r3, r2
   1e0b0:	bne	1e388 <main@@Base+0x85f8>
   1e0b4:	add	r6, r6, #16
   1e0b8:	mov	r0, r6
   1e0bc:	mov	r1, r4
   1e0c0:	bl	196a0 <main@@Base+0x3910>
   1e0c4:	bic	r0, r1, #255	; 0xff
   1e0c8:	teq	r0, r9
   1e0cc:	bne	1e460 <main@@Base+0x86d0>
   1e0d0:	mov	r0, r5
   1e0d4:	mov	r1, r6
   1e0d8:	mov	r2, r4
   1e0dc:	mov	r3, #3
   1e0e0:	bl	196a4 <main@@Base+0x3914>
   1e0e4:	mov	r1, r0
   1e0e8:	cmp	r6, r0
   1e0ec:	beq	1e478 <main@@Base+0x86e8>
   1e0f0:	ldr	r0, [sp, #28]
   1e0f4:	mov	r2, #1
   1e0f8:	str	r2, [sp]
   1e0fc:	str	r0, [sp, #4]
   1e100:	movw	r0, #33488	; 0x82d0
   1e104:	movt	r0, #4
   1e108:	str	r0, [sp, #8]
   1e10c:	movw	r0, #62316	; 0xf36c
   1e110:	movt	r0, #1
   1e114:	str	r0, [sp, #12]
   1e118:	mov	r0, r5
   1e11c:	mov	r2, r4
   1e120:	mov	r3, #0
   1e124:	bl	27bbc <flatcc_json_parser_union_type@@Base>
   1e128:	b	1e484 <main@@Base+0x86f4>
   1e12c:	add	r6, r6, #8
   1e130:	mov	r0, r6
   1e134:	mov	r1, r4
   1e138:	bl	196a0 <main@@Base+0x3910>
   1e13c:	bfc	r1, #0, #16
   1e140:	movw	r0, #0
   1e144:	movt	r0, #28773	; 0x7065
   1e148:	teq	r1, r0
   1e14c:	bne	1de50 <main@@Base+0x80c0>
   1e150:	mov	r0, r5
   1e154:	mov	r1, r6
   1e158:	mov	r2, r4
   1e15c:	mov	r3, #2
   1e160:	bl	196a4 <main@@Base+0x3914>
   1e164:	mov	r1, r0
   1e168:	cmp	r6, r0
   1e16c:	beq	1e458 <main@@Base+0x86c8>
   1e170:	ldr	r0, [sp, #28]
   1e174:	mov	r2, #7
   1e178:	str	r2, [sp]
   1e17c:	str	r0, [sp, #4]
   1e180:	movw	r0, #33456	; 0x82b0
   1e184:	movt	r0, #4
   1e188:	str	r0, [sp, #8]
   1e18c:	movw	r0, #62316	; 0xf36c
   1e190:	movt	r0, #1
   1e194:	str	r0, [sp, #12]
   1e198:	mov	r0, r5
   1e19c:	mov	r2, r4
   1e1a0:	mov	r3, #3
   1e1a4:	bl	27bbc <flatcc_json_parser_union_type@@Base>
   1e1a8:	b	1de60 <main@@Base+0x80d0>
   1e1ac:	and	r0, r0, #-16777216	; 0xff000000
   1e1b0:	eor	r0, r0, #1862270976	; 0x6f000000
   1e1b4:	orrs	r0, r0, r2
   1e1b8:	bne	1e308 <main@@Base+0x8578>
   1e1bc:	mov	r0, r5
   1e1c0:	mov	r1, r6
   1e1c4:	mov	r2, r4
   1e1c8:	mov	r3, #5
   1e1cc:	bl	196a4 <main@@Base+0x3914>
   1e1d0:	mov	r1, r0
   1e1d4:	cmp	r6, r0
   1e1d8:	add	r7, sp, #32
   1e1dc:	beq	1e458 <main@@Base+0x86c8>
   1e1e0:	ldr	r0, [sp, #28]
   1e1e4:	mov	r2, #7
   1e1e8:	str	r2, [sp]
   1e1ec:	str	r0, [sp, #4]
   1e1f0:	movw	r0, #62316	; 0xf36c
   1e1f4:	movt	r0, #1
   1e1f8:	str	r0, [sp, #8]
   1e1fc:	mov	r0, r5
   1e200:	mov	r2, r4
   1e204:	mov	r3, #3
   1e208:	bl	27a98 <flatcc_json_parser_union@@Base>
   1e20c:	b	1de60 <main@@Base+0x80d0>
   1e210:	bfc	r1, #0, #16
   1e214:	movw	r0, #0
   1e218:	movt	r0, #29556	; 0x7374
   1e21c:	teq	r1, r0
   1e220:	add	r7, sp, #32
   1e224:	bne	1de50 <main@@Base+0x80c0>
   1e228:	mov	r0, r5
   1e22c:	mov	r1, r6
   1e230:	mov	r2, r4
   1e234:	mov	r3, #2
   1e238:	bl	196a4 <main@@Base+0x3914>
   1e23c:	mov	r1, r0
   1e240:	cmp	r6, r0
   1e244:	beq	1e458 <main@@Base+0x86c8>
   1e248:	ldr	r0, [sp, #28]
   1e24c:	mov	r2, #3
   1e250:	str	r2, [sp]
   1e254:	str	r0, [sp, #4]
   1e258:	movw	r0, #62316	; 0xf36c
   1e25c:	movt	r0, #1
   1e260:	str	r0, [sp, #8]
   1e264:	mov	r0, r5
   1e268:	mov	r2, r4
   1e26c:	mov	r3, #1
   1e270:	bl	27a98 <flatcc_json_parser_union@@Base>
   1e274:	b	1de60 <main@@Base+0x80d0>
   1e278:	add	r6, r6, #8
   1e27c:	mov	r0, r6
   1e280:	mov	r1, r4
   1e284:	bl	196a0 <main@@Base+0x3910>
   1e288:	lsr	r0, r0, #16
   1e28c:	orr	r0, r0, r1, lsl #16
   1e290:	movw	r2, #28773	; 0x7065
   1e294:	movt	r2, #29817	; 0x7479
   1e298:	eor	r0, r0, r2
   1e29c:	movw	r2, #27487	; 0x6b5f
   1e2a0:	eor	r2, r2, r1, lsr #16
   1e2a4:	orrs	r0, r0, r2
   1e2a8:	bne	1e3fc <main@@Base+0x866c>
   1e2ac:	mov	r0, r5
   1e2b0:	mov	r1, r6
   1e2b4:	mov	r2, r4
   1e2b8:	mov	r3, #6
   1e2bc:	bl	196a4 <main@@Base+0x3914>
   1e2c0:	mov	r1, r0
   1e2c4:	cmp	r6, r0
   1e2c8:	beq	1e458 <main@@Base+0x86c8>
   1e2cc:	ldr	r0, [sp, #28]
   1e2d0:	mov	r2, #5
   1e2d4:	str	r2, [sp]
   1e2d8:	str	r0, [sp, #4]
   1e2dc:	movw	r0, #33504	; 0x82e0
   1e2e0:	movt	r0, #4
   1e2e4:	str	r0, [sp, #8]
   1e2e8:	movw	r0, #62316	; 0xf36c
   1e2ec:	movt	r0, #1
   1e2f0:	str	r0, [sp, #12]
   1e2f4:	mov	r0, r5
   1e2f8:	mov	r2, r4
   1e2fc:	mov	r3, #2
   1e300:	bl	27bbc <flatcc_json_parser_union_type@@Base>
   1e304:	b	1de60 <main@@Base+0x80d0>
   1e308:	mov	r0, r5
   1e30c:	mov	r1, r6
   1e310:	mov	r2, r4
   1e314:	bl	2669c <flatcc_json_parser_unmatched_symbol@@Base>
   1e318:	mov	r1, r0
   1e31c:	add	r7, sp, #32
   1e320:	b	1de64 <main@@Base+0x80d4>
   1e324:	bfc	r1, #0, #16
   1e328:	movw	r0, #0
   1e32c:	movt	r0, #29299	; 0x7273
   1e330:	teq	r1, r0
   1e334:	bne	1de50 <main@@Base+0x80c0>
   1e338:	mov	r0, r5
   1e33c:	mov	r1, r6
   1e340:	mov	r2, r4
   1e344:	mov	r3, #2
   1e348:	bl	196a4 <main@@Base+0x3914>
   1e34c:	mov	r1, r0
   1e350:	cmp	r6, r0
   1e354:	beq	1e458 <main@@Base+0x86c8>
   1e358:	ldr	r0, [sp, #28]
   1e35c:	mov	r2, #9
   1e360:	str	r2, [sp]
   1e364:	str	r0, [sp, #4]
   1e368:	movw	r0, #62316	; 0xf36c
   1e36c:	movt	r0, #1
   1e370:	str	r0, [sp, #8]
   1e374:	mov	r0, r5
   1e378:	mov	r2, r4
   1e37c:	mov	r3, #4
   1e380:	bl	27f10 <flatcc_json_parser_union_vector@@Base>
   1e384:	b	1de60 <main@@Base+0x80d0>
   1e388:	movw	r2, #29281	; 0x7261
   1e38c:	eor	r2, r2, r1, lsr #16
   1e390:	lsr	r0, r0, #16
   1e394:	orr	r0, r0, r1, lsl #16
   1e398:	movw	r1, #25970	; 0x6572
   1e39c:	movt	r1, #25460	; 0x6374
   1e3a0:	eor	r0, r0, r1
   1e3a4:	orrs	r0, r0, r2
   1e3a8:	bne	1e46c <main@@Base+0x86dc>
   1e3ac:	mov	r0, r5
   1e3b0:	mov	r1, r7
   1e3b4:	mov	r2, r4
   1e3b8:	mov	r3, #6
   1e3bc:	bl	196a4 <main@@Base+0x3914>
   1e3c0:	mov	r1, r0
   1e3c4:	cmp	r7, r0
   1e3c8:	beq	1e478 <main@@Base+0x86e8>
   1e3cc:	ldr	r0, [sp, #28]
   1e3d0:	mov	r2, #1
   1e3d4:	str	r2, [sp]
   1e3d8:	str	r0, [sp, #4]
   1e3dc:	movw	r0, #62316	; 0xf36c
   1e3e0:	movt	r0, #1
   1e3e4:	str	r0, [sp, #8]
   1e3e8:	mov	r0, r5
   1e3ec:	mov	r2, r4
   1e3f0:	mov	r3, #0
   1e3f4:	bl	27a98 <flatcc_json_parser_union@@Base>
   1e3f8:	b	1e484 <main@@Base+0x86f4>
   1e3fc:	and	r0, r1, #-16777216	; 0xff000000
   1e400:	teq	r0, #1795162112	; 0x6b000000
   1e404:	bne	1de50 <main@@Base+0x80c0>
   1e408:	mov	r0, r5
   1e40c:	mov	r1, r6
   1e410:	mov	r2, r4
   1e414:	mov	r3, #1
   1e418:	bl	196a4 <main@@Base+0x3914>
   1e41c:	mov	r1, r0
   1e420:	cmp	r6, r0
   1e424:	beq	1e458 <main@@Base+0x86c8>
   1e428:	ldr	r0, [sp, #28]
   1e42c:	mov	r2, #5
   1e430:	str	r2, [sp]
   1e434:	str	r0, [sp, #4]
   1e438:	movw	r0, #62316	; 0xf36c
   1e43c:	movt	r0, #1
   1e440:	str	r0, [sp, #8]
   1e444:	mov	r0, r5
   1e448:	mov	r2, r4
   1e44c:	mov	r3, #2
   1e450:	bl	27a98 <flatcc_json_parser_union@@Base>
   1e454:	b	1de60 <main@@Base+0x80d0>
   1e458:	mov	r0, r5
   1e45c:	b	1de58 <main@@Base+0x80c8>
   1e460:	mov	r0, r5
   1e464:	mov	r1, r6
   1e468:	b	1e47c <main@@Base+0x86ec>
   1e46c:	mov	r0, r5
   1e470:	mov	r1, r7
   1e474:	b	1e47c <main@@Base+0x86ec>
   1e478:	mov	r0, r5
   1e47c:	mov	r2, r4
   1e480:	bl	2669c <flatcc_json_parser_unmatched_symbol@@Base>
   1e484:	mov	r1, r0
   1e488:	movw	r9, #29797	; 0x7465
   1e48c:	movt	r9, #24931	; 0x6163
   1e490:	add	r7, sp, #32
   1e494:	b	1de64 <main@@Base+0x80d4>
   1e498:	ldr	r0, [r5, #20]
   1e49c:	cmp	r0, #0
   1e4a0:	bne	1ddac <main@@Base+0x801c>
   1e4a4:	ldr	r3, [sp, #28]
   1e4a8:	mov	r0, r5
   1e4ac:	mov	r1, r6
   1e4b0:	mov	r2, r4
   1e4b4:	bl	27a3c <flatcc_json_parser_finalize_unions@@Base>
   1e4b8:	mov	r6, r0
   1e4bc:	ldr	r0, [r5]
   1e4c0:	bl	22e50 <flatcc_builder_end_table@@Base>
   1e4c4:	ldr	r1, [sp, #20]
   1e4c8:	str	r0, [r1]
   1e4cc:	cmp	r0, #0
   1e4d0:	bne	1ddc4 <main@@Base+0x8034>
   1e4d4:	b	1ddac <main@@Base+0x801c>
   1e4d8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1e4dc:	add	fp, sp, #28
   1e4e0:	sub	sp, sp, #20
   1e4e4:	mov	r6, r3
   1e4e8:	mov	r4, r2
   1e4ec:	mov	r9, r1
   1e4f0:	mov	r5, r0
   1e4f4:	mov	r0, #0
   1e4f8:	str	r0, [r3]
   1e4fc:	ldr	r0, [r5]
   1e500:	mov	r1, #2
   1e504:	bl	22744 <flatcc_builder_start_table@@Base>
   1e508:	cmp	r0, #0
   1e50c:	bne	1e7dc <main@@Base+0x8a4c>
   1e510:	str	r6, [sp, #4]
   1e514:	add	r3, sp, #16
   1e518:	mov	r0, r5
   1e51c:	mov	r1, r9
   1e520:	mov	r2, r4
   1e524:	bl	195e8 <main@@Base+0x3858>
   1e528:	mov	r9, r0
   1e52c:	ldr	r0, [sp, #16]
   1e530:	cmp	r0, #0
   1e534:	beq	1e7d0 <main@@Base+0x8a40>
   1e538:	movw	sl, #24929	; 0x6161
   1e53c:	movt	sl, #24929	; 0x6161
   1e540:	movw	r7, #25186	; 0x6262
   1e544:	movt	r7, #24418	; 0x5f62
   1e548:	add	r8, sp, #16
   1e54c:	b	1e588 <main@@Base+0x87f8>
   1e550:	mov	r0, r5
   1e554:	mov	r1, r6
   1e558:	mov	r2, r4
   1e55c:	bl	2669c <flatcc_json_parser_unmatched_symbol@@Base>
   1e560:	mov	r9, r0
   1e564:	mov	r0, r5
   1e568:	mov	r1, r9
   1e56c:	mov	r2, r4
   1e570:	mov	r3, r8
   1e574:	bl	1c5b0 <main@@Base+0x6820>
   1e578:	mov	r9, r0
   1e57c:	ldr	r0, [sp, #16]
   1e580:	cmp	r0, #0
   1e584:	beq	1e7d0 <main@@Base+0x8a40>
   1e588:	mov	r0, r5
   1e58c:	mov	r1, r9
   1e590:	mov	r2, r4
   1e594:	bl	19678 <main@@Base+0x38e8>
   1e598:	mov	r6, r0
   1e59c:	mov	r1, r4
   1e5a0:	bl	196a0 <main@@Base+0x3910>
   1e5a4:	eor	r1, r1, sl
   1e5a8:	eor	r0, r0, r7
   1e5ac:	orrs	r0, r0, r1
   1e5b0:	bne	1e550 <main@@Base+0x87c0>
   1e5b4:	add	r6, r6, #8
   1e5b8:	mov	r0, r6
   1e5bc:	mov	r1, r4
   1e5c0:	bl	196a0 <main@@Base+0x3910>
   1e5c4:	lsr	r2, r0, #8
   1e5c8:	orr	r2, r2, r1, lsl #24
   1e5cc:	movw	r3, #28787	; 0x7073
   1e5d0:	movt	r3, #29797	; 0x7465
   1e5d4:	eor	r2, r2, r3
   1e5d8:	movw	r3, #24435	; 0x5f73
   1e5dc:	movt	r3, #98	; 0x62
   1e5e0:	eor	r3, r3, r1, lsr #8
   1e5e4:	orrs	r2, r2, r3
   1e5e8:	bne	1e644 <main@@Base+0x88b4>
   1e5ec:	mov	r0, r5
   1e5f0:	mov	r1, r6
   1e5f4:	mov	r2, r4
   1e5f8:	mov	r3, #7
   1e5fc:	bl	196a4 <main@@Base+0x3914>
   1e600:	mov	r7, r0
   1e604:	cmp	r6, r0
   1e608:	beq	1e6c0 <main@@Base+0x8930>
   1e60c:	mov	r0, #0
   1e610:	str	r0, [sp, #12]
   1e614:	str	r0, [sp, #8]
   1e618:	mov	r0, r5
   1e61c:	mov	r1, r7
   1e620:	mov	r2, r4
   1e624:	add	r9, sp, #8
   1e628:	mov	r3, r9
   1e62c:	bl	1bee8 <main@@Base+0x6158>
   1e630:	mov	r6, r0
   1e634:	cmp	r7, r0
   1e638:	beq	1e6d8 <main@@Base+0x8948>
   1e63c:	mov	r9, r6
   1e640:	b	1e704 <main@@Base+0x8974>
   1e644:	movw	r2, #29791	; 0x745f
   1e648:	movt	r2, #24946	; 0x6172
   1e64c:	eor	r0, r0, r2
   1e650:	movw	r2, #29556	; 0x7374
   1e654:	movt	r2, #25183	; 0x625f
   1e658:	eor	r1, r1, r2
   1e65c:	orrs	r0, r0, r1
   1e660:	bne	1e550 <main@@Base+0x87c0>
   1e664:	mov	r0, r5
   1e668:	mov	r1, r6
   1e66c:	mov	r2, r4
   1e670:	mov	r3, #8
   1e674:	bl	196a4 <main@@Base+0x3914>
   1e678:	mov	r7, r0
   1e67c:	cmp	r6, r0
   1e680:	beq	1e6c0 <main@@Base+0x8930>
   1e684:	mov	r0, #0
   1e688:	str	r0, [sp, #8]
   1e68c:	mov	r0, r5
   1e690:	mov	r1, r7
   1e694:	mov	r2, r4
   1e698:	add	r9, sp, #8
   1e69c:	mov	r3, r9
   1e6a0:	bl	1c0d0 <main@@Base+0x6340>
   1e6a4:	mov	r6, r0
   1e6a8:	cmp	r7, r0
   1e6ac:	beq	1e75c <main@@Base+0x89cc>
   1e6b0:	mov	r9, r6
   1e6b4:	movw	r7, #25186	; 0x6262
   1e6b8:	movt	r7, #24418	; 0x5f62
   1e6bc:	b	1e790 <main@@Base+0x8a00>
   1e6c0:	mov	r0, r5
   1e6c4:	mov	r1, r7
   1e6c8:	mov	r2, r4
   1e6cc:	bl	2669c <flatcc_json_parser_unmatched_symbol@@Base>
   1e6d0:	mov	r9, r0
   1e6d4:	b	1e750 <main@@Base+0x89c0>
   1e6d8:	str	r9, [sp]
   1e6dc:	mov	r0, r5
   1e6e0:	mov	r1, r6
   1e6e4:	mov	r2, r4
   1e6e8:	movw	r3, #33320	; 0x8228
   1e6ec:	movt	r3, #4
   1e6f0:	bl	1bf7c <main@@Base+0x61ec>
   1e6f4:	mov	r9, r0
   1e6f8:	cmp	r0, r6
   1e6fc:	cmpne	r9, r4
   1e700:	beq	1e7dc <main@@Base+0x8a4c>
   1e704:	mov	r7, sl
   1e708:	ldr	r6, [sp, #8]
   1e70c:	ldr	sl, [sp, #12]
   1e710:	orrs	r0, r6, sl
   1e714:	bne	1e724 <main@@Base+0x8994>
   1e718:	ldrb	r0, [r5, #8]
   1e71c:	tst	r0, #2
   1e720:	beq	1e74c <main@@Base+0x89bc>
   1e724:	ldr	r0, [r5]
   1e728:	mov	r1, #0
   1e72c:	mov	r2, #8
   1e730:	mov	r3, #8
   1e734:	bl	23540 <flatcc_builder_table_add@@Base>
   1e738:	cmp	r0, #0
   1e73c:	beq	1e7dc <main@@Base+0x8a4c>
   1e740:	mov	r2, r6
   1e744:	mov	r3, sl
   1e748:	bl	1c0a8 <main@@Base+0x6318>
   1e74c:	mov	sl, r7
   1e750:	movw	r7, #25186	; 0x6262
   1e754:	movt	r7, #24418	; 0x5f62
   1e758:	b	1e564 <main@@Base+0x87d4>
   1e75c:	str	r9, [sp]
   1e760:	mov	r0, r5
   1e764:	mov	r1, r6
   1e768:	mov	r2, r4
   1e76c:	movw	r3, #33332	; 0x8234
   1e770:	movt	r3, #4
   1e774:	bl	1c160 <main@@Base+0x63d0>
   1e778:	mov	r9, r0
   1e77c:	cmp	r0, r6
   1e780:	movw	r7, #25186	; 0x6262
   1e784:	movt	r7, #24418	; 0x5f62
   1e788:	cmpne	r9, r4
   1e78c:	beq	1e7dc <main@@Base+0x8a4c>
   1e790:	ldr	r6, [sp, #8]
   1e794:	cmp	r6, #0
   1e798:	bne	1e7a8 <main@@Base+0x8a18>
   1e79c:	ldrb	r0, [r5, #8]
   1e7a0:	tst	r0, #2
   1e7a4:	beq	1e564 <main@@Base+0x87d4>
   1e7a8:	ldr	r0, [r5]
   1e7ac:	mov	r1, #1
   1e7b0:	mov	r2, #4
   1e7b4:	mov	r3, #4
   1e7b8:	bl	23540 <flatcc_builder_table_add@@Base>
   1e7bc:	cmp	r0, #0
   1e7c0:	beq	1e7dc <main@@Base+0x8a4c>
   1e7c4:	mov	r1, r6
   1e7c8:	bl	1c27c <main@@Base+0x64ec>
   1e7cc:	b	1e564 <main@@Base+0x87d4>
   1e7d0:	ldr	r0, [r5, #20]
   1e7d4:	cmp	r0, #0
   1e7d8:	beq	1e800 <main@@Base+0x8a70>
   1e7dc:	mov	r0, r5
   1e7e0:	mov	r1, r9
   1e7e4:	mov	r2, r4
   1e7e8:	mov	r3, #33	; 0x21
   1e7ec:	bl	25fa0 <flatcc_json_parser_set_error@@Base>
   1e7f0:	mov	r9, r0
   1e7f4:	mov	r0, r9
   1e7f8:	sub	sp, fp, #28
   1e7fc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1e800:	ldr	r0, [r5]
   1e804:	bl	22e50 <flatcc_builder_end_table@@Base>
   1e808:	ldr	r1, [sp, #4]
   1e80c:	str	r0, [r1]
   1e810:	cmp	r0, #0
   1e814:	bne	1e7f4 <main@@Base+0x8a64>
   1e818:	b	1e7dc <main@@Base+0x8a4c>
   1e81c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1e820:	add	fp, sp, #28
   1e824:	sub	sp, sp, #44	; 0x2c
   1e828:	mov	r5, r3
   1e82c:	mov	r4, r2
   1e830:	mov	r8, r1
   1e834:	mov	sl, r0
   1e838:	mov	r0, #0
   1e83c:	str	r0, [r3]
   1e840:	ldr	r0, [sl]
   1e844:	mov	r1, #9
   1e848:	bl	22744 <flatcc_builder_start_table@@Base>
   1e84c:	cmp	r0, #0
   1e850:	beq	1e878 <main@@Base+0x8ae8>
   1e854:	mov	r0, sl
   1e858:	mov	r1, r8
   1e85c:	mov	r2, r4
   1e860:	mov	r3, #33	; 0x21
   1e864:	bl	25fa0 <flatcc_json_parser_set_error@@Base>
   1e868:	mov	r8, r0
   1e86c:	mov	r0, r8
   1e870:	sub	sp, fp, #28
   1e874:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1e878:	str	r5, [sp, #8]
   1e87c:	sub	r3, fp, #32
   1e880:	mov	r0, sl
   1e884:	mov	r1, r8
   1e888:	mov	r2, r4
   1e88c:	bl	195e8 <main@@Base+0x3858>
   1e890:	mov	r8, r0
   1e894:	ldr	r0, [fp, #-32]	; 0xffffffe0
   1e898:	cmp	r0, #0
   1e89c:	beq	1ef48 <main@@Base+0x91b8>
   1e8a0:	movw	r1, #24929	; 0x6161
   1e8a4:	movt	r1, #24929	; 0x6161
   1e8a8:	add	r9, sp, #24
   1e8ac:	movw	r0, #257	; 0x101
   1e8b0:	movt	r0, #257	; 0x101
   1e8b4:	add	r0, r1, r0
   1e8b8:	str	r0, [sp, #16]
   1e8bc:	movw	r0, #514	; 0x202
   1e8c0:	movt	r0, #514	; 0x202
   1e8c4:	add	r0, r1, r0
   1e8c8:	str	r0, [sp, #20]
   1e8cc:	movw	r0, #771	; 0x303
   1e8d0:	movt	r0, #771	; 0x303
   1e8d4:	add	r0, r1, r0
   1e8d8:	str	r0, [sp, #12]
   1e8dc:	b	1e918 <main@@Base+0x8b88>
   1e8e0:	mov	r0, sl
   1e8e4:	mov	r1, r6
   1e8e8:	mov	r2, r4
   1e8ec:	bl	2669c <flatcc_json_parser_unmatched_symbol@@Base>
   1e8f0:	mov	r8, r0
   1e8f4:	mov	r0, sl
   1e8f8:	mov	r1, r8
   1e8fc:	mov	r2, r4
   1e900:	sub	r3, fp, #32
   1e904:	bl	1c5b0 <main@@Base+0x6820>
   1e908:	mov	r8, r0
   1e90c:	ldr	r0, [fp, #-32]	; 0xffffffe0
   1e910:	cmp	r0, #0
   1e914:	beq	1ef48 <main@@Base+0x91b8>
   1e918:	mov	r0, sl
   1e91c:	mov	r1, r8
   1e920:	mov	r2, r4
   1e924:	bl	19678 <main@@Base+0x38e8>
   1e928:	mov	r7, r0
   1e92c:	mov	r1, r4
   1e930:	bl	196a0 <main@@Base+0x3910>
   1e934:	mov	r6, r1
   1e938:	movw	r1, #25442	; 0x6362
   1e93c:	movt	r1, #25443	; 0x6363
   1e940:	cmp	r6, r1
   1e944:	bhi	1e9d4 <main@@Base+0x8c44>
   1e948:	movw	r1, #13108	; 0x3334
   1e94c:	movt	r1, #12594	; 0x3132
   1e950:	eor	r5, r0, r1
   1e954:	movw	r1, #24929	; 0x6161
   1e958:	movt	r1, #24929	; 0x6161
   1e95c:	eor	r0, r6, r1
   1e960:	orrs	r0, r5, r0
   1e964:	bne	1ea44 <main@@Base+0x8cb4>
   1e968:	add	r6, r7, #8
   1e96c:	mov	r0, r6
   1e970:	mov	r1, r4
   1e974:	bl	196a0 <main@@Base+0x3910>
   1e978:	and	r0, r1, #-16777216	; 0xff000000
   1e97c:	teq	r0, #889192448	; 0x35000000
   1e980:	bne	1e8e0 <main@@Base+0x8b50>
   1e984:	mov	r0, sl
   1e988:	mov	r1, r6
   1e98c:	mov	r2, r4
   1e990:	mov	r3, #1
   1e994:	bl	196a4 <main@@Base+0x3914>
   1e998:	mov	r7, r0
   1e99c:	cmp	r6, r0
   1e9a0:	beq	1ed60 <main@@Base+0x8fd0>
   1e9a4:	mov	r0, #0
   1e9a8:	str	r0, [sp, #24]
   1e9ac:	mov	r0, sl
   1e9b0:	mov	r1, r7
   1e9b4:	mov	r2, r4
   1e9b8:	mov	r3, r9
   1e9bc:	bl	1c0d0 <main@@Base+0x6340>
   1e9c0:	mov	r6, r0
   1e9c4:	cmp	r7, r0
   1e9c8:	beq	1ed6c <main@@Base+0x8fdc>
   1e9cc:	mov	r8, r6
   1e9d0:	b	1ed98 <main@@Base+0x9008>
   1e9d4:	movw	r1, #13108	; 0x3334
   1e9d8:	movt	r1, #12594	; 0x3132
   1e9dc:	eor	r5, r0, r1
   1e9e0:	ldr	r0, [sp, #20]
   1e9e4:	eor	r0, r6, r0
   1e9e8:	orrs	r0, r5, r0
   1e9ec:	bne	1ea98 <main@@Base+0x8d08>
   1e9f0:	mov	r0, sl
   1e9f4:	mov	r1, r7
   1e9f8:	mov	r2, r4
   1e9fc:	mov	r3, #8
   1ea00:	bl	196a4 <main@@Base+0x3914>
   1ea04:	mov	r6, r0
   1ea08:	cmp	r7, r0
   1ea0c:	beq	1eaf4 <main@@Base+0x8d64>
   1ea10:	mov	r0, #0
   1ea14:	str	r0, [sp, #28]
   1ea18:	str	r0, [sp, #24]
   1ea1c:	mov	r0, sl
   1ea20:	mov	r1, r6
   1ea24:	mov	r2, r4
   1ea28:	mov	r3, r9
   1ea2c:	bl	1bee8 <main@@Base+0x6158>
   1ea30:	mov	r7, r0
   1ea34:	cmp	r6, r0
   1ea38:	beq	1eb60 <main@@Base+0x8dd0>
   1ea3c:	mov	r8, r7
   1ea40:	b	1eb8c <main@@Base+0x8dfc>
   1ea44:	teq	r6, r1
   1ea48:	bne	1ebb8 <main@@Base+0x8e28>
   1ea4c:	mov	r0, sl
   1ea50:	mov	r1, r7
   1ea54:	mov	r2, r4
   1ea58:	mov	r3, #4
   1ea5c:	bl	196a4 <main@@Base+0x3914>
   1ea60:	mov	r1, r0
   1ea64:	cmp	r7, r0
   1ea68:	beq	1ebb4 <main@@Base+0x8e24>
   1ea6c:	mov	r0, sl
   1ea70:	mov	r2, r4
   1ea74:	add	r3, sp, #36	; 0x24
   1ea78:	bl	2787c <flatcc_json_parser_build_string@@Base>
   1ea7c:	mov	r8, r0
   1ea80:	ldr	r0, [sp, #36]	; 0x24
   1ea84:	cmp	r0, #0
   1ea88:	beq	1e854 <main@@Base+0x8ac4>
   1ea8c:	ldr	r0, [sl]
   1ea90:	mov	r1, #0
   1ea94:	b	1ec74 <main@@Base+0x8ee4>
   1ea98:	movw	r0, #25443	; 0x6363
   1ea9c:	movt	r0, #25443	; 0x6363
   1eaa0:	teq	r6, r0
   1eaa4:	bne	1ec90 <main@@Base+0x8f00>
   1eaa8:	mov	r0, sl
   1eaac:	mov	r1, r7
   1eab0:	mov	r2, r4
   1eab4:	mov	r3, #4
   1eab8:	bl	196a4 <main@@Base+0x3914>
   1eabc:	mov	r1, r0
   1eac0:	cmp	r7, r0
   1eac4:	beq	1ec8c <main@@Base+0x8efc>
   1eac8:	mov	r0, sl
   1eacc:	mov	r2, r4
   1ead0:	add	r3, sp, #36	; 0x24
   1ead4:	bl	2787c <flatcc_json_parser_build_string@@Base>
   1ead8:	mov	r8, r0
   1eadc:	ldr	r0, [sp, #36]	; 0x24
   1eae0:	cmp	r0, #0
   1eae4:	beq	1e854 <main@@Base+0x8ac4>
   1eae8:	ldr	r0, [sl]
   1eaec:	mov	r1, #4
   1eaf0:	b	1ec74 <main@@Base+0x8ee4>
   1eaf4:	add	r6, r6, #8
   1eaf8:	mov	r0, r6
   1eafc:	mov	r1, r4
   1eb00:	bl	196a0 <main@@Base+0x3910>
   1eb04:	and	r0, r1, #-16777216	; 0xff000000
   1eb08:	teq	r0, #889192448	; 0x35000000
   1eb0c:	bne	1e8e0 <main@@Base+0x8b50>
   1eb10:	mov	r0, sl
   1eb14:	mov	r1, r6
   1eb18:	mov	r2, r4
   1eb1c:	mov	r3, #1
   1eb20:	bl	196a4 <main@@Base+0x3914>
   1eb24:	mov	r7, r0
   1eb28:	cmp	r6, r0
   1eb2c:	beq	1ed60 <main@@Base+0x8fd0>
   1eb30:	mov	r0, #0
   1eb34:	str	r0, [sp, #24]
   1eb38:	mov	r0, sl
   1eb3c:	mov	r1, r7
   1eb40:	mov	r2, r4
   1eb44:	mov	r3, r9
   1eb48:	bl	1c0d0 <main@@Base+0x6340>
   1eb4c:	mov	r6, r0
   1eb50:	cmp	r7, r0
   1eb54:	beq	1ee8c <main@@Base+0x90fc>
   1eb58:	mov	r8, r6
   1eb5c:	b	1eeb8 <main@@Base+0x9128>
   1eb60:	str	r9, [sp]
   1eb64:	mov	r0, sl
   1eb68:	mov	r1, r7
   1eb6c:	mov	r2, r4
   1eb70:	movw	r3, #33368	; 0x8258
   1eb74:	movt	r3, #4
   1eb78:	bl	1bf7c <main@@Base+0x61ec>
   1eb7c:	mov	r8, r0
   1eb80:	cmp	r0, r7
   1eb84:	cmpne	r8, r4
   1eb88:	beq	1e854 <main@@Base+0x8ac4>
   1eb8c:	ldr	r6, [sp, #24]
   1eb90:	ldr	r7, [sp, #28]
   1eb94:	orrs	r0, r6, r7
   1eb98:	bne	1eba8 <main@@Base+0x8e18>
   1eb9c:	ldrb	r0, [sl, #8]
   1eba0:	tst	r0, #2
   1eba4:	beq	1e8f4 <main@@Base+0x8b64>
   1eba8:	ldr	r0, [sl]
   1ebac:	mov	r1, #5
   1ebb0:	b	1ee60 <main@@Base+0x90d0>
   1ebb4:	mov	r7, r1
   1ebb8:	ldr	r0, [sp, #16]
   1ebbc:	eor	r0, r6, r0
   1ebc0:	orrs	r0, r5, r0
   1ebc4:	bne	1ec1c <main@@Base+0x8e8c>
   1ebc8:	mov	r0, sl
   1ebcc:	mov	r1, r7
   1ebd0:	mov	r2, r4
   1ebd4:	mov	r3, #8
   1ebd8:	bl	196a4 <main@@Base+0x3914>
   1ebdc:	mov	r6, r0
   1ebe0:	cmp	r7, r0
   1ebe4:	beq	1e8e0 <main@@Base+0x8b50>
   1ebe8:	mov	r0, #0
   1ebec:	str	r0, [sp, #28]
   1ebf0:	str	r0, [sp, #24]
   1ebf4:	mov	r0, sl
   1ebf8:	mov	r1, r6
   1ebfc:	mov	r2, r4
   1ec00:	mov	r3, r9
   1ec04:	bl	1bee8 <main@@Base+0x6158>
   1ec08:	mov	r7, r0
   1ec0c:	cmp	r6, r0
   1ec10:	beq	1edbc <main@@Base+0x902c>
   1ec14:	mov	r8, r7
   1ec18:	b	1ede8 <main@@Base+0x9058>
   1ec1c:	movw	r0, #25186	; 0x6262
   1ec20:	movt	r0, #25186	; 0x6262
   1ec24:	teq	r6, r0
   1ec28:	bne	1ed60 <main@@Base+0x8fd0>
   1ec2c:	mov	r0, sl
   1ec30:	mov	r1, r7
   1ec34:	mov	r2, r4
   1ec38:	mov	r3, #4
   1ec3c:	bl	196a4 <main@@Base+0x3914>
   1ec40:	mov	r1, r0
   1ec44:	cmp	r7, r0
   1ec48:	beq	1ee84 <main@@Base+0x90f4>
   1ec4c:	mov	r0, sl
   1ec50:	mov	r2, r4
   1ec54:	add	r3, sp, #36	; 0x24
   1ec58:	bl	2787c <flatcc_json_parser_build_string@@Base>
   1ec5c:	mov	r8, r0
   1ec60:	ldr	r0, [sp, #36]	; 0x24
   1ec64:	cmp	r0, #0
   1ec68:	beq	1e854 <main@@Base+0x8ac4>
   1ec6c:	ldr	r0, [sl]
   1ec70:	mov	r1, #2
   1ec74:	bl	2347c <flatcc_builder_table_add_offset@@Base>
   1ec78:	cmp	r0, #0
   1ec7c:	beq	1e854 <main@@Base+0x8ac4>
   1ec80:	ldr	r1, [sp, #36]	; 0x24
   1ec84:	str	r1, [r0]
   1ec88:	b	1e8f4 <main@@Base+0x8b64>
   1ec8c:	mov	r7, r1
   1ec90:	ldr	r0, [sp, #12]
   1ec94:	eor	r0, r6, r0
   1ec98:	orrs	r0, r5, r0
   1ec9c:	bne	1ed60 <main@@Base+0x8fd0>
   1eca0:	mov	r0, sl
   1eca4:	mov	r1, r7
   1eca8:	mov	r2, r4
   1ecac:	mov	r3, #8
   1ecb0:	bl	196a4 <main@@Base+0x3914>
   1ecb4:	mov	r6, r0
   1ecb8:	cmp	r7, r0
   1ecbc:	beq	1ecf4 <main@@Base+0x8f64>
   1ecc0:	mov	r0, #0
   1ecc4:	str	r0, [sp, #28]
   1ecc8:	str	r0, [sp, #24]
   1eccc:	mov	r0, sl
   1ecd0:	mov	r1, r6
   1ecd4:	mov	r2, r4
   1ecd8:	mov	r3, r9
   1ecdc:	bl	1bee8 <main@@Base+0x6158>
   1ece0:	mov	r7, r0
   1ece4:	cmp	r6, r0
   1ece8:	beq	1ee10 <main@@Base+0x9080>
   1ecec:	mov	r8, r7
   1ecf0:	b	1ee3c <main@@Base+0x90ac>
   1ecf4:	add	r6, r6, #8
   1ecf8:	mov	r0, r6
   1ecfc:	mov	r1, r4
   1ed00:	bl	196a0 <main@@Base+0x3910>
   1ed04:	and	r0, r1, #-16777216	; 0xff000000
   1ed08:	teq	r0, #889192448	; 0x35000000
   1ed0c:	bne	1e8e0 <main@@Base+0x8b50>
   1ed10:	mov	r0, sl
   1ed14:	mov	r1, r6
   1ed18:	mov	r2, r4
   1ed1c:	mov	r3, #1
   1ed20:	bl	196a4 <main@@Base+0x3914>
   1ed24:	mov	r7, r0
   1ed28:	cmp	r6, r0
   1ed2c:	beq	1ed60 <main@@Base+0x8fd0>
   1ed30:	mov	r0, #0
   1ed34:	str	r0, [sp, #24]
   1ed38:	mov	r0, sl
   1ed3c:	mov	r1, r7
   1ed40:	mov	r2, r4
   1ed44:	mov	r3, r9
   1ed48:	bl	1c0d0 <main@@Base+0x6340>
   1ed4c:	mov	r6, r0
   1ed50:	cmp	r7, r0
   1ed54:	beq	1eedc <main@@Base+0x914c>
   1ed58:	mov	r8, r6
   1ed5c:	b	1ef08 <main@@Base+0x9178>
   1ed60:	mov	r0, sl
   1ed64:	mov	r1, r7
   1ed68:	b	1e8e8 <main@@Base+0x8b58>
   1ed6c:	str	r9, [sp]
   1ed70:	mov	r0, sl
   1ed74:	mov	r1, r6
   1ed78:	mov	r2, r4
   1ed7c:	movw	r3, #33344	; 0x8240
   1ed80:	movt	r3, #4
   1ed84:	bl	1c160 <main@@Base+0x63d0>
   1ed88:	mov	r8, r0
   1ed8c:	cmp	r0, r6
   1ed90:	cmpne	r8, r4
   1ed94:	beq	1e854 <main@@Base+0x8ac4>
   1ed98:	ldr	r6, [sp, #24]
   1ed9c:	cmp	r6, #0
   1eda0:	bne	1edb0 <main@@Base+0x9020>
   1eda4:	ldrb	r0, [sl, #8]
   1eda8:	tst	r0, #2
   1edac:	beq	1e8f4 <main@@Base+0x8b64>
   1edb0:	ldr	r0, [sl]
   1edb4:	mov	r1, #1
   1edb8:	b	1ef28 <main@@Base+0x9198>
   1edbc:	str	r9, [sp]
   1edc0:	mov	r0, sl
   1edc4:	mov	r1, r7
   1edc8:	mov	r2, r4
   1edcc:	movw	r3, #33356	; 0x824c
   1edd0:	movt	r3, #4
   1edd4:	bl	1bf7c <main@@Base+0x61ec>
   1edd8:	mov	r8, r0
   1eddc:	cmp	r0, r7
   1ede0:	cmpne	r8, r4
   1ede4:	beq	1e854 <main@@Base+0x8ac4>
   1ede8:	ldr	r6, [sp, #24]
   1edec:	ldr	r7, [sp, #28]
   1edf0:	orrs	r0, r6, r7
   1edf4:	bne	1ee04 <main@@Base+0x9074>
   1edf8:	ldrb	r0, [sl, #8]
   1edfc:	tst	r0, #2
   1ee00:	beq	1e8f4 <main@@Base+0x8b64>
   1ee04:	ldr	r0, [sl]
   1ee08:	mov	r1, #3
   1ee0c:	b	1ee60 <main@@Base+0x90d0>
   1ee10:	str	r9, [sp]
   1ee14:	mov	r0, sl
   1ee18:	mov	r1, r7
   1ee1c:	mov	r2, r4
   1ee20:	movw	r3, #33392	; 0x8270
   1ee24:	movt	r3, #4
   1ee28:	bl	1bf7c <main@@Base+0x61ec>
   1ee2c:	mov	r8, r0
   1ee30:	cmp	r0, r7
   1ee34:	cmpne	r8, r4
   1ee38:	beq	1e854 <main@@Base+0x8ac4>
   1ee3c:	ldr	r6, [sp, #24]
   1ee40:	ldr	r7, [sp, #28]
   1ee44:	orrs	r0, r6, r7
   1ee48:	bne	1ee58 <main@@Base+0x90c8>
   1ee4c:	ldrb	r0, [sl, #8]
   1ee50:	tst	r0, #2
   1ee54:	beq	1e8f4 <main@@Base+0x8b64>
   1ee58:	ldr	r0, [sl]
   1ee5c:	mov	r1, #7
   1ee60:	mov	r2, #8
   1ee64:	mov	r3, #8
   1ee68:	bl	23540 <flatcc_builder_table_add@@Base>
   1ee6c:	cmp	r0, #0
   1ee70:	beq	1e854 <main@@Base+0x8ac4>
   1ee74:	mov	r2, r6
   1ee78:	mov	r3, r7
   1ee7c:	bl	1c0a8 <main@@Base+0x6318>
   1ee80:	b	1e8f4 <main@@Base+0x8b64>
   1ee84:	mov	r0, sl
   1ee88:	b	1e8e8 <main@@Base+0x8b58>
   1ee8c:	str	r9, [sp]
   1ee90:	mov	r0, sl
   1ee94:	mov	r1, r6
   1ee98:	mov	r2, r4
   1ee9c:	movw	r3, #33380	; 0x8264
   1eea0:	movt	r3, #4
   1eea4:	bl	1c160 <main@@Base+0x63d0>
   1eea8:	mov	r8, r0
   1eeac:	cmp	r0, r6
   1eeb0:	cmpne	r8, r4
   1eeb4:	beq	1e854 <main@@Base+0x8ac4>
   1eeb8:	ldr	r6, [sp, #24]
   1eebc:	cmp	r6, #0
   1eec0:	bne	1eed0 <main@@Base+0x9140>
   1eec4:	ldrb	r0, [sl, #8]
   1eec8:	tst	r0, #2
   1eecc:	beq	1e8f4 <main@@Base+0x8b64>
   1eed0:	ldr	r0, [sl]
   1eed4:	mov	r1, #6
   1eed8:	b	1ef28 <main@@Base+0x9198>
   1eedc:	str	r9, [sp]
   1eee0:	mov	r0, sl
   1eee4:	mov	r1, r6
   1eee8:	mov	r2, r4
   1eeec:	movw	r3, #33404	; 0x827c
   1eef0:	movt	r3, #4
   1eef4:	bl	1c160 <main@@Base+0x63d0>
   1eef8:	mov	r8, r0
   1eefc:	cmp	r0, r6
   1ef00:	cmpne	r8, r4
   1ef04:	beq	1e854 <main@@Base+0x8ac4>
   1ef08:	ldr	r6, [sp, #24]
   1ef0c:	cmp	r6, #0
   1ef10:	bne	1ef20 <main@@Base+0x9190>
   1ef14:	ldrb	r0, [sl, #8]
   1ef18:	tst	r0, #2
   1ef1c:	beq	1e8f4 <main@@Base+0x8b64>
   1ef20:	ldr	r0, [sl]
   1ef24:	mov	r1, #8
   1ef28:	mov	r2, #4
   1ef2c:	mov	r3, #4
   1ef30:	bl	23540 <flatcc_builder_table_add@@Base>
   1ef34:	cmp	r0, #0
   1ef38:	beq	1e854 <main@@Base+0x8ac4>
   1ef3c:	mov	r1, r6
   1ef40:	bl	1c27c <main@@Base+0x64ec>
   1ef44:	b	1e8f4 <main@@Base+0x8b64>
   1ef48:	ldr	r0, [sl, #20]
   1ef4c:	cmp	r0, #0
   1ef50:	bne	1e854 <main@@Base+0x8ac4>
   1ef54:	ldr	r0, [sl]
   1ef58:	bl	22e50 <flatcc_builder_end_table@@Base>
   1ef5c:	ldr	r1, [sp, #8]
   1ef60:	str	r0, [r1]
   1ef64:	cmp	r0, #0
   1ef68:	bne	1e86c <main@@Base+0x8adc>
   1ef6c:	b	1e854 <main@@Base+0x8ac4>
   1ef70:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1ef74:	add	fp, sp, #28
   1ef78:	sub	sp, sp, #20
   1ef7c:	mov	r6, r3
   1ef80:	mov	r4, r2
   1ef84:	mov	r8, r1
   1ef88:	mov	r5, r0
   1ef8c:	mov	r0, #0
   1ef90:	str	r0, [r3]
   1ef94:	ldr	r0, [r5]
   1ef98:	mov	r1, #2
   1ef9c:	bl	22744 <flatcc_builder_start_table@@Base>
   1efa0:	cmp	r0, #0
   1efa4:	beq	1efcc <main@@Base+0x923c>
   1efa8:	mov	r0, r5
   1efac:	mov	r1, r8
   1efb0:	mov	r2, r4
   1efb4:	mov	r3, #33	; 0x21
   1efb8:	bl	25fa0 <flatcc_json_parser_set_error@@Base>
   1efbc:	mov	r8, r0
   1efc0:	mov	r0, r8
   1efc4:	sub	sp, fp, #28
   1efc8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1efcc:	str	r6, [sp, #4]
   1efd0:	add	r3, sp, #16
   1efd4:	mov	r0, r5
   1efd8:	mov	r1, r8
   1efdc:	mov	r2, r4
   1efe0:	bl	195e8 <main@@Base+0x3858>
   1efe4:	mov	r8, r0
   1efe8:	ldr	r0, [sp, #16]
   1efec:	cmp	r0, #0
   1eff0:	beq	1f2ac <main@@Base+0x951c>
   1eff4:	movw	r9, #24929	; 0x6161
   1eff8:	movt	r9, #24929	; 0x6161
   1effc:	movw	sl, #25186	; 0x6262
   1f000:	movt	sl, #24418	; 0x5f62
   1f004:	add	r6, sp, #16
   1f008:	b	1f044 <main@@Base+0x92b4>
   1f00c:	mov	r0, r5
   1f010:	mov	r1, r7
   1f014:	mov	r2, r4
   1f018:	bl	2669c <flatcc_json_parser_unmatched_symbol@@Base>
   1f01c:	mov	r8, r0
   1f020:	mov	r0, r5
   1f024:	mov	r1, r8
   1f028:	mov	r2, r4
   1f02c:	mov	r3, r6
   1f030:	bl	1c5b0 <main@@Base+0x6820>
   1f034:	mov	r8, r0
   1f038:	ldr	r0, [sp, #16]
   1f03c:	cmp	r0, #0
   1f040:	beq	1f2ac <main@@Base+0x951c>
   1f044:	mov	r0, r5
   1f048:	mov	r1, r8
   1f04c:	mov	r2, r4
   1f050:	bl	19678 <main@@Base+0x38e8>
   1f054:	mov	r7, r0
   1f058:	mov	r1, r4
   1f05c:	bl	196a0 <main@@Base+0x3910>
   1f060:	eor	r1, r1, r9
   1f064:	eor	r0, r0, sl
   1f068:	orrs	r0, r0, r1
   1f06c:	bne	1f00c <main@@Base+0x927c>
   1f070:	add	r6, r7, #8
   1f074:	mov	r0, r6
   1f078:	mov	r1, r4
   1f07c:	bl	196a0 <main@@Base+0x3910>
   1f080:	movw	r2, #29556	; 0x7374
   1f084:	movt	r2, #25183	; 0x625f
   1f088:	eor	r2, r1, r2
   1f08c:	movw	r3, #29791	; 0x745f
   1f090:	movt	r3, #24946	; 0x6172
   1f094:	eor	r3, r0, r3
   1f098:	orrs	r2, r3, r2
   1f09c:	bne	1f120 <main@@Base+0x9390>
   1f0a0:	add	r6, r7, #16
   1f0a4:	mov	r0, r6
   1f0a8:	mov	r1, r4
   1f0ac:	bl	196a0 <main@@Base+0x3910>
   1f0b0:	movw	r2, #25968	; 0x6570
   1f0b4:	movt	r2, #29556	; 0x7374
   1f0b8:	eor	r1, r1, r2
   1f0bc:	and	r0, r0, #-16777216	; 0xff000000
   1f0c0:	eor	r0, r0, #1929379840	; 0x73000000
   1f0c4:	orrs	r0, r0, r1
   1f0c8:	bne	1f1a0 <main@@Base+0x9410>
   1f0cc:	mov	r0, r5
   1f0d0:	mov	r1, r6
   1f0d4:	mov	r2, r4
   1f0d8:	mov	r3, #5
   1f0dc:	bl	196a4 <main@@Base+0x3914>
   1f0e0:	mov	r7, r0
   1f0e4:	cmp	r6, r0
   1f0e8:	add	r8, sp, #8
   1f0ec:	beq	1f1ac <main@@Base+0x941c>
   1f0f0:	mov	r0, #0
   1f0f4:	str	r0, [sp, #8]
   1f0f8:	mov	r0, r5
   1f0fc:	mov	r1, r7
   1f100:	mov	r2, r4
   1f104:	mov	r3, r8
   1f108:	bl	1c0d0 <main@@Base+0x6340>
   1f10c:	mov	r6, r0
   1f110:	cmp	r7, r0
   1f114:	beq	1f1c8 <main@@Base+0x9438>
   1f118:	mov	r8, r6
   1f11c:	b	1f1f4 <main@@Base+0x9464>
   1f120:	movw	r2, #24435	; 0x5f73
   1f124:	movt	r2, #98	; 0x62
   1f128:	eor	r2, r2, r1, lsr #8
   1f12c:	lsr	r0, r0, #8
   1f130:	orr	r0, r0, r1, lsl #24
   1f134:	movw	r1, #28787	; 0x7073
   1f138:	movt	r1, #29797	; 0x7465
   1f13c:	eor	r0, r0, r1
   1f140:	orrs	r0, r0, r2
   1f144:	bne	1f1a0 <main@@Base+0x9410>
   1f148:	mov	r0, r5
   1f14c:	mov	r1, r6
   1f150:	mov	r2, r4
   1f154:	mov	r3, #7
   1f158:	bl	196a4 <main@@Base+0x3914>
   1f15c:	mov	r7, r0
   1f160:	cmp	r6, r0
   1f164:	add	r8, sp, #8
   1f168:	beq	1f1ac <main@@Base+0x941c>
   1f16c:	mov	r0, #0
   1f170:	str	r0, [sp, #12]
   1f174:	str	r0, [sp, #8]
   1f178:	mov	r0, r5
   1f17c:	mov	r1, r7
   1f180:	mov	r2, r4
   1f184:	mov	r3, r8
   1f188:	bl	1bee8 <main@@Base+0x6158>
   1f18c:	mov	r6, r0
   1f190:	cmp	r7, r0
   1f194:	beq	1f234 <main@@Base+0x94a4>
   1f198:	mov	r8, r6
   1f19c:	b	1f260 <main@@Base+0x94d0>
   1f1a0:	mov	r0, r5
   1f1a4:	mov	r1, r6
   1f1a8:	b	1f1b4 <main@@Base+0x9424>
   1f1ac:	mov	r0, r5
   1f1b0:	mov	r1, r7
   1f1b4:	mov	r2, r4
   1f1b8:	bl	2669c <flatcc_json_parser_unmatched_symbol@@Base>
   1f1bc:	mov	r8, r0
   1f1c0:	add	r6, sp, #16
   1f1c4:	b	1f020 <main@@Base+0x9290>
   1f1c8:	str	r8, [sp]
   1f1cc:	mov	r0, r5
   1f1d0:	mov	r1, r6
   1f1d4:	mov	r2, r4
   1f1d8:	movw	r3, #33416	; 0x8288
   1f1dc:	movt	r3, #4
   1f1e0:	bl	1c160 <main@@Base+0x63d0>
   1f1e4:	mov	r8, r0
   1f1e8:	cmp	r0, r6
   1f1ec:	cmpne	r8, r4
   1f1f0:	beq	1efa8 <main@@Base+0x9218>
   1f1f4:	ldr	r6, [sp, #8]
   1f1f8:	cmp	r6, #0
   1f1fc:	bne	1f20c <main@@Base+0x947c>
   1f200:	ldrb	r0, [r5, #8]
   1f204:	tst	r0, #2
   1f208:	beq	1f2a4 <main@@Base+0x9514>
   1f20c:	ldr	r0, [r5]
   1f210:	mov	r1, #1
   1f214:	mov	r2, #4
   1f218:	mov	r3, #4
   1f21c:	bl	23540 <flatcc_builder_table_add@@Base>
   1f220:	cmp	r0, #0
   1f224:	beq	1efa8 <main@@Base+0x9218>
   1f228:	mov	r1, r6
   1f22c:	bl	1c27c <main@@Base+0x64ec>
   1f230:	b	1f2a4 <main@@Base+0x9514>
   1f234:	str	r8, [sp]
   1f238:	mov	r0, r5
   1f23c:	mov	r1, r6
   1f240:	mov	r2, r4
   1f244:	movw	r3, #33428	; 0x8294
   1f248:	movt	r3, #4
   1f24c:	bl	1bf7c <main@@Base+0x61ec>
   1f250:	mov	r8, r0
   1f254:	cmp	r0, r6
   1f258:	cmpne	r8, r4
   1f25c:	beq	1efa8 <main@@Base+0x9218>
   1f260:	ldr	r6, [sp, #8]
   1f264:	ldr	r7, [sp, #12]
   1f268:	orrs	r0, r6, r7
   1f26c:	bne	1f27c <main@@Base+0x94ec>
   1f270:	ldrb	r0, [r5, #8]
   1f274:	tst	r0, #2
   1f278:	beq	1f2a4 <main@@Base+0x9514>
   1f27c:	ldr	r0, [r5]
   1f280:	mov	r1, #0
   1f284:	mov	r2, #8
   1f288:	mov	r3, #8
   1f28c:	bl	23540 <flatcc_builder_table_add@@Base>
   1f290:	cmp	r0, #0
   1f294:	beq	1efa8 <main@@Base+0x9218>
   1f298:	mov	r2, r6
   1f29c:	mov	r3, r7
   1f2a0:	bl	1c0a8 <main@@Base+0x6318>
   1f2a4:	add	r6, sp, #16
   1f2a8:	b	1f020 <main@@Base+0x9290>
   1f2ac:	ldr	r0, [r5, #20]
   1f2b0:	cmp	r0, #0
   1f2b4:	bne	1efa8 <main@@Base+0x9218>
   1f2b8:	ldr	r0, [r5]
   1f2bc:	bl	22e50 <flatcc_builder_end_table@@Base>
   1f2c0:	ldr	r1, [sp, #4]
   1f2c4:	str	r0, [r1]
   1f2c8:	cmp	r0, #0
   1f2cc:	bne	1efc0 <main@@Base+0x9230>
   1f2d0:	b	1efa8 <main@@Base+0x9218>
   1f2d4:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   1f2d8:	add	fp, sp, #24
   1f2dc:	mov	r8, r3
   1f2e0:	mov	r5, r2
   1f2e4:	mov	r7, r1
   1f2e8:	mov	r6, r0
   1f2ec:	mov	r0, r1
   1f2f0:	mov	r1, r2
   1f2f4:	bl	196a0 <main@@Base+0x3910>
   1f2f8:	movw	r2, #24946	; 0x6172
   1f2fc:	movt	r2, #17256	; 0x4368
   1f300:	eor	r1, r1, r2
   1f304:	movw	r2, #29797	; 0x7465
   1f308:	movt	r2, #24931	; 0x6163
   1f30c:	eor	r0, r0, r2
   1f310:	orrs	r0, r0, r1
   1f314:	bne	1f364 <main@@Base+0x95d4>
   1f318:	add	r4, r7, #8
   1f31c:	mov	r0, r4
   1f320:	mov	r1, r5
   1f324:	bl	196a0 <main@@Base+0x3910>
   1f328:	and	r0, r1, #-16777216	; 0xff000000
   1f32c:	teq	r0, #1912602624	; 0x72000000
   1f330:	bne	1f364 <main@@Base+0x95d4>
   1f334:	mov	r0, r4
   1f338:	mov	r1, r5
   1f33c:	mov	r2, #1
   1f340:	bl	1c734 <main@@Base+0x69a4>
   1f344:	cmp	r0, r4
   1f348:	beq	1f364 <main@@Base+0x95d4>
   1f34c:	mov	r1, r0
   1f350:	mov	r0, r6
   1f354:	mov	r2, r5
   1f358:	mov	r3, r8
   1f35c:	pop	{r4, r5, r6, r7, r8, sl, fp, lr}
   1f360:	b	1cc94 <main@@Base+0x6f04>
   1f364:	mov	r0, r7
   1f368:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   1f36c:	push	{r4, r5, r6, sl, fp, lr}
   1f370:	add	fp, sp, #16
   1f374:	mov	r4, r2
   1f378:	mov	r5, r0
   1f37c:	ldr	r6, [fp, #8]
   1f380:	mov	r0, #0
   1f384:	str	r0, [r6]
   1f388:	cmp	r3, #11
   1f38c:	bhi	1f3dc <main@@Base+0x964c>
   1f390:	add	r0, pc, #0
   1f394:	ldr	pc, [r0, r3, lsl #2]
   1f398:	andeq	pc, r1, r8, lsl r4	; <UNPREDICTABLE>
   1f39c:	strdeq	pc, [r1], -r8
   1f3a0:	andeq	pc, r1, r8, lsr #8
   1f3a4:	strdeq	pc, [r1], -r8
   1f3a8:	strdeq	pc, [r1], -r8
   1f3ac:	strdeq	pc, [r1], -r8
   1f3b0:	strdeq	pc, [r1], -r8
   1f3b4:	strdeq	pc, [r1], -r8
   1f3b8:	andeq	pc, r1, ip, lsr r4	; <UNPREDICTABLE>
   1f3bc:	andeq	pc, r1, r8, asr #7
   1f3c0:	andeq	pc, r1, r8, asr #7
   1f3c4:	andeq	pc, r1, r4, ror #7
   1f3c8:	mov	r0, r5
   1f3cc:	mov	r2, r4
   1f3d0:	mov	r3, r6
   1f3d4:	bl	1f794 <main@@Base+0x9a04>
   1f3d8:	b	1f44c <main@@Base+0x96bc>
   1f3dc:	cmp	r3, #255	; 0xff
   1f3e0:	bne	1f3f8 <main@@Base+0x9668>
   1f3e4:	mov	r0, r5
   1f3e8:	mov	r2, r4
   1f3ec:	mov	r3, r6
   1f3f0:	bl	2787c <flatcc_json_parser_build_string@@Base>
   1f3f4:	b	1f44c <main@@Base+0x96bc>
   1f3f8:	ldrb	r0, [r5, #8]
   1f3fc:	tst	r0, #1
   1f400:	bne	1f484 <main@@Base+0x96f4>
   1f404:	mov	r0, r5
   1f408:	mov	r2, r4
   1f40c:	mov	r3, #15
   1f410:	pop	{r4, r5, r6, sl, fp, lr}
   1f414:	b	25fa0 <flatcc_json_parser_set_error@@Base>
   1f418:	mov	r0, r5
   1f41c:	mov	r2, r4
   1f420:	pop	{r4, r5, r6, sl, fp, lr}
   1f424:	b	1d158 <main@@Base+0x73c8>
   1f428:	mov	r0, r5
   1f42c:	mov	r2, r4
   1f430:	mov	r3, r6
   1f434:	bl	1f4bc <main@@Base+0x972c>
   1f438:	b	1f44c <main@@Base+0x96bc>
   1f43c:	mov	r0, r5
   1f440:	mov	r2, r4
   1f444:	mov	r3, r6
   1f448:	bl	1f708 <main@@Base+0x9978>
   1f44c:	mov	r1, r0
   1f450:	ldr	r0, [r5, #20]
   1f454:	cmp	r0, #0
   1f458:	bne	1f468 <main@@Base+0x96d8>
   1f45c:	ldr	r0, [r6]
   1f460:	cmp	r0, #0
   1f464:	beq	1f470 <main@@Base+0x96e0>
   1f468:	mov	r0, r1
   1f46c:	pop	{r4, r5, r6, sl, fp, pc}
   1f470:	mov	r0, r5
   1f474:	mov	r2, r4
   1f478:	mov	r3, #33	; 0x21
   1f47c:	pop	{r4, r5, r6, sl, fp, lr}
   1f480:	b	25fa0 <flatcc_json_parser_set_error@@Base>
   1f484:	mov	r0, r5
   1f488:	mov	r2, r4
   1f48c:	pop	{r4, r5, r6, sl, fp, lr}
   1f490:	b	267a0 <flatcc_json_parser_generic_json@@Base>
   1f494:	add	r0, r0, #1
   1f498:	uxtb	r1, r0
   1f49c:	cmp	r1, #12
   1f4a0:	movhi	r0, #0
   1f4a4:	bxhi	lr
   1f4a8:	sxtb	r0, r0
   1f4ac:	movw	r1, #17668	; 0x4504
   1f4b0:	movt	r1, #3
   1f4b4:	ldr	r0, [r1, r0, lsl #2]
   1f4b8:	bx	lr
   1f4bc:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1f4c0:	add	fp, sp, #28
   1f4c4:	sub	sp, sp, #20
   1f4c8:	mov	r7, r3
   1f4cc:	mov	r4, r2
   1f4d0:	mov	r6, r1
   1f4d4:	mov	r5, r0
   1f4d8:	mov	r0, #0
   1f4dc:	str	r0, [r3]
   1f4e0:	ldr	r0, [r5]
   1f4e4:	mov	r1, #1
   1f4e8:	bl	22744 <flatcc_builder_start_table@@Base>
   1f4ec:	cmp	r0, #0
   1f4f0:	bne	1f6e4 <main@@Base+0x9954>
   1f4f4:	add	r3, sp, #16
   1f4f8:	mov	r0, r5
   1f4fc:	mov	r1, r6
   1f500:	mov	r2, r4
   1f504:	bl	195e8 <main@@Base+0x3858>
   1f508:	mov	r6, r0
   1f50c:	ldr	r0, [sp, #16]
   1f510:	cmp	r0, #0
   1f514:	str	r7, [sp, #8]
   1f518:	beq	1f6c0 <main@@Base+0x9930>
   1f51c:	movw	r8, #28530	; 0x6f72
   1f520:	movt	r8, #29559	; 0x7377
   1f524:	movw	sl, #24948	; 0x6174
   1f528:	movt	sl, #25695	; 0x645f
   1f52c:	add	r9, sp, #16
   1f530:	mov	r0, r5
   1f534:	mov	r1, r6
   1f538:	mov	r2, r4
   1f53c:	bl	19678 <main@@Base+0x38e8>
   1f540:	mov	r6, r0
   1f544:	mov	r1, r4
   1f548:	bl	196a0 <main@@Base+0x3910>
   1f54c:	eor	r1, r1, r8
   1f550:	eor	r0, r0, sl
   1f554:	orrs	r0, r0, r1
   1f558:	bne	1f604 <main@@Base+0x9874>
   1f55c:	add	r7, r6, #8
   1f560:	mov	r0, r7
   1f564:	mov	r1, r4
   1f568:	bl	196a0 <main@@Base+0x3910>
   1f56c:	movw	r2, #25451	; 0x636b
   1f570:	movt	r2, #29793	; 0x7461
   1f574:	eor	r1, r1, r2
   1f578:	movw	r2, #24941	; 0x616d
   1f57c:	movt	r2, #24420	; 0x5f64
   1f580:	eor	r0, r0, r2
   1f584:	orrs	r0, r0, r1
   1f588:	bne	1f610 <main@@Base+0x9880>
   1f58c:	add	r6, r6, #16
   1f590:	mov	r0, r6
   1f594:	mov	r1, r4
   1f598:	bl	196a0 <main@@Base+0x3910>
   1f59c:	bic	r0, r1, #255	; 0xff
   1f5a0:	movw	r1, #25856	; 0x6500
   1f5a4:	movt	r1, #24935	; 0x6167
   1f5a8:	teq	r0, r1
   1f5ac:	bne	1f604 <main@@Base+0x9874>
   1f5b0:	mov	r0, r5
   1f5b4:	mov	r1, r6
   1f5b8:	mov	r2, r4
   1f5bc:	mov	r3, #3
   1f5c0:	bl	196a4 <main@@Base+0x3914>
   1f5c4:	mov	r7, r0
   1f5c8:	cmp	r6, r0
   1f5cc:	beq	1f610 <main@@Base+0x9880>
   1f5d0:	mov	r0, #0
   1f5d4:	str	r0, [sp, #12]
   1f5d8:	mov	r0, r5
   1f5dc:	mov	r1, r7
   1f5e0:	mov	r2, r4
   1f5e4:	add	r6, sp, #12
   1f5e8:	mov	r3, r6
   1f5ec:	bl	1bd1c <main@@Base+0x5f8c>
   1f5f0:	mov	r8, r0
   1f5f4:	cmp	r7, r0
   1f5f8:	beq	1f64c <main@@Base+0x98bc>
   1f5fc:	mov	r6, r8
   1f600:	b	1f678 <main@@Base+0x98e8>
   1f604:	mov	r0, r5
   1f608:	mov	r1, r6
   1f60c:	b	1f618 <main@@Base+0x9888>
   1f610:	mov	r0, r5
   1f614:	mov	r1, r7
   1f618:	mov	r2, r4
   1f61c:	bl	2669c <flatcc_json_parser_unmatched_symbol@@Base>
   1f620:	mov	r6, r0
   1f624:	mov	r0, r5
   1f628:	mov	r1, r6
   1f62c:	mov	r2, r4
   1f630:	mov	r3, r9
   1f634:	bl	1c5b0 <main@@Base+0x6820>
   1f638:	mov	r6, r0
   1f63c:	ldr	r0, [sp, #16]
   1f640:	cmp	r0, #0
   1f644:	bne	1f530 <main@@Base+0x97a0>
   1f648:	b	1f6c0 <main@@Base+0x9930>
   1f64c:	str	r6, [sp]
   1f650:	mov	r0, r5
   1f654:	mov	r1, r8
   1f658:	mov	r2, r4
   1f65c:	movw	r3, #33520	; 0x82f0
   1f660:	movt	r3, #4
   1f664:	bl	1bdac <main@@Base+0x601c>
   1f668:	mov	r6, r0
   1f66c:	cmp	r0, r8
   1f670:	cmpne	r6, r4
   1f674:	beq	1f6e4 <main@@Base+0x9954>
   1f678:	ldr	r8, [sp, #12]
   1f67c:	cmp	r8, #0
   1f680:	bne	1f690 <main@@Base+0x9900>
   1f684:	ldrb	r0, [r5, #8]
   1f688:	tst	r0, #2
   1f68c:	beq	1f6b4 <main@@Base+0x9924>
   1f690:	ldr	r0, [r5]
   1f694:	mov	r1, #0
   1f698:	mov	r2, #4
   1f69c:	mov	r3, #4
   1f6a0:	bl	23540 <flatcc_builder_table_add@@Base>
   1f6a4:	cmp	r0, #0
   1f6a8:	beq	1f6e4 <main@@Base+0x9954>
   1f6ac:	mov	r1, r8
   1f6b0:	bl	1bec8 <main@@Base+0x6138>
   1f6b4:	movw	r8, #28530	; 0x6f72
   1f6b8:	movt	r8, #29559	; 0x7377
   1f6bc:	b	1f624 <main@@Base+0x9894>
   1f6c0:	ldr	r0, [r5, #20]
   1f6c4:	cmp	r0, #0
   1f6c8:	bne	1f6e4 <main@@Base+0x9954>
   1f6cc:	ldr	r0, [r5]
   1f6d0:	bl	22e50 <flatcc_builder_end_table@@Base>
   1f6d4:	ldr	r1, [sp, #8]
   1f6d8:	str	r0, [r1]
   1f6dc:	cmp	r0, #0
   1f6e0:	bne	1f6fc <main@@Base+0x996c>
   1f6e4:	mov	r0, r5
   1f6e8:	mov	r1, r6
   1f6ec:	mov	r2, r4
   1f6f0:	mov	r3, #33	; 0x21
   1f6f4:	bl	25fa0 <flatcc_json_parser_set_error@@Base>
   1f6f8:	mov	r6, r0
   1f6fc:	mov	r0, r6
   1f700:	sub	sp, fp, #28
   1f704:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1f708:	push	{r4, r5, r6, r7, fp, lr}
   1f70c:	add	fp, sp, #16
   1f710:	mov	r7, r3
   1f714:	mov	r4, r2
   1f718:	mov	r6, r1
   1f71c:	mov	r5, r0
   1f720:	mov	r0, #0
   1f724:	str	r0, [r3]
   1f728:	ldr	r0, [r5]
   1f72c:	mov	r1, #2
   1f730:	mov	r2, #2
   1f734:	bl	21d40 <flatcc_builder_start_struct@@Base>
   1f738:	cmp	r0, #0
   1f73c:	beq	1f77c <main@@Base+0x99ec>
   1f740:	mov	r3, r0
   1f744:	mov	r0, r5
   1f748:	mov	r1, r6
   1f74c:	mov	r2, r4
   1f750:	bl	1f820 <main@@Base+0x9a90>
   1f754:	mov	r6, r0
   1f758:	cmp	r0, r4
   1f75c:	beq	1f77c <main@@Base+0x99ec>
   1f760:	ldr	r0, [r5]
   1f764:	bl	21e1c <flatcc_builder_end_struct@@Base>
   1f768:	str	r0, [r7]
   1f76c:	cmp	r0, #0
   1f770:	beq	1f77c <main@@Base+0x99ec>
   1f774:	mov	r0, r6
   1f778:	pop	{r4, r5, r6, r7, fp, pc}
   1f77c:	mov	r0, r5
   1f780:	mov	r1, r6
   1f784:	mov	r2, r4
   1f788:	mov	r3, #33	; 0x21
   1f78c:	pop	{r4, r5, r6, r7, fp, lr}
   1f790:	b	25fa0 <flatcc_json_parser_set_error@@Base>
   1f794:	push	{r4, r5, r6, r7, fp, lr}
   1f798:	add	fp, sp, #16
   1f79c:	mov	r7, r3
   1f7a0:	mov	r4, r2
   1f7a4:	mov	r6, r1
   1f7a8:	mov	r5, r0
   1f7ac:	mov	r0, #0
   1f7b0:	str	r0, [r3]
   1f7b4:	ldr	r0, [r5]
   1f7b8:	mov	r1, #4
   1f7bc:	mov	r2, #4
   1f7c0:	bl	21d40 <flatcc_builder_start_struct@@Base>
   1f7c4:	cmp	r0, #0
   1f7c8:	beq	1f808 <main@@Base+0x9a78>
   1f7cc:	mov	r3, r0
   1f7d0:	mov	r0, r5
   1f7d4:	mov	r1, r6
   1f7d8:	mov	r2, r4
   1f7dc:	bl	1fbf0 <main@@Base+0x9e60>
   1f7e0:	mov	r6, r0
   1f7e4:	cmp	r0, r4
   1f7e8:	beq	1f808 <main@@Base+0x9a78>
   1f7ec:	ldr	r0, [r5]
   1f7f0:	bl	21e1c <flatcc_builder_end_struct@@Base>
   1f7f4:	str	r0, [r7]
   1f7f8:	cmp	r0, #0
   1f7fc:	beq	1f808 <main@@Base+0x9a78>
   1f800:	mov	r0, r6
   1f804:	pop	{r4, r5, r6, r7, fp, pc}
   1f808:	mov	r0, r5
   1f80c:	mov	r1, r6
   1f810:	mov	r2, r4
   1f814:	mov	r3, #33	; 0x21
   1f818:	pop	{r4, r5, r6, r7, fp, lr}
   1f81c:	b	25fa0 <flatcc_json_parser_set_error@@Base>
   1f820:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1f824:	add	fp, sp, #28
   1f828:	sub	sp, sp, #20
   1f82c:	str	r3, [sp, #8]
   1f830:	mov	r4, r2
   1f834:	mov	r5, r0
   1f838:	add	r3, sp, #16
   1f83c:	bl	195e8 <main@@Base+0x3858>
   1f840:	mov	r1, r0
   1f844:	ldr	r0, [sp, #16]
   1f848:	cmp	r0, #0
   1f84c:	beq	1f9c8 <main@@Base+0x9c38>
   1f850:	movw	r8, #26994	; 0x6972
   1f854:	movt	r8, #26721	; 0x6861
   1f858:	movw	r9, #25966	; 0x656e
   1f85c:	movt	r9, #24428	; 0x5f6c
   1f860:	movw	r7, #26624	; 0x6800
   1f864:	movt	r7, #26484	; 0x6774
   1f868:	add	sl, sp, #14
   1f86c:	b	1f8a8 <main@@Base+0x9b18>
   1f870:	mov	r0, r5
   1f874:	mov	r1, r6
   1f878:	mov	r2, r4
   1f87c:	bl	2669c <flatcc_json_parser_unmatched_symbol@@Base>
   1f880:	mov	r6, r0
   1f884:	mov	r0, r5
   1f888:	mov	r1, r6
   1f88c:	mov	r2, r4
   1f890:	add	r3, sp, #16
   1f894:	bl	1c5b0 <main@@Base+0x6820>
   1f898:	mov	r1, r0
   1f89c:	ldr	r0, [sp, #16]
   1f8a0:	cmp	r0, #0
   1f8a4:	beq	1f9c8 <main@@Base+0x9c38>
   1f8a8:	mov	r0, r5
   1f8ac:	mov	r2, r4
   1f8b0:	bl	19678 <main@@Base+0x38e8>
   1f8b4:	mov	r6, r0
   1f8b8:	mov	r1, r4
   1f8bc:	bl	196a0 <main@@Base+0x3910>
   1f8c0:	eor	r1, r1, r8
   1f8c4:	eor	r0, r0, r9
   1f8c8:	orrs	r0, r0, r1
   1f8cc:	bne	1f870 <main@@Base+0x9ae0>
   1f8d0:	add	r6, r6, #8
   1f8d4:	mov	r0, r6
   1f8d8:	mov	r1, r4
   1f8dc:	bl	196a0 <main@@Base+0x3910>
   1f8e0:	bic	r0, r1, #255	; 0xff
   1f8e4:	teq	r0, r7
   1f8e8:	bne	1f870 <main@@Base+0x9ae0>
   1f8ec:	mov	r0, r5
   1f8f0:	mov	r1, r6
   1f8f4:	mov	r2, r4
   1f8f8:	mov	r3, #3
   1f8fc:	bl	196a4 <main@@Base+0x3914>
   1f900:	mov	r8, r0
   1f904:	cmp	r6, r0
   1f908:	beq	1f944 <main@@Base+0x9bb4>
   1f90c:	mov	r0, #0
   1f910:	strh	r0, [sp, #14]
   1f914:	mov	r0, r5
   1f918:	mov	r1, r8
   1f91c:	mov	r2, r4
   1f920:	mov	r9, sl
   1f924:	mov	r3, sl
   1f928:	bl	1f9d4 <main@@Base+0x9c44>
   1f92c:	mov	r6, r0
   1f930:	cmp	r8, r0
   1f934:	beq	1f964 <main@@Base+0x9bd4>
   1f938:	movw	r8, #26994	; 0x6972
   1f93c:	movt	r8, #26721	; 0x6861
   1f940:	b	1f99c <main@@Base+0x9c0c>
   1f944:	mov	r0, r5
   1f948:	mov	r1, r8
   1f94c:	mov	r2, r4
   1f950:	bl	2669c <flatcc_json_parser_unmatched_symbol@@Base>
   1f954:	mov	r6, r0
   1f958:	movw	r8, #26994	; 0x6972
   1f95c:	movt	r8, #26721	; 0x6861
   1f960:	b	1f9a8 <main@@Base+0x9c18>
   1f964:	str	r9, [sp]
   1f968:	mov	r0, r5
   1f96c:	mov	r1, r6
   1f970:	mov	r2, r4
   1f974:	movw	r3, #33532	; 0x82fc
   1f978:	movt	r3, #4
   1f97c:	bl	1fa64 <main@@Base+0x9cd4>
   1f980:	mov	r1, r0
   1f984:	cmp	r0, r6
   1f988:	movw	r8, #26994	; 0x6972
   1f98c:	movt	r8, #26721	; 0x6861
   1f990:	cmpne	r1, r4
   1f994:	beq	1f9b4 <main@@Base+0x9c24>
   1f998:	mov	r6, r1
   1f99c:	ldrh	r1, [sp, #14]
   1f9a0:	ldr	r0, [sp, #8]
   1f9a4:	bl	1fb80 <main@@Base+0x9df0>
   1f9a8:	movw	r9, #25966	; 0x656e
   1f9ac:	movt	r9, #24428	; 0x5f6c
   1f9b0:	b	1f884 <main@@Base+0x9af4>
   1f9b4:	mov	r0, r5
   1f9b8:	mov	r2, r4
   1f9bc:	mov	r3, #33	; 0x21
   1f9c0:	bl	25fa0 <flatcc_json_parser_set_error@@Base>
   1f9c4:	mov	r1, r0
   1f9c8:	mov	r0, r1
   1f9cc:	sub	sp, fp, #28
   1f9d0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1f9d4:	push	{r4, r5, r6, r7, fp, lr}
   1f9d8:	add	fp, sp, #16
   1f9dc:	sub	sp, sp, #24
   1f9e0:	mov	r7, r1
   1f9e4:	mov	r6, r0
   1f9e8:	mov	r0, #0
   1f9ec:	str	r0, [sp, #20]
   1f9f0:	str	r0, [sp, #16]
   1f9f4:	str	r0, [sp, #12]
   1f9f8:	strh	r0, [r3]
   1f9fc:	cmp	r1, r2
   1fa00:	beq	1fa58 <main@@Base+0x9cc8>
   1fa04:	mov	r5, r3
   1fa08:	mov	r4, r2
   1fa0c:	add	r0, sp, #16
   1fa10:	str	r0, [sp]
   1fa14:	add	r3, sp, #12
   1fa18:	mov	r0, r6
   1fa1c:	mov	r1, r7
   1fa20:	bl	27380 <flatcc_json_parser_integer@@Base>
   1fa24:	mov	r1, r0
   1fa28:	cmp	r0, r7
   1fa2c:	beq	1fa54 <main@@Base+0x9cc4>
   1fa30:	ldr	r3, [sp, #12]
   1fa34:	ldr	r0, [sp, #16]
   1fa38:	ldr	r2, [sp, #20]
   1fa3c:	stm	sp, {r0, r2, r5}
   1fa40:	mov	r0, r6
   1fa44:	mov	r2, r4
   1fa48:	bl	1fba0 <main@@Base+0x9e10>
   1fa4c:	mov	r7, r0
   1fa50:	b	1fa58 <main@@Base+0x9cc8>
   1fa54:	mov	r7, r1
   1fa58:	mov	r0, r7
   1fa5c:	sub	sp, fp, #16
   1fa60:	pop	{r4, r5, r6, r7, fp, pc}
   1fa64:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1fa68:	add	fp, sp, #28
   1fa6c:	sub	sp, sp, #36	; 0x24
   1fa70:	mov	r8, r3
   1fa74:	mov	r6, r2
   1fa78:	mov	r5, r0
   1fa7c:	mov	r0, #0
   1fa80:	strh	r0, [fp, #-30]	; 0xffffffe2
   1fa84:	ldr	sl, [fp, #8]
   1fa88:	strh	r0, [sl]
   1fa8c:	mov	r0, r5
   1fa90:	bl	1d078 <main@@Base+0x72e8>
   1fa94:	mov	r4, r0
   1fa98:	cmp	r0, r6
   1fa9c:	beq	1fb4c <main@@Base+0x9dbc>
   1faa0:	mov	r9, r8
   1faa4:	b	1fab8 <main@@Base+0x9d28>
   1faa8:	ldr	r0, [r9, #4]!
   1faac:	cmp	r0, #0
   1fab0:	mov	r4, r7
   1fab4:	beq	1fb5c <main@@Base+0x9dcc>
   1fab8:	ldr	r7, [r9]
   1fabc:	add	r0, sp, #24
   1fac0:	str	r0, [sp]
   1fac4:	add	r0, sp, #16
   1fac8:	str	r0, [sp, #4]
   1facc:	mov	r0, r5
   1fad0:	mov	r1, r4
   1fad4:	mov	r2, r6
   1fad8:	add	r3, sp, #20
   1fadc:	blx	r7
   1fae0:	mov	r7, r0
   1fae4:	cmp	r0, r6
   1fae8:	beq	1fb74 <main@@Base+0x9de4>
   1faec:	cmp	r7, r4
   1faf0:	beq	1faa8 <main@@Base+0x9d18>
   1faf4:	ldr	r3, [sp, #20]
   1faf8:	ldr	r0, [sp, #24]
   1fafc:	ldr	r1, [sp, #28]
   1fb00:	stm	sp, {r0, r1}
   1fb04:	sub	r0, fp, #30
   1fb08:	str	r0, [sp, #8]
   1fb0c:	mov	r0, r5
   1fb10:	mov	r1, r7
   1fb14:	mov	r2, r6
   1fb18:	bl	1fba0 <main@@Base+0x9e10>
   1fb1c:	cmp	r0, r6
   1fb20:	beq	1fb54 <main@@Base+0x9dc4>
   1fb24:	ldrh	r0, [sl]
   1fb28:	ldrh	r1, [fp, #-30]	; 0xffffffe2
   1fb2c:	add	r0, r0, r1
   1fb30:	strh	r0, [sl]
   1fb34:	ldr	r0, [sp, #16]
   1fb38:	cmp	r0, #0
   1fb3c:	mov	r4, r7
   1fb40:	mov	r9, r8
   1fb44:	bne	1fab8 <main@@Base+0x9d28>
   1fb48:	b	1fb74 <main@@Base+0x9de4>
   1fb4c:	mov	r7, r4
   1fb50:	b	1fb74 <main@@Base+0x9de4>
   1fb54:	mov	r7, r6
   1fb58:	b	1fb74 <main@@Base+0x9de4>
   1fb5c:	mov	r0, r5
   1fb60:	mov	r1, r7
   1fb64:	mov	r2, r6
   1fb68:	mov	r3, #23
   1fb6c:	bl	25fa0 <flatcc_json_parser_set_error@@Base>
   1fb70:	mov	r7, r0
   1fb74:	mov	r0, r7
   1fb78:	sub	sp, fp, #28
   1fb7c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1fb80:	push	{r4, r5, fp, lr}
   1fb84:	add	fp, sp, #8
   1fb88:	mov	r4, r1
   1fb8c:	mov	r5, r0
   1fb90:	mov	r0, r1
   1fb94:	bl	1fbec <main@@Base+0x9e5c>
   1fb98:	strh	r4, [r5]
   1fb9c:	pop	{r4, r5, fp, pc}
   1fba0:	push	{fp, lr}
   1fba4:	mov	fp, sp
   1fba8:	cmp	r3, #0
   1fbac:	beq	1fbbc <main@@Base+0x9e2c>
   1fbb0:	mov	r3, #8
   1fbb4:	pop	{fp, lr}
   1fbb8:	b	25fa0 <flatcc_json_parser_set_error@@Base>
   1fbbc:	ldr	ip, [fp, #12]
   1fbc0:	ldr	lr, [fp, #8]
   1fbc4:	subs	r3, lr, #65536	; 0x10000
   1fbc8:	sbcs	r3, ip, #0
   1fbcc:	bcc	1fbdc <main@@Base+0x9e4c>
   1fbd0:	mov	r3, #7
   1fbd4:	pop	{fp, lr}
   1fbd8:	b	25fa0 <flatcc_json_parser_set_error@@Base>
   1fbdc:	ldr	r0, [fp, #16]
   1fbe0:	strh	lr, [r0]
   1fbe4:	mov	r0, r1
   1fbe8:	pop	{fp, pc}
   1fbec:	bx	lr
   1fbf0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1fbf4:	add	fp, sp, #28
   1fbf8:	sub	sp, sp, #20
   1fbfc:	str	r3, [sp, #8]
   1fc00:	mov	r4, r2
   1fc04:	mov	r5, r0
   1fc08:	add	r3, sp, #16
   1fc0c:	bl	195e8 <main@@Base+0x3858>
   1fc10:	mov	r1, r0
   1fc14:	ldr	r0, [sp, #16]
   1fc18:	cmp	r0, #0
   1fc1c:	beq	1fd98 <main@@Base+0xa008>
   1fc20:	movw	r8, #28523	; 0x6f6b
   1fc24:	movt	r8, #25199	; 0x626f
   1fc28:	movw	r9, #29285	; 0x7265
   1fc2c:	movt	r9, #29535	; 0x735f
   1fc30:	movw	r7, #0
   1fc34:	movt	r7, #24932	; 0x6164
   1fc38:	add	sl, sp, #12
   1fc3c:	b	1fc78 <main@@Base+0x9ee8>
   1fc40:	mov	r0, r5
   1fc44:	mov	r1, r6
   1fc48:	mov	r2, r4
   1fc4c:	bl	2669c <flatcc_json_parser_unmatched_symbol@@Base>
   1fc50:	mov	r6, r0
   1fc54:	mov	r0, r5
   1fc58:	mov	r1, r6
   1fc5c:	mov	r2, r4
   1fc60:	add	r3, sp, #16
   1fc64:	bl	1c5b0 <main@@Base+0x6820>
   1fc68:	mov	r1, r0
   1fc6c:	ldr	r0, [sp, #16]
   1fc70:	cmp	r0, #0
   1fc74:	beq	1fd98 <main@@Base+0xa008>
   1fc78:	mov	r0, r5
   1fc7c:	mov	r2, r4
   1fc80:	bl	19678 <main@@Base+0x38e8>
   1fc84:	mov	r6, r0
   1fc88:	mov	r1, r4
   1fc8c:	bl	196a0 <main@@Base+0x3910>
   1fc90:	eor	r1, r1, r8
   1fc94:	eor	r0, r0, r9
   1fc98:	orrs	r0, r0, r1
   1fc9c:	bne	1fc40 <main@@Base+0x9eb0>
   1fca0:	add	r6, r6, #8
   1fca4:	mov	r0, r6
   1fca8:	mov	r1, r4
   1fcac:	bl	196a0 <main@@Base+0x3910>
   1fcb0:	bfc	r1, #0, #16
   1fcb4:	teq	r1, r7
   1fcb8:	bne	1fc40 <main@@Base+0x9eb0>
   1fcbc:	mov	r0, r5
   1fcc0:	mov	r1, r6
   1fcc4:	mov	r2, r4
   1fcc8:	mov	r3, #2
   1fccc:	bl	196a4 <main@@Base+0x3914>
   1fcd0:	mov	r8, r0
   1fcd4:	cmp	r6, r0
   1fcd8:	beq	1fd14 <main@@Base+0x9f84>
   1fcdc:	mov	r0, #0
   1fce0:	str	r0, [sp, #12]
   1fce4:	mov	r0, r5
   1fce8:	mov	r1, r8
   1fcec:	mov	r2, r4
   1fcf0:	mov	r9, sl
   1fcf4:	mov	r3, sl
   1fcf8:	bl	1bd1c <main@@Base+0x5f8c>
   1fcfc:	mov	r6, r0
   1fd00:	cmp	r8, r0
   1fd04:	beq	1fd34 <main@@Base+0x9fa4>
   1fd08:	movw	r8, #28523	; 0x6f6b
   1fd0c:	movt	r8, #25199	; 0x626f
   1fd10:	b	1fd6c <main@@Base+0x9fdc>
   1fd14:	mov	r0, r5
   1fd18:	mov	r1, r8
   1fd1c:	mov	r2, r4
   1fd20:	bl	2669c <flatcc_json_parser_unmatched_symbol@@Base>
   1fd24:	mov	r6, r0
   1fd28:	movw	r8, #28523	; 0x6f6b
   1fd2c:	movt	r8, #25199	; 0x626f
   1fd30:	b	1fd78 <main@@Base+0x9fe8>
   1fd34:	str	r9, [sp]
   1fd38:	mov	r0, r5
   1fd3c:	mov	r1, r6
   1fd40:	mov	r2, r4
   1fd44:	movw	r3, #33544	; 0x8308
   1fd48:	movt	r3, #4
   1fd4c:	bl	1bdac <main@@Base+0x601c>
   1fd50:	mov	r1, r0
   1fd54:	cmp	r0, r6
   1fd58:	movw	r8, #28523	; 0x6f6b
   1fd5c:	movt	r8, #25199	; 0x626f
   1fd60:	cmpne	r1, r4
   1fd64:	beq	1fd84 <main@@Base+0x9ff4>
   1fd68:	mov	r6, r1
   1fd6c:	ldr	r1, [sp, #12]
   1fd70:	ldr	r0, [sp, #8]
   1fd74:	bl	1bec8 <main@@Base+0x6138>
   1fd78:	movw	r9, #29285	; 0x7265
   1fd7c:	movt	r9, #29535	; 0x735f
   1fd80:	b	1fc54 <main@@Base+0x9ec4>
   1fd84:	mov	r0, r5
   1fd88:	mov	r2, r4
   1fd8c:	mov	r3, #33	; 0x21
   1fd90:	bl	25fa0 <flatcc_json_parser_set_error@@Base>
   1fd94:	mov	r1, r0
   1fd98:	mov	r0, r1
   1fd9c:	sub	sp, fp, #28
   1fda0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1fda4:	cmp	r3, #0
   1fda8:	beq	1fdb4 <main@@Base+0xa024>
   1fdac:	mov	r3, #8
   1fdb0:	b	25fa0 <flatcc_json_parser_set_error@@Base>
   1fdb4:	ldr	r2, [sp]
   1fdb8:	ldmib	sp, {r0, r3}
   1fdbc:	orrs	r0, r2, r0
   1fdc0:	movwne	r0, #1
   1fdc4:	strb	r0, [r3]
   1fdc8:	mov	r0, r1
   1fdcc:	bx	lr
   1fdd0:	bx	lr
   1fdd4:	push	{r4, r5, fp, lr}
   1fdd8:	add	fp, sp, #8
   1fddc:	mov	r4, r1
   1fde0:	mov	r5, r0
   1fde4:	mov	r0, r2
   1fde8:	mov	r1, r3
   1fdec:	bl	3136c <flatcc_json_printer_clear@@Base+0x1418>
   1fdf0:	ldr	r1, [fp, #8]
   1fdf4:	vmov	s0, r0
   1fdf8:	vneg.f32	s2, s0
   1fdfc:	cmp	r4, #0
   1fe00:	vseleq.f32	s0, s0, s2
   1fe04:	vstr	s0, [r1]
   1fe08:	mov	r0, r5
   1fe0c:	pop	{r4, r5, fp, pc}
   1fe10:	bx	lr
   1fe14:	push	{r4, sl, fp, lr}
   1fe18:	add	fp, sp, #8
   1fe1c:	ldr	r4, [fp, #12]
   1fe20:	ldr	ip, [fp, #8]
   1fe24:	ldr	lr, [fp, #16]
   1fe28:	cmp	r3, #0
   1fe2c:	beq	1fe48 <main@@Base+0xa0b8>
   1fe30:	subs	r3, ip, #-2147483647	; 0x80000001
   1fe34:	sbcs	r3, r4, #0
   1fe38:	bcc	1fe60 <main@@Base+0xa0d0>
   1fe3c:	mov	r3, #8
   1fe40:	pop	{r4, sl, fp, lr}
   1fe44:	b	25fa0 <flatcc_json_parser_set_error@@Base>
   1fe48:	subs	r3, ip, #-2147483648	; 0x80000000
   1fe4c:	sbcs	r3, r4, #0
   1fe50:	bcc	1fe64 <main@@Base+0xa0d4>
   1fe54:	mov	r3, #7
   1fe58:	pop	{r4, sl, fp, lr}
   1fe5c:	b	25fa0 <flatcc_json_parser_set_error@@Base>
   1fe60:	rsb	ip, ip, #0
   1fe64:	str	ip, [lr]
   1fe68:	mov	r0, r1
   1fe6c:	pop	{r4, sl, fp, pc}
   1fe70:	bx	lr
   1fe74:	push	{r4, r5, fp, lr}
   1fe78:	add	fp, sp, #8
   1fe7c:	add	ip, fp, #8
   1fe80:	ldm	ip, {r4, r5, ip}
   1fe84:	cmp	r3, #0
   1fe88:	beq	1fea4 <main@@Base+0xa114>
   1fe8c:	subs	r3, r4, #1
   1fe90:	sbcs	r3, r5, #-2147483648	; 0x80000000
   1fe94:	bcc	1feb8 <main@@Base+0xa128>
   1fe98:	mov	r3, #8
   1fe9c:	pop	{r4, r5, fp, lr}
   1fea0:	b	25fa0 <flatcc_json_parser_set_error@@Base>
   1fea4:	cmn	r5, #1
   1fea8:	bgt	1fec0 <main@@Base+0xa130>
   1feac:	mov	r3, #7
   1feb0:	pop	{r4, r5, fp, lr}
   1feb4:	b	25fa0 <flatcc_json_parser_set_error@@Base>
   1feb8:	rsbs	r4, r4, #0
   1febc:	rsc	r5, r5, #0
   1fec0:	strd	r4, [ip]
   1fec4:	mov	r0, r1
   1fec8:	pop	{r4, r5, fp, pc}
   1fecc:	bx	lr
   1fed0:	cmp	r3, #0
   1fed4:	beq	1fee0 <main@@Base+0xa150>
   1fed8:	mov	r3, #8
   1fedc:	b	25fa0 <flatcc_json_parser_set_error@@Base>
   1fee0:	ldr	r3, [sp, #4]
   1fee4:	cmp	r3, #0
   1fee8:	beq	1fef4 <main@@Base+0xa164>
   1feec:	mov	r3, #7
   1fef0:	b	25fa0 <flatcc_json_parser_set_error@@Base>
   1fef4:	ldr	r0, [sp]
   1fef8:	ldr	r2, [sp, #8]
   1fefc:	str	r0, [r2]
   1ff00:	mov	r0, r1
   1ff04:	bx	lr
   1ff08:	bx	lr
   1ff0c:	cmp	r3, #0
   1ff10:	beq	1ff1c <main@@Base+0xa18c>
   1ff14:	mov	r3, #8
   1ff18:	b	25fa0 <flatcc_json_parser_set_error@@Base>
   1ff1c:	ldm	sp, {r2, r3}
   1ff20:	ldr	r0, [sp, #8]
   1ff24:	strd	r2, [r0]
   1ff28:	mov	r0, r1
   1ff2c:	bx	lr
   1ff30:	bx	lr
   1ff34:	push	{r4, r5, fp, lr}
   1ff38:	add	fp, sp, #8
   1ff3c:	mov	r4, r1
   1ff40:	mov	r5, r0
   1ff44:	mov	r0, r2
   1ff48:	mov	r1, r3
   1ff4c:	bl	31134 <flatcc_json_printer_clear@@Base+0x11e0>
   1ff50:	eor	r2, r1, #-2147483648	; 0x80000000
   1ff54:	ldr	r3, [fp, #8]
   1ff58:	vmov	d16, r0, r1
   1ff5c:	vmov	d17, r0, r2
   1ff60:	cmp	r4, #0
   1ff64:	vseleq.f64	d16, d16, d17
   1ff68:	vstr	d16, [r3]
   1ff6c:	mov	r0, r5
   1ff70:	pop	{r4, r5, fp, pc}
   1ff74:	bx	lr
   1ff78:	push	{r4, r5, r6, sl, fp, lr}
   1ff7c:	add	fp, sp, #16
   1ff80:	sub	sp, sp, #16
   1ff84:	mov	r4, r1
   1ff88:	mov	r5, r0
   1ff8c:	mov	r6, #1
   1ff90:	movw	r0, #16689	; 0x4131
   1ff94:	movt	r0, #3
   1ff98:	stm	sp, {r0, r6}
   1ff9c:	mov	r0, r5
   1ffa0:	mov	r1, #0
   1ffa4:	mov	r2, r4
   1ffa8:	mov	r3, #0
   1ffac:	bl	2bbec <flatcc_json_printer_float_struct_field@@Base>
   1ffb0:	movw	r0, #27135	; 0x69ff
   1ffb4:	movt	r0, #3
   1ffb8:	stm	sp, {r0, r6}
   1ffbc:	mov	r0, r5
   1ffc0:	mov	r1, #1
   1ffc4:	mov	r2, r4
   1ffc8:	mov	r3, #4
   1ffcc:	bl	2bbec <flatcc_json_printer_float_struct_field@@Base>
   1ffd0:	movw	r0, #17130	; 0x42ea
   1ffd4:	movt	r0, #3
   1ffd8:	stm	sp, {r0, r6}
   1ffdc:	mov	r0, r5
   1ffe0:	mov	r1, #2
   1ffe4:	mov	r2, r4
   1ffe8:	mov	r3, #8
   1ffec:	bl	2bbec <flatcc_json_printer_float_struct_field@@Base>
   1fff0:	mov	r6, #5
   1fff4:	movw	r0, #17132	; 0x42ec
   1fff8:	movt	r0, #3
   1fffc:	stm	sp, {r0, r6}
   20000:	mov	r0, r5
   20004:	mov	r1, #3
   20008:	mov	r2, r4
   2000c:	mov	r3, #16
   20010:	bl	2bc58 <flatcc_json_printer_double_struct_field@@Base>
   20014:	movw	r0, #116	; 0x74
   20018:	movt	r0, #2
   2001c:	movw	r1, #17138	; 0x42f2
   20020:	movt	r1, #3
   20024:	stm	sp, {r1, r6}
   20028:	str	r0, [sp, #8]
   2002c:	mov	r0, r5
   20030:	mov	r1, #4
   20034:	mov	r2, r4
   20038:	mov	r3, #24
   2003c:	bl	2bee0 <flatcc_json_printer_int8_enum_struct_field@@Base>
   20040:	movw	r0, #488	; 0x1e8
   20044:	movt	r0, #2
   20048:	movw	r1, #17144	; 0x42f8
   2004c:	movt	r1, #3
   20050:	stm	sp, {r1, r6}
   20054:	str	r0, [sp, #8]
   20058:	mov	r0, r5
   2005c:	mov	r1, #5
   20060:	mov	r2, r4
   20064:	mov	r3, #26
   20068:	bl	2f5d8 <flatcc_json_printer_embedded_struct_field@@Base>
   2006c:	sub	sp, fp, #16
   20070:	pop	{r4, r5, r6, sl, fp, pc}
   20074:	push	{r4, r5, r6, r7, fp, lr}
   20078:	add	fp, sp, #16
   2007c:	mov	r4, r0
   20080:	mvn	r0, #0
   20084:	uxtab	r0, r0, r1
   20088:	uxtb	r7, r1
   2008c:	ands	r5, r0, r7
   20090:	movwne	r5, #1
   20094:	cmp	r1, #0
   20098:	beq	200f4 <main@@Base+0xa364>
   2009c:	ands	r0, r1, #244	; 0xf4
   200a0:	bne	200f4 <main@@Base+0xa364>
   200a4:	mov	r0, r4
   200a8:	mov	r1, r5
   200ac:	bl	2a370 <flatcc_json_printer_delimit_enum_flags@@Base>
   200b0:	mov	r6, #0
   200b4:	tst	r7, #1
   200b8:	bne	20100 <main@@Base+0xa370>
   200bc:	tst	r7, #2
   200c0:	bne	20124 <main@@Base+0xa394>
   200c4:	tst	r7, #8
   200c8:	beq	200e4 <main@@Base+0xa354>
   200cc:	movw	r2, #17160	; 0x4308
   200d0:	movt	r2, #3
   200d4:	mov	r0, r4
   200d8:	mov	r1, r6
   200dc:	mov	r3, #4
   200e0:	bl	2a3a4 <flatcc_json_printer_enum_flag@@Base>
   200e4:	mov	r0, r4
   200e8:	mov	r1, r5
   200ec:	pop	{r4, r5, r6, r7, fp, lr}
   200f0:	b	2a370 <flatcc_json_printer_delimit_enum_flags@@Base>
   200f4:	mov	r0, r4
   200f8:	pop	{r4, r5, r6, r7, fp, lr}
   200fc:	b	2a12c <flatcc_json_printer_int8@@Base>
   20100:	movw	r2, #17150	; 0x42fe
   20104:	movt	r2, #3
   20108:	mov	r0, r4
   2010c:	mov	r1, #0
   20110:	mov	r3, #3
   20114:	bl	2a3a4 <flatcc_json_printer_enum_flag@@Base>
   20118:	mov	r6, #1
   2011c:	tst	r7, #2
   20120:	beq	200c4 <main@@Base+0xa334>
   20124:	movw	r2, #17154	; 0x4302
   20128:	movt	r2, #3
   2012c:	mov	r0, r4
   20130:	mov	r1, r6
   20134:	mov	r3, #5
   20138:	bl	2a3a4 <flatcc_json_printer_enum_flag@@Base>
   2013c:	add	r6, r6, #1
   20140:	tst	r7, #8
   20144:	bne	200cc <main@@Base+0xa33c>
   20148:	b	200e4 <main@@Base+0xa354>
   2014c:	sub	r1, r1, #1
   20150:	cmp	r1, #3
   20154:	bhi	20180 <main@@Base+0xa3f0>
   20158:	add	r2, pc, #0
   2015c:	ldr	pc, [r2, r1, lsl #2]
   20160:	andeq	r0, r2, r0, ror r1
   20164:	muleq	r2, r0, r1
   20168:	andeq	r0, r2, r0, lsr #3
   2016c:			; <UNDEFINED> instruction: 0x000201b0
   20170:	movw	r1, #17165	; 0x430d
   20174:	movt	r1, #3
   20178:	mov	r2, #7
   2017c:	b	2a2e4 <flatcc_json_printer_enum@@Base>
   20180:	movw	r1, #23624	; 0x5c48
   20184:	movt	r1, #3
   20188:	mov	r2, #4
   2018c:	b	2a2e4 <flatcc_json_printer_enum@@Base>
   20190:	movw	r1, #17173	; 0x4315
   20194:	movt	r1, #3
   20198:	mov	r2, #23
   2019c:	b	2a2e4 <flatcc_json_printer_enum@@Base>
   201a0:	movw	r1, #17197	; 0x432d
   201a4:	movt	r1, #3
   201a8:	mov	r2, #8
   201ac:	b	2a2e4 <flatcc_json_printer_enum@@Base>
   201b0:	movw	r1, #17206	; 0x4336
   201b4:	movt	r1, #3
   201b8:	mov	r2, #3
   201bc:	b	2a2e4 <flatcc_json_printer_enum@@Base>
   201c0:	ldrb	r2, [r1, #8]
   201c4:	sub	r2, r2, #1
   201c8:	uxtb	r3, r2
   201cc:	cmp	r3, #3
   201d0:	bxhi	lr
   201d4:	sxtb	r2, r2
   201d8:	movw	r3, #17720	; 0x4538
   201dc:	movt	r3, #3
   201e0:	ldr	r2, [r3, r2, lsl #2]
   201e4:	b	2f4f0 <flatcc_json_printer_union_table@@Base>
   201e8:	push	{r4, r5, r6, sl, fp, lr}
   201ec:	add	fp, sp, #16
   201f0:	sub	sp, sp, #8
   201f4:	mov	r4, r1
   201f8:	mov	r5, r0
   201fc:	mov	r6, #1
   20200:	movw	r0, #16916	; 0x4214
   20204:	movt	r0, #3
   20208:	stm	sp, {r0, r6}
   2020c:	mov	r0, r5
   20210:	mov	r1, #0
   20214:	mov	r2, r4
   20218:	mov	r3, #0
   2021c:	bl	2ba54 <flatcc_json_printer_int16_struct_field@@Base>
   20220:	movw	r0, #17331	; 0x43b3
   20224:	movt	r0, #3
   20228:	stm	sp, {r0, r6}
   2022c:	mov	r0, r5
   20230:	mov	r1, #1
   20234:	mov	r2, r4
   20238:	mov	r3, #2
   2023c:	bl	2b9f0 <flatcc_json_printer_int8_struct_field@@Base>
   20240:	sub	sp, fp, #16
   20244:	pop	{r4, r5, r6, sl, fp, pc}
   20248:	push	{r4, r5, r6, sl, fp, lr}
   2024c:	add	fp, sp, #16
   20250:	sub	sp, sp, #16
   20254:	mov	r4, r1
   20258:	mov	r5, r0
   2025c:	mov	r0, #2
   20260:	str	r0, [sp]
   20264:	mov	r6, #0
   20268:	movw	r3, #17578	; 0x44aa
   2026c:	movt	r3, #3
   20270:	mov	r0, r5
   20274:	mov	r2, #0
   20278:	bl	2a3e0 <flatcc_json_printer_string_field@@Base>
   2027c:	str	r6, [sp, #8]
   20280:	str	r6, [sp, #12]
   20284:	mov	r0, #3
   20288:	str	r0, [sp]
   2028c:	movw	r3, #17581	; 0x44ad
   20290:	movt	r3, #3
   20294:	mov	r0, r5
   20298:	mov	r1, r4
   2029c:	mov	r2, #1
   202a0:	bl	2ac8c <flatcc_json_printer_int64_field@@Base>
   202a4:	mov	r0, #5
   202a8:	stm	sp, {r0, r6}
   202ac:	movw	r3, #19876	; 0x4da4
   202b0:	movt	r3, #3
   202b4:	mov	r0, r5
   202b8:	mov	r1, r4
   202bc:	mov	r2, #2
   202c0:	bl	2a818 <flatcc_json_printer_uint16_field@@Base>
   202c4:	sub	sp, fp, #16
   202c8:	pop	{r4, r5, r6, sl, fp, pc}
   202cc:	push	{r4, r5, fp, lr}
   202d0:	add	fp, sp, #8
   202d4:	sub	sp, sp, #8
   202d8:	mov	r4, r1
   202dc:	mov	r5, r0
   202e0:	mov	r0, #2
   202e4:	movw	r1, #17578	; 0x44aa
   202e8:	movt	r1, #3
   202ec:	str	r1, [sp]
   202f0:	str	r0, [sp, #4]
   202f4:	mov	r0, r5
   202f8:	mov	r1, #0
   202fc:	mov	r2, r4
   20300:	mov	r3, #0
   20304:	bl	2b920 <flatcc_json_printer_uint32_struct_field@@Base>
   20308:	mov	r0, #8
   2030c:	movw	r1, #17585	; 0x44b1
   20310:	movt	r1, #3
   20314:	str	r1, [sp]
   20318:	str	r0, [sp, #4]
   2031c:	mov	r0, r5
   20320:	mov	r1, #1
   20324:	mov	r2, r4
   20328:	mov	r3, #4
   2032c:	bl	2b920 <flatcc_json_printer_uint32_struct_field@@Base>
   20330:	sub	sp, fp, #8
   20334:	pop	{r4, r5, fp, pc}
   20338:	bx	lr
   2033c:	push	{r4, r5, r6, sl, fp, lr}
   20340:	add	fp, sp, #16
   20344:	sub	sp, sp, #8
   20348:	mov	r4, r1
   2034c:	mov	r5, r0
   20350:	mov	r6, #0
   20354:	mov	r0, #4
   20358:	stm	sp, {r0, r6}
   2035c:	movw	r3, #17597	; 0x44bd
   20360:	movt	r3, #3
   20364:	mov	r0, r5
   20368:	mov	r2, #0
   2036c:	bl	2a574 <flatcc_json_printer_uint8_vector_base64_field@@Base>
   20370:	mov	r0, #1
   20374:	mov	r1, #7
   20378:	str	r1, [sp]
   2037c:	str	r0, [sp, #4]
   20380:	movw	r3, #17594	; 0x44ba
   20384:	movt	r3, #3
   20388:	mov	r0, r5
   2038c:	mov	r1, r4
   20390:	mov	r2, #1
   20394:	bl	2a574 <flatcc_json_printer_uint8_vector_base64_field@@Base>
   20398:	mov	r0, #6
   2039c:	stm	sp, {r0, r6}
   203a0:	movw	r3, #17602	; 0x44c2
   203a4:	movt	r3, #3
   203a8:	mov	r0, r5
   203ac:	mov	r1, r4
   203b0:	mov	r2, #2
   203b4:	bl	2a574 <flatcc_json_printer_uint8_vector_base64_field@@Base>
   203b8:	sub	sp, fp, #16
   203bc:	pop	{r4, r5, r6, sl, fp, pc}
   203c0:	push	{r4, r5, r6, r7, fp, lr}
   203c4:	add	fp, sp, #16
   203c8:	sub	sp, sp, #16
   203cc:	mov	r4, r1
   203d0:	mov	r5, r0
   203d4:	movw	r7, #116	; 0x74
   203d8:	movt	r7, #2
   203dc:	mov	r6, #2
   203e0:	mov	r0, #5
   203e4:	stm	sp, {r0, r6, r7}
   203e8:	movw	r3, #16738	; 0x4162
   203ec:	movt	r3, #3
   203f0:	mov	r0, r5
   203f4:	mov	r2, #0
   203f8:	bl	2b3b0 <flatcc_json_printer_int8_enum_field@@Base>
   203fc:	mov	r0, #6
   20400:	stm	sp, {r0, r6, r7}
   20404:	movw	r3, #17210	; 0x433a
   20408:	movt	r3, #3
   2040c:	mov	r0, r5
   20410:	mov	r1, r4
   20414:	mov	r2, #1
   20418:	bl	2b3b0 <flatcc_json_printer_int8_enum_field@@Base>
   2041c:	str	r6, [sp]
   20420:	str	r6, [sp, #4]
   20424:	movw	r3, #17217	; 0x4341
   20428:	movt	r3, #3
   2042c:	mov	r0, r5
   20430:	mov	r1, r4
   20434:	mov	r2, #2
   20438:	bl	2a760 <flatcc_json_printer_uint8_field@@Base>
   2043c:	mov	r0, #3
   20440:	stm	sp, {r0, r6}
   20444:	movw	r3, #17220	; 0x4344
   20448:	movt	r3, #3
   2044c:	mov	r0, r5
   20450:	mov	r1, r4
   20454:	mov	r2, #3
   20458:	bl	2a760 <flatcc_json_printer_uint8_field@@Base>
   2045c:	sub	sp, fp, #16
   20460:	pop	{r4, r5, r6, r7, fp, pc}
   20464:	bx	lr
   20468:	push	{r4, r5, fp, lr}
   2046c:	add	fp, sp, #8
   20470:	sub	sp, sp, #16
   20474:	mov	r4, r1
   20478:	mov	r5, r0
   2047c:	movw	r0, #1300	; 0x514
   20480:	movt	r0, #2
   20484:	mov	r1, #6
   20488:	str	r1, [sp]
   2048c:	str	r0, [sp, #4]
   20490:	movw	r3, #17224	; 0x4348
   20494:	movt	r3, #3
   20498:	mov	r0, r5
   2049c:	mov	r1, r4
   204a0:	mov	r2, #0
   204a4:	bl	2f25c <flatcc_json_printer_table_field@@Base>
   204a8:	movw	r0, #1456	; 0x5b0
   204ac:	movt	r0, #2
   204b0:	mov	r1, #5
   204b4:	str	r1, [sp]
   204b8:	str	r0, [sp, #4]
   204bc:	movw	r3, #17231	; 0x434f
   204c0:	movt	r3, #3
   204c4:	mov	r0, r5
   204c8:	mov	r1, r4
   204cc:	mov	r2, #1
   204d0:	bl	2f25c <flatcc_json_printer_table_field@@Base>
   204d4:	movw	r0, #448	; 0x1c0
   204d8:	movt	r0, #2
   204dc:	movw	r1, #332	; 0x14c
   204e0:	movt	r1, #2
   204e4:	mov	r2, #7
   204e8:	str	r2, [sp]
   204ec:	str	r1, [sp, #4]
   204f0:	str	r0, [sp, #8]
   204f4:	movw	r3, #17237	; 0x4355
   204f8:	movt	r3, #3
   204fc:	mov	r0, r5
   20500:	mov	r1, r4
   20504:	mov	r2, #3
   20508:	bl	2ef50 <flatcc_json_printer_union_vector_field@@Base>
   2050c:	sub	sp, fp, #8
   20510:	pop	{r4, r5, fp, pc}
   20514:	push	{r4, r5, r6, sl, fp, lr}
   20518:	add	fp, sp, #16
   2051c:	sub	sp, sp, #8
   20520:	mov	r4, r1
   20524:	mov	r5, r0
   20528:	movw	r0, #1684	; 0x694
   2052c:	movt	r0, #2
   20530:	mov	r1, #21
   20534:	str	r1, [sp]
   20538:	str	r0, [sp, #4]
   2053c:	movw	r3, #17245	; 0x435d
   20540:	movt	r3, #3
   20544:	mov	r0, r5
   20548:	mov	r1, r4
   2054c:	mov	r2, #0
   20550:	bl	2f25c <flatcc_json_printer_table_field@@Base>
   20554:	movw	r0, #2008	; 0x7d8
   20558:	movt	r0, #2
   2055c:	mov	r6, #22
   20560:	str	r6, [sp]
   20564:	str	r0, [sp, #4]
   20568:	movw	r3, #17267	; 0x4373
   2056c:	movt	r3, #3
   20570:	mov	r0, r5
   20574:	mov	r1, r4
   20578:	mov	r2, #1
   2057c:	bl	2f25c <flatcc_json_printer_table_field@@Base>
   20580:	movw	r0, #2108	; 0x83c
   20584:	movt	r0, #2
   20588:	str	r6, [sp]
   2058c:	str	r0, [sp, #4]
   20590:	movw	r3, #17290	; 0x438a
   20594:	movt	r3, #3
   20598:	mov	r0, r5
   2059c:	mov	r1, r4
   205a0:	mov	r2, #2
   205a4:	bl	2f25c <flatcc_json_printer_table_field@@Base>
   205a8:	sub	sp, fp, #16
   205ac:	pop	{r4, r5, r6, sl, fp, pc}
   205b0:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   205b4:	add	fp, sp, #24
   205b8:	sub	sp, sp, #16
   205bc:	mov	r4, r1
   205c0:	mov	r5, r0
   205c4:	movw	r6, #2388	; 0x954
   205c8:	movt	r6, #2
   205cc:	movw	r7, #2208	; 0x8a0
   205d0:	movt	r7, #2
   205d4:	mov	r0, #14
   205d8:	stm	sp, {r0, r7}
   205dc:	str	r6, [sp, #8]
   205e0:	movw	r3, #17440	; 0x4420
   205e4:	movt	r3, #3
   205e8:	mov	r0, r5
   205ec:	mov	r2, #1
   205f0:	bl	2f2e8 <flatcc_json_printer_union_field@@Base>
   205f4:	mov	r8, #10
   205f8:	str	r8, [sp]
   205fc:	str	r7, [sp, #4]
   20600:	str	r6, [sp, #8]
   20604:	movw	r3, #17455	; 0x442f
   20608:	movt	r3, #3
   2060c:	mov	r0, r5
   20610:	mov	r1, r4
   20614:	mov	r2, #3
   20618:	bl	2f2e8 <flatcc_json_printer_union_field@@Base>
   2061c:	mov	r0, #9
   20620:	stm	sp, {r0, r7}
   20624:	str	r6, [sp, #8]
   20628:	mov	r9, #5
   2062c:	movw	r3, #17466	; 0x443a
   20630:	movt	r3, #3
   20634:	mov	r0, r5
   20638:	mov	r1, r4
   2063c:	mov	r2, #5
   20640:	bl	2f2e8 <flatcc_json_printer_union_field@@Base>
   20644:	str	r9, [sp]
   20648:	str	r7, [sp, #4]
   2064c:	str	r6, [sp, #8]
   20650:	movw	r3, #17476	; 0x4444
   20654:	movt	r3, #3
   20658:	mov	r0, r5
   2065c:	mov	r1, r4
   20660:	mov	r2, #7
   20664:	bl	2f2e8 <flatcc_json_printer_union_field@@Base>
   20668:	str	r8, [sp]
   2066c:	str	r7, [sp, #4]
   20670:	str	r6, [sp, #8]
   20674:	movw	r3, #17482	; 0x444a
   20678:	movt	r3, #3
   2067c:	mov	r0, r5
   20680:	mov	r1, r4
   20684:	mov	r2, #9
   20688:	bl	2ef50 <flatcc_json_printer_union_vector_field@@Base>
   2068c:	sub	sp, fp, #24
   20690:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   20694:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   20698:	add	fp, sp, #24
   2069c:	sub	sp, sp, #16
   206a0:	mov	r4, r1
   206a4:	mov	r5, r0
   206a8:	mov	r9, #4
   206ac:	str	r9, [sp]
   206b0:	mov	r6, #0
   206b4:	movw	r3, #17313	; 0x43a1
   206b8:	movt	r3, #3
   206bc:	mov	r2, #0
   206c0:	bl	2a3e0 <flatcc_json_printer_string_field@@Base>
   206c4:	mov	r8, #9
   206c8:	str	r8, [sp]
   206cc:	str	r6, [sp, #4]
   206d0:	movw	r3, #17318	; 0x43a6
   206d4:	movt	r3, #3
   206d8:	mov	r0, r5
   206dc:	mov	r1, r4
   206e0:	mov	r2, #1
   206e4:	bl	2a8d0 <flatcc_json_printer_uint32_field@@Base>
   206e8:	str	r9, [sp]
   206ec:	movw	r3, #17328	; 0x43b0
   206f0:	movt	r3, #3
   206f4:	mov	r0, r5
   206f8:	mov	r1, r4
   206fc:	mov	r2, #2
   20700:	bl	2a3e0 <flatcc_json_printer_string_field@@Base>
   20704:	str	r6, [sp, #8]
   20708:	str	r6, [sp, #12]
   2070c:	mov	r7, #8
   20710:	str	r7, [sp]
   20714:	movw	r3, #17333	; 0x43b5
   20718:	movt	r3, #3
   2071c:	mov	r0, r5
   20720:	mov	r1, r4
   20724:	mov	r2, #3
   20728:	bl	2ac8c <flatcc_json_printer_int64_field@@Base>
   2072c:	str	r9, [sp]
   20730:	movw	r3, #17342	; 0x43be
   20734:	movt	r3, #3
   20738:	mov	r0, r5
   2073c:	mov	r1, r4
   20740:	mov	r2, #4
   20744:	bl	2a3e0 <flatcc_json_printer_string_field@@Base>
   20748:	str	r6, [sp, #8]
   2074c:	str	r6, [sp, #12]
   20750:	str	r7, [sp]
   20754:	movw	r3, #17347	; 0x43c3
   20758:	movt	r3, #3
   2075c:	mov	r0, r5
   20760:	mov	r1, r4
   20764:	mov	r2, #5
   20768:	bl	2ac8c <flatcc_json_printer_int64_field@@Base>
   2076c:	str	r8, [sp]
   20770:	str	r6, [sp, #4]
   20774:	movw	r3, #17356	; 0x43cc
   20778:	movt	r3, #3
   2077c:	mov	r0, r5
   20780:	mov	r1, r4
   20784:	mov	r2, #6
   20788:	bl	2a8d0 <flatcc_json_printer_uint32_field@@Base>
   2078c:	str	r6, [sp, #8]
   20790:	str	r6, [sp, #12]
   20794:	str	r7, [sp]
   20798:	movw	r3, #17366	; 0x43d6
   2079c:	movt	r3, #3
   207a0:	mov	r0, r5
   207a4:	mov	r1, r4
   207a8:	mov	r2, #7
   207ac:	bl	2ac8c <flatcc_json_printer_int64_field@@Base>
   207b0:	str	r8, [sp]
   207b4:	str	r6, [sp, #4]
   207b8:	movw	r3, #17375	; 0x43df
   207bc:	movt	r3, #3
   207c0:	mov	r0, r5
   207c4:	mov	r1, r4
   207c8:	mov	r2, #8
   207cc:	bl	2a8d0 <flatcc_json_printer_uint32_field@@Base>
   207d0:	sub	sp, fp, #24
   207d4:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   207d8:	push	{r4, r5, r6, sl, fp, lr}
   207dc:	add	fp, sp, #16
   207e0:	sub	sp, sp, #16
   207e4:	mov	r4, r1
   207e8:	mov	r5, r0
   207ec:	mov	r6, #0
   207f0:	str	r6, [sp, #8]
   207f4:	str	r6, [sp, #12]
   207f8:	mov	r0, #15
   207fc:	str	r0, [sp]
   20800:	movw	r3, #17385	; 0x43e9
   20804:	movt	r3, #3
   20808:	mov	r0, r5
   2080c:	mov	r2, #0
   20810:	bl	2ac8c <flatcc_json_printer_int64_field@@Base>
   20814:	mov	r0, #16
   20818:	stm	sp, {r0, r6}
   2081c:	movw	r3, #17401	; 0x43f9
   20820:	movt	r3, #3
   20824:	mov	r0, r5
   20828:	mov	r1, r4
   2082c:	mov	r2, #1
   20830:	bl	2a8d0 <flatcc_json_printer_uint32_field@@Base>
   20834:	sub	sp, fp, #16
   20838:	pop	{r4, r5, r6, sl, fp, pc}
   2083c:	push	{r4, r5, r6, sl, fp, lr}
   20840:	add	fp, sp, #16
   20844:	sub	sp, sp, #16
   20848:	mov	r4, r1
   2084c:	mov	r5, r0
   20850:	mov	r6, #0
   20854:	str	r6, [sp, #8]
   20858:	str	r6, [sp, #12]
   2085c:	mov	r0, #15
   20860:	str	r0, [sp]
   20864:	movw	r3, #17385	; 0x43e9
   20868:	movt	r3, #3
   2086c:	mov	r0, r5
   20870:	mov	r2, #0
   20874:	bl	2ac8c <flatcc_json_printer_int64_field@@Base>
   20878:	mov	r0, #21
   2087c:	stm	sp, {r0, r6}
   20880:	movw	r3, #17418	; 0x440a
   20884:	movt	r3, #3
   20888:	mov	r0, r5
   2088c:	mov	r1, r4
   20890:	mov	r2, #1
   20894:	bl	2a8d0 <flatcc_json_printer_uint32_field@@Base>
   20898:	sub	sp, fp, #16
   2089c:	pop	{r4, r5, r6, sl, fp, pc}
   208a0:	sub	r2, r1, #2
   208a4:	cmp	r2, #9
   208a8:	bhi	208ec <main@@Base+0xab5c>
   208ac:	add	r1, pc, #0
   208b0:	ldr	pc, [r1, r2, lsl #2]
   208b4:	ldrdeq	r0, [r2], -ip
   208b8:	andeq	r0, r2, r4, lsl #18
   208bc:	andeq	r0, r2, r4, lsl #18
   208c0:	andeq	r0, r2, r4, lsl #18
   208c4:	andeq	r0, r2, r4, lsl #18
   208c8:	andeq	r0, r2, r4, lsl #18
   208cc:	andeq	r0, r2, r4, lsl r9
   208d0:	andeq	r0, r2, r4, lsr #18
   208d4:	andeq	r0, r2, r4, lsr r9
   208d8:	andeq	r0, r2, r4, asr #18
   208dc:	movw	r1, #17493	; 0x4455
   208e0:	movt	r1, #3
   208e4:	mov	r2, #5
   208e8:	b	2a2e4 <flatcc_json_printer_enum@@Base>
   208ec:	cmp	r1, #255	; 0xff
   208f0:	bne	20904 <main@@Base+0xab74>
   208f4:	movw	r1, #17528	; 0x4478
   208f8:	movt	r1, #3
   208fc:	mov	r2, #6
   20900:	b	2a2e4 <flatcc_json_printer_enum@@Base>
   20904:	movw	r1, #23624	; 0x5c48
   20908:	movt	r1, #3
   2090c:	mov	r2, #4
   20910:	b	2a2e4 <flatcc_json_printer_enum@@Base>
   20914:	movw	r1, #17499	; 0x445b
   20918:	movt	r1, #3
   2091c:	mov	r2, #8
   20920:	b	2a2e4 <flatcc_json_printer_enum@@Base>
   20924:	movw	r1, #17508	; 0x4464
   20928:	movt	r1, #3
   2092c:	mov	r2, #5
   20930:	b	2a2e4 <flatcc_json_printer_enum@@Base>
   20934:	movw	r1, #17514	; 0x446a
   20938:	movt	r1, #3
   2093c:	mov	r2, #7
   20940:	b	2a2e4 <flatcc_json_printer_enum@@Base>
   20944:	movw	r1, #17522	; 0x4472
   20948:	movt	r1, #3
   2094c:	mov	r2, #5
   20950:	b	2a2e4 <flatcc_json_printer_enum@@Base>
   20954:	ldrb	r3, [r1, #8]
   20958:	sub	r2, r3, #2
   2095c:	cmp	r2, #9
   20960:	bhi	209a0 <main@@Base+0xac10>
   20964:	add	r3, pc, #0
   20968:	ldr	pc, [r3, r2, lsl #2]
   2096c:	andeq	r0, r2, ip, lsr #19
   20970:	andeq	r0, r2, r4, asr #19
   20974:	andeq	r0, r2, r4, asr #19
   20978:	andeq	r0, r2, r4, asr #19
   2097c:	andeq	r0, r2, r4, asr #19
   20980:	andeq	r0, r2, r4, asr #19
   20984:			; <UNDEFINED> instruction: 0x000209b8
   20988:	muleq	r2, r4, r9
   2098c:	muleq	r2, r4, r9
   20990:	andeq	r0, r2, r8, lsr #19
   20994:	movw	r2, #2612	; 0xa34
   20998:	movt	r2, #2
   2099c:	b	2f524 <flatcc_json_printer_union_struct@@Base>
   209a0:	cmp	r3, #255	; 0xff
   209a4:	bxne	lr
   209a8:	b	2f5b4 <flatcc_json_printer_union_string@@Base>
   209ac:	movw	r2, #2504	; 0x9c8
   209b0:	movt	r2, #2
   209b4:	b	2f4f0 <flatcc_json_printer_union_table@@Base>
   209b8:	movw	r2, #2556	; 0x9fc
   209bc:	movt	r2, #2
   209c0:	b	2f524 <flatcc_json_printer_union_struct@@Base>
   209c4:	bx	lr
   209c8:	push	{fp, lr}
   209cc:	mov	fp, sp
   209d0:	sub	sp, sp, #8
   209d4:	mov	r2, #0
   209d8:	mov	r3, #19
   209dc:	str	r3, [sp]
   209e0:	str	r2, [sp, #4]
   209e4:	movw	r3, #17535	; 0x447f
   209e8:	movt	r3, #3
   209ec:	mov	r2, #0
   209f0:	bl	2abd4 <flatcc_json_printer_int32_field@@Base>
   209f4:	mov	sp, fp
   209f8:	pop	{fp, pc}
   209fc:	push	{fp, lr}
   20a00:	mov	fp, sp
   20a04:	sub	sp, sp, #8
   20a08:	mov	r2, r1
   20a0c:	mov	r1, #11
   20a10:	movw	r3, #17555	; 0x4493
   20a14:	movt	r3, #3
   20a18:	str	r3, [sp]
   20a1c:	str	r1, [sp, #4]
   20a20:	mov	r1, #0
   20a24:	mov	r3, #0
   20a28:	bl	2b8bc <flatcc_json_printer_uint16_struct_field@@Base>
   20a2c:	mov	sp, fp
   20a30:	pop	{fp, pc}
   20a34:	push	{fp, lr}
   20a38:	mov	fp, sp
   20a3c:	sub	sp, sp, #8
   20a40:	mov	r2, r1
   20a44:	mov	r1, #10
   20a48:	movw	r3, #17567	; 0x449f
   20a4c:	movt	r3, #3
   20a50:	str	r3, [sp]
   20a54:	str	r1, [sp, #4]
   20a58:	mov	r1, #0
   20a5c:	mov	r3, #0
   20a60:	bl	2bab8 <flatcc_json_printer_int32_struct_field@@Base>
   20a64:	mov	sp, fp
   20a68:	pop	{fp, pc}
   20a6c:	ldrb	r1, [r0, #12]
   20a70:	sub	r1, r1, #1
   20a74:	uxtb	r2, r1
   20a78:	cmp	r2, #3
   20a7c:	movhi	r0, #0
   20a80:	bxhi	lr
   20a84:	sxtb	r1, r1
   20a88:	movw	r2, #17736	; 0x4548
   20a8c:	movt	r2, #3
   20a90:	ldr	r1, [r2, r1, lsl #2]
   20a94:	b	25044 <flatcc_verify_union_table@@Base>
   20a98:	push	{r4, sl, fp, lr}
   20a9c:	add	fp, sp, #8
   20aa0:	mov	r4, r0
   20aa4:	mov	r1, #0
   20aa8:	mov	r2, #0
   20aac:	bl	24a24 <flatcc_verify_string_field@@Base>
   20ab0:	cmp	r0, #0
   20ab4:	popne	{r4, sl, fp, pc}
   20ab8:	mov	r0, r4
   20abc:	mov	r1, #1
   20ac0:	mov	r2, #8
   20ac4:	mov	r3, #8
   20ac8:	bl	249b8 <flatcc_verify_field@@Base>
   20acc:	cmp	r0, #0
   20ad0:	beq	20ad8 <main@@Base+0xad48>
   20ad4:	pop	{r4, sl, fp, pc}
   20ad8:	mov	r0, r4
   20adc:	mov	r1, #2
   20ae0:	mov	r2, #2
   20ae4:	mov	r3, #2
   20ae8:	pop	{r4, sl, fp, lr}
   20aec:	b	249b8 <flatcc_verify_field@@Base>
   20af0:	mov	r0, #0
   20af4:	bx	lr
   20af8:	push	{r4, r5, r6, sl, fp, lr}
   20afc:	add	fp, sp, #16
   20b00:	sub	sp, sp, #8
   20b04:	mov	r4, r0
   20b08:	mvn	r5, #0
   20b0c:	mov	r6, #1
   20b10:	str	r6, [sp]
   20b14:	str	r5, [sp, #4]
   20b18:	mov	r1, #0
   20b1c:	mov	r2, #0
   20b20:	mov	r3, #1
   20b24:	bl	24b78 <flatcc_verify_vector_field@@Base>
   20b28:	cmp	r0, #0
   20b2c:	bne	20b54 <main@@Base+0xadc4>
   20b30:	str	r6, [sp]
   20b34:	str	r5, [sp, #4]
   20b38:	mov	r0, r4
   20b3c:	mov	r1, #1
   20b40:	mov	r2, #0
   20b44:	mov	r3, #1
   20b48:	bl	24b78 <flatcc_verify_vector_field@@Base>
   20b4c:	cmp	r0, #0
   20b50:	beq	20b5c <main@@Base+0xadcc>
   20b54:	sub	sp, fp, #16
   20b58:	pop	{r4, r5, r6, sl, fp, pc}
   20b5c:	movw	r0, #37268	; 0x9194
   20b60:	movt	r0, #1
   20b64:	mov	r1, #1
   20b68:	str	r1, [sp]
   20b6c:	str	r0, [sp, #4]
   20b70:	mov	r0, r4
   20b74:	mov	r1, #2
   20b78:	mov	r2, #0
   20b7c:	mov	r3, #0
   20b80:	bl	254a0 <flatcc_verify_table_as_nested_root@@Base>
   20b84:	sub	sp, fp, #16
   20b88:	pop	{r4, r5, r6, sl, fp, pc}
   20b8c:	push	{r4, sl, fp, lr}
   20b90:	add	fp, sp, #8
   20b94:	mov	r4, r0
   20b98:	mov	r1, #0
   20b9c:	mov	r2, #1
   20ba0:	mov	r3, #1
   20ba4:	bl	249b8 <flatcc_verify_field@@Base>
   20ba8:	cmp	r0, #0
   20bac:	bne	20be8 <main@@Base+0xae58>
   20bb0:	mov	r0, r4
   20bb4:	mov	r1, #1
   20bb8:	mov	r2, #1
   20bbc:	mov	r3, #1
   20bc0:	bl	249b8 <flatcc_verify_field@@Base>
   20bc4:	cmp	r0, #0
   20bc8:	popne	{r4, sl, fp, pc}
   20bcc:	mov	r0, r4
   20bd0:	mov	r1, #2
   20bd4:	mov	r2, #1
   20bd8:	mov	r3, #1
   20bdc:	bl	249b8 <flatcc_verify_field@@Base>
   20be0:	cmp	r0, #0
   20be4:	beq	20bec <main@@Base+0xae5c>
   20be8:	pop	{r4, sl, fp, pc}
   20bec:	mov	r0, r4
   20bf0:	mov	r1, #3
   20bf4:	mov	r2, #1
   20bf8:	mov	r3, #1
   20bfc:	pop	{r4, sl, fp, lr}
   20c00:	b	249b8 <flatcc_verify_field@@Base>
   20c04:	mov	r0, #0
   20c08:	bx	lr
   20c0c:	push	{r4, sl, fp, lr}
   20c10:	add	fp, sp, #8
   20c14:	mov	r4, r0
   20c18:	movw	r3, #3188	; 0xc74
   20c1c:	movt	r3, #2
   20c20:	mov	r1, #0
   20c24:	mov	r2, #0
   20c28:	bl	24d70 <flatcc_verify_table_field@@Base>
   20c2c:	cmp	r0, #0
   20c30:	popne	{r4, sl, fp, pc}
   20c34:	movw	r3, #3292	; 0xcdc
   20c38:	movt	r3, #2
   20c3c:	mov	r0, r4
   20c40:	mov	r1, #1
   20c44:	mov	r2, #0
   20c48:	bl	24d70 <flatcc_verify_table_field@@Base>
   20c4c:	cmp	r0, #0
   20c50:	beq	20c58 <main@@Base+0xaec8>
   20c54:	pop	{r4, sl, fp, pc}
   20c58:	movw	r3, #2668	; 0xa6c
   20c5c:	movt	r3, #2
   20c60:	mov	r0, r4
   20c64:	mov	r1, #3
   20c68:	mov	r2, #0
   20c6c:	pop	{r4, sl, fp, lr}
   20c70:	b	25718 <flatcc_verify_union_vector_field@@Base>
   20c74:	push	{r4, sl, fp, lr}
   20c78:	add	fp, sp, #8
   20c7c:	mov	r4, r0
   20c80:	movw	r3, #3460	; 0xd84
   20c84:	movt	r3, #2
   20c88:	mov	r1, #0
   20c8c:	mov	r2, #0
   20c90:	bl	24d70 <flatcc_verify_table_field@@Base>
   20c94:	cmp	r0, #0
   20c98:	popne	{r4, sl, fp, pc}
   20c9c:	movw	r3, #3708	; 0xe7c
   20ca0:	movt	r3, #2
   20ca4:	mov	r0, r4
   20ca8:	mov	r1, #1
   20cac:	mov	r2, #0
   20cb0:	bl	24d70 <flatcc_verify_table_field@@Base>
   20cb4:	cmp	r0, #0
   20cb8:	beq	20cc0 <main@@Base+0xaf30>
   20cbc:	pop	{r4, sl, fp, pc}
   20cc0:	movw	r3, #3768	; 0xeb8
   20cc4:	movt	r3, #2
   20cc8:	mov	r0, r4
   20ccc:	mov	r1, #2
   20cd0:	mov	r2, #0
   20cd4:	pop	{r4, sl, fp, lr}
   20cd8:	b	24d70 <flatcc_verify_table_field@@Base>
   20cdc:	push	{r4, sl, fp, lr}
   20ce0:	add	fp, sp, #8
   20ce4:	mov	r4, r0
   20ce8:	movw	r3, #3828	; 0xef4
   20cec:	movt	r3, #2
   20cf0:	mov	r1, #1
   20cf4:	mov	r2, #0
   20cf8:	bl	255ac <flatcc_verify_union_field@@Base>
   20cfc:	cmp	r0, #0
   20d00:	bne	20d64 <main@@Base+0xafd4>
   20d04:	movw	r3, #3828	; 0xef4
   20d08:	movt	r3, #2
   20d0c:	mov	r0, r4
   20d10:	mov	r1, #3
   20d14:	mov	r2, #0
   20d18:	bl	255ac <flatcc_verify_union_field@@Base>
   20d1c:	cmp	r0, #0
   20d20:	bne	20d64 <main@@Base+0xafd4>
   20d24:	movw	r3, #3828	; 0xef4
   20d28:	movt	r3, #2
   20d2c:	mov	r0, r4
   20d30:	mov	r1, #5
   20d34:	mov	r2, #0
   20d38:	bl	255ac <flatcc_verify_union_field@@Base>
   20d3c:	cmp	r0, #0
   20d40:	popne	{r4, sl, fp, pc}
   20d44:	movw	r3, #3828	; 0xef4
   20d48:	movt	r3, #2
   20d4c:	mov	r0, r4
   20d50:	mov	r1, #7
   20d54:	mov	r2, #0
   20d58:	bl	255ac <flatcc_verify_union_field@@Base>
   20d5c:	cmp	r0, #0
   20d60:	beq	20d68 <main@@Base+0xafd8>
   20d64:	pop	{r4, sl, fp, pc}
   20d68:	movw	r3, #3828	; 0xef4
   20d6c:	movt	r3, #2
   20d70:	mov	r0, r4
   20d74:	mov	r1, #9
   20d78:	mov	r2, #0
   20d7c:	pop	{r4, sl, fp, lr}
   20d80:	b	25718 <flatcc_verify_union_vector_field@@Base>
   20d84:	push	{r4, sl, fp, lr}
   20d88:	add	fp, sp, #8
   20d8c:	mov	r4, r0
   20d90:	mov	r1, #0
   20d94:	mov	r2, #0
   20d98:	bl	24a24 <flatcc_verify_string_field@@Base>
   20d9c:	cmp	r0, #0
   20da0:	bne	20e60 <main@@Base+0xb0d0>
   20da4:	mov	r0, r4
   20da8:	mov	r1, #1
   20dac:	mov	r2, #4
   20db0:	mov	r3, #4
   20db4:	bl	249b8 <flatcc_verify_field@@Base>
   20db8:	cmp	r0, #0
   20dbc:	bne	20e60 <main@@Base+0xb0d0>
   20dc0:	mov	r0, r4
   20dc4:	mov	r1, #2
   20dc8:	mov	r2, #0
   20dcc:	bl	24a24 <flatcc_verify_string_field@@Base>
   20dd0:	cmp	r0, #0
   20dd4:	bne	20e60 <main@@Base+0xb0d0>
   20dd8:	mov	r0, r4
   20ddc:	mov	r1, #3
   20de0:	mov	r2, #8
   20de4:	mov	r3, #8
   20de8:	bl	249b8 <flatcc_verify_field@@Base>
   20dec:	cmp	r0, #0
   20df0:	bne	20e60 <main@@Base+0xb0d0>
   20df4:	mov	r0, r4
   20df8:	mov	r1, #4
   20dfc:	mov	r2, #0
   20e00:	bl	24a24 <flatcc_verify_string_field@@Base>
   20e04:	cmp	r0, #0
   20e08:	bne	20e60 <main@@Base+0xb0d0>
   20e0c:	mov	r0, r4
   20e10:	mov	r1, #5
   20e14:	mov	r2, #8
   20e18:	mov	r3, #8
   20e1c:	bl	249b8 <flatcc_verify_field@@Base>
   20e20:	cmp	r0, #0
   20e24:	bne	20e60 <main@@Base+0xb0d0>
   20e28:	mov	r0, r4
   20e2c:	mov	r1, #6
   20e30:	mov	r2, #4
   20e34:	mov	r3, #4
   20e38:	bl	249b8 <flatcc_verify_field@@Base>
   20e3c:	cmp	r0, #0
   20e40:	popne	{r4, sl, fp, pc}
   20e44:	mov	r0, r4
   20e48:	mov	r1, #7
   20e4c:	mov	r2, #8
   20e50:	mov	r3, #8
   20e54:	bl	249b8 <flatcc_verify_field@@Base>
   20e58:	cmp	r0, #0
   20e5c:	beq	20e64 <main@@Base+0xb0d4>
   20e60:	pop	{r4, sl, fp, pc}
   20e64:	mov	r0, r4
   20e68:	mov	r1, #8
   20e6c:	mov	r2, #4
   20e70:	mov	r3, #4
   20e74:	pop	{r4, sl, fp, lr}
   20e78:	b	249b8 <flatcc_verify_field@@Base>
   20e7c:	push	{r4, sl, fp, lr}
   20e80:	add	fp, sp, #8
   20e84:	mov	r4, r0
   20e88:	mov	r1, #0
   20e8c:	mov	r2, #8
   20e90:	mov	r3, #8
   20e94:	bl	249b8 <flatcc_verify_field@@Base>
   20e98:	cmp	r0, #0
   20e9c:	popne	{r4, sl, fp, pc}
   20ea0:	mov	r0, r4
   20ea4:	mov	r1, #1
   20ea8:	mov	r2, #4
   20eac:	mov	r3, #4
   20eb0:	pop	{r4, sl, fp, lr}
   20eb4:	b	249b8 <flatcc_verify_field@@Base>
   20eb8:	push	{r4, sl, fp, lr}
   20ebc:	add	fp, sp, #8
   20ec0:	mov	r4, r0
   20ec4:	mov	r1, #0
   20ec8:	mov	r2, #8
   20ecc:	mov	r3, #8
   20ed0:	bl	249b8 <flatcc_verify_field@@Base>
   20ed4:	cmp	r0, #0
   20ed8:	popne	{r4, sl, fp, pc}
   20edc:	mov	r0, r4
   20ee0:	mov	r1, #1
   20ee4:	mov	r2, #4
   20ee8:	mov	r3, #4
   20eec:	pop	{r4, sl, fp, lr}
   20ef0:	b	249b8 <flatcc_verify_field@@Base>
   20ef4:	ldrb	r2, [r0, #12]
   20ef8:	sub	r1, r2, #2
   20efc:	cmp	r1, #9
   20f00:	bhi	20f40 <main@@Base+0xb1b0>
   20f04:	add	r2, pc, #0
   20f08:	ldr	pc, [r2, r1, lsl #2]
   20f0c:	andeq	r0, r2, r4, asr pc
   20f10:	andeq	r0, r2, ip, asr #30
   20f14:	andeq	r0, r2, ip, asr #30
   20f18:	andeq	r0, r2, ip, asr #30
   20f1c:	andeq	r0, r2, ip, asr #30
   20f20:	andeq	r0, r2, ip, asr #30
   20f24:	andeq	r0, r2, r0, ror #30
   20f28:	andeq	r0, r2, r4, lsr pc
   20f2c:	andeq	r0, r2, r4, lsr pc
   20f30:	andeq	r0, r2, r8, asr #30
   20f34:	mov	r1, #4
   20f38:	mov	r2, #4
   20f3c:	b	25078 <flatcc_verify_union_struct@@Base>
   20f40:	cmp	r2, #255	; 0xff
   20f44:	bne	20f4c <main@@Base+0xb1bc>
   20f48:	b	250f8 <flatcc_verify_union_string@@Base>
   20f4c:	mov	r0, #0
   20f50:	bx	lr
   20f54:	movw	r1, #3948	; 0xf6c
   20f58:	movt	r1, #2
   20f5c:	b	25044 <flatcc_verify_union_table@@Base>
   20f60:	mov	r1, #2
   20f64:	mov	r2, #2
   20f68:	b	25078 <flatcc_verify_union_struct@@Base>
   20f6c:	mov	r1, #0
   20f70:	mov	r2, #4
   20f74:	mov	r3, #4
   20f78:	b	249b8 <flatcc_verify_field@@Base>

00020f7c <flatcc_builder_default_alloc@@Base>:
   20f7c:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   20f80:	add	fp, sp, #24
   20f84:	mov	r4, r1
   20f88:	cmp	r2, #0
   20f8c:	beq	20fd4 <flatcc_builder_default_alloc@@Base+0x58>
   20f90:	mov	r8, r3
   20f94:	ldr	r0, [fp, #8]
   20f98:	sub	r1, r0, #1
   20f9c:	cmp	r1, #6
   20fa0:	bhi	21004 <flatcc_builder_default_alloc@@Base+0x88>
   20fa4:	mov	r0, #256	; 0x100
   20fa8:	add	r3, pc, #0
   20fac:	ldr	pc, [r3, r1, lsl #2]
   20fb0:	andeq	r1, r2, r8, lsl r0
   20fb4:	andeq	r1, r2, r4
   20fb8:	andeq	r1, r2, r4
   20fbc:	andeq	r0, r2, ip, asr #31
   20fc0:	andeq	r1, r2, ip
   20fc4:	andeq	r1, r2, r4
   20fc8:	andeq	r1, r2, r4, lsl r0
   20fcc:	mov	r0, #288	; 0x120
   20fd0:	b	21018 <flatcc_builder_default_alloc@@Base+0x9c>
   20fd4:	ldr	r0, [r4]
   20fd8:	cmp	r0, #0
   20fdc:	beq	20ff8 <flatcc_builder_default_alloc@@Base+0x7c>
   20fe0:	bl	14e50 <free@plt>
   20fe4:	mov	r6, #0
   20fe8:	str	r6, [r4]
   20fec:	str	r6, [r4, #4]
   20ff0:	mov	r0, r6
   20ff4:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   20ff8:	mov	r6, #0
   20ffc:	mov	r0, r6
   21000:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   21004:	mov	r0, #32
   21008:	b	21018 <flatcc_builder_default_alloc@@Base+0x9c>
   2100c:	mov	r0, r2
   21010:	b	21018 <flatcc_builder_default_alloc@@Base+0x9c>
   21014:	mov	r0, #64	; 0x40
   21018:	mov	r7, r0
   2101c:	lsl	r0, r0, #1
   21020:	cmp	r7, r2
   21024:	bcc	21018 <flatcc_builder_default_alloc@@Base+0x9c>
   21028:	ldr	r0, [r4, #4]
   2102c:	mov	r6, #0
   21030:	cmp	r0, r2
   21034:	lsrcs	r0, r0, #1
   21038:	cmpcs	r0, r7
   2103c:	bcs	21080 <flatcc_builder_default_alloc@@Base+0x104>
   21040:	ldr	r0, [r4]
   21044:	mov	r1, r7
   21048:	bl	14e80 <realloc@plt>
   2104c:	cmp	r0, #0
   21050:	beq	21088 <flatcc_builder_default_alloc@@Base+0x10c>
   21054:	mov	r5, r0
   21058:	cmp	r8, #0
   2105c:	beq	2107c <flatcc_builder_default_alloc@@Base+0x100>
   21060:	ldr	r1, [r4, #4]
   21064:	cmp	r7, r1
   21068:	bls	2107c <flatcc_builder_default_alloc@@Base+0x100>
   2106c:	add	r0, r5, r1
   21070:	sub	r2, r7, r1
   21074:	mov	r1, #0
   21078:	bl	14eec <memset@plt>
   2107c:	stm	r4, {r5, r7}
   21080:	mov	r0, r6
   21084:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   21088:	mvn	r6, #0
   2108c:	mov	r0, r6
   21090:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}

00021094 <flatcc_builder_flush_vtable_cache@@Base>:
   21094:	push	{r4, r5, fp, lr}
   21098:	add	fp, sp, #8
   2109c:	mov	r4, r0
   210a0:	ldr	r0, [r0, #116]	; 0x74
   210a4:	cmp	r0, #0
   210a8:	popeq	{r4, r5, fp, pc}
   210ac:	ldr	r0, [r4, #92]	; 0x5c
   210b0:	ldr	r2, [r4, #96]	; 0x60
   210b4:	mov	r5, #0
   210b8:	mov	r1, #0
   210bc:	bl	14eec <memset@plt>
   210c0:	mov	r0, #16
   210c4:	str	r5, [r4, #120]	; 0x78
   210c8:	str	r0, [r4, #124]	; 0x7c
   210cc:	pop	{r4, r5, fp, pc}

000210d0 <flatcc_builder_custom_init@@Base>:
   210d0:	push	{r4, r5, r6, r7, fp, lr}
   210d4:	add	fp, sp, #16
   210d8:	mov	r5, r3
   210dc:	mov	r6, r2
   210e0:	mov	r7, r1
   210e4:	mov	r4, r0
   210e8:	mov	r1, #0
   210ec:	mov	r2, #232	; 0xe8
   210f0:	bl	14eec <memset@plt>
   210f4:	ldr	r0, [fp, #8]
   210f8:	cmp	r7, #0
   210fc:	bne	21114 <flatcc_builder_custom_init@@Base+0x44>
   21100:	mov	r1, #1
   21104:	str	r1, [r4, #184]	; 0xb8
   21108:	add	r6, r4, #188	; 0xbc
   2110c:	movw	r7, #17568	; 0x44a0
   21110:	movt	r7, #2
   21114:	movw	r1, #3964	; 0xf7c
   21118:	movt	r1, #2
   2111c:	cmp	r5, #0
   21120:	movne	r1, r5
   21124:	str	r6, [r4, #36]	; 0x24
   21128:	str	r0, [r4, #40]	; 0x28
   2112c:	str	r7, [r4, #44]	; 0x2c
   21130:	str	r1, [r4, #48]	; 0x30
   21134:	mov	r0, #0
   21138:	pop	{r4, r5, r6, r7, fp, pc}

0002113c <flatcc_builder_init@@Base>:
   2113c:	push	{fp, lr}
   21140:	mov	fp, sp
   21144:	sub	sp, sp, #8
   21148:	mov	r1, #0
   2114c:	str	r1, [sp]
   21150:	mov	r1, #0
   21154:	mov	r2, #0
   21158:	mov	r3, #0
   2115c:	bl	210d0 <flatcc_builder_custom_init@@Base>
   21160:	mov	r0, #0
   21164:	mov	sp, fp
   21168:	pop	{fp, pc}

0002116c <flatcc_builder_custom_reset@@Base>:
   2116c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   21170:	add	fp, sp, #28
   21174:	sub	sp, sp, #4
   21178:	mov	r9, r2
   2117c:	mov	r8, r1
   21180:	mov	sl, r0
   21184:	add	r7, r0, #52	; 0x34
   21188:	mov	r5, #0
   2118c:	b	211ac <flatcc_builder_custom_reset@@Base+0x40>
   21190:	ldr	r0, [r6, #56]	; 0x38
   21194:	cmp	r0, #0
   21198:	bne	21294 <flatcc_builder_custom_reset@@Base+0x128>
   2119c:	add	r7, r7, #8
   211a0:	add	r5, r5, #1
   211a4:	cmp	r5, #8
   211a8:	beq	21200 <flatcc_builder_custom_reset@@Base+0x94>
   211ac:	add	r6, sl, r5, lsl #3
   211b0:	ldr	r0, [r6, #52]	; 0x34
   211b4:	cmp	r0, #0
   211b8:	beq	21190 <flatcc_builder_custom_reset@@Base+0x24>
   211bc:	cmp	r9, #0
   211c0:	cmpne	r5, #5
   211c4:	beq	211ec <flatcc_builder_custom_reset@@Base+0x80>
   211c8:	ldr	r0, [sl, #40]	; 0x28
   211cc:	ldr	r4, [sl, #48]	; 0x30
   211d0:	str	r5, [sp]
   211d4:	mov	r1, r7
   211d8:	mov	r2, #1
   211dc:	mov	r3, #1
   211e0:	blx	r4
   211e4:	cmp	r0, #0
   211e8:	bne	21284 <flatcc_builder_custom_reset@@Base+0x118>
   211ec:	ldr	r0, [r6, #52]	; 0x34
   211f0:	ldr	r2, [r6, #56]	; 0x38
   211f4:	mov	r1, #0
   211f8:	bl	14eec <memset@plt>
   211fc:	b	2119c <flatcc_builder_custom_reset@@Base+0x30>
   21200:	mov	r0, #0
   21204:	str	r0, [sl, #120]	; 0x78
   21208:	ldr	r1, [sl, #124]	; 0x7c
   2120c:	cmp	r1, #0
   21210:	movne	r1, #16
   21214:	strne	r1, [sl, #124]	; 0x7c
   21218:	vmov.i32	q8, #0	; 0x00000000
   2121c:	str	r0, [sl, #136]	; 0x88
   21220:	str	r0, [sl, #140]	; 0x8c
   21224:	strh	r0, [sl, #128]	; 0x80
   21228:	str	r0, [sl, #32]
   2122c:	add	r1, sl, #148	; 0x94
   21230:	vst1.32	{d16-d17}, [r1]
   21234:	ldr	r1, [sl, #52]	; 0x34
   21238:	ldr	r2, [sl, #60]	; 0x3c
   2123c:	ldr	r3, [sl, #76]	; 0x4c
   21240:	str	r2, [sl, #16]
   21244:	str	r0, [sl, #20]
   21248:	str	r0, [sl, #24]
   2124c:	str	r3, [sl]
   21250:	str	r1, [sl, #4]
   21254:	cmp	r8, #0
   21258:	movne	r0, #0
   2125c:	strne	r0, [sl, #172]	; 0xac
   21260:	strne	r0, [sl, #176]	; 0xb0
   21264:	strne	r0, [sl, #180]	; 0xb4
   21268:	ldr	r0, [sl, #184]	; 0xb8
   2126c:	mov	r5, #0
   21270:	cmp	r0, #0
   21274:	beq	21288 <flatcc_builder_custom_reset@@Base+0x11c>
   21278:	add	r0, sl, #188	; 0xbc
   2127c:	bl	2437c <flatcc_emitter_reset@@Base>
   21280:	b	21288 <flatcc_builder_custom_reset@@Base+0x11c>
   21284:	mvn	r5, #0
   21288:	mov	r0, r5
   2128c:	sub	sp, fp, #28
   21290:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   21294:	movw	r0, #18264	; 0x4758
   21298:	movt	r0, #3
   2129c:	movw	r1, #18282	; 0x476a
   212a0:	movt	r1, #3
   212a4:	movw	r3, #18352	; 0x47b0
   212a8:	movt	r3, #3
   212ac:	movw	r2, #434	; 0x1b2
   212b0:	bl	14f40 <__assert_fail@plt>

000212b4 <flatcc_builder_reset@@Base>:
   212b4:	mov	r1, #0
   212b8:	mov	r2, #0
   212bc:	b	2116c <flatcc_builder_custom_reset@@Base>

000212c0 <flatcc_builder_clear@@Base>:
   212c0:	push	{r4, r5, r6, r7, fp, lr}
   212c4:	add	fp, sp, #16
   212c8:	sub	sp, sp, #8
   212cc:	mov	r7, r0
   212d0:	add	r5, r0, #52	; 0x34
   212d4:	mov	r6, #0
   212d8:	ldr	r0, [r7, #40]	; 0x28
   212dc:	ldr	r4, [r7, #48]	; 0x30
   212e0:	str	r6, [sp]
   212e4:	mov	r1, r5
   212e8:	mov	r2, #0
   212ec:	mov	r3, #0
   212f0:	blx	r4
   212f4:	add	r5, r5, #8
   212f8:	add	r6, r6, #1
   212fc:	cmp	r6, #8
   21300:	bne	212d8 <flatcc_builder_clear@@Base+0x18>
   21304:	ldr	r0, [r7, #184]	; 0xb8
   21308:	cmp	r0, #0
   2130c:	beq	21318 <flatcc_builder_clear@@Base+0x58>
   21310:	add	r0, r7, #188	; 0xbc
   21314:	bl	2443c <flatcc_emitter_clear@@Base>
   21318:	mov	r0, r7
   2131c:	mov	r1, #0
   21320:	mov	r2, #232	; 0xe8
   21324:	sub	sp, fp, #16
   21328:	pop	{r4, r5, r6, r7, fp, lr}
   2132c:	b	14eec <memset@plt>

00021330 <flatcc_builder_enter_user_frame_ptr@@Base>:
   21330:	push	{r4, r5, r6, r7, fp, lr}
   21334:	add	fp, sp, #16
   21338:	sub	sp, sp, #8
   2133c:	mov	r4, r0
   21340:	ldr	r2, [r0, #228]	; 0xe4
   21344:	mov	r7, #0
   21348:	str	r7, [sp]
   2134c:	add	r0, r1, #7
   21350:	bic	r5, r0, #3
   21354:	mov	r0, r4
   21358:	mov	r1, #7
   2135c:	mov	r3, r5
   21360:	bl	213a8 <flatcc_builder_enter_user_frame_ptr@@Base+0x78>
   21364:	cmp	r0, #0
   21368:	beq	2139c <flatcc_builder_enter_user_frame_ptr@@Base+0x6c>
   2136c:	mov	r6, r0
   21370:	mov	r1, #0
   21374:	mov	r2, r5
   21378:	bl	14eec <memset@plt>
   2137c:	ldr	r0, [r4, #224]	; 0xe0
   21380:	str	r0, [r6], #4
   21384:	ldr	r0, [r4, #228]	; 0xe4
   21388:	add	r1, r0, #4
   2138c:	add	r0, r0, r5
   21390:	str	r1, [r4, #224]	; 0xe0
   21394:	str	r0, [r4, #228]	; 0xe4
   21398:	mov	r7, r6
   2139c:	mov	r0, r7
   213a0:	sub	sp, fp, #16
   213a4:	pop	{r4, r5, r6, r7, fp, pc}
   213a8:	push	{r4, r5, fp, lr}
   213ac:	add	fp, sp, #8
   213b0:	sub	sp, sp, #8
   213b4:	mov	r4, r2
   213b8:	add	r2, r3, r2
   213bc:	add	r3, r0, r1, lsl #3
   213c0:	add	r5, r3, #52	; 0x34
   213c4:	ldr	r3, [r3, #56]	; 0x38
   213c8:	cmp	r2, r3
   213cc:	bls	213f4 <flatcc_builder_enter_user_frame_ptr@@Base+0xc4>
   213d0:	ldr	r3, [fp, #8]
   213d4:	ldr	ip, [r0, #40]	; 0x28
   213d8:	ldr	lr, [r0, #48]	; 0x30
   213dc:	str	r1, [sp]
   213e0:	mov	r0, ip
   213e4:	mov	r1, r5
   213e8:	blx	lr
   213ec:	cmp	r0, #0
   213f0:	bne	21404 <flatcc_builder_enter_user_frame_ptr@@Base+0xd4>
   213f4:	ldr	r0, [r5]
   213f8:	add	r0, r0, r4
   213fc:	sub	sp, fp, #8
   21400:	pop	{r4, r5, fp, pc}
   21404:	movw	r0, #22800	; 0x5910
   21408:	movt	r0, #3
   2140c:	movw	r1, #18282	; 0x476a
   21410:	movt	r1, #3
   21414:	movw	r3, #22346	; 0x574a
   21418:	movt	r3, #3
   2141c:	mov	r2, #308	; 0x134
   21420:	bl	14f40 <__assert_fail@plt>

00021424 <flatcc_builder_enter_user_frame@@Base>:
   21424:	push	{r4, r5, r6, r7, fp, lr}
   21428:	add	fp, sp, #16
   2142c:	sub	sp, sp, #8
   21430:	mov	r4, r0
   21434:	ldr	r2, [r0, #228]	; 0xe4
   21438:	mov	r6, #0
   2143c:	str	r6, [sp]
   21440:	add	r0, r1, #7
   21444:	bic	r5, r0, #3
   21448:	mov	r0, r4
   2144c:	mov	r1, #7
   21450:	mov	r3, r5
   21454:	bl	213a8 <flatcc_builder_enter_user_frame_ptr@@Base+0x78>
   21458:	cmp	r0, #0
   2145c:	beq	2148c <flatcc_builder_enter_user_frame@@Base+0x68>
   21460:	mov	r7, r0
   21464:	mov	r1, #0
   21468:	mov	r2, r5
   2146c:	bl	14eec <memset@plt>
   21470:	ldr	r0, [r4, #224]	; 0xe0
   21474:	str	r0, [r7]
   21478:	ldr	r0, [r4, #228]	; 0xe4
   2147c:	add	r6, r0, #4
   21480:	add	r0, r0, r5
   21484:	str	r6, [r4, #224]	; 0xe0
   21488:	str	r0, [r4, #228]	; 0xe4
   2148c:	mov	r0, r6
   21490:	sub	sp, fp, #16
   21494:	pop	{r4, r5, r6, r7, fp, pc}

00021498 <flatcc_builder_exit_user_frame@@Base>:
   21498:	push	{fp, lr}
   2149c:	mov	fp, sp
   214a0:	ldr	r1, [r0, #224]	; 0xe0
   214a4:	cmp	r1, #0
   214a8:	subne	r2, r1, #4
   214ac:	strne	r2, [r0, #228]	; 0xe4
   214b0:	ldrne	r2, [r0, #108]	; 0x6c
   214b4:	addne	r1, r2, r1
   214b8:	ldrne	r1, [r1, #-4]
   214bc:	strne	r1, [r0, #224]	; 0xe0
   214c0:	movne	r0, r1
   214c4:	popne	{fp, pc}
   214c8:	movw	r0, #18414	; 0x47ee
   214cc:	movt	r0, #3
   214d0:	movw	r1, #18282	; 0x476a
   214d4:	movt	r1, #3
   214d8:	movw	r3, #18439	; 0x4807
   214dc:	movt	r3, #3
   214e0:	movw	r2, #542	; 0x21e
   214e4:	bl	14f40 <__assert_fail@plt>

000214e8 <flatcc_builder_exit_user_frame_at@@Base>:
   214e8:	push	{fp, lr}
   214ec:	mov	fp, sp
   214f0:	ldr	r2, [r0, #224]	; 0xe0
   214f4:	cmp	r2, r1
   214f8:	bcc	21508 <flatcc_builder_exit_user_frame_at@@Base+0x20>
   214fc:	str	r1, [r0, #224]	; 0xe0
   21500:	pop	{fp, lr}
   21504:	b	21498 <flatcc_builder_exit_user_frame@@Base>
   21508:	movw	r0, #18497	; 0x4841
   2150c:	movt	r0, #3
   21510:	movw	r1, #18282	; 0x476a
   21514:	movt	r1, #3
   21518:	movw	r3, #18528	; 0x4860
   2151c:	movt	r3, #3
   21520:	movw	r2, #551	; 0x227
   21524:	bl	14f40 <__assert_fail@plt>

00021528 <flatcc_builder_get_current_user_frame@@Base>:
   21528:	ldr	r0, [r0, #224]	; 0xe0
   2152c:	bx	lr

00021530 <flatcc_builder_get_user_frame_ptr@@Base>:
   21530:	ldr	r0, [r0, #108]	; 0x6c
   21534:	add	r0, r0, r1
   21538:	bx	lr

0002153c <flatcc_builder_embed_buffer@@Base>:
   2153c:	push	{r4, r5, r6, r7, fp, lr}
   21540:	add	fp, sp, #16
   21544:	sub	sp, sp, #80	; 0x50
   21548:	mov	r5, r3
   2154c:	mov	r6, r2
   21550:	mov	r2, r1
   21554:	mov	r4, r0
   21558:	ldr	r0, [fp, #8]
   2155c:	strh	r0, [fp, #-18]	; 0xffffffee
   21560:	ldr	r3, [r4, #152]	; 0x98
   21564:	cmp	r3, #0
   21568:	movwne	r3, #1
   2156c:	sub	r1, fp, #18
   21570:	mov	r0, r4
   21574:	bl	21648 <flatcc_builder_embed_buffer@@Base+0x10c>
   21578:	ldr	r0, [fp, #12]
   2157c:	and	r0, r0, #2
   21580:	add	r1, r5, r0, lsl #1
   21584:	ldrh	r2, [fp, #-18]	; 0xffffffee
   21588:	mov	r0, r4
   2158c:	bl	21704 <flatcc_builder_embed_buffer@@Base+0x1c8>
   21590:	mov	r7, r0
   21594:	add	r0, r0, r5
   21598:	bl	21718 <flatcc_builder_embed_buffer@@Base+0x1dc>
   2159c:	mov	r1, #0
   215a0:	str	r1, [sp, #4]
   215a4:	str	r1, [sp]
   215a8:	str	r0, [fp, #-24]	; 0xffffffe8
   215ac:	ldr	r0, [r4, #152]	; 0x98
   215b0:	cmp	r0, #0
   215b4:	beq	215d4 <flatcc_builder_embed_buffer@@Base+0x98>
   215b8:	mov	r0, #4
   215bc:	str	r0, [sp, #12]
   215c0:	sub	r1, fp, #24
   215c4:	str	r1, [sp, #8]
   215c8:	str	r0, [sp]
   215cc:	mov	r0, #1
   215d0:	str	r0, [sp, #4]
   215d4:	cmp	r5, #0
   215d8:	beq	21600 <flatcc_builder_embed_buffer@@Base+0xc4>
   215dc:	ldm	sp, {r0, r1}
   215e0:	add	r0, r0, r5
   215e4:	str	r0, [sp]
   215e8:	mov	r0, sp
   215ec:	add	r0, r0, r1, lsl #3
   215f0:	str	r6, [r0, #8]
   215f4:	str	r5, [r0, #12]
   215f8:	add	r0, r1, #1
   215fc:	str	r0, [sp, #4]
   21600:	cmp	r7, #0
   21604:	beq	21634 <flatcc_builder_embed_buffer@@Base+0xf8>
   21608:	ldm	sp, {r0, r1}
   2160c:	add	r0, r0, r7
   21610:	str	r0, [sp]
   21614:	mov	r0, sp
   21618:	add	r0, r0, r1, lsl #3
   2161c:	movw	r2, #17752	; 0x4558
   21620:	movt	r2, #3
   21624:	str	r2, [r0, #8]
   21628:	str	r7, [r0, #12]
   2162c:	add	r0, r1, #1
   21630:	str	r0, [sp, #4]
   21634:	mov	r1, sp
   21638:	mov	r0, r4
   2163c:	bl	2171c <flatcc_builder_embed_buffer@@Base+0x1e0>
   21640:	sub	sp, fp, #16
   21644:	pop	{r4, r5, r6, r7, fp, pc}
   21648:	push	{r4, r5, r6, r7, fp, lr}
   2164c:	add	fp, sp, #16
   21650:	sub	sp, sp, #72	; 0x48
   21654:	mov	r6, r3
   21658:	mov	r5, r2
   2165c:	mov	r7, r1
   21660:	mov	r4, r0
   21664:	cmp	r2, #0
   21668:	bne	21678 <flatcc_builder_embed_buffer@@Base+0x13c>
   2166c:	ldrh	r5, [r4, #132]	; 0x84
   21670:	cmp	r5, #0
   21674:	movweq	r5, #1
   21678:	mov	r0, r7
   2167c:	mov	r1, #4
   21680:	bl	224f0 <flatcc_builder_start_vector@@Base+0x80>
   21684:	mov	r0, r7
   21688:	mov	r1, r5
   2168c:	bl	224f0 <flatcc_builder_start_vector@@Base+0x80>
   21690:	cmp	r6, #0
   21694:	bne	216dc <flatcc_builder_embed_buffer@@Base+0x1a0>
   21698:	mov	r0, r4
   2169c:	mov	r1, r5
   216a0:	bl	241d0 <flatcc_builder_get_emit_context@@Base+0x8>
   216a4:	cmp	r0, #0
   216a8:	beq	216dc <flatcc_builder_embed_buffer@@Base+0x1a0>
   216ac:	str	r0, [sp, #12]
   216b0:	movw	r1, #17752	; 0x4558
   216b4:	movt	r1, #3
   216b8:	str	r1, [sp, #8]
   216bc:	str	r0, [sp]
   216c0:	mov	r0, #1
   216c4:	str	r0, [sp, #4]
   216c8:	mov	r1, sp
   216cc:	mov	r0, r4
   216d0:	bl	2287c <flatcc_builder_create_vtable@@Base+0x80>
   216d4:	cmp	r0, #0
   216d8:	beq	216e4 <flatcc_builder_embed_buffer@@Base+0x1a8>
   216dc:	sub	sp, fp, #16
   216e0:	pop	{r4, r5, r6, r7, fp, pc}
   216e4:	movw	r0, #22800	; 0x5910
   216e8:	movt	r0, #3
   216ec:	movw	r1, #18282	; 0x476a
   216f0:	movt	r1, #3
   216f4:	movw	r3, #22413	; 0x578d
   216f8:	movt	r3, #3
   216fc:	movw	r2, #702	; 0x2be
   21700:	bl	14f40 <__assert_fail@plt>
   21704:	ldr	r0, [r0, #136]	; 0x88
   21708:	sub	r0, r0, r1
   2170c:	sub	r1, r2, #1
   21710:	and	r0, r0, r1
   21714:	bx	lr
   21718:	bx	lr
   2171c:	push	{r4, r5, fp, lr}
   21720:	add	fp, sp, #8
   21724:	sub	sp, sp, #8
   21728:	ldr	r3, [r1]
   2172c:	cmp	r3, #0
   21730:	ble	21790 <flatcc_builder_embed_buffer@@Base+0x254>
   21734:	mov	r4, r0
   21738:	ldr	r0, [r0, #136]	; 0x88
   2173c:	sub	r5, r0, r3
   21740:	ldr	r2, [r1, #4]
   21744:	ldr	r0, [r4, #36]	; 0x24
   21748:	ldr	ip, [r4, #44]	; 0x2c
   2174c:	str	r3, [sp]
   21750:	add	r1, r1, #8
   21754:	mov	r3, r5
   21758:	blx	ip
   2175c:	cmp	r0, #0
   21760:	streq	r5, [r4, #136]	; 0x88
   21764:	moveq	r0, r5
   21768:	subeq	sp, fp, #8
   2176c:	popeq	{r4, r5, fp, pc}
   21770:	movw	r0, #22800	; 0x5910
   21774:	movt	r0, #3
   21778:	movw	r1, #18282	; 0x476a
   2177c:	movt	r1, #3
   21780:	movw	r3, #22479	; 0x57cf
   21784:	movt	r3, #3
   21788:	movw	r2, #651	; 0x28b
   2178c:	bl	14f40 <__assert_fail@plt>
   21790:	movw	r0, #22800	; 0x5910
   21794:	movt	r0, #3
   21798:	movw	r1, #18282	; 0x476a
   2179c:	movt	r1, #3
   217a0:	movw	r3, #22479	; 0x57cf
   217a4:	movt	r3, #3
   217a8:	movw	r2, #647	; 0x287
   217ac:	bl	14f40 <__assert_fail@plt>

000217b0 <flatcc_builder_create_buffer@@Base>:
   217b0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   217b4:	add	fp, sp, #28
   217b8:	sub	sp, sp, #92	; 0x5c
   217bc:	mov	r6, r3
   217c0:	mov	r7, r1
   217c4:	mov	r4, r0
   217c8:	ldr	r0, [fp, #8]
   217cc:	strh	r0, [fp, #-30]	; 0xffffffe2
   217d0:	mov	r0, #0
   217d4:	str	r0, [sp, #4]
   217d8:	ldr	sl, [fp, #12]
   217dc:	and	r9, sl, #1
   217e0:	sub	r1, fp, #30
   217e4:	mov	r0, r4
   217e8:	mov	r3, r9
   217ec:	bl	21648 <flatcc_builder_embed_buffer@@Base+0x10c>
   217f0:	ldrh	r5, [fp, #-30]	; 0xffffffe2
   217f4:	mov	r0, r4
   217f8:	mov	r1, r5
   217fc:	bl	2197c <flatcc_builder_create_buffer@@Base+0x1cc>
   21800:	cmp	r7, #0
   21804:	str	r6, [sp]
   21808:	beq	21824 <flatcc_builder_create_buffer@@Base+0x74>
   2180c:	ldr	r7, [r7]
   21810:	mov	r0, r7
   21814:	bl	2198c <flatcc_builder_create_buffer@@Base+0x1dc>
   21818:	bl	21718 <flatcc_builder_embed_buffer@@Base+0x1dc>
   2181c:	str	r7, [sp, #4]
   21820:	b	21828 <flatcc_builder_create_buffer@@Base+0x78>
   21824:	ldr	r7, [sp, #4]
   21828:	mov	r8, #4
   2182c:	and	r0, r8, sl, lsl #1
   21830:	cmp	r7, #0
   21834:	mov	r6, r7
   21838:	movwne	r6, #1
   2183c:	add	r0, r0, r6, lsl #2
   21840:	add	r1, r0, #4
   21844:	mov	r0, r4
   21848:	mov	r2, r5
   2184c:	bl	21704 <flatcc_builder_embed_buffer@@Base+0x1c8>
   21850:	mov	r1, #0
   21854:	str	r1, [sp, #12]
   21858:	str	r1, [sp, #8]
   2185c:	ands	ip, sl, #3
   21860:	strne	r8, [sp, #20]
   21864:	subne	r1, fp, #40	; 0x28
   21868:	strne	r1, [sp, #16]
   2186c:	strne	r8, [sp, #8]
   21870:	movne	r1, #1
   21874:	strne	r1, [sp, #12]
   21878:	ldr	r1, [sp, #8]
   2187c:	ldr	r3, [sp, #12]
   21880:	add	r5, r1, #4
   21884:	str	r5, [sp, #8]
   21888:	add	lr, sp, #8
   2188c:	add	r1, lr, r3, lsl #3
   21890:	sub	r2, fp, #36	; 0x24
   21894:	str	r2, [r1, #8]
   21898:	str	r8, [r1, #12]
   2189c:	add	r1, r3, #1
   218a0:	str	r1, [sp, #12]
   218a4:	cmp	r7, #0
   218a8:	beq	218d0 <flatcc_builder_create_buffer@@Base+0x120>
   218ac:	lsl	r2, r6, #2
   218b0:	add	r5, r5, r2
   218b4:	str	r5, [sp, #8]
   218b8:	add	r1, lr, r1, lsl #3
   218bc:	add	r5, sp, #4
   218c0:	str	r5, [r1, #8]
   218c4:	str	r2, [r1, #12]
   218c8:	add	r1, r3, #2
   218cc:	str	r1, [sp, #12]
   218d0:	cmp	r0, #0
   218d4:	beq	21904 <flatcc_builder_create_buffer@@Base+0x154>
   218d8:	ldr	r1, [sp, #8]
   218dc:	ldr	r2, [sp, #12]
   218e0:	add	r1, r1, r0
   218e4:	str	r1, [sp, #8]
   218e8:	add	r1, lr, r2, lsl #3
   218ec:	movw	r3, #17752	; 0x4558
   218f0:	movt	r3, #3
   218f4:	str	r3, [r1, #8]
   218f8:	str	r0, [r1, #12]
   218fc:	add	r0, r2, #1
   21900:	str	r0, [sp, #12]
   21904:	ldr	r0, [r4, #136]	; 0x88
   21908:	ldr	r1, [sp, #8]
   2190c:	sub	r5, r0, r1
   21910:	cmp	ip, #0
   21914:	addne	r5, r5, #4
   21918:	mov	r0, #144	; 0x90
   2191c:	cmp	r9, #0
   21920:	movweq	r0, #140	; 0x8c
   21924:	ldr	r0, [r4, r0]
   21928:	sub	r0, r0, r5
   2192c:	bl	21718 <flatcc_builder_embed_buffer@@Base+0x1dc>
   21930:	str	r0, [fp, #-40]	; 0xffffffd8
   21934:	ldr	r0, [sp]
   21938:	sub	r0, r0, r5
   2193c:	bl	21718 <flatcc_builder_embed_buffer@@Base+0x1dc>
   21940:	str	r0, [fp, #-36]	; 0xffffffdc
   21944:	add	r1, sp, #8
   21948:	mov	r0, r4
   2194c:	bl	2171c <flatcc_builder_embed_buffer@@Base+0x1e0>
   21950:	cmp	r0, #0
   21954:	subne	sp, fp, #28
   21958:	popne	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2195c:	movw	r0, #22800	; 0x5910
   21960:	movt	r0, #3
   21964:	movw	r1, #18282	; 0x476a
   21968:	movt	r1, #3
   2196c:	movw	r3, #18597	; 0x48a5
   21970:	movt	r3, #3
   21974:	mov	r2, #772	; 0x304
   21978:	bl	14f40 <__assert_fail@plt>
   2197c:	ldrh	r2, [r0, #128]	; 0x80
   21980:	cmp	r2, r1
   21984:	strhcc	r1, [r0, #128]	; 0x80
   21988:	bx	lr
   2198c:	bx	lr

00021990 <flatcc_builder_create_struct@@Base>:
   21990:	push	{r4, r5, r6, r7, fp, lr}
   21994:	add	fp, sp, #16
   21998:	sub	sp, sp, #72	; 0x48
   2199c:	cmp	r3, #0
   219a0:	beq	21a38 <flatcc_builder_create_struct@@Base+0xa8>
   219a4:	mov	r7, r3
   219a8:	mov	r5, r2
   219ac:	mov	r6, r1
   219b0:	mov	r4, r0
   219b4:	mov	r1, r3
   219b8:	bl	2197c <flatcc_builder_create_buffer@@Base+0x1cc>
   219bc:	mov	r0, r4
   219c0:	mov	r1, r5
   219c4:	mov	r2, r7
   219c8:	bl	21704 <flatcc_builder_embed_buffer@@Base+0x1c8>
   219cc:	mov	r1, #0
   219d0:	str	r1, [sp, #4]
   219d4:	str	r1, [sp]
   219d8:	cmp	r5, #0
   219dc:	strne	r5, [sp, #12]
   219e0:	strne	r6, [sp, #8]
   219e4:	strne	r5, [sp]
   219e8:	movne	r1, #1
   219ec:	strne	r1, [sp, #4]
   219f0:	cmp	r0, #0
   219f4:	beq	21a24 <flatcc_builder_create_struct@@Base+0x94>
   219f8:	ldm	sp, {r1, r2}
   219fc:	add	r1, r1, r0
   21a00:	str	r1, [sp]
   21a04:	mov	r1, sp
   21a08:	add	r1, r1, r2, lsl #3
   21a0c:	movw	r3, #17752	; 0x4558
   21a10:	movt	r3, #3
   21a14:	str	r3, [r1, #8]
   21a18:	str	r0, [r1, #12]
   21a1c:	add	r0, r2, #1
   21a20:	str	r0, [sp, #4]
   21a24:	mov	r1, sp
   21a28:	mov	r0, r4
   21a2c:	bl	2171c <flatcc_builder_embed_buffer@@Base+0x1e0>
   21a30:	sub	sp, fp, #16
   21a34:	pop	{r4, r5, r6, r7, fp, pc}
   21a38:	movw	r0, #18728	; 0x4928
   21a3c:	movt	r0, #3
   21a40:	movw	r1, #18282	; 0x476a
   21a44:	movt	r1, #3
   21a48:	movw	r3, #18739	; 0x4933
   21a4c:	movt	r3, #3
   21a50:	movw	r2, #783	; 0x30f
   21a54:	bl	14f40 <__assert_fail@plt>

00021a58 <flatcc_builder_start_buffer@@Base>:
   21a58:	push	{r4, r5, r6, r7, fp, lr}
   21a5c:	add	fp, sp, #16
   21a60:	mov	r6, r3
   21a64:	mov	r7, r2
   21a68:	mov	r5, r1
   21a6c:	mov	r4, r0
   21a70:	ldrh	r1, [r0, #128]	; 0x80
   21a74:	bl	21b14 <flatcc_builder_start_buffer@@Base+0xbc>
   21a78:	mov	r1, r0
   21a7c:	mvn	r0, #0
   21a80:	cmp	r1, #0
   21a84:	popne	{r4, r5, r6, r7, fp, pc}
   21a88:	mov	r0, #1
   21a8c:	strh	r0, [r4, #128]	; 0x80
   21a90:	ldrh	r1, [r4, #132]	; 0x84
   21a94:	ldr	r2, [r4, #32]
   21a98:	strh	r1, [r2, #34]	; 0x22
   21a9c:	strh	r7, [r4, #132]	; 0x84
   21aa0:	ldrh	r1, [r4, #164]	; 0xa4
   21aa4:	ldr	r2, [r4, #32]
   21aa8:	strh	r1, [r2, #32]
   21aac:	strh	r6, [r4, #164]	; 0xa4
   21ab0:	ldr	r1, [r4, #32]
   21ab4:	ldr	r2, [r4, #144]	; 0x90
   21ab8:	str	r2, [r1, #20]
   21abc:	ldr	r1, [r4, #32]
   21ac0:	ldr	r2, [r4, #152]	; 0x98
   21ac4:	str	r2, [r1, #28]
   21ac8:	ldr	r1, [r4, #32]
   21acc:	ldr	r2, [r4, #136]	; 0x88
   21ad0:	ldr	r3, [r4, #148]	; 0x94
   21ad4:	ldr	r7, [r4, #168]	; 0xa8
   21ad8:	add	r6, r3, #1
   21adc:	str	r2, [r4, #144]	; 0x90
   21ae0:	str	r6, [r4, #148]	; 0x94
   21ae4:	str	r3, [r4, #152]	; 0x98
   21ae8:	str	r7, [r1, #16]
   21aec:	movw	r1, #17752	; 0x4558
   21af0:	movt	r1, #3
   21af4:	cmp	r5, #0
   21af8:	movne	r1, r5
   21afc:	ldr	r1, [r1]
   21b00:	str	r1, [r4, #168]	; 0xa8
   21b04:	ldr	r1, [r4, #32]
   21b08:	strh	r0, [r1, #14]
   21b0c:	mov	r0, #0
   21b10:	pop	{r4, r5, r6, r7, fp, pc}
   21b14:	push	{r4, r5, r6, sl, fp, lr}
   21b18:	add	fp, sp, #16
   21b1c:	sub	sp, sp, #8
   21b20:	mov	r5, r1
   21b24:	mov	r4, r0
   21b28:	ldr	r1, [r0, #156]	; 0x9c
   21b2c:	ldr	r2, [r0, #160]	; 0xa0
   21b30:	add	r0, r1, #1
   21b34:	str	r0, [r4, #156]	; 0x9c
   21b38:	cmp	r1, r2
   21b3c:	bge	21b50 <flatcc_builder_start_buffer@@Base+0xf8>
   21b40:	ldr	r0, [r4, #32]
   21b44:	add	r0, r0, #36	; 0x24
   21b48:	str	r0, [r4, #32]
   21b4c:	b	21bc4 <flatcc_builder_start_buffer@@Base+0x16c>
   21b50:	ldr	r2, [r4, #176]	; 0xb0
   21b54:	mvn	r6, #0
   21b58:	cmp	r2, #1
   21b5c:	cmpge	r1, r2
   21b60:	bge	21c00 <flatcc_builder_start_buffer@@Base+0x1a8>
   21b64:	mov	r1, #0
   21b68:	str	r1, [sp]
   21b6c:	add	r0, r0, r0, lsl #3
   21b70:	mvn	r1, #35	; 0x23
   21b74:	add	r2, r1, r0, lsl #2
   21b78:	mov	r0, r4
   21b7c:	mov	r1, #4
   21b80:	mov	r3, #36	; 0x24
   21b84:	bl	213a8 <flatcc_builder_enter_user_frame_ptr@@Base+0x78>
   21b88:	str	r0, [r4, #32]
   21b8c:	cmp	r0, #0
   21b90:	beq	21c00 <flatcc_builder_start_buffer@@Base+0x1a8>
   21b94:	ldr	r0, [r4, #88]	; 0x58
   21b98:	ldr	r1, [r4, #176]	; 0xb0
   21b9c:	movw	r2, #36409	; 0x8e39
   21ba0:	movt	r2, #14563	; 0x38e3
   21ba4:	umull	r0, r2, r0, r2
   21ba8:	lsr	r0, r2, #3
   21bac:	cmp	r1, r2, lsr #3
   21bb0:	mov	r2, r0
   21bb4:	movlt	r2, r1
   21bb8:	cmp	r1, #0
   21bbc:	movle	r2, r0
   21bc0:	str	r2, [r4, #160]	; 0xa0
   21bc4:	ldr	r0, [r4, #20]
   21bc8:	ldr	r1, [r4, #32]
   21bcc:	str	r0, [r1, #8]
   21bd0:	ldrh	r2, [r4, #130]	; 0x82
   21bd4:	strh	r2, [r1, #12]
   21bd8:	strh	r5, [r4, #130]	; 0x82
   21bdc:	ldr	r2, [r4, #28]
   21be0:	mvn	r3, #3
   21be4:	stm	r1, {r2, r3}
   21be8:	mov	r6, #0
   21bec:	str	r6, [r4, #20]
   21bf0:	add	r0, r0, r2
   21bf4:	add	r0, r0, #7
   21bf8:	bic	r0, r0, #7
   21bfc:	str	r0, [r4, #28]
   21c00:	mov	r0, r6
   21c04:	sub	sp, fp, #16
   21c08:	pop	{r4, r5, r6, sl, fp, pc}

00021c0c <flatcc_builder_end_buffer@@Base>:
   21c0c:	push	{r4, r5, r6, r7, fp, lr}
   21c10:	add	fp, sp, #16
   21c14:	sub	sp, sp, #8
   21c18:	mov	r4, r0
   21c1c:	ldr	r0, [r0, #32]
   21c20:	ldrh	r0, [r0, #14]
   21c24:	cmp	r0, #1
   21c28:	bne	21cb4 <flatcc_builder_end_buffer@@Base+0xa8>
   21c2c:	mov	r5, r1
   21c30:	ldr	r6, [r4, #152]	; 0x98
   21c34:	ldrh	r7, [r4, #164]	; 0xa4
   21c38:	ldrh	r1, [r4, #132]	; 0x84
   21c3c:	mov	r0, r4
   21c40:	bl	2197c <flatcc_builder_create_buffer@@Base+0x1cc>
   21c44:	and	r0, r7, #2
   21c48:	cmp	r6, #0
   21c4c:	orrne	r0, r0, #1
   21c50:	ldrh	r2, [r4, #132]	; 0x84
   21c54:	ldrh	r1, [r4, #128]	; 0x80
   21c58:	str	r1, [sp]
   21c5c:	str	r0, [sp, #4]
   21c60:	add	r1, r4, #168	; 0xa8
   21c64:	mov	r0, r4
   21c68:	mov	r3, r5
   21c6c:	bl	217b0 <flatcc_builder_create_buffer@@Base>
   21c70:	mov	r5, r0
   21c74:	cmp	r0, #0
   21c78:	beq	21ca8 <flatcc_builder_end_buffer@@Base+0x9c>
   21c7c:	ldr	r0, [r4, #32]
   21c80:	ldr	r1, [r0, #20]
   21c84:	str	r1, [r4, #144]	; 0x90
   21c88:	ldr	r1, [r0, #28]
   21c8c:	str	r1, [r4, #152]	; 0x98
   21c90:	ldr	r1, [r0, #16]
   21c94:	str	r1, [r4, #168]	; 0xa8
   21c98:	ldrh	r0, [r0, #32]
   21c9c:	strh	r0, [r4, #164]	; 0xa4
   21ca0:	mov	r0, r4
   21ca4:	bl	21cd4 <flatcc_builder_end_buffer@@Base+0xc8>
   21ca8:	mov	r0, r5
   21cac:	sub	sp, fp, #16
   21cb0:	pop	{r4, r5, r6, r7, fp, pc}
   21cb4:	movw	r0, #18841	; 0x4999
   21cb8:	movt	r0, #3
   21cbc:	movw	r1, #18282	; 0x476a
   21cc0:	movt	r1, #3
   21cc4:	movw	r3, #18885	; 0x49c5
   21cc8:	movt	r3, #3
   21ccc:	movw	r2, #838	; 0x346
   21cd0:	bl	14f40 <__assert_fail@plt>
   21cd4:	push	{r4, sl, fp, lr}
   21cd8:	add	fp, sp, #8
   21cdc:	mov	r4, r0
   21ce0:	ldr	r0, [r0, #16]
   21ce4:	ldr	r2, [r4, #20]
   21ce8:	mov	r1, #0
   21cec:	bl	14eec <memset@plt>
   21cf0:	ldr	r0, [r4, #32]
   21cf4:	ldr	r1, [r0, #8]
   21cf8:	str	r1, [r4, #20]
   21cfc:	ldr	r1, [r0]
   21d00:	str	r1, [r4, #28]
   21d04:	ldr	r1, [r0, #4]
   21d08:	mov	r0, r4
   21d0c:	bl	21d8c <flatcc_builder_start_struct@@Base+0x4c>
   21d10:	ldrh	r1, [r4, #130]	; 0x82
   21d14:	mov	r0, r4
   21d18:	bl	2197c <flatcc_builder_create_buffer@@Base+0x1cc>
   21d1c:	ldr	r0, [r4, #32]
   21d20:	ldr	r1, [r4, #156]	; 0x9c
   21d24:	ldrh	r2, [r0, #12]
   21d28:	sub	r0, r0, #36	; 0x24
   21d2c:	str	r0, [r4, #32]
   21d30:	sub	r0, r1, #1
   21d34:	str	r0, [r4, #156]	; 0x9c
   21d38:	strh	r2, [r4, #130]	; 0x82
   21d3c:	pop	{r4, sl, fp, pc}

00021d40 <flatcc_builder_start_struct@@Base>:
   21d40:	push	{r4, r5, fp, lr}
   21d44:	add	fp, sp, #8
   21d48:	mov	r4, r1
   21d4c:	mov	r5, r0
   21d50:	mov	r1, r2
   21d54:	bl	21b14 <flatcc_builder_start_buffer@@Base+0xbc>
   21d58:	cmp	r0, #0
   21d5c:	movne	r0, #0
   21d60:	popne	{r4, r5, fp, pc}
   21d64:	ldr	r0, [r5, #32]
   21d68:	mov	r1, #2
   21d6c:	strh	r1, [r0, #14]
   21d70:	mov	r0, r5
   21d74:	mvn	r1, #3
   21d78:	bl	21d8c <flatcc_builder_start_struct@@Base+0x4c>
   21d7c:	mov	r0, r5
   21d80:	mov	r1, r4
   21d84:	pop	{r4, r5, fp, lr}
   21d88:	b	21dc4 <flatcc_builder_start_struct@@Base+0x84>
   21d8c:	push	{fp, lr}
   21d90:	mov	fp, sp
   21d94:	ldr	r2, [r0, #28]
   21d98:	ldr	ip, [r0, #32]
   21d9c:	ldr	r3, [r0, #60]	; 0x3c
   21da0:	ldr	lr, [r0, #64]	; 0x40
   21da4:	add	r3, r3, r2
   21da8:	str	r3, [r0, #16]
   21dac:	sub	r2, lr, r2
   21db0:	cmp	r2, r1
   21db4:	movhi	r2, r1
   21db8:	str	r2, [r0, #24]
   21dbc:	str	r1, [ip, #4]
   21dc0:	pop	{fp, pc}
   21dc4:	push	{r4, r5, fp, lr}
   21dc8:	add	fp, sp, #8
   21dcc:	mov	r4, r0
   21dd0:	ldr	r5, [r0, #20]
   21dd4:	ldr	r2, [r0, #24]
   21dd8:	add	r0, r5, r1
   21ddc:	str	r0, [r4, #20]
   21de0:	cmp	r0, r2
   21de4:	bcc	21e08 <flatcc_builder_start_struct@@Base+0xc8>
   21de8:	add	r1, r0, #1
   21dec:	mov	r0, r4
   21df0:	mvn	r2, #3
   21df4:	bl	241e0 <flatcc_builder_get_emit_context@@Base+0x18>
   21df8:	mov	r1, r0
   21dfc:	mov	r0, #0
   21e00:	cmp	r1, #0
   21e04:	popne	{r4, r5, fp, pc}
   21e08:	ldr	r0, [r4, #16]
   21e0c:	add	r0, r0, r5
   21e10:	pop	{r4, r5, fp, pc}

00021e14 <flatcc_builder_struct_edit@@Base>:
   21e14:	ldr	r0, [r0, #16]
   21e18:	bx	lr

00021e1c <flatcc_builder_end_struct@@Base>:
   21e1c:	push	{r4, r5, fp, lr}
   21e20:	add	fp, sp, #8
   21e24:	mov	r4, r0
   21e28:	ldr	r0, [r0, #32]
   21e2c:	ldrh	r0, [r0, #14]
   21e30:	cmp	r0, #2
   21e34:	bne	21e64 <flatcc_builder_end_struct@@Base+0x48>
   21e38:	ldrh	r3, [r4, #130]	; 0x82
   21e3c:	ldr	r1, [r4, #16]
   21e40:	ldr	r2, [r4, #20]
   21e44:	mov	r0, r4
   21e48:	bl	21990 <flatcc_builder_create_struct@@Base>
   21e4c:	mov	r5, r0
   21e50:	cmp	r0, #0
   21e54:	movne	r0, r4
   21e58:	blne	21cd4 <flatcc_builder_end_buffer@@Base+0xc8>
   21e5c:	mov	r0, r5
   21e60:	pop	{r4, r5, fp, pc}
   21e64:	movw	r0, #18974	; 0x4a1e
   21e68:	movt	r0, #3
   21e6c:	movw	r1, #18282	; 0x476a
   21e70:	movt	r1, #3
   21e74:	movw	r3, #19018	; 0x4a4a
   21e78:	movt	r3, #3
   21e7c:	mov	r2, #872	; 0x368
   21e80:	bl	14f40 <__assert_fail@plt>

00021e84 <flatcc_builder_extend_vector@@Base>:
   21e84:	push	{r4, r5, fp, lr}
   21e88:	add	fp, sp, #8
   21e8c:	mov	r5, r1
   21e90:	mov	r4, r0
   21e94:	ldr	r0, [r0, #32]
   21e98:	ldr	r2, [r0, #24]
   21e9c:	mov	r0, r4
   21ea0:	bl	21ec8 <flatcc_builder_extend_vector@@Base+0x44>
   21ea4:	cmp	r0, #0
   21ea8:	movne	r0, #0
   21eac:	popne	{r4, r5, fp, pc}
   21eb0:	ldr	r0, [r4, #32]
   21eb4:	ldr	r0, [r0, #16]
   21eb8:	mul	r1, r0, r5
   21ebc:	mov	r0, r4
   21ec0:	pop	{r4, r5, fp, lr}
   21ec4:	b	21dc4 <flatcc_builder_start_struct@@Base+0x84>
   21ec8:	push	{fp, lr}
   21ecc:	mov	fp, sp
   21ed0:	ldr	r0, [r0, #32]
   21ed4:	ldr	r3, [r0, #20]
   21ed8:	adds	r1, r3, r1
   21edc:	bcs	21ef0 <flatcc_builder_extend_vector@@Base+0x6c>
   21ee0:	cmp	r1, r2
   21ee4:	strls	r1, [r0, #20]
   21ee8:	movls	r0, #0
   21eec:	popls	{fp, pc}
   21ef0:	movw	r0, #22553	; 0x5819
   21ef4:	movt	r0, #3
   21ef8:	movw	r1, #18282	; 0x476a
   21efc:	movt	r1, #3
   21f00:	movw	r3, #22580	; 0x5834
   21f04:	movt	r3, #3
   21f08:	mov	r2, #892	; 0x37c
   21f0c:	bl	14f40 <__assert_fail@plt>

00021f10 <flatcc_builder_vector_push@@Base>:
   21f10:	push	{fp, lr}
   21f14:	mov	fp, sp
   21f18:	ldr	r2, [r0, #32]
   21f1c:	ldrh	r3, [r2, #14]
   21f20:	cmp	r3, #4
   21f24:	bne	21f50 <flatcc_builder_vector_push@@Base+0x40>
   21f28:	ldr	ip, [r2, #20]
   21f2c:	ldr	r3, [r2, #24]
   21f30:	cmp	ip, r3
   21f34:	bhi	21f70 <flatcc_builder_vector_push@@Base+0x60>
   21f38:	add	r3, ip, #1
   21f3c:	str	r3, [r2, #20]
   21f40:	ldr	r2, [r0, #32]
   21f44:	ldr	r2, [r2, #16]
   21f48:	pop	{fp, lr}
   21f4c:	b	21f90 <flatcc_builder_vector_push@@Base+0x80>
   21f50:	movw	r0, #19085	; 0x4a8d
   21f54:	movt	r0, #3
   21f58:	movw	r1, #18282	; 0x476a
   21f5c:	movt	r1, #3
   21f60:	movw	r3, #19129	; 0x4ab9
   21f64:	movt	r3, #3
   21f68:	movw	r2, #907	; 0x38b
   21f6c:	bl	14f40 <__assert_fail@plt>
   21f70:	movw	r0, #19196	; 0x4afc
   21f74:	movt	r0, #3
   21f78:	movw	r1, #18282	; 0x476a
   21f7c:	movt	r1, #3
   21f80:	movw	r3, #19129	; 0x4ab9
   21f84:	movt	r3, #3
   21f88:	mov	r2, #908	; 0x38c
   21f8c:	bl	14f40 <__assert_fail@plt>
   21f90:	push	{r4, r5, r6, sl, fp, lr}
   21f94:	add	fp, sp, #16
   21f98:	mov	r4, r2
   21f9c:	mov	r5, r1
   21fa0:	mov	r1, r2
   21fa4:	bl	21dc4 <flatcc_builder_start_struct@@Base+0x84>
   21fa8:	mov	r6, r0
   21fac:	cmp	r0, #0
   21fb0:	beq	21fc4 <flatcc_builder_vector_push@@Base+0xb4>
   21fb4:	mov	r0, r6
   21fb8:	mov	r1, r5
   21fbc:	mov	r2, r4
   21fc0:	bl	14e5c <memcpy@plt>
   21fc4:	mov	r0, r6
   21fc8:	pop	{r4, r5, r6, sl, fp, pc}

00021fcc <flatcc_builder_append_vector@@Base>:
   21fcc:	push	{r4, r5, r6, sl, fp, lr}
   21fd0:	add	fp, sp, #16
   21fd4:	mov	r4, r1
   21fd8:	mov	r6, r0
   21fdc:	ldr	r0, [r0, #32]
   21fe0:	ldrh	r1, [r0, #14]
   21fe4:	cmp	r1, #4
   21fe8:	bne	2202c <flatcc_builder_append_vector@@Base+0x60>
   21fec:	mov	r5, r2
   21ff0:	ldr	r2, [r0, #24]
   21ff4:	mov	r0, r6
   21ff8:	mov	r1, r5
   21ffc:	bl	21ec8 <flatcc_builder_extend_vector@@Base+0x44>
   22000:	cmp	r0, #0
   22004:	beq	22010 <flatcc_builder_append_vector@@Base+0x44>
   22008:	mov	r0, #0
   2200c:	pop	{r4, r5, r6, sl, fp, pc}
   22010:	ldr	r0, [r6, #32]
   22014:	ldr	r0, [r0, #16]
   22018:	mul	r2, r0, r5
   2201c:	mov	r0, r6
   22020:	mov	r1, r4
   22024:	pop	{r4, r5, r6, sl, fp, lr}
   22028:	b	21f90 <flatcc_builder_vector_push@@Base+0x80>
   2202c:	movw	r0, #19085	; 0x4a8d
   22030:	movt	r0, #3
   22034:	movw	r1, #18282	; 0x476a
   22038:	movt	r1, #3
   2203c:	movw	r3, #19257	; 0x4b39
   22040:	movt	r3, #3
   22044:	movw	r2, #915	; 0x393
   22048:	bl	14f40 <__assert_fail@plt>

0002204c <flatcc_builder_extend_offset_vector@@Base>:
   2204c:	push	{r4, r5, fp, lr}
   22050:	add	fp, sp, #8
   22054:	mov	r5, r1
   22058:	mov	r4, r0
   2205c:	mvn	r2, #-1073741824	; 0xc0000000
   22060:	bl	21ec8 <flatcc_builder_extend_vector@@Base+0x44>
   22064:	cmp	r0, #0
   22068:	movne	r0, #0
   2206c:	popne	{r4, r5, fp, pc}
   22070:	lsl	r1, r5, #2
   22074:	mov	r0, r4
   22078:	pop	{r4, r5, fp, lr}
   2207c:	b	21dc4 <flatcc_builder_start_struct@@Base+0x84>

00022080 <flatcc_builder_offset_vector_push@@Base>:
   22080:	push	{r4, r5, fp, lr}
   22084:	add	fp, sp, #8
   22088:	mov	r4, r1
   2208c:	ldr	r1, [r0, #32]
   22090:	ldrh	r2, [r1, #14]
   22094:	cmp	r2, #5
   22098:	bne	220d0 <flatcc_builder_offset_vector_push@@Base+0x50>
   2209c:	ldr	r2, [r1, #20]
   220a0:	mov	r5, #0
   220a4:	cmn	r2, #-1073741823	; 0xc0000001
   220a8:	beq	220c8 <flatcc_builder_offset_vector_push@@Base+0x48>
   220ac:	add	r2, r2, #1
   220b0:	str	r2, [r1, #20]
   220b4:	mov	r1, #4
   220b8:	bl	21dc4 <flatcc_builder_start_struct@@Base+0x84>
   220bc:	cmp	r0, #0
   220c0:	strne	r4, [r0]
   220c4:	movne	r5, r0
   220c8:	mov	r0, r5
   220cc:	pop	{r4, r5, fp, pc}
   220d0:	movw	r0, #19334	; 0x4b86
   220d4:	movt	r0, #3
   220d8:	movw	r1, #18282	; 0x476a
   220dc:	movt	r1, #3
   220e0:	movw	r3, #19385	; 0x4bb9
   220e4:	movt	r3, #3
   220e8:	movw	r2, #934	; 0x3a6
   220ec:	bl	14f40 <__assert_fail@plt>

000220f0 <flatcc_builder_append_offset_vector@@Base>:
   220f0:	push	{r4, r5, r6, sl, fp, lr}
   220f4:	add	fp, sp, #16
   220f8:	mov	r6, r0
   220fc:	ldr	r0, [r0, #32]
   22100:	ldrh	r0, [r0, #14]
   22104:	cmp	r0, #5
   22108:	bne	22148 <flatcc_builder_append_offset_vector@@Base+0x58>
   2210c:	mov	r5, r2
   22110:	mov	r4, r1
   22114:	mov	r0, r6
   22118:	mov	r1, r2
   2211c:	mvn	r2, #-1073741824	; 0xc0000000
   22120:	bl	21ec8 <flatcc_builder_extend_vector@@Base+0x44>
   22124:	cmp	r0, #0
   22128:	beq	22134 <flatcc_builder_append_offset_vector@@Base+0x44>
   2212c:	mov	r0, #0
   22130:	pop	{r4, r5, r6, sl, fp, pc}
   22134:	lsl	r2, r5, #2
   22138:	mov	r0, r6
   2213c:	mov	r1, r4
   22140:	pop	{r4, r5, r6, sl, fp, lr}
   22144:	b	21f90 <flatcc_builder_vector_push@@Base+0x80>
   22148:	movw	r0, #19334	; 0x4b86
   2214c:	movt	r0, #3
   22150:	movw	r1, #18282	; 0x476a
   22154:	movt	r1, #3
   22158:	movw	r3, #19483	; 0x4c1b
   2215c:	movt	r3, #3
   22160:	mov	r2, #948	; 0x3b4
   22164:	bl	14f40 <__assert_fail@plt>

00022168 <flatcc_builder_extend_string@@Base>:
   22168:	push	{r4, r5, fp, lr}
   2216c:	add	fp, sp, #8
   22170:	mov	r5, r0
   22174:	ldr	r0, [r0, #32]
   22178:	ldrh	r0, [r0, #14]
   2217c:	cmp	r0, #6
   22180:	bne	221b0 <flatcc_builder_extend_string@@Base+0x48>
   22184:	mov	r4, r1
   22188:	mov	r0, r5
   2218c:	mvn	r2, #0
   22190:	bl	21ec8 <flatcc_builder_extend_vector@@Base+0x44>
   22194:	cmp	r0, #0
   22198:	movne	r0, #0
   2219c:	popne	{r4, r5, fp, pc}
   221a0:	mov	r0, r5
   221a4:	mov	r1, r4
   221a8:	pop	{r4, r5, fp, lr}
   221ac:	b	21dc4 <flatcc_builder_start_struct@@Base+0x84>
   221b0:	movw	r0, #19599	; 0x4c8f
   221b4:	movt	r0, #3
   221b8:	movw	r1, #18282	; 0x476a
   221bc:	movt	r1, #3
   221c0:	movw	r3, #19643	; 0x4cbb
   221c4:	movt	r3, #3
   221c8:	movw	r2, #957	; 0x3bd
   221cc:	bl	14f40 <__assert_fail@plt>

000221d0 <flatcc_builder_append_string@@Base>:
   221d0:	push	{r4, r5, r6, sl, fp, lr}
   221d4:	add	fp, sp, #16
   221d8:	mov	r6, r0
   221dc:	ldr	r0, [r0, #32]
   221e0:	ldrh	r0, [r0, #14]
   221e4:	cmp	r0, #6
   221e8:	bne	22228 <flatcc_builder_append_string@@Base+0x58>
   221ec:	mov	r4, r2
   221f0:	mov	r5, r1
   221f4:	mov	r0, r6
   221f8:	mov	r1, r2
   221fc:	mvn	r2, #0
   22200:	bl	21ec8 <flatcc_builder_extend_vector@@Base+0x44>
   22204:	cmp	r0, #0
   22208:	beq	22214 <flatcc_builder_append_string@@Base+0x44>
   2220c:	mov	r0, #0
   22210:	pop	{r4, r5, r6, sl, fp, pc}
   22214:	mov	r0, r6
   22218:	mov	r1, r5
   2221c:	mov	r2, r4
   22220:	pop	{r4, r5, r6, sl, fp, lr}
   22224:	b	21f90 <flatcc_builder_vector_push@@Base+0x80>
   22228:	movw	r0, #19599	; 0x4c8f
   2222c:	movt	r0, #3
   22230:	movw	r1, #18282	; 0x476a
   22234:	movt	r1, #3
   22238:	movw	r3, #19706	; 0x4cfa
   2223c:	movt	r3, #3
   22240:	movw	r2, #966	; 0x3c6
   22244:	bl	14f40 <__assert_fail@plt>

00022248 <flatcc_builder_append_string_str@@Base>:
   22248:	push	{r4, r5, fp, lr}
   2224c:	add	fp, sp, #8
   22250:	mov	r4, r1
   22254:	mov	r5, r0
   22258:	mov	r0, r1
   2225c:	bl	14ec8 <strlen@plt>
   22260:	mov	r2, r0
   22264:	mov	r0, r5
   22268:	mov	r1, r4
   2226c:	pop	{r4, r5, fp, lr}
   22270:	b	221d0 <flatcc_builder_append_string@@Base>

00022274 <flatcc_builder_append_string_strn@@Base>:
   22274:	push	{r4, r5, fp, lr}
   22278:	add	fp, sp, #8
   2227c:	mov	r4, r1
   22280:	mov	r5, r0
   22284:	mov	r0, r1
   22288:	mov	r1, r2
   2228c:	bl	222a4 <flatcc_builder_append_string_strn@@Base+0x30>
   22290:	mov	r2, r0
   22294:	mov	r0, r5
   22298:	mov	r1, r4
   2229c:	pop	{r4, r5, fp, lr}
   222a0:	b	221d0 <flatcc_builder_append_string@@Base>
   222a4:	push	{r4, r5, fp, lr}
   222a8:	add	fp, sp, #8
   222ac:	mov	r4, r1
   222b0:	mov	r5, r0
   222b4:	mov	r1, #0
   222b8:	mov	r2, r4
   222bc:	bl	14f10 <memchr@plt>
   222c0:	cmp	r0, #0
   222c4:	subne	r4, r0, r5
   222c8:	mov	r0, r4
   222cc:	pop	{r4, r5, fp, pc}

000222d0 <flatcc_builder_truncate_vector@@Base>:
   222d0:	push	{fp, lr}
   222d4:	mov	fp, sp
   222d8:	ldr	r2, [r0, #32]
   222dc:	ldrh	r3, [r2, #14]
   222e0:	cmp	r3, #4
   222e4:	bne	22314 <flatcc_builder_truncate_vector@@Base+0x44>
   222e8:	ldr	r3, [r2, #20]
   222ec:	cmp	r3, r1
   222f0:	bcc	22334 <flatcc_builder_truncate_vector@@Base+0x64>
   222f4:	sub	r3, r3, r1
   222f8:	str	r3, [r2, #20]
   222fc:	ldr	r2, [r0, #32]
   22300:	ldr	r2, [r2, #16]
   22304:	mul	r1, r2, r1
   22308:	bl	22354 <flatcc_builder_truncate_vector@@Base+0x84>
   2230c:	mov	r0, #0
   22310:	pop	{fp, pc}
   22314:	movw	r0, #19085	; 0x4a8d
   22318:	movt	r0, #3
   2231c:	movw	r1, #18282	; 0x476a
   22320:	movt	r1, #3
   22324:	movw	r3, #19783	; 0x4d47
   22328:	movt	r3, #3
   2232c:	movw	r2, #985	; 0x3d9
   22330:	bl	14f40 <__assert_fail@plt>
   22334:	movw	r0, #19846	; 0x4d86
   22338:	movt	r0, #3
   2233c:	movw	r1, #18282	; 0x476a
   22340:	movt	r1, #3
   22344:	movw	r3, #19783	; 0x4d47
   22348:	movt	r3, #3
   2234c:	movw	r2, #986	; 0x3da
   22350:	bl	14f40 <__assert_fail@plt>
   22354:	mov	r2, r1
   22358:	ldr	r1, [r0, #16]
   2235c:	ldr	r3, [r0, #20]
   22360:	sub	r3, r3, r2
   22364:	str	r3, [r0, #20]
   22368:	add	r0, r1, r3
   2236c:	mov	r1, #0
   22370:	b	14eec <memset@plt>

00022374 <flatcc_builder_truncate_offset_vector@@Base>:
   22374:	push	{fp, lr}
   22378:	mov	fp, sp
   2237c:	ldr	r2, [r0, #32]
   22380:	ldrh	r3, [r2, #14]
   22384:	cmp	r3, #5
   22388:	bne	223b8 <flatcc_builder_truncate_offset_vector@@Base+0x44>
   2238c:	ldr	r3, [r2, #20]
   22390:	cmp	r3, r1
   22394:	bcc	223d8 <flatcc_builder_truncate_offset_vector@@Base+0x64>
   22398:	sub	r3, r3, r1
   2239c:	str	r3, [r2, #20]
   223a0:	ldr	r2, [r0, #32]
   223a4:	ldr	r2, [r2, #16]
   223a8:	mul	r1, r2, r1
   223ac:	bl	22354 <flatcc_builder_truncate_vector@@Base+0x84>
   223b0:	mov	r0, #0
   223b4:	pop	{fp, pc}
   223b8:	movw	r0, #19334	; 0x4b86
   223bc:	movt	r0, #3
   223c0:	movw	r1, #18282	; 0x476a
   223c4:	movt	r1, #3
   223c8:	movw	r3, #19882	; 0x4daa
   223cc:	movt	r3, #3
   223d0:	movw	r2, #994	; 0x3e2
   223d4:	bl	14f40 <__assert_fail@plt>
   223d8:	movw	r0, #19952	; 0x4df0
   223dc:	movt	r0, #3
   223e0:	movw	r1, #18282	; 0x476a
   223e4:	movt	r1, #3
   223e8:	movw	r3, #19882	; 0x4daa
   223ec:	movt	r3, #3
   223f0:	movw	r2, #995	; 0x3e3
   223f4:	bl	14f40 <__assert_fail@plt>

000223f8 <flatcc_builder_truncate_string@@Base>:
   223f8:	push	{fp, lr}
   223fc:	mov	fp, sp
   22400:	ldr	r2, [r0, #32]
   22404:	ldrh	r3, [r2, #14]
   22408:	cmp	r3, #6
   2240c:	bne	22430 <flatcc_builder_truncate_string@@Base+0x38>
   22410:	ldr	r3, [r2, #20]
   22414:	cmp	r3, r1
   22418:	bcc	22450 <flatcc_builder_truncate_string@@Base+0x58>
   2241c:	sub	r3, r3, r1
   22420:	str	r3, [r2, #20]
   22424:	bl	22354 <flatcc_builder_truncate_vector@@Base+0x84>
   22428:	mov	r0, #0
   2242c:	pop	{fp, pc}
   22430:	movw	r0, #19599	; 0x4c8f
   22434:	movt	r0, #3
   22438:	movw	r1, #18282	; 0x476a
   2243c:	movt	r1, #3
   22440:	movw	r3, #20011	; 0x4e2b
   22444:	movt	r3, #3
   22448:	movw	r2, #1003	; 0x3eb
   2244c:	bl	14f40 <__assert_fail@plt>
   22450:	movw	r0, #20074	; 0x4e6a
   22454:	movt	r0, #3
   22458:	movw	r1, #18282	; 0x476a
   2245c:	movt	r1, #3
   22460:	movw	r3, #20011	; 0x4e2b
   22464:	movt	r3, #3
   22468:	mov	r2, #1004	; 0x3ec
   2246c:	bl	14f40 <__assert_fail@plt>

00022470 <flatcc_builder_start_vector@@Base>:
   22470:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   22474:	add	fp, sp, #24
   22478:	sub	sp, sp, #8
   2247c:	mov	r5, r3
   22480:	mov	r6, r1
   22484:	mov	r4, r0
   22488:	strh	r2, [sp, #6]
   2248c:	add	r0, sp, #6
   22490:	mov	r8, #4
   22494:	mov	r1, #4
   22498:	bl	224f0 <flatcc_builder_start_vector@@Base+0x80>
   2249c:	ldrh	r1, [sp, #6]
   224a0:	mov	r0, r4
   224a4:	bl	21b14 <flatcc_builder_start_buffer@@Base+0xbc>
   224a8:	mvn	r7, #0
   224ac:	cmp	r0, #0
   224b0:	bne	224e4 <flatcc_builder_start_vector@@Base+0x74>
   224b4:	ldr	r0, [r4, #32]
   224b8:	str	r6, [r0, #16]
   224bc:	ldr	r0, [r4, #32]
   224c0:	mov	r7, #0
   224c4:	str	r7, [r0, #20]
   224c8:	ldr	r0, [r4, #32]
   224cc:	str	r5, [r0, #24]
   224d0:	ldr	r0, [r4, #32]
   224d4:	strh	r8, [r0, #14]
   224d8:	mov	r0, r4
   224dc:	mvn	r1, #3
   224e0:	bl	21d8c <flatcc_builder_start_struct@@Base+0x4c>
   224e4:	mov	r0, r7
   224e8:	sub	sp, fp, #24
   224ec:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   224f0:	ldrh	r2, [r0]
   224f4:	cmp	r2, r1
   224f8:	strhcc	r1, [r0]
   224fc:	bx	lr

00022500 <flatcc_builder_start_offset_vector@@Base>:
   22500:	push	{r4, r5, r6, sl, fp, lr}
   22504:	add	fp, sp, #16
   22508:	mov	r4, r0
   2250c:	mov	r6, #4
   22510:	mov	r1, #4
   22514:	bl	21b14 <flatcc_builder_start_buffer@@Base+0xbc>
   22518:	mvn	r5, #0
   2251c:	cmp	r0, #0
   22520:	beq	2252c <flatcc_builder_start_offset_vector@@Base+0x2c>
   22524:	mov	r0, r5
   22528:	pop	{r4, r5, r6, sl, fp, pc}
   2252c:	ldr	r0, [r4, #32]
   22530:	str	r6, [r0, #16]
   22534:	ldr	r0, [r4, #32]
   22538:	mov	r5, #0
   2253c:	str	r5, [r0, #20]
   22540:	ldr	r0, [r4, #32]
   22544:	mov	r1, #5
   22548:	strh	r1, [r0, #14]
   2254c:	mov	r0, r4
   22550:	mvn	r1, #3
   22554:	bl	21d8c <flatcc_builder_start_struct@@Base+0x4c>
   22558:	mov	r0, r5
   2255c:	pop	{r4, r5, r6, sl, fp, pc}

00022560 <flatcc_builder_create_offset_vector@@Base>:
   22560:	push	{r4, r5, r6, sl, fp, lr}
   22564:	add	fp, sp, #16
   22568:	mov	r6, r2
   2256c:	mov	r5, r1
   22570:	mov	r4, r0
   22574:	bl	22500 <flatcc_builder_start_offset_vector@@Base>
   22578:	cmp	r0, #0
   2257c:	beq	22588 <flatcc_builder_create_offset_vector@@Base+0x28>
   22580:	mov	r0, #0
   22584:	pop	{r4, r5, r6, sl, fp, pc}
   22588:	mov	r0, r4
   2258c:	mov	r1, r6
   22590:	bl	2204c <flatcc_builder_extend_offset_vector@@Base>
   22594:	cmp	r0, #0
   22598:	beq	22580 <flatcc_builder_create_offset_vector@@Base+0x20>
   2259c:	lsl	r2, r6, #2
   225a0:	mov	r1, r5
   225a4:	bl	14e5c <memcpy@plt>
   225a8:	mov	r0, r4
   225ac:	pop	{r4, r5, r6, sl, fp, lr}
   225b0:	b	225b4 <flatcc_builder_end_offset_vector@@Base>

000225b4 <flatcc_builder_end_offset_vector@@Base>:
   225b4:	push	{r4, r5, fp, lr}
   225b8:	add	fp, sp, #8
   225bc:	mov	r4, r0
   225c0:	ldr	r0, [r0, #32]
   225c4:	ldrh	r1, [r0, #14]
   225c8:	cmp	r1, #5
   225cc:	bne	225f8 <flatcc_builder_end_offset_vector@@Base+0x44>
   225d0:	ldr	r2, [r0, #20]
   225d4:	ldr	r1, [r4, #16]
   225d8:	mov	r0, r4
   225dc:	bl	2313c <flatcc_builder_create_offset_vector_direct@@Base>
   225e0:	mov	r5, r0
   225e4:	cmp	r0, #0
   225e8:	movne	r0, r4
   225ec:	blne	21cd4 <flatcc_builder_end_buffer@@Base+0xc8>
   225f0:	mov	r0, r5
   225f4:	pop	{r4, r5, fp, pc}
   225f8:	movw	r0, #19334	; 0x4b86
   225fc:	movt	r0, #3
   22600:	movw	r1, #18282	; 0x476a
   22604:	movt	r1, #3
   22608:	movw	r3, #20917	; 0x51b5
   2260c:	movt	r3, #3
   22610:	movw	r2, #1480	; 0x5c8
   22614:	bl	14f40 <__assert_fail@plt>

00022618 <flatcc_builder_start_string@@Base>:
   22618:	push	{r4, r5, r6, sl, fp, lr}
   2261c:	add	fp, sp, #16
   22620:	mov	r4, r0
   22624:	mov	r6, #1
   22628:	mov	r1, #1
   2262c:	bl	21b14 <flatcc_builder_start_buffer@@Base+0xbc>
   22630:	mvn	r5, #0
   22634:	cmp	r0, #0
   22638:	beq	22644 <flatcc_builder_start_string@@Base+0x2c>
   2263c:	mov	r0, r5
   22640:	pop	{r4, r5, r6, sl, fp, pc}
   22644:	ldr	r0, [r4, #32]
   22648:	str	r6, [r0, #16]
   2264c:	ldr	r0, [r4, #32]
   22650:	mov	r5, #0
   22654:	str	r5, [r0, #20]
   22658:	ldr	r0, [r4, #32]
   2265c:	mov	r1, #6
   22660:	strh	r1, [r0, #14]
   22664:	mov	r0, r4
   22668:	mvn	r1, #3
   2266c:	bl	21d8c <flatcc_builder_start_struct@@Base+0x4c>
   22670:	mov	r0, r5
   22674:	pop	{r4, r5, r6, sl, fp, pc}

00022678 <flatcc_builder_reserve_table@@Base>:
   22678:	cmn	r1, #1
   2267c:	ble	22684 <flatcc_builder_reserve_table@@Base+0xc>
   22680:	b	226ac <flatcc_builder_reserve_table@@Base+0x34>
   22684:	push	{fp, lr}
   22688:	mov	fp, sp
   2268c:	movw	r0, #20173	; 0x4ecd
   22690:	movt	r0, #3
   22694:	movw	r1, #18282	; 0x476a
   22698:	movt	r1, #3
   2269c:	movw	r3, #20108	; 0x4e8c
   226a0:	movt	r3, #3
   226a4:	movw	r2, #1065	; 0x429
   226a8:	bl	14f40 <__assert_fail@plt>
   226ac:	push	{r4, r5, r6, sl, fp, lr}
   226b0:	add	fp, sp, #16
   226b4:	sub	sp, sp, #8
   226b8:	mov	r6, r1
   226bc:	mov	r4, r0
   226c0:	ldr	r0, [r0, #32]
   226c4:	ldrh	r1, [r0, #28]
   226c8:	ldr	r0, [r0, #16]
   226cc:	mov	r2, #1
   226d0:	str	r2, [sp]
   226d4:	mov	r2, #4
   226d8:	add	r3, r2, r6, lsl #1
   226dc:	add	r2, r0, r1, lsl #1
   226e0:	mov	r5, #0
   226e4:	mov	r0, r4
   226e8:	mov	r1, #0
   226ec:	bl	213a8 <flatcc_builder_enter_user_frame_ptr@@Base+0x78>
   226f0:	str	r0, [r4, #4]
   226f4:	cmp	r0, #0
   226f8:	beq	22734 <flatcc_builder_reserve_table@@Base+0xbc>
   226fc:	lsl	r1, r6, #1
   22700:	add	r0, r0, #4
   22704:	str	r0, [r4, #4]
   22708:	ldr	r0, [r4, #32]
   2270c:	ldr	r2, [r0, #20]
   22710:	str	r5, [sp]
   22714:	orr	r3, r1, #1
   22718:	mov	r0, r4
   2271c:	mov	r1, #3
   22720:	bl	213a8 <flatcc_builder_enter_user_frame_ptr@@Base+0x78>
   22724:	str	r0, [r4]
   22728:	cmp	r0, #0
   2272c:	mvneq	r5, #0
   22730:	b	22738 <flatcc_builder_reserve_table@@Base+0xc0>
   22734:	mvn	r5, #0
   22738:	mov	r0, r5
   2273c:	sub	sp, fp, #16
   22740:	pop	{r4, r5, r6, sl, fp, pc}

00022744 <flatcc_builder_start_table@@Base>:
   22744:	push	{r4, r5, r6, sl, fp, lr}
   22748:	add	fp, sp, #16
   2274c:	mov	r6, r1
   22750:	mov	r4, r0
   22754:	mov	r1, #4
   22758:	bl	21b14 <flatcc_builder_start_buffer@@Base+0xbc>
   2275c:	mvn	r5, #0
   22760:	cmp	r0, #0
   22764:	bne	227dc <flatcc_builder_start_table@@Base+0x98>
   22768:	ldr	r0, [r4, #4]
   2276c:	ldr	r1, [r4, #32]
   22770:	ldr	r2, [r4, #52]	; 0x34
   22774:	sub	r0, r0, r2
   22778:	str	r0, [r1, #16]
   2277c:	ldr	r0, [r4]
   22780:	ldr	r1, [r4, #32]
   22784:	ldr	r2, [r4, #76]	; 0x4c
   22788:	sub	r0, r0, r2
   2278c:	str	r0, [r1, #20]
   22790:	ldr	r0, [r4, #12]
   22794:	ldr	r1, [r4, #32]
   22798:	str	r0, [r1, #24]
   2279c:	ldr	r0, [r4, #32]
   227a0:	ldrh	r1, [r4, #8]
   227a4:	strh	r1, [r0, #28]
   227a8:	mov	r0, #0
   227ac:	strh	r0, [r4, #8]
   227b0:	movw	r0, #15186	; 0x3b52
   227b4:	movt	r0, #12137	; 0x2f69
   227b8:	str	r0, [r4, #12]
   227bc:	ldr	r0, [r4, #32]
   227c0:	mov	r1, #3
   227c4:	strh	r1, [r0, #14]
   227c8:	mov	r0, r4
   227cc:	mov	r1, r6
   227d0:	bl	226ac <flatcc_builder_reserve_table@@Base+0x34>
   227d4:	cmp	r0, #0
   227d8:	beq	227e4 <flatcc_builder_start_table@@Base+0xa0>
   227dc:	mov	r0, r5
   227e0:	pop	{r4, r5, r6, sl, fp, pc}
   227e4:	mov	r0, r4
   227e8:	movw	r1, #65532	; 0xfffc
   227ec:	bl	21d8c <flatcc_builder_start_struct@@Base+0x4c>
   227f0:	mov	r5, #0
   227f4:	mov	r0, r5
   227f8:	pop	{r4, r5, r6, sl, fp, pc}

000227fc <flatcc_builder_create_vtable@@Base>:
   227fc:	push	{fp, lr}
   22800:	mov	fp, sp
   22804:	sub	sp, sp, #72	; 0x48
   22808:	mov	r3, #0
   2280c:	str	r3, [sp, #4]
   22810:	str	r3, [sp]
   22814:	cmp	r2, #0
   22818:	strne	r2, [sp, #12]
   2281c:	strne	r1, [sp, #8]
   22820:	strne	r2, [sp]
   22824:	movne	r1, #1
   22828:	strne	r1, [sp, #4]
   2282c:	ldr	r1, [r0, #152]	; 0x98
   22830:	cmp	r1, #0
   22834:	bne	22844 <flatcc_builder_create_vtable@@Base+0x48>
   22838:	ldr	r1, [r0, #180]	; 0xb4
   2283c:	cmp	r1, #0
   22840:	beq	22860 <flatcc_builder_create_vtable@@Base+0x64>
   22844:	mov	r1, sp
   22848:	bl	2171c <flatcc_builder_embed_buffer@@Base+0x1e0>
   2284c:	cmp	r0, #0
   22850:	beq	22870 <flatcc_builder_create_vtable@@Base+0x74>
   22854:	add	r0, r0, #1
   22858:	mov	sp, fp
   2285c:	pop	{fp, pc}
   22860:	mov	r1, sp
   22864:	bl	2287c <flatcc_builder_create_vtable@@Base+0x80>
   22868:	cmp	r0, #0
   2286c:	bne	22858 <flatcc_builder_create_vtable@@Base+0x5c>
   22870:	mov	r0, #0
   22874:	mov	sp, fp
   22878:	pop	{fp, pc}
   2287c:	push	{r4, sl, fp, lr}
   22880:	add	fp, sp, #8
   22884:	sub	sp, sp, #8
   22888:	ldr	r4, [r0, #140]	; 0x8c
   2288c:	ldr	r3, [r1]
   22890:	add	r2, r3, r4
   22894:	str	r2, [r0, #140]	; 0x8c
   22898:	cmn	r3, #1
   2289c:	ble	228f0 <flatcc_builder_create_vtable@@Base+0xf4>
   228a0:	ldr	r2, [r1, #4]
   228a4:	ldr	ip, [r0, #36]	; 0x24
   228a8:	ldr	lr, [r0, #44]	; 0x2c
   228ac:	str	r3, [sp]
   228b0:	add	r1, r1, #8
   228b4:	mov	r0, ip
   228b8:	mov	r3, r4
   228bc:	blx	lr
   228c0:	cmp	r0, #0
   228c4:	addeq	r0, r4, #1
   228c8:	subeq	sp, fp, #8
   228cc:	popeq	{r4, sl, fp, pc}
   228d0:	movw	r0, #22800	; 0x5910
   228d4:	movt	r0, #3
   228d8:	movw	r1, #18282	; 0x476a
   228dc:	movt	r1, #3
   228e0:	movw	r3, #22667	; 0x588b
   228e4:	movt	r3, #3
   228e8:	movw	r2, #677	; 0x2a5
   228ec:	bl	14f40 <__assert_fail@plt>
   228f0:	movw	r0, #22800	; 0x5910
   228f4:	movt	r0, #3
   228f8:	movw	r1, #18282	; 0x476a
   228fc:	movt	r1, #3
   22900:	movw	r3, #22667	; 0x588b
   22904:	movt	r3, #3
   22908:	movw	r2, #673	; 0x2a1
   2290c:	bl	14f40 <__assert_fail@plt>

00022910 <flatcc_builder_create_cached_vtable@@Base>:
   22910:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   22914:	add	fp, sp, #28
   22918:	sub	sp, sp, #20
   2291c:	mov	r4, r2
   22920:	mov	r9, r1
   22924:	mov	sl, r0
   22928:	mov	r1, r3
   2292c:	bl	22b08 <flatcc_builder_create_cached_vtable@@Base+0x1f8>
   22930:	cmp	r0, #0
   22934:	beq	22a58 <flatcc_builder_create_cached_vtable@@Base+0x148>
   22938:	mov	r7, r0
   2293c:	ldr	r6, [r0]
   22940:	mov	r5, #0
   22944:	cmp	r6, #0
   22948:	mov	r8, #0
   2294c:	beq	229e4 <flatcc_builder_create_cached_vtable@@Base+0xd4>
   22950:	ldr	r5, [sl, #68]	; 0x44
   22954:	str	sl, [sp, #16]
   22958:	ldr	sl, [sl, #100]	; 0x64
   2295c:	mov	r0, #0
   22960:	str	r7, [sp, #8]
   22964:	str	r0, [sp, #12]
   22968:	b	2297c <flatcc_builder_create_cached_vtable@@Base+0x6c>
   2296c:	ldr	r6, [r8, #12]!
   22970:	cmp	r6, #0
   22974:	mov	r7, r8
   22978:	beq	229d4 <flatcc_builder_create_cached_vtable@@Base+0xc4>
   2297c:	add	r8, sl, r6
   22980:	ldr	r0, [r8, #8]
   22984:	mov	r1, r5
   22988:	ldrh	r0, [r1, r0]!	; <UNPREDICTABLE>
   2298c:	cmp	r0, r4
   22990:	bne	2296c <flatcc_builder_create_cached_vtable@@Base+0x5c>
   22994:	mov	r0, r9
   22998:	mov	r2, r4
   2299c:	bl	14ebc <bcmp@plt>
   229a0:	cmp	r0, #0
   229a4:	bne	2296c <flatcc_builder_create_cached_vtable@@Base+0x5c>
   229a8:	ldr	r0, [sp, #16]
   229ac:	ldr	r0, [r0, #152]	; 0x98
   229b0:	ldr	r1, [r8, #4]
   229b4:	cmp	r1, r0
   229b8:	beq	22ae0 <flatcc_builder_create_cached_vtable@@Base+0x1d0>
   229bc:	mov	r7, r8
   229c0:	ldr	r6, [r7, #12]!
   229c4:	cmp	r6, #0
   229c8:	mov	r0, r8
   229cc:	bne	22964 <flatcc_builder_create_cached_vtable@@Base+0x54>
   229d0:	b	229d8 <flatcc_builder_create_cached_vtable@@Base+0xc8>
   229d4:	ldr	r8, [sp, #12]
   229d8:	ldr	sl, [sp, #16]
   229dc:	mov	r5, #0
   229e0:	ldr	r7, [sp, #8]
   229e4:	ldr	r2, [sl, #124]	; 0x7c
   229e8:	str	r5, [sp]
   229ec:	mov	r0, sl
   229f0:	mov	r1, #6
   229f4:	mov	r3, #16
   229f8:	bl	213a8 <flatcc_builder_enter_user_frame_ptr@@Base+0x78>
   229fc:	cmp	r0, #0
   22a00:	beq	22acc <flatcc_builder_create_cached_vtable@@Base+0x1bc>
   22a04:	mov	r6, r0
   22a08:	ldr	r0, [sl, #124]	; 0x7c
   22a0c:	ldr	r1, [sl, #152]	; 0x98
   22a10:	add	r2, r0, #16
   22a14:	str	r2, [sl, #124]	; 0x7c
   22a18:	str	r1, [r6, #4]
   22a1c:	ldr	r1, [r7]
   22a20:	str	r1, [r6, #12]
   22a24:	str	r0, [r7]
   22a28:	mov	r0, sl
   22a2c:	mov	r1, r9
   22a30:	mov	r2, r4
   22a34:	bl	227fc <flatcc_builder_create_vtable@@Base>
   22a38:	str	r0, [r6]
   22a3c:	cmp	r0, #0
   22a40:	beq	22acc <flatcc_builder_create_cached_vtable@@Base+0x1bc>
   22a44:	cmp	r8, #0
   22a48:	beq	22a60 <flatcc_builder_create_cached_vtable@@Base+0x150>
   22a4c:	ldr	r0, [r8, #8]
   22a50:	str	r0, [r6, #8]
   22a54:	b	22ac8 <flatcc_builder_create_cached_vtable@@Base+0x1b8>
   22a58:	mov	r5, #0
   22a5c:	b	22acc <flatcc_builder_create_cached_vtable@@Base+0x1bc>
   22a60:	ldr	r0, [sl, #172]	; 0xac
   22a64:	cmp	r0, #0
   22a68:	beq	22a88 <flatcc_builder_create_cached_vtable@@Base+0x178>
   22a6c:	ldr	r1, [sl, #120]	; 0x78
   22a70:	add	r1, r1, r4
   22a74:	cmp	r0, r1
   22a78:	bcs	22a88 <flatcc_builder_create_cached_vtable@@Base+0x178>
   22a7c:	mov	r0, sl
   22a80:	bl	21094 <flatcc_builder_flush_vtable_cache@@Base>
   22a84:	b	22ac8 <flatcc_builder_create_cached_vtable@@Base+0x1b8>
   22a88:	ldr	r2, [sl, #120]	; 0x78
   22a8c:	mov	r0, #0
   22a90:	str	r0, [sp]
   22a94:	mov	r0, sl
   22a98:	mov	r1, #2
   22a9c:	mov	r3, r4
   22aa0:	bl	213a8 <flatcc_builder_enter_user_frame_ptr@@Base+0x78>
   22aa4:	cmp	r0, #0
   22aa8:	beq	22ad8 <flatcc_builder_create_cached_vtable@@Base+0x1c8>
   22aac:	ldr	r1, [sl, #120]	; 0x78
   22ab0:	str	r1, [r6, #8]
   22ab4:	add	r1, r1, r4
   22ab8:	str	r1, [sl, #120]	; 0x78
   22abc:	mov	r1, r9
   22ac0:	mov	r2, r4
   22ac4:	bl	14e5c <memcpy@plt>
   22ac8:	ldr	r5, [r6]
   22acc:	mov	r0, r5
   22ad0:	sub	sp, fp, #28
   22ad4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   22ad8:	mvn	r5, #0
   22adc:	b	22acc <flatcc_builder_create_cached_vtable@@Base+0x1bc>
   22ae0:	ldr	r1, [sp, #8]
   22ae4:	cmp	r7, r1
   22ae8:	beq	22b00 <flatcc_builder_create_cached_vtable@@Base+0x1f0>
   22aec:	ldr	r0, [r8, #12]
   22af0:	str	r0, [r7]
   22af4:	ldr	r0, [r1]
   22af8:	str	r0, [r8, #12]
   22afc:	str	r6, [r1]
   22b00:	ldr	r5, [r8]
   22b04:	b	22acc <flatcc_builder_create_cached_vtable@@Base+0x1bc>
   22b08:	push	{r4, r5, fp, lr}
   22b0c:	add	fp, sp, #8
   22b10:	mov	r4, r1
   22b14:	mov	r5, r0
   22b18:	ldr	r0, [r0, #116]	; 0x74
   22b1c:	cmp	r0, #0
   22b20:	bne	22b3c <flatcc_builder_create_cached_vtable@@Base+0x22c>
   22b24:	mov	r0, r5
   22b28:	bl	24248 <flatcc_builder_get_emit_context@@Base+0x80>
   22b2c:	mov	r1, r0
   22b30:	mov	r0, #0
   22b34:	cmp	r1, #0
   22b38:	popne	{r4, r5, fp, pc}
   22b3c:	ldr	r0, [r5, #92]	; 0x5c
   22b40:	ldr	r1, [r5, #116]	; 0x74
   22b44:	rsb	r1, r1, #32
   22b48:	lsr	r1, r4, r1
   22b4c:	add	r0, r0, r1, lsl #2
   22b50:	pop	{r4, r5, fp, pc}

00022b54 <flatcc_builder_create_table@@Base>:
   22b54:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   22b58:	add	fp, sp, #28
   22b5c:	sub	sp, sp, #84	; 0x54
   22b60:	strh	r3, [fp, #-30]	; 0xffffffe2
   22b64:	ldr	r4, [fp, #12]
   22b68:	cmn	r4, #1
   22b6c:	ble	22c94 <flatcc_builder_create_table@@Base+0x140>
   22b70:	ldr	r8, [fp, #16]
   22b74:	tst	r8, #1
   22b78:	beq	22cb4 <flatcc_builder_create_table@@Base+0x160>
   22b7c:	mov	sl, r2
   22b80:	mov	r6, r1
   22b84:	mov	r5, r0
   22b88:	sub	r0, fp, #30
   22b8c:	mov	r1, #4
   22b90:	bl	224f0 <flatcc_builder_start_vector@@Base+0x80>
   22b94:	ldrh	r7, [fp, #-30]	; 0xffffffe2
   22b98:	mov	r0, r5
   22b9c:	mov	r1, r7
   22ba0:	bl	2197c <flatcc_builder_create_buffer@@Base+0x1cc>
   22ba4:	mov	r0, r5
   22ba8:	mov	r1, sl
   22bac:	mov	r2, r7
   22bb0:	bl	21704 <flatcc_builder_embed_buffer@@Base+0x1c8>
   22bb4:	mov	r9, r0
   22bb8:	add	r0, sl, r0
   22bbc:	str	r5, [sp]
   22bc0:	ldr	r1, [r5, #136]	; 0x88
   22bc4:	sub	r0, r1, r0
   22bc8:	sub	r5, r0, #4
   22bcc:	sub	r0, r5, r8
   22bd0:	add	r0, r0, #1
   22bd4:	bl	21718 <flatcc_builder_embed_buffer@@Base+0x1dc>
   22bd8:	str	r0, [fp, #-36]	; 0xffffffdc
   22bdc:	cmp	r4, #1
   22be0:	blt	22c10 <flatcc_builder_create_table@@Base+0xbc>
   22be4:	ldr	r7, [fp, #8]
   22be8:	mvn	r0, #3
   22bec:	sub	r5, r0, r5
   22bf0:	ldrh	r8, [r7], #2
   22bf4:	ldr	r0, [r8, r6]
   22bf8:	add	r0, r5, r0
   22bfc:	sub	r0, r0, r8
   22c00:	bl	21718 <flatcc_builder_embed_buffer@@Base+0x1dc>
   22c04:	str	r0, [r8, r6]
   22c08:	subs	r4, r4, #1
   22c0c:	bne	22bf0 <flatcc_builder_create_table@@Base+0x9c>
   22c10:	mov	r1, #4
   22c14:	str	r1, [sp, #16]
   22c18:	sub	r0, fp, #36	; 0x24
   22c1c:	str	r0, [sp, #12]
   22c20:	str	r1, [sp, #4]
   22c24:	mov	r0, #1
   22c28:	str	r0, [sp, #8]
   22c2c:	cmp	sl, #0
   22c30:	strne	sl, [sp, #24]
   22c34:	strne	r6, [sp, #20]
   22c38:	movne	r0, #2
   22c3c:	strne	r0, [sp, #8]
   22c40:	addne	r0, sl, #4
   22c44:	strne	r0, [sp, #4]
   22c48:	cmp	r9, #0
   22c4c:	ldr	r0, [sp]
   22c50:	beq	22c84 <flatcc_builder_create_table@@Base+0x130>
   22c54:	ldr	r2, [sp, #4]
   22c58:	ldr	r1, [sp, #8]
   22c5c:	add	r2, r2, r9
   22c60:	str	r2, [sp, #4]
   22c64:	add	r2, sp, #4
   22c68:	add	r3, r2, r1, lsl #3
   22c6c:	movw	r2, #17752	; 0x4558
   22c70:	movt	r2, #3
   22c74:	str	r2, [r3, #8]
   22c78:	str	r9, [r3, #12]
   22c7c:	add	r1, r1, #1
   22c80:	str	r1, [sp, #8]
   22c84:	add	r1, sp, #4
   22c88:	bl	2171c <flatcc_builder_embed_buffer@@Base+0x1e0>
   22c8c:	sub	sp, fp, #28
   22c90:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   22c94:	movw	r0, #20166	; 0x4ec6
   22c98:	movt	r0, #3
   22c9c:	movw	r1, #18282	; 0x476a
   22ca0:	movt	r1, #3
   22ca4:	movw	r3, #20184	; 0x4ed8
   22ca8:	movt	r3, #3
   22cac:	movw	r2, #1237	; 0x4d5
   22cb0:	bl	14f40 <__assert_fail@plt>
   22cb4:	movw	r0, #20340	; 0x4f74
   22cb8:	movt	r0, #3
   22cbc:	movw	r1, #18282	; 0x476a
   22cc0:	movt	r1, #3
   22cc4:	movw	r3, #20184	; 0x4ed8
   22cc8:	movt	r3, #3
   22ccc:	movw	r2, #1243	; 0x4db
   22cd0:	bl	14f40 <__assert_fail@plt>

00022cd4 <flatcc_builder_check_required_field@@Base>:
   22cd4:	push	{fp, lr}
   22cd8:	mov	fp, sp
   22cdc:	ldr	r2, [r0, #32]
   22ce0:	ldrh	r2, [r2, #14]
   22ce4:	cmp	r2, #3
   22ce8:	bne	22d18 <flatcc_builder_check_required_field@@Base+0x44>
   22cec:	ldrh	r3, [r0, #8]
   22cf0:	mov	r2, #0
   22cf4:	cmp	r3, r1
   22cf8:	bls	22d10 <flatcc_builder_check_required_field@@Base+0x3c>
   22cfc:	ldr	r0, [r0, #4]
   22d00:	add	r0, r0, r1, lsl #1
   22d04:	ldrh	r2, [r0]
   22d08:	cmp	r2, #0
   22d0c:	movwne	r2, #1
   22d10:	mov	r0, r2
   22d14:	pop	{fp, pc}
   22d18:	movw	r0, #20351	; 0x4f7f
   22d1c:	movt	r0, #3
   22d20:	movw	r1, #18282	; 0x476a
   22d24:	movt	r1, #3
   22d28:	movw	r3, #20394	; 0x4faa
   22d2c:	movt	r3, #3
   22d30:	movw	r2, #1272	; 0x4f8
   22d34:	bl	14f40 <__assert_fail@plt>

00022d38 <flatcc_builder_check_union_field@@Base>:
   22d38:	push	{fp, lr}
   22d3c:	mov	fp, sp
   22d40:	mov	r2, r0
   22d44:	ldr	r0, [r0, #32]
   22d48:	ldrh	r0, [r0, #14]
   22d4c:	cmp	r0, #3
   22d50:	bne	22db0 <flatcc_builder_check_union_field@@Base+0x78>
   22d54:	mov	r0, #0
   22d58:	cmp	r1, #0
   22d5c:	beq	22d9c <flatcc_builder_check_union_field@@Base+0x64>
   22d60:	ldrh	r3, [r2, #8]
   22d64:	cmp	r3, r1
   22d68:	popls	{fp, pc}
   22d6c:	ldr	r0, [r2, #4]
   22d70:	add	r0, r0, r1, lsl #1
   22d74:	ldrh	r1, [r0, #-2]
   22d78:	cmp	r1, #0
   22d7c:	beq	22da0 <flatcc_builder_check_union_field@@Base+0x68>
   22d80:	ldr	r2, [r2, #16]
   22d84:	ldrb	r1, [r2, r1]
   22d88:	ldrh	r0, [r0]
   22d8c:	cmp	r1, #0
   22d90:	beq	22da4 <flatcc_builder_check_union_field@@Base+0x6c>
   22d94:	cmp	r0, #0
   22d98:	movwne	r0, #1
   22d9c:	pop	{fp, pc}
   22da0:	ldrh	r0, [r0]
   22da4:	clz	r0, r0
   22da8:	lsr	r0, r0, #5
   22dac:	pop	{fp, pc}
   22db0:	movw	r0, #20351	; 0x4f7f
   22db4:	movt	r0, #3
   22db8:	movw	r1, #18282	; 0x476a
   22dbc:	movt	r1, #3
   22dc0:	movw	r3, #20477	; 0x4ffd
   22dc4:	movt	r3, #3
   22dc8:	movw	r2, #1279	; 0x4ff
   22dcc:	bl	14f40 <__assert_fail@plt>

00022dd0 <flatcc_builder_check_required@@Base>:
   22dd0:	push	{fp, lr}
   22dd4:	mov	fp, sp
   22dd8:	mov	r3, r0
   22ddc:	ldr	r0, [r0, #32]
   22de0:	ldrh	r0, [r0, #14]
   22de4:	cmp	r0, #3
   22de8:	bne	22e30 <flatcc_builder_check_required@@Base+0x60>
   22dec:	ldrh	ip, [r3, #8]
   22df0:	mov	r0, #0
   22df4:	cmp	ip, r2
   22df8:	poplt	{fp, pc}
   22dfc:	cmp	r2, #1
   22e00:	blt	22e28 <flatcc_builder_check_required@@Base+0x58>
   22e04:	ldr	ip, [r3, #4]
   22e08:	ldrh	r3, [r1]
   22e0c:	add	r3, ip, r3, lsl #1
   22e10:	ldrh	r3, [r3]
   22e14:	cmp	r3, #0
   22e18:	beq	22e2c <flatcc_builder_check_required@@Base+0x5c>
   22e1c:	add	r1, r1, #2
   22e20:	subs	r2, r2, #1
   22e24:	bne	22e08 <flatcc_builder_check_required@@Base+0x38>
   22e28:	mov	r0, #1
   22e2c:	pop	{fp, pc}
   22e30:	movw	r0, #20351	; 0x4f7f
   22e34:	movt	r0, #3
   22e38:	movw	r1, #18282	; 0x476a
   22e3c:	movt	r1, #3
   22e40:	movw	r3, #20557	; 0x504d
   22e44:	movt	r3, #3
   22e48:	movw	r2, #1297	; 0x511
   22e4c:	bl	14f40 <__assert_fail@plt>

00022e50 <flatcc_builder_end_table@@Base>:
   22e50:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   22e54:	add	fp, sp, #24
   22e58:	sub	sp, sp, #16
   22e5c:	mov	r4, r0
   22e60:	ldr	r0, [r0, #32]
   22e64:	ldrh	r0, [r0, #14]
   22e68:	cmp	r0, #3
   22e6c:	bne	22f7c <flatcc_builder_end_table@@Base+0x12c>
   22e70:	ldrh	r0, [r4, #8]
   22e74:	mov	r1, #4
   22e78:	add	r0, r1, r0, lsl #1
   22e7c:	ldr	r6, [r4, #4]
   22e80:	strh	r0, [r6, #-4]!
   22e84:	ldrh	r1, [r4, #20]
   22e88:	add	r1, r1, #4
   22e8c:	strh	r1, [r6, #2]
   22e90:	uxth	r5, r0
   22e94:	ldr	r0, [r4, #12]
   22e98:	eor	r0, r0, r5
   22e9c:	movw	r2, #31153	; 0x79b1
   22ea0:	movt	r2, #40503	; 0x9e37
   22ea4:	mul	r0, r0, r2
   22ea8:	uxth	r1, r1
   22eac:	eor	r0, r0, r1
   22eb0:	mul	r3, r0, r2
   22eb4:	str	r3, [r4, #12]
   22eb8:	mov	r0, r4
   22ebc:	mov	r1, r6
   22ec0:	mov	r2, r5
   22ec4:	bl	22910 <flatcc_builder_create_cached_vtable@@Base>
   22ec8:	cmp	r0, #0
   22ecc:	beq	22f6c <flatcc_builder_end_table@@Base+0x11c>
   22ed0:	mov	r7, r0
   22ed4:	mov	r8, #0
   22ed8:	mov	r0, r6
   22edc:	mov	r1, #0
   22ee0:	mov	r2, r5
   22ee4:	bl	14eec <memset@plt>
   22ee8:	ldrh	r3, [r4, #130]	; 0x82
   22eec:	ldr	r0, [r4, #76]	; 0x4c
   22ef0:	ldr	r6, [r4]
   22ef4:	ldr	r1, [r4, #16]
   22ef8:	ldr	r2, [r4, #20]
   22efc:	ldr	r5, [r4, #32]
   22f00:	ldr	r5, [r5, #20]
   22f04:	add	r0, r0, r5
   22f08:	sub	r6, r6, r0
   22f0c:	asr	r6, r6, #1
   22f10:	stm	sp, {r0, r6, r7}
   22f14:	mov	r0, r4
   22f18:	bl	22b54 <flatcc_builder_create_table@@Base>
   22f1c:	cmp	r0, #0
   22f20:	beq	22f70 <flatcc_builder_end_table@@Base+0x120>
   22f24:	mov	r5, r0
   22f28:	ldr	r0, [r4, #32]
   22f2c:	ldr	r1, [r4, #52]	; 0x34
   22f30:	ldr	r2, [r4, #76]	; 0x4c
   22f34:	ldr	r3, [r0, #24]
   22f38:	str	r3, [r4, #12]
   22f3c:	ldrh	r3, [r0, #28]
   22f40:	strh	r3, [r4, #8]
   22f44:	ldr	r3, [r0, #16]
   22f48:	add	r1, r1, r3
   22f4c:	str	r1, [r4, #4]
   22f50:	ldr	r0, [r0, #20]
   22f54:	add	r0, r2, r0
   22f58:	str	r0, [r4]
   22f5c:	mov	r0, r4
   22f60:	bl	21cd4 <flatcc_builder_end_buffer@@Base+0xc8>
   22f64:	mov	r8, r5
   22f68:	b	22f70 <flatcc_builder_end_table@@Base+0x120>
   22f6c:	mov	r8, #0
   22f70:	mov	r0, r8
   22f74:	sub	sp, fp, #24
   22f78:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   22f7c:	movw	r0, #20351	; 0x4f7f
   22f80:	movt	r0, #3
   22f84:	movw	r1, #18282	; 0x476a
   22f88:	movt	r1, #3
   22f8c:	movw	r3, #20647	; 0x50a7
   22f90:	movt	r3, #3
   22f94:	movw	r2, #1317	; 0x525
   22f98:	bl	14f40 <__assert_fail@plt>

00022f9c <flatcc_builder_create_vector@@Base>:
   22f9c:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   22fa0:	add	fp, sp, #24
   22fa4:	sub	sp, sp, #80	; 0x50
   22fa8:	mov	r4, r0
   22fac:	ldr	r0, [fp, #8]
   22fb0:	strh	r0, [fp, #-26]	; 0xffffffe6
   22fb4:	ldr	r0, [fp, #12]
   22fb8:	cmp	r2, r0
   22fbc:	bhi	23088 <flatcc_builder_create_vector@@Base+0xec>
   22fc0:	mov	r6, r3
   22fc4:	mov	r7, r2
   22fc8:	mov	r8, r1
   22fcc:	sub	r0, fp, #26
   22fd0:	mov	r9, #4
   22fd4:	mov	r1, #4
   22fd8:	bl	224f0 <flatcc_builder_start_vector@@Base+0x80>
   22fdc:	ldrh	r5, [fp, #-26]	; 0xffffffe6
   22fe0:	mov	r0, r4
   22fe4:	mov	r1, r5
   22fe8:	bl	2197c <flatcc_builder_create_buffer@@Base+0x1cc>
   22fec:	mov	r0, r7
   22ff0:	bl	21718 <flatcc_builder_embed_buffer@@Base+0x1dc>
   22ff4:	str	r7, [fp, #-32]	; 0xffffffe0
   22ff8:	mul	r6, r6, r7
   22ffc:	mov	r0, r4
   23000:	mov	r1, r6
   23004:	mov	r2, r5
   23008:	bl	21704 <flatcc_builder_embed_buffer@@Base+0x1c8>
   2300c:	str	r9, [sp, #12]
   23010:	sub	r1, fp, #32
   23014:	str	r1, [sp, #8]
   23018:	str	r9, [sp]
   2301c:	mov	r1, #1
   23020:	str	r1, [sp, #4]
   23024:	cmp	r6, #0
   23028:	strne	r6, [sp, #20]
   2302c:	strne	r8, [sp, #16]
   23030:	movne	r1, #2
   23034:	strne	r1, [sp, #4]
   23038:	addne	r1, r6, #4
   2303c:	strne	r1, [sp]
   23040:	cmp	r0, #0
   23044:	beq	23074 <flatcc_builder_create_vector@@Base+0xd8>
   23048:	ldm	sp, {r1, r2}
   2304c:	add	r1, r1, r0
   23050:	str	r1, [sp]
   23054:	mov	r1, sp
   23058:	add	r1, r1, r2, lsl #3
   2305c:	movw	r3, #17752	; 0x4558
   23060:	movt	r3, #3
   23064:	str	r3, [r1, #8]
   23068:	str	r0, [r1, #12]
   2306c:	add	r0, r2, #1
   23070:	str	r0, [sp, #4]
   23074:	mov	r1, sp
   23078:	mov	r0, r4
   2307c:	bl	2171c <flatcc_builder_embed_buffer@@Base+0x1e0>
   23080:	sub	sp, fp, #24
   23084:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   23088:	movw	r0, #20713	; 0x50e9
   2308c:	movt	r0, #3
   23090:	movw	r1, #18282	; 0x476a
   23094:	movt	r1, #3
   23098:	movw	r3, #20732	; 0x50fc
   2309c:	movt	r3, #3
   230a0:	movw	r2, #1365	; 0x555
   230a4:	bl	14f40 <__assert_fail@plt>

000230a8 <flatcc_builder_end_vector@@Base>:
   230a8:	push	{r4, r5, fp, lr}
   230ac:	add	fp, sp, #8
   230b0:	sub	sp, sp, #8
   230b4:	mov	r4, r0
   230b8:	ldr	r0, [r0, #32]
   230bc:	ldrh	r1, [r0, #14]
   230c0:	cmp	r1, #4
   230c4:	bne	23108 <flatcc_builder_end_vector@@Base+0x60>
   230c8:	ldr	r1, [r4, #16]
   230cc:	ldrh	r5, [r4, #130]	; 0x82
   230d0:	ldr	r3, [r0, #16]
   230d4:	ldr	r2, [r0, #20]
   230d8:	ldr	r0, [r0, #24]
   230dc:	str	r5, [sp]
   230e0:	str	r0, [sp, #4]
   230e4:	mov	r0, r4
   230e8:	bl	22f9c <flatcc_builder_create_vector@@Base>
   230ec:	mov	r5, r0
   230f0:	cmp	r0, #0
   230f4:	movne	r0, r4
   230f8:	blne	21cd4 <flatcc_builder_end_buffer@@Base+0xc8>
   230fc:	mov	r0, r5
   23100:	sub	sp, fp, #8
   23104:	pop	{r4, r5, fp, pc}
   23108:	movw	r0, #19085	; 0x4a8d
   2310c:	movt	r0, #3
   23110:	movw	r1, #18282	; 0x476a
   23114:	movt	r1, #3
   23118:	movw	r3, #20850	; 0x5172
   2311c:	movt	r3, #3
   23120:	movw	r2, #1400	; 0x578
   23124:	bl	14f40 <__assert_fail@plt>

00023128 <flatcc_builder_vector_count@@Base>:
   23128:	ldr	r0, [r0, #32]
   2312c:	ldr	r0, [r0, #20]
   23130:	bx	lr

00023134 <flatcc_builder_vector_edit@@Base>:
   23134:	ldr	r0, [r0, #16]
   23138:	bx	lr

0002313c <flatcc_builder_create_offset_vector_direct@@Base>:
   2313c:	mov	r3, #0
   23140:	b	23144 <flatcc_builder_create_offset_vector_direct@@Base+0x8>
   23144:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   23148:	add	fp, sp, #24
   2314c:	sub	sp, sp, #80	; 0x50
   23150:	mov	r8, r0
   23154:	mov	r0, #0
   23158:	cmn	r2, #-1073741823	; 0xc0000001
   2315c:	bhi	232ac <flatcc_builder_create_offset_vector_direct@@Base+0x170>
   23160:	mov	r9, r3
   23164:	mov	r6, r2
   23168:	mov	r7, r1
   2316c:	mov	r5, #4
   23170:	mov	r0, r8
   23174:	mov	r1, #4
   23178:	bl	2197c <flatcc_builder_create_buffer@@Base+0x1cc>
   2317c:	mov	r0, r6
   23180:	bl	21718 <flatcc_builder_embed_buffer@@Base+0x1dc>
   23184:	str	r6, [fp, #-28]	; 0xffffffe4
   23188:	lsl	r4, r6, #2
   2318c:	mov	r0, r8
   23190:	mov	r1, r4
   23194:	mov	r2, #4
   23198:	bl	21704 <flatcc_builder_embed_buffer@@Base+0x1c8>
   2319c:	str	r5, [sp, #16]
   231a0:	sub	r1, fp, #28
   231a4:	str	r1, [sp, #12]
   231a8:	str	r5, [sp, #4]
   231ac:	mov	r1, #1
   231b0:	str	r1, [sp, #8]
   231b4:	mov	r1, #0
   231b8:	cmp	r1, r6, lsl #2
   231bc:	strne	r4, [sp, #24]
   231c0:	strne	r7, [sp, #20]
   231c4:	movne	r1, #2
   231c8:	strne	r1, [sp, #8]
   231cc:	addne	r1, r4, #4
   231d0:	strne	r1, [sp, #4]
   231d4:	cmp	r0, #0
   231d8:	beq	23208 <flatcc_builder_create_offset_vector_direct@@Base+0xcc>
   231dc:	ldmib	sp, {r1, r2}
   231e0:	add	r1, r1, r0
   231e4:	str	r1, [sp, #4]
   231e8:	add	r1, sp, #4
   231ec:	add	r1, r1, r2, lsl #3
   231f0:	movw	r3, #17752	; 0x4558
   231f4:	movt	r3, #3
   231f8:	str	r3, [r1, #8]
   231fc:	str	r0, [r1, #12]
   23200:	add	r0, r2, #1
   23204:	str	r0, [sp, #8]
   23208:	cmp	r6, #0
   2320c:	beq	232a0 <flatcc_builder_create_offset_vector_direct@@Base+0x164>
   23210:	ldr	r0, [r8, #136]	; 0x88
   23214:	ldr	r1, [sp, #4]
   23218:	sub	r0, r1, r0
   2321c:	sub	r4, r0, #4
   23220:	mov	r5, r9
   23224:	b	2323c <flatcc_builder_create_offset_vector_direct@@Base+0x100>
   23228:	sub	r4, r4, #4
   2322c:	add	r7, r7, #4
   23230:	add	r5, r5, #1
   23234:	subs	r6, r6, #1
   23238:	beq	232a0 <flatcc_builder_create_offset_vector_direct@@Base+0x164>
   2323c:	ldr	r0, [r7]
   23240:	cmp	r0, #0
   23244:	beq	2326c <flatcc_builder_create_offset_vector_direct@@Base+0x130>
   23248:	add	r0, r4, r0
   2324c:	bl	21718 <flatcc_builder_embed_buffer@@Base+0x1dc>
   23250:	str	r0, [r7]
   23254:	cmp	r9, #0
   23258:	beq	23228 <flatcc_builder_create_offset_vector_direct@@Base+0xec>
   2325c:	ldrb	r0, [r5]
   23260:	cmp	r0, #0
   23264:	bne	23228 <flatcc_builder_create_offset_vector_direct@@Base+0xec>
   23268:	b	232b4 <flatcc_builder_create_offset_vector_direct@@Base+0x178>
   2326c:	cmp	r9, #0
   23270:	beq	232d4 <flatcc_builder_create_offset_vector_direct@@Base+0x198>
   23274:	ldrb	r0, [r5]
   23278:	cmp	r0, #0
   2327c:	beq	23228 <flatcc_builder_create_offset_vector_direct@@Base+0xec>
   23280:	movw	r0, #22933	; 0x5995
   23284:	movt	r0, #3
   23288:	movw	r1, #18282	; 0x476a
   2328c:	movt	r1, #3
   23290:	movw	r3, #22802	; 0x5912
   23294:	movt	r3, #3
   23298:	movw	r2, #1461	; 0x5b5
   2329c:	bl	14f40 <__assert_fail@plt>
   232a0:	add	r1, sp, #4
   232a4:	mov	r0, r8
   232a8:	bl	2171c <flatcc_builder_embed_buffer@@Base+0x1e0>
   232ac:	sub	sp, fp, #24
   232b0:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   232b4:	movw	r0, #22788	; 0x5904
   232b8:	movt	r0, #3
   232bc:	movw	r1, #18282	; 0x476a
   232c0:	movt	r1, #3
   232c4:	movw	r3, #22802	; 0x5912
   232c8:	movt	r3, #3
   232cc:	movw	r2, #1457	; 0x5b1
   232d0:	bl	14f40 <__assert_fail@plt>
   232d4:	movw	r0, #22800	; 0x5910
   232d8:	movt	r0, #3
   232dc:	movw	r1, #18282	; 0x476a
   232e0:	movt	r1, #3
   232e4:	movw	r3, #22802	; 0x5912
   232e8:	movt	r3, #3
   232ec:	movw	r2, #1463	; 0x5b7
   232f0:	bl	14f40 <__assert_fail@plt>

000232f4 <flatcc_builder_end_offset_vector_for_unions@@Base>:
   232f4:	push	{r4, r5, fp, lr}
   232f8:	add	fp, sp, #8
   232fc:	mov	r3, r1
   23300:	mov	r4, r0
   23304:	ldr	r0, [r0, #32]
   23308:	ldrh	r1, [r0, #14]
   2330c:	cmp	r1, #5
   23310:	bne	2333c <flatcc_builder_end_offset_vector_for_unions@@Base+0x48>
   23314:	ldr	r2, [r0, #20]
   23318:	ldr	r1, [r4, #16]
   2331c:	mov	r0, r4
   23320:	bl	23144 <flatcc_builder_create_offset_vector_direct@@Base+0x8>
   23324:	mov	r5, r0
   23328:	cmp	r0, #0
   2332c:	movne	r0, r4
   23330:	blne	21cd4 <flatcc_builder_end_buffer@@Base+0xc8>
   23334:	mov	r0, r5
   23338:	pop	{r4, r5, fp, pc}
   2333c:	movw	r0, #19334	; 0x4b86
   23340:	movt	r0, #3
   23344:	movw	r1, #18282	; 0x476a
   23348:	movt	r1, #3
   2334c:	movw	r3, #20991	; 0x51ff
   23350:	movt	r3, #3
   23354:	movw	r2, #1493	; 0x5d5
   23358:	bl	14f40 <__assert_fail@plt>

0002335c <flatcc_builder_offset_vector_edit@@Base>:
   2335c:	ldr	r0, [r0, #16]
   23360:	bx	lr

00023364 <flatcc_builder_offset_vector_count@@Base>:
   23364:	ldr	r0, [r0, #32]
   23368:	ldr	r0, [r0, #20]
   2336c:	bx	lr

00023370 <flatcc_builder_table_add_union@@Base>:
   23370:	push	{r4, r5, r6, r7, fp, lr}
   23374:	add	fp, sp, #16
   23378:	mov	r5, r0
   2337c:	ldr	r0, [r0, #32]
   23380:	ldrh	r0, [r0, #14]
   23384:	cmp	r0, #3
   23388:	bne	233fc <flatcc_builder_table_add_union@@Base+0x8c>
   2338c:	mov	r7, r3
   23390:	mov	r6, r1
   23394:	uxtb	r4, r2
   23398:	cmp	r3, #0
   2339c:	beq	233a8 <flatcc_builder_table_add_union@@Base+0x38>
   233a0:	cmp	r4, #0
   233a4:	beq	2341c <flatcc_builder_table_add_union@@Base+0xac>
   233a8:	cmp	r7, #0
   233ac:	beq	233c8 <flatcc_builder_table_add_union@@Base+0x58>
   233b0:	mov	r0, r5
   233b4:	mov	r1, r6
   233b8:	bl	2347c <flatcc_builder_table_add_offset@@Base>
   233bc:	cmp	r0, #0
   233c0:	beq	2345c <flatcc_builder_table_add_union@@Base+0xec>
   233c4:	str	r7, [r0]
   233c8:	sub	r1, r6, #1
   233cc:	mov	r0, r5
   233d0:	mov	r2, #1
   233d4:	mov	r3, #1
   233d8:	bl	23540 <flatcc_builder_table_add@@Base>
   233dc:	cmp	r0, #0
   233e0:	beq	2343c <flatcc_builder_table_add_union@@Base+0xcc>
   233e4:	mov	r5, r0
   233e8:	mov	r0, r4
   233ec:	bl	23620 <flatcc_builder_table_add@@Base+0xe0>
   233f0:	strb	r4, [r5]
   233f4:	mov	r0, #0
   233f8:	pop	{r4, r5, r6, r7, fp, pc}
   233fc:	movw	r0, #20351	; 0x4f7f
   23400:	movt	r0, #3
   23404:	movw	r1, #18282	; 0x476a
   23408:	movt	r1, #3
   2340c:	movw	r3, #21105	; 0x5271
   23410:	movt	r3, #3
   23414:	movw	r2, #1518	; 0x5ee
   23418:	bl	14f40 <__assert_fail@plt>
   2341c:	movw	r0, #21193	; 0x52c9
   23420:	movt	r0, #3
   23424:	movw	r1, #18282	; 0x476a
   23428:	movt	r1, #3
   2342c:	movw	r3, #21105	; 0x5271
   23430:	movt	r3, #3
   23434:	movw	r2, #1519	; 0x5ef
   23438:	bl	14f40 <__assert_fail@plt>
   2343c:	movw	r0, #21237	; 0x52f5
   23440:	movt	r0, #3
   23444:	movw	r1, #18282	; 0x476a
   23448:	movt	r1, #3
   2344c:	movw	r3, #21105	; 0x5271
   23450:	movt	r3, #3
   23454:	movw	r2, #1526	; 0x5f6
   23458:	bl	14f40 <__assert_fail@plt>
   2345c:	movw	r0, #21227	; 0x52eb
   23460:	movt	r0, #3
   23464:	movw	r1, #18282	; 0x476a
   23468:	movt	r1, #3
   2346c:	movw	r3, #21105	; 0x5271
   23470:	movt	r3, #3
   23474:	movw	r2, #1522	; 0x5f2
   23478:	bl	14f40 <__assert_fail@plt>

0002347c <flatcc_builder_table_add_offset@@Base>:
   2347c:	push	{fp, lr}
   23480:	mov	fp, sp
   23484:	ldr	r2, [r0, #32]
   23488:	ldrh	r2, [r2, #14]
   2348c:	cmp	r2, #3
   23490:	bne	234e0 <flatcc_builder_table_add_offset@@Base+0x64>
   23494:	movw	r2, #32765	; 0x7ffd
   23498:	cmp	r1, r2
   2349c:	bcs	23500 <flatcc_builder_table_add_offset@@Base+0x84>
   234a0:	ldr	r2, [r0, #4]
   234a4:	add	r2, r2, r1, lsl #1
   234a8:	ldrh	r2, [r2]
   234ac:	cmp	r2, #0
   234b0:	bne	23520 <flatcc_builder_table_add_offset@@Base+0xa4>
   234b4:	ldr	r2, [r0, #12]
   234b8:	eor	r2, r2, r1
   234bc:	movw	r3, #31153	; 0x79b1
   234c0:	movt	r3, #40503	; 0x9e37
   234c4:	mul	r2, r2, r3
   234c8:	eor	r2, r2, #4
   234cc:	mul	r2, r2, r3
   234d0:	str	r2, [r0, #12]
   234d4:	uxth	r1, r1
   234d8:	pop	{fp, lr}
   234dc:	b	23e48 <flatcc_builder_table_add_copy@@Base+0x40>
   234e0:	movw	r0, #20351	; 0x4f7f
   234e4:	movt	r0, #3
   234e8:	movw	r1, #18282	; 0x476a
   234ec:	movt	r1, #3
   234f0:	movw	r3, #22131	; 0x5673
   234f4:	movt	r3, #3
   234f8:	movw	r2, #1811	; 0x713
   234fc:	bl	14f40 <__assert_fail@plt>
   23500:	movw	r0, #22003	; 0x55f3
   23504:	movt	r0, #3
   23508:	movw	r1, #18282	; 0x476a
   2350c:	movt	r1, #3
   23510:	movw	r3, #22131	; 0x5673
   23514:	movt	r3, #3
   23518:	movw	r2, #1812	; 0x714
   2351c:	bl	14f40 <__assert_fail@plt>
   23520:	movw	r0, #22800	; 0x5910
   23524:	movt	r0, #3
   23528:	movw	r1, #18282	; 0x476a
   2352c:	movt	r1, #3
   23530:	movw	r3, #22131	; 0x5673
   23534:	movt	r3, #3
   23538:	movw	r2, #1819	; 0x71b
   2353c:	bl	14f40 <__assert_fail@plt>

00023540 <flatcc_builder_table_add@@Base>:
   23540:	push	{fp, lr}
   23544:	mov	fp, sp
   23548:	mov	ip, r3
   2354c:	ldr	r3, [r0, #32]
   23550:	ldrh	r3, [r3, #14]
   23554:	cmp	r3, #3
   23558:	bne	235c0 <flatcc_builder_table_add@@Base+0x80>
   2355c:	movw	r3, #32765	; 0x7ffd
   23560:	cmp	r1, r3
   23564:	bcs	235e0 <flatcc_builder_table_add@@Base+0xa0>
   23568:	mov	lr, r2
   2356c:	ldrh	r3, [r0, #130]	; 0x82
   23570:	cmp	r3, ip
   23574:	strhcc	ip, [r0, #130]	; 0x82
   23578:	ldr	r3, [r0, #4]
   2357c:	add	r3, r3, r1, lsl #1
   23580:	ldrh	r3, [r3]
   23584:	cmp	r3, #0
   23588:	bne	23600 <flatcc_builder_table_add@@Base+0xc0>
   2358c:	ldr	r3, [r0, #12]
   23590:	eor	r3, r3, r1
   23594:	movw	r2, #31153	; 0x79b1
   23598:	movt	r2, #40503	; 0x9e37
   2359c:	mul	r3, r3, r2
   235a0:	eor	r3, r3, lr
   235a4:	mul	r2, r3, r2
   235a8:	str	r2, [r0, #12]
   235ac:	uxth	r3, r1
   235b0:	mov	r1, lr
   235b4:	mov	r2, ip
   235b8:	pop	{fp, lr}
   235bc:	b	23d3c <flatcc_builder_string_len@@Base+0xc>
   235c0:	movw	r0, #20351	; 0x4f7f
   235c4:	movt	r0, #3
   235c8:	movw	r1, #18282	; 0x476a
   235cc:	movt	r1, #3
   235d0:	movw	r3, #21929	; 0x55a9
   235d4:	movt	r3, #3
   235d8:	movw	r2, #1773	; 0x6ed
   235dc:	bl	14f40 <__assert_fail@plt>
   235e0:	movw	r0, #22003	; 0x55f3
   235e4:	movt	r0, #3
   235e8:	movw	r1, #18282	; 0x476a
   235ec:	movt	r1, #3
   235f0:	movw	r3, #21929	; 0x55a9
   235f4:	movt	r3, #3
   235f8:	movw	r2, #1774	; 0x6ee
   235fc:	bl	14f40 <__assert_fail@plt>
   23600:	movw	r0, #22800	; 0x5910
   23604:	movt	r0, #3
   23608:	movw	r1, #18282	; 0x476a
   2360c:	movt	r1, #3
   23610:	movw	r3, #21929	; 0x55a9
   23614:	movt	r3, #3
   23618:	movw	r2, #1784	; 0x6f8
   2361c:	bl	14f40 <__assert_fail@plt>
   23620:	bx	lr

00023624 <flatcc_builder_table_add_union_vector@@Base>:
   23624:	push	{r4, r5, r6, r7, fp, lr}
   23628:	add	fp, sp, #16
   2362c:	mov	r6, r0
   23630:	ldr	r0, [r0, #32]
   23634:	ldrh	r0, [r0, #14]
   23638:	cmp	r0, #3
   2363c:	bne	236a8 <flatcc_builder_table_add_union_vector@@Base+0x84>
   23640:	mov	r4, r3
   23644:	mov	r7, r2
   23648:	mov	r5, r1
   2364c:	cmp	r2, #0
   23650:	mov	r0, r2
   23654:	movwne	r0, #1
   23658:	clz	r1, r3
   2365c:	lsr	r1, r1, #5
   23660:	teq	r1, r0
   23664:	beq	236c8 <flatcc_builder_table_add_union_vector@@Base+0xa4>
   23668:	cmp	r7, #0
   2366c:	beq	236a0 <flatcc_builder_table_add_union_vector@@Base+0x7c>
   23670:	sub	r1, r5, #1
   23674:	mov	r0, r6
   23678:	bl	2347c <flatcc_builder_table_add_offset@@Base>
   2367c:	cmp	r0, #0
   23680:	beq	236e8 <flatcc_builder_table_add_union_vector@@Base+0xc4>
   23684:	str	r7, [r0]
   23688:	mov	r0, r6
   2368c:	mov	r1, r5
   23690:	bl	2347c <flatcc_builder_table_add_offset@@Base>
   23694:	cmp	r0, #0
   23698:	beq	23708 <flatcc_builder_table_add_union_vector@@Base+0xe4>
   2369c:	str	r4, [r0]
   236a0:	mov	r0, #0
   236a4:	pop	{r4, r5, r6, r7, fp, pc}
   236a8:	movw	r0, #20351	; 0x4f7f
   236ac:	movt	r0, #3
   236b0:	movw	r1, #18282	; 0x476a
   236b4:	movt	r1, #3
   236b8:	movw	r3, #21249	; 0x5301
   236bc:	movt	r3, #3
   236c0:	mov	r2, #1536	; 0x600
   236c4:	bl	14f40 <__assert_fail@plt>
   236c8:	movw	r0, #21348	; 0x5364
   236cc:	movt	r0, #3
   236d0:	movw	r1, #18282	; 0x476a
   236d4:	movt	r1, #3
   236d8:	movw	r3, #21249	; 0x5301
   236dc:	movt	r3, #3
   236e0:	movw	r2, #1537	; 0x601
   236e4:	bl	14f40 <__assert_fail@plt>
   236e8:	movw	r0, #21227	; 0x52eb
   236ec:	movt	r0, #3
   236f0:	movw	r1, #18282	; 0x476a
   236f4:	movt	r1, #3
   236f8:	movw	r3, #21249	; 0x5301
   236fc:	movt	r3, #3
   23700:	movw	r2, #1540	; 0x604
   23704:	bl	14f40 <__assert_fail@plt>
   23708:	movw	r0, #21227	; 0x52eb
   2370c:	movt	r0, #3
   23710:	movw	r1, #18282	; 0x476a
   23714:	movt	r1, #3
   23718:	movw	r3, #21249	; 0x5301
   2371c:	movt	r3, #3
   23720:	movw	r2, #1544	; 0x608
   23724:	bl	14f40 <__assert_fail@plt>

00023728 <flatcc_builder_create_union_vector@@Base>:
   23728:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   2372c:	add	fp, sp, #24
   23730:	sub	sp, sp, #16
   23734:	mov	r7, r3
   23738:	mov	r6, r2
   2373c:	mov	r4, r1
   23740:	mov	r5, r0
   23744:	mov	r0, #0
   23748:	str	r0, [r5]
   2374c:	str	r0, [r5, #4]
   23750:	mov	r0, r1
   23754:	bl	22500 <flatcc_builder_start_offset_vector@@Base>
   23758:	cmp	r0, #0
   2375c:	beq	23768 <flatcc_builder_create_union_vector@@Base+0x40>
   23760:	sub	sp, fp, #24
   23764:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   23768:	mov	r0, r4
   2376c:	mov	r1, r7
   23770:	bl	2204c <flatcc_builder_extend_offset_vector@@Base>
   23774:	cmp	r0, #0
   23778:	beq	23760 <flatcc_builder_create_union_vector@@Base+0x38>
   2377c:	mov	r0, r4
   23780:	mov	r1, r7
   23784:	bl	21dc4 <flatcc_builder_start_struct@@Base+0x84>
   23788:	cmp	r0, #0
   2378c:	beq	23760 <flatcc_builder_create_union_vector@@Base+0x38>
   23790:	mov	r8, r0
   23794:	mov	r0, r4
   23798:	bl	2335c <flatcc_builder_offset_vector_edit@@Base>
   2379c:	mov	ip, r0
   237a0:	cmp	r7, #0
   237a4:	beq	237d4 <flatcc_builder_create_union_vector@@Base+0xac>
   237a8:	add	r0, r6, #4
   237ac:	mov	r1, r8
   237b0:	mov	r2, ip
   237b4:	mov	r6, r7
   237b8:	ldrb	r3, [r0, #-4]
   237bc:	strb	r3, [r1], #1
   237c0:	ldr	r3, [r0]
   237c4:	str	r3, [r2], #4
   237c8:	add	r0, r0, #8
   237cc:	subs	r6, r6, #1
   237d0:	bne	237b8 <flatcc_builder_create_union_vector@@Base+0x90>
   237d4:	str	r7, [sp]
   237d8:	add	r0, sp, #8
   237dc:	mov	r1, r4
   237e0:	mov	r2, r8
   237e4:	mov	r3, ip
   237e8:	bl	23808 <flatcc_builder_create_union_vector_direct@@Base>
   237ec:	ldr	r0, [sp, #8]
   237f0:	ldr	r1, [sp, #12]
   237f4:	stm	r5, {r0, r1}
   237f8:	mov	r0, r4
   237fc:	bl	21cd4 <flatcc_builder_end_buffer@@Base+0xc8>
   23800:	sub	sp, fp, #24
   23804:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}

00023808 <flatcc_builder_create_union_vector_direct@@Base>:
   23808:	push	{r4, r5, r6, r7, fp, lr}
   2380c:	add	fp, sp, #16
   23810:	sub	sp, sp, #8
   23814:	mov	r5, r2
   23818:	mov	r6, r1
   2381c:	mov	r4, r0
   23820:	mov	r0, #0
   23824:	str	r0, [r4]
   23828:	str	r0, [r4, #4]
   2382c:	ldr	r7, [fp, #8]
   23830:	mov	r0, r1
   23834:	mov	r1, r3
   23838:	mov	r2, r7
   2383c:	mov	r3, r5
   23840:	bl	23144 <flatcc_builder_create_offset_vector_direct@@Base+0x8>
   23844:	str	r0, [r4, #4]
   23848:	cmp	r0, #0
   2384c:	beq	23878 <flatcc_builder_create_union_vector_direct@@Base+0x70>
   23850:	mvn	r0, #0
   23854:	mov	r1, #1
   23858:	str	r1, [sp]
   2385c:	str	r0, [sp, #4]
   23860:	mov	r0, r6
   23864:	mov	r1, r5
   23868:	mov	r2, r7
   2386c:	mov	r3, #1
   23870:	bl	22f9c <flatcc_builder_create_vector@@Base>
   23874:	str	r0, [r4]
   23878:	sub	sp, fp, #16
   2387c:	pop	{r4, r5, r6, r7, fp, pc}

00023880 <flatcc_builder_start_union_vector@@Base>:
   23880:	push	{r4, r5, fp, lr}
   23884:	add	fp, sp, #8
   23888:	mov	r4, r0
   2388c:	mov	r1, #4
   23890:	bl	21b14 <flatcc_builder_start_buffer@@Base+0xbc>
   23894:	mvn	r5, #0
   23898:	cmp	r0, #0
   2389c:	beq	238a8 <flatcc_builder_start_union_vector@@Base+0x28>
   238a0:	mov	r0, r5
   238a4:	pop	{r4, r5, fp, pc}
   238a8:	ldr	r0, [r4, #32]
   238ac:	mov	r1, #8
   238b0:	str	r1, [r0, #16]
   238b4:	ldr	r0, [r4, #32]
   238b8:	mov	r5, #0
   238bc:	str	r5, [r0, #20]
   238c0:	ldr	r0, [r4, #32]
   238c4:	mov	r1, #7
   238c8:	strh	r1, [r0, #14]
   238cc:	mov	r0, r4
   238d0:	mvn	r1, #3
   238d4:	bl	21d8c <flatcc_builder_start_struct@@Base+0x4c>
   238d8:	mov	r0, r5
   238dc:	pop	{r4, r5, fp, pc}

000238e0 <flatcc_builder_end_union_vector@@Base>:
   238e0:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   238e4:	add	fp, sp, #24
   238e8:	sub	sp, sp, #16
   238ec:	mov	r9, r0
   238f0:	mov	r0, #0
   238f4:	str	r0, [r9]
   238f8:	str	r0, [r9, #4]
   238fc:	ldr	r0, [r1, #32]
   23900:	ldrh	r0, [r0, #14]
   23904:	cmp	r0, #7
   23908:	bne	239a8 <flatcc_builder_end_union_vector@@Base+0xc8>
   2390c:	mov	r4, r1
   23910:	mov	r0, r1
   23914:	bl	239c8 <flatcc_builder_union_vector_count@@Base>
   23918:	mov	r6, r0
   2391c:	add	r1, r0, r0, lsl #2
   23920:	mov	r0, r4
   23924:	bl	21dc4 <flatcc_builder_start_struct@@Base+0x84>
   23928:	cmp	r0, #0
   2392c:	beq	239a0 <flatcc_builder_end_union_vector@@Base+0xc0>
   23930:	mov	r7, r0
   23934:	add	r8, r0, r6, lsl #2
   23938:	mov	r0, r4
   2393c:	bl	239d4 <flatcc_builder_union_vector_edit@@Base>
   23940:	cmp	r6, #0
   23944:	beq	23974 <flatcc_builder_end_union_vector@@Base+0x94>
   23948:	add	r0, r0, #4
   2394c:	mov	r1, r8
   23950:	mov	r2, r7
   23954:	mov	r3, r6
   23958:	ldrb	r5, [r0, #-4]
   2395c:	strb	r5, [r1], #1
   23960:	ldr	r5, [r0]
   23964:	str	r5, [r2], #4
   23968:	add	r0, r0, #8
   2396c:	subs	r3, r3, #1
   23970:	bne	23958 <flatcc_builder_end_union_vector@@Base+0x78>
   23974:	str	r6, [sp]
   23978:	add	r0, sp, #8
   2397c:	mov	r1, r4
   23980:	mov	r2, r8
   23984:	mov	r3, r7
   23988:	bl	23808 <flatcc_builder_create_union_vector_direct@@Base>
   2398c:	ldr	r0, [sp, #8]
   23990:	ldr	r1, [sp, #12]
   23994:	stm	r9, {r0, r1}
   23998:	mov	r0, r4
   2399c:	bl	21cd4 <flatcc_builder_end_buffer@@Base+0xc8>
   239a0:	sub	sp, fp, #24
   239a4:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   239a8:	movw	r0, #21388	; 0x538c
   239ac:	movt	r0, #3
   239b0:	movw	r1, #18282	; 0x476a
   239b4:	movt	r1, #3
   239b8:	movw	r3, #21438	; 0x53be
   239bc:	movt	r3, #3
   239c0:	movw	r2, #1617	; 0x651
   239c4:	bl	14f40 <__assert_fail@plt>

000239c8 <flatcc_builder_union_vector_count@@Base>:
   239c8:	ldr	r0, [r0, #32]
   239cc:	ldr	r0, [r0, #20]
   239d0:	bx	lr

000239d4 <flatcc_builder_union_vector_edit@@Base>:
   239d4:	ldr	r0, [r0, #16]
   239d8:	bx	lr

000239dc <flatcc_builder_extend_union_vector@@Base>:
   239dc:	push	{r4, r5, fp, lr}
   239e0:	add	fp, sp, #8
   239e4:	mov	r5, r1
   239e8:	mov	r4, r0
   239ec:	mvn	r2, #-536870912	; 0xe0000000
   239f0:	bl	21ec8 <flatcc_builder_extend_vector@@Base+0x44>
   239f4:	cmp	r0, #0
   239f8:	movne	r0, #0
   239fc:	popne	{r4, r5, fp, pc}
   23a00:	lsl	r1, r5, #3
   23a04:	mov	r0, r4
   23a08:	pop	{r4, r5, fp, lr}
   23a0c:	b	21dc4 <flatcc_builder_start_struct@@Base+0x84>

00023a10 <flatcc_builder_truncate_union_vector@@Base>:
   23a10:	push	{fp, lr}
   23a14:	mov	fp, sp
   23a18:	ldr	r2, [r0, #32]
   23a1c:	ldrh	r3, [r2, #14]
   23a20:	cmp	r3, #7
   23a24:	bne	23a54 <flatcc_builder_truncate_union_vector@@Base+0x44>
   23a28:	ldr	r3, [r2, #20]
   23a2c:	cmp	r3, r1
   23a30:	bcc	23a74 <flatcc_builder_truncate_union_vector@@Base+0x64>
   23a34:	sub	r3, r3, r1
   23a38:	str	r3, [r2, #20]
   23a3c:	ldr	r2, [r0, #32]
   23a40:	ldr	r2, [r2, #16]
   23a44:	mul	r1, r2, r1
   23a48:	bl	22354 <flatcc_builder_truncate_vector@@Base+0x84>
   23a4c:	mov	r0, #0
   23a50:	pop	{fp, pc}
   23a54:	movw	r0, #21388	; 0x538c
   23a58:	movt	r0, #3
   23a5c:	movw	r1, #18282	; 0x476a
   23a60:	movt	r1, #3
   23a64:	movw	r3, #21521	; 0x5411
   23a68:	movt	r3, #3
   23a6c:	movw	r2, #1665	; 0x681
   23a70:	bl	14f40 <__assert_fail@plt>
   23a74:	movw	r0, #19952	; 0x4df0
   23a78:	movt	r0, #3
   23a7c:	movw	r1, #18282	; 0x476a
   23a80:	movt	r1, #3
   23a84:	movw	r3, #21521	; 0x5411
   23a88:	movt	r3, #3
   23a8c:	movw	r2, #1666	; 0x682
   23a90:	bl	14f40 <__assert_fail@plt>

00023a94 <flatcc_builder_union_vector_push@@Base>:
   23a94:	push	{r4, r5, r6, sl, fp, lr}
   23a98:	add	fp, sp, #16
   23a9c:	mov	r4, r2
   23aa0:	mov	r5, r1
   23aa4:	ldr	r1, [r0, #32]
   23aa8:	ldrh	r2, [r1, #14]
   23aac:	cmp	r2, #7
   23ab0:	bne	23aec <flatcc_builder_union_vector_push@@Base+0x58>
   23ab4:	ldr	r2, [r1, #20]
   23ab8:	mov	r6, #0
   23abc:	cmn	r2, #-536870911	; 0xe0000001
   23ac0:	beq	23ae4 <flatcc_builder_union_vector_push@@Base+0x50>
   23ac4:	add	r2, r2, #1
   23ac8:	str	r2, [r1, #20]
   23acc:	mov	r1, #8
   23ad0:	bl	21dc4 <flatcc_builder_start_struct@@Base+0x84>
   23ad4:	cmp	r0, #0
   23ad8:	strne	r5, [r0]
   23adc:	strne	r4, [r0, #4]
   23ae0:	movne	r6, r0
   23ae4:	mov	r0, r6
   23ae8:	pop	{r4, r5, r6, sl, fp, pc}
   23aec:	movw	r0, #21388	; 0x538c
   23af0:	movt	r0, #3
   23af4:	movw	r1, #18282	; 0x476a
   23af8:	movt	r1, #3
   23afc:	movw	r3, #21590	; 0x5456
   23b00:	movt	r3, #3
   23b04:	movw	r2, #1677	; 0x68d
   23b08:	bl	14f40 <__assert_fail@plt>

00023b0c <flatcc_builder_append_union_vector@@Base>:
   23b0c:	push	{r4, r5, r6, sl, fp, lr}
   23b10:	add	fp, sp, #16
   23b14:	mov	r6, r0
   23b18:	ldr	r0, [r0, #32]
   23b1c:	ldrh	r0, [r0, #14]
   23b20:	cmp	r0, #7
   23b24:	bne	23b64 <flatcc_builder_append_union_vector@@Base+0x58>
   23b28:	mov	r5, r2
   23b2c:	mov	r4, r1
   23b30:	mov	r0, r6
   23b34:	mov	r1, r2
   23b38:	mvn	r2, #-536870912	; 0xe0000000
   23b3c:	bl	21ec8 <flatcc_builder_extend_vector@@Base+0x44>
   23b40:	cmp	r0, #0
   23b44:	beq	23b50 <flatcc_builder_append_union_vector@@Base+0x44>
   23b48:	mov	r0, #0
   23b4c:	pop	{r4, r5, r6, sl, fp, pc}
   23b50:	lsl	r2, r5, #3
   23b54:	mov	r0, r6
   23b58:	mov	r1, r4
   23b5c:	pop	{r4, r5, r6, sl, fp, lr}
   23b60:	b	21f90 <flatcc_builder_vector_push@@Base+0x80>
   23b64:	movw	r0, #21388	; 0x538c
   23b68:	movt	r0, #3
   23b6c:	movw	r1, #18282	; 0x476a
   23b70:	movt	r1, #3
   23b74:	movw	r3, #21699	; 0x54c3
   23b78:	movt	r3, #3
   23b7c:	movw	r2, #1692	; 0x69c
   23b80:	bl	14f40 <__assert_fail@plt>

00023b84 <flatcc_builder_create_string@@Base>:
   23b84:	push	{r4, r5, r6, r7, fp, lr}
   23b88:	add	fp, sp, #16
   23b8c:	sub	sp, sp, #80	; 0x50
   23b90:	mov	r5, r2
   23b94:	mov	r6, r1
   23b98:	mov	r4, r0
   23b9c:	mov	r0, r2
   23ba0:	bl	21718 <flatcc_builder_embed_buffer@@Base+0x1dc>
   23ba4:	str	r5, [fp, #-20]	; 0xffffffec
   23ba8:	add	r1, r5, #1
   23bac:	mov	r7, #4
   23bb0:	mov	r0, r4
   23bb4:	mov	r2, #4
   23bb8:	bl	21704 <flatcc_builder_embed_buffer@@Base+0x1c8>
   23bbc:	str	r7, [sp, #16]
   23bc0:	sub	r1, fp, #20
   23bc4:	str	r1, [sp, #12]
   23bc8:	str	r7, [sp, #4]
   23bcc:	mov	r1, #1
   23bd0:	str	r1, [sp, #8]
   23bd4:	add	r0, r0, #1
   23bd8:	cmp	r5, #0
   23bdc:	strne	r5, [sp, #24]
   23be0:	strne	r6, [sp, #20]
   23be4:	movne	r1, #2
   23be8:	strne	r1, [sp, #8]
   23bec:	addne	r1, r5, #4
   23bf0:	strne	r1, [sp, #4]
   23bf4:	cmp	r0, #0
   23bf8:	beq	23c28 <flatcc_builder_create_string@@Base+0xa4>
   23bfc:	ldmib	sp, {r1, r2}
   23c00:	add	r1, r1, r0
   23c04:	str	r1, [sp, #4]
   23c08:	add	r1, sp, #4
   23c0c:	add	r1, r1, r2, lsl #3
   23c10:	movw	r3, #17752	; 0x4558
   23c14:	movt	r3, #3
   23c18:	str	r3, [r1, #8]
   23c1c:	str	r0, [r1, #12]
   23c20:	add	r0, r2, #1
   23c24:	str	r0, [sp, #8]
   23c28:	add	r1, sp, #4
   23c2c:	mov	r0, r4
   23c30:	bl	2171c <flatcc_builder_embed_buffer@@Base+0x1e0>
   23c34:	sub	sp, fp, #16
   23c38:	pop	{r4, r5, r6, r7, fp, pc}

00023c3c <flatcc_builder_create_string_str@@Base>:
   23c3c:	push	{r4, r5, fp, lr}
   23c40:	add	fp, sp, #8
   23c44:	mov	r4, r1
   23c48:	mov	r5, r0
   23c4c:	mov	r0, r1
   23c50:	bl	14ec8 <strlen@plt>
   23c54:	mov	r2, r0
   23c58:	mov	r0, r5
   23c5c:	mov	r1, r4
   23c60:	pop	{r4, r5, fp, lr}
   23c64:	b	23b84 <flatcc_builder_create_string@@Base>

00023c68 <flatcc_builder_create_string_strn@@Base>:
   23c68:	push	{r4, r5, fp, lr}
   23c6c:	add	fp, sp, #8
   23c70:	mov	r4, r1
   23c74:	mov	r5, r0
   23c78:	mov	r0, r1
   23c7c:	mov	r1, r2
   23c80:	bl	222a4 <flatcc_builder_append_string_strn@@Base+0x30>
   23c84:	mov	r2, r0
   23c88:	mov	r0, r5
   23c8c:	mov	r1, r4
   23c90:	pop	{r4, r5, fp, lr}
   23c94:	b	23b84 <flatcc_builder_create_string@@Base>

00023c98 <flatcc_builder_end_string@@Base>:
   23c98:	push	{r4, r5, fp, lr}
   23c9c:	add	fp, sp, #8
   23ca0:	mov	r4, r0
   23ca4:	ldr	r0, [r0, #32]
   23ca8:	ldrh	r1, [r0, #14]
   23cac:	cmp	r1, #6
   23cb0:	bne	23ce8 <flatcc_builder_end_string@@Base+0x50>
   23cb4:	ldr	r2, [r4, #20]
   23cb8:	ldr	r0, [r0, #20]
   23cbc:	cmp	r0, r2
   23cc0:	bne	23d08 <flatcc_builder_end_string@@Base+0x70>
   23cc4:	ldr	r1, [r4, #16]
   23cc8:	mov	r0, r4
   23ccc:	bl	23b84 <flatcc_builder_create_string@@Base>
   23cd0:	mov	r5, r0
   23cd4:	cmp	r0, #0
   23cd8:	movne	r0, r4
   23cdc:	blne	21cd4 <flatcc_builder_end_buffer@@Base+0xc8>
   23ce0:	mov	r0, r5
   23ce4:	pop	{r4, r5, fp, pc}
   23ce8:	movw	r0, #19599	; 0x4c8f
   23cec:	movt	r0, #3
   23cf0:	movw	r1, #18282	; 0x476a
   23cf4:	movt	r1, #3
   23cf8:	movw	r3, #21826	; 0x5542
   23cfc:	movt	r3, #3
   23d00:	movw	r2, #1732	; 0x6c4
   23d04:	bl	14f40 <__assert_fail@plt>
   23d08:	movw	r0, #21893	; 0x5585
   23d0c:	movt	r0, #3
   23d10:	movw	r1, #18282	; 0x476a
   23d14:	movt	r1, #3
   23d18:	movw	r3, #21826	; 0x5542
   23d1c:	movt	r3, #3
   23d20:	movw	r2, #1733	; 0x6c5
   23d24:	bl	14f40 <__assert_fail@plt>

00023d28 <flatcc_builder_string_edit@@Base>:
   23d28:	ldr	r0, [r0, #16]
   23d2c:	bx	lr

00023d30 <flatcc_builder_string_len@@Base>:
   23d30:	ldr	r0, [r0, #32]
   23d34:	ldr	r0, [r0, #20]
   23d38:	bx	lr
   23d3c:	push	{r4, r5, r6, sl, fp, lr}
   23d40:	add	fp, sp, #16
   23d44:	mov	r5, r3
   23d48:	mov	r4, r0
   23d4c:	ldr	r0, [r0, #20]
   23d50:	ldr	r3, [r4, #24]
   23d54:	add	r0, r2, r0
   23d58:	sub	r0, r0, #1
   23d5c:	rsb	r2, r2, #0
   23d60:	and	r6, r0, r2
   23d64:	add	r0, r6, r1
   23d68:	str	r0, [r4, #20]
   23d6c:	cmp	r0, r3
   23d70:	bcc	23d94 <flatcc_builder_string_len@@Base+0x64>
   23d74:	add	r1, r0, #1
   23d78:	mov	r0, r4
   23d7c:	movw	r2, #65532	; 0xfffc
   23d80:	bl	241e0 <flatcc_builder_get_emit_context@@Base+0x18>
   23d84:	mov	r1, r0
   23d88:	mov	r0, #0
   23d8c:	cmp	r1, #0
   23d90:	popne	{r4, r5, r6, sl, fp, pc}
   23d94:	ldr	r0, [r4, #4]
   23d98:	add	r0, r0, r5, lsl #1
   23d9c:	add	r1, r6, #4
   23da0:	strh	r1, [r0]
   23da4:	ldrh	r0, [r4, #8]
   23da8:	cmp	r0, r5
   23dac:	addls	r0, r5, #1
   23db0:	strhls	r0, [r4, #8]
   23db4:	ldr	r0, [r4, #16]
   23db8:	add	r0, r0, r6
   23dbc:	pop	{r4, r5, r6, sl, fp, pc}

00023dc0 <flatcc_builder_table_edit@@Base>:
   23dc0:	push	{fp, lr}
   23dc4:	mov	fp, sp
   23dc8:	ldr	r2, [r0, #32]
   23dcc:	ldrh	r2, [r2, #14]
   23dd0:	cmp	r2, #3
   23dd4:	ldreq	r2, [r0, #16]
   23dd8:	ldreq	r0, [r0, #20]
   23ddc:	addeq	r0, r2, r0
   23de0:	subeq	r0, r0, r1
   23de4:	popeq	{fp, pc}
   23de8:	movw	r0, #20351	; 0x4f7f
   23dec:	movt	r0, #3
   23df0:	movw	r1, #18282	; 0x476a
   23df4:	movt	r1, #3
   23df8:	movw	r3, #22071	; 0x5637
   23dfc:	movt	r3, #3
   23e00:	movw	r2, #1794	; 0x702
   23e04:	bl	14f40 <__assert_fail@plt>

00023e08 <flatcc_builder_table_add_copy@@Base>:
   23e08:	push	{r4, r5, r6, sl, fp, lr}
   23e0c:	add	fp, sp, #16
   23e10:	mov	r4, r3
   23e14:	mov	r5, r2
   23e18:	ldr	r3, [fp, #8]
   23e1c:	mov	r2, r4
   23e20:	bl	23540 <flatcc_builder_table_add@@Base>
   23e24:	mov	r6, r0
   23e28:	cmp	r0, #0
   23e2c:	beq	23e40 <flatcc_builder_table_add_copy@@Base+0x38>
   23e30:	mov	r0, r6
   23e34:	mov	r1, r5
   23e38:	mov	r2, r4
   23e3c:	bl	14e5c <memcpy@plt>
   23e40:	mov	r0, r6
   23e44:	pop	{r4, r5, r6, sl, fp, pc}
   23e48:	push	{r4, r5, r6, r7, fp, lr}
   23e4c:	add	fp, sp, #16
   23e50:	mov	r5, r1
   23e54:	mov	r4, r0
   23e58:	ldr	r0, [r0, #20]
   23e5c:	ldr	r1, [r4, #24]
   23e60:	add	r0, r0, #3
   23e64:	bic	r7, r0, #3
   23e68:	add	r6, r7, #4
   23e6c:	str	r6, [r4, #20]
   23e70:	cmp	r6, r1
   23e74:	bls	23e98 <flatcc_builder_table_add_copy@@Base+0x90>
   23e78:	mov	r0, r4
   23e7c:	mov	r1, r6
   23e80:	movw	r2, #65532	; 0xfffc
   23e84:	bl	241e0 <flatcc_builder_get_emit_context@@Base+0x18>
   23e88:	mov	r1, r0
   23e8c:	mov	r0, #0
   23e90:	cmp	r1, #0
   23e94:	popne	{r4, r5, r6, r7, fp, pc}
   23e98:	ldr	r0, [r4, #4]
   23e9c:	add	r0, r0, r5, lsl #1
   23ea0:	strh	r6, [r0]
   23ea4:	ldrh	r0, [r4, #8]
   23ea8:	cmp	r0, r5
   23eac:	addls	r0, r5, #1
   23eb0:	strhls	r0, [r4, #8]
   23eb4:	ldr	r0, [r4]
   23eb8:	add	r1, r0, #2
   23ebc:	str	r1, [r4]
   23ec0:	strh	r7, [r0]
   23ec4:	ldr	r0, [r4, #16]
   23ec8:	add	r0, r0, r7
   23ecc:	pop	{r4, r5, r6, r7, fp, pc}

00023ed0 <flatcc_builder_push_buffer_alignment@@Base>:
   23ed0:	ldrh	r1, [r0, #128]	; 0x80
   23ed4:	mov	r2, #4
   23ed8:	strh	r2, [r0, #128]	; 0x80
   23edc:	mov	r0, r1
   23ee0:	bx	lr

00023ee4 <flatcc_builder_pop_buffer_alignment@@Base>:
   23ee4:	b	2197c <flatcc_builder_create_buffer@@Base+0x1cc>

00023ee8 <flatcc_builder_get_buffer_alignment@@Base>:
   23ee8:	ldrh	r0, [r0, #128]	; 0x80
   23eec:	bx	lr

00023ef0 <flatcc_builder_set_vtable_clustering@@Base>:
   23ef0:	clz	r1, r1
   23ef4:	lsr	r1, r1, #5
   23ef8:	str	r1, [r0, #180]	; 0xb4
   23efc:	bx	lr

00023f00 <flatcc_builder_set_block_align@@Base>:
   23f00:	strh	r1, [r0, #132]	; 0x84
   23f04:	bx	lr

00023f08 <flatcc_builder_get_level@@Base>:
   23f08:	ldr	r0, [r0, #156]	; 0x9c
   23f0c:	bx	lr

00023f10 <flatcc_builder_set_max_level@@Base>:
   23f10:	str	r1, [r0, #176]	; 0xb0
   23f14:	ldr	r2, [r0, #160]	; 0xa0
   23f18:	cmp	r2, r1
   23f1c:	strlt	r1, [r0, #160]	; 0xa0
   23f20:	bx	lr

00023f24 <flatcc_builder_get_buffer_size@@Base>:
   23f24:	ldr	r1, [r0, #136]	; 0x88
   23f28:	ldr	r0, [r0, #140]	; 0x8c
   23f2c:	sub	r0, r0, r1
   23f30:	bx	lr

00023f34 <flatcc_builder_get_buffer_start@@Base>:
   23f34:	ldr	r0, [r0, #136]	; 0x88
   23f38:	bx	lr

00023f3c <flatcc_builder_get_buffer_end@@Base>:
   23f3c:	ldr	r0, [r0, #140]	; 0x8c
   23f40:	bx	lr

00023f44 <flatcc_builder_set_vtable_cache_limit@@Base>:
   23f44:	str	r1, [r0, #172]	; 0xac
   23f48:	bx	lr

00023f4c <flatcc_builder_set_identifier@@Base>:
   23f4c:	movw	r2, #17752	; 0x4558
   23f50:	movt	r2, #3
   23f54:	cmp	r1, #0
   23f58:	movne	r2, r1
   23f5c:	ldr	r1, [r2]
   23f60:	str	r1, [r0, #168]	; 0xa8
   23f64:	bx	lr

00023f68 <flatcc_builder_get_type@@Base>:
   23f68:	ldr	r0, [r0, #32]
   23f6c:	cmp	r0, #0
   23f70:	ldrhne	r0, [r0, #14]
   23f74:	moveq	r0, #0
   23f78:	bx	lr

00023f7c <flatcc_builder_get_type_at@@Base>:
   23f7c:	mov	r2, r0
   23f80:	mov	r0, #0
   23f84:	cmp	r1, #1
   23f88:	blt	23fac <flatcc_builder_get_type_at@@Base+0x30>
   23f8c:	ldr	r3, [r2, #156]	; 0x9c
   23f90:	cmp	r3, r1
   23f94:	bxlt	lr
   23f98:	sub	r0, r1, r3
   23f9c:	add	r0, r0, r0, lsl #3
   23fa0:	ldr	r1, [r2, #32]
   23fa4:	add	r0, r1, r0, lsl #2
   23fa8:	ldrh	r0, [r0, #14]
   23fac:	bx	lr

00023fb0 <flatcc_builder_get_direct_buffer@@Base>:
   23fb0:	ldr	r2, [r0, #184]	; 0xb8
   23fb4:	cmp	r2, #0
   23fb8:	beq	23fc4 <flatcc_builder_get_direct_buffer@@Base+0x14>
   23fbc:	add	r0, r0, #188	; 0xbc
   23fc0:	b	23fd8 <flatcc_builder_get_direct_buffer@@Base+0x28>
   23fc4:	cmp	r1, #0
   23fc8:	movne	r0, #0
   23fcc:	strne	r0, [r1]
   23fd0:	mov	r0, #0
   23fd4:	bx	lr
   23fd8:	ldm	r0, {r2, r3}
   23fdc:	cmp	r2, r3
   23fe0:	beq	23ff4 <flatcc_builder_get_direct_buffer@@Base+0x44>
   23fe4:	mov	r0, #0
   23fe8:	cmp	r1, #0
   23fec:	strne	r0, [r1]
   23ff0:	bx	lr
   23ff4:	cmp	r1, #0
   23ff8:	ldrne	r2, [r0, #24]
   23ffc:	strne	r2, [r1]
   24000:	ldr	r0, [r0, #8]
   24004:	bx	lr

00024008 <flatcc_builder_copy_buffer@@Base>:
   24008:	push	{fp, lr}
   2400c:	mov	fp, sp
   24010:	ldr	r3, [r0, #184]	; 0xb8
   24014:	cmp	r3, #0
   24018:	beq	2404c <flatcc_builder_copy_buffer@@Base+0x44>
   2401c:	add	r0, r0, #188	; 0xbc
   24020:	bl	24718 <flatcc_emitter_copy_buffer@@Base>
   24024:	cmp	r0, #0
   24028:	popne	{fp, pc}
   2402c:	movw	r0, #5919	; 0x171f
   24030:	movt	r0, #3
   24034:	movw	r1, #18282	; 0x476a
   24038:	movt	r1, #3
   2403c:	movw	r3, #22210	; 0x56c2
   24040:	movt	r3, #3
   24044:	movw	r2, #1926	; 0x786
   24048:	bl	14f40 <__assert_fail@plt>
   2404c:	mov	r0, #0
   24050:	pop	{fp, pc}

00024054 <flatcc_builder_finalize_buffer@@Base>:
   24054:	push	{r4, r5, r6, sl, fp, lr}
   24058:	add	fp, sp, #16
   2405c:	mov	r6, r1
   24060:	mov	r4, r0
   24064:	bl	23f24 <flatcc_builder_get_buffer_size@@Base>
   24068:	mov	r5, r0
   2406c:	cmp	r6, #0
   24070:	strne	r5, [r6]
   24074:	mov	r0, r5
   24078:	bl	14e98 <malloc@plt>
   2407c:	cmp	r0, #0
   24080:	beq	240c4 <flatcc_builder_finalize_buffer@@Base+0x70>
   24084:	mov	r6, r0
   24088:	mov	r0, r4
   2408c:	mov	r1, r6
   24090:	mov	r2, r5
   24094:	bl	24008 <flatcc_builder_copy_buffer@@Base>
   24098:	cmp	r0, #0
   2409c:	movne	r0, r6
   240a0:	popne	{r4, r5, r6, sl, fp, pc}
   240a4:	movw	r0, #22800	; 0x5910
   240a8:	movt	r0, #3
   240ac:	movw	r1, #18282	; 0x476a
   240b0:	movt	r1, #3
   240b4:	movw	r3, #22279	; 0x5707
   240b8:	movt	r3, #3
   240bc:	movw	r2, #1948	; 0x79c
   240c0:	bl	14f40 <__assert_fail@plt>
   240c4:	movw	r0, #22800	; 0x5910
   240c8:	movt	r0, #3
   240cc:	movw	r1, #18282	; 0x476a
   240d0:	movt	r1, #3
   240d4:	movw	r3, #22279	; 0x5707
   240d8:	movt	r3, #3
   240dc:	movw	r2, #1944	; 0x798
   240e0:	bl	14f40 <__assert_fail@plt>

000240e4 <flatcc_builder_finalize_aligned_buffer@@Base>:
   240e4:	push	{r4, r5, r6, r7, fp, lr}
   240e8:	add	fp, sp, #16
   240ec:	mov	r4, r1
   240f0:	mov	r5, r0
   240f4:	bl	23f24 <flatcc_builder_get_buffer_size@@Base>
   240f8:	mov	r6, r0
   240fc:	cmp	r4, #0
   24100:	strne	r6, [r4]
   24104:	mov	r0, r5
   24108:	bl	23ee8 <flatcc_builder_get_buffer_alignment@@Base>
   2410c:	add	r1, r6, r0
   24110:	sub	r1, r1, #1
   24114:	rsb	r2, r0, #0
   24118:	and	r7, r1, r2
   2411c:	mov	r1, r7
   24120:	bl	2416c <flatcc_builder_finalize_aligned_buffer@@Base+0x88>
   24124:	cmp	r0, #0
   24128:	beq	24158 <flatcc_builder_finalize_aligned_buffer@@Base+0x74>
   2412c:	mov	r6, r0
   24130:	mov	r0, r5
   24134:	mov	r1, r6
   24138:	mov	r2, r7
   2413c:	bl	24008 <flatcc_builder_copy_buffer@@Base>
   24140:	cmp	r0, #0
   24144:	beq	24150 <flatcc_builder_finalize_aligned_buffer@@Base+0x6c>
   24148:	mov	r0, r6
   2414c:	pop	{r4, r5, r6, r7, fp, pc}
   24150:	mov	r0, r6
   24154:	bl	14e50 <free@plt>
   24158:	mov	r6, #0
   2415c:	cmp	r4, #0
   24160:	strne	r6, [r4]
   24164:	mov	r0, r6
   24168:	pop	{r4, r5, r6, r7, fp, pc}
   2416c:	push	{fp, lr}
   24170:	mov	fp, sp
   24174:	sub	sp, sp, #8
   24178:	mov	r2, r1
   2417c:	mov	r1, r0
   24180:	mov	r0, #0
   24184:	str	r0, [sp, #4]
   24188:	cmp	r1, #4
   2418c:	movls	r1, #4
   24190:	add	r0, sp, #4
   24194:	bl	14ee0 <posix_memalign@plt>
   24198:	cmp	r0, #0
   2419c:	ldrne	r0, [sp, #4]
   241a0:	cmpne	r0, #0
   241a4:	beq	241b4 <flatcc_builder_finalize_aligned_buffer@@Base+0xd0>
   241a8:	bl	14e50 <free@plt>
   241ac:	mov	r0, #0
   241b0:	str	r0, [sp, #4]
   241b4:	ldr	r0, [sp, #4]
   241b8:	mov	sp, fp
   241bc:	pop	{fp, pc}

000241c0 <flatcc_builder_aligned_alloc@@Base>:
   241c0:	b	2416c <flatcc_builder_finalize_aligned_buffer@@Base+0x88>

000241c4 <flatcc_builder_aligned_free@@Base>:
   241c4:	b	14e50 <free@plt>

000241c8 <flatcc_builder_get_emit_context@@Base>:
   241c8:	ldr	r0, [r0, #36]	; 0x24
   241cc:	bx	lr
   241d0:	ldr	r0, [r0, #140]	; 0x8c
   241d4:	sub	r1, r1, #1
   241d8:	and	r0, r0, r1
   241dc:	bx	lr
   241e0:	push	{r4, r5, r6, sl, fp, lr}
   241e4:	add	fp, sp, #16
   241e8:	sub	sp, sp, #8
   241ec:	mov	r6, r2
   241f0:	mov	r5, r0
   241f4:	ldr	r2, [r0, #28]
   241f8:	ldr	r0, [r0, #40]	; 0x28
   241fc:	ldr	r4, [r5, #48]	; 0x30
   24200:	mov	r3, #1
   24204:	str	r3, [sp]
   24208:	add	r2, r2, r1
   2420c:	add	r1, r5, #60	; 0x3c
   24210:	mov	r3, #1
   24214:	blx	r4
   24218:	mov	r1, r0
   2421c:	mvn	r0, #0
   24220:	cmp	r1, #0
   24224:	beq	24230 <flatcc_builder_get_emit_context@@Base+0x68>
   24228:	sub	sp, fp, #16
   2422c:	pop	{r4, r5, r6, sl, fp, pc}
   24230:	mov	r0, r5
   24234:	mov	r1, r6
   24238:	bl	21d8c <flatcc_builder_start_struct@@Base+0x4c>
   2423c:	mov	r0, #0
   24240:	sub	sp, fp, #16
   24244:	pop	{r4, r5, r6, sl, fp, pc}
   24248:	push	{r4, r5, r6, sl, fp, lr}
   2424c:	add	fp, sp, #16
   24250:	sub	sp, sp, #8
   24254:	mov	r4, r0
   24258:	ldr	r0, [r0, #124]	; 0x7c
   2425c:	cmp	r0, #0
   24260:	bne	24300 <flatcc_builder_get_emit_context@@Base+0x138>
   24264:	mov	r0, #0
   24268:	str	r0, [sp]
   2426c:	mov	r6, #16
   24270:	mov	r0, r4
   24274:	mov	r1, #6
   24278:	mov	r2, #0
   2427c:	mov	r3, #16
   24280:	bl	213a8 <flatcc_builder_enter_user_frame_ptr@@Base+0x78>
   24284:	mvn	r5, #0
   24288:	cmp	r0, #0
   2428c:	beq	242f4 <flatcc_builder_get_emit_context@@Base+0x12c>
   24290:	add	r1, r4, #92	; 0x5c
   24294:	str	r6, [r4, #124]	; 0x7c
   24298:	ldr	r0, [r4, #40]	; 0x28
   2429c:	ldr	ip, [r4, #48]	; 0x30
   242a0:	mov	r2, #5
   242a4:	str	r2, [sp]
   242a8:	mov	r6, #256	; 0x100
   242ac:	mov	r2, #256	; 0x100
   242b0:	mov	r3, #1
   242b4:	blx	ip
   242b8:	cmp	r0, #0
   242bc:	bne	242f4 <flatcc_builder_get_emit_context@@Base+0x12c>
   242c0:	ldr	r0, [r4, #96]	; 0x60
   242c4:	mov	r1, r6
   242c8:	lsl	r6, r6, #1
   242cc:	cmp	r0, r1, lsl #1
   242d0:	bcs	242c4 <flatcc_builder_get_emit_context@@Base+0xfc>
   242d4:	lsr	r1, r1, #2
   242d8:	mvn	r0, #0
   242dc:	mov	r2, #1
   242e0:	add	r0, r0, #1
   242e4:	cmp	r1, r2, lsl r0
   242e8:	bhi	242e0 <flatcc_builder_get_emit_context@@Base+0x118>
   242ec:	str	r0, [r4, #116]	; 0x74
   242f0:	mov	r5, #0
   242f4:	mov	r0, r5
   242f8:	sub	sp, fp, #16
   242fc:	pop	{r4, r5, r6, sl, fp, pc}
   24300:	movw	r0, #22740	; 0x58d4
   24304:	movt	r0, #3
   24308:	movw	r1, #18282	; 0x476a
   2430c:	movt	r1, #3
   24310:	movw	r3, #22755	; 0x58e3
   24314:	movt	r3, #3
   24318:	movw	r2, #342	; 0x156
   2431c:	bl	14f40 <__assert_fail@plt>

00024320 <flatcc_emitter_recycle_page@@Base>:
   24320:	ldr	ip, [r0]
   24324:	mvn	r2, #0
   24328:	cmp	ip, r1
   2432c:	beq	24374 <flatcc_emitter_recycle_page@@Base+0x54>
   24330:	ldr	r3, [r0, #4]
   24334:	cmp	r3, r1
   24338:	beq	24374 <flatcc_emitter_recycle_page@@Base+0x54>
   2433c:	ldr	r2, [r1, #2944]	; 0xb80
   24340:	ldr	r3, [r1, #2948]	; 0xb84
   24344:	str	r3, [r2, #2948]	; 0xb84
   24348:	ldr	r2, [r1, #2944]	; 0xb80
   2434c:	ldr	r3, [r1, #2948]	; 0xb84
   24350:	str	r2, [r3, #2944]	; 0xb80
   24354:	ldr	r2, [ip, #2948]	; 0xb84
   24358:	str	r2, [r1, #2948]	; 0xb84
   2435c:	ldr	r0, [r0]
   24360:	str	r0, [r1, #2944]	; 0xb80
   24364:	str	r1, [r2, #2944]	; 0xb80
   24368:	ldr	r0, [r1, #2944]	; 0xb80
   2436c:	str	r1, [r0, #2948]	; 0xb84
   24370:	mov	r2, #0
   24374:	mov	r0, r2
   24378:	bx	lr

0002437c <flatcc_emitter_reset@@Base>:
   2437c:	push	{r4, sl, fp, lr}
   24380:	add	fp, sp, #8
   24384:	mov	r4, r0
   24388:	ldr	r0, [r0]
   2438c:	cmp	r0, #0
   24390:	beq	24438 <flatcc_emitter_reset@@Base+0xbc>
   24394:	mov	r1, #1472	; 0x5c0
   24398:	add	r2, r0, #1472	; 0x5c0
   2439c:	stmib	r4, {r0, r2}
   243a0:	str	r1, [r4, #12]
   243a4:	str	r2, [r4, #16]
   243a8:	str	r1, [r4, #20]
   243ac:	movw	r1, #64064	; 0xfa40
   243b0:	movt	r1, #65535	; 0xffff
   243b4:	str	r1, [r0, #2952]	; 0xb88
   243b8:	ldr	r0, [r4, #32]
   243bc:	cmp	r0, #0
   243c0:	bne	243cc <flatcc_emitter_reset@@Base+0x50>
   243c4:	ldr	r0, [r4, #24]
   243c8:	str	r0, [r4, #32]
   243cc:	add	r2, r4, #24
   243d0:	ldm	r2, {r0, r1, r2}
   243d4:	mov	r3, #0
   243d8:	str	r3, [r4, #24]
   243dc:	add	r2, r2, r2, lsl #1
   243e0:	lsr	r2, r2, #2
   243e4:	add	r0, r2, r0, lsr #2
   243e8:	str	r0, [r4, #32]
   243ec:	cmp	r1, r0, lsl #1
   243f0:	popls	{r4, sl, fp, pc}
   243f4:	ldr	r2, [r4]
   243f8:	ldr	r1, [r4, #4]
   243fc:	ldr	r0, [r1, #2944]	; 0xb80
   24400:	cmp	r0, r2
   24404:	beq	24438 <flatcc_emitter_reset@@Base+0xbc>
   24408:	ldr	r2, [r0, #2944]	; 0xb80
   2440c:	str	r2, [r1, #2944]	; 0xb80
   24410:	ldr	r1, [r0, #2944]	; 0xb80
   24414:	ldr	r2, [r4, #4]
   24418:	str	r2, [r1, #2948]	; 0xb84
   2441c:	bl	14e50 <free@plt>
   24420:	ldr	r0, [r4, #28]
   24424:	ldr	r1, [r4, #32]
   24428:	sub	r0, r0, #2944	; 0xb80
   2442c:	str	r0, [r4, #28]
   24430:	cmp	r0, r1, lsl #1
   24434:	bhi	243f4 <flatcc_emitter_reset@@Base+0x78>
   24438:	pop	{r4, sl, fp, pc}

0002443c <flatcc_emitter_clear@@Base>:
   2443c:	push	{r4, r5, r6, sl, fp, lr}
   24440:	add	fp, sp, #16
   24444:	ldr	r5, [r0]
   24448:	cmp	r5, #0
   2444c:	beq	2449c <flatcc_emitter_clear@@Base+0x60>
   24450:	mov	r4, r0
   24454:	ldr	r0, [r5, #2948]	; 0xb84
   24458:	mov	r6, #0
   2445c:	str	r6, [r0, #2944]	; 0xb80
   24460:	ldr	r0, [r5, #2944]	; 0xb80
   24464:	cmp	r0, #0
   24468:	beq	2447c <flatcc_emitter_clear@@Base+0x40>
   2446c:	mov	r5, r0
   24470:	ldr	r0, [r0, #2948]	; 0xb84
   24474:	bl	14e50 <free@plt>
   24478:	b	24460 <flatcc_emitter_clear@@Base+0x24>
   2447c:	mov	r0, r5
   24480:	bl	14e50 <free@plt>
   24484:	vmov.i32	q8, #0	; 0x00000000
   24488:	add	r0, r4, #16
   2448c:	vst1.32	{d16-d17}, [r0]
   24490:	mov	r0, #32
   24494:	vst1.32	{d16-d17}, [r4], r0
   24498:	str	r6, [r4]
   2449c:	pop	{r4, r5, r6, sl, fp, pc}

000244a0 <flatcc_emitter@@Base>:
   244a0:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   244a4:	add	fp, sp, #24
   244a8:	mov	r4, r2
   244ac:	mov	r5, r1
   244b0:	mov	r6, r0
   244b4:	ldr	r1, [r0, #24]
   244b8:	ldr	r0, [fp, #8]
   244bc:	add	r1, r1, r0
   244c0:	str	r1, [r6, #24]
   244c4:	mov	r1, r6
   244c8:	cmn	r3, #1
   244cc:	ble	2450c <flatcc_emitter@@Base+0x6c>
   244d0:	ldr	r2, [r1, #20]!
   244d4:	cmp	r2, r0
   244d8:	bcs	24554 <flatcc_emitter@@Base+0xb4>
   244dc:	mov	r8, #0
   244e0:	cmp	r4, #0
   244e4:	beq	245a4 <flatcc_emitter@@Base+0x104>
   244e8:	ldm	r5, {r1, r2}
   244ec:	mov	r0, r6
   244f0:	bl	24668 <flatcc_emitter@@Base+0x1c8>
   244f4:	cmp	r0, #0
   244f8:	bne	24548 <flatcc_emitter@@Base+0xa8>
   244fc:	subs	r4, r4, #1
   24500:	add	r5, r5, #8
   24504:	bne	244e8 <flatcc_emitter@@Base+0x48>
   24508:	b	245a4 <flatcc_emitter@@Base+0x104>
   2450c:	ldr	r2, [r1, #12]!
   24510:	cmp	r2, r0
   24514:	bcs	24564 <flatcc_emitter@@Base+0xc4>
   24518:	add	r0, r5, r4, lsl #3
   2451c:	sub	r5, r0, #4
   24520:	rsb	r4, r4, #1
   24524:	cmp	r4, #1
   24528:	beq	245ac <flatcc_emitter@@Base+0x10c>
   2452c:	ldmda	r5, {r1, r2}
   24530:	mov	r0, r6
   24534:	bl	245b8 <flatcc_emitter@@Base+0x118>
   24538:	sub	r5, r5, #8
   2453c:	add	r4, r4, #1
   24540:	cmp	r0, #0
   24544:	beq	24524 <flatcc_emitter@@Base+0x84>
   24548:	mvn	r8, #0
   2454c:	mov	r0, r8
   24550:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   24554:	ldr	r7, [r6, #16]
   24558:	add	r3, r7, r0
   2455c:	str	r3, [r6, #16]
   24560:	b	24570 <flatcc_emitter@@Base+0xd0>
   24564:	ldr	r3, [r6, #8]
   24568:	sub	r7, r3, r0
   2456c:	str	r7, [r6, #8]
   24570:	sub	r0, r2, r0
   24574:	str	r0, [r1]
   24578:	mov	r8, #0
   2457c:	cmp	r4, #0
   24580:	beq	245a4 <flatcc_emitter@@Base+0x104>
   24584:	ldm	r5, {r1, r2}
   24588:	mov	r0, r7
   2458c:	bl	14e5c <memcpy@plt>
   24590:	ldr	r0, [r5, #4]
   24594:	add	r7, r7, r0
   24598:	add	r5, r5, #8
   2459c:	subs	r4, r4, #1
   245a0:	bne	24584 <flatcc_emitter@@Base+0xe4>
   245a4:	mov	r0, r8
   245a8:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   245ac:	mov	r8, #0
   245b0:	mov	r0, r8
   245b4:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   245b8:	push	{r4, r5, r6, r7, fp, lr}
   245bc:	add	fp, sp, #16
   245c0:	cmp	r2, #0
   245c4:	beq	24654 <flatcc_emitter@@Base+0x1b4>
   245c8:	mov	r4, r2
   245cc:	mov	r5, r0
   245d0:	clz	r0, r2
   245d4:	lsr	r7, r0, #5
   245d8:	add	r6, r1, r2
   245dc:	ldr	r0, [r5, #12]
   245e0:	cmp	r4, r0
   245e4:	bls	24614 <flatcc_emitter@@Base+0x174>
   245e8:	cmp	r0, #0
   245ec:	bne	2461c <flatcc_emitter@@Base+0x17c>
   245f0:	mov	r0, r5
   245f4:	bl	247d4 <flatcc_emitter_copy_buffer@@Base+0xbc>
   245f8:	cmp	r0, #0
   245fc:	mov	r1, r0
   24600:	movwne	r1, #1
   24604:	orr	r1, r1, r7
   24608:	tst	r1, #1
   2460c:	beq	245dc <flatcc_emitter@@Base+0x13c>
   24610:	b	2465c <flatcc_emitter@@Base+0x1bc>
   24614:	mov	r7, r4
   24618:	b	24620 <flatcc_emitter@@Base+0x180>
   2461c:	mov	r7, r0
   24620:	sub	r0, r0, r7
   24624:	str	r0, [r5, #12]
   24628:	ldr	r0, [r5, #8]
   2462c:	sub	r0, r0, r7
   24630:	str	r0, [r5, #8]
   24634:	sub	r6, r6, r7
   24638:	mov	r1, r6
   2463c:	mov	r2, r7
   24640:	bl	14e5c <memcpy@plt>
   24644:	subs	r4, r4, r7
   24648:	clz	r0, r4
   2464c:	lsr	r7, r0, #5
   24650:	bne	245dc <flatcc_emitter@@Base+0x13c>
   24654:	mov	r0, #0
   24658:	pop	{r4, r5, r6, r7, fp, pc}
   2465c:	cmp	r0, #0
   24660:	mvnne	r0, #0
   24664:	pop	{r4, r5, r6, r7, fp, pc}
   24668:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   2466c:	add	fp, sp, #24
   24670:	cmp	r2, #0
   24674:	beq	24704 <flatcc_emitter@@Base+0x264>
   24678:	mov	r4, r2
   2467c:	mov	r8, r1
   24680:	mov	r6, r0
   24684:	clz	r0, r2
   24688:	lsr	r5, r0, #5
   2468c:	ldr	r7, [r6, #20]
   24690:	cmp	r4, r7
   24694:	bls	246c4 <flatcc_emitter@@Base+0x224>
   24698:	cmp	r7, #0
   2469c:	bne	246c8 <flatcc_emitter@@Base+0x228>
   246a0:	mov	r0, r6
   246a4:	bl	248c4 <flatcc_emitter_copy_buffer@@Base+0x1ac>
   246a8:	cmp	r0, #0
   246ac:	mov	r1, r0
   246b0:	movwne	r1, #1
   246b4:	orr	r1, r1, r5
   246b8:	tst	r1, #1
   246bc:	beq	2468c <flatcc_emitter@@Base+0x1ec>
   246c0:	b	2470c <flatcc_emitter@@Base+0x26c>
   246c4:	mov	r7, r4
   246c8:	ldr	r0, [r6, #16]
   246cc:	mov	r1, r8
   246d0:	mov	r2, r7
   246d4:	bl	14e5c <memcpy@plt>
   246d8:	ldr	r0, [r6, #16]
   246dc:	ldr	r1, [r6, #20]
   246e0:	add	r0, r0, r7
   246e4:	sub	r1, r1, r7
   246e8:	str	r0, [r6, #16]
   246ec:	str	r1, [r6, #20]
   246f0:	add	r8, r8, r7
   246f4:	subs	r4, r4, r7
   246f8:	clz	r0, r4
   246fc:	lsr	r5, r0, #5
   24700:	bne	2468c <flatcc_emitter@@Base+0x1ec>
   24704:	mov	r0, #0
   24708:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   2470c:	cmp	r0, #0
   24710:	mvnne	r0, #0
   24714:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}

00024718 <flatcc_emitter_copy_buffer@@Base>:
   24718:	push	{r4, r5, r6, sl, fp, lr}
   2471c:	add	fp, sp, #16
   24720:	mov	r3, r2
   24724:	ldr	r2, [r0, #24]
   24728:	mov	r5, #0
   2472c:	cmp	r2, r3
   24730:	bhi	247b8 <flatcc_emitter_copy_buffer@@Base+0xa0>
   24734:	mov	r4, r0
   24738:	ldr	r0, [r0]
   2473c:	cmp	r0, #0
   24740:	beq	247b8 <flatcc_emitter_copy_buffer@@Base+0xa0>
   24744:	mov	r6, r1
   24748:	ldr	r1, [r4, #4]
   2474c:	cmp	r0, r1
   24750:	beq	247c0 <flatcc_emitter_copy_buffer@@Base+0xa8>
   24754:	ldr	r1, [r4, #8]
   24758:	ldr	r0, [r4, #12]
   2475c:	rsb	r5, r0, #2944	; 0xb80
   24760:	mov	r0, r6
   24764:	mov	r2, r5
   24768:	bl	14e5c <memcpy@plt>
   2476c:	add	r5, r6, r5
   24770:	ldm	r4, {r0, r1}
   24774:	ldr	r6, [r0, #2944]	; 0xb80
   24778:	cmp	r6, r1
   2477c:	beq	247a4 <flatcc_emitter_copy_buffer@@Base+0x8c>
   24780:	mov	r0, r5
   24784:	mov	r1, r6
   24788:	mov	r2, #2944	; 0xb80
   2478c:	bl	14e5c <memcpy@plt>
   24790:	add	r5, r5, #2944	; 0xb80
   24794:	ldr	r6, [r6, #2944]	; 0xb80
   24798:	ldr	r0, [r4, #4]
   2479c:	cmp	r6, r0
   247a0:	bne	24780 <flatcc_emitter_copy_buffer@@Base+0x68>
   247a4:	ldr	r0, [r4, #20]
   247a8:	rsb	r2, r0, #2944	; 0xb80
   247ac:	mov	r0, r5
   247b0:	mov	r1, r6
   247b4:	bl	14e5c <memcpy@plt>
   247b8:	mov	r0, r5
   247bc:	pop	{r4, r5, r6, sl, fp, pc}
   247c0:	ldr	r1, [r4, #8]
   247c4:	mov	r0, r6
   247c8:	bl	14e5c <memcpy@plt>
   247cc:	mov	r0, r6
   247d0:	pop	{r4, r5, r6, sl, fp, pc}
   247d4:	push	{r4, r5, fp, lr}
   247d8:	add	fp, sp, #8
   247dc:	mov	r4, r0
   247e0:	ldr	r5, [r0]
   247e4:	cmp	r5, #0
   247e8:	beq	24810 <flatcc_emitter_copy_buffer@@Base+0xf8>
   247ec:	ldr	r0, [r5, #2948]	; 0xb84
   247f0:	ldr	r1, [r4, #4]
   247f4:	cmp	r0, r1
   247f8:	beq	24810 <flatcc_emitter_copy_buffer@@Base+0xf8>
   247fc:	ldr	r1, [r5, #2952]	; 0xb88
   24800:	sub	r1, r1, #2944	; 0xb80
   24804:	str	r1, [r0, #2952]	; 0xb88
   24808:	ldr	r0, [r5, #2948]	; 0xb84
   2480c:	b	2484c <flatcc_emitter_copy_buffer@@Base+0x134>
   24810:	movw	r0, #2956	; 0xb8c
   24814:	bl	14e98 <malloc@plt>
   24818:	cmp	r0, #0
   2481c:	beq	2487c <flatcc_emitter_copy_buffer@@Base+0x164>
   24820:	ldr	r1, [r4, #28]
   24824:	add	r1, r1, #2944	; 0xb80
   24828:	str	r1, [r4, #28]
   2482c:	cmp	r5, #0
   24830:	beq	24884 <flatcc_emitter_copy_buffer@@Base+0x16c>
   24834:	ldm	r4, {r1, r2}
   24838:	str	r1, [r0, #2944]	; 0xb80
   2483c:	str	r2, [r0, #2948]	; 0xb84
   24840:	str	r0, [r1, #2948]	; 0xb84
   24844:	ldr	r1, [r4, #4]
   24848:	str	r0, [r1, #2944]	; 0xb80
   2484c:	str	r0, [r4]
   24850:	mov	r0, #2944	; 0xb80
   24854:	ldr	r1, [r4]
   24858:	add	r2, r1, #2944	; 0xb80
   2485c:	str	r2, [r4, #8]
   24860:	str	r0, [r4, #12]
   24864:	ldr	r0, [r1, #2944]	; 0xb80
   24868:	ldr	r0, [r0, #2952]	; 0xb88
   2486c:	sub	r0, r0, #2944	; 0xb80
   24870:	str	r0, [r1, #2952]	; 0xb88
   24874:	mov	r0, #0
   24878:	pop	{r4, r5, fp, pc}
   2487c:	mvn	r0, #0
   24880:	pop	{r4, r5, fp, pc}
   24884:	str	r0, [r4, #4]
   24888:	str	r0, [r4]
   2488c:	mov	r1, #1472	; 0x5c0
   24890:	str	r1, [r4, #20]
   24894:	str	r1, [r4, #12]
   24898:	ldr	r1, [r4]
   2489c:	add	r1, r1, #1472	; 0x5c0
   248a0:	str	r1, [r4, #16]
   248a4:	str	r1, [r4, #8]
   248a8:	movw	r1, #64064	; 0xfa40
   248ac:	movt	r1, #65535	; 0xffff
   248b0:	str	r0, [r0, #2944]	; 0xb80
   248b4:	str	r0, [r0, #2948]	; 0xb84
   248b8:	str	r1, [r0, #2952]	; 0xb88
   248bc:	mov	r0, #0
   248c0:	pop	{r4, r5, fp, pc}
   248c4:	push	{r4, r5, fp, lr}
   248c8:	add	fp, sp, #8
   248cc:	mov	r4, r0
   248d0:	ldr	r5, [r0, #4]
   248d4:	cmp	r5, #0
   248d8:	beq	248ec <flatcc_emitter_copy_buffer@@Base+0x1d4>
   248dc:	ldr	r0, [r5, #2944]	; 0xb80
   248e0:	ldr	r1, [r4]
   248e4:	cmp	r0, r1
   248e8:	bne	24924 <flatcc_emitter_copy_buffer@@Base+0x20c>
   248ec:	movw	r0, #2956	; 0xb8c
   248f0:	bl	14e98 <malloc@plt>
   248f4:	cmp	r0, #0
   248f8:	beq	24950 <flatcc_emitter_copy_buffer@@Base+0x238>
   248fc:	ldr	r1, [r4, #28]
   24900:	add	r1, r1, #2944	; 0xb80
   24904:	str	r1, [r4, #28]
   24908:	cmp	r5, #0
   2490c:	beq	24958 <flatcc_emitter_copy_buffer@@Base+0x240>
   24910:	ldr	r1, [r4]
   24914:	str	r1, [r0, #2944]	; 0xb80
   24918:	str	r5, [r0, #2948]	; 0xb84
   2491c:	str	r0, [r1, #2948]	; 0xb84
   24920:	str	r0, [r5, #2944]	; 0xb80
   24924:	str	r0, [r4, #4]
   24928:	mov	r0, #2944	; 0xb80
   2492c:	ldr	r1, [r4, #4]
   24930:	str	r1, [r4, #16]
   24934:	str	r0, [r4, #20]
   24938:	ldr	r0, [r1, #2948]	; 0xb84
   2493c:	ldr	r0, [r0, #2952]	; 0xb88
   24940:	add	r0, r0, #2944	; 0xb80
   24944:	str	r0, [r1, #2952]	; 0xb88
   24948:	mov	r0, #0
   2494c:	pop	{r4, r5, fp, pc}
   24950:	mvn	r0, #0
   24954:	pop	{r4, r5, fp, pc}
   24958:	str	r0, [r4, #4]
   2495c:	str	r0, [r4]
   24960:	mov	r1, #1472	; 0x5c0
   24964:	str	r1, [r4, #20]
   24968:	str	r1, [r4, #12]
   2496c:	ldr	r1, [r4]
   24970:	add	r1, r1, #1472	; 0x5c0
   24974:	str	r1, [r4, #16]
   24978:	str	r1, [r4, #8]
   2497c:	movw	r1, #64064	; 0xfa40
   24980:	movt	r1, #65535	; 0xffff
   24984:	str	r0, [r0, #2944]	; 0xb80
   24988:	str	r0, [r0, #2948]	; 0xb84
   2498c:	str	r1, [r0, #2952]	; 0xb88
   24990:	mov	r0, #0
   24994:	pop	{r4, r5, fp, pc}

00024998 <flatcc_verify_error_string@@Base>:
   24998:	cmp	r0, #36	; 0x24
   2499c:	movwhi	r0, #24014	; 0x5dce
   249a0:	movthi	r0, #3
   249a4:	bxhi	lr
   249a8:	movw	r1, #24024	; 0x5dd8
   249ac:	movt	r1, #3
   249b0:	ldr	r0, [r1, r0, lsl #2]
   249b4:	bx	lr

000249b8 <flatcc_verify_field@@Base>:
   249b8:	b	249bc <flatcc_verify_field@@Base+0x4>
   249bc:	push	{r4, r5, r6, r7, fp, lr}
   249c0:	add	fp, sp, #16
   249c4:	mov	r4, r3
   249c8:	mov	r6, r2
   249cc:	mov	r5, r0
   249d0:	ldr	r7, [r0]
   249d4:	bl	256e0 <flatcc_verify_union_field@@Base+0x134>
   249d8:	movw	r1, #65535	; 0xffff
   249dc:	tst	r0, r1
   249e0:	beq	24a18 <flatcc_verify_field@@Base+0x60>
   249e4:	uxtah	r2, r6, r0
   249e8:	ldrh	r3, [r5, #20]
   249ec:	mov	r1, #13
   249f0:	cmp	r2, r3
   249f4:	bhi	24a1c <flatcc_verify_field@@Base+0x64>
   249f8:	uxth	r0, r0
   249fc:	add	r0, r0, r7
   24a00:	ldr	r1, [r5, #16]
   24a04:	add	r0, r0, r1
   24a08:	sub	r1, r4, #1
   24a0c:	ands	r0, r0, r1
   24a10:	movwne	r0, #12
   24a14:	pop	{r4, r5, r6, r7, fp, pc}
   24a18:	mov	r1, #0
   24a1c:	mov	r0, r1
   24a20:	pop	{r4, r5, r6, r7, fp, pc}

00024a24 <flatcc_verify_string_field@@Base>:
   24a24:	push	{r4, r5, r6, sl, fp, lr}
   24a28:	add	fp, sp, #16
   24a2c:	sub	sp, sp, #8
   24a30:	mov	r4, r0
   24a34:	add	r3, sp, #4
   24a38:	bl	24a80 <flatcc_verify_string_field@@Base+0x5c>
   24a3c:	cmp	r0, #0
   24a40:	bne	24a78 <flatcc_verify_string_field@@Base+0x54>
   24a44:	ldr	r5, [sp, #4]
   24a48:	cmp	r5, #0
   24a4c:	beq	24a78 <flatcc_verify_string_field@@Base+0x54>
   24a50:	ldr	r6, [r4]
   24a54:	ldr	r4, [r4, #4]
   24a58:	mov	r0, r6
   24a5c:	mov	r1, r5
   24a60:	bl	24b70 <flatcc_verify_string_field@@Base+0x14c>
   24a64:	mov	r3, r0
   24a68:	mov	r0, r6
   24a6c:	mov	r1, r4
   24a70:	mov	r2, r5
   24a74:	bl	24af8 <flatcc_verify_string_field@@Base+0xd4>
   24a78:	sub	sp, fp, #16
   24a7c:	pop	{r4, r5, r6, sl, fp, pc}
   24a80:	push	{r4, r5, r6, sl, fp, lr}
   24a84:	add	fp, sp, #16
   24a88:	mov	r4, r3
   24a8c:	mov	r6, r2
   24a90:	mov	r5, r0
   24a94:	bl	256e0 <flatcc_verify_union_field@@Base+0x134>
   24a98:	mov	r1, r0
   24a9c:	movw	r0, #65535	; 0xffff
   24aa0:	tst	r1, r0
   24aa4:	beq	24ae0 <flatcc_verify_string_field@@Base+0xbc>
   24aa8:	mov	r0, #4
   24aac:	uxtah	r2, r0, r1
   24ab0:	ldrh	r3, [r5, #20]
   24ab4:	mov	r0, #13
   24ab8:	cmp	r2, r3
   24abc:	bhi	24adc <flatcc_verify_string_field@@Base+0xb8>
   24ac0:	uxth	r0, r1
   24ac4:	ldr	r1, [r5, #16]
   24ac8:	add	r1, r1, r0
   24acc:	mov	r0, #12
   24ad0:	tst	r1, #3
   24ad4:	streq	r1, [r4]
   24ad8:	moveq	r0, #0
   24adc:	pop	{r4, r5, r6, sl, fp, pc}
   24ae0:	mov	r0, #0
   24ae4:	str	r0, [r4]
   24ae8:	cmp	r6, #0
   24aec:	movwne	r6, #1
   24af0:	lsl	r0, r6, #2
   24af4:	pop	{r4, r5, r6, sl, fp, pc}
   24af8:	push	{r4, r5, r6, r7, fp, lr}
   24afc:	add	fp, sp, #16
   24b00:	mov	r6, r3
   24b04:	mov	r7, r2
   24b08:	mov	r5, r1
   24b0c:	mov	r4, r0
   24b10:	mov	r0, r1
   24b14:	mov	r1, r2
   24b18:	mov	r2, r3
   24b1c:	bl	259a0 <flatcc_verify_union_vector_field@@Base+0x288>
   24b20:	cmp	r0, #0
   24b24:	beq	24b64 <flatcc_verify_string_field@@Base+0x140>
   24b28:	add	r6, r6, r7
   24b2c:	mov	r0, r4
   24b30:	mov	r1, r6
   24b34:	bl	24b70 <flatcc_verify_string_field@@Base+0x14c>
   24b38:	add	r2, r6, #4
   24b3c:	sub	r3, r5, r2
   24b40:	add	r7, r0, #1
   24b44:	mov	r1, #8
   24b48:	cmp	r3, r7
   24b4c:	bcc	24b68 <flatcc_verify_string_field@@Base+0x144>
   24b50:	add	r1, r4, r2
   24b54:	ldrb	r0, [r1, r0]
   24b58:	cmp	r0, #0
   24b5c:	movwne	r0, #7
   24b60:	pop	{r4, r5, r6, r7, fp, pc}
   24b64:	mov	r1, #17
   24b68:	mov	r0, r1
   24b6c:	pop	{r4, r5, r6, r7, fp, pc}
   24b70:	add	r0, r0, r1
   24b74:	b	259cc <flatcc_verify_union_vector_field@@Base+0x2b4>

00024b78 <flatcc_verify_vector_field@@Base>:
   24b78:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   24b7c:	add	fp, sp, #24
   24b80:	sub	sp, sp, #16
   24b84:	mov	r4, r3
   24b88:	mov	r6, r0
   24b8c:	add	r3, sp, #12
   24b90:	bl	24a80 <flatcc_verify_string_field@@Base+0x5c>
   24b94:	cmp	r0, #0
   24b98:	bne	24be0 <flatcc_verify_vector_field@@Base+0x68>
   24b9c:	ldr	r5, [sp, #12]
   24ba0:	cmp	r5, #0
   24ba4:	beq	24be0 <flatcc_verify_vector_field@@Base+0x68>
   24ba8:	ldr	r8, [fp, #12]
   24bac:	ldr	r9, [fp, #8]
   24bb0:	ldr	r7, [r6]
   24bb4:	ldr	r6, [r6, #4]
   24bb8:	mov	r0, r7
   24bbc:	mov	r1, r5
   24bc0:	bl	24b70 <flatcc_verify_string_field@@Base+0x14c>
   24bc4:	mov	r3, r0
   24bc8:	stm	sp, {r4, r9}
   24bcc:	str	r8, [sp, #8]
   24bd0:	mov	r0, r7
   24bd4:	mov	r1, r6
   24bd8:	mov	r2, r5
   24bdc:	bl	24be8 <flatcc_verify_vector_field@@Base+0x70>
   24be0:	sub	sp, fp, #24
   24be4:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   24be8:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   24bec:	add	fp, sp, #24
   24bf0:	mov	r5, r3
   24bf4:	mov	r7, r2
   24bf8:	mov	r4, r1
   24bfc:	mov	r6, r0
   24c00:	ldr	r3, [fp, #12]
   24c04:	mov	r0, r1
   24c08:	mov	r1, r2
   24c0c:	mov	r2, r5
   24c10:	bl	259d8 <flatcc_verify_union_vector_field@@Base+0x2c0>
   24c14:	cmp	r0, #0
   24c18:	beq	24c60 <flatcc_verify_vector_field@@Base+0xe8>
   24c1c:	ldr	r8, [fp, #16]
   24c20:	add	r5, r5, r7
   24c24:	mov	r0, r6
   24c28:	mov	r1, r5
   24c2c:	bl	24b70 <flatcc_verify_string_field@@Base+0x14c>
   24c30:	mov	r1, r0
   24c34:	mov	r0, #25
   24c38:	cmp	r1, r8
   24c3c:	bhi	24c5c <flatcc_verify_vector_field@@Base+0xe4>
   24c40:	ldr	r0, [fp, #8]
   24c44:	mul	r1, r1, r0
   24c48:	sub	r0, r4, r5
   24c4c:	sub	r2, r0, #4
   24c50:	mov	r0, #0
   24c54:	cmp	r2, r1
   24c58:	movwcc	r0, #26
   24c5c:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   24c60:	mov	r0, #16
   24c64:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}

00024c68 <flatcc_verify_string_vector_field@@Base>:
   24c68:	push	{r4, r5, r6, sl, fp, lr}
   24c6c:	add	fp, sp, #16
   24c70:	sub	sp, sp, #8
   24c74:	mov	r4, r0
   24c78:	add	r3, sp, #4
   24c7c:	bl	24a80 <flatcc_verify_string_field@@Base+0x5c>
   24c80:	cmp	r0, #0
   24c84:	bne	24cbc <flatcc_verify_string_vector_field@@Base+0x54>
   24c88:	ldr	r5, [sp, #4]
   24c8c:	cmp	r5, #0
   24c90:	beq	24cbc <flatcc_verify_string_vector_field@@Base+0x54>
   24c94:	ldr	r6, [r4]
   24c98:	ldr	r4, [r4, #4]
   24c9c:	mov	r0, r6
   24ca0:	mov	r1, r5
   24ca4:	bl	24b70 <flatcc_verify_string_field@@Base+0x14c>
   24ca8:	mov	r3, r0
   24cac:	mov	r0, r6
   24cb0:	mov	r1, r4
   24cb4:	mov	r2, r5
   24cb8:	bl	24cc4 <flatcc_verify_string_vector_field@@Base+0x5c>
   24cbc:	sub	sp, fp, #16
   24cc0:	pop	{r4, r5, r6, sl, fp, pc}
   24cc4:	push	{r4, r5, r6, r7, fp, lr}
   24cc8:	add	fp, sp, #16
   24ccc:	sub	sp, sp, #16
   24cd0:	mov	r6, r3
   24cd4:	mov	r7, r2
   24cd8:	mov	r4, r1
   24cdc:	mov	r5, r0
   24ce0:	mvn	r0, #-1073741824	; 0xc0000000
   24ce4:	mov	r1, #4
   24ce8:	str	r1, [sp]
   24cec:	str	r1, [sp, #4]
   24cf0:	str	r0, [sp, #8]
   24cf4:	mov	r0, r5
   24cf8:	mov	r1, r4
   24cfc:	bl	24be8 <flatcc_verify_vector_field@@Base+0x70>
   24d00:	cmp	r0, #0
   24d04:	beq	24d10 <flatcc_verify_string_vector_field@@Base+0xa8>
   24d08:	sub	sp, fp, #16
   24d0c:	pop	{r4, r5, r6, r7, fp, pc}
   24d10:	add	r7, r6, r7
   24d14:	mov	r0, r5
   24d18:	mov	r1, r7
   24d1c:	bl	24b70 <flatcc_verify_string_field@@Base+0x14c>
   24d20:	cmp	r0, #0
   24d24:	beq	24d64 <flatcc_verify_string_vector_field@@Base+0xfc>
   24d28:	mov	r6, r0
   24d2c:	add	r7, r7, #4
   24d30:	mov	r0, r5
   24d34:	mov	r1, r7
   24d38:	bl	24b70 <flatcc_verify_string_field@@Base+0x14c>
   24d3c:	mov	r3, r0
   24d40:	mov	r0, r5
   24d44:	mov	r1, r4
   24d48:	mov	r2, r7
   24d4c:	bl	24af8 <flatcc_verify_string_field@@Base+0xd4>
   24d50:	cmp	r0, #0
   24d54:	bne	24d08 <flatcc_verify_string_vector_field@@Base+0xa0>
   24d58:	subs	r6, r6, #1
   24d5c:	add	r7, r7, #4
   24d60:	bne	24d30 <flatcc_verify_string_vector_field@@Base+0xc8>
   24d64:	mov	r0, #0
   24d68:	sub	sp, fp, #16
   24d6c:	pop	{r4, r5, r6, r7, fp, pc}

00024d70 <flatcc_verify_table_field@@Base>:
   24d70:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   24d74:	add	fp, sp, #24
   24d78:	sub	sp, sp, #16
   24d7c:	mov	r8, r3
   24d80:	mov	r5, r0
   24d84:	add	r3, sp, #12
   24d88:	bl	24a80 <flatcc_verify_string_field@@Base+0x5c>
   24d8c:	cmp	r0, #0
   24d90:	bne	24dd0 <flatcc_verify_table_field@@Base+0x60>
   24d94:	ldr	r6, [sp, #12]
   24d98:	cmp	r6, #0
   24d9c:	beq	24dd0 <flatcc_verify_table_field@@Base+0x60>
   24da0:	ldr	r7, [r5]
   24da4:	ldr	r4, [r5, #4]
   24da8:	mov	r0, r7
   24dac:	mov	r1, r6
   24db0:	bl	24b70 <flatcc_verify_string_field@@Base+0x14c>
   24db4:	mov	r3, r0
   24db8:	ldr	r0, [r5, #8]
   24dbc:	stm	sp, {r0, r8}
   24dc0:	mov	r0, r7
   24dc4:	mov	r1, r4
   24dc8:	mov	r2, r6
   24dcc:	bl	24dd8 <flatcc_verify_table_field@@Base+0x68>
   24dd0:	sub	sp, fp, #24
   24dd4:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   24dd8:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   24ddc:	add	fp, sp, #24
   24de0:	sub	sp, sp, #24
   24de4:	mov	r4, r0
   24de8:	ldr	r0, [fp, #8]
   24dec:	subs	r0, r0, #1
   24df0:	str	r0, [sp, #8]
   24df4:	beq	24ecc <flatcc_verify_table_field@@Base+0x15c>
   24df8:	mov	r6, r3
   24dfc:	mov	r7, r2
   24e00:	mov	r5, r1
   24e04:	mov	r0, r1
   24e08:	mov	r1, r2
   24e0c:	mov	r2, r3
   24e10:	bl	259a0 <flatcc_verify_union_vector_field@@Base+0x288>
   24e14:	cmp	r0, #0
   24e18:	beq	24ed8 <flatcc_verify_table_field@@Base+0x168>
   24e1c:	add	r7, r6, r7
   24e20:	str	r7, [sp, #16]
   24e24:	mov	r0, r4
   24e28:	mov	r1, r7
   24e2c:	bl	24b70 <flatcc_verify_string_field@@Base+0x14c>
   24e30:	sub	r6, r7, r0
   24e34:	mov	r0, #29
   24e38:	tst	r6, #-2147483647	; 0x80000001
   24e3c:	bne	24ec4 <flatcc_verify_table_field@@Base+0x154>
   24e40:	add	r8, r6, #2
   24e44:	mov	r0, #27
   24e48:	cmp	r8, r5
   24e4c:	bhi	24ec4 <flatcc_verify_table_field@@Base+0x154>
   24e50:	mov	r0, r4
   24e54:	mov	r1, r6
   24e58:	bl	25a14 <flatcc_verify_union_vector_field@@Base+0x2fc>
   24e5c:	mov	r1, r0
   24e60:	strh	r0, [sp, #22]
   24e64:	mov	r0, #30
   24e68:	tst	r1, #1
   24e6c:	bne	24ec4 <flatcc_verify_table_field@@Base+0x154>
   24e70:	add	r2, r6, r1
   24e74:	cmp	r2, r5
   24e78:	bhi	24ec4 <flatcc_verify_table_field@@Base+0x154>
   24e7c:	mov	r0, #28
   24e80:	cmp	r1, #4
   24e84:	bcc	24ec4 <flatcc_verify_table_field@@Base+0x154>
   24e88:	mov	r0, r4
   24e8c:	mov	r1, r8
   24e90:	bl	25a14 <flatcc_verify_union_vector_field@@Base+0x2fc>
   24e94:	mov	r1, r0
   24e98:	strh	r0, [sp, #20]
   24e9c:	sub	r2, r5, r7
   24ea0:	mov	r0, #20
   24ea4:	cmp	r2, r1
   24ea8:	bcc	24ec4 <flatcc_verify_table_field@@Base+0x154>
   24eac:	ldr	r1, [fp, #12]
   24eb0:	stm	sp, {r4, r5}
   24eb4:	add	r0, r4, r6
   24eb8:	str	r0, [sp, #12]
   24ebc:	mov	r0, sp
   24ec0:	blx	r1
   24ec4:	sub	sp, fp, #24
   24ec8:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   24ecc:	mov	r0, #3
   24ed0:	sub	sp, fp, #24
   24ed4:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   24ed8:	mov	r0, #15
   24edc:	sub	sp, fp, #24
   24ee0:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}

00024ee4 <flatcc_verify_table_vector_field@@Base>:
   24ee4:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   24ee8:	add	fp, sp, #24
   24eec:	sub	sp, sp, #16
   24ef0:	mov	r8, r3
   24ef4:	mov	r5, r0
   24ef8:	add	r3, sp, #12
   24efc:	bl	24a80 <flatcc_verify_string_field@@Base+0x5c>
   24f00:	cmp	r0, #0
   24f04:	bne	24f44 <flatcc_verify_table_vector_field@@Base+0x60>
   24f08:	ldr	r6, [sp, #12]
   24f0c:	cmp	r6, #0
   24f10:	beq	24f44 <flatcc_verify_table_vector_field@@Base+0x60>
   24f14:	ldr	r7, [r5]
   24f18:	ldr	r4, [r5, #4]
   24f1c:	mov	r0, r7
   24f20:	mov	r1, r6
   24f24:	bl	24b70 <flatcc_verify_string_field@@Base+0x14c>
   24f28:	mov	r3, r0
   24f2c:	ldr	r0, [r5, #8]
   24f30:	stm	sp, {r0, r8}
   24f34:	mov	r0, r7
   24f38:	mov	r1, r4
   24f3c:	mov	r2, r6
   24f40:	bl	24f4c <flatcc_verify_table_vector_field@@Base+0x68>
   24f44:	sub	sp, fp, #24
   24f48:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   24f4c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   24f50:	add	fp, sp, #28
   24f54:	sub	sp, sp, #12
   24f58:	ldr	r9, [fp, #8]
   24f5c:	cmp	r9, #1
   24f60:	blt	25008 <flatcc_verify_table_vector_field@@Base+0x124>
   24f64:	mov	r6, r3
   24f68:	mov	r7, r2
   24f6c:	mov	r4, r1
   24f70:	mov	r5, r0
   24f74:	mvn	r0, #-1073741824	; 0xc0000000
   24f78:	mov	r1, #4
   24f7c:	str	r1, [sp]
   24f80:	str	r1, [sp, #4]
   24f84:	str	r0, [sp, #8]
   24f88:	mov	r0, r5
   24f8c:	mov	r1, r4
   24f90:	bl	24be8 <flatcc_verify_vector_field@@Base+0x70>
   24f94:	mov	r8, r0
   24f98:	cmp	r0, #0
   24f9c:	bne	2500c <flatcc_verify_table_vector_field@@Base+0x128>
   24fa0:	add	r7, r6, r7
   24fa4:	mov	r0, r5
   24fa8:	mov	r1, r7
   24fac:	bl	24b70 <flatcc_verify_string_field@@Base+0x14c>
   24fb0:	mov	r8, #0
   24fb4:	cmp	r0, #0
   24fb8:	beq	2500c <flatcc_verify_table_vector_field@@Base+0x128>
   24fbc:	mov	r6, r0
   24fc0:	sub	r9, r9, #1
   24fc4:	ldr	sl, [fp, #12]
   24fc8:	add	r7, r7, #4
   24fcc:	mov	r0, r5
   24fd0:	mov	r1, r7
   24fd4:	bl	24b70 <flatcc_verify_string_field@@Base+0x14c>
   24fd8:	mov	r3, r0
   24fdc:	stm	sp, {r9, sl}
   24fe0:	mov	r0, r5
   24fe4:	mov	r1, r4
   24fe8:	mov	r2, r7
   24fec:	bl	24dd8 <flatcc_verify_table_field@@Base+0x68>
   24ff0:	cmp	r0, #0
   24ff4:	bne	25018 <flatcc_verify_table_vector_field@@Base+0x134>
   24ff8:	subs	r6, r6, #1
   24ffc:	add	r7, r7, #4
   25000:	bne	24fcc <flatcc_verify_table_vector_field@@Base+0xe8>
   25004:	b	2500c <flatcc_verify_table_vector_field@@Base+0x128>
   25008:	mov	r8, #3
   2500c:	mov	r0, r8
   25010:	sub	sp, fp, #28
   25014:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   25018:	mov	r0, r5
   2501c:	mov	r1, r7
   25020:	bl	24b70 <flatcc_verify_string_field@@Base+0x14c>
   25024:	mov	r3, r0
   25028:	stm	sp, {r9, sl}
   2502c:	mov	r0, r5
   25030:	mov	r1, r4
   25034:	mov	r2, r7
   25038:	bl	24dd8 <flatcc_verify_table_field@@Base+0x68>
   2503c:	sub	sp, fp, #28
   25040:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}

00025044 <flatcc_verify_union_table@@Base>:
   25044:	push	{fp, lr}
   25048:	mov	fp, sp
   2504c:	sub	sp, sp, #8
   25050:	ldr	r2, [r0, #16]
   25054:	ldr	r3, [r0, #20]
   25058:	ldm	r0, {ip, lr}
   2505c:	ldr	r0, [r0, #8]
   25060:	stm	sp, {r0, r1}
   25064:	mov	r0, ip
   25068:	mov	r1, lr
   2506c:	bl	24dd8 <flatcc_verify_table_field@@Base+0x68>
   25070:	mov	sp, fp
   25074:	pop	{fp, pc}

00025078 <flatcc_verify_union_struct@@Base>:
   25078:	push	{fp, lr}
   2507c:	mov	fp, sp
   25080:	sub	sp, sp, #8
   25084:	mov	ip, r1
   25088:	ldr	r3, [r0, #4]
   2508c:	ldr	r1, [r0, #16]
   25090:	ldr	lr, [r0, #20]
   25094:	str	r2, [sp]
   25098:	mov	r0, r3
   2509c:	mov	r2, lr
   250a0:	mov	r3, ip
   250a4:	bl	250b0 <flatcc_verify_union_struct@@Base+0x38>
   250a8:	mov	sp, fp
   250ac:	pop	{fp, pc}
   250b0:	mov	ip, r0
   250b4:	mov	r0, #18
   250b8:	cmp	r2, #0
   250bc:	beq	250f4 <flatcc_verify_union_struct@@Base+0x7c>
   250c0:	add	r1, r2, r1
   250c4:	cmp	r1, ip
   250c8:	bhi	250f4 <flatcc_verify_union_struct@@Base+0x7c>
   250cc:	adds	r2, r1, r3
   250d0:	mov	r0, #10
   250d4:	bcs	250f4 <flatcc_verify_union_struct@@Base+0x7c>
   250d8:	mov	r0, #9
   250dc:	cmp	r2, ip
   250e0:	bxhi	lr
   250e4:	ldr	r0, [sp]
   250e8:	sub	r0, r0, #1
   250ec:	ands	r0, r0, r1
   250f0:	movwne	r0, #11
   250f4:	bx	lr

000250f8 <flatcc_verify_union_string@@Base>:
   250f8:	ldr	ip, [r0]
   250fc:	ldr	r1, [r0, #4]
   25100:	ldr	r2, [r0, #16]
   25104:	ldr	r3, [r0, #20]
   25108:	mov	r0, ip
   2510c:	b	24af8 <flatcc_verify_string_field@@Base+0xd4>

00025110 <flatcc_verify_buffer_header@@Base>:
   25110:	push	{r4, r5, fp, lr}
   25114:	add	fp, sp, #8
   25118:	mov	r4, r0
   2511c:	mov	r0, #5
   25120:	tst	r4, #3
   25124:	bne	25170 <flatcc_verify_buffer_header@@Base+0x60>
   25128:	mov	r0, #6
   2512c:	cmn	r1, #9
   25130:	bhi	25170 <flatcc_verify_buffer_header@@Base+0x60>
   25134:	mov	r0, #1
   25138:	cmp	r1, #8
   2513c:	popcc	{r4, r5, fp, pc}
   25140:	cmp	r2, #0
   25144:	beq	25174 <flatcc_verify_buffer_header@@Base+0x64>
   25148:	mov	r0, r2
   2514c:	bl	2517c <flatcc_verify_buffer_header@@Base+0x6c>
   25150:	mov	r5, r0
   25154:	mov	r0, r4
   25158:	bl	251b0 <flatcc_verify_buffer_header@@Base+0xa0>
   2515c:	cmp	r5, #0
   25160:	movne	r1, r0
   25164:	movne	r0, #2
   25168:	cmpne	r1, r5
   2516c:	moveq	r0, #0
   25170:	pop	{r4, r5, fp, pc}
   25174:	mov	r0, #0
   25178:	pop	{r4, r5, fp, pc}
   2517c:	push	{fp, lr}
   25180:	mov	fp, sp
   25184:	sub	sp, sp, #8
   25188:	mov	r1, r0
   2518c:	mov	r0, #0
   25190:	str	r0, [sp, #4]
   25194:	add	r0, sp, #4
   25198:	mov	r2, #4
   2519c:	bl	14ef8 <strncpy@plt>
   251a0:	ldr	r0, [sp, #4]
   251a4:	bl	25a28 <flatcc_verify_union_vector_field@@Base+0x310>
   251a8:	mov	sp, fp
   251ac:	pop	{fp, pc}
   251b0:	add	r0, r0, #4
   251b4:	b	25a2c <flatcc_verify_union_vector_field@@Base+0x314>

000251b8 <flatcc_verify_typed_buffer_header@@Base>:
   251b8:	push	{r4, sl, fp, lr}
   251bc:	add	fp, sp, #8
   251c0:	mov	r4, r2
   251c4:	mov	r2, #5
   251c8:	tst	r0, #3
   251cc:	bne	25200 <flatcc_verify_typed_buffer_header@@Base+0x48>
   251d0:	mov	r2, #6
   251d4:	cmn	r1, #9
   251d8:	bhi	25200 <flatcc_verify_typed_buffer_header@@Base+0x48>
   251dc:	mov	r2, #1
   251e0:	cmp	r1, #8
   251e4:	bcc	25200 <flatcc_verify_typed_buffer_header@@Base+0x48>
   251e8:	cmp	r4, #0
   251ec:	beq	25208 <flatcc_verify_typed_buffer_header@@Base+0x50>
   251f0:	bl	251b0 <flatcc_verify_buffer_header@@Base+0xa0>
   251f4:	mov	r2, #2
   251f8:	cmp	r0, r4
   251fc:	moveq	r2, #0
   25200:	mov	r0, r2
   25204:	pop	{r4, sl, fp, pc}
   25208:	mov	r2, #0
   2520c:	mov	r0, r2
   25210:	pop	{r4, sl, fp, pc}

00025214 <flatcc_verify_struct_as_root@@Base>:
   25214:	push	{r4, r5, r6, r7, fp, lr}
   25218:	add	fp, sp, #16
   2521c:	sub	sp, sp, #8
   25220:	mov	r4, r3
   25224:	mov	r7, r2
   25228:	mov	r5, r1
   2522c:	mov	r6, r0
   25230:	bl	25110 <flatcc_verify_buffer_header@@Base>
   25234:	cmp	r0, #0
   25238:	beq	25254 <flatcc_verify_struct_as_root@@Base+0x40>
   2523c:	mov	r0, r6
   25240:	mov	r1, r5
   25244:	mov	r2, r7
   25248:	sub	sp, fp, #16
   2524c:	pop	{r4, r5, r6, r7, fp, lr}
   25250:	b	25110 <flatcc_verify_buffer_header@@Base>
   25254:	ldr	r7, [fp, #8]
   25258:	mov	r0, r6
   2525c:	mov	r1, #0
   25260:	bl	24b70 <flatcc_verify_string_field@@Base+0x14c>
   25264:	mov	r2, r0
   25268:	str	r7, [sp]
   2526c:	mov	r0, r5
   25270:	mov	r1, #0
   25274:	mov	r3, r4
   25278:	bl	250b0 <flatcc_verify_union_struct@@Base+0x38>
   2527c:	sub	sp, fp, #16
   25280:	pop	{r4, r5, r6, r7, fp, pc}

00025284 <flatcc_verify_struct_as_typed_root@@Base>:
   25284:	push	{r4, r5, r6, r7, fp, lr}
   25288:	add	fp, sp, #16
   2528c:	sub	sp, sp, #8
   25290:	mov	r4, r3
   25294:	mov	r5, r1
   25298:	mov	r6, r0
   2529c:	bl	251b8 <flatcc_verify_typed_buffer_header@@Base>
   252a0:	cmp	r0, #0
   252a4:	beq	252b0 <flatcc_verify_struct_as_typed_root@@Base+0x2c>
   252a8:	sub	sp, fp, #16
   252ac:	pop	{r4, r5, r6, r7, fp, pc}
   252b0:	ldr	r7, [fp, #8]
   252b4:	mov	r0, r6
   252b8:	mov	r1, #0
   252bc:	bl	24b70 <flatcc_verify_string_field@@Base+0x14c>
   252c0:	mov	r2, r0
   252c4:	str	r7, [sp]
   252c8:	mov	r0, r5
   252cc:	mov	r1, #0
   252d0:	mov	r3, r4
   252d4:	bl	250b0 <flatcc_verify_union_struct@@Base+0x38>
   252d8:	sub	sp, fp, #16
   252dc:	pop	{r4, r5, r6, r7, fp, pc}

000252e0 <flatcc_verify_table_as_root@@Base>:
   252e0:	push	{r4, r5, r6, r7, fp, lr}
   252e4:	add	fp, sp, #16
   252e8:	sub	sp, sp, #8
   252ec:	mov	r5, r3
   252f0:	mov	r7, r2
   252f4:	mov	r4, r1
   252f8:	mov	r6, r0
   252fc:	bl	25110 <flatcc_verify_buffer_header@@Base>
   25300:	cmp	r0, #0
   25304:	beq	25320 <flatcc_verify_table_as_root@@Base+0x40>
   25308:	mov	r0, r6
   2530c:	mov	r1, r4
   25310:	mov	r2, r7
   25314:	sub	sp, fp, #16
   25318:	pop	{r4, r5, r6, r7, fp, lr}
   2531c:	b	25110 <flatcc_verify_buffer_header@@Base>
   25320:	mov	r0, r6
   25324:	mov	r1, #0
   25328:	bl	24b70 <flatcc_verify_string_field@@Base+0x14c>
   2532c:	mov	r3, r0
   25330:	mov	r0, #100	; 0x64
   25334:	stm	sp, {r0, r5}
   25338:	mov	r0, r6
   2533c:	mov	r1, r4
   25340:	mov	r2, #0
   25344:	bl	24dd8 <flatcc_verify_table_field@@Base+0x68>
   25348:	sub	sp, fp, #16
   2534c:	pop	{r4, r5, r6, r7, fp, pc}

00025350 <flatcc_verify_table_as_typed_root@@Base>:
   25350:	push	{r4, r5, r6, sl, fp, lr}
   25354:	add	fp, sp, #16
   25358:	sub	sp, sp, #8
   2535c:	mov	r5, r3
   25360:	mov	r4, r1
   25364:	mov	r6, r0
   25368:	bl	251b8 <flatcc_verify_typed_buffer_header@@Base>
   2536c:	cmp	r0, #0
   25370:	beq	2537c <flatcc_verify_table_as_typed_root@@Base+0x2c>
   25374:	sub	sp, fp, #16
   25378:	pop	{r4, r5, r6, sl, fp, pc}
   2537c:	mov	r0, r6
   25380:	mov	r1, #0
   25384:	bl	24b70 <flatcc_verify_string_field@@Base+0x14c>
   25388:	mov	r3, r0
   2538c:	mov	r0, #100	; 0x64
   25390:	stm	sp, {r0, r5}
   25394:	mov	r0, r6
   25398:	mov	r1, r4
   2539c:	mov	r2, #0
   253a0:	bl	24dd8 <flatcc_verify_table_field@@Base+0x68>
   253a4:	sub	sp, fp, #16
   253a8:	pop	{r4, r5, r6, sl, fp, pc}

000253ac <flatcc_verify_struct_as_nested_root@@Base>:
   253ac:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   253b0:	add	fp, sp, #28
   253b4:	sub	sp, sp, #12
   253b8:	mov	r8, r3
   253bc:	mov	r7, r2
   253c0:	mov	r6, r1
   253c4:	mov	r4, r0
   253c8:	mvn	sl, #0
   253cc:	mov	r5, #1
   253d0:	stm	sp, {r5, sl}
   253d4:	ldr	r9, [fp, #12]
   253d8:	mov	r3, r9
   253dc:	bl	24b78 <flatcc_verify_vector_field@@Base>
   253e0:	cmp	r0, #0
   253e4:	beq	25408 <flatcc_verify_struct_as_nested_root@@Base+0x5c>
   253e8:	stm	sp, {r5, sl}
   253ec:	mov	r0, r4
   253f0:	mov	r1, r6
   253f4:	mov	r2, r7
   253f8:	mov	r3, r9
   253fc:	bl	24b78 <flatcc_verify_vector_field@@Base>
   25400:	sub	sp, fp, #28
   25404:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   25408:	mov	r0, r4
   2540c:	mov	r1, r6
   25410:	bl	25468 <flatcc_verify_struct_as_nested_root@@Base+0xbc>
   25414:	cmp	r0, #0
   25418:	beq	2545c <flatcc_verify_struct_as_nested_root@@Base+0xb0>
   2541c:	mov	r4, r0
   25420:	ldr	r6, [fp, #8]
   25424:	mov	r1, #0
   25428:	bl	24b70 <flatcc_verify_string_field@@Base+0x14c>
   2542c:	add	r4, r0, r4
   25430:	mov	r0, r4
   25434:	mov	r1, #0
   25438:	bl	24b70 <flatcc_verify_string_field@@Base+0x14c>
   2543c:	mov	r1, r0
   25440:	str	r9, [sp]
   25444:	add	r0, r4, #4
   25448:	mov	r2, r8
   2544c:	mov	r3, r6
   25450:	bl	25214 <flatcc_verify_struct_as_root@@Base>
   25454:	sub	sp, fp, #28
   25458:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2545c:	mov	r0, #0
   25460:	sub	sp, fp, #28
   25464:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   25468:	push	{r4, sl, fp, lr}
   2546c:	add	fp, sp, #8
   25470:	mov	r4, r0
   25474:	bl	256e0 <flatcc_verify_union_field@@Base+0x134>
   25478:	uxth	r0, r0
   2547c:	cmp	r0, #0
   25480:	beq	25498 <flatcc_verify_struct_as_nested_root@@Base+0xec>
   25484:	ldr	r1, [r4]
   25488:	ldr	r2, [r4, #16]
   2548c:	add	r1, r1, r2
   25490:	add	r0, r1, r0
   25494:	pop	{r4, sl, fp, pc}
   25498:	mov	r0, #0
   2549c:	pop	{r4, sl, fp, pc}

000254a0 <flatcc_verify_table_as_nested_root@@Base>:
   254a0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   254a4:	add	fp, sp, #28
   254a8:	sub	sp, sp, #12
   254ac:	mov	r8, r3
   254b0:	mov	r7, r2
   254b4:	mov	r6, r1
   254b8:	mov	r4, r0
   254bc:	mvn	r9, #0
   254c0:	mov	sl, #1
   254c4:	str	sl, [sp]
   254c8:	str	r9, [sp, #4]
   254cc:	ldr	r5, [fp, #8]
   254d0:	mov	r3, r5
   254d4:	bl	24b78 <flatcc_verify_vector_field@@Base>
   254d8:	cmp	r0, #0
   254dc:	beq	25504 <flatcc_verify_table_as_nested_root@@Base+0x64>
   254e0:	str	sl, [sp]
   254e4:	str	r9, [sp, #4]
   254e8:	mov	r0, r4
   254ec:	mov	r1, r6
   254f0:	mov	r2, r7
   254f4:	mov	r3, r5
   254f8:	bl	24b78 <flatcc_verify_vector_field@@Base>
   254fc:	sub	sp, fp, #28
   25500:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   25504:	ldr	r9, [fp, #12]
   25508:	mov	r0, r4
   2550c:	mov	r1, r6
   25510:	bl	25468 <flatcc_verify_struct_as_nested_root@@Base+0xbc>
   25514:	cmp	r0, #0
   25518:	beq	25570 <flatcc_verify_table_as_nested_root@@Base+0xd0>
   2551c:	mov	r5, r0
   25520:	mov	r1, #0
   25524:	bl	24b70 <flatcc_verify_string_field@@Base+0x14c>
   25528:	add	r5, r0, r5
   2552c:	mov	r0, r5
   25530:	mov	r1, #0
   25534:	bl	24b70 <flatcc_verify_string_field@@Base+0x14c>
   25538:	mov	r6, r0
   2553c:	add	r7, r5, #4
   25540:	mov	r0, r7
   25544:	mov	r1, r6
   25548:	mov	r2, r8
   2554c:	bl	25110 <flatcc_verify_buffer_header@@Base>
   25550:	cmp	r0, #0
   25554:	beq	2557c <flatcc_verify_table_as_nested_root@@Base+0xdc>
   25558:	mov	r0, r7
   2555c:	mov	r1, r6
   25560:	mov	r2, r8
   25564:	sub	sp, fp, #28
   25568:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2556c:	b	25110 <flatcc_verify_buffer_header@@Base>
   25570:	mov	r0, #0
   25574:	sub	sp, fp, #28
   25578:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2557c:	mov	r0, r7
   25580:	mov	r1, #0
   25584:	bl	24b70 <flatcc_verify_string_field@@Base+0x14c>
   25588:	mov	r3, r0
   2558c:	ldr	r0, [r4, #8]
   25590:	stm	sp, {r0, r9}
   25594:	mov	r0, r7
   25598:	mov	r1, r6
   2559c:	mov	r2, #0
   255a0:	bl	24dd8 <flatcc_verify_table_field@@Base+0x68>
   255a4:	sub	sp, fp, #28
   255a8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}

000255ac <flatcc_verify_union_field@@Base>:
   255ac:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   255b0:	add	fp, sp, #24
   255b4:	sub	sp, sp, #32
   255b8:	mov	r8, r3
   255bc:	mov	r9, r2
   255c0:	mov	r7, r1
   255c4:	mov	r5, r0
   255c8:	sub	r0, r1, #1
   255cc:	uxth	r4, r0
   255d0:	mov	r0, r5
   255d4:	mov	r1, r4
   255d8:	bl	256e0 <flatcc_verify_union_field@@Base+0x134>
   255dc:	uxth	r6, r0
   255e0:	cmp	r6, #0
   255e4:	beq	25698 <flatcc_verify_union_field@@Base+0xec>
   255e8:	mov	r0, r5
   255ec:	mov	r1, r4
   255f0:	mov	r2, #1
   255f4:	mov	r3, #1
   255f8:	bl	249bc <flatcc_verify_field@@Base+0x4>
   255fc:	cmp	r0, #0
   25600:	bne	256b8 <flatcc_verify_union_field@@Base+0x10c>
   25604:	mov	r0, r5
   25608:	mov	r1, r7
   2560c:	bl	256e0 <flatcc_verify_union_field@@Base+0x134>
   25610:	ldr	r1, [r5]
   25614:	ldr	r2, [r5, #16]
   25618:	add	r4, r1, r2
   2561c:	ldrb	r1, [r4, r6]
   25620:	movw	r2, #65535	; 0xffff
   25624:	tst	r0, r2
   25628:	beq	25638 <flatcc_verify_union_field@@Base+0x8c>
   2562c:	mov	r0, #24
   25630:	cmp	r1, #0
   25634:	beq	256b8 <flatcc_verify_union_field@@Base+0x10c>
   25638:	cmp	r1, #0
   2563c:	beq	256d4 <flatcc_verify_union_field@@Base+0x128>
   25640:	add	r3, sp, #28
   25644:	mov	r0, r5
   25648:	mov	r1, r7
   2564c:	mov	r2, r9
   25650:	bl	24a80 <flatcc_verify_string_field@@Base+0x5c>
   25654:	cmp	r0, #0
   25658:	bne	256b8 <flatcc_verify_union_field@@Base+0x10c>
   2565c:	ldr	r1, [sp, #28]
   25660:	cmp	r1, #0
   25664:	beq	256b8 <flatcc_verify_union_field@@Base+0x10c>
   25668:	ldm	r5, {r0, r2, r3}
   2566c:	str	r1, [sp, #20]
   25670:	stmib	sp, {r0, r2, r3}
   25674:	ldr	r0, [r5]
   25678:	bl	24b70 <flatcc_verify_string_field@@Base+0x14c>
   2567c:	str	r0, [sp, #24]
   25680:	ldrb	r0, [r4, r6]
   25684:	strb	r0, [sp, #16]
   25688:	add	r0, sp, #4
   2568c:	blx	r8
   25690:	sub	sp, fp, #24
   25694:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   25698:	mov	r0, r5
   2569c:	mov	r1, r7
   256a0:	bl	256e0 <flatcc_verify_union_field@@Base+0x134>
   256a4:	mov	r1, r0
   256a8:	mov	r0, #23
   256ac:	movw	r2, #65535	; 0xffff
   256b0:	tst	r1, r2
   256b4:	beq	256c0 <flatcc_verify_union_field@@Base+0x114>
   256b8:	sub	sp, fp, #24
   256bc:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   256c0:	cmp	r9, #0
   256c4:	movwne	r9, #21
   256c8:	mov	r0, r9
   256cc:	sub	sp, fp, #24
   256d0:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   256d4:	mov	r0, #0
   256d8:	sub	sp, fp, #24
   256dc:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   256e0:	push	{fp, lr}
   256e4:	mov	fp, sp
   256e8:	mov	r2, #4
   256ec:	add	r1, r2, r1, lsl #1
   256f0:	uxth	r1, r1
   256f4:	ldrh	r3, [r0, #22]
   256f8:	mov	r2, #0
   256fc:	cmp	r1, r3
   25700:	bcs	25710 <flatcc_verify_union_field@@Base+0x164>
   25704:	ldr	r0, [r0, #12]
   25708:	bl	25a14 <flatcc_verify_union_vector_field@@Base+0x2fc>
   2570c:	mov	r2, r0
   25710:	mov	r0, r2
   25714:	pop	{fp, pc}

00025718 <flatcc_verify_union_vector_field@@Base>:
   25718:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2571c:	add	fp, sp, #28
   25720:	sub	sp, sp, #20
   25724:	mov	r8, r3
   25728:	mov	r6, r2
   2572c:	mov	sl, r1
   25730:	mov	r5, r0
   25734:	sub	r0, r1, #1
   25738:	uxth	r4, r0
   2573c:	mov	r0, r5
   25740:	mov	r1, r4
   25744:	bl	256e0 <flatcc_verify_union_field@@Base+0x134>
   25748:	movw	r1, #65535	; 0xffff
   2574c:	tst	r0, r1
   25750:	beq	2579c <flatcc_verify_union_vector_field@@Base+0x84>
   25754:	mvn	r9, #0
   25758:	mov	r7, #1
   2575c:	stm	sp, {r7, r9}
   25760:	mov	r0, r5
   25764:	mov	r1, r4
   25768:	mov	r2, r6
   2576c:	mov	r3, #1
   25770:	bl	24b78 <flatcc_verify_vector_field@@Base>
   25774:	cmp	r0, #0
   25778:	beq	257c4 <flatcc_verify_union_vector_field@@Base+0xac>
   2577c:	stm	sp, {r7, r9}
   25780:	mov	r0, r5
   25784:	mov	r1, r4
   25788:	mov	r2, r6
   2578c:	mov	r3, #1
   25790:	bl	24b78 <flatcc_verify_vector_field@@Base>
   25794:	sub	sp, fp, #28
   25798:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2579c:	mov	r0, r5
   257a0:	mov	r1, sl
   257a4:	bl	256e0 <flatcc_verify_union_field@@Base+0x134>
   257a8:	cmp	r6, #0
   257ac:	beq	25754 <flatcc_verify_union_vector_field@@Base+0x3c>
   257b0:	uxth	r1, r0
   257b4:	mov	r0, #22
   257b8:	cmp	r1, #0
   257bc:	beq	2585c <flatcc_verify_union_vector_field@@Base+0x144>
   257c0:	b	25754 <flatcc_verify_union_vector_field@@Base+0x3c>
   257c4:	mov	r0, r5
   257c8:	mov	r1, r4
   257cc:	bl	25468 <flatcc_verify_struct_as_nested_root@@Base+0xbc>
   257d0:	cmp	r0, #0
   257d4:	beq	25864 <flatcc_verify_union_vector_field@@Base+0x14c>
   257d8:	mov	r4, r0
   257dc:	mov	r1, #0
   257e0:	bl	24b70 <flatcc_verify_string_field@@Base+0x14c>
   257e4:	add	r4, r0, r4
   257e8:	mov	r0, r4
   257ec:	mov	r1, #0
   257f0:	bl	24b70 <flatcc_verify_string_field@@Base+0x14c>
   257f4:	mov	r9, r0
   257f8:	add	r3, sp, #16
   257fc:	mov	r0, r5
   25800:	mov	r1, sl
   25804:	mov	r2, r6
   25808:	bl	24a80 <flatcc_verify_string_field@@Base+0x5c>
   2580c:	cmp	r0, #0
   25810:	bne	2585c <flatcc_verify_union_vector_field@@Base+0x144>
   25814:	ldr	r6, [sp, #16]
   25818:	cmp	r6, #0
   2581c:	beq	2585c <flatcc_verify_union_vector_field@@Base+0x144>
   25820:	ldm	r5, {r7, sl}
   25824:	mov	r0, r7
   25828:	mov	r1, r6
   2582c:	bl	24b70 <flatcc_verify_string_field@@Base+0x14c>
   25830:	mov	r3, r0
   25834:	ldr	r0, [r5, #8]
   25838:	add	r1, r4, #4
   2583c:	str	r9, [sp]
   25840:	str	r1, [sp, #4]
   25844:	str	r0, [sp, #8]
   25848:	str	r8, [sp, #12]
   2584c:	mov	r0, r7
   25850:	mov	r1, sl
   25854:	mov	r2, r6
   25858:	bl	25870 <flatcc_verify_union_vector_field@@Base+0x158>
   2585c:	sub	sp, fp, #28
   25860:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   25864:	mov	r0, #0
   25868:	sub	sp, fp, #28
   2586c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   25870:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   25874:	add	fp, sp, #28
   25878:	sub	sp, sp, #36	; 0x24
   2587c:	ldr	r8, [fp, #16]
   25880:	cmp	r8, #1
   25884:	blt	2591c <flatcc_verify_union_vector_field@@Base+0x204>
   25888:	mov	r6, r3
   2588c:	mov	r4, r2
   25890:	mov	r7, r1
   25894:	mov	r9, r0
   25898:	mvn	r0, #-1073741824	; 0xc0000000
   2589c:	mov	r1, #4
   258a0:	str	r1, [sp]
   258a4:	str	r1, [sp, #4]
   258a8:	str	r0, [sp, #8]
   258ac:	mov	r0, r9
   258b0:	mov	r1, r7
   258b4:	bl	24be8 <flatcc_verify_vector_field@@Base+0x70>
   258b8:	mov	r5, r0
   258bc:	cmp	r0, #0
   258c0:	bne	25920 <flatcc_verify_union_vector_field@@Base+0x208>
   258c4:	ldr	sl, [fp, #8]
   258c8:	add	r4, r6, r4
   258cc:	mov	r0, r9
   258d0:	mov	r1, r4
   258d4:	bl	24b70 <flatcc_verify_string_field@@Base+0x14c>
   258d8:	mov	r5, #34	; 0x22
   258dc:	cmp	r0, sl
   258e0:	bne	25920 <flatcc_verify_union_vector_field@@Base+0x208>
   258e4:	mov	r6, r0
   258e8:	sub	r0, r8, #1
   258ec:	str	r0, [sp, #20]
   258f0:	str	r7, [sp, #16]
   258f4:	str	r9, [sp, #12]
   258f8:	mov	r5, #0
   258fc:	cmp	r6, #0
   25900:	beq	25920 <flatcc_verify_union_vector_field@@Base+0x208>
   25904:	ldr	r0, [fp, #20]
   25908:	ldr	sl, [fp, #12]
   2590c:	add	r7, r4, #4
   25910:	mov	r4, r0
   25914:	add	r8, sp, #12
   25918:	b	25944 <flatcc_verify_union_vector_field@@Base+0x22c>
   2591c:	mov	r5, #3
   25920:	mov	r0, r5
   25924:	sub	sp, fp, #28
   25928:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2592c:	cmp	r1, #0
   25930:	bne	25998 <flatcc_verify_union_vector_field@@Base+0x280>
   25934:	add	sl, sl, #1
   25938:	subs	r6, r6, #1
   2593c:	add	r7, r7, #4
   25940:	beq	25920 <flatcc_verify_union_vector_field@@Base+0x208>
   25944:	mov	r0, r9
   25948:	mov	r1, r7
   2594c:	bl	24b70 <flatcc_verify_string_field@@Base+0x14c>
   25950:	ldrb	r1, [sl]
   25954:	cmp	r0, #0
   25958:	beq	2592c <flatcc_verify_union_vector_field@@Base+0x214>
   2595c:	cmp	r1, #0
   25960:	beq	25990 <flatcc_verify_union_vector_field@@Base+0x278>
   25964:	str	r0, [sp, #32]
   25968:	str	r7, [sp, #28]
   2596c:	strb	r1, [sp, #24]
   25970:	mov	r0, r8
   25974:	blx	r4
   25978:	cmp	r0, #0
   2597c:	beq	25934 <flatcc_verify_union_vector_field@@Base+0x21c>
   25980:	add	r0, sp, #12
   25984:	blx	r4
   25988:	mov	r5, r0
   2598c:	b	25920 <flatcc_verify_union_vector_field@@Base+0x208>
   25990:	mov	r5, #33	; 0x21
   25994:	b	25920 <flatcc_verify_union_vector_field@@Base+0x208>
   25998:	mov	r5, #32
   2599c:	b	25920 <flatcc_verify_union_vector_field@@Base+0x208>
   259a0:	mov	r3, r0
   259a4:	add	r2, r2, r1
   259a8:	mov	r0, #0
   259ac:	cmp	r2, r1
   259b0:	bxls	lr
   259b4:	add	r1, r2, #4
   259b8:	cmp	r1, r3
   259bc:	andls	r0, r2, #3
   259c0:	clzls	r0, r0
   259c4:	lsrls	r0, r0, #5
   259c8:	bx	lr
   259cc:	ldr	r0, [r0]
   259d0:	b	259d4 <flatcc_verify_union_vector_field@@Base+0x2bc>
   259d4:	bx	lr
   259d8:	mov	ip, r0
   259dc:	cmp	r3, #4
   259e0:	movls	r3, #4
   259e4:	add	r2, r2, r1
   259e8:	mov	r0, #0
   259ec:	cmp	r2, r1
   259f0:	bxls	lr
   259f4:	add	r1, r2, #4
   259f8:	cmp	r1, ip
   259fc:	subls	r0, r3, #1
   25a00:	orrls	r0, r0, #3
   25a04:	andls	r0, r0, r1
   25a08:	clzls	r0, r0
   25a0c:	lsrls	r0, r0, #5
   25a10:	bx	lr
   25a14:	add	r0, r0, r1
   25a18:	b	25a1c <flatcc_verify_union_vector_field@@Base+0x304>
   25a1c:	ldrh	r0, [r0]
   25a20:	b	25a24 <flatcc_verify_union_vector_field@@Base+0x30c>
   25a24:	bx	lr
   25a28:	bx	lr
   25a2c:	ldr	r0, [r0]
   25a30:	b	25a34 <flatcc_verify_union_vector_field@@Base+0x31c>
   25a34:	bx	lr

00025a38 <grisu3_diy_fp_encode_double@@Base>:
   25a38:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   25a3c:	add	fp, sp, #28
   25a40:	sub	sp, sp, #68	; 0x44
   25a44:	mov	r9, r3
   25a48:	mov	r7, r2
   25a4c:	mov	r2, r0
   25a50:	mov	r6, #0
   25a54:	str	r6, [sp]
   25a58:	str	r6, [sp, #4]
   25a5c:	add	r0, sp, #48	; 0x30
   25a60:	mov	r3, r1
   25a64:	bl	25cb0 <grisu3_diy_fp_encode_double@@Base+0x278>
   25a68:	ldr	r0, [fp, #8]
   25a6c:	cmp	r0, #0
   25a70:	movwne	r0, #1
   25a74:	lsl	r0, r0, #2
   25a78:	ldr	r1, [sp, #48]	; 0x30
   25a7c:	str	r1, [sp, #28]
   25a80:	ldr	sl, [sp, #52]	; 0x34
   25a84:	ldr	r5, [sp, #56]	; 0x38
   25a88:	ldr	r8, [sp, #60]	; 0x3c
   25a8c:	rsb	r1, r5, #0
   25a90:	lsl	r4, r0, r1
   25a94:	str	r9, [sp, #24]
   25a98:	sub	r7, r7, r9
   25a9c:	add	r1, sp, #48	; 0x30
   25aa0:	mov	r0, r7
   25aa4:	bl	25d54 <grisu3_diy_fp_encode_double@@Base+0x31c>
   25aa8:	cmp	r7, r0
   25aac:	bne	25ab8 <grisu3_diy_fp_encode_double@@Base+0x80>
   25ab0:	ldr	r2, [sp, #28]
   25ab4:	b	25b24 <grisu3_diy_fp_encode_double@@Base+0xec>
   25ab8:	mvn	r0, r0
   25abc:	add	r7, r7, r0
   25ac0:	cmp	r7, #7
   25ac4:	bcs	25c90 <grisu3_diy_fp_encode_double@@Base+0x258>
   25ac8:	stm	sp, {r5, r8}
   25acc:	movw	r0, #24176	; 0x5e70
   25ad0:	movt	r0, #3
   25ad4:	ldr	r1, [r0, r7, lsl #4]!
   25ad8:	str	r1, [sp, #8]
   25adc:	ldmib	r0, {r1, r2}
   25ae0:	ldr	r0, [r0, #12]
   25ae4:	str	r0, [sp, #20]
   25ae8:	str	r2, [sp, #16]
   25aec:	str	r1, [sp, #12]
   25af0:	add	r0, sp, #32
   25af4:	ldr	r2, [sp, #28]
   25af8:	mov	r3, sl
   25afc:	bl	25e3c <grisu3_diy_fp_encode_double@@Base+0x404>
   25b00:	ldr	r0, [sp, #24]
   25b04:	add	r0, r0, r7
   25b08:	add	r0, r0, #1
   25b0c:	cmp	r0, #19
   25b10:	addgt	r4, r4, #4
   25b14:	ldr	r2, [sp, #32]
   25b18:	ldr	sl, [sp, #36]	; 0x24
   25b1c:	ldr	r5, [sp, #40]	; 0x28
   25b20:	ldr	r8, [sp, #44]	; 0x2c
   25b24:	add	r7, sp, #48	; 0x30
   25b28:	ldm	r7, {r0, r1, r7}
   25b2c:	ldr	r3, [sp, #60]	; 0x3c
   25b30:	stm	sp, {r5, r8}
   25b34:	add	ip, sp, #8
   25b38:	stm	ip, {r0, r1, r7}
   25b3c:	str	r3, [sp, #20]
   25b40:	add	r0, sp, #32
   25b44:	mov	r3, sl
   25b48:	bl	25e3c <grisu3_diy_fp_encode_double@@Base+0x404>
   25b4c:	add	r5, sp, #32
   25b50:	ldm	r5, {r2, r3, r5}
   25b54:	ldr	r0, [sp, #44]	; 0x2c
   25b58:	str	r5, [sp]
   25b5c:	str	r0, [sp, #4]
   25b60:	add	r0, sp, #32
   25b64:	bl	25cb0 <grisu3_diy_fp_encode_double@@Base+0x278>
   25b68:	mov	r0, #9
   25b6c:	cmp	r4, #0
   25b70:	movweq	r0, #8
   25b74:	add	r0, r0, r4
   25b78:	ldr	r3, [sp, #32]
   25b7c:	ldr	r1, [sp, #36]	; 0x24
   25b80:	ldr	r2, [sp, #40]	; 0x28
   25b84:	sub	r7, r5, r2
   25b88:	lsl	r9, r0, r7
   25b8c:	add	r7, r2, #64	; 0x40
   25b90:	movw	r0, #64462	; 0xfbce
   25b94:	movt	r0, #65535	; 0xffff
   25b98:	add	r5, r0, #63	; 0x3f
   25b9c:	cmp	r7, r5
   25ba0:	bgt	25bf0 <grisu3_diy_fp_encode_double@@Base+0x1b8>
   25ba4:	mov	r6, #64	; 0x40
   25ba8:	mvn	r5, #1072	; 0x430
   25bac:	cmp	r7, r5
   25bb0:	blt	25bc0 <grisu3_diy_fp_encode_double@@Base+0x188>
   25bb4:	sub	r6, r0, r2
   25bb8:	cmp	r6, #61	; 0x3d
   25bbc:	blt	25bf0 <grisu3_diy_fp_encode_double@@Base+0x1b8>
   25bc0:	sub	r0, r6, #62	; 0x3e
   25bc4:	mov	r7, #9
   25bc8:	add	r9, r7, r9, asr r0
   25bcc:	lsr	r3, r3, r0
   25bd0:	rsb	r7, r6, #94	; 0x5e
   25bd4:	orr	r3, r3, r1, lsl r7
   25bd8:	subs	r7, r6, #94	; 0x5e
   25bdc:	lsrpl	r3, r1, r7
   25be0:	add	r2, r0, r2
   25be4:	lsr	r1, r1, r0
   25be8:	movwpl	r1, #0
   25bec:	mov	r6, #62	; 0x3e
   25bf0:	ldr	r8, [fp, #12]
   25bf4:	lsr	r0, r3, r6
   25bf8:	rsb	r7, r6, #32
   25bfc:	orr	r0, r0, r1, lsl r7
   25c00:	subs	r7, r6, #32
   25c04:	lsrpl	r0, r1, r7
   25c08:	add	r2, r2, r6
   25c0c:	lsr	r1, r1, r6
   25c10:	movwpl	r1, #0
   25c14:	sub	r7, r6, #1
   25c18:	mov	r5, #1
   25c1c:	lsl	r5, r5, r7
   25c20:	subs	r7, r6, #33	; 0x21
   25c24:	movwpl	r5, #0
   25c28:	add	r7, r9, r5, lsl #3
   25c2c:	lsl	sl, r5, #3
   25c30:	and	r3, r5, r3
   25c34:	lsl	r5, r3, #3
   25c38:	mov	r4, #0
   25c3c:	cmp	r6, r7
   25c40:	blt	25c60 <grisu3_diy_fp_encode_double@@Base+0x228>
   25c44:	adds	r0, r0, #1
   25c48:	adc	r1, r1, #0
   25c4c:	tst	r1, #2097152	; 0x200000
   25c50:	beq	25c60 <grisu3_diy_fp_encode_double@@Base+0x228>
   25c54:	lsrs	r1, r1, #1
   25c58:	rrx	r0, r0
   25c5c:	add	r2, r2, #1
   25c60:	mov	r3, r4
   25c64:	bl	25e9c <grisu3_diy_fp_encode_double@@Base+0x464>
   25c68:	vstr	d0, [r8]
   25c6c:	cmp	r5, r7
   25c70:	mov	r0, #0
   25c74:	movwge	r0, #1
   25c78:	sub	r1, sl, r9
   25c7c:	cmp	r1, r5
   25c80:	movwge	r4, #1
   25c84:	orr	r0, r0, r4
   25c88:	sub	sp, fp, #28
   25c8c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   25c90:	movw	r0, #26844	; 0x68dc
   25c94:	movt	r0, #3
   25c98:	movw	r1, #26872	; 0x68f8
   25c9c:	movt	r1, #3
   25ca0:	movw	r3, #26959	; 0x694f
   25ca4:	movt	r3, #3
   25ca8:	mov	r2, #185	; 0xb9
   25cac:	bl	14f40 <__assert_fail@plt>
   25cb0:	push	{r4, sl, fp, lr}
   25cb4:	add	fp, sp, #8
   25cb8:	orrs	r1, r2, r3
   25cbc:	beq	25d34 <grisu3_diy_fp_encode_double@@Base+0x2fc>
   25cc0:	ldr	r1, [fp, #8]
   25cc4:	mov	r4, #0
   25cc8:	cmp	r4, r3, lsr #22
   25ccc:	bne	25ce8 <grisu3_diy_fp_encode_double@@Base+0x2b0>
   25cd0:	lsl	r3, r3, #10
   25cd4:	orr	r3, r3, r2, lsr #22
   25cd8:	sub	r1, r1, #10
   25cdc:	lsl	r2, r2, #10
   25ce0:	cmp	r3, #4194304	; 0x400000
   25ce4:	bcc	25cd0 <grisu3_diy_fp_encode_double@@Base+0x298>
   25ce8:	ldr	ip, [fp, #12]
   25cec:	cmp	r3, #0
   25cf0:	bmi	25d1c <grisu3_diy_fp_encode_double@@Base+0x2e4>
   25cf4:	mvn	lr, #0
   25cf8:	lsl	r3, r3, #1
   25cfc:	orr	r3, r3, r2, lsr #31
   25d00:	sub	r1, r1, #1
   25d04:	lsl	r4, r2, #1
   25d08:	subs	r2, lr, r2, lsl #1
   25d0c:	sbcs	r2, lr, r3
   25d10:	mov	r2, r4
   25d14:	blt	25cf8 <grisu3_diy_fp_encode_double@@Base+0x2c0>
   25d18:	b	25d20 <grisu3_diy_fp_encode_double@@Base+0x2e8>
   25d1c:	mov	r4, r2
   25d20:	str	r4, [r0]
   25d24:	str	r3, [r0, #4]
   25d28:	str	r1, [r0, #8]
   25d2c:	str	ip, [r0, #12]
   25d30:	pop	{r4, sl, fp, pc}
   25d34:	movw	r0, #28162	; 0x6e02
   25d38:	movt	r0, #3
   25d3c:	movw	r1, #28171	; 0x6e0b
   25d40:	movt	r1, #3
   25d44:	movw	r3, #28257	; 0x6e61
   25d48:	movt	r3, #3
   25d4c:	mov	r2, #260	; 0x104
   25d50:	bl	14f40 <__assert_fail@plt>
   25d54:	push	{fp, lr}
   25d58:	mov	fp, sp
   25d5c:	cmn	r0, #348	; 0x15c
   25d60:	blt	25ddc <grisu3_diy_fp_encode_double@@Base+0x3a4>
   25d64:	cmp	r0, #348	; 0x15c
   25d68:	bge	25dfc <grisu3_diy_fp_encode_double@@Base+0x3c4>
   25d6c:	add	r2, r0, #348	; 0x15c
   25d70:	asr	r3, r2, #31
   25d74:	add	r2, r2, r3, lsr #29
   25d78:	mvn	r3, #14
   25d7c:	and	r2, r3, r2, lsl #1
   25d80:	movw	r3, #24288	; 0x5ee0
   25d84:	movt	r3, #3
   25d88:	ldr	r2, [r3, r2]!
   25d8c:	str	r2, [r1]
   25d90:	ldr	r2, [r3, #4]
   25d94:	str	r2, [r1, #4]
   25d98:	ldrsh	r2, [r3, #8]
   25d9c:	str	r2, [r1, #8]
   25da0:	ldrsh	r1, [r3, #10]
   25da4:	cmp	r1, r0
   25da8:	bgt	25e1c <grisu3_diy_fp_encode_double@@Base+0x3e4>
   25dac:	add	r2, r1, #8
   25db0:	cmp	r2, r0
   25db4:	movgt	r0, r1
   25db8:	popgt	{fp, pc}
   25dbc:	movw	r0, #28460	; 0x6f2c
   25dc0:	movt	r0, #3
   25dc4:	movw	r1, #26872	; 0x68f8
   25dc8:	movt	r1, #3
   25dcc:	movw	r3, #28345	; 0x6eb9
   25dd0:	movt	r3, #3
   25dd4:	mov	r2, #89	; 0x59
   25dd8:	bl	14f40 <__assert_fail@plt>
   25ddc:	movw	r0, #28314	; 0x6e9a
   25de0:	movt	r0, #3
   25de4:	movw	r1, #26872	; 0x68f8
   25de8:	movt	r1, #3
   25dec:	movw	r3, #28345	; 0x6eb9
   25df0:	movt	r3, #3
   25df4:	mov	r2, #80	; 0x50
   25df8:	bl	14f40 <__assert_fail@plt>
   25dfc:	movw	r0, #28402	; 0x6ef2
   25e00:	movt	r0, #3
   25e04:	movw	r1, #26872	; 0x68f8
   25e08:	movt	r1, #3
   25e0c:	movw	r3, #28345	; 0x6eb9
   25e10:	movt	r3, #3
   25e14:	mov	r2, #81	; 0x51
   25e18:	bl	14f40 <__assert_fail@plt>
   25e1c:	movw	r0, #28445	; 0x6f1d
   25e20:	movt	r0, #3
   25e24:	movw	r1, #26872	; 0x68f8
   25e28:	movt	r1, #3
   25e2c:	movw	r3, #28345	; 0x6eb9
   25e30:	movt	r3, #3
   25e34:	mov	r2, #88	; 0x58
   25e38:	bl	14f40 <__assert_fail@plt>
   25e3c:	push	{r4, r5, fp, lr}
   25e40:	add	fp, sp, #8
   25e44:	ldr	ip, [fp, #24]
   25e48:	ldr	r1, [fp, #8]
   25e4c:	add	r1, r1, ip
   25e50:	add	r1, r1, #64	; 0x40
   25e54:	str	r1, [r0, #8]
   25e58:	ldr	ip, [fp, #16]
   25e5c:	umull	r1, lr, ip, r2
   25e60:	umull	ip, r1, ip, r3
   25e64:	mov	r5, #0
   25e68:	adds	lr, ip, lr
   25e6c:	adc	r5, r5, #0
   25e70:	ldr	ip, [fp, #20]
   25e74:	umull	r2, r4, ip, r2
   25e78:	adds	r2, lr, r2
   25e7c:	adc	r5, r5, #0
   25e80:	umaal	r1, r4, ip, r3
   25e84:	adds	r2, r2, #-2147483648	; 0x80000000
   25e88:	adcs	r1, r1, r5
   25e8c:	str	r1, [r0]
   25e90:	adc	r1, r4, #0
   25e94:	str	r1, [r0, #4]
   25e98:	pop	{r4, r5, fp, pc}
   25e9c:	push	{r4, sl, fp, lr}
   25ea0:	add	fp, sp, #8
   25ea4:	cmp	r1, #2097152	; 0x200000
   25ea8:	bcc	25ecc <grisu3_diy_fp_encode_double@@Base+0x494>
   25eac:	mov	r4, #0
   25eb0:	lsrs	r3, r1, #1
   25eb4:	rrx	r0, r0
   25eb8:	add	r2, r2, #1
   25ebc:	cmp	r4, r1, lsr #22
   25ec0:	mov	r1, r3
   25ec4:	bne	25eb0 <grisu3_diy_fp_encode_double@@Base+0x478>
   25ec8:	b	25ed0 <grisu3_diy_fp_encode_double@@Base+0x498>
   25ecc:	mov	r3, r1
   25ed0:	movw	ip, #64462	; 0xfbce
   25ed4:	movt	ip, #65535	; 0xffff
   25ed8:	cmp	r2, ip
   25edc:	bge	25ee8 <grisu3_diy_fp_encode_double@@Base+0x4b0>
   25ee0:	vmov.i32	d0, #0	; 0x00000000
   25ee4:	pop	{r4, sl, fp, pc}
   25ee8:	and	r1, r3, #1048576	; 0x100000
   25eec:	mov	r4, #1
   25ef0:	eor	lr, r4, r1, lsr #20
   25ef4:	cmp	r2, ip
   25ef8:	beq	25f40 <grisu3_diy_fp_encode_double@@Base+0x508>
   25efc:	cmp	r1, #0
   25f00:	bne	25f40 <grisu3_diy_fp_encode_double@@Base+0x508>
   25f04:	mov	r4, #1
   25f08:	lsl	r1, r3, #1
   25f0c:	orr	r1, r1, r0, lsr #31
   25f10:	and	r3, r3, #524288	; 0x80000
   25f14:	eor	lr, r4, r3, lsr #19
   25f18:	lsl	r0, r0, #1
   25f1c:	sub	r2, r2, #1
   25f20:	cmp	r2, ip
   25f24:	ble	25f34 <grisu3_diy_fp_encode_double@@Base+0x4fc>
   25f28:	cmp	r3, #0
   25f2c:	mov	r3, r1
   25f30:	beq	25f08 <grisu3_diy_fp_encode_double@@Base+0x4d0>
   25f34:	cmp	r2, ip
   25f38:	beq	25f4c <grisu3_diy_fp_encode_double@@Base+0x514>
   25f3c:	b	25f5c <grisu3_diy_fp_encode_double@@Base+0x524>
   25f40:	mov	r1, r3
   25f44:	cmp	r2, ip
   25f48:	bne	25f5c <grisu3_diy_fp_encode_double@@Base+0x524>
   25f4c:	mov	r3, #0
   25f50:	cmp	lr, #0
   25f54:	mov	r4, #0
   25f58:	bne	25f6c <grisu3_diy_fp_encode_double@@Base+0x534>
   25f5c:	movw	r3, #1075	; 0x433
   25f60:	add	r2, r2, r3
   25f64:	lsl	r4, r2, #20
   25f68:	mov	r3, #0
   25f6c:	orr	r0, r3, r0
   25f70:	bfc	r1, #20, #12
   25f74:	orr	r1, r4, r1
   25f78:	pop	{r4, sl, fp, lr}
   25f7c:	b	2869c <flatcc_json_parser_struct_as_root@@Base+0xb4>

00025f80 <flatcc_json_parser_error_string@@Base>:
   25f80:	cmp	r0, #34	; 0x22
   25f84:	movwhi	r0, #24014	; 0x5dce
   25f88:	movthi	r0, #3
   25f8c:	bxhi	lr
   25f90:	movw	r1, #26704	; 0x6850
   25f94:	movt	r1, #3
   25f98:	ldr	r0, [r1, r0, lsl #2]
   25f9c:	bx	lr

00025fa0 <flatcc_json_parser_set_error@@Base>:
   25fa0:	mov	ip, r2
   25fa4:	ldr	r2, [r0, #20]
   25fa8:	cmp	r2, #0
   25fac:	beq	25fb8 <flatcc_json_parser_set_error@@Base+0x18>
   25fb0:	mov	r0, ip
   25fb4:	bx	lr
   25fb8:	str	r1, [r0, #32]
   25fbc:	ldr	r2, [r0, #4]
   25fc0:	sub	r1, r1, r2
   25fc4:	add	r1, r1, #1
   25fc8:	str	r1, [r0, #16]
   25fcc:	str	r3, [r0, #20]
   25fd0:	mov	r0, ip
   25fd4:	bx	lr

00025fd8 <flatcc_json_parser_string_part@@Base>:
   25fd8:	push	{fp, lr}
   25fdc:	mov	fp, sp
   25fe0:	cmp	r1, r2
   25fe4:	beq	2600c <flatcc_json_parser_string_part@@Base+0x34>
   25fe8:	ldrb	r3, [r1]
   25fec:	cmp	r3, #32
   25ff0:	bcc	26020 <flatcc_json_parser_string_part@@Base+0x48>
   25ff4:	cmp	r3, #34	; 0x22
   25ff8:	cmpne	r3, #92	; 0x5c
   25ffc:	beq	26018 <flatcc_json_parser_string_part@@Base+0x40>
   26000:	add	r1, r1, #1
   26004:	cmp	r2, r1
   26008:	bne	25fe8 <flatcc_json_parser_string_part@@Base+0x10>
   2600c:	mov	r3, #20
   26010:	bl	25fa0 <flatcc_json_parser_set_error@@Base>
   26014:	mov	r1, r0
   26018:	mov	r0, r1
   2601c:	pop	{fp, pc}
   26020:	mov	r3, #17
   26024:	b	26010 <flatcc_json_parser_string_part@@Base+0x38>

00026028 <flatcc_json_parser_space_ext@@Base>:
   26028:	push	{fp, lr}
   2602c:	mov	fp, sp
   26030:	mov	ip, r1
   26034:	cmp	ip, r2
   26038:	beq	26070 <flatcc_json_parser_space_ext@@Base+0x48>
   2603c:	ldrb	r3, [ip]
   26040:	cmp	r3, #32
   26044:	bne	26070 <flatcc_json_parser_space_ext@@Base+0x48>
   26048:	add	ip, ip, #1
   2604c:	cmp	r2, ip
   26050:	bne	2603c <flatcc_json_parser_space_ext@@Base+0x14>
   26054:	b	26070 <flatcc_json_parser_space_ext@@Base+0x48>
   26058:	add	ip, ip, r3
   2605c:	add	ip, ip, #1
   26060:	str	ip, [r0, #4]
   26064:	ldr	r1, [r0, #12]
   26068:	add	r1, r1, #1
   2606c:	str	r1, [r0, #12]
   26070:	cmp	ip, r2
   26074:	beq	2613c <flatcc_json_parser_space_ext@@Base+0x114>
   26078:	ldrb	r3, [ip]
   2607c:	cmp	r3, #32
   26080:	bhi	2613c <flatcc_json_parser_space_ext@@Base+0x114>
   26084:	sub	r3, r3, #9
   26088:	cmp	r3, #23
   2608c:	bhi	2612c <flatcc_json_parser_space_ext@@Base+0x104>
   26090:	add	r1, pc, #0
   26094:	ldr	pc, [r1, r3, lsl #2]
   26098:	strdeq	r6, [r2], -r8
   2609c:	andeq	r6, r2, ip, asr r0
   260a0:	andeq	r6, r2, ip, lsr #2
   260a4:	andeq	r6, r2, ip, lsr #2
   260a8:	andeq	r6, r2, r8, lsl #2
   260ac:	andeq	r6, r2, ip, lsr #2
   260b0:	andeq	r6, r2, ip, lsr #2
   260b4:	andeq	r6, r2, ip, lsr #2
   260b8:	andeq	r6, r2, ip, lsr #2
   260bc:	andeq	r6, r2, ip, lsr #2
   260c0:	andeq	r6, r2, ip, lsr #2
   260c4:	andeq	r6, r2, ip, lsr #2
   260c8:	andeq	r6, r2, ip, lsr #2
   260cc:	andeq	r6, r2, ip, lsr #2
   260d0:	andeq	r6, r2, ip, lsr #2
   260d4:	andeq	r6, r2, ip, lsr #2
   260d8:	andeq	r6, r2, ip, lsr #2
   260dc:	andeq	r6, r2, ip, lsr #2
   260e0:	andeq	r6, r2, ip, lsr #2
   260e4:	andeq	r6, r2, ip, lsr #2
   260e8:	andeq	r6, r2, ip, lsr #2
   260ec:	andeq	r6, r2, ip, lsr #2
   260f0:	andeq	r6, r2, ip, lsr #2
   260f4:	andeq	r6, r2, r4, lsr r0
   260f8:	add	ip, ip, #1
   260fc:	cmp	ip, r2
   26100:	bne	26078 <flatcc_json_parser_space_ext@@Base+0x50>
   26104:	b	2613c <flatcc_json_parser_space_ext@@Base+0x114>
   26108:	sub	r1, r2, ip
   2610c:	mov	r3, #0
   26110:	cmp	r1, #2
   26114:	blt	26058 <flatcc_json_parser_space_ext@@Base+0x30>
   26118:	ldrb	r1, [ip, #1]
   2611c:	sub	r1, r1, #10
   26120:	clz	r1, r1
   26124:	lsr	r3, r1, #5
   26128:	b	26058 <flatcc_json_parser_space_ext@@Base+0x30>
   2612c:	mov	r1, ip
   26130:	mov	r3, #5
   26134:	bl	25fa0 <flatcc_json_parser_set_error@@Base>
   26138:	mov	ip, r0
   2613c:	mov	r0, ip
   26140:	pop	{fp, pc}

00026144 <flatcc_json_parser_string_escape@@Base>:
   26144:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   26148:	add	fp, sp, #24
   2614c:	sub	r7, r2, r1
   26150:	cmp	r7, #2
   26154:	blt	26354 <flatcc_json_parser_string_escape@@Base+0x210>
   26158:	ldrb	r6, [r1]
   2615c:	cmp	r6, #92	; 0x5c
   26160:	bne	26354 <flatcc_json_parser_string_escape@@Base+0x210>
   26164:	ldrb	r6, [r1, #1]
   26168:	sub	r6, r6, #34	; 0x22
   2616c:	cmp	r6, #86	; 0x56
   26170:	bhi	26354 <flatcc_json_parser_string_escape@@Base+0x210>
   26174:	add	r5, pc, #0
   26178:	ldr	pc, [r5, r6, lsl #2]
   2617c:	ldrdeq	r6, [r2], -r8
   26180:	andeq	r6, r2, r4, asr r3
   26184:	andeq	r6, r2, r4, asr r3
   26188:	andeq	r6, r2, r4, asr r3
   2618c:	andeq	r6, r2, r4, asr r3
   26190:	andeq	r6, r2, r4, asr r3
   26194:	andeq	r6, r2, r4, asr r3
   26198:	andeq	r6, r2, r4, asr r3
   2619c:	andeq	r6, r2, r4, asr r3
   261a0:	andeq	r6, r2, r4, asr r3
   261a4:	andeq	r6, r2, r4, asr r3
   261a8:	andeq	r6, r2, r4, asr r3
   261ac:	andeq	r6, r2, r4, asr r3
   261b0:	andeq	r6, r2, r0, ror #5
   261b4:	andeq	r6, r2, r4, asr r3
   261b8:	andeq	r6, r2, r4, asr r3
   261bc:	andeq	r6, r2, r4, asr r3
   261c0:	andeq	r6, r2, r4, asr r3
   261c4:	andeq	r6, r2, r4, asr r3
   261c8:	andeq	r6, r2, r4, asr r3
   261cc:	andeq	r6, r2, r4, asr r3
   261d0:	andeq	r6, r2, r4, asr r3
   261d4:	andeq	r6, r2, r4, asr r3
   261d8:	andeq	r6, r2, r4, asr r3
   261dc:	andeq	r6, r2, r4, asr r3
   261e0:	andeq	r6, r2, r4, asr r3
   261e4:	andeq	r6, r2, r4, asr r3
   261e8:	andeq	r6, r2, r4, asr r3
   261ec:	andeq	r6, r2, r4, asr r3
   261f0:	andeq	r6, r2, r4, asr r3
   261f4:	andeq	r6, r2, r4, asr r3
   261f8:	andeq	r6, r2, r4, asr r3
   261fc:	andeq	r6, r2, r4, asr r3
   26200:	andeq	r6, r2, r4, asr r3
   26204:	andeq	r6, r2, r4, asr r3
   26208:	andeq	r6, r2, r4, asr r3
   2620c:	andeq	r6, r2, r4, asr r3
   26210:	andeq	r6, r2, r4, asr r3
   26214:	andeq	r6, r2, r4, asr r3
   26218:	andeq	r6, r2, r4, asr r3
   2621c:	andeq	r6, r2, r4, asr r3
   26220:	andeq	r6, r2, r4, asr r3
   26224:	andeq	r6, r2, r4, asr r3
   26228:	andeq	r6, r2, r4, asr r3
   2622c:	andeq	r6, r2, r4, asr r3
   26230:	andeq	r6, r2, r4, asr r3
   26234:	andeq	r6, r2, r4, asr r3
   26238:	andeq	r6, r2, r4, asr r3
   2623c:	andeq	r6, r2, r4, asr r3
   26240:	andeq	r6, r2, r4, asr r3
   26244:	andeq	r6, r2, r4, asr r3
   26248:	andeq	r6, r2, r4, asr r3
   2624c:	andeq	r6, r2, r4, asr r3
   26250:	andeq	r6, r2, r4, asr r3
   26254:	andeq	r6, r2, r4, asr r3
   26258:	andeq	r6, r2, r4, asr r3
   2625c:	andeq	r6, r2, r4, asr r3
   26260:	andeq	r6, r2, r4, asr r3
   26264:	andeq	r6, r2, r8, ror #5
   26268:	andeq	r6, r2, r4, asr r3
   2626c:	andeq	r6, r2, r4, asr r3
   26270:	andeq	r6, r2, r4, asr r3
   26274:	andeq	r6, r2, r4, asr r3
   26278:	andeq	r6, r2, r4, asr r3
   2627c:	strdeq	r6, [r2], -r0
   26280:	andeq	r6, r2, r4, asr r3
   26284:	andeq	r6, r2, r4, asr r3
   26288:	andeq	r6, r2, r4, asr r3
   2628c:	strdeq	r6, [r2], -r8
   26290:	andeq	r6, r2, r4, asr r3
   26294:	andeq	r6, r2, r4, asr r3
   26298:	andeq	r6, r2, r4, asr r3
   2629c:	andeq	r6, r2, r4, asr r3
   262a0:	andeq	r6, r2, r4, asr r3
   262a4:	andeq	r6, r2, r4, asr r3
   262a8:	andeq	r6, r2, r4, asr r3
   262ac:	andeq	r6, r2, r0, lsl #6
   262b0:	andeq	r6, r2, r4, asr r3
   262b4:	andeq	r6, r2, r4, asr r3
   262b8:	andeq	r6, r2, r4, asr r3
   262bc:	andeq	r6, r2, r8, lsl #6
   262c0:	andeq	r6, r2, r4, asr r3
   262c4:	andeq	r6, r2, r0, lsl r3
   262c8:	andeq	r6, r2, r0, lsr #6
   262cc:	andeq	r6, r2, r4, asr r3
   262d0:	andeq	r6, r2, r4, asr r3
   262d4:	andeq	r6, r2, r4, asr #6
   262d8:	movw	r0, #8705	; 0x2201
   262dc:	b	26314 <flatcc_json_parser_string_escape@@Base+0x1d0>
   262e0:	movw	r0, #12033	; 0x2f01
   262e4:	b	26314 <flatcc_json_parser_string_escape@@Base+0x1d0>
   262e8:	movw	r0, #23553	; 0x5c01
   262ec:	b	26314 <flatcc_json_parser_string_escape@@Base+0x1d0>
   262f0:	movw	r0, #2049	; 0x801
   262f4:	b	26314 <flatcc_json_parser_string_escape@@Base+0x1d0>
   262f8:	movw	r0, #3073	; 0xc01
   262fc:	b	26314 <flatcc_json_parser_string_escape@@Base+0x1d0>
   26300:	movw	r0, #2561	; 0xa01
   26304:	b	26314 <flatcc_json_parser_string_escape@@Base+0x1d0>
   26308:	movw	r0, #3329	; 0xd01
   2630c:	b	26314 <flatcc_json_parser_string_escape@@Base+0x1d0>
   26310:	movw	r0, #2305	; 0x901
   26314:	strh	r0, [r3]
   26318:	add	r0, r1, #2
   2631c:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   26320:	cmp	r7, #5
   26324:	ble	26354 <flatcc_json_parser_string_escape@@Base+0x210>
   26328:	ldrb	r7, [r1, #2]
   2632c:	sub	r6, r7, #48	; 0x30
   26330:	uxtb	r6, r6
   26334:	cmp	r6, #9
   26338:	bhi	26384 <flatcc_json_parser_string_escape@@Base+0x240>
   2633c:	lsl	ip, r7, #12
   26340:	b	263a4 <flatcc_json_parser_string_escape@@Base+0x260>
   26344:	mov	r6, #1
   26348:	strb	r6, [r3]
   2634c:	cmp	r7, #3
   26350:	bgt	26368 <flatcc_json_parser_string_escape@@Base+0x224>
   26354:	mov	r7, #0
   26358:	strb	r7, [r3]
   2635c:	mov	r3, #18
   26360:	bl	25fa0 <flatcc_json_parser_set_error@@Base>
   26364:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   26368:	ldrb	r7, [r1, #2]
   2636c:	sub	r6, r7, #48	; 0x30
   26370:	uxtb	r6, r6
   26374:	cmp	r6, #9
   26378:	bhi	263c0 <flatcc_json_parser_string_escape@@Base+0x27c>
   2637c:	lsl	r6, r7, #4
   26380:	b	263dc <flatcc_json_parser_string_escape@@Base+0x298>
   26384:	orr	r6, r7, #32
   26388:	sub	r6, r6, #97	; 0x61
   2638c:	uxtb	r6, r6
   26390:	cmp	r6, #5
   26394:	bhi	26354 <flatcc_json_parser_string_escape@@Base+0x210>
   26398:	movw	r6, #36864	; 0x9000
   2639c:	movt	r6, #65535	; 0xffff
   263a0:	add	ip, r6, r7, lsl #12
   263a4:	ldrb	lr, [r1, #3]
   263a8:	sub	r4, lr, #48	; 0x30
   263ac:	uxtb	r4, r4
   263b0:	cmp	r4, #10
   263b4:	bcs	26418 <flatcc_json_parser_string_escape@@Base+0x2d4>
   263b8:	mov	r8, #53248	; 0xd000
   263bc:	b	26430 <flatcc_json_parser_string_escape@@Base+0x2ec>
   263c0:	orr	r6, r7, #32
   263c4:	sub	r6, r6, #97	; 0x61
   263c8:	uxtb	r6, r6
   263cc:	cmp	r6, #5
   263d0:	bhi	26354 <flatcc_json_parser_string_escape@@Base+0x210>
   263d4:	mvn	r6, #111	; 0x6f
   263d8:	add	r6, r6, r7, lsl #4
   263dc:	ldrb	r5, [r1, #3]
   263e0:	sub	r7, r5, #48	; 0x30
   263e4:	uxtb	r4, r7
   263e8:	cmp	r4, #9
   263ec:	bls	26408 <flatcc_json_parser_string_escape@@Base+0x2c4>
   263f0:	orr	r7, r5, #32
   263f4:	sub	r5, r7, #97	; 0x61
   263f8:	uxtb	r5, r5
   263fc:	cmp	r5, #5
   26400:	bhi	26354 <flatcc_json_parser_string_escape@@Base+0x210>
   26404:	sub	r7, r7, #87	; 0x57
   26408:	orr	r0, r7, r6
   2640c:	strb	r0, [r3, #1]
   26410:	add	r0, r1, #4
   26414:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   26418:	orr	lr, lr, #32
   2641c:	sub	r4, lr, #97	; 0x61
   26420:	uxtb	r4, r4
   26424:	mov	r8, #43264	; 0xa900
   26428:	cmp	r4, #6
   2642c:	bcs	26354 <flatcc_json_parser_string_escape@@Base+0x210>
   26430:	ldrb	r5, [r1, #4]
   26434:	sub	r4, r5, #48	; 0x30
   26438:	uxtb	r4, r4
   2643c:	cmp	r4, #10
   26440:	bcs	2644c <flatcc_json_parser_string_escape@@Base+0x308>
   26444:	mov	r9, #64768	; 0xfd00
   26448:	b	26464 <flatcc_json_parser_string_escape@@Base+0x320>
   2644c:	orr	r5, r5, #32
   26450:	sub	r4, r5, #97	; 0x61
   26454:	uxtb	r4, r4
   26458:	movw	r9, #64144	; 0xfa90
   2645c:	cmp	r4, #6
   26460:	bcs	26354 <flatcc_json_parser_string_escape@@Base+0x210>
   26464:	ldrb	r7, [r1, #5]
   26468:	sub	r4, r7, #48	; 0x30
   2646c:	uxtb	r4, r4
   26470:	cmp	r4, #10
   26474:	bcs	26484 <flatcc_json_parser_string_escape@@Base+0x340>
   26478:	mvn	r0, #86	; 0x56
   2647c:	add	r4, r0, #39	; 0x27
   26480:	b	2649c <flatcc_json_parser_string_escape@@Base+0x358>
   26484:	movw	r4, #65449	; 0xffa9
   26488:	orr	r7, r7, #32
   2648c:	sub	r6, r7, #97	; 0x61
   26490:	uxtb	r6, r6
   26494:	cmp	r6, #6
   26498:	bcs	26354 <flatcc_json_parser_string_escape@@Base+0x210>
   2649c:	add	r0, r8, lr, lsl #8
   264a0:	orr	r0, r0, ip
   264a4:	add	r2, r9, r5, lsl #4
   264a8:	orr	r0, r0, r2
   264ac:	add	r2, r4, r7
   264b0:	orr	r0, r0, r2
   264b4:	uxth	r7, r0
   264b8:	cmp	r7, #127	; 0x7f
   264bc:	bhi	264cc <flatcc_json_parser_string_escape@@Base+0x388>
   264c0:	mov	r2, #1
   264c4:	strb	r2, [r3]
   264c8:	b	2651c <flatcc_json_parser_string_escape@@Base+0x3d8>
   264cc:	mov	r2, #0
   264d0:	cmp	r2, r7, lsr #11
   264d4:	bne	264f0 <flatcc_json_parser_string_escape@@Base+0x3ac>
   264d8:	mov	r2, #2
   264dc:	strb	r2, [r3]
   264e0:	mov	r7, #192	; 0xc0
   264e4:	orr	r7, r7, r0, lsr #6
   264e8:	strb	r7, [r3, #1]
   264ec:	b	26514 <flatcc_json_parser_string_escape@@Base+0x3d0>
   264f0:	mov	r2, #3
   264f4:	strb	r2, [r3]
   264f8:	mov	r6, #224	; 0xe0
   264fc:	orr	r6, r6, r7, lsr #12
   26500:	strb	r6, [r3, #1]
   26504:	lsr	r7, r7, #6
   26508:	mov	r6, #2
   2650c:	bfi	r7, r6, #6, #26
   26510:	strb	r7, [r3, #2]
   26514:	mvn	r7, #-67108863	; 0xfc000001
   26518:	bfi	r0, r7, #6, #26
   2651c:	strb	r0, [r3, r2]
   26520:	add	r0, r1, #6
   26524:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}

00026528 <flatcc_json_parser_skip_constant@@Base>:
   26528:	push	{r4, r5, r6, sl, fp, lr}
   2652c:	add	fp, sp, #16
   26530:	mov	r4, r1
   26534:	cmp	r1, r2
   26538:	beq	265ac <flatcc_json_parser_skip_constant@@Base+0x84>
   2653c:	mov	r5, r2
   26540:	mov	r6, r0
   26544:	ldrsb	r0, [r4]
   26548:	cmp	r0, #0
   2654c:	bmi	2655c <flatcc_json_parser_skip_constant@@Base+0x34>
   26550:	cmp	r0, #95	; 0x5f
   26554:	cmpne	r0, #46	; 0x2e
   26558:	bne	2656c <flatcc_json_parser_skip_constant@@Base+0x44>
   2655c:	add	r4, r4, #1
   26560:	cmp	r4, r5
   26564:	bne	26544 <flatcc_json_parser_skip_constant@@Base+0x1c>
   26568:	b	265ac <flatcc_json_parser_skip_constant@@Base+0x84>
   2656c:	sub	r1, r0, #48	; 0x30
   26570:	uxtb	r1, r1
   26574:	cmp	r1, #9
   26578:	bls	2655c <flatcc_json_parser_skip_constant@@Base+0x34>
   2657c:	orr	r0, r0, #32
   26580:	sub	r0, r0, #97	; 0x61
   26584:	uxtb	r0, r0
   26588:	cmp	r0, #25
   2658c:	bls	2655c <flatcc_json_parser_skip_constant@@Base+0x34>
   26590:	mov	r0, r6
   26594:	mov	r1, r4
   26598:	mov	r2, r5
   2659c:	bl	265b4 <flatcc_json_parser_skip_constant@@Base+0x8c>
   265a0:	cmp	r0, r4
   265a4:	mov	r4, r0
   265a8:	bne	26560 <flatcc_json_parser_skip_constant@@Base+0x38>
   265ac:	mov	r0, r4
   265b0:	pop	{r4, r5, r6, sl, fp, pc}
   265b4:	sub	r3, r2, r1
   265b8:	cmp	r3, #2
   265bc:	blt	265e8 <flatcc_json_parser_skip_constant@@Base+0xc0>
   265c0:	ldrb	r3, [r1]
   265c4:	cmp	r3, #32
   265c8:	movhi	r0, r1
   265cc:	bxhi	lr
   265d0:	bne	265e8 <flatcc_json_parser_skip_constant@@Base+0xc0>
   265d4:	mov	ip, r1
   265d8:	ldrb	r3, [ip, #1]!
   265dc:	cmp	r3, #32
   265e0:	movhi	r0, ip
   265e4:	bxhi	lr
   265e8:	b	26028 <flatcc_json_parser_space_ext@@Base>

000265ec <flatcc_json_parser_match_constant@@Base>:
   265ec:	push	{r4, r5, fp, lr}
   265f0:	add	fp, sp, #8
   265f4:	sub	r4, r2, r1
   265f8:	ldr	r5, [fp, #8]
   265fc:	cmp	r4, r3
   26600:	ble	2666c <flatcc_json_parser_match_constant@@Base+0x80>
   26604:	add	ip, r1, r3
   26608:	ldrb	r4, [ip]
   2660c:	cmp	r4, #92	; 0x5c
   26610:	beq	2667c <flatcc_json_parser_match_constant@@Base+0x90>
   26614:	cmp	r4, #34	; 0x22
   26618:	beq	26654 <flatcc_json_parser_match_constant@@Base+0x68>
   2661c:	cmp	r4, #32
   26620:	bne	2666c <flatcc_json_parser_match_constant@@Base+0x80>
   26624:	add	r1, r1, r3
   26628:	add	ip, r1, #1
   2662c:	mov	r1, ip
   26630:	cmp	r2, ip
   26634:	beq	2666c <flatcc_json_parser_match_constant@@Base+0x80>
   26638:	mov	ip, r1
   2663c:	ldrb	r3, [ip], #1
   26640:	cmp	r3, #32
   26644:	beq	2662c <flatcc_json_parser_match_constant@@Base+0x40>
   26648:	ldrb	r2, [ip, #-1]!
   2664c:	cmp	r2, #34	; 0x22
   26650:	bne	26694 <flatcc_json_parser_match_constant@@Base+0xa8>
   26654:	add	r1, ip, #1
   26658:	mov	r4, #0
   2665c:	mov	r2, #0
   26660:	bl	265b4 <flatcc_json_parser_skip_constant@@Base+0x8c>
   26664:	str	r4, [r5]
   26668:	pop	{r4, r5, fp, pc}
   2666c:	mov	r0, #0
   26670:	str	r0, [r5]
   26674:	mov	r0, r1
   26678:	pop	{r4, r5, fp, pc}
   2667c:	mov	r1, #0
   26680:	str	r1, [r5]
   26684:	mov	r1, ip
   26688:	mov	r3, #18
   2668c:	bl	25fa0 <flatcc_json_parser_set_error@@Base>
   26690:	pop	{r4, r5, fp, pc}
   26694:	mov	r0, #1
   26698:	b	26670 <flatcc_json_parser_match_constant@@Base+0x84>

0002669c <flatcc_json_parser_unmatched_symbol@@Base>:
   2669c:	push	{r4, r5, fp, lr}
   266a0:	add	fp, sp, #8
   266a4:	mov	r4, r2
   266a8:	mov	r5, r0
   266ac:	ldrb	r0, [r0, #8]
   266b0:	tst	r0, #1
   266b4:	bne	266cc <flatcc_json_parser_unmatched_symbol@@Base+0x30>
   266b8:	mov	r0, r5
   266bc:	mov	r2, r4
   266c0:	mov	r3, #13
   266c4:	bl	25fa0 <flatcc_json_parser_set_error@@Base>
   266c8:	pop	{r4, r5, fp, pc}
   266cc:	mov	r0, r5
   266d0:	mov	r2, r4
   266d4:	bl	26738 <flatcc_json_parser_unmatched_symbol@@Base+0x9c>
   266d8:	mov	r1, r0
   266dc:	mov	r0, r5
   266e0:	mov	r2, r4
   266e4:	bl	265b4 <flatcc_json_parser_skip_constant@@Base+0x8c>
   266e8:	mov	r1, r0
   266ec:	cmp	r0, r4
   266f0:	beq	26724 <flatcc_json_parser_unmatched_symbol@@Base+0x88>
   266f4:	ldrb	r0, [r1]
   266f8:	cmp	r0, #58	; 0x3a
   266fc:	bne	26724 <flatcc_json_parser_unmatched_symbol@@Base+0x88>
   26700:	add	r1, r1, #1
   26704:	mov	r0, r5
   26708:	mov	r2, r4
   2670c:	bl	265b4 <flatcc_json_parser_skip_constant@@Base+0x8c>
   26710:	mov	r1, r0
   26714:	mov	r0, r5
   26718:	mov	r2, r4
   2671c:	pop	{r4, r5, fp, lr}
   26720:	b	267a0 <flatcc_json_parser_generic_json@@Base>
   26724:	mov	r0, r5
   26728:	mov	r2, r4
   2672c:	mov	r3, #4
   26730:	bl	25fa0 <flatcc_json_parser_set_error@@Base>
   26734:	pop	{r4, r5, fp, pc}
   26738:	push	{fp, lr}
   2673c:	mov	fp, sp
   26740:	cmp	r1, r2
   26744:	bne	26760 <flatcc_json_parser_unmatched_symbol@@Base+0xc4>
   26748:	b	26794 <flatcc_json_parser_unmatched_symbol@@Base+0xf8>
   2674c:	cmp	r3, #34	; 0x22
   26750:	beq	2678c <flatcc_json_parser_unmatched_symbol@@Base+0xf0>
   26754:	add	r1, r1, #1
   26758:	cmp	r1, r2
   2675c:	beq	26794 <flatcc_json_parser_unmatched_symbol@@Base+0xf8>
   26760:	ldrb	r3, [r1]
   26764:	cmp	r3, #92	; 0x5c
   26768:	bne	2674c <flatcc_json_parser_unmatched_symbol@@Base+0xb0>
   2676c:	sub	r3, r2, r1
   26770:	cmp	r3, #2
   26774:	blt	26780 <flatcc_json_parser_unmatched_symbol@@Base+0xe4>
   26778:	add	r1, r1, #1
   2677c:	b	26754 <flatcc_json_parser_unmatched_symbol@@Base+0xb8>
   26780:	ldrb	r3, [r1]
   26784:	cmp	r3, #34	; 0x22
   26788:	bne	26794 <flatcc_json_parser_unmatched_symbol@@Base+0xf8>
   2678c:	add	r0, r1, #1
   26790:	pop	{fp, pc}
   26794:	mov	r3, #20
   26798:	bl	25fa0 <flatcc_json_parser_set_error@@Base>
   2679c:	pop	{fp, pc}

000267a0 <flatcc_json_parser_generic_json@@Base>:
   267a0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   267a4:	add	fp, sp, #28
   267a8:	sub	sp, sp, #532	; 0x214
   267ac:	mov	r7, #0
   267b0:	str	r7, [sp, #8]
   267b4:	cmp	r1, r2
   267b8:	beq	26b9c <flatcc_json_parser_generic_json@@Base+0x3fc>
   267bc:	mov	r4, r2
   267c0:	mov	r5, r0
   267c4:	add	r8, sp, #16
   267c8:	sub	r9, r8, #1
   267cc:	add	sl, sp, #8
   267d0:	mov	r0, r8
   267d4:	cmp	r7, #0
   267d8:	beq	26844 <flatcc_json_parser_generic_json@@Base+0xa4>
   267dc:	ldrb	r0, [r0, #-1]
   267e0:	cmp	r0, #125	; 0x7d
   267e4:	bne	26844 <flatcc_json_parser_generic_json@@Base+0xa4>
   267e8:	mov	r0, r5
   267ec:	mov	r2, r4
   267f0:	bl	26e10 <flatcc_json_parser_float@@Base+0x140>
   267f4:	mov	r1, r0
   267f8:	mov	r0, r5
   267fc:	mov	r2, r4
   26800:	bl	26738 <flatcc_json_parser_unmatched_symbol@@Base+0x9c>
   26804:	mov	r1, r0
   26808:	mov	r0, r5
   2680c:	mov	r2, r4
   26810:	bl	265b4 <flatcc_json_parser_skip_constant@@Base+0x8c>
   26814:	mov	r1, r0
   26818:	cmp	r0, r4
   2681c:	beq	26bbc <flatcc_json_parser_generic_json@@Base+0x41c>
   26820:	ldrb	r0, [r1]
   26824:	cmp	r0, #58	; 0x3a
   26828:	bne	26bcc <flatcc_json_parser_generic_json@@Base+0x42c>
   2682c:	add	r1, r1, #1
   26830:	mov	r0, r5
   26834:	mov	r2, r4
   26838:	bl	265b4 <flatcc_json_parser_skip_constant@@Base+0x8c>
   2683c:	mov	r6, r0
   26840:	b	26848 <flatcc_json_parser_generic_json@@Base+0xa8>
   26844:	mov	r6, r1
   26848:	ldrb	r0, [r6]
   2684c:	sub	r0, r0, #34	; 0x22
   26850:	cmp	r0, #89	; 0x59
   26854:	bhi	26ba8 <flatcc_json_parser_generic_json@@Base+0x408>
   26858:	add	r1, pc, #0
   2685c:	ldr	pc, [r1, r0, lsl #2]
   26860:	strdeq	r6, [r2], -r8
   26864:	andeq	r6, r2, r8, lsr #23
   26868:	andeq	r6, r2, r8, lsr #23
   2686c:	andeq	r6, r2, r8, lsr #23
   26870:	andeq	r6, r2, r8, lsr #23
   26874:	andeq	r6, r2, r8, lsr #23
   26878:	andeq	r6, r2, r8, lsr #23
   2687c:	andeq	r6, r2, r8, lsr #23
   26880:	andeq	r6, r2, r8, lsr #23
   26884:	andeq	r6, r2, r8, lsr #23
   26888:	andeq	r6, r2, r8, lsr #23
   2688c:	andeq	r6, r2, r8, asr #19
   26890:	andeq	r6, r2, r8, lsr #23
   26894:	andeq	r6, r2, r8, lsr #23
   26898:	andeq	r6, r2, r8, asr #19
   2689c:	andeq	r6, r2, r8, asr #19
   268a0:	andeq	r6, r2, r8, asr #19
   268a4:	andeq	r6, r2, r8, asr #19
   268a8:	andeq	r6, r2, r8, asr #19
   268ac:	andeq	r6, r2, r8, asr #19
   268b0:	andeq	r6, r2, r8, asr #19
   268b4:	andeq	r6, r2, r8, asr #19
   268b8:	andeq	r6, r2, r8, asr #19
   268bc:	andeq	r6, r2, r8, asr #19
   268c0:	andeq	r6, r2, r8, lsr #23
   268c4:	andeq	r6, r2, r8, lsr #23
   268c8:	andeq	r6, r2, r8, lsr #23
   268cc:	andeq	r6, r2, r8, lsr #23
   268d0:	andeq	r6, r2, r8, lsr #23
   268d4:	andeq	r6, r2, r8, lsr #23
   268d8:	andeq	r6, r2, r8, lsr #23
   268dc:	andeq	r6, r2, r8, lsr #23
   268e0:	andeq	r6, r2, r8, lsr #23
   268e4:	andeq	r6, r2, r8, lsr #23
   268e8:	andeq	r6, r2, r8, lsr #23
   268ec:	andeq	r6, r2, r8, lsr #23
   268f0:	andeq	r6, r2, r8, lsr #23
   268f4:	andeq	r6, r2, r8, lsr #23
   268f8:	andeq	r6, r2, r8, lsr #23
   268fc:	andeq	r6, r2, r8, lsr #23
   26900:	andeq	r6, r2, r8, lsr #23
   26904:	andeq	r6, r2, r8, lsr #23
   26908:	andeq	r6, r2, r8, lsr #23
   2690c:	andeq	r6, r2, r8, lsr #23
   26910:	andeq	r6, r2, r8, lsr #23
   26914:	andeq	r6, r2, r8, lsr #23
   26918:	andeq	r6, r2, r8, lsr #23
   2691c:	andeq	r6, r2, r8, lsr #23
   26920:	andeq	r6, r2, r8, lsr #23
   26924:	andeq	r6, r2, r8, lsr #23
   26928:	andeq	r6, r2, r8, lsr #23
   2692c:	andeq	r6, r2, r8, lsr #23
   26930:	andeq	r6, r2, r8, lsr #23
   26934:	andeq	r6, r2, r8, lsr #23
   26938:	andeq	r6, r2, r8, lsr #23
   2693c:	andeq	r6, r2, r8, lsr #23
   26940:	andeq	r6, r2, r8, lsr #23
   26944:	andeq	r6, r2, r4, asr sl
   26948:	andeq	r6, r2, r8, lsr #23
   2694c:	andeq	r6, r2, r8, lsr #23
   26950:	andeq	r6, r2, r8, lsr #23
   26954:	andeq	r6, r2, r8, lsr #23
   26958:	andeq	r6, r2, r8, lsr #23
   2695c:	andeq	r6, r2, r8, lsr #23
   26960:	andeq	r6, r2, r8, lsr #23
   26964:	andeq	r6, r2, r8, lsr #23
   26968:	andeq	r6, r2, r8, lsr #23
   2696c:	andeq	r6, r2, r8, lsr #23
   26970:	andeq	r6, r2, r0, ror #19
   26974:	andeq	r6, r2, r8, lsr #23
   26978:	andeq	r6, r2, r8, lsr #23
   2697c:	andeq	r6, r2, r8, lsr #23
   26980:	andeq	r6, r2, r8, lsr #23
   26984:	andeq	r6, r2, r8, lsr #23
   26988:	andeq	r6, r2, r8, lsr #23
   2698c:	andeq	r6, r2, r8, lsr #23
   26990:	muleq	r2, r4, sl
   26994:	andeq	r6, r2, r8, lsr #23
   26998:	andeq	r6, r2, r8, lsr #23
   2699c:	andeq	r6, r2, r8, lsr #23
   269a0:	andeq	r6, r2, r8, lsr #23
   269a4:	andeq	r6, r2, r8, lsr #23
   269a8:	andeq	r6, r2, r0, ror #19
   269ac:	andeq	r6, r2, r8, lsr #23
   269b0:	andeq	r6, r2, r8, lsr #23
   269b4:	andeq	r6, r2, r8, lsr #23
   269b8:	andeq	r6, r2, r8, lsr #23
   269bc:	andeq	r6, r2, r8, lsr #23
   269c0:	andeq	r6, r2, r8, lsr #23
   269c4:			; <UNDEFINED> instruction: 0x00026ab0
   269c8:	mov	r0, r5
   269cc:	mov	r1, r6
   269d0:	mov	r2, r4
   269d4:	bl	26ea4 <flatcc_json_parser_float@@Base+0x1d4>
   269d8:	mov	r1, r0
   269dc:	b	26b00 <flatcc_json_parser_generic_json@@Base+0x360>
   269e0:	mov	r0, r5
   269e4:	mov	r1, r6
   269e8:	mov	r2, r4
   269ec:	add	r3, sp, #7
   269f0:	bl	27108 <flatcc_json_parser_float@@Base+0x438>
   269f4:	b	26aa0 <flatcc_json_parser_generic_json@@Base+0x300>
   269f8:	mov	r0, r5
   269fc:	mov	r1, r6
   26a00:	mov	r2, r4
   26a04:	bl	26e4c <flatcc_json_parser_float@@Base+0x17c>
   26a08:	mov	r1, r0
   26a0c:	cmp	r0, r4
   26a10:	ldrbne	r0, [r1]
   26a14:	cmpne	r0, #34	; 0x22
   26a18:	beq	26af0 <flatcc_json_parser_generic_json@@Base+0x350>
   26a1c:	mov	r0, r5
   26a20:	mov	r2, r4
   26a24:	bl	25fd8 <flatcc_json_parser_string_part@@Base>
   26a28:	mov	r1, r0
   26a2c:	cmp	r0, r4
   26a30:	beq	26a40 <flatcc_json_parser_generic_json@@Base+0x2a0>
   26a34:	ldrb	r0, [r1]
   26a38:	cmp	r0, #34	; 0x22
   26a3c:	beq	26af0 <flatcc_json_parser_generic_json@@Base+0x350>
   26a40:	mov	r0, r5
   26a44:	mov	r2, r4
   26a48:	add	r3, sp, #12
   26a4c:	bl	26144 <flatcc_json_parser_string_escape@@Base>
   26a50:	b	26a08 <flatcc_json_parser_generic_json@@Base+0x268>
   26a54:	cmp	r7, #512	; 0x200
   26a58:	beq	26be4 <flatcc_json_parser_generic_json@@Base+0x444>
   26a5c:	mov	r0, #93	; 0x5d
   26a60:	strb	r0, [r8, r7]
   26a64:	add	r1, r6, #1
   26a68:	mov	r0, r5
   26a6c:	mov	r2, r4
   26a70:	bl	265b4 <flatcc_json_parser_skip_constant@@Base+0x8c>
   26a74:	mov	r1, r0
   26a78:	add	r7, r7, #1
   26a7c:	cmp	r0, r4
   26a80:	beq	26b54 <flatcc_json_parser_generic_json@@Base+0x3b4>
   26a84:	ldrb	r0, [r1]
   26a88:	cmp	r0, #93	; 0x5d
   26a8c:	beq	26b00 <flatcc_json_parser_generic_json@@Base+0x360>
   26a90:	b	26b54 <flatcc_json_parser_generic_json@@Base+0x3b4>
   26a94:	mov	r0, r6
   26a98:	mov	r1, r4
   26a9c:	bl	271c4 <flatcc_json_parser_float@@Base+0x4f4>
   26aa0:	mov	r1, r0
   26aa4:	cmp	r6, r0
   26aa8:	bne	26b00 <flatcc_json_parser_generic_json@@Base+0x360>
   26aac:	b	26bdc <flatcc_json_parser_generic_json@@Base+0x43c>
   26ab0:	cmp	r7, #512	; 0x200
   26ab4:	beq	26be4 <flatcc_json_parser_generic_json@@Base+0x444>
   26ab8:	mov	r0, #125	; 0x7d
   26abc:	strb	r0, [r8, r7]
   26ac0:	add	r1, r6, #1
   26ac4:	mov	r0, r5
   26ac8:	mov	r2, r4
   26acc:	bl	265b4 <flatcc_json_parser_skip_constant@@Base+0x8c>
   26ad0:	mov	r1, r0
   26ad4:	add	r7, r7, #1
   26ad8:	cmp	r0, r4
   26adc:	beq	26b54 <flatcc_json_parser_generic_json@@Base+0x3b4>
   26ae0:	ldrb	r0, [r1]
   26ae4:	cmp	r0, #125	; 0x7d
   26ae8:	beq	26b00 <flatcc_json_parser_generic_json@@Base+0x360>
   26aec:	b	26b54 <flatcc_json_parser_generic_json@@Base+0x3b4>
   26af0:	mov	r0, r5
   26af4:	mov	r2, r4
   26af8:	bl	26e78 <flatcc_json_parser_float@@Base+0x1a8>
   26afc:	mov	r1, r0
   26b00:	cmp	r1, r4
   26b04:	cmpne	r7, #0
   26b08:	beq	26b64 <flatcc_json_parser_generic_json@@Base+0x3c4>
   26b0c:	ldrb	r0, [r9, r7]
   26b10:	cmp	r0, #93	; 0x5d
   26b14:	bne	26b2c <flatcc_json_parser_generic_json@@Base+0x38c>
   26b18:	mov	r0, r5
   26b1c:	mov	r2, r4
   26b20:	mov	r3, sl
   26b24:	bl	27200 <flatcc_json_parser_float@@Base+0x530>
   26b28:	b	26b3c <flatcc_json_parser_generic_json@@Base+0x39c>
   26b2c:	mov	r0, r5
   26b30:	mov	r2, r4
   26b34:	mov	r3, sl
   26b38:	bl	272c0 <flatcc_json_parser_float@@Base+0x5f0>
   26b3c:	mov	r1, r0
   26b40:	sub	r7, r7, #1
   26b44:	ldr	r0, [sp, #8]
   26b48:	cmp	r0, #0
   26b4c:	beq	26b00 <flatcc_json_parser_generic_json@@Base+0x360>
   26b50:	add	r7, r7, #1
   26b54:	add	r0, r8, r7
   26b58:	cmp	r1, r4
   26b5c:	bne	267d4 <flatcc_json_parser_generic_json@@Base+0x34>
   26b60:	b	26b9c <flatcc_json_parser_generic_json@@Base+0x3fc>
   26b64:	cmp	r1, r4
   26b68:	bne	26b9c <flatcc_json_parser_generic_json@@Base+0x3fc>
   26b6c:	cmp	r7, #0
   26b70:	beq	26b9c <flatcc_json_parser_generic_json@@Base+0x3fc>
   26b74:	add	r0, sp, #16
   26b78:	add	r0, r0, r7
   26b7c:	ldrb	r0, [r0, #-1]
   26b80:	mov	r3, #10
   26b84:	cmp	r0, #93	; 0x5d
   26b88:	movweq	r3, #9
   26b8c:	mov	r0, r5
   26b90:	mov	r2, r4
   26b94:	bl	25fa0 <flatcc_json_parser_set_error@@Base>
   26b98:	mov	r1, r0
   26b9c:	mov	r0, r1
   26ba0:	sub	sp, fp, #28
   26ba4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   26ba8:	mov	r0, r5
   26bac:	mov	r1, r6
   26bb0:	mov	r2, r4
   26bb4:	mov	r3, #5
   26bb8:	b	26b94 <flatcc_json_parser_generic_json@@Base+0x3f4>
   26bbc:	mov	r0, r5
   26bc0:	mov	r2, r4
   26bc4:	mov	r3, #10
   26bc8:	b	26b94 <flatcc_json_parser_generic_json@@Base+0x3f4>
   26bcc:	mov	r0, r5
   26bd0:	mov	r2, r4
   26bd4:	mov	r3, #4
   26bd8:	b	26b94 <flatcc_json_parser_generic_json@@Base+0x3f4>
   26bdc:	mov	r0, r5
   26be0:	b	26bb0 <flatcc_json_parser_generic_json@@Base+0x410>
   26be4:	mov	r0, r5
   26be8:	mov	r1, r6
   26bec:	mov	r2, r4
   26bf0:	mov	r3, #2
   26bf4:	b	26b94 <flatcc_json_parser_generic_json@@Base+0x3f4>

00026bf8 <flatcc_json_parser_double@@Base>:
   26bf8:	push	{r4, r5, r6, r7, fp, lr}
   26bfc:	add	fp, sp, #16
   26c00:	mov	r5, r1
   26c04:	mov	r6, r0
   26c08:	mov	r0, #0
   26c0c:	str	r0, [r3]
   26c10:	str	r0, [r3, #4]
   26c14:	cmp	r1, r2
   26c18:	beq	26cac <flatcc_json_parser_double@@Base+0xb4>
   26c1c:	mov	r7, r3
   26c20:	mov	r4, r2
   26c24:	mov	r0, r5
   26c28:	ldrb	r1, [r0], #1
   26c2c:	cmp	r1, #45	; 0x2d
   26c30:	movne	r0, r5
   26c34:	sub	r2, r2, r0
   26c38:	cmp	r2, #2
   26c3c:	blt	26c6c <flatcc_json_parser_double@@Base+0x74>
   26c40:	sub	r1, r1, #45	; 0x2d
   26c44:	clz	r1, r1
   26c48:	lsr	r1, r1, #5
   26c4c:	ldrb	r1, [r5, r1]
   26c50:	cmp	r1, #46	; 0x2e
   26c54:	beq	26cb4 <flatcc_json_parser_double@@Base+0xbc>
   26c58:	cmp	r1, #48	; 0x30
   26c5c:	bne	26c6c <flatcc_json_parser_double@@Base+0x74>
   26c60:	ldrb	r0, [r0, #1]
   26c64:	cmp	r0, #48	; 0x30
   26c68:	beq	26cb4 <flatcc_json_parser_double@@Base+0xbc>
   26c6c:	sub	r1, r4, r5
   26c70:	mov	r0, r5
   26c74:	mov	r2, r7
   26c78:	bl	26ccc <flatcc_json_parser_double@@Base+0xd4>
   26c7c:	cmp	r0, #0
   26c80:	cmpne	r0, r5
   26c84:	bne	26cc8 <flatcc_json_parser_double@@Base+0xd0>
   26c88:	vldr	d0, [r7]
   26c8c:	bl	14e74 <__isinf@plt>
   26c90:	cmp	r0, #0
   26c94:	beq	26cb4 <flatcc_json_parser_double@@Base+0xbc>
   26c98:	mov	r0, r6
   26c9c:	mov	r1, r5
   26ca0:	mov	r2, r4
   26ca4:	mov	r3, #7
   26ca8:	b	26cc4 <flatcc_json_parser_double@@Base+0xcc>
   26cac:	mov	r0, r5
   26cb0:	pop	{r4, r5, r6, r7, fp, pc}
   26cb4:	mov	r0, r6
   26cb8:	mov	r1, r5
   26cbc:	mov	r2, r4
   26cc0:	mov	r3, #6
   26cc4:	bl	25fa0 <flatcc_json_parser_set_error@@Base>
   26cc8:	pop	{r4, r5, r6, r7, fp, pc}
   26ccc:	b	286a4 <flatcc_json_parser_struct_as_root@@Base+0xbc>

00026cd0 <flatcc_json_parser_float@@Base>:
   26cd0:	push	{r4, r5, r6, r7, fp, lr}
   26cd4:	add	fp, sp, #16
   26cd8:	mov	r5, r1
   26cdc:	mov	r6, r0
   26ce0:	mov	r0, #0
   26ce4:	str	r0, [r3]
   26ce8:	cmp	r1, r2
   26cec:	beq	26d80 <flatcc_json_parser_float@@Base+0xb0>
   26cf0:	mov	r7, r3
   26cf4:	mov	r4, r2
   26cf8:	mov	r0, r5
   26cfc:	ldrb	r1, [r0], #1
   26d00:	cmp	r1, #45	; 0x2d
   26d04:	movne	r0, r5
   26d08:	sub	r2, r2, r0
   26d0c:	cmp	r2, #2
   26d10:	blt	26d40 <flatcc_json_parser_float@@Base+0x70>
   26d14:	sub	r1, r1, #45	; 0x2d
   26d18:	clz	r1, r1
   26d1c:	lsr	r1, r1, #5
   26d20:	ldrb	r1, [r5, r1]
   26d24:	cmp	r1, #46	; 0x2e
   26d28:	beq	26d88 <flatcc_json_parser_float@@Base+0xb8>
   26d2c:	cmp	r1, #48	; 0x30
   26d30:	bne	26d40 <flatcc_json_parser_float@@Base+0x70>
   26d34:	ldrb	r0, [r0, #1]
   26d38:	cmp	r0, #48	; 0x30
   26d3c:	beq	26d88 <flatcc_json_parser_float@@Base+0xb8>
   26d40:	sub	r1, r4, r5
   26d44:	mov	r0, r5
   26d48:	mov	r2, r7
   26d4c:	bl	26da0 <flatcc_json_parser_float@@Base+0xd0>
   26d50:	cmp	r0, #0
   26d54:	cmpne	r0, r5
   26d58:	bne	26d9c <flatcc_json_parser_float@@Base+0xcc>
   26d5c:	vldr	s0, [r7]
   26d60:	bl	14e68 <__isinff@plt>
   26d64:	cmp	r0, #0
   26d68:	beq	26d88 <flatcc_json_parser_float@@Base+0xb8>
   26d6c:	mov	r0, r6
   26d70:	mov	r1, r5
   26d74:	mov	r2, r4
   26d78:	mov	r3, #7
   26d7c:	b	26d98 <flatcc_json_parser_float@@Base+0xc8>
   26d80:	mov	r0, r5
   26d84:	pop	{r4, r5, r6, r7, fp, pc}
   26d88:	mov	r0, r6
   26d8c:	mov	r1, r5
   26d90:	mov	r2, r4
   26d94:	mov	r3, #6
   26d98:	bl	25fa0 <flatcc_json_parser_set_error@@Base>
   26d9c:	pop	{r4, r5, r6, r7, fp, pc}
   26da0:	push	{r4, r5, r6, sl, fp, lr}
   26da4:	add	fp, sp, #16
   26da8:	vpush	{d8-d9}
   26dac:	sub	sp, sp, #8
   26db0:	mov	r4, r2
   26db4:	mov	r5, r0
   26db8:	mov	r2, sp
   26dbc:	bl	26ccc <flatcc_json_parser_double@@Base+0xd4>
   26dc0:	mov	r6, r0
   26dc4:	vldr	d16, [sp]
   26dc8:	add	r0, pc, #56	; 0x38
   26dcc:	vcmpe.f64	d16, #0.0
   26dd0:	vmrs	APSR_nzcv, fpscr
   26dd4:	addmi	r0, r0, #4
   26dd8:	vcvt.f32.f64	s16, d16
   26ddc:	vldr	s18, [r0]
   26de0:	vmov.f32	s0, s16
   26de4:	bl	14e68 <__isinff@plt>
   26de8:	cmp	r0, #0
   26dec:	vseleq.f32	s0, s16, s18
   26df0:	vstr	s0, [r4]
   26df4:	movne	r6, r5
   26df8:	mov	r0, r6
   26dfc:	sub	sp, fp, #32
   26e00:	vpop	{d8-d9}
   26e04:	pop	{r4, r5, r6, sl, fp, pc}
   26e08:	svcvc	0x00800000
   26e0c:			; <UNDEFINED> instruction: 0xff800000
   26e10:	push	{fp, lr}
   26e14:	mov	fp, sp
   26e18:	cmp	r1, r2
   26e1c:	beq	26e44 <flatcc_json_parser_float@@Base+0x174>
   26e20:	ldrb	r3, [r1]
   26e24:	cmp	r3, #34	; 0x22
   26e28:	bne	26e38 <flatcc_json_parser_float@@Base+0x168>
   26e2c:	add	r1, r1, #1
   26e30:	mov	r0, r1
   26e34:	pop	{fp, pc}
   26e38:	mov	r3, #5
   26e3c:	bl	25fa0 <flatcc_json_parser_set_error@@Base>
   26e40:	mov	r1, r0
   26e44:	mov	r0, r1
   26e48:	pop	{fp, pc}
   26e4c:	push	{fp, lr}
   26e50:	mov	fp, sp
   26e54:	cmp	r1, r2
   26e58:	beq	26e6c <flatcc_json_parser_float@@Base+0x19c>
   26e5c:	ldrb	r3, [r1]
   26e60:	cmp	r3, #34	; 0x22
   26e64:	addeq	r0, r1, #1
   26e68:	popeq	{fp, pc}
   26e6c:	mov	r3, #16
   26e70:	bl	25fa0 <flatcc_json_parser_set_error@@Base>
   26e74:	pop	{fp, pc}
   26e78:	push	{fp, lr}
   26e7c:	mov	fp, sp
   26e80:	cmp	r1, r2
   26e84:	beq	26e98 <flatcc_json_parser_float@@Base+0x1c8>
   26e88:	ldrb	r3, [r1]
   26e8c:	cmp	r3, #34	; 0x22
   26e90:	addeq	r0, r1, #1
   26e94:	popeq	{fp, pc}
   26e98:	mov	r3, #20
   26e9c:	bl	25fa0 <flatcc_json_parser_set_error@@Base>
   26ea0:	pop	{fp, pc}
   26ea4:	push	{fp, lr}
   26ea8:	mov	fp, sp
   26eac:	mov	lr, r1
   26eb0:	cmp	r1, r2
   26eb4:	beq	270dc <flatcc_json_parser_float@@Base+0x40c>
   26eb8:	ldrb	r1, [lr]
   26ebc:	cmp	r1, #45	; 0x2d
   26ec0:	bne	26ed4 <flatcc_json_parser_float@@Base+0x204>
   26ec4:	add	lr, lr, #1
   26ec8:	cmp	lr, r2
   26ecc:	beq	270f0 <flatcc_json_parser_float@@Base+0x420>
   26ed0:	ldrb	r1, [lr]
   26ed4:	cmp	r1, #48	; 0x30
   26ed8:	bne	26eec <flatcc_json_parser_float@@Base+0x21c>
   26edc:	add	lr, lr, #1
   26ee0:	cmp	lr, r2
   26ee4:	bne	26f2c <flatcc_json_parser_float@@Base+0x25c>
   26ee8:	b	26f7c <flatcc_json_parser_float@@Base+0x2ac>
   26eec:	sub	r1, r1, #49	; 0x31
   26ef0:	uxtb	r1, r1
   26ef4:	cmp	r1, #8
   26ef8:	bhi	270f0 <flatcc_json_parser_float@@Base+0x420>
   26efc:	add	r1, lr, #1
   26f00:	mov	lr, r1
   26f04:	cmp	r2, r1
   26f08:	beq	26f24 <flatcc_json_parser_float@@Base+0x254>
   26f0c:	mov	r1, lr
   26f10:	ldrb	r3, [r1], #1
   26f14:	sub	r3, r3, #48	; 0x30
   26f18:	uxtb	r3, r3
   26f1c:	cmp	r3, #10
   26f20:	bcc	26f00 <flatcc_json_parser_float@@Base+0x230>
   26f24:	cmp	lr, r2
   26f28:	beq	26f7c <flatcc_json_parser_float@@Base+0x2ac>
   26f2c:	ldrb	r1, [lr]
   26f30:	cmp	r1, #46	; 0x2e
   26f34:	bne	26f7c <flatcc_json_parser_float@@Base+0x2ac>
   26f38:	mov	r1, lr
   26f3c:	ldrb	r3, [r1, #1]!
   26f40:	sub	r3, r3, #48	; 0x30
   26f44:	uxtb	r3, r3
   26f48:	cmp	r3, #10
   26f4c:	bcs	270f4 <flatcc_json_parser_float@@Base+0x424>
   26f50:	add	lr, lr, #2
   26f54:	cmp	lr, r2
   26f58:	beq	26f7c <flatcc_json_parser_float@@Base+0x2ac>
   26f5c:	ldrb	r1, [lr]
   26f60:	sub	r1, r1, #48	; 0x30
   26f64:	uxtb	r1, r1
   26f68:	cmp	r1, #9
   26f6c:	bhi	26f7c <flatcc_json_parser_float@@Base+0x2ac>
   26f70:	add	lr, lr, #1
   26f74:	cmp	r2, lr
   26f78:	bne	26f5c <flatcc_json_parser_float@@Base+0x28c>
   26f7c:	cmp	lr, r2
   26f80:	beq	26ff4 <flatcc_json_parser_float@@Base+0x324>
   26f84:	ldrb	r1, [lr]
   26f88:	orr	r1, r1, #32
   26f8c:	cmp	r1, #101	; 0x65
   26f90:	bne	26ff4 <flatcc_json_parser_float@@Base+0x324>
   26f94:	add	r1, lr, #1
   26f98:	cmp	r1, r2
   26f9c:	beq	270f4 <flatcc_json_parser_float@@Base+0x424>
   26fa0:	ldrb	ip, [r1]
   26fa4:	cmp	ip, #45	; 0x2d
   26fa8:	cmpne	ip, #43	; 0x2b
   26fac:	addeq	r1, lr, #2
   26fb0:	cmp	r1, r2
   26fb4:	beq	270f4 <flatcc_json_parser_float@@Base+0x424>
   26fb8:	ldrb	r3, [r1]
   26fbc:	sub	r3, r3, #48	; 0x30
   26fc0:	uxtb	r3, r3
   26fc4:	cmp	r3, #9
   26fc8:	bhi	270f4 <flatcc_json_parser_float@@Base+0x424>
   26fcc:	add	r1, r1, #1
   26fd0:	mov	lr, r1
   26fd4:	cmp	r2, r1
   26fd8:	beq	26ff4 <flatcc_json_parser_float@@Base+0x324>
   26fdc:	mov	r1, lr
   26fe0:	ldrb	r3, [r1], #1
   26fe4:	sub	r3, r3, #48	; 0x30
   26fe8:	uxtb	r3, r3
   26fec:	cmp	r3, #10
   26ff0:	bcc	26fd0 <flatcc_json_parser_float@@Base+0x300>
   26ff4:	cmp	lr, r2
   26ff8:	beq	270f0 <flatcc_json_parser_float@@Base+0x420>
   26ffc:	ldrb	ip, [lr]
   27000:	sub	r1, ip, #9
   27004:	cmp	r1, #49	; 0x31
   27008:	bhi	270e4 <flatcc_json_parser_float@@Base+0x414>
   2700c:	add	r3, pc, #0
   27010:	ldr	pc, [r3, r1, lsl #2]
   27014:	ldrdeq	r7, [r2], -ip
   27018:	ldrdeq	r7, [r2], -ip
   2701c:	ldrdeq	r7, [r2], -ip
   27020:	strdeq	r7, [r2], -r0
   27024:	ldrdeq	r7, [r2], -ip
   27028:	strdeq	r7, [r2], -r0
   2702c:	strdeq	r7, [r2], -r0
   27030:	strdeq	r7, [r2], -r0
   27034:	strdeq	r7, [r2], -r0
   27038:	strdeq	r7, [r2], -r0
   2703c:	strdeq	r7, [r2], -r0
   27040:	strdeq	r7, [r2], -r0
   27044:	strdeq	r7, [r2], -r0
   27048:	strdeq	r7, [r2], -r0
   2704c:	strdeq	r7, [r2], -r0
   27050:	strdeq	r7, [r2], -r0
   27054:	strdeq	r7, [r2], -r0
   27058:	strdeq	r7, [r2], -r0
   2705c:	strdeq	r7, [r2], -r0
   27060:	strdeq	r7, [r2], -r0
   27064:	strdeq	r7, [r2], -r0
   27068:	strdeq	r7, [r2], -r0
   2706c:	strdeq	r7, [r2], -r0
   27070:	ldrdeq	r7, [r2], -ip
   27074:	strdeq	r7, [r2], -r0
   27078:	strdeq	r7, [r2], -r0
   2707c:	strdeq	r7, [r2], -r0
   27080:	strdeq	r7, [r2], -r0
   27084:	strdeq	r7, [r2], -r0
   27088:	strdeq	r7, [r2], -r0
   2708c:	strdeq	r7, [r2], -r0
   27090:	strdeq	r7, [r2], -r0
   27094:	strdeq	r7, [r2], -r0
   27098:	strdeq	r7, [r2], -r0
   2709c:	strdeq	r7, [r2], -r0
   270a0:	ldrdeq	r7, [r2], -ip
   270a4:	strdeq	r7, [r2], -r0
   270a8:	strdeq	r7, [r2], -r0
   270ac:	strdeq	r7, [r2], -r0
   270b0:	strdeq	r7, [r2], -r0
   270b4:	strdeq	r7, [r2], -r0
   270b8:	strdeq	r7, [r2], -r0
   270bc:	strdeq	r7, [r2], -r0
   270c0:	strdeq	r7, [r2], -r0
   270c4:	strdeq	r7, [r2], -r0
   270c8:	strdeq	r7, [r2], -r0
   270cc:	strdeq	r7, [r2], -r0
   270d0:	strdeq	r7, [r2], -r0
   270d4:	strdeq	r7, [r2], -r0
   270d8:	ldrdeq	r7, [r2], -ip
   270dc:	mov	r0, lr
   270e0:	pop	{fp, pc}
   270e4:	cmp	ip, #93	; 0x5d
   270e8:	cmpne	ip, #125	; 0x7d
   270ec:	beq	270dc <flatcc_json_parser_float@@Base+0x40c>
   270f0:	mov	r1, lr
   270f4:	mov	r3, #6
   270f8:	bl	25fa0 <flatcc_json_parser_set_error@@Base>
   270fc:	mov	lr, r0
   27100:	mov	r0, lr
   27104:	pop	{fp, pc}
   27108:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   2710c:	add	fp, sp, #24
   27110:	sub	sp, sp, #8
   27114:	mov	r8, r3
   27118:	mov	r6, r2
   2711c:	mov	r5, r1
   27120:	mov	r7, r0
   27124:	sub	r4, r2, r1
   27128:	cmp	r4, #4
   2712c:	blt	27170 <flatcc_json_parser_float@@Base+0x4a0>
   27130:	movw	r1, #16700	; 0x413c
   27134:	movt	r1, #3
   27138:	mov	r0, r5
   2713c:	mov	r2, #4
   27140:	bl	14ebc <bcmp@plt>
   27144:	cmp	r0, #0
   27148:	beq	2719c <flatcc_json_parser_float@@Base+0x4cc>
   2714c:	cmp	r4, #5
   27150:	blt	27170 <flatcc_json_parser_float@@Base+0x4a0>
   27154:	movw	r1, #16705	; 0x4141
   27158:	movt	r1, #3
   2715c:	mov	r0, r5
   27160:	mov	r2, #5
   27164:	bl	14ebc <bcmp@plt>
   27168:	cmp	r0, #0
   2716c:	beq	271b0 <flatcc_json_parser_float@@Base+0x4e0>
   27170:	add	r3, sp, #7
   27174:	mov	r0, r7
   27178:	mov	r1, r5
   2717c:	mov	r2, r6
   27180:	bl	27d64 <flatcc_json_parser_union_type@@Base+0x1a8>
   27184:	ldrb	r1, [sp, #7]
   27188:	cmp	r1, #0
   2718c:	movwne	r1, #1
   27190:	strb	r1, [r8]
   27194:	sub	sp, fp, #24
   27198:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   2719c:	mov	r0, #1
   271a0:	strb	r0, [r8]
   271a4:	add	r0, r5, #4
   271a8:	sub	sp, fp, #24
   271ac:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   271b0:	mov	r0, #0
   271b4:	strb	r0, [r8]
   271b8:	add	r0, r5, #5
   271bc:	sub	sp, fp, #24
   271c0:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   271c4:	push	{r4, sl, fp, lr}
   271c8:	add	fp, sp, #8
   271cc:	mov	r4, r0
   271d0:	sub	r0, r1, r0
   271d4:	cmp	r0, #4
   271d8:	blt	271f8 <flatcc_json_parser_float@@Base+0x528>
   271dc:	movw	r1, #27470	; 0x6b4e
   271e0:	movt	r1, #3
   271e4:	mov	r0, r4
   271e8:	mov	r2, #4
   271ec:	bl	14ebc <bcmp@plt>
   271f0:	cmp	r0, #0
   271f4:	addeq	r4, r4, #4
   271f8:	mov	r0, r4
   271fc:	pop	{r4, sl, fp, pc}
   27200:	push	{r4, r5, r6, sl, fp, lr}
   27204:	add	fp, sp, #16
   27208:	mov	r6, r3
   2720c:	mov	r4, r2
   27210:	mov	r5, r0
   27214:	bl	265b4 <flatcc_json_parser_skip_constant@@Base+0x8c>
   27218:	mov	r1, r0
   2721c:	cmp	r0, r4
   27220:	beq	27264 <flatcc_json_parser_float@@Base+0x594>
   27224:	ldrb	r0, [r1]
   27228:	cmp	r0, #44	; 0x2c
   2722c:	bne	2726c <flatcc_json_parser_float@@Base+0x59c>
   27230:	add	r1, r1, #1
   27234:	mov	r0, r5
   27238:	mov	r2, r4
   2723c:	bl	265b4 <flatcc_json_parser_skip_constant@@Base+0x8c>
   27240:	mov	r1, r0
   27244:	cmp	r0, r4
   27248:	beq	27294 <flatcc_json_parser_float@@Base+0x5c4>
   2724c:	ldrb	r0, [r1]
   27250:	cmp	r0, #93	; 0x5d
   27254:	bne	272b0 <flatcc_json_parser_float@@Base+0x5e0>
   27258:	mov	r0, #0
   2725c:	str	r0, [r6]
   27260:	b	27280 <flatcc_json_parser_float@@Base+0x5b0>
   27264:	mov	r0, #0
   27268:	b	272b4 <flatcc_json_parser_float@@Base+0x5e4>
   2726c:	mov	r0, #0
   27270:	str	r0, [r6]
   27274:	ldrb	r0, [r1]
   27278:	cmp	r0, #93	; 0x5d
   2727c:	bne	2729c <flatcc_json_parser_float@@Base+0x5cc>
   27280:	add	r1, r1, #1
   27284:	mov	r0, r5
   27288:	mov	r2, r4
   2728c:	pop	{r4, r5, r6, sl, fp, lr}
   27290:	b	265b4 <flatcc_json_parser_skip_constant@@Base+0x8c>
   27294:	mov	r0, #0
   27298:	str	r0, [r6]
   2729c:	mov	r0, r5
   272a0:	mov	r2, r4
   272a4:	mov	r3, #9
   272a8:	bl	25fa0 <flatcc_json_parser_set_error@@Base>
   272ac:	pop	{r4, r5, r6, sl, fp, pc}
   272b0:	mov	r0, #1
   272b4:	str	r0, [r6]
   272b8:	mov	r0, r1
   272bc:	pop	{r4, r5, r6, sl, fp, pc}
   272c0:	push	{r4, r5, r6, sl, fp, lr}
   272c4:	add	fp, sp, #16
   272c8:	mov	r6, r3
   272cc:	mov	r4, r2
   272d0:	mov	r5, r0
   272d4:	bl	265b4 <flatcc_json_parser_skip_constant@@Base+0x8c>
   272d8:	mov	r1, r0
   272dc:	cmp	r0, r4
   272e0:	beq	27324 <flatcc_json_parser_float@@Base+0x654>
   272e4:	ldrb	r0, [r1]
   272e8:	cmp	r0, #44	; 0x2c
   272ec:	bne	2732c <flatcc_json_parser_float@@Base+0x65c>
   272f0:	add	r1, r1, #1
   272f4:	mov	r0, r5
   272f8:	mov	r2, r4
   272fc:	bl	265b4 <flatcc_json_parser_skip_constant@@Base+0x8c>
   27300:	mov	r1, r0
   27304:	cmp	r0, r4
   27308:	beq	27354 <flatcc_json_parser_float@@Base+0x684>
   2730c:	ldrb	r0, [r1]
   27310:	cmp	r0, #125	; 0x7d
   27314:	bne	27370 <flatcc_json_parser_float@@Base+0x6a0>
   27318:	mov	r0, #0
   2731c:	str	r0, [r6]
   27320:	b	27340 <flatcc_json_parser_float@@Base+0x670>
   27324:	mov	r0, #0
   27328:	b	27374 <flatcc_json_parser_float@@Base+0x6a4>
   2732c:	mov	r0, #0
   27330:	str	r0, [r6]
   27334:	ldrb	r0, [r1]
   27338:	cmp	r0, #125	; 0x7d
   2733c:	bne	2735c <flatcc_json_parser_float@@Base+0x68c>
   27340:	add	r1, r1, #1
   27344:	mov	r0, r5
   27348:	mov	r2, r4
   2734c:	pop	{r4, r5, r6, sl, fp, lr}
   27350:	b	265b4 <flatcc_json_parser_skip_constant@@Base+0x8c>
   27354:	mov	r0, #0
   27358:	str	r0, [r6]
   2735c:	mov	r0, r5
   27360:	mov	r2, r4
   27364:	mov	r3, #10
   27368:	bl	25fa0 <flatcc_json_parser_set_error@@Base>
   2736c:	pop	{r4, r5, r6, sl, fp, pc}
   27370:	mov	r0, #1
   27374:	str	r0, [r6]
   27378:	mov	r0, r1
   2737c:	pop	{r4, r5, r6, sl, fp, pc}

00027380 <flatcc_json_parser_integer@@Base>:
   27380:	push	{r4, r5, r6, r7, fp, lr}
   27384:	add	fp, sp, #16
   27388:	cmp	r1, r2
   2738c:	beq	27440 <flatcc_json_parser_integer@@Base+0xc0>
   27390:	ldrb	r7, [r1]
   27394:	sub	r7, r7, #45	; 0x2d
   27398:	clz	r7, r7
   2739c:	lsr	r7, r7, #5
   273a0:	str	r7, [r3]
   273a4:	add	ip, r1, r7
   273a8:	mov	r4, #0
   273ac:	cmp	ip, r2
   273b0:	beq	27448 <flatcc_json_parser_integer@@Base+0xc8>
   273b4:	mov	lr, #10
   273b8:	mov	r5, #0
   273bc:	ldrb	r6, [ip]
   273c0:	sub	r7, r6, #48	; 0x30
   273c4:	uxtb	r7, r7
   273c8:	cmp	r7, #9
   273cc:	bhi	27460 <flatcc_json_parser_integer@@Base+0xe0>
   273d0:	add	r7, r5, r5, lsl #2
   273d4:	lsl	r7, r7, #1
   273d8:	umlal	r6, r7, r4, lr
   273dc:	subs	r6, r6, #48	; 0x30
   273e0:	sbc	r7, r7, #0
   273e4:	subs	r4, r6, r4
   273e8:	sbcs	r4, r7, r5
   273ec:	bcc	27470 <flatcc_json_parser_integer@@Base+0xf0>
   273f0:	add	ip, ip, #1
   273f4:	cmp	r2, ip
   273f8:	mov	r4, r6
   273fc:	mov	r5, r7
   27400:	bne	273bc <flatcc_json_parser_integer@@Base+0x3c>
   27404:	mov	r3, #0
   27408:	mov	r4, r6
   2740c:	mov	r5, r7
   27410:	cmp	ip, r1
   27414:	beq	27458 <flatcc_json_parser_integer@@Base+0xd8>
   27418:	cmp	r3, #0
   2741c:	beq	27494 <flatcc_json_parser_integer@@Base+0x114>
   27420:	ldrb	r1, [ip]
   27424:	cmp	r1, #46	; 0x2e
   27428:	cmpne	r1, #101	; 0x65
   2742c:	bne	2748c <flatcc_json_parser_integer@@Base+0x10c>
   27430:	mov	r1, ip
   27434:	mov	r3, #12
   27438:	bl	25fa0 <flatcc_json_parser_set_error@@Base>
   2743c:	pop	{r4, r5, r6, r7, fp, pc}
   27440:	mov	r0, r1
   27444:	pop	{r4, r5, r6, r7, fp, pc}
   27448:	mov	r5, #0
   2744c:	mov	r3, #0
   27450:	cmp	ip, r1
   27454:	bne	27418 <flatcc_json_parser_integer@@Base+0x98>
   27458:	mov	r0, ip
   2745c:	pop	{r4, r5, r6, r7, fp, pc}
   27460:	mov	r3, #1
   27464:	cmp	ip, r1
   27468:	bne	27418 <flatcc_json_parser_integer@@Base+0x98>
   2746c:	b	27458 <flatcc_json_parser_integer@@Base+0xd8>
   27470:	mov	lr, #8
   27474:	cmp	r3, #0
   27478:	movweq	lr, #7
   2747c:	mov	r1, ip
   27480:	mov	r3, lr
   27484:	bl	25fa0 <flatcc_json_parser_set_error@@Base>
   27488:	pop	{r4, r5, r6, r7, fp, pc}
   2748c:	cmp	r1, #69	; 0x45
   27490:	beq	27430 <flatcc_json_parser_integer@@Base+0xb0>
   27494:	ldr	r0, [fp, #8]
   27498:	strd	r4, [r0]
   2749c:	mov	r0, ip
   274a0:	pop	{r4, r5, r6, r7, fp, pc}

000274a4 <flatcc_json_parser_build_uint8_vector_base64@@Base>:
   274a4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   274a8:	add	fp, sp, #28
   274ac:	sub	sp, sp, #20
   274b0:	mov	r8, r3
   274b4:	mov	r4, r2
   274b8:	mov	r5, r0
   274bc:	bl	26e4c <flatcc_json_parser_float@@Base+0x17c>
   274c0:	mov	r6, r0
   274c4:	mov	r0, r5
   274c8:	mov	r1, r6
   274cc:	mov	r2, r4
   274d0:	bl	25fd8 <flatcc_json_parser_string_part@@Base>
   274d4:	mov	r7, r0
   274d8:	ldr	sl, [fp, #8]
   274dc:	cmp	sl, #0
   274e0:	mov	r9, sl
   274e4:	movwne	r9, #1
   274e8:	cmp	r0, r4
   274ec:	beq	275e4 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x140>
   274f0:	ldrb	r0, [r7]
   274f4:	cmp	r0, #34	; 0x22
   274f8:	bne	275e4 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x140>
   274fc:	sub	r0, r7, r6
   27500:	str	r0, [sp, #4]
   27504:	bl	27610 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x16c>
   27508:	str	r0, [sp, #8]
   2750c:	ldr	r0, [r5]
   27510:	mov	r1, #1
   27514:	mov	r2, #1
   27518:	mvn	r3, #0
   2751c:	bl	22470 <flatcc_builder_start_vector@@Base>
   27520:	cmp	r0, #0
   27524:	beq	27544 <flatcc_json_parser_build_uint8_vector_base64@@Base+0xa0>
   27528:	mov	r0, #0
   2752c:	str	r0, [r8]
   27530:	mov	r0, r5
   27534:	mov	r1, r7
   27538:	mov	r2, r4
   2753c:	mov	r3, #33	; 0x21
   27540:	b	27604 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x160>
   27544:	ldr	r0, [r5]
   27548:	ldr	r1, [sp, #8]
   2754c:	bl	21e84 <flatcc_builder_extend_vector@@Base>
   27550:	cmp	r0, #0
   27554:	beq	27528 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x84>
   27558:	ldr	r1, [sp, #8]
   2755c:	str	r1, [sp, #16]
   27560:	ldr	r1, [sp, #4]
   27564:	str	r1, [sp, #12]
   27568:	str	r9, [sp]
   2756c:	add	r2, sp, #16
   27570:	add	r3, sp, #12
   27574:	mov	r1, r6
   27578:	bl	2763c <flatcc_json_parser_build_uint8_vector_base64@@Base+0x198>
   2757c:	ldr	r1, [sp, #12]
   27580:	cmp	r0, #0
   27584:	bne	275e0 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x13c>
   27588:	ldmib	sp, {r0, r2}
   2758c:	cmp	r1, r0
   27590:	bne	275e0 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x13c>
   27594:	ldr	r0, [sp, #16]
   27598:	cmp	r2, r0
   2759c:	bls	275b4 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x110>
   275a0:	sub	r1, r2, r0
   275a4:	ldr	r0, [r5]
   275a8:	bl	222d0 <flatcc_builder_truncate_vector@@Base>
   275ac:	cmp	r0, #0
   275b0:	bne	27528 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x84>
   275b4:	ldr	r0, [r5]
   275b8:	bl	230a8 <flatcc_builder_end_vector@@Base>
   275bc:	str	r0, [r8]
   275c0:	cmp	r0, #0
   275c4:	beq	27528 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x84>
   275c8:	mov	r0, r5
   275cc:	mov	r1, r7
   275d0:	mov	r2, r4
   275d4:	bl	26e78 <flatcc_json_parser_float@@Base+0x1a8>
   275d8:	sub	sp, fp, #28
   275dc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   275e0:	add	r7, r6, r1
   275e4:	mov	r0, #0
   275e8:	str	r0, [r8]
   275ec:	mov	r3, #31
   275f0:	cmp	sl, #0
   275f4:	movwne	r3, #32
   275f8:	mov	r0, r5
   275fc:	mov	r1, r7
   27600:	mov	r2, r4
   27604:	bl	25fa0 <flatcc_json_parser_set_error@@Base>
   27608:	sub	sp, fp, #28
   2760c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   27610:	and	r1, r0, #3
   27614:	lsr	r0, r0, #2
   27618:	add	r0, r0, r0, lsl #1
   2761c:	cmp	r1, #2
   27620:	beq	27634 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x190>
   27624:	cmp	r1, #3
   27628:	addeq	r0, r0, #2
   2762c:	bxeq	lr
   27630:	bx	lr
   27634:	add	r0, r0, #1
   27638:	bx	lr
   2763c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   27640:	add	fp, sp, #28
   27644:	sub	sp, sp, #4
   27648:	ldr	r7, [fp, #8]
   2764c:	cmp	r3, #0
   27650:	beq	2765c <flatcc_json_parser_build_uint8_vector_base64@@Base+0x1b8>
   27654:	ldr	lr, [r3]
   27658:	b	27660 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x1bc>
   2765c:	mvn	lr, #0
   27660:	and	r5, r7, #32
   27664:	bic	r4, r7, #224	; 0xe0
   27668:	cmp	r4, #1
   2766c:	beq	27690 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x1ec>
   27670:	mov	ip, #3
   27674:	cmp	r4, #0
   27678:	bne	276c0 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x21c>
   2767c:	movw	r4, #25680	; 0x6450
   27680:	movt	r4, #3
   27684:	movw	ip, #26192	; 0x6650
   27688:	movt	ip, #3
   2768c:	b	276a0 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x1fc>
   27690:	movw	r4, #25936	; 0x6550
   27694:	movt	r4, #3
   27698:	movw	ip, #26448	; 0x6750
   2769c:	movt	ip, #3
   276a0:	cmp	r5, #0
   276a4:	moveq	ip, r4
   276a8:	cmp	r2, #0
   276ac:	beq	276c8 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x224>
   276b0:	ldr	r9, [r2]
   276b4:	cmp	r9, #0
   276b8:	mvneq	r9, #0
   276bc:	b	276cc <flatcc_json_parser_build_uint8_vector_base64@@Base+0x228>
   276c0:	mov	r8, r0
   276c4:	b	2784c <flatcc_json_parser_build_uint8_vector_base64@@Base+0x3a8>
   276c8:	mvn	r9, #0
   276cc:	mov	r6, sp
   276d0:	mov	r8, r0
   276d4:	mov	r7, #0
   276d8:	mov	r5, lr
   276dc:	cmp	r5, r7
   276e0:	bne	276fc <flatcc_json_parser_build_uint8_vector_base64@@Base+0x258>
   276e4:	b	2777c <flatcc_json_parser_build_uint8_vector_base64@@Base+0x2d8>
   276e8:	add	r7, r7, #1
   276ec:	cmp	r7, #4
   276f0:	bcs	27728 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x284>
   276f4:	cmp	r5, r7
   276f8:	beq	2777c <flatcc_json_parser_build_uint8_vector_base64@@Base+0x2d8>
   276fc:	ldrb	r4, [r1, r7]
   27700:	ldrb	r4, [ip, r4]
   27704:	strb	r4, [r6, r7]
   27708:	cmp	r4, #64	; 0x40
   2770c:	bcc	276e8 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x244>
   27710:	cmp	r4, #65	; 0x41
   27714:	bne	277c4 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x320>
   27718:	sub	r7, r7, #1
   2771c:	sub	r5, r5, #1
   27720:	add	r1, r1, #1
   27724:	b	276e8 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x244>
   27728:	cmp	r9, #3
   2772c:	bcc	27874 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x3d0>
   27730:	ldrb	lr, [sp]
   27734:	ldrb	r4, [sp, #1]
   27738:	lsr	r7, r4, #4
   2773c:	orr	r7, r7, lr, lsl #2
   27740:	strb	r7, [r8]
   27744:	ldrb	r7, [sp, #2]
   27748:	lsr	r7, r7, #2
   2774c:	orr	r7, r7, r4, lsl #4
   27750:	strb	r7, [r8, #1]
   27754:	ldrb	r7, [sp, #2]
   27758:	ldrb	r4, [sp, #3]
   2775c:	orr	r7, r4, r7, lsl #6
   27760:	strb	r7, [r8, #2]
   27764:	sub	lr, r5, #4
   27768:	subs	r9, r9, #3
   2776c:	add	r1, r1, #4
   27770:	add	r8, r8, #3
   27774:	bne	276d4 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x230>
   27778:	b	27848 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x3a4>
   2777c:	mov	r4, r7
   27780:	cmp	r7, #0
   27784:	beq	27844 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x3a0>
   27788:	cmp	r7, #3
   2778c:	beq	27804 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x360>
   27790:	mov	ip, #4
   27794:	cmp	r7, #2
   27798:	bne	2784c <flatcc_json_parser_build_uint8_vector_base64@@Base+0x3a8>
   2779c:	ldrb	r1, [sp, #1]
   277a0:	ands	r7, r1, #15
   277a4:	mov	ip, #1
   277a8:	movwne	ip, #5
   277ac:	bne	2784c <flatcc_json_parser_build_uint8_vector_base64@@Base+0x3a8>
   277b0:	ldrb	r7, [sp]
   277b4:	lsl	r7, r7, #2
   277b8:	orr	r1, r7, r1, lsr #4
   277bc:	strb	r1, [r8], #1
   277c0:	b	27844 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x3a0>
   277c4:	cmp	r4, #66	; 0x42
   277c8:	mov	r4, r7
   277cc:	bne	27780 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x2dc>
   277d0:	add	r6, r7, #1
   277d4:	mov	r4, r6
   277d8:	cmp	r6, r5
   277dc:	bcs	27780 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x2dc>
   277e0:	cmp	r4, #7
   277e4:	ldrbls	r6, [r1, r4]
   277e8:	ldrbls	r6, [ip, r6]
   277ec:	subls	r6, r6, #65	; 0x41
   277f0:	uxtbls	sl, r6
   277f4:	addls	r6, r4, #1
   277f8:	cmpls	sl, #2
   277fc:	bcc	277d4 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x330>
   27800:	b	27780 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x2dc>
   27804:	mov	ip, #5
   27808:	ldrb	r1, [sp, #2]
   2780c:	tst	r1, #3
   27810:	bne	2784c <flatcc_json_parser_build_uint8_vector_base64@@Base+0x3a8>
   27814:	mov	ip, #1
   27818:	cmp	r9, #2
   2781c:	bcc	2784c <flatcc_json_parser_build_uint8_vector_base64@@Base+0x3a8>
   27820:	ldrb	ip, [sp]
   27824:	ldrb	r6, [sp, #1]
   27828:	lsl	r7, r6, #4
   2782c:	orr	r1, r7, r1, lsr #2
   27830:	strb	r1, [r8, #1]
   27834:	lsr	r1, r6, #4
   27838:	orr	r1, r1, ip, lsl #2
   2783c:	strb	r1, [r8]
   27840:	add	r8, r8, #2
   27844:	sub	lr, r5, r4
   27848:	mov	ip, #0
   2784c:	cmp	r2, #0
   27850:	subne	r0, r8, r0
   27854:	strne	r0, [r2]
   27858:	cmp	r3, #0
   2785c:	ldrne	r0, [r3]
   27860:	subne	r0, r0, lr
   27864:	strne	r0, [r3]
   27868:	mov	r0, ip
   2786c:	sub	sp, fp, #28
   27870:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   27874:	mov	ip, #1
   27878:	b	2784c <flatcc_json_parser_build_uint8_vector_base64@@Base+0x3a8>

0002787c <flatcc_json_parser_build_string@@Base>:
   2787c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   27880:	add	fp, sp, #28
   27884:	sub	sp, sp, #4
   27888:	mov	r9, r3
   2788c:	mov	sl, r2
   27890:	mov	r6, r0
   27894:	bl	26e4c <flatcc_json_parser_float@@Base+0x17c>
   27898:	mov	r4, r0
   2789c:	mov	r0, r6
   278a0:	mov	r1, r4
   278a4:	mov	r2, sl
   278a8:	bl	25fd8 <flatcc_json_parser_string_part@@Base>
   278ac:	mov	r5, r0
   278b0:	cmp	r0, sl
   278b4:	beq	278d8 <flatcc_json_parser_build_string@@Base+0x5c>
   278b8:	ldrb	r0, [r5]
   278bc:	cmp	r0, #34	; 0x22
   278c0:	bne	278d8 <flatcc_json_parser_build_string@@Base+0x5c>
   278c4:	sub	r2, r5, r4
   278c8:	ldr	r0, [r6]
   278cc:	mov	r1, r4
   278d0:	bl	23b84 <flatcc_builder_create_string@@Base>
   278d4:	b	279a4 <flatcc_json_parser_build_string@@Base+0x128>
   278d8:	ldr	r0, [r6]
   278dc:	bl	22618 <flatcc_builder_start_string@@Base>
   278e0:	cmp	r0, #0
   278e4:	beq	278f4 <flatcc_json_parser_build_string@@Base+0x78>
   278e8:	mov	r0, #0
   278ec:	str	r0, [r9]
   278f0:	b	279bc <flatcc_json_parser_build_string@@Base+0x140>
   278f4:	sub	r2, r5, r4
   278f8:	ldr	r0, [r6]
   278fc:	mov	r1, r4
   27900:	bl	221d0 <flatcc_builder_append_string@@Base>
   27904:	cmp	r0, #0
   27908:	beq	278e8 <flatcc_json_parser_build_string@@Base+0x6c>
   2790c:	cmp	r5, sl
   27910:	beq	2799c <flatcc_json_parser_build_string@@Base+0x120>
   27914:	mov	r8, sp
   27918:	add	r4, r8, #1
   2791c:	b	27928 <flatcc_json_parser_build_string@@Base+0xac>
   27920:	cmp	r5, sl
   27924:	beq	2799c <flatcc_json_parser_build_string@@Base+0x120>
   27928:	ldrb	r0, [r5]
   2792c:	cmp	r0, #34	; 0x22
   27930:	beq	2799c <flatcc_json_parser_build_string@@Base+0x120>
   27934:	mov	r0, r6
   27938:	mov	r1, r5
   2793c:	mov	r2, sl
   27940:	mov	r3, r8
   27944:	bl	26144 <flatcc_json_parser_string_escape@@Base>
   27948:	mov	r7, r0
   2794c:	ldr	r0, [r6]
   27950:	ldrb	r2, [sp]
   27954:	mov	r1, r4
   27958:	bl	221d0 <flatcc_builder_append_string@@Base>
   2795c:	cmp	r0, #0
   27960:	beq	279c8 <flatcc_json_parser_build_string@@Base+0x14c>
   27964:	mov	r0, r6
   27968:	mov	r1, r7
   2796c:	mov	r2, sl
   27970:	bl	25fd8 <flatcc_json_parser_string_part@@Base>
   27974:	mov	r5, r0
   27978:	cmp	r0, sl
   2797c:	beq	27920 <flatcc_json_parser_build_string@@Base+0xa4>
   27980:	sub	r2, r5, r7
   27984:	ldr	r0, [r6]
   27988:	mov	r1, r7
   2798c:	bl	221d0 <flatcc_builder_append_string@@Base>
   27990:	cmp	r0, #0
   27994:	bne	27920 <flatcc_json_parser_build_string@@Base+0xa4>
   27998:	b	278e8 <flatcc_json_parser_build_string@@Base+0x6c>
   2799c:	ldr	r0, [r6]
   279a0:	bl	23c98 <flatcc_builder_end_string@@Base>
   279a4:	str	r0, [r9]
   279a8:	mov	r0, r6
   279ac:	mov	r1, r5
   279b0:	mov	r2, sl
   279b4:	bl	26e78 <flatcc_json_parser_float@@Base+0x1a8>
   279b8:	mov	r5, r0
   279bc:	mov	r0, r5
   279c0:	sub	sp, fp, #28
   279c4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   279c8:	mov	r5, r7
   279cc:	b	278e8 <flatcc_json_parser_build_string@@Base+0x6c>

000279d0 <flatcc_json_parser_prepare_unions@@Base>:
   279d0:	push	{r4, r5, r6, r7, fp, lr}
   279d4:	add	fp, sp, #16
   279d8:	mov	r5, r3
   279dc:	mov	r6, r2
   279e0:	mov	r4, r1
   279e4:	mov	r7, r0
   279e8:	add	r0, r3, r3, lsl #1
   279ec:	mov	r1, #8
   279f0:	add	r1, r1, r0, lsl #3
   279f4:	ldr	r0, [r7]
   279f8:	bl	21424 <flatcc_builder_enter_user_frame@@Base>
   279fc:	mov	r1, r0
   27a00:	ldr	r0, [fp, #8]
   27a04:	str	r1, [r0]
   27a08:	cmp	r1, #0
   27a0c:	beq	27a24 <flatcc_json_parser_prepare_unions@@Base+0x54>
   27a10:	ldr	r0, [r7]
   27a14:	bl	21530 <flatcc_builder_get_user_frame_ptr@@Base>
   27a18:	str	r5, [r0]
   27a1c:	mov	r0, r4
   27a20:	pop	{r4, r5, r6, r7, fp, pc}
   27a24:	mov	r0, r7
   27a28:	mov	r1, r4
   27a2c:	mov	r2, r6
   27a30:	mov	r3, #33	; 0x21
   27a34:	bl	25fa0 <flatcc_json_parser_set_error@@Base>
   27a38:	pop	{r4, r5, r6, r7, fp, pc}

00027a3c <flatcc_json_parser_finalize_unions@@Base>:
   27a3c:	push	{r4, r5, r6, r7, fp, lr}
   27a40:	add	fp, sp, #16
   27a44:	mov	r4, r3
   27a48:	mov	r7, r2
   27a4c:	mov	r5, r1
   27a50:	mov	r6, r0
   27a54:	ldr	r0, [r0]
   27a58:	mov	r1, r3
   27a5c:	bl	21530 <flatcc_builder_get_user_frame_ptr@@Base>
   27a60:	ldr	r0, [r0, #4]
   27a64:	cmp	r0, #0
   27a68:	beq	27a84 <flatcc_json_parser_finalize_unions@@Base+0x48>
   27a6c:	mov	r0, r6
   27a70:	mov	r1, r5
   27a74:	mov	r2, r7
   27a78:	mov	r3, #27
   27a7c:	bl	25fa0 <flatcc_json_parser_set_error@@Base>
   27a80:	mov	r5, r0
   27a84:	ldr	r0, [r6]
   27a88:	mov	r1, r4
   27a8c:	bl	214e8 <flatcc_builder_exit_user_frame_at@@Base>
   27a90:	mov	r0, r5
   27a94:	pop	{r4, r5, r6, r7, fp, pc}

00027a98 <flatcc_json_parser_union@@Base>:
   27a98:	push	{r4, r5, r6, r7, fp, lr}
   27a9c:	add	fp, sp, #16
   27aa0:	sub	sp, sp, #16
   27aa4:	mov	r7, r3
   27aa8:	mov	r4, r2
   27aac:	mov	r6, r1
   27ab0:	mov	r5, r0
   27ab4:	ldr	r0, [r0]
   27ab8:	ldr	r1, [fp, #12]
   27abc:	bl	21530 <flatcc_builder_get_user_frame_ptr@@Base>
   27ac0:	add	r2, r0, #8
   27ac4:	add	r3, r7, r7, lsl #1
   27ac8:	mov	r1, r2
   27acc:	ldr	r7, [r1, r3, lsl #3]!
   27ad0:	cmp	r7, #0
   27ad4:	beq	27afc <flatcc_json_parser_union@@Base+0x64>
   27ad8:	mov	r0, r5
   27adc:	mov	r1, r6
   27ae0:	mov	r2, r4
   27ae4:	mov	r3, #28
   27ae8:	bl	25fa0 <flatcc_json_parser_set_error@@Base>
   27aec:	mov	r6, r0
   27af0:	mov	r0, r6
   27af4:	sub	sp, fp, #16
   27af8:	pop	{r4, r5, r6, r7, fp, pc}
   27afc:	add	r2, r2, r3, lsl #3
   27b00:	ldrb	r3, [r2, #12]
   27b04:	cmp	r3, #0
   27b08:	beq	27b74 <flatcc_json_parser_union@@Base+0xdc>
   27b0c:	ldrb	r3, [r2, #13]
   27b10:	strb	r3, [sp, #8]
   27b14:	cmp	r3, #0
   27b18:	beq	27ba8 <flatcc_json_parser_union@@Base+0x110>
   27b1c:	ldr	r7, [fp, #16]
   27b20:	ldr	r1, [r0, #4]
   27b24:	sub	r1, r1, #1
   27b28:	str	r1, [r0, #4]
   27b2c:	add	r0, sp, #8
   27b30:	add	r0, r0, #4
   27b34:	str	r0, [sp]
   27b38:	mov	r0, r5
   27b3c:	mov	r1, r6
   27b40:	mov	r2, r4
   27b44:	blx	r7
   27b48:	mov	r6, r0
   27b4c:	cmp	r0, r4
   27b50:	beq	27af0 <flatcc_json_parser_union@@Base+0x58>
   27b54:	ldr	r1, [fp, #8]
   27b58:	ldr	r0, [r5]
   27b5c:	ldr	r2, [sp, #8]
   27b60:	ldr	r3, [sp, #12]
   27b64:	bl	23370 <flatcc_builder_table_add_union@@Base>
   27b68:	cmp	r0, #0
   27b6c:	bne	27ad8 <flatcc_json_parser_union@@Base+0x40>
   27b70:	b	27af0 <flatcc_json_parser_union@@Base+0x58>
   27b74:	ldr	r3, [r0, #4]
   27b78:	add	r3, r3, #1
   27b7c:	str	r3, [r0, #4]
   27b80:	ldr	r0, [r5, #12]
   27b84:	str	r0, [r2, #8]
   27b88:	ldr	r0, [r5, #4]
   27b8c:	str	r0, [r2, #4]
   27b90:	str	r6, [r1]
   27b94:	mov	r0, r5
   27b98:	mov	r1, r6
   27b9c:	mov	r2, r4
   27ba0:	bl	267a0 <flatcc_json_parser_generic_json@@Base>
   27ba4:	b	27aec <flatcc_json_parser_union@@Base+0x54>
   27ba8:	mov	r0, r5
   27bac:	mov	r1, r6
   27bb0:	mov	r2, r4
   27bb4:	mov	r3, #25
   27bb8:	b	27ae8 <flatcc_json_parser_union@@Base+0x50>

00027bbc <flatcc_json_parser_union_type@@Base>:
   27bbc:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   27bc0:	add	fp, sp, #28
   27bc4:	sub	sp, sp, #20
   27bc8:	mov	r6, r3
   27bcc:	mov	r7, r2
   27bd0:	mov	r4, r1
   27bd4:	mov	r5, r0
   27bd8:	ldr	r0, [r0]
   27bdc:	ldr	r1, [fp, #12]
   27be0:	bl	21530 <flatcc_builder_get_user_frame_ptr@@Base>
   27be4:	mov	sl, r0
   27be8:	add	r8, r0, #8
   27bec:	add	r9, r6, r6, lsl #1
   27bf0:	add	r6, r8, r9, lsl #3
   27bf4:	mov	r0, r6
   27bf8:	ldrb	r1, [r0, #12]!
   27bfc:	cmp	r1, #0
   27c00:	beq	27c28 <flatcc_json_parser_union_type@@Base+0x6c>
   27c04:	mov	r0, r5
   27c08:	mov	r1, r4
   27c0c:	mov	r2, r7
   27c10:	mov	r3, #28
   27c14:	bl	25fa0 <flatcc_json_parser_set_error@@Base>
   27c18:	mov	r7, r0
   27c1c:	mov	r0, r7
   27c20:	sub	sp, fp, #28
   27c24:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   27c28:	mov	r1, #1
   27c2c:	strb	r1, [r0]
   27c30:	add	r3, r6, #13
   27c34:	mov	r0, r5
   27c38:	mov	r1, r4
   27c3c:	mov	r2, r7
   27c40:	str	r3, [sp, #8]
   27c44:	bl	27d64 <flatcc_json_parser_union_type@@Base+0x1a8>
   27c48:	mov	r2, r7
   27c4c:	mov	r7, r0
   27c50:	cmp	r0, r4
   27c54:	str	r2, [sp, #4]
   27c58:	beq	27c64 <flatcc_json_parser_union_type@@Base+0xa8>
   27c5c:	ldr	r4, [sp, #8]
   27c60:	b	27c84 <flatcc_json_parser_union_type@@Base+0xc8>
   27c64:	ldr	r3, [fp, #16]
   27c68:	ldr	r0, [sp, #8]
   27c6c:	mov	r4, r0
   27c70:	str	r0, [sp]
   27c74:	mov	r0, r5
   27c78:	mov	r1, r7
   27c7c:	bl	27df4 <flatcc_json_parser_union_type@@Base+0x238>
   27c80:	mov	r7, r0
   27c84:	ldr	r1, [r8, r9, lsl #3]
   27c88:	cmp	r1, #0
   27c8c:	beq	27d18 <flatcc_json_parser_union_type@@Base+0x15c>
   27c90:	ldr	r0, [sl, #4]
   27c94:	cmp	r0, #0
   27c98:	beq	27d44 <flatcc_json_parser_union_type@@Base+0x188>
   27c9c:	ldr	ip, [fp, #20]
   27ca0:	sub	r0, r0, #1
   27ca4:	str	r0, [sl, #4]
   27ca8:	ldr	r0, [r6, #8]
   27cac:	ldr	r9, [r5, #4]
   27cb0:	ldr	r8, [r5, #12]
   27cb4:	str	r0, [r5, #12]
   27cb8:	ldr	r0, [r6, #4]
   27cbc:	str	r0, [r5, #4]
   27cc0:	ldrb	r3, [r4]
   27cc4:	strb	r3, [sp, #12]
   27cc8:	add	r0, sp, #12
   27ccc:	add	r0, r0, #4
   27cd0:	str	r0, [sp]
   27cd4:	mov	r0, r5
   27cd8:	ldr	r6, [sp, #4]
   27cdc:	mov	r2, r6
   27ce0:	blx	ip
   27ce4:	cmp	r0, r6
   27ce8:	beq	27d30 <flatcc_json_parser_union_type@@Base+0x174>
   27cec:	ldr	r1, [fp, #8]
   27cf0:	ldr	r0, [r5]
   27cf4:	ldr	r2, [sp, #12]
   27cf8:	ldr	r3, [sp, #16]
   27cfc:	bl	23370 <flatcc_builder_table_add_union@@Base>
   27d00:	cmp	r0, #0
   27d04:	beq	27d38 <flatcc_json_parser_union_type@@Base+0x17c>
   27d08:	mov	r0, r5
   27d0c:	mov	r1, r7
   27d10:	ldr	r2, [sp, #4]
   27d14:	b	27c10 <flatcc_json_parser_union_type@@Base+0x54>
   27d18:	ldrb	r0, [r4]
   27d1c:	ldr	r1, [sl, #4]
   27d20:	cmp	r0, #0
   27d24:	addne	r1, r1, #1
   27d28:	str	r1, [sl, #4]
   27d2c:	b	27c1c <flatcc_json_parser_union_type@@Base+0x60>
   27d30:	mov	r7, r6
   27d34:	b	27c1c <flatcc_json_parser_union_type@@Base+0x60>
   27d38:	str	r9, [r5, #4]
   27d3c:	str	r8, [r5, #12]
   27d40:	b	27c1c <flatcc_json_parser_union_type@@Base+0x60>
   27d44:	movw	r0, #27620	; 0x6be4
   27d48:	movt	r0, #3
   27d4c:	movw	r1, #27635	; 0x6bf3
   27d50:	movt	r1, #3
   27d54:	movw	r3, #27709	; 0x6c3d
   27d58:	movt	r3, #3
   27d5c:	movw	r2, #965	; 0x3c5
   27d60:	bl	14f40 <__assert_fail@plt>
   27d64:	push	{r4, r5, r6, r7, fp, lr}
   27d68:	add	fp, sp, #16
   27d6c:	sub	sp, sp, #24
   27d70:	mov	r7, r1
   27d74:	mov	r6, r0
   27d78:	mov	r0, #0
   27d7c:	str	r0, [sp, #20]
   27d80:	str	r0, [sp, #16]
   27d84:	str	r0, [sp, #12]
   27d88:	strb	r0, [r3]
   27d8c:	cmp	r1, r2
   27d90:	beq	27de8 <flatcc_json_parser_union_type@@Base+0x22c>
   27d94:	mov	r5, r3
   27d98:	mov	r4, r2
   27d9c:	add	r0, sp, #16
   27da0:	str	r0, [sp]
   27da4:	add	r3, sp, #12
   27da8:	mov	r0, r6
   27dac:	mov	r1, r7
   27db0:	bl	27380 <flatcc_json_parser_integer@@Base>
   27db4:	mov	r1, r0
   27db8:	cmp	r0, r7
   27dbc:	beq	27de4 <flatcc_json_parser_union_type@@Base+0x228>
   27dc0:	ldr	r3, [sp, #12]
   27dc4:	ldr	r0, [sp, #16]
   27dc8:	ldr	r2, [sp, #20]
   27dcc:	stm	sp, {r0, r2, r5}
   27dd0:	mov	r0, r6
   27dd4:	mov	r2, r4
   27dd8:	bl	28fb8 <flatcc_json_parser_struct_as_root@@Base+0x9d0>
   27ddc:	mov	r7, r0
   27de0:	b	27de8 <flatcc_json_parser_union_type@@Base+0x22c>
   27de4:	mov	r7, r1
   27de8:	mov	r0, r7
   27dec:	sub	sp, fp, #16
   27df0:	pop	{r4, r5, r6, r7, fp, pc}
   27df4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   27df8:	add	fp, sp, #28
   27dfc:	sub	sp, sp, #36	; 0x24
   27e00:	mov	r8, r3
   27e04:	mov	r6, r2
   27e08:	mov	r5, r0
   27e0c:	mov	r0, #0
   27e10:	strb	r0, [fp, #-29]	; 0xffffffe3
   27e14:	ldr	sl, [fp, #8]
   27e18:	strb	r0, [sl]
   27e1c:	mov	r0, r5
   27e20:	bl	29004 <flatcc_json_parser_struct_as_root@@Base+0xa1c>
   27e24:	mov	r4, r0
   27e28:	cmp	r0, r6
   27e2c:	beq	27edc <flatcc_json_parser_union_type@@Base+0x320>
   27e30:	mov	r9, r8
   27e34:	b	27e48 <flatcc_json_parser_union_type@@Base+0x28c>
   27e38:	ldr	r0, [r9, #4]!
   27e3c:	cmp	r0, #0
   27e40:	mov	r4, r7
   27e44:	beq	27eec <flatcc_json_parser_union_type@@Base+0x330>
   27e48:	ldr	r7, [r9]
   27e4c:	add	r0, sp, #24
   27e50:	str	r0, [sp]
   27e54:	add	r0, sp, #16
   27e58:	str	r0, [sp, #4]
   27e5c:	mov	r0, r5
   27e60:	mov	r1, r4
   27e64:	mov	r2, r6
   27e68:	add	r3, sp, #20
   27e6c:	blx	r7
   27e70:	mov	r7, r0
   27e74:	cmp	r0, r6
   27e78:	beq	27f04 <flatcc_json_parser_union_type@@Base+0x348>
   27e7c:	cmp	r7, r4
   27e80:	beq	27e38 <flatcc_json_parser_union_type@@Base+0x27c>
   27e84:	ldr	r3, [sp, #20]
   27e88:	ldr	r0, [sp, #24]
   27e8c:	ldr	r1, [sp, #28]
   27e90:	stm	sp, {r0, r1}
   27e94:	sub	r0, fp, #29
   27e98:	str	r0, [sp, #8]
   27e9c:	mov	r0, r5
   27ea0:	mov	r1, r7
   27ea4:	mov	r2, r6
   27ea8:	bl	28fb8 <flatcc_json_parser_struct_as_root@@Base+0x9d0>
   27eac:	cmp	r0, r6
   27eb0:	beq	27ee4 <flatcc_json_parser_union_type@@Base+0x328>
   27eb4:	ldrb	r0, [sl]
   27eb8:	ldrb	r1, [fp, #-29]	; 0xffffffe3
   27ebc:	add	r0, r0, r1
   27ec0:	strb	r0, [sl]
   27ec4:	ldr	r0, [sp, #16]
   27ec8:	cmp	r0, #0
   27ecc:	mov	r4, r7
   27ed0:	mov	r9, r8
   27ed4:	bne	27e48 <flatcc_json_parser_union_type@@Base+0x28c>
   27ed8:	b	27f04 <flatcc_json_parser_union_type@@Base+0x348>
   27edc:	mov	r7, r4
   27ee0:	b	27f04 <flatcc_json_parser_union_type@@Base+0x348>
   27ee4:	mov	r7, r6
   27ee8:	b	27f04 <flatcc_json_parser_union_type@@Base+0x348>
   27eec:	mov	r0, r5
   27ef0:	mov	r1, r7
   27ef4:	mov	r2, r6
   27ef8:	mov	r3, #23
   27efc:	bl	25fa0 <flatcc_json_parser_set_error@@Base>
   27f00:	mov	r7, r0
   27f04:	mov	r0, r7
   27f08:	sub	sp, fp, #28
   27f0c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}

00027f10 <flatcc_json_parser_union_vector@@Base>:
   27f10:	push	{r4, r5, r6, r7, fp, lr}
   27f14:	add	fp, sp, #16
   27f18:	sub	sp, sp, #16
   27f1c:	mov	r7, r3
   27f20:	mov	r4, r2
   27f24:	mov	r5, r1
   27f28:	mov	r6, r0
   27f2c:	ldr	r0, [r0]
   27f30:	ldr	r1, [fp, #12]
   27f34:	bl	21530 <flatcc_builder_get_user_frame_ptr@@Base>
   27f38:	add	r2, r0, #8
   27f3c:	add	r3, r7, r7, lsl #1
   27f40:	mov	r1, r2
   27f44:	ldr	r7, [r1, r3, lsl #3]!
   27f48:	cmp	r7, #0
   27f4c:	beq	27f6c <flatcc_json_parser_union_vector@@Base+0x5c>
   27f50:	mov	r0, r6
   27f54:	mov	r1, r5
   27f58:	mov	r2, r4
   27f5c:	mov	r3, #28
   27f60:	sub	sp, fp, #16
   27f64:	pop	{r4, r5, r6, r7, fp, lr}
   27f68:	b	25fa0 <flatcc_json_parser_set_error@@Base>
   27f6c:	add	r2, r2, r3, lsl #3
   27f70:	ldrb	r7, [r2, #12]
   27f74:	ldr	r3, [r0, #4]
   27f78:	cmp	r7, #0
   27f7c:	beq	27fb8 <flatcc_json_parser_union_vector@@Base+0xa8>
   27f80:	ldr	r1, [fp, #16]
   27f84:	ldr	r7, [fp, #8]
   27f88:	sub	r3, r3, #1
   27f8c:	str	r3, [r0, #4]
   27f90:	ldr	r0, [r2, #16]
   27f94:	ldr	r3, [r2, #20]
   27f98:	stm	sp, {r0, r7}
   27f9c:	str	r1, [sp, #8]
   27fa0:	mov	r0, r6
   27fa4:	mov	r1, r5
   27fa8:	mov	r2, r4
   27fac:	bl	27fec <flatcc_json_parser_union_vector@@Base+0xdc>
   27fb0:	sub	sp, fp, #16
   27fb4:	pop	{r4, r5, r6, r7, fp, pc}
   27fb8:	add	r3, r3, #1
   27fbc:	str	r3, [r0, #4]
   27fc0:	ldr	r0, [r6, #12]
   27fc4:	str	r0, [r2, #8]
   27fc8:	ldr	r0, [r6, #4]
   27fcc:	str	r0, [r2, #4]
   27fd0:	str	r5, [r1]
   27fd4:	mov	r0, r6
   27fd8:	mov	r1, r5
   27fdc:	mov	r2, r4
   27fe0:	sub	sp, fp, #16
   27fe4:	pop	{r4, r5, r6, r7, fp, lr}
   27fe8:	b	267a0 <flatcc_json_parser_generic_json@@Base>
   27fec:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   27ff0:	add	fp, sp, #28
   27ff4:	sub	sp, sp, #12
   27ff8:	mov	r7, r3
   27ffc:	mov	r5, r2
   28000:	mov	r4, r1
   28004:	mov	r6, r0
   28008:	mov	r0, #0
   2800c:	str	r0, [sp, #8]
   28010:	ldr	r0, [r6]
   28014:	bl	22500 <flatcc_builder_start_offset_vector@@Base>
   28018:	cmp	r0, #0
   2801c:	beq	28044 <flatcc_json_parser_union_vector@@Base+0x134>
   28020:	mov	r0, r6
   28024:	mov	r1, r4
   28028:	mov	r2, r5
   2802c:	mov	r3, #33	; 0x21
   28030:	bl	25fa0 <flatcc_json_parser_set_error@@Base>
   28034:	mov	r4, r0
   28038:	mov	r0, r4
   2803c:	sub	sp, fp, #28
   28040:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   28044:	ldr	r8, [fp, #8]
   28048:	add	r3, sp, #4
   2804c:	mov	r0, r6
   28050:	mov	r1, r4
   28054:	mov	r2, r5
   28058:	bl	28444 <flatcc_json_parser_union_type_vector@@Base+0x2d8>
   2805c:	mov	r4, r0
   28060:	clz	r0, r8
   28064:	lsr	r0, r0, #5
   28068:	ldr	r1, [sp, #4]
   2806c:	cmp	r1, #0
   28070:	beq	2810c <flatcc_json_parser_union_vector@@Base+0x1fc>
   28074:	sub	sl, r8, #1
   28078:	mov	r9, #0
   2807c:	add	r8, sp, #8
   28080:	tst	r0, #1
   28084:	bne	28158 <flatcc_json_parser_union_vector@@Base+0x248>
   28088:	ldr	r0, [r6]
   2808c:	mov	r1, r7
   28090:	bl	21530 <flatcc_builder_get_user_frame_ptr@@Base>
   28094:	ldrb	r3, [r0, r9]
   28098:	str	r8, [sp]
   2809c:	mov	r0, r6
   280a0:	mov	r1, r4
   280a4:	mov	r2, r5
   280a8:	ldr	r4, [fp, #16]
   280ac:	blx	r4
   280b0:	mov	r4, r0
   280b4:	cmp	r0, r5
   280b8:	beq	28038 <flatcc_json_parser_union_vector@@Base+0x128>
   280bc:	ldr	r0, [r6]
   280c0:	mov	r1, #1
   280c4:	bl	2204c <flatcc_builder_extend_offset_vector@@Base>
   280c8:	cmp	r0, #0
   280cc:	beq	28020 <flatcc_json_parser_union_vector@@Base+0x110>
   280d0:	ldr	r1, [sp, #8]
   280d4:	str	r1, [r0]
   280d8:	mov	r0, r6
   280dc:	mov	r1, r4
   280e0:	mov	r2, r5
   280e4:	add	r3, sp, #4
   280e8:	bl	27200 <flatcc_json_parser_float@@Base+0x530>
   280ec:	mov	r4, r0
   280f0:	sub	r0, sl, r9
   280f4:	clz	r0, r0
   280f8:	lsr	r0, r0, #5
   280fc:	add	r9, r9, #1
   28100:	ldr	r1, [sp, #4]
   28104:	cmp	r1, #0
   28108:	bne	28080 <flatcc_json_parser_union_vector@@Base+0x170>
   2810c:	cmp	r0, #0
   28110:	beq	28158 <flatcc_json_parser_union_vector@@Base+0x248>
   28114:	ldr	r0, [r6]
   28118:	mov	r1, r7
   2811c:	bl	21530 <flatcc_builder_get_user_frame_ptr@@Base>
   28120:	mov	r1, r0
   28124:	ldr	r0, [r6]
   28128:	bl	232f4 <flatcc_builder_end_offset_vector_for_unions@@Base>
   2812c:	str	r0, [sp, #8]
   28130:	cmp	r0, #0
   28134:	beq	28020 <flatcc_json_parser_union_vector@@Base+0x110>
   28138:	ldr	r1, [fp, #12]
   2813c:	ldr	r0, [r6]
   28140:	bl	2347c <flatcc_builder_table_add_offset@@Base>
   28144:	cmp	r0, #0
   28148:	beq	28020 <flatcc_json_parser_union_vector@@Base+0x110>
   2814c:	ldr	r1, [sp, #8]
   28150:	str	r1, [r0]
   28154:	b	28038 <flatcc_json_parser_union_vector@@Base+0x128>
   28158:	mov	r0, r6
   2815c:	mov	r1, r4
   28160:	mov	r2, r5
   28164:	mov	r3, #30
   28168:	b	28030 <flatcc_json_parser_union_vector@@Base+0x120>

0002816c <flatcc_json_parser_union_type_vector@@Base>:
   2816c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   28170:	add	fp, sp, #28
   28174:	sub	sp, sp, #28
   28178:	mov	r6, r3
   2817c:	mov	r9, r2
   28180:	mov	r4, r1
   28184:	mov	r5, r0
   28188:	ldr	r0, [r0]
   2818c:	ldr	r1, [fp, #12]
   28190:	bl	21530 <flatcc_builder_get_user_frame_ptr@@Base>
   28194:	add	r0, r0, #8
   28198:	add	sl, r6, r6, lsl #1
   2819c:	add	r7, r0, sl, lsl #3
   281a0:	mov	r0, r7
   281a4:	ldrb	r1, [r0, #12]!
   281a8:	cmp	r1, #0
   281ac:	beq	281c4 <flatcc_json_parser_union_type_vector@@Base+0x58>
   281b0:	mov	r0, r5
   281b4:	mov	r1, r4
   281b8:	mov	r2, r9
   281bc:	mov	r3, #28
   281c0:	b	283ec <flatcc_json_parser_union_type_vector@@Base+0x280>
   281c4:	mov	r1, #1
   281c8:	strb	r1, [r0]
   281cc:	ldr	r0, [r5]
   281d0:	mov	r1, #1
   281d4:	mov	r2, #1
   281d8:	mvn	r3, #0
   281dc:	bl	22470 <flatcc_builder_start_vector@@Base>
   281e0:	cmp	r0, #0
   281e4:	bne	283dc <flatcc_json_parser_union_type_vector@@Base+0x270>
   281e8:	add	r3, sp, #24
   281ec:	mov	r0, r5
   281f0:	mov	r1, r4
   281f4:	mov	r2, r9
   281f8:	bl	28444 <flatcc_json_parser_union_type_vector@@Base+0x2d8>
   281fc:	mov	r4, r0
   28200:	ldr	r0, [r5]
   28204:	ldr	r1, [sp, #24]
   28208:	cmp	r1, #0
   2820c:	beq	282e4 <flatcc_json_parser_union_type_vector@@Base+0x178>
   28210:	add	r6, sp, #23
   28214:	b	2824c <flatcc_json_parser_union_type_vector@@Base+0xe0>
   28218:	ldrb	r1, [sp, #23]
   2821c:	mov	r0, r8
   28220:	bl	284d4 <flatcc_json_parser_union_type_vector@@Base+0x368>
   28224:	mov	r0, r5
   28228:	mov	r1, r4
   2822c:	mov	r2, r9
   28230:	add	r3, sp, #24
   28234:	bl	27200 <flatcc_json_parser_float@@Base+0x530>
   28238:	mov	r4, r0
   2823c:	ldr	r0, [r5]
   28240:	ldr	r1, [sp, #24]
   28244:	cmp	r1, #0
   28248:	beq	282e4 <flatcc_json_parser_union_type_vector@@Base+0x178>
   2824c:	mov	r1, #1
   28250:	bl	21e84 <flatcc_builder_extend_vector@@Base>
   28254:	cmp	r0, #0
   28258:	beq	283dc <flatcc_json_parser_union_type_vector@@Base+0x270>
   2825c:	mov	r8, r0
   28260:	mov	r0, r5
   28264:	mov	r1, r4
   28268:	mov	r2, r9
   2826c:	mov	r3, r6
   28270:	bl	27d64 <flatcc_json_parser_union_type@@Base+0x1a8>
   28274:	mov	r1, r6
   28278:	mov	r6, r0
   2827c:	cmp	r4, r0
   28280:	beq	2828c <flatcc_json_parser_union_type_vector@@Base+0x120>
   28284:	mov	r4, r6
   28288:	b	282b4 <flatcc_json_parser_union_type_vector@@Base+0x148>
   2828c:	str	r1, [sp]
   28290:	mov	r0, r5
   28294:	mov	r1, r6
   28298:	mov	r2, r9
   2829c:	ldr	r3, [fp, #16]
   282a0:	bl	27df4 <flatcc_json_parser_union_type@@Base+0x238>
   282a4:	mov	r4, r0
   282a8:	cmp	r0, r6
   282ac:	cmpne	r4, r9
   282b0:	beq	283dc <flatcc_json_parser_union_type_vector@@Base+0x270>
   282b4:	ldrb	r0, [sp, #23]
   282b8:	ldr	r1, [fp, #24]
   282bc:	blx	r1
   282c0:	cmp	r0, #0
   282c4:	add	r6, sp, #23
   282c8:	bne	28218 <flatcc_json_parser_union_type_vector@@Base+0xac>
   282cc:	ldrb	r0, [r5, #8]
   282d0:	tst	r0, #1
   282d4:	beq	28410 <flatcc_json_parser_union_type_vector@@Base+0x2a4>
   282d8:	mov	r0, #0
   282dc:	strb	r0, [sp, #23]
   282e0:	b	28218 <flatcc_json_parser_union_type_vector@@Base+0xac>
   282e4:	bl	23128 <flatcc_builder_vector_count@@Base>
   282e8:	mov	r8, r0
   282ec:	str	r0, [r7, #16]
   282f0:	ldr	r0, [r5]
   282f4:	mov	r1, r8
   282f8:	bl	21424 <flatcc_builder_enter_user_frame@@Base>
   282fc:	mov	r1, r0
   28300:	ldr	r0, [r5]
   28304:	str	r1, [sp, #16]
   28308:	bl	21530 <flatcc_builder_get_user_frame_ptr@@Base>
   2830c:	mov	r6, r0
   28310:	ldr	r0, [r5]
   28314:	bl	23134 <flatcc_builder_vector_edit@@Base>
   28318:	mov	r1, r0
   2831c:	mov	r0, r6
   28320:	mov	r2, r8
   28324:	bl	14e5c <memcpy@plt>
   28328:	ldr	r0, [r5]
   2832c:	bl	230a8 <flatcc_builder_end_vector@@Base>
   28330:	cmp	r0, #0
   28334:	beq	283dc <flatcc_json_parser_union_type_vector@@Base+0x270>
   28338:	mov	r7, r0
   2833c:	ldr	r6, [fp, #8]
   28340:	ldr	r0, [r5]
   28344:	sub	r1, r6, #1
   28348:	bl	2347c <flatcc_builder_table_add_offset@@Base>
   2834c:	cmp	r0, #0
   28350:	beq	283dc <flatcc_json_parser_union_type_vector@@Base+0x270>
   28354:	str	r7, [r0]
   28358:	ldr	r0, [r5]
   2835c:	ldr	r1, [fp, #12]
   28360:	bl	21530 <flatcc_builder_get_user_frame_ptr@@Base>
   28364:	add	r7, r0, #8
   28368:	mov	r2, r7
   2836c:	ldr	r1, [r2, sl, lsl #3]!
   28370:	ldr	r3, [sp, #16]
   28374:	str	r3, [r2, #20]
   28378:	ldr	r2, [r0, #4]
   2837c:	cmp	r1, #0
   28380:	beq	28400 <flatcc_json_parser_union_type_vector@@Base+0x294>
   28384:	cmp	r2, #0
   28388:	beq	28424 <flatcc_json_parser_union_type_vector@@Base+0x2b8>
   2838c:	ldr	ip, [fp, #20]
   28390:	sub	r2, r2, #1
   28394:	str	r2, [r0, #4]
   28398:	add	r0, r7, sl, lsl #3
   2839c:	ldr	r2, [r0, #8]
   283a0:	ldr	sl, [r5, #4]
   283a4:	ldr	r7, [r5, #12]
   283a8:	str	r2, [r5, #12]
   283ac:	ldr	r0, [r0, #4]
   283b0:	str	r0, [r5, #4]
   283b4:	str	r8, [sp]
   283b8:	stmib	sp, {r6, ip}
   283bc:	mov	r0, r5
   283c0:	mov	r2, r9
   283c4:	bl	27fec <flatcc_json_parser_union_vector@@Base+0xdc>
   283c8:	cmp	r0, r9
   283cc:	strne	sl, [r5, #4]
   283d0:	strne	r7, [r5, #12]
   283d4:	movne	r9, r4
   283d8:	b	283f4 <flatcc_json_parser_union_type_vector@@Base+0x288>
   283dc:	mov	r0, r5
   283e0:	mov	r1, r4
   283e4:	mov	r2, r9
   283e8:	mov	r3, #33	; 0x21
   283ec:	bl	25fa0 <flatcc_json_parser_set_error@@Base>
   283f0:	mov	r9, r0
   283f4:	mov	r0, r9
   283f8:	sub	sp, fp, #28
   283fc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   28400:	add	r1, r2, #1
   28404:	str	r1, [r0, #4]
   28408:	mov	r9, r4
   2840c:	b	283f4 <flatcc_json_parser_union_type_vector@@Base+0x288>
   28410:	mov	r0, r5
   28414:	mov	r1, r4
   28418:	mov	r2, r9
   2841c:	mov	r3, #15
   28420:	b	283ec <flatcc_json_parser_union_type_vector@@Base+0x280>
   28424:	movw	r0, #27620	; 0x6be4
   28428:	movt	r0, #3
   2842c:	movw	r1, #27635	; 0x6bf3
   28430:	movt	r1, #3
   28434:	movw	r3, #27913	; 0x6d09
   28438:	movt	r3, #3
   2843c:	movw	r2, #1122	; 0x462
   28440:	bl	14f40 <__assert_fail@plt>
   28444:	push	{r4, r5, r6, sl, fp, lr}
   28448:	add	fp, sp, #16
   2844c:	mov	r5, r3
   28450:	mov	r4, r2
   28454:	mov	r6, r0
   28458:	cmp	r1, r2
   2845c:	beq	284ac <flatcc_json_parser_union_type_vector@@Base+0x340>
   28460:	ldrb	r0, [r1]
   28464:	cmp	r0, #91	; 0x5b
   28468:	bne	284ac <flatcc_json_parser_union_type_vector@@Base+0x340>
   2846c:	add	r1, r1, #1
   28470:	mov	r0, r6
   28474:	mov	r2, r4
   28478:	bl	265b4 <flatcc_json_parser_skip_constant@@Base+0x8c>
   2847c:	cmp	r0, r4
   28480:	beq	284c8 <flatcc_json_parser_union_type_vector@@Base+0x35c>
   28484:	ldrb	r1, [r0]
   28488:	cmp	r1, #93	; 0x5d
   2848c:	bne	284c8 <flatcc_json_parser_union_type_vector@@Base+0x35c>
   28490:	mov	r1, #0
   28494:	str	r1, [r5]
   28498:	add	r1, r0, #1
   2849c:	mov	r0, r6
   284a0:	mov	r2, r4
   284a4:	pop	{r4, r5, r6, sl, fp, lr}
   284a8:	b	265b4 <flatcc_json_parser_skip_constant@@Base+0x8c>
   284ac:	mov	r0, #0
   284b0:	str	r0, [r5]
   284b4:	mov	r0, r6
   284b8:	mov	r2, r4
   284bc:	mov	r3, #22
   284c0:	bl	25fa0 <flatcc_json_parser_set_error@@Base>
   284c4:	pop	{r4, r5, r6, sl, fp, pc}
   284c8:	mov	r1, #1
   284cc:	str	r1, [r5]
   284d0:	pop	{r4, r5, r6, sl, fp, pc}
   284d4:	push	{r4, r5, fp, lr}
   284d8:	add	fp, sp, #8
   284dc:	mov	r4, r1
   284e0:	mov	r5, r0
   284e4:	mov	r0, r1
   284e8:	bl	2902c <flatcc_json_parser_struct_as_root@@Base+0xa44>
   284ec:	strb	r4, [r5]
   284f0:	pop	{r4, r5, fp, pc}

000284f4 <flatcc_json_parser_table_as_root@@Base>:
   284f4:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   284f8:	add	fp, sp, #24
   284fc:	sub	sp, sp, #48	; 0x30
   28500:	mov	r4, r2
   28504:	mov	r6, r0
   28508:	ldr	r8, [fp, #8]
   2850c:	str	r8, [sp]
   28510:	add	r5, sp, #8
   28514:	cmp	r1, #0
   28518:	movne	r5, r1
   2851c:	add	r7, r2, r3
   28520:	mov	r0, r5
   28524:	mov	r1, r6
   28528:	mov	r3, r7
   2852c:	bl	285a8 <flatcc_json_parser_table_as_root@@Base+0xb4>
   28530:	mov	r0, #2
   28534:	and	r3, r0, r8, lsr #1
   28538:	ldr	r1, [fp, #12]
   2853c:	mov	r0, r6
   28540:	mov	r2, #0
   28544:	bl	21a58 <flatcc_builder_start_buffer@@Base>
   28548:	mov	r1, r0
   2854c:	mvn	r0, #0
   28550:	cmp	r1, #0
   28554:	bne	2857c <flatcc_json_parser_table_as_root@@Base+0x88>
   28558:	ldr	ip, [fp, #16]
   2855c:	add	r3, sp, #4
   28560:	mov	r0, r5
   28564:	mov	r1, r4
   28568:	mov	r2, r7
   2856c:	blx	ip
   28570:	ldr	r0, [r5, #20]
   28574:	cmp	r0, #0
   28578:	beq	28584 <flatcc_json_parser_table_as_root@@Base+0x90>
   2857c:	sub	sp, fp, #24
   28580:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   28584:	ldr	r1, [sp, #4]
   28588:	mov	r0, r6
   2858c:	bl	21c0c <flatcc_builder_end_buffer@@Base>
   28590:	cmp	r0, #0
   28594:	mvn	r0, #0
   28598:	strne	r4, [r5, #36]	; 0x24
   2859c:	movne	r0, #0
   285a0:	sub	sp, fp, #24
   285a4:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   285a8:	push	{fp, lr}
   285ac:	mov	fp, sp
   285b0:	vmov.i32	q8, #0	; 0x00000000
   285b4:	add	ip, r0, #16
   285b8:	vst1.32	{d16-d17}, [ip]
   285bc:	mov	ip, #0
   285c0:	mov	lr, #1
   285c4:	str	lr, [r0, #12]
   285c8:	stm	r0, {r1, r2}
   285cc:	str	r2, [r0, #24]
   285d0:	str	r3, [r0, #28]
   285d4:	str	r2, [r0, #32]
   285d8:	str	ip, [r0, #36]	; 0x24
   285dc:	ldr	r1, [fp, #8]
   285e0:	str	r1, [r0, #8]
   285e4:	pop	{fp, pc}

000285e8 <flatcc_json_parser_struct_as_root@@Base>:
   285e8:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   285ec:	add	fp, sp, #24
   285f0:	sub	sp, sp, #48	; 0x30
   285f4:	mov	r4, r2
   285f8:	mov	r6, r0
   285fc:	ldr	r8, [fp, #8]
   28600:	str	r8, [sp]
   28604:	add	r5, sp, #8
   28608:	cmp	r1, #0
   2860c:	movne	r5, r1
   28610:	add	r7, r2, r3
   28614:	mov	r0, r5
   28618:	mov	r1, r6
   2861c:	mov	r3, r7
   28620:	bl	285a8 <flatcc_json_parser_table_as_root@@Base+0xb4>
   28624:	mov	r0, #2
   28628:	and	r3, r0, r8, lsr #1
   2862c:	ldr	r1, [fp, #12]
   28630:	mov	r0, r6
   28634:	mov	r2, #0
   28638:	bl	21a58 <flatcc_builder_start_buffer@@Base>
   2863c:	mov	r1, r0
   28640:	mvn	r0, #0
   28644:	cmp	r1, #0
   28648:	bne	28670 <flatcc_json_parser_struct_as_root@@Base+0x88>
   2864c:	ldr	ip, [fp, #16]
   28650:	add	r3, sp, #4
   28654:	mov	r0, r5
   28658:	mov	r1, r4
   2865c:	mov	r2, r7
   28660:	blx	ip
   28664:	ldr	r0, [r5, #20]
   28668:	cmp	r0, #0
   2866c:	beq	28678 <flatcc_json_parser_struct_as_root@@Base+0x90>
   28670:	sub	sp, fp, #24
   28674:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   28678:	ldr	r1, [sp, #4]
   2867c:	mov	r0, r6
   28680:	bl	21c0c <flatcc_builder_end_buffer@@Base>
   28684:	cmp	r0, #0
   28688:	mvn	r0, #0
   2868c:	strne	r4, [r5, #36]	; 0x24
   28690:	movne	r0, #0
   28694:	sub	sp, fp, #24
   28698:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   2869c:	vmov	d0, r0, r1
   286a0:	bx	lr
   286a4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   286a8:	add	fp, sp, #28
   286ac:	sub	sp, sp, #44	; 0x2c
   286b0:	mov	sl, r2
   286b4:	mov	r8, r0
   286b8:	mov	r2, #0
   286bc:	str	r2, [sl]
   286c0:	str	r2, [sl, #4]
   286c4:	cmp	r1, #1000	; 0x3e8
   286c8:	movge	r1, #1000	; 0x3e8
   286cc:	add	ip, r0, r1
   286d0:	add	r4, ip, #1
   286d4:	cmp	r4, r0
   286d8:	beq	28748 <flatcc_json_parser_struct_as_root@@Base+0x160>
   286dc:	ldrb	r7, [r8]
   286e0:	cmp	r7, #45	; 0x2d
   286e4:	mov	r3, r8
   286e8:	bne	28700 <flatcc_json_parser_struct_as_root@@Base+0x118>
   286ec:	cmp	r1, #0
   286f0:	beq	28adc <flatcc_json_parser_struct_as_root@@Base+0x4f4>
   286f4:	add	r3, r8, #1
   286f8:	ldrb	r7, [r3]
   286fc:	mov	r2, #1
   28700:	cmp	r7, #48	; 0x30
   28704:	bne	28730 <flatcc_json_parser_struct_as_root@@Base+0x148>
   28708:	add	r0, r3, #1
   2870c:	cmp	r3, ip
   28710:	beq	28754 <flatcc_json_parser_struct_as_root@@Base+0x16c>
   28714:	ldrb	r7, [r0]
   28718:	orr	r7, r7, #32
   2871c:	cmp	r7, #120	; 0x78
   28720:	bne	28754 <flatcc_json_parser_struct_as_root@@Base+0x16c>
   28724:	mov	r1, sl
   28728:	bl	28ba0 <flatcc_json_parser_struct_as_root@@Base+0x5b8>
   2872c:	b	28748 <flatcc_json_parser_struct_as_root@@Base+0x160>
   28730:	sub	r0, r7, #49	; 0x31
   28734:	uxtb	r0, r0
   28738:	cmp	r0, #9
   2873c:	bcc	28784 <flatcc_json_parser_struct_as_root@@Base+0x19c>
   28740:	cmp	r2, #0
   28744:	movne	r8, #0
   28748:	mov	r0, r8
   2874c:	sub	sp, fp, #28
   28750:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   28754:	cmp	r3, ip
   28758:	beq	28778 <flatcc_json_parser_struct_as_root@@Base+0x190>
   2875c:	ldrb	r0, [r3, #1]
   28760:	cmp	r0, #48	; 0x30
   28764:	bne	28774 <flatcc_json_parser_struct_as_root@@Base+0x18c>
   28768:	add	r3, r3, #1
   2876c:	cmp	ip, r3
   28770:	bne	2875c <flatcc_json_parser_struct_as_root@@Base+0x174>
   28774:	add	r0, r3, #1
   28778:	mov	r7, #0
   2877c:	mov	r3, #0
   28780:	b	28790 <flatcc_json_parser_struct_as_root@@Base+0x1a8>
   28784:	add	r0, r3, #1
   28788:	sub	r7, r7, #48	; 0x30
   2878c:	asr	r3, r7, #31
   28790:	mov	r5, #0
   28794:	cmp	r0, r4
   28798:	str	r2, [sp, #36]	; 0x24
   2879c:	beq	28814 <flatcc_json_parser_struct_as_root@@Base+0x22c>
   287a0:	str	ip, [sp, #28]
   287a4:	str	sl, [sp, #32]
   287a8:	str	r8, [fp, #-32]	; 0xffffffe0
   287ac:	movw	lr, #39321	; 0x9999
   287b0:	movt	lr, #6553	; 0x1999
   287b4:	movw	ip, #39320	; 0x9998
   287b8:	movt	ip, #39321	; 0x9999
   287bc:	mov	r9, #10
   287c0:	mov	r6, r0
   287c4:	ldrb	r8, [r6]
   287c8:	sub	sl, r8, #48	; 0x30
   287cc:	uxtb	r2, sl
   287d0:	cmp	r2, #9
   287d4:	bhi	28804 <flatcc_json_parser_struct_as_root@@Base+0x21c>
   287d8:	subs	r2, ip, r7
   287dc:	sbcs	r2, lr, r3
   287e0:	bcc	28834 <flatcc_json_parser_struct_as_root@@Base+0x24c>
   287e4:	add	r2, r3, r3, lsl #2
   287e8:	lsl	r2, r2, #1
   287ec:	umlal	r8, r2, r7, r9
   287f0:	subs	r7, r8, #48	; 0x30
   287f4:	sbc	r3, r2, #0
   287f8:	add	r6, r6, #1
   287fc:	cmp	r4, r6
   28800:	bne	287c4 <flatcc_json_parser_struct_as_root@@Base+0x1dc>
   28804:	mov	lr, r7
   28808:	mov	r9, r3
   2880c:	mov	r3, #0
   28810:	b	2884c <flatcc_json_parser_struct_as_root@@Base+0x264>
   28814:	mov	r6, r0
   28818:	mov	lr, r7
   2881c:	mov	r9, r3
   28820:	mov	r3, #0
   28824:	cmp	r6, r4
   28828:	bne	28860 <flatcc_json_parser_struct_as_root@@Base+0x278>
   2882c:	mov	r1, r6
   28830:	b	288fc <flatcc_json_parser_struct_as_root@@Base+0x314>
   28834:	adds	lr, r7, #1
   28838:	adc	r9, r3, #0
   2883c:	cmp	r8, #52	; 0x34
   28840:	movls	lr, r7
   28844:	movls	r9, r3
   28848:	mov	r3, #1
   2884c:	ldr	r8, [fp, #-32]	; 0xffffffe0
   28850:	ldr	sl, [sp, #32]
   28854:	ldr	ip, [sp, #28]
   28858:	cmp	r6, r4
   2885c:	beq	2882c <flatcc_json_parser_struct_as_root@@Base+0x244>
   28860:	mov	r7, r3
   28864:	str	r4, [fp, #-32]	; 0xffffffe0
   28868:	sub	r1, r1, r6
   2886c:	add	r3, r8, r1
   28870:	mov	r5, #0
   28874:	mov	r1, r6
   28878:	ldrb	r4, [r1]
   2887c:	cmp	r4, #48	; 0x30
   28880:	bne	288a4 <flatcc_json_parser_struct_as_root@@Base+0x2bc>
   28884:	sub	r3, r3, #1
   28888:	add	r4, r1, #1
   2888c:	add	r5, r5, #1
   28890:	cmp	r1, ip
   28894:	mov	r1, r4
   28898:	bne	28878 <flatcc_json_parser_struct_as_root@@Base+0x290>
   2889c:	mov	r1, r4
   288a0:	b	288f4 <flatcc_json_parser_struct_as_root@@Base+0x30c>
   288a4:	sub	r2, r4, #49	; 0x31
   288a8:	uxtb	r2, r2
   288ac:	cmp	r2, #8
   288b0:	bhi	288f4 <flatcc_json_parser_struct_as_root@@Base+0x30c>
   288b4:	mvn	r7, #0
   288b8:	mov	r4, r7
   288bc:	cmp	r3, #0
   288c0:	beq	288e0 <flatcc_json_parser_struct_as_root@@Base+0x2f8>
   288c4:	ldrb	r2, [r1, -r4]
   288c8:	sub	r2, r2, #48	; 0x30
   288cc:	uxtb	r2, r2
   288d0:	sub	r7, r4, #1
   288d4:	sub	r3, r3, #1
   288d8:	cmp	r2, #10
   288dc:	bcc	288b8 <flatcc_json_parser_struct_as_root@@Base+0x2d0>
   288e0:	sub	r5, r5, r4
   288e4:	sub	r1, r1, r4
   288e8:	mov	r3, #1
   288ec:	ldr	r4, [fp, #-32]	; 0xffffffe0
   288f0:	b	288fc <flatcc_json_parser_struct_as_root@@Base+0x314>
   288f4:	ldr	r4, [fp, #-32]	; 0xffffffe0
   288f8:	mov	r3, r7
   288fc:	sub	r2, r6, r0
   28900:	cmp	r1, r4
   28904:	beq	289b8 <flatcc_json_parser_struct_as_root@@Base+0x3d0>
   28908:	ldrb	r0, [r1]
   2890c:	cmp	r0, #46	; 0x2e
   28910:	bne	289b8 <flatcc_json_parser_struct_as_root@@Base+0x3d0>
   28914:	mov	r6, r1
   28918:	ldrb	r0, [r6, #1]!
   2891c:	sub	r0, r0, #48	; 0x30
   28920:	str	r2, [sp, #28]
   28924:	uxtb	r2, r0
   28928:	mov	r0, #0
   2892c:	cmp	r2, #9
   28930:	ldr	r2, [sp, #28]
   28934:	bhi	28ae0 <flatcc_json_parser_struct_as_root@@Base+0x4f8>
   28938:	cmp	r1, ip
   2893c:	beq	28a68 <flatcc_json_parser_struct_as_root@@Base+0x480>
   28940:	str	r3, [sp, #24]
   28944:	str	r4, [fp, #-32]	; 0xffffffe0
   28948:	movw	r0, #39321	; 0x9999
   2894c:	movt	r0, #6553	; 0x1999
   28950:	movw	r7, #39320	; 0x9998
   28954:	movt	r7, #39321	; 0x9999
   28958:	mov	r3, #10
   2895c:	ldrb	r4, [r1, #1]
   28960:	sub	r2, r4, #48	; 0x30
   28964:	uxtb	r2, r2
   28968:	cmp	r2, #9
   2896c:	bhi	289a0 <flatcc_json_parser_struct_as_root@@Base+0x3b8>
   28970:	subs	r2, r7, lr
   28974:	sbcs	r2, r0, r9
   28978:	bcc	28ae8 <flatcc_json_parser_struct_as_root@@Base+0x500>
   2897c:	add	r2, r9, r9, lsl #2
   28980:	lsl	r2, r2, #1
   28984:	umlal	r4, r2, lr, r3
   28988:	subs	lr, r4, #48	; 0x30
   2898c:	sbc	r9, r2, #0
   28990:	add	r1, r1, #1
   28994:	sub	r5, r5, #1
   28998:	cmp	ip, r1
   2899c:	bne	2895c <flatcc_json_parser_struct_as_root@@Base+0x374>
   289a0:	add	r1, r1, #1
   289a4:	str	lr, [sp, #32]
   289a8:	ldr	r4, [fp, #-32]	; 0xffffffe0
   289ac:	ldr	r3, [sp, #24]
   289b0:	ldr	r2, [sp, #28]
   289b4:	b	28b28 <flatcc_json_parser_struct_as_root@@Base+0x540>
   289b8:	str	lr, [sp, #32]
   289bc:	mov	lr, #0
   289c0:	cmp	r1, r4
   289c4:	beq	28a24 <flatcc_json_parser_struct_as_root@@Base+0x43c>
   289c8:	ldrb	r0, [r1]
   289cc:	orr	r0, r0, #32
   289d0:	cmp	r0, #101	; 0x65
   289d4:	bne	28a24 <flatcc_json_parser_struct_as_root@@Base+0x43c>
   289d8:	mov	r7, r2
   289dc:	sub	r2, r4, r1
   289e0:	mov	r0, #0
   289e4:	cmp	r2, #2
   289e8:	blt	28ae0 <flatcc_json_parser_struct_as_root@@Base+0x4f8>
   289ec:	mov	r2, r7
   289f0:	mov	r6, r1
   289f4:	ldrb	r0, [r6, #1]!
   289f8:	cmp	r0, #45	; 0x2d
   289fc:	beq	28a74 <flatcc_json_parser_struct_as_root@@Base+0x48c>
   28a00:	mov	lr, #0
   28a04:	cmp	r0, #43	; 0x2b
   28a08:	bne	28a84 <flatcc_json_parser_struct_as_root@@Base+0x49c>
   28a0c:	add	r6, r1, #2
   28a10:	mov	r0, #0
   28a14:	cmp	r6, r4
   28a18:	beq	28ae0 <flatcc_json_parser_struct_as_root@@Base+0x4f8>
   28a1c:	mov	lr, #0
   28a20:	b	28a84 <flatcc_json_parser_struct_as_root@@Base+0x49c>
   28a24:	mov	r7, #0
   28a28:	cmp	r1, r4
   28a2c:	mov	r0, #0
   28a30:	beq	28ae0 <flatcc_json_parser_struct_as_root@@Base+0x4f8>
   28a34:	add	r0, r2, r5
   28a38:	cmp	lr, #0
   28a3c:	rsbne	r7, r7, #0
   28a40:	add	r0, r0, r7
   28a44:	ldr	r7, [sp, #32]
   28a48:	stm	sp, {r7, r9}
   28a4c:	add	ip, sp, #8
   28a50:	stm	ip, {r0, r2, r3, sl}
   28a54:	mov	r0, r8
   28a58:	ldr	r2, [sp, #36]	; 0x24
   28a5c:	bl	28bb0 <flatcc_json_parser_struct_as_root@@Base+0x5c8>
   28a60:	sub	sp, fp, #28
   28a64:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   28a68:	mov	r1, r6
   28a6c:	str	lr, [sp, #32]
   28a70:	b	28b28 <flatcc_json_parser_struct_as_root@@Base+0x540>
   28a74:	add	r6, r1, #2
   28a78:	mov	lr, #1
   28a7c:	cmp	r6, r4
   28a80:	beq	28adc <flatcc_json_parser_struct_as_root@@Base+0x4f4>
   28a84:	ldrb	r0, [r6]
   28a88:	sub	r7, r0, #48	; 0x30
   28a8c:	uxtb	r1, r7
   28a90:	mov	r0, #0
   28a94:	cmp	r1, #9
   28a98:	bhi	28ae0 <flatcc_json_parser_struct_as_root@@Base+0x4f8>
   28a9c:	cmp	r6, ip
   28aa0:	beq	28ad4 <flatcc_json_parser_struct_as_root@@Base+0x4ec>
   28aa4:	ldrb	r0, [r6, #1]
   28aa8:	sub	r1, r0, #48	; 0x30
   28aac:	uxtb	r1, r1
   28ab0:	cmp	r1, #9
   28ab4:	bhi	28ad4 <flatcc_json_parser_struct_as_root@@Base+0x4ec>
   28ab8:	cmp	r7, #32768	; 0x8000
   28abc:	addlt	r1, r7, r7, lsl #2
   28ac0:	addlt	r0, r0, r1, lsl #1
   28ac4:	sublt	r7, r0, #48	; 0x30
   28ac8:	add	r6, r6, #1
   28acc:	cmp	ip, r6
   28ad0:	bne	28aa4 <flatcc_json_parser_struct_as_root@@Base+0x4bc>
   28ad4:	add	r1, r6, #1
   28ad8:	b	28a28 <flatcc_json_parser_struct_as_root@@Base+0x440>
   28adc:	mov	r0, #0
   28ae0:	sub	sp, fp, #28
   28ae4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   28ae8:	add	r1, r1, #1
   28aec:	ldr	r3, [sp, #24]
   28af0:	cmp	r3, #0
   28af4:	ldr	r2, [sp, #28]
   28af8:	beq	28b04 <flatcc_json_parser_struct_as_root@@Base+0x51c>
   28afc:	str	lr, [sp, #32]
   28b00:	b	28b24 <flatcc_json_parser_struct_as_root@@Base+0x53c>
   28b04:	adds	r0, lr, #1
   28b08:	adc	r3, r9, #0
   28b0c:	cmp	r4, #52	; 0x34
   28b10:	movls	r0, lr
   28b14:	str	r0, [sp, #32]
   28b18:	movls	r3, r9
   28b1c:	mov	r9, r3
   28b20:	mov	r3, #1
   28b24:	ldr	r4, [fp, #-32]	; 0xffffffe0
   28b28:	sub	r0, r1, r6
   28b2c:	add	r2, r0, r2
   28b30:	cmp	r1, r4
   28b34:	beq	289bc <flatcc_json_parser_struct_as_root@@Base+0x3d4>
   28b38:	ldrb	r0, [r1]
   28b3c:	cmp	r0, #48	; 0x30
   28b40:	bne	28b58 <flatcc_json_parser_struct_as_root@@Base+0x570>
   28b44:	add	r1, r1, #1
   28b48:	add	r5, r5, #1
   28b4c:	cmp	r4, r1
   28b50:	bne	28b38 <flatcc_json_parser_struct_as_root@@Base+0x550>
   28b54:	b	289bc <flatcc_json_parser_struct_as_root@@Base+0x3d4>
   28b58:	sub	r0, r0, #49	; 0x31
   28b5c:	uxtb	r0, r0
   28b60:	cmp	r0, #8
   28b64:	bhi	289bc <flatcc_json_parser_struct_as_root@@Base+0x3d4>
   28b68:	mov	r7, r2
   28b6c:	mov	r0, r1
   28b70:	cmp	ip, r1
   28b74:	beq	28b90 <flatcc_json_parser_struct_as_root@@Base+0x5a8>
   28b78:	add	r1, r0, #1
   28b7c:	ldrb	r2, [r0, #1]
   28b80:	sub	r2, r2, #48	; 0x30
   28b84:	uxtb	r2, r2
   28b88:	cmp	r2, #10
   28b8c:	bcc	28b6c <flatcc_json_parser_struct_as_root@@Base+0x584>
   28b90:	add	r1, r0, #1
   28b94:	mov	r3, #1
   28b98:	mov	r2, r7
   28b9c:	b	289bc <flatcc_json_parser_struct_as_root@@Base+0x3d4>
   28ba0:	mov	r2, #0
   28ba4:	str	r2, [r1]
   28ba8:	str	r2, [r1, #4]
   28bac:	bx	lr
   28bb0:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   28bb4:	add	fp, sp, #24
   28bb8:	sub	sp, sp, #16
   28bbc:	mov	r5, r2
   28bc0:	mov	r4, r1
   28bc4:	mov	r6, r0
   28bc8:	ldr	r1, [fp, #12]
   28bcc:	ldr	r0, [fp, #8]
   28bd0:	vmov.i32	d0, #0	; 0x00000000
   28bd4:	orrs	r2, r0, r1
   28bd8:	ldr	r9, [fp, #28]
   28bdc:	beq	28c08 <flatcc_json_parser_struct_as_root@@Base+0x620>
   28be0:	ldr	r7, [fp, #16]
   28be4:	cmn	r7, #324	; 0x144
   28be8:	blt	28c08 <flatcc_json_parser_struct_as_root@@Base+0x620>
   28bec:	movw	r2, #311	; 0x137
   28bf0:	cmp	r7, r2
   28bf4:	blt	28c2c <flatcc_json_parser_struct_as_root@@Base+0x644>
   28bf8:	movw	r1, #0
   28bfc:	movt	r1, #32752	; 0x7ff0
   28c00:	mov	r0, #0
   28c04:	bl	2869c <flatcc_json_parser_struct_as_root@@Base+0xb4>
   28c08:	vstr	d0, [r9]
   28c0c:	cmp	r5, #0
   28c10:	beq	28c20 <flatcc_json_parser_struct_as_root@@Base+0x638>
   28c14:	vldr	d16, [r9]
   28c18:	vneg.f64	d16, d16
   28c1c:	vstr	d16, [r9]
   28c20:	mov	r0, r4
   28c24:	sub	sp, fp, #24
   28c28:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   28c2c:	ldr	r8, [fp, #20]
   28c30:	mov	r2, #0
   28c34:	cmp	r2, r1, lsr #21
   28c38:	bne	28d20 <flatcc_json_parser_struct_as_root@@Base+0x738>
   28c3c:	cmp	r7, #22
   28c40:	bhi	28d20 <flatcc_json_parser_struct_as_root@@Base+0x738>
   28c44:	bl	31134 <flatcc_json_printer_clear@@Base+0x11e0>
   28c48:	sub	r2, r7, r8
   28c4c:	vmov	d0, r0, r1
   28c50:	add	r0, r2, #22
   28c54:	cmp	r0, #44	; 0x2c
   28c58:	bhi	28c08 <flatcc_json_parser_struct_as_root@@Base+0x620>
   28c5c:	add	r1, pc, #0
   28c60:	ldr	pc, [r1, r0, lsl #2]
   28c64:	andeq	r8, r2, r8, lsl sp
   28c68:	andeq	r8, r2, ip, asr sp
   28c6c:	andeq	r8, r2, r4, ror #26
   28c70:	andeq	r8, r2, ip, ror #26
   28c74:	andeq	r8, r2, r4, ror sp
   28c78:	andeq	r8, r2, ip, ror sp
   28c7c:	andeq	r8, r2, r4, lsl #27
   28c80:	andeq	r8, r2, ip, lsl #27
   28c84:	muleq	r2, r4, sp
   28c88:	muleq	r2, ip, sp
   28c8c:	andeq	r8, r2, r4, lsr #27
   28c90:	andeq	r8, r2, ip, lsr #27
   28c94:			; <UNDEFINED> instruction: 0x00028db4
   28c98:			; <UNDEFINED> instruction: 0x00028dbc
   28c9c:	andeq	r8, r2, r4, asr #27
   28ca0:	andeq	r8, r2, ip, asr #27
   28ca4:	ldrdeq	r8, [r2], -r4
   28ca8:	ldrdeq	r8, [r2], -ip
   28cac:	andeq	r8, r2, r4, ror #27
   28cb0:	andeq	r8, r2, ip, ror #27
   28cb4:	strdeq	r8, [r2], -r4
   28cb8:	strdeq	r8, [r2], -ip
   28cbc:	andeq	r8, r2, r8, lsl #24
   28cc0:	andeq	r8, r2, r8, lsl #28
   28cc4:	andeq	r8, r2, r4, lsl lr
   28cc8:	andeq	r8, r2, r0, lsr #28
   28ccc:	andeq	r8, r2, ip, lsr #28
   28cd0:	andeq	r8, r2, r8, lsr lr
   28cd4:	andeq	r8, r2, r4, asr #28
   28cd8:	andeq	r8, r2, r0, asr lr
   28cdc:	andeq	r8, r2, ip, asr lr
   28ce0:	andeq	r8, r2, r8, ror #28
   28ce4:	andeq	r8, r2, r4, ror lr
   28ce8:	andeq	r8, r2, r0, lsl #29
   28cec:	andeq	r8, r2, ip, lsl #29
   28cf0:	muleq	r2, r8, lr
   28cf4:	andeq	r8, r2, r4, lsr #29
   28cf8:			; <UNDEFINED> instruction: 0x00028eb0
   28cfc:			; <UNDEFINED> instruction: 0x00028ebc
   28d00:	andeq	r8, r2, r8, asr #29
   28d04:	ldrdeq	r8, [r2], -r4
   28d08:	andeq	r8, r2, r0, ror #29
   28d0c:	andeq	r8, r2, ip, ror #29
   28d10:	strdeq	r8, [r2], -r8	; <UNPREDICTABLE>
   28d14:	andeq	r8, r2, r4, lsl #30
   28d18:	vldr	d16, [pc, #656]	; 28fb0 <flatcc_json_parser_struct_as_root@@Base+0x9c8>
   28d1c:	b	28e00 <flatcc_json_parser_struct_as_root@@Base+0x818>
   28d20:	ldr	r2, [fp, #24]
   28d24:	stm	sp, {r2, r9}
   28d28:	mov	r2, r7
   28d2c:	mov	r3, r8
   28d30:	bl	25a38 <grisu3_diy_fp_encode_double@@Base>
   28d34:	cmp	r0, #0
   28d38:	bne	28c0c <flatcc_json_parser_struct_as_root@@Base+0x624>
   28d3c:	add	r1, sp, #12
   28d40:	mov	r0, r6
   28d44:	bl	14f04 <strtod@plt>
   28d48:	vstr	d0, [r9]
   28d4c:	ldr	r0, [sp, #12]
   28d50:	cmp	r0, r4
   28d54:	movcc	r4, r0
   28d58:	b	28c20 <flatcc_json_parser_struct_as_root@@Base+0x638>
   28d5c:	vldr	d16, [pc, #428]	; 28f10 <flatcc_json_parser_struct_as_root@@Base+0x928>
   28d60:	b	28e00 <flatcc_json_parser_struct_as_root@@Base+0x818>
   28d64:	vldr	d16, [pc, #428]	; 28f18 <flatcc_json_parser_struct_as_root@@Base+0x930>
   28d68:	b	28e00 <flatcc_json_parser_struct_as_root@@Base+0x818>
   28d6c:	vldr	d16, [pc, #428]	; 28f20 <flatcc_json_parser_struct_as_root@@Base+0x938>
   28d70:	b	28e00 <flatcc_json_parser_struct_as_root@@Base+0x818>
   28d74:	vldr	d16, [pc, #428]	; 28f28 <flatcc_json_parser_struct_as_root@@Base+0x940>
   28d78:	b	28e00 <flatcc_json_parser_struct_as_root@@Base+0x818>
   28d7c:	vldr	d16, [pc, #428]	; 28f30 <flatcc_json_parser_struct_as_root@@Base+0x948>
   28d80:	b	28e00 <flatcc_json_parser_struct_as_root@@Base+0x818>
   28d84:	vldr	d16, [pc, #428]	; 28f38 <flatcc_json_parser_struct_as_root@@Base+0x950>
   28d88:	b	28e00 <flatcc_json_parser_struct_as_root@@Base+0x818>
   28d8c:	vldr	d16, [pc, #428]	; 28f40 <flatcc_json_parser_struct_as_root@@Base+0x958>
   28d90:	b	28e00 <flatcc_json_parser_struct_as_root@@Base+0x818>
   28d94:	vldr	d16, [pc, #428]	; 28f48 <flatcc_json_parser_struct_as_root@@Base+0x960>
   28d98:	b	28e00 <flatcc_json_parser_struct_as_root@@Base+0x818>
   28d9c:	vldr	d16, [pc, #428]	; 28f50 <flatcc_json_parser_struct_as_root@@Base+0x968>
   28da0:	b	28e00 <flatcc_json_parser_struct_as_root@@Base+0x818>
   28da4:	vldr	d16, [pc, #428]	; 28f58 <flatcc_json_parser_struct_as_root@@Base+0x970>
   28da8:	b	28e00 <flatcc_json_parser_struct_as_root@@Base+0x818>
   28dac:	vldr	d16, [pc, #428]	; 28f60 <flatcc_json_parser_struct_as_root@@Base+0x978>
   28db0:	b	28e00 <flatcc_json_parser_struct_as_root@@Base+0x818>
   28db4:	vldr	d16, [pc, #428]	; 28f68 <flatcc_json_parser_struct_as_root@@Base+0x980>
   28db8:	b	28e00 <flatcc_json_parser_struct_as_root@@Base+0x818>
   28dbc:	vldr	d16, [pc, #428]	; 28f70 <flatcc_json_parser_struct_as_root@@Base+0x988>
   28dc0:	b	28e00 <flatcc_json_parser_struct_as_root@@Base+0x818>
   28dc4:	vldr	d16, [pc, #428]	; 28f78 <flatcc_json_parser_struct_as_root@@Base+0x990>
   28dc8:	b	28e00 <flatcc_json_parser_struct_as_root@@Base+0x818>
   28dcc:	vldr	d16, [pc, #428]	; 28f80 <flatcc_json_parser_struct_as_root@@Base+0x998>
   28dd0:	b	28e00 <flatcc_json_parser_struct_as_root@@Base+0x818>
   28dd4:	vldr	d16, [pc, #428]	; 28f88 <flatcc_json_parser_struct_as_root@@Base+0x9a0>
   28dd8:	b	28e00 <flatcc_json_parser_struct_as_root@@Base+0x818>
   28ddc:	vldr	d16, [pc, #428]	; 28f90 <flatcc_json_parser_struct_as_root@@Base+0x9a8>
   28de0:	b	28e00 <flatcc_json_parser_struct_as_root@@Base+0x818>
   28de4:	vldr	d16, [pc, #428]	; 28f98 <flatcc_json_parser_struct_as_root@@Base+0x9b0>
   28de8:	b	28e00 <flatcc_json_parser_struct_as_root@@Base+0x818>
   28dec:	vldr	d16, [pc, #428]	; 28fa0 <flatcc_json_parser_struct_as_root@@Base+0x9b8>
   28df0:	b	28e00 <flatcc_json_parser_struct_as_root@@Base+0x818>
   28df4:	vldr	d16, [pc, #428]	; 28fa8 <flatcc_json_parser_struct_as_root@@Base+0x9c0>
   28df8:	b	28e00 <flatcc_json_parser_struct_as_root@@Base+0x818>
   28dfc:	vmov.f64	d16, #36	; 0x41200000  10.0
   28e00:	vdiv.f64	d0, d0, d16
   28e04:	b	28c08 <flatcc_json_parser_struct_as_root@@Base+0x620>
   28e08:	vmov.f64	d16, #36	; 0x41200000  10.0
   28e0c:	vmul.f64	d0, d0, d16
   28e10:	b	28c08 <flatcc_json_parser_struct_as_root@@Base+0x620>
   28e14:	vldr	d16, [pc, #396]	; 28fa8 <flatcc_json_parser_struct_as_root@@Base+0x9c0>
   28e18:	vmul.f64	d0, d0, d16
   28e1c:	b	28c08 <flatcc_json_parser_struct_as_root@@Base+0x620>
   28e20:	vldr	d16, [pc, #376]	; 28fa0 <flatcc_json_parser_struct_as_root@@Base+0x9b8>
   28e24:	vmul.f64	d0, d0, d16
   28e28:	b	28c08 <flatcc_json_parser_struct_as_root@@Base+0x620>
   28e2c:	vldr	d16, [pc, #356]	; 28f98 <flatcc_json_parser_struct_as_root@@Base+0x9b0>
   28e30:	vmul.f64	d0, d0, d16
   28e34:	b	28c08 <flatcc_json_parser_struct_as_root@@Base+0x620>
   28e38:	vldr	d16, [pc, #336]	; 28f90 <flatcc_json_parser_struct_as_root@@Base+0x9a8>
   28e3c:	vmul.f64	d0, d0, d16
   28e40:	b	28c08 <flatcc_json_parser_struct_as_root@@Base+0x620>
   28e44:	vldr	d16, [pc, #316]	; 28f88 <flatcc_json_parser_struct_as_root@@Base+0x9a0>
   28e48:	vmul.f64	d0, d0, d16
   28e4c:	b	28c08 <flatcc_json_parser_struct_as_root@@Base+0x620>
   28e50:	vldr	d16, [pc, #296]	; 28f80 <flatcc_json_parser_struct_as_root@@Base+0x998>
   28e54:	vmul.f64	d0, d0, d16
   28e58:	b	28c08 <flatcc_json_parser_struct_as_root@@Base+0x620>
   28e5c:	vldr	d16, [pc, #276]	; 28f78 <flatcc_json_parser_struct_as_root@@Base+0x990>
   28e60:	vmul.f64	d0, d0, d16
   28e64:	b	28c08 <flatcc_json_parser_struct_as_root@@Base+0x620>
   28e68:	vldr	d16, [pc, #256]	; 28f70 <flatcc_json_parser_struct_as_root@@Base+0x988>
   28e6c:	vmul.f64	d0, d0, d16
   28e70:	b	28c08 <flatcc_json_parser_struct_as_root@@Base+0x620>
   28e74:	vldr	d16, [pc, #236]	; 28f68 <flatcc_json_parser_struct_as_root@@Base+0x980>
   28e78:	vmul.f64	d0, d0, d16
   28e7c:	b	28c08 <flatcc_json_parser_struct_as_root@@Base+0x620>
   28e80:	vldr	d16, [pc, #216]	; 28f60 <flatcc_json_parser_struct_as_root@@Base+0x978>
   28e84:	vmul.f64	d0, d0, d16
   28e88:	b	28c08 <flatcc_json_parser_struct_as_root@@Base+0x620>
   28e8c:	vldr	d16, [pc, #196]	; 28f58 <flatcc_json_parser_struct_as_root@@Base+0x970>
   28e90:	vmul.f64	d0, d0, d16
   28e94:	b	28c08 <flatcc_json_parser_struct_as_root@@Base+0x620>
   28e98:	vldr	d16, [pc, #176]	; 28f50 <flatcc_json_parser_struct_as_root@@Base+0x968>
   28e9c:	vmul.f64	d0, d0, d16
   28ea0:	b	28c08 <flatcc_json_parser_struct_as_root@@Base+0x620>
   28ea4:	vldr	d16, [pc, #156]	; 28f48 <flatcc_json_parser_struct_as_root@@Base+0x960>
   28ea8:	vmul.f64	d0, d0, d16
   28eac:	b	28c08 <flatcc_json_parser_struct_as_root@@Base+0x620>
   28eb0:	vldr	d16, [pc, #136]	; 28f40 <flatcc_json_parser_struct_as_root@@Base+0x958>
   28eb4:	vmul.f64	d0, d0, d16
   28eb8:	b	28c08 <flatcc_json_parser_struct_as_root@@Base+0x620>
   28ebc:	vldr	d16, [pc, #116]	; 28f38 <flatcc_json_parser_struct_as_root@@Base+0x950>
   28ec0:	vmul.f64	d0, d0, d16
   28ec4:	b	28c08 <flatcc_json_parser_struct_as_root@@Base+0x620>
   28ec8:	vldr	d16, [pc, #96]	; 28f30 <flatcc_json_parser_struct_as_root@@Base+0x948>
   28ecc:	vmul.f64	d0, d0, d16
   28ed0:	b	28c08 <flatcc_json_parser_struct_as_root@@Base+0x620>
   28ed4:	vldr	d16, [pc, #76]	; 28f28 <flatcc_json_parser_struct_as_root@@Base+0x940>
   28ed8:	vmul.f64	d0, d0, d16
   28edc:	b	28c08 <flatcc_json_parser_struct_as_root@@Base+0x620>
   28ee0:	vldr	d16, [pc, #56]	; 28f20 <flatcc_json_parser_struct_as_root@@Base+0x938>
   28ee4:	vmul.f64	d0, d0, d16
   28ee8:	b	28c08 <flatcc_json_parser_struct_as_root@@Base+0x620>
   28eec:	vldr	d16, [pc, #36]	; 28f18 <flatcc_json_parser_struct_as_root@@Base+0x930>
   28ef0:	vmul.f64	d0, d0, d16
   28ef4:	b	28c08 <flatcc_json_parser_struct_as_root@@Base+0x620>
   28ef8:	vldr	d16, [pc, #16]	; 28f10 <flatcc_json_parser_struct_as_root@@Base+0x928>
   28efc:	vmul.f64	d0, d0, d16
   28f00:	b	28c08 <flatcc_json_parser_struct_as_root@@Base+0x620>
   28f04:	vldr	d16, [pc, #164]	; 28fb0 <flatcc_json_parser_struct_as_root@@Base+0x9c8>
   28f08:	vmul.f64	d0, d0, d16
   28f0c:	b	28c08 <flatcc_json_parser_struct_as_root@@Base+0x620>
   28f10:	usatle	lr, #2, r0, asr #30
   28f14:	strbmi	r1, [fp], #-2788	; 0xfffff51c
   28f18:	ldmvc	r5!, {r6, sl, fp, pc}
   28f1c:	ldrmi	sl, [r5], #-3869	; 0xfffff0e3
   28f20:	addsvs	r3, r1, r0, lsl #26
   28f24:	mvnmi	r5, #228, 16	; 0xe40000
   28f28:	strbvs	ip, [lr, -r0, lsl #16]
   28f2c:			; <UNDEFINED> instruction: 0x43abc16d
   28f30:	ldrbhi	sl, [r8]
   28f34:	cmnmi	r6, #1459617792	; 0x57000000
   28f38:	strbcc	r8, [r0, r0]!
   28f3c:	movtmi	ip, #4985	; 0x1379
   28f40:	ldrtcs	r0, [r4], -r0
   28f44:	movwmi	r6, #52213	; 0xcbf5
   28f48:	cdpne	0, 9, cr0, cr0, cr0, {0}
   28f4c:	sbcsmi	fp, r6, #196, 24	; 0xc400
   28f50:	strb	r0, [r0, #-0]
   28f54:	adcmi	r3, r2, #156	; 0x9c
   28f58:	andge	r0, r0, #0
   28f5c:	rsbmi	r1, sp, #148, 20	; 0x94000
   28f60:	stmda	r0, {}	; <UNPREDICTABLE>
   28f64:	eorsmi	r4, r7, #7733248	; 0x760000
   28f68:	andcs	r0, r0, r0
   28f6c:	andmi	sl, r2, #95	; 0x5f
   28f70:	andeq	r0, r0, r0
   28f74:	bicmi	ip, sp, r5, ror #26
   28f78:	andeq	r0, r0, r0
   28f7c:	orrsmi	sp, r7, r4, lsl #15
   28f80:	andeq	r0, r0, r0
   28f84:	ldrdmi	r1, [r3, #-32]!	; 0xffffffe0
   28f88:	andeq	r0, r0, r0
   28f8c:	smlawbmi	lr, r0, r4, r8
   28f90:	andeq	r0, r0, r0
   28f94:	rscsmi	r6, r8, r0, lsl #20
   28f98:	andeq	r0, r0, r0
   28f9c:	sbcmi	r8, r3, r0, lsl #16
   28fa0:	andeq	r0, r0, r0
   28fa4:	addmi	r4, pc, r0
   28fa8:	andeq	r0, r0, r0
   28fac:	subsmi	r0, r9, r0
   28fb0:			; <UNDEFINED> instruction: 0x064dd592
   28fb4:	strmi	pc, [r0], #207	; 0xcf
   28fb8:	push	{fp, lr}
   28fbc:	mov	fp, sp
   28fc0:	cmp	r3, #0
   28fc4:	beq	28fd4 <flatcc_json_parser_struct_as_root@@Base+0x9ec>
   28fc8:	mov	r3, #8
   28fcc:	bl	25fa0 <flatcc_json_parser_set_error@@Base>
   28fd0:	pop	{fp, pc}
   28fd4:	ldr	ip, [fp, #12]
   28fd8:	ldr	lr, [fp, #8]
   28fdc:	subs	r3, lr, #256	; 0x100
   28fe0:	sbcs	r3, ip, #0
   28fe4:	bcc	28ff4 <flatcc_json_parser_struct_as_root@@Base+0xa0c>
   28fe8:	mov	r3, #7
   28fec:	bl	25fa0 <flatcc_json_parser_set_error@@Base>
   28ff0:	pop	{fp, pc}
   28ff4:	ldr	r0, [fp, #16]
   28ff8:	strb	lr, [r0]
   28ffc:	mov	r0, r1
   29000:	pop	{fp, pc}
   29004:	push	{r4, r5, fp, lr}
   29008:	add	fp, sp, #8
   2900c:	mov	r4, r2
   29010:	mov	r5, r0
   29014:	bl	26e10 <flatcc_json_parser_float@@Base+0x140>
   29018:	mov	r1, r0
   2901c:	mov	r0, r5
   29020:	mov	r2, r4
   29024:	pop	{r4, r5, fp, lr}
   29028:	b	265b4 <flatcc_json_parser_skip_constant@@Base+0x8c>
   2902c:	bx	lr

00029030 <flatcc_json_printer_error_string@@Base>:
   29030:	cmp	r0, #3
   29034:	movwhi	r0, #24014	; 0x5dce
   29038:	movthi	r0, #3
   2903c:	bxhi	lr
   29040:	movw	r1, #31276	; 0x7a2c
   29044:	movt	r1, #3
   29048:	ldr	r0, [r1, r0, lsl #2]
   2904c:	bx	lr

00029050 <flatcc_json_printer_fmt_float@@Base>:
   29050:	vcvt.f64.f32	d0, s0
   29054:	b	29058 <flatcc_json_printer_fmt_float@@Base+0x8>
   29058:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   2905c:	add	fp, sp, #24
   29060:	vpush	{d8}
   29064:	sub	sp, sp, #8
   29068:	mov	r4, r0
   2906c:	vmov.f64	d8, d0
   29070:	bl	2ff98 <flatcc_json_printer_clear@@Base+0x44>
   29074:	cmp	r4, #0
   29078:	beq	292fc <flatcc_json_printer_fmt_float@@Base+0x2ac>
   2907c:	mov	r3, r0
   29080:	mov	r2, r1
   29084:	mov	r0, #-2147483648	; 0x80000000
   29088:	orr	r1, r0, #266338304	; 0xfe00000
   2908c:	orr	r1, r1, #1879048192	; 0x70000000
   29090:	lsl	r7, r2, #1
   29094:	orr	r7, r7, r3, lsr #31
   29098:	mov	r6, #0
   2909c:	subs	r6, r6, r3, lsl #1
   290a0:	sbcs	r1, r1, r7
   290a4:	bcs	290bc <flatcc_json_printer_fmt_float@@Base+0x6c>
   290a8:	movw	r1, #29071	; 0x718f
   290ac:	movt	r1, #3
   290b0:	mov	r0, r4
   290b4:	bl	14f28 <sprintf@plt>
   290b8:	b	292f0 <flatcc_json_printer_fmt_float@@Base+0x2a0>
   290bc:	cmn	r2, #1
   290c0:	ble	290cc <flatcc_json_printer_fmt_float@@Base+0x7c>
   290c4:	mov	r5, r4
   290c8:	b	290e0 <flatcc_json_printer_fmt_float@@Base+0x90>
   290cc:	mov	r1, #45	; 0x2d
   290d0:	vneg.f64	d8, d8
   290d4:	mov	r5, r4
   290d8:	strb	r1, [r5], #1
   290dc:	eor	r2, r2, r0
   290e0:	eor	r0, r2, #267386880	; 0xff00000
   290e4:	eor	r0, r0, #1879048192	; 0x70000000
   290e8:	orrs	r0, r3, r0
   290ec:	beq	29108 <flatcc_json_printer_fmt_float@@Base+0xb8>
   290f0:	orrs	r0, r3, r2
   290f4:	bne	2911c <flatcc_json_printer_fmt_float@@Base+0xcc>
   290f8:	mov	r0, #48	; 0x30
   290fc:	strh	r0, [r5], -r4
   29100:	add	r0, r5, #1
   29104:	b	292f0 <flatcc_json_printer_fmt_float@@Base+0x2a0>
   29108:	movw	r0, #28265	; 0x6e69
   2910c:	movt	r0, #102	; 0x66
   29110:	str	r0, [r5], -r4
   29114:	add	r0, r5, #3
   29118:	b	292f0 <flatcc_json_printer_fmt_float@@Base+0x2a0>
   2911c:	mov	r1, sp
   29120:	add	r2, sp, #4
   29124:	vmov.f64	d0, d8
   29128:	mov	r0, r5
   2912c:	bl	2ffa0 <flatcc_json_printer_clear@@Base+0x4c>
   29130:	cmp	r0, #0
   29134:	beq	29188 <flatcc_json_printer_fmt_float@@Base+0x138>
   29138:	ldr	r9, [sp]
   2913c:	sub	r1, r9, #1
   29140:	cmp	r9, #3
   29144:	movwlt	r1, #1
   29148:	ldr	r0, [sp, #4]
   2914c:	rsb	r7, r0, #0
   29150:	cmp	r1, r7
   29154:	movge	r1, r7
   29158:	cmn	r0, #1
   2915c:	ble	291a8 <flatcc_json_printer_fmt_float@@Base+0x158>
   29160:	cmp	r0, #3
   29164:	bcc	29224 <flatcc_json_printer_fmt_float@@Base+0x1d4>
   29168:	mov	r1, #101	; 0x65
   2916c:	strb	r1, [r5, r9]
   29170:	add	r6, r9, #1
   29174:	add	r1, r5, r6
   29178:	bl	30208 <flatcc_json_printer_clear@@Base+0x2b4>
   2917c:	add	r0, r0, r6
   29180:	str	r0, [sp]
   29184:	b	292e0 <flatcc_json_printer_fmt_float@@Base+0x290>
   29188:	vmov	r2, r3, d8
   2918c:	movw	r1, #29085	; 0x719d
   29190:	movt	r1, #3
   29194:	mov	r0, r5
   29198:	bl	14f28 <sprintf@plt>
   2919c:	sub	r1, r5, r4
   291a0:	add	r0, r1, r0
   291a4:	b	292f0 <flatcc_json_printer_fmt_float@@Base+0x2a0>
   291a8:	cmp	r9, r7
   291ac:	bgt	29278 <flatcc_json_printer_fmt_float@@Base+0x228>
   291b0:	add	r8, r9, r0
   291b4:	cmn	r8, #2
   291b8:	blt	29278 <flatcc_json_printer_fmt_float@@Base+0x228>
   291bc:	rsb	r0, r9, #0
   291c0:	add	r1, r5, r7
   291c4:	add	r0, r1, r0
   291c8:	add	r0, r0, #2
   291cc:	mov	r1, r5
   291d0:	mov	r2, r9
   291d4:	bl	14e44 <memmove@plt>
   291d8:	movw	r0, #11824	; 0x2e30
   291dc:	strh	r0, [r5]
   291e0:	rsb	r1, r8, #2
   291e4:	mov	r0, #2
   291e8:	cmp	r1, #3
   291ec:	blt	29218 <flatcc_json_printer_fmt_float@@Base+0x1c8>
   291f0:	sub	r7, r7, r9
   291f4:	add	r0, r5, #2
   291f8:	mov	r1, #48	; 0x30
   291fc:	mov	r2, r7
   29200:	bl	14eec <memset@plt>
   29204:	mov	r0, #0
   29208:	add	r0, r0, #1
   2920c:	cmp	r7, r0
   29210:	bne	29208 <flatcc_json_printer_fmt_float@@Base+0x1b8>
   29214:	add	r0, r0, #2
   29218:	add	r0, r0, r9
   2921c:	str	r0, [sp]
   29220:	b	292e0 <flatcc_json_printer_fmt_float@@Base+0x290>
   29224:	cmp	r0, #0
   29228:	beq	292e0 <flatcc_json_printer_fmt_float@@Base+0x290>
   2922c:	ldr	r0, [sp, #4]
   29230:	subs	r0, r0, #1
   29234:	str	r0, [sp, #4]
   29238:	blt	292e0 <flatcc_json_printer_fmt_float@@Base+0x290>
   2923c:	ldr	r6, [sp]
   29240:	add	r0, r5, r6
   29244:	ldr	r7, [sp, #4]
   29248:	bic	r1, r7, r7, asr #31
   2924c:	add	r2, r1, #1
   29250:	mov	r1, #48	; 0x30
   29254:	bl	14eec <memset@plt>
   29258:	sub	r0, r7, #1
   2925c:	add	r6, r6, #1
   29260:	cmp	r7, #0
   29264:	mov	r7, r0
   29268:	bgt	29258 <flatcc_json_printer_fmt_float@@Base+0x208>
   2926c:	str	r0, [sp, #4]
   29270:	str	r6, [sp]
   29274:	b	292e0 <flatcc_json_printer_fmt_float@@Base+0x290>
   29278:	cmn	r0, #1
   2927c:	bgt	29168 <flatcc_json_printer_fmt_float@@Base+0x118>
   29280:	cmp	r9, #2
   29284:	blt	29168 <flatcc_json_printer_fmt_float@@Base+0x118>
   29288:	cmp	r1, #1
   2928c:	blt	292b0 <flatcc_json_printer_fmt_float@@Base+0x260>
   29290:	add	r2, r5, r9
   29294:	sub	r3, r2, #1
   29298:	mov	r7, #0
   2929c:	ldrb	r6, [r3, -r7]
   292a0:	strb	r6, [r2, -r7]
   292a4:	add	r7, r7, #1
   292a8:	cmp	r7, r1
   292ac:	blt	2929c <flatcc_json_printer_fmt_float@@Base+0x24c>
   292b0:	add	r2, r9, #1
   292b4:	str	r2, [sp]
   292b8:	sub	r3, r9, r1
   292bc:	mov	r7, #46	; 0x2e
   292c0:	strb	r7, [r5, r3]
   292c4:	adds	r0, r1, r0
   292c8:	str	r0, [sp, #4]
   292cc:	beq	292e0 <flatcc_json_printer_fmt_float@@Base+0x290>
   292d0:	mov	r1, #101	; 0x65
   292d4:	strb	r1, [r5, r2]
   292d8:	add	r6, r9, #2
   292dc:	b	29174 <flatcc_json_printer_fmt_float@@Base+0x124>
   292e0:	ldr	r0, [sp]
   292e4:	mov	r1, #0
   292e8:	strb	r1, [r5, r0]!
   292ec:	sub	r0, r5, r4
   292f0:	sub	sp, fp, #32
   292f4:	vpop	{d8}
   292f8:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   292fc:	movw	r0, #28940	; 0x710c
   29300:	movt	r0, #3
   29304:	movw	r1, #28944	; 0x7110
   29308:	movt	r1, #3
   2930c:	movw	r3, #29031	; 0x7167
   29310:	movt	r3, #3
   29314:	mov	r2, #189	; 0xbd
   29318:	bl	14f40 <__assert_fail@plt>

0002931c <flatcc_json_printer_fmt_double@@Base>:
   2931c:	b	29058 <flatcc_json_printer_fmt_float@@Base+0x8>

00029320 <flatcc_json_printer_fmt_bool@@Base>:
   29320:	cmp	r1, #0
   29324:	movwne	r1, #29300	; 0x7274
   29328:	movtne	r1, #25973	; 0x6575
   2932c:	strne	r1, [r0]
   29330:	movne	r0, #4
   29334:	bxne	lr
   29338:	mov	r1, #101	; 0x65
   2933c:	strb	r1, [r0, #4]
   29340:	movw	r1, #24934	; 0x6166
   29344:	movt	r1, #29548	; 0x736c
   29348:	str	r1, [r0]
   2934c:	mov	r0, #5
   29350:	bx	lr

00029354 <flatcc_json_printer_string@@Base>:
   29354:	b	29358 <flatcc_json_printer_string@@Base+0x4>
   29358:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2935c:	add	fp, sp, #28
   29360:	sub	sp, sp, #4
   29364:	mov	r5, r2
   29368:	mov	r4, r0
   2936c:	mov	r7, r0
   29370:	ldr	r0, [r7, #20]!
   29374:	add	r2, r0, #1
   29378:	str	r2, [r7]
   2937c:	mov	r2, #34	; 0x22
   29380:	strb	r2, [r0]
   29384:	mov	r9, #92	; 0x5c
   29388:	b	29404 <flatcc_json_printer_string@@Base+0xb0>
   2938c:	ldr	r2, [r7]
   29390:	add	r3, r2, #1
   29394:	str	r3, [r7]
   29398:	mov	r3, #117	; 0x75
   2939c:	strb	r3, [r2]
   293a0:	ldr	r2, [r7]
   293a4:	add	r3, r2, #1
   293a8:	str	r3, [r7]
   293ac:	mov	r6, #48	; 0x30
   293b0:	strb	r6, [r2]
   293b4:	ldr	r2, [r7]
   293b8:	add	r3, r2, #1
   293bc:	str	r3, [r7]
   293c0:	strb	r6, [r2]
   293c4:	ldr	r2, [r7]
   293c8:	add	r3, r2, #1
   293cc:	str	r3, [r7]
   293d0:	orr	r1, r6, r1, lsr #4
   293d4:	strb	r1, [r2]
   293d8:	ldr	r1, [r7]
   293dc:	add	r2, r1, #1
   293e0:	str	r2, [r7]
   293e4:	and	r2, sl, #15
   293e8:	cmp	r2, #10
   293ec:	mov	r3, #87	; 0x57
   293f0:	movwcc	r3, #48	; 0x30
   293f4:	add	r2, r3, r2
   293f8:	strb	r2, [r1]
   293fc:	sub	r5, r0, #1
   29400:	add	r1, r8, #1
   29404:	ldrb	sl, [r1]
   29408:	mov	r8, r1
   2940c:	cmp	sl, #32
   29410:	bcc	29430 <flatcc_json_printer_string@@Base+0xdc>
   29414:	uxtb	r0, sl
   29418:	cmp	r0, #34	; 0x22
   2941c:	cmpne	r0, #92	; 0x5c
   29420:	beq	29430 <flatcc_json_printer_string@@Base+0xdc>
   29424:	ldrb	sl, [r8, #1]!
   29428:	cmp	sl, #31
   2942c:	bhi	29414 <flatcc_json_printer_string@@Base+0xc0>
   29430:	sub	r6, r8, r1
   29434:	mov	r0, r4
   29438:	mov	r2, r6
   2943c:	bl	29588 <flatcc_json_printer_write@@Base+0x4>
   29440:	ldr	r1, [r4, #20]
   29444:	add	r0, r1, #1
   29448:	str	r0, [r4, #20]
   2944c:	subs	r0, r5, r6
   29450:	beq	29574 <flatcc_json_printer_string@@Base+0x220>
   29454:	strb	r9, [r1]
   29458:	mvn	r1, #7
   2945c:	uxtab	r2, r1, sl
   29460:	uxtb	r1, sl
   29464:	cmp	r2, #26
   29468:	bhi	294f4 <flatcc_json_printer_string@@Base+0x1a0>
   2946c:	add	r3, pc, #0
   29470:	ldr	pc, [r3, r2, lsl #2]
   29474:	andeq	r9, r2, r0, ror #9
   29478:	andeq	r9, r2, r0, lsl r5
   2947c:	andeq	r9, r2, r4, lsr #10
   29480:	andeq	r9, r2, ip, lsl #7
   29484:	andeq	r9, r2, r8, lsr r5
   29488:	andeq	r9, r2, ip, asr #10
   2948c:	andeq	r9, r2, ip, lsl #7
   29490:	andeq	r9, r2, ip, lsl #7
   29494:	andeq	r9, r2, ip, lsl #7
   29498:	andeq	r9, r2, ip, lsl #7
   2949c:	andeq	r9, r2, ip, lsl #7
   294a0:	andeq	r9, r2, ip, lsl #7
   294a4:	andeq	r9, r2, ip, lsl #7
   294a8:	andeq	r9, r2, ip, lsl #7
   294ac:	andeq	r9, r2, ip, lsl #7
   294b0:	andeq	r9, r2, ip, lsl #7
   294b4:	andeq	r9, r2, ip, lsl #7
   294b8:	andeq	r9, r2, ip, lsl #7
   294bc:	andeq	r9, r2, ip, lsl #7
   294c0:	andeq	r9, r2, ip, lsl #7
   294c4:	andeq	r9, r2, ip, lsl #7
   294c8:	andeq	r9, r2, ip, lsl #7
   294cc:	andeq	r9, r2, ip, lsl #7
   294d0:	andeq	r9, r2, ip, lsl #7
   294d4:	andeq	r9, r2, ip, lsl #7
   294d8:	andeq	r9, r2, ip, lsl #7
   294dc:	andeq	r9, r2, r0, ror #10
   294e0:	ldr	r1, [r7]
   294e4:	add	r2, r1, #1
   294e8:	str	r2, [r7]
   294ec:	mov	r2, #98	; 0x62
   294f0:	b	293f8 <flatcc_json_printer_string@@Base+0xa4>
   294f4:	cmp	r1, #92	; 0x5c
   294f8:	bne	2938c <flatcc_json_printer_string@@Base+0x38>
   294fc:	ldr	r1, [r7]
   29500:	add	r2, r1, #1
   29504:	str	r2, [r7]
   29508:	strb	r9, [r1]
   2950c:	b	293fc <flatcc_json_printer_string@@Base+0xa8>
   29510:	ldr	r1, [r7]
   29514:	add	r2, r1, #1
   29518:	str	r2, [r7]
   2951c:	mov	r2, #116	; 0x74
   29520:	b	293f8 <flatcc_json_printer_string@@Base+0xa4>
   29524:	ldr	r1, [r7]
   29528:	add	r2, r1, #1
   2952c:	str	r2, [r7]
   29530:	mov	r2, #110	; 0x6e
   29534:	b	293f8 <flatcc_json_printer_string@@Base+0xa4>
   29538:	ldr	r1, [r7]
   2953c:	add	r2, r1, #1
   29540:	str	r2, [r7]
   29544:	mov	r2, #102	; 0x66
   29548:	b	293f8 <flatcc_json_printer_string@@Base+0xa4>
   2954c:	ldr	r1, [r7]
   29550:	add	r2, r1, #1
   29554:	str	r2, [r7]
   29558:	mov	r2, #114	; 0x72
   2955c:	b	293f8 <flatcc_json_printer_string@@Base+0xa4>
   29560:	ldr	r1, [r7]
   29564:	add	r2, r1, #1
   29568:	str	r2, [r7]
   2956c:	mov	r2, #34	; 0x22
   29570:	b	293f8 <flatcc_json_printer_string@@Base+0xa4>
   29574:	mov	r0, #34	; 0x22
   29578:	strb	r0, [r1]
   2957c:	sub	sp, fp, #28
   29580:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}

00029584 <flatcc_json_printer_write@@Base>:
   29584:	b	29588 <flatcc_json_printer_write@@Base+0x4>
   29588:	push	{r4, r5, fp, lr}
   2958c:	add	fp, sp, #8
   29590:	mov	r4, r2
   29594:	mov	r5, r0
   29598:	ldr	r2, [r0, #16]
   2959c:	ldr	r0, [r0, #20]
   295a0:	add	r3, r0, r4
   295a4:	cmp	r3, r2
   295a8:	bcs	295c4 <flatcc_json_printer_write@@Base+0x40>
   295ac:	mov	r2, r4
   295b0:	bl	14e5c <memcpy@plt>
   295b4:	ldr	r0, [r5, #20]
   295b8:	add	r0, r0, r4
   295bc:	str	r0, [r5, #20]
   295c0:	pop	{r4, r5, fp, pc}
   295c4:	mov	r0, r5
   295c8:	mov	r2, r4
   295cc:	pop	{r4, r5, fp, lr}
   295d0:	b	30a9c <flatcc_json_printer_clear@@Base+0xb48>

000295d4 <flatcc_json_printer_nl@@Base>:
   295d4:	ldr	r1, [r0, #20]
   295d8:	add	r2, r1, #1
   295dc:	str	r2, [r0, #20]
   295e0:	mov	r2, #10
   295e4:	strb	r2, [r1]
   295e8:	b	295ec <flatcc_json_printer_nl@@Base+0x18>
   295ec:	ldr	r1, [r0, #16]
   295f0:	ldr	r2, [r0, #20]
   295f4:	cmp	r2, r1
   295f8:	bxcc	lr
   295fc:	ldr	r2, [r0, #44]	; 0x2c
   29600:	mov	r1, #0
   29604:	bx	r2

00029608 <flatcc_json_printer_char@@Base>:
   29608:	ldr	r2, [r0, #20]
   2960c:	add	r3, r2, #1
   29610:	str	r3, [r0, #20]
   29614:	strb	r1, [r2]
   29618:	bx	lr

0002961c <flatcc_json_printer_indent@@Base>:
   2961c:	b	29620 <flatcc_json_printer_indent@@Base+0x4>
   29620:	push	{r4, r5, r6, sl, fp, lr}
   29624:	add	fp, sp, #16
   29628:	mov	r4, r0
   2962c:	ldr	r1, [r0, #16]
   29630:	ldr	r0, [r0, #20]
   29634:	ldrb	r2, [r4, #25]
   29638:	ldr	r3, [r4, #32]
   2963c:	mla	r5, r3, r2, r0
   29640:	mul	r6, r3, r2
   29644:	cmp	r5, r1
   29648:	bls	2965c <flatcc_json_printer_indent@@Base+0x40>
   2964c:	mov	r0, r4
   29650:	mov	r1, r6
   29654:	pop	{r4, r5, r6, sl, fp, lr}
   29658:	b	30b44 <flatcc_json_printer_clear@@Base+0xbf0>
   2965c:	mov	r1, #32
   29660:	mov	r2, r6
   29664:	bl	14eec <memset@plt>
   29668:	ldr	r0, [r4, #20]
   2966c:	add	r0, r0, r6
   29670:	str	r0, [r4, #20]
   29674:	pop	{r4, r5, r6, sl, fp, pc}

00029678 <flatcc_json_printer_add_level@@Base>:
   29678:	ldr	r2, [r0, #32]
   2967c:	add	r1, r2, r1
   29680:	str	r1, [r0, #32]
   29684:	bx	lr

00029688 <flatcc_json_printer_get_level@@Base>:
   29688:	ldr	r0, [r0, #32]
   2968c:	bx	lr

00029690 <flatcc_json_printer_uint8@@Base>:
   29690:	push	{r4, sl, fp, lr}
   29694:	add	fp, sp, #8
   29698:	mov	r2, r1
   2969c:	mov	r4, r0
   296a0:	ldr	r1, [r0, #20]
   296a4:	mov	r0, r2
   296a8:	bl	296bc <flatcc_json_printer_uint8@@Base+0x2c>
   296ac:	ldr	r1, [r4, #20]
   296b0:	add	r0, r1, r0
   296b4:	str	r0, [r4, #20]
   296b8:	pop	{r4, sl, fp, pc}
   296bc:	mov	r2, #0
   296c0:	cmp	r0, #100	; 0x64
   296c4:	bcc	29710 <flatcc_json_printer_uint8@@Base+0x80>
   296c8:	strb	r2, [r1, #3]
   296cc:	movw	r2, #34079	; 0x851f
   296d0:	movt	r2, #20971	; 0x51eb
   296d4:	umull	r2, r3, r0, r2
   296d8:	mov	r2, #48	; 0x30
   296dc:	orr	r2, r2, r3, lsr #5
   296e0:	strb	r2, [r1]
   296e4:	lsr	r2, r3, #5
   296e8:	mov	r3, #100	; 0x64
   296ec:	mls	r0, r2, r3, r0
   296f0:	uxtb	r0, r0
   296f4:	movw	r2, #29264	; 0x7250
   296f8:	movt	r2, #3
   296fc:	add	r0, r2, r0, lsl #1
   29700:	ldrh	r0, [r0]
   29704:	strh	r0, [r1, #1]
   29708:	mov	r0, #3
   2970c:	bx	lr
   29710:	cmp	r0, #10
   29714:	strbcc	r2, [r1, #1]
   29718:	addcc	r0, r0, #48	; 0x30
   2971c:	strbcc	r0, [r1]
   29720:	movcc	r0, #1
   29724:	bxcc	lr
   29728:	strb	r2, [r1, #2]
   2972c:	movw	r2, #34079	; 0x851f
   29730:	movt	r2, #20971	; 0x51eb
   29734:	umull	r2, r3, r0, r2
   29738:	lsr	r2, r3, #5
   2973c:	mov	r3, #100	; 0x64
   29740:	mls	r0, r2, r3, r0
   29744:	movw	r2, #29264	; 0x7250
   29748:	movt	r2, #3
   2974c:	add	r0, r2, r0, lsl #1
   29750:	ldrh	r0, [r0]
   29754:	strh	r0, [r1]
   29758:	mov	r0, #2
   2975c:	bx	lr

00029760 <flatcc_json_printer_uint16@@Base>:
   29760:	push	{r4, sl, fp, lr}
   29764:	add	fp, sp, #8
   29768:	mov	r2, r1
   2976c:	mov	r4, r0
   29770:	ldr	r1, [r0, #20]
   29774:	mov	r0, r2
   29778:	bl	2978c <flatcc_json_printer_uint16@@Base+0x2c>
   2977c:	ldr	r1, [r4, #20]
   29780:	add	r0, r1, r0
   29784:	str	r0, [r4, #20]
   29788:	pop	{r4, sl, fp, pc}
   2978c:	push	{fp, lr}
   29790:	mov	fp, sp
   29794:	mov	lr, r0
   29798:	cmp	r0, #1000	; 0x3e8
   2979c:	bcc	297b4 <flatcc_json_printer_uint16@@Base+0x54>
   297a0:	movw	r3, #9999	; 0x270f
   297a4:	mov	r0, #4
   297a8:	cmp	lr, r3
   297ac:	movwhi	r0, #5
   297b0:	b	297d8 <flatcc_json_printer_uint16@@Base+0x78>
   297b4:	cmp	lr, #100	; 0x64
   297b8:	bcc	297cc <flatcc_json_printer_uint16@@Base+0x6c>
   297bc:	mov	r0, #0
   297c0:	strb	r0, [r1, #3]!
   297c4:	mov	r0, #3
   297c8:	b	2987c <flatcc_json_printer_uint16@@Base+0x11c>
   297cc:	mov	r0, #1
   297d0:	cmp	lr, #9
   297d4:	movwhi	r0, #2
   297d8:	mov	r3, #0
   297dc:	strb	r3, [r1, r0]!
   297e0:	tst	r0, #1
   297e4:	bne	2982c <flatcc_json_printer_uint16@@Base+0xcc>
   297e8:	cmp	r0, #2
   297ec:	beq	298bc <flatcc_json_printer_uint16@@Base+0x15c>
   297f0:	cmp	r0, #4
   297f4:	popne	{fp, pc}
   297f8:	movw	r2, #34079	; 0x851f
   297fc:	movt	r2, #20971	; 0x51eb
   29800:	umull	r2, r3, lr, r2
   29804:	lsr	r3, r3, #5
   29808:	mov	r2, #100	; 0x64
   2980c:	mls	r2, r3, r2, lr
   29810:	uxth	ip, r2
   29814:	movw	r2, #29264	; 0x7250
   29818:	movt	r2, #3
   2981c:	add	r2, r2, ip, lsl #1
   29820:	ldrh	r2, [r2]
   29824:	strh	r2, [r1, #-2]!
   29828:	b	298c0 <flatcc_json_printer_uint16@@Base+0x160>
   2982c:	cmp	r0, #1
   29830:	beq	298f4 <flatcc_json_printer_uint16@@Base+0x194>
   29834:	cmp	r0, #3
   29838:	beq	2987c <flatcc_json_printer_uint16@@Base+0x11c>
   2983c:	cmp	r0, #5
   29840:	bne	298f0 <flatcc_json_printer_uint16@@Base+0x190>
   29844:	movw	r0, #34079	; 0x851f
   29848:	movt	r0, #20971	; 0x51eb
   2984c:	umull	r0, r3, lr, r0
   29850:	lsr	r3, r3, #5
   29854:	mov	r0, #100	; 0x64
   29858:	mls	r0, r3, r0, lr
   2985c:	uxth	r0, r0
   29860:	movw	r2, #29264	; 0x7250
   29864:	movt	r2, #3
   29868:	add	r0, r2, r0, lsl #1
   2986c:	ldrh	r0, [r0]
   29870:	strh	r0, [r1, #-2]!
   29874:	mov	r0, #5
   29878:	mov	lr, r3
   2987c:	uxth	ip, lr
   29880:	movw	r3, #34079	; 0x851f
   29884:	movt	r3, #20971	; 0x51eb
   29888:	umull	r3, r2, ip, r3
   2988c:	lsr	r3, r2, #5
   29890:	mov	r2, #100	; 0x64
   29894:	mls	r2, r3, r2, lr
   29898:	uxth	ip, r2
   2989c:	movw	r2, #29264	; 0x7250
   298a0:	movt	r2, #3
   298a4:	add	r2, r2, ip, lsl #1
   298a8:	ldrh	r2, [r2]
   298ac:	strh	r2, [r1, #-2]!
   298b0:	add	r2, r3, #48	; 0x30
   298b4:	strb	r2, [r1, #-1]
   298b8:	pop	{fp, pc}
   298bc:	mov	r3, lr
   298c0:	uxth	ip, r3
   298c4:	movw	r3, #34079	; 0x851f
   298c8:	movt	r3, #20971	; 0x51eb
   298cc:	umull	r3, r2, ip, r3
   298d0:	lsr	r2, r2, #5
   298d4:	mov	r3, #100	; 0x64
   298d8:	mls	r2, r2, r3, ip
   298dc:	movw	r3, #29264	; 0x7250
   298e0:	movt	r3, #3
   298e4:	add	r2, r3, r2, lsl #1
   298e8:	ldrh	r2, [r2]
   298ec:	strh	r2, [r1, #-2]
   298f0:	pop	{fp, pc}
   298f4:	mov	r3, lr
   298f8:	b	298b0 <flatcc_json_printer_uint16@@Base+0x150>

000298fc <flatcc_json_printer_uint32@@Base>:
   298fc:	push	{r4, sl, fp, lr}
   29900:	add	fp, sp, #8
   29904:	mov	r2, r1
   29908:	mov	r4, r0
   2990c:	ldr	r1, [r0, #20]
   29910:	mov	r0, r2
   29914:	bl	29928 <flatcc_json_printer_uint32@@Base+0x2c>
   29918:	ldr	r1, [r4, #20]
   2991c:	add	r0, r1, r0
   29920:	str	r0, [r4, #20]
   29924:	pop	{r4, sl, fp, pc}
   29928:	push	{fp, lr}
   2992c:	mov	fp, sp
   29930:	mov	lr, r0
   29934:	movw	r0, #10000	; 0x2710
   29938:	cmp	lr, r0
   2993c:	bcc	299a0 <flatcc_json_printer_uint32@@Base+0xa4>
   29940:	movw	r0, #38528	; 0x9680
   29944:	movt	r0, #152	; 0x98
   29948:	cmp	lr, r0
   2994c:	bcc	299bc <flatcc_json_printer_uint32@@Base+0xc0>
   29950:	movw	r0, #51712	; 0xca00
   29954:	movt	r0, #15258	; 0x3b9a
   29958:	cmp	lr, r0
   2995c:	bcc	299ec <flatcc_json_printer_uint32@@Base+0xf0>
   29960:	movw	r0, #34079	; 0x851f
   29964:	movt	r0, #20971	; 0x51eb
   29968:	umull	r0, r3, lr, r0
   2996c:	lsr	r3, r3, #5
   29970:	mov	r0, #100	; 0x64
   29974:	mls	r0, r3, r0, lr
   29978:	movw	r2, #29264	; 0x7250
   2997c:	movt	r2, #3
   29980:	add	r0, r2, r0, lsl #1
   29984:	ldrh	r0, [r0]
   29988:	strh	r0, [r1, #8]!
   2998c:	mov	r0, #0
   29990:	strb	r0, [r1, #2]
   29994:	mov	r0, #10
   29998:	mov	lr, r3
   2999c:	b	29a58 <flatcc_json_printer_uint32@@Base+0x15c>
   299a0:	cmp	lr, #100	; 0x64
   299a4:	bcc	299dc <flatcc_json_printer_uint32@@Base+0xe0>
   299a8:	lsr	r3, lr, #3
   299ac:	mov	r0, #3
   299b0:	cmp	r3, #124	; 0x7c
   299b4:	movwhi	r0, #4
   299b8:	b	29a18 <flatcc_json_printer_uint32@@Base+0x11c>
   299bc:	movw	r0, #16960	; 0x4240
   299c0:	movt	r0, #15
   299c4:	cmp	lr, r0
   299c8:	bcc	29a04 <flatcc_json_printer_uint32@@Base+0x108>
   299cc:	mov	r0, #0
   299d0:	strb	r0, [r1, #7]!
   299d4:	mov	r0, #7
   299d8:	b	29b84 <flatcc_json_printer_uint32@@Base+0x288>
   299dc:	mov	r0, #1
   299e0:	cmp	lr, #9
   299e4:	movwhi	r0, #2
   299e8:	b	29a18 <flatcc_json_printer_uint32@@Base+0x11c>
   299ec:	movw	r3, #57599	; 0xe0ff
   299f0:	movt	r3, #1525	; 0x5f5
   299f4:	mov	r0, #8
   299f8:	cmp	lr, r3
   299fc:	movwhi	r0, #9
   29a00:	b	29a18 <flatcc_json_printer_uint32@@Base+0x11c>
   29a04:	movw	r3, #34463	; 0x869f
   29a08:	movt	r3, #1
   29a0c:	mov	r0, #5
   29a10:	cmp	lr, r3
   29a14:	movwhi	r0, #6
   29a18:	mov	r3, #0
   29a1c:	strb	r3, [r1, r0]!
   29a20:	tst	r0, #1
   29a24:	bne	29b18 <flatcc_json_printer_uint32@@Base+0x21c>
   29a28:	sub	r3, r0, #2
   29a2c:	cmp	r3, #6
   29a30:	bhi	29c1c <flatcc_json_printer_uint32@@Base+0x320>
   29a34:	add	r2, pc, #0
   29a38:	ldr	pc, [r2, r3, lsl #2]
   29a3c:	andeq	r9, r2, r8, ror #21
   29a40:	andeq	r9, r2, ip, lsl ip
   29a44:			; <UNDEFINED> instruction: 0x00029ab8
   29a48:	andeq	r9, r2, ip, lsl ip
   29a4c:	andeq	r9, r2, r8, lsl #21
   29a50:	andeq	r9, r2, ip, lsl ip
   29a54:	andeq	r9, r2, r8, asr sl
   29a58:	movw	r2, #34079	; 0x851f
   29a5c:	movt	r2, #20971	; 0x51eb
   29a60:	umull	r2, r3, lr, r2
   29a64:	lsr	r2, r3, #5
   29a68:	mov	r3, #100	; 0x64
   29a6c:	mls	ip, r2, r3, lr
   29a70:	movw	r3, #29264	; 0x7250
   29a74:	movt	r3, #3
   29a78:	add	r3, r3, ip, lsl #1
   29a7c:	ldrh	r3, [r3]
   29a80:	strh	r3, [r1, #-2]!
   29a84:	mov	lr, r2
   29a88:	movw	r2, #34079	; 0x851f
   29a8c:	movt	r2, #20971	; 0x51eb
   29a90:	umull	r2, r3, lr, r2
   29a94:	lsr	r2, r3, #5
   29a98:	mov	r3, #100	; 0x64
   29a9c:	mls	ip, r2, r3, lr
   29aa0:	movw	r3, #29264	; 0x7250
   29aa4:	movt	r3, #3
   29aa8:	add	r3, r3, ip, lsl #1
   29aac:	ldrh	r3, [r3]
   29ab0:	strh	r3, [r1, #-2]!
   29ab4:	mov	lr, r2
   29ab8:	movw	r2, #34079	; 0x851f
   29abc:	movt	r2, #20971	; 0x51eb
   29ac0:	umull	r2, r3, lr, r2
   29ac4:	lsr	r2, r3, #5
   29ac8:	mov	r3, #100	; 0x64
   29acc:	mls	ip, r2, r3, lr
   29ad0:	movw	r3, #29264	; 0x7250
   29ad4:	movt	r3, #3
   29ad8:	add	r3, r3, ip, lsl #1
   29adc:	ldrh	r3, [r3]
   29ae0:	strh	r3, [r1, #-2]!
   29ae4:	mov	lr, r2
   29ae8:	movw	r2, #34079	; 0x851f
   29aec:	movt	r2, #20971	; 0x51eb
   29af0:	umull	r2, r3, lr, r2
   29af4:	lsr	r2, r3, #5
   29af8:	mov	r3, #100	; 0x64
   29afc:	mls	r2, r2, r3, lr
   29b00:	movw	r3, #29264	; 0x7250
   29b04:	movt	r3, #3
   29b08:	add	r2, r3, r2, lsl #1
   29b0c:	ldrh	r2, [r2]
   29b10:	strh	r2, [r1, #-2]
   29b14:	pop	{fp, pc}
   29b18:	sub	ip, r0, #1
   29b1c:	cmp	ip, #8
   29b20:	bhi	29c1c <flatcc_json_printer_uint32@@Base+0x320>
   29b24:	add	r3, pc, #0
   29b28:	ldr	pc, [r3, ip, lsl #2]
   29b2c:	andeq	r9, r2, r4, lsl ip
   29b30:	andeq	r9, r2, ip, lsl ip
   29b34:	andeq	r9, r2, r4, ror #23
   29b38:	andeq	r9, r2, ip, lsl ip
   29b3c:			; <UNDEFINED> instruction: 0x00029bb4
   29b40:	andeq	r9, r2, ip, lsl ip
   29b44:	andeq	r9, r2, r4, lsl #23
   29b48:	andeq	r9, r2, ip, lsl ip
   29b4c:	andeq	r9, r2, r0, asr fp
   29b50:	movw	r0, #34079	; 0x851f
   29b54:	movt	r0, #20971	; 0x51eb
   29b58:	umull	r0, r3, lr, r0
   29b5c:	lsr	r3, r3, #5
   29b60:	mov	r0, #100	; 0x64
   29b64:	mls	r0, r3, r0, lr
   29b68:	movw	r2, #29264	; 0x7250
   29b6c:	movt	r2, #3
   29b70:	add	r0, r2, r0, lsl #1
   29b74:	ldrh	r0, [r0]
   29b78:	strh	r0, [r1, #-2]!
   29b7c:	mov	r0, #9
   29b80:	mov	lr, r3
   29b84:	movw	r3, #34079	; 0x851f
   29b88:	movt	r3, #20971	; 0x51eb
   29b8c:	umull	r3, r2, lr, r3
   29b90:	lsr	r2, r2, #5
   29b94:	mov	r3, #100	; 0x64
   29b98:	mls	ip, r2, r3, lr
   29b9c:	movw	r3, #29264	; 0x7250
   29ba0:	movt	r3, #3
   29ba4:	add	r3, r3, ip, lsl #1
   29ba8:	ldrh	r3, [r3]
   29bac:	strh	r3, [r1, #-2]!
   29bb0:	mov	lr, r2
   29bb4:	movw	r2, #34079	; 0x851f
   29bb8:	movt	r2, #20971	; 0x51eb
   29bbc:	umull	r2, r3, lr, r2
   29bc0:	lsr	r2, r3, #5
   29bc4:	mov	r3, #100	; 0x64
   29bc8:	mls	ip, r2, r3, lr
   29bcc:	movw	r3, #29264	; 0x7250
   29bd0:	movt	r3, #3
   29bd4:	add	r3, r3, ip, lsl #1
   29bd8:	ldrh	r3, [r3]
   29bdc:	strh	r3, [r1, #-2]!
   29be0:	mov	lr, r2
   29be4:	movw	r2, #34079	; 0x851f
   29be8:	movt	r2, #20971	; 0x51eb
   29bec:	umull	r2, r3, lr, r2
   29bf0:	lsr	r2, r3, #5
   29bf4:	mov	r3, #100	; 0x64
   29bf8:	mls	ip, r2, r3, lr
   29bfc:	movw	r3, #29264	; 0x7250
   29c00:	movt	r3, #3
   29c04:	add	r3, r3, ip, lsl #1
   29c08:	ldrh	r3, [r3]
   29c0c:	strh	r3, [r1, #-2]!
   29c10:	mov	lr, r2
   29c14:	add	r2, lr, #48	; 0x30
   29c18:	strb	r2, [r1, #-1]
   29c1c:	pop	{fp, pc}

00029c20 <flatcc_json_printer_uint64@@Base>:
   29c20:	push	{r4, sl, fp, lr}
   29c24:	add	fp, sp, #8
   29c28:	mov	r1, r3
   29c2c:	mov	r3, r2
   29c30:	mov	r4, r0
   29c34:	ldr	r2, [r0, #20]
   29c38:	mov	r0, r3
   29c3c:	bl	29c50 <flatcc_json_printer_uint64@@Base+0x30>
   29c40:	ldr	r1, [r4, #20]
   29c44:	add	r0, r1, r0
   29c48:	str	r0, [r4, #20]
   29c4c:	pop	{r4, sl, fp, pc}
   29c50:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   29c54:	add	fp, sp, #28
   29c58:	sub	sp, sp, #4
   29c5c:	mov	r4, r2
   29c60:	mov	r7, r0
   29c64:	movw	r0, #51711	; 0xc9ff
   29c68:	movt	r0, #15258	; 0x3b9a
   29c6c:	subs	r0, r0, r7
   29c70:	rscs	r0, r1, #0
   29c74:	bcc	29c8c <flatcc_json_printer_uint64@@Base+0x6c>
   29c78:	mov	r0, r7
   29c7c:	mov	r1, r4
   29c80:	sub	sp, fp, #28
   29c84:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   29c88:	b	29928 <flatcc_json_printer_uint32@@Base+0x2c>
   29c8c:	mov	r6, r1
   29c90:	movw	r0, #2328	; 0x918
   29c94:	movw	r1, #40960	; 0xa000
   29c98:	movt	r1, #20082	; 0x4e72
   29c9c:	subs	r1, r7, r1
   29ca0:	sbcs	r0, r6, r0
   29ca4:	movw	r9, #29264	; 0x7250
   29ca8:	movt	r9, #3
   29cac:	bcc	29d0c <flatcc_json_printer_uint64@@Base+0xec>
   29cb0:	movw	r0, #34546	; 0x86f2
   29cb4:	movt	r0, #35	; 0x23
   29cb8:	movw	r1, #0
   29cbc:	movt	r1, #28609	; 0x6fc1
   29cc0:	subs	r1, r7, r1
   29cc4:	sbcs	r0, r6, r0
   29cc8:	bcc	29d3c <flatcc_json_printer_uint64@@Base+0x11c>
   29ccc:	movw	r0, #46771	; 0xb6b3
   29cd0:	movt	r0, #3552	; 0xde0
   29cd4:	movw	r1, #0
   29cd8:	movt	r1, #42852	; 0xa764
   29cdc:	subs	r1, r7, r1
   29ce0:	sbcs	r0, r6, r0
   29ce4:	bcc	29d84 <flatcc_json_printer_uint64@@Base+0x164>
   29ce8:	mov	r8, #19
   29cec:	movw	r0, #8964	; 0x2304
   29cf0:	movt	r0, #35527	; 0x8ac7
   29cf4:	movw	r1, #65535	; 0xffff
   29cf8:	movt	r1, #35303	; 0x89e7
   29cfc:	subs	r1, r1, r7
   29d00:	sbcs	r0, r0, r6
   29d04:	movwcc	r8, #20
   29d08:	b	29dc4 <flatcc_json_printer_uint64@@Base+0x1a4>
   29d0c:	movw	r0, #59392	; 0xe800
   29d10:	movt	r0, #18550	; 0x4876
   29d14:	subs	r0, r7, r0
   29d18:	sbcs	r0, r6, #23
   29d1c:	bcc	29d68 <flatcc_json_printer_uint64@@Base+0x148>
   29d20:	mov	r8, #12
   29d24:	movw	r0, #4095	; 0xfff
   29d28:	movt	r0, #54437	; 0xd4a5
   29d2c:	subs	r0, r0, r7
   29d30:	rscs	r0, r6, #232	; 0xe8
   29d34:	movwcc	r8, #13
   29d38:	b	29dc4 <flatcc_json_printer_uint64@@Base+0x1a4>
   29d3c:	movw	r0, #36222	; 0x8d7e
   29d40:	movt	r0, #3
   29d44:	movw	r1, #32768	; 0x8000
   29d48:	movt	r1, #42182	; 0xa4c6
   29d4c:	subs	r1, r7, r1
   29d50:	sbcs	r0, r6, r0
   29d54:	bcc	29da8 <flatcc_json_printer_uint64@@Base+0x188>
   29d58:	mov	r0, #0
   29d5c:	strb	r0, [r4, #16]!
   29d60:	mov	r8, #16
   29d64:	b	29e74 <flatcc_json_printer_uint64@@Base+0x254>
   29d68:	mov	r8, #10
   29d6c:	movw	r0, #58367	; 0xe3ff
   29d70:	movt	r0, #21515	; 0x540b
   29d74:	subs	r0, r0, r7
   29d78:	rscs	r0, r6, #2
   29d7c:	movwcc	r8, #11
   29d80:	b	29dc4 <flatcc_json_printer_uint64@@Base+0x1a4>
   29d84:	mov	r8, #17
   29d88:	movw	r0, #17784	; 0x4578
   29d8c:	movt	r0, #355	; 0x163
   29d90:	movw	r1, #65535	; 0xffff
   29d94:	movt	r1, #23945	; 0x5d89
   29d98:	subs	r1, r1, r7
   29d9c:	sbcs	r0, r0, r6
   29da0:	movwcc	r8, #18
   29da4:	b	29dc4 <flatcc_json_printer_uint64@@Base+0x1a4>
   29da8:	mov	r8, #14
   29dac:	movw	r0, #23283	; 0x5af3
   29db0:	movw	r1, #16383	; 0x3fff
   29db4:	movt	r1, #4218	; 0x107a
   29db8:	subs	r1, r1, r7
   29dbc:	sbcs	r0, r0, r6
   29dc0:	movwcc	r8, #15
   29dc4:	mov	r0, #0
   29dc8:	strb	r0, [r4, r8]!
   29dcc:	tst	r8, #1
   29dd0:	bne	29f38 <flatcc_json_printer_uint64@@Base+0x318>
   29dd4:	sub	r0, r8, #10
   29dd8:	cmp	r0, #10
   29ddc:	bhi	2a084 <flatcc_json_printer_uint64@@Base+0x464>
   29de0:	add	r1, pc, #0
   29de4:	ldr	pc, [r1, r0, lsl #2]
   29de8:	andeq	r9, r2, r4, lsl #30
   29dec:	andeq	sl, r2, r4, lsl #1
   29df0:	ldrdeq	r9, [r2], -r4
   29df4:	andeq	sl, r2, r4, lsl #1
   29df8:	andeq	r9, r2, r4, lsr #29
   29dfc:	andeq	sl, r2, r4, lsl #1
   29e00:	andeq	r9, r2, r4, ror lr
   29e04:	andeq	sl, r2, r4, lsl #1
   29e08:	andeq	r9, r2, r4, asr #28
   29e0c:	andeq	sl, r2, r4, lsl #1
   29e10:	andeq	r9, r2, r4, lsl lr
   29e14:	mov	r5, #100	; 0x64
   29e18:	mov	r0, r7
   29e1c:	mov	r1, r6
   29e20:	mov	r2, #100	; 0x64
   29e24:	mov	r3, #0
   29e28:	bl	313f8 <flatcc_json_printer_clear@@Base+0x14a4>
   29e2c:	mov	r6, r1
   29e30:	mls	r1, r0, r5, r7
   29e34:	add	r1, r9, r1, lsl #1
   29e38:	ldrh	r1, [r1]
   29e3c:	strh	r1, [r4, #-2]!
   29e40:	mov	r7, r0
   29e44:	mov	r5, #100	; 0x64
   29e48:	mov	r0, r7
   29e4c:	mov	r1, r6
   29e50:	mov	r2, #100	; 0x64
   29e54:	mov	r3, #0
   29e58:	bl	313f8 <flatcc_json_printer_clear@@Base+0x14a4>
   29e5c:	mov	r6, r1
   29e60:	mls	r1, r0, r5, r7
   29e64:	add	r1, r9, r1, lsl #1
   29e68:	ldrh	r1, [r1]
   29e6c:	strh	r1, [r4, #-2]!
   29e70:	mov	r7, r0
   29e74:	mov	r5, #100	; 0x64
   29e78:	mov	r0, r7
   29e7c:	mov	r1, r6
   29e80:	mov	r2, #100	; 0x64
   29e84:	mov	r3, #0
   29e88:	bl	313f8 <flatcc_json_printer_clear@@Base+0x14a4>
   29e8c:	mov	r6, r1
   29e90:	mls	r1, r0, r5, r7
   29e94:	add	r1, r9, r1, lsl #1
   29e98:	ldrh	r1, [r1]
   29e9c:	strh	r1, [r4, #-2]!
   29ea0:	mov	r7, r0
   29ea4:	mov	r5, #100	; 0x64
   29ea8:	mov	r0, r7
   29eac:	mov	r1, r6
   29eb0:	mov	r2, #100	; 0x64
   29eb4:	mov	r3, #0
   29eb8:	bl	313f8 <flatcc_json_printer_clear@@Base+0x14a4>
   29ebc:	mov	r6, r1
   29ec0:	mls	r1, r0, r5, r7
   29ec4:	add	r1, r9, r1, lsl #1
   29ec8:	ldrh	r1, [r1]
   29ecc:	strh	r1, [r4, #-2]!
   29ed0:	mov	r7, r0
   29ed4:	mov	r5, #100	; 0x64
   29ed8:	mov	r0, r7
   29edc:	mov	r1, r6
   29ee0:	mov	r2, #100	; 0x64
   29ee4:	mov	r3, #0
   29ee8:	bl	313f8 <flatcc_json_printer_clear@@Base+0x14a4>
   29eec:	mov	r6, r1
   29ef0:	mls	r1, r0, r5, r7
   29ef4:	add	r1, r9, r1, lsl #1
   29ef8:	ldrh	r1, [r1]
   29efc:	strh	r1, [r4, #-2]!
   29f00:	mov	r7, r0
   29f04:	mov	r5, #100	; 0x64
   29f08:	mov	r0, r7
   29f0c:	mov	r1, r6
   29f10:	mov	r2, #100	; 0x64
   29f14:	mov	r3, #0
   29f18:	bl	313f8 <flatcc_json_printer_clear@@Base+0x14a4>
   29f1c:	mov	r6, r1
   29f20:	mls	r1, r0, r5, r7
   29f24:	add	r1, r9, r1, lsl #1
   29f28:	ldrh	r1, [r1]
   29f2c:	strh	r1, [r4, #-2]!
   29f30:	mov	r7, r0
   29f34:	b	2a084 <flatcc_json_printer_uint64@@Base+0x464>
   29f38:	sub	r0, r8, #11
   29f3c:	cmp	r0, #8
   29f40:	bhi	2a084 <flatcc_json_printer_uint64@@Base+0x464>
   29f44:	add	r1, pc, #0
   29f48:	ldr	pc, [r1, r0, lsl #2]
   29f4c:	andeq	sl, r2, r8, lsr #32
   29f50:	andeq	sl, r2, r4, lsl #1
   29f54:	strdeq	r9, [r2], -r8
   29f58:	andeq	sl, r2, r4, lsl #1
   29f5c:	andeq	r9, r2, r8, asr #31
   29f60:	andeq	sl, r2, r4, lsl #1
   29f64:	muleq	r2, r8, pc	; <UNPREDICTABLE>
   29f68:	andeq	sl, r2, r4, lsl #1
   29f6c:	andeq	r9, r2, r0, ror pc
   29f70:	mov	r0, r7
   29f74:	mov	r1, r6
   29f78:	mov	r2, #100	; 0x64
   29f7c:	mov	r3, #0
   29f80:	bl	313f8 <flatcc_json_printer_clear@@Base+0x14a4>
   29f84:	mov	r7, r0
   29f88:	mov	r6, r1
   29f8c:	add	r0, r9, r2, lsl #1
   29f90:	ldrh	r0, [r0]
   29f94:	strh	r0, [r4, #-2]!
   29f98:	mov	r5, #100	; 0x64
   29f9c:	mov	r0, r7
   29fa0:	mov	r1, r6
   29fa4:	mov	r2, #100	; 0x64
   29fa8:	mov	r3, #0
   29fac:	bl	313f8 <flatcc_json_printer_clear@@Base+0x14a4>
   29fb0:	mov	r6, r1
   29fb4:	mls	r1, r0, r5, r7
   29fb8:	add	r1, r9, r1, lsl #1
   29fbc:	ldrh	r1, [r1]
   29fc0:	strh	r1, [r4, #-2]!
   29fc4:	mov	r7, r0
   29fc8:	mov	r5, #100	; 0x64
   29fcc:	mov	r0, r7
   29fd0:	mov	r1, r6
   29fd4:	mov	r2, #100	; 0x64
   29fd8:	mov	r3, #0
   29fdc:	bl	313f8 <flatcc_json_printer_clear@@Base+0x14a4>
   29fe0:	mov	r6, r1
   29fe4:	mls	r1, r0, r5, r7
   29fe8:	add	r1, r9, r1, lsl #1
   29fec:	ldrh	r1, [r1]
   29ff0:	strh	r1, [r4, #-2]!
   29ff4:	mov	r7, r0
   29ff8:	mov	r5, #100	; 0x64
   29ffc:	mov	r0, r7
   2a000:	mov	r1, r6
   2a004:	mov	r2, #100	; 0x64
   2a008:	mov	r3, #0
   2a00c:	bl	313f8 <flatcc_json_printer_clear@@Base+0x14a4>
   2a010:	mov	r6, r1
   2a014:	mls	r1, r0, r5, r7
   2a018:	add	r1, r9, r1, lsl #1
   2a01c:	ldrh	r1, [r1]
   2a020:	strh	r1, [r4, #-2]!
   2a024:	mov	r7, r0
   2a028:	mov	sl, #100	; 0x64
   2a02c:	mov	r0, r7
   2a030:	mov	r1, r6
   2a034:	mov	r2, #100	; 0x64
   2a038:	mov	r3, #0
   2a03c:	bl	313f8 <flatcc_json_printer_clear@@Base+0x14a4>
   2a040:	mov	r5, r0
   2a044:	mov	r2, #10
   2a048:	mov	r3, #0
   2a04c:	bl	313f8 <flatcc_json_printer_clear@@Base+0x14a4>
   2a050:	orr	r0, r2, #48	; 0x30
   2a054:	strb	r0, [r4, #-3]!
   2a058:	mls	r0, r5, sl, r7
   2a05c:	add	r0, r9, r0, lsl #1
   2a060:	ldrh	r0, [r0]
   2a064:	strh	r0, [r4, #1]
   2a068:	mov	r0, r7
   2a06c:	mov	r1, r6
   2a070:	mov	r2, #1000	; 0x3e8
   2a074:	mov	r3, #0
   2a078:	bl	313f8 <flatcc_json_printer_clear@@Base+0x14a4>
   2a07c:	mov	r7, r0
   2a080:	mov	r6, r1
   2a084:	mov	r5, #100	; 0x64
   2a088:	mov	r0, r7
   2a08c:	mov	r1, r6
   2a090:	mov	r2, #100	; 0x64
   2a094:	mov	r3, #0
   2a098:	bl	313f8 <flatcc_json_printer_clear@@Base+0x14a4>
   2a09c:	mls	r2, r0, r5, r7
   2a0a0:	add	r2, r9, r2, lsl #1
   2a0a4:	ldrh	r2, [r2]
   2a0a8:	strh	r2, [r4, #-2]
   2a0ac:	mov	r2, #100	; 0x64
   2a0b0:	mov	r3, #0
   2a0b4:	bl	313f8 <flatcc_json_printer_clear@@Base+0x14a4>
   2a0b8:	add	r0, r9, r2, lsl #1
   2a0bc:	ldrh	r0, [r0]
   2a0c0:	strh	r0, [r4, #-4]
   2a0c4:	mov	r0, r7
   2a0c8:	mov	r1, r6
   2a0cc:	movw	r2, #10000	; 0x2710
   2a0d0:	mov	r3, #0
   2a0d4:	bl	313f8 <flatcc_json_printer_clear@@Base+0x14a4>
   2a0d8:	mov	r2, #100	; 0x64
   2a0dc:	mov	r3, #0
   2a0e0:	bl	313f8 <flatcc_json_printer_clear@@Base+0x14a4>
   2a0e4:	add	r0, r9, r2, lsl #1
   2a0e8:	ldrh	r0, [r0]
   2a0ec:	strh	r0, [r4, #-6]
   2a0f0:	movw	r2, #16960	; 0x4240
   2a0f4:	movt	r2, #15
   2a0f8:	mov	r0, r7
   2a0fc:	mov	r1, r6
   2a100:	mov	r3, #0
   2a104:	bl	313f8 <flatcc_json_printer_clear@@Base+0x14a4>
   2a108:	mov	r2, #100	; 0x64
   2a10c:	mov	r3, #0
   2a110:	bl	313f8 <flatcc_json_printer_clear@@Base+0x14a4>
   2a114:	add	r0, r9, r2, lsl #1
   2a118:	ldrh	r0, [r0]
   2a11c:	strh	r0, [r4, #-8]
   2a120:	mov	r0, r8
   2a124:	sub	sp, fp, #28
   2a128:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}

0002a12c <flatcc_json_printer_int8@@Base>:
   2a12c:	push	{r4, sl, fp, lr}
   2a130:	add	fp, sp, #8
   2a134:	mov	r2, r1
   2a138:	mov	r4, r0
   2a13c:	ldr	r1, [r0, #20]
   2a140:	mov	r0, r2
   2a144:	bl	2a158 <flatcc_json_printer_int8@@Base+0x2c>
   2a148:	ldr	r1, [r4, #20]
   2a14c:	add	r0, r1, r0
   2a150:	str	r0, [r4, #20]
   2a154:	pop	{r4, sl, fp, pc}
   2a158:	push	{r4, sl, fp, lr}
   2a15c:	add	fp, sp, #8
   2a160:	uxtb	r2, r0
   2a164:	lsr	r4, r2, #7
   2a168:	cmn	r0, #1
   2a16c:	movle	r2, #45	; 0x2d
   2a170:	strble	r2, [r1], #1
   2a174:	rsble	r0, r0, #0
   2a178:	uxtb	r0, r0
   2a17c:	bl	296bc <flatcc_json_printer_uint8@@Base+0x2c>
   2a180:	add	r0, r0, r4
   2a184:	pop	{r4, sl, fp, pc}

0002a188 <flatcc_json_printer_int16@@Base>:
   2a188:	push	{r4, sl, fp, lr}
   2a18c:	add	fp, sp, #8
   2a190:	mov	r2, r1
   2a194:	mov	r4, r0
   2a198:	ldr	r1, [r0, #20]
   2a19c:	mov	r0, r2
   2a1a0:	bl	2a1b4 <flatcc_json_printer_int16@@Base+0x2c>
   2a1a4:	ldr	r1, [r4, #20]
   2a1a8:	add	r0, r1, r0
   2a1ac:	str	r0, [r4, #20]
   2a1b0:	pop	{r4, sl, fp, pc}
   2a1b4:	push	{r4, sl, fp, lr}
   2a1b8:	add	fp, sp, #8
   2a1bc:	uxth	r2, r0
   2a1c0:	lsr	r4, r2, #15
   2a1c4:	cmn	r0, #1
   2a1c8:	movle	r2, #45	; 0x2d
   2a1cc:	strble	r2, [r1], #1
   2a1d0:	rsble	r0, r0, #0
   2a1d4:	uxth	r0, r0
   2a1d8:	bl	2978c <flatcc_json_printer_uint16@@Base+0x2c>
   2a1dc:	add	r0, r0, r4
   2a1e0:	pop	{r4, sl, fp, pc}

0002a1e4 <flatcc_json_printer_int32@@Base>:
   2a1e4:	push	{r4, sl, fp, lr}
   2a1e8:	add	fp, sp, #8
   2a1ec:	mov	r2, r1
   2a1f0:	mov	r4, r0
   2a1f4:	ldr	r1, [r0, #20]
   2a1f8:	mov	r0, r2
   2a1fc:	bl	2a210 <flatcc_json_printer_int32@@Base+0x2c>
   2a200:	ldr	r1, [r4, #20]
   2a204:	add	r0, r1, r0
   2a208:	str	r0, [r4, #20]
   2a20c:	pop	{r4, sl, fp, pc}
   2a210:	push	{r4, sl, fp, lr}
   2a214:	add	fp, sp, #8
   2a218:	lsr	r4, r0, #31
   2a21c:	cmn	r0, #1
   2a220:	movle	r2, #45	; 0x2d
   2a224:	strble	r2, [r1], #1
   2a228:	rsble	r0, r0, #0
   2a22c:	bl	29928 <flatcc_json_printer_uint32@@Base+0x2c>
   2a230:	add	r0, r0, r4
   2a234:	pop	{r4, sl, fp, pc}

0002a238 <flatcc_json_printer_int64@@Base>:
   2a238:	push	{r4, sl, fp, lr}
   2a23c:	add	fp, sp, #8
   2a240:	mov	r1, r3
   2a244:	mov	r3, r2
   2a248:	mov	r4, r0
   2a24c:	ldr	r2, [r0, #20]
   2a250:	mov	r0, r3
   2a254:	bl	2a268 <flatcc_json_printer_int64@@Base+0x30>
   2a258:	ldr	r1, [r4, #20]
   2a25c:	add	r0, r1, r0
   2a260:	str	r0, [r4, #20]
   2a264:	pop	{r4, sl, fp, pc}
   2a268:	push	{r4, sl, fp, lr}
   2a26c:	add	fp, sp, #8
   2a270:	lsr	r4, r1, #31
   2a274:	cmn	r1, #1
   2a278:	bgt	2a28c <flatcc_json_printer_int64@@Base+0x54>
   2a27c:	mov	r3, #45	; 0x2d
   2a280:	strb	r3, [r2], #1
   2a284:	rsbs	r0, r0, #0
   2a288:	rsc	r1, r1, #0
   2a28c:	bl	29c50 <flatcc_json_printer_uint64@@Base+0x30>
   2a290:	add	r0, r0, r4
   2a294:	pop	{r4, sl, fp, pc}

0002a298 <flatcc_json_printer_float@@Base>:
   2a298:	push	{r4, sl, fp, lr}
   2a29c:	add	fp, sp, #8
   2a2a0:	mov	r4, r0
   2a2a4:	ldr	r0, [r0, #20]
   2a2a8:	vcvt.f64.f32	d0, s0
   2a2ac:	bl	29058 <flatcc_json_printer_fmt_float@@Base+0x8>
   2a2b0:	ldr	r1, [r4, #20]
   2a2b4:	add	r0, r1, r0
   2a2b8:	str	r0, [r4, #20]
   2a2bc:	pop	{r4, sl, fp, pc}

0002a2c0 <flatcc_json_printer_double@@Base>:
   2a2c0:	push	{r4, sl, fp, lr}
   2a2c4:	add	fp, sp, #8
   2a2c8:	mov	r4, r0
   2a2cc:	ldr	r0, [r0, #20]
   2a2d0:	bl	29058 <flatcc_json_printer_fmt_float@@Base+0x8>
   2a2d4:	ldr	r1, [r4, #20]
   2a2d8:	add	r0, r1, r0
   2a2dc:	str	r0, [r4, #20]
   2a2e0:	pop	{r4, sl, fp, pc}

0002a2e4 <flatcc_json_printer_enum@@Base>:
   2a2e4:	b	2a2e8 <flatcc_json_printer_enum@@Base+0x4>
   2a2e8:	push	{r4, r5, fp, lr}
   2a2ec:	add	fp, sp, #8
   2a2f0:	mov	r5, r2
   2a2f4:	mov	r4, r0
   2a2f8:	ldr	r0, [r0, #20]
   2a2fc:	mov	r2, #34	; 0x22
   2a300:	strb	r2, [r0]
   2a304:	ldrb	r2, [r4, #26]
   2a308:	ldr	r3, [r4, #16]
   2a30c:	ldr	r0, [r4, #20]
   2a310:	cmp	r2, #0
   2a314:	addeq	r0, r0, #1
   2a318:	str	r0, [r4, #20]
   2a31c:	add	r2, r0, r5
   2a320:	cmp	r2, r3
   2a324:	bcs	2a340 <flatcc_json_printer_enum@@Base+0x5c>
   2a328:	mov	r2, r5
   2a32c:	bl	14e5c <memcpy@plt>
   2a330:	ldr	r0, [r4, #20]
   2a334:	add	r0, r0, r5
   2a338:	str	r0, [r4, #20]
   2a33c:	b	2a34c <flatcc_json_printer_enum@@Base+0x68>
   2a340:	mov	r0, r4
   2a344:	mov	r2, r5
   2a348:	bl	29588 <flatcc_json_printer_write@@Base+0x4>
   2a34c:	ldr	r0, [r4, #20]
   2a350:	mov	r1, #34	; 0x22
   2a354:	strb	r1, [r0]
   2a358:	ldrb	r0, [r4, #26]
   2a35c:	ldr	r1, [r4, #20]
   2a360:	cmp	r0, #0
   2a364:	addeq	r1, r1, #1
   2a368:	str	r1, [r4, #20]
   2a36c:	pop	{r4, r5, fp, pc}

0002a370 <flatcc_json_printer_delimit_enum_flags@@Base>:
   2a370:	ldrb	ip, [r0, #26]
   2a374:	ldr	r3, [r0, #20]
   2a378:	mov	r2, #34	; 0x22
   2a37c:	strb	r2, [r3]
   2a380:	cmp	r1, #0
   2a384:	movwne	r1, #1
   2a388:	clz	r2, ip
   2a38c:	lsr	r2, r2, #5
   2a390:	orr	r1, r1, r2
   2a394:	ldr	r2, [r0, #20]
   2a398:	add	r1, r2, r1
   2a39c:	str	r1, [r0, #20]
   2a3a0:	bx	lr

0002a3a4 <flatcc_json_printer_enum_flag@@Base>:
   2a3a4:	push	{fp, lr}
   2a3a8:	mov	fp, sp
   2a3ac:	mov	ip, r3
   2a3b0:	mov	lr, r2
   2a3b4:	ldr	r3, [r0, #20]
   2a3b8:	mov	r2, #32
   2a3bc:	strb	r2, [r3]
   2a3c0:	ldr	r2, [r0, #20]
   2a3c4:	cmp	r1, #0
   2a3c8:	addgt	r2, r2, #1
   2a3cc:	str	r2, [r0, #20]
   2a3d0:	mov	r1, lr
   2a3d4:	mov	r2, ip
   2a3d8:	pop	{fp, lr}
   2a3dc:	b	29588 <flatcc_json_printer_write@@Base+0x4>

0002a3e0 <flatcc_json_printer_string_field@@Base>:
   2a3e0:	push	{r4, r5, r6, r7, fp, lr}
   2a3e4:	add	fp, sp, #16
   2a3e8:	mov	r5, r3
   2a3ec:	mov	r7, r1
   2a3f0:	mov	r4, r0
   2a3f4:	mov	r0, r1
   2a3f8:	mov	r1, r2
   2a3fc:	bl	2a460 <flatcc_json_printer_string_field@@Base+0x80>
   2a400:	cmp	r0, #0
   2a404:	beq	2a45c <flatcc_json_printer_string_field@@Base+0x7c>
   2a408:	mov	r6, r0
   2a40c:	ldr	r2, [fp, #8]
   2a410:	ldr	r0, [r7, #16]
   2a414:	add	r1, r0, #1
   2a418:	str	r1, [r7, #16]
   2a41c:	cmp	r0, #0
   2a420:	beq	2a438 <flatcc_json_printer_string_field@@Base+0x58>
   2a424:	ldr	r0, [r4, #20]
   2a428:	add	r1, r0, #1
   2a42c:	str	r1, [r4, #20]
   2a430:	mov	r1, #44	; 0x2c
   2a434:	strb	r1, [r0]
   2a438:	mov	r0, r4
   2a43c:	mov	r1, r5
   2a440:	bl	2a4a0 <flatcc_json_printer_string_field@@Base+0xc0>
   2a444:	mov	r0, r6
   2a448:	bl	2a55c <flatcc_json_printer_string_field@@Base+0x17c>
   2a44c:	mov	r1, r0
   2a450:	mov	r0, r4
   2a454:	pop	{r4, r5, r6, r7, fp, lr}
   2a458:	b	2a530 <flatcc_json_printer_string_field@@Base+0x150>
   2a45c:	pop	{r4, r5, r6, r7, fp, pc}
   2a460:	push	{r4, r5, fp, lr}
   2a464:	add	fp, sp, #8
   2a468:	mov	r5, r0
   2a46c:	mov	r0, #4
   2a470:	add	r1, r0, r1, lsl #1
   2a474:	ldr	r0, [r5, #8]
   2a478:	mov	r4, #0
   2a47c:	cmp	r1, r0
   2a480:	bge	2a498 <flatcc_json_printer_string_field@@Base+0xb8>
   2a484:	ldr	r0, [r5, #4]
   2a488:	bl	30be4 <flatcc_json_printer_clear@@Base+0xc90>
   2a48c:	cmp	r0, #0
   2a490:	ldrne	r1, [r5]
   2a494:	addne	r4, r1, r0
   2a498:	mov	r0, r4
   2a49c:	pop	{r4, r5, fp, pc}
   2a4a0:	push	{r4, r5, r6, sl, fp, lr}
   2a4a4:	add	fp, sp, #16
   2a4a8:	mov	r5, r2
   2a4ac:	mov	r6, r1
   2a4b0:	mov	r4, r0
   2a4b4:	ldrb	r0, [r0, #25]
   2a4b8:	cmp	r0, #0
   2a4bc:	beq	2a4e0 <flatcc_json_printer_string_field@@Base+0x100>
   2a4c0:	ldr	r0, [r4, #20]
   2a4c4:	add	r1, r0, #1
   2a4c8:	str	r1, [r4, #20]
   2a4cc:	mov	r1, #10
   2a4d0:	strb	r1, [r0]
   2a4d4:	mov	r0, r4
   2a4d8:	bl	29620 <flatcc_json_printer_indent@@Base+0x4>
   2a4dc:	b	2a4e8 <flatcc_json_printer_string_field@@Base+0x108>
   2a4e0:	mov	r0, r4
   2a4e4:	bl	295ec <flatcc_json_printer_nl@@Base+0x18>
   2a4e8:	mov	r0, r4
   2a4ec:	mov	r1, r6
   2a4f0:	mov	r2, r5
   2a4f4:	bl	2a2e8 <flatcc_json_printer_enum@@Base+0x4>
   2a4f8:	ldr	r0, [r4, #20]
   2a4fc:	add	r1, r0, #1
   2a500:	str	r1, [r4, #20]
   2a504:	mov	r1, #58	; 0x3a
   2a508:	strb	r1, [r0]
   2a50c:	ldr	r0, [r4, #20]
   2a510:	mov	r1, #32
   2a514:	strb	r1, [r0]
   2a518:	ldrb	r0, [r4, #25]
   2a51c:	ldr	r1, [r4, #20]
   2a520:	cmp	r0, #0
   2a524:	addne	r1, r1, #1
   2a528:	str	r1, [r4, #20]
   2a52c:	pop	{r4, r5, r6, sl, fp, pc}
   2a530:	push	{r4, r5, fp, lr}
   2a534:	add	fp, sp, #8
   2a538:	mov	r4, r1
   2a53c:	mov	r5, r0
   2a540:	mov	r0, r1
   2a544:	bl	2c340 <flatcc_json_printer_utype_vector_field@@Base+0x1c0>
   2a548:	mov	r2, r0
   2a54c:	add	r1, r4, #4
   2a550:	mov	r0, r5
   2a554:	pop	{r4, r5, fp, lr}
   2a558:	b	29358 <flatcc_json_printer_string@@Base+0x4>
   2a55c:	push	{r4, sl, fp, lr}
   2a560:	add	fp, sp, #8
   2a564:	mov	r4, r0
   2a568:	bl	2c340 <flatcc_json_printer_utype_vector_field@@Base+0x1c0>
   2a56c:	add	r0, r4, r0
   2a570:	pop	{r4, sl, fp, pc}

0002a574 <flatcc_json_printer_uint8_vector_base64_field@@Base>:
   2a574:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   2a578:	add	fp, sp, #24
   2a57c:	mov	r8, r3
   2a580:	mov	r6, r1
   2a584:	mov	r4, r0
   2a588:	mov	r0, r1
   2a58c:	mov	r1, r2
   2a590:	bl	2a460 <flatcc_json_printer_string_field@@Base+0x80>
   2a594:	mov	r7, r0
   2a598:	ldr	r0, [fp, #12]
   2a59c:	mov	r5, #128	; 0x80
   2a5a0:	cmp	r0, #0
   2a5a4:	movwne	r5, #129	; 0x81
   2a5a8:	cmp	r7, #0
   2a5ac:	beq	2a604 <flatcc_json_printer_uint8_vector_base64_field@@Base+0x90>
   2a5b0:	ldr	r2, [fp, #8]
   2a5b4:	ldr	r0, [r6, #16]
   2a5b8:	add	r1, r0, #1
   2a5bc:	str	r1, [r6, #16]
   2a5c0:	cmp	r0, #0
   2a5c4:	beq	2a5dc <flatcc_json_printer_uint8_vector_base64_field@@Base+0x68>
   2a5c8:	ldr	r0, [r4, #20]
   2a5cc:	add	r1, r0, #1
   2a5d0:	str	r1, [r4, #20]
   2a5d4:	mov	r1, #44	; 0x2c
   2a5d8:	strb	r1, [r0]
   2a5dc:	mov	r0, r4
   2a5e0:	mov	r1, r8
   2a5e4:	bl	2a4a0 <flatcc_json_printer_string_field@@Base+0xc0>
   2a5e8:	mov	r0, r7
   2a5ec:	bl	2a55c <flatcc_json_printer_string_field@@Base+0x17c>
   2a5f0:	mov	r1, r0
   2a5f4:	mov	r0, r4
   2a5f8:	mov	r2, r5
   2a5fc:	pop	{r4, r5, r6, r7, r8, sl, fp, lr}
   2a600:	b	2a608 <flatcc_json_printer_uint8_vector_base64_field@@Base+0x94>
   2a604:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   2a608:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2a60c:	add	fp, sp, #28
   2a610:	sub	sp, sp, #12
   2a614:	mov	r8, r2
   2a618:	mov	r5, r1
   2a61c:	mov	r4, r0
   2a620:	mov	r0, r1
   2a624:	bl	2c340 <flatcc_json_printer_utype_vector_field@@Base+0x1c0>
   2a628:	str	r0, [sp, #8]
   2a62c:	ldr	r0, [r4, #20]
   2a630:	add	r1, r0, #1
   2a634:	str	r1, [r4, #20]
   2a638:	mov	r1, #34	; 0x22
   2a63c:	strb	r1, [r0]
   2a640:	ldr	r0, [sp, #8]
   2a644:	mov	r1, r8
   2a648:	bl	30bf8 <flatcc_json_printer_clear@@Base+0xca4>
   2a64c:	mov	r7, r0
   2a650:	ldr	r0, [r4, #16]
   2a654:	ldr	r1, [r4, #20]
   2a658:	add	r1, r1, r7
   2a65c:	cmp	r1, r0
   2a660:	bcc	2a674 <flatcc_json_printer_uint8_vector_base64_field@@Base+0x100>
   2a664:	ldr	r2, [r4, #44]	; 0x2c
   2a668:	mov	r0, r4
   2a66c:	mov	r1, #0
   2a670:	blx	r2
   2a674:	add	r6, r5, #4
   2a678:	ldr	r1, [r4, #16]
   2a67c:	ldr	r0, [r4, #20]
   2a680:	add	r2, r0, r7
   2a684:	cmp	r2, r1
   2a688:	bls	2a710 <flatcc_json_printer_uint8_vector_base64_field@@Base+0x19c>
   2a68c:	bic	sl, r8, #128	; 0x80
   2a690:	add	r9, sp, #4
   2a694:	sub	r1, r1, r0
   2a698:	bic	r7, r1, #3
   2a69c:	add	r1, r7, r7, lsl #1
   2a6a0:	cmp	r1, #0
   2a6a4:	beq	2a740 <flatcc_json_printer_uint8_vector_base64_field@@Base+0x1cc>
   2a6a8:	lsr	r5, r1, #2
   2a6ac:	str	r5, [sp, #4]
   2a6b0:	mov	r1, r6
   2a6b4:	mov	r2, r9
   2a6b8:	mov	r3, sl
   2a6bc:	bl	30c50 <flatcc_json_printer_clear@@Base+0xcfc>
   2a6c0:	ldr	r0, [r4, #20]
   2a6c4:	add	r0, r0, r7
   2a6c8:	str	r0, [r4, #20]
   2a6cc:	ldr	r0, [sp, #8]
   2a6d0:	sub	r0, r0, r5
   2a6d4:	str	r0, [sp, #8]
   2a6d8:	ldr	r2, [r4, #44]	; 0x2c
   2a6dc:	mov	r0, r4
   2a6e0:	mov	r1, #0
   2a6e4:	blx	r2
   2a6e8:	add	r6, r6, r5
   2a6ec:	ldr	r0, [sp, #8]
   2a6f0:	mov	r1, r8
   2a6f4:	bl	30bf8 <flatcc_json_printer_clear@@Base+0xca4>
   2a6f8:	mov	r7, r0
   2a6fc:	ldr	r1, [r4, #16]
   2a700:	ldr	r0, [r4, #20]
   2a704:	add	r2, r0, r7
   2a708:	cmp	r2, r1
   2a70c:	bhi	2a694 <flatcc_json_printer_uint8_vector_base64_field@@Base+0x120>
   2a710:	add	r2, sp, #8
   2a714:	mov	r1, r6
   2a718:	mov	r3, r8
   2a71c:	bl	30c50 <flatcc_json_printer_clear@@Base+0xcfc>
   2a720:	ldr	r0, [r4, #20]
   2a724:	add	r1, r0, r7
   2a728:	add	r1, r1, #1
   2a72c:	str	r1, [r4, #20]
   2a730:	mov	r1, #34	; 0x22
   2a734:	strb	r1, [r0, r7]
   2a738:	sub	sp, fp, #28
   2a73c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2a740:	movw	r0, #29465	; 0x7319
   2a744:	movt	r0, #3
   2a748:	movw	r1, #28539	; 0x6f7b
   2a74c:	movt	r1, #3
   2a750:	movw	r3, #29471	; 0x731f
   2a754:	movt	r3, #3
   2a758:	movw	r2, #277	; 0x115
   2a75c:	bl	14f40 <__assert_fail@plt>

0002a760 <flatcc_json_printer_uint8_field@@Base>:
   2a760:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   2a764:	add	fp, sp, #24
   2a768:	mov	r8, r3
   2a76c:	mov	r6, r1
   2a770:	mov	r4, r0
   2a774:	mov	r0, r1
   2a778:	mov	r1, r2
   2a77c:	bl	2a460 <flatcc_json_printer_string_field@@Base+0x80>
   2a780:	ldr	r5, [fp, #12]
   2a784:	cmp	r0, #0
   2a788:	beq	2a7ac <flatcc_json_printer_uint8_field@@Base+0x4c>
   2a78c:	bl	2a810 <flatcc_json_printer_uint8_field@@Base+0xb0>
   2a790:	mov	r7, r0
   2a794:	cmp	r0, r5
   2a798:	bne	2a7bc <flatcc_json_printer_uint8_field@@Base+0x5c>
   2a79c:	ldrb	r0, [r4, #28]
   2a7a0:	cmp	r0, #0
   2a7a4:	popne	{r4, r5, r6, r7, r8, sl, fp, pc}
   2a7a8:	b	2a7bc <flatcc_json_printer_uint8_field@@Base+0x5c>
   2a7ac:	ldrb	r0, [r4, #29]
   2a7b0:	cmp	r0, #0
   2a7b4:	mov	r7, r5
   2a7b8:	beq	2a80c <flatcc_json_printer_uint8_field@@Base+0xac>
   2a7bc:	ldr	r2, [fp, #8]
   2a7c0:	ldr	r0, [r6, #16]
   2a7c4:	add	r1, r0, #1
   2a7c8:	str	r1, [r6, #16]
   2a7cc:	cmp	r0, #0
   2a7d0:	beq	2a7e8 <flatcc_json_printer_uint8_field@@Base+0x88>
   2a7d4:	ldr	r0, [r4, #20]
   2a7d8:	add	r1, r0, #1
   2a7dc:	str	r1, [r4, #20]
   2a7e0:	mov	r1, #44	; 0x2c
   2a7e4:	strb	r1, [r0]
   2a7e8:	mov	r0, r4
   2a7ec:	mov	r1, r8
   2a7f0:	bl	2a4a0 <flatcc_json_printer_string_field@@Base+0xc0>
   2a7f4:	ldr	r1, [r4, #20]
   2a7f8:	mov	r0, r7
   2a7fc:	bl	296bc <flatcc_json_printer_uint8@@Base+0x2c>
   2a800:	ldr	r1, [r4, #20]
   2a804:	add	r0, r1, r0
   2a808:	str	r0, [r4, #20]
   2a80c:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   2a810:	ldrb	r0, [r0]
   2a814:	b	30d98 <flatcc_json_printer_clear@@Base+0xe44>

0002a818 <flatcc_json_printer_uint16_field@@Base>:
   2a818:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   2a81c:	add	fp, sp, #24
   2a820:	mov	r8, r3
   2a824:	mov	r6, r1
   2a828:	mov	r4, r0
   2a82c:	mov	r0, r1
   2a830:	mov	r1, r2
   2a834:	bl	2a460 <flatcc_json_printer_string_field@@Base+0x80>
   2a838:	ldr	r5, [fp, #12]
   2a83c:	cmp	r0, #0
   2a840:	beq	2a864 <flatcc_json_printer_uint16_field@@Base+0x4c>
   2a844:	bl	2a8c8 <flatcc_json_printer_uint16_field@@Base+0xb0>
   2a848:	mov	r7, r0
   2a84c:	cmp	r0, r5
   2a850:	bne	2a874 <flatcc_json_printer_uint16_field@@Base+0x5c>
   2a854:	ldrb	r0, [r4, #28]
   2a858:	cmp	r0, #0
   2a85c:	popne	{r4, r5, r6, r7, r8, sl, fp, pc}
   2a860:	b	2a874 <flatcc_json_printer_uint16_field@@Base+0x5c>
   2a864:	ldrb	r0, [r4, #29]
   2a868:	cmp	r0, #0
   2a86c:	mov	r7, r5
   2a870:	beq	2a8c4 <flatcc_json_printer_uint16_field@@Base+0xac>
   2a874:	ldr	r2, [fp, #8]
   2a878:	ldr	r0, [r6, #16]
   2a87c:	add	r1, r0, #1
   2a880:	str	r1, [r6, #16]
   2a884:	cmp	r0, #0
   2a888:	beq	2a8a0 <flatcc_json_printer_uint16_field@@Base+0x88>
   2a88c:	ldr	r0, [r4, #20]
   2a890:	add	r1, r0, #1
   2a894:	str	r1, [r4, #20]
   2a898:	mov	r1, #44	; 0x2c
   2a89c:	strb	r1, [r0]
   2a8a0:	mov	r0, r4
   2a8a4:	mov	r1, r8
   2a8a8:	bl	2a4a0 <flatcc_json_printer_string_field@@Base+0xc0>
   2a8ac:	ldr	r1, [r4, #20]
   2a8b0:	mov	r0, r7
   2a8b4:	bl	2978c <flatcc_json_printer_uint16@@Base+0x2c>
   2a8b8:	ldr	r1, [r4, #20]
   2a8bc:	add	r0, r1, r0
   2a8c0:	str	r0, [r4, #20]
   2a8c4:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   2a8c8:	ldrh	r0, [r0]
   2a8cc:	b	30d9c <flatcc_json_printer_clear@@Base+0xe48>

0002a8d0 <flatcc_json_printer_uint32_field@@Base>:
   2a8d0:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   2a8d4:	add	fp, sp, #24
   2a8d8:	mov	r8, r3
   2a8dc:	mov	r6, r1
   2a8e0:	mov	r4, r0
   2a8e4:	mov	r0, r1
   2a8e8:	mov	r1, r2
   2a8ec:	bl	2a460 <flatcc_json_printer_string_field@@Base+0x80>
   2a8f0:	ldr	r5, [fp, #12]
   2a8f4:	cmp	r0, #0
   2a8f8:	beq	2a91c <flatcc_json_printer_uint32_field@@Base+0x4c>
   2a8fc:	bl	2a980 <flatcc_json_printer_uint32_field@@Base+0xb0>
   2a900:	mov	r7, r0
   2a904:	cmp	r0, r5
   2a908:	bne	2a92c <flatcc_json_printer_uint32_field@@Base+0x5c>
   2a90c:	ldrb	r0, [r4, #28]
   2a910:	cmp	r0, #0
   2a914:	popne	{r4, r5, r6, r7, r8, sl, fp, pc}
   2a918:	b	2a92c <flatcc_json_printer_uint32_field@@Base+0x5c>
   2a91c:	ldrb	r0, [r4, #29]
   2a920:	cmp	r0, #0
   2a924:	mov	r7, r5
   2a928:	beq	2a97c <flatcc_json_printer_uint32_field@@Base+0xac>
   2a92c:	ldr	r2, [fp, #8]
   2a930:	ldr	r0, [r6, #16]
   2a934:	add	r1, r0, #1
   2a938:	str	r1, [r6, #16]
   2a93c:	cmp	r0, #0
   2a940:	beq	2a958 <flatcc_json_printer_uint32_field@@Base+0x88>
   2a944:	ldr	r0, [r4, #20]
   2a948:	add	r1, r0, #1
   2a94c:	str	r1, [r4, #20]
   2a950:	mov	r1, #44	; 0x2c
   2a954:	strb	r1, [r0]
   2a958:	mov	r0, r4
   2a95c:	mov	r1, r8
   2a960:	bl	2a4a0 <flatcc_json_printer_string_field@@Base+0xc0>
   2a964:	ldr	r1, [r4, #20]
   2a968:	mov	r0, r7
   2a96c:	bl	29928 <flatcc_json_printer_uint32@@Base+0x2c>
   2a970:	ldr	r1, [r4, #20]
   2a974:	add	r0, r1, r0
   2a978:	str	r0, [r4, #20]
   2a97c:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   2a980:	ldr	r0, [r0]
   2a984:	b	30da0 <flatcc_json_printer_clear@@Base+0xe4c>

0002a988 <flatcc_json_printer_uint64_field@@Base>:
   2a988:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2a98c:	add	fp, sp, #28
   2a990:	sub	sp, sp, #4
   2a994:	mov	r8, r3
   2a998:	mov	r6, r1
   2a99c:	mov	r4, r0
   2a9a0:	mov	r0, r1
   2a9a4:	mov	r1, r2
   2a9a8:	bl	2a460 <flatcc_json_printer_string_field@@Base+0x80>
   2a9ac:	ldr	r9, [fp, #20]
   2a9b0:	ldr	sl, [fp, #16]
   2a9b4:	cmp	r0, #0
   2a9b8:	beq	2a9ec <flatcc_json_printer_uint64_field@@Base+0x64>
   2a9bc:	bl	2aa5c <flatcc_json_printer_uint64_field@@Base+0xd4>
   2a9c0:	mov	r7, r0
   2a9c4:	mov	r5, r1
   2a9c8:	eor	r0, r1, r9
   2a9cc:	eor	r1, r7, sl
   2a9d0:	orrs	r0, r1, r0
   2a9d4:	bne	2aa00 <flatcc_json_printer_uint64_field@@Base+0x78>
   2a9d8:	ldrb	r0, [r4, #28]
   2a9dc:	cmp	r0, #0
   2a9e0:	beq	2aa00 <flatcc_json_printer_uint64_field@@Base+0x78>
   2a9e4:	sub	sp, fp, #28
   2a9e8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2a9ec:	ldrb	r0, [r4, #29]
   2a9f0:	cmp	r0, #0
   2a9f4:	mov	r7, sl
   2a9f8:	mov	r5, r9
   2a9fc:	beq	2a9e4 <flatcc_json_printer_uint64_field@@Base+0x5c>
   2aa00:	ldr	r2, [fp, #8]
   2aa04:	ldr	r0, [r6, #16]
   2aa08:	add	r1, r0, #1
   2aa0c:	str	r1, [r6, #16]
   2aa10:	cmp	r0, #0
   2aa14:	beq	2aa2c <flatcc_json_printer_uint64_field@@Base+0xa4>
   2aa18:	ldr	r0, [r4, #20]
   2aa1c:	add	r1, r0, #1
   2aa20:	str	r1, [r4, #20]
   2aa24:	mov	r1, #44	; 0x2c
   2aa28:	strb	r1, [r0]
   2aa2c:	mov	r0, r4
   2aa30:	mov	r1, r8
   2aa34:	bl	2a4a0 <flatcc_json_printer_string_field@@Base+0xc0>
   2aa38:	ldr	r2, [r4, #20]
   2aa3c:	mov	r0, r7
   2aa40:	mov	r1, r5
   2aa44:	bl	29c50 <flatcc_json_printer_uint64@@Base+0x30>
   2aa48:	ldr	r1, [r4, #20]
   2aa4c:	add	r0, r1, r0
   2aa50:	str	r0, [r4, #20]
   2aa54:	sub	sp, fp, #28
   2aa58:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2aa5c:	ldrd	r0, [r0]
   2aa60:	b	30da4 <flatcc_json_printer_clear@@Base+0xe50>

0002aa64 <flatcc_json_printer_int8_field@@Base>:
   2aa64:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   2aa68:	add	fp, sp, #24
   2aa6c:	mov	r8, r3
   2aa70:	mov	r6, r1
   2aa74:	mov	r4, r0
   2aa78:	mov	r0, r1
   2aa7c:	mov	r1, r2
   2aa80:	bl	2a460 <flatcc_json_printer_string_field@@Base+0x80>
   2aa84:	ldr	r5, [fp, #12]
   2aa88:	cmp	r0, #0
   2aa8c:	beq	2aab0 <flatcc_json_printer_int8_field@@Base+0x4c>
   2aa90:	bl	2ab14 <flatcc_json_printer_int8_field@@Base+0xb0>
   2aa94:	mov	r7, r0
   2aa98:	cmp	r0, r5
   2aa9c:	bne	2aac0 <flatcc_json_printer_int8_field@@Base+0x5c>
   2aaa0:	ldrb	r0, [r4, #28]
   2aaa4:	cmp	r0, #0
   2aaa8:	popne	{r4, r5, r6, r7, r8, sl, fp, pc}
   2aaac:	b	2aac0 <flatcc_json_printer_int8_field@@Base+0x5c>
   2aab0:	ldrb	r0, [r4, #29]
   2aab4:	cmp	r0, #0
   2aab8:	mov	r7, r5
   2aabc:	beq	2ab10 <flatcc_json_printer_int8_field@@Base+0xac>
   2aac0:	ldr	r2, [fp, #8]
   2aac4:	ldr	r0, [r6, #16]
   2aac8:	add	r1, r0, #1
   2aacc:	str	r1, [r6, #16]
   2aad0:	cmp	r0, #0
   2aad4:	beq	2aaec <flatcc_json_printer_int8_field@@Base+0x88>
   2aad8:	ldr	r0, [r4, #20]
   2aadc:	add	r1, r0, #1
   2aae0:	str	r1, [r4, #20]
   2aae4:	mov	r1, #44	; 0x2c
   2aae8:	strb	r1, [r0]
   2aaec:	mov	r0, r4
   2aaf0:	mov	r1, r8
   2aaf4:	bl	2a4a0 <flatcc_json_printer_string_field@@Base+0xc0>
   2aaf8:	ldr	r1, [r4, #20]
   2aafc:	mov	r0, r7
   2ab00:	bl	2a158 <flatcc_json_printer_int8@@Base+0x2c>
   2ab04:	ldr	r1, [r4, #20]
   2ab08:	add	r0, r1, r0
   2ab0c:	str	r0, [r4, #20]
   2ab10:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   2ab14:	ldrsb	r0, [r0]
   2ab18:	b	30da8 <flatcc_json_printer_clear@@Base+0xe54>

0002ab1c <flatcc_json_printer_int16_field@@Base>:
   2ab1c:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   2ab20:	add	fp, sp, #24
   2ab24:	mov	r8, r3
   2ab28:	mov	r6, r1
   2ab2c:	mov	r4, r0
   2ab30:	mov	r0, r1
   2ab34:	mov	r1, r2
   2ab38:	bl	2a460 <flatcc_json_printer_string_field@@Base+0x80>
   2ab3c:	ldr	r5, [fp, #12]
   2ab40:	cmp	r0, #0
   2ab44:	beq	2ab68 <flatcc_json_printer_int16_field@@Base+0x4c>
   2ab48:	bl	2abcc <flatcc_json_printer_int16_field@@Base+0xb0>
   2ab4c:	mov	r7, r0
   2ab50:	cmp	r0, r5
   2ab54:	bne	2ab78 <flatcc_json_printer_int16_field@@Base+0x5c>
   2ab58:	ldrb	r0, [r4, #28]
   2ab5c:	cmp	r0, #0
   2ab60:	popne	{r4, r5, r6, r7, r8, sl, fp, pc}
   2ab64:	b	2ab78 <flatcc_json_printer_int16_field@@Base+0x5c>
   2ab68:	ldrb	r0, [r4, #29]
   2ab6c:	cmp	r0, #0
   2ab70:	mov	r7, r5
   2ab74:	beq	2abc8 <flatcc_json_printer_int16_field@@Base+0xac>
   2ab78:	ldr	r2, [fp, #8]
   2ab7c:	ldr	r0, [r6, #16]
   2ab80:	add	r1, r0, #1
   2ab84:	str	r1, [r6, #16]
   2ab88:	cmp	r0, #0
   2ab8c:	beq	2aba4 <flatcc_json_printer_int16_field@@Base+0x88>
   2ab90:	ldr	r0, [r4, #20]
   2ab94:	add	r1, r0, #1
   2ab98:	str	r1, [r4, #20]
   2ab9c:	mov	r1, #44	; 0x2c
   2aba0:	strb	r1, [r0]
   2aba4:	mov	r0, r4
   2aba8:	mov	r1, r8
   2abac:	bl	2a4a0 <flatcc_json_printer_string_field@@Base+0xc0>
   2abb0:	ldr	r1, [r4, #20]
   2abb4:	mov	r0, r7
   2abb8:	bl	2a1b4 <flatcc_json_printer_int16@@Base+0x2c>
   2abbc:	ldr	r1, [r4, #20]
   2abc0:	add	r0, r1, r0
   2abc4:	str	r0, [r4, #20]
   2abc8:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   2abcc:	ldrsh	r0, [r0]
   2abd0:	b	30dac <flatcc_json_printer_clear@@Base+0xe58>

0002abd4 <flatcc_json_printer_int32_field@@Base>:
   2abd4:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   2abd8:	add	fp, sp, #24
   2abdc:	mov	r8, r3
   2abe0:	mov	r6, r1
   2abe4:	mov	r4, r0
   2abe8:	mov	r0, r1
   2abec:	mov	r1, r2
   2abf0:	bl	2a460 <flatcc_json_printer_string_field@@Base+0x80>
   2abf4:	ldr	r5, [fp, #12]
   2abf8:	cmp	r0, #0
   2abfc:	beq	2ac20 <flatcc_json_printer_int32_field@@Base+0x4c>
   2ac00:	bl	2ac84 <flatcc_json_printer_int32_field@@Base+0xb0>
   2ac04:	mov	r7, r0
   2ac08:	cmp	r0, r5
   2ac0c:	bne	2ac30 <flatcc_json_printer_int32_field@@Base+0x5c>
   2ac10:	ldrb	r0, [r4, #28]
   2ac14:	cmp	r0, #0
   2ac18:	popne	{r4, r5, r6, r7, r8, sl, fp, pc}
   2ac1c:	b	2ac30 <flatcc_json_printer_int32_field@@Base+0x5c>
   2ac20:	ldrb	r0, [r4, #29]
   2ac24:	cmp	r0, #0
   2ac28:	mov	r7, r5
   2ac2c:	beq	2ac80 <flatcc_json_printer_int32_field@@Base+0xac>
   2ac30:	ldr	r2, [fp, #8]
   2ac34:	ldr	r0, [r6, #16]
   2ac38:	add	r1, r0, #1
   2ac3c:	str	r1, [r6, #16]
   2ac40:	cmp	r0, #0
   2ac44:	beq	2ac5c <flatcc_json_printer_int32_field@@Base+0x88>
   2ac48:	ldr	r0, [r4, #20]
   2ac4c:	add	r1, r0, #1
   2ac50:	str	r1, [r4, #20]
   2ac54:	mov	r1, #44	; 0x2c
   2ac58:	strb	r1, [r0]
   2ac5c:	mov	r0, r4
   2ac60:	mov	r1, r8
   2ac64:	bl	2a4a0 <flatcc_json_printer_string_field@@Base+0xc0>
   2ac68:	ldr	r1, [r4, #20]
   2ac6c:	mov	r0, r7
   2ac70:	bl	2a210 <flatcc_json_printer_int32@@Base+0x2c>
   2ac74:	ldr	r1, [r4, #20]
   2ac78:	add	r0, r1, r0
   2ac7c:	str	r0, [r4, #20]
   2ac80:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   2ac84:	ldr	r0, [r0]
   2ac88:	b	30db0 <flatcc_json_printer_clear@@Base+0xe5c>

0002ac8c <flatcc_json_printer_int64_field@@Base>:
   2ac8c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2ac90:	add	fp, sp, #28
   2ac94:	sub	sp, sp, #4
   2ac98:	mov	r8, r3
   2ac9c:	mov	r6, r1
   2aca0:	mov	r4, r0
   2aca4:	mov	r0, r1
   2aca8:	mov	r1, r2
   2acac:	bl	2a460 <flatcc_json_printer_string_field@@Base+0x80>
   2acb0:	ldr	r9, [fp, #20]
   2acb4:	ldr	sl, [fp, #16]
   2acb8:	cmp	r0, #0
   2acbc:	beq	2acf0 <flatcc_json_printer_int64_field@@Base+0x64>
   2acc0:	bl	2ad60 <flatcc_json_printer_int64_field@@Base+0xd4>
   2acc4:	mov	r7, r0
   2acc8:	mov	r5, r1
   2accc:	eor	r0, r1, r9
   2acd0:	eor	r1, r7, sl
   2acd4:	orrs	r0, r1, r0
   2acd8:	bne	2ad04 <flatcc_json_printer_int64_field@@Base+0x78>
   2acdc:	ldrb	r0, [r4, #28]
   2ace0:	cmp	r0, #0
   2ace4:	beq	2ad04 <flatcc_json_printer_int64_field@@Base+0x78>
   2ace8:	sub	sp, fp, #28
   2acec:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2acf0:	ldrb	r0, [r4, #29]
   2acf4:	cmp	r0, #0
   2acf8:	mov	r7, sl
   2acfc:	mov	r5, r9
   2ad00:	beq	2ace8 <flatcc_json_printer_int64_field@@Base+0x5c>
   2ad04:	ldr	r2, [fp, #8]
   2ad08:	ldr	r0, [r6, #16]
   2ad0c:	add	r1, r0, #1
   2ad10:	str	r1, [r6, #16]
   2ad14:	cmp	r0, #0
   2ad18:	beq	2ad30 <flatcc_json_printer_int64_field@@Base+0xa4>
   2ad1c:	ldr	r0, [r4, #20]
   2ad20:	add	r1, r0, #1
   2ad24:	str	r1, [r4, #20]
   2ad28:	mov	r1, #44	; 0x2c
   2ad2c:	strb	r1, [r0]
   2ad30:	mov	r0, r4
   2ad34:	mov	r1, r8
   2ad38:	bl	2a4a0 <flatcc_json_printer_string_field@@Base+0xc0>
   2ad3c:	ldr	r2, [r4, #20]
   2ad40:	mov	r0, r7
   2ad44:	mov	r1, r5
   2ad48:	bl	2a268 <flatcc_json_printer_int64@@Base+0x30>
   2ad4c:	ldr	r1, [r4, #20]
   2ad50:	add	r0, r1, r0
   2ad54:	str	r0, [r4, #20]
   2ad58:	sub	sp, fp, #28
   2ad5c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2ad60:	ldrd	r0, [r0]
   2ad64:	b	30db4 <flatcc_json_printer_clear@@Base+0xe60>

0002ad68 <flatcc_json_printer_bool_field@@Base>:
   2ad68:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   2ad6c:	add	fp, sp, #24
   2ad70:	mov	r8, r3
   2ad74:	mov	r6, r1
   2ad78:	mov	r4, r0
   2ad7c:	mov	r0, r1
   2ad80:	mov	r1, r2
   2ad84:	bl	2a460 <flatcc_json_printer_string_field@@Base+0x80>
   2ad88:	ldr	r5, [fp, #12]
   2ad8c:	cmp	r0, #0
   2ad90:	beq	2adb4 <flatcc_json_printer_bool_field@@Base+0x4c>
   2ad94:	bl	2ae18 <flatcc_json_printer_bool_field@@Base+0xb0>
   2ad98:	mov	r7, r0
   2ad9c:	cmp	r0, r5
   2ada0:	bne	2adc4 <flatcc_json_printer_bool_field@@Base+0x5c>
   2ada4:	ldrb	r0, [r4, #28]
   2ada8:	cmp	r0, #0
   2adac:	popne	{r4, r5, r6, r7, r8, sl, fp, pc}
   2adb0:	b	2adc4 <flatcc_json_printer_bool_field@@Base+0x5c>
   2adb4:	ldrb	r0, [r4, #29]
   2adb8:	cmp	r0, #0
   2adbc:	mov	r7, r5
   2adc0:	beq	2ae14 <flatcc_json_printer_bool_field@@Base+0xac>
   2adc4:	ldr	r2, [fp, #8]
   2adc8:	ldr	r0, [r6, #16]
   2adcc:	add	r1, r0, #1
   2add0:	str	r1, [r6, #16]
   2add4:	cmp	r0, #0
   2add8:	beq	2adf0 <flatcc_json_printer_bool_field@@Base+0x88>
   2addc:	ldr	r0, [r4, #20]
   2ade0:	add	r1, r0, #1
   2ade4:	str	r1, [r4, #20]
   2ade8:	mov	r1, #44	; 0x2c
   2adec:	strb	r1, [r0]
   2adf0:	mov	r0, r4
   2adf4:	mov	r1, r8
   2adf8:	bl	2a4a0 <flatcc_json_printer_string_field@@Base+0xc0>
   2adfc:	ldr	r1, [r4, #20]
   2ae00:	mov	r0, r7
   2ae04:	bl	2ae20 <flatcc_json_printer_bool_field@@Base+0xb8>
   2ae08:	ldr	r1, [r4, #20]
   2ae0c:	add	r0, r1, r0
   2ae10:	str	r0, [r4, #20]
   2ae14:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   2ae18:	ldrb	r0, [r0]
   2ae1c:	b	30db8 <flatcc_json_printer_clear@@Base+0xe64>
   2ae20:	cmp	r0, #0
   2ae24:	beq	2ae44 <flatcc_json_printer_bool_field@@Base+0xdc>
   2ae28:	mov	r0, #0
   2ae2c:	strb	r0, [r1, #4]
   2ae30:	movw	r0, #29300	; 0x7274
   2ae34:	movt	r0, #25973	; 0x6575
   2ae38:	str	r0, [r1]
   2ae3c:	mov	r0, #4
   2ae40:	bx	lr
   2ae44:	mov	r0, #101	; 0x65
   2ae48:	strh	r0, [r1, #4]
   2ae4c:	movw	r0, #24934	; 0x6166
   2ae50:	movt	r0, #29548	; 0x736c
   2ae54:	str	r0, [r1]
   2ae58:	mov	r0, #5
   2ae5c:	bx	lr

0002ae60 <flatcc_json_printer_float_field@@Base>:
   2ae60:	push	{r4, r5, r6, sl, fp, lr}
   2ae64:	add	fp, sp, #16
   2ae68:	vpush	{d8-d9}
   2ae6c:	vmov.f32	s18, s0
   2ae70:	mov	r5, r3
   2ae74:	mov	r6, r1
   2ae78:	mov	r4, r0
   2ae7c:	mov	r0, r1
   2ae80:	mov	r1, r2
   2ae84:	bl	2a460 <flatcc_json_printer_string_field@@Base+0x80>
   2ae88:	cmp	r0, #0
   2ae8c:	beq	2aeb8 <flatcc_json_printer_float_field@@Base+0x58>
   2ae90:	bl	2af20 <flatcc_json_printer_float_field@@Base+0xc0>
   2ae94:	vmov.f32	s16, s0
   2ae98:	vcmp.f32	s0, s18
   2ae9c:	vmrs	APSR_nzcv, fpscr
   2aea0:	bne	2aec8 <flatcc_json_printer_float_field@@Base+0x68>
   2aea4:	ldrb	r0, [r4, #28]
   2aea8:	cmp	r0, #0
   2aeac:	beq	2aec8 <flatcc_json_printer_float_field@@Base+0x68>
   2aeb0:	vpop	{d8-d9}
   2aeb4:	pop	{r4, r5, r6, sl, fp, pc}
   2aeb8:	ldrb	r0, [r4, #29]
   2aebc:	cmp	r0, #0
   2aec0:	vmov.f32	s16, s18
   2aec4:	beq	2aeb0 <flatcc_json_printer_float_field@@Base+0x50>
   2aec8:	ldr	r2, [fp, #8]
   2aecc:	ldr	r0, [r6, #16]
   2aed0:	add	r1, r0, #1
   2aed4:	str	r1, [r6, #16]
   2aed8:	cmp	r0, #0
   2aedc:	beq	2aef4 <flatcc_json_printer_float_field@@Base+0x94>
   2aee0:	ldr	r0, [r4, #20]
   2aee4:	add	r1, r0, #1
   2aee8:	str	r1, [r4, #20]
   2aeec:	mov	r1, #44	; 0x2c
   2aef0:	strb	r1, [r0]
   2aef4:	mov	r0, r4
   2aef8:	mov	r1, r5
   2aefc:	bl	2a4a0 <flatcc_json_printer_string_field@@Base+0xc0>
   2af00:	ldr	r0, [r4, #20]
   2af04:	vcvt.f64.f32	d0, s16
   2af08:	bl	29058 <flatcc_json_printer_fmt_float@@Base+0x8>
   2af0c:	ldr	r1, [r4, #20]
   2af10:	add	r0, r1, r0
   2af14:	str	r0, [r4, #20]
   2af18:	vpop	{d8-d9}
   2af1c:	pop	{r4, r5, r6, sl, fp, pc}
   2af20:	vldr	s0, [r0]
   2af24:	b	30dbc <flatcc_json_printer_clear@@Base+0xe68>

0002af28 <flatcc_json_printer_double_field@@Base>:
   2af28:	push	{r4, r5, r6, sl, fp, lr}
   2af2c:	add	fp, sp, #16
   2af30:	vpush	{d8-d9}
   2af34:	vmov.f64	d9, d0
   2af38:	mov	r5, r3
   2af3c:	mov	r6, r1
   2af40:	mov	r4, r0
   2af44:	mov	r0, r1
   2af48:	mov	r1, r2
   2af4c:	bl	2a460 <flatcc_json_printer_string_field@@Base+0x80>
   2af50:	cmp	r0, #0
   2af54:	beq	2af80 <flatcc_json_printer_double_field@@Base+0x58>
   2af58:	bl	2afe8 <flatcc_json_printer_double_field@@Base+0xc0>
   2af5c:	vmov.f64	d8, d0
   2af60:	vcmp.f64	d0, d9
   2af64:	vmrs	APSR_nzcv, fpscr
   2af68:	bne	2af90 <flatcc_json_printer_double_field@@Base+0x68>
   2af6c:	ldrb	r0, [r4, #28]
   2af70:	cmp	r0, #0
   2af74:	beq	2af90 <flatcc_json_printer_double_field@@Base+0x68>
   2af78:	vpop	{d8-d9}
   2af7c:	pop	{r4, r5, r6, sl, fp, pc}
   2af80:	ldrb	r0, [r4, #29]
   2af84:	cmp	r0, #0
   2af88:	vmov.f64	d8, d9
   2af8c:	beq	2af78 <flatcc_json_printer_double_field@@Base+0x50>
   2af90:	ldr	r2, [fp, #8]
   2af94:	ldr	r0, [r6, #16]
   2af98:	add	r1, r0, #1
   2af9c:	str	r1, [r6, #16]
   2afa0:	cmp	r0, #0
   2afa4:	beq	2afbc <flatcc_json_printer_double_field@@Base+0x94>
   2afa8:	ldr	r0, [r4, #20]
   2afac:	add	r1, r0, #1
   2afb0:	str	r1, [r4, #20]
   2afb4:	mov	r1, #44	; 0x2c
   2afb8:	strb	r1, [r0]
   2afbc:	mov	r0, r4
   2afc0:	mov	r1, r5
   2afc4:	bl	2a4a0 <flatcc_json_printer_string_field@@Base+0xc0>
   2afc8:	ldr	r0, [r4, #20]
   2afcc:	vmov.f64	d0, d8
   2afd0:	bl	29058 <flatcc_json_printer_fmt_float@@Base+0x8>
   2afd4:	ldr	r1, [r4, #20]
   2afd8:	add	r0, r1, r0
   2afdc:	str	r0, [r4, #20]
   2afe0:	vpop	{d8-d9}
   2afe4:	pop	{r4, r5, r6, sl, fp, pc}
   2afe8:	vldr	d0, [r0]
   2afec:	b	30dc0 <flatcc_json_printer_clear@@Base+0xe6c>

0002aff0 <flatcc_json_printer_uint8_enum_field@@Base>:
   2aff0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2aff4:	add	fp, sp, #28
   2aff8:	sub	sp, sp, #4
   2affc:	mov	r8, r3
   2b000:	mov	r5, r1
   2b004:	mov	r4, r0
   2b008:	mov	r0, r1
   2b00c:	mov	r1, r2
   2b010:	bl	2a460 <flatcc_json_printer_string_field@@Base+0x80>
   2b014:	ldr	sl, [fp, #16]
   2b018:	ldr	r7, [fp, #12]
   2b01c:	ldr	r9, [fp, #8]
   2b020:	cmp	r0, #0
   2b024:	beq	2b04c <flatcc_json_printer_uint8_enum_field@@Base+0x5c>
   2b028:	bl	2a810 <flatcc_json_printer_uint8_field@@Base+0xb0>
   2b02c:	mov	r6, r0
   2b030:	cmp	r0, r7
   2b034:	bne	2b05c <flatcc_json_printer_uint8_enum_field@@Base+0x6c>
   2b038:	ldrb	r0, [r4, #28]
   2b03c:	cmp	r0, #0
   2b040:	beq	2b05c <flatcc_json_printer_uint8_enum_field@@Base+0x6c>
   2b044:	sub	sp, fp, #28
   2b048:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2b04c:	ldrb	r0, [r4, #29]
   2b050:	cmp	r0, #0
   2b054:	mov	r6, r7
   2b058:	beq	2b044 <flatcc_json_printer_uint8_enum_field@@Base+0x54>
   2b05c:	ldr	r0, [r5, #16]
   2b060:	add	r1, r0, #1
   2b064:	str	r1, [r5, #16]
   2b068:	cmp	r0, #0
   2b06c:	beq	2b084 <flatcc_json_printer_uint8_enum_field@@Base+0x94>
   2b070:	ldr	r0, [r4, #20]
   2b074:	add	r1, r0, #1
   2b078:	str	r1, [r4, #20]
   2b07c:	mov	r1, #44	; 0x2c
   2b080:	strb	r1, [r0]
   2b084:	mov	r0, r4
   2b088:	mov	r1, r8
   2b08c:	mov	r2, r9
   2b090:	bl	2a4a0 <flatcc_json_printer_string_field@@Base+0xc0>
   2b094:	ldrb	r0, [r4, #27]
   2b098:	cmp	r0, #0
   2b09c:	beq	2b0c0 <flatcc_json_printer_uint8_enum_field@@Base+0xd0>
   2b0a0:	ldr	r1, [r4, #20]
   2b0a4:	mov	r0, r6
   2b0a8:	bl	296bc <flatcc_json_printer_uint8@@Base+0x2c>
   2b0ac:	ldr	r1, [r4, #20]
   2b0b0:	add	r0, r1, r0
   2b0b4:	str	r0, [r4, #20]
   2b0b8:	sub	sp, fp, #28
   2b0bc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2b0c0:	mov	r0, r4
   2b0c4:	mov	r1, r6
   2b0c8:	mov	r2, sl
   2b0cc:	sub	sp, fp, #28
   2b0d0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2b0d4:	bx	r2

0002b0d8 <flatcc_json_printer_uint16_enum_field@@Base>:
   2b0d8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2b0dc:	add	fp, sp, #28
   2b0e0:	sub	sp, sp, #4
   2b0e4:	mov	r8, r3
   2b0e8:	mov	r5, r1
   2b0ec:	mov	r4, r0
   2b0f0:	mov	r0, r1
   2b0f4:	mov	r1, r2
   2b0f8:	bl	2a460 <flatcc_json_printer_string_field@@Base+0x80>
   2b0fc:	ldr	sl, [fp, #16]
   2b100:	ldr	r7, [fp, #12]
   2b104:	ldr	r9, [fp, #8]
   2b108:	cmp	r0, #0
   2b10c:	beq	2b134 <flatcc_json_printer_uint16_enum_field@@Base+0x5c>
   2b110:	bl	2a8c8 <flatcc_json_printer_uint16_field@@Base+0xb0>
   2b114:	mov	r6, r0
   2b118:	cmp	r0, r7
   2b11c:	bne	2b144 <flatcc_json_printer_uint16_enum_field@@Base+0x6c>
   2b120:	ldrb	r0, [r4, #28]
   2b124:	cmp	r0, #0
   2b128:	beq	2b144 <flatcc_json_printer_uint16_enum_field@@Base+0x6c>
   2b12c:	sub	sp, fp, #28
   2b130:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2b134:	ldrb	r0, [r4, #29]
   2b138:	cmp	r0, #0
   2b13c:	mov	r6, r7
   2b140:	beq	2b12c <flatcc_json_printer_uint16_enum_field@@Base+0x54>
   2b144:	ldr	r0, [r5, #16]
   2b148:	add	r1, r0, #1
   2b14c:	str	r1, [r5, #16]
   2b150:	cmp	r0, #0
   2b154:	beq	2b16c <flatcc_json_printer_uint16_enum_field@@Base+0x94>
   2b158:	ldr	r0, [r4, #20]
   2b15c:	add	r1, r0, #1
   2b160:	str	r1, [r4, #20]
   2b164:	mov	r1, #44	; 0x2c
   2b168:	strb	r1, [r0]
   2b16c:	mov	r0, r4
   2b170:	mov	r1, r8
   2b174:	mov	r2, r9
   2b178:	bl	2a4a0 <flatcc_json_printer_string_field@@Base+0xc0>
   2b17c:	ldrb	r0, [r4, #27]
   2b180:	cmp	r0, #0
   2b184:	beq	2b1a8 <flatcc_json_printer_uint16_enum_field@@Base+0xd0>
   2b188:	ldr	r1, [r4, #20]
   2b18c:	mov	r0, r6
   2b190:	bl	2978c <flatcc_json_printer_uint16@@Base+0x2c>
   2b194:	ldr	r1, [r4, #20]
   2b198:	add	r0, r1, r0
   2b19c:	str	r0, [r4, #20]
   2b1a0:	sub	sp, fp, #28
   2b1a4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2b1a8:	mov	r0, r4
   2b1ac:	mov	r1, r6
   2b1b0:	mov	r2, sl
   2b1b4:	sub	sp, fp, #28
   2b1b8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2b1bc:	bx	r2

0002b1c0 <flatcc_json_printer_uint32_enum_field@@Base>:
   2b1c0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2b1c4:	add	fp, sp, #28
   2b1c8:	sub	sp, sp, #4
   2b1cc:	mov	r8, r3
   2b1d0:	mov	r5, r1
   2b1d4:	mov	r4, r0
   2b1d8:	mov	r0, r1
   2b1dc:	mov	r1, r2
   2b1e0:	bl	2a460 <flatcc_json_printer_string_field@@Base+0x80>
   2b1e4:	ldr	sl, [fp, #16]
   2b1e8:	ldr	r7, [fp, #12]
   2b1ec:	ldr	r9, [fp, #8]
   2b1f0:	cmp	r0, #0
   2b1f4:	beq	2b21c <flatcc_json_printer_uint32_enum_field@@Base+0x5c>
   2b1f8:	bl	2a980 <flatcc_json_printer_uint32_field@@Base+0xb0>
   2b1fc:	mov	r6, r0
   2b200:	cmp	r0, r7
   2b204:	bne	2b22c <flatcc_json_printer_uint32_enum_field@@Base+0x6c>
   2b208:	ldrb	r0, [r4, #28]
   2b20c:	cmp	r0, #0
   2b210:	beq	2b22c <flatcc_json_printer_uint32_enum_field@@Base+0x6c>
   2b214:	sub	sp, fp, #28
   2b218:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2b21c:	ldrb	r0, [r4, #29]
   2b220:	cmp	r0, #0
   2b224:	mov	r6, r7
   2b228:	beq	2b214 <flatcc_json_printer_uint32_enum_field@@Base+0x54>
   2b22c:	ldr	r0, [r5, #16]
   2b230:	add	r1, r0, #1
   2b234:	str	r1, [r5, #16]
   2b238:	cmp	r0, #0
   2b23c:	beq	2b254 <flatcc_json_printer_uint32_enum_field@@Base+0x94>
   2b240:	ldr	r0, [r4, #20]
   2b244:	add	r1, r0, #1
   2b248:	str	r1, [r4, #20]
   2b24c:	mov	r1, #44	; 0x2c
   2b250:	strb	r1, [r0]
   2b254:	mov	r0, r4
   2b258:	mov	r1, r8
   2b25c:	mov	r2, r9
   2b260:	bl	2a4a0 <flatcc_json_printer_string_field@@Base+0xc0>
   2b264:	ldrb	r0, [r4, #27]
   2b268:	cmp	r0, #0
   2b26c:	beq	2b290 <flatcc_json_printer_uint32_enum_field@@Base+0xd0>
   2b270:	ldr	r1, [r4, #20]
   2b274:	mov	r0, r6
   2b278:	bl	29928 <flatcc_json_printer_uint32@@Base+0x2c>
   2b27c:	ldr	r1, [r4, #20]
   2b280:	add	r0, r1, r0
   2b284:	str	r0, [r4, #20]
   2b288:	sub	sp, fp, #28
   2b28c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2b290:	mov	r0, r4
   2b294:	mov	r1, r6
   2b298:	mov	r2, sl
   2b29c:	sub	sp, fp, #28
   2b2a0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2b2a4:	bx	r2

0002b2a8 <flatcc_json_printer_uint64_enum_field@@Base>:
   2b2a8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2b2ac:	add	fp, sp, #28
   2b2b0:	sub	sp, sp, #12
   2b2b4:	str	r3, [sp, #8]
   2b2b8:	mov	r6, r1
   2b2bc:	mov	r4, r0
   2b2c0:	mov	r0, r1
   2b2c4:	mov	r1, r2
   2b2c8:	bl	2a460 <flatcc_json_printer_string_field@@Base+0x80>
   2b2cc:	ldr	r5, [fp, #20]
   2b2d0:	ldr	r7, [fp, #16]
   2b2d4:	ldr	r1, [fp, #24]
   2b2d8:	str	r1, [sp, #4]
   2b2dc:	ldr	r9, [fp, #8]
   2b2e0:	cmp	r0, #0
   2b2e4:	beq	2b318 <flatcc_json_printer_uint64_enum_field@@Base+0x70>
   2b2e8:	bl	2aa5c <flatcc_json_printer_uint64_field@@Base+0xd4>
   2b2ec:	mov	r8, r0
   2b2f0:	mov	sl, r1
   2b2f4:	eor	r0, r1, r5
   2b2f8:	eor	r1, r8, r7
   2b2fc:	orrs	r0, r1, r0
   2b300:	bne	2b32c <flatcc_json_printer_uint64_enum_field@@Base+0x84>
   2b304:	ldrb	r0, [r4, #28]
   2b308:	cmp	r0, #0
   2b30c:	beq	2b32c <flatcc_json_printer_uint64_enum_field@@Base+0x84>
   2b310:	sub	sp, fp, #28
   2b314:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2b318:	ldrb	r0, [r4, #29]
   2b31c:	cmp	r0, #0
   2b320:	mov	r8, r7
   2b324:	mov	sl, r5
   2b328:	beq	2b310 <flatcc_json_printer_uint64_enum_field@@Base+0x68>
   2b32c:	ldr	r0, [r6, #16]
   2b330:	add	r1, r0, #1
   2b334:	str	r1, [r6, #16]
   2b338:	cmp	r0, #0
   2b33c:	beq	2b354 <flatcc_json_printer_uint64_enum_field@@Base+0xac>
   2b340:	ldr	r0, [r4, #20]
   2b344:	add	r1, r0, #1
   2b348:	str	r1, [r4, #20]
   2b34c:	mov	r1, #44	; 0x2c
   2b350:	strb	r1, [r0]
   2b354:	mov	r0, r4
   2b358:	ldr	r1, [sp, #8]
   2b35c:	mov	r2, r9
   2b360:	bl	2a4a0 <flatcc_json_printer_string_field@@Base+0xc0>
   2b364:	ldrb	r0, [r4, #27]
   2b368:	cmp	r0, #0
   2b36c:	beq	2b394 <flatcc_json_printer_uint64_enum_field@@Base+0xec>
   2b370:	ldr	r2, [r4, #20]
   2b374:	mov	r0, r8
   2b378:	mov	r1, sl
   2b37c:	bl	29c50 <flatcc_json_printer_uint64@@Base+0x30>
   2b380:	ldr	r1, [r4, #20]
   2b384:	add	r0, r1, r0
   2b388:	str	r0, [r4, #20]
   2b38c:	sub	sp, fp, #28
   2b390:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2b394:	mov	r0, r4
   2b398:	mov	r2, r8
   2b39c:	mov	r3, sl
   2b3a0:	ldr	r1, [sp, #4]
   2b3a4:	sub	sp, fp, #28
   2b3a8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2b3ac:	bx	r1

0002b3b0 <flatcc_json_printer_int8_enum_field@@Base>:
   2b3b0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2b3b4:	add	fp, sp, #28
   2b3b8:	sub	sp, sp, #4
   2b3bc:	mov	r8, r3
   2b3c0:	mov	r5, r1
   2b3c4:	mov	r4, r0
   2b3c8:	mov	r0, r1
   2b3cc:	mov	r1, r2
   2b3d0:	bl	2a460 <flatcc_json_printer_string_field@@Base+0x80>
   2b3d4:	ldr	sl, [fp, #16]
   2b3d8:	ldr	r7, [fp, #12]
   2b3dc:	ldr	r9, [fp, #8]
   2b3e0:	cmp	r0, #0
   2b3e4:	beq	2b40c <flatcc_json_printer_int8_enum_field@@Base+0x5c>
   2b3e8:	bl	2ab14 <flatcc_json_printer_int8_field@@Base+0xb0>
   2b3ec:	mov	r6, r0
   2b3f0:	cmp	r0, r7
   2b3f4:	bne	2b41c <flatcc_json_printer_int8_enum_field@@Base+0x6c>
   2b3f8:	ldrb	r0, [r4, #28]
   2b3fc:	cmp	r0, #0
   2b400:	beq	2b41c <flatcc_json_printer_int8_enum_field@@Base+0x6c>
   2b404:	sub	sp, fp, #28
   2b408:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2b40c:	ldrb	r0, [r4, #29]
   2b410:	cmp	r0, #0
   2b414:	mov	r6, r7
   2b418:	beq	2b404 <flatcc_json_printer_int8_enum_field@@Base+0x54>
   2b41c:	ldr	r0, [r5, #16]
   2b420:	add	r1, r0, #1
   2b424:	str	r1, [r5, #16]
   2b428:	cmp	r0, #0
   2b42c:	beq	2b444 <flatcc_json_printer_int8_enum_field@@Base+0x94>
   2b430:	ldr	r0, [r4, #20]
   2b434:	add	r1, r0, #1
   2b438:	str	r1, [r4, #20]
   2b43c:	mov	r1, #44	; 0x2c
   2b440:	strb	r1, [r0]
   2b444:	mov	r0, r4
   2b448:	mov	r1, r8
   2b44c:	mov	r2, r9
   2b450:	bl	2a4a0 <flatcc_json_printer_string_field@@Base+0xc0>
   2b454:	ldrb	r0, [r4, #27]
   2b458:	cmp	r0, #0
   2b45c:	beq	2b480 <flatcc_json_printer_int8_enum_field@@Base+0xd0>
   2b460:	ldr	r1, [r4, #20]
   2b464:	mov	r0, r6
   2b468:	bl	2a158 <flatcc_json_printer_int8@@Base+0x2c>
   2b46c:	ldr	r1, [r4, #20]
   2b470:	add	r0, r1, r0
   2b474:	str	r0, [r4, #20]
   2b478:	sub	sp, fp, #28
   2b47c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2b480:	mov	r0, r4
   2b484:	mov	r1, r6
   2b488:	mov	r2, sl
   2b48c:	sub	sp, fp, #28
   2b490:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2b494:	bx	r2

0002b498 <flatcc_json_printer_int16_enum_field@@Base>:
   2b498:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2b49c:	add	fp, sp, #28
   2b4a0:	sub	sp, sp, #4
   2b4a4:	mov	r8, r3
   2b4a8:	mov	r5, r1
   2b4ac:	mov	r4, r0
   2b4b0:	mov	r0, r1
   2b4b4:	mov	r1, r2
   2b4b8:	bl	2a460 <flatcc_json_printer_string_field@@Base+0x80>
   2b4bc:	ldr	sl, [fp, #16]
   2b4c0:	ldr	r7, [fp, #12]
   2b4c4:	ldr	r9, [fp, #8]
   2b4c8:	cmp	r0, #0
   2b4cc:	beq	2b4f4 <flatcc_json_printer_int16_enum_field@@Base+0x5c>
   2b4d0:	bl	2abcc <flatcc_json_printer_int16_field@@Base+0xb0>
   2b4d4:	mov	r6, r0
   2b4d8:	cmp	r0, r7
   2b4dc:	bne	2b504 <flatcc_json_printer_int16_enum_field@@Base+0x6c>
   2b4e0:	ldrb	r0, [r4, #28]
   2b4e4:	cmp	r0, #0
   2b4e8:	beq	2b504 <flatcc_json_printer_int16_enum_field@@Base+0x6c>
   2b4ec:	sub	sp, fp, #28
   2b4f0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2b4f4:	ldrb	r0, [r4, #29]
   2b4f8:	cmp	r0, #0
   2b4fc:	mov	r6, r7
   2b500:	beq	2b4ec <flatcc_json_printer_int16_enum_field@@Base+0x54>
   2b504:	ldr	r0, [r5, #16]
   2b508:	add	r1, r0, #1
   2b50c:	str	r1, [r5, #16]
   2b510:	cmp	r0, #0
   2b514:	beq	2b52c <flatcc_json_printer_int16_enum_field@@Base+0x94>
   2b518:	ldr	r0, [r4, #20]
   2b51c:	add	r1, r0, #1
   2b520:	str	r1, [r4, #20]
   2b524:	mov	r1, #44	; 0x2c
   2b528:	strb	r1, [r0]
   2b52c:	mov	r0, r4
   2b530:	mov	r1, r8
   2b534:	mov	r2, r9
   2b538:	bl	2a4a0 <flatcc_json_printer_string_field@@Base+0xc0>
   2b53c:	ldrb	r0, [r4, #27]
   2b540:	cmp	r0, #0
   2b544:	beq	2b568 <flatcc_json_printer_int16_enum_field@@Base+0xd0>
   2b548:	ldr	r1, [r4, #20]
   2b54c:	mov	r0, r6
   2b550:	bl	2a1b4 <flatcc_json_printer_int16@@Base+0x2c>
   2b554:	ldr	r1, [r4, #20]
   2b558:	add	r0, r1, r0
   2b55c:	str	r0, [r4, #20]
   2b560:	sub	sp, fp, #28
   2b564:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2b568:	mov	r0, r4
   2b56c:	mov	r1, r6
   2b570:	mov	r2, sl
   2b574:	sub	sp, fp, #28
   2b578:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2b57c:	bx	r2

0002b580 <flatcc_json_printer_int32_enum_field@@Base>:
   2b580:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2b584:	add	fp, sp, #28
   2b588:	sub	sp, sp, #4
   2b58c:	mov	r8, r3
   2b590:	mov	r5, r1
   2b594:	mov	r4, r0
   2b598:	mov	r0, r1
   2b59c:	mov	r1, r2
   2b5a0:	bl	2a460 <flatcc_json_printer_string_field@@Base+0x80>
   2b5a4:	ldr	sl, [fp, #16]
   2b5a8:	ldr	r7, [fp, #12]
   2b5ac:	ldr	r9, [fp, #8]
   2b5b0:	cmp	r0, #0
   2b5b4:	beq	2b5dc <flatcc_json_printer_int32_enum_field@@Base+0x5c>
   2b5b8:	bl	2ac84 <flatcc_json_printer_int32_field@@Base+0xb0>
   2b5bc:	mov	r6, r0
   2b5c0:	cmp	r0, r7
   2b5c4:	bne	2b5ec <flatcc_json_printer_int32_enum_field@@Base+0x6c>
   2b5c8:	ldrb	r0, [r4, #28]
   2b5cc:	cmp	r0, #0
   2b5d0:	beq	2b5ec <flatcc_json_printer_int32_enum_field@@Base+0x6c>
   2b5d4:	sub	sp, fp, #28
   2b5d8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2b5dc:	ldrb	r0, [r4, #29]
   2b5e0:	cmp	r0, #0
   2b5e4:	mov	r6, r7
   2b5e8:	beq	2b5d4 <flatcc_json_printer_int32_enum_field@@Base+0x54>
   2b5ec:	ldr	r0, [r5, #16]
   2b5f0:	add	r1, r0, #1
   2b5f4:	str	r1, [r5, #16]
   2b5f8:	cmp	r0, #0
   2b5fc:	beq	2b614 <flatcc_json_printer_int32_enum_field@@Base+0x94>
   2b600:	ldr	r0, [r4, #20]
   2b604:	add	r1, r0, #1
   2b608:	str	r1, [r4, #20]
   2b60c:	mov	r1, #44	; 0x2c
   2b610:	strb	r1, [r0]
   2b614:	mov	r0, r4
   2b618:	mov	r1, r8
   2b61c:	mov	r2, r9
   2b620:	bl	2a4a0 <flatcc_json_printer_string_field@@Base+0xc0>
   2b624:	ldrb	r0, [r4, #27]
   2b628:	cmp	r0, #0
   2b62c:	beq	2b650 <flatcc_json_printer_int32_enum_field@@Base+0xd0>
   2b630:	ldr	r1, [r4, #20]
   2b634:	mov	r0, r6
   2b638:	bl	2a210 <flatcc_json_printer_int32@@Base+0x2c>
   2b63c:	ldr	r1, [r4, #20]
   2b640:	add	r0, r1, r0
   2b644:	str	r0, [r4, #20]
   2b648:	sub	sp, fp, #28
   2b64c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2b650:	mov	r0, r4
   2b654:	mov	r1, r6
   2b658:	mov	r2, sl
   2b65c:	sub	sp, fp, #28
   2b660:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2b664:	bx	r2

0002b668 <flatcc_json_printer_int64_enum_field@@Base>:
   2b668:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2b66c:	add	fp, sp, #28
   2b670:	sub	sp, sp, #12
   2b674:	str	r3, [sp, #8]
   2b678:	mov	r6, r1
   2b67c:	mov	r4, r0
   2b680:	mov	r0, r1
   2b684:	mov	r1, r2
   2b688:	bl	2a460 <flatcc_json_printer_string_field@@Base+0x80>
   2b68c:	ldr	r5, [fp, #20]
   2b690:	ldr	r7, [fp, #16]
   2b694:	ldr	r1, [fp, #24]
   2b698:	str	r1, [sp, #4]
   2b69c:	ldr	r9, [fp, #8]
   2b6a0:	cmp	r0, #0
   2b6a4:	beq	2b6d8 <flatcc_json_printer_int64_enum_field@@Base+0x70>
   2b6a8:	bl	2ad60 <flatcc_json_printer_int64_field@@Base+0xd4>
   2b6ac:	mov	r8, r0
   2b6b0:	mov	sl, r1
   2b6b4:	eor	r0, r1, r5
   2b6b8:	eor	r1, r8, r7
   2b6bc:	orrs	r0, r1, r0
   2b6c0:	bne	2b6ec <flatcc_json_printer_int64_enum_field@@Base+0x84>
   2b6c4:	ldrb	r0, [r4, #28]
   2b6c8:	cmp	r0, #0
   2b6cc:	beq	2b6ec <flatcc_json_printer_int64_enum_field@@Base+0x84>
   2b6d0:	sub	sp, fp, #28
   2b6d4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2b6d8:	ldrb	r0, [r4, #29]
   2b6dc:	cmp	r0, #0
   2b6e0:	mov	r8, r7
   2b6e4:	mov	sl, r5
   2b6e8:	beq	2b6d0 <flatcc_json_printer_int64_enum_field@@Base+0x68>
   2b6ec:	ldr	r0, [r6, #16]
   2b6f0:	add	r1, r0, #1
   2b6f4:	str	r1, [r6, #16]
   2b6f8:	cmp	r0, #0
   2b6fc:	beq	2b714 <flatcc_json_printer_int64_enum_field@@Base+0xac>
   2b700:	ldr	r0, [r4, #20]
   2b704:	add	r1, r0, #1
   2b708:	str	r1, [r4, #20]
   2b70c:	mov	r1, #44	; 0x2c
   2b710:	strb	r1, [r0]
   2b714:	mov	r0, r4
   2b718:	ldr	r1, [sp, #8]
   2b71c:	mov	r2, r9
   2b720:	bl	2a4a0 <flatcc_json_printer_string_field@@Base+0xc0>
   2b724:	ldrb	r0, [r4, #27]
   2b728:	cmp	r0, #0
   2b72c:	beq	2b754 <flatcc_json_printer_int64_enum_field@@Base+0xec>
   2b730:	ldr	r2, [r4, #20]
   2b734:	mov	r0, r8
   2b738:	mov	r1, sl
   2b73c:	bl	2a268 <flatcc_json_printer_int64@@Base+0x30>
   2b740:	ldr	r1, [r4, #20]
   2b744:	add	r0, r1, r0
   2b748:	str	r0, [r4, #20]
   2b74c:	sub	sp, fp, #28
   2b750:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2b754:	mov	r0, r4
   2b758:	mov	r2, r8
   2b75c:	mov	r3, sl
   2b760:	ldr	r1, [sp, #4]
   2b764:	sub	sp, fp, #28
   2b768:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2b76c:	bx	r1

0002b770 <flatcc_json_printer_bool_enum_field@@Base>:
   2b770:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2b774:	add	fp, sp, #28
   2b778:	sub	sp, sp, #4
   2b77c:	mov	r8, r3
   2b780:	mov	r5, r1
   2b784:	mov	r4, r0
   2b788:	mov	r0, r1
   2b78c:	mov	r1, r2
   2b790:	bl	2a460 <flatcc_json_printer_string_field@@Base+0x80>
   2b794:	ldr	sl, [fp, #16]
   2b798:	ldr	r7, [fp, #12]
   2b79c:	ldr	r9, [fp, #8]
   2b7a0:	cmp	r0, #0
   2b7a4:	beq	2b7cc <flatcc_json_printer_bool_enum_field@@Base+0x5c>
   2b7a8:	bl	2ae18 <flatcc_json_printer_bool_field@@Base+0xb0>
   2b7ac:	mov	r6, r0
   2b7b0:	cmp	r0, r7
   2b7b4:	bne	2b7dc <flatcc_json_printer_bool_enum_field@@Base+0x6c>
   2b7b8:	ldrb	r0, [r4, #28]
   2b7bc:	cmp	r0, #0
   2b7c0:	beq	2b7dc <flatcc_json_printer_bool_enum_field@@Base+0x6c>
   2b7c4:	sub	sp, fp, #28
   2b7c8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2b7cc:	ldrb	r0, [r4, #29]
   2b7d0:	cmp	r0, #0
   2b7d4:	mov	r6, r7
   2b7d8:	beq	2b7c4 <flatcc_json_printer_bool_enum_field@@Base+0x54>
   2b7dc:	ldr	r0, [r5, #16]
   2b7e0:	add	r1, r0, #1
   2b7e4:	str	r1, [r5, #16]
   2b7e8:	cmp	r0, #0
   2b7ec:	beq	2b804 <flatcc_json_printer_bool_enum_field@@Base+0x94>
   2b7f0:	ldr	r0, [r4, #20]
   2b7f4:	add	r1, r0, #1
   2b7f8:	str	r1, [r4, #20]
   2b7fc:	mov	r1, #44	; 0x2c
   2b800:	strb	r1, [r0]
   2b804:	mov	r0, r4
   2b808:	mov	r1, r8
   2b80c:	mov	r2, r9
   2b810:	bl	2a4a0 <flatcc_json_printer_string_field@@Base+0xc0>
   2b814:	ldrb	r0, [r4, #27]
   2b818:	cmp	r0, #0
   2b81c:	beq	2b840 <flatcc_json_printer_bool_enum_field@@Base+0xd0>
   2b820:	ldr	r1, [r4, #20]
   2b824:	mov	r0, r6
   2b828:	bl	2ae20 <flatcc_json_printer_bool_field@@Base+0xb8>
   2b82c:	ldr	r1, [r4, #20]
   2b830:	add	r0, r1, r0
   2b834:	str	r0, [r4, #20]
   2b838:	sub	sp, fp, #28
   2b83c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2b840:	mov	r0, r4
   2b844:	mov	r1, r6
   2b848:	mov	r2, sl
   2b84c:	sub	sp, fp, #28
   2b850:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2b854:	bx	r2

0002b858 <flatcc_json_printer_uint8_struct_field@@Base>:
   2b858:	push	{r4, r5, r6, sl, fp, lr}
   2b85c:	add	fp, sp, #16
   2b860:	mov	r6, r1
   2b864:	mov	r4, r0
   2b868:	add	r0, r2, r3
   2b86c:	bl	2a810 <flatcc_json_printer_uint8_field@@Base+0xb0>
   2b870:	mov	r5, r0
   2b874:	ldr	r2, [fp, #12]
   2b878:	ldr	r1, [fp, #8]
   2b87c:	cmp	r6, #0
   2b880:	beq	2b898 <flatcc_json_printer_uint8_struct_field@@Base+0x40>
   2b884:	ldr	r0, [r4, #20]
   2b888:	add	r3, r0, #1
   2b88c:	str	r3, [r4, #20]
   2b890:	mov	r3, #44	; 0x2c
   2b894:	strb	r3, [r0]
   2b898:	mov	r0, r4
   2b89c:	bl	2a4a0 <flatcc_json_printer_string_field@@Base+0xc0>
   2b8a0:	ldr	r1, [r4, #20]
   2b8a4:	mov	r0, r5
   2b8a8:	bl	296bc <flatcc_json_printer_uint8@@Base+0x2c>
   2b8ac:	ldr	r1, [r4, #20]
   2b8b0:	add	r0, r1, r0
   2b8b4:	str	r0, [r4, #20]
   2b8b8:	pop	{r4, r5, r6, sl, fp, pc}

0002b8bc <flatcc_json_printer_uint16_struct_field@@Base>:
   2b8bc:	push	{r4, r5, r6, sl, fp, lr}
   2b8c0:	add	fp, sp, #16
   2b8c4:	mov	r6, r1
   2b8c8:	mov	r4, r0
   2b8cc:	add	r0, r2, r3
   2b8d0:	bl	2a8c8 <flatcc_json_printer_uint16_field@@Base+0xb0>
   2b8d4:	mov	r5, r0
   2b8d8:	ldr	r2, [fp, #12]
   2b8dc:	ldr	r1, [fp, #8]
   2b8e0:	cmp	r6, #0
   2b8e4:	beq	2b8fc <flatcc_json_printer_uint16_struct_field@@Base+0x40>
   2b8e8:	ldr	r0, [r4, #20]
   2b8ec:	add	r3, r0, #1
   2b8f0:	str	r3, [r4, #20]
   2b8f4:	mov	r3, #44	; 0x2c
   2b8f8:	strb	r3, [r0]
   2b8fc:	mov	r0, r4
   2b900:	bl	2a4a0 <flatcc_json_printer_string_field@@Base+0xc0>
   2b904:	ldr	r1, [r4, #20]
   2b908:	mov	r0, r5
   2b90c:	bl	2978c <flatcc_json_printer_uint16@@Base+0x2c>
   2b910:	ldr	r1, [r4, #20]
   2b914:	add	r0, r1, r0
   2b918:	str	r0, [r4, #20]
   2b91c:	pop	{r4, r5, r6, sl, fp, pc}

0002b920 <flatcc_json_printer_uint32_struct_field@@Base>:
   2b920:	push	{r4, r5, r6, sl, fp, lr}
   2b924:	add	fp, sp, #16
   2b928:	mov	r6, r1
   2b92c:	mov	r4, r0
   2b930:	add	r0, r2, r3
   2b934:	bl	2a980 <flatcc_json_printer_uint32_field@@Base+0xb0>
   2b938:	mov	r5, r0
   2b93c:	ldr	r2, [fp, #12]
   2b940:	ldr	r1, [fp, #8]
   2b944:	cmp	r6, #0
   2b948:	beq	2b960 <flatcc_json_printer_uint32_struct_field@@Base+0x40>
   2b94c:	ldr	r0, [r4, #20]
   2b950:	add	r3, r0, #1
   2b954:	str	r3, [r4, #20]
   2b958:	mov	r3, #44	; 0x2c
   2b95c:	strb	r3, [r0]
   2b960:	mov	r0, r4
   2b964:	bl	2a4a0 <flatcc_json_printer_string_field@@Base+0xc0>
   2b968:	ldr	r1, [r4, #20]
   2b96c:	mov	r0, r5
   2b970:	bl	29928 <flatcc_json_printer_uint32@@Base+0x2c>
   2b974:	ldr	r1, [r4, #20]
   2b978:	add	r0, r1, r0
   2b97c:	str	r0, [r4, #20]
   2b980:	pop	{r4, r5, r6, sl, fp, pc}

0002b984 <flatcc_json_printer_uint64_struct_field@@Base>:
   2b984:	push	{r4, r5, r6, r7, fp, lr}
   2b988:	add	fp, sp, #16
   2b98c:	mov	r7, r1
   2b990:	mov	r4, r0
   2b994:	add	r0, r2, r3
   2b998:	bl	2aa5c <flatcc_json_printer_uint64_field@@Base+0xd4>
   2b99c:	mov	r5, r0
   2b9a0:	mov	r6, r1
   2b9a4:	ldr	r2, [fp, #12]
   2b9a8:	ldr	r1, [fp, #8]
   2b9ac:	cmp	r7, #0
   2b9b0:	beq	2b9c8 <flatcc_json_printer_uint64_struct_field@@Base+0x44>
   2b9b4:	ldr	r0, [r4, #20]
   2b9b8:	add	r3, r0, #1
   2b9bc:	str	r3, [r4, #20]
   2b9c0:	mov	r3, #44	; 0x2c
   2b9c4:	strb	r3, [r0]
   2b9c8:	mov	r0, r4
   2b9cc:	bl	2a4a0 <flatcc_json_printer_string_field@@Base+0xc0>
   2b9d0:	ldr	r2, [r4, #20]
   2b9d4:	mov	r0, r5
   2b9d8:	mov	r1, r6
   2b9dc:	bl	29c50 <flatcc_json_printer_uint64@@Base+0x30>
   2b9e0:	ldr	r1, [r4, #20]
   2b9e4:	add	r0, r1, r0
   2b9e8:	str	r0, [r4, #20]
   2b9ec:	pop	{r4, r5, r6, r7, fp, pc}

0002b9f0 <flatcc_json_printer_int8_struct_field@@Base>:
   2b9f0:	push	{r4, r5, r6, sl, fp, lr}
   2b9f4:	add	fp, sp, #16
   2b9f8:	mov	r6, r1
   2b9fc:	mov	r4, r0
   2ba00:	add	r0, r2, r3
   2ba04:	bl	2ab14 <flatcc_json_printer_int8_field@@Base+0xb0>
   2ba08:	mov	r5, r0
   2ba0c:	ldr	r2, [fp, #12]
   2ba10:	ldr	r1, [fp, #8]
   2ba14:	cmp	r6, #0
   2ba18:	beq	2ba30 <flatcc_json_printer_int8_struct_field@@Base+0x40>
   2ba1c:	ldr	r0, [r4, #20]
   2ba20:	add	r3, r0, #1
   2ba24:	str	r3, [r4, #20]
   2ba28:	mov	r3, #44	; 0x2c
   2ba2c:	strb	r3, [r0]
   2ba30:	mov	r0, r4
   2ba34:	bl	2a4a0 <flatcc_json_printer_string_field@@Base+0xc0>
   2ba38:	ldr	r1, [r4, #20]
   2ba3c:	mov	r0, r5
   2ba40:	bl	2a158 <flatcc_json_printer_int8@@Base+0x2c>
   2ba44:	ldr	r1, [r4, #20]
   2ba48:	add	r0, r1, r0
   2ba4c:	str	r0, [r4, #20]
   2ba50:	pop	{r4, r5, r6, sl, fp, pc}

0002ba54 <flatcc_json_printer_int16_struct_field@@Base>:
   2ba54:	push	{r4, r5, r6, sl, fp, lr}
   2ba58:	add	fp, sp, #16
   2ba5c:	mov	r6, r1
   2ba60:	mov	r4, r0
   2ba64:	add	r0, r2, r3
   2ba68:	bl	2abcc <flatcc_json_printer_int16_field@@Base+0xb0>
   2ba6c:	mov	r5, r0
   2ba70:	ldr	r2, [fp, #12]
   2ba74:	ldr	r1, [fp, #8]
   2ba78:	cmp	r6, #0
   2ba7c:	beq	2ba94 <flatcc_json_printer_int16_struct_field@@Base+0x40>
   2ba80:	ldr	r0, [r4, #20]
   2ba84:	add	r3, r0, #1
   2ba88:	str	r3, [r4, #20]
   2ba8c:	mov	r3, #44	; 0x2c
   2ba90:	strb	r3, [r0]
   2ba94:	mov	r0, r4
   2ba98:	bl	2a4a0 <flatcc_json_printer_string_field@@Base+0xc0>
   2ba9c:	ldr	r1, [r4, #20]
   2baa0:	mov	r0, r5
   2baa4:	bl	2a1b4 <flatcc_json_printer_int16@@Base+0x2c>
   2baa8:	ldr	r1, [r4, #20]
   2baac:	add	r0, r1, r0
   2bab0:	str	r0, [r4, #20]
   2bab4:	pop	{r4, r5, r6, sl, fp, pc}

0002bab8 <flatcc_json_printer_int32_struct_field@@Base>:
   2bab8:	push	{r4, r5, r6, sl, fp, lr}
   2babc:	add	fp, sp, #16
   2bac0:	mov	r6, r1
   2bac4:	mov	r4, r0
   2bac8:	add	r0, r2, r3
   2bacc:	bl	2ac84 <flatcc_json_printer_int32_field@@Base+0xb0>
   2bad0:	mov	r5, r0
   2bad4:	ldr	r2, [fp, #12]
   2bad8:	ldr	r1, [fp, #8]
   2badc:	cmp	r6, #0
   2bae0:	beq	2baf8 <flatcc_json_printer_int32_struct_field@@Base+0x40>
   2bae4:	ldr	r0, [r4, #20]
   2bae8:	add	r3, r0, #1
   2baec:	str	r3, [r4, #20]
   2baf0:	mov	r3, #44	; 0x2c
   2baf4:	strb	r3, [r0]
   2baf8:	mov	r0, r4
   2bafc:	bl	2a4a0 <flatcc_json_printer_string_field@@Base+0xc0>
   2bb00:	ldr	r1, [r4, #20]
   2bb04:	mov	r0, r5
   2bb08:	bl	2a210 <flatcc_json_printer_int32@@Base+0x2c>
   2bb0c:	ldr	r1, [r4, #20]
   2bb10:	add	r0, r1, r0
   2bb14:	str	r0, [r4, #20]
   2bb18:	pop	{r4, r5, r6, sl, fp, pc}

0002bb1c <flatcc_json_printer_int64_struct_field@@Base>:
   2bb1c:	push	{r4, r5, r6, r7, fp, lr}
   2bb20:	add	fp, sp, #16
   2bb24:	mov	r7, r1
   2bb28:	mov	r4, r0
   2bb2c:	add	r0, r2, r3
   2bb30:	bl	2ad60 <flatcc_json_printer_int64_field@@Base+0xd4>
   2bb34:	mov	r5, r0
   2bb38:	mov	r6, r1
   2bb3c:	ldr	r2, [fp, #12]
   2bb40:	ldr	r1, [fp, #8]
   2bb44:	cmp	r7, #0
   2bb48:	beq	2bb60 <flatcc_json_printer_int64_struct_field@@Base+0x44>
   2bb4c:	ldr	r0, [r4, #20]
   2bb50:	add	r3, r0, #1
   2bb54:	str	r3, [r4, #20]
   2bb58:	mov	r3, #44	; 0x2c
   2bb5c:	strb	r3, [r0]
   2bb60:	mov	r0, r4
   2bb64:	bl	2a4a0 <flatcc_json_printer_string_field@@Base+0xc0>
   2bb68:	ldr	r2, [r4, #20]
   2bb6c:	mov	r0, r5
   2bb70:	mov	r1, r6
   2bb74:	bl	2a268 <flatcc_json_printer_int64@@Base+0x30>
   2bb78:	ldr	r1, [r4, #20]
   2bb7c:	add	r0, r1, r0
   2bb80:	str	r0, [r4, #20]
   2bb84:	pop	{r4, r5, r6, r7, fp, pc}

0002bb88 <flatcc_json_printer_bool_struct_field@@Base>:
   2bb88:	push	{r4, r5, r6, sl, fp, lr}
   2bb8c:	add	fp, sp, #16
   2bb90:	mov	r6, r1
   2bb94:	mov	r4, r0
   2bb98:	add	r0, r2, r3
   2bb9c:	bl	2ae18 <flatcc_json_printer_bool_field@@Base+0xb0>
   2bba0:	mov	r5, r0
   2bba4:	ldr	r2, [fp, #12]
   2bba8:	ldr	r1, [fp, #8]
   2bbac:	cmp	r6, #0
   2bbb0:	beq	2bbc8 <flatcc_json_printer_bool_struct_field@@Base+0x40>
   2bbb4:	ldr	r0, [r4, #20]
   2bbb8:	add	r3, r0, #1
   2bbbc:	str	r3, [r4, #20]
   2bbc0:	mov	r3, #44	; 0x2c
   2bbc4:	strb	r3, [r0]
   2bbc8:	mov	r0, r4
   2bbcc:	bl	2a4a0 <flatcc_json_printer_string_field@@Base+0xc0>
   2bbd0:	ldr	r1, [r4, #20]
   2bbd4:	mov	r0, r5
   2bbd8:	bl	2ae20 <flatcc_json_printer_bool_field@@Base+0xb8>
   2bbdc:	ldr	r1, [r4, #20]
   2bbe0:	add	r0, r1, r0
   2bbe4:	str	r0, [r4, #20]
   2bbe8:	pop	{r4, r5, r6, sl, fp, pc}

0002bbec <flatcc_json_printer_float_struct_field@@Base>:
   2bbec:	push	{r4, r5, fp, lr}
   2bbf0:	add	fp, sp, #8
   2bbf4:	vpush	{d8}
   2bbf8:	mov	r5, r1
   2bbfc:	mov	r4, r0
   2bc00:	add	r0, r2, r3
   2bc04:	bl	2af20 <flatcc_json_printer_float_field@@Base+0xc0>
   2bc08:	vmov.f32	s16, s0
   2bc0c:	ldr	r2, [fp, #12]
   2bc10:	ldr	r1, [fp, #8]
   2bc14:	cmp	r5, #0
   2bc18:	beq	2bc30 <flatcc_json_printer_float_struct_field@@Base+0x44>
   2bc1c:	ldr	r0, [r4, #20]
   2bc20:	add	r3, r0, #1
   2bc24:	str	r3, [r4, #20]
   2bc28:	mov	r3, #44	; 0x2c
   2bc2c:	strb	r3, [r0]
   2bc30:	mov	r0, r4
   2bc34:	bl	2a4a0 <flatcc_json_printer_string_field@@Base+0xc0>
   2bc38:	ldr	r0, [r4, #20]
   2bc3c:	vcvt.f64.f32	d0, s16
   2bc40:	bl	29058 <flatcc_json_printer_fmt_float@@Base+0x8>
   2bc44:	ldr	r1, [r4, #20]
   2bc48:	add	r0, r1, r0
   2bc4c:	str	r0, [r4, #20]
   2bc50:	vpop	{d8}
   2bc54:	pop	{r4, r5, fp, pc}

0002bc58 <flatcc_json_printer_double_struct_field@@Base>:
   2bc58:	push	{r4, r5, fp, lr}
   2bc5c:	add	fp, sp, #8
   2bc60:	vpush	{d8}
   2bc64:	mov	r5, r1
   2bc68:	mov	r4, r0
   2bc6c:	add	r0, r2, r3
   2bc70:	bl	2afe8 <flatcc_json_printer_double_field@@Base+0xc0>
   2bc74:	vmov.f64	d8, d0
   2bc78:	ldr	r2, [fp, #12]
   2bc7c:	ldr	r1, [fp, #8]
   2bc80:	cmp	r5, #0
   2bc84:	beq	2bc9c <flatcc_json_printer_double_struct_field@@Base+0x44>
   2bc88:	ldr	r0, [r4, #20]
   2bc8c:	add	r3, r0, #1
   2bc90:	str	r3, [r4, #20]
   2bc94:	mov	r3, #44	; 0x2c
   2bc98:	strb	r3, [r0]
   2bc9c:	mov	r0, r4
   2bca0:	bl	2a4a0 <flatcc_json_printer_string_field@@Base+0xc0>
   2bca4:	ldr	r0, [r4, #20]
   2bca8:	vmov.f64	d0, d8
   2bcac:	bl	29058 <flatcc_json_printer_fmt_float@@Base+0x8>
   2bcb0:	ldr	r1, [r4, #20]
   2bcb4:	add	r0, r1, r0
   2bcb8:	str	r0, [r4, #20]
   2bcbc:	vpop	{d8}
   2bcc0:	pop	{r4, r5, fp, pc}

0002bcc4 <flatcc_json_printer_uint8_enum_struct_field@@Base>:
   2bcc4:	push	{r4, r5, r6, r7, fp, lr}
   2bcc8:	add	fp, sp, #16
   2bccc:	mov	r6, r1
   2bcd0:	mov	r4, r0
   2bcd4:	add	r0, r2, r3
   2bcd8:	bl	2a810 <flatcc_json_printer_uint8_field@@Base+0xb0>
   2bcdc:	mov	r5, r0
   2bce0:	add	r7, fp, #8
   2bce4:	ldm	r7, {r1, r2, r7}
   2bce8:	cmp	r6, #0
   2bcec:	beq	2bd04 <flatcc_json_printer_uint8_enum_struct_field@@Base+0x40>
   2bcf0:	ldr	r0, [r4, #20]
   2bcf4:	add	r3, r0, #1
   2bcf8:	str	r3, [r4, #20]
   2bcfc:	mov	r3, #44	; 0x2c
   2bd00:	strb	r3, [r0]
   2bd04:	mov	r0, r4
   2bd08:	bl	2a4a0 <flatcc_json_printer_string_field@@Base+0xc0>
   2bd0c:	ldrb	r0, [r4, #27]
   2bd10:	cmp	r0, #0
   2bd14:	beq	2bd34 <flatcc_json_printer_uint8_enum_struct_field@@Base+0x70>
   2bd18:	ldr	r1, [r4, #20]
   2bd1c:	mov	r0, r5
   2bd20:	bl	296bc <flatcc_json_printer_uint8@@Base+0x2c>
   2bd24:	ldr	r1, [r4, #20]
   2bd28:	add	r0, r1, r0
   2bd2c:	str	r0, [r4, #20]
   2bd30:	pop	{r4, r5, r6, r7, fp, pc}
   2bd34:	mov	r0, r4
   2bd38:	mov	r1, r5
   2bd3c:	mov	r2, r7
   2bd40:	pop	{r4, r5, r6, r7, fp, lr}
   2bd44:	bx	r2

0002bd48 <flatcc_json_printer_uint16_enum_struct_field@@Base>:
   2bd48:	push	{r4, r5, r6, r7, fp, lr}
   2bd4c:	add	fp, sp, #16
   2bd50:	mov	r6, r1
   2bd54:	mov	r4, r0
   2bd58:	add	r0, r2, r3
   2bd5c:	bl	2a8c8 <flatcc_json_printer_uint16_field@@Base+0xb0>
   2bd60:	mov	r5, r0
   2bd64:	add	r7, fp, #8
   2bd68:	ldm	r7, {r1, r2, r7}
   2bd6c:	cmp	r6, #0
   2bd70:	beq	2bd88 <flatcc_json_printer_uint16_enum_struct_field@@Base+0x40>
   2bd74:	ldr	r0, [r4, #20]
   2bd78:	add	r3, r0, #1
   2bd7c:	str	r3, [r4, #20]
   2bd80:	mov	r3, #44	; 0x2c
   2bd84:	strb	r3, [r0]
   2bd88:	mov	r0, r4
   2bd8c:	bl	2a4a0 <flatcc_json_printer_string_field@@Base+0xc0>
   2bd90:	ldrb	r0, [r4, #27]
   2bd94:	cmp	r0, #0
   2bd98:	beq	2bdb8 <flatcc_json_printer_uint16_enum_struct_field@@Base+0x70>
   2bd9c:	ldr	r1, [r4, #20]
   2bda0:	mov	r0, r5
   2bda4:	bl	2978c <flatcc_json_printer_uint16@@Base+0x2c>
   2bda8:	ldr	r1, [r4, #20]
   2bdac:	add	r0, r1, r0
   2bdb0:	str	r0, [r4, #20]
   2bdb4:	pop	{r4, r5, r6, r7, fp, pc}
   2bdb8:	mov	r0, r4
   2bdbc:	mov	r1, r5
   2bdc0:	mov	r2, r7
   2bdc4:	pop	{r4, r5, r6, r7, fp, lr}
   2bdc8:	bx	r2

0002bdcc <flatcc_json_printer_uint32_enum_struct_field@@Base>:
   2bdcc:	push	{r4, r5, r6, r7, fp, lr}
   2bdd0:	add	fp, sp, #16
   2bdd4:	mov	r6, r1
   2bdd8:	mov	r4, r0
   2bddc:	add	r0, r2, r3
   2bde0:	bl	2a980 <flatcc_json_printer_uint32_field@@Base+0xb0>
   2bde4:	mov	r5, r0
   2bde8:	add	r7, fp, #8
   2bdec:	ldm	r7, {r1, r2, r7}
   2bdf0:	cmp	r6, #0
   2bdf4:	beq	2be0c <flatcc_json_printer_uint32_enum_struct_field@@Base+0x40>
   2bdf8:	ldr	r0, [r4, #20]
   2bdfc:	add	r3, r0, #1
   2be00:	str	r3, [r4, #20]
   2be04:	mov	r3, #44	; 0x2c
   2be08:	strb	r3, [r0]
   2be0c:	mov	r0, r4
   2be10:	bl	2a4a0 <flatcc_json_printer_string_field@@Base+0xc0>
   2be14:	ldrb	r0, [r4, #27]
   2be18:	cmp	r0, #0
   2be1c:	beq	2be3c <flatcc_json_printer_uint32_enum_struct_field@@Base+0x70>
   2be20:	ldr	r1, [r4, #20]
   2be24:	mov	r0, r5
   2be28:	bl	29928 <flatcc_json_printer_uint32@@Base+0x2c>
   2be2c:	ldr	r1, [r4, #20]
   2be30:	add	r0, r1, r0
   2be34:	str	r0, [r4, #20]
   2be38:	pop	{r4, r5, r6, r7, fp, pc}
   2be3c:	mov	r0, r4
   2be40:	mov	r1, r5
   2be44:	mov	r2, r7
   2be48:	pop	{r4, r5, r6, r7, fp, lr}
   2be4c:	bx	r2

0002be50 <flatcc_json_printer_uint64_enum_struct_field@@Base>:
   2be50:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   2be54:	add	fp, sp, #24
   2be58:	mov	r7, r1
   2be5c:	mov	r4, r0
   2be60:	add	r0, r2, r3
   2be64:	bl	2aa5c <flatcc_json_printer_uint64_field@@Base+0xd4>
   2be68:	mov	r6, r0
   2be6c:	mov	r5, r1
   2be70:	add	r8, fp, #8
   2be74:	ldm	r8, {r1, r2, r8}
   2be78:	cmp	r7, #0
   2be7c:	beq	2be94 <flatcc_json_printer_uint64_enum_struct_field@@Base+0x44>
   2be80:	ldr	r0, [r4, #20]
   2be84:	add	r3, r0, #1
   2be88:	str	r3, [r4, #20]
   2be8c:	mov	r3, #44	; 0x2c
   2be90:	strb	r3, [r0]
   2be94:	mov	r0, r4
   2be98:	bl	2a4a0 <flatcc_json_printer_string_field@@Base+0xc0>
   2be9c:	ldrb	r0, [r4, #27]
   2bea0:	cmp	r0, #0
   2bea4:	beq	2bec8 <flatcc_json_printer_uint64_enum_struct_field@@Base+0x78>
   2bea8:	ldr	r2, [r4, #20]
   2beac:	mov	r0, r6
   2beb0:	mov	r1, r5
   2beb4:	bl	29c50 <flatcc_json_printer_uint64@@Base+0x30>
   2beb8:	ldr	r1, [r4, #20]
   2bebc:	add	r0, r1, r0
   2bec0:	str	r0, [r4, #20]
   2bec4:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   2bec8:	mov	r0, r4
   2becc:	mov	r2, r6
   2bed0:	mov	r3, r5
   2bed4:	mov	r1, r8
   2bed8:	pop	{r4, r5, r6, r7, r8, sl, fp, lr}
   2bedc:	bx	r1

0002bee0 <flatcc_json_printer_int8_enum_struct_field@@Base>:
   2bee0:	push	{r4, r5, r6, r7, fp, lr}
   2bee4:	add	fp, sp, #16
   2bee8:	mov	r6, r1
   2beec:	mov	r4, r0
   2bef0:	add	r0, r2, r3
   2bef4:	bl	2ab14 <flatcc_json_printer_int8_field@@Base+0xb0>
   2bef8:	mov	r5, r0
   2befc:	add	r7, fp, #8
   2bf00:	ldm	r7, {r1, r2, r7}
   2bf04:	cmp	r6, #0
   2bf08:	beq	2bf20 <flatcc_json_printer_int8_enum_struct_field@@Base+0x40>
   2bf0c:	ldr	r0, [r4, #20]
   2bf10:	add	r3, r0, #1
   2bf14:	str	r3, [r4, #20]
   2bf18:	mov	r3, #44	; 0x2c
   2bf1c:	strb	r3, [r0]
   2bf20:	mov	r0, r4
   2bf24:	bl	2a4a0 <flatcc_json_printer_string_field@@Base+0xc0>
   2bf28:	ldrb	r0, [r4, #27]
   2bf2c:	cmp	r0, #0
   2bf30:	beq	2bf50 <flatcc_json_printer_int8_enum_struct_field@@Base+0x70>
   2bf34:	ldr	r1, [r4, #20]
   2bf38:	mov	r0, r5
   2bf3c:	bl	2a158 <flatcc_json_printer_int8@@Base+0x2c>
   2bf40:	ldr	r1, [r4, #20]
   2bf44:	add	r0, r1, r0
   2bf48:	str	r0, [r4, #20]
   2bf4c:	pop	{r4, r5, r6, r7, fp, pc}
   2bf50:	mov	r0, r4
   2bf54:	mov	r1, r5
   2bf58:	mov	r2, r7
   2bf5c:	pop	{r4, r5, r6, r7, fp, lr}
   2bf60:	bx	r2

0002bf64 <flatcc_json_printer_int16_enum_struct_field@@Base>:
   2bf64:	push	{r4, r5, r6, r7, fp, lr}
   2bf68:	add	fp, sp, #16
   2bf6c:	mov	r6, r1
   2bf70:	mov	r4, r0
   2bf74:	add	r0, r2, r3
   2bf78:	bl	2abcc <flatcc_json_printer_int16_field@@Base+0xb0>
   2bf7c:	mov	r5, r0
   2bf80:	add	r7, fp, #8
   2bf84:	ldm	r7, {r1, r2, r7}
   2bf88:	cmp	r6, #0
   2bf8c:	beq	2bfa4 <flatcc_json_printer_int16_enum_struct_field@@Base+0x40>
   2bf90:	ldr	r0, [r4, #20]
   2bf94:	add	r3, r0, #1
   2bf98:	str	r3, [r4, #20]
   2bf9c:	mov	r3, #44	; 0x2c
   2bfa0:	strb	r3, [r0]
   2bfa4:	mov	r0, r4
   2bfa8:	bl	2a4a0 <flatcc_json_printer_string_field@@Base+0xc0>
   2bfac:	ldrb	r0, [r4, #27]
   2bfb0:	cmp	r0, #0
   2bfb4:	beq	2bfd4 <flatcc_json_printer_int16_enum_struct_field@@Base+0x70>
   2bfb8:	ldr	r1, [r4, #20]
   2bfbc:	mov	r0, r5
   2bfc0:	bl	2a1b4 <flatcc_json_printer_int16@@Base+0x2c>
   2bfc4:	ldr	r1, [r4, #20]
   2bfc8:	add	r0, r1, r0
   2bfcc:	str	r0, [r4, #20]
   2bfd0:	pop	{r4, r5, r6, r7, fp, pc}
   2bfd4:	mov	r0, r4
   2bfd8:	mov	r1, r5
   2bfdc:	mov	r2, r7
   2bfe0:	pop	{r4, r5, r6, r7, fp, lr}
   2bfe4:	bx	r2

0002bfe8 <flatcc_json_printer_int32_enum_struct_field@@Base>:
   2bfe8:	push	{r4, r5, r6, r7, fp, lr}
   2bfec:	add	fp, sp, #16
   2bff0:	mov	r6, r1
   2bff4:	mov	r4, r0
   2bff8:	add	r0, r2, r3
   2bffc:	bl	2ac84 <flatcc_json_printer_int32_field@@Base+0xb0>
   2c000:	mov	r5, r0
   2c004:	add	r7, fp, #8
   2c008:	ldm	r7, {r1, r2, r7}
   2c00c:	cmp	r6, #0
   2c010:	beq	2c028 <flatcc_json_printer_int32_enum_struct_field@@Base+0x40>
   2c014:	ldr	r0, [r4, #20]
   2c018:	add	r3, r0, #1
   2c01c:	str	r3, [r4, #20]
   2c020:	mov	r3, #44	; 0x2c
   2c024:	strb	r3, [r0]
   2c028:	mov	r0, r4
   2c02c:	bl	2a4a0 <flatcc_json_printer_string_field@@Base+0xc0>
   2c030:	ldrb	r0, [r4, #27]
   2c034:	cmp	r0, #0
   2c038:	beq	2c058 <flatcc_json_printer_int32_enum_struct_field@@Base+0x70>
   2c03c:	ldr	r1, [r4, #20]
   2c040:	mov	r0, r5
   2c044:	bl	2a210 <flatcc_json_printer_int32@@Base+0x2c>
   2c048:	ldr	r1, [r4, #20]
   2c04c:	add	r0, r1, r0
   2c050:	str	r0, [r4, #20]
   2c054:	pop	{r4, r5, r6, r7, fp, pc}
   2c058:	mov	r0, r4
   2c05c:	mov	r1, r5
   2c060:	mov	r2, r7
   2c064:	pop	{r4, r5, r6, r7, fp, lr}
   2c068:	bx	r2

0002c06c <flatcc_json_printer_int64_enum_struct_field@@Base>:
   2c06c:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   2c070:	add	fp, sp, #24
   2c074:	mov	r7, r1
   2c078:	mov	r4, r0
   2c07c:	add	r0, r2, r3
   2c080:	bl	2ad60 <flatcc_json_printer_int64_field@@Base+0xd4>
   2c084:	mov	r6, r0
   2c088:	mov	r5, r1
   2c08c:	add	r8, fp, #8
   2c090:	ldm	r8, {r1, r2, r8}
   2c094:	cmp	r7, #0
   2c098:	beq	2c0b0 <flatcc_json_printer_int64_enum_struct_field@@Base+0x44>
   2c09c:	ldr	r0, [r4, #20]
   2c0a0:	add	r3, r0, #1
   2c0a4:	str	r3, [r4, #20]
   2c0a8:	mov	r3, #44	; 0x2c
   2c0ac:	strb	r3, [r0]
   2c0b0:	mov	r0, r4
   2c0b4:	bl	2a4a0 <flatcc_json_printer_string_field@@Base+0xc0>
   2c0b8:	ldrb	r0, [r4, #27]
   2c0bc:	cmp	r0, #0
   2c0c0:	beq	2c0e4 <flatcc_json_printer_int64_enum_struct_field@@Base+0x78>
   2c0c4:	ldr	r2, [r4, #20]
   2c0c8:	mov	r0, r6
   2c0cc:	mov	r1, r5
   2c0d0:	bl	2a268 <flatcc_json_printer_int64@@Base+0x30>
   2c0d4:	ldr	r1, [r4, #20]
   2c0d8:	add	r0, r1, r0
   2c0dc:	str	r0, [r4, #20]
   2c0e0:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   2c0e4:	mov	r0, r4
   2c0e8:	mov	r2, r6
   2c0ec:	mov	r3, r5
   2c0f0:	mov	r1, r8
   2c0f4:	pop	{r4, r5, r6, r7, r8, sl, fp, lr}
   2c0f8:	bx	r1

0002c0fc <flatcc_json_printer_bool_enum_struct_field@@Base>:
   2c0fc:	push	{r4, r5, r6, r7, fp, lr}
   2c100:	add	fp, sp, #16
   2c104:	mov	r6, r1
   2c108:	mov	r4, r0
   2c10c:	add	r0, r2, r3
   2c110:	bl	2ae18 <flatcc_json_printer_bool_field@@Base+0xb0>
   2c114:	mov	r5, r0
   2c118:	add	r7, fp, #8
   2c11c:	ldm	r7, {r1, r2, r7}
   2c120:	cmp	r6, #0
   2c124:	beq	2c13c <flatcc_json_printer_bool_enum_struct_field@@Base+0x40>
   2c128:	ldr	r0, [r4, #20]
   2c12c:	add	r3, r0, #1
   2c130:	str	r3, [r4, #20]
   2c134:	mov	r3, #44	; 0x2c
   2c138:	strb	r3, [r0]
   2c13c:	mov	r0, r4
   2c140:	bl	2a4a0 <flatcc_json_printer_string_field@@Base+0xc0>
   2c144:	ldrb	r0, [r4, #27]
   2c148:	cmp	r0, #0
   2c14c:	beq	2c16c <flatcc_json_printer_bool_enum_struct_field@@Base+0x70>
   2c150:	ldr	r1, [r4, #20]
   2c154:	mov	r0, r5
   2c158:	bl	2ae20 <flatcc_json_printer_bool_field@@Base+0xb8>
   2c15c:	ldr	r1, [r4, #20]
   2c160:	add	r0, r1, r0
   2c164:	str	r0, [r4, #20]
   2c168:	pop	{r4, r5, r6, r7, fp, pc}
   2c16c:	mov	r0, r4
   2c170:	mov	r1, r5
   2c174:	mov	r2, r7
   2c178:	pop	{r4, r5, r6, r7, fp, lr}
   2c17c:	bx	r2

0002c180 <flatcc_json_printer_utype_vector_field@@Base>:
   2c180:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   2c184:	add	fp, sp, #24
   2c188:	mov	r7, r3
   2c18c:	mov	r5, r1
   2c190:	mov	r4, r0
   2c194:	mov	r0, r1
   2c198:	mov	r1, r2
   2c19c:	bl	2a460 <flatcc_json_printer_string_field@@Base+0x80>
   2c1a0:	cmp	r0, #0
   2c1a4:	beq	2c33c <flatcc_json_printer_utype_vector_field@@Base+0x1bc>
   2c1a8:	ldr	r8, [fp, #8]
   2c1ac:	ldr	r1, [r5, #16]
   2c1b0:	add	r2, r1, #1
   2c1b4:	str	r2, [r5, #16]
   2c1b8:	cmp	r1, #0
   2c1bc:	beq	2c1d4 <flatcc_json_printer_utype_vector_field@@Base+0x54>
   2c1c0:	ldr	r1, [r4, #20]
   2c1c4:	add	r2, r1, #1
   2c1c8:	str	r2, [r4, #20]
   2c1cc:	mov	r2, #44	; 0x2c
   2c1d0:	strb	r2, [r1]
   2c1d4:	bl	2a55c <flatcc_json_printer_string_field@@Base+0x17c>
   2c1d8:	mov	r5, r0
   2c1dc:	bl	2c340 <flatcc_json_printer_utype_vector_field@@Base+0x1c0>
   2c1e0:	mov	r6, r0
   2c1e4:	mov	r0, r4
   2c1e8:	mov	r1, r7
   2c1ec:	mov	r2, r8
   2c1f0:	bl	2a4a0 <flatcc_json_printer_string_field@@Base+0xc0>
   2c1f4:	ldr	r0, [r4, #20]
   2c1f8:	ldr	r1, [r4, #32]
   2c1fc:	add	r1, r1, #1
   2c200:	str	r1, [r4, #32]
   2c204:	add	r1, r0, #1
   2c208:	str	r1, [r4, #20]
   2c20c:	mov	r1, #91	; 0x5b
   2c210:	strb	r1, [r0]
   2c214:	cmp	r6, #0
   2c218:	beq	2c2f4 <flatcc_json_printer_utype_vector_field@@Base+0x174>
   2c21c:	add	r7, r5, #4
   2c220:	ldrb	r0, [r4, #25]
   2c224:	cmp	r0, #0
   2c228:	beq	2c24c <flatcc_json_printer_utype_vector_field@@Base+0xcc>
   2c22c:	ldr	r0, [r4, #20]
   2c230:	add	r1, r0, #1
   2c234:	str	r1, [r4, #20]
   2c238:	mov	r1, #10
   2c23c:	strb	r1, [r0]
   2c240:	mov	r0, r4
   2c244:	bl	29620 <flatcc_json_printer_indent@@Base+0x4>
   2c248:	b	2c254 <flatcc_json_printer_utype_vector_field@@Base+0xd4>
   2c24c:	mov	r0, r4
   2c250:	bl	295ec <flatcc_json_printer_nl@@Base+0x18>
   2c254:	mov	r0, r7
   2c258:	bl	2c348 <flatcc_json_printer_utype_vector_field@@Base+0x1c8>
   2c25c:	ldr	r1, [r4, #20]
   2c260:	bl	296bc <flatcc_json_printer_uint8@@Base+0x2c>
   2c264:	ldr	r1, [r4, #20]
   2c268:	add	r0, r1, r0
   2c26c:	str	r0, [r4, #20]
   2c270:	subs	r6, r6, #1
   2c274:	beq	2c2f4 <flatcc_json_printer_utype_vector_field@@Base+0x174>
   2c278:	add	r5, r5, #5
   2c27c:	mov	r7, #44	; 0x2c
   2c280:	mov	r8, #10
   2c284:	b	2c2b8 <flatcc_json_printer_utype_vector_field@@Base+0x138>
   2c288:	mov	r0, r4
   2c28c:	bl	295ec <flatcc_json_printer_nl@@Base+0x18>
   2c290:	mov	r0, r5
   2c294:	bl	2c348 <flatcc_json_printer_utype_vector_field@@Base+0x1c8>
   2c298:	ldr	r1, [r4, #20]
   2c29c:	bl	296bc <flatcc_json_printer_uint8@@Base+0x2c>
   2c2a0:	ldr	r1, [r4, #20]
   2c2a4:	add	r0, r1, r0
   2c2a8:	str	r0, [r4, #20]
   2c2ac:	add	r5, r5, #1
   2c2b0:	cmp	r6, #0
   2c2b4:	beq	2c2f4 <flatcc_json_printer_utype_vector_field@@Base+0x174>
   2c2b8:	ldr	r0, [r4, #20]
   2c2bc:	add	r1, r0, #1
   2c2c0:	str	r1, [r4, #20]
   2c2c4:	strb	r7, [r0]
   2c2c8:	sub	r6, r6, #1
   2c2cc:	ldrb	r0, [r4, #25]
   2c2d0:	cmp	r0, #0
   2c2d4:	beq	2c288 <flatcc_json_printer_utype_vector_field@@Base+0x108>
   2c2d8:	ldr	r0, [r4, #20]
   2c2dc:	add	r1, r0, #1
   2c2e0:	str	r1, [r4, #20]
   2c2e4:	strb	r8, [r0]
   2c2e8:	mov	r0, r4
   2c2ec:	bl	29620 <flatcc_json_printer_indent@@Base+0x4>
   2c2f0:	b	2c290 <flatcc_json_printer_utype_vector_field@@Base+0x110>
   2c2f4:	ldrb	r0, [r4, #25]
   2c2f8:	cmp	r0, #0
   2c2fc:	beq	2c328 <flatcc_json_printer_utype_vector_field@@Base+0x1a8>
   2c300:	ldr	r0, [r4, #20]
   2c304:	add	r1, r0, #1
   2c308:	str	r1, [r4, #20]
   2c30c:	mov	r1, #10
   2c310:	strb	r1, [r0]
   2c314:	ldr	r0, [r4, #32]
   2c318:	sub	r0, r0, #1
   2c31c:	str	r0, [r4, #32]
   2c320:	mov	r0, r4
   2c324:	bl	29620 <flatcc_json_printer_indent@@Base+0x4>
   2c328:	ldr	r0, [r4, #20]
   2c32c:	add	r1, r0, #1
   2c330:	str	r1, [r4, #20]
   2c334:	mov	r1, #93	; 0x5d
   2c338:	strb	r1, [r0]
   2c33c:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   2c340:	ldr	r0, [r0]
   2c344:	b	30dc4 <flatcc_json_printer_clear@@Base+0xe70>
   2c348:	ldrb	r0, [r0]
   2c34c:	b	30dc8 <flatcc_json_printer_clear@@Base+0xe74>

0002c350 <flatcc_json_printer_uint8_vector_field@@Base>:
   2c350:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   2c354:	add	fp, sp, #24
   2c358:	mov	r7, r3
   2c35c:	mov	r5, r1
   2c360:	mov	r4, r0
   2c364:	mov	r0, r1
   2c368:	mov	r1, r2
   2c36c:	bl	2a460 <flatcc_json_printer_string_field@@Base+0x80>
   2c370:	cmp	r0, #0
   2c374:	beq	2c50c <flatcc_json_printer_uint8_vector_field@@Base+0x1bc>
   2c378:	ldr	r8, [fp, #8]
   2c37c:	ldr	r1, [r5, #16]
   2c380:	add	r2, r1, #1
   2c384:	str	r2, [r5, #16]
   2c388:	cmp	r1, #0
   2c38c:	beq	2c3a4 <flatcc_json_printer_uint8_vector_field@@Base+0x54>
   2c390:	ldr	r1, [r4, #20]
   2c394:	add	r2, r1, #1
   2c398:	str	r2, [r4, #20]
   2c39c:	mov	r2, #44	; 0x2c
   2c3a0:	strb	r2, [r1]
   2c3a4:	bl	2a55c <flatcc_json_printer_string_field@@Base+0x17c>
   2c3a8:	mov	r5, r0
   2c3ac:	bl	2c340 <flatcc_json_printer_utype_vector_field@@Base+0x1c0>
   2c3b0:	mov	r6, r0
   2c3b4:	mov	r0, r4
   2c3b8:	mov	r1, r7
   2c3bc:	mov	r2, r8
   2c3c0:	bl	2a4a0 <flatcc_json_printer_string_field@@Base+0xc0>
   2c3c4:	ldr	r0, [r4, #20]
   2c3c8:	ldr	r1, [r4, #32]
   2c3cc:	add	r1, r1, #1
   2c3d0:	str	r1, [r4, #32]
   2c3d4:	add	r1, r0, #1
   2c3d8:	str	r1, [r4, #20]
   2c3dc:	mov	r1, #91	; 0x5b
   2c3e0:	strb	r1, [r0]
   2c3e4:	cmp	r6, #0
   2c3e8:	beq	2c4c4 <flatcc_json_printer_uint8_vector_field@@Base+0x174>
   2c3ec:	add	r7, r5, #4
   2c3f0:	ldrb	r0, [r4, #25]
   2c3f4:	cmp	r0, #0
   2c3f8:	beq	2c41c <flatcc_json_printer_uint8_vector_field@@Base+0xcc>
   2c3fc:	ldr	r0, [r4, #20]
   2c400:	add	r1, r0, #1
   2c404:	str	r1, [r4, #20]
   2c408:	mov	r1, #10
   2c40c:	strb	r1, [r0]
   2c410:	mov	r0, r4
   2c414:	bl	29620 <flatcc_json_printer_indent@@Base+0x4>
   2c418:	b	2c424 <flatcc_json_printer_uint8_vector_field@@Base+0xd4>
   2c41c:	mov	r0, r4
   2c420:	bl	295ec <flatcc_json_printer_nl@@Base+0x18>
   2c424:	mov	r0, r7
   2c428:	bl	2a810 <flatcc_json_printer_uint8_field@@Base+0xb0>
   2c42c:	ldr	r1, [r4, #20]
   2c430:	bl	296bc <flatcc_json_printer_uint8@@Base+0x2c>
   2c434:	ldr	r1, [r4, #20]
   2c438:	add	r0, r1, r0
   2c43c:	str	r0, [r4, #20]
   2c440:	subs	r6, r6, #1
   2c444:	beq	2c4c4 <flatcc_json_printer_uint8_vector_field@@Base+0x174>
   2c448:	add	r5, r5, #5
   2c44c:	mov	r7, #44	; 0x2c
   2c450:	mov	r8, #10
   2c454:	b	2c488 <flatcc_json_printer_uint8_vector_field@@Base+0x138>
   2c458:	mov	r0, r4
   2c45c:	bl	295ec <flatcc_json_printer_nl@@Base+0x18>
   2c460:	mov	r0, r5
   2c464:	bl	2a810 <flatcc_json_printer_uint8_field@@Base+0xb0>
   2c468:	ldr	r1, [r4, #20]
   2c46c:	bl	296bc <flatcc_json_printer_uint8@@Base+0x2c>
   2c470:	ldr	r1, [r4, #20]
   2c474:	add	r0, r1, r0
   2c478:	str	r0, [r4, #20]
   2c47c:	add	r5, r5, #1
   2c480:	cmp	r6, #0
   2c484:	beq	2c4c4 <flatcc_json_printer_uint8_vector_field@@Base+0x174>
   2c488:	ldr	r0, [r4, #20]
   2c48c:	add	r1, r0, #1
   2c490:	str	r1, [r4, #20]
   2c494:	strb	r7, [r0]
   2c498:	sub	r6, r6, #1
   2c49c:	ldrb	r0, [r4, #25]
   2c4a0:	cmp	r0, #0
   2c4a4:	beq	2c458 <flatcc_json_printer_uint8_vector_field@@Base+0x108>
   2c4a8:	ldr	r0, [r4, #20]
   2c4ac:	add	r1, r0, #1
   2c4b0:	str	r1, [r4, #20]
   2c4b4:	strb	r8, [r0]
   2c4b8:	mov	r0, r4
   2c4bc:	bl	29620 <flatcc_json_printer_indent@@Base+0x4>
   2c4c0:	b	2c460 <flatcc_json_printer_uint8_vector_field@@Base+0x110>
   2c4c4:	ldrb	r0, [r4, #25]
   2c4c8:	cmp	r0, #0
   2c4cc:	beq	2c4f8 <flatcc_json_printer_uint8_vector_field@@Base+0x1a8>
   2c4d0:	ldr	r0, [r4, #20]
   2c4d4:	add	r1, r0, #1
   2c4d8:	str	r1, [r4, #20]
   2c4dc:	mov	r1, #10
   2c4e0:	strb	r1, [r0]
   2c4e4:	ldr	r0, [r4, #32]
   2c4e8:	sub	r0, r0, #1
   2c4ec:	str	r0, [r4, #32]
   2c4f0:	mov	r0, r4
   2c4f4:	bl	29620 <flatcc_json_printer_indent@@Base+0x4>
   2c4f8:	ldr	r0, [r4, #20]
   2c4fc:	add	r1, r0, #1
   2c500:	str	r1, [r4, #20]
   2c504:	mov	r1, #93	; 0x5d
   2c508:	strb	r1, [r0]
   2c50c:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}

0002c510 <flatcc_json_printer_uint16_vector_field@@Base>:
   2c510:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   2c514:	add	fp, sp, #24
   2c518:	mov	r7, r3
   2c51c:	mov	r5, r1
   2c520:	mov	r4, r0
   2c524:	mov	r0, r1
   2c528:	mov	r1, r2
   2c52c:	bl	2a460 <flatcc_json_printer_string_field@@Base+0x80>
   2c530:	cmp	r0, #0
   2c534:	beq	2c6cc <flatcc_json_printer_uint16_vector_field@@Base+0x1bc>
   2c538:	ldr	r8, [fp, #8]
   2c53c:	ldr	r1, [r5, #16]
   2c540:	add	r2, r1, #1
   2c544:	str	r2, [r5, #16]
   2c548:	cmp	r1, #0
   2c54c:	beq	2c564 <flatcc_json_printer_uint16_vector_field@@Base+0x54>
   2c550:	ldr	r1, [r4, #20]
   2c554:	add	r2, r1, #1
   2c558:	str	r2, [r4, #20]
   2c55c:	mov	r2, #44	; 0x2c
   2c560:	strb	r2, [r1]
   2c564:	bl	2a55c <flatcc_json_printer_string_field@@Base+0x17c>
   2c568:	mov	r5, r0
   2c56c:	bl	2c340 <flatcc_json_printer_utype_vector_field@@Base+0x1c0>
   2c570:	mov	r6, r0
   2c574:	mov	r0, r4
   2c578:	mov	r1, r7
   2c57c:	mov	r2, r8
   2c580:	bl	2a4a0 <flatcc_json_printer_string_field@@Base+0xc0>
   2c584:	ldr	r0, [r4, #20]
   2c588:	ldr	r1, [r4, #32]
   2c58c:	add	r1, r1, #1
   2c590:	str	r1, [r4, #32]
   2c594:	add	r1, r0, #1
   2c598:	str	r1, [r4, #20]
   2c59c:	mov	r1, #91	; 0x5b
   2c5a0:	strb	r1, [r0]
   2c5a4:	cmp	r6, #0
   2c5a8:	beq	2c684 <flatcc_json_printer_uint16_vector_field@@Base+0x174>
   2c5ac:	add	r7, r5, #4
   2c5b0:	ldrb	r0, [r4, #25]
   2c5b4:	cmp	r0, #0
   2c5b8:	beq	2c5dc <flatcc_json_printer_uint16_vector_field@@Base+0xcc>
   2c5bc:	ldr	r0, [r4, #20]
   2c5c0:	add	r1, r0, #1
   2c5c4:	str	r1, [r4, #20]
   2c5c8:	mov	r1, #10
   2c5cc:	strb	r1, [r0]
   2c5d0:	mov	r0, r4
   2c5d4:	bl	29620 <flatcc_json_printer_indent@@Base+0x4>
   2c5d8:	b	2c5e4 <flatcc_json_printer_uint16_vector_field@@Base+0xd4>
   2c5dc:	mov	r0, r4
   2c5e0:	bl	295ec <flatcc_json_printer_nl@@Base+0x18>
   2c5e4:	mov	r0, r7
   2c5e8:	bl	2a8c8 <flatcc_json_printer_uint16_field@@Base+0xb0>
   2c5ec:	ldr	r1, [r4, #20]
   2c5f0:	bl	2978c <flatcc_json_printer_uint16@@Base+0x2c>
   2c5f4:	ldr	r1, [r4, #20]
   2c5f8:	add	r0, r1, r0
   2c5fc:	str	r0, [r4, #20]
   2c600:	subs	r6, r6, #1
   2c604:	beq	2c684 <flatcc_json_printer_uint16_vector_field@@Base+0x174>
   2c608:	add	r5, r5, #6
   2c60c:	mov	r7, #44	; 0x2c
   2c610:	mov	r8, #10
   2c614:	b	2c648 <flatcc_json_printer_uint16_vector_field@@Base+0x138>
   2c618:	mov	r0, r4
   2c61c:	bl	295ec <flatcc_json_printer_nl@@Base+0x18>
   2c620:	mov	r0, r5
   2c624:	bl	2a8c8 <flatcc_json_printer_uint16_field@@Base+0xb0>
   2c628:	ldr	r1, [r4, #20]
   2c62c:	bl	2978c <flatcc_json_printer_uint16@@Base+0x2c>
   2c630:	ldr	r1, [r4, #20]
   2c634:	add	r0, r1, r0
   2c638:	str	r0, [r4, #20]
   2c63c:	add	r5, r5, #2
   2c640:	cmp	r6, #0
   2c644:	beq	2c684 <flatcc_json_printer_uint16_vector_field@@Base+0x174>
   2c648:	ldr	r0, [r4, #20]
   2c64c:	add	r1, r0, #1
   2c650:	str	r1, [r4, #20]
   2c654:	strb	r7, [r0]
   2c658:	sub	r6, r6, #1
   2c65c:	ldrb	r0, [r4, #25]
   2c660:	cmp	r0, #0
   2c664:	beq	2c618 <flatcc_json_printer_uint16_vector_field@@Base+0x108>
   2c668:	ldr	r0, [r4, #20]
   2c66c:	add	r1, r0, #1
   2c670:	str	r1, [r4, #20]
   2c674:	strb	r8, [r0]
   2c678:	mov	r0, r4
   2c67c:	bl	29620 <flatcc_json_printer_indent@@Base+0x4>
   2c680:	b	2c620 <flatcc_json_printer_uint16_vector_field@@Base+0x110>
   2c684:	ldrb	r0, [r4, #25]
   2c688:	cmp	r0, #0
   2c68c:	beq	2c6b8 <flatcc_json_printer_uint16_vector_field@@Base+0x1a8>
   2c690:	ldr	r0, [r4, #20]
   2c694:	add	r1, r0, #1
   2c698:	str	r1, [r4, #20]
   2c69c:	mov	r1, #10
   2c6a0:	strb	r1, [r0]
   2c6a4:	ldr	r0, [r4, #32]
   2c6a8:	sub	r0, r0, #1
   2c6ac:	str	r0, [r4, #32]
   2c6b0:	mov	r0, r4
   2c6b4:	bl	29620 <flatcc_json_printer_indent@@Base+0x4>
   2c6b8:	ldr	r0, [r4, #20]
   2c6bc:	add	r1, r0, #1
   2c6c0:	str	r1, [r4, #20]
   2c6c4:	mov	r1, #93	; 0x5d
   2c6c8:	strb	r1, [r0]
   2c6cc:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}

0002c6d0 <flatcc_json_printer_uint32_vector_field@@Base>:
   2c6d0:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   2c6d4:	add	fp, sp, #24
   2c6d8:	mov	r7, r3
   2c6dc:	mov	r5, r1
   2c6e0:	mov	r4, r0
   2c6e4:	mov	r0, r1
   2c6e8:	mov	r1, r2
   2c6ec:	bl	2a460 <flatcc_json_printer_string_field@@Base+0x80>
   2c6f0:	cmp	r0, #0
   2c6f4:	beq	2c88c <flatcc_json_printer_uint32_vector_field@@Base+0x1bc>
   2c6f8:	ldr	r8, [fp, #8]
   2c6fc:	ldr	r1, [r5, #16]
   2c700:	add	r2, r1, #1
   2c704:	str	r2, [r5, #16]
   2c708:	cmp	r1, #0
   2c70c:	beq	2c724 <flatcc_json_printer_uint32_vector_field@@Base+0x54>
   2c710:	ldr	r1, [r4, #20]
   2c714:	add	r2, r1, #1
   2c718:	str	r2, [r4, #20]
   2c71c:	mov	r2, #44	; 0x2c
   2c720:	strb	r2, [r1]
   2c724:	bl	2a55c <flatcc_json_printer_string_field@@Base+0x17c>
   2c728:	mov	r5, r0
   2c72c:	bl	2c340 <flatcc_json_printer_utype_vector_field@@Base+0x1c0>
   2c730:	mov	r6, r0
   2c734:	mov	r0, r4
   2c738:	mov	r1, r7
   2c73c:	mov	r2, r8
   2c740:	bl	2a4a0 <flatcc_json_printer_string_field@@Base+0xc0>
   2c744:	ldr	r0, [r4, #20]
   2c748:	ldr	r1, [r4, #32]
   2c74c:	add	r1, r1, #1
   2c750:	str	r1, [r4, #32]
   2c754:	add	r1, r0, #1
   2c758:	str	r1, [r4, #20]
   2c75c:	mov	r1, #91	; 0x5b
   2c760:	strb	r1, [r0]
   2c764:	cmp	r6, #0
   2c768:	beq	2c844 <flatcc_json_printer_uint32_vector_field@@Base+0x174>
   2c76c:	add	r7, r5, #4
   2c770:	ldrb	r0, [r4, #25]
   2c774:	cmp	r0, #0
   2c778:	beq	2c79c <flatcc_json_printer_uint32_vector_field@@Base+0xcc>
   2c77c:	ldr	r0, [r4, #20]
   2c780:	add	r1, r0, #1
   2c784:	str	r1, [r4, #20]
   2c788:	mov	r1, #10
   2c78c:	strb	r1, [r0]
   2c790:	mov	r0, r4
   2c794:	bl	29620 <flatcc_json_printer_indent@@Base+0x4>
   2c798:	b	2c7a4 <flatcc_json_printer_uint32_vector_field@@Base+0xd4>
   2c79c:	mov	r0, r4
   2c7a0:	bl	295ec <flatcc_json_printer_nl@@Base+0x18>
   2c7a4:	mov	r0, r7
   2c7a8:	bl	2a980 <flatcc_json_printer_uint32_field@@Base+0xb0>
   2c7ac:	ldr	r1, [r4, #20]
   2c7b0:	bl	29928 <flatcc_json_printer_uint32@@Base+0x2c>
   2c7b4:	ldr	r1, [r4, #20]
   2c7b8:	add	r0, r1, r0
   2c7bc:	str	r0, [r4, #20]
   2c7c0:	subs	r6, r6, #1
   2c7c4:	beq	2c844 <flatcc_json_printer_uint32_vector_field@@Base+0x174>
   2c7c8:	add	r5, r5, #8
   2c7cc:	mov	r7, #44	; 0x2c
   2c7d0:	mov	r8, #10
   2c7d4:	b	2c808 <flatcc_json_printer_uint32_vector_field@@Base+0x138>
   2c7d8:	mov	r0, r4
   2c7dc:	bl	295ec <flatcc_json_printer_nl@@Base+0x18>
   2c7e0:	mov	r0, r5
   2c7e4:	bl	2a980 <flatcc_json_printer_uint32_field@@Base+0xb0>
   2c7e8:	ldr	r1, [r4, #20]
   2c7ec:	bl	29928 <flatcc_json_printer_uint32@@Base+0x2c>
   2c7f0:	ldr	r1, [r4, #20]
   2c7f4:	add	r0, r1, r0
   2c7f8:	str	r0, [r4, #20]
   2c7fc:	add	r5, r5, #4
   2c800:	cmp	r6, #0
   2c804:	beq	2c844 <flatcc_json_printer_uint32_vector_field@@Base+0x174>
   2c808:	ldr	r0, [r4, #20]
   2c80c:	add	r1, r0, #1
   2c810:	str	r1, [r4, #20]
   2c814:	strb	r7, [r0]
   2c818:	sub	r6, r6, #1
   2c81c:	ldrb	r0, [r4, #25]
   2c820:	cmp	r0, #0
   2c824:	beq	2c7d8 <flatcc_json_printer_uint32_vector_field@@Base+0x108>
   2c828:	ldr	r0, [r4, #20]
   2c82c:	add	r1, r0, #1
   2c830:	str	r1, [r4, #20]
   2c834:	strb	r8, [r0]
   2c838:	mov	r0, r4
   2c83c:	bl	29620 <flatcc_json_printer_indent@@Base+0x4>
   2c840:	b	2c7e0 <flatcc_json_printer_uint32_vector_field@@Base+0x110>
   2c844:	ldrb	r0, [r4, #25]
   2c848:	cmp	r0, #0
   2c84c:	beq	2c878 <flatcc_json_printer_uint32_vector_field@@Base+0x1a8>
   2c850:	ldr	r0, [r4, #20]
   2c854:	add	r1, r0, #1
   2c858:	str	r1, [r4, #20]
   2c85c:	mov	r1, #10
   2c860:	strb	r1, [r0]
   2c864:	ldr	r0, [r4, #32]
   2c868:	sub	r0, r0, #1
   2c86c:	str	r0, [r4, #32]
   2c870:	mov	r0, r4
   2c874:	bl	29620 <flatcc_json_printer_indent@@Base+0x4>
   2c878:	ldr	r0, [r4, #20]
   2c87c:	add	r1, r0, #1
   2c880:	str	r1, [r4, #20]
   2c884:	mov	r1, #93	; 0x5d
   2c888:	strb	r1, [r0]
   2c88c:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}

0002c890 <flatcc_json_printer_uint64_vector_field@@Base>:
   2c890:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   2c894:	add	fp, sp, #24
   2c898:	mov	r7, r3
   2c89c:	mov	r5, r1
   2c8a0:	mov	r4, r0
   2c8a4:	mov	r0, r1
   2c8a8:	mov	r1, r2
   2c8ac:	bl	2a460 <flatcc_json_printer_string_field@@Base+0x80>
   2c8b0:	cmp	r0, #0
   2c8b4:	beq	2ca4c <flatcc_json_printer_uint64_vector_field@@Base+0x1bc>
   2c8b8:	ldr	r8, [fp, #8]
   2c8bc:	ldr	r1, [r5, #16]
   2c8c0:	add	r2, r1, #1
   2c8c4:	str	r2, [r5, #16]
   2c8c8:	cmp	r1, #0
   2c8cc:	beq	2c8e4 <flatcc_json_printer_uint64_vector_field@@Base+0x54>
   2c8d0:	ldr	r1, [r4, #20]
   2c8d4:	add	r2, r1, #1
   2c8d8:	str	r2, [r4, #20]
   2c8dc:	mov	r2, #44	; 0x2c
   2c8e0:	strb	r2, [r1]
   2c8e4:	bl	2a55c <flatcc_json_printer_string_field@@Base+0x17c>
   2c8e8:	mov	r5, r0
   2c8ec:	bl	2c340 <flatcc_json_printer_utype_vector_field@@Base+0x1c0>
   2c8f0:	mov	r6, r0
   2c8f4:	mov	r0, r4
   2c8f8:	mov	r1, r7
   2c8fc:	mov	r2, r8
   2c900:	bl	2a4a0 <flatcc_json_printer_string_field@@Base+0xc0>
   2c904:	ldr	r0, [r4, #20]
   2c908:	ldr	r1, [r4, #32]
   2c90c:	add	r1, r1, #1
   2c910:	str	r1, [r4, #32]
   2c914:	add	r1, r0, #1
   2c918:	str	r1, [r4, #20]
   2c91c:	mov	r1, #91	; 0x5b
   2c920:	strb	r1, [r0]
   2c924:	cmp	r6, #0
   2c928:	beq	2ca04 <flatcc_json_printer_uint64_vector_field@@Base+0x174>
   2c92c:	add	r7, r5, #4
   2c930:	ldrb	r0, [r4, #25]
   2c934:	cmp	r0, #0
   2c938:	beq	2c95c <flatcc_json_printer_uint64_vector_field@@Base+0xcc>
   2c93c:	ldr	r0, [r4, #20]
   2c940:	add	r1, r0, #1
   2c944:	str	r1, [r4, #20]
   2c948:	mov	r1, #10
   2c94c:	strb	r1, [r0]
   2c950:	mov	r0, r4
   2c954:	bl	29620 <flatcc_json_printer_indent@@Base+0x4>
   2c958:	b	2c964 <flatcc_json_printer_uint64_vector_field@@Base+0xd4>
   2c95c:	mov	r0, r4
   2c960:	bl	295ec <flatcc_json_printer_nl@@Base+0x18>
   2c964:	mov	r0, r7
   2c968:	bl	2aa5c <flatcc_json_printer_uint64_field@@Base+0xd4>
   2c96c:	ldr	r2, [r4, #20]
   2c970:	bl	29c50 <flatcc_json_printer_uint64@@Base+0x30>
   2c974:	ldr	r1, [r4, #20]
   2c978:	add	r0, r1, r0
   2c97c:	str	r0, [r4, #20]
   2c980:	subs	r6, r6, #1
   2c984:	beq	2ca04 <flatcc_json_printer_uint64_vector_field@@Base+0x174>
   2c988:	add	r5, r5, #12
   2c98c:	mov	r7, #44	; 0x2c
   2c990:	mov	r8, #10
   2c994:	b	2c9c8 <flatcc_json_printer_uint64_vector_field@@Base+0x138>
   2c998:	mov	r0, r4
   2c99c:	bl	295ec <flatcc_json_printer_nl@@Base+0x18>
   2c9a0:	mov	r0, r5
   2c9a4:	bl	2aa5c <flatcc_json_printer_uint64_field@@Base+0xd4>
   2c9a8:	ldr	r2, [r4, #20]
   2c9ac:	bl	29c50 <flatcc_json_printer_uint64@@Base+0x30>
   2c9b0:	ldr	r1, [r4, #20]
   2c9b4:	add	r0, r1, r0
   2c9b8:	str	r0, [r4, #20]
   2c9bc:	add	r5, r5, #8
   2c9c0:	cmp	r6, #0
   2c9c4:	beq	2ca04 <flatcc_json_printer_uint64_vector_field@@Base+0x174>
   2c9c8:	ldr	r0, [r4, #20]
   2c9cc:	add	r1, r0, #1
   2c9d0:	str	r1, [r4, #20]
   2c9d4:	strb	r7, [r0]
   2c9d8:	sub	r6, r6, #1
   2c9dc:	ldrb	r0, [r4, #25]
   2c9e0:	cmp	r0, #0
   2c9e4:	beq	2c998 <flatcc_json_printer_uint64_vector_field@@Base+0x108>
   2c9e8:	ldr	r0, [r4, #20]
   2c9ec:	add	r1, r0, #1
   2c9f0:	str	r1, [r4, #20]
   2c9f4:	strb	r8, [r0]
   2c9f8:	mov	r0, r4
   2c9fc:	bl	29620 <flatcc_json_printer_indent@@Base+0x4>
   2ca00:	b	2c9a0 <flatcc_json_printer_uint64_vector_field@@Base+0x110>
   2ca04:	ldrb	r0, [r4, #25]
   2ca08:	cmp	r0, #0
   2ca0c:	beq	2ca38 <flatcc_json_printer_uint64_vector_field@@Base+0x1a8>
   2ca10:	ldr	r0, [r4, #20]
   2ca14:	add	r1, r0, #1
   2ca18:	str	r1, [r4, #20]
   2ca1c:	mov	r1, #10
   2ca20:	strb	r1, [r0]
   2ca24:	ldr	r0, [r4, #32]
   2ca28:	sub	r0, r0, #1
   2ca2c:	str	r0, [r4, #32]
   2ca30:	mov	r0, r4
   2ca34:	bl	29620 <flatcc_json_printer_indent@@Base+0x4>
   2ca38:	ldr	r0, [r4, #20]
   2ca3c:	add	r1, r0, #1
   2ca40:	str	r1, [r4, #20]
   2ca44:	mov	r1, #93	; 0x5d
   2ca48:	strb	r1, [r0]
   2ca4c:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}

0002ca50 <flatcc_json_printer_int8_vector_field@@Base>:
   2ca50:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   2ca54:	add	fp, sp, #24
   2ca58:	mov	r7, r3
   2ca5c:	mov	r5, r1
   2ca60:	mov	r4, r0
   2ca64:	mov	r0, r1
   2ca68:	mov	r1, r2
   2ca6c:	bl	2a460 <flatcc_json_printer_string_field@@Base+0x80>
   2ca70:	cmp	r0, #0
   2ca74:	beq	2cc0c <flatcc_json_printer_int8_vector_field@@Base+0x1bc>
   2ca78:	ldr	r8, [fp, #8]
   2ca7c:	ldr	r1, [r5, #16]
   2ca80:	add	r2, r1, #1
   2ca84:	str	r2, [r5, #16]
   2ca88:	cmp	r1, #0
   2ca8c:	beq	2caa4 <flatcc_json_printer_int8_vector_field@@Base+0x54>
   2ca90:	ldr	r1, [r4, #20]
   2ca94:	add	r2, r1, #1
   2ca98:	str	r2, [r4, #20]
   2ca9c:	mov	r2, #44	; 0x2c
   2caa0:	strb	r2, [r1]
   2caa4:	bl	2a55c <flatcc_json_printer_string_field@@Base+0x17c>
   2caa8:	mov	r5, r0
   2caac:	bl	2c340 <flatcc_json_printer_utype_vector_field@@Base+0x1c0>
   2cab0:	mov	r6, r0
   2cab4:	mov	r0, r4
   2cab8:	mov	r1, r7
   2cabc:	mov	r2, r8
   2cac0:	bl	2a4a0 <flatcc_json_printer_string_field@@Base+0xc0>
   2cac4:	ldr	r0, [r4, #20]
   2cac8:	ldr	r1, [r4, #32]
   2cacc:	add	r1, r1, #1
   2cad0:	str	r1, [r4, #32]
   2cad4:	add	r1, r0, #1
   2cad8:	str	r1, [r4, #20]
   2cadc:	mov	r1, #91	; 0x5b
   2cae0:	strb	r1, [r0]
   2cae4:	cmp	r6, #0
   2cae8:	beq	2cbc4 <flatcc_json_printer_int8_vector_field@@Base+0x174>
   2caec:	add	r7, r5, #4
   2caf0:	ldrb	r0, [r4, #25]
   2caf4:	cmp	r0, #0
   2caf8:	beq	2cb1c <flatcc_json_printer_int8_vector_field@@Base+0xcc>
   2cafc:	ldr	r0, [r4, #20]
   2cb00:	add	r1, r0, #1
   2cb04:	str	r1, [r4, #20]
   2cb08:	mov	r1, #10
   2cb0c:	strb	r1, [r0]
   2cb10:	mov	r0, r4
   2cb14:	bl	29620 <flatcc_json_printer_indent@@Base+0x4>
   2cb18:	b	2cb24 <flatcc_json_printer_int8_vector_field@@Base+0xd4>
   2cb1c:	mov	r0, r4
   2cb20:	bl	295ec <flatcc_json_printer_nl@@Base+0x18>
   2cb24:	mov	r0, r7
   2cb28:	bl	2ab14 <flatcc_json_printer_int8_field@@Base+0xb0>
   2cb2c:	ldr	r1, [r4, #20]
   2cb30:	bl	2a158 <flatcc_json_printer_int8@@Base+0x2c>
   2cb34:	ldr	r1, [r4, #20]
   2cb38:	add	r0, r1, r0
   2cb3c:	str	r0, [r4, #20]
   2cb40:	subs	r6, r6, #1
   2cb44:	beq	2cbc4 <flatcc_json_printer_int8_vector_field@@Base+0x174>
   2cb48:	add	r5, r5, #5
   2cb4c:	mov	r7, #44	; 0x2c
   2cb50:	mov	r8, #10
   2cb54:	b	2cb88 <flatcc_json_printer_int8_vector_field@@Base+0x138>
   2cb58:	mov	r0, r4
   2cb5c:	bl	295ec <flatcc_json_printer_nl@@Base+0x18>
   2cb60:	mov	r0, r5
   2cb64:	bl	2ab14 <flatcc_json_printer_int8_field@@Base+0xb0>
   2cb68:	ldr	r1, [r4, #20]
   2cb6c:	bl	2a158 <flatcc_json_printer_int8@@Base+0x2c>
   2cb70:	ldr	r1, [r4, #20]
   2cb74:	add	r0, r1, r0
   2cb78:	str	r0, [r4, #20]
   2cb7c:	add	r5, r5, #1
   2cb80:	cmp	r6, #0
   2cb84:	beq	2cbc4 <flatcc_json_printer_int8_vector_field@@Base+0x174>
   2cb88:	ldr	r0, [r4, #20]
   2cb8c:	add	r1, r0, #1
   2cb90:	str	r1, [r4, #20]
   2cb94:	strb	r7, [r0]
   2cb98:	sub	r6, r6, #1
   2cb9c:	ldrb	r0, [r4, #25]
   2cba0:	cmp	r0, #0
   2cba4:	beq	2cb58 <flatcc_json_printer_int8_vector_field@@Base+0x108>
   2cba8:	ldr	r0, [r4, #20]
   2cbac:	add	r1, r0, #1
   2cbb0:	str	r1, [r4, #20]
   2cbb4:	strb	r8, [r0]
   2cbb8:	mov	r0, r4
   2cbbc:	bl	29620 <flatcc_json_printer_indent@@Base+0x4>
   2cbc0:	b	2cb60 <flatcc_json_printer_int8_vector_field@@Base+0x110>
   2cbc4:	ldrb	r0, [r4, #25]
   2cbc8:	cmp	r0, #0
   2cbcc:	beq	2cbf8 <flatcc_json_printer_int8_vector_field@@Base+0x1a8>
   2cbd0:	ldr	r0, [r4, #20]
   2cbd4:	add	r1, r0, #1
   2cbd8:	str	r1, [r4, #20]
   2cbdc:	mov	r1, #10
   2cbe0:	strb	r1, [r0]
   2cbe4:	ldr	r0, [r4, #32]
   2cbe8:	sub	r0, r0, #1
   2cbec:	str	r0, [r4, #32]
   2cbf0:	mov	r0, r4
   2cbf4:	bl	29620 <flatcc_json_printer_indent@@Base+0x4>
   2cbf8:	ldr	r0, [r4, #20]
   2cbfc:	add	r1, r0, #1
   2cc00:	str	r1, [r4, #20]
   2cc04:	mov	r1, #93	; 0x5d
   2cc08:	strb	r1, [r0]
   2cc0c:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}

0002cc10 <flatcc_json_printer_int16_vector_field@@Base>:
   2cc10:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   2cc14:	add	fp, sp, #24
   2cc18:	mov	r7, r3
   2cc1c:	mov	r5, r1
   2cc20:	mov	r4, r0
   2cc24:	mov	r0, r1
   2cc28:	mov	r1, r2
   2cc2c:	bl	2a460 <flatcc_json_printer_string_field@@Base+0x80>
   2cc30:	cmp	r0, #0
   2cc34:	beq	2cdcc <flatcc_json_printer_int16_vector_field@@Base+0x1bc>
   2cc38:	ldr	r8, [fp, #8]
   2cc3c:	ldr	r1, [r5, #16]
   2cc40:	add	r2, r1, #1
   2cc44:	str	r2, [r5, #16]
   2cc48:	cmp	r1, #0
   2cc4c:	beq	2cc64 <flatcc_json_printer_int16_vector_field@@Base+0x54>
   2cc50:	ldr	r1, [r4, #20]
   2cc54:	add	r2, r1, #1
   2cc58:	str	r2, [r4, #20]
   2cc5c:	mov	r2, #44	; 0x2c
   2cc60:	strb	r2, [r1]
   2cc64:	bl	2a55c <flatcc_json_printer_string_field@@Base+0x17c>
   2cc68:	mov	r5, r0
   2cc6c:	bl	2c340 <flatcc_json_printer_utype_vector_field@@Base+0x1c0>
   2cc70:	mov	r6, r0
   2cc74:	mov	r0, r4
   2cc78:	mov	r1, r7
   2cc7c:	mov	r2, r8
   2cc80:	bl	2a4a0 <flatcc_json_printer_string_field@@Base+0xc0>
   2cc84:	ldr	r0, [r4, #20]
   2cc88:	ldr	r1, [r4, #32]
   2cc8c:	add	r1, r1, #1
   2cc90:	str	r1, [r4, #32]
   2cc94:	add	r1, r0, #1
   2cc98:	str	r1, [r4, #20]
   2cc9c:	mov	r1, #91	; 0x5b
   2cca0:	strb	r1, [r0]
   2cca4:	cmp	r6, #0
   2cca8:	beq	2cd84 <flatcc_json_printer_int16_vector_field@@Base+0x174>
   2ccac:	add	r7, r5, #4
   2ccb0:	ldrb	r0, [r4, #25]
   2ccb4:	cmp	r0, #0
   2ccb8:	beq	2ccdc <flatcc_json_printer_int16_vector_field@@Base+0xcc>
   2ccbc:	ldr	r0, [r4, #20]
   2ccc0:	add	r1, r0, #1
   2ccc4:	str	r1, [r4, #20]
   2ccc8:	mov	r1, #10
   2cccc:	strb	r1, [r0]
   2ccd0:	mov	r0, r4
   2ccd4:	bl	29620 <flatcc_json_printer_indent@@Base+0x4>
   2ccd8:	b	2cce4 <flatcc_json_printer_int16_vector_field@@Base+0xd4>
   2ccdc:	mov	r0, r4
   2cce0:	bl	295ec <flatcc_json_printer_nl@@Base+0x18>
   2cce4:	mov	r0, r7
   2cce8:	bl	2abcc <flatcc_json_printer_int16_field@@Base+0xb0>
   2ccec:	ldr	r1, [r4, #20]
   2ccf0:	bl	2a1b4 <flatcc_json_printer_int16@@Base+0x2c>
   2ccf4:	ldr	r1, [r4, #20]
   2ccf8:	add	r0, r1, r0
   2ccfc:	str	r0, [r4, #20]
   2cd00:	subs	r6, r6, #1
   2cd04:	beq	2cd84 <flatcc_json_printer_int16_vector_field@@Base+0x174>
   2cd08:	add	r5, r5, #6
   2cd0c:	mov	r7, #44	; 0x2c
   2cd10:	mov	r8, #10
   2cd14:	b	2cd48 <flatcc_json_printer_int16_vector_field@@Base+0x138>
   2cd18:	mov	r0, r4
   2cd1c:	bl	295ec <flatcc_json_printer_nl@@Base+0x18>
   2cd20:	mov	r0, r5
   2cd24:	bl	2abcc <flatcc_json_printer_int16_field@@Base+0xb0>
   2cd28:	ldr	r1, [r4, #20]
   2cd2c:	bl	2a1b4 <flatcc_json_printer_int16@@Base+0x2c>
   2cd30:	ldr	r1, [r4, #20]
   2cd34:	add	r0, r1, r0
   2cd38:	str	r0, [r4, #20]
   2cd3c:	add	r5, r5, #2
   2cd40:	cmp	r6, #0
   2cd44:	beq	2cd84 <flatcc_json_printer_int16_vector_field@@Base+0x174>
   2cd48:	ldr	r0, [r4, #20]
   2cd4c:	add	r1, r0, #1
   2cd50:	str	r1, [r4, #20]
   2cd54:	strb	r7, [r0]
   2cd58:	sub	r6, r6, #1
   2cd5c:	ldrb	r0, [r4, #25]
   2cd60:	cmp	r0, #0
   2cd64:	beq	2cd18 <flatcc_json_printer_int16_vector_field@@Base+0x108>
   2cd68:	ldr	r0, [r4, #20]
   2cd6c:	add	r1, r0, #1
   2cd70:	str	r1, [r4, #20]
   2cd74:	strb	r8, [r0]
   2cd78:	mov	r0, r4
   2cd7c:	bl	29620 <flatcc_json_printer_indent@@Base+0x4>
   2cd80:	b	2cd20 <flatcc_json_printer_int16_vector_field@@Base+0x110>
   2cd84:	ldrb	r0, [r4, #25]
   2cd88:	cmp	r0, #0
   2cd8c:	beq	2cdb8 <flatcc_json_printer_int16_vector_field@@Base+0x1a8>
   2cd90:	ldr	r0, [r4, #20]
   2cd94:	add	r1, r0, #1
   2cd98:	str	r1, [r4, #20]
   2cd9c:	mov	r1, #10
   2cda0:	strb	r1, [r0]
   2cda4:	ldr	r0, [r4, #32]
   2cda8:	sub	r0, r0, #1
   2cdac:	str	r0, [r4, #32]
   2cdb0:	mov	r0, r4
   2cdb4:	bl	29620 <flatcc_json_printer_indent@@Base+0x4>
   2cdb8:	ldr	r0, [r4, #20]
   2cdbc:	add	r1, r0, #1
   2cdc0:	str	r1, [r4, #20]
   2cdc4:	mov	r1, #93	; 0x5d
   2cdc8:	strb	r1, [r0]
   2cdcc:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}

0002cdd0 <flatcc_json_printer_int32_vector_field@@Base>:
   2cdd0:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   2cdd4:	add	fp, sp, #24
   2cdd8:	mov	r7, r3
   2cddc:	mov	r5, r1
   2cde0:	mov	r4, r0
   2cde4:	mov	r0, r1
   2cde8:	mov	r1, r2
   2cdec:	bl	2a460 <flatcc_json_printer_string_field@@Base+0x80>
   2cdf0:	cmp	r0, #0
   2cdf4:	beq	2cf8c <flatcc_json_printer_int32_vector_field@@Base+0x1bc>
   2cdf8:	ldr	r8, [fp, #8]
   2cdfc:	ldr	r1, [r5, #16]
   2ce00:	add	r2, r1, #1
   2ce04:	str	r2, [r5, #16]
   2ce08:	cmp	r1, #0
   2ce0c:	beq	2ce24 <flatcc_json_printer_int32_vector_field@@Base+0x54>
   2ce10:	ldr	r1, [r4, #20]
   2ce14:	add	r2, r1, #1
   2ce18:	str	r2, [r4, #20]
   2ce1c:	mov	r2, #44	; 0x2c
   2ce20:	strb	r2, [r1]
   2ce24:	bl	2a55c <flatcc_json_printer_string_field@@Base+0x17c>
   2ce28:	mov	r5, r0
   2ce2c:	bl	2c340 <flatcc_json_printer_utype_vector_field@@Base+0x1c0>
   2ce30:	mov	r6, r0
   2ce34:	mov	r0, r4
   2ce38:	mov	r1, r7
   2ce3c:	mov	r2, r8
   2ce40:	bl	2a4a0 <flatcc_json_printer_string_field@@Base+0xc0>
   2ce44:	ldr	r0, [r4, #20]
   2ce48:	ldr	r1, [r4, #32]
   2ce4c:	add	r1, r1, #1
   2ce50:	str	r1, [r4, #32]
   2ce54:	add	r1, r0, #1
   2ce58:	str	r1, [r4, #20]
   2ce5c:	mov	r1, #91	; 0x5b
   2ce60:	strb	r1, [r0]
   2ce64:	cmp	r6, #0
   2ce68:	beq	2cf44 <flatcc_json_printer_int32_vector_field@@Base+0x174>
   2ce6c:	add	r7, r5, #4
   2ce70:	ldrb	r0, [r4, #25]
   2ce74:	cmp	r0, #0
   2ce78:	beq	2ce9c <flatcc_json_printer_int32_vector_field@@Base+0xcc>
   2ce7c:	ldr	r0, [r4, #20]
   2ce80:	add	r1, r0, #1
   2ce84:	str	r1, [r4, #20]
   2ce88:	mov	r1, #10
   2ce8c:	strb	r1, [r0]
   2ce90:	mov	r0, r4
   2ce94:	bl	29620 <flatcc_json_printer_indent@@Base+0x4>
   2ce98:	b	2cea4 <flatcc_json_printer_int32_vector_field@@Base+0xd4>
   2ce9c:	mov	r0, r4
   2cea0:	bl	295ec <flatcc_json_printer_nl@@Base+0x18>
   2cea4:	mov	r0, r7
   2cea8:	bl	2ac84 <flatcc_json_printer_int32_field@@Base+0xb0>
   2ceac:	ldr	r1, [r4, #20]
   2ceb0:	bl	2a210 <flatcc_json_printer_int32@@Base+0x2c>
   2ceb4:	ldr	r1, [r4, #20]
   2ceb8:	add	r0, r1, r0
   2cebc:	str	r0, [r4, #20]
   2cec0:	subs	r6, r6, #1
   2cec4:	beq	2cf44 <flatcc_json_printer_int32_vector_field@@Base+0x174>
   2cec8:	add	r5, r5, #8
   2cecc:	mov	r7, #44	; 0x2c
   2ced0:	mov	r8, #10
   2ced4:	b	2cf08 <flatcc_json_printer_int32_vector_field@@Base+0x138>
   2ced8:	mov	r0, r4
   2cedc:	bl	295ec <flatcc_json_printer_nl@@Base+0x18>
   2cee0:	mov	r0, r5
   2cee4:	bl	2ac84 <flatcc_json_printer_int32_field@@Base+0xb0>
   2cee8:	ldr	r1, [r4, #20]
   2ceec:	bl	2a210 <flatcc_json_printer_int32@@Base+0x2c>
   2cef0:	ldr	r1, [r4, #20]
   2cef4:	add	r0, r1, r0
   2cef8:	str	r0, [r4, #20]
   2cefc:	add	r5, r5, #4
   2cf00:	cmp	r6, #0
   2cf04:	beq	2cf44 <flatcc_json_printer_int32_vector_field@@Base+0x174>
   2cf08:	ldr	r0, [r4, #20]
   2cf0c:	add	r1, r0, #1
   2cf10:	str	r1, [r4, #20]
   2cf14:	strb	r7, [r0]
   2cf18:	sub	r6, r6, #1
   2cf1c:	ldrb	r0, [r4, #25]
   2cf20:	cmp	r0, #0
   2cf24:	beq	2ced8 <flatcc_json_printer_int32_vector_field@@Base+0x108>
   2cf28:	ldr	r0, [r4, #20]
   2cf2c:	add	r1, r0, #1
   2cf30:	str	r1, [r4, #20]
   2cf34:	strb	r8, [r0]
   2cf38:	mov	r0, r4
   2cf3c:	bl	29620 <flatcc_json_printer_indent@@Base+0x4>
   2cf40:	b	2cee0 <flatcc_json_printer_int32_vector_field@@Base+0x110>
   2cf44:	ldrb	r0, [r4, #25]
   2cf48:	cmp	r0, #0
   2cf4c:	beq	2cf78 <flatcc_json_printer_int32_vector_field@@Base+0x1a8>
   2cf50:	ldr	r0, [r4, #20]
   2cf54:	add	r1, r0, #1
   2cf58:	str	r1, [r4, #20]
   2cf5c:	mov	r1, #10
   2cf60:	strb	r1, [r0]
   2cf64:	ldr	r0, [r4, #32]
   2cf68:	sub	r0, r0, #1
   2cf6c:	str	r0, [r4, #32]
   2cf70:	mov	r0, r4
   2cf74:	bl	29620 <flatcc_json_printer_indent@@Base+0x4>
   2cf78:	ldr	r0, [r4, #20]
   2cf7c:	add	r1, r0, #1
   2cf80:	str	r1, [r4, #20]
   2cf84:	mov	r1, #93	; 0x5d
   2cf88:	strb	r1, [r0]
   2cf8c:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}

0002cf90 <flatcc_json_printer_int64_vector_field@@Base>:
   2cf90:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   2cf94:	add	fp, sp, #24
   2cf98:	mov	r7, r3
   2cf9c:	mov	r5, r1
   2cfa0:	mov	r4, r0
   2cfa4:	mov	r0, r1
   2cfa8:	mov	r1, r2
   2cfac:	bl	2a460 <flatcc_json_printer_string_field@@Base+0x80>
   2cfb0:	cmp	r0, #0
   2cfb4:	beq	2d14c <flatcc_json_printer_int64_vector_field@@Base+0x1bc>
   2cfb8:	ldr	r8, [fp, #8]
   2cfbc:	ldr	r1, [r5, #16]
   2cfc0:	add	r2, r1, #1
   2cfc4:	str	r2, [r5, #16]
   2cfc8:	cmp	r1, #0
   2cfcc:	beq	2cfe4 <flatcc_json_printer_int64_vector_field@@Base+0x54>
   2cfd0:	ldr	r1, [r4, #20]
   2cfd4:	add	r2, r1, #1
   2cfd8:	str	r2, [r4, #20]
   2cfdc:	mov	r2, #44	; 0x2c
   2cfe0:	strb	r2, [r1]
   2cfe4:	bl	2a55c <flatcc_json_printer_string_field@@Base+0x17c>
   2cfe8:	mov	r5, r0
   2cfec:	bl	2c340 <flatcc_json_printer_utype_vector_field@@Base+0x1c0>
   2cff0:	mov	r6, r0
   2cff4:	mov	r0, r4
   2cff8:	mov	r1, r7
   2cffc:	mov	r2, r8
   2d000:	bl	2a4a0 <flatcc_json_printer_string_field@@Base+0xc0>
   2d004:	ldr	r0, [r4, #20]
   2d008:	ldr	r1, [r4, #32]
   2d00c:	add	r1, r1, #1
   2d010:	str	r1, [r4, #32]
   2d014:	add	r1, r0, #1
   2d018:	str	r1, [r4, #20]
   2d01c:	mov	r1, #91	; 0x5b
   2d020:	strb	r1, [r0]
   2d024:	cmp	r6, #0
   2d028:	beq	2d104 <flatcc_json_printer_int64_vector_field@@Base+0x174>
   2d02c:	add	r7, r5, #4
   2d030:	ldrb	r0, [r4, #25]
   2d034:	cmp	r0, #0
   2d038:	beq	2d05c <flatcc_json_printer_int64_vector_field@@Base+0xcc>
   2d03c:	ldr	r0, [r4, #20]
   2d040:	add	r1, r0, #1
   2d044:	str	r1, [r4, #20]
   2d048:	mov	r1, #10
   2d04c:	strb	r1, [r0]
   2d050:	mov	r0, r4
   2d054:	bl	29620 <flatcc_json_printer_indent@@Base+0x4>
   2d058:	b	2d064 <flatcc_json_printer_int64_vector_field@@Base+0xd4>
   2d05c:	mov	r0, r4
   2d060:	bl	295ec <flatcc_json_printer_nl@@Base+0x18>
   2d064:	mov	r0, r7
   2d068:	bl	2ad60 <flatcc_json_printer_int64_field@@Base+0xd4>
   2d06c:	ldr	r2, [r4, #20]
   2d070:	bl	2a268 <flatcc_json_printer_int64@@Base+0x30>
   2d074:	ldr	r1, [r4, #20]
   2d078:	add	r0, r1, r0
   2d07c:	str	r0, [r4, #20]
   2d080:	subs	r6, r6, #1
   2d084:	beq	2d104 <flatcc_json_printer_int64_vector_field@@Base+0x174>
   2d088:	add	r5, r5, #12
   2d08c:	mov	r7, #44	; 0x2c
   2d090:	mov	r8, #10
   2d094:	b	2d0c8 <flatcc_json_printer_int64_vector_field@@Base+0x138>
   2d098:	mov	r0, r4
   2d09c:	bl	295ec <flatcc_json_printer_nl@@Base+0x18>
   2d0a0:	mov	r0, r5
   2d0a4:	bl	2ad60 <flatcc_json_printer_int64_field@@Base+0xd4>
   2d0a8:	ldr	r2, [r4, #20]
   2d0ac:	bl	2a268 <flatcc_json_printer_int64@@Base+0x30>
   2d0b0:	ldr	r1, [r4, #20]
   2d0b4:	add	r0, r1, r0
   2d0b8:	str	r0, [r4, #20]
   2d0bc:	add	r5, r5, #8
   2d0c0:	cmp	r6, #0
   2d0c4:	beq	2d104 <flatcc_json_printer_int64_vector_field@@Base+0x174>
   2d0c8:	ldr	r0, [r4, #20]
   2d0cc:	add	r1, r0, #1
   2d0d0:	str	r1, [r4, #20]
   2d0d4:	strb	r7, [r0]
   2d0d8:	sub	r6, r6, #1
   2d0dc:	ldrb	r0, [r4, #25]
   2d0e0:	cmp	r0, #0
   2d0e4:	beq	2d098 <flatcc_json_printer_int64_vector_field@@Base+0x108>
   2d0e8:	ldr	r0, [r4, #20]
   2d0ec:	add	r1, r0, #1
   2d0f0:	str	r1, [r4, #20]
   2d0f4:	strb	r8, [r0]
   2d0f8:	mov	r0, r4
   2d0fc:	bl	29620 <flatcc_json_printer_indent@@Base+0x4>
   2d100:	b	2d0a0 <flatcc_json_printer_int64_vector_field@@Base+0x110>
   2d104:	ldrb	r0, [r4, #25]
   2d108:	cmp	r0, #0
   2d10c:	beq	2d138 <flatcc_json_printer_int64_vector_field@@Base+0x1a8>
   2d110:	ldr	r0, [r4, #20]
   2d114:	add	r1, r0, #1
   2d118:	str	r1, [r4, #20]
   2d11c:	mov	r1, #10
   2d120:	strb	r1, [r0]
   2d124:	ldr	r0, [r4, #32]
   2d128:	sub	r0, r0, #1
   2d12c:	str	r0, [r4, #32]
   2d130:	mov	r0, r4
   2d134:	bl	29620 <flatcc_json_printer_indent@@Base+0x4>
   2d138:	ldr	r0, [r4, #20]
   2d13c:	add	r1, r0, #1
   2d140:	str	r1, [r4, #20]
   2d144:	mov	r1, #93	; 0x5d
   2d148:	strb	r1, [r0]
   2d14c:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}

0002d150 <flatcc_json_printer_bool_vector_field@@Base>:
   2d150:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   2d154:	add	fp, sp, #24
   2d158:	mov	r7, r3
   2d15c:	mov	r5, r1
   2d160:	mov	r4, r0
   2d164:	mov	r0, r1
   2d168:	mov	r1, r2
   2d16c:	bl	2a460 <flatcc_json_printer_string_field@@Base+0x80>
   2d170:	cmp	r0, #0
   2d174:	beq	2d30c <flatcc_json_printer_bool_vector_field@@Base+0x1bc>
   2d178:	ldr	r8, [fp, #8]
   2d17c:	ldr	r1, [r5, #16]
   2d180:	add	r2, r1, #1
   2d184:	str	r2, [r5, #16]
   2d188:	cmp	r1, #0
   2d18c:	beq	2d1a4 <flatcc_json_printer_bool_vector_field@@Base+0x54>
   2d190:	ldr	r1, [r4, #20]
   2d194:	add	r2, r1, #1
   2d198:	str	r2, [r4, #20]
   2d19c:	mov	r2, #44	; 0x2c
   2d1a0:	strb	r2, [r1]
   2d1a4:	bl	2a55c <flatcc_json_printer_string_field@@Base+0x17c>
   2d1a8:	mov	r5, r0
   2d1ac:	bl	2c340 <flatcc_json_printer_utype_vector_field@@Base+0x1c0>
   2d1b0:	mov	r6, r0
   2d1b4:	mov	r0, r4
   2d1b8:	mov	r1, r7
   2d1bc:	mov	r2, r8
   2d1c0:	bl	2a4a0 <flatcc_json_printer_string_field@@Base+0xc0>
   2d1c4:	ldr	r0, [r4, #20]
   2d1c8:	ldr	r1, [r4, #32]
   2d1cc:	add	r1, r1, #1
   2d1d0:	str	r1, [r4, #32]
   2d1d4:	add	r1, r0, #1
   2d1d8:	str	r1, [r4, #20]
   2d1dc:	mov	r1, #91	; 0x5b
   2d1e0:	strb	r1, [r0]
   2d1e4:	cmp	r6, #0
   2d1e8:	beq	2d2c4 <flatcc_json_printer_bool_vector_field@@Base+0x174>
   2d1ec:	add	r7, r5, #4
   2d1f0:	ldrb	r0, [r4, #25]
   2d1f4:	cmp	r0, #0
   2d1f8:	beq	2d21c <flatcc_json_printer_bool_vector_field@@Base+0xcc>
   2d1fc:	ldr	r0, [r4, #20]
   2d200:	add	r1, r0, #1
   2d204:	str	r1, [r4, #20]
   2d208:	mov	r1, #10
   2d20c:	strb	r1, [r0]
   2d210:	mov	r0, r4
   2d214:	bl	29620 <flatcc_json_printer_indent@@Base+0x4>
   2d218:	b	2d224 <flatcc_json_printer_bool_vector_field@@Base+0xd4>
   2d21c:	mov	r0, r4
   2d220:	bl	295ec <flatcc_json_printer_nl@@Base+0x18>
   2d224:	mov	r0, r7
   2d228:	bl	2ae18 <flatcc_json_printer_bool_field@@Base+0xb0>
   2d22c:	ldr	r1, [r4, #20]
   2d230:	bl	2ae20 <flatcc_json_printer_bool_field@@Base+0xb8>
   2d234:	ldr	r1, [r4, #20]
   2d238:	add	r0, r1, r0
   2d23c:	str	r0, [r4, #20]
   2d240:	subs	r6, r6, #1
   2d244:	beq	2d2c4 <flatcc_json_printer_bool_vector_field@@Base+0x174>
   2d248:	add	r5, r5, #5
   2d24c:	mov	r7, #44	; 0x2c
   2d250:	mov	r8, #10
   2d254:	b	2d288 <flatcc_json_printer_bool_vector_field@@Base+0x138>
   2d258:	mov	r0, r4
   2d25c:	bl	295ec <flatcc_json_printer_nl@@Base+0x18>
   2d260:	mov	r0, r5
   2d264:	bl	2ae18 <flatcc_json_printer_bool_field@@Base+0xb0>
   2d268:	ldr	r1, [r4, #20]
   2d26c:	bl	2ae20 <flatcc_json_printer_bool_field@@Base+0xb8>
   2d270:	ldr	r1, [r4, #20]
   2d274:	add	r0, r1, r0
   2d278:	str	r0, [r4, #20]
   2d27c:	add	r5, r5, #1
   2d280:	cmp	r6, #0
   2d284:	beq	2d2c4 <flatcc_json_printer_bool_vector_field@@Base+0x174>
   2d288:	ldr	r0, [r4, #20]
   2d28c:	add	r1, r0, #1
   2d290:	str	r1, [r4, #20]
   2d294:	strb	r7, [r0]
   2d298:	sub	r6, r6, #1
   2d29c:	ldrb	r0, [r4, #25]
   2d2a0:	cmp	r0, #0
   2d2a4:	beq	2d258 <flatcc_json_printer_bool_vector_field@@Base+0x108>
   2d2a8:	ldr	r0, [r4, #20]
   2d2ac:	add	r1, r0, #1
   2d2b0:	str	r1, [r4, #20]
   2d2b4:	strb	r8, [r0]
   2d2b8:	mov	r0, r4
   2d2bc:	bl	29620 <flatcc_json_printer_indent@@Base+0x4>
   2d2c0:	b	2d260 <flatcc_json_printer_bool_vector_field@@Base+0x110>
   2d2c4:	ldrb	r0, [r4, #25]
   2d2c8:	cmp	r0, #0
   2d2cc:	beq	2d2f8 <flatcc_json_printer_bool_vector_field@@Base+0x1a8>
   2d2d0:	ldr	r0, [r4, #20]
   2d2d4:	add	r1, r0, #1
   2d2d8:	str	r1, [r4, #20]
   2d2dc:	mov	r1, #10
   2d2e0:	strb	r1, [r0]
   2d2e4:	ldr	r0, [r4, #32]
   2d2e8:	sub	r0, r0, #1
   2d2ec:	str	r0, [r4, #32]
   2d2f0:	mov	r0, r4
   2d2f4:	bl	29620 <flatcc_json_printer_indent@@Base+0x4>
   2d2f8:	ldr	r0, [r4, #20]
   2d2fc:	add	r1, r0, #1
   2d300:	str	r1, [r4, #20]
   2d304:	mov	r1, #93	; 0x5d
   2d308:	strb	r1, [r0]
   2d30c:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}

0002d310 <flatcc_json_printer_float_vector_field@@Base>:
   2d310:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   2d314:	add	fp, sp, #24
   2d318:	mov	r7, r3
   2d31c:	mov	r5, r1
   2d320:	mov	r4, r0
   2d324:	mov	r0, r1
   2d328:	mov	r1, r2
   2d32c:	bl	2a460 <flatcc_json_printer_string_field@@Base+0x80>
   2d330:	cmp	r0, #0
   2d334:	beq	2d4d4 <flatcc_json_printer_float_vector_field@@Base+0x1c4>
   2d338:	ldr	r8, [fp, #8]
   2d33c:	ldr	r1, [r5, #16]
   2d340:	add	r2, r1, #1
   2d344:	str	r2, [r5, #16]
   2d348:	cmp	r1, #0
   2d34c:	beq	2d364 <flatcc_json_printer_float_vector_field@@Base+0x54>
   2d350:	ldr	r1, [r4, #20]
   2d354:	add	r2, r1, #1
   2d358:	str	r2, [r4, #20]
   2d35c:	mov	r2, #44	; 0x2c
   2d360:	strb	r2, [r1]
   2d364:	bl	2a55c <flatcc_json_printer_string_field@@Base+0x17c>
   2d368:	mov	r5, r0
   2d36c:	bl	2c340 <flatcc_json_printer_utype_vector_field@@Base+0x1c0>
   2d370:	mov	r6, r0
   2d374:	mov	r0, r4
   2d378:	mov	r1, r7
   2d37c:	mov	r2, r8
   2d380:	bl	2a4a0 <flatcc_json_printer_string_field@@Base+0xc0>
   2d384:	ldr	r0, [r4, #20]
   2d388:	ldr	r1, [r4, #32]
   2d38c:	add	r1, r1, #1
   2d390:	str	r1, [r4, #32]
   2d394:	add	r1, r0, #1
   2d398:	str	r1, [r4, #20]
   2d39c:	mov	r1, #91	; 0x5b
   2d3a0:	strb	r1, [r0]
   2d3a4:	cmp	r6, #0
   2d3a8:	beq	2d48c <flatcc_json_printer_float_vector_field@@Base+0x17c>
   2d3ac:	add	r7, r5, #4
   2d3b0:	ldrb	r0, [r4, #25]
   2d3b4:	cmp	r0, #0
   2d3b8:	beq	2d3dc <flatcc_json_printer_float_vector_field@@Base+0xcc>
   2d3bc:	ldr	r0, [r4, #20]
   2d3c0:	add	r1, r0, #1
   2d3c4:	str	r1, [r4, #20]
   2d3c8:	mov	r1, #10
   2d3cc:	strb	r1, [r0]
   2d3d0:	mov	r0, r4
   2d3d4:	bl	29620 <flatcc_json_printer_indent@@Base+0x4>
   2d3d8:	b	2d3e4 <flatcc_json_printer_float_vector_field@@Base+0xd4>
   2d3dc:	mov	r0, r4
   2d3e0:	bl	295ec <flatcc_json_printer_nl@@Base+0x18>
   2d3e4:	mov	r0, r7
   2d3e8:	bl	2af20 <flatcc_json_printer_float_field@@Base+0xc0>
   2d3ec:	ldr	r0, [r4, #20]
   2d3f0:	vcvt.f64.f32	d0, s0
   2d3f4:	bl	29058 <flatcc_json_printer_fmt_float@@Base+0x8>
   2d3f8:	ldr	r1, [r4, #20]
   2d3fc:	add	r0, r1, r0
   2d400:	str	r0, [r4, #20]
   2d404:	subs	r6, r6, #1
   2d408:	beq	2d48c <flatcc_json_printer_float_vector_field@@Base+0x17c>
   2d40c:	add	r5, r5, #8
   2d410:	mov	r7, #44	; 0x2c
   2d414:	mov	r8, #10
   2d418:	b	2d450 <flatcc_json_printer_float_vector_field@@Base+0x140>
   2d41c:	mov	r0, r4
   2d420:	bl	295ec <flatcc_json_printer_nl@@Base+0x18>
   2d424:	mov	r0, r5
   2d428:	bl	2af20 <flatcc_json_printer_float_field@@Base+0xc0>
   2d42c:	ldr	r0, [r4, #20]
   2d430:	vcvt.f64.f32	d0, s0
   2d434:	bl	29058 <flatcc_json_printer_fmt_float@@Base+0x8>
   2d438:	ldr	r1, [r4, #20]
   2d43c:	add	r0, r1, r0
   2d440:	str	r0, [r4, #20]
   2d444:	add	r5, r5, #4
   2d448:	cmp	r6, #0
   2d44c:	beq	2d48c <flatcc_json_printer_float_vector_field@@Base+0x17c>
   2d450:	ldr	r0, [r4, #20]
   2d454:	add	r1, r0, #1
   2d458:	str	r1, [r4, #20]
   2d45c:	strb	r7, [r0]
   2d460:	sub	r6, r6, #1
   2d464:	ldrb	r0, [r4, #25]
   2d468:	cmp	r0, #0
   2d46c:	beq	2d41c <flatcc_json_printer_float_vector_field@@Base+0x10c>
   2d470:	ldr	r0, [r4, #20]
   2d474:	add	r1, r0, #1
   2d478:	str	r1, [r4, #20]
   2d47c:	strb	r8, [r0]
   2d480:	mov	r0, r4
   2d484:	bl	29620 <flatcc_json_printer_indent@@Base+0x4>
   2d488:	b	2d424 <flatcc_json_printer_float_vector_field@@Base+0x114>
   2d48c:	ldrb	r0, [r4, #25]
   2d490:	cmp	r0, #0
   2d494:	beq	2d4c0 <flatcc_json_printer_float_vector_field@@Base+0x1b0>
   2d498:	ldr	r0, [r4, #20]
   2d49c:	add	r1, r0, #1
   2d4a0:	str	r1, [r4, #20]
   2d4a4:	mov	r1, #10
   2d4a8:	strb	r1, [r0]
   2d4ac:	ldr	r0, [r4, #32]
   2d4b0:	sub	r0, r0, #1
   2d4b4:	str	r0, [r4, #32]
   2d4b8:	mov	r0, r4
   2d4bc:	bl	29620 <flatcc_json_printer_indent@@Base+0x4>
   2d4c0:	ldr	r0, [r4, #20]
   2d4c4:	add	r1, r0, #1
   2d4c8:	str	r1, [r4, #20]
   2d4cc:	mov	r1, #93	; 0x5d
   2d4d0:	strb	r1, [r0]
   2d4d4:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}

0002d4d8 <flatcc_json_printer_double_vector_field@@Base>:
   2d4d8:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   2d4dc:	add	fp, sp, #24
   2d4e0:	mov	r7, r3
   2d4e4:	mov	r5, r1
   2d4e8:	mov	r4, r0
   2d4ec:	mov	r0, r1
   2d4f0:	mov	r1, r2
   2d4f4:	bl	2a460 <flatcc_json_printer_string_field@@Base+0x80>
   2d4f8:	cmp	r0, #0
   2d4fc:	beq	2d694 <flatcc_json_printer_double_vector_field@@Base+0x1bc>
   2d500:	ldr	r8, [fp, #8]
   2d504:	ldr	r1, [r5, #16]
   2d508:	add	r2, r1, #1
   2d50c:	str	r2, [r5, #16]
   2d510:	cmp	r1, #0
   2d514:	beq	2d52c <flatcc_json_printer_double_vector_field@@Base+0x54>
   2d518:	ldr	r1, [r4, #20]
   2d51c:	add	r2, r1, #1
   2d520:	str	r2, [r4, #20]
   2d524:	mov	r2, #44	; 0x2c
   2d528:	strb	r2, [r1]
   2d52c:	bl	2a55c <flatcc_json_printer_string_field@@Base+0x17c>
   2d530:	mov	r5, r0
   2d534:	bl	2c340 <flatcc_json_printer_utype_vector_field@@Base+0x1c0>
   2d538:	mov	r6, r0
   2d53c:	mov	r0, r4
   2d540:	mov	r1, r7
   2d544:	mov	r2, r8
   2d548:	bl	2a4a0 <flatcc_json_printer_string_field@@Base+0xc0>
   2d54c:	ldr	r0, [r4, #20]
   2d550:	ldr	r1, [r4, #32]
   2d554:	add	r1, r1, #1
   2d558:	str	r1, [r4, #32]
   2d55c:	add	r1, r0, #1
   2d560:	str	r1, [r4, #20]
   2d564:	mov	r1, #91	; 0x5b
   2d568:	strb	r1, [r0]
   2d56c:	cmp	r6, #0
   2d570:	beq	2d64c <flatcc_json_printer_double_vector_field@@Base+0x174>
   2d574:	add	r7, r5, #4
   2d578:	ldrb	r0, [r4, #25]
   2d57c:	cmp	r0, #0
   2d580:	beq	2d5a4 <flatcc_json_printer_double_vector_field@@Base+0xcc>
   2d584:	ldr	r0, [r4, #20]
   2d588:	add	r1, r0, #1
   2d58c:	str	r1, [r4, #20]
   2d590:	mov	r1, #10
   2d594:	strb	r1, [r0]
   2d598:	mov	r0, r4
   2d59c:	bl	29620 <flatcc_json_printer_indent@@Base+0x4>
   2d5a0:	b	2d5ac <flatcc_json_printer_double_vector_field@@Base+0xd4>
   2d5a4:	mov	r0, r4
   2d5a8:	bl	295ec <flatcc_json_printer_nl@@Base+0x18>
   2d5ac:	mov	r0, r7
   2d5b0:	bl	2afe8 <flatcc_json_printer_double_field@@Base+0xc0>
   2d5b4:	ldr	r0, [r4, #20]
   2d5b8:	bl	29058 <flatcc_json_printer_fmt_float@@Base+0x8>
   2d5bc:	ldr	r1, [r4, #20]
   2d5c0:	add	r0, r1, r0
   2d5c4:	str	r0, [r4, #20]
   2d5c8:	subs	r6, r6, #1
   2d5cc:	beq	2d64c <flatcc_json_printer_double_vector_field@@Base+0x174>
   2d5d0:	add	r5, r5, #12
   2d5d4:	mov	r7, #44	; 0x2c
   2d5d8:	mov	r8, #10
   2d5dc:	b	2d610 <flatcc_json_printer_double_vector_field@@Base+0x138>
   2d5e0:	mov	r0, r4
   2d5e4:	bl	295ec <flatcc_json_printer_nl@@Base+0x18>
   2d5e8:	mov	r0, r5
   2d5ec:	bl	2afe8 <flatcc_json_printer_double_field@@Base+0xc0>
   2d5f0:	ldr	r0, [r4, #20]
   2d5f4:	bl	29058 <flatcc_json_printer_fmt_float@@Base+0x8>
   2d5f8:	ldr	r1, [r4, #20]
   2d5fc:	add	r0, r1, r0
   2d600:	str	r0, [r4, #20]
   2d604:	add	r5, r5, #8
   2d608:	cmp	r6, #0
   2d60c:	beq	2d64c <flatcc_json_printer_double_vector_field@@Base+0x174>
   2d610:	ldr	r0, [r4, #20]
   2d614:	add	r1, r0, #1
   2d618:	str	r1, [r4, #20]
   2d61c:	strb	r7, [r0]
   2d620:	sub	r6, r6, #1
   2d624:	ldrb	r0, [r4, #25]
   2d628:	cmp	r0, #0
   2d62c:	beq	2d5e0 <flatcc_json_printer_double_vector_field@@Base+0x108>
   2d630:	ldr	r0, [r4, #20]
   2d634:	add	r1, r0, #1
   2d638:	str	r1, [r4, #20]
   2d63c:	strb	r8, [r0]
   2d640:	mov	r0, r4
   2d644:	bl	29620 <flatcc_json_printer_indent@@Base+0x4>
   2d648:	b	2d5e8 <flatcc_json_printer_double_vector_field@@Base+0x110>
   2d64c:	ldrb	r0, [r4, #25]
   2d650:	cmp	r0, #0
   2d654:	beq	2d680 <flatcc_json_printer_double_vector_field@@Base+0x1a8>
   2d658:	ldr	r0, [r4, #20]
   2d65c:	add	r1, r0, #1
   2d660:	str	r1, [r4, #20]
   2d664:	mov	r1, #10
   2d668:	strb	r1, [r0]
   2d66c:	ldr	r0, [r4, #32]
   2d670:	sub	r0, r0, #1
   2d674:	str	r0, [r4, #32]
   2d678:	mov	r0, r4
   2d67c:	bl	29620 <flatcc_json_printer_indent@@Base+0x4>
   2d680:	ldr	r0, [r4, #20]
   2d684:	add	r1, r0, #1
   2d688:	str	r1, [r4, #20]
   2d68c:	mov	r1, #93	; 0x5d
   2d690:	strb	r1, [r0]
   2d694:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}

0002d698 <flatcc_json_printer_utype_enum_vector_field@@Base>:
   2d698:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   2d69c:	add	fp, sp, #24
   2d6a0:	mov	r6, r3
   2d6a4:	mov	r5, r1
   2d6a8:	mov	r4, r0
   2d6ac:	ldrb	r0, [r0, #27]
   2d6b0:	cmp	r0, #0
   2d6b4:	beq	2d6cc <flatcc_json_printer_utype_enum_vector_field@@Base+0x34>
   2d6b8:	mov	r0, r4
   2d6bc:	mov	r1, r5
   2d6c0:	mov	r3, r6
   2d6c4:	pop	{r4, r5, r6, r7, r8, r9, fp, lr}
   2d6c8:	b	2c180 <flatcc_json_printer_utype_vector_field@@Base>
   2d6cc:	ldr	r7, [fp, #12]
   2d6d0:	ldr	r9, [fp, #8]
   2d6d4:	mov	r0, r5
   2d6d8:	mov	r1, r2
   2d6dc:	bl	2a460 <flatcc_json_printer_string_field@@Base+0x80>
   2d6e0:	cmp	r0, #0
   2d6e4:	beq	2d868 <flatcc_json_printer_utype_enum_vector_field@@Base+0x1d0>
   2d6e8:	ldr	r1, [r5, #16]
   2d6ec:	add	r2, r1, #1
   2d6f0:	str	r2, [r5, #16]
   2d6f4:	cmp	r1, #0
   2d6f8:	beq	2d710 <flatcc_json_printer_utype_enum_vector_field@@Base+0x78>
   2d6fc:	ldr	r1, [r4, #20]
   2d700:	add	r2, r1, #1
   2d704:	str	r2, [r4, #20]
   2d708:	mov	r2, #44	; 0x2c
   2d70c:	strb	r2, [r1]
   2d710:	bl	2a55c <flatcc_json_printer_string_field@@Base+0x17c>
   2d714:	mov	r5, r0
   2d718:	bl	2c340 <flatcc_json_printer_utype_vector_field@@Base+0x1c0>
   2d71c:	mov	r8, r0
   2d720:	mov	r0, r4
   2d724:	mov	r1, r6
   2d728:	mov	r2, r9
   2d72c:	bl	2a4a0 <flatcc_json_printer_string_field@@Base+0xc0>
   2d730:	ldr	r0, [r4, #20]
   2d734:	ldr	r1, [r4, #32]
   2d738:	add	r1, r1, #1
   2d73c:	str	r1, [r4, #32]
   2d740:	add	r1, r0, #1
   2d744:	str	r1, [r4, #20]
   2d748:	mov	r1, #91	; 0x5b
   2d74c:	strb	r1, [r0]
   2d750:	cmp	r8, #0
   2d754:	beq	2d820 <flatcc_json_printer_utype_enum_vector_field@@Base+0x188>
   2d758:	add	r6, r5, #4
   2d75c:	ldrb	r0, [r4, #25]
   2d760:	cmp	r0, #0
   2d764:	beq	2d788 <flatcc_json_printer_utype_enum_vector_field@@Base+0xf0>
   2d768:	ldr	r0, [r4, #20]
   2d76c:	add	r1, r0, #1
   2d770:	str	r1, [r4, #20]
   2d774:	mov	r1, #10
   2d778:	strb	r1, [r0]
   2d77c:	mov	r0, r4
   2d780:	bl	29620 <flatcc_json_printer_indent@@Base+0x4>
   2d784:	b	2d790 <flatcc_json_printer_utype_enum_vector_field@@Base+0xf8>
   2d788:	mov	r0, r4
   2d78c:	bl	295ec <flatcc_json_printer_nl@@Base+0x18>
   2d790:	mov	r0, r6
   2d794:	bl	2c348 <flatcc_json_printer_utype_vector_field@@Base+0x1c8>
   2d798:	mov	r1, r0
   2d79c:	mov	r0, r4
   2d7a0:	blx	r7
   2d7a4:	subs	r6, r8, #1
   2d7a8:	beq	2d820 <flatcc_json_printer_utype_enum_vector_field@@Base+0x188>
   2d7ac:	add	r5, r5, #5
   2d7b0:	mov	r8, #44	; 0x2c
   2d7b4:	mov	r9, #10
   2d7b8:	b	2d7e4 <flatcc_json_printer_utype_enum_vector_field@@Base+0x14c>
   2d7bc:	mov	r0, r4
   2d7c0:	bl	295ec <flatcc_json_printer_nl@@Base+0x18>
   2d7c4:	mov	r0, r5
   2d7c8:	bl	2c348 <flatcc_json_printer_utype_vector_field@@Base+0x1c8>
   2d7cc:	mov	r1, r0
   2d7d0:	mov	r0, r4
   2d7d4:	blx	r7
   2d7d8:	add	r5, r5, #1
   2d7dc:	cmp	r6, #0
   2d7e0:	beq	2d820 <flatcc_json_printer_utype_enum_vector_field@@Base+0x188>
   2d7e4:	ldr	r0, [r4, #20]
   2d7e8:	add	r1, r0, #1
   2d7ec:	str	r1, [r4, #20]
   2d7f0:	strb	r8, [r0]
   2d7f4:	sub	r6, r6, #1
   2d7f8:	ldrb	r0, [r4, #25]
   2d7fc:	cmp	r0, #0
   2d800:	beq	2d7bc <flatcc_json_printer_utype_enum_vector_field@@Base+0x124>
   2d804:	ldr	r0, [r4, #20]
   2d808:	add	r1, r0, #1
   2d80c:	str	r1, [r4, #20]
   2d810:	strb	r9, [r0]
   2d814:	mov	r0, r4
   2d818:	bl	29620 <flatcc_json_printer_indent@@Base+0x4>
   2d81c:	b	2d7c4 <flatcc_json_printer_utype_enum_vector_field@@Base+0x12c>
   2d820:	ldrb	r0, [r4, #25]
   2d824:	cmp	r0, #0
   2d828:	beq	2d854 <flatcc_json_printer_utype_enum_vector_field@@Base+0x1bc>
   2d82c:	ldr	r0, [r4, #20]
   2d830:	add	r1, r0, #1
   2d834:	str	r1, [r4, #20]
   2d838:	mov	r1, #10
   2d83c:	strb	r1, [r0]
   2d840:	ldr	r0, [r4, #32]
   2d844:	sub	r0, r0, #1
   2d848:	str	r0, [r4, #32]
   2d84c:	mov	r0, r4
   2d850:	bl	29620 <flatcc_json_printer_indent@@Base+0x4>
   2d854:	ldr	r0, [r4, #20]
   2d858:	add	r1, r0, #1
   2d85c:	str	r1, [r4, #20]
   2d860:	mov	r1, #93	; 0x5d
   2d864:	strb	r1, [r0]
   2d868:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}

0002d86c <flatcc_json_printer_uint8_enum_vector_field@@Base>:
   2d86c:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   2d870:	add	fp, sp, #24
   2d874:	mov	r6, r3
   2d878:	mov	r5, r1
   2d87c:	mov	r4, r0
   2d880:	ldrb	r0, [r0, #27]
   2d884:	cmp	r0, #0
   2d888:	beq	2d8a0 <flatcc_json_printer_uint8_enum_vector_field@@Base+0x34>
   2d88c:	mov	r0, r4
   2d890:	mov	r1, r5
   2d894:	mov	r3, r6
   2d898:	pop	{r4, r5, r6, r7, r8, r9, fp, lr}
   2d89c:	b	2c350 <flatcc_json_printer_uint8_vector_field@@Base>
   2d8a0:	ldr	r7, [fp, #12]
   2d8a4:	ldr	r9, [fp, #8]
   2d8a8:	mov	r0, r5
   2d8ac:	mov	r1, r2
   2d8b0:	bl	2a460 <flatcc_json_printer_string_field@@Base+0x80>
   2d8b4:	cmp	r0, #0
   2d8b8:	beq	2da3c <flatcc_json_printer_uint8_enum_vector_field@@Base+0x1d0>
   2d8bc:	ldr	r1, [r5, #16]
   2d8c0:	add	r2, r1, #1
   2d8c4:	str	r2, [r5, #16]
   2d8c8:	cmp	r1, #0
   2d8cc:	beq	2d8e4 <flatcc_json_printer_uint8_enum_vector_field@@Base+0x78>
   2d8d0:	ldr	r1, [r4, #20]
   2d8d4:	add	r2, r1, #1
   2d8d8:	str	r2, [r4, #20]
   2d8dc:	mov	r2, #44	; 0x2c
   2d8e0:	strb	r2, [r1]
   2d8e4:	bl	2a55c <flatcc_json_printer_string_field@@Base+0x17c>
   2d8e8:	mov	r5, r0
   2d8ec:	bl	2c340 <flatcc_json_printer_utype_vector_field@@Base+0x1c0>
   2d8f0:	mov	r8, r0
   2d8f4:	mov	r0, r4
   2d8f8:	mov	r1, r6
   2d8fc:	mov	r2, r9
   2d900:	bl	2a4a0 <flatcc_json_printer_string_field@@Base+0xc0>
   2d904:	ldr	r0, [r4, #20]
   2d908:	ldr	r1, [r4, #32]
   2d90c:	add	r1, r1, #1
   2d910:	str	r1, [r4, #32]
   2d914:	add	r1, r0, #1
   2d918:	str	r1, [r4, #20]
   2d91c:	mov	r1, #91	; 0x5b
   2d920:	strb	r1, [r0]
   2d924:	cmp	r8, #0
   2d928:	beq	2d9f4 <flatcc_json_printer_uint8_enum_vector_field@@Base+0x188>
   2d92c:	add	r6, r5, #4
   2d930:	ldrb	r0, [r4, #25]
   2d934:	cmp	r0, #0
   2d938:	beq	2d95c <flatcc_json_printer_uint8_enum_vector_field@@Base+0xf0>
   2d93c:	ldr	r0, [r4, #20]
   2d940:	add	r1, r0, #1
   2d944:	str	r1, [r4, #20]
   2d948:	mov	r1, #10
   2d94c:	strb	r1, [r0]
   2d950:	mov	r0, r4
   2d954:	bl	29620 <flatcc_json_printer_indent@@Base+0x4>
   2d958:	b	2d964 <flatcc_json_printer_uint8_enum_vector_field@@Base+0xf8>
   2d95c:	mov	r0, r4
   2d960:	bl	295ec <flatcc_json_printer_nl@@Base+0x18>
   2d964:	mov	r0, r6
   2d968:	bl	2a810 <flatcc_json_printer_uint8_field@@Base+0xb0>
   2d96c:	mov	r1, r0
   2d970:	mov	r0, r4
   2d974:	blx	r7
   2d978:	subs	r6, r8, #1
   2d97c:	beq	2d9f4 <flatcc_json_printer_uint8_enum_vector_field@@Base+0x188>
   2d980:	add	r5, r5, #5
   2d984:	mov	r8, #44	; 0x2c
   2d988:	mov	r9, #10
   2d98c:	b	2d9b8 <flatcc_json_printer_uint8_enum_vector_field@@Base+0x14c>
   2d990:	mov	r0, r4
   2d994:	bl	295ec <flatcc_json_printer_nl@@Base+0x18>
   2d998:	mov	r0, r5
   2d99c:	bl	2a810 <flatcc_json_printer_uint8_field@@Base+0xb0>
   2d9a0:	mov	r1, r0
   2d9a4:	mov	r0, r4
   2d9a8:	blx	r7
   2d9ac:	add	r5, r5, #1
   2d9b0:	cmp	r6, #0
   2d9b4:	beq	2d9f4 <flatcc_json_printer_uint8_enum_vector_field@@Base+0x188>
   2d9b8:	ldr	r0, [r4, #20]
   2d9bc:	add	r1, r0, #1
   2d9c0:	str	r1, [r4, #20]
   2d9c4:	strb	r8, [r0]
   2d9c8:	sub	r6, r6, #1
   2d9cc:	ldrb	r0, [r4, #25]
   2d9d0:	cmp	r0, #0
   2d9d4:	beq	2d990 <flatcc_json_printer_uint8_enum_vector_field@@Base+0x124>
   2d9d8:	ldr	r0, [r4, #20]
   2d9dc:	add	r1, r0, #1
   2d9e0:	str	r1, [r4, #20]
   2d9e4:	strb	r9, [r0]
   2d9e8:	mov	r0, r4
   2d9ec:	bl	29620 <flatcc_json_printer_indent@@Base+0x4>
   2d9f0:	b	2d998 <flatcc_json_printer_uint8_enum_vector_field@@Base+0x12c>
   2d9f4:	ldrb	r0, [r4, #25]
   2d9f8:	cmp	r0, #0
   2d9fc:	beq	2da28 <flatcc_json_printer_uint8_enum_vector_field@@Base+0x1bc>
   2da00:	ldr	r0, [r4, #20]
   2da04:	add	r1, r0, #1
   2da08:	str	r1, [r4, #20]
   2da0c:	mov	r1, #10
   2da10:	strb	r1, [r0]
   2da14:	ldr	r0, [r4, #32]
   2da18:	sub	r0, r0, #1
   2da1c:	str	r0, [r4, #32]
   2da20:	mov	r0, r4
   2da24:	bl	29620 <flatcc_json_printer_indent@@Base+0x4>
   2da28:	ldr	r0, [r4, #20]
   2da2c:	add	r1, r0, #1
   2da30:	str	r1, [r4, #20]
   2da34:	mov	r1, #93	; 0x5d
   2da38:	strb	r1, [r0]
   2da3c:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}

0002da40 <flatcc_json_printer_uint16_enum_vector_field@@Base>:
   2da40:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   2da44:	add	fp, sp, #24
   2da48:	mov	r6, r3
   2da4c:	mov	r5, r1
   2da50:	mov	r4, r0
   2da54:	ldrb	r0, [r0, #27]
   2da58:	cmp	r0, #0
   2da5c:	beq	2da74 <flatcc_json_printer_uint16_enum_vector_field@@Base+0x34>
   2da60:	mov	r0, r4
   2da64:	mov	r1, r5
   2da68:	mov	r3, r6
   2da6c:	pop	{r4, r5, r6, r7, r8, r9, fp, lr}
   2da70:	b	2c510 <flatcc_json_printer_uint16_vector_field@@Base>
   2da74:	ldr	r7, [fp, #12]
   2da78:	ldr	r9, [fp, #8]
   2da7c:	mov	r0, r5
   2da80:	mov	r1, r2
   2da84:	bl	2a460 <flatcc_json_printer_string_field@@Base+0x80>
   2da88:	cmp	r0, #0
   2da8c:	beq	2dc10 <flatcc_json_printer_uint16_enum_vector_field@@Base+0x1d0>
   2da90:	ldr	r1, [r5, #16]
   2da94:	add	r2, r1, #1
   2da98:	str	r2, [r5, #16]
   2da9c:	cmp	r1, #0
   2daa0:	beq	2dab8 <flatcc_json_printer_uint16_enum_vector_field@@Base+0x78>
   2daa4:	ldr	r1, [r4, #20]
   2daa8:	add	r2, r1, #1
   2daac:	str	r2, [r4, #20]
   2dab0:	mov	r2, #44	; 0x2c
   2dab4:	strb	r2, [r1]
   2dab8:	bl	2a55c <flatcc_json_printer_string_field@@Base+0x17c>
   2dabc:	mov	r5, r0
   2dac0:	bl	2c340 <flatcc_json_printer_utype_vector_field@@Base+0x1c0>
   2dac4:	mov	r8, r0
   2dac8:	mov	r0, r4
   2dacc:	mov	r1, r6
   2dad0:	mov	r2, r9
   2dad4:	bl	2a4a0 <flatcc_json_printer_string_field@@Base+0xc0>
   2dad8:	ldr	r0, [r4, #20]
   2dadc:	ldr	r1, [r4, #32]
   2dae0:	add	r1, r1, #1
   2dae4:	str	r1, [r4, #32]
   2dae8:	add	r1, r0, #1
   2daec:	str	r1, [r4, #20]
   2daf0:	mov	r1, #91	; 0x5b
   2daf4:	strb	r1, [r0]
   2daf8:	cmp	r8, #0
   2dafc:	beq	2dbc8 <flatcc_json_printer_uint16_enum_vector_field@@Base+0x188>
   2db00:	add	r6, r5, #4
   2db04:	ldrb	r0, [r4, #25]
   2db08:	cmp	r0, #0
   2db0c:	beq	2db30 <flatcc_json_printer_uint16_enum_vector_field@@Base+0xf0>
   2db10:	ldr	r0, [r4, #20]
   2db14:	add	r1, r0, #1
   2db18:	str	r1, [r4, #20]
   2db1c:	mov	r1, #10
   2db20:	strb	r1, [r0]
   2db24:	mov	r0, r4
   2db28:	bl	29620 <flatcc_json_printer_indent@@Base+0x4>
   2db2c:	b	2db38 <flatcc_json_printer_uint16_enum_vector_field@@Base+0xf8>
   2db30:	mov	r0, r4
   2db34:	bl	295ec <flatcc_json_printer_nl@@Base+0x18>
   2db38:	mov	r0, r6
   2db3c:	bl	2a8c8 <flatcc_json_printer_uint16_field@@Base+0xb0>
   2db40:	mov	r1, r0
   2db44:	mov	r0, r4
   2db48:	blx	r7
   2db4c:	subs	r6, r8, #1
   2db50:	beq	2dbc8 <flatcc_json_printer_uint16_enum_vector_field@@Base+0x188>
   2db54:	add	r5, r5, #6
   2db58:	mov	r8, #44	; 0x2c
   2db5c:	mov	r9, #10
   2db60:	b	2db8c <flatcc_json_printer_uint16_enum_vector_field@@Base+0x14c>
   2db64:	mov	r0, r4
   2db68:	bl	295ec <flatcc_json_printer_nl@@Base+0x18>
   2db6c:	mov	r0, r5
   2db70:	bl	2a8c8 <flatcc_json_printer_uint16_field@@Base+0xb0>
   2db74:	mov	r1, r0
   2db78:	mov	r0, r4
   2db7c:	blx	r7
   2db80:	add	r5, r5, #2
   2db84:	cmp	r6, #0
   2db88:	beq	2dbc8 <flatcc_json_printer_uint16_enum_vector_field@@Base+0x188>
   2db8c:	ldr	r0, [r4, #20]
   2db90:	add	r1, r0, #1
   2db94:	str	r1, [r4, #20]
   2db98:	strb	r8, [r0]
   2db9c:	sub	r6, r6, #1
   2dba0:	ldrb	r0, [r4, #25]
   2dba4:	cmp	r0, #0
   2dba8:	beq	2db64 <flatcc_json_printer_uint16_enum_vector_field@@Base+0x124>
   2dbac:	ldr	r0, [r4, #20]
   2dbb0:	add	r1, r0, #1
   2dbb4:	str	r1, [r4, #20]
   2dbb8:	strb	r9, [r0]
   2dbbc:	mov	r0, r4
   2dbc0:	bl	29620 <flatcc_json_printer_indent@@Base+0x4>
   2dbc4:	b	2db6c <flatcc_json_printer_uint16_enum_vector_field@@Base+0x12c>
   2dbc8:	ldrb	r0, [r4, #25]
   2dbcc:	cmp	r0, #0
   2dbd0:	beq	2dbfc <flatcc_json_printer_uint16_enum_vector_field@@Base+0x1bc>
   2dbd4:	ldr	r0, [r4, #20]
   2dbd8:	add	r1, r0, #1
   2dbdc:	str	r1, [r4, #20]
   2dbe0:	mov	r1, #10
   2dbe4:	strb	r1, [r0]
   2dbe8:	ldr	r0, [r4, #32]
   2dbec:	sub	r0, r0, #1
   2dbf0:	str	r0, [r4, #32]
   2dbf4:	mov	r0, r4
   2dbf8:	bl	29620 <flatcc_json_printer_indent@@Base+0x4>
   2dbfc:	ldr	r0, [r4, #20]
   2dc00:	add	r1, r0, #1
   2dc04:	str	r1, [r4, #20]
   2dc08:	mov	r1, #93	; 0x5d
   2dc0c:	strb	r1, [r0]
   2dc10:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}

0002dc14 <flatcc_json_printer_uint32_enum_vector_field@@Base>:
   2dc14:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   2dc18:	add	fp, sp, #24
   2dc1c:	mov	r6, r3
   2dc20:	mov	r5, r1
   2dc24:	mov	r4, r0
   2dc28:	ldrb	r0, [r0, #27]
   2dc2c:	cmp	r0, #0
   2dc30:	beq	2dc48 <flatcc_json_printer_uint32_enum_vector_field@@Base+0x34>
   2dc34:	mov	r0, r4
   2dc38:	mov	r1, r5
   2dc3c:	mov	r3, r6
   2dc40:	pop	{r4, r5, r6, r7, r8, r9, fp, lr}
   2dc44:	b	2c6d0 <flatcc_json_printer_uint32_vector_field@@Base>
   2dc48:	ldr	r7, [fp, #12]
   2dc4c:	ldr	r9, [fp, #8]
   2dc50:	mov	r0, r5
   2dc54:	mov	r1, r2
   2dc58:	bl	2a460 <flatcc_json_printer_string_field@@Base+0x80>
   2dc5c:	cmp	r0, #0
   2dc60:	beq	2dde4 <flatcc_json_printer_uint32_enum_vector_field@@Base+0x1d0>
   2dc64:	ldr	r1, [r5, #16]
   2dc68:	add	r2, r1, #1
   2dc6c:	str	r2, [r5, #16]
   2dc70:	cmp	r1, #0
   2dc74:	beq	2dc8c <flatcc_json_printer_uint32_enum_vector_field@@Base+0x78>
   2dc78:	ldr	r1, [r4, #20]
   2dc7c:	add	r2, r1, #1
   2dc80:	str	r2, [r4, #20]
   2dc84:	mov	r2, #44	; 0x2c
   2dc88:	strb	r2, [r1]
   2dc8c:	bl	2a55c <flatcc_json_printer_string_field@@Base+0x17c>
   2dc90:	mov	r5, r0
   2dc94:	bl	2c340 <flatcc_json_printer_utype_vector_field@@Base+0x1c0>
   2dc98:	mov	r8, r0
   2dc9c:	mov	r0, r4
   2dca0:	mov	r1, r6
   2dca4:	mov	r2, r9
   2dca8:	bl	2a4a0 <flatcc_json_printer_string_field@@Base+0xc0>
   2dcac:	ldr	r0, [r4, #20]
   2dcb0:	ldr	r1, [r4, #32]
   2dcb4:	add	r1, r1, #1
   2dcb8:	str	r1, [r4, #32]
   2dcbc:	add	r1, r0, #1
   2dcc0:	str	r1, [r4, #20]
   2dcc4:	mov	r1, #91	; 0x5b
   2dcc8:	strb	r1, [r0]
   2dccc:	cmp	r8, #0
   2dcd0:	beq	2dd9c <flatcc_json_printer_uint32_enum_vector_field@@Base+0x188>
   2dcd4:	add	r6, r5, #4
   2dcd8:	ldrb	r0, [r4, #25]
   2dcdc:	cmp	r0, #0
   2dce0:	beq	2dd04 <flatcc_json_printer_uint32_enum_vector_field@@Base+0xf0>
   2dce4:	ldr	r0, [r4, #20]
   2dce8:	add	r1, r0, #1
   2dcec:	str	r1, [r4, #20]
   2dcf0:	mov	r1, #10
   2dcf4:	strb	r1, [r0]
   2dcf8:	mov	r0, r4
   2dcfc:	bl	29620 <flatcc_json_printer_indent@@Base+0x4>
   2dd00:	b	2dd0c <flatcc_json_printer_uint32_enum_vector_field@@Base+0xf8>
   2dd04:	mov	r0, r4
   2dd08:	bl	295ec <flatcc_json_printer_nl@@Base+0x18>
   2dd0c:	mov	r0, r6
   2dd10:	bl	2a980 <flatcc_json_printer_uint32_field@@Base+0xb0>
   2dd14:	mov	r1, r0
   2dd18:	mov	r0, r4
   2dd1c:	blx	r7
   2dd20:	subs	r6, r8, #1
   2dd24:	beq	2dd9c <flatcc_json_printer_uint32_enum_vector_field@@Base+0x188>
   2dd28:	add	r5, r5, #8
   2dd2c:	mov	r8, #44	; 0x2c
   2dd30:	mov	r9, #10
   2dd34:	b	2dd60 <flatcc_json_printer_uint32_enum_vector_field@@Base+0x14c>
   2dd38:	mov	r0, r4
   2dd3c:	bl	295ec <flatcc_json_printer_nl@@Base+0x18>
   2dd40:	mov	r0, r5
   2dd44:	bl	2a980 <flatcc_json_printer_uint32_field@@Base+0xb0>
   2dd48:	mov	r1, r0
   2dd4c:	mov	r0, r4
   2dd50:	blx	r7
   2dd54:	add	r5, r5, #4
   2dd58:	cmp	r6, #0
   2dd5c:	beq	2dd9c <flatcc_json_printer_uint32_enum_vector_field@@Base+0x188>
   2dd60:	ldr	r0, [r4, #20]
   2dd64:	add	r1, r0, #1
   2dd68:	str	r1, [r4, #20]
   2dd6c:	strb	r8, [r0]
   2dd70:	sub	r6, r6, #1
   2dd74:	ldrb	r0, [r4, #25]
   2dd78:	cmp	r0, #0
   2dd7c:	beq	2dd38 <flatcc_json_printer_uint32_enum_vector_field@@Base+0x124>
   2dd80:	ldr	r0, [r4, #20]
   2dd84:	add	r1, r0, #1
   2dd88:	str	r1, [r4, #20]
   2dd8c:	strb	r9, [r0]
   2dd90:	mov	r0, r4
   2dd94:	bl	29620 <flatcc_json_printer_indent@@Base+0x4>
   2dd98:	b	2dd40 <flatcc_json_printer_uint32_enum_vector_field@@Base+0x12c>
   2dd9c:	ldrb	r0, [r4, #25]
   2dda0:	cmp	r0, #0
   2dda4:	beq	2ddd0 <flatcc_json_printer_uint32_enum_vector_field@@Base+0x1bc>
   2dda8:	ldr	r0, [r4, #20]
   2ddac:	add	r1, r0, #1
   2ddb0:	str	r1, [r4, #20]
   2ddb4:	mov	r1, #10
   2ddb8:	strb	r1, [r0]
   2ddbc:	ldr	r0, [r4, #32]
   2ddc0:	sub	r0, r0, #1
   2ddc4:	str	r0, [r4, #32]
   2ddc8:	mov	r0, r4
   2ddcc:	bl	29620 <flatcc_json_printer_indent@@Base+0x4>
   2ddd0:	ldr	r0, [r4, #20]
   2ddd4:	add	r1, r0, #1
   2ddd8:	str	r1, [r4, #20]
   2dddc:	mov	r1, #93	; 0x5d
   2dde0:	strb	r1, [r0]
   2dde4:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}

0002dde8 <flatcc_json_printer_uint64_enum_vector_field@@Base>:
   2dde8:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   2ddec:	add	fp, sp, #24
   2ddf0:	mov	r7, r3
   2ddf4:	mov	r5, r1
   2ddf8:	mov	r4, r0
   2ddfc:	ldrb	r0, [r0, #27]
   2de00:	cmp	r0, #0
   2de04:	beq	2de1c <flatcc_json_printer_uint64_enum_vector_field@@Base+0x34>
   2de08:	mov	r0, r4
   2de0c:	mov	r1, r5
   2de10:	mov	r3, r7
   2de14:	pop	{r4, r5, r6, r7, r8, r9, fp, lr}
   2de18:	b	2c890 <flatcc_json_printer_uint64_vector_field@@Base>
   2de1c:	ldr	r6, [fp, #12]
   2de20:	ldr	r9, [fp, #8]
   2de24:	mov	r0, r5
   2de28:	mov	r1, r2
   2de2c:	bl	2a460 <flatcc_json_printer_string_field@@Base+0x80>
   2de30:	cmp	r0, #0
   2de34:	beq	2dfc0 <flatcc_json_printer_uint64_enum_vector_field@@Base+0x1d8>
   2de38:	ldr	r1, [r5, #16]
   2de3c:	add	r2, r1, #1
   2de40:	str	r2, [r5, #16]
   2de44:	cmp	r1, #0
   2de48:	beq	2de60 <flatcc_json_printer_uint64_enum_vector_field@@Base+0x78>
   2de4c:	ldr	r1, [r4, #20]
   2de50:	add	r2, r1, #1
   2de54:	str	r2, [r4, #20]
   2de58:	mov	r2, #44	; 0x2c
   2de5c:	strb	r2, [r1]
   2de60:	bl	2a55c <flatcc_json_printer_string_field@@Base+0x17c>
   2de64:	mov	r5, r0
   2de68:	bl	2c340 <flatcc_json_printer_utype_vector_field@@Base+0x1c0>
   2de6c:	mov	r8, r0
   2de70:	mov	r0, r4
   2de74:	mov	r1, r7
   2de78:	mov	r2, r9
   2de7c:	bl	2a4a0 <flatcc_json_printer_string_field@@Base+0xc0>
   2de80:	ldr	r0, [r4, #20]
   2de84:	ldr	r1, [r4, #32]
   2de88:	add	r1, r1, #1
   2de8c:	str	r1, [r4, #32]
   2de90:	add	r1, r0, #1
   2de94:	str	r1, [r4, #20]
   2de98:	mov	r1, #91	; 0x5b
   2de9c:	strb	r1, [r0]
   2dea0:	cmp	r8, #0
   2dea4:	beq	2df78 <flatcc_json_printer_uint64_enum_vector_field@@Base+0x190>
   2dea8:	add	r7, r5, #4
   2deac:	ldrb	r0, [r4, #25]
   2deb0:	cmp	r0, #0
   2deb4:	beq	2ded8 <flatcc_json_printer_uint64_enum_vector_field@@Base+0xf0>
   2deb8:	ldr	r0, [r4, #20]
   2debc:	add	r1, r0, #1
   2dec0:	str	r1, [r4, #20]
   2dec4:	mov	r1, #10
   2dec8:	strb	r1, [r0]
   2decc:	mov	r0, r4
   2ded0:	bl	29620 <flatcc_json_printer_indent@@Base+0x4>
   2ded4:	b	2dee0 <flatcc_json_printer_uint64_enum_vector_field@@Base+0xf8>
   2ded8:	mov	r0, r4
   2dedc:	bl	295ec <flatcc_json_printer_nl@@Base+0x18>
   2dee0:	mov	r0, r7
   2dee4:	bl	2aa5c <flatcc_json_printer_uint64_field@@Base+0xd4>
   2dee8:	mov	r2, r0
   2deec:	mov	r0, r4
   2def0:	mov	r3, r1
   2def4:	blx	r6
   2def8:	subs	r7, r8, #1
   2defc:	beq	2df78 <flatcc_json_printer_uint64_enum_vector_field@@Base+0x190>
   2df00:	add	r5, r5, #12
   2df04:	mov	r8, #44	; 0x2c
   2df08:	mov	r9, #10
   2df0c:	b	2df3c <flatcc_json_printer_uint64_enum_vector_field@@Base+0x154>
   2df10:	mov	r0, r4
   2df14:	bl	295ec <flatcc_json_printer_nl@@Base+0x18>
   2df18:	mov	r0, r5
   2df1c:	bl	2aa5c <flatcc_json_printer_uint64_field@@Base+0xd4>
   2df20:	mov	r2, r0
   2df24:	mov	r0, r4
   2df28:	mov	r3, r1
   2df2c:	blx	r6
   2df30:	add	r5, r5, #8
   2df34:	cmp	r7, #0
   2df38:	beq	2df78 <flatcc_json_printer_uint64_enum_vector_field@@Base+0x190>
   2df3c:	ldr	r0, [r4, #20]
   2df40:	add	r1, r0, #1
   2df44:	str	r1, [r4, #20]
   2df48:	strb	r8, [r0]
   2df4c:	sub	r7, r7, #1
   2df50:	ldrb	r0, [r4, #25]
   2df54:	cmp	r0, #0
   2df58:	beq	2df10 <flatcc_json_printer_uint64_enum_vector_field@@Base+0x128>
   2df5c:	ldr	r0, [r4, #20]
   2df60:	add	r1, r0, #1
   2df64:	str	r1, [r4, #20]
   2df68:	strb	r9, [r0]
   2df6c:	mov	r0, r4
   2df70:	bl	29620 <flatcc_json_printer_indent@@Base+0x4>
   2df74:	b	2df18 <flatcc_json_printer_uint64_enum_vector_field@@Base+0x130>
   2df78:	ldrb	r0, [r4, #25]
   2df7c:	cmp	r0, #0
   2df80:	beq	2dfac <flatcc_json_printer_uint64_enum_vector_field@@Base+0x1c4>
   2df84:	ldr	r0, [r4, #20]
   2df88:	add	r1, r0, #1
   2df8c:	str	r1, [r4, #20]
   2df90:	mov	r1, #10
   2df94:	strb	r1, [r0]
   2df98:	ldr	r0, [r4, #32]
   2df9c:	sub	r0, r0, #1
   2dfa0:	str	r0, [r4, #32]
   2dfa4:	mov	r0, r4
   2dfa8:	bl	29620 <flatcc_json_printer_indent@@Base+0x4>
   2dfac:	ldr	r0, [r4, #20]
   2dfb0:	add	r1, r0, #1
   2dfb4:	str	r1, [r4, #20]
   2dfb8:	mov	r1, #93	; 0x5d
   2dfbc:	strb	r1, [r0]
   2dfc0:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}

0002dfc4 <flatcc_json_printer_int8_enum_vector_field@@Base>:
   2dfc4:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   2dfc8:	add	fp, sp, #24
   2dfcc:	mov	r6, r3
   2dfd0:	mov	r5, r1
   2dfd4:	mov	r4, r0
   2dfd8:	ldrb	r0, [r0, #27]
   2dfdc:	cmp	r0, #0
   2dfe0:	beq	2dff8 <flatcc_json_printer_int8_enum_vector_field@@Base+0x34>
   2dfe4:	mov	r0, r4
   2dfe8:	mov	r1, r5
   2dfec:	mov	r3, r6
   2dff0:	pop	{r4, r5, r6, r7, r8, r9, fp, lr}
   2dff4:	b	2ca50 <flatcc_json_printer_int8_vector_field@@Base>
   2dff8:	ldr	r7, [fp, #12]
   2dffc:	ldr	r9, [fp, #8]
   2e000:	mov	r0, r5
   2e004:	mov	r1, r2
   2e008:	bl	2a460 <flatcc_json_printer_string_field@@Base+0x80>
   2e00c:	cmp	r0, #0
   2e010:	beq	2e194 <flatcc_json_printer_int8_enum_vector_field@@Base+0x1d0>
   2e014:	ldr	r1, [r5, #16]
   2e018:	add	r2, r1, #1
   2e01c:	str	r2, [r5, #16]
   2e020:	cmp	r1, #0
   2e024:	beq	2e03c <flatcc_json_printer_int8_enum_vector_field@@Base+0x78>
   2e028:	ldr	r1, [r4, #20]
   2e02c:	add	r2, r1, #1
   2e030:	str	r2, [r4, #20]
   2e034:	mov	r2, #44	; 0x2c
   2e038:	strb	r2, [r1]
   2e03c:	bl	2a55c <flatcc_json_printer_string_field@@Base+0x17c>
   2e040:	mov	r5, r0
   2e044:	bl	2c340 <flatcc_json_printer_utype_vector_field@@Base+0x1c0>
   2e048:	mov	r8, r0
   2e04c:	mov	r0, r4
   2e050:	mov	r1, r6
   2e054:	mov	r2, r9
   2e058:	bl	2a4a0 <flatcc_json_printer_string_field@@Base+0xc0>
   2e05c:	ldr	r0, [r4, #20]
   2e060:	ldr	r1, [r4, #32]
   2e064:	add	r1, r1, #1
   2e068:	str	r1, [r4, #32]
   2e06c:	add	r1, r0, #1
   2e070:	str	r1, [r4, #20]
   2e074:	mov	r1, #91	; 0x5b
   2e078:	strb	r1, [r0]
   2e07c:	cmp	r8, #0
   2e080:	beq	2e14c <flatcc_json_printer_int8_enum_vector_field@@Base+0x188>
   2e084:	add	r6, r5, #4
   2e088:	ldrb	r0, [r4, #25]
   2e08c:	cmp	r0, #0
   2e090:	beq	2e0b4 <flatcc_json_printer_int8_enum_vector_field@@Base+0xf0>
   2e094:	ldr	r0, [r4, #20]
   2e098:	add	r1, r0, #1
   2e09c:	str	r1, [r4, #20]
   2e0a0:	mov	r1, #10
   2e0a4:	strb	r1, [r0]
   2e0a8:	mov	r0, r4
   2e0ac:	bl	29620 <flatcc_json_printer_indent@@Base+0x4>
   2e0b0:	b	2e0bc <flatcc_json_printer_int8_enum_vector_field@@Base+0xf8>
   2e0b4:	mov	r0, r4
   2e0b8:	bl	295ec <flatcc_json_printer_nl@@Base+0x18>
   2e0bc:	mov	r0, r6
   2e0c0:	bl	2ab14 <flatcc_json_printer_int8_field@@Base+0xb0>
   2e0c4:	mov	r1, r0
   2e0c8:	mov	r0, r4
   2e0cc:	blx	r7
   2e0d0:	subs	r6, r8, #1
   2e0d4:	beq	2e14c <flatcc_json_printer_int8_enum_vector_field@@Base+0x188>
   2e0d8:	add	r5, r5, #5
   2e0dc:	mov	r8, #44	; 0x2c
   2e0e0:	mov	r9, #10
   2e0e4:	b	2e110 <flatcc_json_printer_int8_enum_vector_field@@Base+0x14c>
   2e0e8:	mov	r0, r4
   2e0ec:	bl	295ec <flatcc_json_printer_nl@@Base+0x18>
   2e0f0:	mov	r0, r5
   2e0f4:	bl	2ab14 <flatcc_json_printer_int8_field@@Base+0xb0>
   2e0f8:	mov	r1, r0
   2e0fc:	mov	r0, r4
   2e100:	blx	r7
   2e104:	add	r5, r5, #1
   2e108:	cmp	r6, #0
   2e10c:	beq	2e14c <flatcc_json_printer_int8_enum_vector_field@@Base+0x188>
   2e110:	ldr	r0, [r4, #20]
   2e114:	add	r1, r0, #1
   2e118:	str	r1, [r4, #20]
   2e11c:	strb	r8, [r0]
   2e120:	sub	r6, r6, #1
   2e124:	ldrb	r0, [r4, #25]
   2e128:	cmp	r0, #0
   2e12c:	beq	2e0e8 <flatcc_json_printer_int8_enum_vector_field@@Base+0x124>
   2e130:	ldr	r0, [r4, #20]
   2e134:	add	r1, r0, #1
   2e138:	str	r1, [r4, #20]
   2e13c:	strb	r9, [r0]
   2e140:	mov	r0, r4
   2e144:	bl	29620 <flatcc_json_printer_indent@@Base+0x4>
   2e148:	b	2e0f0 <flatcc_json_printer_int8_enum_vector_field@@Base+0x12c>
   2e14c:	ldrb	r0, [r4, #25]
   2e150:	cmp	r0, #0
   2e154:	beq	2e180 <flatcc_json_printer_int8_enum_vector_field@@Base+0x1bc>
   2e158:	ldr	r0, [r4, #20]
   2e15c:	add	r1, r0, #1
   2e160:	str	r1, [r4, #20]
   2e164:	mov	r1, #10
   2e168:	strb	r1, [r0]
   2e16c:	ldr	r0, [r4, #32]
   2e170:	sub	r0, r0, #1
   2e174:	str	r0, [r4, #32]
   2e178:	mov	r0, r4
   2e17c:	bl	29620 <flatcc_json_printer_indent@@Base+0x4>
   2e180:	ldr	r0, [r4, #20]
   2e184:	add	r1, r0, #1
   2e188:	str	r1, [r4, #20]
   2e18c:	mov	r1, #93	; 0x5d
   2e190:	strb	r1, [r0]
   2e194:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}

0002e198 <flatcc_json_printer_int16_enum_vector_field@@Base>:
   2e198:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   2e19c:	add	fp, sp, #24
   2e1a0:	mov	r6, r3
   2e1a4:	mov	r5, r1
   2e1a8:	mov	r4, r0
   2e1ac:	ldrb	r0, [r0, #27]
   2e1b0:	cmp	r0, #0
   2e1b4:	beq	2e1cc <flatcc_json_printer_int16_enum_vector_field@@Base+0x34>
   2e1b8:	mov	r0, r4
   2e1bc:	mov	r1, r5
   2e1c0:	mov	r3, r6
   2e1c4:	pop	{r4, r5, r6, r7, r8, r9, fp, lr}
   2e1c8:	b	2cc10 <flatcc_json_printer_int16_vector_field@@Base>
   2e1cc:	ldr	r7, [fp, #12]
   2e1d0:	ldr	r9, [fp, #8]
   2e1d4:	mov	r0, r5
   2e1d8:	mov	r1, r2
   2e1dc:	bl	2a460 <flatcc_json_printer_string_field@@Base+0x80>
   2e1e0:	cmp	r0, #0
   2e1e4:	beq	2e368 <flatcc_json_printer_int16_enum_vector_field@@Base+0x1d0>
   2e1e8:	ldr	r1, [r5, #16]
   2e1ec:	add	r2, r1, #1
   2e1f0:	str	r2, [r5, #16]
   2e1f4:	cmp	r1, #0
   2e1f8:	beq	2e210 <flatcc_json_printer_int16_enum_vector_field@@Base+0x78>
   2e1fc:	ldr	r1, [r4, #20]
   2e200:	add	r2, r1, #1
   2e204:	str	r2, [r4, #20]
   2e208:	mov	r2, #44	; 0x2c
   2e20c:	strb	r2, [r1]
   2e210:	bl	2a55c <flatcc_json_printer_string_field@@Base+0x17c>
   2e214:	mov	r5, r0
   2e218:	bl	2c340 <flatcc_json_printer_utype_vector_field@@Base+0x1c0>
   2e21c:	mov	r8, r0
   2e220:	mov	r0, r4
   2e224:	mov	r1, r6
   2e228:	mov	r2, r9
   2e22c:	bl	2a4a0 <flatcc_json_printer_string_field@@Base+0xc0>
   2e230:	ldr	r0, [r4, #20]
   2e234:	ldr	r1, [r4, #32]
   2e238:	add	r1, r1, #1
   2e23c:	str	r1, [r4, #32]
   2e240:	add	r1, r0, #1
   2e244:	str	r1, [r4, #20]
   2e248:	mov	r1, #91	; 0x5b
   2e24c:	strb	r1, [r0]
   2e250:	cmp	r8, #0
   2e254:	beq	2e320 <flatcc_json_printer_int16_enum_vector_field@@Base+0x188>
   2e258:	add	r6, r5, #4
   2e25c:	ldrb	r0, [r4, #25]
   2e260:	cmp	r0, #0
   2e264:	beq	2e288 <flatcc_json_printer_int16_enum_vector_field@@Base+0xf0>
   2e268:	ldr	r0, [r4, #20]
   2e26c:	add	r1, r0, #1
   2e270:	str	r1, [r4, #20]
   2e274:	mov	r1, #10
   2e278:	strb	r1, [r0]
   2e27c:	mov	r0, r4
   2e280:	bl	29620 <flatcc_json_printer_indent@@Base+0x4>
   2e284:	b	2e290 <flatcc_json_printer_int16_enum_vector_field@@Base+0xf8>
   2e288:	mov	r0, r4
   2e28c:	bl	295ec <flatcc_json_printer_nl@@Base+0x18>
   2e290:	mov	r0, r6
   2e294:	bl	2abcc <flatcc_json_printer_int16_field@@Base+0xb0>
   2e298:	mov	r1, r0
   2e29c:	mov	r0, r4
   2e2a0:	blx	r7
   2e2a4:	subs	r6, r8, #1
   2e2a8:	beq	2e320 <flatcc_json_printer_int16_enum_vector_field@@Base+0x188>
   2e2ac:	add	r5, r5, #6
   2e2b0:	mov	r8, #44	; 0x2c
   2e2b4:	mov	r9, #10
   2e2b8:	b	2e2e4 <flatcc_json_printer_int16_enum_vector_field@@Base+0x14c>
   2e2bc:	mov	r0, r4
   2e2c0:	bl	295ec <flatcc_json_printer_nl@@Base+0x18>
   2e2c4:	mov	r0, r5
   2e2c8:	bl	2abcc <flatcc_json_printer_int16_field@@Base+0xb0>
   2e2cc:	mov	r1, r0
   2e2d0:	mov	r0, r4
   2e2d4:	blx	r7
   2e2d8:	add	r5, r5, #2
   2e2dc:	cmp	r6, #0
   2e2e0:	beq	2e320 <flatcc_json_printer_int16_enum_vector_field@@Base+0x188>
   2e2e4:	ldr	r0, [r4, #20]
   2e2e8:	add	r1, r0, #1
   2e2ec:	str	r1, [r4, #20]
   2e2f0:	strb	r8, [r0]
   2e2f4:	sub	r6, r6, #1
   2e2f8:	ldrb	r0, [r4, #25]
   2e2fc:	cmp	r0, #0
   2e300:	beq	2e2bc <flatcc_json_printer_int16_enum_vector_field@@Base+0x124>
   2e304:	ldr	r0, [r4, #20]
   2e308:	add	r1, r0, #1
   2e30c:	str	r1, [r4, #20]
   2e310:	strb	r9, [r0]
   2e314:	mov	r0, r4
   2e318:	bl	29620 <flatcc_json_printer_indent@@Base+0x4>
   2e31c:	b	2e2c4 <flatcc_json_printer_int16_enum_vector_field@@Base+0x12c>
   2e320:	ldrb	r0, [r4, #25]
   2e324:	cmp	r0, #0
   2e328:	beq	2e354 <flatcc_json_printer_int16_enum_vector_field@@Base+0x1bc>
   2e32c:	ldr	r0, [r4, #20]
   2e330:	add	r1, r0, #1
   2e334:	str	r1, [r4, #20]
   2e338:	mov	r1, #10
   2e33c:	strb	r1, [r0]
   2e340:	ldr	r0, [r4, #32]
   2e344:	sub	r0, r0, #1
   2e348:	str	r0, [r4, #32]
   2e34c:	mov	r0, r4
   2e350:	bl	29620 <flatcc_json_printer_indent@@Base+0x4>
   2e354:	ldr	r0, [r4, #20]
   2e358:	add	r1, r0, #1
   2e35c:	str	r1, [r4, #20]
   2e360:	mov	r1, #93	; 0x5d
   2e364:	strb	r1, [r0]
   2e368:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}

0002e36c <flatcc_json_printer_int32_enum_vector_field@@Base>:
   2e36c:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   2e370:	add	fp, sp, #24
   2e374:	mov	r6, r3
   2e378:	mov	r5, r1
   2e37c:	mov	r4, r0
   2e380:	ldrb	r0, [r0, #27]
   2e384:	cmp	r0, #0
   2e388:	beq	2e3a0 <flatcc_json_printer_int32_enum_vector_field@@Base+0x34>
   2e38c:	mov	r0, r4
   2e390:	mov	r1, r5
   2e394:	mov	r3, r6
   2e398:	pop	{r4, r5, r6, r7, r8, r9, fp, lr}
   2e39c:	b	2cdd0 <flatcc_json_printer_int32_vector_field@@Base>
   2e3a0:	ldr	r7, [fp, #12]
   2e3a4:	ldr	r9, [fp, #8]
   2e3a8:	mov	r0, r5
   2e3ac:	mov	r1, r2
   2e3b0:	bl	2a460 <flatcc_json_printer_string_field@@Base+0x80>
   2e3b4:	cmp	r0, #0
   2e3b8:	beq	2e53c <flatcc_json_printer_int32_enum_vector_field@@Base+0x1d0>
   2e3bc:	ldr	r1, [r5, #16]
   2e3c0:	add	r2, r1, #1
   2e3c4:	str	r2, [r5, #16]
   2e3c8:	cmp	r1, #0
   2e3cc:	beq	2e3e4 <flatcc_json_printer_int32_enum_vector_field@@Base+0x78>
   2e3d0:	ldr	r1, [r4, #20]
   2e3d4:	add	r2, r1, #1
   2e3d8:	str	r2, [r4, #20]
   2e3dc:	mov	r2, #44	; 0x2c
   2e3e0:	strb	r2, [r1]
   2e3e4:	bl	2a55c <flatcc_json_printer_string_field@@Base+0x17c>
   2e3e8:	mov	r5, r0
   2e3ec:	bl	2c340 <flatcc_json_printer_utype_vector_field@@Base+0x1c0>
   2e3f0:	mov	r8, r0
   2e3f4:	mov	r0, r4
   2e3f8:	mov	r1, r6
   2e3fc:	mov	r2, r9
   2e400:	bl	2a4a0 <flatcc_json_printer_string_field@@Base+0xc0>
   2e404:	ldr	r0, [r4, #20]
   2e408:	ldr	r1, [r4, #32]
   2e40c:	add	r1, r1, #1
   2e410:	str	r1, [r4, #32]
   2e414:	add	r1, r0, #1
   2e418:	str	r1, [r4, #20]
   2e41c:	mov	r1, #91	; 0x5b
   2e420:	strb	r1, [r0]
   2e424:	cmp	r8, #0
   2e428:	beq	2e4f4 <flatcc_json_printer_int32_enum_vector_field@@Base+0x188>
   2e42c:	add	r6, r5, #4
   2e430:	ldrb	r0, [r4, #25]
   2e434:	cmp	r0, #0
   2e438:	beq	2e45c <flatcc_json_printer_int32_enum_vector_field@@Base+0xf0>
   2e43c:	ldr	r0, [r4, #20]
   2e440:	add	r1, r0, #1
   2e444:	str	r1, [r4, #20]
   2e448:	mov	r1, #10
   2e44c:	strb	r1, [r0]
   2e450:	mov	r0, r4
   2e454:	bl	29620 <flatcc_json_printer_indent@@Base+0x4>
   2e458:	b	2e464 <flatcc_json_printer_int32_enum_vector_field@@Base+0xf8>
   2e45c:	mov	r0, r4
   2e460:	bl	295ec <flatcc_json_printer_nl@@Base+0x18>
   2e464:	mov	r0, r6
   2e468:	bl	2ac84 <flatcc_json_printer_int32_field@@Base+0xb0>
   2e46c:	mov	r1, r0
   2e470:	mov	r0, r4
   2e474:	blx	r7
   2e478:	subs	r6, r8, #1
   2e47c:	beq	2e4f4 <flatcc_json_printer_int32_enum_vector_field@@Base+0x188>
   2e480:	add	r5, r5, #8
   2e484:	mov	r8, #44	; 0x2c
   2e488:	mov	r9, #10
   2e48c:	b	2e4b8 <flatcc_json_printer_int32_enum_vector_field@@Base+0x14c>
   2e490:	mov	r0, r4
   2e494:	bl	295ec <flatcc_json_printer_nl@@Base+0x18>
   2e498:	mov	r0, r5
   2e49c:	bl	2ac84 <flatcc_json_printer_int32_field@@Base+0xb0>
   2e4a0:	mov	r1, r0
   2e4a4:	mov	r0, r4
   2e4a8:	blx	r7
   2e4ac:	add	r5, r5, #4
   2e4b0:	cmp	r6, #0
   2e4b4:	beq	2e4f4 <flatcc_json_printer_int32_enum_vector_field@@Base+0x188>
   2e4b8:	ldr	r0, [r4, #20]
   2e4bc:	add	r1, r0, #1
   2e4c0:	str	r1, [r4, #20]
   2e4c4:	strb	r8, [r0]
   2e4c8:	sub	r6, r6, #1
   2e4cc:	ldrb	r0, [r4, #25]
   2e4d0:	cmp	r0, #0
   2e4d4:	beq	2e490 <flatcc_json_printer_int32_enum_vector_field@@Base+0x124>
   2e4d8:	ldr	r0, [r4, #20]
   2e4dc:	add	r1, r0, #1
   2e4e0:	str	r1, [r4, #20]
   2e4e4:	strb	r9, [r0]
   2e4e8:	mov	r0, r4
   2e4ec:	bl	29620 <flatcc_json_printer_indent@@Base+0x4>
   2e4f0:	b	2e498 <flatcc_json_printer_int32_enum_vector_field@@Base+0x12c>
   2e4f4:	ldrb	r0, [r4, #25]
   2e4f8:	cmp	r0, #0
   2e4fc:	beq	2e528 <flatcc_json_printer_int32_enum_vector_field@@Base+0x1bc>
   2e500:	ldr	r0, [r4, #20]
   2e504:	add	r1, r0, #1
   2e508:	str	r1, [r4, #20]
   2e50c:	mov	r1, #10
   2e510:	strb	r1, [r0]
   2e514:	ldr	r0, [r4, #32]
   2e518:	sub	r0, r0, #1
   2e51c:	str	r0, [r4, #32]
   2e520:	mov	r0, r4
   2e524:	bl	29620 <flatcc_json_printer_indent@@Base+0x4>
   2e528:	ldr	r0, [r4, #20]
   2e52c:	add	r1, r0, #1
   2e530:	str	r1, [r4, #20]
   2e534:	mov	r1, #93	; 0x5d
   2e538:	strb	r1, [r0]
   2e53c:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}

0002e540 <flatcc_json_printer_int64_enum_vector_field@@Base>:
   2e540:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   2e544:	add	fp, sp, #24
   2e548:	mov	r7, r3
   2e54c:	mov	r5, r1
   2e550:	mov	r4, r0
   2e554:	ldrb	r0, [r0, #27]
   2e558:	cmp	r0, #0
   2e55c:	beq	2e574 <flatcc_json_printer_int64_enum_vector_field@@Base+0x34>
   2e560:	mov	r0, r4
   2e564:	mov	r1, r5
   2e568:	mov	r3, r7
   2e56c:	pop	{r4, r5, r6, r7, r8, r9, fp, lr}
   2e570:	b	2cf90 <flatcc_json_printer_int64_vector_field@@Base>
   2e574:	ldr	r6, [fp, #12]
   2e578:	ldr	r9, [fp, #8]
   2e57c:	mov	r0, r5
   2e580:	mov	r1, r2
   2e584:	bl	2a460 <flatcc_json_printer_string_field@@Base+0x80>
   2e588:	cmp	r0, #0
   2e58c:	beq	2e718 <flatcc_json_printer_int64_enum_vector_field@@Base+0x1d8>
   2e590:	ldr	r1, [r5, #16]
   2e594:	add	r2, r1, #1
   2e598:	str	r2, [r5, #16]
   2e59c:	cmp	r1, #0
   2e5a0:	beq	2e5b8 <flatcc_json_printer_int64_enum_vector_field@@Base+0x78>
   2e5a4:	ldr	r1, [r4, #20]
   2e5a8:	add	r2, r1, #1
   2e5ac:	str	r2, [r4, #20]
   2e5b0:	mov	r2, #44	; 0x2c
   2e5b4:	strb	r2, [r1]
   2e5b8:	bl	2a55c <flatcc_json_printer_string_field@@Base+0x17c>
   2e5bc:	mov	r5, r0
   2e5c0:	bl	2c340 <flatcc_json_printer_utype_vector_field@@Base+0x1c0>
   2e5c4:	mov	r8, r0
   2e5c8:	mov	r0, r4
   2e5cc:	mov	r1, r7
   2e5d0:	mov	r2, r9
   2e5d4:	bl	2a4a0 <flatcc_json_printer_string_field@@Base+0xc0>
   2e5d8:	ldr	r0, [r4, #20]
   2e5dc:	ldr	r1, [r4, #32]
   2e5e0:	add	r1, r1, #1
   2e5e4:	str	r1, [r4, #32]
   2e5e8:	add	r1, r0, #1
   2e5ec:	str	r1, [r4, #20]
   2e5f0:	mov	r1, #91	; 0x5b
   2e5f4:	strb	r1, [r0]
   2e5f8:	cmp	r8, #0
   2e5fc:	beq	2e6d0 <flatcc_json_printer_int64_enum_vector_field@@Base+0x190>
   2e600:	add	r7, r5, #4
   2e604:	ldrb	r0, [r4, #25]
   2e608:	cmp	r0, #0
   2e60c:	beq	2e630 <flatcc_json_printer_int64_enum_vector_field@@Base+0xf0>
   2e610:	ldr	r0, [r4, #20]
   2e614:	add	r1, r0, #1
   2e618:	str	r1, [r4, #20]
   2e61c:	mov	r1, #10
   2e620:	strb	r1, [r0]
   2e624:	mov	r0, r4
   2e628:	bl	29620 <flatcc_json_printer_indent@@Base+0x4>
   2e62c:	b	2e638 <flatcc_json_printer_int64_enum_vector_field@@Base+0xf8>
   2e630:	mov	r0, r4
   2e634:	bl	295ec <flatcc_json_printer_nl@@Base+0x18>
   2e638:	mov	r0, r7
   2e63c:	bl	2ad60 <flatcc_json_printer_int64_field@@Base+0xd4>
   2e640:	mov	r2, r0
   2e644:	mov	r0, r4
   2e648:	mov	r3, r1
   2e64c:	blx	r6
   2e650:	subs	r7, r8, #1
   2e654:	beq	2e6d0 <flatcc_json_printer_int64_enum_vector_field@@Base+0x190>
   2e658:	add	r5, r5, #12
   2e65c:	mov	r8, #44	; 0x2c
   2e660:	mov	r9, #10
   2e664:	b	2e694 <flatcc_json_printer_int64_enum_vector_field@@Base+0x154>
   2e668:	mov	r0, r4
   2e66c:	bl	295ec <flatcc_json_printer_nl@@Base+0x18>
   2e670:	mov	r0, r5
   2e674:	bl	2ad60 <flatcc_json_printer_int64_field@@Base+0xd4>
   2e678:	mov	r2, r0
   2e67c:	mov	r0, r4
   2e680:	mov	r3, r1
   2e684:	blx	r6
   2e688:	add	r5, r5, #8
   2e68c:	cmp	r7, #0
   2e690:	beq	2e6d0 <flatcc_json_printer_int64_enum_vector_field@@Base+0x190>
   2e694:	ldr	r0, [r4, #20]
   2e698:	add	r1, r0, #1
   2e69c:	str	r1, [r4, #20]
   2e6a0:	strb	r8, [r0]
   2e6a4:	sub	r7, r7, #1
   2e6a8:	ldrb	r0, [r4, #25]
   2e6ac:	cmp	r0, #0
   2e6b0:	beq	2e668 <flatcc_json_printer_int64_enum_vector_field@@Base+0x128>
   2e6b4:	ldr	r0, [r4, #20]
   2e6b8:	add	r1, r0, #1
   2e6bc:	str	r1, [r4, #20]
   2e6c0:	strb	r9, [r0]
   2e6c4:	mov	r0, r4
   2e6c8:	bl	29620 <flatcc_json_printer_indent@@Base+0x4>
   2e6cc:	b	2e670 <flatcc_json_printer_int64_enum_vector_field@@Base+0x130>
   2e6d0:	ldrb	r0, [r4, #25]
   2e6d4:	cmp	r0, #0
   2e6d8:	beq	2e704 <flatcc_json_printer_int64_enum_vector_field@@Base+0x1c4>
   2e6dc:	ldr	r0, [r4, #20]
   2e6e0:	add	r1, r0, #1
   2e6e4:	str	r1, [r4, #20]
   2e6e8:	mov	r1, #10
   2e6ec:	strb	r1, [r0]
   2e6f0:	ldr	r0, [r4, #32]
   2e6f4:	sub	r0, r0, #1
   2e6f8:	str	r0, [r4, #32]
   2e6fc:	mov	r0, r4
   2e700:	bl	29620 <flatcc_json_printer_indent@@Base+0x4>
   2e704:	ldr	r0, [r4, #20]
   2e708:	add	r1, r0, #1
   2e70c:	str	r1, [r4, #20]
   2e710:	mov	r1, #93	; 0x5d
   2e714:	strb	r1, [r0]
   2e718:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}

0002e71c <flatcc_json_printer_bool_enum_vector_field@@Base>:
   2e71c:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   2e720:	add	fp, sp, #24
   2e724:	mov	r6, r3
   2e728:	mov	r5, r1
   2e72c:	mov	r4, r0
   2e730:	ldrb	r0, [r0, #27]
   2e734:	cmp	r0, #0
   2e738:	beq	2e750 <flatcc_json_printer_bool_enum_vector_field@@Base+0x34>
   2e73c:	mov	r0, r4
   2e740:	mov	r1, r5
   2e744:	mov	r3, r6
   2e748:	pop	{r4, r5, r6, r7, r8, r9, fp, lr}
   2e74c:	b	2d150 <flatcc_json_printer_bool_vector_field@@Base>
   2e750:	ldr	r7, [fp, #12]
   2e754:	ldr	r9, [fp, #8]
   2e758:	mov	r0, r5
   2e75c:	mov	r1, r2
   2e760:	bl	2a460 <flatcc_json_printer_string_field@@Base+0x80>
   2e764:	cmp	r0, #0
   2e768:	beq	2e8ec <flatcc_json_printer_bool_enum_vector_field@@Base+0x1d0>
   2e76c:	ldr	r1, [r5, #16]
   2e770:	add	r2, r1, #1
   2e774:	str	r2, [r5, #16]
   2e778:	cmp	r1, #0
   2e77c:	beq	2e794 <flatcc_json_printer_bool_enum_vector_field@@Base+0x78>
   2e780:	ldr	r1, [r4, #20]
   2e784:	add	r2, r1, #1
   2e788:	str	r2, [r4, #20]
   2e78c:	mov	r2, #44	; 0x2c
   2e790:	strb	r2, [r1]
   2e794:	bl	2a55c <flatcc_json_printer_string_field@@Base+0x17c>
   2e798:	mov	r5, r0
   2e79c:	bl	2c340 <flatcc_json_printer_utype_vector_field@@Base+0x1c0>
   2e7a0:	mov	r8, r0
   2e7a4:	mov	r0, r4
   2e7a8:	mov	r1, r6
   2e7ac:	mov	r2, r9
   2e7b0:	bl	2a4a0 <flatcc_json_printer_string_field@@Base+0xc0>
   2e7b4:	ldr	r0, [r4, #20]
   2e7b8:	ldr	r1, [r4, #32]
   2e7bc:	add	r1, r1, #1
   2e7c0:	str	r1, [r4, #32]
   2e7c4:	add	r1, r0, #1
   2e7c8:	str	r1, [r4, #20]
   2e7cc:	mov	r1, #91	; 0x5b
   2e7d0:	strb	r1, [r0]
   2e7d4:	cmp	r8, #0
   2e7d8:	beq	2e8a4 <flatcc_json_printer_bool_enum_vector_field@@Base+0x188>
   2e7dc:	add	r6, r5, #4
   2e7e0:	ldrb	r0, [r4, #25]
   2e7e4:	cmp	r0, #0
   2e7e8:	beq	2e80c <flatcc_json_printer_bool_enum_vector_field@@Base+0xf0>
   2e7ec:	ldr	r0, [r4, #20]
   2e7f0:	add	r1, r0, #1
   2e7f4:	str	r1, [r4, #20]
   2e7f8:	mov	r1, #10
   2e7fc:	strb	r1, [r0]
   2e800:	mov	r0, r4
   2e804:	bl	29620 <flatcc_json_printer_indent@@Base+0x4>
   2e808:	b	2e814 <flatcc_json_printer_bool_enum_vector_field@@Base+0xf8>
   2e80c:	mov	r0, r4
   2e810:	bl	295ec <flatcc_json_printer_nl@@Base+0x18>
   2e814:	mov	r0, r6
   2e818:	bl	2ae18 <flatcc_json_printer_bool_field@@Base+0xb0>
   2e81c:	mov	r1, r0
   2e820:	mov	r0, r4
   2e824:	blx	r7
   2e828:	subs	r6, r8, #1
   2e82c:	beq	2e8a4 <flatcc_json_printer_bool_enum_vector_field@@Base+0x188>
   2e830:	add	r5, r5, #5
   2e834:	mov	r8, #44	; 0x2c
   2e838:	mov	r9, #10
   2e83c:	b	2e868 <flatcc_json_printer_bool_enum_vector_field@@Base+0x14c>
   2e840:	mov	r0, r4
   2e844:	bl	295ec <flatcc_json_printer_nl@@Base+0x18>
   2e848:	mov	r0, r5
   2e84c:	bl	2ae18 <flatcc_json_printer_bool_field@@Base+0xb0>
   2e850:	mov	r1, r0
   2e854:	mov	r0, r4
   2e858:	blx	r7
   2e85c:	add	r5, r5, #1
   2e860:	cmp	r6, #0
   2e864:	beq	2e8a4 <flatcc_json_printer_bool_enum_vector_field@@Base+0x188>
   2e868:	ldr	r0, [r4, #20]
   2e86c:	add	r1, r0, #1
   2e870:	str	r1, [r4, #20]
   2e874:	strb	r8, [r0]
   2e878:	sub	r6, r6, #1
   2e87c:	ldrb	r0, [r4, #25]
   2e880:	cmp	r0, #0
   2e884:	beq	2e840 <flatcc_json_printer_bool_enum_vector_field@@Base+0x124>
   2e888:	ldr	r0, [r4, #20]
   2e88c:	add	r1, r0, #1
   2e890:	str	r1, [r4, #20]
   2e894:	strb	r9, [r0]
   2e898:	mov	r0, r4
   2e89c:	bl	29620 <flatcc_json_printer_indent@@Base+0x4>
   2e8a0:	b	2e848 <flatcc_json_printer_bool_enum_vector_field@@Base+0x12c>
   2e8a4:	ldrb	r0, [r4, #25]
   2e8a8:	cmp	r0, #0
   2e8ac:	beq	2e8d8 <flatcc_json_printer_bool_enum_vector_field@@Base+0x1bc>
   2e8b0:	ldr	r0, [r4, #20]
   2e8b4:	add	r1, r0, #1
   2e8b8:	str	r1, [r4, #20]
   2e8bc:	mov	r1, #10
   2e8c0:	strb	r1, [r0]
   2e8c4:	ldr	r0, [r4, #32]
   2e8c8:	sub	r0, r0, #1
   2e8cc:	str	r0, [r4, #32]
   2e8d0:	mov	r0, r4
   2e8d4:	bl	29620 <flatcc_json_printer_indent@@Base+0x4>
   2e8d8:	ldr	r0, [r4, #20]
   2e8dc:	add	r1, r0, #1
   2e8e0:	str	r1, [r4, #20]
   2e8e4:	mov	r1, #93	; 0x5d
   2e8e8:	strb	r1, [r0]
   2e8ec:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}

0002e8f0 <flatcc_json_printer_struct_vector_field@@Base>:
   2e8f0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2e8f4:	add	fp, sp, #28
   2e8f8:	sub	sp, sp, #4
   2e8fc:	mov	r7, r3
   2e900:	mov	r5, r1
   2e904:	mov	r4, r0
   2e908:	mov	r0, r1
   2e90c:	mov	r1, r2
   2e910:	bl	2a460 <flatcc_json_printer_string_field@@Base+0x80>
   2e914:	cmp	r0, #0
   2e918:	beq	2eb70 <flatcc_json_printer_struct_vector_field@@Base+0x280>
   2e91c:	ldr	r8, [fp, #8]
   2e920:	ldr	r1, [r5, #16]
   2e924:	add	r2, r1, #1
   2e928:	str	r2, [r5, #16]
   2e92c:	cmp	r1, #0
   2e930:	beq	2e948 <flatcc_json_printer_struct_vector_field@@Base+0x58>
   2e934:	ldr	r1, [r4, #20]
   2e938:	add	r2, r1, #1
   2e93c:	str	r2, [r4, #20]
   2e940:	mov	r2, #44	; 0x2c
   2e944:	strb	r2, [r1]
   2e948:	bl	2a55c <flatcc_json_printer_string_field@@Base+0x17c>
   2e94c:	mov	r5, r0
   2e950:	bl	2c340 <flatcc_json_printer_utype_vector_field@@Base+0x1c0>
   2e954:	mov	r9, r0
   2e958:	mov	r0, r4
   2e95c:	mov	r1, r7
   2e960:	mov	r2, r8
   2e964:	bl	2a4a0 <flatcc_json_printer_string_field@@Base+0xc0>
   2e968:	ldr	r0, [r4, #20]
   2e96c:	ldr	r1, [r4, #32]
   2e970:	add	r1, r1, #1
   2e974:	str	r1, [r4, #32]
   2e978:	add	r1, r0, #1
   2e97c:	str	r1, [r4, #20]
   2e980:	mov	r1, #91	; 0x5b
   2e984:	strb	r1, [r0]
   2e988:	cmp	r9, #0
   2e98c:	beq	2eb28 <flatcc_json_printer_struct_vector_field@@Base+0x238>
   2e990:	add	r8, r5, #4
   2e994:	ldrb	r0, [r4, #25]
   2e998:	cmp	r0, #0
   2e99c:	beq	2e9c0 <flatcc_json_printer_struct_vector_field@@Base+0xd0>
   2e9a0:	ldr	r0, [r4, #20]
   2e9a4:	add	r1, r0, #1
   2e9a8:	str	r1, [r4, #20]
   2e9ac:	mov	r1, #10
   2e9b0:	strb	r1, [r0]
   2e9b4:	mov	r0, r4
   2e9b8:	bl	29620 <flatcc_json_printer_indent@@Base+0x4>
   2e9bc:	b	2e9c8 <flatcc_json_printer_struct_vector_field@@Base+0xd8>
   2e9c0:	mov	r0, r4
   2e9c4:	bl	295ec <flatcc_json_printer_nl@@Base+0x18>
   2e9c8:	ldr	r0, [r4, #20]
   2e9cc:	ldr	r1, [r4, #32]
   2e9d0:	add	r1, r1, #1
   2e9d4:	str	r1, [r4, #32]
   2e9d8:	add	r1, r0, #1
   2e9dc:	str	r1, [r4, #20]
   2e9e0:	mov	r1, #123	; 0x7b
   2e9e4:	strb	r1, [r0]
   2e9e8:	mov	r0, r4
   2e9ec:	mov	r1, r8
   2e9f0:	ldr	r2, [fp, #16]
   2e9f4:	blx	r2
   2e9f8:	ldrb	r0, [r4, #25]
   2e9fc:	cmp	r0, #0
   2ea00:	beq	2ea2c <flatcc_json_printer_struct_vector_field@@Base+0x13c>
   2ea04:	ldr	r0, [r4, #20]
   2ea08:	add	r1, r0, #1
   2ea0c:	str	r1, [r4, #20]
   2ea10:	mov	r1, #10
   2ea14:	strb	r1, [r0]
   2ea18:	ldr	r0, [r4, #32]
   2ea1c:	sub	r0, r0, #1
   2ea20:	str	r0, [r4, #32]
   2ea24:	mov	r0, r4
   2ea28:	bl	29620 <flatcc_json_printer_indent@@Base+0x4>
   2ea2c:	ldr	r0, [r4, #20]
   2ea30:	add	r1, r0, #1
   2ea34:	str	r1, [r4, #20]
   2ea38:	mov	r1, #125	; 0x7d
   2ea3c:	strb	r1, [r0]
   2ea40:	subs	r7, r9, #1
   2ea44:	beq	2eb28 <flatcc_json_printer_struct_vector_field@@Base+0x238>
   2ea48:	ldr	r9, [fp, #12]
   2ea4c:	add	r0, r9, r5
   2ea50:	add	r5, r0, #4
   2ea54:	mov	r6, #44	; 0x2c
   2ea58:	mov	sl, #123	; 0x7b
   2ea5c:	mov	r8, #10
   2ea60:	b	2ea84 <flatcc_json_printer_struct_vector_field@@Base+0x194>
   2ea64:	ldr	r0, [r4, #20]
   2ea68:	add	r1, r0, #1
   2ea6c:	str	r1, [r4, #20]
   2ea70:	mov	r1, #125	; 0x7d
   2ea74:	strb	r1, [r0]
   2ea78:	add	r5, r5, r9
   2ea7c:	cmp	r7, #0
   2ea80:	beq	2eb28 <flatcc_json_printer_struct_vector_field@@Base+0x238>
   2ea84:	ldr	r0, [r4, #20]
   2ea88:	add	r1, r0, #1
   2ea8c:	str	r1, [r4, #20]
   2ea90:	strb	r6, [r0]
   2ea94:	ldrb	r0, [r4, #25]
   2ea98:	cmp	r0, #0
   2ea9c:	beq	2eabc <flatcc_json_printer_struct_vector_field@@Base+0x1cc>
   2eaa0:	ldr	r0, [r4, #20]
   2eaa4:	add	r1, r0, #1
   2eaa8:	str	r1, [r4, #20]
   2eaac:	strb	r8, [r0]
   2eab0:	mov	r0, r4
   2eab4:	bl	29620 <flatcc_json_printer_indent@@Base+0x4>
   2eab8:	b	2eac4 <flatcc_json_printer_struct_vector_field@@Base+0x1d4>
   2eabc:	mov	r0, r4
   2eac0:	bl	295ec <flatcc_json_printer_nl@@Base+0x18>
   2eac4:	sub	r7, r7, #1
   2eac8:	ldr	r0, [r4, #20]
   2eacc:	ldr	r1, [r4, #32]
   2ead0:	add	r1, r1, #1
   2ead4:	str	r1, [r4, #32]
   2ead8:	add	r1, r0, #1
   2eadc:	str	r1, [r4, #20]
   2eae0:	strb	sl, [r0]
   2eae4:	mov	r0, r4
   2eae8:	mov	r1, r5
   2eaec:	ldr	r2, [fp, #16]
   2eaf0:	blx	r2
   2eaf4:	ldrb	r0, [r4, #25]
   2eaf8:	cmp	r0, #0
   2eafc:	beq	2ea64 <flatcc_json_printer_struct_vector_field@@Base+0x174>
   2eb00:	ldr	r0, [r4, #20]
   2eb04:	add	r1, r0, #1
   2eb08:	str	r1, [r4, #20]
   2eb0c:	strb	r8, [r0]
   2eb10:	ldr	r0, [r4, #32]
   2eb14:	sub	r0, r0, #1
   2eb18:	str	r0, [r4, #32]
   2eb1c:	mov	r0, r4
   2eb20:	bl	29620 <flatcc_json_printer_indent@@Base+0x4>
   2eb24:	b	2ea64 <flatcc_json_printer_struct_vector_field@@Base+0x174>
   2eb28:	ldrb	r0, [r4, #25]
   2eb2c:	cmp	r0, #0
   2eb30:	beq	2eb5c <flatcc_json_printer_struct_vector_field@@Base+0x26c>
   2eb34:	ldr	r0, [r4, #20]
   2eb38:	add	r1, r0, #1
   2eb3c:	str	r1, [r4, #20]
   2eb40:	mov	r1, #10
   2eb44:	strb	r1, [r0]
   2eb48:	ldr	r0, [r4, #32]
   2eb4c:	sub	r0, r0, #1
   2eb50:	str	r0, [r4, #32]
   2eb54:	mov	r0, r4
   2eb58:	bl	29620 <flatcc_json_printer_indent@@Base+0x4>
   2eb5c:	ldr	r0, [r4, #20]
   2eb60:	add	r1, r0, #1
   2eb64:	str	r1, [r4, #20]
   2eb68:	mov	r1, #93	; 0x5d
   2eb6c:	strb	r1, [r0]
   2eb70:	sub	sp, fp, #28
   2eb74:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}

0002eb78 <flatcc_json_printer_string_vector_field@@Base>:
   2eb78:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   2eb7c:	add	fp, sp, #24
   2eb80:	mov	r7, r3
   2eb84:	mov	r5, r1
   2eb88:	mov	r4, r0
   2eb8c:	mov	r0, r1
   2eb90:	mov	r1, r2
   2eb94:	bl	2a460 <flatcc_json_printer_string_field@@Base+0x80>
   2eb98:	cmp	r0, #0
   2eb9c:	beq	2ed24 <flatcc_json_printer_string_vector_field@@Base+0x1ac>
   2eba0:	ldr	r8, [fp, #8]
   2eba4:	ldr	r1, [r5, #16]
   2eba8:	add	r2, r1, #1
   2ebac:	str	r2, [r5, #16]
   2ebb0:	cmp	r1, #0
   2ebb4:	beq	2ebcc <flatcc_json_printer_string_vector_field@@Base+0x54>
   2ebb8:	ldr	r1, [r4, #20]
   2ebbc:	add	r2, r1, #1
   2ebc0:	str	r2, [r4, #20]
   2ebc4:	mov	r2, #44	; 0x2c
   2ebc8:	strb	r2, [r1]
   2ebcc:	bl	2a55c <flatcc_json_printer_string_field@@Base+0x17c>
   2ebd0:	mov	r5, r0
   2ebd4:	bl	2c340 <flatcc_json_printer_utype_vector_field@@Base+0x1c0>
   2ebd8:	mov	r6, r0
   2ebdc:	mov	r0, r4
   2ebe0:	mov	r1, r7
   2ebe4:	mov	r2, r8
   2ebe8:	bl	2a4a0 <flatcc_json_printer_string_field@@Base+0xc0>
   2ebec:	ldr	r0, [r4, #20]
   2ebf0:	ldr	r1, [r4, #32]
   2ebf4:	add	r1, r1, #1
   2ebf8:	str	r1, [r4, #32]
   2ebfc:	add	r1, r0, #1
   2ec00:	str	r1, [r4, #20]
   2ec04:	mov	r1, #91	; 0x5b
   2ec08:	strb	r1, [r0]
   2ec0c:	cmp	r6, #0
   2ec10:	beq	2ecdc <flatcc_json_printer_string_vector_field@@Base+0x164>
   2ec14:	add	r7, r5, #4
   2ec18:	ldrb	r0, [r4, #25]
   2ec1c:	cmp	r0, #0
   2ec20:	beq	2ec44 <flatcc_json_printer_string_vector_field@@Base+0xcc>
   2ec24:	ldr	r0, [r4, #20]
   2ec28:	add	r1, r0, #1
   2ec2c:	str	r1, [r4, #20]
   2ec30:	mov	r1, #10
   2ec34:	strb	r1, [r0]
   2ec38:	mov	r0, r4
   2ec3c:	bl	29620 <flatcc_json_printer_indent@@Base+0x4>
   2ec40:	b	2ec4c <flatcc_json_printer_string_vector_field@@Base+0xd4>
   2ec44:	mov	r0, r4
   2ec48:	bl	295ec <flatcc_json_printer_nl@@Base+0x18>
   2ec4c:	mov	r0, r7
   2ec50:	bl	2a55c <flatcc_json_printer_string_field@@Base+0x17c>
   2ec54:	mov	r1, r0
   2ec58:	mov	r0, r4
   2ec5c:	bl	2a530 <flatcc_json_printer_string_field@@Base+0x150>
   2ec60:	subs	r6, r6, #1
   2ec64:	beq	2ecdc <flatcc_json_printer_string_vector_field@@Base+0x164>
   2ec68:	add	r5, r5, #8
   2ec6c:	mov	r7, #44	; 0x2c
   2ec70:	mov	r8, #10
   2ec74:	b	2eca0 <flatcc_json_printer_string_vector_field@@Base+0x128>
   2ec78:	mov	r0, r4
   2ec7c:	bl	295ec <flatcc_json_printer_nl@@Base+0x18>
   2ec80:	mov	r0, r5
   2ec84:	bl	2a55c <flatcc_json_printer_string_field@@Base+0x17c>
   2ec88:	mov	r1, r0
   2ec8c:	mov	r0, r4
   2ec90:	bl	2a530 <flatcc_json_printer_string_field@@Base+0x150>
   2ec94:	add	r5, r5, #4
   2ec98:	cmp	r6, #0
   2ec9c:	beq	2ecdc <flatcc_json_printer_string_vector_field@@Base+0x164>
   2eca0:	ldr	r0, [r4, #20]
   2eca4:	add	r1, r0, #1
   2eca8:	str	r1, [r4, #20]
   2ecac:	strb	r7, [r0]
   2ecb0:	sub	r6, r6, #1
   2ecb4:	ldrb	r0, [r4, #25]
   2ecb8:	cmp	r0, #0
   2ecbc:	beq	2ec78 <flatcc_json_printer_string_vector_field@@Base+0x100>
   2ecc0:	ldr	r0, [r4, #20]
   2ecc4:	add	r1, r0, #1
   2ecc8:	str	r1, [r4, #20]
   2eccc:	strb	r8, [r0]
   2ecd0:	mov	r0, r4
   2ecd4:	bl	29620 <flatcc_json_printer_indent@@Base+0x4>
   2ecd8:	b	2ec80 <flatcc_json_printer_string_vector_field@@Base+0x108>
   2ecdc:	ldrb	r0, [r4, #25]
   2ece0:	cmp	r0, #0
   2ece4:	beq	2ed10 <flatcc_json_printer_string_vector_field@@Base+0x198>
   2ece8:	ldr	r0, [r4, #20]
   2ecec:	add	r1, r0, #1
   2ecf0:	str	r1, [r4, #20]
   2ecf4:	mov	r1, #10
   2ecf8:	strb	r1, [r0]
   2ecfc:	ldr	r0, [r4, #32]
   2ed00:	sub	r0, r0, #1
   2ed04:	str	r0, [r4, #32]
   2ed08:	mov	r0, r4
   2ed0c:	bl	29620 <flatcc_json_printer_indent@@Base+0x4>
   2ed10:	ldr	r0, [r4, #20]
   2ed14:	add	r1, r0, #1
   2ed18:	str	r1, [r4, #20]
   2ed1c:	mov	r1, #93	; 0x5d
   2ed20:	strb	r1, [r0]
   2ed24:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}

0002ed28 <flatcc_json_printer_table_vector_field@@Base>:
   2ed28:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   2ed2c:	add	fp, sp, #24
   2ed30:	mov	r6, r3
   2ed34:	mov	r5, r1
   2ed38:	mov	r4, r0
   2ed3c:	mov	r0, r1
   2ed40:	mov	r1, r2
   2ed44:	bl	2a460 <flatcc_json_printer_string_field@@Base+0x80>
   2ed48:	cmp	r0, #0
   2ed4c:	beq	2ee74 <flatcc_json_printer_table_vector_field@@Base+0x14c>
   2ed50:	ldr	r9, [fp, #8]
   2ed54:	ldr	r1, [r5, #16]
   2ed58:	add	r2, r1, #1
   2ed5c:	str	r2, [r5, #16]
   2ed60:	cmp	r1, #0
   2ed64:	beq	2ed7c <flatcc_json_printer_table_vector_field@@Base+0x54>
   2ed68:	ldr	r1, [r4, #20]
   2ed6c:	add	r2, r1, #1
   2ed70:	str	r2, [r4, #20]
   2ed74:	mov	r2, #44	; 0x2c
   2ed78:	strb	r2, [r1]
   2ed7c:	bl	2a55c <flatcc_json_printer_string_field@@Base+0x17c>
   2ed80:	mov	r8, r0
   2ed84:	bl	2c340 <flatcc_json_printer_utype_vector_field@@Base+0x1c0>
   2ed88:	mov	r7, r0
   2ed8c:	mov	r0, r4
   2ed90:	mov	r1, r6
   2ed94:	mov	r2, r9
   2ed98:	bl	2a4a0 <flatcc_json_printer_string_field@@Base+0xc0>
   2ed9c:	ldr	r0, [r4, #20]
   2eda0:	ldr	r1, [r4, #32]
   2eda4:	add	r1, r1, #1
   2eda8:	str	r1, [r4, #32]
   2edac:	add	r1, r0, #1
   2edb0:	str	r1, [r4, #20]
   2edb4:	mov	r1, #91	; 0x5b
   2edb8:	strb	r1, [r0]
   2edbc:	cmp	r7, #0
   2edc0:	beq	2ee2c <flatcc_json_printer_table_vector_field@@Base+0x104>
   2edc4:	ldr	r9, [fp, #12]
   2edc8:	add	r0, r8, #4
   2edcc:	bl	2a55c <flatcc_json_printer_string_field@@Base+0x17c>
   2edd0:	mov	r1, r0
   2edd4:	ldr	r2, [r5, #12]
   2edd8:	mov	r0, r4
   2eddc:	mov	r3, r9
   2ede0:	bl	2ee78 <flatcc_json_printer_table_vector_field@@Base+0x150>
   2ede4:	subs	r6, r7, #1
   2ede8:	beq	2ee2c <flatcc_json_printer_table_vector_field@@Base+0x104>
   2edec:	add	r7, r8, #8
   2edf0:	mov	r8, #44	; 0x2c
   2edf4:	ldr	r0, [r4, #20]
   2edf8:	add	r1, r0, #1
   2edfc:	str	r1, [r4, #20]
   2ee00:	strb	r8, [r0]
   2ee04:	mov	r0, r7
   2ee08:	bl	2a55c <flatcc_json_printer_string_field@@Base+0x17c>
   2ee0c:	mov	r1, r0
   2ee10:	ldr	r2, [r5, #12]
   2ee14:	mov	r0, r4
   2ee18:	mov	r3, r9
   2ee1c:	bl	2ee78 <flatcc_json_printer_table_vector_field@@Base+0x150>
   2ee20:	add	r7, r7, #4
   2ee24:	subs	r6, r6, #1
   2ee28:	bne	2edf4 <flatcc_json_printer_table_vector_field@@Base+0xcc>
   2ee2c:	ldrb	r0, [r4, #25]
   2ee30:	cmp	r0, #0
   2ee34:	beq	2ee60 <flatcc_json_printer_table_vector_field@@Base+0x138>
   2ee38:	ldr	r0, [r4, #20]
   2ee3c:	add	r1, r0, #1
   2ee40:	str	r1, [r4, #20]
   2ee44:	mov	r1, #10
   2ee48:	strb	r1, [r0]
   2ee4c:	ldr	r0, [r4, #32]
   2ee50:	sub	r0, r0, #1
   2ee54:	str	r0, [r4, #32]
   2ee58:	mov	r0, r4
   2ee5c:	bl	29620 <flatcc_json_printer_indent@@Base+0x4>
   2ee60:	ldr	r0, [r4, #20]
   2ee64:	add	r1, r0, #1
   2ee68:	str	r1, [r4, #20]
   2ee6c:	mov	r1, #93	; 0x5d
   2ee70:	strb	r1, [r0]
   2ee74:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   2ee78:	push	{r4, r5, r6, sl, fp, lr}
   2ee7c:	add	fp, sp, #16
   2ee80:	sub	sp, sp, #24
   2ee84:	mov	r4, r0
   2ee88:	subs	r0, r2, #1
   2ee8c:	beq	2ef3c <flatcc_json_printer_table_vector_field@@Base+0x214>
   2ee90:	mov	r5, r3
   2ee94:	mov	r6, r1
   2ee98:	ldr	r1, [r4, #20]
   2ee9c:	ldr	r2, [r4, #32]
   2eea0:	add	r2, r2, #1
   2eea4:	str	r2, [r4, #32]
   2eea8:	add	r2, r1, #1
   2eeac:	str	r2, [r4, #20]
   2eeb0:	mov	r2, #123	; 0x7b
   2eeb4:	strb	r2, [r1]
   2eeb8:	str	r0, [sp, #16]
   2eebc:	mov	r0, #0
   2eec0:	str	r0, [sp, #20]
   2eec4:	str	r6, [sp, #4]
   2eec8:	mov	r0, r6
   2eecc:	bl	30dcc <flatcc_json_printer_clear@@Base+0xe78>
   2eed0:	sub	r0, r6, r0
   2eed4:	str	r0, [sp, #8]
   2eed8:	bl	30bec <flatcc_json_printer_clear@@Base+0xc98>
   2eedc:	str	r0, [sp, #12]
   2eee0:	add	r1, sp, #4
   2eee4:	mov	r0, r4
   2eee8:	blx	r5
   2eeec:	ldrb	r0, [r4, #25]
   2eef0:	cmp	r0, #0
   2eef4:	beq	2ef20 <flatcc_json_printer_table_vector_field@@Base+0x1f8>
   2eef8:	ldr	r0, [r4, #20]
   2eefc:	add	r1, r0, #1
   2ef00:	str	r1, [r4, #20]
   2ef04:	mov	r1, #10
   2ef08:	strb	r1, [r0]
   2ef0c:	ldr	r0, [r4, #32]
   2ef10:	sub	r0, r0, #1
   2ef14:	str	r0, [r4, #32]
   2ef18:	mov	r0, r4
   2ef1c:	bl	29620 <flatcc_json_printer_indent@@Base+0x4>
   2ef20:	ldr	r0, [r4, #20]
   2ef24:	add	r1, r0, #1
   2ef28:	str	r1, [r4, #20]
   2ef2c:	mov	r1, #125	; 0x7d
   2ef30:	strb	r1, [r0]
   2ef34:	sub	sp, fp, #16
   2ef38:	pop	{r4, r5, r6, sl, fp, pc}
   2ef3c:	mov	r0, r4
   2ef40:	mov	r1, #2
   2ef44:	bl	2f24c <flatcc_json_printer_union_vector_field@@Base+0x2fc>
   2ef48:	sub	sp, fp, #16
   2ef4c:	pop	{r4, r5, r6, sl, fp, pc}

0002ef50 <flatcc_json_printer_union_vector_field@@Base>:
   2ef50:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2ef54:	add	fp, sp, #28
   2ef58:	sub	sp, sp, #140	; 0x8c
   2ef5c:	mov	r6, r3
   2ef60:	mov	r7, r2
   2ef64:	mov	r5, r1
   2ef68:	mov	r4, r0
   2ef6c:	sub	r1, r2, #1
   2ef70:	mov	r0, r5
   2ef74:	str	r1, [sp, #12]
   2ef78:	bl	2a460 <flatcc_json_printer_string_field@@Base+0x80>
   2ef7c:	mov	r8, r0
   2ef80:	mov	r0, r5
   2ef84:	mov	r1, r7
   2ef88:	bl	2a460 <flatcc_json_printer_string_field@@Base+0x80>
   2ef8c:	mov	r7, r0
   2ef90:	ldr	r0, [r5, #12]
   2ef94:	str	r0, [sp, #24]
   2ef98:	ldr	r9, [fp, #8]
   2ef9c:	cmp	r9, #101	; 0x65
   2efa0:	bge	2f220 <flatcc_json_printer_union_vector_field@@Base+0x2d0>
   2efa4:	add	sl, sp, #32
   2efa8:	mov	r0, sl
   2efac:	str	r6, [sp, #16]
   2efb0:	mov	r1, r6
   2efb4:	mov	r2, r9
   2efb8:	bl	14e5c <memcpy@plt>
   2efbc:	movw	r0, #29791	; 0x745f
   2efc0:	movt	r0, #28793	; 0x7079
   2efc4:	str	r0, [sl, r9]
   2efc8:	add	r0, sl, r9
   2efcc:	mov	r1, #101	; 0x65
   2efd0:	strb	r1, [r0, #4]
   2efd4:	cmp	r8, #0
   2efd8:	cmpne	r7, #0
   2efdc:	bne	2efe8 <flatcc_json_printer_union_vector_field@@Base+0x98>
   2efe0:	sub	sp, fp, #28
   2efe4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2efe8:	ldr	r0, [fp, #12]
   2efec:	add	r1, r9, #5
   2eff0:	str	r1, [sp]
   2eff4:	str	r0, [sp, #4]
   2eff8:	add	r3, sp, #32
   2effc:	mov	r0, r4
   2f000:	mov	r1, r5
   2f004:	ldr	r2, [sp, #12]
   2f008:	bl	2d698 <flatcc_json_printer_utype_enum_vector_field@@Base>
   2f00c:	ldr	r0, [r5, #16]
   2f010:	add	r1, r0, #1
   2f014:	str	r1, [r5, #16]
   2f018:	cmp	r0, #0
   2f01c:	beq	2f034 <flatcc_json_printer_union_vector_field@@Base+0xe4>
   2f020:	ldr	r0, [r4, #20]
   2f024:	add	r1, r0, #1
   2f028:	str	r1, [r4, #20]
   2f02c:	mov	r1, #44	; 0x2c
   2f030:	strb	r1, [r0]
   2f034:	mov	r0, r7
   2f038:	bl	2a55c <flatcc_json_printer_string_field@@Base+0x17c>
   2f03c:	mov	r5, r0
   2f040:	mov	r0, r8
   2f044:	bl	2a55c <flatcc_json_printer_string_field@@Base+0x17c>
   2f048:	mov	sl, r0
   2f04c:	mov	r0, r5
   2f050:	bl	2c340 <flatcc_json_printer_utype_vector_field@@Base+0x1c0>
   2f054:	mov	r6, r0
   2f058:	mov	r0, r4
   2f05c:	ldr	r1, [sp, #16]
   2f060:	mov	r2, r9
   2f064:	bl	2a4a0 <flatcc_json_printer_string_field@@Base+0xc0>
   2f068:	mov	r7, r4
   2f06c:	ldr	r0, [r7, #20]!
   2f070:	add	r1, r0, #1
   2f074:	str	r1, [r7]
   2f078:	ldr	r1, [r7, #12]
   2f07c:	add	r1, r1, #1
   2f080:	str	r1, [r7, #12]
   2f084:	mov	r1, #91	; 0x5b
   2f088:	strb	r1, [r0]
   2f08c:	cmp	r6, #0
   2f090:	beq	2f1d0 <flatcc_json_printer_union_vector_field@@Base+0x280>
   2f094:	ldr	r8, [fp, #16]
   2f098:	add	r0, sl, #4
   2f09c:	bl	2c348 <flatcc_json_printer_utype_vector_field@@Base+0x1c8>
   2f0a0:	cmp	r0, #0
   2f0a4:	beq	2f0d0 <flatcc_json_printer_union_vector_field@@Base+0x180>
   2f0a8:	add	r1, r5, #4
   2f0ac:	str	r1, [sp, #20]
   2f0b0:	strb	r0, [sp, #28]
   2f0b4:	add	r1, sp, #20
   2f0b8:	mov	r0, r4
   2f0bc:	mov	r9, r8
   2f0c0:	blx	r8
   2f0c4:	subs	r8, r6, #1
   2f0c8:	bne	2f128 <flatcc_json_printer_union_vector_field@@Base+0x1d8>
   2f0cc:	b	2f1d0 <flatcc_json_printer_union_vector_field@@Base+0x280>
   2f0d0:	mov	r9, r8
   2f0d4:	ldr	r0, [r7]
   2f0d8:	add	r1, r0, #1
   2f0dc:	str	r1, [r7]
   2f0e0:	mov	r1, #110	; 0x6e
   2f0e4:	strb	r1, [r0]
   2f0e8:	ldr	r0, [r7]
   2f0ec:	add	r1, r0, #1
   2f0f0:	str	r1, [r7]
   2f0f4:	mov	r1, #117	; 0x75
   2f0f8:	strb	r1, [r0]
   2f0fc:	ldr	r0, [r7]
   2f100:	add	r1, r0, #1
   2f104:	str	r1, [r7]
   2f108:	mov	r1, #108	; 0x6c
   2f10c:	strb	r1, [r0]
   2f110:	ldr	r0, [r7]
   2f114:	add	r2, r0, #1
   2f118:	str	r2, [r7]
   2f11c:	strb	r1, [r0]
   2f120:	subs	r8, r6, #1
   2f124:	beq	2f1d0 <flatcc_json_printer_union_vector_field@@Base+0x280>
   2f128:	add	r6, r5, #8
   2f12c:	add	r5, sl, #5
   2f130:	mov	sl, #44	; 0x2c
   2f134:	b	2f194 <flatcc_json_printer_union_vector_field@@Base+0x244>
   2f138:	ldr	r0, [r7]
   2f13c:	add	r1, r0, #1
   2f140:	str	r1, [r7]
   2f144:	mov	r1, #110	; 0x6e
   2f148:	strb	r1, [r0]
   2f14c:	ldr	r0, [r7]
   2f150:	add	r1, r0, #1
   2f154:	str	r1, [r7]
   2f158:	mov	r1, #117	; 0x75
   2f15c:	strb	r1, [r0]
   2f160:	ldr	r0, [r7]
   2f164:	add	r1, r0, #1
   2f168:	str	r1, [r7]
   2f16c:	mov	r2, #108	; 0x6c
   2f170:	strb	r2, [r0]
   2f174:	ldr	r0, [r7]
   2f178:	add	r1, r0, #1
   2f17c:	str	r1, [r7]
   2f180:	strb	r2, [r0]
   2f184:	add	r6, r6, #4
   2f188:	add	r5, r5, #1
   2f18c:	cmp	r8, #0
   2f190:	beq	2f1d0 <flatcc_json_printer_union_vector_field@@Base+0x280>
   2f194:	mov	r0, r5
   2f198:	bl	2c348 <flatcc_json_printer_utype_vector_field@@Base+0x1c8>
   2f19c:	ldr	r1, [r7]
   2f1a0:	add	r2, r1, #1
   2f1a4:	str	r2, [r7]
   2f1a8:	strb	sl, [r1]
   2f1ac:	sub	r8, r8, #1
   2f1b0:	cmp	r0, #0
   2f1b4:	beq	2f138 <flatcc_json_printer_union_vector_field@@Base+0x1e8>
   2f1b8:	str	r6, [sp, #20]
   2f1bc:	strb	r0, [sp, #28]
   2f1c0:	mov	r0, r4
   2f1c4:	add	r1, sp, #20
   2f1c8:	blx	r9
   2f1cc:	b	2f184 <flatcc_json_printer_union_vector_field@@Base+0x234>
   2f1d0:	ldrb	r0, [r4, #25]
   2f1d4:	cmp	r0, #0
   2f1d8:	beq	2f204 <flatcc_json_printer_union_vector_field@@Base+0x2b4>
   2f1dc:	ldr	r0, [r4, #20]
   2f1e0:	add	r1, r0, #1
   2f1e4:	str	r1, [r4, #20]
   2f1e8:	mov	r1, #10
   2f1ec:	strb	r1, [r0]
   2f1f0:	ldr	r0, [r4, #32]
   2f1f4:	sub	r0, r0, #1
   2f1f8:	str	r0, [r4, #32]
   2f1fc:	mov	r0, r4
   2f200:	bl	29620 <flatcc_json_printer_indent@@Base+0x4>
   2f204:	ldr	r0, [r7]
   2f208:	add	r1, r0, #1
   2f20c:	str	r1, [r7]
   2f210:	mov	r1, #93	; 0x5d
   2f214:	strb	r1, [r0]
   2f218:	sub	sp, fp, #28
   2f21c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2f220:	mov	r0, r4
   2f224:	mov	r1, #1
   2f228:	bl	2f24c <flatcc_json_printer_union_vector_field@@Base+0x2fc>
   2f22c:	movw	r0, #28512	; 0x6f60
   2f230:	movt	r0, #3
   2f234:	movw	r1, #28539	; 0x6f7b
   2f238:	movt	r1, #3
   2f23c:	movw	r3, #28614	; 0x6fc6
   2f240:	movt	r3, #3
   2f244:	movw	r2, #843	; 0x34b
   2f248:	bl	14f40 <__assert_fail@plt>
   2f24c:	ldr	r2, [r0, #36]	; 0x24
   2f250:	cmp	r2, #0
   2f254:	streq	r1, [r0, #36]	; 0x24
   2f258:	bx	lr

0002f25c <flatcc_json_printer_table_field@@Base>:
   2f25c:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   2f260:	add	fp, sp, #24
   2f264:	mov	r6, r3
   2f268:	mov	r5, r1
   2f26c:	mov	r4, r0
   2f270:	mov	r0, r1
   2f274:	mov	r1, r2
   2f278:	bl	2a460 <flatcc_json_printer_string_field@@Base+0x80>
   2f27c:	cmp	r0, #0
   2f280:	beq	2f2e4 <flatcc_json_printer_table_field@@Base+0x88>
   2f284:	mov	r7, r0
   2f288:	ldr	r8, [fp, #12]
   2f28c:	ldr	r2, [fp, #8]
   2f290:	ldr	r0, [r5, #16]
   2f294:	add	r1, r0, #1
   2f298:	str	r1, [r5, #16]
   2f29c:	cmp	r0, #0
   2f2a0:	beq	2f2b8 <flatcc_json_printer_table_field@@Base+0x5c>
   2f2a4:	ldr	r0, [r4, #20]
   2f2a8:	add	r1, r0, #1
   2f2ac:	str	r1, [r4, #20]
   2f2b0:	mov	r1, #44	; 0x2c
   2f2b4:	strb	r1, [r0]
   2f2b8:	mov	r0, r4
   2f2bc:	mov	r1, r6
   2f2c0:	bl	2a4a0 <flatcc_json_printer_string_field@@Base+0xc0>
   2f2c4:	mov	r0, r7
   2f2c8:	bl	2a55c <flatcc_json_printer_string_field@@Base+0x17c>
   2f2cc:	mov	r1, r0
   2f2d0:	ldr	r2, [r5, #12]
   2f2d4:	mov	r0, r4
   2f2d8:	mov	r3, r8
   2f2dc:	pop	{r4, r5, r6, r7, r8, sl, fp, lr}
   2f2e0:	b	2ee78 <flatcc_json_printer_table_vector_field@@Base+0x150>
   2f2e4:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}

0002f2e8 <flatcc_json_printer_union_field@@Base>:
   2f2e8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2f2ec:	add	fp, sp, #28
   2f2f0:	sub	sp, sp, #12
   2f2f4:	mov	r8, r3
   2f2f8:	mov	r7, r2
   2f2fc:	mov	r5, r1
   2f300:	mov	r4, r0
   2f304:	sub	r1, r2, #1
   2f308:	mov	r0, r5
   2f30c:	bl	2a460 <flatcc_json_printer_string_field@@Base+0x80>
   2f310:	mov	r6, r0
   2f314:	mov	r0, r5
   2f318:	mov	r1, r7
   2f31c:	bl	2a460 <flatcc_json_printer_string_field@@Base+0x80>
   2f320:	cmp	r6, #0
   2f324:	movne	r7, r0
   2f328:	cmpne	r0, #0
   2f32c:	bne	2f338 <flatcc_json_printer_union_field@@Base+0x50>
   2f330:	sub	sp, fp, #28
   2f334:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2f338:	mov	r0, r6
   2f33c:	bl	2c348 <flatcc_json_printer_utype_vector_field@@Base+0x1c8>
   2f340:	mov	r6, r0
   2f344:	ldr	r0, [r5, #16]
   2f348:	add	r1, r0, #1
   2f34c:	str	r1, [r5, #16]
   2f350:	cmp	r0, #0
   2f354:	beq	2f36c <flatcc_json_printer_union_field@@Base+0x84>
   2f358:	ldr	r0, [r4, #20]
   2f35c:	add	r1, r0, #1
   2f360:	str	r1, [r4, #20]
   2f364:	mov	r1, #44	; 0x2c
   2f368:	strb	r1, [r0]
   2f36c:	ldr	r9, [fp, #8]
   2f370:	ldrb	r0, [r4, #25]
   2f374:	cmp	r0, #0
   2f378:	beq	2f39c <flatcc_json_printer_union_field@@Base+0xb4>
   2f37c:	ldr	r0, [r4, #20]
   2f380:	add	r1, r0, #1
   2f384:	str	r1, [r4, #20]
   2f388:	mov	r1, #10
   2f38c:	strb	r1, [r0]
   2f390:	mov	r0, r4
   2f394:	bl	29620 <flatcc_json_printer_indent@@Base+0x4>
   2f398:	b	2f3a4 <flatcc_json_printer_union_field@@Base+0xbc>
   2f39c:	mov	r0, r4
   2f3a0:	bl	295ec <flatcc_json_printer_nl@@Base+0x18>
   2f3a4:	ldr	r0, [r4, #20]
   2f3a8:	mov	r1, #34	; 0x22
   2f3ac:	strb	r1, [r0]
   2f3b0:	ldrb	r1, [r4, #26]
   2f3b4:	ldr	r2, [r4, #16]
   2f3b8:	ldr	r0, [r4, #20]
   2f3bc:	cmp	r1, #0
   2f3c0:	addeq	r0, r0, #1
   2f3c4:	str	r0, [r4, #20]
   2f3c8:	add	r1, r0, r9
   2f3cc:	cmp	r1, r2
   2f3d0:	bcs	2f3f0 <flatcc_json_printer_union_field@@Base+0x108>
   2f3d4:	mov	r1, r8
   2f3d8:	mov	r2, r9
   2f3dc:	bl	14e5c <memcpy@plt>
   2f3e0:	ldr	r0, [r4, #20]
   2f3e4:	add	r0, r0, r9
   2f3e8:	str	r0, [r4, #20]
   2f3ec:	b	2f400 <flatcc_json_printer_union_field@@Base+0x118>
   2f3f0:	mov	r0, r4
   2f3f4:	mov	r1, r8
   2f3f8:	mov	r2, r9
   2f3fc:	bl	29588 <flatcc_json_printer_write@@Base+0x4>
   2f400:	movw	r1, #28816	; 0x7090
   2f404:	movt	r1, #3
   2f408:	mov	r0, r4
   2f40c:	mov	r2, #5
   2f410:	bl	29588 <flatcc_json_printer_write@@Base+0x4>
   2f414:	ldr	r0, [r4, #20]
   2f418:	mov	r1, #34	; 0x22
   2f41c:	strb	r1, [r0]
   2f420:	ldrb	r0, [r4, #26]
   2f424:	ldr	r1, [r4, #20]
   2f428:	cmp	r0, #0
   2f42c:	addeq	r1, r1, #1
   2f430:	add	r0, r1, #1
   2f434:	str	r0, [r4, #20]
   2f438:	mov	r0, #58	; 0x3a
   2f43c:	strb	r0, [r1]
   2f440:	ldr	r0, [r4, #20]
   2f444:	mov	r1, #32
   2f448:	strb	r1, [r0]
   2f44c:	ldrb	r0, [r4, #25]
   2f450:	ldr	r1, [r4, #20]
   2f454:	cmp	r0, #0
   2f458:	addne	r1, r1, #1
   2f45c:	str	r1, [r4, #20]
   2f460:	ldrb	r0, [r4, #27]
   2f464:	cmp	r0, #0
   2f468:	beq	2f48c <flatcc_json_printer_union_field@@Base+0x1a4>
   2f46c:	mov	r0, r6
   2f470:	bl	296bc <flatcc_json_printer_uint8@@Base+0x2c>
   2f474:	ldr	r1, [r4, #20]
   2f478:	add	r0, r1, r0
   2f47c:	str	r0, [r4, #20]
   2f480:	cmp	r6, #0
   2f484:	bne	2f4a4 <flatcc_json_printer_union_field@@Base+0x1bc>
   2f488:	b	2f330 <flatcc_json_printer_union_field@@Base+0x48>
   2f48c:	ldr	r2, [fp, #12]
   2f490:	mov	r0, r4
   2f494:	mov	r1, r6
   2f498:	blx	r2
   2f49c:	cmp	r6, #0
   2f4a0:	beq	2f330 <flatcc_json_printer_union_field@@Base+0x48>
   2f4a4:	ldr	sl, [fp, #16]
   2f4a8:	ldr	r0, [r4, #20]
   2f4ac:	add	r1, r0, #1
   2f4b0:	str	r1, [r4, #20]
   2f4b4:	mov	r1, #44	; 0x2c
   2f4b8:	strb	r1, [r0]
   2f4bc:	mov	r0, r4
   2f4c0:	mov	r1, r8
   2f4c4:	mov	r2, r9
   2f4c8:	bl	2a4a0 <flatcc_json_printer_string_field@@Base+0xc0>
   2f4cc:	ldr	r0, [r5, #12]
   2f4d0:	strb	r6, [sp, #8]
   2f4d4:	str	r7, [sp]
   2f4d8:	str	r0, [sp, #4]
   2f4dc:	mov	r1, sp
   2f4e0:	mov	r0, r4
   2f4e4:	blx	sl
   2f4e8:	sub	sp, fp, #28
   2f4ec:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}

0002f4f0 <flatcc_json_printer_union_table@@Base>:
   2f4f0:	push	{r4, r5, r6, sl, fp, lr}
   2f4f4:	add	fp, sp, #16
   2f4f8:	mov	r4, r2
   2f4fc:	mov	r5, r1
   2f500:	mov	r6, r0
   2f504:	ldr	r0, [r1]
   2f508:	bl	2a55c <flatcc_json_printer_string_field@@Base+0x17c>
   2f50c:	mov	r1, r0
   2f510:	ldr	r2, [r5, #4]
   2f514:	mov	r0, r6
   2f518:	mov	r3, r4
   2f51c:	pop	{r4, r5, r6, sl, fp, lr}
   2f520:	b	2ee78 <flatcc_json_printer_table_vector_field@@Base+0x150>

0002f524 <flatcc_json_printer_union_struct@@Base>:
   2f524:	push	{r4, r5, fp, lr}
   2f528:	add	fp, sp, #8
   2f52c:	mov	r5, r2
   2f530:	mov	r4, r0
   2f534:	ldr	r0, [r0, #20]
   2f538:	ldr	r2, [r4, #32]
   2f53c:	add	r2, r2, #1
   2f540:	str	r2, [r4, #32]
   2f544:	add	r2, r0, #1
   2f548:	str	r2, [r4, #20]
   2f54c:	mov	r2, #123	; 0x7b
   2f550:	strb	r2, [r0]
   2f554:	ldr	r0, [r1]
   2f558:	bl	2a55c <flatcc_json_printer_string_field@@Base+0x17c>
   2f55c:	mov	r1, r0
   2f560:	mov	r0, r4
   2f564:	blx	r5
   2f568:	ldrb	r0, [r4, #25]
   2f56c:	cmp	r0, #0
   2f570:	beq	2f59c <flatcc_json_printer_union_struct@@Base+0x78>
   2f574:	ldr	r0, [r4, #20]
   2f578:	add	r1, r0, #1
   2f57c:	str	r1, [r4, #20]
   2f580:	mov	r1, #10
   2f584:	strb	r1, [r0]
   2f588:	ldr	r0, [r4, #32]
   2f58c:	sub	r0, r0, #1
   2f590:	str	r0, [r4, #32]
   2f594:	mov	r0, r4
   2f598:	bl	29620 <flatcc_json_printer_indent@@Base+0x4>
   2f59c:	ldr	r0, [r4, #20]
   2f5a0:	add	r1, r0, #1
   2f5a4:	str	r1, [r4, #20]
   2f5a8:	mov	r1, #125	; 0x7d
   2f5ac:	strb	r1, [r0]
   2f5b0:	pop	{r4, r5, fp, pc}

0002f5b4 <flatcc_json_printer_union_string@@Base>:
   2f5b4:	push	{r4, sl, fp, lr}
   2f5b8:	add	fp, sp, #8
   2f5bc:	mov	r4, r0
   2f5c0:	ldr	r0, [r1]
   2f5c4:	bl	2a55c <flatcc_json_printer_string_field@@Base+0x17c>
   2f5c8:	mov	r1, r0
   2f5cc:	mov	r0, r4
   2f5d0:	pop	{r4, sl, fp, lr}
   2f5d4:	b	2a530 <flatcc_json_printer_string_field@@Base+0x150>

0002f5d8 <flatcc_json_printer_embedded_struct_field@@Base>:
   2f5d8:	push	{r4, r5, r6, r7, fp, lr}
   2f5dc:	add	fp, sp, #16
   2f5e0:	mov	r5, r3
   2f5e4:	mov	r6, r2
   2f5e8:	mov	r3, r1
   2f5ec:	mov	r4, r0
   2f5f0:	add	r7, fp, #8
   2f5f4:	ldm	r7, {r1, r2, r7}
   2f5f8:	cmp	r3, #0
   2f5fc:	beq	2f614 <flatcc_json_printer_embedded_struct_field@@Base+0x3c>
   2f600:	ldr	r0, [r4, #20]
   2f604:	add	r3, r0, #1
   2f608:	str	r3, [r4, #20]
   2f60c:	mov	r3, #44	; 0x2c
   2f610:	strb	r3, [r0]
   2f614:	mov	r0, r4
   2f618:	bl	2a4a0 <flatcc_json_printer_string_field@@Base+0xc0>
   2f61c:	ldr	r0, [r4, #20]
   2f620:	ldr	r1, [r4, #32]
   2f624:	add	r1, r1, #1
   2f628:	str	r1, [r4, #32]
   2f62c:	add	r1, r0, #1
   2f630:	str	r1, [r4, #20]
   2f634:	mov	r1, #123	; 0x7b
   2f638:	strb	r1, [r0]
   2f63c:	add	r1, r6, r5
   2f640:	mov	r0, r4
   2f644:	blx	r7
   2f648:	ldrb	r0, [r4, #25]
   2f64c:	cmp	r0, #0
   2f650:	beq	2f67c <flatcc_json_printer_embedded_struct_field@@Base+0xa4>
   2f654:	ldr	r0, [r4, #20]
   2f658:	add	r1, r0, #1
   2f65c:	str	r1, [r4, #20]
   2f660:	mov	r1, #10
   2f664:	strb	r1, [r0]
   2f668:	ldr	r0, [r4, #32]
   2f66c:	sub	r0, r0, #1
   2f670:	str	r0, [r4, #32]
   2f674:	mov	r0, r4
   2f678:	bl	29620 <flatcc_json_printer_indent@@Base+0x4>
   2f67c:	ldr	r0, [r4, #20]
   2f680:	add	r1, r0, #1
   2f684:	str	r1, [r4, #20]
   2f688:	mov	r1, #125	; 0x7d
   2f68c:	strb	r1, [r0]
   2f690:	pop	{r4, r5, r6, r7, fp, pc}

0002f694 <flatcc_json_printer_struct_field@@Base>:
   2f694:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   2f698:	add	fp, sp, #24
   2f69c:	mov	r6, r3
   2f6a0:	mov	r7, r1
   2f6a4:	mov	r4, r0
   2f6a8:	mov	r0, r1
   2f6ac:	mov	r1, r2
   2f6b0:	bl	2a460 <flatcc_json_printer_string_field@@Base+0x80>
   2f6b4:	cmp	r0, #0
   2f6b8:	beq	2f770 <flatcc_json_printer_struct_field@@Base+0xdc>
   2f6bc:	mov	r5, r0
   2f6c0:	ldr	r8, [fp, #12]
   2f6c4:	ldr	r2, [fp, #8]
   2f6c8:	ldr	r0, [r7, #16]
   2f6cc:	add	r1, r0, #1
   2f6d0:	str	r1, [r7, #16]
   2f6d4:	cmp	r0, #0
   2f6d8:	beq	2f6f0 <flatcc_json_printer_struct_field@@Base+0x5c>
   2f6dc:	ldr	r0, [r4, #20]
   2f6e0:	add	r1, r0, #1
   2f6e4:	str	r1, [r4, #20]
   2f6e8:	mov	r1, #44	; 0x2c
   2f6ec:	strb	r1, [r0]
   2f6f0:	mov	r0, r4
   2f6f4:	mov	r1, r6
   2f6f8:	bl	2a4a0 <flatcc_json_printer_string_field@@Base+0xc0>
   2f6fc:	ldr	r0, [r4, #20]
   2f700:	ldr	r1, [r4, #32]
   2f704:	add	r1, r1, #1
   2f708:	str	r1, [r4, #32]
   2f70c:	add	r1, r0, #1
   2f710:	str	r1, [r4, #20]
   2f714:	mov	r1, #123	; 0x7b
   2f718:	strb	r1, [r0]
   2f71c:	mov	r0, r4
   2f720:	mov	r1, r5
   2f724:	blx	r8
   2f728:	ldrb	r0, [r4, #25]
   2f72c:	cmp	r0, #0
   2f730:	beq	2f75c <flatcc_json_printer_struct_field@@Base+0xc8>
   2f734:	ldr	r0, [r4, #20]
   2f738:	add	r1, r0, #1
   2f73c:	str	r1, [r4, #20]
   2f740:	mov	r1, #10
   2f744:	strb	r1, [r0]
   2f748:	ldr	r0, [r4, #32]
   2f74c:	sub	r0, r0, #1
   2f750:	str	r0, [r4, #32]
   2f754:	mov	r0, r4
   2f758:	bl	29620 <flatcc_json_printer_indent@@Base+0x4>
   2f75c:	ldr	r0, [r4, #20]
   2f760:	add	r1, r0, #1
   2f764:	str	r1, [r4, #20]
   2f768:	mov	r1, #125	; 0x7d
   2f76c:	strb	r1, [r0]
   2f770:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}

0002f774 <flatcc_json_printer_struct_as_root@@Base>:
   2f774:	push	{r4, r5, fp, lr}
   2f778:	add	fp, sp, #8
   2f77c:	mov	r5, r1
   2f780:	mov	r4, r0
   2f784:	bl	2f874 <flatcc_json_printer_struct_as_root@@Base+0x100>
   2f788:	ldr	r0, [r4, #20]
   2f78c:	ldr	r1, [r4, #32]
   2f790:	add	r1, r1, #1
   2f794:	str	r1, [r4, #32]
   2f798:	add	r1, r0, #1
   2f79c:	str	r1, [r4, #20]
   2f7a0:	mov	r1, #123	; 0x7b
   2f7a4:	strb	r1, [r0]
   2f7a8:	mov	r0, r5
   2f7ac:	bl	2a55c <flatcc_json_printer_string_field@@Base+0x17c>
   2f7b0:	mov	r1, r0
   2f7b4:	ldr	r2, [fp, #8]
   2f7b8:	mov	r0, r4
   2f7bc:	blx	r2
   2f7c0:	ldrb	r0, [r4, #25]
   2f7c4:	cmp	r0, #0
   2f7c8:	beq	2f7f4 <flatcc_json_printer_struct_as_root@@Base+0x80>
   2f7cc:	ldr	r0, [r4, #20]
   2f7d0:	add	r1, r0, #1
   2f7d4:	str	r1, [r4, #20]
   2f7d8:	mov	r1, #10
   2f7dc:	strb	r1, [r0]
   2f7e0:	ldr	r0, [r4, #32]
   2f7e4:	sub	r0, r0, #1
   2f7e8:	str	r0, [r4, #32]
   2f7ec:	mov	r0, r4
   2f7f0:	bl	29620 <flatcc_json_printer_indent@@Base+0x4>
   2f7f4:	ldr	r0, [r4, #20]
   2f7f8:	add	r1, r0, #1
   2f7fc:	str	r1, [r4, #20]
   2f800:	mov	r1, #125	; 0x7d
   2f804:	strb	r1, [r0]
   2f808:	ldrb	r0, [r4, #25]
   2f80c:	cmp	r0, #0
   2f810:	beq	2f834 <flatcc_json_printer_struct_as_root@@Base+0xc0>
   2f814:	ldr	r0, [r4, #32]
   2f818:	cmp	r0, #0
   2f81c:	bne	2f834 <flatcc_json_printer_struct_as_root@@Base+0xc0>
   2f820:	ldr	r0, [r4, #20]
   2f824:	add	r1, r0, #1
   2f828:	str	r1, [r4, #20]
   2f82c:	mov	r1, #10
   2f830:	strb	r1, [r0]
   2f834:	ldr	r2, [r4, #44]	; 0x2c
   2f838:	mov	r0, r4
   2f83c:	mov	r1, #1
   2f840:	blx	r2
   2f844:	mov	r0, r4
   2f848:	bl	2f938 <flatcc_json_printer_struct_as_root@@Base+0x1c4>
   2f84c:	mov	r1, r0
   2f850:	mvn	r0, #0
   2f854:	cmp	r1, #0
   2f858:	popne	{r4, r5, fp, pc}
   2f85c:	ldr	r0, [r4]
   2f860:	ldr	r1, [r4, #12]
   2f864:	ldr	r2, [r4, #20]
   2f868:	add	r1, r2, r1
   2f86c:	sub	r0, r1, r0
   2f870:	pop	{r4, r5, fp, pc}
   2f874:	push	{r4, r5, r6, sl, fp, lr}
   2f878:	add	fp, sp, #16
   2f87c:	sub	sp, sp, #8
   2f880:	mov	r4, r0
   2f884:	mov	r0, #0
   2f888:	str	r0, [sp, #4]
   2f88c:	cmp	r1, #0
   2f890:	cmpne	r2, #7
   2f894:	bhi	2f8c4 <flatcc_json_printer_struct_as_root@@Base+0x150>
   2f898:	mov	r0, r4
   2f89c:	mov	r1, #1
   2f8a0:	bl	2f24c <flatcc_json_printer_union_vector_field@@Base+0x2fc>
   2f8a4:	movw	r0, #29683	; 0x73f3
   2f8a8:	movt	r0, #3
   2f8ac:	movw	r1, #28539	; 0x6f7b
   2f8b0:	movt	r1, #3
   2f8b4:	movw	r3, #29714	; 0x7412
   2f8b8:	movt	r3, #3
   2f8bc:	movw	r2, #1019	; 0x3fb
   2f8c0:	bl	14f40 <__assert_fail@plt>
   2f8c4:	cmp	r3, #0
   2f8c8:	beq	2f904 <flatcc_json_printer_struct_as_root@@Base+0x190>
   2f8cc:	mov	r5, r1
   2f8d0:	add	r0, sp, #4
   2f8d4:	mov	r1, r3
   2f8d8:	mov	r2, #4
   2f8dc:	bl	14ef8 <strncpy@plt>
   2f8e0:	ldr	r6, [sp, #4]
   2f8e4:	mov	r0, r6
   2f8e8:	bl	30dd8 <flatcc_json_printer_clear@@Base+0xe84>
   2f8ec:	str	r6, [sp, #4]
   2f8f0:	add	r0, r5, #4
   2f8f4:	bl	30ddc <flatcc_json_printer_clear@@Base+0xe88>
   2f8f8:	cmp	r6, #0
   2f8fc:	cmpne	r0, r6
   2f900:	bne	2f90c <flatcc_json_printer_struct_as_root@@Base+0x198>
   2f904:	sub	sp, fp, #16
   2f908:	pop	{r4, r5, r6, sl, fp, pc}
   2f90c:	mov	r0, r4
   2f910:	mov	r1, #1
   2f914:	bl	2f24c <flatcc_json_printer_union_vector_field@@Base+0x2fc>
   2f918:	movw	r0, #29793	; 0x7461
   2f91c:	movt	r0, #3
   2f920:	movw	r1, #28539	; 0x6f7b
   2f924:	movt	r1, #3
   2f928:	movw	r3, #29714	; 0x7412
   2f92c:	movt	r3, #3
   2f930:	movw	r2, #1028	; 0x404
   2f934:	bl	14f40 <__assert_fail@plt>
   2f938:	ldr	r0, [r0, #36]	; 0x24
   2f93c:	bx	lr

0002f940 <flatcc_json_printer_table_as_root@@Base>:
   2f940:	push	{r4, r5, fp, lr}
   2f944:	add	fp, sp, #8
   2f948:	mov	r5, r1
   2f94c:	mov	r4, r0
   2f950:	bl	2f874 <flatcc_json_printer_struct_as_root@@Base+0x100>
   2f954:	mov	r0, r5
   2f958:	bl	2a55c <flatcc_json_printer_string_field@@Base+0x17c>
   2f95c:	mov	r1, r0
   2f960:	ldr	r3, [fp, #8]
   2f964:	mov	r0, r4
   2f968:	mov	r2, #100	; 0x64
   2f96c:	bl	2ee78 <flatcc_json_printer_table_vector_field@@Base+0x150>
   2f970:	ldrb	r0, [r4, #25]
   2f974:	cmp	r0, #0
   2f978:	beq	2f99c <flatcc_json_printer_table_as_root@@Base+0x5c>
   2f97c:	ldr	r0, [r4, #32]
   2f980:	cmp	r0, #0
   2f984:	bne	2f99c <flatcc_json_printer_table_as_root@@Base+0x5c>
   2f988:	ldr	r0, [r4, #20]
   2f98c:	add	r1, r0, #1
   2f990:	str	r1, [r4, #20]
   2f994:	mov	r1, #10
   2f998:	strb	r1, [r0]
   2f99c:	ldr	r2, [r4, #44]	; 0x2c
   2f9a0:	mov	r0, r4
   2f9a4:	mov	r1, #1
   2f9a8:	blx	r2
   2f9ac:	mov	r0, r4
   2f9b0:	bl	2f938 <flatcc_json_printer_struct_as_root@@Base+0x1c4>
   2f9b4:	mov	r1, r0
   2f9b8:	mvn	r0, #0
   2f9bc:	cmp	r1, #0
   2f9c0:	popne	{r4, r5, fp, pc}
   2f9c4:	ldr	r0, [r4]
   2f9c8:	ldr	r1, [r4, #12]
   2f9cc:	ldr	r2, [r4, #20]
   2f9d0:	add	r1, r2, r1
   2f9d4:	sub	r0, r1, r0
   2f9d8:	pop	{r4, r5, fp, pc}

0002f9dc <flatcc_json_printer_struct_as_nested_root@@Base>:
   2f9dc:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2f9e0:	add	fp, sp, #28
   2f9e4:	sub	sp, sp, #4
   2f9e8:	mov	r5, r3
   2f9ec:	mov	r7, r1
   2f9f0:	mov	r4, r0
   2f9f4:	mov	r0, r1
   2f9f8:	mov	r1, r2
   2f9fc:	bl	2a460 <flatcc_json_printer_string_field@@Base+0x80>
   2fa00:	cmp	r0, #0
   2fa04:	beq	2faec <flatcc_json_printer_struct_as_nested_root@@Base+0x110>
   2fa08:	mov	r6, r0
   2fa0c:	add	sl, fp, #8
   2fa10:	ldm	sl, {r8, r9, sl}
   2fa14:	bl	2c340 <flatcc_json_printer_utype_vector_field@@Base+0x1c0>
   2fa18:	add	r6, r0, r6
   2fa1c:	mov	r0, r6
   2fa20:	bl	2c340 <flatcc_json_printer_utype_vector_field@@Base+0x1c0>
   2fa24:	mov	r2, r0
   2fa28:	mov	r0, r4
   2fa2c:	mov	r1, r6
   2fa30:	mov	r3, r9
   2fa34:	bl	2f874 <flatcc_json_printer_struct_as_root@@Base+0x100>
   2fa38:	ldr	r0, [r7, #16]
   2fa3c:	add	r1, r0, #1
   2fa40:	str	r1, [r7, #16]
   2fa44:	cmp	r0, #0
   2fa48:	beq	2fa60 <flatcc_json_printer_struct_as_nested_root@@Base+0x84>
   2fa4c:	ldr	r0, [r4, #20]
   2fa50:	add	r1, r0, #1
   2fa54:	str	r1, [r4, #20]
   2fa58:	mov	r1, #44	; 0x2c
   2fa5c:	strb	r1, [r0]
   2fa60:	mov	r0, r4
   2fa64:	mov	r1, r5
   2fa68:	mov	r2, r8
   2fa6c:	bl	2a4a0 <flatcc_json_printer_string_field@@Base+0xc0>
   2fa70:	ldr	r0, [r4, #20]
   2fa74:	ldr	r1, [r4, #32]
   2fa78:	add	r1, r1, #1
   2fa7c:	str	r1, [r4, #32]
   2fa80:	add	r1, r0, #1
   2fa84:	str	r1, [r4, #20]
   2fa88:	mov	r1, #123	; 0x7b
   2fa8c:	strb	r1, [r0]
   2fa90:	mov	r0, r6
   2fa94:	bl	2a55c <flatcc_json_printer_string_field@@Base+0x17c>
   2fa98:	mov	r1, r0
   2fa9c:	mov	r0, r4
   2faa0:	blx	sl
   2faa4:	ldrb	r0, [r4, #25]
   2faa8:	cmp	r0, #0
   2faac:	beq	2fad8 <flatcc_json_printer_struct_as_nested_root@@Base+0xfc>
   2fab0:	ldr	r0, [r4, #20]
   2fab4:	add	r1, r0, #1
   2fab8:	str	r1, [r4, #20]
   2fabc:	mov	r1, #10
   2fac0:	strb	r1, [r0]
   2fac4:	ldr	r0, [r4, #32]
   2fac8:	sub	r0, r0, #1
   2facc:	str	r0, [r4, #32]
   2fad0:	mov	r0, r4
   2fad4:	bl	29620 <flatcc_json_printer_indent@@Base+0x4>
   2fad8:	ldr	r0, [r4, #20]
   2fadc:	add	r1, r0, #1
   2fae0:	str	r1, [r4, #20]
   2fae4:	mov	r1, #125	; 0x7d
   2fae8:	strb	r1, [r0]
   2faec:	sub	sp, fp, #28
   2faf0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}

0002faf4 <flatcc_json_printer_table_as_nested_root@@Base>:
   2faf4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2faf8:	add	fp, sp, #28
   2fafc:	sub	sp, sp, #4
   2fb00:	mov	sl, r3
   2fb04:	mov	r5, r1
   2fb08:	mov	r4, r0
   2fb0c:	mov	r0, r1
   2fb10:	mov	r1, r2
   2fb14:	bl	2a460 <flatcc_json_printer_string_field@@Base+0x80>
   2fb18:	cmp	r0, #0
   2fb1c:	beq	2fbb4 <flatcc_json_printer_table_as_nested_root@@Base+0xc0>
   2fb20:	mov	r7, r0
   2fb24:	ldr	r8, [fp, #16]
   2fb28:	ldr	r6, [fp, #12]
   2fb2c:	ldr	r9, [fp, #8]
   2fb30:	bl	2c340 <flatcc_json_printer_utype_vector_field@@Base+0x1c0>
   2fb34:	add	r7, r0, r7
   2fb38:	mov	r0, r7
   2fb3c:	bl	2c340 <flatcc_json_printer_utype_vector_field@@Base+0x1c0>
   2fb40:	mov	r2, r0
   2fb44:	add	r7, r7, #4
   2fb48:	mov	r0, r4
   2fb4c:	mov	r1, r7
   2fb50:	mov	r3, r6
   2fb54:	bl	2f874 <flatcc_json_printer_struct_as_root@@Base+0x100>
   2fb58:	ldr	r0, [r5, #16]
   2fb5c:	add	r1, r0, #1
   2fb60:	str	r1, [r5, #16]
   2fb64:	cmp	r0, #0
   2fb68:	beq	2fb80 <flatcc_json_printer_table_as_nested_root@@Base+0x8c>
   2fb6c:	ldr	r0, [r4, #20]
   2fb70:	add	r1, r0, #1
   2fb74:	str	r1, [r4, #20]
   2fb78:	mov	r1, #44	; 0x2c
   2fb7c:	strb	r1, [r0]
   2fb80:	mov	r0, r4
   2fb84:	mov	r1, sl
   2fb88:	mov	r2, r9
   2fb8c:	bl	2a4a0 <flatcc_json_printer_string_field@@Base+0xc0>
   2fb90:	mov	r0, r7
   2fb94:	bl	2a55c <flatcc_json_printer_string_field@@Base+0x17c>
   2fb98:	mov	r1, r0
   2fb9c:	ldr	r2, [r5, #12]
   2fba0:	mov	r0, r4
   2fba4:	mov	r3, r8
   2fba8:	sub	sp, fp, #28
   2fbac:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2fbb0:	b	2ee78 <flatcc_json_printer_table_vector_field@@Base+0x150>
   2fbb4:	sub	sp, fp, #28
   2fbb8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}

0002fbbc <flatcc_json_printer_init@@Base>:
   2fbbc:	push	{r4, r5, r6, sl, fp, lr}
   2fbc0:	add	fp, sp, #16
   2fbc4:	mov	r5, r0
   2fbc8:	mov	r4, #0
   2fbcc:	vmov.i32	q8, #0	; 0x00000000
   2fbd0:	str	r4, [r0, #32]
   2fbd4:	mov	r0, #36	; 0x24
   2fbd8:	mov	r2, r5
   2fbdc:	vst1.32	{d16-d17}, [r2], r0
   2fbe0:	str	r4, [r2]
   2fbe4:	add	r0, r5, #16
   2fbe8:	vst1.32	{d16-d17}, [r0]
   2fbec:	movw	r0, #33612	; 0x834c
   2fbf0:	movt	r0, #4
   2fbf4:	ldr	r0, [r0]
   2fbf8:	movw	r2, #64608	; 0xfc60
   2fbfc:	movt	r2, #2
   2fc00:	cmp	r1, #0
   2fc04:	movne	r0, r1
   2fc08:	str	r0, [r5, #40]	; 0x28
   2fc0c:	str	r2, [r5, #44]	; 0x2c
   2fc10:	movw	r6, #16448	; 0x4040
   2fc14:	movw	r0, #16448	; 0x4040
   2fc18:	bl	14e98 <malloc@plt>
   2fc1c:	str	r0, [r5]
   2fc20:	cmp	r0, #0
   2fc24:	beq	2fc54 <flatcc_json_printer_init@@Base+0x98>
   2fc28:	mov	r0, #16384	; 0x4000
   2fc2c:	str	r6, [r5, #4]
   2fc30:	str	r0, [r5, #8]
   2fc34:	mov	r0, #1
   2fc38:	strb	r0, [r5, #24]
   2fc3c:	ldr	r0, [r5]
   2fc40:	add	r1, r0, #16384	; 0x4000
   2fc44:	str	r1, [r5, #16]
   2fc48:	str	r0, [r5, #20]
   2fc4c:	mov	r0, r4
   2fc50:	pop	{r4, r5, r6, sl, fp, pc}
   2fc54:	mvn	r4, #0
   2fc58:	mov	r0, r4
   2fc5c:	pop	{r4, r5, r6, sl, fp, pc}
   2fc60:	push	{r4, r5, r6, sl, fp, lr}
   2fc64:	add	fp, sp, #16
   2fc68:	mov	r4, r0
   2fc6c:	cmp	r1, #0
   2fc70:	bne	2fc84 <flatcc_json_printer_init@@Base+0xc8>
   2fc74:	ldr	r5, [r4, #16]
   2fc78:	ldr	r6, [r4, #20]
   2fc7c:	cmp	r6, r5
   2fc80:	bcs	2fca8 <flatcc_json_printer_init@@Base+0xec>
   2fc84:	ldr	r0, [r4]
   2fc88:	ldr	r1, [r4, #20]
   2fc8c:	ldr	r3, [r4, #40]	; 0x28
   2fc90:	sub	r5, r1, r0
   2fc94:	mov	r1, r5
   2fc98:	mov	r2, #1
   2fc9c:	bl	14e8c <fwrite@plt>
   2fca0:	ldr	r0, [r4]
   2fca4:	b	2fce0 <flatcc_json_printer_init@@Base+0x124>
   2fca8:	ldr	r0, [r4]
   2fcac:	ldr	r1, [r4, #8]
   2fcb0:	ldr	r3, [r4, #40]	; 0x28
   2fcb4:	mov	r2, #1
   2fcb8:	bl	14e8c <fwrite@plt>
   2fcbc:	sub	r6, r6, r5
   2fcc0:	ldr	r0, [r4]
   2fcc4:	ldr	r1, [r4, #8]
   2fcc8:	add	r1, r0, r1
   2fccc:	mov	r2, r6
   2fcd0:	bl	14e5c <memcpy@plt>
   2fcd4:	ldr	r0, [r4]
   2fcd8:	ldr	r5, [r4, #8]
   2fcdc:	add	r0, r0, r6
   2fce0:	str	r0, [r4, #20]
   2fce4:	ldr	r0, [r4, #12]
   2fce8:	ldr	r1, [r4, #20]
   2fcec:	add	r0, r0, r5
   2fcf0:	str	r0, [r4, #12]
   2fcf4:	mov	r0, #0
   2fcf8:	strb	r0, [r1]
   2fcfc:	pop	{r4, r5, r6, sl, fp, pc}

0002fd00 <flatcc_json_printer_init_buffer@@Base>:
   2fd00:	push	{fp, lr}
   2fd04:	mov	fp, sp
   2fd08:	cmp	r2, #63	; 0x3f
   2fd0c:	bls	2fd4c <flatcc_json_printer_init_buffer@@Base+0x4c>
   2fd10:	vmov.i32	q8, #0	; 0x00000000
   2fd14:	add	r3, r0, #12
   2fd18:	vst1.32	{d16-d17}, [r3]
   2fd1c:	movw	r3, #64876	; 0xfd6c
   2fd20:	movt	r3, #2
   2fd24:	str	r3, [r0, #44]	; 0x2c
   2fd28:	add	r3, r0, #28
   2fd2c:	vst1.32	{d16-d17}, [r3]
   2fd30:	sub	r3, r2, #64	; 0x40
   2fd34:	stm	r0, {r1, r2, r3}
   2fd38:	add	r2, r1, r3
   2fd3c:	str	r2, [r0, #16]
   2fd40:	str	r1, [r0, #20]
   2fd44:	mov	r0, #0
   2fd48:	pop	{fp, pc}
   2fd4c:	movw	r0, #28822	; 0x7096
   2fd50:	movt	r0, #3
   2fd54:	movw	r1, #28539	; 0x6f7b
   2fd58:	movt	r1, #3
   2fd5c:	movw	r3, #28863	; 0x70bf
   2fd60:	movt	r3, #3
   2fd64:	movw	r2, #1165	; 0x48d
   2fd68:	bl	14f40 <__assert_fail@plt>
   2fd6c:	push	{r4, sl, fp, lr}
   2fd70:	add	fp, sp, #8
   2fd74:	mov	r4, r0
   2fd78:	ldr	r0, [r0, #16]
   2fd7c:	ldr	r1, [r4, #20]
   2fd80:	cmp	r1, r0
   2fd84:	bcc	2fdb0 <flatcc_json_printer_init_buffer@@Base+0xb0>
   2fd88:	mov	r0, r4
   2fd8c:	mov	r1, #3
   2fd90:	bl	2f24c <flatcc_json_printer_union_vector_field@@Base+0x2fc>
   2fd94:	ldr	r0, [r4]
   2fd98:	ldr	r1, [r4, #12]
   2fd9c:	ldr	r2, [r4, #20]
   2fda0:	str	r0, [r4, #20]
   2fda4:	sub	r0, r2, r0
   2fda8:	add	r0, r0, r1
   2fdac:	str	r0, [r4, #12]
   2fdb0:	ldr	r0, [r4, #20]
   2fdb4:	mov	r1, #0
   2fdb8:	strb	r1, [r0]
   2fdbc:	pop	{r4, sl, fp, pc}

0002fdc0 <flatcc_json_printer_init_dynamic_buffer@@Base>:
   2fdc0:	push	{r4, r5, fp, lr}
   2fdc4:	add	fp, sp, #8
   2fdc8:	mov	r5, r1
   2fdcc:	mov	r4, r0
   2fdd0:	vmov.i32	q8, #0	; 0x00000000
   2fdd4:	add	r0, r0, #28
   2fdd8:	vst1.32	{d16-d17}, [r0]
   2fddc:	add	r0, r4, #12
   2fde0:	vst1.32	{d16-d17}, [r0]
   2fde4:	cmp	r1, #0
   2fde8:	movweq	r5, #4096	; 0x1000
   2fdec:	cmp	r5, #64	; 0x40
   2fdf0:	movls	r5, #64	; 0x40
   2fdf4:	mov	r0, r5
   2fdf8:	bl	14e98 <malloc@plt>
   2fdfc:	mov	r1, r0
   2fe00:	mov	r0, #1
   2fe04:	strb	r0, [r4, #24]
   2fe08:	sub	r0, r5, #64	; 0x40
   2fe0c:	stm	r4, {r1, r5}
   2fe10:	str	r0, [r4, #8]
   2fe14:	movw	r2, #65100	; 0xfe4c
   2fe18:	movt	r2, #2
   2fe1c:	str	r2, [r4, #44]	; 0x2c
   2fe20:	add	r0, r1, r0
   2fe24:	str	r0, [r4, #16]
   2fe28:	str	r1, [r4, #20]
   2fe2c:	mov	r0, #0
   2fe30:	cmp	r1, #0
   2fe34:	popne	{r4, r5, fp, pc}
   2fe38:	mov	r0, r4
   2fe3c:	mov	r1, #3
   2fe40:	bl	2f24c <flatcc_json_printer_union_vector_field@@Base+0x2fc>
   2fe44:	mvn	r0, #0
   2fe48:	pop	{r4, r5, fp, pc}
   2fe4c:	push	{r4, r5, fp, lr}
   2fe50:	add	fp, sp, #8
   2fe54:	mov	r4, r0
   2fe58:	ldr	r0, [r0]
   2fe5c:	ldr	r5, [r4, #20]
   2fe60:	mov	r1, #0
   2fe64:	strb	r1, [r5], -r0
   2fe68:	ldr	r0, [r4, #16]
   2fe6c:	ldr	r1, [r4, #20]
   2fe70:	cmp	r1, r0
   2fe74:	popcc	{r4, r5, fp, pc}
   2fe78:	ldm	r4, {r0, r1}
   2fe7c:	lsl	r1, r1, #1
   2fe80:	bl	14e80 <realloc@plt>
   2fe84:	cmp	r0, #0
   2fe88:	beq	2febc <flatcc_json_printer_init_dynamic_buffer@@Base+0xfc>
   2fe8c:	str	r0, [r4]
   2fe90:	add	r1, r0, r5
   2fe94:	ldr	r2, [r4, #4]
   2fe98:	mvn	r3, #63	; 0x3f
   2fe9c:	add	r3, r3, r2, lsl #1
   2fea0:	str	r3, [r4, #8]
   2fea4:	lsl	r2, r2, #1
   2fea8:	str	r2, [r4, #4]
   2feac:	add	r0, r0, r3
   2feb0:	str	r0, [r4, #16]
   2feb4:	str	r1, [r4, #20]
   2feb8:	b	2fedc <flatcc_json_printer_init_dynamic_buffer@@Base+0x11c>
   2febc:	mov	r0, r4
   2fec0:	mov	r1, #3
   2fec4:	bl	2f24c <flatcc_json_printer_union_vector_field@@Base+0x2fc>
   2fec8:	ldr	r0, [r4]
   2fecc:	ldr	r1, [r4, #12]
   2fed0:	str	r0, [r4, #20]
   2fed4:	add	r0, r1, r5
   2fed8:	str	r0, [r4, #12]
   2fedc:	ldr	r0, [r4, #20]
   2fee0:	mov	r1, #0
   2fee4:	strb	r1, [r0]
   2fee8:	pop	{r4, r5, fp, pc}

0002feec <flatcc_json_printer_get_buffer@@Base>:
   2feec:	push	{r4, r5, fp, lr}
   2fef0:	add	fp, sp, #8
   2fef4:	mov	r5, r1
   2fef8:	mov	r4, r0
   2fefc:	ldr	r2, [r0, #44]	; 0x2c
   2ff00:	mov	r1, #0
   2ff04:	blx	r2
   2ff08:	cmp	r5, #0
   2ff0c:	beq	2ff20 <flatcc_json_printer_get_buffer@@Base+0x34>
   2ff10:	ldr	r0, [r4]
   2ff14:	ldr	r1, [r4, #20]
   2ff18:	sub	r0, r1, r0
   2ff1c:	str	r0, [r5]
   2ff20:	ldr	r0, [r4]
   2ff24:	pop	{r4, r5, fp, pc}

0002ff28 <flatcc_json_printer_finalize_dynamic_buffer@@Base>:
   2ff28:	push	{r4, sl, fp, lr}
   2ff2c:	add	fp, sp, #8
   2ff30:	mov	r4, r0
   2ff34:	bl	2feec <flatcc_json_printer_get_buffer@@Base>
   2ff38:	vmov.i32	q8, #0	; 0x00000000
   2ff3c:	add	r1, r4, #16
   2ff40:	vst1.32	{d16-d17}, [r1]
   2ff44:	mov	r1, #32
   2ff48:	vst1.32	{d16-d17}, [r4], r1
   2ff4c:	vst1.32	{d16-d17}, [r4]
   2ff50:	pop	{r4, sl, fp, pc}

0002ff54 <flatcc_json_printer_clear@@Base>:
   2ff54:	push	{r4, sl, fp, lr}
   2ff58:	add	fp, sp, #8
   2ff5c:	mov	r4, r0
   2ff60:	ldrb	r0, [r0, #24]
   2ff64:	cmp	r0, #0
   2ff68:	beq	2ff7c <flatcc_json_printer_clear@@Base+0x28>
   2ff6c:	ldr	r0, [r4]
   2ff70:	cmp	r0, #0
   2ff74:	beq	2ff7c <flatcc_json_printer_clear@@Base+0x28>
   2ff78:	bl	14e50 <free@plt>
   2ff7c:	vmov.i32	q8, #0	; 0x00000000
   2ff80:	mov	r0, #32
   2ff84:	add	r1, r4, #16
   2ff88:	vst1.32	{d16-d17}, [r4], r0
   2ff8c:	vst1.32	{d16-d17}, [r4]
   2ff90:	vst1.32	{d16-d17}, [r1]
   2ff94:	pop	{r4, sl, fp, pc}
   2ff98:	vmov	r0, r1, d0
   2ff9c:	bx	lr
   2ffa0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2ffa4:	add	fp, sp, #28
   2ffa8:	sub	sp, sp, #4
   2ffac:	vpush	{d8}
   2ffb0:	sub	sp, sp, #160	; 0xa0
   2ffb4:	add	r3, sp, #68	; 0x44
   2ffb8:	stm	r3, {r0, r1, r2}
   2ffbc:	vmov.f64	d8, d0
   2ffc0:	sub	r0, fp, #56	; 0x38
   2ffc4:	bl	302a8 <flatcc_json_printer_clear@@Base+0x354>
   2ffc8:	ldr	sl, [fp, #-56]	; 0xffffffc8
   2ffcc:	ldr	r5, [fp, #-52]	; 0xffffffcc
   2ffd0:	ldr	r0, [fp, #-48]	; 0xffffffd0
   2ffd4:	ldr	r1, [fp, #-44]	; 0xffffffd4
   2ffd8:	stm	sp, {r0, r1}
   2ffdc:	sub	r0, fp, #72	; 0x48
   2ffe0:	mov	r2, sl
   2ffe4:	mov	r3, r5
   2ffe8:	bl	302fc <flatcc_json_printer_clear@@Base+0x3a8>
   2ffec:	ldr	r1, [fp, #-48]	; 0xffffffd0
   2fff0:	mov	r0, #0
   2fff4:	str	r1, [sp, #56]	; 0x38
   2fff8:	sub	r1, r1, #1
   2fffc:	str	r1, [sp, #52]	; 0x34
   30000:	str	r1, [sp]
   30004:	str	r0, [sp, #4]
   30008:	mov	r0, #1
   3000c:	orr	r2, r0, sl, lsl #1
   30010:	str	r5, [sp, #60]	; 0x3c
   30014:	lsl	r0, r5, #1
   30018:	orr	r8, r0, sl, lsr #31
   3001c:	sub	r0, fp, #88	; 0x58
   30020:	mov	r3, r8
   30024:	bl	302fc <flatcc_json_printer_clear@@Base+0x3a8>
   30028:	vmov.f64	d0, d8
   3002c:	bl	2ff98 <flatcc_json_printer_clear@@Base+0x44>
   30030:	str	r0, [sp, #48]	; 0x30
   30034:	vcmpe.f64	d8, #0.0
   30038:	vmrs	APSR_nzcv, fpscr
   3003c:	ble	301e0 <flatcc_json_printer_clear@@Base+0x28c>
   30040:	vldr	d16, [pc, #440]	; 30200 <flatcc_json_printer_clear@@Base+0x2ac>
   30044:	vcmpe.f64	d8, d16
   30048:	vmrs	APSR_nzcv, fpscr
   3004c:	bhi	301e0 <flatcc_json_printer_clear@@Base+0x28c>
   30050:	mov	r9, r1
   30054:	ldr	r0, [fp, #-64]	; 0xffffffc0
   30058:	mvn	r1, #123	; 0x7b
   3005c:	sub	r0, r1, r0
   30060:	ldr	r1, [fp, #-80]	; 0xffffffb0
   30064:	str	r1, [sp, #44]	; 0x2c
   30068:	add	r1, sp, #96	; 0x60
   3006c:	bl	303a0 <flatcc_json_printer_clear@@Base+0x44c>
   30070:	str	r0, [sp, #64]	; 0x40
   30074:	ldr	r2, [fp, #-72]	; 0xffffffb8
   30078:	ldr	r3, [fp, #-68]	; 0xffffffbc
   3007c:	ldr	r0, [fp, #-64]	; 0xffffffc0
   30080:	ldr	r1, [fp, #-60]	; 0xffffffc4
   30084:	add	r7, sp, #96	; 0x60
   30088:	ldm	r7, {r4, r6, r7}
   3008c:	ldr	r5, [sp, #108]	; 0x6c
   30090:	stm	sp, {r0, r1, r4, r6, r7}
   30094:	str	r5, [sp, #20]
   30098:	sub	r0, fp, #72	; 0x48
   3009c:	bl	30408 <flatcc_json_printer_clear@@Base+0x4b4>
   300a0:	mov	r0, #0
   300a4:	ldr	ip, [sp, #44]	; 0x2c
   300a8:	str	ip, [sp]
   300ac:	stmib	sp, {r0, r4, r6, r7}
   300b0:	str	r5, [sp, #20]
   300b4:	movw	r0, #0
   300b8:	movt	r0, #32752	; 0x7ff0
   300bc:	and	r0, r9, r0
   300c0:	clz	r0, r0
   300c4:	lsr	r0, r0, #5
   300c8:	bfc	r9, #20, #12
   300cc:	ldr	r1, [sp, #48]	; 0x30
   300d0:	orrs	r1, r1, r9
   300d4:	movwne	r1, #1
   300d8:	orrs	r0, r1, r0
   300dc:	ldr	r1, [sp, #60]	; 0x3c
   300e0:	lsl	r1, r1, #2
   300e4:	orreq	r8, r1, sl, lsr #30
   300e8:	lsl	r1, sl, #2
   300ec:	lslne	r1, sl, #1
   300f0:	subs	r1, r1, #1
   300f4:	sbc	r2, r8, #0
   300f8:	cmp	r0, #0
   300fc:	ldr	r0, [sp, #56]	; 0x38
   30100:	ldr	r3, [sp, #52]	; 0x34
   30104:	subeq	r3, r0, #2
   30108:	sub	r0, r3, ip
   3010c:	rsb	r3, r0, #32
   30110:	lsr	r3, r1, r3
   30114:	orr	r3, r3, r2, lsl r0
   30118:	subs	r2, r0, #32
   3011c:	lslpl	r3, r1, r2
   30120:	lsl	r2, r1, r0
   30124:	movwpl	r2, #0
   30128:	add	r0, sp, #80	; 0x50
   3012c:	bl	30408 <flatcc_json_printer_clear@@Base+0x4b4>
   30130:	ldr	r8, [sp, #80]	; 0x50
   30134:	ldr	r9, [sp, #84]	; 0x54
   30138:	ldr	r0, [sp, #88]	; 0x58
   3013c:	str	r0, [sp, #60]	; 0x3c
   30140:	ldr	sl, [sp, #92]	; 0x5c
   30144:	ldr	r2, [fp, #-88]	; 0xffffffa8
   30148:	ldr	r3, [fp, #-84]	; 0xffffffac
   3014c:	ldr	r0, [fp, #-80]	; 0xffffffb0
   30150:	ldr	r1, [fp, #-76]	; 0xffffffb4
   30154:	stm	sp, {r0, r1, r4, r6, r7}
   30158:	str	r5, [sp, #20]
   3015c:	sub	r0, fp, #88	; 0x58
   30160:	bl	30408 <flatcc_json_printer_clear@@Base+0x4b4>
   30164:	sub	r3, fp, #68	; 0x44
   30168:	ldm	r3, {r1, r2, r3}
   3016c:	ldr	r7, [fp, #-88]	; 0xffffffa8
   30170:	ldr	r5, [fp, #-84]	; 0xffffffac
   30174:	sub	ip, fp, #80	; 0x50
   30178:	ldm	ip, {r4, r6, ip}
   3017c:	ldr	r0, [sp, #68]	; 0x44
   30180:	str	r0, [sp, #32]
   30184:	ldr	r0, [sp, #72]	; 0x48
   30188:	str	r0, [sp, #36]	; 0x24
   3018c:	add	r0, sp, #80	; 0x50
   30190:	str	r0, [sp, #40]	; 0x28
   30194:	str	ip, [sp]
   30198:	stmib	sp, {r1, r2, r3, r7}
   3019c:	str	r5, [sp, #20]
   301a0:	str	r4, [sp, #24]
   301a4:	str	r6, [sp, #28]
   301a8:	mov	r0, r8
   301ac:	mov	r1, r9
   301b0:	ldr	r2, [sp, #60]	; 0x3c
   301b4:	mov	r3, sl
   301b8:	bl	30468 <flatcc_json_printer_clear@@Base+0x514>
   301bc:	ldr	r1, [sp, #80]	; 0x50
   301c0:	ldr	r2, [sp, #64]	; 0x40
   301c4:	sub	r1, r1, r2
   301c8:	ldr	r2, [sp, #76]	; 0x4c
   301cc:	str	r1, [r2]
   301d0:	sub	sp, fp, #40	; 0x28
   301d4:	vpop	{d8}
   301d8:	add	sp, sp, #4
   301dc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   301e0:	movw	r0, #29091	; 0x71a3
   301e4:	movt	r0, #3
   301e8:	movw	r1, #28944	; 0x7110
   301ec:	movt	r1, #3
   301f0:	movw	r3, #29128	; 0x71c8
   301f4:	movt	r3, #3
   301f8:	mov	r2, #138	; 0x8a
   301fc:	bl	14f40 <__assert_fail@plt>
   30200:			; <UNDEFINED> instruction: 0xffffffff
   30204:	svcvc	0x00efffff
   30208:	push	{r4, sl, fp, lr}
   3020c:	add	fp, sp, #8
   30210:	cmn	r0, #1
   30214:	ble	30220 <flatcc_json_printer_clear@@Base+0x2cc>
   30218:	mov	lr, r1
   3021c:	b	30230 <flatcc_json_printer_clear@@Base+0x2dc>
   30220:	mov	r2, #45	; 0x2d
   30224:	mov	lr, r1
   30228:	strb	r2, [lr], #1
   3022c:	rsb	r0, r0, #0
   30230:	movw	ip, #26215	; 0x6667
   30234:	movt	ip, #26214	; 0x6666
   30238:	mov	r3, lr
   3023c:	smmul	r2, r0, ip
   30240:	asr	r4, r2, #2
   30244:	add	r2, r4, r2, lsr #31
   30248:	add	r4, r2, r2, lsl #2
   3024c:	sub	r4, r0, r4, lsl #1
   30250:	add	r4, r4, #48	; 0x30
   30254:	strb	r4, [r3], #1
   30258:	add	r0, r0, #9
   3025c:	cmp	r0, #18
   30260:	mov	r0, r2
   30264:	bhi	3023c <flatcc_json_printer_clear@@Base+0x2e8>
   30268:	mov	r2, #0
   3026c:	mov	r0, r3
   30270:	strb	r2, [r0], -lr
   30274:	cmp	r0, #2
   30278:	blt	302a0 <flatcc_json_printer_clear@@Base+0x34c>
   3027c:	add	r0, r0, r0, lsr #31
   30280:	asr	r0, r0, #1
   30284:	sub	r2, r3, #1
   30288:	ldrb	ip, [lr]
   3028c:	ldrb	r4, [r2]
   30290:	strb	r4, [lr], #1
   30294:	strb	ip, [r2], #-1
   30298:	subs	r0, r0, #1
   3029c:	bne	30288 <flatcc_json_printer_clear@@Base+0x334>
   302a0:	sub	r0, r3, r1
   302a4:	pop	{r4, sl, fp, pc}
   302a8:	push	{r4, sl, fp, lr}
   302ac:	add	fp, sp, #8
   302b0:	mov	r4, r0
   302b4:	bl	2ff98 <flatcc_json_printer_clear@@Base+0x44>
   302b8:	movw	r2, #0
   302bc:	movt	r2, #32752	; 0x7ff0
   302c0:	ands	r2, r1, r2
   302c4:	bfc	r1, #20, #12
   302c8:	beq	302e8 <flatcc_json_printer_clear@@Base+0x394>
   302cc:	orr	r1, r1, #1048576	; 0x100000
   302d0:	strd	r0, [r4]
   302d4:	movw	r0, #64461	; 0xfbcd
   302d8:	movt	r0, #65535	; 0xffff
   302dc:	add	r0, r0, r2, lsr #20
   302e0:	str	r0, [r4, #8]
   302e4:	pop	{r4, sl, fp, pc}
   302e8:	strd	r0, [r4]
   302ec:	movw	r0, #64462	; 0xfbce
   302f0:	movt	r0, #65535	; 0xffff
   302f4:	str	r0, [r4, #8]
   302f8:	pop	{r4, sl, fp, pc}
   302fc:	push	{r4, sl, fp, lr}
   30300:	add	fp, sp, #8
   30304:	orrs	r1, r2, r3
   30308:	beq	30380 <flatcc_json_printer_clear@@Base+0x42c>
   3030c:	ldr	r1, [fp, #8]
   30310:	mov	r4, #0
   30314:	cmp	r4, r3, lsr #22
   30318:	bne	30334 <flatcc_json_printer_clear@@Base+0x3e0>
   3031c:	lsl	r3, r3, #10
   30320:	orr	r3, r3, r2, lsr #22
   30324:	sub	r1, r1, #10
   30328:	lsl	r2, r2, #10
   3032c:	cmp	r3, #4194304	; 0x400000
   30330:	bcc	3031c <flatcc_json_printer_clear@@Base+0x3c8>
   30334:	ldr	ip, [fp, #12]
   30338:	cmp	r3, #0
   3033c:	bmi	30368 <flatcc_json_printer_clear@@Base+0x414>
   30340:	mvn	lr, #0
   30344:	lsl	r3, r3, #1
   30348:	orr	r3, r3, r2, lsr #31
   3034c:	sub	r1, r1, #1
   30350:	lsl	r4, r2, #1
   30354:	subs	r2, lr, r2, lsl #1
   30358:	sbcs	r2, lr, r3
   3035c:	mov	r2, r4
   30360:	blt	30344 <flatcc_json_printer_clear@@Base+0x3f0>
   30364:	b	3036c <flatcc_json_printer_clear@@Base+0x418>
   30368:	mov	r4, r2
   3036c:	str	r4, [r0]
   30370:	str	r3, [r0, #4]
   30374:	str	r1, [r0, #8]
   30378:	str	ip, [r0, #12]
   3037c:	pop	{r4, sl, fp, pc}
   30380:	movw	r0, #28162	; 0x6e02
   30384:	movt	r0, #3
   30388:	movw	r1, #28171	; 0x6e0b
   3038c:	movt	r1, #3
   30390:	movw	r3, #28257	; 0x6e61
   30394:	movt	r3, #3
   30398:	mov	r2, #260	; 0x104
   3039c:	bl	14f40 <__assert_fail@plt>
   303a0:	push	{r4, sl, fp, lr}
   303a4:	add	fp, sp, #8
   303a8:	mov	r4, r1
   303ac:	add	r0, r0, #63	; 0x3f
   303b0:	vldr	d16, [pc, #72]	; 30400 <flatcc_json_printer_clear@@Base+0x4ac>
   303b4:	vmov	s0, r0
   303b8:	vcvt.f64.s32	d17, s0
   303bc:	vmul.f64	d0, d17, d16
   303c0:	bl	307ec <flatcc_json_printer_clear@@Base+0x898>
   303c4:	movw	r1, #347	; 0x15b
   303c8:	add	r0, r0, r1
   303cc:	asr	r1, r0, #31
   303d0:	add	r0, r0, r1, lsr #29
   303d4:	mvn	r1, #14
   303d8:	and	r0, r1, r0, lsl #1
   303dc:	movw	r1, #29824	; 0x7480
   303e0:	movt	r1, #3
   303e4:	add	r0, r0, r1
   303e8:	ldrd	r2, [r0, #16]
   303ec:	stm	r4, {r2, r3}
   303f0:	ldrsh	r1, [r0, #24]
   303f4:	str	r1, [r4, #8]
   303f8:	ldrsh	r0, [r0, #26]
   303fc:	pop	{r4, sl, fp, pc}
   30400:			; <UNDEFINED> instruction: 0x509f79fe
   30404:	svccc	0x00d34413
   30408:	push	{r4, r5, fp, lr}
   3040c:	add	fp, sp, #8
   30410:	ldr	ip, [fp, #24]
   30414:	ldr	r1, [fp, #8]
   30418:	add	r1, r1, ip
   3041c:	add	r1, r1, #64	; 0x40
   30420:	str	r1, [r0, #8]
   30424:	ldr	ip, [fp, #16]
   30428:	umull	r1, lr, ip, r2
   3042c:	umull	ip, r1, ip, r3
   30430:	mov	r5, #0
   30434:	adds	lr, ip, lr
   30438:	adc	r5, r5, #0
   3043c:	ldr	ip, [fp, #20]
   30440:	umull	r2, r4, ip, r2
   30444:	adds	r2, lr, r2
   30448:	adc	r5, r5, #0
   3044c:	umaal	r1, r4, ip, r3
   30450:	adds	r2, r2, #-2147483648	; 0x80000000
   30454:	adcs	r1, r1, r5
   30458:	str	r1, [r0]
   3045c:	adc	r1, r4, #0
   30460:	str	r1, [r0, #4]
   30464:	pop	{r4, r5, fp, pc}
   30468:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   3046c:	add	fp, sp, #28
   30470:	sub	sp, sp, #132	; 0x84
   30474:	mov	r6, #0
   30478:	str	r6, [sp, #20]
   3047c:	str	r2, [sp, #16]
   30480:	subs	r0, r0, #1
   30484:	sbc	r1, r1, #0
   30488:	str	r1, [sp, #12]
   3048c:	str	r0, [sp, #8]
   30490:	str	r6, [sp, #4]
   30494:	ldr	r0, [fp, #32]
   30498:	str	r0, [sp]
   3049c:	ldr	r0, [fp, #28]
   304a0:	ldr	r1, [fp, #24]
   304a4:	adds	r9, r1, #1
   304a8:	adc	r4, r0, #0
   304ac:	sub	r0, fp, #48	; 0x30
   304b0:	mov	r2, r9
   304b4:	mov	r3, r4
   304b8:	bl	30818 <flatcc_json_printer_clear@@Base+0x8c4>
   304bc:	ldr	r1, [fp, #16]
   304c0:	rsb	sl, r1, #0
   304c4:	lsr	r0, r9, sl
   304c8:	add	r8, r1, #32
   304cc:	orr	r7, r0, r4, lsl r8
   304d0:	mvn	r0, #31
   304d4:	subs	r5, r0, r1
   304d8:	lsrpl	r7, r4, r5
   304dc:	add	r1, r1, #64	; 0x40
   304e0:	sub	r2, fp, #52	; 0x34
   304e4:	mov	r0, r7
   304e8:	bl	30870 <flatcc_json_printer_clear@@Base+0x91c>
   304ec:	mov	ip, sl
   304f0:	ldr	r1, [fp, #48]	; 0x30
   304f4:	str	r0, [r1]
   304f8:	mov	sl, #1
   304fc:	lsr	r2, sl, r8
   30500:	cmp	r5, #0
   30504:	lslpl	r2, sl, r5
   30508:	lsl	r5, sl, ip
   3050c:	movwpl	r5, #0
   30510:	ldr	r0, [fp, #44]	; 0x2c
   30514:	str	r6, [r0]
   30518:	ldr	r1, [r1]
   3051c:	str	r5, [sp, #40]	; 0x28
   30520:	subs	r3, r5, #1
   30524:	str	r9, [sp, #48]	; 0x30
   30528:	and	r9, r3, r9
   3052c:	str	r2, [sp, #44]	; 0x2c
   30530:	sbc	r2, r2, #0
   30534:	str	r4, [sp, #52]	; 0x34
   30538:	str	r2, [sp, #68]	; 0x44
   3053c:	and	r8, r2, r4
   30540:	cmp	r1, #1
   30544:	blt	305f4 <flatcc_json_printer_clear@@Base+0x6a0>
   30548:	str	r3, [sp, #36]	; 0x24
   3054c:	ldr	r1, [fp, #-48]	; 0xffffffd0
   30550:	str	r1, [sp, #64]	; 0x40
   30554:	ldr	r1, [fp, #-44]	; 0xffffffd4
   30558:	str	r1, [sp, #60]	; 0x3c
   3055c:	ldr	r5, [fp, #-52]	; 0xffffffcc
   30560:	ldr	r3, [fp, #48]	; 0x30
   30564:	udiv	r2, r7, r5
   30568:	add	r6, r2, #48	; 0x30
   3056c:	ldr	r4, [r0]
   30570:	ldr	r1, [fp, #40]	; 0x28
   30574:	strb	r6, [r1, r4]
   30578:	ldr	r6, [r0]
   3057c:	add	r6, r6, #1
   30580:	str	r6, [r0]
   30584:	ldr	r6, [r3]
   30588:	sub	r6, r6, #1
   3058c:	str	r6, [r3]
   30590:	mls	r7, r2, r5, r7
   30594:	rsb	r6, ip, #32
   30598:	lsr	r2, r7, r6
   3059c:	subs	r4, ip, #32
   305a0:	lslpl	r2, r7, r4
   305a4:	lsl	r1, r7, ip
   305a8:	movwpl	r1, #0
   305ac:	adds	lr, r1, r9
   305b0:	adc	r2, r2, r8
   305b4:	ldr	r1, [sp, #64]	; 0x40
   305b8:	str	lr, [sp, #56]	; 0x38
   305bc:	subs	r1, lr, r1
   305c0:	ldr	r1, [sp, #60]	; 0x3c
   305c4:	sbcs	r1, r2, r1
   305c8:	bcc	30740 <flatcc_json_printer_clear@@Base+0x7ec>
   305cc:	movw	r1, #52429	; 0xcccd
   305d0:	movt	r1, #52428	; 0xcccc
   305d4:	umull	r1, r2, r5, r1
   305d8:	lsr	r5, r2, #3
   305dc:	ldr	r1, [r3]
   305e0:	cmp	r1, #0
   305e4:	bgt	30564 <flatcc_json_printer_clear@@Base+0x610>
   305e8:	str	r5, [fp, #-52]	; 0xffffffcc
   305ec:	mov	r6, #0
   305f0:	ldr	r3, [sp, #36]	; 0x24
   305f4:	ldr	r7, [fp, #-48]	; 0xffffffd0
   305f8:	ldr	r5, [fp, #-44]	; 0xffffffd4
   305fc:	rsb	r1, ip, #32
   30600:	str	r1, [sp, #64]	; 0x40
   30604:	sub	r1, ip, #32
   30608:	str	r1, [sp, #60]	; 0x3c
   3060c:	str	ip, [sp, #56]	; 0x38
   30610:	mov	lr, #10
   30614:	mov	ip, r6
   30618:	umull	r4, r6, r9, lr
   3061c:	mov	r9, r3
   30620:	ldr	r0, [sp, #56]	; 0x38
   30624:	lsr	r3, r4, r0
   30628:	add	r2, r8, r8, lsl #2
   3062c:	add	r2, r6, r2, lsl #1
   30630:	ldr	r1, [sp, #64]	; 0x40
   30634:	orr	r3, r3, r2, lsl r1
   30638:	ldr	r1, [sp, #60]	; 0x3c
   3063c:	cmp	r1, #0
   30640:	lsrpl	r3, r2, r1
   30644:	add	r3, r3, #48	; 0x30
   30648:	ldr	r1, [fp, #44]	; 0x2c
   3064c:	mov	r0, r1
   30650:	ldr	r6, [r1]
   30654:	ldr	r1, [fp, #40]	; 0x28
   30658:	strb	r3, [r1, r6]
   3065c:	ldr	r3, [r0]
   30660:	add	r3, r3, #1
   30664:	str	r3, [r0]
   30668:	ldr	r0, [fp, #48]	; 0x30
   3066c:	ldr	r3, [r0]
   30670:	sub	r3, r3, #1
   30674:	str	r3, [r0]
   30678:	umull	sl, r3, sl, lr
   3067c:	add	r6, ip, ip, lsl #2
   30680:	add	r6, r3, r6, lsl #1
   30684:	umull	r7, r3, r7, lr
   30688:	add	r5, r5, r5, lsl #2
   3068c:	add	r5, r3, r5, lsl #1
   30690:	mov	r3, r9
   30694:	ldr	r0, [sp, #68]	; 0x44
   30698:	and	r8, r2, r0
   3069c:	and	r9, r4, r9
   306a0:	subs	r2, r9, r7
   306a4:	sbcs	r2, r8, r5
   306a8:	bcs	30614 <flatcc_json_printer_clear@@Base+0x6c0>
   306ac:	str	r7, [fp, #-48]	; 0xffffffd0
   306b0:	str	r5, [fp, #-44]	; 0xffffffd4
   306b4:	ldr	r0, [fp, #44]	; 0x2c
   306b8:	ldr	r4, [r0]
   306bc:	mov	r0, #0
   306c0:	ldr	r1, [fp, #32]
   306c4:	str	r1, [sp]
   306c8:	str	r0, [sp, #4]
   306cc:	ldr	r0, [fp, #8]
   306d0:	str	r0, [sp, #8]
   306d4:	ldr	r0, [fp, #12]
   306d8:	str	r0, [sp, #12]
   306dc:	ldr	r0, [fp, #16]
   306e0:	str	r0, [sp, #16]
   306e4:	ldr	r0, [fp, #20]
   306e8:	str	r0, [sp, #20]
   306ec:	add	r0, sp, #72	; 0x48
   306f0:	ldr	r2, [sp, #48]	; 0x30
   306f4:	ldr	r3, [sp, #52]	; 0x34
   306f8:	bl	30818 <flatcc_json_printer_clear@@Base+0x8c4>
   306fc:	ldr	r0, [sp, #72]	; 0x48
   30700:	ldr	r1, [sp, #76]	; 0x4c
   30704:	str	r7, [sp]
   30708:	stmib	sp, {r5, r9}
   3070c:	str	r8, [sp, #12]
   30710:	ldr	r2, [sp, #40]	; 0x28
   30714:	str	r2, [sp, #16]
   30718:	ldr	r2, [sp, #44]	; 0x2c
   3071c:	str	r2, [sp, #20]
   30720:	str	sl, [sp, #24]
   30724:	str	r6, [sp, #28]
   30728:	umull	r2, r3, r0, sl
   3072c:	mla	r0, r0, r6, r3
   30730:	mla	r3, r1, sl, r0
   30734:	ldr	r0, [fp, #40]	; 0x28
   30738:	mov	r1, r4
   3073c:	b	307e0 <flatcc_json_printer_clear@@Base+0x88c>
   30740:	str	r5, [fp, #-52]	; 0xffffffcc
   30744:	ldr	sl, [r0]
   30748:	mov	r8, #0
   3074c:	ldr	r0, [fp, #32]
   30750:	stm	sp, {r0, r8}
   30754:	ldr	r0, [fp, #8]
   30758:	str	r0, [sp, #8]
   3075c:	ldr	r0, [fp, #12]
   30760:	str	r0, [sp, #12]
   30764:	ldr	r0, [fp, #16]
   30768:	str	r0, [sp, #16]
   3076c:	ldr	r0, [fp, #20]
   30770:	str	r0, [sp, #20]
   30774:	sub	r0, fp, #72	; 0x48
   30778:	mov	r9, r2
   3077c:	ldr	r2, [sp, #48]	; 0x30
   30780:	ldr	r3, [sp, #52]	; 0x34
   30784:	mov	r7, ip
   30788:	bl	30818 <flatcc_json_printer_clear@@Base+0x8c4>
   3078c:	ldr	r2, [fp, #-72]	; 0xffffffb8
   30790:	ldr	r3, [fp, #-68]	; 0xffffffbc
   30794:	mov	r0, #1
   30798:	lsr	r1, r5, r6
   3079c:	cmp	r4, #0
   307a0:	lslpl	r1, r5, r4
   307a4:	lsl	r6, r5, r7
   307a8:	movwpl	r6, #0
   307ac:	ldr	r7, [sp, #64]	; 0x40
   307b0:	str	r7, [sp]
   307b4:	ldr	r7, [sp, #60]	; 0x3c
   307b8:	str	r7, [sp, #4]
   307bc:	ldr	r7, [sp, #56]	; 0x38
   307c0:	str	r7, [sp, #8]
   307c4:	str	r9, [sp, #12]
   307c8:	str	r6, [sp, #16]
   307cc:	str	r1, [sp, #20]
   307d0:	str	r0, [sp, #24]
   307d4:	str	r8, [sp, #28]
   307d8:	ldr	r0, [fp, #40]	; 0x28
   307dc:	mov	r1, sl
   307e0:	bl	308ac <flatcc_json_printer_clear@@Base+0x958>
   307e4:	sub	sp, fp, #28
   307e8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   307ec:	vcvt.s32.f64	s2, d0
   307f0:	vmov	r0, s2
   307f4:	vcmpe.f64	d0, #0.0
   307f8:	vmrs	APSR_nzcv, fpscr
   307fc:	bxmi	lr
   30800:	vcvt.f64.s32	d16, s2
   30804:	vsub.f64	d16, d0, d16
   30808:	vcmp.f64	d16, #0.0
   3080c:	vmrs	APSR_nzcv, fpscr
   30810:	addne	r0, r0, #1
   30814:	bx	lr
   30818:	push	{fp, lr}
   3081c:	mov	fp, sp
   30820:	ldr	ip, [fp, #8]
   30824:	str	ip, [r0, #8]
   30828:	ldr	r1, [fp, #16]
   3082c:	subs	r1, r2, r1
   30830:	str	r1, [r0]
   30834:	ldr	r1, [fp, #20]
   30838:	sbcs	r1, r3, r1
   3083c:	str	r1, [r0, #4]
   30840:	bcc	30850 <flatcc_json_printer_clear@@Base+0x8fc>
   30844:	ldr	r0, [fp, #24]
   30848:	cmp	ip, r0
   3084c:	popeq	{fp, pc}
   30850:	movw	r0, #29169	; 0x71f1
   30854:	movt	r0, #3
   30858:	movw	r1, #28171	; 0x6e0b
   3085c:	movt	r1, #3
   30860:	movw	r3, #29194	; 0x720a
   30864:	movt	r3, #3
   30868:	mov	r2, #239	; 0xef
   3086c:	bl	14f40 <__assert_fail@plt>
   30870:	push	{fp, lr}
   30874:	mov	fp, sp
   30878:	movw	r3, #1233	; 0x4d1
   3087c:	mla	lr, r1, r3, r3
   30880:	mov	r1, #1
   30884:	add	r1, r1, lr, asr #12
   30888:	movw	ip, #31216	; 0x79f0
   3088c:	movt	ip, #3
   30890:	ldr	r3, [ip, r1, lsl #2]
   30894:	cmp	r3, r0
   30898:	asrhi	r1, lr, #12
   3089c:	ldr	r0, [ip, r1, lsl #2]
   308a0:	str	r0, [r2]
   308a4:	mov	r0, r1
   308a8:	pop	{fp, pc}
   308ac:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   308b0:	add	fp, sp, #28
   308b4:	sub	sp, sp, #20
   308b8:	str	r1, [sp, #12]
   308bc:	str	r0, [sp, #16]
   308c0:	ldr	r5, [fp, #20]
   308c4:	ldr	ip, [fp, #12]
   308c8:	ldr	r1, [fp, #16]
   308cc:	ldr	lr, [fp, #8]
   308d0:	subs	r8, lr, r1
   308d4:	sbc	r7, ip, r5
   308d8:	mov	r9, #0
   308dc:	ldr	r0, [fp, #28]
   308e0:	ldr	r4, [fp, #24]
   308e4:	subs	r4, r8, r4
   308e8:	sbcs	r4, r7, r0
   308ec:	movwcc	r9, #1
   308f0:	ldr	r4, [fp, #36]	; 0x24
   308f4:	ldr	r0, [fp, #32]
   308f8:	adds	r6, r0, r2
   308fc:	str	r6, [sp, #8]
   30900:	adc	r6, r4, r3
   30904:	subs	r0, r2, r0
   30908:	sbc	sl, r3, r4
   3090c:	subs	r4, r1, r0
   30910:	sbcs	r4, r5, sl
   30914:	str	r6, [sp, #4]
   30918:	bcs	309dc <flatcc_json_printer_clear@@Base+0xa88>
   3091c:	ldr	r3, [fp, #24]
   30920:	subs	r4, r8, r3
   30924:	ldr	r2, [fp, #28]
   30928:	sbcs	r4, r7, r2
   3092c:	bcc	309e4 <flatcc_json_printer_clear@@Base+0xa90>
   30930:	ldr	r1, [sp, #12]
   30934:	sub	r1, r1, #1
   30938:	str	r1, [sp, #12]
   3093c:	ldr	r5, [fp, #20]
   30940:	ldr	r8, [fp, #16]
   30944:	adds	r7, r8, r3
   30948:	adc	r6, r5, r2
   3094c:	subs	r4, r7, r0
   30950:	sbcs	r4, r6, sl
   30954:	bcc	3098c <flatcc_json_printer_clear@@Base+0xa38>
   30958:	subs	r4, r7, r0
   3095c:	sbc	lr, r6, sl
   30960:	mov	r1, ip
   30964:	subs	ip, r0, r8
   30968:	mov	r2, r8
   3096c:	sbc	r8, sl, r5
   30970:	subs	r4, ip, r4
   30974:	mov	ip, r1
   30978:	sbcs	r4, r8, lr
   3097c:	mov	r8, r2
   30980:	ldr	r2, [fp, #28]
   30984:	ldr	lr, [fp, #8]
   30988:	bcc	309f8 <flatcc_json_printer_clear@@Base+0xaa4>
   3098c:	ldr	r1, [sp, #16]
   30990:	ldr	r4, [sp, #12]
   30994:	ldrb	r5, [r1, r4]
   30998:	sub	r5, r5, #1
   3099c:	strb	r5, [r1, r4]
   309a0:	subs	r5, lr, r7
   309a4:	sbc	r4, ip, r6
   309a8:	subs	r1, r5, r3
   309ac:	sbcs	r1, r4, r2
   309b0:	mov	r9, #0
   309b4:	movwcc	r9, #1
   309b8:	subs	r1, r7, r0
   309bc:	sbcs	r1, r6, sl
   309c0:	bcs	309f0 <flatcc_json_printer_clear@@Base+0xa9c>
   309c4:	subs	r1, r5, r3
   309c8:	sbcs	r1, r4, r2
   309cc:	mov	r8, r7
   309d0:	mov	r5, r6
   309d4:	bcs	30944 <flatcc_json_printer_clear@@Base+0x9f0>
   309d8:	b	309f8 <flatcc_json_printer_clear@@Base+0xaa4>
   309dc:	ldr	r2, [fp, #28]
   309e0:	ldr	r3, [fp, #24]
   309e4:	ldr	r5, [fp, #20]
   309e8:	ldr	r8, [fp, #16]
   309ec:	b	309f8 <flatcc_json_printer_clear@@Base+0xaa4>
   309f0:	mov	r8, r7
   309f4:	mov	r5, r6
   309f8:	ldr	r4, [sp, #8]
   309fc:	subs	r0, r8, r4
   30a00:	ldr	r6, [sp, #4]
   30a04:	sbcs	r0, r5, r6
   30a08:	bcs	30a48 <flatcc_json_printer_clear@@Base+0xaf4>
   30a0c:	tst	r9, #1
   30a10:	bne	30a48 <flatcc_json_printer_clear@@Base+0xaf4>
   30a14:	adds	r1, r8, r3
   30a18:	adc	r2, r5, r2
   30a1c:	mov	r0, #0
   30a20:	subs	r3, r1, r4
   30a24:	sbcs	r3, r2, r6
   30a28:	bcc	30a94 <flatcc_json_printer_clear@@Base+0xb40>
   30a2c:	subs	r3, r4, r8
   30a30:	sbc	r7, r6, r5
   30a34:	subs	r1, r1, r4
   30a38:	sbc	r2, r2, r6
   30a3c:	subs	r1, r1, r3
   30a40:	sbcs	r1, r2, r7
   30a44:	bcc	30a94 <flatcc_json_printer_clear@@Base+0xb40>
   30a48:	ldr	r0, [fp, #36]	; 0x24
   30a4c:	lsl	r0, r0, #1
   30a50:	ldr	r1, [fp, #32]
   30a54:	mov	r2, r1
   30a58:	orr	r1, r0, r1, lsr #31
   30a5c:	mov	r0, #0
   30a60:	subs	r2, r8, r2, lsl #1
   30a64:	sbcs	r1, r5, r1
   30a68:	bcc	30a94 <flatcc_json_printer_clear@@Base+0xb40>
   30a6c:	ldr	r0, [fp, #36]	; 0x24
   30a70:	lsl	r0, r0, #2
   30a74:	ldr	r1, [fp, #32]
   30a78:	orr	r0, r0, r1, lsr #30
   30a7c:	subs	r1, lr, r1, lsl #2
   30a80:	sbc	r2, ip, r0
   30a84:	mov	r0, #0
   30a88:	subs	r1, r1, r8
   30a8c:	sbcs	r1, r2, r5
   30a90:	movwcs	r0, #1
   30a94:	sub	sp, fp, #28
   30a98:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   30a9c:	push	{r4, r5, r6, r7, fp, lr}
   30aa0:	add	fp, sp, #16
   30aa4:	mov	r4, r2
   30aa8:	mov	r6, r1
   30aac:	mov	r5, r0
   30ab0:	ldr	r0, [r0, #16]
   30ab4:	ldr	r1, [r5, #20]
   30ab8:	cmp	r1, r0
   30abc:	bcc	30ad0 <flatcc_json_printer_clear@@Base+0xb7c>
   30ac0:	ldr	r2, [r5, #44]	; 0x2c
   30ac4:	mov	r0, r5
   30ac8:	mov	r1, #0
   30acc:	blx	r2
   30ad0:	ldr	r1, [r5, #16]
   30ad4:	ldr	r0, [r5, #20]
   30ad8:	sub	r7, r1, r0
   30adc:	cmp	r7, r4
   30ae0:	bcs	30b28 <flatcc_json_printer_clear@@Base+0xbd4>
   30ae4:	mov	r1, r6
   30ae8:	mov	r2, r7
   30aec:	bl	14e5c <memcpy@plt>
   30af0:	ldr	r0, [r5, #20]
   30af4:	ldr	r2, [r5, #44]	; 0x2c
   30af8:	add	r0, r0, r7
   30afc:	str	r0, [r5, #20]
   30b00:	mov	r0, r5
   30b04:	mov	r1, #0
   30b08:	blx	r2
   30b0c:	sub	r4, r4, r7
   30b10:	add	r6, r6, r7
   30b14:	ldr	r1, [r5, #16]
   30b18:	ldr	r0, [r5, #20]
   30b1c:	sub	r7, r1, r0
   30b20:	cmp	r4, r7
   30b24:	bhi	30ae4 <flatcc_json_printer_clear@@Base+0xb90>
   30b28:	mov	r1, r6
   30b2c:	mov	r2, r4
   30b30:	bl	14e5c <memcpy@plt>
   30b34:	ldr	r0, [r5, #20]
   30b38:	add	r0, r0, r4
   30b3c:	str	r0, [r5, #20]
   30b40:	pop	{r4, r5, r6, r7, fp, pc}
   30b44:	push	{r4, r5, r6, sl, fp, lr}
   30b48:	add	fp, sp, #16
   30b4c:	mov	r5, r1
   30b50:	mov	r4, r0
   30b54:	ldr	r0, [r0, #16]
   30b58:	ldr	r1, [r4, #20]
   30b5c:	cmp	r1, r0
   30b60:	bcc	30b74 <flatcc_json_printer_clear@@Base+0xc20>
   30b64:	ldr	r2, [r4, #44]	; 0x2c
   30b68:	mov	r0, r4
   30b6c:	mov	r1, #0
   30b70:	blx	r2
   30b74:	ldr	r1, [r4, #16]
   30b78:	ldr	r0, [r4, #20]
   30b7c:	sub	r6, r1, r0
   30b80:	cmp	r6, r5
   30b84:	bcs	30bc8 <flatcc_json_printer_clear@@Base+0xc74>
   30b88:	mov	r1, #32
   30b8c:	mov	r2, r6
   30b90:	bl	14eec <memset@plt>
   30b94:	ldr	r0, [r4, #20]
   30b98:	ldr	r2, [r4, #44]	; 0x2c
   30b9c:	add	r0, r0, r6
   30ba0:	str	r0, [r4, #20]
   30ba4:	mov	r0, r4
   30ba8:	mov	r1, #0
   30bac:	blx	r2
   30bb0:	sub	r5, r5, r6
   30bb4:	ldr	r1, [r4, #16]
   30bb8:	ldr	r0, [r4, #20]
   30bbc:	sub	r6, r1, r0
   30bc0:	cmp	r5, r6
   30bc4:	bhi	30b88 <flatcc_json_printer_clear@@Base+0xc34>
   30bc8:	mov	r1, #32
   30bcc:	mov	r2, r5
   30bd0:	bl	14eec <memset@plt>
   30bd4:	ldr	r0, [r4, #20]
   30bd8:	add	r0, r0, r5
   30bdc:	str	r0, [r4, #20]
   30be0:	pop	{r4, r5, r6, sl, fp, pc}
   30be4:	add	r0, r0, r1
   30be8:	b	30bec <flatcc_json_printer_clear@@Base+0xc98>
   30bec:	ldrh	r0, [r0]
   30bf0:	b	30bf4 <flatcc_json_printer_clear@@Base+0xca0>
   30bf4:	bx	lr
   30bf8:	mov	r2, r0
   30bfc:	lsl	r0, r0, #2
   30c00:	movw	ip, #43691	; 0xaaab
   30c04:	movt	ip, #43690	; 0xaaaa
   30c08:	umull	r0, r3, r0, ip
   30c0c:	mov	r0, #3
   30c10:	add	r0, r0, r3, lsr #1
   30c14:	bic	r0, r0, #3
   30c18:	tst	r1, #128	; 0x80
   30c1c:	bxne	lr
   30c20:	umull	r1, r3, r2, ip
   30c24:	lsr	r1, r3, #1
   30c28:	add	r1, r1, r1, lsl #1
   30c2c:	sub	r1, r2, r1
   30c30:	cmp	r1, #1
   30c34:	beq	30c48 <flatcc_json_printer_clear@@Base+0xcf4>
   30c38:	cmp	r1, #2
   30c3c:	subeq	r0, r0, #1
   30c40:	bxeq	lr
   30c44:	bx	lr
   30c48:	sub	r0, r0, #2
   30c4c:	bx	lr
   30c50:	push	{r4, r5, fp, lr}
   30c54:	add	fp, sp, #8
   30c58:	cmp	r2, #0
   30c5c:	beq	30d94 <flatcc_json_printer_clear@@Base+0xe40>
   30c60:	bic	ip, r3, #224	; 0xe0
   30c64:	ldr	lr, [r2]
   30c68:	cmp	ip, #0
   30c6c:	beq	30c8c <flatcc_json_printer_clear@@Base+0xd38>
   30c70:	cmp	ip, #1
   30c74:	bne	30d88 <flatcc_json_printer_clear@@Base+0xe34>
   30c78:	movw	ip, #29618	; 0x73b2
   30c7c:	movt	ip, #3
   30c80:	cmp	lr, #3
   30c84:	bcs	30c9c <flatcc_json_printer_clear@@Base+0xd48>
   30c88:	b	30cfc <flatcc_json_printer_clear@@Base+0xda8>
   30c8c:	movw	ip, #29553	; 0x7371
   30c90:	movt	ip, #3
   30c94:	cmp	lr, #3
   30c98:	bcc	30cfc <flatcc_json_printer_clear@@Base+0xda8>
   30c9c:	ldrb	r4, [r1]
   30ca0:	ldrb	r4, [ip, r4, lsr #2]
   30ca4:	strb	r4, [r0]
   30ca8:	ldrb	r4, [r1]
   30cac:	ldrb	r5, [r1, #1]
   30cb0:	lsr	r5, r5, #4
   30cb4:	bfi	r5, r4, #4, #2
   30cb8:	ldrb	r4, [ip, r5]
   30cbc:	strb	r4, [r0, #1]
   30cc0:	ldrb	r4, [r1, #1]
   30cc4:	ldrb	r5, [r1, #2]
   30cc8:	lsr	r5, r5, #6
   30ccc:	bfi	r5, r4, #2, #4
   30cd0:	ldrb	r4, [ip, r5]
   30cd4:	strb	r4, [r0, #2]
   30cd8:	ldrb	r4, [r1, #2]
   30cdc:	and	r4, r4, #63	; 0x3f
   30ce0:	ldrb	r4, [ip, r4]
   30ce4:	strb	r4, [r0, #3]
   30ce8:	add	r0, r0, #4
   30cec:	add	r1, r1, #3
   30cf0:	sub	lr, lr, #3
   30cf4:	cmp	lr, #2
   30cf8:	bhi	30c9c <flatcc_json_printer_clear@@Base+0xd48>
   30cfc:	and	r3, r3, #128	; 0x80
   30d00:	cmp	lr, #1
   30d04:	beq	30d54 <flatcc_json_printer_clear@@Base+0xe00>
   30d08:	cmp	lr, #2
   30d0c:	bne	30d7c <flatcc_json_printer_clear@@Base+0xe28>
   30d10:	ldrb	r5, [r1]
   30d14:	ldrb	r5, [ip, r5, lsr #2]
   30d18:	strb	r5, [r0]
   30d1c:	ldrb	r5, [r1]
   30d20:	ldrb	r4, [r1, #1]
   30d24:	lsr	r4, r4, #4
   30d28:	bfi	r4, r5, #4, #2
   30d2c:	ldrb	r5, [ip, r4]
   30d30:	strb	r5, [r0, #1]
   30d34:	ldrb	r1, [r1, #1]
   30d38:	and	r1, r1, #15
   30d3c:	ldrb	r1, [ip, r1, lsl #2]
   30d40:	strb	r1, [r0, #2]
   30d44:	cmp	r3, #0
   30d48:	movne	r1, #61	; 0x3d
   30d4c:	strbne	r1, [r0, #3]
   30d50:	b	30d7c <flatcc_json_printer_clear@@Base+0xe28>
   30d54:	ldrb	r5, [r1]
   30d58:	ldrb	r5, [ip, r5, lsr #2]
   30d5c:	strb	r5, [r0]
   30d60:	ldrb	r1, [r1]
   30d64:	and	r1, r1, #3
   30d68:	ldrb	r1, [ip, r1, lsl #4]
   30d6c:	strb	r1, [r0, #1]
   30d70:	cmp	r3, #0
   30d74:	movwne	r1, #15677	; 0x3d3d
   30d78:	strhne	r1, [r0, #2]
   30d7c:	mov	lr, #0
   30d80:	cmp	r2, #0
   30d84:	popeq	{r4, r5, fp, pc}
   30d88:	ldr	r0, [r2]
   30d8c:	sub	r0, r0, lr
   30d90:	str	r0, [r2]
   30d94:	pop	{r4, r5, fp, pc}
   30d98:	bx	lr
   30d9c:	bx	lr
   30da0:	bx	lr
   30da4:	bx	lr
   30da8:	bx	lr
   30dac:	bx	lr
   30db0:	bx	lr
   30db4:	bx	lr
   30db8:	bx	lr
   30dbc:	bx	lr
   30dc0:	bx	lr
   30dc4:	bx	lr
   30dc8:	bx	lr
   30dcc:	ldr	r0, [r0]
   30dd0:	b	30dd4 <flatcc_json_printer_clear@@Base+0xe80>
   30dd4:	bx	lr
   30dd8:	bx	lr
   30ddc:	ldr	r0, [r0]
   30de0:	b	30de4 <flatcc_json_printer_clear@@Base+0xe90>
   30de4:	bx	lr
   30de8:	eor	r1, r1, #-2147483648	; 0x80000000
   30dec:	b	30df4 <flatcc_json_printer_clear@@Base+0xea0>
   30df0:	eor	r3, r3, #-2147483648	; 0x80000000
   30df4:	push	{r4, r5, lr}
   30df8:	lsl	r4, r1, #1
   30dfc:	lsl	r5, r3, #1
   30e00:	teq	r4, r5
   30e04:	teqeq	r0, r2
   30e08:	orrsne	ip, r4, r0
   30e0c:	orrsne	ip, r5, r2
   30e10:	mvnsne	ip, r4, asr #21
   30e14:	mvnsne	ip, r5, asr #21
   30e18:	beq	31004 <flatcc_json_printer_clear@@Base+0x10b0>
   30e1c:	lsr	r4, r4, #21
   30e20:	rsbs	r5, r4, r5, lsr #21
   30e24:	rsblt	r5, r5, #0
   30e28:	ble	30e48 <flatcc_json_printer_clear@@Base+0xef4>
   30e2c:	add	r4, r4, r5
   30e30:	eor	r2, r0, r2
   30e34:	eor	r3, r1, r3
   30e38:	eor	r0, r2, r0
   30e3c:	eor	r1, r3, r1
   30e40:	eor	r2, r0, r2
   30e44:	eor	r3, r1, r3
   30e48:	cmp	r5, #54	; 0x36
   30e4c:	pophi	{r4, r5, pc}
   30e50:	tst	r1, #-2147483648	; 0x80000000
   30e54:	lsl	r1, r1, #12
   30e58:	mov	ip, #1048576	; 0x100000
   30e5c:	orr	r1, ip, r1, lsr #12
   30e60:	beq	30e6c <flatcc_json_printer_clear@@Base+0xf18>
   30e64:	rsbs	r0, r0, #0
   30e68:	rsc	r1, r1, #0
   30e6c:	tst	r3, #-2147483648	; 0x80000000
   30e70:	lsl	r3, r3, #12
   30e74:	orr	r3, ip, r3, lsr #12
   30e78:	beq	30e84 <flatcc_json_printer_clear@@Base+0xf30>
   30e7c:	rsbs	r2, r2, #0
   30e80:	rsc	r3, r3, #0
   30e84:	teq	r4, r5
   30e88:	beq	30fec <flatcc_json_printer_clear@@Base+0x1098>
   30e8c:	sub	r4, r4, #1
   30e90:	rsbs	lr, r5, #32
   30e94:	blt	30eb0 <flatcc_json_printer_clear@@Base+0xf5c>
   30e98:	lsl	ip, r2, lr
   30e9c:	adds	r0, r0, r2, lsr r5
   30ea0:	adc	r1, r1, #0
   30ea4:	adds	r0, r0, r3, lsl lr
   30ea8:	adcs	r1, r1, r3, asr r5
   30eac:	b	30ecc <flatcc_json_printer_clear@@Base+0xf78>
   30eb0:	sub	r5, r5, #32
   30eb4:	add	lr, lr, #32
   30eb8:	cmp	r2, #1
   30ebc:	lsl	ip, r3, lr
   30ec0:	orrcs	ip, ip, #2
   30ec4:	adds	r0, r0, r3, asr r5
   30ec8:	adcs	r1, r1, r3, asr #31
   30ecc:	and	r5, r1, #-2147483648	; 0x80000000
   30ed0:	bpl	30ee0 <flatcc_json_printer_clear@@Base+0xf8c>
   30ed4:	rsbs	ip, ip, #0
   30ed8:	rscs	r0, r0, #0
   30edc:	rsc	r1, r1, #0
   30ee0:	cmp	r1, #1048576	; 0x100000
   30ee4:	bcc	30f24 <flatcc_json_printer_clear@@Base+0xfd0>
   30ee8:	cmp	r1, #2097152	; 0x200000
   30eec:	bcc	30f0c <flatcc_json_printer_clear@@Base+0xfb8>
   30ef0:	lsrs	r1, r1, #1
   30ef4:	rrxs	r0, r0
   30ef8:	rrx	ip, ip
   30efc:	add	r4, r4, #1
   30f00:	lsl	r2, r4, #21
   30f04:	cmn	r2, #4194304	; 0x400000
   30f08:	bcs	31064 <flatcc_json_printer_clear@@Base+0x1110>
   30f0c:	cmp	ip, #-2147483648	; 0x80000000
   30f10:	lsrseq	ip, r0, #1
   30f14:	adcs	r0, r0, #0
   30f18:	adc	r1, r1, r4, lsl #20
   30f1c:	orr	r1, r1, r5
   30f20:	pop	{r4, r5, pc}
   30f24:	lsls	ip, ip, #1
   30f28:	adcs	r0, r0, r0
   30f2c:	adc	r1, r1, r1
   30f30:	tst	r1, #1048576	; 0x100000
   30f34:	sub	r4, r4, #1
   30f38:	bne	30f0c <flatcc_json_printer_clear@@Base+0xfb8>
   30f3c:	teq	r1, #0
   30f40:	moveq	r1, r0
   30f44:	moveq	r0, #0
   30f48:	clz	r3, r1
   30f4c:	addeq	r3, r3, #32
   30f50:	sub	r3, r3, #11
   30f54:	subs	r2, r3, #32
   30f58:	bge	30f7c <flatcc_json_printer_clear@@Base+0x1028>
   30f5c:	adds	r2, r2, #12
   30f60:	ble	30f78 <flatcc_json_printer_clear@@Base+0x1024>
   30f64:	add	ip, r2, #20
   30f68:	rsb	r2, r2, #12
   30f6c:	lsl	r0, r1, ip
   30f70:	lsr	r1, r1, r2
   30f74:	b	30f8c <flatcc_json_printer_clear@@Base+0x1038>
   30f78:	add	r2, r2, #20
   30f7c:	rsble	ip, r2, #32
   30f80:	lsl	r1, r1, r2
   30f84:	orrle	r1, r1, r0, lsr ip
   30f88:	lslle	r0, r0, r2
   30f8c:	subs	r4, r4, r3
   30f90:	addge	r1, r1, r4, lsl #20
   30f94:	orrge	r1, r1, r5
   30f98:	popge	{r4, r5, pc}
   30f9c:	mvn	r4, r4
   30fa0:	subs	r4, r4, #31
   30fa4:	bge	30fe0 <flatcc_json_printer_clear@@Base+0x108c>
   30fa8:	adds	r4, r4, #12
   30fac:	bgt	30fc8 <flatcc_json_printer_clear@@Base+0x1074>
   30fb0:	add	r4, r4, #20
   30fb4:	rsb	r2, r4, #32
   30fb8:	lsr	r0, r0, r4
   30fbc:	orr	r0, r0, r1, lsl r2
   30fc0:	orr	r1, r5, r1, lsr r4
   30fc4:	pop	{r4, r5, pc}
   30fc8:	rsb	r4, r4, #12
   30fcc:	rsb	r2, r4, #32
   30fd0:	lsr	r0, r0, r2
   30fd4:	orr	r0, r0, r1, lsl r4
   30fd8:	mov	r1, r5
   30fdc:	pop	{r4, r5, pc}
   30fe0:	lsr	r0, r1, r4
   30fe4:	mov	r1, r5
   30fe8:	pop	{r4, r5, pc}
   30fec:	teq	r4, #0
   30ff0:	eor	r3, r3, #1048576	; 0x100000
   30ff4:	eoreq	r1, r1, #1048576	; 0x100000
   30ff8:	addeq	r4, r4, #1
   30ffc:	subne	r5, r5, #1
   31000:	b	30e8c <flatcc_json_printer_clear@@Base+0xf38>
   31004:	mvns	ip, r4, asr #21
   31008:	mvnsne	ip, r5, asr #21
   3100c:	beq	31074 <flatcc_json_printer_clear@@Base+0x1120>
   31010:	teq	r4, r5
   31014:	teqeq	r0, r2
   31018:	beq	3102c <flatcc_json_printer_clear@@Base+0x10d8>
   3101c:	orrs	ip, r4, r0
   31020:	moveq	r1, r3
   31024:	moveq	r0, r2
   31028:	pop	{r4, r5, pc}
   3102c:	teq	r1, r3
   31030:	movne	r1, #0
   31034:	movne	r0, #0
   31038:	popne	{r4, r5, pc}
   3103c:	lsrs	ip, r4, #21
   31040:	bne	31054 <flatcc_json_printer_clear@@Base+0x1100>
   31044:	lsls	r0, r0, #1
   31048:	adcs	r1, r1, r1
   3104c:	orrcs	r1, r1, #-2147483648	; 0x80000000
   31050:	pop	{r4, r5, pc}
   31054:	adds	r4, r4, #4194304	; 0x400000
   31058:	addcc	r1, r1, #1048576	; 0x100000
   3105c:	popcc	{r4, r5, pc}
   31060:	and	r5, r1, #-2147483648	; 0x80000000
   31064:	orr	r1, r5, #2130706432	; 0x7f000000
   31068:	orr	r1, r1, #15728640	; 0xf00000
   3106c:	mov	r0, #0
   31070:	pop	{r4, r5, pc}
   31074:	mvns	ip, r4, asr #21
   31078:	movne	r1, r3
   3107c:	movne	r0, r2
   31080:	mvnseq	ip, r5, asr #21
   31084:	movne	r3, r1
   31088:	movne	r2, r0
   3108c:	orrs	r4, r0, r1, lsl #12
   31090:	orrseq	r5, r2, r3, lsl #12
   31094:	teqeq	r1, r3
   31098:	orrne	r1, r1, #524288	; 0x80000
   3109c:	pop	{r4, r5, pc}
   310a0:	teq	r0, #0
   310a4:	moveq	r1, #0
   310a8:	bxeq	lr
   310ac:	push	{r4, r5, lr}
   310b0:	mov	r4, #1024	; 0x400
   310b4:	add	r4, r4, #50	; 0x32
   310b8:	mov	r5, #0
   310bc:	mov	r1, #0
   310c0:	b	30f3c <flatcc_json_printer_clear@@Base+0xfe8>
   310c4:	teq	r0, #0
   310c8:	moveq	r1, #0
   310cc:	bxeq	lr
   310d0:	push	{r4, r5, lr}
   310d4:	mov	r4, #1024	; 0x400
   310d8:	add	r4, r4, #50	; 0x32
   310dc:	ands	r5, r0, #-2147483648	; 0x80000000
   310e0:	rsbmi	r0, r0, #0
   310e4:	mov	r1, #0
   310e8:	b	30f3c <flatcc_json_printer_clear@@Base+0xfe8>
   310ec:	lsls	r2, r0, #1
   310f0:	asr	r1, r2, #3
   310f4:	rrx	r1, r1
   310f8:	lsl	r0, r2, #28
   310fc:	andsne	r3, r2, #-16777216	; 0xff000000
   31100:	teqne	r3, #-16777216	; 0xff000000
   31104:	eorne	r1, r1, #939524096	; 0x38000000
   31108:	bxne	lr
   3110c:	bics	r2, r2, #-16777216	; 0xff000000
   31110:	bxeq	lr
   31114:	teq	r3, #-16777216	; 0xff000000
   31118:	orreq	r1, r1, #524288	; 0x80000
   3111c:	bxeq	lr
   31120:	push	{r4, r5, lr}
   31124:	mov	r4, #896	; 0x380
   31128:	and	r5, r1, #-2147483648	; 0x80000000
   3112c:	bic	r1, r1, #-2147483648	; 0x80000000
   31130:	b	30f3c <flatcc_json_printer_clear@@Base+0xfe8>
   31134:	orrs	r2, r0, r1
   31138:	bxeq	lr
   3113c:	push	{r4, r5, lr}
   31140:	mov	r5, #0
   31144:	b	31164 <flatcc_json_printer_clear@@Base+0x1210>
   31148:	orrs	r2, r0, r1
   3114c:	bxeq	lr
   31150:	push	{r4, r5, lr}
   31154:	ands	r5, r1, #-2147483648	; 0x80000000
   31158:	bpl	31164 <flatcc_json_printer_clear@@Base+0x1210>
   3115c:	rsbs	r0, r0, #0
   31160:	rsc	r1, r1, #0
   31164:	mov	r4, #1024	; 0x400
   31168:	add	r4, r4, #50	; 0x32
   3116c:	lsrs	ip, r1, #22
   31170:	beq	30ee0 <flatcc_json_printer_clear@@Base+0xf8c>
   31174:	mov	r2, #3
   31178:	lsrs	ip, ip, #3
   3117c:	addne	r2, r2, #3
   31180:	lsrs	ip, ip, #3
   31184:	addne	r2, r2, #3
   31188:	add	r2, r2, ip, lsr #3
   3118c:	rsb	r3, r2, #32
   31190:	lsl	ip, r0, r3
   31194:	lsr	r0, r0, r2
   31198:	orr	r0, r0, r1, lsl r3
   3119c:	lsr	r1, r1, r2
   311a0:	add	r4, r4, r2
   311a4:	b	30ee0 <flatcc_json_printer_clear@@Base+0xf8c>
   311a8:	eor	r0, r0, #-2147483648	; 0x80000000
   311ac:	b	311b4 <flatcc_json_printer_clear@@Base+0x1260>
   311b0:	eor	r1, r1, #-2147483648	; 0x80000000
   311b4:	lsls	r2, r0, #1
   311b8:	lslsne	r3, r1, #1
   311bc:	teqne	r2, r3
   311c0:	mvnsne	ip, r2, asr #24
   311c4:	mvnsne	ip, r3, asr #24
   311c8:	beq	312c0 <flatcc_json_printer_clear@@Base+0x136c>
   311cc:	lsr	r2, r2, #24
   311d0:	rsbs	r3, r2, r3, lsr #24
   311d4:	addgt	r2, r2, r3
   311d8:	eorgt	r1, r0, r1
   311dc:	eorgt	r0, r1, r0
   311e0:	eorgt	r1, r0, r1
   311e4:	rsblt	r3, r3, #0
   311e8:	cmp	r3, #25
   311ec:	bxhi	lr
   311f0:	tst	r0, #-2147483648	; 0x80000000
   311f4:	orr	r0, r0, #8388608	; 0x800000
   311f8:	bic	r0, r0, #-16777216	; 0xff000000
   311fc:	rsbne	r0, r0, #0
   31200:	tst	r1, #-2147483648	; 0x80000000
   31204:	orr	r1, r1, #8388608	; 0x800000
   31208:	bic	r1, r1, #-16777216	; 0xff000000
   3120c:	rsbne	r1, r1, #0
   31210:	teq	r2, r3
   31214:	beq	312a8 <flatcc_json_printer_clear@@Base+0x1354>
   31218:	sub	r2, r2, #1
   3121c:	adds	r0, r0, r1, asr r3
   31220:	rsb	r3, r3, #32
   31224:	lsl	r1, r1, r3
   31228:	and	r3, r0, #-2147483648	; 0x80000000
   3122c:	bpl	31238 <flatcc_json_printer_clear@@Base+0x12e4>
   31230:	rsbs	r1, r1, #0
   31234:	rsc	r0, r0, #0
   31238:	cmp	r0, #8388608	; 0x800000
   3123c:	bcc	31270 <flatcc_json_printer_clear@@Base+0x131c>
   31240:	cmp	r0, #16777216	; 0x1000000
   31244:	bcc	3125c <flatcc_json_printer_clear@@Base+0x1308>
   31248:	lsrs	r0, r0, #1
   3124c:	rrx	r1, r1
   31250:	add	r2, r2, #1
   31254:	cmp	r2, #254	; 0xfe
   31258:	bcs	31314 <flatcc_json_printer_clear@@Base+0x13c0>
   3125c:	cmp	r1, #-2147483648	; 0x80000000
   31260:	adc	r0, r0, r2, lsl #23
   31264:	biceq	r0, r0, #1
   31268:	orr	r0, r0, r3
   3126c:	bx	lr
   31270:	lsls	r1, r1, #1
   31274:	adc	r0, r0, r0
   31278:	tst	r0, #8388608	; 0x800000
   3127c:	sub	r2, r2, #1
   31280:	bne	3125c <flatcc_json_printer_clear@@Base+0x1308>
   31284:	clz	ip, r0
   31288:	sub	ip, ip, #8
   3128c:	subs	r2, r2, ip
   31290:	lsl	r0, r0, ip
   31294:	addge	r0, r0, r2, lsl #23
   31298:	rsblt	r2, r2, #0
   3129c:	orrge	r0, r0, r3
   312a0:	orrlt	r0, r3, r0, lsr r2
   312a4:	bx	lr
   312a8:	teq	r2, #0
   312ac:	eor	r1, r1, #8388608	; 0x800000
   312b0:	eoreq	r0, r0, #8388608	; 0x800000
   312b4:	addeq	r2, r2, #1
   312b8:	subne	r3, r3, #1
   312bc:	b	31218 <flatcc_json_printer_clear@@Base+0x12c4>
   312c0:	lsl	r3, r1, #1
   312c4:	mvns	ip, r2, asr #24
   312c8:	mvnsne	ip, r3, asr #24
   312cc:	beq	31320 <flatcc_json_printer_clear@@Base+0x13cc>
   312d0:	teq	r2, r3
   312d4:	beq	312e4 <flatcc_json_printer_clear@@Base+0x1390>
   312d8:	teq	r2, #0
   312dc:	moveq	r0, r1
   312e0:	bx	lr
   312e4:	teq	r0, r1
   312e8:	movne	r0, #0
   312ec:	bxne	lr
   312f0:	tst	r2, #-16777216	; 0xff000000
   312f4:	bne	31304 <flatcc_json_printer_clear@@Base+0x13b0>
   312f8:	lsls	r0, r0, #1
   312fc:	orrcs	r0, r0, #-2147483648	; 0x80000000
   31300:	bx	lr
   31304:	adds	r2, r2, #33554432	; 0x2000000
   31308:	addcc	r0, r0, #8388608	; 0x800000
   3130c:	bxcc	lr
   31310:	and	r3, r0, #-2147483648	; 0x80000000
   31314:	orr	r0, r3, #2130706432	; 0x7f000000
   31318:	orr	r0, r0, #8388608	; 0x800000
   3131c:	bx	lr
   31320:	mvns	r2, r2, asr #24
   31324:	movne	r0, r1
   31328:	mvnseq	r3, r3, asr #24
   3132c:	movne	r1, r0
   31330:	lsls	r2, r0, #9
   31334:	lslseq	r3, r1, #9
   31338:	teqeq	r0, r1
   3133c:	orrne	r0, r0, #4194304	; 0x400000
   31340:	bx	lr
   31344:	mov	r3, #0
   31348:	b	31354 <flatcc_json_printer_clear@@Base+0x1400>
   3134c:	ands	r3, r0, #-2147483648	; 0x80000000
   31350:	rsbmi	r0, r0, #0
   31354:	movs	ip, r0
   31358:	bxeq	lr
   3135c:	orr	r3, r3, #1258291200	; 0x4b000000
   31360:	mov	r1, r0
   31364:	mov	r0, #0
   31368:	b	313ac <flatcc_json_printer_clear@@Base+0x1458>
   3136c:	orrs	r2, r0, r1
   31370:	bxeq	lr
   31374:	mov	r3, #0
   31378:	b	31394 <flatcc_json_printer_clear@@Base+0x1440>
   3137c:	orrs	r2, r0, r1
   31380:	bxeq	lr
   31384:	ands	r3, r1, #-2147483648	; 0x80000000
   31388:	bpl	31394 <flatcc_json_printer_clear@@Base+0x1440>
   3138c:	rsbs	r0, r0, #0
   31390:	rsc	r1, r1, #0
   31394:	movs	ip, r1
   31398:	moveq	ip, r0
   3139c:	moveq	r1, r0
   313a0:	moveq	r0, #0
   313a4:	orr	r3, r3, #1526726656	; 0x5b000000
   313a8:	subeq	r3, r3, #268435456	; 0x10000000
   313ac:	sub	r3, r3, #8388608	; 0x800000
   313b0:	clz	r2, ip
   313b4:	subs	r2, r2, #8
   313b8:	sub	r3, r3, r2, lsl #23
   313bc:	blt	313dc <flatcc_json_printer_clear@@Base+0x1488>
   313c0:	add	r3, r3, r1, lsl r2
   313c4:	lsl	ip, r0, r2
   313c8:	rsb	r2, r2, #32
   313cc:	cmp	ip, #-2147483648	; 0x80000000
   313d0:	adc	r0, r3, r0, lsr r2
   313d4:	biceq	r0, r0, #1
   313d8:	bx	lr
   313dc:	add	r2, r2, #32
   313e0:	lsl	ip, r1, r2
   313e4:	rsb	r2, r2, #32
   313e8:	orrs	r0, r0, ip, lsl #1
   313ec:	adc	r0, r3, r1, lsr r2
   313f0:	biceq	r0, r0, ip, lsr #31
   313f4:	bx	lr
   313f8:	cmp	r3, #0
   313fc:	cmpeq	r2, #0
   31400:	bne	31418 <flatcc_json_printer_clear@@Base+0x14c4>
   31404:	cmp	r1, #0
   31408:	cmpeq	r0, #0
   3140c:	mvnne	r1, #0
   31410:	mvnne	r0, #0
   31414:	b	31434 <flatcc_json_printer_clear@@Base+0x14e0>
   31418:	sub	sp, sp, #8
   3141c:	push	{sp, lr}
   31420:	bl	31444 <flatcc_json_printer_clear@@Base+0x14f0>
   31424:	ldr	lr, [sp, #4]
   31428:	add	sp, sp, #8
   3142c:	pop	{r2, r3}
   31430:	bx	lr
   31434:	push	{r1, lr}
   31438:	mov	r0, #8
   3143c:	bl	14e2c <raise@plt>
   31440:	pop	{r1, pc}
   31444:	cmp	r1, r3
   31448:	cmpeq	r0, r2
   3144c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   31450:	mov	r4, r0
   31454:	movcc	r0, #0
   31458:	mov	r5, r1
   3145c:	ldr	lr, [sp, #36]	; 0x24
   31460:	movcc	r1, r0
   31464:	bcc	31560 <flatcc_json_printer_clear@@Base+0x160c>
   31468:	cmp	r3, #0
   3146c:	clzeq	ip, r2
   31470:	clzne	ip, r3
   31474:	addeq	ip, ip, #32
   31478:	cmp	r5, #0
   3147c:	clzeq	r1, r4
   31480:	addeq	r1, r1, #32
   31484:	clzne	r1, r5
   31488:	sub	ip, ip, r1
   3148c:	sub	sl, ip, #32
   31490:	lsl	r9, r3, ip
   31494:	rsb	fp, ip, #32
   31498:	orr	r9, r9, r2, lsl sl
   3149c:	orr	r9, r9, r2, lsr fp
   314a0:	lsl	r8, r2, ip
   314a4:	cmp	r5, r9
   314a8:	cmpeq	r4, r8
   314ac:	movcc	r0, #0
   314b0:	movcc	r1, r0
   314b4:	bcc	314d0 <flatcc_json_printer_clear@@Base+0x157c>
   314b8:	mov	r0, #1
   314bc:	subs	r4, r4, r8
   314c0:	lsl	r1, r0, sl
   314c4:	orr	r1, r1, r0, lsr fp
   314c8:	lsl	r0, r0, ip
   314cc:	sbc	r5, r5, r9
   314d0:	cmp	ip, #0
   314d4:	beq	31560 <flatcc_json_printer_clear@@Base+0x160c>
   314d8:	lsr	r6, r8, #1
   314dc:	orr	r6, r6, r9, lsl #31
   314e0:	lsr	r7, r9, #1
   314e4:	mov	r2, ip
   314e8:	b	3150c <flatcc_json_printer_clear@@Base+0x15b8>
   314ec:	subs	r3, r4, r6
   314f0:	sbc	r8, r5, r7
   314f4:	adds	r3, r3, r3
   314f8:	adc	r8, r8, r8
   314fc:	adds	r4, r3, #1
   31500:	adc	r5, r8, #0
   31504:	subs	r2, r2, #1
   31508:	beq	31528 <flatcc_json_printer_clear@@Base+0x15d4>
   3150c:	cmp	r5, r7
   31510:	cmpeq	r4, r6
   31514:	bcs	314ec <flatcc_json_printer_clear@@Base+0x1598>
   31518:	adds	r4, r4, r4
   3151c:	adc	r5, r5, r5
   31520:	subs	r2, r2, #1
   31524:	bne	3150c <flatcc_json_printer_clear@@Base+0x15b8>
   31528:	lsr	r3, r4, ip
   3152c:	orr	r3, r3, r5, lsl fp
   31530:	lsr	r2, r5, ip
   31534:	orr	r3, r3, r5, lsr sl
   31538:	adds	r0, r0, r4
   3153c:	mov	r4, r3
   31540:	lsl	r3, r2, ip
   31544:	orr	r3, r3, r4, lsl sl
   31548:	lsl	ip, r4, ip
   3154c:	orr	r3, r3, r4, lsr fp
   31550:	adc	r1, r1, r5
   31554:	subs	r0, r0, ip
   31558:	mov	r5, r2
   3155c:	sbc	r1, r1, r3
   31560:	cmp	lr, #0
   31564:	strdne	r4, [lr]
   31568:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}

0003156c <__libc_csu_init@@Base>:
   3156c:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   31570:	mov	r7, r0
   31574:	ldr	r6, [pc, #72]	; 315c4 <__libc_csu_init@@Base+0x58>
   31578:	ldr	r5, [pc, #72]	; 315c8 <__libc_csu_init@@Base+0x5c>
   3157c:	add	r6, pc, r6
   31580:	add	r5, pc, r5
   31584:	sub	r6, r6, r5
   31588:	mov	r8, r1
   3158c:	mov	r9, r2
   31590:	bl	14e0c <raise@plt-0x20>
   31594:	asrs	r6, r6, #2
   31598:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   3159c:	mov	r4, #0
   315a0:	add	r4, r4, #1
   315a4:	ldr	r3, [r5], #4
   315a8:	mov	r2, r9
   315ac:	mov	r1, r8
   315b0:	mov	r0, r7
   315b4:	blx	r3
   315b8:	cmp	r6, r4
   315bc:	bne	315a0 <__libc_csu_init@@Base+0x34>
   315c0:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   315c4:	andeq	r6, r1, r8, lsl #19
   315c8:	andeq	r6, r1, r0, lsl #19

000315cc <__libc_csu_fini@@Base>:
   315cc:	bx	lr

Disassembly of section .fini:

000315d0 <.fini>:
   315d0:	push	{r3, lr}
   315d4:	pop	{r3, pc}
