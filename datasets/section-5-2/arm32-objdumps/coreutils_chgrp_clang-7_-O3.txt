
../repos/coreutils/src/chgrp:     file format elf32-littlearm


Disassembly of section .init:

0001117c <.init>:
   1117c:	push	{r3, lr}
   11180:	bl	1150c <__assert_fail@plt+0x4c>
   11184:	pop	{r3, pc}

Disassembly of section .plt:

00011188 <fstatfs64@plt-0x14>:
   11188:	push	{lr}		; (str lr, [sp, #-4]!)
   1118c:	ldr	lr, [pc, #4]	; 11198 <fstatfs64@plt-0x4>
   11190:	add	lr, pc, lr
   11194:	ldr	pc, [lr, #8]!
   11198:	andeq	fp, r1, r8, ror #28

0001119c <fstatfs64@plt>:
   1119c:	add	ip, pc, #0, 12
   111a0:	add	ip, ip, #110592	; 0x1b000
   111a4:	ldr	pc, [ip, #3688]!	; 0xe68

000111a8 <calloc@plt>:
   111a8:	add	ip, pc, #0, 12
   111ac:	add	ip, ip, #110592	; 0x1b000
   111b0:	ldr	pc, [ip, #3680]!	; 0xe60

000111b4 <endgrent@plt>:
   111b4:	add	ip, pc, #0, 12
   111b8:	add	ip, ip, #110592	; 0x1b000
   111bc:	ldr	pc, [ip, #3672]!	; 0xe58

000111c0 <fputs_unlocked@plt>:
   111c0:	add	ip, pc, #0, 12
   111c4:	add	ip, ip, #110592	; 0x1b000
   111c8:	ldr	pc, [ip, #3664]!	; 0xe50

000111cc <raise@plt>:
   111cc:	add	ip, pc, #0, 12
   111d0:	add	ip, ip, #110592	; 0x1b000
   111d4:	ldr	pc, [ip, #3656]!	; 0xe48

000111d8 <strcmp@plt>:
   111d8:	add	ip, pc, #0, 12
   111dc:	add	ip, ip, #110592	; 0x1b000
   111e0:	ldr	pc, [ip, #3648]!	; 0xe40

000111e4 <getpwuid@plt>:
   111e4:	add	ip, pc, #0, 12
   111e8:	add	ip, ip, #110592	; 0x1b000
   111ec:	ldr	pc, [ip, #3640]!	; 0xe38

000111f0 <fflush@plt>:
   111f0:	add	ip, pc, #0, 12
   111f4:	add	ip, ip, #110592	; 0x1b000
   111f8:	ldr	pc, [ip, #3632]!	; 0xe30

000111fc <memmove@plt>:
   111fc:	add	ip, pc, #0, 12
   11200:	add	ip, ip, #110592	; 0x1b000
   11204:	ldr	pc, [ip, #3624]!	; 0xe28

00011208 <free@plt>:
   11208:	add	ip, pc, #0, 12
   1120c:	add	ip, ip, #110592	; 0x1b000
   11210:	ldr	pc, [ip, #3616]!	; 0xe20

00011214 <_exit@plt>:
   11214:	add	ip, pc, #0, 12
   11218:	add	ip, ip, #110592	; 0x1b000
   1121c:	ldr	pc, [ip, #3608]!	; 0xe18

00011220 <memcpy@plt>:
   11220:	add	ip, pc, #0, 12
   11224:	add	ip, ip, #110592	; 0x1b000
   11228:	ldr	pc, [ip, #3600]!	; 0xe10

0001122c <__strtoull_internal@plt>:
   1122c:	add	ip, pc, #0, 12
   11230:	add	ip, ip, #110592	; 0x1b000
   11234:	ldr	pc, [ip, #3592]!	; 0xe08

00011238 <mbsinit@plt>:
   11238:	add	ip, pc, #0, 12
   1123c:	add	ip, ip, #110592	; 0x1b000
   11240:	ldr	pc, [ip, #3584]!	; 0xe00

00011244 <memcmp@plt>:
   11244:	add	ip, pc, #0, 12
   11248:	add	ip, ip, #110592	; 0x1b000
   1124c:	ldr	pc, [ip, #3576]!	; 0xdf8

00011250 <stpcpy@plt>:
   11250:	add	ip, pc, #0, 12
   11254:	add	ip, ip, #110592	; 0x1b000
   11258:	ldr	pc, [ip, #3568]!	; 0xdf0

0001125c <dcgettext@plt>:
   1125c:	add	ip, pc, #0, 12
   11260:	add	ip, ip, #110592	; 0x1b000
   11264:	ldr	pc, [ip, #3560]!	; 0xde8

00011268 <realloc@plt>:
   11268:	add	ip, pc, #0, 12
   1126c:	add	ip, ip, #110592	; 0x1b000
   11270:	ldr	pc, [ip, #3552]!	; 0xde0

00011274 <textdomain@plt>:
   11274:	add	ip, pc, #0, 12
   11278:	add	ip, ip, #110592	; 0x1b000
   1127c:	ldr	pc, [ip, #3544]!	; 0xdd8

00011280 <__fxstatat64@plt>:
   11280:	add	ip, pc, #0, 12
   11284:	add	ip, ip, #110592	; 0x1b000
   11288:	ldr	pc, [ip, #3536]!	; 0xdd0

0001128c <iswprint@plt>:
   1128c:	add	ip, pc, #0, 12
   11290:	add	ip, ip, #110592	; 0x1b000
   11294:	ldr	pc, [ip, #3528]!	; 0xdc8

00011298 <__fxstat64@plt>:
   11298:	add	ip, pc, #0, 12
   1129c:	add	ip, ip, #110592	; 0x1b000
   112a0:	ldr	pc, [ip, #3520]!	; 0xdc0

000112a4 <fwrite@plt>:
   112a4:	add	ip, pc, #0, 12
   112a8:	add	ip, ip, #110592	; 0x1b000
   112ac:	ldr	pc, [ip, #3512]!	; 0xdb8

000112b0 <lseek64@plt>:
   112b0:	add	ip, pc, #0, 12
   112b4:	add	ip, ip, #110592	; 0x1b000
   112b8:	ldr	pc, [ip, #3504]!	; 0xdb0

000112bc <__ctype_get_mb_cur_max@plt>:
   112bc:	add	ip, pc, #0, 12
   112c0:	add	ip, ip, #110592	; 0x1b000
   112c4:	ldr	pc, [ip, #3496]!	; 0xda8

000112c8 <__fpending@plt>:
   112c8:	add	ip, pc, #0, 12
   112cc:	add	ip, ip, #110592	; 0x1b000
   112d0:	ldr	pc, [ip, #3488]!	; 0xda0

000112d4 <mbrtowc@plt>:
   112d4:	add	ip, pc, #0, 12
   112d8:	add	ip, ip, #110592	; 0x1b000
   112dc:	ldr	pc, [ip, #3480]!	; 0xd98

000112e0 <error@plt>:
   112e0:	add	ip, pc, #0, 12
   112e4:	add	ip, ip, #110592	; 0x1b000
   112e8:	ldr	pc, [ip, #3472]!	; 0xd90

000112ec <open64@plt>:
   112ec:	add	ip, pc, #0, 12
   112f0:	add	ip, ip, #110592	; 0x1b000
   112f4:	ldr	pc, [ip, #3464]!	; 0xd88

000112f8 <malloc@plt>:
   112f8:	add	ip, pc, #0, 12
   112fc:	add	ip, ip, #110592	; 0x1b000
   11300:	ldr	pc, [ip, #3456]!	; 0xd80

00011304 <__libc_start_main@plt>:
   11304:	add	ip, pc, #0, 12
   11308:	add	ip, ip, #110592	; 0x1b000
   1130c:	ldr	pc, [ip, #3448]!	; 0xd78

00011310 <__freading@plt>:
   11310:	add	ip, pc, #0, 12
   11314:	add	ip, ip, #110592	; 0x1b000
   11318:	ldr	pc, [ip, #3440]!	; 0xd70

0001131c <__gmon_start__@plt>:
   1131c:	add	ip, pc, #0, 12
   11320:	add	ip, ip, #110592	; 0x1b000
   11324:	ldr	pc, [ip, #3432]!	; 0xd68

00011328 <getopt_long@plt>:
   11328:	add	ip, pc, #0, 12
   1132c:	add	ip, ip, #110592	; 0x1b000
   11330:	ldr	pc, [ip, #3424]!	; 0xd60

00011334 <__ctype_b_loc@plt>:
   11334:	add	ip, pc, #0, 12
   11338:	add	ip, ip, #110592	; 0x1b000
   1133c:	ldr	pc, [ip, #3416]!	; 0xd58

00011340 <exit@plt>:
   11340:	add	ip, pc, #0, 12
   11344:	add	ip, ip, #110592	; 0x1b000
   11348:	ldr	pc, [ip, #3408]!	; 0xd50

0001134c <strlen@plt>:
   1134c:	add	ip, pc, #0, 12
   11350:	add	ip, ip, #110592	; 0x1b000
   11354:	ldr	pc, [ip, #3400]!	; 0xd48

00011358 <strchr@plt>:
   11358:	add	ip, pc, #0, 12
   1135c:	add	ip, ip, #110592	; 0x1b000
   11360:	ldr	pc, [ip, #3392]!	; 0xd40

00011364 <openat64@plt>:
   11364:	add	ip, pc, #0, 12
   11368:	add	ip, ip, #110592	; 0x1b000
   1136c:	ldr	pc, [ip, #3384]!	; 0xd38

00011370 <fchown@plt>:
   11370:	add	ip, pc, #0, 12
   11374:	add	ip, ip, #110592	; 0x1b000
   11378:	ldr	pc, [ip, #3376]!	; 0xd30

0001137c <__errno_location@plt>:
   1137c:	add	ip, pc, #0, 12
   11380:	add	ip, ip, #110592	; 0x1b000
   11384:	ldr	pc, [ip, #3368]!	; 0xd28

00011388 <__cxa_atexit@plt>:
   11388:	add	ip, pc, #0, 12
   1138c:	add	ip, ip, #110592	; 0x1b000
   11390:	ldr	pc, [ip, #3360]!	; 0xd20

00011394 <memset@plt>:
   11394:	add	ip, pc, #0, 12
   11398:	add	ip, ip, #110592	; 0x1b000
   1139c:	ldr	pc, [ip, #3352]!	; 0xd18

000113a0 <__printf_chk@plt>:
   113a0:	add	ip, pc, #0, 12
   113a4:	add	ip, ip, #110592	; 0x1b000
   113a8:	ldr	pc, [ip, #3344]!	; 0xd10

000113ac <fileno@plt>:
   113ac:	add	ip, pc, #0, 12
   113b0:	add	ip, ip, #110592	; 0x1b000
   113b4:	ldr	pc, [ip, #3336]!	; 0xd08

000113b8 <__fprintf_chk@plt>:
   113b8:	add	ip, pc, #0, 12
   113bc:	add	ip, ip, #110592	; 0x1b000
   113c0:	ldr	pc, [ip, #3328]!	; 0xd00

000113c4 <fclose@plt>:
   113c4:	add	ip, pc, #0, 12
   113c8:	add	ip, ip, #110592	; 0x1b000
   113cc:	ldr	pc, [ip, #3320]!	; 0xcf8

000113d0 <fseeko64@plt>:
   113d0:	add	ip, pc, #0, 12
   113d4:	add	ip, ip, #110592	; 0x1b000
   113d8:	ldr	pc, [ip, #3312]!	; 0xcf0

000113dc <fcntl64@plt>:
   113dc:	add	ip, pc, #0, 12
   113e0:	add	ip, ip, #110592	; 0x1b000
   113e4:	ldr	pc, [ip, #3304]!	; 0xce8

000113e8 <setlocale@plt>:
   113e8:	add	ip, pc, #0, 12
   113ec:	add	ip, ip, #110592	; 0x1b000
   113f0:	ldr	pc, [ip, #3296]!	; 0xce0

000113f4 <strrchr@plt>:
   113f4:	add	ip, pc, #0, 12
   113f8:	add	ip, ip, #110592	; 0x1b000
   113fc:	ldr	pc, [ip, #3288]!	; 0xcd8

00011400 <nl_langinfo@plt>:
   11400:	add	ip, pc, #0, 12
   11404:	add	ip, ip, #110592	; 0x1b000
   11408:	ldr	pc, [ip, #3280]!	; 0xcd0

0001140c <readdir64@plt>:
   1140c:	add	ip, pc, #0, 12
   11410:	add	ip, ip, #110592	; 0x1b000
   11414:	ldr	pc, [ip, #3272]!	; 0xcc8

00011418 <fdopendir@plt>:
   11418:	add	ip, pc, #0, 12
   1141c:	add	ip, ip, #110592	; 0x1b000
   11420:	ldr	pc, [ip, #3264]!	; 0xcc0

00011424 <dirfd@plt>:
   11424:	add	ip, pc, #0, 12
   11428:	add	ip, ip, #110592	; 0x1b000
   1142c:	ldr	pc, [ip, #3256]!	; 0xcb8

00011430 <fchdir@plt>:
   11430:	add	ip, pc, #0, 12
   11434:	add	ip, ip, #110592	; 0x1b000
   11438:	ldr	pc, [ip, #3248]!	; 0xcb0

0001143c <qsort@plt>:
   1143c:	add	ip, pc, #0, 12
   11440:	add	ip, ip, #110592	; 0x1b000
   11444:	ldr	pc, [ip, #3240]!	; 0xca8

00011448 <fchownat@plt>:
   11448:	add	ip, pc, #0, 12
   1144c:	add	ip, ip, #110592	; 0x1b000
   11450:	ldr	pc, [ip, #3232]!	; 0xca0

00011454 <bindtextdomain@plt>:
   11454:	add	ip, pc, #0, 12
   11458:	add	ip, ip, #110592	; 0x1b000
   1145c:	ldr	pc, [ip, #3224]!	; 0xc98

00011460 <__xstat64@plt>:
   11460:	add	ip, pc, #0, 12
   11464:	add	ip, ip, #110592	; 0x1b000
   11468:	ldr	pc, [ip, #3216]!	; 0xc90

0001146c <strncmp@plt>:
   1146c:	add	ip, pc, #0, 12
   11470:	add	ip, ip, #110592	; 0x1b000
   11474:	ldr	pc, [ip, #3208]!	; 0xc88

00011478 <abort@plt>:
   11478:	add	ip, pc, #0, 12
   1147c:	add	ip, ip, #110592	; 0x1b000
   11480:	ldr	pc, [ip, #3200]!	; 0xc80

00011484 <close@plt>:
   11484:	add	ip, pc, #0, 12
   11488:	add	ip, ip, #110592	; 0x1b000
   1148c:	ldr	pc, [ip, #3192]!	; 0xc78

00011490 <__lxstat64@plt>:
   11490:	add	ip, pc, #0, 12
   11494:	add	ip, ip, #110592	; 0x1b000
   11498:	ldr	pc, [ip, #3184]!	; 0xc70

0001149c <closedir@plt>:
   1149c:	add	ip, pc, #0, 12
   114a0:	add	ip, ip, #110592	; 0x1b000
   114a4:	ldr	pc, [ip, #3176]!	; 0xc68

000114a8 <getgrgid@plt>:
   114a8:	add	ip, pc, #0, 12
   114ac:	add	ip, ip, #110592	; 0x1b000
   114b0:	ldr	pc, [ip, #3168]!	; 0xc60

000114b4 <getgrnam@plt>:
   114b4:	add	ip, pc, #0, 12
   114b8:	add	ip, ip, #110592	; 0x1b000
   114bc:	ldr	pc, [ip, #3160]!	; 0xc58

000114c0 <__assert_fail@plt>:
   114c0:	add	ip, pc, #0, 12
   114c4:	add	ip, ip, #110592	; 0x1b000
   114c8:	ldr	pc, [ip, #3152]!	; 0xc50

Disassembly of section .text:

000114d0 <.text>:
   114d0:	mov	fp, #0
   114d4:	mov	lr, #0
   114d8:	pop	{r1}		; (ldr r1, [sp], #4)
   114dc:	mov	r2, sp
   114e0:	push	{r2}		; (str r2, [sp, #-4]!)
   114e4:	push	{r0}		; (str r0, [sp, #-4]!)
   114e8:	ldr	ip, [pc, #16]	; 11500 <__assert_fail@plt+0x40>
   114ec:	push	{ip}		; (str ip, [sp, #-4]!)
   114f0:	ldr	r0, [pc, #12]	; 11504 <__assert_fail@plt+0x44>
   114f4:	ldr	r3, [pc, #12]	; 11508 <__assert_fail@plt+0x48>
   114f8:	bl	11304 <__libc_start_main@plt>
   114fc:	bl	11478 <abort@plt>
   11500:	andeq	sl, r1, r0, lsr #31
   11504:	strdeq	r1, [r1], -r4
   11508:	andeq	sl, r1, r0, asr #30
   1150c:	ldr	r3, [pc, #20]	; 11528 <__assert_fail@plt+0x68>
   11510:	ldr	r2, [pc, #20]	; 1152c <__assert_fail@plt+0x6c>
   11514:	add	r3, pc, r3
   11518:	ldr	r2, [r3, r2]
   1151c:	cmp	r2, #0
   11520:	bxeq	lr
   11524:	b	1131c <__gmon_start__@plt>
   11528:	andeq	fp, r1, r4, ror #21
   1152c:	andeq	r0, r0, ip, lsl r1
   11530:	ldr	r0, [pc, #24]	; 11550 <__assert_fail@plt+0x90>
   11534:	ldr	r3, [pc, #24]	; 11554 <__assert_fail@plt+0x94>
   11538:	cmp	r3, r0
   1153c:	bxeq	lr
   11540:	ldr	r3, [pc, #16]	; 11558 <__assert_fail@plt+0x98>
   11544:	cmp	r3, #0
   11548:	bxeq	lr
   1154c:	bx	r3
   11550:	andeq	sp, r2, r0, ror r1
   11554:	andeq	sp, r2, r0, ror r1
   11558:	andeq	r0, r0, r0
   1155c:	ldr	r0, [pc, #36]	; 11588 <__assert_fail@plt+0xc8>
   11560:	ldr	r1, [pc, #36]	; 1158c <__assert_fail@plt+0xcc>
   11564:	sub	r1, r1, r0
   11568:	asr	r1, r1, #2
   1156c:	add	r1, r1, r1, lsr #31
   11570:	asrs	r1, r1, #1
   11574:	bxeq	lr
   11578:	ldr	r3, [pc, #16]	; 11590 <__assert_fail@plt+0xd0>
   1157c:	cmp	r3, #0
   11580:	bxeq	lr
   11584:	bx	r3
   11588:	andeq	sp, r2, r0, ror r1
   1158c:	andeq	sp, r2, r0, ror r1
   11590:	andeq	r0, r0, r0
   11594:	push	{r4, lr}
   11598:	ldr	r4, [pc, #24]	; 115b8 <__assert_fail@plt+0xf8>
   1159c:	ldrb	r3, [r4]
   115a0:	cmp	r3, #0
   115a4:	popne	{r4, pc}
   115a8:	bl	11530 <__assert_fail@plt+0x70>
   115ac:	mov	r3, #1
   115b0:	strb	r3, [r4]
   115b4:	pop	{r4, pc}
   115b8:	andeq	sp, r2, ip, lsl #3
   115bc:	b	1155c <__assert_fail@plt+0x9c>
   115c0:	push	{fp, lr}
   115c4:	mov	fp, sp
   115c8:	sub	sp, sp, #56	; 0x38
   115cc:	mov	r4, r0
   115d0:	cmp	r0, #0
   115d4:	bne	118b0 <__assert_fail@plt+0x3f0>
   115d8:	movw	r1, #45051	; 0xaffb
   115dc:	mov	r0, #0
   115e0:	mov	r2, #5
   115e4:	movt	r1, #1
   115e8:	bl	1125c <dcgettext@plt>
   115ec:	movw	r5, #53680	; 0xd1b0
   115f0:	mov	r1, r0
   115f4:	mov	r0, #1
   115f8:	movt	r5, #2
   115fc:	ldr	r2, [r5]
   11600:	mov	r3, r2
   11604:	bl	113a0 <__printf_chk@plt>
   11608:	movw	r1, #45136	; 0xb050
   1160c:	mov	r0, #0
   11610:	mov	r2, #5
   11614:	movt	r1, #1
   11618:	bl	1125c <dcgettext@plt>
   1161c:	movw	r7, #53636	; 0xd184
   11620:	movt	r7, #2
   11624:	ldr	r1, [r7]
   11628:	bl	111c0 <fputs_unlocked@plt>
   1162c:	movw	r1, #45244	; 0xb0bc
   11630:	mov	r0, #0
   11634:	mov	r2, #5
   11638:	movt	r1, #1
   1163c:	bl	1125c <dcgettext@plt>
   11640:	ldr	r1, [r7]
   11644:	bl	111c0 <fputs_unlocked@plt>
   11648:	movw	r1, #45445	; 0xb185
   1164c:	mov	r0, #0
   11650:	mov	r2, #5
   11654:	movt	r1, #1
   11658:	bl	1125c <dcgettext@plt>
   1165c:	ldr	r1, [r7]
   11660:	bl	111c0 <fputs_unlocked@plt>
   11664:	movw	r1, #45676	; 0xb26c
   11668:	mov	r0, #0
   1166c:	mov	r2, #5
   11670:	movt	r1, #1
   11674:	bl	1125c <dcgettext@plt>
   11678:	ldr	r1, [r7]
   1167c:	bl	111c0 <fputs_unlocked@plt>
   11680:	movw	r1, #45795	; 0xb2e3
   11684:	mov	r0, #0
   11688:	mov	r2, #5
   1168c:	movt	r1, #1
   11690:	bl	1125c <dcgettext@plt>
   11694:	ldr	r1, [r7]
   11698:	bl	111c0 <fputs_unlocked@plt>
   1169c:	movw	r1, #45923	; 0xb363
   116a0:	mov	r0, #0
   116a4:	mov	r2, #5
   116a8:	movt	r1, #1
   116ac:	bl	1125c <dcgettext@plt>
   116b0:	ldr	r1, [r7]
   116b4:	bl	111c0 <fputs_unlocked@plt>
   116b8:	movw	r1, #46029	; 0xb3cd
   116bc:	mov	r0, #0
   116c0:	mov	r2, #5
   116c4:	movt	r1, #1
   116c8:	bl	1125c <dcgettext@plt>
   116cc:	ldr	r1, [r7]
   116d0:	bl	111c0 <fputs_unlocked@plt>
   116d4:	movw	r1, #46100	; 0xb414
   116d8:	mov	r0, #0
   116dc:	mov	r2, #5
   116e0:	movt	r1, #1
   116e4:	bl	1125c <dcgettext@plt>
   116e8:	ldr	r1, [r7]
   116ec:	bl	111c0 <fputs_unlocked@plt>
   116f0:	movw	r1, #46565	; 0xb5e5
   116f4:	mov	r0, #0
   116f8:	mov	r2, #5
   116fc:	movt	r1, #1
   11700:	bl	1125c <dcgettext@plt>
   11704:	ldr	r1, [r7]
   11708:	bl	111c0 <fputs_unlocked@plt>
   1170c:	movw	r1, #46610	; 0xb612
   11710:	mov	r0, #0
   11714:	mov	r2, #5
   11718:	movt	r1, #1
   1171c:	bl	1125c <dcgettext@plt>
   11720:	ldr	r1, [r7]
   11724:	bl	111c0 <fputs_unlocked@plt>
   11728:	movw	r1, #46664	; 0xb648
   1172c:	mov	r0, #0
   11730:	mov	r2, #5
   11734:	movt	r1, #1
   11738:	bl	1125c <dcgettext@plt>
   1173c:	ldr	r2, [r5]
   11740:	mov	r1, r0
   11744:	mov	r0, #1
   11748:	mov	r3, r2
   1174c:	bl	113a0 <__printf_chk@plt>
   11750:	movw	r0, #47616	; 0xba00
   11754:	mov	r2, #48	; 0x30
   11758:	mov	r6, sp
   1175c:	movw	r5, #46797	; 0xb6cd
   11760:	movt	r0, #1
   11764:	movt	r5, #1
   11768:	add	r1, r0, #32
   1176c:	add	r3, r0, #16
   11770:	vld1.64	{d18-d19}, [r0], r2
   11774:	vld1.64	{d16-d17}, [r1]
   11778:	vld1.64	{d20-d21}, [r3]
   1177c:	add	r1, r6, #32
   11780:	vldr	d22, [r0]
   11784:	add	r0, r6, #16
   11788:	vst1.64	{d16-d17}, [r1]
   1178c:	movw	r1, #46993	; 0xb791
   11790:	vst1.64	{d20-d21}, [r0]
   11794:	mov	r0, r6
   11798:	vst1.64	{d18-d19}, [r0], r2
   1179c:	movt	r1, #1
   117a0:	vstr	d22, [r0]
   117a4:	mov	r0, r5
   117a8:	bl	111d8 <strcmp@plt>
   117ac:	cmp	r0, #0
   117b0:	ldrne	r1, [r6, #8]!
   117b4:	cmpne	r1, #0
   117b8:	bne	117a4 <__assert_fail@plt+0x2e4>
   117bc:	ldr	r6, [r6, #4]
   117c0:	movw	r1, #47088	; 0xb7f0
   117c4:	mov	r0, #0
   117c8:	mov	r2, #5
   117cc:	movt	r1, #1
   117d0:	bl	1125c <dcgettext@plt>
   117d4:	movw	r2, #46836	; 0xb6f4
   117d8:	movw	r3, #47111	; 0xb807
   117dc:	mov	r1, r0
   117e0:	mov	r0, #1
   117e4:	movt	r2, #1
   117e8:	movt	r3, #1
   117ec:	bl	113a0 <__printf_chk@plt>
   117f0:	cmp	r6, #0
   117f4:	mov	r0, #5
   117f8:	mov	r1, #0
   117fc:	moveq	r6, r5
   11800:	bl	113e8 <setlocale@plt>
   11804:	cmp	r0, #0
   11808:	beq	11840 <__assert_fail@plt+0x380>
   1180c:	movw	r1, #47151	; 0xb82f
   11810:	mov	r2, #3
   11814:	movt	r1, #1
   11818:	bl	1146c <strncmp@plt>
   1181c:	cmp	r0, #0
   11820:	beq	11840 <__assert_fail@plt+0x380>
   11824:	movw	r1, #47155	; 0xb833
   11828:	mov	r0, #0
   1182c:	mov	r2, #5
   11830:	movt	r1, #1
   11834:	bl	1125c <dcgettext@plt>
   11838:	ldr	r1, [r7]
   1183c:	bl	111c0 <fputs_unlocked@plt>
   11840:	movw	r1, #47226	; 0xb87a
   11844:	mov	r0, #0
   11848:	mov	r2, #5
   1184c:	movt	r1, #1
   11850:	bl	1125c <dcgettext@plt>
   11854:	movw	r2, #47111	; 0xb807
   11858:	mov	r1, r0
   1185c:	mov	r0, #1
   11860:	mov	r3, r5
   11864:	movt	r2, #1
   11868:	bl	113a0 <__printf_chk@plt>
   1186c:	movw	r1, #47253	; 0xb895
   11870:	mov	r0, #0
   11874:	mov	r2, #5
   11878:	movt	r1, #1
   1187c:	bl	1125c <dcgettext@plt>
   11880:	movw	r3, #46564	; 0xb5e4
   11884:	mov	r1, r0
   11888:	movw	r0, #47021	; 0xb7ad
   1188c:	cmp	r6, r5
   11890:	mov	r2, r6
   11894:	movt	r0, #1
   11898:	movt	r3, #1
   1189c:	moveq	r3, r0
   118a0:	mov	r0, #1
   118a4:	bl	113a0 <__printf_chk@plt>
   118a8:	mov	r0, r4
   118ac:	bl	11340 <exit@plt>
   118b0:	movw	r0, #53632	; 0xd180
   118b4:	movw	r1, #45012	; 0xafd4
   118b8:	mov	r2, #5
   118bc:	movt	r0, #2
   118c0:	movt	r1, #1
   118c4:	ldr	r5, [r0]
   118c8:	mov	r0, #0
   118cc:	bl	1125c <dcgettext@plt>
   118d0:	mov	r2, r0
   118d4:	movw	r0, #53680	; 0xd1b0
   118d8:	mov	r1, #1
   118dc:	movt	r0, #2
   118e0:	ldr	r3, [r0]
   118e4:	mov	r0, r5
   118e8:	bl	113b8 <__fprintf_chk@plt>
   118ec:	mov	r0, r4
   118f0:	bl	11340 <exit@plt>
   118f4:	push	{fp, lr}
   118f8:	mov	fp, sp
   118fc:	sub	sp, sp, #144	; 0x90
   11900:	mov	r7, r0
   11904:	ldr	r0, [r1]
   11908:	mov	r4, r1
   1190c:	bl	16c00 <__assert_fail@plt+0x5740>
   11910:	movw	r1, #46564	; 0xb5e4
   11914:	mov	r0, #6
   11918:	movt	r1, #1
   1191c:	bl	113e8 <setlocale@plt>
   11920:	movw	r5, #46840	; 0xb6f8
   11924:	movw	r1, #46803	; 0xb6d3
   11928:	movt	r5, #1
   1192c:	movt	r1, #1
   11930:	mov	r0, r5
   11934:	bl	11454 <bindtextdomain@plt>
   11938:	mov	r0, r5
   1193c:	bl	11274 <textdomain@plt>
   11940:	movw	r0, #11692	; 0x2dac
   11944:	movt	r0, #1
   11948:	bl	1afa4 <__assert_fail@plt+0x9ae4>
   1194c:	sub	r0, fp, #24
   11950:	bl	11e84 <__assert_fail@plt+0x9c4>
   11954:	movw	r5, #46827	; 0xb6eb
   11958:	movw	r6, #47408	; 0xb930
   1195c:	mov	r9, #0
   11960:	mov	r0, #16
   11964:	mvn	r8, #0
   11968:	movt	r5, #1
   1196c:	movt	r6, #1
   11970:	b	11978 <__assert_fail@plt+0x4b8>
   11974:	mov	r0, sl
   11978:	mov	r1, #0
   1197c:	str	r1, [sp, #12]
   11980:	b	11990 <__assert_fail@plt+0x4d0>
   11984:	mov	r0, #1
   11988:	str	r0, [fp, #-24]	; 0xffffffe8
   1198c:	mov	r0, sl
   11990:	mov	sl, r0
   11994:	mov	r0, r7
   11998:	mov	r1, r4
   1199c:	mov	r2, r5
   119a0:	mov	r3, r6
   119a4:	str	r9, [sp]
   119a8:	bl	11328 <getopt_long@plt>
   119ac:	cmp	r0, #71	; 0x47
   119b0:	ble	11b30 <__assert_fail@plt+0x670>
   119b4:	sub	r1, r0, #72	; 0x48
   119b8:	cmp	r1, #46	; 0x2e
   119bc:	bhi	11a90 <__assert_fail@plt+0x5d0>
   119c0:	add	r2, pc, #4
   119c4:	mov	r0, #17
   119c8:	ldr	pc, [r2, r1, lsl #2]
   119cc:	muleq	r1, r0, r9
   119d0:	andeq	r1, r1, ip, ror lr
   119d4:	andeq	r1, r1, ip, ror lr
   119d8:	andeq	r1, r1, ip, ror lr
   119dc:	andeq	r1, r1, r8, lsl #21
   119e0:	andeq	r1, r1, ip, ror lr
   119e4:	andeq	r1, r1, ip, ror lr
   119e8:	andeq	r1, r1, ip, ror lr
   119ec:	strdeq	r1, [r1], -r0
   119f0:	andeq	r1, r1, ip, ror lr
   119f4:	strdeq	r1, [r1], -r8
   119f8:	andeq	r1, r1, ip, ror lr
   119fc:	andeq	r1, r1, ip, ror lr
   11a00:	andeq	r1, r1, ip, ror lr
   11a04:	andeq	r1, r1, ip, ror lr
   11a08:	andeq	r1, r1, ip, ror lr
   11a0c:	andeq	r1, r1, ip, ror lr
   11a10:	andeq	r1, r1, ip, ror lr
   11a14:	andeq	r1, r1, ip, ror lr
   11a18:	andeq	r1, r1, ip, ror lr
   11a1c:	andeq	r1, r1, ip, ror lr
   11a20:	andeq	r1, r1, ip, ror lr
   11a24:	andeq	r1, r1, ip, ror lr
   11a28:	andeq	r1, r1, ip, ror lr
   11a2c:	andeq	r1, r1, ip, ror lr
   11a30:	andeq	r1, r1, ip, ror lr
   11a34:	andeq	r1, r1, ip, ror lr
   11a38:	andeq	r1, r1, r4, lsl #19
   11a3c:	andeq	r1, r1, ip, ror lr
   11a40:	andeq	r1, r1, ip, ror lr
   11a44:	andeq	r1, r1, r8, lsl #22
   11a48:	andeq	r1, r1, ip, ror lr
   11a4c:	andeq	r1, r1, r8, lsl fp
   11a50:	andeq	r1, r1, ip, ror lr
   11a54:	andeq	r1, r1, ip, ror lr
   11a58:	andeq	r1, r1, ip, ror lr
   11a5c:	andeq	r1, r1, ip, ror lr
   11a60:	andeq	r1, r1, ip, ror lr
   11a64:	andeq	r1, r1, ip, ror lr
   11a68:	andeq	r1, r1, ip, ror lr
   11a6c:	andeq	r1, r1, ip, ror lr
   11a70:	andeq	r1, r1, ip, ror lr
   11a74:	andeq	r1, r1, ip, ror lr
   11a78:	andeq	r1, r1, ip, ror lr
   11a7c:	andeq	r1, r1, ip, ror lr
   11a80:	andeq	r1, r1, ip, ror lr
   11a84:	andeq	r1, r1, r4, lsr #22
   11a88:	mov	r0, #2
   11a8c:	b	11990 <__assert_fail@plt+0x4d0>
   11a90:	sub	r0, r0, #256	; 0x100
   11a94:	cmp	r0, #3
   11a98:	bhi	11e7c <__assert_fail@plt+0x9bc>
   11a9c:	add	r1, pc, #0
   11aa0:	ldr	pc, [r1, r0, lsl #2]
   11aa4:			; <UNDEFINED> instruction: 0x00011ab4
   11aa8:	andeq	r1, r1, r4, ror r9
   11aac:	andeq	r1, r1, r0, asr #21
   11ab0:	ldrdeq	r1, [r1], -r0
   11ab4:	mov	r8, #1
   11ab8:	mov	r0, sl
   11abc:	b	11990 <__assert_fail@plt+0x4d0>
   11ac0:	mov	r0, #1
   11ac4:	str	r0, [sp, #12]
   11ac8:	mov	r0, sl
   11acc:	b	11990 <__assert_fail@plt+0x4d0>
   11ad0:	movw	r0, #53640	; 0xd188
   11ad4:	movw	r1, #53648	; 0xd190
   11ad8:	movt	r0, #2
   11adc:	movt	r1, #2
   11ae0:	ldr	r0, [r0]
   11ae4:	str	r0, [r1]
   11ae8:	mov	r0, sl
   11aec:	b	11990 <__assert_fail@plt+0x4d0>
   11af0:	mov	r0, #16
   11af4:	b	11990 <__assert_fail@plt+0x4d0>
   11af8:	mov	r0, #1
   11afc:	strb	r0, [fp, #-20]	; 0xffffffec
   11b00:	mov	r0, sl
   11b04:	b	11990 <__assert_fail@plt+0x4d0>
   11b08:	mov	r0, #1
   11b0c:	strb	r0, [fp, #-11]
   11b10:	mov	r0, sl
   11b14:	b	11990 <__assert_fail@plt+0x4d0>
   11b18:	mov	r8, #0
   11b1c:	mov	r0, sl
   11b20:	b	11990 <__assert_fail@plt+0x4d0>
   11b24:	str	r9, [fp, #-24]	; 0xffffffe8
   11b28:	mov	r0, sl
   11b2c:	b	11990 <__assert_fail@plt+0x4d0>
   11b30:	cmn	r0, #3
   11b34:	beq	11b48 <__assert_fail@plt+0x688>
   11b38:	cmn	r0, #2
   11b3c:	bne	11b9c <__assert_fail@plt+0x6dc>
   11b40:	mov	r0, #0
   11b44:	bl	115c0 <__assert_fail@plt+0x100>
   11b48:	movw	r0, #53544	; 0xd128
   11b4c:	movw	r2, #46866	; 0xb712
   11b50:	mov	r1, #0
   11b54:	movw	r7, #46850	; 0xb702
   11b58:	movt	r0, #2
   11b5c:	movt	r2, #1
   11b60:	str	r1, [sp, #8]
   11b64:	movw	r1, #46797	; 0xb6cd
   11b68:	movt	r7, #1
   11b6c:	ldr	r3, [r0]
   11b70:	movw	r0, #53636	; 0xd184
   11b74:	str	r2, [sp, #4]
   11b78:	movw	r2, #46836	; 0xb6f4
   11b7c:	movt	r1, #1
   11b80:	str	r7, [sp]
   11b84:	movt	r0, #2
   11b88:	movt	r2, #1
   11b8c:	ldr	r0, [r0]
   11b90:	bl	190bc <__assert_fail@plt+0x7bfc>
   11b94:	mov	r0, #0
   11b98:	bl	11340 <exit@plt>
   11b9c:	cmn	r0, #1
   11ba0:	bne	11e7c <__assert_fail@plt+0x9bc>
   11ba4:	ldrb	r0, [fp, #-20]	; 0xffffffec
   11ba8:	mov	r5, #16
   11bac:	cmp	r0, #0
   11bb0:	bne	11bbc <__assert_fail@plt+0x6fc>
   11bb4:	mov	r0, r8
   11bb8:	b	11bfc <__assert_fail@plt+0x73c>
   11bbc:	cmp	sl, #16
   11bc0:	bne	11bf4 <__assert_fail@plt+0x734>
   11bc4:	mov	r0, #0
   11bc8:	cmp	r8, #1
   11bcc:	bne	11bfc <__assert_fail@plt+0x73c>
   11bd0:	movw	r1, #46879	; 0xb71f
   11bd4:	mov	r0, #0
   11bd8:	mov	r2, #5
   11bdc:	movt	r1, #1
   11be0:	bl	1125c <dcgettext@plt>
   11be4:	mov	r2, r0
   11be8:	mov	r0, #1
   11bec:	mov	r1, #0
   11bf0:	bl	112e0 <error@plt>
   11bf4:	mov	r0, r8
   11bf8:	mov	r5, sl
   11bfc:	movw	r9, #53648	; 0xd190
   11c00:	cmp	r0, #0
   11c04:	movw	r8, #53624	; 0xd178
   11c08:	mov	r2, #2
   11c0c:	movt	r9, #2
   11c10:	movwne	r0, #1
   11c14:	movt	r8, #2
   11c18:	ldr	r1, [r9]
   11c1c:	strb	r0, [fp, #-12]
   11c20:	ldr	r0, [r8]
   11c24:	cmp	r1, #0
   11c28:	sub	r3, r7, r0
   11c2c:	movwne	r2, #1
   11c30:	cmp	r3, r2
   11c34:	bge	11c80 <__assert_fail@plt+0x7c0>
   11c38:	cmp	r0, r7
   11c3c:	bge	11cc0 <__assert_fail@plt+0x800>
   11c40:	movw	r1, #46937	; 0xb759
   11c44:	mov	r0, #0
   11c48:	mov	r2, #5
   11c4c:	movt	r1, #1
   11c50:	bl	1125c <dcgettext@plt>
   11c54:	mov	r5, r0
   11c58:	add	r0, r4, r7, lsl #2
   11c5c:	ldr	r0, [r0, #-4]
   11c60:	bl	18b7c <__assert_fail@plt+0x76bc>
   11c64:	mov	r3, r0
   11c68:	mov	r0, #0
   11c6c:	mov	r1, #0
   11c70:	mov	r2, r5
   11c74:	bl	112e0 <error@plt>
   11c78:	mov	r0, #1
   11c7c:	bl	115c0 <__assert_fail@plt+0x100>
   11c80:	cmp	r1, #0
   11c84:	beq	11cec <__assert_fail@plt+0x82c>
   11c88:	add	r2, sp, #16
   11c8c:	mov	r0, #3
   11c90:	bl	11460 <__xstat64@plt>
   11c94:	cmp	r0, #0
   11c98:	bne	11d9c <__assert_fail@plt+0x8dc>
   11c9c:	ldr	r6, [sp, #44]	; 0x2c
   11ca0:	mov	r7, r5
   11ca4:	mov	r0, r6
   11ca8:	bl	11ecc <__assert_fail@plt+0xa0c>
   11cac:	str	r0, [fp, #-4]
   11cb0:	ldrb	r0, [fp, #-20]	; 0xffffffec
   11cb4:	cmp	r0, #0
   11cb8:	bne	11de0 <__assert_fail@plt+0x920>
   11cbc:	b	11e48 <__assert_fail@plt+0x988>
   11cc0:	movw	r1, #46921	; 0xb749
   11cc4:	mov	r0, #0
   11cc8:	mov	r2, #5
   11ccc:	movt	r1, #1
   11cd0:	bl	1125c <dcgettext@plt>
   11cd4:	mov	r2, r0
   11cd8:	mov	r0, #0
   11cdc:	mov	r1, #0
   11ce0:	bl	112e0 <error@plt>
   11ce4:	mov	r0, #1
   11ce8:	bl	115c0 <__assert_fail@plt+0x100>
   11cec:	add	r1, r0, #1
   11cf0:	mov	r7, r5
   11cf4:	str	r1, [r8]
   11cf8:	ldr	r5, [r4, r0, lsl #2]
   11cfc:	mov	r0, #0
   11d00:	ldrb	r1, [r5]
   11d04:	cmp	r1, #0
   11d08:	beq	11d14 <__assert_fail@plt+0x854>
   11d0c:	mov	r0, r5
   11d10:	bl	19810 <__assert_fail@plt+0x8350>
   11d14:	str	r0, [fp, #-4]
   11d18:	mvn	r6, #0
   11d1c:	ldrb	r0, [r5]
   11d20:	cmp	r0, #0
   11d24:	beq	11dd4 <__assert_fail@plt+0x914>
   11d28:	mov	r0, r5
   11d2c:	bl	114b4 <getgrnam@plt>
   11d30:	cmp	r0, #0
   11d34:	bne	11dc4 <__assert_fail@plt+0x904>
   11d38:	movw	r0, #46564	; 0xb5e4
   11d3c:	add	r3, sp, #16
   11d40:	mov	r1, #0
   11d44:	mov	r2, #10
   11d48:	movt	r0, #1
   11d4c:	str	r0, [sp]
   11d50:	mov	r0, r5
   11d54:	bl	19910 <__assert_fail@plt+0x8450>
   11d58:	cmp	r0, #0
   11d5c:	ldreq	r0, [sp, #20]
   11d60:	cmpeq	r0, #0
   11d64:	beq	11dcc <__assert_fail@plt+0x90c>
   11d68:	movw	r1, #47388	; 0xb91c
   11d6c:	mov	r0, #0
   11d70:	mov	r2, #5
   11d74:	movt	r1, #1
   11d78:	bl	1125c <dcgettext@plt>
   11d7c:	mov	r4, r0
   11d80:	mov	r0, r5
   11d84:	bl	18b7c <__assert_fail@plt+0x76bc>
   11d88:	mov	r3, r0
   11d8c:	mov	r0, #1
   11d90:	mov	r1, #0
   11d94:	mov	r2, r4
   11d98:	bl	112e0 <error@plt>
   11d9c:	bl	1137c <__errno_location@plt>
   11da0:	ldr	r4, [r0]
   11da4:	movw	r1, #46962	; 0xb772
   11da8:	mov	r0, #0
   11dac:	mov	r2, #5
   11db0:	movt	r1, #1
   11db4:	bl	1125c <dcgettext@plt>
   11db8:	ldr	r1, [r9]
   11dbc:	mov	r5, r0
   11dc0:	b	11e2c <__assert_fail@plt+0x96c>
   11dc4:	ldr	r6, [r0, #8]
   11dc8:	b	11dd0 <__assert_fail@plt+0x910>
   11dcc:	ldr	r6, [sp, #16]
   11dd0:	bl	111b4 <endgrent@plt>
   11dd4:	ldrb	r0, [fp, #-20]	; 0xffffffec
   11dd8:	cmp	r0, #0
   11ddc:	beq	11e48 <__assert_fail@plt+0x988>
   11de0:	ldr	r0, [sp, #12]
   11de4:	eor	r0, r0, #1
   11de8:	tst	r0, #1
   11dec:	bne	11e48 <__assert_fail@plt+0x988>
   11df0:	add	r0, r9, #8
   11df4:	bl	18b94 <__assert_fail@plt+0x76d4>
   11df8:	cmp	r0, #0
   11dfc:	str	r0, [fp, #-16]
   11e00:	bne	11e48 <__assert_fail@plt+0x988>
   11e04:	bl	1137c <__errno_location@plt>
   11e08:	ldr	r4, [r0]
   11e0c:	movw	r1, #46962	; 0xb772
   11e10:	mov	r0, #0
   11e14:	mov	r2, #5
   11e18:	movt	r1, #1
   11e1c:	bl	1125c <dcgettext@plt>
   11e20:	movw	r1, #49807	; 0xc28f
   11e24:	mov	r5, r0
   11e28:	movt	r1, #1
   11e2c:	mov	r0, #4
   11e30:	bl	18654 <__assert_fail@plt+0x7194>
   11e34:	mov	r3, r0
   11e38:	mov	r0, #1
   11e3c:	mov	r1, r4
   11e40:	mov	r2, r5
   11e44:	bl	112e0 <error@plt>
   11e48:	ldr	r0, [r8]
   11e4c:	mvn	r1, #0
   11e50:	mvn	r2, #0
   11e54:	mov	r3, r6
   11e58:	str	r1, [sp]
   11e5c:	str	r1, [sp, #4]
   11e60:	sub	r1, fp, #24
   11e64:	str	r1, [sp, #8]
   11e68:	orr	r1, r7, #1024	; 0x400
   11e6c:	add	r0, r4, r0, lsl #2
   11e70:	bl	11f5c <__assert_fail@plt+0xa9c>
   11e74:	eor	r0, r0, #1
   11e78:	bl	11340 <exit@plt>
   11e7c:	mov	r0, #1
   11e80:	bl	115c0 <__assert_fail@plt+0x100>
   11e84:	mov	r1, #0
   11e88:	mov	r2, #2
   11e8c:	str	r1, [r0, #8]
   11e90:	str	r2, [r0]
   11e94:	mov	r2, #1
   11e98:	strb	r1, [r0, #4]
   11e9c:	strh	r2, [r0, #12]
   11ea0:	str	r1, [r0, #16]
   11ea4:	str	r1, [r0, #20]
   11ea8:	bx	lr
   11eac:	push	{r4, sl, fp, lr}
   11eb0:	add	fp, sp, #8
   11eb4:	mov	r4, r0
   11eb8:	ldr	r0, [r0, #16]
   11ebc:	bl	12e98 <__assert_fail@plt+0x19d8>
   11ec0:	ldr	r0, [r4, #20]
   11ec4:	pop	{r4, sl, fp, lr}
   11ec8:	b	12e98 <__assert_fail@plt+0x19d8>
   11ecc:	push	{r4, sl, fp, lr}
   11ed0:	add	fp, sp, #8
   11ed4:	sub	sp, sp, #24
   11ed8:	mov	r4, r0
   11edc:	bl	114a8 <getgrgid@plt>
   11ee0:	cmp	r0, #0
   11ee4:	beq	11ef8 <__assert_fail@plt+0xa38>
   11ee8:	ldr	r0, [r0]
   11eec:	bl	19810 <__assert_fail@plt+0x8350>
   11ef0:	sub	sp, fp, #8
   11ef4:	pop	{r4, sl, fp, pc}
   11ef8:	add	r2, sp, #3
   11efc:	mov	r0, r4
   11f00:	mov	r1, #0
   11f04:	bl	16b04 <__assert_fail@plt+0x5644>
   11f08:	bl	19810 <__assert_fail@plt+0x8350>
   11f0c:	sub	sp, fp, #8
   11f10:	pop	{r4, sl, fp, pc}
   11f14:	push	{r4, sl, fp, lr}
   11f18:	add	fp, sp, #8
   11f1c:	sub	sp, sp, #24
   11f20:	mov	r4, r0
   11f24:	bl	111e4 <getpwuid@plt>
   11f28:	cmp	r0, #0
   11f2c:	beq	11f40 <__assert_fail@plt+0xa80>
   11f30:	ldr	r0, [r0]
   11f34:	bl	19810 <__assert_fail@plt+0x8350>
   11f38:	sub	sp, fp, #8
   11f3c:	pop	{r4, sl, fp, pc}
   11f40:	add	r2, sp, #3
   11f44:	mov	r0, r4
   11f48:	mov	r1, #0
   11f4c:	bl	16b04 <__assert_fail@plt+0x5644>
   11f50:	bl	19810 <__assert_fail@plt+0x8350>
   11f54:	sub	sp, fp, #8
   11f58:	pop	{r4, sl, fp, pc}
   11f5c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   11f60:	add	fp, sp, #28
   11f64:	sub	sp, sp, #260	; 0x104
   11f68:	str	r3, [sp, #24]
   11f6c:	str	r2, [sp, #28]
   11f70:	ldr	r2, [fp, #8]
   11f74:	ldr	r3, [fp, #12]
   11f78:	ldr	r5, [fp, #16]
   11f7c:	and	r3, r3, r2
   11f80:	mov	r2, #0
   11f84:	cmn	r3, #1
   11f88:	str	r3, [sp, #32]
   11f8c:	bne	11fb0 <__assert_fail@plt+0xaf0>
   11f90:	ldrb	r3, [r5, #12]
   11f94:	cmp	r3, #0
   11f98:	bne	11fb0 <__assert_fail@plt+0xaf0>
   11f9c:	ldr	r2, [r5]
   11fa0:	sub	r2, r2, #2
   11fa4:	clz	r2, r2
   11fa8:	lsr	r2, r2, #5
   11fac:	lsl	r2, r2, #3
   11fb0:	orr	r1, r2, r1
   11fb4:	mov	r2, #0
   11fb8:	bl	19894 <__assert_fail@plt+0x83d4>
   11fbc:	str	r0, [sp, #44]	; 0x2c
   11fc0:	bl	13968 <__assert_fail@plt+0x24a8>
   11fc4:	cmp	r0, #0
   11fc8:	beq	12c64 <__assert_fail@plt+0x17a4>
   11fcc:	ldr	r1, [sp, #28]
   11fd0:	movw	r2, #48107	; 0xbbeb
   11fd4:	mov	r9, r0
   11fd8:	movw	r0, #48132	; 0xbc04
   11fdc:	mov	r7, #1
   11fe0:	movt	r0, #1
   11fe4:	movt	r2, #1
   11fe8:	cmn	r1, #1
   11fec:	moveq	r2, r0
   11ff0:	sub	r0, fp, #136	; 0x88
   11ff4:	add	r0, r0, #96	; 0x60
   11ff8:	str	r2, [sp, #12]
   11ffc:	str	r0, [sp, #8]
   12000:	ldr	r8, [r9, #24]
   12004:	ldr	r4, [r9, #28]
   12008:	ldrh	r0, [r9, #56]	; 0x38
   1200c:	sub	r0, r0, #1
   12010:	cmp	r0, #9
   12014:	bhi	12214 <__assert_fail@plt+0xd54>
   12018:	add	r1, pc, #0
   1201c:	ldr	pc, [r1, r0, lsl #2]
   12020:	andeq	r2, r1, r8, asr #32
   12024:	andeq	r2, r1, ip, lsr #3
   12028:	andeq	r2, r1, r4, lsl r2
   1202c:	andeq	r2, r1, ip, lsl #2
   12030:	andeq	r2, r1, r4, lsl r2
   12034:	andeq	r2, r1, r8, lsl #4
   12038:	andeq	r2, r1, r8, ror #6
   1203c:	andeq	r2, r1, r4, lsl r2
   12040:	andeq	r2, r1, r4, lsl r2
   12044:	andeq	r2, r1, ip, lsr r1
   12048:	ldrb	r0, [r5, #4]
   1204c:	cmp	r0, #0
   12050:	beq	12214 <__assert_fail@plt+0xd54>
   12054:	ldr	r0, [r5, #8]
   12058:	mov	r6, r4
   1205c:	mov	r4, #1
   12060:	cmp	r0, #0
   12064:	beq	12c24 <__assert_fail@plt+0x1764>
   12068:	ldrd	r2, [r0]
   1206c:	ldrd	r4, [r9, #160]	; 0xa0
   12070:	eor	r1, r5, r3
   12074:	eor	r2, r4, r2
   12078:	orrs	r1, r2, r1
   1207c:	bne	12754 <__assert_fail@plt+0x1294>
   12080:	ldrd	r0, [r0, #8]
   12084:	ldrd	r2, [r9, #64]	; 0x40
   12088:	ldr	r5, [fp, #16]
   1208c:	mov	r4, #1
   12090:	eor	r1, r3, r1
   12094:	eor	r0, r2, r0
   12098:	orrs	r0, r0, r1
   1209c:	bne	12c24 <__assert_fail@plt+0x1764>
   120a0:	movw	r8, #49807	; 0xc28f
   120a4:	mov	r0, r6
   120a8:	mov	r4, r6
   120ac:	movt	r8, #1
   120b0:	mov	r1, r8
   120b4:	bl	111d8 <strcmp@plt>
   120b8:	cmp	r0, #0
   120bc:	beq	12b10 <__assert_fail@plt+0x1650>
   120c0:	movw	r1, #47750	; 0xba86
   120c4:	mov	r0, #0
   120c8:	mov	r2, #5
   120cc:	movt	r1, #1
   120d0:	bl	1125c <dcgettext@plt>
   120d4:	mov	r6, r0
   120d8:	mov	r0, #0
   120dc:	mov	r1, #4
   120e0:	mov	r2, r4
   120e4:	bl	185ac <__assert_fail@plt+0x70ec>
   120e8:	mov	r5, r0
   120ec:	mov	r0, #1
   120f0:	mov	r1, #4
   120f4:	mov	r2, r8
   120f8:	bl	185ac <__assert_fail@plt+0x70ec>
   120fc:	mov	r3, r5
   12100:	ldr	r5, [fp, #16]
   12104:	str	r0, [sp]
   12108:	b	12b38 <__assert_fail@plt+0x1678>
   1210c:	ldrb	r0, [r5, #13]
   12110:	mov	sl, #0
   12114:	mov	r6, #1
   12118:	str	r4, [sp, #40]	; 0x28
   1211c:	cmp	r0, #0
   12120:	bne	12380 <__assert_fail@plt+0xec0>
   12124:	ldr	r8, [r9, #32]
   12128:	movw	r1, #47874	; 0xbb02
   1212c:	mov	sl, #0
   12130:	mov	r0, #0
   12134:	movt	r1, #1
   12138:	b	12180 <__assert_fail@plt+0xcc0>
   1213c:	ldr	r0, [r9, #48]	; 0x30
   12140:	cmp	r0, #0
   12144:	bne	12154 <__assert_fail@plt+0xc94>
   12148:	ldr	r0, [r9, #16]
   1214c:	cmp	r0, #0
   12150:	beq	12784 <__assert_fail@plt+0x12c4>
   12154:	ldrb	r0, [r5, #13]
   12158:	mov	sl, #0
   1215c:	mov	r6, #1
   12160:	str	r4, [sp, #40]	; 0x28
   12164:	cmp	r0, #0
   12168:	bne	12380 <__assert_fail@plt+0xec0>
   1216c:	ldr	r8, [r9, #32]
   12170:	movw	r1, #47857	; 0xbaf1
   12174:	mov	sl, #0
   12178:	mov	r0, #0
   1217c:	movt	r1, #1
   12180:	mov	r2, #5
   12184:	bl	1125c <dcgettext@plt>
   12188:	mov	r5, r0
   1218c:	mov	r0, #4
   12190:	mov	r1, r4
   12194:	bl	18654 <__assert_fail@plt+0x7194>
   12198:	mov	r3, r0
   1219c:	mov	r0, #0
   121a0:	mov	r1, r8
   121a4:	mov	r2, r5
   121a8:	b	12564 <__assert_fail@plt+0x10a4>
   121ac:	ldr	r0, [sp, #44]	; 0x2c
   121b0:	mov	r1, r9
   121b4:	bl	198e0 <__assert_fail@plt+0x8420>
   121b8:	cmp	r0, #0
   121bc:	beq	12214 <__assert_fail@plt+0xd54>
   121c0:	movw	r1, #47899	; 0xbb1b
   121c4:	mov	r0, #0
   121c8:	mov	r2, #5
   121cc:	mov	r6, r4
   121d0:	movt	r1, #1
   121d4:	bl	1125c <dcgettext@plt>
   121d8:	mov	r4, r0
   121dc:	mov	r0, #0
   121e0:	mov	r1, #3
   121e4:	mov	r2, r6
   121e8:	bl	188d0 <__assert_fail@plt+0x7410>
   121ec:	mov	r3, r0
   121f0:	mov	r2, r4
   121f4:	mov	r0, #0
   121f8:	mov	r1, #0
   121fc:	mov	r4, #0
   12200:	bl	112e0 <error@plt>
   12204:	b	12c24 <__assert_fail@plt+0x1764>
   12208:	ldrb	r0, [r5, #4]
   1220c:	cmp	r0, #0
   12210:	beq	12530 <__assert_fail@plt+0x1070>
   12214:	ldr	r0, [sp, #32]
   12218:	cmn	r0, #1
   1221c:	bne	12234 <__assert_fail@plt+0xd74>
   12220:	ldr	r0, [r5]
   12224:	cmp	r0, #2
   12228:	ldreq	r0, [r5, #8]
   1222c:	cmpeq	r0, #0
   12230:	beq	12760 <__assert_fail@plt+0x12a0>
   12234:	ldrb	r0, [r5, #12]
   12238:	add	sl, r9, #64	; 0x40
   1223c:	cmp	r0, #0
   12240:	beq	12334 <__assert_fail@plt+0xe74>
   12244:	ldr	r0, [r9, #80]	; 0x50
   12248:	and	r0, r0, #61440	; 0xf000
   1224c:	cmp	r0, #40960	; 0xa000
   12250:	bne	12334 <__assert_fail@plt+0xe74>
   12254:	ldr	r0, [sp, #44]	; 0x2c
   12258:	add	sl, sp, #48	; 0x30
   1225c:	mov	r2, r8
   12260:	mov	r3, sl
   12264:	ldr	r1, [r0, #32]
   12268:	mov	r0, #0
   1226c:	str	r0, [sp]
   12270:	mov	r0, #3
   12274:	bl	11280 <__fxstatat64@plt>
   12278:	cmp	r0, #0
   1227c:	beq	12334 <__assert_fail@plt+0xe74>
   12280:	ldrb	r0, [r5, #13]
   12284:	str	r4, [sp, #40]	; 0x28
   12288:	mov	r4, #0
   1228c:	mov	r6, #1
   12290:	cmp	r0, #0
   12294:	bne	122dc <__assert_fail@plt+0xe1c>
   12298:	bl	1137c <__errno_location@plt>
   1229c:	ldr	r4, [r0]
   122a0:	movw	r1, #48085	; 0xbbd5
   122a4:	mov	r0, #0
   122a8:	mov	r2, #5
   122ac:	movt	r1, #1
   122b0:	bl	1125c <dcgettext@plt>
   122b4:	ldr	r1, [sp, #40]	; 0x28
   122b8:	mov	r5, r0
   122bc:	mov	r0, #4
   122c0:	bl	18654 <__assert_fail@plt+0x7194>
   122c4:	mov	r3, r0
   122c8:	mov	r1, r4
   122cc:	mov	r0, #0
   122d0:	mov	r2, r5
   122d4:	mov	r4, #0
   122d8:	bl	112e0 <error@plt>
   122dc:	add	sl, sp, #48	; 0x30
   122e0:	mov	r5, #1
   122e4:	ldr	r0, [fp, #16]
   122e8:	ldr	r0, [r0]
   122ec:	cmp	r0, #2
   122f0:	beq	128d8 <__assert_fail@plt+0x1418>
   122f4:	eor	r1, r4, #1
   122f8:	orrs	r1, r5, r1
   122fc:	eorseq	r1, r6, #1
   12300:	beq	12388 <__assert_fail@plt+0xec8>
   12304:	cmp	r0, #0
   12308:	bne	128d8 <__assert_fail@plt+0x1418>
   1230c:	cmp	r6, #0
   12310:	mov	r5, #1
   12314:	mov	r0, #3
   12318:	movwne	r5, #4
   1231c:	cmp	r4, #0
   12320:	moveq	r5, r0
   12324:	cmp	sl, #0
   12328:	beq	12658 <__assert_fail@plt+0x1198>
   1232c:	mov	r6, r4
   12330:	b	123dc <__assert_fail@plt+0xf1c>
   12334:	ldr	r2, [fp, #8]
   12338:	cmn	r2, #1
   1233c:	beq	123f8 <__assert_fail@plt+0xf38>
   12340:	ldr	r1, [sl, #24]
   12344:	ldr	r3, [fp, #12]
   12348:	sub	r0, r1, r2
   1234c:	cmn	r3, #1
   12350:	clz	r0, r0
   12354:	lsr	r0, r0, #5
   12358:	beq	12418 <__assert_fail@plt+0xf58>
   1235c:	cmp	r1, r2
   12360:	beq	12404 <__assert_fail@plt+0xf44>
   12364:	b	12418 <__assert_fail@plt+0xf58>
   12368:	ldrb	r0, [r5, #13]
   1236c:	mov	sl, #0
   12370:	mov	r6, #1
   12374:	str	r4, [sp, #40]	; 0x28
   12378:	cmp	r0, #0
   1237c:	beq	12538 <__assert_fail@plt+0x1078>
   12380:	mov	r5, #1
   12384:	b	129cc <__assert_fail@plt+0x150c>
   12388:	ldr	r1, [sp, #28]
   1238c:	cmn	r1, #1
   12390:	beq	123a4 <__assert_fail@plt+0xee4>
   12394:	ldr	r1, [sl, #24]
   12398:	ldr	r2, [sp, #28]
   1239c:	cmp	r1, r2
   123a0:	bne	123c0 <__assert_fail@plt+0xf00>
   123a4:	ldr	r1, [sp, #24]
   123a8:	cmn	r1, #1
   123ac:	beq	12304 <__assert_fail@plt+0xe44>
   123b0:	ldr	r1, [sl, #28]
   123b4:	ldr	r2, [sp, #24]
   123b8:	cmp	r1, r2
   123bc:	beq	12304 <__assert_fail@plt+0xe44>
   123c0:	cmp	r6, #0
   123c4:	mov	r5, #1
   123c8:	mov	r0, #3
   123cc:	mov	r6, r4
   123d0:	movwne	r5, #2
   123d4:	cmp	r4, #0
   123d8:	moveq	r5, r0
   123dc:	ldr	r4, [sl, #24]
   123e0:	mov	r0, r4
   123e4:	bl	111e4 <getpwuid@plt>
   123e8:	cmp	r0, #0
   123ec:	beq	12570 <__assert_fail@plt+0x10b0>
   123f0:	ldr	r0, [r0]
   123f4:	b	12580 <__assert_fail@plt+0x10c0>
   123f8:	ldr	r0, [fp, #12]
   123fc:	cmn	r0, #1
   12400:	beq	12770 <__assert_fail@plt+0x12b0>
   12404:	ldr	r0, [sl, #28]
   12408:	ldr	r1, [fp, #12]
   1240c:	sub	r0, r0, r1
   12410:	clz	r0, r0
   12414:	lsr	r0, r0, #5
   12418:	ldrh	r1, [r9, #56]	; 0x38
   1241c:	cmp	r1, #6
   12420:	bhi	1243c <__assert_fail@plt+0xf7c>
   12424:	mov	r2, #1
   12428:	mov	r3, #86	; 0x56
   1242c:	tst	r3, r2, lsl r1
   12430:	ldrne	r1, [r5, #8]
   12434:	cmpne	r1, #0
   12438:	bne	1248c <__assert_fail@plt+0xfcc>
   1243c:	str	r4, [sp, #40]	; 0x28
   12440:	mov	r4, #1
   12444:	cmp	r0, #0
   12448:	beq	128c0 <__assert_fail@plt+0x1400>
   1244c:	ldr	r0, [sp, #44]	; 0x2c
   12450:	ldr	r6, [r0, #32]
   12454:	ldrb	r0, [r5, #12]
   12458:	cmp	r0, #0
   1245c:	beq	12608 <__assert_fail@plt+0x1148>
   12460:	ldr	r0, [sp, #32]
   12464:	cmn	r0, #1
   12468:	beq	1294c <__assert_fail@plt+0x148c>
   1246c:	ldr	r0, [sl, #16]
   12470:	and	r0, r0, #61440	; 0xf000
   12474:	cmp	r0, #32768	; 0x8000
   12478:	beq	127a8 <__assert_fail@plt+0x12e8>
   1247c:	cmp	r0, #16384	; 0x4000
   12480:	bne	1294c <__assert_fail@plt+0x148c>
   12484:	mov	r5, #18688	; 0x4900
   12488:	b	127ac <__assert_fail@plt+0x12ec>
   1248c:	ldrd	r2, [r1]
   12490:	ldr	r6, [sl, #96]	; 0x60
   12494:	ldr	r5, [sl, #100]	; 0x64
   12498:	eor	r3, r5, r3
   1249c:	ldr	r5, [fp, #16]
   124a0:	eor	r2, r6, r2
   124a4:	orrs	r2, r2, r3
   124a8:	bne	1243c <__assert_fail@plt+0xf7c>
   124ac:	ldrd	r2, [r1, #8]
   124b0:	ldr	r6, [sl]
   124b4:	ldr	r1, [sl, #4]
   124b8:	eor	r1, r1, r3
   124bc:	eor	r2, r6, r2
   124c0:	orrs	r1, r2, r1
   124c4:	bne	1243c <__assert_fail@plt+0xf7c>
   124c8:	movw	r8, #49807	; 0xc28f
   124cc:	mov	r0, r4
   124d0:	movt	r8, #1
   124d4:	mov	r1, r8
   124d8:	bl	111d8 <strcmp@plt>
   124dc:	cmp	r0, #0
   124e0:	beq	12a8c <__assert_fail@plt+0x15cc>
   124e4:	movw	r1, #47750	; 0xba86
   124e8:	mov	r0, #0
   124ec:	mov	r2, #5
   124f0:	movt	r1, #1
   124f4:	bl	1125c <dcgettext@plt>
   124f8:	mov	r6, r0
   124fc:	mov	r0, #0
   12500:	mov	r1, #4
   12504:	mov	r2, r4
   12508:	bl	185ac <__assert_fail@plt+0x70ec>
   1250c:	mov	r5, r0
   12510:	mov	r0, #1
   12514:	mov	r1, #4
   12518:	mov	r2, r8
   1251c:	bl	185ac <__assert_fail@plt+0x70ec>
   12520:	mov	r3, r5
   12524:	ldr	r5, [fp, #16]
   12528:	str	r0, [sp]
   1252c:	b	12ab4 <__assert_fail@plt+0x15f4>
   12530:	mov	r4, #1
   12534:	b	12c24 <__assert_fail@plt+0x1764>
   12538:	ldr	r5, [r9, #32]
   1253c:	mov	r0, #0
   12540:	mov	r1, #3
   12544:	mov	r2, r4
   12548:	mov	sl, #0
   1254c:	bl	188d0 <__assert_fail@plt+0x7410>
   12550:	movw	r2, #47403	; 0xb92b
   12554:	mov	r3, r0
   12558:	mov	r0, #0
   1255c:	mov	r1, r5
   12560:	movt	r2, #1
   12564:	bl	112e0 <error@plt>
   12568:	mov	r5, #1
   1256c:	b	129cc <__assert_fail@plt+0x150c>
   12570:	mov	r0, r4
   12574:	mov	r1, #0
   12578:	sub	r2, fp, #136	; 0x88
   1257c:	bl	16b04 <__assert_fail@plt+0x5644>
   12580:	bl	19810 <__assert_fail@plt+0x8350>
   12584:	ldr	r4, [sl, #28]
   12588:	str	r0, [sp, #36]	; 0x24
   1258c:	mov	r0, r4
   12590:	bl	114a8 <getgrgid@plt>
   12594:	cmp	r0, #0
   12598:	beq	125a4 <__assert_fail@plt+0x10e4>
   1259c:	ldr	r0, [r0]
   125a0:	b	125b4 <__assert_fail@plt+0x10f4>
   125a4:	mov	r0, r4
   125a8:	mov	r1, #0
   125ac:	sub	r2, fp, #136	; 0x88
   125b0:	bl	16b04 <__assert_fail@plt+0x5644>
   125b4:	mov	r4, r6
   125b8:	bl	19810 <__assert_fail@plt+0x8350>
   125bc:	mov	sl, r0
   125c0:	mov	r8, r4
   125c4:	cmp	r5, #1
   125c8:	bne	12670 <__assert_fail@plt+0x11b0>
   125cc:	movw	r1, #48153	; 0xbc19
   125d0:	mov	r0, #0
   125d4:	mov	r2, #5
   125d8:	movt	r1, #1
   125dc:	bl	1125c <dcgettext@plt>
   125e0:	ldr	r1, [sp, #40]	; 0x28
   125e4:	mov	r4, r0
   125e8:	mov	r0, #4
   125ec:	bl	18654 <__assert_fail@plt+0x7194>
   125f0:	mov	r2, r0
   125f4:	mov	r0, #1
   125f8:	mov	r1, r4
   125fc:	bl	113a0 <__printf_chk@plt>
   12600:	mov	r4, r8
   12604:	b	12c04 <__assert_fail@plt+0x1744>
   12608:	ldr	r2, [sp, #28]
   1260c:	ldr	r3, [sp, #24]
   12610:	mov	r0, #256	; 0x100
   12614:	mov	r1, r8
   12618:	str	r0, [sp]
   1261c:	mov	r0, r6
   12620:	bl	11448 <fchownat@plt>
   12624:	cmp	r0, #0
   12628:	beq	127a0 <__assert_fail@plt+0x12e0>
   1262c:	bl	1137c <__errno_location@plt>
   12630:	ldr	r0, [r0]
   12634:	mov	r6, #0
   12638:	cmp	r0, #95	; 0x5f
   1263c:	bne	12974 <__assert_fail@plt+0x14b4>
   12640:	mov	r5, #0
   12644:	ldr	r0, [fp, #16]
   12648:	ldr	r0, [r0]
   1264c:	cmp	r0, #2
   12650:	bne	122f4 <__assert_fail@plt+0xe34>
   12654:	b	128d8 <__assert_fail@plt+0x1418>
   12658:	mov	r0, #0
   1265c:	mov	sl, #0
   12660:	str	r0, [sp, #36]	; 0x24
   12664:	mov	r8, r4
   12668:	cmp	r5, #1
   1266c:	beq	125cc <__assert_fail@plt+0x110c>
   12670:	ldr	r0, [fp, #16]
   12674:	ldr	r6, [r0, #20]
   12678:	ldr	r4, [r0, #16]
   1267c:	mov	r0, r4
   12680:	mov	r1, r6
   12684:	bl	12d00 <__assert_fail@plt+0x1840>
   12688:	ldr	r1, [sp, #36]	; 0x24
   1268c:	mov	r2, sl
   12690:	mov	sl, r0
   12694:	cmp	r4, #0
   12698:	mov	r0, r4
   1269c:	str	r2, [sp, #20]
   126a0:	movne	r0, r1
   126a4:	cmp	r6, #0
   126a8:	mov	r1, r6
   126ac:	movne	r1, r2
   126b0:	bl	12d00 <__assert_fail@plt+0x1840>
   126b4:	cmp	r5, #4
   126b8:	beq	12724 <__assert_fail@plt+0x1264>
   126bc:	cmp	r5, #3
   126c0:	beq	126ec <__assert_fail@plt+0x122c>
   126c4:	cmp	r5, #2
   126c8:	bne	12c60 <__assert_fail@plt+0x17a0>
   126cc:	cmp	r4, #0
   126d0:	mov	r5, sl
   126d4:	str	r0, [sp, #16]
   126d8:	beq	129fc <__assert_fail@plt+0x153c>
   126dc:	movw	r1, #48209	; 0xbc51
   126e0:	mov	r0, #0
   126e4:	movt	r1, #1
   126e8:	b	12710 <__assert_fail@plt+0x1250>
   126ec:	cmp	r0, #0
   126f0:	beq	12a1c <__assert_fail@plt+0x155c>
   126f4:	cmp	r4, #0
   126f8:	mov	r5, sl
   126fc:	str	r0, [sp, #16]
   12700:	beq	12af0 <__assert_fail@plt+0x1630>
   12704:	movw	r1, #48313	; 0xbcb9
   12708:	mov	r0, #0
   1270c:	movt	r1, #1
   12710:	mov	r2, #5
   12714:	bl	1125c <dcgettext@plt>
   12718:	mov	r6, r0
   1271c:	mov	r4, r8
   12720:	b	12bb0 <__assert_fail@plt+0x16f0>
   12724:	cmp	r4, #0
   12728:	str	r0, [sp, #16]
   1272c:	beq	12a6c <__assert_fail@plt+0x15ac>
   12730:	movw	r1, #48515	; 0xbd83
   12734:	mov	r0, #0
   12738:	mov	r2, #5
   1273c:	movt	r1, #1
   12740:	bl	1125c <dcgettext@plt>
   12744:	mov	r6, r0
   12748:	mov	r4, r8
   1274c:	mov	r5, sl
   12750:	b	12bb0 <__assert_fail@plt+0x16f0>
   12754:	ldr	r5, [fp, #16]
   12758:	mov	r4, #1
   1275c:	b	12c24 <__assert_fail@plt+0x1764>
   12760:	ldrb	r0, [r5, #12]
   12764:	add	sl, r9, #64	; 0x40
   12768:	cmp	r0, #0
   1276c:	bne	12244 <__assert_fail@plt+0xd84>
   12770:	mov	r0, #1
   12774:	ldrh	r1, [r9, #56]	; 0x38
   12778:	cmp	r1, #6
   1277c:	bls	12424 <__assert_fail@plt+0xf64>
   12780:	b	1243c <__assert_fail@plt+0xf7c>
   12784:	ldr	r0, [sp, #44]	; 0x2c
   12788:	mov	r4, #1
   1278c:	mov	r1, r9
   12790:	mov	r2, #1
   12794:	str	r4, [r9, #16]
   12798:	bl	151fc <__assert_fail@plt+0x3d3c>
   1279c:	b	12c24 <__assert_fail@plt+0x1764>
   127a0:	mov	r5, #0
   127a4:	b	129e4 <__assert_fail@plt+0x1524>
   127a8:	mov	r5, #2304	; 0x900
   127ac:	mov	r0, r6
   127b0:	mov	r1, r8
   127b4:	mov	r2, r5
   127b8:	bl	11364 <openat64@plt>
   127bc:	mov	r1, r0
   127c0:	cmn	r0, #1
   127c4:	ble	128fc <__assert_fail@plt+0x143c>
   127c8:	mov	r0, #3
   127cc:	sub	r2, fp, #136	; 0x88
   127d0:	str	r1, [sp, #36]	; 0x24
   127d4:	bl	11298 <__fxstat64@plt>
   127d8:	mov	r6, #6
   127dc:	cmp	r0, #0
   127e0:	bne	1286c <__assert_fail@plt+0x13ac>
   127e4:	ldr	r0, [sp, #8]
   127e8:	ldrd	r2, [sl, #96]	; 0x60
   127ec:	mov	r6, #4
   127f0:	ldrd	r0, [r0]
   127f4:	eor	r1, r3, r1
   127f8:	eor	r0, r2, r0
   127fc:	orrs	r0, r0, r1
   12800:	bne	1286c <__assert_fail@plt+0x13ac>
   12804:	ldrd	r0, [sl]
   12808:	ldr	r2, [fp, #-136]	; 0xffffff78
   1280c:	ldr	r3, [fp, #-132]	; 0xffffff7c
   12810:	eor	r1, r1, r3
   12814:	eor	r0, r0, r2
   12818:	orrs	r0, r0, r1
   1281c:	bne	1286c <__assert_fail@plt+0x13ac>
   12820:	ldr	r1, [fp, #8]
   12824:	mov	r6, #2
   12828:	cmn	r1, #1
   1282c:	ldrne	r0, [fp, #-112]	; 0xffffff90
   12830:	cmpne	r0, r1
   12834:	bne	1286c <__assert_fail@plt+0x13ac>
   12838:	ldr	r0, [fp, #12]
   1283c:	cmn	r0, #1
   12840:	ldrne	r0, [fp, #-108]	; 0xffffff94
   12844:	ldrne	r1, [fp, #12]
   12848:	cmpne	r0, r1
   1284c:	bne	1286c <__assert_fail@plt+0x13ac>
   12850:	ldr	r0, [sp, #36]	; 0x24
   12854:	ldr	r1, [sp, #28]
   12858:	ldr	r2, [sp, #24]
   1285c:	bl	11370 <fchown@plt>
   12860:	cmp	r0, #0
   12864:	mov	r6, #6
   12868:	beq	12c40 <__assert_fail@plt+0x1780>
   1286c:	str	r6, [sp, #20]
   12870:	bl	1137c <__errno_location@plt>
   12874:	mov	r5, r0
   12878:	ldr	r6, [r0]
   1287c:	ldr	r0, [sp, #36]	; 0x24
   12880:	bl	11484 <close@plt>
   12884:	ldr	r0, [sp, #20]
   12888:	str	r6, [r5]
   1288c:	sub	r0, r0, #2
   12890:	cmp	r0, #4
   12894:	bhi	12c60 <__assert_fail@plt+0x17a0>
   12898:	add	r1, pc, #8
   1289c:	mov	r5, #0
   128a0:	mov	r6, #1
   128a4:	ldr	pc, [r1, r0, lsl #2]
   128a8:	andeq	r2, r1, r8, asr #17
   128ac:			; <UNDEFINED> instruction: 0x000128bc
   128b0:			; <UNDEFINED> instruction: 0x000128bc
   128b4:	andeq	r2, r1, ip, asr #18
   128b8:	andeq	r2, r1, r4, ror r9
   128bc:	mov	r4, #0
   128c0:	mov	r6, #1
   128c4:	mov	r5, #1
   128c8:	ldr	r0, [fp, #16]
   128cc:	ldr	r0, [r0]
   128d0:	cmp	r0, #2
   128d4:	bne	122f4 <__assert_fail@plt+0xe34>
   128d8:	ldr	r5, [fp, #16]
   128dc:	ldrb	r0, [r5, #4]
   128e0:	cmp	r0, #0
   128e4:	bne	12c24 <__assert_fail@plt+0x1764>
   128e8:	ldr	r0, [sp, #44]	; 0x2c
   128ec:	mov	r1, r9
   128f0:	mov	r2, #4
   128f4:	bl	151fc <__assert_fail@plt+0x3d3c>
   128f8:	b	12c24 <__assert_fail@plt+0x1764>
   128fc:	bl	1137c <__errno_location@plt>
   12900:	ldr	r1, [r0]
   12904:	cmp	r1, #13
   12908:	bne	12974 <__assert_fail@plt+0x14b4>
   1290c:	ldr	r1, [sl, #16]
   12910:	and	r1, r1, #61440	; 0xf000
   12914:	cmp	r1, #32768	; 0x8000
   12918:	bne	1294c <__assert_fail@plt+0x148c>
   1291c:	str	r0, [sp, #36]	; 0x24
   12920:	orr	r2, r5, #1
   12924:	mov	r0, r6
   12928:	mov	r1, r8
   1292c:	bl	11364 <openat64@plt>
   12930:	mov	r1, r0
   12934:	cmn	r0, #1
   12938:	bgt	127c8 <__assert_fail@plt+0x1308>
   1293c:	ldr	r0, [sp, #36]	; 0x24
   12940:	ldr	r0, [r0]
   12944:	cmp	r0, #13
   12948:	bne	12974 <__assert_fail@plt+0x14b4>
   1294c:	ldr	r0, [sp, #44]	; 0x2c
   12950:	ldr	r2, [sp, #28]
   12954:	ldr	r3, [sp, #24]
   12958:	mov	r5, #0
   1295c:	mov	r1, r8
   12960:	str	r5, [sp]
   12964:	ldr	r0, [r0, #32]
   12968:	bl	11448 <fchownat@plt>
   1296c:	cmp	r0, #0
   12970:	beq	129e4 <__assert_fail@plt+0x1524>
   12974:	ldr	r0, [fp, #16]
   12978:	mov	r5, #0
   1297c:	ldrb	r0, [r0, #13]
   12980:	cmp	r0, #0
   12984:	bne	129c8 <__assert_fail@plt+0x1508>
   12988:	bl	1137c <__errno_location@plt>
   1298c:	ldr	r1, [sp, #12]
   12990:	ldr	r4, [r0]
   12994:	mov	r0, #0
   12998:	mov	r2, #5
   1299c:	mov	r5, #0
   129a0:	bl	1125c <dcgettext@plt>
   129a4:	ldr	r1, [sp, #40]	; 0x28
   129a8:	mov	r6, r0
   129ac:	mov	r0, #4
   129b0:	bl	18654 <__assert_fail@plt+0x7194>
   129b4:	mov	r3, r0
   129b8:	mov	r0, #0
   129bc:	mov	r1, r4
   129c0:	mov	r2, r6
   129c4:	bl	112e0 <error@plt>
   129c8:	mov	r6, #1
   129cc:	mov	r4, #0
   129d0:	ldr	r0, [fp, #16]
   129d4:	ldr	r0, [r0]
   129d8:	cmp	r0, #2
   129dc:	bne	122f4 <__assert_fail@plt+0xe34>
   129e0:	b	128d8 <__assert_fail@plt+0x1418>
   129e4:	mov	r6, #1
   129e8:	ldr	r0, [fp, #16]
   129ec:	ldr	r0, [r0]
   129f0:	cmp	r0, #2
   129f4:	bne	122f4 <__assert_fail@plt+0xe34>
   129f8:	b	128d8 <__assert_fail@plt+0x1418>
   129fc:	ldr	sl, [sp, #20]
   12a00:	cmp	r6, #0
   12a04:	mov	r4, r8
   12a08:	mov	r0, #0
   12a0c:	beq	12b90 <__assert_fail@plt+0x16d0>
   12a10:	movw	r1, #48248	; 0xbc78
   12a14:	movt	r1, #1
   12a18:	b	12bc0 <__assert_fail@plt+0x1700>
   12a1c:	movw	r1, #48405	; 0xbd15
   12a20:	movw	r0, #48479	; 0xbd5f
   12a24:	cmp	r6, #0
   12a28:	mov	r2, #5
   12a2c:	movt	r1, #1
   12a30:	movt	r0, #1
   12a34:	movne	r1, r0
   12a38:	movw	r0, #48439	; 0xbd37
   12a3c:	cmp	r4, #0
   12a40:	movt	r0, #1
   12a44:	movne	r1, r0
   12a48:	mov	r0, #0
   12a4c:	bl	1125c <dcgettext@plt>
   12a50:	mov	r6, r0
   12a54:	mov	r0, #0
   12a58:	bl	12e98 <__assert_fail@plt+0x19d8>
   12a5c:	str	sl, [sp, #16]
   12a60:	mov	r5, #0
   12a64:	mov	r4, r8
   12a68:	b	12bb0 <__assert_fail@plt+0x16f0>
   12a6c:	cmp	r6, #0
   12a70:	mov	r4, r8
   12a74:	mov	r5, sl
   12a78:	mov	r0, #0
   12a7c:	beq	12b9c <__assert_fail@plt+0x16dc>
   12a80:	movw	r1, #48547	; 0xbda3
   12a84:	movt	r1, #1
   12a88:	b	12ba4 <__assert_fail@plt+0x16e4>
   12a8c:	movw	r1, #47705	; 0xba59
   12a90:	mov	r0, #0
   12a94:	mov	r2, #5
   12a98:	movt	r1, #1
   12a9c:	bl	1125c <dcgettext@plt>
   12aa0:	mov	r6, r0
   12aa4:	mov	r0, #4
   12aa8:	mov	r1, r4
   12aac:	bl	18654 <__assert_fail@plt+0x7194>
   12ab0:	mov	r3, r0
   12ab4:	mov	r0, #0
   12ab8:	mov	r1, #0
   12abc:	mov	r2, r6
   12ac0:	bl	112e0 <error@plt>
   12ac4:	movw	r1, #47808	; 0xbac0
   12ac8:	mov	r0, #0
   12acc:	mov	r2, #5
   12ad0:	mov	r4, #0
   12ad4:	movt	r1, #1
   12ad8:	bl	1125c <dcgettext@plt>
   12adc:	mov	r2, r0
   12ae0:	mov	r0, #0
   12ae4:	mov	r1, #0
   12ae8:	bl	112e0 <error@plt>
   12aec:	b	12c24 <__assert_fail@plt+0x1764>
   12af0:	ldr	sl, [sp, #20]
   12af4:	cmp	r6, #0
   12af8:	mov	r4, r8
   12afc:	mov	r0, #0
   12b00:	beq	12bb8 <__assert_fail@plt+0x16f8>
   12b04:	movw	r1, #48361	; 0xbce9
   12b08:	movt	r1, #1
   12b0c:	b	12bc0 <__assert_fail@plt+0x1700>
   12b10:	movw	r1, #47705	; 0xba59
   12b14:	mov	r0, #0
   12b18:	mov	r2, #5
   12b1c:	movt	r1, #1
   12b20:	bl	1125c <dcgettext@plt>
   12b24:	mov	r6, r0
   12b28:	mov	r0, #4
   12b2c:	mov	r1, r4
   12b30:	bl	18654 <__assert_fail@plt+0x7194>
   12b34:	mov	r3, r0
   12b38:	mov	r0, #0
   12b3c:	mov	r1, #0
   12b40:	mov	r2, r6
   12b44:	bl	112e0 <error@plt>
   12b48:	movw	r1, #47808	; 0xbac0
   12b4c:	mov	r0, #0
   12b50:	mov	r2, #5
   12b54:	movt	r1, #1
   12b58:	bl	1125c <dcgettext@plt>
   12b5c:	mov	r2, r0
   12b60:	mov	r0, #0
   12b64:	mov	r1, #0
   12b68:	bl	112e0 <error@plt>
   12b6c:	ldr	r4, [sp, #44]	; 0x2c
   12b70:	mov	r1, r9
   12b74:	mov	r2, #4
   12b78:	mov	r0, r4
   12b7c:	bl	151fc <__assert_fail@plt+0x3d3c>
   12b80:	mov	r0, r4
   12b84:	mov	r4, #0
   12b88:	bl	13968 <__assert_fail@plt+0x24a8>
   12b8c:	b	12c24 <__assert_fail@plt+0x1764>
   12b90:	movw	r1, #48283	; 0xbc9b
   12b94:	movt	r1, #1
   12b98:	b	12bc0 <__assert_fail@plt+0x1700>
   12b9c:	movw	r1, #48575	; 0xbdbf
   12ba0:	movt	r1, #1
   12ba4:	mov	r2, #5
   12ba8:	bl	1125c <dcgettext@plt>
   12bac:	mov	r6, r0
   12bb0:	ldr	sl, [sp, #20]
   12bb4:	b	12bcc <__assert_fail@plt+0x170c>
   12bb8:	movw	r1, #48405	; 0xbd15
   12bbc:	movt	r1, #1
   12bc0:	mov	r2, #5
   12bc4:	bl	1125c <dcgettext@plt>
   12bc8:	mov	r6, r0
   12bcc:	ldr	r1, [sp, #40]	; 0x28
   12bd0:	mov	r0, #4
   12bd4:	bl	18654 <__assert_fail@plt+0x7194>
   12bd8:	mov	r1, r6
   12bdc:	ldr	r6, [sp, #16]
   12be0:	mov	r2, r0
   12be4:	mov	r0, #1
   12be8:	str	r5, [sp]
   12bec:	mov	r3, r6
   12bf0:	bl	113a0 <__printf_chk@plt>
   12bf4:	mov	r0, r6
   12bf8:	bl	12e98 <__assert_fail@plt+0x19d8>
   12bfc:	mov	r0, r5
   12c00:	bl	12e98 <__assert_fail@plt+0x19d8>
   12c04:	ldr	r0, [sp, #36]	; 0x24
   12c08:	bl	12e98 <__assert_fail@plt+0x19d8>
   12c0c:	mov	r0, sl
   12c10:	bl	12e98 <__assert_fail@plt+0x19d8>
   12c14:	ldr	r5, [fp, #16]
   12c18:	ldrb	r0, [r5, #4]
   12c1c:	cmp	r0, #0
   12c20:	beq	128e8 <__assert_fail@plt+0x1428>
   12c24:	ldr	r0, [sp, #44]	; 0x2c
   12c28:	and	r7, r7, r4
   12c2c:	bl	13968 <__assert_fail@plt+0x24a8>
   12c30:	mov	r9, r0
   12c34:	cmp	r0, #0
   12c38:	bne	12000 <__assert_fail@plt+0xb40>
   12c3c:	b	12c68 <__assert_fail@plt+0x17a8>
   12c40:	ldr	r0, [sp, #36]	; 0x24
   12c44:	bl	11484 <close@plt>
   12c48:	cmp	r0, #0
   12c4c:	mov	r0, #6
   12c50:	movweq	r0, #2
   12c54:	sub	r0, r0, #2
   12c58:	cmp	r0, #4
   12c5c:	bls	12898 <__assert_fail@plt+0x13d8>
   12c60:	bl	11478 <abort@plt>
   12c64:	mov	r7, #1
   12c68:	bl	1137c <__errno_location@plt>
   12c6c:	ldr	r4, [r0]
   12c70:	mov	r5, r0
   12c74:	cmp	r4, #0
   12c78:	beq	12cb8 <__assert_fail@plt+0x17f8>
   12c7c:	ldr	r0, [fp, #16]
   12c80:	mov	r7, #0
   12c84:	ldrb	r0, [r0, #13]
   12c88:	cmp	r0, #0
   12c8c:	bne	12cb8 <__assert_fail@plt+0x17f8>
   12c90:	movw	r1, #47672	; 0xba38
   12c94:	mov	r0, #0
   12c98:	mov	r2, #5
   12c9c:	mov	r7, #0
   12ca0:	movt	r1, #1
   12ca4:	bl	1125c <dcgettext@plt>
   12ca8:	mov	r2, r0
   12cac:	mov	r0, #0
   12cb0:	mov	r1, r4
   12cb4:	bl	112e0 <error@plt>
   12cb8:	ldr	r0, [sp, #44]	; 0x2c
   12cbc:	bl	137c0 <__assert_fail@plt+0x2300>
   12cc0:	cmp	r0, #0
   12cc4:	beq	12cf4 <__assert_fail@plt+0x1834>
   12cc8:	ldr	r4, [r5]
   12ccc:	movw	r1, #47688	; 0xba48
   12cd0:	mov	r0, #0
   12cd4:	mov	r2, #5
   12cd8:	mov	r7, #0
   12cdc:	movt	r1, #1
   12ce0:	bl	1125c <dcgettext@plt>
   12ce4:	mov	r2, r0
   12ce8:	mov	r0, #0
   12cec:	mov	r1, r4
   12cf0:	bl	112e0 <error@plt>
   12cf4:	mov	r0, r7
   12cf8:	sub	sp, fp, #28
   12cfc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12d00:	push	{r4, r5, r6, sl, fp, lr}
   12d04:	add	fp, sp, #16
   12d08:	mov	r4, r1
   12d0c:	cmp	r0, #0
   12d10:	beq	12d64 <__assert_fail@plt+0x18a4>
   12d14:	mov	r5, r0
   12d18:	cmp	r4, #0
   12d1c:	beq	12d80 <__assert_fail@plt+0x18c0>
   12d20:	mov	r0, r5
   12d24:	bl	1134c <strlen@plt>
   12d28:	mov	r6, r0
   12d2c:	mov	r0, r4
   12d30:	bl	1134c <strlen@plt>
   12d34:	add	r0, r6, r0
   12d38:	add	r0, r0, #2
   12d3c:	bl	192f0 <__assert_fail@plt+0x7e30>
   12d40:	mov	r1, r5
   12d44:	mov	r6, r0
   12d48:	bl	11250 <stpcpy@plt>
   12d4c:	mov	r1, #58	; 0x3a
   12d50:	strh	r1, [r0], #1
   12d54:	mov	r1, r4
   12d58:	bl	11250 <stpcpy@plt>
   12d5c:	mov	r0, r6
   12d60:	pop	{r4, r5, r6, sl, fp, pc}
   12d64:	cmp	r4, #0
   12d68:	moveq	r6, #0
   12d6c:	moveq	r0, r6
   12d70:	popeq	{r4, r5, r6, sl, fp, pc}
   12d74:	mov	r0, r4
   12d78:	bl	19810 <__assert_fail@plt+0x8350>
   12d7c:	pop	{r4, r5, r6, sl, fp, pc}
   12d80:	mov	r0, r5
   12d84:	bl	19810 <__assert_fail@plt+0x8350>
   12d88:	pop	{r4, r5, r6, sl, fp, pc}
   12d8c:	movw	r1, #53672	; 0xd1a8
   12d90:	movt	r1, #2
   12d94:	str	r0, [r1, #4]
   12d98:	bx	lr
   12d9c:	movw	r1, #53672	; 0xd1a8
   12da0:	movt	r1, #2
   12da4:	strb	r0, [r1]
   12da8:	bx	lr
   12dac:	push	{r4, r5, r6, sl, fp, lr}
   12db0:	add	fp, sp, #16
   12db4:	sub	sp, sp, #8
   12db8:	movw	r0, #53636	; 0xd184
   12dbc:	movt	r0, #2
   12dc0:	ldr	r0, [r0]
   12dc4:	bl	1a69c <__assert_fail@plt+0x91dc>
   12dc8:	cmp	r0, #0
   12dcc:	beq	12df4 <__assert_fail@plt+0x1934>
   12dd0:	movw	r5, #53672	; 0xd1a8
   12dd4:	movt	r5, #2
   12dd8:	ldrb	r0, [r5]
   12ddc:	cmp	r0, #0
   12de0:	beq	12e20 <__assert_fail@plt+0x1960>
   12de4:	bl	1137c <__errno_location@plt>
   12de8:	ldr	r0, [r0]
   12dec:	cmp	r0, #32
   12df0:	bne	12e20 <__assert_fail@plt+0x1960>
   12df4:	movw	r0, #53632	; 0xd180
   12df8:	movt	r0, #2
   12dfc:	ldr	r0, [r0]
   12e00:	bl	1a69c <__assert_fail@plt+0x91dc>
   12e04:	cmp	r0, #0
   12e08:	subeq	sp, fp, #16
   12e0c:	popeq	{r4, r5, r6, sl, fp, pc}
   12e10:	movw	r0, #53548	; 0xd12c
   12e14:	movt	r0, #2
   12e18:	ldr	r0, [r0]
   12e1c:	bl	11214 <_exit@plt>
   12e20:	movw	r1, #48616	; 0xbde8
   12e24:	mov	r0, #0
   12e28:	mov	r2, #5
   12e2c:	movt	r1, #1
   12e30:	bl	1125c <dcgettext@plt>
   12e34:	ldr	r6, [r5, #4]
   12e38:	mov	r4, r0
   12e3c:	bl	1137c <__errno_location@plt>
   12e40:	ldr	r5, [r0]
   12e44:	cmp	r6, #0
   12e48:	bne	12e64 <__assert_fail@plt+0x19a4>
   12e4c:	movw	r2, #47403	; 0xb92b
   12e50:	mov	r0, #0
   12e54:	mov	r1, r5
   12e58:	mov	r3, r4
   12e5c:	movt	r2, #1
   12e60:	b	12e84 <__assert_fail@plt+0x19c4>
   12e64:	mov	r0, r6
   12e68:	bl	187f4 <__assert_fail@plt+0x7334>
   12e6c:	movw	r2, #48628	; 0xbdf4
   12e70:	mov	r3, r0
   12e74:	str	r4, [sp]
   12e78:	mov	r0, #0
   12e7c:	mov	r1, r5
   12e80:	movt	r2, #1
   12e84:	bl	112e0 <error@plt>
   12e88:	movw	r0, #53548	; 0xd12c
   12e8c:	movt	r0, #2
   12e90:	ldr	r0, [r0]
   12e94:	bl	11214 <_exit@plt>
   12e98:	push	{r4, r5, r6, sl, fp, lr}
   12e9c:	add	fp, sp, #16
   12ea0:	mov	r4, r0
   12ea4:	bl	1137c <__errno_location@plt>
   12ea8:	ldr	r6, [r0]
   12eac:	mov	r5, r0
   12eb0:	mov	r0, r4
   12eb4:	bl	11208 <free@plt>
   12eb8:	str	r6, [r5]
   12ebc:	pop	{r4, r5, r6, sl, fp, pc}
   12ec0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12ec4:	add	fp, sp, #28
   12ec8:	sub	sp, sp, #28
   12ecc:	cmp	r1, #4096	; 0x1000
   12ed0:	bcs	12eec <__assert_fail@plt+0x1a2c>
   12ed4:	mov	sl, r0
   12ed8:	and	r0, r1, #516	; 0x204
   12edc:	mov	r6, r1
   12ee0:	cmp	r0, #516	; 0x204
   12ee4:	tstne	r6, #18
   12ee8:	bne	12f08 <__assert_fail@plt+0x1a48>
   12eec:	bl	1137c <__errno_location@plt>
   12ef0:	mov	r1, #22
   12ef4:	mov	r4, #0
   12ef8:	str	r1, [r0]
   12efc:	mov	r0, r4
   12f00:	sub	sp, fp, #28
   12f04:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12f08:	mov	r0, #1
   12f0c:	mov	r1, #96	; 0x60
   12f10:	mov	r5, r2
   12f14:	bl	1a5c4 <__assert_fail@plt+0x9104>
   12f18:	cmp	r0, #0
   12f1c:	beq	134d8 <__assert_fail@plt+0x2018>
   12f20:	mov	r4, r0
   12f24:	mvn	r0, #99	; 0x63
   12f28:	tst	r6, #2
   12f2c:	mov	r1, r6
   12f30:	str	r0, [r4, #32]
   12f34:	bic	r0, r6, #516	; 0x204
   12f38:	str	r5, [r4, #44]	; 0x2c
   12f3c:	str	r4, [sp, #24]
   12f40:	orrne	r1, r0, #4
   12f44:	str	r1, [r4, #48]	; 0x30
   12f48:	ldr	r0, [sl]
   12f4c:	cmp	r0, #0
   12f50:	beq	12fb4 <__assert_fail@plt+0x1af4>
   12f54:	add	r7, sl, #4
   12f58:	mov	r4, #0
   12f5c:	bl	1134c <strlen@plt>
   12f60:	cmp	r0, r4
   12f64:	movhi	r4, r0
   12f68:	ldr	r0, [r7], #4
   12f6c:	cmp	r0, #0
   12f70:	bne	12f5c <__assert_fail@plt+0x1a9c>
   12f74:	add	r0, r4, #1
   12f78:	ldr	r4, [sp, #24]
   12f7c:	cmp	r0, #4096	; 0x1000
   12f80:	movls	r0, #4096	; 0x1000
   12f84:	ldr	r1, [r4, #36]	; 0x24
   12f88:	add	r0, r0, #256	; 0x100
   12f8c:	adds	r1, r0, r1
   12f90:	bcc	12fc8 <__assert_fail@plt+0x1b08>
   12f94:	ldr	r0, [r4, #24]
   12f98:	bl	12e98 <__assert_fail@plt+0x19d8>
   12f9c:	mov	r0, #0
   12fa0:	str	r0, [r4, #24]
   12fa4:	bl	1137c <__errno_location@plt>
   12fa8:	mov	r1, #36	; 0x24
   12fac:	str	r1, [r0]
   12fb0:	b	134d0 <__assert_fail@plt+0x2010>
   12fb4:	mov	r0, #4096	; 0x1000
   12fb8:	ldr	r1, [r4, #36]	; 0x24
   12fbc:	add	r0, r0, #256	; 0x100
   12fc0:	adds	r1, r0, r1
   12fc4:	bcs	12f94 <__assert_fail@plt+0x1ad4>
   12fc8:	str	r1, [r4, #36]	; 0x24
   12fcc:	ldr	r0, [r4, #24]
   12fd0:	bl	1a648 <__assert_fail@plt+0x9188>
   12fd4:	cmp	r0, #0
   12fd8:	beq	1303c <__assert_fail@plt+0x1b7c>
   12fdc:	str	r0, [r4, #24]
   12fe0:	ldr	r0, [sl]
   12fe4:	cmp	r0, #0
   12fe8:	beq	13050 <__assert_fail@plt+0x1b90>
   12fec:	mov	r0, #176	; 0xb0
   12ff0:	bl	1a618 <__assert_fail@plt+0x9158>
   12ff4:	cmp	r0, #0
   12ff8:	beq	134c8 <__assert_fail@plt+0x2008>
   12ffc:	ldr	r1, [r4, #24]
   13000:	mov	r7, r0
   13004:	mov	r0, #0
   13008:	mov	r2, #196608	; 0x30000
   1300c:	strb	r0, [r7, #168]	; 0xa8
   13010:	str	r2, [r7, #58]	; 0x3a
   13014:	mvn	r2, #0
   13018:	str	r0, [r7, #12]
   1301c:	str	r0, [r7, #16]
   13020:	str	r0, [r7, #20]
   13024:	str	r4, [r7, #44]	; 0x2c
   13028:	str	r2, [r7, #48]	; 0x30
   1302c:	str	r0, [r7, #52]	; 0x34
   13030:	str	r1, [r7, #28]
   13034:	str	r0, [r7, #32]
   13038:	b	13054 <__assert_fail@plt+0x1b94>
   1303c:	ldr	r0, [r4, #24]
   13040:	bl	12e98 <__assert_fail@plt+0x19d8>
   13044:	mov	r0, #0
   13048:	str	r0, [r4, #24]
   1304c:	b	134d0 <__assert_fail@plt+0x2010>
   13050:	mov	r7, #0
   13054:	cmp	r5, #0
   13058:	ldrbne	r0, [r4, #49]	; 0x31
   1305c:	ubfxne	r0, r0, #2, #1
   13060:	ldr	r4, [sl]
   13064:	moveq	r0, #1
   13068:	str	r0, [sp, #12]
   1306c:	cmp	r4, #0
   13070:	beq	131d8 <__assert_fail@plt+0x1d18>
   13074:	tst	r6, #2048	; 0x800
   13078:	str	r7, [sp, #20]
   1307c:	str	r5, [sp, #16]
   13080:	bne	131fc <__assert_fail@plt+0x1d3c>
   13084:	mov	r0, #0
   13088:	mov	r8, #0
   1308c:	mov	r5, #0
   13090:	str	r0, [sp, #8]
   13094:	mov	r0, r4
   13098:	bl	1134c <strlen@plt>
   1309c:	mov	r9, r0
   130a0:	cmp	r0, #3
   130a4:	bcc	130d4 <__assert_fail@plt+0x1c14>
   130a8:	add	r0, r4, r9
   130ac:	ldrb	r0, [r0, #-1]
   130b0:	cmp	r0, #47	; 0x2f
   130b4:	bne	130d4 <__assert_fail@plt+0x1c14>
   130b8:	sub	r0, r4, #2
   130bc:	ldrb	r1, [r0, r9]
   130c0:	cmp	r1, #47	; 0x2f
   130c4:	bne	130d4 <__assert_fail@plt+0x1c14>
   130c8:	sub	r9, r9, #1
   130cc:	cmp	r9, #1
   130d0:	bhi	130bc <__assert_fail@plt+0x1bfc>
   130d4:	add	r0, r9, #176	; 0xb0
   130d8:	bic	r0, r0, #7
   130dc:	bl	1a618 <__assert_fail@plt+0x9158>
   130e0:	cmp	r0, #0
   130e4:	beq	1333c <__assert_fail@plt+0x1e7c>
   130e8:	add	r6, r0, #168	; 0xa8
   130ec:	mov	r7, r0
   130f0:	mov	r1, r4
   130f4:	mov	r2, r9
   130f8:	mov	r0, r6
   130fc:	bl	11220 <memcpy@plt>
   13100:	ldr	r0, [sp, #24]
   13104:	mov	r4, #0
   13108:	mov	r1, #196608	; 0x30000
   1310c:	cmp	r8, #0
   13110:	strb	r4, [r6, r9]
   13114:	str	r1, [r7, #58]	; 0x3a
   13118:	add	r1, r7, #44	; 0x2c
   1311c:	ldr	r2, [r0, #24]
   13120:	stm	r1, {r0, r4, r9}
   13124:	ldr	r1, [sp, #20]
   13128:	str	r1, [r7, #4]
   1312c:	str	r4, [r7, #12]
   13130:	str	r4, [r7, #16]
   13134:	str	r4, [r7, #20]
   13138:	str	r6, [r7, #24]
   1313c:	str	r2, [r7, #28]
   13140:	ldr	r2, [sp, #12]
   13144:	mov	r1, r8
   13148:	str	r4, [r7, #32]
   1314c:	movwne	r1, #1
   13150:	tst	r2, r1
   13154:	beq	13184 <__assert_fail@plt+0x1cc4>
   13158:	mov	r0, #2
   1315c:	str	r0, [r7, #112]	; 0x70
   13160:	mov	r0, #11
   13164:	str	r4, [r7, #116]	; 0x74
   13168:	strh	r0, [r7, #56]	; 0x38
   1316c:	ldr	r0, [sp, #16]
   13170:	cmp	r0, #0
   13174:	beq	131a0 <__assert_fail@plt+0x1ce0>
   13178:	str	r8, [r7, #8]
   1317c:	mov	r8, r7
   13180:	b	131b8 <__assert_fail@plt+0x1cf8>
   13184:	mov	r1, r7
   13188:	mov	r2, #0
   1318c:	bl	13524 <__assert_fail@plt+0x2064>
   13190:	strh	r0, [r7, #56]	; 0x38
   13194:	ldr	r0, [sp, #16]
   13198:	cmp	r0, #0
   1319c:	bne	13178 <__assert_fail@plt+0x1cb8>
   131a0:	cmp	r8, #0
   131a4:	str	r4, [r7, #8]
   131a8:	beq	131cc <__assert_fail@plt+0x1d0c>
   131ac:	ldr	r0, [sp, #8]
   131b0:	str	r7, [sp, #8]
   131b4:	str	r7, [r0, #8]
   131b8:	ldr	r4, [sl, #4]!
   131bc:	add	r5, r5, #1
   131c0:	cmp	r4, #0
   131c4:	bne	13094 <__assert_fail@plt+0x1bd4>
   131c8:	b	1334c <__assert_fail@plt+0x1e8c>
   131cc:	mov	r0, r7
   131d0:	str	r7, [sp, #8]
   131d4:	b	1317c <__assert_fail@plt+0x1cbc>
   131d8:	ldr	r4, [sp, #24]
   131dc:	mov	r8, #0
   131e0:	mov	r0, #176	; 0xb0
   131e4:	bl	1a618 <__assert_fail@plt+0x9158>
   131e8:	cmp	r0, #0
   131ec:	bne	133a8 <__assert_fail@plt+0x1ee8>
   131f0:	mov	r0, #0
   131f4:	str	r0, [r4]
   131f8:	b	1348c <__assert_fail@plt+0x1fcc>
   131fc:	add	r0, sl, #4
   13200:	mov	r9, #0
   13204:	mov	r8, #0
   13208:	mov	r5, #0
   1320c:	str	r0, [sp, #8]
   13210:	ldr	r0, [sp, #12]
   13214:	eor	r0, r0, #1
   13218:	str	r0, [sp, #12]
   1321c:	mov	r0, #0
   13220:	str	r0, [sp, #4]
   13224:	mov	r0, r4
   13228:	mov	sl, r5
   1322c:	bl	1134c <strlen@plt>
   13230:	mov	r7, r0
   13234:	add	r0, r0, #176	; 0xb0
   13238:	bic	r0, r0, #7
   1323c:	bl	1a618 <__assert_fail@plt+0x9158>
   13240:	cmp	r0, #0
   13244:	beq	1333c <__assert_fail@plt+0x1e7c>
   13248:	add	r6, r0, #168	; 0xa8
   1324c:	mov	r5, r0
   13250:	mov	r1, r4
   13254:	mov	r2, r7
   13258:	mov	r0, r6
   1325c:	bl	11220 <memcpy@plt>
   13260:	ldr	r0, [sp, #24]
   13264:	mov	r1, #196608	; 0x30000
   13268:	strb	r9, [r6, r7]
   1326c:	str	r1, [r5, #58]	; 0x3a
   13270:	ldr	r1, [sp, #20]
   13274:	ldr	r2, [r0, #24]
   13278:	str	r0, [r5, #44]	; 0x2c
   1327c:	str	r9, [r5, #48]	; 0x30
   13280:	str	r7, [r5, #52]	; 0x34
   13284:	str	r1, [r5, #4]
   13288:	str	r9, [r5, #12]
   1328c:	str	r9, [r5, #16]
   13290:	str	r9, [r5, #20]
   13294:	str	r6, [r5, #24]
   13298:	clz	r1, r8
   1329c:	lsr	r1, r1, #5
   132a0:	str	r2, [r5, #28]
   132a4:	ldr	r2, [sp, #12]
   132a8:	str	r9, [r5, #32]
   132ac:	orrs	r1, r2, r1
   132b0:	bne	132e0 <__assert_fail@plt+0x1e20>
   132b4:	mov	r0, #2
   132b8:	str	r0, [r5, #112]	; 0x70
   132bc:	str	r9, [r5, #116]	; 0x74
   132c0:	mov	r0, #11
   132c4:	strh	r0, [r5, #56]	; 0x38
   132c8:	ldr	r0, [sp, #16]
   132cc:	cmp	r0, #0
   132d0:	beq	132fc <__assert_fail@plt+0x1e3c>
   132d4:	str	r8, [r5, #8]
   132d8:	mov	r8, r5
   132dc:	b	13314 <__assert_fail@plt+0x1e54>
   132e0:	mov	r1, r5
   132e4:	mov	r2, #0
   132e8:	bl	13524 <__assert_fail@plt+0x2064>
   132ec:	strh	r0, [r5, #56]	; 0x38
   132f0:	ldr	r0, [sp, #16]
   132f4:	cmp	r0, #0
   132f8:	bne	132d4 <__assert_fail@plt+0x1e14>
   132fc:	cmp	r8, #0
   13300:	str	r9, [r5, #8]
   13304:	beq	13330 <__assert_fail@plt+0x1e70>
   13308:	ldr	r0, [sp, #4]
   1330c:	str	r5, [sp, #4]
   13310:	str	r5, [r0, #8]
   13314:	ldr	r0, [sp, #8]
   13318:	mov	r5, sl
   1331c:	add	r5, sl, #1
   13320:	ldr	r4, [r0, sl, lsl #2]
   13324:	cmp	r4, #0
   13328:	bne	13224 <__assert_fail@plt+0x1d64>
   1332c:	b	1334c <__assert_fail@plt+0x1e8c>
   13330:	mov	r0, r5
   13334:	str	r5, [sp, #4]
   13338:	b	132d8 <__assert_fail@plt+0x1e18>
   1333c:	ldr	r7, [sp, #20]
   13340:	cmp	r8, #0
   13344:	bne	13494 <__assert_fail@plt+0x1fd4>
   13348:	b	134bc <__assert_fail@plt+0x1ffc>
   1334c:	ldr	r0, [sp, #16]
   13350:	cmp	r0, #0
   13354:	beq	13390 <__assert_fail@plt+0x1ed0>
   13358:	ldr	r7, [sp, #20]
   1335c:	ldr	r4, [sp, #24]
   13360:	cmp	r5, #2
   13364:	bcc	13398 <__assert_fail@plt+0x1ed8>
   13368:	mov	r0, r4
   1336c:	mov	r1, r8
   13370:	mov	r2, r5
   13374:	bl	136bc <__assert_fail@plt+0x21fc>
   13378:	mov	r8, r0
   1337c:	mov	r0, #176	; 0xb0
   13380:	bl	1a618 <__assert_fail@plt+0x9158>
   13384:	cmp	r0, #0
   13388:	bne	133a8 <__assert_fail@plt+0x1ee8>
   1338c:	b	131f0 <__assert_fail@plt+0x1d30>
   13390:	ldr	r7, [sp, #20]
   13394:	ldr	r4, [sp, #24]
   13398:	mov	r0, #176	; 0xb0
   1339c:	bl	1a618 <__assert_fail@plt+0x9158>
   133a0:	cmp	r0, #0
   133a4:	beq	131f0 <__assert_fail@plt+0x1d30>
   133a8:	ldr	r2, [r4, #24]
   133ac:	mov	r1, #0
   133b0:	mov	r3, #196608	; 0x30000
   133b4:	str	r0, [r4]
   133b8:	str	r1, [r0, #52]	; 0x34
   133bc:	strb	r1, [r0, #168]	; 0xa8
   133c0:	str	r4, [r0, #44]	; 0x2c
   133c4:	str	r3, [r0, #58]	; 0x3a
   133c8:	str	r2, [r0, #28]
   133cc:	mov	r2, #9
   133d0:	str	r1, [r0, #32]
   133d4:	strh	r2, [r0, #56]	; 0x38
   133d8:	str	r8, [r0, #8]
   133dc:	str	r1, [r0, #12]
   133e0:	str	r1, [r0, #16]
   133e4:	str	r1, [r0, #20]
   133e8:	mov	r1, #1
   133ec:	str	r1, [r0, #48]	; 0x30
   133f0:	ldrh	r0, [r4, #48]	; 0x30
   133f4:	movw	r1, #258	; 0x102
   133f8:	tst	r0, r1
   133fc:	beq	13438 <__assert_fail@plt+0x1f78>
   13400:	movw	r0, #11928	; 0x2e98
   13404:	movw	r2, #21572	; 0x5444
   13408:	movw	r3, #21604	; 0x5464
   1340c:	mov	r1, #0
   13410:	movt	r0, #1
   13414:	movt	r2, #1
   13418:	movt	r3, #1
   1341c:	str	r0, [sp]
   13420:	mov	r0, #31
   13424:	bl	15b00 <__assert_fail@plt+0x4640>
   13428:	cmp	r0, #0
   1342c:	str	r0, [r4, #56]	; 0x38
   13430:	bne	13450 <__assert_fail@plt+0x1f90>
   13434:	b	1348c <__assert_fail@plt+0x1fcc>
   13438:	mov	r0, #32
   1343c:	bl	1a618 <__assert_fail@plt+0x9158>
   13440:	cmp	r0, #0
   13444:	str	r0, [r4, #56]	; 0x38
   13448:	beq	1348c <__assert_fail@plt+0x1fcc>
   1344c:	bl	1a720 <__assert_fail@plt+0x9260>
   13450:	ldr	r4, [sp, #24]
   13454:	ldr	r0, [r4, #48]	; 0x30
   13458:	tst	r0, #516	; 0x204
   1345c:	bne	1350c <__assert_fail@plt+0x204c>
   13460:	mov	r1, #32768	; 0x8000
   13464:	tst	r0, #512	; 0x200
   13468:	and	r1, r1, r0, lsl #11
   1346c:	orr	r1, r1, #18688	; 0x4900
   13470:	orr	r2, r1, #524288	; 0x80000
   13474:	bne	134e8 <__assert_fail@plt+0x2028>
   13478:	movw	r0, #48636	; 0xbdfc
   1347c:	mov	r1, r2
   13480:	movt	r0, #1
   13484:	bl	1aa90 <__assert_fail@plt+0x95d0>
   13488:	b	134f8 <__assert_fail@plt+0x2038>
   1348c:	cmp	r8, #0
   13490:	beq	134bc <__assert_fail@plt+0x1ffc>
   13494:	ldrd	r4, [r8, #8]
   13498:	cmp	r5, #0
   1349c:	beq	134a8 <__assert_fail@plt+0x1fe8>
   134a0:	mov	r0, r5
   134a4:	bl	1149c <closedir@plt>
   134a8:	mov	r0, r8
   134ac:	bl	12e98 <__assert_fail@plt+0x19d8>
   134b0:	cmp	r4, #0
   134b4:	mov	r8, r4
   134b8:	bne	13494 <__assert_fail@plt+0x1fd4>
   134bc:	mov	r0, r7
   134c0:	bl	12e98 <__assert_fail@plt+0x19d8>
   134c4:	ldr	r4, [sp, #24]
   134c8:	ldr	r0, [r4, #24]
   134cc:	bl	12e98 <__assert_fail@plt+0x19d8>
   134d0:	mov	r0, r4
   134d4:	bl	12e98 <__assert_fail@plt+0x19d8>
   134d8:	mov	r4, #0
   134dc:	mov	r0, r4
   134e0:	sub	sp, fp, #28
   134e4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   134e8:	ldr	r0, [r4, #32]
   134ec:	movw	r1, #48636	; 0xbdfc
   134f0:	movt	r1, #1
   134f4:	bl	16b60 <__assert_fail@plt+0x56a0>
   134f8:	str	r0, [r4, #28]
   134fc:	cmn	r0, #1
   13500:	ldrle	r0, [r4, #48]	; 0x30
   13504:	orrle	r0, r0, #4
   13508:	strle	r0, [r4, #48]	; 0x30
   1350c:	add	r0, r4, #60	; 0x3c
   13510:	mvn	r1, #0
   13514:	bl	16a34 <__assert_fail@plt+0x5574>
   13518:	mov	r0, r4
   1351c:	sub	sp, fp, #28
   13520:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13524:	push	{r4, r5, r6, sl, fp, lr}
   13528:	add	fp, sp, #16
   1352c:	sub	sp, sp, #8
   13530:	mov	r4, r1
   13534:	ldr	r1, [r0, #48]	; 0x30
   13538:	ldr	r3, [r4, #48]	; 0x30
   1353c:	add	r5, r4, #64	; 0x40
   13540:	cmp	r3, #0
   13544:	andeq	r3, r1, #1
   13548:	orreq	r2, r3, r2
   1354c:	cmp	r2, #0
   13550:	andseq	r1, r1, #2
   13554:	beq	135b0 <__assert_fail@plt+0x20f0>
   13558:	ldr	r1, [r4, #24]
   1355c:	mov	r0, #3
   13560:	mov	r2, r5
   13564:	bl	11460 <__xstat64@plt>
   13568:	cmp	r0, #0
   1356c:	beq	13630 <__assert_fail@plt+0x2170>
   13570:	bl	1137c <__errno_location@plt>
   13574:	mov	r6, r0
   13578:	ldr	r0, [r0]
   1357c:	cmp	r0, #2
   13580:	bne	135e0 <__assert_fail@plt+0x2120>
   13584:	ldr	r1, [r4, #24]
   13588:	mov	r0, #3
   1358c:	mov	r2, r5
   13590:	bl	11490 <__lxstat64@plt>
   13594:	cmp	r0, #0
   13598:	bne	135dc <__assert_fail@plt+0x211c>
   1359c:	mov	r0, #0
   135a0:	str	r0, [r6]
   135a4:	mov	r0, #13
   135a8:	sub	sp, fp, #16
   135ac:	pop	{r4, r5, r6, sl, fp, pc}
   135b0:	ldr	r1, [r0, #32]
   135b4:	ldr	r2, [r4, #24]
   135b8:	mov	r0, #256	; 0x100
   135bc:	mov	r3, r5
   135c0:	str	r0, [sp]
   135c4:	mov	r0, #3
   135c8:	bl	11280 <__fxstatat64@plt>
   135cc:	cmp	r0, #0
   135d0:	beq	13630 <__assert_fail@plt+0x2170>
   135d4:	bl	1137c <__errno_location@plt>
   135d8:	mov	r6, r0
   135dc:	ldr	r0, [r6]
   135e0:	vmov.i32	q8, #0	; 0x00000000
   135e4:	add	r1, r5, #80	; 0x50
   135e8:	str	r0, [r4, #32]
   135ec:	mov	r0, #0
   135f0:	vst1.64	{d16-d17}, [r1]
   135f4:	add	r1, r5, #64	; 0x40
   135f8:	str	r0, [r5, #96]	; 0x60
   135fc:	vst1.64	{d16-d17}, [r1]
   13600:	add	r1, r5, #48	; 0x30
   13604:	vst1.64	{d16-d17}, [r1]
   13608:	add	r1, r5, #32
   1360c:	vst1.64	{d16-d17}, [r1]
   13610:	add	r1, r5, #16
   13614:	vst1.64	{d16-d17}, [r1]
   13618:	mov	r1, #100	; 0x64
   1361c:	vst1.64	{d16-d17}, [r5], r1
   13620:	str	r0, [r5]
   13624:	mov	r0, #10
   13628:	sub	sp, fp, #16
   1362c:	pop	{r4, r5, r6, sl, fp, pc}
   13630:	ldr	r0, [r4, #80]	; 0x50
   13634:	and	r0, r0, #61440	; 0xf000
   13638:	cmp	r0, #40960	; 0xa000
   1363c:	beq	13698 <__assert_fail@plt+0x21d8>
   13640:	cmp	r0, #32768	; 0x8000
   13644:	moveq	r0, #8
   13648:	subeq	sp, fp, #16
   1364c:	popeq	{r4, r5, r6, sl, fp, pc}
   13650:	cmp	r0, #16384	; 0x4000
   13654:	bne	1368c <__assert_fail@plt+0x21cc>
   13658:	ldrb	r1, [r4, #168]	; 0xa8
   1365c:	mov	r0, #1
   13660:	cmp	r1, #46	; 0x2e
   13664:	bne	13684 <__assert_fail@plt+0x21c4>
   13668:	ldrb	r1, [r4, #169]	; 0xa9
   1366c:	cmp	r1, #0
   13670:	beq	136a4 <__assert_fail@plt+0x21e4>
   13674:	cmp	r1, #46	; 0x2e
   13678:	ldrbeq	r1, [r4, #170]	; 0xaa
   1367c:	cmpeq	r1, #0
   13680:	beq	136a4 <__assert_fail@plt+0x21e4>
   13684:	sub	sp, fp, #16
   13688:	pop	{r4, r5, r6, sl, fp, pc}
   1368c:	mov	r0, #3
   13690:	sub	sp, fp, #16
   13694:	pop	{r4, r5, r6, sl, fp, pc}
   13698:	mov	r0, #12
   1369c:	sub	sp, fp, #16
   136a0:	pop	{r4, r5, r6, sl, fp, pc}
   136a4:	ldr	r1, [r4, #48]	; 0x30
   136a8:	mov	r0, #5
   136ac:	cmp	r1, #0
   136b0:	movweq	r0, #1
   136b4:	sub	sp, fp, #16
   136b8:	pop	{r4, r5, r6, sl, fp, pc}
   136bc:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   136c0:	add	fp, sp, #24
   136c4:	ldrd	r8, [r0, #40]	; 0x28
   136c8:	mov	r5, r2
   136cc:	mov	r4, r1
   136d0:	mov	r6, r0
   136d4:	cmp	r8, r2
   136d8:	bcs	13718 <__assert_fail@plt+0x2258>
   136dc:	add	r1, r5, #40	; 0x28
   136e0:	cmn	r1, #-1073741823	; 0xc0000001
   136e4:	str	r1, [r6, #40]	; 0x28
   136e8:	bhi	137a4 <__assert_fail@plt+0x22e4>
   136ec:	add	r7, r6, #8
   136f0:	lsl	r1, r1, #2
   136f4:	ldr	r0, [r7]
   136f8:	bl	1a648 <__assert_fail@plt+0x9188>
   136fc:	cmp	r0, #0
   13700:	beq	137a4 <__assert_fail@plt+0x22e4>
   13704:	mov	r6, r7
   13708:	str	r0, [r7]
   1370c:	cmp	r4, #0
   13710:	bne	13724 <__assert_fail@plt+0x2264>
   13714:	b	13738 <__assert_fail@plt+0x2278>
   13718:	ldr	r0, [r6, #8]!
   1371c:	cmp	r4, #0
   13720:	beq	13738 <__assert_fail@plt+0x2278>
   13724:	str	r4, [r0], #4
   13728:	ldr	r4, [r4, #8]
   1372c:	cmp	r4, #0
   13730:	bne	13724 <__assert_fail@plt+0x2264>
   13734:	ldr	r0, [r6]
   13738:	mov	r1, r5
   1373c:	mov	r2, #4
   13740:	mov	r3, r9
   13744:	bl	1143c <qsort@plt>
   13748:	ldr	r7, [r6]
   1374c:	subs	r0, r5, #1
   13750:	ldr	r4, [r7]
   13754:	mov	r1, r4
   13758:	beq	13794 <__assert_fail@plt+0x22d4>
   1375c:	mov	r1, r7
   13760:	cmp	r5, #2
   13764:	ldr	r2, [r1, #4]!
   13768:	str	r2, [r4, #8]
   1376c:	beq	13790 <__assert_fail@plt+0x22d0>
   13770:	rsb	r3, r5, #2
   13774:	mov	r2, r1
   13778:	ldr	r6, [r2, #4]!
   1377c:	ldr	r1, [r1]
   13780:	adds	r3, r3, #1
   13784:	str	r6, [r1, #8]
   13788:	mov	r1, r2
   1378c:	bne	13778 <__assert_fail@plt+0x22b8>
   13790:	ldr	r1, [r7, r0, lsl #2]
   13794:	mov	r0, #0
   13798:	str	r0, [r1, #8]
   1379c:	mov	r0, r4
   137a0:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   137a4:	ldr	r0, [r6, #8]
   137a8:	bl	12e98 <__assert_fail@plt+0x19d8>
   137ac:	mov	r0, #0
   137b0:	str	r0, [r6, #40]	; 0x28
   137b4:	str	r0, [r6, #8]
   137b8:	mov	r0, r4
   137bc:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   137c0:	push	{r4, r5, r6, r7, fp, lr}
   137c4:	add	fp, sp, #16
   137c8:	mov	r4, r0
   137cc:	ldr	r0, [r0]
   137d0:	cmp	r0, #0
   137d4:	beq	13814 <__assert_fail@plt+0x2354>
   137d8:	ldr	r1, [r0, #48]	; 0x30
   137dc:	cmp	r1, #0
   137e0:	blt	13808 <__assert_fail@plt+0x2348>
   137e4:	ldr	r5, [r0, #8]
   137e8:	cmp	r5, #0
   137ec:	ldreq	r5, [r0, #4]
   137f0:	bl	12e98 <__assert_fail@plt+0x19d8>
   137f4:	ldr	r0, [r5, #48]	; 0x30
   137f8:	cmn	r0, #1
   137fc:	mov	r0, r5
   13800:	bgt	137e4 <__assert_fail@plt+0x2324>
   13804:	b	1380c <__assert_fail@plt+0x234c>
   13808:	mov	r5, r0
   1380c:	mov	r0, r5
   13810:	bl	12e98 <__assert_fail@plt+0x19d8>
   13814:	ldr	r5, [r4, #4]
   13818:	cmp	r5, #0
   1381c:	beq	13848 <__assert_fail@plt+0x2388>
   13820:	ldrd	r6, [r5, #8]
   13824:	cmp	r7, #0
   13828:	beq	13834 <__assert_fail@plt+0x2374>
   1382c:	mov	r0, r7
   13830:	bl	1149c <closedir@plt>
   13834:	mov	r0, r5
   13838:	bl	12e98 <__assert_fail@plt+0x19d8>
   1383c:	cmp	r6, #0
   13840:	mov	r5, r6
   13844:	bne	13820 <__assert_fail@plt+0x2360>
   13848:	ldr	r0, [r4, #8]
   1384c:	bl	12e98 <__assert_fail@plt+0x19d8>
   13850:	ldr	r0, [r4, #24]
   13854:	bl	12e98 <__assert_fail@plt+0x19d8>
   13858:	ldr	r0, [r4, #48]	; 0x30
   1385c:	tst	r0, #512	; 0x200
   13860:	bne	1389c <__assert_fail@plt+0x23dc>
   13864:	mov	r6, #0
   13868:	tst	r0, #4
   1386c:	bne	138c0 <__assert_fail@plt+0x2400>
   13870:	ldr	r0, [r4, #28]
   13874:	bl	11430 <fchdir@plt>
   13878:	cmp	r0, #0
   1387c:	beq	13950 <__assert_fail@plt+0x2490>
   13880:	bl	1137c <__errno_location@plt>
   13884:	ldr	r6, [r0]
   13888:	ldr	r0, [r4, #28]
   1388c:	bl	11484 <close@plt>
   13890:	cmp	r6, #0
   13894:	beq	138b0 <__assert_fail@plt+0x23f0>
   13898:	b	138c0 <__assert_fail@plt+0x2400>
   1389c:	ldr	r0, [r4, #32]
   138a0:	mov	r6, #0
   138a4:	cmp	r0, #0
   138a8:	blt	138c0 <__assert_fail@plt+0x2400>
   138ac:	bl	11484 <close@plt>
   138b0:	cmp	r0, #0
   138b4:	beq	138c0 <__assert_fail@plt+0x2400>
   138b8:	bl	1137c <__errno_location@plt>
   138bc:	ldr	r6, [r0]
   138c0:	add	r5, r4, #60	; 0x3c
   138c4:	b	138cc <__assert_fail@plt+0x240c>
   138c8:	bl	11484 <close@plt>
   138cc:	mov	r0, r5
   138d0:	bl	16a58 <__assert_fail@plt+0x5598>
   138d4:	cmp	r0, #0
   138d8:	bne	138f0 <__assert_fail@plt+0x2430>
   138dc:	mov	r0, r5
   138e0:	bl	16aac <__assert_fail@plt+0x55ec>
   138e4:	cmp	r0, #0
   138e8:	bge	138c8 <__assert_fail@plt+0x2408>
   138ec:	b	138cc <__assert_fail@plt+0x240c>
   138f0:	ldr	r0, [r4, #52]	; 0x34
   138f4:	cmp	r0, #0
   138f8:	beq	13900 <__assert_fail@plt+0x2440>
   138fc:	bl	15e1c <__assert_fail@plt+0x495c>
   13900:	ldrh	r0, [r4, #48]	; 0x30
   13904:	movw	r1, #258	; 0x102
   13908:	tst	r0, r1
   1390c:	beq	13924 <__assert_fail@plt+0x2464>
   13910:	ldr	r0, [r4, #56]	; 0x38
   13914:	cmp	r0, #0
   13918:	beq	1392c <__assert_fail@plt+0x246c>
   1391c:	bl	15e1c <__assert_fail@plt+0x495c>
   13920:	b	1392c <__assert_fail@plt+0x246c>
   13924:	ldr	r0, [r4, #56]	; 0x38
   13928:	bl	12e98 <__assert_fail@plt+0x19d8>
   1392c:	mov	r0, r4
   13930:	bl	12e98 <__assert_fail@plt+0x19d8>
   13934:	cmp	r6, #0
   13938:	moveq	r0, #0
   1393c:	popeq	{r4, r5, r6, r7, fp, pc}
   13940:	bl	1137c <__errno_location@plt>
   13944:	str	r6, [r0]
   13948:	mvn	r0, #0
   1394c:	pop	{r4, r5, r6, r7, fp, pc}
   13950:	mov	r6, #0
   13954:	ldr	r0, [r4, #28]
   13958:	bl	11484 <close@plt>
   1395c:	cmp	r6, #0
   13960:	beq	138b0 <__assert_fail@plt+0x23f0>
   13964:	b	138c0 <__assert_fail@plt+0x2400>
   13968:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1396c:	add	fp, sp, #28
   13970:	sub	sp, sp, #4
   13974:	ldr	r6, [r0]
   13978:	mov	sl, #0
   1397c:	cmp	r6, #0
   13980:	beq	14208 <__assert_fail@plt+0x2d48>
   13984:	mov	r4, r0
   13988:	ldr	r0, [r0, #48]	; 0x30
   1398c:	tst	r0, #8192	; 0x2000
   13990:	bne	14208 <__assert_fail@plt+0x2d48>
   13994:	ldrh	r1, [r6, #60]	; 0x3c
   13998:	mov	r2, #3
   1399c:	strh	r2, [r6, #60]	; 0x3c
   139a0:	cmp	r1, #1
   139a4:	beq	13a24 <__assert_fail@plt+0x2564>
   139a8:	mov	r5, r6
   139ac:	cmp	r1, #2
   139b0:	bne	13a48 <__assert_fail@plt+0x2588>
   139b4:	ldrh	r2, [r5, #56]!	; 0x38
   139b8:	movw	r3, #65534	; 0xfffe
   139bc:	and	r3, r2, r3
   139c0:	cmp	r3, #12
   139c4:	bne	13a4c <__assert_fail@plt+0x258c>
   139c8:	mov	r0, r4
   139cc:	mov	r1, r6
   139d0:	mov	r2, #1
   139d4:	bl	13524 <__assert_fail@plt+0x2064>
   139d8:	strh	r0, [r6, #56]	; 0x38
   139dc:	cmp	r0, #1
   139e0:	ldreq	r0, [r4, #48]	; 0x30
   139e4:	tsteq	r0, #4
   139e8:	bne	13d00 <__assert_fail@plt+0x2840>
   139ec:	mov	r1, #32768	; 0x8000
   139f0:	tst	r0, #512	; 0x200
   139f4:	and	r1, r1, r0, lsl #11
   139f8:	orr	r1, r1, #18688	; 0x4900
   139fc:	orr	r2, r1, #524288	; 0x80000
   13a00:	bne	13f14 <__assert_fail@plt+0x2a54>
   13a04:	movw	r0, #48636	; 0xbdfc
   13a08:	mov	r1, r2
   13a0c:	movt	r0, #1
   13a10:	bl	1aa90 <__assert_fail@plt+0x95d0>
   13a14:	cmn	r0, #1
   13a18:	str	r0, [r6, #36]	; 0x24
   13a1c:	bgt	13f30 <__assert_fail@plt+0x2a70>
   13a20:	b	13f74 <__assert_fail@plt+0x2ab4>
   13a24:	mov	r0, r4
   13a28:	mov	r1, r6
   13a2c:	mov	r2, #0
   13a30:	bl	13524 <__assert_fail@plt+0x2064>
   13a34:	strh	r0, [r6, #56]	; 0x38
   13a38:	mov	sl, r6
   13a3c:	mov	r0, sl
   13a40:	sub	sp, fp, #28
   13a44:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13a48:	ldrh	r2, [r5, #56]!	; 0x38
   13a4c:	cmp	r2, #1
   13a50:	bne	13ad0 <__assert_fail@plt+0x2610>
   13a54:	cmp	r1, #4
   13a58:	bne	13b40 <__assert_fail@plt+0x2680>
   13a5c:	ldrb	r0, [r6, #58]	; 0x3a
   13a60:	tst	r0, #2
   13a64:	beq	13a70 <__assert_fail@plt+0x25b0>
   13a68:	ldr	r0, [r6, #36]	; 0x24
   13a6c:	bl	11484 <close@plt>
   13a70:	ldr	r5, [r4, #4]
   13a74:	cmp	r5, #0
   13a78:	beq	13aac <__assert_fail@plt+0x25ec>
   13a7c:	ldrd	r8, [r5, #8]
   13a80:	cmp	r9, #0
   13a84:	beq	13a90 <__assert_fail@plt+0x25d0>
   13a88:	mov	r0, r9
   13a8c:	bl	1149c <closedir@plt>
   13a90:	mov	r0, r5
   13a94:	bl	12e98 <__assert_fail@plt+0x19d8>
   13a98:	cmp	r8, #0
   13a9c:	mov	r5, r8
   13aa0:	bne	13a7c <__assert_fail@plt+0x25bc>
   13aa4:	mov	r0, #0
   13aa8:	str	r0, [r4, #4]
   13aac:	mov	r0, #6
   13ab0:	strh	r0, [r6, #56]	; 0x38
   13ab4:	mov	r0, r4
   13ab8:	mov	r1, r6
   13abc:	bl	14218 <__assert_fail@plt+0x2d58>
   13ac0:	mov	sl, r6
   13ac4:	mov	r0, sl
   13ac8:	sub	sp, fp, #28
   13acc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13ad0:	mov	r7, r6
   13ad4:	ldr	r6, [r7, #8]
   13ad8:	cmp	r6, #0
   13adc:	beq	13bd0 <__assert_fail@plt+0x2710>
   13ae0:	mov	r0, r7
   13ae4:	str	r6, [r4]
   13ae8:	bl	12e98 <__assert_fail@plt+0x19d8>
   13aec:	ldr	r0, [r6, #48]	; 0x30
   13af0:	cmp	r0, #0
   13af4:	beq	13c18 <__assert_fail@plt+0x2758>
   13af8:	ldrh	r0, [r6, #60]	; 0x3c
   13afc:	mov	r7, r6
   13b00:	cmp	r0, #4
   13b04:	beq	13ad4 <__assert_fail@plt+0x2614>
   13b08:	cmp	r0, #2
   13b0c:	bne	13cc4 <__assert_fail@plt+0x2804>
   13b10:	mov	r0, r4
   13b14:	mov	r1, r6
   13b18:	mov	r2, #1
   13b1c:	bl	13524 <__assert_fail@plt+0x2064>
   13b20:	strh	r0, [r6, #56]	; 0x38
   13b24:	cmp	r0, #1
   13b28:	ldreq	r0, [r4, #48]	; 0x30
   13b2c:	tsteq	r0, #4
   13b30:	beq	14114 <__assert_fail@plt+0x2c54>
   13b34:	mov	r0, #3
   13b38:	strh	r0, [r6, #60]	; 0x3c
   13b3c:	b	13cc4 <__assert_fail@plt+0x2804>
   13b40:	tst	r0, #64	; 0x40
   13b44:	beq	13b60 <__assert_fail@plt+0x26a0>
   13b48:	ldrd	r2, [r4, #16]
   13b4c:	ldrd	r8, [r6, #64]	; 0x40
   13b50:	eor	r1, r9, r3
   13b54:	eor	r2, r8, r2
   13b58:	orrs	r1, r2, r1
   13b5c:	bne	13a5c <__assert_fail@plt+0x259c>
   13b60:	ldr	r7, [r4, #4]
   13b64:	cmp	r7, #0
   13b68:	beq	13ca0 <__assert_fail@plt+0x27e0>
   13b6c:	tst	r0, #4096	; 0x1000
   13b70:	bne	13c68 <__assert_fail@plt+0x27a8>
   13b74:	ldr	r3, [r6, #24]
   13b78:	mov	r0, r4
   13b7c:	mov	r1, r6
   13b80:	mvn	r2, #0
   13b84:	bl	142e8 <__assert_fail@plt+0x2e28>
   13b88:	cmp	r0, #0
   13b8c:	beq	13cb8 <__assert_fail@plt+0x27f8>
   13b90:	bl	1137c <__errno_location@plt>
   13b94:	ldr	r0, [r0]
   13b98:	str	r0, [r6, #32]
   13b9c:	ldrh	r0, [r6, #58]	; 0x3a
   13ba0:	orr	r0, r0, #1
   13ba4:	strh	r0, [r6, #58]	; 0x3a
   13ba8:	ldr	r0, [r4, #4]
   13bac:	cmp	r0, #0
   13bb0:	beq	13cb8 <__assert_fail@plt+0x27f8>
   13bb4:	ldmib	r0, {r1, r2}
   13bb8:	ldr	r1, [r1, #24]
   13bbc:	cmp	r2, #0
   13bc0:	str	r1, [r0, #24]
   13bc4:	mov	r0, r2
   13bc8:	bne	13bb4 <__assert_fail@plt+0x26f4>
   13bcc:	b	13cb8 <__assert_fail@plt+0x27f8>
   13bd0:	ldr	r0, [r7, #4]
   13bd4:	ldr	r1, [r0, #12]
   13bd8:	cmp	r1, #0
   13bdc:	beq	13c40 <__assert_fail@plt+0x2780>
   13be0:	str	r0, [r4]
   13be4:	mov	r2, #0
   13be8:	ldr	r1, [r4, #24]
   13bec:	ldr	r0, [r0, #40]	; 0x28
   13bf0:	strb	r2, [r1, r0]
   13bf4:	mov	r0, r4
   13bf8:	mov	r1, #3
   13bfc:	bl	14590 <__assert_fail@plt+0x30d0>
   13c00:	cmp	r0, #0
   13c04:	beq	13e88 <__assert_fail@plt+0x29c8>
   13c08:	mov	r6, r0
   13c0c:	mov	r0, r7
   13c10:	bl	12e98 <__assert_fail@plt+0x19d8>
   13c14:	b	13cc4 <__assert_fail@plt+0x2804>
   13c18:	mov	r0, r4
   13c1c:	bl	1516c <__assert_fail@plt+0x3cac>
   13c20:	ldr	r1, [r4, #48]	; 0x30
   13c24:	cmp	r0, #0
   13c28:	beq	13c48 <__assert_fail@plt+0x2788>
   13c2c:	orr	r0, r1, #8192	; 0x2000
   13c30:	str	r0, [r4, #48]	; 0x30
   13c34:	mov	r0, sl
   13c38:	sub	sp, fp, #28
   13c3c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13c40:	mov	sl, r0
   13c44:	b	13e9c <__assert_fail@plt+0x29dc>
   13c48:	movw	r0, #258	; 0x102
   13c4c:	tst	r1, r0
   13c50:	beq	13f9c <__assert_fail@plt+0x2adc>
   13c54:	ldr	r0, [r4, #56]	; 0x38
   13c58:	cmp	r0, #0
   13c5c:	beq	13fa4 <__assert_fail@plt+0x2ae4>
   13c60:	bl	15e1c <__assert_fail@plt+0x495c>
   13c64:	b	13fa4 <__assert_fail@plt+0x2ae4>
   13c68:	bic	r0, r0, #4096	; 0x1000
   13c6c:	str	r0, [r4, #48]	; 0x30
   13c70:	ldrd	r8, [r7, #8]
   13c74:	cmp	r9, #0
   13c78:	beq	13c84 <__assert_fail@plt+0x27c4>
   13c7c:	mov	r0, r9
   13c80:	bl	1149c <closedir@plt>
   13c84:	mov	r0, r7
   13c88:	bl	12e98 <__assert_fail@plt+0x19d8>
   13c8c:	cmp	r8, #0
   13c90:	mov	r7, r8
   13c94:	bne	13c70 <__assert_fail@plt+0x27b0>
   13c98:	mov	r0, #0
   13c9c:	str	r0, [r4, #4]
   13ca0:	mov	r0, r4
   13ca4:	mov	r1, #3
   13ca8:	bl	14590 <__assert_fail@plt+0x30d0>
   13cac:	cmp	r0, #0
   13cb0:	str	r0, [r4, #4]
   13cb4:	beq	13e50 <__assert_fail@plt+0x2990>
   13cb8:	ldr	r6, [r4, #4]
   13cbc:	mov	r0, #0
   13cc0:	str	r0, [r4, #4]
   13cc4:	ldr	r0, [r6, #4]
   13cc8:	ldr	r1, [r0, #28]
   13ccc:	ldr	r0, [r0, #40]	; 0x28
   13cd0:	sub	r2, r0, #1
   13cd4:	ldrb	r1, [r1, r2]
   13cd8:	cmp	r1, #47	; 0x2f
   13cdc:	ldr	r1, [r4, #24]
   13ce0:	moveq	r0, r2
   13ce4:	mov	r2, #47	; 0x2f
   13ce8:	strb	r2, [r1, r0]!
   13cec:	ldr	r2, [r6, #52]	; 0x34
   13cf0:	add	r0, r1, #1
   13cf4:	add	r1, r6, #168	; 0xa8
   13cf8:	add	r2, r2, #1
   13cfc:	bl	111fc <memmove@plt>
   13d00:	str	r6, [r4]
   13d04:	ldrh	r0, [r6, #56]	; 0x38
   13d08:	cmp	r0, #11
   13d0c:	bne	13d40 <__assert_fail@plt+0x2880>
   13d10:	ldrd	r0, [r6, #112]	; 0x70
   13d14:	eor	r2, r0, #1
   13d18:	orrs	r2, r2, r1
   13d1c:	beq	13de8 <__assert_fail@plt+0x2928>
   13d20:	eor	r0, r0, #2
   13d24:	orrs	r0, r0, r1
   13d28:	bne	14214 <__assert_fail@plt+0x2d54>
   13d2c:	mov	r0, r4
   13d30:	mov	r1, r6
   13d34:	mov	r2, #0
   13d38:	bl	13524 <__assert_fail@plt+0x2064>
   13d3c:	strh	r0, [r6, #56]	; 0x38
   13d40:	cmp	r0, #1
   13d44:	bne	13dd8 <__assert_fail@plt+0x2918>
   13d48:	ldr	r0, [r6, #48]	; 0x30
   13d4c:	cmp	r0, #0
   13d50:	ldrdeq	r0, [r6, #64]	; 0x40
   13d54:	strdeq	r0, [r4, #16]
   13d58:	movw	r1, #258	; 0x102
   13d5c:	ldrh	r0, [r4, #48]	; 0x30
   13d60:	tst	r0, r1
   13d64:	beq	13df8 <__assert_fail@plt+0x2938>
   13d68:	mov	r0, #24
   13d6c:	bl	1a618 <__assert_fail@plt+0x9158>
   13d70:	cmp	r0, #0
   13d74:	beq	13e28 <__assert_fail@plt+0x2968>
   13d78:	mov	r7, r0
   13d7c:	ldrd	r0, [r6, #64]	; 0x40
   13d80:	add	r2, r7, #8
   13d84:	stm	r7, {r0, r1}
   13d88:	ldrd	r0, [r6, #160]	; 0xa0
   13d8c:	stm	r2, {r0, r1, r6}
   13d90:	mov	r1, r7
   13d94:	ldr	r0, [r4, #56]	; 0x38
   13d98:	bl	16738 <__assert_fail@plt+0x5278>
   13d9c:	cmp	r0, r7
   13da0:	beq	13e78 <__assert_fail@plt+0x29b8>
   13da4:	mov	r4, r0
   13da8:	mov	r0, r7
   13dac:	bl	12e98 <__assert_fail@plt+0x19d8>
   13db0:	cmp	r4, #0
   13db4:	beq	13e28 <__assert_fail@plt+0x2968>
   13db8:	ldr	r0, [r4, #16]
   13dbc:	mov	r1, #2
   13dc0:	mov	sl, r6
   13dc4:	strh	r1, [r6, #56]	; 0x38
   13dc8:	str	r0, [r6]
   13dcc:	mov	r0, sl
   13dd0:	sub	sp, fp, #28
   13dd4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13dd8:	mov	sl, r6
   13ddc:	mov	r0, sl
   13de0:	sub	sp, fp, #28
   13de4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13de8:	mov	sl, r6
   13dec:	mov	r0, sl
   13df0:	sub	sp, fp, #28
   13df4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13df8:	ldr	r0, [r4, #56]	; 0x38
   13dfc:	add	r1, r6, #64	; 0x40
   13e00:	bl	1a73c <__assert_fail@plt+0x927c>
   13e04:	cmp	r0, #0
   13e08:	beq	13e40 <__assert_fail@plt+0x2980>
   13e0c:	mov	r0, #2
   13e10:	mov	sl, r6
   13e14:	strh	r0, [r6, #56]	; 0x38
   13e18:	str	r6, [r6]
   13e1c:	mov	r0, sl
   13e20:	sub	sp, fp, #28
   13e24:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13e28:	bl	1137c <__errno_location@plt>
   13e2c:	mov	r1, #12
   13e30:	str	r1, [r0]
   13e34:	mov	r0, sl
   13e38:	sub	sp, fp, #28
   13e3c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13e40:	mov	sl, r6
   13e44:	mov	r0, sl
   13e48:	sub	sp, fp, #28
   13e4c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13e50:	ldrb	r0, [r4, #49]	; 0x31
   13e54:	tst	r0, #32
   13e58:	bne	14208 <__assert_fail@plt+0x2d48>
   13e5c:	ldr	r0, [r6, #32]
   13e60:	cmp	r0, #0
   13e64:	ldrhne	r0, [r5]
   13e68:	cmpne	r0, #4
   13e6c:	movne	r0, #7
   13e70:	strhne	r0, [r5]
   13e74:	b	13ab4 <__assert_fail@plt+0x25f4>
   13e78:	mov	sl, r6
   13e7c:	mov	r0, sl
   13e80:	sub	sp, fp, #28
   13e84:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13e88:	ldrb	r0, [r4, #49]	; 0x31
   13e8c:	mov	sl, #0
   13e90:	tst	r0, #32
   13e94:	bne	14208 <__assert_fail@plt+0x2d48>
   13e98:	ldr	sl, [r7, #4]
   13e9c:	mov	r0, r7
   13ea0:	str	sl, [r4]
   13ea4:	bl	12e98 <__assert_fail@plt+0x19d8>
   13ea8:	ldr	r0, [sl, #48]	; 0x30
   13eac:	cmn	r0, #1
   13eb0:	beq	13f50 <__assert_fail@plt+0x2a90>
   13eb4:	ldrh	r0, [sl, #56]	; 0x38
   13eb8:	cmp	r0, #11
   13ebc:	beq	14214 <__assert_fail@plt+0x2d54>
   13ec0:	ldr	r0, [sl, #40]	; 0x28
   13ec4:	ldr	r1, [r4, #24]
   13ec8:	mov	r2, #0
   13ecc:	strb	r2, [r1, r0]
   13ed0:	ldr	r0, [sl, #48]	; 0x30
   13ed4:	cmp	r0, #0
   13ed8:	beq	14094 <__assert_fail@plt+0x2bd4>
   13edc:	ldrh	r0, [sl, #58]	; 0x3a
   13ee0:	tst	r0, #2
   13ee4:	bne	140cc <__assert_fail@plt+0x2c0c>
   13ee8:	tst	r0, #1
   13eec:	bne	141cc <__assert_fail@plt+0x2d0c>
   13ef0:	ldr	r1, [sl, #4]
   13ef4:	movw	r3, #48635	; 0xbdfb
   13ef8:	mov	r0, r4
   13efc:	mvn	r2, #0
   13f00:	movt	r3, #1
   13f04:	bl	142e8 <__assert_fail@plt+0x2e28>
   13f08:	cmp	r0, #0
   13f0c:	bne	140a4 <__assert_fail@plt+0x2be4>
   13f10:	b	141cc <__assert_fail@plt+0x2d0c>
   13f14:	ldr	r0, [r4, #32]
   13f18:	movw	r1, #48636	; 0xbdfc
   13f1c:	movt	r1, #1
   13f20:	bl	16b60 <__assert_fail@plt+0x56a0>
   13f24:	cmn	r0, #1
   13f28:	str	r0, [r6, #36]	; 0x24
   13f2c:	ble	13f74 <__assert_fail@plt+0x2ab4>
   13f30:	ldrh	r0, [r6, #58]	; 0x3a
   13f34:	orr	r0, r0, #2
   13f38:	strh	r0, [r6, #58]	; 0x3a
   13f3c:	str	r6, [r4]
   13f40:	ldrh	r0, [r6, #56]	; 0x38
   13f44:	cmp	r0, #11
   13f48:	beq	13d10 <__assert_fail@plt+0x2850>
   13f4c:	b	13d40 <__assert_fail@plt+0x2880>
   13f50:	mov	r0, sl
   13f54:	bl	12e98 <__assert_fail@plt+0x19d8>
   13f58:	bl	1137c <__errno_location@plt>
   13f5c:	mov	sl, #0
   13f60:	str	sl, [r0]
   13f64:	str	sl, [r4]
   13f68:	mov	r0, sl
   13f6c:	sub	sp, fp, #28
   13f70:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13f74:	bl	1137c <__errno_location@plt>
   13f78:	ldr	r0, [r0]
   13f7c:	mov	r1, #7
   13f80:	strh	r1, [r6, #56]	; 0x38
   13f84:	str	r0, [r6, #32]
   13f88:	str	r6, [r4]
   13f8c:	ldrh	r0, [r6, #56]	; 0x38
   13f90:	cmp	r0, #11
   13f94:	beq	13d10 <__assert_fail@plt+0x2850>
   13f98:	b	13d40 <__assert_fail@plt+0x2880>
   13f9c:	ldr	r0, [r4, #56]	; 0x38
   13fa0:	bl	12e98 <__assert_fail@plt+0x19d8>
   13fa4:	ldr	r1, [r6, #52]	; 0x34
   13fa8:	add	r7, r6, #168	; 0xa8
   13fac:	str	r1, [r6, #40]	; 0x28
   13fb0:	add	r2, r1, #1
   13fb4:	mov	r1, r7
   13fb8:	ldr	r0, [r4, #24]
   13fbc:	bl	111fc <memmove@plt>
   13fc0:	mov	r0, r7
   13fc4:	mov	r1, #47	; 0x2f
   13fc8:	bl	113f4 <strrchr@plt>
   13fcc:	cmp	r0, #0
   13fd0:	beq	1400c <__assert_fail@plt+0x2b4c>
   13fd4:	cmp	r0, r7
   13fd8:	bne	13fe8 <__assert_fail@plt+0x2b28>
   13fdc:	ldrb	r1, [r6, #169]	; 0xa9
   13fe0:	cmp	r1, #0
   13fe4:	beq	1400c <__assert_fail@plt+0x2b4c>
   13fe8:	add	r8, r0, #1
   13fec:	mov	r0, r8
   13ff0:	bl	1134c <strlen@plt>
   13ff4:	mov	r9, r0
   13ff8:	add	r2, r0, #1
   13ffc:	mov	r0, r7
   14000:	mov	r1, r8
   14004:	bl	111fc <memmove@plt>
   14008:	str	r9, [r6, #52]	; 0x34
   1400c:	ldr	r0, [r4, #24]
   14010:	movw	r1, #258	; 0x102
   14014:	str	r0, [r6, #24]
   14018:	str	r0, [r6, #28]
   1401c:	ldrh	r0, [r4, #48]	; 0x30
   14020:	tst	r0, r1
   14024:	beq	14068 <__assert_fail@plt+0x2ba8>
   14028:	movw	r0, #11928	; 0x2e98
   1402c:	movw	r2, #21572	; 0x5444
   14030:	movw	r3, #21604	; 0x5464
   14034:	mov	r1, #0
   14038:	movt	r0, #1
   1403c:	movt	r2, #1
   14040:	movt	r3, #1
   14044:	str	r0, [sp]
   14048:	mov	r0, #31
   1404c:	bl	15b00 <__assert_fail@plt+0x4640>
   14050:	str	r0, [r4, #56]	; 0x38
   14054:	str	r6, [r4]
   14058:	ldrh	r0, [r6, #56]	; 0x38
   1405c:	cmp	r0, #11
   14060:	beq	13d10 <__assert_fail@plt+0x2850>
   14064:	b	13d40 <__assert_fail@plt+0x2880>
   14068:	mov	r0, #32
   1406c:	bl	1a618 <__assert_fail@plt+0x9158>
   14070:	cmp	r0, #0
   14074:	str	r0, [r4, #56]	; 0x38
   14078:	beq	13d00 <__assert_fail@plt+0x2840>
   1407c:	bl	1a720 <__assert_fail@plt+0x9260>
   14080:	str	r6, [r4]
   14084:	ldrh	r0, [r6, #56]	; 0x38
   14088:	cmp	r0, #11
   1408c:	beq	13d10 <__assert_fail@plt+0x2850>
   14090:	b	13d40 <__assert_fail@plt+0x2880>
   14094:	mov	r0, r4
   14098:	bl	1516c <__assert_fail@plt+0x3cac>
   1409c:	cmp	r0, #0
   140a0:	beq	141cc <__assert_fail@plt+0x2d0c>
   140a4:	bl	1137c <__errno_location@plt>
   140a8:	ldr	r0, [r0]
   140ac:	str	r0, [sl, #32]
   140b0:	ldr	r0, [r4, #48]	; 0x30
   140b4:	orr	r0, r0, #8192	; 0x2000
   140b8:	str	r0, [r4, #48]	; 0x30
   140bc:	ldrh	r0, [sl, #56]	; 0x38
   140c0:	cmp	r0, #2
   140c4:	bne	141d8 <__assert_fail@plt+0x2d18>
   140c8:	b	141fc <__assert_fail@plt+0x2d3c>
   140cc:	ldr	r0, [r4, #48]	; 0x30
   140d0:	tst	r0, #4
   140d4:	bne	1414c <__assert_fail@plt+0x2c8c>
   140d8:	mov	r5, sl
   140dc:	tst	r0, #512	; 0x200
   140e0:	ldr	r6, [r5, #36]!	; 0x24
   140e4:	bne	14198 <__assert_fail@plt+0x2cd8>
   140e8:	mov	r0, r6
   140ec:	bl	11430 <fchdir@plt>
   140f0:	cmp	r0, #0
   140f4:	beq	141c4 <__assert_fail@plt+0x2d04>
   140f8:	bl	1137c <__errno_location@plt>
   140fc:	ldr	r0, [r0]
   14100:	str	r0, [sl, #32]
   14104:	ldr	r0, [r4, #48]	; 0x30
   14108:	orr	r0, r0, #8192	; 0x2000
   1410c:	str	r0, [r4, #48]	; 0x30
   14110:	b	141c4 <__assert_fail@plt+0x2d04>
   14114:	mov	r1, #32768	; 0x8000
   14118:	tst	r0, #512	; 0x200
   1411c:	and	r1, r1, r0, lsl #11
   14120:	orr	r1, r1, #18688	; 0x4900
   14124:	orr	r2, r1, #524288	; 0x80000
   14128:	bne	14154 <__assert_fail@plt+0x2c94>
   1412c:	movw	r0, #48636	; 0xbdfc
   14130:	mov	r1, r2
   14134:	movt	r0, #1
   14138:	bl	1aa90 <__assert_fail@plt+0x95d0>
   1413c:	cmn	r0, #1
   14140:	str	r0, [r6, #36]	; 0x24
   14144:	bgt	14170 <__assert_fail@plt+0x2cb0>
   14148:	b	14180 <__assert_fail@plt+0x2cc0>
   1414c:	add	r5, sl, #36	; 0x24
   14150:	b	141c4 <__assert_fail@plt+0x2d04>
   14154:	ldr	r0, [r4, #32]
   14158:	movw	r1, #48636	; 0xbdfc
   1415c:	movt	r1, #1
   14160:	bl	16b60 <__assert_fail@plt+0x56a0>
   14164:	cmn	r0, #1
   14168:	str	r0, [r6, #36]	; 0x24
   1416c:	ble	14180 <__assert_fail@plt+0x2cc0>
   14170:	ldrh	r0, [r6, #58]	; 0x3a
   14174:	orr	r0, r0, #2
   14178:	strh	r0, [r6, #58]	; 0x3a
   1417c:	b	13b34 <__assert_fail@plt+0x2674>
   14180:	bl	1137c <__errno_location@plt>
   14184:	ldr	r0, [r0]
   14188:	mov	r1, #7
   1418c:	strh	r1, [r6, #56]	; 0x38
   14190:	str	r0, [r6, #32]
   14194:	b	13b34 <__assert_fail@plt+0x2674>
   14198:	ldr	r1, [r4, #32]
   1419c:	cmp	r1, r6
   141a0:	bne	141ac <__assert_fail@plt+0x2cec>
   141a4:	cmn	r1, #100	; 0x64
   141a8:	bne	14214 <__assert_fail@plt+0x2d54>
   141ac:	add	r0, r4, #60	; 0x3c
   141b0:	bl	16a60 <__assert_fail@plt+0x55a0>
   141b4:	cmp	r0, #0
   141b8:	blt	141c0 <__assert_fail@plt+0x2d00>
   141bc:	bl	11484 <close@plt>
   141c0:	str	r6, [r4, #32]
   141c4:	ldr	r0, [r5]
   141c8:	bl	11484 <close@plt>
   141cc:	ldrh	r0, [sl, #56]	; 0x38
   141d0:	cmp	r0, #2
   141d4:	beq	141fc <__assert_fail@plt+0x2d3c>
   141d8:	ldr	r0, [sl, #32]
   141dc:	mov	r1, #7
   141e0:	cmp	r0, #0
   141e4:	movweq	r1, #6
   141e8:	strh	r1, [sl, #56]	; 0x38
   141ec:	bne	141fc <__assert_fail@plt+0x2d3c>
   141f0:	mov	r0, r4
   141f4:	mov	r1, sl
   141f8:	bl	14218 <__assert_fail@plt+0x2d58>
   141fc:	ldrb	r0, [r4, #49]	; 0x31
   14200:	tst	r0, #32
   14204:	movne	sl, #0
   14208:	mov	r0, sl
   1420c:	sub	sp, fp, #28
   14210:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14214:	bl	11478 <abort@plt>
   14218:	push	{r4, r5, r6, r7, fp, lr}
   1421c:	add	fp, sp, #16
   14220:	sub	sp, sp, #24
   14224:	ldrh	r2, [r0, #48]	; 0x30
   14228:	movw	r3, #258	; 0x102
   1422c:	add	lr, r1, #64	; 0x40
   14230:	tst	r2, r3
   14234:	beq	1426c <__assert_fail@plt+0x2dac>
   14238:	ldrd	r2, [lr]
   1423c:	stm	sp, {r2, r3}
   14240:	ldrd	r2, [r1, #160]	; 0xa0
   14244:	mov	r1, sp
   14248:	str	r3, [sp, #12]
   1424c:	str	r2, [sp, #8]
   14250:	ldr	r0, [r0, #56]	; 0x38
   14254:	bl	16780 <__assert_fail@plt+0x52c0>
   14258:	cmp	r0, #0
   1425c:	beq	142e4 <__assert_fail@plt+0x2e24>
   14260:	bl	12e98 <__assert_fail@plt+0x19d8>
   14264:	sub	sp, fp, #16
   14268:	pop	{r4, r5, r6, r7, fp, pc}
   1426c:	ldr	r2, [r1, #4]
   14270:	cmp	r2, #0
   14274:	beq	142dc <__assert_fail@plt+0x2e1c>
   14278:	ldr	r3, [r2, #48]	; 0x30
   1427c:	cmp	r3, #0
   14280:	blt	142dc <__assert_fail@plt+0x2e1c>
   14284:	ldr	ip, [r0, #56]	; 0x38
   14288:	ldrd	r4, [ip, #16]
   1428c:	orrs	r3, r4, r5
   14290:	beq	142e4 <__assert_fail@plt+0x2e24>
   14294:	ldrd	r4, [r1, #160]	; 0xa0
   14298:	ldrd	r6, [ip]
   1429c:	eor	r1, r7, r5
   142a0:	eor	r3, r6, r4
   142a4:	orrs	r1, r3, r1
   142a8:	bne	142dc <__assert_fail@plt+0x2e1c>
   142ac:	ldr	r1, [ip, #8]!
   142b0:	ldrd	r4, [lr]
   142b4:	ldr	r3, [ip, #4]
   142b8:	eor	r1, r1, r4
   142bc:	eor	r3, r3, r5
   142c0:	orrs	r1, r1, r3
   142c4:	bne	142dc <__assert_fail@plt+0x2e1c>
   142c8:	ldrd	r4, [r2, #64]	; 0x40
   142cc:	strd	r4, [ip]
   142d0:	ldr	r0, [r0, #56]	; 0x38
   142d4:	ldrd	r2, [r2, #160]	; 0xa0
   142d8:	strd	r2, [r0]
   142dc:	sub	sp, fp, #16
   142e0:	pop	{r4, r5, r6, r7, fp, pc}
   142e4:	bl	11478 <abort@plt>
   142e8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   142ec:	add	fp, sp, #28
   142f0:	sub	sp, sp, #108	; 0x6c
   142f4:	mov	r7, r3
   142f8:	mov	r4, r2
   142fc:	mov	r8, r1
   14300:	mov	sl, r0
   14304:	cmp	r3, #0
   14308:	beq	14394 <__assert_fail@plt+0x2ed4>
   1430c:	movw	r1, #48635	; 0xbdfb
   14310:	mov	r0, r7
   14314:	movt	r1, #1
   14318:	bl	111d8 <strcmp@plt>
   1431c:	mov	r6, r0
   14320:	cmp	r0, #0
   14324:	movwne	r6, #1
   14328:	ldr	r0, [sl, #48]	; 0x30
   1432c:	tst	r0, #4
   14330:	bne	143a4 <__assert_fail@plt+0x2ee4>
   14334:	cmn	r4, #1
   14338:	mov	r1, #0
   1433c:	mov	r9, #0
   14340:	movwgt	r1, #1
   14344:	orrs	r1, r1, r6
   14348:	bne	143cc <__assert_fail@plt+0x2f0c>
   1434c:	ands	r0, r0, #512	; 0x200
   14350:	beq	143cc <__assert_fail@plt+0x2f0c>
   14354:	add	r4, sl, #60	; 0x3c
   14358:	mov	r0, r4
   1435c:	bl	16a58 <__assert_fail@plt+0x5598>
   14360:	cmp	r0, #0
   14364:	bne	143d4 <__assert_fail@plt+0x2f14>
   14368:	mov	r0, r4
   1436c:	bl	16aac <__assert_fail@plt+0x55ec>
   14370:	cmn	r0, #1
   14374:	ble	143d4 <__assert_fail@plt+0x2f14>
   14378:	mov	r4, r0
   1437c:	mov	r9, #0
   14380:	mov	r7, #0
   14384:	ldr	r5, [sl, #48]	; 0x30
   14388:	tst	r5, #2
   1438c:	beq	14418 <__assert_fail@plt+0x2f58>
   14390:	b	14460 <__assert_fail@plt+0x2fa0>
   14394:	mov	r6, #1
   14398:	ldr	r0, [sl, #48]	; 0x30
   1439c:	tst	r0, #4
   143a0:	beq	14334 <__assert_fail@plt+0x2e74>
   143a4:	mov	r5, #0
   143a8:	cmp	r4, #0
   143ac:	blt	14454 <__assert_fail@plt+0x2f94>
   143b0:	ands	r0, r0, #512	; 0x200
   143b4:	beq	14454 <__assert_fail@plt+0x2f94>
   143b8:	mov	r0, r4
   143bc:	bl	11484 <close@plt>
   143c0:	mov	r0, r5
   143c4:	sub	sp, fp, #28
   143c8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   143cc:	cmn	r4, #1
   143d0:	bgt	1440c <__assert_fail@plt+0x2f4c>
   143d4:	ldr	r0, [sl, #48]	; 0x30
   143d8:	mov	r1, #32768	; 0x8000
   143dc:	and	r1, r1, r0, lsl #11
   143e0:	tst	r0, #512	; 0x200
   143e4:	orr	r1, r1, #18688	; 0x4900
   143e8:	orr	r2, r1, #524288	; 0x80000
   143ec:	bne	14488 <__assert_fail@plt+0x2fc8>
   143f0:	mov	r0, r7
   143f4:	mov	r1, r2
   143f8:	bl	1aa90 <__assert_fail@plt+0x95d0>
   143fc:	mov	r4, r0
   14400:	mov	r9, #1
   14404:	cmp	r0, #0
   14408:	blt	144a4 <__assert_fail@plt+0x2fe4>
   1440c:	ldr	r5, [sl, #48]	; 0x30
   14410:	tst	r5, #2
   14414:	bne	14460 <__assert_fail@plt+0x2fa0>
   14418:	cmp	r7, #0
   1441c:	beq	14438 <__assert_fail@plt+0x2f78>
   14420:	movw	r1, #48635	; 0xbdfb
   14424:	mov	r0, r7
   14428:	movt	r1, #1
   1442c:	bl	111d8 <strcmp@plt>
   14430:	cmp	r0, #0
   14434:	beq	14460 <__assert_fail@plt+0x2fa0>
   14438:	tst	r5, #512	; 0x200
   1443c:	bne	144f4 <__assert_fail@plt+0x3034>
   14440:	mov	r0, r4
   14444:	bl	11430 <fchdir@plt>
   14448:	mov	r5, r0
   1444c:	cmp	r9, #0
   14450:	bne	1453c <__assert_fail@plt+0x307c>
   14454:	mov	r0, r5
   14458:	sub	sp, fp, #28
   1445c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14460:	mov	r2, sp
   14464:	mov	r0, #3
   14468:	mov	r1, r4
   1446c:	bl	11298 <__fxstat64@plt>
   14470:	cmp	r0, #0
   14474:	beq	144b4 <__assert_fail@plt+0x2ff4>
   14478:	mvn	r5, #0
   1447c:	cmp	r9, #0
   14480:	beq	14454 <__assert_fail@plt+0x2f94>
   14484:	b	1453c <__assert_fail@plt+0x307c>
   14488:	ldr	r0, [sl, #32]
   1448c:	mov	r1, r7
   14490:	bl	16b60 <__assert_fail@plt+0x56a0>
   14494:	mov	r4, r0
   14498:	mov	r9, #1
   1449c:	cmp	r0, #0
   144a0:	bge	1440c <__assert_fail@plt+0x2f4c>
   144a4:	mvn	r5, #0
   144a8:	mov	r0, r5
   144ac:	sub	sp, fp, #28
   144b0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   144b4:	ldrd	r0, [r8, #64]	; 0x40
   144b8:	ldm	sp, {r2, r3}
   144bc:	eor	r1, r1, r3
   144c0:	eor	r0, r0, r2
   144c4:	orrs	r0, r0, r1
   144c8:	bne	14524 <__assert_fail@plt+0x3064>
   144cc:	ldrd	r0, [r8, #160]	; 0xa0
   144d0:	ldr	r2, [sp, #96]	; 0x60
   144d4:	ldr	r3, [sp, #100]	; 0x64
   144d8:	eor	r1, r1, r3
   144dc:	eor	r0, r0, r2
   144e0:	orrs	r0, r0, r1
   144e4:	bne	14524 <__assert_fail@plt+0x3064>
   144e8:	ldr	r5, [sl, #48]	; 0x30
   144ec:	tst	r5, #512	; 0x200
   144f0:	beq	14440 <__assert_fail@plt+0x2f80>
   144f4:	ldr	r1, [sl, #32]
   144f8:	cmp	r1, r4
   144fc:	bne	14508 <__assert_fail@plt+0x3048>
   14500:	cmn	r1, #100	; 0x64
   14504:	bne	1458c <__assert_fail@plt+0x30cc>
   14508:	cmp	r6, #0
   1450c:	beq	14560 <__assert_fail@plt+0x30a0>
   14510:	add	r0, sl, #60	; 0x3c
   14514:	bl	16a60 <__assert_fail@plt+0x55a0>
   14518:	cmp	r0, #0
   1451c:	bge	14574 <__assert_fail@plt+0x30b4>
   14520:	b	14578 <__assert_fail@plt+0x30b8>
   14524:	bl	1137c <__errno_location@plt>
   14528:	mov	r1, #2
   1452c:	str	r1, [r0]
   14530:	mvn	r5, #0
   14534:	cmp	r9, #0
   14538:	beq	14454 <__assert_fail@plt+0x2f94>
   1453c:	bl	1137c <__errno_location@plt>
   14540:	ldr	r7, [r0]
   14544:	mov	r6, r0
   14548:	mov	r0, r4
   1454c:	bl	11484 <close@plt>
   14550:	str	r7, [r6]
   14554:	mov	r0, r5
   14558:	sub	sp, fp, #28
   1455c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14560:	tst	r5, #4
   14564:	bne	14578 <__assert_fail@plt+0x30b8>
   14568:	cmp	r1, #0
   1456c:	blt	14578 <__assert_fail@plt+0x30b8>
   14570:	mov	r0, r1
   14574:	bl	11484 <close@plt>
   14578:	str	r4, [sl, #32]
   1457c:	mov	r5, #0
   14580:	mov	r0, r5
   14584:	sub	sp, fp, #28
   14588:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1458c:	bl	11478 <abort@plt>
   14590:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   14594:	add	fp, sp, #28
   14598:	sub	sp, sp, #76	; 0x4c
   1459c:	ldr	r8, [r0]
   145a0:	mov	r9, r1
   145a4:	mov	r5, r0
   145a8:	str	r0, [sp, #52]	; 0x34
   145ac:	ldr	r4, [r8, #12]
   145b0:	cmp	r4, #0
   145b4:	beq	14600 <__assert_fail@plt+0x3140>
   145b8:	mov	r0, r4
   145bc:	bl	11424 <dirfd@plt>
   145c0:	cmn	r0, #1
   145c4:	str	r0, [fp, #-32]	; 0xffffffe0
   145c8:	ble	14638 <__assert_fail@plt+0x3178>
   145cc:	mov	r1, r5
   145d0:	mvn	r2, #0
   145d4:	str	r4, [sp, #12]
   145d8:	str	r9, [sp, #4]
   145dc:	mov	ip, #0
   145e0:	ldr	r0, [r1, #44]!	; 0x2c
   145e4:	cmp	r0, #0
   145e8:	str	r1, [fp, #-48]	; 0xffffffd0
   145ec:	add	sl, r1, #4
   145f0:	movweq	r2, #34464	; 0x86a0
   145f4:	movteq	r2, #1
   145f8:	str	r2, [sp, #28]
   145fc:	b	148c8 <__assert_fail@plt+0x3408>
   14600:	mov	sl, r5
   14604:	mvn	r0, #99	; 0x63
   14608:	mov	r2, #0
   1460c:	ldr	r3, [sl, #48]!	; 0x30
   14610:	and	r1, r3, #516	; 0x204
   14614:	cmp	r1, #512	; 0x200
   14618:	ldr	r1, [r8, #24]
   1461c:	ldreq	r0, [r5, #32]
   14620:	tst	r3, #16
   14624:	beq	14660 <__assert_fail@plt+0x31a0>
   14628:	tst	r3, #1
   1462c:	bne	14654 <__assert_fail@plt+0x3194>
   14630:	mov	r2, #32768	; 0x8000
   14634:	b	14660 <__assert_fail@plt+0x31a0>
   14638:	ldr	r0, [r8, #12]
   1463c:	bl	1149c <closedir@plt>
   14640:	mov	r6, #0
   14644:	str	r6, [r8, #12]
   14648:	cmp	r9, #3
   1464c:	beq	146ac <__assert_fail@plt+0x31ec>
   14650:	b	14f7c <__assert_fail@plt+0x3abc>
   14654:	ldr	r3, [r8, #48]	; 0x30
   14658:	cmp	r3, #0
   1465c:	movne	r2, #32768	; 0x8000
   14660:	sub	r3, fp, #32
   14664:	bl	16ba4 <__assert_fail@plt+0x56e4>
   14668:	cmp	r0, #0
   1466c:	str	r0, [r8, #12]
   14670:	beq	146a0 <__assert_fail@plt+0x31e0>
   14674:	ldrh	r0, [r8, #56]	; 0x38
   14678:	cmp	r0, #11
   1467c:	bne	146cc <__assert_fail@plt+0x320c>
   14680:	mov	r0, r5
   14684:	mov	r1, r8
   14688:	mov	r2, #0
   1468c:	bl	13524 <__assert_fail@plt+0x2064>
   14690:	mov	r7, r8
   14694:	strh	r0, [r8, #56]	; 0x38
   14698:	mov	r6, r5
   1469c:	b	147a0 <__assert_fail@plt+0x32e0>
   146a0:	mov	r6, #0
   146a4:	cmp	r9, #3
   146a8:	bne	14f7c <__assert_fail@plt+0x3abc>
   146ac:	mov	r0, #4
   146b0:	strh	r0, [r8, #56]	; 0x38
   146b4:	bl	1137c <__errno_location@plt>
   146b8:	ldr	r0, [r0]
   146bc:	str	r0, [r8, #32]
   146c0:	mov	r0, r6
   146c4:	sub	sp, fp, #28
   146c8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   146cc:	ldrb	r0, [sl, #1]
   146d0:	mov	r7, r8
   146d4:	mov	r6, r5
   146d8:	tst	r0, #1
   146dc:	beq	147a0 <__assert_fail@plt+0x32e0>
   146e0:	mov	r0, r6
   146e4:	mov	r1, r7
   146e8:	mov	r5, r7
   146ec:	bl	14218 <__assert_fail@plt+0x2d58>
   146f0:	mov	r0, r6
   146f4:	mov	r1, r7
   146f8:	mov	r2, #0
   146fc:	bl	13524 <__assert_fail@plt+0x2064>
   14700:	ldrh	r0, [r6, #48]	; 0x30
   14704:	movw	r1, #258	; 0x102
   14708:	tst	r0, r1
   1470c:	beq	14780 <__assert_fail@plt+0x32c0>
   14710:	mov	r0, #24
   14714:	bl	1a618 <__assert_fail@plt+0x9158>
   14718:	cmp	r0, #0
   1471c:	beq	15138 <__assert_fail@plt+0x3c78>
   14720:	mov	r5, r0
   14724:	ldrd	r0, [r7, #64]	; 0x40
   14728:	add	r2, r5, #8
   1472c:	stm	r5, {r0, r1}
   14730:	ldrd	r0, [r7, #160]	; 0xa0
   14734:	stm	r2, {r0, r1, r7}
   14738:	mov	r1, r5
   1473c:	ldr	r6, [sp, #52]	; 0x34
   14740:	ldr	r0, [r6, #56]	; 0x38
   14744:	bl	16738 <__assert_fail@plt+0x5278>
   14748:	cmp	r0, r5
   1474c:	beq	147a0 <__assert_fail@plt+0x32e0>
   14750:	mov	r8, r0
   14754:	mov	r0, r5
   14758:	bl	12e98 <__assert_fail@plt+0x19d8>
   1475c:	cmp	r8, #0
   14760:	beq	15138 <__assert_fail@plt+0x3c78>
   14764:	ldr	r0, [r8, #16]
   14768:	ldr	r6, [sp, #52]	; 0x34
   1476c:	mov	r1, #2
   14770:	mov	r2, r7
   14774:	strh	r1, [r7, #56]	; 0x38
   14778:	str	r0, [r7]
   1477c:	b	147a0 <__assert_fail@plt+0x32e0>
   14780:	ldr	r0, [r6, #56]	; 0x38
   14784:	add	r1, r5, #64	; 0x40
   14788:	bl	1a73c <__assert_fail@plt+0x927c>
   1478c:	cmp	r0, #0
   14790:	movne	r0, #2
   14794:	movne	r1, r7
   14798:	strhne	r0, [r7, #56]	; 0x38
   1479c:	strne	r7, [r7]
   147a0:	mov	r1, r6
   147a4:	mov	r5, r6
   147a8:	mov	r8, r7
   147ac:	str	r9, [sp, #4]
   147b0:	str	r4, [sp, #12]
   147b4:	ldr	r0, [r1, #44]!	; 0x2c
   147b8:	str	r1, [fp, #-48]	; 0xffffffd0
   147bc:	mvn	r1, #0
   147c0:	cmp	r0, #0
   147c4:	movweq	r1, #34464	; 0x86a0
   147c8:	movteq	r1, #1
   147cc:	cmp	r9, #2
   147d0:	str	r1, [sp, #28]
   147d4:	bne	147f0 <__assert_fail@plt+0x3330>
   147d8:	mov	ip, #1
   147dc:	cmp	r9, #3
   147e0:	bne	148c8 <__assert_fail@plt+0x3408>
   147e4:	sub	r0, r9, #3
   147e8:	mov	r5, #0
   147ec:	b	14810 <__assert_fail@plt+0x3350>
   147f0:	ldr	r0, [sl]
   147f4:	and	r0, r0, #56	; 0x38
   147f8:	cmp	r0, #24
   147fc:	ldreq	r0, [r8, #84]	; 0x54
   14800:	cmpeq	r0, #2
   14804:	beq	150f8 <__assert_fail@plt+0x3c38>
   14808:	sub	r0, r9, #3
   1480c:	mov	r5, #1
   14810:	clz	r0, r0
   14814:	lsr	r6, r0, #5
   14818:	ldrb	r0, [sl, #1]
   1481c:	ldr	r2, [fp, #-32]	; 0xffffffe0
   14820:	tst	r0, #2
   14824:	beq	14840 <__assert_fail@plt+0x3380>
   14828:	mov	r0, r2
   1482c:	movw	r1, #1030	; 0x406
   14830:	mov	r2, #3
   14834:	bl	1a8b0 <__assert_fail@plt+0x93f0>
   14838:	mov	r2, r0
   1483c:	str	r0, [fp, #-32]	; 0xffffffe0
   14840:	cmp	r2, #0
   14844:	blt	14860 <__assert_fail@plt+0x33a0>
   14848:	ldr	r0, [sp, #52]	; 0x34
   1484c:	mov	r1, r8
   14850:	mov	r3, #0
   14854:	bl	142e8 <__assert_fail@plt+0x2e28>
   14858:	cmp	r0, #0
   1485c:	beq	148c0 <__assert_fail@plt+0x3400>
   14860:	and	r0, r6, r5
   14864:	cmp	r0, #1
   14868:	bne	14878 <__assert_fail@plt+0x33b8>
   1486c:	bl	1137c <__errno_location@plt>
   14870:	ldr	r0, [r0]
   14874:	str	r0, [r8, #32]
   14878:	ldrh	r0, [r8, #58]	; 0x3a
   1487c:	orr	r0, r0, #1
   14880:	strh	r0, [r8, #58]	; 0x3a
   14884:	ldr	r0, [r8, #12]
   14888:	bl	1149c <closedir@plt>
   1488c:	mov	r4, #0
   14890:	ldr	r5, [sp, #52]	; 0x34
   14894:	str	r4, [r8, #12]
   14898:	ldr	r0, [sl]
   1489c:	tst	r0, #512	; 0x200
   148a0:	beq	148b4 <__assert_fail@plt+0x33f4>
   148a4:	ldr	r0, [fp, #-32]	; 0xffffffe0
   148a8:	cmp	r0, #0
   148ac:	blt	148b4 <__assert_fail@plt+0x33f4>
   148b0:	bl	11484 <close@plt>
   148b4:	mov	ip, #1
   148b8:	str	r4, [r8, #12]
   148bc:	b	148c8 <__assert_fail@plt+0x3408>
   148c0:	ldr	r5, [sp, #52]	; 0x34
   148c4:	mov	ip, #0
   148c8:	ldr	r0, [r8, #40]	; 0x28
   148cc:	ldr	r1, [r8, #28]
   148d0:	mov	r7, #0
   148d4:	sub	r2, r0, #1
   148d8:	ldrb	r1, [r1, r2]
   148dc:	cmp	r1, #47	; 0x2f
   148e0:	ldrb	r1, [sl]
   148e4:	moveq	r0, r2
   148e8:	tst	r1, #4
   148ec:	mov	r1, #0
   148f0:	str	r1, [sp, #40]	; 0x28
   148f4:	beq	1490c <__assert_fail@plt+0x344c>
   148f8:	ldr	r1, [r5, #24]
   148fc:	mov	r2, #47	; 0x2f
   14900:	strb	r2, [r1, r0]!
   14904:	add	r1, r1, #1
   14908:	str	r1, [sp, #40]	; 0x28
   1490c:	ldr	r6, [r8, #12]
   14910:	add	r1, r0, #1
   14914:	str	r1, [fp, #-44]	; 0xffffffd4
   14918:	cmp	r6, #0
   1491c:	beq	14cbc <__assert_fail@plt+0x37fc>
   14920:	ldr	r0, [r8, #48]	; 0x30
   14924:	str	ip, [sp]
   14928:	add	r0, r0, #1
   1492c:	str	r0, [sp, #20]
   14930:	ldr	r0, [r5, #36]	; 0x24
   14934:	mov	r5, #0
   14938:	sub	r0, r0, r1
   1493c:	str	r0, [sp, #44]	; 0x2c
   14940:	bl	1137c <__errno_location@plt>
   14944:	str	r0, [sp, #36]	; 0x24
   14948:	mov	r0, #0
   1494c:	mov	r7, #0
   14950:	mov	r4, #0
   14954:	str	r8, [sp, #24]
   14958:	str	sl, [sp, #32]
   1495c:	str	r0, [sp, #48]	; 0x30
   14960:	mov	r0, #0
   14964:	str	r0, [sp, #8]
   14968:	mov	r0, #0
   1496c:	str	r0, [sp, #16]
   14970:	ldr	r0, [sp, #36]	; 0x24
   14974:	str	r7, [fp, #-36]	; 0xffffffdc
   14978:	str	r5, [r0]
   1497c:	mov	r0, r6
   14980:	bl	1140c <readdir64@plt>
   14984:	cmp	r0, #0
   14988:	beq	14e20 <__assert_fail@plt+0x3960>
   1498c:	mov	r9, r0
   14990:	ldrb	r0, [sl]
   14994:	str	r4, [fp, #-40]	; 0xffffffd8
   14998:	mov	r1, sl
   1499c:	add	r4, r9, #19
   149a0:	tst	r0, #32
   149a4:	ldrbeq	r0, [r4]
   149a8:	cmpeq	r0, #46	; 0x2e
   149ac:	beq	14aa8 <__assert_fail@plt+0x35e8>
   149b0:	mov	r0, r4
   149b4:	bl	1134c <strlen@plt>
   149b8:	mov	r5, r0
   149bc:	add	r0, r0, #176	; 0xb0
   149c0:	bic	r0, r0, #7
   149c4:	bl	1a618 <__assert_fail@plt+0x9158>
   149c8:	mov	r6, r0
   149cc:	cmp	r0, #0
   149d0:	beq	14fdc <__assert_fail@plt+0x3b1c>
   149d4:	add	sl, r6, #168	; 0xa8
   149d8:	mov	r1, r4
   149dc:	mov	r2, r5
   149e0:	mov	r0, sl
   149e4:	bl	11220 <memcpy@plt>
   149e8:	ldr	r2, [sp, #52]	; 0x34
   149ec:	mov	r0, #0
   149f0:	mov	r1, #196608	; 0x30000
   149f4:	ldr	r3, [fp, #-44]	; 0xffffffd4
   149f8:	strb	r0, [sl, r5]
   149fc:	str	r5, [r6, #52]	; 0x34
   14a00:	str	r2, [r6, #44]	; 0x2c
   14a04:	add	r7, r5, r3
   14a08:	ldr	r4, [r2, #24]
   14a0c:	str	r1, [r6, #58]	; 0x3a
   14a10:	str	r0, [r6, #12]
   14a14:	str	r0, [r6, #16]
   14a18:	str	r0, [r6, #20]
   14a1c:	str	r4, [r6, #28]
   14a20:	str	r0, [r6, #32]
   14a24:	ldr	r0, [sp, #44]	; 0x2c
   14a28:	cmp	r5, r0
   14a2c:	bcs	14a44 <__assert_fail@plt+0x3584>
   14a30:	ldr	r4, [fp, #-40]	; 0xffffffd8
   14a34:	mov	r5, r2
   14a38:	cmp	r7, r3
   14a3c:	bcs	14afc <__assert_fail@plt+0x363c>
   14a40:	b	14e80 <__assert_fail@plt+0x39c0>
   14a44:	ldr	r1, [r2, #36]	; 0x24
   14a48:	movw	r0, #257	; 0x101
   14a4c:	mov	r5, r2
   14a50:	add	r0, r7, r0
   14a54:	adds	r1, r0, r1
   14a58:	bcs	14f88 <__assert_fail@plt+0x3ac8>
   14a5c:	mov	r0, r4
   14a60:	str	r1, [r5, #36]	; 0x24
   14a64:	bl	1a648 <__assert_fail@plt+0x9188>
   14a68:	cmp	r0, #0
   14a6c:	beq	14fc8 <__assert_fail@plt+0x3b08>
   14a70:	cmp	r0, r4
   14a74:	str	r0, [r5, #24]
   14a78:	beq	14ae0 <__assert_fail@plt+0x3620>
   14a7c:	ldr	r1, [sp, #32]
   14a80:	ldr	r3, [fp, #-44]	; 0xffffffd4
   14a84:	ldr	r4, [fp, #-40]	; 0xffffffd8
   14a88:	ldrb	r1, [r1]
   14a8c:	tst	r1, #4
   14a90:	ldr	r1, [sp, #40]	; 0x28
   14a94:	addne	r1, r0, r3
   14a98:	mov	r0, #1
   14a9c:	str	r1, [sp, #40]	; 0x28
   14aa0:	str	r0, [sp, #16]
   14aa4:	b	14ae8 <__assert_fail@plt+0x3628>
   14aa8:	ldrb	r0, [r9, #20]
   14aac:	cmp	r0, #0
   14ab0:	beq	14ac4 <__assert_fail@plt+0x3604>
   14ab4:	cmp	r0, #46	; 0x2e
   14ab8:	ldrbeq	r0, [r9, #21]
   14abc:	cmpeq	r0, #0
   14ac0:	bne	149b0 <__assert_fail@plt+0x34f0>
   14ac4:	ldr	r4, [fp, #-40]	; 0xffffffd8
   14ac8:	ldr	r7, [fp, #-36]	; 0xffffffdc
   14acc:	mov	r5, #0
   14ad0:	ldr	r6, [r8, #12]
   14ad4:	cmp	r6, #0
   14ad8:	bne	14970 <__assert_fail@plt+0x34b0>
   14adc:	b	14ca0 <__assert_fail@plt+0x37e0>
   14ae0:	ldr	r4, [fp, #-40]	; 0xffffffd8
   14ae4:	ldr	r3, [fp, #-44]	; 0xffffffd4
   14ae8:	ldr	r0, [r5, #36]	; 0x24
   14aec:	sub	r0, r0, r3
   14af0:	str	r0, [sp, #44]	; 0x2c
   14af4:	cmp	r7, r3
   14af8:	bcc	14e80 <__assert_fail@plt+0x39c0>
   14afc:	ldr	r0, [sp, #20]
   14b00:	str	r0, [r6, #48]	; 0x30
   14b04:	ldr	r0, [r5]
   14b08:	str	r7, [r6, #40]	; 0x28
   14b0c:	str	r0, [r6, #4]
   14b10:	ldrd	r0, [r9]
   14b14:	strd	r0, [r6, #160]	; 0xa0
   14b18:	ldrb	r0, [r5, #48]	; 0x30
   14b1c:	tst	r0, #4
   14b20:	bne	14b2c <__assert_fail@plt+0x366c>
   14b24:	str	sl, [r6, #24]
   14b28:	b	14b48 <__assert_fail@plt+0x3688>
   14b2c:	ldr	r0, [r6, #28]
   14b30:	ldr	r1, [r6, #52]	; 0x34
   14b34:	str	r0, [r6, #24]
   14b38:	ldr	r0, [sp, #40]	; 0x28
   14b3c:	add	r2, r1, #1
   14b40:	mov	r1, sl
   14b44:	bl	111fc <memmove@plt>
   14b48:	ldr	r0, [fp, #-48]	; 0xffffffd0
   14b4c:	ldr	sl, [sp, #32]
   14b50:	ldr	r8, [sp, #24]
   14b54:	ldr	r0, [r0]
   14b58:	ldr	r2, [sl]
   14b5c:	cmp	r0, #0
   14b60:	beq	14b8c <__assert_fail@plt+0x36cc>
   14b64:	ands	r0, r2, #1024	; 0x400
   14b68:	bne	14b8c <__assert_fail@plt+0x36cc>
   14b6c:	mov	r0, r5
   14b70:	mov	r1, r6
   14b74:	mov	r2, #0
   14b78:	bl	13524 <__assert_fail@plt+0x2064>
   14b7c:	ldr	r7, [fp, #-36]	; 0xffffffdc
   14b80:	mov	r5, #0
   14b84:	strh	r0, [r6, #56]	; 0x38
   14b88:	b	14c04 <__assert_fail@plt+0x3744>
   14b8c:	ldrb	r3, [r9, #18]
   14b90:	mov	r0, #0
   14b94:	tst	r2, #8
   14b98:	mov	r1, #0
   14b9c:	beq	14bc0 <__assert_fail@plt+0x3700>
   14ba0:	orr	r1, r3, #4
   14ba4:	cmp	r1, #4
   14ba8:	mov	r1, #0
   14bac:	beq	14bc0 <__assert_fail@plt+0x3700>
   14bb0:	eor	r1, r3, #10
   14bb4:	and	r2, r2, #16
   14bb8:	orrs	r1, r2, r1
   14bbc:	movwne	r1, #1
   14bc0:	mov	r2, #11
   14bc4:	ldr	r7, [fp, #-36]	; 0xffffffdc
   14bc8:	mov	r5, #0
   14bcc:	strh	r2, [r6, #56]	; 0x38
   14bd0:	sub	r2, r3, #1
   14bd4:	uxtb	r3, r2
   14bd8:	cmp	r3, #11
   14bdc:	sxtbls	r0, r2
   14be0:	movwls	r2, #48640	; 0xbe00
   14be4:	movtls	r2, #1
   14be8:	ldrls	r0, [r2, r0, lsl #2]
   14bec:	cmp	r1, #0
   14bf0:	str	r0, [r6, #80]	; 0x50
   14bf4:	mov	r0, #2
   14bf8:	movwne	r0, #1
   14bfc:	str	r0, [r6, #112]	; 0x70
   14c00:	str	r5, [r6, #116]	; 0x74
   14c04:	cmp	r7, #0
   14c08:	str	r5, [r6, #8]
   14c0c:	ldrne	r0, [sp, #48]	; 0x30
   14c10:	moveq	r7, r6
   14c14:	strne	r6, [r0, #8]
   14c18:	movw	r0, #10000	; 0x2710
   14c1c:	cmp	r4, r0
   14c20:	bne	14c74 <__assert_fail@plt+0x37b4>
   14c24:	ldr	r0, [fp, #-48]	; 0xffffffd0
   14c28:	ldr	r0, [r0]
   14c2c:	cmp	r0, #0
   14c30:	bne	14c74 <__assert_fail@plt+0x37b4>
   14c34:	ldr	r1, [fp, #-32]	; 0xffffffe0
   14c38:	mov	r0, r8
   14c3c:	bl	154e4 <__assert_fail@plt+0x4024>
   14c40:	mov	r1, #0
   14c44:	str	r1, [sp, #8]
   14c48:	movw	r1, #19778	; 0x4d42
   14c4c:	movt	r1, #65363	; 0xff53
   14c50:	cmp	r0, r1
   14c54:	movwne	r1, #26985	; 0x6969
   14c58:	cmpne	r0, r1
   14c5c:	beq	14c74 <__assert_fail@plt+0x37b4>
   14c60:	movw	r1, #6548	; 0x1994
   14c64:	movt	r1, #258	; 0x102
   14c68:	cmp	r0, r1
   14c6c:	movne	r0, #1
   14c70:	strne	r0, [sp, #8]
   14c74:	ldr	r0, [sp, #28]
   14c78:	add	r4, r4, #1
   14c7c:	cmp	r0, r4
   14c80:	mov	r0, #0
   14c84:	movwls	r0, #15
   14c88:	cmp	r0, #0
   14c8c:	bne	14f00 <__assert_fail@plt+0x3a40>
   14c90:	str	r6, [sp, #48]	; 0x30
   14c94:	ldr	r6, [r8, #12]
   14c98:	cmp	r6, #0
   14c9c:	bne	14970 <__assert_fail@plt+0x34b0>
   14ca0:	ldr	r0, [sp, #16]
   14ca4:	ldr	ip, [sp]
   14ca8:	ldr	r6, [sp, #8]
   14cac:	ldr	r5, [sp, #52]	; 0x34
   14cb0:	tst	r0, #1
   14cb4:	beq	14cc4 <__assert_fail@plt+0x3804>
   14cb8:	b	1506c <__assert_fail@plt+0x3bac>
   14cbc:	mov	r4, #0
   14cc0:	mov	r6, #0
   14cc4:	ldrb	r0, [sl]
   14cc8:	tst	r0, #4
   14ccc:	beq	14cf8 <__assert_fail@plt+0x3838>
   14cd0:	ldr	r2, [sp, #40]	; 0x28
   14cd4:	ldr	r0, [r5, #36]	; 0x24
   14cd8:	ldr	r3, [fp, #-44]	; 0xffffffd4
   14cdc:	cmp	r3, r0
   14ce0:	sub	r1, r2, #1
   14ce4:	mov	r0, #0
   14ce8:	moveq	r2, r1
   14cec:	cmp	r4, #0
   14cf0:	moveq	r2, r1
   14cf4:	strb	r0, [r2]
   14cf8:	ldr	r0, [sp, #12]
   14cfc:	cmp	r0, #0
   14d00:	movwne	r0, #1
   14d04:	orrs	r0, r0, ip
   14d08:	beq	14d6c <__assert_fail@plt+0x38ac>
   14d0c:	cmp	r4, #0
   14d10:	bne	14dac <__assert_fail@plt+0x38ec>
   14d14:	ldr	r0, [sp, #4]
   14d18:	cmp	r0, #3
   14d1c:	bne	14d34 <__assert_fail@plt+0x3874>
   14d20:	ldrh	r0, [r8, #56]	; 0x38
   14d24:	cmp	r0, #4
   14d28:	cmpne	r0, #7
   14d2c:	movne	r0, #6
   14d30:	strhne	r0, [r8, #56]	; 0x38
   14d34:	mov	r6, #0
   14d38:	cmp	r7, #0
   14d3c:	beq	14f7c <__assert_fail@plt+0x3abc>
   14d40:	ldrd	r4, [r7, #8]
   14d44:	cmp	r5, #0
   14d48:	beq	14d54 <__assert_fail@plt+0x3894>
   14d4c:	mov	r0, r5
   14d50:	bl	1149c <closedir@plt>
   14d54:	mov	r0, r7
   14d58:	bl	12e98 <__assert_fail@plt+0x19d8>
   14d5c:	cmp	r4, #0
   14d60:	mov	r7, r4
   14d64:	bne	14d40 <__assert_fail@plt+0x3880>
   14d68:	b	14f7c <__assert_fail@plt+0x3abc>
   14d6c:	ldr	r0, [sp, #4]
   14d70:	cmp	r0, #1
   14d74:	cmpne	r4, #0
   14d78:	bne	14dac <__assert_fail@plt+0x38ec>
   14d7c:	ldr	r0, [r8, #48]	; 0x30
   14d80:	cmp	r0, #0
   14d84:	beq	14f24 <__assert_fail@plt+0x3a64>
   14d88:	ldr	r1, [r8, #4]
   14d8c:	movw	r3, #48635	; 0xbdfb
   14d90:	mov	r0, r5
   14d94:	mvn	r2, #0
   14d98:	movt	r3, #1
   14d9c:	bl	142e8 <__assert_fail@plt+0x2e28>
   14da0:	cmp	r0, #0
   14da4:	bne	14f34 <__assert_fail@plt+0x3a74>
   14da8:	b	14d0c <__assert_fail@plt+0x384c>
   14dac:	tst	r6, #1
   14db0:	beq	14de8 <__assert_fail@plt+0x3928>
   14db4:	movw	r0, #21676	; 0x54ac
   14db8:	mov	r1, r7
   14dbc:	mov	r2, r4
   14dc0:	movt	r0, #1
   14dc4:	str	r0, [r5, #44]	; 0x2c
   14dc8:	mov	r0, r5
   14dcc:	bl	136bc <__assert_fail@plt+0x21fc>
   14dd0:	mov	r6, r0
   14dd4:	mov	r0, #0
   14dd8:	str	r0, [r5, #44]	; 0x2c
   14ddc:	mov	r0, r6
   14de0:	sub	sp, fp, #28
   14de4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14de8:	cmp	r4, #2
   14dec:	bcc	14fa8 <__assert_fail@plt+0x3ae8>
   14df0:	ldr	r0, [fp, #-48]	; 0xffffffd0
   14df4:	ldr	r0, [r0]
   14df8:	cmp	r0, #0
   14dfc:	beq	14fb8 <__assert_fail@plt+0x3af8>
   14e00:	mov	r0, r5
   14e04:	mov	r1, r7
   14e08:	mov	r2, r4
   14e0c:	bl	136bc <__assert_fail@plt+0x21fc>
   14e10:	mov	r6, r0
   14e14:	mov	r0, r6
   14e18:	sub	sp, fp, #28
   14e1c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14e20:	ldr	r0, [sp, #36]	; 0x24
   14e24:	ldr	r0, [r0]
   14e28:	cmp	r0, #0
   14e2c:	beq	14e48 <__assert_fail@plt+0x3988>
   14e30:	str	r0, [r8, #32]
   14e34:	ldr	r0, [sp, #12]
   14e38:	orrs	r0, r0, r4
   14e3c:	mov	r0, #4
   14e40:	movwne	r0, #7
   14e44:	strh	r0, [r8, #56]	; 0x38
   14e48:	ldr	r0, [r8, #12]
   14e4c:	ldr	r6, [sp, #8]
   14e50:	ldr	r7, [fp, #-36]	; 0xffffffdc
   14e54:	ldr	r5, [sp, #52]	; 0x34
   14e58:	cmp	r0, #0
   14e5c:	beq	1505c <__assert_fail@plt+0x3b9c>
   14e60:	bl	1149c <closedir@plt>
   14e64:	mov	r0, #0
   14e68:	ldr	ip, [sp]
   14e6c:	str	r0, [r8, #12]
   14e70:	ldr	r0, [sp, #16]
   14e74:	tst	r0, #1
   14e78:	beq	14cc4 <__assert_fail@plt+0x3804>
   14e7c:	b	1506c <__assert_fail@plt+0x3bac>
   14e80:	mov	r0, r6
   14e84:	bl	12e98 <__assert_fail@plt+0x19d8>
   14e88:	ldr	r6, [fp, #-36]	; 0xffffffdc
   14e8c:	ldr	r7, [sp, #24]
   14e90:	cmp	r6, #0
   14e94:	beq	14ec0 <__assert_fail@plt+0x3a00>
   14e98:	ldrd	r4, [r6, #8]
   14e9c:	cmp	r5, #0
   14ea0:	beq	14eac <__assert_fail@plt+0x39ec>
   14ea4:	mov	r0, r5
   14ea8:	bl	1149c <closedir@plt>
   14eac:	mov	r0, r6
   14eb0:	bl	12e98 <__assert_fail@plt+0x19d8>
   14eb4:	cmp	r4, #0
   14eb8:	mov	r6, r4
   14ebc:	bne	14e98 <__assert_fail@plt+0x39d8>
   14ec0:	ldr	r0, [r7, #12]
   14ec4:	bl	1149c <closedir@plt>
   14ec8:	ldr	r1, [sp, #32]
   14ecc:	mov	r6, #0
   14ed0:	mov	r0, #7
   14ed4:	str	r6, [r7, #12]
   14ed8:	strh	r0, [r7, #56]	; 0x38
   14edc:	ldr	r0, [r1]
   14ee0:	orr	r0, r0, #8192	; 0x2000
   14ee4:	str	r0, [r1]
   14ee8:	ldr	r1, [sp, #36]	; 0x24
   14eec:	mov	r0, #36	; 0x24
   14ef0:	str	r0, [r1]
   14ef4:	mov	r0, r6
   14ef8:	sub	sp, fp, #28
   14efc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14f00:	ldr	ip, [sp]
   14f04:	cmp	r0, #15
   14f08:	bne	15144 <__assert_fail@plt+0x3c84>
   14f0c:	ldr	r6, [sp, #8]
   14f10:	ldr	r5, [sp, #52]	; 0x34
   14f14:	ldr	r0, [sp, #16]
   14f18:	tst	r0, #1
   14f1c:	beq	14cc4 <__assert_fail@plt+0x3804>
   14f20:	b	1506c <__assert_fail@plt+0x3bac>
   14f24:	mov	r0, r5
   14f28:	bl	1516c <__assert_fail@plt+0x3cac>
   14f2c:	cmp	r0, #0
   14f30:	beq	14d0c <__assert_fail@plt+0x384c>
   14f34:	mov	r0, #7
   14f38:	mov	r6, #0
   14f3c:	cmp	r7, #0
   14f40:	strh	r0, [r8, #56]	; 0x38
   14f44:	ldr	r0, [sl]
   14f48:	orr	r0, r0, #8192	; 0x2000
   14f4c:	str	r0, [sl]
   14f50:	beq	14f7c <__assert_fail@plt+0x3abc>
   14f54:	ldrd	r4, [r7, #8]
   14f58:	cmp	r5, #0
   14f5c:	beq	14f68 <__assert_fail@plt+0x3aa8>
   14f60:	mov	r0, r5
   14f64:	bl	1149c <closedir@plt>
   14f68:	mov	r0, r7
   14f6c:	bl	12e98 <__assert_fail@plt+0x19d8>
   14f70:	cmp	r4, #0
   14f74:	mov	r7, r4
   14f78:	bne	14f54 <__assert_fail@plt+0x3a94>
   14f7c:	mov	r0, r6
   14f80:	sub	sp, fp, #28
   14f84:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14f88:	mov	r0, r4
   14f8c:	bl	12e98 <__assert_fail@plt+0x19d8>
   14f90:	ldr	r1, [sp, #36]	; 0x24
   14f94:	mov	r0, #0
   14f98:	str	r0, [r5, #24]
   14f9c:	mov	r0, #36	; 0x24
   14fa0:	str	r0, [r1]
   14fa4:	b	14fd8 <__assert_fail@plt+0x3b18>
   14fa8:	mov	r6, r7
   14fac:	mov	r0, r6
   14fb0:	sub	sp, fp, #28
   14fb4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14fb8:	mov	r6, r7
   14fbc:	mov	r0, r6
   14fc0:	sub	sp, fp, #28
   14fc4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14fc8:	ldr	r0, [r5, #24]
   14fcc:	bl	12e98 <__assert_fail@plt+0x19d8>
   14fd0:	mov	r0, #0
   14fd4:	str	r0, [r5, #24]
   14fd8:	ldr	r8, [sp, #24]
   14fdc:	ldr	r0, [sp, #36]	; 0x24
   14fe0:	ldr	r4, [r0]
   14fe4:	mov	r0, r6
   14fe8:	bl	12e98 <__assert_fail@plt+0x19d8>
   14fec:	ldr	r5, [fp, #-36]	; 0xffffffdc
   14ff0:	cmp	r5, #0
   14ff4:	beq	15020 <__assert_fail@plt+0x3b60>
   14ff8:	ldrd	r6, [r5, #8]
   14ffc:	cmp	r7, #0
   15000:	beq	1500c <__assert_fail@plt+0x3b4c>
   15004:	mov	r0, r7
   15008:	bl	1149c <closedir@plt>
   1500c:	mov	r0, r5
   15010:	bl	12e98 <__assert_fail@plt+0x19d8>
   15014:	cmp	r6, #0
   15018:	mov	r5, r6
   1501c:	bne	14ff8 <__assert_fail@plt+0x3b38>
   15020:	ldr	r0, [r8, #12]
   15024:	bl	1149c <closedir@plt>
   15028:	ldr	r1, [sp, #32]
   1502c:	mov	r6, #0
   15030:	mov	r0, #7
   15034:	str	r6, [r8, #12]
   15038:	strh	r0, [r8, #56]	; 0x38
   1503c:	ldr	r0, [r1]
   15040:	orr	r0, r0, #8192	; 0x2000
   15044:	str	r0, [r1]
   15048:	ldr	r0, [sp, #36]	; 0x24
   1504c:	str	r4, [r0]
   15050:	mov	r0, r6
   15054:	sub	sp, fp, #28
   15058:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1505c:	ldr	ip, [sp]
   15060:	ldr	r0, [sp, #16]
   15064:	tst	r0, #1
   15068:	beq	14cc4 <__assert_fail@plt+0x3804>
   1506c:	ldr	r1, [r5, #4]
   15070:	ldr	r0, [r5, #24]
   15074:	cmp	r1, #0
   15078:	beq	150a8 <__assert_fail@plt+0x3be8>
   1507c:	ldr	r2, [r1, #24]
   15080:	add	r3, r1, #168	; 0xa8
   15084:	cmp	r2, r3
   15088:	ldrne	r3, [r1, #28]
   1508c:	subne	r2, r2, r3
   15090:	addne	r2, r0, r2
   15094:	strne	r2, [r1, #24]
   15098:	str	r0, [r1, #28]
   1509c:	ldr	r1, [r1, #8]
   150a0:	cmp	r1, #0
   150a4:	bne	1507c <__assert_fail@plt+0x3bbc>
   150a8:	ldr	r1, [r7, #48]	; 0x30
   150ac:	cmp	r1, #0
   150b0:	blt	14cc4 <__assert_fail@plt+0x3804>
   150b4:	mov	r1, r7
   150b8:	ldr	r2, [r1, #24]
   150bc:	add	r3, r1, #168	; 0xa8
   150c0:	cmp	r2, r3
   150c4:	ldrne	r3, [r1, #28]
   150c8:	subne	r2, r2, r3
   150cc:	addne	r2, r0, r2
   150d0:	strne	r2, [r1, #24]
   150d4:	str	r0, [r1, #28]
   150d8:	ldr	r2, [r1, #8]
   150dc:	cmp	r2, #0
   150e0:	ldreq	r2, [r1, #4]
   150e4:	ldr	r1, [r2, #48]	; 0x30
   150e8:	cmn	r1, #1
   150ec:	mov	r1, r2
   150f0:	bgt	150b8 <__assert_fail@plt+0x3bf8>
   150f4:	b	14cc4 <__assert_fail@plt+0x3804>
   150f8:	ldr	r1, [fp, #-32]	; 0xffffffe0
   150fc:	mov	r0, r8
   15100:	bl	154e4 <__assert_fail@plt+0x4024>
   15104:	movw	r1, #26984	; 0x6968
   15108:	cmp	r0, r1
   1510c:	ble	15154 <__assert_fail@plt+0x3c94>
   15110:	movw	r1, #26985	; 0x6969
   15114:	cmp	r0, r1
   15118:	movwne	r1, #16719	; 0x414f
   1511c:	movtne	r1, #21318	; 0x5346
   15120:	cmpne	r0, r1
   15124:	beq	14808 <__assert_fail@plt+0x3348>
   15128:	movw	r1, #40864	; 0x9fa0
   1512c:	cmp	r0, r1
   15130:	beq	14808 <__assert_fail@plt+0x3348>
   15134:	b	147d8 <__assert_fail@plt+0x3318>
   15138:	bl	1137c <__errno_location@plt>
   1513c:	mov	r1, #12
   15140:	str	r1, [r0]
   15144:	mov	r6, #0
   15148:	mov	r0, r6
   1514c:	sub	sp, fp, #28
   15150:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15154:	movw	r1, #19778	; 0x4d42
   15158:	movt	r1, #65363	; 0xff53
   1515c:	cmp	r0, r1
   15160:	cmpne	r0, #0
   15164:	beq	14808 <__assert_fail@plt+0x3348>
   15168:	b	147d8 <__assert_fail@plt+0x3318>
   1516c:	push	{r4, r5, fp, lr}
   15170:	add	fp, sp, #8
   15174:	mov	r5, r0
   15178:	ldr	r0, [r0, #48]	; 0x30
   1517c:	mov	r4, #0
   15180:	tst	r0, #4
   15184:	bne	151c8 <__assert_fail@plt+0x3d08>
   15188:	tst	r0, #512	; 0x200
   1518c:	bne	151a8 <__assert_fail@plt+0x3ce8>
   15190:	ldr	r0, [r5, #28]
   15194:	bl	11430 <fchdir@plt>
   15198:	mov	r4, r0
   1519c:	cmp	r0, #0
   151a0:	movwne	r4, #1
   151a4:	b	151c8 <__assert_fail@plt+0x3d08>
   151a8:	ldr	r1, [r5, #32]
   151ac:	add	r0, r5, #60	; 0x3c
   151b0:	bl	16a60 <__assert_fail@plt+0x55a0>
   151b4:	cmp	r0, #0
   151b8:	blt	151c0 <__assert_fail@plt+0x3d00>
   151bc:	bl	11484 <close@plt>
   151c0:	mvn	r0, #99	; 0x63
   151c4:	str	r0, [r5, #32]
   151c8:	add	r5, r5, #60	; 0x3c
   151cc:	b	151d4 <__assert_fail@plt+0x3d14>
   151d0:	bl	11484 <close@plt>
   151d4:	mov	r0, r5
   151d8:	bl	16a58 <__assert_fail@plt+0x5598>
   151dc:	cmp	r0, #0
   151e0:	movne	r0, r4
   151e4:	popne	{r4, r5, fp, pc}
   151e8:	mov	r0, r5
   151ec:	bl	16aac <__assert_fail@plt+0x55ec>
   151f0:	cmp	r0, #0
   151f4:	bge	151d0 <__assert_fail@plt+0x3d10>
   151f8:	b	151d4 <__assert_fail@plt+0x3d14>
   151fc:	cmp	r2, #5
   15200:	movcc	r0, #0
   15204:	strhcc	r2, [r1, #60]	; 0x3c
   15208:	bxcc	lr
   1520c:	push	{fp, lr}
   15210:	mov	fp, sp
   15214:	bl	1137c <__errno_location@plt>
   15218:	mov	r1, #22
   1521c:	str	r1, [r0]
   15220:	mov	r0, #1
   15224:	pop	{fp, pc}
   15228:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1522c:	add	fp, sp, #28
   15230:	sub	sp, sp, #4
   15234:	mov	r9, r0
   15238:	orr	r0, r1, #4096	; 0x1000
   1523c:	cmp	r0, #4096	; 0x1000
   15240:	bne	15288 <__assert_fail@plt+0x3dc8>
   15244:	ldr	r8, [r9]
   15248:	mov	r7, r1
   1524c:	bl	1137c <__errno_location@plt>
   15250:	mov	r5, #0
   15254:	mov	sl, r0
   15258:	str	r5, [r0]
   1525c:	ldrb	r0, [r9, #49]	; 0x31
   15260:	tst	r0, #32
   15264:	bne	1527c <__assert_fail@plt+0x3dbc>
   15268:	ldrh	r0, [r8, #56]	; 0x38
   1526c:	cmp	r0, #1
   15270:	beq	152a4 <__assert_fail@plt+0x3de4>
   15274:	cmp	r0, #9
   15278:	ldreq	r5, [r8, #8]
   1527c:	mov	r0, r5
   15280:	sub	sp, fp, #28
   15284:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15288:	bl	1137c <__errno_location@plt>
   1528c:	mov	r1, #22
   15290:	mov	r5, #0
   15294:	str	r1, [r0]
   15298:	mov	r0, r5
   1529c:	sub	sp, fp, #28
   152a0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   152a4:	ldr	r6, [r9, #4]
   152a8:	cmp	r6, #0
   152ac:	beq	152dc <__assert_fail@plt+0x3e1c>
   152b0:	ldr	r4, [r6, #8]
   152b4:	ldr	r1, [r6, #12]
   152b8:	cmp	r1, #0
   152bc:	beq	152c8 <__assert_fail@plt+0x3e08>
   152c0:	mov	r0, r1
   152c4:	bl	1149c <closedir@plt>
   152c8:	mov	r0, r6
   152cc:	bl	12e98 <__assert_fail@plt+0x19d8>
   152d0:	cmp	r4, #0
   152d4:	mov	r6, r4
   152d8:	bne	152b0 <__assert_fail@plt+0x3df0>
   152dc:	cmp	r7, #4096	; 0x1000
   152e0:	mov	r4, #1
   152e4:	ldreq	r0, [r9, #48]	; 0x30
   152e8:	moveq	r4, #2
   152ec:	orreq	r0, r0, #4096	; 0x1000
   152f0:	streq	r0, [r9, #48]	; 0x30
   152f4:	ldr	r0, [r8, #48]	; 0x30
   152f8:	cmp	r0, #0
   152fc:	bne	15354 <__assert_fail@plt+0x3e94>
   15300:	ldr	r0, [r8, #24]
   15304:	ldrb	r0, [r0]
   15308:	cmp	r0, #47	; 0x2f
   1530c:	beq	15354 <__assert_fail@plt+0x3e94>
   15310:	ldr	r0, [r9, #48]	; 0x30
   15314:	tst	r0, #4
   15318:	bne	15354 <__assert_fail@plt+0x3e94>
   1531c:	mov	r1, #32768	; 0x8000
   15320:	tst	r0, #512	; 0x200
   15324:	and	r1, r1, r0, lsl #11
   15328:	orr	r1, r1, #18688	; 0x4900
   1532c:	orr	r2, r1, #524288	; 0x80000
   15330:	bne	15374 <__assert_fail@plt+0x3eb4>
   15334:	movw	r0, #48636	; 0xbdfc
   15338:	mov	r1, r2
   1533c:	movt	r0, #1
   15340:	bl	1aa90 <__assert_fail@plt+0x95d0>
   15344:	mov	r8, r0
   15348:	cmn	r0, #1
   1534c:	bgt	15390 <__assert_fail@plt+0x3ed0>
   15350:	b	153d8 <__assert_fail@plt+0x3f18>
   15354:	mov	r0, r9
   15358:	mov	r1, r4
   1535c:	bl	14590 <__assert_fail@plt+0x30d0>
   15360:	mov	r5, r0
   15364:	str	r0, [r9, #4]
   15368:	mov	r0, r5
   1536c:	sub	sp, fp, #28
   15370:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15374:	ldr	r0, [r9, #32]
   15378:	movw	r1, #48636	; 0xbdfc
   1537c:	movt	r1, #1
   15380:	bl	16b60 <__assert_fail@plt+0x56a0>
   15384:	mov	r8, r0
   15388:	cmn	r0, #1
   1538c:	ble	153d8 <__assert_fail@plt+0x3f18>
   15390:	mov	r0, r9
   15394:	mov	r1, r4
   15398:	bl	14590 <__assert_fail@plt+0x30d0>
   1539c:	str	r0, [r9, #4]
   153a0:	ldrb	r0, [r9, #49]	; 0x31
   153a4:	tst	r0, #2
   153a8:	bne	153ec <__assert_fail@plt+0x3f2c>
   153ac:	mov	r0, r8
   153b0:	bl	11430 <fchdir@plt>
   153b4:	cmp	r0, #0
   153b8:	beq	15428 <__assert_fail@plt+0x3f68>
   153bc:	ldr	r4, [sl]
   153c0:	mov	r0, r8
   153c4:	bl	11484 <close@plt>
   153c8:	str	r4, [sl]
   153cc:	mov	r0, r5
   153d0:	sub	sp, fp, #28
   153d4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   153d8:	mov	r5, #0
   153dc:	str	r5, [r9, #4]
   153e0:	mov	r0, r5
   153e4:	sub	sp, fp, #28
   153e8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   153ec:	ldr	r1, [r9, #32]
   153f0:	cmp	r1, r8
   153f4:	bne	15400 <__assert_fail@plt+0x3f40>
   153f8:	cmn	r1, #100	; 0x64
   153fc:	bne	15440 <__assert_fail@plt+0x3f80>
   15400:	add	r0, r9, #60	; 0x3c
   15404:	bl	16a60 <__assert_fail@plt+0x55a0>
   15408:	cmp	r0, #0
   1540c:	blt	15414 <__assert_fail@plt+0x3f54>
   15410:	bl	11484 <close@plt>
   15414:	str	r8, [r9, #32]
   15418:	ldr	r5, [r9, #4]
   1541c:	mov	r0, r5
   15420:	sub	sp, fp, #28
   15424:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15428:	mov	r0, r8
   1542c:	bl	11484 <close@plt>
   15430:	ldr	r5, [r9, #4]
   15434:	mov	r0, r5
   15438:	sub	sp, fp, #28
   1543c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15440:	bl	11478 <abort@plt>
   15444:	push	{fp, lr}
   15448:	mov	fp, sp
   1544c:	mov	r2, r1
   15450:	ldrd	r0, [r0, #8]
   15454:	mov	r3, #0
   15458:	bl	1adcc <__assert_fail@plt+0x990c>
   1545c:	mov	r0, r2
   15460:	pop	{fp, pc}
   15464:	push	{r4, r5, fp, lr}
   15468:	add	fp, sp, #8
   1546c:	ldrd	r2, [r1, #8]
   15470:	ldrd	r4, [r0, #8]
   15474:	eor	r3, r5, r3
   15478:	eor	r2, r4, r2
   1547c:	orrs	r2, r2, r3
   15480:	mov	r2, #0
   15484:	bne	154a4 <__assert_fail@plt+0x3fe4>
   15488:	ldrd	r2, [r1]
   1548c:	ldrd	r0, [r0]
   15490:	eor	r1, r1, r3
   15494:	eor	r0, r0, r2
   15498:	orr	r0, r0, r1
   1549c:	clz	r0, r0
   154a0:	lsr	r2, r0, #5
   154a4:	mov	r0, r2
   154a8:	pop	{r4, r5, fp, pc}
   154ac:	push	{r4, r5, fp, lr}
   154b0:	add	fp, sp, #8
   154b4:	ldr	r0, [r0]
   154b8:	ldrd	r2, [r0, #160]	; 0xa0
   154bc:	ldr	r0, [r1]
   154c0:	ldrd	r4, [r0, #160]	; 0xa0
   154c4:	mov	r0, #0
   154c8:	subs	r1, r4, r2
   154cc:	sbcs	r1, r5, r3
   154d0:	movwcc	r0, #1
   154d4:	subs	r1, r2, r4
   154d8:	sbcs	r1, r3, r5
   154dc:	subcc	r0, r0, #1
   154e0:	pop	{r4, r5, fp, pc}
   154e4:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   154e8:	add	fp, sp, #24
   154ec:	sub	sp, sp, #96	; 0x60
   154f0:	ldr	r7, [r0, #44]	; 0x2c
   154f4:	mov	r4, r0
   154f8:	mov	r5, #0
   154fc:	ldrb	r0, [r7, #49]	; 0x31
   15500:	tst	r0, #2
   15504:	beq	155b4 <__assert_fail@plt+0x40f4>
   15508:	ldr	r6, [r7, #52]	; 0x34
   1550c:	mov	r9, r1
   15510:	cmp	r6, #0
   15514:	bne	15554 <__assert_fail@plt+0x4094>
   15518:	movw	r0, #11928	; 0x2e98
   1551c:	movw	r2, #22048	; 0x5620
   15520:	movw	r3, #22080	; 0x5640
   15524:	mov	r1, #0
   15528:	mov	r8, #0
   1552c:	movt	r0, #1
   15530:	movt	r2, #1
   15534:	movt	r3, #1
   15538:	str	r0, [sp]
   1553c:	mov	r0, #13
   15540:	bl	15b00 <__assert_fail@plt+0x4640>
   15544:	mov	r6, r0
   15548:	cmp	r0, #0
   1554c:	str	r0, [r7, #52]	; 0x34
   15550:	beq	15594 <__assert_fail@plt+0x40d4>
   15554:	ldrd	r0, [r4, #64]	; 0x40
   15558:	str	r1, [sp, #12]
   1555c:	str	r0, [sp, #8]
   15560:	add	r1, sp, #8
   15564:	mov	r0, r6
   15568:	bl	15838 <__assert_fail@plt+0x4378>
   1556c:	cmp	r0, #0
   15570:	beq	15584 <__assert_fail@plt+0x40c4>
   15574:	ldr	r5, [r0, #8]
   15578:	mov	r0, r5
   1557c:	sub	sp, fp, #24
   15580:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   15584:	mov	r8, #1
   15588:	cmp	r9, #0
   1558c:	bge	155a0 <__assert_fail@plt+0x40e0>
   15590:	b	155b4 <__assert_fail@plt+0x40f4>
   15594:	mov	r6, #0
   15598:	cmp	r9, #0
   1559c:	blt	155b4 <__assert_fail@plt+0x40f4>
   155a0:	add	r1, sp, #8
   155a4:	mov	r0, r9
   155a8:	bl	1119c <fstatfs64@plt>
   155ac:	cmp	r0, #0
   155b0:	beq	155c0 <__assert_fail@plt+0x4100>
   155b4:	mov	r0, r5
   155b8:	sub	sp, fp, #24
   155bc:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   155c0:	cmp	r8, #0
   155c4:	beq	15610 <__assert_fail@plt+0x4150>
   155c8:	mov	r0, #16
   155cc:	bl	1a618 <__assert_fail@plt+0x9158>
   155d0:	cmp	r0, #0
   155d4:	beq	15610 <__assert_fail@plt+0x4150>
   155d8:	mov	r5, r0
   155dc:	ldrd	r0, [r4, #64]	; 0x40
   155e0:	ldr	r2, [sp, #8]
   155e4:	stm	r5, {r0, r1, r2}
   155e8:	mov	r0, r6
   155ec:	mov	r1, r5
   155f0:	bl	16738 <__assert_fail@plt+0x5278>
   155f4:	cmp	r0, #0
   155f8:	beq	15608 <__assert_fail@plt+0x4148>
   155fc:	cmp	r0, r5
   15600:	beq	15610 <__assert_fail@plt+0x4150>
   15604:	bl	11478 <abort@plt>
   15608:	mov	r0, r5
   1560c:	bl	12e98 <__assert_fail@plt+0x19d8>
   15610:	ldr	r5, [sp, #8]
   15614:	mov	r0, r5
   15618:	sub	sp, fp, #24
   1561c:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   15620:	push	{fp, lr}
   15624:	mov	fp, sp
   15628:	mov	r2, r1
   1562c:	ldrd	r0, [r0]
   15630:	mov	r3, #0
   15634:	bl	1adcc <__assert_fail@plt+0x990c>
   15638:	mov	r0, r2
   1563c:	pop	{fp, pc}
   15640:	ldrd	r2, [r1]
   15644:	ldrd	r0, [r0]
   15648:	eor	r1, r1, r3
   1564c:	eor	r0, r0, r2
   15650:	orr	r0, r0, r1
   15654:	clz	r0, r0
   15658:	lsr	r0, r0, #5
   1565c:	bx	lr
   15660:	ldr	r0, [r0, #8]
   15664:	bx	lr
   15668:	ldr	r0, [r0, #12]
   1566c:	bx	lr
   15670:	ldr	r0, [r0, #16]
   15674:	bx	lr
   15678:	ldm	r0, {r2, ip}
   1567c:	mov	r0, #0
   15680:	cmp	r2, ip
   15684:	bxcs	lr
   15688:	mov	r0, #0
   1568c:	ldr	r1, [r2]
   15690:	cmp	r1, #0
   15694:	beq	156b8 <__assert_fail@plt+0x41f8>
   15698:	mov	r3, #0
   1569c:	mov	r1, r2
   156a0:	ldr	r1, [r1, #4]
   156a4:	add	r3, r3, #1
   156a8:	cmp	r1, #0
   156ac:	bne	156a0 <__assert_fail@plt+0x41e0>
   156b0:	cmp	r3, r0
   156b4:	movhi	r0, r3
   156b8:	add	r2, r2, #8
   156bc:	cmp	r2, ip
   156c0:	bcc	1568c <__assert_fail@plt+0x41cc>
   156c4:	bx	lr
   156c8:	push	{fp, lr}
   156cc:	mov	fp, sp
   156d0:	ldm	r0, {r3, ip}
   156d4:	mov	lr, #0
   156d8:	mov	r1, #0
   156dc:	cmp	r3, ip
   156e0:	bcs	1571c <__assert_fail@plt+0x425c>
   156e4:	mov	r1, #0
   156e8:	mov	lr, #0
   156ec:	ldr	r2, [r3]
   156f0:	cmp	r2, #0
   156f4:	beq	15710 <__assert_fail@plt+0x4250>
   156f8:	mov	r2, r3
   156fc:	ldr	r2, [r2, #4]
   15700:	add	r1, r1, #1
   15704:	cmp	r2, #0
   15708:	bne	156fc <__assert_fail@plt+0x423c>
   1570c:	add	lr, lr, #1
   15710:	add	r3, r3, #8
   15714:	cmp	r3, ip
   15718:	bcc	156ec <__assert_fail@plt+0x422c>
   1571c:	ldr	r2, [r0, #12]
   15720:	cmp	lr, r2
   15724:	bne	1573c <__assert_fail@plt+0x427c>
   15728:	ldr	r2, [r0, #16]
   1572c:	mov	r0, #1
   15730:	cmp	r1, r2
   15734:	movne	r0, #0
   15738:	pop	{fp, pc}
   1573c:	mov	r0, #0
   15740:	pop	{fp, pc}
   15744:	nop	{0}
   15748:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   1574c:	add	fp, sp, #24
   15750:	sub	sp, sp, #8
   15754:	ldr	r6, [r0]
   15758:	ldmib	r0, {r2, r7, r8}
   1575c:	ldr	r3, [r0, #16]
   15760:	mov	r4, r1
   15764:	mov	r5, #0
   15768:	cmp	r6, r2
   1576c:	bcs	157ac <__assert_fail@plt+0x42ec>
   15770:	mov	r5, #0
   15774:	ldr	r0, [r6]
   15778:	cmp	r0, #0
   1577c:	beq	157a0 <__assert_fail@plt+0x42e0>
   15780:	mov	r0, #0
   15784:	mov	r1, r6
   15788:	ldr	r1, [r1, #4]
   1578c:	add	r0, r0, #1
   15790:	cmp	r1, #0
   15794:	bne	15788 <__assert_fail@plt+0x42c8>
   15798:	cmp	r0, r5
   1579c:	movhi	r5, r0
   157a0:	add	r6, r6, #8
   157a4:	cmp	r6, r2
   157a8:	bcc	15774 <__assert_fail@plt+0x42b4>
   157ac:	movw	r2, #48688	; 0xbe30
   157b0:	mov	r0, r4
   157b4:	mov	r1, #1
   157b8:	movt	r2, #1
   157bc:	bl	113b8 <__fprintf_chk@plt>
   157c0:	movw	r2, #48712	; 0xbe48
   157c4:	mov	r0, r4
   157c8:	mov	r1, #1
   157cc:	mov	r3, r7
   157d0:	movt	r2, #1
   157d4:	bl	113b8 <__fprintf_chk@plt>
   157d8:	vldr	d16, [pc, #80]	; 15830 <__assert_fail@plt+0x4370>
   157dc:	vmov	s0, r8
   157e0:	movw	r2, #48736	; 0xbe60
   157e4:	mov	r0, r4
   157e8:	mov	r1, #1
   157ec:	mov	r3, r8
   157f0:	vcvt.f64.u32	d17, s0
   157f4:	vmov	s0, r7
   157f8:	movt	r2, #1
   157fc:	vcvt.f64.u32	d18, s0
   15800:	vmul.f64	d16, d17, d16
   15804:	vdiv.f64	d16, d16, d18
   15808:	vstr	d16, [sp]
   1580c:	bl	113b8 <__fprintf_chk@plt>
   15810:	movw	r2, #48769	; 0xbe81
   15814:	mov	r0, r4
   15818:	mov	r1, #1
   1581c:	mov	r3, r5
   15820:	movt	r2, #1
   15824:	sub	sp, fp, #24
   15828:	pop	{r4, r5, r6, r7, r8, sl, fp, lr}
   1582c:	b	113b8 <__fprintf_chk@plt>
   15830:	andeq	r0, r0, r0
   15834:	subsmi	r0, r9, r0
   15838:	push	{r4, r5, r6, r7, fp, lr}
   1583c:	add	fp, sp, #16
   15840:	mov	r4, r1
   15844:	ldr	r1, [r0, #8]
   15848:	ldr	r2, [r0, #24]
   1584c:	mov	r5, r0
   15850:	mov	r0, r4
   15854:	blx	r2
   15858:	ldr	r1, [r5, #8]
   1585c:	cmp	r0, r1
   15860:	bcs	158cc <__assert_fail@plt+0x440c>
   15864:	ldr	r7, [r5]
   15868:	mov	r6, #0
   1586c:	ldr	r1, [r7, r0, lsl #3]!
   15870:	cmp	r1, #0
   15874:	cmpne	r7, #0
   15878:	bne	15888 <__assert_fail@plt+0x43c8>
   1587c:	mov	r0, r6
   15880:	pop	{r4, r5, r6, r7, fp, pc}
   15884:	ldr	r1, [r7]
   15888:	cmp	r1, r4
   1588c:	beq	158b4 <__assert_fail@plt+0x43f4>
   15890:	ldr	r2, [r5, #28]
   15894:	mov	r0, r4
   15898:	blx	r2
   1589c:	cmp	r0, #0
   158a0:	bne	158c0 <__assert_fail@plt+0x4400>
   158a4:	ldr	r7, [r7, #4]
   158a8:	cmp	r7, #0
   158ac:	bne	15884 <__assert_fail@plt+0x43c4>
   158b0:	b	1587c <__assert_fail@plt+0x43bc>
   158b4:	mov	r6, r4
   158b8:	mov	r0, r6
   158bc:	pop	{r4, r5, r6, r7, fp, pc}
   158c0:	ldr	r6, [r7]
   158c4:	mov	r0, r6
   158c8:	pop	{r4, r5, r6, r7, fp, pc}
   158cc:	bl	11478 <abort@plt>
   158d0:	ldr	r1, [r0, #16]
   158d4:	cmp	r1, #0
   158d8:	moveq	r0, #0
   158dc:	bxeq	lr
   158e0:	ldm	r0, {r1, r2}
   158e4:	cmp	r1, r2
   158e8:	bcs	15900 <__assert_fail@plt+0x4440>
   158ec:	ldr	r0, [r1], #8
   158f0:	cmp	r0, #0
   158f4:	bxne	lr
   158f8:	cmp	r1, r2
   158fc:	bcc	158ec <__assert_fail@plt+0x442c>
   15900:	push	{fp, lr}
   15904:	mov	fp, sp
   15908:	bl	11478 <abort@plt>
   1590c:	push	{r4, r5, fp, lr}
   15910:	add	fp, sp, #8
   15914:	mov	r5, r1
   15918:	ldr	r1, [r0, #8]
   1591c:	ldr	r2, [r0, #24]
   15920:	mov	r4, r0
   15924:	mov	r0, r5
   15928:	blx	r2
   1592c:	ldr	r1, [r4, #8]
   15930:	cmp	r0, r1
   15934:	bcs	15990 <__assert_fail@plt+0x44d0>
   15938:	ldr	r1, [r4]
   1593c:	add	r2, r1, r0, lsl #3
   15940:	ldr	r3, [r2]
   15944:	ldr	r2, [r2, #4]
   15948:	cmp	r3, r5
   1594c:	beq	1595c <__assert_fail@plt+0x449c>
   15950:	cmp	r2, #0
   15954:	bne	15940 <__assert_fail@plt+0x4480>
   15958:	b	15968 <__assert_fail@plt+0x44a8>
   1595c:	cmp	r2, #0
   15960:	ldrne	r0, [r2]
   15964:	popne	{r4, r5, fp, pc}
   15968:	ldr	r2, [r4, #4]
   1596c:	add	r0, r1, r0, lsl #3
   15970:	add	r1, r0, #8
   15974:	cmp	r1, r2
   15978:	movcs	r0, #0
   1597c:	popcs	{r4, r5, fp, pc}
   15980:	ldr	r0, [r1], #8
   15984:	cmp	r0, #0
   15988:	popne	{r4, r5, fp, pc}
   1598c:	b	15974 <__assert_fail@plt+0x44b4>
   15990:	bl	11478 <abort@plt>
   15994:	push	{r4, r5, fp, lr}
   15998:	add	fp, sp, #8
   1599c:	ldm	r0, {r5, lr}
   159a0:	mov	ip, r0
   159a4:	mov	r0, #0
   159a8:	cmp	r5, lr
   159ac:	bcs	15a08 <__assert_fail@plt+0x4548>
   159b0:	mov	r0, #0
   159b4:	ldr	r3, [r5]
   159b8:	cmp	r3, #0
   159bc:	cmpne	r5, #0
   159c0:	bne	159d4 <__assert_fail@plt+0x4514>
   159c4:	add	r5, r5, #8
   159c8:	cmp	r5, lr
   159cc:	bcc	159b4 <__assert_fail@plt+0x44f4>
   159d0:	b	15a08 <__assert_fail@plt+0x4548>
   159d4:	mov	r3, r5
   159d8:	cmp	r0, r2
   159dc:	popcs	{r4, r5, fp, pc}
   159e0:	ldr	r4, [r3]
   159e4:	str	r4, [r1, r0, lsl #2]
   159e8:	add	r0, r0, #1
   159ec:	ldr	r3, [r3, #4]
   159f0:	cmp	r3, #0
   159f4:	bne	159d8 <__assert_fail@plt+0x4518>
   159f8:	ldr	lr, [ip, #4]
   159fc:	add	r5, r5, #8
   15a00:	cmp	r5, lr
   15a04:	bcc	159b4 <__assert_fail@plt+0x44f4>
   15a08:	pop	{r4, r5, fp, pc}
   15a0c:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   15a10:	add	fp, sp, #24
   15a14:	mov	r5, r1
   15a18:	ldr	r4, [r0]
   15a1c:	ldr	r1, [r0, #4]
   15a20:	mov	r6, #0
   15a24:	cmp	r4, r1
   15a28:	bcs	15aa4 <__assert_fail@plt+0x45e4>
   15a2c:	mov	r9, r2
   15a30:	mov	r8, r0
   15a34:	mov	r6, #0
   15a38:	ldr	r0, [r4]
   15a3c:	cmp	r0, #0
   15a40:	cmpne	r4, #0
   15a44:	bne	15a58 <__assert_fail@plt+0x4598>
   15a48:	add	r4, r4, #8
   15a4c:	cmp	r4, r1
   15a50:	bcc	15a38 <__assert_fail@plt+0x4578>
   15a54:	b	15aa4 <__assert_fail@plt+0x45e4>
   15a58:	mov	r1, r9
   15a5c:	blx	r5
   15a60:	cmp	r0, #0
   15a64:	beq	15aa4 <__assert_fail@plt+0x45e4>
   15a68:	mov	r7, r4
   15a6c:	ldr	r7, [r7, #4]
   15a70:	add	r6, r6, #1
   15a74:	cmp	r7, #0
   15a78:	beq	15a94 <__assert_fail@plt+0x45d4>
   15a7c:	ldr	r0, [r7]
   15a80:	mov	r1, r9
   15a84:	blx	r5
   15a88:	cmp	r0, #0
   15a8c:	bne	15a6c <__assert_fail@plt+0x45ac>
   15a90:	b	15aa4 <__assert_fail@plt+0x45e4>
   15a94:	ldr	r1, [r8, #4]
   15a98:	add	r4, r4, #8
   15a9c:	cmp	r4, r1
   15aa0:	bcc	15a38 <__assert_fail@plt+0x4578>
   15aa4:	mov	r0, r6
   15aa8:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   15aac:	ldrb	r2, [r0]
   15ab0:	cmp	r2, #0
   15ab4:	moveq	r0, #0
   15ab8:	bxeq	lr
   15abc:	add	r3, r0, #1
   15ac0:	mov	r0, #0
   15ac4:	rsb	r0, r0, r0, lsl #5
   15ac8:	uxtab	r0, r0, r2
   15acc:	udiv	r2, r0, r1
   15ad0:	mls	r0, r2, r1, r0
   15ad4:	ldrb	r2, [r3], #1
   15ad8:	cmp	r2, #0
   15adc:	bne	15ac4 <__assert_fail@plt+0x4604>
   15ae0:	bx	lr
   15ae4:	movw	r1, #48800	; 0xbea0
   15ae8:	movt	r1, #1
   15aec:	vld1.32	{d16-d17}, [r1]!
   15af0:	ldr	r1, [r1]
   15af4:	vst1.32	{d16-d17}, [r0]!
   15af8:	str	r1, [r0]
   15afc:	bx	lr
   15b00:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   15b04:	add	fp, sp, #24
   15b08:	movw	r9, #23884	; 0x5d4c
   15b0c:	movw	r5, #23864	; 0x5d38
   15b10:	cmp	r3, #0
   15b14:	mov	r6, r0
   15b18:	mov	r0, #40	; 0x28
   15b1c:	mov	r7, r1
   15b20:	movt	r9, #1
   15b24:	movt	r5, #1
   15b28:	movne	r9, r3
   15b2c:	cmp	r2, #0
   15b30:	movne	r5, r2
   15b34:	bl	1a618 <__assert_fail@plt+0x9158>
   15b38:	mov	r8, #0
   15b3c:	cmp	r0, #0
   15b40:	beq	15d20 <__assert_fail@plt+0x4860>
   15b44:	mov	r4, r0
   15b48:	cmp	r7, #0
   15b4c:	beq	15bfc <__assert_fail@plt+0x473c>
   15b50:	movw	r0, #48800	; 0xbea0
   15b54:	str	r7, [r4, #20]
   15b58:	movt	r0, #1
   15b5c:	cmp	r7, r0
   15b60:	beq	15c08 <__assert_fail@plt+0x4748>
   15b64:	vldr	s2, [pc, #444]	; 15d28 <__assert_fail@plt+0x4868>
   15b68:	vldr	s0, [r7, #8]
   15b6c:	vcmpe.f32	s0, s2
   15b70:	vmrs	APSR_nzcv, fpscr
   15b74:	ble	15be0 <__assert_fail@plt+0x4720>
   15b78:	vldr	s4, [pc, #428]	; 15d2c <__assert_fail@plt+0x486c>
   15b7c:	vcmpe.f32	s0, s4
   15b80:	vmrs	APSR_nzcv, fpscr
   15b84:	bpl	15be0 <__assert_fail@plt+0x4720>
   15b88:	vldr	s4, [pc, #416]	; 15d30 <__assert_fail@plt+0x4870>
   15b8c:	vldr	s6, [r7, #12]
   15b90:	vcmpe.f32	s6, s4
   15b94:	vmrs	APSR_nzcv, fpscr
   15b98:	ble	15be0 <__assert_fail@plt+0x4720>
   15b9c:	vldr	s4, [r7]
   15ba0:	vcmpe.f32	s4, #0.0
   15ba4:	vmrs	APSR_nzcv, fpscr
   15ba8:	blt	15be0 <__assert_fail@plt+0x4720>
   15bac:	vadd.f32	s2, s4, s2
   15bb0:	vcmpe.f32	s2, s0
   15bb4:	vmrs	APSR_nzcv, fpscr
   15bb8:	bpl	15be0 <__assert_fail@plt+0x4720>
   15bbc:	vldr	s0, [r7, #4]
   15bc0:	vmov.f32	s4, #112	; 0x3f800000  1.0
   15bc4:	vcmpe.f32	s0, s4
   15bc8:	vmrs	APSR_nzcv, fpscr
   15bcc:	bhi	15be0 <__assert_fail@plt+0x4720>
   15bd0:	vcmpe.f32	s2, s0
   15bd4:	mov	r0, r7
   15bd8:	vmrs	APSR_nzcv, fpscr
   15bdc:	bmi	15c08 <__assert_fail@plt+0x4748>
   15be0:	movw	r0, #48800	; 0xbea0
   15be4:	movt	r0, #1
   15be8:	str	r0, [r4, #20]
   15bec:	mov	r0, r4
   15bf0:	bl	12e98 <__assert_fail@plt+0x19d8>
   15bf4:	mov	r0, r8
   15bf8:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   15bfc:	movw	r0, #48800	; 0xbea0
   15c00:	movt	r0, #1
   15c04:	str	r0, [r4, #20]
   15c08:	ldrb	r1, [r0, #16]
   15c0c:	cmp	r1, #0
   15c10:	bne	15c3c <__assert_fail@plt+0x477c>
   15c14:	vldr	s0, [r0, #8]
   15c18:	vldr	s4, [pc, #276]	; 15d34 <__assert_fail@plt+0x4874>
   15c1c:	vmov	s2, r6
   15c20:	vcvt.f32.u32	s2, s2
   15c24:	vdiv.f32	s2, s2, s0
   15c28:	vcmpe.f32	s2, s4
   15c2c:	vcvt.u32.f32	s0, s2
   15c30:	vmrs	APSR_nzcv, fpscr
   15c34:	bge	15cbc <__assert_fail@plt+0x47fc>
   15c38:	vmov	r6, s0
   15c3c:	cmp	r6, #10
   15c40:	movls	r6, #10
   15c44:	orr	r0, r6, #1
   15c48:	cmn	r0, #1
   15c4c:	beq	15cbc <__assert_fail@plt+0x47fc>
   15c50:	ldr	r6, [fp, #8]
   15c54:	mov	r1, #3
   15c58:	cmp	r0, #10
   15c5c:	bcc	15c94 <__assert_fail@plt+0x47d4>
   15c60:	mov	r1, #3
   15c64:	mov	r3, #9
   15c68:	mov	r2, #12
   15c6c:	udiv	r7, r0, r1
   15c70:	mls	r7, r7, r1, r0
   15c74:	cmp	r7, #0
   15c78:	beq	15c94 <__assert_fail@plt+0x47d4>
   15c7c:	add	r3, r3, r2
   15c80:	add	r2, r2, #8
   15c84:	add	r1, r1, #2
   15c88:	add	r3, r3, #4
   15c8c:	cmp	r3, r0
   15c90:	bcc	15c6c <__assert_fail@plt+0x47ac>
   15c94:	udiv	r2, r0, r1
   15c98:	mls	r1, r2, r1, r0
   15c9c:	cmp	r1, #0
   15ca0:	bne	15cb4 <__assert_fail@plt+0x47f4>
   15ca4:	add	r0, r0, #2
   15ca8:	cmn	r0, #1
   15cac:	bne	15c54 <__assert_fail@plt+0x4794>
   15cb0:	b	15cbc <__assert_fail@plt+0x47fc>
   15cb4:	cmp	r0, #536870912	; 0x20000000
   15cb8:	bcc	15cd4 <__assert_fail@plt+0x4814>
   15cbc:	mov	r0, #0
   15cc0:	str	r0, [r4, #8]
   15cc4:	mov	r0, r4
   15cc8:	bl	12e98 <__assert_fail@plt+0x19d8>
   15ccc:	mov	r0, r8
   15cd0:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   15cd4:	cmp	r0, #0
   15cd8:	str	r0, [r4, #8]
   15cdc:	beq	15cc4 <__assert_fail@plt+0x4804>
   15ce0:	mov	r1, #8
   15ce4:	bl	1a5c4 <__assert_fail@plt+0x9104>
   15ce8:	cmp	r0, #0
   15cec:	str	r0, [r4]
   15cf0:	beq	15cc4 <__assert_fail@plt+0x4804>
   15cf4:	mov	r1, #0
   15cf8:	mov	r8, r4
   15cfc:	str	r1, [r4, #12]
   15d00:	str	r1, [r4, #16]
   15d04:	str	r5, [r4, #24]
   15d08:	str	r9, [r4, #28]
   15d0c:	str	r6, [r4, #32]
   15d10:	str	r1, [r4, #36]	; 0x24
   15d14:	ldr	r1, [r4, #8]
   15d18:	add	r0, r0, r1, lsl #3
   15d1c:	str	r0, [r4, #4]
   15d20:	mov	r0, r8
   15d24:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   15d28:	stclcc	12, cr12, [ip, #820]	; 0x334
   15d2c:	svccc	0x00666666
   15d30:	svccc	0x008ccccd
   15d34:	svcmi	0x00800000
   15d38:	ror	r2, r0, #3
   15d3c:	udiv	r2, r2, r1
   15d40:	mul	r1, r2, r1
   15d44:	rsb	r0, r1, r0, ror #3
   15d48:	bx	lr
   15d4c:	sub	r0, r0, r1
   15d50:	clz	r0, r0
   15d54:	lsr	r0, r0, #5
   15d58:	bx	lr
   15d5c:	push	{r4, r5, r6, r7, fp, lr}
   15d60:	add	fp, sp, #16
   15d64:	mov	r4, r0
   15d68:	ldr	r5, [r0]
   15d6c:	ldr	r0, [r0, #4]
   15d70:	cmp	r5, r0
   15d74:	bcs	15e0c <__assert_fail@plt+0x494c>
   15d78:	mov	r6, #0
   15d7c:	ldr	r1, [r5]
   15d80:	cmp	r1, #0
   15d84:	beq	15e00 <__assert_fail@plt+0x4940>
   15d88:	ldr	r1, [r4, #32]
   15d8c:	ldr	r7, [r5, #4]
   15d90:	cmp	r1, #0
   15d94:	mov	r0, r1
   15d98:	movwne	r0, #1
   15d9c:	cmp	r7, #0
   15da0:	beq	15de4 <__assert_fail@plt+0x4924>
   15da4:	tst	r0, #1
   15da8:	beq	15db8 <__assert_fail@plt+0x48f8>
   15dac:	ldr	r0, [r7]
   15db0:	blx	r1
   15db4:	ldr	r1, [r4, #32]
   15db8:	str	r6, [r7]
   15dbc:	cmp	r1, #0
   15dc0:	ldr	r0, [r4, #36]	; 0x24
   15dc4:	ldr	r2, [r7, #4]
   15dc8:	str	r0, [r7, #4]
   15dcc:	mov	r0, r1
   15dd0:	str	r7, [r4, #36]	; 0x24
   15dd4:	mov	r7, r2
   15dd8:	movwne	r0, #1
   15ddc:	cmp	r2, #0
   15de0:	bne	15da4 <__assert_fail@plt+0x48e4>
   15de4:	cmp	r0, #0
   15de8:	beq	15df4 <__assert_fail@plt+0x4934>
   15dec:	ldr	r0, [r5]
   15df0:	blx	r1
   15df4:	str	r6, [r5]
   15df8:	str	r6, [r5, #4]
   15dfc:	ldr	r0, [r4, #4]
   15e00:	add	r5, r5, #8
   15e04:	cmp	r5, r0
   15e08:	bcc	15d7c <__assert_fail@plt+0x48bc>
   15e0c:	mov	r0, #0
   15e10:	str	r0, [r4, #12]
   15e14:	str	r0, [r4, #16]
   15e18:	pop	{r4, r5, r6, r7, fp, pc}
   15e1c:	push	{r4, r5, r6, sl, fp, lr}
   15e20:	add	fp, sp, #16
   15e24:	mov	r4, r0
   15e28:	ldr	r0, [r0, #32]
   15e2c:	cmp	r0, #0
   15e30:	ldrne	r0, [r4, #16]
   15e34:	cmpne	r0, #0
   15e38:	beq	15ea0 <__assert_fail@plt+0x49e0>
   15e3c:	ldr	r5, [r4]
   15e40:	ldr	r1, [r4, #4]
   15e44:	cmp	r5, r1
   15e48:	bcc	15e5c <__assert_fail@plt+0x499c>
   15e4c:	b	15ea0 <__assert_fail@plt+0x49e0>
   15e50:	add	r5, r5, #8
   15e54:	cmp	r5, r1
   15e58:	bcs	15ea0 <__assert_fail@plt+0x49e0>
   15e5c:	ldr	r0, [r5]
   15e60:	cmp	r0, #0
   15e64:	cmpne	r5, #0
   15e68:	beq	15e50 <__assert_fail@plt+0x4990>
   15e6c:	ldr	r1, [r4, #32]
   15e70:	blx	r1
   15e74:	ldr	r6, [r5, #4]
   15e78:	cmp	r6, #0
   15e7c:	beq	15e98 <__assert_fail@plt+0x49d8>
   15e80:	ldr	r1, [r4, #32]
   15e84:	ldr	r0, [r6]
   15e88:	blx	r1
   15e8c:	ldr	r6, [r6, #4]
   15e90:	cmp	r6, #0
   15e94:	bne	15e80 <__assert_fail@plt+0x49c0>
   15e98:	ldr	r1, [r4, #4]
   15e9c:	b	15e50 <__assert_fail@plt+0x4990>
   15ea0:	ldr	r5, [r4]
   15ea4:	ldr	r1, [r4, #4]
   15ea8:	cmp	r5, r1
   15eac:	bcc	15ec0 <__assert_fail@plt+0x4a00>
   15eb0:	b	15ee8 <__assert_fail@plt+0x4a28>
   15eb4:	add	r5, r5, #8
   15eb8:	cmp	r5, r1
   15ebc:	bcs	15ee8 <__assert_fail@plt+0x4a28>
   15ec0:	ldr	r0, [r5, #4]
   15ec4:	cmp	r0, #0
   15ec8:	beq	15eb4 <__assert_fail@plt+0x49f4>
   15ecc:	ldr	r6, [r0, #4]
   15ed0:	bl	12e98 <__assert_fail@plt+0x19d8>
   15ed4:	cmp	r6, #0
   15ed8:	mov	r0, r6
   15edc:	bne	15ecc <__assert_fail@plt+0x4a0c>
   15ee0:	ldr	r1, [r4, #4]
   15ee4:	b	15eb4 <__assert_fail@plt+0x49f4>
   15ee8:	ldr	r0, [r4, #36]	; 0x24
   15eec:	cmp	r0, #0
   15ef0:	beq	15f08 <__assert_fail@plt+0x4a48>
   15ef4:	ldr	r5, [r0, #4]
   15ef8:	bl	12e98 <__assert_fail@plt+0x19d8>
   15efc:	cmp	r5, #0
   15f00:	mov	r0, r5
   15f04:	bne	15ef4 <__assert_fail@plt+0x4a34>
   15f08:	ldr	r0, [r4]
   15f0c:	bl	12e98 <__assert_fail@plt+0x19d8>
   15f10:	mov	r0, r4
   15f14:	pop	{r4, r5, r6, sl, fp, lr}
   15f18:	b	12e98 <__assert_fail@plt+0x19d8>
   15f1c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   15f20:	add	fp, sp, #28
   15f24:	sub	sp, sp, #44	; 0x2c
   15f28:	mov	r7, r0
   15f2c:	mov	r4, r0
   15f30:	ldr	r0, [r7, #20]!
   15f34:	ldrb	r2, [r0, #16]
   15f38:	cmp	r2, #0
   15f3c:	bne	15f6c <__assert_fail@plt+0x4aac>
   15f40:	vldr	s0, [r0, #8]
   15f44:	vldr	s4, [pc, #576]	; 1618c <__assert_fail@plt+0x4ccc>
   15f48:	vmov	s2, r1
   15f4c:	mov	r5, #0
   15f50:	vcvt.f32.u32	s2, s2
   15f54:	vdiv.f32	s2, s2, s0
   15f58:	vcmpe.f32	s2, s4
   15f5c:	vcvt.u32.f32	s0, s2
   15f60:	vmrs	APSR_nzcv, fpscr
   15f64:	bge	16090 <__assert_fail@plt+0x4bd0>
   15f68:	vmov	r1, s0
   15f6c:	cmp	r1, #10
   15f70:	mov	r5, #0
   15f74:	movls	r1, #10
   15f78:	orr	r6, r1, #1
   15f7c:	cmn	r6, #1
   15f80:	bne	15f94 <__assert_fail@plt+0x4ad4>
   15f84:	b	16090 <__assert_fail@plt+0x4bd0>
   15f88:	add	r6, r6, #2
   15f8c:	cmn	r6, #1
   15f90:	beq	16090 <__assert_fail@plt+0x4bd0>
   15f94:	mov	r0, #3
   15f98:	cmp	r6, #10
   15f9c:	bcc	15fd4 <__assert_fail@plt+0x4b14>
   15fa0:	mov	r0, #3
   15fa4:	mov	r2, #9
   15fa8:	mov	r1, #12
   15fac:	udiv	r3, r6, r0
   15fb0:	mls	r3, r3, r0, r6
   15fb4:	cmp	r3, #0
   15fb8:	beq	15fd4 <__assert_fail@plt+0x4b14>
   15fbc:	add	r2, r2, r1
   15fc0:	add	r1, r1, #8
   15fc4:	add	r0, r0, #2
   15fc8:	add	r2, r2, #4
   15fcc:	cmp	r2, r6
   15fd0:	bcc	15fac <__assert_fail@plt+0x4aec>
   15fd4:	udiv	r1, r6, r0
   15fd8:	mls	r0, r1, r0, r6
   15fdc:	cmp	r0, #0
   15fe0:	beq	15f88 <__assert_fail@plt+0x4ac8>
   15fe4:	sub	r0, r6, #1
   15fe8:	cmn	r0, #-536870910	; 0xe0000002
   15fec:	bhi	16090 <__assert_fail@plt+0x4bd0>
   15ff0:	ldr	r0, [r4, #8]
   15ff4:	cmp	r6, r0
   15ff8:	bne	1600c <__assert_fail@plt+0x4b4c>
   15ffc:	mov	r5, #1
   16000:	mov	r0, r5
   16004:	sub	sp, fp, #28
   16008:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1600c:	mov	r0, r6
   16010:	mov	r1, #8
   16014:	bl	1a5c4 <__assert_fail@plt+0x9104>
   16018:	cmp	r0, #0
   1601c:	str	r0, [sp, #4]
   16020:	beq	16090 <__assert_fail@plt+0x4bd0>
   16024:	mov	r1, #0
   16028:	add	r0, r0, r6, lsl #3
   1602c:	str	r6, [sp, #12]
   16030:	add	r5, sp, #4
   16034:	mov	sl, r4
   16038:	mov	r2, #0
   1603c:	str	r1, [sp, #16]
   16040:	str	r1, [sp, #20]
   16044:	str	r0, [sp, #8]
   16048:	add	r0, r5, #20
   1604c:	mov	r1, r4
   16050:	vld1.32	{d16-d17}, [r7]
   16054:	vst1.32	{d16-d17}, [r0]
   16058:	ldr	r0, [sl, #36]!	; 0x24
   1605c:	str	r0, [sp, #40]	; 0x28
   16060:	mov	r0, r5
   16064:	bl	16190 <__assert_fail@plt+0x4cd0>
   16068:	cmp	r0, #0
   1606c:	beq	1609c <__assert_fail@plt+0x4bdc>
   16070:	ldr	r0, [r4]
   16074:	bl	12e98 <__assert_fail@plt+0x19d8>
   16078:	mov	r0, #36	; 0x24
   1607c:	vld1.32	{d16-d17}, [r5], r0
   16080:	vst1.32	{d16-d17}, [r4], r0
   16084:	ldr	r0, [r5]
   16088:	mov	r5, #1
   1608c:	str	r0, [r4]
   16090:	mov	r0, r5
   16094:	sub	sp, fp, #28
   16098:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1609c:	ldr	r0, [sp, #40]	; 0x28
   160a0:	str	r0, [sl]
   160a4:	ldr	r0, [sp, #8]
   160a8:	ldr	r8, [sp, #4]
   160ac:	cmp	r8, r0
   160b0:	str	r0, [sp]
   160b4:	bcs	16158 <__assert_fail@plt+0x4c98>
   160b8:	mov	r9, #0
   160bc:	ldr	r0, [r8]
   160c0:	cmp	r0, #0
   160c4:	beq	16148 <__assert_fail@plt+0x4c88>
   160c8:	ldr	r6, [r8, #4]
   160cc:	cmp	r6, #0
   160d0:	beq	16144 <__assert_fail@plt+0x4c84>
   160d4:	ldr	r1, [r4, #8]
   160d8:	ldr	r5, [r6]
   160dc:	ldr	r2, [r4, #24]
   160e0:	mov	r0, r5
   160e4:	blx	r2
   160e8:	ldr	r1, [r4, #8]
   160ec:	cmp	r0, r1
   160f0:	bcs	16188 <__assert_fail@plt+0x4cc8>
   160f4:	ldr	r3, [r4]
   160f8:	ldr	r2, [r6, #4]
   160fc:	ldr	r7, [r3, r0, lsl #3]
   16100:	cmp	r7, #0
   16104:	beq	16114 <__assert_fail@plt+0x4c54>
   16108:	add	r0, r3, r0, lsl #3
   1610c:	add	r0, r0, #4
   16110:	b	1612c <__assert_fail@plt+0x4c6c>
   16114:	str	r5, [r3, r0, lsl #3]
   16118:	ldr	r0, [r4, #12]
   1611c:	add	r0, r0, #1
   16120:	str	r0, [r4, #12]
   16124:	mov	r0, sl
   16128:	str	r9, [r6]
   1612c:	ldr	r3, [r0]
   16130:	cmp	r2, #0
   16134:	str	r3, [r6, #4]
   16138:	str	r6, [r0]
   1613c:	mov	r6, r2
   16140:	bne	160d8 <__assert_fail@plt+0x4c18>
   16144:	str	r9, [r8, #4]
   16148:	ldr	r0, [sp]
   1614c:	add	r8, r8, #8
   16150:	cmp	r8, r0
   16154:	bcc	160bc <__assert_fail@plt+0x4bfc>
   16158:	add	r1, sp, #4
   1615c:	mov	r0, r4
   16160:	mov	r2, #0
   16164:	mov	r5, #0
   16168:	bl	16190 <__assert_fail@plt+0x4cd0>
   1616c:	cmp	r0, #0
   16170:	beq	16188 <__assert_fail@plt+0x4cc8>
   16174:	ldr	r0, [sp, #4]
   16178:	bl	12e98 <__assert_fail@plt+0x19d8>
   1617c:	mov	r0, r5
   16180:	sub	sp, fp, #28
   16184:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   16188:	bl	11478 <abort@plt>
   1618c:	svcmi	0x00800000
   16190:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   16194:	add	fp, sp, #28
   16198:	sub	sp, sp, #4
   1619c:	ldr	r8, [r1]
   161a0:	ldr	r3, [r1, #4]
   161a4:	mov	r6, r0
   161a8:	mov	r0, #1
   161ac:	str	r1, [sp]
   161b0:	cmp	r8, r3
   161b4:	bcs	163b4 <__assert_fail@plt+0x4ef4>
   161b8:	add	r9, r6, #36	; 0x24
   161bc:	cmp	r2, #0
   161c0:	beq	1626c <__assert_fail@plt+0x4dac>
   161c4:	mov	sl, #0
   161c8:	ldr	r1, [r8]
   161cc:	cmp	r1, #0
   161d0:	beq	1625c <__assert_fail@plt+0x4d9c>
   161d4:	ldr	r7, [r8, #4]
   161d8:	cmp	r7, #0
   161dc:	beq	16258 <__assert_fail@plt+0x4d98>
   161e0:	ldr	r1, [r6, #8]
   161e4:	ldr	r4, [r7]
   161e8:	ldr	r2, [r6, #24]
   161ec:	mov	r0, r4
   161f0:	blx	r2
   161f4:	ldr	r1, [r6, #8]
   161f8:	cmp	r0, r1
   161fc:	bcs	163c8 <__assert_fail@plt+0x4f08>
   16200:	ldr	r3, [r6]
   16204:	ldr	r2, [r7, #4]
   16208:	ldr	r5, [r3, r0, lsl #3]
   1620c:	cmp	r5, #0
   16210:	beq	16220 <__assert_fail@plt+0x4d60>
   16214:	add	r0, r3, r0, lsl #3
   16218:	add	r0, r0, #4
   1621c:	b	16238 <__assert_fail@plt+0x4d78>
   16220:	str	r4, [r3, r0, lsl #3]
   16224:	ldr	r0, [r6, #12]
   16228:	add	r0, r0, #1
   1622c:	str	r0, [r6, #12]
   16230:	mov	r0, r9
   16234:	str	sl, [r7]
   16238:	ldr	r3, [r0]
   1623c:	cmp	r2, #0
   16240:	str	r3, [r7, #4]
   16244:	str	r7, [r0]
   16248:	mov	r7, r2
   1624c:	bne	161e4 <__assert_fail@plt+0x4d24>
   16250:	ldr	r0, [sp]
   16254:	ldr	r3, [r0, #4]
   16258:	str	sl, [r8, #4]
   1625c:	add	r8, r8, #8
   16260:	cmp	r8, r3
   16264:	bcc	161c8 <__assert_fail@plt+0x4d08>
   16268:	b	163b0 <__assert_fail@plt+0x4ef0>
   1626c:	mov	r5, #0
   16270:	ldr	sl, [r8]
   16274:	cmp	sl, #0
   16278:	beq	163a4 <__assert_fail@plt+0x4ee4>
   1627c:	ldr	r7, [r8, #4]
   16280:	ldr	r1, [r6, #8]
   16284:	cmp	r7, #0
   16288:	beq	16304 <__assert_fail@plt+0x4e44>
   1628c:	mov	sl, #0
   16290:	ldr	r4, [r7]
   16294:	ldr	r2, [r6, #24]
   16298:	mov	r0, r4
   1629c:	blx	r2
   162a0:	ldr	r1, [r6, #8]
   162a4:	cmp	r0, r1
   162a8:	bcs	163c8 <__assert_fail@plt+0x4f08>
   162ac:	ldr	r3, [r6]
   162b0:	ldr	r2, [r7, #4]
   162b4:	ldr	r5, [r3, r0, lsl #3]
   162b8:	cmp	r5, #0
   162bc:	beq	162cc <__assert_fail@plt+0x4e0c>
   162c0:	add	r0, r3, r0, lsl #3
   162c4:	add	r0, r0, #4
   162c8:	b	162e4 <__assert_fail@plt+0x4e24>
   162cc:	str	r4, [r3, r0, lsl #3]
   162d0:	ldr	r0, [r6, #12]
   162d4:	add	r0, r0, #1
   162d8:	str	r0, [r6, #12]
   162dc:	mov	r0, r9
   162e0:	str	sl, [r7]
   162e4:	ldr	r3, [r0]
   162e8:	cmp	r2, #0
   162ec:	str	r3, [r7, #4]
   162f0:	str	r7, [r0]
   162f4:	mov	r7, r2
   162f8:	bne	16290 <__assert_fail@plt+0x4dd0>
   162fc:	ldr	sl, [r8]
   16300:	mov	r5, #0
   16304:	str	r5, [r8, #4]
   16308:	mov	r0, sl
   1630c:	ldr	r2, [r6, #24]
   16310:	blx	r2
   16314:	mov	r4, r0
   16318:	ldr	r0, [r6, #8]
   1631c:	cmp	r4, r0
   16320:	bcs	163c8 <__assert_fail@plt+0x4f08>
   16324:	ldr	r7, [r6]
   16328:	ldr	r0, [r7, r4, lsl #3]
   1632c:	cmp	r0, #0
   16330:	beq	16350 <__assert_fail@plt+0x4e90>
   16334:	ldr	r0, [r9]
   16338:	cmp	r0, #0
   1633c:	beq	16364 <__assert_fail@plt+0x4ea4>
   16340:	mov	r1, r0
   16344:	ldr	r2, [r1, #4]!
   16348:	str	r2, [r9]
   1634c:	b	16378 <__assert_fail@plt+0x4eb8>
   16350:	str	sl, [r7, r4, lsl #3]
   16354:	ldr	r0, [r6, #12]
   16358:	add	r0, r0, #1
   1635c:	str	r0, [r6, #12]
   16360:	b	1638c <__assert_fail@plt+0x4ecc>
   16364:	mov	r0, #8
   16368:	bl	1a618 <__assert_fail@plt+0x9158>
   1636c:	cmp	r0, #0
   16370:	beq	163bc <__assert_fail@plt+0x4efc>
   16374:	add	r1, r0, #4
   16378:	str	sl, [r0]
   1637c:	add	r2, r7, r4, lsl #3
   16380:	ldr	r3, [r2, #4]
   16384:	str	r3, [r1]
   16388:	str	r0, [r2, #4]
   1638c:	ldr	r0, [sp]
   16390:	str	r5, [r8]
   16394:	ldr	r1, [r0, #12]
   16398:	ldr	r3, [r0, #4]
   1639c:	sub	r1, r1, #1
   163a0:	str	r1, [r0, #12]
   163a4:	add	r8, r8, #8
   163a8:	cmp	r8, r3
   163ac:	bcc	16270 <__assert_fail@plt+0x4db0>
   163b0:	mov	r0, #1
   163b4:	sub	sp, fp, #28
   163b8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   163bc:	mov	r0, #0
   163c0:	sub	sp, fp, #28
   163c4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   163c8:	bl	11478 <abort@plt>
   163cc:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   163d0:	add	fp, sp, #28
   163d4:	sub	sp, sp, #4
   163d8:	cmp	r1, #0
   163dc:	beq	16720 <__assert_fail@plt+0x5260>
   163e0:	mov	r8, r2
   163e4:	mov	sl, r1
   163e8:	ldr	r1, [r0, #8]
   163ec:	ldr	r2, [r0, #24]
   163f0:	mov	r4, r0
   163f4:	mov	r0, sl
   163f8:	blx	r2
   163fc:	mov	r7, r0
   16400:	ldr	r0, [r4, #8]
   16404:	cmp	r7, r0
   16408:	bcs	16720 <__assert_fail@plt+0x5260>
   1640c:	ldr	r5, [r4]
   16410:	mov	r9, r5
   16414:	ldr	r1, [r9, r7, lsl #3]!
   16418:	cmp	r1, #0
   1641c:	beq	164b0 <__assert_fail@plt+0x4ff0>
   16420:	cmp	r1, sl
   16424:	beq	16450 <__assert_fail@plt+0x4f90>
   16428:	ldr	r2, [r4, #28]
   1642c:	mov	r0, sl
   16430:	blx	r2
   16434:	cmp	r0, #0
   16438:	mov	r6, r9
   1643c:	beq	1646c <__assert_fail@plt+0x4fac>
   16440:	ldr	r0, [r6]
   16444:	cmp	r0, #0
   16448:	bne	16454 <__assert_fail@plt+0x4f94>
   1644c:	b	164b0 <__assert_fail@plt+0x4ff0>
   16450:	mov	r0, sl
   16454:	cmp	r8, #0
   16458:	mov	r7, #0
   1645c:	strne	r0, [r8]
   16460:	mov	r0, r7
   16464:	sub	sp, fp, #28
   16468:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1646c:	add	r6, r5, r7, lsl #3
   16470:	ldr	r0, [r6, #4]!
   16474:	cmp	r0, #0
   16478:	beq	164b0 <__assert_fail@plt+0x4ff0>
   1647c:	ldr	r1, [r0]
   16480:	cmp	r1, sl
   16484:	beq	164a4 <__assert_fail@plt+0x4fe4>
   16488:	ldr	r2, [r4, #28]
   1648c:	mov	r0, sl
   16490:	blx	r2
   16494:	ldr	r6, [r6]
   16498:	cmp	r0, #0
   1649c:	beq	16470 <__assert_fail@plt+0x4fb0>
   164a0:	b	16440 <__assert_fail@plt+0x4f80>
   164a4:	mov	r0, sl
   164a8:	cmp	r0, #0
   164ac:	bne	16454 <__assert_fail@plt+0x4f94>
   164b0:	vldr	s0, [r4, #8]
   164b4:	vldr	s2, [r4, #12]
   164b8:	ldr	r0, [r4, #20]
   164bc:	vcvt.f32.u32	s0, s0
   164c0:	vcvt.f32.u32	s4, s2
   164c4:	vldr	s2, [r0, #8]
   164c8:	vmul.f32	s6, s2, s0
   164cc:	vcmpe.f32	s6, s4
   164d0:	vmrs	APSR_nzcv, fpscr
   164d4:	bpl	16638 <__assert_fail@plt+0x5178>
   164d8:	movw	r1, #48800	; 0xbea0
   164dc:	movt	r1, #1
   164e0:	cmp	r0, r1
   164e4:	beq	16580 <__assert_fail@plt+0x50c0>
   164e8:	vldr	s6, [pc, #564]	; 16724 <__assert_fail@plt+0x5264>
   164ec:	vcmpe.f32	s2, s6
   164f0:	vmrs	APSR_nzcv, fpscr
   164f4:	ble	1655c <__assert_fail@plt+0x509c>
   164f8:	vldr	s8, [pc, #552]	; 16728 <__assert_fail@plt+0x5268>
   164fc:	vcmpe.f32	s2, s8
   16500:	vmrs	APSR_nzcv, fpscr
   16504:	bpl	1655c <__assert_fail@plt+0x509c>
   16508:	vldr	s8, [pc, #540]	; 1672c <__assert_fail@plt+0x526c>
   1650c:	vldr	s10, [r0, #12]
   16510:	vcmpe.f32	s10, s8
   16514:	vmrs	APSR_nzcv, fpscr
   16518:	ble	1655c <__assert_fail@plt+0x509c>
   1651c:	vldr	s8, [r0]
   16520:	vcmpe.f32	s8, #0.0
   16524:	vmrs	APSR_nzcv, fpscr
   16528:	blt	1655c <__assert_fail@plt+0x509c>
   1652c:	vadd.f32	s6, s8, s6
   16530:	vcmpe.f32	s6, s2
   16534:	vmrs	APSR_nzcv, fpscr
   16538:	bpl	1655c <__assert_fail@plt+0x509c>
   1653c:	vldr	s8, [r0, #4]
   16540:	vmov.f32	s10, #112	; 0x3f800000  1.0
   16544:	vcmpe.f32	s8, s10
   16548:	vmrs	APSR_nzcv, fpscr
   1654c:	bhi	1655c <__assert_fail@plt+0x509c>
   16550:	vcmpe.f32	s6, s8
   16554:	vmrs	APSR_nzcv, fpscr
   16558:	bmi	1656c <__assert_fail@plt+0x50ac>
   1655c:	vldr	s2, [pc, #460]	; 16730 <__assert_fail@plt+0x5270>
   16560:	movw	r0, #48800	; 0xbea0
   16564:	movt	r0, #1
   16568:	str	r0, [r4, #20]
   1656c:	vmul.f32	s6, s2, s0
   16570:	vcmpe.f32	s6, s4
   16574:	vmrs	APSR_nzcv, fpscr
   16578:	bmi	16594 <__assert_fail@plt+0x50d4>
   1657c:	b	16638 <__assert_fail@plt+0x5178>
   16580:	mov	r0, r1
   16584:	vmul.f32	s6, s2, s0
   16588:	vcmpe.f32	s6, s4
   1658c:	vmrs	APSR_nzcv, fpscr
   16590:	bpl	16638 <__assert_fail@plt+0x5178>
   16594:	vldr	s4, [r0, #12]
   16598:	ldrb	r0, [r0, #16]
   1659c:	mvn	r7, #0
   165a0:	vmul.f32	s0, s4, s0
   165a4:	vldr	s4, [pc, #392]	; 16734 <__assert_fail@plt+0x5274>
   165a8:	cmp	r0, #0
   165ac:	vmul.f32	s2, s2, s0
   165b0:	vseleq.f32	s0, s2, s0
   165b4:	vcmpe.f32	s0, s4
   165b8:	vmrs	APSR_nzcv, fpscr
   165bc:	bge	166b4 <__assert_fail@plt+0x51f4>
   165c0:	vcvt.u32.f32	s0, s0
   165c4:	mov	r0, r4
   165c8:	vmov	r1, s0
   165cc:	bl	15f1c <__assert_fail@plt+0x4a5c>
   165d0:	cmp	r0, #0
   165d4:	beq	166b4 <__assert_fail@plt+0x51f4>
   165d8:	ldr	r1, [r4, #8]
   165dc:	ldr	r2, [r4, #24]
   165e0:	mov	r0, sl
   165e4:	blx	r2
   165e8:	mov	r7, r0
   165ec:	ldr	r0, [r4, #8]
   165f0:	cmp	r7, r0
   165f4:	bcs	16720 <__assert_fail@plt+0x5260>
   165f8:	ldr	r5, [r4]
   165fc:	mov	r9, r5
   16600:	ldr	r1, [r9, r7, lsl #3]!
   16604:	cmp	r1, #0
   16608:	beq	16660 <__assert_fail@plt+0x51a0>
   1660c:	cmp	r1, sl
   16610:	mov	r0, sl
   16614:	beq	16630 <__assert_fail@plt+0x5170>
   16618:	ldr	r2, [r4, #28]
   1661c:	mov	r0, sl
   16620:	blx	r2
   16624:	cmp	r0, #0
   16628:	beq	166d0 <__assert_fail@plt+0x5210>
   1662c:	ldr	r0, [r9]
   16630:	cmp	r0, #0
   16634:	bne	16720 <__assert_fail@plt+0x5260>
   16638:	ldr	r0, [r9]
   1663c:	cmp	r0, #0
   16640:	beq	16660 <__assert_fail@plt+0x51a0>
   16644:	ldr	r0, [r4, #36]	; 0x24
   16648:	cmp	r0, #0
   1664c:	beq	16680 <__assert_fail@plt+0x51c0>
   16650:	mov	r1, r0
   16654:	ldr	r2, [r1, #4]!
   16658:	str	r2, [r4, #36]	; 0x24
   1665c:	b	16694 <__assert_fail@plt+0x51d4>
   16660:	str	sl, [r9]
   16664:	ldr	r0, [r4, #12]
   16668:	ldr	r1, [r4, #16]
   1666c:	add	r0, r0, #1
   16670:	add	r1, r1, #1
   16674:	str	r0, [r4, #12]
   16678:	str	r1, [r4, #16]
   1667c:	b	166b0 <__assert_fail@plt+0x51f0>
   16680:	mov	r0, #8
   16684:	bl	1a618 <__assert_fail@plt+0x9158>
   16688:	cmp	r0, #0
   1668c:	beq	166c0 <__assert_fail@plt+0x5200>
   16690:	add	r1, r0, #4
   16694:	str	sl, [r0]
   16698:	ldr	r2, [r9, #4]
   1669c:	str	r2, [r1]
   166a0:	str	r0, [r9, #4]
   166a4:	ldr	r0, [r4, #16]
   166a8:	add	r0, r0, #1
   166ac:	str	r0, [r4, #16]
   166b0:	mov	r7, #1
   166b4:	mov	r0, r7
   166b8:	sub	sp, fp, #28
   166bc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   166c0:	mvn	r7, #0
   166c4:	mov	r0, r7
   166c8:	sub	sp, fp, #28
   166cc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   166d0:	add	r6, r5, r7, lsl #3
   166d4:	ldr	r0, [r6, #4]!
   166d8:	cmp	r0, #0
   166dc:	beq	16638 <__assert_fail@plt+0x5178>
   166e0:	ldr	r1, [r0]
   166e4:	cmp	r1, sl
   166e8:	beq	16714 <__assert_fail@plt+0x5254>
   166ec:	ldr	r2, [r4, #28]
   166f0:	mov	r0, sl
   166f4:	blx	r2
   166f8:	ldr	r6, [r6]
   166fc:	cmp	r0, #0
   16700:	beq	166d4 <__assert_fail@plt+0x5214>
   16704:	ldr	r0, [r6]
   16708:	cmp	r0, #0
   1670c:	beq	16638 <__assert_fail@plt+0x5178>
   16710:	b	16720 <__assert_fail@plt+0x5260>
   16714:	mov	r0, sl
   16718:	cmp	r0, #0
   1671c:	beq	16638 <__assert_fail@plt+0x5178>
   16720:	bl	11478 <abort@plt>
   16724:	stclcc	12, cr12, [ip, #820]	; 0x334
   16728:	svccc	0x00666666
   1672c:	svccc	0x008ccccd
   16730:	svccc	0x004ccccd
   16734:	svcmi	0x00800000
   16738:	push	{r4, sl, fp, lr}
   1673c:	add	fp, sp, #8
   16740:	sub	sp, sp, #8
   16744:	add	r2, sp, #4
   16748:	mov	r4, r1
   1674c:	bl	163cc <__assert_fail@plt+0x4f0c>
   16750:	cmn	r0, #1
   16754:	beq	16770 <__assert_fail@plt+0x52b0>
   16758:	ldr	r1, [sp, #4]
   1675c:	cmp	r0, #0
   16760:	moveq	r4, r1
   16764:	mov	r0, r4
   16768:	sub	sp, fp, #8
   1676c:	pop	{r4, sl, fp, pc}
   16770:	mov	r4, #0
   16774:	mov	r0, r4
   16778:	sub	sp, fp, #8
   1677c:	pop	{r4, sl, fp, pc}
   16780:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   16784:	add	fp, sp, #24
   16788:	mov	r9, r1
   1678c:	ldr	r1, [r0, #8]
   16790:	ldr	r2, [r0, #24]
   16794:	mov	r5, r0
   16798:	mov	r0, r9
   1679c:	blx	r2
   167a0:	mov	r7, r0
   167a4:	ldr	r0, [r5, #8]
   167a8:	cmp	r7, r0
   167ac:	bcs	16a1c <__assert_fail@plt+0x555c>
   167b0:	ldr	r6, [r5]
   167b4:	mov	r8, #0
   167b8:	mov	r4, r6
   167bc:	ldr	r1, [r4, r7, lsl #3]!
   167c0:	cmp	r1, #0
   167c4:	beq	16878 <__assert_fail@plt+0x53b8>
   167c8:	cmp	r1, r9
   167cc:	beq	167e8 <__assert_fail@plt+0x5328>
   167d0:	ldr	r2, [r5, #28]
   167d4:	mov	r0, r9
   167d8:	blx	r2
   167dc:	cmp	r0, #0
   167e0:	beq	16820 <__assert_fail@plt+0x5360>
   167e4:	ldr	r9, [r4]
   167e8:	add	r0, r6, r7, lsl #3
   167ec:	ldr	r0, [r0, #4]
   167f0:	cmp	r0, #0
   167f4:	beq	16868 <__assert_fail@plt+0x53a8>
   167f8:	ldm	r0, {r1, r2}
   167fc:	stm	r4, {r1, r2}
   16800:	mov	r1, #0
   16804:	str	r1, [r0]
   16808:	ldr	r1, [r5, #36]	; 0x24
   1680c:	str	r1, [r0, #4]
   16810:	str	r0, [r5, #36]	; 0x24
   16814:	cmp	r9, #0
   16818:	bne	168b0 <__assert_fail@plt+0x53f0>
   1681c:	b	16878 <__assert_fail@plt+0x53b8>
   16820:	add	r7, r6, r7, lsl #3
   16824:	ldr	r0, [r7, #4]!
   16828:	cmp	r0, #0
   1682c:	beq	16878 <__assert_fail@plt+0x53b8>
   16830:	ldr	r1, [r0]
   16834:	cmp	r1, r9
   16838:	beq	16880 <__assert_fail@plt+0x53c0>
   1683c:	ldr	r2, [r5, #28]
   16840:	mov	r0, r9
   16844:	blx	r2
   16848:	ldr	r1, [r7]
   1684c:	cmp	r0, #0
   16850:	bne	16888 <__assert_fail@plt+0x53c8>
   16854:	ldr	r0, [r1, #4]!
   16858:	cmp	r0, #0
   1685c:	mov	r7, r1
   16860:	bne	16830 <__assert_fail@plt+0x5370>
   16864:	b	16878 <__assert_fail@plt+0x53b8>
   16868:	mov	r0, #0
   1686c:	str	r0, [r4]
   16870:	cmp	r9, #0
   16874:	bne	168b0 <__assert_fail@plt+0x53f0>
   16878:	mov	r0, r8
   1687c:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   16880:	mov	r1, r0
   16884:	b	1688c <__assert_fail@plt+0x53cc>
   16888:	ldr	r9, [r1]
   1688c:	ldr	r0, [r1, #4]
   16890:	str	r0, [r7]
   16894:	mov	r0, #0
   16898:	str	r0, [r1]
   1689c:	ldr	r0, [r5, #36]	; 0x24
   168a0:	str	r0, [r1, #4]
   168a4:	str	r1, [r5, #36]	; 0x24
   168a8:	cmp	r9, #0
   168ac:	beq	16878 <__assert_fail@plt+0x53b8>
   168b0:	ldr	r0, [r5, #16]
   168b4:	sub	r0, r0, #1
   168b8:	str	r0, [r5, #16]
   168bc:	ldr	r0, [r4]
   168c0:	cmp	r0, #0
   168c4:	bne	169dc <__assert_fail@plt+0x551c>
   168c8:	ldr	r0, [r5, #12]
   168cc:	vldr	s0, [r5, #8]
   168d0:	sub	r1, r0, #1
   168d4:	str	r1, [r5, #12]
   168d8:	vmov	s2, r1
   168dc:	ldr	r0, [r5, #20]
   168e0:	vcvt.f32.u32	s0, s0
   168e4:	vcvt.f32.u32	s2, s2
   168e8:	vldr	s4, [r0]
   168ec:	vmul.f32	s6, s4, s0
   168f0:	vcmpe.f32	s6, s2
   168f4:	vmrs	APSR_nzcv, fpscr
   168f8:	ble	169dc <__assert_fail@plt+0x551c>
   168fc:	movw	r1, #48800	; 0xbea0
   16900:	movt	r1, #1
   16904:	cmp	r0, r1
   16908:	beq	16970 <__assert_fail@plt+0x54b0>
   1690c:	vldr	s8, [pc, #268]	; 16a20 <__assert_fail@plt+0x5560>
   16910:	vldr	s6, [r0, #8]
   16914:	vcmpe.f32	s6, s8
   16918:	vmrs	APSR_nzcv, fpscr
   1691c:	ble	1694c <__assert_fail@plt+0x548c>
   16920:	vldr	s10, [pc, #252]	; 16a24 <__assert_fail@plt+0x5564>
   16924:	vcmpe.f32	s6, s10
   16928:	vmrs	APSR_nzcv, fpscr
   1692c:	bpl	1694c <__assert_fail@plt+0x548c>
   16930:	vcmpe.f32	s4, #0.0
   16934:	vmrs	APSR_nzcv, fpscr
   16938:	vldrge	s10, [r0, #12]
   1693c:	vldrge	s12, [pc, #228]	; 16a28 <__assert_fail@plt+0x5568>
   16940:	vcmpege.f32	s10, s12
   16944:	vmrsge	APSR_nzcv, fpscr
   16948:	bgt	169e8 <__assert_fail@plt+0x5528>
   1694c:	vldr	s4, [pc, #216]	; 16a2c <__assert_fail@plt+0x556c>
   16950:	movw	r0, #48800	; 0xbea0
   16954:	movt	r0, #1
   16958:	str	r0, [r5, #20]
   1695c:	vmul.f32	s4, s4, s0
   16960:	vcmpe.f32	s4, s2
   16964:	vmrs	APSR_nzcv, fpscr
   16968:	bgt	16984 <__assert_fail@plt+0x54c4>
   1696c:	b	169dc <__assert_fail@plt+0x551c>
   16970:	mov	r0, r1
   16974:	vmul.f32	s4, s4, s0
   16978:	vcmpe.f32	s4, s2
   1697c:	vmrs	APSR_nzcv, fpscr
   16980:	ble	169dc <__assert_fail@plt+0x551c>
   16984:	ldrb	r1, [r0, #16]
   16988:	vldr	s2, [r0, #4]
   1698c:	cmp	r1, #0
   16990:	vmul.f32	s0, s2, s0
   16994:	vldreq	s2, [r0, #8]
   16998:	mov	r0, r5
   1699c:	vmuleq.f32	s0, s0, s2
   169a0:	vcvt.u32.f32	s0, s0
   169a4:	vmov	r1, s0
   169a8:	bl	15f1c <__assert_fail@plt+0x4a5c>
   169ac:	cmp	r0, #0
   169b0:	bne	169dc <__assert_fail@plt+0x551c>
   169b4:	ldr	r0, [r5, #36]	; 0x24
   169b8:	cmp	r0, #0
   169bc:	beq	169d4 <__assert_fail@plt+0x5514>
   169c0:	ldr	r4, [r0, #4]
   169c4:	bl	12e98 <__assert_fail@plt+0x19d8>
   169c8:	cmp	r4, #0
   169cc:	mov	r0, r4
   169d0:	bne	169c0 <__assert_fail@plt+0x5500>
   169d4:	mov	r0, #0
   169d8:	str	r0, [r5, #36]	; 0x24
   169dc:	mov	r8, r9
   169e0:	mov	r0, r8
   169e4:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   169e8:	vadd.f32	s8, s4, s8
   169ec:	vcmpe.f32	s8, s6
   169f0:	vmrs	APSR_nzcv, fpscr
   169f4:	bpl	1694c <__assert_fail@plt+0x548c>
   169f8:	vldr	s6, [r0, #4]
   169fc:	vmov.f32	s10, #112	; 0x3f800000  1.0
   16a00:	vcmpe.f32	s6, s10
   16a04:	vmrs	APSR_nzcv, fpscr
   16a08:	bhi	1694c <__assert_fail@plt+0x548c>
   16a0c:	vcmpe.f32	s8, s6
   16a10:	vmrs	APSR_nzcv, fpscr
   16a14:	bmi	16974 <__assert_fail@plt+0x54b4>
   16a18:	b	1694c <__assert_fail@plt+0x548c>
   16a1c:	bl	11478 <abort@plt>
   16a20:	stclcc	12, cr12, [ip, #820]	; 0x334
   16a24:	svccc	0x00666666
   16a28:	svccc	0x008ccccd
   16a2c:	andeq	r0, r0, r0
   16a30:	b	16780 <__assert_fail@plt+0x52c0>
   16a34:	mov	r3, #1
   16a38:	mov	r2, #0
   16a3c:	vdup.32	q8, r1
   16a40:	strb	r3, [r0, #28]
   16a44:	str	r2, [r0, #20]
   16a48:	str	r2, [r0, #24]
   16a4c:	vst1.32	{d16-d17}, [r0]!
   16a50:	str	r1, [r0]
   16a54:	bx	lr
   16a58:	ldrb	r0, [r0, #28]
   16a5c:	bx	lr
   16a60:	push	{fp, lr}
   16a64:	mov	fp, sp
   16a68:	ldrb	r3, [r0, #28]
   16a6c:	ldr	r2, [r0, #20]
   16a70:	eor	lr, r3, #1
   16a74:	add	r2, r2, lr
   16a78:	and	r3, r2, #3
   16a7c:	ldr	ip, [r0, r3, lsl #2]
   16a80:	str	r1, [r0, r3, lsl #2]
   16a84:	str	r3, [r0, #20]
   16a88:	ldr	r1, [r0, #24]
   16a8c:	cmp	r3, r1
   16a90:	addeq	r1, r2, lr
   16a94:	andeq	r1, r1, #3
   16a98:	streq	r1, [r0, #24]
   16a9c:	mov	r1, #0
   16aa0:	strb	r1, [r0, #28]
   16aa4:	mov	r0, ip
   16aa8:	pop	{fp, pc}
   16aac:	ldrb	r1, [r0, #28]
   16ab0:	cmp	r1, #0
   16ab4:	bne	16af8 <__assert_fail@plt+0x5638>
   16ab8:	ldr	r3, [r0, #20]
   16abc:	ldr	r2, [r0, #16]
   16ac0:	ldr	r1, [r0, r3, lsl #2]
   16ac4:	str	r2, [r0, r3, lsl #2]
   16ac8:	ldr	r2, [r0, #20]
   16acc:	ldr	r3, [r0, #24]
   16ad0:	cmp	r2, r3
   16ad4:	moveq	r2, #1
   16ad8:	strbeq	r2, [r0, #28]
   16adc:	moveq	r0, r1
   16ae0:	bxeq	lr
   16ae4:	sub	r2, r2, #1
   16ae8:	and	r2, r2, #3
   16aec:	str	r2, [r0, #20]
   16af0:	mov	r0, r1
   16af4:	bx	lr
   16af8:	push	{fp, lr}
   16afc:	mov	fp, sp
   16b00:	bl	11478 <abort@plt>
   16b04:	push	{r4, r5, r6, sl, fp, lr}
   16b08:	add	fp, sp, #16
   16b0c:	mov	r5, r0
   16b10:	mov	r0, #0
   16b14:	mov	r4, r1
   16b18:	add	r6, r2, #19
   16b1c:	strb	r0, [r2, #20]
   16b20:	mov	r0, r5
   16b24:	mov	r1, r4
   16b28:	mov	r2, #10
   16b2c:	mov	r3, #0
   16b30:	bl	1adcc <__assert_fail@plt+0x990c>
   16b34:	add	r2, r0, r0, lsl #2
   16b38:	sub	r2, r5, r2, lsl #1
   16b3c:	orr	r2, r2, #48	; 0x30
   16b40:	strb	r2, [r6], #-1
   16b44:	rsbs	r2, r5, #9
   16b48:	mov	r5, r0
   16b4c:	rscs	r2, r4, #0
   16b50:	mov	r4, r1
   16b54:	bcc	16b20 <__assert_fail@plt+0x5660>
   16b58:	add	r0, r6, #1
   16b5c:	pop	{r4, r5, r6, sl, fp, pc}
   16b60:	sub	sp, sp, #4
   16b64:	push	{fp, lr}
   16b68:	mov	fp, sp
   16b6c:	sub	sp, sp, #4
   16b70:	str	r3, [fp, #8]
   16b74:	mov	r3, #0
   16b78:	tst	r2, #64	; 0x40
   16b7c:	addne	r3, fp, #8
   16b80:	addne	r3, r3, #4
   16b84:	strne	r3, [sp]
   16b88:	ldrne	r3, [fp, #8]
   16b8c:	bl	11364 <openat64@plt>
   16b90:	bl	18bec <__assert_fail@plt+0x772c>
   16b94:	mov	sp, fp
   16b98:	pop	{fp, lr}
   16b9c:	add	sp, sp, #4
   16ba0:	bx	lr
   16ba4:	push	{r4, r5, r6, sl, fp, lr}
   16ba8:	add	fp, sp, #16
   16bac:	orr	r2, r2, #18688	; 0x4900
   16bb0:	mov	r4, r3
   16bb4:	orr	r2, r2, #524288	; 0x80000
   16bb8:	bl	16b60 <__assert_fail@plt+0x56a0>
   16bbc:	mov	r5, r0
   16bc0:	mov	r0, #0
   16bc4:	cmp	r5, #0
   16bc8:	poplt	{r4, r5, r6, sl, fp, pc}
   16bcc:	mov	r0, r5
   16bd0:	bl	11418 <fdopendir@plt>
   16bd4:	cmp	r0, #0
   16bd8:	strne	r5, [r4]
   16bdc:	popne	{r4, r5, r6, sl, fp, pc}
   16be0:	bl	1137c <__errno_location@plt>
   16be4:	ldr	r6, [r0]
   16be8:	mov	r4, r0
   16bec:	mov	r0, r5
   16bf0:	bl	11484 <close@plt>
   16bf4:	mov	r0, #0
   16bf8:	str	r6, [r4]
   16bfc:	pop	{r4, r5, r6, sl, fp, pc}
   16c00:	push	{r4, r5, fp, lr}
   16c04:	add	fp, sp, #8
   16c08:	cmp	r0, #0
   16c0c:	beq	16ca0 <__assert_fail@plt+0x57e0>
   16c10:	mov	r1, #47	; 0x2f
   16c14:	mov	r4, r0
   16c18:	bl	113f4 <strrchr@plt>
   16c1c:	cmp	r0, #0
   16c20:	mov	r5, r4
   16c24:	addne	r5, r0, #1
   16c28:	sub	r0, r5, r4
   16c2c:	cmp	r0, #7
   16c30:	blt	16c84 <__assert_fail@plt+0x57c4>
   16c34:	movw	r1, #48876	; 0xbeec
   16c38:	sub	r0, r5, #7
   16c3c:	mov	r2, #7
   16c40:	movt	r1, #1
   16c44:	bl	1146c <strncmp@plt>
   16c48:	cmp	r0, #0
   16c4c:	bne	16c84 <__assert_fail@plt+0x57c4>
   16c50:	movw	r1, #48884	; 0xbef4
   16c54:	mov	r0, r5
   16c58:	mov	r2, #3
   16c5c:	movt	r1, #1
   16c60:	bl	1146c <strncmp@plt>
   16c64:	cmp	r0, #0
   16c68:	beq	16c74 <__assert_fail@plt+0x57b4>
   16c6c:	mov	r4, r5
   16c70:	b	16c84 <__assert_fail@plt+0x57c4>
   16c74:	movw	r0, #53616	; 0xd170
   16c78:	add	r4, r5, #3
   16c7c:	movt	r0, #2
   16c80:	str	r4, [r0]
   16c84:	movw	r0, #53620	; 0xd174
   16c88:	movt	r0, #2
   16c8c:	str	r4, [r0]
   16c90:	movw	r0, #53680	; 0xd1b0
   16c94:	movt	r0, #2
   16c98:	str	r4, [r0]
   16c9c:	pop	{r4, r5, fp, pc}
   16ca0:	movw	r0, #53632	; 0xd180
   16ca4:	mov	r1, #55	; 0x37
   16ca8:	mov	r2, #1
   16cac:	movt	r0, #2
   16cb0:	ldr	r3, [r0]
   16cb4:	movw	r0, #48820	; 0xbeb4
   16cb8:	movt	r0, #1
   16cbc:	bl	112a4 <fwrite@plt>
   16cc0:	bl	11478 <abort@plt>
   16cc4:	push	{r4, r5, r6, sl, fp, lr}
   16cc8:	add	fp, sp, #16
   16ccc:	mov	r4, r0
   16cd0:	movw	r0, #53688	; 0xd1b8
   16cd4:	movt	r0, #2
   16cd8:	cmp	r4, #0
   16cdc:	moveq	r4, r0
   16ce0:	bl	1137c <__errno_location@plt>
   16ce4:	ldr	r6, [r0]
   16ce8:	mov	r5, r0
   16cec:	mov	r0, r4
   16cf0:	mov	r1, #48	; 0x30
   16cf4:	bl	19750 <__assert_fail@plt+0x8290>
   16cf8:	str	r6, [r5]
   16cfc:	pop	{r4, r5, r6, sl, fp, pc}
   16d00:	movw	r1, #53688	; 0xd1b8
   16d04:	cmp	r0, #0
   16d08:	movt	r1, #2
   16d0c:	movne	r1, r0
   16d10:	ldr	r0, [r1]
   16d14:	bx	lr
   16d18:	movw	r2, #53688	; 0xd1b8
   16d1c:	cmp	r0, #0
   16d20:	movt	r2, #2
   16d24:	movne	r2, r0
   16d28:	str	r1, [r2]
   16d2c:	bx	lr
   16d30:	movw	r3, #53688	; 0xd1b8
   16d34:	cmp	r0, #0
   16d38:	movt	r3, #2
   16d3c:	movne	r3, r0
   16d40:	ubfx	r0, r1, #5, #3
   16d44:	and	r1, r1, #31
   16d48:	add	r0, r3, r0, lsl #2
   16d4c:	ldr	r3, [r0, #8]
   16d50:	eor	r2, r2, r3, lsr r1
   16d54:	and	r2, r2, #1
   16d58:	eor	r2, r3, r2, lsl r1
   16d5c:	str	r2, [r0, #8]
   16d60:	mov	r0, #1
   16d64:	and	r0, r0, r3, lsr r1
   16d68:	bx	lr
   16d6c:	movw	r2, #53688	; 0xd1b8
   16d70:	cmp	r0, #0
   16d74:	movt	r2, #2
   16d78:	movne	r2, r0
   16d7c:	ldr	r0, [r2, #4]
   16d80:	str	r1, [r2, #4]
   16d84:	bx	lr
   16d88:	movw	r3, #53688	; 0xd1b8
   16d8c:	cmp	r0, #0
   16d90:	movt	r3, #2
   16d94:	movne	r3, r0
   16d98:	cmp	r1, #0
   16d9c:	mov	r0, #10
   16da0:	cmpne	r2, #0
   16da4:	str	r0, [r3]
   16da8:	bne	16db8 <__assert_fail@plt+0x58f8>
   16dac:	push	{fp, lr}
   16db0:	mov	fp, sp
   16db4:	bl	11478 <abort@plt>
   16db8:	str	r1, [r3, #40]	; 0x28
   16dbc:	str	r2, [r3, #44]	; 0x2c
   16dc0:	bx	lr
   16dc4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   16dc8:	add	fp, sp, #28
   16dcc:	sub	sp, sp, #20
   16dd0:	mov	r7, r0
   16dd4:	ldr	r0, [fp, #8]
   16dd8:	movw	r5, #53688	; 0xd1b8
   16ddc:	mov	r8, r3
   16de0:	mov	r9, r2
   16de4:	mov	sl, r1
   16de8:	movt	r5, #2
   16dec:	cmp	r0, #0
   16df0:	movne	r5, r0
   16df4:	bl	1137c <__errno_location@plt>
   16df8:	mov	r4, r0
   16dfc:	ldm	r5, {r0, r1}
   16e00:	ldr	r2, [r5, #40]	; 0x28
   16e04:	ldr	r3, [r5, #44]	; 0x2c
   16e08:	add	r5, r5, #8
   16e0c:	ldr	r6, [r4]
   16e10:	stm	sp, {r0, r1, r5}
   16e14:	str	r2, [sp, #12]
   16e18:	str	r3, [sp, #16]
   16e1c:	mov	r0, r7
   16e20:	mov	r1, sl
   16e24:	mov	r2, r9
   16e28:	mov	r3, r8
   16e2c:	bl	16e3c <__assert_fail@plt+0x597c>
   16e30:	str	r6, [r4]
   16e34:	sub	sp, fp, #28
   16e38:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   16e3c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   16e40:	add	fp, sp, #28
   16e44:	sub	sp, sp, #156	; 0x9c
   16e48:	str	r0, [sp, #76]	; 0x4c
   16e4c:	ldr	r0, [fp, #12]
   16e50:	mov	r6, r1
   16e54:	str	r3, [sp, #84]	; 0x54
   16e58:	str	r2, [fp, #-84]	; 0xffffffac
   16e5c:	and	r1, r0, #4
   16e60:	str	r1, [sp, #24]
   16e64:	and	r1, r0, #1
   16e68:	str	r1, [sp, #28]
   16e6c:	ubfx	r8, r0, #1, #1
   16e70:	bl	112bc <__ctype_get_mb_cur_max@plt>
   16e74:	str	r0, [sp, #32]
   16e78:	ldr	r0, [fp, #24]
   16e7c:	ldr	r7, [fp, #8]
   16e80:	mov	r1, #0
   16e84:	mov	r2, #0
   16e88:	mov	r4, #1
   16e8c:	str	r1, [sp, #52]	; 0x34
   16e90:	str	r0, [sp, #72]	; 0x48
   16e94:	ldr	r0, [fp, #20]
   16e98:	str	r0, [sp, #68]	; 0x44
   16e9c:	mov	r0, #0
   16ea0:	str	r0, [sp, #48]	; 0x30
   16ea4:	mov	r0, #0
   16ea8:	str	r0, [sp, #92]	; 0x5c
   16eac:	mov	r0, #0
   16eb0:	str	r0, [fp, #-76]	; 0xffffffb4
   16eb4:	mov	r0, #0
   16eb8:	cmp	r7, #10
   16ebc:	bhi	181a4 <__assert_fail@plt+0x6ce4>
   16ec0:	add	r1, pc, #28
   16ec4:	mov	sl, r6
   16ec8:	ldr	r6, [sp, #76]	; 0x4c
   16ecc:	ldr	ip, [fp, #-84]	; 0xffffffac
   16ed0:	ldr	lr, [sp, #84]	; 0x54
   16ed4:	mov	r9, #0
   16ed8:	mov	r3, #1
   16edc:	mov	r5, #0
   16ee0:	ldr	pc, [r1, r7, lsl #2]
   16ee4:			; <UNDEFINED> instruction: 0x00016fb4
   16ee8:	strdeq	r6, [r1], -r0
   16eec:	andeq	r6, r1, r4, asr #31
   16ef0:	andeq	r6, r1, ip, lsr #31
   16ef4:	andeq	r6, r1, r4, ror #31
   16ef8:	andeq	r7, r1, r8, lsl r0
   16efc:	ldrdeq	r6, [r1], -r4
   16f00:	andeq	r7, r1, r4, lsr #4
   16f04:	andeq	r6, r1, r0, lsl pc
   16f08:	andeq	r6, r1, r0, lsl pc
   16f0c:			; <UNDEFINED> instruction: 0x000171b8
   16f10:	mov	r9, r4
   16f14:	movw	r4, #48966	; 0xbf46
   16f18:	mov	r5, r8
   16f1c:	mov	r8, r2
   16f20:	mov	r0, #0
   16f24:	mov	r2, #5
   16f28:	movt	r4, #1
   16f2c:	mov	r1, r4
   16f30:	bl	1125c <dcgettext@plt>
   16f34:	cmp	r0, r4
   16f38:	str	r0, [sp, #68]	; 0x44
   16f3c:	bne	170cc <__assert_fail@plt+0x5c0c>
   16f40:	bl	1abe4 <__assert_fail@plt+0x9724>
   16f44:	ldrb	r1, [r0]
   16f48:	and	r1, r1, #223	; 0xdf
   16f4c:	cmp	r1, #71	; 0x47
   16f50:	beq	17098 <__assert_fail@plt+0x5bd8>
   16f54:	cmp	r1, #85	; 0x55
   16f58:	bne	170b0 <__assert_fail@plt+0x5bf0>
   16f5c:	ldrb	r1, [r0, #1]
   16f60:	and	r1, r1, #223	; 0xdf
   16f64:	cmp	r1, #84	; 0x54
   16f68:	bne	170b0 <__assert_fail@plt+0x5bf0>
   16f6c:	ldrb	r1, [r0, #2]
   16f70:	and	r1, r1, #223	; 0xdf
   16f74:	cmp	r1, #70	; 0x46
   16f78:	bne	170b0 <__assert_fail@plt+0x5bf0>
   16f7c:	ldrb	r1, [r0, #3]
   16f80:	cmp	r1, #45	; 0x2d
   16f84:	ldrbeq	r1, [r0, #4]
   16f88:	cmpeq	r1, #56	; 0x38
   16f8c:	bne	170b0 <__assert_fail@plt+0x5bf0>
   16f90:	ldrb	r0, [r0, #5]
   16f94:	cmp	r0, #0
   16f98:	movw	r0, #48970	; 0xbf4a
   16f9c:	movt	r0, #1
   16fa0:	str	r0, [sp, #68]	; 0x44
   16fa4:	bne	170b0 <__assert_fail@plt+0x5bf0>
   16fa8:	b	170cc <__assert_fail@plt+0x5c0c>
   16fac:	mov	r0, #1
   16fb0:	b	16ff0 <__assert_fail@plt+0x5b30>
   16fb4:	mov	r7, #0
   16fb8:	mov	r9, #0
   16fbc:	mov	r3, r0
   16fc0:	b	17090 <__assert_fail@plt+0x5bd0>
   16fc4:	tst	r8, #1
   16fc8:	bne	16ff0 <__assert_fail@plt+0x5b30>
   16fcc:	mov	r3, r0
   16fd0:	b	17048 <__assert_fail@plt+0x5b88>
   16fd4:	mov	r0, #1
   16fd8:	mov	r9, #0
   16fdc:	mov	r7, #5
   16fe0:	b	1702c <__assert_fail@plt+0x5b6c>
   16fe4:	mov	r3, #1
   16fe8:	tst	r8, #1
   16fec:	beq	17048 <__assert_fail@plt+0x5b88>
   16ff0:	mov	r1, #1
   16ff4:	mov	r9, #0
   16ff8:	mov	r7, #2
   16ffc:	mov	r3, r0
   17000:	mov	r5, #1
   17004:	str	r1, [fp, #-76]	; 0xffffffb4
   17008:	movw	r1, #48968	; 0xbf48
   1700c:	movt	r1, #1
   17010:	str	r1, [sp, #92]	; 0x5c
   17014:	b	17224 <__assert_fail@plt+0x5d64>
   17018:	mov	r7, #5
   1701c:	tst	r8, #1
   17020:	beq	17068 <__assert_fail@plt+0x5ba8>
   17024:	mov	r0, #1
   17028:	mov	r9, #0
   1702c:	str	r0, [fp, #-76]	; 0xffffffb4
   17030:	movw	r0, #48964	; 0xbf44
   17034:	mov	r3, #1
   17038:	mov	r5, #1
   1703c:	movt	r0, #1
   17040:	str	r0, [sp, #92]	; 0x5c
   17044:	b	17224 <__assert_fail@plt+0x5d64>
   17048:	cmp	sl, #0
   1704c:	mov	r9, #1
   17050:	mov	r7, #2
   17054:	movne	r0, #39	; 0x27
   17058:	strbne	r0, [r6]
   1705c:	movw	r0, #48968	; 0xbf48
   17060:	movt	r0, #1
   17064:	b	17084 <__assert_fail@plt+0x5bc4>
   17068:	cmp	sl, #0
   1706c:	mov	r9, #1
   17070:	mov	r3, #1
   17074:	movne	r0, #34	; 0x22
   17078:	strbne	r0, [r6]
   1707c:	movw	r0, #48964	; 0xbf44
   17080:	movt	r0, #1
   17084:	str	r0, [sp, #92]	; 0x5c
   17088:	mov	r0, #1
   1708c:	str	r0, [fp, #-76]	; 0xffffffb4
   17090:	mov	r5, #0
   17094:	b	17224 <__assert_fail@plt+0x5d64>
   17098:	ldrb	r1, [r0, #1]
   1709c:	and	r1, r1, #223	; 0xdf
   170a0:	cmp	r1, #66	; 0x42
   170a4:	ldrbeq	r1, [r0, #2]
   170a8:	cmpeq	r1, #49	; 0x31
   170ac:	beq	17fcc <__assert_fail@plt+0x6b0c>
   170b0:	movw	r0, #48968	; 0xbf48
   170b4:	movw	r1, #48964	; 0xbf44
   170b8:	cmp	r7, #9
   170bc:	movt	r0, #1
   170c0:	movt	r1, #1
   170c4:	moveq	r0, r1
   170c8:	str	r0, [sp, #68]	; 0x44
   170cc:	movw	r4, #48968	; 0xbf48
   170d0:	mov	r0, #0
   170d4:	mov	r2, #5
   170d8:	movt	r4, #1
   170dc:	mov	r1, r4
   170e0:	bl	1125c <dcgettext@plt>
   170e4:	cmp	r0, r4
   170e8:	str	r0, [sp, #72]	; 0x48
   170ec:	beq	170fc <__assert_fail@plt+0x5c3c>
   170f0:	mov	r4, r9
   170f4:	mov	r2, r8
   170f8:	b	171b4 <__assert_fail@plt+0x5cf4>
   170fc:	bl	1abe4 <__assert_fail@plt+0x9724>
   17100:	ldrb	r1, [r0]
   17104:	mov	r4, r9
   17108:	and	r1, r1, #223	; 0xdf
   1710c:	cmp	r1, #71	; 0x47
   17110:	beq	1716c <__assert_fail@plt+0x5cac>
   17114:	cmp	r1, #85	; 0x55
   17118:	mov	r2, r8
   1711c:	bne	17194 <__assert_fail@plt+0x5cd4>
   17120:	ldrb	r1, [r0, #1]
   17124:	and	r1, r1, #223	; 0xdf
   17128:	cmp	r1, #84	; 0x54
   1712c:	bne	17194 <__assert_fail@plt+0x5cd4>
   17130:	ldrb	r1, [r0, #2]
   17134:	and	r1, r1, #223	; 0xdf
   17138:	cmp	r1, #70	; 0x46
   1713c:	ldrbeq	r1, [r0, #3]
   17140:	cmpeq	r1, #45	; 0x2d
   17144:	bne	17194 <__assert_fail@plt+0x5cd4>
   17148:	ldrb	r1, [r0, #4]
   1714c:	cmp	r1, #56	; 0x38
   17150:	ldrbeq	r0, [r0, #5]
   17154:	cmpeq	r0, #0
   17158:	bne	17194 <__assert_fail@plt+0x5cd4>
   1715c:	movw	r0, #48974	; 0xbf4e
   17160:	movt	r0, #1
   17164:	str	r0, [sp, #72]	; 0x48
   17168:	b	171b4 <__assert_fail@plt+0x5cf4>
   1716c:	ldrb	r1, [r0, #1]
   17170:	mov	r2, r8
   17174:	and	r1, r1, #223	; 0xdf
   17178:	cmp	r1, #66	; 0x42
   1717c:	bne	17194 <__assert_fail@plt+0x5cd4>
   17180:	ldrb	r1, [r0, #2]
   17184:	cmp	r1, #49	; 0x31
   17188:	ldrbeq	r1, [r0, #3]
   1718c:	cmpeq	r1, #56	; 0x38
   17190:	beq	18010 <__assert_fail@plt+0x6b50>
   17194:	movw	r0, #48968	; 0xbf48
   17198:	cmp	r7, #9
   1719c:	movt	r0, #1
   171a0:	mov	r1, r0
   171a4:	movw	r0, #48964	; 0xbf44
   171a8:	movt	r0, #1
   171ac:	moveq	r1, r0
   171b0:	str	r1, [sp, #72]	; 0x48
   171b4:	mov	r8, r5
   171b8:	mov	r9, #0
   171bc:	tst	r8, #1
   171c0:	mov	r5, r8
   171c4:	str	r2, [fp, #-48]	; 0xffffffd0
   171c8:	bne	17200 <__assert_fail@plt+0x5d40>
   171cc:	ldr	r0, [sp, #68]	; 0x44
   171d0:	ldrb	r0, [r0]
   171d4:	cmp	r0, #0
   171d8:	beq	17200 <__assert_fail@plt+0x5d40>
   171dc:	ldr	r1, [sp, #68]	; 0x44
   171e0:	mov	r9, #0
   171e4:	add	r1, r1, #1
   171e8:	cmp	r9, sl
   171ec:	strbcc	r0, [r6, r9]
   171f0:	ldrb	r0, [r1, r9]
   171f4:	add	r9, r9, #1
   171f8:	cmp	r0, #0
   171fc:	bne	171e8 <__assert_fail@plt+0x5d28>
   17200:	ldr	r8, [sp, #72]	; 0x48
   17204:	mov	r0, r8
   17208:	bl	1134c <strlen@plt>
   1720c:	ldr	ip, [fp, #-84]	; 0xffffffac
   17210:	ldr	lr, [sp, #84]	; 0x54
   17214:	ldr	r2, [fp, #-48]	; 0xffffffd0
   17218:	str	r0, [fp, #-76]	; 0xffffffb4
   1721c:	str	r8, [sp, #92]	; 0x5c
   17220:	mov	r3, #1
   17224:	ldr	r0, [fp, #16]
   17228:	str	r7, [fp, #-64]	; 0xffffffc0
   1722c:	str	r5, [fp, #-72]	; 0xffffffb8
   17230:	str	r3, [sp, #80]	; 0x50
   17234:	cmp	r0, #0
   17238:	movwne	r0, #1
   1723c:	and	r0, r0, r5
   17240:	str	r0, [fp, #-88]	; 0xffffffa8
   17244:	ldr	r0, [fp, #-76]	; 0xffffffb4
   17248:	cmp	r0, #0
   1724c:	movwne	r0, #1
   17250:	subs	r7, r7, #2
   17254:	and	r1, r0, r5
   17258:	str	r7, [fp, #-80]	; 0xffffffb0
   1725c:	and	r1, r3, r1
   17260:	str	r1, [sp, #40]	; 0x28
   17264:	clz	r1, r7
   17268:	lsr	r1, r1, #5
   1726c:	and	r1, r1, r5
   17270:	eor	r5, r5, #1
   17274:	str	r1, [sp, #36]	; 0x24
   17278:	mov	r1, r7
   1727c:	str	r5, [sp, #88]	; 0x58
   17280:	mov	r7, #0
   17284:	movwne	r1, #1
   17288:	orr	r5, r1, r5
   1728c:	and	r1, r1, r3
   17290:	and	r0, r0, r1
   17294:	str	r5, [sp, #60]	; 0x3c
   17298:	str	r1, [fp, #-68]	; 0xffffffbc
   1729c:	str	r0, [fp, #-60]	; 0xffffffc4
   172a0:	eor	r0, r3, #1
   172a4:	str	r0, [sp, #44]	; 0x2c
   172a8:	cmn	lr, #1
   172ac:	beq	172bc <__assert_fail@plt+0x5dfc>
   172b0:	cmp	r7, lr
   172b4:	bne	172c8 <__assert_fail@plt+0x5e08>
   172b8:	b	17f40 <__assert_fail@plt+0x6a80>
   172bc:	ldrb	r0, [ip, r7]
   172c0:	cmp	r0, #0
   172c4:	beq	17f48 <__assert_fail@plt+0x6a88>
   172c8:	ldr	r0, [fp, #-60]	; 0xffffffc4
   172cc:	mov	r8, #0
   172d0:	str	r4, [fp, #-52]	; 0xffffffcc
   172d4:	str	r2, [fp, #-48]	; 0xffffffd0
   172d8:	cmp	r0, #0
   172dc:	beq	17310 <__assert_fail@plt+0x5e50>
   172e0:	ldr	r0, [fp, #-76]	; 0xffffffb4
   172e4:	add	r4, r7, r0
   172e8:	cmp	r0, #2
   172ec:	bcc	17308 <__assert_fail@plt+0x5e48>
   172f0:	cmn	lr, #1
   172f4:	bne	17308 <__assert_fail@plt+0x5e48>
   172f8:	mov	r0, ip
   172fc:	bl	1134c <strlen@plt>
   17300:	ldr	ip, [fp, #-84]	; 0xffffffac
   17304:	mov	lr, r0
   17308:	cmp	r4, lr
   1730c:	bls	17328 <__assert_fail@plt+0x5e68>
   17310:	mov	r0, #0
   17314:	str	r0, [fp, #-56]	; 0xffffffc8
   17318:	ldrb	r5, [ip, r7]
   1731c:	cmp	r5, #126	; 0x7e
   17320:	bls	17378 <__assert_fail@plt+0x5eb8>
   17324:	b	17780 <__assert_fail@plt+0x62c0>
   17328:	ldr	r1, [sp, #92]	; 0x5c
   1732c:	ldr	r2, [fp, #-76]	; 0xffffffb4
   17330:	add	r0, ip, r7
   17334:	mov	r4, lr
   17338:	bl	11244 <memcmp@plt>
   1733c:	ldr	r2, [sp, #88]	; 0x58
   17340:	cmp	r0, #0
   17344:	mov	r1, r0
   17348:	movwne	r1, #1
   1734c:	orr	r1, r1, r2
   17350:	tst	r1, #1
   17354:	beq	18054 <__assert_fail@plt+0x6b94>
   17358:	ldr	ip, [fp, #-84]	; 0xffffffac
   1735c:	clz	r0, r0
   17360:	mov	lr, r4
   17364:	lsr	r0, r0, #5
   17368:	str	r0, [fp, #-56]	; 0xffffffc8
   1736c:	ldrb	r5, [ip, r7]
   17370:	cmp	r5, #126	; 0x7e
   17374:	bhi	17780 <__assert_fail@plt+0x62c0>
   17378:	add	r3, pc, #16
   1737c:	mov	r4, #1
   17380:	mov	r2, #110	; 0x6e
   17384:	mov	r0, #97	; 0x61
   17388:	mov	r1, #0
   1738c:	ldr	pc, [r3, r5, lsl #2]
   17390:	andeq	r7, r1, r0, ror #12
   17394:	andeq	r7, r1, r0, lsl #15
   17398:	andeq	r7, r1, r0, lsl #15
   1739c:	andeq	r7, r1, r0, lsl #15
   173a0:	andeq	r7, r1, r0, lsl #15
   173a4:	andeq	r7, r1, r0, lsl #15
   173a8:	andeq	r7, r1, r0, lsl #15
   173ac:	andeq	r7, r1, ip, asr r8
   173b0:	andeq	r7, r1, r0, asr #12
   173b4:	andeq	r7, r1, r8, lsr #12
   173b8:	andeq	r7, r1, ip, asr #12
   173bc:	ldrdeq	r7, [r1], -ip
   173c0:	andeq	r7, r1, r0, lsr #12
   173c4:	andeq	r7, r1, r8, asr #12
   173c8:	andeq	r7, r1, r0, lsl #15
   173cc:	andeq	r7, r1, r0, lsl #15
   173d0:	andeq	r7, r1, r0, lsl #15
   173d4:	andeq	r7, r1, r0, lsl #15
   173d8:	andeq	r7, r1, r0, lsl #15
   173dc:	andeq	r7, r1, r0, lsl #15
   173e0:	andeq	r7, r1, r0, lsl #15
   173e4:	andeq	r7, r1, r0, lsl #15
   173e8:	andeq	r7, r1, r0, lsl #15
   173ec:	andeq	r7, r1, r0, lsl #15
   173f0:	andeq	r7, r1, r0, lsl #15
   173f4:	andeq	r7, r1, r0, lsl #15
   173f8:	andeq	r7, r1, r0, lsl #15
   173fc:	andeq	r7, r1, r0, lsl #15
   17400:	andeq	r7, r1, r0, lsl #15
   17404:	andeq	r7, r1, r0, lsl #15
   17408:	andeq	r7, r1, r0, lsl #15
   1740c:	andeq	r7, r1, r0, lsl #15
   17410:	ldrdeq	r7, [r1], -r8
   17414:	ldrdeq	r7, [r1], -ip
   17418:	ldrdeq	r7, [r1], -ip
   1741c:	andeq	r7, r1, ip, lsr #11
   17420:	ldrdeq	r7, [r1], -ip
   17424:	andeq	r7, r1, ip, lsl #11
   17428:	ldrdeq	r7, [r1], -ip
   1742c:	andeq	r7, r1, r4, ror #13
   17430:	ldrdeq	r7, [r1], -ip
   17434:	ldrdeq	r7, [r1], -ip
   17438:	ldrdeq	r7, [r1], -ip
   1743c:	andeq	r7, r1, ip, lsl #11
   17440:	andeq	r7, r1, ip, lsl #11
   17444:	andeq	r7, r1, ip, lsl #11
   17448:	andeq	r7, r1, ip, lsl #11
   1744c:	andeq	r7, r1, ip, lsl #11
   17450:	andeq	r7, r1, ip, lsl #11
   17454:	andeq	r7, r1, ip, lsl #11
   17458:	andeq	r7, r1, ip, lsl #11
   1745c:	andeq	r7, r1, ip, lsl #11
   17460:	andeq	r7, r1, ip, lsl #11
   17464:	andeq	r7, r1, ip, lsl #11
   17468:	andeq	r7, r1, ip, lsl #11
   1746c:	andeq	r7, r1, ip, lsl #11
   17470:	andeq	r7, r1, ip, lsl #11
   17474:	andeq	r7, r1, ip, lsl #11
   17478:	andeq	r7, r1, ip, lsl #11
   1747c:	ldrdeq	r7, [r1], -ip
   17480:	ldrdeq	r7, [r1], -ip
   17484:	ldrdeq	r7, [r1], -ip
   17488:	ldrdeq	r7, [r1], -ip
   1748c:	andeq	r7, r1, r0, lsr #13
   17490:	andeq	r7, r1, r0, lsl #15
   17494:	andeq	r7, r1, ip, lsl #11
   17498:	andeq	r7, r1, ip, lsl #11
   1749c:	andeq	r7, r1, ip, lsl #11
   174a0:	andeq	r7, r1, ip, lsl #11
   174a4:	andeq	r7, r1, ip, lsl #11
   174a8:	andeq	r7, r1, ip, lsl #11
   174ac:	andeq	r7, r1, ip, lsl #11
   174b0:	andeq	r7, r1, ip, lsl #11
   174b4:	andeq	r7, r1, ip, lsl #11
   174b8:	andeq	r7, r1, ip, lsl #11
   174bc:	andeq	r7, r1, ip, lsl #11
   174c0:	andeq	r7, r1, ip, lsl #11
   174c4:	andeq	r7, r1, ip, lsl #11
   174c8:	andeq	r7, r1, ip, lsl #11
   174cc:	andeq	r7, r1, ip, lsl #11
   174d0:	andeq	r7, r1, ip, lsl #11
   174d4:	andeq	r7, r1, ip, lsl #11
   174d8:	andeq	r7, r1, ip, lsl #11
   174dc:	andeq	r7, r1, ip, lsl #11
   174e0:	andeq	r7, r1, ip, lsl #11
   174e4:	andeq	r7, r1, ip, lsl #11
   174e8:	andeq	r7, r1, ip, lsl #11
   174ec:	andeq	r7, r1, ip, lsl #11
   174f0:	andeq	r7, r1, ip, lsl #11
   174f4:	andeq	r7, r1, ip, lsl #11
   174f8:	andeq	r7, r1, ip, lsl #11
   174fc:	ldrdeq	r7, [r1], -ip
   17500:	andeq	r7, r1, ip, ror #11
   17504:	andeq	r7, r1, ip, lsl #11
   17508:	ldrdeq	r7, [r1], -ip
   1750c:	andeq	r7, r1, ip, lsl #11
   17510:	ldrdeq	r7, [r1], -ip
   17514:	andeq	r7, r1, ip, lsl #11
   17518:	andeq	r7, r1, ip, lsl #11
   1751c:	andeq	r7, r1, ip, lsl #11
   17520:	andeq	r7, r1, ip, lsl #11
   17524:	andeq	r7, r1, ip, lsl #11
   17528:	andeq	r7, r1, ip, lsl #11
   1752c:	andeq	r7, r1, ip, lsl #11
   17530:	andeq	r7, r1, ip, lsl #11
   17534:	andeq	r7, r1, ip, lsl #11
   17538:	andeq	r7, r1, ip, lsl #11
   1753c:	andeq	r7, r1, ip, lsl #11
   17540:	andeq	r7, r1, ip, lsl #11
   17544:	andeq	r7, r1, ip, lsl #11
   17548:	andeq	r7, r1, ip, lsl #11
   1754c:	andeq	r7, r1, ip, lsl #11
   17550:	andeq	r7, r1, ip, lsl #11
   17554:	andeq	r7, r1, ip, lsl #11
   17558:	andeq	r7, r1, ip, lsl #11
   1755c:	andeq	r7, r1, ip, lsl #11
   17560:	andeq	r7, r1, ip, lsl #11
   17564:	andeq	r7, r1, ip, lsl #11
   17568:	andeq	r7, r1, ip, lsl #11
   1756c:	andeq	r7, r1, ip, lsl #11
   17570:	andeq	r7, r1, ip, lsl #11
   17574:	andeq	r7, r1, ip, lsl #11
   17578:	andeq	r7, r1, ip, lsl #11
   1757c:	andeq	r7, r1, ip, asr #11
   17580:	ldrdeq	r7, [r1], -ip
   17584:	andeq	r7, r1, ip, asr #11
   17588:	andeq	r7, r1, ip, lsr #11
   1758c:	ldr	r0, [fp, #-68]	; 0xffffffbc
   17590:	cmp	r0, #0
   17594:	beq	17870 <__assert_fail@plt+0x63b0>
   17598:	ldr	r0, [fp, #16]
   1759c:	cmp	r0, #0
   175a0:	mov	r0, r5
   175a4:	bne	17880 <__assert_fail@plt+0x63c0>
   175a8:	b	178a0 <__assert_fail@plt+0x63e0>
   175ac:	mov	r4, #0
   175b0:	cmp	r7, #0
   175b4:	beq	177d8 <__assert_fail@plt+0x6318>
   175b8:	mov	r8, #0
   175bc:	ldr	r0, [fp, #-68]	; 0xffffffbc
   175c0:	cmp	r0, #0
   175c4:	bne	17598 <__assert_fail@plt+0x60d8>
   175c8:	b	17870 <__assert_fail@plt+0x63b0>
   175cc:	mov	r4, #0
   175d0:	cmn	lr, #1
   175d4:	beq	177b0 <__assert_fail@plt+0x62f0>
   175d8:	cmp	r7, #0
   175dc:	bne	175b8 <__assert_fail@plt+0x60f8>
   175e0:	cmp	lr, #1
   175e4:	beq	177d8 <__assert_fail@plt+0x6318>
   175e8:	b	175b8 <__assert_fail@plt+0x60f8>
   175ec:	ldr	r0, [fp, #-64]	; 0xffffffc0
   175f0:	cmp	r0, #2
   175f4:	bne	17808 <__assert_fail@plt+0x6348>
   175f8:	ldr	r0, [fp, #-72]	; 0xffffffb8
   175fc:	tst	r0, #1
   17600:	bne	18068 <__assert_fail@plt+0x6ba8>
   17604:	mov	r8, #0
   17608:	mov	r0, #92	; 0x5c
   1760c:	mov	r4, #0
   17610:	cmp	r8, #0
   17614:	beq	17828 <__assert_fail@plt+0x6368>
   17618:	ldr	r2, [fp, #-48]	; 0xffffffd0
   1761c:	b	1791c <__assert_fail@plt+0x645c>
   17620:	mov	r0, #102	; 0x66
   17624:	b	1785c <__assert_fail@plt+0x639c>
   17628:	mov	r2, #116	; 0x74
   1762c:	ldr	r0, [sp, #60]	; 0x3c
   17630:	tst	r0, #1
   17634:	mov	r0, r2
   17638:	bne	1785c <__assert_fail@plt+0x639c>
   1763c:	b	18068 <__assert_fail@plt+0x6ba8>
   17640:	mov	r0, #98	; 0x62
   17644:	b	1785c <__assert_fail@plt+0x639c>
   17648:	mov	r2, #114	; 0x72
   1764c:	ldr	r0, [sp, #60]	; 0x3c
   17650:	tst	r0, #1
   17654:	mov	r0, r2
   17658:	bne	1785c <__assert_fail@plt+0x639c>
   1765c:	b	18068 <__assert_fail@plt+0x6ba8>
   17660:	ldr	r0, [sp, #80]	; 0x50
   17664:	tst	r0, #1
   17668:	beq	17944 <__assert_fail@plt+0x6484>
   1766c:	ldr	r0, [fp, #-72]	; 0xffffffb8
   17670:	tst	r0, #1
   17674:	bne	18190 <__assert_fail@plt+0x6cd0>
   17678:	ldr	r0, [fp, #-64]	; 0xffffffc0
   1767c:	ldr	r2, [fp, #-48]	; 0xffffffd0
   17680:	cmp	r0, #2
   17684:	ldr	r0, [fp, #-80]	; 0xffffffb0
   17688:	movwne	r0, #1
   1768c:	orr	r0, r0, r2
   17690:	tst	r0, #1
   17694:	beq	17c3c <__assert_fail@plt+0x677c>
   17698:	mov	r0, r9
   1769c:	b	17c70 <__assert_fail@plt+0x67b0>
   176a0:	ldr	r0, [fp, #-64]	; 0xffffffc0
   176a4:	mov	r8, #0
   176a8:	mov	r5, #63	; 0x3f
   176ac:	cmp	r0, #5
   176b0:	beq	17af8 <__assert_fail@plt+0x6638>
   176b4:	cmp	r0, #2
   176b8:	bne	17ba8 <__assert_fail@plt+0x66e8>
   176bc:	ldr	r0, [fp, #-72]	; 0xffffffb8
   176c0:	tst	r0, #1
   176c4:	bne	18068 <__assert_fail@plt+0x6ba8>
   176c8:	mov	r4, #0
   176cc:	ldr	r0, [fp, #-68]	; 0xffffffbc
   176d0:	cmp	r0, #0
   176d4:	bne	17598 <__assert_fail@plt+0x60d8>
   176d8:	b	17870 <__assert_fail@plt+0x63b0>
   176dc:	mov	r0, #118	; 0x76
   176e0:	b	1785c <__assert_fail@plt+0x639c>
   176e4:	mov	r0, #1
   176e8:	mov	r5, #39	; 0x27
   176ec:	str	r0, [sp, #52]	; 0x34
   176f0:	ldr	r0, [fp, #-64]	; 0xffffffc0
   176f4:	cmp	r0, #2
   176f8:	bne	1776c <__assert_fail@plt+0x62ac>
   176fc:	ldr	r0, [fp, #-72]	; 0xffffffb8
   17700:	tst	r0, #1
   17704:	bne	18068 <__assert_fail@plt+0x6ba8>
   17708:	ldr	r2, [sp, #48]	; 0x30
   1770c:	clz	r1, sl
   17710:	mov	r8, #0
   17714:	lsr	r1, r1, #5
   17718:	cmp	r2, #0
   1771c:	mov	r0, r2
   17720:	movwne	r0, #1
   17724:	orrs	r0, r0, r1
   17728:	moveq	r2, sl
   1772c:	moveq	sl, r0
   17730:	cmp	r9, sl
   17734:	str	r2, [sp, #48]	; 0x30
   17738:	movcc	r0, #39	; 0x27
   1773c:	strbcc	r0, [r6, r9]
   17740:	add	r0, r9, #1
   17744:	cmp	r0, sl
   17748:	movcc	r1, #92	; 0x5c
   1774c:	strbcc	r1, [r6, r0]
   17750:	add	r0, r9, #2
   17754:	add	r9, r9, #3
   17758:	cmp	r0, sl
   1775c:	movcc	r1, #39	; 0x27
   17760:	strbcc	r1, [r6, r0]
   17764:	mov	r0, #0
   17768:	str	r0, [fp, #-48]	; 0xffffffd0
   1776c:	mov	r4, #1
   17770:	ldr	r0, [fp, #-68]	; 0xffffffbc
   17774:	cmp	r0, #0
   17778:	bne	17598 <__assert_fail@plt+0x60d8>
   1777c:	b	17870 <__assert_fail@plt+0x63b0>
   17780:	ldr	r0, [sp, #32]
   17784:	cmp	r0, #1
   17788:	bne	17974 <__assert_fail@plt+0x64b4>
   1778c:	str	lr, [sp, #84]	; 0x54
   17790:	bl	11334 <__ctype_b_loc@plt>
   17794:	ldr	r0, [r0]
   17798:	ldr	ip, [fp, #-84]	; 0xffffffac
   1779c:	mov	r1, #1
   177a0:	add	r0, r0, r5, lsl #1
   177a4:	ldrb	r0, [r0, #1]
   177a8:	ubfx	r4, r0, #6, #1
   177ac:	b	17d6c <__assert_fail@plt+0x68ac>
   177b0:	cmp	r7, #0
   177b4:	ldrbeq	r0, [ip, #1]
   177b8:	cmpeq	r0, #0
   177bc:	beq	177d8 <__assert_fail@plt+0x6318>
   177c0:	mvn	lr, #0
   177c4:	mov	r8, #0
   177c8:	ldr	r0, [fp, #-68]	; 0xffffffbc
   177cc:	cmp	r0, #0
   177d0:	bne	17598 <__assert_fail@plt+0x60d8>
   177d4:	b	17870 <__assert_fail@plt+0x63b0>
   177d8:	mov	r1, #1
   177dc:	ldr	r0, [fp, #-64]	; 0xffffffc0
   177e0:	cmp	r0, #2
   177e4:	bne	177f4 <__assert_fail@plt+0x6334>
   177e8:	ldr	r0, [fp, #-72]	; 0xffffffb8
   177ec:	tst	r0, #1
   177f0:	bne	18068 <__assert_fail@plt+0x6ba8>
   177f4:	mov	r4, r1
   177f8:	ldr	r0, [fp, #-68]	; 0xffffffbc
   177fc:	cmp	r0, #0
   17800:	bne	17598 <__assert_fail@plt+0x60d8>
   17804:	b	17870 <__assert_fail@plt+0x63b0>
   17808:	ldr	r1, [sp, #40]	; 0x28
   1780c:	mov	r8, #0
   17810:	mov	r0, #92	; 0x5c
   17814:	cmp	r1, #0
   17818:	beq	1785c <__assert_fail@plt+0x639c>
   1781c:	mov	r4, #0
   17820:	cmp	r8, #0
   17824:	bne	17618 <__assert_fail@plt+0x6158>
   17828:	ldr	r2, [fp, #-48]	; 0xffffffd0
   1782c:	tst	r2, #1
   17830:	beq	1791c <__assert_fail@plt+0x645c>
   17834:	cmp	r9, sl
   17838:	movcc	r1, #39	; 0x27
   1783c:	strbcc	r1, [r6, r9]
   17840:	add	r1, r9, #1
   17844:	add	r9, r9, #2
   17848:	cmp	r1, sl
   1784c:	movcc	r2, #39	; 0x27
   17850:	strbcc	r2, [r6, r1]
   17854:	mov	r2, #0
   17858:	b	1791c <__assert_fail@plt+0x645c>
   1785c:	ldr	r1, [sp, #80]	; 0x50
   17860:	mov	r4, #0
   17864:	mov	r8, #0
   17868:	tst	r1, #1
   1786c:	bne	178ac <__assert_fail@plt+0x63ec>
   17870:	ldr	r0, [fp, #-88]	; 0xffffffa8
   17874:	cmp	r0, #0
   17878:	mov	r0, r5
   1787c:	beq	178a0 <__assert_fail@plt+0x63e0>
   17880:	ldr	r1, [fp, #16]
   17884:	ubfx	r0, r5, #5, #3
   17888:	mov	r2, #1
   1788c:	ldr	r0, [r1, r0, lsl #2]
   17890:	and	r1, r5, #31
   17894:	tst	r0, r2, lsl r1
   17898:	mov	r0, r5
   1789c:	bne	178ac <__assert_fail@plt+0x63ec>
   178a0:	ldr	r1, [fp, #-56]	; 0xffffffc8
   178a4:	cmp	r1, #0
   178a8:	beq	17d04 <__assert_fail@plt+0x6844>
   178ac:	ldr	r1, [fp, #-72]	; 0xffffffb8
   178b0:	tst	r1, #1
   178b4:	bne	18048 <__assert_fail@plt+0x6b88>
   178b8:	ldr	r1, [fp, #-64]	; 0xffffffc0
   178bc:	ldr	r2, [fp, #-48]	; 0xffffffd0
   178c0:	cmp	r1, #2
   178c4:	ldr	r1, [fp, #-80]	; 0xffffffb0
   178c8:	movwne	r1, #1
   178cc:	orr	r1, r1, r2
   178d0:	tst	r1, #1
   178d4:	bne	1790c <__assert_fail@plt+0x644c>
   178d8:	cmp	r9, sl
   178dc:	movcc	r1, #39	; 0x27
   178e0:	strbcc	r1, [r6, r9]
   178e4:	add	r1, r9, #1
   178e8:	cmp	r1, sl
   178ec:	movcc	r2, #36	; 0x24
   178f0:	strbcc	r2, [r6, r1]
   178f4:	add	r1, r9, #2
   178f8:	add	r9, r9, #3
   178fc:	cmp	r1, sl
   17900:	movcc	r2, #39	; 0x27
   17904:	strbcc	r2, [r6, r1]
   17908:	mov	r2, #1
   1790c:	cmp	r9, sl
   17910:	movcc	r1, #92	; 0x5c
   17914:	strbcc	r1, [r6, r9]
   17918:	add	r9, r9, #1
   1791c:	cmp	r9, sl
   17920:	add	r7, r7, #1
   17924:	strbcc	r0, [r6, r9]
   17928:	ldr	r0, [fp, #-52]	; 0xffffffcc
   1792c:	add	r9, r9, #1
   17930:	and	r0, r0, r4
   17934:	mov	r4, r0
   17938:	cmn	lr, #1
   1793c:	bne	172b0 <__assert_fail@plt+0x5df0>
   17940:	b	172bc <__assert_fail@plt+0x5dfc>
   17944:	ldr	r0, [sp, #28]
   17948:	mov	r4, #0
   1794c:	mov	r8, #0
   17950:	mov	r5, #0
   17954:	cmp	r0, #0
   17958:	beq	17870 <__assert_fail@plt+0x63b0>
   1795c:	ldr	r4, [fp, #-52]	; 0xffffffcc
   17960:	ldr	r2, [fp, #-48]	; 0xffffffd0
   17964:	add	r7, r7, #1
   17968:	cmn	lr, #1
   1796c:	bne	172b0 <__assert_fail@plt+0x5df0>
   17970:	b	172bc <__assert_fail@plt+0x5dfc>
   17974:	mov	r0, #0
   17978:	cmn	lr, #1
   1797c:	str	r0, [fp, #-36]	; 0xffffffdc
   17980:	str	r0, [fp, #-40]	; 0xffffffd8
   17984:	bne	17998 <__assert_fail@plt+0x64d8>
   17988:	mov	r0, ip
   1798c:	bl	1134c <strlen@plt>
   17990:	ldr	ip, [fp, #-84]	; 0xffffffac
   17994:	mov	lr, r0
   17998:	ldr	r0, [sp, #36]	; 0x24
   1799c:	str	sl, [sp, #56]	; 0x38
   179a0:	str	lr, [sp, #84]	; 0x54
   179a4:	cmp	r0, #0
   179a8:	beq	17bc0 <__assert_fail@plt+0x6700>
   179ac:	add	r0, ip, r7
   179b0:	mov	r4, #1
   179b4:	mov	r6, #0
   179b8:	sub	sl, fp, #40	; 0x28
   179bc:	str	r0, [sp, #20]
   179c0:	str	r6, [sp, #64]	; 0x40
   179c4:	add	r6, r6, r7
   179c8:	sub	r0, fp, #44	; 0x2c
   179cc:	mov	r3, sl
   179d0:	add	r1, ip, r6
   179d4:	sub	r2, lr, r6
   179d8:	bl	1ac1c <__assert_fail@plt+0x975c>
   179dc:	cmn	r0, #2
   179e0:	beq	17d1c <__assert_fail@plt+0x685c>
   179e4:	ldr	sl, [sp, #56]	; 0x38
   179e8:	cmn	r0, #1
   179ec:	beq	17d10 <__assert_fail@plt+0x6850>
   179f0:	cmp	r0, #0
   179f4:	beq	17d14 <__assert_fail@plt+0x6854>
   179f8:	cmp	r0, #2
   179fc:	bcc	17abc <__assert_fail@plt+0x65fc>
   17a00:	ldr	r1, [sp, #64]	; 0x40
   17a04:	ldr	r2, [sp, #20]
   17a08:	add	r1, r2, r1
   17a0c:	mov	r2, #1
   17a10:	ldrb	r3, [r1, r2]
   17a14:	sub	r3, r3, #91	; 0x5b
   17a18:	cmp	r3, #33	; 0x21
   17a1c:	bhi	17ab0 <__assert_fail@plt+0x65f0>
   17a20:	add	r6, pc, #0
   17a24:	ldr	pc, [r6, r3, lsl #2]
   17a28:	andeq	r8, r1, r4, ror r0
   17a2c:	andeq	r8, r1, r4, ror r0
   17a30:			; <UNDEFINED> instruction: 0x00017ab0
   17a34:	andeq	r8, r1, r4, ror r0
   17a38:			; <UNDEFINED> instruction: 0x00017ab0
   17a3c:	andeq	r8, r1, r4, ror r0
   17a40:			; <UNDEFINED> instruction: 0x00017ab0
   17a44:			; <UNDEFINED> instruction: 0x00017ab0
   17a48:			; <UNDEFINED> instruction: 0x00017ab0
   17a4c:			; <UNDEFINED> instruction: 0x00017ab0
   17a50:			; <UNDEFINED> instruction: 0x00017ab0
   17a54:			; <UNDEFINED> instruction: 0x00017ab0
   17a58:			; <UNDEFINED> instruction: 0x00017ab0
   17a5c:			; <UNDEFINED> instruction: 0x00017ab0
   17a60:			; <UNDEFINED> instruction: 0x00017ab0
   17a64:			; <UNDEFINED> instruction: 0x00017ab0
   17a68:			; <UNDEFINED> instruction: 0x00017ab0
   17a6c:			; <UNDEFINED> instruction: 0x00017ab0
   17a70:			; <UNDEFINED> instruction: 0x00017ab0
   17a74:			; <UNDEFINED> instruction: 0x00017ab0
   17a78:			; <UNDEFINED> instruction: 0x00017ab0
   17a7c:			; <UNDEFINED> instruction: 0x00017ab0
   17a80:			; <UNDEFINED> instruction: 0x00017ab0
   17a84:			; <UNDEFINED> instruction: 0x00017ab0
   17a88:			; <UNDEFINED> instruction: 0x00017ab0
   17a8c:			; <UNDEFINED> instruction: 0x00017ab0
   17a90:			; <UNDEFINED> instruction: 0x00017ab0
   17a94:			; <UNDEFINED> instruction: 0x00017ab0
   17a98:			; <UNDEFINED> instruction: 0x00017ab0
   17a9c:			; <UNDEFINED> instruction: 0x00017ab0
   17aa0:			; <UNDEFINED> instruction: 0x00017ab0
   17aa4:			; <UNDEFINED> instruction: 0x00017ab0
   17aa8:			; <UNDEFINED> instruction: 0x00017ab0
   17aac:	andeq	r8, r1, r4, ror r0
   17ab0:	add	r2, r2, #1
   17ab4:	cmp	r2, r0
   17ab8:	bcc	17a10 <__assert_fail@plt+0x6550>
   17abc:	ldr	r6, [sp, #64]	; 0x40
   17ac0:	add	r6, r0, r6
   17ac4:	ldr	r0, [fp, #-44]	; 0xffffffd4
   17ac8:	bl	1128c <iswprint@plt>
   17acc:	cmp	r0, #0
   17ad0:	sub	sl, fp, #40	; 0x28
   17ad4:	movwne	r0, #1
   17ad8:	and	r4, r4, r0
   17adc:	mov	r0, sl
   17ae0:	bl	11238 <mbsinit@plt>
   17ae4:	ldr	ip, [fp, #-84]	; 0xffffffac
   17ae8:	ldr	lr, [sp, #84]	; 0x54
   17aec:	cmp	r0, #0
   17af0:	beq	179c0 <__assert_fail@plt+0x6500>
   17af4:	b	17d60 <__assert_fail@plt+0x68a0>
   17af8:	ldr	r0, [sp, #24]
   17afc:	cmp	r0, #0
   17b00:	beq	17ba8 <__assert_fail@plt+0x66e8>
   17b04:	add	r0, r7, #2
   17b08:	cmp	r0, lr
   17b0c:	bcs	17ba8 <__assert_fail@plt+0x66e8>
   17b10:	add	r1, ip, r7
   17b14:	ldrb	r1, [r1, #1]
   17b18:	cmp	r1, #63	; 0x3f
   17b1c:	bne	17ba8 <__assert_fail@plt+0x66e8>
   17b20:	ldrb	r5, [ip, r0]
   17b24:	sub	r1, r5, #33	; 0x21
   17b28:	cmp	r1, #29
   17b2c:	bhi	17ba8 <__assert_fail@plt+0x66e8>
   17b30:	movw	r3, #20929	; 0x51c1
   17b34:	mov	r2, #1
   17b38:	movt	r3, #14336	; 0x3800
   17b3c:	tst	r3, r2, lsl r1
   17b40:	beq	17ba8 <__assert_fail@plt+0x66e8>
   17b44:	ldr	r1, [fp, #-72]	; 0xffffffb8
   17b48:	tst	r1, #1
   17b4c:	bne	18198 <__assert_fail@plt+0x6cd8>
   17b50:	cmp	r9, sl
   17b54:	mov	r7, r0
   17b58:	mov	r4, #0
   17b5c:	movcc	r1, #63	; 0x3f
   17b60:	strbcc	r1, [r6, r9]
   17b64:	add	r1, r9, #1
   17b68:	cmp	r1, sl
   17b6c:	movcc	r2, #34	; 0x22
   17b70:	strbcc	r2, [r6, r1]
   17b74:	add	r1, r9, #2
   17b78:	cmp	r1, sl
   17b7c:	movcc	r2, #34	; 0x22
   17b80:	strbcc	r2, [r6, r1]
   17b84:	add	r1, r9, #3
   17b88:	add	r9, r9, #4
   17b8c:	cmp	r1, sl
   17b90:	movcc	r2, #63	; 0x3f
   17b94:	strbcc	r2, [r6, r1]
   17b98:	ldr	r0, [fp, #-68]	; 0xffffffbc
   17b9c:	cmp	r0, #0
   17ba0:	bne	17598 <__assert_fail@plt+0x60d8>
   17ba4:	b	17870 <__assert_fail@plt+0x63b0>
   17ba8:	mov	r5, #63	; 0x3f
   17bac:	mov	r4, #0
   17bb0:	ldr	r0, [fp, #-68]	; 0xffffffbc
   17bb4:	cmp	r0, #0
   17bb8:	bne	17598 <__assert_fail@plt+0x60d8>
   17bbc:	b	17870 <__assert_fail@plt+0x63b0>
   17bc0:	mov	r4, #1
   17bc4:	mov	r6, #0
   17bc8:	sub	sl, fp, #40	; 0x28
   17bcc:	str	r6, [sp, #64]	; 0x40
   17bd0:	add	r6, r6, r7
   17bd4:	sub	r0, fp, #44	; 0x2c
   17bd8:	mov	r3, sl
   17bdc:	add	r1, ip, r6
   17be0:	sub	r2, lr, r6
   17be4:	bl	1ac1c <__assert_fail@plt+0x975c>
   17be8:	cmn	r0, #2
   17bec:	beq	17d1c <__assert_fail@plt+0x685c>
   17bf0:	cmn	r0, #1
   17bf4:	beq	17d10 <__assert_fail@plt+0x6850>
   17bf8:	ldr	r6, [sp, #64]	; 0x40
   17bfc:	cmp	r0, #0
   17c00:	beq	17d5c <__assert_fail@plt+0x689c>
   17c04:	add	r6, r0, r6
   17c08:	ldr	r0, [fp, #-44]	; 0xffffffd4
   17c0c:	bl	1128c <iswprint@plt>
   17c10:	cmp	r0, #0
   17c14:	sub	sl, fp, #40	; 0x28
   17c18:	movwne	r0, #1
   17c1c:	and	r4, r4, r0
   17c20:	mov	r0, sl
   17c24:	bl	11238 <mbsinit@plt>
   17c28:	ldr	ip, [fp, #-84]	; 0xffffffac
   17c2c:	ldr	lr, [sp, #84]	; 0x54
   17c30:	cmp	r0, #0
   17c34:	beq	17bcc <__assert_fail@plt+0x670c>
   17c38:	b	17d60 <__assert_fail@plt+0x68a0>
   17c3c:	cmp	r9, sl
   17c40:	mov	r2, #1
   17c44:	movcc	r0, #39	; 0x27
   17c48:	strbcc	r0, [r6, r9]
   17c4c:	add	r0, r9, #1
   17c50:	cmp	r0, sl
   17c54:	movcc	r1, #36	; 0x24
   17c58:	strbcc	r1, [r6, r0]
   17c5c:	add	r0, r9, #2
   17c60:	cmp	r0, sl
   17c64:	movcc	r1, #39	; 0x27
   17c68:	strbcc	r1, [r6, r0]
   17c6c:	add	r0, r9, #3
   17c70:	cmp	r0, sl
   17c74:	add	r9, r0, #1
   17c78:	str	r2, [fp, #-48]	; 0xffffffd0
   17c7c:	movcc	r1, #92	; 0x5c
   17c80:	strbcc	r1, [r6, r0]
   17c84:	ldr	r1, [fp, #-64]	; 0xffffffc0
   17c88:	cmp	r1, #2
   17c8c:	beq	17cec <__assert_fail@plt+0x682c>
   17c90:	add	r1, r7, #1
   17c94:	mov	r4, #0
   17c98:	mov	r8, #1
   17c9c:	mov	r5, #48	; 0x30
   17ca0:	cmp	r1, lr
   17ca4:	bcs	1758c <__assert_fail@plt+0x60cc>
   17ca8:	ldrb	r1, [ip, r1]
   17cac:	sub	r1, r1, #48	; 0x30
   17cb0:	uxtb	r1, r1
   17cb4:	cmp	r1, #9
   17cb8:	bhi	1758c <__assert_fail@plt+0x60cc>
   17cbc:	cmp	r9, sl
   17cc0:	movcc	r1, #48	; 0x30
   17cc4:	strbcc	r1, [r6, r9]
   17cc8:	add	r1, r0, #2
   17ccc:	add	r9, r0, #3
   17cd0:	cmp	r1, sl
   17cd4:	movcc	r2, #48	; 0x30
   17cd8:	strbcc	r2, [r6, r1]
   17cdc:	ldr	r0, [fp, #-68]	; 0xffffffbc
   17ce0:	cmp	r0, #0
   17ce4:	bne	17598 <__assert_fail@plt+0x60d8>
   17ce8:	b	17870 <__assert_fail@plt+0x63b0>
   17cec:	mov	r0, #48	; 0x30
   17cf0:	mov	r8, #1
   17cf4:	mov	r4, #0
   17cf8:	ldr	r1, [fp, #-56]	; 0xffffffc8
   17cfc:	cmp	r1, #0
   17d00:	bne	178ac <__assert_fail@plt+0x63ec>
   17d04:	cmp	r8, #0
   17d08:	beq	17828 <__assert_fail@plt+0x6368>
   17d0c:	b	17618 <__assert_fail@plt+0x6158>
   17d10:	mov	r4, #0
   17d14:	ldr	ip, [fp, #-84]	; 0xffffffac
   17d18:	b	17d54 <__assert_fail@plt+0x6894>
   17d1c:	ldr	r1, [sp, #84]	; 0x54
   17d20:	ldr	ip, [fp, #-84]	; 0xffffffac
   17d24:	mov	r4, #0
   17d28:	cmp	r6, r1
   17d2c:	bcs	17d54 <__assert_fail@plt+0x6894>
   17d30:	ldrb	r0, [ip, r6]
   17d34:	cmp	r0, #0
   17d38:	beq	17d54 <__assert_fail@plt+0x6894>
   17d3c:	ldr	r0, [sp, #64]	; 0x40
   17d40:	add	r0, r0, #1
   17d44:	add	r6, r0, r7
   17d48:	str	r0, [sp, #64]	; 0x40
   17d4c:	cmp	r6, r1
   17d50:	bcc	17d30 <__assert_fail@plt+0x6870>
   17d54:	ldr	r6, [sp, #64]	; 0x40
   17d58:	b	17d60 <__assert_fail@plt+0x68a0>
   17d5c:	ldr	ip, [fp, #-84]	; 0xffffffac
   17d60:	mov	r1, r6
   17d64:	ldr	r6, [sp, #76]	; 0x4c
   17d68:	ldr	sl, [sp, #56]	; 0x38
   17d6c:	ldr	r0, [sp, #44]	; 0x2c
   17d70:	cmp	r1, #1
   17d74:	orr	r2, r4, r0
   17d78:	mov	r0, r1
   17d7c:	bhi	17d9c <__assert_fail@plt+0x68dc>
   17d80:	tst	r2, #1
   17d84:	beq	17d9c <__assert_fail@plt+0x68dc>
   17d88:	ldr	lr, [sp, #84]	; 0x54
   17d8c:	ldr	r0, [fp, #-68]	; 0xffffffbc
   17d90:	cmp	r0, #0
   17d94:	bne	17598 <__assert_fail@plt+0x60d8>
   17d98:	b	17870 <__assert_fail@plt+0x63b0>
   17d9c:	str	r2, [sp, #64]	; 0x40
   17da0:	add	r0, r0, r7
   17da4:	add	r1, r7, #1
   17da8:	ldr	lr, [sp, #84]	; 0x54
   17dac:	ldr	r7, [fp, #-64]	; 0xffffffc0
   17db0:	ldr	r2, [fp, #-48]	; 0xffffffd0
   17db4:	mov	r3, #0
   17db8:	str	r0, [sp, #56]	; 0x38
   17dbc:	ldr	r0, [sp, #64]	; 0x40
   17dc0:	tst	r0, #1
   17dc4:	bne	17eac <__assert_fail@plt+0x69ec>
   17dc8:	ldr	r0, [fp, #-72]	; 0xffffffb8
   17dcc:	tst	r0, #1
   17dd0:	bne	1804c <__assert_fail@plt+0x6b8c>
   17dd4:	ldr	r3, [fp, #-80]	; 0xffffffb0
   17dd8:	cmp	r7, #2
   17ddc:	movwne	r3, #1
   17de0:	orr	r3, r3, r2
   17de4:	tst	r3, #1
   17de8:	bne	17e20 <__assert_fail@plt+0x6960>
   17dec:	cmp	r9, sl
   17df0:	add	r3, r9, #1
   17df4:	movcc	r2, #39	; 0x27
   17df8:	strbcc	r2, [r6, r9]
   17dfc:	cmp	r3, sl
   17e00:	movcc	r2, #36	; 0x24
   17e04:	strbcc	r2, [r6, r3]
   17e08:	add	r3, r9, #2
   17e0c:	add	r9, r9, #3
   17e10:	cmp	r3, sl
   17e14:	movcc	r2, #39	; 0x27
   17e18:	strbcc	r2, [r6, r3]
   17e1c:	mov	r2, #1
   17e20:	cmp	r9, sl
   17e24:	mov	r0, r2
   17e28:	movcc	r3, #92	; 0x5c
   17e2c:	strbcc	r3, [r6, r9]
   17e30:	add	r3, r9, #1
   17e34:	cmp	r3, sl
   17e38:	andcc	r7, r5, #192	; 0xc0
   17e3c:	movcc	r2, #48	; 0x30
   17e40:	orrcc	r7, r2, r7, lsr #6
   17e44:	strbcc	r7, [r6, r3]
   17e48:	add	r3, r9, #2
   17e4c:	add	r9, r9, #3
   17e50:	cmp	r3, sl
   17e54:	lsrcc	r7, r5, #3
   17e58:	movcc	r2, #6
   17e5c:	bficc	r7, r2, #3, #29
   17e60:	mov	r2, #6
   17e64:	strbcc	r7, [r6, r3]
   17e68:	bfi	r5, r2, #3, #29
   17e6c:	mov	r3, #1
   17e70:	mov	r2, r0
   17e74:	ldr	r0, [sp, #56]	; 0x38
   17e78:	and	r8, r3, #1
   17e7c:	cmp	r0, r1
   17e80:	bhi	17ee0 <__assert_fail@plt+0x6a20>
   17e84:	b	17f20 <__assert_fail@plt+0x6a60>
   17e88:	cmp	r9, sl
   17e8c:	ldr	r7, [fp, #-64]	; 0xffffffc0
   17e90:	strbcc	r5, [r6, r9]
   17e94:	add	r9, r9, #1
   17e98:	ldrb	r5, [ip, r1]
   17e9c:	add	r1, r1, #1
   17ea0:	ldr	r0, [sp, #64]	; 0x40
   17ea4:	tst	r0, #1
   17ea8:	beq	17dc8 <__assert_fail@plt+0x6908>
   17eac:	ldr	r7, [fp, #-56]	; 0xffffffc8
   17eb0:	tst	r7, #1
   17eb4:	beq	17ec8 <__assert_fail@plt+0x6a08>
   17eb8:	cmp	r9, sl
   17ebc:	movcc	r7, #92	; 0x5c
   17ec0:	strbcc	r7, [r6, r9]
   17ec4:	add	r9, r9, #1
   17ec8:	mov	r7, #0
   17ecc:	str	r7, [fp, #-56]	; 0xffffffc8
   17ed0:	ldr	r0, [sp, #56]	; 0x38
   17ed4:	and	r8, r3, #1
   17ed8:	cmp	r0, r1
   17edc:	bls	17f20 <__assert_fail@plt+0x6a60>
   17ee0:	cmp	r8, #0
   17ee4:	mvn	r7, r2
   17ee8:	movwne	r8, #1
   17eec:	orr	r7, r7, r8
   17ef0:	tst	r7, #1
   17ef4:	bne	17e88 <__assert_fail@plt+0x69c8>
   17ef8:	cmp	r9, sl
   17efc:	movcc	r7, #39	; 0x27
   17f00:	strbcc	r7, [r6, r9]
   17f04:	add	r7, r9, #1
   17f08:	add	r9, r9, #2
   17f0c:	cmp	r7, sl
   17f10:	movcc	r2, #39	; 0x27
   17f14:	strbcc	r2, [r6, r7]
   17f18:	mov	r2, #0
   17f1c:	b	17e88 <__assert_fail@plt+0x69c8>
   17f20:	cmp	r8, #0
   17f24:	sub	r7, r1, #1
   17f28:	mov	r0, r5
   17f2c:	str	r2, [fp, #-48]	; 0xffffffd0
   17f30:	movwne	r8, #1
   17f34:	cmp	r8, #0
   17f38:	beq	17828 <__assert_fail@plt+0x6368>
   17f3c:	b	17618 <__assert_fail@plt+0x6158>
   17f40:	mov	lr, r7
   17f44:	b	17f4c <__assert_fail@plt+0x6a8c>
   17f48:	mvn	lr, #0
   17f4c:	ldr	r7, [fp, #-64]	; 0xffffffc0
   17f50:	ldr	r1, [fp, #-72]	; 0xffffffb8
   17f54:	eor	r0, r7, #2
   17f58:	orr	r0, r0, r9
   17f5c:	clz	r0, r0
   17f60:	lsr	r0, r0, #5
   17f64:	tst	r1, r0
   17f68:	bne	18068 <__assert_fail@plt+0x6ba8>
   17f6c:	mov	r0, r1
   17f70:	ldr	r1, [fp, #-80]	; 0xffffffb0
   17f74:	cmp	r7, #2
   17f78:	movwne	r1, #1
   17f7c:	orr	r0, r0, r1
   17f80:	tst	r0, #1
   17f84:	ldreq	r0, [sp, #52]	; 0x34
   17f88:	streq	lr, [sp, #84]	; 0x54
   17f8c:	eoreq	r0, r0, #1
   17f90:	tsteq	r0, #1
   17f94:	bne	1812c <__assert_fail@plt+0x6c6c>
   17f98:	tst	r4, #1
   17f9c:	bne	180e8 <__assert_fail@plt+0x6c28>
   17fa0:	ldr	r6, [sp, #48]	; 0x30
   17fa4:	mov	r8, #0
   17fa8:	cmp	r6, #0
   17fac:	beq	18124 <__assert_fail@plt+0x6c64>
   17fb0:	ldr	r0, [sp, #80]	; 0x50
   17fb4:	mov	r1, #0
   17fb8:	cmp	sl, #0
   17fbc:	mov	r4, #0
   17fc0:	str	r1, [fp, #-72]	; 0xffffffb8
   17fc4:	beq	16eb8 <__assert_fail@plt+0x59f8>
   17fc8:	b	1812c <__assert_fail@plt+0x6c6c>
   17fcc:	ldrb	r1, [r0, #3]
   17fd0:	cmp	r1, #56	; 0x38
   17fd4:	ldrbeq	r1, [r0, #4]
   17fd8:	cmpeq	r1, #48	; 0x30
   17fdc:	bne	170b0 <__assert_fail@plt+0x5bf0>
   17fe0:	ldrb	r1, [r0, #5]
   17fe4:	cmp	r1, #51	; 0x33
   17fe8:	ldrbeq	r1, [r0, #6]
   17fec:	cmpeq	r1, #48	; 0x30
   17ff0:	bne	170b0 <__assert_fail@plt+0x5bf0>
   17ff4:	ldrb	r0, [r0, #7]
   17ff8:	cmp	r0, #0
   17ffc:	movw	r0, #48978	; 0xbf52
   18000:	movt	r0, #1
   18004:	str	r0, [sp, #68]	; 0x44
   18008:	bne	170b0 <__assert_fail@plt+0x5bf0>
   1800c:	b	170cc <__assert_fail@plt+0x5c0c>
   18010:	ldrb	r1, [r0, #4]
   18014:	cmp	r1, #48	; 0x30
   18018:	ldrbeq	r1, [r0, #5]
   1801c:	cmpeq	r1, #51	; 0x33
   18020:	bne	17194 <__assert_fail@plt+0x5cd4>
   18024:	ldrb	r1, [r0, #6]
   18028:	cmp	r1, #48	; 0x30
   1802c:	ldrbeq	r0, [r0, #7]
   18030:	cmpeq	r0, #0
   18034:	bne	17194 <__assert_fail@plt+0x5cd4>
   18038:	movw	r0, #48982	; 0xbf56
   1803c:	movt	r0, #1
   18040:	str	r0, [sp, #72]	; 0x48
   18044:	b	171b4 <__assert_fail@plt+0x5cf4>
   18048:	ldr	r7, [fp, #-64]	; 0xffffffc0
   1804c:	ldr	r2, [sp, #80]	; 0x50
   18050:	b	18088 <__assert_fail@plt+0x6bc8>
   18054:	ldr	ip, [fp, #-84]	; 0xffffffac
   18058:	mov	r2, #1
   1805c:	mov	lr, r4
   18060:	ldr	r7, [fp, #-64]	; 0xffffffc0
   18064:	b	18088 <__assert_fail@plt+0x6bc8>
   18068:	ldr	r2, [sp, #80]	; 0x50
   1806c:	mov	r7, #2
   18070:	b	18088 <__assert_fail@plt+0x6bc8>
   18074:	ldr	r6, [sp, #76]	; 0x4c
   18078:	ldr	ip, [fp, #-84]	; 0xffffffac
   1807c:	ldr	lr, [sp, #84]	; 0x54
   18080:	ldr	r2, [sp, #80]	; 0x50
   18084:	mov	r7, #2
   18088:	mov	r0, #0
   1808c:	ldr	r1, [fp, #12]
   18090:	tst	r2, #1
   18094:	mov	r2, r7
   18098:	mov	r3, lr
   1809c:	str	r0, [sp, #8]
   180a0:	ldr	r0, [sp, #68]	; 0x44
   180a4:	movwne	r2, #4
   180a8:	cmp	r7, #2
   180ac:	movne	r2, r7
   180b0:	str	r2, [sp]
   180b4:	mov	r2, ip
   180b8:	bic	r1, r1, #2
   180bc:	str	r0, [sp, #12]
   180c0:	ldr	r0, [sp, #72]	; 0x48
   180c4:	str	r1, [sp, #4]
   180c8:	mov	r1, sl
   180cc:	str	r0, [sp, #16]
   180d0:	mov	r0, r6
   180d4:	bl	16e3c <__assert_fail@plt+0x597c>
   180d8:	mov	r9, r0
   180dc:	mov	r0, r9
   180e0:	sub	sp, fp, #28
   180e4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   180e8:	mov	r0, #5
   180ec:	ldr	r1, [sp, #48]	; 0x30
   180f0:	ldr	r2, [fp, #-84]	; 0xffffffac
   180f4:	ldr	r3, [sp, #84]	; 0x54
   180f8:	str	r0, [sp]
   180fc:	ldr	r0, [fp, #12]
   18100:	str	r0, [sp, #4]
   18104:	ldr	r0, [fp, #16]
   18108:	str	r0, [sp, #8]
   1810c:	ldr	r0, [sp, #68]	; 0x44
   18110:	str	r0, [sp, #12]
   18114:	ldr	r0, [sp, #72]	; 0x48
   18118:	str	r0, [sp, #16]
   1811c:	ldr	r0, [sp, #76]	; 0x4c
   18120:	b	180d4 <__assert_fail@plt+0x6c14>
   18124:	mov	r0, #0
   18128:	str	r0, [fp, #-72]	; 0xffffffb8
   1812c:	ldr	r1, [sp, #92]	; 0x5c
   18130:	cmp	r1, #0
   18134:	beq	18174 <__assert_fail@plt+0x6cb4>
   18138:	ldr	r0, [fp, #-72]	; 0xffffffb8
   1813c:	ldr	r2, [sp, #76]	; 0x4c
   18140:	tst	r0, #1
   18144:	bne	18178 <__assert_fail@plt+0x6cb8>
   18148:	ldrb	r0, [r1]
   1814c:	cmp	r0, #0
   18150:	beq	18178 <__assert_fail@plt+0x6cb8>
   18154:	add	r1, r1, #1
   18158:	cmp	r9, sl
   1815c:	strbcc	r0, [r2, r9]
   18160:	add	r9, r9, #1
   18164:	ldrb	r0, [r1], #1
   18168:	cmp	r0, #0
   1816c:	bne	18158 <__assert_fail@plt+0x6c98>
   18170:	b	18178 <__assert_fail@plt+0x6cb8>
   18174:	ldr	r2, [sp, #76]	; 0x4c
   18178:	cmp	r9, sl
   1817c:	movcc	r0, #0
   18180:	strbcc	r0, [r2, r9]
   18184:	mov	r0, r9
   18188:	sub	sp, fp, #28
   1818c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   18190:	mov	r2, #1
   18194:	b	18060 <__assert_fail@plt+0x6ba0>
   18198:	ldr	r2, [sp, #80]	; 0x50
   1819c:	mov	r7, #5
   181a0:	b	18088 <__assert_fail@plt+0x6bc8>
   181a4:	bl	11478 <abort@plt>
   181a8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   181ac:	add	fp, sp, #28
   181b0:	sub	sp, sp, #28
   181b4:	movw	r5, #53688	; 0xd1b8
   181b8:	cmp	r2, #0
   181bc:	mov	r4, r1
   181c0:	mov	r7, r0
   181c4:	str	r0, [sp, #20]
   181c8:	movt	r5, #2
   181cc:	movne	r5, r2
   181d0:	bl	1137c <__errno_location@plt>
   181d4:	mov	sl, r0
   181d8:	ldm	r5, {r0, r1}
   181dc:	ldr	r2, [r5, #40]	; 0x28
   181e0:	ldr	r3, [r5, #44]	; 0x2c
   181e4:	add	r9, r5, #8
   181e8:	ldr	r6, [sl]
   181ec:	orr	r8, r1, #1
   181f0:	mov	r1, #0
   181f4:	str	r6, [sp, #24]
   181f8:	stm	sp, {r0, r8, r9}
   181fc:	str	r2, [sp, #12]
   18200:	str	r3, [sp, #16]
   18204:	mov	r0, #0
   18208:	mov	r2, r7
   1820c:	mov	r3, r4
   18210:	mov	r6, r4
   18214:	bl	16e3c <__assert_fail@plt+0x597c>
   18218:	add	r7, r0, #1
   1821c:	mov	r0, r7
   18220:	bl	19320 <__assert_fail@plt+0x7e60>
   18224:	mov	r4, r0
   18228:	ldr	r0, [r5]
   1822c:	ldr	r2, [r5, #44]	; 0x2c
   18230:	ldr	r1, [r5, #40]	; 0x28
   18234:	mov	r3, r6
   18238:	stm	sp, {r0, r8, r9}
   1823c:	str	r2, [sp, #16]
   18240:	str	r1, [sp, #12]
   18244:	mov	r0, r4
   18248:	mov	r1, r7
   1824c:	ldr	r2, [sp, #20]
   18250:	bl	16e3c <__assert_fail@plt+0x597c>
   18254:	ldr	r0, [sp, #24]
   18258:	str	r0, [sl]
   1825c:	mov	r0, r4
   18260:	sub	sp, fp, #28
   18264:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   18268:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1826c:	add	fp, sp, #28
   18270:	sub	sp, sp, #36	; 0x24
   18274:	movw	r8, #53688	; 0xd1b8
   18278:	cmp	r3, #0
   1827c:	mov	r4, r2
   18280:	str	r2, [sp, #24]
   18284:	mov	r5, r1
   18288:	mov	r6, r0
   1828c:	str	r0, [sp, #20]
   18290:	movt	r8, #2
   18294:	movne	r8, r3
   18298:	bl	1137c <__errno_location@plt>
   1829c:	str	r0, [sp, #28]
   182a0:	cmp	r4, #0
   182a4:	add	sl, r8, #8
   182a8:	ldm	r8, {r3, r9}
   182ac:	ldr	r7, [r0]
   182b0:	ldr	r1, [r8, #40]	; 0x28
   182b4:	ldr	r2, [r8, #44]	; 0x2c
   182b8:	mov	r0, #0
   182bc:	orreq	r9, r9, #1
   182c0:	str	r7, [sp, #32]
   182c4:	mov	r7, r5
   182c8:	stm	sp, {r3, r9, sl}
   182cc:	str	r1, [sp, #12]
   182d0:	str	r2, [sp, #16]
   182d4:	mov	r1, #0
   182d8:	mov	r2, r6
   182dc:	mov	r3, r5
   182e0:	bl	16e3c <__assert_fail@plt+0x597c>
   182e4:	add	r4, r0, #1
   182e8:	mov	r5, r0
   182ec:	mov	r0, r4
   182f0:	bl	19320 <__assert_fail@plt+0x7e60>
   182f4:	mov	r6, r0
   182f8:	ldr	r0, [r8]
   182fc:	ldr	r2, [r8, #44]	; 0x2c
   18300:	ldr	r1, [r8, #40]	; 0x28
   18304:	mov	r3, r7
   18308:	stm	sp, {r0, r9, sl}
   1830c:	str	r2, [sp, #16]
   18310:	str	r1, [sp, #12]
   18314:	mov	r0, r6
   18318:	mov	r1, r4
   1831c:	ldr	r2, [sp, #20]
   18320:	bl	16e3c <__assert_fail@plt+0x597c>
   18324:	ldr	r0, [sp, #24]
   18328:	ldr	r1, [sp, #32]
   1832c:	ldr	r2, [sp, #28]
   18330:	cmp	r0, #0
   18334:	str	r1, [r2]
   18338:	strne	r5, [r0]
   1833c:	mov	r0, r6
   18340:	sub	sp, fp, #28
   18344:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   18348:	push	{r4, r5, r6, r7, fp, lr}
   1834c:	add	fp, sp, #16
   18350:	movw	r4, #53600	; 0xd160
   18354:	movt	r4, #2
   18358:	ldrd	r6, [r4]
   1835c:	cmp	r7, #2
   18360:	blt	1838c <__assert_fail@plt+0x6ecc>
   18364:	add	r5, r6, #12
   18368:	mov	r7, #0
   1836c:	ldr	r0, [r5, r7, lsl #3]
   18370:	bl	12e98 <__assert_fail@plt+0x19d8>
   18374:	ldr	r1, [r4, #4]
   18378:	add	r2, r7, #2
   1837c:	add	r0, r7, #1
   18380:	mov	r7, r0
   18384:	cmp	r2, r1
   18388:	blt	1836c <__assert_fail@plt+0x6eac>
   1838c:	ldr	r0, [r6, #4]
   18390:	movw	r5, #53736	; 0xd1e8
   18394:	movt	r5, #2
   18398:	cmp	r0, r5
   1839c:	beq	183b0 <__assert_fail@plt+0x6ef0>
   183a0:	bl	12e98 <__assert_fail@plt+0x19d8>
   183a4:	mov	r0, #256	; 0x100
   183a8:	str	r0, [r4, #8]
   183ac:	str	r5, [r4, #12]
   183b0:	add	r5, r4, #8
   183b4:	cmp	r6, r5
   183b8:	beq	183c8 <__assert_fail@plt+0x6f08>
   183bc:	mov	r0, r6
   183c0:	bl	12e98 <__assert_fail@plt+0x19d8>
   183c4:	str	r5, [r4]
   183c8:	mov	r0, #1
   183cc:	str	r0, [r4, #4]
   183d0:	pop	{r4, r5, r6, r7, fp, pc}
   183d4:	movw	r3, #53688	; 0xd1b8
   183d8:	mvn	r2, #0
   183dc:	movt	r3, #2
   183e0:	b	183e4 <__assert_fail@plt+0x6f24>
   183e4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   183e8:	add	fp, sp, #28
   183ec:	sub	sp, sp, #44	; 0x2c
   183f0:	mov	r7, r3
   183f4:	str	r2, [sp, #36]	; 0x24
   183f8:	str	r1, [sp, #32]
   183fc:	mov	r5, r0
   18400:	bl	1137c <__errno_location@plt>
   18404:	cmp	r5, #0
   18408:	blt	1856c <__assert_fail@plt+0x70ac>
   1840c:	cmn	r5, #-2147483647	; 0x80000001
   18410:	beq	1856c <__assert_fail@plt+0x70ac>
   18414:	movw	r8, #53600	; 0xd160
   18418:	mov	r4, r0
   1841c:	movt	r8, #2
   18420:	ldr	r6, [r8]
   18424:	ldr	r1, [r8, #4]
   18428:	ldr	r0, [r0]
   1842c:	str	r4, [sp, #28]
   18430:	cmp	r1, r5
   18434:	str	r0, [sp, #24]
   18438:	ble	18444 <__assert_fail@plt+0x6f84>
   1843c:	mov	sl, r6
   18440:	b	184a8 <__assert_fail@plt+0x6fe8>
   18444:	mov	r0, #8
   18448:	add	r9, r8, #8
   1844c:	add	r2, r5, #1
   18450:	str	r1, [fp, #-32]	; 0xffffffe0
   18454:	mvn	r3, #-2147483648	; 0x80000000
   18458:	str	r0, [sp]
   1845c:	subs	r0, r6, r9
   18460:	sub	r2, r2, r1
   18464:	sub	r1, fp, #32
   18468:	movne	r0, r6
   1846c:	bl	19520 <__assert_fail@plt+0x8060>
   18470:	str	r0, [r8]
   18474:	cmp	r6, r9
   18478:	mov	sl, r0
   1847c:	ldrdeq	r0, [r8, #8]
   18480:	stmeq	sl, {r0, r1}
   18484:	ldr	r1, [r8, #4]
   18488:	ldr	r2, [fp, #-32]	; 0xffffffe0
   1848c:	add	r0, sl, r1, lsl #3
   18490:	sub	r1, r2, r1
   18494:	lsl	r2, r1, #3
   18498:	mov	r1, #0
   1849c:	bl	11394 <memset@plt>
   184a0:	ldr	r0, [fp, #-32]	; 0xffffffe0
   184a4:	str	r0, [r8, #4]
   184a8:	mov	r9, sl
   184ac:	ldr	r6, [r9, r5, lsl #3]!
   184b0:	ldr	r4, [r9, #4]!
   184b4:	ldm	r7, {r0, r1}
   184b8:	ldr	r2, [r7, #40]	; 0x28
   184bc:	ldr	r3, [r7, #44]	; 0x2c
   184c0:	orr	r8, r1, #1
   184c4:	add	r1, r7, #8
   184c8:	stm	sp, {r0, r8}
   184cc:	add	r0, sp, #8
   184d0:	str	r1, [sp, #20]
   184d4:	stm	r0, {r1, r2, r3}
   184d8:	mov	r0, r4
   184dc:	mov	r1, r6
   184e0:	ldr	r2, [sp, #32]
   184e4:	ldr	r3, [sp, #36]	; 0x24
   184e8:	bl	16e3c <__assert_fail@plt+0x597c>
   184ec:	cmp	r6, r0
   184f0:	bhi	18554 <__assert_fail@plt+0x7094>
   184f4:	add	r6, r0, #1
   184f8:	movw	r0, #53736	; 0xd1e8
   184fc:	movt	r0, #2
   18500:	str	r6, [sl, r5, lsl #3]
   18504:	cmp	r4, r0
   18508:	beq	18514 <__assert_fail@plt+0x7054>
   1850c:	mov	r0, r4
   18510:	bl	12e98 <__assert_fail@plt+0x19d8>
   18514:	mov	r0, r6
   18518:	bl	19320 <__assert_fail@plt+0x7e60>
   1851c:	str	r0, [r9]
   18520:	mov	r4, r0
   18524:	add	r3, sp, #8
   18528:	ldr	r0, [r7]
   1852c:	ldr	r1, [r7, #40]	; 0x28
   18530:	ldr	r2, [r7, #44]	; 0x2c
   18534:	stm	sp, {r0, r8}
   18538:	ldr	r0, [sp, #20]
   1853c:	stm	r3, {r0, r1, r2}
   18540:	mov	r0, r4
   18544:	mov	r1, r6
   18548:	ldr	r2, [sp, #32]
   1854c:	ldr	r3, [sp, #36]	; 0x24
   18550:	bl	16e3c <__assert_fail@plt+0x597c>
   18554:	ldr	r1, [sp, #24]
   18558:	ldr	r0, [sp, #28]
   1855c:	str	r1, [r0]
   18560:	mov	r0, r4
   18564:	sub	sp, fp, #28
   18568:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1856c:	bl	11478 <abort@plt>
   18570:	movw	r3, #53688	; 0xd1b8
   18574:	movt	r3, #2
   18578:	b	183e4 <__assert_fail@plt+0x6f24>
   1857c:	movw	r3, #53688	; 0xd1b8
   18580:	mov	r1, r0
   18584:	mov	r0, #0
   18588:	mvn	r2, #0
   1858c:	movt	r3, #2
   18590:	b	183e4 <__assert_fail@plt+0x6f24>
   18594:	movw	r3, #53688	; 0xd1b8
   18598:	mov	r2, r1
   1859c:	mov	r1, r0
   185a0:	mov	r0, #0
   185a4:	movt	r3, #2
   185a8:	b	183e4 <__assert_fail@plt+0x6f24>
   185ac:	push	{fp, lr}
   185b0:	mov	fp, sp
   185b4:	sub	sp, sp, #48	; 0x30
   185b8:	vmov.i32	q8, #0	; 0x00000000
   185bc:	mov	ip, #32
   185c0:	mov	r3, sp
   185c4:	mov	lr, r2
   185c8:	cmp	r1, #10
   185cc:	add	r2, r3, #16
   185d0:	vst1.64	{d16-d17}, [r3], ip
   185d4:	vst1.64	{d16-d17}, [r3]
   185d8:	vst1.64	{d16-d17}, [r2]
   185dc:	beq	185fc <__assert_fail@plt+0x713c>
   185e0:	str	r1, [sp]
   185e4:	mov	r3, sp
   185e8:	mov	r1, lr
   185ec:	mvn	r2, #0
   185f0:	bl	183e4 <__assert_fail@plt+0x6f24>
   185f4:	mov	sp, fp
   185f8:	pop	{fp, pc}
   185fc:	bl	11478 <abort@plt>
   18600:	push	{r4, sl, fp, lr}
   18604:	add	fp, sp, #8
   18608:	sub	sp, sp, #48	; 0x30
   1860c:	mov	ip, r3
   18610:	mov	r3, sp
   18614:	vmov.i32	q8, #0	; 0x00000000
   18618:	mov	lr, #32
   1861c:	cmp	r1, #10
   18620:	add	r4, r3, #16
   18624:	vst1.64	{d16-d17}, [r3], lr
   18628:	vst1.64	{d16-d17}, [r3]
   1862c:	vst1.64	{d16-d17}, [r4]
   18630:	beq	18650 <__assert_fail@plt+0x7190>
   18634:	str	r1, [sp]
   18638:	mov	r1, r2
   1863c:	mov	r3, sp
   18640:	mov	r2, ip
   18644:	bl	183e4 <__assert_fail@plt+0x6f24>
   18648:	sub	sp, fp, #8
   1864c:	pop	{r4, sl, fp, pc}
   18650:	bl	11478 <abort@plt>
   18654:	push	{fp, lr}
   18658:	mov	fp, sp
   1865c:	sub	sp, sp, #48	; 0x30
   18660:	mov	r3, sp
   18664:	vmov.i32	q8, #0	; 0x00000000
   18668:	mov	ip, #32
   1866c:	cmp	r0, #10
   18670:	add	r2, r3, #16
   18674:	vst1.64	{d16-d17}, [r3], ip
   18678:	vst1.64	{d16-d17}, [r3]
   1867c:	vst1.64	{d16-d17}, [r2]
   18680:	beq	186a0 <__assert_fail@plt+0x71e0>
   18684:	str	r0, [sp]
   18688:	mov	r3, sp
   1868c:	mov	r0, #0
   18690:	mvn	r2, #0
   18694:	bl	183e4 <__assert_fail@plt+0x6f24>
   18698:	mov	sp, fp
   1869c:	pop	{fp, pc}
   186a0:	bl	11478 <abort@plt>
   186a4:	push	{fp, lr}
   186a8:	mov	fp, sp
   186ac:	sub	sp, sp, #48	; 0x30
   186b0:	mov	r3, sp
   186b4:	vmov.i32	q8, #0	; 0x00000000
   186b8:	mov	ip, #32
   186bc:	cmp	r0, #10
   186c0:	add	lr, r3, #16
   186c4:	vst1.64	{d16-d17}, [r3], ip
   186c8:	vst1.64	{d16-d17}, [r3]
   186cc:	vst1.64	{d16-d17}, [lr]
   186d0:	beq	186ec <__assert_fail@plt+0x722c>
   186d4:	str	r0, [sp]
   186d8:	mov	r3, sp
   186dc:	mov	r0, #0
   186e0:	bl	183e4 <__assert_fail@plt+0x6f24>
   186e4:	mov	sp, fp
   186e8:	pop	{fp, pc}
   186ec:	bl	11478 <abort@plt>
   186f0:	push	{r4, sl, fp, lr}
   186f4:	add	fp, sp, #8
   186f8:	sub	sp, sp, #48	; 0x30
   186fc:	mov	lr, r0
   18700:	movw	r0, #53688	; 0xd1b8
   18704:	mov	r3, #32
   18708:	mov	ip, r1
   1870c:	mov	r4, #1
   18710:	movt	r0, #2
   18714:	add	r1, r0, #16
   18718:	vld1.64	{d16-d17}, [r0], r3
   1871c:	mov	r3, sp
   18720:	vld1.64	{d18-d19}, [r1]
   18724:	add	r1, r3, #16
   18728:	vld1.64	{d20-d21}, [r0]
   1872c:	add	r0, r3, #32
   18730:	vst1.64	{d18-d19}, [r1]
   18734:	mov	r1, r3
   18738:	vst1.64	{d20-d21}, [r0]
   1873c:	mov	r0, #28
   18740:	and	r0, r0, r2, lsr #3
   18744:	and	r2, r2, #31
   18748:	vst1.64	{d16-d17}, [r1], r0
   1874c:	ldr	r0, [r1, #8]
   18750:	bic	r4, r4, r0, lsr r2
   18754:	eor	r0, r0, r4, lsl r2
   18758:	mov	r2, ip
   1875c:	str	r0, [r1, #8]
   18760:	mov	r0, #0
   18764:	mov	r1, lr
   18768:	bl	183e4 <__assert_fail@plt+0x6f24>
   1876c:	sub	sp, fp, #8
   18770:	pop	{r4, sl, fp, pc}
   18774:	push	{fp, lr}
   18778:	mov	fp, sp
   1877c:	sub	sp, sp, #48	; 0x30
   18780:	mov	ip, r0
   18784:	movw	r0, #53688	; 0xd1b8
   18788:	mov	r3, #32
   1878c:	movt	r0, #2
   18790:	add	r2, r0, #16
   18794:	vld1.64	{d16-d17}, [r0], r3
   18798:	mov	r3, sp
   1879c:	vld1.64	{d18-d19}, [r2]
   187a0:	add	r2, r3, #16
   187a4:	vld1.64	{d20-d21}, [r0]
   187a8:	add	r0, r3, #32
   187ac:	vst1.64	{d18-d19}, [r2]
   187b0:	mov	r2, r3
   187b4:	vst1.64	{d20-d21}, [r0]
   187b8:	mov	r0, #28
   187bc:	and	r0, r0, r1, lsr #3
   187c0:	and	r1, r1, #31
   187c4:	vst1.64	{d16-d17}, [r2], r0
   187c8:	mov	r0, #1
   187cc:	ldr	lr, [r2, #8]
   187d0:	bic	r0, r0, lr, lsr r1
   187d4:	eor	r0, lr, r0, lsl r1
   187d8:	mov	r1, ip
   187dc:	str	r0, [r2, #8]
   187e0:	mov	r0, #0
   187e4:	mvn	r2, #0
   187e8:	bl	183e4 <__assert_fail@plt+0x6f24>
   187ec:	mov	sp, fp
   187f0:	pop	{fp, pc}
   187f4:	push	{fp, lr}
   187f8:	mov	fp, sp
   187fc:	sub	sp, sp, #48	; 0x30
   18800:	movw	r2, #53688	; 0xd1b8
   18804:	mov	r3, #32
   18808:	mov	r1, r0
   1880c:	movt	r2, #2
   18810:	add	r0, r2, #16
   18814:	vld1.64	{d16-d17}, [r2], r3
   18818:	mov	r3, sp
   1881c:	vld1.64	{d18-d19}, [r0]
   18820:	add	r0, r3, #16
   18824:	vld1.64	{d20-d21}, [r2]
   18828:	mov	r2, r3
   1882c:	vst1.64	{d18-d19}, [r0]
   18830:	add	r0, r3, #32
   18834:	vst1.64	{d20-d21}, [r0]
   18838:	mov	r0, #12
   1883c:	vst1.64	{d16-d17}, [r2], r0
   18840:	ldr	r0, [r2]
   18844:	orr	r0, r0, #67108864	; 0x4000000
   18848:	str	r0, [r2]
   1884c:	mov	r0, #0
   18850:	mvn	r2, #0
   18854:	bl	183e4 <__assert_fail@plt+0x6f24>
   18858:	mov	sp, fp
   1885c:	pop	{fp, pc}
   18860:	push	{fp, lr}
   18864:	mov	fp, sp
   18868:	sub	sp, sp, #48	; 0x30
   1886c:	mov	ip, r1
   18870:	mov	r1, r0
   18874:	movw	r0, #53688	; 0xd1b8
   18878:	mov	r3, #32
   1887c:	movt	r0, #2
   18880:	add	r2, r0, #16
   18884:	vld1.64	{d16-d17}, [r0], r3
   18888:	mov	r3, sp
   1888c:	vld1.64	{d18-d19}, [r2]
   18890:	add	r2, r3, #16
   18894:	vld1.64	{d20-d21}, [r0]
   18898:	add	r0, r3, #32
   1889c:	vst1.64	{d18-d19}, [r2]
   188a0:	mov	r2, r3
   188a4:	vst1.64	{d20-d21}, [r0]
   188a8:	mov	r0, #12
   188ac:	vst1.64	{d16-d17}, [r2], r0
   188b0:	ldr	r0, [r2]
   188b4:	orr	r0, r0, #67108864	; 0x4000000
   188b8:	str	r0, [r2]
   188bc:	mov	r0, #0
   188c0:	mov	r2, ip
   188c4:	bl	183e4 <__assert_fail@plt+0x6f24>
   188c8:	mov	sp, fp
   188cc:	pop	{fp, pc}
   188d0:	push	{r4, sl, fp, lr}
   188d4:	add	fp, sp, #8
   188d8:	sub	sp, sp, #96	; 0x60
   188dc:	mov	ip, r2
   188e0:	mov	r2, sp
   188e4:	vmov.i32	q8, #0	; 0x00000000
   188e8:	mov	r4, #28
   188ec:	cmp	r1, #10
   188f0:	mov	r3, r2
   188f4:	add	lr, r2, #16
   188f8:	vst1.64	{d16-d17}, [r3], r4
   188fc:	vst1.64	{d16-d17}, [lr]
   18900:	vst1.32	{d16-d17}, [r3]
   18904:	beq	18954 <__assert_fail@plt+0x7494>
   18908:	vld1.64	{d16-d17}, [r2], r4
   1890c:	vld1.64	{d18-d19}, [lr]
   18910:	add	r3, sp, #48	; 0x30
   18914:	add	r4, r3, #4
   18918:	vld1.32	{d20-d21}, [r2]
   1891c:	add	r2, r3, #20
   18920:	vst1.32	{d16-d17}, [r4]
   18924:	vst1.32	{d18-d19}, [r2]
   18928:	add	r2, r3, #32
   1892c:	vst1.32	{d20-d21}, [r2]
   18930:	str	r1, [sp, #48]	; 0x30
   18934:	mvn	r2, #0
   18938:	ldr	r1, [sp, #60]	; 0x3c
   1893c:	orr	r1, r1, #67108864	; 0x4000000
   18940:	str	r1, [sp, #60]	; 0x3c
   18944:	mov	r1, ip
   18948:	bl	183e4 <__assert_fail@plt+0x6f24>
   1894c:	sub	sp, fp, #8
   18950:	pop	{r4, sl, fp, pc}
   18954:	bl	11478 <abort@plt>
   18958:	push	{r4, r5, fp, lr}
   1895c:	add	fp, sp, #8
   18960:	sub	sp, sp, #48	; 0x30
   18964:	mov	ip, r3
   18968:	movw	r3, #53688	; 0xd1b8
   1896c:	mov	lr, #32
   18970:	cmp	r1, #0
   18974:	mov	r5, sp
   18978:	movt	r3, #2
   1897c:	cmpne	r2, #0
   18980:	add	r4, r3, #16
   18984:	vld1.64	{d16-d17}, [r3], lr
   18988:	vld1.64	{d18-d19}, [r4]
   1898c:	add	r4, r5, #16
   18990:	vld1.64	{d20-d21}, [r3]
   18994:	vst1.64	{d16-d17}, [r5], lr
   18998:	mov	r3, #10
   1899c:	vst1.64	{d18-d19}, [r4]
   189a0:	vst1.64	{d20-d21}, [r5]
   189a4:	str	r3, [sp]
   189a8:	bne	189b0 <__assert_fail@plt+0x74f0>
   189ac:	bl	11478 <abort@plt>
   189b0:	str	r2, [sp, #44]	; 0x2c
   189b4:	str	r1, [sp, #40]	; 0x28
   189b8:	mov	r3, sp
   189bc:	mov	r1, ip
   189c0:	mvn	r2, #0
   189c4:	bl	183e4 <__assert_fail@plt+0x6f24>
   189c8:	sub	sp, fp, #8
   189cc:	pop	{r4, r5, fp, pc}
   189d0:	push	{r4, r5, fp, lr}
   189d4:	add	fp, sp, #8
   189d8:	sub	sp, sp, #48	; 0x30
   189dc:	mov	lr, r3
   189e0:	movw	r3, #53688	; 0xd1b8
   189e4:	mov	ip, #32
   189e8:	cmp	r1, #0
   189ec:	mov	r5, sp
   189f0:	movt	r3, #2
   189f4:	cmpne	r2, #0
   189f8:	add	r4, r3, #16
   189fc:	vld1.64	{d16-d17}, [r3], ip
   18a00:	vld1.64	{d18-d19}, [r4]
   18a04:	add	r4, r5, #16
   18a08:	vld1.64	{d20-d21}, [r3]
   18a0c:	vst1.64	{d16-d17}, [r5], ip
   18a10:	mov	r3, #10
   18a14:	vst1.64	{d18-d19}, [r4]
   18a18:	vst1.64	{d20-d21}, [r5]
   18a1c:	str	r3, [sp]
   18a20:	bne	18a28 <__assert_fail@plt+0x7568>
   18a24:	bl	11478 <abort@plt>
   18a28:	ldr	ip, [fp, #8]
   18a2c:	str	r2, [sp, #44]	; 0x2c
   18a30:	str	r1, [sp, #40]	; 0x28
   18a34:	mov	r3, sp
   18a38:	mov	r1, lr
   18a3c:	mov	r2, ip
   18a40:	bl	183e4 <__assert_fail@plt+0x6f24>
   18a44:	sub	sp, fp, #8
   18a48:	pop	{r4, r5, fp, pc}
   18a4c:	push	{r4, sl, fp, lr}
   18a50:	add	fp, sp, #8
   18a54:	sub	sp, sp, #48	; 0x30
   18a58:	mov	ip, r2
   18a5c:	movw	r2, #53688	; 0xd1b8
   18a60:	mov	lr, #32
   18a64:	cmp	r0, #0
   18a68:	mov	r4, sp
   18a6c:	movt	r2, #2
   18a70:	cmpne	r1, #0
   18a74:	add	r3, r2, #16
   18a78:	vld1.64	{d16-d17}, [r2], lr
   18a7c:	vld1.64	{d18-d19}, [r3]
   18a80:	add	r3, r4, #16
   18a84:	vld1.64	{d20-d21}, [r2]
   18a88:	vst1.64	{d16-d17}, [r4], lr
   18a8c:	mov	r2, #10
   18a90:	vst1.64	{d18-d19}, [r3]
   18a94:	vst1.64	{d20-d21}, [r4]
   18a98:	str	r2, [sp]
   18a9c:	bne	18aa4 <__assert_fail@plt+0x75e4>
   18aa0:	bl	11478 <abort@plt>
   18aa4:	str	r1, [sp, #44]	; 0x2c
   18aa8:	str	r0, [sp, #40]	; 0x28
   18aac:	mov	r3, sp
   18ab0:	mov	r0, #0
   18ab4:	mov	r1, ip
   18ab8:	mvn	r2, #0
   18abc:	bl	183e4 <__assert_fail@plt+0x6f24>
   18ac0:	sub	sp, fp, #8
   18ac4:	pop	{r4, sl, fp, pc}
   18ac8:	push	{r4, r5, fp, lr}
   18acc:	add	fp, sp, #8
   18ad0:	sub	sp, sp, #48	; 0x30
   18ad4:	mov	lr, r2
   18ad8:	movw	r2, #53688	; 0xd1b8
   18adc:	mov	ip, r3
   18ae0:	mov	r3, #32
   18ae4:	cmp	r0, #0
   18ae8:	mov	r5, sp
   18aec:	movt	r2, #2
   18af0:	cmpne	r1, #0
   18af4:	add	r4, r2, #16
   18af8:	vld1.64	{d16-d17}, [r2], r3
   18afc:	vld1.64	{d18-d19}, [r4]
   18b00:	add	r4, r5, #16
   18b04:	vld1.64	{d20-d21}, [r2]
   18b08:	vst1.64	{d16-d17}, [r5], r3
   18b0c:	mov	r2, #10
   18b10:	vst1.64	{d18-d19}, [r4]
   18b14:	vst1.64	{d20-d21}, [r5]
   18b18:	str	r2, [sp]
   18b1c:	bne	18b24 <__assert_fail@plt+0x7664>
   18b20:	bl	11478 <abort@plt>
   18b24:	str	r1, [sp, #44]	; 0x2c
   18b28:	str	r0, [sp, #40]	; 0x28
   18b2c:	mov	r3, sp
   18b30:	mov	r0, #0
   18b34:	mov	r1, lr
   18b38:	mov	r2, ip
   18b3c:	bl	183e4 <__assert_fail@plt+0x6f24>
   18b40:	sub	sp, fp, #8
   18b44:	pop	{r4, r5, fp, pc}
   18b48:	movw	r3, #53552	; 0xd130
   18b4c:	movt	r3, #2
   18b50:	b	183e4 <__assert_fail@plt+0x6f24>
   18b54:	movw	r3, #53552	; 0xd130
   18b58:	mov	r2, r1
   18b5c:	mov	r1, r0
   18b60:	mov	r0, #0
   18b64:	movt	r3, #2
   18b68:	b	183e4 <__assert_fail@plt+0x6f24>
   18b6c:	movw	r3, #53552	; 0xd130
   18b70:	mvn	r2, #0
   18b74:	movt	r3, #2
   18b78:	b	183e4 <__assert_fail@plt+0x6f24>
   18b7c:	movw	r3, #53552	; 0xd130
   18b80:	mov	r1, r0
   18b84:	mov	r0, #0
   18b88:	mvn	r2, #0
   18b8c:	movt	r3, #2
   18b90:	b	183e4 <__assert_fail@plt+0x6f24>
   18b94:	push	{r4, sl, fp, lr}
   18b98:	add	fp, sp, #8
   18b9c:	sub	sp, sp, #104	; 0x68
   18ba0:	movw	r1, #49807	; 0xc28f
   18ba4:	mov	r4, r0
   18ba8:	mov	r2, sp
   18bac:	mov	r0, #3
   18bb0:	movt	r1, #1
   18bb4:	bl	11490 <__lxstat64@plt>
   18bb8:	mov	r1, r0
   18bbc:	mov	r0, #0
   18bc0:	cmp	r1, #0
   18bc4:	beq	18bd0 <__assert_fail@plt+0x7710>
   18bc8:	sub	sp, fp, #8
   18bcc:	pop	{r4, sl, fp, pc}
   18bd0:	ldr	r0, [sp, #96]	; 0x60
   18bd4:	ldr	r1, [sp, #100]	; 0x64
   18bd8:	ldm	sp, {r2, r3}
   18bdc:	stm	r4, {r0, r1, r2, r3}
   18be0:	mov	r0, r4
   18be4:	sub	sp, fp, #8
   18be8:	pop	{r4, sl, fp, pc}
   18bec:	push	{r4, r5, r6, r7, fp, lr}
   18bf0:	add	fp, sp, #16
   18bf4:	mov	r4, r0
   18bf8:	cmp	r0, #2
   18bfc:	movhi	r0, r4
   18c00:	pophi	{r4, r5, r6, r7, fp, pc}
   18c04:	mov	r0, r4
   18c08:	bl	1acb8 <__assert_fail@plt+0x97f8>
   18c0c:	mov	r5, r0
   18c10:	bl	1137c <__errno_location@plt>
   18c14:	ldr	r7, [r0]
   18c18:	mov	r6, r0
   18c1c:	mov	r0, r4
   18c20:	bl	11484 <close@plt>
   18c24:	mov	r0, r5
   18c28:	str	r7, [r6]
   18c2c:	pop	{r4, r5, r6, r7, fp, pc}
   18c30:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   18c34:	add	fp, sp, #24
   18c38:	sub	sp, sp, #32
   18c3c:	ldr	r6, [fp, #12]
   18c40:	ldr	r7, [fp, #8]
   18c44:	mov	r4, r2
   18c48:	mov	r8, r0
   18c4c:	cmp	r1, #0
   18c50:	beq	18c78 <__assert_fail@plt+0x77b8>
   18c54:	movw	r2, #49072	; 0xbfb0
   18c58:	mov	r5, r1
   18c5c:	str	r3, [sp, #4]
   18c60:	str	r4, [sp]
   18c64:	mov	r0, r8
   18c68:	mov	r1, #1
   18c6c:	movt	r2, #1
   18c70:	mov	r3, r5
   18c74:	b	18c90 <__assert_fail@plt+0x77d0>
   18c78:	movw	r2, #49084	; 0xbfbc
   18c7c:	str	r3, [sp]
   18c80:	mov	r0, r8
   18c84:	mov	r1, #1
   18c88:	mov	r3, r4
   18c8c:	movt	r2, #1
   18c90:	bl	113b8 <__fprintf_chk@plt>
   18c94:	movw	r1, #49091	; 0xbfc3
   18c98:	mov	r0, #0
   18c9c:	mov	r2, #5
   18ca0:	movt	r1, #1
   18ca4:	bl	1125c <dcgettext@plt>
   18ca8:	movw	r2, #49809	; 0xc291
   18cac:	mov	r3, r0
   18cb0:	movw	r0, #2022	; 0x7e6
   18cb4:	mov	r1, #1
   18cb8:	str	r0, [sp]
   18cbc:	movt	r2, #1
   18cc0:	mov	r0, r8
   18cc4:	bl	113b8 <__fprintf_chk@plt>
   18cc8:	movw	r4, #46563	; 0xb5e3
   18ccc:	mov	r1, r8
   18cd0:	movt	r4, #1
   18cd4:	mov	r0, r4
   18cd8:	bl	111c0 <fputs_unlocked@plt>
   18cdc:	movw	r1, #49095	; 0xbfc7
   18ce0:	mov	r0, #0
   18ce4:	mov	r2, #5
   18ce8:	movt	r1, #1
   18cec:	bl	1125c <dcgettext@plt>
   18cf0:	movw	r3, #49266	; 0xc072
   18cf4:	mov	r2, r0
   18cf8:	mov	r0, r8
   18cfc:	mov	r1, #1
   18d00:	movt	r3, #1
   18d04:	bl	113b8 <__fprintf_chk@plt>
   18d08:	mov	r0, r4
   18d0c:	mov	r1, r8
   18d10:	bl	111c0 <fputs_unlocked@plt>
   18d14:	cmp	r6, #9
   18d18:	bhi	18d54 <__assert_fail@plt+0x7894>
   18d1c:	add	r0, pc, #0
   18d20:	ldr	pc, [r0, r6, lsl #2]
   18d24:	andeq	r8, r1, ip, asr #26
   18d28:	andeq	r8, r1, r0, ror #26
   18d2c:	muleq	r1, r0, sp
   18d30:			; <UNDEFINED> instruction: 0x00018db8
   18d34:	andeq	r8, r1, r0, ror #27
   18d38:	andeq	r8, r1, r8, lsl #28
   18d3c:	andeq	r8, r1, r0, lsr lr
   18d40:	andeq	r8, r1, r8, ror #28
   18d44:	andeq	r8, r1, r0, lsl pc
   18d48:			; <UNDEFINED> instruction: 0x00018eb8
   18d4c:	sub	sp, fp, #24
   18d50:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   18d54:	movw	r1, #49619	; 0xc1d3
   18d58:	movt	r1, #1
   18d5c:	b	18ec0 <__assert_fail@plt+0x7a00>
   18d60:	movw	r1, #49300	; 0xc094
   18d64:	mov	r0, #0
   18d68:	mov	r2, #5
   18d6c:	movt	r1, #1
   18d70:	bl	1125c <dcgettext@plt>
   18d74:	ldr	r3, [r7]
   18d78:	mov	r2, r0
   18d7c:	mov	r0, r8
   18d80:	mov	r1, #1
   18d84:	sub	sp, fp, #24
   18d88:	pop	{r4, r5, r6, r7, r8, sl, fp, lr}
   18d8c:	b	113b8 <__fprintf_chk@plt>
   18d90:	movw	r1, #49316	; 0xc0a4
   18d94:	mov	r0, #0
   18d98:	mov	r2, #5
   18d9c:	movt	r1, #1
   18da0:	bl	1125c <dcgettext@plt>
   18da4:	mov	r2, r0
   18da8:	ldr	r3, [r7]
   18dac:	ldr	r0, [r7, #4]
   18db0:	str	r0, [sp]
   18db4:	b	18ea4 <__assert_fail@plt+0x79e4>
   18db8:	movw	r1, #49339	; 0xc0bb
   18dbc:	mov	r0, #0
   18dc0:	mov	r2, #5
   18dc4:	movt	r1, #1
   18dc8:	bl	1125c <dcgettext@plt>
   18dcc:	ldr	r3, [r7]
   18dd0:	mov	r2, r0
   18dd4:	ldmib	r7, {r0, r1}
   18dd8:	stm	sp, {r0, r1}
   18ddc:	b	18ea4 <__assert_fail@plt+0x79e4>
   18de0:	movw	r1, #49367	; 0xc0d7
   18de4:	mov	r0, #0
   18de8:	mov	r2, #5
   18dec:	movt	r1, #1
   18df0:	bl	1125c <dcgettext@plt>
   18df4:	ldr	r3, [r7]
   18df8:	mov	r2, r0
   18dfc:	ldmib	r7, {r0, r1, r7}
   18e00:	stm	sp, {r0, r1, r7}
   18e04:	b	18ea4 <__assert_fail@plt+0x79e4>
   18e08:	movw	r1, #49399	; 0xc0f7
   18e0c:	mov	r0, #0
   18e10:	mov	r2, #5
   18e14:	movt	r1, #1
   18e18:	bl	1125c <dcgettext@plt>
   18e1c:	ldr	r3, [r7]
   18e20:	mov	r2, r0
   18e24:	ldmib	r7, {r0, r1, r6, r7}
   18e28:	stm	sp, {r0, r1, r6, r7}
   18e2c:	b	18ea4 <__assert_fail@plt+0x79e4>
   18e30:	movw	r1, #49435	; 0xc11b
   18e34:	mov	r0, #0
   18e38:	mov	r2, #5
   18e3c:	movt	r1, #1
   18e40:	bl	1125c <dcgettext@plt>
   18e44:	ldr	r3, [r7]
   18e48:	mov	r2, r0
   18e4c:	ldmib	r7, {r0, r1, r6}
   18e50:	ldr	r5, [r7, #16]
   18e54:	ldr	r7, [r7, #20]
   18e58:	stm	sp, {r0, r1, r6}
   18e5c:	str	r5, [sp, #12]
   18e60:	str	r7, [sp, #16]
   18e64:	b	18ea4 <__assert_fail@plt+0x79e4>
   18e68:	movw	r1, #49475	; 0xc143
   18e6c:	mov	r0, #0
   18e70:	mov	r2, #5
   18e74:	movt	r1, #1
   18e78:	bl	1125c <dcgettext@plt>
   18e7c:	ldr	r3, [r7]
   18e80:	mov	r2, r0
   18e84:	ldmib	r7, {r0, r1, r6}
   18e88:	ldr	r5, [r7, #16]
   18e8c:	ldr	r4, [r7, #20]
   18e90:	ldr	r7, [r7, #24]
   18e94:	stm	sp, {r0, r1, r6}
   18e98:	str	r5, [sp, #12]
   18e9c:	str	r4, [sp, #16]
   18ea0:	str	r7, [sp, #20]
   18ea4:	mov	r0, r8
   18ea8:	mov	r1, #1
   18eac:	bl	113b8 <__fprintf_chk@plt>
   18eb0:	sub	sp, fp, #24
   18eb4:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   18eb8:	movw	r1, #49567	; 0xc19f
   18ebc:	movt	r1, #1
   18ec0:	mov	r0, #0
   18ec4:	mov	r2, #5
   18ec8:	bl	1125c <dcgettext@plt>
   18ecc:	mov	ip, r0
   18ed0:	ldr	r3, [r7]
   18ed4:	ldr	r0, [r7, #4]
   18ed8:	ldr	r1, [r7, #8]
   18edc:	ldr	r6, [r7, #12]
   18ee0:	ldr	r5, [r7, #16]
   18ee4:	ldr	r4, [r7, #20]
   18ee8:	ldr	r2, [r7, #24]
   18eec:	ldr	lr, [r7, #28]
   18ef0:	ldr	r7, [r7, #32]
   18ef4:	stm	sp, {r0, r1, r6}
   18ef8:	str	r5, [sp, #12]
   18efc:	str	r4, [sp, #16]
   18f00:	str	r2, [sp, #20]
   18f04:	str	lr, [sp, #24]
   18f08:	str	r7, [sp, #28]
   18f0c:	b	18f54 <__assert_fail@plt+0x7a94>
   18f10:	movw	r1, #49519	; 0xc16f
   18f14:	mov	r0, #0
   18f18:	mov	r2, #5
   18f1c:	movt	r1, #1
   18f20:	bl	1125c <dcgettext@plt>
   18f24:	mov	ip, r0
   18f28:	ldr	r3, [r7]
   18f2c:	ldmib	r7, {r0, r1, r6}
   18f30:	ldr	r5, [r7, #16]
   18f34:	ldr	r4, [r7, #20]
   18f38:	ldr	r2, [r7, #24]
   18f3c:	ldr	r7, [r7, #28]
   18f40:	stm	sp, {r0, r1, r6}
   18f44:	str	r5, [sp, #12]
   18f48:	str	r4, [sp, #16]
   18f4c:	str	r2, [sp, #20]
   18f50:	str	r7, [sp, #24]
   18f54:	mov	r0, r8
   18f58:	mov	r1, #1
   18f5c:	mov	r2, ip
   18f60:	bl	113b8 <__fprintf_chk@plt>
   18f64:	sub	sp, fp, #24
   18f68:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   18f6c:	push	{r4, sl, fp, lr}
   18f70:	add	fp, sp, #8
   18f74:	sub	sp, sp, #8
   18f78:	ldr	ip, [fp, #8]
   18f7c:	mov	lr, #0
   18f80:	ldr	r4, [ip, lr, lsl #2]
   18f84:	add	lr, lr, #1
   18f88:	cmp	r4, #0
   18f8c:	bne	18f80 <__assert_fail@plt+0x7ac0>
   18f90:	sub	r4, lr, #1
   18f94:	str	ip, [sp]
   18f98:	str	r4, [sp, #4]
   18f9c:	bl	18c30 <__assert_fail@plt+0x7770>
   18fa0:	sub	sp, fp, #8
   18fa4:	pop	{r4, sl, fp, pc}
   18fa8:	push	{fp, lr}
   18fac:	mov	fp, sp
   18fb0:	sub	sp, sp, #48	; 0x30
   18fb4:	ldr	ip, [fp, #8]
   18fb8:	ldr	lr, [ip]
   18fbc:	cmp	lr, #0
   18fc0:	str	lr, [sp, #8]
   18fc4:	beq	19060 <__assert_fail@plt+0x7ba0>
   18fc8:	ldr	lr, [ip, #4]
   18fcc:	cmp	lr, #0
   18fd0:	str	lr, [sp, #12]
   18fd4:	beq	19068 <__assert_fail@plt+0x7ba8>
   18fd8:	ldr	lr, [ip, #8]
   18fdc:	cmp	lr, #0
   18fe0:	str	lr, [sp, #16]
   18fe4:	beq	19070 <__assert_fail@plt+0x7bb0>
   18fe8:	ldr	lr, [ip, #12]
   18fec:	cmp	lr, #0
   18ff0:	str	lr, [sp, #20]
   18ff4:	beq	19078 <__assert_fail@plt+0x7bb8>
   18ff8:	ldr	lr, [ip, #16]
   18ffc:	cmp	lr, #0
   19000:	str	lr, [sp, #24]
   19004:	beq	19080 <__assert_fail@plt+0x7bc0>
   19008:	ldr	lr, [ip, #20]
   1900c:	cmp	lr, #0
   19010:	str	lr, [sp, #28]
   19014:	beq	19088 <__assert_fail@plt+0x7bc8>
   19018:	ldr	lr, [ip, #24]
   1901c:	cmp	lr, #0
   19020:	str	lr, [sp, #32]
   19024:	beq	19090 <__assert_fail@plt+0x7bd0>
   19028:	ldr	lr, [ip, #28]
   1902c:	cmp	lr, #0
   19030:	str	lr, [sp, #36]	; 0x24
   19034:	beq	19098 <__assert_fail@plt+0x7bd8>
   19038:	ldr	lr, [ip, #32]
   1903c:	cmp	lr, #0
   19040:	str	lr, [sp, #40]	; 0x28
   19044:	beq	190a0 <__assert_fail@plt+0x7be0>
   19048:	ldr	lr, [ip, #36]	; 0x24
   1904c:	mov	ip, #10
   19050:	cmp	lr, #0
   19054:	str	lr, [sp, #44]	; 0x2c
   19058:	movweq	ip, #9
   1905c:	b	190a4 <__assert_fail@plt+0x7be4>
   19060:	mov	ip, #0
   19064:	b	190a4 <__assert_fail@plt+0x7be4>
   19068:	mov	ip, #1
   1906c:	b	190a4 <__assert_fail@plt+0x7be4>
   19070:	mov	ip, #2
   19074:	b	190a4 <__assert_fail@plt+0x7be4>
   19078:	mov	ip, #3
   1907c:	b	190a4 <__assert_fail@plt+0x7be4>
   19080:	mov	ip, #4
   19084:	b	190a4 <__assert_fail@plt+0x7be4>
   19088:	mov	ip, #5
   1908c:	b	190a4 <__assert_fail@plt+0x7be4>
   19090:	mov	ip, #6
   19094:	b	190a4 <__assert_fail@plt+0x7be4>
   19098:	mov	ip, #7
   1909c:	b	190a4 <__assert_fail@plt+0x7be4>
   190a0:	mov	ip, #8
   190a4:	add	lr, sp, #8
   190a8:	str	ip, [sp, #4]
   190ac:	str	lr, [sp]
   190b0:	bl	18c30 <__assert_fail@plt+0x7770>
   190b4:	mov	sp, fp
   190b8:	pop	{fp, pc}
   190bc:	push	{fp, lr}
   190c0:	mov	fp, sp
   190c4:	sub	sp, sp, #56	; 0x38
   190c8:	add	ip, fp, #8
   190cc:	str	ip, [sp, #12]
   190d0:	ldr	lr, [fp, #8]
   190d4:	cmp	lr, #0
   190d8:	str	lr, [sp, #16]
   190dc:	beq	19178 <__assert_fail@plt+0x7cb8>
   190e0:	ldr	lr, [ip, #4]
   190e4:	cmp	lr, #0
   190e8:	str	lr, [sp, #20]
   190ec:	beq	19180 <__assert_fail@plt+0x7cc0>
   190f0:	ldr	lr, [ip, #8]
   190f4:	cmp	lr, #0
   190f8:	str	lr, [sp, #24]
   190fc:	beq	19188 <__assert_fail@plt+0x7cc8>
   19100:	ldr	lr, [ip, #12]
   19104:	cmp	lr, #0
   19108:	str	lr, [sp, #28]
   1910c:	beq	19190 <__assert_fail@plt+0x7cd0>
   19110:	ldr	lr, [ip, #16]
   19114:	cmp	lr, #0
   19118:	str	lr, [sp, #32]
   1911c:	beq	19198 <__assert_fail@plt+0x7cd8>
   19120:	ldr	lr, [ip, #20]
   19124:	cmp	lr, #0
   19128:	str	lr, [sp, #36]	; 0x24
   1912c:	beq	191a0 <__assert_fail@plt+0x7ce0>
   19130:	ldr	lr, [ip, #24]
   19134:	cmp	lr, #0
   19138:	str	lr, [sp, #40]	; 0x28
   1913c:	beq	191a8 <__assert_fail@plt+0x7ce8>
   19140:	ldr	lr, [ip, #28]
   19144:	cmp	lr, #0
   19148:	str	lr, [sp, #44]	; 0x2c
   1914c:	beq	191b0 <__assert_fail@plt+0x7cf0>
   19150:	ldr	lr, [ip, #32]
   19154:	cmp	lr, #0
   19158:	str	lr, [sp, #48]	; 0x30
   1915c:	beq	191b8 <__assert_fail@plt+0x7cf8>
   19160:	ldr	lr, [ip, #36]	; 0x24
   19164:	mov	ip, #10
   19168:	cmp	lr, #0
   1916c:	str	lr, [sp, #52]	; 0x34
   19170:	movweq	ip, #9
   19174:	b	191bc <__assert_fail@plt+0x7cfc>
   19178:	mov	ip, #0
   1917c:	b	191bc <__assert_fail@plt+0x7cfc>
   19180:	mov	ip, #1
   19184:	b	191bc <__assert_fail@plt+0x7cfc>
   19188:	mov	ip, #2
   1918c:	b	191bc <__assert_fail@plt+0x7cfc>
   19190:	mov	ip, #3
   19194:	b	191bc <__assert_fail@plt+0x7cfc>
   19198:	mov	ip, #4
   1919c:	b	191bc <__assert_fail@plt+0x7cfc>
   191a0:	mov	ip, #5
   191a4:	b	191bc <__assert_fail@plt+0x7cfc>
   191a8:	mov	ip, #6
   191ac:	b	191bc <__assert_fail@plt+0x7cfc>
   191b0:	mov	ip, #7
   191b4:	b	191bc <__assert_fail@plt+0x7cfc>
   191b8:	mov	ip, #8
   191bc:	add	lr, sp, #16
   191c0:	str	ip, [sp, #4]
   191c4:	str	lr, [sp]
   191c8:	bl	18c30 <__assert_fail@plt+0x7770>
   191cc:	mov	sp, fp
   191d0:	pop	{fp, pc}
   191d4:	push	{fp, lr}
   191d8:	mov	fp, sp
   191dc:	movw	r0, #53636	; 0xd184
   191e0:	movt	r0, #2
   191e4:	ldr	r1, [r0]
   191e8:	movw	r0, #46563	; 0xb5e3
   191ec:	movt	r0, #1
   191f0:	bl	111c0 <fputs_unlocked@plt>
   191f4:	movw	r1, #49679	; 0xc20f
   191f8:	mov	r0, #0
   191fc:	mov	r2, #5
   19200:	movt	r1, #1
   19204:	bl	1125c <dcgettext@plt>
   19208:	movw	r2, #49699	; 0xc223
   1920c:	mov	r1, r0
   19210:	mov	r0, #1
   19214:	movt	r2, #1
   19218:	bl	113a0 <__printf_chk@plt>
   1921c:	movw	r1, #49721	; 0xc239
   19220:	mov	r0, #0
   19224:	mov	r2, #5
   19228:	movt	r1, #1
   1922c:	bl	1125c <dcgettext@plt>
   19230:	movw	r2, #46836	; 0xb6f4
   19234:	movw	r3, #47111	; 0xb807
   19238:	mov	r1, r0
   1923c:	mov	r0, #1
   19240:	movt	r2, #1
   19244:	movt	r3, #1
   19248:	bl	113a0 <__printf_chk@plt>
   1924c:	movw	r1, #49741	; 0xc24d
   19250:	mov	r0, #0
   19254:	mov	r2, #5
   19258:	movt	r1, #1
   1925c:	bl	1125c <dcgettext@plt>
   19260:	movw	r2, #49780	; 0xc274
   19264:	mov	r1, r0
   19268:	mov	r0, #1
   1926c:	movt	r2, #1
   19270:	pop	{fp, lr}
   19274:	b	113a0 <__printf_chk@plt>
   19278:	push	{r4, r5, r6, sl, fp, lr}
   1927c:	add	fp, sp, #16
   19280:	mov	r4, r2
   19284:	mov	r5, r1
   19288:	mov	r6, r0
   1928c:	bl	1ac7c <__assert_fail@plt+0x97bc>
   19290:	cmp	r0, #0
   19294:	popne	{r4, r5, r6, sl, fp, pc}
   19298:	cmp	r6, #0
   1929c:	beq	192b0 <__assert_fail@plt+0x7df0>
   192a0:	cmp	r5, #0
   192a4:	cmpne	r4, #0
   192a8:	bne	192b0 <__assert_fail@plt+0x7df0>
   192ac:	pop	{r4, r5, r6, sl, fp, pc}
   192b0:	bl	19850 <__assert_fail@plt+0x8390>
   192b4:	push	{r4, r5, r6, sl, fp, lr}
   192b8:	add	fp, sp, #16
   192bc:	mov	r4, r2
   192c0:	mov	r5, r1
   192c4:	mov	r6, r0
   192c8:	bl	1ac7c <__assert_fail@plt+0x97bc>
   192cc:	cmp	r0, #0
   192d0:	popne	{r4, r5, r6, sl, fp, pc}
   192d4:	cmp	r6, #0
   192d8:	beq	192ec <__assert_fail@plt+0x7e2c>
   192dc:	cmp	r5, #0
   192e0:	cmpne	r4, #0
   192e4:	bne	192ec <__assert_fail@plt+0x7e2c>
   192e8:	pop	{r4, r5, r6, sl, fp, pc}
   192ec:	bl	19850 <__assert_fail@plt+0x8390>
   192f0:	push	{fp, lr}
   192f4:	mov	fp, sp
   192f8:	bl	1a618 <__assert_fail@plt+0x9158>
   192fc:	cmp	r0, #0
   19300:	popne	{fp, pc}
   19304:	bl	19850 <__assert_fail@plt+0x8390>
   19308:	push	{fp, lr}
   1930c:	mov	fp, sp
   19310:	bl	1a618 <__assert_fail@plt+0x9158>
   19314:	cmp	r0, #0
   19318:	popne	{fp, pc}
   1931c:	bl	19850 <__assert_fail@plt+0x8390>
   19320:	push	{fp, lr}
   19324:	mov	fp, sp
   19328:	bl	1a618 <__assert_fail@plt+0x9158>
   1932c:	cmp	r0, #0
   19330:	popne	{fp, pc}
   19334:	bl	19850 <__assert_fail@plt+0x8390>
   19338:	push	{r4, r5, fp, lr}
   1933c:	add	fp, sp, #8
   19340:	mov	r4, r1
   19344:	mov	r5, r0
   19348:	bl	1a648 <__assert_fail@plt+0x9188>
   1934c:	cmp	r0, #0
   19350:	popne	{r4, r5, fp, pc}
   19354:	cmp	r5, #0
   19358:	beq	19368 <__assert_fail@plt+0x7ea8>
   1935c:	cmp	r4, #0
   19360:	bne	19368 <__assert_fail@plt+0x7ea8>
   19364:	pop	{r4, r5, fp, pc}
   19368:	bl	19850 <__assert_fail@plt+0x8390>
   1936c:	push	{fp, lr}
   19370:	mov	fp, sp
   19374:	cmp	r1, #0
   19378:	orreq	r1, r1, #1
   1937c:	bl	1a648 <__assert_fail@plt+0x9188>
   19380:	cmp	r0, #0
   19384:	popne	{fp, pc}
   19388:	bl	19850 <__assert_fail@plt+0x8390>
   1938c:	push	{fp, lr}
   19390:	mov	fp, sp
   19394:	clz	r3, r2
   19398:	lsr	ip, r3, #5
   1939c:	clz	r3, r1
   193a0:	lsr	r3, r3, #5
   193a4:	orrs	r3, r3, ip
   193a8:	movwne	r1, #1
   193ac:	movwne	r2, #1
   193b0:	bl	1ac7c <__assert_fail@plt+0x97bc>
   193b4:	cmp	r0, #0
   193b8:	popne	{fp, pc}
   193bc:	bl	19850 <__assert_fail@plt+0x8390>
   193c0:	push	{fp, lr}
   193c4:	mov	fp, sp
   193c8:	mov	r2, r1
   193cc:	mov	r1, r0
   193d0:	mov	r0, #0
   193d4:	bl	1ac7c <__assert_fail@plt+0x97bc>
   193d8:	cmp	r0, #0
   193dc:	popne	{fp, pc}
   193e0:	bl	19850 <__assert_fail@plt+0x8390>
   193e4:	push	{fp, lr}
   193e8:	mov	fp, sp
   193ec:	mov	r2, r1
   193f0:	mov	r1, r0
   193f4:	clz	r0, r2
   193f8:	clz	r3, r1
   193fc:	lsr	r0, r0, #5
   19400:	lsr	r3, r3, #5
   19404:	orrs	r0, r3, r0
   19408:	movwne	r1, #1
   1940c:	movwne	r2, #1
   19410:	mov	r0, #0
   19414:	bl	1ac7c <__assert_fail@plt+0x97bc>
   19418:	cmp	r0, #0
   1941c:	popne	{fp, pc}
   19420:	bl	19850 <__assert_fail@plt+0x8390>
   19424:	push	{r4, r5, r6, sl, fp, lr}
   19428:	add	fp, sp, #16
   1942c:	ldr	r5, [r1]
   19430:	mov	r4, r1
   19434:	mov	r6, r0
   19438:	cmp	r0, #0
   1943c:	beq	19454 <__assert_fail@plt+0x7f94>
   19440:	mov	r0, #1
   19444:	add	r0, r0, r5, lsr #1
   19448:	adds	r5, r5, r0
   1944c:	bcc	1945c <__assert_fail@plt+0x7f9c>
   19450:	b	19498 <__assert_fail@plt+0x7fd8>
   19454:	cmp	r5, #0
   19458:	movweq	r5, #64	; 0x40
   1945c:	mov	r0, r6
   19460:	mov	r1, r5
   19464:	mov	r2, #1
   19468:	bl	1ac7c <__assert_fail@plt+0x97bc>
   1946c:	cmp	r5, #0
   19470:	mov	r1, r5
   19474:	movwne	r1, #1
   19478:	cmp	r0, #0
   1947c:	bne	19490 <__assert_fail@plt+0x7fd0>
   19480:	clz	r2, r6
   19484:	lsr	r2, r2, #5
   19488:	orrs	r1, r2, r1
   1948c:	bne	19498 <__assert_fail@plt+0x7fd8>
   19490:	str	r5, [r4]
   19494:	pop	{r4, r5, r6, sl, fp, pc}
   19498:	bl	19850 <__assert_fail@plt+0x8390>
   1949c:	push	{r4, r5, r6, r7, fp, lr}
   194a0:	add	fp, sp, #16
   194a4:	ldr	r5, [r1]
   194a8:	mov	r6, r2
   194ac:	mov	r4, r1
   194b0:	mov	r7, r0
   194b4:	cmp	r0, #0
   194b8:	beq	194d0 <__assert_fail@plt+0x8010>
   194bc:	mov	r0, #1
   194c0:	add	r0, r0, r5, lsr #1
   194c4:	adds	r5, r5, r0
   194c8:	bcc	194e8 <__assert_fail@plt+0x8028>
   194cc:	b	1951c <__assert_fail@plt+0x805c>
   194d0:	cmp	r5, #0
   194d4:	bne	194e8 <__assert_fail@plt+0x8028>
   194d8:	mov	r0, #64	; 0x40
   194dc:	cmp	r6, #64	; 0x40
   194e0:	udiv	r5, r0, r6
   194e4:	addhi	r5, r5, #1
   194e8:	mov	r0, r7
   194ec:	mov	r1, r5
   194f0:	mov	r2, r6
   194f4:	bl	1ac7c <__assert_fail@plt+0x97bc>
   194f8:	cmp	r0, #0
   194fc:	bne	19514 <__assert_fail@plt+0x8054>
   19500:	cmp	r7, #0
   19504:	beq	1951c <__assert_fail@plt+0x805c>
   19508:	cmp	r6, #0
   1950c:	cmpne	r5, #0
   19510:	bne	1951c <__assert_fail@plt+0x805c>
   19514:	str	r5, [r4]
   19518:	pop	{r4, r5, r6, r7, fp, pc}
   1951c:	bl	19850 <__assert_fail@plt+0x8390>
   19520:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   19524:	add	fp, sp, #24
   19528:	mov	r8, r1
   1952c:	ldr	r1, [r1]
   19530:	mov	r5, r0
   19534:	add	r0, r1, r1, asr #1
   19538:	cmp	r0, r1
   1953c:	mvnvs	r0, #-2147483648	; 0x80000000
   19540:	cmp	r0, r3
   19544:	mov	r7, r0
   19548:	movgt	r7, r3
   1954c:	cmn	r3, #1
   19550:	movle	r7, r0
   19554:	ldr	r0, [fp, #8]
   19558:	cmn	r0, #1
   1955c:	ble	19584 <__assert_fail@plt+0x80c4>
   19560:	cmp	r0, #0
   19564:	beq	195d8 <__assert_fail@plt+0x8118>
   19568:	cmn	r7, #1
   1956c:	ble	195ac <__assert_fail@plt+0x80ec>
   19570:	mvn	r4, #-2147483648	; 0x80000000
   19574:	udiv	r6, r4, r0
   19578:	cmp	r6, r7
   1957c:	bge	195d8 <__assert_fail@plt+0x8118>
   19580:	b	195e8 <__assert_fail@plt+0x8128>
   19584:	cmn	r7, #1
   19588:	ble	195c8 <__assert_fail@plt+0x8108>
   1958c:	cmn	r0, #1
   19590:	beq	195d8 <__assert_fail@plt+0x8118>
   19594:	mov	r6, #-2147483648	; 0x80000000
   19598:	mvn	r4, #-2147483648	; 0x80000000
   1959c:	sdiv	r6, r6, r0
   195a0:	cmp	r6, r7
   195a4:	bge	195d8 <__assert_fail@plt+0x8118>
   195a8:	b	195e8 <__assert_fail@plt+0x8128>
   195ac:	beq	195d8 <__assert_fail@plt+0x8118>
   195b0:	mov	r6, #-2147483648	; 0x80000000
   195b4:	mvn	r4, #-2147483648	; 0x80000000
   195b8:	sdiv	r6, r6, r7
   195bc:	cmp	r6, r0
   195c0:	bge	195d8 <__assert_fail@plt+0x8118>
   195c4:	b	195e8 <__assert_fail@plt+0x8128>
   195c8:	mvn	r4, #-2147483648	; 0x80000000
   195cc:	sdiv	r6, r4, r0
   195d0:	cmp	r7, r6
   195d4:	blt	195e8 <__assert_fail@plt+0x8128>
   195d8:	mul	r6, r7, r0
   195dc:	mov	r4, #64	; 0x40
   195e0:	cmp	r6, #63	; 0x3f
   195e4:	bgt	195f0 <__assert_fail@plt+0x8130>
   195e8:	sdiv	r7, r4, r0
   195ec:	mul	r6, r7, r0
   195f0:	cmp	r5, #0
   195f4:	moveq	r4, #0
   195f8:	streq	r4, [r8]
   195fc:	sub	r4, r7, r1
   19600:	cmp	r4, r2
   19604:	bge	196b0 <__assert_fail@plt+0x81f0>
   19608:	add	r7, r1, r2
   1960c:	mov	r6, #0
   19610:	mov	r2, #0
   19614:	cmp	r7, r3
   19618:	movwgt	r6, #1
   1961c:	cmn	r3, #1
   19620:	movwgt	r2, #1
   19624:	cmp	r7, r1
   19628:	bvs	196e4 <__assert_fail@plt+0x8224>
   1962c:	ands	r1, r2, r6
   19630:	bne	196e4 <__assert_fail@plt+0x8224>
   19634:	cmn	r0, #1
   19638:	ble	19660 <__assert_fail@plt+0x81a0>
   1963c:	cmp	r0, #0
   19640:	beq	196ac <__assert_fail@plt+0x81ec>
   19644:	cmn	r7, #1
   19648:	ble	19684 <__assert_fail@plt+0x81c4>
   1964c:	mvn	r1, #-2147483648	; 0x80000000
   19650:	udiv	r1, r1, r0
   19654:	cmp	r1, r7
   19658:	bge	196ac <__assert_fail@plt+0x81ec>
   1965c:	b	196e4 <__assert_fail@plt+0x8224>
   19660:	cmn	r7, #1
   19664:	ble	1969c <__assert_fail@plt+0x81dc>
   19668:	cmn	r0, #1
   1966c:	beq	196ac <__assert_fail@plt+0x81ec>
   19670:	mov	r1, #-2147483648	; 0x80000000
   19674:	sdiv	r1, r1, r0
   19678:	cmp	r1, r7
   1967c:	bge	196ac <__assert_fail@plt+0x81ec>
   19680:	b	196e4 <__assert_fail@plt+0x8224>
   19684:	beq	196ac <__assert_fail@plt+0x81ec>
   19688:	mov	r1, #-2147483648	; 0x80000000
   1968c:	sdiv	r1, r1, r7
   19690:	cmp	r1, r0
   19694:	bge	196ac <__assert_fail@plt+0x81ec>
   19698:	b	196e4 <__assert_fail@plt+0x8224>
   1969c:	mvn	r1, #-2147483648	; 0x80000000
   196a0:	sdiv	r1, r1, r0
   196a4:	cmp	r7, r1
   196a8:	blt	196e4 <__assert_fail@plt+0x8224>
   196ac:	mul	r6, r7, r0
   196b0:	mov	r0, r5
   196b4:	mov	r1, r6
   196b8:	bl	1a648 <__assert_fail@plt+0x9188>
   196bc:	cmp	r6, #0
   196c0:	movwne	r6, #1
   196c4:	cmp	r0, #0
   196c8:	bne	196dc <__assert_fail@plt+0x821c>
   196cc:	clz	r1, r5
   196d0:	lsr	r1, r1, #5
   196d4:	orrs	r1, r1, r6
   196d8:	bne	196e4 <__assert_fail@plt+0x8224>
   196dc:	str	r7, [r8]
   196e0:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   196e4:	bl	19850 <__assert_fail@plt+0x8390>
   196e8:	push	{fp, lr}
   196ec:	mov	fp, sp
   196f0:	mov	r1, #1
   196f4:	bl	1a5c4 <__assert_fail@plt+0x9104>
   196f8:	cmp	r0, #0
   196fc:	popne	{fp, pc}
   19700:	bl	19850 <__assert_fail@plt+0x8390>
   19704:	push	{fp, lr}
   19708:	mov	fp, sp
   1970c:	bl	1a5c4 <__assert_fail@plt+0x9104>
   19710:	cmp	r0, #0
   19714:	popne	{fp, pc}
   19718:	bl	19850 <__assert_fail@plt+0x8390>
   1971c:	push	{fp, lr}
   19720:	mov	fp, sp
   19724:	mov	r1, #1
   19728:	bl	1a5c4 <__assert_fail@plt+0x9104>
   1972c:	cmp	r0, #0
   19730:	popne	{fp, pc}
   19734:	bl	19850 <__assert_fail@plt+0x8390>
   19738:	push	{fp, lr}
   1973c:	mov	fp, sp
   19740:	bl	1a5c4 <__assert_fail@plt+0x9104>
   19744:	cmp	r0, #0
   19748:	popne	{fp, pc}
   1974c:	bl	19850 <__assert_fail@plt+0x8390>
   19750:	push	{r4, r5, r6, sl, fp, lr}
   19754:	add	fp, sp, #16
   19758:	mov	r5, r0
   1975c:	mov	r0, r1
   19760:	mov	r4, r1
   19764:	bl	1a618 <__assert_fail@plt+0x9158>
   19768:	cmp	r0, #0
   1976c:	beq	19788 <__assert_fail@plt+0x82c8>
   19770:	mov	r1, r5
   19774:	mov	r2, r4
   19778:	mov	r6, r0
   1977c:	bl	11220 <memcpy@plt>
   19780:	mov	r0, r6
   19784:	pop	{r4, r5, r6, sl, fp, pc}
   19788:	bl	19850 <__assert_fail@plt+0x8390>
   1978c:	push	{r4, r5, r6, sl, fp, lr}
   19790:	add	fp, sp, #16
   19794:	mov	r5, r0
   19798:	mov	r0, r1
   1979c:	mov	r4, r1
   197a0:	bl	1a618 <__assert_fail@plt+0x9158>
   197a4:	cmp	r0, #0
   197a8:	beq	197c4 <__assert_fail@plt+0x8304>
   197ac:	mov	r1, r5
   197b0:	mov	r2, r4
   197b4:	mov	r6, r0
   197b8:	bl	11220 <memcpy@plt>
   197bc:	mov	r0, r6
   197c0:	pop	{r4, r5, r6, sl, fp, pc}
   197c4:	bl	19850 <__assert_fail@plt+0x8390>
   197c8:	push	{r4, r5, r6, sl, fp, lr}
   197cc:	add	fp, sp, #16
   197d0:	mov	r5, r0
   197d4:	add	r0, r1, #1
   197d8:	mov	r4, r1
   197dc:	bl	1a618 <__assert_fail@plt+0x9158>
   197e0:	cmp	r0, #0
   197e4:	beq	1980c <__assert_fail@plt+0x834c>
   197e8:	mov	r6, r0
   197ec:	mov	r0, #0
   197f0:	mov	r1, r5
   197f4:	mov	r2, r4
   197f8:	strb	r0, [r6, r4]
   197fc:	mov	r0, r6
   19800:	bl	11220 <memcpy@plt>
   19804:	mov	r0, r6
   19808:	pop	{r4, r5, r6, sl, fp, pc}
   1980c:	bl	19850 <__assert_fail@plt+0x8390>
   19810:	push	{r4, r5, r6, sl, fp, lr}
   19814:	add	fp, sp, #16
   19818:	mov	r4, r0
   1981c:	bl	1134c <strlen@plt>
   19820:	add	r5, r0, #1
   19824:	mov	r0, r5
   19828:	bl	1a618 <__assert_fail@plt+0x9158>
   1982c:	cmp	r0, #0
   19830:	beq	1984c <__assert_fail@plt+0x838c>
   19834:	mov	r1, r4
   19838:	mov	r2, r5
   1983c:	mov	r6, r0
   19840:	bl	11220 <memcpy@plt>
   19844:	mov	r0, r6
   19848:	pop	{r4, r5, r6, sl, fp, pc}
   1984c:	bl	19850 <__assert_fail@plt+0x8390>
   19850:	push	{fp, lr}
   19854:	mov	fp, sp
   19858:	movw	r0, #53548	; 0xd12c
   1985c:	movw	r1, #49856	; 0xc2c0
   19860:	mov	r2, #5
   19864:	movt	r0, #2
   19868:	movt	r1, #1
   1986c:	ldr	r4, [r0]
   19870:	mov	r0, #0
   19874:	bl	1125c <dcgettext@plt>
   19878:	movw	r2, #47403	; 0xb92b
   1987c:	mov	r3, r0
   19880:	mov	r0, r4
   19884:	mov	r1, #0
   19888:	movt	r2, #1
   1988c:	bl	112e0 <error@plt>
   19890:	bl	11478 <abort@plt>
   19894:	push	{fp, lr}
   19898:	mov	fp, sp
   1989c:	orr	r1, r1, #512	; 0x200
   198a0:	bl	12ec0 <__assert_fail@plt+0x1a00>
   198a4:	cmp	r0, #0
   198a8:	popne	{fp, pc}
   198ac:	bl	1137c <__errno_location@plt>
   198b0:	ldr	r0, [r0]
   198b4:	cmp	r0, #22
   198b8:	bne	198dc <__assert_fail@plt+0x841c>
   198bc:	movw	r0, #49873	; 0xc2d1
   198c0:	movw	r1, #49889	; 0xc2e1
   198c4:	movw	r3, #49900	; 0xc2ec
   198c8:	mov	r2, #41	; 0x29
   198cc:	movt	r0, #1
   198d0:	movt	r1, #1
   198d4:	movt	r3, #1
   198d8:	bl	114c0 <__assert_fail@plt>
   198dc:	bl	19850 <__assert_fail@plt+0x8390>
   198e0:	ldr	r0, [r0, #48]	; 0x30
   198e4:	and	r0, r0, #17
   198e8:	cmp	r0, #16
   198ec:	moveq	r0, #1
   198f0:	bxeq	lr
   198f4:	cmp	r0, #17
   198f8:	movne	r0, #0
   198fc:	bxne	lr
   19900:	ldr	r0, [r1, #48]	; 0x30
   19904:	cmp	r0, #0
   19908:	movwne	r0, #1
   1990c:	bx	lr
   19910:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   19914:	add	fp, sp, #28
   19918:	sub	sp, sp, #44	; 0x2c
   1991c:	cmp	r2, #37	; 0x25
   19920:	bcs	1a5a4 <__assert_fail@plt+0x90e4>
   19924:	ldr	sl, [fp, #8]
   19928:	mov	r6, r2
   1992c:	mov	r7, r1
   19930:	mov	r4, r0
   19934:	str	r3, [sp, #36]	; 0x24
   19938:	bl	1137c <__errno_location@plt>
   1993c:	mov	r5, r0
   19940:	mov	r0, #0
   19944:	str	r0, [r5]
   19948:	bl	11334 <__ctype_b_loc@plt>
   1994c:	ldr	r1, [r0]
   19950:	mov	r2, r4
   19954:	ldrb	r0, [r2], #1
   19958:	add	r3, r1, r0, lsl #1
   1995c:	ldrb	r3, [r3, #1]
   19960:	tst	r3, #32
   19964:	bne	19954 <__assert_fail@plt+0x8494>
   19968:	sub	r9, fp, #32
   1996c:	cmp	r7, #0
   19970:	mov	r8, #4
   19974:	movne	r9, r7
   19978:	cmp	r0, #45	; 0x2d
   1997c:	beq	19d3c <__assert_fail@plt+0x887c>
   19980:	mov	r0, r4
   19984:	mov	r1, r9
   19988:	mov	r2, r6
   1998c:	mov	r3, #0
   19990:	bl	1122c <__strtoull_internal@plt>
   19994:	mov	r7, r1
   19998:	ldr	r1, [r9]
   1999c:	cmp	r1, r4
   199a0:	beq	199d8 <__assert_fail@plt+0x8518>
   199a4:	mov	r6, r0
   199a8:	ldr	r0, [r5]
   199ac:	cmp	r0, #0
   199b0:	beq	19cf4 <__assert_fail@plt+0x8834>
   199b4:	cmp	r0, #34	; 0x22
   199b8:	bne	19d3c <__assert_fail@plt+0x887c>
   199bc:	mov	r8, #1
   199c0:	cmp	sl, #0
   199c4:	beq	1a590 <__assert_fail@plt+0x90d0>
   199c8:	ldrb	r4, [r1]
   199cc:	cmp	r4, #0
   199d0:	bne	19a1c <__assert_fail@plt+0x855c>
   199d4:	b	1a590 <__assert_fail@plt+0x90d0>
   199d8:	cmp	sl, #0
   199dc:	beq	19d3c <__assert_fail@plt+0x887c>
   199e0:	mov	r5, r1
   199e4:	ldrb	r1, [r4]
   199e8:	cmp	r1, #0
   199ec:	beq	19d3c <__assert_fail@plt+0x887c>
   199f0:	mov	r0, sl
   199f4:	bl	11358 <strchr@plt>
   199f8:	cmp	r0, #0
   199fc:	beq	19d3c <__assert_fail@plt+0x887c>
   19a00:	mov	r1, r5
   19a04:	mov	r8, #0
   19a08:	mov	r6, #1
   19a0c:	mov	r7, #0
   19a10:	ldrb	r4, [r1]
   19a14:	cmp	r4, #0
   19a18:	beq	1a590 <__assert_fail@plt+0x90d0>
   19a1c:	str	r1, [sp, #32]
   19a20:	mov	r0, sl
   19a24:	mov	r1, r4
   19a28:	bl	11358 <strchr@plt>
   19a2c:	cmp	r0, #0
   19a30:	beq	19d30 <__assert_fail@plt+0x8870>
   19a34:	sub	r0, r4, #69	; 0x45
   19a38:	mov	r1, #1
   19a3c:	mov	r3, #0
   19a40:	mov	r5, #1024	; 0x400
   19a44:	cmp	r0, #47	; 0x2f
   19a48:	str	r1, [sp, #28]
   19a4c:	bhi	19b50 <__assert_fail@plt+0x8690>
   19a50:	add	r1, pc, #0
   19a54:	ldr	pc, [r1, r0, lsl #2]
   19a58:	andeq	r9, r1, r8, lsl fp
   19a5c:	andeq	r9, r1, r0, asr fp
   19a60:	andeq	r9, r1, r8, lsl fp
   19a64:	andeq	r9, r1, r0, asr fp
   19a68:	andeq	r9, r1, r0, asr fp
   19a6c:	andeq	r9, r1, r0, asr fp
   19a70:	andeq	r9, r1, r8, lsl fp
   19a74:	andeq	r9, r1, r0, asr fp
   19a78:	andeq	r9, r1, r8, lsl fp
   19a7c:	andeq	r9, r1, r0, asr fp
   19a80:	andeq	r9, r1, r0, asr fp
   19a84:	andeq	r9, r1, r8, lsl fp
   19a88:	andeq	r9, r1, r0, asr fp
   19a8c:	andeq	r9, r1, r0, asr fp
   19a90:	andeq	r9, r1, r0, asr fp
   19a94:	andeq	r9, r1, r8, lsl fp
   19a98:	andeq	r9, r1, r0, asr fp
   19a9c:	andeq	r9, r1, r0, asr fp
   19aa0:	andeq	r9, r1, r0, asr fp
   19aa4:	andeq	r9, r1, r0, asr fp
   19aa8:	andeq	r9, r1, r8, lsl fp
   19aac:	andeq	r9, r1, r8, lsl fp
   19ab0:	andeq	r9, r1, r0, asr fp
   19ab4:	andeq	r9, r1, r0, asr fp
   19ab8:	andeq	r9, r1, r0, asr fp
   19abc:	andeq	r9, r1, r0, asr fp
   19ac0:	andeq	r9, r1, r0, asr fp
   19ac4:	andeq	r9, r1, r0, asr fp
   19ac8:	andeq	r9, r1, r0, asr fp
   19acc:	andeq	r9, r1, r0, asr fp
   19ad0:	andeq	r9, r1, r0, asr fp
   19ad4:	andeq	r9, r1, r0, asr fp
   19ad8:	andeq	r9, r1, r0, asr fp
   19adc:	andeq	r9, r1, r0, asr fp
   19ae0:	andeq	r9, r1, r8, lsl fp
   19ae4:	andeq	r9, r1, r0, asr fp
   19ae8:	andeq	r9, r1, r0, asr fp
   19aec:	andeq	r9, r1, r0, asr fp
   19af0:	andeq	r9, r1, r8, lsl fp
   19af4:	andeq	r9, r1, r0, asr fp
   19af8:	andeq	r9, r1, r8, lsl fp
   19afc:	andeq	r9, r1, r0, asr fp
   19b00:	andeq	r9, r1, r0, asr fp
   19b04:	andeq	r9, r1, r0, asr fp
   19b08:	andeq	r9, r1, r0, asr fp
   19b0c:	andeq	r9, r1, r0, asr fp
   19b10:	andeq	r9, r1, r0, asr fp
   19b14:	andeq	r9, r1, r8, lsl fp
   19b18:	mov	r0, sl
   19b1c:	mov	r1, #48	; 0x30
   19b20:	bl	11358 <strchr@plt>
   19b24:	cmp	r0, #0
   19b28:	beq	19b4c <__assert_fail@plt+0x868c>
   19b2c:	ldr	r1, [sp, #32]
   19b30:	ldrb	r0, [r1, #1]
   19b34:	cmp	r0, #66	; 0x42
   19b38:	cmpne	r0, #68	; 0x44
   19b3c:	bne	19d04 <__assert_fail@plt+0x8844>
   19b40:	mov	r5, #1000	; 0x3e8
   19b44:	mov	r0, #2
   19b48:	str	r0, [sp, #28]
   19b4c:	mov	r3, #0
   19b50:	sub	r0, r4, #66	; 0x42
   19b54:	cmp	r0, #53	; 0x35
   19b58:	bhi	19d30 <__assert_fail@plt+0x8870>
   19b5c:	add	r1, pc, #0
   19b60:	ldr	pc, [r1, r0, lsl #2]
   19b64:	andeq	sl, r1, r0, lsr #1
   19b68:	andeq	r9, r1, r0, lsr sp
   19b6c:	andeq	r9, r1, r0, lsr sp
   19b70:	andeq	sl, r1, r8, asr #1
   19b74:	andeq	r9, r1, r0, lsr sp
   19b78:	andeq	r9, r1, ip, lsr ip
   19b7c:	andeq	r9, r1, r0, lsr sp
   19b80:	andeq	r9, r1, r0, lsr sp
   19b84:	andeq	r9, r1, r0, lsr sp
   19b88:	andeq	r9, r1, r8, asr #26
   19b8c:	andeq	r9, r1, r0, lsr sp
   19b90:	muleq	r1, r0, sp
   19b94:	andeq	r9, r1, r0, lsr sp
   19b98:	andeq	r9, r1, r0, lsr sp
   19b9c:	andeq	sl, r1, ip, lsl r2
   19ba0:	andeq	r9, r1, r0, lsr sp
   19ba4:	andeq	r9, r1, r0, lsr sp
   19ba8:	andeq	r9, r1, r0, lsr sp
   19bac:	andeq	r9, r1, ip, lsl lr
   19bb0:	andeq	r9, r1, r0, lsr sp
   19bb4:	andeq	r9, r1, r0, lsr sp
   19bb8:	andeq	r9, r1, r0, lsr sp
   19bbc:	andeq	r9, r1, r0, lsr sp
   19bc0:	andeq	sl, r1, r4, asr #6
   19bc4:	andeq	r9, r1, r4, lsl #30
   19bc8:	andeq	r9, r1, r0, lsr sp
   19bcc:	andeq	r9, r1, r0, lsr sp
   19bd0:	andeq	r9, r1, r0, lsr sp
   19bd4:	andeq	r9, r1, r0, lsr sp
   19bd8:	andeq	r9, r1, r0, lsr sp
   19bdc:	andeq	r9, r1, r0, lsr sp
   19be0:	andeq	r9, r1, r0, lsr sp
   19be4:	andeq	sl, r1, r8, lsl r5
   19be8:	andeq	sl, r1, r0, ror r5
   19bec:	andeq	r9, r1, r0, lsr sp
   19bf0:	andeq	r9, r1, r0, lsr sp
   19bf4:	andeq	r9, r1, r0, lsr sp
   19bf8:	andeq	r9, r1, ip, lsr ip
   19bfc:	andeq	r9, r1, r0, lsr sp
   19c00:	andeq	r9, r1, r0, lsr sp
   19c04:	andeq	r9, r1, r0, lsr sp
   19c08:	andeq	r9, r1, r8, asr #26
   19c0c:	andeq	r9, r1, r0, lsr sp
   19c10:	muleq	r1, r0, sp
   19c14:	andeq	r9, r1, r0, lsr sp
   19c18:	andeq	r9, r1, r0, lsr sp
   19c1c:	andeq	r9, r1, r0, lsr sp
   19c20:	andeq	r9, r1, r0, lsr sp
   19c24:	andeq	r9, r1, r0, lsr sp
   19c28:	andeq	r9, r1, r0, lsr sp
   19c2c:	andeq	r9, r1, ip, lsl lr
   19c30:	andeq	r9, r1, r0, lsr sp
   19c34:	andeq	r9, r1, r0, lsr sp
   19c38:	andeq	sl, r1, ip, asr #10
   19c3c:	mvn	r0, #0
   19c40:	mvn	r1, #0
   19c44:	mov	r2, r5
   19c48:	mov	sl, r3
   19c4c:	bl	1adcc <__assert_fail@plt+0x990c>
   19c50:	subs	r3, r0, r6
   19c54:	mov	lr, #0
   19c58:	umull	r4, r2, r6, r5
   19c5c:	str	r1, [sp, #20]
   19c60:	sbcs	r3, r1, r7
   19c64:	mla	ip, r6, sl, r2
   19c68:	mov	r2, r1
   19c6c:	movwcc	lr, #1
   19c70:	mla	r7, r7, r5, ip
   19c74:	mov	r2, #0
   19c78:	cmp	lr, #0
   19c7c:	mvnne	r4, #0
   19c80:	mvnne	r7, #0
   19c84:	subs	r6, r0, r4
   19c88:	sbcs	r6, r1, r7
   19c8c:	movwcc	r2, #1
   19c90:	umull	r3, r6, r4, r5
   19c94:	cmp	r2, #0
   19c98:	str	r6, [sp, #16]
   19c9c:	mvnne	r3, #0
   19ca0:	cmp	r2, #0
   19ca4:	umull	r6, ip, r3, r5
   19ca8:	mla	r1, r3, sl, ip
   19cac:	ldr	ip, [sp, #16]
   19cb0:	str	r1, [sp, #12]
   19cb4:	mla	r4, r4, sl, ip
   19cb8:	mla	r4, r7, r5, r4
   19cbc:	ldr	r7, [sp, #12]
   19cc0:	mvnne	r4, #0
   19cc4:	subs	r0, r0, r3
   19cc8:	ldr	r0, [sp, #20]
   19ccc:	mla	r7, r4, r5, r7
   19cd0:	sbcs	r0, r0, r4
   19cd4:	mov	r0, #0
   19cd8:	movwcc	r0, #1
   19cdc:	cmp	r0, #0
   19ce0:	mov	r1, r0
   19ce4:	orr	r0, lr, r2
   19ce8:	mvnne	r7, #0
   19cec:	mvnne	r6, #0
   19cf0:	b	1a33c <__assert_fail@plt+0x8e7c>
   19cf4:	mov	r8, r0
   19cf8:	cmp	sl, #0
   19cfc:	bne	199c8 <__assert_fail@plt+0x8508>
   19d00:	b	1a590 <__assert_fail@plt+0x90d0>
   19d04:	cmp	r0, #105	; 0x69
   19d08:	mov	r3, #0
   19d0c:	bne	19b50 <__assert_fail@plt+0x8690>
   19d10:	ldrb	r0, [r1, #2]
   19d14:	mov	r1, #1
   19d18:	cmp	r0, #66	; 0x42
   19d1c:	movweq	r1, #3
   19d20:	str	r1, [sp, #28]
   19d24:	sub	r0, r4, #66	; 0x42
   19d28:	cmp	r0, #53	; 0x35
   19d2c:	bls	19b5c <__assert_fail@plt+0x869c>
   19d30:	ldr	r0, [sp, #36]	; 0x24
   19d34:	orr	r8, r8, #2
   19d38:	strd	r6, [r0]
   19d3c:	mov	r0, r8
   19d40:	sub	sp, fp, #28
   19d44:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   19d48:	mvn	r0, #0
   19d4c:	mvn	r1, #0
   19d50:	mov	r2, r5
   19d54:	mov	r4, r3
   19d58:	bl	1adcc <__assert_fail@plt+0x990c>
   19d5c:	subs	r0, r0, r6
   19d60:	mov	r2, #0
   19d64:	sbcs	r0, r1, r7
   19d68:	movwcc	r2, #1
   19d6c:	umull	r0, r1, r6, r5
   19d70:	mla	r1, r6, r4, r1
   19d74:	cmp	r2, #0
   19d78:	mov	r3, r2
   19d7c:	mla	r7, r7, r5, r1
   19d80:	mvnne	r0, #0
   19d84:	mvnne	r7, #0
   19d88:	mov	r6, r0
   19d8c:	b	1a570 <__assert_fail@plt+0x90b0>
   19d90:	mvn	r0, #0
   19d94:	mvn	r1, #0
   19d98:	mov	r2, r5
   19d9c:	str	r3, [sp, #24]
   19da0:	bl	1adcc <__assert_fail@plt+0x990c>
   19da4:	subs	r3, r0, r6
   19da8:	mov	ip, r0
   19dac:	umull	r4, r0, r6, r5
   19db0:	mov	sl, #0
   19db4:	sbcs	r3, r1, r7
   19db8:	str	r0, [sp, #20]
   19dbc:	ldr	r0, [sp, #24]
   19dc0:	mov	r3, #0
   19dc4:	movwcc	r3, #1
   19dc8:	cmp	r3, #0
   19dcc:	mvnne	r4, #0
   19dd0:	cmp	r3, #0
   19dd4:	umull	lr, r2, r4, r5
   19dd8:	mla	r2, r4, r0, r2
   19ddc:	str	r2, [sp, #16]
   19de0:	ldr	r2, [sp, #20]
   19de4:	mla	r6, r6, r0, r2
   19de8:	ldr	r0, [sp, #16]
   19dec:	mla	r6, r7, r5, r6
   19df0:	mvnne	r6, #0
   19df4:	mla	r7, r6, r5, r0
   19df8:	subs	r0, ip, r4
   19dfc:	sbcs	r0, r1, r6
   19e00:	movwcc	sl, #1
   19e04:	cmp	sl, #0
   19e08:	orr	r3, r3, sl
   19e0c:	mvnne	lr, #0
   19e10:	mvnne	r7, #0
   19e14:	mov	r6, lr
   19e18:	b	1a570 <__assert_fail@plt+0x90b0>
   19e1c:	mvn	r0, #0
   19e20:	mvn	r1, #0
   19e24:	mov	r2, r5
   19e28:	mov	sl, r3
   19e2c:	bl	1adcc <__assert_fail@plt+0x990c>
   19e30:	subs	r3, r0, r6
   19e34:	mov	ip, r1
   19e38:	umull	r2, lr, r6, r5
   19e3c:	str	r0, [sp, #20]
   19e40:	sbcs	r3, r1, r7
   19e44:	mov	r1, #0
   19e48:	mla	r6, r6, sl, lr
   19e4c:	mov	lr, #0
   19e50:	str	ip, [sp, #16]
   19e54:	movwcc	r1, #1
   19e58:	mla	r7, r7, r5, r6
   19e5c:	cmp	r1, #0
   19e60:	mvnne	r2, #0
   19e64:	cmp	r1, #0
   19e68:	umull	r3, r4, r2, r5
   19e6c:	mvnne	r7, #0
   19e70:	mla	r4, r2, sl, r4
   19e74:	subs	r2, r0, r2
   19e78:	sbcs	r2, ip, r7
   19e7c:	mla	r4, r7, r5, r4
   19e80:	movwcc	lr, #1
   19e84:	mov	r2, #0
   19e88:	cmp	lr, #0
   19e8c:	mvnne	r3, #0
   19e90:	mvnne	r4, #0
   19e94:	subs	r7, r0, r3
   19e98:	mov	r0, r5
   19e9c:	sbcs	r7, ip, r4
   19ea0:	movwcc	r2, #1
   19ea4:	umull	r5, r7, r3, r5
   19ea8:	cmp	r2, #0
   19eac:	mla	r3, r3, sl, r7
   19eb0:	mvnne	r5, #0
   19eb4:	mla	r3, r4, r0, r3
   19eb8:	cmp	r2, #0
   19ebc:	umull	r6, ip, r5, r0
   19ec0:	mvnne	r3, #0
   19ec4:	mla	ip, r5, sl, ip
   19ec8:	mla	r7, r3, r0, ip
   19ecc:	ldr	r0, [sp, #20]
   19ed0:	subs	r0, r0, r5
   19ed4:	ldr	r0, [sp, #16]
   19ed8:	sbcs	r0, r0, r3
   19edc:	mov	r0, #0
   19ee0:	movwcc	r0, #1
   19ee4:	cmp	r0, #0
   19ee8:	mov	r3, r0
   19eec:	orr	r0, r1, lr
   19ef0:	orr	r0, r0, r2
   19ef4:	mvnne	r7, #0
   19ef8:	mvnne	r6, #0
   19efc:	orr	r3, r0, r3
   19f00:	b	1a570 <__assert_fail@plt+0x90b0>
   19f04:	mvn	r0, #0
   19f08:	mvn	r1, #0
   19f0c:	mov	r2, r5
   19f10:	mov	r4, r3
   19f14:	str	r3, [sp, #24]
   19f18:	bl	1adcc <__assert_fail@plt+0x990c>
   19f1c:	umull	r3, r2, r6, r5
   19f20:	mla	r2, r6, r4, r2
   19f24:	subs	r6, r0, r6
   19f28:	sbcs	r6, r1, r7
   19f2c:	mla	r2, r7, r5, r2
   19f30:	mov	r7, #0
   19f34:	mov	r6, #0
   19f38:	movwcc	r6, #1
   19f3c:	cmp	r6, #0
   19f40:	str	r6, [sp, #20]
   19f44:	mvnne	r3, #0
   19f48:	mvnne	r2, #0
   19f4c:	subs	r4, r0, r3
   19f50:	umull	r6, ip, r3, r5
   19f54:	sbcs	r4, r1, r2
   19f58:	ldr	r4, [sp, #24]
   19f5c:	movwcc	r7, #1
   19f60:	cmp	r7, #0
   19f64:	mov	lr, r7
   19f68:	str	r7, [sp, #16]
   19f6c:	mvnne	r6, #0
   19f70:	cmp	lr, #0
   19f74:	mov	lr, #0
   19f78:	umull	sl, r7, r6, r5
   19f7c:	mla	r3, r3, r4, ip
   19f80:	mla	r7, r6, r4, r7
   19f84:	mov	r4, r0
   19f88:	mla	r2, r2, r5, r3
   19f8c:	mvnne	r2, #0
   19f90:	subs	r3, r0, r6
   19f94:	mov	r0, #0
   19f98:	mla	r7, r2, r5, r7
   19f9c:	sbcs	r2, r1, r2
   19fa0:	mov	r3, r4
   19fa4:	movwcc	r0, #1
   19fa8:	str	r3, [sp, #4]
   19fac:	cmp	r0, #0
   19fb0:	str	r0, [sp, #12]
   19fb4:	mov	r0, r1
   19fb8:	mvnne	sl, #0
   19fbc:	mvnne	r7, #0
   19fc0:	str	r0, [sp, #8]
   19fc4:	subs	r2, r4, sl
   19fc8:	ldr	r4, [sp, #24]
   19fcc:	sbcs	r2, r1, r7
   19fd0:	movwcc	lr, #1
   19fd4:	umull	r6, r2, sl, r5
   19fd8:	cmp	lr, #0
   19fdc:	mvnne	r6, #0
   19fe0:	mla	r2, sl, r4, r2
   19fe4:	cmp	lr, #0
   19fe8:	umull	r1, ip, r6, r5
   19fec:	mla	r2, r7, r5, r2
   19ff0:	mla	ip, r6, r4, ip
   19ff4:	mvnne	r2, #0
   19ff8:	subs	r6, r3, r6
   19ffc:	mla	r7, r2, r5, ip
   1a000:	sbcs	r2, r0, r2
   1a004:	mov	ip, #0
   1a008:	movwcc	ip, #1
   1a00c:	mov	r2, #0
   1a010:	cmp	ip, #0
   1a014:	mvnne	r1, #0
   1a018:	mvnne	r7, #0
   1a01c:	subs	r6, r3, r1
   1a020:	ldr	r3, [sp, #24]
   1a024:	sbcs	r6, r0, r7
   1a028:	umull	r0, sl, r1, r5
   1a02c:	movwcc	r2, #1
   1a030:	cmp	r2, #0
   1a034:	mvnne	r0, #0
   1a038:	mla	r1, r1, r3, sl
   1a03c:	cmp	r2, #0
   1a040:	umull	r6, r4, r0, r5
   1a044:	mla	r1, r7, r5, r1
   1a048:	mla	r4, r0, r3, r4
   1a04c:	ldr	r3, [sp, #4]
   1a050:	mvnne	r1, #0
   1a054:	mla	r7, r1, r5, r4
   1a058:	ldr	r5, [sp, #16]
   1a05c:	subs	r0, r3, r0
   1a060:	ldr	r0, [sp, #8]
   1a064:	sbcs	r0, r0, r1
   1a068:	mov	r0, #0
   1a06c:	movwcc	r0, #1
   1a070:	cmp	r0, #0
   1a074:	mov	r1, r0
   1a078:	ldr	r0, [sp, #20]
   1a07c:	mvnne	r7, #0
   1a080:	mvnne	r6, #0
   1a084:	orr	r0, r0, r5
   1a088:	ldr	r5, [sp, #12]
   1a08c:	orr	r0, r0, r5
   1a090:	orr	r0, r0, lr
   1a094:	orr	r0, r0, ip
   1a098:	orr	r0, r0, r2
   1a09c:	b	1a50c <__assert_fail@plt+0x904c>
   1a0a0:	mov	r1, #0
   1a0a4:	lsl	r2, r7, #10
   1a0a8:	lsl	r0, r6, #10
   1a0ac:	lsr	r3, r7, #22
   1a0b0:	cmp	r1, r7, lsr #22
   1a0b4:	orr	r2, r2, r6, lsr #22
   1a0b8:	mvnne	r0, #0
   1a0bc:	movwne	r3, #1
   1a0c0:	cmp	r1, r7, lsr #22
   1a0c4:	b	1a53c <__assert_fail@plt+0x907c>
   1a0c8:	mvn	r0, #0
   1a0cc:	mvn	r1, #0
   1a0d0:	mov	r2, r5
   1a0d4:	mov	sl, r3
   1a0d8:	bl	1adcc <__assert_fail@plt+0x990c>
   1a0dc:	subs	r2, r0, r6
   1a0e0:	mov	ip, r0
   1a0e4:	mov	r0, #0
   1a0e8:	sbcs	r2, r1, r7
   1a0ec:	movwcc	r0, #1
   1a0f0:	umull	r4, r2, r6, r5
   1a0f4:	cmp	r0, #0
   1a0f8:	mla	r2, r6, sl, r2
   1a0fc:	str	r0, [sp, #20]
   1a100:	mvnne	r4, #0
   1a104:	cmp	r0, #0
   1a108:	mla	r2, r7, r5, r2
   1a10c:	mov	r0, #0
   1a110:	umull	lr, r3, r4, r5
   1a114:	mvnne	r2, #0
   1a118:	mla	r3, r4, sl, r3
   1a11c:	mla	r6, r2, r5, r3
   1a120:	subs	r3, ip, r4
   1a124:	sbcs	r2, r1, r2
   1a128:	mov	r3, r1
   1a12c:	movwcc	r0, #1
   1a130:	str	r3, [sp, #8]
   1a134:	cmp	r0, #0
   1a138:	str	r0, [sp, #16]
   1a13c:	mov	r0, ip
   1a140:	mvnne	lr, #0
   1a144:	mvnne	r6, #0
   1a148:	str	r0, [sp, #12]
   1a14c:	subs	r2, ip, lr
   1a150:	umull	r7, r4, lr, r5
   1a154:	sbcs	r2, r1, r6
   1a158:	mla	r4, lr, sl, r4
   1a15c:	mov	r2, #0
   1a160:	mla	r6, r6, r5, r4
   1a164:	mov	r4, #0
   1a168:	movwcc	r2, #1
   1a16c:	cmp	r2, #0
   1a170:	mvnne	r7, #0
   1a174:	cmp	r2, #0
   1a178:	umull	r1, ip, r7, r5
   1a17c:	mvnne	r6, #0
   1a180:	mla	ip, r7, sl, ip
   1a184:	subs	r7, r0, r7
   1a188:	mla	lr, r6, r5, ip
   1a18c:	sbcs	r7, r3, r6
   1a190:	mov	ip, #0
   1a194:	movwcc	ip, #1
   1a198:	cmp	ip, #0
   1a19c:	mvnne	r1, #0
   1a1a0:	mvnne	lr, #0
   1a1a4:	subs	r7, r0, r1
   1a1a8:	sbcs	r7, r3, lr
   1a1ac:	movwcc	r4, #1
   1a1b0:	umull	r0, r7, r1, r5
   1a1b4:	cmp	r4, #0
   1a1b8:	mla	r1, r1, sl, r7
   1a1bc:	mvnne	r0, #0
   1a1c0:	mla	r1, lr, r5, r1
   1a1c4:	cmp	r4, #0
   1a1c8:	umull	r6, r3, r0, r5
   1a1cc:	mvnne	r1, #0
   1a1d0:	mla	r3, r0, sl, r3
   1a1d4:	mla	r7, r1, r5, r3
   1a1d8:	ldr	r3, [sp, #12]
   1a1dc:	subs	r0, r3, r0
   1a1e0:	ldr	r3, [sp, #16]
   1a1e4:	ldr	r0, [sp, #8]
   1a1e8:	sbcs	r0, r0, r1
   1a1ec:	mov	r0, #0
   1a1f0:	movwcc	r0, #1
   1a1f4:	cmp	r0, #0
   1a1f8:	mov	r1, r0
   1a1fc:	ldr	r0, [sp, #20]
   1a200:	mvnne	r7, #0
   1a204:	mvnne	r6, #0
   1a208:	orr	r0, r0, r3
   1a20c:	orr	r0, r0, r2
   1a210:	orr	r0, r0, ip
   1a214:	orr	r0, r0, r4
   1a218:	b	1a33c <__assert_fail@plt+0x8e7c>
   1a21c:	mvn	r0, #0
   1a220:	mvn	r1, #0
   1a224:	mov	r2, r5
   1a228:	mov	sl, r3
   1a22c:	bl	1adcc <__assert_fail@plt+0x990c>
   1a230:	umull	r3, r2, r6, r5
   1a234:	mov	lr, r1
   1a238:	mov	r1, r0
   1a23c:	mla	r2, r6, sl, r2
   1a240:	subs	r6, r0, r6
   1a244:	mov	r0, #0
   1a248:	sbcs	r6, lr, r7
   1a24c:	mla	r2, r7, r5, r2
   1a250:	movwcc	r0, #1
   1a254:	cmp	r0, #0
   1a258:	str	r0, [sp, #20]
   1a25c:	mov	r0, r1
   1a260:	mvnne	r3, #0
   1a264:	mvnne	r2, #0
   1a268:	str	r0, [sp, #16]
   1a26c:	subs	r4, r1, r3
   1a270:	umull	r7, ip, r3, r5
   1a274:	sbcs	r4, lr, r2
   1a278:	mla	r3, r3, sl, ip
   1a27c:	mov	ip, #0
   1a280:	mov	r4, #0
   1a284:	mla	r2, r2, r5, r3
   1a288:	movwcc	r4, #1
   1a28c:	cmp	r4, #0
   1a290:	mvnne	r7, #0
   1a294:	cmp	r4, #0
   1a298:	umull	r1, r6, r7, r5
   1a29c:	mvnne	r2, #0
   1a2a0:	mla	r6, r7, sl, r6
   1a2a4:	mla	r3, r2, r5, r6
   1a2a8:	subs	r6, r0, r7
   1a2ac:	sbcs	r2, lr, r2
   1a2b0:	movwcc	ip, #1
   1a2b4:	mov	r2, #0
   1a2b8:	cmp	ip, #0
   1a2bc:	mvnne	r1, #0
   1a2c0:	mvnne	r3, #0
   1a2c4:	subs	r6, r0, r1
   1a2c8:	sbcs	r6, lr, r3
   1a2cc:	movwcc	r2, #1
   1a2d0:	umull	r0, r6, r1, r5
   1a2d4:	cmp	r2, #0
   1a2d8:	str	r6, [sp, #12]
   1a2dc:	mvnne	r0, #0
   1a2e0:	cmp	r2, #0
   1a2e4:	umull	r6, r7, r0, r5
   1a2e8:	mla	r7, r0, sl, r7
   1a2ec:	str	r7, [sp, #8]
   1a2f0:	ldr	r7, [sp, #12]
   1a2f4:	mla	r1, r1, sl, r7
   1a2f8:	mla	r1, r3, r5, r1
   1a2fc:	ldr	r3, [sp, #8]
   1a300:	mvnne	r1, #0
   1a304:	mla	r7, r1, r5, r3
   1a308:	ldr	r3, [sp, #16]
   1a30c:	subs	r0, r3, r0
   1a310:	sbcs	r0, lr, r1
   1a314:	mov	r0, #0
   1a318:	movwcc	r0, #1
   1a31c:	cmp	r0, #0
   1a320:	mov	r1, r0
   1a324:	ldr	r0, [sp, #20]
   1a328:	mvnne	r7, #0
   1a32c:	mvnne	r6, #0
   1a330:	orr	r0, r0, r4
   1a334:	orr	r0, r0, ip
   1a338:	orr	r0, r0, r2
   1a33c:	orr	r3, r0, r1
   1a340:	b	1a570 <__assert_fail@plt+0x90b0>
   1a344:	mvn	r0, #0
   1a348:	mvn	r1, #0
   1a34c:	mov	r2, r5
   1a350:	mov	sl, r3
   1a354:	bl	1adcc <__assert_fail@plt+0x990c>
   1a358:	mov	ip, r1
   1a35c:	subs	r1, r0, r6
   1a360:	umull	r3, lr, r6, r5
   1a364:	mov	r2, r5
   1a368:	sbcs	r1, ip, r7
   1a36c:	mla	r6, r6, sl, lr
   1a370:	str	ip, [sp, #4]
   1a374:	mov	r1, #0
   1a378:	mla	r7, r7, r2, r6
   1a37c:	movwcc	r1, #1
   1a380:	cmp	r1, #0
   1a384:	str	r1, [sp, #20]
   1a388:	mvnne	r3, #0
   1a38c:	cmp	r1, #0
   1a390:	mov	r1, r0
   1a394:	umull	r4, r5, r3, r5
   1a398:	mvnne	r7, #0
   1a39c:	mov	lr, r1
   1a3a0:	mla	r5, r3, sl, r5
   1a3a4:	subs	r3, r0, r3
   1a3a8:	sbcs	r0, ip, r7
   1a3ac:	mla	r5, r7, r2, r5
   1a3b0:	mov	r0, #0
   1a3b4:	movwcc	r0, #1
   1a3b8:	cmp	r0, #0
   1a3bc:	str	r0, [sp, #16]
   1a3c0:	mvnne	r4, #0
   1a3c4:	mvnne	r5, #0
   1a3c8:	subs	r0, r1, r4
   1a3cc:	mov	r1, #0
   1a3d0:	sbcs	r0, ip, r5
   1a3d4:	movwcc	r1, #1
   1a3d8:	umull	r3, r0, r4, r2
   1a3dc:	cmp	r1, #0
   1a3e0:	mla	r0, r4, sl, r0
   1a3e4:	mov	r4, lr
   1a3e8:	str	r1, [sp, #12]
   1a3ec:	mvnne	r3, #0
   1a3f0:	mla	r0, r5, r2, r0
   1a3f4:	cmp	r1, #0
   1a3f8:	str	r4, [sp]
   1a3fc:	umull	r7, r6, r3, r2
   1a400:	mvnne	r0, #0
   1a404:	mla	r6, r3, sl, r6
   1a408:	subs	r3, lr, r3
   1a40c:	mla	r5, r0, r2, r6
   1a410:	sbcs	r0, ip, r0
   1a414:	mov	r3, #0
   1a418:	mov	r0, #0
   1a41c:	movwcc	r0, #1
   1a420:	cmp	r0, #0
   1a424:	str	r0, [sp, #8]
   1a428:	mvnne	r7, #0
   1a42c:	mvnne	r5, #0
   1a430:	subs	r0, lr, r7
   1a434:	sbcs	r0, ip, r5
   1a438:	movwcc	r3, #1
   1a43c:	umull	r6, r0, r7, r2
   1a440:	cmp	r3, #0
   1a444:	mla	r7, r7, sl, r0
   1a448:	mov	r0, ip
   1a44c:	mvnne	r6, #0
   1a450:	mla	r7, r5, r2, r7
   1a454:	cmp	r3, #0
   1a458:	mov	r5, #0
   1a45c:	umull	r1, lr, r6, r2
   1a460:	mvnne	r7, #0
   1a464:	mla	lr, r6, sl, lr
   1a468:	subs	r6, r4, r6
   1a46c:	mla	lr, r7, r2, lr
   1a470:	sbcs	r7, ip, r7
   1a474:	mov	ip, #0
   1a478:	movwcc	ip, #1
   1a47c:	cmp	ip, #0
   1a480:	mvnne	r1, #0
   1a484:	mvnne	lr, #0
   1a488:	subs	r7, r4, r1
   1a48c:	sbcs	r7, r0, lr
   1a490:	movwcc	r5, #1
   1a494:	umull	r0, r7, r1, r2
   1a498:	cmp	r5, #0
   1a49c:	mla	r1, r1, sl, r7
   1a4a0:	mvnne	r0, #0
   1a4a4:	mla	r1, lr, r2, r1
   1a4a8:	cmp	r5, #0
   1a4ac:	umull	r6, r4, r0, r2
   1a4b0:	mvnne	r1, #0
   1a4b4:	mla	r4, r0, sl, r4
   1a4b8:	mla	r7, r1, r2, r4
   1a4bc:	ldr	r2, [sp]
   1a4c0:	subs	r0, r2, r0
   1a4c4:	ldr	r2, [sp, #16]
   1a4c8:	ldr	r0, [sp, #4]
   1a4cc:	sbcs	r0, r0, r1
   1a4d0:	mov	r0, #0
   1a4d4:	movwcc	r0, #1
   1a4d8:	cmp	r0, #0
   1a4dc:	mov	r1, r0
   1a4e0:	ldr	r0, [sp, #20]
   1a4e4:	mvnne	r7, #0
   1a4e8:	mvnne	r6, #0
   1a4ec:	orr	r0, r0, r2
   1a4f0:	ldr	r2, [sp, #12]
   1a4f4:	orr	r0, r0, r2
   1a4f8:	ldr	r2, [sp, #8]
   1a4fc:	orr	r0, r0, r2
   1a500:	orr	r0, r0, r3
   1a504:	orr	r0, r0, ip
   1a508:	orr	r0, r0, r5
   1a50c:	orr	r0, r0, r1
   1a510:	and	r3, r0, #1
   1a514:	b	1a570 <__assert_fail@plt+0x90b0>
   1a518:	mov	r1, #0
   1a51c:	lsl	r2, r7, #9
   1a520:	lsl	r0, r6, #9
   1a524:	lsr	r3, r7, #23
   1a528:	cmp	r1, r7, lsr #23
   1a52c:	orr	r2, r2, r6, lsr #23
   1a530:	mvnne	r0, #0
   1a534:	movwne	r3, #1
   1a538:	cmp	r1, r7, lsr #23
   1a53c:	mvnne	r2, #0
   1a540:	mov	r6, r0
   1a544:	mov	r7, r2
   1a548:	b	1a570 <__assert_fail@plt+0x90b0>
   1a54c:	lsl	r1, r7, #1
   1a550:	lsl	r0, r6, #1
   1a554:	cmp	r7, #0
   1a558:	lsr	r3, r7, #31
   1a55c:	orr	r1, r1, r6, lsr #31
   1a560:	mvnlt	r0, #0
   1a564:	mvnlt	r1, #0
   1a568:	mov	r6, r0
   1a56c:	mov	r7, r1
   1a570:	ldr	r1, [sp, #32]
   1a574:	ldr	r2, [sp, #28]
   1a578:	orr	r8, r3, r8
   1a57c:	add	r0, r1, r2
   1a580:	str	r0, [r9]
   1a584:	ldrb	r0, [r1, r2]
   1a588:	cmp	r0, #0
   1a58c:	orrne	r8, r8, #2
   1a590:	ldr	r0, [sp, #36]	; 0x24
   1a594:	strd	r6, [r0]
   1a598:	mov	r0, r8
   1a59c:	sub	sp, fp, #28
   1a5a0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1a5a4:	movw	r0, #49978	; 0xc33a
   1a5a8:	movw	r1, #50016	; 0xc360
   1a5ac:	movw	r3, #50032	; 0xc370
   1a5b0:	mov	r2, #85	; 0x55
   1a5b4:	movt	r0, #1
   1a5b8:	movt	r1, #1
   1a5bc:	movt	r3, #1
   1a5c0:	bl	114c0 <__assert_fail@plt>
   1a5c4:	clz	r2, r1
   1a5c8:	clz	r3, r0
   1a5cc:	lsr	r2, r2, #5
   1a5d0:	lsr	r3, r3, #5
   1a5d4:	orrs	r2, r3, r2
   1a5d8:	movwne	r1, #1
   1a5dc:	movwne	r0, #1
   1a5e0:	cmp	r1, #0
   1a5e4:	beq	1a614 <__assert_fail@plt+0x9154>
   1a5e8:	mvn	r2, #-2147483648	; 0x80000000
   1a5ec:	udiv	r2, r2, r1
   1a5f0:	cmp	r2, r0
   1a5f4:	bcs	1a614 <__assert_fail@plt+0x9154>
   1a5f8:	push	{fp, lr}
   1a5fc:	mov	fp, sp
   1a600:	bl	1137c <__errno_location@plt>
   1a604:	mov	r1, #12
   1a608:	str	r1, [r0]
   1a60c:	mov	r0, #0
   1a610:	pop	{fp, pc}
   1a614:	b	111a8 <calloc@plt>
   1a618:	cmp	r0, #0
   1a61c:	movweq	r0, #1
   1a620:	cmn	r0, #1
   1a624:	ble	1a62c <__assert_fail@plt+0x916c>
   1a628:	b	112f8 <malloc@plt>
   1a62c:	push	{fp, lr}
   1a630:	mov	fp, sp
   1a634:	bl	1137c <__errno_location@plt>
   1a638:	mov	r1, #12
   1a63c:	str	r1, [r0]
   1a640:	mov	r0, #0
   1a644:	pop	{fp, pc}
   1a648:	push	{fp, lr}
   1a64c:	mov	fp, sp
   1a650:	cmp	r0, #0
   1a654:	beq	1a670 <__assert_fail@plt+0x91b0>
   1a658:	cmp	r1, #0
   1a65c:	beq	1a67c <__assert_fail@plt+0x91bc>
   1a660:	cmn	r1, #1
   1a664:	ble	1a688 <__assert_fail@plt+0x91c8>
   1a668:	pop	{fp, lr}
   1a66c:	b	11268 <realloc@plt>
   1a670:	mov	r0, r1
   1a674:	pop	{fp, lr}
   1a678:	b	1a618 <__assert_fail@plt+0x9158>
   1a67c:	bl	12e98 <__assert_fail@plt+0x19d8>
   1a680:	mov	r0, #0
   1a684:	pop	{fp, pc}
   1a688:	bl	1137c <__errno_location@plt>
   1a68c:	mov	r1, #12
   1a690:	str	r1, [r0]
   1a694:	mov	r0, #0
   1a698:	pop	{fp, pc}
   1a69c:	push	{r4, r5, r6, sl, fp, lr}
   1a6a0:	add	fp, sp, #16
   1a6a4:	mov	r4, r0
   1a6a8:	bl	112c8 <__fpending@plt>
   1a6ac:	ldr	r6, [r4]
   1a6b0:	mov	r5, r0
   1a6b4:	mov	r0, r4
   1a6b8:	bl	1a814 <__assert_fail@plt+0x9354>
   1a6bc:	tst	r6, #32
   1a6c0:	bne	1a6f8 <__assert_fail@plt+0x9238>
   1a6c4:	cmp	r0, #0
   1a6c8:	mov	r4, r0
   1a6cc:	mvnne	r4, #0
   1a6d0:	cmp	r5, #0
   1a6d4:	bne	1a704 <__assert_fail@plt+0x9244>
   1a6d8:	cmp	r0, #0
   1a6dc:	beq	1a704 <__assert_fail@plt+0x9244>
   1a6e0:	bl	1137c <__errno_location@plt>
   1a6e4:	ldr	r0, [r0]
   1a6e8:	subs	r4, r0, #9
   1a6ec:	mvnne	r4, #0
   1a6f0:	mov	r0, r4
   1a6f4:	pop	{r4, r5, r6, sl, fp, pc}
   1a6f8:	mvn	r4, #0
   1a6fc:	cmp	r0, #0
   1a700:	beq	1a70c <__assert_fail@plt+0x924c>
   1a704:	mov	r0, r4
   1a708:	pop	{r4, r5, r6, sl, fp, pc}
   1a70c:	bl	1137c <__errno_location@plt>
   1a710:	mov	r1, #0
   1a714:	str	r1, [r0]
   1a718:	mov	r0, r4
   1a71c:	pop	{r4, r5, r6, sl, fp, pc}
   1a720:	movw	r2, #62998	; 0xf616
   1a724:	mov	r1, #0
   1a728:	movt	r2, #149	; 0x95
   1a72c:	str	r1, [r0, #16]
   1a730:	str	r1, [r0, #20]
   1a734:	str	r2, [r0, #24]
   1a738:	bx	lr
   1a73c:	push	{r4, r5, r6, r7, fp, lr}
   1a740:	add	fp, sp, #16
   1a744:	ldr	r2, [r0, #24]
   1a748:	movw	r3, #62998	; 0xf616
   1a74c:	movt	r3, #149	; 0x95
   1a750:	cmp	r2, r3
   1a754:	bne	1a7f4 <__assert_fail@plt+0x9334>
   1a758:	mov	r3, r0
   1a75c:	ldr	r2, [r3, #16]!
   1a760:	ldr	lr, [r3, #4]
   1a764:	orrs	r5, r2, lr
   1a768:	beq	1a7a0 <__assert_fail@plt+0x92e0>
   1a76c:	ldrd	r4, [r0]
   1a770:	ldrd	r6, [r1, #96]	; 0x60
   1a774:	eor	r7, r7, r5
   1a778:	eor	r6, r6, r4
   1a77c:	orrs	r7, r6, r7
   1a780:	bne	1a7a0 <__assert_fail@plt+0x92e0>
   1a784:	ldrd	r4, [r0, #8]
   1a788:	ldrd	r6, [r1]
   1a78c:	mov	ip, #1
   1a790:	eor	r7, r7, r5
   1a794:	eor	r6, r6, r4
   1a798:	orrs	r7, r6, r7
   1a79c:	beq	1a7c0 <__assert_fail@plt+0x9300>
   1a7a0:	adds	r4, r2, #1
   1a7a4:	mov	ip, #0
   1a7a8:	adc	r5, lr, #0
   1a7ac:	and	r2, r4, r2
   1a7b0:	strd	r4, [r3]
   1a7b4:	and	r3, r5, lr
   1a7b8:	orrs	r2, r2, r3
   1a7bc:	beq	1a7c8 <__assert_fail@plt+0x9308>
   1a7c0:	mov	r0, ip
   1a7c4:	pop	{r4, r5, r6, r7, fp, pc}
   1a7c8:	orrs	r2, r4, r5
   1a7cc:	moveq	ip, #1
   1a7d0:	moveq	r0, ip
   1a7d4:	popeq	{r4, r5, r6, r7, fp, pc}
   1a7d8:	ldrd	r2, [r1]
   1a7dc:	str	r3, [r0, #12]
   1a7e0:	str	r2, [r0, #8]
   1a7e4:	ldrd	r2, [r1, #96]	; 0x60
   1a7e8:	stm	r0, {r2, r3}
   1a7ec:	mov	r0, ip
   1a7f0:	pop	{r4, r5, r6, r7, fp, pc}
   1a7f4:	movw	r0, #50111	; 0xc3bf
   1a7f8:	movw	r1, #50135	; 0xc3d7
   1a7fc:	movw	r3, #50153	; 0xc3e9
   1a800:	mov	r2, #60	; 0x3c
   1a804:	movt	r0, #1
   1a808:	movt	r1, #1
   1a80c:	movt	r3, #1
   1a810:	bl	114c0 <__assert_fail@plt>
   1a814:	push	{r4, r5, r6, sl, fp, lr}
   1a818:	add	fp, sp, #16
   1a81c:	sub	sp, sp, #8
   1a820:	mov	r4, r0
   1a824:	bl	113ac <fileno@plt>
   1a828:	cmn	r0, #1
   1a82c:	ble	1a8a0 <__assert_fail@plt+0x93e0>
   1a830:	mov	r0, r4
   1a834:	bl	11310 <__freading@plt>
   1a838:	cmp	r0, #0
   1a83c:	beq	1a868 <__assert_fail@plt+0x93a8>
   1a840:	mov	r0, r4
   1a844:	bl	113ac <fileno@plt>
   1a848:	mov	r1, #1
   1a84c:	mov	r2, #0
   1a850:	mov	r3, #0
   1a854:	str	r1, [sp]
   1a858:	bl	112b0 <lseek64@plt>
   1a85c:	and	r0, r0, r1
   1a860:	cmn	r0, #1
   1a864:	beq	1a8a0 <__assert_fail@plt+0x93e0>
   1a868:	mov	r0, r4
   1a86c:	bl	1aad8 <__assert_fail@plt+0x9618>
   1a870:	cmp	r0, #0
   1a874:	beq	1a8a0 <__assert_fail@plt+0x93e0>
   1a878:	bl	1137c <__errno_location@plt>
   1a87c:	ldr	r6, [r0]
   1a880:	mov	r5, r0
   1a884:	mov	r0, r4
   1a888:	bl	113c4 <fclose@plt>
   1a88c:	cmp	r6, #0
   1a890:	strne	r6, [r5]
   1a894:	mvnne	r0, #0
   1a898:	sub	sp, fp, #16
   1a89c:	pop	{r4, r5, r6, sl, fp, pc}
   1a8a0:	mov	r0, r4
   1a8a4:	sub	sp, fp, #16
   1a8a8:	pop	{r4, r5, r6, sl, fp, lr}
   1a8ac:	b	113c4 <fclose@plt>
   1a8b0:	sub	sp, sp, #8
   1a8b4:	push	{r4, r5, r6, r7, fp, lr}
   1a8b8:	add	fp, sp, #16
   1a8bc:	sub	sp, sp, #8
   1a8c0:	mov	r5, r0
   1a8c4:	add	r0, fp, #8
   1a8c8:	cmp	r1, #11
   1a8cc:	str	r3, [fp, #12]
   1a8d0:	str	r2, [fp, #8]
   1a8d4:	str	r0, [sp, #4]
   1a8d8:	bhi	1a914 <__assert_fail@plt+0x9454>
   1a8dc:	mov	r0, #1
   1a8e0:	movw	r2, #1300	; 0x514
   1a8e4:	tst	r2, r0, lsl r1
   1a8e8:	bne	1a9d4 <__assert_fail@plt+0x9514>
   1a8ec:	movw	r2, #2570	; 0xa0a
   1a8f0:	tst	r2, r0, lsl r1
   1a8f4:	bne	1a93c <__assert_fail@plt+0x947c>
   1a8f8:	cmp	r1, #0
   1a8fc:	bne	1a914 <__assert_fail@plt+0x9454>
   1a900:	ldr	r0, [sp, #4]
   1a904:	add	r1, r0, #4
   1a908:	str	r1, [sp, #4]
   1a90c:	mov	r1, #0
   1a910:	b	1a9e0 <__assert_fail@plt+0x9520>
   1a914:	sub	r0, r1, #1024	; 0x400
   1a918:	cmp	r0, #10
   1a91c:	bhi	1a9d4 <__assert_fail@plt+0x9514>
   1a920:	mov	r2, #1
   1a924:	movw	r3, #645	; 0x285
   1a928:	tst	r3, r2, lsl r0
   1a92c:	bne	1a9d4 <__assert_fail@plt+0x9514>
   1a930:	movw	r3, #1282	; 0x502
   1a934:	tst	r3, r2, lsl r0
   1a938:	beq	1a948 <__assert_fail@plt+0x9488>
   1a93c:	mov	r0, r5
   1a940:	bl	113dc <fcntl64@plt>
   1a944:	b	1a9ec <__assert_fail@plt+0x952c>
   1a948:	cmp	r0, #6
   1a94c:	bne	1a9d4 <__assert_fail@plt+0x9514>
   1a950:	ldr	r0, [sp, #4]
   1a954:	movw	r7, #53992	; 0xd2e8
   1a958:	movt	r7, #2
   1a95c:	add	r1, r0, #4
   1a960:	str	r1, [sp, #4]
   1a964:	ldr	r6, [r0]
   1a968:	ldr	r0, [r7]
   1a96c:	cmp	r0, #0
   1a970:	blt	1aa10 <__assert_fail@plt+0x9550>
   1a974:	mov	r0, r5
   1a978:	movw	r1, #1030	; 0x406
   1a97c:	mov	r2, r6
   1a980:	bl	113dc <fcntl64@plt>
   1a984:	mov	r4, r0
   1a988:	cmn	r0, #1
   1a98c:	bgt	1aa04 <__assert_fail@plt+0x9544>
   1a990:	bl	1137c <__errno_location@plt>
   1a994:	ldr	r0, [r0]
   1a998:	cmp	r0, #22
   1a99c:	bne	1aa04 <__assert_fail@plt+0x9544>
   1a9a0:	mov	r0, r5
   1a9a4:	mov	r1, #0
   1a9a8:	mov	r2, r6
   1a9ac:	bl	113dc <fcntl64@plt>
   1a9b0:	mov	r4, r0
   1a9b4:	cmp	r0, #0
   1a9b8:	blt	1a9f0 <__assert_fail@plt+0x9530>
   1a9bc:	mvn	r0, #0
   1a9c0:	str	r0, [r7]
   1a9c4:	mov	r0, #1
   1a9c8:	cmp	r0, #0
   1a9cc:	bne	1aa3c <__assert_fail@plt+0x957c>
   1a9d0:	b	1a9f0 <__assert_fail@plt+0x9530>
   1a9d4:	ldr	r0, [sp, #4]
   1a9d8:	add	r2, r0, #4
   1a9dc:	str	r2, [sp, #4]
   1a9e0:	ldr	r2, [r0]
   1a9e4:	mov	r0, r5
   1a9e8:	bl	113dc <fcntl64@plt>
   1a9ec:	mov	r4, r0
   1a9f0:	mov	r0, r4
   1a9f4:	sub	sp, fp, #16
   1a9f8:	pop	{r4, r5, r6, r7, fp, lr}
   1a9fc:	add	sp, sp, #8
   1aa00:	bx	lr
   1aa04:	mov	r0, #1
   1aa08:	str	r0, [r7]
   1aa0c:	b	1a9f0 <__assert_fail@plt+0x9530>
   1aa10:	mov	r0, r5
   1aa14:	mov	r1, #0
   1aa18:	mov	r2, r6
   1aa1c:	bl	113dc <fcntl64@plt>
   1aa20:	mov	r4, r0
   1aa24:	ldr	r0, [r7]
   1aa28:	add	r0, r0, #1
   1aa2c:	clz	r0, r0
   1aa30:	lsr	r0, r0, #5
   1aa34:	cmp	r0, #0
   1aa38:	beq	1a9f0 <__assert_fail@plt+0x9530>
   1aa3c:	cmp	r4, #0
   1aa40:	blt	1a9f0 <__assert_fail@plt+0x9530>
   1aa44:	mov	r0, r4
   1aa48:	mov	r1, #1
   1aa4c:	bl	113dc <fcntl64@plt>
   1aa50:	cmp	r0, #0
   1aa54:	blt	1aa70 <__assert_fail@plt+0x95b0>
   1aa58:	orr	r2, r0, #1
   1aa5c:	mov	r0, r4
   1aa60:	mov	r1, #2
   1aa64:	bl	113dc <fcntl64@plt>
   1aa68:	cmn	r0, #1
   1aa6c:	bne	1a9f0 <__assert_fail@plt+0x9530>
   1aa70:	bl	1137c <__errno_location@plt>
   1aa74:	ldr	r6, [r0]
   1aa78:	mov	r5, r0
   1aa7c:	mov	r0, r4
   1aa80:	bl	11484 <close@plt>
   1aa84:	str	r6, [r5]
   1aa88:	mvn	r4, #0
   1aa8c:	b	1a9f0 <__assert_fail@plt+0x9530>
   1aa90:	sub	sp, sp, #8
   1aa94:	push	{fp, lr}
   1aa98:	mov	fp, sp
   1aa9c:	sub	sp, sp, #8
   1aaa0:	str	r2, [fp, #8]
   1aaa4:	mov	r2, #0
   1aaa8:	tst	r1, #64	; 0x40
   1aaac:	str	r3, [fp, #12]
   1aab0:	addne	r2, fp, #8
   1aab4:	orrne	r2, r2, #4
   1aab8:	strne	r2, [sp, #4]
   1aabc:	ldrne	r2, [fp, #8]
   1aac0:	bl	112ec <open64@plt>
   1aac4:	bl	18bec <__assert_fail@plt+0x772c>
   1aac8:	mov	sp, fp
   1aacc:	pop	{fp, lr}
   1aad0:	add	sp, sp, #8
   1aad4:	bx	lr
   1aad8:	push	{r4, sl, fp, lr}
   1aadc:	add	fp, sp, #8
   1aae0:	sub	sp, sp, #8
   1aae4:	mov	r4, r0
   1aae8:	cmp	r0, #0
   1aaec:	beq	1ab08 <__assert_fail@plt+0x9648>
   1aaf0:	mov	r0, r4
   1aaf4:	bl	11310 <__freading@plt>
   1aaf8:	cmp	r0, #0
   1aafc:	ldrbne	r0, [r4, #1]
   1ab00:	tstne	r0, #1
   1ab04:	bne	1ab18 <__assert_fail@plt+0x9658>
   1ab08:	mov	r0, r4
   1ab0c:	sub	sp, fp, #8
   1ab10:	pop	{r4, sl, fp, lr}
   1ab14:	b	111f0 <fflush@plt>
   1ab18:	mov	r0, #1
   1ab1c:	mov	r2, #0
   1ab20:	mov	r3, #0
   1ab24:	str	r0, [sp]
   1ab28:	mov	r0, r4
   1ab2c:	bl	1ab40 <__assert_fail@plt+0x9680>
   1ab30:	mov	r0, r4
   1ab34:	sub	sp, fp, #8
   1ab38:	pop	{r4, sl, fp, lr}
   1ab3c:	b	111f0 <fflush@plt>
   1ab40:	push	{r4, r5, r6, r7, fp, lr}
   1ab44:	add	fp, sp, #16
   1ab48:	sub	sp, sp, #8
   1ab4c:	mov	r4, r0
   1ab50:	ldr	r0, [r0, #4]
   1ab54:	mov	r5, r3
   1ab58:	mov	r6, r2
   1ab5c:	ldr	r1, [r4, #8]
   1ab60:	cmp	r1, r0
   1ab64:	bne	1ab80 <__assert_fail@plt+0x96c0>
   1ab68:	ldrd	r0, [r4, #16]
   1ab6c:	cmp	r1, r0
   1ab70:	bne	1ab80 <__assert_fail@plt+0x96c0>
   1ab74:	ldr	r0, [r4, #36]	; 0x24
   1ab78:	cmp	r0, #0
   1ab7c:	beq	1ab98 <__assert_fail@plt+0x96d8>
   1ab80:	mov	r0, r4
   1ab84:	mov	r2, r6
   1ab88:	mov	r3, r5
   1ab8c:	sub	sp, fp, #16
   1ab90:	pop	{r4, r5, r6, r7, fp, lr}
   1ab94:	b	113d0 <fseeko64@plt>
   1ab98:	ldr	r7, [fp, #8]
   1ab9c:	mov	r0, r4
   1aba0:	bl	113ac <fileno@plt>
   1aba4:	mov	r2, r6
   1aba8:	mov	r3, r5
   1abac:	str	r7, [sp]
   1abb0:	bl	112b0 <lseek64@plt>
   1abb4:	and	r2, r0, r1
   1abb8:	cmn	r2, #1
   1abbc:	mvneq	r0, #0
   1abc0:	subeq	sp, fp, #16
   1abc4:	popeq	{r4, r5, r6, r7, fp, pc}
   1abc8:	strd	r0, [r4, #80]	; 0x50
   1abcc:	ldr	r0, [r4]
   1abd0:	bic	r0, r0, #16
   1abd4:	str	r0, [r4]
   1abd8:	mov	r0, #0
   1abdc:	sub	sp, fp, #16
   1abe0:	pop	{r4, r5, r6, r7, fp, pc}
   1abe4:	push	{fp, lr}
   1abe8:	mov	fp, sp
   1abec:	mov	r0, #14
   1abf0:	bl	11400 <nl_langinfo@plt>
   1abf4:	movw	r1, #46564	; 0xb5e4
   1abf8:	cmp	r0, #0
   1abfc:	movt	r1, #1
   1ac00:	movne	r1, r0
   1ac04:	movw	r0, #50220	; 0xc42c
   1ac08:	ldrb	r2, [r1]
   1ac0c:	movt	r0, #1
   1ac10:	cmp	r2, #0
   1ac14:	movne	r0, r1
   1ac18:	pop	{fp, pc}
   1ac1c:	push	{r4, r5, r6, r7, fp, lr}
   1ac20:	add	fp, sp, #16
   1ac24:	sub	sp, sp, #8
   1ac28:	add	r5, sp, #4
   1ac2c:	cmp	r0, #0
   1ac30:	mov	r7, r2
   1ac34:	mov	r4, r1
   1ac38:	movne	r5, r0
   1ac3c:	mov	r0, r5
   1ac40:	bl	112d4 <mbrtowc@plt>
   1ac44:	mov	r6, r0
   1ac48:	cmp	r7, #0
   1ac4c:	beq	1ac70 <__assert_fail@plt+0x97b0>
   1ac50:	cmn	r6, #2
   1ac54:	bcc	1ac70 <__assert_fail@plt+0x97b0>
   1ac58:	mov	r0, #0
   1ac5c:	bl	1acc4 <__assert_fail@plt+0x9804>
   1ac60:	cmp	r0, #0
   1ac64:	ldrbeq	r0, [r4]
   1ac68:	moveq	r6, #1
   1ac6c:	streq	r0, [r5]
   1ac70:	mov	r0, r6
   1ac74:	sub	sp, fp, #16
   1ac78:	pop	{r4, r5, r6, r7, fp, pc}
   1ac7c:	cmp	r2, #0
   1ac80:	beq	1acb0 <__assert_fail@plt+0x97f0>
   1ac84:	mvn	r3, #0
   1ac88:	udiv	r3, r3, r2
   1ac8c:	cmp	r3, r1
   1ac90:	bcs	1acb0 <__assert_fail@plt+0x97f0>
   1ac94:	push	{fp, lr}
   1ac98:	mov	fp, sp
   1ac9c:	bl	1137c <__errno_location@plt>
   1aca0:	mov	r1, #12
   1aca4:	str	r1, [r0]
   1aca8:	mov	r0, #0
   1acac:	pop	{fp, pc}
   1acb0:	mul	r1, r2, r1
   1acb4:	b	1a648 <__assert_fail@plt+0x9188>
   1acb8:	mov	r1, #0
   1acbc:	mov	r2, #3
   1acc0:	b	1a8b0 <__assert_fail@plt+0x93f0>
   1acc4:	push	{r4, sl, fp, lr}
   1acc8:	add	fp, sp, #8
   1accc:	sub	sp, sp, #264	; 0x108
   1acd0:	add	r1, sp, #7
   1acd4:	movw	r2, #257	; 0x101
   1acd8:	bl	1ad28 <__assert_fail@plt+0x9868>
   1acdc:	mov	r4, #0
   1ace0:	cmp	r0, #0
   1ace4:	bne	1ad1c <__assert_fail@plt+0x985c>
   1ace8:	movw	r1, #50226	; 0xc432
   1acec:	add	r0, sp, #7
   1acf0:	movt	r1, #1
   1acf4:	bl	111d8 <strcmp@plt>
   1acf8:	cmp	r0, #0
   1acfc:	beq	1ad1c <__assert_fail@plt+0x985c>
   1ad00:	movw	r1, #50228	; 0xc434
   1ad04:	add	r0, sp, #7
   1ad08:	movt	r1, #1
   1ad0c:	bl	111d8 <strcmp@plt>
   1ad10:	mov	r4, r0
   1ad14:	cmp	r0, #0
   1ad18:	movwne	r4, #1
   1ad1c:	mov	r0, r4
   1ad20:	sub	sp, fp, #8
   1ad24:	pop	{r4, sl, fp, pc}
   1ad28:	push	{r4, r5, r6, r7, fp, lr}
   1ad2c:	add	fp, sp, #16
   1ad30:	mov	r4, r1
   1ad34:	mov	r1, #0
   1ad38:	mov	r6, r2
   1ad3c:	bl	113e8 <setlocale@plt>
   1ad40:	cmp	r0, #0
   1ad44:	beq	1ad74 <__assert_fail@plt+0x98b4>
   1ad48:	mov	r7, r0
   1ad4c:	bl	1134c <strlen@plt>
   1ad50:	cmp	r0, r6
   1ad54:	bcs	1ad94 <__assert_fail@plt+0x98d4>
   1ad58:	add	r2, r0, #1
   1ad5c:	mov	r0, r4
   1ad60:	mov	r1, r7
   1ad64:	bl	11220 <memcpy@plt>
   1ad68:	mov	r5, #0
   1ad6c:	mov	r0, r5
   1ad70:	pop	{r4, r5, r6, r7, fp, pc}
   1ad74:	cmp	r6, #0
   1ad78:	mov	r5, #22
   1ad7c:	movne	r0, #0
   1ad80:	strbne	r0, [r4]
   1ad84:	movne	r0, r5
   1ad88:	popne	{r4, r5, r6, r7, fp, pc}
   1ad8c:	mov	r0, r5
   1ad90:	pop	{r4, r5, r6, r7, fp, pc}
   1ad94:	mov	r5, #34	; 0x22
   1ad98:	cmp	r6, #0
   1ad9c:	beq	1adbc <__assert_fail@plt+0x98fc>
   1ada0:	sub	r6, r6, #1
   1ada4:	mov	r0, r4
   1ada8:	mov	r1, r7
   1adac:	mov	r2, r6
   1adb0:	bl	11220 <memcpy@plt>
   1adb4:	mov	r0, #0
   1adb8:	strb	r0, [r4, r6]
   1adbc:	mov	r0, r5
   1adc0:	pop	{r4, r5, r6, r7, fp, pc}
   1adc4:	mov	r1, #0
   1adc8:	b	113e8 <setlocale@plt>
   1adcc:	cmp	r3, #0
   1add0:	cmpeq	r2, #0
   1add4:	bne	1adec <__assert_fail@plt+0x992c>
   1add8:	cmp	r1, #0
   1addc:	cmpeq	r0, #0
   1ade0:	mvnne	r1, #0
   1ade4:	mvnne	r0, #0
   1ade8:	b	1ae08 <__assert_fail@plt+0x9948>
   1adec:	sub	sp, sp, #8
   1adf0:	push	{sp, lr}
   1adf4:	bl	1ae18 <__assert_fail@plt+0x9958>
   1adf8:	ldr	lr, [sp, #4]
   1adfc:	add	sp, sp, #8
   1ae00:	pop	{r2, r3}
   1ae04:	bx	lr
   1ae08:	push	{r1, lr}
   1ae0c:	mov	r0, #8
   1ae10:	bl	111cc <raise@plt>
   1ae14:	pop	{r1, pc}
   1ae18:	cmp	r1, r3
   1ae1c:	cmpeq	r0, r2
   1ae20:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1ae24:	mov	r4, r0
   1ae28:	movcc	r0, #0
   1ae2c:	mov	r5, r1
   1ae30:	ldr	lr, [sp, #36]	; 0x24
   1ae34:	movcc	r1, r0
   1ae38:	bcc	1af34 <__assert_fail@plt+0x9a74>
   1ae3c:	cmp	r3, #0
   1ae40:	clzeq	ip, r2
   1ae44:	clzne	ip, r3
   1ae48:	addeq	ip, ip, #32
   1ae4c:	cmp	r5, #0
   1ae50:	clzeq	r1, r4
   1ae54:	addeq	r1, r1, #32
   1ae58:	clzne	r1, r5
   1ae5c:	sub	ip, ip, r1
   1ae60:	sub	sl, ip, #32
   1ae64:	lsl	r9, r3, ip
   1ae68:	rsb	fp, ip, #32
   1ae6c:	orr	r9, r9, r2, lsl sl
   1ae70:	orr	r9, r9, r2, lsr fp
   1ae74:	lsl	r8, r2, ip
   1ae78:	cmp	r5, r9
   1ae7c:	cmpeq	r4, r8
   1ae80:	movcc	r0, #0
   1ae84:	movcc	r1, r0
   1ae88:	bcc	1aea4 <__assert_fail@plt+0x99e4>
   1ae8c:	mov	r0, #1
   1ae90:	subs	r4, r4, r8
   1ae94:	lsl	r1, r0, sl
   1ae98:	orr	r1, r1, r0, lsr fp
   1ae9c:	lsl	r0, r0, ip
   1aea0:	sbc	r5, r5, r9
   1aea4:	cmp	ip, #0
   1aea8:	beq	1af34 <__assert_fail@plt+0x9a74>
   1aeac:	lsr	r6, r8, #1
   1aeb0:	orr	r6, r6, r9, lsl #31
   1aeb4:	lsr	r7, r9, #1
   1aeb8:	mov	r2, ip
   1aebc:	b	1aee0 <__assert_fail@plt+0x9a20>
   1aec0:	subs	r3, r4, r6
   1aec4:	sbc	r8, r5, r7
   1aec8:	adds	r3, r3, r3
   1aecc:	adc	r8, r8, r8
   1aed0:	adds	r4, r3, #1
   1aed4:	adc	r5, r8, #0
   1aed8:	subs	r2, r2, #1
   1aedc:	beq	1aefc <__assert_fail@plt+0x9a3c>
   1aee0:	cmp	r5, r7
   1aee4:	cmpeq	r4, r6
   1aee8:	bcs	1aec0 <__assert_fail@plt+0x9a00>
   1aeec:	adds	r4, r4, r4
   1aef0:	adc	r5, r5, r5
   1aef4:	subs	r2, r2, #1
   1aef8:	bne	1aee0 <__assert_fail@plt+0x9a20>
   1aefc:	lsr	r3, r4, ip
   1af00:	orr	r3, r3, r5, lsl fp
   1af04:	lsr	r2, r5, ip
   1af08:	orr	r3, r3, r5, lsr sl
   1af0c:	adds	r0, r0, r4
   1af10:	mov	r4, r3
   1af14:	lsl	r3, r2, ip
   1af18:	orr	r3, r3, r4, lsl sl
   1af1c:	lsl	ip, r4, ip
   1af20:	orr	r3, r3, r4, lsr fp
   1af24:	adc	r1, r1, r5
   1af28:	subs	r0, r0, ip
   1af2c:	mov	r5, r2
   1af30:	sbc	r1, r1, r3
   1af34:	cmp	lr, #0
   1af38:	strdne	r4, [lr]
   1af3c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1af40:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   1af44:	mov	r7, r0
   1af48:	ldr	r6, [pc, #72]	; 1af98 <__assert_fail@plt+0x9ad8>
   1af4c:	ldr	r5, [pc, #72]	; 1af9c <__assert_fail@plt+0x9adc>
   1af50:	add	r6, pc, r6
   1af54:	add	r5, pc, r5
   1af58:	sub	r6, r6, r5
   1af5c:	mov	r8, r1
   1af60:	mov	r9, r2
   1af64:	bl	1117c <fstatfs64@plt-0x20>
   1af68:	asrs	r6, r6, #2
   1af6c:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   1af70:	mov	r4, #0
   1af74:	add	r4, r4, #1
   1af78:	ldr	r3, [r5], #4
   1af7c:	mov	r2, r9
   1af80:	mov	r1, r8
   1af84:	mov	r0, r7
   1af88:	blx	r3
   1af8c:	cmp	r6, r4
   1af90:	bne	1af74 <__assert_fail@plt+0x9ab4>
   1af94:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   1af98:			; <UNDEFINED> instruction: 0x00011fb4
   1af9c:	andeq	r1, r1, ip, lsr #31
   1afa0:	bx	lr
   1afa4:	ldr	r3, [pc, #12]	; 1afb8 <__assert_fail@plt+0x9af8>
   1afa8:	mov	r1, #0
   1afac:	add	r3, pc, r3
   1afb0:	ldr	r2, [r3]
   1afb4:	b	11388 <__cxa_atexit@plt>
   1afb8:	andeq	r2, r1, r0, ror r1

Disassembly of section .fini:

0001afbc <.fini>:
   1afbc:	push	{r3, lr}
   1afc0:	pop	{r3, pc}
