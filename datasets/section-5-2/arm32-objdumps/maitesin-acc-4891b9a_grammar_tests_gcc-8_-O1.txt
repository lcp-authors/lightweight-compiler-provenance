
../repos/maitesin-acc-4891b9a/bin/grammar_tests:     file format elf32-littlearm


Disassembly of section .init:

00011800 <.init>:
   11800:	push	{r3, lr}
   11804:	bl	11a0c <_start@@Base+0x3c>
   11808:	pop	{r3, pc}

Disassembly of section .plt:

0001180c <fdopen@plt-0x14>:
   1180c:	push	{lr}		; (str lr, [sp, #-4]!)
   11810:	ldr	lr, [pc, #4]	; 1181c <fdopen@plt-0x4>
   11814:	add	lr, pc, lr
   11818:	ldr	pc, [lr, #8]!
   1181c:	andeq	r8, r1, r4, ror #15

00011820 <fdopen@plt>:
   11820:	add	ip, pc, #0, 12
   11824:	add	ip, ip, #24, 20	; 0x18000
   11828:	ldr	pc, [ip, #2020]!	; 0x7e4

0001182c <raise@plt>:
   1182c:	add	ip, pc, #0, 12
   11830:	add	ip, ip, #24, 20	; 0x18000
   11834:	ldr	pc, [ip, #2012]!	; 0x7dc

00011838 <setbuf@plt>:
   11838:	add	ip, pc, #0, 12
   1183c:	add	ip, ip, #24, 20	; 0x18000
   11840:	ldr	pc, [ip, #2004]!	; 0x7d4

00011844 <printf@plt>:
   11844:	add	ip, pc, #0, 12
   11848:	add	ip, ip, #24, 20	; 0x18000
   1184c:	ldr	pc, [ip, #1996]!	; 0x7cc

00011850 <fflush@plt>:
   11850:	add	ip, pc, #0, 12
   11854:	add	ip, ip, #24, 20	; 0x18000
   11858:	ldr	pc, [ip, #1988]!	; 0x7c4

0001185c <free@plt>:
   1185c:	add	ip, pc, #0, 12
   11860:	add	ip, ip, #24, 20	; 0x18000
   11864:	ldr	pc, [ip, #1980]!	; 0x7bc

00011868 <memcpy@plt>:
   11868:	add	ip, pc, #0, 12
   1186c:	add	ip, ip, #24, 20	; 0x18000
   11870:	ldr	pc, [ip, #1972]!	; 0x7b4

00011874 <ftell@plt>:
   11874:	add	ip, pc, #0, 12
   11878:	add	ip, ip, #24, 20	; 0x18000
   1187c:	ldr	pc, [ip, #1964]!	; 0x7ac

00011880 <fwrite@plt>:
   11880:	add	ip, pc, #0, 12
   11884:	add	ip, ip, #24, 20	; 0x18000
   11888:	ldr	pc, [ip, #1956]!	; 0x7a4

0001188c <strcpy@plt>:
   1188c:	add	ip, pc, #0, 12
   11890:	add	ip, ip, #24, 20	; 0x18000
   11894:	ldr	pc, [ip, #1948]!	; 0x79c

00011898 <fread@plt>:
   11898:	add	ip, pc, #0, 12
   1189c:	add	ip, ip, #24, 20	; 0x18000
   118a0:	ldr	pc, [ip, #1940]!	; 0x794

000118a4 <open64@plt>:
   118a4:	add	ip, pc, #0, 12
   118a8:	add	ip, ip, #24, 20	; 0x18000
   118ac:	ldr	pc, [ip, #1932]!	; 0x78c

000118b0 <getenv@plt>:
   118b0:	add	ip, pc, #0, 12
   118b4:	add	ip, ip, #24, 20	; 0x18000
   118b8:	ldr	pc, [ip, #1924]!	; 0x784

000118bc <puts@plt>:
   118bc:	add	ip, pc, #0, 12
   118c0:	add	ip, ip, #24, 20	; 0x18000
   118c4:	ldr	pc, [ip, #1916]!	; 0x77c

000118c8 <malloc@plt>:
   118c8:	add	ip, pc, #0, 12
   118cc:	add	ip, ip, #24, 20	; 0x18000
   118d0:	ldr	pc, [ip, #1908]!	; 0x774

000118d4 <__libc_start_main@plt>:
   118d4:	add	ip, pc, #0, 12
   118d8:	add	ip, ip, #24, 20	; 0x18000
   118dc:	ldr	pc, [ip, #1900]!	; 0x76c

000118e0 <__gmon_start__@plt>:
   118e0:	add	ip, pc, #0, 12
   118e4:	add	ip, ip, #24, 20	; 0x18000
   118e8:	ldr	pc, [ip, #1892]!	; 0x764

000118ec <getpid@plt>:
   118ec:	add	ip, pc, #0, 12
   118f0:	add	ip, ip, #24, 20	; 0x18000
   118f4:	ldr	pc, [ip, #1884]!	; 0x75c

000118f8 <exit@plt>:
   118f8:	add	ip, pc, #0, 12
   118fc:	add	ip, ip, #24, 20	; 0x18000
   11900:	ldr	pc, [ip, #1876]!	; 0x754

00011904 <strlen@plt>:
   11904:	add	ip, pc, #0, 12
   11908:	add	ip, ip, #24, 20	; 0x18000
   1190c:	ldr	pc, [ip, #1868]!	; 0x74c

00011910 <fprintf@plt>:
   11910:	add	ip, pc, #0, 12
   11914:	add	ip, ip, #24, 20	; 0x18000
   11918:	ldr	pc, [ip, #1860]!	; 0x744

0001191c <__errno_location@plt>:
   1191c:	add	ip, pc, #0, 12
   11920:	add	ip, ip, #24, 20	; 0x18000
   11924:	ldr	pc, [ip, #1852]!	; 0x73c

00011928 <mkdir@plt>:
   11928:	add	ip, pc, #0, 12
   1192c:	add	ip, ip, #24, 20	; 0x18000
   11930:	ldr	pc, [ip, #1844]!	; 0x734

00011934 <memset@plt>:
   11934:	add	ip, pc, #0, 12
   11938:	add	ip, ip, #24, 20	; 0x18000
   1193c:	ldr	pc, [ip, #1836]!	; 0x72c

00011940 <access@plt>:
   11940:	add	ip, pc, #0, 12
   11944:	add	ip, ip, #24, 20	; 0x18000
   11948:	ldr	pc, [ip, #1828]!	; 0x724

0001194c <fclose@plt>:
   1194c:	add	ip, pc, #0, 12
   11950:	add	ip, ip, #24, 20	; 0x18000
   11954:	ldr	pc, [ip, #1820]!	; 0x71c

00011958 <strnlen@plt>:
   11958:	add	ip, pc, #0, 12
   1195c:	add	ip, ip, #24, 20	; 0x18000
   11960:	ldr	pc, [ip, #1812]!	; 0x714

00011964 <fcntl64@plt>:
   11964:	add	ip, pc, #0, 12
   11968:	add	ip, ip, #24, 20	; 0x18000
   1196c:	ldr	pc, [ip, #1804]!	; 0x70c

00011970 <vfprintf@plt>:
   11970:	add	ip, pc, #0, 12
   11974:	add	ip, ip, #24, 20	; 0x18000
   11978:	ldr	pc, [ip, #1796]!	; 0x704

0001197c <atoi@plt>:
   1197c:	add	ip, pc, #0, 12
   11980:	add	ip, ip, #24, 20	; 0x18000
   11984:	ldr	pc, [ip, #1788]!	; 0x6fc

00011988 <fopen64@plt>:
   11988:	add	ip, pc, #0, 12
   1198c:	add	ip, ip, #24, 20	; 0x18000
   11990:	ldr	pc, [ip, #1780]!	; 0x6f4

00011994 <fseek@plt>:
   11994:	add	ip, pc, #0, 12
   11998:	add	ip, ip, #24, 20	; 0x18000
   1199c:	ldr	pc, [ip, #1772]!	; 0x6ec

000119a0 <strncmp@plt>:
   119a0:	add	ip, pc, #0, 12
   119a4:	add	ip, ip, #24, 20	; 0x18000
   119a8:	ldr	pc, [ip, #1764]!	; 0x6e4

000119ac <abort@plt>:
   119ac:	add	ip, pc, #0, 12
   119b0:	add	ip, ip, #24, 20	; 0x18000
   119b4:	ldr	pc, [ip, #1756]!	; 0x6dc

000119b8 <close@plt>:
   119b8:	add	ip, pc, #0, 12
   119bc:	add	ip, ip, #24, 20	; 0x18000
   119c0:	ldr	pc, [ip, #1748]!	; 0x6d4

000119c4 <__assert_fail@plt>:
   119c4:	add	ip, pc, #0, 12
   119c8:	add	ip, ip, #24, 20	; 0x18000
   119cc:	ldr	pc, [ip, #1740]!	; 0x6cc

Disassembly of section .text:

000119d0 <_start@@Base>:
   119d0:	mov	fp, #0
   119d4:	mov	lr, #0
   119d8:	pop	{r1}		; (ldr r1, [sp], #4)
   119dc:	mov	r2, sp
   119e0:	push	{r2}		; (str r2, [sp, #-4]!)
   119e4:	push	{r0}		; (str r0, [sp, #-4]!)
   119e8:	ldr	ip, [pc, #16]	; 11a00 <_start@@Base+0x30>
   119ec:	push	{ip}		; (str ip, [sp, #-4]!)
   119f0:	ldr	r0, [pc, #12]	; 11a04 <_start@@Base+0x34>
   119f4:	ldr	r3, [pc, #12]	; 11a08 <_start@@Base+0x38>
   119f8:	bl	118d4 <__libc_start_main@plt>
   119fc:	bl	119ac <abort@plt>
   11a00:	andeq	r9, r1, r8, lsr #6
   11a04:	andeq	r4, r1, r8, lsr r3
   11a08:	andeq	r9, r1, r8, asr #5
   11a0c:	ldr	r3, [pc, #20]	; 11a28 <_start@@Base+0x58>
   11a10:	ldr	r2, [pc, #20]	; 11a2c <_start@@Base+0x5c>
   11a14:	add	r3, pc, r3
   11a18:	ldr	r2, [r3, r2]
   11a1c:	cmp	r2, #0
   11a20:	bxeq	lr
   11a24:	b	118e0 <__gmon_start__@plt>
   11a28:	andeq	r8, r1, r4, ror #11
   11a2c:	andeq	r0, r0, r0, lsr #1
   11a30:	ldr	r0, [pc, #24]	; 11a50 <_start@@Base+0x80>
   11a34:	ldr	r3, [pc, #24]	; 11a54 <_start@@Base+0x84>
   11a38:	cmp	r3, r0
   11a3c:	bxeq	lr
   11a40:	ldr	r3, [pc, #16]	; 11a58 <_start@@Base+0x88>
   11a44:	cmp	r3, #0
   11a48:	bxeq	lr
   11a4c:	bx	r3
   11a50:	andeq	sl, r2, r4, ror r9
   11a54:	andeq	sl, r2, r4, ror r9
   11a58:	andeq	r0, r0, r0
   11a5c:	ldr	r0, [pc, #36]	; 11a88 <_start@@Base+0xb8>
   11a60:	ldr	r1, [pc, #36]	; 11a8c <_start@@Base+0xbc>
   11a64:	sub	r1, r1, r0
   11a68:	asr	r1, r1, #2
   11a6c:	add	r1, r1, r1, lsr #31
   11a70:	asrs	r1, r1, #1
   11a74:	bxeq	lr
   11a78:	ldr	r3, [pc, #16]	; 11a90 <_start@@Base+0xc0>
   11a7c:	cmp	r3, #0
   11a80:	bxeq	lr
   11a84:	bx	r3
   11a88:	andeq	sl, r2, r4, ror r9
   11a8c:	andeq	sl, r2, r4, ror r9
   11a90:	andeq	r0, r0, r0
   11a94:	push	{r4, lr}
   11a98:	ldr	r4, [pc, #24]	; 11ab8 <_start@@Base+0xe8>
   11a9c:	ldrb	r3, [r4]
   11aa0:	cmp	r3, #0
   11aa4:	popne	{r4, pc}
   11aa8:	bl	11a30 <_start@@Base+0x60>
   11aac:	mov	r3, #1
   11ab0:	strb	r3, [r4]
   11ab4:	pop	{r4, pc}
   11ab8:	andeq	sl, r2, r0, lsl #19
   11abc:	b	11a5c <_start@@Base+0x8c>

00011ac0 <next@@Base>:
   11ac0:	movw	r3, #47396	; 0xb924
   11ac4:	movt	r3, #2
   11ac8:	str	r0, [r3]
   11acc:	ldr	r3, [r3, #204]	; 0xcc
   11ad0:	cmp	r3, #49	; 0x31
   11ad4:	bhi	11bb8 <next@@Base+0xf8>
   11ad8:	movw	r2, #43400	; 0xa988
   11adc:	movt	r2, #2
   11ae0:	ldr	r1, [r2]
   11ae4:	ldr	ip, [r2, #4]
   11ae8:	adds	r1, r1, #1
   11aec:	adc	ip, ip, #0
   11af0:	str	r1, [r2]
   11af4:	str	ip, [r2, #4]
   11af8:	add	r3, r3, #1
   11afc:	movw	r2, #47396	; 0xb924
   11b00:	movt	r2, #2
   11b04:	str	r0, [r2, r3, lsl #2]
   11b08:	movw	r3, #47396	; 0xb924
   11b0c:	movt	r3, #2
   11b10:	ldr	r2, [r3, #204]	; 0xcc
   11b14:	add	r2, r2, #1
   11b18:	str	r2, [r3, #204]	; 0xcc
   11b1c:	movw	r3, #47632	; 0xba10
   11b20:	movt	r3, #2
   11b24:	ldr	r2, [r3, #200]	; 0xc8
   11b28:	cmp	r2, #49	; 0x31
   11b2c:	bhi	11b6c <next@@Base+0xac>
   11b30:	movw	r3, #43400	; 0xa988
   11b34:	movt	r3, #2
   11b38:	ldr	r1, [r3, #16]
   11b3c:	ldr	ip, [r3, #20]
   11b40:	adds	r1, r1, #1
   11b44:	adc	ip, ip, #0
   11b48:	str	r1, [r3, #16]
   11b4c:	str	ip, [r3, #20]
   11b50:	movw	r3, #47632	; 0xba10
   11b54:	movt	r3, #2
   11b58:	add	r1, r2, #1
   11b5c:	str	r1, [r3, #200]	; 0xc8
   11b60:	movw	r1, #6848	; 0x1ac0
   11b64:	movt	r1, #1
   11b68:	str	r1, [r3, r2, lsl #2]
   11b6c:	movw	r3, #47396	; 0xb924
   11b70:	movt	r3, #2
   11b74:	ldr	r3, [r3, #232]	; 0xe8
   11b78:	cmp	r3, #0
   11b7c:	beq	11bf0 <next@@Base+0x130>
   11b80:	str	r4, [sp, #-8]!
   11b84:	str	lr, [sp, #4]
   11b88:	blx	r3
   11b8c:	movw	r3, #43400	; 0xa988
   11b90:	movt	r3, #2
   11b94:	ldr	r2, [r3, #24]
   11b98:	ldr	r1, [r3, #28]
   11b9c:	adds	r2, r2, #1
   11ba0:	adc	r1, r1, #0
   11ba4:	str	r2, [r3, #24]
   11ba8:	str	r1, [r3, #28]
   11bac:	ldr	r4, [sp]
   11bb0:	add	sp, sp, #4
   11bb4:	pop	{pc}		; (ldr pc, [sp], #4)
   11bb8:	movw	r3, #43400	; 0xa988
   11bbc:	movt	r3, #2
   11bc0:	ldr	r2, [r3, #8]
   11bc4:	ldr	r1, [r3, #12]
   11bc8:	adds	r2, r2, #1
   11bcc:	adc	r1, r1, #0
   11bd0:	str	r2, [r3, #8]
   11bd4:	str	r1, [r3, #12]
   11bd8:	movw	r3, #47396	; 0xb924
   11bdc:	movt	r3, #2
   11be0:	ldr	r2, [r3, #212]	; 0xd4
   11be4:	add	r2, r2, #1
   11be8:	str	r2, [r3, #212]	; 0xd4
   11bec:	b	11b08 <next@@Base+0x48>
   11bf0:	movw	r3, #47396	; 0xb924
   11bf4:	movt	r3, #2
   11bf8:	ldr	r3, [r3, #220]	; 0xdc
   11bfc:	cmp	r3, #0
   11c00:	beq	11c8c <next@@Base+0x1cc>
   11c04:	movw	r2, #47396	; 0xb924
   11c08:	movt	r2, #2
   11c0c:	ldr	r2, [r2, #224]	; 0xe0
   11c10:	cmp	r3, r2
   11c14:	ble	11c54 <next@@Base+0x194>
   11c18:	movw	r3, #43400	; 0xa988
   11c1c:	movt	r3, #2
   11c20:	ldr	r1, [r3, #40]	; 0x28
   11c24:	ldr	r0, [r3, #44]	; 0x2c
   11c28:	adds	r1, r1, #1
   11c2c:	adc	r0, r0, #0
   11c30:	str	r1, [r3, #40]	; 0x28
   11c34:	str	r0, [r3, #44]	; 0x2c
   11c38:	movw	r3, #47396	; 0xb924
   11c3c:	movt	r3, #2
   11c40:	ldr	r1, [r3, #228]	; 0xe4
   11c44:	add	r0, r2, #1
   11c48:	str	r0, [r3, #224]	; 0xe0
   11c4c:	ldr	r0, [r1, r2, lsl #2]
   11c50:	bx	lr
   11c54:	movw	r2, #43400	; 0xa988
   11c58:	movt	r2, #2
   11c5c:	ldr	r1, [r2, #48]	; 0x30
   11c60:	ldr	r0, [r2, #52]	; 0x34
   11c64:	adds	r1, r1, #1
   11c68:	adc	r0, r0, #0
   11c6c:	str	r1, [r2, #48]	; 0x30
   11c70:	str	r0, [r2, #52]	; 0x34
   11c74:	movw	r2, #47396	; 0xb924
   11c78:	movt	r2, #2
   11c7c:	sub	r3, r3, #-1073741823	; 0xc0000001
   11c80:	ldr	r2, [r2, #228]	; 0xe4
   11c84:	ldr	r0, [r2, r3, lsl #2]
   11c88:	bx	lr
   11c8c:	movw	r3, #43400	; 0xa988
   11c90:	movt	r3, #2
   11c94:	ldr	r2, [r3, #32]
   11c98:	ldr	r1, [r3, #36]	; 0x24
   11c9c:	adds	r2, r2, #1
   11ca0:	adc	r1, r1, #0
   11ca4:	str	r2, [r3, #32]
   11ca8:	str	r1, [r3, #36]	; 0x24
   11cac:	movw	r3, #47396	; 0xb924
   11cb0:	movt	r3, #2
   11cb4:	ldr	r0, [r3, #216]	; 0xd8
   11cb8:	bx	lr

00011cbc <push_back@@Base>:
   11cbc:	str	r4, [sp, #-8]!
   11cc0:	str	lr, [sp, #4]
   11cc4:	movw	r3, #46972	; 0xb77c
   11cc8:	movt	r3, #2
   11ccc:	str	r0, [r3]
   11cd0:	str	r1, [r3, #204]	; 0xcc
   11cd4:	ldr	r3, [r3, #408]	; 0x198
   11cd8:	cmp	r3, #49	; 0x31
   11cdc:	bhi	11dc4 <push_back@@Base+0x108>
   11ce0:	movw	r2, #43400	; 0xa988
   11ce4:	movt	r2, #2
   11ce8:	ldr	ip, [r2, #56]	; 0x38
   11cec:	ldr	lr, [r2, #60]	; 0x3c
   11cf0:	adds	ip, ip, #1
   11cf4:	adc	lr, lr, #0
   11cf8:	str	ip, [r2, #56]	; 0x38
   11cfc:	str	lr, [r2, #60]	; 0x3c
   11d00:	add	r3, r3, #1
   11d04:	movw	r2, #46972	; 0xb77c
   11d08:	movt	r2, #2
   11d0c:	str	r0, [r2, r3, lsl #2]
   11d10:	ldr	r3, [r2, #408]	; 0x198
   11d14:	add	r3, r3, #52	; 0x34
   11d18:	str	r1, [r2, r3, lsl #2]
   11d1c:	movw	r3, #46972	; 0xb77c
   11d20:	movt	r3, #2
   11d24:	ldr	r2, [r3, #408]	; 0x198
   11d28:	add	r2, r2, #1
   11d2c:	str	r2, [r3, #408]	; 0x198
   11d30:	movw	r3, #47632	; 0xba10
   11d34:	movt	r3, #2
   11d38:	ldr	r2, [r3, #200]	; 0xc8
   11d3c:	cmp	r2, #49	; 0x31
   11d40:	bhi	11d80 <push_back@@Base+0xc4>
   11d44:	movw	r3, #43400	; 0xa988
   11d48:	movt	r3, #2
   11d4c:	ldr	ip, [r3, #72]	; 0x48
   11d50:	ldr	lr, [r3, #76]	; 0x4c
   11d54:	adds	ip, ip, #1
   11d58:	adc	lr, lr, #0
   11d5c:	str	ip, [r3, #72]	; 0x48
   11d60:	str	lr, [r3, #76]	; 0x4c
   11d64:	movw	r3, #47632	; 0xba10
   11d68:	movt	r3, #2
   11d6c:	add	ip, r2, #1
   11d70:	str	ip, [r3, #200]	; 0xc8
   11d74:	movw	ip, #7356	; 0x1cbc
   11d78:	movt	ip, #1
   11d7c:	str	ip, [r3, r2, lsl #2]
   11d80:	movw	r3, #46972	; 0xb77c
   11d84:	movt	r3, #2
   11d88:	ldr	r3, [r3, #420]	; 0x1a4
   11d8c:	cmp	r3, #0
   11d90:	beq	11dfc <push_back@@Base+0x140>
   11d94:	blx	r3
   11d98:	movw	r3, #43400	; 0xa988
   11d9c:	movt	r3, #2
   11da0:	ldr	r2, [r3, #88]	; 0x58
   11da4:	ldr	r1, [r3, #92]	; 0x5c
   11da8:	adds	r2, r2, #1
   11dac:	adc	r1, r1, #0
   11db0:	str	r2, [r3, #88]	; 0x58
   11db4:	str	r1, [r3, #92]	; 0x5c
   11db8:	ldr	r4, [sp]
   11dbc:	add	sp, sp, #4
   11dc0:	pop	{pc}		; (ldr pc, [sp], #4)
   11dc4:	movw	r3, #43400	; 0xa988
   11dc8:	movt	r3, #2
   11dcc:	ldr	r2, [r3, #64]	; 0x40
   11dd0:	ldr	ip, [r3, #68]	; 0x44
   11dd4:	adds	r2, r2, #1
   11dd8:	adc	ip, ip, #0
   11ddc:	str	r2, [r3, #64]	; 0x40
   11de0:	str	ip, [r3, #68]	; 0x44
   11de4:	movw	r3, #46972	; 0xb77c
   11de8:	movt	r3, #2
   11dec:	ldr	r2, [r3, #416]	; 0x1a0
   11df0:	add	r2, r2, #1
   11df4:	str	r2, [r3, #416]	; 0x1a0
   11df8:	b	11d1c <push_back@@Base+0x60>
   11dfc:	movw	r3, #43400	; 0xa988
   11e00:	movt	r3, #2
   11e04:	ldr	r2, [r3, #80]	; 0x50
   11e08:	ldr	r1, [r3, #84]	; 0x54
   11e0c:	adds	r2, r2, #1
   11e10:	adc	r1, r1, #0
   11e14:	str	r2, [r3, #80]	; 0x50
   11e18:	str	r1, [r3, #84]	; 0x54
   11e1c:	b	11db8 <push_back@@Base+0xfc>

00011e20 <next_reset@@Base>:
   11e20:	str	r4, [sp, #-8]!
   11e24:	str	lr, [sp, #4]
   11e28:	movw	r3, #43400	; 0xa988
   11e2c:	movt	r3, #2
   11e30:	ldr	r2, [r3, #96]	; 0x60
   11e34:	ldr	r1, [r3, #100]	; 0x64
   11e38:	adds	r2, r2, #1
   11e3c:	adc	r1, r1, #0
   11e40:	str	r2, [r3, #96]	; 0x60
   11e44:	str	r1, [r3, #100]	; 0x64
   11e48:	movw	r4, #47396	; 0xb924
   11e4c:	movt	r4, #2
   11e50:	mov	r2, #236	; 0xec
   11e54:	mov	r1, #0
   11e58:	mov	r0, r4
   11e5c:	bl	11934 <memset@plt>
   11e60:	mov	r3, #50	; 0x32
   11e64:	str	r3, [r4, #208]	; 0xd0
   11e68:	ldr	r4, [sp]
   11e6c:	add	sp, sp, #4
   11e70:	pop	{pc}		; (ldr pc, [sp], #4)

00011e74 <push_back_reset@@Base>:
   11e74:	str	r4, [sp, #-8]!
   11e78:	str	lr, [sp, #4]
   11e7c:	movw	r3, #43400	; 0xa988
   11e80:	movt	r3, #2
   11e84:	ldr	r2, [r3, #104]	; 0x68
   11e88:	ldr	r1, [r3, #108]	; 0x6c
   11e8c:	adds	r2, r2, #1
   11e90:	adc	r1, r1, #0
   11e94:	str	r2, [r3, #104]	; 0x68
   11e98:	str	r1, [r3, #108]	; 0x6c
   11e9c:	movw	r4, #46972	; 0xb77c
   11ea0:	movt	r4, #2
   11ea4:	mov	r2, #424	; 0x1a8
   11ea8:	mov	r1, #0
   11eac:	mov	r0, r4
   11eb0:	bl	11934 <memset@plt>
   11eb4:	mov	r3, #50	; 0x32
   11eb8:	str	r3, [r4, #412]	; 0x19c
   11ebc:	ldr	r4, [sp]
   11ec0:	add	sp, sp, #4
   11ec4:	pop	{pc}		; (ldr pc, [sp], #4)

00011ec8 <setup@@Base>:
   11ec8:	str	r4, [sp, #-8]!
   11ecc:	str	lr, [sp, #4]
   11ed0:	movw	r4, #43400	; 0xa988
   11ed4:	movt	r4, #2
   11ed8:	ldr	r3, [r4, #112]	; 0x70
   11edc:	ldr	r2, [r4, #116]	; 0x74
   11ee0:	adds	r3, r3, #1
   11ee4:	adc	r2, r2, #0
   11ee8:	str	r3, [r4, #112]	; 0x70
   11eec:	str	r2, [r4, #116]	; 0x74
   11ef0:	bl	11e20 <next_reset@@Base>
   11ef4:	ldr	r3, [r4, #120]	; 0x78
   11ef8:	ldr	r2, [r4, #124]	; 0x7c
   11efc:	adds	r3, r3, #1
   11f00:	adc	r2, r2, #0
   11f04:	str	r3, [r4, #120]	; 0x78
   11f08:	str	r2, [r4, #124]	; 0x7c
   11f0c:	bl	11e74 <push_back_reset@@Base>
   11f10:	ldr	r3, [r4, #128]	; 0x80
   11f14:	ldr	r2, [r4, #132]	; 0x84
   11f18:	adds	r3, r3, #1
   11f1c:	adc	r2, r2, #0
   11f20:	str	r3, [r4, #128]	; 0x80
   11f24:	str	r2, [r4, #132]	; 0x84
   11f28:	ldr	r4, [sp]
   11f2c:	add	sp, sp, #4
   11f30:	pop	{pc}		; (ldr pc, [sp], #4)

00011f34 <no_int_as_first_stuff@@Base>:
   11f34:	strd	r4, [sp, #-12]!
   11f38:	str	lr, [sp, #8]
   11f3c:	sub	sp, sp, #20
   11f40:	movw	r4, #43400	; 0xa988
   11f44:	movt	r4, #2
   11f48:	ldr	r3, [r4, #136]	; 0x88
   11f4c:	ldr	r2, [r4, #140]	; 0x8c
   11f50:	adds	r3, r3, #1
   11f54:	adc	r2, r2, #0
   11f58:	str	r3, [r4, #136]	; 0x88
   11f5c:	str	r2, [r4, #140]	; 0x8c
   11f60:	add	r1, sp, #4
   11f64:	mov	r0, sp
   11f68:	bl	15d78 <init_grammar@@Base>
   11f6c:	ldr	r3, [r4, #144]	; 0x90
   11f70:	ldr	r2, [r4, #148]	; 0x94
   11f74:	adds	r3, r3, #1
   11f78:	adc	r2, r2, #0
   11f7c:	str	r3, [r4, #144]	; 0x90
   11f80:	str	r2, [r4, #148]	; 0x94
   11f84:	mov	r0, #4
   11f88:	bl	118c8 <malloc@plt>
   11f8c:	mov	r5, r0
   11f90:	bl	14be0 <init_token_opar@@Base>
   11f94:	ldr	r3, [r4, #152]	; 0x98
   11f98:	ldr	r2, [r4, #156]	; 0x9c
   11f9c:	adds	r3, r3, #1
   11fa0:	adc	r2, r2, #0
   11fa4:	str	r3, [r4, #152]	; 0x98
   11fa8:	str	r2, [r4, #156]	; 0x9c
   11fac:	movw	r4, #47396	; 0xb924
   11fb0:	movt	r4, #2
   11fb4:	str	r5, [r4, #216]	; 0xd8
   11fb8:	mov	r0, sp
   11fbc:	bl	16ca8 <read_function_ast_node@@Base>
   11fc0:	ldr	r3, [r4, #204]	; 0xcc
   11fc4:	cmp	r3, #1
   11fc8:	bne	12004 <no_int_as_first_stuff@@Base+0xd0>
   11fcc:	cmp	r0, #0
   11fd0:	bne	12044 <no_int_as_first_stuff@@Base+0x110>
   11fd4:	movw	r3, #43400	; 0xa988
   11fd8:	movt	r3, #2
   11fdc:	ldr	r2, [r3, #168]	; 0xa8
   11fe0:	ldr	r1, [r3, #172]	; 0xac
   11fe4:	adds	r2, r2, #1
   11fe8:	adc	r1, r1, #0
   11fec:	str	r2, [r3, #168]	; 0xa8
   11ff0:	str	r1, [r3, #172]	; 0xac
   11ff4:	add	sp, sp, #20
   11ff8:	ldrd	r4, [sp]
   11ffc:	add	sp, sp, #8
   12000:	pop	{pc}		; (ldr pc, [sp], #4)
   12004:	movw	r3, #43400	; 0xa988
   12008:	movt	r3, #2
   1200c:	ldr	r2, [r3, #160]	; 0xa0
   12010:	ldr	r1, [r3, #164]	; 0xa4
   12014:	adds	r2, r2, #1
   12018:	adc	r1, r1, #0
   1201c:	str	r2, [r3, #160]	; 0xa0
   12020:	str	r1, [r3, #164]	; 0xa4
   12024:	movw	r3, #37688	; 0x9338
   12028:	movt	r3, #1
   1202c:	mov	r2, #41	; 0x29
   12030:	movw	r1, #38056	; 0x94a8
   12034:	movt	r1, #1
   12038:	movw	r0, #38124	; 0x94ec
   1203c:	movt	r0, #1
   12040:	bl	119c4 <__assert_fail@plt>
   12044:	movw	r3, #43400	; 0xa988
   12048:	movt	r3, #2
   1204c:	ldr	r2, [r3, #176]	; 0xb0
   12050:	ldr	r1, [r3, #180]	; 0xb4
   12054:	adds	r2, r2, #1
   12058:	adc	r1, r1, #0
   1205c:	str	r2, [r3, #176]	; 0xb0
   12060:	str	r1, [r3, #180]	; 0xb4
   12064:	movw	r3, #37688	; 0x9338
   12068:	movt	r3, #1
   1206c:	mov	r2, #42	; 0x2a
   12070:	movw	r1, #38056	; 0x94a8
   12074:	movt	r1, #1
   12078:	movw	r0, #38152	; 0x9508
   1207c:	movt	r0, #1
   12080:	bl	119c4 <__assert_fail@plt>

00012084 <int_but_not_followed_by_function@@Base>:
   12084:	strd	r4, [sp, #-12]!
   12088:	str	lr, [sp, #8]
   1208c:	sub	sp, sp, #20
   12090:	movw	r4, #43400	; 0xa988
   12094:	movt	r4, #2
   12098:	ldr	r3, [r4, #184]	; 0xb8
   1209c:	ldr	r2, [r4, #188]	; 0xbc
   120a0:	adds	r3, r3, #1
   120a4:	adc	r2, r2, #0
   120a8:	str	r3, [r4, #184]	; 0xb8
   120ac:	str	r2, [r4, #188]	; 0xbc
   120b0:	add	r1, sp, #4
   120b4:	mov	r0, sp
   120b8:	bl	15d78 <init_grammar@@Base>
   120bc:	ldr	r3, [r4, #192]	; 0xc0
   120c0:	ldr	r2, [r4, #196]	; 0xc4
   120c4:	adds	r3, r3, #1
   120c8:	adc	r2, r2, #0
   120cc:	str	r3, [r4, #192]	; 0xc0
   120d0:	str	r2, [r4, #196]	; 0xc4
   120d4:	mov	r0, #8
   120d8:	bl	118c8 <malloc@plt>
   120dc:	mov	r5, r0
   120e0:	mov	r0, #4
   120e4:	bl	118c8 <malloc@plt>
   120e8:	str	r0, [r5]
   120ec:	bl	14b54 <init_token_int_type@@Base>
   120f0:	ldr	r3, [r4, #200]	; 0xc8
   120f4:	ldr	r2, [r4, #204]	; 0xcc
   120f8:	adds	r3, r3, #1
   120fc:	adc	r2, r2, #0
   12100:	str	r3, [r4, #200]	; 0xc8
   12104:	str	r2, [r4, #204]	; 0xcc
   12108:	mov	r0, #4
   1210c:	bl	118c8 <malloc@plt>
   12110:	str	r0, [r5, #4]
   12114:	bl	14be0 <init_token_opar@@Base>
   12118:	ldr	r3, [r4, #208]	; 0xd0
   1211c:	ldr	r2, [r4, #212]	; 0xd4
   12120:	adds	r3, r3, #1
   12124:	adc	r2, r2, #0
   12128:	str	r3, [r4, #208]	; 0xd0
   1212c:	str	r2, [r4, #212]	; 0xd4
   12130:	movw	r4, #47396	; 0xb924
   12134:	movt	r4, #2
   12138:	str	r5, [r4, #228]	; 0xe4
   1213c:	mov	r3, #2
   12140:	str	r3, [r4, #220]	; 0xdc
   12144:	mov	r0, sp
   12148:	bl	16ca8 <read_function_ast_node@@Base>
   1214c:	ldr	r3, [r4, #204]	; 0xcc
   12150:	cmp	r3, #2
   12154:	bne	12190 <int_but_not_followed_by_function@@Base+0x10c>
   12158:	cmp	r0, #0
   1215c:	bne	121cc <int_but_not_followed_by_function@@Base+0x148>
   12160:	movw	r3, #43400	; 0xa988
   12164:	movt	r3, #2
   12168:	ldr	r2, [r3, #224]	; 0xe0
   1216c:	ldr	r1, [r3, #228]	; 0xe4
   12170:	adds	r2, r2, #1
   12174:	adc	r1, r1, #0
   12178:	str	r2, [r3, #224]	; 0xe0
   1217c:	str	r1, [r3, #228]	; 0xe4
   12180:	add	sp, sp, #20
   12184:	ldrd	r4, [sp]
   12188:	add	sp, sp, #8
   1218c:	pop	{pc}		; (ldr pc, [sp], #4)
   12190:	movw	r3, #43400	; 0xa988
   12194:	movt	r3, #2
   12198:	ldr	r2, [r3, #216]	; 0xd8
   1219c:	ldr	r1, [r3, #220]	; 0xdc
   121a0:	adds	r2, r2, #1
   121a4:	adc	r1, r1, #0
   121a8:	str	r2, [r3, #216]	; 0xd8
   121ac:	str	r1, [r3, #220]	; 0xdc
   121b0:	ldr	r3, [pc, #80]	; 12208 <int_but_not_followed_by_function@@Base+0x184>
   121b4:	mov	r2, #67	; 0x43
   121b8:	movw	r1, #38056	; 0x94a8
   121bc:	movt	r1, #1
   121c0:	movw	r0, #38164	; 0x9514
   121c4:	movt	r0, #1
   121c8:	bl	119c4 <__assert_fail@plt>
   121cc:	movw	r3, #43400	; 0xa988
   121d0:	movt	r3, #2
   121d4:	ldr	r2, [r3, #232]	; 0xe8
   121d8:	ldr	r1, [r3, #236]	; 0xec
   121dc:	adds	r2, r2, #1
   121e0:	adc	r1, r1, #0
   121e4:	str	r2, [r3, #232]	; 0xe8
   121e8:	str	r1, [r3, #236]	; 0xec
   121ec:	ldr	r3, [pc, #20]	; 12208 <int_but_not_followed_by_function@@Base+0x184>
   121f0:	mov	r2, #68	; 0x44
   121f4:	movw	r1, #38056	; 0x94a8
   121f8:	movt	r1, #1
   121fc:	movw	r0, #38152	; 0x9508
   12200:	movt	r0, #1
   12204:	bl	119c4 <__assert_fail@plt>
   12208:	andeq	r9, r1, r0, asr r3

0001220c <boolean_expression_is_read_properly@@Base>:
   1220c:	strd	r4, [sp, #-20]!	; 0xffffffec
   12210:	strd	r6, [sp, #8]
   12214:	str	lr, [sp, #16]
   12218:	sub	sp, sp, #20
   1221c:	movw	r4, #43400	; 0xa988
   12220:	movt	r4, #2
   12224:	ldr	r3, [r4, #240]	; 0xf0
   12228:	ldr	r2, [r4, #244]	; 0xf4
   1222c:	adds	r3, r3, #1
   12230:	adc	r2, r2, #0
   12234:	str	r3, [r4, #240]	; 0xf0
   12238:	str	r2, [r4, #244]	; 0xf4
   1223c:	mov	r0, #3
   12240:	bl	118c8 <malloc@plt>
   12244:	mov	r7, r0
   12248:	mov	r3, #33	; 0x21
   1224c:	strb	r3, [r0]
   12250:	mov	r3, #61	; 0x3d
   12254:	strb	r3, [r0, #1]
   12258:	mov	r3, #0
   1225c:	strb	r3, [r0, #2]
   12260:	add	r1, sp, #4
   12264:	mov	r0, sp
   12268:	bl	15d78 <init_grammar@@Base>
   1226c:	ldr	r3, [r4, #248]	; 0xf8
   12270:	ldr	r2, [r4, #252]	; 0xfc
   12274:	adds	r3, r3, #1
   12278:	adc	r2, r2, #0
   1227c:	str	r3, [r4, #248]	; 0xf8
   12280:	str	r2, [r4, #252]	; 0xfc
   12284:	mov	r0, #20
   12288:	bl	118c8 <malloc@plt>
   1228c:	mov	r6, r0
   12290:	mov	r0, #8
   12294:	bl	118c8 <malloc@plt>
   12298:	str	r0, [r6]
   1229c:	mov	r1, #2
   122a0:	bl	14b80 <init_token_int_value@@Base>
   122a4:	ldr	r3, [r4, #256]	; 0x100
   122a8:	ldr	r1, [r4, #260]	; 0x104
   122ac:	adds	r3, r3, #1
   122b0:	adc	r1, r1, #0
   122b4:	str	r3, [r4, #256]	; 0x100
   122b8:	str	r1, [r4, #260]	; 0x104
   122bc:	mov	r0, #8
   122c0:	bl	118c8 <malloc@plt>
   122c4:	str	r0, [r6, #4]
   122c8:	mov	r1, #2
   122cc:	bl	14b80 <init_token_int_value@@Base>
   122d0:	add	r5, r4, #272	; 0x110
   122d4:	ldr	r3, [r4, #264]	; 0x108
   122d8:	ldr	r2, [r4, #268]	; 0x10c
   122dc:	adds	r3, r3, #1
   122e0:	adc	r2, r2, #0
   122e4:	str	r3, [r4, #264]	; 0x108
   122e8:	str	r2, [r4, #268]	; 0x10c
   122ec:	mov	r0, #8
   122f0:	bl	118c8 <malloc@plt>
   122f4:	str	r0, [r6, #8]
   122f8:	mov	r1, r7
   122fc:	bl	14d6c <init_token_boolean_op@@Base>
   12300:	ldr	r3, [r4, #272]	; 0x110
   12304:	ldr	r2, [r4, #276]	; 0x114
   12308:	adds	r3, r3, #1
   1230c:	adc	r2, r2, #0
   12310:	str	r3, [r4, #272]	; 0x110
   12314:	str	r2, [r4, #276]	; 0x114
   12318:	mov	r0, #8
   1231c:	bl	118c8 <malloc@plt>
   12320:	str	r0, [r6, #12]
   12324:	mov	r1, #1
   12328:	bl	14b80 <init_token_int_value@@Base>
   1232c:	ldr	r3, [r4, #280]	; 0x118
   12330:	ldr	r2, [r4, #284]	; 0x11c
   12334:	adds	r3, r3, #1
   12338:	adc	r2, r2, #0
   1233c:	str	r3, [r4, #280]	; 0x118
   12340:	str	r2, [r4, #284]	; 0x11c
   12344:	mov	r0, #4
   12348:	bl	118c8 <malloc@plt>
   1234c:	str	r0, [r6, #16]
   12350:	bl	14c0c <init_token_cpar@@Base>
   12354:	ldr	r3, [r4, #288]	; 0x120
   12358:	ldr	r2, [r4, #292]	; 0x124
   1235c:	adds	r3, r3, #1
   12360:	adc	r2, r2, #0
   12364:	str	r3, [r4, #288]	; 0x120
   12368:	str	r2, [r4, #292]	; 0x124
   1236c:	movw	r4, #47396	; 0xb924
   12370:	movt	r4, #2
   12374:	str	r6, [r4, #228]	; 0xe4
   12378:	mov	r3, #5
   1237c:	str	r3, [r4, #220]	; 0xdc
   12380:	mov	r0, sp
   12384:	bl	165f4 <read_boolean_expression@@Base>
   12388:	ldr	r3, [r4, #204]	; 0xcc
   1238c:	cmp	r3, #5
   12390:	bne	123e4 <boolean_expression_is_read_properly@@Base+0x1d8>
   12394:	movw	r3, #46972	; 0xb77c
   12398:	movt	r3, #2
   1239c:	ldr	r3, [r3, #408]	; 0x198
   123a0:	cmp	r3, #1
   123a4:	bne	1241c <boolean_expression_is_read_properly@@Base+0x210>
   123a8:	ldr	r3, [r0]
   123ac:	cmp	r3, #5
   123b0:	bne	12454 <boolean_expression_is_read_properly@@Base+0x248>
   123b4:	ldr	r2, [pc, #208]	; 1248c <boolean_expression_is_read_properly@@Base+0x280>
   123b8:	ldr	r3, [r2, #-8]
   123bc:	ldr	r1, [r2, #-4]
   123c0:	adds	r3, r3, #1
   123c4:	adc	r1, r1, #0
   123c8:	str	r3, [r2, #-8]
   123cc:	str	r1, [r2, #-4]
   123d0:	add	sp, sp, #20
   123d4:	ldrd	r4, [sp]
   123d8:	ldrd	r6, [sp, #8]
   123dc:	add	sp, sp, #16
   123e0:	pop	{pc}		; (ldr pc, [sp], #4)
   123e4:	add	r2, r5, #32
   123e8:	ldr	r3, [r2, #-8]
   123ec:	ldr	r1, [r2, #-4]
   123f0:	adds	r3, r3, #1
   123f4:	adc	r1, r1, #0
   123f8:	str	r3, [r2, #-8]
   123fc:	str	r1, [r2, #-4]
   12400:	ldr	r3, [pc, #136]	; 12490 <boolean_expression_is_read_properly@@Base+0x284>
   12404:	mov	r2, #105	; 0x69
   12408:	movw	r1, #38056	; 0x94a8
   1240c:	movt	r1, #1
   12410:	movw	r0, #38192	; 0x9530
   12414:	movt	r0, #1
   12418:	bl	119c4 <__assert_fail@plt>
   1241c:	ldr	r2, [pc, #112]	; 12494 <boolean_expression_is_read_properly@@Base+0x288>
   12420:	ldr	r3, [r2]
   12424:	ldr	r1, [r2, #4]
   12428:	adds	r3, r3, #1
   1242c:	adc	r1, r1, #0
   12430:	str	r3, [r2]
   12434:	str	r1, [r2, #4]
   12438:	ldr	r3, [pc, #80]	; 12490 <boolean_expression_is_read_properly@@Base+0x284>
   1243c:	mov	r2, #106	; 0x6a
   12440:	movw	r1, #38056	; 0x94a8
   12444:	movt	r1, #1
   12448:	movw	r0, #38220	; 0x954c
   1244c:	movt	r0, #1
   12450:	bl	119c4 <__assert_fail@plt>
   12454:	ldr	r2, [pc, #48]	; 1248c <boolean_expression_is_read_properly@@Base+0x280>
   12458:	ldr	r3, [r2]
   1245c:	ldr	r1, [r2, #4]
   12460:	adds	r3, r3, #1
   12464:	adc	r1, r1, #0
   12468:	str	r3, [r2]
   1246c:	str	r1, [r2, #4]
   12470:	ldr	r3, [pc, #24]	; 12490 <boolean_expression_is_read_properly@@Base+0x284>
   12474:	mov	r2, #107	; 0x6b
   12478:	movw	r1, #38056	; 0x94a8
   1247c:	movt	r1, #1
   12480:	movw	r0, #38252	; 0x956c
   12484:	movt	r0, #1
   12488:	bl	119c4 <__assert_fail@plt>
   1248c:	andeq	sl, r2, r8, asr #21
   12490:	andeq	r9, r1, r4, ror r3
   12494:			; <UNDEFINED> instruction: 0x0002aab8

00012498 <boolean_expression_complex@@Base>:
   12498:	strd	r4, [sp, #-24]!	; 0xffffffe8
   1249c:	strd	r6, [sp, #8]
   124a0:	str	r8, [sp, #16]
   124a4:	str	lr, [sp, #20]
   124a8:	sub	sp, sp, #16
   124ac:	ldr	r4, [pc, #808]	; 127dc <boolean_expression_complex@@Base+0x344>
   124b0:	ldr	r3, [r4, #-8]
   124b4:	ldr	r2, [r4, #-4]
   124b8:	adds	r3, r3, #1
   124bc:	adc	r2, r2, #0
   124c0:	str	r3, [r4, #-8]
   124c4:	str	r2, [r4, #-4]
   124c8:	mov	r0, #3
   124cc:	bl	118c8 <malloc@plt>
   124d0:	mov	r8, r0
   124d4:	mov	r0, #3
   124d8:	bl	118c8 <malloc@plt>
   124dc:	mov	r7, r0
   124e0:	mov	r0, #3
   124e4:	bl	118c8 <malloc@plt>
   124e8:	mov	r6, r0
   124ec:	mov	r3, #60	; 0x3c
   124f0:	strb	r3, [r8]
   124f4:	mov	r2, #61	; 0x3d
   124f8:	strb	r2, [r8, #1]
   124fc:	mov	r3, #0
   12500:	strb	r3, [r8, #2]
   12504:	mov	r1, #38	; 0x26
   12508:	strb	r1, [r7]
   1250c:	strb	r1, [r7, #1]
   12510:	strb	r3, [r7, #2]
   12514:	strb	r2, [r0]
   12518:	strb	r2, [r0, #1]
   1251c:	strb	r3, [r0, #2]
   12520:	add	r1, sp, #4
   12524:	mov	r0, sp
   12528:	bl	15d78 <init_grammar@@Base>
   1252c:	ldr	r3, [r4]
   12530:	ldr	r2, [r4, #4]
   12534:	adds	r3, r3, #1
   12538:	adc	r2, r2, #0
   1253c:	str	r3, [r4]
   12540:	str	r2, [r4, #4]
   12544:	mov	r0, #40	; 0x28
   12548:	bl	118c8 <malloc@plt>
   1254c:	mov	r5, r0
   12550:	mov	r0, #8
   12554:	bl	118c8 <malloc@plt>
   12558:	str	r0, [r5]
   1255c:	mov	r1, #2
   12560:	bl	14b80 <init_token_int_value@@Base>
   12564:	ldr	r3, [r4, #8]
   12568:	ldr	r2, [r4, #12]
   1256c:	adds	r3, r3, #1
   12570:	adc	r2, r2, #0
   12574:	str	r3, [r4, #8]
   12578:	str	r2, [r4, #12]
   1257c:	mov	r0, #8
   12580:	bl	118c8 <malloc@plt>
   12584:	str	r0, [r5, #4]
   12588:	mov	r1, #2
   1258c:	bl	14b80 <init_token_int_value@@Base>
   12590:	ldr	r3, [r4, #16]
   12594:	ldr	r2, [r4, #20]
   12598:	adds	r3, r3, #1
   1259c:	adc	r2, r2, #0
   125a0:	str	r3, [r4, #16]
   125a4:	str	r2, [r4, #20]
   125a8:	mov	r0, #8
   125ac:	bl	118c8 <malloc@plt>
   125b0:	str	r0, [r5, #8]
   125b4:	mov	r1, r8
   125b8:	bl	14d6c <init_token_boolean_op@@Base>
   125bc:	ldr	r3, [r4, #24]
   125c0:	ldr	r2, [r4, #28]
   125c4:	adds	r3, r3, #1
   125c8:	adc	r2, r2, #0
   125cc:	str	r3, [r4, #24]
   125d0:	str	r2, [r4, #28]
   125d4:	mov	r0, #8
   125d8:	bl	118c8 <malloc@plt>
   125dc:	str	r0, [r5, #12]
   125e0:	mov	r1, #1
   125e4:	bl	14b80 <init_token_int_value@@Base>
   125e8:	ldr	r3, [r4, #32]
   125ec:	ldr	r2, [r4, #36]	; 0x24
   125f0:	adds	r3, r3, #1
   125f4:	adc	r2, r2, #0
   125f8:	str	r3, [r4, #32]
   125fc:	str	r2, [r4, #36]	; 0x24
   12600:	mov	r0, #8
   12604:	bl	118c8 <malloc@plt>
   12608:	str	r0, [r5, #16]
   1260c:	mov	r1, r7
   12610:	bl	14d6c <init_token_boolean_op@@Base>
   12614:	ldr	r3, [r4, #40]	; 0x28
   12618:	ldr	r2, [r4, #44]	; 0x2c
   1261c:	adds	r3, r3, #1
   12620:	adc	r2, r2, #0
   12624:	str	r3, [r4, #40]	; 0x28
   12628:	str	r2, [r4, #44]	; 0x2c
   1262c:	mov	r0, #8
   12630:	bl	118c8 <malloc@plt>
   12634:	str	r0, [r5, #20]
   12638:	mov	r1, #4
   1263c:	bl	14b80 <init_token_int_value@@Base>
   12640:	ldr	r3, [r4, #48]	; 0x30
   12644:	ldr	r2, [r4, #52]	; 0x34
   12648:	adds	r3, r3, #1
   1264c:	adc	r2, r2, #0
   12650:	str	r3, [r4, #48]	; 0x30
   12654:	str	r2, [r4, #52]	; 0x34
   12658:	mov	r0, #8
   1265c:	bl	118c8 <malloc@plt>
   12660:	str	r0, [r5, #24]
   12664:	mov	r1, #4
   12668:	bl	14b80 <init_token_int_value@@Base>
   1266c:	ldr	r3, [r4, #56]	; 0x38
   12670:	ldr	r2, [r4, #60]	; 0x3c
   12674:	adds	r3, r3, #1
   12678:	adc	r2, r2, #0
   1267c:	str	r3, [r4, #56]	; 0x38
   12680:	str	r2, [r4, #60]	; 0x3c
   12684:	mov	r0, #8
   12688:	bl	118c8 <malloc@plt>
   1268c:	str	r0, [r5, #28]
   12690:	mov	r1, r6
   12694:	bl	14d6c <init_token_boolean_op@@Base>
   12698:	ldr	r3, [r4, #64]	; 0x40
   1269c:	ldr	r2, [r4, #68]	; 0x44
   126a0:	adds	r3, r3, #1
   126a4:	adc	r2, r2, #0
   126a8:	str	r3, [r4, #64]	; 0x40
   126ac:	str	r2, [r4, #68]	; 0x44
   126b0:	mov	r0, #8
   126b4:	bl	118c8 <malloc@plt>
   126b8:	str	r0, [r5, #32]
   126bc:	mov	r1, #4
   126c0:	bl	14b80 <init_token_int_value@@Base>
   126c4:	ldr	r3, [r4, #72]	; 0x48
   126c8:	ldr	r2, [r4, #76]	; 0x4c
   126cc:	adds	r3, r3, #1
   126d0:	adc	r2, r2, #0
   126d4:	str	r3, [r4, #72]	; 0x48
   126d8:	str	r2, [r4, #76]	; 0x4c
   126dc:	mov	r0, #4
   126e0:	bl	118c8 <malloc@plt>
   126e4:	str	r0, [r5, #36]	; 0x24
   126e8:	bl	14c0c <init_token_cpar@@Base>
   126ec:	ldr	r3, [r4, #80]	; 0x50
   126f0:	ldr	r2, [r4, #84]	; 0x54
   126f4:	adds	r3, r3, #1
   126f8:	adc	r2, r2, #0
   126fc:	str	r3, [r4, #80]	; 0x50
   12700:	str	r2, [r4, #84]	; 0x54
   12704:	movw	r4, #47396	; 0xb924
   12708:	movt	r4, #2
   1270c:	str	r5, [r4, #228]	; 0xe4
   12710:	mov	r3, #10
   12714:	str	r3, [r4, #220]	; 0xdc
   12718:	mov	r0, sp
   1271c:	bl	165f4 <read_boolean_expression@@Base>
   12720:	ldr	r3, [r4, #204]	; 0xcc
   12724:	cmp	r3, #10
   12728:	bne	1276c <boolean_expression_complex@@Base+0x2d4>
   1272c:	ldr	r3, [r0]
   12730:	cmp	r3, #5
   12734:	bne	127a4 <boolean_expression_complex@@Base+0x30c>
   12738:	ldr	r2, [pc, #156]	; 127dc <boolean_expression_complex@@Base+0x344>
   1273c:	ldr	r3, [r2, #96]	; 0x60
   12740:	ldr	r1, [r2, #100]	; 0x64
   12744:	adds	r3, r3, #1
   12748:	adc	r1, r1, #0
   1274c:	str	r3, [r2, #96]	; 0x60
   12750:	str	r1, [r2, #100]	; 0x64
   12754:	add	sp, sp, #16
   12758:	ldrd	r4, [sp]
   1275c:	ldrd	r6, [sp, #8]
   12760:	ldr	r8, [sp, #16]
   12764:	add	sp, sp, #20
   12768:	pop	{pc}		; (ldr pc, [sp], #4)
   1276c:	ldr	r2, [pc, #104]	; 127dc <boolean_expression_complex@@Base+0x344>
   12770:	ldr	r3, [r2, #88]	; 0x58
   12774:	ldr	r1, [r2, #92]	; 0x5c
   12778:	adds	r3, r3, #1
   1277c:	adc	r1, r1, #0
   12780:	str	r3, [r2, #88]	; 0x58
   12784:	str	r1, [r2, #92]	; 0x5c
   12788:	ldr	r3, [pc, #80]	; 127e0 <boolean_expression_complex@@Base+0x348>
   1278c:	mov	r2, #166	; 0xa6
   12790:	movw	r1, #38056	; 0x94a8
   12794:	movt	r1, #1
   12798:	movw	r0, #38284	; 0x958c
   1279c:	movt	r0, #1
   127a0:	bl	119c4 <__assert_fail@plt>
   127a4:	ldr	r2, [pc, #48]	; 127dc <boolean_expression_complex@@Base+0x344>
   127a8:	ldr	r3, [r2, #104]	; 0x68
   127ac:	ldr	r1, [r2, #108]	; 0x6c
   127b0:	adds	r3, r3, #1
   127b4:	adc	r1, r1, #0
   127b8:	str	r3, [r2, #104]	; 0x68
   127bc:	str	r1, [r2, #108]	; 0x6c
   127c0:	ldr	r3, [pc, #24]	; 127e0 <boolean_expression_complex@@Base+0x348>
   127c4:	mov	r2, #167	; 0xa7
   127c8:	movw	r1, #38056	; 0x94a8
   127cc:	movt	r1, #1
   127d0:	movw	r0, #38252	; 0x956c
   127d4:	movt	r0, #1
   127d8:	bl	119c4 <__assert_fail@plt>
   127dc:	ldrdeq	sl, [r2], -r8
   127e0:	muleq	r1, r8, r3

000127e4 <boolean_binary_operator_is_read_properly@@Base>:
   127e4:	strd	r4, [sp, #-16]!
   127e8:	str	r6, [sp, #8]
   127ec:	str	lr, [sp, #12]
   127f0:	sub	sp, sp, #16
   127f4:	ldr	r4, [pc, #660]	; 12a90 <boolean_binary_operator_is_read_properly@@Base+0x2ac>
   127f8:	ldr	r3, [r4]
   127fc:	ldr	r2, [r4, #4]
   12800:	adds	r3, r3, #1
   12804:	adc	r2, r2, #0
   12808:	str	r3, [r4]
   1280c:	str	r2, [r4, #4]
   12810:	mov	r0, #3
   12814:	bl	118c8 <malloc@plt>
   12818:	mov	r6, r0
   1281c:	mov	r3, #33	; 0x21
   12820:	strb	r3, [r0]
   12824:	mov	r3, #61	; 0x3d
   12828:	strb	r3, [r0, #1]
   1282c:	mov	r3, #0
   12830:	strb	r3, [r0, #2]
   12834:	add	r1, sp, #4
   12838:	mov	r0, sp
   1283c:	bl	15d78 <init_grammar@@Base>
   12840:	ldr	r3, [r4, #8]
   12844:	ldr	r2, [r4, #12]
   12848:	adds	r3, r3, #1
   1284c:	adc	r2, r2, #0
   12850:	str	r3, [r4, #8]
   12854:	str	r2, [r4, #12]
   12858:	mov	r0, #12
   1285c:	bl	118c8 <malloc@plt>
   12860:	mov	r5, r0
   12864:	mov	r0, #8
   12868:	bl	118c8 <malloc@plt>
   1286c:	str	r0, [r5]
   12870:	mov	r1, #2
   12874:	bl	14b80 <init_token_int_value@@Base>
   12878:	ldr	r3, [r4, #16]
   1287c:	ldr	r2, [r4, #20]
   12880:	adds	r3, r3, #1
   12884:	adc	r2, r2, #0
   12888:	str	r3, [r4, #16]
   1288c:	str	r2, [r4, #20]
   12890:	mov	r0, #8
   12894:	bl	118c8 <malloc@plt>
   12898:	str	r0, [r5, #4]
   1289c:	mov	r1, r6
   128a0:	bl	14d6c <init_token_boolean_op@@Base>
   128a4:	ldr	r3, [r4, #24]
   128a8:	ldr	r2, [r4, #28]
   128ac:	adds	r3, r3, #1
   128b0:	adc	r2, r2, #0
   128b4:	str	r3, [r4, #24]
   128b8:	str	r2, [r4, #28]
   128bc:	mov	r0, #8
   128c0:	bl	118c8 <malloc@plt>
   128c4:	str	r0, [r5, #8]
   128c8:	mov	r1, #1
   128cc:	bl	14b80 <init_token_int_value@@Base>
   128d0:	ldr	r3, [r4, #32]
   128d4:	ldr	r2, [r4, #36]	; 0x24
   128d8:	adds	r3, r3, #1
   128dc:	adc	r2, r2, #0
   128e0:	str	r3, [r4, #32]
   128e4:	str	r2, [r4, #36]	; 0x24
   128e8:	movw	r4, #47396	; 0xb924
   128ec:	movt	r4, #2
   128f0:	str	r5, [r4, #228]	; 0xe4
   128f4:	mov	r3, #3
   128f8:	str	r3, [r4, #220]	; 0xdc
   128fc:	mov	r0, sp
   12900:	bl	16168 <read_boolean_binary_expression@@Base>
   12904:	ldr	r3, [r4, #204]	; 0xcc
   12908:	cmp	r3, #3
   1290c:	bne	12978 <boolean_binary_operator_is_read_properly@@Base+0x194>
   12910:	ldr	r3, [r0]
   12914:	cmp	r3, #5
   12918:	bne	129b0 <boolean_binary_operator_is_read_properly@@Base+0x1cc>
   1291c:	ldr	r3, [r0, #8]
   12920:	ldr	r3, [r3]
   12924:	cmp	r3, #1
   12928:	bne	129e8 <boolean_binary_operator_is_read_properly@@Base+0x204>
   1292c:	ldr	r3, [r0, #16]
   12930:	cmp	r3, #1
   12934:	bne	12a20 <boolean_binary_operator_is_read_properly@@Base+0x23c>
   12938:	ldr	r3, [r0, #12]
   1293c:	ldr	r3, [r3]
   12940:	cmp	r3, #1
   12944:	bne	12a58 <boolean_binary_operator_is_read_properly@@Base+0x274>
   12948:	ldr	r2, [pc, #320]	; 12a90 <boolean_binary_operator_is_read_properly@@Base+0x2ac>
   1294c:	ldr	r3, [r2, #72]	; 0x48
   12950:	ldr	r1, [r2, #76]	; 0x4c
   12954:	adds	r3, r3, #1
   12958:	adc	r1, r1, #0
   1295c:	str	r3, [r2, #72]	; 0x48
   12960:	str	r1, [r2, #76]	; 0x4c
   12964:	add	sp, sp, #16
   12968:	ldrd	r4, [sp]
   1296c:	ldr	r6, [sp, #8]
   12970:	add	sp, sp, #12
   12974:	pop	{pc}		; (ldr pc, [sp], #4)
   12978:	ldr	r2, [pc, #272]	; 12a90 <boolean_binary_operator_is_read_properly@@Base+0x2ac>
   1297c:	ldr	r3, [r2, #40]	; 0x28
   12980:	ldr	r1, [r2, #44]	; 0x2c
   12984:	adds	r3, r3, #1
   12988:	adc	r1, r1, #0
   1298c:	str	r3, [r2, #40]	; 0x28
   12990:	str	r1, [r2, #44]	; 0x2c
   12994:	ldr	r3, [pc, #248]	; 12a94 <boolean_binary_operator_is_read_properly@@Base+0x2b0>
   12998:	mov	r2, #200	; 0xc8
   1299c:	movw	r1, #38056	; 0x94a8
   129a0:	movt	r1, #1
   129a4:	movw	r0, #38312	; 0x95a8
   129a8:	movt	r0, #1
   129ac:	bl	119c4 <__assert_fail@plt>
   129b0:	ldr	r2, [pc, #216]	; 12a90 <boolean_binary_operator_is_read_properly@@Base+0x2ac>
   129b4:	ldr	r3, [r2, #48]	; 0x30
   129b8:	ldr	r1, [r2, #52]	; 0x34
   129bc:	adds	r3, r3, #1
   129c0:	adc	r1, r1, #0
   129c4:	str	r3, [r2, #48]	; 0x30
   129c8:	str	r1, [r2, #52]	; 0x34
   129cc:	ldr	r3, [pc, #192]	; 12a94 <boolean_binary_operator_is_read_properly@@Base+0x2b0>
   129d0:	mov	r2, #201	; 0xc9
   129d4:	movw	r1, #38056	; 0x94a8
   129d8:	movt	r1, #1
   129dc:	movw	r0, #38252	; 0x956c
   129e0:	movt	r0, #1
   129e4:	bl	119c4 <__assert_fail@plt>
   129e8:	ldr	r2, [pc, #160]	; 12a90 <boolean_binary_operator_is_read_properly@@Base+0x2ac>
   129ec:	ldr	r3, [r2, #56]	; 0x38
   129f0:	ldr	r1, [r2, #60]	; 0x3c
   129f4:	adds	r3, r3, #1
   129f8:	adc	r1, r1, #0
   129fc:	str	r3, [r2, #56]	; 0x38
   12a00:	str	r1, [r2, #60]	; 0x3c
   12a04:	ldr	r3, [pc, #136]	; 12a94 <boolean_binary_operator_is_read_properly@@Base+0x2b0>
   12a08:	mov	r2, #203	; 0xcb
   12a0c:	movw	r1, #38056	; 0x94a8
   12a10:	movt	r1, #1
   12a14:	movw	r0, #38340	; 0x95c4
   12a18:	movt	r0, #1
   12a1c:	bl	119c4 <__assert_fail@plt>
   12a20:	ldr	r2, [pc, #104]	; 12a90 <boolean_binary_operator_is_read_properly@@Base+0x2ac>
   12a24:	ldr	r3, [r2, #64]	; 0x40
   12a28:	ldr	r1, [r2, #68]	; 0x44
   12a2c:	adds	r3, r3, #1
   12a30:	adc	r1, r1, #0
   12a34:	str	r3, [r2, #64]	; 0x40
   12a38:	str	r1, [r2, #68]	; 0x44
   12a3c:	ldr	r3, [pc, #80]	; 12a94 <boolean_binary_operator_is_read_properly@@Base+0x2b0>
   12a40:	mov	r2, #204	; 0xcc
   12a44:	movw	r1, #38056	; 0x94a8
   12a48:	movt	r1, #1
   12a4c:	movw	r0, #38368	; 0x95e0
   12a50:	movt	r0, #1
   12a54:	bl	119c4 <__assert_fail@plt>
   12a58:	ldr	r2, [pc, #48]	; 12a90 <boolean_binary_operator_is_read_properly@@Base+0x2ac>
   12a5c:	ldr	r3, [r2, #80]	; 0x50
   12a60:	ldr	r1, [r2, #84]	; 0x54
   12a64:	adds	r3, r3, #1
   12a68:	adc	r1, r1, #0
   12a6c:	str	r3, [r2, #80]	; 0x50
   12a70:	str	r1, [r2, #84]	; 0x54
   12a74:	ldr	r3, [pc, #24]	; 12a94 <boolean_binary_operator_is_read_properly@@Base+0x2b0>
   12a78:	mov	r2, #205	; 0xcd
   12a7c:	movw	r1, #38056	; 0x94a8
   12a80:	movt	r1, #1
   12a84:	movw	r0, #38396	; 0x95fc
   12a88:	movt	r0, #1
   12a8c:	bl	119c4 <__assert_fail@plt>
   12a90:	andeq	sl, r2, r8, asr #22
   12a94:			; <UNDEFINED> instruction: 0x000193b4

00012a98 <boolean_unary_operator_is_read_properly@@Base>:
   12a98:	strd	r4, [sp, #-16]!
   12a9c:	str	r6, [sp, #8]
   12aa0:	str	lr, [sp, #12]
   12aa4:	sub	sp, sp, #16
   12aa8:	ldr	r4, [pc, #604]	; 12d0c <boolean_unary_operator_is_read_properly@@Base+0x274>
   12aac:	ldr	r3, [r4, #-8]
   12ab0:	ldr	r2, [r4, #-4]
   12ab4:	adds	r3, r3, #1
   12ab8:	adc	r2, r2, #0
   12abc:	str	r3, [r4, #-8]
   12ac0:	str	r2, [r4, #-4]
   12ac4:	mov	r0, #2
   12ac8:	bl	118c8 <malloc@plt>
   12acc:	mov	r6, r0
   12ad0:	mov	r3, #33	; 0x21
   12ad4:	strb	r3, [r0]
   12ad8:	mov	r3, #0
   12adc:	strb	r3, [r0, #1]
   12ae0:	add	r1, sp, #4
   12ae4:	mov	r0, sp
   12ae8:	bl	15d78 <init_grammar@@Base>
   12aec:	ldr	r3, [r4]
   12af0:	ldr	r2, [r4, #4]
   12af4:	adds	r3, r3, #1
   12af8:	adc	r2, r2, #0
   12afc:	str	r3, [r4]
   12b00:	str	r2, [r4, #4]
   12b04:	mov	r0, #8
   12b08:	bl	118c8 <malloc@plt>
   12b0c:	mov	r5, r0
   12b10:	mov	r0, #8
   12b14:	bl	118c8 <malloc@plt>
   12b18:	str	r0, [r5]
   12b1c:	mov	r1, r6
   12b20:	bl	14d6c <init_token_boolean_op@@Base>
   12b24:	ldr	r3, [r4, #8]
   12b28:	ldr	r2, [r4, #12]
   12b2c:	adds	r3, r3, #1
   12b30:	adc	r2, r2, #0
   12b34:	str	r3, [r4, #8]
   12b38:	str	r2, [r4, #12]
   12b3c:	mov	r0, #8
   12b40:	bl	118c8 <malloc@plt>
   12b44:	str	r0, [r5, #4]
   12b48:	mov	r1, #1
   12b4c:	bl	14b80 <init_token_int_value@@Base>
   12b50:	ldr	r3, [r4, #16]
   12b54:	ldr	r2, [r4, #20]
   12b58:	adds	r3, r3, #1
   12b5c:	adc	r2, r2, #0
   12b60:	str	r3, [r4, #16]
   12b64:	str	r2, [r4, #20]
   12b68:	movw	r4, #47396	; 0xb924
   12b6c:	movt	r4, #2
   12b70:	str	r5, [r4, #228]	; 0xe4
   12b74:	mov	r3, #2
   12b78:	str	r3, [r4, #220]	; 0xdc
   12b7c:	mov	r0, sp
   12b80:	bl	15f58 <read_boolean_unary_expression@@Base>
   12b84:	ldr	r3, [r4, #204]	; 0xcc
   12b88:	cmp	r3, #2
   12b8c:	bne	12bf4 <boolean_unary_operator_is_read_properly@@Base+0x15c>
   12b90:	ldr	r3, [r0]
   12b94:	cmp	r3, #5
   12b98:	bne	12c2c <boolean_unary_operator_is_read_properly@@Base+0x194>
   12b9c:	ldr	r3, [r0, #8]
   12ba0:	ldr	r3, [r3]
   12ba4:	cmp	r3, #1
   12ba8:	bne	12c64 <boolean_unary_operator_is_read_properly@@Base+0x1cc>
   12bac:	ldr	r3, [r0, #16]
   12bb0:	cmp	r3, #8
   12bb4:	bne	12c9c <boolean_unary_operator_is_read_properly@@Base+0x204>
   12bb8:	ldr	r3, [r0, #12]
   12bbc:	cmp	r3, #0
   12bc0:	bne	12cd4 <boolean_unary_operator_is_read_properly@@Base+0x23c>
   12bc4:	ldr	r2, [pc, #320]	; 12d0c <boolean_unary_operator_is_read_properly@@Base+0x274>
   12bc8:	ldr	r3, [r2, #56]	; 0x38
   12bcc:	ldr	r1, [r2, #60]	; 0x3c
   12bd0:	adds	r3, r3, #1
   12bd4:	adc	r1, r1, #0
   12bd8:	str	r3, [r2, #56]	; 0x38
   12bdc:	str	r1, [r2, #60]	; 0x3c
   12be0:	add	sp, sp, #16
   12be4:	ldrd	r4, [sp]
   12be8:	ldr	r6, [sp, #8]
   12bec:	add	sp, sp, #12
   12bf0:	pop	{pc}		; (ldr pc, [sp], #4)
   12bf4:	ldr	r2, [pc, #272]	; 12d0c <boolean_unary_operator_is_read_properly@@Base+0x274>
   12bf8:	ldr	r3, [r2, #24]
   12bfc:	ldr	r1, [r2, #28]
   12c00:	adds	r3, r3, #1
   12c04:	adc	r1, r1, #0
   12c08:	str	r3, [r2, #24]
   12c0c:	str	r1, [r2, #28]
   12c10:	ldr	r3, [pc, #248]	; 12d10 <boolean_unary_operator_is_read_properly@@Base+0x278>
   12c14:	mov	r2, #235	; 0xeb
   12c18:	movw	r1, #38056	; 0x94a8
   12c1c:	movt	r1, #1
   12c20:	movw	r0, #38164	; 0x9514
   12c24:	movt	r0, #1
   12c28:	bl	119c4 <__assert_fail@plt>
   12c2c:	ldr	r2, [pc, #216]	; 12d0c <boolean_unary_operator_is_read_properly@@Base+0x274>
   12c30:	ldr	r3, [r2, #32]
   12c34:	ldr	r1, [r2, #36]	; 0x24
   12c38:	adds	r3, r3, #1
   12c3c:	adc	r1, r1, #0
   12c40:	str	r3, [r2, #32]
   12c44:	str	r1, [r2, #36]	; 0x24
   12c48:	ldr	r3, [pc, #192]	; 12d10 <boolean_unary_operator_is_read_properly@@Base+0x278>
   12c4c:	mov	r2, #236	; 0xec
   12c50:	movw	r1, #38056	; 0x94a8
   12c54:	movt	r1, #1
   12c58:	movw	r0, #38252	; 0x956c
   12c5c:	movt	r0, #1
   12c60:	bl	119c4 <__assert_fail@plt>
   12c64:	ldr	r2, [pc, #160]	; 12d0c <boolean_unary_operator_is_read_properly@@Base+0x274>
   12c68:	ldr	r3, [r2, #40]	; 0x28
   12c6c:	ldr	r1, [r2, #44]	; 0x2c
   12c70:	adds	r3, r3, #1
   12c74:	adc	r1, r1, #0
   12c78:	str	r3, [r2, #40]	; 0x28
   12c7c:	str	r1, [r2, #44]	; 0x2c
   12c80:	ldr	r3, [pc, #136]	; 12d10 <boolean_unary_operator_is_read_properly@@Base+0x278>
   12c84:	mov	r2, #238	; 0xee
   12c88:	movw	r1, #38056	; 0x94a8
   12c8c:	movt	r1, #1
   12c90:	movw	r0, #38340	; 0x95c4
   12c94:	movt	r0, #1
   12c98:	bl	119c4 <__assert_fail@plt>
   12c9c:	ldr	r2, [pc, #104]	; 12d0c <boolean_unary_operator_is_read_properly@@Base+0x274>
   12ca0:	ldr	r3, [r2, #48]	; 0x30
   12ca4:	ldr	r1, [r2, #52]	; 0x34
   12ca8:	adds	r3, r3, #1
   12cac:	adc	r1, r1, #0
   12cb0:	str	r3, [r2, #48]	; 0x30
   12cb4:	str	r1, [r2, #52]	; 0x34
   12cb8:	ldr	r3, [pc, #80]	; 12d10 <boolean_unary_operator_is_read_properly@@Base+0x278>
   12cbc:	mov	r2, #239	; 0xef
   12cc0:	movw	r1, #38056	; 0x94a8
   12cc4:	movt	r1, #1
   12cc8:	movw	r0, #38424	; 0x9618
   12ccc:	movt	r0, #1
   12cd0:	bl	119c4 <__assert_fail@plt>
   12cd4:	ldr	r2, [pc, #48]	; 12d0c <boolean_unary_operator_is_read_properly@@Base+0x274>
   12cd8:	ldr	r3, [r2, #64]	; 0x40
   12cdc:	ldr	r1, [r2, #68]	; 0x44
   12ce0:	adds	r3, r3, #1
   12ce4:	adc	r1, r1, #0
   12ce8:	str	r3, [r2, #64]	; 0x40
   12cec:	str	r1, [r2, #68]	; 0x44
   12cf0:	ldr	r3, [pc, #24]	; 12d10 <boolean_unary_operator_is_read_properly@@Base+0x278>
   12cf4:	mov	r2, #240	; 0xf0
   12cf8:	movw	r1, #38056	; 0x94a8
   12cfc:	movt	r1, #1
   12d00:	movw	r0, #38444	; 0x962c
   12d04:	movt	r0, #1
   12d08:	bl	119c4 <__assert_fail@plt>
   12d0c:	andeq	sl, r2, r8, lsr #23
   12d10:	andeq	r9, r1, r0, ror #7

00012d14 <if_statement_only@@Base>:
   12d14:	strd	r4, [sp, #-16]!
   12d18:	str	r6, [sp, #8]
   12d1c:	str	lr, [sp, #12]
   12d20:	sub	sp, sp, #16
   12d24:	ldr	r4, [pc, #756]	; 13020 <if_statement_only@@Base+0x30c>
   12d28:	ldr	r3, [r4, #-8]
   12d2c:	ldr	r2, [r4, #-4]
   12d30:	adds	r3, r3, #1
   12d34:	adc	r2, r2, #0
   12d38:	str	r3, [r4, #-8]
   12d3c:	str	r2, [r4, #-4]
   12d40:	add	r1, sp, #4
   12d44:	mov	r0, sp
   12d48:	bl	15d78 <init_grammar@@Base>
   12d4c:	ldr	r3, [r4]
   12d50:	ldr	r2, [r4, #4]
   12d54:	adds	r3, r3, #1
   12d58:	adc	r2, r2, #0
   12d5c:	str	r3, [r4]
   12d60:	str	r2, [r4, #4]
   12d64:	mov	r0, #3
   12d68:	bl	118c8 <malloc@plt>
   12d6c:	mov	r6, r0
   12d70:	mov	r3, #33	; 0x21
   12d74:	strb	r3, [r0]
   12d78:	mov	r3, #61	; 0x3d
   12d7c:	strb	r3, [r0, #1]
   12d80:	mov	r3, #0
   12d84:	strb	r3, [r0, #2]
   12d88:	mov	r0, #36	; 0x24
   12d8c:	bl	118c8 <malloc@plt>
   12d90:	mov	r5, r0
   12d94:	mov	r0, #4
   12d98:	bl	118c8 <malloc@plt>
   12d9c:	str	r0, [r5]
   12da0:	bl	14be0 <init_token_opar@@Base>
   12da4:	ldr	r3, [r4, #8]
   12da8:	ldr	r2, [r4, #12]
   12dac:	adds	r3, r3, #1
   12db0:	adc	r2, r2, #0
   12db4:	str	r3, [r4, #8]
   12db8:	str	r2, [r4, #12]
   12dbc:	mov	r0, #8
   12dc0:	bl	118c8 <malloc@plt>
   12dc4:	str	r0, [r5, #4]
   12dc8:	mov	r1, #1
   12dcc:	bl	14b80 <init_token_int_value@@Base>
   12dd0:	ldr	r3, [r4, #16]
   12dd4:	ldr	r2, [r4, #20]
   12dd8:	adds	r3, r3, #1
   12ddc:	adc	r2, r2, #0
   12de0:	str	r3, [r4, #16]
   12de4:	str	r2, [r4, #20]
   12de8:	mov	r0, #8
   12dec:	bl	118c8 <malloc@plt>
   12df0:	str	r0, [r5, #8]
   12df4:	mov	r1, #1
   12df8:	bl	14b80 <init_token_int_value@@Base>
   12dfc:	ldr	r3, [r4, #24]
   12e00:	ldr	r2, [r4, #28]
   12e04:	adds	r3, r3, #1
   12e08:	adc	r2, r2, #0
   12e0c:	str	r3, [r4, #24]
   12e10:	str	r2, [r4, #28]
   12e14:	mov	r0, #8
   12e18:	bl	118c8 <malloc@plt>
   12e1c:	str	r0, [r5, #12]
   12e20:	mov	r1, r6
   12e24:	bl	14d6c <init_token_boolean_op@@Base>
   12e28:	ldr	r3, [r4, #32]
   12e2c:	ldr	r2, [r4, #36]	; 0x24
   12e30:	adds	r3, r3, #1
   12e34:	adc	r2, r2, #0
   12e38:	str	r3, [r4, #32]
   12e3c:	str	r2, [r4, #36]	; 0x24
   12e40:	mov	r0, #8
   12e44:	bl	118c8 <malloc@plt>
   12e48:	str	r0, [r5, #16]
   12e4c:	mov	r1, #1
   12e50:	bl	14b80 <init_token_int_value@@Base>
   12e54:	ldr	r3, [r4, #40]	; 0x28
   12e58:	ldr	r2, [r4, #44]	; 0x2c
   12e5c:	adds	r3, r3, #1
   12e60:	adc	r2, r2, #0
   12e64:	str	r3, [r4, #40]	; 0x28
   12e68:	str	r2, [r4, #44]	; 0x2c
   12e6c:	mov	r0, #4
   12e70:	bl	118c8 <malloc@plt>
   12e74:	str	r0, [r5, #20]
   12e78:	bl	14c0c <init_token_cpar@@Base>
   12e7c:	ldr	r3, [r4, #48]	; 0x30
   12e80:	ldr	r2, [r4, #52]	; 0x34
   12e84:	adds	r3, r3, #1
   12e88:	adc	r2, r2, #0
   12e8c:	str	r3, [r4, #48]	; 0x30
   12e90:	str	r2, [r4, #52]	; 0x34
   12e94:	mov	r0, #4
   12e98:	bl	118c8 <malloc@plt>
   12e9c:	str	r0, [r5, #24]
   12ea0:	bl	14c38 <init_token_obra@@Base>
   12ea4:	ldr	r3, [r4, #56]	; 0x38
   12ea8:	ldr	r2, [r4, #60]	; 0x3c
   12eac:	adds	r3, r3, #1
   12eb0:	adc	r2, r2, #0
   12eb4:	str	r3, [r4, #56]	; 0x38
   12eb8:	str	r2, [r4, #60]	; 0x3c
   12ebc:	mov	r0, #4
   12ec0:	bl	118c8 <malloc@plt>
   12ec4:	str	r0, [r5, #28]
   12ec8:	bl	14c64 <init_token_cbra@@Base>
   12ecc:	ldr	r3, [r4, #64]	; 0x40
   12ed0:	ldr	r2, [r4, #68]	; 0x44
   12ed4:	adds	r3, r3, #1
   12ed8:	adc	r2, r2, #0
   12edc:	str	r3, [r4, #64]	; 0x40
   12ee0:	str	r2, [r4, #68]	; 0x44
   12ee4:	mov	r0, #4
   12ee8:	bl	118c8 <malloc@plt>
   12eec:	str	r0, [r5, #32]
   12ef0:	bl	14ce8 <init_token_eof@@Base>
   12ef4:	ldr	r3, [r4, #72]	; 0x48
   12ef8:	ldr	r2, [r4, #76]	; 0x4c
   12efc:	adds	r3, r3, #1
   12f00:	adc	r2, r2, #0
   12f04:	str	r3, [r4, #72]	; 0x48
   12f08:	str	r2, [r4, #76]	; 0x4c
   12f0c:	movw	r4, #47396	; 0xb924
   12f10:	movt	r4, #2
   12f14:	str	r5, [r4, #228]	; 0xe4
   12f18:	mov	r3, #9
   12f1c:	str	r3, [r4, #220]	; 0xdc
   12f20:	mov	r0, sp
   12f24:	bl	1683c <read_if_statement@@Base>
   12f28:	ldr	r3, [r4, #204]	; 0xcc
   12f2c:	cmp	r3, #9
   12f30:	bne	12f78 <if_statement_only@@Base+0x264>
   12f34:	cmp	r0, #0
   12f38:	beq	12fb0 <if_statement_only@@Base+0x29c>
   12f3c:	ldr	r3, [r0]
   12f40:	cmp	r3, #4
   12f44:	bne	12fe8 <if_statement_only@@Base+0x2d4>
   12f48:	ldr	r2, [pc, #208]	; 13020 <if_statement_only@@Base+0x30c>
   12f4c:	ldr	r3, [r2, #96]	; 0x60
   12f50:	ldr	r1, [r2, #100]	; 0x64
   12f54:	adds	r3, r3, #1
   12f58:	adc	r1, r1, #0
   12f5c:	str	r3, [r2, #96]	; 0x60
   12f60:	str	r1, [r2, #100]	; 0x64
   12f64:	add	sp, sp, #16
   12f68:	ldrd	r4, [sp]
   12f6c:	ldr	r6, [sp, #8]
   12f70:	add	sp, sp, #12
   12f74:	pop	{pc}		; (ldr pc, [sp], #4)
   12f78:	ldr	r2, [pc, #160]	; 13020 <if_statement_only@@Base+0x30c>
   12f7c:	ldr	r3, [r2, #80]	; 0x50
   12f80:	ldr	r1, [r2, #84]	; 0x54
   12f84:	adds	r3, r3, #1
   12f88:	adc	r1, r1, #0
   12f8c:	str	r3, [r2, #80]	; 0x50
   12f90:	str	r1, [r2, #84]	; 0x54
   12f94:	ldr	r3, [pc, #136]	; 13024 <if_statement_only@@Base+0x310>
   12f98:	movw	r2, #283	; 0x11b
   12f9c:	movw	r1, #38056	; 0x94a8
   12fa0:	movt	r1, #1
   12fa4:	movw	r0, #38468	; 0x9644
   12fa8:	movt	r0, #1
   12fac:	bl	119c4 <__assert_fail@plt>
   12fb0:	ldr	r2, [pc, #104]	; 13020 <if_statement_only@@Base+0x30c>
   12fb4:	ldr	r3, [r2, #88]	; 0x58
   12fb8:	ldr	r1, [r2, #92]	; 0x5c
   12fbc:	adds	r3, r3, #1
   12fc0:	adc	r1, r1, #0
   12fc4:	str	r3, [r2, #88]	; 0x58
   12fc8:	str	r1, [r2, #92]	; 0x5c
   12fcc:	ldr	r3, [pc, #80]	; 13024 <if_statement_only@@Base+0x310>
   12fd0:	mov	r2, #284	; 0x11c
   12fd4:	movw	r1, #38056	; 0x94a8
   12fd8:	movt	r1, #1
   12fdc:	movw	r0, #38496	; 0x9660
   12fe0:	movt	r0, #1
   12fe4:	bl	119c4 <__assert_fail@plt>
   12fe8:	ldr	r2, [pc, #48]	; 13020 <if_statement_only@@Base+0x30c>
   12fec:	ldr	r3, [r2, #104]	; 0x68
   12ff0:	ldr	r1, [r2, #108]	; 0x6c
   12ff4:	adds	r3, r3, #1
   12ff8:	adc	r1, r1, #0
   12ffc:	str	r3, [r2, #104]	; 0x68
   13000:	str	r1, [r2, #108]	; 0x6c
   13004:	ldr	r3, [pc, #24]	; 13024 <if_statement_only@@Base+0x310>
   13008:	movw	r2, #285	; 0x11d
   1300c:	movw	r1, #38056	; 0x94a8
   13010:	movt	r1, #1
   13014:	movw	r0, #38508	; 0x966c
   13018:	movt	r0, #1
   1301c:	bl	119c4 <__assert_fail@plt>
   13020:	strdeq	sl, [r2], -r8
   13024:	andeq	r9, r1, r8, lsl #8

00013028 <if_else_statements@@Base>:
   13028:	strd	r4, [sp, #-16]!
   1302c:	str	r6, [sp, #8]
   13030:	str	lr, [sp, #12]
   13034:	sub	sp, sp, #16
   13038:	ldr	r4, [pc, #836]	; 13384 <if_else_statements@@Base+0x35c>
   1303c:	ldr	r3, [r4]
   13040:	ldr	r2, [r4, #4]
   13044:	adds	r3, r3, #1
   13048:	adc	r2, r2, #0
   1304c:	str	r3, [r4]
   13050:	str	r2, [r4, #4]
   13054:	add	r1, sp, #4
   13058:	mov	r0, sp
   1305c:	bl	15d78 <init_grammar@@Base>
   13060:	ldr	r3, [r4, #8]
   13064:	ldr	r2, [r4, #12]
   13068:	adds	r3, r3, #1
   1306c:	adc	r2, r2, #0
   13070:	str	r3, [r4, #8]
   13074:	str	r2, [r4, #12]
   13078:	mov	r0, #3
   1307c:	bl	118c8 <malloc@plt>
   13080:	mov	r6, r0
   13084:	mov	r3, #33	; 0x21
   13088:	strb	r3, [r0]
   1308c:	mov	r3, #61	; 0x3d
   13090:	strb	r3, [r0, #1]
   13094:	mov	r3, #0
   13098:	strb	r3, [r0, #2]
   1309c:	mov	r0, #44	; 0x2c
   130a0:	bl	118c8 <malloc@plt>
   130a4:	mov	r5, r0
   130a8:	mov	r0, #4
   130ac:	bl	118c8 <malloc@plt>
   130b0:	str	r0, [r5]
   130b4:	bl	14be0 <init_token_opar@@Base>
   130b8:	ldr	r3, [r4, #16]
   130bc:	ldr	r2, [r4, #20]
   130c0:	adds	r3, r3, #1
   130c4:	adc	r2, r2, #0
   130c8:	str	r3, [r4, #16]
   130cc:	str	r2, [r4, #20]
   130d0:	mov	r0, #8
   130d4:	bl	118c8 <malloc@plt>
   130d8:	str	r0, [r5, #4]
   130dc:	mov	r1, #1
   130e0:	bl	14b80 <init_token_int_value@@Base>
   130e4:	ldr	r3, [r4, #24]
   130e8:	ldr	r2, [r4, #28]
   130ec:	adds	r3, r3, #1
   130f0:	adc	r2, r2, #0
   130f4:	str	r3, [r4, #24]
   130f8:	str	r2, [r4, #28]
   130fc:	mov	r0, #8
   13100:	bl	118c8 <malloc@plt>
   13104:	str	r0, [r5, #8]
   13108:	mov	r1, #1
   1310c:	bl	14b80 <init_token_int_value@@Base>
   13110:	ldr	r3, [r4, #32]
   13114:	ldr	r2, [r4, #36]	; 0x24
   13118:	adds	r3, r3, #1
   1311c:	adc	r2, r2, #0
   13120:	str	r3, [r4, #32]
   13124:	str	r2, [r4, #36]	; 0x24
   13128:	mov	r0, #8
   1312c:	bl	118c8 <malloc@plt>
   13130:	str	r0, [r5, #12]
   13134:	mov	r1, r6
   13138:	bl	14d6c <init_token_boolean_op@@Base>
   1313c:	ldr	r3, [r4, #40]	; 0x28
   13140:	ldr	r2, [r4, #44]	; 0x2c
   13144:	adds	r3, r3, #1
   13148:	adc	r2, r2, #0
   1314c:	str	r3, [r4, #40]	; 0x28
   13150:	str	r2, [r4, #44]	; 0x2c
   13154:	mov	r0, #8
   13158:	bl	118c8 <malloc@plt>
   1315c:	str	r0, [r5, #16]
   13160:	mov	r1, #1
   13164:	bl	14b80 <init_token_int_value@@Base>
   13168:	ldr	r3, [r4, #48]	; 0x30
   1316c:	ldr	r2, [r4, #52]	; 0x34
   13170:	adds	r3, r3, #1
   13174:	adc	r2, r2, #0
   13178:	str	r3, [r4, #48]	; 0x30
   1317c:	str	r2, [r4, #52]	; 0x34
   13180:	mov	r0, #4
   13184:	bl	118c8 <malloc@plt>
   13188:	str	r0, [r5, #20]
   1318c:	bl	14c0c <init_token_cpar@@Base>
   13190:	ldr	r3, [r4, #56]	; 0x38
   13194:	ldr	r2, [r4, #60]	; 0x3c
   13198:	adds	r3, r3, #1
   1319c:	adc	r2, r2, #0
   131a0:	str	r3, [r4, #56]	; 0x38
   131a4:	str	r2, [r4, #60]	; 0x3c
   131a8:	mov	r0, #4
   131ac:	bl	118c8 <malloc@plt>
   131b0:	str	r0, [r5, #24]
   131b4:	bl	14c38 <init_token_obra@@Base>
   131b8:	ldr	r3, [r4, #64]	; 0x40
   131bc:	ldr	r2, [r4, #68]	; 0x44
   131c0:	adds	r3, r3, #1
   131c4:	adc	r2, r2, #0
   131c8:	str	r3, [r4, #64]	; 0x40
   131cc:	str	r2, [r4, #68]	; 0x44
   131d0:	mov	r0, #4
   131d4:	bl	118c8 <malloc@plt>
   131d8:	str	r0, [r5, #28]
   131dc:	bl	14c64 <init_token_cbra@@Base>
   131e0:	ldr	r3, [r4, #72]	; 0x48
   131e4:	ldr	r2, [r4, #76]	; 0x4c
   131e8:	adds	r3, r3, #1
   131ec:	adc	r2, r2, #0
   131f0:	str	r3, [r4, #72]	; 0x48
   131f4:	str	r2, [r4, #76]	; 0x4c
   131f8:	mov	r0, #4
   131fc:	bl	118c8 <malloc@plt>
   13200:	str	r0, [r5, #32]
   13204:	bl	14d40 <init_token_else@@Base>
   13208:	ldr	r3, [r4, #80]	; 0x50
   1320c:	ldr	r2, [r4, #84]	; 0x54
   13210:	adds	r3, r3, #1
   13214:	adc	r2, r2, #0
   13218:	str	r3, [r4, #80]	; 0x50
   1321c:	str	r2, [r4, #84]	; 0x54
   13220:	mov	r0, #4
   13224:	bl	118c8 <malloc@plt>
   13228:	str	r0, [r5, #36]	; 0x24
   1322c:	bl	14c38 <init_token_obra@@Base>
   13230:	ldr	r3, [r4, #88]	; 0x58
   13234:	ldr	r2, [r4, #92]	; 0x5c
   13238:	adds	r3, r3, #1
   1323c:	adc	r2, r2, #0
   13240:	str	r3, [r4, #88]	; 0x58
   13244:	str	r2, [r4, #92]	; 0x5c
   13248:	mov	r0, #4
   1324c:	bl	118c8 <malloc@plt>
   13250:	str	r0, [r5, #40]	; 0x28
   13254:	bl	14c64 <init_token_cbra@@Base>
   13258:	ldr	r3, [r4, #96]	; 0x60
   1325c:	ldr	r2, [r4, #100]	; 0x64
   13260:	adds	r3, r3, #1
   13264:	adc	r2, r2, #0
   13268:	str	r3, [r4, #96]	; 0x60
   1326c:	str	r2, [r4, #100]	; 0x64
   13270:	movw	r4, #47396	; 0xb924
   13274:	movt	r4, #2
   13278:	str	r5, [r4, #228]	; 0xe4
   1327c:	mov	r3, #11
   13280:	str	r3, [r4, #220]	; 0xdc
   13284:	mov	r0, sp
   13288:	bl	1683c <read_if_statement@@Base>
   1328c:	ldr	r3, [r4, #204]	; 0xcc
   13290:	cmp	r3, #11
   13294:	bne	132dc <if_else_statements@@Base+0x2b4>
   13298:	cmp	r0, #0
   1329c:	beq	13314 <if_else_statements@@Base+0x2ec>
   132a0:	ldr	r3, [r0]
   132a4:	cmp	r3, #4
   132a8:	bne	1334c <if_else_statements@@Base+0x324>
   132ac:	ldr	r2, [pc, #208]	; 13384 <if_else_statements@@Base+0x35c>
   132b0:	ldr	r3, [r2, #120]	; 0x78
   132b4:	ldr	r1, [r2, #124]	; 0x7c
   132b8:	adds	r3, r3, #1
   132bc:	adc	r1, r1, #0
   132c0:	str	r3, [r2, #120]	; 0x78
   132c4:	str	r1, [r2, #124]	; 0x7c
   132c8:	add	sp, sp, #16
   132cc:	ldrd	r4, [sp]
   132d0:	ldr	r6, [sp, #8]
   132d4:	add	sp, sp, #12
   132d8:	pop	{pc}		; (ldr pc, [sp], #4)
   132dc:	ldr	r2, [pc, #160]	; 13384 <if_else_statements@@Base+0x35c>
   132e0:	ldr	r3, [r2, #104]	; 0x68
   132e4:	ldr	r1, [r2, #108]	; 0x6c
   132e8:	adds	r3, r3, #1
   132ec:	adc	r1, r1, #0
   132f0:	str	r3, [r2, #104]	; 0x68
   132f4:	str	r1, [r2, #108]	; 0x6c
   132f8:	ldr	r3, [pc, #136]	; 13388 <if_else_statements@@Base+0x360>
   132fc:	mov	r2, #332	; 0x14c
   13300:	movw	r1, #38056	; 0x94a8
   13304:	movt	r1, #1
   13308:	movw	r0, #38528	; 0x9680
   1330c:	movt	r0, #1
   13310:	bl	119c4 <__assert_fail@plt>
   13314:	ldr	r2, [pc, #104]	; 13384 <if_else_statements@@Base+0x35c>
   13318:	ldr	r3, [r2, #112]	; 0x70
   1331c:	ldr	r1, [r2, #116]	; 0x74
   13320:	adds	r3, r3, #1
   13324:	adc	r1, r1, #0
   13328:	str	r3, [r2, #112]	; 0x70
   1332c:	str	r1, [r2, #116]	; 0x74
   13330:	ldr	r3, [pc, #80]	; 13388 <if_else_statements@@Base+0x360>
   13334:	movw	r2, #333	; 0x14d
   13338:	movw	r1, #38056	; 0x94a8
   1333c:	movt	r1, #1
   13340:	movw	r0, #38496	; 0x9660
   13344:	movt	r0, #1
   13348:	bl	119c4 <__assert_fail@plt>
   1334c:	ldr	r2, [pc, #48]	; 13384 <if_else_statements@@Base+0x35c>
   13350:	ldr	r3, [r2, #128]	; 0x80
   13354:	ldr	r1, [r2, #132]	; 0x84
   13358:	adds	r3, r3, #1
   1335c:	adc	r1, r1, #0
   13360:	str	r3, [r2, #128]	; 0x80
   13364:	str	r1, [r2, #132]	; 0x84
   13368:	ldr	r3, [pc, #24]	; 13388 <if_else_statements@@Base+0x360>
   1336c:	movw	r2, #334	; 0x14e
   13370:	movw	r1, #38056	; 0x94a8
   13374:	movt	r1, #1
   13378:	movw	r0, #38508	; 0x966c
   1337c:	movt	r0, #1
   13380:	bl	119c4 <__assert_fail@plt>
   13384:	andeq	sl, r2, r8, ror #24
   13388:	andeq	r9, r1, ip, lsl r4

0001338c <body_with_two_returns@@Base>:
   1338c:	strd	r4, [sp, #-12]!
   13390:	str	lr, [sp, #8]
   13394:	sub	sp, sp, #20
   13398:	ldr	r4, [pc, #808]	; 136c8 <body_with_two_returns@@Base+0x33c>
   1339c:	ldr	r3, [r4, #-8]
   133a0:	ldr	r2, [r4, #-4]
   133a4:	adds	r3, r3, #1
   133a8:	adc	r2, r2, #0
   133ac:	str	r3, [r4, #-8]
   133b0:	str	r2, [r4, #-4]
   133b4:	add	r1, sp, #4
   133b8:	mov	r0, sp
   133bc:	bl	15d78 <init_grammar@@Base>
   133c0:	ldr	r3, [r4]
   133c4:	ldr	r2, [r4, #4]
   133c8:	adds	r3, r3, #1
   133cc:	adc	r2, r2, #0
   133d0:	str	r3, [r4]
   133d4:	str	r2, [r4, #4]
   133d8:	mov	r0, #32
   133dc:	bl	118c8 <malloc@plt>
   133e0:	mov	r5, r0
   133e4:	mov	r0, #4
   133e8:	bl	118c8 <malloc@plt>
   133ec:	str	r0, [r5]
   133f0:	bl	14c38 <init_token_obra@@Base>
   133f4:	ldr	r3, [r4, #8]
   133f8:	ldr	r2, [r4, #12]
   133fc:	adds	r3, r3, #1
   13400:	adc	r2, r2, #0
   13404:	str	r3, [r4, #8]
   13408:	str	r2, [r4, #12]
   1340c:	mov	r0, #4
   13410:	bl	118c8 <malloc@plt>
   13414:	str	r0, [r5, #4]
   13418:	bl	14c90 <init_token_return@@Base>
   1341c:	ldr	r3, [r4, #16]
   13420:	ldr	r2, [r4, #20]
   13424:	adds	r3, r3, #1
   13428:	adc	r2, r2, #0
   1342c:	str	r3, [r4, #16]
   13430:	str	r2, [r4, #20]
   13434:	mov	r0, #8
   13438:	bl	118c8 <malloc@plt>
   1343c:	str	r0, [r5, #8]
   13440:	mov	r1, #1
   13444:	bl	14b80 <init_token_int_value@@Base>
   13448:	ldr	r3, [r4, #24]
   1344c:	ldr	r2, [r4, #28]
   13450:	adds	r3, r3, #1
   13454:	adc	r2, r2, #0
   13458:	str	r3, [r4, #24]
   1345c:	str	r2, [r4, #28]
   13460:	mov	r0, #4
   13464:	bl	118c8 <malloc@plt>
   13468:	str	r0, [r5, #12]
   1346c:	bl	14cbc <init_token_semicolon@@Base>
   13470:	ldr	r3, [r4, #32]
   13474:	ldr	r2, [r4, #36]	; 0x24
   13478:	adds	r3, r3, #1
   1347c:	adc	r2, r2, #0
   13480:	str	r3, [r4, #32]
   13484:	str	r2, [r4, #36]	; 0x24
   13488:	mov	r0, #4
   1348c:	bl	118c8 <malloc@plt>
   13490:	str	r0, [r5, #16]
   13494:	bl	14c90 <init_token_return@@Base>
   13498:	ldr	r3, [r4, #40]	; 0x28
   1349c:	ldr	r2, [r4, #44]	; 0x2c
   134a0:	adds	r3, r3, #1
   134a4:	adc	r2, r2, #0
   134a8:	str	r3, [r4, #40]	; 0x28
   134ac:	str	r2, [r4, #44]	; 0x2c
   134b0:	mov	r0, #8
   134b4:	bl	118c8 <malloc@plt>
   134b8:	str	r0, [r5, #20]
   134bc:	mov	r1, #1
   134c0:	bl	14b80 <init_token_int_value@@Base>
   134c4:	ldr	r3, [r4, #48]	; 0x30
   134c8:	ldr	r2, [r4, #52]	; 0x34
   134cc:	adds	r3, r3, #1
   134d0:	adc	r2, r2, #0
   134d4:	str	r3, [r4, #48]	; 0x30
   134d8:	str	r2, [r4, #52]	; 0x34
   134dc:	mov	r0, #4
   134e0:	bl	118c8 <malloc@plt>
   134e4:	str	r0, [r5, #24]
   134e8:	bl	14cbc <init_token_semicolon@@Base>
   134ec:	ldr	r3, [r4, #56]	; 0x38
   134f0:	ldr	r2, [r4, #60]	; 0x3c
   134f4:	adds	r3, r3, #1
   134f8:	adc	r2, r2, #0
   134fc:	str	r3, [r4, #56]	; 0x38
   13500:	str	r2, [r4, #60]	; 0x3c
   13504:	mov	r0, #4
   13508:	bl	118c8 <malloc@plt>
   1350c:	str	r0, [r5, #28]
   13510:	bl	14c64 <init_token_cbra@@Base>
   13514:	ldr	r3, [r4, #64]	; 0x40
   13518:	ldr	r2, [r4, #68]	; 0x44
   1351c:	adds	r3, r3, #1
   13520:	adc	r2, r2, #0
   13524:	str	r3, [r4, #64]	; 0x40
   13528:	str	r2, [r4, #68]	; 0x44
   1352c:	movw	r4, #47396	; 0xb924
   13530:	movt	r4, #2
   13534:	str	r5, [r4, #228]	; 0xe4
   13538:	mov	r3, #8
   1353c:	str	r3, [r4, #220]	; 0xdc
   13540:	mov	r0, sp
   13544:	bl	16a2c <read_body@@Base>
   13548:	ldr	r3, [r4, #204]	; 0xcc
   1354c:	cmp	r3, #8
   13550:	bne	135b0 <body_with_two_returns@@Base+0x224>
   13554:	cmp	r0, #0
   13558:	beq	135e8 <body_with_two_returns@@Base+0x25c>
   1355c:	ldr	r3, [r0]
   13560:	cmp	r3, #3
   13564:	bne	13620 <body_with_two_returns@@Base+0x294>
   13568:	ldr	r3, [r0, #4]
   1356c:	ldr	r2, [r3]
   13570:	cmp	r2, #3
   13574:	bne	13658 <body_with_two_returns@@Base+0x2cc>
   13578:	ldr	r3, [r3, #4]
   1357c:	cmp	r3, #0
   13580:	bne	13690 <body_with_two_returns@@Base+0x304>
   13584:	ldr	r2, [pc, #316]	; 136c8 <body_with_two_returns@@Base+0x33c>
   13588:	ldr	r3, [r2, #104]	; 0x68
   1358c:	ldr	r1, [r2, #108]	; 0x6c
   13590:	adds	r3, r3, #1
   13594:	adc	r1, r1, #0
   13598:	str	r3, [r2, #104]	; 0x68
   1359c:	str	r1, [r2, #108]	; 0x6c
   135a0:	add	sp, sp, #20
   135a4:	ldrd	r4, [sp]
   135a8:	add	sp, sp, #8
   135ac:	pop	{pc}		; (ldr pc, [sp], #4)
   135b0:	ldr	r2, [pc, #272]	; 136c8 <body_with_two_returns@@Base+0x33c>
   135b4:	ldr	r3, [r2, #72]	; 0x48
   135b8:	ldr	r1, [r2, #76]	; 0x4c
   135bc:	adds	r3, r3, #1
   135c0:	adc	r1, r1, #0
   135c4:	str	r3, [r2, #72]	; 0x48
   135c8:	str	r1, [r2, #76]	; 0x4c
   135cc:	ldr	r3, [pc, #248]	; 136cc <body_with_two_returns@@Base+0x340>
   135d0:	movw	r2, #371	; 0x173
   135d4:	movw	r1, #38056	; 0x94a8
   135d8:	movt	r1, #1
   135dc:	movw	r0, #38556	; 0x969c
   135e0:	movt	r0, #1
   135e4:	bl	119c4 <__assert_fail@plt>
   135e8:	ldr	r2, [pc, #216]	; 136c8 <body_with_two_returns@@Base+0x33c>
   135ec:	ldr	r3, [r2, #80]	; 0x50
   135f0:	ldr	r1, [r2, #84]	; 0x54
   135f4:	adds	r3, r3, #1
   135f8:	adc	r1, r1, #0
   135fc:	str	r3, [r2, #80]	; 0x50
   13600:	str	r1, [r2, #84]	; 0x54
   13604:	ldr	r3, [pc, #192]	; 136cc <body_with_two_returns@@Base+0x340>
   13608:	mov	r2, #372	; 0x174
   1360c:	movw	r1, #38056	; 0x94a8
   13610:	movt	r1, #1
   13614:	movw	r0, #38496	; 0x9660
   13618:	movt	r0, #1
   1361c:	bl	119c4 <__assert_fail@plt>
   13620:	ldr	r2, [pc, #160]	; 136c8 <body_with_two_returns@@Base+0x33c>
   13624:	ldr	r3, [r2, #88]	; 0x58
   13628:	ldr	r1, [r2, #92]	; 0x5c
   1362c:	adds	r3, r3, #1
   13630:	adc	r1, r1, #0
   13634:	str	r3, [r2, #88]	; 0x58
   13638:	str	r1, [r2, #92]	; 0x5c
   1363c:	ldr	r3, [pc, #136]	; 136cc <body_with_two_returns@@Base+0x340>
   13640:	movw	r2, #373	; 0x175
   13644:	movw	r1, #38056	; 0x94a8
   13648:	movt	r1, #1
   1364c:	movw	r0, #38584	; 0x96b8
   13650:	movt	r0, #1
   13654:	bl	119c4 <__assert_fail@plt>
   13658:	ldr	r2, [pc, #104]	; 136c8 <body_with_two_returns@@Base+0x33c>
   1365c:	ldr	r3, [r2, #96]	; 0x60
   13660:	ldr	r1, [r2, #100]	; 0x64
   13664:	adds	r3, r3, #1
   13668:	adc	r1, r1, #0
   1366c:	str	r3, [r2, #96]	; 0x60
   13670:	str	r1, [r2, #100]	; 0x64
   13674:	ldr	r3, [pc, #80]	; 136cc <body_with_two_returns@@Base+0x340>
   13678:	movw	r2, #374	; 0x176
   1367c:	movw	r1, #38056	; 0x94a8
   13680:	movt	r1, #1
   13684:	movw	r0, #38608	; 0x96d0
   13688:	movt	r0, #1
   1368c:	bl	119c4 <__assert_fail@plt>
   13690:	ldr	r2, [pc, #48]	; 136c8 <body_with_two_returns@@Base+0x33c>
   13694:	ldr	r3, [r2, #112]	; 0x70
   13698:	ldr	r1, [r2, #116]	; 0x74
   1369c:	adds	r3, r3, #1
   136a0:	adc	r1, r1, #0
   136a4:	str	r3, [r2, #112]	; 0x70
   136a8:	str	r1, [r2, #116]	; 0x74
   136ac:	ldr	r3, [pc, #24]	; 136cc <body_with_two_returns@@Base+0x340>
   136b0:	movw	r2, #375	; 0x177
   136b4:	movw	r1, #38056	; 0x94a8
   136b8:	movt	r1, #1
   136bc:	movw	r0, #38636	; 0x96ec
   136c0:	movt	r0, #1
   136c4:	bl	119c4 <__assert_fail@plt>
   136c8:	strdeq	sl, [r2], -r8
   136cc:	andeq	r9, r1, r0, lsr r4

000136d0 <body_with_one_return@@Base>:
   136d0:	strd	r4, [sp, #-12]!
   136d4:	str	lr, [sp, #8]
   136d8:	sub	sp, sp, #20
   136dc:	ldr	r4, [pc, #612]	; 13948 <body_with_one_return@@Base+0x278>
   136e0:	ldr	r3, [r4, #-8]
   136e4:	ldr	r2, [r4, #-4]
   136e8:	adds	r3, r3, #1
   136ec:	adc	r2, r2, #0
   136f0:	str	r3, [r4, #-8]
   136f4:	str	r2, [r4, #-4]
   136f8:	add	r1, sp, #4
   136fc:	mov	r0, sp
   13700:	bl	15d78 <init_grammar@@Base>
   13704:	ldr	r3, [r4]
   13708:	ldr	r2, [r4, #4]
   1370c:	adds	r3, r3, #1
   13710:	adc	r2, r2, #0
   13714:	str	r3, [r4]
   13718:	str	r2, [r4, #4]
   1371c:	mov	r0, #20
   13720:	bl	118c8 <malloc@plt>
   13724:	mov	r5, r0
   13728:	mov	r0, #4
   1372c:	bl	118c8 <malloc@plt>
   13730:	str	r0, [r5]
   13734:	bl	14c38 <init_token_obra@@Base>
   13738:	ldr	r3, [r4, #8]
   1373c:	ldr	r2, [r4, #12]
   13740:	adds	r3, r3, #1
   13744:	adc	r2, r2, #0
   13748:	str	r3, [r4, #8]
   1374c:	str	r2, [r4, #12]
   13750:	mov	r0, #4
   13754:	bl	118c8 <malloc@plt>
   13758:	str	r0, [r5, #4]
   1375c:	bl	14c90 <init_token_return@@Base>
   13760:	ldr	r3, [r4, #16]
   13764:	ldr	r2, [r4, #20]
   13768:	adds	r3, r3, #1
   1376c:	adc	r2, r2, #0
   13770:	str	r3, [r4, #16]
   13774:	str	r2, [r4, #20]
   13778:	mov	r0, #8
   1377c:	bl	118c8 <malloc@plt>
   13780:	str	r0, [r5, #8]
   13784:	mov	r1, #1
   13788:	bl	14b80 <init_token_int_value@@Base>
   1378c:	ldr	r3, [r4, #24]
   13790:	ldr	r2, [r4, #28]
   13794:	adds	r3, r3, #1
   13798:	adc	r2, r2, #0
   1379c:	str	r3, [r4, #24]
   137a0:	str	r2, [r4, #28]
   137a4:	mov	r0, #4
   137a8:	bl	118c8 <malloc@plt>
   137ac:	str	r0, [r5, #12]
   137b0:	bl	14cbc <init_token_semicolon@@Base>
   137b4:	ldr	r3, [r4, #32]
   137b8:	ldr	r2, [r4, #36]	; 0x24
   137bc:	adds	r3, r3, #1
   137c0:	adc	r2, r2, #0
   137c4:	str	r3, [r4, #32]
   137c8:	str	r2, [r4, #36]	; 0x24
   137cc:	mov	r0, #4
   137d0:	bl	118c8 <malloc@plt>
   137d4:	str	r0, [r5, #16]
   137d8:	bl	14c64 <init_token_cbra@@Base>
   137dc:	ldr	r3, [r4, #40]	; 0x28
   137e0:	ldr	r2, [r4, #44]	; 0x2c
   137e4:	adds	r3, r3, #1
   137e8:	adc	r2, r2, #0
   137ec:	str	r3, [r4, #40]	; 0x28
   137f0:	str	r2, [r4, #44]	; 0x2c
   137f4:	movw	r4, #47396	; 0xb924
   137f8:	movt	r4, #2
   137fc:	str	r5, [r4, #228]	; 0xe4
   13800:	mov	r3, #5
   13804:	str	r3, [r4, #220]	; 0xdc
   13808:	mov	r0, sp
   1380c:	bl	16a2c <read_body@@Base>
   13810:	ldr	r3, [r4, #204]	; 0xcc
   13814:	cmp	r3, #5
   13818:	bne	13868 <body_with_one_return@@Base+0x198>
   1381c:	cmp	r0, #0
   13820:	beq	138a0 <body_with_one_return@@Base+0x1d0>
   13824:	ldr	r3, [r0]
   13828:	cmp	r3, #3
   1382c:	bne	138d8 <body_with_one_return@@Base+0x208>
   13830:	ldr	r3, [r0, #4]
   13834:	cmp	r3, #0
   13838:	bne	13910 <body_with_one_return@@Base+0x240>
   1383c:	ldr	r2, [pc, #260]	; 13948 <body_with_one_return@@Base+0x278>
   13840:	ldr	r3, [r2, #72]	; 0x48
   13844:	ldr	r1, [r2, #76]	; 0x4c
   13848:	adds	r3, r3, #1
   1384c:	adc	r1, r1, #0
   13850:	str	r3, [r2, #72]	; 0x48
   13854:	str	r1, [r2, #76]	; 0x4c
   13858:	add	sp, sp, #20
   1385c:	ldrd	r4, [sp]
   13860:	add	sp, sp, #8
   13864:	pop	{pc}		; (ldr pc, [sp], #4)
   13868:	ldr	r2, [pc, #216]	; 13948 <body_with_one_return@@Base+0x278>
   1386c:	ldr	r3, [r2, #48]	; 0x30
   13870:	ldr	r1, [r2, #52]	; 0x34
   13874:	adds	r3, r3, #1
   13878:	adc	r1, r1, #0
   1387c:	str	r3, [r2, #48]	; 0x30
   13880:	str	r1, [r2, #52]	; 0x34
   13884:	ldr	r3, [pc, #192]	; 1394c <body_with_one_return@@Base+0x27c>
   13888:	movw	r2, #406	; 0x196
   1388c:	movw	r1, #38056	; 0x94a8
   13890:	movt	r1, #1
   13894:	movw	r0, #38192	; 0x9530
   13898:	movt	r0, #1
   1389c:	bl	119c4 <__assert_fail@plt>
   138a0:	ldr	r2, [pc, #160]	; 13948 <body_with_one_return@@Base+0x278>
   138a4:	ldr	r3, [r2, #56]	; 0x38
   138a8:	ldr	r1, [r2, #60]	; 0x3c
   138ac:	adds	r3, r3, #1
   138b0:	adc	r1, r1, #0
   138b4:	str	r3, [r2, #56]	; 0x38
   138b8:	str	r1, [r2, #60]	; 0x3c
   138bc:	ldr	r3, [pc, #136]	; 1394c <body_with_one_return@@Base+0x27c>
   138c0:	movw	r2, #407	; 0x197
   138c4:	movw	r1, #38056	; 0x94a8
   138c8:	movt	r1, #1
   138cc:	movw	r0, #38496	; 0x9660
   138d0:	movt	r0, #1
   138d4:	bl	119c4 <__assert_fail@plt>
   138d8:	ldr	r2, [pc, #104]	; 13948 <body_with_one_return@@Base+0x278>
   138dc:	ldr	r3, [r2, #64]	; 0x40
   138e0:	ldr	r1, [r2, #68]	; 0x44
   138e4:	adds	r3, r3, #1
   138e8:	adc	r1, r1, #0
   138ec:	str	r3, [r2, #64]	; 0x40
   138f0:	str	r1, [r2, #68]	; 0x44
   138f4:	ldr	r3, [pc, #80]	; 1394c <body_with_one_return@@Base+0x27c>
   138f8:	mov	r2, #408	; 0x198
   138fc:	movw	r1, #38056	; 0x94a8
   13900:	movt	r1, #1
   13904:	movw	r0, #38584	; 0x96b8
   13908:	movt	r0, #1
   1390c:	bl	119c4 <__assert_fail@plt>
   13910:	ldr	r2, [pc, #48]	; 13948 <body_with_one_return@@Base+0x278>
   13914:	ldr	r3, [r2, #80]	; 0x50
   13918:	ldr	r1, [r2, #84]	; 0x54
   1391c:	adds	r3, r3, #1
   13920:	adc	r1, r1, #0
   13924:	str	r3, [r2, #80]	; 0x50
   13928:	str	r1, [r2, #84]	; 0x54
   1392c:	ldr	r3, [pc, #24]	; 1394c <body_with_one_return@@Base+0x27c>
   13930:	movw	r2, #409	; 0x199
   13934:	movw	r1, #38056	; 0x94a8
   13938:	movt	r1, #1
   1393c:	movw	r0, #38660	; 0x9704
   13940:	movt	r0, #1
   13944:	bl	119c4 <__assert_fail@plt>
   13948:	andeq	sl, r2, r8, ror sp
   1394c:	andeq	r9, r1, r8, asr #8

00013950 <if_statement_inside_if_statement@@Base>:
   13950:	strd	r4, [sp, #-20]!	; 0xffffffec
   13954:	strd	r6, [sp, #8]
   13958:	str	lr, [sp, #16]
   1395c:	sub	sp, sp, #20
   13960:	ldr	r4, [pc, #1196]	; 13e14 <if_statement_inside_if_statement@@Base+0x4c4>
   13964:	ldr	r3, [r4, #-8]
   13968:	ldr	r2, [r4, #-4]
   1396c:	adds	r3, r3, #1
   13970:	adc	r2, r2, #0
   13974:	str	r3, [r4, #-8]
   13978:	str	r2, [r4, #-4]
   1397c:	add	r1, sp, #4
   13980:	mov	r0, sp
   13984:	bl	15d78 <init_grammar@@Base>
   13988:	ldr	r3, [r4]
   1398c:	ldr	r2, [r4, #4]
   13990:	adds	r3, r3, #1
   13994:	adc	r2, r2, #0
   13998:	str	r3, [r4]
   1399c:	str	r2, [r4, #4]
   139a0:	mov	r0, #3
   139a4:	bl	118c8 <malloc@plt>
   139a8:	mov	r7, r0
   139ac:	mov	r0, #3
   139b0:	bl	118c8 <malloc@plt>
   139b4:	mov	r6, r0
   139b8:	mov	r1, #33	; 0x21
   139bc:	strb	r1, [r7]
   139c0:	mov	r2, #61	; 0x3d
   139c4:	strb	r2, [r7, #1]
   139c8:	mov	r3, #0
   139cc:	strb	r3, [r7, #2]
   139d0:	strb	r1, [r0]
   139d4:	strb	r2, [r0, #1]
   139d8:	strb	r3, [r0, #2]
   139dc:	mov	r0, #76	; 0x4c
   139e0:	bl	118c8 <malloc@plt>
   139e4:	mov	r5, r0
   139e8:	mov	r0, #4
   139ec:	bl	118c8 <malloc@plt>
   139f0:	str	r0, [r5]
   139f4:	bl	14be0 <init_token_opar@@Base>
   139f8:	ldr	r3, [r4, #8]
   139fc:	ldr	r2, [r4, #12]
   13a00:	adds	r3, r3, #1
   13a04:	adc	r2, r2, #0
   13a08:	str	r3, [r4, #8]
   13a0c:	str	r2, [r4, #12]
   13a10:	mov	r0, #8
   13a14:	bl	118c8 <malloc@plt>
   13a18:	str	r0, [r5, #4]
   13a1c:	mov	r1, #1
   13a20:	bl	14b80 <init_token_int_value@@Base>
   13a24:	ldr	r3, [r4, #16]
   13a28:	ldr	r2, [r4, #20]
   13a2c:	adds	r3, r3, #1
   13a30:	adc	r2, r2, #0
   13a34:	str	r3, [r4, #16]
   13a38:	str	r2, [r4, #20]
   13a3c:	mov	r0, #8
   13a40:	bl	118c8 <malloc@plt>
   13a44:	str	r0, [r5, #8]
   13a48:	mov	r1, #1
   13a4c:	bl	14b80 <init_token_int_value@@Base>
   13a50:	ldr	r3, [r4, #24]
   13a54:	ldr	r2, [r4, #28]
   13a58:	adds	r3, r3, #1
   13a5c:	adc	r2, r2, #0
   13a60:	str	r3, [r4, #24]
   13a64:	str	r2, [r4, #28]
   13a68:	mov	r0, #8
   13a6c:	bl	118c8 <malloc@plt>
   13a70:	str	r0, [r5, #12]
   13a74:	mov	r1, r7
   13a78:	bl	14d6c <init_token_boolean_op@@Base>
   13a7c:	ldr	r3, [r4, #32]
   13a80:	ldr	r2, [r4, #36]	; 0x24
   13a84:	adds	r3, r3, #1
   13a88:	adc	r2, r2, #0
   13a8c:	str	r3, [r4, #32]
   13a90:	str	r2, [r4, #36]	; 0x24
   13a94:	mov	r0, #8
   13a98:	bl	118c8 <malloc@plt>
   13a9c:	str	r0, [r5, #16]
   13aa0:	mov	r1, #1
   13aa4:	bl	14b80 <init_token_int_value@@Base>
   13aa8:	ldr	r3, [r4, #40]	; 0x28
   13aac:	ldr	r2, [r4, #44]	; 0x2c
   13ab0:	adds	r3, r3, #1
   13ab4:	adc	r2, r2, #0
   13ab8:	str	r3, [r4, #40]	; 0x28
   13abc:	str	r2, [r4, #44]	; 0x2c
   13ac0:	mov	r0, #4
   13ac4:	bl	118c8 <malloc@plt>
   13ac8:	str	r0, [r5, #20]
   13acc:	bl	14c0c <init_token_cpar@@Base>
   13ad0:	ldr	r3, [r4, #48]	; 0x30
   13ad4:	ldr	r2, [r4, #52]	; 0x34
   13ad8:	adds	r3, r3, #1
   13adc:	adc	r2, r2, #0
   13ae0:	str	r3, [r4, #48]	; 0x30
   13ae4:	str	r2, [r4, #52]	; 0x34
   13ae8:	mov	r0, #4
   13aec:	bl	118c8 <malloc@plt>
   13af0:	str	r0, [r5, #24]
   13af4:	bl	14c38 <init_token_obra@@Base>
   13af8:	ldr	r3, [r4, #56]	; 0x38
   13afc:	ldr	r2, [r4, #60]	; 0x3c
   13b00:	adds	r3, r3, #1
   13b04:	adc	r2, r2, #0
   13b08:	str	r3, [r4, #56]	; 0x38
   13b0c:	str	r2, [r4, #60]	; 0x3c
   13b10:	mov	r0, #4
   13b14:	bl	118c8 <malloc@plt>
   13b18:	str	r0, [r5, #28]
   13b1c:	bl	14d14 <init_token_if@@Base>
   13b20:	ldr	r3, [r4, #64]	; 0x40
   13b24:	ldr	r2, [r4, #68]	; 0x44
   13b28:	adds	r3, r3, #1
   13b2c:	adc	r2, r2, #0
   13b30:	str	r3, [r4, #64]	; 0x40
   13b34:	str	r2, [r4, #68]	; 0x44
   13b38:	mov	r0, #4
   13b3c:	bl	118c8 <malloc@plt>
   13b40:	str	r0, [r5, #32]
   13b44:	bl	14be0 <init_token_opar@@Base>
   13b48:	ldr	r3, [r4, #72]	; 0x48
   13b4c:	ldr	r2, [r4, #76]	; 0x4c
   13b50:	adds	r3, r3, #1
   13b54:	adc	r2, r2, #0
   13b58:	str	r3, [r4, #72]	; 0x48
   13b5c:	str	r2, [r4, #76]	; 0x4c
   13b60:	mov	r0, #8
   13b64:	bl	118c8 <malloc@plt>
   13b68:	str	r0, [r5, #36]	; 0x24
   13b6c:	mov	r1, #1
   13b70:	bl	14b80 <init_token_int_value@@Base>
   13b74:	ldr	r3, [r4, #80]	; 0x50
   13b78:	ldr	r2, [r4, #84]	; 0x54
   13b7c:	adds	r3, r3, #1
   13b80:	adc	r2, r2, #0
   13b84:	str	r3, [r4, #80]	; 0x50
   13b88:	str	r2, [r4, #84]	; 0x54
   13b8c:	mov	r0, #8
   13b90:	bl	118c8 <malloc@plt>
   13b94:	str	r0, [r5, #40]	; 0x28
   13b98:	mov	r1, #1
   13b9c:	bl	14b80 <init_token_int_value@@Base>
   13ba0:	ldr	r3, [r4, #88]	; 0x58
   13ba4:	ldr	r2, [r4, #92]	; 0x5c
   13ba8:	adds	r3, r3, #1
   13bac:	adc	r2, r2, #0
   13bb0:	str	r3, [r4, #88]	; 0x58
   13bb4:	str	r2, [r4, #92]	; 0x5c
   13bb8:	mov	r0, #8
   13bbc:	bl	118c8 <malloc@plt>
   13bc0:	str	r0, [r5, #44]	; 0x2c
   13bc4:	mov	r1, r6
   13bc8:	bl	14d6c <init_token_boolean_op@@Base>
   13bcc:	ldr	r3, [r4, #96]	; 0x60
   13bd0:	ldr	r2, [r4, #100]	; 0x64
   13bd4:	adds	r3, r3, #1
   13bd8:	adc	r2, r2, #0
   13bdc:	str	r3, [r4, #96]	; 0x60
   13be0:	str	r2, [r4, #100]	; 0x64
   13be4:	mov	r0, #8
   13be8:	bl	118c8 <malloc@plt>
   13bec:	str	r0, [r5, #48]	; 0x30
   13bf0:	mov	r1, #1
   13bf4:	bl	14b80 <init_token_int_value@@Base>
   13bf8:	ldr	r3, [r4, #104]	; 0x68
   13bfc:	ldr	r2, [r4, #108]	; 0x6c
   13c00:	adds	r3, r3, #1
   13c04:	adc	r2, r2, #0
   13c08:	str	r3, [r4, #104]	; 0x68
   13c0c:	str	r2, [r4, #108]	; 0x6c
   13c10:	mov	r0, #4
   13c14:	bl	118c8 <malloc@plt>
   13c18:	str	r0, [r5, #52]	; 0x34
   13c1c:	bl	14c0c <init_token_cpar@@Base>
   13c20:	ldr	r3, [r4, #112]	; 0x70
   13c24:	ldr	r2, [r4, #116]	; 0x74
   13c28:	adds	r3, r3, #1
   13c2c:	adc	r2, r2, #0
   13c30:	str	r3, [r4, #112]	; 0x70
   13c34:	str	r2, [r4, #116]	; 0x74
   13c38:	mov	r0, #4
   13c3c:	bl	118c8 <malloc@plt>
   13c40:	str	r0, [r5, #56]	; 0x38
   13c44:	bl	14c38 <init_token_obra@@Base>
   13c48:	ldr	r3, [r4, #120]	; 0x78
   13c4c:	ldr	r2, [r4, #124]	; 0x7c
   13c50:	adds	r3, r3, #1
   13c54:	adc	r2, r2, #0
   13c58:	str	r3, [r4, #120]	; 0x78
   13c5c:	str	r2, [r4, #124]	; 0x7c
   13c60:	mov	r0, #4
   13c64:	bl	118c8 <malloc@plt>
   13c68:	str	r0, [r5, #60]	; 0x3c
   13c6c:	bl	14c64 <init_token_cbra@@Base>
   13c70:	ldr	r3, [r4, #128]	; 0x80
   13c74:	ldr	r2, [r4, #132]	; 0x84
   13c78:	adds	r3, r3, #1
   13c7c:	adc	r2, r2, #0
   13c80:	str	r3, [r4, #128]	; 0x80
   13c84:	str	r2, [r4, #132]	; 0x84
   13c88:	mov	r0, #4
   13c8c:	bl	118c8 <malloc@plt>
   13c90:	str	r0, [r5, #64]	; 0x40
   13c94:	bl	14c64 <init_token_cbra@@Base>
   13c98:	ldr	r3, [r4, #136]	; 0x88
   13c9c:	ldr	r2, [r4, #140]	; 0x8c
   13ca0:	adds	r3, r3, #1
   13ca4:	adc	r2, r2, #0
   13ca8:	str	r3, [r4, #136]	; 0x88
   13cac:	str	r2, [r4, #140]	; 0x8c
   13cb0:	mov	r0, #4
   13cb4:	bl	118c8 <malloc@plt>
   13cb8:	str	r0, [r5, #68]	; 0x44
   13cbc:	bl	14c64 <init_token_cbra@@Base>
   13cc0:	ldr	r3, [r4, #144]	; 0x90
   13cc4:	ldr	r2, [r4, #148]	; 0x94
   13cc8:	adds	r3, r3, #1
   13ccc:	adc	r2, r2, #0
   13cd0:	str	r3, [r4, #144]	; 0x90
   13cd4:	str	r2, [r4, #148]	; 0x94
   13cd8:	mov	r0, #4
   13cdc:	bl	118c8 <malloc@plt>
   13ce0:	str	r0, [r5, #72]	; 0x48
   13ce4:	bl	14ce8 <init_token_eof@@Base>
   13ce8:	ldr	r3, [r4, #152]	; 0x98
   13cec:	ldr	r2, [r4, #156]	; 0x9c
   13cf0:	adds	r3, r3, #1
   13cf4:	adc	r2, r2, #0
   13cf8:	str	r3, [r4, #152]	; 0x98
   13cfc:	str	r2, [r4, #156]	; 0x9c
   13d00:	movw	r4, #47396	; 0xb924
   13d04:	movt	r4, #2
   13d08:	str	r5, [r4, #228]	; 0xe4
   13d0c:	mov	r3, #19
   13d10:	str	r3, [r4, #220]	; 0xdc
   13d14:	mov	r0, sp
   13d18:	bl	1683c <read_if_statement@@Base>
   13d1c:	ldr	r3, [r4, #204]	; 0xcc
   13d20:	cmp	r3, #19
   13d24:	bne	13d6c <if_statement_inside_if_statement@@Base+0x41c>
   13d28:	cmp	r0, #0
   13d2c:	beq	13da4 <if_statement_inside_if_statement@@Base+0x454>
   13d30:	ldr	r3, [r0]
   13d34:	cmp	r3, #4
   13d38:	bne	13ddc <if_statement_inside_if_statement@@Base+0x48c>
   13d3c:	ldr	r2, [pc, #208]	; 13e14 <if_statement_inside_if_statement@@Base+0x4c4>
   13d40:	ldr	r3, [r2, #176]	; 0xb0
   13d44:	ldr	r1, [r2, #180]	; 0xb4
   13d48:	adds	r3, r3, #1
   13d4c:	adc	r1, r1, #0
   13d50:	str	r3, [r2, #176]	; 0xb0
   13d54:	str	r1, [r2, #180]	; 0xb4
   13d58:	add	sp, sp, #20
   13d5c:	ldrd	r4, [sp]
   13d60:	ldrd	r6, [sp, #8]
   13d64:	add	sp, sp, #16
   13d68:	pop	{pc}		; (ldr pc, [sp], #4)
   13d6c:	ldr	r2, [pc, #160]	; 13e14 <if_statement_inside_if_statement@@Base+0x4c4>
   13d70:	ldr	r3, [r2, #160]	; 0xa0
   13d74:	ldr	r1, [r2, #164]	; 0xa4
   13d78:	adds	r3, r3, #1
   13d7c:	adc	r1, r1, #0
   13d80:	str	r3, [r2, #160]	; 0xa0
   13d84:	str	r1, [r2, #164]	; 0xa4
   13d88:	ldr	r3, [pc, #136]	; 13e18 <if_statement_inside_if_statement@@Base+0x4c8>
   13d8c:	mov	r2, #480	; 0x1e0
   13d90:	movw	r1, #38056	; 0x94a8
   13d94:	movt	r1, #1
   13d98:	movw	r0, #38680	; 0x9718
   13d9c:	movt	r0, #1
   13da0:	bl	119c4 <__assert_fail@plt>
   13da4:	ldr	r2, [pc, #104]	; 13e14 <if_statement_inside_if_statement@@Base+0x4c4>
   13da8:	ldr	r3, [r2, #168]	; 0xa8
   13dac:	ldr	r1, [r2, #172]	; 0xac
   13db0:	adds	r3, r3, #1
   13db4:	adc	r1, r1, #0
   13db8:	str	r3, [r2, #168]	; 0xa8
   13dbc:	str	r1, [r2, #172]	; 0xac
   13dc0:	ldr	r3, [pc, #80]	; 13e18 <if_statement_inside_if_statement@@Base+0x4c8>
   13dc4:	movw	r2, #481	; 0x1e1
   13dc8:	movw	r1, #38056	; 0x94a8
   13dcc:	movt	r1, #1
   13dd0:	movw	r0, #38496	; 0x9660
   13dd4:	movt	r0, #1
   13dd8:	bl	119c4 <__assert_fail@plt>
   13ddc:	ldr	r2, [pc, #48]	; 13e14 <if_statement_inside_if_statement@@Base+0x4c4>
   13de0:	ldr	r3, [r2, #184]	; 0xb8
   13de4:	ldr	r1, [r2, #188]	; 0xbc
   13de8:	adds	r3, r3, #1
   13dec:	adc	r1, r1, #0
   13df0:	str	r3, [r2, #184]	; 0xb8
   13df4:	str	r1, [r2, #188]	; 0xbc
   13df8:	ldr	r3, [pc, #24]	; 13e18 <if_statement_inside_if_statement@@Base+0x4c8>
   13dfc:	movw	r2, #482	; 0x1e2
   13e00:	movw	r1, #38056	; 0x94a8
   13e04:	movt	r1, #1
   13e08:	movw	r0, #38508	; 0x966c
   13e0c:	movt	r0, #1
   13e10:	bl	119c4 <__assert_fail@plt>
   13e14:	ldrdeq	sl, [r2], -r8
   13e18:	andeq	r9, r1, r0, ror #8

00013e1c <if_statement_inside_else_statement@@Base>:
   13e1c:	strd	r4, [sp, #-20]!	; 0xffffffec
   13e20:	strd	r6, [sp, #8]
   13e24:	str	lr, [sp, #16]
   13e28:	sub	sp, sp, #20
   13e2c:	ldr	r4, [pc, #1276]	; 14330 <if_statement_inside_else_statement@@Base+0x514>
   13e30:	ldr	r3, [r4]
   13e34:	ldr	r2, [r4, #4]
   13e38:	adds	r3, r3, #1
   13e3c:	adc	r2, r2, #0
   13e40:	str	r3, [r4]
   13e44:	str	r2, [r4, #4]
   13e48:	add	r1, sp, #4
   13e4c:	mov	r0, sp
   13e50:	bl	15d78 <init_grammar@@Base>
   13e54:	ldr	r3, [r4, #8]
   13e58:	ldr	r2, [r4, #12]
   13e5c:	adds	r3, r3, #1
   13e60:	adc	r2, r2, #0
   13e64:	str	r3, [r4, #8]
   13e68:	str	r2, [r4, #12]
   13e6c:	mov	r0, #3
   13e70:	bl	118c8 <malloc@plt>
   13e74:	mov	r7, r0
   13e78:	mov	r0, #3
   13e7c:	bl	118c8 <malloc@plt>
   13e80:	mov	r6, r0
   13e84:	mov	r1, #33	; 0x21
   13e88:	strb	r1, [r7]
   13e8c:	mov	r2, #61	; 0x3d
   13e90:	strb	r2, [r7, #1]
   13e94:	mov	r3, #0
   13e98:	strb	r3, [r7, #2]
   13e9c:	strb	r1, [r0]
   13ea0:	strb	r2, [r0, #1]
   13ea4:	strb	r3, [r0, #2]
   13ea8:	mov	r0, #84	; 0x54
   13eac:	bl	118c8 <malloc@plt>
   13eb0:	mov	r5, r0
   13eb4:	mov	r0, #4
   13eb8:	bl	118c8 <malloc@plt>
   13ebc:	str	r0, [r5]
   13ec0:	bl	14be0 <init_token_opar@@Base>
   13ec4:	ldr	r3, [r4, #16]
   13ec8:	ldr	r2, [r4, #20]
   13ecc:	adds	r3, r3, #1
   13ed0:	adc	r2, r2, #0
   13ed4:	str	r3, [r4, #16]
   13ed8:	str	r2, [r4, #20]
   13edc:	mov	r0, #8
   13ee0:	bl	118c8 <malloc@plt>
   13ee4:	str	r0, [r5, #4]
   13ee8:	mov	r1, #1
   13eec:	bl	14b80 <init_token_int_value@@Base>
   13ef0:	ldr	r3, [r4, #24]
   13ef4:	ldr	r2, [r4, #28]
   13ef8:	adds	r3, r3, #1
   13efc:	adc	r2, r2, #0
   13f00:	str	r3, [r4, #24]
   13f04:	str	r2, [r4, #28]
   13f08:	mov	r0, #8
   13f0c:	bl	118c8 <malloc@plt>
   13f10:	str	r0, [r5, #8]
   13f14:	mov	r1, #1
   13f18:	bl	14b80 <init_token_int_value@@Base>
   13f1c:	ldr	r3, [r4, #32]
   13f20:	ldr	r2, [r4, #36]	; 0x24
   13f24:	adds	r3, r3, #1
   13f28:	adc	r2, r2, #0
   13f2c:	str	r3, [r4, #32]
   13f30:	str	r2, [r4, #36]	; 0x24
   13f34:	mov	r0, #8
   13f38:	bl	118c8 <malloc@plt>
   13f3c:	str	r0, [r5, #12]
   13f40:	mov	r1, r7
   13f44:	bl	14d6c <init_token_boolean_op@@Base>
   13f48:	ldr	r3, [r4, #40]	; 0x28
   13f4c:	ldr	r2, [r4, #44]	; 0x2c
   13f50:	adds	r3, r3, #1
   13f54:	adc	r2, r2, #0
   13f58:	str	r3, [r4, #40]	; 0x28
   13f5c:	str	r2, [r4, #44]	; 0x2c
   13f60:	mov	r0, #8
   13f64:	bl	118c8 <malloc@plt>
   13f68:	str	r0, [r5, #16]
   13f6c:	mov	r1, #1
   13f70:	bl	14b80 <init_token_int_value@@Base>
   13f74:	ldr	r3, [r4, #48]	; 0x30
   13f78:	ldr	r2, [r4, #52]	; 0x34
   13f7c:	adds	r3, r3, #1
   13f80:	adc	r2, r2, #0
   13f84:	str	r3, [r4, #48]	; 0x30
   13f88:	str	r2, [r4, #52]	; 0x34
   13f8c:	mov	r0, #4
   13f90:	bl	118c8 <malloc@plt>
   13f94:	str	r0, [r5, #20]
   13f98:	bl	14c0c <init_token_cpar@@Base>
   13f9c:	ldr	r3, [r4, #56]	; 0x38
   13fa0:	ldr	r2, [r4, #60]	; 0x3c
   13fa4:	adds	r3, r3, #1
   13fa8:	adc	r2, r2, #0
   13fac:	str	r3, [r4, #56]	; 0x38
   13fb0:	str	r2, [r4, #60]	; 0x3c
   13fb4:	mov	r0, #4
   13fb8:	bl	118c8 <malloc@plt>
   13fbc:	str	r0, [r5, #24]
   13fc0:	bl	14c38 <init_token_obra@@Base>
   13fc4:	ldr	r3, [r4, #64]	; 0x40
   13fc8:	ldr	r2, [r4, #68]	; 0x44
   13fcc:	adds	r3, r3, #1
   13fd0:	adc	r2, r2, #0
   13fd4:	str	r3, [r4, #64]	; 0x40
   13fd8:	str	r2, [r4, #68]	; 0x44
   13fdc:	mov	r0, #4
   13fe0:	bl	118c8 <malloc@plt>
   13fe4:	str	r0, [r5, #28]
   13fe8:	bl	14c64 <init_token_cbra@@Base>
   13fec:	ldr	r3, [r4, #72]	; 0x48
   13ff0:	ldr	r2, [r4, #76]	; 0x4c
   13ff4:	adds	r3, r3, #1
   13ff8:	adc	r2, r2, #0
   13ffc:	str	r3, [r4, #72]	; 0x48
   14000:	str	r2, [r4, #76]	; 0x4c
   14004:	mov	r0, #4
   14008:	bl	118c8 <malloc@plt>
   1400c:	str	r0, [r5, #32]
   14010:	bl	14d40 <init_token_else@@Base>
   14014:	ldr	r3, [r4, #80]	; 0x50
   14018:	ldr	r2, [r4, #84]	; 0x54
   1401c:	adds	r3, r3, #1
   14020:	adc	r2, r2, #0
   14024:	str	r3, [r4, #80]	; 0x50
   14028:	str	r2, [r4, #84]	; 0x54
   1402c:	mov	r0, #4
   14030:	bl	118c8 <malloc@plt>
   14034:	str	r0, [r5, #36]	; 0x24
   14038:	bl	14c38 <init_token_obra@@Base>
   1403c:	ldr	r3, [r4, #88]	; 0x58
   14040:	ldr	r2, [r4, #92]	; 0x5c
   14044:	adds	r3, r3, #1
   14048:	adc	r2, r2, #0
   1404c:	str	r3, [r4, #88]	; 0x58
   14050:	str	r2, [r4, #92]	; 0x5c
   14054:	mov	r0, #4
   14058:	bl	118c8 <malloc@plt>
   1405c:	str	r0, [r5, #40]	; 0x28
   14060:	bl	14d14 <init_token_if@@Base>
   14064:	ldr	r3, [r4, #96]	; 0x60
   14068:	ldr	r2, [r4, #100]	; 0x64
   1406c:	adds	r3, r3, #1
   14070:	adc	r2, r2, #0
   14074:	str	r3, [r4, #96]	; 0x60
   14078:	str	r2, [r4, #100]	; 0x64
   1407c:	mov	r0, #4
   14080:	bl	118c8 <malloc@plt>
   14084:	str	r0, [r5, #44]	; 0x2c
   14088:	bl	14be0 <init_token_opar@@Base>
   1408c:	ldr	r3, [r4, #104]	; 0x68
   14090:	ldr	r2, [r4, #108]	; 0x6c
   14094:	adds	r3, r3, #1
   14098:	adc	r2, r2, #0
   1409c:	str	r3, [r4, #104]	; 0x68
   140a0:	str	r2, [r4, #108]	; 0x6c
   140a4:	mov	r0, #8
   140a8:	bl	118c8 <malloc@plt>
   140ac:	str	r0, [r5, #48]	; 0x30
   140b0:	mov	r1, #1
   140b4:	bl	14b80 <init_token_int_value@@Base>
   140b8:	ldr	r3, [r4, #112]	; 0x70
   140bc:	ldr	r2, [r4, #116]	; 0x74
   140c0:	adds	r3, r3, #1
   140c4:	adc	r2, r2, #0
   140c8:	str	r3, [r4, #112]	; 0x70
   140cc:	str	r2, [r4, #116]	; 0x74
   140d0:	mov	r0, #8
   140d4:	bl	118c8 <malloc@plt>
   140d8:	str	r0, [r5, #52]	; 0x34
   140dc:	mov	r1, #1
   140e0:	bl	14b80 <init_token_int_value@@Base>
   140e4:	ldr	r3, [r4, #120]	; 0x78
   140e8:	ldr	r2, [r4, #124]	; 0x7c
   140ec:	adds	r3, r3, #1
   140f0:	adc	r2, r2, #0
   140f4:	str	r3, [r4, #120]	; 0x78
   140f8:	str	r2, [r4, #124]	; 0x7c
   140fc:	mov	r0, #8
   14100:	bl	118c8 <malloc@plt>
   14104:	str	r0, [r5, #56]	; 0x38
   14108:	mov	r1, r6
   1410c:	bl	14d6c <init_token_boolean_op@@Base>
   14110:	ldr	r3, [r4, #128]	; 0x80
   14114:	ldr	r2, [r4, #132]	; 0x84
   14118:	adds	r3, r3, #1
   1411c:	adc	r2, r2, #0
   14120:	str	r3, [r4, #128]	; 0x80
   14124:	str	r2, [r4, #132]	; 0x84
   14128:	mov	r0, #8
   1412c:	bl	118c8 <malloc@plt>
   14130:	str	r0, [r5, #60]	; 0x3c
   14134:	mov	r1, #1
   14138:	bl	14b80 <init_token_int_value@@Base>
   1413c:	ldr	r3, [r4, #136]	; 0x88
   14140:	ldr	r2, [r4, #140]	; 0x8c
   14144:	adds	r3, r3, #1
   14148:	adc	r2, r2, #0
   1414c:	str	r3, [r4, #136]	; 0x88
   14150:	str	r2, [r4, #140]	; 0x8c
   14154:	mov	r0, #4
   14158:	bl	118c8 <malloc@plt>
   1415c:	str	r0, [r5, #64]	; 0x40
   14160:	bl	14c0c <init_token_cpar@@Base>
   14164:	ldr	r3, [r4, #144]	; 0x90
   14168:	ldr	r2, [r4, #148]	; 0x94
   1416c:	adds	r3, r3, #1
   14170:	adc	r2, r2, #0
   14174:	str	r3, [r4, #144]	; 0x90
   14178:	str	r2, [r4, #148]	; 0x94
   1417c:	mov	r0, #4
   14180:	bl	118c8 <malloc@plt>
   14184:	str	r0, [r5, #68]	; 0x44
   14188:	bl	14c38 <init_token_obra@@Base>
   1418c:	ldr	r3, [r4, #152]	; 0x98
   14190:	ldr	r2, [r4, #156]	; 0x9c
   14194:	adds	r3, r3, #1
   14198:	adc	r2, r2, #0
   1419c:	str	r3, [r4, #152]	; 0x98
   141a0:	str	r2, [r4, #156]	; 0x9c
   141a4:	mov	r0, #4
   141a8:	bl	118c8 <malloc@plt>
   141ac:	str	r0, [r5, #72]	; 0x48
   141b0:	bl	14c64 <init_token_cbra@@Base>
   141b4:	ldr	r3, [r4, #160]	; 0xa0
   141b8:	ldr	r2, [r4, #164]	; 0xa4
   141bc:	adds	r3, r3, #1
   141c0:	adc	r2, r2, #0
   141c4:	str	r3, [r4, #160]	; 0xa0
   141c8:	str	r2, [r4, #164]	; 0xa4
   141cc:	mov	r0, #4
   141d0:	bl	118c8 <malloc@plt>
   141d4:	str	r0, [r5, #76]	; 0x4c
   141d8:	bl	14c64 <init_token_cbra@@Base>
   141dc:	ldr	r3, [r4, #168]	; 0xa8
   141e0:	ldr	r2, [r4, #172]	; 0xac
   141e4:	adds	r3, r3, #1
   141e8:	adc	r2, r2, #0
   141ec:	str	r3, [r4, #168]	; 0xa8
   141f0:	str	r2, [r4, #172]	; 0xac
   141f4:	mov	r0, #4
   141f8:	bl	118c8 <malloc@plt>
   141fc:	str	r0, [r5, #80]	; 0x50
   14200:	bl	14c64 <init_token_cbra@@Base>
   14204:	ldr	r3, [r4, #176]	; 0xb0
   14208:	ldr	r2, [r4, #180]	; 0xb4
   1420c:	adds	r3, r3, #1
   14210:	adc	r2, r2, #0
   14214:	str	r3, [r4, #176]	; 0xb0
   14218:	str	r2, [r4, #180]	; 0xb4
   1421c:	movw	r4, #47396	; 0xb924
   14220:	movt	r4, #2
   14224:	str	r5, [r4, #228]	; 0xe4
   14228:	mov	r3, #21
   1422c:	str	r3, [r4, #220]	; 0xdc
   14230:	mov	r0, sp
   14234:	bl	1683c <read_if_statement@@Base>
   14238:	ldr	r3, [r4, #204]	; 0xcc
   1423c:	cmp	r3, #21
   14240:	bne	14288 <if_statement_inside_else_statement@@Base+0x46c>
   14244:	cmp	r0, #0
   14248:	beq	142c0 <if_statement_inside_else_statement@@Base+0x4a4>
   1424c:	ldr	r3, [r0]
   14250:	cmp	r3, #4
   14254:	bne	142f8 <if_statement_inside_else_statement@@Base+0x4dc>
   14258:	ldr	r2, [pc, #208]	; 14330 <if_statement_inside_else_statement@@Base+0x514>
   1425c:	ldr	r3, [r2, #200]	; 0xc8
   14260:	ldr	r1, [r2, #204]	; 0xcc
   14264:	adds	r3, r3, #1
   14268:	adc	r1, r1, #0
   1426c:	str	r3, [r2, #200]	; 0xc8
   14270:	str	r1, [r2, #204]	; 0xcc
   14274:	add	sp, sp, #20
   14278:	ldrd	r4, [sp]
   1427c:	ldrd	r6, [sp, #8]
   14280:	add	sp, sp, #16
   14284:	pop	{pc}		; (ldr pc, [sp], #4)
   14288:	ldr	r2, [pc, #160]	; 14330 <if_statement_inside_else_statement@@Base+0x514>
   1428c:	ldr	r3, [r2, #184]	; 0xb8
   14290:	ldr	r1, [r2, #188]	; 0xbc
   14294:	adds	r3, r3, #1
   14298:	adc	r1, r1, #0
   1429c:	str	r3, [r2, #184]	; 0xb8
   142a0:	str	r1, [r2, #188]	; 0xbc
   142a4:	ldr	r3, [pc, #136]	; 14334 <if_statement_inside_else_statement@@Base+0x518>
   142a8:	movw	r2, #558	; 0x22e
   142ac:	movw	r1, #38056	; 0x94a8
   142b0:	movt	r1, #1
   142b4:	movw	r0, #38708	; 0x9734
   142b8:	movt	r0, #1
   142bc:	bl	119c4 <__assert_fail@plt>
   142c0:	ldr	r2, [pc, #104]	; 14330 <if_statement_inside_else_statement@@Base+0x514>
   142c4:	ldr	r3, [r2, #192]	; 0xc0
   142c8:	ldr	r1, [r2, #196]	; 0xc4
   142cc:	adds	r3, r3, #1
   142d0:	adc	r1, r1, #0
   142d4:	str	r3, [r2, #192]	; 0xc0
   142d8:	str	r1, [r2, #196]	; 0xc4
   142dc:	ldr	r3, [pc, #80]	; 14334 <if_statement_inside_else_statement@@Base+0x518>
   142e0:	movw	r2, #559	; 0x22f
   142e4:	movw	r1, #38056	; 0x94a8
   142e8:	movt	r1, #1
   142ec:	movw	r0, #38496	; 0x9660
   142f0:	movt	r0, #1
   142f4:	bl	119c4 <__assert_fail@plt>
   142f8:	ldr	r2, [pc, #48]	; 14330 <if_statement_inside_else_statement@@Base+0x514>
   142fc:	ldr	r3, [r2, #208]	; 0xd0
   14300:	ldr	r1, [r2, #212]	; 0xd4
   14304:	adds	r3, r3, #1
   14308:	adc	r1, r1, #0
   1430c:	str	r3, [r2, #208]	; 0xd0
   14310:	str	r1, [r2, #212]	; 0xd4
   14314:	ldr	r3, [pc, #24]	; 14334 <if_statement_inside_else_statement@@Base+0x518>
   14318:	mov	r2, #560	; 0x230
   1431c:	movw	r1, #38056	; 0x94a8
   14320:	movt	r1, #1
   14324:	movw	r0, #38508	; 0x966c
   14328:	movt	r0, #1
   1432c:	bl	119c4 <__assert_fail@plt>
   14330:	muleq	r2, r8, lr
   14334:	andeq	r9, r1, r4, lsl #9

00014338 <main@@Base>:
   14338:	strd	r4, [sp, #-32]!	; 0xffffffe0
   1433c:	strd	r6, [sp, #8]
   14340:	strd	r8, [sp, #16]
   14344:	str	sl, [sp, #24]
   14348:	str	lr, [sp, #28]
   1434c:	movw	r5, #43400	; 0xa988
   14350:	movt	r5, #2
   14354:	add	r4, r5, #1520	; 0x5f0
   14358:	ldr	r3, [r4, #-8]
   1435c:	ldr	r2, [r4, #-4]
   14360:	adds	r3, r3, #1
   14364:	adc	r2, r2, #0
   14368:	str	r3, [r4, #-8]
   1436c:	str	r2, [r4, #-4]
   14370:	movw	r6, #43388	; 0xa97c
   14374:	movt	r6, #2
   14378:	mov	r1, #0
   1437c:	ldr	r0, [r6]
   14380:	bl	11838 <setbuf@plt>
   14384:	ldr	r3, [r4]
   14388:	ldr	r2, [r4, #4]
   1438c:	adds	r3, r3, #1
   14390:	adc	r2, r2, #0
   14394:	str	r3, [r4]
   14398:	str	r2, [r4, #4]
   1439c:	movw	r9, #38736	; 0x9750
   143a0:	movt	r9, #1
   143a4:	ldr	r3, [r6]
   143a8:	mov	r2, #14
   143ac:	mov	r1, #1
   143b0:	mov	r0, r9
   143b4:	bl	11880 <fwrite@plt>
   143b8:	ldr	r3, [r4, #8]
   143bc:	ldr	r2, [r4, #12]
   143c0:	adds	r3, r3, #1
   143c4:	adc	r2, r2, #0
   143c8:	str	r3, [r4, #8]
   143cc:	str	r2, [r4, #12]
   143d0:	ldr	r3, [r6]
   143d4:	mov	r2, #14
   143d8:	mov	r1, #1
   143dc:	movw	r0, #38752	; 0x9760
   143e0:	movt	r0, #1
   143e4:	bl	11880 <fwrite@plt>
   143e8:	ldr	r3, [r4, #16]
   143ec:	ldr	r2, [r4, #20]
   143f0:	adds	r3, r3, #1
   143f4:	adc	r2, r2, #0
   143f8:	str	r3, [r4, #16]
   143fc:	str	r2, [r4, #20]
   14400:	ldr	r3, [r6]
   14404:	mov	r2, #15
   14408:	mov	r1, #1
   1440c:	movw	r0, #38768	; 0x9770
   14410:	movt	r0, #1
   14414:	bl	11880 <fwrite@plt>
   14418:	ldr	r3, [r4, #24]
   1441c:	ldr	r2, [r4, #28]
   14420:	adds	r3, r3, #1
   14424:	adc	r2, r2, #0
   14428:	str	r3, [r4, #24]
   1442c:	str	r2, [r4, #28]
   14430:	mov	r0, #0
   14434:	bl	11850 <fflush@plt>
   14438:	ldr	r3, [r4, #32]
   1443c:	ldr	r2, [r4, #36]	; 0x24
   14440:	adds	r3, r3, #1
   14444:	adc	r2, r2, #0
   14448:	str	r3, [r4, #32]
   1444c:	str	r2, [r4, #36]	; 0x24
   14450:	movw	r8, #38808	; 0x9798
   14454:	movt	r8, #1
   14458:	movw	r7, #38820	; 0x97a4
   1445c:	movt	r7, #1
   14460:	movw	r2, #38784	; 0x9780
   14464:	movt	r2, #1
   14468:	mov	r1, r8
   1446c:	mov	r0, r7
   14470:	bl	11844 <printf@plt>
   14474:	ldr	r3, [r4, #40]	; 0x28
   14478:	ldr	r2, [r4, #44]	; 0x2c
   1447c:	adds	r3, r3, #1
   14480:	adc	r2, r2, #0
   14484:	str	r3, [r4, #40]	; 0x28
   14488:	str	r2, [r4, #44]	; 0x2c
   1448c:	bl	11ec8 <setup@@Base>
   14490:	ldr	r3, [r4, #48]	; 0x30
   14494:	ldr	r2, [r4, #52]	; 0x34
   14498:	adds	r3, r3, #1
   1449c:	adc	r2, r2, #0
   144a0:	str	r3, [r4, #48]	; 0x30
   144a4:	str	r2, [r4, #52]	; 0x34
   144a8:	bl	11f34 <no_int_as_first_stuff@@Base>
   144ac:	ldr	r3, [r4, #56]	; 0x38
   144b0:	ldr	r2, [r4, #60]	; 0x3c
   144b4:	adds	r3, r3, #1
   144b8:	adc	r2, r2, #0
   144bc:	str	r3, [r4, #56]	; 0x38
   144c0:	str	r2, [r4, #60]	; 0x3c
   144c4:	movw	r6, #38840	; 0x97b8
   144c8:	movt	r6, #1
   144cc:	mov	r0, r6
   144d0:	bl	118bc <puts@plt>
   144d4:	ldr	r3, [r4, #64]	; 0x40
   144d8:	ldr	r2, [r4, #68]	; 0x44
   144dc:	adds	r3, r3, #1
   144e0:	adc	r2, r2, #0
   144e4:	str	r3, [r4, #64]	; 0x40
   144e8:	str	r2, [r4, #68]	; 0x44
   144ec:	movw	r2, #38852	; 0x97c4
   144f0:	movt	r2, #1
   144f4:	mov	r1, r8
   144f8:	mov	r0, r7
   144fc:	bl	11844 <printf@plt>
   14500:	ldr	r3, [r4, #72]	; 0x48
   14504:	ldr	r2, [r4, #76]	; 0x4c
   14508:	adds	r3, r3, #1
   1450c:	adc	r2, r2, #0
   14510:	str	r3, [r4, #72]	; 0x48
   14514:	str	r2, [r4, #76]	; 0x4c
   14518:	bl	11ec8 <setup@@Base>
   1451c:	ldr	r3, [r4, #80]	; 0x50
   14520:	ldr	r2, [r4, #84]	; 0x54
   14524:	adds	r3, r3, #1
   14528:	adc	r2, r2, #0
   1452c:	str	r3, [r4, #80]	; 0x50
   14530:	str	r2, [r4, #84]	; 0x54
   14534:	bl	12084 <int_but_not_followed_by_function@@Base>
   14538:	ldr	r3, [r4, #88]	; 0x58
   1453c:	ldr	r2, [r4, #92]	; 0x5c
   14540:	adds	r3, r3, #1
   14544:	adc	r2, r2, #0
   14548:	str	r3, [r4, #88]	; 0x58
   1454c:	str	r2, [r4, #92]	; 0x5c
   14550:	mov	r0, r6
   14554:	bl	118bc <puts@plt>
   14558:	ldr	r3, [r4, #96]	; 0x60
   1455c:	ldr	r2, [r4, #100]	; 0x64
   14560:	adds	r3, r3, #1
   14564:	adc	r2, r2, #0
   14568:	str	r3, [r4, #96]	; 0x60
   1456c:	str	r2, [r4, #100]	; 0x64
   14570:	movw	r2, #38888	; 0x97e8
   14574:	movt	r2, #1
   14578:	mov	r1, r8
   1457c:	mov	r0, r7
   14580:	bl	11844 <printf@plt>
   14584:	ldr	r3, [r4, #104]	; 0x68
   14588:	ldr	r2, [r4, #108]	; 0x6c
   1458c:	adds	r3, r3, #1
   14590:	adc	r2, r2, #0
   14594:	str	r3, [r4, #104]	; 0x68
   14598:	str	r2, [r4, #108]	; 0x6c
   1459c:	bl	11ec8 <setup@@Base>
   145a0:	ldr	r3, [r4, #112]	; 0x70
   145a4:	ldr	r2, [r4, #116]	; 0x74
   145a8:	adds	r3, r3, #1
   145ac:	adc	r2, r2, #0
   145b0:	str	r3, [r4, #112]	; 0x70
   145b4:	str	r2, [r4, #116]	; 0x74
   145b8:	bl	12a98 <boolean_unary_operator_is_read_properly@@Base>
   145bc:	ldr	r3, [r4, #120]	; 0x78
   145c0:	ldr	r2, [r4, #124]	; 0x7c
   145c4:	adds	r3, r3, #1
   145c8:	adc	r2, r2, #0
   145cc:	str	r3, [r4, #120]	; 0x78
   145d0:	str	r2, [r4, #124]	; 0x7c
   145d4:	mov	r0, r6
   145d8:	bl	118bc <puts@plt>
   145dc:	ldr	r3, [r4, #128]	; 0x80
   145e0:	ldr	r2, [r4, #132]	; 0x84
   145e4:	adds	r3, r3, #1
   145e8:	adc	r2, r2, #0
   145ec:	str	r3, [r4, #128]	; 0x80
   145f0:	str	r2, [r4, #132]	; 0x84
   145f4:	movw	r2, #38928	; 0x9810
   145f8:	movt	r2, #1
   145fc:	mov	r1, r8
   14600:	mov	r0, r7
   14604:	bl	11844 <printf@plt>
   14608:	ldr	r3, [r4, #136]	; 0x88
   1460c:	ldr	r2, [r4, #140]	; 0x8c
   14610:	adds	r3, r3, #1
   14614:	adc	r2, r2, #0
   14618:	str	r3, [r4, #136]	; 0x88
   1461c:	str	r2, [r4, #140]	; 0x8c
   14620:	bl	11ec8 <setup@@Base>
   14624:	ldr	r3, [r4, #144]	; 0x90
   14628:	ldr	r2, [r4, #148]	; 0x94
   1462c:	adds	r3, r3, #1
   14630:	adc	r2, r2, #0
   14634:	str	r3, [r4, #144]	; 0x90
   14638:	str	r2, [r4, #148]	; 0x94
   1463c:	bl	127e4 <boolean_binary_operator_is_read_properly@@Base>
   14640:	ldr	r3, [r4, #152]	; 0x98
   14644:	ldr	r2, [r4, #156]	; 0x9c
   14648:	adds	r3, r3, #1
   1464c:	adc	r2, r2, #0
   14650:	str	r3, [r4, #152]	; 0x98
   14654:	str	r2, [r4, #156]	; 0x9c
   14658:	mov	r0, r6
   1465c:	bl	118bc <puts@plt>
   14660:	ldr	r3, [r4, #160]	; 0xa0
   14664:	ldr	r2, [r4, #164]	; 0xa4
   14668:	adds	r3, r3, #1
   1466c:	adc	r2, r2, #0
   14670:	str	r3, [r4, #160]	; 0xa0
   14674:	str	r2, [r4, #164]	; 0xa4
   14678:	movw	r2, #38972	; 0x983c
   1467c:	movt	r2, #1
   14680:	mov	r1, r8
   14684:	mov	r0, r7
   14688:	bl	11844 <printf@plt>
   1468c:	ldr	r3, [r4, #168]	; 0xa8
   14690:	ldr	r2, [r4, #172]	; 0xac
   14694:	adds	r3, r3, #1
   14698:	adc	r2, r2, #0
   1469c:	str	r3, [r4, #168]	; 0xa8
   146a0:	str	r2, [r4, #172]	; 0xac
   146a4:	bl	11ec8 <setup@@Base>
   146a8:	ldr	r3, [r4, #176]	; 0xb0
   146ac:	ldr	r2, [r4, #180]	; 0xb4
   146b0:	adds	r3, r3, #1
   146b4:	adc	r2, r2, #0
   146b8:	str	r3, [r4, #176]	; 0xb0
   146bc:	str	r2, [r4, #180]	; 0xb4
   146c0:	bl	1220c <boolean_expression_is_read_properly@@Base>
   146c4:	ldr	r3, [r4, #184]	; 0xb8
   146c8:	ldr	r2, [r4, #188]	; 0xbc
   146cc:	adds	r3, r3, #1
   146d0:	adc	r2, r2, #0
   146d4:	str	r3, [r4, #184]	; 0xb8
   146d8:	str	r2, [r4, #188]	; 0xbc
   146dc:	mov	r0, r6
   146e0:	bl	118bc <puts@plt>
   146e4:	ldr	r3, [r4, #192]	; 0xc0
   146e8:	ldr	r2, [r4, #196]	; 0xc4
   146ec:	adds	r3, r3, #1
   146f0:	adc	r2, r2, #0
   146f4:	str	r3, [r4, #192]	; 0xc0
   146f8:	str	r2, [r4, #196]	; 0xc4
   146fc:	movw	r2, #39008	; 0x9860
   14700:	movt	r2, #1
   14704:	mov	r1, r8
   14708:	mov	r0, r7
   1470c:	bl	11844 <printf@plt>
   14710:	ldr	r3, [r4, #200]	; 0xc8
   14714:	ldr	r2, [r4, #204]	; 0xcc
   14718:	adds	r3, r3, #1
   1471c:	adc	r2, r2, #0
   14720:	str	r3, [r4, #200]	; 0xc8
   14724:	str	r2, [r4, #204]	; 0xcc
   14728:	bl	11ec8 <setup@@Base>
   1472c:	ldr	r3, [r4, #208]	; 0xd0
   14730:	ldr	r2, [r4, #212]	; 0xd4
   14734:	adds	r3, r3, #1
   14738:	adc	r2, r2, #0
   1473c:	str	r3, [r4, #208]	; 0xd0
   14740:	str	r2, [r4, #212]	; 0xd4
   14744:	bl	12498 <boolean_expression_complex@@Base>
   14748:	ldr	r3, [r4, #216]	; 0xd8
   1474c:	ldr	r2, [r4, #220]	; 0xdc
   14750:	adds	r3, r3, #1
   14754:	adc	r2, r2, #0
   14758:	str	r3, [r4, #216]	; 0xd8
   1475c:	str	r2, [r4, #220]	; 0xdc
   14760:	mov	r0, r6
   14764:	bl	118bc <puts@plt>
   14768:	ldr	r3, [r4, #224]	; 0xe0
   1476c:	ldr	r2, [r4, #228]	; 0xe4
   14770:	adds	r3, r3, #1
   14774:	adc	r2, r2, #0
   14778:	str	r3, [r4, #224]	; 0xe0
   1477c:	str	r2, [r4, #228]	; 0xe4
   14780:	movw	r2, #39036	; 0x987c
   14784:	movt	r2, #1
   14788:	mov	r1, r8
   1478c:	mov	r0, r7
   14790:	bl	11844 <printf@plt>
   14794:	ldr	r3, [r4, #232]	; 0xe8
   14798:	ldr	r2, [r4, #236]	; 0xec
   1479c:	adds	r3, r3, #1
   147a0:	adc	r2, r2, #0
   147a4:	str	r3, [r4, #232]	; 0xe8
   147a8:	str	r2, [r4, #236]	; 0xec
   147ac:	bl	11ec8 <setup@@Base>
   147b0:	ldr	r3, [r4, #240]	; 0xf0
   147b4:	ldr	r2, [r4, #244]	; 0xf4
   147b8:	adds	r3, r3, #1
   147bc:	adc	r2, r2, #0
   147c0:	str	r3, [r4, #240]	; 0xf0
   147c4:	str	r2, [r4, #244]	; 0xf4
   147c8:	bl	12d14 <if_statement_only@@Base>
   147cc:	ldr	r3, [r4, #248]	; 0xf8
   147d0:	ldr	r2, [r4, #252]	; 0xfc
   147d4:	adds	r3, r3, #1
   147d8:	adc	r2, r2, #0
   147dc:	str	r3, [r4, #248]	; 0xf8
   147e0:	str	r2, [r4, #252]	; 0xfc
   147e4:	mov	r0, r6
   147e8:	bl	118bc <puts@plt>
   147ec:	ldr	r3, [r5, #1776]	; 0x6f0
   147f0:	ldr	r1, [r5, #1780]	; 0x6f4
   147f4:	adds	r3, r3, #1
   147f8:	adc	r1, r1, #0
   147fc:	str	r3, [r5, #1776]	; 0x6f0
   14800:	str	r1, [r5, #1780]	; 0x6f4
   14804:	movw	r2, #39056	; 0x9890
   14808:	movt	r2, #1
   1480c:	mov	r1, r8
   14810:	mov	r0, r7
   14814:	bl	11844 <printf@plt>
   14818:	ldr	r3, [r5, #1784]	; 0x6f8
   1481c:	ldr	r2, [r5, #1788]	; 0x6fc
   14820:	adds	r3, r3, #1
   14824:	adc	r2, r2, #0
   14828:	str	r3, [r5, #1784]	; 0x6f8
   1482c:	str	r2, [r5, #1788]	; 0x6fc
   14830:	bl	11ec8 <setup@@Base>
   14834:	ldr	r3, [r5, #1792]	; 0x700
   14838:	ldr	r2, [r5, #1796]	; 0x704
   1483c:	adds	r3, r3, #1
   14840:	adc	r2, r2, #0
   14844:	str	r3, [r5, #1792]	; 0x700
   14848:	str	r2, [r5, #1796]	; 0x704
   1484c:	bl	13028 <if_else_statements@@Base>
   14850:	ldr	r3, [r5, #1800]	; 0x708
   14854:	ldr	r2, [r5, #1804]	; 0x70c
   14858:	adds	r3, r3, #1
   1485c:	adc	r2, r2, #0
   14860:	str	r3, [r5, #1800]	; 0x708
   14864:	str	r2, [r5, #1804]	; 0x70c
   14868:	mov	r0, r6
   1486c:	bl	118bc <puts@plt>
   14870:	ldr	r3, [r5, #1808]	; 0x710
   14874:	ldr	r2, [r5, #1812]	; 0x714
   14878:	adds	r3, r3, #1
   1487c:	adc	r2, r2, #0
   14880:	str	r3, [r5, #1808]	; 0x710
   14884:	str	r2, [r5, #1812]	; 0x714
   14888:	movw	r2, #39076	; 0x98a4
   1488c:	movt	r2, #1
   14890:	mov	r1, r8
   14894:	mov	r0, r7
   14898:	bl	11844 <printf@plt>
   1489c:	ldr	r3, [r5, #1816]	; 0x718
   148a0:	ldr	r2, [r5, #1820]	; 0x71c
   148a4:	adds	r3, r3, #1
   148a8:	adc	r2, r2, #0
   148ac:	str	r3, [r5, #1816]	; 0x718
   148b0:	str	r2, [r5, #1820]	; 0x71c
   148b4:	bl	11ec8 <setup@@Base>
   148b8:	ldr	r3, [r5, #1824]	; 0x720
   148bc:	ldr	r2, [r5, #1828]	; 0x724
   148c0:	adds	r3, r3, #1
   148c4:	adc	r2, r2, #0
   148c8:	str	r3, [r5, #1824]	; 0x720
   148cc:	str	r2, [r5, #1828]	; 0x724
   148d0:	bl	13950 <if_statement_inside_if_statement@@Base>
   148d4:	ldr	r3, [r5, #1832]	; 0x728
   148d8:	ldr	r2, [r5, #1836]	; 0x72c
   148dc:	adds	r3, r3, #1
   148e0:	adc	r2, r2, #0
   148e4:	str	r3, [r5, #1832]	; 0x728
   148e8:	str	r2, [r5, #1836]	; 0x72c
   148ec:	mov	r0, r6
   148f0:	bl	118bc <puts@plt>
   148f4:	ldr	r3, [r5, #1840]	; 0x730
   148f8:	ldr	r2, [r5, #1844]	; 0x734
   148fc:	adds	r3, r3, #1
   14900:	adc	r2, r2, #0
   14904:	str	r3, [r5, #1840]	; 0x730
   14908:	str	r2, [r5, #1844]	; 0x734
   1490c:	movw	r2, #39112	; 0x98c8
   14910:	movt	r2, #1
   14914:	mov	r1, r8
   14918:	mov	r0, r7
   1491c:	bl	11844 <printf@plt>
   14920:	ldr	r3, [r5, #1848]	; 0x738
   14924:	ldr	r2, [r5, #1852]	; 0x73c
   14928:	adds	r3, r3, #1
   1492c:	adc	r2, r2, #0
   14930:	str	r3, [r5, #1848]	; 0x738
   14934:	str	r2, [r5, #1852]	; 0x73c
   14938:	bl	11ec8 <setup@@Base>
   1493c:	ldr	r3, [r5, #1856]	; 0x740
   14940:	ldr	r2, [r5, #1860]	; 0x744
   14944:	adds	r3, r3, #1
   14948:	adc	r2, r2, #0
   1494c:	str	r3, [r5, #1856]	; 0x740
   14950:	str	r2, [r5, #1860]	; 0x744
   14954:	bl	13e1c <if_statement_inside_else_statement@@Base>
   14958:	ldr	r3, [r5, #1864]	; 0x748
   1495c:	ldr	r2, [r5, #1868]	; 0x74c
   14960:	adds	r3, r3, #1
   14964:	adc	r2, r2, #0
   14968:	str	r3, [r5, #1864]	; 0x748
   1496c:	str	r2, [r5, #1868]	; 0x74c
   14970:	mov	r0, r6
   14974:	bl	118bc <puts@plt>
   14978:	ldr	r3, [r5, #1872]	; 0x750
   1497c:	ldr	r2, [r5, #1876]	; 0x754
   14980:	adds	r3, r3, #1
   14984:	adc	r2, r2, #0
   14988:	str	r3, [r5, #1872]	; 0x750
   1498c:	str	r2, [r5, #1876]	; 0x754
   14990:	movw	r2, #39148	; 0x98ec
   14994:	movt	r2, #1
   14998:	mov	r1, r8
   1499c:	mov	r0, r7
   149a0:	bl	11844 <printf@plt>
   149a4:	ldr	r3, [r5, #1880]	; 0x758
   149a8:	ldr	r2, [r5, #1884]	; 0x75c
   149ac:	adds	r3, r3, #1
   149b0:	adc	r2, r2, #0
   149b4:	str	r3, [r5, #1880]	; 0x758
   149b8:	str	r2, [r5, #1884]	; 0x75c
   149bc:	bl	11ec8 <setup@@Base>
   149c0:	ldr	r3, [r5, #1888]	; 0x760
   149c4:	ldr	r2, [r5, #1892]	; 0x764
   149c8:	adds	r3, r3, #1
   149cc:	adc	r2, r2, #0
   149d0:	str	r3, [r5, #1888]	; 0x760
   149d4:	str	r2, [r5, #1892]	; 0x764
   149d8:	bl	136d0 <body_with_one_return@@Base>
   149dc:	ldr	r3, [r5, #1896]	; 0x768
   149e0:	ldr	r2, [r5, #1900]	; 0x76c
   149e4:	adds	r3, r3, #1
   149e8:	adc	r2, r2, #0
   149ec:	str	r3, [r5, #1896]	; 0x768
   149f0:	str	r2, [r5, #1900]	; 0x76c
   149f4:	mov	r0, r6
   149f8:	bl	118bc <puts@plt>
   149fc:	ldr	r3, [r5, #1904]	; 0x770
   14a00:	ldr	r2, [r5, #1908]	; 0x774
   14a04:	adds	r3, r3, #1
   14a08:	adc	r2, r2, #0
   14a0c:	str	r3, [r5, #1904]	; 0x770
   14a10:	str	r2, [r5, #1908]	; 0x774
   14a14:	movw	r2, #39172	; 0x9904
   14a18:	movt	r2, #1
   14a1c:	mov	r1, r8
   14a20:	mov	r0, r7
   14a24:	bl	11844 <printf@plt>
   14a28:	ldr	r3, [r5, #1912]	; 0x778
   14a2c:	ldr	r2, [r5, #1916]	; 0x77c
   14a30:	adds	r3, r3, #1
   14a34:	adc	r2, r2, #0
   14a38:	str	r3, [r5, #1912]	; 0x778
   14a3c:	str	r2, [r5, #1916]	; 0x77c
   14a40:	bl	11ec8 <setup@@Base>
   14a44:	ldr	r3, [r5, #1920]	; 0x780
   14a48:	ldr	r2, [r5, #1924]	; 0x784
   14a4c:	adds	r3, r3, #1
   14a50:	adc	r2, r2, #0
   14a54:	str	r3, [r5, #1920]	; 0x780
   14a58:	str	r2, [r5, #1924]	; 0x784
   14a5c:	bl	1338c <body_with_two_returns@@Base>
   14a60:	ldr	r3, [r5, #1928]	; 0x788
   14a64:	ldr	r2, [r5, #1932]	; 0x78c
   14a68:	adds	r3, r3, #1
   14a6c:	adc	r2, r2, #0
   14a70:	str	r3, [r5, #1928]	; 0x788
   14a74:	str	r2, [r5, #1932]	; 0x78c
   14a78:	mov	r0, r6
   14a7c:	bl	118bc <puts@plt>
   14a80:	ldr	r3, [r5, #1936]	; 0x790
   14a84:	ldr	r2, [r5, #1940]	; 0x794
   14a88:	adds	r3, r3, #1
   14a8c:	adc	r2, r2, #0
   14a90:	str	r3, [r5, #1936]	; 0x790
   14a94:	str	r2, [r5, #1940]	; 0x794
   14a98:	movw	r0, #39196	; 0x991c
   14a9c:	movt	r0, #1
   14aa0:	bl	118bc <puts@plt>
   14aa4:	ldr	r3, [r5, #1944]	; 0x798
   14aa8:	ldr	r2, [r5, #1948]	; 0x79c
   14aac:	adds	r3, r3, #1
   14ab0:	adc	r2, r2, #0
   14ab4:	str	r3, [r5, #1944]	; 0x798
   14ab8:	str	r2, [r5, #1948]	; 0x79c
   14abc:	movw	r0, #39212	; 0x992c
   14ac0:	movt	r0, #1
   14ac4:	bl	118bc <puts@plt>
   14ac8:	ldr	r3, [r5, #1952]	; 0x7a0
   14acc:	ldr	r2, [r5, #1956]	; 0x7a4
   14ad0:	adds	r3, r3, #1
   14ad4:	adc	r2, r2, #0
   14ad8:	str	r3, [r5, #1952]	; 0x7a0
   14adc:	str	r2, [r5, #1956]	; 0x7a4
   14ae0:	mov	r0, r9
   14ae4:	bl	118bc <puts@plt>
   14ae8:	ldr	r3, [r5, #1960]	; 0x7a8
   14aec:	ldr	r2, [r5, #1964]	; 0x7ac
   14af0:	adds	r3, r3, #1
   14af4:	adc	r2, r2, #0
   14af8:	str	r3, [r5, #1960]	; 0x7a8
   14afc:	str	r2, [r5, #1964]	; 0x7ac
   14b00:	mov	r0, #0
   14b04:	ldrd	r4, [sp]
   14b08:	ldrd	r6, [sp, #8]
   14b0c:	ldrd	r8, [sp, #16]
   14b10:	ldr	sl, [sp, #24]
   14b14:	add	sp, sp, #28
   14b18:	pop	{pc}		; (ldr pc, [sp], #4)
   14b1c:	str	r4, [sp, #-8]!
   14b20:	str	lr, [sp, #4]
   14b24:	movw	r0, #41144	; 0xa0b8
   14b28:	movt	r0, #2
   14b2c:	bl	18fb0 <__gcov_sort_n_vals@@Base+0x4a0>
   14b30:	ldr	r4, [sp]
   14b34:	add	sp, sp, #4
   14b38:	pop	{pc}		; (ldr pc, [sp], #4)
   14b3c:	str	r4, [sp, #-8]!
   14b40:	str	lr, [sp, #4]
   14b44:	bl	18f40 <__gcov_sort_n_vals@@Base+0x430>
   14b48:	ldr	r4, [sp]
   14b4c:	add	sp, sp, #4
   14b50:	pop	{pc}		; (ldr pc, [sp], #4)

00014b54 <init_token_int_type@@Base>:
   14b54:	movw	r3, #45368	; 0xb138
   14b58:	movt	r3, #2
   14b5c:	ldr	r2, [r3]
   14b60:	ldr	r1, [r3, #4]
   14b64:	adds	r2, r2, #1
   14b68:	adc	r1, r1, #0
   14b6c:	str	r2, [r3]
   14b70:	str	r1, [r3, #4]
   14b74:	mov	r3, #0
   14b78:	str	r3, [r0]
   14b7c:	bx	lr

00014b80 <init_token_int_value@@Base>:
   14b80:	movw	r3, #45368	; 0xb138
   14b84:	movt	r3, #2
   14b88:	ldr	r2, [r3, #8]
   14b8c:	ldr	ip, [r3, #12]
   14b90:	adds	r2, r2, #1
   14b94:	adc	ip, ip, #0
   14b98:	str	r2, [r3, #8]
   14b9c:	str	ip, [r3, #12]
   14ba0:	mov	r3, #1
   14ba4:	str	r3, [r0]
   14ba8:	str	r1, [r0, #4]
   14bac:	bx	lr

00014bb0 <init_token_function@@Base>:
   14bb0:	movw	r3, #45368	; 0xb138
   14bb4:	movt	r3, #2
   14bb8:	ldr	r2, [r3, #16]
   14bbc:	ldr	ip, [r3, #20]
   14bc0:	adds	r2, r2, #1
   14bc4:	adc	ip, ip, #0
   14bc8:	str	r2, [r3, #16]
   14bcc:	str	ip, [r3, #20]
   14bd0:	mov	r3, #2
   14bd4:	str	r3, [r0]
   14bd8:	str	r1, [r0, #4]
   14bdc:	bx	lr

00014be0 <init_token_opar@@Base>:
   14be0:	movw	r3, #45368	; 0xb138
   14be4:	movt	r3, #2
   14be8:	ldr	r2, [r3, #24]
   14bec:	ldr	r1, [r3, #28]
   14bf0:	adds	r2, r2, #1
   14bf4:	adc	r1, r1, #0
   14bf8:	str	r2, [r3, #24]
   14bfc:	str	r1, [r3, #28]
   14c00:	mov	r3, #3
   14c04:	str	r3, [r0]
   14c08:	bx	lr

00014c0c <init_token_cpar@@Base>:
   14c0c:	movw	r3, #45368	; 0xb138
   14c10:	movt	r3, #2
   14c14:	ldr	r2, [r3, #32]
   14c18:	ldr	r1, [r3, #36]	; 0x24
   14c1c:	adds	r2, r2, #1
   14c20:	adc	r1, r1, #0
   14c24:	str	r2, [r3, #32]
   14c28:	str	r1, [r3, #36]	; 0x24
   14c2c:	mov	r3, #4
   14c30:	str	r3, [r0]
   14c34:	bx	lr

00014c38 <init_token_obra@@Base>:
   14c38:	movw	r3, #45368	; 0xb138
   14c3c:	movt	r3, #2
   14c40:	ldr	r2, [r3, #40]	; 0x28
   14c44:	ldr	r1, [r3, #44]	; 0x2c
   14c48:	adds	r2, r2, #1
   14c4c:	adc	r1, r1, #0
   14c50:	str	r2, [r3, #40]	; 0x28
   14c54:	str	r1, [r3, #44]	; 0x2c
   14c58:	mov	r3, #5
   14c5c:	str	r3, [r0]
   14c60:	bx	lr

00014c64 <init_token_cbra@@Base>:
   14c64:	movw	r3, #45368	; 0xb138
   14c68:	movt	r3, #2
   14c6c:	ldr	r2, [r3, #48]	; 0x30
   14c70:	ldr	r1, [r3, #52]	; 0x34
   14c74:	adds	r2, r2, #1
   14c78:	adc	r1, r1, #0
   14c7c:	str	r2, [r3, #48]	; 0x30
   14c80:	str	r1, [r3, #52]	; 0x34
   14c84:	mov	r3, #6
   14c88:	str	r3, [r0]
   14c8c:	bx	lr

00014c90 <init_token_return@@Base>:
   14c90:	movw	r3, #45368	; 0xb138
   14c94:	movt	r3, #2
   14c98:	ldr	r2, [r3, #56]	; 0x38
   14c9c:	ldr	r1, [r3, #60]	; 0x3c
   14ca0:	adds	r2, r2, #1
   14ca4:	adc	r1, r1, #0
   14ca8:	str	r2, [r3, #56]	; 0x38
   14cac:	str	r1, [r3, #60]	; 0x3c
   14cb0:	mov	r3, #7
   14cb4:	str	r3, [r0]
   14cb8:	bx	lr

00014cbc <init_token_semicolon@@Base>:
   14cbc:	movw	r3, #45368	; 0xb138
   14cc0:	movt	r3, #2
   14cc4:	ldr	r2, [r3, #64]	; 0x40
   14cc8:	ldr	r1, [r3, #68]	; 0x44
   14ccc:	adds	r2, r2, #1
   14cd0:	adc	r1, r1, #0
   14cd4:	str	r2, [r3, #64]	; 0x40
   14cd8:	str	r1, [r3, #68]	; 0x44
   14cdc:	mov	r3, #8
   14ce0:	str	r3, [r0]
   14ce4:	bx	lr

00014ce8 <init_token_eof@@Base>:
   14ce8:	movw	r3, #45368	; 0xb138
   14cec:	movt	r3, #2
   14cf0:	ldr	r2, [r3, #72]	; 0x48
   14cf4:	ldr	r1, [r3, #76]	; 0x4c
   14cf8:	adds	r2, r2, #1
   14cfc:	adc	r1, r1, #0
   14d00:	str	r2, [r3, #72]	; 0x48
   14d04:	str	r1, [r3, #76]	; 0x4c
   14d08:	mov	r3, #9
   14d0c:	str	r3, [r0]
   14d10:	bx	lr

00014d14 <init_token_if@@Base>:
   14d14:	movw	r3, #45368	; 0xb138
   14d18:	movt	r3, #2
   14d1c:	ldr	r2, [r3, #80]	; 0x50
   14d20:	ldr	r1, [r3, #84]	; 0x54
   14d24:	adds	r2, r2, #1
   14d28:	adc	r1, r1, #0
   14d2c:	str	r2, [r3, #80]	; 0x50
   14d30:	str	r1, [r3, #84]	; 0x54
   14d34:	mov	r3, #10
   14d38:	str	r3, [r0]
   14d3c:	bx	lr

00014d40 <init_token_else@@Base>:
   14d40:	movw	r3, #45368	; 0xb138
   14d44:	movt	r3, #2
   14d48:	ldr	r2, [r3, #88]	; 0x58
   14d4c:	ldr	r1, [r3, #92]	; 0x5c
   14d50:	adds	r2, r2, #1
   14d54:	adc	r1, r1, #0
   14d58:	str	r2, [r3, #88]	; 0x58
   14d5c:	str	r1, [r3, #92]	; 0x5c
   14d60:	mov	r3, #11
   14d64:	str	r3, [r0]
   14d68:	bx	lr

00014d6c <init_token_boolean_op@@Base>:
   14d6c:	movw	r3, #45368	; 0xb138
   14d70:	movt	r3, #2
   14d74:	ldr	r2, [r3, #96]	; 0x60
   14d78:	ldr	ip, [r3, #100]	; 0x64
   14d7c:	adds	r2, r2, #1
   14d80:	adc	ip, ip, #0
   14d84:	str	r2, [r3, #96]	; 0x60
   14d88:	str	ip, [r3, #100]	; 0x64
   14d8c:	mov	r3, #12
   14d90:	str	r3, [r0]
   14d94:	str	r1, [r0, #4]
   14d98:	bx	lr

00014d9c <free_token_int_type@@Base>:
   14d9c:	str	r4, [sp, #-8]!
   14da0:	str	lr, [sp, #4]
   14da4:	movw	r3, #45368	; 0xb138
   14da8:	movt	r3, #2
   14dac:	ldr	r2, [r3, #104]	; 0x68
   14db0:	ldr	r1, [r3, #108]	; 0x6c
   14db4:	adds	r2, r2, #1
   14db8:	adc	r1, r1, #0
   14dbc:	str	r2, [r3, #104]	; 0x68
   14dc0:	str	r1, [r3, #108]	; 0x6c
   14dc4:	bl	1185c <free@plt>
   14dc8:	ldr	r4, [sp]
   14dcc:	add	sp, sp, #4
   14dd0:	pop	{pc}		; (ldr pc, [sp], #4)

00014dd4 <free_token_int_value@@Base>:
   14dd4:	str	r4, [sp, #-8]!
   14dd8:	str	lr, [sp, #4]
   14ddc:	movw	r3, #45368	; 0xb138
   14de0:	movt	r3, #2
   14de4:	ldr	r2, [r3, #112]	; 0x70
   14de8:	ldr	r1, [r3, #116]	; 0x74
   14dec:	adds	r2, r2, #1
   14df0:	adc	r1, r1, #0
   14df4:	str	r2, [r3, #112]	; 0x70
   14df8:	str	r1, [r3, #116]	; 0x74
   14dfc:	bl	1185c <free@plt>
   14e00:	ldr	r4, [sp]
   14e04:	add	sp, sp, #4
   14e08:	pop	{pc}		; (ldr pc, [sp], #4)

00014e0c <free_token_function@@Base>:
   14e0c:	str	r4, [sp, #-8]!
   14e10:	str	lr, [sp, #4]
   14e14:	movw	r3, #45368	; 0xb138
   14e18:	movt	r3, #2
   14e1c:	ldr	r2, [r3, #120]	; 0x78
   14e20:	ldr	r1, [r3, #124]	; 0x7c
   14e24:	adds	r2, r2, #1
   14e28:	adc	r1, r1, #0
   14e2c:	str	r2, [r3, #120]	; 0x78
   14e30:	str	r1, [r3, #124]	; 0x7c
   14e34:	bl	1185c <free@plt>
   14e38:	ldr	r4, [sp]
   14e3c:	add	sp, sp, #4
   14e40:	pop	{pc}		; (ldr pc, [sp], #4)

00014e44 <free_token_opar@@Base>:
   14e44:	str	r4, [sp, #-8]!
   14e48:	str	lr, [sp, #4]
   14e4c:	movw	r3, #45368	; 0xb138
   14e50:	movt	r3, #2
   14e54:	ldr	r2, [r3, #128]	; 0x80
   14e58:	ldr	r1, [r3, #132]	; 0x84
   14e5c:	adds	r2, r2, #1
   14e60:	adc	r1, r1, #0
   14e64:	str	r2, [r3, #128]	; 0x80
   14e68:	str	r1, [r3, #132]	; 0x84
   14e6c:	bl	1185c <free@plt>
   14e70:	ldr	r4, [sp]
   14e74:	add	sp, sp, #4
   14e78:	pop	{pc}		; (ldr pc, [sp], #4)

00014e7c <free_token_cpar@@Base>:
   14e7c:	str	r4, [sp, #-8]!
   14e80:	str	lr, [sp, #4]
   14e84:	movw	r3, #45368	; 0xb138
   14e88:	movt	r3, #2
   14e8c:	ldr	r2, [r3, #136]	; 0x88
   14e90:	ldr	r1, [r3, #140]	; 0x8c
   14e94:	adds	r2, r2, #1
   14e98:	adc	r1, r1, #0
   14e9c:	str	r2, [r3, #136]	; 0x88
   14ea0:	str	r1, [r3, #140]	; 0x8c
   14ea4:	bl	1185c <free@plt>
   14ea8:	ldr	r4, [sp]
   14eac:	add	sp, sp, #4
   14eb0:	pop	{pc}		; (ldr pc, [sp], #4)

00014eb4 <free_token_obra@@Base>:
   14eb4:	str	r4, [sp, #-8]!
   14eb8:	str	lr, [sp, #4]
   14ebc:	movw	r3, #45368	; 0xb138
   14ec0:	movt	r3, #2
   14ec4:	ldr	r2, [r3, #144]	; 0x90
   14ec8:	ldr	r1, [r3, #148]	; 0x94
   14ecc:	adds	r2, r2, #1
   14ed0:	adc	r1, r1, #0
   14ed4:	str	r2, [r3, #144]	; 0x90
   14ed8:	str	r1, [r3, #148]	; 0x94
   14edc:	bl	1185c <free@plt>
   14ee0:	ldr	r4, [sp]
   14ee4:	add	sp, sp, #4
   14ee8:	pop	{pc}		; (ldr pc, [sp], #4)

00014eec <free_token_cbra@@Base>:
   14eec:	str	r4, [sp, #-8]!
   14ef0:	str	lr, [sp, #4]
   14ef4:	movw	r3, #45368	; 0xb138
   14ef8:	movt	r3, #2
   14efc:	ldr	r2, [r3, #152]	; 0x98
   14f00:	ldr	r1, [r3, #156]	; 0x9c
   14f04:	adds	r2, r2, #1
   14f08:	adc	r1, r1, #0
   14f0c:	str	r2, [r3, #152]	; 0x98
   14f10:	str	r1, [r3, #156]	; 0x9c
   14f14:	bl	1185c <free@plt>
   14f18:	ldr	r4, [sp]
   14f1c:	add	sp, sp, #4
   14f20:	pop	{pc}		; (ldr pc, [sp], #4)

00014f24 <free_token_return@@Base>:
   14f24:	str	r4, [sp, #-8]!
   14f28:	str	lr, [sp, #4]
   14f2c:	movw	r3, #45368	; 0xb138
   14f30:	movt	r3, #2
   14f34:	ldr	r2, [r3, #160]	; 0xa0
   14f38:	ldr	r1, [r3, #164]	; 0xa4
   14f3c:	adds	r2, r2, #1
   14f40:	adc	r1, r1, #0
   14f44:	str	r2, [r3, #160]	; 0xa0
   14f48:	str	r1, [r3, #164]	; 0xa4
   14f4c:	bl	1185c <free@plt>
   14f50:	ldr	r4, [sp]
   14f54:	add	sp, sp, #4
   14f58:	pop	{pc}		; (ldr pc, [sp], #4)

00014f5c <free_token_semicolon@@Base>:
   14f5c:	str	r4, [sp, #-8]!
   14f60:	str	lr, [sp, #4]
   14f64:	movw	r3, #45368	; 0xb138
   14f68:	movt	r3, #2
   14f6c:	ldr	r2, [r3, #168]	; 0xa8
   14f70:	ldr	r1, [r3, #172]	; 0xac
   14f74:	adds	r2, r2, #1
   14f78:	adc	r1, r1, #0
   14f7c:	str	r2, [r3, #168]	; 0xa8
   14f80:	str	r1, [r3, #172]	; 0xac
   14f84:	bl	1185c <free@plt>
   14f88:	ldr	r4, [sp]
   14f8c:	add	sp, sp, #4
   14f90:	pop	{pc}		; (ldr pc, [sp], #4)

00014f94 <free_token_eof@@Base>:
   14f94:	str	r4, [sp, #-8]!
   14f98:	str	lr, [sp, #4]
   14f9c:	movw	r3, #45368	; 0xb138
   14fa0:	movt	r3, #2
   14fa4:	ldr	r2, [r3, #176]	; 0xb0
   14fa8:	ldr	r1, [r3, #180]	; 0xb4
   14fac:	adds	r2, r2, #1
   14fb0:	adc	r1, r1, #0
   14fb4:	str	r2, [r3, #176]	; 0xb0
   14fb8:	str	r1, [r3, #180]	; 0xb4
   14fbc:	bl	1185c <free@plt>
   14fc0:	ldr	r4, [sp]
   14fc4:	add	sp, sp, #4
   14fc8:	pop	{pc}		; (ldr pc, [sp], #4)

00014fcc <free_token_if@@Base>:
   14fcc:	str	r4, [sp, #-8]!
   14fd0:	str	lr, [sp, #4]
   14fd4:	movw	r3, #45368	; 0xb138
   14fd8:	movt	r3, #2
   14fdc:	ldr	r2, [r3, #184]	; 0xb8
   14fe0:	ldr	r1, [r3, #188]	; 0xbc
   14fe4:	adds	r2, r2, #1
   14fe8:	adc	r1, r1, #0
   14fec:	str	r2, [r3, #184]	; 0xb8
   14ff0:	str	r1, [r3, #188]	; 0xbc
   14ff4:	bl	1185c <free@plt>
   14ff8:	ldr	r4, [sp]
   14ffc:	add	sp, sp, #4
   15000:	pop	{pc}		; (ldr pc, [sp], #4)

00015004 <free_token_else@@Base>:
   15004:	str	r4, [sp, #-8]!
   15008:	str	lr, [sp, #4]
   1500c:	movw	r3, #45368	; 0xb138
   15010:	movt	r3, #2
   15014:	ldr	r2, [r3, #192]	; 0xc0
   15018:	ldr	r1, [r3, #196]	; 0xc4
   1501c:	adds	r2, r2, #1
   15020:	adc	r1, r1, #0
   15024:	str	r2, [r3, #192]	; 0xc0
   15028:	str	r1, [r3, #196]	; 0xc4
   1502c:	bl	1185c <free@plt>
   15030:	ldr	r4, [sp]
   15034:	add	sp, sp, #4
   15038:	pop	{pc}		; (ldr pc, [sp], #4)

0001503c <free_token_boolean_op@@Base>:
   1503c:	str	r4, [sp, #-8]!
   15040:	str	lr, [sp, #4]
   15044:	mov	r4, r0
   15048:	ldr	r0, [r0, #4]
   1504c:	cmp	r0, #0
   15050:	beq	1508c <free_token_boolean_op@@Base+0x50>
   15054:	movw	r3, #45368	; 0xb138
   15058:	movt	r3, #2
   1505c:	ldr	r2, [r3, #200]	; 0xc8
   15060:	ldr	r1, [r3, #204]	; 0xcc
   15064:	adds	r2, r2, #1
   15068:	adc	r1, r1, #0
   1506c:	str	r2, [r3, #200]	; 0xc8
   15070:	str	r1, [r3, #204]	; 0xcc
   15074:	bl	1185c <free@plt>
   15078:	mov	r0, r4
   1507c:	bl	1185c <free@plt>
   15080:	ldr	r4, [sp]
   15084:	add	sp, sp, #4
   15088:	pop	{pc}		; (ldr pc, [sp], #4)
   1508c:	movw	r3, #45368	; 0xb138
   15090:	movt	r3, #2
   15094:	ldr	r2, [r3, #208]	; 0xd0
   15098:	ldr	r1, [r3, #212]	; 0xd4
   1509c:	adds	r2, r2, #1
   150a0:	adc	r1, r1, #0
   150a4:	str	r2, [r3, #208]	; 0xd0
   150a8:	str	r1, [r3, #212]	; 0xd4
   150ac:	b	15078 <free_token_boolean_op@@Base+0x3c>
   150b0:	str	r4, [sp, #-8]!
   150b4:	str	lr, [sp, #4]
   150b8:	movw	r0, #41708	; 0xa2ec
   150bc:	movt	r0, #2
   150c0:	bl	18fb0 <__gcov_sort_n_vals@@Base+0x4a0>
   150c4:	ldr	r4, [sp]
   150c8:	add	sp, sp, #4
   150cc:	pop	{pc}		; (ldr pc, [sp], #4)
   150d0:	str	r4, [sp, #-8]!
   150d4:	str	lr, [sp, #4]
   150d8:	bl	18f40 <__gcov_sort_n_vals@@Base+0x430>
   150dc:	ldr	r4, [sp]
   150e0:	add	sp, sp, #4
   150e4:	pop	{pc}		; (ldr pc, [sp], #4)

000150e8 <init_ast_base@@Base>:
   150e8:	push	{lr}		; (str lr, [sp, #-4]!)
   150ec:	movw	r3, #45584	; 0xb210
   150f0:	movt	r3, #2
   150f4:	ldr	ip, [r3]
   150f8:	ldr	lr, [r3, #4]
   150fc:	adds	ip, ip, #1
   15100:	adc	lr, lr, #0
   15104:	str	ip, [r3]
   15108:	str	lr, [r3, #4]
   1510c:	str	r1, [r0]
   15110:	str	r2, [r0, #4]
   15114:	pop	{pc}		; (ldr pc, [sp], #4)

00015118 <init_ast_base_single@@Base>:
   15118:	str	r4, [sp, #-8]!
   1511c:	str	lr, [sp, #4]
   15120:	movw	r4, #45584	; 0xb210
   15124:	movt	r4, #2
   15128:	ldr	r3, [r4, #8]
   1512c:	ldr	r2, [r4, #12]
   15130:	adds	r3, r3, #1
   15134:	adc	r2, r2, #0
   15138:	str	r3, [r4, #8]
   1513c:	str	r2, [r4, #12]
   15140:	mov	r2, #0
   15144:	bl	150e8 <init_ast_base@@Base>
   15148:	ldr	r3, [r4, #16]
   1514c:	ldr	r2, [r4, #20]
   15150:	adds	r3, r3, #1
   15154:	adc	r2, r2, #0
   15158:	str	r3, [r4, #16]
   1515c:	str	r2, [r4, #20]
   15160:	ldr	r4, [sp]
   15164:	add	sp, sp, #4
   15168:	pop	{pc}		; (ldr pc, [sp], #4)

0001516c <init_node_id@@Base>:
   1516c:	strd	r4, [sp, #-16]!
   15170:	str	r6, [sp, #8]
   15174:	str	lr, [sp, #12]
   15178:	mov	r5, r0
   1517c:	mov	r6, r1
   15180:	movw	r4, #45584	; 0xb210
   15184:	movt	r4, #2
   15188:	ldr	r3, [r4, #24]
   1518c:	ldr	r2, [r4, #28]
   15190:	adds	r3, r3, #1
   15194:	adc	r2, r2, #0
   15198:	str	r3, [r4, #24]
   1519c:	str	r2, [r4, #28]
   151a0:	mov	r1, #0
   151a4:	bl	15118 <init_ast_base_single@@Base>
   151a8:	ldr	r3, [r4, #32]
   151ac:	ldr	r2, [r4, #36]	; 0x24
   151b0:	adds	r3, r3, #1
   151b4:	adc	r2, r2, #0
   151b8:	str	r3, [r4, #32]
   151bc:	str	r2, [r4, #36]	; 0x24
   151c0:	str	r6, [r5, #8]
   151c4:	ldrd	r4, [sp]
   151c8:	ldr	r6, [sp, #8]
   151cc:	add	sp, sp, #12
   151d0:	pop	{pc}		; (ldr pc, [sp], #4)

000151d4 <init_node_int@@Base>:
   151d4:	strd	r4, [sp, #-16]!
   151d8:	str	r6, [sp, #8]
   151dc:	str	lr, [sp, #12]
   151e0:	mov	r5, r0
   151e4:	mov	r6, r1
   151e8:	movw	r4, #45584	; 0xb210
   151ec:	movt	r4, #2
   151f0:	ldr	r3, [r4, #40]	; 0x28
   151f4:	ldr	r2, [r4, #44]	; 0x2c
   151f8:	adds	r3, r3, #1
   151fc:	adc	r2, r2, #0
   15200:	str	r3, [r4, #40]	; 0x28
   15204:	str	r2, [r4, #44]	; 0x2c
   15208:	mov	r1, #1
   1520c:	bl	15118 <init_ast_base_single@@Base>
   15210:	ldr	r3, [r4, #48]	; 0x30
   15214:	ldr	r2, [r4, #52]	; 0x34
   15218:	adds	r3, r3, #1
   1521c:	adc	r2, r2, #0
   15220:	str	r3, [r4, #48]	; 0x30
   15224:	str	r2, [r4, #52]	; 0x34
   15228:	str	r6, [r5, #8]
   1522c:	ldrd	r4, [sp]
   15230:	ldr	r6, [sp, #8]
   15234:	add	sp, sp, #12
   15238:	pop	{pc}		; (ldr pc, [sp], #4)

0001523c <init_node_function@@Base>:
   1523c:	strd	r4, [sp, #-24]!	; 0xffffffe8
   15240:	strd	r6, [sp, #8]
   15244:	str	r8, [sp, #16]
   15248:	str	lr, [sp, #20]
   1524c:	mov	r5, r0
   15250:	mov	r7, r1
   15254:	mov	r6, r2
   15258:	movw	r4, #45584	; 0xb210
   1525c:	movt	r4, #2
   15260:	ldr	r3, [r4, #56]	; 0x38
   15264:	ldr	r2, [r4, #60]	; 0x3c
   15268:	adds	r3, r3, #1
   1526c:	adc	r2, r2, #0
   15270:	str	r3, [r4, #56]	; 0x38
   15274:	str	r2, [r4, #60]	; 0x3c
   15278:	mov	r1, #2
   1527c:	bl	15118 <init_ast_base_single@@Base>
   15280:	ldr	r3, [r4, #64]	; 0x40
   15284:	ldr	r2, [r4, #68]	; 0x44
   15288:	adds	r3, r3, #1
   1528c:	adc	r2, r2, #0
   15290:	str	r3, [r4, #64]	; 0x40
   15294:	str	r2, [r4, #68]	; 0x44
   15298:	str	r7, [r5, #8]
   1529c:	str	r6, [r5, #12]
   152a0:	ldrd	r4, [sp]
   152a4:	ldrd	r6, [sp, #8]
   152a8:	ldr	r8, [sp, #16]
   152ac:	add	sp, sp, #20
   152b0:	pop	{pc}		; (ldr pc, [sp], #4)

000152b4 <init_node_return@@Base>:
   152b4:	strd	r4, [sp, #-16]!
   152b8:	str	r6, [sp, #8]
   152bc:	str	lr, [sp, #12]
   152c0:	mov	r5, r0
   152c4:	mov	r6, r1
   152c8:	movw	r4, #45584	; 0xb210
   152cc:	movt	r4, #2
   152d0:	ldr	r3, [r4, #72]	; 0x48
   152d4:	ldr	r2, [r4, #76]	; 0x4c
   152d8:	adds	r3, r3, #1
   152dc:	adc	r2, r2, #0
   152e0:	str	r3, [r4, #72]	; 0x48
   152e4:	str	r2, [r4, #76]	; 0x4c
   152e8:	mov	r1, #3
   152ec:	bl	15118 <init_ast_base_single@@Base>
   152f0:	ldr	r3, [r4, #80]	; 0x50
   152f4:	ldr	r2, [r4, #84]	; 0x54
   152f8:	adds	r3, r3, #1
   152fc:	adc	r2, r2, #0
   15300:	str	r3, [r4, #80]	; 0x50
   15304:	str	r2, [r4, #84]	; 0x54
   15308:	str	r6, [r5, #8]
   1530c:	ldrd	r4, [sp]
   15310:	ldr	r6, [sp, #8]
   15314:	add	sp, sp, #12
   15318:	pop	{pc}		; (ldr pc, [sp], #4)

0001531c <init_node_if@@Base>:
   1531c:	strd	r4, [sp, #-24]!	; 0xffffffe8
   15320:	strd	r6, [sp, #8]
   15324:	str	r8, [sp, #16]
   15328:	str	lr, [sp, #20]
   1532c:	mov	r5, r0
   15330:	mov	r8, r1
   15334:	mov	r7, r2
   15338:	mov	r6, r3
   1533c:	movw	r4, #45584	; 0xb210
   15340:	movt	r4, #2
   15344:	ldr	r3, [r4, #88]	; 0x58
   15348:	ldr	r2, [r4, #92]	; 0x5c
   1534c:	adds	r3, r3, #1
   15350:	adc	r2, r2, #0
   15354:	str	r3, [r4, #88]	; 0x58
   15358:	str	r2, [r4, #92]	; 0x5c
   1535c:	mov	r1, #4
   15360:	bl	15118 <init_ast_base_single@@Base>
   15364:	ldr	r3, [r4, #96]	; 0x60
   15368:	ldr	r2, [r4, #100]	; 0x64
   1536c:	adds	r3, r3, #1
   15370:	adc	r2, r2, #0
   15374:	str	r3, [r4, #96]	; 0x60
   15378:	str	r2, [r4, #100]	; 0x64
   1537c:	str	r8, [r5, #8]
   15380:	str	r7, [r5, #12]
   15384:	str	r6, [r5, #16]
   15388:	ldrd	r4, [sp]
   1538c:	ldrd	r6, [sp, #8]
   15390:	ldr	r8, [sp, #16]
   15394:	add	sp, sp, #20
   15398:	pop	{pc}		; (ldr pc, [sp], #4)

0001539c <init_node_boolean_operator@@Base>:
   1539c:	strd	r4, [sp, #-24]!	; 0xffffffe8
   153a0:	strd	r6, [sp, #8]
   153a4:	str	r8, [sp, #16]
   153a8:	str	lr, [sp, #20]
   153ac:	mov	r5, r0
   153b0:	mov	r8, r1
   153b4:	mov	r7, r2
   153b8:	mov	r6, r3
   153bc:	movw	r4, #45584	; 0xb210
   153c0:	movt	r4, #2
   153c4:	ldr	r3, [r4, #104]	; 0x68
   153c8:	ldr	r2, [r4, #108]	; 0x6c
   153cc:	adds	r3, r3, #1
   153d0:	adc	r2, r2, #0
   153d4:	str	r3, [r4, #104]	; 0x68
   153d8:	str	r2, [r4, #108]	; 0x6c
   153dc:	mov	r1, #0
   153e0:	bl	15118 <init_ast_base_single@@Base>
   153e4:	ldr	r3, [r4, #112]	; 0x70
   153e8:	ldr	r2, [r4, #116]	; 0x74
   153ec:	adds	r3, r3, #1
   153f0:	adc	r2, r2, #0
   153f4:	str	r3, [r4, #112]	; 0x70
   153f8:	str	r2, [r4, #116]	; 0x74
   153fc:	mov	r3, #5
   15400:	str	r3, [r5]
   15404:	str	r8, [r5, #16]
   15408:	str	r7, [r5, #8]
   1540c:	str	r6, [r5, #12]
   15410:	ldrd	r4, [sp]
   15414:	ldrd	r6, [sp, #8]
   15418:	ldr	r8, [sp, #16]
   1541c:	add	sp, sp, #20
   15420:	pop	{pc}		; (ldr pc, [sp], #4)

00015424 <free_node_boolean_operator@@Base>:
   15424:	strd	r4, [sp, #-16]!
   15428:	str	r6, [sp, #8]
   1542c:	str	lr, [sp, #12]
   15430:	mov	r5, r0
   15434:	ldr	r0, [r0, #4]
   15438:	cmp	r0, #0
   1543c:	beq	154dc <free_node_boolean_operator@@Base+0xb8>
   15440:	movw	r4, #45584	; 0xb210
   15444:	movt	r4, #2
   15448:	ldr	r3, [r4, #120]	; 0x78
   1544c:	ldr	r2, [r4, #124]	; 0x7c
   15450:	adds	r3, r3, #1
   15454:	adc	r2, r2, #0
   15458:	str	r3, [r4, #120]	; 0x78
   1545c:	str	r2, [r4, #124]	; 0x7c
   15460:	bl	15500 <free_node@@Base>
   15464:	ldr	r3, [r4, #136]	; 0x88
   15468:	ldr	r2, [r4, #140]	; 0x8c
   1546c:	adds	r3, r3, #1
   15470:	adc	r2, r2, #0
   15474:	str	r3, [r4, #136]	; 0x88
   15478:	str	r2, [r4, #140]	; 0x8c
   1547c:	ldr	r0, [r5, #8]
   15480:	bl	15500 <free_node@@Base>
   15484:	movw	r4, #45584	; 0xb210
   15488:	movt	r4, #2
   1548c:	ldr	r3, [r4, #144]	; 0x90
   15490:	ldr	r2, [r4, #148]	; 0x94
   15494:	adds	r3, r3, #1
   15498:	adc	r2, r2, #0
   1549c:	str	r3, [r4, #144]	; 0x90
   154a0:	str	r2, [r4, #148]	; 0x94
   154a4:	ldr	r0, [r5, #12]
   154a8:	bl	15500 <free_node@@Base>
   154ac:	ldr	r3, [r4, #152]	; 0x98
   154b0:	ldr	r2, [r4, #156]	; 0x9c
   154b4:	adds	r3, r3, #1
   154b8:	adc	r2, r2, #0
   154bc:	str	r3, [r4, #152]	; 0x98
   154c0:	str	r2, [r4, #156]	; 0x9c
   154c4:	mov	r0, r5
   154c8:	bl	1185c <free@plt>
   154cc:	ldrd	r4, [sp]
   154d0:	ldr	r6, [sp, #8]
   154d4:	add	sp, sp, #12
   154d8:	pop	{pc}		; (ldr pc, [sp], #4)
   154dc:	movw	r3, #45584	; 0xb210
   154e0:	movt	r3, #2
   154e4:	ldr	r2, [r3, #128]	; 0x80
   154e8:	ldr	r1, [r3, #132]	; 0x84
   154ec:	adds	r2, r2, #1
   154f0:	adc	r1, r1, #0
   154f4:	str	r2, [r3, #128]	; 0x80
   154f8:	str	r1, [r3, #132]	; 0x84
   154fc:	b	1547c <free_node_boolean_operator@@Base+0x58>

00015500 <free_node@@Base>:
   15500:	str	r4, [sp, #-8]!
   15504:	str	lr, [sp, #4]
   15508:	ldr	r3, [r0]
   1550c:	cmp	r3, #5
   15510:	ldrls	pc, [pc, r3, lsl #2]
   15514:	b	156b8 <free_node@@Base+0x1b8>
   15518:	andeq	r5, r1, r0, lsr r5
   1551c:	andeq	r5, r1, r8, ror r5
   15520:			; <UNDEFINED> instruction: 0x000155b8
   15524:	strdeq	r5, [r1], -r8
   15528:	andeq	r5, r1, r8, lsr r6
   1552c:	andeq	r5, r1, r8, ror r6
   15530:	movw	r4, #45584	; 0xb210
   15534:	movt	r4, #2
   15538:	ldr	r3, [r4, #168]	; 0xa8
   1553c:	ldr	r2, [r4, #172]	; 0xac
   15540:	adds	r3, r3, #1
   15544:	adc	r2, r2, #0
   15548:	str	r3, [r4, #168]	; 0xa8
   1554c:	str	r2, [r4, #172]	; 0xac
   15550:	bl	159c4 <free_node_id@@Base>
   15554:	ldr	r3, [r4, #216]	; 0xd8
   15558:	ldr	r2, [r4, #220]	; 0xdc
   1555c:	adds	r3, r3, #1
   15560:	adc	r2, r2, #0
   15564:	str	r3, [r4, #216]	; 0xd8
   15568:	str	r2, [r4, #220]	; 0xdc
   1556c:	ldr	r4, [sp]
   15570:	add	sp, sp, #4
   15574:	pop	{pc}		; (ldr pc, [sp], #4)
   15578:	movw	r4, #45584	; 0xb210
   1557c:	movt	r4, #2
   15580:	ldr	r3, [r4, #176]	; 0xb0
   15584:	ldr	r2, [r4, #180]	; 0xb4
   15588:	adds	r3, r3, #1
   1558c:	adc	r2, r2, #0
   15590:	str	r3, [r4, #176]	; 0xb0
   15594:	str	r2, [r4, #180]	; 0xb4
   15598:	bl	15934 <free_node_int@@Base>
   1559c:	ldr	r3, [r4, #224]	; 0xe0
   155a0:	ldr	r2, [r4, #228]	; 0xe4
   155a4:	adds	r3, r3, #1
   155a8:	adc	r2, r2, #0
   155ac:	str	r3, [r4, #224]	; 0xe0
   155b0:	str	r2, [r4, #228]	; 0xe4
   155b4:	b	1556c <free_node@@Base+0x6c>
   155b8:	movw	r4, #45584	; 0xb210
   155bc:	movt	r4, #2
   155c0:	ldr	r3, [r4, #184]	; 0xb8
   155c4:	ldr	r2, [r4, #188]	; 0xbc
   155c8:	adds	r3, r3, #1
   155cc:	adc	r2, r2, #0
   155d0:	str	r3, [r4, #184]	; 0xb8
   155d4:	str	r2, [r4, #188]	; 0xbc
   155d8:	bl	1589c <free_node_function@@Base>
   155dc:	ldr	r3, [r4, #232]	; 0xe8
   155e0:	ldr	r2, [r4, #236]	; 0xec
   155e4:	adds	r3, r3, #1
   155e8:	adc	r2, r2, #0
   155ec:	str	r3, [r4, #232]	; 0xe8
   155f0:	str	r2, [r4, #236]	; 0xec
   155f4:	b	1556c <free_node@@Base+0x6c>
   155f8:	movw	r4, #45584	; 0xb210
   155fc:	movt	r4, #2
   15600:	ldr	r3, [r4, #192]	; 0xc0
   15604:	ldr	r2, [r4, #196]	; 0xc4
   15608:	adds	r3, r3, #1
   1560c:	adc	r2, r2, #0
   15610:	str	r3, [r4, #192]	; 0xc0
   15614:	str	r2, [r4, #196]	; 0xc4
   15618:	bl	1580c <free_node_return@@Base>
   1561c:	ldr	r3, [r4, #240]	; 0xf0
   15620:	ldr	r2, [r4, #244]	; 0xf4
   15624:	adds	r3, r3, #1
   15628:	adc	r2, r2, #0
   1562c:	str	r3, [r4, #240]	; 0xf0
   15630:	str	r2, [r4, #244]	; 0xf4
   15634:	b	1556c <free_node@@Base+0x6c>
   15638:	movw	r4, #45584	; 0xb210
   1563c:	movt	r4, #2
   15640:	ldr	r3, [r4, #200]	; 0xc8
   15644:	ldr	r2, [r4, #204]	; 0xcc
   15648:	adds	r3, r3, #1
   1564c:	adc	r2, r2, #0
   15650:	str	r3, [r4, #200]	; 0xc8
   15654:	str	r2, [r4, #204]	; 0xcc
   15658:	bl	15718 <free_node_if@@Base>
   1565c:	ldr	r3, [r4, #248]	; 0xf8
   15660:	ldr	r2, [r4, #252]	; 0xfc
   15664:	adds	r3, r3, #1
   15668:	adc	r2, r2, #0
   1566c:	str	r3, [r4, #248]	; 0xf8
   15670:	str	r2, [r4, #252]	; 0xfc
   15674:	b	1556c <free_node@@Base+0x6c>
   15678:	movw	r4, #45584	; 0xb210
   1567c:	movt	r4, #2
   15680:	ldr	r3, [r4, #208]	; 0xd0
   15684:	ldr	r2, [r4, #212]	; 0xd4
   15688:	adds	r3, r3, #1
   1568c:	adc	r2, r2, #0
   15690:	str	r3, [r4, #208]	; 0xd0
   15694:	str	r2, [r4, #212]	; 0xd4
   15698:	bl	15424 <free_node_boolean_operator@@Base>
   1569c:	ldr	r3, [r4, #256]	; 0x100
   156a0:	ldr	r2, [r4, #260]	; 0x104
   156a4:	adds	r3, r3, #1
   156a8:	adc	r2, r2, #0
   156ac:	str	r3, [r4, #256]	; 0x100
   156b0:	str	r2, [r4, #260]	; 0x104
   156b4:	b	1556c <free_node@@Base+0x6c>
   156b8:	movw	r4, #45584	; 0xb210
   156bc:	movt	r4, #2
   156c0:	ldr	r3, [r4, #160]	; 0xa0
   156c4:	ldr	r2, [r4, #164]	; 0xa4
   156c8:	adds	r3, r3, #1
   156cc:	adc	r2, r2, #0
   156d0:	str	r3, [r4, #160]	; 0xa0
   156d4:	str	r2, [r4, #164]	; 0xa4
   156d8:	movw	r3, #43384	; 0xa978
   156dc:	movt	r3, #2
   156e0:	ldr	r3, [r3]
   156e4:	mov	r2, #31
   156e8:	mov	r1, #1
   156ec:	movw	r0, #39420	; 0x99fc
   156f0:	movt	r0, #1
   156f4:	bl	11880 <fwrite@plt>
   156f8:	ldr	r3, [r4, #264]	; 0x108
   156fc:	ldr	r2, [r4, #268]	; 0x10c
   15700:	adds	r3, r3, #1
   15704:	adc	r2, r2, #0
   15708:	str	r3, [r4, #264]	; 0x108
   1570c:	str	r2, [r4, #268]	; 0x10c
   15710:	mov	r0, #1
   15714:	bl	118f8 <exit@plt>

00015718 <free_node_if@@Base>:
   15718:	strd	r4, [sp, #-16]!
   1571c:	str	r6, [sp, #8]
   15720:	str	lr, [sp, #12]
   15724:	mov	r5, r0
   15728:	ldr	r0, [r0, #4]
   1572c:	cmp	r0, #0
   15730:	beq	157e8 <free_node_if@@Base+0xd0>
   15734:	ldr	r4, [pc, #204]	; 15808 <free_node_if@@Base+0xf0>
   15738:	ldr	r3, [r4]
   1573c:	ldr	r2, [r4, #4]
   15740:	adds	r3, r3, #1
   15744:	adc	r2, r2, #0
   15748:	str	r3, [r4]
   1574c:	str	r2, [r4, #4]
   15750:	bl	15500 <free_node@@Base>
   15754:	ldr	r3, [r4, #16]
   15758:	ldr	r2, [r4, #20]
   1575c:	adds	r3, r3, #1
   15760:	adc	r2, r2, #0
   15764:	str	r3, [r4, #16]
   15768:	str	r2, [r4, #20]
   1576c:	ldr	r0, [r5, #8]
   15770:	bl	15500 <free_node@@Base>
   15774:	ldr	r4, [pc, #140]	; 15808 <free_node_if@@Base+0xf0>
   15778:	ldr	r3, [r4, #24]
   1577c:	ldr	r2, [r4, #28]
   15780:	adds	r3, r3, #1
   15784:	adc	r2, r2, #0
   15788:	str	r3, [r4, #24]
   1578c:	str	r2, [r4, #28]
   15790:	ldr	r0, [r5, #12]
   15794:	bl	15500 <free_node@@Base>
   15798:	ldr	r3, [r4, #32]
   1579c:	ldr	r2, [r4, #36]	; 0x24
   157a0:	adds	r3, r3, #1
   157a4:	adc	r2, r2, #0
   157a8:	str	r3, [r4, #32]
   157ac:	str	r2, [r4, #36]	; 0x24
   157b0:	ldr	r0, [r5, #16]
   157b4:	bl	15500 <free_node@@Base>
   157b8:	ldr	r3, [r4, #40]	; 0x28
   157bc:	ldr	r2, [r4, #44]	; 0x2c
   157c0:	adds	r3, r3, #1
   157c4:	adc	r2, r2, #0
   157c8:	str	r3, [r4, #40]	; 0x28
   157cc:	str	r2, [r4, #44]	; 0x2c
   157d0:	mov	r0, r5
   157d4:	bl	1185c <free@plt>
   157d8:	ldrd	r4, [sp]
   157dc:	ldr	r6, [sp, #8]
   157e0:	add	sp, sp, #12
   157e4:	pop	{pc}		; (ldr pc, [sp], #4)
   157e8:	ldr	r2, [pc, #24]	; 15808 <free_node_if@@Base+0xf0>
   157ec:	ldr	r3, [r2, #8]
   157f0:	ldr	r1, [r2, #12]
   157f4:	adds	r3, r3, #1
   157f8:	adc	r1, r1, #0
   157fc:	str	r3, [r2, #8]
   15800:	str	r1, [r2, #12]
   15804:	b	1576c <free_node_if@@Base+0x54>
   15808:	andeq	fp, r2, r0, lsr #6

0001580c <free_node_return@@Base>:
   1580c:	strd	r4, [sp, #-16]!
   15810:	str	r6, [sp, #8]
   15814:	str	lr, [sp, #12]
   15818:	mov	r5, r0
   1581c:	ldr	r0, [r0, #4]
   15820:	cmp	r0, #0
   15824:	beq	15878 <free_node_return@@Base+0x6c>
   15828:	ldr	r4, [pc, #104]	; 15898 <free_node_return@@Base+0x8c>
   1582c:	ldr	r3, [r4]
   15830:	ldr	r2, [r4, #4]
   15834:	adds	r3, r3, #1
   15838:	adc	r2, r2, #0
   1583c:	str	r3, [r4]
   15840:	str	r2, [r4, #4]
   15844:	bl	15500 <free_node@@Base>
   15848:	ldr	r3, [r4, #16]
   1584c:	ldr	r2, [r4, #20]
   15850:	adds	r3, r3, #1
   15854:	adc	r2, r2, #0
   15858:	str	r3, [r4, #16]
   1585c:	str	r2, [r4, #20]
   15860:	mov	r0, r5
   15864:	bl	1185c <free@plt>
   15868:	ldrd	r4, [sp]
   1586c:	ldr	r6, [sp, #8]
   15870:	add	sp, sp, #12
   15874:	pop	{pc}		; (ldr pc, [sp], #4)
   15878:	ldr	r2, [pc, #24]	; 15898 <free_node_return@@Base+0x8c>
   1587c:	ldr	r3, [r2, #8]
   15880:	ldr	r1, [r2, #12]
   15884:	adds	r3, r3, #1
   15888:	adc	r1, r1, #0
   1588c:	str	r3, [r2, #8]
   15890:	str	r1, [r2, #12]
   15894:	b	15860 <free_node_return@@Base+0x54>
   15898:	andeq	fp, r2, r0, asr r3

0001589c <free_node_function@@Base>:
   1589c:	strd	r4, [sp, #-16]!
   158a0:	str	r6, [sp, #8]
   158a4:	str	lr, [sp, #12]
   158a8:	mov	r5, r0
   158ac:	ldr	r0, [r0, #4]
   158b0:	cmp	r0, #0
   158b4:	beq	15910 <free_node_function@@Base+0x74>
   158b8:	ldr	r4, [pc, #112]	; 15930 <free_node_function@@Base+0x94>
   158bc:	ldr	r3, [r4, #-8]
   158c0:	ldr	r2, [r4, #-4]
   158c4:	adds	r3, r3, #1
   158c8:	adc	r2, r2, #0
   158cc:	str	r3, [r4, #-8]
   158d0:	str	r2, [r4, #-4]
   158d4:	bl	15500 <free_node@@Base>
   158d8:	ldr	r3, [r4, #8]
   158dc:	ldr	r2, [r4, #12]
   158e0:	adds	r3, r3, #1
   158e4:	adc	r2, r2, #0
   158e8:	str	r3, [r4, #8]
   158ec:	str	r2, [r4, #12]
   158f0:	ldr	r0, [r5, #8]
   158f4:	bl	1185c <free@plt>
   158f8:	mov	r0, r5
   158fc:	bl	1185c <free@plt>
   15900:	ldrd	r4, [sp]
   15904:	ldr	r6, [sp, #8]
   15908:	add	sp, sp, #12
   1590c:	pop	{pc}		; (ldr pc, [sp], #4)
   15910:	ldr	r2, [pc, #24]	; 15930 <free_node_function@@Base+0x94>
   15914:	ldr	r3, [r2]
   15918:	ldr	r1, [r2, #4]
   1591c:	adds	r3, r3, #1
   15920:	adc	r1, r1, #0
   15924:	str	r3, [r2]
   15928:	str	r1, [r2, #4]
   1592c:	b	158f0 <free_node_function@@Base+0x54>
   15930:	andeq	fp, r2, r0, ror r3

00015934 <free_node_int@@Base>:
   15934:	strd	r4, [sp, #-16]!
   15938:	str	r6, [sp, #8]
   1593c:	str	lr, [sp, #12]
   15940:	mov	r5, r0
   15944:	ldr	r0, [r0, #4]
   15948:	cmp	r0, #0
   1594c:	beq	159a0 <free_node_int@@Base+0x6c>
   15950:	ldr	r4, [pc, #104]	; 159c0 <free_node_int@@Base+0x8c>
   15954:	ldr	r3, [r4]
   15958:	ldr	r2, [r4, #4]
   1595c:	adds	r3, r3, #1
   15960:	adc	r2, r2, #0
   15964:	str	r3, [r4]
   15968:	str	r2, [r4, #4]
   1596c:	bl	15500 <free_node@@Base>
   15970:	ldr	r3, [r4, #16]
   15974:	ldr	r2, [r4, #20]
   15978:	adds	r3, r3, #1
   1597c:	adc	r2, r2, #0
   15980:	str	r3, [r4, #16]
   15984:	str	r2, [r4, #20]
   15988:	mov	r0, r5
   1598c:	bl	1185c <free@plt>
   15990:	ldrd	r4, [sp]
   15994:	ldr	r6, [sp, #8]
   15998:	add	sp, sp, #12
   1599c:	pop	{pc}		; (ldr pc, [sp], #4)
   159a0:	ldr	r2, [pc, #24]	; 159c0 <free_node_int@@Base+0x8c>
   159a4:	ldr	r3, [r2, #8]
   159a8:	ldr	r1, [r2, #12]
   159ac:	adds	r3, r3, #1
   159b0:	adc	r1, r1, #0
   159b4:	str	r3, [r2, #8]
   159b8:	str	r1, [r2, #12]
   159bc:	b	15988 <free_node_int@@Base+0x54>
   159c0:	andeq	fp, r2, r0, lsl #7

000159c4 <free_node_id@@Base>:
   159c4:	strd	r4, [sp, #-16]!
   159c8:	str	r6, [sp, #8]
   159cc:	str	lr, [sp, #12]
   159d0:	mov	r5, r0
   159d4:	ldr	r0, [r0, #4]
   159d8:	cmp	r0, #0
   159dc:	beq	15a30 <free_node_id@@Base+0x6c>
   159e0:	ldr	r4, [pc, #104]	; 15a50 <free_node_id@@Base+0x8c>
   159e4:	ldr	r3, [r4, #-8]
   159e8:	ldr	r2, [r4, #-4]
   159ec:	adds	r3, r3, #1
   159f0:	adc	r2, r2, #0
   159f4:	str	r3, [r4, #-8]
   159f8:	str	r2, [r4, #-4]
   159fc:	bl	15500 <free_node@@Base>
   15a00:	ldr	r3, [r4, #8]
   15a04:	ldr	r2, [r4, #12]
   15a08:	adds	r3, r3, #1
   15a0c:	adc	r2, r2, #0
   15a10:	str	r3, [r4, #8]
   15a14:	str	r2, [r4, #12]
   15a18:	mov	r0, r5
   15a1c:	bl	1185c <free@plt>
   15a20:	ldrd	r4, [sp]
   15a24:	ldr	r6, [sp, #8]
   15a28:	add	sp, sp, #12
   15a2c:	pop	{pc}		; (ldr pc, [sp], #4)
   15a30:	ldr	r2, [pc, #24]	; 15a50 <free_node_id@@Base+0x8c>
   15a34:	ldr	r3, [r2]
   15a38:	ldr	r1, [r2, #4]
   15a3c:	adds	r3, r3, #1
   15a40:	adc	r1, r1, #0
   15a44:	str	r3, [r2]
   15a48:	str	r1, [r2, #4]
   15a4c:	b	15a18 <free_node_id@@Base+0x54>
   15a50:	andeq	fp, r2, r0, lsr #7

00015a54 <get_boolean_op_value@@Base>:
   15a54:	strd	r4, [sp, #-16]!
   15a58:	str	r6, [sp, #8]
   15a5c:	str	lr, [sp, #12]
   15a60:	ldr	r5, [r0, #4]
   15a64:	mov	r1, #2
   15a68:	mov	r0, r5
   15a6c:	bl	11958 <strnlen@plt>
   15a70:	cmp	r0, #2
   15a74:	beq	15aec <get_boolean_op_value@@Base+0x98>
   15a78:	ldrb	r3, [r5]
   15a7c:	cmp	r3, #60	; 0x3c
   15a80:	beq	15cc0 <get_boolean_op_value@@Base+0x26c>
   15a84:	cmp	r3, #62	; 0x3e
   15a88:	beq	15cf4 <get_boolean_op_value@@Base+0x2a0>
   15a8c:	cmp	r3, #33	; 0x21
   15a90:	beq	15c9c <get_boolean_op_value@@Base+0x248>
   15a94:	ldr	r4, [pc, #672]	; 15d3c <get_boolean_op_value@@Base+0x2e8>
   15a98:	ldr	r3, [r4, #64]	; 0x40
   15a9c:	ldr	r2, [r4, #68]	; 0x44
   15aa0:	adds	r3, r3, #1
   15aa4:	adc	r2, r2, #0
   15aa8:	str	r3, [r4, #64]	; 0x40
   15aac:	str	r2, [r4, #68]	; 0x44
   15ab0:	movw	r3, #43384	; 0xa978
   15ab4:	movt	r3, #2
   15ab8:	mov	r2, r5
   15abc:	movw	r1, #39476	; 0x9a34
   15ac0:	movt	r1, #1
   15ac4:	ldr	r0, [r3]
   15ac8:	bl	11910 <fprintf@plt>
   15acc:	ldr	r3, [r4, #96]	; 0x60
   15ad0:	ldr	r2, [r4, #100]	; 0x64
   15ad4:	adds	r3, r3, #1
   15ad8:	adc	r2, r2, #0
   15adc:	str	r3, [r4, #96]	; 0x60
   15ae0:	str	r2, [r4, #100]	; 0x64
   15ae4:	mov	r0, #1
   15ae8:	bl	118f8 <exit@plt>
   15aec:	mov	r4, r0
   15af0:	mov	r2, #2
   15af4:	movw	r1, #39452	; 0x9a1c
   15af8:	movt	r1, #1
   15afc:	mov	r0, r5
   15b00:	bl	119a0 <strncmp@plt>
   15b04:	cmp	r0, #0
   15b08:	beq	15d18 <get_boolean_op_value@@Base+0x2c4>
   15b0c:	mov	r2, #2
   15b10:	movw	r1, #39456	; 0x9a20
   15b14:	movt	r1, #1
   15b18:	mov	r0, r5
   15b1c:	bl	119a0 <strncmp@plt>
   15b20:	cmp	r0, #0
   15b24:	beq	15c10 <get_boolean_op_value@@Base+0x1bc>
   15b28:	mov	r2, #2
   15b2c:	movw	r1, #39460	; 0x9a24
   15b30:	movt	r1, #1
   15b34:	mov	r0, r5
   15b38:	bl	119a0 <strncmp@plt>
   15b3c:	cmp	r0, #0
   15b40:	beq	15c34 <get_boolean_op_value@@Base+0x1e0>
   15b44:	mov	r2, #2
   15b48:	movw	r1, #39464	; 0x9a28
   15b4c:	movt	r1, #1
   15b50:	mov	r0, r5
   15b54:	bl	119a0 <strncmp@plt>
   15b58:	cmp	r0, #0
   15b5c:	beq	15c54 <get_boolean_op_value@@Base+0x200>
   15b60:	mov	r2, #2
   15b64:	movw	r1, #39468	; 0x9a2c
   15b68:	movt	r1, #1
   15b6c:	mov	r0, r5
   15b70:	bl	119a0 <strncmp@plt>
   15b74:	cmp	r0, #0
   15b78:	beq	15c78 <get_boolean_op_value@@Base+0x224>
   15b7c:	ldr	r2, [pc, #440]	; 15d3c <get_boolean_op_value@@Base+0x2e8>
   15b80:	ldr	r3, [r2, #40]	; 0x28
   15b84:	ldr	r1, [r2, #44]	; 0x2c
   15b88:	adds	r3, r3, #1
   15b8c:	adc	r1, r1, #0
   15b90:	str	r3, [r2, #40]	; 0x28
   15b94:	str	r1, [r2, #44]	; 0x2c
   15b98:	mov	r2, #2
   15b9c:	movw	r1, #39472	; 0x9a30
   15ba0:	movt	r1, #1
   15ba4:	mov	r0, r5
   15ba8:	bl	119a0 <strncmp@plt>
   15bac:	cmp	r0, #0
   15bb0:	moveq	r4, #5
   15bb4:	beq	15ce0 <get_boolean_op_value@@Base+0x28c>
   15bb8:	ldr	r4, [pc, #380]	; 15d3c <get_boolean_op_value@@Base+0x2e8>
   15bbc:	ldr	r3, [r4, #48]	; 0x30
   15bc0:	ldr	r2, [r4, #52]	; 0x34
   15bc4:	adds	r3, r3, #1
   15bc8:	adc	r2, r2, #0
   15bcc:	str	r3, [r4, #48]	; 0x30
   15bd0:	str	r2, [r4, #52]	; 0x34
   15bd4:	movw	r3, #43384	; 0xa978
   15bd8:	movt	r3, #2
   15bdc:	mov	r2, r5
   15be0:	movw	r1, #39476	; 0x9a34
   15be4:	movt	r1, #1
   15be8:	ldr	r0, [r3]
   15bec:	bl	11910 <fprintf@plt>
   15bf0:	ldr	r3, [r4, #56]	; 0x38
   15bf4:	ldr	r2, [r4, #60]	; 0x3c
   15bf8:	adds	r3, r3, #1
   15bfc:	adc	r2, r2, #0
   15c00:	str	r3, [r4, #56]	; 0x38
   15c04:	str	r2, [r4, #60]	; 0x3c
   15c08:	mov	r0, #1
   15c0c:	bl	118f8 <exit@plt>
   15c10:	ldr	r2, [pc, #292]	; 15d3c <get_boolean_op_value@@Base+0x2e8>
   15c14:	ldr	r3, [r2, #8]
   15c18:	ldr	r1, [r2, #12]
   15c1c:	adds	r3, r3, #1
   15c20:	adc	r1, r1, #0
   15c24:	str	r3, [r2, #8]
   15c28:	str	r1, [r2, #12]
   15c2c:	mov	r4, #1
   15c30:	b	15ce0 <get_boolean_op_value@@Base+0x28c>
   15c34:	ldr	r2, [pc, #256]	; 15d3c <get_boolean_op_value@@Base+0x2e8>
   15c38:	ldr	r3, [r2, #16]
   15c3c:	ldr	r1, [r2, #20]
   15c40:	adds	r3, r3, #1
   15c44:	adc	r1, r1, #0
   15c48:	str	r3, [r2, #16]
   15c4c:	str	r1, [r2, #20]
   15c50:	b	15ce0 <get_boolean_op_value@@Base+0x28c>
   15c54:	ldr	r2, [pc, #224]	; 15d3c <get_boolean_op_value@@Base+0x2e8>
   15c58:	ldr	r3, [r2, #24]
   15c5c:	ldr	r1, [r2, #28]
   15c60:	adds	r3, r3, #1
   15c64:	adc	r1, r1, #0
   15c68:	str	r3, [r2, #24]
   15c6c:	str	r1, [r2, #28]
   15c70:	mov	r4, #3
   15c74:	b	15ce0 <get_boolean_op_value@@Base+0x28c>
   15c78:	ldr	r2, [pc, #188]	; 15d3c <get_boolean_op_value@@Base+0x2e8>
   15c7c:	ldr	r3, [r2, #32]
   15c80:	ldr	r1, [r2, #36]	; 0x24
   15c84:	adds	r3, r3, #1
   15c88:	adc	r1, r1, #0
   15c8c:	str	r3, [r2, #32]
   15c90:	str	r1, [r2, #36]	; 0x24
   15c94:	mov	r4, #4
   15c98:	b	15ce0 <get_boolean_op_value@@Base+0x28c>
   15c9c:	ldr	r2, [pc, #152]	; 15d3c <get_boolean_op_value@@Base+0x2e8>
   15ca0:	ldr	r3, [r2, #72]	; 0x48
   15ca4:	ldr	r1, [r2, #76]	; 0x4c
   15ca8:	adds	r3, r3, #1
   15cac:	adc	r1, r1, #0
   15cb0:	str	r3, [r2, #72]	; 0x48
   15cb4:	str	r1, [r2, #76]	; 0x4c
   15cb8:	mov	r4, #8
   15cbc:	b	15ce0 <get_boolean_op_value@@Base+0x28c>
   15cc0:	ldr	r2, [pc, #116]	; 15d3c <get_boolean_op_value@@Base+0x2e8>
   15cc4:	ldr	r3, [r2, #80]	; 0x50
   15cc8:	ldr	r1, [r2, #84]	; 0x54
   15ccc:	adds	r3, r3, #1
   15cd0:	adc	r1, r1, #0
   15cd4:	str	r3, [r2, #80]	; 0x50
   15cd8:	str	r1, [r2, #84]	; 0x54
   15cdc:	mov	r4, #6
   15ce0:	mov	r0, r4
   15ce4:	ldrd	r4, [sp]
   15ce8:	ldr	r6, [sp, #8]
   15cec:	add	sp, sp, #12
   15cf0:	pop	{pc}		; (ldr pc, [sp], #4)
   15cf4:	ldr	r2, [pc, #64]	; 15d3c <get_boolean_op_value@@Base+0x2e8>
   15cf8:	ldr	r3, [r2, #88]	; 0x58
   15cfc:	ldr	r1, [r2, #92]	; 0x5c
   15d00:	adds	r3, r3, #1
   15d04:	adc	r1, r1, #0
   15d08:	str	r3, [r2, #88]	; 0x58
   15d0c:	str	r1, [r2, #92]	; 0x5c
   15d10:	mov	r4, #7
   15d14:	b	15ce0 <get_boolean_op_value@@Base+0x28c>
   15d18:	ldr	r2, [pc, #28]	; 15d3c <get_boolean_op_value@@Base+0x2e8>
   15d1c:	ldr	r3, [r2]
   15d20:	ldr	r1, [r2, #4]
   15d24:	adds	r3, r3, #1
   15d28:	adc	r1, r1, #0
   15d2c:	str	r3, [r2]
   15d30:	str	r1, [r2, #4]
   15d34:	mov	r4, #0
   15d38:	b	15ce0 <get_boolean_op_value@@Base+0x28c>
   15d3c:			; <UNDEFINED> instruction: 0x0002b3b0
   15d40:	str	r4, [sp, #-8]!
   15d44:	str	lr, [sp, #4]
   15d48:	movw	r0, #42496	; 0xa600
   15d4c:	movt	r0, #2
   15d50:	bl	18fb0 <__gcov_sort_n_vals@@Base+0x4a0>
   15d54:	ldr	r4, [sp]
   15d58:	add	sp, sp, #4
   15d5c:	pop	{pc}		; (ldr pc, [sp], #4)
   15d60:	str	r4, [sp, #-8]!
   15d64:	str	lr, [sp, #4]
   15d68:	bl	18f40 <__gcov_sort_n_vals@@Base+0x430>
   15d6c:	ldr	r4, [sp]
   15d70:	add	sp, sp, #4
   15d74:	pop	{pc}		; (ldr pc, [sp], #4)

00015d78 <init_grammar@@Base>:
   15d78:	movw	r3, #46104	; 0xb418
   15d7c:	movt	r3, #2
   15d80:	ldr	r2, [r3]
   15d84:	ldr	ip, [r3, #4]
   15d88:	adds	r2, r2, #1
   15d8c:	adc	ip, ip, #0
   15d90:	str	r2, [r3]
   15d94:	str	ip, [r3, #4]
   15d98:	str	r1, [r0]
   15d9c:	bx	lr

00015da0 <destroy_grammar@@Base>:
   15da0:	movw	r3, #46104	; 0xb418
   15da4:	movt	r3, #2
   15da8:	ldr	r2, [r3, #8]
   15dac:	ldr	r1, [r3, #12]
   15db0:	adds	r2, r2, #1
   15db4:	adc	r1, r1, #0
   15db8:	str	r2, [r3, #8]
   15dbc:	str	r1, [r3, #12]
   15dc0:	bx	lr

00015dc4 <read_return_expression@@Base>:
   15dc4:	strd	r4, [sp, #-24]!	; 0xffffffe8
   15dc8:	strd	r6, [sp, #8]
   15dcc:	str	r8, [sp, #16]
   15dd0:	str	lr, [sp, #20]
   15dd4:	mov	r5, r0
   15dd8:	movw	r3, #46104	; 0xb418
   15ddc:	movt	r3, #2
   15de0:	ldr	r2, [r3, #16]
   15de4:	ldr	r1, [r3, #20]
   15de8:	adds	r2, r2, #1
   15dec:	adc	r1, r1, #0
   15df0:	str	r2, [r3, #16]
   15df4:	str	r1, [r3, #20]
   15df8:	ldr	r0, [r0]
   15dfc:	bl	11ac0 <next@@Base>
   15e00:	ldr	r3, [r0]
   15e04:	cmp	r3, #1
   15e08:	bne	15efc <read_return_expression@@Base+0x138>
   15e0c:	mov	r6, r0
   15e10:	movw	r4, #46104	; 0xb418
   15e14:	movt	r4, #2
   15e18:	ldr	r3, [r4, #32]
   15e1c:	ldr	r2, [r4, #36]	; 0x24
   15e20:	adds	r3, r3, #1
   15e24:	adc	r2, r2, #0
   15e28:	str	r3, [r4, #32]
   15e2c:	str	r2, [r4, #36]	; 0x24
   15e30:	mov	r0, #12
   15e34:	bl	118c8 <malloc@plt>
   15e38:	mov	r7, r0
   15e3c:	ldr	r1, [r6, #4]
   15e40:	bl	151d4 <init_node_int@@Base>
   15e44:	ldr	r3, [r4, #40]	; 0x28
   15e48:	ldr	r2, [r4, #44]	; 0x2c
   15e4c:	adds	r3, r3, #1
   15e50:	adc	r2, r2, #0
   15e54:	str	r3, [r4, #40]	; 0x28
   15e58:	str	r2, [r4, #44]	; 0x2c
   15e5c:	mov	r0, r6
   15e60:	bl	14dd4 <free_token_int_value@@Base>
   15e64:	ldr	r3, [r4, #48]	; 0x30
   15e68:	ldr	r2, [r4, #52]	; 0x34
   15e6c:	adds	r3, r3, #1
   15e70:	adc	r2, r2, #0
   15e74:	str	r3, [r4, #48]	; 0x30
   15e78:	str	r2, [r4, #52]	; 0x34
   15e7c:	mov	r0, #12
   15e80:	bl	118c8 <malloc@plt>
   15e84:	mov	r6, r0
   15e88:	mov	r1, r7
   15e8c:	bl	152b4 <init_node_return@@Base>
   15e90:	ldr	r3, [r4, #56]	; 0x38
   15e94:	ldr	r2, [r4, #60]	; 0x3c
   15e98:	adds	r3, r3, #1
   15e9c:	adc	r2, r2, #0
   15ea0:	str	r3, [r4, #56]	; 0x38
   15ea4:	str	r2, [r4, #60]	; 0x3c
   15ea8:	ldr	r0, [r5]
   15eac:	bl	11ac0 <next@@Base>
   15eb0:	ldr	r3, [r0]
   15eb4:	cmp	r3, #8
   15eb8:	bne	15f38 <read_return_expression@@Base+0x174>
   15ebc:	movw	r4, #46104	; 0xb418
   15ec0:	movt	r4, #2
   15ec4:	ldr	r3, [r4, #72]	; 0x48
   15ec8:	ldr	r2, [r4, #76]	; 0x4c
   15ecc:	adds	r3, r3, #1
   15ed0:	adc	r2, r2, #0
   15ed4:	str	r3, [r4, #72]	; 0x48
   15ed8:	str	r2, [r4, #76]	; 0x4c
   15edc:	bl	14f5c <free_token_semicolon@@Base>
   15ee0:	ldr	r3, [r4, #80]	; 0x50
   15ee4:	ldr	r2, [r4, #84]	; 0x54
   15ee8:	adds	r3, r3, #1
   15eec:	adc	r2, r2, #0
   15ef0:	str	r3, [r4, #80]	; 0x50
   15ef4:	str	r2, [r4, #84]	; 0x54
   15ef8:	b	15f20 <read_return_expression@@Base+0x15c>
   15efc:	movw	r3, #46104	; 0xb418
   15f00:	movt	r3, #2
   15f04:	ldr	r2, [r3, #24]
   15f08:	ldr	r1, [r3, #28]
   15f0c:	adds	r2, r2, #1
   15f10:	adc	r1, r1, #0
   15f14:	str	r2, [r3, #24]
   15f18:	str	r1, [r3, #28]
   15f1c:	mov	r6, #0
   15f20:	mov	r0, r6
   15f24:	ldrd	r4, [sp]
   15f28:	ldrd	r6, [sp, #8]
   15f2c:	ldr	r8, [sp, #16]
   15f30:	add	sp, sp, #20
   15f34:	pop	{pc}		; (ldr pc, [sp], #4)
   15f38:	ldr	r2, [r4, #64]	; 0x40
   15f3c:	ldr	r1, [r4, #68]	; 0x44
   15f40:	adds	r2, r2, #1
   15f44:	adc	r1, r1, #0
   15f48:	str	r2, [r4, #64]	; 0x40
   15f4c:	str	r1, [r4, #68]	; 0x44
   15f50:	mov	r6, #0
   15f54:	b	15f20 <read_return_expression@@Base+0x15c>

00015f58 <read_boolean_unary_expression@@Base>:
   15f58:	strd	r4, [sp, #-24]!	; 0xffffffe8
   15f5c:	strd	r6, [sp, #8]
   15f60:	str	r8, [sp, #16]
   15f64:	str	lr, [sp, #20]
   15f68:	mov	r5, r0
   15f6c:	movw	r3, #46104	; 0xb418
   15f70:	movt	r3, #2
   15f74:	ldr	r2, [r3, #88]	; 0x58
   15f78:	ldr	r1, [r3, #92]	; 0x5c
   15f7c:	adds	r2, r2, #1
   15f80:	adc	r1, r1, #0
   15f84:	str	r2, [r3, #88]	; 0x58
   15f88:	str	r1, [r3, #92]	; 0x5c
   15f8c:	mov	r0, #20
   15f90:	bl	118c8 <malloc@plt>
   15f94:	mov	r6, r0
   15f98:	ldr	r0, [r5]
   15f9c:	bl	11ac0 <next@@Base>
   15fa0:	ldr	r3, [r0]
   15fa4:	cmp	r3, #12
   15fa8:	bne	160d8 <read_boolean_unary_expression@@Base+0x180>
   15fac:	mov	r8, r0
   15fb0:	movw	r4, #46104	; 0xb418
   15fb4:	movt	r4, #2
   15fb8:	ldr	r3, [r4, #104]	; 0x68
   15fbc:	ldr	r2, [r4, #108]	; 0x6c
   15fc0:	adds	r3, r3, #1
   15fc4:	adc	r2, r2, #0
   15fc8:	str	r3, [r4, #104]	; 0x68
   15fcc:	str	r2, [r4, #108]	; 0x6c
   15fd0:	bl	15a54 <get_boolean_op_value@@Base>
   15fd4:	mov	r7, r0
   15fd8:	ldr	r3, [r4, #120]	; 0x78
   15fdc:	ldr	r2, [r4, #124]	; 0x7c
   15fe0:	adds	r3, r3, #1
   15fe4:	adc	r2, r2, #0
   15fe8:	str	r3, [r4, #120]	; 0x78
   15fec:	str	r2, [r4, #124]	; 0x7c
   15ff0:	mov	r0, r8
   15ff4:	bl	1503c <free_token_boolean_op@@Base>
   15ff8:	ldr	r3, [r4, #128]	; 0x80
   15ffc:	ldr	r2, [r4, #132]	; 0x84
   16000:	adds	r3, r3, #1
   16004:	adc	r2, r2, #0
   16008:	str	r3, [r4, #128]	; 0x80
   1600c:	str	r2, [r4, #132]	; 0x84
   16010:	ldr	r0, [r5]
   16014:	bl	11ac0 <next@@Base>
   16018:	mov	r8, r0
   1601c:	ldr	r3, [r0]
   16020:	cmp	r3, #1
   16024:	bne	16120 <read_boolean_unary_expression@@Base+0x1c8>
   16028:	movw	r4, #46104	; 0xb418
   1602c:	movt	r4, #2
   16030:	ldr	r3, [r4, #144]	; 0x90
   16034:	ldr	r2, [r4, #148]	; 0x94
   16038:	adds	r3, r3, #1
   1603c:	adc	r2, r2, #0
   16040:	str	r3, [r4, #144]	; 0x90
   16044:	str	r2, [r4, #148]	; 0x94
   16048:	mov	r0, #12
   1604c:	bl	118c8 <malloc@plt>
   16050:	mov	r5, r0
   16054:	ldr	r1, [r8, #4]
   16058:	bl	151d4 <init_node_int@@Base>
   1605c:	ldr	r3, [r4, #160]	; 0xa0
   16060:	ldr	r2, [r4, #164]	; 0xa4
   16064:	adds	r3, r3, #1
   16068:	adc	r2, r2, #0
   1606c:	str	r3, [r4, #160]	; 0xa0
   16070:	str	r2, [r4, #164]	; 0xa4
   16074:	mov	r0, r8
   16078:	bl	14dd4 <free_token_int_value@@Base>
   1607c:	ldr	r3, [r4, #168]	; 0xa8
   16080:	ldr	r2, [r4, #172]	; 0xac
   16084:	adds	r3, r3, #1
   16088:	adc	r2, r2, #0
   1608c:	str	r3, [r4, #168]	; 0xa8
   16090:	str	r2, [r4, #172]	; 0xac
   16094:	mov	r3, #0
   16098:	mov	r2, r5
   1609c:	mov	r1, r7
   160a0:	mov	r0, r6
   160a4:	bl	1539c <init_node_boolean_operator@@Base>
   160a8:	ldr	r3, [r4, #176]	; 0xb0
   160ac:	ldr	r2, [r4, #180]	; 0xb4
   160b0:	adds	r3, r3, #1
   160b4:	adc	r2, r2, #0
   160b8:	str	r3, [r4, #176]	; 0xb0
   160bc:	str	r2, [r4, #180]	; 0xb4
   160c0:	mov	r0, r6
   160c4:	ldrd	r4, [sp]
   160c8:	ldrd	r6, [sp, #8]
   160cc:	ldr	r8, [sp, #16]
   160d0:	add	sp, sp, #20
   160d4:	pop	{pc}		; (ldr pc, [sp], #4)
   160d8:	movw	r4, #46104	; 0xb418
   160dc:	movt	r4, #2
   160e0:	ldr	r3, [r4, #96]	; 0x60
   160e4:	ldr	r2, [r4, #100]	; 0x64
   160e8:	adds	r3, r3, #1
   160ec:	adc	r2, r2, #0
   160f0:	str	r3, [r4, #96]	; 0x60
   160f4:	str	r2, [r4, #100]	; 0x64
   160f8:	mov	r0, r6
   160fc:	bl	15424 <free_node_boolean_operator@@Base>
   16100:	ldr	r3, [r4, #112]	; 0x70
   16104:	ldr	r2, [r4, #116]	; 0x74
   16108:	adds	r3, r3, #1
   1610c:	adc	r2, r2, #0
   16110:	str	r3, [r4, #112]	; 0x70
   16114:	str	r2, [r4, #116]	; 0x74
   16118:	mov	r6, #0
   1611c:	b	160c0 <read_boolean_unary_expression@@Base+0x168>
   16120:	movw	r4, #46104	; 0xb418
   16124:	movt	r4, #2
   16128:	ldr	r3, [r4, #136]	; 0x88
   1612c:	ldr	r2, [r4, #140]	; 0x8c
   16130:	adds	r3, r3, #1
   16134:	adc	r2, r2, #0
   16138:	str	r3, [r4, #136]	; 0x88
   1613c:	str	r2, [r4, #140]	; 0x8c
   16140:	mov	r0, r6
   16144:	bl	15424 <free_node_boolean_operator@@Base>
   16148:	ldr	r3, [r4, #152]	; 0x98
   1614c:	ldr	r2, [r4, #156]	; 0x9c
   16150:	adds	r3, r3, #1
   16154:	adc	r2, r2, #0
   16158:	str	r3, [r4, #152]	; 0x98
   1615c:	str	r2, [r4, #156]	; 0x9c
   16160:	mov	r6, #0
   16164:	b	160c0 <read_boolean_unary_expression@@Base+0x168>

00016168 <read_boolean_binary_expression@@Base>:
   16168:	strd	r4, [sp, #-32]!	; 0xffffffe0
   1616c:	strd	r6, [sp, #8]
   16170:	strd	r8, [sp, #16]
   16174:	str	sl, [sp, #24]
   16178:	str	lr, [sp, #28]
   1617c:	mov	r5, r0
   16180:	movw	r3, #46104	; 0xb418
   16184:	movt	r3, #2
   16188:	ldr	r2, [r3, #184]	; 0xb8
   1618c:	ldr	r1, [r3, #188]	; 0xbc
   16190:	adds	r2, r2, #1
   16194:	adc	r1, r1, #0
   16198:	str	r2, [r3, #184]	; 0xb8
   1619c:	str	r1, [r3, #188]	; 0xbc
   161a0:	ldr	r0, [r0]
   161a4:	bl	11ac0 <next@@Base>
   161a8:	mov	r6, r0
   161ac:	ldr	r0, [r0]
   161b0:	cmp	r0, #1
   161b4:	beq	16268 <read_boolean_binary_expression@@Base+0x100>
   161b8:	movw	r3, #46104	; 0xb418
   161bc:	movt	r3, #2
   161c0:	ldr	r2, [r3, #192]	; 0xc0
   161c4:	ldr	r1, [r3, #196]	; 0xc4
   161c8:	adds	r2, r2, #1
   161cc:	adc	r1, r1, #0
   161d0:	str	r2, [r3, #192]	; 0xc0
   161d4:	str	r1, [r3, #196]	; 0xc4
   161d8:	cmp	r0, #12
   161dc:	movne	r5, #0
   161e0:	beq	16200 <read_boolean_binary_expression@@Base+0x98>
   161e4:	mov	r0, r5
   161e8:	ldrd	r4, [sp]
   161ec:	ldrd	r6, [sp, #8]
   161f0:	ldrd	r8, [sp, #16]
   161f4:	ldr	sl, [sp, #24]
   161f8:	add	sp, sp, #28
   161fc:	pop	{pc}		; (ldr pc, [sp], #4)
   16200:	mov	r4, r3
   16204:	ldr	r3, [r3, #208]	; 0xd0
   16208:	ldr	r2, [r4, #212]	; 0xd4
   1620c:	adds	r3, r3, #1
   16210:	adc	r2, r2, #0
   16214:	str	r3, [r4, #208]	; 0xd0
   16218:	str	r2, [r4, #212]	; 0xd4
   1621c:	mov	r1, r6
   16220:	ldr	r0, [r5]
   16224:	bl	11cbc <push_back@@Base>
   16228:	ldr	r3, [r4, #216]	; 0xd8
   1622c:	ldr	r2, [r4, #220]	; 0xdc
   16230:	adds	r3, r3, #1
   16234:	adc	r2, r2, #0
   16238:	str	r3, [r4, #216]	; 0xd8
   1623c:	str	r2, [r4, #220]	; 0xdc
   16240:	mov	r0, r5
   16244:	bl	15f58 <read_boolean_unary_expression@@Base>
   16248:	mov	r5, r0
   1624c:	ldr	r3, [r4, #224]	; 0xe0
   16250:	ldr	r2, [r4, #228]	; 0xe4
   16254:	adds	r3, r3, #1
   16258:	adc	r2, r2, #0
   1625c:	str	r3, [r4, #224]	; 0xe0
   16260:	str	r2, [r4, #228]	; 0xe4
   16264:	b	161e4 <read_boolean_binary_expression@@Base+0x7c>
   16268:	movw	r4, #46104	; 0xb418
   1626c:	movt	r4, #2
   16270:	ldr	r3, [r4, #200]	; 0xc8
   16274:	ldr	r2, [r4, #204]	; 0xcc
   16278:	adds	r3, r3, #1
   1627c:	adc	r2, r2, #0
   16280:	str	r3, [r4, #200]	; 0xc8
   16284:	str	r2, [r4, #204]	; 0xcc
   16288:	mov	r0, #12
   1628c:	bl	118c8 <malloc@plt>
   16290:	mov	r7, r0
   16294:	ldr	r1, [r6, #4]
   16298:	bl	151d4 <init_node_int@@Base>
   1629c:	ldr	r3, [r4, #232]	; 0xe8
   162a0:	ldr	r2, [r4, #236]	; 0xec
   162a4:	adds	r3, r3, #1
   162a8:	adc	r2, r2, #0
   162ac:	str	r3, [r4, #232]	; 0xe8
   162b0:	str	r2, [r4, #236]	; 0xec
   162b4:	mov	r0, r6
   162b8:	bl	14dd4 <free_token_int_value@@Base>
   162bc:	ldr	r3, [r4, #240]	; 0xf0
   162c0:	ldr	r2, [r4, #244]	; 0xf4
   162c4:	adds	r3, r3, #1
   162c8:	adc	r2, r2, #0
   162cc:	str	r3, [r4, #240]	; 0xf0
   162d0:	str	r2, [r4, #244]	; 0xf4
   162d4:	ldr	r0, [r5]
   162d8:	bl	11ac0 <next@@Base>
   162dc:	mov	r8, r0
   162e0:	ldr	r3, [r0]
   162e4:	cmp	r3, #12
   162e8:	bne	16408 <read_boolean_binary_expression@@Base+0x2a0>
   162ec:	movw	r4, #46104	; 0xb418
   162f0:	movt	r4, #2
   162f4:	ldr	r3, [r4, #256]	; 0x100
   162f8:	ldr	r1, [r4, #260]	; 0x104
   162fc:	adds	r3, r3, #1
   16300:	adc	r1, r1, #0
   16304:	str	r3, [r4, #256]	; 0x100
   16308:	str	r1, [r4, #260]	; 0x104
   1630c:	bl	15a54 <get_boolean_op_value@@Base>
   16310:	mov	r6, r0
   16314:	ldr	r3, [r4, #272]	; 0x110
   16318:	ldr	r1, [r4, #276]	; 0x114
   1631c:	adds	r3, r3, #1
   16320:	adc	r1, r1, #0
   16324:	str	r3, [r4, #272]	; 0x110
   16328:	str	r1, [r4, #276]	; 0x114
   1632c:	mov	r0, r8
   16330:	bl	1503c <free_token_boolean_op@@Base>
   16334:	ldr	r3, [r4, #280]	; 0x118
   16338:	ldr	r2, [r4, #284]	; 0x11c
   1633c:	adds	r3, r3, #1
   16340:	adc	r2, r2, #0
   16344:	str	r3, [r4, #280]	; 0x118
   16348:	str	r2, [r4, #284]	; 0x11c
   1634c:	ldr	r0, [r5]
   16350:	bl	11ac0 <next@@Base>
   16354:	mov	r9, r0
   16358:	ldr	r3, [r0]
   1635c:	cmp	r3, #1
   16360:	bne	16450 <read_boolean_binary_expression@@Base+0x2e8>
   16364:	movw	r4, #46104	; 0xb418
   16368:	movt	r4, #2
   1636c:	ldr	r3, [r4, #296]	; 0x128
   16370:	ldr	r1, [r4, #300]	; 0x12c
   16374:	adds	r3, r3, #1
   16378:	adc	r1, r1, #0
   1637c:	str	r3, [r4, #296]	; 0x128
   16380:	str	r1, [r4, #300]	; 0x12c
   16384:	mov	r0, #12
   16388:	bl	118c8 <malloc@plt>
   1638c:	mov	r8, r0
   16390:	ldr	r1, [r9, #4]
   16394:	bl	151d4 <init_node_int@@Base>
   16398:	ldr	r3, [r4, #312]	; 0x138
   1639c:	ldr	r2, [r4, #316]	; 0x13c
   163a0:	adds	r3, r3, #1
   163a4:	adc	r2, r2, #0
   163a8:	str	r3, [r4, #312]	; 0x138
   163ac:	str	r2, [r4, #316]	; 0x13c
   163b0:	mov	r0, r9
   163b4:	bl	14dd4 <free_token_int_value@@Base>
   163b8:	ldr	r3, [r4, #320]	; 0x140
   163bc:	ldr	r2, [r4, #324]	; 0x144
   163c0:	adds	r3, r3, #1
   163c4:	adc	r2, r2, #0
   163c8:	str	r3, [r4, #320]	; 0x140
   163cc:	str	r2, [r4, #324]	; 0x144
   163d0:	mov	r0, #20
   163d4:	bl	118c8 <malloc@plt>
   163d8:	mov	r5, r0
   163dc:	mov	r3, r8
   163e0:	mov	r2, r7
   163e4:	mov	r1, r6
   163e8:	bl	1539c <init_node_boolean_operator@@Base>
   163ec:	ldr	r3, [r4, #328]	; 0x148
   163f0:	ldr	r2, [r4, #332]	; 0x14c
   163f4:	adds	r3, r3, #1
   163f8:	adc	r2, r2, #0
   163fc:	str	r3, [r4, #328]	; 0x148
   16400:	str	r2, [r4, #332]	; 0x14c
   16404:	b	161e4 <read_boolean_binary_expression@@Base+0x7c>
   16408:	movw	r4, #46104	; 0xb418
   1640c:	movt	r4, #2
   16410:	ldr	r3, [r4, #248]	; 0xf8
   16414:	ldr	r2, [r4, #252]	; 0xfc
   16418:	adds	r3, r3, #1
   1641c:	adc	r2, r2, #0
   16420:	str	r3, [r4, #248]	; 0xf8
   16424:	str	r2, [r4, #252]	; 0xfc
   16428:	mov	r0, r7
   1642c:	bl	15500 <free_node@@Base>
   16430:	ldr	r3, [r4, #264]	; 0x108
   16434:	ldr	r2, [r4, #268]	; 0x10c
   16438:	adds	r3, r3, #1
   1643c:	adc	r2, r2, #0
   16440:	str	r3, [r4, #264]	; 0x108
   16444:	str	r2, [r4, #268]	; 0x10c
   16448:	mov	r5, #0
   1644c:	b	161e4 <read_boolean_binary_expression@@Base+0x7c>
   16450:	movw	r4, #46104	; 0xb418
   16454:	movt	r4, #2
   16458:	ldr	r3, [r4, #288]	; 0x120
   1645c:	ldr	r1, [r4, #292]	; 0x124
   16460:	adds	r3, r3, #1
   16464:	adc	r1, r1, #0
   16468:	str	r3, [r4, #288]	; 0x120
   1646c:	str	r1, [r4, #292]	; 0x124
   16470:	mov	r0, r7
   16474:	bl	15500 <free_node@@Base>
   16478:	ldr	r3, [r4, #304]	; 0x130
   1647c:	ldr	r2, [r4, #308]	; 0x134
   16480:	adds	r3, r3, #1
   16484:	adc	r2, r2, #0
   16488:	str	r3, [r4, #304]	; 0x130
   1648c:	str	r2, [r4, #308]	; 0x134
   16490:	mov	r5, #0
   16494:	b	161e4 <read_boolean_binary_expression@@Base+0x7c>

00016498 <read_single_boolean_expression@@Base>:
   16498:	strd	r4, [sp, #-24]!	; 0xffffffe8
   1649c:	strd	r6, [sp, #8]
   164a0:	str	r8, [sp, #16]
   164a4:	str	lr, [sp, #20]
   164a8:	cmp	r1, #0
   164ac:	beq	16554 <read_single_boolean_expression@@Base+0xbc>
   164b0:	mov	r5, r2
   164b4:	mov	r6, r3
   164b8:	ldr	r3, [r2]
   164bc:	cmp	r3, #0
   164c0:	beq	16594 <read_single_boolean_expression@@Base+0xfc>
   164c4:	ldr	r4, [pc, #292]	; 165f0 <read_single_boolean_expression@@Base+0x158>
   164c8:	ldr	r3, [r4, #16]
   164cc:	ldr	r2, [r4, #20]
   164d0:	adds	r3, r3, #1
   164d4:	adc	r2, r2, #0
   164d8:	str	r3, [r4, #16]
   164dc:	str	r2, [r4, #20]
   164e0:	bl	16168 <read_boolean_binary_expression@@Base>
   164e4:	mov	r8, r0
   164e8:	ldr	r3, [r4, #32]
   164ec:	ldr	r2, [r4, #36]	; 0x24
   164f0:	adds	r3, r3, #1
   164f4:	adc	r2, r2, #0
   164f8:	str	r3, [r4, #32]
   164fc:	str	r2, [r4, #36]	; 0x24
   16500:	mov	r0, #20
   16504:	bl	118c8 <malloc@plt>
   16508:	mov	r7, r0
   1650c:	mov	r3, r8
   16510:	mov	r2, #0
   16514:	mov	r1, r6
   16518:	bl	1539c <init_node_boolean_operator@@Base>
   1651c:	mov	r3, #0
   16520:	str	r3, [r5]
   16524:	ldr	r3, [r4, #40]	; 0x28
   16528:	ldr	r2, [r4, #44]	; 0x2c
   1652c:	adds	r3, r3, #1
   16530:	adc	r2, r2, #0
   16534:	str	r3, [r4, #40]	; 0x28
   16538:	str	r2, [r4, #44]	; 0x2c
   1653c:	mov	r0, r7
   16540:	ldrd	r4, [sp]
   16544:	ldrd	r6, [sp, #8]
   16548:	ldr	r8, [sp, #16]
   1654c:	add	sp, sp, #20
   16550:	pop	{pc}		; (ldr pc, [sp], #4)
   16554:	ldr	r4, [pc, #148]	; 165f0 <read_single_boolean_expression@@Base+0x158>
   16558:	ldr	r3, [r4]
   1655c:	ldr	r2, [r4, #4]
   16560:	adds	r3, r3, #1
   16564:	adc	r2, r2, #0
   16568:	str	r3, [r4]
   1656c:	str	r2, [r4, #4]
   16570:	bl	16168 <read_boolean_binary_expression@@Base>
   16574:	mov	r7, r0
   16578:	ldr	r3, [r4, #8]
   1657c:	ldr	r2, [r4, #12]
   16580:	adds	r3, r3, #1
   16584:	adc	r2, r2, #0
   16588:	str	r3, [r4, #8]
   1658c:	str	r2, [r4, #12]
   16590:	b	1653c <read_single_boolean_expression@@Base+0xa4>
   16594:	ldr	r4, [pc, #84]	; 165f0 <read_single_boolean_expression@@Base+0x158>
   16598:	ldr	r3, [r4, #24]
   1659c:	ldr	r2, [r4, #28]
   165a0:	adds	r3, r3, #1
   165a4:	adc	r2, r2, #0
   165a8:	str	r3, [r4, #24]
   165ac:	str	r2, [r4, #28]
   165b0:	movw	r3, #43384	; 0xa978
   165b4:	movt	r3, #2
   165b8:	mov	r2, #0
   165bc:	ldr	r2, [r2, #4]
   165c0:	movw	r1, #39620	; 0x9ac4
   165c4:	movt	r1, #1
   165c8:	ldr	r0, [r3]
   165cc:	bl	11910 <fprintf@plt>
   165d0:	ldr	r3, [r4, #48]	; 0x30
   165d4:	ldr	r2, [r4, #52]	; 0x34
   165d8:	adds	r3, r3, #1
   165dc:	adc	r2, r2, #0
   165e0:	str	r3, [r4, #48]	; 0x30
   165e4:	str	r2, [r4, #52]	; 0x34
   165e8:	mov	r0, #1
   165ec:	bl	118f8 <exit@plt>
   165f0:	andeq	fp, r2, r8, ror #10

000165f4 <read_boolean_expression@@Base>:
   165f4:	strd	r4, [sp, #-20]!	; 0xffffffec
   165f8:	strd	r6, [sp, #8]
   165fc:	str	lr, [sp, #16]
   16600:	sub	sp, sp, #12
   16604:	mov	r5, r0
   16608:	ldr	r4, [pc, #552]	; 16838 <read_boolean_expression@@Base+0x244>
   1660c:	ldr	r3, [r4, #-8]
   16610:	ldr	r2, [r4, #-4]
   16614:	adds	r3, r3, #1
   16618:	adc	r2, r2, #0
   1661c:	str	r3, [r4, #-8]
   16620:	str	r2, [r4, #-4]
   16624:	mov	r3, #0
   16628:	str	r3, [sp, #4]
   1662c:	ldr	r0, [r0]
   16630:	bl	11ac0 <next@@Base>
   16634:	ldr	r3, [r4]
   16638:	ldr	r2, [r4, #4]
   1663c:	adds	r3, r3, #1
   16640:	adc	r2, r2, #0
   16644:	str	r3, [r4]
   16648:	str	r2, [r4, #4]
   1664c:	ldr	r3, [r0]
   16650:	cmp	r3, #4
   16654:	beq	167e4 <read_boolean_expression@@Base+0x1f0>
   16658:	mov	r6, #0
   1665c:	b	166e0 <read_boolean_expression@@Base+0xec>
   16660:	ldr	r3, [r4, #16]
   16664:	ldr	r2, [r4, #20]
   16668:	adds	r3, r3, #1
   1666c:	adc	r2, r2, #0
   16670:	str	r3, [r4, #16]
   16674:	str	r2, [r4, #20]
   16678:	mov	r1, r0
   1667c:	ldr	r0, [r5]
   16680:	bl	11cbc <push_back@@Base>
   16684:	ldr	r3, [r4, #40]	; 0x28
   16688:	ldr	r2, [r4, #44]	; 0x2c
   1668c:	adds	r3, r3, #1
   16690:	adc	r2, r2, #0
   16694:	str	r3, [r4, #40]	; 0x28
   16698:	str	r2, [r4, #44]	; 0x2c
   1669c:	mov	r3, r7
   166a0:	add	r2, sp, #4
   166a4:	mov	r1, r6
   166a8:	mov	r0, r5
   166ac:	bl	16498 <read_single_boolean_expression@@Base>
   166b0:	mov	r6, r0
   166b4:	ldr	r3, [r4, #48]	; 0x30
   166b8:	ldr	r2, [r4, #52]	; 0x34
   166bc:	adds	r3, r3, #1
   166c0:	adc	r2, r2, #0
   166c4:	str	r3, [r4, #48]	; 0x30
   166c8:	str	r2, [r4, #52]	; 0x34
   166cc:	ldr	r0, [r5]
   166d0:	bl	11ac0 <next@@Base>
   166d4:	ldr	r3, [r0]
   166d8:	cmp	r3, #4
   166dc:	beq	167e8 <read_boolean_expression@@Base+0x1f4>
   166e0:	cmp	r3, #3
   166e4:	beq	16798 <read_boolean_expression@@Base+0x1a4>
   166e8:	cmp	r3, #12
   166ec:	beq	16754 <read_boolean_expression@@Base+0x160>
   166f0:	cmp	r3, #1
   166f4:	beq	16660 <read_boolean_expression@@Base+0x6c>
   166f8:	ldr	r4, [pc, #312]	; 16838 <read_boolean_expression@@Base+0x244>
   166fc:	ldr	r3, [r4, #8]
   16700:	ldr	r2, [r4, #12]
   16704:	adds	r3, r3, #1
   16708:	adc	r2, r2, #0
   1670c:	str	r3, [r4, #8]
   16710:	str	r2, [r4, #12]
   16714:	movw	r3, #43384	; 0xa978
   16718:	movt	r3, #2
   1671c:	ldr	r3, [r3]
   16720:	mov	r2, #33	; 0x21
   16724:	mov	r1, #1
   16728:	movw	r0, #39676	; 0x9afc
   1672c:	movt	r0, #1
   16730:	bl	11880 <fwrite@plt>
   16734:	ldr	r3, [r4, #72]	; 0x48
   16738:	ldr	r2, [r4, #76]	; 0x4c
   1673c:	adds	r3, r3, #1
   16740:	adc	r2, r2, #0
   16744:	str	r3, [r4, #72]	; 0x48
   16748:	str	r2, [r4, #76]	; 0x4c
   1674c:	mov	r0, #1
   16750:	bl	118f8 <exit@plt>
   16754:	ldr	r3, [r4, #32]
   16758:	ldr	r2, [r4, #36]	; 0x24
   1675c:	adds	r3, r3, #1
   16760:	adc	r2, r2, #0
   16764:	str	r3, [r4, #32]
   16768:	str	r2, [r4, #36]	; 0x24
   1676c:	bl	15a54 <get_boolean_op_value@@Base>
   16770:	mov	r7, r0
   16774:	ldr	r3, [r4, #56]	; 0x38
   16778:	ldr	r2, [r4, #60]	; 0x3c
   1677c:	adds	r3, r3, #1
   16780:	adc	r2, r2, #0
   16784:	str	r3, [r4, #56]	; 0x38
   16788:	str	r2, [r4, #60]	; 0x3c
   1678c:	mov	r3, #1
   16790:	str	r3, [sp, #4]
   16794:	b	166cc <read_boolean_expression@@Base+0xd8>
   16798:	ldr	r3, [r4, #24]
   1679c:	ldr	r2, [r4, #28]
   167a0:	adds	r3, r3, #1
   167a4:	adc	r2, r2, #0
   167a8:	str	r3, [r4, #24]
   167ac:	str	r2, [r4, #28]
   167b0:	mov	r3, r7
   167b4:	add	r2, sp, #4
   167b8:	mov	r1, r6
   167bc:	mov	r0, r5
   167c0:	bl	16498 <read_single_boolean_expression@@Base>
   167c4:	mov	r6, r0
   167c8:	ldr	r3, [r4, #64]	; 0x40
   167cc:	ldr	r2, [r4, #68]	; 0x44
   167d0:	adds	r3, r3, #1
   167d4:	adc	r2, r2, #0
   167d8:	str	r3, [r4, #64]	; 0x40
   167dc:	str	r2, [r4, #68]	; 0x44
   167e0:	b	166cc <read_boolean_expression@@Base+0xd8>
   167e4:	mov	r6, #0
   167e8:	ldr	r4, [pc, #72]	; 16838 <read_boolean_expression@@Base+0x244>
   167ec:	ldr	r3, [r4, #80]	; 0x50
   167f0:	ldr	r2, [r4, #84]	; 0x54
   167f4:	adds	r3, r3, #1
   167f8:	adc	r2, r2, #0
   167fc:	str	r3, [r4, #80]	; 0x50
   16800:	str	r2, [r4, #84]	; 0x54
   16804:	bl	14e7c <free_token_cpar@@Base>
   16808:	ldr	r3, [r4, #88]	; 0x58
   1680c:	ldr	r2, [r4, #92]	; 0x5c
   16810:	adds	r3, r3, #1
   16814:	adc	r2, r2, #0
   16818:	str	r3, [r4, #88]	; 0x58
   1681c:	str	r2, [r4, #92]	; 0x5c
   16820:	mov	r0, r6
   16824:	add	sp, sp, #12
   16828:	ldrd	r4, [sp]
   1682c:	ldrd	r6, [sp, #8]
   16830:	add	sp, sp, #16
   16834:	pop	{pc}		; (ldr pc, [sp], #4)
   16838:	andeq	fp, r2, r8, lsr #11

0001683c <read_if_statement@@Base>:
   1683c:	strd	r4, [sp, #-24]!	; 0xffffffe8
   16840:	strd	r6, [sp, #8]
   16844:	str	r8, [sp, #16]
   16848:	str	lr, [sp, #20]
   1684c:	mov	r5, r0
   16850:	ldr	r2, [pc, #464]	; 16a28 <read_if_statement@@Base+0x1ec>
   16854:	ldr	r3, [r2]
   16858:	ldr	r1, [r2, #4]
   1685c:	adds	r3, r3, #1
   16860:	adc	r1, r1, #0
   16864:	str	r3, [r2]
   16868:	str	r1, [r2, #4]
   1686c:	ldr	r0, [r0]
   16870:	bl	11ac0 <next@@Base>
   16874:	ldr	r3, [r0]
   16878:	cmp	r3, #3
   1687c:	bne	169a8 <read_if_statement@@Base+0x16c>
   16880:	ldr	r4, [pc, #416]	; 16a28 <read_if_statement@@Base+0x1ec>
   16884:	ldr	r3, [r4, #16]
   16888:	ldr	r2, [r4, #20]
   1688c:	adds	r3, r3, #1
   16890:	adc	r2, r2, #0
   16894:	str	r3, [r4, #16]
   16898:	str	r2, [r4, #20]
   1689c:	bl	14e44 <free_token_opar@@Base>
   168a0:	ldr	r3, [r4, #24]
   168a4:	ldr	r2, [r4, #28]
   168a8:	adds	r3, r3, #1
   168ac:	adc	r2, r2, #0
   168b0:	str	r3, [r4, #24]
   168b4:	str	r2, [r4, #28]
   168b8:	mov	r0, r5
   168bc:	bl	165f4 <read_boolean_expression@@Base>
   168c0:	mov	r6, r0
   168c4:	ldr	r3, [r4, #32]
   168c8:	ldr	r2, [r4, #36]	; 0x24
   168cc:	adds	r3, r3, #1
   168d0:	adc	r2, r2, #0
   168d4:	str	r3, [r4, #32]
   168d8:	str	r2, [r4, #36]	; 0x24
   168dc:	mov	r0, r5
   168e0:	bl	16a2c <read_body@@Base>
   168e4:	mov	r7, r0
   168e8:	ldr	r3, [r4, #40]	; 0x28
   168ec:	ldr	r2, [r4, #44]	; 0x2c
   168f0:	adds	r3, r3, #1
   168f4:	adc	r2, r2, #0
   168f8:	str	r3, [r4, #40]	; 0x28
   168fc:	str	r2, [r4, #44]	; 0x2c
   16900:	ldr	r0, [r5]
   16904:	bl	11ac0 <next@@Base>
   16908:	ldr	r3, [r0]
   1690c:	cmp	r3, #11
   16910:	beq	169cc <read_if_statement@@Base+0x190>
   16914:	ldr	r4, [pc, #268]	; 16a28 <read_if_statement@@Base+0x1ec>
   16918:	ldr	r3, [r4, #56]	; 0x38
   1691c:	ldr	r2, [r4, #60]	; 0x3c
   16920:	adds	r3, r3, #1
   16924:	adc	r2, r2, #0
   16928:	str	r3, [r4, #56]	; 0x38
   1692c:	str	r2, [r4, #60]	; 0x3c
   16930:	mov	r1, r0
   16934:	ldr	r0, [r5]
   16938:	bl	11cbc <push_back@@Base>
   1693c:	ldr	r3, [r4, #80]	; 0x50
   16940:	ldr	r2, [r4, #84]	; 0x54
   16944:	adds	r3, r3, #1
   16948:	adc	r2, r2, #0
   1694c:	str	r3, [r4, #80]	; 0x50
   16950:	str	r2, [r4, #84]	; 0x54
   16954:	mov	r5, #0
   16958:	mov	r0, #20
   1695c:	bl	118c8 <malloc@plt>
   16960:	mov	r4, r0
   16964:	mov	r3, r5
   16968:	mov	r2, r7
   1696c:	mov	r1, r6
   16970:	bl	1531c <init_node_if@@Base>
   16974:	ldr	r2, [pc, #172]	; 16a28 <read_if_statement@@Base+0x1ec>
   16978:	ldr	r3, [r2, #88]	; 0x58
   1697c:	ldr	r1, [r2, #92]	; 0x5c
   16980:	adds	r3, r3, #1
   16984:	adc	r1, r1, #0
   16988:	str	r3, [r2, #88]	; 0x58
   1698c:	str	r1, [r2, #92]	; 0x5c
   16990:	mov	r0, r4
   16994:	ldrd	r4, [sp]
   16998:	ldrd	r6, [sp, #8]
   1699c:	ldr	r8, [sp, #16]
   169a0:	add	sp, sp, #20
   169a4:	pop	{pc}		; (ldr pc, [sp], #4)
   169a8:	ldr	r2, [pc, #120]	; 16a28 <read_if_statement@@Base+0x1ec>
   169ac:	ldr	r3, [r2, #8]
   169b0:	ldr	r1, [r2, #12]
   169b4:	adds	r3, r3, #1
   169b8:	adc	r1, r1, #0
   169bc:	str	r3, [r2, #8]
   169c0:	str	r1, [r2, #12]
   169c4:	mov	r4, #0
   169c8:	b	16990 <read_if_statement@@Base+0x154>
   169cc:	ldr	r3, [r4, #48]	; 0x30
   169d0:	ldr	r2, [r4, #52]	; 0x34
   169d4:	adds	r3, r3, #1
   169d8:	adc	r2, r2, #0
   169dc:	str	r3, [r4, #48]	; 0x30
   169e0:	str	r2, [r4, #52]	; 0x34
   169e4:	bl	15004 <free_token_else@@Base>
   169e8:	ldr	r3, [r4, #64]	; 0x40
   169ec:	ldr	r2, [r4, #68]	; 0x44
   169f0:	adds	r3, r3, #1
   169f4:	adc	r2, r2, #0
   169f8:	str	r3, [r4, #64]	; 0x40
   169fc:	str	r2, [r4, #68]	; 0x44
   16a00:	mov	r0, r5
   16a04:	bl	16a2c <read_body@@Base>
   16a08:	mov	r5, r0
   16a0c:	ldr	r3, [r4, #72]	; 0x48
   16a10:	ldr	r2, [r4, #76]	; 0x4c
   16a14:	adds	r3, r3, #1
   16a18:	adc	r2, r2, #0
   16a1c:	str	r3, [r4, #72]	; 0x48
   16a20:	str	r2, [r4, #76]	; 0x4c
   16a24:	b	16958 <read_if_statement@@Base+0x11c>
   16a28:	andeq	fp, r2, r8, lsl #12

00016a2c <read_body@@Base>:
   16a2c:	strd	r4, [sp, #-24]!	; 0xffffffe8
   16a30:	strd	r6, [sp, #8]
   16a34:	str	r8, [sp, #16]
   16a38:	str	lr, [sp, #20]
   16a3c:	mov	r5, r0
   16a40:	ldr	r2, [pc, #604]	; 16ca4 <read_body@@Base+0x278>
   16a44:	ldr	r3, [r2]
   16a48:	ldr	r1, [r2, #4]
   16a4c:	adds	r3, r3, #1
   16a50:	adc	r1, r1, #0
   16a54:	str	r3, [r2]
   16a58:	str	r1, [r2, #4]
   16a5c:	ldr	r0, [r0]
   16a60:	bl	11ac0 <next@@Base>
   16a64:	ldr	r3, [r0]
   16a68:	cmp	r3, #5
   16a6c:	bne	16ae0 <read_body@@Base+0xb4>
   16a70:	ldr	r4, [pc, #556]	; 16ca4 <read_body@@Base+0x278>
   16a74:	ldr	r3, [r4, #16]
   16a78:	ldr	r2, [r4, #20]
   16a7c:	adds	r3, r3, #1
   16a80:	adc	r2, r2, #0
   16a84:	str	r3, [r4, #16]
   16a88:	str	r2, [r4, #20]
   16a8c:	bl	14eb4 <free_token_obra@@Base>
   16a90:	ldr	r3, [r4, #24]
   16a94:	ldr	r2, [r4, #28]
   16a98:	adds	r3, r3, #1
   16a9c:	adc	r2, r2, #0
   16aa0:	str	r3, [r4, #24]
   16aa4:	str	r2, [r4, #28]
   16aa8:	ldr	r0, [r5]
   16aac:	bl	11ac0 <next@@Base>
   16ab0:	ldr	r3, [r4, #32]
   16ab4:	ldr	r2, [r4, #36]	; 0x24
   16ab8:	adds	r3, r3, #1
   16abc:	adc	r2, r2, #0
   16ac0:	str	r3, [r4, #32]
   16ac4:	str	r2, [r4, #36]	; 0x24
   16ac8:	ldr	r3, [r0]
   16acc:	cmp	r3, #6
   16ad0:	beq	16c64 <read_body@@Base+0x238>
   16ad4:	mov	r8, #0
   16ad8:	mov	r6, r8
   16adc:	b	16b80 <read_body@@Base+0x154>
   16ae0:	ldr	r2, [pc, #444]	; 16ca4 <read_body@@Base+0x278>
   16ae4:	ldr	r3, [r2, #8]
   16ae8:	ldr	r1, [r2, #12]
   16aec:	adds	r3, r3, #1
   16af0:	adc	r1, r1, #0
   16af4:	str	r3, [r2, #8]
   16af8:	str	r1, [r2, #12]
   16afc:	mov	r6, #0
   16b00:	b	16bd0 <read_body@@Base+0x1a4>
   16b04:	ldr	r3, [r4, #48]	; 0x30
   16b08:	ldr	r2, [r4, #52]	; 0x34
   16b0c:	adds	r3, r3, #1
   16b10:	adc	r2, r2, #0
   16b14:	str	r3, [r4, #48]	; 0x30
   16b18:	str	r2, [r4, #52]	; 0x34
   16b1c:	bl	14f24 <free_token_return@@Base>
   16b20:	ldr	r3, [r4, #64]	; 0x40
   16b24:	ldr	r2, [r4, #68]	; 0x44
   16b28:	adds	r3, r3, #1
   16b2c:	adc	r2, r2, #0
   16b30:	str	r3, [r4, #64]	; 0x40
   16b34:	str	r2, [r4, #68]	; 0x44
   16b38:	mov	r0, r5
   16b3c:	bl	15dc4 <read_return_expression@@Base>
   16b40:	mov	r7, r0
   16b44:	ldr	r3, [r4, #72]	; 0x48
   16b48:	ldr	r2, [r4, #76]	; 0x4c
   16b4c:	adds	r3, r3, #1
   16b50:	adc	r2, r2, #0
   16b54:	str	r3, [r4, #72]	; 0x48
   16b58:	str	r2, [r4, #76]	; 0x4c
   16b5c:	cmp	r6, #0
   16b60:	strne	r7, [r8, #4]
   16b64:	beq	16c44 <read_body@@Base+0x218>
   16b68:	ldr	r0, [r5]
   16b6c:	bl	11ac0 <next@@Base>
   16b70:	ldr	r3, [r0]
   16b74:	mov	r8, r7
   16b78:	cmp	r3, #6
   16b7c:	beq	16c68 <read_body@@Base+0x23c>
   16b80:	cmp	r3, #7
   16b84:	beq	16b04 <read_body@@Base+0xd8>
   16b88:	cmp	r3, #10
   16b8c:	beq	16be8 <read_body@@Base+0x1bc>
   16b90:	ldr	r4, [pc, #268]	; 16ca4 <read_body@@Base+0x278>
   16b94:	ldr	r3, [r4, #40]	; 0x28
   16b98:	ldr	r2, [r4, #44]	; 0x2c
   16b9c:	adds	r3, r3, #1
   16ba0:	adc	r2, r2, #0
   16ba4:	str	r3, [r4, #40]	; 0x28
   16ba8:	str	r2, [r4, #44]	; 0x2c
   16bac:	mov	r1, r0
   16bb0:	ldr	r0, [r5]
   16bb4:	bl	11cbc <push_back@@Base>
   16bb8:	ldr	r3, [r4, #96]	; 0x60
   16bbc:	ldr	r2, [r4, #100]	; 0x64
   16bc0:	adds	r3, r3, #1
   16bc4:	adc	r2, r2, #0
   16bc8:	str	r3, [r4, #96]	; 0x60
   16bcc:	str	r2, [r4, #100]	; 0x64
   16bd0:	mov	r0, r6
   16bd4:	ldrd	r4, [sp]
   16bd8:	ldrd	r6, [sp, #8]
   16bdc:	ldr	r8, [sp, #16]
   16be0:	add	sp, sp, #20
   16be4:	pop	{pc}		; (ldr pc, [sp], #4)
   16be8:	ldr	r3, [r4, #56]	; 0x38
   16bec:	ldr	r2, [r4, #60]	; 0x3c
   16bf0:	adds	r3, r3, #1
   16bf4:	adc	r2, r2, #0
   16bf8:	str	r3, [r4, #56]	; 0x38
   16bfc:	str	r2, [r4, #60]	; 0x3c
   16c00:	bl	14fcc <free_token_if@@Base>
   16c04:	ldr	r3, [r4, #80]	; 0x50
   16c08:	ldr	r2, [r4, #84]	; 0x54
   16c0c:	adds	r3, r3, #1
   16c10:	adc	r2, r2, #0
   16c14:	str	r3, [r4, #80]	; 0x50
   16c18:	str	r2, [r4, #84]	; 0x54
   16c1c:	mov	r0, r5
   16c20:	bl	1683c <read_if_statement@@Base>
   16c24:	mov	r7, r0
   16c28:	ldr	r3, [r4, #88]	; 0x58
   16c2c:	ldr	r2, [r4, #92]	; 0x5c
   16c30:	adds	r3, r3, #1
   16c34:	adc	r2, r2, #0
   16c38:	str	r3, [r4, #88]	; 0x58
   16c3c:	str	r2, [r4, #92]	; 0x5c
   16c40:	b	16b5c <read_body@@Base+0x130>
   16c44:	ldr	r3, [r4, #104]	; 0x68
   16c48:	ldr	r2, [r4, #108]	; 0x6c
   16c4c:	adds	r3, r3, #1
   16c50:	adc	r2, r2, #0
   16c54:	str	r3, [r4, #104]	; 0x68
   16c58:	str	r2, [r4, #108]	; 0x6c
   16c5c:	mov	r6, r7
   16c60:	b	16b68 <read_body@@Base+0x13c>
   16c64:	mov	r6, #0
   16c68:	ldr	r4, [pc, #52]	; 16ca4 <read_body@@Base+0x278>
   16c6c:	ldr	r3, [r4, #112]	; 0x70
   16c70:	ldr	r2, [r4, #116]	; 0x74
   16c74:	adds	r3, r3, #1
   16c78:	adc	r2, r2, #0
   16c7c:	str	r3, [r4, #112]	; 0x70
   16c80:	str	r2, [r4, #116]	; 0x74
   16c84:	bl	14eec <free_token_cbra@@Base>
   16c88:	ldr	r3, [r4, #120]	; 0x78
   16c8c:	ldr	r2, [r4, #124]	; 0x7c
   16c90:	adds	r3, r3, #1
   16c94:	adc	r2, r2, #0
   16c98:	str	r3, [r4, #120]	; 0x78
   16c9c:	str	r2, [r4, #124]	; 0x7c
   16ca0:	b	16bd0 <read_body@@Base+0x1a4>
   16ca4:	andeq	fp, r2, r8, ror #12

00016ca8 <read_function_ast_node@@Base>:
   16ca8:	strd	r4, [sp, #-24]!	; 0xffffffe8
   16cac:	strd	r6, [sp, #8]
   16cb0:	str	r8, [sp, #16]
   16cb4:	str	lr, [sp, #20]
   16cb8:	mov	r5, r0
   16cbc:	ldr	r2, [pc, #576]	; 16f04 <read_function_ast_node@@Base+0x25c>
   16cc0:	ldr	r3, [r2]
   16cc4:	ldr	r1, [r2, #4]
   16cc8:	adds	r3, r3, #1
   16ccc:	adc	r1, r1, #0
   16cd0:	str	r3, [r2]
   16cd4:	str	r1, [r2, #4]
   16cd8:	ldr	r0, [r0]
   16cdc:	bl	11ac0 <next@@Base>
   16ce0:	ldr	r3, [r0]
   16ce4:	cmp	r3, #0
   16ce8:	bne	16e68 <read_function_ast_node@@Base+0x1c0>
   16cec:	ldr	r4, [pc, #528]	; 16f04 <read_function_ast_node@@Base+0x25c>
   16cf0:	ldr	r3, [r4, #16]
   16cf4:	ldr	r2, [r4, #20]
   16cf8:	adds	r3, r3, #1
   16cfc:	adc	r2, r2, #0
   16d00:	str	r3, [r4, #16]
   16d04:	str	r2, [r4, #20]
   16d08:	bl	14d9c <free_token_int_type@@Base>
   16d0c:	ldr	r3, [r4, #24]
   16d10:	ldr	r2, [r4, #28]
   16d14:	adds	r3, r3, #1
   16d18:	adc	r2, r2, #0
   16d1c:	str	r3, [r4, #24]
   16d20:	str	r2, [r4, #28]
   16d24:	ldr	r0, [r5]
   16d28:	bl	11ac0 <next@@Base>
   16d2c:	mov	r6, r0
   16d30:	ldr	r3, [r0]
   16d34:	cmp	r3, #2
   16d38:	bne	16e8c <read_function_ast_node@@Base+0x1e4>
   16d3c:	ldr	r2, [pc, #448]	; 16f04 <read_function_ast_node@@Base+0x25c>
   16d40:	ldr	r3, [r2, #40]	; 0x28
   16d44:	ldr	r1, [r2, #44]	; 0x2c
   16d48:	adds	r3, r3, #1
   16d4c:	adc	r1, r1, #0
   16d50:	str	r3, [r2, #40]	; 0x28
   16d54:	str	r1, [r2, #44]	; 0x2c
   16d58:	ldr	r0, [r5]
   16d5c:	bl	11ac0 <next@@Base>
   16d60:	ldr	r3, [r0]
   16d64:	cmp	r3, #3
   16d68:	bne	16ec0 <read_function_ast_node@@Base+0x218>
   16d6c:	ldr	r4, [pc, #400]	; 16f04 <read_function_ast_node@@Base+0x25c>
   16d70:	ldr	r3, [r4, #56]	; 0x38
   16d74:	ldr	r2, [r4, #60]	; 0x3c
   16d78:	adds	r3, r3, #1
   16d7c:	adc	r2, r2, #0
   16d80:	str	r3, [r4, #56]	; 0x38
   16d84:	str	r2, [r4, #60]	; 0x3c
   16d88:	bl	14e44 <free_token_opar@@Base>
   16d8c:	ldr	r3, [r4, #64]	; 0x40
   16d90:	ldr	r2, [r4, #68]	; 0x44
   16d94:	adds	r3, r3, #1
   16d98:	adc	r2, r2, #0
   16d9c:	str	r3, [r4, #64]	; 0x40
   16da0:	str	r2, [r4, #68]	; 0x44
   16da4:	ldr	r0, [r5]
   16da8:	bl	11ac0 <next@@Base>
   16dac:	ldr	r3, [r0]
   16db0:	cmp	r3, #4
   16db4:	bne	16ee4 <read_function_ast_node@@Base+0x23c>
   16db8:	ldr	r4, [pc, #324]	; 16f04 <read_function_ast_node@@Base+0x25c>
   16dbc:	ldr	r3, [r4, #80]	; 0x50
   16dc0:	ldr	r2, [r4, #84]	; 0x54
   16dc4:	adds	r3, r3, #1
   16dc8:	adc	r2, r2, #0
   16dcc:	str	r3, [r4, #80]	; 0x50
   16dd0:	str	r2, [r4, #84]	; 0x54
   16dd4:	bl	14e7c <free_token_cpar@@Base>
   16dd8:	ldr	r3, [r4, #88]	; 0x58
   16ddc:	ldr	r2, [r4, #92]	; 0x5c
   16de0:	adds	r3, r3, #1
   16de4:	adc	r2, r2, #0
   16de8:	str	r3, [r4, #88]	; 0x58
   16dec:	str	r2, [r4, #92]	; 0x5c
   16df0:	mov	r0, r5
   16df4:	bl	16a2c <read_body@@Base>
   16df8:	mov	r7, r0
   16dfc:	ldr	r3, [r4, #96]	; 0x60
   16e00:	ldr	r2, [r4, #100]	; 0x64
   16e04:	adds	r3, r3, #1
   16e08:	adc	r2, r2, #0
   16e0c:	str	r3, [r4, #96]	; 0x60
   16e10:	str	r2, [r4, #100]	; 0x64
   16e14:	mov	r0, #16
   16e18:	bl	118c8 <malloc@plt>
   16e1c:	mov	r5, r0
   16e20:	mov	r2, r7
   16e24:	ldr	r1, [r6, #4]
   16e28:	bl	1523c <init_node_function@@Base>
   16e2c:	ldr	r3, [r4, #104]	; 0x68
   16e30:	ldr	r2, [r4, #108]	; 0x6c
   16e34:	adds	r3, r3, #1
   16e38:	adc	r2, r2, #0
   16e3c:	str	r3, [r4, #104]	; 0x68
   16e40:	str	r2, [r4, #108]	; 0x6c
   16e44:	mov	r0, r6
   16e48:	bl	14e0c <free_token_function@@Base>
   16e4c:	ldr	r3, [r4, #112]	; 0x70
   16e50:	ldr	r2, [r4, #116]	; 0x74
   16e54:	adds	r3, r3, #1
   16e58:	adc	r2, r2, #0
   16e5c:	str	r3, [r4, #112]	; 0x70
   16e60:	str	r2, [r4, #116]	; 0x74
   16e64:	b	16ea8 <read_function_ast_node@@Base+0x200>
   16e68:	ldr	r2, [pc, #148]	; 16f04 <read_function_ast_node@@Base+0x25c>
   16e6c:	ldr	r3, [r2, #8]
   16e70:	ldr	r1, [r2, #12]
   16e74:	adds	r3, r3, #1
   16e78:	adc	r1, r1, #0
   16e7c:	str	r3, [r2, #8]
   16e80:	str	r1, [r2, #12]
   16e84:	mov	r5, #0
   16e88:	b	16ea8 <read_function_ast_node@@Base+0x200>
   16e8c:	ldr	r3, [r4, #32]
   16e90:	ldr	r1, [r4, #36]	; 0x24
   16e94:	adds	r3, r3, #1
   16e98:	adc	r1, r1, #0
   16e9c:	str	r3, [r4, #32]
   16ea0:	str	r1, [r4, #36]	; 0x24
   16ea4:	mov	r5, #0
   16ea8:	mov	r0, r5
   16eac:	ldrd	r4, [sp]
   16eb0:	ldrd	r6, [sp, #8]
   16eb4:	ldr	r8, [sp, #16]
   16eb8:	add	sp, sp, #20
   16ebc:	pop	{pc}		; (ldr pc, [sp], #4)
   16ec0:	ldr	r2, [pc, #60]	; 16f04 <read_function_ast_node@@Base+0x25c>
   16ec4:	ldr	r3, [r2, #48]	; 0x30
   16ec8:	ldr	r1, [r2, #52]	; 0x34
   16ecc:	adds	r3, r3, #1
   16ed0:	adc	r1, r1, #0
   16ed4:	str	r3, [r2, #48]	; 0x30
   16ed8:	str	r1, [r2, #52]	; 0x34
   16edc:	mov	r5, #0
   16ee0:	b	16ea8 <read_function_ast_node@@Base+0x200>
   16ee4:	ldr	r3, [r4, #72]	; 0x48
   16ee8:	ldr	r1, [r4, #76]	; 0x4c
   16eec:	adds	r3, r3, #1
   16ef0:	adc	r1, r1, #0
   16ef4:	str	r3, [r4, #72]	; 0x48
   16ef8:	str	r1, [r4, #76]	; 0x4c
   16efc:	mov	r5, #0
   16f00:	b	16ea8 <read_function_ast_node@@Base+0x200>
   16f04:	andeq	fp, r2, r8, ror #13

00016f08 <build_ast@@Base>:
   16f08:	str	r4, [sp, #-8]!
   16f0c:	str	lr, [sp, #4]
   16f10:	ldr	r4, [pc, #60]	; 16f54 <build_ast@@Base+0x4c>
   16f14:	ldr	r3, [r4, #-8]
   16f18:	ldr	r2, [r4, #-4]
   16f1c:	adds	r3, r3, #1
   16f20:	adc	r2, r2, #0
   16f24:	str	r3, [r4, #-8]
   16f28:	str	r2, [r4, #-4]
   16f2c:	bl	16ca8 <read_function_ast_node@@Base>
   16f30:	ldr	r3, [r4]
   16f34:	ldr	r2, [r4, #4]
   16f38:	adds	r3, r3, #1
   16f3c:	adc	r2, r2, #0
   16f40:	str	r3, [r4]
   16f44:	str	r2, [r4, #4]
   16f48:	ldr	r4, [sp]
   16f4c:	add	sp, sp, #4
   16f50:	pop	{pc}		; (ldr pc, [sp], #4)
   16f54:	andeq	fp, r2, r8, ror #14
   16f58:	str	r4, [sp, #-8]!
   16f5c:	str	lr, [sp, #4]
   16f60:	movw	r0, #43004	; 0xa7fc
   16f64:	movt	r0, #2
   16f68:	bl	18fb0 <__gcov_sort_n_vals@@Base+0x4a0>
   16f6c:	ldr	r4, [sp]
   16f70:	add	sp, sp, #4
   16f74:	pop	{pc}		; (ldr pc, [sp], #4)
   16f78:	str	r4, [sp, #-8]!
   16f7c:	str	lr, [sp, #4]
   16f80:	bl	18f40 <__gcov_sort_n_vals@@Base+0x430>
   16f84:	ldr	r4, [sp]
   16f88:	add	sp, sp, #4
   16f8c:	pop	{pc}		; (ldr pc, [sp], #4)
   16f90:	b	18234 <build_ast@@Base+0x132c>
   16f94:	push	{r4, r5, r6, r7, r8, lr}
   16f98:	subs	r5, r1, #0
   16f9c:	popeq	{r4, r5, r6, r7, r8, pc}
   16fa0:	mov	r4, r0
   16fa4:	bl	16f90 <build_ast@@Base+0x88>
   16fa8:	ldr	r3, [r4]
   16fac:	ldr	r2, [r4, #4]
   16fb0:	adds	r6, r3, r0
   16fb4:	adc	r7, r2, r1
   16fb8:	subs	r5, r5, #1
   16fbc:	strd	r6, [r4], #8
   16fc0:	bne	16fa4 <build_ast@@Base+0x9c>
   16fc4:	pop	{r4, r5, r6, r7, r8, pc}
   16fc8:	ldr	r3, [pc, #20]	; 16fe4 <build_ast@@Base+0xdc>
   16fcc:	ldr	r2, [pc, #20]	; 16fe8 <build_ast@@Base+0xe0>
   16fd0:	add	r3, pc, r3
   16fd4:	ldr	r3, [r3, r2]
   16fd8:	ldmib	r3, {r0, r3}
   16fdc:	add	r0, r0, r3
   16fe0:	bx	lr
   16fe4:	andeq	r3, r1, r8, lsr #32
   16fe8:	andeq	r0, r0, r8, lsr #1
   16fec:	ldr	r3, [pc, #28]	; 17010 <build_ast@@Base+0x108>
   16ff0:	ldr	r2, [pc, #28]	; 17014 <build_ast@@Base+0x10c>
   16ff4:	add	r3, pc, r3
   16ff8:	ldr	r3, [r3, r2]
   16ffc:	ldr	r2, [r3]
   17000:	cmp	r2, #0
   17004:	ldrne	r0, [r3, #20]
   17008:	moveq	r0, #1
   1700c:	bx	lr
   17010:	andeq	r3, r1, r4
   17014:	andeq	r0, r0, r8, lsr #1
   17018:	bx	lr
   1701c:	ldr	ip, [pc, #32]	; 17044 <build_ast@@Base+0x13c>
   17020:	mov	r3, #32
   17024:	teq	r0, r1
   17028:	movmi	r2, ip
   1702c:	movpl	r2, #0
   17030:	subs	r3, r3, #1
   17034:	lsl	r1, r1, #1
   17038:	eor	r0, r2, r0, lsl #1
   1703c:	bne	17024 <build_ast@@Base+0x11c>
   17040:	bx	lr
   17044:	strbeq	r1, [r1], #3511	; 0xdb7
   17048:	ldr	r2, [pc, #60]	; 1708c <build_ast@@Base+0x184>
   1704c:	ldr	r3, [pc, #60]	; 17090 <build_ast@@Base+0x188>
   17050:	add	r2, pc, r2
   17054:	push	{r4, lr}
   17058:	ldr	r4, [r2, r3]
   1705c:	ldr	r0, [r4]
   17060:	cmp	r0, #0
   17064:	popeq	{r4, pc}
   17068:	ldr	r3, [pc, #36]	; 17094 <build_ast@@Base+0x18c>
   1706c:	ldr	r3, [r2, r3]
   17070:	ldr	r3, [r3]
   17074:	cmp	r0, r3
   17078:	popeq	{r4, pc}
   1707c:	bl	1194c <fclose@plt>
   17080:	mov	r3, #0
   17084:	str	r3, [r4]
   17088:	pop	{r4, pc}
   1708c:	andeq	r2, r1, r8, lsr #31
   17090:	andeq	r0, r0, ip, lsr #1
   17094:	muleq	r0, ip, r0
   17098:	ldr	r3, [pc, #76]	; 170ec <build_ast@@Base+0x1e4>
   1709c:	ldr	r1, [pc, #76]	; 170f0 <build_ast@@Base+0x1e8>
   170a0:	add	r3, pc, r3
   170a4:	push	{r4, r5, r6, lr}
   170a8:	mov	r5, r0
   170ac:	ldr	r4, [r3, r1]
   170b0:	lsl	r1, r0, #2
   170b4:	mov	r0, r4
   170b8:	mov	r2, #1
   170bc:	ldr	r3, [r0], #28
   170c0:	bl	11880 <fwrite@plt>
   170c4:	cmp	r0, #1
   170c8:	movne	r3, #1
   170cc:	ldr	r0, [r4, #8]
   170d0:	strne	r3, [r4, #20]
   170d4:	ldr	r3, [r4, #4]
   170d8:	sub	r0, r0, r5
   170dc:	add	r3, r3, r5
   170e0:	str	r3, [r4, #4]
   170e4:	str	r0, [r4, #8]
   170e8:	pop	{r4, r5, r6, pc}
   170ec:	andeq	r2, r1, r8, asr pc
   170f0:	andeq	r0, r0, r8, lsr #1
   170f4:	ldr	r3, [pc, #80]	; 1714c <build_ast@@Base+0x244>
   170f8:	ldr	r2, [pc, #80]	; 17150 <build_ast@@Base+0x248>
   170fc:	add	r3, pc, r3
   17100:	push	{r4, r5, r6, lr}
   17104:	mov	r5, r0
   17108:	ldr	r4, [r3, r2]
   1710c:	ldr	r3, [r4, #8]
   17110:	cmp	r3, #1024	; 0x400
   17114:	bcs	1712c <build_ast@@Base+0x224>
   17118:	add	r0, r3, #7
   1711c:	add	r3, r5, r3
   17120:	str	r3, [r4, #8]
   17124:	add	r0, r4, r0, lsl #2
   17128:	pop	{r4, r5, r6, pc}
   1712c:	mov	r0, #1024	; 0x400
   17130:	bl	17098 <build_ast@@Base+0x190>
   17134:	ldr	r3, [r4, #8]
   17138:	cmp	r3, #0
   1713c:	addne	r2, r4, #4096	; 0x1000
   17140:	ldrne	r2, [r2, #28]
   17144:	strne	r2, [r4, #28]
   17148:	b	17118 <build_ast@@Base+0x210>
   1714c:	strdeq	r2, [r1], -ip
   17150:	andeq	r0, r0, r8, lsr #1
   17154:	ldr	r3, [pc, #192]	; 1721c <build_ast@@Base+0x314>
   17158:	ldr	r2, [pc, #192]	; 17220 <build_ast@@Base+0x318>
   1715c:	add	r3, pc, r3
   17160:	push	{r4, r5, r6, lr}
   17164:	ldr	r4, [r3, r2]
   17168:	ldr	r2, [r4, #24]
   1716c:	ldr	r3, [r4, #8]
   17170:	ldr	ip, [r4, #12]
   17174:	cmp	r2, #0
   17178:	sub	ip, ip, r3
   1717c:	ble	171f8 <build_ast@@Base+0x2f0>
   17180:	cmp	ip, r0
   17184:	mov	r5, r0
   17188:	bcs	171e4 <build_ast@@Base+0x2dc>
   1718c:	ldr	r2, [r4, #4]
   17190:	cmp	ip, #0
   17194:	add	r2, r2, r3
   17198:	str	r2, [r4, #4]
   1719c:	addne	r2, r4, #28
   171a0:	mov	r0, r4
   171a4:	ldrne	r3, [r2, r3, lsl #2]
   171a8:	mov	r6, #0
   171ac:	strne	r3, [r4, #28]
   171b0:	ldr	r3, [r0], #28
   171b4:	mov	r2, #4096	; 0x1000
   171b8:	add	r0, r0, ip, lsl #2
   171bc:	mov	r1, #1
   171c0:	str	ip, [r4, #12]
   171c4:	str	r6, [r4, #8]
   171c8:	bl	11898 <fread@plt>
   171cc:	ldr	r3, [r4, #12]
   171d0:	add	r0, r3, r0, lsr #2
   171d4:	cmp	r0, r5
   171d8:	str	r0, [r4, #12]
   171dc:	bcc	17200 <build_ast@@Base+0x2f8>
   171e0:	ldr	r3, [r4, #8]
   171e4:	add	r0, r3, #7
   171e8:	add	r5, r5, r3
   171ec:	str	r5, [r4, #8]
   171f0:	add	r0, r4, r0, lsl #2
   171f4:	pop	{r4, r5, r6, pc}
   171f8:	mov	r0, #0
   171fc:	pop	{r4, r5, r6, pc}
   17200:	ldr	r3, [r4, #16]
   17204:	str	r6, [r4, #12]
   17208:	add	r5, r5, r3
   1720c:	sub	r5, r5, r0
   17210:	str	r5, [r4, #16]
   17214:	mov	r0, r6
   17218:	pop	{r4, r5, r6, pc}
   1721c:	muleq	r1, ip, lr
   17220:	andeq	r0, r0, r8, lsr #1
   17224:	push	{r4, r5, r6, lr}
   17228:	ldr	r4, [pc, #92]	; 1728c <build_ast@@Base+0x384>
   1722c:	ldr	r3, [pc, #92]	; 17290 <build_ast@@Base+0x388>
   17230:	add	r4, pc, r4
   17234:	ldr	r5, [r4, r3]
   17238:	ldr	r0, [r5]
   1723c:	cmp	r0, #0
   17240:	popne	{r4, r5, r6, pc}
   17244:	ldr	r0, [pc, #72]	; 17294 <build_ast@@Base+0x38c>
   17248:	add	r0, pc, r0
   1724c:	bl	118b0 <getenv@plt>
   17250:	cmp	r0, #0
   17254:	beq	17284 <build_ast@@Base+0x37c>
   17258:	ldr	r1, [pc, #56]	; 17298 <build_ast@@Base+0x390>
   1725c:	add	r1, pc, r1
   17260:	bl	11988 <fopen64@plt>
   17264:	str	r0, [r5]
   17268:	cmp	r0, #0
   1726c:	popne	{r4, r5, r6, pc}
   17270:	ldr	r3, [pc, #36]	; 1729c <build_ast@@Base+0x394>
   17274:	ldr	r3, [r4, r3]
   17278:	ldr	r0, [r3]
   1727c:	str	r0, [r5]
   17280:	pop	{r4, r5, r6, pc}
   17284:	ldr	r0, [r5]
   17288:	b	17268 <build_ast@@Base+0x360>
   1728c:	andeq	r2, r1, r8, asr #27
   17290:	andeq	r0, r0, ip, lsr #1
   17294:	andeq	r2, r0, ip, lsr #18
   17298:	muleq	r0, r4, r7
   1729c:	muleq	r0, ip, r0
   172a0:	push	{r0, r1, r2, r3}
   172a4:	push	{lr}		; (str lr, [sp, #-4]!)
   172a8:	sub	sp, sp, #12
   172ac:	add	r3, sp, #20
   172b0:	str	r3, [sp, #4]
   172b4:	bl	17224 <build_ast@@Base+0x31c>
   172b8:	ldr	r1, [sp, #16]
   172bc:	ldr	r2, [sp, #4]
   172c0:	bl	11970 <vfprintf@plt>
   172c4:	add	sp, sp, #12
   172c8:	pop	{lr}		; (ldr lr, [sp], #4)
   172cc:	add	sp, sp, #16
   172d0:	bx	lr
   172d4:	push	{r4, r5, r6, r7, r8, lr}
   172d8:	subs	r6, r1, #0
   172dc:	beq	17330 <build_ast@@Base+0x428>
   172e0:	cmp	r2, #0
   172e4:	ldr	r7, [r6]
   172e8:	beq	17320 <build_ast@@Base+0x418>
   172ec:	add	r4, r0, #12
   172f0:	add	r5, r4, r2, lsl #2
   172f4:	mov	r3, #0
   172f8:	ldr	r2, [r4, #4]!
   172fc:	add	r1, r6, r3, lsl #3
   17300:	cmp	r2, #0
   17304:	add	r8, r3, #1
   17308:	beq	17318 <build_ast@@Base+0x410>
   1730c:	ldr	r0, [r1, #28]
   17310:	bl	1185c <free@plt>
   17314:	mov	r3, r8
   17318:	cmp	r4, r5
   1731c:	bne	172f8 <build_ast@@Base+0x3f0>
   17320:	mov	r0, r6
   17324:	bl	1185c <free@plt>
   17328:	mov	r0, r7
   1732c:	pop	{r4, r5, r6, r7, r8, pc}
   17330:	mov	r7, r6
   17334:	b	17328 <build_ast@@Base+0x420>
   17338:	push	{r4, r5}
   1733c:	mov	r4, r0
   17340:	mov	r5, r1
   17344:	orrs	r3, r4, r5
   17348:	beq	1738c <build_ast@@Base+0x484>
   1734c:	cmp	r1, #0
   17350:	clzeq	r2, r0
   17354:	addeq	r2, r2, #32
   17358:	clzne	r2, r1
   1735c:	rsb	r3, r2, #63	; 0x3f
   17360:	cmp	r3, #1
   17364:	bls	1738c <build_ast@@Base+0x484>
   17368:	rsb	r1, r2, #61	; 0x3d
   1736c:	rsb	r0, r1, #32
   17370:	lsr	r3, r4, r1
   17374:	sub	r1, r1, #32
   17378:	orr	r3, r3, r5, lsl r0
   1737c:	orr	r3, r3, r5, lsr r1
   17380:	rsb	r2, r2, #1073741886	; 0x4000003e
   17384:	and	r0, r3, #3
   17388:	add	r0, r0, r2, lsl #2
   1738c:	pop	{r4, r5}
   17390:	bx	lr
   17394:	push	{r4, r5, r6, lr}
   17398:	mov	r1, r3
   1739c:	mov	r6, r0
   173a0:	mov	r0, r2
   173a4:	mov	r4, r2
   173a8:	mov	r5, r3
   173ac:	bl	17338 <build_ast@@Base+0x430>
   173b0:	add	r0, r0, r0, lsl #1
   173b4:	lsl	r0, r0, #3
   173b8:	add	r3, r6, r0
   173bc:	ldr	r1, [r6, r0]
   173c0:	ldr	r2, [r3, #16]
   173c4:	add	r1, r1, #1
   173c8:	str	r1, [r6, r0]
   173cc:	ldrd	r0, [r3, #8]
   173d0:	ldr	ip, [r3, #20]
   173d4:	adds	r2, r2, r4
   173d8:	str	r2, [r3, #16]
   173dc:	adc	r2, ip, r5
   173e0:	cmp	r4, r0
   173e4:	sbcs	r1, r5, r1
   173e8:	str	r2, [r3, #20]
   173ec:	strdlt	r4, [r3, #8]
   173f0:	pop	{r4, r5, r6, pc}
   173f4:	ldr	r3, [r1, #8]
   173f8:	cmp	r3, #0
   173fc:	bxeq	lr
   17400:	add	r2, r1, #6016	; 0x1780
   17404:	push	{r4, r5, r6, r7, r8, lr}
   17408:	mov	r3, r1
   1740c:	mov	r8, r1
   17410:	mov	r7, r0
   17414:	ldrd	r4, [r1, #24]
   17418:	add	r2, r2, #32
   1741c:	mov	ip, #0
   17420:	mov	r0, #0
   17424:	mov	r1, #0
   17428:	str	ip, [r3, #40]	; 0x28
   1742c:	strd	r4, [r3, #48]	; 0x30
   17430:	strd	r0, [r3, #56]	; 0x38
   17434:	add	r3, r3, #24
   17438:	cmp	r3, r2
   1743c:	bne	17428 <build_ast@@Base+0x520>
   17440:	cmp	r7, #0
   17444:	popeq	{r4, r5, r6, r7, r8, pc}
   17448:	add	r8, r8, #40	; 0x28
   1744c:	ldr	r3, [r7, #16]
   17450:	cmp	r3, #0
   17454:	beq	174dc <build_ast@@Base+0x5d4>
   17458:	ldr	r2, [r7, #52]	; 0x34
   1745c:	cmp	r2, #0
   17460:	beq	174dc <build_ast@@Base+0x5d4>
   17464:	mov	r6, #0
   17468:	b	17478 <build_ast@@Base+0x570>
   1746c:	add	r6, r6, #1
   17470:	cmp	r2, r6
   17474:	beq	174dc <build_ast@@Base+0x5d4>
   17478:	ldr	r3, [r7, #56]	; 0x38
   1747c:	ldr	r5, [r3, r6, lsl #2]
   17480:	cmp	r5, #0
   17484:	beq	1746c <build_ast@@Base+0x564>
   17488:	ldr	r3, [r5]
   1748c:	cmp	r3, r7
   17490:	bne	1746c <build_ast@@Base+0x564>
   17494:	ldr	r3, [r5, #16]
   17498:	cmp	r3, #0
   1749c:	beq	1746c <build_ast@@Base+0x564>
   174a0:	mov	r4, #0
   174a4:	ldr	r2, [r5, #20]
   174a8:	lsl	r3, r4, #3
   174ac:	add	r2, r2, r3
   174b0:	mov	r0, r8
   174b4:	ldrd	r2, [r2]
   174b8:	bl	17394 <build_ast@@Base+0x48c>
   174bc:	ldr	r3, [r5, #16]
   174c0:	add	r4, r4, #1
   174c4:	cmp	r3, r4
   174c8:	bhi	174a4 <build_ast@@Base+0x59c>
   174cc:	ldr	r2, [r7, #52]	; 0x34
   174d0:	add	r6, r6, #1
   174d4:	cmp	r2, r6
   174d8:	bne	17478 <build_ast@@Base+0x570>
   174dc:	ldr	r7, [r7, #4]
   174e0:	cmp	r7, #0
   174e4:	bne	1744c <build_ast@@Base+0x544>
   174e8:	pop	{r4, r5, r6, r7, r8, pc}
   174ec:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   174f0:	sub	sp, sp, #12
   174f4:	mov	r6, r0
   174f8:	str	r0, [sp, #4]
   174fc:	mov	r8, r2
   17500:	mov	r0, r1
   17504:	mov	r4, r1
   17508:	ldr	r2, [pc, #364]	; 1767c <build_ast@@Base+0x774>
   1750c:	mov	r1, #0
   17510:	bl	11934 <memset@plt>
   17514:	mov	r5, #0
   17518:	cmp	r6, #0
   1751c:	str	r5, [r8]
   17520:	beq	17660 <build_ast@@Base+0x758>
   17524:	mov	r9, r5
   17528:	ldr	r0, [r6, #12]
   1752c:	bl	11904 <strlen@plt>
   17530:	cmp	r5, r0
   17534:	strcc	r0, [r8]
   17538:	mov	r0, r9
   1753c:	ldr	r1, [r6, #8]
   17540:	bl	1701c <build_ast@@Base+0x114>
   17544:	ldr	r7, [r6, #52]	; 0x34
   17548:	mov	r1, r7
   1754c:	bl	1701c <build_ast@@Base+0x114>
   17550:	cmp	r7, #0
   17554:	mov	r9, r0
   17558:	beq	1764c <build_ast@@Base+0x744>
   1755c:	ldr	r5, [r6, #56]	; 0x38
   17560:	add	r7, r5, r7, lsl #2
   17564:	sub	r7, r7, #4
   17568:	sub	r5, r5, #4
   1756c:	b	1759c <build_ast@@Base+0x694>
   17570:	ldr	r3, [sl]
   17574:	mov	r0, r9
   17578:	cmp	r3, r6
   1757c:	beq	175b8 <build_ast@@Base+0x6b0>
   17580:	mov	r1, #0
   17584:	bl	1701c <build_ast@@Base+0x114>
   17588:	mov	r1, #0
   1758c:	bl	1701c <build_ast@@Base+0x114>
   17590:	mov	r9, r0
   17594:	cmp	r5, r7
   17598:	beq	1764c <build_ast@@Base+0x744>
   1759c:	ldr	sl, [r5, #4]!
   175a0:	cmp	sl, #0
   175a4:	bne	17570 <build_ast@@Base+0x668>
   175a8:	mov	r1, sl
   175ac:	mov	r0, r9
   175b0:	bl	1701c <build_ast@@Base+0x114>
   175b4:	b	17588 <build_ast@@Base+0x680>
   175b8:	ldr	r1, [sl, #12]
   175bc:	bl	1701c <build_ast@@Base+0x114>
   175c0:	ldr	r1, [sl, #8]
   175c4:	bl	1701c <build_ast@@Base+0x114>
   175c8:	ldr	r3, [r6, #16]
   175cc:	cmp	r3, #0
   175d0:	mov	r9, r0
   175d4:	beq	17594 <build_ast@@Base+0x68c>
   175d8:	ldr	fp, [sl, #16]
   175dc:	ldr	r3, [r4, #8]
   175e0:	mov	r1, fp
   175e4:	add	r3, r3, fp
   175e8:	str	r3, [r4, #8]
   175ec:	bl	1701c <build_ast@@Base+0x114>
   175f0:	cmp	fp, #0
   175f4:	mov	r9, r0
   175f8:	beq	17594 <build_ast@@Base+0x68c>
   175fc:	ldr	r2, [sl, #20]
   17600:	ldr	r3, [r4, #16]
   17604:	add	lr, r2, fp, lsl #3
   17608:	ldr	ip, [r4, #20]
   1760c:	sub	lr, lr, #8
   17610:	sub	r2, r2, #8
   17614:	ldrd	r0, [r2, #8]!
   17618:	ldrd	sl, [r4, #24]
   1761c:	adds	r3, r3, r0
   17620:	adc	ip, ip, r1
   17624:	str	ip, [r4, #20]
   17628:	str	r3, [r4, #16]
   1762c:	ldrd	r0, [r2]
   17630:	cmp	sl, r0
   17634:	sbcs	sl, fp, r1
   17638:	strdlt	r0, [r4, #24]
   1763c:	cmp	lr, r2
   17640:	bne	17614 <build_ast@@Base+0x70c>
   17644:	cmp	r5, r7
   17648:	bne	1759c <build_ast@@Base+0x694>
   1764c:	ldr	r6, [r6, #4]
   17650:	cmp	r6, #0
   17654:	beq	17664 <build_ast@@Base+0x75c>
   17658:	ldr	r5, [r8]
   1765c:	b	17528 <build_ast@@Base+0x620>
   17660:	ldr	r9, [sp, #4]
   17664:	ldr	r0, [sp, #4]
   17668:	mov	r1, r4
   1766c:	bl	173f4 <build_ast@@Base+0x4ec>
   17670:	mov	r0, r9
   17674:	add	sp, sp, #12
   17678:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1767c:	andeq	r1, r0, r8, asr #15
   17680:	push	{r4, r5, r6, lr}
   17684:	mov	r4, r0
   17688:	ldr	r0, [pc, #192]	; 17750 <build_ast@@Base+0x848>
   1768c:	add	r0, pc, r0
   17690:	bl	118b0 <getenv@plt>
   17694:	subs	r3, r0, #0
   17698:	beq	176a4 <build_ast@@Base+0x79c>
   1769c:	bl	1197c <atoi@plt>
   176a0:	bic	r3, r0, r0, asr #31
   176a4:	ldr	r0, [pc, #168]	; 17754 <build_ast@@Base+0x84c>
   176a8:	str	r3, [r4, #8]
   176ac:	add	r0, pc, r0
   176b0:	bl	118b0 <getenv@plt>
   176b4:	subs	r6, r0, #0
   176b8:	beq	17728 <build_ast@@Base+0x820>
   176bc:	bl	11904 <strlen@plt>
   176c0:	ldr	r3, [r4, #4]
   176c4:	add	r3, r3, #2
   176c8:	cmp	r0, #0
   176cc:	bne	17708 <build_ast@@Base+0x800>
   176d0:	ldr	r2, [r4, #8]
   176d4:	cmp	r2, #0
   176d8:	beq	1773c <build_ast@@Base+0x834>
   176dc:	ldr	r6, [pc, #116]	; 17758 <build_ast@@Base+0x850>
   176e0:	mov	r5, #1
   176e4:	add	r6, pc, r6
   176e8:	str	r5, [r4, #12]
   176ec:	add	r0, r3, r5
   176f0:	bl	118c8 <malloc@plt>
   176f4:	mov	r2, r5
   176f8:	mov	r1, r6
   176fc:	str	r0, [r4]
   17700:	pop	{r4, r5, r6, lr}
   17704:	b	11868 <memcpy@plt>
   17708:	sub	r5, r0, #1
   1770c:	ldrb	r2, [r6, r5]
   17710:	cmp	r2, #47	; 0x2f
   17714:	movne	r5, r0
   17718:	bne	176e8 <build_ast@@Base+0x7e0>
   1771c:	cmp	r5, #0
   17720:	bne	176e8 <build_ast@@Base+0x7e0>
   17724:	b	176d0 <build_ast@@Base+0x7c8>
   17728:	ldr	r2, [r4, #8]
   1772c:	ldr	r3, [r4, #4]
   17730:	cmp	r2, #0
   17734:	add	r3, r3, #2
   17738:	bne	176dc <build_ast@@Base+0x7d4>
   1773c:	str	r2, [r4, #12]
   17740:	mov	r0, r3
   17744:	bl	118c8 <malloc@plt>
   17748:	str	r0, [r4]
   1774c:	pop	{r4, r5, r6, pc}
   17750:	strdeq	r2, [r0], -ip
   17754:	strdeq	r2, [r0], -r0
   17758:	andeq	r2, r0, r0, lsr #9
   1775c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   17760:	sub	sp, sp, #6080	; 0x17c0
   17764:	sub	sp, sp, #36	; 0x24
   17768:	mov	r3, r0
   1776c:	str	r1, [sp, #40]	; 0x28
   17770:	mov	r1, #0
   17774:	mov	r4, r1
   17778:	str	r0, [sp, #56]	; 0x38
   1777c:	add	r7, r3, #6016	; 0x1780
   17780:	add	r0, sp, #64	; 0x40
   17784:	add	r6, sp, #2016	; 0x7e0
   17788:	ldr	r2, [pc, #984]	; 17b68 <build_ast@@Base+0xc60>
   1778c:	mov	r5, #251	; 0xfb
   17790:	str	r0, [sp, #60]	; 0x3c
   17794:	str	r5, [sp, #52]	; 0x34
   17798:	str	r6, [sp, #36]	; 0x24
   1779c:	mov	r9, r4
   177a0:	bl	11934 <memset@plt>
   177a4:	mov	sl, r4
   177a8:	add	r3, r7, #8
   177ac:	mov	r0, r4
   177b0:	str	r3, [sp, #48]	; 0x30
   177b4:	sub	r3, r6, #1952	; 0x7a0
   177b8:	str	r3, [sp, #44]	; 0x2c
   177bc:	ldr	r3, [sp, #48]	; 0x30
   177c0:	ldr	r2, [r3, #16]
   177c4:	ldr	r7, [r3]
   177c8:	str	r2, [sp, #16]
   177cc:	ldr	r2, [r3, #20]
   177d0:	cmp	r7, #0
   177d4:	str	r2, [sp, #20]
   177d8:	beq	17af8 <build_ast@@Base+0xbf0>
   177dc:	ldrd	r2, [r3, #8]
   177e0:	str	r9, [sp, #12]
   177e4:	strd	r2, [sp, #24]
   177e8:	b	178c8 <build_ast@@Base+0x9c0>
   177ec:	bls	17b5c <build_ast@@Base+0xc54>
   177f0:	ldr	r3, [sp, #12]
   177f4:	mov	r2, r4
   177f8:	umull	r0, r1, r7, r3
   177fc:	mov	r3, #0
   17800:	mla	r1, r7, sl, r1
   17804:	bl	19078 <__gcov_sort_n_vals@@Base+0x568>
   17808:	mov	r6, r0
   1780c:	mov	r8, r1
   17810:	ldr	r3, [sp, #12]
   17814:	sub	r4, r4, r7
   17818:	subs	r3, r3, r6
   1781c:	sbc	sl, sl, r8
   17820:	mov	fp, r7
   17824:	mov	r7, #0
   17828:	str	r3, [sp, #12]
   1782c:	ldr	r0, [sp, #16]
   17830:	ldr	r3, [sp, #20]
   17834:	str	r7, [sp, #16]
   17838:	str	r7, [sp, #20]
   1783c:	adds	r6, r6, r0
   17840:	ldrd	r0, [sp]
   17844:	adc	r8, r8, r3
   17848:	bl	17338 <build_ast@@Base+0x430>
   1784c:	ldr	r3, [sp, #44]	; 0x2c
   17850:	add	r1, r0, r0, lsl #1
   17854:	lsl	r1, r1, #3
   17858:	add	ip, r3, r1
   1785c:	ldr	r3, [sp, #36]	; 0x24
   17860:	ldr	lr, [ip, #16]
   17864:	add	r1, r3, r1
   17868:	adds	r6, lr, r6
   1786c:	ldr	lr, [ip, #20]
   17870:	ldrd	r2, [ip, #8]
   17874:	adc	lr, lr, r8
   17878:	ldrd	r8, [sp]
   1787c:	str	lr, [sp, #32]
   17880:	orrs	lr, r2, r3
   17884:	moveq	lr, #1
   17888:	movne	lr, #0
   1788c:	cmp	r8, r2
   17890:	sbcs	r3, r9, r3
   17894:	orrlt	lr, lr, #1
   17898:	cmp	lr, #0
   1789c:	str	r6, [ip, #16]
   178a0:	ldr	r6, [r1, #-1952]	; 0xfffff860
   178a4:	ldr	r3, [sp, #32]
   178a8:	strdne	r8, [ip, #8]
   178ac:	cmp	r4, #0
   178b0:	add	fp, r6, fp
   178b4:	subeq	r5, r5, #1
   178b8:	cmp	r7, #0
   178bc:	str	r3, [ip, #20]
   178c0:	str	fp, [r1, #-1952]	; 0xfffff860
   178c4:	beq	17af4 <build_ast@@Base+0xbec>
   178c8:	cmp	r4, #0
   178cc:	beq	17950 <build_ast@@Base+0xa48>
   178d0:	add	r2, r5, r5, lsl #1
   178d4:	ldr	r3, [sp, #40]	; 0x28
   178d8:	add	r2, r3, r2, lsl #3
   178dc:	ldrd	r0, [sp, #24]
   178e0:	ldr	r3, [r2, #8]
   178e4:	ldr	r2, [r2, #12]
   178e8:	adds	r3, r0, r3
   178ec:	str	r3, [sp]
   178f0:	adc	r3, r1, r2
   178f4:	cmp	r4, r7
   178f8:	str	r3, [sp, #4]
   178fc:	bcs	177ec <build_ast@@Base+0x8e4>
   17900:	ldr	r6, [sp, #16]
   17904:	ldr	r8, [sp, #20]
   17908:	mov	r2, r7
   1790c:	umull	r0, r1, r4, r6
   17910:	mov	r3, #0
   17914:	mla	r1, r4, r8, r1
   17918:	bl	19078 <__gcov_sort_n_vals@@Base+0x568>
   1791c:	sub	r7, r7, r4
   17920:	mov	fp, r4
   17924:	mov	r4, #0
   17928:	subs	r2, r6, r0
   1792c:	str	r2, [sp, #16]
   17930:	sbc	r2, r8, r1
   17934:	ldr	r6, [sp, #12]
   17938:	mov	r8, sl
   1793c:	mov	r3, r1
   17940:	str	r2, [sp, #20]
   17944:	str	r4, [sp, #12]
   17948:	mov	sl, r4
   1794c:	b	1783c <build_ast@@Base+0x934>
   17950:	cmp	r5, #0
   17954:	blt	17b54 <build_ast@@Base+0xc4c>
   17958:	ldr	r3, [sp, #40]	; 0x28
   1795c:	add	r2, r5, r5, lsl #1
   17960:	ldr	r4, [r3, r2, lsl #3]
   17964:	add	r2, r3, r2, lsl #3
   17968:	cmp	r4, #0
   1796c:	bne	17ae4 <build_ast@@Base+0xbdc>
   17970:	mov	r3, r2
   17974:	ldr	r9, [sp, #12]
   17978:	b	1798c <build_ast@@Base+0xa84>
   1797c:	ldr	r4, [r3]
   17980:	mov	r2, r3
   17984:	cmp	r4, #0
   17988:	bne	17ae4 <build_ast@@Base+0xbdc>
   1798c:	subs	r5, r5, #1
   17990:	sub	r3, r3, #24
   17994:	bcs	1797c <build_ast@@Base+0xa74>
   17998:	ldr	r2, [sp, #52]	; 0x34
   1799c:	ldr	ip, [sp, #36]	; 0x24
   179a0:	ldr	r4, [sp, #16]
   179a4:	lsl	r3, r2, #1
   179a8:	add	r1, r3, r2
   179ac:	sub	r2, ip, #1952	; 0x7a0
   179b0:	lsl	r1, r1, #3
   179b4:	add	r2, r2, r1
   179b8:	add	r1, ip, r1
   179bc:	ldr	ip, [r2, #16]
   179c0:	ldr	lr, [r1, #-1952]	; 0xfffff860
   179c4:	adds	ip, ip, r4
   179c8:	add	r7, lr, r7
   179cc:	ldrd	r4, [r2, #8]
   179d0:	ldr	lr, [r2, #20]
   179d4:	str	r7, [r1, #-1952]	; 0xfffff860
   179d8:	ldr	r1, [sp, #20]
   179dc:	str	ip, [r2, #16]
   179e0:	adc	lr, lr, r1
   179e4:	orrs	r1, r4, r5
   179e8:	str	lr, [r2, #20]
   179ec:	beq	17ac4 <build_ast@@Base+0xbbc>
   179f0:	ldrd	r6, [sp, #24]
   179f4:	cmp	r6, r4
   179f8:	sbcs	r2, r7, r5
   179fc:	blt	17ac4 <build_ast@@Base+0xbbc>
   17a00:	ldr	r2, [sp, #52]	; 0x34
   17a04:	ldr	lr, [sp, #60]	; 0x3c
   17a08:	add	ip, r3, r2
   17a0c:	ldr	r3, [sp, #56]	; 0x38
   17a10:	lsl	ip, ip, #3
   17a14:	add	r1, lr, ip
   17a18:	add	ip, r3, ip
   17a1c:	b	17a78 <build_ast@@Base+0xb70>
   17a20:	ldr	r3, [r1, #-8]
   17a24:	ldr	r6, [ip, #-8]
   17a28:	ldr	r7, [ip, #-4]
   17a2c:	ldr	r2, [r1, #-4]
   17a30:	adds	r6, r3, r6
   17a34:	ldrd	r4, [r1, #-16]
   17a38:	adc	r2, r2, r7
   17a3c:	ldr	r3, [r1, #-24]	; 0xffffffe8
   17a40:	ldr	r7, [ip, #-24]	; 0xffffffe8
   17a44:	orrs	r8, r4, r5
   17a48:	add	r3, r3, r7
   17a4c:	str	r2, [r1, #-4]
   17a50:	str	r3, [r1, #-24]	; 0xffffffe8
   17a54:	str	r6, [r1, #-8]
   17a58:	ldrd	r2, [ip, #-16]
   17a5c:	sub	ip, ip, #24
   17a60:	beq	17a70 <build_ast@@Base+0xb68>
   17a64:	cmp	r2, r4
   17a68:	sbcs	r4, r3, r5
   17a6c:	bge	17a74 <build_ast@@Base+0xb6c>
   17a70:	strd	r2, [r1, #-16]
   17a74:	sub	r1, r1, #24
   17a78:	cmp	r1, lr
   17a7c:	bne	17a20 <build_ast@@Base+0xb18>
   17a80:	ldr	r3, [sp, #36]	; 0x24
   17a84:	add	r0, r0, r0, lsl #1
   17a88:	sub	r3, r3, #1952	; 0x7a0
   17a8c:	add	r3, r3, r0, lsl #3
   17a90:	ldr	r1, [sp, #60]	; 0x3c
   17a94:	ldr	r2, [r3, #16]
   17a98:	ldr	ip, [r3, #20]
   17a9c:	adds	r9, r2, r9
   17aa0:	adc	sl, ip, sl
   17aa4:	ldr	r0, [sp, #56]	; 0x38
   17aa8:	ldr	r2, [pc, #184]	; 17b68 <build_ast@@Base+0xc60>
   17aac:	str	r9, [r3, #16]
   17ab0:	str	sl, [r3, #20]
   17ab4:	bl	11868 <memcpy@plt>
   17ab8:	add	sp, sp, #6080	; 0x17c0
   17abc:	add	sp, sp, #36	; 0x24
   17ac0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   17ac4:	ldr	r2, [sp, #52]	; 0x34
   17ac8:	ldrd	r4, [sp, #24]
   17acc:	add	r1, r3, r2
   17ad0:	ldr	r2, [sp, #36]	; 0x24
   17ad4:	sub	r2, r2, #1952	; 0x7a0
   17ad8:	add	r2, r2, r1, lsl #3
   17adc:	strd	r4, [r2, #8]
   17ae0:	b	17a00 <build_ast@@Base+0xaf8>
   17ae4:	ldr	r3, [r2, #16]
   17ae8:	ldr	sl, [r2, #20]
   17aec:	str	r3, [sp, #12]
   17af0:	b	178dc <build_ast@@Base+0x9d4>
   17af4:	ldr	r9, [sp, #12]
   17af8:	ldr	r3, [sp, #52]	; 0x34
   17afc:	sub	r3, r3, #1
   17b00:	str	r3, [sp, #52]	; 0x34
   17b04:	cmn	r3, #1
   17b08:	ldr	r3, [sp, #48]	; 0x30
   17b0c:	sub	r3, r3, #24
   17b10:	str	r3, [sp, #48]	; 0x30
   17b14:	bne	177bc <build_ast@@Base+0x8b4>
   17b18:	cmp	r4, #0
   17b1c:	subne	r5, r5, #1
   17b20:	cmp	r5, #0
   17b24:	blt	17a80 <build_ast@@Base+0xb78>
   17b28:	add	r5, r5, r5, lsl #1
   17b2c:	ldr	ip, [sp, #40]	; 0x28
   17b30:	add	r3, ip, r5, lsl #3
   17b34:	ldr	r2, [r3, #16]
   17b38:	ldr	r1, [r3, #20]
   17b3c:	adds	r9, r9, r2
   17b40:	adc	sl, sl, r1
   17b44:	cmp	ip, r3
   17b48:	sub	r3, r3, #24
   17b4c:	bne	17b34 <build_ast@@Base+0xc2c>
   17b50:	b	17a80 <build_ast@@Base+0xb78>
   17b54:	ldr	r9, [sp, #12]
   17b58:	b	17998 <build_ast@@Base+0xa90>
   17b5c:	ldr	r6, [sp, #12]
   17b60:	mov	r8, sl
   17b64:	b	17810 <build_ast@@Base+0x908>
   17b68:	andeq	r1, r0, r0, lsr #15
   17b6c:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   17b70:	ldrb	r4, [r0]
   17b74:	cmp	r4, #47	; 0x2f
   17b78:	addeq	r5, r0, #1
   17b7c:	ldrbeq	r4, [r0, #1]
   17b80:	movne	r5, r0
   17b84:	cmp	r4, #0
   17b88:	beq	17bdc <build_ast@@Base+0xcd4>
   17b8c:	mov	r6, r0
   17b90:	mov	r7, #0
   17b94:	mov	r8, #47	; 0x2f
   17b98:	ldr	sl, [pc, #136]	; 17c28 <build_ast@@Base+0xd20>
   17b9c:	b	17bac <build_ast@@Base+0xca4>
   17ba0:	ldrb	r4, [r5, #1]!
   17ba4:	cmp	r4, #0
   17ba8:	beq	17bdc <build_ast@@Base+0xcd4>
   17bac:	cmp	r4, #47	; 0x2f
   17bb0:	bne	17ba0 <build_ast@@Base+0xc98>
   17bb4:	strb	r7, [r5]
   17bb8:	mov	r1, #0
   17bbc:	mov	r0, r6
   17bc0:	bl	11940 <access@plt>
   17bc4:	cmn	r0, #1
   17bc8:	beq	17be8 <build_ast@@Base+0xce0>
   17bcc:	strb	r8, [r5]
   17bd0:	ldrb	r4, [r5, #1]!
   17bd4:	cmp	r4, #0
   17bd8:	bne	17bac <build_ast@@Base+0xca4>
   17bdc:	mov	r9, #0
   17be0:	mov	r0, r9
   17be4:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   17be8:	mov	r1, sl
   17bec:	mov	r0, r6
   17bf0:	bl	11928 <mkdir@plt>
   17bf4:	cmn	r0, #1
   17bf8:	mov	r9, r0
   17bfc:	bne	17bcc <build_ast@@Base+0xcc4>
   17c00:	bl	1191c <__errno_location@plt>
   17c04:	ldr	r3, [r0]
   17c08:	cmp	r3, #17
   17c0c:	beq	17bcc <build_ast@@Base+0xcc4>
   17c10:	ldr	r0, [pc, #20]	; 17c2c <build_ast@@Base+0xd24>
   17c14:	mov	r1, r6
   17c18:	add	r0, pc, r0
   17c1c:	bl	172a0 <build_ast@@Base+0x398>
   17c20:	strb	r4, [r5]
   17c24:	b	17be0 <build_ast@@Base+0xcd8>
   17c28:	andeq	r0, r0, sp, ror #3
   17c2c:	muleq	r0, r0, pc	; <UNPREDICTABLE>
   17c30:	ldr	r3, [pc, #76]	; 17c84 <build_ast@@Base+0xd7c>
   17c34:	cmp	r1, r3
   17c38:	beq	17c7c <build_ast@@Base+0xd74>
   17c3c:	cmp	r2, #0
   17c40:	ldr	ip, [pc, #64]	; 17c88 <build_ast@@Base+0xd80>
   17c44:	push	{lr}		; (str lr, [sp, #-4]!)
   17c48:	rev	r3, r1
   17c4c:	sub	sp, sp, #12
   17c50:	ldreq	r2, [r0]
   17c54:	ldr	r0, [pc, #48]	; 17c8c <build_ast@@Base+0xd84>
   17c58:	stm	sp, {r3, ip}
   17c5c:	mov	r1, r2
   17c60:	mov	r3, sp
   17c64:	add	r2, sp, #4
   17c68:	add	r0, pc, r0
   17c6c:	bl	172a0 <build_ast@@Base+0x398>
   17c70:	mov	r0, #0
   17c74:	add	sp, sp, #12
   17c78:	pop	{pc}		; (ldr pc, [sp], #4)
   17c7c:	mov	r0, #1
   17c80:	bx	lr
   17c84:	teqmi	r8, sl, lsr #6
   17c88:	bcs	ce5d94 <__bss_end__@@Base+0xcb9288>
   17c8c:	andeq	r1, r0, r8, ror #30
   17c90:	ldr	r2, [r2]
   17c94:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   17c98:	cmp	r2, #0
   17c9c:	mov	r4, r3
   17ca0:	ldr	r2, [r3, #12]
   17ca4:	ldr	r3, [sp, #32]
   17ca8:	beq	17d94 <build_ast@@Base+0xe8c>
   17cac:	cmp	r1, #0
   17cb0:	addeq	r1, r2, #1
   17cb4:	streq	r1, [r4, #12]
   17cb8:	cmp	r2, #0
   17cbc:	ldr	r0, [r4, #16]
   17cc0:	ldr	lr, [r4, #20]
   17cc4:	ldrd	r6, [r4, #24]
   17cc8:	ldr	r2, [r4, #32]
   17ccc:	ldr	r1, [r4, #36]	; 0x24
   17cd0:	bne	17d40 <build_ast@@Base+0xe38>
   17cd4:	ldr	ip, [r3, #8]
   17cd8:	str	ip, [r4, #8]
   17cdc:	ldr	ip, [r3, #16]
   17ce0:	ldr	r5, [r3, #20]
   17ce4:	adds	r0, ip, r0
   17ce8:	adc	lr, r5, lr
   17cec:	str	r0, [r4, #16]
   17cf0:	str	lr, [r4, #20]
   17cf4:	ldrd	r8, [r3, #24]
   17cf8:	cmp	r6, r8
   17cfc:	sbcs	r0, r7, r9
   17d00:	bge	17db4 <build_ast@@Base+0xeac>
   17d04:	strd	r8, [r4, #24]
   17d08:	ldr	r0, [r3, #24]
   17d0c:	ldr	ip, [r3, #28]
   17d10:	adds	r2, r0, r2
   17d14:	adc	r1, ip, r1
   17d18:	str	r1, [r4, #36]	; 0x24
   17d1c:	str	r2, [r4, #32]
   17d20:	add	r1, r3, #40	; 0x28
   17d24:	ldr	r2, [pc, #176]	; 17ddc <build_ast@@Base+0xed4>
   17d28:	add	r0, r4, #40	; 0x28
   17d2c:	bl	11868 <memcpy@plt>
   17d30:	ldr	r3, [sp, #36]	; 0x24
   17d34:	mov	r0, #0
   17d38:	str	r3, [r4]
   17d3c:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   17d40:	ldr	ip, [r3, #16]
   17d44:	ldr	r5, [r3, #20]
   17d48:	adds	r0, ip, r0
   17d4c:	adc	lr, r5, lr
   17d50:	str	r0, [r4, #16]
   17d54:	str	lr, [r4, #20]
   17d58:	ldrd	r8, [r3, #24]
   17d5c:	cmp	r6, r8
   17d60:	sbcs	r0, r7, r9
   17d64:	bge	17dc8 <build_ast@@Base+0xec0>
   17d68:	strd	r8, [r4, #24]
   17d6c:	ldr	r0, [r3, #24]
   17d70:	ldr	ip, [r3, #28]
   17d74:	adds	r2, r0, r2
   17d78:	adc	r1, ip, r1
   17d7c:	str	r1, [r4, #36]	; 0x24
   17d80:	str	r2, [r4, #32]
   17d84:	add	r1, r3, #40	; 0x28
   17d88:	add	r0, r4, #40	; 0x28
   17d8c:	bl	1775c <build_ast@@Base+0x854>
   17d90:	b	17d30 <build_ast@@Base+0xe28>
   17d94:	cmp	r2, #0
   17d98:	beq	17d30 <build_ast@@Base+0xe28>
   17d9c:	mov	r1, r0
   17da0:	ldr	r0, [pc, #56]	; 17de0 <build_ast@@Base+0xed8>
   17da4:	add	r0, pc, r0
   17da8:	bl	172a0 <build_ast@@Base+0x398>
   17dac:	mvn	r0, #0
   17db0:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   17db4:	adds	r2, r2, r8
   17db8:	adc	r1, r1, r9
   17dbc:	str	r1, [r4, #36]	; 0x24
   17dc0:	str	r2, [r4, #32]
   17dc4:	b	17d20 <build_ast@@Base+0xe18>
   17dc8:	adds	r2, r2, r8
   17dcc:	adc	r1, r1, r9
   17dd0:	str	r1, [r4, #36]	; 0x24
   17dd4:	str	r2, [r4, #32]
   17dd8:	b	17d84 <build_ast@@Base+0xe7c>
   17ddc:	andeq	r1, r0, r0, lsr #15
   17de0:	andeq	r1, r0, r4, ror #28
   17de4:	ldr	r0, [pc, #52]	; 17e20 <build_ast@@Base+0xf18>
   17de8:	ldr	r3, [pc, #52]	; 17e24 <build_ast@@Base+0xf1c>
   17dec:	add	r0, pc, r0
   17df0:	push	{lr}		; (str lr, [sp, #-4]!)
   17df4:	mov	ip, #0
   17df8:	ldr	r3, [r0, r3]
   17dfc:	mvn	lr, #0
   17e00:	mov	r2, ip
   17e04:	str	lr, [r3, #24]
   17e08:	mov	r1, ip
   17e0c:	ldr	r0, [r3]
   17e10:	pop	{lr}		; (ldr lr, [sp], #4)
   17e14:	str	ip, [r3, #4]
   17e18:	str	ip, [r3, #8]
   17e1c:	b	11994 <fseek@plt>
   17e20:	andeq	r2, r1, ip, lsl #4
   17e24:	andeq	r0, r0, r8, lsr #1
   17e28:	push	{r4, r5, r6, r7, lr}
   17e2c:	mov	r2, #0
   17e30:	sub	sp, sp, #36	; 0x24
   17e34:	mov	r3, #0
   17e38:	mov	r4, #0
   17e3c:	mov	r6, r0
   17e40:	strd	r2, [sp, #8]
   17e44:	strd	r2, [sp, #16]
   17e48:	strh	r4, [sp, #2]
   17e4c:	bl	118ec <getpid@plt>
   17e50:	ldr	r3, [pc, #196]	; 17f1c <build_ast@@Base+0x1014>
   17e54:	ldr	ip, [pc, #196]	; 17f20 <build_ast@@Base+0x1018>
   17e58:	add	r3, pc, r3
   17e5c:	mvn	lr, #0
   17e60:	mov	r7, #1
   17e64:	ldr	r2, [pc, #184]	; 17f24 <build_ast@@Base+0x101c>
   17e68:	mov	r1, #66	; 0x42
   17e6c:	str	r0, [sp, #24]
   17e70:	ldr	r5, [r3, ip]
   17e74:	mov	r0, r6
   17e78:	strh	r7, [sp]
   17e7c:	str	r4, [r5, #4]
   17e80:	str	r4, [r5, #12]
   17e84:	str	r4, [r5, #8]
   17e88:	str	r4, [r5, #20]
   17e8c:	str	lr, [r5, #16]
   17e90:	bl	118a4 <open64@plt>
   17e94:	subs	r6, r0, #0
   17e98:	movlt	r0, r4
   17e9c:	blt	17f00 <build_ast@@Base+0xff8>
   17ea0:	mov	r4, sp
   17ea4:	mov	r2, r4
   17ea8:	mov	r1, #14
   17eac:	mov	r0, r6
   17eb0:	bl	11964 <fcntl64@plt>
   17eb4:	cmp	r0, #0
   17eb8:	beq	17ecc <build_ast@@Base+0xfc4>
   17ebc:	bl	1191c <__errno_location@plt>
   17ec0:	ldr	r3, [r0]
   17ec4:	cmp	r3, #4
   17ec8:	beq	17ea4 <build_ast@@Base+0xf9c>
   17ecc:	ldr	r1, [pc, #84]	; 17f28 <build_ast@@Base+0x1020>
   17ed0:	mov	r0, r6
   17ed4:	add	r1, pc, r1
   17ed8:	bl	11820 <fdopen@plt>
   17edc:	cmp	r0, #0
   17ee0:	mov	r4, r0
   17ee4:	str	r0, [r5]
   17ee8:	beq	17f08 <build_ast@@Base+0x1000>
   17eec:	mov	r4, #1
   17ef0:	mov	r1, #0
   17ef4:	str	r4, [r5, #24]
   17ef8:	bl	11838 <setbuf@plt>
   17efc:	mov	r0, r4
   17f00:	add	sp, sp, #36	; 0x24
   17f04:	pop	{r4, r5, r6, r7, pc}
   17f08:	mov	r0, r6
   17f0c:	bl	119b8 <close@plt>
   17f10:	mov	r0, r4
   17f14:	add	sp, sp, #36	; 0x24
   17f18:	pop	{r4, r5, r6, r7, pc}
   17f1c:	andeq	r2, r1, r0, lsr #3
   17f20:	andeq	r0, r0, r8, lsr #1
   17f24:			; <UNDEFINED> instruction: 0x000001b6
   17f28:	andeq	r1, r0, r0, ror #26
   17f2c:	push	{r4, r5, r6, lr}
   17f30:	mov	r4, r1
   17f34:	ldr	r5, [pc, #248]	; 18034 <build_ast@@Base+0x112c>
   17f38:	ldr	ip, [r4, #8]
   17f3c:	ldr	lr, [r4, #12]
   17f40:	ldr	r6, [r4]
   17f44:	cmp	ip, #0
   17f48:	mov	r1, r0
   17f4c:	add	r5, pc, r5
   17f50:	add	r0, r6, lr
   17f54:	ble	17f90 <build_ast@@Base+0x1088>
   17f58:	ldrb	r3, [r1]
   17f5c:	cmp	r3, #47	; 0x2f
   17f60:	addeq	r2, r1, #1
   17f64:	ldrbeq	r3, [r1, #1]
   17f68:	movne	r2, r1
   17f6c:	cmp	r3, #0
   17f70:	beq	17f90 <build_ast@@Base+0x1088>
   17f74:	cmp	r3, #47	; 0x2f
   17f78:	moveq	r1, r2
   17f7c:	ldrb	r3, [r2, #1]!
   17f80:	subeq	ip, ip, #1
   17f84:	cmp	r3, #0
   17f88:	cmpne	ip, #0
   17f8c:	bne	17f74 <build_ast@@Base+0x106c>
   17f90:	cmp	lr, #0
   17f94:	bne	17fb4 <build_ast@@Base+0x10ac>
   17f98:	bl	1188c <strcpy@plt>
   17f9c:	ldr	r0, [r4]
   17fa0:	bl	17e28 <build_ast@@Base+0xf20>
   17fa4:	cmp	r0, #0
   17fa8:	beq	17fcc <build_ast@@Base+0x10c4>
   17fac:	mov	r0, #0
   17fb0:	pop	{r4, r5, r6, pc}
   17fb4:	ldrb	r3, [r1]
   17fb8:	cmp	r3, #47	; 0x2f
   17fbc:	movne	r3, #47	; 0x2f
   17fc0:	addne	r0, r0, #1
   17fc4:	strbne	r3, [r6, lr]
   17fc8:	b	17f98 <build_ast@@Base+0x1090>
   17fcc:	ldr	r0, [r4]
   17fd0:	bl	17b6c <build_ast@@Base+0xc64>
   17fd4:	cmp	r0, #0
   17fd8:	bne	18010 <build_ast@@Base+0x1108>
   17fdc:	ldr	r0, [r4]
   17fe0:	bl	17e28 <build_ast@@Base+0xf20>
   17fe4:	cmp	r0, #0
   17fe8:	bne	17fac <build_ast@@Base+0x10a4>
   17fec:	ldr	r3, [pc, #68]	; 18038 <build_ast@@Base+0x1130>
   17ff0:	ldr	r1, [pc, #68]	; 1803c <build_ast@@Base+0x1134>
   17ff4:	ldr	r2, [r4]
   17ff8:	ldr	r3, [r5, r3]
   17ffc:	add	r1, pc, r1
   18000:	ldr	r0, [r3]
   18004:	bl	11910 <fprintf@plt>
   18008:	mvn	r0, #0
   1800c:	pop	{r4, r5, r6, pc}
   18010:	ldr	r3, [pc, #32]	; 18038 <build_ast@@Base+0x1130>
   18014:	ldr	r1, [pc, #36]	; 18040 <build_ast@@Base+0x1138>
   18018:	ldr	r2, [r4]
   1801c:	ldr	r3, [r5, r3]
   18020:	add	r1, pc, r1
   18024:	ldr	r0, [r3]
   18028:	bl	11910 <fprintf@plt>
   1802c:	mvn	r0, #0
   18030:	pop	{r4, r5, r6, pc}
   18034:	andeq	r2, r1, ip, lsr #1
   18038:	muleq	r0, ip, r0
   1803c:	andeq	r1, r0, r0, asr ip
   18040:	andeq	r1, r0, r8, lsl ip
   18044:	ldr	r3, [pc, #96]	; 180ac <build_ast@@Base+0x11a4>
   18048:	ldr	r2, [pc, #96]	; 180b0 <build_ast@@Base+0x11a8>
   1804c:	add	r3, pc, r3
   18050:	push	{r4, lr}
   18054:	ldr	r4, [r3, r2]
   18058:	ldr	r0, [r4]
   1805c:	cmp	r0, #0
   18060:	beq	18080 <build_ast@@Base+0x1178>
   18064:	ldr	r3, [r4, #8]
   18068:	cmp	r3, #0
   1806c:	bne	18090 <build_ast@@Base+0x1188>
   18070:	bl	1194c <fclose@plt>
   18074:	mov	r3, #0
   18078:	str	r3, [r4]
   1807c:	str	r3, [r4, #12]
   18080:	mov	r3, #0
   18084:	str	r3, [r4, #24]
   18088:	ldr	r0, [r4, #20]
   1808c:	pop	{r4, pc}
   18090:	ldr	r2, [r4, #24]
   18094:	cmp	r2, #0
   18098:	bge	18070 <build_ast@@Base+0x1168>
   1809c:	mov	r0, r3
   180a0:	bl	17098 <build_ast@@Base+0x190>
   180a4:	ldr	r0, [r4]
   180a8:	b	18070 <build_ast@@Base+0x1168>
   180ac:	andeq	r1, r1, ip, lsr #31
   180b0:	andeq	r0, r0, r8, lsr #1
   180b4:	push	{r4, lr}
   180b8:	mov	r4, r0
   180bc:	mov	r0, #1
   180c0:	bl	170f4 <build_ast@@Base+0x1ec>
   180c4:	str	r4, [r0]
   180c8:	pop	{r4, pc}
   180cc:	push	{r4, r5, r6, lr}
   180d0:	mov	r5, r0
   180d4:	mov	r0, #2
   180d8:	mov	r4, r1
   180dc:	bl	170f4 <build_ast@@Base+0x1ec>
   180e0:	str	r5, [r0]
   180e4:	str	r4, [r0, #4]
   180e8:	pop	{r4, r5, r6, pc}
   180ec:	push	{r4, r5, r6, lr}
   180f0:	mov	r5, r0
   180f4:	mov	r0, #2
   180f8:	mov	r4, r1
   180fc:	bl	170f4 <build_ast@@Base+0x1ec>
   18100:	str	r5, [r0]
   18104:	str	r4, [r0, #4]
   18108:	pop	{r4, r5, r6, pc}
   1810c:	mov	r2, #0
   18110:	push	{r4, r5, r6, r7, r8, lr}
   18114:	mov	r3, r2
   18118:	sub	sp, sp, #32
   1811c:	mov	r5, r1
   18120:	mov	r7, r2
   18124:	mov	r4, r1
   18128:	mov	r8, #1
   1812c:	str	r2, [sp]
   18130:	str	r2, [sp, #4]
   18134:	str	r2, [sp, #8]
   18138:	str	r2, [sp, #12]
   1813c:	str	r2, [sp, #16]
   18140:	str	r2, [sp, #20]
   18144:	str	r2, [sp, #24]
   18148:	str	r2, [sp, #28]
   1814c:	lsr	r2, r3, #5
   18150:	ldr	lr, [r1, #40]	; 0x28
   18154:	add	ip, sp, #32
   18158:	cmp	lr, #0
   1815c:	add	r2, ip, r2, lsl #2
   18160:	and	r6, r3, #31
   18164:	ldrne	ip, [r2, #-32]	; 0xffffffe0
   18168:	add	r3, r3, #1
   1816c:	orrne	ip, ip, r8, lsl r6
   18170:	addne	r7, r7, #1
   18174:	strne	ip, [r2, #-32]	; 0xffffffe0
   18178:	cmp	r3, #252	; 0xfc
   1817c:	add	r1, r1, #24
   18180:	bne	1814c <build_ast@@Base+0x1244>
   18184:	add	r7, r7, r7, lsl #2
   18188:	add	r1, r7, #17
   1818c:	bl	180ec <build_ast@@Base+0x11e4>
   18190:	ldr	r0, [r5]
   18194:	bl	180b4 <build_ast@@Base+0x11ac>
   18198:	ldr	r0, [r5, #8]
   1819c:	bl	180b4 <build_ast@@Base+0x11ac>
   181a0:	ldr	r0, [r5, #12]
   181a4:	bl	180b4 <build_ast@@Base+0x11ac>
   181a8:	ldrd	r0, [r5, #16]
   181ac:	bl	180cc <build_ast@@Base+0x11c4>
   181b0:	ldrd	r0, [r5, #24]
   181b4:	bl	180cc <build_ast@@Base+0x11c4>
   181b8:	ldrd	r0, [r5, #32]
   181bc:	bl	180cc <build_ast@@Base+0x11c4>
   181c0:	sub	r6, sp, #4
   181c4:	add	r7, sp, #28
   181c8:	ldr	r0, [r6, #4]!
   181cc:	bl	180b4 <build_ast@@Base+0x11ac>
   181d0:	cmp	r7, r6
   181d4:	bne	181c8 <build_ast@@Base+0x12c0>
   181d8:	add	r5, r5, #6016	; 0x1780
   181dc:	add	r5, r5, #32
   181e0:	ldr	r3, [r4, #40]	; 0x28
   181e4:	subs	r0, r3, #0
   181e8:	beq	18200 <build_ast@@Base+0x12f8>
   181ec:	bl	180b4 <build_ast@@Base+0x11ac>
   181f0:	ldrd	r0, [r4, #48]	; 0x30
   181f4:	bl	180cc <build_ast@@Base+0x11c4>
   181f8:	ldrd	r0, [r4, #56]	; 0x38
   181fc:	bl	180cc <build_ast@@Base+0x11c4>
   18200:	add	r4, r4, #24
   18204:	cmp	r4, r5
   18208:	bne	181e0 <build_ast@@Base+0x12d8>
   1820c:	add	sp, sp, #32
   18210:	pop	{r4, r5, r6, r7, r8, pc}
   18214:	push	{r4, lr}
   18218:	mov	r0, #1
   1821c:	bl	17154 <build_ast@@Base+0x24c>
   18220:	subs	r3, r0, #0
   18224:	popeq	{r4, pc}
   18228:	ldr	r0, [r3]
   1822c:	pop	{r4, lr}
   18230:	b	17018 <build_ast@@Base+0x110>
   18234:	push	{r4, lr}
   18238:	mov	r0, #2
   1823c:	bl	17154 <build_ast@@Base+0x24c>
   18240:	subs	r2, r0, #0
   18244:	beq	18268 <build_ast@@Base+0x1360>
   18248:	ldr	r0, [r2]
   1824c:	bl	17018 <build_ast@@Base+0x110>
   18250:	mov	r3, r0
   18254:	ldr	r0, [r2, #4]
   18258:	bl	17018 <build_ast@@Base+0x110>
   1825c:	mov	r1, r0
   18260:	mov	r0, r3
   18264:	pop	{r4, pc}
   18268:	mov	r3, r2
   1826c:	mov	r1, r2
   18270:	mov	r0, r3
   18274:	pop	{r4, pc}
   18278:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1827c:	sub	sp, sp, #28
   18280:	mov	r8, r1
   18284:	str	r3, [sp, #12]
   18288:	mov	r4, #0
   1828c:	add	r3, r1, #52	; 0x34
   18290:	add	r1, r1, #16
   18294:	str	r0, [sp, #20]
   18298:	str	r2, [sp, #16]
   1829c:	ldr	r2, [r3, #-4]!
   182a0:	cmp	r2, #0
   182a4:	addne	r4, r4, #1
   182a8:	cmp	r1, r3
   182ac:	bne	1829c <build_ast@@Base+0x1394>
   182b0:	add	r4, r4, #4
   182b4:	lsl	r4, r4, #3
   182b8:	mov	r0, r4
   182bc:	bl	118c8 <malloc@plt>
   182c0:	subs	r6, r0, #0
   182c4:	beq	18398 <build_ast@@Base+0x1490>
   182c8:	ldr	r3, [sp, #12]
   182cc:	mov	r4, #0
   182d0:	str	r3, [r6, #4]
   182d4:	str	r4, [r6]
   182d8:	bl	18214 <build_ast@@Base+0x130c>
   182dc:	mov	r7, r4
   182e0:	add	r5, r8, #12
   182e4:	str	r0, [r6, #12]
   182e8:	bl	18214 <build_ast@@Base+0x130c>
   182ec:	str	r0, [r6, #16]
   182f0:	bl	18214 <build_ast@@Base+0x130c>
   182f4:	str	r0, [r6, #20]
   182f8:	b	18308 <build_ast@@Base+0x1400>
   182fc:	add	r4, r4, #1
   18300:	cmp	r4, #9
   18304:	beq	18384 <build_ast@@Base+0x147c>
   18308:	ldr	r3, [r5, #4]!
   1830c:	cmp	r3, #0
   18310:	beq	182fc <build_ast@@Base+0x13f4>
   18314:	bl	18214 <build_ast@@Base+0x130c>
   18318:	lsl	r3, r4, #17
   1831c:	add	r3, r3, #27262976	; 0x1a00000
   18320:	add	r3, r3, #65536	; 0x10000
   18324:	cmp	r0, r3
   18328:	bne	183ec <build_ast@@Base+0x14e4>
   1832c:	bl	18214 <build_ast@@Base+0x130c>
   18330:	lsr	sl, r0, #1
   18334:	lsl	fp, sl, #3
   18338:	mov	r0, fp
   1833c:	bl	118c8 <malloc@plt>
   18340:	subs	r9, r0, #0
   18344:	beq	183fc <build_ast@@Base+0x14f4>
   18348:	add	r1, r6, r7, lsl #3
   1834c:	cmp	sl, #0
   18350:	str	sl, [r1, #24]
   18354:	str	r9, [r1, #28]
   18358:	sub	fp, sl, #1
   1835c:	beq	18374 <build_ast@@Base+0x146c>
   18360:	bl	18234 <build_ast@@Base+0x132c>
   18364:	sub	fp, fp, #1
   18368:	cmn	fp, #1
   1836c:	strd	r0, [r9], #8
   18370:	bne	18360 <build_ast@@Base+0x1458>
   18374:	add	r4, r4, #1
   18378:	cmp	r4, #9
   1837c:	add	r7, r7, #1
   18380:	bne	18308 <build_ast@@Base+0x1400>
   18384:	ldr	r3, [sp, #16]
   18388:	mov	r0, r6
   1838c:	str	r6, [r3]
   18390:	add	sp, sp, #28
   18394:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   18398:	mvn	r5, #0
   1839c:	cmp	r4, #0
   183a0:	bne	183e0 <build_ast@@Base+0x14d8>
   183a4:	ldr	r3, [pc, #92]	; 18408 <build_ast@@Base+0x1500>
   183a8:	mov	r4, r5
   183ac:	add	r3, pc, r3
   183b0:	ldr	r0, [pc, #84]	; 1840c <build_ast@@Base+0x1504>
   183b4:	ldr	r2, [sp, #12]
   183b8:	ldr	r1, [sp, #20]
   183bc:	str	r4, [sp]
   183c0:	add	r0, pc, r0
   183c4:	bl	172a0 <build_ast@@Base+0x398>
   183c8:	mov	r2, r5
   183cc:	mov	r1, r6
   183d0:	mov	r0, r8
   183d4:	add	sp, sp, #28
   183d8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   183dc:	b	172d4 <build_ast@@Base+0x3cc>
   183e0:	ldr	r3, [pc, #40]	; 18410 <build_ast@@Base+0x1508>
   183e4:	add	r3, pc, r3
   183e8:	b	183b0 <build_ast@@Base+0x14a8>
   183ec:	ldr	r3, [pc, #32]	; 18414 <build_ast@@Base+0x150c>
   183f0:	mov	r5, r4
   183f4:	add	r3, pc, r3
   183f8:	b	183b0 <build_ast@@Base+0x14a8>
   183fc:	mov	r5, r4
   18400:	mov	r4, fp
   18404:	b	1839c <build_ast@@Base+0x1494>
   18408:			; <UNDEFINED> instruction: 0x000018bc
   1840c:	andeq	r1, r0, ip, asr #17
   18410:	muleq	r0, r8, r8
   18414:	andeq	r1, r0, r4, ror r8
   18418:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1841c:	sub	sp, sp, #36	; 0x24
   18420:	mov	r9, r0
   18424:	bl	18214 <build_ast@@Base+0x130c>
   18428:	mov	r7, #0
   1842c:	sub	r4, sp, #4
   18430:	add	r5, sp, #28
   18434:	str	r0, [r9]
   18438:	bl	18214 <build_ast@@Base+0x130c>
   1843c:	str	r0, [r9, #8]
   18440:	bl	18214 <build_ast@@Base+0x130c>
   18444:	str	r0, [r9, #12]
   18448:	bl	18234 <build_ast@@Base+0x132c>
   1844c:	strd	r0, [r9, #16]
   18450:	bl	18234 <build_ast@@Base+0x132c>
   18454:	strd	r0, [r9, #24]
   18458:	bl	18234 <build_ast@@Base+0x132c>
   1845c:	ldr	r2, [pc, #264]	; 1856c <build_ast@@Base+0x1664>
   18460:	strd	r0, [r9, #32]
   18464:	add	r0, r9, #40	; 0x28
   18468:	mov	r1, r7
   1846c:	bl	11934 <memset@plt>
   18470:	bl	18214 <build_ast@@Base+0x130c>
   18474:	str	r0, [r4, #4]!
   18478:	bl	1915c <__gcov_sort_n_vals@@Base+0x64c>
   1847c:	cmp	r4, r5
   18480:	add	r7, r7, r0
   18484:	bne	18470 <build_ast@@Base+0x1568>
   18488:	cmp	r7, #0
   1848c:	sub	r7, r7, #1
   18490:	beq	18558 <build_ast@@Base+0x1650>
   18494:	ldr	r8, [pc, #212]	; 18570 <build_ast@@Base+0x1668>
   18498:	ldr	sl, [pc, #212]	; 18574 <build_ast@@Base+0x166c>
   1849c:	mov	r4, #0
   184a0:	add	r8, pc, r8
   184a4:	add	sl, pc, sl
   184a8:	mov	r5, r4
   184ac:	mov	r6, r4
   184b0:	cmp	r4, #0
   184b4:	addeq	r3, sp, #32
   184b8:	addeq	r6, r3, r5, lsl #2
   184bc:	subeq	r6, r6, #36	; 0x24
   184c0:	beq	184dc <build_ast@@Base+0x15d4>
   184c4:	b	18504 <build_ast@@Base+0x15fc>
   184c8:	ldr	r4, [r6, #4]!
   184cc:	add	r3, r5, #1
   184d0:	cmp	r4, #0
   184d4:	bne	184fc <build_ast@@Base+0x15f4>
   184d8:	mov	r5, r3
   184dc:	cmp	r5, #7
   184e0:	bls	184c8 <build_ast@@Base+0x15c0>
   184e4:	mov	r0, r8
   184e8:	bl	172a0 <build_ast@@Base+0x398>
   184ec:	ldr	r4, [r6, #4]!
   184f0:	add	r3, r5, #1
   184f4:	cmp	r4, #0
   184f8:	beq	184d8 <build_ast@@Base+0x15d0>
   184fc:	lsl	r6, r5, #5
   18500:	mov	r5, r3
   18504:	tst	r4, #1
   18508:	bne	1851c <build_ast@@Base+0x1614>
   1850c:	lsr	r4, r4, #1
   18510:	tst	r4, #1
   18514:	add	r6, r6, #1
   18518:	beq	1850c <build_ast@@Base+0x1604>
   1851c:	cmp	r6, #251	; 0xfb
   18520:	bhi	18560 <build_ast@@Base+0x1658>
   18524:	bl	18214 <build_ast@@Base+0x130c>
   18528:	add	fp, r6, r6, lsl #1
   1852c:	sub	r7, r7, #1
   18530:	add	fp, r9, fp, lsl #3
   18534:	lsr	r4, r4, #1
   18538:	add	r6, r6, #1
   1853c:	str	r0, [fp, #40]	; 0x28
   18540:	bl	18234 <build_ast@@Base+0x132c>
   18544:	strd	r0, [fp, #48]	; 0x30
   18548:	bl	18234 <build_ast@@Base+0x132c>
   1854c:	cmn	r7, #1
   18550:	strd	r0, [fp, #56]	; 0x38
   18554:	bne	184b0 <build_ast@@Base+0x15a8>
   18558:	add	sp, sp, #36	; 0x24
   1855c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   18560:	mov	r0, sl
   18564:	bl	172a0 <build_ast@@Base+0x398>
   18568:	b	18524 <build_ast@@Base+0x161c>
   1856c:	andeq	r1, r0, r0, lsr #15
   18570:	andeq	r1, r0, r0, lsl r8
   18574:	andeq	r1, r0, ip, asr #16
   18578:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1857c:	sub	sp, sp, #6080	; 0x17c0
   18580:	sub	sp, sp, #28
   18584:	mov	r4, r1
   18588:	strd	r2, [sp, #4]
   1858c:	add	r3, sp, #6144	; 0x1800
   18590:	mov	r9, r0
   18594:	ldr	r7, [r3]
   18598:	add	r3, sp, #6144	; 0x1800
   1859c:	add	r3, r3, #4
   185a0:	ldr	r6, [r3]
   185a4:	add	r3, sp, #6144	; 0x1800
   185a8:	add	r3, r3, #8
   185ac:	ldr	sl, [r3]
   185b0:	bl	18214 <build_ast@@Base+0x130c>
   185b4:	add	r3, r4, #12
   185b8:	mov	r2, r9
   185bc:	str	r3, [sp, #12]
   185c0:	mov	r1, r0
   185c4:	mov	r0, r3
   185c8:	bl	17c30 <build_ast@@Base+0xd28>
   185cc:	cmp	r0, #0
   185d0:	beq	18858 <build_ast@@Base+0x1950>
   185d4:	bl	18214 <build_ast@@Base+0x130c>
   185d8:	ldr	r3, [r4, #8]
   185dc:	cmp	r0, r3
   185e0:	bne	18674 <build_ast@@Base+0x176c>
   185e4:	ldr	fp, [pc, #628]	; 18860 <build_ast@@Base+0x1958>
   185e8:	add	r5, sp, #16
   185ec:	add	fp, pc, fp
   185f0:	bl	16fc8 <build_ast@@Base+0xc0>
   185f4:	str	r0, [r6]
   185f8:	bl	18214 <build_ast@@Base+0x130c>
   185fc:	cmp	r0, #-1560281088	; 0xa3000000
   18600:	bne	186b8 <build_ast@@Base+0x17b0>
   18604:	bl	18214 <build_ast@@Base+0x130c>
   18608:	mov	r0, r5
   1860c:	bl	18418 <build_ast@@Base+0x1510>
   18610:	bl	16fec <build_ast@@Base+0xe4>
   18614:	add	r2, sp, #2000	; 0x7d0
   18618:	add	r2, r2, #8
   1861c:	subs	r8, r0, #0
   18620:	bne	187ec <build_ast@@Base+0x18e4>
   18624:	ldr	r3, [r7]
   18628:	cmp	r3, #0
   1862c:	bne	18684 <build_ast@@Base+0x177c>
   18630:	ldr	r3, [r2, #-1992]	; 0xfffff838
   18634:	cmp	r3, sl
   18638:	bne	185f0 <build_ast@@Base+0x16e8>
   1863c:	ldr	r3, [sp, #8]
   18640:	ldr	r2, [r2, #-1984]	; 0xfffff840
   18644:	ldr	r3, [r3]
   18648:	cmp	r2, r3
   1864c:	bne	185f0 <build_ast@@Base+0x16e8>
   18650:	ldr	r2, [pc, #524]	; 18864 <build_ast@@Base+0x195c>
   18654:	mov	r1, r5
   18658:	ldr	r0, [sp, #4]
   1865c:	bl	11868 <memcpy@plt>
   18660:	ldr	r3, [r6]
   18664:	str	r3, [r7]
   18668:	b	185f0 <build_ast@@Base+0x16e8>
   1866c:	cmp	r0, #0
   18670:	bne	1882c <build_ast@@Base+0x1924>
   18674:	mov	r0, #0
   18678:	add	sp, sp, #6080	; 0x17c0
   1867c:	add	sp, sp, #28
   18680:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   18684:	ldr	r0, [pc, #476]	; 18868 <build_ast@@Base+0x1960>
   18688:	bl	118c8 <malloc@plt>
   1868c:	ldr	r2, [pc, #464]	; 18864 <build_ast@@Base+0x195c>
   18690:	mov	r1, r5
   18694:	mov	r3, r0
   18698:	str	r0, [fp]
   1869c:	add	r0, r0, #8
   186a0:	str	r3, [sp]
   186a4:	bl	11868 <memcpy@plt>
   186a8:	ldr	r3, [sp]
   186ac:	str	r8, [r3]
   186b0:	ldr	fp, [fp]
   186b4:	b	185f0 <build_ast@@Base+0x16e8>
   186b8:	ldr	r5, [r4, #52]	; 0x34
   186bc:	cmp	r5, #0
   186c0:	beq	1866c <build_ast@@Base+0x1764>
   186c4:	ldr	r3, [r4, #56]	; 0x38
   186c8:	cmp	r0, #16777216	; 0x1000000
   186cc:	ldr	r8, [r3]
   186d0:	bne	18828 <build_ast@@Base+0x1920>
   186d4:	ldr	r6, [pc, #400]	; 1886c <build_ast@@Base+0x1964>
   186d8:	mov	r5, #0
   186dc:	add	r6, pc, r6
   186e0:	add	r6, r6, #4
   186e4:	b	18728 <build_ast@@Base+0x1820>
   186e8:	mov	r2, r6
   186ec:	mov	r3, r5
   186f0:	mov	r1, r4
   186f4:	mov	r0, r9
   186f8:	bl	18278 <build_ast@@Base+0x1370>
   186fc:	subs	r6, r0, #0
   18700:	beq	1882c <build_ast@@Base+0x1924>
   18704:	bl	18214 <build_ast@@Base+0x130c>
   18708:	ldr	r3, [r4, #52]	; 0x34
   1870c:	add	r5, r5, #1
   18710:	cmp	r3, r5
   18714:	beq	1866c <build_ast@@Base+0x1764>
   18718:	ldr	r3, [r4, #56]	; 0x38
   1871c:	cmp	r0, #16777216	; 0x1000000
   18720:	ldr	r8, [r3, r5, lsl #2]
   18724:	bne	1882c <build_ast@@Base+0x1924>
   18728:	bl	18214 <build_ast@@Base+0x130c>
   1872c:	cmp	r0, #0
   18730:	beq	18704 <build_ast@@Base+0x17fc>
   18734:	cmp	r0, #3
   18738:	bne	1882c <build_ast@@Base+0x1924>
   1873c:	cmp	r8, #0
   18740:	beq	186e8 <build_ast@@Base+0x17e0>
   18744:	ldr	r3, [r8]
   18748:	cmp	r4, r3
   1874c:	bne	186e8 <build_ast@@Base+0x17e0>
   18750:	bl	18214 <build_ast@@Base+0x130c>
   18754:	ldr	r3, [r8, #4]
   18758:	cmp	r0, r3
   1875c:	bne	1882c <build_ast@@Base+0x1924>
   18760:	bl	18214 <build_ast@@Base+0x130c>
   18764:	ldr	r3, [r8, #8]
   18768:	cmp	r0, r3
   1876c:	bne	1882c <build_ast@@Base+0x1924>
   18770:	bl	18214 <build_ast@@Base+0x130c>
   18774:	ldr	r3, [r8, #12]
   18778:	cmp	r0, r3
   1877c:	bne	1882c <build_ast@@Base+0x1924>
   18780:	ldr	r7, [pc, #232]	; 18870 <build_ast@@Base+0x1968>
   18784:	ldr	fp, [sp, #12]
   18788:	add	r8, r8, #16
   1878c:	ldr	sl, [fp, #4]!
   18790:	cmp	sl, #0
   18794:	beq	187cc <build_ast@@Base+0x18c4>
   18798:	bl	18214 <build_ast@@Base+0x130c>
   1879c:	str	r0, [sp]
   187a0:	bl	18214 <build_ast@@Base+0x130c>
   187a4:	ldr	r3, [sp]
   187a8:	cmp	r3, r7
   187ac:	bne	1882c <build_ast@@Base+0x1924>
   187b0:	ldr	r3, [r8]
   187b4:	mov	r1, r3
   187b8:	cmp	r0, r3, lsl #1
   187bc:	bne	1882c <build_ast@@Base+0x1924>
   187c0:	ldr	r0, [r8, #4]
   187c4:	blx	sl
   187c8:	add	r8, r8, #8
   187cc:	ldr	r3, [pc, #160]	; 18874 <build_ast@@Base+0x196c>
   187d0:	add	r7, r7, #131072	; 0x20000
   187d4:	cmp	r7, r3
   187d8:	bne	1878c <build_ast@@Base+0x1884>
   187dc:	bl	16fec <build_ast@@Base+0xe4>
   187e0:	cmp	r0, #0
   187e4:	beq	18704 <build_ast@@Base+0x17fc>
   187e8:	mov	r8, r0
   187ec:	cmp	r8, #0
   187f0:	blt	1881c <build_ast@@Base+0x1914>
   187f4:	ldr	r2, [pc, #124]	; 18878 <build_ast@@Base+0x1970>
   187f8:	add	r2, pc, r2
   187fc:	ldr	r0, [pc, #120]	; 1887c <build_ast@@Base+0x1974>
   18800:	mov	r1, r9
   18804:	add	r0, pc, r0
   18808:	bl	172a0 <build_ast@@Base+0x398>
   1880c:	mvn	r0, #0
   18810:	add	sp, sp, #6080	; 0x17c0
   18814:	add	sp, sp, #28
   18818:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1881c:	ldr	r2, [pc, #92]	; 18880 <build_ast@@Base+0x1978>
   18820:	add	r2, pc, r2
   18824:	b	187fc <build_ast@@Base+0x18f4>
   18828:	mov	r5, #0
   1882c:	ldr	r2, [pc, #80]	; 18884 <build_ast@@Base+0x197c>
   18830:	ldr	r0, [pc, #80]	; 18888 <build_ast@@Base+0x1980>
   18834:	mov	r3, r5
   18838:	mov	r1, r9
   1883c:	add	r2, pc, r2
   18840:	add	r0, pc, r0
   18844:	bl	172a0 <build_ast@@Base+0x398>
   18848:	mvn	r0, #0
   1884c:	add	sp, sp, #6080	; 0x17c0
   18850:	add	sp, sp, #28
   18854:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   18858:	mvn	r0, #0
   1885c:	b	18678 <build_ast@@Base+0x1770>
   18860:	andeq	r3, r1, ip, ror r1
   18864:	andeq	r1, r0, r8, asr #15
   18868:	ldrdeq	r1, [r0], -r0
   1886c:	andeq	r3, r1, ip, lsl #1
   18870:			; <UNDEFINED> instruction: 0x01a10000
   18874:			; <UNDEFINED> instruction: 0x01b30000
   18878:	andeq	r1, r0, r0, asr #10
   1887c:	andeq	r1, r0, r4, ror #10
   18880:	andeq	r1, r0, ip, lsl #10
   18884:	muleq	r0, r8, pc	; <UNPREDICTABLE>
   18888:	andeq	r1, r0, r0, lsl #10
   1888c:	ldr	r3, [pc, #72]	; 188dc <build_ast@@Base+0x19d4>
   18890:	ldr	r2, [pc, #72]	; 188e0 <build_ast@@Base+0x19d8>
   18894:	add	r3, pc, r3
   18898:	push	{r4, r5, r6, lr}
   1889c:	mov	r5, r0
   188a0:	ldr	r4, [r3, r2]
   188a4:	ldr	r0, [r4, #8]
   188a8:	cmp	r0, #0
   188ac:	bne	188d4 <build_ast@@Base+0x19cc>
   188b0:	lsl	r1, r5, #2
   188b4:	mov	r2, #0
   188b8:	ldr	r0, [r4]
   188bc:	bl	11994 <fseek@plt>
   188c0:	ldr	r0, [r4]
   188c4:	bl	11874 <ftell@plt>
   188c8:	asr	r0, r0, #2
   188cc:	str	r0, [r4, #4]
   188d0:	pop	{r4, r5, r6, pc}
   188d4:	bl	17098 <build_ast@@Base+0x190>
   188d8:	b	188b0 <build_ast@@Base+0x19a8>
   188dc:	andeq	r1, r1, r4, ror #14
   188e0:	andeq	r0, r0, r8, lsr #1
   188e4:	cmp	r2, #0
   188e8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   188ec:	mov	r8, r0
   188f0:	sub	sp, sp, #20
   188f4:	mov	r5, r1
   188f8:	mov	r4, r3
   188fc:	beq	18acc <build_ast@@Base+0x1bc4>
   18900:	cmp	r4, #0
   18904:	bne	18ae8 <build_ast@@Base+0x1be0>
   18908:	mov	r1, r5
   1890c:	ldr	r5, [pc, #480]	; 18af4 <build_ast@@Base+0x1bec>
   18910:	mov	r0, #-1560281088	; 0xa3000000
   18914:	add	r5, pc, r5
   18918:	bl	1810c <build_ast@@Base+0x1204>
   1891c:	ldr	r4, [r5]
   18920:	cmp	r4, #0
   18924:	beq	18950 <build_ast@@Base+0x1a48>
   18928:	add	r1, r4, #8
   1892c:	mov	r0, #-1560281088	; 0xa3000000
   18930:	bl	1810c <build_ast@@Base+0x1204>
   18934:	ldr	r3, [r5]
   18938:	mov	r0, r3
   1893c:	ldr	r4, [r3]
   18940:	bl	1185c <free@plt>
   18944:	cmp	r4, #0
   18948:	str	r4, [r5]
   1894c:	bne	18928 <build_ast@@Base+0x1a20>
   18950:	ldr	r3, [r8, #52]	; 0x34
   18954:	cmp	r3, #0
   18958:	beq	18aa4 <build_ast@@Base+0x1b9c>
   1895c:	ldr	r3, [pc, #404]	; 18af8 <build_ast@@Base+0x1bf0>
   18960:	ldr	r9, [pc, #404]	; 18afc <build_ast@@Base+0x1bf4>
   18964:	add	r3, pc, r3
   18968:	str	r3, [sp, #4]
   1896c:	ldr	r3, [pc, #396]	; 18b00 <build_ast@@Base+0x1bf8>
   18970:	mov	r7, #0
   18974:	add	r3, pc, r3
   18978:	str	r3, [sp, #12]
   1897c:	b	189b8 <build_ast@@Base+0x1ab0>
   18980:	ldr	r3, [r8, #56]	; 0x38
   18984:	ldr	r4, [r3, r7, lsl #2]
   18988:	cmp	r4, #0
   1898c:	beq	1899c <build_ast@@Base+0x1a94>
   18990:	ldr	r3, [r4]
   18994:	cmp	r3, r8
   18998:	beq	18ab4 <build_ast@@Base+0x1bac>
   1899c:	mov	r1, #0
   189a0:	mov	r0, #16777216	; 0x1000000
   189a4:	bl	180ec <build_ast@@Base+0x11e4>
   189a8:	ldr	r3, [r8, #52]	; 0x34
   189ac:	add	r7, r7, #1
   189b0:	cmp	r3, r7
   189b4:	beq	18aa4 <build_ast@@Base+0x1b9c>
   189b8:	ldr	r3, [sp, #4]
   189bc:	ldr	r4, [r3, #4]
   189c0:	cmp	r4, #0
   189c4:	beq	18980 <build_ast@@Base+0x1a78>
   189c8:	ldr	r3, [r4, #4]
   189cc:	cmp	r3, r7
   189d0:	bne	18980 <build_ast@@Base+0x1a78>
   189d4:	mov	r3, #1
   189d8:	mov	r1, #3
   189dc:	mov	r0, #16777216	; 0x1000000
   189e0:	add	r4, r4, #8
   189e4:	str	r3, [sp, #8]
   189e8:	bl	180ec <build_ast@@Base+0x11e4>
   189ec:	ldr	r0, [r4, #4]
   189f0:	bl	180b4 <build_ast@@Base+0x11ac>
   189f4:	ldr	r0, [r4, #8]
   189f8:	bl	180b4 <build_ast@@Base+0x11ac>
   189fc:	ldr	r0, [r4, #12]
   18a00:	bl	180b4 <build_ast@@Base+0x11ac>
   18a04:	ldr	r5, [pc, #248]	; 18b04 <build_ast@@Base+0x1bfc>
   18a08:	add	r4, r4, #16
   18a0c:	add	r6, r8, #12
   18a10:	b	18a20 <build_ast@@Base+0x1b18>
   18a14:	add	r5, r5, #131072	; 0x20000
   18a18:	cmp	r5, r9
   18a1c:	beq	18a70 <build_ast@@Base+0x1b68>
   18a20:	ldr	r3, [r6, #4]!
   18a24:	cmp	r3, #0
   18a28:	beq	18a14 <build_ast@@Base+0x1b0c>
   18a2c:	ldr	fp, [r4]
   18a30:	mov	r0, r5
   18a34:	sub	sl, fp, #1
   18a38:	lsl	r1, fp, #1
   18a3c:	bl	180ec <build_ast@@Base+0x11e4>
   18a40:	cmp	fp, #0
   18a44:	ldr	fp, [r4, #4]
   18a48:	beq	18a60 <build_ast@@Base+0x1b58>
   18a4c:	sub	sl, sl, #1
   18a50:	ldrd	r0, [fp], #8
   18a54:	bl	180cc <build_ast@@Base+0x11c4>
   18a58:	cmn	sl, #1
   18a5c:	bne	18a4c <build_ast@@Base+0x1b44>
   18a60:	add	r5, r5, #131072	; 0x20000
   18a64:	cmp	r5, r9
   18a68:	add	r4, r4, #8
   18a6c:	bne	18a20 <build_ast@@Base+0x1b18>
   18a70:	ldr	r3, [sp, #8]
   18a74:	cmp	r3, #0
   18a78:	beq	189a8 <build_ast@@Base+0x1aa0>
   18a7c:	ldr	r4, [sp, #12]
   18a80:	mov	r2, #9
   18a84:	mov	r0, r8
   18a88:	ldr	r1, [r4, #4]
   18a8c:	bl	172d4 <build_ast@@Base+0x3cc>
   18a90:	ldr	r3, [r8, #52]	; 0x34
   18a94:	add	r7, r7, #1
   18a98:	cmp	r3, r7
   18a9c:	str	r0, [r4, #4]
   18aa0:	bne	189b8 <build_ast@@Base+0x1ab0>
   18aa4:	mov	r0, #0
   18aa8:	add	sp, sp, #20
   18aac:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   18ab0:	b	180b4 <build_ast@@Base+0x11ac>
   18ab4:	mov	r1, #3
   18ab8:	mov	r0, #16777216	; 0x1000000
   18abc:	bl	180ec <build_ast@@Base+0x11e4>
   18ac0:	mov	r3, #0
   18ac4:	str	r3, [sp, #8]
   18ac8:	b	189ec <build_ast@@Base+0x1ae4>
   18acc:	ldr	r1, [pc, #52]	; 18b08 <build_ast@@Base+0x1c00>
   18ad0:	ldr	r0, [pc, #52]	; 18b0c <build_ast@@Base+0x1c04>
   18ad4:	bl	180ec <build_ast@@Base+0x11e4>
   18ad8:	ldr	r0, [r8, #8]
   18adc:	bl	180b4 <build_ast@@Base+0x11ac>
   18ae0:	cmp	r4, #0
   18ae4:	beq	18908 <build_ast@@Base+0x1a00>
   18ae8:	mov	r0, r4
   18aec:	bl	1888c <build_ast@@Base+0x1984>
   18af0:	b	18908 <build_ast@@Base+0x1a00>
   18af4:	andeq	r2, r1, r4, asr lr
   18af8:	andeq	r2, r1, r4, lsl #28
   18afc:			; <UNDEFINED> instruction: 0x01b30000
   18b00:	strdeq	r2, [r1], -r4
   18b04:			; <UNDEFINED> instruction: 0x01a10000
   18b08:	teqmi	r8, sl, lsr #6
   18b0c:	strbvs	r6, [r3, -r1, ror #8]!

00018b10 <__gcov_sort_n_vals@@Base>:
   18b10:	cmp	r1, #2
   18b14:	bxle	lr
   18b18:	sub	r1, r1, #3
   18b1c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   18b20:	add	r2, r0, #8
   18b24:	sub	sp, sp, #20
   18b28:	mov	r6, r0
   18b2c:	bic	r7, r1, #1
   18b30:	mvn	r8, #15
   18b34:	mov	lr, #0
   18b38:	ldrd	r0, [r2]
   18b3c:	ldrd	r4, [r2, #16]
   18b40:	ldrd	sl, [r2, #8]
   18b44:	add	r9, r2, #16
   18b48:	cmp	r0, r4
   18b4c:	sbcs	r3, r1, r5
   18b50:	mov	ip, r9
   18b54:	sub	r1, r6, r8
   18b58:	strd	sl, [sp]
   18b5c:	mov	r3, lr
   18b60:	bge	18bc8 <__gcov_sort_n_vals@@Base+0xb8>
   18b64:	add	sl, r8, #16
   18b68:	mvn	fp, #1
   18b6c:	add	sl, r2, sl
   18b70:	orr	fp, lr, fp
   18b74:	str	r7, [sp, #8]
   18b78:	str	r6, [sp, #12]
   18b7c:	b	18b94 <__gcov_sort_n_vals@@Base+0x84>
   18b80:	ldrd	r6, [ip, #-16]
   18b84:	sub	r2, r2, #16
   18b88:	cmp	r6, r4
   18b8c:	sbcs	r1, r7, r5
   18b90:	bge	18bf0 <__gcov_sort_n_vals@@Base+0xe0>
   18b94:	ldrd	r6, [r2, #-8]
   18b98:	lsl	r1, r3, #3
   18b9c:	mov	r0, r3
   18ba0:	strd	r6, [r2, #8]
   18ba4:	ldrd	r6, [sl, r1]
   18ba8:	sub	r3, r3, #2
   18bac:	cmp	r3, fp
   18bb0:	strd	r6, [r2, #16]
   18bb4:	mov	ip, r2
   18bb8:	bne	18b80 <__gcov_sort_n_vals@@Base+0x70>
   18bbc:	ldr	r6, [sp, #12]
   18bc0:	ldr	r7, [sp, #8]
   18bc4:	add	r1, r6, r1
   18bc8:	ldrd	r2, [sp]
   18bcc:	cmp	lr, r7
   18bd0:	sub	r8, r8, #16
   18bd4:	strd	r2, [r1]
   18bd8:	add	lr, lr, #2
   18bdc:	strd	r4, [ip]
   18be0:	mov	r2, r9
   18be4:	bne	18b38 <__gcov_sort_n_vals@@Base+0x28>
   18be8:	add	sp, sp, #20
   18bec:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   18bf0:	ldr	r6, [sp, #12]
   18bf4:	ldr	r7, [sp, #8]
   18bf8:	add	r1, r6, r0, lsl #3
   18bfc:	b	18bc8 <__gcov_sort_n_vals@@Base+0xb8>
   18c00:	push	{r4, r5, r6, lr}
   18c04:	ldr	r4, [pc, #76]	; 18c58 <__gcov_sort_n_vals@@Base+0x148>
   18c08:	smull	r2, r3, r4, r0
   18c0c:	asr	r4, r0, #31
   18c10:	rsb	r4, r4, r3, asr #1
   18c14:	add	r4, r4, r4, lsl #3
   18c18:	subs	r4, r0, r4
   18c1c:	bne	18c54 <__gcov_sort_n_vals@@Base+0x144>
   18c20:	cmp	r0, #0
   18c24:	mov	r6, r0
   18c28:	ldr	r5, [r1]
   18c2c:	pople	{r4, r5, r6, pc}
   18c30:	add	r5, r5, #8
   18c34:	mov	r0, r5
   18c38:	add	r4, r4, #9
   18c3c:	mov	r1, #8
   18c40:	bl	18b10 <__gcov_sort_n_vals@@Base>
   18c44:	cmp	r6, r4
   18c48:	add	r5, r5, #72	; 0x48
   18c4c:	bgt	18c34 <__gcov_sort_n_vals@@Base+0x124>
   18c50:	pop	{r4, r5, r6, pc}
   18c54:	bl	119ac <abort@plt>
   18c58:	stmiacc	r3!, {r0, r3, r4, r5, r9, sl, fp, pc}^
   18c5c:	ldr	r3, [r0, #48]	; 0x30
   18c60:	cmp	r3, #0
   18c64:	bxeq	lr
   18c68:	push	{r4, r5, r6, lr}
   18c6c:	ldr	lr, [r0, #52]	; 0x34
   18c70:	cmp	lr, #0
   18c74:	popeq	{r4, r5, r6, pc}
   18c78:	mov	r5, r0
   18c7c:	mov	r4, #0
   18c80:	add	r6, r0, #12
   18c84:	ldr	r1, [r5, #56]	; 0x38
   18c88:	mov	r2, r6
   18c8c:	mov	r3, #0
   18c90:	ldr	r1, [r1, r4, lsl #2]
   18c94:	add	r1, r1, #16
   18c98:	ldr	ip, [r2, #4]!
   18c9c:	cmp	ip, #0
   18ca0:	beq	18cb0 <__gcov_sort_n_vals@@Base+0x1a0>
   18ca4:	cmp	r3, #8
   18ca8:	beq	18ccc <__gcov_sort_n_vals@@Base+0x1bc>
   18cac:	add	r1, r1, #8
   18cb0:	add	r3, r3, #1
   18cb4:	cmp	r3, #9
   18cb8:	bne	18c98 <__gcov_sort_n_vals@@Base+0x188>
   18cbc:	add	r4, r4, #1
   18cc0:	cmp	lr, r4
   18cc4:	bne	18c84 <__gcov_sort_n_vals@@Base+0x174>
   18cc8:	pop	{r4, r5, r6, pc}
   18ccc:	ldr	r0, [r1], #4
   18cd0:	bl	18c00 <__gcov_sort_n_vals@@Base+0xf0>
   18cd4:	ldr	lr, [r5, #52]	; 0x34
   18cd8:	b	18cbc <__gcov_sort_n_vals@@Base+0x1ac>
   18cdc:	push	{r4, r5, r6, r7, r8, r9, lr}
   18ce0:	sub	sp, sp, #6080	; 0x17c0
   18ce4:	ldr	ip, [pc, #396]	; 18e78 <__gcov_sort_n_vals@@Base+0x368>
   18ce8:	sub	sp, sp, #36	; 0x24
   18cec:	add	ip, pc, ip
   18cf0:	add	r5, sp, #2016	; 0x7e0
   18cf4:	mov	r4, r0
   18cf8:	mov	r6, r1
   18cfc:	mov	r1, #0
   18d00:	str	r1, [ip, #4]
   18d04:	str	r1, [ip]
   18d08:	mov	r8, r2
   18d0c:	mov	r7, r3
   18d10:	str	r1, [r5, #-2000]	; 0xfffff830
   18d14:	str	r1, [r5, #-1996]	; 0xfffff834
   18d18:	bl	18c5c <__gcov_sort_n_vals@@Base+0x14c>
   18d1c:	mov	r1, r6
   18d20:	ldr	r0, [r4, #12]
   18d24:	bl	17f2c <build_ast@@Base+0x1024>
   18d28:	cmn	r0, #1
   18d2c:	beq	18da8 <__gcov_sort_n_vals@@Base+0x298>
   18d30:	bl	18214 <build_ast@@Base+0x130c>
   18d34:	cmp	r0, #0
   18d38:	beq	18db4 <__gcov_sort_n_vals@@Base+0x2a4>
   18d3c:	ldr	r2, [pc, #312]	; 18e7c <__gcov_sort_n_vals@@Base+0x36c>
   18d40:	ldr	r1, [r6]
   18d44:	cmp	r0, r2
   18d48:	beq	18e0c <__gcov_sort_n_vals@@Base+0x2fc>
   18d4c:	ldr	r0, [pc, #300]	; 18e80 <__gcov_sort_n_vals@@Base+0x370>
   18d50:	add	r0, pc, r0
   18d54:	bl	172a0 <build_ast@@Base+0x398>
   18d58:	ldr	r5, [pc, #292]	; 18e84 <__gcov_sort_n_vals@@Base+0x374>
   18d5c:	add	r5, pc, r5
   18d60:	ldr	r1, [r5, #4]
   18d64:	cmp	r1, #0
   18d68:	beq	18d88 <__gcov_sort_n_vals@@Base+0x278>
   18d6c:	mov	r2, #9
   18d70:	mov	r0, r4
   18d74:	bl	172d4 <build_ast@@Base+0x3cc>
   18d78:	cmp	r0, #0
   18d7c:	mov	r1, r0
   18d80:	str	r0, [r5, #4]
   18d84:	bne	18d6c <__gcov_sort_n_vals@@Base+0x25c>
   18d88:	bl	18044 <build_ast@@Base+0x113c>
   18d8c:	cmp	r0, #0
   18d90:	beq	18da8 <__gcov_sort_n_vals@@Base+0x298>
   18d94:	blt	18e6c <__gcov_sort_n_vals@@Base+0x35c>
   18d98:	ldr	r0, [pc, #232]	; 18e88 <__gcov_sort_n_vals@@Base+0x378>
   18d9c:	add	r0, pc, r0
   18da0:	ldr	r1, [r6]
   18da4:	bl	172a0 <build_ast@@Base+0x398>
   18da8:	add	sp, sp, #6080	; 0x17c0
   18dac:	add	sp, sp, #36	; 0x24
   18db0:	pop	{r4, r5, r6, r7, r8, r9, pc}
   18db4:	bl	17de4 <build_ast@@Base+0xedc>
   18db8:	ldr	r1, [r5, #-2000]	; 0xfffff830
   18dbc:	add	r9, sp, #24
   18dc0:	cmp	r1, #0
   18dc4:	beq	18e54 <__gcov_sort_n_vals@@Base+0x344>
   18dc8:	add	r3, sp, #6144	; 0x1800
   18dcc:	str	r7, [sp, #4]
   18dd0:	ldr	r3, [r3]
   18dd4:	mov	r1, r8
   18dd8:	str	r3, [sp]
   18ddc:	add	r2, r4, #16
   18de0:	mov	r3, r9
   18de4:	ldr	r0, [r6]
   18de8:	bl	17c90 <build_ast@@Base+0xd88>
   18dec:	cmn	r0, #1
   18df0:	beq	18d58 <__gcov_sort_n_vals@@Base+0x248>
   18df4:	mov	r1, r9
   18df8:	ldr	r3, [r5, #-2000]	; 0xfffff830
   18dfc:	ldr	r2, [r5, #-1996]	; 0xfffff834
   18e00:	mov	r0, r4
   18e04:	bl	188e4 <build_ast@@Base+0x19dc>
   18e08:	b	18d58 <__gcov_sort_n_vals@@Base+0x248>
   18e0c:	add	ip, sp, #20
   18e10:	add	r3, sp, #16
   18e14:	str	r7, [sp, #8]
   18e18:	stm	sp, {r3, ip}
   18e1c:	add	r3, sp, #6144	; 0x1800
   18e20:	add	r9, sp, #24
   18e24:	ldr	r3, [r3]
   18e28:	mov	r0, r1
   18e2c:	mov	r2, r9
   18e30:	add	r3, r3, #8
   18e34:	mov	r1, r4
   18e38:	bl	18578 <build_ast@@Base+0x1670>
   18e3c:	cmn	r0, #1
   18e40:	beq	18d58 <__gcov_sort_n_vals@@Base+0x248>
   18e44:	bl	17de4 <build_ast@@Base+0xedc>
   18e48:	ldr	r1, [r5, #-2000]	; 0xfffff830
   18e4c:	cmp	r1, #0
   18e50:	bne	18dc8 <__gcov_sort_n_vals@@Base+0x2b8>
   18e54:	ldr	r2, [pc, #48]	; 18e8c <__gcov_sort_n_vals@@Base+0x37c>
   18e58:	mov	r0, r9
   18e5c:	bl	11934 <memset@plt>
   18e60:	ldr	r3, [r5, #-1996]	; 0xfffff834
   18e64:	str	r3, [r5, #-2000]	; 0xfffff830
   18e68:	b	18dc8 <__gcov_sort_n_vals@@Base+0x2b8>
   18e6c:	ldr	r0, [pc, #28]	; 18e90 <__gcov_sort_n_vals@@Base+0x380>
   18e70:	add	r0, pc, r0
   18e74:	b	18da0 <__gcov_sort_n_vals@@Base+0x290>
   18e78:	andeq	r2, r1, ip, ror sl
   18e7c:	strbvs	r6, [r3, -r1, ror #8]!
   18e80:	andeq	r1, r0, r0, ror r0
   18e84:	andeq	r2, r1, ip, lsl #20
   18e88:	andeq	r1, r0, r8
   18e8c:	andeq	r1, r0, r8, asr #15
   18e90:	andeq	r0, r0, r4, lsl pc
   18e94:	push	{r4, r5, r6, r7, r8, lr}
   18e98:	sub	sp, sp, #6080	; 0x17c0
   18e9c:	sub	sp, sp, #32
   18ea0:	add	r6, sp, #24
   18ea4:	add	r2, sp, #12
   18ea8:	mov	r8, r1
   18eac:	mov	r1, r6
   18eb0:	mov	r4, r0
   18eb4:	bl	174ec <build_ast@@Base+0x5e4>
   18eb8:	add	r5, sp, #8
   18ebc:	mov	r7, r0
   18ec0:	mov	r0, r5
   18ec4:	bl	17680 <build_ast@@Base+0x778>
   18ec8:	cmp	r4, #0
   18ecc:	beq	18ef4 <__gcov_sort_n_vals@@Base+0x3e4>
   18ed0:	mov	r0, r4
   18ed4:	str	r6, [sp]
   18ed8:	mov	r3, r7
   18edc:	mov	r2, r8
   18ee0:	mov	r1, r5
   18ee4:	bl	18cdc <__gcov_sort_n_vals@@Base+0x1cc>
   18ee8:	ldr	r4, [r4, #4]
   18eec:	cmp	r4, #0
   18ef0:	bne	18ed0 <__gcov_sort_n_vals@@Base+0x3c0>
   18ef4:	ldr	r0, [sp, #8]
   18ef8:	bl	1185c <free@plt>
   18efc:	add	sp, sp, #6080	; 0x17c0
   18f00:	add	sp, sp, #32
   18f04:	pop	{r4, r5, r6, r7, r8, pc}
   18f08:	ldrb	r1, [r0, #4]
   18f0c:	tst	r1, #1
   18f10:	bxne	lr
   18f14:	push	{r4, lr}
   18f18:	lsr	r1, r1, #1
   18f1c:	mov	r4, r0
   18f20:	and	r1, r1, #1
   18f24:	ldr	r0, [r0]
   18f28:	bl	18e94 <__gcov_sort_n_vals@@Base+0x384>
   18f2c:	ldrb	r3, [r4, #4]
   18f30:	bic	r3, r3, #3
   18f34:	orr	r3, r3, #3
   18f38:	strb	r3, [r4, #4]
   18f3c:	pop	{r4, pc}
   18f40:	push	{r4, r5, r6, lr}
   18f44:	ldr	r4, [pc, #84]	; 18fa0 <__gcov_sort_n_vals@@Base+0x490>
   18f48:	ldr	r5, [pc, #84]	; 18fa4 <__gcov_sort_n_vals@@Base+0x494>
   18f4c:	add	r4, pc, r4
   18f50:	mov	r0, r4
   18f54:	bl	18f08 <__gcov_sort_n_vals@@Base+0x3f8>
   18f58:	ldr	r3, [r4, #8]
   18f5c:	add	r5, pc, r5
   18f60:	cmp	r3, #0
   18f64:	ldrne	r2, [r4, #12]
   18f68:	strne	r2, [r3, #12]
   18f6c:	ldr	r2, [pc, #52]	; 18fa8 <__gcov_sort_n_vals@@Base+0x498>
   18f70:	add	r2, pc, r2
   18f74:	ldr	r2, [r2, #12]
   18f78:	cmp	r2, #0
   18f7c:	strne	r3, [r2, #8]
   18f80:	beq	18f8c <__gcov_sort_n_vals@@Base+0x47c>
   18f84:	pop	{r4, r5, r6, lr}
   18f88:	b	17048 <build_ast@@Base+0x140>
   18f8c:	ldr	r2, [pc, #24]	; 18fac <__gcov_sort_n_vals@@Base+0x49c>
   18f90:	ldr	r2, [r5, r2]
   18f94:	pop	{r4, r5, r6, lr}
   18f98:	str	r3, [r2, #4]
   18f9c:	b	17048 <build_ast@@Base+0x140>
   18fa0:	andeq	r2, r1, r8, lsl #23
   18fa4:	muleq	r1, ip, r0
   18fa8:	andeq	r2, r1, r4, ror #22
   18fac:	andeq	r0, r0, r4, lsr #1
   18fb0:	ldr	r1, [r0]
   18fb4:	push	{r4, r5, r6, lr}
   18fb8:	cmp	r1, #0
   18fbc:	ldr	r5, [pc, #156]	; 19060 <__gcov_sort_n_vals@@Base+0x550>
   18fc0:	add	r5, pc, r5
   18fc4:	popeq	{r4, r5, r6, pc}
   18fc8:	ldr	r3, [r0, #52]	; 0x34
   18fcc:	cmp	r3, #0
   18fd0:	popeq	{r4, r5, r6, pc}
   18fd4:	mov	r4, r0
   18fd8:	mov	r2, #0
   18fdc:	add	r0, r0, #12
   18fe0:	bl	17c30 <build_ast@@Base+0xd28>
   18fe4:	cmp	r0, #0
   18fe8:	popeq	{r4, r5, r6, pc}
   18fec:	ldr	r6, [pc, #112]	; 19064 <__gcov_sort_n_vals@@Base+0x554>
   18ff0:	add	r6, pc, r6
   18ff4:	ldr	r2, [r6]
   18ff8:	cmp	r2, #0
   18ffc:	beq	19014 <__gcov_sort_n_vals@@Base+0x504>
   19000:	ldr	r3, [pc, #96]	; 19068 <__gcov_sort_n_vals@@Base+0x558>
   19004:	str	r2, [r4, #4]
   19008:	add	r3, pc, r3
   1900c:	str	r4, [r3]
   19010:	pop	{r4, r5, r6, pc}
   19014:	ldr	r3, [pc, #80]	; 1906c <__gcov_sort_n_vals@@Base+0x55c>
   19018:	ldr	r2, [pc, #80]	; 19070 <__gcov_sort_n_vals@@Base+0x560>
   1901c:	mov	r0, #12
   19020:	ldr	r5, [r5, r3]
   19024:	add	r2, pc, r2
   19028:	ldr	r1, [r5]
   1902c:	bl	17c30 <build_ast@@Base+0xd28>
   19030:	cmp	r0, #0
   19034:	ldreq	r2, [r6]
   19038:	beq	19000 <__gcov_sort_n_vals@@Base+0x4f0>
   1903c:	ldr	r3, [r5, #4]
   19040:	cmp	r3, #0
   19044:	str	r3, [r6, #8]
   19048:	strne	r6, [r3, #12]
   1904c:	ldr	r3, [pc, #32]	; 19074 <__gcov_sort_n_vals@@Base+0x564>
   19050:	add	r3, pc, r3
   19054:	str	r3, [r5, #4]
   19058:	ldr	r2, [r3]
   1905c:	b	19000 <__gcov_sort_n_vals@@Base+0x4f0>
   19060:	andeq	r1, r1, r8, lsr r0
   19064:	andeq	r2, r1, r4, ror #21
   19068:	andeq	r2, r1, ip, asr #21
   1906c:	andeq	r0, r0, r4, lsr #1
   19070:	andeq	r0, r0, r0, asr #27
   19074:	andeq	r2, r1, r4, lsl #21
   19078:	cmp	r3, #0
   1907c:	cmpeq	r2, #0
   19080:	bne	190a4 <__gcov_sort_n_vals@@Base+0x594>
   19084:	cmp	r1, #0
   19088:	movlt	r1, #-2147483648	; 0x80000000
   1908c:	movlt	r0, #0
   19090:	blt	190a0 <__gcov_sort_n_vals@@Base+0x590>
   19094:	cmpeq	r0, #0
   19098:	mvnne	r1, #-2147483648	; 0x80000000
   1909c:	mvnne	r0, #0
   190a0:	b	1914c <__gcov_sort_n_vals@@Base+0x63c>
   190a4:	sub	sp, sp, #8
   190a8:	push	{sp, lr}
   190ac:	cmp	r1, #0
   190b0:	blt	190d0 <__gcov_sort_n_vals@@Base+0x5c0>
   190b4:	cmp	r3, #0
   190b8:	blt	19104 <__gcov_sort_n_vals@@Base+0x5f4>
   190bc:	bl	191a0 <__gcov_sort_n_vals@@Base+0x690>
   190c0:	ldr	lr, [sp, #4]
   190c4:	add	sp, sp, #8
   190c8:	pop	{r2, r3}
   190cc:	bx	lr
   190d0:	rsbs	r0, r0, #0
   190d4:	sbc	r1, r1, r1, lsl #1
   190d8:	cmp	r3, #0
   190dc:	blt	19128 <__gcov_sort_n_vals@@Base+0x618>
   190e0:	bl	191a0 <__gcov_sort_n_vals@@Base+0x690>
   190e4:	ldr	lr, [sp, #4]
   190e8:	add	sp, sp, #8
   190ec:	pop	{r2, r3}
   190f0:	rsbs	r0, r0, #0
   190f4:	sbc	r1, r1, r1, lsl #1
   190f8:	rsbs	r2, r2, #0
   190fc:	sbc	r3, r3, r3, lsl #1
   19100:	bx	lr
   19104:	rsbs	r2, r2, #0
   19108:	sbc	r3, r3, r3, lsl #1
   1910c:	bl	191a0 <__gcov_sort_n_vals@@Base+0x690>
   19110:	ldr	lr, [sp, #4]
   19114:	add	sp, sp, #8
   19118:	pop	{r2, r3}
   1911c:	rsbs	r0, r0, #0
   19120:	sbc	r1, r1, r1, lsl #1
   19124:	bx	lr
   19128:	rsbs	r2, r2, #0
   1912c:	sbc	r3, r3, r3, lsl #1
   19130:	bl	191a0 <__gcov_sort_n_vals@@Base+0x690>
   19134:	ldr	lr, [sp, #4]
   19138:	add	sp, sp, #8
   1913c:	pop	{r2, r3}
   19140:	rsbs	r2, r2, #0
   19144:	sbc	r3, r3, r3, lsl #1
   19148:	bx	lr
   1914c:	push	{r1, lr}
   19150:	mov	r0, #8
   19154:	bl	1182c <raise@plt>
   19158:	pop	{r1, pc}
   1915c:	ldr	r3, [pc, #48]	; 19194 <__gcov_sort_n_vals@@Base+0x684>
   19160:	ldr	r2, [pc, #48]	; 19198 <__gcov_sort_n_vals@@Base+0x688>
   19164:	and	r3, r3, r0, lsr #1
   19168:	sub	r0, r0, r3
   1916c:	and	r3, r0, r2
   19170:	and	r0, r2, r0, lsr #2
   19174:	add	r3, r3, r0
   19178:	ldr	r0, [pc, #28]	; 1919c <__gcov_sort_n_vals@@Base+0x68c>
   1917c:	add	r3, r3, r3, lsr #4
   19180:	and	r0, r0, r3
   19184:	add	r0, r0, r0, lsl #8
   19188:	add	r0, r0, r0, lsl #16
   1918c:	lsr	r0, r0, #24
   19190:	bx	lr
   19194:	ldrbpl	r5, [r5, #-1365]	; 0xfffffaab
   19198:	teqcc	r3, #-872415232	; 0xcc000000
   1919c:	svceq	0x000f0f0f
   191a0:	cmp	r1, r3
   191a4:	cmpeq	r0, r2
   191a8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   191ac:	mov	r4, r0
   191b0:	movcc	r0, #0
   191b4:	mov	r5, r1
   191b8:	ldr	lr, [sp, #36]	; 0x24
   191bc:	movcc	r1, r0
   191c0:	bcc	192bc <__gcov_sort_n_vals@@Base+0x7ac>
   191c4:	cmp	r3, #0
   191c8:	clzeq	ip, r2
   191cc:	clzne	ip, r3
   191d0:	addeq	ip, ip, #32
   191d4:	cmp	r5, #0
   191d8:	clzeq	r1, r4
   191dc:	addeq	r1, r1, #32
   191e0:	clzne	r1, r5
   191e4:	sub	ip, ip, r1
   191e8:	sub	sl, ip, #32
   191ec:	lsl	r9, r3, ip
   191f0:	rsb	fp, ip, #32
   191f4:	orr	r9, r9, r2, lsl sl
   191f8:	orr	r9, r9, r2, lsr fp
   191fc:	lsl	r8, r2, ip
   19200:	cmp	r5, r9
   19204:	cmpeq	r4, r8
   19208:	movcc	r0, #0
   1920c:	movcc	r1, r0
   19210:	bcc	1922c <__gcov_sort_n_vals@@Base+0x71c>
   19214:	mov	r0, #1
   19218:	subs	r4, r4, r8
   1921c:	lsl	r1, r0, sl
   19220:	orr	r1, r1, r0, lsr fp
   19224:	lsl	r0, r0, ip
   19228:	sbc	r5, r5, r9
   1922c:	cmp	ip, #0
   19230:	beq	192bc <__gcov_sort_n_vals@@Base+0x7ac>
   19234:	lsr	r6, r8, #1
   19238:	orr	r6, r6, r9, lsl #31
   1923c:	lsr	r7, r9, #1
   19240:	mov	r2, ip
   19244:	b	19268 <__gcov_sort_n_vals@@Base+0x758>
   19248:	subs	r3, r4, r6
   1924c:	sbc	r8, r5, r7
   19250:	adds	r3, r3, r3
   19254:	adc	r8, r8, r8
   19258:	adds	r4, r3, #1
   1925c:	adc	r5, r8, #0
   19260:	subs	r2, r2, #1
   19264:	beq	19284 <__gcov_sort_n_vals@@Base+0x774>
   19268:	cmp	r5, r7
   1926c:	cmpeq	r4, r6
   19270:	bcs	19248 <__gcov_sort_n_vals@@Base+0x738>
   19274:	adds	r4, r4, r4
   19278:	adc	r5, r5, r5
   1927c:	subs	r2, r2, #1
   19280:	bne	19268 <__gcov_sort_n_vals@@Base+0x758>
   19284:	lsr	r3, r4, ip
   19288:	orr	r3, r3, r5, lsl fp
   1928c:	lsr	r2, r5, ip
   19290:	orr	r3, r3, r5, lsr sl
   19294:	adds	r0, r0, r4
   19298:	mov	r4, r3
   1929c:	lsl	r3, r2, ip
   192a0:	orr	r3, r3, r4, lsl sl
   192a4:	lsl	ip, r4, ip
   192a8:	orr	r3, r3, r4, lsr fp
   192ac:	adc	r1, r1, r5
   192b0:	subs	r0, r0, ip
   192b4:	mov	r5, r2
   192b8:	sbc	r1, r1, r3
   192bc:	cmp	lr, #0
   192c0:	strdne	r4, [lr]
   192c4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}

000192c8 <__libc_csu_init@@Base>:
   192c8:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   192cc:	mov	r7, r0
   192d0:	ldr	r6, [pc, #72]	; 19320 <__libc_csu_init@@Base+0x58>
   192d4:	ldr	r5, [pc, #72]	; 19324 <__libc_csu_init@@Base+0x5c>
   192d8:	add	r6, pc, r6
   192dc:	add	r5, pc, r5
   192e0:	sub	r6, r6, r5
   192e4:	mov	r8, r1
   192e8:	mov	r9, r2
   192ec:	bl	11800 <fdopen@plt-0x20>
   192f0:	asrs	r6, r6, #2
   192f4:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   192f8:	mov	r4, #0
   192fc:	add	r4, r4, #1
   19300:	ldr	r3, [r5], #4
   19304:	mov	r2, r9
   19308:	mov	r1, r8
   1930c:	mov	r0, r7
   19310:	blx	r3
   19314:	cmp	r6, r4
   19318:	bne	192fc <__libc_csu_init@@Base+0x34>
   1931c:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   19320:	andeq	r0, r1, r4, lsr #24
   19324:	andeq	r0, r1, ip, lsl #24

00019328 <__libc_csu_fini@@Base>:
   19328:	bx	lr

Disassembly of section .fini:

0001932c <.fini>:
   1932c:	push	{r3, lr}
   19330:	pop	{r3, pc}
