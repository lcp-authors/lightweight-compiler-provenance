
../repos/coreutils/src/base32:     file format elf32-littlearm


Disassembly of section .init:

00010cb0 <.init>:
   10cb0:	push	{r3, lr}
   10cb4:	bl	10f94 <__assert_fail@plt+0x48>
   10cb8:	pop	{r3, pc}

Disassembly of section .plt:

00010cbc <calloc@plt-0x14>:
   10cbc:	push	{lr}		; (str lr, [sp, #-4]!)
   10cc0:	ldr	lr, [pc, #4]	; 10ccc <calloc@plt-0x4>
   10cc4:	add	lr, pc, lr
   10cc8:	ldr	pc, [lr, #8]!
   10ccc:	andeq	r9, r1, r4, lsr r3

00010cd0 <calloc@plt>:
   10cd0:	add	ip, pc, #0, 12
   10cd4:	add	ip, ip, #102400	; 0x19000
   10cd8:	ldr	pc, [ip, #820]!	; 0x334

00010cdc <fputs_unlocked@plt>:
   10cdc:	add	ip, pc, #0, 12
   10ce0:	add	ip, ip, #102400	; 0x19000
   10ce4:	ldr	pc, [ip, #812]!	; 0x32c

00010ce8 <raise@plt>:
   10ce8:	add	ip, pc, #0, 12
   10cec:	add	ip, ip, #102400	; 0x19000
   10cf0:	ldr	pc, [ip, #804]!	; 0x324

00010cf4 <strcmp@plt>:
   10cf4:	add	ip, pc, #0, 12
   10cf8:	add	ip, ip, #102400	; 0x19000
   10cfc:	ldr	pc, [ip, #796]!	; 0x31c

00010d00 <posix_fadvise64@plt>:
   10d00:	add	ip, pc, #0, 12
   10d04:	add	ip, ip, #102400	; 0x19000
   10d08:	ldr	pc, [ip, #788]!	; 0x314

00010d0c <printf@plt>:
   10d0c:	add	ip, pc, #0, 12
   10d10:	add	ip, ip, #102400	; 0x19000
   10d14:	ldr	pc, [ip, #780]!	; 0x30c

00010d18 <fflush@plt>:
   10d18:	add	ip, pc, #0, 12
   10d1c:	add	ip, ip, #102400	; 0x19000
   10d20:	ldr	pc, [ip, #772]!	; 0x304

00010d24 <memmove@plt>:
   10d24:	add	ip, pc, #0, 12
   10d28:	add	ip, ip, #102400	; 0x19000
   10d2c:	ldr	pc, [ip, #764]!	; 0x2fc

00010d30 <free@plt>:
   10d30:	add	ip, pc, #0, 12
   10d34:	add	ip, ip, #102400	; 0x19000
   10d38:	ldr	pc, [ip, #756]!	; 0x2f4

00010d3c <_exit@plt>:
   10d3c:	add	ip, pc, #0, 12
   10d40:	add	ip, ip, #102400	; 0x19000
   10d44:	ldr	pc, [ip, #748]!	; 0x2ec

00010d48 <memcpy@plt>:
   10d48:	add	ip, pc, #0, 12
   10d4c:	add	ip, ip, #102400	; 0x19000
   10d50:	ldr	pc, [ip, #740]!	; 0x2e4

00010d54 <mbsinit@plt>:
   10d54:	add	ip, pc, #0, 12
   10d58:	add	ip, ip, #102400	; 0x19000
   10d5c:	ldr	pc, [ip, #732]!	; 0x2dc

00010d60 <fwrite_unlocked@plt>:
   10d60:	add	ip, pc, #0, 12
   10d64:	add	ip, ip, #102400	; 0x19000
   10d68:	ldr	pc, [ip, #724]!	; 0x2d4

00010d6c <memcmp@plt>:
   10d6c:	add	ip, pc, #0, 12
   10d70:	add	ip, ip, #102400	; 0x19000
   10d74:	ldr	pc, [ip, #716]!	; 0x2cc

00010d78 <fputc_unlocked@plt>:
   10d78:	add	ip, pc, #0, 12
   10d7c:	add	ip, ip, #102400	; 0x19000
   10d80:	ldr	pc, [ip, #708]!	; 0x2c4

00010d84 <realloc@plt>:
   10d84:	add	ip, pc, #0, 12
   10d88:	add	ip, ip, #102400	; 0x19000
   10d8c:	ldr	pc, [ip, #700]!	; 0x2bc

00010d90 <textdomain@plt>:
   10d90:	add	ip, pc, #0, 12
   10d94:	add	ip, ip, #102400	; 0x19000
   10d98:	ldr	pc, [ip, #692]!	; 0x2b4

00010d9c <iswprint@plt>:
   10d9c:	add	ip, pc, #0, 12
   10da0:	add	ip, ip, #102400	; 0x19000
   10da4:	ldr	pc, [ip, #684]!	; 0x2ac

00010da8 <fwrite@plt>:
   10da8:	add	ip, pc, #0, 12
   10dac:	add	ip, ip, #102400	; 0x19000
   10db0:	ldr	pc, [ip, #676]!	; 0x2a4

00010db4 <lseek64@plt>:
   10db4:	add	ip, pc, #0, 12
   10db8:	add	ip, ip, #102400	; 0x19000
   10dbc:	ldr	pc, [ip, #668]!	; 0x29c

00010dc0 <__ctype_get_mb_cur_max@plt>:
   10dc0:	add	ip, pc, #0, 12
   10dc4:	add	ip, ip, #102400	; 0x19000
   10dc8:	ldr	pc, [ip, #660]!	; 0x294

00010dcc <__fpending@plt>:
   10dcc:	add	ip, pc, #0, 12
   10dd0:	add	ip, ip, #102400	; 0x19000
   10dd4:	ldr	pc, [ip, #652]!	; 0x28c

00010dd8 <ferror_unlocked@plt>:
   10dd8:	add	ip, pc, #0, 12
   10ddc:	add	ip, ip, #102400	; 0x19000
   10de0:	ldr	pc, [ip, #644]!	; 0x284

00010de4 <mbrtowc@plt>:
   10de4:	add	ip, pc, #0, 12
   10de8:	add	ip, ip, #102400	; 0x19000
   10dec:	ldr	pc, [ip, #636]!	; 0x27c

00010df0 <error@plt>:
   10df0:	add	ip, pc, #0, 12
   10df4:	add	ip, ip, #102400	; 0x19000
   10df8:	ldr	pc, [ip, #628]!	; 0x274

00010dfc <malloc@plt>:
   10dfc:	add	ip, pc, #0, 12
   10e00:	add	ip, ip, #102400	; 0x19000
   10e04:	ldr	pc, [ip, #620]!	; 0x26c

00010e08 <__libc_start_main@plt>:
   10e08:	add	ip, pc, #0, 12
   10e0c:	add	ip, ip, #102400	; 0x19000
   10e10:	ldr	pc, [ip, #612]!	; 0x264

00010e14 <__freading@plt>:
   10e14:	add	ip, pc, #0, 12
   10e18:	add	ip, ip, #102400	; 0x19000
   10e1c:	ldr	pc, [ip, #604]!	; 0x25c

00010e20 <__gmon_start__@plt>:
   10e20:	add	ip, pc, #0, 12
   10e24:	add	ip, ip, #102400	; 0x19000
   10e28:	ldr	pc, [ip, #596]!	; 0x254

00010e2c <getopt_long@plt>:
   10e2c:	add	ip, pc, #0, 12
   10e30:	add	ip, ip, #102400	; 0x19000
   10e34:	ldr	pc, [ip, #588]!	; 0x24c

00010e38 <__ctype_b_loc@plt>:
   10e38:	add	ip, pc, #0, 12
   10e3c:	add	ip, ip, #102400	; 0x19000
   10e40:	ldr	pc, [ip, #580]!	; 0x244

00010e44 <exit@plt>:
   10e44:	add	ip, pc, #0, 12
   10e48:	add	ip, ip, #102400	; 0x19000
   10e4c:	ldr	pc, [ip, #572]!	; 0x23c

00010e50 <gettext@plt>:
   10e50:	add	ip, pc, #0, 12
   10e54:	add	ip, ip, #102400	; 0x19000
   10e58:	ldr	pc, [ip, #564]!	; 0x234

00010e5c <strlen@plt>:
   10e5c:	add	ip, pc, #0, 12
   10e60:	add	ip, ip, #102400	; 0x19000
   10e64:	ldr	pc, [ip, #556]!	; 0x22c

00010e68 <strchr@plt>:
   10e68:	add	ip, pc, #0, 12
   10e6c:	add	ip, ip, #102400	; 0x19000
   10e70:	ldr	pc, [ip, #548]!	; 0x224

00010e74 <fprintf@plt>:
   10e74:	add	ip, pc, #0, 12
   10e78:	add	ip, ip, #102400	; 0x19000
   10e7c:	ldr	pc, [ip, #540]!	; 0x21c

00010e80 <__errno_location@plt>:
   10e80:	add	ip, pc, #0, 12
   10e84:	add	ip, ip, #102400	; 0x19000
   10e88:	ldr	pc, [ip, #532]!	; 0x214

00010e8c <__cxa_atexit@plt>:
   10e8c:	add	ip, pc, #0, 12
   10e90:	add	ip, ip, #102400	; 0x19000
   10e94:	ldr	pc, [ip, #524]!	; 0x20c

00010e98 <memset@plt>:
   10e98:	add	ip, pc, #0, 12
   10e9c:	add	ip, ip, #102400	; 0x19000
   10ea0:	ldr	pc, [ip, #516]!	; 0x204

00010ea4 <fileno@plt>:
   10ea4:	add	ip, pc, #0, 12
   10ea8:	add	ip, ip, #102400	; 0x19000
   10eac:	ldr	pc, [ip, #508]!	; 0x1fc

00010eb0 <memchr@plt>:
   10eb0:	add	ip, pc, #0, 12
   10eb4:	add	ip, ip, #102400	; 0x19000
   10eb8:	ldr	pc, [ip, #500]!	; 0x1f4

00010ebc <strtoimax@plt>:
   10ebc:	add	ip, pc, #0, 12
   10ec0:	add	ip, ip, #102400	; 0x19000
   10ec4:	ldr	pc, [ip, #492]!	; 0x1ec

00010ec8 <fclose@plt>:
   10ec8:	add	ip, pc, #0, 12
   10ecc:	add	ip, ip, #102400	; 0x19000
   10ed0:	ldr	pc, [ip, #484]!	; 0x1e4

00010ed4 <fseeko64@plt>:
   10ed4:	add	ip, pc, #0, 12
   10ed8:	add	ip, ip, #102400	; 0x19000
   10edc:	ldr	pc, [ip, #476]!	; 0x1dc

00010ee0 <setlocale@plt>:
   10ee0:	add	ip, pc, #0, 12
   10ee4:	add	ip, ip, #102400	; 0x19000
   10ee8:	ldr	pc, [ip, #468]!	; 0x1d4

00010eec <strrchr@plt>:
   10eec:	add	ip, pc, #0, 12
   10ef0:	add	ip, ip, #102400	; 0x19000
   10ef4:	ldr	pc, [ip, #460]!	; 0x1cc

00010ef8 <nl_langinfo@plt>:
   10ef8:	add	ip, pc, #0, 12
   10efc:	add	ip, ip, #102400	; 0x19000
   10f00:	ldr	pc, [ip, #452]!	; 0x1c4

00010f04 <fopen64@plt>:
   10f04:	add	ip, pc, #0, 12
   10f08:	add	ip, ip, #102400	; 0x19000
   10f0c:	ldr	pc, [ip, #444]!	; 0x1bc

00010f10 <bindtextdomain@plt>:
   10f10:	add	ip, pc, #0, 12
   10f14:	add	ip, ip, #102400	; 0x19000
   10f18:	ldr	pc, [ip, #436]!	; 0x1b4

00010f1c <fread_unlocked@plt>:
   10f1c:	add	ip, pc, #0, 12
   10f20:	add	ip, ip, #102400	; 0x19000
   10f24:	ldr	pc, [ip, #428]!	; 0x1ac

00010f28 <strncmp@plt>:
   10f28:	add	ip, pc, #0, 12
   10f2c:	add	ip, ip, #102400	; 0x19000
   10f30:	ldr	pc, [ip, #420]!	; 0x1a4

00010f34 <abort@plt>:
   10f34:	add	ip, pc, #0, 12
   10f38:	add	ip, ip, #102400	; 0x19000
   10f3c:	ldr	pc, [ip, #412]!	; 0x19c

00010f40 <feof_unlocked@plt>:
   10f40:	add	ip, pc, #0, 12
   10f44:	add	ip, ip, #102400	; 0x19000
   10f48:	ldr	pc, [ip, #404]!	; 0x194

00010f4c <__assert_fail@plt>:
   10f4c:	add	ip, pc, #0, 12
   10f50:	add	ip, ip, #102400	; 0x19000
   10f54:	ldr	pc, [ip, #396]!	; 0x18c

Disassembly of section .text:

00010f58 <.text>:
   10f58:	mov	fp, #0
   10f5c:	mov	lr, #0
   10f60:	pop	{r1}		; (ldr r1, [sp], #4)
   10f64:	mov	r2, sp
   10f68:	push	{r2}		; (str r2, [sp, #-4]!)
   10f6c:	push	{r0}		; (str r0, [sp, #-4]!)
   10f70:	ldr	ip, [pc, #16]	; 10f88 <__assert_fail@plt+0x3c>
   10f74:	push	{ip}		; (str ip, [sp, #-4]!)
   10f78:	ldr	r0, [pc, #12]	; 10f8c <__assert_fail@plt+0x40>
   10f7c:	ldr	r3, [pc, #12]	; 10f90 <__assert_fail@plt+0x44>
   10f80:	bl	10e08 <__libc_start_main@plt>
   10f84:	bl	10f34 <abort@plt>
   10f88:	andeq	r8, r1, r8, ror #30
   10f8c:	andeq	r1, r1, r4, ror fp
   10f90:	andeq	r8, r1, r8, lsl #30
   10f94:	ldr	r3, [pc, #20]	; 10fb0 <__assert_fail@plt+0x64>
   10f98:	ldr	r2, [pc, #20]	; 10fb4 <__assert_fail@plt+0x68>
   10f9c:	add	r3, pc, r3
   10fa0:	ldr	r2, [r3, r2]
   10fa4:	cmp	r2, #0
   10fa8:	bxeq	lr
   10fac:	b	10e20 <__gmon_start__@plt>
   10fb0:	andeq	r9, r1, ip, asr r0
   10fb4:	andeq	r0, r0, r4, ror #1
   10fb8:	ldr	r3, [pc, #28]	; 10fdc <__assert_fail@plt+0x90>
   10fbc:	ldr	r0, [pc, #28]	; 10fe0 <__assert_fail@plt+0x94>
   10fc0:	sub	r3, r3, r0
   10fc4:	cmp	r3, #6
   10fc8:	bxls	lr
   10fcc:	ldr	r3, [pc, #16]	; 10fe4 <__assert_fail@plt+0x98>
   10fd0:	cmp	r3, #0
   10fd4:	bxeq	lr
   10fd8:	bx	r3
   10fdc:	andeq	sl, r2, fp, lsr r1
   10fe0:	andeq	sl, r2, r8, lsr r1
   10fe4:	andeq	r0, r0, r0
   10fe8:	ldr	r1, [pc, #36]	; 11014 <__assert_fail@plt+0xc8>
   10fec:	ldr	r0, [pc, #36]	; 11018 <__assert_fail@plt+0xcc>
   10ff0:	sub	r1, r1, r0
   10ff4:	asr	r1, r1, #2
   10ff8:	add	r1, r1, r1, lsr #31
   10ffc:	asrs	r1, r1, #1
   11000:	bxeq	lr
   11004:	ldr	r3, [pc, #16]	; 1101c <__assert_fail@plt+0xd0>
   11008:	cmp	r3, #0
   1100c:	bxeq	lr
   11010:	bx	r3
   11014:	andeq	sl, r2, r8, lsr r1
   11018:	andeq	sl, r2, r8, lsr r1
   1101c:	andeq	r0, r0, r0
   11020:	push	{r4, lr}
   11024:	ldr	r4, [pc, #24]	; 11044 <__assert_fail@plt+0xf8>
   11028:	ldrb	r3, [r4]
   1102c:	cmp	r3, #0
   11030:	popne	{r4, pc}
   11034:	bl	10fb8 <__assert_fail@plt+0x6c>
   11038:	mov	r3, #1
   1103c:	strb	r3, [r4]
   11040:	pop	{r4, pc}
   11044:	andeq	sl, r2, ip, asr r1
   11048:	ldr	r0, [pc, #40]	; 11078 <__assert_fail@plt+0x12c>
   1104c:	ldr	r3, [r0]
   11050:	cmp	r3, #0
   11054:	bne	1105c <__assert_fail@plt+0x110>
   11058:	b	10fe8 <__assert_fail@plt+0x9c>
   1105c:	ldr	r3, [pc, #24]	; 1107c <__assert_fail@plt+0x130>
   11060:	cmp	r3, #0
   11064:	beq	11058 <__assert_fail@plt+0x10c>
   11068:	push	{r4, lr}
   1106c:	blx	r3
   11070:	pop	{r4, lr}
   11074:	b	10fe8 <__assert_fail@plt+0x9c>
   11078:	andeq	r9, r2, r4, lsl pc
   1107c:	andeq	r0, r0, r0
   11080:	push	{fp, lr}
   11084:	add	fp, sp, #4
   11088:	ldr	r0, [pc, #32]	; 110b0 <__assert_fail@plt+0x164>
   1108c:	bl	10e50 <gettext@plt>
   11090:	mov	r2, r0
   11094:	ldr	r3, [pc, #24]	; 110b4 <__assert_fail@plt+0x168>
   11098:	ldr	r3, [r3]
   1109c:	mov	r1, r3
   110a0:	mov	r0, r2
   110a4:	bl	10cdc <fputs_unlocked@plt>
   110a8:	nop			; (mov r0, r0)
   110ac:	pop	{fp, pc}
   110b0:	muleq	r1, r0, pc	; <UNPREDICTABLE>
   110b4:	andeq	sl, r2, r4, asr r1
   110b8:	push	{fp, lr}
   110bc:	add	fp, sp, #4
   110c0:	ldr	r0, [pc, #32]	; 110e8 <__assert_fail@plt+0x19c>
   110c4:	bl	10e50 <gettext@plt>
   110c8:	mov	r2, r0
   110cc:	ldr	r3, [pc, #24]	; 110ec <__assert_fail@plt+0x1a0>
   110d0:	ldr	r3, [r3]
   110d4:	mov	r1, r3
   110d8:	mov	r0, r2
   110dc:	bl	10cdc <fputs_unlocked@plt>
   110e0:	nop			; (mov r0, r0)
   110e4:	pop	{fp, pc}
   110e8:	andeq	r8, r1, r8, asr #31
   110ec:	andeq	sl, r2, r4, asr r1
   110f0:	push	{fp, lr}
   110f4:	add	fp, sp, #4
   110f8:	sub	sp, sp, #80	; 0x50
   110fc:	str	r0, [fp, #-80]	; 0xffffffb0
   11100:	ldr	r3, [pc, #348]	; 11264 <__assert_fail@plt+0x318>
   11104:	sub	ip, fp, #72	; 0x48
   11108:	mov	lr, r3
   1110c:	ldm	lr!, {r0, r1, r2, r3}
   11110:	stmia	ip!, {r0, r1, r2, r3}
   11114:	ldm	lr!, {r0, r1, r2, r3}
   11118:	stmia	ip!, {r0, r1, r2, r3}
   1111c:	ldm	lr!, {r0, r1, r2, r3}
   11120:	stmia	ip!, {r0, r1, r2, r3}
   11124:	ldm	lr, {r0, r1}
   11128:	stm	ip, {r0, r1}
   1112c:	ldr	r3, [fp, #-80]	; 0xffffffb0
   11130:	str	r3, [fp, #-8]
   11134:	sub	r3, fp, #72	; 0x48
   11138:	str	r3, [fp, #-12]
   1113c:	b	1114c <__assert_fail@plt+0x200>
   11140:	ldr	r3, [fp, #-12]
   11144:	add	r3, r3, #8
   11148:	str	r3, [fp, #-12]
   1114c:	ldr	r3, [fp, #-12]
   11150:	ldr	r3, [r3]
   11154:	cmp	r3, #0
   11158:	beq	1117c <__assert_fail@plt+0x230>
   1115c:	ldr	r3, [fp, #-12]
   11160:	ldr	r3, [r3]
   11164:	mov	r1, r3
   11168:	ldr	r0, [fp, #-80]	; 0xffffffb0
   1116c:	bl	10cf4 <strcmp@plt>
   11170:	mov	r3, r0
   11174:	cmp	r3, #0
   11178:	bne	11140 <__assert_fail@plt+0x1f4>
   1117c:	ldr	r3, [fp, #-12]
   11180:	ldr	r3, [r3, #4]
   11184:	cmp	r3, #0
   11188:	beq	11198 <__assert_fail@plt+0x24c>
   1118c:	ldr	r3, [fp, #-12]
   11190:	ldr	r3, [r3, #4]
   11194:	str	r3, [fp, #-8]
   11198:	ldr	r0, [pc, #200]	; 11268 <__assert_fail@plt+0x31c>
   1119c:	bl	10e50 <gettext@plt>
   111a0:	mov	r3, r0
   111a4:	ldr	r2, [pc, #192]	; 1126c <__assert_fail@plt+0x320>
   111a8:	ldr	r1, [pc, #192]	; 11270 <__assert_fail@plt+0x324>
   111ac:	mov	r0, r3
   111b0:	bl	10d0c <printf@plt>
   111b4:	mov	r1, #0
   111b8:	mov	r0, #5
   111bc:	bl	10ee0 <setlocale@plt>
   111c0:	str	r0, [fp, #-16]
   111c4:	ldr	r3, [fp, #-16]
   111c8:	cmp	r3, #0
   111cc:	beq	1120c <__assert_fail@plt+0x2c0>
   111d0:	mov	r2, #3
   111d4:	ldr	r1, [pc, #152]	; 11274 <__assert_fail@plt+0x328>
   111d8:	ldr	r0, [fp, #-16]
   111dc:	bl	10f28 <strncmp@plt>
   111e0:	mov	r3, r0
   111e4:	cmp	r3, #0
   111e8:	beq	1120c <__assert_fail@plt+0x2c0>
   111ec:	ldr	r0, [pc, #132]	; 11278 <__assert_fail@plt+0x32c>
   111f0:	bl	10e50 <gettext@plt>
   111f4:	mov	r2, r0
   111f8:	ldr	r3, [pc, #124]	; 1127c <__assert_fail@plt+0x330>
   111fc:	ldr	r3, [r3]
   11200:	mov	r1, r3
   11204:	mov	r0, r2
   11208:	bl	10cdc <fputs_unlocked@plt>
   1120c:	ldr	r0, [pc, #108]	; 11280 <__assert_fail@plt+0x334>
   11210:	bl	10e50 <gettext@plt>
   11214:	mov	r3, r0
   11218:	ldr	r2, [fp, #-80]	; 0xffffffb0
   1121c:	ldr	r1, [pc, #72]	; 1126c <__assert_fail@plt+0x320>
   11220:	mov	r0, r3
   11224:	bl	10d0c <printf@plt>
   11228:	ldr	r0, [pc, #84]	; 11284 <__assert_fail@plt+0x338>
   1122c:	bl	10e50 <gettext@plt>
   11230:	ldr	r2, [fp, #-8]
   11234:	ldr	r3, [fp, #-80]	; 0xffffffb0
   11238:	cmp	r2, r3
   1123c:	bne	11248 <__assert_fail@plt+0x2fc>
   11240:	ldr	r3, [pc, #64]	; 11288 <__assert_fail@plt+0x33c>
   11244:	b	1124c <__assert_fail@plt+0x300>
   11248:	ldr	r3, [pc, #60]	; 1128c <__assert_fail@plt+0x340>
   1124c:	mov	r2, r3
   11250:	ldr	r1, [fp, #-8]
   11254:	bl	10d0c <printf@plt>
   11258:	nop			; (mov r0, r0)
   1125c:	sub	sp, fp, #4
   11260:	pop	{fp, pc}
   11264:	andeq	r9, r1, r8, lsl #3
   11268:	andeq	r9, r1, r4, lsl r0
   1126c:	andeq	r9, r1, ip, lsr #32
   11270:	andeq	r9, r1, r4, asr r0
   11274:	andeq	r9, r1, r4, rrx
   11278:	andeq	r9, r1, r8, rrx
   1127c:	andeq	sl, r2, r4, asr r1
   11280:	strheq	r9, [r1], -r0
   11284:	andeq	r9, r1, ip, asr #1
   11288:	andeq	r9, r1, r0, lsl #2
   1128c:	andeq	r9, r1, ip, lsl #2
   11290:	push	{r4, fp, lr}
   11294:	add	fp, sp, #8
   11298:	sub	sp, sp, #12
   1129c:	str	r0, [fp, #-16]
   112a0:	ldr	r3, [fp, #-16]
   112a4:	cmp	r3, #0
   112a8:	beq	112d8 <__assert_fail@plt+0x38c>
   112ac:	ldr	r3, [pc, #240]	; 113a4 <__assert_fail@plt+0x458>
   112b0:	ldr	r4, [r3]
   112b4:	ldr	r0, [pc, #236]	; 113a8 <__assert_fail@plt+0x45c>
   112b8:	bl	10e50 <gettext@plt>
   112bc:	mov	r1, r0
   112c0:	ldr	r3, [pc, #228]	; 113ac <__assert_fail@plt+0x460>
   112c4:	ldr	r3, [r3]
   112c8:	mov	r2, r3
   112cc:	mov	r0, r4
   112d0:	bl	10e74 <fprintf@plt>
   112d4:	b	1139c <__assert_fail@plt+0x450>
   112d8:	ldr	r0, [pc, #208]	; 113b0 <__assert_fail@plt+0x464>
   112dc:	bl	10e50 <gettext@plt>
   112e0:	mov	r2, r0
   112e4:	ldr	r3, [pc, #192]	; 113ac <__assert_fail@plt+0x460>
   112e8:	ldr	r3, [r3]
   112ec:	mov	r1, r3
   112f0:	mov	r0, r2
   112f4:	bl	10d0c <printf@plt>
   112f8:	ldr	r0, [pc, #180]	; 113b4 <__assert_fail@plt+0x468>
   112fc:	bl	10e50 <gettext@plt>
   11300:	mov	r3, r0
   11304:	mov	r1, #32
   11308:	mov	r0, r3
   1130c:	bl	10d0c <printf@plt>
   11310:	bl	11080 <__assert_fail@plt+0x134>
   11314:	bl	110b8 <__assert_fail@plt+0x16c>
   11318:	ldr	r0, [pc, #152]	; 113b8 <__assert_fail@plt+0x46c>
   1131c:	bl	10e50 <gettext@plt>
   11320:	mov	r2, r0
   11324:	ldr	r3, [pc, #144]	; 113bc <__assert_fail@plt+0x470>
   11328:	ldr	r3, [r3]
   1132c:	mov	r1, r3
   11330:	mov	r0, r2
   11334:	bl	10cdc <fputs_unlocked@plt>
   11338:	ldr	r0, [pc, #128]	; 113c0 <__assert_fail@plt+0x474>
   1133c:	bl	10e50 <gettext@plt>
   11340:	mov	r2, r0
   11344:	ldr	r3, [pc, #112]	; 113bc <__assert_fail@plt+0x470>
   11348:	ldr	r3, [r3]
   1134c:	mov	r1, r3
   11350:	mov	r0, r2
   11354:	bl	10cdc <fputs_unlocked@plt>
   11358:	ldr	r0, [pc, #100]	; 113c4 <__assert_fail@plt+0x478>
   1135c:	bl	10e50 <gettext@plt>
   11360:	mov	r2, r0
   11364:	ldr	r3, [pc, #80]	; 113bc <__assert_fail@plt+0x470>
   11368:	ldr	r3, [r3]
   1136c:	mov	r1, r3
   11370:	mov	r0, r2
   11374:	bl	10cdc <fputs_unlocked@plt>
   11378:	ldr	r0, [pc, #72]	; 113c8 <__assert_fail@plt+0x47c>
   1137c:	bl	10e50 <gettext@plt>
   11380:	mov	r3, r0
   11384:	ldr	r2, [pc, #64]	; 113cc <__assert_fail@plt+0x480>
   11388:	ldr	r1, [pc, #60]	; 113cc <__assert_fail@plt+0x480>
   1138c:	mov	r0, r3
   11390:	bl	10d0c <printf@plt>
   11394:	ldr	r0, [pc, #48]	; 113cc <__assert_fail@plt+0x480>
   11398:	bl	110f0 <__assert_fail@plt+0x1a4>
   1139c:	ldr	r0, [fp, #-16]
   113a0:	bl	10e44 <exit@plt>
   113a4:	andeq	sl, r2, r8, asr #2
   113a8:	andeq	r9, r1, r0, asr r2
   113ac:	andeq	sl, r2, r8, ror #2
   113b0:	andeq	r9, r1, r8, ror r2
   113b4:	muleq	r1, r8, r2
   113b8:	andeq	r9, r1, r0, ror #5
   113bc:	andeq	sl, r2, r4, asr r1
   113c0:	ldrdeq	r9, [r1], -r4
   113c4:	andeq	r9, r1, r4, lsl #8
   113c8:	andeq	r9, r1, ip, lsr r4
   113cc:	andeq	r9, r1, r8, asr #10
   113d0:	push	{r4, fp, lr}
   113d4:	add	fp, sp, #8
   113d8:	sub	sp, sp, #28
   113dc:	str	r0, [fp, #-24]	; 0xffffffe8
   113e0:	str	r1, [fp, #-28]	; 0xffffffe4
   113e4:	str	r2, [fp, #-32]	; 0xffffffe0
   113e8:	str	r3, [fp, #-36]	; 0xffffffdc
   113ec:	ldr	r3, [fp, #-32]	; 0xffffffe0
   113f0:	cmp	r3, #0
   113f4:	bne	11448 <__assert_fail@plt+0x4fc>
   113f8:	ldr	r2, [fp, #-28]	; 0xffffffe4
   113fc:	ldr	r3, [pc, #372]	; 11578 <__assert_fail@plt+0x62c>
   11400:	ldr	r3, [r3]
   11404:	mov	r1, #1
   11408:	ldr	r0, [fp, #-24]	; 0xffffffe8
   1140c:	bl	10d60 <fwrite_unlocked@plt>
   11410:	mov	r2, r0
   11414:	ldr	r3, [fp, #-28]	; 0xffffffe4
   11418:	cmp	r2, r3
   1141c:	bcs	1156c <__assert_fail@plt+0x620>
   11420:	bl	10e80 <__errno_location@plt>
   11424:	mov	r3, r0
   11428:	ldr	r4, [r3]
   1142c:	ldr	r0, [pc, #328]	; 1157c <__assert_fail@plt+0x630>
   11430:	bl	10e50 <gettext@plt>
   11434:	mov	r3, r0
   11438:	mov	r2, r3
   1143c:	mov	r1, r4
   11440:	mov	r0, #1
   11444:	bl	10df0 <error@plt>
   11448:	mov	r3, #0
   1144c:	str	r3, [fp, #-16]
   11450:	b	1155c <__assert_fail@plt+0x610>
   11454:	ldr	r2, [fp, #-28]	; 0xffffffe4
   11458:	ldr	r3, [fp, #-16]
   1145c:	sub	r2, r2, r3
   11460:	ldr	r3, [fp, #-36]	; 0xffffffdc
   11464:	ldr	r3, [r3]
   11468:	ldr	r1, [fp, #-32]	; 0xffffffe0
   1146c:	sub	r3, r1, r3
   11470:	cmp	r2, r3
   11474:	movlt	r3, r2
   11478:	movge	r3, r3
   1147c:	str	r3, [fp, #-20]	; 0xffffffec
   11480:	ldr	r3, [fp, #-20]	; 0xffffffec
   11484:	cmp	r3, #0
   11488:	bne	114dc <__assert_fail@plt+0x590>
   1148c:	ldr	r1, [fp, #4]
   11490:	mov	r0, #10
   11494:	bl	10d78 <fputc_unlocked@plt>
   11498:	mov	r3, r0
   1149c:	cmn	r3, #1
   114a0:	bne	114cc <__assert_fail@plt+0x580>
   114a4:	bl	10e80 <__errno_location@plt>
   114a8:	mov	r3, r0
   114ac:	ldr	r4, [r3]
   114b0:	ldr	r0, [pc, #196]	; 1157c <__assert_fail@plt+0x630>
   114b4:	bl	10e50 <gettext@plt>
   114b8:	mov	r3, r0
   114bc:	mov	r2, r3
   114c0:	mov	r1, r4
   114c4:	mov	r0, #1
   114c8:	bl	10df0 <error@plt>
   114cc:	ldr	r3, [fp, #-36]	; 0xffffffdc
   114d0:	mov	r2, #0
   114d4:	str	r2, [r3]
   114d8:	b	1155c <__assert_fail@plt+0x610>
   114dc:	ldr	r3, [fp, #-16]
   114e0:	ldr	r2, [fp, #-24]	; 0xffffffe8
   114e4:	add	r0, r2, r3
   114e8:	ldr	r2, [fp, #-20]	; 0xffffffec
   114ec:	ldr	r3, [pc, #132]	; 11578 <__assert_fail@plt+0x62c>
   114f0:	ldr	r3, [r3]
   114f4:	mov	r1, #1
   114f8:	bl	10d60 <fwrite_unlocked@plt>
   114fc:	mov	r2, r0
   11500:	ldr	r3, [fp, #-20]	; 0xffffffec
   11504:	cmp	r2, r3
   11508:	bcs	11534 <__assert_fail@plt+0x5e8>
   1150c:	bl	10e80 <__errno_location@plt>
   11510:	mov	r3, r0
   11514:	ldr	r4, [r3]
   11518:	ldr	r0, [pc, #92]	; 1157c <__assert_fail@plt+0x630>
   1151c:	bl	10e50 <gettext@plt>
   11520:	mov	r3, r0
   11524:	mov	r2, r3
   11528:	mov	r1, r4
   1152c:	mov	r0, #1
   11530:	bl	10df0 <error@plt>
   11534:	ldr	r3, [fp, #-36]	; 0xffffffdc
   11538:	ldr	r2, [r3]
   1153c:	ldr	r3, [fp, #-20]	; 0xffffffec
   11540:	add	r2, r2, r3
   11544:	ldr	r3, [fp, #-36]	; 0xffffffdc
   11548:	str	r2, [r3]
   1154c:	ldr	r2, [fp, #-16]
   11550:	ldr	r3, [fp, #-20]	; 0xffffffec
   11554:	add	r3, r2, r3
   11558:	str	r3, [fp, #-16]
   1155c:	ldr	r2, [fp, #-16]
   11560:	ldr	r3, [fp, #-28]	; 0xffffffe4
   11564:	cmp	r2, r3
   11568:	blt	11454 <__assert_fail@plt+0x508>
   1156c:	nop			; (mov r0, r0)
   11570:	sub	sp, fp, #8
   11574:	pop	{r4, fp, pc}
   11578:	andeq	sl, r2, r4, asr r1
   1157c:	andeq	r9, r1, r0, asr r5
   11580:	push	{r4, fp, lr}
   11584:	add	fp, sp, #8
   11588:	sub	sp, sp, #12
   1158c:	str	r0, [fp, #-16]
   11590:	str	r1, [fp, #-20]	; 0xffffffec
   11594:	ldr	r0, [fp, #-16]
   11598:	bl	133b8 <__assert_fail@plt+0x246c>
   1159c:	mov	r3, r0
   115a0:	cmp	r3, #0
   115a4:	beq	11618 <__assert_fail@plt+0x6cc>
   115a8:	ldr	r1, [pc, #112]	; 11620 <__assert_fail@plt+0x6d4>
   115ac:	ldr	r0, [fp, #-20]	; 0xffffffec
   115b0:	bl	10cf4 <strcmp@plt>
   115b4:	mov	r3, r0
   115b8:	cmp	r3, #0
   115bc:	bne	115e8 <__assert_fail@plt+0x69c>
   115c0:	bl	10e80 <__errno_location@plt>
   115c4:	mov	r3, r0
   115c8:	ldr	r4, [r3]
   115cc:	ldr	r0, [pc, #80]	; 11624 <__assert_fail@plt+0x6d8>
   115d0:	bl	10e50 <gettext@plt>
   115d4:	mov	r3, r0
   115d8:	mov	r2, r3
   115dc:	mov	r1, r4
   115e0:	mov	r0, #1
   115e4:	bl	10df0 <error@plt>
   115e8:	bl	10e80 <__errno_location@plt>
   115ec:	mov	r3, r0
   115f0:	ldr	r4, [r3]
   115f4:	ldr	r2, [fp, #-20]	; 0xffffffec
   115f8:	mov	r1, #3
   115fc:	mov	r0, #0
   11600:	bl	15cc4 <__assert_fail@plt+0x4d78>
   11604:	mov	r3, r0
   11608:	ldr	r2, [pc, #24]	; 11628 <__assert_fail@plt+0x6dc>
   1160c:	mov	r1, r4
   11610:	mov	r0, #1
   11614:	bl	10df0 <error@plt>
   11618:	mov	r0, #0
   1161c:	bl	10e44 <exit@plt>
   11620:	andeq	r9, r1, ip, asr r5
   11624:	andeq	r9, r1, r0, ror #10
   11628:	andeq	r9, r1, r8, ror r5
   1162c:	push	{r4, fp, lr}
   11630:	add	fp, sp, #8
   11634:	sub	sp, sp, #52	; 0x34
   11638:	str	r0, [fp, #-40]	; 0xffffffd8
   1163c:	str	r1, [fp, #-44]	; 0xffffffd4
   11640:	str	r2, [fp, #-48]	; 0xffffffd0
   11644:	str	r3, [fp, #-52]	; 0xffffffcc
   11648:	mov	r3, #0
   1164c:	str	r3, [fp, #-32]	; 0xffffffe0
   11650:	mov	r0, #30720	; 0x7800
   11654:	bl	167fc <__assert_fail@plt+0x58b0>
   11658:	mov	r3, r0
   1165c:	str	r3, [fp, #-20]	; 0xffffffec
   11660:	mov	r0, #49152	; 0xc000
   11664:	bl	167fc <__assert_fail@plt+0x58b0>
   11668:	mov	r3, r0
   1166c:	str	r3, [fp, #-24]	; 0xffffffe8
   11670:	mov	r3, #0
   11674:	str	r3, [fp, #-16]
   11678:	ldr	r3, [fp, #-16]
   1167c:	ldr	r2, [fp, #-20]	; 0xffffffec
   11680:	add	r0, r2, r3
   11684:	ldr	r3, [fp, #-16]
   11688:	rsb	r3, r3, #30720	; 0x7800
   1168c:	mov	r2, r3
   11690:	ldr	r3, [fp, #-40]	; 0xffffffd8
   11694:	mov	r1, #1
   11698:	bl	10f1c <fread_unlocked@plt>
   1169c:	mov	r3, r0
   116a0:	str	r3, [fp, #-28]	; 0xffffffe4
   116a4:	ldr	r2, [fp, #-16]
   116a8:	ldr	r3, [fp, #-28]	; 0xffffffe4
   116ac:	add	r3, r2, r3
   116b0:	str	r3, [fp, #-16]
   116b4:	ldr	r0, [fp, #-40]	; 0xffffffd8
   116b8:	bl	10f40 <feof_unlocked@plt>
   116bc:	mov	r3, r0
   116c0:	cmp	r3, #0
   116c4:	bne	116e8 <__assert_fail@plt+0x79c>
   116c8:	ldr	r0, [fp, #-40]	; 0xffffffd8
   116cc:	bl	10dd8 <ferror_unlocked@plt>
   116d0:	mov	r3, r0
   116d4:	cmp	r3, #0
   116d8:	bne	116e8 <__assert_fail@plt+0x79c>
   116dc:	ldr	r3, [fp, #-16]
   116e0:	cmp	r3, #30720	; 0x7800
   116e4:	blt	11678 <__assert_fail@plt+0x72c>
   116e8:	ldr	r3, [fp, #-16]
   116ec:	cmp	r3, #0
   116f0:	ble	11760 <__assert_fail@plt+0x814>
   116f4:	ldr	r3, [fp, #-16]
   116f8:	add	r3, r3, #4
   116fc:	ldr	r2, [pc, #316]	; 11840 <__assert_fail@plt+0x8f4>
   11700:	smull	r1, r2, r2, r3
   11704:	asr	r2, r2, #1
   11708:	asr	r3, r3, #31
   1170c:	sub	r3, r2, r3
   11710:	lsl	r3, r3, #3
   11714:	ldr	r2, [fp, #-24]	; 0xffffffe8
   11718:	ldr	r1, [fp, #-16]
   1171c:	ldr	r0, [fp, #-20]	; 0xffffffec
   11720:	bl	11f50 <__assert_fail@plt+0x1004>
   11724:	ldr	r3, [fp, #-16]
   11728:	add	r3, r3, #4
   1172c:	ldr	r2, [pc, #268]	; 11840 <__assert_fail@plt+0x8f4>
   11730:	smull	r1, r2, r2, r3
   11734:	asr	r2, r2, #1
   11738:	asr	r3, r3, #31
   1173c:	sub	r3, r2, r3
   11740:	lsl	r1, r3, #3
   11744:	sub	r2, fp, #32
   11748:	ldr	r3, [fp, #-48]	; 0xffffffd0
   1174c:	str	r3, [sp]
   11750:	mov	r3, r2
   11754:	ldr	r2, [fp, #-52]	; 0xffffffcc
   11758:	ldr	r0, [fp, #-24]	; 0xffffffe8
   1175c:	bl	113d0 <__assert_fail@plt+0x484>
   11760:	ldr	r0, [fp, #-40]	; 0xffffffd8
   11764:	bl	10f40 <feof_unlocked@plt>
   11768:	mov	r3, r0
   1176c:	cmp	r3, #0
   11770:	bne	11794 <__assert_fail@plt+0x848>
   11774:	ldr	r0, [fp, #-40]	; 0xffffffd8
   11778:	bl	10dd8 <ferror_unlocked@plt>
   1177c:	mov	r3, r0
   11780:	cmp	r3, #0
   11784:	bne	11794 <__assert_fail@plt+0x848>
   11788:	ldr	r3, [fp, #-16]
   1178c:	cmp	r3, #30720	; 0x7800
   11790:	beq	11670 <__assert_fail@plt+0x724>
   11794:	ldr	r3, [fp, #-52]	; 0xffffffcc
   11798:	cmp	r3, #0
   1179c:	beq	117ec <__assert_fail@plt+0x8a0>
   117a0:	ldr	r3, [fp, #-32]	; 0xffffffe0
   117a4:	cmp	r3, #0
   117a8:	ble	117ec <__assert_fail@plt+0x8a0>
   117ac:	ldr	r1, [fp, #-48]	; 0xffffffd0
   117b0:	mov	r0, #10
   117b4:	bl	10d78 <fputc_unlocked@plt>
   117b8:	mov	r3, r0
   117bc:	cmn	r3, #1
   117c0:	bne	117ec <__assert_fail@plt+0x8a0>
   117c4:	bl	10e80 <__errno_location@plt>
   117c8:	mov	r3, r0
   117cc:	ldr	r4, [r3]
   117d0:	ldr	r0, [pc, #108]	; 11844 <__assert_fail@plt+0x8f8>
   117d4:	bl	10e50 <gettext@plt>
   117d8:	mov	r3, r0
   117dc:	mov	r2, r3
   117e0:	mov	r1, r4
   117e4:	mov	r0, #1
   117e8:	bl	10df0 <error@plt>
   117ec:	ldr	r0, [fp, #-40]	; 0xffffffd8
   117f0:	bl	10dd8 <ferror_unlocked@plt>
   117f4:	mov	r3, r0
   117f8:	cmp	r3, #0
   117fc:	beq	11828 <__assert_fail@plt+0x8dc>
   11800:	bl	10e80 <__errno_location@plt>
   11804:	mov	r3, r0
   11808:	ldr	r4, [r3]
   1180c:	ldr	r0, [pc, #52]	; 11848 <__assert_fail@plt+0x8fc>
   11810:	bl	10e50 <gettext@plt>
   11814:	mov	r3, r0
   11818:	mov	r2, r3
   1181c:	mov	r1, r4
   11820:	mov	r0, #1
   11824:	bl	10df0 <error@plt>
   11828:	ldr	r1, [fp, #-44]	; 0xffffffd4
   1182c:	ldr	r0, [fp, #-40]	; 0xffffffd8
   11830:	bl	11580 <__assert_fail@plt+0x634>
   11834:	nop			; (mov r0, r0)
   11838:	sub	sp, fp, #8
   1183c:	pop	{r4, fp, pc}
   11840:	strbtvs	r6, [r6], -r7, ror #12
   11844:	andeq	r9, r1, r0, asr r5
   11848:	andeq	r9, r1, ip, ror r5
   1184c:	push	{r4, fp, lr}
   11850:	add	fp, sp, #8
   11854:	sub	sp, sp, #76	; 0x4c
   11858:	str	r0, [fp, #-64]	; 0xffffffc0
   1185c:	str	r1, [fp, #-68]	; 0xffffffbc
   11860:	str	r2, [fp, #-72]	; 0xffffffb8
   11864:	strb	r3, [fp, #-73]	; 0xffffffb7
   11868:	mov	r0, #8192	; 0x2000
   1186c:	bl	167fc <__assert_fail@plt+0x58b0>
   11870:	mov	r3, r0
   11874:	str	r3, [fp, #-32]	; 0xffffffe0
   11878:	mov	r0, #5120	; 0x1400
   1187c:	bl	167fc <__assert_fail@plt+0x58b0>
   11880:	mov	r3, r0
   11884:	str	r3, [fp, #-36]	; 0xffffffdc
   11888:	sub	r3, fp, #52	; 0x34
   1188c:	mov	r0, r3
   11890:	bl	125f8 <__assert_fail@plt+0x16ac>
   11894:	mov	r3, #0
   11898:	str	r3, [fp, #-16]
   1189c:	ldr	r3, [fp, #-16]
   118a0:	ldr	r2, [fp, #-32]	; 0xffffffe0
   118a4:	add	r0, r2, r3
   118a8:	ldr	r3, [fp, #-16]
   118ac:	rsb	r3, r3, #8192	; 0x2000
   118b0:	mov	r2, r3
   118b4:	ldr	r3, [fp, #-64]	; 0xffffffc0
   118b8:	mov	r1, #1
   118bc:	bl	10f1c <fread_unlocked@plt>
   118c0:	mov	r3, r0
   118c4:	str	r3, [fp, #-20]	; 0xffffffec
   118c8:	ldrb	r3, [fp, #-73]	; 0xffffffb7
   118cc:	cmp	r3, #0
   118d0:	beq	119ac <__assert_fail@plt+0xa60>
   118d4:	mov	r3, #0
   118d8:	str	r3, [fp, #-24]	; 0xffffffe8
   118dc:	b	11990 <__assert_fail@plt+0xa44>
   118e0:	ldr	r2, [fp, #-16]
   118e4:	ldr	r3, [fp, #-24]	; 0xffffffe8
   118e8:	add	r3, r2, r3
   118ec:	mov	r2, r3
   118f0:	ldr	r3, [fp, #-32]	; 0xffffffe0
   118f4:	add	r3, r3, r2
   118f8:	ldrb	r3, [r3]
   118fc:	mov	r0, r3
   11900:	bl	125a8 <__assert_fail@plt+0x165c>
   11904:	mov	r3, r0
   11908:	cmp	r3, #0
   1190c:	bne	11934 <__assert_fail@plt+0x9e8>
   11910:	ldr	r2, [fp, #-16]
   11914:	ldr	r3, [fp, #-24]	; 0xffffffe8
   11918:	add	r3, r2, r3
   1191c:	mov	r2, r3
   11920:	ldr	r3, [fp, #-32]	; 0xffffffe0
   11924:	add	r3, r3, r2
   11928:	ldrb	r3, [r3]
   1192c:	cmp	r3, #61	; 0x3d
   11930:	bne	11944 <__assert_fail@plt+0x9f8>
   11934:	ldr	r3, [fp, #-24]	; 0xffffffe8
   11938:	add	r3, r3, #1
   1193c:	str	r3, [fp, #-24]	; 0xffffffe8
   11940:	b	11990 <__assert_fail@plt+0xa44>
   11944:	ldr	r2, [fp, #-16]
   11948:	ldr	r3, [fp, #-24]	; 0xffffffe8
   1194c:	add	r3, r2, r3
   11950:	ldr	r2, [fp, #-32]	; 0xffffffe0
   11954:	add	r0, r2, r3
   11958:	ldr	r2, [fp, #-16]
   1195c:	ldr	r3, [fp, #-24]	; 0xffffffe8
   11960:	add	r3, r2, r3
   11964:	add	r3, r3, #1
   11968:	ldr	r2, [fp, #-32]	; 0xffffffe0
   1196c:	add	r1, r2, r3
   11970:	ldr	r3, [fp, #-20]	; 0xffffffec
   11974:	sub	r3, r3, #1
   11978:	str	r3, [fp, #-20]	; 0xffffffec
   1197c:	ldr	r2, [fp, #-20]	; 0xffffffec
   11980:	ldr	r3, [fp, #-24]	; 0xffffffe8
   11984:	sub	r3, r2, r3
   11988:	mov	r2, r3
   1198c:	bl	10d24 <memmove@plt>
   11990:	ldr	r3, [fp, #-20]	; 0xffffffec
   11994:	cmp	r3, #0
   11998:	ble	119ac <__assert_fail@plt+0xa60>
   1199c:	ldr	r2, [fp, #-24]	; 0xffffffe8
   119a0:	ldr	r3, [fp, #-20]	; 0xffffffec
   119a4:	cmp	r2, r3
   119a8:	blt	118e0 <__assert_fail@plt+0x994>
   119ac:	ldr	r2, [fp, #-16]
   119b0:	ldr	r3, [fp, #-20]	; 0xffffffec
   119b4:	add	r3, r2, r3
   119b8:	str	r3, [fp, #-16]
   119bc:	ldr	r0, [fp, #-64]	; 0xffffffc0
   119c0:	bl	10dd8 <ferror_unlocked@plt>
   119c4:	mov	r3, r0
   119c8:	cmp	r3, #0
   119cc:	beq	119f8 <__assert_fail@plt+0xaac>
   119d0:	bl	10e80 <__errno_location@plt>
   119d4:	mov	r3, r0
   119d8:	ldr	r4, [r3]
   119dc:	ldr	r0, [pc, #388]	; 11b68 <__assert_fail@plt+0xc1c>
   119e0:	bl	10e50 <gettext@plt>
   119e4:	mov	r3, r0
   119e8:	mov	r2, r3
   119ec:	mov	r1, r4
   119f0:	mov	r0, #1
   119f4:	bl	10df0 <error@plt>
   119f8:	ldr	r3, [fp, #-16]
   119fc:	cmp	r3, #8192	; 0x2000
   11a00:	bge	11a18 <__assert_fail@plt+0xacc>
   11a04:	ldr	r0, [fp, #-64]	; 0xffffffc0
   11a08:	bl	10f40 <feof_unlocked@plt>
   11a0c:	mov	r3, r0
   11a10:	cmp	r3, #0
   11a14:	beq	1189c <__assert_fail@plt+0x950>
   11a18:	mov	r3, #0
   11a1c:	str	r3, [fp, #-28]	; 0xffffffe4
   11a20:	b	11b08 <__assert_fail@plt+0xbbc>
   11a24:	ldr	r3, [fp, #-28]	; 0xffffffe4
   11a28:	cmp	r3, #1
   11a2c:	bne	11a3c <__assert_fail@plt+0xaf0>
   11a30:	ldr	r3, [fp, #-52]	; 0xffffffcc
   11a34:	cmp	r3, #0
   11a38:	beq	11b38 <__assert_fail@plt+0xbec>
   11a3c:	mov	r3, #5120	; 0x1400
   11a40:	str	r3, [fp, #-56]	; 0xffffffc8
   11a44:	ldr	r3, [fp, #-28]	; 0xffffffe4
   11a48:	cmp	r3, #0
   11a4c:	bne	11a58 <__assert_fail@plt+0xb0c>
   11a50:	ldr	r2, [fp, #-16]
   11a54:	b	11a5c <__assert_fail@plt+0xb10>
   11a58:	mov	r2, #0
   11a5c:	sub	r0, fp, #52	; 0x34
   11a60:	sub	r3, fp, #56	; 0x38
   11a64:	str	r3, [sp]
   11a68:	ldr	r3, [fp, #-36]	; 0xffffffdc
   11a6c:	ldr	r1, [fp, #-32]	; 0xffffffe0
   11a70:	bl	12e18 <__assert_fail@plt+0x1ecc>
   11a74:	mov	r3, r0
   11a78:	strb	r3, [fp, #-37]	; 0xffffffdb
   11a7c:	ldr	r3, [fp, #-56]	; 0xffffffc8
   11a80:	mov	r2, r3
   11a84:	ldr	r3, [fp, #-72]	; 0xffffffb8
   11a88:	mov	r1, #1
   11a8c:	ldr	r0, [fp, #-36]	; 0xffffffdc
   11a90:	bl	10d60 <fwrite_unlocked@plt>
   11a94:	mov	r2, r0
   11a98:	ldr	r3, [fp, #-56]	; 0xffffffc8
   11a9c:	cmp	r2, r3
   11aa0:	bcs	11acc <__assert_fail@plt+0xb80>
   11aa4:	bl	10e80 <__errno_location@plt>
   11aa8:	mov	r3, r0
   11aac:	ldr	r4, [r3]
   11ab0:	ldr	r0, [pc, #180]	; 11b6c <__assert_fail@plt+0xc20>
   11ab4:	bl	10e50 <gettext@plt>
   11ab8:	mov	r3, r0
   11abc:	mov	r2, r3
   11ac0:	mov	r1, r4
   11ac4:	mov	r0, #1
   11ac8:	bl	10df0 <error@plt>
   11acc:	ldrb	r3, [fp, #-37]	; 0xffffffdb
   11ad0:	eor	r3, r3, #1
   11ad4:	uxtb	r3, r3
   11ad8:	cmp	r3, #0
   11adc:	beq	11afc <__assert_fail@plt+0xbb0>
   11ae0:	ldr	r0, [pc, #136]	; 11b70 <__assert_fail@plt+0xc24>
   11ae4:	bl	10e50 <gettext@plt>
   11ae8:	mov	r3, r0
   11aec:	mov	r2, r3
   11af0:	mov	r1, #0
   11af4:	mov	r0, #1
   11af8:	bl	10df0 <error@plt>
   11afc:	ldr	r3, [fp, #-28]	; 0xffffffe4
   11b00:	add	r3, r3, #1
   11b04:	str	r3, [fp, #-28]	; 0xffffffe4
   11b08:	ldr	r0, [fp, #-64]	; 0xffffffc0
   11b0c:	bl	10f40 <feof_unlocked@plt>
   11b10:	mov	r3, r0
   11b14:	cmp	r3, #0
   11b18:	beq	11b24 <__assert_fail@plt+0xbd8>
   11b1c:	mov	r2, #2
   11b20:	b	11b28 <__assert_fail@plt+0xbdc>
   11b24:	mov	r2, #1
   11b28:	ldr	r3, [fp, #-28]	; 0xffffffe4
   11b2c:	cmp	r2, r3
   11b30:	bgt	11a24 <__assert_fail@plt+0xad8>
   11b34:	b	11b3c <__assert_fail@plt+0xbf0>
   11b38:	nop			; (mov r0, r0)
   11b3c:	ldr	r0, [fp, #-64]	; 0xffffffc0
   11b40:	bl	10f40 <feof_unlocked@plt>
   11b44:	mov	r3, r0
   11b48:	cmp	r3, #0
   11b4c:	beq	11894 <__assert_fail@plt+0x948>
   11b50:	ldr	r1, [fp, #-68]	; 0xffffffbc
   11b54:	ldr	r0, [fp, #-64]	; 0xffffffc0
   11b58:	bl	11580 <__assert_fail@plt+0x634>
   11b5c:	nop			; (mov r0, r0)
   11b60:	sub	sp, fp, #8
   11b64:	pop	{r4, fp, pc}
   11b68:	andeq	r9, r1, ip, ror r5
   11b6c:	andeq	r9, r1, r0, asr r5
   11b70:	andeq	r9, r1, r8, lsl #11
   11b74:	push	{r4, fp, lr}
   11b78:	add	fp, sp, #8
   11b7c:	sub	sp, sp, #52	; 0x34
   11b80:	str	r0, [fp, #-48]	; 0xffffffd0
   11b84:	str	r1, [fp, #-52]	; 0xffffffcc
   11b88:	mov	r3, #0
   11b8c:	strb	r3, [fp, #-21]	; 0xffffffeb
   11b90:	mov	r3, #0
   11b94:	strb	r3, [fp, #-22]	; 0xffffffea
   11b98:	mov	r3, #76	; 0x4c
   11b9c:	str	r3, [fp, #-28]	; 0xffffffe4
   11ba0:	ldr	r3, [fp, #-52]	; 0xffffffcc
   11ba4:	ldr	r3, [r3]
   11ba8:	mov	r0, r3
   11bac:	bl	13804 <__assert_fail@plt+0x28b8>
   11bb0:	ldr	r1, [pc, #800]	; 11ed8 <__assert_fail@plt+0xf8c>
   11bb4:	mov	r0, #6
   11bb8:	bl	10ee0 <setlocale@plt>
   11bbc:	ldr	r1, [pc, #792]	; 11edc <__assert_fail@plt+0xf90>
   11bc0:	ldr	r0, [pc, #792]	; 11ee0 <__assert_fail@plt+0xf94>
   11bc4:	bl	10f10 <bindtextdomain@plt>
   11bc8:	ldr	r0, [pc, #784]	; 11ee0 <__assert_fail@plt+0xf94>
   11bcc:	bl	10d90 <textdomain@plt>
   11bd0:	ldr	r0, [pc, #780]	; 11ee4 <__assert_fail@plt+0xf98>
   11bd4:	bl	18f6c <__assert_fail@plt+0x8020>
   11bd8:	b	11d30 <__assert_fail@plt+0xde4>
   11bdc:	ldr	r3, [fp, #-32]	; 0xffffffe0
   11be0:	cmp	r3, #100	; 0x64
   11be4:	beq	11c18 <__assert_fail@plt+0xccc>
   11be8:	cmp	r3, #100	; 0x64
   11bec:	bgt	11c04 <__assert_fail@plt+0xcb8>
   11bf0:	cmn	r3, #3
   11bf4:	beq	11cf0 <__assert_fail@plt+0xda4>
   11bf8:	cmn	r3, #2
   11bfc:	beq	11ce8 <__assert_fail@plt+0xd9c>
   11c00:	b	11d28 <__assert_fail@plt+0xddc>
   11c04:	cmp	r3, #105	; 0x69
   11c08:	beq	11cdc <__assert_fail@plt+0xd90>
   11c0c:	cmp	r3, #119	; 0x77
   11c10:	beq	11c24 <__assert_fail@plt+0xcd8>
   11c14:	b	11d28 <__assert_fail@plt+0xddc>
   11c18:	mov	r3, #1
   11c1c:	strb	r3, [fp, #-21]	; 0xffffffeb
   11c20:	b	11d30 <__assert_fail@plt+0xde4>
   11c24:	ldr	r3, [pc, #700]	; 11ee8 <__assert_fail@plt+0xf9c>
   11c28:	ldr	r0, [r3]
   11c2c:	sub	r2, fp, #44	; 0x2c
   11c30:	ldr	r3, [pc, #672]	; 11ed8 <__assert_fail@plt+0xf8c>
   11c34:	str	r3, [sp]
   11c38:	mov	r3, r2
   11c3c:	mov	r2, #10
   11c40:	mov	r1, #0
   11c44:	bl	176d8 <__assert_fail@plt+0x678c>
   11c48:	str	r0, [fp, #-36]	; 0xffffffdc
   11c4c:	ldr	r3, [fp, #-36]	; 0xffffffdc
   11c50:	cmp	r3, #1
   11c54:	bhi	11c68 <__assert_fail@plt+0xd1c>
   11c58:	ldrd	r2, [fp, #-44]	; 0xffffffd4
   11c5c:	cmp	r2, #0
   11c60:	sbcs	r3, r3, #0
   11c64:	bge	11ca0 <__assert_fail@plt+0xd54>
   11c68:	ldr	r0, [pc, #636]	; 11eec <__assert_fail@plt+0xfa0>
   11c6c:	bl	10e50 <gettext@plt>
   11c70:	mov	r4, r0
   11c74:	ldr	r3, [pc, #620]	; 11ee8 <__assert_fail@plt+0xf9c>
   11c78:	ldr	r3, [r3]
   11c7c:	mov	r0, r3
   11c80:	bl	15f34 <__assert_fail@plt+0x4fe8>
   11c84:	mov	r3, r0
   11c88:	str	r3, [sp]
   11c8c:	mov	r3, r4
   11c90:	ldr	r2, [pc, #600]	; 11ef0 <__assert_fail@plt+0xfa4>
   11c94:	mov	r1, #0
   11c98:	mov	r0, #1
   11c9c:	bl	10df0 <error@plt>
   11ca0:	ldr	r3, [fp, #-36]	; 0xffffffdc
   11ca4:	cmp	r3, #1
   11ca8:	beq	11cd0 <__assert_fail@plt+0xd84>
   11cac:	ldrd	r2, [fp, #-44]	; 0xffffffd4
   11cb0:	mvn	r0, #-2147483648	; 0x80000000
   11cb4:	mov	r1, #0
   11cb8:	cmp	r0, r2
   11cbc:	sbcs	r3, r1, r3
   11cc0:	blt	11cd0 <__assert_fail@plt+0xd84>
   11cc4:	ldrd	r2, [fp, #-44]	; 0xffffffd4
   11cc8:	mov	r3, r2
   11ccc:	b	11cd4 <__assert_fail@plt+0xd88>
   11cd0:	mov	r3, #0
   11cd4:	str	r3, [fp, #-28]	; 0xffffffe4
   11cd8:	b	11d30 <__assert_fail@plt+0xde4>
   11cdc:	mov	r3, #1
   11ce0:	strb	r3, [fp, #-22]	; 0xffffffea
   11ce4:	b	11d30 <__assert_fail@plt+0xde4>
   11ce8:	mov	r0, #0
   11cec:	bl	11290 <__assert_fail@plt+0x344>
   11cf0:	ldr	r3, [pc, #508]	; 11ef4 <__assert_fail@plt+0xfa8>
   11cf4:	ldr	r0, [r3]
   11cf8:	ldr	r3, [pc, #504]	; 11ef8 <__assert_fail@plt+0xfac>
   11cfc:	ldr	r2, [r3]
   11d00:	mov	r3, #0
   11d04:	str	r3, [sp, #4]
   11d08:	ldr	r3, [pc, #492]	; 11efc <__assert_fail@plt+0xfb0>
   11d0c:	str	r3, [sp]
   11d10:	mov	r3, r2
   11d14:	ldr	r2, [pc, #484]	; 11f00 <__assert_fail@plt+0xfb4>
   11d18:	ldr	r1, [pc, #484]	; 11f04 <__assert_fail@plt+0xfb8>
   11d1c:	bl	166b0 <__assert_fail@plt+0x5764>
   11d20:	mov	r0, #0
   11d24:	bl	10e44 <exit@plt>
   11d28:	mov	r0, #1
   11d2c:	bl	11290 <__assert_fail@plt+0x344>
   11d30:	mov	r3, #0
   11d34:	str	r3, [sp]
   11d38:	ldr	r3, [pc, #456]	; 11f08 <__assert_fail@plt+0xfbc>
   11d3c:	ldr	r2, [pc, #456]	; 11f0c <__assert_fail@plt+0xfc0>
   11d40:	ldr	r1, [fp, #-52]	; 0xffffffcc
   11d44:	ldr	r0, [fp, #-48]	; 0xffffffd0
   11d48:	bl	10e2c <getopt_long@plt>
   11d4c:	str	r0, [fp, #-32]	; 0xffffffe0
   11d50:	ldr	r3, [fp, #-32]	; 0xffffffe0
   11d54:	cmn	r3, #1
   11d58:	bne	11bdc <__assert_fail@plt+0xc90>
   11d5c:	ldr	r3, [pc, #428]	; 11f10 <__assert_fail@plt+0xfc4>
   11d60:	ldr	r3, [r3]
   11d64:	ldr	r2, [fp, #-48]	; 0xffffffd0
   11d68:	sub	r3, r2, r3
   11d6c:	cmp	r3, #1
   11d70:	ble	11dc0 <__assert_fail@plt+0xe74>
   11d74:	ldr	r0, [pc, #408]	; 11f14 <__assert_fail@plt+0xfc8>
   11d78:	bl	10e50 <gettext@plt>
   11d7c:	mov	r4, r0
   11d80:	ldr	r3, [pc, #392]	; 11f10 <__assert_fail@plt+0xfc4>
   11d84:	ldr	r3, [r3]
   11d88:	add	r3, r3, #1
   11d8c:	lsl	r3, r3, #2
   11d90:	ldr	r2, [fp, #-52]	; 0xffffffcc
   11d94:	add	r3, r2, r3
   11d98:	ldr	r3, [r3]
   11d9c:	mov	r0, r3
   11da0:	bl	15f34 <__assert_fail@plt+0x4fe8>
   11da4:	mov	r3, r0
   11da8:	mov	r2, r4
   11dac:	mov	r1, #0
   11db0:	mov	r0, #0
   11db4:	bl	10df0 <error@plt>
   11db8:	mov	r0, #1
   11dbc:	bl	11290 <__assert_fail@plt+0x344>
   11dc0:	ldr	r3, [pc, #328]	; 11f10 <__assert_fail@plt+0xfc4>
   11dc4:	ldr	r2, [r3]
   11dc8:	ldr	r3, [fp, #-48]	; 0xffffffd0
   11dcc:	cmp	r2, r3
   11dd0:	bge	11df4 <__assert_fail@plt+0xea8>
   11dd4:	ldr	r3, [pc, #308]	; 11f10 <__assert_fail@plt+0xfc4>
   11dd8:	ldr	r3, [r3]
   11ddc:	lsl	r3, r3, #2
   11de0:	ldr	r2, [fp, #-52]	; 0xffffffcc
   11de4:	add	r3, r2, r3
   11de8:	ldr	r3, [r3]
   11dec:	str	r3, [fp, #-20]	; 0xffffffec
   11df0:	b	11dfc <__assert_fail@plt+0xeb0>
   11df4:	ldr	r3, [pc, #284]	; 11f18 <__assert_fail@plt+0xfcc>
   11df8:	str	r3, [fp, #-20]	; 0xffffffec
   11dfc:	ldr	r1, [pc, #276]	; 11f18 <__assert_fail@plt+0xfcc>
   11e00:	ldr	r0, [fp, #-20]	; 0xffffffec
   11e04:	bl	10cf4 <strcmp@plt>
   11e08:	mov	r3, r0
   11e0c:	cmp	r3, #0
   11e10:	bne	11e30 <__assert_fail@plt+0xee4>
   11e14:	mov	r1, #0
   11e18:	mov	r0, #0
   11e1c:	bl	1736c <__assert_fail@plt+0x6420>
   11e20:	ldr	r3, [pc, #244]	; 11f1c <__assert_fail@plt+0xfd0>
   11e24:	ldr	r3, [r3]
   11e28:	str	r3, [fp, #-16]
   11e2c:	b	11e7c <__assert_fail@plt+0xf30>
   11e30:	ldr	r1, [pc, #232]	; 11f20 <__assert_fail@plt+0xfd4>
   11e34:	ldr	r0, [fp, #-20]	; 0xffffffec
   11e38:	bl	10f04 <fopen64@plt>
   11e3c:	str	r0, [fp, #-16]
   11e40:	ldr	r3, [fp, #-16]
   11e44:	cmp	r3, #0
   11e48:	bne	11e7c <__assert_fail@plt+0xf30>
   11e4c:	bl	10e80 <__errno_location@plt>
   11e50:	mov	r3, r0
   11e54:	ldr	r4, [r3]
   11e58:	ldr	r2, [fp, #-20]	; 0xffffffec
   11e5c:	mov	r1, #3
   11e60:	mov	r0, #0
   11e64:	bl	15cc4 <__assert_fail@plt+0x4d78>
   11e68:	mov	r3, r0
   11e6c:	ldr	r2, [pc, #176]	; 11f24 <__assert_fail@plt+0xfd8>
   11e70:	mov	r1, r4
   11e74:	mov	r0, #1
   11e78:	bl	10df0 <error@plt>
   11e7c:	mov	r1, #2
   11e80:	ldr	r0, [fp, #-16]
   11e84:	bl	1335c <__assert_fail@plt+0x2410>
   11e88:	ldrb	r3, [fp, #-21]	; 0xffffffeb
   11e8c:	cmp	r3, #0
   11e90:	beq	11eb0 <__assert_fail@plt+0xf64>
   11e94:	ldr	r3, [pc, #88]	; 11ef4 <__assert_fail@plt+0xfa8>
   11e98:	ldr	r2, [r3]
   11e9c:	ldrb	r3, [fp, #-22]	; 0xffffffea
   11ea0:	ldr	r1, [fp, #-20]	; 0xffffffec
   11ea4:	ldr	r0, [fp, #-16]
   11ea8:	bl	1184c <__assert_fail@plt+0x900>
   11eac:	b	11ec8 <__assert_fail@plt+0xf7c>
   11eb0:	ldr	r3, [pc, #60]	; 11ef4 <__assert_fail@plt+0xfa8>
   11eb4:	ldr	r2, [r3]
   11eb8:	ldr	r3, [fp, #-28]	; 0xffffffe4
   11ebc:	ldr	r1, [fp, #-20]	; 0xffffffec
   11ec0:	ldr	r0, [fp, #-16]
   11ec4:	bl	1162c <__assert_fail@plt+0x6e0>
   11ec8:	mov	r3, #0
   11ecc:	mov	r0, r3
   11ed0:	sub	sp, fp, #8
   11ed4:	pop	{r4, fp, pc}
   11ed8:	andeq	r9, r1, ip, lsl #2
   11edc:	muleq	r1, r8, r5
   11ee0:	andeq	r9, r1, r4, lsr #2
   11ee4:	andeq	r3, r1, r8, ror #3
   11ee8:	andeq	sl, r2, r8, asr r1
   11eec:			; <UNDEFINED> instruction: 0x000195b0
   11ef0:	andeq	r9, r1, r4, asr #11
   11ef4:	andeq	sl, r2, r4, asr r1
   11ef8:	strdeq	sl, [r2], -r0
   11efc:	andeq	r9, r1, ip, asr #11
   11f00:	andeq	r9, r1, r4, asr r0
   11f04:	andeq	r9, r1, r8, asr #10
   11f08:	strdeq	r9, [r1], -r0
   11f0c:	ldrdeq	r9, [r1], -ip
   11f10:	andeq	sl, r2, r0, asr #2
   11f14:	andeq	r9, r1, r4, ror #11
   11f18:	andeq	r9, r1, ip, asr r5
   11f1c:	andeq	sl, r2, r0, asr r1
   11f20:	strdeq	r9, [r1], -r8
   11f24:	andeq	r9, r1, r8, ror r5
   11f28:	push	{fp}		; (str fp, [sp, #-4]!)
   11f2c:	add	fp, sp, #0
   11f30:	sub	sp, sp, #12
   11f34:	mov	r3, r0
   11f38:	strb	r3, [fp, #-5]
   11f3c:	ldrb	r3, [fp, #-5]
   11f40:	mov	r0, r3
   11f44:	add	sp, fp, #0
   11f48:	pop	{fp}		; (ldr fp, [sp], #4)
   11f4c:	bx	lr
   11f50:	push	{r4, r5, fp, lr}
   11f54:	add	fp, sp, #12
   11f58:	sub	sp, sp, #16
   11f5c:	str	r0, [fp, #-16]
   11f60:	str	r1, [fp, #-20]	; 0xffffffec
   11f64:	str	r2, [fp, #-24]	; 0xffffffe8
   11f68:	str	r3, [fp, #-28]	; 0xffffffe4
   11f6c:	b	123a8 <__assert_fail@plt+0x145c>
   11f70:	ldr	r4, [fp, #-24]	; 0xffffffe8
   11f74:	add	r3, r4, #1
   11f78:	str	r3, [fp, #-24]	; 0xffffffe8
   11f7c:	ldr	r3, [fp, #-16]
   11f80:	ldrb	r3, [r3]
   11f84:	mov	r0, r3
   11f88:	bl	11f28 <__assert_fail@plt+0xfdc>
   11f8c:	mov	r3, r0
   11f90:	lsr	r3, r3, #3
   11f94:	uxtb	r3, r3
   11f98:	and	r3, r3, #31
   11f9c:	ldr	r2, [pc, #1152]	; 12424 <__assert_fail@plt+0x14d8>
   11fa0:	ldrb	r3, [r2, r3]
   11fa4:	strb	r3, [r4]
   11fa8:	ldr	r3, [fp, #-28]	; 0xffffffe4
   11fac:	sub	r3, r3, #1
   11fb0:	str	r3, [fp, #-28]	; 0xffffffe4
   11fb4:	ldr	r3, [fp, #-28]	; 0xffffffe4
   11fb8:	cmp	r3, #0
   11fbc:	beq	123c4 <__assert_fail@plt+0x1478>
   11fc0:	ldr	r4, [fp, #-24]	; 0xffffffe8
   11fc4:	add	r3, r4, #1
   11fc8:	str	r3, [fp, #-24]	; 0xffffffe8
   11fcc:	ldr	r3, [fp, #-16]
   11fd0:	ldrb	r3, [r3]
   11fd4:	mov	r0, r3
   11fd8:	bl	11f28 <__assert_fail@plt+0xfdc>
   11fdc:	mov	r3, r0
   11fe0:	lsl	r5, r3, #2
   11fe4:	ldr	r3, [fp, #-20]	; 0xffffffec
   11fe8:	sub	r3, r3, #1
   11fec:	str	r3, [fp, #-20]	; 0xffffffec
   11ff0:	ldr	r3, [fp, #-20]	; 0xffffffec
   11ff4:	cmp	r3, #0
   11ff8:	beq	12020 <__assert_fail@plt+0x10d4>
   11ffc:	ldr	r3, [fp, #-16]
   12000:	add	r3, r3, #1
   12004:	ldrb	r3, [r3]
   12008:	mov	r0, r3
   1200c:	bl	11f28 <__assert_fail@plt+0xfdc>
   12010:	mov	r3, r0
   12014:	lsr	r3, r3, #6
   12018:	uxtb	r3, r3
   1201c:	b	12024 <__assert_fail@plt+0x10d8>
   12020:	mov	r3, #0
   12024:	add	r3, r5, r3
   12028:	and	r3, r3, #31
   1202c:	ldr	r2, [pc, #1008]	; 12424 <__assert_fail@plt+0x14d8>
   12030:	ldrb	r3, [r2, r3]
   12034:	strb	r3, [r4]
   12038:	ldr	r3, [fp, #-28]	; 0xffffffe4
   1203c:	sub	r3, r3, #1
   12040:	str	r3, [fp, #-28]	; 0xffffffe4
   12044:	ldr	r3, [fp, #-28]	; 0xffffffe4
   12048:	cmp	r3, #0
   1204c:	beq	123cc <__assert_fail@plt+0x1480>
   12050:	ldr	r4, [fp, #-24]	; 0xffffffe8
   12054:	add	r3, r4, #1
   12058:	str	r3, [fp, #-24]	; 0xffffffe8
   1205c:	ldr	r3, [fp, #-20]	; 0xffffffec
   12060:	cmp	r3, #0
   12064:	beq	12098 <__assert_fail@plt+0x114c>
   12068:	ldr	r3, [fp, #-16]
   1206c:	add	r3, r3, #1
   12070:	ldrb	r3, [r3]
   12074:	mov	r0, r3
   12078:	bl	11f28 <__assert_fail@plt+0xfdc>
   1207c:	mov	r3, r0
   12080:	lsr	r3, r3, #1
   12084:	uxtb	r3, r3
   12088:	and	r3, r3, #31
   1208c:	ldr	r2, [pc, #912]	; 12424 <__assert_fail@plt+0x14d8>
   12090:	ldrb	r3, [r2, r3]
   12094:	b	1209c <__assert_fail@plt+0x1150>
   12098:	mov	r3, #61	; 0x3d
   1209c:	strb	r3, [r4]
   120a0:	ldr	r3, [fp, #-28]	; 0xffffffe4
   120a4:	sub	r3, r3, #1
   120a8:	str	r3, [fp, #-28]	; 0xffffffe4
   120ac:	ldr	r3, [fp, #-28]	; 0xffffffe4
   120b0:	cmp	r3, #0
   120b4:	beq	123d4 <__assert_fail@plt+0x1488>
   120b8:	ldr	r4, [fp, #-24]	; 0xffffffe8
   120bc:	add	r3, r4, #1
   120c0:	str	r3, [fp, #-24]	; 0xffffffe8
   120c4:	ldr	r3, [fp, #-20]	; 0xffffffec
   120c8:	cmp	r3, #0
   120cc:	beq	12140 <__assert_fail@plt+0x11f4>
   120d0:	ldr	r3, [fp, #-16]
   120d4:	add	r3, r3, #1
   120d8:	ldrb	r3, [r3]
   120dc:	mov	r0, r3
   120e0:	bl	11f28 <__assert_fail@plt+0xfdc>
   120e4:	mov	r3, r0
   120e8:	lsl	r5, r3, #4
   120ec:	ldr	r3, [fp, #-20]	; 0xffffffec
   120f0:	sub	r3, r3, #1
   120f4:	str	r3, [fp, #-20]	; 0xffffffec
   120f8:	ldr	r3, [fp, #-20]	; 0xffffffec
   120fc:	cmp	r3, #0
   12100:	beq	12128 <__assert_fail@plt+0x11dc>
   12104:	ldr	r3, [fp, #-16]
   12108:	add	r3, r3, #2
   1210c:	ldrb	r3, [r3]
   12110:	mov	r0, r3
   12114:	bl	11f28 <__assert_fail@plt+0xfdc>
   12118:	mov	r3, r0
   1211c:	lsr	r3, r3, #4
   12120:	uxtb	r3, r3
   12124:	b	1212c <__assert_fail@plt+0x11e0>
   12128:	mov	r3, #0
   1212c:	add	r3, r5, r3
   12130:	and	r3, r3, #31
   12134:	ldr	r2, [pc, #744]	; 12424 <__assert_fail@plt+0x14d8>
   12138:	ldrb	r3, [r2, r3]
   1213c:	b	12144 <__assert_fail@plt+0x11f8>
   12140:	mov	r3, #61	; 0x3d
   12144:	strb	r3, [r4]
   12148:	ldr	r3, [fp, #-28]	; 0xffffffe4
   1214c:	sub	r3, r3, #1
   12150:	str	r3, [fp, #-28]	; 0xffffffe4
   12154:	ldr	r3, [fp, #-28]	; 0xffffffe4
   12158:	cmp	r3, #0
   1215c:	beq	123dc <__assert_fail@plt+0x1490>
   12160:	ldr	r4, [fp, #-24]	; 0xffffffe8
   12164:	add	r3, r4, #1
   12168:	str	r3, [fp, #-24]	; 0xffffffe8
   1216c:	ldr	r3, [fp, #-20]	; 0xffffffec
   12170:	cmp	r3, #0
   12174:	beq	121e8 <__assert_fail@plt+0x129c>
   12178:	ldr	r3, [fp, #-16]
   1217c:	add	r3, r3, #2
   12180:	ldrb	r3, [r3]
   12184:	mov	r0, r3
   12188:	bl	11f28 <__assert_fail@plt+0xfdc>
   1218c:	mov	r3, r0
   12190:	lsl	r5, r3, #1
   12194:	ldr	r3, [fp, #-20]	; 0xffffffec
   12198:	sub	r3, r3, #1
   1219c:	str	r3, [fp, #-20]	; 0xffffffec
   121a0:	ldr	r3, [fp, #-20]	; 0xffffffec
   121a4:	cmp	r3, #0
   121a8:	beq	121d0 <__assert_fail@plt+0x1284>
   121ac:	ldr	r3, [fp, #-16]
   121b0:	add	r3, r3, #3
   121b4:	ldrb	r3, [r3]
   121b8:	mov	r0, r3
   121bc:	bl	11f28 <__assert_fail@plt+0xfdc>
   121c0:	mov	r3, r0
   121c4:	lsr	r3, r3, #7
   121c8:	uxtb	r3, r3
   121cc:	b	121d4 <__assert_fail@plt+0x1288>
   121d0:	mov	r3, #0
   121d4:	add	r3, r5, r3
   121d8:	and	r3, r3, #31
   121dc:	ldr	r2, [pc, #576]	; 12424 <__assert_fail@plt+0x14d8>
   121e0:	ldrb	r3, [r2, r3]
   121e4:	b	121ec <__assert_fail@plt+0x12a0>
   121e8:	mov	r3, #61	; 0x3d
   121ec:	strb	r3, [r4]
   121f0:	ldr	r3, [fp, #-28]	; 0xffffffe4
   121f4:	sub	r3, r3, #1
   121f8:	str	r3, [fp, #-28]	; 0xffffffe4
   121fc:	ldr	r3, [fp, #-28]	; 0xffffffe4
   12200:	cmp	r3, #0
   12204:	beq	123e4 <__assert_fail@plt+0x1498>
   12208:	ldr	r4, [fp, #-24]	; 0xffffffe8
   1220c:	add	r3, r4, #1
   12210:	str	r3, [fp, #-24]	; 0xffffffe8
   12214:	ldr	r3, [fp, #-20]	; 0xffffffec
   12218:	cmp	r3, #0
   1221c:	beq	12250 <__assert_fail@plt+0x1304>
   12220:	ldr	r3, [fp, #-16]
   12224:	add	r3, r3, #3
   12228:	ldrb	r3, [r3]
   1222c:	mov	r0, r3
   12230:	bl	11f28 <__assert_fail@plt+0xfdc>
   12234:	mov	r3, r0
   12238:	lsr	r3, r3, #2
   1223c:	uxtb	r3, r3
   12240:	and	r3, r3, #31
   12244:	ldr	r2, [pc, #472]	; 12424 <__assert_fail@plt+0x14d8>
   12248:	ldrb	r3, [r2, r3]
   1224c:	b	12254 <__assert_fail@plt+0x1308>
   12250:	mov	r3, #61	; 0x3d
   12254:	strb	r3, [r4]
   12258:	ldr	r3, [fp, #-28]	; 0xffffffe4
   1225c:	sub	r3, r3, #1
   12260:	str	r3, [fp, #-28]	; 0xffffffe4
   12264:	ldr	r3, [fp, #-28]	; 0xffffffe4
   12268:	cmp	r3, #0
   1226c:	beq	123ec <__assert_fail@plt+0x14a0>
   12270:	ldr	r4, [fp, #-24]	; 0xffffffe8
   12274:	add	r3, r4, #1
   12278:	str	r3, [fp, #-24]	; 0xffffffe8
   1227c:	ldr	r3, [fp, #-20]	; 0xffffffec
   12280:	cmp	r3, #0
   12284:	beq	122f8 <__assert_fail@plt+0x13ac>
   12288:	ldr	r3, [fp, #-16]
   1228c:	add	r3, r3, #3
   12290:	ldrb	r3, [r3]
   12294:	mov	r0, r3
   12298:	bl	11f28 <__assert_fail@plt+0xfdc>
   1229c:	mov	r3, r0
   122a0:	lsl	r5, r3, #3
   122a4:	ldr	r3, [fp, #-20]	; 0xffffffec
   122a8:	sub	r3, r3, #1
   122ac:	str	r3, [fp, #-20]	; 0xffffffec
   122b0:	ldr	r3, [fp, #-20]	; 0xffffffec
   122b4:	cmp	r3, #0
   122b8:	beq	122e0 <__assert_fail@plt+0x1394>
   122bc:	ldr	r3, [fp, #-16]
   122c0:	add	r3, r3, #4
   122c4:	ldrb	r3, [r3]
   122c8:	mov	r0, r3
   122cc:	bl	11f28 <__assert_fail@plt+0xfdc>
   122d0:	mov	r3, r0
   122d4:	lsr	r3, r3, #5
   122d8:	uxtb	r3, r3
   122dc:	b	122e4 <__assert_fail@plt+0x1398>
   122e0:	mov	r3, #0
   122e4:	add	r3, r5, r3
   122e8:	and	r3, r3, #31
   122ec:	ldr	r2, [pc, #304]	; 12424 <__assert_fail@plt+0x14d8>
   122f0:	ldrb	r3, [r2, r3]
   122f4:	b	122fc <__assert_fail@plt+0x13b0>
   122f8:	mov	r3, #61	; 0x3d
   122fc:	strb	r3, [r4]
   12300:	ldr	r3, [fp, #-28]	; 0xffffffe4
   12304:	sub	r3, r3, #1
   12308:	str	r3, [fp, #-28]	; 0xffffffe4
   1230c:	ldr	r3, [fp, #-28]	; 0xffffffe4
   12310:	cmp	r3, #0
   12314:	beq	123f4 <__assert_fail@plt+0x14a8>
   12318:	ldr	r4, [fp, #-24]	; 0xffffffe8
   1231c:	add	r3, r4, #1
   12320:	str	r3, [fp, #-24]	; 0xffffffe8
   12324:	ldr	r3, [fp, #-20]	; 0xffffffec
   12328:	cmp	r3, #0
   1232c:	beq	12358 <__assert_fail@plt+0x140c>
   12330:	ldr	r3, [fp, #-16]
   12334:	add	r3, r3, #4
   12338:	ldrb	r3, [r3]
   1233c:	mov	r0, r3
   12340:	bl	11f28 <__assert_fail@plt+0xfdc>
   12344:	mov	r3, r0
   12348:	and	r3, r3, #31
   1234c:	ldr	r2, [pc, #208]	; 12424 <__assert_fail@plt+0x14d8>
   12350:	ldrb	r3, [r2, r3]
   12354:	b	1235c <__assert_fail@plt+0x1410>
   12358:	mov	r3, #61	; 0x3d
   1235c:	strb	r3, [r4]
   12360:	ldr	r3, [fp, #-28]	; 0xffffffe4
   12364:	sub	r3, r3, #1
   12368:	str	r3, [fp, #-28]	; 0xffffffe4
   1236c:	ldr	r3, [fp, #-28]	; 0xffffffe4
   12370:	cmp	r3, #0
   12374:	beq	123fc <__assert_fail@plt+0x14b0>
   12378:	ldr	r3, [fp, #-20]	; 0xffffffec
   1237c:	cmp	r3, #0
   12380:	beq	12390 <__assert_fail@plt+0x1444>
   12384:	ldr	r3, [fp, #-20]	; 0xffffffec
   12388:	sub	r3, r3, #1
   1238c:	str	r3, [fp, #-20]	; 0xffffffec
   12390:	ldr	r3, [fp, #-20]	; 0xffffffec
   12394:	cmp	r3, #0
   12398:	beq	123a8 <__assert_fail@plt+0x145c>
   1239c:	ldr	r3, [fp, #-16]
   123a0:	add	r3, r3, #5
   123a4:	str	r3, [fp, #-16]
   123a8:	ldr	r3, [fp, #-20]	; 0xffffffec
   123ac:	cmp	r3, #0
   123b0:	beq	12400 <__assert_fail@plt+0x14b4>
   123b4:	ldr	r3, [fp, #-28]	; 0xffffffe4
   123b8:	cmp	r3, #0
   123bc:	bne	11f70 <__assert_fail@plt+0x1024>
   123c0:	b	12400 <__assert_fail@plt+0x14b4>
   123c4:	nop			; (mov r0, r0)
   123c8:	b	12400 <__assert_fail@plt+0x14b4>
   123cc:	nop			; (mov r0, r0)
   123d0:	b	12400 <__assert_fail@plt+0x14b4>
   123d4:	nop			; (mov r0, r0)
   123d8:	b	12400 <__assert_fail@plt+0x14b4>
   123dc:	nop			; (mov r0, r0)
   123e0:	b	12400 <__assert_fail@plt+0x14b4>
   123e4:	nop			; (mov r0, r0)
   123e8:	b	12400 <__assert_fail@plt+0x14b4>
   123ec:	nop			; (mov r0, r0)
   123f0:	b	12400 <__assert_fail@plt+0x14b4>
   123f4:	nop			; (mov r0, r0)
   123f8:	b	12400 <__assert_fail@plt+0x14b4>
   123fc:	nop			; (mov r0, r0)
   12400:	ldr	r3, [fp, #-28]	; 0xffffffe4
   12404:	cmp	r3, #0
   12408:	beq	12418 <__assert_fail@plt+0x14cc>
   1240c:	ldr	r3, [fp, #-24]	; 0xffffffe8
   12410:	mov	r2, #0
   12414:	strb	r2, [r3]
   12418:	nop			; (mov r0, r0)
   1241c:	sub	sp, fp, #12
   12420:	pop	{r4, r5, fp, pc}
   12424:	andeq	r9, r1, ip, lsl #14
   12428:	push	{fp, lr}
   1242c:	add	fp, sp, #4
   12430:	sub	sp, sp, #24
   12434:	str	r0, [fp, #-16]
   12438:	str	r1, [fp, #-20]	; 0xffffffec
   1243c:	str	r2, [fp, #-24]	; 0xffffffe8
   12440:	ldr	r3, [fp, #-20]	; 0xffffffec
   12444:	ldr	r2, [pc, #344]	; 125a4 <__assert_fail@plt+0x1658>
   12448:	smull	r1, r2, r2, r3
   1244c:	asr	r2, r2, #1
   12450:	asr	r3, r3, #31
   12454:	sub	r0, r2, r3
   12458:	ldr	r1, [fp, #-20]	; 0xffffffec
   1245c:	ldr	r3, [pc, #320]	; 125a4 <__assert_fail@plt+0x1658>
   12460:	smull	r2, r3, r3, r1
   12464:	asr	r2, r3, #1
   12468:	asr	r3, r1, #31
   1246c:	sub	r2, r2, r3
   12470:	mov	r3, r2
   12474:	lsl	r3, r3, #2
   12478:	add	r3, r3, r2
   1247c:	sub	r2, r1, r3
   12480:	cmp	r2, #0
   12484:	movne	r3, #1
   12488:	moveq	r3, #0
   1248c:	uxtb	r3, r3
   12490:	add	r3, r0, r3
   12494:	str	r3, [fp, #-8]
   12498:	ldr	r3, [fp, #-8]
   1249c:	cmp	r3, #0
   124a0:	bge	124e0 <__assert_fail@plt+0x1594>
   124a4:	ldr	r3, [fp, #-8]
   124a8:	cmn	r3, #1
   124ac:	beq	124d0 <__assert_fail@plt+0x1584>
   124b0:	ldr	r1, [fp, #-8]
   124b4:	mov	r0, #-2147483648	; 0x80000000
   124b8:	bl	18abc <__assert_fail@plt+0x7b70>
   124bc:	mov	r3, r0
   124c0:	cmp	r3, #7
   124c4:	bgt	124d0 <__assert_fail@plt+0x1584>
   124c8:	mov	r3, #1
   124cc:	b	124d4 <__assert_fail@plt+0x1588>
   124d0:	mov	r3, #0
   124d4:	and	r3, r3, #1
   124d8:	uxtb	r3, r3
   124dc:	b	124f4 <__assert_fail@plt+0x15a8>
   124e0:	ldr	r3, [fp, #-8]
   124e4:	cmn	r3, #-268435455	; 0xf0000001
   124e8:	movgt	r3, #1
   124ec:	movle	r3, #0
   124f0:	uxtb	r3, r3
   124f4:	cmp	r3, #0
   124f8:	beq	1250c <__assert_fail@plt+0x15c0>
   124fc:	ldr	r3, [fp, #-8]
   12500:	lsl	r3, r3, #3
   12504:	str	r3, [fp, #-12]
   12508:	b	12524 <__assert_fail@plt+0x15d8>
   1250c:	ldr	r3, [fp, #-8]
   12510:	lsl	r3, r3, #3
   12514:	str	r3, [fp, #-12]
   12518:	ldr	r3, [fp, #-20]	; 0xffffffec
   1251c:	cmp	r3, #0
   12520:	bge	12538 <__assert_fail@plt+0x15ec>
   12524:	ldr	r3, [fp, #-24]	; 0xffffffe8
   12528:	mov	r2, #0
   1252c:	str	r2, [r3]
   12530:	mov	r3, #0
   12534:	b	12598 <__assert_fail@plt+0x164c>
   12538:	ldr	r3, [fp, #-12]
   1253c:	add	r3, r3, #1
   12540:	str	r3, [fp, #-12]
   12544:	ldr	r3, [fp, #-12]
   12548:	mov	r0, r3
   1254c:	bl	136ec <__assert_fail@plt+0x27a0>
   12550:	mov	r3, r0
   12554:	mov	r2, r3
   12558:	ldr	r3, [fp, #-24]	; 0xffffffe8
   1255c:	str	r2, [r3]
   12560:	ldr	r3, [fp, #-24]	; 0xffffffe8
   12564:	ldr	r3, [r3]
   12568:	cmp	r3, #0
   1256c:	bne	12578 <__assert_fail@plt+0x162c>
   12570:	ldr	r3, [fp, #-12]
   12574:	b	12598 <__assert_fail@plt+0x164c>
   12578:	ldr	r3, [fp, #-24]	; 0xffffffe8
   1257c:	ldr	r2, [r3]
   12580:	ldr	r3, [fp, #-12]
   12584:	ldr	r1, [fp, #-20]	; 0xffffffec
   12588:	ldr	r0, [fp, #-16]
   1258c:	bl	11f50 <__assert_fail@plt+0x1004>
   12590:	ldr	r3, [fp, #-12]
   12594:	sub	r3, r3, #1
   12598:	mov	r0, r3
   1259c:	sub	sp, fp, #4
   125a0:	pop	{fp, pc}
   125a4:	strbtvs	r6, [r6], -r7, ror #12
   125a8:	push	{fp, lr}
   125ac:	add	fp, sp, #4
   125b0:	sub	sp, sp, #8
   125b4:	mov	r3, r0
   125b8:	strb	r3, [fp, #-5]
   125bc:	ldrb	r3, [fp, #-5]
   125c0:	mov	r0, r3
   125c4:	bl	11f28 <__assert_fail@plt+0xfdc>
   125c8:	mov	r3, r0
   125cc:	mov	r2, r3
   125d0:	ldr	r3, [pc, #28]	; 125f4 <__assert_fail@plt+0x16a8>
   125d4:	ldrsb	r3, [r3, r2]
   125d8:	mvn	r3, r3
   125dc:	uxtb	r3, r3
   125e0:	lsr	r3, r3, #7
   125e4:	uxtb	r3, r3
   125e8:	mov	r0, r3
   125ec:	sub	sp, fp, #4
   125f0:	pop	{fp, pc}
   125f4:	andeq	r9, r1, ip, lsl #12
   125f8:	push	{fp}		; (str fp, [sp, #-4]!)
   125fc:	add	fp, sp, #0
   12600:	sub	sp, sp, #12
   12604:	str	r0, [fp, #-8]
   12608:	ldr	r3, [fp, #-8]
   1260c:	mov	r2, #0
   12610:	str	r2, [r3]
   12614:	nop			; (mov r0, r0)
   12618:	add	sp, fp, #0
   1261c:	pop	{fp}		; (ldr fp, [sp], #4)
   12620:	bx	lr
   12624:	push	{fp, lr}
   12628:	add	fp, sp, #4
   1262c:	sub	sp, sp, #32
   12630:	str	r0, [fp, #-24]	; 0xffffffe8
   12634:	str	r1, [fp, #-28]	; 0xffffffe4
   12638:	str	r2, [fp, #-32]	; 0xffffffe0
   1263c:	str	r3, [fp, #-36]	; 0xffffffdc
   12640:	ldr	r3, [fp, #-24]	; 0xffffffe8
   12644:	ldr	r3, [r3]
   12648:	cmp	r3, #8
   1264c:	bne	1265c <__assert_fail@plt+0x1710>
   12650:	ldr	r3, [fp, #-24]	; 0xffffffe8
   12654:	mov	r2, #0
   12658:	str	r2, [r3]
   1265c:	ldr	r3, [fp, #-24]	; 0xffffffe8
   12660:	ldr	r3, [r3]
   12664:	cmp	r3, #0
   12668:	bne	126d4 <__assert_fail@plt+0x1788>
   1266c:	ldr	r3, [fp, #-28]	; 0xffffffe4
   12670:	ldr	r3, [r3]
   12674:	str	r3, [fp, #-12]
   12678:	ldr	r3, [fp, #-32]	; 0xffffffe0
   1267c:	ldr	r2, [fp, #-28]	; 0xffffffe4
   12680:	ldr	r2, [r2]
   12684:	sub	r3, r3, r2
   12688:	cmp	r3, #7
   1268c:	ble	126d4 <__assert_fail@plt+0x1788>
   12690:	mov	r2, #8
   12694:	mov	r1, #10
   12698:	ldr	r0, [fp, #-12]
   1269c:	bl	10eb0 <memchr@plt>
   126a0:	mov	r3, r0
   126a4:	cmp	r3, #0
   126a8:	bne	126d4 <__assert_fail@plt+0x1788>
   126ac:	ldr	r3, [fp, #-28]	; 0xffffffe4
   126b0:	ldr	r3, [r3]
   126b4:	add	r2, r3, #8
   126b8:	ldr	r3, [fp, #-28]	; 0xffffffe4
   126bc:	str	r2, [r3]
   126c0:	ldr	r3, [fp, #-36]	; 0xffffffdc
   126c4:	mov	r2, #8
   126c8:	str	r2, [r3]
   126cc:	ldr	r3, [fp, #-12]
   126d0:	b	12774 <__assert_fail@plt+0x1828>
   126d4:	ldr	r3, [fp, #-28]	; 0xffffffe4
   126d8:	ldr	r3, [r3]
   126dc:	str	r3, [fp, #-8]
   126e0:	b	12738 <__assert_fail@plt+0x17ec>
   126e4:	ldr	r3, [fp, #-8]
   126e8:	add	r2, r3, #1
   126ec:	str	r2, [fp, #-8]
   126f0:	ldrb	r3, [r3]
   126f4:	strb	r3, [fp, #-13]
   126f8:	ldrb	r3, [fp, #-13]
   126fc:	cmp	r3, #10
   12700:	beq	12738 <__assert_fail@plt+0x17ec>
   12704:	ldr	r3, [fp, #-24]	; 0xffffffe8
   12708:	ldr	r3, [r3]
   1270c:	add	r1, r3, #1
   12710:	ldr	r2, [fp, #-24]	; 0xffffffe8
   12714:	str	r1, [r2]
   12718:	ldr	r2, [fp, #-24]	; 0xffffffe8
   1271c:	add	r3, r2, r3
   12720:	ldrb	r2, [fp, #-13]
   12724:	strb	r2, [r3, #4]
   12728:	ldr	r3, [fp, #-24]	; 0xffffffe8
   1272c:	ldr	r3, [r3]
   12730:	cmp	r3, #8
   12734:	beq	1274c <__assert_fail@plt+0x1800>
   12738:	ldr	r2, [fp, #-8]
   1273c:	ldr	r3, [fp, #-32]	; 0xffffffe0
   12740:	cmp	r2, r3
   12744:	bcc	126e4 <__assert_fail@plt+0x1798>
   12748:	b	12750 <__assert_fail@plt+0x1804>
   1274c:	nop			; (mov r0, r0)
   12750:	ldr	r3, [fp, #-28]	; 0xffffffe4
   12754:	ldr	r2, [fp, #-8]
   12758:	str	r2, [r3]
   1275c:	ldr	r3, [fp, #-24]	; 0xffffffe8
   12760:	ldr	r2, [r3]
   12764:	ldr	r3, [fp, #-36]	; 0xffffffdc
   12768:	str	r2, [r3]
   1276c:	ldr	r3, [fp, #-24]	; 0xffffffe8
   12770:	add	r3, r3, #4
   12774:	mov	r0, r3
   12778:	sub	sp, fp, #4
   1277c:	pop	{fp, pc}
   12780:	push	{r4, r5, fp, lr}
   12784:	add	fp, sp, #12
   12788:	sub	sp, sp, #24
   1278c:	str	r0, [fp, #-24]	; 0xffffffe8
   12790:	str	r1, [fp, #-28]	; 0xffffffe4
   12794:	str	r2, [fp, #-32]	; 0xffffffe0
   12798:	str	r3, [fp, #-36]	; 0xffffffdc
   1279c:	ldr	r3, [fp, #-32]	; 0xffffffe0
   127a0:	ldr	r3, [r3]
   127a4:	str	r3, [fp, #-16]
   127a8:	ldr	r3, [fp, #-28]	; 0xffffffe4
   127ac:	cmp	r3, #7
   127b0:	bgt	127bc <__assert_fail@plt+0x1870>
   127b4:	mov	r3, #0
   127b8:	b	12e08 <__assert_fail@plt+0x1ebc>
   127bc:	ldr	r3, [fp, #-24]	; 0xffffffe8
   127c0:	ldrb	r3, [r3]
   127c4:	mov	r0, r3
   127c8:	bl	125a8 <__assert_fail@plt+0x165c>
   127cc:	mov	r3, r0
   127d0:	eor	r3, r3, #1
   127d4:	uxtb	r3, r3
   127d8:	cmp	r3, #0
   127dc:	bne	12808 <__assert_fail@plt+0x18bc>
   127e0:	ldr	r3, [fp, #-24]	; 0xffffffe8
   127e4:	add	r3, r3, #1
   127e8:	ldrb	r3, [r3]
   127ec:	mov	r0, r3
   127f0:	bl	125a8 <__assert_fail@plt+0x165c>
   127f4:	mov	r3, r0
   127f8:	eor	r3, r3, #1
   127fc:	uxtb	r3, r3
   12800:	cmp	r3, #0
   12804:	beq	12810 <__assert_fail@plt+0x18c4>
   12808:	mov	r3, #0
   1280c:	b	12e08 <__assert_fail@plt+0x1ebc>
   12810:	ldr	r3, [fp, #-36]	; 0xffffffdc
   12814:	ldr	r3, [r3]
   12818:	cmp	r3, #0
   1281c:	beq	128a4 <__assert_fail@plt+0x1958>
   12820:	ldr	r4, [fp, #-16]
   12824:	add	r3, r4, #1
   12828:	str	r3, [fp, #-16]
   1282c:	ldr	r3, [fp, #-24]	; 0xffffffe8
   12830:	ldrb	r3, [r3]
   12834:	mov	r0, r3
   12838:	bl	11f28 <__assert_fail@plt+0xfdc>
   1283c:	mov	r3, r0
   12840:	mov	r2, r3
   12844:	ldr	r3, [pc, #1480]	; 12e14 <__assert_fail@plt+0x1ec8>
   12848:	ldrsb	r3, [r3, r2]
   1284c:	lsl	r3, r3, #3
   12850:	sxtb	r5, r3
   12854:	ldr	r3, [fp, #-24]	; 0xffffffe8
   12858:	add	r3, r3, #1
   1285c:	ldrb	r3, [r3]
   12860:	mov	r0, r3
   12864:	bl	11f28 <__assert_fail@plt+0xfdc>
   12868:	mov	r3, r0
   1286c:	mov	r2, r3
   12870:	ldr	r3, [pc, #1436]	; 12e14 <__assert_fail@plt+0x1ec8>
   12874:	ldrsb	r3, [r3, r2]
   12878:	asr	r3, r3, #2
   1287c:	sxtb	r3, r3
   12880:	orr	r3, r5, r3
   12884:	sxtb	r3, r3
   12888:	uxtb	r3, r3
   1288c:	strb	r3, [r4]
   12890:	ldr	r3, [fp, #-36]	; 0xffffffdc
   12894:	ldr	r3, [r3]
   12898:	sub	r2, r3, #1
   1289c:	ldr	r3, [fp, #-36]	; 0xffffffdc
   128a0:	str	r2, [r3]
   128a4:	ldr	r3, [fp, #-24]	; 0xffffffe8
   128a8:	add	r3, r3, #2
   128ac:	ldrb	r3, [r3]
   128b0:	cmp	r3, #61	; 0x3d
   128b4:	bne	12930 <__assert_fail@plt+0x19e4>
   128b8:	ldr	r3, [fp, #-24]	; 0xffffffe8
   128bc:	add	r3, r3, #3
   128c0:	ldrb	r3, [r3]
   128c4:	cmp	r3, #61	; 0x3d
   128c8:	bne	1291c <__assert_fail@plt+0x19d0>
   128cc:	ldr	r3, [fp, #-24]	; 0xffffffe8
   128d0:	add	r3, r3, #4
   128d4:	ldrb	r3, [r3]
   128d8:	cmp	r3, #61	; 0x3d
   128dc:	bne	1291c <__assert_fail@plt+0x19d0>
   128e0:	ldr	r3, [fp, #-24]	; 0xffffffe8
   128e4:	add	r3, r3, #5
   128e8:	ldrb	r3, [r3]
   128ec:	cmp	r3, #61	; 0x3d
   128f0:	bne	1291c <__assert_fail@plt+0x19d0>
   128f4:	ldr	r3, [fp, #-24]	; 0xffffffe8
   128f8:	add	r3, r3, #6
   128fc:	ldrb	r3, [r3]
   12900:	cmp	r3, #61	; 0x3d
   12904:	bne	1291c <__assert_fail@plt+0x19d0>
   12908:	ldr	r3, [fp, #-24]	; 0xffffffe8
   1290c:	add	r3, r3, #7
   12910:	ldrb	r3, [r3]
   12914:	cmp	r3, #61	; 0x3d
   12918:	beq	12df8 <__assert_fail@plt+0x1eac>
   1291c:	ldr	r3, [fp, #-32]	; 0xffffffe0
   12920:	ldr	r2, [fp, #-16]
   12924:	str	r2, [r3]
   12928:	mov	r3, #0
   1292c:	b	12e08 <__assert_fail@plt+0x1ebc>
   12930:	ldr	r3, [fp, #-24]	; 0xffffffe8
   12934:	add	r3, r3, #2
   12938:	ldrb	r3, [r3]
   1293c:	mov	r0, r3
   12940:	bl	125a8 <__assert_fail@plt+0x165c>
   12944:	mov	r3, r0
   12948:	eor	r3, r3, #1
   1294c:	uxtb	r3, r3
   12950:	cmp	r3, #0
   12954:	bne	12980 <__assert_fail@plt+0x1a34>
   12958:	ldr	r3, [fp, #-24]	; 0xffffffe8
   1295c:	add	r3, r3, #3
   12960:	ldrb	r3, [r3]
   12964:	mov	r0, r3
   12968:	bl	125a8 <__assert_fail@plt+0x165c>
   1296c:	mov	r3, r0
   12970:	eor	r3, r3, #1
   12974:	uxtb	r3, r3
   12978:	cmp	r3, #0
   1297c:	beq	12994 <__assert_fail@plt+0x1a48>
   12980:	ldr	r3, [fp, #-32]	; 0xffffffe0
   12984:	ldr	r2, [fp, #-16]
   12988:	str	r2, [r3]
   1298c:	mov	r3, #0
   12990:	b	12e08 <__assert_fail@plt+0x1ebc>
   12994:	ldr	r3, [fp, #-36]	; 0xffffffdc
   12998:	ldr	r3, [r3]
   1299c:	cmp	r3, #0
   129a0:	beq	12a60 <__assert_fail@plt+0x1b14>
   129a4:	ldr	r4, [fp, #-16]
   129a8:	add	r3, r4, #1
   129ac:	str	r3, [fp, #-16]
   129b0:	ldr	r3, [fp, #-24]	; 0xffffffe8
   129b4:	add	r3, r3, #1
   129b8:	ldrb	r3, [r3]
   129bc:	mov	r0, r3
   129c0:	bl	11f28 <__assert_fail@plt+0xfdc>
   129c4:	mov	r3, r0
   129c8:	mov	r2, r3
   129cc:	ldr	r3, [pc, #1088]	; 12e14 <__assert_fail@plt+0x1ec8>
   129d0:	ldrsb	r3, [r3, r2]
   129d4:	lsl	r3, r3, #6
   129d8:	sxtb	r5, r3
   129dc:	ldr	r3, [fp, #-24]	; 0xffffffe8
   129e0:	add	r3, r3, #2
   129e4:	ldrb	r3, [r3]
   129e8:	mov	r0, r3
   129ec:	bl	11f28 <__assert_fail@plt+0xfdc>
   129f0:	mov	r3, r0
   129f4:	mov	r2, r3
   129f8:	ldr	r3, [pc, #1044]	; 12e14 <__assert_fail@plt+0x1ec8>
   129fc:	ldrsb	r3, [r3, r2]
   12a00:	lsl	r3, r3, #1
   12a04:	sxtb	r3, r3
   12a08:	orr	r3, r5, r3
   12a0c:	sxtb	r5, r3
   12a10:	ldr	r3, [fp, #-24]	; 0xffffffe8
   12a14:	add	r3, r3, #3
   12a18:	ldrb	r3, [r3]
   12a1c:	mov	r0, r3
   12a20:	bl	11f28 <__assert_fail@plt+0xfdc>
   12a24:	mov	r3, r0
   12a28:	mov	r2, r3
   12a2c:	ldr	r3, [pc, #992]	; 12e14 <__assert_fail@plt+0x1ec8>
   12a30:	ldrsb	r3, [r3, r2]
   12a34:	asr	r3, r3, #4
   12a38:	sxtb	r3, r3
   12a3c:	orr	r3, r5, r3
   12a40:	sxtb	r3, r3
   12a44:	uxtb	r3, r3
   12a48:	strb	r3, [r4]
   12a4c:	ldr	r3, [fp, #-36]	; 0xffffffdc
   12a50:	ldr	r3, [r3]
   12a54:	sub	r2, r3, #1
   12a58:	ldr	r3, [fp, #-36]	; 0xffffffdc
   12a5c:	str	r2, [r3]
   12a60:	ldr	r3, [fp, #-24]	; 0xffffffe8
   12a64:	add	r3, r3, #4
   12a68:	ldrb	r3, [r3]
   12a6c:	cmp	r3, #61	; 0x3d
   12a70:	bne	12ac4 <__assert_fail@plt+0x1b78>
   12a74:	ldr	r3, [fp, #-24]	; 0xffffffe8
   12a78:	add	r3, r3, #5
   12a7c:	ldrb	r3, [r3]
   12a80:	cmp	r3, #61	; 0x3d
   12a84:	bne	12ab0 <__assert_fail@plt+0x1b64>
   12a88:	ldr	r3, [fp, #-24]	; 0xffffffe8
   12a8c:	add	r3, r3, #6
   12a90:	ldrb	r3, [r3]
   12a94:	cmp	r3, #61	; 0x3d
   12a98:	bne	12ab0 <__assert_fail@plt+0x1b64>
   12a9c:	ldr	r3, [fp, #-24]	; 0xffffffe8
   12aa0:	add	r3, r3, #7
   12aa4:	ldrb	r3, [r3]
   12aa8:	cmp	r3, #61	; 0x3d
   12aac:	beq	12df8 <__assert_fail@plt+0x1eac>
   12ab0:	ldr	r3, [fp, #-32]	; 0xffffffe0
   12ab4:	ldr	r2, [fp, #-16]
   12ab8:	str	r2, [r3]
   12abc:	mov	r3, #0
   12ac0:	b	12e08 <__assert_fail@plt+0x1ebc>
   12ac4:	ldr	r3, [fp, #-24]	; 0xffffffe8
   12ac8:	add	r3, r3, #4
   12acc:	ldrb	r3, [r3]
   12ad0:	mov	r0, r3
   12ad4:	bl	125a8 <__assert_fail@plt+0x165c>
   12ad8:	mov	r3, r0
   12adc:	eor	r3, r3, #1
   12ae0:	uxtb	r3, r3
   12ae4:	cmp	r3, #0
   12ae8:	beq	12b00 <__assert_fail@plt+0x1bb4>
   12aec:	ldr	r3, [fp, #-32]	; 0xffffffe0
   12af0:	ldr	r2, [fp, #-16]
   12af4:	str	r2, [r3]
   12af8:	mov	r3, #0
   12afc:	b	12e08 <__assert_fail@plt+0x1ebc>
   12b00:	ldr	r3, [fp, #-36]	; 0xffffffdc
   12b04:	ldr	r3, [r3]
   12b08:	cmp	r3, #0
   12b0c:	beq	12b98 <__assert_fail@plt+0x1c4c>
   12b10:	ldr	r4, [fp, #-16]
   12b14:	add	r3, r4, #1
   12b18:	str	r3, [fp, #-16]
   12b1c:	ldr	r3, [fp, #-24]	; 0xffffffe8
   12b20:	add	r3, r3, #3
   12b24:	ldrb	r3, [r3]
   12b28:	mov	r0, r3
   12b2c:	bl	11f28 <__assert_fail@plt+0xfdc>
   12b30:	mov	r3, r0
   12b34:	mov	r2, r3
   12b38:	ldr	r3, [pc, #724]	; 12e14 <__assert_fail@plt+0x1ec8>
   12b3c:	ldrsb	r3, [r3, r2]
   12b40:	lsl	r3, r3, #4
   12b44:	sxtb	r5, r3
   12b48:	ldr	r3, [fp, #-24]	; 0xffffffe8
   12b4c:	add	r3, r3, #4
   12b50:	ldrb	r3, [r3]
   12b54:	mov	r0, r3
   12b58:	bl	11f28 <__assert_fail@plt+0xfdc>
   12b5c:	mov	r3, r0
   12b60:	mov	r2, r3
   12b64:	ldr	r3, [pc, #680]	; 12e14 <__assert_fail@plt+0x1ec8>
   12b68:	ldrsb	r3, [r3, r2]
   12b6c:	asr	r3, r3, #1
   12b70:	sxtb	r3, r3
   12b74:	orr	r3, r5, r3
   12b78:	sxtb	r3, r3
   12b7c:	uxtb	r3, r3
   12b80:	strb	r3, [r4]
   12b84:	ldr	r3, [fp, #-36]	; 0xffffffdc
   12b88:	ldr	r3, [r3]
   12b8c:	sub	r2, r3, #1
   12b90:	ldr	r3, [fp, #-36]	; 0xffffffdc
   12b94:	str	r2, [r3]
   12b98:	ldr	r3, [fp, #-24]	; 0xffffffe8
   12b9c:	add	r3, r3, #5
   12ba0:	ldrb	r3, [r3]
   12ba4:	cmp	r3, #61	; 0x3d
   12ba8:	bne	12be8 <__assert_fail@plt+0x1c9c>
   12bac:	ldr	r3, [fp, #-24]	; 0xffffffe8
   12bb0:	add	r3, r3, #6
   12bb4:	ldrb	r3, [r3]
   12bb8:	cmp	r3, #61	; 0x3d
   12bbc:	bne	12bd4 <__assert_fail@plt+0x1c88>
   12bc0:	ldr	r3, [fp, #-24]	; 0xffffffe8
   12bc4:	add	r3, r3, #7
   12bc8:	ldrb	r3, [r3]
   12bcc:	cmp	r3, #61	; 0x3d
   12bd0:	beq	12df8 <__assert_fail@plt+0x1eac>
   12bd4:	ldr	r3, [fp, #-32]	; 0xffffffe0
   12bd8:	ldr	r2, [fp, #-16]
   12bdc:	str	r2, [r3]
   12be0:	mov	r3, #0
   12be4:	b	12e08 <__assert_fail@plt+0x1ebc>
   12be8:	ldr	r3, [fp, #-24]	; 0xffffffe8
   12bec:	add	r3, r3, #5
   12bf0:	ldrb	r3, [r3]
   12bf4:	mov	r0, r3
   12bf8:	bl	125a8 <__assert_fail@plt+0x165c>
   12bfc:	mov	r3, r0
   12c00:	eor	r3, r3, #1
   12c04:	uxtb	r3, r3
   12c08:	cmp	r3, #0
   12c0c:	bne	12c38 <__assert_fail@plt+0x1cec>
   12c10:	ldr	r3, [fp, #-24]	; 0xffffffe8
   12c14:	add	r3, r3, #6
   12c18:	ldrb	r3, [r3]
   12c1c:	mov	r0, r3
   12c20:	bl	125a8 <__assert_fail@plt+0x165c>
   12c24:	mov	r3, r0
   12c28:	eor	r3, r3, #1
   12c2c:	uxtb	r3, r3
   12c30:	cmp	r3, #0
   12c34:	beq	12c4c <__assert_fail@plt+0x1d00>
   12c38:	ldr	r3, [fp, #-32]	; 0xffffffe0
   12c3c:	ldr	r2, [fp, #-16]
   12c40:	str	r2, [r3]
   12c44:	mov	r3, #0
   12c48:	b	12e08 <__assert_fail@plt+0x1ebc>
   12c4c:	ldr	r3, [fp, #-36]	; 0xffffffdc
   12c50:	ldr	r3, [r3]
   12c54:	cmp	r3, #0
   12c58:	beq	12d18 <__assert_fail@plt+0x1dcc>
   12c5c:	ldr	r4, [fp, #-16]
   12c60:	add	r3, r4, #1
   12c64:	str	r3, [fp, #-16]
   12c68:	ldr	r3, [fp, #-24]	; 0xffffffe8
   12c6c:	add	r3, r3, #4
   12c70:	ldrb	r3, [r3]
   12c74:	mov	r0, r3
   12c78:	bl	11f28 <__assert_fail@plt+0xfdc>
   12c7c:	mov	r3, r0
   12c80:	mov	r2, r3
   12c84:	ldr	r3, [pc, #392]	; 12e14 <__assert_fail@plt+0x1ec8>
   12c88:	ldrsb	r3, [r3, r2]
   12c8c:	lsl	r3, r3, #7
   12c90:	sxtb	r5, r3
   12c94:	ldr	r3, [fp, #-24]	; 0xffffffe8
   12c98:	add	r3, r3, #5
   12c9c:	ldrb	r3, [r3]
   12ca0:	mov	r0, r3
   12ca4:	bl	11f28 <__assert_fail@plt+0xfdc>
   12ca8:	mov	r3, r0
   12cac:	mov	r2, r3
   12cb0:	ldr	r3, [pc, #348]	; 12e14 <__assert_fail@plt+0x1ec8>
   12cb4:	ldrsb	r3, [r3, r2]
   12cb8:	lsl	r3, r3, #2
   12cbc:	sxtb	r3, r3
   12cc0:	orr	r3, r5, r3
   12cc4:	sxtb	r5, r3
   12cc8:	ldr	r3, [fp, #-24]	; 0xffffffe8
   12ccc:	add	r3, r3, #6
   12cd0:	ldrb	r3, [r3]
   12cd4:	mov	r0, r3
   12cd8:	bl	11f28 <__assert_fail@plt+0xfdc>
   12cdc:	mov	r3, r0
   12ce0:	mov	r2, r3
   12ce4:	ldr	r3, [pc, #296]	; 12e14 <__assert_fail@plt+0x1ec8>
   12ce8:	ldrsb	r3, [r3, r2]
   12cec:	asr	r3, r3, #3
   12cf0:	sxtb	r3, r3
   12cf4:	orr	r3, r5, r3
   12cf8:	sxtb	r3, r3
   12cfc:	uxtb	r3, r3
   12d00:	strb	r3, [r4]
   12d04:	ldr	r3, [fp, #-36]	; 0xffffffdc
   12d08:	ldr	r3, [r3]
   12d0c:	sub	r2, r3, #1
   12d10:	ldr	r3, [fp, #-36]	; 0xffffffdc
   12d14:	str	r2, [r3]
   12d18:	ldr	r3, [fp, #-24]	; 0xffffffe8
   12d1c:	add	r3, r3, #7
   12d20:	ldrb	r3, [r3]
   12d24:	cmp	r3, #61	; 0x3d
   12d28:	beq	12df8 <__assert_fail@plt+0x1eac>
   12d2c:	ldr	r3, [fp, #-24]	; 0xffffffe8
   12d30:	add	r3, r3, #7
   12d34:	ldrb	r3, [r3]
   12d38:	mov	r0, r3
   12d3c:	bl	125a8 <__assert_fail@plt+0x165c>
   12d40:	mov	r3, r0
   12d44:	eor	r3, r3, #1
   12d48:	uxtb	r3, r3
   12d4c:	cmp	r3, #0
   12d50:	beq	12d68 <__assert_fail@plt+0x1e1c>
   12d54:	ldr	r3, [fp, #-32]	; 0xffffffe0
   12d58:	ldr	r2, [fp, #-16]
   12d5c:	str	r2, [r3]
   12d60:	mov	r3, #0
   12d64:	b	12e08 <__assert_fail@plt+0x1ebc>
   12d68:	ldr	r3, [fp, #-36]	; 0xffffffdc
   12d6c:	ldr	r3, [r3]
   12d70:	cmp	r3, #0
   12d74:	beq	12df8 <__assert_fail@plt+0x1eac>
   12d78:	ldr	r4, [fp, #-16]
   12d7c:	add	r3, r4, #1
   12d80:	str	r3, [fp, #-16]
   12d84:	ldr	r3, [fp, #-24]	; 0xffffffe8
   12d88:	add	r3, r3, #6
   12d8c:	ldrb	r3, [r3]
   12d90:	mov	r0, r3
   12d94:	bl	11f28 <__assert_fail@plt+0xfdc>
   12d98:	mov	r3, r0
   12d9c:	mov	r2, r3
   12da0:	ldr	r3, [pc, #108]	; 12e14 <__assert_fail@plt+0x1ec8>
   12da4:	ldrsb	r3, [r3, r2]
   12da8:	lsl	r3, r3, #5
   12dac:	sxtb	r5, r3
   12db0:	ldr	r3, [fp, #-24]	; 0xffffffe8
   12db4:	add	r3, r3, #7
   12db8:	ldrb	r3, [r3]
   12dbc:	mov	r0, r3
   12dc0:	bl	11f28 <__assert_fail@plt+0xfdc>
   12dc4:	mov	r3, r0
   12dc8:	mov	r2, r3
   12dcc:	ldr	r3, [pc, #64]	; 12e14 <__assert_fail@plt+0x1ec8>
   12dd0:	ldrsb	r3, [r3, r2]
   12dd4:	orr	r3, r5, r3
   12dd8:	sxtb	r3, r3
   12ddc:	uxtb	r3, r3
   12de0:	strb	r3, [r4]
   12de4:	ldr	r3, [fp, #-36]	; 0xffffffdc
   12de8:	ldr	r3, [r3]
   12dec:	sub	r2, r3, #1
   12df0:	ldr	r3, [fp, #-36]	; 0xffffffdc
   12df4:	str	r2, [r3]
   12df8:	ldr	r3, [fp, #-32]	; 0xffffffe0
   12dfc:	ldr	r2, [fp, #-16]
   12e00:	str	r2, [r3]
   12e04:	mov	r3, #1
   12e08:	mov	r0, r3
   12e0c:	sub	sp, fp, #12
   12e10:	pop	{r4, r5, fp, pc}
   12e14:	andeq	r9, r1, ip, lsl #12
   12e18:	push	{fp, lr}
   12e1c:	add	fp, sp, #4
   12e20:	sub	sp, sp, #48	; 0x30
   12e24:	str	r0, [fp, #-40]	; 0xffffffd8
   12e28:	str	r1, [fp, #-44]	; 0xffffffd4
   12e2c:	str	r2, [fp, #-48]	; 0xffffffd0
   12e30:	str	r3, [fp, #-52]	; 0xffffffcc
   12e34:	ldr	r3, [fp, #4]
   12e38:	ldr	r3, [r3]
   12e3c:	str	r3, [fp, #-32]	; 0xffffffe0
   12e40:	ldr	r3, [fp, #-40]	; 0xffffffd8
   12e44:	cmp	r3, #0
   12e48:	movne	r3, #1
   12e4c:	moveq	r3, #0
   12e50:	strb	r3, [fp, #-21]	; 0xffffffeb
   12e54:	mov	r3, #0
   12e58:	strb	r3, [fp, #-5]
   12e5c:	mov	r3, #0
   12e60:	str	r3, [fp, #-12]
   12e64:	ldrb	r3, [fp, #-21]	; 0xffffffeb
   12e68:	cmp	r3, #0
   12e6c:	beq	12e90 <__assert_fail@plt+0x1f44>
   12e70:	ldr	r3, [fp, #-40]	; 0xffffffd8
   12e74:	ldr	r3, [r3]
   12e78:	str	r3, [fp, #-12]
   12e7c:	ldr	r3, [fp, #-48]	; 0xffffffd0
   12e80:	cmp	r3, #0
   12e84:	moveq	r3, #1
   12e88:	movne	r3, #0
   12e8c:	strb	r3, [fp, #-5]
   12e90:	ldr	r3, [fp, #-32]	; 0xffffffe0
   12e94:	str	r3, [fp, #-16]
   12e98:	ldr	r3, [fp, #-12]
   12e9c:	cmp	r3, #0
   12ea0:	bne	12f08 <__assert_fail@plt+0x1fbc>
   12ea4:	ldrb	r3, [fp, #-5]
   12ea8:	eor	r3, r3, #1
   12eac:	uxtb	r3, r3
   12eb0:	cmp	r3, #0
   12eb4:	beq	12f08 <__assert_fail@plt+0x1fbc>
   12eb8:	ldr	r3, [fp, #-32]	; 0xffffffe0
   12ebc:	str	r3, [fp, #-16]
   12ec0:	ldr	r0, [fp, #-44]	; 0xffffffd4
   12ec4:	ldr	r1, [fp, #-48]	; 0xffffffd0
   12ec8:	sub	r3, fp, #32
   12ecc:	sub	r2, fp, #52	; 0x34
   12ed0:	bl	12780 <__assert_fail@plt+0x1834>
   12ed4:	mov	r3, r0
   12ed8:	eor	r3, r3, #1
   12edc:	uxtb	r3, r3
   12ee0:	cmp	r3, #0
   12ee4:	bne	12f04 <__assert_fail@plt+0x1fb8>
   12ee8:	ldr	r3, [fp, #-44]	; 0xffffffd4
   12eec:	add	r3, r3, #8
   12ef0:	str	r3, [fp, #-44]	; 0xffffffd4
   12ef4:	ldr	r3, [fp, #-48]	; 0xffffffd0
   12ef8:	sub	r3, r3, #8
   12efc:	str	r3, [fp, #-48]	; 0xffffffd0
   12f00:	b	12eb8 <__assert_fail@plt+0x1f6c>
   12f04:	nop			; (mov r0, r0)
   12f08:	ldr	r3, [fp, #-48]	; 0xffffffd0
   12f0c:	cmp	r3, #0
   12f10:	bne	12f28 <__assert_fail@plt+0x1fdc>
   12f14:	ldrb	r3, [fp, #-5]
   12f18:	eor	r3, r3, #1
   12f1c:	uxtb	r3, r3
   12f20:	cmp	r3, #0
   12f24:	bne	13050 <__assert_fail@plt+0x2104>
   12f28:	ldr	r3, [fp, #-48]	; 0xffffffd0
   12f2c:	cmp	r3, #0
   12f30:	beq	12f6c <__assert_fail@plt+0x2020>
   12f34:	ldr	r3, [fp, #-44]	; 0xffffffd4
   12f38:	ldrb	r3, [r3]
   12f3c:	cmp	r3, #10
   12f40:	bne	12f6c <__assert_fail@plt+0x2020>
   12f44:	ldrb	r3, [fp, #-21]	; 0xffffffeb
   12f48:	cmp	r3, #0
   12f4c:	beq	12f6c <__assert_fail@plt+0x2020>
   12f50:	ldr	r3, [fp, #-44]	; 0xffffffd4
   12f54:	add	r3, r3, #1
   12f58:	str	r3, [fp, #-44]	; 0xffffffd4
   12f5c:	ldr	r3, [fp, #-48]	; 0xffffffd0
   12f60:	sub	r3, r3, #1
   12f64:	str	r3, [fp, #-48]	; 0xffffffd0
   12f68:	b	1304c <__assert_fail@plt+0x2100>
   12f6c:	ldr	r2, [fp, #-52]	; 0xffffffcc
   12f70:	ldr	r3, [fp, #-32]	; 0xffffffe0
   12f74:	ldr	r1, [fp, #-16]
   12f78:	sub	r3, r1, r3
   12f7c:	rsb	r3, r3, #0
   12f80:	add	r3, r2, r3
   12f84:	str	r3, [fp, #-52]	; 0xffffffcc
   12f88:	ldr	r3, [fp, #-16]
   12f8c:	str	r3, [fp, #-32]	; 0xffffffe0
   12f90:	ldr	r3, [fp, #-44]	; 0xffffffd4
   12f94:	ldr	r2, [fp, #-48]	; 0xffffffd0
   12f98:	add	r3, r3, r2
   12f9c:	str	r3, [fp, #-28]	; 0xffffffe4
   12fa0:	ldrb	r3, [fp, #-21]	; 0xffffffeb
   12fa4:	cmp	r3, #0
   12fa8:	beq	12fc8 <__assert_fail@plt+0x207c>
   12fac:	sub	r3, fp, #48	; 0x30
   12fb0:	sub	r1, fp, #44	; 0x2c
   12fb4:	ldr	r2, [fp, #-28]	; 0xffffffe4
   12fb8:	ldr	r0, [fp, #-40]	; 0xffffffd8
   12fbc:	bl	12624 <__assert_fail@plt+0x16d8>
   12fc0:	str	r0, [fp, #-20]	; 0xffffffec
   12fc4:	b	12fd0 <__assert_fail@plt+0x2084>
   12fc8:	ldr	r3, [fp, #-44]	; 0xffffffd4
   12fcc:	str	r3, [fp, #-20]	; 0xffffffec
   12fd0:	ldr	r3, [fp, #-48]	; 0xffffffd0
   12fd4:	cmp	r3, #0
   12fd8:	beq	13008 <__assert_fail@plt+0x20bc>
   12fdc:	ldr	r3, [fp, #-48]	; 0xffffffd0
   12fe0:	cmp	r3, #7
   12fe4:	bgt	13014 <__assert_fail@plt+0x20c8>
   12fe8:	ldrb	r3, [fp, #-5]
   12fec:	eor	r3, r3, #1
   12ff0:	uxtb	r3, r3
   12ff4:	cmp	r3, #0
   12ff8:	beq	13014 <__assert_fail@plt+0x20c8>
   12ffc:	ldrb	r3, [fp, #-21]	; 0xffffffeb
   13000:	cmp	r3, #0
   13004:	beq	13014 <__assert_fail@plt+0x20c8>
   13008:	mov	r3, #0
   1300c:	str	r3, [fp, #-48]	; 0xffffffd0
   13010:	b	1305c <__assert_fail@plt+0x2110>
   13014:	ldr	r1, [fp, #-48]	; 0xffffffd0
   13018:	sub	r3, fp, #32
   1301c:	sub	r2, fp, #52	; 0x34
   13020:	ldr	r0, [fp, #-20]	; 0xffffffec
   13024:	bl	12780 <__assert_fail@plt+0x1834>
   13028:	mov	r3, r0
   1302c:	eor	r3, r3, #1
   13030:	uxtb	r3, r3
   13034:	cmp	r3, #0
   13038:	bne	13058 <__assert_fail@plt+0x210c>
   1303c:	ldr	r3, [fp, #-28]	; 0xffffffe4
   13040:	ldr	r2, [fp, #-44]	; 0xffffffd4
   13044:	sub	r3, r3, r2
   13048:	str	r3, [fp, #-48]	; 0xffffffd0
   1304c:	b	12e90 <__assert_fail@plt+0x1f44>
   13050:	nop			; (mov r0, r0)
   13054:	b	1305c <__assert_fail@plt+0x2110>
   13058:	nop			; (mov r0, r0)
   1305c:	ldr	r3, [fp, #4]
   13060:	ldr	r2, [r3]
   13064:	ldr	r3, [fp, #-32]	; 0xffffffe0
   13068:	sub	r2, r2, r3
   1306c:	ldr	r3, [fp, #4]
   13070:	str	r2, [r3]
   13074:	ldr	r3, [fp, #-48]	; 0xffffffd0
   13078:	cmp	r3, #0
   1307c:	moveq	r3, #1
   13080:	movne	r3, #0
   13084:	uxtb	r3, r3
   13088:	mov	r0, r3
   1308c:	sub	sp, fp, #4
   13090:	pop	{fp, pc}
   13094:	push	{fp, lr}
   13098:	add	fp, sp, #4
   1309c:	sub	sp, sp, #32
   130a0:	str	r0, [fp, #-16]
   130a4:	str	r1, [fp, #-20]	; 0xffffffec
   130a8:	str	r2, [fp, #-24]	; 0xffffffe8
   130ac:	str	r3, [fp, #-28]	; 0xffffffe4
   130b0:	ldr	r3, [fp, #-24]	; 0xffffffe8
   130b4:	asr	r3, r3, #3
   130b8:	add	r2, r3, #1
   130bc:	mov	r3, r2
   130c0:	lsl	r3, r3, #2
   130c4:	add	r3, r3, r2
   130c8:	str	r3, [fp, #-8]
   130cc:	ldr	r3, [fp, #-8]
   130d0:	mov	r0, r3
   130d4:	bl	136ec <__assert_fail@plt+0x27a0>
   130d8:	mov	r3, r0
   130dc:	mov	r2, r3
   130e0:	ldr	r3, [fp, #-28]	; 0xffffffe4
   130e4:	str	r2, [r3]
   130e8:	ldr	r3, [fp, #-28]	; 0xffffffe4
   130ec:	ldr	r3, [r3]
   130f0:	cmp	r3, #0
   130f4:	bne	13100 <__assert_fail@plt+0x21b4>
   130f8:	mov	r3, #1
   130fc:	b	13178 <__assert_fail@plt+0x222c>
   13100:	ldr	r3, [fp, #-28]	; 0xffffffe4
   13104:	ldr	r2, [r3]
   13108:	sub	r3, fp, #8
   1310c:	str	r3, [sp]
   13110:	mov	r3, r2
   13114:	ldr	r2, [fp, #-24]	; 0xffffffe8
   13118:	ldr	r1, [fp, #-20]	; 0xffffffec
   1311c:	ldr	r0, [fp, #-16]
   13120:	bl	12e18 <__assert_fail@plt+0x1ecc>
   13124:	mov	r3, r0
   13128:	eor	r3, r3, #1
   1312c:	uxtb	r3, r3
   13130:	cmp	r3, #0
   13134:	beq	1315c <__assert_fail@plt+0x2210>
   13138:	ldr	r3, [fp, #-28]	; 0xffffffe4
   1313c:	ldr	r3, [r3]
   13140:	mov	r0, r3
   13144:	bl	13558 <__assert_fail@plt+0x260c>
   13148:	ldr	r3, [fp, #-28]	; 0xffffffe4
   1314c:	mov	r2, #0
   13150:	str	r2, [r3]
   13154:	mov	r3, #0
   13158:	b	13178 <__assert_fail@plt+0x222c>
   1315c:	ldr	r3, [fp, #4]
   13160:	cmp	r3, #0
   13164:	beq	13174 <__assert_fail@plt+0x2228>
   13168:	ldr	r2, [fp, #-8]
   1316c:	ldr	r3, [fp, #4]
   13170:	str	r2, [r3]
   13174:	mov	r3, #1
   13178:	mov	r0, r3
   1317c:	sub	sp, fp, #4
   13180:	pop	{fp, pc}
   13184:	push	{fp}		; (str fp, [sp, #-4]!)
   13188:	add	fp, sp, #0
   1318c:	sub	sp, sp, #12
   13190:	str	r0, [fp, #-8]
   13194:	ldr	r2, [pc, #20]	; 131b0 <__assert_fail@plt+0x2264>
   13198:	ldr	r3, [fp, #-8]
   1319c:	str	r3, [r2]
   131a0:	nop			; (mov r0, r0)
   131a4:	add	sp, fp, #0
   131a8:	pop	{fp}		; (ldr fp, [sp], #4)
   131ac:	bx	lr
   131b0:	andeq	sl, r2, r0, ror #2
   131b4:	push	{fp}		; (str fp, [sp, #-4]!)
   131b8:	add	fp, sp, #0
   131bc:	sub	sp, sp, #12
   131c0:	mov	r3, r0
   131c4:	strb	r3, [fp, #-5]
   131c8:	ldr	r2, [pc, #20]	; 131e4 <__assert_fail@plt+0x2298>
   131cc:	ldrb	r3, [fp, #-5]
   131d0:	strb	r3, [r2]
   131d4:	nop			; (mov r0, r0)
   131d8:	add	sp, fp, #0
   131dc:	pop	{fp}		; (ldr fp, [sp], #4)
   131e0:	bx	lr
   131e4:	andeq	sl, r2, r4, ror #2
   131e8:	push	{r4, fp, lr}
   131ec:	add	fp, sp, #8
   131f0:	sub	sp, sp, #20
   131f4:	ldr	r3, [pc, #256]	; 132fc <__assert_fail@plt+0x23b0>
   131f8:	ldr	r3, [r3]
   131fc:	mov	r0, r3
   13200:	bl	17fd8 <__assert_fail@plt+0x708c>
   13204:	mov	r3, r0
   13208:	cmp	r3, #0
   1320c:	beq	132c4 <__assert_fail@plt+0x2378>
   13210:	ldr	r3, [pc, #232]	; 13300 <__assert_fail@plt+0x23b4>
   13214:	ldrb	r3, [r3]
   13218:	eor	r3, r3, #1
   1321c:	uxtb	r3, r3
   13220:	cmp	r3, #0
   13224:	bne	1323c <__assert_fail@plt+0x22f0>
   13228:	bl	10e80 <__errno_location@plt>
   1322c:	mov	r3, r0
   13230:	ldr	r3, [r3]
   13234:	cmp	r3, #32
   13238:	beq	132c4 <__assert_fail@plt+0x2378>
   1323c:	ldr	r0, [pc, #192]	; 13304 <__assert_fail@plt+0x23b8>
   13240:	bl	10e50 <gettext@plt>
   13244:	str	r0, [fp, #-16]
   13248:	ldr	r3, [pc, #184]	; 13308 <__assert_fail@plt+0x23bc>
   1324c:	ldr	r3, [r3]
   13250:	cmp	r3, #0
   13254:	beq	13298 <__assert_fail@plt+0x234c>
   13258:	bl	10e80 <__errno_location@plt>
   1325c:	mov	r3, r0
   13260:	ldr	r4, [r3]
   13264:	ldr	r3, [pc, #156]	; 13308 <__assert_fail@plt+0x23bc>
   13268:	ldr	r3, [r3]
   1326c:	mov	r0, r3
   13270:	bl	15c64 <__assert_fail@plt+0x4d18>
   13274:	mov	r2, r0
   13278:	ldr	r3, [fp, #-16]
   1327c:	str	r3, [sp]
   13280:	mov	r3, r2
   13284:	ldr	r2, [pc, #128]	; 1330c <__assert_fail@plt+0x23c0>
   13288:	mov	r1, r4
   1328c:	mov	r0, #0
   13290:	bl	10df0 <error@plt>
   13294:	b	132b4 <__assert_fail@plt+0x2368>
   13298:	bl	10e80 <__errno_location@plt>
   1329c:	mov	r3, r0
   132a0:	ldr	r1, [r3]
   132a4:	ldr	r3, [fp, #-16]
   132a8:	ldr	r2, [pc, #96]	; 13310 <__assert_fail@plt+0x23c4>
   132ac:	mov	r0, #0
   132b0:	bl	10df0 <error@plt>
   132b4:	ldr	r3, [pc, #88]	; 13314 <__assert_fail@plt+0x23c8>
   132b8:	ldr	r3, [r3]
   132bc:	mov	r0, r3
   132c0:	bl	10d3c <_exit@plt>
   132c4:	ldr	r3, [pc, #76]	; 13318 <__assert_fail@plt+0x23cc>
   132c8:	ldr	r3, [r3]
   132cc:	mov	r0, r3
   132d0:	bl	17fd8 <__assert_fail@plt+0x708c>
   132d4:	mov	r3, r0
   132d8:	cmp	r3, #0
   132dc:	beq	132f0 <__assert_fail@plt+0x23a4>
   132e0:	ldr	r3, [pc, #44]	; 13314 <__assert_fail@plt+0x23c8>
   132e4:	ldr	r3, [r3]
   132e8:	mov	r0, r3
   132ec:	bl	10d3c <_exit@plt>
   132f0:	nop			; (mov r0, r0)
   132f4:	sub	sp, fp, #8
   132f8:	pop	{r4, fp, pc}
   132fc:	andeq	sl, r2, r4, asr r1
   13300:	andeq	sl, r2, r4, ror #2
   13304:	andeq	r9, r1, ip, lsr #14
   13308:	andeq	sl, r2, r0, ror #2
   1330c:	andeq	r9, r1, r8, lsr r7
   13310:	andeq	r9, r1, r0, asr #14
   13314:	strdeq	sl, [r2], -r4
   13318:	andeq	sl, r2, r8, asr #2
   1331c:	push	{fp, lr}
   13320:	add	fp, sp, #4
   13324:	sub	sp, sp, #40	; 0x28
   13328:	str	r0, [fp, #-16]
   1332c:	strd	r2, [fp, #-28]	; 0xffffffe4
   13330:	ldr	r3, [fp, #12]
   13334:	str	r3, [sp, #8]
   13338:	ldrd	r2, [fp, #4]
   1333c:	strd	r2, [sp]
   13340:	ldrd	r2, [fp, #-28]	; 0xffffffe4
   13344:	ldr	r0, [fp, #-16]
   13348:	bl	10d00 <posix_fadvise64@plt>
   1334c:	str	r0, [fp, #-8]
   13350:	nop			; (mov r0, r0)
   13354:	sub	sp, fp, #4
   13358:	pop	{fp, pc}
   1335c:	push	{fp, lr}
   13360:	add	fp, sp, #4
   13364:	sub	sp, sp, #24
   13368:	str	r0, [fp, #-8]
   1336c:	str	r1, [fp, #-12]
   13370:	ldr	r3, [fp, #-8]
   13374:	cmp	r3, #0
   13378:	beq	133ac <__assert_fail@plt+0x2460>
   1337c:	ldr	r0, [fp, #-8]
   13380:	bl	10ea4 <fileno@plt>
   13384:	mov	r1, r0
   13388:	ldr	r3, [fp, #-12]
   1338c:	str	r3, [sp, #8]
   13390:	mov	r2, #0
   13394:	mov	r3, #0
   13398:	strd	r2, [sp]
   1339c:	mov	r2, #0
   133a0:	mov	r3, #0
   133a4:	mov	r0, r1
   133a8:	bl	1331c <__assert_fail@plt+0x23d0>
   133ac:	nop			; (mov r0, r0)
   133b0:	sub	sp, fp, #4
   133b4:	pop	{fp, pc}
   133b8:	push	{fp, lr}
   133bc:	add	fp, sp, #4
   133c0:	sub	sp, sp, #32
   133c4:	str	r0, [fp, #-24]	; 0xffffffe8
   133c8:	mov	r3, #0
   133cc:	str	r3, [fp, #-8]
   133d0:	mov	r3, #0
   133d4:	str	r3, [fp, #-12]
   133d8:	ldr	r0, [fp, #-24]	; 0xffffffe8
   133dc:	bl	10ea4 <fileno@plt>
   133e0:	str	r0, [fp, #-16]
   133e4:	ldr	r3, [fp, #-16]
   133e8:	cmp	r3, #0
   133ec:	bge	13400 <__assert_fail@plt+0x24b4>
   133f0:	ldr	r0, [fp, #-24]	; 0xffffffe8
   133f4:	bl	10ec8 <fclose@plt>
   133f8:	mov	r3, r0
   133fc:	b	134a4 <__assert_fail@plt+0x2558>
   13400:	ldr	r0, [fp, #-24]	; 0xffffffe8
   13404:	bl	10e14 <__freading@plt>
   13408:	mov	r3, r0
   1340c:	cmp	r3, #0
   13410:	beq	1344c <__assert_fail@plt+0x2500>
   13414:	ldr	r0, [fp, #-24]	; 0xffffffe8
   13418:	bl	10ea4 <fileno@plt>
   1341c:	mov	r1, r0
   13420:	mov	r3, #1
   13424:	str	r3, [sp]
   13428:	mov	r2, #0
   1342c:	mov	r3, #0
   13430:	mov	r0, r1
   13434:	bl	10db4 <lseek64@plt>
   13438:	mvn	r2, #0
   1343c:	mvn	r3, #0
   13440:	cmp	r1, r3
   13444:	cmpeq	r0, r2
   13448:	beq	13470 <__assert_fail@plt+0x2524>
   1344c:	ldr	r0, [fp, #-24]	; 0xffffffe8
   13450:	bl	134f8 <__assert_fail@plt+0x25ac>
   13454:	mov	r3, r0
   13458:	cmp	r3, #0
   1345c:	beq	13470 <__assert_fail@plt+0x2524>
   13460:	bl	10e80 <__errno_location@plt>
   13464:	mov	r3, r0
   13468:	ldr	r3, [r3]
   1346c:	str	r3, [fp, #-8]
   13470:	ldr	r0, [fp, #-24]	; 0xffffffe8
   13474:	bl	10ec8 <fclose@plt>
   13478:	str	r0, [fp, #-12]
   1347c:	ldr	r3, [fp, #-8]
   13480:	cmp	r3, #0
   13484:	beq	134a0 <__assert_fail@plt+0x2554>
   13488:	bl	10e80 <__errno_location@plt>
   1348c:	mov	r2, r0
   13490:	ldr	r3, [fp, #-8]
   13494:	str	r3, [r2]
   13498:	mvn	r3, #0
   1349c:	str	r3, [fp, #-12]
   134a0:	ldr	r3, [fp, #-12]
   134a4:	mov	r0, r3
   134a8:	sub	sp, fp, #4
   134ac:	pop	{fp, pc}
   134b0:	push	{fp, lr}
   134b4:	add	fp, sp, #4
   134b8:	sub	sp, sp, #16
   134bc:	str	r0, [fp, #-8]
   134c0:	ldr	r3, [fp, #-8]
   134c4:	ldr	r3, [r3]
   134c8:	and	r3, r3, #256	; 0x100
   134cc:	cmp	r3, #0
   134d0:	beq	134ec <__assert_fail@plt+0x25a0>
   134d4:	mov	r3, #1
   134d8:	str	r3, [sp]
   134dc:	mov	r2, #0
   134e0:	mov	r3, #0
   134e4:	ldr	r0, [fp, #-8]
   134e8:	bl	135e4 <__assert_fail@plt+0x2698>
   134ec:	nop			; (mov r0, r0)
   134f0:	sub	sp, fp, #4
   134f4:	pop	{fp, pc}
   134f8:	push	{fp, lr}
   134fc:	add	fp, sp, #4
   13500:	sub	sp, sp, #8
   13504:	str	r0, [fp, #-8]
   13508:	ldr	r3, [fp, #-8]
   1350c:	cmp	r3, #0
   13510:	beq	13528 <__assert_fail@plt+0x25dc>
   13514:	ldr	r0, [fp, #-8]
   13518:	bl	10e14 <__freading@plt>
   1351c:	mov	r3, r0
   13520:	cmp	r3, #0
   13524:	bne	13538 <__assert_fail@plt+0x25ec>
   13528:	ldr	r0, [fp, #-8]
   1352c:	bl	10d18 <fflush@plt>
   13530:	mov	r3, r0
   13534:	b	1354c <__assert_fail@plt+0x2600>
   13538:	ldr	r0, [fp, #-8]
   1353c:	bl	134b0 <__assert_fail@plt+0x2564>
   13540:	ldr	r0, [fp, #-8]
   13544:	bl	10d18 <fflush@plt>
   13548:	mov	r3, r0
   1354c:	mov	r0, r3
   13550:	sub	sp, fp, #4
   13554:	pop	{fp, pc}
   13558:	push	{r4, fp, lr}
   1355c:	add	fp, sp, #8
   13560:	sub	sp, sp, #20
   13564:	str	r0, [fp, #-24]	; 0xffffffe8
   13568:	bl	10e80 <__errno_location@plt>
   1356c:	mov	r3, r0
   13570:	ldr	r3, [r3]
   13574:	str	r3, [fp, #-20]	; 0xffffffec
   13578:	bl	10e80 <__errno_location@plt>
   1357c:	mov	r3, r0
   13580:	ldr	r3, [r3]
   13584:	str	r3, [fp, #-16]
   13588:	bl	10e80 <__errno_location@plt>
   1358c:	mov	r2, r0
   13590:	mov	r3, #0
   13594:	str	r3, [r2]
   13598:	ldr	r0, [fp, #-24]	; 0xffffffe8
   1359c:	bl	10d30 <free@plt>
   135a0:	bl	10e80 <__errno_location@plt>
   135a4:	mov	r4, r0
   135a8:	bl	10e80 <__errno_location@plt>
   135ac:	mov	r3, r0
   135b0:	ldr	r3, [r3]
   135b4:	cmp	r3, #0
   135b8:	moveq	r3, #1
   135bc:	movne	r3, #0
   135c0:	uxtb	r3, r3
   135c4:	lsl	r3, r3, #2
   135c8:	sub	r2, fp, #12
   135cc:	add	r3, r2, r3
   135d0:	ldr	r3, [r3, #-8]
   135d4:	str	r3, [r4]
   135d8:	nop			; (mov r0, r0)
   135dc:	sub	sp, fp, #8
   135e0:	pop	{r4, fp, pc}
   135e4:	push	{fp, lr}
   135e8:	add	fp, sp, #4
   135ec:	sub	sp, sp, #32
   135f0:	str	r0, [fp, #-16]
   135f4:	strd	r2, [fp, #-28]	; 0xffffffe4
   135f8:	ldr	r3, [fp, #-16]
   135fc:	ldr	r2, [r3, #8]
   13600:	ldr	r3, [fp, #-16]
   13604:	ldr	r3, [r3, #4]
   13608:	cmp	r2, r3
   1360c:	bne	136a4 <__assert_fail@plt+0x2758>
   13610:	ldr	r3, [fp, #-16]
   13614:	ldr	r2, [r3, #20]
   13618:	ldr	r3, [fp, #-16]
   1361c:	ldr	r3, [r3, #16]
   13620:	cmp	r2, r3
   13624:	bne	136a4 <__assert_fail@plt+0x2758>
   13628:	ldr	r3, [fp, #-16]
   1362c:	ldr	r3, [r3, #36]	; 0x24
   13630:	cmp	r3, #0
   13634:	bne	136a4 <__assert_fail@plt+0x2758>
   13638:	ldr	r0, [fp, #-16]
   1363c:	bl	10ea4 <fileno@plt>
   13640:	mov	r1, r0
   13644:	ldr	r3, [fp, #4]
   13648:	str	r3, [sp]
   1364c:	ldrd	r2, [fp, #-28]	; 0xffffffe4
   13650:	mov	r0, r1
   13654:	bl	10db4 <lseek64@plt>
   13658:	strd	r0, [fp, #-12]
   1365c:	ldrd	r2, [fp, #-12]
   13660:	mvn	r0, #0
   13664:	mvn	r1, #0
   13668:	cmp	r3, r1
   1366c:	cmpeq	r2, r0
   13670:	bne	1367c <__assert_fail@plt+0x2730>
   13674:	mvn	r3, #0
   13678:	b	136bc <__assert_fail@plt+0x2770>
   1367c:	ldr	r3, [fp, #-16]
   13680:	ldr	r3, [r3]
   13684:	bic	r2, r3, #16
   13688:	ldr	r3, [fp, #-16]
   1368c:	str	r2, [r3]
   13690:	ldr	r1, [fp, #-16]
   13694:	ldrd	r2, [fp, #-12]
   13698:	strd	r2, [r1, #80]	; 0x50
   1369c:	mov	r3, #0
   136a0:	b	136bc <__assert_fail@plt+0x2770>
   136a4:	ldr	r3, [fp, #4]
   136a8:	str	r3, [sp]
   136ac:	ldrd	r2, [fp, #-28]	; 0xffffffe4
   136b0:	ldr	r0, [fp, #-16]
   136b4:	bl	10ed4 <fseeko64@plt>
   136b8:	mov	r3, r0
   136bc:	mov	r0, r3
   136c0:	sub	sp, fp, #4
   136c4:	pop	{fp, pc}
   136c8:	push	{fp, lr}
   136cc:	add	fp, sp, #4
   136d0:	bl	10e80 <__errno_location@plt>
   136d4:	mov	r2, r0
   136d8:	mov	r3, #12
   136dc:	str	r3, [r2]
   136e0:	mov	r3, #0
   136e4:	mov	r0, r3
   136e8:	pop	{fp, pc}
   136ec:	push	{fp, lr}
   136f0:	add	fp, sp, #4
   136f4:	sub	sp, sp, #8
   136f8:	str	r0, [fp, #-8]
   136fc:	ldr	r3, [fp, #-8]
   13700:	mov	r0, r3
   13704:	bl	17d70 <__assert_fail@plt+0x6e24>
   13708:	mov	r3, r0
   1370c:	mov	r0, r3
   13710:	sub	sp, fp, #4
   13714:	pop	{fp, pc}
   13718:	push	{fp, lr}
   1371c:	add	fp, sp, #4
   13720:	sub	sp, sp, #8
   13724:	str	r0, [fp, #-8]
   13728:	str	r1, [fp, #-12]
   1372c:	ldr	r3, [fp, #-12]
   13730:	cmp	r3, #0
   13734:	moveq	r3, #1
   13738:	movne	r3, #0
   1373c:	uxtb	r3, r3
   13740:	mov	r2, r3
   13744:	ldr	r3, [fp, #-12]
   13748:	orr	r3, r2, r3
   1374c:	mov	r1, r3
   13750:	ldr	r0, [fp, #-8]
   13754:	bl	17e18 <__assert_fail@plt+0x6ecc>
   13758:	mov	r3, r0
   1375c:	mov	r0, r3
   13760:	sub	sp, fp, #4
   13764:	pop	{fp, pc}
   13768:	push	{fp, lr}
   1376c:	add	fp, sp, #4
   13770:	sub	sp, sp, #8
   13774:	str	r0, [fp, #-8]
   13778:	str	r1, [fp, #-12]
   1377c:	ldr	r3, [fp, #-8]
   13780:	ldr	r2, [fp, #-12]
   13784:	mov	r1, r2
   13788:	mov	r0, r3
   1378c:	bl	17cac <__assert_fail@plt+0x6d60>
   13790:	mov	r3, r0
   13794:	mov	r0, r3
   13798:	sub	sp, fp, #4
   1379c:	pop	{fp, pc}
   137a0:	push	{fp, lr}
   137a4:	add	fp, sp, #4
   137a8:	sub	sp, sp, #16
   137ac:	str	r0, [fp, #-8]
   137b0:	str	r1, [fp, #-12]
   137b4:	str	r2, [fp, #-16]
   137b8:	ldr	r3, [fp, #-12]
   137bc:	cmp	r3, #0
   137c0:	beq	137d0 <__assert_fail@plt+0x2884>
   137c4:	ldr	r3, [fp, #-16]
   137c8:	cmp	r3, #0
   137cc:	bne	137e0 <__assert_fail@plt+0x2894>
   137d0:	mov	r3, #1
   137d4:	str	r3, [fp, #-16]
   137d8:	ldr	r3, [fp, #-16]
   137dc:	str	r3, [fp, #-12]
   137e0:	ldr	r3, [fp, #-12]
   137e4:	ldr	r2, [fp, #-16]
   137e8:	mov	r1, r3
   137ec:	ldr	r0, [fp, #-8]
   137f0:	bl	15f60 <__assert_fail@plt+0x5014>
   137f4:	mov	r3, r0
   137f8:	mov	r0, r3
   137fc:	sub	sp, fp, #4
   13800:	pop	{fp, pc}
   13804:	push	{fp, lr}
   13808:	add	fp, sp, #4
   1380c:	sub	sp, sp, #16
   13810:	str	r0, [fp, #-16]
   13814:	ldr	r3, [fp, #-16]
   13818:	cmp	r3, #0
   1381c:	bne	1383c <__assert_fail@plt+0x28f0>
   13820:	ldr	r3, [pc, #220]	; 13904 <__assert_fail@plt+0x29b8>
   13824:	ldr	r3, [r3]
   13828:	mov	r2, #55	; 0x37
   1382c:	mov	r1, #1
   13830:	ldr	r0, [pc, #208]	; 13908 <__assert_fail@plt+0x29bc>
   13834:	bl	10da8 <fwrite@plt>
   13838:	bl	10f34 <abort@plt>
   1383c:	mov	r1, #47	; 0x2f
   13840:	ldr	r0, [fp, #-16]
   13844:	bl	10eec <strrchr@plt>
   13848:	str	r0, [fp, #-8]
   1384c:	ldr	r3, [fp, #-8]
   13850:	cmp	r3, #0
   13854:	beq	13864 <__assert_fail@plt+0x2918>
   13858:	ldr	r3, [fp, #-8]
   1385c:	add	r3, r3, #1
   13860:	b	13868 <__assert_fail@plt+0x291c>
   13864:	ldr	r3, [fp, #-16]
   13868:	str	r3, [fp, #-12]
   1386c:	ldr	r2, [fp, #-12]
   13870:	ldr	r3, [fp, #-16]
   13874:	sub	r3, r2, r3
   13878:	cmp	r3, #6
   1387c:	ble	138e0 <__assert_fail@plt+0x2994>
   13880:	ldr	r3, [fp, #-12]
   13884:	sub	r3, r3, #7
   13888:	mov	r2, #7
   1388c:	ldr	r1, [pc, #120]	; 1390c <__assert_fail@plt+0x29c0>
   13890:	mov	r0, r3
   13894:	bl	10f28 <strncmp@plt>
   13898:	mov	r3, r0
   1389c:	cmp	r3, #0
   138a0:	bne	138e0 <__assert_fail@plt+0x2994>
   138a4:	ldr	r3, [fp, #-12]
   138a8:	str	r3, [fp, #-16]
   138ac:	mov	r2, #3
   138b0:	ldr	r1, [pc, #88]	; 13910 <__assert_fail@plt+0x29c4>
   138b4:	ldr	r0, [fp, #-12]
   138b8:	bl	10f28 <strncmp@plt>
   138bc:	mov	r3, r0
   138c0:	cmp	r3, #0
   138c4:	bne	138e0 <__assert_fail@plt+0x2994>
   138c8:	ldr	r3, [fp, #-12]
   138cc:	add	r3, r3, #3
   138d0:	str	r3, [fp, #-16]
   138d4:	ldr	r2, [pc, #56]	; 13914 <__assert_fail@plt+0x29c8>
   138d8:	ldr	r3, [fp, #-16]
   138dc:	str	r3, [r2]
   138e0:	ldr	r2, [pc, #48]	; 13918 <__assert_fail@plt+0x29cc>
   138e4:	ldr	r3, [fp, #-16]
   138e8:	str	r3, [r2]
   138ec:	ldr	r2, [pc, #40]	; 1391c <__assert_fail@plt+0x29d0>
   138f0:	ldr	r3, [fp, #-16]
   138f4:	str	r3, [r2]
   138f8:	nop			; (mov r0, r0)
   138fc:	sub	sp, fp, #4
   13900:	pop	{fp, pc}
   13904:	andeq	sl, r2, r8, asr #2
   13908:	andeq	r9, r1, r4, asr #14
   1390c:	andeq	r9, r1, ip, ror r7
   13910:	andeq	r9, r1, r4, lsl #15
   13914:	andeq	sl, r2, r8, lsr r1
   13918:	andeq	sl, r2, r8, ror #2
   1391c:	andeq	sl, r2, ip, lsr r1
   13920:	push	{fp, lr}
   13924:	add	fp, sp, #4
   13928:	sub	sp, sp, #16
   1392c:	str	r0, [fp, #-16]
   13930:	bl	10e80 <__errno_location@plt>
   13934:	mov	r3, r0
   13938:	ldr	r3, [r3]
   1393c:	str	r3, [fp, #-8]
   13940:	ldr	r3, [fp, #-16]
   13944:	cmp	r3, #0
   13948:	beq	13954 <__assert_fail@plt+0x2a08>
   1394c:	ldr	r3, [fp, #-16]
   13950:	b	13958 <__assert_fail@plt+0x2a0c>
   13954:	ldr	r3, [pc, #48]	; 1398c <__assert_fail@plt+0x2a40>
   13958:	mov	r1, #48	; 0x30
   1395c:	mov	r0, r3
   13960:	bl	171f4 <__assert_fail@plt+0x62a8>
   13964:	mov	r3, r0
   13968:	str	r3, [fp, #-12]
   1396c:	bl	10e80 <__errno_location@plt>
   13970:	mov	r2, r0
   13974:	ldr	r3, [fp, #-8]
   13978:	str	r3, [r2]
   1397c:	ldr	r3, [fp, #-12]
   13980:	mov	r0, r3
   13984:	sub	sp, fp, #4
   13988:	pop	{fp, pc}
   1398c:	andeq	sl, r2, ip, ror #2
   13990:	push	{fp}		; (str fp, [sp, #-4]!)
   13994:	add	fp, sp, #0
   13998:	sub	sp, sp, #12
   1399c:	str	r0, [fp, #-8]
   139a0:	ldr	r3, [fp, #-8]
   139a4:	cmp	r3, #0
   139a8:	beq	139b4 <__assert_fail@plt+0x2a68>
   139ac:	ldr	r3, [fp, #-8]
   139b0:	b	139b8 <__assert_fail@plt+0x2a6c>
   139b4:	ldr	r3, [pc, #16]	; 139cc <__assert_fail@plt+0x2a80>
   139b8:	ldr	r3, [r3]
   139bc:	mov	r0, r3
   139c0:	add	sp, fp, #0
   139c4:	pop	{fp}		; (ldr fp, [sp], #4)
   139c8:	bx	lr
   139cc:	andeq	sl, r2, ip, ror #2
   139d0:	push	{fp}		; (str fp, [sp, #-4]!)
   139d4:	add	fp, sp, #0
   139d8:	sub	sp, sp, #12
   139dc:	str	r0, [fp, #-8]
   139e0:	str	r1, [fp, #-12]
   139e4:	ldr	r3, [fp, #-8]
   139e8:	cmp	r3, #0
   139ec:	beq	139f8 <__assert_fail@plt+0x2aac>
   139f0:	ldr	r3, [fp, #-8]
   139f4:	b	139fc <__assert_fail@plt+0x2ab0>
   139f8:	ldr	r3, [pc, #20]	; 13a14 <__assert_fail@plt+0x2ac8>
   139fc:	ldr	r2, [fp, #-12]
   13a00:	str	r2, [r3]
   13a04:	nop			; (mov r0, r0)
   13a08:	add	sp, fp, #0
   13a0c:	pop	{fp}		; (ldr fp, [sp], #4)
   13a10:	bx	lr
   13a14:	andeq	sl, r2, ip, ror #2
   13a18:	push	{fp}		; (str fp, [sp, #-4]!)
   13a1c:	add	fp, sp, #0
   13a20:	sub	sp, sp, #36	; 0x24
   13a24:	str	r0, [fp, #-24]	; 0xffffffe8
   13a28:	mov	r3, r1
   13a2c:	str	r2, [fp, #-32]	; 0xffffffe0
   13a30:	strb	r3, [fp, #-25]	; 0xffffffe7
   13a34:	ldrb	r3, [fp, #-25]	; 0xffffffe7
   13a38:	strb	r3, [fp, #-5]
   13a3c:	ldr	r3, [fp, #-24]	; 0xffffffe8
   13a40:	cmp	r3, #0
   13a44:	beq	13a50 <__assert_fail@plt+0x2b04>
   13a48:	ldr	r3, [fp, #-24]	; 0xffffffe8
   13a4c:	b	13a54 <__assert_fail@plt+0x2b08>
   13a50:	ldr	r3, [pc, #124]	; 13ad4 <__assert_fail@plt+0x2b88>
   13a54:	add	r2, r3, #8
   13a58:	ldrb	r3, [fp, #-5]
   13a5c:	lsr	r3, r3, #5
   13a60:	uxtb	r3, r3
   13a64:	lsl	r3, r3, #2
   13a68:	add	r3, r2, r3
   13a6c:	str	r3, [fp, #-12]
   13a70:	ldrb	r3, [fp, #-5]
   13a74:	and	r3, r3, #31
   13a78:	str	r3, [fp, #-16]
   13a7c:	ldr	r3, [fp, #-12]
   13a80:	ldr	r2, [r3]
   13a84:	ldr	r3, [fp, #-16]
   13a88:	lsr	r3, r2, r3
   13a8c:	and	r3, r3, #1
   13a90:	str	r3, [fp, #-20]	; 0xffffffec
   13a94:	ldr	r3, [fp, #-12]
   13a98:	ldr	r3, [r3]
   13a9c:	ldr	r2, [fp, #-32]	; 0xffffffe0
   13aa0:	and	r1, r2, #1
   13aa4:	ldr	r2, [fp, #-20]	; 0xffffffec
   13aa8:	eor	r1, r1, r2
   13aac:	ldr	r2, [fp, #-16]
   13ab0:	lsl	r2, r1, r2
   13ab4:	eor	r2, r2, r3
   13ab8:	ldr	r3, [fp, #-12]
   13abc:	str	r2, [r3]
   13ac0:	ldr	r3, [fp, #-20]	; 0xffffffec
   13ac4:	mov	r0, r3
   13ac8:	add	sp, fp, #0
   13acc:	pop	{fp}		; (ldr fp, [sp], #4)
   13ad0:	bx	lr
   13ad4:	andeq	sl, r2, ip, ror #2
   13ad8:	push	{fp}		; (str fp, [sp, #-4]!)
   13adc:	add	fp, sp, #0
   13ae0:	sub	sp, sp, #20
   13ae4:	str	r0, [fp, #-16]
   13ae8:	str	r1, [fp, #-20]	; 0xffffffec
   13aec:	ldr	r3, [fp, #-16]
   13af0:	cmp	r3, #0
   13af4:	bne	13b00 <__assert_fail@plt+0x2bb4>
   13af8:	ldr	r3, [pc, #44]	; 13b2c <__assert_fail@plt+0x2be0>
   13afc:	str	r3, [fp, #-16]
   13b00:	ldr	r3, [fp, #-16]
   13b04:	ldr	r3, [r3, #4]
   13b08:	str	r3, [fp, #-8]
   13b0c:	ldr	r3, [fp, #-16]
   13b10:	ldr	r2, [fp, #-20]	; 0xffffffec
   13b14:	str	r2, [r3, #4]
   13b18:	ldr	r3, [fp, #-8]
   13b1c:	mov	r0, r3
   13b20:	add	sp, fp, #0
   13b24:	pop	{fp}		; (ldr fp, [sp], #4)
   13b28:	bx	lr
   13b2c:	andeq	sl, r2, ip, ror #2
   13b30:	push	{fp, lr}
   13b34:	add	fp, sp, #4
   13b38:	sub	sp, sp, #16
   13b3c:	str	r0, [fp, #-8]
   13b40:	str	r1, [fp, #-12]
   13b44:	str	r2, [fp, #-16]
   13b48:	ldr	r3, [fp, #-8]
   13b4c:	cmp	r3, #0
   13b50:	bne	13b5c <__assert_fail@plt+0x2c10>
   13b54:	ldr	r3, [pc, #76]	; 13ba8 <__assert_fail@plt+0x2c5c>
   13b58:	str	r3, [fp, #-8]
   13b5c:	ldr	r3, [fp, #-8]
   13b60:	mov	r2, #10
   13b64:	str	r2, [r3]
   13b68:	ldr	r3, [fp, #-12]
   13b6c:	cmp	r3, #0
   13b70:	beq	13b80 <__assert_fail@plt+0x2c34>
   13b74:	ldr	r3, [fp, #-16]
   13b78:	cmp	r3, #0
   13b7c:	bne	13b84 <__assert_fail@plt+0x2c38>
   13b80:	bl	10f34 <abort@plt>
   13b84:	ldr	r3, [fp, #-8]
   13b88:	ldr	r2, [fp, #-12]
   13b8c:	str	r2, [r3, #40]	; 0x28
   13b90:	ldr	r3, [fp, #-8]
   13b94:	ldr	r2, [fp, #-16]
   13b98:	str	r2, [r3, #44]	; 0x2c
   13b9c:	nop			; (mov r0, r0)
   13ba0:	sub	sp, fp, #4
   13ba4:	pop	{fp, pc}
   13ba8:	andeq	sl, r2, ip, ror #2
   13bac:	push	{fp, lr}
   13bb0:	add	fp, sp, #4
   13bb4:	sub	sp, sp, #56	; 0x38
   13bb8:	str	r0, [fp, #-56]	; 0xffffffc8
   13bbc:	str	r1, [fp, #-60]	; 0xffffffc4
   13bc0:	sub	r3, fp, #52	; 0x34
   13bc4:	mov	r2, #48	; 0x30
   13bc8:	mov	r1, #0
   13bcc:	mov	r0, r3
   13bd0:	bl	10e98 <memset@plt>
   13bd4:	ldr	r3, [fp, #-60]	; 0xffffffc4
   13bd8:	cmp	r3, #10
   13bdc:	bne	13be4 <__assert_fail@plt+0x2c98>
   13be0:	bl	10f34 <abort@plt>
   13be4:	ldr	r3, [fp, #-60]	; 0xffffffc4
   13be8:	str	r3, [fp, #-52]	; 0xffffffcc
   13bec:	ldr	r3, [fp, #-56]	; 0xffffffc8
   13bf0:	mov	lr, r3
   13bf4:	sub	ip, fp, #52	; 0x34
   13bf8:	ldm	ip!, {r0, r1, r2, r3}
   13bfc:	stmia	lr!, {r0, r1, r2, r3}
   13c00:	ldm	ip!, {r0, r1, r2, r3}
   13c04:	stmia	lr!, {r0, r1, r2, r3}
   13c08:	ldm	ip, {r0, r1, r2, r3}
   13c0c:	stm	lr, {r0, r1, r2, r3}
   13c10:	ldr	r0, [fp, #-56]	; 0xffffffc8
   13c14:	sub	sp, fp, #4
   13c18:	pop	{fp, pc}
   13c1c:	push	{fp, lr}
   13c20:	add	fp, sp, #4
   13c24:	sub	sp, sp, #16
   13c28:	str	r0, [fp, #-16]
   13c2c:	str	r1, [fp, #-20]	; 0xffffffec
   13c30:	ldr	r0, [fp, #-16]
   13c34:	bl	10e50 <gettext@plt>
   13c38:	str	r0, [fp, #-8]
   13c3c:	ldr	r2, [fp, #-8]
   13c40:	ldr	r3, [fp, #-16]
   13c44:	cmp	r2, r3
   13c48:	beq	13c54 <__assert_fail@plt+0x2d08>
   13c4c:	ldr	r3, [fp, #-8]
   13c50:	b	13ce4 <__assert_fail@plt+0x2d98>
   13c54:	bl	180b0 <__assert_fail@plt+0x7164>
   13c58:	str	r0, [fp, #-12]
   13c5c:	ldr	r1, [pc, #140]	; 13cf0 <__assert_fail@plt+0x2da4>
   13c60:	ldr	r0, [fp, #-12]
   13c64:	bl	17f40 <__assert_fail@plt+0x6ff4>
   13c68:	mov	r3, r0
   13c6c:	cmp	r3, #0
   13c70:	bne	13c94 <__assert_fail@plt+0x2d48>
   13c74:	ldr	r3, [fp, #-16]
   13c78:	ldrb	r3, [r3]
   13c7c:	cmp	r3, #96	; 0x60
   13c80:	bne	13c8c <__assert_fail@plt+0x2d40>
   13c84:	ldr	r3, [pc, #104]	; 13cf4 <__assert_fail@plt+0x2da8>
   13c88:	b	13ce4 <__assert_fail@plt+0x2d98>
   13c8c:	ldr	r3, [pc, #100]	; 13cf8 <__assert_fail@plt+0x2dac>
   13c90:	b	13ce4 <__assert_fail@plt+0x2d98>
   13c94:	ldr	r1, [pc, #96]	; 13cfc <__assert_fail@plt+0x2db0>
   13c98:	ldr	r0, [fp, #-12]
   13c9c:	bl	17f40 <__assert_fail@plt+0x6ff4>
   13ca0:	mov	r3, r0
   13ca4:	cmp	r3, #0
   13ca8:	bne	13ccc <__assert_fail@plt+0x2d80>
   13cac:	ldr	r3, [fp, #-16]
   13cb0:	ldrb	r3, [r3]
   13cb4:	cmp	r3, #96	; 0x60
   13cb8:	bne	13cc4 <__assert_fail@plt+0x2d78>
   13cbc:	ldr	r3, [pc, #60]	; 13d00 <__assert_fail@plt+0x2db4>
   13cc0:	b	13ce4 <__assert_fail@plt+0x2d98>
   13cc4:	ldr	r3, [pc, #56]	; 13d04 <__assert_fail@plt+0x2db8>
   13cc8:	b	13ce4 <__assert_fail@plt+0x2d98>
   13ccc:	ldr	r3, [fp, #-20]	; 0xffffffec
   13cd0:	cmp	r3, #9
   13cd4:	bne	13ce0 <__assert_fail@plt+0x2d94>
   13cd8:	ldr	r3, [pc, #40]	; 13d08 <__assert_fail@plt+0x2dbc>
   13cdc:	b	13ce4 <__assert_fail@plt+0x2d98>
   13ce0:	ldr	r3, [pc, #36]	; 13d0c <__assert_fail@plt+0x2dc0>
   13ce4:	mov	r0, r3
   13ce8:	sub	sp, fp, #4
   13cec:	pop	{fp, pc}
   13cf0:	andeq	r9, r1, r4, asr #16
   13cf4:	andeq	r9, r1, ip, asr #16
   13cf8:	andeq	r9, r1, r0, asr r8
   13cfc:	andeq	r9, r1, r4, asr r8
   13d00:	andeq	r9, r1, ip, asr r8
   13d04:	andeq	r9, r1, r0, ror #16
   13d08:	andeq	r9, r1, r4, ror #16
   13d0c:	andeq	r9, r1, r8, ror #16
   13d10:	push	{r4, fp, lr}
   13d14:	add	fp, sp, #8
   13d18:	sub	sp, sp, #116	; 0x74
   13d1c:	str	r0, [fp, #-88]	; 0xffffffa8
   13d20:	str	r1, [fp, #-92]	; 0xffffffa4
   13d24:	str	r2, [fp, #-96]	; 0xffffffa0
   13d28:	str	r3, [fp, #-100]	; 0xffffff9c
   13d2c:	mov	r3, #0
   13d30:	str	r3, [fp, #-20]	; 0xffffffec
   13d34:	mov	r3, #0
   13d38:	str	r3, [fp, #-24]	; 0xffffffe8
   13d3c:	mov	r3, #0
   13d40:	str	r3, [fp, #-28]	; 0xffffffe4
   13d44:	mov	r3, #0
   13d48:	str	r3, [fp, #-32]	; 0xffffffe0
   13d4c:	mov	r3, #0
   13d50:	strb	r3, [fp, #-33]	; 0xffffffdf
   13d54:	bl	10dc0 <__ctype_get_mb_cur_max@plt>
   13d58:	mov	r3, r0
   13d5c:	cmp	r3, #1
   13d60:	moveq	r3, #1
   13d64:	movne	r3, #0
   13d68:	strb	r3, [fp, #-57]	; 0xffffffc7
   13d6c:	ldr	r3, [fp, #8]
   13d70:	and	r3, r3, #2
   13d74:	cmp	r3, #0
   13d78:	movne	r3, #1
   13d7c:	moveq	r3, #0
   13d80:	strb	r3, [fp, #-34]	; 0xffffffde
   13d84:	mov	r3, #0
   13d88:	strb	r3, [fp, #-35]	; 0xffffffdd
   13d8c:	mov	r3, #0
   13d90:	strb	r3, [fp, #-36]	; 0xffffffdc
   13d94:	mov	r3, #1
   13d98:	strb	r3, [fp, #-37]	; 0xffffffdb
   13d9c:	ldr	r3, [fp, #4]
   13da0:	cmp	r3, #10
   13da4:	ldrls	pc, [pc, r3, lsl #2]
   13da8:	b	13fb0 <__assert_fail@plt+0x3064>
   13dac:	andeq	r3, r1, r4, lsr #31
   13db0:	andeq	r3, r1, r0, lsr #30
   13db4:	andeq	r3, r1, r4, asr #30
   13db8:	andeq	r3, r1, r8, lsl pc
   13dbc:	andeq	r3, r1, r8, lsr #30
   13dc0:	andeq	r3, r1, r8, ror #27
   13dc4:	ldrdeq	r3, [r1], -r8
   13dc8:	andeq	r3, r1, r8, asr #28
   13dcc:	andeq	r3, r1, ip, asr lr
   13dd0:	andeq	r3, r1, ip, asr lr
   13dd4:	andeq	r3, r1, ip, asr lr
   13dd8:	mov	r3, #5
   13ddc:	str	r3, [fp, #4]
   13de0:	mov	r3, #1
   13de4:	strb	r3, [fp, #-34]	; 0xffffffde
   13de8:	ldrb	r3, [fp, #-34]	; 0xffffffde
   13dec:	eor	r3, r3, #1
   13df0:	uxtb	r3, r3
   13df4:	cmp	r3, #0
   13df8:	beq	13e2c <__assert_fail@plt+0x2ee0>
   13dfc:	ldr	r2, [fp, #-20]	; 0xffffffec
   13e00:	ldr	r3, [fp, #-92]	; 0xffffffa4
   13e04:	cmp	r2, r3
   13e08:	bcs	13e20 <__assert_fail@plt+0x2ed4>
   13e0c:	ldr	r2, [fp, #-88]	; 0xffffffa8
   13e10:	ldr	r3, [fp, #-20]	; 0xffffffec
   13e14:	add	r3, r2, r3
   13e18:	mov	r2, #34	; 0x22
   13e1c:	strb	r2, [r3]
   13e20:	ldr	r3, [fp, #-20]	; 0xffffffec
   13e24:	add	r3, r3, #1
   13e28:	str	r3, [fp, #-20]	; 0xffffffec
   13e2c:	mov	r3, #1
   13e30:	strb	r3, [fp, #-33]	; 0xffffffdf
   13e34:	ldr	r3, [pc, #3872]	; 14d5c <__assert_fail@plt+0x3e10>
   13e38:	str	r3, [fp, #-28]	; 0xffffffe4
   13e3c:	mov	r3, #1
   13e40:	str	r3, [fp, #-32]	; 0xffffffe0
   13e44:	b	13fb4 <__assert_fail@plt+0x3068>
   13e48:	mov	r3, #1
   13e4c:	strb	r3, [fp, #-33]	; 0xffffffdf
   13e50:	mov	r3, #0
   13e54:	strb	r3, [fp, #-34]	; 0xffffffde
   13e58:	b	13fb4 <__assert_fail@plt+0x3068>
   13e5c:	ldr	r3, [fp, #4]
   13e60:	cmp	r3, #10
   13e64:	beq	13e88 <__assert_fail@plt+0x2f3c>
   13e68:	ldr	r1, [fp, #4]
   13e6c:	ldr	r0, [pc, #3820]	; 14d60 <__assert_fail@plt+0x3e14>
   13e70:	bl	13c1c <__assert_fail@plt+0x2cd0>
   13e74:	str	r0, [fp, #16]
   13e78:	ldr	r1, [fp, #4]
   13e7c:	ldr	r0, [pc, #3808]	; 14d64 <__assert_fail@plt+0x3e18>
   13e80:	bl	13c1c <__assert_fail@plt+0x2cd0>
   13e84:	str	r0, [fp, #20]
   13e88:	ldrb	r3, [fp, #-34]	; 0xffffffde
   13e8c:	eor	r3, r3, #1
   13e90:	uxtb	r3, r3
   13e94:	cmp	r3, #0
   13e98:	beq	13ef8 <__assert_fail@plt+0x2fac>
   13e9c:	ldr	r3, [fp, #16]
   13ea0:	str	r3, [fp, #-28]	; 0xffffffe4
   13ea4:	b	13ee8 <__assert_fail@plt+0x2f9c>
   13ea8:	ldr	r2, [fp, #-20]	; 0xffffffec
   13eac:	ldr	r3, [fp, #-92]	; 0xffffffa4
   13eb0:	cmp	r2, r3
   13eb4:	bcs	13ed0 <__assert_fail@plt+0x2f84>
   13eb8:	ldr	r2, [fp, #-88]	; 0xffffffa8
   13ebc:	ldr	r3, [fp, #-20]	; 0xffffffec
   13ec0:	add	r3, r2, r3
   13ec4:	ldr	r2, [fp, #-28]	; 0xffffffe4
   13ec8:	ldrb	r2, [r2]
   13ecc:	strb	r2, [r3]
   13ed0:	ldr	r3, [fp, #-20]	; 0xffffffec
   13ed4:	add	r3, r3, #1
   13ed8:	str	r3, [fp, #-20]	; 0xffffffec
   13edc:	ldr	r3, [fp, #-28]	; 0xffffffe4
   13ee0:	add	r3, r3, #1
   13ee4:	str	r3, [fp, #-28]	; 0xffffffe4
   13ee8:	ldr	r3, [fp, #-28]	; 0xffffffe4
   13eec:	ldrb	r3, [r3]
   13ef0:	cmp	r3, #0
   13ef4:	bne	13ea8 <__assert_fail@plt+0x2f5c>
   13ef8:	mov	r3, #1
   13efc:	strb	r3, [fp, #-33]	; 0xffffffdf
   13f00:	ldr	r3, [fp, #20]
   13f04:	str	r3, [fp, #-28]	; 0xffffffe4
   13f08:	ldr	r0, [fp, #-28]	; 0xffffffe4
   13f0c:	bl	10e5c <strlen@plt>
   13f10:	str	r0, [fp, #-32]	; 0xffffffe0
   13f14:	b	13fb4 <__assert_fail@plt+0x3068>
   13f18:	mov	r3, #1
   13f1c:	strb	r3, [fp, #-33]	; 0xffffffdf
   13f20:	mov	r3, #1
   13f24:	strb	r3, [fp, #-34]	; 0xffffffde
   13f28:	ldrb	r3, [fp, #-34]	; 0xffffffde
   13f2c:	eor	r3, r3, #1
   13f30:	uxtb	r3, r3
   13f34:	cmp	r3, #0
   13f38:	beq	13f44 <__assert_fail@plt+0x2ff8>
   13f3c:	mov	r3, #1
   13f40:	strb	r3, [fp, #-33]	; 0xffffffdf
   13f44:	mov	r3, #2
   13f48:	str	r3, [fp, #4]
   13f4c:	ldrb	r3, [fp, #-34]	; 0xffffffde
   13f50:	eor	r3, r3, #1
   13f54:	uxtb	r3, r3
   13f58:	cmp	r3, #0
   13f5c:	beq	13f90 <__assert_fail@plt+0x3044>
   13f60:	ldr	r2, [fp, #-20]	; 0xffffffec
   13f64:	ldr	r3, [fp, #-92]	; 0xffffffa4
   13f68:	cmp	r2, r3
   13f6c:	bcs	13f84 <__assert_fail@plt+0x3038>
   13f70:	ldr	r2, [fp, #-88]	; 0xffffffa8
   13f74:	ldr	r3, [fp, #-20]	; 0xffffffec
   13f78:	add	r3, r2, r3
   13f7c:	mov	r2, #39	; 0x27
   13f80:	strb	r2, [r3]
   13f84:	ldr	r3, [fp, #-20]	; 0xffffffec
   13f88:	add	r3, r3, #1
   13f8c:	str	r3, [fp, #-20]	; 0xffffffec
   13f90:	ldr	r3, [pc, #3532]	; 14d64 <__assert_fail@plt+0x3e18>
   13f94:	str	r3, [fp, #-28]	; 0xffffffe4
   13f98:	mov	r3, #1
   13f9c:	str	r3, [fp, #-32]	; 0xffffffe0
   13fa0:	b	13fb4 <__assert_fail@plt+0x3068>
   13fa4:	mov	r3, #0
   13fa8:	strb	r3, [fp, #-34]	; 0xffffffde
   13fac:	b	13fb4 <__assert_fail@plt+0x3068>
   13fb0:	bl	10f34 <abort@plt>
   13fb4:	mov	r3, #0
   13fb8:	str	r3, [fp, #-16]
   13fbc:	b	1514c <__assert_fail@plt+0x4200>
   13fc0:	mov	r3, #0
   13fc4:	strb	r3, [fp, #-40]	; 0xffffffd8
   13fc8:	mov	r3, #0
   13fcc:	strb	r3, [fp, #-41]	; 0xffffffd7
   13fd0:	mov	r3, #0
   13fd4:	strb	r3, [fp, #-42]	; 0xffffffd6
   13fd8:	ldrb	r3, [fp, #-33]	; 0xffffffdf
   13fdc:	cmp	r3, #0
   13fe0:	beq	1407c <__assert_fail@plt+0x3130>
   13fe4:	ldr	r3, [fp, #4]
   13fe8:	cmp	r3, #2
   13fec:	beq	1407c <__assert_fail@plt+0x3130>
   13ff0:	ldr	r3, [fp, #-32]	; 0xffffffe0
   13ff4:	cmp	r3, #0
   13ff8:	beq	1407c <__assert_fail@plt+0x3130>
   13ffc:	ldr	r2, [fp, #-16]
   14000:	ldr	r3, [fp, #-32]	; 0xffffffe0
   14004:	add	r4, r2, r3
   14008:	ldr	r3, [fp, #-100]	; 0xffffff9c
   1400c:	cmn	r3, #1
   14010:	bne	14034 <__assert_fail@plt+0x30e8>
   14014:	ldr	r3, [fp, #-32]	; 0xffffffe0
   14018:	cmp	r3, #1
   1401c:	bls	14034 <__assert_fail@plt+0x30e8>
   14020:	ldr	r0, [fp, #-96]	; 0xffffffa0
   14024:	bl	10e5c <strlen@plt>
   14028:	str	r0, [fp, #-100]	; 0xffffff9c
   1402c:	ldr	r3, [fp, #-100]	; 0xffffff9c
   14030:	b	14038 <__assert_fail@plt+0x30ec>
   14034:	ldr	r3, [fp, #-100]	; 0xffffff9c
   14038:	cmp	r4, r3
   1403c:	bhi	1407c <__assert_fail@plt+0x3130>
   14040:	ldr	r2, [fp, #-96]	; 0xffffffa0
   14044:	ldr	r3, [fp, #-16]
   14048:	add	r3, r2, r3
   1404c:	ldr	r2, [fp, #-32]	; 0xffffffe0
   14050:	ldr	r1, [fp, #-28]	; 0xffffffe4
   14054:	mov	r0, r3
   14058:	bl	10d6c <memcmp@plt>
   1405c:	mov	r3, r0
   14060:	cmp	r3, #0
   14064:	bne	1407c <__assert_fail@plt+0x3130>
   14068:	ldrb	r3, [fp, #-34]	; 0xffffffde
   1406c:	cmp	r3, #0
   14070:	bne	15308 <__assert_fail@plt+0x43bc>
   14074:	mov	r3, #1
   14078:	strb	r3, [fp, #-40]	; 0xffffffd8
   1407c:	ldr	r2, [fp, #-96]	; 0xffffffa0
   14080:	ldr	r3, [fp, #-16]
   14084:	add	r3, r2, r3
   14088:	ldrb	r3, [r3]
   1408c:	strb	r3, [fp, #-38]	; 0xffffffda
   14090:	ldrb	r3, [fp, #-38]	; 0xffffffda
   14094:	cmp	r3, #126	; 0x7e
   14098:	ldrls	pc, [pc, r3, lsl #2]
   1409c:	b	148c8 <__assert_fail@plt+0x397c>
   140a0:	muleq	r1, ip, r2
   140a4:	andeq	r4, r1, r8, asr #17
   140a8:	andeq	r4, r1, r8, asr #17
   140ac:	andeq	r4, r1, r8, asr #17
   140b0:	andeq	r4, r1, r8, asr #17
   140b4:	andeq	r4, r1, r8, asr #17
   140b8:	andeq	r4, r1, r8, asr #17
   140bc:	andeq	r4, r1, ip, lsl #13
   140c0:	muleq	r1, r8, r6
   140c4:	andeq	r4, r1, r8, asr #13
   140c8:			; <UNDEFINED> instruction: 0x000146b0
   140cc:	ldrdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   140d0:	andeq	r4, r1, r4, lsr #13
   140d4:			; <UNDEFINED> instruction: 0x000146bc
   140d8:	andeq	r4, r1, r8, asr #17
   140dc:	andeq	r4, r1, r8, asr #17
   140e0:	andeq	r4, r1, r8, asr #17
   140e4:	andeq	r4, r1, r8, asr #17
   140e8:	andeq	r4, r1, r8, asr #17
   140ec:	andeq	r4, r1, r8, asr #17
   140f0:	andeq	r4, r1, r8, asr #17
   140f4:	andeq	r4, r1, r8, asr #17
   140f8:	andeq	r4, r1, r8, asr #17
   140fc:	andeq	r4, r1, r8, asr #17
   14100:	andeq	r4, r1, r8, asr #17
   14104:	andeq	r4, r1, r8, asr #17
   14108:	andeq	r4, r1, r8, asr #17
   1410c:	andeq	r4, r1, r8, asr #17
   14110:	andeq	r4, r1, r8, asr #17
   14114:	andeq	r4, r1, r8, asr #17
   14118:	andeq	r4, r1, r8, asr #17
   1411c:	andeq	r4, r1, r8, asr #17
   14120:	andeq	r4, r1, ip, lsr #15
   14124:			; <UNDEFINED> instruction: 0x000147b4
   14128:			; <UNDEFINED> instruction: 0x000147b4
   1412c:	andeq	r4, r1, r0, lsr #15
   14130:			; <UNDEFINED> instruction: 0x000147b4
   14134:			; <UNDEFINED> instruction: 0x000148bc
   14138:			; <UNDEFINED> instruction: 0x000147b4
   1413c:	ldrdeq	r4, [r1], -r0
   14140:			; <UNDEFINED> instruction: 0x000147b4
   14144:			; <UNDEFINED> instruction: 0x000147b4
   14148:			; <UNDEFINED> instruction: 0x000147b4
   1414c:			; <UNDEFINED> instruction: 0x000148bc
   14150:			; <UNDEFINED> instruction: 0x000148bc
   14154:			; <UNDEFINED> instruction: 0x000148bc
   14158:			; <UNDEFINED> instruction: 0x000148bc
   1415c:			; <UNDEFINED> instruction: 0x000148bc
   14160:			; <UNDEFINED> instruction: 0x000148bc
   14164:			; <UNDEFINED> instruction: 0x000148bc
   14168:			; <UNDEFINED> instruction: 0x000148bc
   1416c:			; <UNDEFINED> instruction: 0x000148bc
   14170:			; <UNDEFINED> instruction: 0x000148bc
   14174:			; <UNDEFINED> instruction: 0x000148bc
   14178:			; <UNDEFINED> instruction: 0x000148bc
   1417c:			; <UNDEFINED> instruction: 0x000148bc
   14180:			; <UNDEFINED> instruction: 0x000148bc
   14184:			; <UNDEFINED> instruction: 0x000148bc
   14188:			; <UNDEFINED> instruction: 0x000148bc
   1418c:			; <UNDEFINED> instruction: 0x000147b4
   14190:			; <UNDEFINED> instruction: 0x000147b4
   14194:			; <UNDEFINED> instruction: 0x000147b4
   14198:			; <UNDEFINED> instruction: 0x000147b4
   1419c:	andeq	r4, r1, ip, ror r4
   141a0:	andeq	r4, r1, r8, asr #17
   141a4:			; <UNDEFINED> instruction: 0x000148bc
   141a8:			; <UNDEFINED> instruction: 0x000148bc
   141ac:			; <UNDEFINED> instruction: 0x000148bc
   141b0:			; <UNDEFINED> instruction: 0x000148bc
   141b4:			; <UNDEFINED> instruction: 0x000148bc
   141b8:			; <UNDEFINED> instruction: 0x000148bc
   141bc:			; <UNDEFINED> instruction: 0x000148bc
   141c0:			; <UNDEFINED> instruction: 0x000148bc
   141c4:			; <UNDEFINED> instruction: 0x000148bc
   141c8:			; <UNDEFINED> instruction: 0x000148bc
   141cc:			; <UNDEFINED> instruction: 0x000148bc
   141d0:			; <UNDEFINED> instruction: 0x000148bc
   141d4:			; <UNDEFINED> instruction: 0x000148bc
   141d8:			; <UNDEFINED> instruction: 0x000148bc
   141dc:			; <UNDEFINED> instruction: 0x000148bc
   141e0:			; <UNDEFINED> instruction: 0x000148bc
   141e4:			; <UNDEFINED> instruction: 0x000148bc
   141e8:			; <UNDEFINED> instruction: 0x000148bc
   141ec:			; <UNDEFINED> instruction: 0x000148bc
   141f0:			; <UNDEFINED> instruction: 0x000148bc
   141f4:			; <UNDEFINED> instruction: 0x000148bc
   141f8:			; <UNDEFINED> instruction: 0x000148bc
   141fc:			; <UNDEFINED> instruction: 0x000148bc
   14200:			; <UNDEFINED> instruction: 0x000148bc
   14204:			; <UNDEFINED> instruction: 0x000148bc
   14208:			; <UNDEFINED> instruction: 0x000148bc
   1420c:			; <UNDEFINED> instruction: 0x000147b4
   14210:	andeq	r4, r1, r0, ror #13
   14214:			; <UNDEFINED> instruction: 0x000148bc
   14218:			; <UNDEFINED> instruction: 0x000147b4
   1421c:			; <UNDEFINED> instruction: 0x000148bc
   14220:			; <UNDEFINED> instruction: 0x000147b4
   14224:			; <UNDEFINED> instruction: 0x000148bc
   14228:			; <UNDEFINED> instruction: 0x000148bc
   1422c:			; <UNDEFINED> instruction: 0x000148bc
   14230:			; <UNDEFINED> instruction: 0x000148bc
   14234:			; <UNDEFINED> instruction: 0x000148bc
   14238:			; <UNDEFINED> instruction: 0x000148bc
   1423c:			; <UNDEFINED> instruction: 0x000148bc
   14240:			; <UNDEFINED> instruction: 0x000148bc
   14244:			; <UNDEFINED> instruction: 0x000148bc
   14248:			; <UNDEFINED> instruction: 0x000148bc
   1424c:			; <UNDEFINED> instruction: 0x000148bc
   14250:			; <UNDEFINED> instruction: 0x000148bc
   14254:			; <UNDEFINED> instruction: 0x000148bc
   14258:			; <UNDEFINED> instruction: 0x000148bc
   1425c:			; <UNDEFINED> instruction: 0x000148bc
   14260:			; <UNDEFINED> instruction: 0x000148bc
   14264:			; <UNDEFINED> instruction: 0x000148bc
   14268:			; <UNDEFINED> instruction: 0x000148bc
   1426c:			; <UNDEFINED> instruction: 0x000148bc
   14270:			; <UNDEFINED> instruction: 0x000148bc
   14274:			; <UNDEFINED> instruction: 0x000148bc
   14278:			; <UNDEFINED> instruction: 0x000148bc
   1427c:			; <UNDEFINED> instruction: 0x000148bc
   14280:			; <UNDEFINED> instruction: 0x000148bc
   14284:			; <UNDEFINED> instruction: 0x000148bc
   14288:			; <UNDEFINED> instruction: 0x000148bc
   1428c:	andeq	r4, r1, r8, asr r7
   14290:			; <UNDEFINED> instruction: 0x000147b4
   14294:	andeq	r4, r1, r8, asr r7
   14298:	andeq	r4, r1, r0, lsr #15
   1429c:	ldrb	r3, [fp, #-33]	; 0xffffffdf
   142a0:	cmp	r3, #0
   142a4:	beq	14468 <__assert_fail@plt+0x351c>
   142a8:	ldrb	r3, [fp, #-34]	; 0xffffffde
   142ac:	cmp	r3, #0
   142b0:	bne	15310 <__assert_fail@plt+0x43c4>
   142b4:	mov	r3, #1
   142b8:	strb	r3, [fp, #-41]	; 0xffffffd7
   142bc:	ldr	r3, [fp, #4]
   142c0:	cmp	r3, #2
   142c4:	bne	14374 <__assert_fail@plt+0x3428>
   142c8:	ldrb	r3, [fp, #-35]	; 0xffffffdd
   142cc:	eor	r3, r3, #1
   142d0:	uxtb	r3, r3
   142d4:	cmp	r3, #0
   142d8:	beq	14374 <__assert_fail@plt+0x3428>
   142dc:	ldr	r2, [fp, #-20]	; 0xffffffec
   142e0:	ldr	r3, [fp, #-92]	; 0xffffffa4
   142e4:	cmp	r2, r3
   142e8:	bcs	14300 <__assert_fail@plt+0x33b4>
   142ec:	ldr	r2, [fp, #-88]	; 0xffffffa8
   142f0:	ldr	r3, [fp, #-20]	; 0xffffffec
   142f4:	add	r3, r2, r3
   142f8:	mov	r2, #39	; 0x27
   142fc:	strb	r2, [r3]
   14300:	ldr	r3, [fp, #-20]	; 0xffffffec
   14304:	add	r3, r3, #1
   14308:	str	r3, [fp, #-20]	; 0xffffffec
   1430c:	ldr	r2, [fp, #-20]	; 0xffffffec
   14310:	ldr	r3, [fp, #-92]	; 0xffffffa4
   14314:	cmp	r2, r3
   14318:	bcs	14330 <__assert_fail@plt+0x33e4>
   1431c:	ldr	r2, [fp, #-88]	; 0xffffffa8
   14320:	ldr	r3, [fp, #-20]	; 0xffffffec
   14324:	add	r3, r2, r3
   14328:	mov	r2, #36	; 0x24
   1432c:	strb	r2, [r3]
   14330:	ldr	r3, [fp, #-20]	; 0xffffffec
   14334:	add	r3, r3, #1
   14338:	str	r3, [fp, #-20]	; 0xffffffec
   1433c:	ldr	r2, [fp, #-20]	; 0xffffffec
   14340:	ldr	r3, [fp, #-92]	; 0xffffffa4
   14344:	cmp	r2, r3
   14348:	bcs	14360 <__assert_fail@plt+0x3414>
   1434c:	ldr	r2, [fp, #-88]	; 0xffffffa8
   14350:	ldr	r3, [fp, #-20]	; 0xffffffec
   14354:	add	r3, r2, r3
   14358:	mov	r2, #39	; 0x27
   1435c:	strb	r2, [r3]
   14360:	ldr	r3, [fp, #-20]	; 0xffffffec
   14364:	add	r3, r3, #1
   14368:	str	r3, [fp, #-20]	; 0xffffffec
   1436c:	mov	r3, #1
   14370:	strb	r3, [fp, #-35]	; 0xffffffdd
   14374:	ldr	r2, [fp, #-20]	; 0xffffffec
   14378:	ldr	r3, [fp, #-92]	; 0xffffffa4
   1437c:	cmp	r2, r3
   14380:	bcs	14398 <__assert_fail@plt+0x344c>
   14384:	ldr	r2, [fp, #-88]	; 0xffffffa8
   14388:	ldr	r3, [fp, #-20]	; 0xffffffec
   1438c:	add	r3, r2, r3
   14390:	mov	r2, #92	; 0x5c
   14394:	strb	r2, [r3]
   14398:	ldr	r3, [fp, #-20]	; 0xffffffec
   1439c:	add	r3, r3, #1
   143a0:	str	r3, [fp, #-20]	; 0xffffffec
   143a4:	ldr	r3, [fp, #4]
   143a8:	cmp	r3, #2
   143ac:	beq	1445c <__assert_fail@plt+0x3510>
   143b0:	ldr	r3, [fp, #-16]
   143b4:	add	r2, r3, #1
   143b8:	ldr	r3, [fp, #-100]	; 0xffffff9c
   143bc:	cmp	r2, r3
   143c0:	bcs	1445c <__assert_fail@plt+0x3510>
   143c4:	ldr	r3, [fp, #-16]
   143c8:	add	r3, r3, #1
   143cc:	ldr	r2, [fp, #-96]	; 0xffffffa0
   143d0:	add	r3, r2, r3
   143d4:	ldrb	r3, [r3]
   143d8:	cmp	r3, #47	; 0x2f
   143dc:	bls	1445c <__assert_fail@plt+0x3510>
   143e0:	ldr	r3, [fp, #-16]
   143e4:	add	r3, r3, #1
   143e8:	ldr	r2, [fp, #-96]	; 0xffffffa0
   143ec:	add	r3, r2, r3
   143f0:	ldrb	r3, [r3]
   143f4:	cmp	r3, #57	; 0x39
   143f8:	bhi	1445c <__assert_fail@plt+0x3510>
   143fc:	ldr	r2, [fp, #-20]	; 0xffffffec
   14400:	ldr	r3, [fp, #-92]	; 0xffffffa4
   14404:	cmp	r2, r3
   14408:	bcs	14420 <__assert_fail@plt+0x34d4>
   1440c:	ldr	r2, [fp, #-88]	; 0xffffffa8
   14410:	ldr	r3, [fp, #-20]	; 0xffffffec
   14414:	add	r3, r2, r3
   14418:	mov	r2, #48	; 0x30
   1441c:	strb	r2, [r3]
   14420:	ldr	r3, [fp, #-20]	; 0xffffffec
   14424:	add	r3, r3, #1
   14428:	str	r3, [fp, #-20]	; 0xffffffec
   1442c:	ldr	r2, [fp, #-20]	; 0xffffffec
   14430:	ldr	r3, [fp, #-92]	; 0xffffffa4
   14434:	cmp	r2, r3
   14438:	bcs	14450 <__assert_fail@plt+0x3504>
   1443c:	ldr	r2, [fp, #-88]	; 0xffffffa8
   14440:	ldr	r3, [fp, #-20]	; 0xffffffec
   14444:	add	r3, r2, r3
   14448:	mov	r2, #48	; 0x30
   1444c:	strb	r2, [r3]
   14450:	ldr	r3, [fp, #-20]	; 0xffffffec
   14454:	add	r3, r3, #1
   14458:	str	r3, [fp, #-20]	; 0xffffffec
   1445c:	mov	r3, #48	; 0x30
   14460:	strb	r3, [fp, #-38]	; 0xffffffda
   14464:	b	14ea4 <__assert_fail@plt+0x3f58>
   14468:	ldr	r3, [fp, #8]
   1446c:	and	r3, r3, #1
   14470:	cmp	r3, #0
   14474:	beq	14ea4 <__assert_fail@plt+0x3f58>
   14478:	b	15140 <__assert_fail@plt+0x41f4>
   1447c:	ldr	r3, [fp, #4]
   14480:	cmp	r3, #2
   14484:	beq	14494 <__assert_fail@plt+0x3548>
   14488:	cmp	r3, #5
   1448c:	beq	144a4 <__assert_fail@plt+0x3558>
   14490:	b	14688 <__assert_fail@plt+0x373c>
   14494:	ldrb	r3, [fp, #-34]	; 0xffffffde
   14498:	cmp	r3, #0
   1449c:	beq	1467c <__assert_fail@plt+0x3730>
   144a0:	b	1534c <__assert_fail@plt+0x4400>
   144a4:	ldr	r3, [fp, #8]
   144a8:	and	r3, r3, #4
   144ac:	cmp	r3, #0
   144b0:	beq	14684 <__assert_fail@plt+0x3738>
   144b4:	ldr	r3, [fp, #-16]
   144b8:	add	r2, r3, #2
   144bc:	ldr	r3, [fp, #-100]	; 0xffffff9c
   144c0:	cmp	r2, r3
   144c4:	bcs	14684 <__assert_fail@plt+0x3738>
   144c8:	ldr	r3, [fp, #-16]
   144cc:	add	r3, r3, #1
   144d0:	ldr	r2, [fp, #-96]	; 0xffffffa0
   144d4:	add	r3, r2, r3
   144d8:	ldrb	r3, [r3]
   144dc:	cmp	r3, #63	; 0x3f
   144e0:	bne	14684 <__assert_fail@plt+0x3738>
   144e4:	ldr	r3, [fp, #-16]
   144e8:	add	r3, r3, #2
   144ec:	ldr	r2, [fp, #-96]	; 0xffffffa0
   144f0:	add	r3, r2, r3
   144f4:	ldrb	r3, [r3]
   144f8:	sub	r3, r3, #33	; 0x21
   144fc:	cmp	r3, #29
   14500:	ldrls	pc, [pc, r3, lsl #2]
   14504:	b	14674 <__assert_fail@plt+0x3728>
   14508:	andeq	r4, r1, r0, lsl #11
   1450c:	andeq	r4, r1, r4, ror r6
   14510:	andeq	r4, r1, r4, ror r6
   14514:	andeq	r4, r1, r4, ror r6
   14518:	andeq	r4, r1, r4, ror r6
   1451c:	andeq	r4, r1, r4, ror r6
   14520:	andeq	r4, r1, r0, lsl #11
   14524:	andeq	r4, r1, r0, lsl #11
   14528:	andeq	r4, r1, r0, lsl #11
   1452c:	andeq	r4, r1, r4, ror r6
   14530:	andeq	r4, r1, r4, ror r6
   14534:	andeq	r4, r1, r4, ror r6
   14538:	andeq	r4, r1, r0, lsl #11
   1453c:	andeq	r4, r1, r4, ror r6
   14540:	andeq	r4, r1, r0, lsl #11
   14544:	andeq	r4, r1, r4, ror r6
   14548:	andeq	r4, r1, r4, ror r6
   1454c:	andeq	r4, r1, r4, ror r6
   14550:	andeq	r4, r1, r4, ror r6
   14554:	andeq	r4, r1, r4, ror r6
   14558:	andeq	r4, r1, r4, ror r6
   1455c:	andeq	r4, r1, r4, ror r6
   14560:	andeq	r4, r1, r4, ror r6
   14564:	andeq	r4, r1, r4, ror r6
   14568:	andeq	r4, r1, r4, ror r6
   1456c:	andeq	r4, r1, r4, ror r6
   14570:	andeq	r4, r1, r4, ror r6
   14574:	andeq	r4, r1, r0, lsl #11
   14578:	andeq	r4, r1, r0, lsl #11
   1457c:	andeq	r4, r1, r0, lsl #11
   14580:	ldrb	r3, [fp, #-34]	; 0xffffffde
   14584:	cmp	r3, #0
   14588:	bne	15318 <__assert_fail@plt+0x43cc>
   1458c:	ldr	r3, [fp, #-16]
   14590:	add	r3, r3, #2
   14594:	ldr	r2, [fp, #-96]	; 0xffffffa0
   14598:	add	r3, r2, r3
   1459c:	ldrb	r3, [r3]
   145a0:	strb	r3, [fp, #-38]	; 0xffffffda
   145a4:	ldr	r3, [fp, #-16]
   145a8:	add	r3, r3, #2
   145ac:	str	r3, [fp, #-16]
   145b0:	ldr	r2, [fp, #-20]	; 0xffffffec
   145b4:	ldr	r3, [fp, #-92]	; 0xffffffa4
   145b8:	cmp	r2, r3
   145bc:	bcs	145d4 <__assert_fail@plt+0x3688>
   145c0:	ldr	r2, [fp, #-88]	; 0xffffffa8
   145c4:	ldr	r3, [fp, #-20]	; 0xffffffec
   145c8:	add	r3, r2, r3
   145cc:	mov	r2, #63	; 0x3f
   145d0:	strb	r2, [r3]
   145d4:	ldr	r3, [fp, #-20]	; 0xffffffec
   145d8:	add	r3, r3, #1
   145dc:	str	r3, [fp, #-20]	; 0xffffffec
   145e0:	ldr	r2, [fp, #-20]	; 0xffffffec
   145e4:	ldr	r3, [fp, #-92]	; 0xffffffa4
   145e8:	cmp	r2, r3
   145ec:	bcs	14604 <__assert_fail@plt+0x36b8>
   145f0:	ldr	r2, [fp, #-88]	; 0xffffffa8
   145f4:	ldr	r3, [fp, #-20]	; 0xffffffec
   145f8:	add	r3, r2, r3
   145fc:	mov	r2, #34	; 0x22
   14600:	strb	r2, [r3]
   14604:	ldr	r3, [fp, #-20]	; 0xffffffec
   14608:	add	r3, r3, #1
   1460c:	str	r3, [fp, #-20]	; 0xffffffec
   14610:	ldr	r2, [fp, #-20]	; 0xffffffec
   14614:	ldr	r3, [fp, #-92]	; 0xffffffa4
   14618:	cmp	r2, r3
   1461c:	bcs	14634 <__assert_fail@plt+0x36e8>
   14620:	ldr	r2, [fp, #-88]	; 0xffffffa8
   14624:	ldr	r3, [fp, #-20]	; 0xffffffec
   14628:	add	r3, r2, r3
   1462c:	mov	r2, #34	; 0x22
   14630:	strb	r2, [r3]
   14634:	ldr	r3, [fp, #-20]	; 0xffffffec
   14638:	add	r3, r3, #1
   1463c:	str	r3, [fp, #-20]	; 0xffffffec
   14640:	ldr	r2, [fp, #-20]	; 0xffffffec
   14644:	ldr	r3, [fp, #-92]	; 0xffffffa4
   14648:	cmp	r2, r3
   1464c:	bcs	14664 <__assert_fail@plt+0x3718>
   14650:	ldr	r2, [fp, #-88]	; 0xffffffa8
   14654:	ldr	r3, [fp, #-20]	; 0xffffffec
   14658:	add	r3, r2, r3
   1465c:	mov	r2, #63	; 0x3f
   14660:	strb	r2, [r3]
   14664:	ldr	r3, [fp, #-20]	; 0xffffffec
   14668:	add	r3, r3, #1
   1466c:	str	r3, [fp, #-20]	; 0xffffffec
   14670:	b	14678 <__assert_fail@plt+0x372c>
   14674:	nop			; (mov r0, r0)
   14678:	b	14684 <__assert_fail@plt+0x3738>
   1467c:	nop			; (mov r0, r0)
   14680:	b	14ed0 <__assert_fail@plt+0x3f84>
   14684:	nop			; (mov r0, r0)
   14688:	b	14ed0 <__assert_fail@plt+0x3f84>
   1468c:	mov	r3, #97	; 0x61
   14690:	strb	r3, [fp, #-39]	; 0xffffffd9
   14694:	b	14740 <__assert_fail@plt+0x37f4>
   14698:	mov	r3, #98	; 0x62
   1469c:	strb	r3, [fp, #-39]	; 0xffffffd9
   146a0:	b	14740 <__assert_fail@plt+0x37f4>
   146a4:	mov	r3, #102	; 0x66
   146a8:	strb	r3, [fp, #-39]	; 0xffffffd9
   146ac:	b	14740 <__assert_fail@plt+0x37f4>
   146b0:	mov	r3, #110	; 0x6e
   146b4:	strb	r3, [fp, #-39]	; 0xffffffd9
   146b8:	b	14728 <__assert_fail@plt+0x37dc>
   146bc:	mov	r3, #114	; 0x72
   146c0:	strb	r3, [fp, #-39]	; 0xffffffd9
   146c4:	b	14728 <__assert_fail@plt+0x37dc>
   146c8:	mov	r3, #116	; 0x74
   146cc:	strb	r3, [fp, #-39]	; 0xffffffd9
   146d0:	b	14728 <__assert_fail@plt+0x37dc>
   146d4:	mov	r3, #118	; 0x76
   146d8:	strb	r3, [fp, #-39]	; 0xffffffd9
   146dc:	b	14740 <__assert_fail@plt+0x37f4>
   146e0:	ldrb	r3, [fp, #-38]	; 0xffffffda
   146e4:	strb	r3, [fp, #-39]	; 0xffffffd9
   146e8:	ldr	r3, [fp, #4]
   146ec:	cmp	r3, #2
   146f0:	bne	14704 <__assert_fail@plt+0x37b8>
   146f4:	ldrb	r3, [fp, #-34]	; 0xffffffde
   146f8:	cmp	r3, #0
   146fc:	beq	15058 <__assert_fail@plt+0x410c>
   14700:	b	1534c <__assert_fail@plt+0x4400>
   14704:	ldrb	r3, [fp, #-33]	; 0xffffffdf
   14708:	cmp	r3, #0
   1470c:	beq	14728 <__assert_fail@plt+0x37dc>
   14710:	ldrb	r3, [fp, #-34]	; 0xffffffde
   14714:	cmp	r3, #0
   14718:	beq	14728 <__assert_fail@plt+0x37dc>
   1471c:	ldr	r3, [fp, #-32]	; 0xffffffe0
   14720:	cmp	r3, #0
   14724:	bne	15060 <__assert_fail@plt+0x4114>
   14728:	ldr	r3, [fp, #4]
   1472c:	cmp	r3, #2
   14730:	bne	14740 <__assert_fail@plt+0x37f4>
   14734:	ldrb	r3, [fp, #-34]	; 0xffffffde
   14738:	cmp	r3, #0
   1473c:	bne	15320 <__assert_fail@plt+0x43d4>
   14740:	ldrb	r3, [fp, #-33]	; 0xffffffdf
   14744:	cmp	r3, #0
   14748:	beq	14eac <__assert_fail@plt+0x3f60>
   1474c:	ldrb	r3, [fp, #-39]	; 0xffffffd9
   14750:	strb	r3, [fp, #-38]	; 0xffffffda
   14754:	b	14f58 <__assert_fail@plt+0x400c>
   14758:	ldr	r3, [fp, #-100]	; 0xffffff9c
   1475c:	cmn	r3, #1
   14760:	bne	14784 <__assert_fail@plt+0x3838>
   14764:	ldr	r3, [fp, #-96]	; 0xffffffa0
   14768:	add	r3, r3, #1
   1476c:	ldrb	r3, [r3]
   14770:	cmp	r3, #0
   14774:	movne	r3, #1
   14778:	moveq	r3, #0
   1477c:	uxtb	r3, r3
   14780:	b	14798 <__assert_fail@plt+0x384c>
   14784:	ldr	r3, [fp, #-100]	; 0xffffff9c
   14788:	cmp	r3, #1
   1478c:	movne	r3, #1
   14790:	moveq	r3, #0
   14794:	uxtb	r3, r3
   14798:	cmp	r3, #0
   1479c:	bne	14eb4 <__assert_fail@plt+0x3f68>
   147a0:	ldr	r3, [fp, #-16]
   147a4:	cmp	r3, #0
   147a8:	bne	14ebc <__assert_fail@plt+0x3f70>
   147ac:	mov	r3, #1
   147b0:	strb	r3, [fp, #-42]	; 0xffffffd6
   147b4:	ldr	r3, [fp, #4]
   147b8:	cmp	r3, #2
   147bc:	bne	14ec4 <__assert_fail@plt+0x3f78>
   147c0:	ldrb	r3, [fp, #-34]	; 0xffffffde
   147c4:	cmp	r3, #0
   147c8:	beq	14ec4 <__assert_fail@plt+0x3f78>
   147cc:	b	1534c <__assert_fail@plt+0x4400>
   147d0:	mov	r3, #1
   147d4:	strb	r3, [fp, #-36]	; 0xffffffdc
   147d8:	mov	r3, #1
   147dc:	strb	r3, [fp, #-42]	; 0xffffffd6
   147e0:	ldr	r3, [fp, #4]
   147e4:	cmp	r3, #2
   147e8:	bne	14ecc <__assert_fail@plt+0x3f80>
   147ec:	ldrb	r3, [fp, #-34]	; 0xffffffde
   147f0:	cmp	r3, #0
   147f4:	bne	15328 <__assert_fail@plt+0x43dc>
   147f8:	ldr	r3, [fp, #-92]	; 0xffffffa4
   147fc:	cmp	r3, #0
   14800:	beq	14820 <__assert_fail@plt+0x38d4>
   14804:	ldr	r3, [fp, #-24]	; 0xffffffe8
   14808:	cmp	r3, #0
   1480c:	bne	14820 <__assert_fail@plt+0x38d4>
   14810:	ldr	r3, [fp, #-92]	; 0xffffffa4
   14814:	str	r3, [fp, #-24]	; 0xffffffe8
   14818:	mov	r3, #0
   1481c:	str	r3, [fp, #-92]	; 0xffffffa4
   14820:	ldr	r2, [fp, #-20]	; 0xffffffec
   14824:	ldr	r3, [fp, #-92]	; 0xffffffa4
   14828:	cmp	r2, r3
   1482c:	bcs	14844 <__assert_fail@plt+0x38f8>
   14830:	ldr	r2, [fp, #-88]	; 0xffffffa8
   14834:	ldr	r3, [fp, #-20]	; 0xffffffec
   14838:	add	r3, r2, r3
   1483c:	mov	r2, #39	; 0x27
   14840:	strb	r2, [r3]
   14844:	ldr	r3, [fp, #-20]	; 0xffffffec
   14848:	add	r3, r3, #1
   1484c:	str	r3, [fp, #-20]	; 0xffffffec
   14850:	ldr	r2, [fp, #-20]	; 0xffffffec
   14854:	ldr	r3, [fp, #-92]	; 0xffffffa4
   14858:	cmp	r2, r3
   1485c:	bcs	14874 <__assert_fail@plt+0x3928>
   14860:	ldr	r2, [fp, #-88]	; 0xffffffa8
   14864:	ldr	r3, [fp, #-20]	; 0xffffffec
   14868:	add	r3, r2, r3
   1486c:	mov	r2, #92	; 0x5c
   14870:	strb	r2, [r3]
   14874:	ldr	r3, [fp, #-20]	; 0xffffffec
   14878:	add	r3, r3, #1
   1487c:	str	r3, [fp, #-20]	; 0xffffffec
   14880:	ldr	r2, [fp, #-20]	; 0xffffffec
   14884:	ldr	r3, [fp, #-92]	; 0xffffffa4
   14888:	cmp	r2, r3
   1488c:	bcs	148a4 <__assert_fail@plt+0x3958>
   14890:	ldr	r2, [fp, #-88]	; 0xffffffa8
   14894:	ldr	r3, [fp, #-20]	; 0xffffffec
   14898:	add	r3, r2, r3
   1489c:	mov	r2, #39	; 0x27
   148a0:	strb	r2, [r3]
   148a4:	ldr	r3, [fp, #-20]	; 0xffffffec
   148a8:	add	r3, r3, #1
   148ac:	str	r3, [fp, #-20]	; 0xffffffec
   148b0:	mov	r3, #0
   148b4:	strb	r3, [fp, #-35]	; 0xffffffdd
   148b8:	b	14ecc <__assert_fail@plt+0x3f80>
   148bc:	mov	r3, #1
   148c0:	strb	r3, [fp, #-42]	; 0xffffffd6
   148c4:	b	14ed0 <__assert_fail@plt+0x3f84>
   148c8:	ldrb	r3, [fp, #-57]	; 0xffffffc7
   148cc:	cmp	r3, #0
   148d0:	beq	14910 <__assert_fail@plt+0x39c4>
   148d4:	mov	r3, #1
   148d8:	str	r3, [fp, #-48]	; 0xffffffd0
   148dc:	bl	10e38 <__ctype_b_loc@plt>
   148e0:	mov	r3, r0
   148e4:	ldr	r2, [r3]
   148e8:	ldrb	r3, [fp, #-38]	; 0xffffffda
   148ec:	lsl	r3, r3, #1
   148f0:	add	r3, r2, r3
   148f4:	ldrh	r3, [r3]
   148f8:	and	r3, r3, #16384	; 0x4000
   148fc:	cmp	r3, #0
   14900:	movne	r3, #1
   14904:	moveq	r3, #0
   14908:	strb	r3, [fp, #-49]	; 0xffffffcf
   1490c:	b	14b5c <__assert_fail@plt+0x3c10>
   14910:	sub	r3, fp, #76	; 0x4c
   14914:	mov	r2, #8
   14918:	mov	r1, #0
   1491c:	mov	r0, r3
   14920:	bl	10e98 <memset@plt>
   14924:	mov	r3, #0
   14928:	str	r3, [fp, #-48]	; 0xffffffd0
   1492c:	mov	r3, #1
   14930:	strb	r3, [fp, #-49]	; 0xffffffcf
   14934:	ldr	r3, [fp, #-100]	; 0xffffff9c
   14938:	cmn	r3, #1
   1493c:	bne	1494c <__assert_fail@plt+0x3a00>
   14940:	ldr	r0, [fp, #-96]	; 0xffffffa0
   14944:	bl	10e5c <strlen@plt>
   14948:	str	r0, [fp, #-100]	; 0xffffff9c
   1494c:	ldr	r2, [fp, #-16]
   14950:	ldr	r3, [fp, #-48]	; 0xffffffd0
   14954:	add	r3, r2, r3
   14958:	ldr	r2, [fp, #-96]	; 0xffffffa0
   1495c:	add	r1, r2, r3
   14960:	ldr	r2, [fp, #-16]
   14964:	ldr	r3, [fp, #-48]	; 0xffffffd0
   14968:	add	r3, r2, r3
   1496c:	ldr	r2, [fp, #-100]	; 0xffffff9c
   14970:	sub	r2, r2, r3
   14974:	sub	r3, fp, #76	; 0x4c
   14978:	sub	r0, fp, #80	; 0x50
   1497c:	bl	1810c <__assert_fail@plt+0x71c0>
   14980:	str	r0, [fp, #-64]	; 0xffffffc0
   14984:	ldr	r3, [fp, #-64]	; 0xffffffc0
   14988:	cmp	r3, #0
   1498c:	beq	14b50 <__assert_fail@plt+0x3c04>
   14990:	ldr	r3, [fp, #-64]	; 0xffffffc0
   14994:	cmn	r3, #1
   14998:	bne	149a8 <__assert_fail@plt+0x3a5c>
   1499c:	mov	r3, #0
   149a0:	strb	r3, [fp, #-49]	; 0xffffffcf
   149a4:	b	14b5c <__assert_fail@plt+0x3c10>
   149a8:	ldr	r3, [fp, #-64]	; 0xffffffc0
   149ac:	cmn	r3, #2
   149b0:	bne	14a08 <__assert_fail@plt+0x3abc>
   149b4:	mov	r3, #0
   149b8:	strb	r3, [fp, #-49]	; 0xffffffcf
   149bc:	b	149cc <__assert_fail@plt+0x3a80>
   149c0:	ldr	r3, [fp, #-48]	; 0xffffffd0
   149c4:	add	r3, r3, #1
   149c8:	str	r3, [fp, #-48]	; 0xffffffd0
   149cc:	ldr	r2, [fp, #-16]
   149d0:	ldr	r3, [fp, #-48]	; 0xffffffd0
   149d4:	add	r2, r2, r3
   149d8:	ldr	r3, [fp, #-100]	; 0xffffff9c
   149dc:	cmp	r2, r3
   149e0:	bcs	14b58 <__assert_fail@plt+0x3c0c>
   149e4:	ldr	r2, [fp, #-16]
   149e8:	ldr	r3, [fp, #-48]	; 0xffffffd0
   149ec:	add	r3, r2, r3
   149f0:	ldr	r2, [fp, #-96]	; 0xffffffa0
   149f4:	add	r3, r2, r3
   149f8:	ldrb	r3, [r3]
   149fc:	cmp	r3, #0
   14a00:	bne	149c0 <__assert_fail@plt+0x3a74>
   14a04:	b	14b58 <__assert_fail@plt+0x3c0c>
   14a08:	ldrb	r3, [fp, #-34]	; 0xffffffde
   14a0c:	cmp	r3, #0
   14a10:	beq	14b04 <__assert_fail@plt+0x3bb8>
   14a14:	ldr	r3, [fp, #4]
   14a18:	cmp	r3, #2
   14a1c:	bne	14b04 <__assert_fail@plt+0x3bb8>
   14a20:	mov	r3, #1
   14a24:	str	r3, [fp, #-56]	; 0xffffffc8
   14a28:	b	14af4 <__assert_fail@plt+0x3ba8>
   14a2c:	ldr	r2, [fp, #-16]
   14a30:	ldr	r3, [fp, #-48]	; 0xffffffd0
   14a34:	add	r2, r2, r3
   14a38:	ldr	r3, [fp, #-56]	; 0xffffffc8
   14a3c:	add	r3, r2, r3
   14a40:	ldr	r2, [fp, #-96]	; 0xffffffa0
   14a44:	add	r3, r2, r3
   14a48:	ldrb	r3, [r3]
   14a4c:	sub	r3, r3, #91	; 0x5b
   14a50:	cmp	r3, #33	; 0x21
   14a54:	ldrls	pc, [pc, r3, lsl #2]
   14a58:	b	14ae4 <__assert_fail@plt+0x3b98>
   14a5c:	andeq	r5, r1, r0, lsr r3
   14a60:	andeq	r5, r1, r0, lsr r3
   14a64:	andeq	r4, r1, r4, ror #21
   14a68:	andeq	r5, r1, r0, lsr r3
   14a6c:	andeq	r4, r1, r4, ror #21
   14a70:	andeq	r5, r1, r0, lsr r3
   14a74:	andeq	r4, r1, r4, ror #21
   14a78:	andeq	r4, r1, r4, ror #21
   14a7c:	andeq	r4, r1, r4, ror #21
   14a80:	andeq	r4, r1, r4, ror #21
   14a84:	andeq	r4, r1, r4, ror #21
   14a88:	andeq	r4, r1, r4, ror #21
   14a8c:	andeq	r4, r1, r4, ror #21
   14a90:	andeq	r4, r1, r4, ror #21
   14a94:	andeq	r4, r1, r4, ror #21
   14a98:	andeq	r4, r1, r4, ror #21
   14a9c:	andeq	r4, r1, r4, ror #21
   14aa0:	andeq	r4, r1, r4, ror #21
   14aa4:	andeq	r4, r1, r4, ror #21
   14aa8:	andeq	r4, r1, r4, ror #21
   14aac:	andeq	r4, r1, r4, ror #21
   14ab0:	andeq	r4, r1, r4, ror #21
   14ab4:	andeq	r4, r1, r4, ror #21
   14ab8:	andeq	r4, r1, r4, ror #21
   14abc:	andeq	r4, r1, r4, ror #21
   14ac0:	andeq	r4, r1, r4, ror #21
   14ac4:	andeq	r4, r1, r4, ror #21
   14ac8:	andeq	r4, r1, r4, ror #21
   14acc:	andeq	r4, r1, r4, ror #21
   14ad0:	andeq	r4, r1, r4, ror #21
   14ad4:	andeq	r4, r1, r4, ror #21
   14ad8:	andeq	r4, r1, r4, ror #21
   14adc:	andeq	r4, r1, r4, ror #21
   14ae0:	andeq	r5, r1, r0, lsr r3
   14ae4:	nop			; (mov r0, r0)
   14ae8:	ldr	r3, [fp, #-56]	; 0xffffffc8
   14aec:	add	r3, r3, #1
   14af0:	str	r3, [fp, #-56]	; 0xffffffc8
   14af4:	ldr	r2, [fp, #-56]	; 0xffffffc8
   14af8:	ldr	r3, [fp, #-64]	; 0xffffffc0
   14afc:	cmp	r2, r3
   14b00:	bcc	14a2c <__assert_fail@plt+0x3ae0>
   14b04:	ldr	r3, [fp, #-80]	; 0xffffffb0
   14b08:	mov	r0, r3
   14b0c:	bl	10d9c <iswprint@plt>
   14b10:	mov	r3, r0
   14b14:	cmp	r3, #0
   14b18:	bne	14b24 <__assert_fail@plt+0x3bd8>
   14b1c:	mov	r3, #0
   14b20:	strb	r3, [fp, #-49]	; 0xffffffcf
   14b24:	ldr	r2, [fp, #-48]	; 0xffffffd0
   14b28:	ldr	r3, [fp, #-64]	; 0xffffffc0
   14b2c:	add	r3, r2, r3
   14b30:	str	r3, [fp, #-48]	; 0xffffffd0
   14b34:	sub	r3, fp, #76	; 0x4c
   14b38:	mov	r0, r3
   14b3c:	bl	10d54 <mbsinit@plt>
   14b40:	mov	r3, r0
   14b44:	cmp	r3, #0
   14b48:	beq	1494c <__assert_fail@plt+0x3a00>
   14b4c:	b	14b5c <__assert_fail@plt+0x3c10>
   14b50:	nop			; (mov r0, r0)
   14b54:	b	14b5c <__assert_fail@plt+0x3c10>
   14b58:	nop			; (mov r0, r0)
   14b5c:	ldrb	r3, [fp, #-49]	; 0xffffffcf
   14b60:	strb	r3, [fp, #-42]	; 0xffffffd6
   14b64:	ldr	r3, [fp, #-48]	; 0xffffffd0
   14b68:	cmp	r3, #1
   14b6c:	bhi	14b90 <__assert_fail@plt+0x3c44>
   14b70:	ldrb	r3, [fp, #-33]	; 0xffffffdf
   14b74:	cmp	r3, #0
   14b78:	beq	14ed0 <__assert_fail@plt+0x3f84>
   14b7c:	ldrb	r3, [fp, #-49]	; 0xffffffcf
   14b80:	eor	r3, r3, #1
   14b84:	uxtb	r3, r3
   14b88:	cmp	r3, #0
   14b8c:	beq	14ed0 <__assert_fail@plt+0x3f84>
   14b90:	ldr	r2, [fp, #-16]
   14b94:	ldr	r3, [fp, #-48]	; 0xffffffd0
   14b98:	add	r3, r2, r3
   14b9c:	str	r3, [fp, #-68]	; 0xffffffbc
   14ba0:	ldrb	r3, [fp, #-33]	; 0xffffffdf
   14ba4:	cmp	r3, #0
   14ba8:	beq	14d68 <__assert_fail@plt+0x3e1c>
   14bac:	ldrb	r3, [fp, #-49]	; 0xffffffcf
   14bb0:	eor	r3, r3, #1
   14bb4:	uxtb	r3, r3
   14bb8:	cmp	r3, #0
   14bbc:	beq	14d68 <__assert_fail@plt+0x3e1c>
   14bc0:	ldrb	r3, [fp, #-34]	; 0xffffffde
   14bc4:	cmp	r3, #0
   14bc8:	bne	15338 <__assert_fail@plt+0x43ec>
   14bcc:	mov	r3, #1
   14bd0:	strb	r3, [fp, #-41]	; 0xffffffd7
   14bd4:	ldr	r3, [fp, #4]
   14bd8:	cmp	r3, #2
   14bdc:	bne	14c8c <__assert_fail@plt+0x3d40>
   14be0:	ldrb	r3, [fp, #-35]	; 0xffffffdd
   14be4:	eor	r3, r3, #1
   14be8:	uxtb	r3, r3
   14bec:	cmp	r3, #0
   14bf0:	beq	14c8c <__assert_fail@plt+0x3d40>
   14bf4:	ldr	r2, [fp, #-20]	; 0xffffffec
   14bf8:	ldr	r3, [fp, #-92]	; 0xffffffa4
   14bfc:	cmp	r2, r3
   14c00:	bcs	14c18 <__assert_fail@plt+0x3ccc>
   14c04:	ldr	r2, [fp, #-88]	; 0xffffffa8
   14c08:	ldr	r3, [fp, #-20]	; 0xffffffec
   14c0c:	add	r3, r2, r3
   14c10:	mov	r2, #39	; 0x27
   14c14:	strb	r2, [r3]
   14c18:	ldr	r3, [fp, #-20]	; 0xffffffec
   14c1c:	add	r3, r3, #1
   14c20:	str	r3, [fp, #-20]	; 0xffffffec
   14c24:	ldr	r2, [fp, #-20]	; 0xffffffec
   14c28:	ldr	r3, [fp, #-92]	; 0xffffffa4
   14c2c:	cmp	r2, r3
   14c30:	bcs	14c48 <__assert_fail@plt+0x3cfc>
   14c34:	ldr	r2, [fp, #-88]	; 0xffffffa8
   14c38:	ldr	r3, [fp, #-20]	; 0xffffffec
   14c3c:	add	r3, r2, r3
   14c40:	mov	r2, #36	; 0x24
   14c44:	strb	r2, [r3]
   14c48:	ldr	r3, [fp, #-20]	; 0xffffffec
   14c4c:	add	r3, r3, #1
   14c50:	str	r3, [fp, #-20]	; 0xffffffec
   14c54:	ldr	r2, [fp, #-20]	; 0xffffffec
   14c58:	ldr	r3, [fp, #-92]	; 0xffffffa4
   14c5c:	cmp	r2, r3
   14c60:	bcs	14c78 <__assert_fail@plt+0x3d2c>
   14c64:	ldr	r2, [fp, #-88]	; 0xffffffa8
   14c68:	ldr	r3, [fp, #-20]	; 0xffffffec
   14c6c:	add	r3, r2, r3
   14c70:	mov	r2, #39	; 0x27
   14c74:	strb	r2, [r3]
   14c78:	ldr	r3, [fp, #-20]	; 0xffffffec
   14c7c:	add	r3, r3, #1
   14c80:	str	r3, [fp, #-20]	; 0xffffffec
   14c84:	mov	r3, #1
   14c88:	strb	r3, [fp, #-35]	; 0xffffffdd
   14c8c:	ldr	r2, [fp, #-20]	; 0xffffffec
   14c90:	ldr	r3, [fp, #-92]	; 0xffffffa4
   14c94:	cmp	r2, r3
   14c98:	bcs	14cb0 <__assert_fail@plt+0x3d64>
   14c9c:	ldr	r2, [fp, #-88]	; 0xffffffa8
   14ca0:	ldr	r3, [fp, #-20]	; 0xffffffec
   14ca4:	add	r3, r2, r3
   14ca8:	mov	r2, #92	; 0x5c
   14cac:	strb	r2, [r3]
   14cb0:	ldr	r3, [fp, #-20]	; 0xffffffec
   14cb4:	add	r3, r3, #1
   14cb8:	str	r3, [fp, #-20]	; 0xffffffec
   14cbc:	ldr	r2, [fp, #-20]	; 0xffffffec
   14cc0:	ldr	r3, [fp, #-92]	; 0xffffffa4
   14cc4:	cmp	r2, r3
   14cc8:	bcs	14cf0 <__assert_fail@plt+0x3da4>
   14ccc:	ldr	r2, [fp, #-88]	; 0xffffffa8
   14cd0:	ldr	r3, [fp, #-20]	; 0xffffffec
   14cd4:	add	r3, r2, r3
   14cd8:	ldrb	r2, [fp, #-38]	; 0xffffffda
   14cdc:	lsr	r2, r2, #6
   14ce0:	uxtb	r2, r2
   14ce4:	add	r2, r2, #48	; 0x30
   14ce8:	uxtb	r2, r2
   14cec:	strb	r2, [r3]
   14cf0:	ldr	r3, [fp, #-20]	; 0xffffffec
   14cf4:	add	r3, r3, #1
   14cf8:	str	r3, [fp, #-20]	; 0xffffffec
   14cfc:	ldr	r2, [fp, #-20]	; 0xffffffec
   14d00:	ldr	r3, [fp, #-92]	; 0xffffffa4
   14d04:	cmp	r2, r3
   14d08:	bcs	14d38 <__assert_fail@plt+0x3dec>
   14d0c:	ldr	r2, [fp, #-88]	; 0xffffffa8
   14d10:	ldr	r3, [fp, #-20]	; 0xffffffec
   14d14:	add	r3, r2, r3
   14d18:	ldrb	r2, [fp, #-38]	; 0xffffffda
   14d1c:	lsr	r2, r2, #3
   14d20:	uxtb	r2, r2
   14d24:	and	r2, r2, #7
   14d28:	uxtb	r2, r2
   14d2c:	add	r2, r2, #48	; 0x30
   14d30:	uxtb	r2, r2
   14d34:	strb	r2, [r3]
   14d38:	ldr	r3, [fp, #-20]	; 0xffffffec
   14d3c:	add	r3, r3, #1
   14d40:	str	r3, [fp, #-20]	; 0xffffffec
   14d44:	ldrb	r3, [fp, #-38]	; 0xffffffda
   14d48:	and	r3, r3, #7
   14d4c:	uxtb	r3, r3
   14d50:	add	r3, r3, #48	; 0x30
   14d54:	strb	r3, [fp, #-38]	; 0xffffffda
   14d58:	b	14dac <__assert_fail@plt+0x3e60>
   14d5c:	andeq	r9, r1, r4, ror #16
   14d60:	andeq	r9, r1, ip, ror #16
   14d64:	andeq	r9, r1, r8, ror #16
   14d68:	ldrb	r3, [fp, #-40]	; 0xffffffd8
   14d6c:	cmp	r3, #0
   14d70:	beq	14dac <__assert_fail@plt+0x3e60>
   14d74:	ldr	r2, [fp, #-20]	; 0xffffffec
   14d78:	ldr	r3, [fp, #-92]	; 0xffffffa4
   14d7c:	cmp	r2, r3
   14d80:	bcs	14d98 <__assert_fail@plt+0x3e4c>
   14d84:	ldr	r2, [fp, #-88]	; 0xffffffa8
   14d88:	ldr	r3, [fp, #-20]	; 0xffffffec
   14d8c:	add	r3, r2, r3
   14d90:	mov	r2, #92	; 0x5c
   14d94:	strb	r2, [r3]
   14d98:	ldr	r3, [fp, #-20]	; 0xffffffec
   14d9c:	add	r3, r3, #1
   14da0:	str	r3, [fp, #-20]	; 0xffffffec
   14da4:	mov	r3, #0
   14da8:	strb	r3, [fp, #-40]	; 0xffffffd8
   14dac:	ldr	r3, [fp, #-16]
   14db0:	add	r2, r3, #1
   14db4:	ldr	r3, [fp, #-68]	; 0xffffffbc
   14db8:	cmp	r2, r3
   14dbc:	bcs	14e9c <__assert_fail@plt+0x3f50>
   14dc0:	ldrb	r3, [fp, #-35]	; 0xffffffdd
   14dc4:	cmp	r3, #0
   14dc8:	beq	14e48 <__assert_fail@plt+0x3efc>
   14dcc:	ldrb	r3, [fp, #-41]	; 0xffffffd7
   14dd0:	eor	r3, r3, #1
   14dd4:	uxtb	r3, r3
   14dd8:	cmp	r3, #0
   14ddc:	beq	14e48 <__assert_fail@plt+0x3efc>
   14de0:	ldr	r2, [fp, #-20]	; 0xffffffec
   14de4:	ldr	r3, [fp, #-92]	; 0xffffffa4
   14de8:	cmp	r2, r3
   14dec:	bcs	14e04 <__assert_fail@plt+0x3eb8>
   14df0:	ldr	r2, [fp, #-88]	; 0xffffffa8
   14df4:	ldr	r3, [fp, #-20]	; 0xffffffec
   14df8:	add	r3, r2, r3
   14dfc:	mov	r2, #39	; 0x27
   14e00:	strb	r2, [r3]
   14e04:	ldr	r3, [fp, #-20]	; 0xffffffec
   14e08:	add	r3, r3, #1
   14e0c:	str	r3, [fp, #-20]	; 0xffffffec
   14e10:	ldr	r2, [fp, #-20]	; 0xffffffec
   14e14:	ldr	r3, [fp, #-92]	; 0xffffffa4
   14e18:	cmp	r2, r3
   14e1c:	bcs	14e34 <__assert_fail@plt+0x3ee8>
   14e20:	ldr	r2, [fp, #-88]	; 0xffffffa8
   14e24:	ldr	r3, [fp, #-20]	; 0xffffffec
   14e28:	add	r3, r2, r3
   14e2c:	mov	r2, #39	; 0x27
   14e30:	strb	r2, [r3]
   14e34:	ldr	r3, [fp, #-20]	; 0xffffffec
   14e38:	add	r3, r3, #1
   14e3c:	str	r3, [fp, #-20]	; 0xffffffec
   14e40:	mov	r3, #0
   14e44:	strb	r3, [fp, #-35]	; 0xffffffdd
   14e48:	ldr	r2, [fp, #-20]	; 0xffffffec
   14e4c:	ldr	r3, [fp, #-92]	; 0xffffffa4
   14e50:	cmp	r2, r3
   14e54:	bcs	14e6c <__assert_fail@plt+0x3f20>
   14e58:	ldr	r2, [fp, #-88]	; 0xffffffa8
   14e5c:	ldr	r3, [fp, #-20]	; 0xffffffec
   14e60:	add	r3, r2, r3
   14e64:	ldrb	r2, [fp, #-38]	; 0xffffffda
   14e68:	strb	r2, [r3]
   14e6c:	ldr	r3, [fp, #-20]	; 0xffffffec
   14e70:	add	r3, r3, #1
   14e74:	str	r3, [fp, #-20]	; 0xffffffec
   14e78:	ldr	r3, [fp, #-16]
   14e7c:	add	r3, r3, #1
   14e80:	str	r3, [fp, #-16]
   14e84:	ldr	r2, [fp, #-96]	; 0xffffffa0
   14e88:	ldr	r3, [fp, #-16]
   14e8c:	add	r3, r2, r3
   14e90:	ldrb	r3, [r3]
   14e94:	strb	r3, [fp, #-38]	; 0xffffffda
   14e98:	b	14ba0 <__assert_fail@plt+0x3c54>
   14e9c:	nop			; (mov r0, r0)
   14ea0:	b	1506c <__assert_fail@plt+0x4120>
   14ea4:	nop			; (mov r0, r0)
   14ea8:	b	14ed0 <__assert_fail@plt+0x3f84>
   14eac:	nop			; (mov r0, r0)
   14eb0:	b	14ed0 <__assert_fail@plt+0x3f84>
   14eb4:	nop			; (mov r0, r0)
   14eb8:	b	14ed0 <__assert_fail@plt+0x3f84>
   14ebc:	nop			; (mov r0, r0)
   14ec0:	b	14ed0 <__assert_fail@plt+0x3f84>
   14ec4:	nop			; (mov r0, r0)
   14ec8:	b	14ed0 <__assert_fail@plt+0x3f84>
   14ecc:	nop			; (mov r0, r0)
   14ed0:	ldrb	r3, [fp, #-33]	; 0xffffffdf
   14ed4:	eor	r3, r3, #1
   14ed8:	uxtb	r3, r3
   14edc:	cmp	r3, #0
   14ee0:	bne	14ef0 <__assert_fail@plt+0x3fa4>
   14ee4:	ldr	r3, [fp, #4]
   14ee8:	cmp	r3, #2
   14eec:	bne	14f04 <__assert_fail@plt+0x3fb8>
   14ef0:	ldrb	r3, [fp, #-34]	; 0xffffffde
   14ef4:	eor	r3, r3, #1
   14ef8:	uxtb	r3, r3
   14efc:	cmp	r3, #0
   14f00:	bne	14f44 <__assert_fail@plt+0x3ff8>
   14f04:	ldr	r3, [fp, #12]
   14f08:	cmp	r3, #0
   14f0c:	beq	14f44 <__assert_fail@plt+0x3ff8>
   14f10:	ldrb	r3, [fp, #-38]	; 0xffffffda
   14f14:	lsr	r3, r3, #5
   14f18:	uxtb	r3, r3
   14f1c:	lsl	r3, r3, #2
   14f20:	ldr	r2, [fp, #12]
   14f24:	add	r3, r2, r3
   14f28:	ldr	r2, [r3]
   14f2c:	ldrb	r3, [fp, #-38]	; 0xffffffda
   14f30:	and	r3, r3, #31
   14f34:	lsr	r3, r2, r3
   14f38:	and	r3, r3, #1
   14f3c:	cmp	r3, #0
   14f40:	bne	14f58 <__assert_fail@plt+0x400c>
   14f44:	ldrb	r3, [fp, #-40]	; 0xffffffd8
   14f48:	eor	r3, r3, #1
   14f4c:	uxtb	r3, r3
   14f50:	cmp	r3, #0
   14f54:	bne	15068 <__assert_fail@plt+0x411c>
   14f58:	ldrb	r3, [fp, #-34]	; 0xffffffde
   14f5c:	cmp	r3, #0
   14f60:	bne	15340 <__assert_fail@plt+0x43f4>
   14f64:	mov	r3, #1
   14f68:	strb	r3, [fp, #-41]	; 0xffffffd7
   14f6c:	ldr	r3, [fp, #4]
   14f70:	cmp	r3, #2
   14f74:	bne	15024 <__assert_fail@plt+0x40d8>
   14f78:	ldrb	r3, [fp, #-35]	; 0xffffffdd
   14f7c:	eor	r3, r3, #1
   14f80:	uxtb	r3, r3
   14f84:	cmp	r3, #0
   14f88:	beq	15024 <__assert_fail@plt+0x40d8>
   14f8c:	ldr	r2, [fp, #-20]	; 0xffffffec
   14f90:	ldr	r3, [fp, #-92]	; 0xffffffa4
   14f94:	cmp	r2, r3
   14f98:	bcs	14fb0 <__assert_fail@plt+0x4064>
   14f9c:	ldr	r2, [fp, #-88]	; 0xffffffa8
   14fa0:	ldr	r3, [fp, #-20]	; 0xffffffec
   14fa4:	add	r3, r2, r3
   14fa8:	mov	r2, #39	; 0x27
   14fac:	strb	r2, [r3]
   14fb0:	ldr	r3, [fp, #-20]	; 0xffffffec
   14fb4:	add	r3, r3, #1
   14fb8:	str	r3, [fp, #-20]	; 0xffffffec
   14fbc:	ldr	r2, [fp, #-20]	; 0xffffffec
   14fc0:	ldr	r3, [fp, #-92]	; 0xffffffa4
   14fc4:	cmp	r2, r3
   14fc8:	bcs	14fe0 <__assert_fail@plt+0x4094>
   14fcc:	ldr	r2, [fp, #-88]	; 0xffffffa8
   14fd0:	ldr	r3, [fp, #-20]	; 0xffffffec
   14fd4:	add	r3, r2, r3
   14fd8:	mov	r2, #36	; 0x24
   14fdc:	strb	r2, [r3]
   14fe0:	ldr	r3, [fp, #-20]	; 0xffffffec
   14fe4:	add	r3, r3, #1
   14fe8:	str	r3, [fp, #-20]	; 0xffffffec
   14fec:	ldr	r2, [fp, #-20]	; 0xffffffec
   14ff0:	ldr	r3, [fp, #-92]	; 0xffffffa4
   14ff4:	cmp	r2, r3
   14ff8:	bcs	15010 <__assert_fail@plt+0x40c4>
   14ffc:	ldr	r2, [fp, #-88]	; 0xffffffa8
   15000:	ldr	r3, [fp, #-20]	; 0xffffffec
   15004:	add	r3, r2, r3
   15008:	mov	r2, #39	; 0x27
   1500c:	strb	r2, [r3]
   15010:	ldr	r3, [fp, #-20]	; 0xffffffec
   15014:	add	r3, r3, #1
   15018:	str	r3, [fp, #-20]	; 0xffffffec
   1501c:	mov	r3, #1
   15020:	strb	r3, [fp, #-35]	; 0xffffffdd
   15024:	ldr	r2, [fp, #-20]	; 0xffffffec
   15028:	ldr	r3, [fp, #-92]	; 0xffffffa4
   1502c:	cmp	r2, r3
   15030:	bcs	15048 <__assert_fail@plt+0x40fc>
   15034:	ldr	r2, [fp, #-88]	; 0xffffffa8
   15038:	ldr	r3, [fp, #-20]	; 0xffffffec
   1503c:	add	r3, r2, r3
   15040:	mov	r2, #92	; 0x5c
   15044:	strb	r2, [r3]
   15048:	ldr	r3, [fp, #-20]	; 0xffffffec
   1504c:	add	r3, r3, #1
   15050:	str	r3, [fp, #-20]	; 0xffffffec
   15054:	b	1506c <__assert_fail@plt+0x4120>
   15058:	nop			; (mov r0, r0)
   1505c:	b	1506c <__assert_fail@plt+0x4120>
   15060:	nop			; (mov r0, r0)
   15064:	b	1506c <__assert_fail@plt+0x4120>
   15068:	nop			; (mov r0, r0)
   1506c:	ldrb	r3, [fp, #-35]	; 0xffffffdd
   15070:	cmp	r3, #0
   15074:	beq	150f4 <__assert_fail@plt+0x41a8>
   15078:	ldrb	r3, [fp, #-41]	; 0xffffffd7
   1507c:	eor	r3, r3, #1
   15080:	uxtb	r3, r3
   15084:	cmp	r3, #0
   15088:	beq	150f4 <__assert_fail@plt+0x41a8>
   1508c:	ldr	r2, [fp, #-20]	; 0xffffffec
   15090:	ldr	r3, [fp, #-92]	; 0xffffffa4
   15094:	cmp	r2, r3
   15098:	bcs	150b0 <__assert_fail@plt+0x4164>
   1509c:	ldr	r2, [fp, #-88]	; 0xffffffa8
   150a0:	ldr	r3, [fp, #-20]	; 0xffffffec
   150a4:	add	r3, r2, r3
   150a8:	mov	r2, #39	; 0x27
   150ac:	strb	r2, [r3]
   150b0:	ldr	r3, [fp, #-20]	; 0xffffffec
   150b4:	add	r3, r3, #1
   150b8:	str	r3, [fp, #-20]	; 0xffffffec
   150bc:	ldr	r2, [fp, #-20]	; 0xffffffec
   150c0:	ldr	r3, [fp, #-92]	; 0xffffffa4
   150c4:	cmp	r2, r3
   150c8:	bcs	150e0 <__assert_fail@plt+0x4194>
   150cc:	ldr	r2, [fp, #-88]	; 0xffffffa8
   150d0:	ldr	r3, [fp, #-20]	; 0xffffffec
   150d4:	add	r3, r2, r3
   150d8:	mov	r2, #39	; 0x27
   150dc:	strb	r2, [r3]
   150e0:	ldr	r3, [fp, #-20]	; 0xffffffec
   150e4:	add	r3, r3, #1
   150e8:	str	r3, [fp, #-20]	; 0xffffffec
   150ec:	mov	r3, #0
   150f0:	strb	r3, [fp, #-35]	; 0xffffffdd
   150f4:	ldr	r2, [fp, #-20]	; 0xffffffec
   150f8:	ldr	r3, [fp, #-92]	; 0xffffffa4
   150fc:	cmp	r2, r3
   15100:	bcs	15118 <__assert_fail@plt+0x41cc>
   15104:	ldr	r2, [fp, #-88]	; 0xffffffa8
   15108:	ldr	r3, [fp, #-20]	; 0xffffffec
   1510c:	add	r3, r2, r3
   15110:	ldrb	r2, [fp, #-38]	; 0xffffffda
   15114:	strb	r2, [r3]
   15118:	ldr	r3, [fp, #-20]	; 0xffffffec
   1511c:	add	r3, r3, #1
   15120:	str	r3, [fp, #-20]	; 0xffffffec
   15124:	ldrb	r3, [fp, #-42]	; 0xffffffd6
   15128:	eor	r3, r3, #1
   1512c:	uxtb	r3, r3
   15130:	cmp	r3, #0
   15134:	beq	15140 <__assert_fail@plt+0x41f4>
   15138:	mov	r3, #0
   1513c:	strb	r3, [fp, #-37]	; 0xffffffdb
   15140:	ldr	r3, [fp, #-16]
   15144:	add	r3, r3, #1
   15148:	str	r3, [fp, #-16]
   1514c:	ldr	r3, [fp, #-100]	; 0xffffff9c
   15150:	cmn	r3, #1
   15154:	bne	1517c <__assert_fail@plt+0x4230>
   15158:	ldr	r2, [fp, #-96]	; 0xffffffa0
   1515c:	ldr	r3, [fp, #-16]
   15160:	add	r3, r2, r3
   15164:	ldrb	r3, [r3]
   15168:	cmp	r3, #0
   1516c:	movne	r3, #1
   15170:	moveq	r3, #0
   15174:	uxtb	r3, r3
   15178:	b	15194 <__assert_fail@plt+0x4248>
   1517c:	ldr	r2, [fp, #-16]
   15180:	ldr	r3, [fp, #-100]	; 0xffffff9c
   15184:	cmp	r2, r3
   15188:	movne	r3, #1
   1518c:	moveq	r3, #0
   15190:	uxtb	r3, r3
   15194:	cmp	r3, #0
   15198:	bne	13fc0 <__assert_fail@plt+0x3074>
   1519c:	ldr	r3, [fp, #-20]	; 0xffffffec
   151a0:	cmp	r3, #0
   151a4:	bne	151c0 <__assert_fail@plt+0x4274>
   151a8:	ldr	r3, [fp, #4]
   151ac:	cmp	r3, #2
   151b0:	bne	151c0 <__assert_fail@plt+0x4274>
   151b4:	ldrb	r3, [fp, #-34]	; 0xffffffde
   151b8:	cmp	r3, #0
   151bc:	bne	15348 <__assert_fail@plt+0x43fc>
   151c0:	ldr	r3, [fp, #4]
   151c4:	cmp	r3, #2
   151c8:	bne	15268 <__assert_fail@plt+0x431c>
   151cc:	ldrb	r3, [fp, #-34]	; 0xffffffde
   151d0:	eor	r3, r3, #1
   151d4:	uxtb	r3, r3
   151d8:	cmp	r3, #0
   151dc:	beq	15268 <__assert_fail@plt+0x431c>
   151e0:	ldrb	r3, [fp, #-36]	; 0xffffffdc
   151e4:	cmp	r3, #0
   151e8:	beq	15268 <__assert_fail@plt+0x431c>
   151ec:	ldrb	r3, [fp, #-37]	; 0xffffffdb
   151f0:	cmp	r3, #0
   151f4:	beq	1523c <__assert_fail@plt+0x42f0>
   151f8:	ldr	r3, [fp, #20]
   151fc:	str	r3, [sp, #16]
   15200:	ldr	r3, [fp, #16]
   15204:	str	r3, [sp, #12]
   15208:	ldr	r3, [fp, #12]
   1520c:	str	r3, [sp, #8]
   15210:	ldr	r3, [fp, #8]
   15214:	str	r3, [sp, #4]
   15218:	mov	r3, #5
   1521c:	str	r3, [sp]
   15220:	ldr	r3, [fp, #-100]	; 0xffffff9c
   15224:	ldr	r2, [fp, #-96]	; 0xffffffa0
   15228:	ldr	r1, [fp, #-24]	; 0xffffffe8
   1522c:	ldr	r0, [fp, #-88]	; 0xffffffa8
   15230:	bl	13d10 <__assert_fail@plt+0x2dc4>
   15234:	mov	r3, r0
   15238:	b	153b0 <__assert_fail@plt+0x4464>
   1523c:	ldr	r3, [fp, #-92]	; 0xffffffa4
   15240:	cmp	r3, #0
   15244:	bne	15268 <__assert_fail@plt+0x431c>
   15248:	ldr	r3, [fp, #-24]	; 0xffffffe8
   1524c:	cmp	r3, #0
   15250:	beq	15268 <__assert_fail@plt+0x431c>
   15254:	ldr	r3, [fp, #-24]	; 0xffffffe8
   15258:	str	r3, [fp, #-92]	; 0xffffffa4
   1525c:	mov	r3, #0
   15260:	str	r3, [fp, #-20]	; 0xffffffec
   15264:	b	13d9c <__assert_fail@plt+0x2e50>
   15268:	ldr	r3, [fp, #-28]	; 0xffffffe4
   1526c:	cmp	r3, #0
   15270:	beq	152dc <__assert_fail@plt+0x4390>
   15274:	ldrb	r3, [fp, #-34]	; 0xffffffde
   15278:	eor	r3, r3, #1
   1527c:	uxtb	r3, r3
   15280:	cmp	r3, #0
   15284:	beq	152dc <__assert_fail@plt+0x4390>
   15288:	b	152cc <__assert_fail@plt+0x4380>
   1528c:	ldr	r2, [fp, #-20]	; 0xffffffec
   15290:	ldr	r3, [fp, #-92]	; 0xffffffa4
   15294:	cmp	r2, r3
   15298:	bcs	152b4 <__assert_fail@plt+0x4368>
   1529c:	ldr	r2, [fp, #-88]	; 0xffffffa8
   152a0:	ldr	r3, [fp, #-20]	; 0xffffffec
   152a4:	add	r3, r2, r3
   152a8:	ldr	r2, [fp, #-28]	; 0xffffffe4
   152ac:	ldrb	r2, [r2]
   152b0:	strb	r2, [r3]
   152b4:	ldr	r3, [fp, #-20]	; 0xffffffec
   152b8:	add	r3, r3, #1
   152bc:	str	r3, [fp, #-20]	; 0xffffffec
   152c0:	ldr	r3, [fp, #-28]	; 0xffffffe4
   152c4:	add	r3, r3, #1
   152c8:	str	r3, [fp, #-28]	; 0xffffffe4
   152cc:	ldr	r3, [fp, #-28]	; 0xffffffe4
   152d0:	ldrb	r3, [r3]
   152d4:	cmp	r3, #0
   152d8:	bne	1528c <__assert_fail@plt+0x4340>
   152dc:	ldr	r2, [fp, #-20]	; 0xffffffec
   152e0:	ldr	r3, [fp, #-92]	; 0xffffffa4
   152e4:	cmp	r2, r3
   152e8:	bcs	15300 <__assert_fail@plt+0x43b4>
   152ec:	ldr	r2, [fp, #-88]	; 0xffffffa8
   152f0:	ldr	r3, [fp, #-20]	; 0xffffffec
   152f4:	add	r3, r2, r3
   152f8:	mov	r2, #0
   152fc:	strb	r2, [r3]
   15300:	ldr	r3, [fp, #-20]	; 0xffffffec
   15304:	b	153b0 <__assert_fail@plt+0x4464>
   15308:	nop			; (mov r0, r0)
   1530c:	b	1534c <__assert_fail@plt+0x4400>
   15310:	nop			; (mov r0, r0)
   15314:	b	1534c <__assert_fail@plt+0x4400>
   15318:	nop			; (mov r0, r0)
   1531c:	b	1534c <__assert_fail@plt+0x4400>
   15320:	nop			; (mov r0, r0)
   15324:	b	1534c <__assert_fail@plt+0x4400>
   15328:	nop			; (mov r0, r0)
   1532c:	b	1534c <__assert_fail@plt+0x4400>
   15330:	nop			; (mov r0, r0)
   15334:	b	1534c <__assert_fail@plt+0x4400>
   15338:	nop			; (mov r0, r0)
   1533c:	b	1534c <__assert_fail@plt+0x4400>
   15340:	nop			; (mov r0, r0)
   15344:	b	1534c <__assert_fail@plt+0x4400>
   15348:	nop			; (mov r0, r0)
   1534c:	ldr	r3, [fp, #4]
   15350:	cmp	r3, #2
   15354:	bne	1536c <__assert_fail@plt+0x4420>
   15358:	ldrb	r3, [fp, #-33]	; 0xffffffdf
   1535c:	cmp	r3, #0
   15360:	beq	1536c <__assert_fail@plt+0x4420>
   15364:	mov	r3, #4
   15368:	str	r3, [fp, #4]
   1536c:	ldr	r3, [fp, #8]
   15370:	bic	r3, r3, #2
   15374:	ldr	r2, [fp, #20]
   15378:	str	r2, [sp, #16]
   1537c:	ldr	r2, [fp, #16]
   15380:	str	r2, [sp, #12]
   15384:	mov	r2, #0
   15388:	str	r2, [sp, #8]
   1538c:	str	r3, [sp, #4]
   15390:	ldr	r3, [fp, #4]
   15394:	str	r3, [sp]
   15398:	ldr	r3, [fp, #-100]	; 0xffffff9c
   1539c:	ldr	r2, [fp, #-96]	; 0xffffffa0
   153a0:	ldr	r1, [fp, #-92]	; 0xffffffa4
   153a4:	ldr	r0, [fp, #-88]	; 0xffffffa8
   153a8:	bl	13d10 <__assert_fail@plt+0x2dc4>
   153ac:	mov	r3, r0
   153b0:	mov	r0, r3
   153b4:	sub	sp, fp, #8
   153b8:	pop	{r4, fp, pc}
   153bc:	push	{fp, lr}
   153c0:	add	fp, sp, #4
   153c4:	sub	sp, sp, #56	; 0x38
   153c8:	str	r0, [fp, #-24]	; 0xffffffe8
   153cc:	str	r1, [fp, #-28]	; 0xffffffe4
   153d0:	str	r2, [fp, #-32]	; 0xffffffe0
   153d4:	str	r3, [fp, #-36]	; 0xffffffdc
   153d8:	ldr	r3, [fp, #4]
   153dc:	cmp	r3, #0
   153e0:	beq	153ec <__assert_fail@plt+0x44a0>
   153e4:	ldr	r3, [fp, #4]
   153e8:	b	153f0 <__assert_fail@plt+0x44a4>
   153ec:	ldr	r3, [pc, #132]	; 15478 <__assert_fail@plt+0x452c>
   153f0:	str	r3, [fp, #-8]
   153f4:	bl	10e80 <__errno_location@plt>
   153f8:	mov	r3, r0
   153fc:	ldr	r3, [r3]
   15400:	str	r3, [fp, #-12]
   15404:	ldr	r3, [fp, #-8]
   15408:	ldr	r3, [r3]
   1540c:	ldr	r2, [fp, #-8]
   15410:	ldr	r2, [r2, #4]
   15414:	ldr	r1, [fp, #-8]
   15418:	add	r1, r1, #8
   1541c:	ldr	r0, [fp, #-8]
   15420:	ldr	r0, [r0, #40]	; 0x28
   15424:	ldr	ip, [fp, #-8]
   15428:	ldr	ip, [ip, #44]	; 0x2c
   1542c:	str	ip, [sp, #16]
   15430:	str	r0, [sp, #12]
   15434:	str	r1, [sp, #8]
   15438:	str	r2, [sp, #4]
   1543c:	str	r3, [sp]
   15440:	ldr	r3, [fp, #-36]	; 0xffffffdc
   15444:	ldr	r2, [fp, #-32]	; 0xffffffe0
   15448:	ldr	r1, [fp, #-28]	; 0xffffffe4
   1544c:	ldr	r0, [fp, #-24]	; 0xffffffe8
   15450:	bl	13d10 <__assert_fail@plt+0x2dc4>
   15454:	str	r0, [fp, #-16]
   15458:	bl	10e80 <__errno_location@plt>
   1545c:	mov	r2, r0
   15460:	ldr	r3, [fp, #-12]
   15464:	str	r3, [r2]
   15468:	ldr	r3, [fp, #-16]
   1546c:	mov	r0, r3
   15470:	sub	sp, fp, #4
   15474:	pop	{fp, pc}
   15478:	andeq	sl, r2, ip, ror #2
   1547c:	push	{fp, lr}
   15480:	add	fp, sp, #4
   15484:	sub	sp, sp, #16
   15488:	str	r0, [fp, #-8]
   1548c:	str	r1, [fp, #-12]
   15490:	str	r2, [fp, #-16]
   15494:	ldr	r3, [fp, #-16]
   15498:	mov	r2, #0
   1549c:	ldr	r1, [fp, #-12]
   154a0:	ldr	r0, [fp, #-8]
   154a4:	bl	154b8 <__assert_fail@plt+0x456c>
   154a8:	mov	r3, r0
   154ac:	mov	r0, r3
   154b0:	sub	sp, fp, #4
   154b4:	pop	{fp, pc}
   154b8:	push	{fp, lr}
   154bc:	add	fp, sp, #4
   154c0:	sub	sp, sp, #64	; 0x40
   154c4:	str	r0, [fp, #-32]	; 0xffffffe0
   154c8:	str	r1, [fp, #-36]	; 0xffffffdc
   154cc:	str	r2, [fp, #-40]	; 0xffffffd8
   154d0:	str	r3, [fp, #-44]	; 0xffffffd4
   154d4:	ldr	r3, [fp, #-44]	; 0xffffffd4
   154d8:	cmp	r3, #0
   154dc:	beq	154e8 <__assert_fail@plt+0x459c>
   154e0:	ldr	r3, [fp, #-44]	; 0xffffffd4
   154e4:	b	154ec <__assert_fail@plt+0x45a0>
   154e8:	ldr	r3, [pc, #292]	; 15614 <__assert_fail@plt+0x46c8>
   154ec:	str	r3, [fp, #-8]
   154f0:	bl	10e80 <__errno_location@plt>
   154f4:	mov	r3, r0
   154f8:	ldr	r3, [r3]
   154fc:	str	r3, [fp, #-12]
   15500:	ldr	r3, [fp, #-8]
   15504:	ldr	r3, [r3, #4]
   15508:	ldr	r2, [fp, #-40]	; 0xffffffd8
   1550c:	cmp	r2, #0
   15510:	moveq	r2, #1
   15514:	movne	r2, #0
   15518:	uxtb	r2, r2
   1551c:	orr	r3, r3, r2
   15520:	str	r3, [fp, #-16]
   15524:	ldr	r3, [fp, #-8]
   15528:	ldr	r3, [r3]
   1552c:	ldr	r2, [fp, #-8]
   15530:	add	r2, r2, #8
   15534:	ldr	r1, [fp, #-8]
   15538:	ldr	r1, [r1, #40]	; 0x28
   1553c:	ldr	r0, [fp, #-8]
   15540:	ldr	r0, [r0, #44]	; 0x2c
   15544:	str	r0, [sp, #16]
   15548:	str	r1, [sp, #12]
   1554c:	str	r2, [sp, #8]
   15550:	ldr	r2, [fp, #-16]
   15554:	str	r2, [sp, #4]
   15558:	str	r3, [sp]
   1555c:	ldr	r3, [fp, #-36]	; 0xffffffdc
   15560:	ldr	r2, [fp, #-32]	; 0xffffffe0
   15564:	mov	r1, #0
   15568:	mov	r0, #0
   1556c:	bl	13d10 <__assert_fail@plt+0x2dc4>
   15570:	mov	r3, r0
   15574:	add	r3, r3, #1
   15578:	str	r3, [fp, #-20]	; 0xffffffec
   1557c:	ldr	r0, [fp, #-20]	; 0xffffffec
   15580:	bl	16864 <__assert_fail@plt+0x5918>
   15584:	mov	r3, r0
   15588:	str	r3, [fp, #-24]	; 0xffffffe8
   1558c:	ldr	r3, [fp, #-8]
   15590:	ldr	r3, [r3]
   15594:	ldr	r2, [fp, #-8]
   15598:	add	r2, r2, #8
   1559c:	ldr	r1, [fp, #-8]
   155a0:	ldr	r1, [r1, #40]	; 0x28
   155a4:	ldr	r0, [fp, #-8]
   155a8:	ldr	r0, [r0, #44]	; 0x2c
   155ac:	str	r0, [sp, #16]
   155b0:	str	r1, [sp, #12]
   155b4:	str	r2, [sp, #8]
   155b8:	ldr	r2, [fp, #-16]
   155bc:	str	r2, [sp, #4]
   155c0:	str	r3, [sp]
   155c4:	ldr	r3, [fp, #-36]	; 0xffffffdc
   155c8:	ldr	r2, [fp, #-32]	; 0xffffffe0
   155cc:	ldr	r1, [fp, #-20]	; 0xffffffec
   155d0:	ldr	r0, [fp, #-24]	; 0xffffffe8
   155d4:	bl	13d10 <__assert_fail@plt+0x2dc4>
   155d8:	bl	10e80 <__errno_location@plt>
   155dc:	mov	r2, r0
   155e0:	ldr	r3, [fp, #-12]
   155e4:	str	r3, [r2]
   155e8:	ldr	r3, [fp, #-40]	; 0xffffffd8
   155ec:	cmp	r3, #0
   155f0:	beq	15604 <__assert_fail@plt+0x46b8>
   155f4:	ldr	r3, [fp, #-20]	; 0xffffffec
   155f8:	sub	r2, r3, #1
   155fc:	ldr	r3, [fp, #-40]	; 0xffffffd8
   15600:	str	r2, [r3]
   15604:	ldr	r3, [fp, #-24]	; 0xffffffe8
   15608:	mov	r0, r3
   1560c:	sub	sp, fp, #4
   15610:	pop	{fp, pc}
   15614:	andeq	sl, r2, ip, ror #2
   15618:	push	{fp, lr}
   1561c:	add	fp, sp, #4
   15620:	sub	sp, sp, #8
   15624:	ldr	r3, [pc, #196]	; 156f0 <__assert_fail@plt+0x47a4>
   15628:	ldr	r3, [r3]
   1562c:	str	r3, [fp, #-12]
   15630:	mov	r3, #1
   15634:	str	r3, [fp, #-8]
   15638:	b	15664 <__assert_fail@plt+0x4718>
   1563c:	ldr	r3, [fp, #-8]
   15640:	lsl	r3, r3, #3
   15644:	ldr	r2, [fp, #-12]
   15648:	add	r3, r2, r3
   1564c:	ldr	r3, [r3, #4]
   15650:	mov	r0, r3
   15654:	bl	13558 <__assert_fail@plt+0x260c>
   15658:	ldr	r3, [fp, #-8]
   1565c:	add	r3, r3, #1
   15660:	str	r3, [fp, #-8]
   15664:	ldr	r3, [pc, #136]	; 156f4 <__assert_fail@plt+0x47a8>
   15668:	ldr	r3, [r3]
   1566c:	ldr	r2, [fp, #-8]
   15670:	cmp	r2, r3
   15674:	blt	1563c <__assert_fail@plt+0x46f0>
   15678:	ldr	r3, [fp, #-12]
   1567c:	ldr	r3, [r3, #4]
   15680:	ldr	r2, [pc, #112]	; 156f8 <__assert_fail@plt+0x47ac>
   15684:	cmp	r3, r2
   15688:	beq	156b4 <__assert_fail@plt+0x4768>
   1568c:	ldr	r3, [fp, #-12]
   15690:	ldr	r3, [r3, #4]
   15694:	mov	r0, r3
   15698:	bl	13558 <__assert_fail@plt+0x260c>
   1569c:	ldr	r3, [pc, #88]	; 156fc <__assert_fail@plt+0x47b0>
   156a0:	mov	r2, #256	; 0x100
   156a4:	str	r2, [r3]
   156a8:	ldr	r3, [pc, #76]	; 156fc <__assert_fail@plt+0x47b0>
   156ac:	ldr	r2, [pc, #68]	; 156f8 <__assert_fail@plt+0x47ac>
   156b0:	str	r2, [r3, #4]
   156b4:	ldr	r3, [fp, #-12]
   156b8:	ldr	r2, [pc, #60]	; 156fc <__assert_fail@plt+0x47b0>
   156bc:	cmp	r3, r2
   156c0:	beq	156d8 <__assert_fail@plt+0x478c>
   156c4:	ldr	r0, [fp, #-12]
   156c8:	bl	13558 <__assert_fail@plt+0x260c>
   156cc:	ldr	r3, [pc, #28]	; 156f0 <__assert_fail@plt+0x47a4>
   156d0:	ldr	r2, [pc, #36]	; 156fc <__assert_fail@plt+0x47b0>
   156d4:	str	r2, [r3]
   156d8:	ldr	r3, [pc, #20]	; 156f4 <__assert_fail@plt+0x47a8>
   156dc:	mov	r2, #1
   156e0:	str	r2, [r3]
   156e4:	nop			; (mov r0, r0)
   156e8:	sub	sp, fp, #4
   156ec:	pop	{fp, pc}
   156f0:	andeq	sl, r2, r4, lsl #2
   156f4:	strdeq	sl, [r2], -r8
   156f8:	muleq	r2, ip, r1
   156fc:	strdeq	sl, [r2], -ip
   15700:	push	{r4, fp, lr}
   15704:	add	fp, sp, #8
   15708:	sub	sp, sp, #84	; 0x54
   1570c:	str	r0, [fp, #-56]	; 0xffffffc8
   15710:	str	r1, [fp, #-60]	; 0xffffffc4
   15714:	str	r2, [fp, #-64]	; 0xffffffc0
   15718:	str	r3, [fp, #-68]	; 0xffffffbc
   1571c:	bl	10e80 <__errno_location@plt>
   15720:	mov	r3, r0
   15724:	ldr	r3, [r3]
   15728:	str	r3, [fp, #-24]	; 0xffffffe8
   1572c:	ldr	r3, [pc, #640]	; 159b4 <__assert_fail@plt+0x4a68>
   15730:	ldr	r3, [r3]
   15734:	str	r3, [fp, #-16]
   15738:	mvn	r3, #-2147483648	; 0x80000000
   1573c:	str	r3, [fp, #-28]	; 0xffffffe4
   15740:	ldr	r3, [fp, #-56]	; 0xffffffc8
   15744:	cmp	r3, #0
   15748:	blt	1575c <__assert_fail@plt+0x4810>
   1574c:	ldr	r2, [fp, #-56]	; 0xffffffc8
   15750:	ldr	r3, [fp, #-28]	; 0xffffffe4
   15754:	cmp	r2, r3
   15758:	blt	15760 <__assert_fail@plt+0x4814>
   1575c:	bl	10f34 <abort@plt>
   15760:	ldr	r3, [pc, #592]	; 159b8 <__assert_fail@plt+0x4a6c>
   15764:	ldr	r2, [r3]
   15768:	ldr	r3, [fp, #-56]	; 0xffffffc8
   1576c:	cmp	r2, r3
   15770:	bgt	15844 <__assert_fail@plt+0x48f8>
   15774:	ldr	r3, [fp, #-16]
   15778:	ldr	r2, [pc, #572]	; 159bc <__assert_fail@plt+0x4a70>
   1577c:	cmp	r3, r2
   15780:	moveq	r3, #1
   15784:	movne	r3, #0
   15788:	strb	r3, [fp, #-29]	; 0xffffffe3
   1578c:	ldr	r3, [pc, #548]	; 159b8 <__assert_fail@plt+0x4a6c>
   15790:	ldr	r3, [r3]
   15794:	str	r3, [fp, #-48]	; 0xffffffd0
   15798:	ldrb	r3, [fp, #-29]	; 0xffffffe3
   1579c:	cmp	r3, #0
   157a0:	beq	157ac <__assert_fail@plt+0x4860>
   157a4:	mov	r0, #0
   157a8:	b	157b0 <__assert_fail@plt+0x4864>
   157ac:	ldr	r0, [fp, #-16]
   157b0:	ldr	r3, [pc, #512]	; 159b8 <__assert_fail@plt+0x4a6c>
   157b4:	ldr	r3, [r3]
   157b8:	ldr	r2, [fp, #-56]	; 0xffffffc8
   157bc:	sub	r3, r2, r3
   157c0:	add	r2, r3, #1
   157c4:	sub	r1, fp, #48	; 0x30
   157c8:	mov	r3, #8
   157cc:	str	r3, [sp]
   157d0:	ldr	r3, [fp, #-28]	; 0xffffffe4
   157d4:	bl	16b84 <__assert_fail@plt+0x5c38>
   157d8:	str	r0, [fp, #-16]
   157dc:	ldr	r2, [pc, #464]	; 159b4 <__assert_fail@plt+0x4a68>
   157e0:	ldr	r3, [fp, #-16]
   157e4:	str	r3, [r2]
   157e8:	ldrb	r3, [fp, #-29]	; 0xffffffe3
   157ec:	cmp	r3, #0
   157f0:	beq	15804 <__assert_fail@plt+0x48b8>
   157f4:	ldr	r3, [fp, #-16]
   157f8:	ldr	r2, [pc, #444]	; 159bc <__assert_fail@plt+0x4a70>
   157fc:	ldm	r2, {r0, r1}
   15800:	stm	r3, {r0, r1}
   15804:	ldr	r3, [pc, #428]	; 159b8 <__assert_fail@plt+0x4a6c>
   15808:	ldr	r3, [r3]
   1580c:	lsl	r3, r3, #3
   15810:	ldr	r2, [fp, #-16]
   15814:	add	r0, r2, r3
   15818:	ldr	r2, [fp, #-48]	; 0xffffffd0
   1581c:	ldr	r3, [pc, #404]	; 159b8 <__assert_fail@plt+0x4a6c>
   15820:	ldr	r3, [r3]
   15824:	sub	r3, r2, r3
   15828:	lsl	r3, r3, #3
   1582c:	mov	r2, r3
   15830:	mov	r1, #0
   15834:	bl	10e98 <memset@plt>
   15838:	ldr	r3, [fp, #-48]	; 0xffffffd0
   1583c:	ldr	r2, [pc, #372]	; 159b8 <__assert_fail@plt+0x4a6c>
   15840:	str	r3, [r2]
   15844:	ldr	r3, [fp, #-56]	; 0xffffffc8
   15848:	lsl	r3, r3, #3
   1584c:	ldr	r2, [fp, #-16]
   15850:	add	r3, r2, r3
   15854:	ldr	r3, [r3]
   15858:	str	r3, [fp, #-36]	; 0xffffffdc
   1585c:	ldr	r3, [fp, #-56]	; 0xffffffc8
   15860:	lsl	r3, r3, #3
   15864:	ldr	r2, [fp, #-16]
   15868:	add	r3, r2, r3
   1586c:	ldr	r3, [r3, #4]
   15870:	str	r3, [fp, #-20]	; 0xffffffec
   15874:	ldr	r3, [fp, #-68]	; 0xffffffbc
   15878:	ldr	r3, [r3, #4]
   1587c:	orr	r3, r3, #1
   15880:	str	r3, [fp, #-40]	; 0xffffffd8
   15884:	ldr	r3, [fp, #-68]	; 0xffffffbc
   15888:	ldr	r3, [r3]
   1588c:	ldr	r2, [fp, #-68]	; 0xffffffbc
   15890:	add	r2, r2, #8
   15894:	ldr	r1, [fp, #-68]	; 0xffffffbc
   15898:	ldr	r1, [r1, #40]	; 0x28
   1589c:	ldr	r0, [fp, #-68]	; 0xffffffbc
   158a0:	ldr	r0, [r0, #44]	; 0x2c
   158a4:	str	r0, [sp, #16]
   158a8:	str	r1, [sp, #12]
   158ac:	str	r2, [sp, #8]
   158b0:	ldr	r2, [fp, #-40]	; 0xffffffd8
   158b4:	str	r2, [sp, #4]
   158b8:	str	r3, [sp]
   158bc:	ldr	r3, [fp, #-64]	; 0xffffffc0
   158c0:	ldr	r2, [fp, #-60]	; 0xffffffc4
   158c4:	ldr	r1, [fp, #-36]	; 0xffffffdc
   158c8:	ldr	r0, [fp, #-20]	; 0xffffffec
   158cc:	bl	13d10 <__assert_fail@plt+0x2dc4>
   158d0:	str	r0, [fp, #-44]	; 0xffffffd4
   158d4:	ldr	r2, [fp, #-36]	; 0xffffffdc
   158d8:	ldr	r3, [fp, #-44]	; 0xffffffd4
   158dc:	cmp	r2, r3
   158e0:	bhi	15994 <__assert_fail@plt+0x4a48>
   158e4:	ldr	r3, [fp, #-56]	; 0xffffffc8
   158e8:	lsl	r3, r3, #3
   158ec:	ldr	r2, [fp, #-16]
   158f0:	add	r3, r2, r3
   158f4:	ldr	r2, [fp, #-44]	; 0xffffffd4
   158f8:	add	r2, r2, #1
   158fc:	str	r2, [fp, #-36]	; 0xffffffdc
   15900:	ldr	r2, [fp, #-36]	; 0xffffffdc
   15904:	str	r2, [r3]
   15908:	ldr	r3, [fp, #-20]	; 0xffffffec
   1590c:	ldr	r2, [pc, #172]	; 159c0 <__assert_fail@plt+0x4a74>
   15910:	cmp	r3, r2
   15914:	beq	15920 <__assert_fail@plt+0x49d4>
   15918:	ldr	r0, [fp, #-20]	; 0xffffffec
   1591c:	bl	13558 <__assert_fail@plt+0x260c>
   15920:	ldr	r3, [fp, #-56]	; 0xffffffc8
   15924:	lsl	r3, r3, #3
   15928:	ldr	r2, [fp, #-16]
   1592c:	add	r4, r2, r3
   15930:	ldr	r0, [fp, #-36]	; 0xffffffdc
   15934:	bl	16864 <__assert_fail@plt+0x5918>
   15938:	mov	r3, r0
   1593c:	str	r3, [fp, #-20]	; 0xffffffec
   15940:	ldr	r3, [fp, #-20]	; 0xffffffec
   15944:	str	r3, [r4, #4]
   15948:	ldr	r3, [fp, #-68]	; 0xffffffbc
   1594c:	ldr	r3, [r3]
   15950:	ldr	r2, [fp, #-68]	; 0xffffffbc
   15954:	add	r2, r2, #8
   15958:	ldr	r1, [fp, #-68]	; 0xffffffbc
   1595c:	ldr	r1, [r1, #40]	; 0x28
   15960:	ldr	r0, [fp, #-68]	; 0xffffffbc
   15964:	ldr	r0, [r0, #44]	; 0x2c
   15968:	str	r0, [sp, #16]
   1596c:	str	r1, [sp, #12]
   15970:	str	r2, [sp, #8]
   15974:	ldr	r2, [fp, #-40]	; 0xffffffd8
   15978:	str	r2, [sp, #4]
   1597c:	str	r3, [sp]
   15980:	ldr	r3, [fp, #-64]	; 0xffffffc0
   15984:	ldr	r2, [fp, #-60]	; 0xffffffc4
   15988:	ldr	r1, [fp, #-36]	; 0xffffffdc
   1598c:	ldr	r0, [fp, #-20]	; 0xffffffec
   15990:	bl	13d10 <__assert_fail@plt+0x2dc4>
   15994:	bl	10e80 <__errno_location@plt>
   15998:	mov	r2, r0
   1599c:	ldr	r3, [fp, #-24]	; 0xffffffe8
   159a0:	str	r3, [r2]
   159a4:	ldr	r3, [fp, #-20]	; 0xffffffec
   159a8:	mov	r0, r3
   159ac:	sub	sp, fp, #8
   159b0:	pop	{r4, fp, pc}
   159b4:	andeq	sl, r2, r4, lsl #2
   159b8:	strdeq	sl, [r2], -r8
   159bc:	strdeq	sl, [r2], -ip
   159c0:	muleq	r2, ip, r1
   159c4:	push	{fp, lr}
   159c8:	add	fp, sp, #4
   159cc:	sub	sp, sp, #8
   159d0:	str	r0, [fp, #-8]
   159d4:	str	r1, [fp, #-12]
   159d8:	ldr	r3, [pc, #28]	; 159fc <__assert_fail@plt+0x4ab0>
   159dc:	mvn	r2, #0
   159e0:	ldr	r1, [fp, #-12]
   159e4:	ldr	r0, [fp, #-8]
   159e8:	bl	15700 <__assert_fail@plt+0x47b4>
   159ec:	mov	r3, r0
   159f0:	mov	r0, r3
   159f4:	sub	sp, fp, #4
   159f8:	pop	{fp, pc}
   159fc:	andeq	sl, r2, ip, ror #2
   15a00:	push	{fp, lr}
   15a04:	add	fp, sp, #4
   15a08:	sub	sp, sp, #16
   15a0c:	str	r0, [fp, #-8]
   15a10:	str	r1, [fp, #-12]
   15a14:	str	r2, [fp, #-16]
   15a18:	ldr	r3, [pc, #28]	; 15a3c <__assert_fail@plt+0x4af0>
   15a1c:	ldr	r2, [fp, #-16]
   15a20:	ldr	r1, [fp, #-12]
   15a24:	ldr	r0, [fp, #-8]
   15a28:	bl	15700 <__assert_fail@plt+0x47b4>
   15a2c:	mov	r3, r0
   15a30:	mov	r0, r3
   15a34:	sub	sp, fp, #4
   15a38:	pop	{fp, pc}
   15a3c:	andeq	sl, r2, ip, ror #2
   15a40:	push	{fp, lr}
   15a44:	add	fp, sp, #4
   15a48:	sub	sp, sp, #8
   15a4c:	str	r0, [fp, #-8]
   15a50:	ldr	r1, [fp, #-8]
   15a54:	mov	r0, #0
   15a58:	bl	159c4 <__assert_fail@plt+0x4a78>
   15a5c:	mov	r3, r0
   15a60:	mov	r0, r3
   15a64:	sub	sp, fp, #4
   15a68:	pop	{fp, pc}
   15a6c:	push	{fp, lr}
   15a70:	add	fp, sp, #4
   15a74:	sub	sp, sp, #8
   15a78:	str	r0, [fp, #-8]
   15a7c:	str	r1, [fp, #-12]
   15a80:	ldr	r2, [fp, #-12]
   15a84:	ldr	r1, [fp, #-8]
   15a88:	mov	r0, #0
   15a8c:	bl	15a00 <__assert_fail@plt+0x4ab4>
   15a90:	mov	r3, r0
   15a94:	mov	r0, r3
   15a98:	sub	sp, fp, #4
   15a9c:	pop	{fp, pc}
   15aa0:	push	{fp, lr}
   15aa4:	add	fp, sp, #4
   15aa8:	sub	sp, sp, #64	; 0x40
   15aac:	str	r0, [fp, #-56]	; 0xffffffc8
   15ab0:	str	r1, [fp, #-60]	; 0xffffffc4
   15ab4:	str	r2, [fp, #-64]	; 0xffffffc0
   15ab8:	sub	r3, fp, #52	; 0x34
   15abc:	ldr	r1, [fp, #-60]	; 0xffffffc4
   15ac0:	mov	r0, r3
   15ac4:	bl	13bac <__assert_fail@plt+0x2c60>
   15ac8:	sub	r3, fp, #52	; 0x34
   15acc:	mvn	r2, #0
   15ad0:	ldr	r1, [fp, #-64]	; 0xffffffc0
   15ad4:	ldr	r0, [fp, #-56]	; 0xffffffc8
   15ad8:	bl	15700 <__assert_fail@plt+0x47b4>
   15adc:	mov	r3, r0
   15ae0:	mov	r0, r3
   15ae4:	sub	sp, fp, #4
   15ae8:	pop	{fp, pc}
   15aec:	push	{fp, lr}
   15af0:	add	fp, sp, #4
   15af4:	sub	sp, sp, #64	; 0x40
   15af8:	str	r0, [fp, #-56]	; 0xffffffc8
   15afc:	str	r1, [fp, #-60]	; 0xffffffc4
   15b00:	str	r2, [fp, #-64]	; 0xffffffc0
   15b04:	str	r3, [fp, #-68]	; 0xffffffbc
   15b08:	sub	r3, fp, #52	; 0x34
   15b0c:	ldr	r1, [fp, #-60]	; 0xffffffc4
   15b10:	mov	r0, r3
   15b14:	bl	13bac <__assert_fail@plt+0x2c60>
   15b18:	sub	r3, fp, #52	; 0x34
   15b1c:	ldr	r2, [fp, #-68]	; 0xffffffbc
   15b20:	ldr	r1, [fp, #-64]	; 0xffffffc0
   15b24:	ldr	r0, [fp, #-56]	; 0xffffffc8
   15b28:	bl	15700 <__assert_fail@plt+0x47b4>
   15b2c:	mov	r3, r0
   15b30:	mov	r0, r3
   15b34:	sub	sp, fp, #4
   15b38:	pop	{fp, pc}
   15b3c:	push	{fp, lr}
   15b40:	add	fp, sp, #4
   15b44:	sub	sp, sp, #8
   15b48:	str	r0, [fp, #-8]
   15b4c:	str	r1, [fp, #-12]
   15b50:	ldr	r2, [fp, #-12]
   15b54:	ldr	r1, [fp, #-8]
   15b58:	mov	r0, #0
   15b5c:	bl	15aa0 <__assert_fail@plt+0x4b54>
   15b60:	mov	r3, r0
   15b64:	mov	r0, r3
   15b68:	sub	sp, fp, #4
   15b6c:	pop	{fp, pc}
   15b70:	push	{fp, lr}
   15b74:	add	fp, sp, #4
   15b78:	sub	sp, sp, #16
   15b7c:	str	r0, [fp, #-8]
   15b80:	str	r1, [fp, #-12]
   15b84:	str	r2, [fp, #-16]
   15b88:	ldr	r3, [fp, #-16]
   15b8c:	ldr	r2, [fp, #-12]
   15b90:	ldr	r1, [fp, #-8]
   15b94:	mov	r0, #0
   15b98:	bl	15aec <__assert_fail@plt+0x4ba0>
   15b9c:	mov	r3, r0
   15ba0:	mov	r0, r3
   15ba4:	sub	sp, fp, #4
   15ba8:	pop	{fp, pc}
   15bac:	push	{fp, lr}
   15bb0:	add	fp, sp, #4
   15bb4:	sub	sp, sp, #64	; 0x40
   15bb8:	str	r0, [fp, #-56]	; 0xffffffc8
   15bbc:	str	r1, [fp, #-60]	; 0xffffffc4
   15bc0:	mov	r3, r2
   15bc4:	strb	r3, [fp, #-61]	; 0xffffffc3
   15bc8:	ldr	r3, [pc, #84]	; 15c24 <__assert_fail@plt+0x4cd8>
   15bcc:	sub	ip, fp, #52	; 0x34
   15bd0:	mov	lr, r3
   15bd4:	ldm	lr!, {r0, r1, r2, r3}
   15bd8:	stmia	ip!, {r0, r1, r2, r3}
   15bdc:	ldm	lr!, {r0, r1, r2, r3}
   15be0:	stmia	ip!, {r0, r1, r2, r3}
   15be4:	ldm	lr, {r0, r1, r2, r3}
   15be8:	stm	ip, {r0, r1, r2, r3}
   15bec:	ldrb	r1, [fp, #-61]	; 0xffffffc3
   15bf0:	sub	r3, fp, #52	; 0x34
   15bf4:	mov	r2, #1
   15bf8:	mov	r0, r3
   15bfc:	bl	13a18 <__assert_fail@plt+0x2acc>
   15c00:	sub	r3, fp, #52	; 0x34
   15c04:	ldr	r2, [fp, #-60]	; 0xffffffc4
   15c08:	ldr	r1, [fp, #-56]	; 0xffffffc8
   15c0c:	mov	r0, #0
   15c10:	bl	15700 <__assert_fail@plt+0x47b4>
   15c14:	mov	r3, r0
   15c18:	mov	r0, r3
   15c1c:	sub	sp, fp, #4
   15c20:	pop	{fp, pc}
   15c24:	andeq	sl, r2, ip, ror #2
   15c28:	push	{fp, lr}
   15c2c:	add	fp, sp, #4
   15c30:	sub	sp, sp, #8
   15c34:	str	r0, [fp, #-8]
   15c38:	mov	r3, r1
   15c3c:	strb	r3, [fp, #-9]
   15c40:	ldrb	r3, [fp, #-9]
   15c44:	mov	r2, r3
   15c48:	mvn	r1, #0
   15c4c:	ldr	r0, [fp, #-8]
   15c50:	bl	15bac <__assert_fail@plt+0x4c60>
   15c54:	mov	r3, r0
   15c58:	mov	r0, r3
   15c5c:	sub	sp, fp, #4
   15c60:	pop	{fp, pc}
   15c64:	push	{fp, lr}
   15c68:	add	fp, sp, #4
   15c6c:	sub	sp, sp, #8
   15c70:	str	r0, [fp, #-8]
   15c74:	mov	r1, #58	; 0x3a
   15c78:	ldr	r0, [fp, #-8]
   15c7c:	bl	15c28 <__assert_fail@plt+0x4cdc>
   15c80:	mov	r3, r0
   15c84:	mov	r0, r3
   15c88:	sub	sp, fp, #4
   15c8c:	pop	{fp, pc}
   15c90:	push	{fp, lr}
   15c94:	add	fp, sp, #4
   15c98:	sub	sp, sp, #8
   15c9c:	str	r0, [fp, #-8]
   15ca0:	str	r1, [fp, #-12]
   15ca4:	mov	r2, #58	; 0x3a
   15ca8:	ldr	r1, [fp, #-12]
   15cac:	ldr	r0, [fp, #-8]
   15cb0:	bl	15bac <__assert_fail@plt+0x4c60>
   15cb4:	mov	r3, r0
   15cb8:	mov	r0, r3
   15cbc:	sub	sp, fp, #4
   15cc0:	pop	{fp, pc}
   15cc4:	push	{fp, lr}
   15cc8:	add	fp, sp, #4
   15ccc:	sub	sp, sp, #112	; 0x70
   15cd0:	str	r0, [fp, #-56]	; 0xffffffc8
   15cd4:	str	r1, [fp, #-60]	; 0xffffffc4
   15cd8:	str	r2, [fp, #-64]	; 0xffffffc0
   15cdc:	sub	r3, fp, #116	; 0x74
   15ce0:	ldr	r1, [fp, #-60]	; 0xffffffc4
   15ce4:	mov	r0, r3
   15ce8:	bl	13bac <__assert_fail@plt+0x2c60>
   15cec:	sub	ip, fp, #52	; 0x34
   15cf0:	sub	lr, fp, #116	; 0x74
   15cf4:	ldm	lr!, {r0, r1, r2, r3}
   15cf8:	stmia	ip!, {r0, r1, r2, r3}
   15cfc:	ldm	lr!, {r0, r1, r2, r3}
   15d00:	stmia	ip!, {r0, r1, r2, r3}
   15d04:	ldm	lr, {r0, r1, r2, r3}
   15d08:	stm	ip, {r0, r1, r2, r3}
   15d0c:	sub	r3, fp, #52	; 0x34
   15d10:	mov	r2, #1
   15d14:	mov	r1, #58	; 0x3a
   15d18:	mov	r0, r3
   15d1c:	bl	13a18 <__assert_fail@plt+0x2acc>
   15d20:	sub	r3, fp, #52	; 0x34
   15d24:	mvn	r2, #0
   15d28:	ldr	r1, [fp, #-64]	; 0xffffffc0
   15d2c:	ldr	r0, [fp, #-56]	; 0xffffffc8
   15d30:	bl	15700 <__assert_fail@plt+0x47b4>
   15d34:	mov	r3, r0
   15d38:	mov	r0, r3
   15d3c:	sub	sp, fp, #4
   15d40:	pop	{fp, pc}
   15d44:	push	{fp, lr}
   15d48:	add	fp, sp, #4
   15d4c:	sub	sp, sp, #24
   15d50:	str	r0, [fp, #-8]
   15d54:	str	r1, [fp, #-12]
   15d58:	str	r2, [fp, #-16]
   15d5c:	str	r3, [fp, #-20]	; 0xffffffec
   15d60:	mvn	r3, #0
   15d64:	str	r3, [sp]
   15d68:	ldr	r3, [fp, #-20]	; 0xffffffec
   15d6c:	ldr	r2, [fp, #-16]
   15d70:	ldr	r1, [fp, #-12]
   15d74:	ldr	r0, [fp, #-8]
   15d78:	bl	15d8c <__assert_fail@plt+0x4e40>
   15d7c:	mov	r3, r0
   15d80:	mov	r0, r3
   15d84:	sub	sp, fp, #4
   15d88:	pop	{fp, pc}
   15d8c:	push	{fp, lr}
   15d90:	add	fp, sp, #4
   15d94:	sub	sp, sp, #64	; 0x40
   15d98:	str	r0, [fp, #-56]	; 0xffffffc8
   15d9c:	str	r1, [fp, #-60]	; 0xffffffc4
   15da0:	str	r2, [fp, #-64]	; 0xffffffc0
   15da4:	str	r3, [fp, #-68]	; 0xffffffbc
   15da8:	ldr	r3, [pc, #84]	; 15e04 <__assert_fail@plt+0x4eb8>
   15dac:	sub	ip, fp, #52	; 0x34
   15db0:	mov	lr, r3
   15db4:	ldm	lr!, {r0, r1, r2, r3}
   15db8:	stmia	ip!, {r0, r1, r2, r3}
   15dbc:	ldm	lr!, {r0, r1, r2, r3}
   15dc0:	stmia	ip!, {r0, r1, r2, r3}
   15dc4:	ldm	lr, {r0, r1, r2, r3}
   15dc8:	stm	ip, {r0, r1, r2, r3}
   15dcc:	sub	r3, fp, #52	; 0x34
   15dd0:	ldr	r2, [fp, #-64]	; 0xffffffc0
   15dd4:	ldr	r1, [fp, #-60]	; 0xffffffc4
   15dd8:	mov	r0, r3
   15ddc:	bl	13b30 <__assert_fail@plt+0x2be4>
   15de0:	sub	r3, fp, #52	; 0x34
   15de4:	ldr	r2, [fp, #4]
   15de8:	ldr	r1, [fp, #-68]	; 0xffffffbc
   15dec:	ldr	r0, [fp, #-56]	; 0xffffffc8
   15df0:	bl	15700 <__assert_fail@plt+0x47b4>
   15df4:	mov	r3, r0
   15df8:	mov	r0, r3
   15dfc:	sub	sp, fp, #4
   15e00:	pop	{fp, pc}
   15e04:	andeq	sl, r2, ip, ror #2
   15e08:	push	{fp, lr}
   15e0c:	add	fp, sp, #4
   15e10:	sub	sp, sp, #16
   15e14:	str	r0, [fp, #-8]
   15e18:	str	r1, [fp, #-12]
   15e1c:	str	r2, [fp, #-16]
   15e20:	ldr	r3, [fp, #-16]
   15e24:	ldr	r2, [fp, #-12]
   15e28:	ldr	r1, [fp, #-8]
   15e2c:	mov	r0, #0
   15e30:	bl	15d44 <__assert_fail@plt+0x4df8>
   15e34:	mov	r3, r0
   15e38:	mov	r0, r3
   15e3c:	sub	sp, fp, #4
   15e40:	pop	{fp, pc}
   15e44:	push	{fp, lr}
   15e48:	add	fp, sp, #4
   15e4c:	sub	sp, sp, #24
   15e50:	str	r0, [fp, #-8]
   15e54:	str	r1, [fp, #-12]
   15e58:	str	r2, [fp, #-16]
   15e5c:	str	r3, [fp, #-20]	; 0xffffffec
   15e60:	ldr	r3, [fp, #-20]	; 0xffffffec
   15e64:	str	r3, [sp]
   15e68:	ldr	r3, [fp, #-16]
   15e6c:	ldr	r2, [fp, #-12]
   15e70:	ldr	r1, [fp, #-8]
   15e74:	mov	r0, #0
   15e78:	bl	15d8c <__assert_fail@plt+0x4e40>
   15e7c:	mov	r3, r0
   15e80:	mov	r0, r3
   15e84:	sub	sp, fp, #4
   15e88:	pop	{fp, pc}
   15e8c:	push	{fp, lr}
   15e90:	add	fp, sp, #4
   15e94:	sub	sp, sp, #16
   15e98:	str	r0, [fp, #-8]
   15e9c:	str	r1, [fp, #-12]
   15ea0:	str	r2, [fp, #-16]
   15ea4:	ldr	r3, [pc, #28]	; 15ec8 <__assert_fail@plt+0x4f7c>
   15ea8:	ldr	r2, [fp, #-16]
   15eac:	ldr	r1, [fp, #-12]
   15eb0:	ldr	r0, [fp, #-8]
   15eb4:	bl	15700 <__assert_fail@plt+0x47b4>
   15eb8:	mov	r3, r0
   15ebc:	mov	r0, r3
   15ec0:	sub	sp, fp, #4
   15ec4:	pop	{fp, pc}
   15ec8:	andeq	sl, r2, r8, lsl #2
   15ecc:	push	{fp, lr}
   15ed0:	add	fp, sp, #4
   15ed4:	sub	sp, sp, #8
   15ed8:	str	r0, [fp, #-8]
   15edc:	str	r1, [fp, #-12]
   15ee0:	ldr	r2, [fp, #-12]
   15ee4:	ldr	r1, [fp, #-8]
   15ee8:	mov	r0, #0
   15eec:	bl	15e8c <__assert_fail@plt+0x4f40>
   15ef0:	mov	r3, r0
   15ef4:	mov	r0, r3
   15ef8:	sub	sp, fp, #4
   15efc:	pop	{fp, pc}
   15f00:	push	{fp, lr}
   15f04:	add	fp, sp, #4
   15f08:	sub	sp, sp, #8
   15f0c:	str	r0, [fp, #-8]
   15f10:	str	r1, [fp, #-12]
   15f14:	mvn	r2, #0
   15f18:	ldr	r1, [fp, #-12]
   15f1c:	ldr	r0, [fp, #-8]
   15f20:	bl	15e8c <__assert_fail@plt+0x4f40>
   15f24:	mov	r3, r0
   15f28:	mov	r0, r3
   15f2c:	sub	sp, fp, #4
   15f30:	pop	{fp, pc}
   15f34:	push	{fp, lr}
   15f38:	add	fp, sp, #4
   15f3c:	sub	sp, sp, #8
   15f40:	str	r0, [fp, #-8]
   15f44:	ldr	r1, [fp, #-8]
   15f48:	mov	r0, #0
   15f4c:	bl	15f00 <__assert_fail@plt+0x4fb4>
   15f50:	mov	r3, r0
   15f54:	mov	r0, r3
   15f58:	sub	sp, fp, #4
   15f5c:	pop	{fp, pc}
   15f60:	push	{fp, lr}
   15f64:	add	fp, sp, #4
   15f68:	sub	sp, sp, #24
   15f6c:	str	r0, [fp, #-16]
   15f70:	str	r1, [fp, #-20]	; 0xffffffec
   15f74:	str	r2, [fp, #-24]	; 0xffffffe8
   15f78:	ldr	r3, [fp, #-24]	; 0xffffffe8
   15f7c:	cmp	r3, #0
   15f80:	beq	15fbc <__assert_fail@plt+0x5070>
   15f84:	ldr	r1, [fp, #-24]	; 0xffffffe8
   15f88:	mvn	r0, #0
   15f8c:	bl	188b0 <__assert_fail@plt+0x7964>
   15f90:	mov	r3, r0
   15f94:	mov	r2, r3
   15f98:	ldr	r3, [fp, #-20]	; 0xffffffec
   15f9c:	cmp	r2, r3
   15fa0:	bcs	15fbc <__assert_fail@plt+0x5070>
   15fa4:	ldr	r3, [fp, #-20]	; 0xffffffec
   15fa8:	ldr	r2, [fp, #-24]	; 0xffffffe8
   15fac:	mul	r3, r2, r3
   15fb0:	str	r3, [fp, #-8]
   15fb4:	mov	r3, #1
   15fb8:	b	15fd0 <__assert_fail@plt+0x5084>
   15fbc:	ldr	r3, [fp, #-20]	; 0xffffffec
   15fc0:	ldr	r2, [fp, #-24]	; 0xffffffe8
   15fc4:	mul	r3, r2, r3
   15fc8:	str	r3, [fp, #-8]
   15fcc:	mov	r3, #0
   15fd0:	cmp	r3, #0
   15fd4:	beq	15ff0 <__assert_fail@plt+0x50a4>
   15fd8:	bl	10e80 <__errno_location@plt>
   15fdc:	mov	r2, r0
   15fe0:	mov	r3, #12
   15fe4:	str	r3, [r2]
   15fe8:	mov	r3, #0
   15fec:	b	16004 <__assert_fail@plt+0x50b8>
   15ff0:	ldr	r3, [fp, #-8]
   15ff4:	mov	r1, r3
   15ff8:	ldr	r0, [fp, #-16]
   15ffc:	bl	17e18 <__assert_fail@plt+0x6ecc>
   16000:	mov	r3, r0
   16004:	mov	r0, r3
   16008:	sub	sp, fp, #4
   1600c:	pop	{fp, pc}
   16010:	push	{r4, r5, r6, r7, fp, lr}
   16014:	add	fp, sp, #20
   16018:	sub	sp, sp, #48	; 0x30
   1601c:	str	r0, [fp, #-24]	; 0xffffffe8
   16020:	str	r1, [fp, #-28]	; 0xffffffe4
   16024:	str	r2, [fp, #-32]	; 0xffffffe0
   16028:	str	r3, [fp, #-36]	; 0xffffffdc
   1602c:	ldr	r3, [fp, #-28]	; 0xffffffe4
   16030:	cmp	r3, #0
   16034:	beq	16058 <__assert_fail@plt+0x510c>
   16038:	ldr	r3, [fp, #-36]	; 0xffffffdc
   1603c:	str	r3, [sp]
   16040:	ldr	r3, [fp, #-32]	; 0xffffffe0
   16044:	ldr	r2, [fp, #-28]	; 0xffffffe4
   16048:	ldr	r1, [pc, #1260]	; 1653c <__assert_fail@plt+0x55f0>
   1604c:	ldr	r0, [fp, #-24]	; 0xffffffe8
   16050:	bl	10e74 <fprintf@plt>
   16054:	b	1606c <__assert_fail@plt+0x5120>
   16058:	ldr	r3, [fp, #-36]	; 0xffffffdc
   1605c:	ldr	r2, [fp, #-32]	; 0xffffffe0
   16060:	ldr	r1, [pc, #1240]	; 16540 <__assert_fail@plt+0x55f4>
   16064:	ldr	r0, [fp, #-24]	; 0xffffffe8
   16068:	bl	10e74 <fprintf@plt>
   1606c:	ldr	r0, [pc, #1232]	; 16544 <__assert_fail@plt+0x55f8>
   16070:	bl	10e50 <gettext@plt>
   16074:	mov	r2, r0
   16078:	ldr	r3, [pc, #1224]	; 16548 <__assert_fail@plt+0x55fc>
   1607c:	ldr	r1, [pc, #1224]	; 1654c <__assert_fail@plt+0x5600>
   16080:	ldr	r0, [fp, #-24]	; 0xffffffe8
   16084:	bl	10e74 <fprintf@plt>
   16088:	ldr	r1, [fp, #-24]	; 0xffffffe8
   1608c:	mov	r0, #10
   16090:	bl	10d78 <fputc_unlocked@plt>
   16094:	ldr	r0, [pc, #1204]	; 16550 <__assert_fail@plt+0x5604>
   16098:	bl	10e50 <gettext@plt>
   1609c:	mov	r3, r0
   160a0:	ldr	r2, [pc, #1196]	; 16554 <__assert_fail@plt+0x5608>
   160a4:	mov	r1, r3
   160a8:	ldr	r0, [fp, #-24]	; 0xffffffe8
   160ac:	bl	10e74 <fprintf@plt>
   160b0:	ldr	r1, [fp, #-24]	; 0xffffffe8
   160b4:	mov	r0, #10
   160b8:	bl	10d78 <fputc_unlocked@plt>
   160bc:	ldr	r3, [fp, #8]
   160c0:	cmp	r3, #9
   160c4:	ldrls	pc, [pc, r3, lsl #2]
   160c8:	b	16484 <__assert_fail@plt+0x5538>
   160cc:	andeq	r6, r1, ip, lsr #10
   160d0:	strdeq	r6, [r1], -r4
   160d4:	andeq	r6, r1, r8, lsl r1
   160d8:	andeq	r6, r1, r4, asr #2
   160dc:	andeq	r6, r1, r4, lsl #3
   160e0:	ldrdeq	r6, [r1], -ip
   160e4:	andeq	r6, r1, r4, asr #4
   160e8:			; <UNDEFINED> instruction: 0x000162bc
   160ec:	andeq	r6, r1, r4, asr #6
   160f0:	ldrdeq	r6, [r1], -ip
   160f4:	ldr	r0, [pc, #1116]	; 16558 <__assert_fail@plt+0x560c>
   160f8:	bl	10e50 <gettext@plt>
   160fc:	mov	r1, r0
   16100:	ldr	r3, [fp, #4]
   16104:	ldr	r3, [r3]
   16108:	mov	r2, r3
   1610c:	ldr	r0, [fp, #-24]	; 0xffffffe8
   16110:	bl	10e74 <fprintf@plt>
   16114:	b	16530 <__assert_fail@plt+0x55e4>
   16118:	ldr	r0, [pc, #1084]	; 1655c <__assert_fail@plt+0x5610>
   1611c:	bl	10e50 <gettext@plt>
   16120:	mov	r1, r0
   16124:	ldr	r3, [fp, #4]
   16128:	ldr	r2, [r3]
   1612c:	ldr	r3, [fp, #4]
   16130:	add	r3, r3, #4
   16134:	ldr	r3, [r3]
   16138:	ldr	r0, [fp, #-24]	; 0xffffffe8
   1613c:	bl	10e74 <fprintf@plt>
   16140:	b	16530 <__assert_fail@plt+0x55e4>
   16144:	ldr	r0, [pc, #1044]	; 16560 <__assert_fail@plt+0x5614>
   16148:	bl	10e50 <gettext@plt>
   1614c:	ldr	r3, [fp, #4]
   16150:	ldr	r2, [r3]
   16154:	ldr	r3, [fp, #4]
   16158:	add	r3, r3, #4
   1615c:	ldr	r1, [r3]
   16160:	ldr	r3, [fp, #4]
   16164:	add	r3, r3, #8
   16168:	ldr	r3, [r3]
   1616c:	str	r3, [sp]
   16170:	mov	r3, r1
   16174:	mov	r1, r0
   16178:	ldr	r0, [fp, #-24]	; 0xffffffe8
   1617c:	bl	10e74 <fprintf@plt>
   16180:	b	16530 <__assert_fail@plt+0x55e4>
   16184:	ldr	r0, [pc, #984]	; 16564 <__assert_fail@plt+0x5618>
   16188:	bl	10e50 <gettext@plt>
   1618c:	mov	ip, r0
   16190:	ldr	r3, [fp, #4]
   16194:	ldr	r1, [r3]
   16198:	ldr	r3, [fp, #4]
   1619c:	add	r3, r3, #4
   161a0:	ldr	r0, [r3]
   161a4:	ldr	r3, [fp, #4]
   161a8:	add	r3, r3, #8
   161ac:	ldr	r3, [r3]
   161b0:	ldr	r2, [fp, #4]
   161b4:	add	r2, r2, #12
   161b8:	ldr	r2, [r2]
   161bc:	str	r2, [sp, #4]
   161c0:	str	r3, [sp]
   161c4:	mov	r3, r0
   161c8:	mov	r2, r1
   161cc:	mov	r1, ip
   161d0:	ldr	r0, [fp, #-24]	; 0xffffffe8
   161d4:	bl	10e74 <fprintf@plt>
   161d8:	b	16530 <__assert_fail@plt+0x55e4>
   161dc:	ldr	r0, [pc, #900]	; 16568 <__assert_fail@plt+0x561c>
   161e0:	bl	10e50 <gettext@plt>
   161e4:	mov	lr, r0
   161e8:	ldr	r3, [fp, #4]
   161ec:	ldr	r0, [r3]
   161f0:	ldr	r3, [fp, #4]
   161f4:	add	r3, r3, #4
   161f8:	ldr	ip, [r3]
   161fc:	ldr	r3, [fp, #4]
   16200:	add	r3, r3, #8
   16204:	ldr	r3, [r3]
   16208:	ldr	r2, [fp, #4]
   1620c:	add	r2, r2, #12
   16210:	ldr	r2, [r2]
   16214:	ldr	r1, [fp, #4]
   16218:	add	r1, r1, #16
   1621c:	ldr	r1, [r1]
   16220:	str	r1, [sp, #8]
   16224:	str	r2, [sp, #4]
   16228:	str	r3, [sp]
   1622c:	mov	r3, ip
   16230:	mov	r2, r0
   16234:	mov	r1, lr
   16238:	ldr	r0, [fp, #-24]	; 0xffffffe8
   1623c:	bl	10e74 <fprintf@plt>
   16240:	b	16530 <__assert_fail@plt+0x55e4>
   16244:	ldr	r0, [pc, #800]	; 1656c <__assert_fail@plt+0x5620>
   16248:	bl	10e50 <gettext@plt>
   1624c:	mov	r4, r0
   16250:	ldr	r3, [fp, #4]
   16254:	ldr	ip, [r3]
   16258:	ldr	r3, [fp, #4]
   1625c:	add	r3, r3, #4
   16260:	ldr	lr, [r3]
   16264:	ldr	r3, [fp, #4]
   16268:	add	r3, r3, #8
   1626c:	ldr	r3, [r3]
   16270:	ldr	r2, [fp, #4]
   16274:	add	r2, r2, #12
   16278:	ldr	r2, [r2]
   1627c:	ldr	r1, [fp, #4]
   16280:	add	r1, r1, #16
   16284:	ldr	r1, [r1]
   16288:	ldr	r0, [fp, #4]
   1628c:	add	r0, r0, #20
   16290:	ldr	r0, [r0]
   16294:	str	r0, [sp, #12]
   16298:	str	r1, [sp, #8]
   1629c:	str	r2, [sp, #4]
   162a0:	str	r3, [sp]
   162a4:	mov	r3, lr
   162a8:	mov	r2, ip
   162ac:	mov	r1, r4
   162b0:	ldr	r0, [fp, #-24]	; 0xffffffe8
   162b4:	bl	10e74 <fprintf@plt>
   162b8:	b	16530 <__assert_fail@plt+0x55e4>
   162bc:	ldr	r0, [pc, #684]	; 16570 <__assert_fail@plt+0x5624>
   162c0:	bl	10e50 <gettext@plt>
   162c4:	mov	r5, r0
   162c8:	ldr	r3, [fp, #4]
   162cc:	ldr	lr, [r3]
   162d0:	ldr	r3, [fp, #4]
   162d4:	add	r3, r3, #4
   162d8:	ldr	r4, [r3]
   162dc:	ldr	r3, [fp, #4]
   162e0:	add	r3, r3, #8
   162e4:	ldr	r3, [r3]
   162e8:	ldr	r2, [fp, #4]
   162ec:	add	r2, r2, #12
   162f0:	ldr	r2, [r2]
   162f4:	ldr	r1, [fp, #4]
   162f8:	add	r1, r1, #16
   162fc:	ldr	r1, [r1]
   16300:	ldr	r0, [fp, #4]
   16304:	add	r0, r0, #20
   16308:	ldr	r0, [r0]
   1630c:	ldr	ip, [fp, #4]
   16310:	add	ip, ip, #24
   16314:	ldr	ip, [ip]
   16318:	str	ip, [sp, #16]
   1631c:	str	r0, [sp, #12]
   16320:	str	r1, [sp, #8]
   16324:	str	r2, [sp, #4]
   16328:	str	r3, [sp]
   1632c:	mov	r3, r4
   16330:	mov	r2, lr
   16334:	mov	r1, r5
   16338:	ldr	r0, [fp, #-24]	; 0xffffffe8
   1633c:	bl	10e74 <fprintf@plt>
   16340:	b	16530 <__assert_fail@plt+0x55e4>
   16344:	ldr	r0, [pc, #552]	; 16574 <__assert_fail@plt+0x5628>
   16348:	bl	10e50 <gettext@plt>
   1634c:	mov	r6, r0
   16350:	ldr	r3, [fp, #4]
   16354:	ldr	r4, [r3]
   16358:	ldr	r3, [fp, #4]
   1635c:	add	r3, r3, #4
   16360:	ldr	r5, [r3]
   16364:	ldr	r3, [fp, #4]
   16368:	add	r3, r3, #8
   1636c:	ldr	r3, [r3]
   16370:	ldr	r2, [fp, #4]
   16374:	add	r2, r2, #12
   16378:	ldr	r2, [r2]
   1637c:	ldr	r1, [fp, #4]
   16380:	add	r1, r1, #16
   16384:	ldr	r1, [r1]
   16388:	ldr	r0, [fp, #4]
   1638c:	add	r0, r0, #20
   16390:	ldr	r0, [r0]
   16394:	ldr	ip, [fp, #4]
   16398:	add	ip, ip, #24
   1639c:	ldr	ip, [ip]
   163a0:	ldr	lr, [fp, #4]
   163a4:	add	lr, lr, #28
   163a8:	ldr	lr, [lr]
   163ac:	str	lr, [sp, #20]
   163b0:	str	ip, [sp, #16]
   163b4:	str	r0, [sp, #12]
   163b8:	str	r1, [sp, #8]
   163bc:	str	r2, [sp, #4]
   163c0:	str	r3, [sp]
   163c4:	mov	r3, r5
   163c8:	mov	r2, r4
   163cc:	mov	r1, r6
   163d0:	ldr	r0, [fp, #-24]	; 0xffffffe8
   163d4:	bl	10e74 <fprintf@plt>
   163d8:	b	16530 <__assert_fail@plt+0x55e4>
   163dc:	ldr	r0, [pc, #404]	; 16578 <__assert_fail@plt+0x562c>
   163e0:	bl	10e50 <gettext@plt>
   163e4:	mov	r7, r0
   163e8:	ldr	r3, [fp, #4]
   163ec:	ldr	r5, [r3]
   163f0:	ldr	r3, [fp, #4]
   163f4:	add	r3, r3, #4
   163f8:	ldr	r6, [r3]
   163fc:	ldr	r3, [fp, #4]
   16400:	add	r3, r3, #8
   16404:	ldr	r3, [r3]
   16408:	ldr	r2, [fp, #4]
   1640c:	add	r2, r2, #12
   16410:	ldr	r2, [r2]
   16414:	ldr	r1, [fp, #4]
   16418:	add	r1, r1, #16
   1641c:	ldr	r1, [r1]
   16420:	ldr	r0, [fp, #4]
   16424:	add	r0, r0, #20
   16428:	ldr	r0, [r0]
   1642c:	ldr	ip, [fp, #4]
   16430:	add	ip, ip, #24
   16434:	ldr	ip, [ip]
   16438:	ldr	lr, [fp, #4]
   1643c:	add	lr, lr, #28
   16440:	ldr	lr, [lr]
   16444:	ldr	r4, [fp, #4]
   16448:	add	r4, r4, #32
   1644c:	ldr	r4, [r4]
   16450:	str	r4, [sp, #24]
   16454:	str	lr, [sp, #20]
   16458:	str	ip, [sp, #16]
   1645c:	str	r0, [sp, #12]
   16460:	str	r1, [sp, #8]
   16464:	str	r2, [sp, #4]
   16468:	str	r3, [sp]
   1646c:	mov	r3, r6
   16470:	mov	r2, r5
   16474:	mov	r1, r7
   16478:	ldr	r0, [fp, #-24]	; 0xffffffe8
   1647c:	bl	10e74 <fprintf@plt>
   16480:	b	16530 <__assert_fail@plt+0x55e4>
   16484:	ldr	r0, [pc, #240]	; 1657c <__assert_fail@plt+0x5630>
   16488:	bl	10e50 <gettext@plt>
   1648c:	mov	r7, r0
   16490:	ldr	r3, [fp, #4]
   16494:	ldr	r5, [r3]
   16498:	ldr	r3, [fp, #4]
   1649c:	add	r3, r3, #4
   164a0:	ldr	r6, [r3]
   164a4:	ldr	r3, [fp, #4]
   164a8:	add	r3, r3, #8
   164ac:	ldr	r3, [r3]
   164b0:	ldr	r2, [fp, #4]
   164b4:	add	r2, r2, #12
   164b8:	ldr	r2, [r2]
   164bc:	ldr	r1, [fp, #4]
   164c0:	add	r1, r1, #16
   164c4:	ldr	r1, [r1]
   164c8:	ldr	r0, [fp, #4]
   164cc:	add	r0, r0, #20
   164d0:	ldr	r0, [r0]
   164d4:	ldr	ip, [fp, #4]
   164d8:	add	ip, ip, #24
   164dc:	ldr	ip, [ip]
   164e0:	ldr	lr, [fp, #4]
   164e4:	add	lr, lr, #28
   164e8:	ldr	lr, [lr]
   164ec:	ldr	r4, [fp, #4]
   164f0:	add	r4, r4, #32
   164f4:	ldr	r4, [r4]
   164f8:	str	r4, [sp, #24]
   164fc:	str	lr, [sp, #20]
   16500:	str	ip, [sp, #16]
   16504:	str	r0, [sp, #12]
   16508:	str	r1, [sp, #8]
   1650c:	str	r2, [sp, #4]
   16510:	str	r3, [sp]
   16514:	mov	r3, r6
   16518:	mov	r2, r5
   1651c:	mov	r1, r7
   16520:	ldr	r0, [fp, #-24]	; 0xffffffe8
   16524:	bl	10e74 <fprintf@plt>
   16528:	b	16530 <__assert_fail@plt+0x55e4>
   1652c:	nop			; (mov r0, r0)
   16530:	nop			; (mov r0, r0)
   16534:	sub	sp, fp, #20
   16538:	pop	{r4, r5, r6, r7, fp, pc}
   1653c:	andeq	r9, r1, r0, ror r8
   16540:	andeq	r9, r1, ip, ror r8
   16544:	andeq	r9, r1, r4, lsl #17
   16548:	andeq	r0, r0, r6, ror #15
   1654c:	muleq	r1, r4, fp
   16550:	andeq	r9, r1, r8, lsl #17
   16554:	andeq	r9, r1, r4, lsr r9
   16558:	andeq	r9, r1, r8, asr r9
   1655c:	andeq	r9, r1, r8, ror #18
   16560:	andeq	r9, r1, r0, lsl #19
   16564:	muleq	r1, ip, r9
   16568:			; <UNDEFINED> instruction: 0x000199bc
   1656c:	andeq	r9, r1, r0, ror #19
   16570:	andeq	r9, r1, r8, lsl #20
   16574:	andeq	r9, r1, r4, lsr sl
   16578:	andeq	r9, r1, r4, ror #20
   1657c:	muleq	r1, r8, sl
   16580:	push	{fp, lr}
   16584:	add	fp, sp, #4
   16588:	sub	sp, sp, #32
   1658c:	str	r0, [fp, #-16]
   16590:	str	r1, [fp, #-20]	; 0xffffffec
   16594:	str	r2, [fp, #-24]	; 0xffffffe8
   16598:	str	r3, [fp, #-28]	; 0xffffffe4
   1659c:	mov	r3, #0
   165a0:	str	r3, [fp, #-8]
   165a4:	b	165b4 <__assert_fail@plt+0x5668>
   165a8:	ldr	r3, [fp, #-8]
   165ac:	add	r3, r3, #1
   165b0:	str	r3, [fp, #-8]
   165b4:	ldr	r3, [fp, #-8]
   165b8:	lsl	r3, r3, #2
   165bc:	ldr	r2, [fp, #4]
   165c0:	add	r3, r2, r3
   165c4:	ldr	r3, [r3]
   165c8:	cmp	r3, #0
   165cc:	bne	165a8 <__assert_fail@plt+0x565c>
   165d0:	ldr	r3, [fp, #-8]
   165d4:	str	r3, [sp, #4]
   165d8:	ldr	r3, [fp, #4]
   165dc:	str	r3, [sp]
   165e0:	ldr	r3, [fp, #-28]	; 0xffffffe4
   165e4:	ldr	r2, [fp, #-24]	; 0xffffffe8
   165e8:	ldr	r1, [fp, #-20]	; 0xffffffec
   165ec:	ldr	r0, [fp, #-16]
   165f0:	bl	16010 <__assert_fail@plt+0x50c4>
   165f4:	nop			; (mov r0, r0)
   165f8:	sub	sp, fp, #4
   165fc:	pop	{fp, pc}
   16600:	push	{fp, lr}
   16604:	add	fp, sp, #4
   16608:	sub	sp, sp, #72	; 0x48
   1660c:	str	r0, [fp, #-56]	; 0xffffffc8
   16610:	str	r1, [fp, #-60]	; 0xffffffc4
   16614:	str	r2, [fp, #-64]	; 0xffffffc0
   16618:	str	r3, [fp, #-68]	; 0xffffffbc
   1661c:	mov	r3, #0
   16620:	str	r3, [fp, #-8]
   16624:	b	16634 <__assert_fail@plt+0x56e8>
   16628:	ldr	r3, [fp, #-8]
   1662c:	add	r3, r3, #1
   16630:	str	r3, [fp, #-8]
   16634:	ldr	r3, [fp, #-8]
   16638:	cmp	r3, #9
   1663c:	bhi	16680 <__assert_fail@plt+0x5734>
   16640:	ldr	r3, [fp, #4]
   16644:	add	r2, r3, #4
   16648:	str	r2, [fp, #4]
   1664c:	ldr	r2, [r3]
   16650:	ldr	r3, [fp, #-8]
   16654:	lsl	r3, r3, #2
   16658:	sub	r1, fp, #4
   1665c:	add	r3, r1, r3
   16660:	str	r2, [r3, #-44]	; 0xffffffd4
   16664:	ldr	r3, [fp, #-8]
   16668:	lsl	r3, r3, #2
   1666c:	sub	r2, fp, #4
   16670:	add	r3, r2, r3
   16674:	ldr	r3, [r3, #-44]	; 0xffffffd4
   16678:	cmp	r3, #0
   1667c:	bne	16628 <__assert_fail@plt+0x56dc>
   16680:	ldr	r3, [fp, #-8]
   16684:	str	r3, [sp, #4]
   16688:	sub	r3, fp, #48	; 0x30
   1668c:	str	r3, [sp]
   16690:	ldr	r3, [fp, #-68]	; 0xffffffbc
   16694:	ldr	r2, [fp, #-64]	; 0xffffffc0
   16698:	ldr	r1, [fp, #-60]	; 0xffffffc4
   1669c:	ldr	r0, [fp, #-56]	; 0xffffffc8
   166a0:	bl	16010 <__assert_fail@plt+0x50c4>
   166a4:	nop			; (mov r0, r0)
   166a8:	sub	sp, fp, #4
   166ac:	pop	{fp, pc}
   166b0:	push	{r3}		; (str r3, [sp, #-4]!)
   166b4:	push	{fp, lr}
   166b8:	add	fp, sp, #4
   166bc:	sub	sp, sp, #36	; 0x24
   166c0:	str	r0, [fp, #-20]	; 0xffffffec
   166c4:	str	r1, [fp, #-24]	; 0xffffffe8
   166c8:	str	r2, [fp, #-28]	; 0xffffffe4
   166cc:	add	r3, fp, #8
   166d0:	str	r3, [fp, #-12]
   166d4:	ldr	r3, [fp, #-12]
   166d8:	str	r3, [sp]
   166dc:	ldr	r3, [fp, #4]
   166e0:	ldr	r2, [fp, #-28]	; 0xffffffe4
   166e4:	ldr	r1, [fp, #-24]	; 0xffffffe8
   166e8:	ldr	r0, [fp, #-20]	; 0xffffffec
   166ec:	bl	16600 <__assert_fail@plt+0x56b4>
   166f0:	nop			; (mov r0, r0)
   166f4:	sub	sp, fp, #4
   166f8:	pop	{fp, lr}
   166fc:	add	sp, sp, #4
   16700:	bx	lr
   16704:	push	{fp, lr}
   16708:	add	fp, sp, #4
   1670c:	ldr	r3, [pc, #96]	; 16774 <__assert_fail@plt+0x5828>
   16710:	ldr	r3, [r3]
   16714:	mov	r1, r3
   16718:	mov	r0, #10
   1671c:	bl	10d78 <fputc_unlocked@plt>
   16720:	ldr	r0, [pc, #80]	; 16778 <__assert_fail@plt+0x582c>
   16724:	bl	10e50 <gettext@plt>
   16728:	mov	r3, r0
   1672c:	ldr	r1, [pc, #72]	; 1677c <__assert_fail@plt+0x5830>
   16730:	mov	r0, r3
   16734:	bl	10d0c <printf@plt>
   16738:	ldr	r0, [pc, #64]	; 16780 <__assert_fail@plt+0x5834>
   1673c:	bl	10e50 <gettext@plt>
   16740:	mov	r3, r0
   16744:	ldr	r2, [pc, #56]	; 16784 <__assert_fail@plt+0x5838>
   16748:	ldr	r1, [pc, #56]	; 16788 <__assert_fail@plt+0x583c>
   1674c:	mov	r0, r3
   16750:	bl	10d0c <printf@plt>
   16754:	ldr	r0, [pc, #48]	; 1678c <__assert_fail@plt+0x5840>
   16758:	bl	10e50 <gettext@plt>
   1675c:	mov	r3, r0
   16760:	ldr	r1, [pc, #40]	; 16790 <__assert_fail@plt+0x5844>
   16764:	mov	r0, r3
   16768:	bl	10d0c <printf@plt>
   1676c:	nop			; (mov r0, r0)
   16770:	pop	{fp, pc}
   16774:	andeq	sl, r2, r4, asr r1
   16778:	ldrdeq	r9, [r1], -r4
   1677c:	andeq	r9, r1, r8, ror #21
   16780:	andeq	r9, r1, r0, lsl #22
   16784:	andeq	r9, r1, r4, lsl fp
   16788:	andeq	r9, r1, ip, lsr fp
   1678c:	andeq	r9, r1, ip, asr #22
   16790:	andeq	r9, r1, r4, ror fp
   16794:	push	{fp, lr}
   16798:	add	fp, sp, #4
   1679c:	sub	sp, sp, #16
   167a0:	str	r0, [fp, #-8]
   167a4:	str	r1, [fp, #-12]
   167a8:	str	r2, [fp, #-16]
   167ac:	ldr	r2, [fp, #-16]
   167b0:	ldr	r1, [fp, #-12]
   167b4:	ldr	r0, [fp, #-8]
   167b8:	bl	16924 <__assert_fail@plt+0x59d8>
   167bc:	mov	r3, r0
   167c0:	mov	r0, r3
   167c4:	sub	sp, fp, #4
   167c8:	pop	{fp, pc}
   167cc:	push	{fp, lr}
   167d0:	add	fp, sp, #4
   167d4:	sub	sp, sp, #8
   167d8:	str	r0, [fp, #-8]
   167dc:	ldr	r3, [fp, #-8]
   167e0:	cmp	r3, #0
   167e4:	bne	167ec <__assert_fail@plt+0x58a0>
   167e8:	bl	17318 <__assert_fail@plt+0x63cc>
   167ec:	ldr	r3, [fp, #-8]
   167f0:	mov	r0, r3
   167f4:	sub	sp, fp, #4
   167f8:	pop	{fp, pc}
   167fc:	push	{fp, lr}
   16800:	add	fp, sp, #4
   16804:	sub	sp, sp, #8
   16808:	str	r0, [fp, #-8]
   1680c:	ldr	r0, [fp, #-8]
   16810:	bl	17d70 <__assert_fail@plt+0x6e24>
   16814:	mov	r3, r0
   16818:	mov	r0, r3
   1681c:	bl	167cc <__assert_fail@plt+0x5880>
   16820:	mov	r3, r0
   16824:	mov	r0, r3
   16828:	sub	sp, fp, #4
   1682c:	pop	{fp, pc}
   16830:	push	{fp, lr}
   16834:	add	fp, sp, #4
   16838:	sub	sp, sp, #8
   1683c:	str	r0, [fp, #-8]
   16840:	ldr	r0, [fp, #-8]
   16844:	bl	136ec <__assert_fail@plt+0x27a0>
   16848:	mov	r3, r0
   1684c:	mov	r0, r3
   16850:	bl	167cc <__assert_fail@plt+0x5880>
   16854:	mov	r3, r0
   16858:	mov	r0, r3
   1685c:	sub	sp, fp, #4
   16860:	pop	{fp, pc}
   16864:	push	{fp, lr}
   16868:	add	fp, sp, #4
   1686c:	sub	sp, sp, #8
   16870:	str	r0, [fp, #-8]
   16874:	ldr	r0, [fp, #-8]
   16878:	bl	167fc <__assert_fail@plt+0x58b0>
   1687c:	mov	r3, r0
   16880:	mov	r0, r3
   16884:	sub	sp, fp, #4
   16888:	pop	{fp, pc}
   1688c:	push	{fp, lr}
   16890:	add	fp, sp, #4
   16894:	sub	sp, sp, #16
   16898:	str	r0, [fp, #-16]
   1689c:	str	r1, [fp, #-20]	; 0xffffffec
   168a0:	ldr	r1, [fp, #-20]	; 0xffffffec
   168a4:	ldr	r0, [fp, #-16]
   168a8:	bl	17e18 <__assert_fail@plt+0x6ecc>
   168ac:	str	r0, [fp, #-8]
   168b0:	ldr	r3, [fp, #-8]
   168b4:	cmp	r3, #0
   168b8:	bne	168d8 <__assert_fail@plt+0x598c>
   168bc:	ldr	r3, [fp, #-16]
   168c0:	cmp	r3, #0
   168c4:	beq	168d4 <__assert_fail@plt+0x5988>
   168c8:	ldr	r3, [fp, #-20]	; 0xffffffec
   168cc:	cmp	r3, #0
   168d0:	beq	168d8 <__assert_fail@plt+0x598c>
   168d4:	bl	17318 <__assert_fail@plt+0x63cc>
   168d8:	ldr	r3, [fp, #-8]
   168dc:	mov	r0, r3
   168e0:	sub	sp, fp, #4
   168e4:	pop	{fp, pc}
   168e8:	push	{fp, lr}
   168ec:	add	fp, sp, #4
   168f0:	sub	sp, sp, #8
   168f4:	str	r0, [fp, #-8]
   168f8:	str	r1, [fp, #-12]
   168fc:	ldr	r1, [fp, #-12]
   16900:	ldr	r0, [fp, #-8]
   16904:	bl	13718 <__assert_fail@plt+0x27cc>
   16908:	mov	r3, r0
   1690c:	mov	r0, r3
   16910:	bl	167cc <__assert_fail@plt+0x5880>
   16914:	mov	r3, r0
   16918:	mov	r0, r3
   1691c:	sub	sp, fp, #4
   16920:	pop	{fp, pc}
   16924:	push	{fp, lr}
   16928:	add	fp, sp, #4
   1692c:	sub	sp, sp, #24
   16930:	str	r0, [fp, #-16]
   16934:	str	r1, [fp, #-20]	; 0xffffffec
   16938:	str	r2, [fp, #-24]	; 0xffffffe8
   1693c:	ldr	r2, [fp, #-24]	; 0xffffffe8
   16940:	ldr	r1, [fp, #-20]	; 0xffffffec
   16944:	ldr	r0, [fp, #-16]
   16948:	bl	15f60 <__assert_fail@plt+0x5014>
   1694c:	str	r0, [fp, #-8]
   16950:	ldr	r3, [fp, #-8]
   16954:	cmp	r3, #0
   16958:	bne	16984 <__assert_fail@plt+0x5a38>
   1695c:	ldr	r3, [fp, #-16]
   16960:	cmp	r3, #0
   16964:	beq	16980 <__assert_fail@plt+0x5a34>
   16968:	ldr	r3, [fp, #-20]	; 0xffffffec
   1696c:	cmp	r3, #0
   16970:	beq	16984 <__assert_fail@plt+0x5a38>
   16974:	ldr	r3, [fp, #-24]	; 0xffffffe8
   16978:	cmp	r3, #0
   1697c:	beq	16984 <__assert_fail@plt+0x5a38>
   16980:	bl	17318 <__assert_fail@plt+0x63cc>
   16984:	ldr	r3, [fp, #-8]
   16988:	mov	r0, r3
   1698c:	sub	sp, fp, #4
   16990:	pop	{fp, pc}
   16994:	push	{fp, lr}
   16998:	add	fp, sp, #4
   1699c:	sub	sp, sp, #16
   169a0:	str	r0, [fp, #-8]
   169a4:	str	r1, [fp, #-12]
   169a8:	str	r2, [fp, #-16]
   169ac:	ldr	r2, [fp, #-16]
   169b0:	ldr	r1, [fp, #-12]
   169b4:	ldr	r0, [fp, #-8]
   169b8:	bl	137a0 <__assert_fail@plt+0x2854>
   169bc:	mov	r3, r0
   169c0:	mov	r0, r3
   169c4:	bl	167cc <__assert_fail@plt+0x5880>
   169c8:	mov	r3, r0
   169cc:	mov	r0, r3
   169d0:	sub	sp, fp, #4
   169d4:	pop	{fp, pc}
   169d8:	push	{fp, lr}
   169dc:	add	fp, sp, #4
   169e0:	sub	sp, sp, #8
   169e4:	str	r0, [fp, #-8]
   169e8:	str	r1, [fp, #-12]
   169ec:	ldr	r2, [fp, #-12]
   169f0:	ldr	r1, [fp, #-8]
   169f4:	mov	r0, #0
   169f8:	bl	16924 <__assert_fail@plt+0x59d8>
   169fc:	mov	r3, r0
   16a00:	mov	r0, r3
   16a04:	sub	sp, fp, #4
   16a08:	pop	{fp, pc}
   16a0c:	push	{fp, lr}
   16a10:	add	fp, sp, #4
   16a14:	sub	sp, sp, #8
   16a18:	str	r0, [fp, #-8]
   16a1c:	str	r1, [fp, #-12]
   16a20:	ldr	r2, [fp, #-12]
   16a24:	ldr	r1, [fp, #-8]
   16a28:	mov	r0, #0
   16a2c:	bl	16994 <__assert_fail@plt+0x5a48>
   16a30:	mov	r3, r0
   16a34:	mov	r0, r3
   16a38:	sub	sp, fp, #4
   16a3c:	pop	{fp, pc}
   16a40:	push	{fp, lr}
   16a44:	add	fp, sp, #4
   16a48:	sub	sp, sp, #8
   16a4c:	str	r0, [fp, #-8]
   16a50:	str	r1, [fp, #-12]
   16a54:	mov	r2, #1
   16a58:	ldr	r1, [fp, #-12]
   16a5c:	ldr	r0, [fp, #-8]
   16a60:	bl	16a74 <__assert_fail@plt+0x5b28>
   16a64:	mov	r3, r0
   16a68:	mov	r0, r3
   16a6c:	sub	sp, fp, #4
   16a70:	pop	{fp, pc}
   16a74:	push	{fp, lr}
   16a78:	add	fp, sp, #4
   16a7c:	sub	sp, sp, #24
   16a80:	str	r0, [fp, #-16]
   16a84:	str	r1, [fp, #-20]	; 0xffffffec
   16a88:	str	r2, [fp, #-24]	; 0xffffffe8
   16a8c:	ldr	r3, [fp, #-20]	; 0xffffffec
   16a90:	ldr	r3, [r3]
   16a94:	str	r3, [fp, #-8]
   16a98:	ldr	r3, [fp, #-16]
   16a9c:	cmp	r3, #0
   16aa0:	bne	16aec <__assert_fail@plt+0x5ba0>
   16aa4:	ldr	r3, [fp, #-8]
   16aa8:	cmp	r3, #0
   16aac:	bne	16b50 <__assert_fail@plt+0x5c04>
   16ab0:	ldr	r1, [fp, #-24]	; 0xffffffe8
   16ab4:	mov	r0, #64	; 0x40
   16ab8:	bl	188b0 <__assert_fail@plt+0x7964>
   16abc:	mov	r3, r0
   16ac0:	str	r3, [fp, #-8]
   16ac4:	ldr	r3, [fp, #-8]
   16ac8:	cmp	r3, #0
   16acc:	moveq	r3, #1
   16ad0:	movne	r3, #0
   16ad4:	uxtb	r3, r3
   16ad8:	mov	r2, r3
   16adc:	ldr	r3, [fp, #-8]
   16ae0:	add	r3, r2, r3
   16ae4:	str	r3, [fp, #-8]
   16ae8:	b	16b50 <__assert_fail@plt+0x5c04>
   16aec:	ldr	r3, [fp, #-8]
   16af0:	lsr	r3, r3, #1
   16af4:	add	r3, r3, #1
   16af8:	mvn	r2, r3
   16afc:	ldr	r3, [fp, #-8]
   16b00:	cmp	r2, r3
   16b04:	bcs	16b28 <__assert_fail@plt+0x5bdc>
   16b08:	ldr	r3, [fp, #-8]
   16b0c:	lsr	r2, r3, #1
   16b10:	ldr	r3, [fp, #-8]
   16b14:	add	r3, r2, r3
   16b18:	add	r3, r3, #1
   16b1c:	str	r3, [fp, #-8]
   16b20:	mov	r3, #1
   16b24:	b	16b44 <__assert_fail@plt+0x5bf8>
   16b28:	ldr	r3, [fp, #-8]
   16b2c:	lsr	r2, r3, #1
   16b30:	ldr	r3, [fp, #-8]
   16b34:	add	r3, r2, r3
   16b38:	add	r3, r3, #1
   16b3c:	str	r3, [fp, #-8]
   16b40:	mov	r3, #0
   16b44:	cmp	r3, #0
   16b48:	beq	16b50 <__assert_fail@plt+0x5c04>
   16b4c:	bl	17318 <__assert_fail@plt+0x63cc>
   16b50:	ldr	r3, [fp, #-8]
   16b54:	ldr	r2, [fp, #-24]	; 0xffffffe8
   16b58:	mov	r1, r3
   16b5c:	ldr	r0, [fp, #-16]
   16b60:	bl	16924 <__assert_fail@plt+0x59d8>
   16b64:	str	r0, [fp, #-16]
   16b68:	ldr	r2, [fp, #-8]
   16b6c:	ldr	r3, [fp, #-20]	; 0xffffffec
   16b70:	str	r2, [r3]
   16b74:	ldr	r3, [fp, #-16]
   16b78:	mov	r0, r3
   16b7c:	sub	sp, fp, #4
   16b80:	pop	{fp, pc}
   16b84:	push	{fp, lr}
   16b88:	add	fp, sp, #4
   16b8c:	sub	sp, sp, #32
   16b90:	str	r0, [fp, #-24]	; 0xffffffe8
   16b94:	str	r1, [fp, #-28]	; 0xffffffe4
   16b98:	str	r2, [fp, #-32]	; 0xffffffe0
   16b9c:	str	r3, [fp, #-36]	; 0xffffffdc
   16ba0:	ldr	r3, [fp, #-28]	; 0xffffffe4
   16ba4:	ldr	r3, [r3]
   16ba8:	str	r3, [fp, #-8]
   16bac:	ldr	r3, [fp, #-8]
   16bb0:	asr	r3, r3, #1
   16bb4:	cmp	r3, #0
   16bb8:	bge	16be0 <__assert_fail@plt+0x5c94>
   16bbc:	ldr	r3, [fp, #-8]
   16bc0:	asr	r3, r3, #1
   16bc4:	rsb	r2, r3, #-2147483648	; 0x80000000
   16bc8:	ldr	r3, [fp, #-8]
   16bcc:	cmp	r2, r3
   16bd0:	movgt	r3, #1
   16bd4:	movle	r3, #0
   16bd8:	uxtb	r3, r3
   16bdc:	b	16c34 <__assert_fail@plt+0x5ce8>
   16be0:	ldr	r3, [fp, #-8]
   16be4:	cmp	r3, #0
   16be8:	bge	16c10 <__assert_fail@plt+0x5cc4>
   16bec:	ldr	r3, [fp, #-8]
   16bf0:	asr	r2, r3, #1
   16bf4:	ldr	r3, [fp, #-8]
   16bf8:	rsb	r3, r3, #-2147483648	; 0x80000000
   16bfc:	cmp	r2, r3
   16c00:	movlt	r3, #1
   16c04:	movge	r3, #0
   16c08:	uxtb	r3, r3
   16c0c:	b	16c34 <__assert_fail@plt+0x5ce8>
   16c10:	ldr	r3, [fp, #-8]
   16c14:	asr	r2, r3, #1
   16c18:	mvn	r3, #-2147483648	; 0x80000000
   16c1c:	sub	r3, r3, r2
   16c20:	ldr	r2, [fp, #-8]
   16c24:	cmp	r3, r2
   16c28:	movlt	r3, #1
   16c2c:	movge	r3, #0
   16c30:	uxtb	r3, r3
   16c34:	cmp	r3, #0
   16c38:	beq	16c5c <__assert_fail@plt+0x5d10>
   16c3c:	ldr	r3, [fp, #-8]
   16c40:	asr	r3, r3, #1
   16c44:	mov	r2, r3
   16c48:	ldr	r3, [fp, #-8]
   16c4c:	add	r3, r2, r3
   16c50:	str	r3, [fp, #-16]
   16c54:	mov	r3, #1
   16c58:	b	16c78 <__assert_fail@plt+0x5d2c>
   16c5c:	ldr	r3, [fp, #-8]
   16c60:	asr	r3, r3, #1
   16c64:	mov	r2, r3
   16c68:	ldr	r3, [fp, #-8]
   16c6c:	add	r3, r2, r3
   16c70:	str	r3, [fp, #-16]
   16c74:	mov	r3, #0
   16c78:	cmp	r3, #0
   16c7c:	beq	16c88 <__assert_fail@plt+0x5d3c>
   16c80:	mvn	r3, #-2147483648	; 0x80000000
   16c84:	str	r3, [fp, #-16]
   16c88:	ldr	r3, [fp, #-36]	; 0xffffffdc
   16c8c:	cmp	r3, #0
   16c90:	blt	16cac <__assert_fail@plt+0x5d60>
   16c94:	ldr	r3, [fp, #-16]
   16c98:	ldr	r2, [fp, #-36]	; 0xffffffdc
   16c9c:	cmp	r2, r3
   16ca0:	bge	16cac <__assert_fail@plt+0x5d60>
   16ca4:	ldr	r3, [fp, #-36]	; 0xffffffdc
   16ca8:	str	r3, [fp, #-16]
   16cac:	ldr	r3, [fp, #4]
   16cb0:	cmp	r3, #0
   16cb4:	bge	16d44 <__assert_fail@plt+0x5df8>
   16cb8:	ldr	r3, [fp, #-16]
   16cbc:	cmp	r3, #0
   16cc0:	bge	16cf0 <__assert_fail@plt+0x5da4>
   16cc4:	ldr	r1, [fp, #4]
   16cc8:	mvn	r0, #-2147483648	; 0x80000000
   16ccc:	bl	18abc <__assert_fail@plt+0x7b70>
   16cd0:	mov	r3, r0
   16cd4:	mov	r2, r3
   16cd8:	ldr	r3, [fp, #-16]
   16cdc:	cmp	r2, r3
   16ce0:	movgt	r3, #1
   16ce4:	movle	r3, #0
   16ce8:	uxtb	r3, r3
   16cec:	b	16de4 <__assert_fail@plt+0x5e98>
   16cf0:	ldr	r3, [fp, #4]
   16cf4:	cmn	r3, #1
   16cf8:	bne	16d18 <__assert_fail@plt+0x5dcc>
   16cfc:	ldr	r3, [fp, #-16]
   16d00:	add	r3, r3, #-2147483648	; 0x80000000
   16d04:	cmp	r3, #0
   16d08:	movgt	r3, #1
   16d0c:	movle	r3, #0
   16d10:	uxtb	r3, r3
   16d14:	b	16de4 <__assert_fail@plt+0x5e98>
   16d18:	ldr	r1, [fp, #4]
   16d1c:	mov	r0, #-2147483648	; 0x80000000
   16d20:	bl	18abc <__assert_fail@plt+0x7b70>
   16d24:	mov	r3, r0
   16d28:	mov	r2, r3
   16d2c:	ldr	r3, [fp, #-16]
   16d30:	cmp	r2, r3
   16d34:	movlt	r3, #1
   16d38:	movge	r3, #0
   16d3c:	uxtb	r3, r3
   16d40:	b	16de4 <__assert_fail@plt+0x5e98>
   16d44:	ldr	r3, [fp, #4]
   16d48:	cmp	r3, #0
   16d4c:	beq	16de0 <__assert_fail@plt+0x5e94>
   16d50:	ldr	r3, [fp, #-16]
   16d54:	cmp	r3, #0
   16d58:	bge	16db4 <__assert_fail@plt+0x5e68>
   16d5c:	ldr	r3, [fp, #-16]
   16d60:	cmn	r3, #1
   16d64:	bne	16d84 <__assert_fail@plt+0x5e38>
   16d68:	ldr	r3, [fp, #4]
   16d6c:	add	r3, r3, #-2147483648	; 0x80000000
   16d70:	cmp	r3, #0
   16d74:	movgt	r3, #1
   16d78:	movle	r3, #0
   16d7c:	uxtb	r3, r3
   16d80:	b	16de4 <__assert_fail@plt+0x5e98>
   16d84:	ldr	r3, [fp, #-16]
   16d88:	mov	r1, r3
   16d8c:	mov	r0, #-2147483648	; 0x80000000
   16d90:	bl	18abc <__assert_fail@plt+0x7b70>
   16d94:	mov	r3, r0
   16d98:	mov	r2, r3
   16d9c:	ldr	r3, [fp, #4]
   16da0:	cmp	r2, r3
   16da4:	movlt	r3, #1
   16da8:	movge	r3, #0
   16dac:	uxtb	r3, r3
   16db0:	b	16de4 <__assert_fail@plt+0x5e98>
   16db4:	ldr	r1, [fp, #4]
   16db8:	mvn	r0, #-2147483648	; 0x80000000
   16dbc:	bl	18abc <__assert_fail@plt+0x7b70>
   16dc0:	mov	r3, r0
   16dc4:	mov	r2, r3
   16dc8:	ldr	r3, [fp, #-16]
   16dcc:	cmp	r2, r3
   16dd0:	movlt	r3, #1
   16dd4:	movge	r3, #0
   16dd8:	uxtb	r3, r3
   16ddc:	b	16de4 <__assert_fail@plt+0x5e98>
   16de0:	mov	r3, #0
   16de4:	cmp	r3, #0
   16de8:	beq	16e08 <__assert_fail@plt+0x5ebc>
   16dec:	ldr	r3, [fp, #-16]
   16df0:	mov	r2, r3
   16df4:	ldr	r3, [fp, #4]
   16df8:	mul	r3, r3, r2
   16dfc:	str	r3, [fp, #-20]	; 0xffffffec
   16e00:	mov	r3, #1
   16e04:	b	16e20 <__assert_fail@plt+0x5ed4>
   16e08:	ldr	r3, [fp, #-16]
   16e0c:	mov	r2, r3
   16e10:	ldr	r3, [fp, #4]
   16e14:	mul	r3, r3, r2
   16e18:	str	r3, [fp, #-20]	; 0xffffffec
   16e1c:	mov	r3, #0
   16e20:	cmp	r3, #0
   16e24:	beq	16e30 <__assert_fail@plt+0x5ee4>
   16e28:	mvn	r3, #-2147483648	; 0x80000000
   16e2c:	b	16e48 <__assert_fail@plt+0x5efc>
   16e30:	ldr	r3, [fp, #-20]	; 0xffffffec
   16e34:	cmp	r3, #63	; 0x3f
   16e38:	bgt	16e44 <__assert_fail@plt+0x5ef8>
   16e3c:	mov	r3, #64	; 0x40
   16e40:	b	16e48 <__assert_fail@plt+0x5efc>
   16e44:	mov	r3, #0
   16e48:	str	r3, [fp, #-12]
   16e4c:	ldr	r3, [fp, #-12]
   16e50:	cmp	r3, #0
   16e54:	beq	16e90 <__assert_fail@plt+0x5f44>
   16e58:	ldr	r1, [fp, #4]
   16e5c:	ldr	r0, [fp, #-12]
   16e60:	bl	18abc <__assert_fail@plt+0x7b70>
   16e64:	mov	r3, r0
   16e68:	str	r3, [fp, #-16]
   16e6c:	ldr	r3, [fp, #-12]
   16e70:	ldr	r1, [fp, #4]
   16e74:	mov	r0, r3
   16e78:	bl	18cdc <__assert_fail@plt+0x7d90>
   16e7c:	mov	r3, r1
   16e80:	mov	r2, r3
   16e84:	ldr	r3, [fp, #-12]
   16e88:	sub	r3, r3, r2
   16e8c:	str	r3, [fp, #-20]	; 0xffffffec
   16e90:	ldr	r3, [fp, #-24]	; 0xffffffe8
   16e94:	cmp	r3, #0
   16e98:	bne	16ea8 <__assert_fail@plt+0x5f5c>
   16e9c:	ldr	r3, [fp, #-28]	; 0xffffffe4
   16ea0:	mov	r2, #0
   16ea4:	str	r2, [r3]
   16ea8:	ldr	r2, [fp, #-16]
   16eac:	ldr	r3, [fp, #-8]
   16eb0:	sub	r2, r2, r3
   16eb4:	ldr	r3, [fp, #-32]	; 0xffffffe0
   16eb8:	cmp	r2, r3
   16ebc:	bge	170f4 <__assert_fail@plt+0x61a8>
   16ec0:	ldr	r3, [fp, #-32]	; 0xffffffe0
   16ec4:	cmp	r3, #0
   16ec8:	bge	16eec <__assert_fail@plt+0x5fa0>
   16ecc:	ldr	r3, [fp, #-32]	; 0xffffffe0
   16ed0:	rsb	r2, r3, #-2147483648	; 0x80000000
   16ed4:	ldr	r3, [fp, #-8]
   16ed8:	cmp	r2, r3
   16edc:	movgt	r3, #1
   16ee0:	movle	r3, #0
   16ee4:	uxtb	r3, r3
   16ee8:	b	16f38 <__assert_fail@plt+0x5fec>
   16eec:	ldr	r3, [fp, #-8]
   16ef0:	cmp	r3, #0
   16ef4:	bge	16f18 <__assert_fail@plt+0x5fcc>
   16ef8:	ldr	r3, [fp, #-8]
   16efc:	rsb	r2, r3, #-2147483648	; 0x80000000
   16f00:	ldr	r3, [fp, #-32]	; 0xffffffe0
   16f04:	cmp	r2, r3
   16f08:	movgt	r3, #1
   16f0c:	movle	r3, #0
   16f10:	uxtb	r3, r3
   16f14:	b	16f38 <__assert_fail@plt+0x5fec>
   16f18:	ldr	r2, [fp, #-32]	; 0xffffffe0
   16f1c:	mvn	r3, #-2147483648	; 0x80000000
   16f20:	sub	r3, r3, r2
   16f24:	ldr	r2, [fp, #-8]
   16f28:	cmp	r3, r2
   16f2c:	movlt	r3, #1
   16f30:	movge	r3, #0
   16f34:	uxtb	r3, r3
   16f38:	cmp	r3, #0
   16f3c:	beq	16f54 <__assert_fail@plt+0x6008>
   16f40:	ldr	r2, [fp, #-8]
   16f44:	ldr	r3, [fp, #-32]	; 0xffffffe0
   16f48:	add	r3, r2, r3
   16f4c:	str	r3, [fp, #-16]
   16f50:	b	170f0 <__assert_fail@plt+0x61a4>
   16f54:	ldr	r2, [fp, #-8]
   16f58:	ldr	r3, [fp, #-32]	; 0xffffffe0
   16f5c:	add	r3, r2, r3
   16f60:	str	r3, [fp, #-16]
   16f64:	ldr	r3, [fp, #-36]	; 0xffffffdc
   16f68:	cmp	r3, #0
   16f6c:	blt	16f80 <__assert_fail@plt+0x6034>
   16f70:	ldr	r3, [fp, #-16]
   16f74:	ldr	r2, [fp, #-36]	; 0xffffffdc
   16f78:	cmp	r2, r3
   16f7c:	blt	170f0 <__assert_fail@plt+0x61a4>
   16f80:	ldr	r3, [fp, #4]
   16f84:	cmp	r3, #0
   16f88:	bge	17018 <__assert_fail@plt+0x60cc>
   16f8c:	ldr	r3, [fp, #-16]
   16f90:	cmp	r3, #0
   16f94:	bge	16fc4 <__assert_fail@plt+0x6078>
   16f98:	ldr	r1, [fp, #4]
   16f9c:	mvn	r0, #-2147483648	; 0x80000000
   16fa0:	bl	18abc <__assert_fail@plt+0x7b70>
   16fa4:	mov	r3, r0
   16fa8:	mov	r2, r3
   16fac:	ldr	r3, [fp, #-16]
   16fb0:	cmp	r2, r3
   16fb4:	movgt	r3, #1
   16fb8:	movle	r3, #0
   16fbc:	uxtb	r3, r3
   16fc0:	b	170b8 <__assert_fail@plt+0x616c>
   16fc4:	ldr	r3, [fp, #4]
   16fc8:	cmn	r3, #1
   16fcc:	bne	16fec <__assert_fail@plt+0x60a0>
   16fd0:	ldr	r3, [fp, #-16]
   16fd4:	add	r3, r3, #-2147483648	; 0x80000000
   16fd8:	cmp	r3, #0
   16fdc:	movgt	r3, #1
   16fe0:	movle	r3, #0
   16fe4:	uxtb	r3, r3
   16fe8:	b	170b8 <__assert_fail@plt+0x616c>
   16fec:	ldr	r1, [fp, #4]
   16ff0:	mov	r0, #-2147483648	; 0x80000000
   16ff4:	bl	18abc <__assert_fail@plt+0x7b70>
   16ff8:	mov	r3, r0
   16ffc:	mov	r2, r3
   17000:	ldr	r3, [fp, #-16]
   17004:	cmp	r2, r3
   17008:	movlt	r3, #1
   1700c:	movge	r3, #0
   17010:	uxtb	r3, r3
   17014:	b	170b8 <__assert_fail@plt+0x616c>
   17018:	ldr	r3, [fp, #4]
   1701c:	cmp	r3, #0
   17020:	beq	170b4 <__assert_fail@plt+0x6168>
   17024:	ldr	r3, [fp, #-16]
   17028:	cmp	r3, #0
   1702c:	bge	17088 <__assert_fail@plt+0x613c>
   17030:	ldr	r3, [fp, #-16]
   17034:	cmn	r3, #1
   17038:	bne	17058 <__assert_fail@plt+0x610c>
   1703c:	ldr	r3, [fp, #4]
   17040:	add	r3, r3, #-2147483648	; 0x80000000
   17044:	cmp	r3, #0
   17048:	movgt	r3, #1
   1704c:	movle	r3, #0
   17050:	uxtb	r3, r3
   17054:	b	170b8 <__assert_fail@plt+0x616c>
   17058:	ldr	r3, [fp, #-16]
   1705c:	mov	r1, r3
   17060:	mov	r0, #-2147483648	; 0x80000000
   17064:	bl	18abc <__assert_fail@plt+0x7b70>
   17068:	mov	r3, r0
   1706c:	mov	r2, r3
   17070:	ldr	r3, [fp, #4]
   17074:	cmp	r2, r3
   17078:	movlt	r3, #1
   1707c:	movge	r3, #0
   17080:	uxtb	r3, r3
   17084:	b	170b8 <__assert_fail@plt+0x616c>
   17088:	ldr	r1, [fp, #4]
   1708c:	mvn	r0, #-2147483648	; 0x80000000
   17090:	bl	18abc <__assert_fail@plt+0x7b70>
   17094:	mov	r3, r0
   17098:	mov	r2, r3
   1709c:	ldr	r3, [fp, #-16]
   170a0:	cmp	r2, r3
   170a4:	movlt	r3, #1
   170a8:	movge	r3, #0
   170ac:	uxtb	r3, r3
   170b0:	b	170b8 <__assert_fail@plt+0x616c>
   170b4:	mov	r3, #0
   170b8:	cmp	r3, #0
   170bc:	beq	170d8 <__assert_fail@plt+0x618c>
   170c0:	ldr	r3, [fp, #-16]
   170c4:	mov	r2, r3
   170c8:	ldr	r3, [fp, #4]
   170cc:	mul	r3, r3, r2
   170d0:	str	r3, [fp, #-20]	; 0xffffffec
   170d4:	b	170f0 <__assert_fail@plt+0x61a4>
   170d8:	ldr	r3, [fp, #-16]
   170dc:	mov	r2, r3
   170e0:	ldr	r3, [fp, #4]
   170e4:	mul	r3, r3, r2
   170e8:	str	r3, [fp, #-20]	; 0xffffffec
   170ec:	b	170f4 <__assert_fail@plt+0x61a8>
   170f0:	bl	17318 <__assert_fail@plt+0x63cc>
   170f4:	ldr	r3, [fp, #-20]	; 0xffffffec
   170f8:	mov	r1, r3
   170fc:	ldr	r0, [fp, #-24]	; 0xffffffe8
   17100:	bl	1688c <__assert_fail@plt+0x5940>
   17104:	str	r0, [fp, #-24]	; 0xffffffe8
   17108:	ldr	r2, [fp, #-16]
   1710c:	ldr	r3, [fp, #-28]	; 0xffffffe4
   17110:	str	r2, [r3]
   17114:	ldr	r3, [fp, #-24]	; 0xffffffe8
   17118:	mov	r0, r3
   1711c:	sub	sp, fp, #4
   17120:	pop	{fp, pc}
   17124:	push	{fp, lr}
   17128:	add	fp, sp, #4
   1712c:	sub	sp, sp, #8
   17130:	str	r0, [fp, #-8]
   17134:	mov	r1, #1
   17138:	ldr	r0, [fp, #-8]
   1713c:	bl	1717c <__assert_fail@plt+0x6230>
   17140:	mov	r3, r0
   17144:	mov	r0, r3
   17148:	sub	sp, fp, #4
   1714c:	pop	{fp, pc}
   17150:	push	{fp, lr}
   17154:	add	fp, sp, #4
   17158:	sub	sp, sp, #8
   1715c:	str	r0, [fp, #-8]
   17160:	mov	r1, #1
   17164:	ldr	r0, [fp, #-8]
   17168:	bl	171b8 <__assert_fail@plt+0x626c>
   1716c:	mov	r3, r0
   17170:	mov	r0, r3
   17174:	sub	sp, fp, #4
   17178:	pop	{fp, pc}
   1717c:	push	{fp, lr}
   17180:	add	fp, sp, #4
   17184:	sub	sp, sp, #8
   17188:	str	r0, [fp, #-8]
   1718c:	str	r1, [fp, #-12]
   17190:	ldr	r1, [fp, #-12]
   17194:	ldr	r0, [fp, #-8]
   17198:	bl	17cac <__assert_fail@plt+0x6d60>
   1719c:	mov	r3, r0
   171a0:	mov	r0, r3
   171a4:	bl	167cc <__assert_fail@plt+0x5880>
   171a8:	mov	r3, r0
   171ac:	mov	r0, r3
   171b0:	sub	sp, fp, #4
   171b4:	pop	{fp, pc}
   171b8:	push	{fp, lr}
   171bc:	add	fp, sp, #4
   171c0:	sub	sp, sp, #8
   171c4:	str	r0, [fp, #-8]
   171c8:	str	r1, [fp, #-12]
   171cc:	ldr	r1, [fp, #-12]
   171d0:	ldr	r0, [fp, #-8]
   171d4:	bl	13768 <__assert_fail@plt+0x281c>
   171d8:	mov	r3, r0
   171dc:	mov	r0, r3
   171e0:	bl	167cc <__assert_fail@plt+0x5880>
   171e4:	mov	r3, r0
   171e8:	mov	r0, r3
   171ec:	sub	sp, fp, #4
   171f0:	pop	{fp, pc}
   171f4:	push	{fp, lr}
   171f8:	add	fp, sp, #4
   171fc:	sub	sp, sp, #8
   17200:	str	r0, [fp, #-8]
   17204:	str	r1, [fp, #-12]
   17208:	ldr	r0, [fp, #-12]
   1720c:	bl	167fc <__assert_fail@plt+0x58b0>
   17210:	mov	r3, r0
   17214:	ldr	r2, [fp, #-12]
   17218:	ldr	r1, [fp, #-8]
   1721c:	mov	r0, r3
   17220:	bl	10d48 <memcpy@plt>
   17224:	mov	r3, r0
   17228:	mov	r0, r3
   1722c:	sub	sp, fp, #4
   17230:	pop	{fp, pc}
   17234:	push	{fp, lr}
   17238:	add	fp, sp, #4
   1723c:	sub	sp, sp, #8
   17240:	str	r0, [fp, #-8]
   17244:	str	r1, [fp, #-12]
   17248:	ldr	r0, [fp, #-12]
   1724c:	bl	16830 <__assert_fail@plt+0x58e4>
   17250:	mov	r3, r0
   17254:	mov	r0, r3
   17258:	ldr	r3, [fp, #-12]
   1725c:	mov	r2, r3
   17260:	ldr	r1, [fp, #-8]
   17264:	bl	10d48 <memcpy@plt>
   17268:	mov	r3, r0
   1726c:	mov	r0, r3
   17270:	sub	sp, fp, #4
   17274:	pop	{fp, pc}
   17278:	push	{fp, lr}
   1727c:	add	fp, sp, #4
   17280:	sub	sp, sp, #16
   17284:	str	r0, [fp, #-16]
   17288:	str	r1, [fp, #-20]	; 0xffffffec
   1728c:	ldr	r3, [fp, #-20]	; 0xffffffec
   17290:	add	r3, r3, #1
   17294:	mov	r0, r3
   17298:	bl	16830 <__assert_fail@plt+0x58e4>
   1729c:	mov	r3, r0
   172a0:	str	r3, [fp, #-8]
   172a4:	ldr	r3, [fp, #-20]	; 0xffffffec
   172a8:	ldr	r2, [fp, #-8]
   172ac:	add	r3, r2, r3
   172b0:	mov	r2, #0
   172b4:	strb	r2, [r3]
   172b8:	ldr	r3, [fp, #-20]	; 0xffffffec
   172bc:	mov	r2, r3
   172c0:	ldr	r1, [fp, #-16]
   172c4:	ldr	r0, [fp, #-8]
   172c8:	bl	10d48 <memcpy@plt>
   172cc:	mov	r3, r0
   172d0:	mov	r0, r3
   172d4:	sub	sp, fp, #4
   172d8:	pop	{fp, pc}
   172dc:	push	{fp, lr}
   172e0:	add	fp, sp, #4
   172e4:	sub	sp, sp, #8
   172e8:	str	r0, [fp, #-8]
   172ec:	ldr	r0, [fp, #-8]
   172f0:	bl	10e5c <strlen@plt>
   172f4:	mov	r3, r0
   172f8:	add	r3, r3, #1
   172fc:	mov	r1, r3
   17300:	ldr	r0, [fp, #-8]
   17304:	bl	171f4 <__assert_fail@plt+0x62a8>
   17308:	mov	r3, r0
   1730c:	mov	r0, r3
   17310:	sub	sp, fp, #4
   17314:	pop	{fp, pc}
   17318:	push	{r4, r5, fp, lr}
   1731c:	add	fp, sp, #12
   17320:	ldr	r3, [pc, #32]	; 17348 <__assert_fail@plt+0x63fc>
   17324:	ldr	r4, [r3]
   17328:	ldr	r0, [pc, #28]	; 1734c <__assert_fail@plt+0x6400>
   1732c:	bl	10e50 <gettext@plt>
   17330:	mov	r3, r0
   17334:	ldr	r2, [pc, #20]	; 17350 <__assert_fail@plt+0x6404>
   17338:	mov	r1, #0
   1733c:	mov	r0, r4
   17340:	bl	10df0 <error@plt>
   17344:	bl	10f34 <abort@plt>
   17348:	strdeq	sl, [r2], -r4
   1734c:	andeq	r9, r1, r4, asr #23
   17350:	ldrdeq	r9, [r1], -r8
   17354:	push	{fp}		; (str fp, [sp, #-4]!)
   17358:	add	fp, sp, #0
   1735c:	nop			; (mov r0, r0)
   17360:	add	sp, fp, #0
   17364:	pop	{fp}		; (ldr fp, [sp], #4)
   17368:	bx	lr
   1736c:	push	{fp, lr}
   17370:	add	fp, sp, #4
   17374:	sub	sp, sp, #8
   17378:	str	r0, [fp, #-8]
   1737c:	str	r1, [fp, #-12]
   17380:	ldr	r1, [fp, #-12]
   17384:	ldr	r0, [fp, #-8]
   17388:	bl	17f10 <__assert_fail@plt+0x6fc4>
   1738c:	mov	r3, r0
   17390:	cmp	r3, #0
   17394:	bge	1739c <__assert_fail@plt+0x6450>
   17398:	bl	17354 <__assert_fail@plt+0x6408>
   1739c:	nop			; (mov r0, r0)
   173a0:	sub	sp, fp, #4
   173a4:	pop	{fp, pc}
   173a8:	push	{r4, r5, fp, lr}
   173ac:	add	fp, sp, #12
   173b0:	sub	sp, sp, #16
   173b4:	str	r0, [fp, #-24]	; 0xffffffe8
   173b8:	str	r1, [fp, #-28]	; 0xffffffe4
   173bc:	ldr	r3, [fp, #-28]	; 0xffffffe4
   173c0:	cmp	r3, #0
   173c4:	bge	17498 <__assert_fail@plt+0x654c>
   173c8:	ldr	r3, [fp, #-24]	; 0xffffffe8
   173cc:	ldrd	r2, [r3]
   173d0:	cmp	r2, #0
   173d4:	sbcs	r3, r3, #0
   173d8:	bge	1741c <__assert_fail@plt+0x64d0>
   173dc:	ldr	r3, [fp, #-24]	; 0xffffffe8
   173e0:	ldrd	r4, [r3]
   173e4:	ldr	r3, [fp, #-28]	; 0xffffffe4
   173e8:	mov	r2, r3
   173ec:	asr	r3, r2, #31
   173f0:	mvn	r0, #0
   173f4:	mvn	r1, #-2147483648	; 0x80000000
   173f8:	bl	18cfc <__assert_fail@plt+0x7db0>
   173fc:	mov	r2, r0
   17400:	mov	r3, r1
   17404:	cmp	r4, r2
   17408:	sbcs	r3, r5, r3
   1740c:	movlt	r3, #1
   17410:	movge	r3, #0
   17414:	uxtb	r3, r3
   17418:	b	17594 <__assert_fail@plt+0x6648>
   1741c:	ldr	r3, [fp, #-28]	; 0xffffffe4
   17420:	cmn	r3, #1
   17424:	bne	17450 <__assert_fail@plt+0x6504>
   17428:	ldr	r3, [fp, #-24]	; 0xffffffe8
   1742c:	ldrd	r2, [r3]
   17430:	adds	r2, r2, #0
   17434:	adc	r3, r3, #-2147483648	; 0x80000000
   17438:	cmp	r2, #1
   1743c:	sbcs	r3, r3, #0
   17440:	movge	r3, #1
   17444:	movlt	r3, #0
   17448:	uxtb	r3, r3
   1744c:	b	17594 <__assert_fail@plt+0x6648>
   17450:	ldr	r3, [fp, #-28]	; 0xffffffe4
   17454:	mov	r2, r3
   17458:	asr	r3, r2, #31
   1745c:	mov	r0, #0
   17460:	mov	r1, #-2147483648	; 0x80000000
   17464:	bl	18cfc <__assert_fail@plt+0x7db0>
   17468:	mov	r2, r0
   1746c:	mov	r3, r1
   17470:	mov	r0, r2
   17474:	mov	r1, r3
   17478:	ldr	r3, [fp, #-24]	; 0xffffffe8
   1747c:	ldrd	r2, [r3]
   17480:	cmp	r0, r2
   17484:	sbcs	r3, r1, r3
   17488:	movlt	r3, #1
   1748c:	movge	r3, #0
   17490:	uxtb	r3, r3
   17494:	b	17594 <__assert_fail@plt+0x6648>
   17498:	ldr	r3, [fp, #-28]	; 0xffffffe4
   1749c:	cmp	r3, #0
   174a0:	beq	17590 <__assert_fail@plt+0x6644>
   174a4:	ldr	r3, [fp, #-24]	; 0xffffffe8
   174a8:	ldrd	r2, [r3]
   174ac:	cmp	r2, #0
   174b0:	sbcs	r3, r3, #0
   174b4:	bge	17548 <__assert_fail@plt+0x65fc>
   174b8:	ldr	r3, [fp, #-24]	; 0xffffffe8
   174bc:	ldrd	r2, [r3]
   174c0:	mvn	r0, #0
   174c4:	mvn	r1, #0
   174c8:	cmp	r3, r1
   174cc:	cmpeq	r2, r0
   174d0:	bne	17500 <__assert_fail@plt+0x65b4>
   174d4:	ldr	r3, [fp, #-28]	; 0xffffffe4
   174d8:	mov	r2, r3
   174dc:	asr	r3, r2, #31
   174e0:	adds	r2, r2, #0
   174e4:	adc	r3, r3, #-2147483648	; 0x80000000
   174e8:	cmp	r2, #1
   174ec:	sbcs	r3, r3, #0
   174f0:	movge	r3, #1
   174f4:	movlt	r3, #0
   174f8:	uxtb	r3, r3
   174fc:	b	17594 <__assert_fail@plt+0x6648>
   17500:	ldr	r3, [fp, #-24]	; 0xffffffe8
   17504:	ldrd	r2, [r3]
   17508:	mov	r0, #0
   1750c:	mov	r1, #-2147483648	; 0x80000000
   17510:	bl	18cfc <__assert_fail@plt+0x7db0>
   17514:	mov	r2, r0
   17518:	mov	r3, r1
   1751c:	mov	r0, r2
   17520:	mov	r1, r3
   17524:	ldr	r3, [fp, #-28]	; 0xffffffe4
   17528:	mov	r2, r3
   1752c:	asr	r3, r2, #31
   17530:	cmp	r0, r2
   17534:	sbcs	r3, r1, r3
   17538:	movlt	r3, #1
   1753c:	movge	r3, #0
   17540:	uxtb	r3, r3
   17544:	b	17594 <__assert_fail@plt+0x6648>
   17548:	ldr	r3, [fp, #-28]	; 0xffffffe4
   1754c:	mov	r2, r3
   17550:	asr	r3, r2, #31
   17554:	mvn	r0, #0
   17558:	mvn	r1, #-2147483648	; 0x80000000
   1755c:	bl	18cfc <__assert_fail@plt+0x7db0>
   17560:	mov	r2, r0
   17564:	mov	r3, r1
   17568:	mov	r0, r2
   1756c:	mov	r1, r3
   17570:	ldr	r3, [fp, #-24]	; 0xffffffe8
   17574:	ldrd	r2, [r3]
   17578:	cmp	r0, r2
   1757c:	sbcs	r3, r1, r3
   17580:	movlt	r3, #1
   17584:	movge	r3, #0
   17588:	uxtb	r3, r3
   1758c:	b	17594 <__assert_fail@plt+0x6648>
   17590:	mov	r3, #0
   17594:	cmp	r3, #0
   17598:	beq	175dc <__assert_fail@plt+0x6690>
   1759c:	ldr	r3, [fp, #-24]	; 0xffffffe8
   175a0:	ldrd	r2, [r3]
   175a4:	mov	r0, r2
   175a8:	mov	r1, r3
   175ac:	ldr	r3, [fp, #-28]	; 0xffffffe4
   175b0:	mov	r2, r3
   175b4:	asr	r3, r2, #31
   175b8:	mul	lr, r2, r1
   175bc:	mul	ip, r0, r3
   175c0:	add	ip, lr, ip
   175c4:	umull	r2, r3, r0, r2
   175c8:	add	r1, ip, r3
   175cc:	mov	r3, r1
   175d0:	strd	r2, [fp, #-20]	; 0xffffffec
   175d4:	mov	r3, #1
   175d8:	b	17618 <__assert_fail@plt+0x66cc>
   175dc:	ldr	r3, [fp, #-24]	; 0xffffffe8
   175e0:	ldrd	r2, [r3]
   175e4:	mov	r0, r2
   175e8:	mov	r1, r3
   175ec:	ldr	r3, [fp, #-28]	; 0xffffffe4
   175f0:	mov	r2, r3
   175f4:	asr	r3, r2, #31
   175f8:	mul	lr, r2, r1
   175fc:	mul	ip, r0, r3
   17600:	add	ip, lr, ip
   17604:	umull	r2, r3, r0, r2
   17608:	add	r1, ip, r3
   1760c:	mov	r3, r1
   17610:	strd	r2, [fp, #-20]	; 0xffffffec
   17614:	mov	r3, #0
   17618:	cmp	r3, #0
   1761c:	beq	17658 <__assert_fail@plt+0x670c>
   17620:	ldr	r3, [fp, #-24]	; 0xffffffe8
   17624:	ldrd	r2, [r3]
   17628:	cmp	r2, #0
   1762c:	sbcs	r3, r3, #0
   17630:	bge	17640 <__assert_fail@plt+0x66f4>
   17634:	mov	r2, #0
   17638:	mov	r3, #-2147483648	; 0x80000000
   1763c:	b	17648 <__assert_fail@plt+0x66fc>
   17640:	mvn	r2, #0
   17644:	mvn	r3, #-2147483648	; 0x80000000
   17648:	ldr	r1, [fp, #-24]	; 0xffffffe8
   1764c:	strd	r2, [r1]
   17650:	mov	r3, #1
   17654:	b	17668 <__assert_fail@plt+0x671c>
   17658:	ldrd	r2, [fp, #-20]	; 0xffffffec
   1765c:	ldr	r1, [fp, #-24]	; 0xffffffe8
   17660:	strd	r2, [r1]
   17664:	mov	r3, #0
   17668:	mov	r0, r3
   1766c:	sub	sp, fp, #12
   17670:	pop	{r4, r5, fp, pc}
   17674:	push	{fp, lr}
   17678:	add	fp, sp, #4
   1767c:	sub	sp, sp, #24
   17680:	str	r0, [fp, #-16]
   17684:	str	r1, [fp, #-20]	; 0xffffffec
   17688:	str	r2, [fp, #-24]	; 0xffffffe8
   1768c:	mov	r3, #0
   17690:	str	r3, [fp, #-8]
   17694:	b	176b4 <__assert_fail@plt+0x6768>
   17698:	ldr	r1, [fp, #-20]	; 0xffffffec
   1769c:	ldr	r0, [fp, #-16]
   176a0:	bl	173a8 <__assert_fail@plt+0x645c>
   176a4:	mov	r2, r0
   176a8:	ldr	r3, [fp, #-8]
   176ac:	orr	r3, r3, r2
   176b0:	str	r3, [fp, #-8]
   176b4:	ldr	r3, [fp, #-24]	; 0xffffffe8
   176b8:	sub	r2, r3, #1
   176bc:	str	r2, [fp, #-24]	; 0xffffffe8
   176c0:	cmp	r3, #0
   176c4:	bne	17698 <__assert_fail@plt+0x674c>
   176c8:	ldr	r3, [fp, #-8]
   176cc:	mov	r0, r3
   176d0:	sub	sp, fp, #4
   176d4:	pop	{fp, pc}
   176d8:	push	{fp, lr}
   176dc:	add	fp, sp, #4
   176e0:	sub	sp, sp, #48	; 0x30
   176e4:	str	r0, [fp, #-40]	; 0xffffffd8
   176e8:	str	r1, [fp, #-44]	; 0xffffffd4
   176ec:	str	r2, [fp, #-48]	; 0xffffffd0
   176f0:	str	r3, [fp, #-52]	; 0xffffffcc
   176f4:	mov	r3, #0
   176f8:	str	r3, [fp, #-8]
   176fc:	ldr	r3, [fp, #-48]	; 0xffffffd0
   17700:	cmp	r3, #0
   17704:	blt	17714 <__assert_fail@plt+0x67c8>
   17708:	ldr	r3, [fp, #-48]	; 0xffffffd0
   1770c:	cmp	r3, #36	; 0x24
   17710:	ble	17728 <__assert_fail@plt+0x67dc>
   17714:	ldr	r3, [pc, #1412]	; 17ca0 <__assert_fail@plt+0x6d54>
   17718:	mov	r2, #85	; 0x55
   1771c:	ldr	r1, [pc, #1408]	; 17ca4 <__assert_fail@plt+0x6d58>
   17720:	ldr	r0, [pc, #1408]	; 17ca8 <__assert_fail@plt+0x6d5c>
   17724:	bl	10f4c <__assert_fail@plt>
   17728:	ldr	r3, [fp, #-44]	; 0xffffffd4
   1772c:	cmp	r3, #0
   17730:	bne	1773c <__assert_fail@plt+0x67f0>
   17734:	sub	r3, fp, #28
   17738:	b	17740 <__assert_fail@plt+0x67f4>
   1773c:	ldr	r3, [fp, #-44]	; 0xffffffd4
   17740:	str	r3, [fp, #-24]	; 0xffffffe8
   17744:	bl	10e80 <__errno_location@plt>
   17748:	mov	r2, r0
   1774c:	mov	r3, #0
   17750:	str	r3, [r2]
   17754:	ldr	r2, [fp, #-48]	; 0xffffffd0
   17758:	ldr	r1, [fp, #-24]	; 0xffffffe8
   1775c:	ldr	r0, [fp, #-40]	; 0xffffffd8
   17760:	bl	10ebc <strtoimax@plt>
   17764:	mov	r2, r0
   17768:	mov	r3, r1
   1776c:	strd	r2, [fp, #-36]	; 0xffffffdc
   17770:	ldr	r3, [fp, #-24]	; 0xffffffe8
   17774:	ldr	r2, [r3]
   17778:	ldr	r3, [fp, #-40]	; 0xffffffd8
   1777c:	cmp	r2, r3
   17780:	bne	177e0 <__assert_fail@plt+0x6894>
   17784:	ldr	r3, [fp, #4]
   17788:	cmp	r3, #0
   1778c:	beq	177d8 <__assert_fail@plt+0x688c>
   17790:	ldr	r3, [fp, #-24]	; 0xffffffe8
   17794:	ldr	r3, [r3]
   17798:	ldrb	r3, [r3]
   1779c:	cmp	r3, #0
   177a0:	beq	177d8 <__assert_fail@plt+0x688c>
   177a4:	ldr	r3, [fp, #-24]	; 0xffffffe8
   177a8:	ldr	r3, [r3]
   177ac:	ldrb	r3, [r3]
   177b0:	mov	r1, r3
   177b4:	ldr	r0, [fp, #4]
   177b8:	bl	10e68 <strchr@plt>
   177bc:	mov	r3, r0
   177c0:	cmp	r3, #0
   177c4:	beq	177d8 <__assert_fail@plt+0x688c>
   177c8:	mov	r2, #1
   177cc:	mov	r3, #0
   177d0:	strd	r2, [fp, #-36]	; 0xffffffdc
   177d4:	b	17818 <__assert_fail@plt+0x68cc>
   177d8:	mov	r3, #4
   177dc:	b	17c94 <__assert_fail@plt+0x6d48>
   177e0:	bl	10e80 <__errno_location@plt>
   177e4:	mov	r3, r0
   177e8:	ldr	r3, [r3]
   177ec:	cmp	r3, #0
   177f0:	beq	17818 <__assert_fail@plt+0x68cc>
   177f4:	bl	10e80 <__errno_location@plt>
   177f8:	mov	r3, r0
   177fc:	ldr	r3, [r3]
   17800:	cmp	r3, #34	; 0x22
   17804:	beq	17810 <__assert_fail@plt+0x68c4>
   17808:	mov	r3, #4
   1780c:	b	17c94 <__assert_fail@plt+0x6d48>
   17810:	mov	r3, #1
   17814:	str	r3, [fp, #-8]
   17818:	ldr	r3, [fp, #4]
   1781c:	cmp	r3, #0
   17820:	bne	17838 <__assert_fail@plt+0x68ec>
   17824:	ldrd	r2, [fp, #-36]	; 0xffffffdc
   17828:	ldr	r1, [fp, #-52]	; 0xffffffcc
   1782c:	strd	r2, [r1]
   17830:	ldr	r3, [fp, #-8]
   17834:	b	17c94 <__assert_fail@plt+0x6d48>
   17838:	ldr	r3, [fp, #-24]	; 0xffffffe8
   1783c:	ldr	r3, [r3]
   17840:	ldrb	r3, [r3]
   17844:	cmp	r3, #0
   17848:	beq	17c84 <__assert_fail@plt+0x6d38>
   1784c:	mov	r3, #1024	; 0x400
   17850:	str	r3, [fp, #-12]
   17854:	mov	r3, #1
   17858:	str	r3, [fp, #-16]
   1785c:	ldr	r3, [fp, #-24]	; 0xffffffe8
   17860:	ldr	r3, [r3]
   17864:	ldrb	r3, [r3]
   17868:	mov	r1, r3
   1786c:	ldr	r0, [fp, #4]
   17870:	bl	10e68 <strchr@plt>
   17874:	mov	r3, r0
   17878:	cmp	r3, #0
   1787c:	bne	17898 <__assert_fail@plt+0x694c>
   17880:	ldrd	r2, [fp, #-36]	; 0xffffffdc
   17884:	ldr	r1, [fp, #-52]	; 0xffffffcc
   17888:	strd	r2, [r1]
   1788c:	ldr	r3, [fp, #-8]
   17890:	orr	r3, r3, #2
   17894:	b	17c94 <__assert_fail@plt+0x6d48>
   17898:	ldr	r3, [fp, #-24]	; 0xffffffe8
   1789c:	ldr	r3, [r3]
   178a0:	ldrb	r3, [r3]
   178a4:	sub	r3, r3, #69	; 0x45
   178a8:	cmp	r3, #47	; 0x2f
   178ac:	ldrls	pc, [pc, r3, lsl #2]
   178b0:	b	179fc <__assert_fail@plt+0x6ab0>
   178b4:	andeq	r7, r1, r4, ror r9
   178b8:	strdeq	r7, [r1], -ip
   178bc:	andeq	r7, r1, r4, ror r9
   178c0:	strdeq	r7, [r1], -ip
   178c4:	strdeq	r7, [r1], -ip
   178c8:	strdeq	r7, [r1], -ip
   178cc:	andeq	r7, r1, r4, ror r9
   178d0:	strdeq	r7, [r1], -ip
   178d4:	andeq	r7, r1, r4, ror r9
   178d8:	strdeq	r7, [r1], -ip
   178dc:	strdeq	r7, [r1], -ip
   178e0:	andeq	r7, r1, r4, ror r9
   178e4:	strdeq	r7, [r1], -ip
   178e8:	strdeq	r7, [r1], -ip
   178ec:	strdeq	r7, [r1], -ip
   178f0:	andeq	r7, r1, r4, ror r9
   178f4:	strdeq	r7, [r1], -ip
   178f8:	strdeq	r7, [r1], -ip
   178fc:	strdeq	r7, [r1], -ip
   17900:	strdeq	r7, [r1], -ip
   17904:	andeq	r7, r1, r4, ror r9
   17908:	andeq	r7, r1, r4, ror r9
   1790c:	strdeq	r7, [r1], -ip
   17910:	strdeq	r7, [r1], -ip
   17914:	strdeq	r7, [r1], -ip
   17918:	strdeq	r7, [r1], -ip
   1791c:	strdeq	r7, [r1], -ip
   17920:	strdeq	r7, [r1], -ip
   17924:	strdeq	r7, [r1], -ip
   17928:	strdeq	r7, [r1], -ip
   1792c:	strdeq	r7, [r1], -ip
   17930:	strdeq	r7, [r1], -ip
   17934:	strdeq	r7, [r1], -ip
   17938:	strdeq	r7, [r1], -ip
   1793c:	andeq	r7, r1, r4, ror r9
   17940:	strdeq	r7, [r1], -ip
   17944:	strdeq	r7, [r1], -ip
   17948:	strdeq	r7, [r1], -ip
   1794c:	andeq	r7, r1, r4, ror r9
   17950:	strdeq	r7, [r1], -ip
   17954:	andeq	r7, r1, r4, ror r9
   17958:	strdeq	r7, [r1], -ip
   1795c:	strdeq	r7, [r1], -ip
   17960:	strdeq	r7, [r1], -ip
   17964:	strdeq	r7, [r1], -ip
   17968:	strdeq	r7, [r1], -ip
   1796c:	strdeq	r7, [r1], -ip
   17970:	andeq	r7, r1, r4, ror r9
   17974:	mov	r1, #48	; 0x30
   17978:	ldr	r0, [fp, #4]
   1797c:	bl	10e68 <strchr@plt>
   17980:	mov	r3, r0
   17984:	cmp	r3, #0
   17988:	beq	179fc <__assert_fail@plt+0x6ab0>
   1798c:	ldr	r3, [fp, #-24]	; 0xffffffe8
   17990:	ldr	r3, [r3]
   17994:	add	r3, r3, #1
   17998:	ldrb	r3, [r3]
   1799c:	cmp	r3, #68	; 0x44
   179a0:	beq	179e0 <__assert_fail@plt+0x6a94>
   179a4:	cmp	r3, #105	; 0x69
   179a8:	beq	179b8 <__assert_fail@plt+0x6a6c>
   179ac:	cmp	r3, #66	; 0x42
   179b0:	beq	179e0 <__assert_fail@plt+0x6a94>
   179b4:	b	179fc <__assert_fail@plt+0x6ab0>
   179b8:	ldr	r3, [fp, #-24]	; 0xffffffe8
   179bc:	ldr	r3, [r3]
   179c0:	add	r3, r3, #2
   179c4:	ldrb	r3, [r3]
   179c8:	cmp	r3, #66	; 0x42
   179cc:	bne	179f8 <__assert_fail@plt+0x6aac>
   179d0:	ldr	r3, [fp, #-16]
   179d4:	add	r3, r3, #2
   179d8:	str	r3, [fp, #-16]
   179dc:	b	179f8 <__assert_fail@plt+0x6aac>
   179e0:	mov	r3, #1000	; 0x3e8
   179e4:	str	r3, [fp, #-12]
   179e8:	ldr	r3, [fp, #-16]
   179ec:	add	r3, r3, #1
   179f0:	str	r3, [fp, #-16]
   179f4:	b	179fc <__assert_fail@plt+0x6ab0>
   179f8:	nop			; (mov r0, r0)
   179fc:	ldr	r3, [fp, #-24]	; 0xffffffe8
   17a00:	ldr	r3, [r3]
   17a04:	ldrb	r3, [r3]
   17a08:	sub	r3, r3, #66	; 0x42
   17a0c:	cmp	r3, #53	; 0x35
   17a10:	ldrls	pc, [pc, r3, lsl #2]
   17a14:	b	17c24 <__assert_fail@plt+0x6cd8>
   17a18:	andeq	r7, r1, r8, lsl #22
   17a1c:	andeq	r7, r1, r4, lsr #24
   17a20:	andeq	r7, r1, r4, lsr #24
   17a24:	andeq	r7, r1, ip, lsr #22
   17a28:	andeq	r7, r1, r4, lsr #24
   17a2c:	andeq	r7, r1, r8, asr #22
   17a30:	andeq	r7, r1, r4, lsr #24
   17a34:	andeq	r7, r1, r4, lsr #24
   17a38:	andeq	r7, r1, r4, lsr #24
   17a3c:	andeq	r7, r1, r4, ror #22
   17a40:	andeq	r7, r1, r4, lsr #24
   17a44:	andeq	r7, r1, r0, lsl #23
   17a48:	andeq	r7, r1, r4, lsr #24
   17a4c:	andeq	r7, r1, r4, lsr #24
   17a50:	muleq	r1, ip, fp
   17a54:	andeq	r7, r1, r4, lsr #24
   17a58:	andeq	r7, r1, r4, lsr #24
   17a5c:	andeq	r7, r1, r4, lsr #24
   17a60:			; <UNDEFINED> instruction: 0x00017bb8
   17a64:	andeq	r7, r1, r4, lsr #24
   17a68:	andeq	r7, r1, r4, lsr #24
   17a6c:	andeq	r7, r1, r4, lsr #24
   17a70:	andeq	r7, r1, r4, lsr #24
   17a74:	andeq	r7, r1, ip, ror #23
   17a78:	andeq	r7, r1, r8, lsl #24
   17a7c:	andeq	r7, r1, r4, lsr #24
   17a80:	andeq	r7, r1, r4, lsr #24
   17a84:	andeq	r7, r1, r4, lsr #24
   17a88:	andeq	r7, r1, r4, lsr #24
   17a8c:	andeq	r7, r1, r4, lsr #24
   17a90:	andeq	r7, r1, r4, lsr #24
   17a94:	andeq	r7, r1, r4, lsr #24
   17a98:	strdeq	r7, [r1], -r0
   17a9c:	andeq	r7, r1, r0, lsr #22
   17aa0:	andeq	r7, r1, r4, lsr #24
   17aa4:	andeq	r7, r1, r4, lsr #24
   17aa8:	andeq	r7, r1, r4, lsr #24
   17aac:	andeq	r7, r1, r8, asr #22
   17ab0:	andeq	r7, r1, r4, lsr #24
   17ab4:	andeq	r7, r1, r4, lsr #24
   17ab8:	andeq	r7, r1, r4, lsr #24
   17abc:	andeq	r7, r1, r4, ror #22
   17ac0:	andeq	r7, r1, r4, lsr #24
   17ac4:	andeq	r7, r1, r0, lsl #23
   17ac8:	andeq	r7, r1, r4, lsr #24
   17acc:	andeq	r7, r1, r4, lsr #24
   17ad0:	andeq	r7, r1, r4, lsr #24
   17ad4:	andeq	r7, r1, r4, lsr #24
   17ad8:	andeq	r7, r1, r4, lsr #24
   17adc:	andeq	r7, r1, r4, lsr #24
   17ae0:			; <UNDEFINED> instruction: 0x00017bb8
   17ae4:	andeq	r7, r1, r4, lsr #24
   17ae8:	andeq	r7, r1, r4, lsr #24
   17aec:	ldrdeq	r7, [r1], -r4
   17af0:	sub	r3, fp, #36	; 0x24
   17af4:	mov	r1, #512	; 0x200
   17af8:	mov	r0, r3
   17afc:	bl	173a8 <__assert_fail@plt+0x645c>
   17b00:	str	r0, [fp, #-20]	; 0xffffffec
   17b04:	b	17c3c <__assert_fail@plt+0x6cf0>
   17b08:	sub	r3, fp, #36	; 0x24
   17b0c:	mov	r1, #1024	; 0x400
   17b10:	mov	r0, r3
   17b14:	bl	173a8 <__assert_fail@plt+0x645c>
   17b18:	str	r0, [fp, #-20]	; 0xffffffec
   17b1c:	b	17c3c <__assert_fail@plt+0x6cf0>
   17b20:	mov	r3, #0
   17b24:	str	r3, [fp, #-20]	; 0xffffffec
   17b28:	b	17c3c <__assert_fail@plt+0x6cf0>
   17b2c:	sub	r3, fp, #36	; 0x24
   17b30:	mov	r2, #6
   17b34:	ldr	r1, [fp, #-12]
   17b38:	mov	r0, r3
   17b3c:	bl	17674 <__assert_fail@plt+0x6728>
   17b40:	str	r0, [fp, #-20]	; 0xffffffec
   17b44:	b	17c3c <__assert_fail@plt+0x6cf0>
   17b48:	sub	r3, fp, #36	; 0x24
   17b4c:	mov	r2, #3
   17b50:	ldr	r1, [fp, #-12]
   17b54:	mov	r0, r3
   17b58:	bl	17674 <__assert_fail@plt+0x6728>
   17b5c:	str	r0, [fp, #-20]	; 0xffffffec
   17b60:	b	17c3c <__assert_fail@plt+0x6cf0>
   17b64:	sub	r3, fp, #36	; 0x24
   17b68:	mov	r2, #1
   17b6c:	ldr	r1, [fp, #-12]
   17b70:	mov	r0, r3
   17b74:	bl	17674 <__assert_fail@plt+0x6728>
   17b78:	str	r0, [fp, #-20]	; 0xffffffec
   17b7c:	b	17c3c <__assert_fail@plt+0x6cf0>
   17b80:	sub	r3, fp, #36	; 0x24
   17b84:	mov	r2, #2
   17b88:	ldr	r1, [fp, #-12]
   17b8c:	mov	r0, r3
   17b90:	bl	17674 <__assert_fail@plt+0x6728>
   17b94:	str	r0, [fp, #-20]	; 0xffffffec
   17b98:	b	17c3c <__assert_fail@plt+0x6cf0>
   17b9c:	sub	r3, fp, #36	; 0x24
   17ba0:	mov	r2, #5
   17ba4:	ldr	r1, [fp, #-12]
   17ba8:	mov	r0, r3
   17bac:	bl	17674 <__assert_fail@plt+0x6728>
   17bb0:	str	r0, [fp, #-20]	; 0xffffffec
   17bb4:	b	17c3c <__assert_fail@plt+0x6cf0>
   17bb8:	sub	r3, fp, #36	; 0x24
   17bbc:	mov	r2, #4
   17bc0:	ldr	r1, [fp, #-12]
   17bc4:	mov	r0, r3
   17bc8:	bl	17674 <__assert_fail@plt+0x6728>
   17bcc:	str	r0, [fp, #-20]	; 0xffffffec
   17bd0:	b	17c3c <__assert_fail@plt+0x6cf0>
   17bd4:	sub	r3, fp, #36	; 0x24
   17bd8:	mov	r1, #2
   17bdc:	mov	r0, r3
   17be0:	bl	173a8 <__assert_fail@plt+0x645c>
   17be4:	str	r0, [fp, #-20]	; 0xffffffec
   17be8:	b	17c3c <__assert_fail@plt+0x6cf0>
   17bec:	sub	r3, fp, #36	; 0x24
   17bf0:	mov	r2, #8
   17bf4:	ldr	r1, [fp, #-12]
   17bf8:	mov	r0, r3
   17bfc:	bl	17674 <__assert_fail@plt+0x6728>
   17c00:	str	r0, [fp, #-20]	; 0xffffffec
   17c04:	b	17c3c <__assert_fail@plt+0x6cf0>
   17c08:	sub	r3, fp, #36	; 0x24
   17c0c:	mov	r2, #7
   17c10:	ldr	r1, [fp, #-12]
   17c14:	mov	r0, r3
   17c18:	bl	17674 <__assert_fail@plt+0x6728>
   17c1c:	str	r0, [fp, #-20]	; 0xffffffec
   17c20:	b	17c3c <__assert_fail@plt+0x6cf0>
   17c24:	ldrd	r2, [fp, #-36]	; 0xffffffdc
   17c28:	ldr	r1, [fp, #-52]	; 0xffffffcc
   17c2c:	strd	r2, [r1]
   17c30:	ldr	r3, [fp, #-8]
   17c34:	orr	r3, r3, #2
   17c38:	b	17c94 <__assert_fail@plt+0x6d48>
   17c3c:	ldr	r2, [fp, #-8]
   17c40:	ldr	r3, [fp, #-20]	; 0xffffffec
   17c44:	orr	r3, r2, r3
   17c48:	str	r3, [fp, #-8]
   17c4c:	ldr	r3, [fp, #-24]	; 0xffffffe8
   17c50:	ldr	r2, [r3]
   17c54:	ldr	r3, [fp, #-16]
   17c58:	add	r2, r2, r3
   17c5c:	ldr	r3, [fp, #-24]	; 0xffffffe8
   17c60:	str	r2, [r3]
   17c64:	ldr	r3, [fp, #-24]	; 0xffffffe8
   17c68:	ldr	r3, [r3]
   17c6c:	ldrb	r3, [r3]
   17c70:	cmp	r3, #0
   17c74:	beq	17c84 <__assert_fail@plt+0x6d38>
   17c78:	ldr	r3, [fp, #-8]
   17c7c:	orr	r3, r3, #2
   17c80:	str	r3, [fp, #-8]
   17c84:	ldrd	r2, [fp, #-36]	; 0xffffffdc
   17c88:	ldr	r1, [fp, #-52]	; 0xffffffcc
   17c8c:	strd	r2, [r1]
   17c90:	ldr	r3, [fp, #-8]
   17c94:	mov	r0, r3
   17c98:	sub	sp, fp, #4
   17c9c:	pop	{fp, pc}
   17ca0:	andeq	r9, r1, r4, lsl ip
   17ca4:	ldrdeq	r9, [r1], -ip
   17ca8:	andeq	r9, r1, ip, ror #23
   17cac:	push	{r4, r5, fp, lr}
   17cb0:	add	fp, sp, #12
   17cb4:	sub	sp, sp, #16
   17cb8:	str	r0, [fp, #-24]	; 0xffffffe8
   17cbc:	str	r1, [fp, #-28]	; 0xffffffe4
   17cc0:	ldr	r3, [fp, #-24]	; 0xffffffe8
   17cc4:	cmp	r3, #0
   17cc8:	beq	17cd8 <__assert_fail@plt+0x6d8c>
   17ccc:	ldr	r3, [fp, #-28]	; 0xffffffe4
   17cd0:	cmp	r3, #0
   17cd4:	bne	17ce8 <__assert_fail@plt+0x6d9c>
   17cd8:	mov	r3, #1
   17cdc:	str	r3, [fp, #-28]	; 0xffffffe4
   17ce0:	ldr	r3, [fp, #-28]	; 0xffffffe4
   17ce4:	str	r3, [fp, #-24]	; 0xffffffe8
   17ce8:	mov	r1, #0
   17cec:	ldr	r2, [fp, #-24]	; 0xffffffe8
   17cf0:	ldr	r3, [fp, #-28]	; 0xffffffe4
   17cf4:	umull	r2, r3, r2, r3
   17cf8:	mov	r4, r3
   17cfc:	mov	r5, #0
   17d00:	cmp	r4, #0
   17d04:	beq	17d0c <__assert_fail@plt+0x6dc0>
   17d08:	mov	r1, #1
   17d0c:	cmp	r2, #0
   17d10:	bge	17d18 <__assert_fail@plt+0x6dcc>
   17d14:	mov	r1, #1
   17d18:	mov	r3, r2
   17d1c:	str	r3, [fp, #-20]	; 0xffffffec
   17d20:	mov	r3, r1
   17d24:	and	r3, r3, #1
   17d28:	uxtb	r3, r3
   17d2c:	cmp	r3, #0
   17d30:	beq	17d4c <__assert_fail@plt+0x6e00>
   17d34:	bl	10e80 <__errno_location@plt>
   17d38:	mov	r2, r0
   17d3c:	mov	r3, #12
   17d40:	str	r3, [r2]
   17d44:	mov	r3, #0
   17d48:	b	17d64 <__assert_fail@plt+0x6e18>
   17d4c:	ldr	r1, [fp, #-28]	; 0xffffffe4
   17d50:	ldr	r0, [fp, #-24]	; 0xffffffe8
   17d54:	bl	10cd0 <calloc@plt>
   17d58:	mov	r3, r0
   17d5c:	str	r3, [fp, #-16]
   17d60:	ldr	r3, [fp, #-16]
   17d64:	mov	r0, r3
   17d68:	sub	sp, fp, #12
   17d6c:	pop	{r4, r5, fp, pc}
   17d70:	push	{r4, r5, fp, lr}
   17d74:	add	fp, sp, #12
   17d78:	sub	sp, sp, #16
   17d7c:	str	r0, [fp, #-24]	; 0xffffffe8
   17d80:	ldr	r3, [fp, #-24]	; 0xffffffe8
   17d84:	cmp	r3, #0
   17d88:	bne	17d94 <__assert_fail@plt+0x6e48>
   17d8c:	mov	r3, #1
   17d90:	str	r3, [fp, #-24]	; 0xffffffe8
   17d94:	mov	r1, #0
   17d98:	ldr	r3, [fp, #-24]	; 0xffffffe8
   17d9c:	mov	r2, r3
   17da0:	mov	r3, #0
   17da4:	mov	r4, r3
   17da8:	mov	r5, #0
   17dac:	cmp	r4, #0
   17db0:	beq	17db8 <__assert_fail@plt+0x6e6c>
   17db4:	mov	r1, #1
   17db8:	cmp	r2, #0
   17dbc:	bge	17dc4 <__assert_fail@plt+0x6e78>
   17dc0:	mov	r1, #1
   17dc4:	mov	r3, r2
   17dc8:	str	r3, [fp, #-20]	; 0xffffffec
   17dcc:	mov	r3, r1
   17dd0:	and	r3, r3, #1
   17dd4:	uxtb	r3, r3
   17dd8:	cmp	r3, #0
   17ddc:	beq	17df8 <__assert_fail@plt+0x6eac>
   17de0:	bl	10e80 <__errno_location@plt>
   17de4:	mov	r2, r0
   17de8:	mov	r3, #12
   17dec:	str	r3, [r2]
   17df0:	mov	r3, #0
   17df4:	b	17e0c <__assert_fail@plt+0x6ec0>
   17df8:	ldr	r0, [fp, #-24]	; 0xffffffe8
   17dfc:	bl	10dfc <malloc@plt>
   17e00:	mov	r3, r0
   17e04:	str	r3, [fp, #-16]
   17e08:	ldr	r3, [fp, #-16]
   17e0c:	mov	r0, r3
   17e10:	sub	sp, fp, #12
   17e14:	pop	{r4, r5, fp, pc}
   17e18:	push	{r4, r5, fp, lr}
   17e1c:	add	fp, sp, #12
   17e20:	sub	sp, sp, #16
   17e24:	str	r0, [fp, #-24]	; 0xffffffe8
   17e28:	str	r1, [fp, #-28]	; 0xffffffe4
   17e2c:	ldr	r3, [fp, #-24]	; 0xffffffe8
   17e30:	cmp	r3, #0
   17e34:	bne	17e48 <__assert_fail@plt+0x6efc>
   17e38:	ldr	r0, [fp, #-28]	; 0xffffffe4
   17e3c:	bl	17d70 <__assert_fail@plt+0x6e24>
   17e40:	mov	r3, r0
   17e44:	b	17edc <__assert_fail@plt+0x6f90>
   17e48:	ldr	r3, [fp, #-28]	; 0xffffffe4
   17e4c:	cmp	r3, #0
   17e50:	bne	17e64 <__assert_fail@plt+0x6f18>
   17e54:	ldr	r0, [fp, #-24]	; 0xffffffe8
   17e58:	bl	13558 <__assert_fail@plt+0x260c>
   17e5c:	mov	r3, #0
   17e60:	b	17edc <__assert_fail@plt+0x6f90>
   17e64:	mov	r1, #0
   17e68:	ldr	r3, [fp, #-28]	; 0xffffffe4
   17e6c:	mov	r2, r3
   17e70:	mov	r3, #0
   17e74:	mov	r4, r3
   17e78:	mov	r5, #0
   17e7c:	cmp	r4, #0
   17e80:	beq	17e88 <__assert_fail@plt+0x6f3c>
   17e84:	mov	r1, #1
   17e88:	cmp	r2, #0
   17e8c:	bge	17e94 <__assert_fail@plt+0x6f48>
   17e90:	mov	r1, #1
   17e94:	mov	r3, r2
   17e98:	str	r3, [fp, #-20]	; 0xffffffec
   17e9c:	mov	r3, r1
   17ea0:	and	r3, r3, #1
   17ea4:	uxtb	r3, r3
   17ea8:	cmp	r3, #0
   17eac:	beq	17ec8 <__assert_fail@plt+0x6f7c>
   17eb0:	bl	10e80 <__errno_location@plt>
   17eb4:	mov	r2, r0
   17eb8:	mov	r3, #12
   17ebc:	str	r3, [r2]
   17ec0:	mov	r3, #0
   17ec4:	b	17edc <__assert_fail@plt+0x6f90>
   17ec8:	ldr	r1, [fp, #-28]	; 0xffffffe4
   17ecc:	ldr	r0, [fp, #-24]	; 0xffffffe8
   17ed0:	bl	10d84 <realloc@plt>
   17ed4:	str	r0, [fp, #-16]
   17ed8:	ldr	r3, [fp, #-16]
   17edc:	mov	r0, r3
   17ee0:	sub	sp, fp, #12
   17ee4:	pop	{r4, r5, fp, pc}
   17ee8:	push	{fp}		; (str fp, [sp, #-4]!)
   17eec:	add	fp, sp, #0
   17ef0:	sub	sp, sp, #12
   17ef4:	str	r0, [fp, #-8]
   17ef8:	str	r1, [fp, #-12]
   17efc:	mov	r3, #0
   17f00:	mov	r0, r3
   17f04:	add	sp, fp, #0
   17f08:	pop	{fp}		; (ldr fp, [sp], #4)
   17f0c:	bx	lr
   17f10:	push	{fp, lr}
   17f14:	add	fp, sp, #4
   17f18:	sub	sp, sp, #8
   17f1c:	str	r0, [fp, #-8]
   17f20:	str	r1, [fp, #-12]
   17f24:	ldr	r1, [fp, #-12]
   17f28:	ldr	r0, [fp, #-8]
   17f2c:	bl	17ee8 <__assert_fail@plt+0x6f9c>
   17f30:	mov	r3, r0
   17f34:	mov	r0, r3
   17f38:	sub	sp, fp, #4
   17f3c:	pop	{fp, pc}
   17f40:	push	{r4, r5, fp, lr}
   17f44:	add	fp, sp, #12
   17f48:	sub	sp, sp, #16
   17f4c:	str	r0, [fp, #-24]	; 0xffffffe8
   17f50:	str	r1, [fp, #-28]	; 0xffffffe4
   17f54:	ldr	r5, [fp, #-24]	; 0xffffffe8
   17f58:	ldr	r4, [fp, #-28]	; 0xffffffe4
   17f5c:	cmp	r5, r4
   17f60:	bne	17f6c <__assert_fail@plt+0x7020>
   17f64:	mov	r3, #0
   17f68:	b	17fcc <__assert_fail@plt+0x7080>
   17f6c:	ldrb	r3, [r5]
   17f70:	mov	r0, r3
   17f74:	bl	1862c <__assert_fail@plt+0x76e0>
   17f78:	mov	r3, r0
   17f7c:	strb	r3, [fp, #-13]
   17f80:	ldrb	r3, [r4]
   17f84:	mov	r0, r3
   17f88:	bl	1862c <__assert_fail@plt+0x76e0>
   17f8c:	mov	r3, r0
   17f90:	strb	r3, [fp, #-14]
   17f94:	ldrb	r3, [fp, #-13]
   17f98:	cmp	r3, #0
   17f9c:	beq	17fbc <__assert_fail@plt+0x7070>
   17fa0:	add	r5, r5, #1
   17fa4:	add	r4, r4, #1
   17fa8:	ldrb	r2, [fp, #-13]
   17fac:	ldrb	r3, [fp, #-14]
   17fb0:	cmp	r2, r3
   17fb4:	beq	17f6c <__assert_fail@plt+0x7020>
   17fb8:	b	17fc0 <__assert_fail@plt+0x7074>
   17fbc:	nop			; (mov r0, r0)
   17fc0:	ldrb	r2, [fp, #-13]
   17fc4:	ldrb	r3, [fp, #-14]
   17fc8:	sub	r3, r2, r3
   17fcc:	mov	r0, r3
   17fd0:	sub	sp, fp, #12
   17fd4:	pop	{r4, r5, fp, pc}
   17fd8:	push	{fp, lr}
   17fdc:	add	fp, sp, #4
   17fe0:	sub	sp, sp, #16
   17fe4:	str	r0, [fp, #-16]
   17fe8:	ldr	r0, [fp, #-16]
   17fec:	bl	10dcc <__fpending@plt>
   17ff0:	mov	r3, r0
   17ff4:	cmp	r3, #0
   17ff8:	movne	r3, #1
   17ffc:	moveq	r3, #0
   18000:	strb	r3, [fp, #-5]
   18004:	ldr	r0, [fp, #-16]
   18008:	bl	10dd8 <ferror_unlocked@plt>
   1800c:	mov	r3, r0
   18010:	cmp	r3, #0
   18014:	movne	r3, #1
   18018:	moveq	r3, #0
   1801c:	strb	r3, [fp, #-6]
   18020:	ldr	r0, [fp, #-16]
   18024:	bl	133b8 <__assert_fail@plt+0x246c>
   18028:	mov	r3, r0
   1802c:	cmp	r3, #0
   18030:	movne	r3, #1
   18034:	moveq	r3, #0
   18038:	strb	r3, [fp, #-7]
   1803c:	ldrb	r3, [fp, #-6]
   18040:	cmp	r3, #0
   18044:	bne	18074 <__assert_fail@plt+0x7128>
   18048:	ldrb	r3, [fp, #-7]
   1804c:	cmp	r3, #0
   18050:	beq	180a0 <__assert_fail@plt+0x7154>
   18054:	ldrb	r3, [fp, #-5]
   18058:	cmp	r3, #0
   1805c:	bne	18074 <__assert_fail@plt+0x7128>
   18060:	bl	10e80 <__errno_location@plt>
   18064:	mov	r3, r0
   18068:	ldr	r3, [r3]
   1806c:	cmp	r3, #9
   18070:	beq	180a0 <__assert_fail@plt+0x7154>
   18074:	ldrb	r3, [fp, #-7]
   18078:	eor	r3, r3, #1
   1807c:	uxtb	r3, r3
   18080:	cmp	r3, #0
   18084:	beq	18098 <__assert_fail@plt+0x714c>
   18088:	bl	10e80 <__errno_location@plt>
   1808c:	mov	r2, r0
   18090:	mov	r3, #0
   18094:	str	r3, [r2]
   18098:	mvn	r3, #0
   1809c:	b	180a4 <__assert_fail@plt+0x7158>
   180a0:	mov	r3, #0
   180a4:	mov	r0, r3
   180a8:	sub	sp, fp, #4
   180ac:	pop	{fp, pc}
   180b0:	push	{fp, lr}
   180b4:	add	fp, sp, #4
   180b8:	sub	sp, sp, #8
   180bc:	mov	r0, #14
   180c0:	bl	10ef8 <nl_langinfo@plt>
   180c4:	str	r0, [fp, #-8]
   180c8:	ldr	r3, [fp, #-8]
   180cc:	cmp	r3, #0
   180d0:	bne	180dc <__assert_fail@plt+0x7190>
   180d4:	ldr	r3, [pc, #40]	; 18104 <__assert_fail@plt+0x71b8>
   180d8:	str	r3, [fp, #-8]
   180dc:	ldr	r3, [fp, #-8]
   180e0:	ldrb	r3, [r3]
   180e4:	cmp	r3, #0
   180e8:	bne	180f4 <__assert_fail@plt+0x71a8>
   180ec:	ldr	r3, [pc, #20]	; 18108 <__assert_fail@plt+0x71bc>
   180f0:	str	r3, [fp, #-8]
   180f4:	ldr	r3, [fp, #-8]
   180f8:	mov	r0, r3
   180fc:	sub	sp, fp, #4
   18100:	pop	{fp, pc}
   18104:	andeq	r9, r1, r0, lsr #24
   18108:	andeq	r9, r1, r4, lsr #24
   1810c:	push	{fp, lr}
   18110:	add	fp, sp, #4
   18114:	sub	sp, sp, #32
   18118:	str	r0, [fp, #-24]	; 0xffffffe8
   1811c:	str	r1, [fp, #-28]	; 0xffffffe4
   18120:	str	r2, [fp, #-32]	; 0xffffffe0
   18124:	str	r3, [fp, #-36]	; 0xffffffdc
   18128:	ldr	r3, [fp, #-24]	; 0xffffffe8
   1812c:	cmp	r3, #0
   18130:	bne	1813c <__assert_fail@plt+0x71f0>
   18134:	sub	r3, fp, #16
   18138:	str	r3, [fp, #-24]	; 0xffffffe8
   1813c:	ldr	r3, [fp, #-36]	; 0xffffffdc
   18140:	ldr	r2, [fp, #-32]	; 0xffffffe0
   18144:	ldr	r1, [fp, #-28]	; 0xffffffe4
   18148:	ldr	r0, [fp, #-24]	; 0xffffffe8
   1814c:	bl	10de4 <mbrtowc@plt>
   18150:	str	r0, [fp, #-8]
   18154:	ldr	r3, [fp, #-8]
   18158:	cmn	r3, #3
   1815c:	bls	181a8 <__assert_fail@plt+0x725c>
   18160:	ldr	r3, [fp, #-32]	; 0xffffffe0
   18164:	cmp	r3, #0
   18168:	beq	181a8 <__assert_fail@plt+0x725c>
   1816c:	mov	r0, #0
   18170:	bl	186ac <__assert_fail@plt+0x7760>
   18174:	mov	r3, r0
   18178:	eor	r3, r3, #1
   1817c:	uxtb	r3, r3
   18180:	cmp	r3, #0
   18184:	beq	181a8 <__assert_fail@plt+0x725c>
   18188:	ldr	r3, [fp, #-28]	; 0xffffffe4
   1818c:	ldrb	r3, [r3]
   18190:	strb	r3, [fp, #-9]
   18194:	ldrb	r2, [fp, #-9]
   18198:	ldr	r3, [fp, #-24]	; 0xffffffe8
   1819c:	str	r2, [r3]
   181a0:	mov	r3, #1
   181a4:	b	181ac <__assert_fail@plt+0x7260>
   181a8:	ldr	r3, [fp, #-8]
   181ac:	mov	r0, r3
   181b0:	sub	sp, fp, #4
   181b4:	pop	{fp, pc}
   181b8:	push	{fp}		; (str fp, [sp, #-4]!)
   181bc:	add	fp, sp, #0
   181c0:	sub	sp, sp, #12
   181c4:	str	r0, [fp, #-8]
   181c8:	ldr	r3, [fp, #-8]
   181cc:	cmp	r3, #90	; 0x5a
   181d0:	bgt	181ec <__assert_fail@plt+0x72a0>
   181d4:	cmp	r3, #65	; 0x41
   181d8:	bge	181f8 <__assert_fail@plt+0x72ac>
   181dc:	sub	r3, r3, #48	; 0x30
   181e0:	cmp	r3, #9
   181e4:	bhi	18200 <__assert_fail@plt+0x72b4>
   181e8:	b	181f8 <__assert_fail@plt+0x72ac>
   181ec:	sub	r3, r3, #97	; 0x61
   181f0:	cmp	r3, #25
   181f4:	bhi	18200 <__assert_fail@plt+0x72b4>
   181f8:	mov	r3, #1
   181fc:	b	18204 <__assert_fail@plt+0x72b8>
   18200:	mov	r3, #0
   18204:	mov	r0, r3
   18208:	add	sp, fp, #0
   1820c:	pop	{fp}		; (ldr fp, [sp], #4)
   18210:	bx	lr
   18214:	push	{fp}		; (str fp, [sp, #-4]!)
   18218:	add	fp, sp, #0
   1821c:	sub	sp, sp, #12
   18220:	str	r0, [fp, #-8]
   18224:	ldr	r3, [fp, #-8]
   18228:	cmp	r3, #65	; 0x41
   1822c:	blt	1824c <__assert_fail@plt+0x7300>
   18230:	cmp	r3, #90	; 0x5a
   18234:	ble	18244 <__assert_fail@plt+0x72f8>
   18238:	sub	r3, r3, #97	; 0x61
   1823c:	cmp	r3, #25
   18240:	bhi	1824c <__assert_fail@plt+0x7300>
   18244:	mov	r3, #1
   18248:	b	18250 <__assert_fail@plt+0x7304>
   1824c:	mov	r3, #0
   18250:	mov	r0, r3
   18254:	add	sp, fp, #0
   18258:	pop	{fp}		; (ldr fp, [sp], #4)
   1825c:	bx	lr
   18260:	push	{fp}		; (str fp, [sp, #-4]!)
   18264:	add	fp, sp, #0
   18268:	sub	sp, sp, #12
   1826c:	str	r0, [fp, #-8]
   18270:	ldr	r3, [fp, #-8]
   18274:	add	r3, r3, #0
   18278:	cmp	r3, #127	; 0x7f
   1827c:	bhi	18288 <__assert_fail@plt+0x733c>
   18280:	mov	r3, #1
   18284:	b	1828c <__assert_fail@plt+0x7340>
   18288:	mov	r3, #0
   1828c:	mov	r0, r3
   18290:	add	sp, fp, #0
   18294:	pop	{fp}		; (ldr fp, [sp], #4)
   18298:	bx	lr
   1829c:	push	{fp}		; (str fp, [sp, #-4]!)
   182a0:	add	fp, sp, #0
   182a4:	sub	sp, sp, #12
   182a8:	str	r0, [fp, #-8]
   182ac:	ldr	r3, [fp, #-8]
   182b0:	cmp	r3, #32
   182b4:	beq	182c4 <__assert_fail@plt+0x7378>
   182b8:	ldr	r3, [fp, #-8]
   182bc:	cmp	r3, #9
   182c0:	bne	182cc <__assert_fail@plt+0x7380>
   182c4:	mov	r3, #1
   182c8:	b	182d0 <__assert_fail@plt+0x7384>
   182cc:	mov	r3, #0
   182d0:	and	r3, r3, #1
   182d4:	uxtb	r3, r3
   182d8:	mov	r0, r3
   182dc:	add	sp, fp, #0
   182e0:	pop	{fp}		; (ldr fp, [sp], #4)
   182e4:	bx	lr
   182e8:	push	{fp}		; (str fp, [sp, #-4]!)
   182ec:	add	fp, sp, #0
   182f0:	sub	sp, sp, #12
   182f4:	str	r0, [fp, #-8]
   182f8:	ldr	r3, [fp, #-8]
   182fc:	cmp	r3, #0
   18300:	blt	1831c <__assert_fail@plt+0x73d0>
   18304:	cmp	r3, #31
   18308:	ble	18314 <__assert_fail@plt+0x73c8>
   1830c:	cmp	r3, #127	; 0x7f
   18310:	bne	1831c <__assert_fail@plt+0x73d0>
   18314:	mov	r3, #1
   18318:	b	18320 <__assert_fail@plt+0x73d4>
   1831c:	mov	r3, #0
   18320:	mov	r0, r3
   18324:	add	sp, fp, #0
   18328:	pop	{fp}		; (ldr fp, [sp], #4)
   1832c:	bx	lr
   18330:	push	{fp}		; (str fp, [sp, #-4]!)
   18334:	add	fp, sp, #0
   18338:	sub	sp, sp, #12
   1833c:	str	r0, [fp, #-8]
   18340:	ldr	r3, [fp, #-8]
   18344:	sub	r3, r3, #48	; 0x30
   18348:	cmp	r3, #9
   1834c:	bhi	18358 <__assert_fail@plt+0x740c>
   18350:	mov	r3, #1
   18354:	b	1835c <__assert_fail@plt+0x7410>
   18358:	mov	r3, #0
   1835c:	mov	r0, r3
   18360:	add	sp, fp, #0
   18364:	pop	{fp}		; (ldr fp, [sp], #4)
   18368:	bx	lr
   1836c:	push	{fp}		; (str fp, [sp, #-4]!)
   18370:	add	fp, sp, #0
   18374:	sub	sp, sp, #12
   18378:	str	r0, [fp, #-8]
   1837c:	ldr	r3, [fp, #-8]
   18380:	sub	r3, r3, #33	; 0x21
   18384:	cmp	r3, #93	; 0x5d
   18388:	bhi	18394 <__assert_fail@plt+0x7448>
   1838c:	mov	r3, #1
   18390:	b	18398 <__assert_fail@plt+0x744c>
   18394:	mov	r3, #0
   18398:	mov	r0, r3
   1839c:	add	sp, fp, #0
   183a0:	pop	{fp}		; (ldr fp, [sp], #4)
   183a4:	bx	lr
   183a8:	push	{fp}		; (str fp, [sp, #-4]!)
   183ac:	add	fp, sp, #0
   183b0:	sub	sp, sp, #12
   183b4:	str	r0, [fp, #-8]
   183b8:	ldr	r3, [fp, #-8]
   183bc:	sub	r3, r3, #97	; 0x61
   183c0:	cmp	r3, #25
   183c4:	bhi	183d0 <__assert_fail@plt+0x7484>
   183c8:	mov	r3, #1
   183cc:	b	183d4 <__assert_fail@plt+0x7488>
   183d0:	mov	r3, #0
   183d4:	mov	r0, r3
   183d8:	add	sp, fp, #0
   183dc:	pop	{fp}		; (ldr fp, [sp], #4)
   183e0:	bx	lr
   183e4:	push	{fp}		; (str fp, [sp, #-4]!)
   183e8:	add	fp, sp, #0
   183ec:	sub	sp, sp, #12
   183f0:	str	r0, [fp, #-8]
   183f4:	ldr	r3, [fp, #-8]
   183f8:	sub	r3, r3, #32
   183fc:	cmp	r3, #94	; 0x5e
   18400:	bhi	1840c <__assert_fail@plt+0x74c0>
   18404:	mov	r3, #1
   18408:	b	18410 <__assert_fail@plt+0x74c4>
   1840c:	mov	r3, #0
   18410:	mov	r0, r3
   18414:	add	sp, fp, #0
   18418:	pop	{fp}		; (ldr fp, [sp], #4)
   1841c:	bx	lr
   18420:	push	{fp}		; (str fp, [sp, #-4]!)
   18424:	add	fp, sp, #0
   18428:	sub	sp, sp, #12
   1842c:	str	r0, [fp, #-8]
   18430:	ldr	r3, [fp, #-8]
   18434:	cmp	r3, #64	; 0x40
   18438:	bgt	18454 <__assert_fail@plt+0x7508>
   1843c:	cmp	r3, #58	; 0x3a
   18440:	bge	18470 <__assert_fail@plt+0x7524>
   18444:	sub	r3, r3, #33	; 0x21
   18448:	cmp	r3, #14
   1844c:	bhi	18478 <__assert_fail@plt+0x752c>
   18450:	b	18470 <__assert_fail@plt+0x7524>
   18454:	cmp	r3, #91	; 0x5b
   18458:	blt	18478 <__assert_fail@plt+0x752c>
   1845c:	cmp	r3, #96	; 0x60
   18460:	ble	18470 <__assert_fail@plt+0x7524>
   18464:	sub	r3, r3, #123	; 0x7b
   18468:	cmp	r3, #3
   1846c:	bhi	18478 <__assert_fail@plt+0x752c>
   18470:	mov	r3, #1
   18474:	b	1847c <__assert_fail@plt+0x7530>
   18478:	mov	r3, #0
   1847c:	mov	r0, r3
   18480:	add	sp, fp, #0
   18484:	pop	{fp}		; (ldr fp, [sp], #4)
   18488:	bx	lr
   1848c:	push	{fp}		; (str fp, [sp, #-4]!)
   18490:	add	fp, sp, #0
   18494:	sub	sp, sp, #12
   18498:	str	r0, [fp, #-8]
   1849c:	ldr	r3, [fp, #-8]
   184a0:	cmp	r3, #9
   184a4:	blt	184c0 <__assert_fail@plt+0x7574>
   184a8:	cmp	r3, #13
   184ac:	ble	184b8 <__assert_fail@plt+0x756c>
   184b0:	cmp	r3, #32
   184b4:	bne	184c0 <__assert_fail@plt+0x7574>
   184b8:	mov	r3, #1
   184bc:	b	184c4 <__assert_fail@plt+0x7578>
   184c0:	mov	r3, #0
   184c4:	mov	r0, r3
   184c8:	add	sp, fp, #0
   184cc:	pop	{fp}		; (ldr fp, [sp], #4)
   184d0:	bx	lr
   184d4:	push	{fp}		; (str fp, [sp, #-4]!)
   184d8:	add	fp, sp, #0
   184dc:	sub	sp, sp, #12
   184e0:	str	r0, [fp, #-8]
   184e4:	ldr	r3, [fp, #-8]
   184e8:	sub	r3, r3, #65	; 0x41
   184ec:	cmp	r3, #25
   184f0:	bhi	184fc <__assert_fail@plt+0x75b0>
   184f4:	mov	r3, #1
   184f8:	b	18500 <__assert_fail@plt+0x75b4>
   184fc:	mov	r3, #0
   18500:	mov	r0, r3
   18504:	add	sp, fp, #0
   18508:	pop	{fp}		; (ldr fp, [sp], #4)
   1850c:	bx	lr
   18510:	push	{fp}		; (str fp, [sp, #-4]!)
   18514:	add	fp, sp, #0
   18518:	sub	sp, sp, #12
   1851c:	str	r0, [fp, #-8]
   18520:	ldr	r3, [fp, #-8]
   18524:	sub	r3, r3, #48	; 0x30
   18528:	cmp	r3, #54	; 0x36
   1852c:	addls	pc, pc, r3, lsl #2
   18530:	b	18618 <__assert_fail@plt+0x76cc>
   18534:	b	18610 <__assert_fail@plt+0x76c4>
   18538:	b	18610 <__assert_fail@plt+0x76c4>
   1853c:	b	18610 <__assert_fail@plt+0x76c4>
   18540:	b	18610 <__assert_fail@plt+0x76c4>
   18544:	b	18610 <__assert_fail@plt+0x76c4>
   18548:	b	18610 <__assert_fail@plt+0x76c4>
   1854c:	b	18610 <__assert_fail@plt+0x76c4>
   18550:	b	18610 <__assert_fail@plt+0x76c4>
   18554:	b	18610 <__assert_fail@plt+0x76c4>
   18558:	b	18610 <__assert_fail@plt+0x76c4>
   1855c:	b	18618 <__assert_fail@plt+0x76cc>
   18560:	b	18618 <__assert_fail@plt+0x76cc>
   18564:	b	18618 <__assert_fail@plt+0x76cc>
   18568:	b	18618 <__assert_fail@plt+0x76cc>
   1856c:	b	18618 <__assert_fail@plt+0x76cc>
   18570:	b	18618 <__assert_fail@plt+0x76cc>
   18574:	b	18618 <__assert_fail@plt+0x76cc>
   18578:	b	18610 <__assert_fail@plt+0x76c4>
   1857c:	b	18610 <__assert_fail@plt+0x76c4>
   18580:	b	18610 <__assert_fail@plt+0x76c4>
   18584:	b	18610 <__assert_fail@plt+0x76c4>
   18588:	b	18610 <__assert_fail@plt+0x76c4>
   1858c:	b	18610 <__assert_fail@plt+0x76c4>
   18590:	b	18618 <__assert_fail@plt+0x76cc>
   18594:	b	18618 <__assert_fail@plt+0x76cc>
   18598:	b	18618 <__assert_fail@plt+0x76cc>
   1859c:	b	18618 <__assert_fail@plt+0x76cc>
   185a0:	b	18618 <__assert_fail@plt+0x76cc>
   185a4:	b	18618 <__assert_fail@plt+0x76cc>
   185a8:	b	18618 <__assert_fail@plt+0x76cc>
   185ac:	b	18618 <__assert_fail@plt+0x76cc>
   185b0:	b	18618 <__assert_fail@plt+0x76cc>
   185b4:	b	18618 <__assert_fail@plt+0x76cc>
   185b8:	b	18618 <__assert_fail@plt+0x76cc>
   185bc:	b	18618 <__assert_fail@plt+0x76cc>
   185c0:	b	18618 <__assert_fail@plt+0x76cc>
   185c4:	b	18618 <__assert_fail@plt+0x76cc>
   185c8:	b	18618 <__assert_fail@plt+0x76cc>
   185cc:	b	18618 <__assert_fail@plt+0x76cc>
   185d0:	b	18618 <__assert_fail@plt+0x76cc>
   185d4:	b	18618 <__assert_fail@plt+0x76cc>
   185d8:	b	18618 <__assert_fail@plt+0x76cc>
   185dc:	b	18618 <__assert_fail@plt+0x76cc>
   185e0:	b	18618 <__assert_fail@plt+0x76cc>
   185e4:	b	18618 <__assert_fail@plt+0x76cc>
   185e8:	b	18618 <__assert_fail@plt+0x76cc>
   185ec:	b	18618 <__assert_fail@plt+0x76cc>
   185f0:	b	18618 <__assert_fail@plt+0x76cc>
   185f4:	b	18618 <__assert_fail@plt+0x76cc>
   185f8:	b	18610 <__assert_fail@plt+0x76c4>
   185fc:	b	18610 <__assert_fail@plt+0x76c4>
   18600:	b	18610 <__assert_fail@plt+0x76c4>
   18604:	b	18610 <__assert_fail@plt+0x76c4>
   18608:	b	18610 <__assert_fail@plt+0x76c4>
   1860c:	b	18610 <__assert_fail@plt+0x76c4>
   18610:	mov	r3, #1
   18614:	b	1861c <__assert_fail@plt+0x76d0>
   18618:	mov	r3, #0
   1861c:	mov	r0, r3
   18620:	add	sp, fp, #0
   18624:	pop	{fp}		; (ldr fp, [sp], #4)
   18628:	bx	lr
   1862c:	push	{fp}		; (str fp, [sp, #-4]!)
   18630:	add	fp, sp, #0
   18634:	sub	sp, sp, #12
   18638:	str	r0, [fp, #-8]
   1863c:	ldr	r3, [fp, #-8]
   18640:	sub	r3, r3, #65	; 0x41
   18644:	cmp	r3, #25
   18648:	bhi	18658 <__assert_fail@plt+0x770c>
   1864c:	ldr	r3, [fp, #-8]
   18650:	add	r3, r3, #32
   18654:	b	1865c <__assert_fail@plt+0x7710>
   18658:	ldr	r3, [fp, #-8]
   1865c:	mov	r0, r3
   18660:	add	sp, fp, #0
   18664:	pop	{fp}		; (ldr fp, [sp], #4)
   18668:	bx	lr
   1866c:	push	{fp}		; (str fp, [sp, #-4]!)
   18670:	add	fp, sp, #0
   18674:	sub	sp, sp, #12
   18678:	str	r0, [fp, #-8]
   1867c:	ldr	r3, [fp, #-8]
   18680:	sub	r3, r3, #97	; 0x61
   18684:	cmp	r3, #25
   18688:	bhi	18698 <__assert_fail@plt+0x774c>
   1868c:	ldr	r3, [fp, #-8]
   18690:	sub	r3, r3, #32
   18694:	b	1869c <__assert_fail@plt+0x7750>
   18698:	ldr	r3, [fp, #-8]
   1869c:	mov	r0, r3
   186a0:	add	sp, fp, #0
   186a4:	pop	{fp}		; (ldr fp, [sp], #4)
   186a8:	bx	lr
   186ac:	push	{fp, lr}
   186b0:	add	fp, sp, #4
   186b4:	sub	sp, sp, #272	; 0x110
   186b8:	str	r0, [fp, #-272]	; 0xfffffef0
   186bc:	sub	r3, fp, #264	; 0x108
   186c0:	ldr	r2, [pc, #116]	; 1873c <__assert_fail@plt+0x77f0>
   186c4:	mov	r1, r3
   186c8:	ldr	r0, [fp, #-272]	; 0xfffffef0
   186cc:	bl	18850 <__assert_fail@plt+0x7904>
   186d0:	mov	r3, r0
   186d4:	cmp	r3, #0
   186d8:	beq	186e4 <__assert_fail@plt+0x7798>
   186dc:	mov	r3, #0
   186e0:	b	18730 <__assert_fail@plt+0x77e4>
   186e4:	sub	r3, fp, #264	; 0x108
   186e8:	ldr	r1, [pc, #80]	; 18740 <__assert_fail@plt+0x77f4>
   186ec:	mov	r0, r3
   186f0:	bl	10cf4 <strcmp@plt>
   186f4:	mov	r3, r0
   186f8:	cmp	r3, #0
   186fc:	beq	18724 <__assert_fail@plt+0x77d8>
   18700:	sub	r3, fp, #264	; 0x108
   18704:	ldr	r1, [pc, #56]	; 18744 <__assert_fail@plt+0x77f8>
   18708:	mov	r0, r3
   1870c:	bl	10cf4 <strcmp@plt>
   18710:	mov	r3, r0
   18714:	cmp	r3, #0
   18718:	beq	18724 <__assert_fail@plt+0x77d8>
   1871c:	mov	r3, #1
   18720:	b	18728 <__assert_fail@plt+0x77dc>
   18724:	mov	r3, #0
   18728:	and	r3, r3, #1
   1872c:	uxtb	r3, r3
   18730:	mov	r0, r3
   18734:	sub	sp, fp, #4
   18738:	pop	{fp, pc}
   1873c:	andeq	r0, r0, r1, lsl #2
   18740:	andeq	r9, r1, ip, lsr #24
   18744:	andeq	r9, r1, r0, lsr ip
   18748:	push	{fp, lr}
   1874c:	add	fp, sp, #4
   18750:	sub	sp, sp, #16
   18754:	str	r0, [fp, #-16]
   18758:	mov	r1, #0
   1875c:	ldr	r0, [fp, #-16]
   18760:	bl	10ee0 <setlocale@plt>
   18764:	str	r0, [fp, #-8]
   18768:	ldr	r3, [fp, #-8]
   1876c:	mov	r0, r3
   18770:	sub	sp, fp, #4
   18774:	pop	{fp, pc}
   18778:	push	{fp, lr}
   1877c:	add	fp, sp, #4
   18780:	sub	sp, sp, #24
   18784:	str	r0, [fp, #-16]
   18788:	str	r1, [fp, #-20]	; 0xffffffec
   1878c:	str	r2, [fp, #-24]	; 0xffffffe8
   18790:	ldr	r0, [fp, #-16]
   18794:	bl	18748 <__assert_fail@plt+0x77fc>
   18798:	str	r0, [fp, #-8]
   1879c:	ldr	r3, [fp, #-8]
   187a0:	cmp	r3, #0
   187a4:	bne	187c8 <__assert_fail@plt+0x787c>
   187a8:	ldr	r3, [fp, #-24]	; 0xffffffe8
   187ac:	cmp	r3, #0
   187b0:	beq	187c0 <__assert_fail@plt+0x7874>
   187b4:	ldr	r3, [fp, #-20]	; 0xffffffec
   187b8:	mov	r2, #0
   187bc:	strb	r2, [r3]
   187c0:	mov	r3, #22
   187c4:	b	18844 <__assert_fail@plt+0x78f8>
   187c8:	ldr	r0, [fp, #-8]
   187cc:	bl	10e5c <strlen@plt>
   187d0:	str	r0, [fp, #-12]
   187d4:	ldr	r2, [fp, #-12]
   187d8:	ldr	r3, [fp, #-24]	; 0xffffffe8
   187dc:	cmp	r2, r3
   187e0:	bcs	18804 <__assert_fail@plt+0x78b8>
   187e4:	ldr	r3, [fp, #-12]
   187e8:	add	r3, r3, #1
   187ec:	mov	r2, r3
   187f0:	ldr	r1, [fp, #-8]
   187f4:	ldr	r0, [fp, #-20]	; 0xffffffec
   187f8:	bl	10d48 <memcpy@plt>
   187fc:	mov	r3, #0
   18800:	b	18844 <__assert_fail@plt+0x78f8>
   18804:	ldr	r3, [fp, #-24]	; 0xffffffe8
   18808:	cmp	r3, #0
   1880c:	beq	18840 <__assert_fail@plt+0x78f4>
   18810:	ldr	r3, [fp, #-24]	; 0xffffffe8
   18814:	sub	r3, r3, #1
   18818:	mov	r2, r3
   1881c:	ldr	r1, [fp, #-8]
   18820:	ldr	r0, [fp, #-20]	; 0xffffffec
   18824:	bl	10d48 <memcpy@plt>
   18828:	ldr	r3, [fp, #-24]	; 0xffffffe8
   1882c:	sub	r3, r3, #1
   18830:	ldr	r2, [fp, #-20]	; 0xffffffec
   18834:	add	r3, r2, r3
   18838:	mov	r2, #0
   1883c:	strb	r2, [r3]
   18840:	mov	r3, #34	; 0x22
   18844:	mov	r0, r3
   18848:	sub	sp, fp, #4
   1884c:	pop	{fp, pc}
   18850:	push	{fp, lr}
   18854:	add	fp, sp, #4
   18858:	sub	sp, sp, #16
   1885c:	str	r0, [fp, #-8]
   18860:	str	r1, [fp, #-12]
   18864:	str	r2, [fp, #-16]
   18868:	ldr	r2, [fp, #-16]
   1886c:	ldr	r1, [fp, #-12]
   18870:	ldr	r0, [fp, #-8]
   18874:	bl	18778 <__assert_fail@plt+0x782c>
   18878:	mov	r3, r0
   1887c:	mov	r0, r3
   18880:	sub	sp, fp, #4
   18884:	pop	{fp, pc}
   18888:	push	{fp, lr}
   1888c:	add	fp, sp, #4
   18890:	sub	sp, sp, #8
   18894:	str	r0, [fp, #-8]
   18898:	ldr	r0, [fp, #-8]
   1889c:	bl	18748 <__assert_fail@plt+0x77fc>
   188a0:	mov	r3, r0
   188a4:	mov	r0, r3
   188a8:	sub	sp, fp, #4
   188ac:	pop	{fp, pc}
   188b0:	subs	r2, r1, #1
   188b4:	bxeq	lr
   188b8:	bcc	18a90 <__assert_fail@plt+0x7b44>
   188bc:	cmp	r0, r1
   188c0:	bls	18a74 <__assert_fail@plt+0x7b28>
   188c4:	tst	r1, r2
   188c8:	beq	18a80 <__assert_fail@plt+0x7b34>
   188cc:	clz	r3, r0
   188d0:	clz	r2, r1
   188d4:	sub	r3, r2, r3
   188d8:	rsbs	r3, r3, #31
   188dc:	addne	r3, r3, r3, lsl #1
   188e0:	mov	r2, #0
   188e4:	addne	pc, pc, r3, lsl #2
   188e8:	nop			; (mov r0, r0)
   188ec:	cmp	r0, r1, lsl #31
   188f0:	adc	r2, r2, r2
   188f4:	subcs	r0, r0, r1, lsl #31
   188f8:	cmp	r0, r1, lsl #30
   188fc:	adc	r2, r2, r2
   18900:	subcs	r0, r0, r1, lsl #30
   18904:	cmp	r0, r1, lsl #29
   18908:	adc	r2, r2, r2
   1890c:	subcs	r0, r0, r1, lsl #29
   18910:	cmp	r0, r1, lsl #28
   18914:	adc	r2, r2, r2
   18918:	subcs	r0, r0, r1, lsl #28
   1891c:	cmp	r0, r1, lsl #27
   18920:	adc	r2, r2, r2
   18924:	subcs	r0, r0, r1, lsl #27
   18928:	cmp	r0, r1, lsl #26
   1892c:	adc	r2, r2, r2
   18930:	subcs	r0, r0, r1, lsl #26
   18934:	cmp	r0, r1, lsl #25
   18938:	adc	r2, r2, r2
   1893c:	subcs	r0, r0, r1, lsl #25
   18940:	cmp	r0, r1, lsl #24
   18944:	adc	r2, r2, r2
   18948:	subcs	r0, r0, r1, lsl #24
   1894c:	cmp	r0, r1, lsl #23
   18950:	adc	r2, r2, r2
   18954:	subcs	r0, r0, r1, lsl #23
   18958:	cmp	r0, r1, lsl #22
   1895c:	adc	r2, r2, r2
   18960:	subcs	r0, r0, r1, lsl #22
   18964:	cmp	r0, r1, lsl #21
   18968:	adc	r2, r2, r2
   1896c:	subcs	r0, r0, r1, lsl #21
   18970:	cmp	r0, r1, lsl #20
   18974:	adc	r2, r2, r2
   18978:	subcs	r0, r0, r1, lsl #20
   1897c:	cmp	r0, r1, lsl #19
   18980:	adc	r2, r2, r2
   18984:	subcs	r0, r0, r1, lsl #19
   18988:	cmp	r0, r1, lsl #18
   1898c:	adc	r2, r2, r2
   18990:	subcs	r0, r0, r1, lsl #18
   18994:	cmp	r0, r1, lsl #17
   18998:	adc	r2, r2, r2
   1899c:	subcs	r0, r0, r1, lsl #17
   189a0:	cmp	r0, r1, lsl #16
   189a4:	adc	r2, r2, r2
   189a8:	subcs	r0, r0, r1, lsl #16
   189ac:	cmp	r0, r1, lsl #15
   189b0:	adc	r2, r2, r2
   189b4:	subcs	r0, r0, r1, lsl #15
   189b8:	cmp	r0, r1, lsl #14
   189bc:	adc	r2, r2, r2
   189c0:	subcs	r0, r0, r1, lsl #14
   189c4:	cmp	r0, r1, lsl #13
   189c8:	adc	r2, r2, r2
   189cc:	subcs	r0, r0, r1, lsl #13
   189d0:	cmp	r0, r1, lsl #12
   189d4:	adc	r2, r2, r2
   189d8:	subcs	r0, r0, r1, lsl #12
   189dc:	cmp	r0, r1, lsl #11
   189e0:	adc	r2, r2, r2
   189e4:	subcs	r0, r0, r1, lsl #11
   189e8:	cmp	r0, r1, lsl #10
   189ec:	adc	r2, r2, r2
   189f0:	subcs	r0, r0, r1, lsl #10
   189f4:	cmp	r0, r1, lsl #9
   189f8:	adc	r2, r2, r2
   189fc:	subcs	r0, r0, r1, lsl #9
   18a00:	cmp	r0, r1, lsl #8
   18a04:	adc	r2, r2, r2
   18a08:	subcs	r0, r0, r1, lsl #8
   18a0c:	cmp	r0, r1, lsl #7
   18a10:	adc	r2, r2, r2
   18a14:	subcs	r0, r0, r1, lsl #7
   18a18:	cmp	r0, r1, lsl #6
   18a1c:	adc	r2, r2, r2
   18a20:	subcs	r0, r0, r1, lsl #6
   18a24:	cmp	r0, r1, lsl #5
   18a28:	adc	r2, r2, r2
   18a2c:	subcs	r0, r0, r1, lsl #5
   18a30:	cmp	r0, r1, lsl #4
   18a34:	adc	r2, r2, r2
   18a38:	subcs	r0, r0, r1, lsl #4
   18a3c:	cmp	r0, r1, lsl #3
   18a40:	adc	r2, r2, r2
   18a44:	subcs	r0, r0, r1, lsl #3
   18a48:	cmp	r0, r1, lsl #2
   18a4c:	adc	r2, r2, r2
   18a50:	subcs	r0, r0, r1, lsl #2
   18a54:	cmp	r0, r1, lsl #1
   18a58:	adc	r2, r2, r2
   18a5c:	subcs	r0, r0, r1, lsl #1
   18a60:	cmp	r0, r1
   18a64:	adc	r2, r2, r2
   18a68:	subcs	r0, r0, r1
   18a6c:	mov	r0, r2
   18a70:	bx	lr
   18a74:	moveq	r0, #1
   18a78:	movne	r0, #0
   18a7c:	bx	lr
   18a80:	clz	r2, r1
   18a84:	rsb	r2, r2, #31
   18a88:	lsr	r0, r0, r2
   18a8c:	bx	lr
   18a90:	cmp	r0, #0
   18a94:	mvnne	r0, #0
   18a98:	b	18dd0 <__assert_fail@plt+0x7e84>
   18a9c:	cmp	r1, #0
   18aa0:	beq	18a90 <__assert_fail@plt+0x7b44>
   18aa4:	push	{r0, r1, lr}
   18aa8:	bl	188b0 <__assert_fail@plt+0x7964>
   18aac:	pop	{r1, r2, lr}
   18ab0:	mul	r3, r2, r0
   18ab4:	sub	r1, r1, r3
   18ab8:	bx	lr
   18abc:	cmp	r1, #0
   18ac0:	beq	18ccc <__assert_fail@plt+0x7d80>
   18ac4:	eor	ip, r0, r1
   18ac8:	rsbmi	r1, r1, #0
   18acc:	subs	r2, r1, #1
   18ad0:	beq	18c98 <__assert_fail@plt+0x7d4c>
   18ad4:	movs	r3, r0
   18ad8:	rsbmi	r3, r0, #0
   18adc:	cmp	r3, r1
   18ae0:	bls	18ca4 <__assert_fail@plt+0x7d58>
   18ae4:	tst	r1, r2
   18ae8:	beq	18cb4 <__assert_fail@plt+0x7d68>
   18aec:	clz	r2, r3
   18af0:	clz	r0, r1
   18af4:	sub	r2, r0, r2
   18af8:	rsbs	r2, r2, #31
   18afc:	addne	r2, r2, r2, lsl #1
   18b00:	mov	r0, #0
   18b04:	addne	pc, pc, r2, lsl #2
   18b08:	nop			; (mov r0, r0)
   18b0c:	cmp	r3, r1, lsl #31
   18b10:	adc	r0, r0, r0
   18b14:	subcs	r3, r3, r1, lsl #31
   18b18:	cmp	r3, r1, lsl #30
   18b1c:	adc	r0, r0, r0
   18b20:	subcs	r3, r3, r1, lsl #30
   18b24:	cmp	r3, r1, lsl #29
   18b28:	adc	r0, r0, r0
   18b2c:	subcs	r3, r3, r1, lsl #29
   18b30:	cmp	r3, r1, lsl #28
   18b34:	adc	r0, r0, r0
   18b38:	subcs	r3, r3, r1, lsl #28
   18b3c:	cmp	r3, r1, lsl #27
   18b40:	adc	r0, r0, r0
   18b44:	subcs	r3, r3, r1, lsl #27
   18b48:	cmp	r3, r1, lsl #26
   18b4c:	adc	r0, r0, r0
   18b50:	subcs	r3, r3, r1, lsl #26
   18b54:	cmp	r3, r1, lsl #25
   18b58:	adc	r0, r0, r0
   18b5c:	subcs	r3, r3, r1, lsl #25
   18b60:	cmp	r3, r1, lsl #24
   18b64:	adc	r0, r0, r0
   18b68:	subcs	r3, r3, r1, lsl #24
   18b6c:	cmp	r3, r1, lsl #23
   18b70:	adc	r0, r0, r0
   18b74:	subcs	r3, r3, r1, lsl #23
   18b78:	cmp	r3, r1, lsl #22
   18b7c:	adc	r0, r0, r0
   18b80:	subcs	r3, r3, r1, lsl #22
   18b84:	cmp	r3, r1, lsl #21
   18b88:	adc	r0, r0, r0
   18b8c:	subcs	r3, r3, r1, lsl #21
   18b90:	cmp	r3, r1, lsl #20
   18b94:	adc	r0, r0, r0
   18b98:	subcs	r3, r3, r1, lsl #20
   18b9c:	cmp	r3, r1, lsl #19
   18ba0:	adc	r0, r0, r0
   18ba4:	subcs	r3, r3, r1, lsl #19
   18ba8:	cmp	r3, r1, lsl #18
   18bac:	adc	r0, r0, r0
   18bb0:	subcs	r3, r3, r1, lsl #18
   18bb4:	cmp	r3, r1, lsl #17
   18bb8:	adc	r0, r0, r0
   18bbc:	subcs	r3, r3, r1, lsl #17
   18bc0:	cmp	r3, r1, lsl #16
   18bc4:	adc	r0, r0, r0
   18bc8:	subcs	r3, r3, r1, lsl #16
   18bcc:	cmp	r3, r1, lsl #15
   18bd0:	adc	r0, r0, r0
   18bd4:	subcs	r3, r3, r1, lsl #15
   18bd8:	cmp	r3, r1, lsl #14
   18bdc:	adc	r0, r0, r0
   18be0:	subcs	r3, r3, r1, lsl #14
   18be4:	cmp	r3, r1, lsl #13
   18be8:	adc	r0, r0, r0
   18bec:	subcs	r3, r3, r1, lsl #13
   18bf0:	cmp	r3, r1, lsl #12
   18bf4:	adc	r0, r0, r0
   18bf8:	subcs	r3, r3, r1, lsl #12
   18bfc:	cmp	r3, r1, lsl #11
   18c00:	adc	r0, r0, r0
   18c04:	subcs	r3, r3, r1, lsl #11
   18c08:	cmp	r3, r1, lsl #10
   18c0c:	adc	r0, r0, r0
   18c10:	subcs	r3, r3, r1, lsl #10
   18c14:	cmp	r3, r1, lsl #9
   18c18:	adc	r0, r0, r0
   18c1c:	subcs	r3, r3, r1, lsl #9
   18c20:	cmp	r3, r1, lsl #8
   18c24:	adc	r0, r0, r0
   18c28:	subcs	r3, r3, r1, lsl #8
   18c2c:	cmp	r3, r1, lsl #7
   18c30:	adc	r0, r0, r0
   18c34:	subcs	r3, r3, r1, lsl #7
   18c38:	cmp	r3, r1, lsl #6
   18c3c:	adc	r0, r0, r0
   18c40:	subcs	r3, r3, r1, lsl #6
   18c44:	cmp	r3, r1, lsl #5
   18c48:	adc	r0, r0, r0
   18c4c:	subcs	r3, r3, r1, lsl #5
   18c50:	cmp	r3, r1, lsl #4
   18c54:	adc	r0, r0, r0
   18c58:	subcs	r3, r3, r1, lsl #4
   18c5c:	cmp	r3, r1, lsl #3
   18c60:	adc	r0, r0, r0
   18c64:	subcs	r3, r3, r1, lsl #3
   18c68:	cmp	r3, r1, lsl #2
   18c6c:	adc	r0, r0, r0
   18c70:	subcs	r3, r3, r1, lsl #2
   18c74:	cmp	r3, r1, lsl #1
   18c78:	adc	r0, r0, r0
   18c7c:	subcs	r3, r3, r1, lsl #1
   18c80:	cmp	r3, r1
   18c84:	adc	r0, r0, r0
   18c88:	subcs	r3, r3, r1
   18c8c:	cmp	ip, #0
   18c90:	rsbmi	r0, r0, #0
   18c94:	bx	lr
   18c98:	teq	ip, r0
   18c9c:	rsbmi	r0, r0, #0
   18ca0:	bx	lr
   18ca4:	movcc	r0, #0
   18ca8:	asreq	r0, ip, #31
   18cac:	orreq	r0, r0, #1
   18cb0:	bx	lr
   18cb4:	clz	r2, r1
   18cb8:	rsb	r2, r2, #31
   18cbc:	cmp	ip, #0
   18cc0:	lsr	r0, r3, r2
   18cc4:	rsbmi	r0, r0, #0
   18cc8:	bx	lr
   18ccc:	cmp	r0, #0
   18cd0:	mvngt	r0, #-2147483648	; 0x80000000
   18cd4:	movlt	r0, #-2147483648	; 0x80000000
   18cd8:	b	18dd0 <__assert_fail@plt+0x7e84>
   18cdc:	cmp	r1, #0
   18ce0:	beq	18ccc <__assert_fail@plt+0x7d80>
   18ce4:	push	{r0, r1, lr}
   18ce8:	bl	18ac4 <__assert_fail@plt+0x7b78>
   18cec:	pop	{r1, r2, lr}
   18cf0:	mul	r3, r2, r0
   18cf4:	sub	r1, r1, r3
   18cf8:	bx	lr
   18cfc:	cmp	r3, #0
   18d00:	cmpeq	r2, #0
   18d04:	bne	18d28 <__assert_fail@plt+0x7ddc>
   18d08:	cmp	r1, #0
   18d0c:	movlt	r1, #-2147483648	; 0x80000000
   18d10:	movlt	r0, #0
   18d14:	blt	18d24 <__assert_fail@plt+0x7dd8>
   18d18:	cmpeq	r0, #0
   18d1c:	mvnne	r1, #-2147483648	; 0x80000000
   18d20:	mvnne	r0, #0
   18d24:	b	18dd0 <__assert_fail@plt+0x7e84>
   18d28:	sub	sp, sp, #8
   18d2c:	push	{sp, lr}
   18d30:	cmp	r1, #0
   18d34:	blt	18d54 <__assert_fail@plt+0x7e08>
   18d38:	cmp	r3, #0
   18d3c:	blt	18d88 <__assert_fail@plt+0x7e3c>
   18d40:	bl	18de0 <__assert_fail@plt+0x7e94>
   18d44:	ldr	lr, [sp, #4]
   18d48:	add	sp, sp, #8
   18d4c:	pop	{r2, r3}
   18d50:	bx	lr
   18d54:	rsbs	r0, r0, #0
   18d58:	sbc	r1, r1, r1, lsl #1
   18d5c:	cmp	r3, #0
   18d60:	blt	18dac <__assert_fail@plt+0x7e60>
   18d64:	bl	18de0 <__assert_fail@plt+0x7e94>
   18d68:	ldr	lr, [sp, #4]
   18d6c:	add	sp, sp, #8
   18d70:	pop	{r2, r3}
   18d74:	rsbs	r0, r0, #0
   18d78:	sbc	r1, r1, r1, lsl #1
   18d7c:	rsbs	r2, r2, #0
   18d80:	sbc	r3, r3, r3, lsl #1
   18d84:	bx	lr
   18d88:	rsbs	r2, r2, #0
   18d8c:	sbc	r3, r3, r3, lsl #1
   18d90:	bl	18de0 <__assert_fail@plt+0x7e94>
   18d94:	ldr	lr, [sp, #4]
   18d98:	add	sp, sp, #8
   18d9c:	pop	{r2, r3}
   18da0:	rsbs	r0, r0, #0
   18da4:	sbc	r1, r1, r1, lsl #1
   18da8:	bx	lr
   18dac:	rsbs	r2, r2, #0
   18db0:	sbc	r3, r3, r3, lsl #1
   18db4:	bl	18de0 <__assert_fail@plt+0x7e94>
   18db8:	ldr	lr, [sp, #4]
   18dbc:	add	sp, sp, #8
   18dc0:	pop	{r2, r3}
   18dc4:	rsbs	r2, r2, #0
   18dc8:	sbc	r3, r3, r3, lsl #1
   18dcc:	bx	lr
   18dd0:	push	{r1, lr}
   18dd4:	mov	r0, #8
   18dd8:	bl	10ce8 <raise@plt>
   18ddc:	pop	{r1, pc}
   18de0:	cmp	r1, r3
   18de4:	push	{r4, r5, r6, r7, r8, r9, lr}
   18de8:	cmpeq	r0, r2
   18dec:	mov	r4, r0
   18df0:	mov	r5, r1
   18df4:	ldr	r9, [sp, #28]
   18df8:	movcc	r0, #0
   18dfc:	movcc	r1, #0
   18e00:	bcc	18ef8 <__assert_fail@plt+0x7fac>
   18e04:	cmp	r3, #0
   18e08:	clzeq	ip, r2
   18e0c:	clzne	ip, r3
   18e10:	addeq	ip, ip, #32
   18e14:	cmp	r5, #0
   18e18:	clzeq	r1, r4
   18e1c:	addeq	r1, r1, #32
   18e20:	clzne	r1, r5
   18e24:	sub	ip, ip, r1
   18e28:	sub	lr, ip, #32
   18e2c:	lsl	r7, r3, ip
   18e30:	rsb	r8, ip, #32
   18e34:	orr	r7, r7, r2, lsl lr
   18e38:	orr	r7, r7, r2, lsr r8
   18e3c:	lsl	r6, r2, ip
   18e40:	cmp	r5, r7
   18e44:	cmpeq	r4, r6
   18e48:	movcc	r0, #0
   18e4c:	movcc	r1, #0
   18e50:	bcc	18e6c <__assert_fail@plt+0x7f20>
   18e54:	mov	r3, #1
   18e58:	subs	r4, r4, r6
   18e5c:	lsl	r1, r3, lr
   18e60:	lsl	r0, r3, ip
   18e64:	orr	r1, r1, r3, lsr r8
   18e68:	sbc	r5, r5, r7
   18e6c:	cmp	ip, #0
   18e70:	beq	18ef8 <__assert_fail@plt+0x7fac>
   18e74:	lsrs	r3, r7, #1
   18e78:	rrx	r2, r6
   18e7c:	mov	r6, ip
   18e80:	b	18ea4 <__assert_fail@plt+0x7f58>
   18e84:	subs	r4, r4, r2
   18e88:	sbc	r5, r5, r3
   18e8c:	adds	r4, r4, r4
   18e90:	adc	r5, r5, r5
   18e94:	adds	r4, r4, #1
   18e98:	adc	r5, r5, #0
   18e9c:	subs	r6, r6, #1
   18ea0:	beq	18ec0 <__assert_fail@plt+0x7f74>
   18ea4:	cmp	r5, r3
   18ea8:	cmpeq	r4, r2
   18eac:	bcs	18e84 <__assert_fail@plt+0x7f38>
   18eb0:	adds	r4, r4, r4
   18eb4:	adc	r5, r5, r5
   18eb8:	subs	r6, r6, #1
   18ebc:	bne	18ea4 <__assert_fail@plt+0x7f58>
   18ec0:	lsr	r6, r4, ip
   18ec4:	lsr	r7, r5, ip
   18ec8:	orr	r6, r6, r5, lsl r8
   18ecc:	adds	r2, r0, r4
   18ed0:	orr	r6, r6, r5, lsr lr
   18ed4:	adc	r3, r1, r5
   18ed8:	lsl	r1, r7, ip
   18edc:	orr	r1, r1, r6, lsl lr
   18ee0:	lsl	r0, r6, ip
   18ee4:	orr	r1, r1, r6, lsr r8
   18ee8:	subs	r0, r2, r0
   18eec:	mov	r4, r6
   18ef0:	mov	r5, r7
   18ef4:	sbc	r1, r3, r1
   18ef8:	cmp	r9, #0
   18efc:	popeq	{r4, r5, r6, r7, r8, r9, pc}
   18f00:	strd	r4, [r9]
   18f04:	pop	{r4, r5, r6, r7, r8, r9, pc}
   18f08:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   18f0c:	mov	r7, r0
   18f10:	ldr	r6, [pc, #72]	; 18f60 <__assert_fail@plt+0x8014>
   18f14:	ldr	r5, [pc, #72]	; 18f64 <__assert_fail@plt+0x8018>
   18f18:	add	r6, pc, r6
   18f1c:	add	r5, pc, r5
   18f20:	sub	r6, r6, r5
   18f24:	mov	r8, r1
   18f28:	mov	r9, r2
   18f2c:	bl	10cb0 <calloc@plt-0x20>
   18f30:	asrs	r6, r6, #2
   18f34:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   18f38:	mov	r4, #0
   18f3c:	add	r4, r4, #1
   18f40:	ldr	r3, [r5], #4
   18f44:	mov	r2, r9
   18f48:	mov	r1, r8
   18f4c:	mov	r0, r7
   18f50:	blx	r3
   18f54:	cmp	r6, r4
   18f58:	bne	18f3c <__assert_fail@plt+0x7ff0>
   18f5c:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   18f60:	strdeq	r0, [r1], -r0	; <UNPREDICTABLE>
   18f64:	andeq	r0, r1, r8, ror #31
   18f68:	bx	lr
   18f6c:	ldr	r3, [pc, #12]	; 18f80 <__assert_fail@plt+0x8034>
   18f70:	mov	r1, #0
   18f74:	add	r3, pc, r3
   18f78:	ldr	r2, [r3]
   18f7c:	b	10e8c <__cxa_atexit@plt>
   18f80:	andeq	r1, r1, r0, ror r1

Disassembly of section .fini:

00018f84 <.fini>:
   18f84:	push	{r3, lr}
   18f88:	pop	{r3, pc}
