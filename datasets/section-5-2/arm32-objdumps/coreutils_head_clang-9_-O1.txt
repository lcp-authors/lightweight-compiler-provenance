
../repos/coreutils/src/head:     file format elf32-littlearm


Disassembly of section .init:

00010e44 <.init>:
   10e44:	push	{r3, lr}
   10e48:	bl	11134 <__assert_fail@plt+0x48>
   10e4c:	pop	{r3, pc}

Disassembly of section .plt:

00010e50 <calloc@plt-0x14>:
   10e50:	push	{lr}		; (str lr, [sp, #-4]!)
   10e54:	ldr	lr, [pc, #4]	; 10e60 <calloc@plt-0x4>
   10e58:	add	lr, pc, lr
   10e5c:	ldr	pc, [lr, #8]!
   10e60:	andeq	r7, r1, r0, lsr #3

00010e64 <calloc@plt>:
   10e64:	add	ip, pc, #0, 12
   10e68:	add	ip, ip, #94208	; 0x17000
   10e6c:	ldr	pc, [ip, #416]!	; 0x1a0

00010e70 <fputs_unlocked@plt>:
   10e70:	add	ip, pc, #0, 12
   10e74:	add	ip, ip, #94208	; 0x17000
   10e78:	ldr	pc, [ip, #408]!	; 0x198

00010e7c <raise@plt>:
   10e7c:	add	ip, pc, #0, 12
   10e80:	add	ip, ip, #94208	; 0x17000
   10e84:	ldr	pc, [ip, #400]!	; 0x190

00010e88 <strcmp@plt>:
   10e88:	add	ip, pc, #0, 12
   10e8c:	add	ip, ip, #94208	; 0x17000
   10e90:	ldr	pc, [ip, #392]!	; 0x188

00010e94 <read@plt>:
   10e94:	add	ip, pc, #0, 12
   10e98:	add	ip, ip, #94208	; 0x17000
   10e9c:	ldr	pc, [ip, #384]!	; 0x180

00010ea0 <fflush@plt>:
   10ea0:	add	ip, pc, #0, 12
   10ea4:	add	ip, ip, #94208	; 0x17000
   10ea8:	ldr	pc, [ip, #376]!	; 0x178

00010eac <free@plt>:
   10eac:	add	ip, pc, #0, 12
   10eb0:	add	ip, ip, #94208	; 0x17000
   10eb4:	ldr	pc, [ip, #368]!	; 0x170

00010eb8 <_exit@plt>:
   10eb8:	add	ip, pc, #0, 12
   10ebc:	add	ip, ip, #94208	; 0x17000
   10ec0:	ldr	pc, [ip, #360]!	; 0x168

00010ec4 <memcpy@plt>:
   10ec4:	add	ip, pc, #0, 12
   10ec8:	add	ip, ip, #94208	; 0x17000
   10ecc:	ldr	pc, [ip, #352]!	; 0x160

00010ed0 <mbsinit@plt>:
   10ed0:	add	ip, pc, #0, 12
   10ed4:	add	ip, ip, #94208	; 0x17000
   10ed8:	ldr	pc, [ip, #344]!	; 0x158

00010edc <fwrite_unlocked@plt>:
   10edc:	add	ip, pc, #0, 12
   10ee0:	add	ip, ip, #94208	; 0x17000
   10ee4:	ldr	pc, [ip, #336]!	; 0x150

00010ee8 <dcgettext@plt>:
   10ee8:	add	ip, pc, #0, 12
   10eec:	add	ip, ip, #94208	; 0x17000
   10ef0:	ldr	pc, [ip, #328]!	; 0x148

00010ef4 <realloc@plt>:
   10ef4:	add	ip, pc, #0, 12
   10ef8:	add	ip, ip, #94208	; 0x17000
   10efc:	ldr	pc, [ip, #320]!	; 0x140

00010f00 <textdomain@plt>:
   10f00:	add	ip, pc, #0, 12
   10f04:	add	ip, ip, #94208	; 0x17000
   10f08:	ldr	pc, [ip, #312]!	; 0x138

00010f0c <rawmemchr@plt>:
   10f0c:	add	ip, pc, #0, 12
   10f10:	add	ip, ip, #94208	; 0x17000
   10f14:	ldr	pc, [ip, #304]!	; 0x130

00010f18 <iswprint@plt>:
   10f18:	add	ip, pc, #0, 12
   10f1c:	add	ip, ip, #94208	; 0x17000
   10f20:	ldr	pc, [ip, #296]!	; 0x128

00010f24 <__fxstat64@plt>:
   10f24:	add	ip, pc, #0, 12
   10f28:	add	ip, ip, #94208	; 0x17000
   10f2c:	ldr	pc, [ip, #288]!	; 0x120

00010f30 <fwrite@plt>:
   10f30:	add	ip, pc, #0, 12
   10f34:	add	ip, ip, #94208	; 0x17000
   10f38:	ldr	pc, [ip, #280]!	; 0x118

00010f3c <lseek64@plt>:
   10f3c:	add	ip, pc, #0, 12
   10f40:	add	ip, ip, #94208	; 0x17000
   10f44:	ldr	pc, [ip, #272]!	; 0x110

00010f48 <__ctype_get_mb_cur_max@plt>:
   10f48:	add	ip, pc, #0, 12
   10f4c:	add	ip, ip, #94208	; 0x17000
   10f50:	ldr	pc, [ip, #264]!	; 0x108

00010f54 <__fpending@plt>:
   10f54:	add	ip, pc, #0, 12
   10f58:	add	ip, ip, #94208	; 0x17000
   10f5c:	ldr	pc, [ip, #256]!	; 0x100

00010f60 <ferror_unlocked@plt>:
   10f60:	add	ip, pc, #0, 12
   10f64:	add	ip, ip, #94208	; 0x17000
   10f68:	ldr	pc, [ip, #248]!	; 0xf8

00010f6c <mbrtowc@plt>:
   10f6c:	add	ip, pc, #0, 12
   10f70:	add	ip, ip, #94208	; 0x17000
   10f74:	ldr	pc, [ip, #240]!	; 0xf0

00010f78 <error@plt>:
   10f78:	add	ip, pc, #0, 12
   10f7c:	add	ip, ip, #94208	; 0x17000
   10f80:	ldr	pc, [ip, #232]!	; 0xe8

00010f84 <open64@plt>:
   10f84:	add	ip, pc, #0, 12
   10f88:	add	ip, ip, #94208	; 0x17000
   10f8c:	ldr	pc, [ip, #224]!	; 0xe0

00010f90 <malloc@plt>:
   10f90:	add	ip, pc, #0, 12
   10f94:	add	ip, ip, #94208	; 0x17000
   10f98:	ldr	pc, [ip, #216]!	; 0xd8

00010f9c <__libc_start_main@plt>:
   10f9c:	add	ip, pc, #0, 12
   10fa0:	add	ip, ip, #94208	; 0x17000
   10fa4:	ldr	pc, [ip, #208]!	; 0xd0

00010fa8 <__freading@plt>:
   10fa8:	add	ip, pc, #0, 12
   10fac:	add	ip, ip, #94208	; 0x17000
   10fb0:	ldr	pc, [ip, #200]!	; 0xc8

00010fb4 <__gmon_start__@plt>:
   10fb4:	add	ip, pc, #0, 12
   10fb8:	add	ip, ip, #94208	; 0x17000
   10fbc:	ldr	pc, [ip, #192]!	; 0xc0

00010fc0 <getopt_long@plt>:
   10fc0:	add	ip, pc, #0, 12
   10fc4:	add	ip, ip, #94208	; 0x17000
   10fc8:	ldr	pc, [ip, #184]!	; 0xb8

00010fcc <__ctype_b_loc@plt>:
   10fcc:	add	ip, pc, #0, 12
   10fd0:	add	ip, ip, #94208	; 0x17000
   10fd4:	ldr	pc, [ip, #176]!	; 0xb0

00010fd8 <exit@plt>:
   10fd8:	add	ip, pc, #0, 12
   10fdc:	add	ip, ip, #94208	; 0x17000
   10fe0:	ldr	pc, [ip, #168]!	; 0xa8

00010fe4 <bcmp@plt>:
   10fe4:	add	ip, pc, #0, 12
   10fe8:	add	ip, ip, #94208	; 0x17000
   10fec:	ldr	pc, [ip, #160]!	; 0xa0

00010ff0 <strlen@plt>:
   10ff0:	add	ip, pc, #0, 12
   10ff4:	add	ip, ip, #94208	; 0x17000
   10ff8:	ldr	pc, [ip, #152]!	; 0x98

00010ffc <strchr@plt>:
   10ffc:	add	ip, pc, #0, 12
   11000:	add	ip, ip, #94208	; 0x17000
   11004:	ldr	pc, [ip, #144]!	; 0x90

00011008 <memrchr@plt>:
   11008:	add	ip, pc, #0, 12
   1100c:	add	ip, ip, #94208	; 0x17000
   11010:	ldr	pc, [ip, #136]!	; 0x88

00011014 <__errno_location@plt>:
   11014:	add	ip, pc, #0, 12
   11018:	add	ip, ip, #94208	; 0x17000
   1101c:	ldr	pc, [ip, #128]!	; 0x80

00011020 <__cxa_atexit@plt>:
   11020:	add	ip, pc, #0, 12
   11024:	add	ip, ip, #94208	; 0x17000
   11028:	ldr	pc, [ip, #120]!	; 0x78

0001102c <memset@plt>:
   1102c:	add	ip, pc, #0, 12
   11030:	add	ip, ip, #94208	; 0x17000
   11034:	ldr	pc, [ip, #112]!	; 0x70

00011038 <__printf_chk@plt>:
   11038:	add	ip, pc, #0, 12
   1103c:	add	ip, ip, #94208	; 0x17000
   11040:	ldr	pc, [ip, #104]!	; 0x68

00011044 <fileno@plt>:
   11044:	add	ip, pc, #0, 12
   11048:	add	ip, ip, #94208	; 0x17000
   1104c:	ldr	pc, [ip, #96]!	; 0x60

00011050 <strtoumax@plt>:
   11050:	add	ip, pc, #0, 12
   11054:	add	ip, ip, #94208	; 0x17000
   11058:	ldr	pc, [ip, #88]!	; 0x58

0001105c <__fprintf_chk@plt>:
   1105c:	add	ip, pc, #0, 12
   11060:	add	ip, ip, #94208	; 0x17000
   11064:	ldr	pc, [ip, #80]!	; 0x50

00011068 <memchr@plt>:
   11068:	add	ip, pc, #0, 12
   1106c:	add	ip, ip, #94208	; 0x17000
   11070:	ldr	pc, [ip, #72]!	; 0x48

00011074 <fclose@plt>:
   11074:	add	ip, pc, #0, 12
   11078:	add	ip, ip, #94208	; 0x17000
   1107c:	ldr	pc, [ip, #64]!	; 0x40

00011080 <fseeko64@plt>:
   11080:	add	ip, pc, #0, 12
   11084:	add	ip, ip, #94208	; 0x17000
   11088:	ldr	pc, [ip, #56]!	; 0x38

0001108c <setlocale@plt>:
   1108c:	add	ip, pc, #0, 12
   11090:	add	ip, ip, #94208	; 0x17000
   11094:	ldr	pc, [ip, #48]!	; 0x30

00011098 <strrchr@plt>:
   11098:	add	ip, pc, #0, 12
   1109c:	add	ip, ip, #94208	; 0x17000
   110a0:	ldr	pc, [ip, #40]!	; 0x28

000110a4 <nl_langinfo@plt>:
   110a4:	add	ip, pc, #0, 12
   110a8:	add	ip, ip, #94208	; 0x17000
   110ac:	ldr	pc, [ip, #32]!

000110b0 <clearerr_unlocked@plt>:
   110b0:	add	ip, pc, #0, 12
   110b4:	add	ip, ip, #94208	; 0x17000
   110b8:	ldr	pc, [ip, #24]!

000110bc <bindtextdomain@plt>:
   110bc:	add	ip, pc, #0, 12
   110c0:	add	ip, ip, #94208	; 0x17000
   110c4:	ldr	pc, [ip, #16]!

000110c8 <strncmp@plt>:
   110c8:	add	ip, pc, #0, 12
   110cc:	add	ip, ip, #94208	; 0x17000
   110d0:	ldr	pc, [ip, #8]!

000110d4 <abort@plt>:
   110d4:	add	ip, pc, #0, 12
   110d8:	add	ip, ip, #94208	; 0x17000
   110dc:	ldr	pc, [ip, #0]!

000110e0 <close@plt>:
   110e0:	add	ip, pc, #0, 12
   110e4:	add	ip, ip, #90112	; 0x16000
   110e8:	ldr	pc, [ip, #4088]!	; 0xff8

000110ec <__assert_fail@plt>:
   110ec:	add	ip, pc, #0, 12
   110f0:	add	ip, ip, #90112	; 0x16000
   110f4:	ldr	pc, [ip, #4080]!	; 0xff0

Disassembly of section .text:

000110f8 <.text>:
   110f8:	mov	fp, #0
   110fc:	mov	lr, #0
   11100:	pop	{r1}		; (ldr r1, [sp], #4)
   11104:	mov	r2, sp
   11108:	push	{r2}		; (str r2, [sp, #-4]!)
   1110c:	push	{r0}		; (str r0, [sp, #-4]!)
   11110:	ldr	ip, [pc, #16]	; 11128 <__assert_fail@plt+0x3c>
   11114:	push	{ip}		; (str ip, [sp, #-4]!)
   11118:	ldr	r0, [pc, #12]	; 1112c <__assert_fail@plt+0x40>
   1111c:	ldr	r3, [pc, #12]	; 11130 <__assert_fail@plt+0x44>
   11120:	bl	10f9c <__libc_start_main@plt>
   11124:	bl	110d4 <abort@plt>
   11128:	andeq	r6, r1, r8, lsr fp
   1112c:	andeq	r1, r1, r4, asr #10
   11130:	ldrdeq	r6, [r1], -r8
   11134:	ldr	r3, [pc, #20]	; 11150 <__assert_fail@plt+0x64>
   11138:	ldr	r2, [pc, #20]	; 11154 <__assert_fail@plt+0x68>
   1113c:	add	r3, pc, r3
   11140:	ldr	r2, [r3, r2]
   11144:	cmp	r2, #0
   11148:	bxeq	lr
   1114c:	b	10fb4 <__gmon_start__@plt>
   11150:			; <UNDEFINED> instruction: 0x00016ebc
   11154:	andeq	r0, r0, r8, ror #1
   11158:	ldr	r0, [pc, #24]	; 11178 <__assert_fail@plt+0x8c>
   1115c:	ldr	r3, [pc, #24]	; 1117c <__assert_fail@plt+0x90>
   11160:	cmp	r3, r0
   11164:	bxeq	lr
   11168:	ldr	r3, [pc, #16]	; 11180 <__assert_fail@plt+0x94>
   1116c:	cmp	r3, #0
   11170:	bxeq	lr
   11174:	bx	r3
   11178:	andeq	r8, r2, r0, asr #2
   1117c:	andeq	r8, r2, r0, asr #2
   11180:	andeq	r0, r0, r0
   11184:	ldr	r0, [pc, #36]	; 111b0 <__assert_fail@plt+0xc4>
   11188:	ldr	r1, [pc, #36]	; 111b4 <__assert_fail@plt+0xc8>
   1118c:	sub	r1, r1, r0
   11190:	asr	r1, r1, #2
   11194:	add	r1, r1, r1, lsr #31
   11198:	asrs	r1, r1, #1
   1119c:	bxeq	lr
   111a0:	ldr	r3, [pc, #16]	; 111b8 <__assert_fail@plt+0xcc>
   111a4:	cmp	r3, #0
   111a8:	bxeq	lr
   111ac:	bx	r3
   111b0:	andeq	r8, r2, r0, asr #2
   111b4:	andeq	r8, r2, r0, asr #2
   111b8:	andeq	r0, r0, r0
   111bc:	push	{r4, lr}
   111c0:	ldr	r4, [pc, #24]	; 111e0 <__assert_fail@plt+0xf4>
   111c4:	ldrb	r3, [r4]
   111c8:	cmp	r3, #0
   111cc:	popne	{r4, pc}
   111d0:	bl	11158 <__assert_fail@plt+0x6c>
   111d4:	mov	r3, #1
   111d8:	strb	r3, [r4]
   111dc:	pop	{r4, pc}
   111e0:	andeq	r8, r2, ip, asr r1
   111e4:	b	11184 <__assert_fail@plt+0x98>
   111e8:	push	{fp, lr}
   111ec:	mov	fp, sp
   111f0:	mov	r4, r0
   111f4:	cmp	r0, #0
   111f8:	bne	11318 <__assert_fail@plt+0x22c>
   111fc:	movw	r1, #27547	; 0x6b9b
   11200:	movt	r1, #1
   11204:	mov	r0, #0
   11208:	mov	r2, #5
   1120c:	bl	10ee8 <dcgettext@plt>
   11210:	mov	r1, r0
   11214:	movw	r0, #33132	; 0x816c
   11218:	movt	r0, #2
   1121c:	ldr	r2, [r0]
   11220:	mov	r0, #1
   11224:	bl	11038 <__printf_chk@plt>
   11228:	movw	r1, #27580	; 0x6bbc
   1122c:	movt	r1, #1
   11230:	mov	r0, #0
   11234:	mov	r2, #5
   11238:	bl	10ee8 <dcgettext@plt>
   1123c:	mov	r1, r0
   11240:	mov	r0, #1
   11244:	mov	r2, #10
   11248:	bl	11038 <__printf_chk@plt>
   1124c:	bl	1135c <__assert_fail@plt+0x270>
   11250:	bl	1138c <__assert_fail@plt+0x2a0>
   11254:	movw	r1, #27713	; 0x6c41
   11258:	movt	r1, #1
   1125c:	mov	r0, #0
   11260:	mov	r2, #5
   11264:	bl	10ee8 <dcgettext@plt>
   11268:	mov	r1, r0
   1126c:	mov	r0, #1
   11270:	mov	r2, #10
   11274:	bl	11038 <__printf_chk@plt>
   11278:	movw	r1, #28111	; 0x6dcf
   1127c:	movt	r1, #1
   11280:	mov	r0, #0
   11284:	mov	r2, #5
   11288:	bl	10ee8 <dcgettext@plt>
   1128c:	movw	r5, #33108	; 0x8154
   11290:	movt	r5, #2
   11294:	ldr	r1, [r5]
   11298:	bl	10e70 <fputs_unlocked@plt>
   1129c:	movw	r1, #28243	; 0x6e53
   112a0:	movt	r1, #1
   112a4:	mov	r0, #0
   112a8:	mov	r2, #5
   112ac:	bl	10ee8 <dcgettext@plt>
   112b0:	ldr	r1, [r5]
   112b4:	bl	10e70 <fputs_unlocked@plt>
   112b8:	movw	r1, #28306	; 0x6e92
   112bc:	movt	r1, #1
   112c0:	mov	r0, #0
   112c4:	mov	r2, #5
   112c8:	bl	10ee8 <dcgettext@plt>
   112cc:	ldr	r1, [r5]
   112d0:	bl	10e70 <fputs_unlocked@plt>
   112d4:	movw	r1, #28351	; 0x6ebf
   112d8:	movt	r1, #1
   112dc:	mov	r0, #0
   112e0:	mov	r2, #5
   112e4:	bl	10ee8 <dcgettext@plt>
   112e8:	ldr	r1, [r5]
   112ec:	bl	10e70 <fputs_unlocked@plt>
   112f0:	movw	r1, #28405	; 0x6ef5
   112f4:	movt	r1, #1
   112f8:	mov	r0, #0
   112fc:	mov	r2, #5
   11300:	bl	10ee8 <dcgettext@plt>
   11304:	ldr	r1, [r5]
   11308:	bl	10e70 <fputs_unlocked@plt>
   1130c:	bl	113bc <__assert_fail@plt+0x2d0>
   11310:	mov	r0, r4
   11314:	bl	10fd8 <exit@plt>
   11318:	movw	r0, #33104	; 0x8150
   1131c:	movt	r0, #2
   11320:	ldr	r5, [r0]
   11324:	movw	r1, #27508	; 0x6b74
   11328:	movt	r1, #1
   1132c:	mov	r0, #0
   11330:	mov	r2, #5
   11334:	bl	10ee8 <dcgettext@plt>
   11338:	mov	r2, r0
   1133c:	movw	r0, #33132	; 0x816c
   11340:	movt	r0, #2
   11344:	ldr	r3, [r0]
   11348:	mov	r0, r5
   1134c:	mov	r1, #1
   11350:	bl	1105c <__fprintf_chk@plt>
   11354:	mov	r0, r4
   11358:	bl	10fd8 <exit@plt>
   1135c:	push	{fp, lr}
   11360:	mov	fp, sp
   11364:	movw	r1, #28768	; 0x7060
   11368:	movt	r1, #1
   1136c:	mov	r0, #0
   11370:	mov	r2, #5
   11374:	bl	10ee8 <dcgettext@plt>
   11378:	movw	r1, #33108	; 0x8154
   1137c:	movt	r1, #2
   11380:	ldr	r1, [r1]
   11384:	pop	{fp, lr}
   11388:	b	10e70 <fputs_unlocked@plt>
   1138c:	push	{fp, lr}
   11390:	mov	fp, sp
   11394:	movw	r1, #28824	; 0x7098
   11398:	movt	r1, #1
   1139c:	mov	r0, #0
   113a0:	mov	r2, #5
   113a4:	bl	10ee8 <dcgettext@plt>
   113a8:	movw	r1, #33108	; 0x8154
   113ac:	movt	r1, #2
   113b0:	ldr	r1, [r1]
   113b4:	pop	{fp, lr}
   113b8:	b	10e70 <fputs_unlocked@plt>
   113bc:	push	{r4, r5, r6, sl, fp, lr}
   113c0:	add	fp, sp, #16
   113c4:	sub	sp, sp, #56	; 0x38
   113c8:	movw	r0, #29760	; 0x7440
   113cc:	movt	r0, #1
   113d0:	add	r1, r0, #32
   113d4:	mov	r2, #48	; 0x30
   113d8:	vld1.64	{d16-d17}, [r1]
   113dc:	mov	r6, sp
   113e0:	add	r1, r6, #32
   113e4:	add	r3, r0, #16
   113e8:	vld1.64	{d18-d19}, [r0], r2
   113ec:	vld1.64	{d20-d21}, [r3]
   113f0:	vldr	d22, [r0]
   113f4:	vst1.64	{d16-d17}, [r1]
   113f8:	add	r0, r6, #16
   113fc:	vst1.64	{d20-d21}, [r0]
   11400:	mov	r0, r6
   11404:	vst1.64	{d18-d19}, [r0], r2
   11408:	vstr	d22, [r0]
   1140c:	ldr	r1, [sp]
   11410:	cmp	r1, #0
   11414:	movw	r4, #28617	; 0x6fc9
   11418:	movt	r4, #1
   1141c:	beq	11444 <__assert_fail@plt+0x358>
   11420:	mov	r6, sp
   11424:	movw	r5, #28617	; 0x6fc9
   11428:	movt	r5, #1
   1142c:	mov	r0, r5
   11430:	bl	10e88 <strcmp@plt>
   11434:	cmp	r0, #0
   11438:	ldrne	r1, [r6, #8]!
   1143c:	cmpne	r1, #0
   11440:	bne	1142c <__assert_fail@plt+0x340>
   11444:	ldr	r5, [r6, #4]
   11448:	movw	r1, #28994	; 0x7142
   1144c:	movt	r1, #1
   11450:	mov	r0, #0
   11454:	mov	r2, #5
   11458:	bl	10ee8 <dcgettext@plt>
   1145c:	mov	r1, r0
   11460:	movw	r2, #28694	; 0x7016
   11464:	movt	r2, #1
   11468:	movw	r3, #29017	; 0x7159
   1146c:	movt	r3, #1
   11470:	mov	r0, #1
   11474:	bl	11038 <__printf_chk@plt>
   11478:	cmp	r5, #0
   1147c:	moveq	r5, r4
   11480:	mov	r0, #5
   11484:	mov	r1, #0
   11488:	bl	1108c <setlocale@plt>
   1148c:	cmp	r0, #0
   11490:	beq	114d0 <__assert_fail@plt+0x3e4>
   11494:	movw	r1, #29057	; 0x7181
   11498:	movt	r1, #1
   1149c:	mov	r2, #3
   114a0:	bl	110c8 <strncmp@plt>
   114a4:	cmp	r0, #0
   114a8:	beq	114d0 <__assert_fail@plt+0x3e4>
   114ac:	movw	r1, #29061	; 0x7185
   114b0:	movt	r1, #1
   114b4:	mov	r0, #0
   114b8:	mov	r2, #5
   114bc:	bl	10ee8 <dcgettext@plt>
   114c0:	movw	r1, #33108	; 0x8154
   114c4:	movt	r1, #2
   114c8:	ldr	r1, [r1]
   114cc:	bl	10e70 <fputs_unlocked@plt>
   114d0:	movw	r1, #29132	; 0x71cc
   114d4:	movt	r1, #1
   114d8:	mov	r0, #0
   114dc:	mov	r2, #5
   114e0:	bl	10ee8 <dcgettext@plt>
   114e4:	mov	r1, r0
   114e8:	movw	r2, #29017	; 0x7159
   114ec:	movt	r2, #1
   114f0:	mov	r0, #1
   114f4:	mov	r3, r4
   114f8:	bl	11038 <__printf_chk@plt>
   114fc:	movw	r0, #28927	; 0x70ff
   11500:	movt	r0, #1
   11504:	movw	r6, #29209	; 0x7219
   11508:	movt	r6, #1
   1150c:	cmp	r5, r4
   11510:	moveq	r6, r0
   11514:	movw	r1, #29159	; 0x71e7
   11518:	movt	r1, #1
   1151c:	mov	r0, #0
   11520:	mov	r2, #5
   11524:	bl	10ee8 <dcgettext@plt>
   11528:	mov	r1, r0
   1152c:	mov	r0, #1
   11530:	mov	r2, r5
   11534:	mov	r3, r6
   11538:	sub	sp, fp, #16
   1153c:	pop	{r4, r5, r6, sl, fp, lr}
   11540:	b	11038 <__printf_chk@plt>
   11544:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   11548:	add	fp, sp, #28
   1154c:	sub	sp, sp, #52	; 0x34
   11550:	mov	r4, r1
   11554:	mov	r6, r0
   11558:	ldr	r0, [r1]
   1155c:	bl	134a4 <__assert_fail@plt+0x23b8>
   11560:	movw	r1, #29209	; 0x7219
   11564:	movt	r1, #1
   11568:	mov	r0, #6
   1156c:	bl	1108c <setlocale@plt>
   11570:	movw	r5, #28698	; 0x701a
   11574:	movt	r5, #1
   11578:	movw	r1, #28622	; 0x6fce
   1157c:	movt	r1, #1
   11580:	mov	r0, r5
   11584:	bl	110bc <bindtextdomain@plt>
   11588:	mov	r0, r5
   1158c:	bl	10f00 <textdomain@plt>
   11590:	movw	r0, #12800	; 0x3200
   11594:	movt	r0, #1
   11598:	bl	16b3c <__assert_fail@plt+0x5a50>
   1159c:	movw	r0, #33117	; 0x815d
   115a0:	movt	r0, #2
   115a4:	mov	r1, #0
   115a8:	strb	r1, [r0]
   115ac:	movw	r7, #33118	; 0x815e
   115b0:	movt	r7, #2
   115b4:	strb	r1, [r7]
   115b8:	movw	r0, #33119	; 0x815f
   115bc:	movt	r0, #2
   115c0:	mov	r1, #1
   115c4:	strb	r1, [r0]
   115c8:	mov	sl, #10
   115cc:	cmp	r6, #2
   115d0:	blt	11700 <__assert_fail@plt+0x614>
   115d4:	mov	r8, r4
   115d8:	ldr	r1, [r8, #4]!
   115dc:	ldrb	r0, [r1]
   115e0:	cmp	r0, #45	; 0x2d
   115e4:	bne	11700 <__assert_fail@plt+0x614>
   115e8:	ldrb	r0, [r1, #1]!
   115ec:	sub	r0, r0, #48	; 0x30
   115f0:	cmp	r0, #9
   115f4:	bhi	11700 <__assert_fail@plt+0x614>
   115f8:	str	r4, [sp, #12]
   115fc:	str	r6, [sp, #24]
   11600:	mov	r0, r1
   11604:	ldrb	r7, [r0, #1]!
   11608:	sub	r2, r7, #48	; 0x30
   1160c:	cmp	r2, #10
   11610:	bcc	11604 <__assert_fail@plt+0x518>
   11614:	mov	ip, #0
   11618:	mov	r5, #1
   1161c:	mvn	lr, #97	; 0x61
   11620:	mov	r2, #0
   11624:	str	r2, [sp, #20]
   11628:	mov	r9, r0
   1162c:	mov	r2, #0
   11630:	mov	r4, r2
   11634:	mov	sl, r5
   11638:	uxtab	r6, lr, r7
   1163c:	cmp	r6, #24
   11640:	bhi	11994 <__assert_fail@plt+0x8a8>
   11644:	add	r3, pc, #8
   11648:	mov	r5, #0
   1164c:	mov	r2, #0
   11650:	ldr	pc, [r3, r6, lsl #2]
   11654:			; <UNDEFINED> instruction: 0x000116b8
   11658:	andeq	r1, r1, r0, asr #13
   1165c:	andeq	r1, r1, ip, lsl #21
   11660:	andeq	r1, r1, ip, lsl #21
   11664:	andeq	r1, r1, ip, lsl #21
   11668:	andeq	r1, r1, ip, lsl #21
   1166c:	andeq	r1, r1, ip, lsl #21
   11670:	andeq	r1, r1, ip, lsl #21
   11674:	andeq	r1, r1, ip, lsl #21
   11678:			; <UNDEFINED> instruction: 0x000116b8
   1167c:	strdeq	r1, [r1], -r0
   11680:			; <UNDEFINED> instruction: 0x000116b8
   11684:	andeq	r1, r1, ip, lsl #21
   11688:	andeq	r1, r1, ip, lsl #21
   1168c:	andeq	r1, r1, ip, lsl #21
   11690:	ldrdeq	r1, [r1], -r8
   11694:	andeq	r1, r1, ip, lsl #21
   11698:	andeq	r1, r1, ip, lsl #21
   1169c:	andeq	r1, r1, ip, lsl #21
   116a0:	andeq	r1, r1, ip, lsl #21
   116a4:	andeq	r1, r1, r0, ror #13
   116a8:	andeq	r1, r1, ip, lsl #21
   116ac:	andeq	r1, r1, ip, lsl #21
   116b0:	andeq	r1, r1, ip, lsl #21
   116b4:	andeq	r1, r1, r8, asr #13
   116b8:	mov	r5, #0
   116bc:	mov	r2, r7
   116c0:	ldrb	r7, [r9, #1]!
   116c4:	b	11630 <__assert_fail@plt+0x544>
   116c8:	movw	r2, #33119	; 0x815f
   116cc:	movt	r2, #2
   116d0:	strb	ip, [r2]
   116d4:	b	116e8 <__assert_fail@plt+0x5fc>
   116d8:	mov	r2, #2
   116dc:	b	116e4 <__assert_fail@plt+0x5f8>
   116e0:	mov	r2, #1
   116e4:	str	r2, [sp, #20]
   116e8:	mov	r5, sl
   116ec:	b	116f4 <__assert_fail@plt+0x608>
   116f0:	mov	r5, #1
   116f4:	mov	r2, r4
   116f8:	ldrb	r7, [r9, #1]!
   116fc:	b	11630 <__assert_fail@plt+0x544>
   11700:	mov	r0, #0
   11704:	str	r0, [sp, #20]
   11708:	mov	r8, r4
   1170c:	mov	r9, #0
   11710:	mov	r0, #1
   11714:	str	r0, [sp, #16]
   11718:	movw	r5, #29600	; 0x73a0
   1171c:	movt	r5, #1
   11720:	mov	r0, #0
   11724:	str	r0, [sp, #24]
   11728:	mov	r0, #0
   1172c:	str	r0, [sp]
   11730:	mov	r0, r6
   11734:	mov	r1, r8
   11738:	movw	r2, #28676	; 0x7004
   1173c:	movt	r2, #1
   11740:	mov	r3, r5
   11744:	bl	10fc0 <getopt_long@plt>
   11748:	mov	r4, r0
   1174c:	cmp	r0, #98	; 0x62
   11750:	ble	11884 <__assert_fail@plt+0x798>
   11754:	sub	r0, r4, #99	; 0x63
   11758:	cmp	r0, #23
   1175c:	bhi	11854 <__assert_fail@plt+0x768>
   11760:	add	r1, pc, #0
   11764:	ldr	pc, [r1, r0, lsl #2]
   11768:	andeq	r1, r1, r8, asr #15
   1176c:	andeq	r1, r1, r0, asr sl
   11770:	andeq	r1, r1, r0, asr sl
   11774:	andeq	r1, r1, r0, asr sl
   11778:	andeq	r1, r1, r0, asr sl
   1177c:	andeq	r1, r1, r0, asr sl
   11780:	andeq	r1, r1, r0, asr sl
   11784:	andeq	r1, r1, r0, asr sl
   11788:	andeq	r1, r1, r0, asr sl
   1178c:	andeq	r1, r1, r0, asr sl
   11790:	andeq	r1, r1, r0, asr sl
   11794:	andeq	r1, r1, r0, lsl #16
   11798:	andeq	r1, r1, r0, asr sl
   1179c:	andeq	r1, r1, r0, asr sl
   117a0:	andeq	r1, r1, r8, asr #16
   117a4:	andeq	r1, r1, r0, asr sl
   117a8:	andeq	r1, r1, r0, asr sl
   117ac:	andeq	r1, r1, r0, asr sl
   117b0:	andeq	r1, r1, r0, asr sl
   117b4:	strdeq	r1, [r1], -r4
   117b8:	andeq	r1, r1, r0, asr sl
   117bc:	andeq	r1, r1, r0, asr sl
   117c0:	andeq	r1, r1, r0, asr sl
   117c4:	andeq	r1, r1, r0, ror r8
   117c8:	movw	r3, #33112	; 0x8158
   117cc:	movt	r3, #2
   117d0:	ldr	r2, [r3]
   117d4:	ldrb	r1, [r2]
   117d8:	subs	r1, r1, #45	; 0x2d
   117dc:	clz	r1, r1
   117e0:	lsr	r0, r1, #5
   117e4:	str	r0, [sp, #24]
   117e8:	mov	r0, #0
   117ec:	beq	11828 <__assert_fail@plt+0x73c>
   117f0:	b	11830 <__assert_fail@plt+0x744>
   117f4:	mov	r0, #1
   117f8:	str	r0, [sp, #20]
   117fc:	b	11728 <__assert_fail@plt+0x63c>
   11800:	movw	r3, #33112	; 0x8158
   11804:	movt	r3, #2
   11808:	ldr	r2, [r3]
   1180c:	ldrb	r1, [r2]
   11810:	subs	r1, r1, #45	; 0x2d
   11814:	clz	r1, r1
   11818:	lsr	r0, r1, #5
   1181c:	str	r0, [sp, #24]
   11820:	mov	r0, #1
   11824:	bne	11830 <__assert_fail@plt+0x744>
   11828:	add	r1, r2, #1
   1182c:	str	r1, [r3]
   11830:	ldr	r1, [r3]
   11834:	str	r0, [sp, #16]
   11838:	bl	11b1c <__assert_fail@plt+0xa30>
   1183c:	mov	sl, r0
   11840:	mov	r9, r1
   11844:	b	11728 <__assert_fail@plt+0x63c>
   11848:	mov	r0, #2
   1184c:	str	r0, [sp, #20]
   11850:	b	11728 <__assert_fail@plt+0x63c>
   11854:	cmp	r4, #256	; 0x100
   11858:	bne	11a50 <__assert_fail@plt+0x964>
   1185c:	mov	r0, #1
   11860:	movw	r1, #33120	; 0x8160
   11864:	movt	r1, #2
   11868:	strb	r0, [r1]
   1186c:	b	11728 <__assert_fail@plt+0x63c>
   11870:	mov	r0, #0
   11874:	movw	r1, #33119	; 0x815f
   11878:	movt	r1, #2
   1187c:	strb	r0, [r1]
   11880:	b	11728 <__assert_fail@plt+0x63c>
   11884:	cmn	r4, #1
   11888:	bne	119e4 <__assert_fail@plt+0x8f8>
   1188c:	ldr	r1, [sp, #20]
   11890:	cmp	r1, #1
   11894:	movw	r0, #33096	; 0x8148
   11898:	movt	r0, #2
   1189c:	beq	118b8 <__assert_fail@plt+0x7cc>
   118a0:	cmp	r1, #0
   118a4:	bne	118c0 <__assert_fail@plt+0x7d4>
   118a8:	ldr	r1, [r0]
   118ac:	sub	r2, r6, #1
   118b0:	cmp	r1, r2
   118b4:	bge	118c0 <__assert_fail@plt+0x7d4>
   118b8:	mov	r1, #1
   118bc:	strb	r1, [r7]
   118c0:	mov	r7, r6
   118c4:	mov	r4, #0
   118c8:	cmn	r9, #1
   118cc:	mov	r1, #0
   118d0:	movwgt	r1, #1
   118d4:	ldr	r2, [sp, #24]
   118d8:	mvn	r2, r2
   118dc:	orr	r1, r1, r2
   118e0:	tst	r1, #1
   118e4:	bne	118f8 <__assert_fail@plt+0x80c>
   118e8:	ldr	r1, [sp, #16]
   118ec:	eor	r1, r1, #1
   118f0:	tst	r1, #1
   118f4:	bne	11abc <__assert_fail@plt+0x9d0>
   118f8:	ldr	r6, [r0]
   118fc:	mov	r5, #1
   11900:	mov	r0, #1
   11904:	mov	r1, #0
   11908:	bl	159e0 <__assert_fail@plt+0x48f4>
   1190c:	movw	r1, #29592	; 0x7398
   11910:	movt	r1, #1
   11914:	cmp	r6, r7
   11918:	addlt	r1, r8, r6, lsl #2
   1191c:	ldr	r0, [r1]
   11920:	cmp	r0, #0
   11924:	beq	11964 <__assert_fail@plt+0x878>
   11928:	add	r4, r1, #4
   1192c:	ldr	r1, [sp, #24]
   11930:	and	r6, r1, #1
   11934:	ldr	r1, [sp, #16]
   11938:	and	r7, r1, #1
   1193c:	str	r7, [sp]
   11940:	str	r6, [sp, #4]
   11944:	mov	r2, sl
   11948:	mov	r3, r9
   1194c:	bl	11b8c <__assert_fail@plt+0xaa0>
   11950:	and	r5, r5, r0
   11954:	ldr	r0, [r4], #4
   11958:	cmp	r0, #0
   1195c:	bne	1193c <__assert_fail@plt+0x850>
   11960:	eor	r4, r5, #1
   11964:	movw	r0, #33117	; 0x815d
   11968:	movt	r0, #2
   1196c:	ldrb	r0, [r0]
   11970:	cmp	r0, #1
   11974:	bne	11988 <__assert_fail@plt+0x89c>
   11978:	mov	r0, #0
   1197c:	bl	110e0 <close@plt>
   11980:	cmn	r0, #1
   11984:	ble	11b04 <__assert_fail@plt+0xa18>
   11988:	mov	r0, r4
   1198c:	sub	sp, fp, #28
   11990:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   11994:	uxtb	r2, r7
   11998:	cmp	r2, #0
   1199c:	bne	11a8c <__assert_fail@plt+0x9a0>
   119a0:	strb	r4, [r0]
   119a4:	tst	r4, #255	; 0xff
   119a8:	movne	r2, #0
   119ac:	strbne	r2, [r0, #1]
   119b0:	and	r0, sl, #1
   119b4:	str	r0, [sp, #16]
   119b8:	bl	11b1c <__assert_fail@plt+0xa30>
   119bc:	mov	sl, r0
   119c0:	mov	r9, r1
   119c4:	ldr	r1, [sp, #12]
   119c8:	ldr	r0, [r1]
   119cc:	str	r0, [r1, #4]
   119d0:	ldr	r6, [sp, #24]
   119d4:	sub	r6, r6, #1
   119d8:	movw	r7, #33118	; 0x815e
   119dc:	movt	r7, #2
   119e0:	b	11718 <__assert_fail@plt+0x62c>
   119e4:	cmn	r4, #3
   119e8:	bne	11a40 <__assert_fail@plt+0x954>
   119ec:	movw	r0, #33016	; 0x80f8
   119f0:	movt	r0, #2
   119f4:	ldr	r3, [r0]
   119f8:	movw	r0, #33108	; 0x8154
   119fc:	movt	r0, #2
   11a00:	ldr	r0, [r0]
   11a04:	mov	r1, #0
   11a08:	movw	r2, #28724	; 0x7034
   11a0c:	movt	r2, #1
   11a10:	movw	r7, #28708	; 0x7024
   11a14:	movt	r7, #1
   11a18:	str	r7, [sp]
   11a1c:	str	r2, [sp, #4]
   11a20:	str	r1, [sp, #8]
   11a24:	movw	r1, #28617	; 0x6fc9
   11a28:	movt	r1, #1
   11a2c:	movw	r2, #28694	; 0x7016
   11a30:	movt	r2, #1
   11a34:	bl	15508 <__assert_fail@plt+0x441c>
   11a38:	mov	r0, #0
   11a3c:	bl	10fd8 <exit@plt>
   11a40:	cmn	r4, #2
   11a44:	bne	11a50 <__assert_fail@plt+0x964>
   11a48:	mov	r0, #0
   11a4c:	bl	111e8 <__assert_fail@plt+0xfc>
   11a50:	sub	r0, r4, #48	; 0x30
   11a54:	cmp	r0, #9
   11a58:	bhi	11a84 <__assert_fail@plt+0x998>
   11a5c:	movw	r1, #28646	; 0x6fe6
   11a60:	movt	r1, #1
   11a64:	mov	r0, #0
   11a68:	mov	r2, #5
   11a6c:	bl	10ee8 <dcgettext@plt>
   11a70:	mov	r2, r0
   11a74:	mov	r0, #0
   11a78:	mov	r1, #0
   11a7c:	mov	r3, r4
   11a80:	bl	10f78 <error@plt>
   11a84:	mov	r0, #1
   11a88:	bl	111e8 <__assert_fail@plt+0xfc>
   11a8c:	movw	r1, #28646	; 0x6fe6
   11a90:	movt	r1, #1
   11a94:	mov	r0, #0
   11a98:	mov	r2, #5
   11a9c:	bl	10ee8 <dcgettext@plt>
   11aa0:	mov	r2, r0
   11aa4:	ldrb	r3, [r9]
   11aa8:	mov	r0, #0
   11aac:	mov	r1, #0
   11ab0:	bl	10f78 <error@plt>
   11ab4:	mov	r0, #1
   11ab8:	bl	111e8 <__assert_fail@plt+0xfc>
   11abc:	movw	r1, #28744	; 0x7048
   11ac0:	movt	r1, #1
   11ac4:	mov	r0, #0
   11ac8:	mov	r2, #5
   11acc:	bl	10ee8 <dcgettext@plt>
   11ad0:	mov	r4, r0
   11ad4:	add	r2, sp, #31
   11ad8:	mov	r0, sl
   11adc:	mov	r1, r9
   11ae0:	bl	13448 <__assert_fail@plt+0x235c>
   11ae4:	bl	14c98 <__assert_fail@plt+0x3bac>
   11ae8:	str	r0, [sp]
   11aec:	movw	r2, #28737	; 0x7041
   11af0:	movt	r2, #1
   11af4:	mov	r0, #1
   11af8:	mov	r1, #75	; 0x4b
   11afc:	mov	r3, r4
   11b00:	bl	10f78 <error@plt>
   11b04:	bl	11014 <__errno_location@plt>
   11b08:	ldr	r1, [r0]
   11b0c:	movw	r2, #29909	; 0x74d5
   11b10:	movt	r2, #1
   11b14:	mov	r0, #1
   11b18:	bl	10f78 <error@plt>
   11b1c:	push	{r4, r5, fp, lr}
   11b20:	add	fp, sp, #8
   11b24:	sub	sp, sp, #24
   11b28:	mov	r4, r1
   11b2c:	movw	r2, #29223	; 0x7227
   11b30:	movt	r2, #1
   11b34:	movw	r1, #28744	; 0x7048
   11b38:	movt	r1, #1
   11b3c:	cmp	r0, #0
   11b40:	movne	r1, r2
   11b44:	mov	r5, #0
   11b48:	mov	r0, #0
   11b4c:	mov	r2, #5
   11b50:	bl	10ee8 <dcgettext@plt>
   11b54:	movw	r1, #29210	; 0x721a
   11b58:	movt	r1, #1
   11b5c:	mvn	r2, #0
   11b60:	str	r2, [sp]
   11b64:	str	r2, [sp, #4]
   11b68:	str	r1, [sp, #8]
   11b6c:	str	r0, [sp, #12]
   11b70:	str	r5, [sp, #16]
   11b74:	mov	r0, r4
   11b78:	mov	r2, #0
   11b7c:	mov	r3, #0
   11b80:	bl	15ad4 <__assert_fail@plt+0x49e8>
   11b84:	sub	sp, fp, #8
   11b88:	pop	{r4, r5, fp, pc}
   11b8c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   11b90:	add	fp, sp, #28
   11b94:	sub	sp, sp, #12
   11b98:	mov	r6, r3
   11b9c:	mov	r7, r2
   11ba0:	mov	r4, r0
   11ba4:	movw	r1, #29909	; 0x74d5
   11ba8:	movt	r1, #1
   11bac:	bl	10e88 <strcmp@plt>
   11bb0:	ldr	r9, [fp, #12]
   11bb4:	ldr	sl, [fp, #8]
   11bb8:	cmp	r0, #0
   11bbc:	beq	11c24 <__assert_fail@plt+0xb38>
   11bc0:	mov	r8, #0
   11bc4:	mov	r0, r4
   11bc8:	mov	r1, #0
   11bcc:	bl	10f84 <open64@plt>
   11bd0:	cmn	r0, #1
   11bd4:	ble	11c7c <__assert_fail@plt+0xb90>
   11bd8:	mov	r5, r0
   11bdc:	str	sl, [sp]
   11be0:	str	r9, [sp, #4]
   11be4:	mov	r0, r4
   11be8:	mov	r1, r5
   11bec:	mov	r2, r7
   11bf0:	mov	r3, r6
   11bf4:	bl	11cc8 <__assert_fail@plt+0xbdc>
   11bf8:	mov	r8, r0
   11bfc:	mov	r0, r5
   11c00:	bl	110e0 <close@plt>
   11c04:	cmp	r0, #0
   11c08:	beq	11cbc <__assert_fail@plt+0xbd0>
   11c0c:	bl	11014 <__errno_location@plt>
   11c10:	ldr	r5, [r0]
   11c14:	mov	r8, #0
   11c18:	movw	r1, #29359	; 0x72af
   11c1c:	movt	r1, #1
   11c20:	b	11c8c <__assert_fail@plt+0xba0>
   11c24:	movw	r0, #33117	; 0x815d
   11c28:	movt	r0, #2
   11c2c:	mov	r1, #1
   11c30:	strb	r1, [r0]
   11c34:	movw	r1, #29317	; 0x7285
   11c38:	movt	r1, #1
   11c3c:	mov	r0, #0
   11c40:	mov	r2, #5
   11c44:	bl	10ee8 <dcgettext@plt>
   11c48:	mov	r4, r0
   11c4c:	mov	r0, #0
   11c50:	mov	r1, #0
   11c54:	bl	159e0 <__assert_fail@plt+0x48f4>
   11c58:	str	sl, [sp]
   11c5c:	str	r9, [sp, #4]
   11c60:	mov	r0, r4
   11c64:	mov	r1, #0
   11c68:	mov	r2, r7
   11c6c:	mov	r3, r6
   11c70:	bl	11cc8 <__assert_fail@plt+0xbdc>
   11c74:	sub	sp, fp, #28
   11c78:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   11c7c:	bl	11014 <__errno_location@plt>
   11c80:	ldr	r5, [r0]
   11c84:	movw	r1, #29332	; 0x7294
   11c88:	movt	r1, #1
   11c8c:	mov	r0, #0
   11c90:	mov	r2, #5
   11c94:	bl	10ee8 <dcgettext@plt>
   11c98:	mov	r6, r0
   11c9c:	mov	r0, #4
   11ca0:	mov	r1, r4
   11ca4:	bl	14aa4 <__assert_fail@plt+0x39b8>
   11ca8:	mov	r3, r0
   11cac:	mov	r0, #0
   11cb0:	mov	r1, r5
   11cb4:	mov	r2, r6
   11cb8:	bl	10f78 <error@plt>
   11cbc:	mov	r0, r8
   11cc0:	sub	sp, fp, #28
   11cc4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   11cc8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   11ccc:	add	fp, sp, #28
   11cd0:	sub	sp, sp, #124	; 0x7c
   11cd4:	mov	r9, r3
   11cd8:	mov	r6, r2
   11cdc:	mov	r7, r1
   11ce0:	mov	r4, r0
   11ce4:	movw	r0, #33118	; 0x815e
   11ce8:	movt	r0, #2
   11cec:	ldrb	r0, [r0]
   11cf0:	ldr	r5, [fp, #12]
   11cf4:	ldr	sl, [fp, #8]
   11cf8:	cmp	r0, #1
   11cfc:	moveq	r0, r4
   11d00:	bleq	11e58 <__assert_fail@plt+0xd6c>
   11d04:	cmp	r5, #0
   11d08:	beq	11d6c <__assert_fail@plt+0xc80>
   11d0c:	add	r8, sp, #16
   11d10:	mov	r0, r7
   11d14:	mov	r1, r8
   11d18:	bl	16b54 <__assert_fail@plt+0x5a68>
   11d1c:	cmp	r0, #0
   11d20:	beq	11d98 <__assert_fail@plt+0xcac>
   11d24:	bl	11014 <__errno_location@plt>
   11d28:	ldr	r6, [r0]
   11d2c:	mov	r5, #0
   11d30:	movw	r1, #29378	; 0x72c2
   11d34:	movt	r1, #1
   11d38:	mov	r0, #0
   11d3c:	mov	r2, #5
   11d40:	bl	10ee8 <dcgettext@plt>
   11d44:	mov	r7, r0
   11d48:	mov	r0, #4
   11d4c:	mov	r1, r4
   11d50:	bl	14aa4 <__assert_fail@plt+0x39b8>
   11d54:	mov	r3, r0
   11d58:	mov	r0, #0
   11d5c:	mov	r1, r6
   11d60:	mov	r2, r7
   11d64:	bl	10f78 <error@plt>
   11d68:	b	11e4c <__assert_fail@plt+0xd60>
   11d6c:	mov	r0, r4
   11d70:	mov	r1, r7
   11d74:	mov	r2, r6
   11d78:	mov	r3, r9
   11d7c:	sub	sp, fp, #28
   11d80:	cmp	sl, #0
   11d84:	beq	11d90 <__assert_fail@plt+0xca4>
   11d88:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   11d8c:	b	12124 <__assert_fail@plt+0x1038>
   11d90:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   11d94:	b	122ac <__assert_fail@plt+0x11c0>
   11d98:	movw	r0, #33120	; 0x8160
   11d9c:	movt	r0, #2
   11da0:	ldrb	r0, [r0]
   11da4:	mvn	r5, #0
   11da8:	cmp	r0, #0
   11dac:	beq	11dc0 <__assert_fail@plt+0xcd4>
   11db0:	mvn	r1, #0
   11db4:	cmp	sl, #0
   11db8:	bne	11e04 <__assert_fail@plt+0xd18>
   11dbc:	b	11e28 <__assert_fail@plt+0xd3c>
   11dc0:	add	r0, sp, #16
   11dc4:	bl	11ea4 <__assert_fail@plt+0xdb8>
   11dc8:	cmp	r0, #0
   11dcc:	mvn	r1, #0
   11dd0:	beq	11dfc <__assert_fail@plt+0xd10>
   11dd4:	mov	r0, #1
   11dd8:	stm	sp, {r0, r4}
   11ddc:	mov	r5, #0
   11de0:	mov	r0, r7
   11de4:	mov	r2, #0
   11de8:	mov	r3, #0
   11dec:	bl	11ec0 <__assert_fail@plt+0xdd4>
   11df0:	cmp	r1, #0
   11df4:	bmi	11e4c <__assert_fail@plt+0xd60>
   11df8:	mov	r5, r0
   11dfc:	cmp	sl, #0
   11e00:	beq	11e28 <__assert_fail@plt+0xd3c>
   11e04:	str	r5, [sp, #8]
   11e08:	str	r1, [sp, #12]
   11e0c:	str	r8, [sp]
   11e10:	mov	r0, r4
   11e14:	mov	r1, r7
   11e18:	mov	r2, r6
   11e1c:	mov	r3, r9
   11e20:	bl	11f70 <__assert_fail@plt+0xe84>
   11e24:	b	11e48 <__assert_fail@plt+0xd5c>
   11e28:	str	r5, [sp, #8]
   11e2c:	str	r1, [sp, #12]
   11e30:	str	r8, [sp]
   11e34:	mov	r0, r4
   11e38:	mov	r1, r7
   11e3c:	mov	r2, r6
   11e40:	mov	r3, r9
   11e44:	bl	12030 <__assert_fail@plt+0xf44>
   11e48:	mov	r5, r0
   11e4c:	mov	r0, r5
   11e50:	sub	sp, fp, #28
   11e54:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   11e58:	push	{r4, r5, fp, lr}
   11e5c:	add	fp, sp, #8
   11e60:	mov	r3, r0
   11e64:	movw	r4, #33121	; 0x8161
   11e68:	movt	r4, #2
   11e6c:	ldrb	r0, [r4]
   11e70:	movw	r1, #29208	; 0x7218
   11e74:	movt	r1, #1
   11e78:	movw	r2, #29209	; 0x7219
   11e7c:	movt	r2, #1
   11e80:	cmp	r0, #0
   11e84:	movne	r2, r1
   11e88:	mov	r5, #1
   11e8c:	movw	r1, #29394	; 0x72d2
   11e90:	movt	r1, #1
   11e94:	mov	r0, #1
   11e98:	bl	11038 <__printf_chk@plt>
   11e9c:	strb	r5, [r4]
   11ea0:	pop	{r4, r5, fp, pc}
   11ea4:	ldr	r0, [r0, #16]
   11ea8:	and	r0, r0, #53248	; 0xd000
   11eac:	orr	r0, r0, #8192	; 0x2000
   11eb0:	cmp	r0, #40960	; 0xa000
   11eb4:	moveq	r0, #1
   11eb8:	movne	r0, #0
   11ebc:	bx	lr
   11ec0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   11ec4:	add	fp, sp, #28
   11ec8:	sub	sp, sp, #28
   11ecc:	mov	r6, r3
   11ed0:	mov	r7, r2
   11ed4:	ldr	r8, [fp, #8]
   11ed8:	str	r8, [sp]
   11edc:	bl	10f3c <lseek64@plt>
   11ee0:	mov	r9, r0
   11ee4:	mov	r5, r1
   11ee8:	cmn	r1, #1
   11eec:	bgt	11f60 <__assert_fail@plt+0xe74>
   11ef0:	movw	r0, #29408	; 0x72e0
   11ef4:	movt	r0, #1
   11ef8:	movw	r4, #29437	; 0x72fd
   11efc:	movt	r4, #1
   11f00:	cmp	r8, #0
   11f04:	moveq	r4, r0
   11f08:	bl	11014 <__errno_location@plt>
   11f0c:	ldr	sl, [r0]
   11f10:	mov	r0, #0
   11f14:	mov	r1, r4
   11f18:	mov	r2, #5
   11f1c:	bl	10ee8 <dcgettext@plt>
   11f20:	mov	r8, r0
   11f24:	mov	r0, #0
   11f28:	mov	r1, #3
   11f2c:	ldr	r2, [fp, #12]
   11f30:	bl	14b58 <__assert_fail@plt+0x3a6c>
   11f34:	mov	r4, r0
   11f38:	add	r2, sp, #7
   11f3c:	mov	r0, r7
   11f40:	mov	r1, r6
   11f44:	bl	13388 <__assert_fail@plt+0x229c>
   11f48:	str	r0, [sp]
   11f4c:	mov	r0, #0
   11f50:	mov	r1, sl
   11f54:	mov	r2, r8
   11f58:	mov	r3, r4
   11f5c:	bl	10f78 <error@plt>
   11f60:	mov	r0, r9
   11f64:	mov	r1, r5
   11f68:	sub	sp, fp, #28
   11f6c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   11f70:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   11f74:	add	fp, sp, #24
   11f78:	sub	sp, sp, #16
   11f7c:	ldr	ip, [fp, #20]
   11f80:	ldr	lr, [fp, #16]
   11f84:	cmp	ip, #0
   11f88:	bmi	12010 <__assert_fail@plt+0xf24>
   11f8c:	movw	r4, #33120	; 0x8160
   11f90:	movt	r4, #2
   11f94:	ldrb	r4, [r4]
   11f98:	cmp	r4, #0
   11f9c:	bne	12010 <__assert_fail@plt+0xf24>
   11fa0:	ldr	r6, [fp, #8]
   11fa4:	ldr	r8, [r6, #48]	; 0x30
   11fa8:	ldr	r9, [r6, #52]	; 0x34
   11fac:	ldr	r6, [r6, #56]	; 0x38
   11fb0:	mov	r7, #0
   11fb4:	subs	r4, r6, #536870913	; 0x20000001
   11fb8:	rscs	r4, r7, r6, asr #31
   11fbc:	mov	r4, #0
   11fc0:	movwcc	r4, #1
   11fc4:	rsbs	r5, r6, #0
   11fc8:	sbcs	r5, r7, r6, asr #31
   11fcc:	movwlt	r7, #1
   11fd0:	ands	r4, r7, r4
   11fd4:	asrne	r4, r6, #31
   11fd8:	moveq	r6, #512	; 0x200
   11fdc:	subs	r5, r6, r8
   11fe0:	sbcs	r4, r4, r9
   11fe4:	bge	12010 <__assert_fail@plt+0xf24>
   11fe8:	subs	r4, lr, r8
   11fec:	sbcs	r4, ip, r9
   11ff0:	bge	12024 <__assert_fail@plt+0xf38>
   11ff4:	str	lr, [sp]
   11ff8:	str	ip, [sp, #4]
   11ffc:	str	r8, [sp, #8]
   12000:	str	r9, [sp, #12]
   12004:	bl	128a0 <__assert_fail@plt+0x17b4>
   12008:	sub	sp, fp, #24
   1200c:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   12010:	str	lr, [sp]
   12014:	str	ip, [sp, #4]
   12018:	bl	12380 <__assert_fail@plt+0x1294>
   1201c:	sub	sp, fp, #24
   12020:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   12024:	mov	r0, #1
   12028:	sub	sp, fp, #24
   1202c:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   12030:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   12034:	add	fp, sp, #24
   12038:	sub	sp, sp, #8
   1203c:	mov	r8, r0
   12040:	ldr	lr, [fp, #20]
   12044:	ldr	ip, [fp, #16]
   12048:	cmp	lr, #0
   1204c:	bmi	12110 <__assert_fail@plt+0x1024>
   12050:	movw	r6, #33120	; 0x8160
   12054:	movt	r6, #2
   12058:	ldrb	r6, [r6]
   1205c:	cmp	r6, #0
   12060:	bne	12110 <__assert_fail@plt+0x1024>
   12064:	ldr	r5, [fp, #8]
   12068:	ldr	r6, [r5, #48]	; 0x30
   1206c:	ldr	r9, [r5, #52]	; 0x34
   12070:	ldr	r7, [r5, #56]	; 0x38
   12074:	mov	r5, #0
   12078:	subs	r0, r7, #536870913	; 0x20000001
   1207c:	rscs	r0, r5, r7, asr #31
   12080:	mov	r0, #0
   12084:	movwcc	r0, #1
   12088:	rsbs	r4, r7, #0
   1208c:	sbcs	r4, r5, r7, asr #31
   12090:	mov	r4, #0
   12094:	movwlt	r4, #1
   12098:	ands	r0, r4, r0
   1209c:	asrne	r0, r7, #31
   120a0:	moveq	r7, #512	; 0x200
   120a4:	subs	r4, r7, r6
   120a8:	sbcs	r0, r0, r9
   120ac:	bge	12110 <__assert_fail@plt+0x1024>
   120b0:	subs	r7, r6, ip
   120b4:	sbc	r0, r9, lr
   120b8:	rsbs	r6, r7, #0
   120bc:	rscs	r6, r0, #0
   120c0:	movwlt	r5, #1
   120c4:	cmp	r5, #0
   120c8:	moveq	r0, r5
   120cc:	movne	r5, r7
   120d0:	mov	r6, #1
   120d4:	subs	r7, r2, r5
   120d8:	sbcs	r7, r3, r0
   120dc:	bcs	12104 <__assert_fail@plt+0x1018>
   120e0:	subs	r2, r5, r2
   120e4:	sbc	r3, r0, r3
   120e8:	mov	r0, r1
   120ec:	bl	12be4 <__assert_fail@plt+0x1af8>
   120f0:	cmp	r0, #0
   120f4:	beq	12104 <__assert_fail@plt+0x1018>
   120f8:	mov	r1, r8
   120fc:	bl	12c78 <__assert_fail@plt+0x1b8c>
   12100:	mov	r6, #0
   12104:	mov	r0, r6
   12108:	sub	sp, fp, #24
   1210c:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   12110:	stm	sp, {ip, lr}
   12114:	mov	r0, r8
   12118:	bl	12d10 <__assert_fail@plt+0x1c24>
   1211c:	sub	sp, fp, #24
   12120:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   12124:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12128:	add	fp, sp, #28
   1212c:	sub	sp, sp, #124	; 0x7c
   12130:	sub	sp, sp, #8192	; 0x2000
   12134:	mov	sl, r1
   12138:	orrs	r1, r2, r3
   1213c:	mov	r9, #1
   12140:	beq	12258 <__assert_fail@plt+0x116c>
   12144:	mov	r7, r3
   12148:	mov	r5, r2
   1214c:	str	r0, [sp, #12]
   12150:	add	r4, sp, #120	; 0x78
   12154:	movw	r8, #33119	; 0x815f
   12158:	movt	r8, #2
   1215c:	b	12174 <__assert_fail@plt+0x1088>
   12160:	mov	r0, r4
   12164:	mov	r1, r6
   12168:	bl	12b60 <__assert_fail@plt+0x1a74>
   1216c:	orrs	r0, r5, r7
   12170:	beq	12258 <__assert_fail@plt+0x116c>
   12174:	mov	r0, sl
   12178:	mov	r1, r4
   1217c:	mov	r2, #8192	; 0x2000
   12180:	bl	150b0 <__assert_fail@plt+0x3fc4>
   12184:	cmn	r0, #1
   12188:	beq	12264 <__assert_fail@plt+0x1178>
   1218c:	cmp	r0, #0
   12190:	beq	12258 <__assert_fail@plt+0x116c>
   12194:	ldrb	r1, [r8]
   12198:	cmp	r1, #0
   1219c:	movwne	r1, #10
   121a0:	mov	r6, #0
   121a4:	b	121b4 <__assert_fail@plt+0x10c8>
   121a8:	add	r6, r6, #1
   121ac:	cmp	r0, r6
   121b0:	beq	12160 <__assert_fail@plt+0x1074>
   121b4:	ldrb	r2, [r4, r6]
   121b8:	cmp	r1, r2
   121bc:	bne	121a8 <__assert_fail@plt+0x10bc>
   121c0:	subs	r5, r5, #1
   121c4:	sbc	r7, r7, #0
   121c8:	orrs	r2, r5, r7
   121cc:	bne	121a8 <__assert_fail@plt+0x10bc>
   121d0:	mov	r9, #1
   121d4:	str	r9, [sp]
   121d8:	mvn	r1, r6
   121dc:	add	r0, r1, r0
   121e0:	mov	r1, #0
   121e4:	rsbs	r5, r0, #0
   121e8:	sbc	r7, r1, #0
   121ec:	mov	r0, sl
   121f0:	mov	r2, r5
   121f4:	mov	r3, r7
   121f8:	bl	10f3c <lseek64@plt>
   121fc:	add	r4, r6, #1
   12200:	cmn	r1, #1
   12204:	bgt	1224c <__assert_fail@plt+0x1160>
   12208:	add	r1, sp, #16
   1220c:	mov	r0, sl
   12210:	bl	16b54 <__assert_fail@plt+0x5a68>
   12214:	cmp	r0, #0
   12218:	bne	1222c <__assert_fail@plt+0x1140>
   1221c:	ldr	r0, [sp, #32]
   12220:	and	r0, r0, #61440	; 0xf000
   12224:	cmp	r0, #32768	; 0x8000
   12228:	bne	1224c <__assert_fail@plt+0x1160>
   1222c:	mov	r0, #1
   12230:	str	r0, [sp]
   12234:	ldr	r0, [sp, #12]
   12238:	str	r0, [sp, #4]
   1223c:	mov	r0, sl
   12240:	mov	r2, r5
   12244:	mov	r3, r7
   12248:	bl	11ec0 <__assert_fail@plt+0xdd4>
   1224c:	add	r0, sp, #120	; 0x78
   12250:	mov	r1, r4
   12254:	bl	12b60 <__assert_fail@plt+0x1a74>
   12258:	mov	r0, r9
   1225c:	sub	sp, fp, #28
   12260:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12264:	bl	11014 <__errno_location@plt>
   12268:	ldr	r4, [r0]
   1226c:	mov	r9, #0
   12270:	movw	r1, #29475	; 0x7323
   12274:	movt	r1, #1
   12278:	mov	r0, #0
   1227c:	mov	r2, #5
   12280:	bl	10ee8 <dcgettext@plt>
   12284:	mov	r5, r0
   12288:	mov	r0, #4
   1228c:	ldr	r1, [sp, #12]
   12290:	bl	14aa4 <__assert_fail@plt+0x39b8>
   12294:	mov	r3, r0
   12298:	mov	r0, #0
   1229c:	mov	r1, r4
   122a0:	mov	r2, r5
   122a4:	bl	10f78 <error@plt>
   122a8:	b	12258 <__assert_fail@plt+0x116c>
   122ac:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   122b0:	add	fp, sp, #28
   122b4:	sub	sp, sp, #12
   122b8:	sub	sp, sp, #8192	; 0x2000
   122bc:	mov	sl, r1
   122c0:	orrs	r1, r2, r3
   122c4:	mov	r9, #1
   122c8:	beq	12374 <__assert_fail@plt+0x1288>
   122cc:	mov	r6, r3
   122d0:	mov	r7, r2
   122d4:	str	r0, [sp, #4]
   122d8:	mov	r4, #8192	; 0x2000
   122dc:	add	r5, sp, #8
   122e0:	subs	r0, r7, r4
   122e4:	sbcs	r0, r6, #0
   122e8:	movcc	r4, r7
   122ec:	mov	r0, sl
   122f0:	mov	r1, r5
   122f4:	mov	r2, r4
   122f8:	bl	150b0 <__assert_fail@plt+0x3fc4>
   122fc:	cmp	r0, #0
   12300:	beq	12374 <__assert_fail@plt+0x1288>
   12304:	mov	r8, r0
   12308:	cmn	r0, #1
   1230c:	beq	12330 <__assert_fail@plt+0x1244>
   12310:	mov	r0, r5
   12314:	mov	r1, r8
   12318:	bl	12b60 <__assert_fail@plt+0x1a74>
   1231c:	subs	r7, r7, r8
   12320:	sbc	r6, r6, #0
   12324:	orrs	r0, r7, r6
   12328:	bne	122e0 <__assert_fail@plt+0x11f4>
   1232c:	b	12374 <__assert_fail@plt+0x1288>
   12330:	bl	11014 <__errno_location@plt>
   12334:	ldr	r4, [r0]
   12338:	mov	r9, #0
   1233c:	movw	r1, #29475	; 0x7323
   12340:	movt	r1, #1
   12344:	mov	r0, #0
   12348:	mov	r2, #5
   1234c:	bl	10ee8 <dcgettext@plt>
   12350:	mov	r5, r0
   12354:	mov	r0, #4
   12358:	ldr	r1, [sp, #4]
   1235c:	bl	14aa4 <__assert_fail@plt+0x39b8>
   12360:	mov	r3, r0
   12364:	mov	r0, #0
   12368:	mov	r1, r4
   1236c:	mov	r2, r5
   12370:	bl	10f78 <error@plt>
   12374:	mov	r0, r9
   12378:	sub	sp, fp, #28
   1237c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12380:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12384:	add	fp, sp, #28
   12388:	sub	sp, sp, #52	; 0x34
   1238c:	str	r3, [fp, #-36]	; 0xffffffdc
   12390:	str	r2, [fp, #-32]	; 0xffffffe0
   12394:	mov	r4, r1
   12398:	str	r0, [sp, #28]
   1239c:	movw	r0, #8208	; 0x2010
   123a0:	bl	15610 <__assert_fail@plt+0x4524>
   123a4:	mov	r5, r0
   123a8:	movw	r7, #8196	; 0x2004
   123ac:	mov	r2, #0
   123b0:	str	r2, [r0, r7]!
   123b4:	str	r2, [r0, #4]
   123b8:	mov	r1, #0
   123bc:	str	r1, [sp, #32]
   123c0:	str	r2, [r0, #8]
   123c4:	movw	r0, #8208	; 0x2010
   123c8:	bl	15610 <__assert_fail@plt+0x4524>
   123cc:	mov	r8, r0
   123d0:	str	r4, [sp, #40]	; 0x28
   123d4:	mov	r0, r4
   123d8:	mov	r1, r8
   123dc:	mov	r2, #8192	; 0x2000
   123e0:	bl	150b0 <__assert_fail@plt+0x3fc4>
   123e4:	mov	r6, r0
   123e8:	add	r0, r0, #1
   123ec:	ldr	sl, [fp, #12]
   123f0:	ldr	r9, [fp, #8]
   123f4:	mov	r4, r5
   123f8:	cmp	r0, #2
   123fc:	bcc	1261c <__assert_fail@plt+0x1530>
   12400:	mov	r0, #0
   12404:	str	r0, [sp, #32]
   12408:	mov	r1, r8
   1240c:	mov	r0, r4
   12410:	add	r4, r8, r7
   12414:	str	r0, [sp, #24]
   12418:	add	r0, r0, r7
   1241c:	str	r0, [sp, #12]
   12420:	add	r0, r5, r7
   12424:	str	r0, [sp, #8]
   12428:	mov	r7, r9
   1242c:	str	r6, [sp, #16]
   12430:	mov	r9, r6
   12434:	str	r7, [sp, #20]
   12438:	str	sl, [sp, #36]	; 0x24
   1243c:	mov	r6, sl
   12440:	mov	sl, r8
   12444:	ldr	r0, [fp, #-36]	; 0xffffffdc
   12448:	ldr	r2, [fp, #-32]	; 0xffffffe0
   1244c:	orrs	r0, r2, r0
   12450:	bne	12490 <__assert_fail@plt+0x13a4>
   12454:	mov	r0, r8
   12458:	mov	r1, r9
   1245c:	bl	12b60 <__assert_fail@plt+0x1a74>
   12460:	ldr	r0, [sp, #40]	; 0x28
   12464:	mov	r1, r8
   12468:	mov	r2, #8192	; 0x2000
   1246c:	bl	150b0 <__assert_fail@plt+0x3fc4>
   12470:	add	r1, r0, #1
   12474:	adds	r7, r7, r9
   12478:	adc	r6, r6, #0
   1247c:	cmp	r1, #2
   12480:	mov	r1, sl
   12484:	mov	r9, r0
   12488:	bcs	12444 <__assert_fail@plt+0x1358>
   1248c:	b	12608 <__assert_fail@plt+0x151c>
   12490:	ldr	r2, [sp, #16]
   12494:	str	r2, [r4]
   12498:	mov	r0, #0
   1249c:	str	r0, [r4, #4]
   124a0:	mov	r9, #0
   124a4:	str	r0, [r4, #8]
   124a8:	movw	r6, #33119	; 0x815f
   124ac:	movt	r6, #2
   124b0:	ldrb	r0, [r6]
   124b4:	cmp	r0, #0
   124b8:	movwne	r0, #10
   124bc:	mov	r7, r1
   124c0:	strb	r0, [r7, r2]!
   124c4:	ldrb	r1, [r6]
   124c8:	cmp	r1, #0
   124cc:	movwne	r1, #10
   124d0:	mov	r0, r8
   124d4:	bl	10f0c <rawmemchr@plt>
   124d8:	cmp	r0, r7
   124dc:	bcs	12500 <__assert_fail@plt+0x1414>
   124e0:	ldr	r1, [r4, #4]
   124e4:	add	r1, r1, #1
   124e8:	str	r1, [r4, #4]
   124ec:	ldrb	r1, [r6]
   124f0:	add	r0, r0, #1
   124f4:	cmp	r1, #0
   124f8:	movwne	r1, #10
   124fc:	b	124d4 <__assert_fail@plt+0x13e8>
   12500:	ldr	r2, [r4]
   12504:	ldr	r0, [r4, #4]
   12508:	ldr	r3, [sp, #32]
   1250c:	add	r3, r0, r3
   12510:	ldr	r6, [sp, #12]
   12514:	ldr	r0, [r6]
   12518:	add	r1, r0, r2
   1251c:	cmp	r9, r1, lsr #13
   12520:	movw	r7, #8196	; 0x2004
   12524:	bne	12564 <__assert_fail@plt+0x1478>
   12528:	str	r3, [sp, #32]
   1252c:	ldr	r9, [sp, #24]
   12530:	add	r0, r9, r0
   12534:	mov	r1, r8
   12538:	bl	10ec4 <memcpy@plt>
   1253c:	ldr	r0, [r4]
   12540:	ldm	r6, {r1, r2}
   12544:	add	r0, r1, r0
   12548:	str	r0, [r6]
   1254c:	ldr	r0, [r4, #4]
   12550:	mov	r4, r9
   12554:	add	r0, r2, r0
   12558:	str	r0, [r6, #4]
   1255c:	ldr	r9, [sp, #20]
   12560:	b	125e0 <__assert_fail@plt+0x14f4>
   12564:	str	sl, [r6, #8]
   12568:	ldr	r6, [sp, #8]
   1256c:	ldr	r0, [r6, #4]
   12570:	sub	r0, r3, r0
   12574:	ldr	r1, [fp, #-32]	; 0xffffffe0
   12578:	subs	r0, r1, r0
   1257c:	ldr	r0, [fp, #-36]	; 0xffffffdc
   12580:	sbcs	r0, r0, #0
   12584:	ldr	r9, [sp, #20]
   12588:	mov	r4, r3
   1258c:	bcs	125cc <__assert_fail@plt+0x14e0>
   12590:	ldr	r8, [r6]
   12594:	mov	r0, r5
   12598:	mov	r1, r8
   1259c:	bl	12b60 <__assert_fail@plt+0x1a74>
   125a0:	adds	r9, r9, r8
   125a4:	mov	r2, sl
   125a8:	ldr	sl, [sp, #36]	; 0x24
   125ac:	adc	sl, sl, #0
   125b0:	ldmib	r6, {r0, r1}
   125b4:	sub	r4, r4, r0
   125b8:	str	r4, [sp, #32]
   125bc:	mov	r8, r5
   125c0:	mov	r4, r2
   125c4:	mov	r5, r1
   125c8:	b	125e4 <__assert_fail@plt+0x14f8>
   125cc:	str	r4, [sp, #32]
   125d0:	movw	r0, #8208	; 0x2010
   125d4:	bl	15610 <__assert_fail@plt+0x4524>
   125d8:	mov	r8, r0
   125dc:	mov	r4, sl
   125e0:	ldr	sl, [sp, #36]	; 0x24
   125e4:	ldr	r0, [sp, #40]	; 0x28
   125e8:	mov	r1, r8
   125ec:	mov	r2, #8192	; 0x2000
   125f0:	bl	150b0 <__assert_fail@plt+0x3fc4>
   125f4:	mov	r6, r0
   125f8:	add	r0, r0, #1
   125fc:	cmp	r0, #1
   12600:	bhi	12408 <__assert_fail@plt+0x131c>
   12604:	b	1261c <__assert_fail@plt+0x1530>
   12608:	mov	r9, r7
   1260c:	mov	sl, r6
   12610:	mov	r6, r0
   12614:	movw	r7, #8196	; 0x2004
   12618:	ldr	r4, [sp, #24]
   1261c:	mov	r0, r8
   12620:	bl	132e8 <__assert_fail@plt+0x21fc>
   12624:	cmn	r6, #1
   12628:	beq	12670 <__assert_fail@plt+0x1584>
   1262c:	add	r0, r4, r7
   12630:	ldr	r1, [r0]
   12634:	cmp	r1, #0
   12638:	beq	12660 <__assert_fail@plt+0x1574>
   1263c:	add	r1, r1, r4
   12640:	ldrb	r1, [r1, #-1]
   12644:	movw	r2, #33119	; 0x815f
   12648:	movt	r2, #2
   1264c:	ldrb	r2, [r2]
   12650:	cmp	r2, #0
   12654:	movwne	r2, #10
   12658:	cmp	r2, r1
   1265c:	bne	126c4 <__assert_fail@plt+0x15d8>
   12660:	ldr	r2, [fp, #-32]	; 0xffffffe0
   12664:	ldr	r1, [fp, #-36]	; 0xffffffdc
   12668:	ldr	r3, [sp, #32]
   1266c:	b	126e0 <__assert_fail@plt+0x15f4>
   12670:	str	sl, [sp, #36]	; 0x24
   12674:	bl	11014 <__errno_location@plt>
   12678:	ldr	r4, [r0]
   1267c:	mov	r7, #0
   12680:	movw	r1, #29475	; 0x7323
   12684:	movt	r1, #1
   12688:	mov	r0, #0
   1268c:	mov	r2, #5
   12690:	bl	10ee8 <dcgettext@plt>
   12694:	mov	r6, r0
   12698:	mov	r0, #4
   1269c:	ldr	r1, [sp, #28]
   126a0:	bl	14aa4 <__assert_fail@plt+0x39b8>
   126a4:	mov	r3, r0
   126a8:	mov	r0, #0
   126ac:	mov	r1, r4
   126b0:	mov	r2, r6
   126b4:	bl	10f78 <error@plt>
   126b8:	cmp	r5, #0
   126bc:	bne	12830 <__assert_fail@plt+0x1744>
   126c0:	b	1284c <__assert_fail@plt+0x1760>
   126c4:	ldr	r2, [fp, #-32]	; 0xffffffe0
   126c8:	ldr	r1, [r0, #4]
   126cc:	add	r1, r1, #1
   126d0:	str	r1, [r0, #4]
   126d4:	ldr	r3, [sp, #32]
   126d8:	add	r3, r3, #1
   126dc:	ldr	r1, [fp, #-36]	; 0xffffffdc
   126e0:	movw	r0, #8200	; 0x2008
   126e4:	mov	r7, r5
   126e8:	ldr	r0, [r7, r0]!
   126ec:	sub	r0, r3, r0
   126f0:	subs	r0, r2, r0
   126f4:	sbcs	r0, r1, #0
   126f8:	str	r5, [sp, #24]
   126fc:	mov	r8, r5
   12700:	bcs	12764 <__assert_fail@plt+0x1678>
   12704:	mov	r6, r8
   12708:	movw	r0, #8196	; 0x2004
   1270c:	ldr	r4, [r6, r0]!
   12710:	mov	r0, r8
   12714:	mov	r1, r4
   12718:	mov	r5, r3
   1271c:	bl	12b60 <__assert_fail@plt+0x1a74>
   12720:	movw	r0, #8200	; 0x2008
   12724:	mov	r3, r5
   12728:	ldr	r8, [r6, #8]
   1272c:	mov	r6, r8
   12730:	ldr	r0, [r6, r0]!
   12734:	ldr	r1, [r7]
   12738:	sub	r3, r5, r1
   1273c:	ldr	r1, [fp, #-36]	; 0xffffffdc
   12740:	sub	r0, r3, r0
   12744:	adds	r9, r9, r4
   12748:	adc	sl, sl, #0
   1274c:	ldr	r2, [fp, #-32]	; 0xffffffe0
   12750:	subs	r0, r2, r0
   12754:	sbcs	r0, r1, #0
   12758:	mov	r7, r6
   1275c:	bcc	12704 <__assert_fail@plt+0x1618>
   12760:	b	12768 <__assert_fail@plt+0x167c>
   12764:	mov	r6, r7
   12768:	str	sl, [sp, #36]	; 0x24
   1276c:	mov	r7, #1
   12770:	ldr	r2, [fp, #-32]	; 0xffffffe0
   12774:	subs	r0, r2, r3
   12778:	sbcs	r0, r1, #0
   1277c:	bcs	127e4 <__assert_fail@plt+0x16f8>
   12780:	mov	r1, r2
   12784:	subs	r0, r3, r2
   12788:	beq	127f4 <__assert_fail@plt+0x1708>
   1278c:	sub	r4, r1, r3
   12790:	movw	r0, #8196	; 0x2004
   12794:	ldr	r0, [r8, r0]
   12798:	add	r7, r8, r0
   1279c:	movw	sl, #33119	; 0x815f
   127a0:	movt	sl, #2
   127a4:	mov	r0, r8
   127a8:	ldr	r5, [sp, #24]
   127ac:	sub	r2, r7, r0
   127b0:	ldrb	r1, [sl]
   127b4:	cmp	r1, #0
   127b8:	movwne	r1, #10
   127bc:	bl	11068 <memchr@plt>
   127c0:	cmp	r0, #0
   127c4:	beq	12800 <__assert_fail@plt+0x1714>
   127c8:	ldr	r1, [r6]
   127cc:	add	r1, r1, #1
   127d0:	str	r1, [r6]
   127d4:	adds	r4, r4, #1
   127d8:	add	r0, r0, #1
   127dc:	bcc	127ac <__assert_fail@plt+0x16c0>
   127e0:	b	12804 <__assert_fail@plt+0x1718>
   127e4:	ldr	r5, [sp, #24]
   127e8:	cmp	r5, #0
   127ec:	bne	12830 <__assert_fail@plt+0x1744>
   127f0:	b	1284c <__assert_fail@plt+0x1760>
   127f4:	mov	r0, r8
   127f8:	ldr	r5, [sp, #24]
   127fc:	b	12804 <__assert_fail@plt+0x1718>
   12800:	mov	r0, #0
   12804:	sub	r4, r0, r8
   12808:	mov	r0, r8
   1280c:	mov	r1, r4
   12810:	bl	12b60 <__assert_fail@plt+0x1a74>
   12814:	adds	r9, r9, r4
   12818:	ldr	r0, [sp, #36]	; 0x24
   1281c:	adc	r0, r0, r4, asr #31
   12820:	str	r0, [sp, #36]	; 0x24
   12824:	mov	r7, #1
   12828:	cmp	r5, #0
   1282c:	beq	1284c <__assert_fail@plt+0x1760>
   12830:	movw	r4, #8204	; 0x200c
   12834:	ldr	r6, [r5, r4]
   12838:	mov	r0, r5
   1283c:	bl	132e8 <__assert_fail@plt+0x21fc>
   12840:	cmp	r6, #0
   12844:	mov	r5, r6
   12848:	bne	12834 <__assert_fail@plt+0x1748>
   1284c:	ldr	r0, [fp, #12]
   12850:	cmp	r0, #0
   12854:	bmi	12894 <__assert_fail@plt+0x17a8>
   12858:	mvn	r4, #0
   1285c:	mov	r5, #0
   12860:	str	r5, [sp]
   12864:	ldr	r0, [sp, #28]
   12868:	str	r0, [sp, #4]
   1286c:	ldr	r0, [sp, #40]	; 0x28
   12870:	mov	r2, r9
   12874:	ldr	r3, [sp, #36]	; 0x24
   12878:	bl	11ec0 <__assert_fail@plt+0xdd4>
   1287c:	subs	r0, r4, r0
   12880:	sbcs	r0, r4, r1
   12884:	movwlt	r5, #1
   12888:	and	r0, r7, r5
   1288c:	sub	sp, fp, #28
   12890:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12894:	mov	r0, r7
   12898:	sub	sp, fp, #28
   1289c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   128a0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   128a4:	add	fp, sp, #28
   128a8:	sub	sp, sp, #28
   128ac:	sub	sp, sp, #8192	; 0x2000
   128b0:	mov	r8, r3
   128b4:	mov	r4, r2
   128b8:	mov	r7, r1
   128bc:	mov	r9, #0
   128c0:	str	r9, [sp]
   128c4:	str	r0, [sp, #12]
   128c8:	str	r0, [sp, #4]
   128cc:	ldr	r3, [fp, #12]
   128d0:	ldr	r0, [fp, #20]
   128d4:	ldr	r2, [fp, #8]
   128d8:	ldr	r1, [fp, #16]
   128dc:	subs	r2, r1, r2
   128e0:	sbc	r3, r0, r3
   128e4:	asr	r3, r3, #31
   128e8:	add	r3, r2, r3, lsr #19
   128ec:	bfc	r3, #0, #13
   128f0:	subs	r6, r2, r3
   128f4:	movweq	r6, #8192	; 0x2000
   128f8:	subs	r2, r1, r6
   128fc:	sbc	r3, r0, #0
   12900:	mov	r0, r7
   12904:	str	r2, [sp, #20]
   12908:	str	r3, [sp, #16]
   1290c:	bl	11ec0 <__assert_fail@plt+0xdd4>
   12910:	cmp	r1, #0
   12914:	bmi	12b54 <__assert_fail@plt+0x1a68>
   12918:	add	r5, sp, #24
   1291c:	mov	r0, r7
   12920:	mov	r1, r5
   12924:	mov	r2, r6
   12928:	bl	150b0 <__assert_fail@plt+0x3fc4>
   1292c:	cmn	r0, #1
   12930:	beq	12a64 <__assert_fail@plt+0x1978>
   12934:	mov	sl, r0
   12938:	str	r7, [sp, #8]
   1293c:	orrs	r7, r4, r8
   12940:	movw	r6, #33119	; 0x815f
   12944:	movt	r6, #2
   12948:	cmpne	sl, #0
   1294c:	beq	12978 <__assert_fail@plt+0x188c>
   12950:	subs	r0, r4, #1
   12954:	sbc	r1, r8, #0
   12958:	add	r2, sl, r5
   1295c:	ldrb	r2, [r2, #-1]
   12960:	ldrb	r3, [r6]
   12964:	cmp	r3, #0
   12968:	movwne	r3, #10
   1296c:	cmp	r3, r2
   12970:	movne	r8, r1
   12974:	movne	r4, r0
   12978:	ldrb	r6, [r6]
   1297c:	cmp	r6, #0
   12980:	movwne	r6, #10
   12984:	cmp	sl, #0
   12988:	bne	129b4 <__assert_fail@plt+0x18c8>
   1298c:	b	129dc <__assert_fail@plt+0x18f0>
   12990:	sub	sl, sl, #1
   12994:	subs	r0, r4, #1
   12998:	sbc	r1, r8, #0
   1299c:	orrs	r2, r4, r8
   129a0:	mov	r4, r0
   129a4:	mov	r8, r1
   129a8:	beq	12aac <__assert_fail@plt+0x19c0>
   129ac:	cmp	sl, #0
   129b0:	beq	129dc <__assert_fail@plt+0x18f0>
   129b4:	cmp	r7, #0
   129b8:	beq	12990 <__assert_fail@plt+0x18a4>
   129bc:	mov	r0, r5
   129c0:	mov	r1, r6
   129c4:	mov	r2, sl
   129c8:	bl	11008 <memrchr@plt>
   129cc:	cmp	r0, #0
   129d0:	beq	129dc <__assert_fail@plt+0x18f0>
   129d4:	sub	sl, r0, r5
   129d8:	b	12994 <__assert_fail@plt+0x18a8>
   129dc:	ldr	r2, [sp, #20]
   129e0:	ldr	r0, [fp, #8]
   129e4:	eor	r0, r2, r0
   129e8:	ldr	r3, [sp, #16]
   129ec:	ldr	r1, [fp, #12]
   129f0:	eor	r1, r3, r1
   129f4:	orrs	r0, r0, r1
   129f8:	mov	r9, #1
   129fc:	beq	12b54 <__assert_fail@plt+0x1a68>
   12a00:	mov	r9, #0
   12a04:	str	r9, [sp]
   12a08:	ldr	r0, [sp, #12]
   12a0c:	str	r0, [sp, #4]
   12a10:	subs	r2, r2, #8192	; 0x2000
   12a14:	sbc	r3, r3, #0
   12a18:	ldr	r6, [sp, #8]
   12a1c:	mov	r0, r6
   12a20:	str	r2, [sp, #20]
   12a24:	str	r3, [sp, #16]
   12a28:	bl	11ec0 <__assert_fail@plt+0xdd4>
   12a2c:	cmp	r1, #0
   12a30:	bmi	12b54 <__assert_fail@plt+0x1a68>
   12a34:	mov	r0, r6
   12a38:	mov	r1, r5
   12a3c:	mov	r2, #8192	; 0x2000
   12a40:	bl	150b0 <__assert_fail@plt+0x3fc4>
   12a44:	cmp	r0, #0
   12a48:	mov	r9, #1
   12a4c:	beq	12b54 <__assert_fail@plt+0x1a68>
   12a50:	mov	sl, r0
   12a54:	cmn	r0, #1
   12a58:	movw	r6, #33119	; 0x815f
   12a5c:	movt	r6, #2
   12a60:	bne	12978 <__assert_fail@plt+0x188c>
   12a64:	bl	11014 <__errno_location@plt>
   12a68:	ldr	r4, [r0]
   12a6c:	mov	r9, #0
   12a70:	movw	r1, #29475	; 0x7323
   12a74:	movt	r1, #1
   12a78:	mov	r0, #0
   12a7c:	mov	r2, #5
   12a80:	bl	10ee8 <dcgettext@plt>
   12a84:	mov	r5, r0
   12a88:	mov	r0, #4
   12a8c:	ldr	r1, [sp, #12]
   12a90:	bl	14aa4 <__assert_fail@plt+0x39b8>
   12a94:	mov	r3, r0
   12a98:	mov	r0, #0
   12a9c:	mov	r1, r4
   12aa0:	mov	r2, r5
   12aa4:	bl	10f78 <error@plt>
   12aa8:	b	12b54 <__assert_fail@plt+0x1a68>
   12aac:	ldr	r5, [sp, #20]
   12ab0:	ldr	r8, [fp, #8]
   12ab4:	subs	r0, r8, r5
   12ab8:	ldr	r6, [sp, #16]
   12abc:	ldr	r7, [fp, #12]
   12ac0:	sbcs	r0, r7, r6
   12ac4:	ldr	r4, [sp, #8]
   12ac8:	bge	12b18 <__assert_fail@plt+0x1a2c>
   12acc:	mov	r9, #0
   12ad0:	str	r9, [sp]
   12ad4:	ldr	r0, [sp, #12]
   12ad8:	str	r0, [sp, #4]
   12adc:	mov	r0, r4
   12ae0:	mov	r2, r8
   12ae4:	mov	r3, r7
   12ae8:	bl	11ec0 <__assert_fail@plt+0xdd4>
   12aec:	cmp	r1, #0
   12af0:	bmi	12b54 <__assert_fail@plt+0x1a68>
   12af4:	subs	r2, r5, r8
   12af8:	sbc	r3, r6, r7
   12afc:	mov	r0, r4
   12b00:	bl	12be4 <__assert_fail@plt+0x1af8>
   12b04:	cmp	r0, #0
   12b08:	beq	12b18 <__assert_fail@plt+0x1a2c>
   12b0c:	ldr	r1, [sp, #12]
   12b10:	bl	12c78 <__assert_fail@plt+0x1b8c>
   12b14:	b	12b54 <__assert_fail@plt+0x1a68>
   12b18:	add	r1, sl, #1
   12b1c:	add	r0, sp, #24
   12b20:	bl	12b60 <__assert_fail@plt+0x1a74>
   12b24:	mov	r9, #0
   12b28:	str	r9, [sp]
   12b2c:	ldr	r0, [sp, #12]
   12b30:	str	r0, [sp, #4]
   12b34:	adds	r0, r5, sl
   12b38:	adc	r1, r6, #0
   12b3c:	adds	r2, r0, #1
   12b40:	adc	r3, r1, #0
   12b44:	mov	r0, r4
   12b48:	bl	11ec0 <__assert_fail@plt+0xdd4>
   12b4c:	cmn	r1, #1
   12b50:	movwgt	r9, #1
   12b54:	mov	r0, r9
   12b58:	sub	sp, fp, #28
   12b5c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12b60:	push	{r4, r5, fp, lr}
   12b64:	add	fp, sp, #8
   12b68:	cmp	r1, #0
   12b6c:	popeq	{r4, r5, fp, pc}
   12b70:	mov	r4, r1
   12b74:	movw	r5, #33108	; 0x8154
   12b78:	movt	r5, #2
   12b7c:	ldr	r3, [r5]
   12b80:	mov	r1, #1
   12b84:	mov	r2, r4
   12b88:	bl	10edc <fwrite_unlocked@plt>
   12b8c:	cmp	r0, r4
   12b90:	bcc	12b98 <__assert_fail@plt+0x1aac>
   12b94:	pop	{r4, r5, fp, pc}
   12b98:	ldr	r0, [r5]
   12b9c:	bl	110b0 <clearerr_unlocked@plt>
   12ba0:	bl	11014 <__errno_location@plt>
   12ba4:	ldr	r4, [r0]
   12ba8:	movw	r1, #29492	; 0x7334
   12bac:	movt	r1, #1
   12bb0:	mov	r0, #0
   12bb4:	mov	r2, #5
   12bb8:	bl	10ee8 <dcgettext@plt>
   12bbc:	mov	r5, r0
   12bc0:	movw	r1, #29509	; 0x7345
   12bc4:	movt	r1, #1
   12bc8:	mov	r0, #4
   12bcc:	bl	14aa4 <__assert_fail@plt+0x39b8>
   12bd0:	mov	r3, r0
   12bd4:	mov	r0, #1
   12bd8:	mov	r1, r4
   12bdc:	mov	r2, r5
   12be0:	bl	10f78 <error@plt>
   12be4:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   12be8:	add	fp, sp, #24
   12bec:	sub	sp, sp, #8192	; 0x2000
   12bf0:	mov	r7, r0
   12bf4:	orrs	r0, r2, r3
   12bf8:	mov	r8, #0
   12bfc:	beq	12c6c <__assert_fail@plt+0x1b80>
   12c00:	mov	r5, r3
   12c04:	mov	r6, r2
   12c08:	mov	r4, sp
   12c0c:	b	12c20 <__assert_fail@plt+0x1b34>
   12c10:	mov	r0, r4
   12c14:	bl	12b60 <__assert_fail@plt+0x1a74>
   12c18:	orrs	r0, r6, r5
   12c1c:	beq	12c6c <__assert_fail@plt+0x1b80>
   12c20:	subs	r0, r6, #8192	; 0x2000
   12c24:	sbcs	r0, r5, #0
   12c28:	mov	r2, r6
   12c2c:	movcs	r2, #8192	; 0x2000
   12c30:	mov	r0, r7
   12c34:	mov	r1, r4
   12c38:	bl	150b0 <__assert_fail@plt+0x3fc4>
   12c3c:	cmn	r0, #1
   12c40:	beq	12c68 <__assert_fail@plt+0x1b7c>
   12c44:	mov	r1, r0
   12c48:	subs	r6, r6, r0
   12c4c:	sbc	r5, r5, #0
   12c50:	cmp	r0, #0
   12c54:	bne	12c10 <__assert_fail@plt+0x1b24>
   12c58:	orrs	r0, r6, r5
   12c5c:	beq	12c10 <__assert_fail@plt+0x1b24>
   12c60:	mov	r8, #2
   12c64:	b	12c6c <__assert_fail@plt+0x1b80>
   12c68:	mov	r8, #1
   12c6c:	mov	r0, r8
   12c70:	sub	sp, fp, #24
   12c74:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   12c78:	push	{r4, r5, r6, sl, fp, lr}
   12c7c:	add	fp, sp, #16
   12c80:	mov	r4, r1
   12c84:	cmp	r0, #2
   12c88:	beq	12cc4 <__assert_fail@plt+0x1bd8>
   12c8c:	cmp	r0, #1
   12c90:	bne	12d0c <__assert_fail@plt+0x1c20>
   12c94:	bl	11014 <__errno_location@plt>
   12c98:	ldr	r5, [r0]
   12c9c:	movw	r1, #29475	; 0x7323
   12ca0:	movt	r1, #1
   12ca4:	mov	r0, #0
   12ca8:	mov	r2, #5
   12cac:	bl	10ee8 <dcgettext@plt>
   12cb0:	mov	r6, r0
   12cb4:	mov	r0, #4
   12cb8:	mov	r1, r4
   12cbc:	bl	14aa4 <__assert_fail@plt+0x39b8>
   12cc0:	b	12cf4 <__assert_fail@plt+0x1c08>
   12cc4:	bl	11014 <__errno_location@plt>
   12cc8:	ldr	r5, [r0]
   12ccc:	movw	r1, #29525	; 0x7355
   12cd0:	movt	r1, #1
   12cd4:	mov	r0, #0
   12cd8:	mov	r2, #5
   12cdc:	bl	10ee8 <dcgettext@plt>
   12ce0:	mov	r6, r0
   12ce4:	mov	r0, #0
   12ce8:	mov	r1, #3
   12cec:	mov	r2, r4
   12cf0:	bl	14b58 <__assert_fail@plt+0x3a6c>
   12cf4:	mov	r3, r0
   12cf8:	mov	r0, #0
   12cfc:	mov	r1, r5
   12d00:	mov	r2, r6
   12d04:	pop	{r4, r5, r6, sl, fp, lr}
   12d08:	b	10f78 <error@plt>
   12d0c:	bl	110d4 <abort@plt>
   12d10:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12d14:	add	fp, sp, #28
   12d18:	sub	sp, sp, #84	; 0x54
   12d1c:	mov	r9, r2
   12d20:	str	r1, [sp, #48]	; 0x30
   12d24:	str	r0, [sp, #20]
   12d28:	adds	r0, r2, #8192	; 0x2000
   12d2c:	adcs	r0, r3, #0
   12d30:	bne	131a0 <__assert_fail@plt+0x20b4>
   12d34:	ldr	r6, [fp, #12]
   12d38:	ldr	r0, [fp, #8]
   12d3c:	str	r0, [sp, #56]	; 0x38
   12d40:	cmp	r9, #1048576	; 0x100000
   12d44:	bhi	12e58 <__assert_fail@plt+0x1d6c>
   12d48:	add	r8, r9, #8192	; 0x2000
   12d4c:	mov	r0, #2
   12d50:	mov	r1, r8
   12d54:	bl	156ac <__assert_fail@plt+0x45c0>
   12d58:	str	r0, [fp, #-52]	; 0xffffffcc
   12d5c:	str	r0, [sp, #44]	; 0x2c
   12d60:	add	r0, r0, r8
   12d64:	str	r0, [fp, #-48]	; 0xffffffd0
   12d68:	mov	r4, #0
   12d6c:	str	r6, [sp, #52]	; 0x34
   12d70:	mov	r7, #1
   12d74:	b	12d88 <__assert_fail@plt+0x1c9c>
   12d78:	eor	r4, r4, #1
   12d7c:	mov	r7, #0
   12d80:	cmp	r5, #0
   12d84:	bne	12fcc <__assert_fail@plt+0x1ee0>
   12d88:	and	r0, r4, #1
   12d8c:	sub	r1, fp, #52	; 0x34
   12d90:	ldr	r6, [r1, r0, lsl #2]
   12d94:	ldr	r0, [sp, #48]	; 0x30
   12d98:	mov	r1, r6
   12d9c:	mov	r2, r8
   12da0:	bl	13310 <__assert_fail@plt+0x2224>
   12da4:	mov	sl, r0
   12da8:	cmp	r0, r8
   12dac:	mov	r0, #0
   12db0:	mov	r5, #0
   12db4:	bcs	12de4 <__assert_fail@plt+0x1cf8>
   12db8:	bl	11014 <__errno_location@plt>
   12dbc:	ldr	r5, [r0]
   12dc0:	cmp	r5, #0
   12dc4:	bne	13038 <__assert_fail@plt+0x1f4c>
   12dc8:	mov	r5, #1
   12dcc:	mov	r0, #0
   12dd0:	cmp	sl, r9
   12dd4:	bhi	12de4 <__assert_fail@plt+0x1cf8>
   12dd8:	sub	r0, r9, sl
   12ddc:	tst	r7, #1
   12de0:	movwne	r0, #0
   12de4:	tst	r7, #1
   12de8:	bne	12e24 <__assert_fail@plt+0x1d38>
   12dec:	sub	r7, r9, r0
   12df0:	mov	r0, #1
   12df4:	bic	r0, r0, r4
   12df8:	sub	r1, fp, #52	; 0x34
   12dfc:	ldr	r0, [r1, r0, lsl #2]
   12e00:	add	r0, r0, #8192	; 0x2000
   12e04:	mov	r1, r7
   12e08:	bl	12b60 <__assert_fail@plt+0x1a74>
   12e0c:	ldr	r0, [sp, #56]	; 0x38
   12e10:	adds	r0, r0, r7
   12e14:	str	r0, [sp, #56]	; 0x38
   12e18:	ldr	r0, [sp, #52]	; 0x34
   12e1c:	adc	r0, r0, #0
   12e20:	str	r0, [sp, #52]	; 0x34
   12e24:	cmp	sl, r9
   12e28:	bls	12d78 <__assert_fail@plt+0x1c8c>
   12e2c:	sub	r7, sl, r9
   12e30:	mov	r0, r6
   12e34:	mov	r1, r7
   12e38:	bl	12b60 <__assert_fail@plt+0x1a74>
   12e3c:	ldr	r0, [sp, #56]	; 0x38
   12e40:	adds	r0, r0, r7
   12e44:	str	r0, [sp, #56]	; 0x38
   12e48:	ldr	r0, [sp, #52]	; 0x34
   12e4c:	adc	r0, r0, #0
   12e50:	str	r0, [sp, #52]	; 0x34
   12e54:	b	12d78 <__assert_fail@plt+0x1c8c>
   12e58:	mov	r0, r9
   12e5c:	bfc	r0, #13, #19
   12e60:	str	r0, [sp, #12]
   12e64:	rsb	r0, r0, #8192	; 0x2000
   12e68:	str	r0, [sp, #16]
   12e6c:	add	r0, r0, r9
   12e70:	mov	r5, #1
   12e74:	add	r1, r5, r0, lsr #13
   12e78:	cmp	r1, #16
   12e7c:	mov	r2, r1
   12e80:	movcs	r2, #16
   12e84:	str	r2, [sp, #28]
   12e88:	lsr	r0, r0, #13
   12e8c:	str	r0, [sp, #36]	; 0x24
   12e90:	str	r1, [sp, #40]	; 0x28
   12e94:	lsr	r0, r1, #1
   12e98:	str	r0, [sp, #24]
   12e9c:	mov	r1, #0
   12ea0:	str	r6, [sp, #52]	; 0x34
   12ea4:	mov	r0, #0
   12ea8:	str	r0, [sp, #32]
   12eac:	mov	sl, #0
   12eb0:	mov	r6, #0
   12eb4:	mov	r9, #0
   12eb8:	cmp	r1, r6
   12ebc:	beq	12f14 <__assert_fail@plt+0x1e28>
   12ec0:	b	12f4c <__assert_fail@plt+0x1e60>
   12ec4:	mov	sl, r5
   12ec8:	ldr	r0, [r5, r7, lsl #2]
   12ecc:	mov	r1, r4
   12ed0:	bl	12b60 <__assert_fail@plt+0x1a74>
   12ed4:	ldr	r0, [sp, #56]	; 0x38
   12ed8:	adds	r0, r0, r4
   12edc:	str	r0, [sp, #56]	; 0x38
   12ee0:	ldr	r0, [sp, #52]	; 0x34
   12ee4:	adc	r0, r0, #0
   12ee8:	str	r0, [sp, #52]	; 0x34
   12eec:	add	r0, r7, #1
   12ef0:	ldr	r2, [sp, #40]	; 0x28
   12ef4:	udiv	r1, r0, r2
   12ef8:	mls	r5, r1, r2, r0
   12efc:	cmp	r8, #0
   12f00:	mov	r6, r7
   12f04:	ldr	r1, [sp, #44]	; 0x2c
   12f08:	bne	12fd8 <__assert_fail@plt+0x1eec>
   12f0c:	cmp	r1, r6
   12f10:	bne	12f4c <__assert_fail@plt+0x1e60>
   12f14:	cmp	r1, #0
   12f18:	ldr	r4, [sp, #28]
   12f1c:	beq	12f30 <__assert_fail@plt+0x1e44>
   12f20:	ldr	r0, [sp, #24]
   12f24:	cmp	r1, r0
   12f28:	ldr	r4, [sp, #40]	; 0x28
   12f2c:	lslls	r4, r1, #1
   12f30:	mov	r0, sl
   12f34:	mov	r1, r4
   12f38:	mov	r2, #4
   12f3c:	bl	155d0 <__assert_fail@plt+0x44e4>
   12f40:	mov	sl, r0
   12f44:	str	r4, [sp, #44]	; 0x2c
   12f48:	b	12f50 <__assert_fail@plt+0x1e64>
   12f4c:	str	r1, [sp, #44]	; 0x2c
   12f50:	mov	r7, r5
   12f54:	tst	r9, #1
   12f58:	bne	12f70 <__assert_fail@plt+0x1e84>
   12f5c:	mov	r0, #8192	; 0x2000
   12f60:	bl	15610 <__assert_fail@plt+0x4524>
   12f64:	str	r0, [sl, r6, lsl #2]
   12f68:	add	r0, r6, #1
   12f6c:	str	r0, [sp, #32]
   12f70:	mov	r5, sl
   12f74:	ldr	r1, [sl, r6, lsl #2]
   12f78:	ldr	r0, [sp, #48]	; 0x30
   12f7c:	mov	r2, #8192	; 0x2000
   12f80:	bl	13310 <__assert_fail@plt+0x2224>
   12f84:	mov	r4, r0
   12f88:	mov	r8, #0
   12f8c:	cmp	r8, r0, lsr #13
   12f90:	bne	12fa8 <__assert_fail@plt+0x1ebc>
   12f94:	bl	11014 <__errno_location@plt>
   12f98:	ldr	sl, [r0]
   12f9c:	mov	r8, #1
   12fa0:	cmp	sl, #0
   12fa4:	bne	1307c <__assert_fail@plt+0x1f90>
   12fa8:	ldr	r0, [sp, #36]	; 0x24
   12fac:	sub	r0, r6, r0
   12fb0:	clz	r0, r0
   12fb4:	lsr	r0, r0, #5
   12fb8:	orr	r9, r9, r0
   12fbc:	tst	r9, #1
   12fc0:	bne	12ec4 <__assert_fail@plt+0x1dd8>
   12fc4:	mov	sl, r5
   12fc8:	b	12eec <__assert_fail@plt+0x1e00>
   12fcc:	mov	r8, #1
   12fd0:	ldr	r0, [sp, #44]	; 0x2c
   12fd4:	b	13148 <__assert_fail@plt+0x205c>
   12fd8:	mov	r8, #1
   12fdc:	ldr	r1, [sp, #16]
   12fe0:	cmp	r1, #0
   12fe4:	beq	130bc <__assert_fail@plt+0x1fd0>
   12fe8:	tst	r9, #1
   12fec:	beq	130cc <__assert_fail@plt+0x1fe0>
   12ff0:	ldr	r0, [sp, #56]	; 0x38
   12ff4:	adds	r0, r0, r1
   12ff8:	str	r0, [sp, #56]	; 0x38
   12ffc:	ldr	r0, [sp, #52]	; 0x34
   13000:	adc	r0, r0, #0
   13004:	str	r0, [sp, #52]	; 0x34
   13008:	ldr	r0, [sl, r7, lsl #2]
   1300c:	add	r0, r0, r4
   13010:	rsb	r4, r4, #8192	; 0x2000
   13014:	cmp	r1, r4
   13018:	mov	r9, r1
   1301c:	ldr	r6, [sp, #32]
   13020:	bcs	13114 <__assert_fail@plt+0x2028>
   13024:	mov	r1, r9
   13028:	bl	12b60 <__assert_fail@plt+0x1a74>
   1302c:	cmp	r6, #0
   13030:	bne	13130 <__assert_fail@plt+0x2044>
   13034:	b	13144 <__assert_fail@plt+0x2058>
   13038:	movw	r1, #29475	; 0x7323
   1303c:	movt	r1, #1
   13040:	mov	r0, #0
   13044:	mov	r2, #5
   13048:	bl	10ee8 <dcgettext@plt>
   1304c:	mov	r4, r0
   13050:	mov	r0, #4
   13054:	ldr	r1, [sp, #20]
   13058:	bl	14aa4 <__assert_fail@plt+0x39b8>
   1305c:	mov	r3, r0
   13060:	mov	r0, #0
   13064:	mov	r1, r5
   13068:	mov	r8, #0
   1306c:	mov	r2, r4
   13070:	bl	10f78 <error@plt>
   13074:	ldr	r0, [sp, #44]	; 0x2c
   13078:	b	13148 <__assert_fail@plt+0x205c>
   1307c:	mov	r8, #0
   13080:	movw	r1, #29475	; 0x7323
   13084:	movt	r1, #1
   13088:	mov	r0, #0
   1308c:	mov	r2, #5
   13090:	bl	10ee8 <dcgettext@plt>
   13094:	mov	r4, r0
   13098:	mov	r0, #4
   1309c:	ldr	r1, [sp, #20]
   130a0:	bl	14aa4 <__assert_fail@plt+0x39b8>
   130a4:	mov	r3, r0
   130a8:	mov	r0, #0
   130ac:	mov	r1, sl
   130b0:	mov	r2, r4
   130b4:	bl	10f78 <error@plt>
   130b8:	mov	sl, r5
   130bc:	ldr	r6, [sp, #32]
   130c0:	cmp	r6, #0
   130c4:	bne	13130 <__assert_fail@plt+0x2044>
   130c8:	b	13144 <__assert_fail@plt+0x2058>
   130cc:	ldr	r0, [sp, #36]	; 0x24
   130d0:	cmp	r7, r0
   130d4:	ldr	r6, [sp, #32]
   130d8:	bne	13128 <__assert_fail@plt+0x203c>
   130dc:	ldr	r0, [sl, r5, lsl #2]
   130e0:	ldr	r1, [sp, #12]
   130e4:	sub	r4, r4, r1
   130e8:	mov	r1, r4
   130ec:	bl	12b60 <__assert_fail@plt+0x1a74>
   130f0:	ldr	r0, [sp, #56]	; 0x38
   130f4:	adds	r0, r0, r4
   130f8:	str	r0, [sp, #56]	; 0x38
   130fc:	ldr	r0, [sp, #52]	; 0x34
   13100:	adc	r0, r0, #0
   13104:	str	r0, [sp, #52]	; 0x34
   13108:	cmp	r6, #0
   1310c:	bne	13130 <__assert_fail@plt+0x2044>
   13110:	b	13144 <__assert_fail@plt+0x2058>
   13114:	mov	r1, r4
   13118:	bl	12b60 <__assert_fail@plt+0x1a74>
   1311c:	ldr	r0, [sl, r5, lsl #2]
   13120:	sub	r1, r9, r4
   13124:	bl	12b60 <__assert_fail@plt+0x1a74>
   13128:	cmp	r6, #0
   1312c:	beq	13144 <__assert_fail@plt+0x2058>
   13130:	mov	r4, sl
   13134:	ldr	r0, [r4], #4
   13138:	bl	132e8 <__assert_fail@plt+0x21fc>
   1313c:	subs	r6, r6, #1
   13140:	bne	13134 <__assert_fail@plt+0x2048>
   13144:	mov	r0, sl
   13148:	bl	132e8 <__assert_fail@plt+0x21fc>
   1314c:	ldr	r0, [fp, #12]
   13150:	cmp	r0, #0
   13154:	bmi	13194 <__assert_fail@plt+0x20a8>
   13158:	mvn	r4, #0
   1315c:	mov	r5, #0
   13160:	str	r5, [sp]
   13164:	ldr	r0, [sp, #20]
   13168:	str	r0, [sp, #4]
   1316c:	ldr	r0, [sp, #48]	; 0x30
   13170:	ldr	r2, [sp, #56]	; 0x38
   13174:	ldr	r3, [sp, #52]	; 0x34
   13178:	bl	11ec0 <__assert_fail@plt+0xdd4>
   1317c:	subs	r0, r4, r0
   13180:	sbcs	r0, r4, r1
   13184:	movwlt	r5, #1
   13188:	and	r0, r8, r5
   1318c:	sub	sp, fp, #28
   13190:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13194:	mov	r0, r8
   13198:	sub	sp, fp, #28
   1319c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   131a0:	mov	r4, r3
   131a4:	movw	r1, #29554	; 0x7372
   131a8:	movt	r1, #1
   131ac:	mov	r0, #0
   131b0:	mov	r2, #5
   131b4:	bl	10ee8 <dcgettext@plt>
   131b8:	mov	r6, r0
   131bc:	sub	r2, fp, #52	; 0x34
   131c0:	mov	r0, r9
   131c4:	mov	r1, r4
   131c8:	bl	13448 <__assert_fail@plt+0x235c>
   131cc:	mov	r3, r0
   131d0:	mov	r0, #1
   131d4:	mov	r1, #0
   131d8:	mov	r2, r6
   131dc:	bl	10f78 <error@plt>
   131e0:	movw	r1, #33124	; 0x8164
   131e4:	movt	r1, #2
   131e8:	str	r0, [r1]
   131ec:	bx	lr
   131f0:	movw	r1, #33128	; 0x8168
   131f4:	movt	r1, #2
   131f8:	strb	r0, [r1]
   131fc:	bx	lr
   13200:	push	{r4, r5, r6, sl, fp, lr}
   13204:	add	fp, sp, #16
   13208:	sub	sp, sp, #8
   1320c:	movw	r0, #33108	; 0x8154
   13210:	movt	r0, #2
   13214:	ldr	r0, [r0]
   13218:	bl	16424 <__assert_fail@plt+0x5338>
   1321c:	cmp	r0, #0
   13220:	beq	13248 <__assert_fail@plt+0x215c>
   13224:	movw	r0, #33128	; 0x8168
   13228:	movt	r0, #2
   1322c:	ldrb	r0, [r0]
   13230:	cmp	r0, #0
   13234:	beq	13268 <__assert_fail@plt+0x217c>
   13238:	bl	11014 <__errno_location@plt>
   1323c:	ldr	r0, [r0]
   13240:	cmp	r0, #32
   13244:	bne	13268 <__assert_fail@plt+0x217c>
   13248:	movw	r0, #33104	; 0x8150
   1324c:	movt	r0, #2
   13250:	ldr	r0, [r0]
   13254:	bl	16424 <__assert_fail@plt+0x5338>
   13258:	cmp	r0, #0
   1325c:	subeq	sp, fp, #16
   13260:	popeq	{r4, r5, r6, sl, fp, pc}
   13264:	b	132d8 <__assert_fail@plt+0x21ec>
   13268:	movw	r1, #29831	; 0x7487
   1326c:	movt	r1, #1
   13270:	mov	r0, #0
   13274:	mov	r2, #5
   13278:	bl	10ee8 <dcgettext@plt>
   1327c:	mov	r4, r0
   13280:	movw	r0, #33124	; 0x8164
   13284:	movt	r0, #2
   13288:	ldr	r6, [r0]
   1328c:	bl	11014 <__errno_location@plt>
   13290:	ldr	r5, [r0]
   13294:	cmp	r6, #0
   13298:	bne	132b4 <__assert_fail@plt+0x21c8>
   1329c:	movw	r2, #28741	; 0x7045
   132a0:	movt	r2, #1
   132a4:	mov	r0, #0
   132a8:	mov	r1, r5
   132ac:	mov	r3, r4
   132b0:	b	132d4 <__assert_fail@plt+0x21e8>
   132b4:	mov	r0, r6
   132b8:	bl	14b48 <__assert_fail@plt+0x3a5c>
   132bc:	mov	r3, r0
   132c0:	str	r4, [sp]
   132c4:	movw	r2, #28737	; 0x7041
   132c8:	movt	r2, #1
   132cc:	mov	r0, #0
   132d0:	mov	r1, r5
   132d4:	bl	10f78 <error@plt>
   132d8:	movw	r0, #33020	; 0x80fc
   132dc:	movt	r0, #2
   132e0:	ldr	r0, [r0]
   132e4:	bl	10eb8 <_exit@plt>
   132e8:	push	{r4, r5, r6, sl, fp, lr}
   132ec:	add	fp, sp, #16
   132f0:	mov	r4, r0
   132f4:	bl	11014 <__errno_location@plt>
   132f8:	mov	r5, r0
   132fc:	ldr	r6, [r0]
   13300:	mov	r0, r4
   13304:	bl	10eac <free@plt>
   13308:	str	r6, [r5]
   1330c:	pop	{r4, r5, r6, sl, fp, pc}
   13310:	push	{r4, r5, r6, r7, fp, lr}
   13314:	add	fp, sp, #16
   13318:	cmp	r2, #0
   1331c:	beq	13368 <__assert_fail@plt+0x227c>
   13320:	mov	r5, r2
   13324:	mov	r6, r1
   13328:	mov	r7, r0
   1332c:	mov	r4, #0
   13330:	mov	r0, r7
   13334:	mov	r1, r6
   13338:	mov	r2, r5
   1333c:	bl	150b0 <__assert_fail@plt+0x3fc4>
   13340:	cmn	r0, #1
   13344:	beq	13360 <__assert_fail@plt+0x2274>
   13348:	cmp	r0, #0
   1334c:	beq	13374 <__assert_fail@plt+0x2288>
   13350:	subs	r5, r5, r0
   13354:	add	r6, r6, r0
   13358:	add	r4, r0, r4
   1335c:	bne	13330 <__assert_fail@plt+0x2244>
   13360:	mov	r0, r4
   13364:	pop	{r4, r5, r6, r7, fp, pc}
   13368:	mov	r4, #0
   1336c:	mov	r0, r4
   13370:	pop	{r4, r5, r6, r7, fp, pc}
   13374:	bl	11014 <__errno_location@plt>
   13378:	mov	r1, #0
   1337c:	str	r1, [r0]
   13380:	mov	r0, r4
   13384:	pop	{r4, r5, r6, r7, fp, pc}
   13388:	push	{r4, r5, r6, sl, fp, lr}
   1338c:	add	fp, sp, #16
   13390:	mov	r4, r1
   13394:	mov	r5, r0
   13398:	mov	r0, #0
   1339c:	strb	r0, [r2, #20]
   133a0:	add	r6, r2, #19
   133a4:	cmp	r1, #0
   133a8:	bmi	133f8 <__assert_fail@plt+0x230c>
   133ac:	mov	r0, r5
   133b0:	mov	r1, r4
   133b4:	mov	r2, #10
   133b8:	mov	r3, #0
   133bc:	bl	16890 <__assert_fail@plt+0x57a4>
   133c0:	add	r2, r0, r0, lsl #2
   133c4:	sub	r2, r5, r2, lsl #1
   133c8:	add	r2, r2, #48	; 0x30
   133cc:	strb	r2, [r6], #-1
   133d0:	adds	r2, r5, #9
   133d4:	adc	r3, r4, #0
   133d8:	rsbs	r2, r2, #18
   133dc:	rscs	r2, r3, #0
   133e0:	mov	r5, r0
   133e4:	mov	r4, r1
   133e8:	bcc	133ac <__assert_fail@plt+0x22c0>
   133ec:	add	r6, r6, #1
   133f0:	mov	r0, r6
   133f4:	pop	{r4, r5, r6, sl, fp, pc}
   133f8:	mov	r0, r5
   133fc:	mov	r1, r4
   13400:	mov	r2, #10
   13404:	mov	r3, #0
   13408:	bl	16890 <__assert_fail@plt+0x57a4>
   1340c:	add	r2, r0, r0, lsl #2
   13410:	rsb	r2, r5, r2, lsl #1
   13414:	add	r2, r2, #48	; 0x30
   13418:	strb	r2, [r6], #-1
   1341c:	adds	r2, r5, #9
   13420:	adc	r3, r4, #0
   13424:	rsbs	r2, r2, #18
   13428:	rscs	r2, r3, #0
   1342c:	mov	r5, r0
   13430:	mov	r4, r1
   13434:	bcc	133f8 <__assert_fail@plt+0x230c>
   13438:	mov	r0, #45	; 0x2d
   1343c:	strb	r0, [r6]
   13440:	mov	r0, r6
   13444:	pop	{r4, r5, r6, sl, fp, pc}
   13448:	push	{r4, r5, r6, sl, fp, lr}
   1344c:	add	fp, sp, #16
   13450:	mov	r4, r1
   13454:	mov	r5, r0
   13458:	mov	r0, #0
   1345c:	strb	r0, [r2, #20]
   13460:	add	r6, r2, #19
   13464:	mov	r0, r5
   13468:	mov	r1, r4
   1346c:	mov	r2, #10
   13470:	mov	r3, #0
   13474:	bl	16964 <__assert_fail@plt+0x5878>
   13478:	add	r2, r0, r0, lsl #2
   1347c:	sub	r2, r5, r2, lsl #1
   13480:	orr	r2, r2, #48	; 0x30
   13484:	strb	r2, [r6], #-1
   13488:	rsbs	r2, r5, #9
   1348c:	rscs	r2, r4, #0
   13490:	mov	r5, r0
   13494:	mov	r4, r1
   13498:	bcc	13464 <__assert_fail@plt+0x2378>
   1349c:	add	r0, r6, #1
   134a0:	pop	{r4, r5, r6, sl, fp, pc}
   134a4:	push	{r4, r5, fp, lr}
   134a8:	add	fp, sp, #8
   134ac:	cmp	r0, #0
   134b0:	beq	13544 <__assert_fail@plt+0x2458>
   134b4:	mov	r4, r0
   134b8:	mov	r1, #47	; 0x2f
   134bc:	bl	11098 <strrchr@plt>
   134c0:	cmp	r0, #0
   134c4:	mov	r5, r4
   134c8:	addne	r5, r0, #1
   134cc:	sub	r0, r5, r4
   134d0:	cmp	r0, #7
   134d4:	blt	13528 <__assert_fail@plt+0x243c>
   134d8:	sub	r0, r5, #7
   134dc:	movw	r1, #29899	; 0x74cb
   134e0:	movt	r1, #1
   134e4:	mov	r2, #7
   134e8:	bl	110c8 <strncmp@plt>
   134ec:	cmp	r0, #0
   134f0:	bne	13528 <__assert_fail@plt+0x243c>
   134f4:	movw	r1, #29907	; 0x74d3
   134f8:	movt	r1, #1
   134fc:	mov	r0, r5
   13500:	mov	r2, #3
   13504:	bl	110c8 <strncmp@plt>
   13508:	cmp	r0, #0
   1350c:	beq	13518 <__assert_fail@plt+0x242c>
   13510:	mov	r4, r5
   13514:	b	13528 <__assert_fail@plt+0x243c>
   13518:	add	r4, r5, #3
   1351c:	movw	r0, #33088	; 0x8140
   13520:	movt	r0, #2
   13524:	str	r4, [r0]
   13528:	movw	r0, #33092	; 0x8144
   1352c:	movt	r0, #2
   13530:	str	r4, [r0]
   13534:	movw	r0, #33132	; 0x816c
   13538:	movt	r0, #2
   1353c:	str	r4, [r0]
   13540:	pop	{r4, r5, fp, pc}
   13544:	movw	r0, #33104	; 0x8150
   13548:	movt	r0, #2
   1354c:	ldr	r3, [r0]
   13550:	movw	r0, #29843	; 0x7493
   13554:	movt	r0, #1
   13558:	mov	r1, #55	; 0x37
   1355c:	mov	r2, #1
   13560:	bl	10f30 <fwrite@plt>
   13564:	bl	110d4 <abort@plt>
   13568:	push	{r4, r5, r6, sl, fp, lr}
   1356c:	add	fp, sp, #16
   13570:	mov	r4, r0
   13574:	movw	r0, #33136	; 0x8170
   13578:	movt	r0, #2
   1357c:	cmp	r4, #0
   13580:	moveq	r4, r0
   13584:	bl	11014 <__errno_location@plt>
   13588:	mov	r5, r0
   1358c:	ldr	r6, [r0]
   13590:	mov	r0, r4
   13594:	mov	r1, #48	; 0x30
   13598:	bl	158f8 <__assert_fail@plt+0x480c>
   1359c:	str	r6, [r5]
   135a0:	pop	{r4, r5, r6, sl, fp, pc}
   135a4:	movw	r1, #33136	; 0x8170
   135a8:	movt	r1, #2
   135ac:	cmp	r0, #0
   135b0:	movne	r1, r0
   135b4:	ldr	r0, [r1]
   135b8:	bx	lr
   135bc:	movw	r2, #33136	; 0x8170
   135c0:	movt	r2, #2
   135c4:	cmp	r0, #0
   135c8:	movne	r2, r0
   135cc:	str	r1, [r2]
   135d0:	bx	lr
   135d4:	movw	r3, #33136	; 0x8170
   135d8:	movt	r3, #2
   135dc:	cmp	r0, #0
   135e0:	movne	r3, r0
   135e4:	ubfx	r0, r1, #5, #3
   135e8:	add	ip, r3, r0, lsl #2
   135ec:	ldr	r3, [ip, #8]
   135f0:	and	r1, r1, #31
   135f4:	mov	r0, #1
   135f8:	and	r0, r0, r3, lsr r1
   135fc:	and	r2, r2, #1
   13600:	eor	r2, r0, r2
   13604:	eor	r1, r3, r2, lsl r1
   13608:	str	r1, [ip, #8]
   1360c:	bx	lr
   13610:	movw	r2, #33136	; 0x8170
   13614:	movt	r2, #2
   13618:	cmp	r0, #0
   1361c:	movne	r2, r0
   13620:	ldr	r0, [r2, #4]
   13624:	str	r1, [r2, #4]
   13628:	bx	lr
   1362c:	push	{fp, lr}
   13630:	mov	fp, sp
   13634:	movw	r3, #33136	; 0x8170
   13638:	movt	r3, #2
   1363c:	cmp	r0, #0
   13640:	movne	r3, r0
   13644:	mov	r0, #10
   13648:	str	r0, [r3]
   1364c:	cmp	r1, #0
   13650:	cmpne	r2, #0
   13654:	bne	1365c <__assert_fail@plt+0x2570>
   13658:	bl	110d4 <abort@plt>
   1365c:	str	r1, [r3, #40]	; 0x28
   13660:	str	r2, [r3, #44]	; 0x2c
   13664:	pop	{fp, pc}
   13668:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1366c:	add	fp, sp, #28
   13670:	sub	sp, sp, #20
   13674:	mov	r8, r3
   13678:	mov	r9, r2
   1367c:	mov	sl, r1
   13680:	mov	r7, r0
   13684:	ldr	r0, [fp, #8]
   13688:	movw	r5, #33136	; 0x8170
   1368c:	movt	r5, #2
   13690:	cmp	r0, #0
   13694:	movne	r5, r0
   13698:	bl	11014 <__errno_location@plt>
   1369c:	mov	r4, r0
   136a0:	ldm	r5, {r0, r1}
   136a4:	ldr	r2, [r5, #40]	; 0x28
   136a8:	ldr	r3, [r5, #44]	; 0x2c
   136ac:	ldr	r6, [r4]
   136b0:	add	r5, r5, #8
   136b4:	stm	sp, {r0, r1, r5}
   136b8:	str	r2, [sp, #12]
   136bc:	str	r3, [sp, #16]
   136c0:	mov	r0, r7
   136c4:	mov	r1, sl
   136c8:	mov	r2, r9
   136cc:	mov	r3, r8
   136d0:	bl	136e0 <__assert_fail@plt+0x25f4>
   136d4:	str	r6, [r4]
   136d8:	sub	sp, fp, #28
   136dc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   136e0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   136e4:	add	fp, sp, #28
   136e8:	sub	sp, sp, #156	; 0x9c
   136ec:	mov	r9, r3
   136f0:	mov	r7, r1
   136f4:	mov	r6, r0
   136f8:	str	r2, [fp, #-80]	; 0xffffffb0
   136fc:	add	r0, r2, #1
   13700:	str	r0, [sp, #76]	; 0x4c
   13704:	ldr	r0, [fp, #12]
   13708:	and	r1, r0, #1
   1370c:	str	r1, [sp, #40]	; 0x28
   13710:	and	r1, r0, #4
   13714:	str	r1, [sp, #36]	; 0x24
   13718:	ubfx	r4, r0, #1, #1
   1371c:	bl	10f48 <__ctype_get_mb_cur_max@plt>
   13720:	str	r0, [sp, #44]	; 0x2c
   13724:	ldr	r0, [fp, #24]
   13728:	str	r0, [sp, #88]	; 0x58
   1372c:	ldr	r0, [fp, #20]
   13730:	str	r0, [sp, #80]	; 0x50
   13734:	ldr	r1, [fp, #8]
   13738:	mov	r0, #0
   1373c:	str	r0, [sp, #84]	; 0x54
   13740:	mov	r0, #0
   13744:	str	r0, [fp, #-84]	; 0xffffffac
   13748:	mov	r0, #0
   1374c:	str	r0, [fp, #-72]	; 0xffffffb8
   13750:	mov	r0, #0
   13754:	mov	r2, #0
   13758:	str	r2, [fp, #-56]	; 0xffffffc8
   1375c:	mov	r2, #0
   13760:	str	r2, [sp, #64]	; 0x40
   13764:	mov	r2, #1
   13768:	str	r2, [fp, #-48]	; 0xffffffd0
   1376c:	cmp	r1, #10
   13770:	bhi	1469c <__assert_fail@plt+0x35b0>
   13774:	mov	sl, r7
   13778:	mov	r7, r1
   1377c:	add	r1, pc, #24
   13780:	mov	r8, #0
   13784:	mov	r2, #1
   13788:	mov	r3, #0
   1378c:	ldr	ip, [fp, #-80]	; 0xffffffb0
   13790:	mov	lr, r9
   13794:	mov	r5, r6
   13798:	ldr	pc, [r1, r7, lsl #2]
   1379c:	andeq	r3, r1, r0, ror r8
   137a0:			; <UNDEFINED> instruction: 0x000138b0
   137a4:	andeq	r3, r1, r0, lsl #17
   137a8:	andeq	r3, r1, r8, ror #16
   137ac:	andeq	r3, r1, r4, lsr #17
   137b0:	andeq	r3, r1, r4, lsl #18
   137b4:	muleq	r1, r0, r8
   137b8:	andeq	r3, r1, r0, ror #18
   137bc:	andeq	r3, r1, r8, asr #15
   137c0:	andeq	r3, r1, r8, asr #15
   137c4:	strdeq	r3, [r1], -r4
   137c8:	movw	r0, #29989	; 0x7525
   137cc:	movt	r0, #1
   137d0:	mov	r1, r7
   137d4:	bl	14ca4 <__assert_fail@plt+0x3bb8>
   137d8:	str	r0, [sp, #80]	; 0x50
   137dc:	movw	r0, #29991	; 0x7527
   137e0:	movt	r0, #1
   137e4:	mov	r1, r7
   137e8:	bl	14ca4 <__assert_fail@plt+0x3bb8>
   137ec:	mov	r5, r6
   137f0:	str	r0, [sp, #88]	; 0x58
   137f4:	mov	r8, #0
   137f8:	tst	r4, #1
   137fc:	str	r7, [fp, #-64]	; 0xffffffc0
   13800:	bne	13838 <__assert_fail@plt+0x274c>
   13804:	ldr	r0, [sp, #80]	; 0x50
   13808:	ldrb	r0, [r0]
   1380c:	cmp	r0, #0
   13810:	beq	13838 <__assert_fail@plt+0x274c>
   13814:	ldr	r1, [sp, #80]	; 0x50
   13818:	add	r1, r1, #1
   1381c:	mov	r8, #0
   13820:	cmp	r8, sl
   13824:	strbcc	r0, [r5, r8]
   13828:	ldrb	r0, [r1, r8]
   1382c:	add	r8, r8, #1
   13830:	cmp	r0, #0
   13834:	bne	13820 <__assert_fail@plt+0x2734>
   13838:	ldr	r7, [sp, #88]	; 0x58
   1383c:	mov	r0, r7
   13840:	bl	10ff0 <strlen@plt>
   13844:	mov	r5, r6
   13848:	str	r0, [fp, #-72]	; 0xffffffb8
   1384c:	str	r7, [fp, #-84]	; 0xffffffac
   13850:	mov	r2, #1
   13854:	mov	r3, r4
   13858:	ldr	ip, [fp, #-80]	; 0xffffffb0
   1385c:	mov	lr, r9
   13860:	ldr	r7, [fp, #-64]	; 0xffffffc0
   13864:	b	13960 <__assert_fail@plt+0x2874>
   13868:	mov	r0, #1
   1386c:	b	138b0 <__assert_fail@plt+0x27c4>
   13870:	mov	r7, #0
   13874:	mov	r8, #0
   13878:	mov	r2, r0
   1387c:	b	1395c <__assert_fail@plt+0x2870>
   13880:	tst	r4, #1
   13884:	bne	138b0 <__assert_fail@plt+0x27c4>
   13888:	mov	r2, r0
   1388c:	b	138d8 <__assert_fail@plt+0x27ec>
   13890:	mov	r0, #1
   13894:	str	r0, [fp, #-72]	; 0xffffffb8
   13898:	mov	r8, #0
   1389c:	mov	r7, #5
   138a0:	b	1391c <__assert_fail@plt+0x2830>
   138a4:	mov	r2, #1
   138a8:	tst	r4, #1
   138ac:	beq	138d8 <__assert_fail@plt+0x27ec>
   138b0:	mov	r1, #1
   138b4:	str	r1, [fp, #-72]	; 0xffffffb8
   138b8:	mov	r8, #0
   138bc:	mov	r7, #2
   138c0:	movw	r1, #29991	; 0x7527
   138c4:	movt	r1, #1
   138c8:	str	r1, [fp, #-84]	; 0xffffffac
   138cc:	mov	r2, r0
   138d0:	mov	r3, #1
   138d4:	b	13960 <__assert_fail@plt+0x2874>
   138d8:	mov	r8, #1
   138dc:	mov	r7, #2
   138e0:	cmp	sl, #0
   138e4:	movne	r0, #39	; 0x27
   138e8:	strbne	r0, [r5]
   138ec:	movw	r0, #29991	; 0x7527
   138f0:	movt	r0, #1
   138f4:	str	r0, [fp, #-84]	; 0xffffffac
   138f8:	mov	r0, #1
   138fc:	str	r0, [fp, #-72]	; 0xffffffb8
   13900:	b	1395c <__assert_fail@plt+0x2870>
   13904:	mov	r7, #5
   13908:	tst	r4, #1
   1390c:	beq	13934 <__assert_fail@plt+0x2848>
   13910:	mov	r0, #1
   13914:	str	r0, [fp, #-72]	; 0xffffffb8
   13918:	mov	r8, #0
   1391c:	movw	r0, #29987	; 0x7523
   13920:	movt	r0, #1
   13924:	str	r0, [fp, #-84]	; 0xffffffac
   13928:	mov	r2, #1
   1392c:	mov	r3, #1
   13930:	b	13960 <__assert_fail@plt+0x2874>
   13934:	cmp	sl, #0
   13938:	movne	r0, #34	; 0x22
   1393c:	strbne	r0, [r5]
   13940:	mov	r8, #1
   13944:	movw	r0, #29987	; 0x7523
   13948:	movt	r0, #1
   1394c:	str	r0, [fp, #-84]	; 0xffffffac
   13950:	mov	r0, #1
   13954:	str	r0, [fp, #-72]	; 0xffffffb8
   13958:	mov	r2, #1
   1395c:	mov	r3, #0
   13960:	ldr	r0, [fp, #-72]	; 0xffffffb8
   13964:	cmp	r0, #0
   13968:	movwne	r0, #1
   1396c:	and	r1, r0, r3
   13970:	and	r1, r2, r1
   13974:	str	r1, [sp, #56]	; 0x38
   13978:	sub	r1, r7, #2
   1397c:	clz	r1, r1
   13980:	lsr	r1, r1, #5
   13984:	and	r1, r1, r3
   13988:	str	r1, [sp, #68]	; 0x44
   1398c:	str	r7, [fp, #-64]	; 0xffffffc0
   13990:	subs	r1, r7, #2
   13994:	movwne	r1, #1
   13998:	eor	r4, r3, #1
   1399c:	str	r4, [fp, #-88]	; 0xffffffa8
   139a0:	orr	r4, r1, r4
   139a4:	str	r4, [sp, #72]	; 0x48
   139a8:	and	r1, r1, r2
   139ac:	and	r0, r0, r1
   139b0:	str	r0, [fp, #-60]	; 0xffffffc4
   139b4:	str	r3, [fp, #-76]	; 0xffffffb4
   139b8:	orr	r0, r1, r3
   139bc:	eor	r0, r0, #1
   139c0:	ldr	r1, [fp, #16]
   139c4:	clz	r1, r1
   139c8:	lsr	r1, r1, #5
   139cc:	orr	r0, r1, r0
   139d0:	str	r0, [fp, #-68]	; 0xffffffbc
   139d4:	str	r2, [sp, #92]	; 0x5c
   139d8:	eor	r0, r2, #1
   139dc:	str	r0, [sp, #60]	; 0x3c
   139e0:	mov	r7, #0
   139e4:	cmn	lr, #1
   139e8:	beq	139f8 <__assert_fail@plt+0x290c>
   139ec:	cmp	r7, lr
   139f0:	bne	13a04 <__assert_fail@plt+0x2918>
   139f4:	b	14510 <__assert_fail@plt+0x3424>
   139f8:	ldrb	r0, [ip, r7]
   139fc:	cmp	r0, #0
   13a00:	beq	14510 <__assert_fail@plt+0x3424>
   13a04:	mov	r9, #0
   13a08:	ldr	r0, [fp, #-60]	; 0xffffffc4
   13a0c:	cmp	r0, #0
   13a10:	beq	13a44 <__assert_fail@plt+0x2958>
   13a14:	ldr	r0, [fp, #-72]	; 0xffffffb8
   13a18:	add	r4, r7, r0
   13a1c:	cmp	r0, #2
   13a20:	bcc	13a3c <__assert_fail@plt+0x2950>
   13a24:	cmn	lr, #1
   13a28:	bne	13a3c <__assert_fail@plt+0x2950>
   13a2c:	mov	r0, ip
   13a30:	bl	10ff0 <strlen@plt>
   13a34:	ldr	ip, [fp, #-80]	; 0xffffffb0
   13a38:	mov	lr, r0
   13a3c:	cmp	r4, lr
   13a40:	bls	13a50 <__assert_fail@plt+0x2964>
   13a44:	mov	r0, #0
   13a48:	str	r0, [fp, #-52]	; 0xffffffcc
   13a4c:	b	13a94 <__assert_fail@plt+0x29a8>
   13a50:	mov	r4, lr
   13a54:	add	r0, ip, r7
   13a58:	ldr	r1, [fp, #-84]	; 0xffffffac
   13a5c:	ldr	r2, [fp, #-72]	; 0xffffffb8
   13a60:	bl	10fe4 <bcmp@plt>
   13a64:	cmp	r0, #0
   13a68:	mov	r1, r0
   13a6c:	movwne	r1, #1
   13a70:	ldr	r2, [fp, #-88]	; 0xffffffa8
   13a74:	orr	r1, r1, r2
   13a78:	tst	r1, #1
   13a7c:	beq	145e4 <__assert_fail@plt+0x34f8>
   13a80:	clz	r0, r0
   13a84:	lsr	r0, r0, #5
   13a88:	str	r0, [fp, #-52]	; 0xffffffcc
   13a8c:	ldr	ip, [fp, #-80]	; 0xffffffb0
   13a90:	mov	lr, r4
   13a94:	ldrb	r4, [ip, r7]
   13a98:	cmp	r4, #126	; 0x7e
   13a9c:	bhi	13fcc <__assert_fail@plt+0x2ee0>
   13aa0:	mov	r6, #1
   13aa4:	mov	r2, #110	; 0x6e
   13aa8:	mov	r0, #97	; 0x61
   13aac:	add	r3, pc, #4
   13ab0:	mov	r1, #0
   13ab4:	ldr	pc, [r3, r4, lsl #2]
   13ab8:	andeq	r3, r1, ip, lsr #28
   13abc:	andeq	r3, r1, ip, asr #31
   13ac0:	andeq	r3, r1, ip, asr #31
   13ac4:	andeq	r3, r1, ip, asr #31
   13ac8:	andeq	r3, r1, ip, asr #31
   13acc:	andeq	r3, r1, ip, asr #31
   13ad0:	andeq	r3, r1, ip, asr #31
   13ad4:	andeq	r4, r1, r0, lsr #1
   13ad8:	andeq	r3, r1, ip, lsl #28
   13adc:	andeq	r3, r1, r4, lsl #28
   13ae0:	andeq	r3, r1, r8, lsl lr
   13ae4:	andeq	r3, r1, r4, lsr pc
   13ae8:	strdeq	r3, [r1], -ip
   13aec:	andeq	r3, r1, r4, lsl lr
   13af0:	andeq	r3, r1, ip, asr #31
   13af4:	andeq	r3, r1, ip, asr #31
   13af8:	andeq	r3, r1, ip, asr #31
   13afc:	andeq	r3, r1, ip, asr #31
   13b00:	andeq	r3, r1, ip, asr #31
   13b04:	andeq	r3, r1, ip, asr #31
   13b08:	andeq	r3, r1, ip, asr #31
   13b0c:	andeq	r3, r1, ip, asr #31
   13b10:	andeq	r3, r1, ip, asr #31
   13b14:	andeq	r3, r1, ip, asr #31
   13b18:	andeq	r3, r1, ip, asr #31
   13b1c:	andeq	r3, r1, ip, asr #31
   13b20:	andeq	r3, r1, ip, asr #31
   13b24:	andeq	r3, r1, ip, asr #31
   13b28:	andeq	r3, r1, ip, asr #31
   13b2c:	andeq	r3, r1, ip, asr #31
   13b30:	andeq	r3, r1, ip, asr #31
   13b34:	andeq	r3, r1, ip, asr #31
   13b38:			; <UNDEFINED> instruction: 0x00013db0
   13b3c:			; <UNDEFINED> instruction: 0x00013db4
   13b40:			; <UNDEFINED> instruction: 0x00013db4
   13b44:	muleq	r1, ip, sp
   13b48:			; <UNDEFINED> instruction: 0x00013db4
   13b4c:			; <UNDEFINED> instruction: 0x00013cb4
   13b50:			; <UNDEFINED> instruction: 0x00013db4
   13b54:	andeq	r3, r1, ip, lsr pc
   13b58:			; <UNDEFINED> instruction: 0x00013db4
   13b5c:			; <UNDEFINED> instruction: 0x00013db4
   13b60:			; <UNDEFINED> instruction: 0x00013db4
   13b64:			; <UNDEFINED> instruction: 0x00013cb4
   13b68:			; <UNDEFINED> instruction: 0x00013cb4
   13b6c:			; <UNDEFINED> instruction: 0x00013cb4
   13b70:			; <UNDEFINED> instruction: 0x00013cb4
   13b74:			; <UNDEFINED> instruction: 0x00013cb4
   13b78:			; <UNDEFINED> instruction: 0x00013cb4
   13b7c:			; <UNDEFINED> instruction: 0x00013cb4
   13b80:			; <UNDEFINED> instruction: 0x00013cb4
   13b84:			; <UNDEFINED> instruction: 0x00013cb4
   13b88:			; <UNDEFINED> instruction: 0x00013cb4
   13b8c:			; <UNDEFINED> instruction: 0x00013cb4
   13b90:			; <UNDEFINED> instruction: 0x00013cb4
   13b94:			; <UNDEFINED> instruction: 0x00013cb4
   13b98:			; <UNDEFINED> instruction: 0x00013cb4
   13b9c:			; <UNDEFINED> instruction: 0x00013cb4
   13ba0:			; <UNDEFINED> instruction: 0x00013cb4
   13ba4:			; <UNDEFINED> instruction: 0x00013db4
   13ba8:			; <UNDEFINED> instruction: 0x00013db4
   13bac:			; <UNDEFINED> instruction: 0x00013db4
   13bb0:			; <UNDEFINED> instruction: 0x00013db4
   13bb4:	andeq	r3, r1, r4, lsl #30
   13bb8:	andeq	r3, r1, ip, asr #31
   13bbc:			; <UNDEFINED> instruction: 0x00013cb4
   13bc0:			; <UNDEFINED> instruction: 0x00013cb4
   13bc4:			; <UNDEFINED> instruction: 0x00013cb4
   13bc8:			; <UNDEFINED> instruction: 0x00013cb4
   13bcc:			; <UNDEFINED> instruction: 0x00013cb4
   13bd0:			; <UNDEFINED> instruction: 0x00013cb4
   13bd4:			; <UNDEFINED> instruction: 0x00013cb4
   13bd8:			; <UNDEFINED> instruction: 0x00013cb4
   13bdc:			; <UNDEFINED> instruction: 0x00013cb4
   13be0:			; <UNDEFINED> instruction: 0x00013cb4
   13be4:			; <UNDEFINED> instruction: 0x00013cb4
   13be8:			; <UNDEFINED> instruction: 0x00013cb4
   13bec:			; <UNDEFINED> instruction: 0x00013cb4
   13bf0:			; <UNDEFINED> instruction: 0x00013cb4
   13bf4:			; <UNDEFINED> instruction: 0x00013cb4
   13bf8:			; <UNDEFINED> instruction: 0x00013cb4
   13bfc:			; <UNDEFINED> instruction: 0x00013cb4
   13c00:			; <UNDEFINED> instruction: 0x00013cb4
   13c04:			; <UNDEFINED> instruction: 0x00013cb4
   13c08:			; <UNDEFINED> instruction: 0x00013cb4
   13c0c:			; <UNDEFINED> instruction: 0x00013cb4
   13c10:			; <UNDEFINED> instruction: 0x00013cb4
   13c14:			; <UNDEFINED> instruction: 0x00013cb4
   13c18:			; <UNDEFINED> instruction: 0x00013cb4
   13c1c:			; <UNDEFINED> instruction: 0x00013cb4
   13c20:			; <UNDEFINED> instruction: 0x00013cb4
   13c24:			; <UNDEFINED> instruction: 0x00013db4
   13c28:	ldrdeq	r3, [r1], -ip
   13c2c:			; <UNDEFINED> instruction: 0x00013cb4
   13c30:			; <UNDEFINED> instruction: 0x00013db4
   13c34:			; <UNDEFINED> instruction: 0x00013cb4
   13c38:			; <UNDEFINED> instruction: 0x00013db4
   13c3c:			; <UNDEFINED> instruction: 0x00013cb4
   13c40:			; <UNDEFINED> instruction: 0x00013cb4
   13c44:			; <UNDEFINED> instruction: 0x00013cb4
   13c48:			; <UNDEFINED> instruction: 0x00013cb4
   13c4c:			; <UNDEFINED> instruction: 0x00013cb4
   13c50:			; <UNDEFINED> instruction: 0x00013cb4
   13c54:			; <UNDEFINED> instruction: 0x00013cb4
   13c58:			; <UNDEFINED> instruction: 0x00013cb4
   13c5c:			; <UNDEFINED> instruction: 0x00013cb4
   13c60:			; <UNDEFINED> instruction: 0x00013cb4
   13c64:			; <UNDEFINED> instruction: 0x00013cb4
   13c68:			; <UNDEFINED> instruction: 0x00013cb4
   13c6c:			; <UNDEFINED> instruction: 0x00013cb4
   13c70:			; <UNDEFINED> instruction: 0x00013cb4
   13c74:			; <UNDEFINED> instruction: 0x00013cb4
   13c78:			; <UNDEFINED> instruction: 0x00013cb4
   13c7c:			; <UNDEFINED> instruction: 0x00013cb4
   13c80:			; <UNDEFINED> instruction: 0x00013cb4
   13c84:			; <UNDEFINED> instruction: 0x00013cb4
   13c88:			; <UNDEFINED> instruction: 0x00013cb4
   13c8c:			; <UNDEFINED> instruction: 0x00013cb4
   13c90:			; <UNDEFINED> instruction: 0x00013cb4
   13c94:			; <UNDEFINED> instruction: 0x00013cb4
   13c98:			; <UNDEFINED> instruction: 0x00013cb4
   13c9c:			; <UNDEFINED> instruction: 0x00013cb4
   13ca0:			; <UNDEFINED> instruction: 0x00013cb4
   13ca4:	andeq	r3, r1, r0, ror sp
   13ca8:			; <UNDEFINED> instruction: 0x00013db4
   13cac:	andeq	r3, r1, r0, ror sp
   13cb0:	muleq	r1, ip, sp
   13cb4:	ldr	r0, [fp, #-68]	; 0xffffffbc
   13cb8:	tst	r0, #1
   13cbc:	bne	13ce8 <__assert_fail@plt+0x2bfc>
   13cc0:	ubfx	r0, r4, #5, #3
   13cc4:	ldr	r1, [fp, #16]
   13cc8:	ldr	r0, [r1, r0, lsl #2]
   13ccc:	and	r1, r4, #31
   13cd0:	mov	r2, #1
   13cd4:	tst	r0, r2, lsl r1
   13cd8:	beq	13ce8 <__assert_fail@plt+0x2bfc>
   13cdc:	mov	r0, r4
   13ce0:	mov	r1, r6
   13ce4:	b	13cfc <__assert_fail@plt+0x2c10>
   13ce8:	ldr	r0, [fp, #-52]	; 0xffffffcc
   13cec:	cmp	r0, #0
   13cf0:	mov	r0, r4
   13cf4:	mov	r1, r6
   13cf8:	beq	14034 <__assert_fail@plt+0x2f48>
   13cfc:	ldr	r2, [fp, #-76]	; 0xffffffb4
   13d00:	tst	r2, #1
   13d04:	bne	145f8 <__assert_fail@plt+0x350c>
   13d08:	ldr	r2, [fp, #-64]	; 0xffffffc0
   13d0c:	subs	r2, r2, #2
   13d10:	movwne	r2, #1
   13d14:	ldr	r3, [fp, #-56]	; 0xffffffc8
   13d18:	orr	r2, r2, r3
   13d1c:	tst	r2, #1
   13d20:	bne	13d5c <__assert_fail@plt+0x2c70>
   13d24:	cmp	r8, sl
   13d28:	movcc	r2, #39	; 0x27
   13d2c:	strbcc	r2, [r5, r8]
   13d30:	add	r2, r8, #1
   13d34:	cmp	r2, sl
   13d38:	movcc	r3, #36	; 0x24
   13d3c:	strbcc	r3, [r5, r2]
   13d40:	add	r2, r8, #2
   13d44:	cmp	r2, sl
   13d48:	movcc	r3, #39	; 0x27
   13d4c:	strbcc	r3, [r5, r2]
   13d50:	add	r8, r8, #3
   13d54:	mov	r2, #1
   13d58:	str	r2, [fp, #-56]	; 0xffffffc8
   13d5c:	cmp	r8, sl
   13d60:	movcc	r2, #92	; 0x5c
   13d64:	strbcc	r2, [r5, r8]
   13d68:	add	r8, r8, #1
   13d6c:	b	14078 <__assert_fail@plt+0x2f8c>
   13d70:	cmp	lr, #1
   13d74:	beq	13d9c <__assert_fail@plt+0x2cb0>
   13d78:	mov	r6, #0
   13d7c:	cmn	lr, #1
   13d80:	bne	13da8 <__assert_fail@plt+0x2cbc>
   13d84:	ldrb	r0, [ip, #1]
   13d88:	cmp	r0, #0
   13d8c:	beq	13d9c <__assert_fail@plt+0x2cb0>
   13d90:	mvn	lr, #0
   13d94:	mov	r9, #0
   13d98:	b	13cb4 <__assert_fail@plt+0x2bc8>
   13d9c:	mov	r6, #0
   13da0:	cmp	r7, #0
   13da4:	beq	13db0 <__assert_fail@plt+0x2cc4>
   13da8:	mov	r9, #0
   13dac:	b	13cb4 <__assert_fail@plt+0x2bc8>
   13db0:	mov	r1, #1
   13db4:	ldr	r0, [fp, #-64]	; 0xffffffc0
   13db8:	cmp	r0, #2
   13dbc:	bne	13dd4 <__assert_fail@plt+0x2ce8>
   13dc0:	ldr	r0, [fp, #-76]	; 0xffffffb4
   13dc4:	tst	r0, #1
   13dc8:	mov	r6, r1
   13dcc:	beq	13cb4 <__assert_fail@plt+0x2bc8>
   13dd0:	b	145f8 <__assert_fail@plt+0x350c>
   13dd4:	mov	r6, r1
   13dd8:	b	13cb4 <__assert_fail@plt+0x2bc8>
   13ddc:	ldr	r0, [fp, #-64]	; 0xffffffc0
   13de0:	cmp	r0, #2
   13de4:	bne	14018 <__assert_fail@plt+0x2f2c>
   13de8:	ldr	r0, [fp, #-76]	; 0xffffffb4
   13dec:	tst	r0, #1
   13df0:	bne	145f8 <__assert_fail@plt+0x350c>
   13df4:	mov	r9, #0
   13df8:	b	1402c <__assert_fail@plt+0x2f40>
   13dfc:	mov	r0, #102	; 0x66
   13e00:	b	140a0 <__assert_fail@plt+0x2fb4>
   13e04:	mov	r2, #116	; 0x74
   13e08:	b	13e18 <__assert_fail@plt+0x2d2c>
   13e0c:	mov	r0, #98	; 0x62
   13e10:	b	140a0 <__assert_fail@plt+0x2fb4>
   13e14:	mov	r2, #114	; 0x72
   13e18:	ldr	r0, [sp, #72]	; 0x48
   13e1c:	tst	r0, #1
   13e20:	mov	r0, r2
   13e24:	bne	140a0 <__assert_fail@plt+0x2fb4>
   13e28:	b	145f8 <__assert_fail@plt+0x350c>
   13e2c:	ldr	r0, [sp, #92]	; 0x5c
   13e30:	tst	r0, #1
   13e34:	beq	140bc <__assert_fail@plt+0x2fd0>
   13e38:	ldr	r0, [fp, #-76]	; 0xffffffb4
   13e3c:	tst	r0, #1
   13e40:	bne	145f8 <__assert_fail@plt+0x350c>
   13e44:	ldr	r0, [fp, #-64]	; 0xffffffc0
   13e48:	subs	r0, r0, #2
   13e4c:	movwne	r0, #1
   13e50:	ldr	r1, [fp, #-56]	; 0xffffffc8
   13e54:	orr	r0, r0, r1
   13e58:	tst	r0, #1
   13e5c:	bne	13e98 <__assert_fail@plt+0x2dac>
   13e60:	cmp	r8, sl
   13e64:	movcc	r0, #39	; 0x27
   13e68:	strbcc	r0, [r5, r8]
   13e6c:	add	r0, r8, #1
   13e70:	cmp	r0, sl
   13e74:	movcc	r1, #36	; 0x24
   13e78:	strbcc	r1, [r5, r0]
   13e7c:	add	r0, r8, #2
   13e80:	cmp	r0, sl
   13e84:	movcc	r1, #39	; 0x27
   13e88:	strbcc	r1, [r5, r0]
   13e8c:	add	r8, r8, #3
   13e90:	mov	r0, #1
   13e94:	str	r0, [fp, #-56]	; 0xffffffc8
   13e98:	cmp	r8, sl
   13e9c:	movcc	r0, #92	; 0x5c
   13ea0:	strbcc	r0, [r5, r8]
   13ea4:	add	r0, r8, #1
   13ea8:	mov	r6, #0
   13eac:	mov	r9, #1
   13eb0:	mov	r4, #48	; 0x30
   13eb4:	ldr	r1, [fp, #-64]	; 0xffffffc0
   13eb8:	cmp	r1, #2
   13ebc:	beq	14280 <__assert_fail@plt+0x3194>
   13ec0:	add	r1, r7, #1
   13ec4:	cmp	r1, lr
   13ec8:	bcs	14280 <__assert_fail@plt+0x3194>
   13ecc:	ldrb	r1, [ip, r1]
   13ed0:	sub	r1, r1, #48	; 0x30
   13ed4:	uxtb	r1, r1
   13ed8:	cmp	r1, #9
   13edc:	bhi	14280 <__assert_fail@plt+0x3194>
   13ee0:	cmp	r0, sl
   13ee4:	movcc	r1, #48	; 0x30
   13ee8:	strbcc	r1, [r5, r0]
   13eec:	add	r0, r8, #2
   13ef0:	cmp	r0, sl
   13ef4:	movcc	r1, #48	; 0x30
   13ef8:	strbcc	r1, [r5, r0]
   13efc:	add	r8, r8, #3
   13f00:	b	13cb4 <__assert_fail@plt+0x2bc8>
   13f04:	mov	r9, #0
   13f08:	mov	r4, #63	; 0x3f
   13f0c:	ldr	r0, [fp, #-64]	; 0xffffffc0
   13f10:	cmp	r0, #5
   13f14:	beq	14288 <__assert_fail@plt+0x319c>
   13f18:	cmp	r0, #2
   13f1c:	bne	14330 <__assert_fail@plt+0x3244>
   13f20:	ldr	r0, [fp, #-76]	; 0xffffffb4
   13f24:	tst	r0, #1
   13f28:	mov	r6, #0
   13f2c:	beq	13cb4 <__assert_fail@plt+0x2bc8>
   13f30:	b	145f8 <__assert_fail@plt+0x350c>
   13f34:	mov	r0, #118	; 0x76
   13f38:	b	140a0 <__assert_fail@plt+0x2fb4>
   13f3c:	mov	r4, #39	; 0x27
   13f40:	mov	r0, #1
   13f44:	str	r0, [sp, #64]	; 0x40
   13f48:	ldr	r0, [fp, #-64]	; 0xffffffc0
   13f4c:	cmp	r0, #2
   13f50:	bne	140d8 <__assert_fail@plt+0x2fec>
   13f54:	ldr	r0, [fp, #-76]	; 0xffffffb4
   13f58:	tst	r0, #1
   13f5c:	bne	145f8 <__assert_fail@plt+0x350c>
   13f60:	ldr	r2, [sp, #84]	; 0x54
   13f64:	cmp	r2, #0
   13f68:	mov	r0, r2
   13f6c:	movwne	r0, #1
   13f70:	clz	r1, sl
   13f74:	lsr	r1, r1, #5
   13f78:	orrs	r0, r0, r1
   13f7c:	moveq	r2, sl
   13f80:	str	r2, [sp, #84]	; 0x54
   13f84:	moveq	sl, r0
   13f88:	cmp	r8, sl
   13f8c:	movcc	r0, #39	; 0x27
   13f90:	strbcc	r0, [r5, r8]
   13f94:	add	r0, r8, #1
   13f98:	cmp	r0, sl
   13f9c:	movcc	r1, #92	; 0x5c
   13fa0:	strbcc	r1, [r5, r0]
   13fa4:	add	r0, r8, #2
   13fa8:	cmp	r0, sl
   13fac:	movcc	r1, #39	; 0x27
   13fb0:	strbcc	r1, [r5, r0]
   13fb4:	add	r8, r8, #3
   13fb8:	mov	r0, #0
   13fbc:	str	r0, [fp, #-56]	; 0xffffffc8
   13fc0:	mov	r9, #0
   13fc4:	mov	r6, #1
   13fc8:	b	13cb4 <__assert_fail@plt+0x2bc8>
   13fcc:	ldr	r0, [sp, #44]	; 0x2c
   13fd0:	cmp	r0, #1
   13fd4:	bne	140e0 <__assert_fail@plt+0x2ff4>
   13fd8:	str	lr, [sp, #32]
   13fdc:	bl	10fcc <__ctype_b_loc@plt>
   13fe0:	ldr	ip, [fp, #-80]	; 0xffffffb0
   13fe4:	ldr	r0, [r0]
   13fe8:	add	r0, r0, r4, lsl #1
   13fec:	ldrb	r0, [r0, #1]
   13ff0:	ubfx	r6, r0, #6, #1
   13ff4:	mov	r2, #1
   13ff8:	ldr	r0, [sp, #60]	; 0x3c
   13ffc:	orr	r1, r6, r0
   14000:	cmp	r2, #1
   14004:	bhi	14338 <__assert_fail@plt+0x324c>
   14008:	tst	r1, #1
   1400c:	beq	14338 <__assert_fail@plt+0x324c>
   14010:	ldr	lr, [sp, #32]
   14014:	b	13cb4 <__assert_fail@plt+0x2bc8>
   14018:	mov	r9, #0
   1401c:	mov	r0, #92	; 0x5c
   14020:	ldr	r1, [sp, #56]	; 0x38
   14024:	cmp	r1, #0
   14028:	beq	140a0 <__assert_fail@plt+0x2fb4>
   1402c:	mov	r4, #92	; 0x5c
   14030:	mov	r6, #0
   14034:	cmp	r9, #0
   14038:	bne	14070 <__assert_fail@plt+0x2f84>
   1403c:	ldr	r0, [fp, #-56]	; 0xffffffc8
   14040:	tst	r0, #1
   14044:	beq	14070 <__assert_fail@plt+0x2f84>
   14048:	cmp	r8, sl
   1404c:	movcc	r0, #39	; 0x27
   14050:	strbcc	r0, [r5, r8]
   14054:	add	r0, r8, #1
   14058:	cmp	r0, sl
   1405c:	movcc	r1, #39	; 0x27
   14060:	strbcc	r1, [r5, r0]
   14064:	add	r8, r8, #2
   14068:	mov	r0, #0
   1406c:	str	r0, [fp, #-56]	; 0xffffffc8
   14070:	mov	r1, r6
   14074:	mov	r0, r4
   14078:	cmp	r8, sl
   1407c:	strbcc	r0, [r5, r8]
   14080:	ldr	r0, [fp, #-48]	; 0xffffffd0
   14084:	and	r0, r0, r1
   14088:	str	r0, [fp, #-48]	; 0xffffffd0
   1408c:	add	r8, r8, #1
   14090:	add	r7, r7, #1
   14094:	cmn	lr, #1
   14098:	bne	139ec <__assert_fail@plt+0x2900>
   1409c:	b	139f8 <__assert_fail@plt+0x290c>
   140a0:	mov	r9, #0
   140a4:	ldr	r1, [sp, #92]	; 0x5c
   140a8:	tst	r1, #1
   140ac:	mov	r6, #0
   140b0:	mov	r1, #0
   140b4:	beq	13cb4 <__assert_fail@plt+0x2bc8>
   140b8:	b	13cfc <__assert_fail@plt+0x2c10>
   140bc:	mov	r4, #0
   140c0:	ldr	r0, [sp, #40]	; 0x28
   140c4:	cmp	r0, #0
   140c8:	mov	r9, #0
   140cc:	mov	r6, #0
   140d0:	beq	13cb4 <__assert_fail@plt+0x2bc8>
   140d4:	b	14090 <__assert_fail@plt+0x2fa4>
   140d8:	mov	r6, #1
   140dc:	b	13cb4 <__assert_fail@plt+0x2bc8>
   140e0:	mov	r0, #0
   140e4:	str	r0, [fp, #-36]	; 0xffffffdc
   140e8:	str	r0, [fp, #-40]	; 0xffffffd8
   140ec:	cmn	lr, #1
   140f0:	bne	14104 <__assert_fail@plt+0x3018>
   140f4:	mov	r0, ip
   140f8:	bl	10ff0 <strlen@plt>
   140fc:	ldr	ip, [fp, #-80]	; 0xffffffb0
   14100:	mov	lr, r0
   14104:	ldr	r0, [sp, #76]	; 0x4c
   14108:	add	r0, r0, r7
   1410c:	str	r0, [sp, #24]
   14110:	mov	r6, #1
   14114:	mov	r2, #0
   14118:	sub	r0, fp, #40	; 0x28
   1411c:	mov	r3, r0
   14120:	str	r5, [sp, #28]
   14124:	str	lr, [sp, #32]
   14128:	b	1416c <__assert_fail@plt+0x3080>
   1412c:	ldr	r5, [sp, #52]	; 0x34
   14130:	add	r5, r0, r5
   14134:	ldr	r0, [fp, #-44]	; 0xffffffd4
   14138:	bl	10f18 <iswprint@plt>
   1413c:	cmp	r0, #0
   14140:	movwne	r0, #1
   14144:	and	r6, r6, r0
   14148:	sub	r0, fp, #40	; 0x28
   1414c:	bl	10ed0 <mbsinit@plt>
   14150:	sub	r3, fp, #40	; 0x28
   14154:	mov	r2, r5
   14158:	ldr	lr, [sp, #32]
   1415c:	cmp	r0, #0
   14160:	ldr	r5, [sp, #28]
   14164:	ldr	ip, [fp, #-80]	; 0xffffffb0
   14168:	bne	13ff8 <__assert_fail@plt+0x2f0c>
   1416c:	str	r2, [sp, #52]	; 0x34
   14170:	add	r0, r2, r7
   14174:	add	r1, ip, r0
   14178:	str	r0, [sp, #48]	; 0x30
   1417c:	sub	r2, lr, r0
   14180:	sub	r0, fp, #44	; 0x2c
   14184:	bl	166e0 <__assert_fail@plt+0x55f4>
   14188:	cmp	r0, #0
   1418c:	beq	14504 <__assert_fail@plt+0x3418>
   14190:	cmn	r0, #1
   14194:	beq	144c0 <__assert_fail@plt+0x33d4>
   14198:	cmn	r0, #2
   1419c:	ldr	lr, [sp, #32]
   141a0:	beq	144c8 <__assert_fail@plt+0x33dc>
   141a4:	cmp	r0, #2
   141a8:	mov	r1, #0
   141ac:	movwcc	r1, #1
   141b0:	ldr	r2, [sp, #68]	; 0x44
   141b4:	eor	r2, r2, #1
   141b8:	orrs	r1, r2, r1
   141bc:	bne	1412c <__assert_fail@plt+0x3040>
   141c0:	ldr	r1, [sp, #52]	; 0x34
   141c4:	ldr	r2, [sp, #24]
   141c8:	add	r1, r2, r1
   141cc:	sub	r2, r0, #1
   141d0:	b	141e0 <__assert_fail@plt+0x30f4>
   141d4:	add	r1, r1, #1
   141d8:	subs	r2, r2, #1
   141dc:	beq	1412c <__assert_fail@plt+0x3040>
   141e0:	ldrb	r3, [r1]
   141e4:	sub	r3, r3, #91	; 0x5b
   141e8:	cmp	r3, #33	; 0x21
   141ec:	bhi	141d4 <__assert_fail@plt+0x30e8>
   141f0:	add	r5, pc, #0
   141f4:	ldr	pc, [r5, r3, lsl #2]
   141f8:	strdeq	r4, [r1], -r0
   141fc:	strdeq	r4, [r1], -r0
   14200:	ldrdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   14204:	strdeq	r4, [r1], -r0
   14208:	ldrdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   1420c:	strdeq	r4, [r1], -r0
   14210:	ldrdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   14214:	ldrdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   14218:	ldrdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   1421c:	ldrdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   14220:	ldrdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   14224:	ldrdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   14228:	ldrdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   1422c:	ldrdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   14230:	ldrdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   14234:	ldrdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   14238:	ldrdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   1423c:	ldrdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   14240:	ldrdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   14244:	ldrdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   14248:	ldrdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   1424c:	ldrdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   14250:	ldrdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   14254:	ldrdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   14258:	ldrdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   1425c:	ldrdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   14260:	ldrdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   14264:	ldrdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   14268:	ldrdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   1426c:	ldrdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   14270:	ldrdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   14274:	ldrdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   14278:	ldrdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   1427c:	strdeq	r4, [r1], -r0
   14280:	mov	r8, r0
   14284:	b	13cb4 <__assert_fail@plt+0x2bc8>
   14288:	ldr	r0, [sp, #36]	; 0x24
   1428c:	cmp	r0, #0
   14290:	beq	14330 <__assert_fail@plt+0x3244>
   14294:	add	r0, r7, #2
   14298:	cmp	r0, lr
   1429c:	bcs	14330 <__assert_fail@plt+0x3244>
   142a0:	add	r1, r7, ip
   142a4:	ldrb	r1, [r1, #1]
   142a8:	cmp	r1, #63	; 0x3f
   142ac:	bne	14330 <__assert_fail@plt+0x3244>
   142b0:	ldrb	r1, [ip, r0]
   142b4:	sub	r2, r1, #33	; 0x21
   142b8:	cmp	r2, #29
   142bc:	bhi	14330 <__assert_fail@plt+0x3244>
   142c0:	mov	r3, #1
   142c4:	movw	r6, #20929	; 0x51c1
   142c8:	movt	r6, #14336	; 0x3800
   142cc:	tst	r6, r3, lsl r2
   142d0:	beq	14330 <__assert_fail@plt+0x3244>
   142d4:	ldr	r2, [fp, #-76]	; 0xffffffb4
   142d8:	tst	r2, #1
   142dc:	bne	145f8 <__assert_fail@plt+0x350c>
   142e0:	cmp	r8, sl
   142e4:	movcc	r2, #63	; 0x3f
   142e8:	strbcc	r2, [r5, r8]
   142ec:	add	r2, r8, #1
   142f0:	cmp	r2, sl
   142f4:	movcc	r3, #34	; 0x22
   142f8:	strbcc	r3, [r5, r2]
   142fc:	add	r2, r8, #2
   14300:	cmp	r2, sl
   14304:	movcc	r3, #34	; 0x22
   14308:	strbcc	r3, [r5, r2]
   1430c:	add	r2, r8, #3
   14310:	cmp	r2, sl
   14314:	movcc	r3, #63	; 0x3f
   14318:	strbcc	r3, [r5, r2]
   1431c:	add	r8, r8, #4
   14320:	mov	r7, r0
   14324:	mov	r4, r1
   14328:	mov	r6, #0
   1432c:	b	13cb4 <__assert_fail@plt+0x2bc8>
   14330:	mov	r6, #0
   14334:	b	13cb4 <__assert_fail@plt+0x2bc8>
   14338:	add	r0, r2, r7
   1433c:	str	r0, [sp, #52]	; 0x34
   14340:	mov	r2, #0
   14344:	ldr	lr, [sp, #32]
   14348:	ldr	r0, [fp, #-56]	; 0xffffffc8
   1434c:	str	r1, [sp, #48]	; 0x30
   14350:	tst	r1, #1
   14354:	bne	14430 <__assert_fail@plt+0x3344>
   14358:	ldr	r1, [fp, #-76]	; 0xffffffb4
   1435c:	tst	r1, #1
   14360:	bne	145f8 <__assert_fail@plt+0x350c>
   14364:	mov	r3, r0
   14368:	ldr	r0, [fp, #-64]	; 0xffffffc0
   1436c:	subs	r1, r0, #2
   14370:	movwne	r1, #1
   14374:	orr	r1, r1, r3
   14378:	tst	r1, #1
   1437c:	bne	143b4 <__assert_fail@plt+0x32c8>
   14380:	cmp	r8, sl
   14384:	movcc	r0, #39	; 0x27
   14388:	strbcc	r0, [r5, r8]
   1438c:	add	r2, r8, #1
   14390:	cmp	r2, sl
   14394:	movcc	r0, #36	; 0x24
   14398:	strbcc	r0, [r5, r2]
   1439c:	add	r2, r8, #2
   143a0:	cmp	r2, sl
   143a4:	movcc	r0, #39	; 0x27
   143a8:	strbcc	r0, [r5, r2]
   143ac:	add	r8, r8, #3
   143b0:	mov	r3, #1
   143b4:	cmp	r8, sl
   143b8:	movcc	r1, #92	; 0x5c
   143bc:	strbcc	r1, [r5, r8]
   143c0:	add	r2, r8, #1
   143c4:	cmp	r2, sl
   143c8:	bcs	143dc <__assert_fail@plt+0x32f0>
   143cc:	uxtb	r1, r4
   143d0:	mov	r0, #48	; 0x30
   143d4:	orr	r1, r0, r1, lsr #6
   143d8:	strb	r1, [r5, r2]
   143dc:	add	r2, r8, #2
   143e0:	cmp	r2, sl
   143e4:	lsrcc	r1, r4, #3
   143e8:	movcc	r0, #6
   143ec:	bficc	r1, r0, #3, #29
   143f0:	strbcc	r1, [r5, r2]
   143f4:	mov	r0, #6
   143f8:	bfi	r4, r0, #3, #29
   143fc:	add	r8, r8, #3
   14400:	mov	r2, #1
   14404:	mov	r0, r3
   14408:	b	14454 <__assert_fail@plt+0x3368>
   1440c:	cmp	r8, sl
   14410:	strbcc	r4, [r5, r8]
   14414:	ldr	r1, [sp, #76]	; 0x4c
   14418:	ldrb	r4, [r1, r7]
   1441c:	add	r8, r8, #1
   14420:	mov	r7, r3
   14424:	ldr	r1, [sp, #48]	; 0x30
   14428:	tst	r1, #1
   1442c:	beq	14358 <__assert_fail@plt+0x326c>
   14430:	ldr	r1, [fp, #-52]	; 0xffffffcc
   14434:	tst	r1, #1
   14438:	beq	1444c <__assert_fail@plt+0x3360>
   1443c:	cmp	r8, sl
   14440:	movcc	r1, #92	; 0x5c
   14444:	strbcc	r1, [r5, r8]
   14448:	add	r8, r8, #1
   1444c:	mov	r1, #0
   14450:	str	r1, [fp, #-52]	; 0xffffffcc
   14454:	and	r9, r2, #1
   14458:	add	r3, r7, #1
   1445c:	ldr	r1, [sp, #52]	; 0x34
   14460:	cmp	r1, r3
   14464:	bls	144a8 <__assert_fail@plt+0x33bc>
   14468:	cmp	r9, #0
   1446c:	movwne	r9, #1
   14470:	mvn	r1, r0
   14474:	orr	r1, r1, r9
   14478:	tst	r1, #1
   1447c:	bne	1440c <__assert_fail@plt+0x3320>
   14480:	cmp	r8, sl
   14484:	movcc	r1, #39	; 0x27
   14488:	strbcc	r1, [r5, r8]
   1448c:	add	r1, r8, #1
   14490:	cmp	r1, sl
   14494:	movcc	r0, #39	; 0x27
   14498:	strbcc	r0, [r5, r1]
   1449c:	add	r8, r8, #2
   144a0:	mov	r0, #0
   144a4:	b	1440c <__assert_fail@plt+0x3320>
   144a8:	str	r0, [fp, #-56]	; 0xffffffc8
   144ac:	cmp	r9, #0
   144b0:	movwne	r9, #1
   144b4:	cmp	r9, #0
   144b8:	beq	1403c <__assert_fail@plt+0x2f50>
   144bc:	b	14070 <__assert_fail@plt+0x2f84>
   144c0:	mov	r6, #0
   144c4:	b	14504 <__assert_fail@plt+0x3418>
   144c8:	mov	r6, #0
   144cc:	ldr	r0, [sp, #48]	; 0x30
   144d0:	cmp	r0, lr
   144d4:	bcs	14504 <__assert_fail@plt+0x3418>
   144d8:	ldr	ip, [fp, #-80]	; 0xffffffb0
   144dc:	add	r0, ip, r7
   144e0:	ldr	r2, [sp, #52]	; 0x34
   144e4:	ldrb	r1, [r0, r2]
   144e8:	cmp	r1, #0
   144ec:	beq	13ff8 <__assert_fail@plt+0x2f0c>
   144f0:	add	r2, r2, #1
   144f4:	add	r1, r7, r2
   144f8:	cmp	r1, lr
   144fc:	bcc	144e4 <__assert_fail@plt+0x33f8>
   14500:	b	13ff8 <__assert_fail@plt+0x2f0c>
   14504:	ldr	ip, [fp, #-80]	; 0xffffffb0
   14508:	ldr	r2, [sp, #52]	; 0x34
   1450c:	b	13ff8 <__assert_fail@plt+0x2f0c>
   14510:	ldr	r1, [fp, #-64]	; 0xffffffc0
   14514:	eor	r0, r1, #2
   14518:	orr	r0, r0, r8
   1451c:	clz	r0, r0
   14520:	lsr	r0, r0, #5
   14524:	ldr	r3, [fp, #-76]	; 0xffffffb4
   14528:	tst	r3, r0
   1452c:	bne	145f8 <__assert_fail@plt+0x350c>
   14530:	mov	r6, r5
   14534:	subs	r0, r1, #2
   14538:	movwne	r0, #1
   1453c:	orr	r0, r3, r0
   14540:	tst	r0, #1
   14544:	ldr	r2, [sp, #92]	; 0x5c
   14548:	ldreq	r0, [sp, #64]	; 0x40
   1454c:	eoreq	r0, r0, #1
   14550:	tsteq	r0, #1
   14554:	bne	14594 <__assert_fail@plt+0x34a8>
   14558:	mov	r9, lr
   1455c:	ldr	r0, [fp, #-48]	; 0xffffffd0
   14560:	tst	r0, #1
   14564:	bne	14660 <__assert_fail@plt+0x3574>
   14568:	ldr	r0, [sp, #84]	; 0x54
   1456c:	cmp	r0, #0
   14570:	beq	14594 <__assert_fail@plt+0x34a8>
   14574:	mov	r0, #0
   14578:	str	r0, [fp, #-48]	; 0xffffffd0
   1457c:	mov	r1, #2
   14580:	cmp	sl, #0
   14584:	mov	r0, r2
   14588:	mov	r4, r3
   1458c:	ldr	r7, [sp, #84]	; 0x54
   14590:	beq	1376c <__assert_fail@plt+0x2680>
   14594:	ldr	r1, [fp, #-84]	; 0xffffffac
   14598:	clz	r0, r1
   1459c:	lsr	r0, r0, #5
   145a0:	orr	r0, r0, r3
   145a4:	tst	r0, #1
   145a8:	bne	145d4 <__assert_fail@plt+0x34e8>
   145ac:	ldrb	r0, [r1]
   145b0:	cmp	r0, #0
   145b4:	beq	145d4 <__assert_fail@plt+0x34e8>
   145b8:	add	r1, r1, #1
   145bc:	cmp	r8, sl
   145c0:	strbcc	r0, [r6, r8]
   145c4:	add	r8, r8, #1
   145c8:	ldrb	r0, [r1], #1
   145cc:	cmp	r0, #0
   145d0:	bne	145bc <__assert_fail@plt+0x34d0>
   145d4:	cmp	r8, sl
   145d8:	movcc	r0, #0
   145dc:	strbcc	r0, [r6, r8]
   145e0:	b	14654 <__assert_fail@plt+0x3568>
   145e4:	ldr	ip, [fp, #-80]	; 0xffffffb0
   145e8:	mov	lr, r4
   145ec:	b	145f8 <__assert_fail@plt+0x350c>
   145f0:	ldr	r5, [sp, #28]
   145f4:	ldr	ip, [fp, #-80]	; 0xffffffb0
   145f8:	mov	r0, #0
   145fc:	ldr	r1, [fp, #12]
   14600:	bic	r1, r1, #2
   14604:	mov	r2, #2
   14608:	ldr	r3, [sp, #92]	; 0x5c
   1460c:	tst	r3, #1
   14610:	movwne	r2, #4
   14614:	ldr	r3, [fp, #-64]	; 0xffffffc0
   14618:	cmp	r3, #2
   1461c:	movne	r2, r3
   14620:	str	r2, [sp]
   14624:	str	r1, [sp, #4]
   14628:	str	r0, [sp, #8]
   1462c:	ldr	r0, [sp, #80]	; 0x50
   14630:	str	r0, [sp, #12]
   14634:	ldr	r0, [sp, #88]	; 0x58
   14638:	str	r0, [sp, #16]
   1463c:	mov	r0, r5
   14640:	mov	r1, sl
   14644:	mov	r2, ip
   14648:	mov	r3, lr
   1464c:	bl	136e0 <__assert_fail@plt+0x25f4>
   14650:	mov	r8, r0
   14654:	mov	r0, r8
   14658:	sub	sp, fp, #28
   1465c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14660:	mov	r0, #5
   14664:	str	r0, [sp]
   14668:	ldr	r0, [fp, #12]
   1466c:	str	r0, [sp, #4]
   14670:	ldr	r0, [fp, #16]
   14674:	str	r0, [sp, #8]
   14678:	ldr	r0, [sp, #80]	; 0x50
   1467c:	str	r0, [sp, #12]
   14680:	ldr	r0, [sp, #88]	; 0x58
   14684:	str	r0, [sp, #16]
   14688:	mov	r0, r6
   1468c:	ldr	r1, [sp, #84]	; 0x54
   14690:	ldr	r2, [fp, #-80]	; 0xffffffb0
   14694:	mov	r3, r9
   14698:	b	1464c <__assert_fail@plt+0x3560>
   1469c:	bl	110d4 <abort@plt>
   146a0:	mov	r3, r2
   146a4:	mov	r2, #0
   146a8:	b	146ac <__assert_fail@plt+0x35c0>
   146ac:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   146b0:	add	fp, sp, #28
   146b4:	sub	sp, sp, #36	; 0x24
   146b8:	mov	r4, r2
   146bc:	str	r2, [sp, #24]
   146c0:	mov	r5, r1
   146c4:	mov	r6, r0
   146c8:	str	r0, [sp, #20]
   146cc:	movw	r8, #33136	; 0x8170
   146d0:	movt	r8, #2
   146d4:	cmp	r3, #0
   146d8:	movne	r8, r3
   146dc:	bl	11014 <__errno_location@plt>
   146e0:	str	r0, [sp, #28]
   146e4:	ldm	r8, {r3, r9}
   146e8:	ldr	r1, [r8, #40]	; 0x28
   146ec:	ldr	r2, [r8, #44]	; 0x2c
   146f0:	ldr	r7, [r0]
   146f4:	str	r7, [sp, #32]
   146f8:	add	sl, r8, #8
   146fc:	cmp	r4, #0
   14700:	orreq	r9, r9, #1
   14704:	stm	sp, {r3, r9, sl}
   14708:	str	r1, [sp, #12]
   1470c:	str	r2, [sp, #16]
   14710:	mov	r0, #0
   14714:	mov	r1, #0
   14718:	mov	r2, r6
   1471c:	mov	r3, r5
   14720:	mov	r7, r5
   14724:	bl	136e0 <__assert_fail@plt+0x25f4>
   14728:	mov	r5, r0
   1472c:	add	r4, r0, #1
   14730:	mov	r0, r4
   14734:	bl	1564c <__assert_fail@plt+0x4560>
   14738:	mov	r6, r0
   1473c:	ldr	r0, [r8]
   14740:	ldr	r1, [r8, #40]	; 0x28
   14744:	ldr	r2, [r8, #44]	; 0x2c
   14748:	stm	sp, {r0, r9, sl}
   1474c:	str	r1, [sp, #12]
   14750:	str	r2, [sp, #16]
   14754:	mov	r0, r6
   14758:	mov	r1, r4
   1475c:	ldr	r2, [sp, #20]
   14760:	mov	r3, r7
   14764:	bl	136e0 <__assert_fail@plt+0x25f4>
   14768:	ldr	r0, [sp, #24]
   1476c:	ldr	r1, [sp, #32]
   14770:	ldr	r2, [sp, #28]
   14774:	str	r1, [r2]
   14778:	cmp	r0, #0
   1477c:	strne	r5, [r0]
   14780:	mov	r0, r6
   14784:	sub	sp, fp, #28
   14788:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1478c:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   14790:	add	fp, sp, #24
   14794:	movw	r8, #33024	; 0x8100
   14798:	movt	r8, #2
   1479c:	ldr	r4, [r8]
   147a0:	movw	r5, #33028	; 0x8104
   147a4:	movt	r5, #2
   147a8:	ldr	r0, [r5]
   147ac:	cmp	r0, #2
   147b0:	blt	147dc <__assert_fail@plt+0x36f0>
   147b4:	add	r7, r4, #12
   147b8:	mov	r6, #0
   147bc:	ldr	r0, [r7, r6, lsl #3]
   147c0:	bl	132e8 <__assert_fail@plt+0x21fc>
   147c4:	add	r0, r6, #1
   147c8:	ldr	r1, [r5]
   147cc:	add	r2, r6, #2
   147d0:	cmp	r2, r1
   147d4:	mov	r6, r0
   147d8:	blt	147bc <__assert_fail@plt+0x36d0>
   147dc:	ldr	r0, [r4, #4]
   147e0:	movw	r9, #33184	; 0x81a0
   147e4:	movt	r9, #2
   147e8:	cmp	r0, r9
   147ec:	movw	r7, #33032	; 0x8108
   147f0:	movt	r7, #2
   147f4:	beq	14804 <__assert_fail@plt+0x3718>
   147f8:	bl	132e8 <__assert_fail@plt+0x21fc>
   147fc:	mov	r0, #256	; 0x100
   14800:	stm	r7, {r0, r9}
   14804:	cmp	r4, r7
   14808:	beq	14818 <__assert_fail@plt+0x372c>
   1480c:	mov	r0, r4
   14810:	bl	132e8 <__assert_fail@plt+0x21fc>
   14814:	str	r7, [r8]
   14818:	mov	r0, #1
   1481c:	str	r0, [r5]
   14820:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   14824:	movw	r3, #33136	; 0x8170
   14828:	movt	r3, #2
   1482c:	mvn	r2, #0
   14830:	b	14834 <__assert_fail@plt+0x3748>
   14834:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   14838:	add	fp, sp, #28
   1483c:	sub	sp, sp, #44	; 0x2c
   14840:	mov	r7, r3
   14844:	str	r2, [sp, #36]	; 0x24
   14848:	str	r1, [sp, #32]
   1484c:	mov	r5, r0
   14850:	bl	11014 <__errno_location@plt>
   14854:	cmp	r5, #0
   14858:	bmi	149c8 <__assert_fail@plt+0x38dc>
   1485c:	cmn	r5, #-2147483647	; 0x80000001
   14860:	beq	149c8 <__assert_fail@plt+0x38dc>
   14864:	movw	r4, #33024	; 0x8100
   14868:	movt	r4, #2
   1486c:	ldr	r6, [r4]
   14870:	str	r0, [sp, #28]
   14874:	ldr	r0, [r0]
   14878:	str	r0, [sp, #24]
   1487c:	movw	r8, #33028	; 0x8104
   14880:	movt	r8, #2
   14884:	ldr	r1, [r8]
   14888:	cmp	r1, r5
   1488c:	ble	14898 <__assert_fail@plt+0x37ac>
   14890:	mov	sl, r6
   14894:	b	14904 <__assert_fail@plt+0x3818>
   14898:	str	r1, [fp, #-32]	; 0xffffffe0
   1489c:	mov	r0, #8
   148a0:	str	r0, [sp]
   148a4:	movw	r9, #33032	; 0x8108
   148a8:	movt	r9, #2
   148ac:	subs	r0, r6, r9
   148b0:	movne	r0, r6
   148b4:	sub	r1, r5, r1
   148b8:	add	r2, r1, #1
   148bc:	sub	r1, fp, #32
   148c0:	mvn	r3, #-2147483648	; 0x80000000
   148c4:	bl	15728 <__assert_fail@plt+0x463c>
   148c8:	mov	sl, r0
   148cc:	str	r0, [r4]
   148d0:	cmp	r6, r9
   148d4:	bne	148e0 <__assert_fail@plt+0x37f4>
   148d8:	ldrd	r0, [r9]
   148dc:	stm	sl, {r0, r1}
   148e0:	ldr	r1, [r8]
   148e4:	add	r0, sl, r1, lsl #3
   148e8:	ldr	r2, [fp, #-32]	; 0xffffffe0
   148ec:	sub	r1, r2, r1
   148f0:	lsl	r2, r1, #3
   148f4:	mov	r1, #0
   148f8:	bl	1102c <memset@plt>
   148fc:	ldr	r0, [fp, #-32]	; 0xffffffe0
   14900:	str	r0, [r8]
   14904:	mov	r9, sl
   14908:	ldr	r6, [r9, r5, lsl #3]!
   1490c:	ldr	r4, [r9, #4]!
   14910:	ldm	r7, {r0, r1}
   14914:	ldr	r2, [r7, #40]	; 0x28
   14918:	ldr	r3, [r7, #44]	; 0x2c
   1491c:	orr	r8, r1, #1
   14920:	add	r1, r7, #8
   14924:	stm	sp, {r0, r8}
   14928:	str	r1, [sp, #20]
   1492c:	add	r0, sp, #8
   14930:	stm	r0, {r1, r2, r3}
   14934:	mov	r0, r4
   14938:	mov	r1, r6
   1493c:	ldr	r2, [sp, #32]
   14940:	ldr	r3, [sp, #36]	; 0x24
   14944:	bl	136e0 <__assert_fail@plt+0x25f4>
   14948:	cmp	r6, r0
   1494c:	bhi	149b0 <__assert_fail@plt+0x38c4>
   14950:	add	r6, r0, #1
   14954:	str	r6, [sl, r5, lsl #3]
   14958:	movw	r0, #33184	; 0x81a0
   1495c:	movt	r0, #2
   14960:	cmp	r4, r0
   14964:	beq	14970 <__assert_fail@plt+0x3884>
   14968:	mov	r0, r4
   1496c:	bl	132e8 <__assert_fail@plt+0x21fc>
   14970:	mov	r0, r6
   14974:	bl	1564c <__assert_fail@plt+0x4560>
   14978:	mov	r4, r0
   1497c:	str	r0, [r9]
   14980:	ldr	r0, [r7]
   14984:	ldr	r1, [r7, #40]	; 0x28
   14988:	ldr	r2, [r7, #44]	; 0x2c
   1498c:	stm	sp, {r0, r8}
   14990:	ldr	r0, [sp, #20]
   14994:	add	r3, sp, #8
   14998:	stm	r3, {r0, r1, r2}
   1499c:	mov	r0, r4
   149a0:	mov	r1, r6
   149a4:	ldr	r2, [sp, #32]
   149a8:	ldr	r3, [sp, #36]	; 0x24
   149ac:	bl	136e0 <__assert_fail@plt+0x25f4>
   149b0:	ldr	r0, [sp, #28]
   149b4:	ldr	r1, [sp, #24]
   149b8:	str	r1, [r0]
   149bc:	mov	r0, r4
   149c0:	sub	sp, fp, #28
   149c4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   149c8:	bl	110d4 <abort@plt>
   149cc:	movw	r3, #33136	; 0x8170
   149d0:	movt	r3, #2
   149d4:	b	14834 <__assert_fail@plt+0x3748>
   149d8:	mov	r1, r0
   149dc:	mov	r0, #0
   149e0:	b	14824 <__assert_fail@plt+0x3738>
   149e4:	mov	r2, r1
   149e8:	mov	r1, r0
   149ec:	mov	r0, #0
   149f0:	b	149cc <__assert_fail@plt+0x38e0>
   149f4:	push	{r4, r5, r6, sl, fp, lr}
   149f8:	add	fp, sp, #16
   149fc:	sub	sp, sp, #48	; 0x30
   14a00:	mov	r4, r2
   14a04:	mov	r5, r0
   14a08:	mov	r6, sp
   14a0c:	mov	r0, r6
   14a10:	bl	14a30 <__assert_fail@plt+0x3944>
   14a14:	mov	r0, r5
   14a18:	mov	r1, r4
   14a1c:	mvn	r2, #0
   14a20:	mov	r3, r6
   14a24:	bl	14834 <__assert_fail@plt+0x3748>
   14a28:	sub	sp, fp, #16
   14a2c:	pop	{r4, r5, r6, sl, fp, pc}
   14a30:	push	{fp, lr}
   14a34:	mov	fp, sp
   14a38:	vmov.i32	q8, #0	; 0x00000000
   14a3c:	mov	r2, #32
   14a40:	mov	r3, r0
   14a44:	vst1.32	{d16-d17}, [r3], r2
   14a48:	vst1.32	{d16-d17}, [r3]
   14a4c:	add	r2, r0, #16
   14a50:	vst1.32	{d16-d17}, [r2]
   14a54:	cmp	r1, #10
   14a58:	strne	r1, [r0]
   14a5c:	popne	{fp, pc}
   14a60:	bl	110d4 <abort@plt>
   14a64:	push	{r4, r5, r6, r7, fp, lr}
   14a68:	add	fp, sp, #16
   14a6c:	sub	sp, sp, #48	; 0x30
   14a70:	mov	r4, r3
   14a74:	mov	r5, r2
   14a78:	mov	r6, r0
   14a7c:	mov	r7, sp
   14a80:	mov	r0, r7
   14a84:	bl	14a30 <__assert_fail@plt+0x3944>
   14a88:	mov	r0, r6
   14a8c:	mov	r1, r5
   14a90:	mov	r2, r4
   14a94:	mov	r3, r7
   14a98:	bl	14834 <__assert_fail@plt+0x3748>
   14a9c:	sub	sp, fp, #16
   14aa0:	pop	{r4, r5, r6, r7, fp, pc}
   14aa4:	mov	r2, r1
   14aa8:	mov	r1, r0
   14aac:	mov	r0, #0
   14ab0:	b	149f4 <__assert_fail@plt+0x3908>
   14ab4:	mov	r3, r2
   14ab8:	mov	r2, r1
   14abc:	mov	r1, r0
   14ac0:	mov	r0, #0
   14ac4:	b	14a64 <__assert_fail@plt+0x3978>
   14ac8:	push	{r4, r5, r6, sl, fp, lr}
   14acc:	add	fp, sp, #16
   14ad0:	sub	sp, sp, #48	; 0x30
   14ad4:	mov	r4, r1
   14ad8:	mov	r5, r0
   14adc:	movw	r0, #33136	; 0x8170
   14ae0:	movt	r0, #2
   14ae4:	add	r1, r0, #16
   14ae8:	mov	r3, #32
   14aec:	vld1.64	{d16-d17}, [r0], r3
   14af0:	vld1.64	{d18-d19}, [r1]
   14af4:	mov	r6, sp
   14af8:	add	r1, r6, #16
   14afc:	vld1.64	{d20-d21}, [r0]
   14b00:	vst1.64	{d18-d19}, [r1]
   14b04:	mov	r0, r6
   14b08:	vst1.64	{d16-d17}, [r0], r3
   14b0c:	vst1.64	{d20-d21}, [r0]
   14b10:	mov	r0, r6
   14b14:	mov	r1, r2
   14b18:	mov	r2, #1
   14b1c:	bl	135d4 <__assert_fail@plt+0x24e8>
   14b20:	mov	r0, #0
   14b24:	mov	r1, r5
   14b28:	mov	r2, r4
   14b2c:	mov	r3, r6
   14b30:	bl	14834 <__assert_fail@plt+0x3748>
   14b34:	sub	sp, fp, #16
   14b38:	pop	{r4, r5, r6, sl, fp, pc}
   14b3c:	mov	r2, r1
   14b40:	mvn	r1, #0
   14b44:	b	14ac8 <__assert_fail@plt+0x39dc>
   14b48:	mov	r1, #58	; 0x3a
   14b4c:	b	14b3c <__assert_fail@plt+0x3a50>
   14b50:	mov	r2, #58	; 0x3a
   14b54:	b	14ac8 <__assert_fail@plt+0x39dc>
   14b58:	push	{r4, r5, r6, sl, fp, lr}
   14b5c:	add	fp, sp, #16
   14b60:	sub	sp, sp, #48	; 0x30
   14b64:	mov	r4, r2
   14b68:	mov	r5, r0
   14b6c:	mov	r6, sp
   14b70:	mov	r0, r6
   14b74:	bl	14a30 <__assert_fail@plt+0x3944>
   14b78:	mov	r0, r6
   14b7c:	mov	r1, #58	; 0x3a
   14b80:	mov	r2, #1
   14b84:	bl	135d4 <__assert_fail@plt+0x24e8>
   14b88:	mov	r0, r5
   14b8c:	mov	r1, r4
   14b90:	mvn	r2, #0
   14b94:	mov	r3, r6
   14b98:	bl	14834 <__assert_fail@plt+0x3748>
   14b9c:	sub	sp, fp, #16
   14ba0:	pop	{r4, r5, r6, sl, fp, pc}
   14ba4:	push	{fp, lr}
   14ba8:	mov	fp, sp
   14bac:	sub	sp, sp, #8
   14bb0:	mvn	ip, #0
   14bb4:	str	ip, [sp]
   14bb8:	bl	14bc4 <__assert_fail@plt+0x3ad8>
   14bbc:	mov	sp, fp
   14bc0:	pop	{fp, pc}
   14bc4:	push	{r4, r5, r6, r7, fp, lr}
   14bc8:	add	fp, sp, #16
   14bcc:	sub	sp, sp, #48	; 0x30
   14bd0:	mov	r7, r3
   14bd4:	mov	r5, r0
   14bd8:	movw	r0, #33136	; 0x8170
   14bdc:	movt	r0, #2
   14be0:	add	r3, r0, #16
   14be4:	mov	r4, #32
   14be8:	vld1.64	{d16-d17}, [r0], r4
   14bec:	vld1.64	{d18-d19}, [r3]
   14bf0:	mov	r6, sp
   14bf4:	add	r3, r6, #16
   14bf8:	vld1.64	{d20-d21}, [r0]
   14bfc:	vst1.64	{d18-d19}, [r3]
   14c00:	mov	r0, r6
   14c04:	vst1.64	{d16-d17}, [r0], r4
   14c08:	vst1.64	{d20-d21}, [r0]
   14c0c:	mov	r0, r6
   14c10:	bl	1362c <__assert_fail@plt+0x2540>
   14c14:	ldr	r2, [fp, #8]
   14c18:	mov	r0, r5
   14c1c:	mov	r1, r7
   14c20:	mov	r3, r6
   14c24:	bl	14834 <__assert_fail@plt+0x3748>
   14c28:	sub	sp, fp, #16
   14c2c:	pop	{r4, r5, r6, r7, fp, pc}
   14c30:	mov	r3, r2
   14c34:	mov	r2, r1
   14c38:	mov	r1, r0
   14c3c:	mov	r0, #0
   14c40:	b	14ba4 <__assert_fail@plt+0x3ab8>
   14c44:	push	{fp, lr}
   14c48:	mov	fp, sp
   14c4c:	sub	sp, sp, #8
   14c50:	mov	ip, r2
   14c54:	mov	r2, r1
   14c58:	mov	r1, r0
   14c5c:	str	r3, [sp]
   14c60:	mov	r0, #0
   14c64:	mov	r3, ip
   14c68:	bl	14bc4 <__assert_fail@plt+0x3ad8>
   14c6c:	mov	sp, fp
   14c70:	pop	{fp, pc}
   14c74:	movw	r3, #33040	; 0x8110
   14c78:	movt	r3, #2
   14c7c:	b	14834 <__assert_fail@plt+0x3748>
   14c80:	mov	r2, r1
   14c84:	mov	r1, r0
   14c88:	mov	r0, #0
   14c8c:	b	14c74 <__assert_fail@plt+0x3b88>
   14c90:	mvn	r2, #0
   14c94:	b	14c74 <__assert_fail@plt+0x3b88>
   14c98:	mov	r1, r0
   14c9c:	mov	r0, #0
   14ca0:	b	14c90 <__assert_fail@plt+0x3ba4>
   14ca4:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   14ca8:	add	fp, sp, #24
   14cac:	sub	sp, sp, #16
   14cb0:	mov	r4, r1
   14cb4:	mov	r5, r0
   14cb8:	mov	r7, #0
   14cbc:	mov	r0, #0
   14cc0:	mov	r1, r5
   14cc4:	mov	r2, #5
   14cc8:	bl	10ee8 <dcgettext@plt>
   14ccc:	cmp	r0, r5
   14cd0:	beq	14cdc <__assert_fail@plt+0x3bf0>
   14cd4:	sub	sp, fp, #24
   14cd8:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   14cdc:	bl	166a8 <__assert_fail@plt+0x55bc>
   14ce0:	mov	r6, r0
   14ce4:	mov	r8, #56	; 0x38
   14ce8:	mov	r0, #45	; 0x2d
   14cec:	stm	sp, {r0, r8}
   14cf0:	str	r7, [sp, #8]
   14cf4:	str	r7, [sp, #12]
   14cf8:	mov	r0, r6
   14cfc:	mov	r1, #85	; 0x55
   14d00:	mov	r2, #84	; 0x54
   14d04:	mov	r3, #70	; 0x46
   14d08:	bl	14da0 <__assert_fail@plt+0x3cb4>
   14d0c:	cmp	r0, #0
   14d10:	beq	14d2c <__assert_fail@plt+0x3c40>
   14d14:	ldrb	r1, [r5]
   14d18:	movw	r2, #29993	; 0x7529
   14d1c:	movt	r2, #1
   14d20:	movw	r0, #29997	; 0x752d
   14d24:	movt	r0, #1
   14d28:	b	14d70 <__assert_fail@plt+0x3c84>
   14d2c:	mov	r0, #48	; 0x30
   14d30:	mov	r1, #51	; 0x33
   14d34:	str	r8, [sp]
   14d38:	stmib	sp, {r0, r1}
   14d3c:	str	r0, [sp, #12]
   14d40:	mov	r0, r6
   14d44:	mov	r1, #71	; 0x47
   14d48:	mov	r2, #66	; 0x42
   14d4c:	mov	r3, #49	; 0x31
   14d50:	bl	14da0 <__assert_fail@plt+0x3cb4>
   14d54:	cmp	r0, #0
   14d58:	beq	14d80 <__assert_fail@plt+0x3c94>
   14d5c:	ldrb	r1, [r5]
   14d60:	movw	r2, #30001	; 0x7531
   14d64:	movt	r2, #1
   14d68:	movw	r0, #30005	; 0x7535
   14d6c:	movt	r0, #1
   14d70:	cmp	r1, #96	; 0x60
   14d74:	moveq	r0, r2
   14d78:	sub	sp, fp, #24
   14d7c:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   14d80:	movw	r1, #29987	; 0x7523
   14d84:	movt	r1, #1
   14d88:	movw	r0, #29991	; 0x7527
   14d8c:	movt	r0, #1
   14d90:	cmp	r4, #9
   14d94:	moveq	r0, r1
   14d98:	sub	sp, fp, #24
   14d9c:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   14da0:	push	{r4, r5, r6, r7, fp, lr}
   14da4:	add	fp, sp, #16
   14da8:	sub	sp, sp, #16
   14dac:	mov	r4, r3
   14db0:	mov	r5, r2
   14db4:	mov	r7, r1
   14db8:	mov	r6, r0
   14dbc:	mov	r0, r1
   14dc0:	bl	163b4 <__assert_fail@plt+0x52c8>
   14dc4:	ldrb	r1, [r6]
   14dc8:	cmp	r0, #0
   14dcc:	andne	r1, r1, #223	; 0xdf
   14dd0:	mov	r0, #0
   14dd4:	cmp	r1, r7
   14dd8:	bne	14e10 <__assert_fail@plt+0x3d24>
   14ddc:	cmp	r7, #0
   14de0:	beq	14e18 <__assert_fail@plt+0x3d2c>
   14de4:	ldr	r0, [fp, #20]
   14de8:	ldr	r1, [fp, #16]
   14dec:	ldr	r2, [fp, #12]
   14df0:	ldr	r3, [fp, #8]
   14df4:	str	r2, [sp]
   14df8:	str	r1, [sp, #4]
   14dfc:	str	r0, [sp, #8]
   14e00:	mov	r0, r6
   14e04:	mov	r1, r5
   14e08:	mov	r2, r4
   14e0c:	bl	14e24 <__assert_fail@plt+0x3d38>
   14e10:	sub	sp, fp, #16
   14e14:	pop	{r4, r5, r6, r7, fp, pc}
   14e18:	mov	r0, #1
   14e1c:	sub	sp, fp, #16
   14e20:	pop	{r4, r5, r6, r7, fp, pc}
   14e24:	push	{r4, r5, r6, r7, fp, lr}
   14e28:	add	fp, sp, #16
   14e2c:	sub	sp, sp, #8
   14e30:	mov	r4, r3
   14e34:	mov	r5, r2
   14e38:	mov	r7, r1
   14e3c:	mov	r6, r0
   14e40:	mov	r0, r1
   14e44:	bl	163b4 <__assert_fail@plt+0x52c8>
   14e48:	ldrb	r1, [r6, #1]
   14e4c:	cmp	r0, #0
   14e50:	andne	r1, r1, #223	; 0xdf
   14e54:	mov	r0, #0
   14e58:	cmp	r1, r7
   14e5c:	bne	14e8c <__assert_fail@plt+0x3da0>
   14e60:	cmp	r7, #0
   14e64:	beq	14e94 <__assert_fail@plt+0x3da8>
   14e68:	ldr	r0, [fp, #16]
   14e6c:	ldr	r1, [fp, #12]
   14e70:	ldr	r3, [fp, #8]
   14e74:	str	r1, [sp]
   14e78:	str	r0, [sp, #4]
   14e7c:	mov	r0, r6
   14e80:	mov	r1, r5
   14e84:	mov	r2, r4
   14e88:	bl	14ea0 <__assert_fail@plt+0x3db4>
   14e8c:	sub	sp, fp, #16
   14e90:	pop	{r4, r5, r6, r7, fp, pc}
   14e94:	mov	r0, #1
   14e98:	sub	sp, fp, #16
   14e9c:	pop	{r4, r5, r6, r7, fp, pc}
   14ea0:	push	{r4, r5, r6, r7, fp, lr}
   14ea4:	add	fp, sp, #16
   14ea8:	sub	sp, sp, #8
   14eac:	mov	r4, r3
   14eb0:	mov	r5, r2
   14eb4:	mov	r7, r1
   14eb8:	mov	r6, r0
   14ebc:	mov	r0, r1
   14ec0:	bl	163b4 <__assert_fail@plt+0x52c8>
   14ec4:	ldrb	r1, [r6, #2]
   14ec8:	cmp	r0, #0
   14ecc:	andne	r1, r1, #223	; 0xdf
   14ed0:	mov	r0, #0
   14ed4:	cmp	r1, r7
   14ed8:	bne	14f00 <__assert_fail@plt+0x3e14>
   14edc:	cmp	r7, #0
   14ee0:	beq	14f08 <__assert_fail@plt+0x3e1c>
   14ee4:	ldr	r0, [fp, #12]
   14ee8:	ldr	r3, [fp, #8]
   14eec:	str	r0, [sp]
   14ef0:	mov	r0, r6
   14ef4:	mov	r1, r5
   14ef8:	mov	r2, r4
   14efc:	bl	14f14 <__assert_fail@plt+0x3e28>
   14f00:	sub	sp, fp, #16
   14f04:	pop	{r4, r5, r6, r7, fp, pc}
   14f08:	mov	r0, #1
   14f0c:	sub	sp, fp, #16
   14f10:	pop	{r4, r5, r6, r7, fp, pc}
   14f14:	push	{r4, r5, r6, r7, fp, lr}
   14f18:	add	fp, sp, #16
   14f1c:	mov	r4, r3
   14f20:	mov	r5, r2
   14f24:	mov	r7, r1
   14f28:	mov	r6, r0
   14f2c:	mov	r0, r1
   14f30:	bl	163b4 <__assert_fail@plt+0x52c8>
   14f34:	ldrb	r1, [r6, #3]
   14f38:	ldr	r3, [fp, #8]
   14f3c:	cmp	r0, #0
   14f40:	andne	r1, r1, #223	; 0xdf
   14f44:	mov	r0, #0
   14f48:	cmp	r1, r7
   14f4c:	bne	14f70 <__assert_fail@plt+0x3e84>
   14f50:	cmp	r7, #0
   14f54:	beq	14f6c <__assert_fail@plt+0x3e80>
   14f58:	mov	r0, r6
   14f5c:	mov	r1, r5
   14f60:	mov	r2, r4
   14f64:	pop	{r4, r5, r6, r7, fp, lr}
   14f68:	b	14f74 <__assert_fail@plt+0x3e88>
   14f6c:	mov	r0, #1
   14f70:	pop	{r4, r5, r6, r7, fp, pc}
   14f74:	push	{r4, r5, r6, r7, fp, lr}
   14f78:	add	fp, sp, #16
   14f7c:	mov	r4, r3
   14f80:	mov	r5, r2
   14f84:	mov	r7, r1
   14f88:	mov	r6, r0
   14f8c:	mov	r0, r1
   14f90:	bl	163b4 <__assert_fail@plt+0x52c8>
   14f94:	ldrb	r1, [r6, #4]
   14f98:	cmp	r0, #0
   14f9c:	andne	r1, r1, #223	; 0xdf
   14fa0:	mov	r0, #0
   14fa4:	cmp	r1, r7
   14fa8:	bne	14fcc <__assert_fail@plt+0x3ee0>
   14fac:	cmp	r7, #0
   14fb0:	beq	14fc8 <__assert_fail@plt+0x3edc>
   14fb4:	mov	r0, r6
   14fb8:	mov	r1, r5
   14fbc:	mov	r2, r4
   14fc0:	pop	{r4, r5, r6, r7, fp, lr}
   14fc4:	b	14fd0 <__assert_fail@plt+0x3ee4>
   14fc8:	mov	r0, #1
   14fcc:	pop	{r4, r5, r6, r7, fp, pc}
   14fd0:	push	{r4, r5, r6, sl, fp, lr}
   14fd4:	add	fp, sp, #16
   14fd8:	mov	r4, r2
   14fdc:	mov	r6, r1
   14fe0:	mov	r5, r0
   14fe4:	mov	r0, r1
   14fe8:	bl	163b4 <__assert_fail@plt+0x52c8>
   14fec:	ldrb	r1, [r5, #5]
   14ff0:	cmp	r0, #0
   14ff4:	andne	r1, r1, #223	; 0xdf
   14ff8:	mov	r0, #0
   14ffc:	cmp	r1, r6
   15000:	bne	15020 <__assert_fail@plt+0x3f34>
   15004:	cmp	r6, #0
   15008:	beq	1501c <__assert_fail@plt+0x3f30>
   1500c:	mov	r0, r5
   15010:	mov	r1, r4
   15014:	pop	{r4, r5, r6, sl, fp, lr}
   15018:	b	15024 <__assert_fail@plt+0x3f38>
   1501c:	mov	r0, #1
   15020:	pop	{r4, r5, r6, sl, fp, pc}
   15024:	push	{r4, r5, fp, lr}
   15028:	add	fp, sp, #8
   1502c:	mov	r5, r1
   15030:	mov	r4, r0
   15034:	mov	r0, r1
   15038:	bl	163b4 <__assert_fail@plt+0x52c8>
   1503c:	ldrb	r1, [r4, #6]
   15040:	cmp	r0, #0
   15044:	andne	r1, r1, #223	; 0xdf
   15048:	mov	r0, #0
   1504c:	cmp	r1, r5
   15050:	popne	{r4, r5, fp, pc}
   15054:	cmp	r5, #0
   15058:	beq	15068 <__assert_fail@plt+0x3f7c>
   1505c:	mov	r0, r4
   15060:	pop	{r4, r5, fp, lr}
   15064:	b	15070 <__assert_fail@plt+0x3f84>
   15068:	mov	r0, #1
   1506c:	pop	{r4, r5, fp, pc}
   15070:	push	{r4, sl, fp, lr}
   15074:	add	fp, sp, #8
   15078:	mov	r4, r0
   1507c:	mov	r0, #0
   15080:	bl	163b4 <__assert_fail@plt+0x52c8>
   15084:	ldrb	r1, [r4, #7]
   15088:	cmp	r0, #0
   1508c:	beq	150a0 <__assert_fail@plt+0x3fb4>
   15090:	tst	r1, #223	; 0xdf
   15094:	bne	150a8 <__assert_fail@plt+0x3fbc>
   15098:	mov	r0, #1
   1509c:	pop	{r4, sl, fp, pc}
   150a0:	cmp	r1, #0
   150a4:	beq	15098 <__assert_fail@plt+0x3fac>
   150a8:	mov	r0, #0
   150ac:	pop	{r4, sl, fp, pc}
   150b0:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   150b4:	add	fp, sp, #24
   150b8:	mov	r7, r2
   150bc:	mov	r5, r1
   150c0:	mov	r6, r0
   150c4:	movw	r9, #0
   150c8:	movt	r9, #32752	; 0x7ff0
   150cc:	mov	r0, r6
   150d0:	mov	r1, r5
   150d4:	mov	r2, r7
   150d8:	bl	10e94 <read@plt>
   150dc:	mov	r4, r0
   150e0:	cmn	r0, #1
   150e4:	bgt	15140 <__assert_fail@plt+0x4054>
   150e8:	bl	11014 <__errno_location@plt>
   150ec:	ldr	r0, [r0]
   150f0:	cmp	r0, #4
   150f4:	beq	150cc <__assert_fail@plt+0x3fe0>
   150f8:	cmp	r7, r9
   150fc:	mov	r1, #0
   15100:	movwhi	r1, #1
   15104:	sub	r2, r0, #22
   15108:	clz	r2, r2
   1510c:	lsr	r2, r2, #5
   15110:	ands	r1, r1, r2
   15114:	moveq	r8, r4
   15118:	mov	r1, r7
   1511c:	movwne	r1, #0
   15120:	movtne	r1, #32752	; 0x7ff0
   15124:	cmp	r7, r9
   15128:	bls	15138 <__assert_fail@plt+0x404c>
   1512c:	cmp	r0, #22
   15130:	mov	r7, r1
   15134:	beq	150cc <__assert_fail@plt+0x3fe0>
   15138:	mov	r0, r8
   1513c:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   15140:	mov	r0, r4
   15144:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   15148:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   1514c:	add	fp, sp, #24
   15150:	sub	sp, sp, #32
   15154:	mov	r4, r2
   15158:	mov	r8, r0
   1515c:	ldr	r6, [fp, #12]
   15160:	ldr	r7, [fp, #8]
   15164:	cmp	r1, #0
   15168:	beq	15190 <__assert_fail@plt+0x40a4>
   1516c:	mov	r5, r1
   15170:	str	r4, [sp]
   15174:	str	r3, [sp, #4]
   15178:	movw	r2, #30092	; 0x758c
   1517c:	movt	r2, #1
   15180:	mov	r0, r8
   15184:	mov	r1, #1
   15188:	mov	r3, r5
   1518c:	b	151a8 <__assert_fail@plt+0x40bc>
   15190:	str	r3, [sp]
   15194:	movw	r2, #30104	; 0x7598
   15198:	movt	r2, #1
   1519c:	mov	r0, r8
   151a0:	mov	r1, #1
   151a4:	mov	r3, r4
   151a8:	bl	1105c <__fprintf_chk@plt>
   151ac:	movw	r1, #30111	; 0x759f
   151b0:	movt	r1, #1
   151b4:	mov	r0, #0
   151b8:	mov	r2, #5
   151bc:	bl	10ee8 <dcgettext@plt>
   151c0:	mov	r3, r0
   151c4:	movw	r0, #2022	; 0x7e6
   151c8:	str	r0, [sp]
   151cc:	movw	r2, #30829	; 0x786d
   151d0:	movt	r2, #1
   151d4:	mov	r0, r8
   151d8:	mov	r1, #1
   151dc:	bl	1105c <__fprintf_chk@plt>
   151e0:	movw	r4, #29208	; 0x7218
   151e4:	movt	r4, #1
   151e8:	mov	r0, r4
   151ec:	mov	r1, r8
   151f0:	bl	10e70 <fputs_unlocked@plt>
   151f4:	movw	r1, #30115	; 0x75a3
   151f8:	movt	r1, #1
   151fc:	mov	r0, #0
   15200:	mov	r2, #5
   15204:	bl	10ee8 <dcgettext@plt>
   15208:	mov	r2, r0
   1520c:	movw	r3, #30286	; 0x764e
   15210:	movt	r3, #1
   15214:	mov	r0, r8
   15218:	mov	r1, #1
   1521c:	bl	1105c <__fprintf_chk@plt>
   15220:	mov	r0, r4
   15224:	mov	r1, r8
   15228:	bl	10e70 <fputs_unlocked@plt>
   1522c:	cmp	r6, #9
   15230:	bhi	1526c <__assert_fail@plt+0x4180>
   15234:	add	r0, pc, #0
   15238:	ldr	pc, [r0, r6, lsl #2]
   1523c:	andeq	r5, r1, r4, ror #4
   15240:	andeq	r5, r1, r8, ror r2
   15244:	andeq	r5, r1, r8, lsr #5
   15248:	ldrdeq	r5, [r1], -r0
   1524c:	strdeq	r5, [r1], -r8
   15250:	andeq	r5, r1, r0, lsr #6
   15254:	andeq	r5, r1, r8, asr #6
   15258:	andeq	r5, r1, r0, lsl #7
   1525c:	andeq	r5, r1, r0, lsr #8
   15260:	andeq	r5, r1, r8, asr #7
   15264:	sub	sp, fp, #24
   15268:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   1526c:	movw	r1, #30639	; 0x77af
   15270:	movt	r1, #1
   15274:	b	153d0 <__assert_fail@plt+0x42e4>
   15278:	movw	r1, #30320	; 0x7670
   1527c:	movt	r1, #1
   15280:	mov	r0, #0
   15284:	mov	r2, #5
   15288:	bl	10ee8 <dcgettext@plt>
   1528c:	mov	r2, r0
   15290:	ldr	r3, [r7]
   15294:	mov	r0, r8
   15298:	mov	r1, #1
   1529c:	sub	sp, fp, #24
   152a0:	pop	{r4, r5, r6, r7, r8, sl, fp, lr}
   152a4:	b	1105c <__fprintf_chk@plt>
   152a8:	movw	r1, #30336	; 0x7680
   152ac:	movt	r1, #1
   152b0:	mov	r0, #0
   152b4:	mov	r2, #5
   152b8:	bl	10ee8 <dcgettext@plt>
   152bc:	mov	r2, r0
   152c0:	ldr	r3, [r7]
   152c4:	ldr	r0, [r7, #4]
   152c8:	str	r0, [sp]
   152cc:	b	153bc <__assert_fail@plt+0x42d0>
   152d0:	movw	r1, #30359	; 0x7697
   152d4:	movt	r1, #1
   152d8:	mov	r0, #0
   152dc:	mov	r2, #5
   152e0:	bl	10ee8 <dcgettext@plt>
   152e4:	mov	r2, r0
   152e8:	ldr	r3, [r7]
   152ec:	ldmib	r7, {r0, r1}
   152f0:	stm	sp, {r0, r1}
   152f4:	b	153bc <__assert_fail@plt+0x42d0>
   152f8:	movw	r1, #30387	; 0x76b3
   152fc:	movt	r1, #1
   15300:	mov	r0, #0
   15304:	mov	r2, #5
   15308:	bl	10ee8 <dcgettext@plt>
   1530c:	mov	r2, r0
   15310:	ldr	r3, [r7]
   15314:	ldmib	r7, {r0, r1, r7}
   15318:	stm	sp, {r0, r1, r7}
   1531c:	b	153bc <__assert_fail@plt+0x42d0>
   15320:	movw	r1, #30419	; 0x76d3
   15324:	movt	r1, #1
   15328:	mov	r0, #0
   1532c:	mov	r2, #5
   15330:	bl	10ee8 <dcgettext@plt>
   15334:	mov	r2, r0
   15338:	ldr	r3, [r7]
   1533c:	ldmib	r7, {r0, r1, r6, r7}
   15340:	stm	sp, {r0, r1, r6, r7}
   15344:	b	153bc <__assert_fail@plt+0x42d0>
   15348:	movw	r1, #30455	; 0x76f7
   1534c:	movt	r1, #1
   15350:	mov	r0, #0
   15354:	mov	r2, #5
   15358:	bl	10ee8 <dcgettext@plt>
   1535c:	mov	r2, r0
   15360:	ldr	r3, [r7]
   15364:	ldmib	r7, {r0, r1, r6}
   15368:	ldr	r5, [r7, #16]
   1536c:	ldr	r7, [r7, #20]
   15370:	stm	sp, {r0, r1, r6}
   15374:	str	r5, [sp, #12]
   15378:	str	r7, [sp, #16]
   1537c:	b	153bc <__assert_fail@plt+0x42d0>
   15380:	movw	r1, #30495	; 0x771f
   15384:	movt	r1, #1
   15388:	mov	r0, #0
   1538c:	mov	r2, #5
   15390:	bl	10ee8 <dcgettext@plt>
   15394:	mov	r2, r0
   15398:	ldr	r3, [r7]
   1539c:	ldmib	r7, {r0, r1, r6}
   153a0:	ldr	r5, [r7, #16]
   153a4:	ldr	r4, [r7, #20]
   153a8:	ldr	r7, [r7, #24]
   153ac:	stm	sp, {r0, r1, r6}
   153b0:	str	r5, [sp, #12]
   153b4:	str	r4, [sp, #16]
   153b8:	str	r7, [sp, #20]
   153bc:	mov	r0, r8
   153c0:	mov	r1, #1
   153c4:	b	15470 <__assert_fail@plt+0x4384>
   153c8:	movw	r1, #30587	; 0x777b
   153cc:	movt	r1, #1
   153d0:	mov	r0, #0
   153d4:	mov	r2, #5
   153d8:	bl	10ee8 <dcgettext@plt>
   153dc:	mov	ip, r0
   153e0:	ldr	r3, [r7]
   153e4:	ldr	r0, [r7, #4]
   153e8:	ldr	r1, [r7, #8]
   153ec:	ldr	r6, [r7, #12]
   153f0:	ldr	r5, [r7, #16]
   153f4:	ldr	r4, [r7, #20]
   153f8:	ldr	r2, [r7, #24]
   153fc:	ldr	lr, [r7, #28]
   15400:	ldr	r7, [r7, #32]
   15404:	stm	sp, {r0, r1, r6}
   15408:	str	r5, [sp, #12]
   1540c:	str	r4, [sp, #16]
   15410:	str	r2, [sp, #20]
   15414:	str	lr, [sp, #24]
   15418:	str	r7, [sp, #28]
   1541c:	b	15464 <__assert_fail@plt+0x4378>
   15420:	movw	r1, #30539	; 0x774b
   15424:	movt	r1, #1
   15428:	mov	r0, #0
   1542c:	mov	r2, #5
   15430:	bl	10ee8 <dcgettext@plt>
   15434:	mov	ip, r0
   15438:	ldr	r3, [r7]
   1543c:	ldmib	r7, {r0, r1, r6}
   15440:	ldr	r5, [r7, #16]
   15444:	ldr	r4, [r7, #20]
   15448:	ldr	r2, [r7, #24]
   1544c:	ldr	r7, [r7, #28]
   15450:	stm	sp, {r0, r1, r6}
   15454:	str	r5, [sp, #12]
   15458:	str	r4, [sp, #16]
   1545c:	str	r2, [sp, #20]
   15460:	str	r7, [sp, #24]
   15464:	mov	r0, r8
   15468:	mov	r1, #1
   1546c:	mov	r2, ip
   15470:	bl	1105c <__fprintf_chk@plt>
   15474:	sub	sp, fp, #24
   15478:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   1547c:	push	{r4, sl, fp, lr}
   15480:	add	fp, sp, #8
   15484:	sub	sp, sp, #8
   15488:	mov	lr, #0
   1548c:	ldr	ip, [fp, #8]
   15490:	ldr	r4, [ip, lr, lsl #2]
   15494:	add	lr, lr, #1
   15498:	cmp	r4, #0
   1549c:	bne	15490 <__assert_fail@plt+0x43a4>
   154a0:	sub	r4, lr, #1
   154a4:	str	ip, [sp]
   154a8:	str	r4, [sp, #4]
   154ac:	bl	15148 <__assert_fail@plt+0x405c>
   154b0:	sub	sp, fp, #8
   154b4:	pop	{r4, sl, fp, pc}
   154b8:	push	{r4, r5, fp, lr}
   154bc:	add	fp, sp, #8
   154c0:	sub	sp, sp, #48	; 0x30
   154c4:	mov	ip, #0
   154c8:	ldr	r4, [fp, #8]
   154cc:	add	lr, sp, #8
   154d0:	ldr	r5, [r4]
   154d4:	str	r5, [lr, ip, lsl #2]
   154d8:	cmp	r5, #0
   154dc:	beq	154f4 <__assert_fail@plt+0x4408>
   154e0:	add	ip, ip, #1
   154e4:	add	r4, r4, #4
   154e8:	cmp	ip, #10
   154ec:	bne	154d0 <__assert_fail@plt+0x43e4>
   154f0:	mov	ip, #10
   154f4:	str	lr, [sp]
   154f8:	str	ip, [sp, #4]
   154fc:	bl	15148 <__assert_fail@plt+0x405c>
   15500:	sub	sp, fp, #8
   15504:	pop	{r4, r5, fp, pc}
   15508:	push	{fp, lr}
   1550c:	mov	fp, sp
   15510:	sub	sp, sp, #8
   15514:	add	ip, fp, #8
   15518:	str	ip, [sp, #4]
   1551c:	str	ip, [sp]
   15520:	bl	154b8 <__assert_fail@plt+0x43cc>
   15524:	mov	sp, fp
   15528:	pop	{fp, pc}
   1552c:	push	{fp, lr}
   15530:	mov	fp, sp
   15534:	movw	r0, #33108	; 0x8154
   15538:	movt	r0, #2
   1553c:	ldr	r1, [r0]
   15540:	movw	r0, #29208	; 0x7218
   15544:	movt	r0, #1
   15548:	bl	10e70 <fputs_unlocked@plt>
   1554c:	movw	r1, #30699	; 0x77eb
   15550:	movt	r1, #1
   15554:	mov	r0, #0
   15558:	mov	r2, #5
   1555c:	bl	10ee8 <dcgettext@plt>
   15560:	mov	r1, r0
   15564:	movw	r2, #30719	; 0x77ff
   15568:	movt	r2, #1
   1556c:	mov	r0, #1
   15570:	bl	11038 <__printf_chk@plt>
   15574:	movw	r1, #30741	; 0x7815
   15578:	movt	r1, #1
   1557c:	mov	r0, #0
   15580:	mov	r2, #5
   15584:	bl	10ee8 <dcgettext@plt>
   15588:	mov	r1, r0
   1558c:	movw	r2, #28694	; 0x7016
   15590:	movt	r2, #1
   15594:	movw	r3, #29017	; 0x7159
   15598:	movt	r3, #1
   1559c:	mov	r0, #1
   155a0:	bl	11038 <__printf_chk@plt>
   155a4:	movw	r1, #30761	; 0x7829
   155a8:	movt	r1, #1
   155ac:	mov	r0, #0
   155b0:	mov	r2, #5
   155b4:	bl	10ee8 <dcgettext@plt>
   155b8:	mov	r1, r0
   155bc:	movw	r2, #30800	; 0x7850
   155c0:	movt	r2, #1
   155c4:	mov	r0, #1
   155c8:	pop	{fp, lr}
   155cc:	b	11038 <__printf_chk@plt>
   155d0:	b	155d4 <__assert_fail@plt+0x44e8>
   155d4:	push	{r4, r5, r6, sl, fp, lr}
   155d8:	add	fp, sp, #16
   155dc:	mov	r4, r2
   155e0:	mov	r5, r1
   155e4:	mov	r6, r0
   155e8:	bl	16744 <__assert_fail@plt+0x5658>
   155ec:	cmp	r0, #0
   155f0:	popne	{r4, r5, r6, sl, fp, pc}
   155f4:	cmp	r6, #0
   155f8:	beq	1560c <__assert_fail@plt+0x4520>
   155fc:	cmp	r5, #0
   15600:	cmpne	r4, #0
   15604:	bne	1560c <__assert_fail@plt+0x4520>
   15608:	pop	{r4, r5, r6, sl, fp, pc}
   1560c:	bl	15998 <__assert_fail@plt+0x48ac>
   15610:	push	{fp, lr}
   15614:	mov	fp, sp
   15618:	bl	1606c <__assert_fail@plt+0x4f80>
   1561c:	pop	{fp, lr}
   15620:	b	15624 <__assert_fail@plt+0x4538>
   15624:	cmp	r0, #0
   15628:	bxne	lr
   1562c:	push	{fp, lr}
   15630:	mov	fp, sp
   15634:	bl	15998 <__assert_fail@plt+0x48ac>
   15638:	push	{fp, lr}
   1563c:	mov	fp, sp
   15640:	bl	16674 <__assert_fail@plt+0x5588>
   15644:	pop	{fp, lr}
   15648:	b	15624 <__assert_fail@plt+0x4538>
   1564c:	b	15610 <__assert_fail@plt+0x4524>
   15650:	push	{r4, r5, fp, lr}
   15654:	add	fp, sp, #8
   15658:	mov	r4, r1
   1565c:	mov	r5, r0
   15660:	bl	1609c <__assert_fail@plt+0x4fb0>
   15664:	cmp	r0, #0
   15668:	popne	{r4, r5, fp, pc}
   1566c:	cmp	r5, #0
   15670:	beq	15680 <__assert_fail@plt+0x4594>
   15674:	cmp	r4, #0
   15678:	bne	15680 <__assert_fail@plt+0x4594>
   1567c:	pop	{r4, r5, fp, pc}
   15680:	bl	15998 <__assert_fail@plt+0x48ac>
   15684:	push	{fp, lr}
   15688:	mov	fp, sp
   1568c:	bl	16678 <__assert_fail@plt+0x558c>
   15690:	pop	{fp, lr}
   15694:	b	15624 <__assert_fail@plt+0x4538>
   15698:	push	{fp, lr}
   1569c:	mov	fp, sp
   156a0:	bl	16688 <__assert_fail@plt+0x559c>
   156a4:	pop	{fp, lr}
   156a8:	b	15624 <__assert_fail@plt+0x4538>
   156ac:	mov	r2, r1
   156b0:	mov	r1, r0
   156b4:	mov	r0, #0
   156b8:	b	155d4 <__assert_fail@plt+0x44e8>
   156bc:	mov	r2, r1
   156c0:	mov	r1, r0
   156c4:	mov	r0, #0
   156c8:	b	15698 <__assert_fail@plt+0x45ac>
   156cc:	mov	r2, #1
   156d0:	b	156d4 <__assert_fail@plt+0x45e8>
   156d4:	push	{r4, r5, fp, lr}
   156d8:	add	fp, sp, #8
   156dc:	mov	r4, r1
   156e0:	ldr	r5, [r1]
   156e4:	cmp	r0, #0
   156e8:	beq	15700 <__assert_fail@plt+0x4614>
   156ec:	mov	r1, #1
   156f0:	add	r1, r1, r5, lsr #1
   156f4:	adds	r5, r5, r1
   156f8:	bcc	15718 <__assert_fail@plt+0x462c>
   156fc:	bl	15998 <__assert_fail@plt+0x48ac>
   15700:	cmp	r5, #0
   15704:	bne	15718 <__assert_fail@plt+0x462c>
   15708:	mov	r1, #64	; 0x40
   1570c:	udiv	r5, r1, r2
   15710:	cmp	r2, #64	; 0x40
   15714:	addhi	r5, r5, #1
   15718:	mov	r1, r5
   1571c:	bl	155d4 <__assert_fail@plt+0x44e8>
   15720:	str	r5, [r4]
   15724:	pop	{r4, r5, fp, pc}
   15728:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   1572c:	add	fp, sp, #24
   15730:	mov	r8, r1
   15734:	ldr	r6, [r1]
   15738:	add	r1, r6, r6, asr #1
   1573c:	cmp	r1, r6
   15740:	mvnvs	r1, #-2147483648	; 0x80000000
   15744:	cmp	r1, r3
   15748:	mov	r5, r1
   1574c:	movgt	r5, r3
   15750:	cmn	r3, #1
   15754:	movle	r5, r1
   15758:	ldr	r4, [fp, #8]
   1575c:	cmn	r4, #1
   15760:	ble	15788 <__assert_fail@plt+0x469c>
   15764:	cmp	r4, #0
   15768:	beq	157dc <__assert_fail@plt+0x46f0>
   1576c:	cmn	r5, #1
   15770:	ble	157b0 <__assert_fail@plt+0x46c4>
   15774:	mvn	r7, #-2147483648	; 0x80000000
   15778:	udiv	r1, r7, r4
   1577c:	cmp	r1, r5
   15780:	bge	157dc <__assert_fail@plt+0x46f0>
   15784:	b	157ec <__assert_fail@plt+0x4700>
   15788:	cmn	r5, #1
   1578c:	ble	157cc <__assert_fail@plt+0x46e0>
   15790:	cmn	r4, #1
   15794:	beq	157dc <__assert_fail@plt+0x46f0>
   15798:	mov	r1, #-2147483648	; 0x80000000
   1579c:	sdiv	r1, r1, r4
   157a0:	mvn	r7, #-2147483648	; 0x80000000
   157a4:	cmp	r1, r5
   157a8:	bge	157dc <__assert_fail@plt+0x46f0>
   157ac:	b	157ec <__assert_fail@plt+0x4700>
   157b0:	beq	157dc <__assert_fail@plt+0x46f0>
   157b4:	mov	r1, #-2147483648	; 0x80000000
   157b8:	sdiv	r1, r1, r5
   157bc:	mvn	r7, #-2147483648	; 0x80000000
   157c0:	cmp	r1, r4
   157c4:	bge	157dc <__assert_fail@plt+0x46f0>
   157c8:	b	157ec <__assert_fail@plt+0x4700>
   157cc:	mvn	r7, #-2147483648	; 0x80000000
   157d0:	sdiv	r1, r7, r4
   157d4:	cmp	r5, r1
   157d8:	blt	157ec <__assert_fail@plt+0x4700>
   157dc:	mul	r1, r5, r4
   157e0:	mov	r7, #64	; 0x40
   157e4:	cmp	r1, #63	; 0x3f
   157e8:	bgt	157f4 <__assert_fail@plt+0x4708>
   157ec:	sdiv	r5, r7, r4
   157f0:	mul	r1, r5, r4
   157f4:	cmp	r0, #0
   157f8:	moveq	r7, #0
   157fc:	streq	r7, [r8]
   15800:	sub	r7, r5, r6
   15804:	cmp	r7, r2
   15808:	bge	158b4 <__assert_fail@plt+0x47c8>
   1580c:	add	r5, r6, r2
   15810:	mov	r1, #0
   15814:	cmp	r5, r3
   15818:	mov	r2, #0
   1581c:	movwgt	r2, #1
   15820:	cmn	r3, #1
   15824:	movwgt	r1, #1
   15828:	cmp	r5, r6
   1582c:	bvs	1589c <__assert_fail@plt+0x47b0>
   15830:	ands	r1, r1, r2
   15834:	bne	1589c <__assert_fail@plt+0x47b0>
   15838:	cmn	r4, #1
   1583c:	ble	15864 <__assert_fail@plt+0x4778>
   15840:	cmp	r4, #0
   15844:	beq	158b0 <__assert_fail@plt+0x47c4>
   15848:	cmn	r5, #1
   1584c:	ble	15888 <__assert_fail@plt+0x479c>
   15850:	mvn	r1, #-2147483648	; 0x80000000
   15854:	udiv	r1, r1, r4
   15858:	cmp	r1, r5
   1585c:	bge	158b0 <__assert_fail@plt+0x47c4>
   15860:	b	1589c <__assert_fail@plt+0x47b0>
   15864:	cmn	r5, #1
   15868:	ble	158a0 <__assert_fail@plt+0x47b4>
   1586c:	cmn	r4, #1
   15870:	beq	158b0 <__assert_fail@plt+0x47c4>
   15874:	mov	r1, #-2147483648	; 0x80000000
   15878:	sdiv	r1, r1, r4
   1587c:	cmp	r1, r5
   15880:	bge	158b0 <__assert_fail@plt+0x47c4>
   15884:	b	1589c <__assert_fail@plt+0x47b0>
   15888:	beq	158b0 <__assert_fail@plt+0x47c4>
   1588c:	mov	r1, #-2147483648	; 0x80000000
   15890:	sdiv	r1, r1, r5
   15894:	cmp	r1, r4
   15898:	bge	158b0 <__assert_fail@plt+0x47c4>
   1589c:	bl	15998 <__assert_fail@plt+0x48ac>
   158a0:	mvn	r1, #-2147483648	; 0x80000000
   158a4:	sdiv	r1, r1, r4
   158a8:	cmp	r5, r1
   158ac:	blt	1589c <__assert_fail@plt+0x47b0>
   158b0:	mul	r1, r5, r4
   158b4:	bl	15650 <__assert_fail@plt+0x4564>
   158b8:	str	r5, [r8]
   158bc:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   158c0:	mov	r1, #1
   158c4:	b	158c8 <__assert_fail@plt+0x47dc>
   158c8:	push	{fp, lr}
   158cc:	mov	fp, sp
   158d0:	bl	16018 <__assert_fail@plt+0x4f2c>
   158d4:	pop	{fp, lr}
   158d8:	b	15624 <__assert_fail@plt+0x4538>
   158dc:	mov	r1, #1
   158e0:	b	158e4 <__assert_fail@plt+0x47f8>
   158e4:	push	{fp, lr}
   158e8:	mov	fp, sp
   158ec:	bl	16684 <__assert_fail@plt+0x5598>
   158f0:	pop	{fp, lr}
   158f4:	b	15624 <__assert_fail@plt+0x4538>
   158f8:	push	{r4, r5, fp, lr}
   158fc:	add	fp, sp, #8
   15900:	mov	r4, r1
   15904:	mov	r5, r0
   15908:	mov	r0, r1
   1590c:	bl	15610 <__assert_fail@plt+0x4524>
   15910:	mov	r1, r5
   15914:	mov	r2, r4
   15918:	pop	{r4, r5, fp, lr}
   1591c:	b	10ec4 <memcpy@plt>
   15920:	push	{r4, r5, fp, lr}
   15924:	add	fp, sp, #8
   15928:	mov	r4, r1
   1592c:	mov	r5, r0
   15930:	mov	r0, r1
   15934:	bl	15638 <__assert_fail@plt+0x454c>
   15938:	mov	r1, r5
   1593c:	mov	r2, r4
   15940:	pop	{r4, r5, fp, lr}
   15944:	b	10ec4 <memcpy@plt>
   15948:	push	{r4, r5, fp, lr}
   1594c:	add	fp, sp, #8
   15950:	mov	r4, r1
   15954:	mov	r5, r0
   15958:	add	r0, r1, #1
   1595c:	bl	15638 <__assert_fail@plt+0x454c>
   15960:	mov	r1, #0
   15964:	strb	r1, [r0, r4]
   15968:	mov	r1, r5
   1596c:	mov	r2, r4
   15970:	pop	{r4, r5, fp, lr}
   15974:	b	10ec4 <memcpy@plt>
   15978:	push	{r4, sl, fp, lr}
   1597c:	add	fp, sp, #8
   15980:	mov	r4, r0
   15984:	bl	10ff0 <strlen@plt>
   15988:	add	r1, r0, #1
   1598c:	mov	r0, r4
   15990:	pop	{r4, sl, fp, lr}
   15994:	b	158f8 <__assert_fail@plt+0x480c>
   15998:	push	{fp, lr}
   1599c:	mov	fp, sp
   159a0:	movw	r0, #33020	; 0x80fc
   159a4:	movt	r0, #2
   159a8:	ldr	r4, [r0]
   159ac:	movw	r1, #30876	; 0x789c
   159b0:	movt	r1, #1
   159b4:	mov	r0, #0
   159b8:	mov	r2, #5
   159bc:	bl	10ee8 <dcgettext@plt>
   159c0:	mov	r3, r0
   159c4:	movw	r2, #28741	; 0x7045
   159c8:	movt	r2, #1
   159cc:	mov	r0, r4
   159d0:	mov	r1, #0
   159d4:	bl	10f78 <error@plt>
   159d8:	bl	110d4 <abort@plt>
   159dc:	bx	lr
   159e0:	b	160f8 <__assert_fail@plt+0x500c>
   159e4:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   159e8:	add	fp, sp, #24
   159ec:	sub	sp, sp, #16
   159f0:	mov	r5, r3
   159f4:	mov	r6, r2
   159f8:	mov	r2, r1
   159fc:	mov	r8, r0
   15a00:	ldr	r0, [fp, #16]
   15a04:	str	r0, [sp]
   15a08:	add	r3, sp, #8
   15a0c:	mov	r0, r8
   15a10:	mov	r1, #0
   15a14:	bl	15adc <__assert_fail@plt+0x49f0>
   15a18:	cmp	r0, #0
   15a1c:	bne	15aac <__assert_fail@plt+0x49c0>
   15a20:	ldr	r7, [sp, #8]
   15a24:	ldr	r4, [sp, #12]
   15a28:	subs	r0, r7, r6
   15a2c:	sbcs	r0, r4, r5
   15a30:	bcc	15a54 <__assert_fail@plt+0x4968>
   15a34:	ldr	r0, [fp, #12]
   15a38:	ldr	r1, [fp, #8]
   15a3c:	subs	r1, r1, r7
   15a40:	sbcs	r0, r0, r4
   15a44:	ldrcs	r0, [sp, #8]
   15a48:	ldrcs	r1, [sp, #12]
   15a4c:	subcs	sp, fp, #24
   15a50:	popcs	{r4, r5, r6, r7, r8, sl, fp, pc}
   15a54:	bl	11014 <__errno_location@plt>
   15a58:	subs	r1, r7, #1073741824	; 0x40000000
   15a5c:	sbcs	r1, r4, #0
   15a60:	movcc	r1, #34	; 0x22
   15a64:	movcs	r1, #75	; 0x4b
   15a68:	str	r1, [r0]
   15a6c:	ldr	r5, [fp, #24]
   15a70:	ldr	r6, [fp, #20]
   15a74:	bl	11014 <__errno_location@plt>
   15a78:	ldr	r4, [r0]
   15a7c:	mov	r0, r8
   15a80:	bl	14c98 <__assert_fail@plt+0x3bac>
   15a84:	str	r0, [sp]
   15a88:	subs	r1, r4, #22
   15a8c:	movne	r1, r4
   15a90:	cmp	r5, #0
   15a94:	movweq	r5, #1
   15a98:	movw	r2, #28737	; 0x7041
   15a9c:	movt	r2, #1
   15aa0:	mov	r0, r5
   15aa4:	mov	r3, r6
   15aa8:	bl	10f78 <error@plt>
   15aac:	cmp	r0, #1
   15ab0:	beq	15ac8 <__assert_fail@plt+0x49dc>
   15ab4:	cmp	r0, #3
   15ab8:	bne	15a6c <__assert_fail@plt+0x4980>
   15abc:	bl	11014 <__errno_location@plt>
   15ac0:	mov	r1, #0
   15ac4:	b	15a68 <__assert_fail@plt+0x497c>
   15ac8:	bl	11014 <__errno_location@plt>
   15acc:	mov	r1, #75	; 0x4b
   15ad0:	b	15a68 <__assert_fail@plt+0x497c>
   15ad4:	mov	r1, #10
   15ad8:	b	159e4 <__assert_fail@plt+0x48f8>
   15adc:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   15ae0:	add	fp, sp, #28
   15ae4:	sub	sp, sp, #20
   15ae8:	cmp	r2, #37	; 0x25
   15aec:	bcs	15f20 <__assert_fail@plt+0x4e34>
   15af0:	mov	r5, r2
   15af4:	mov	r6, r1
   15af8:	mov	r4, r0
   15afc:	str	r3, [sp, #4]
   15b00:	ldr	sl, [fp, #8]
   15b04:	bl	11014 <__errno_location@plt>
   15b08:	mov	r7, r0
   15b0c:	mov	r0, #0
   15b10:	str	r0, [r7]
   15b14:	bl	10fcc <__ctype_b_loc@plt>
   15b18:	ldr	r1, [r0]
   15b1c:	mov	r2, r4
   15b20:	ldrb	r0, [r2], #1
   15b24:	add	r3, r1, r0, lsl #1
   15b28:	ldrb	r3, [r3, #1]
   15b2c:	tst	r3, #32
   15b30:	bne	15b20 <__assert_fail@plt+0x4a34>
   15b34:	add	r9, sp, #16
   15b38:	cmp	r6, #0
   15b3c:	movne	r9, r6
   15b40:	mov	r8, #4
   15b44:	cmp	r0, #45	; 0x2d
   15b48:	beq	15f14 <__assert_fail@plt+0x4e28>
   15b4c:	mov	r0, r4
   15b50:	mov	r1, r9
   15b54:	mov	r2, r5
   15b58:	bl	11050 <strtoumax@plt>
   15b5c:	str	r1, [sp, #12]
   15b60:	str	r0, [sp, #8]
   15b64:	ldr	r6, [r9]
   15b68:	cmp	r6, r4
   15b6c:	beq	15b94 <__assert_fail@plt+0x4aa8>
   15b70:	ldr	r0, [r7]
   15b74:	cmp	r0, #0
   15b78:	beq	15bcc <__assert_fail@plt+0x4ae0>
   15b7c:	cmp	r0, #34	; 0x22
   15b80:	bne	15f14 <__assert_fail@plt+0x4e28>
   15b84:	mov	r8, #1
   15b88:	cmp	sl, #0
   15b8c:	bne	15bd8 <__assert_fail@plt+0x4aec>
   15b90:	b	15f04 <__assert_fail@plt+0x4e18>
   15b94:	cmp	sl, #0
   15b98:	beq	15f14 <__assert_fail@plt+0x4e28>
   15b9c:	ldrb	r1, [r6]
   15ba0:	cmp	r1, #0
   15ba4:	beq	15f14 <__assert_fail@plt+0x4e28>
   15ba8:	mov	r0, sl
   15bac:	bl	10ffc <strchr@plt>
   15bb0:	cmp	r0, #0
   15bb4:	beq	15f14 <__assert_fail@plt+0x4e28>
   15bb8:	mov	r8, #0
   15bbc:	str	r8, [sp, #12]
   15bc0:	mov	r0, #1
   15bc4:	str	r0, [sp, #8]
   15bc8:	b	15bd8 <__assert_fail@plt+0x4aec>
   15bcc:	mov	r8, r0
   15bd0:	cmp	sl, #0
   15bd4:	beq	15f04 <__assert_fail@plt+0x4e18>
   15bd8:	ldrb	r4, [r6]
   15bdc:	cmp	r4, #0
   15be0:	beq	15f04 <__assert_fail@plt+0x4e18>
   15be4:	mov	r0, sl
   15be8:	mov	r1, r4
   15bec:	bl	10ffc <strchr@plt>
   15bf0:	cmp	r0, #0
   15bf4:	beq	15e20 <__assert_fail@plt+0x4d34>
   15bf8:	sub	r0, r4, #69	; 0x45
   15bfc:	mov	r7, #1
   15c00:	mov	r5, #1024	; 0x400
   15c04:	cmp	r0, #47	; 0x2f
   15c08:	bhi	15d1c <__assert_fail@plt+0x4c30>
   15c0c:	add	r1, pc, #0
   15c10:	ldr	pc, [r1, r0, lsl #2]
   15c14:	ldrdeq	r5, [r1], -r4
   15c18:	andeq	r5, r1, ip, lsl sp
   15c1c:	ldrdeq	r5, [r1], -r4
   15c20:	andeq	r5, r1, ip, lsl sp
   15c24:	andeq	r5, r1, ip, lsl sp
   15c28:	andeq	r5, r1, ip, lsl sp
   15c2c:	ldrdeq	r5, [r1], -r4
   15c30:	andeq	r5, r1, ip, lsl sp
   15c34:	ldrdeq	r5, [r1], -r4
   15c38:	andeq	r5, r1, ip, lsl sp
   15c3c:	andeq	r5, r1, ip, lsl sp
   15c40:	ldrdeq	r5, [r1], -r4
   15c44:	andeq	r5, r1, ip, lsl sp
   15c48:	andeq	r5, r1, ip, lsl sp
   15c4c:	andeq	r5, r1, ip, lsl sp
   15c50:	ldrdeq	r5, [r1], -r4
   15c54:	andeq	r5, r1, ip, lsl sp
   15c58:	andeq	r5, r1, ip, lsl sp
   15c5c:	andeq	r5, r1, ip, lsl sp
   15c60:	andeq	r5, r1, ip, lsl sp
   15c64:	ldrdeq	r5, [r1], -r4
   15c68:	ldrdeq	r5, [r1], -r4
   15c6c:	andeq	r5, r1, ip, lsl sp
   15c70:	andeq	r5, r1, ip, lsl sp
   15c74:	andeq	r5, r1, ip, lsl sp
   15c78:	andeq	r5, r1, ip, lsl sp
   15c7c:	andeq	r5, r1, ip, lsl sp
   15c80:	andeq	r5, r1, ip, lsl sp
   15c84:	andeq	r5, r1, ip, lsl sp
   15c88:	andeq	r5, r1, ip, lsl sp
   15c8c:	andeq	r5, r1, ip, lsl sp
   15c90:	andeq	r5, r1, ip, lsl sp
   15c94:	andeq	r5, r1, ip, lsl sp
   15c98:	andeq	r5, r1, ip, lsl sp
   15c9c:	ldrdeq	r5, [r1], -r4
   15ca0:	andeq	r5, r1, ip, lsl sp
   15ca4:	andeq	r5, r1, ip, lsl sp
   15ca8:	andeq	r5, r1, ip, lsl sp
   15cac:	ldrdeq	r5, [r1], -r4
   15cb0:	andeq	r5, r1, ip, lsl sp
   15cb4:	ldrdeq	r5, [r1], -r4
   15cb8:	andeq	r5, r1, ip, lsl sp
   15cbc:	andeq	r5, r1, ip, lsl sp
   15cc0:	andeq	r5, r1, ip, lsl sp
   15cc4:	andeq	r5, r1, ip, lsl sp
   15cc8:	andeq	r5, r1, ip, lsl sp
   15ccc:	andeq	r5, r1, ip, lsl sp
   15cd0:	ldrdeq	r5, [r1], -r4
   15cd4:	mov	r0, sl
   15cd8:	mov	r1, #48	; 0x30
   15cdc:	bl	10ffc <strchr@plt>
   15ce0:	cmp	r0, #0
   15ce4:	beq	15d1c <__assert_fail@plt+0x4c30>
   15ce8:	ldrb	r0, [r6, #1]
   15cec:	cmp	r0, #66	; 0x42
   15cf0:	cmpne	r0, #68	; 0x44
   15cf4:	bne	15d04 <__assert_fail@plt+0x4c18>
   15cf8:	mov	r7, #2
   15cfc:	mov	r5, #1000	; 0x3e8
   15d00:	b	15d1c <__assert_fail@plt+0x4c30>
   15d04:	cmp	r0, #105	; 0x69
   15d08:	bne	15d1c <__assert_fail@plt+0x4c30>
   15d0c:	ldrb	r0, [r6, #2]
   15d10:	mov	r7, #1
   15d14:	cmp	r0, #66	; 0x42
   15d18:	movweq	r7, #3
   15d1c:	sub	r1, r4, #66	; 0x42
   15d20:	cmp	r1, #53	; 0x35
   15d24:	bhi	15e20 <__assert_fail@plt+0x4d34>
   15d28:	mov	r0, #0
   15d2c:	add	r2, pc, #0
   15d30:	ldr	pc, [r2, r1, lsl #2]
   15d34:	andeq	r5, r1, r8, lsl #29
   15d38:	andeq	r5, r1, r0, lsr #28
   15d3c:	andeq	r5, r1, r0, lsr #28
   15d40:	muleq	r1, r4, lr
   15d44:	andeq	r5, r1, r0, lsr #28
   15d48:	andeq	r5, r1, ip, lsl #28
   15d4c:	andeq	r5, r1, r0, lsr #28
   15d50:	andeq	r5, r1, r0, lsr #28
   15d54:	andeq	r5, r1, r0, lsr #28
   15d58:	andeq	r5, r1, r8, lsr lr
   15d5c:	andeq	r5, r1, r0, lsr #28
   15d60:	andeq	r5, r1, ip, asr #28
   15d64:	andeq	r5, r1, r0, lsr #28
   15d68:	andeq	r5, r1, r0, lsr #28
   15d6c:	andeq	r5, r1, r8, lsr #29
   15d70:	andeq	r5, r1, r0, lsr #28
   15d74:	andeq	r5, r1, r0, lsr #28
   15d78:	andeq	r5, r1, r0, lsr #28
   15d7c:	andeq	r5, r1, r0, ror #28
   15d80:	andeq	r5, r1, r0, lsr #28
   15d84:	andeq	r5, r1, r0, lsr #28
   15d88:	andeq	r5, r1, r0, lsr #28
   15d8c:	andeq	r5, r1, r0, lsr #28
   15d90:			; <UNDEFINED> instruction: 0x00015ebc
   15d94:	andeq	r5, r1, r4, ror lr
   15d98:	andeq	r5, r1, r0, lsr #28
   15d9c:	andeq	r5, r1, r0, lsr #28
   15da0:	andeq	r5, r1, r0, lsr #28
   15da4:	andeq	r5, r1, r0, lsr #28
   15da8:	andeq	r5, r1, r0, lsr #28
   15dac:	andeq	r5, r1, r0, lsr #28
   15db0:	andeq	r5, r1, r0, lsr #28
   15db4:	ldrdeq	r5, [r1], -r0
   15db8:	andeq	r5, r1, r8, ror #29
   15dbc:	andeq	r5, r1, r0, lsr #28
   15dc0:	andeq	r5, r1, r0, lsr #28
   15dc4:	andeq	r5, r1, r0, lsr #28
   15dc8:	andeq	r5, r1, ip, lsl #28
   15dcc:	andeq	r5, r1, r0, lsr #28
   15dd0:	andeq	r5, r1, r0, lsr #28
   15dd4:	andeq	r5, r1, r0, lsr #28
   15dd8:	andeq	r5, r1, r8, lsr lr
   15ddc:	andeq	r5, r1, r0, lsr #28
   15de0:	andeq	r5, r1, ip, asr #28
   15de4:	andeq	r5, r1, r0, lsr #28
   15de8:	andeq	r5, r1, r0, lsr #28
   15dec:	andeq	r5, r1, r0, lsr #28
   15df0:	andeq	r5, r1, r0, lsr #28
   15df4:	andeq	r5, r1, r0, lsr #28
   15df8:	andeq	r5, r1, r0, lsr #28
   15dfc:	andeq	r5, r1, r0, ror #28
   15e00:	andeq	r5, r1, r0, lsr #28
   15e04:	andeq	r5, r1, r0, lsr #28
   15e08:	ldrdeq	r5, [r1], -ip
   15e0c:	add	r0, sp, #8
   15e10:	mov	r1, r5
   15e14:	mov	r2, #3
   15e18:	bl	15fcc <__assert_fail@plt+0x4ee0>
   15e1c:	b	15ee8 <__assert_fail@plt+0x4dfc>
   15e20:	ldr	r0, [sp, #8]
   15e24:	ldr	r1, [sp, #12]
   15e28:	ldr	r2, [sp, #4]
   15e2c:	strd	r0, [r2]
   15e30:	orr	r8, r8, #2
   15e34:	b	15f14 <__assert_fail@plt+0x4e28>
   15e38:	add	r0, sp, #8
   15e3c:	mov	r1, r5
   15e40:	mov	r2, #1
   15e44:	bl	15fcc <__assert_fail@plt+0x4ee0>
   15e48:	b	15ee8 <__assert_fail@plt+0x4dfc>
   15e4c:	add	r0, sp, #8
   15e50:	mov	r1, r5
   15e54:	mov	r2, #2
   15e58:	bl	15fcc <__assert_fail@plt+0x4ee0>
   15e5c:	b	15ee8 <__assert_fail@plt+0x4dfc>
   15e60:	add	r0, sp, #8
   15e64:	mov	r1, r5
   15e68:	mov	r2, #4
   15e6c:	bl	15fcc <__assert_fail@plt+0x4ee0>
   15e70:	b	15ee8 <__assert_fail@plt+0x4dfc>
   15e74:	add	r0, sp, #8
   15e78:	mov	r1, r5
   15e7c:	mov	r2, #7
   15e80:	bl	15fcc <__assert_fail@plt+0x4ee0>
   15e84:	b	15ee8 <__assert_fail@plt+0x4dfc>
   15e88:	add	r0, sp, #8
   15e8c:	mov	r1, #1024	; 0x400
   15e90:	b	15ee4 <__assert_fail@plt+0x4df8>
   15e94:	add	r0, sp, #8
   15e98:	mov	r1, r5
   15e9c:	mov	r2, #6
   15ea0:	bl	15fcc <__assert_fail@plt+0x4ee0>
   15ea4:	b	15ee8 <__assert_fail@plt+0x4dfc>
   15ea8:	add	r0, sp, #8
   15eac:	mov	r1, r5
   15eb0:	mov	r2, #5
   15eb4:	bl	15fcc <__assert_fail@plt+0x4ee0>
   15eb8:	b	15ee8 <__assert_fail@plt+0x4dfc>
   15ebc:	add	r0, sp, #8
   15ec0:	mov	r1, r5
   15ec4:	mov	r2, #8
   15ec8:	bl	15fcc <__assert_fail@plt+0x4ee0>
   15ecc:	b	15ee8 <__assert_fail@plt+0x4dfc>
   15ed0:	add	r0, sp, #8
   15ed4:	mov	r1, #512	; 0x200
   15ed8:	b	15ee4 <__assert_fail@plt+0x4df8>
   15edc:	add	r0, sp, #8
   15ee0:	mov	r1, #2
   15ee4:	bl	15f40 <__assert_fail@plt+0x4e54>
   15ee8:	ldr	r1, [r9]
   15eec:	add	r2, r1, r7
   15ef0:	str	r2, [r9]
   15ef4:	ldrb	r1, [r1, r7]
   15ef8:	orr	r8, r0, r8
   15efc:	cmp	r1, #0
   15f00:	orrne	r8, r8, #2
   15f04:	ldr	r0, [sp, #8]
   15f08:	ldr	r1, [sp, #12]
   15f0c:	ldr	r2, [sp, #4]
   15f10:	strd	r0, [r2]
   15f14:	mov	r0, r8
   15f18:	sub	sp, fp, #28
   15f1c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15f20:	movw	r0, #30893	; 0x78ad
   15f24:	movt	r0, #1
   15f28:	movw	r1, #30931	; 0x78d3
   15f2c:	movt	r1, #1
   15f30:	movw	r3, #30947	; 0x78e3
   15f34:	movt	r3, #1
   15f38:	mov	r2, #85	; 0x55
   15f3c:	bl	110ec <__assert_fail@plt>
   15f40:	push	{r4, r5, r6, r7, fp, lr}
   15f44:	add	fp, sp, #16
   15f48:	mov	r5, r1
   15f4c:	mov	r4, r0
   15f50:	cmn	r1, #1
   15f54:	ble	15f8c <__assert_fail@plt+0x4ea0>
   15f58:	cmp	r5, #0
   15f5c:	beq	15fac <__assert_fail@plt+0x4ec0>
   15f60:	asr	r3, r5, #31
   15f64:	mvn	r6, #0
   15f68:	mvn	r0, #0
   15f6c:	mvn	r1, #0
   15f70:	mov	r2, r5
   15f74:	bl	16964 <__assert_fail@plt+0x5878>
   15f78:	ldrd	r2, [r4]
   15f7c:	subs	r0, r0, r2
   15f80:	sbcs	r0, r1, r3
   15f84:	bcc	15f9c <__assert_fail@plt+0x4eb0>
   15f88:	b	15fac <__assert_fail@plt+0x4ec0>
   15f8c:	ldrd	r0, [r4]
   15f90:	orrs	r0, r0, r1
   15f94:	beq	15fac <__assert_fail@plt+0x4ec0>
   15f98:	mvn	r6, #0
   15f9c:	mov	r0, #1
   15fa0:	mvn	r7, #0
   15fa4:	strd	r6, [r4]
   15fa8:	pop	{r4, r5, r6, r7, fp, pc}
   15fac:	ldrd	r0, [r4]
   15fb0:	umull	r6, r2, r0, r5
   15fb4:	asr	r3, r5, #31
   15fb8:	mla	r0, r0, r3, r2
   15fbc:	mla	r7, r1, r5, r0
   15fc0:	mov	r0, #0
   15fc4:	strd	r6, [r4]
   15fc8:	pop	{r4, r5, r6, r7, fp, pc}
   15fcc:	push	{r4, r5, r6, r7, fp, lr}
   15fd0:	add	fp, sp, #16
   15fd4:	cmp	r2, #0
   15fd8:	beq	1600c <__assert_fail@plt+0x4f20>
   15fdc:	mov	r4, r2
   15fe0:	mov	r5, r1
   15fe4:	mov	r7, r0
   15fe8:	mov	r6, #0
   15fec:	mov	r0, r7
   15ff0:	mov	r1, r5
   15ff4:	bl	15f40 <__assert_fail@plt+0x4e54>
   15ff8:	orr	r6, r0, r6
   15ffc:	subs	r4, r4, #1
   16000:	bne	15fec <__assert_fail@plt+0x4f00>
   16004:	mov	r0, r6
   16008:	pop	{r4, r5, r6, r7, fp, pc}
   1600c:	mov	r6, #0
   16010:	mov	r0, r6
   16014:	pop	{r4, r5, r6, r7, fp, pc}
   16018:	clz	r2, r1
   1601c:	lsr	r2, r2, #5
   16020:	clz	r3, r0
   16024:	lsr	r3, r3, #5
   16028:	orrs	r2, r3, r2
   1602c:	movwne	r1, #1
   16030:	movwne	r0, #1
   16034:	cmp	r1, #0
   16038:	beq	16068 <__assert_fail@plt+0x4f7c>
   1603c:	mvn	r2, #-2147483648	; 0x80000000
   16040:	udiv	r2, r2, r1
   16044:	cmp	r2, r0
   16048:	bcs	16068 <__assert_fail@plt+0x4f7c>
   1604c:	push	{fp, lr}
   16050:	mov	fp, sp
   16054:	bl	11014 <__errno_location@plt>
   16058:	mov	r1, #12
   1605c:	str	r1, [r0]
   16060:	mov	r0, #0
   16064:	pop	{fp, pc}
   16068:	b	10e64 <calloc@plt>
   1606c:	cmp	r0, #0
   16070:	movweq	r0, #1
   16074:	cmn	r0, #1
   16078:	ble	16080 <__assert_fail@plt+0x4f94>
   1607c:	b	10f90 <malloc@plt>
   16080:	push	{fp, lr}
   16084:	mov	fp, sp
   16088:	bl	11014 <__errno_location@plt>
   1608c:	mov	r1, #12
   16090:	str	r1, [r0]
   16094:	mov	r0, #0
   16098:	pop	{fp, pc}
   1609c:	push	{fp, lr}
   160a0:	mov	fp, sp
   160a4:	cmp	r0, #0
   160a8:	beq	160c4 <__assert_fail@plt+0x4fd8>
   160ac:	cmp	r1, #0
   160b0:	beq	160d0 <__assert_fail@plt+0x4fe4>
   160b4:	cmn	r1, #1
   160b8:	ble	160dc <__assert_fail@plt+0x4ff0>
   160bc:	pop	{fp, lr}
   160c0:	b	10ef4 <realloc@plt>
   160c4:	mov	r0, r1
   160c8:	pop	{fp, lr}
   160cc:	b	1606c <__assert_fail@plt+0x4f80>
   160d0:	bl	132e8 <__assert_fail@plt+0x21fc>
   160d4:	mov	r0, #0
   160d8:	pop	{fp, pc}
   160dc:	bl	11014 <__errno_location@plt>
   160e0:	mov	r1, #12
   160e4:	str	r1, [r0]
   160e8:	mov	r0, #0
   160ec:	pop	{fp, pc}
   160f0:	mov	r0, #0
   160f4:	bx	lr
   160f8:	mov	r0, #0
   160fc:	bx	lr
   16100:	mov	r1, r0
   16104:	sub	r2, r0, #65	; 0x41
   16108:	mov	r0, #1
   1610c:	cmp	r2, #26
   16110:	subcs	r2, r1, #97	; 0x61
   16114:	cmpcs	r2, #26
   16118:	bcs	16120 <__assert_fail@plt+0x5034>
   1611c:	bx	lr
   16120:	sub	r1, r1, #48	; 0x30
   16124:	cmp	r1, #10
   16128:	movcs	r0, #0
   1612c:	bx	lr
   16130:	mov	r1, r0
   16134:	sub	r2, r0, #65	; 0x41
   16138:	mov	r0, #1
   1613c:	cmp	r2, #26
   16140:	subcs	r1, r1, #97	; 0x61
   16144:	cmpcs	r1, #26
   16148:	movcs	r0, #0
   1614c:	bx	lr
   16150:	mov	r1, #0
   16154:	cmp	r0, #128	; 0x80
   16158:	movwcc	r1, #1
   1615c:	mov	r0, r1
   16160:	bx	lr
   16164:	sub	r1, r0, #9
   16168:	clz	r1, r1
   1616c:	lsr	r1, r1, #5
   16170:	sub	r0, r0, #32
   16174:	clz	r0, r0
   16178:	lsr	r0, r0, #5
   1617c:	orr	r0, r0, r1
   16180:	bx	lr
   16184:	mov	r1, r0
   16188:	mov	r0, #1
   1618c:	cmp	r1, #32
   16190:	bxcc	lr
   16194:	cmp	r1, #127	; 0x7f
   16198:	movne	r0, #0
   1619c:	bx	lr
   161a0:	sub	r1, r0, #48	; 0x30
   161a4:	mov	r0, #0
   161a8:	cmp	r1, #10
   161ac:	movwcc	r0, #1
   161b0:	bx	lr
   161b4:	sub	r1, r0, #33	; 0x21
   161b8:	mov	r0, #0
   161bc:	cmp	r1, #94	; 0x5e
   161c0:	movwcc	r0, #1
   161c4:	bx	lr
   161c8:	sub	r1, r0, #97	; 0x61
   161cc:	mov	r0, #0
   161d0:	cmp	r1, #26
   161d4:	movwcc	r0, #1
   161d8:	bx	lr
   161dc:	sub	r1, r0, #32
   161e0:	mov	r0, #0
   161e4:	cmp	r1, #95	; 0x5f
   161e8:	movwcc	r0, #1
   161ec:	bx	lr
   161f0:	sub	r1, r0, #33	; 0x21
   161f4:	cmp	r1, #93	; 0x5d
   161f8:	bhi	16384 <__assert_fail@plt+0x5298>
   161fc:	mov	r0, #1
   16200:	add	r2, pc, #0
   16204:	ldr	pc, [r2, r1, lsl #2]
   16208:	andeq	r6, r1, r0, lsl #7
   1620c:	andeq	r6, r1, r0, lsl #7
   16210:	andeq	r6, r1, r0, lsl #7
   16214:	andeq	r6, r1, r0, lsl #7
   16218:	andeq	r6, r1, r0, lsl #7
   1621c:	andeq	r6, r1, r0, lsl #7
   16220:	andeq	r6, r1, r0, lsl #7
   16224:	andeq	r6, r1, r0, lsl #7
   16228:	andeq	r6, r1, r0, lsl #7
   1622c:	andeq	r6, r1, r0, lsl #7
   16230:	andeq	r6, r1, r0, lsl #7
   16234:	andeq	r6, r1, r0, lsl #7
   16238:	andeq	r6, r1, r0, lsl #7
   1623c:	andeq	r6, r1, r0, lsl #7
   16240:	andeq	r6, r1, r0, lsl #7
   16244:	andeq	r6, r1, r4, lsl #7
   16248:	andeq	r6, r1, r4, lsl #7
   1624c:	andeq	r6, r1, r4, lsl #7
   16250:	andeq	r6, r1, r4, lsl #7
   16254:	andeq	r6, r1, r4, lsl #7
   16258:	andeq	r6, r1, r4, lsl #7
   1625c:	andeq	r6, r1, r4, lsl #7
   16260:	andeq	r6, r1, r4, lsl #7
   16264:	andeq	r6, r1, r4, lsl #7
   16268:	andeq	r6, r1, r4, lsl #7
   1626c:	andeq	r6, r1, r0, lsl #7
   16270:	andeq	r6, r1, r0, lsl #7
   16274:	andeq	r6, r1, r0, lsl #7
   16278:	andeq	r6, r1, r0, lsl #7
   1627c:	andeq	r6, r1, r0, lsl #7
   16280:	andeq	r6, r1, r0, lsl #7
   16284:	andeq	r6, r1, r0, lsl #7
   16288:	andeq	r6, r1, r4, lsl #7
   1628c:	andeq	r6, r1, r4, lsl #7
   16290:	andeq	r6, r1, r4, lsl #7
   16294:	andeq	r6, r1, r4, lsl #7
   16298:	andeq	r6, r1, r4, lsl #7
   1629c:	andeq	r6, r1, r4, lsl #7
   162a0:	andeq	r6, r1, r4, lsl #7
   162a4:	andeq	r6, r1, r4, lsl #7
   162a8:	andeq	r6, r1, r4, lsl #7
   162ac:	andeq	r6, r1, r4, lsl #7
   162b0:	andeq	r6, r1, r4, lsl #7
   162b4:	andeq	r6, r1, r4, lsl #7
   162b8:	andeq	r6, r1, r4, lsl #7
   162bc:	andeq	r6, r1, r4, lsl #7
   162c0:	andeq	r6, r1, r4, lsl #7
   162c4:	andeq	r6, r1, r4, lsl #7
   162c8:	andeq	r6, r1, r4, lsl #7
   162cc:	andeq	r6, r1, r4, lsl #7
   162d0:	andeq	r6, r1, r4, lsl #7
   162d4:	andeq	r6, r1, r4, lsl #7
   162d8:	andeq	r6, r1, r4, lsl #7
   162dc:	andeq	r6, r1, r4, lsl #7
   162e0:	andeq	r6, r1, r4, lsl #7
   162e4:	andeq	r6, r1, r4, lsl #7
   162e8:	andeq	r6, r1, r4, lsl #7
   162ec:	andeq	r6, r1, r4, lsl #7
   162f0:	andeq	r6, r1, r0, lsl #7
   162f4:	andeq	r6, r1, r0, lsl #7
   162f8:	andeq	r6, r1, r0, lsl #7
   162fc:	andeq	r6, r1, r0, lsl #7
   16300:	andeq	r6, r1, r0, lsl #7
   16304:	andeq	r6, r1, r0, lsl #7
   16308:	andeq	r6, r1, r4, lsl #7
   1630c:	andeq	r6, r1, r4, lsl #7
   16310:	andeq	r6, r1, r4, lsl #7
   16314:	andeq	r6, r1, r4, lsl #7
   16318:	andeq	r6, r1, r4, lsl #7
   1631c:	andeq	r6, r1, r4, lsl #7
   16320:	andeq	r6, r1, r4, lsl #7
   16324:	andeq	r6, r1, r4, lsl #7
   16328:	andeq	r6, r1, r4, lsl #7
   1632c:	andeq	r6, r1, r4, lsl #7
   16330:	andeq	r6, r1, r4, lsl #7
   16334:	andeq	r6, r1, r4, lsl #7
   16338:	andeq	r6, r1, r4, lsl #7
   1633c:	andeq	r6, r1, r4, lsl #7
   16340:	andeq	r6, r1, r4, lsl #7
   16344:	andeq	r6, r1, r4, lsl #7
   16348:	andeq	r6, r1, r4, lsl #7
   1634c:	andeq	r6, r1, r4, lsl #7
   16350:	andeq	r6, r1, r4, lsl #7
   16354:	andeq	r6, r1, r4, lsl #7
   16358:	andeq	r6, r1, r4, lsl #7
   1635c:	andeq	r6, r1, r4, lsl #7
   16360:	andeq	r6, r1, r4, lsl #7
   16364:	andeq	r6, r1, r4, lsl #7
   16368:	andeq	r6, r1, r4, lsl #7
   1636c:	andeq	r6, r1, r4, lsl #7
   16370:	andeq	r6, r1, r0, lsl #7
   16374:	andeq	r6, r1, r0, lsl #7
   16378:	andeq	r6, r1, r0, lsl #7
   1637c:	andeq	r6, r1, r0, lsl #7
   16380:	bx	lr
   16384:	mov	r0, #0
   16388:	bx	lr
   1638c:	sub	r0, r0, #9
   16390:	cmp	r0, #23
   16394:	movhi	r0, #0
   16398:	bxhi	lr
   1639c:	bic	r0, r0, #-16777216	; 0xff000000
   163a0:	movw	r1, #31
   163a4:	movt	r1, #128	; 0x80
   163a8:	mov	r2, #1
   163ac:	and	r0, r2, r1, lsr r0
   163b0:	bx	lr
   163b4:	sub	r1, r0, #65	; 0x41
   163b8:	mov	r0, #0
   163bc:	cmp	r1, #26
   163c0:	movwcc	r0, #1
   163c4:	bx	lr
   163c8:	mov	r1, r0
   163cc:	sub	r2, r0, #48	; 0x30
   163d0:	mov	r0, #1
   163d4:	cmp	r2, #22
   163d8:	bhi	163f0 <__assert_fail@plt+0x5304>
   163dc:	mov	ip, #1
   163e0:	movw	r3, #1023	; 0x3ff
   163e4:	movt	r3, #126	; 0x7e
   163e8:	tst	r3, ip, lsl r2
   163ec:	bxne	lr
   163f0:	sub	r1, r1, #97	; 0x61
   163f4:	cmp	r1, #6
   163f8:	movcs	r0, #0
   163fc:	bxcs	lr
   16400:	bx	lr
   16404:	sub	r1, r0, #65	; 0x41
   16408:	cmp	r1, #26
   1640c:	addcc	r0, r0, #32
   16410:	bx	lr
   16414:	sub	r1, r0, #97	; 0x61
   16418:	cmp	r1, #26
   1641c:	subcc	r0, r0, #32
   16420:	bx	lr
   16424:	push	{r4, r5, r6, sl, fp, lr}
   16428:	add	fp, sp, #16
   1642c:	mov	r4, r0
   16430:	bl	10f54 <__fpending@plt>
   16434:	mov	r5, r0
   16438:	mov	r0, r4
   1643c:	bl	10f60 <ferror_unlocked@plt>
   16440:	mov	r6, r0
   16444:	mov	r0, r4
   16448:	bl	164a8 <__assert_fail@plt+0x53bc>
   1644c:	cmp	r6, #0
   16450:	beq	16474 <__assert_fail@plt+0x5388>
   16454:	mvn	r4, #0
   16458:	cmp	r0, #0
   1645c:	bne	164a0 <__assert_fail@plt+0x53b4>
   16460:	bl	11014 <__errno_location@plt>
   16464:	mov	r1, #0
   16468:	str	r1, [r0]
   1646c:	mov	r0, r4
   16470:	pop	{r4, r5, r6, sl, fp, pc}
   16474:	cmp	r0, #0
   16478:	mov	r4, r0
   1647c:	mvnne	r4, #0
   16480:	cmp	r5, #0
   16484:	bne	164a0 <__assert_fail@plt+0x53b4>
   16488:	cmp	r0, #0
   1648c:	beq	164a0 <__assert_fail@plt+0x53b4>
   16490:	bl	11014 <__errno_location@plt>
   16494:	ldr	r0, [r0]
   16498:	subs	r4, r0, #9
   1649c:	mvnne	r4, #0
   164a0:	mov	r0, r4
   164a4:	pop	{r4, r5, r6, sl, fp, pc}
   164a8:	push	{r4, r5, fp, lr}
   164ac:	add	fp, sp, #8
   164b0:	sub	sp, sp, #8
   164b4:	mov	r4, r0
   164b8:	bl	11044 <fileno@plt>
   164bc:	cmn	r0, #1
   164c0:	ble	16538 <__assert_fail@plt+0x544c>
   164c4:	mov	r0, r4
   164c8:	bl	10fa8 <__freading@plt>
   164cc:	cmp	r0, #0
   164d0:	beq	164fc <__assert_fail@plt+0x5410>
   164d4:	mov	r0, r4
   164d8:	bl	11044 <fileno@plt>
   164dc:	mov	r1, #1
   164e0:	str	r1, [sp]
   164e4:	mov	r2, #0
   164e8:	mov	r3, #0
   164ec:	bl	10f3c <lseek64@plt>
   164f0:	and	r0, r0, r1
   164f4:	cmn	r0, #1
   164f8:	beq	16538 <__assert_fail@plt+0x544c>
   164fc:	mov	r0, r4
   16500:	bl	16548 <__assert_fail@plt+0x545c>
   16504:	cmp	r0, #0
   16508:	beq	16538 <__assert_fail@plt+0x544c>
   1650c:	bl	11014 <__errno_location@plt>
   16510:	ldr	r5, [r0]
   16514:	mov	r0, r4
   16518:	bl	11074 <fclose@plt>
   1651c:	cmp	r5, #0
   16520:	beq	16530 <__assert_fail@plt+0x5444>
   16524:	bl	11014 <__errno_location@plt>
   16528:	str	r5, [r0]
   1652c:	mvn	r0, #0
   16530:	sub	sp, fp, #8
   16534:	pop	{r4, r5, fp, pc}
   16538:	mov	r0, r4
   1653c:	sub	sp, fp, #8
   16540:	pop	{r4, r5, fp, lr}
   16544:	b	11074 <fclose@plt>
   16548:	push	{r4, sl, fp, lr}
   1654c:	add	fp, sp, #8
   16550:	mov	r4, r0
   16554:	cmp	r0, #0
   16558:	beq	16570 <__assert_fail@plt+0x5484>
   1655c:	mov	r0, r4
   16560:	bl	10fa8 <__freading@plt>
   16564:	cmp	r0, #0
   16568:	movne	r0, r4
   1656c:	blne	1657c <__assert_fail@plt+0x5490>
   16570:	mov	r0, r4
   16574:	pop	{r4, sl, fp, lr}
   16578:	b	10ea0 <fflush@plt>
   1657c:	push	{fp, lr}
   16580:	mov	fp, sp
   16584:	sub	sp, sp, #8
   16588:	ldrb	r1, [r0, #1]
   1658c:	tst	r1, #1
   16590:	beq	165a8 <__assert_fail@plt+0x54bc>
   16594:	mov	r1, #1
   16598:	str	r1, [sp]
   1659c:	mov	r2, #0
   165a0:	mov	r3, #0
   165a4:	bl	165b0 <__assert_fail@plt+0x54c4>
   165a8:	mov	sp, fp
   165ac:	pop	{fp, pc}
   165b0:	push	{r4, r5, r6, r7, fp, lr}
   165b4:	add	fp, sp, #16
   165b8:	sub	sp, sp, #8
   165bc:	mov	r5, r3
   165c0:	mov	r6, r2
   165c4:	mov	r4, r0
   165c8:	ldr	r0, [r0, #4]
   165cc:	ldr	r1, [r4, #8]
   165d0:	cmp	r1, r0
   165d4:	bne	165f0 <__assert_fail@plt+0x5504>
   165d8:	ldrd	r0, [r4, #16]
   165dc:	cmp	r1, r0
   165e0:	bne	165f0 <__assert_fail@plt+0x5504>
   165e4:	ldr	r0, [r4, #36]	; 0x24
   165e8:	cmp	r0, #0
   165ec:	beq	16608 <__assert_fail@plt+0x551c>
   165f0:	mov	r0, r4
   165f4:	mov	r2, r6
   165f8:	mov	r3, r5
   165fc:	sub	sp, fp, #16
   16600:	pop	{r4, r5, r6, r7, fp, lr}
   16604:	b	11080 <fseeko64@plt>
   16608:	ldr	r7, [fp, #8]
   1660c:	mov	r0, r4
   16610:	bl	11044 <fileno@plt>
   16614:	str	r7, [sp]
   16618:	mov	r2, r6
   1661c:	mov	r3, r5
   16620:	bl	10f3c <lseek64@plt>
   16624:	and	r2, r0, r1
   16628:	cmn	r2, #1
   1662c:	beq	1664c <__assert_fail@plt+0x5560>
   16630:	strd	r0, [r4, #80]	; 0x50
   16634:	ldr	r0, [r4]
   16638:	bic	r0, r0, #16
   1663c:	str	r0, [r4]
   16640:	mov	r0, #0
   16644:	sub	sp, fp, #16
   16648:	pop	{r4, r5, r6, r7, fp, pc}
   1664c:	mvn	r0, #0
   16650:	sub	sp, fp, #16
   16654:	pop	{r4, r5, r6, r7, fp, pc}
   16658:	push	{fp, lr}
   1665c:	mov	fp, sp
   16660:	bl	11014 <__errno_location@plt>
   16664:	mov	r1, #12
   16668:	str	r1, [r0]
   1666c:	mov	r0, #0
   16670:	pop	{fp, pc}
   16674:	b	1606c <__assert_fail@plt+0x4f80>
   16678:	cmp	r1, #0
   1667c:	orreq	r1, r1, #1
   16680:	b	1609c <__assert_fail@plt+0x4fb0>
   16684:	b	16018 <__assert_fail@plt+0x4f2c>
   16688:	clz	r3, r2
   1668c:	lsr	ip, r3, #5
   16690:	clz	r3, r1
   16694:	lsr	r3, r3, #5
   16698:	orrs	r3, r3, ip
   1669c:	movwne	r1, #1
   166a0:	movwne	r2, #1
   166a4:	b	16744 <__assert_fail@plt+0x5658>
   166a8:	push	{fp, lr}
   166ac:	mov	fp, sp
   166b0:	mov	r0, #14
   166b4:	bl	110a4 <nl_langinfo@plt>
   166b8:	movw	r1, #29209	; 0x7219
   166bc:	movt	r1, #1
   166c0:	cmp	r0, #0
   166c4:	movne	r1, r0
   166c8:	ldrb	r2, [r1]
   166cc:	movw	r0, #31026	; 0x7932
   166d0:	movt	r0, #1
   166d4:	cmp	r2, #0
   166d8:	movne	r0, r1
   166dc:	pop	{fp, pc}
   166e0:	push	{r4, r5, r6, r7, fp, lr}
   166e4:	add	fp, sp, #16
   166e8:	sub	sp, sp, #8
   166ec:	mov	r7, r2
   166f0:	mov	r4, r1
   166f4:	add	r5, sp, #4
   166f8:	cmp	r0, #0
   166fc:	movne	r5, r0
   16700:	mov	r0, r5
   16704:	bl	10f6c <mbrtowc@plt>
   16708:	mov	r6, r0
   1670c:	cmp	r7, #0
   16710:	beq	16738 <__assert_fail@plt+0x564c>
   16714:	cmn	r6, #2
   16718:	bcc	16738 <__assert_fail@plt+0x564c>
   1671c:	mov	r0, #0
   16720:	bl	16780 <__assert_fail@plt+0x5694>
   16724:	cmp	r0, #0
   16728:	bne	16738 <__assert_fail@plt+0x564c>
   1672c:	ldrb	r0, [r4]
   16730:	str	r0, [r5]
   16734:	mov	r6, #1
   16738:	mov	r0, r6
   1673c:	sub	sp, fp, #16
   16740:	pop	{r4, r5, r6, r7, fp, pc}
   16744:	cmp	r2, #0
   16748:	beq	16778 <__assert_fail@plt+0x568c>
   1674c:	mvn	r3, #0
   16750:	udiv	r3, r3, r2
   16754:	cmp	r3, r1
   16758:	bcs	16778 <__assert_fail@plt+0x568c>
   1675c:	push	{fp, lr}
   16760:	mov	fp, sp
   16764:	bl	11014 <__errno_location@plt>
   16768:	mov	r1, #12
   1676c:	str	r1, [r0]
   16770:	mov	r0, #0
   16774:	pop	{fp, pc}
   16778:	mul	r1, r2, r1
   1677c:	b	1609c <__assert_fail@plt+0x4fb0>
   16780:	push	{r4, sl, fp, lr}
   16784:	add	fp, sp, #8
   16788:	sub	sp, sp, #264	; 0x108
   1678c:	add	r1, sp, #7
   16790:	movw	r2, #257	; 0x101
   16794:	bl	167ec <__assert_fail@plt+0x5700>
   16798:	mov	r4, #0
   1679c:	cmp	r0, #0
   167a0:	bne	167e0 <__assert_fail@plt+0x56f4>
   167a4:	add	r0, sp, #7
   167a8:	movw	r1, #31032	; 0x7938
   167ac:	movt	r1, #1
   167b0:	mov	r2, #2
   167b4:	bl	10fe4 <bcmp@plt>
   167b8:	cmp	r0, #0
   167bc:	beq	167e0 <__assert_fail@plt+0x56f4>
   167c0:	add	r0, sp, #7
   167c4:	movw	r1, #31034	; 0x793a
   167c8:	movt	r1, #1
   167cc:	mov	r2, #6
   167d0:	bl	10fe4 <bcmp@plt>
   167d4:	mov	r4, r0
   167d8:	cmp	r0, #0
   167dc:	movwne	r4, #1
   167e0:	mov	r0, r4
   167e4:	sub	sp, fp, #8
   167e8:	pop	{r4, sl, fp, pc}
   167ec:	b	167f0 <__assert_fail@plt+0x5704>
   167f0:	push	{r4, r5, r6, r7, fp, lr}
   167f4:	add	fp, sp, #16
   167f8:	mov	r6, r2
   167fc:	mov	r4, r1
   16800:	bl	16888 <__assert_fail@plt+0x579c>
   16804:	cmp	r0, #0
   16808:	beq	16838 <__assert_fail@plt+0x574c>
   1680c:	mov	r7, r0
   16810:	bl	10ff0 <strlen@plt>
   16814:	cmp	r0, r6
   16818:	bcs	16854 <__assert_fail@plt+0x5768>
   1681c:	add	r2, r0, #1
   16820:	mov	r0, r4
   16824:	mov	r1, r7
   16828:	bl	10ec4 <memcpy@plt>
   1682c:	mov	r5, #0
   16830:	mov	r0, r5
   16834:	pop	{r4, r5, r6, r7, fp, pc}
   16838:	mov	r5, #22
   1683c:	cmp	r6, #0
   16840:	beq	1687c <__assert_fail@plt+0x5790>
   16844:	mov	r0, #0
   16848:	strb	r0, [r4]
   1684c:	mov	r0, r5
   16850:	pop	{r4, r5, r6, r7, fp, pc}
   16854:	mov	r5, #34	; 0x22
   16858:	cmp	r6, #0
   1685c:	beq	1687c <__assert_fail@plt+0x5790>
   16860:	sub	r6, r6, #1
   16864:	mov	r0, r4
   16868:	mov	r1, r7
   1686c:	mov	r2, r6
   16870:	bl	10ec4 <memcpy@plt>
   16874:	mov	r0, #0
   16878:	strb	r0, [r4, r6]
   1687c:	mov	r0, r5
   16880:	pop	{r4, r5, r6, r7, fp, pc}
   16884:	b	16888 <__assert_fail@plt+0x579c>
   16888:	mov	r1, #0
   1688c:	b	1108c <setlocale@plt>
   16890:	cmp	r3, #0
   16894:	cmpeq	r2, #0
   16898:	bne	168bc <__assert_fail@plt+0x57d0>
   1689c:	cmp	r1, #0
   168a0:	movlt	r1, #-2147483648	; 0x80000000
   168a4:	movlt	r0, #0
   168a8:	blt	168b8 <__assert_fail@plt+0x57cc>
   168ac:	cmpeq	r0, #0
   168b0:	mvnne	r1, #-2147483648	; 0x80000000
   168b4:	mvnne	r0, #0
   168b8:	b	169a0 <__assert_fail@plt+0x58b4>
   168bc:	sub	sp, sp, #8
   168c0:	push	{sp, lr}
   168c4:	cmp	r1, #0
   168c8:	blt	168e8 <__assert_fail@plt+0x57fc>
   168cc:	cmp	r3, #0
   168d0:	blt	1691c <__assert_fail@plt+0x5830>
   168d4:	bl	169b0 <__assert_fail@plt+0x58c4>
   168d8:	ldr	lr, [sp, #4]
   168dc:	add	sp, sp, #8
   168e0:	pop	{r2, r3}
   168e4:	bx	lr
   168e8:	rsbs	r0, r0, #0
   168ec:	sbc	r1, r1, r1, lsl #1
   168f0:	cmp	r3, #0
   168f4:	blt	16940 <__assert_fail@plt+0x5854>
   168f8:	bl	169b0 <__assert_fail@plt+0x58c4>
   168fc:	ldr	lr, [sp, #4]
   16900:	add	sp, sp, #8
   16904:	pop	{r2, r3}
   16908:	rsbs	r0, r0, #0
   1690c:	sbc	r1, r1, r1, lsl #1
   16910:	rsbs	r2, r2, #0
   16914:	sbc	r3, r3, r3, lsl #1
   16918:	bx	lr
   1691c:	rsbs	r2, r2, #0
   16920:	sbc	r3, r3, r3, lsl #1
   16924:	bl	169b0 <__assert_fail@plt+0x58c4>
   16928:	ldr	lr, [sp, #4]
   1692c:	add	sp, sp, #8
   16930:	pop	{r2, r3}
   16934:	rsbs	r0, r0, #0
   16938:	sbc	r1, r1, r1, lsl #1
   1693c:	bx	lr
   16940:	rsbs	r2, r2, #0
   16944:	sbc	r3, r3, r3, lsl #1
   16948:	bl	169b0 <__assert_fail@plt+0x58c4>
   1694c:	ldr	lr, [sp, #4]
   16950:	add	sp, sp, #8
   16954:	pop	{r2, r3}
   16958:	rsbs	r2, r2, #0
   1695c:	sbc	r3, r3, r3, lsl #1
   16960:	bx	lr
   16964:	cmp	r3, #0
   16968:	cmpeq	r2, #0
   1696c:	bne	16984 <__assert_fail@plt+0x5898>
   16970:	cmp	r1, #0
   16974:	cmpeq	r0, #0
   16978:	mvnne	r1, #0
   1697c:	mvnne	r0, #0
   16980:	b	169a0 <__assert_fail@plt+0x58b4>
   16984:	sub	sp, sp, #8
   16988:	push	{sp, lr}
   1698c:	bl	169b0 <__assert_fail@plt+0x58c4>
   16990:	ldr	lr, [sp, #4]
   16994:	add	sp, sp, #8
   16998:	pop	{r2, r3}
   1699c:	bx	lr
   169a0:	push	{r1, lr}
   169a4:	mov	r0, #8
   169a8:	bl	10e7c <raise@plt>
   169ac:	pop	{r1, pc}
   169b0:	cmp	r1, r3
   169b4:	cmpeq	r0, r2
   169b8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   169bc:	mov	r4, r0
   169c0:	movcc	r0, #0
   169c4:	mov	r5, r1
   169c8:	ldr	lr, [sp, #36]	; 0x24
   169cc:	movcc	r1, r0
   169d0:	bcc	16acc <__assert_fail@plt+0x59e0>
   169d4:	cmp	r3, #0
   169d8:	clzeq	ip, r2
   169dc:	clzne	ip, r3
   169e0:	addeq	ip, ip, #32
   169e4:	cmp	r5, #0
   169e8:	clzeq	r1, r4
   169ec:	addeq	r1, r1, #32
   169f0:	clzne	r1, r5
   169f4:	sub	ip, ip, r1
   169f8:	sub	sl, ip, #32
   169fc:	lsl	r9, r3, ip
   16a00:	rsb	fp, ip, #32
   16a04:	orr	r9, r9, r2, lsl sl
   16a08:	orr	r9, r9, r2, lsr fp
   16a0c:	lsl	r8, r2, ip
   16a10:	cmp	r5, r9
   16a14:	cmpeq	r4, r8
   16a18:	movcc	r0, #0
   16a1c:	movcc	r1, r0
   16a20:	bcc	16a3c <__assert_fail@plt+0x5950>
   16a24:	mov	r0, #1
   16a28:	subs	r4, r4, r8
   16a2c:	lsl	r1, r0, sl
   16a30:	orr	r1, r1, r0, lsr fp
   16a34:	lsl	r0, r0, ip
   16a38:	sbc	r5, r5, r9
   16a3c:	cmp	ip, #0
   16a40:	beq	16acc <__assert_fail@plt+0x59e0>
   16a44:	lsr	r6, r8, #1
   16a48:	orr	r6, r6, r9, lsl #31
   16a4c:	lsr	r7, r9, #1
   16a50:	mov	r2, ip
   16a54:	b	16a78 <__assert_fail@plt+0x598c>
   16a58:	subs	r3, r4, r6
   16a5c:	sbc	r8, r5, r7
   16a60:	adds	r3, r3, r3
   16a64:	adc	r8, r8, r8
   16a68:	adds	r4, r3, #1
   16a6c:	adc	r5, r8, #0
   16a70:	subs	r2, r2, #1
   16a74:	beq	16a94 <__assert_fail@plt+0x59a8>
   16a78:	cmp	r5, r7
   16a7c:	cmpeq	r4, r6
   16a80:	bcs	16a58 <__assert_fail@plt+0x596c>
   16a84:	adds	r4, r4, r4
   16a88:	adc	r5, r5, r5
   16a8c:	subs	r2, r2, #1
   16a90:	bne	16a78 <__assert_fail@plt+0x598c>
   16a94:	lsr	r3, r4, ip
   16a98:	orr	r3, r3, r5, lsl fp
   16a9c:	lsr	r2, r5, ip
   16aa0:	orr	r3, r3, r5, lsr sl
   16aa4:	adds	r0, r0, r4
   16aa8:	mov	r4, r3
   16aac:	lsl	r3, r2, ip
   16ab0:	orr	r3, r3, r4, lsl sl
   16ab4:	lsl	ip, r4, ip
   16ab8:	orr	r3, r3, r4, lsr fp
   16abc:	adc	r1, r1, r5
   16ac0:	subs	r0, r0, ip
   16ac4:	mov	r5, r2
   16ac8:	sbc	r1, r1, r3
   16acc:	cmp	lr, #0
   16ad0:	strdne	r4, [lr]
   16ad4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   16ad8:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   16adc:	mov	r7, r0
   16ae0:	ldr	r6, [pc, #72]	; 16b30 <__assert_fail@plt+0x5a44>
   16ae4:	ldr	r5, [pc, #72]	; 16b34 <__assert_fail@plt+0x5a48>
   16ae8:	add	r6, pc, r6
   16aec:	add	r5, pc, r5
   16af0:	sub	r6, r6, r5
   16af4:	mov	r8, r1
   16af8:	mov	r9, r2
   16afc:	bl	10e44 <calloc@plt-0x20>
   16b00:	asrs	r6, r6, #2
   16b04:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   16b08:	mov	r4, #0
   16b0c:	add	r4, r4, #1
   16b10:	ldr	r3, [r5], #4
   16b14:	mov	r2, r9
   16b18:	mov	r1, r8
   16b1c:	mov	r0, r7
   16b20:	blx	r3
   16b24:	cmp	r6, r4
   16b28:	bne	16b0c <__assert_fail@plt+0x5a20>
   16b2c:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   16b30:	andeq	r1, r1, ip, lsl r4
   16b34:	andeq	r1, r1, r4, lsl r4
   16b38:	bx	lr
   16b3c:	ldr	r3, [pc, #12]	; 16b50 <__assert_fail@plt+0x5a64>
   16b40:	mov	r1, #0
   16b44:	add	r3, pc, r3
   16b48:	ldr	r2, [r3]
   16b4c:	b	11020 <__cxa_atexit@plt>
   16b50:	andeq	r1, r1, r8, lsr #11
   16b54:	mov	r2, r1
   16b58:	mov	r1, r0
   16b5c:	mov	r0, #3
   16b60:	b	10f24 <__fxstat64@plt>

Disassembly of section .fini:

00016b64 <.fini>:
   16b64:	push	{r3, lr}
   16b68:	pop	{r3, pc}
