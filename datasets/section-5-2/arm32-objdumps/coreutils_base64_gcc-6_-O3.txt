
../repos/coreutils/src/base64:     file format elf32-littlearm


Disassembly of section .init:

00010ca0 <.init>:
   10ca0:	push	{r3, lr}
   10ca4:	bl	11634 <__assert_fail@plt+0x704>
   10ca8:	pop	{r3, pc}

Disassembly of section .plt:

00010cac <calloc@plt-0x14>:
   10cac:	push	{lr}		; (str lr, [sp, #-4]!)
   10cb0:	ldr	lr, [pc, #4]	; 10cbc <calloc@plt-0x4>
   10cb4:	add	lr, pc, lr
   10cb8:	ldr	pc, [lr, #8]!
   10cbc:	andeq	r9, r1, r4, asr #6

00010cc0 <calloc@plt>:
   10cc0:	add	ip, pc, #0, 12
   10cc4:	add	ip, ip, #102400	; 0x19000
   10cc8:	ldr	pc, [ip, #836]!	; 0x344

00010ccc <fputs_unlocked@plt>:
   10ccc:	add	ip, pc, #0, 12
   10cd0:	add	ip, ip, #102400	; 0x19000
   10cd4:	ldr	pc, [ip, #828]!	; 0x33c

00010cd8 <raise@plt>:
   10cd8:	add	ip, pc, #0, 12
   10cdc:	add	ip, ip, #102400	; 0x19000
   10ce0:	ldr	pc, [ip, #820]!	; 0x334

00010ce4 <strcmp@plt>:
   10ce4:	add	ip, pc, #0, 12
   10ce8:	add	ip, ip, #102400	; 0x19000
   10cec:	ldr	pc, [ip, #812]!	; 0x32c

00010cf0 <posix_fadvise64@plt>:
   10cf0:	add	ip, pc, #0, 12
   10cf4:	add	ip, ip, #102400	; 0x19000
   10cf8:	ldr	pc, [ip, #804]!	; 0x324

00010cfc <fflush@plt>:
   10cfc:	add	ip, pc, #0, 12
   10d00:	add	ip, ip, #102400	; 0x19000
   10d04:	ldr	pc, [ip, #796]!	; 0x31c

00010d08 <memmove@plt>:
   10d08:	add	ip, pc, #0, 12
   10d0c:	add	ip, ip, #102400	; 0x19000
   10d10:	ldr	pc, [ip, #788]!	; 0x314

00010d14 <free@plt>:
   10d14:	add	ip, pc, #0, 12
   10d18:	add	ip, ip, #102400	; 0x19000
   10d1c:	ldr	pc, [ip, #780]!	; 0x30c

00010d20 <_exit@plt>:
   10d20:	add	ip, pc, #0, 12
   10d24:	add	ip, ip, #102400	; 0x19000
   10d28:	ldr	pc, [ip, #772]!	; 0x304

00010d2c <memcpy@plt>:
   10d2c:	add	ip, pc, #0, 12
   10d30:	add	ip, ip, #102400	; 0x19000
   10d34:	ldr	pc, [ip, #764]!	; 0x2fc

00010d38 <mbsinit@plt>:
   10d38:	add	ip, pc, #0, 12
   10d3c:	add	ip, ip, #102400	; 0x19000
   10d40:	ldr	pc, [ip, #756]!	; 0x2f4

00010d44 <fwrite_unlocked@plt>:
   10d44:	add	ip, pc, #0, 12
   10d48:	add	ip, ip, #102400	; 0x19000
   10d4c:	ldr	pc, [ip, #748]!	; 0x2ec

00010d50 <memcmp@plt>:
   10d50:	add	ip, pc, #0, 12
   10d54:	add	ip, ip, #102400	; 0x19000
   10d58:	ldr	pc, [ip, #740]!	; 0x2e4

00010d5c <fputc_unlocked@plt>:
   10d5c:	add	ip, pc, #0, 12
   10d60:	add	ip, ip, #102400	; 0x19000
   10d64:	ldr	pc, [ip, #732]!	; 0x2dc

00010d68 <dcgettext@plt>:
   10d68:	add	ip, pc, #0, 12
   10d6c:	add	ip, ip, #102400	; 0x19000
   10d70:	ldr	pc, [ip, #724]!	; 0x2d4

00010d74 <realloc@plt>:
   10d74:	add	ip, pc, #0, 12
   10d78:	add	ip, ip, #102400	; 0x19000
   10d7c:	ldr	pc, [ip, #716]!	; 0x2cc

00010d80 <textdomain@plt>:
   10d80:	add	ip, pc, #0, 12
   10d84:	add	ip, ip, #102400	; 0x19000
   10d88:	ldr	pc, [ip, #708]!	; 0x2c4

00010d8c <iswprint@plt>:
   10d8c:	add	ip, pc, #0, 12
   10d90:	add	ip, ip, #102400	; 0x19000
   10d94:	ldr	pc, [ip, #700]!	; 0x2bc

00010d98 <fwrite@plt>:
   10d98:	add	ip, pc, #0, 12
   10d9c:	add	ip, ip, #102400	; 0x19000
   10da0:	ldr	pc, [ip, #692]!	; 0x2b4

00010da4 <lseek64@plt>:
   10da4:	add	ip, pc, #0, 12
   10da8:	add	ip, ip, #102400	; 0x19000
   10dac:	ldr	pc, [ip, #684]!	; 0x2ac

00010db0 <__ctype_get_mb_cur_max@plt>:
   10db0:	add	ip, pc, #0, 12
   10db4:	add	ip, ip, #102400	; 0x19000
   10db8:	ldr	pc, [ip, #676]!	; 0x2a4

00010dbc <__fpending@plt>:
   10dbc:	add	ip, pc, #0, 12
   10dc0:	add	ip, ip, #102400	; 0x19000
   10dc4:	ldr	pc, [ip, #668]!	; 0x29c

00010dc8 <mbrtowc@plt>:
   10dc8:	add	ip, pc, #0, 12
   10dcc:	add	ip, ip, #102400	; 0x19000
   10dd0:	ldr	pc, [ip, #660]!	; 0x294

00010dd4 <error@plt>:
   10dd4:	add	ip, pc, #0, 12
   10dd8:	add	ip, ip, #102400	; 0x19000
   10ddc:	ldr	pc, [ip, #652]!	; 0x28c

00010de0 <malloc@plt>:
   10de0:	add	ip, pc, #0, 12
   10de4:	add	ip, ip, #102400	; 0x19000
   10de8:	ldr	pc, [ip, #644]!	; 0x284

00010dec <__libc_start_main@plt>:
   10dec:	add	ip, pc, #0, 12
   10df0:	add	ip, ip, #102400	; 0x19000
   10df4:	ldr	pc, [ip, #636]!	; 0x27c

00010df8 <__freading@plt>:
   10df8:	add	ip, pc, #0, 12
   10dfc:	add	ip, ip, #102400	; 0x19000
   10e00:	ldr	pc, [ip, #628]!	; 0x274

00010e04 <__gmon_start__@plt>:
   10e04:	add	ip, pc, #0, 12
   10e08:	add	ip, ip, #102400	; 0x19000
   10e0c:	ldr	pc, [ip, #620]!	; 0x26c

00010e10 <getopt_long@plt>:
   10e10:	add	ip, pc, #0, 12
   10e14:	add	ip, ip, #102400	; 0x19000
   10e18:	ldr	pc, [ip, #612]!	; 0x264

00010e1c <__ctype_b_loc@plt>:
   10e1c:	add	ip, pc, #0, 12
   10e20:	add	ip, ip, #102400	; 0x19000
   10e24:	ldr	pc, [ip, #604]!	; 0x25c

00010e28 <exit@plt>:
   10e28:	add	ip, pc, #0, 12
   10e2c:	add	ip, ip, #102400	; 0x19000
   10e30:	ldr	pc, [ip, #596]!	; 0x254

00010e34 <strlen@plt>:
   10e34:	add	ip, pc, #0, 12
   10e38:	add	ip, ip, #102400	; 0x19000
   10e3c:	ldr	pc, [ip, #588]!	; 0x24c

00010e40 <strchr@plt>:
   10e40:	add	ip, pc, #0, 12
   10e44:	add	ip, ip, #102400	; 0x19000
   10e48:	ldr	pc, [ip, #580]!	; 0x244

00010e4c <__errno_location@plt>:
   10e4c:	add	ip, pc, #0, 12
   10e50:	add	ip, ip, #102400	; 0x19000
   10e54:	ldr	pc, [ip, #572]!	; 0x23c

00010e58 <__cxa_atexit@plt>:
   10e58:	add	ip, pc, #0, 12
   10e5c:	add	ip, ip, #102400	; 0x19000
   10e60:	ldr	pc, [ip, #564]!	; 0x234

00010e64 <memset@plt>:
   10e64:	add	ip, pc, #0, 12
   10e68:	add	ip, ip, #102400	; 0x19000
   10e6c:	ldr	pc, [ip, #556]!	; 0x22c

00010e70 <__printf_chk@plt>:
   10e70:	add	ip, pc, #0, 12
   10e74:	add	ip, ip, #102400	; 0x19000
   10e78:	ldr	pc, [ip, #548]!	; 0x224

00010e7c <fileno@plt>:
   10e7c:	add	ip, pc, #0, 12
   10e80:	add	ip, ip, #102400	; 0x19000
   10e84:	ldr	pc, [ip, #540]!	; 0x21c

00010e88 <__fprintf_chk@plt>:
   10e88:	add	ip, pc, #0, 12
   10e8c:	add	ip, ip, #102400	; 0x19000
   10e90:	ldr	pc, [ip, #532]!	; 0x214

00010e94 <memchr@plt>:
   10e94:	add	ip, pc, #0, 12
   10e98:	add	ip, ip, #102400	; 0x19000
   10e9c:	ldr	pc, [ip, #524]!	; 0x20c

00010ea0 <fclose@plt>:
   10ea0:	add	ip, pc, #0, 12
   10ea4:	add	ip, ip, #102400	; 0x19000
   10ea8:	ldr	pc, [ip, #516]!	; 0x204

00010eac <fseeko64@plt>:
   10eac:	add	ip, pc, #0, 12
   10eb0:	add	ip, ip, #102400	; 0x19000
   10eb4:	ldr	pc, [ip, #508]!	; 0x1fc

00010eb8 <__overflow@plt>:
   10eb8:	add	ip, pc, #0, 12
   10ebc:	add	ip, ip, #102400	; 0x19000
   10ec0:	ldr	pc, [ip, #500]!	; 0x1f4

00010ec4 <setlocale@plt>:
   10ec4:	add	ip, pc, #0, 12
   10ec8:	add	ip, ip, #102400	; 0x19000
   10ecc:	ldr	pc, [ip, #492]!	; 0x1ec

00010ed0 <strrchr@plt>:
   10ed0:	add	ip, pc, #0, 12
   10ed4:	add	ip, ip, #102400	; 0x19000
   10ed8:	ldr	pc, [ip, #484]!	; 0x1e4

00010edc <nl_langinfo@plt>:
   10edc:	add	ip, pc, #0, 12
   10ee0:	add	ip, ip, #102400	; 0x19000
   10ee4:	ldr	pc, [ip, #476]!	; 0x1dc

00010ee8 <__strtoll_internal@plt>:
   10ee8:	add	ip, pc, #0, 12
   10eec:	add	ip, ip, #102400	; 0x19000
   10ef0:	ldr	pc, [ip, #468]!	; 0x1d4

00010ef4 <fopen64@plt>:
   10ef4:	add	ip, pc, #0, 12
   10ef8:	add	ip, ip, #102400	; 0x19000
   10efc:	ldr	pc, [ip, #460]!	; 0x1cc

00010f00 <bindtextdomain@plt>:
   10f00:	add	ip, pc, #0, 12
   10f04:	add	ip, ip, #102400	; 0x19000
   10f08:	ldr	pc, [ip, #452]!	; 0x1c4

00010f0c <fread_unlocked@plt>:
   10f0c:	add	ip, pc, #0, 12
   10f10:	add	ip, ip, #102400	; 0x19000
   10f14:	ldr	pc, [ip, #444]!	; 0x1bc

00010f18 <strncmp@plt>:
   10f18:	add	ip, pc, #0, 12
   10f1c:	add	ip, ip, #102400	; 0x19000
   10f20:	ldr	pc, [ip, #436]!	; 0x1b4

00010f24 <abort@plt>:
   10f24:	add	ip, pc, #0, 12
   10f28:	add	ip, ip, #102400	; 0x19000
   10f2c:	ldr	pc, [ip, #428]!	; 0x1ac

00010f30 <__assert_fail@plt>:
   10f30:	add	ip, pc, #0, 12
   10f34:	add	ip, ip, #102400	; 0x19000
   10f38:	ldr	pc, [ip, #420]!	; 0x1a4

Disassembly of section .text:

00010f40 <.text>:
   10f40:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   10f44:	mov	r7, r0
   10f48:	sub	sp, sp, #52	; 0x34
   10f4c:	ldr	r0, [r1]
   10f50:	mov	r5, r1
   10f54:	bl	125a8 <__assert_fail@plt+0x1678>
   10f58:	ldr	r1, [pc, #1588]	; 11594 <__assert_fail@plt+0x664>
   10f5c:	mov	r0, #6
   10f60:	bl	10ec4 <setlocale@plt>
   10f64:	ldr	r1, [pc, #1580]	; 11598 <__assert_fail@plt+0x668>
   10f68:	ldr	r0, [pc, #1580]	; 1159c <__assert_fail@plt+0x66c>
   10f6c:	bl	10f00 <bindtextdomain@plt>
   10f70:	ldr	r0, [pc, #1572]	; 1159c <__assert_fail@plt+0x66c>
   10f74:	bl	10d80 <textdomain@plt>
   10f78:	ldr	r0, [pc, #1568]	; 115a0 <__assert_fail@plt+0x670>
   10f7c:	bl	18c1c <__assert_fail@plt+0x7cec>
   10f80:	mov	fp, #0
   10f84:	ldr	r9, [pc, #1560]	; 115a4 <__assert_fail@plt+0x674>
   10f88:	ldr	r8, [pc, #1560]	; 115a8 <__assert_fail@plt+0x678>
   10f8c:	mov	r6, fp
   10f90:	mov	sl, #76	; 0x4c
   10f94:	mov	r4, #0
   10f98:	str	r4, [sp]
   10f9c:	mov	r3, r9
   10fa0:	mov	r2, r8
   10fa4:	mov	r1, r5
   10fa8:	mov	r0, r7
   10fac:	bl	10e10 <getopt_long@plt>
   10fb0:	cmn	r0, #1
   10fb4:	beq	11088 <__assert_fail@plt+0x158>
   10fb8:	cmp	r0, #100	; 0x64
   10fbc:	beq	110dc <__assert_fail@plt+0x1ac>
   10fc0:	bgt	10fdc <__assert_fail@plt+0xac>
   10fc4:	cmn	r0, #3
   10fc8:	beq	11050 <__assert_fail@plt+0x120>
   10fcc:	cmn	r0, #2
   10fd0:	bne	110d4 <__assert_fail@plt+0x1a4>
   10fd4:	mov	r0, r4
   10fd8:	bl	117ac <__assert_fail@plt+0x87c>
   10fdc:	cmp	r0, #105	; 0x69
   10fe0:	beq	11080 <__assert_fail@plt+0x150>
   10fe4:	cmp	r0, #119	; 0x77
   10fe8:	bne	110d4 <__assert_fail@plt+0x1a4>
   10fec:	ldr	r0, [pc, #1464]	; 115ac <__assert_fail@plt+0x67c>
   10ff0:	ldr	r3, [pc, #1436]	; 11594 <__assert_fail@plt+0x664>
   10ff4:	mov	r1, r4
   10ff8:	str	r3, [sp]
   10ffc:	mov	r2, #10
   11000:	add	r3, sp, #40	; 0x28
   11004:	ldr	r0, [r0]
   11008:	bl	176b8 <__assert_fail@plt+0x6788>
   1100c:	cmp	r0, #1
   11010:	bhi	112c8 <__assert_fail@plt+0x398>
   11014:	ldrd	r2, [sp, #40]	; 0x28
   11018:	cmp	r2, #0
   1101c:	sbcs	r1, r3, #0
   11020:	blt	112c8 <__assert_fail@plt+0x398>
   11024:	eor	ip, r0, #1
   11028:	mvn	r0, #-2147483648	; 0x80000000
   1102c:	cmp	r0, r2
   11030:	mov	r1, #0
   11034:	sbcs	r1, r1, r3
   11038:	movlt	r0, #0
   1103c:	andge	r0, ip, #1
   11040:	cmp	r0, #0
   11044:	moveq	r2, #0
   11048:	mov	sl, r2
   1104c:	b	10f94 <__assert_fail@plt+0x64>
   11050:	ldr	r1, [pc, #1368]	; 115b0 <__assert_fail@plt+0x680>
   11054:	ldr	r3, [pc, #1368]	; 115b4 <__assert_fail@plt+0x684>
   11058:	ldr	r2, [pc, #1368]	; 115b8 <__assert_fail@plt+0x688>
   1105c:	str	r4, [sp, #4]
   11060:	ldr	r0, [r1]
   11064:	ldr	r3, [r3]
   11068:	ldr	r1, [pc, #1356]	; 115bc <__assert_fail@plt+0x68c>
   1106c:	str	r2, [sp]
   11070:	ldr	r2, [pc, #1352]	; 115c0 <__assert_fail@plt+0x690>
   11074:	bl	16e48 <__assert_fail@plt+0x5f18>
   11078:	mov	r0, r4
   1107c:	bl	10e28 <exit@plt>
   11080:	mov	fp, #1
   11084:	b	10f94 <__assert_fail@plt+0x64>
   11088:	ldr	r8, [pc, #1332]	; 115c4 <__assert_fail@plt+0x694>
   1108c:	ldr	r3, [r8]
   11090:	sub	r2, r7, r3
   11094:	cmp	r2, #1
   11098:	ble	110e4 <__assert_fail@plt+0x1b4>
   1109c:	mov	r2, #5
   110a0:	ldr	r1, [pc, #1312]	; 115c8 <__assert_fail@plt+0x698>
   110a4:	mov	r0, r4
   110a8:	bl	10d68 <dcgettext@plt>
   110ac:	ldr	r3, [r8]
   110b0:	add	r3, r3, #1
   110b4:	mov	r6, r0
   110b8:	ldr	r0, [r5, r3, lsl #2]
   110bc:	bl	16474 <__assert_fail@plt+0x5544>
   110c0:	mov	r2, r6
   110c4:	mov	r1, r4
   110c8:	mov	r3, r0
   110cc:	mov	r0, r4
   110d0:	bl	10dd4 <error@plt>
   110d4:	mov	r0, #1
   110d8:	bl	117ac <__assert_fail@plt+0x87c>
   110dc:	mov	r6, #1
   110e0:	b	10f94 <__assert_fail@plt+0x64>
   110e4:	cmp	r7, r3
   110e8:	ble	112b4 <__assert_fail@plt+0x384>
   110ec:	ldr	r3, [r5, r3, lsl #2]
   110f0:	ldr	r1, [pc, #1236]	; 115cc <__assert_fail@plt+0x69c>
   110f4:	mov	r0, r3
   110f8:	str	r3, [sp, #28]
   110fc:	bl	10ce4 <strcmp@plt>
   11100:	cmp	r0, #0
   11104:	beq	112bc <__assert_fail@plt+0x38c>
   11108:	ldr	r1, [pc, #1216]	; 115d0 <__assert_fail@plt+0x6a0>
   1110c:	ldr	r0, [sp, #28]
   11110:	bl	10ef4 <fopen64@plt>
   11114:	subs	r8, r0, #0
   11118:	beq	11540 <__assert_fail@plt+0x610>
   1111c:	mov	r1, #2
   11120:	mov	r0, r8
   11124:	bl	1237c <__assert_fail@plt+0x144c>
   11128:	cmp	r6, #0
   1112c:	beq	11300 <__assert_fail@plt+0x3d0>
   11130:	ldr	r3, [pc, #1144]	; 115b0 <__assert_fail@plt+0x680>
   11134:	mov	r0, #4096	; 0x1000
   11138:	ldr	r3, [r3]
   1113c:	str	r3, [sp, #16]
   11140:	bl	17030 <__assert_fail@plt+0x6100>
   11144:	mov	r5, r0
   11148:	mov	r0, #3072	; 0xc00
   1114c:	bl	17030 <__assert_fail@plt+0x6100>
   11150:	str	r0, [sp, #20]
   11154:	add	r0, sp, #40	; 0x28
   11158:	bl	11d78 <__assert_fail@plt+0xe48>
   1115c:	str	fp, [sp, #12]
   11160:	ldr	fp, [sp, #12]
   11164:	mov	r4, #0
   11168:	mov	r3, r8
   1116c:	rsb	r2, r4, #4096	; 0x1000
   11170:	mov	r1, #1
   11174:	add	r0, r5, r4
   11178:	bl	10f0c <fread_unlocked@plt>
   1117c:	cmp	fp, #0
   11180:	mov	r9, r0
   11184:	beq	111d8 <__assert_fail@plt+0x2a8>
   11188:	cmp	r0, #0
   1118c:	ble	111d8 <__assert_fail@plt+0x2a8>
   11190:	mov	r7, #0
   11194:	mov	sl, r5
   11198:	ldrb	r6, [sl, r4]
   1119c:	mov	r0, r6
   111a0:	bl	11d5c <__assert_fail@plt+0xe2c>
   111a4:	cmp	r6, #61	; 0x3d
   111a8:	orreq	r0, r0, #1
   111ac:	tst	r0, #255	; 0xff
   111b0:	bne	112a0 <__assert_fail@plt+0x370>
   111b4:	add	r0, r7, r4
   111b8:	sub	r9, r9, #1
   111bc:	add	r1, r0, #1
   111c0:	add	r1, r5, r1
   111c4:	add	r0, r5, r0
   111c8:	sub	r2, r9, r7
   111cc:	bl	10d08 <memmove@plt>
   111d0:	cmp	r7, r9
   111d4:	blt	11198 <__assert_fail@plt+0x268>
   111d8:	ldr	r3, [r8]
   111dc:	add	r4, r4, r9
   111e0:	ands	sl, r3, #32
   111e4:	bne	114f8 <__assert_fail@plt+0x5c8>
   111e8:	ldr	r2, [pc, #996]	; 115d4 <__assert_fail@plt+0x6a4>
   111ec:	cmp	r4, r2
   111f0:	bgt	111fc <__assert_fail@plt+0x2cc>
   111f4:	tst	r3, #16
   111f8:	beq	11168 <__assert_fail@plt+0x238>
   111fc:	mov	r6, sl
   11200:	ldr	fp, [sp, #16]
   11204:	ldr	r7, [sp, #20]
   11208:	b	1126c <__assert_fail@plt+0x33c>
   1120c:	cmp	r6, #0
   11210:	bne	11160 <__assert_fail@plt+0x230>
   11214:	mov	r2, r4
   11218:	mov	r3, #3072	; 0xc00
   1121c:	str	r3, [sp, #36]	; 0x24
   11220:	add	r3, sp, #36	; 0x24
   11224:	str	r3, [sp]
   11228:	mov	r1, r5
   1122c:	mov	r3, r7
   11230:	add	r0, sp, #40	; 0x28
   11234:	bl	11d84 <__assert_fail@plt+0xe54>
   11238:	mov	r3, fp
   1123c:	ldr	r2, [sp, #36]	; 0x24
   11240:	mov	r1, #1
   11244:	mov	r9, r0
   11248:	mov	r0, r7
   1124c:	bl	10d44 <fwrite_unlocked@plt>
   11250:	ldr	r3, [sp, #36]	; 0x24
   11254:	cmp	r0, r3
   11258:	bcc	114d0 <__assert_fail@plt+0x5a0>
   1125c:	cmp	r9, #0
   11260:	beq	11508 <__assert_fail@plt+0x5d8>
   11264:	ldr	r3, [r8]
   11268:	add	r6, r6, #1
   1126c:	tst	r3, #16
   11270:	beq	1120c <__assert_fail@plt+0x2dc>
   11274:	cmp	r6, #2
   11278:	beq	113a8 <__assert_fail@plt+0x478>
   1127c:	cmp	r6, #1
   11280:	bne	11214 <__assert_fail@plt+0x2e4>
   11284:	ldr	r3, [sp, #40]	; 0x28
   11288:	cmp	r3, #0
   1128c:	beq	113a8 <__assert_fail@plt+0x478>
   11290:	mov	r3, #3072	; 0xc00
   11294:	str	r3, [sp, #36]	; 0x24
   11298:	mov	r2, sl
   1129c:	b	11220 <__assert_fail@plt+0x2f0>
   112a0:	add	r7, r7, #1
   112a4:	cmp	r7, r9
   112a8:	bge	111d8 <__assert_fail@plt+0x2a8>
   112ac:	add	sl, r5, r7
   112b0:	b	11198 <__assert_fail@plt+0x268>
   112b4:	ldr	r3, [pc, #784]	; 115cc <__assert_fail@plt+0x69c>
   112b8:	str	r3, [sp, #28]
   112bc:	ldr	r3, [pc, #788]	; 115d8 <__assert_fail@plt+0x6a8>
   112c0:	ldr	r8, [r3]
   112c4:	b	1111c <__assert_fail@plt+0x1ec>
   112c8:	mov	r2, #5
   112cc:	ldr	r1, [pc, #776]	; 115dc <__assert_fail@plt+0x6ac>
   112d0:	mov	r0, #0
   112d4:	bl	10d68 <dcgettext@plt>
   112d8:	ldr	r3, [pc, #716]	; 115ac <__assert_fail@plt+0x67c>
   112dc:	mov	r4, r0
   112e0:	ldr	r0, [r3]
   112e4:	bl	16474 <__assert_fail@plt+0x5544>
   112e8:	mov	r3, r4
   112ec:	ldr	r2, [pc, #748]	; 115e0 <__assert_fail@plt+0x6b0>
   112f0:	mov	r1, #0
   112f4:	str	r0, [sp]
   112f8:	mov	r0, #1
   112fc:	bl	10dd4 <error@plt>
   11300:	ldr	r3, [pc, #680]	; 115b0 <__assert_fail@plt+0x680>
   11304:	mov	r0, #30720	; 0x7800
   11308:	ldr	fp, [r3]
   1130c:	bl	17030 <__assert_fail@plt+0x6100>
   11310:	mov	r4, r0
   11314:	mov	r0, #40960	; 0xa000
   11318:	bl	17030 <__assert_fail@plt+0x6100>
   1131c:	str	sl, [sp, #16]
   11320:	mov	sl, r4
   11324:	str	r0, [sp, #12]
   11328:	mov	r5, #0
   1132c:	mov	r4, #1
   11330:	b	11340 <__assert_fail@plt+0x410>
   11334:	ldr	r3, [pc, #680]	; 115e4 <__assert_fail@plt+0x6b4>
   11338:	cmp	r5, r3
   1133c:	bgt	113b4 <__assert_fail@plt+0x484>
   11340:	mov	r3, r8
   11344:	rsb	r2, r5, #30720	; 0x7800
   11348:	add	r0, sl, r5
   1134c:	mov	r1, r4
   11350:	bl	10f0c <fread_unlocked@plt>
   11354:	ldr	r3, [r8]
   11358:	tst	r3, #48	; 0x30
   1135c:	add	r5, r5, r0
   11360:	beq	11334 <__assert_fail@plt+0x404>
   11364:	cmp	r5, #0
   11368:	bgt	113b4 <__assert_fail@plt+0x484>
   1136c:	ldr	sl, [sp, #16]
   11370:	cmp	sl, #0
   11374:	cmpne	r6, #0
   11378:	ble	113a0 <__assert_fail@plt+0x470>
   1137c:	ldr	r3, [fp, #20]
   11380:	ldr	r2, [fp, #24]
   11384:	cmp	r3, r2
   11388:	addcc	r1, r3, #1
   1138c:	movcc	r2, #10
   11390:	strcc	r1, [fp, #20]
   11394:	strbcc	r2, [r3]
   11398:	bcs	11528 <__assert_fail@plt+0x5f8>
   1139c:	ldr	r3, [r8]
   113a0:	tst	r3, #32
   113a4:	bne	114f8 <__assert_fail@plt+0x5c8>
   113a8:	ldr	r1, [sp, #28]
   113ac:	mov	r0, r8
   113b0:	bl	11720 <__assert_fail@plt+0x7f0>
   113b4:	mov	r1, #3
   113b8:	add	r0, r5, #2
   113bc:	bl	1876c <__assert_fail@plt+0x783c>
   113c0:	ldr	r2, [sp, #12]
   113c4:	mov	r1, r5
   113c8:	lsl	r9, r0, #2
   113cc:	mov	r3, r9
   113d0:	mov	r0, sl
   113d4:	bl	11af8 <__assert_fail@plt+0xbc8>
   113d8:	ldr	r3, [sp, #16]
   113dc:	cmp	r3, #0
   113e0:	beq	114b0 <__assert_fail@plt+0x580>
   113e4:	cmp	r9, #0
   113e8:	ble	1147c <__assert_fail@plt+0x54c>
   113ec:	str	r8, [sp, #20]
   113f0:	str	sl, [sp, #24]
   113f4:	mov	r7, #0
   113f8:	ldr	r8, [sp, #16]
   113fc:	ldr	sl, [sp, #12]
   11400:	b	11430 <__assert_fail@plt+0x500>
   11404:	ldr	r3, [fp, #20]
   11408:	ldr	r2, [fp, #24]
   1140c:	cmp	r3, r2
   11410:	bcs	11494 <__assert_fail@plt+0x564>
   11414:	add	r2, r3, #1
   11418:	mov	r6, r4
   1141c:	str	r2, [fp, #20]
   11420:	mov	r2, #10
   11424:	strb	r2, [r3]
   11428:	cmp	r7, r9
   1142c:	bge	11474 <__assert_fail@plt+0x544>
   11430:	sub	r4, r9, r7
   11434:	sub	r3, r8, r6
   11438:	cmp	r4, r3
   1143c:	movge	r4, r3
   11440:	cmp	r4, #0
   11444:	beq	11404 <__assert_fail@plt+0x4d4>
   11448:	ldr	r3, [pc, #352]	; 115b0 <__assert_fail@plt+0x680>
   1144c:	mov	r2, r4
   11450:	mov	r1, #1
   11454:	ldr	r3, [r3]
   11458:	add	r0, sl, r7
   1145c:	bl	10d44 <fwrite_unlocked@plt>
   11460:	cmp	r4, r0
   11464:	bhi	114d0 <__assert_fail@plt+0x5a0>
   11468:	add	r6, r6, r4
   1146c:	add	r7, r7, r4
   11470:	b	11428 <__assert_fail@plt+0x4f8>
   11474:	ldr	r8, [sp, #20]
   11478:	ldr	sl, [sp, #24]
   1147c:	ldr	r3, [r8]
   11480:	and	r2, r3, #48	; 0x30
   11484:	cmp	r5, #30720	; 0x7800
   11488:	cmpeq	r2, #0
   1148c:	beq	11328 <__assert_fail@plt+0x3f8>
   11490:	b	1136c <__assert_fail@plt+0x43c>
   11494:	mov	r1, #10
   11498:	mov	r0, fp
   1149c:	bl	10eb8 <__overflow@plt>
   114a0:	cmn	r0, #1
   114a4:	beq	1156c <__assert_fail@plt+0x63c>
   114a8:	mov	r6, r4
   114ac:	b	11428 <__assert_fail@plt+0x4f8>
   114b0:	ldr	r3, [pc, #248]	; 115b0 <__assert_fail@plt+0x680>
   114b4:	mov	r2, r9
   114b8:	mov	r1, #1
   114bc:	ldr	r3, [r3]
   114c0:	ldr	r0, [sp, #12]
   114c4:	bl	10d44 <fwrite_unlocked@plt>
   114c8:	cmp	r9, r0
   114cc:	bls	1147c <__assert_fail@plt+0x54c>
   114d0:	bl	10e4c <__errno_location@plt>
   114d4:	ldr	r1, [pc, #268]	; 115e8 <__assert_fail@plt+0x6b8>
   114d8:	mov	r2, #5
   114dc:	ldr	r4, [r0]
   114e0:	mov	r0, #0
   114e4:	bl	10d68 <dcgettext@plt>
   114e8:	mov	r1, r4
   114ec:	mov	r2, r0
   114f0:	mov	r0, #1
   114f4:	bl	10dd4 <error@plt>
   114f8:	bl	10e4c <__errno_location@plt>
   114fc:	mov	r2, #5
   11500:	ldr	r1, [pc, #228]	; 115ec <__assert_fail@plt+0x6bc>
   11504:	b	114dc <__assert_fail@plt+0x5ac>
   11508:	mov	r2, #5
   1150c:	ldr	r1, [pc, #220]	; 115f0 <__assert_fail@plt+0x6c0>
   11510:	mov	r0, r9
   11514:	bl	10d68 <dcgettext@plt>
   11518:	mov	r1, r9
   1151c:	mov	r2, r0
   11520:	mov	r0, #1
   11524:	bl	10dd4 <error@plt>
   11528:	mov	r0, fp
   1152c:	mov	r1, #10
   11530:	bl	10eb8 <__overflow@plt>
   11534:	cmn	r0, #1
   11538:	beq	114d0 <__assert_fail@plt+0x5a0>
   1153c:	b	1139c <__assert_fail@plt+0x46c>
   11540:	bl	10e4c <__errno_location@plt>
   11544:	ldr	r2, [sp, #28]
   11548:	mov	r1, #3
   1154c:	ldr	r4, [r0]
   11550:	mov	r0, r8
   11554:	bl	15580 <__assert_fail@plt+0x4650>
   11558:	mov	r1, r4
   1155c:	ldr	r2, [pc, #144]	; 115f4 <__assert_fail@plt+0x6c4>
   11560:	mov	r3, r0
   11564:	mov	r0, #1
   11568:	bl	10dd4 <error@plt>
   1156c:	bl	10e4c <__errno_location@plt>
   11570:	mov	r2, #5
   11574:	ldr	r1, [pc, #108]	; 115e8 <__assert_fail@plt+0x6b8>
   11578:	ldr	r5, [r0]
   1157c:	mov	r0, r4
   11580:	bl	10d68 <dcgettext@plt>
   11584:	mov	r1, r5
   11588:	mov	r2, r0
   1158c:	mov	r0, #1
   11590:	bl	10dd4 <error@plt>
   11594:	andeq	r8, r1, r0, lsr pc
   11598:	andeq	r9, r1, r4, ror #2
   1159c:	strheq	r9, [r1], -ip
   115a0:	andeq	r2, r1, ip, lsl #5
   115a4:	andeq	r8, r1, r8, ror ip
   115a8:	andeq	r9, r1, r8, lsr #3
   115ac:	andeq	sl, r2, r8, asr r1
   115b0:	andeq	sl, r2, r4, asr r1
   115b4:	andeq	sl, r2, ip, ror #1
   115b8:	muleq	r1, r8, r1
   115bc:	strdeq	r8, [r1], -r4
   115c0:	strheq	r9, [r1], -r8
   115c4:	andeq	sl, r2, r0, asr #2
   115c8:			; <UNDEFINED> instruction: 0x000191b0
   115cc:	ldrdeq	r8, [r1], -r8	; <UNPREDICTABLE>
   115d0:	andeq	r9, r1, r4, asr #3
   115d4:	strdeq	r0, [r0], -pc	; <UNPREDICTABLE>
   115d8:	andeq	sl, r2, r0, asr r1
   115dc:	andeq	r9, r1, ip, ror r1
   115e0:	muleq	r1, r0, r1
   115e4:	strdeq	r7, [r0], -pc	; <UNPREDICTABLE>
   115e8:	ldrdeq	r9, [r1], -r4
   115ec:	andeq	r9, r1, r8, asr #3
   115f0:	andeq	r9, r1, r0, ror #3
   115f4:	muleq	r1, r4, r1
   115f8:	mov	fp, #0
   115fc:	mov	lr, #0
   11600:	pop	{r1}		; (ldr r1, [sp], #4)
   11604:	mov	r2, sp
   11608:	push	{r2}		; (str r2, [sp, #-4]!)
   1160c:	push	{r0}		; (str r0, [sp, #-4]!)
   11610:	ldr	ip, [pc, #16]	; 11628 <__assert_fail@plt+0x6f8>
   11614:	push	{ip}		; (str ip, [sp, #-4]!)
   11618:	ldr	r0, [pc, #12]	; 1162c <__assert_fail@plt+0x6fc>
   1161c:	ldr	r3, [pc, #12]	; 11630 <__assert_fail@plt+0x700>
   11620:	bl	10dec <__libc_start_main@plt>
   11624:	bl	10f24 <abort@plt>
   11628:	andeq	r8, r1, r8, lsl ip
   1162c:	andeq	r0, r1, r0, asr #30
   11630:			; <UNDEFINED> instruction: 0x00018bb8
   11634:	ldr	r3, [pc, #20]	; 11650 <__assert_fail@plt+0x720>
   11638:	ldr	r2, [pc, #20]	; 11654 <__assert_fail@plt+0x724>
   1163c:	add	r3, pc, r3
   11640:	ldr	r2, [r3, r2]
   11644:	cmp	r2, #0
   11648:	bxeq	lr
   1164c:	b	10e04 <__gmon_start__@plt>
   11650:			; <UNDEFINED> instruction: 0x000189bc
   11654:	andeq	r0, r0, r0, ror #1
   11658:	ldr	r3, [pc, #28]	; 1167c <__assert_fail@plt+0x74c>
   1165c:	ldr	r0, [pc, #28]	; 11680 <__assert_fail@plt+0x750>
   11660:	sub	r3, r3, r0
   11664:	cmp	r3, #6
   11668:	bxls	lr
   1166c:	ldr	r3, [pc, #16]	; 11684 <__assert_fail@plt+0x754>
   11670:	cmp	r3, #0
   11674:	bxeq	lr
   11678:	bx	r3
   1167c:	andeq	sl, r2, r7, lsr r1
   11680:	andeq	sl, r2, r4, lsr r1
   11684:	andeq	r0, r0, r0
   11688:	ldr	r1, [pc, #36]	; 116b4 <__assert_fail@plt+0x784>
   1168c:	ldr	r0, [pc, #36]	; 116b8 <__assert_fail@plt+0x788>
   11690:	sub	r1, r1, r0
   11694:	asr	r1, r1, #2
   11698:	add	r1, r1, r1, lsr #31
   1169c:	asrs	r1, r1, #1
   116a0:	bxeq	lr
   116a4:	ldr	r3, [pc, #16]	; 116bc <__assert_fail@plt+0x78c>
   116a8:	cmp	r3, #0
   116ac:	bxeq	lr
   116b0:	bx	r3
   116b4:	andeq	sl, r2, r4, lsr r1
   116b8:	andeq	sl, r2, r4, lsr r1
   116bc:	andeq	r0, r0, r0
   116c0:	push	{r4, lr}
   116c4:	ldr	r4, [pc, #24]	; 116e4 <__assert_fail@plt+0x7b4>
   116c8:	ldrb	r3, [r4]
   116cc:	cmp	r3, #0
   116d0:	popne	{r4, pc}
   116d4:	bl	11658 <__assert_fail@plt+0x728>
   116d8:	mov	r3, #1
   116dc:	strb	r3, [r4]
   116e0:	pop	{r4, pc}
   116e4:	andeq	sl, r2, ip, asr r1
   116e8:	ldr	r0, [pc, #40]	; 11718 <__assert_fail@plt+0x7e8>
   116ec:	ldr	r3, [r0]
   116f0:	cmp	r3, #0
   116f4:	bne	116fc <__assert_fail@plt+0x7cc>
   116f8:	b	11688 <__assert_fail@plt+0x758>
   116fc:	ldr	r3, [pc, #24]	; 1171c <__assert_fail@plt+0x7ec>
   11700:	cmp	r3, #0
   11704:	beq	116f8 <__assert_fail@plt+0x7c8>
   11708:	push	{r4, lr}
   1170c:	blx	r3
   11710:	pop	{r4, lr}
   11714:	b	11688 <__assert_fail@plt+0x758>
   11718:	andeq	r9, r2, r4, lsl pc
   1171c:	andeq	r0, r0, r0
   11720:	push	{r4, lr}
   11724:	mov	r4, r1
   11728:	bl	123b0 <__assert_fail@plt+0x1480>
   1172c:	cmp	r0, #0
   11730:	beq	1179c <__assert_fail@plt+0x86c>
   11734:	ldr	r1, [pc, #100]	; 117a0 <__assert_fail@plt+0x870>
   11738:	mov	r0, r4
   1173c:	bl	10ce4 <strcmp@plt>
   11740:	subs	r5, r0, #0
   11744:	bne	11770 <__assert_fail@plt+0x840>
   11748:	bl	10e4c <__errno_location@plt>
   1174c:	mov	r2, #5
   11750:	ldr	r1, [pc, #76]	; 117a4 <__assert_fail@plt+0x874>
   11754:	ldr	r4, [r0]
   11758:	mov	r0, r5
   1175c:	bl	10d68 <dcgettext@plt>
   11760:	mov	r1, r4
   11764:	mov	r2, r0
   11768:	mov	r0, #1
   1176c:	bl	10dd4 <error@plt>
   11770:	bl	10e4c <__errno_location@plt>
   11774:	mov	r2, r4
   11778:	mov	r1, #3
   1177c:	ldr	r4, [r0]
   11780:	mov	r0, #0
   11784:	bl	15580 <__assert_fail@plt+0x4650>
   11788:	mov	r1, r4
   1178c:	ldr	r2, [pc, #20]	; 117a8 <__assert_fail@plt+0x878>
   11790:	mov	r3, r0
   11794:	mov	r0, #1
   11798:	bl	10dd4 <error@plt>
   1179c:	bl	10e28 <exit@plt>
   117a0:	ldrdeq	r8, [r1], -r8	; <UNPREDICTABLE>
   117a4:	ldrdeq	r8, [r1], -ip
   117a8:	muleq	r1, r4, r1
   117ac:	subs	r6, r0, #0
   117b0:	push	{r7, lr}
   117b4:	sub	sp, sp, #56	; 0x38
   117b8:	beq	117f4 <__assert_fail@plt+0x8c4>
   117bc:	ldr	r3, [pc, #728]	; 11a9c <__assert_fail@plt+0xb6c>
   117c0:	mov	r2, #5
   117c4:	ldr	r1, [pc, #724]	; 11aa0 <__assert_fail@plt+0xb70>
   117c8:	mov	r0, #0
   117cc:	ldr	r4, [r3]
   117d0:	bl	10d68 <dcgettext@plt>
   117d4:	ldr	r3, [pc, #712]	; 11aa4 <__assert_fail@plt+0xb74>
   117d8:	mov	r1, #1
   117dc:	ldr	r3, [r3]
   117e0:	mov	r2, r0
   117e4:	mov	r0, r4
   117e8:	bl	10e88 <__fprintf_chk@plt>
   117ec:	mov	r0, r6
   117f0:	bl	10e28 <exit@plt>
   117f4:	mov	r2, #5
   117f8:	ldr	r1, [pc, #680]	; 11aa8 <__assert_fail@plt+0xb78>
   117fc:	bl	10d68 <dcgettext@plt>
   11800:	ldr	r3, [pc, #668]	; 11aa4 <__assert_fail@plt+0xb74>
   11804:	ldr	r7, [pc, #672]	; 11aac <__assert_fail@plt+0xb7c>
   11808:	ldr	r4, [pc, #672]	; 11ab0 <__assert_fail@plt+0xb80>
   1180c:	ldr	r2, [r3]
   11810:	mov	r1, r0
   11814:	mov	r0, #1
   11818:	bl	10e70 <__printf_chk@plt>
   1181c:	mov	r2, #5
   11820:	ldr	r1, [pc, #652]	; 11ab4 <__assert_fail@plt+0xb84>
   11824:	mov	r0, r6
   11828:	bl	10d68 <dcgettext@plt>
   1182c:	mov	r2, #64	; 0x40
   11830:	mov	r1, r0
   11834:	mov	r0, #1
   11838:	bl	10e70 <__printf_chk@plt>
   1183c:	mov	r2, #5
   11840:	ldr	r1, [pc, #624]	; 11ab8 <__assert_fail@plt+0xb88>
   11844:	mov	r0, r6
   11848:	bl	10d68 <dcgettext@plt>
   1184c:	ldr	r1, [r7]
   11850:	bl	10ccc <fputs_unlocked@plt>
   11854:	mov	r2, #5
   11858:	ldr	r1, [pc, #604]	; 11abc <__assert_fail@plt+0xb8c>
   1185c:	mov	r0, r6
   11860:	bl	10d68 <dcgettext@plt>
   11864:	ldr	r1, [r7]
   11868:	bl	10ccc <fputs_unlocked@plt>
   1186c:	mov	r2, #5
   11870:	ldr	r1, [pc, #584]	; 11ac0 <__assert_fail@plt+0xb90>
   11874:	mov	r0, r6
   11878:	bl	10d68 <dcgettext@plt>
   1187c:	ldr	r1, [r7]
   11880:	bl	10ccc <fputs_unlocked@plt>
   11884:	mov	r2, #5
   11888:	ldr	r1, [pc, #564]	; 11ac4 <__assert_fail@plt+0xb94>
   1188c:	mov	r0, r6
   11890:	bl	10d68 <dcgettext@plt>
   11894:	ldr	r1, [r7]
   11898:	bl	10ccc <fputs_unlocked@plt>
   1189c:	mov	r2, #5
   118a0:	ldr	r1, [pc, #544]	; 11ac8 <__assert_fail@plt+0xb98>
   118a4:	mov	r0, r6
   118a8:	bl	10d68 <dcgettext@plt>
   118ac:	ldr	r1, [r7]
   118b0:	bl	10ccc <fputs_unlocked@plt>
   118b4:	mov	r2, #5
   118b8:	ldr	r1, [pc, #524]	; 11acc <__assert_fail@plt+0xb9c>
   118bc:	mov	r0, r6
   118c0:	bl	10d68 <dcgettext@plt>
   118c4:	ldr	r3, [pc, #516]	; 11ad0 <__assert_fail@plt+0xba0>
   118c8:	mov	r2, r3
   118cc:	mov	r1, r0
   118d0:	mov	r0, #1
   118d4:	bl	10e70 <__printf_chk@plt>
   118d8:	ldm	r4!, {r0, r1, r2, r3}
   118dc:	mov	lr, sp
   118e0:	stmia	lr!, {r0, r1, r2, r3}
   118e4:	ldm	r4!, {r0, r1, r2, r3}
   118e8:	ldr	ip, [sp]
   118ec:	stmia	lr!, {r0, r1, r2, r3}
   118f0:	cmp	ip, #0
   118f4:	ldm	r4!, {r0, r1, r2, r3}
   118f8:	stmia	lr!, {r0, r1, r2, r3}
   118fc:	ldm	r4, {r0, r1}
   11900:	moveq	r4, sp
   11904:	stm	lr, {r0, r1}
   11908:	beq	11938 <__assert_fail@plt+0xa08>
   1190c:	ldr	r5, [pc, #444]	; 11ad0 <__assert_fail@plt+0xba0>
   11910:	mov	r4, sp
   11914:	b	11924 <__assert_fail@plt+0x9f4>
   11918:	ldr	ip, [r4, #8]!
   1191c:	cmp	ip, #0
   11920:	beq	11938 <__assert_fail@plt+0xa08>
   11924:	mov	r1, ip
   11928:	mov	r0, r5
   1192c:	bl	10ce4 <strcmp@plt>
   11930:	cmp	r0, #0
   11934:	bne	11918 <__assert_fail@plt+0x9e8>
   11938:	ldr	r4, [r4, #4]
   1193c:	mov	r2, #5
   11940:	cmp	r4, #0
   11944:	ldr	r1, [pc, #392]	; 11ad4 <__assert_fail@plt+0xba4>
   11948:	beq	119f0 <__assert_fail@plt+0xac0>
   1194c:	mov	r0, #0
   11950:	bl	10d68 <dcgettext@plt>
   11954:	ldr	r3, [pc, #380]	; 11ad8 <__assert_fail@plt+0xba8>
   11958:	ldr	r2, [pc, #380]	; 11adc <__assert_fail@plt+0xbac>
   1195c:	mov	r1, r0
   11960:	mov	r0, #1
   11964:	bl	10e70 <__printf_chk@plt>
   11968:	mov	r1, #0
   1196c:	mov	r0, #5
   11970:	bl	10ec4 <setlocale@plt>
   11974:	cmp	r0, #0
   11978:	ldreq	r5, [pc, #336]	; 11ad0 <__assert_fail@plt+0xba0>
   1197c:	beq	11998 <__assert_fail@plt+0xa68>
   11980:	mov	r2, #3
   11984:	ldr	r1, [pc, #340]	; 11ae0 <__assert_fail@plt+0xbb0>
   11988:	bl	10f18 <strncmp@plt>
   1198c:	ldr	r5, [pc, #316]	; 11ad0 <__assert_fail@plt+0xba0>
   11990:	cmp	r0, #0
   11994:	bne	11a80 <__assert_fail@plt+0xb50>
   11998:	mov	r2, #5
   1199c:	ldr	r1, [pc, #320]	; 11ae4 <__assert_fail@plt+0xbb4>
   119a0:	mov	r0, #0
   119a4:	bl	10d68 <dcgettext@plt>
   119a8:	ldr	r3, [pc, #288]	; 11ad0 <__assert_fail@plt+0xba0>
   119ac:	ldr	r2, [pc, #292]	; 11ad8 <__assert_fail@plt+0xba8>
   119b0:	mov	r1, r0
   119b4:	mov	r0, #1
   119b8:	bl	10e70 <__printf_chk@plt>
   119bc:	mov	r2, #5
   119c0:	ldr	r1, [pc, #288]	; 11ae8 <__assert_fail@plt+0xbb8>
   119c4:	mov	r0, #0
   119c8:	bl	10d68 <dcgettext@plt>
   119cc:	ldr	r2, [pc, #280]	; 11aec <__assert_fail@plt+0xbbc>
   119d0:	cmp	r4, r5
   119d4:	ldr	r3, [pc, #276]	; 11af0 <__assert_fail@plt+0xbc0>
   119d8:	movne	r3, r2
   119dc:	mov	r1, r0
   119e0:	mov	r2, r4
   119e4:	mov	r0, #1
   119e8:	bl	10e70 <__printf_chk@plt>
   119ec:	b	117ec <__assert_fail@plt+0x8bc>
   119f0:	mov	r0, r4
   119f4:	bl	10d68 <dcgettext@plt>
   119f8:	ldr	r3, [pc, #216]	; 11ad8 <__assert_fail@plt+0xba8>
   119fc:	ldr	r2, [pc, #216]	; 11adc <__assert_fail@plt+0xbac>
   11a00:	mov	r1, r0
   11a04:	mov	r0, #1
   11a08:	bl	10e70 <__printf_chk@plt>
   11a0c:	mov	r1, r4
   11a10:	mov	r0, #5
   11a14:	bl	10ec4 <setlocale@plt>
   11a18:	cmp	r0, #0
   11a1c:	beq	11a34 <__assert_fail@plt+0xb04>
   11a20:	mov	r2, #3
   11a24:	ldr	r1, [pc, #180]	; 11ae0 <__assert_fail@plt+0xbb0>
   11a28:	bl	10f18 <strncmp@plt>
   11a2c:	cmp	r0, #0
   11a30:	bne	11a78 <__assert_fail@plt+0xb48>
   11a34:	mov	r2, #5
   11a38:	ldr	r1, [pc, #164]	; 11ae4 <__assert_fail@plt+0xbb4>
   11a3c:	mov	r0, #0
   11a40:	bl	10d68 <dcgettext@plt>
   11a44:	ldr	r3, [pc, #132]	; 11ad0 <__assert_fail@plt+0xba0>
   11a48:	ldr	r2, [pc, #136]	; 11ad8 <__assert_fail@plt+0xba8>
   11a4c:	mov	r4, r3
   11a50:	mov	r1, r0
   11a54:	mov	r0, #1
   11a58:	bl	10e70 <__printf_chk@plt>
   11a5c:	ldr	r1, [pc, #132]	; 11ae8 <__assert_fail@plt+0xbb8>
   11a60:	mov	r2, #5
   11a64:	mov	r0, #0
   11a68:	bl	10d68 <dcgettext@plt>
   11a6c:	ldr	r3, [pc, #124]	; 11af0 <__assert_fail@plt+0xbc0>
   11a70:	mov	r1, r0
   11a74:	b	119e0 <__assert_fail@plt+0xab0>
   11a78:	ldr	r5, [pc, #80]	; 11ad0 <__assert_fail@plt+0xba0>
   11a7c:	mov	r4, r5
   11a80:	mov	r2, #5
   11a84:	ldr	r1, [pc, #104]	; 11af4 <__assert_fail@plt+0xbc4>
   11a88:	mov	r0, #0
   11a8c:	bl	10d68 <dcgettext@plt>
   11a90:	ldr	r1, [r7]
   11a94:	bl	10ccc <fputs_unlocked@plt>
   11a98:	b	11998 <__assert_fail@plt+0xa68>
   11a9c:	andeq	sl, r2, r8, asr #2
   11aa0:	strdeq	r8, [r1], -ip
   11aa4:	andeq	sl, r2, r8, ror #2
   11aa8:	andeq	r8, r1, r4, lsr #26
   11aac:	andeq	sl, r2, r4, asr r1
   11ab0:	andeq	r8, r1, r0, asr #24
   11ab4:	andeq	r8, r1, r4, asr #26
   11ab8:	andeq	r8, r1, ip, lsl #27
   11abc:	andeq	r8, r1, r4, asr #27
   11ac0:	andeq	r8, r1, r0, lsl lr
   11ac4:	andeq	r8, r1, r4, lsl #30
   11ac8:	andeq	r8, r1, r4, lsr pc
   11acc:	andeq	r8, r1, ip, ror #30
   11ad0:	strdeq	r8, [r1], -r4
   11ad4:	andeq	r9, r1, r8, ror r0
   11ad8:	muleq	r1, r0, r0
   11adc:	strheq	r9, [r1], -r8
   11ae0:	andeq	r9, r1, r8, asr #1
   11ae4:	andeq	r9, r1, r4, lsl r1
   11ae8:	andeq	r9, r1, r0, lsr r1
   11aec:	andeq	r8, r1, r0, lsr pc
   11af0:	strdeq	r9, [r1], -r8
   11af4:	andeq	r9, r1, ip, asr #1
   11af8:	tst	r3, #3
   11afc:	push	{r4, r5, r6, r7, lr}
   11b00:	mov	lr, r3
   11b04:	bne	11b18 <__assert_fail@plt+0xbe8>
   11b08:	asr	ip, r3, #2
   11b0c:	add	ip, ip, ip, lsl #1
   11b10:	cmp	r1, ip
   11b14:	beq	11c34 <__assert_fail@plt+0xd04>
   11b18:	sub	r3, r3, #4
   11b1c:	add	r2, r2, #4
   11b20:	ldr	r5, [pc, #384]	; 11ca8 <__assert_fail@plt+0xd78>
   11b24:	mov	r6, #61	; 0x3d
   11b28:	b	11b98 <__assert_fail@plt+0xc68>
   11b2c:	ldrb	r4, [r0, #1]
   11b30:	cmp	lr, #2
   11b34:	add	ip, ip, r4, lsr #4
   11b38:	and	ip, ip, #63	; 0x3f
   11b3c:	ldrb	ip, [r5, ip]
   11b40:	strb	ip, [r2, #-3]
   11b44:	beq	11c28 <__assert_fail@plt+0xcf8>
   11b48:	cmp	r1, #2
   11b4c:	lsl	r4, r4, #2
   11b50:	beq	11c00 <__assert_fail@plt+0xcd0>
   11b54:	ldrb	ip, [r0, #2]
   11b58:	cmp	lr, #3
   11b5c:	add	r4, r4, ip, lsr #6
   11b60:	and	r4, r4, #63	; 0x3f
   11b64:	ldrb	r4, [r5, r4]
   11b68:	strb	r4, [r2, #-2]
   11b6c:	beq	11ca4 <__assert_fail@plt+0xd74>
   11b70:	and	ip, ip, #63	; 0x3f
   11b74:	cmp	r3, #0
   11b78:	ldrb	ip, [r5, ip]
   11b7c:	strb	ip, [r2, #-1]
   11b80:	beq	11c30 <__assert_fail@plt+0xd00>
   11b84:	subs	r1, r1, #3
   11b88:	addne	r0, r0, #3
   11b8c:	sub	lr, lr, #4
   11b90:	sub	r3, r3, #4
   11b94:	add	r2, r2, #4
   11b98:	cmp	r1, #0
   11b9c:	cmpne	lr, #0
   11ba0:	movne	r4, #1
   11ba4:	moveq	r4, #0
   11ba8:	beq	11c18 <__assert_fail@plt+0xce8>
   11bac:	ldrb	ip, [r0]
   11bb0:	cmp	lr, #1
   11bb4:	ldrb	r4, [r5, ip, lsr #2]
   11bb8:	strb	r4, [r2, #-4]
   11bbc:	popeq	{r4, r5, r6, r7, pc}
   11bc0:	cmp	r1, #1
   11bc4:	lsl	ip, ip, #4
   11bc8:	bne	11b2c <__assert_fail@plt+0xbfc>
   11bcc:	and	ip, ip, #63	; 0x3f
   11bd0:	cmp	lr, #2
   11bd4:	ldrb	r1, [r5, ip]
   11bd8:	strb	r1, [r2, #-3]
   11bdc:	beq	11c24 <__assert_fail@plt+0xcf4>
   11be0:	cmp	lr, #3
   11be4:	strb	r6, [r2, #-2]
   11be8:	beq	11c2c <__assert_fail@plt+0xcfc>
   11bec:	cmp	r3, #0
   11bf0:	strb	r6, [r2, #-1]
   11bf4:	popeq	{r4, r5, r6, r7, pc}
   11bf8:	mov	r1, #0
   11bfc:	b	11b8c <__assert_fail@plt+0xc5c>
   11c00:	and	r4, r4, #63	; 0x3f
   11c04:	cmp	lr, #3
   11c08:	ldrb	r1, [r5, r4]
   11c0c:	strb	r1, [r2, #-2]
   11c10:	bne	11bec <__assert_fail@plt+0xcbc>
   11c14:	pop	{r4, r5, r6, r7, pc}
   11c18:	cmp	lr, #0
   11c1c:	strbne	r4, [r2, #-4]
   11c20:	pop	{r4, r5, r6, r7, pc}
   11c24:	pop	{r4, r5, r6, r7, pc}
   11c28:	pop	{r4, r5, r6, r7, pc}
   11c2c:	pop	{r4, r5, r6, r7, pc}
   11c30:	pop	{r4, r5, r6, r7, pc}
   11c34:	cmp	r1, #0
   11c38:	popeq	{r4, r5, r6, r7, pc}
   11c3c:	add	r3, r1, #3
   11c40:	ldr	lr, [pc, #96]	; 11ca8 <__assert_fail@plt+0xd78>
   11c44:	add	r3, r0, r3
   11c48:	add	r0, r0, #3
   11c4c:	ldrb	r6, [r0, #-2]
   11c50:	ldrb	r4, [r0, #-1]
   11c54:	ldrb	r5, [r0, #-3]
   11c58:	add	r0, r0, #3
   11c5c:	lsr	r1, r6, #4
   11c60:	lsr	ip, r4, #6
   11c64:	add	r1, r1, r5, lsl #4
   11c68:	add	ip, ip, r6, lsl #2
   11c6c:	and	r1, r1, #63	; 0x3f
   11c70:	and	ip, ip, #63	; 0x3f
   11c74:	ldrb	r7, [lr, r1]
   11c78:	and	r4, r4, #63	; 0x3f
   11c7c:	ldrb	r6, [lr, ip]
   11c80:	ldrb	r1, [lr, r5, lsr #2]
   11c84:	ldrb	ip, [lr, r4]
   11c88:	cmp	r0, r3
   11c8c:	orr	r1, r1, r7, lsl #8
   11c90:	orr	r1, r1, r6, lsl #16
   11c94:	orr	r1, r1, ip, lsl #24
   11c98:	str	r1, [r2], #4
   11c9c:	bne	11c4c <__assert_fail@plt+0xd1c>
   11ca0:	pop	{r4, r5, r6, r7, pc}
   11ca4:	pop	{r4, r5, r6, r7, pc}
   11ca8:	muleq	r1, ip, r2
   11cac:	ldr	r3, [pc, #164]	; 11d58 <__assert_fail@plt+0xe28>
   11cb0:	push	{r4, r5, r6, r7, r8, lr}
   11cb4:	mov	r5, r1
   11cb8:	mov	r6, r0
   11cbc:	smull	r1, r3, r3, r5
   11cc0:	sub	r3, r3, r5, asr #31
   11cc4:	mov	r7, r2
   11cc8:	add	r4, r3, r3, lsl #1
   11ccc:	cmp	r5, r4
   11cd0:	moveq	r4, r3
   11cd4:	addne	r4, r3, #1
   11cd8:	cmp	r4, #0
   11cdc:	blt	11d2c <__assert_fail@plt+0xdfc>
   11ce0:	cmn	r4, #-536870911	; 0xe0000001
   11ce4:	bgt	11d48 <__assert_fail@plt+0xe18>
   11ce8:	cmp	r5, #0
   11cec:	blt	11d48 <__assert_fail@plt+0xe18>
   11cf0:	lsl	r4, r4, #2
   11cf4:	add	r8, r4, #1
   11cf8:	mov	r0, r8
   11cfc:	bl	18294 <__assert_fail@plt+0x7364>
   11d00:	cmp	r0, #0
   11d04:	str	r0, [r7]
   11d08:	moveq	r4, r8
   11d0c:	beq	11d50 <__assert_fail@plt+0xe20>
   11d10:	mov	r2, r0
   11d14:	mov	r3, r8
   11d18:	mov	r0, r6
   11d1c:	mov	r1, r5
   11d20:	bl	11af8 <__assert_fail@plt+0xbc8>
   11d24:	mov	r0, r4
   11d28:	pop	{r4, r5, r6, r7, r8, pc}
   11d2c:	cmn	r4, #1
   11d30:	beq	11ce8 <__assert_fail@plt+0xdb8>
   11d34:	mov	r1, r4
   11d38:	mov	r0, #-2147483648	; 0x80000000
   11d3c:	bl	1876c <__assert_fail@plt+0x783c>
   11d40:	cmp	r0, #3
   11d44:	bne	11ce8 <__assert_fail@plt+0xdb8>
   11d48:	mov	r4, #0
   11d4c:	str	r4, [r7]
   11d50:	mov	r0, r4
   11d54:	pop	{r4, r5, r6, r7, r8, pc}
   11d58:	ldrbpl	r5, [r5, #-1366]	; 0xfffffaaa
   11d5c:	ldr	r3, [pc, #16]	; 11d74 <__assert_fail@plt+0xe44>
   11d60:	add	r0, r3, r0
   11d64:	ldrb	r0, [r0, #64]	; 0x40
   11d68:	eor	r0, r0, #128	; 0x80
   11d6c:	lsr	r0, r0, #7
   11d70:	bx	lr
   11d74:	muleq	r1, ip, r2
   11d78:	mov	r3, #0
   11d7c:	str	r3, [r0]
   11d80:	bx	lr
   11d84:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   11d88:	sub	sp, sp, #20
   11d8c:	mov	r5, r3
   11d90:	ldr	r3, [sp, #56]	; 0x38
   11d94:	subs	sl, r0, #0
   11d98:	mov	r4, r1
   11d9c:	movne	fp, #1
   11da0:	moveq	fp, #0
   11da4:	ldr	r8, [r3]
   11da8:	beq	121a4 <__assert_fail@plt+0x1274>
   11dac:	adds	r1, r2, #0
   11db0:	ldr	r3, [sl]
   11db4:	movne	r1, #1
   11db8:	str	r1, [sp, #8]
   11dbc:	cmp	r3, #0
   11dc0:	movne	r1, #0
   11dc4:	andeq	r1, r1, #1
   11dc8:	mov	r3, r1
   11dcc:	ldr	r1, [sp, #8]
   11dd0:	ldr	r7, [pc, #1000]	; 121c0 <__assert_fail@plt+0x1290>
   11dd4:	and	fp, fp, r1
   11dd8:	add	r1, sl, #4
   11ddc:	str	r1, [sp, #4]
   11de0:	cmp	r3, #0
   11de4:	beq	12090 <__assert_fail@plt+0x1160>
   11de8:	cmp	r2, #1
   11dec:	ble	12090 <__assert_fail@plt+0x1160>
   11df0:	ldrb	r1, [r4]
   11df4:	add	r1, r7, r1
   11df8:	ldrsb	r1, [r1, #64]	; 0x40
   11dfc:	cmp	r1, #0
   11e00:	blt	11ef0 <__assert_fail@plt+0xfc0>
   11e04:	ldrb	r0, [r4, #1]
   11e08:	add	r0, r7, r0
   11e0c:	ldrsb	ip, [r0, #64]	; 0x40
   11e10:	cmp	ip, #0
   11e14:	bge	11e34 <__assert_fail@plt+0xf04>
   11e18:	b	11ef0 <__assert_fail@plt+0xfc0>
   11e1c:	ldrb	r0, [ip, #1]
   11e20:	mov	r4, ip
   11e24:	add	r0, r7, r0
   11e28:	ldrsb	ip, [r0, #64]	; 0x40
   11e2c:	cmp	ip, #0
   11e30:	blt	11ef0 <__assert_fail@plt+0xfc0>
   11e34:	cmp	r8, #0
   11e38:	asrne	r0, ip, #4
   11e3c:	orrne	r1, r0, r1, lsl #2
   11e40:	strbne	r1, [r5]
   11e44:	moveq	r1, r8
   11e48:	addne	r5, r5, #1
   11e4c:	subne	r1, r8, #1
   11e50:	cmp	r2, #2
   11e54:	beq	11ef4 <__assert_fail@plt+0xfc4>
   11e58:	ldrb	r0, [r4, #2]
   11e5c:	cmp	r0, #61	; 0x3d
   11e60:	beq	120c4 <__assert_fail@plt+0x1194>
   11e64:	add	r0, r7, r0
   11e68:	ldrsb	lr, [r0, #64]	; 0x40
   11e6c:	cmp	lr, #0
   11e70:	blt	11ef4 <__assert_fail@plt+0xfc4>
   11e74:	cmp	r1, #0
   11e78:	asrne	r0, lr, #2
   11e7c:	orrne	ip, r0, ip, lsl #4
   11e80:	strbne	ip, [r5]
   11e84:	subne	r1, r1, #1
   11e88:	addne	r5, r5, #1
   11e8c:	cmp	r2, #3
   11e90:	beq	11ef4 <__assert_fail@plt+0xfc4>
   11e94:	ldrb	r0, [r4, #3]
   11e98:	cmp	r0, #61	; 0x3d
   11e9c:	beq	12134 <__assert_fail@plt+0x1204>
   11ea0:	add	r0, r7, r0
   11ea4:	ldrsb	r0, [r0, #64]	; 0x40
   11ea8:	cmp	r0, #0
   11eac:	blt	11ef4 <__assert_fail@plt+0xfc4>
   11eb0:	cmp	r1, #0
   11eb4:	moveq	r8, r1
   11eb8:	orrne	lr, r0, lr, lsl #6
   11ebc:	strbne	lr, [r5]
   11ec0:	subne	r8, r1, #1
   11ec4:	addne	r5, r5, #1
   11ec8:	sub	r2, r2, #4
   11ecc:	cmp	r2, #1
   11ed0:	add	ip, r4, #4
   11ed4:	ble	120bc <__assert_fail@plt+0x118c>
   11ed8:	ldrb	r1, [r4, #4]
   11edc:	add	r1, r7, r1
   11ee0:	ldrsb	r1, [r1, #64]	; 0x40
   11ee4:	cmp	r1, #0
   11ee8:	bge	11e1c <__assert_fail@plt+0xeec>
   11eec:	mov	r4, ip
   11ef0:	mov	r1, r8
   11ef4:	ldrb	r0, [r4]
   11ef8:	cmp	r0, #10
   11efc:	beq	12148 <__assert_fail@plt+0x1218>
   11f00:	sub	r1, r8, r1
   11f04:	cmp	sl, #0
   11f08:	sub	r5, r5, r1
   11f0c:	add	r9, r4, r2
   11f10:	beq	12168 <__assert_fail@plt+0x1238>
   11f14:	ldr	r6, [sl]
   11f18:	cmp	r6, #4
   11f1c:	moveq	r6, #0
   11f20:	clzne	r1, r6
   11f24:	moveq	r0, r6
   11f28:	lsrne	r1, r1, #5
   11f2c:	moveq	r1, #1
   11f30:	streq	r0, [sl]
   11f34:	cmp	r2, #3
   11f38:	movle	r2, #0
   11f3c:	andgt	r2, r1, #1
   11f40:	cmp	r2, #0
   11f44:	beq	11f74 <__assert_fail@plt+0x1044>
   11f48:	mov	r1, #10
   11f4c:	mov	r0, r4
   11f50:	mov	r2, #4
   11f54:	str	r3, [sp, #12]
   11f58:	bl	10e94 <memchr@plt>
   11f5c:	ldr	r3, [sp, #12]
   11f60:	cmp	r0, #0
   11f64:	moveq	r6, #4
   11f68:	moveq	r1, r4
   11f6c:	addeq	r4, r4, r6
   11f70:	beq	11fd0 <__assert_fail@plt+0x10a0>
   11f74:	cmp	r4, r9
   11f78:	bcs	11fac <__assert_fail@plt+0x107c>
   11f7c:	ldrb	r0, [r4], #1
   11f80:	add	r1, r6, #1
   11f84:	mov	r2, sl
   11f88:	cmp	r0, #10
   11f8c:	beq	11fa4 <__assert_fail@plt+0x1074>
   11f90:	cmp	r1, #4
   11f94:	str	r1, [r2], r6
   11f98:	mov	r6, r1
   11f9c:	strb	r0, [r2, #4]
   11fa0:	beq	12174 <__assert_fail@plt+0x1244>
   11fa4:	cmp	r4, r9
   11fa8:	bne	11f7c <__assert_fail@plt+0x104c>
   11fac:	cmp	r6, #0
   11fb0:	beq	1219c <__assert_fail@plt+0x126c>
   11fb4:	ldr	r1, [sp, #4]
   11fb8:	cmp	r6, #3
   11fbc:	bgt	11fd0 <__assert_fail@plt+0x10a0>
   11fc0:	cmp	fp, #0
   11fc4:	bne	12114 <__assert_fail@plt+0x11e4>
   11fc8:	cmp	r6, #1
   11fcc:	ble	12114 <__assert_fail@plt+0x11e4>
   11fd0:	ldrb	r2, [r1]
   11fd4:	add	r2, r7, r2
   11fd8:	ldrsb	r0, [r2, #64]	; 0x40
   11fdc:	cmp	r0, #0
   11fe0:	blt	12110 <__assert_fail@plt+0x11e0>
   11fe4:	ldrb	r2, [r1, #1]
   11fe8:	add	r2, r7, r2
   11fec:	ldrsb	ip, [r2, #64]	; 0x40
   11ff0:	cmp	ip, #0
   11ff4:	blt	12110 <__assert_fail@plt+0x11e0>
   11ff8:	cmp	r8, #0
   11ffc:	asrne	r2, ip, #4
   12000:	orrne	r0, r2, r0, lsl #2
   12004:	strbne	r0, [r5]
   12008:	subne	r8, r8, #1
   1200c:	addne	r5, r5, #1
   12010:	cmp	r6, #2
   12014:	beq	12110 <__assert_fail@plt+0x11e0>
   12018:	ldrb	r2, [r1, #2]
   1201c:	cmp	r2, #61	; 0x3d
   12020:	beq	12108 <__assert_fail@plt+0x11d8>
   12024:	add	r2, r7, r2
   12028:	ldrsb	r0, [r2, #64]	; 0x40
   1202c:	cmp	r0, #0
   12030:	blt	12110 <__assert_fail@plt+0x11e0>
   12034:	cmp	r8, #0
   12038:	asrne	r2, r0, #2
   1203c:	orrne	ip, r2, ip, lsl #4
   12040:	strbne	ip, [r5]
   12044:	subne	r8, r8, #1
   12048:	addne	r5, r5, #1
   1204c:	cmp	r6, #3
   12050:	beq	12110 <__assert_fail@plt+0x11e0>
   12054:	ldrb	r2, [r1, #3]
   12058:	cmp	r2, #61	; 0x3d
   1205c:	beq	12190 <__assert_fail@plt+0x1260>
   12060:	add	r2, r7, r2
   12064:	ldrsb	r2, [r2, #64]	; 0x40
   12068:	cmp	r2, #0
   1206c:	blt	12110 <__assert_fail@plt+0x11e0>
   12070:	cmp	r8, #0
   12074:	orrne	r2, r2, r0, lsl #6
   12078:	strbne	r2, [r5]
   1207c:	subne	r8, r8, #1
   12080:	addne	r5, r5, #1
   12084:	cmp	r3, #0
   12088:	sub	r2, r9, r4
   1208c:	bne	11de8 <__assert_fail@plt+0xeb8>
   12090:	ldr	r0, [sp, #8]
   12094:	mov	r1, r8
   12098:	cmp	r2, #0
   1209c:	movne	r0, #0
   120a0:	andeq	r0, r0, #1
   120a4:	cmp	r0, #0
   120a8:	bne	121b4 <__assert_fail@plt+0x1284>
   120ac:	cmp	r2, #0
   120b0:	moveq	r1, r8
   120b4:	beq	120e8 <__assert_fail@plt+0x11b8>
   120b8:	b	11ef4 <__assert_fail@plt+0xfc4>
   120bc:	mov	r4, ip
   120c0:	b	12090 <__assert_fail@plt+0x1160>
   120c4:	cmp	r2, #4
   120c8:	bne	11ef4 <__assert_fail@plt+0xfc4>
   120cc:	ldrb	r0, [r4, #3]
   120d0:	cmp	r0, #61	; 0x3d
   120d4:	bne	11ef4 <__assert_fail@plt+0xfc4>
   120d8:	ldr	r2, [sp, #8]
   120dc:	add	r4, r4, #4
   120e0:	cmp	r2, #0
   120e4:	bne	121b4 <__assert_fail@plt+0x1284>
   120e8:	sub	r2, r1, r1
   120ec:	cmp	sl, #0
   120f0:	mov	r8, r1
   120f4:	sub	r5, r5, r2
   120f8:	beq	1219c <__assert_fail@plt+0x126c>
   120fc:	mov	r9, r4
   12100:	mov	r2, #0
   12104:	b	11f14 <__assert_fail@plt+0xfe4>
   12108:	cmp	r6, #4
   1210c:	beq	12180 <__assert_fail@plt+0x1250>
   12110:	mov	fp, #0
   12114:	ldr	r3, [sp, #56]	; 0x38
   12118:	mov	r0, fp
   1211c:	ldr	r3, [r3]
   12120:	sub	r8, r3, r8
   12124:	ldr	r3, [sp, #56]	; 0x38
   12128:	str	r8, [r3]
   1212c:	add	sp, sp, #20
   12130:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12134:	cmp	r2, #4
   12138:	beq	120d8 <__assert_fail@plt+0x11a8>
   1213c:	ldrb	r0, [r4]
   12140:	cmp	r0, #10
   12144:	bne	11f00 <__assert_fail@plt+0xfd0>
   12148:	cmp	sl, #0
   1214c:	subne	r2, r2, #1
   12150:	movne	r8, r1
   12154:	addne	r4, r4, #1
   12158:	bne	11de0 <__assert_fail@plt+0xeb0>
   1215c:	sub	r1, r8, r1
   12160:	sub	r5, r5, r1
   12164:	add	r9, r4, r2
   12168:	mov	r6, r2
   1216c:	mov	r1, r4
   12170:	b	11fb8 <__assert_fail@plt+0x1088>
   12174:	mov	r6, #4
   12178:	ldr	r1, [sp, #4]
   1217c:	b	11fd0 <__assert_fail@plt+0x10a0>
   12180:	ldrb	r2, [r1, #3]
   12184:	cmp	r2, #61	; 0x3d
   12188:	bne	12110 <__assert_fail@plt+0x11e0>
   1218c:	b	12084 <__assert_fail@plt+0x1154>
   12190:	cmp	r6, #4
   12194:	bne	12110 <__assert_fail@plt+0x11e0>
   12198:	b	12084 <__assert_fail@plt+0x1154>
   1219c:	mov	fp, #1
   121a0:	b	12114 <__assert_fail@plt+0x11e4>
   121a4:	mov	r3, #1
   121a8:	str	r3, [sp, #8]
   121ac:	mov	r1, r3
   121b0:	b	11dd0 <__assert_fail@plt+0xea0>
   121b4:	mov	r8, r1
   121b8:	mov	fp, #1
   121bc:	b	12114 <__assert_fail@plt+0x11e4>
   121c0:	muleq	r1, ip, r2
   121c4:	asr	ip, r2, #2
   121c8:	add	ip, ip, #1
   121cc:	push	{r4, r5, r6, r7, r8, lr}
   121d0:	add	ip, ip, ip, lsl #1
   121d4:	sub	sp, sp, #16
   121d8:	mov	r7, r0
   121dc:	mov	r0, ip
   121e0:	mov	r5, r3
   121e4:	mov	r4, r2
   121e8:	mov	r8, r1
   121ec:	str	ip, [sp, #12]
   121f0:	ldr	r6, [sp, #40]	; 0x28
   121f4:	bl	18294 <__assert_fail@plt+0x7364>
   121f8:	cmp	r0, #0
   121fc:	str	r0, [r5]
   12200:	beq	12244 <__assert_fail@plt+0x1314>
   12204:	add	ip, sp, #12
   12208:	mov	r3, r0
   1220c:	mov	r2, r4
   12210:	mov	r1, r8
   12214:	mov	r0, r7
   12218:	str	ip, [sp]
   1221c:	bl	11d84 <__assert_fail@plt+0xe54>
   12220:	subs	r4, r0, #0
   12224:	beq	12254 <__assert_fail@plt+0x1324>
   12228:	cmp	r6, #0
   1222c:	beq	12244 <__assert_fail@plt+0x1314>
   12230:	ldr	r3, [sp, #12]
   12234:	mov	r0, r4
   12238:	str	r3, [r6]
   1223c:	add	sp, sp, #16
   12240:	pop	{r4, r5, r6, r7, r8, pc}
   12244:	mov	r4, #1
   12248:	mov	r0, r4
   1224c:	add	sp, sp, #16
   12250:	pop	{r4, r5, r6, r7, r8, pc}
   12254:	ldr	r0, [r5]
   12258:	bl	124b0 <__assert_fail@plt+0x1580>
   1225c:	mov	r0, r4
   12260:	str	r4, [r5]
   12264:	add	sp, sp, #16
   12268:	pop	{r4, r5, r6, r7, r8, pc}
   1226c:	ldr	r3, [pc, #4]	; 12278 <__assert_fail@plt+0x1348>
   12270:	str	r0, [r3]
   12274:	bx	lr
   12278:	andeq	sl, r2, r0, ror #2
   1227c:	ldr	r3, [pc, #4]	; 12288 <__assert_fail@plt+0x1358>
   12280:	strb	r0, [r3, #4]
   12284:	bx	lr
   12288:	andeq	sl, r2, r0, ror #2
   1228c:	ldr	r3, [pc, #192]	; 12354 <__assert_fail@plt+0x1424>
   12290:	push	{r4, r5, r6, lr}
   12294:	sub	sp, sp, #8
   12298:	ldr	r0, [r3]
   1229c:	bl	1831c <__assert_fail@plt+0x73ec>
   122a0:	cmp	r0, #0
   122a4:	beq	122c8 <__assert_fail@plt+0x1398>
   122a8:	ldr	r4, [pc, #168]	; 12358 <__assert_fail@plt+0x1428>
   122ac:	ldrb	r3, [r4, #4]
   122b0:	cmp	r3, #0
   122b4:	beq	122e4 <__assert_fail@plt+0x13b4>
   122b8:	bl	10e4c <__errno_location@plt>
   122bc:	ldr	r3, [r0]
   122c0:	cmp	r3, #32
   122c4:	bne	122e4 <__assert_fail@plt+0x13b4>
   122c8:	ldr	r3, [pc, #140]	; 1235c <__assert_fail@plt+0x142c>
   122cc:	ldr	r0, [r3]
   122d0:	bl	1831c <__assert_fail@plt+0x73ec>
   122d4:	cmp	r0, #0
   122d8:	bne	1232c <__assert_fail@plt+0x13fc>
   122dc:	add	sp, sp, #8
   122e0:	pop	{r4, r5, r6, pc}
   122e4:	mov	r2, #5
   122e8:	ldr	r1, [pc, #112]	; 12360 <__assert_fail@plt+0x1430>
   122ec:	mov	r0, #0
   122f0:	bl	10d68 <dcgettext@plt>
   122f4:	ldr	r4, [r4]
   122f8:	cmp	r4, #0
   122fc:	mov	r5, r0
   12300:	beq	12338 <__assert_fail@plt+0x1408>
   12304:	bl	10e4c <__errno_location@plt>
   12308:	ldr	r6, [r0]
   1230c:	mov	r0, r4
   12310:	bl	15214 <__assert_fail@plt+0x42e4>
   12314:	mov	r1, r6
   12318:	str	r5, [sp]
   1231c:	ldr	r2, [pc, #64]	; 12364 <__assert_fail@plt+0x1434>
   12320:	mov	r3, r0
   12324:	mov	r0, #0
   12328:	bl	10dd4 <error@plt>
   1232c:	ldr	r3, [pc, #52]	; 12368 <__assert_fail@plt+0x1438>
   12330:	ldr	r0, [r3]
   12334:	bl	10d20 <_exit@plt>
   12338:	bl	10e4c <__errno_location@plt>
   1233c:	mov	r3, r5
   12340:	ldr	r2, [pc, #36]	; 1236c <__assert_fail@plt+0x143c>
   12344:	ldr	r1, [r0]
   12348:	mov	r0, r4
   1234c:	bl	10dd4 <error@plt>
   12350:	b	1232c <__assert_fail@plt+0x13fc>
   12354:	andeq	sl, r2, r4, asr r1
   12358:	andeq	sl, r2, r0, ror #2
   1235c:	andeq	sl, r2, r8, asr #2
   12360:	ldrdeq	r9, [r1], -r4
   12364:	muleq	r1, r0, r1
   12368:	strdeq	sl, [r2], -r0
   1236c:	muleq	r1, r4, r1
   12370:	push	{r4, r5}
   12374:	pop	{r4, r5}
   12378:	b	10cf0 <posix_fadvise64@plt>
   1237c:	cmp	r0, #0
   12380:	bxeq	lr
   12384:	push	{r4, lr}
   12388:	sub	sp, sp, #16
   1238c:	mov	r4, r1
   12390:	bl	10e7c <fileno@plt>
   12394:	mov	r2, #0
   12398:	mov	r3, #0
   1239c:	str	r4, [sp, #8]
   123a0:	strd	r2, [sp]
   123a4:	bl	10cf0 <posix_fadvise64@plt>
   123a8:	add	sp, sp, #16
   123ac:	pop	{r4, pc}
   123b0:	push	{r4, r5, lr}
   123b4:	sub	sp, sp, #12
   123b8:	mov	r4, r0
   123bc:	bl	10e7c <fileno@plt>
   123c0:	cmp	r0, #0
   123c4:	mov	r0, r4
   123c8:	blt	12444 <__assert_fail@plt+0x1514>
   123cc:	bl	10df8 <__freading@plt>
   123d0:	cmp	r0, #0
   123d4:	bne	12410 <__assert_fail@plt+0x14e0>
   123d8:	mov	r0, r4
   123dc:	bl	12450 <__assert_fail@plt+0x1520>
   123e0:	cmp	r0, #0
   123e4:	beq	12440 <__assert_fail@plt+0x1510>
   123e8:	bl	10e4c <__errno_location@plt>
   123ec:	mov	r5, r0
   123f0:	mov	r0, r4
   123f4:	ldr	r4, [r5]
   123f8:	bl	10ea0 <fclose@plt>
   123fc:	cmp	r4, #0
   12400:	mvnne	r0, #0
   12404:	strne	r4, [r5]
   12408:	add	sp, sp, #12
   1240c:	pop	{r4, r5, pc}
   12410:	mov	r0, r4
   12414:	bl	10e7c <fileno@plt>
   12418:	mov	r3, #1
   1241c:	str	r3, [sp]
   12420:	mov	r2, #0
   12424:	mov	r3, #0
   12428:	bl	10da4 <lseek64@plt>
   1242c:	mvn	r3, #0
   12430:	mvn	r2, #0
   12434:	cmp	r1, r3
   12438:	cmpeq	r0, r2
   1243c:	bne	123d8 <__assert_fail@plt+0x14a8>
   12440:	mov	r0, r4
   12444:	add	sp, sp, #12
   12448:	pop	{r4, r5, lr}
   1244c:	b	10ea0 <fclose@plt>
   12450:	push	{r4, lr}
   12454:	subs	r4, r0, #0
   12458:	sub	sp, sp, #8
   1245c:	beq	12478 <__assert_fail@plt+0x1548>
   12460:	bl	10df8 <__freading@plt>
   12464:	cmp	r0, #0
   12468:	beq	12478 <__assert_fail@plt+0x1548>
   1246c:	ldr	r3, [r4]
   12470:	tst	r3, #256	; 0x100
   12474:	bne	12488 <__assert_fail@plt+0x1558>
   12478:	mov	r0, r4
   1247c:	add	sp, sp, #8
   12480:	pop	{r4, lr}
   12484:	b	10cfc <fflush@plt>
   12488:	mov	r3, #1
   1248c:	str	r3, [sp]
   12490:	mov	r2, #0
   12494:	mov	r3, #0
   12498:	mov	r0, r4
   1249c:	bl	12508 <__assert_fail@plt+0x15d8>
   124a0:	mov	r0, r4
   124a4:	add	sp, sp, #8
   124a8:	pop	{r4, lr}
   124ac:	b	10cfc <fflush@plt>
   124b0:	push	{r4, r5, lr}
   124b4:	sub	sp, sp, #12
   124b8:	mov	r5, r0
   124bc:	bl	10e4c <__errno_location@plt>
   124c0:	mov	r2, #0
   124c4:	mov	r4, r0
   124c8:	ldr	r3, [r0]
   124cc:	str	r2, [r4]
   124d0:	mov	r0, r5
   124d4:	str	r3, [sp]
   124d8:	str	r3, [sp, #4]
   124dc:	bl	10d14 <free@plt>
   124e0:	ldr	r3, [r4]
   124e4:	add	r2, sp, #8
   124e8:	cmp	r3, #0
   124ec:	moveq	r3, #4
   124f0:	movne	r3, #0
   124f4:	add	r3, r2, r3
   124f8:	ldr	r3, [r3, #-8]
   124fc:	str	r3, [r4]
   12500:	add	sp, sp, #12
   12504:	pop	{r4, r5, pc}
   12508:	push	{r4, r5, r6, r7, r8, lr}
   1250c:	sub	sp, sp, #8
   12510:	ldmib	r0, {ip, lr}
   12514:	mov	r4, r0
   12518:	ldr	r5, [sp, #32]
   1251c:	cmp	lr, ip
   12520:	beq	12538 <__assert_fail@plt+0x1608>
   12524:	str	r5, [sp, #32]
   12528:	mov	r0, r4
   1252c:	add	sp, sp, #8
   12530:	pop	{r4, r5, r6, r7, r8, lr}
   12534:	b	10eac <fseeko64@plt>
   12538:	ldr	lr, [r0, #20]
   1253c:	ldr	ip, [r0, #16]
   12540:	cmp	lr, ip
   12544:	bne	12524 <__assert_fail@plt+0x15f4>
   12548:	ldr	r8, [r0, #36]	; 0x24
   1254c:	cmp	r8, #0
   12550:	bne	12524 <__assert_fail@plt+0x15f4>
   12554:	mov	r6, r2
   12558:	mov	r7, r3
   1255c:	bl	10e7c <fileno@plt>
   12560:	mov	r2, r6
   12564:	mov	r3, r7
   12568:	str	r5, [sp]
   1256c:	bl	10da4 <lseek64@plt>
   12570:	mvn	r3, #0
   12574:	mvn	r2, #0
   12578:	cmp	r1, r3
   1257c:	cmpeq	r0, r2
   12580:	beq	125a0 <__assert_fail@plt+0x1670>
   12584:	ldr	r3, [r4]
   12588:	strd	r0, [r4, #80]	; 0x50
   1258c:	mov	r0, r8
   12590:	bic	r3, r3, #16
   12594:	str	r3, [r4]
   12598:	add	sp, sp, #8
   1259c:	pop	{r4, r5, r6, r7, r8, pc}
   125a0:	mvn	r0, #0
   125a4:	b	12598 <__assert_fail@plt+0x1668>
   125a8:	push	{r4, r5, r6, lr}
   125ac:	subs	r4, r0, #0
   125b0:	beq	12624 <__assert_fail@plt+0x16f4>
   125b4:	mov	r1, #47	; 0x2f
   125b8:	bl	10ed0 <strrchr@plt>
   125bc:	subs	r5, r0, #0
   125c0:	beq	12610 <__assert_fail@plt+0x16e0>
   125c4:	add	r6, r5, #1
   125c8:	sub	r3, r6, r4
   125cc:	cmp	r3, #6
   125d0:	ble	12610 <__assert_fail@plt+0x16e0>
   125d4:	mov	r2, #7
   125d8:	ldr	r1, [pc, #96]	; 12640 <__assert_fail@plt+0x1710>
   125dc:	sub	r0, r5, #6
   125e0:	bl	10f18 <strncmp@plt>
   125e4:	cmp	r0, #0
   125e8:	bne	12610 <__assert_fail@plt+0x16e0>
   125ec:	mov	r2, #3
   125f0:	ldr	r1, [pc, #76]	; 12644 <__assert_fail@plt+0x1714>
   125f4:	mov	r0, r6
   125f8:	bl	10f18 <strncmp@plt>
   125fc:	cmp	r0, #0
   12600:	movne	r4, r6
   12604:	ldreq	r3, [pc, #60]	; 12648 <__assert_fail@plt+0x1718>
   12608:	addeq	r4, r5, #4
   1260c:	streq	r4, [r3]
   12610:	ldr	r2, [pc, #52]	; 1264c <__assert_fail@plt+0x171c>
   12614:	ldr	r3, [pc, #52]	; 12650 <__assert_fail@plt+0x1720>
   12618:	str	r4, [r2]
   1261c:	str	r4, [r3]
   12620:	pop	{r4, r5, r6, pc}
   12624:	ldr	r3, [pc, #40]	; 12654 <__assert_fail@plt+0x1724>
   12628:	mov	r2, #55	; 0x37
   1262c:	mov	r1, #1
   12630:	ldr	r3, [r3]
   12634:	ldr	r0, [pc, #28]	; 12658 <__assert_fail@plt+0x1728>
   12638:	bl	10d98 <fwrite@plt>
   1263c:	bl	10f24 <abort@plt>
   12640:	andeq	r9, r1, r4, lsl r4
   12644:	andeq	r9, r1, ip, lsl r4
   12648:	andeq	sl, r2, r8, lsr r1
   1264c:	andeq	sl, r2, r8, ror #2
   12650:	andeq	sl, r2, ip, lsr r1
   12654:	andeq	sl, r2, r8, asr #2
   12658:	ldrdeq	r9, [r1], -ip
   1265c:	push	{r4, r5, r6, lr}
   12660:	mov	r4, r0
   12664:	mov	r5, r1
   12668:	bl	18398 <__assert_fail@plt+0x7468>
   1266c:	ldrb	r3, [r0]
   12670:	bic	r3, r3, #32
   12674:	cmp	r3, #85	; 0x55
   12678:	bne	126d8 <__assert_fail@plt+0x17a8>
   1267c:	ldrb	r3, [r0, #1]
   12680:	bic	r3, r3, #32
   12684:	cmp	r3, #84	; 0x54
   12688:	bne	12714 <__assert_fail@plt+0x17e4>
   1268c:	ldrb	r3, [r0, #2]
   12690:	bic	r3, r3, #32
   12694:	cmp	r3, #70	; 0x46
   12698:	bne	12714 <__assert_fail@plt+0x17e4>
   1269c:	ldrb	r3, [r0, #3]
   126a0:	cmp	r3, #45	; 0x2d
   126a4:	bne	12714 <__assert_fail@plt+0x17e4>
   126a8:	ldrb	r3, [r0, #4]
   126ac:	cmp	r3, #56	; 0x38
   126b0:	bne	12714 <__assert_fail@plt+0x17e4>
   126b4:	ldrb	r3, [r0, #5]
   126b8:	cmp	r3, #0
   126bc:	bne	12714 <__assert_fail@plt+0x17e4>
   126c0:	ldrb	r2, [r4]
   126c4:	ldr	r3, [pc, #152]	; 12764 <__assert_fail@plt+0x1834>
   126c8:	ldr	r0, [pc, #152]	; 12768 <__assert_fail@plt+0x1838>
   126cc:	cmp	r2, #96	; 0x60
   126d0:	movne	r0, r3
   126d4:	pop	{r4, r5, r6, pc}
   126d8:	cmp	r3, #71	; 0x47
   126dc:	bne	12714 <__assert_fail@plt+0x17e4>
   126e0:	ldrb	r3, [r0, #1]
   126e4:	bic	r3, r3, #32
   126e8:	cmp	r3, #66	; 0x42
   126ec:	bne	12714 <__assert_fail@plt+0x17e4>
   126f0:	ldrb	r3, [r0, #2]
   126f4:	cmp	r3, #49	; 0x31
   126f8:	bne	12714 <__assert_fail@plt+0x17e4>
   126fc:	ldrb	r3, [r0, #3]
   12700:	cmp	r3, #56	; 0x38
   12704:	bne	12714 <__assert_fail@plt+0x17e4>
   12708:	ldrb	r3, [r0, #4]
   1270c:	cmp	r3, #48	; 0x30
   12710:	beq	12728 <__assert_fail@plt+0x17f8>
   12714:	ldr	r3, [pc, #80]	; 1276c <__assert_fail@plt+0x183c>
   12718:	cmp	r5, #9
   1271c:	ldr	r0, [pc, #76]	; 12770 <__assert_fail@plt+0x1840>
   12720:	movne	r0, r3
   12724:	pop	{r4, r5, r6, pc}
   12728:	ldrb	r3, [r0, #5]
   1272c:	cmp	r3, #51	; 0x33
   12730:	bne	12714 <__assert_fail@plt+0x17e4>
   12734:	ldrb	r3, [r0, #6]
   12738:	cmp	r3, #48	; 0x30
   1273c:	bne	12714 <__assert_fail@plt+0x17e4>
   12740:	ldrb	r3, [r0, #7]
   12744:	cmp	r3, #0
   12748:	bne	12714 <__assert_fail@plt+0x17e4>
   1274c:	ldrb	r2, [r4]
   12750:	ldr	r3, [pc, #28]	; 12774 <__assert_fail@plt+0x1844>
   12754:	ldr	r0, [pc, #28]	; 12778 <__assert_fail@plt+0x1848>
   12758:	cmp	r2, #96	; 0x60
   1275c:	movne	r0, r3
   12760:	pop	{r4, r5, r6, pc}
   12764:	andeq	r9, r1, r8, ror r4
   12768:	andeq	r9, r1, r4, ror r4
   1276c:	andeq	r9, r1, r8, lsl #9
   12770:	andeq	r9, r1, r4, lsl #9
   12774:	andeq	r9, r1, r0, lsl #9
   12778:	andeq	r9, r1, ip, ror r4
   1277c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12780:	sub	sp, sp, #140	; 0x8c
   12784:	mov	r9, r1
   12788:	str	r3, [sp, #24]
   1278c:	mov	r3, #1
   12790:	mov	sl, r0
   12794:	str	r2, [sp, #44]	; 0x2c
   12798:	str	r3, [sp, #28]
   1279c:	bl	10db0 <__ctype_get_mb_cur_max@plt>
   127a0:	ldr	r3, [sp, #180]	; 0xb4
   127a4:	mov	fp, r9
   127a8:	mov	r9, sl
   127ac:	lsr	r3, r3, #1
   127b0:	and	r3, r3, #1
   127b4:	str	r3, [sp, #40]	; 0x28
   127b8:	ldr	r3, [sp, #180]	; 0xb4
   127bc:	mov	r2, #0
   127c0:	and	r3, r3, #4
   127c4:	str	r3, [sp, #100]	; 0x64
   127c8:	ldr	r3, [sp, #180]	; 0xb4
   127cc:	str	r2, [sp, #76]	; 0x4c
   127d0:	and	r3, r3, #1
   127d4:	str	r3, [sp, #96]	; 0x60
   127d8:	str	r2, [sp, #36]	; 0x24
   127dc:	str	r2, [sp, #56]	; 0x38
   127e0:	str	r2, [sp, #68]	; 0x44
   127e4:	str	r2, [sp, #72]	; 0x48
   127e8:	str	r2, [sp, #84]	; 0x54
   127ec:	str	r0, [sp, #80]	; 0x50
   127f0:	ldr	r3, [sp, #176]	; 0xb0
   127f4:	cmp	r3, #10
   127f8:	ldrls	pc, [pc, r3, lsl #2]
   127fc:	b	139d4 <__assert_fail@plt+0x2aa4>
   12800:	andeq	r2, r1, ip, lsr #16
   12804:	andeq	r2, r1, ip, asr #22
   12808:	andeq	r2, r1, r4, lsr #25
   1280c:	andeq	r2, r1, r0, lsl #23
   12810:	strdeq	r2, [r1], -r8
   12814:	ldrdeq	r2, [r1], -r8
   12818:	andeq	r2, r1, r0, lsr #23
   1281c:	andeq	r2, r1, r4, asr #23
   12820:	andeq	r2, r1, ip, ror #23
   12824:	andeq	r2, r1, ip, ror #23
   12828:	andeq	r2, r1, ip, ror #23
   1282c:	mov	r3, #0
   12830:	ldr	r1, [sp, #56]	; 0x38
   12834:	ldr	r2, [sp, #176]	; 0xb0
   12838:	ldr	lr, [sp, #176]	; 0xb0
   1283c:	mov	r8, r3
   12840:	mov	ip, r3
   12844:	str	r3, [sp, #40]	; 0x28
   12848:	mov	r3, r1
   1284c:	cmp	r2, #2
   12850:	moveq	r3, #0
   12854:	andne	r3, r3, #1
   12858:	mov	r0, r3
   1285c:	str	r3, [sp, #92]	; 0x5c
   12860:	ldr	r3, [sp, #68]	; 0x44
   12864:	sub	lr, lr, #2
   12868:	adds	r2, r3, #0
   1286c:	movne	r2, #1
   12870:	and	r3, r1, ip
   12874:	and	r3, r2, r3
   12878:	clz	lr, lr
   1287c:	str	r3, [sp, #88]	; 0x58
   12880:	lsr	lr, lr, #5
   12884:	mov	r3, ip
   12888:	and	r3, r3, lr
   1288c:	mov	sl, #0
   12890:	and	r0, r2, r0
   12894:	str	r3, [sp, #64]	; 0x40
   12898:	eor	r3, r1, #1
   1289c:	str	lr, [sp, #52]	; 0x34
   128a0:	str	r0, [sp, #48]	; 0x30
   128a4:	str	r3, [sp, #60]	; 0x3c
   128a8:	ldr	r3, [sp, #24]
   128ac:	cmn	r3, #1
   128b0:	beq	12de0 <__assert_fail@plt+0x1eb0>
   128b4:	subs	r7, r3, sl
   128b8:	movne	r7, #1
   128bc:	cmp	r7, #0
   128c0:	beq	12df8 <__assert_fail@plt+0x1ec8>
   128c4:	ldr	r3, [sp, #48]	; 0x30
   128c8:	cmp	r3, #0
   128cc:	beq	13164 <__assert_fail@plt+0x2234>
   128d0:	ldr	r2, [sp, #68]	; 0x44
   128d4:	ldr	r1, [sp, #24]
   128d8:	cmp	r2, #1
   128dc:	mov	r3, r2
   128e0:	movls	r3, #0
   128e4:	movhi	r3, #1
   128e8:	cmn	r1, #1
   128ec:	movne	r3, #0
   128f0:	cmp	r3, #0
   128f4:	add	r4, sl, r2
   128f8:	beq	12908 <__assert_fail@plt+0x19d8>
   128fc:	ldr	r0, [sp, #44]	; 0x2c
   12900:	bl	10e34 <strlen@plt>
   12904:	str	r0, [sp, #24]
   12908:	ldr	r3, [sp, #24]
   1290c:	cmp	r3, r4
   12910:	ldr	r3, [sp, #44]	; 0x2c
   12914:	add	r5, r3, sl
   12918:	bcc	1316c <__assert_fail@plt+0x223c>
   1291c:	mov	r0, r5
   12920:	ldr	r2, [sp, #68]	; 0x44
   12924:	ldr	r1, [sp, #72]	; 0x48
   12928:	bl	10d50 <memcmp@plt>
   1292c:	cmp	r0, #0
   12930:	bne	1316c <__assert_fail@plt+0x223c>
   12934:	ldr	r3, [sp, #40]	; 0x28
   12938:	cmp	r3, #0
   1293c:	bne	13b28 <__assert_fail@plt+0x2bf8>
   12940:	ldrb	r4, [r5]
   12944:	cmp	r4, #126	; 0x7e
   12948:	ldrls	pc, [pc, r4, lsl #2]
   1294c:	b	13a64 <__assert_fail@plt+0x2b34>
   12950:	andeq	r3, r1, r4, lsr #32
   12954:	andeq	r3, r1, r4, ror #20
   12958:	andeq	r3, r1, r4, ror #20
   1295c:	andeq	r3, r1, r4, ror #20
   12960:	andeq	r3, r1, r4, ror #20
   12964:	andeq	r3, r1, r4, ror #20
   12968:	andeq	r3, r1, r4, ror #20
   1296c:	andeq	r3, r1, r0, lsl r0
   12970:	strdeq	r2, [r1], -ip
   12974:	ldrdeq	r2, [r1], -r8
   12978:			; <UNDEFINED> instruction: 0x00012fb8
   1297c:	andeq	r2, r1, r8, ror #31
   12980:	andeq	r2, r1, r0, lsr #30
   12984:	andeq	r3, r1, r4, asr r1
   12988:	andeq	r3, r1, r4, ror #20
   1298c:	andeq	r3, r1, r4, ror #20
   12990:	andeq	r3, r1, r4, ror #20
   12994:	andeq	r3, r1, r4, ror #20
   12998:	andeq	r3, r1, r4, ror #20
   1299c:	andeq	r3, r1, r4, ror #20
   129a0:	andeq	r3, r1, r4, ror #20
   129a4:	andeq	r3, r1, r4, ror #20
   129a8:	andeq	r3, r1, r4, ror #20
   129ac:	andeq	r3, r1, r4, ror #20
   129b0:	andeq	r3, r1, r4, ror #20
   129b4:	andeq	r3, r1, r4, ror #20
   129b8:	andeq	r3, r1, r4, ror #20
   129bc:	andeq	r3, r1, r4, ror #20
   129c0:	andeq	r3, r1, r4, ror #20
   129c4:	andeq	r3, r1, r4, ror #20
   129c8:	andeq	r3, r1, r4, ror #20
   129cc:	andeq	r3, r1, r4, ror #20
   129d0:	andeq	r3, r1, r4, asr #2
   129d4:	andeq	r3, r1, r4, lsr #2
   129d8:	andeq	r3, r1, r4, lsr #2
   129dc:	andeq	r3, r1, r4, lsl #2
   129e0:	andeq	r3, r1, r4, lsr #2
   129e4:	andeq	r2, r1, r0, lsl pc
   129e8:	andeq	r3, r1, r4, lsr #2
   129ec:	andeq	r2, r1, ip, ror #29
   129f0:	andeq	r3, r1, r4, lsr #2
   129f4:	andeq	r3, r1, r4, lsr #2
   129f8:	andeq	r3, r1, r4, lsr #2
   129fc:	andeq	r2, r1, r0, lsl pc
   12a00:	andeq	r2, r1, r0, lsl pc
   12a04:	andeq	r2, r1, r0, lsl pc
   12a08:	andeq	r2, r1, r0, lsl pc
   12a0c:	andeq	r2, r1, r0, lsl pc
   12a10:	andeq	r2, r1, r0, lsl pc
   12a14:	andeq	r2, r1, r0, lsl pc
   12a18:	andeq	r2, r1, r0, lsl pc
   12a1c:	andeq	r2, r1, r0, lsl pc
   12a20:	andeq	r2, r1, r0, lsl pc
   12a24:	andeq	r2, r1, r0, lsl pc
   12a28:	andeq	r2, r1, r0, lsl pc
   12a2c:	andeq	r2, r1, r0, lsl pc
   12a30:	andeq	r2, r1, r0, lsl pc
   12a34:	andeq	r2, r1, r0, lsl pc
   12a38:	andeq	r2, r1, r0, lsl pc
   12a3c:	andeq	r3, r1, r4, lsr #2
   12a40:	andeq	r3, r1, r4, lsr #2
   12a44:	andeq	r3, r1, r4, lsr #2
   12a48:	andeq	r3, r1, r4, lsr #2
   12a4c:	muleq	r1, ip, lr
   12a50:	andeq	r3, r1, r4, ror #20
   12a54:	andeq	r2, r1, r0, lsl pc
   12a58:	andeq	r2, r1, r0, lsl pc
   12a5c:	andeq	r2, r1, r0, lsl pc
   12a60:	andeq	r2, r1, r0, lsl pc
   12a64:	andeq	r2, r1, r0, lsl pc
   12a68:	andeq	r2, r1, r0, lsl pc
   12a6c:	andeq	r2, r1, r0, lsl pc
   12a70:	andeq	r2, r1, r0, lsl pc
   12a74:	andeq	r2, r1, r0, lsl pc
   12a78:	andeq	r2, r1, r0, lsl pc
   12a7c:	andeq	r2, r1, r0, lsl pc
   12a80:	andeq	r2, r1, r0, lsl pc
   12a84:	andeq	r2, r1, r0, lsl pc
   12a88:	andeq	r2, r1, r0, lsl pc
   12a8c:	andeq	r2, r1, r0, lsl pc
   12a90:	andeq	r2, r1, r0, lsl pc
   12a94:	andeq	r2, r1, r0, lsl pc
   12a98:	andeq	r2, r1, r0, lsl pc
   12a9c:	andeq	r2, r1, r0, lsl pc
   12aa0:	andeq	r2, r1, r0, lsl pc
   12aa4:	andeq	r2, r1, r0, lsl pc
   12aa8:	andeq	r2, r1, r0, lsl pc
   12aac:	andeq	r2, r1, r0, lsl pc
   12ab0:	andeq	r2, r1, r0, lsl pc
   12ab4:	andeq	r2, r1, r0, lsl pc
   12ab8:	andeq	r2, r1, r0, lsl pc
   12abc:	andeq	r3, r1, r4, lsr #2
   12ac0:	andeq	r2, r1, r8, ror #28
   12ac4:	andeq	r2, r1, r0, lsl pc
   12ac8:	andeq	r3, r1, r4, lsr #2
   12acc:	andeq	r2, r1, r0, lsl pc
   12ad0:	andeq	r3, r1, r4, lsr #2
   12ad4:	andeq	r2, r1, r0, lsl pc
   12ad8:	andeq	r2, r1, r0, lsl pc
   12adc:	andeq	r2, r1, r0, lsl pc
   12ae0:	andeq	r2, r1, r0, lsl pc
   12ae4:	andeq	r2, r1, r0, lsl pc
   12ae8:	andeq	r2, r1, r0, lsl pc
   12aec:	andeq	r2, r1, r0, lsl pc
   12af0:	andeq	r2, r1, r0, lsl pc
   12af4:	andeq	r2, r1, r0, lsl pc
   12af8:	andeq	r2, r1, r0, lsl pc
   12afc:	andeq	r2, r1, r0, lsl pc
   12b00:	andeq	r2, r1, r0, lsl pc
   12b04:	andeq	r2, r1, r0, lsl pc
   12b08:	andeq	r2, r1, r0, lsl pc
   12b0c:	andeq	r2, r1, r0, lsl pc
   12b10:	andeq	r2, r1, r0, lsl pc
   12b14:	andeq	r2, r1, r0, lsl pc
   12b18:	andeq	r2, r1, r0, lsl pc
   12b1c:	andeq	r2, r1, r0, lsl pc
   12b20:	andeq	r2, r1, r0, lsl pc
   12b24:	andeq	r2, r1, r0, lsl pc
   12b28:	andeq	r2, r1, r0, lsl pc
   12b2c:	andeq	r2, r1, r0, lsl pc
   12b30:	andeq	r2, r1, r0, lsl pc
   12b34:	andeq	r2, r1, r0, lsl pc
   12b38:	andeq	r2, r1, r0, lsl pc
   12b3c:	andeq	r2, r1, r0, lsr #26
   12b40:	andeq	r3, r1, r4, lsr #2
   12b44:	andeq	r2, r1, r0, lsr #26
   12b48:	andeq	r3, r1, r4, lsl #2
   12b4c:	mov	r3, #1
   12b50:	str	r3, [sp, #40]	; 0x28
   12b54:	str	r3, [sp, #68]	; 0x44
   12b58:	mov	r8, #0
   12b5c:	ldr	r3, [pc, #4056]	; 13b3c <__assert_fail@plt+0x2c0c>
   12b60:	str	r3, [sp, #72]	; 0x48
   12b64:	mov	r3, #2
   12b68:	str	r3, [sp, #176]	; 0xb0
   12b6c:	ldr	r1, [sp, #56]	; 0x38
   12b70:	mov	r2, r3
   12b74:	ldr	ip, [sp, #40]	; 0x28
   12b78:	mov	lr, r3
   12b7c:	b	12848 <__assert_fail@plt+0x1918>
   12b80:	mov	r3, #1
   12b84:	str	r3, [sp, #56]	; 0x38
   12b88:	str	r3, [sp, #68]	; 0x44
   12b8c:	str	r3, [sp, #40]	; 0x28
   12b90:	ldr	r3, [pc, #4004]	; 13b3c <__assert_fail@plt+0x2c0c>
   12b94:	mov	r8, #0
   12b98:	str	r3, [sp, #72]	; 0x48
   12b9c:	b	12b64 <__assert_fail@plt+0x1c34>
   12ba0:	mov	r3, #1
   12ba4:	str	r3, [sp, #56]	; 0x38
   12ba8:	str	r3, [sp, #68]	; 0x44
   12bac:	str	r3, [sp, #40]	; 0x28
   12bb0:	ldr	r3, [pc, #3976]	; 13b40 <__assert_fail@plt+0x2c10>
   12bb4:	mov	r8, #0
   12bb8:	str	r3, [sp, #72]	; 0x48
   12bbc:	mov	r3, #5
   12bc0:	b	12b68 <__assert_fail@plt+0x1c38>
   12bc4:	mov	r3, #0
   12bc8:	str	r3, [sp, #40]	; 0x28
   12bcc:	mov	r3, #1
   12bd0:	str	r3, [sp, #56]	; 0x38
   12bd4:	mov	r8, #0
   12bd8:	mov	r1, r3
   12bdc:	ldr	r2, [sp, #176]	; 0xb0
   12be0:	ldr	ip, [sp, #40]	; 0x28
   12be4:	ldr	lr, [sp, #176]	; 0xb0
   12be8:	b	12848 <__assert_fail@plt+0x1918>
   12bec:	ldr	r3, [sp, #176]	; 0xb0
   12bf0:	cmp	r3, #10
   12bf4:	beq	12c38 <__assert_fail@plt+0x1d08>
   12bf8:	mov	r2, #5
   12bfc:	ldr	r1, [pc, #3904]	; 13b44 <__assert_fail@plt+0x2c14>
   12c00:	mov	r0, #0
   12c04:	bl	10d68 <dcgettext@plt>
   12c08:	ldr	r2, [pc, #3892]	; 13b44 <__assert_fail@plt+0x2c14>
   12c0c:	cmp	r0, r2
   12c10:	str	r0, [sp, #188]	; 0xbc
   12c14:	beq	13cd0 <__assert_fail@plt+0x2da0>
   12c18:	mov	r2, #5
   12c1c:	ldr	r1, [pc, #3864]	; 13b3c <__assert_fail@plt+0x2c0c>
   12c20:	mov	r0, #0
   12c24:	bl	10d68 <dcgettext@plt>
   12c28:	ldr	r2, [pc, #3852]	; 13b3c <__assert_fail@plt+0x2c0c>
   12c2c:	cmp	r0, r2
   12c30:	str	r0, [sp, #192]	; 0xc0
   12c34:	beq	13cc0 <__assert_fail@plt+0x2d90>
   12c38:	ldr	r8, [sp, #40]	; 0x28
   12c3c:	cmp	r8, #0
   12c40:	movne	r8, #0
   12c44:	bne	12c74 <__assert_fail@plt+0x1d44>
   12c48:	ldr	r3, [sp, #188]	; 0xbc
   12c4c:	ldrb	r3, [r3]
   12c50:	cmp	r3, #0
   12c54:	beq	12c74 <__assert_fail@plt+0x1d44>
   12c58:	ldr	r2, [sp, #188]	; 0xbc
   12c5c:	cmp	fp, r8
   12c60:	strbhi	r3, [r9, r8]
   12c64:	ldrb	r3, [r2, #1]!
   12c68:	add	r8, r8, #1
   12c6c:	cmp	r3, #0
   12c70:	bne	12c5c <__assert_fail@plt+0x1d2c>
   12c74:	ldr	r0, [sp, #192]	; 0xc0
   12c78:	bl	10e34 <strlen@plt>
   12c7c:	ldr	r3, [sp, #192]	; 0xc0
   12c80:	ldr	r2, [sp, #176]	; 0xb0
   12c84:	str	r3, [sp, #72]	; 0x48
   12c88:	mov	r3, #1
   12c8c:	str	r3, [sp, #56]	; 0x38
   12c90:	mov	r1, r3
   12c94:	ldr	ip, [sp, #40]	; 0x28
   12c98:	ldr	lr, [sp, #176]	; 0xb0
   12c9c:	str	r0, [sp, #68]	; 0x44
   12ca0:	b	12848 <__assert_fail@plt+0x1918>
   12ca4:	ldr	r3, [sp, #40]	; 0x28
   12ca8:	cmp	r3, #0
   12cac:	beq	13954 <__assert_fail@plt+0x2a24>
   12cb0:	mov	r3, #1
   12cb4:	str	r3, [sp, #68]	; 0x44
   12cb8:	ldr	r3, [pc, #3708]	; 13b3c <__assert_fail@plt+0x2c0c>
   12cbc:	str	r3, [sp, #72]	; 0x48
   12cc0:	mov	r8, #0
   12cc4:	ldr	r1, [sp, #56]	; 0x38
   12cc8:	ldr	r2, [sp, #176]	; 0xb0
   12ccc:	ldr	ip, [sp, #40]	; 0x28
   12cd0:	ldr	lr, [sp, #176]	; 0xb0
   12cd4:	b	12848 <__assert_fail@plt+0x1918>
   12cd8:	ldr	r3, [sp, #40]	; 0x28
   12cdc:	cmp	r3, #0
   12ce0:	beq	139d8 <__assert_fail@plt+0x2aa8>
   12ce4:	str	r3, [sp, #56]	; 0x38
   12ce8:	mov	r3, #1
   12cec:	str	r3, [sp, #68]	; 0x44
   12cf0:	ldr	r3, [pc, #3656]	; 13b40 <__assert_fail@plt+0x2c10>
   12cf4:	b	12cbc <__assert_fail@plt+0x1d8c>
   12cf8:	ldr	r3, [sp, #40]	; 0x28
   12cfc:	cmp	r3, #0
   12d00:	mov	r3, #1
   12d04:	streq	r3, [sp, #56]	; 0x38
   12d08:	beq	13954 <__assert_fail@plt+0x2a24>
   12d0c:	str	r3, [sp, #68]	; 0x44
   12d10:	ldr	r3, [pc, #3620]	; 13b3c <__assert_fail@plt+0x2c0c>
   12d14:	mov	r8, #0
   12d18:	str	r3, [sp, #72]	; 0x48
   12d1c:	b	12b64 <__assert_fail@plt+0x1c34>
   12d20:	ldr	r3, [sp, #24]
   12d24:	ldr	r6, [sp, #48]	; 0x30
   12d28:	cmn	r3, #1
   12d2c:	beq	13388 <__assert_fail@plt+0x2458>
   12d30:	subs	r3, r3, #1
   12d34:	movne	r3, #1
   12d38:	cmp	r3, #0
   12d3c:	beq	13108 <__assert_fail@plt+0x21d8>
   12d40:	ldr	r1, [sp, #52]	; 0x34
   12d44:	mov	r7, r3
   12d48:	mov	r3, #0
   12d4c:	str	r3, [sp, #32]
   12d50:	ldr	r3, [sp, #60]	; 0x3c
   12d54:	orr	r2, r1, r3
   12d58:	ldr	r3, [sp, #40]	; 0x28
   12d5c:	eor	r2, r2, #1
   12d60:	orr	r2, r3, r2
   12d64:	tst	r2, #255	; 0xff
   12d68:	bne	1368c <__assert_fail@plt+0x275c>
   12d6c:	cmp	r6, #0
   12d70:	bne	12f4c <__assert_fail@plt+0x201c>
   12d74:	ldr	r3, [sp, #36]	; 0x24
   12d78:	add	sl, sl, #1
   12d7c:	and	r3, r3, r7
   12d80:	uxtb	r6, r3
   12d84:	cmp	r6, #0
   12d88:	beq	12db4 <__assert_fail@plt+0x1e84>
   12d8c:	cmp	fp, r8
   12d90:	movhi	r3, #39	; 0x27
   12d94:	strbhi	r3, [r9, r8]
   12d98:	add	r3, r8, #1
   12d9c:	cmp	fp, r3
   12da0:	movhi	r2, #39	; 0x27
   12da4:	add	r8, r8, #2
   12da8:	strbhi	r2, [r9, r3]
   12dac:	mov	r3, #0
   12db0:	str	r3, [sp, #36]	; 0x24
   12db4:	ldr	r2, [sp, #32]
   12db8:	cmp	r8, fp
   12dbc:	ldr	r3, [sp, #28]
   12dc0:	strbcc	r4, [r9, r8]
   12dc4:	cmp	r2, #0
   12dc8:	moveq	r3, #0
   12dcc:	str	r3, [sp, #28]
   12dd0:	ldr	r3, [sp, #24]
   12dd4:	add	r8, r8, #1
   12dd8:	cmn	r3, #1
   12ddc:	bne	128b4 <__assert_fail@plt+0x1984>
   12de0:	ldr	r3, [sp, #44]	; 0x2c
   12de4:	ldrb	r3, [r3, sl]
   12de8:	adds	r7, r3, #0
   12dec:	movne	r7, #1
   12df0:	cmp	r7, #0
   12df4:	bne	128c4 <__assert_fail@plt+0x1994>
   12df8:	ldr	r3, [sp, #64]	; 0x40
   12dfc:	cmp	r8, #0
   12e00:	movne	r3, #0
   12e04:	andeq	r3, r3, #1
   12e08:	cmp	r3, #0
   12e0c:	str	r3, [sp, #64]	; 0x40
   12e10:	bne	138b4 <__assert_fail@plt+0x2984>
   12e14:	ldr	r3, [sp, #40]	; 0x28
   12e18:	ldr	r2, [sp, #52]	; 0x34
   12e1c:	eor	r3, r3, #1
   12e20:	ands	r2, r2, r3
   12e24:	beq	13ce0 <__assert_fail@plt+0x2db0>
   12e28:	ldr	r3, [sp, #76]	; 0x4c
   12e2c:	cmp	r3, #0
   12e30:	beq	13cb0 <__assert_fail@plt+0x2d80>
   12e34:	ldr	r3, [sp, #28]
   12e38:	cmp	r3, #0
   12e3c:	bne	13c6c <__assert_fail@plt+0x2d3c>
   12e40:	ldr	r2, [sp, #84]	; 0x54
   12e44:	clz	r3, fp
   12e48:	cmp	r2, #0
   12e4c:	lsr	r3, r3, #5
   12e50:	moveq	r3, #0
   12e54:	cmp	r3, #0
   12e58:	beq	13c0c <__assert_fail@plt+0x2cdc>
   12e5c:	mov	fp, r2
   12e60:	str	r3, [sp, #76]	; 0x4c
   12e64:	b	127f0 <__assert_fail@plt+0x18c0>
   12e68:	ldr	r3, [sp, #176]	; 0xb0
   12e6c:	ldr	r6, [sp, #48]	; 0x30
   12e70:	cmp	r3, #2
   12e74:	beq	133ac <__assert_fail@plt+0x247c>
   12e78:	ldr	r3, [sp, #88]	; 0x58
   12e7c:	cmp	r3, #0
   12e80:	beq	13930 <__assert_fail@plt+0x2a00>
   12e84:	mov	r3, #0
   12e88:	add	sl, sl, #1
   12e8c:	ldr	r6, [sp, #36]	; 0x24
   12e90:	str	r3, [sp, #32]
   12e94:	mov	r4, #92	; 0x5c
   12e98:	b	12d84 <__assert_fail@plt+0x1e54>
   12e9c:	ldr	r3, [sp, #176]	; 0xb0
   12ea0:	ldr	r6, [sp, #48]	; 0x30
   12ea4:	cmp	r3, #2
   12ea8:	beq	133dc <__assert_fail@plt+0x24ac>
   12eac:	cmp	r3, #5
   12eb0:	bne	13940 <__assert_fail@plt+0x2a10>
   12eb4:	ldr	r3, [sp, #100]	; 0x64
   12eb8:	cmp	r3, #0
   12ebc:	beq	139a4 <__assert_fail@plt+0x2a74>
   12ec0:	ldr	r2, [sp, #24]
   12ec4:	add	r3, sl, #2
   12ec8:	cmp	r2, r3
   12ecc:	bls	12edc <__assert_fail@plt+0x1fac>
   12ed0:	ldrb	r4, [r5, #1]
   12ed4:	cmp	r4, #63	; 0x3f
   12ed8:	beq	13b4c <__assert_fail@plt+0x2c1c>
   12edc:	mov	r1, #0
   12ee0:	str	r1, [sp, #32]
   12ee4:	mov	r4, #63	; 0x3f
   12ee8:	b	12d50 <__assert_fail@plt+0x1e20>
   12eec:	ldr	r3, [sp, #176]	; 0xb0
   12ef0:	ldr	r6, [sp, #48]	; 0x30
   12ef4:	cmp	r3, #2
   12ef8:	beq	13408 <__assert_fail@plt+0x24d8>
   12efc:	str	r7, [sp, #32]
   12f00:	str	r7, [sp, #76]	; 0x4c
   12f04:	mov	r1, #0
   12f08:	mov	r4, #39	; 0x27
   12f0c:	b	12d50 <__assert_fail@plt+0x1e20>
   12f10:	ldr	r6, [sp, #48]	; 0x30
   12f14:	ldr	r1, [sp, #52]	; 0x34
   12f18:	str	r7, [sp, #32]
   12f1c:	b	12d50 <__assert_fail@plt+0x1e20>
   12f20:	ldr	r6, [sp, #48]	; 0x30
   12f24:	ldr	r1, [sp, #52]	; 0x34
   12f28:	mov	r4, #12
   12f2c:	mov	r3, #102	; 0x66
   12f30:	ldr	r2, [sp, #56]	; 0x38
   12f34:	cmp	r2, #0
   12f38:	streq	r2, [sp, #32]
   12f3c:	beq	12d50 <__assert_fail@plt+0x1e20>
   12f40:	mov	r4, r3
   12f44:	mov	r3, #0
   12f48:	str	r3, [sp, #32]
   12f4c:	ldr	r3, [sp, #40]	; 0x28
   12f50:	cmp	r3, #0
   12f54:	bne	136c4 <__assert_fail@plt+0x2794>
   12f58:	ldr	r3, [sp, #36]	; 0x24
   12f5c:	eor	r3, r3, #1
   12f60:	and	r3, r3, r1
   12f64:	ands	r3, r3, #255	; 0xff
   12f68:	beq	12fa0 <__assert_fail@plt+0x2070>
   12f6c:	cmp	fp, r8
   12f70:	movhi	r2, #39	; 0x27
   12f74:	strbhi	r2, [r9, r8]
   12f78:	add	r2, r8, #1
   12f7c:	cmp	fp, r2
   12f80:	movhi	r1, #36	; 0x24
   12f84:	strbhi	r1, [r9, r2]
   12f88:	add	r2, r8, #2
   12f8c:	cmp	fp, r2
   12f90:	add	r8, r8, #3
   12f94:	movhi	r1, #39	; 0x27
   12f98:	strbhi	r1, [r9, r2]
   12f9c:	str	r3, [sp, #36]	; 0x24
   12fa0:	cmp	fp, r8
   12fa4:	movhi	r3, #92	; 0x5c
   12fa8:	strbhi	r3, [r9, r8]
   12fac:	add	sl, sl, #1
   12fb0:	add	r8, r8, #1
   12fb4:	b	12db4 <__assert_fail@plt+0x1e84>
   12fb8:	ldr	r6, [sp, #48]	; 0x30
   12fbc:	mov	r4, #10
   12fc0:	mov	r3, #110	; 0x6e
   12fc4:	ldr	r2, [sp, #64]	; 0x40
   12fc8:	cmp	r2, #0
   12fcc:	bne	13a4c <__assert_fail@plt+0x2b1c>
   12fd0:	ldr	r1, [sp, #52]	; 0x34
   12fd4:	b	12f30 <__assert_fail@plt+0x2000>
   12fd8:	ldr	r6, [sp, #48]	; 0x30
   12fdc:	ldr	r1, [sp, #52]	; 0x34
   12fe0:	mov	r3, #116	; 0x74
   12fe4:	b	12f30 <__assert_fail@plt+0x2000>
   12fe8:	ldr	r6, [sp, #48]	; 0x30
   12fec:	ldr	r1, [sp, #52]	; 0x34
   12ff0:	mov	r4, #11
   12ff4:	mov	r3, #118	; 0x76
   12ff8:	b	12f30 <__assert_fail@plt+0x2000>
   12ffc:	ldr	r6, [sp, #48]	; 0x30
   13000:	ldr	r1, [sp, #52]	; 0x34
   13004:	mov	r4, #8
   13008:	mov	r3, #98	; 0x62
   1300c:	b	12f30 <__assert_fail@plt+0x2000>
   13010:	ldr	r6, [sp, #48]	; 0x30
   13014:	ldr	r1, [sp, #52]	; 0x34
   13018:	mov	r4, #7
   1301c:	mov	r3, #97	; 0x61
   13020:	b	12f30 <__assert_fail@plt+0x2000>
   13024:	ldr	r3, [sp, #56]	; 0x38
   13028:	ldr	r6, [sp, #48]	; 0x30
   1302c:	cmp	r3, #0
   13030:	beq	134f4 <__assert_fail@plt+0x25c4>
   13034:	ldr	r3, [sp, #40]	; 0x28
   13038:	cmp	r3, #0
   1303c:	bne	13b28 <__assert_fail@plt+0x2bf8>
   13040:	ldr	r3, [sp, #36]	; 0x24
   13044:	ldr	r2, [sp, #52]	; 0x34
   13048:	eor	r3, r3, #1
   1304c:	ands	r3, r2, r3
   13050:	moveq	r2, r8
   13054:	beq	1308c <__assert_fail@plt+0x215c>
   13058:	cmp	fp, r8
   1305c:	movhi	r2, #39	; 0x27
   13060:	strbhi	r2, [r9, r8]
   13064:	add	r2, r8, #1
   13068:	cmp	fp, r2
   1306c:	movhi	r1, #36	; 0x24
   13070:	strbhi	r1, [r9, r2]
   13074:	add	r2, r8, #2
   13078:	cmp	fp, r2
   1307c:	movhi	r1, #39	; 0x27
   13080:	strbhi	r1, [r9, r2]
   13084:	add	r2, r8, #3
   13088:	str	r3, [sp, #36]	; 0x24
   1308c:	cmp	fp, r2
   13090:	movhi	r3, #92	; 0x5c
   13094:	strbhi	r3, [r9, r2]
   13098:	ldr	r3, [sp, #92]	; 0x5c
   1309c:	add	r8, r2, #1
   130a0:	cmp	r3, #0
   130a4:	beq	13a28 <__assert_fail@plt+0x2af8>
   130a8:	ldr	r1, [sp, #24]
   130ac:	add	r3, sl, #1
   130b0:	cmp	r1, r3
   130b4:	bls	130ec <__assert_fail@plt+0x21bc>
   130b8:	ldr	r1, [sp, #44]	; 0x2c
   130bc:	ldrb	r3, [r1, r3]
   130c0:	sub	r3, r3, #48	; 0x30
   130c4:	cmp	r3, #9
   130c8:	bhi	130ec <__assert_fail@plt+0x21bc>
   130cc:	cmp	fp, r8
   130d0:	movhi	r3, #48	; 0x30
   130d4:	strbhi	r3, [r9, r8]
   130d8:	add	r3, r2, #2
   130dc:	cmp	fp, r3
   130e0:	add	r8, r2, #3
   130e4:	movhi	r1, #48	; 0x30
   130e8:	strbhi	r1, [r9, r3]
   130ec:	ldr	r3, [sp, #40]	; 0x28
   130f0:	ldr	r1, [sp, #52]	; 0x34
   130f4:	mov	r7, r3
   130f8:	str	r3, [sp, #32]
   130fc:	mov	r4, #48	; 0x30
   13100:	b	12d50 <__assert_fail@plt+0x1e20>
   13104:	ldr	r6, [sp, #48]	; 0x30
   13108:	cmp	sl, #0
   1310c:	streq	r7, [sp, #32]
   13110:	beq	13130 <__assert_fail@plt+0x2200>
   13114:	mov	r3, #0
   13118:	ldr	r1, [sp, #52]	; 0x34
   1311c:	str	r3, [sp, #32]
   13120:	b	12d50 <__assert_fail@plt+0x1e20>
   13124:	ldr	r6, [sp, #48]	; 0x30
   13128:	mov	r3, #0
   1312c:	str	r3, [sp, #32]
   13130:	ldr	r3, [sp, #64]	; 0x40
   13134:	cmp	r3, #0
   13138:	bne	138b4 <__assert_fail@plt+0x2984>
   1313c:	ldr	r1, [sp, #52]	; 0x34
   13140:	b	12d50 <__assert_fail@plt+0x1e20>
   13144:	ldr	r3, [sp, #48]	; 0x30
   13148:	mov	r6, r3
   1314c:	str	r3, [sp, #32]
   13150:	b	13130 <__assert_fail@plt+0x2200>
   13154:	ldr	r6, [sp, #48]	; 0x30
   13158:	mov	r4, #13
   1315c:	mov	r3, #114	; 0x72
   13160:	b	12fc4 <__assert_fail@plt+0x2094>
   13164:	ldr	r3, [sp, #44]	; 0x2c
   13168:	add	r5, r3, sl
   1316c:	ldrb	r4, [r5]
   13170:	cmp	r4, #126	; 0x7e
   13174:	ldrls	pc, [pc, r4, lsl #2]
   13178:	b	13514 <__assert_fail@plt+0x25e4>
   1317c:	andeq	r3, r1, r4, ror #9
   13180:	andeq	r3, r1, r4, lsl r5
   13184:	andeq	r3, r1, r4, lsl r5
   13188:	andeq	r3, r1, r4, lsl r5
   1318c:	andeq	r3, r1, r4, lsl r5
   13190:	andeq	r3, r1, r4, lsl r5
   13194:	andeq	r3, r1, r4, lsl r5
   13198:	ldrdeq	r3, [r1], -ip
   1319c:	ldrdeq	r3, [r1], -r4
   131a0:	andeq	r3, r1, r8, asr #9
   131a4:	andeq	r3, r1, r0, asr #9
   131a8:			; <UNDEFINED> instruction: 0x000134b8
   131ac:			; <UNDEFINED> instruction: 0x000134b0
   131b0:	andeq	r3, r1, r8, lsr #9
   131b4:	andeq	r3, r1, r4, lsl r5
   131b8:	andeq	r3, r1, r4, lsl r5
   131bc:	andeq	r3, r1, r4, lsl r5
   131c0:	andeq	r3, r1, r4, lsl r5
   131c4:	andeq	r3, r1, r4, lsl r5
   131c8:	andeq	r3, r1, r4, lsl r5
   131cc:	andeq	r3, r1, r4, lsl r5
   131d0:	andeq	r3, r1, r4, lsl r5
   131d4:	andeq	r3, r1, r4, lsl r5
   131d8:	andeq	r3, r1, r4, lsl r5
   131dc:	andeq	r3, r1, r4, lsl r5
   131e0:	andeq	r3, r1, r4, lsl r5
   131e4:	andeq	r3, r1, r4, lsl r5
   131e8:	andeq	r3, r1, r4, lsl r5
   131ec:	andeq	r3, r1, r4, lsl r5
   131f0:	andeq	r3, r1, r4, lsl r5
   131f4:	andeq	r3, r1, r4, lsl r5
   131f8:	andeq	r3, r1, r4, lsl r5
   131fc:	muleq	r1, ip, r4
   13200:	muleq	r1, r4, r4
   13204:	muleq	r1, r4, r4
   13208:	andeq	r3, r1, ip, lsl #9
   1320c:	muleq	r1, r4, r4
   13210:	andeq	r3, r1, r4, lsl #9
   13214:	muleq	r1, r4, r4
   13218:	strdeq	r3, [r1], -r8
   1321c:	muleq	r1, r4, r4
   13220:	muleq	r1, r4, r4
   13224:	muleq	r1, r4, r4
   13228:	andeq	r3, r1, r4, lsl #9
   1322c:	andeq	r3, r1, r4, lsl #9
   13230:	andeq	r3, r1, r4, lsl #9
   13234:	andeq	r3, r1, r4, lsl #9
   13238:	andeq	r3, r1, r4, lsl #9
   1323c:	andeq	r3, r1, r4, lsl #9
   13240:	andeq	r3, r1, r4, lsl #9
   13244:	andeq	r3, r1, r4, lsl #9
   13248:	andeq	r3, r1, r4, lsl #9
   1324c:	andeq	r3, r1, r4, lsl #9
   13250:	andeq	r3, r1, r4, lsl #9
   13254:	andeq	r3, r1, r4, lsl #9
   13258:	andeq	r3, r1, r4, lsl #9
   1325c:	andeq	r3, r1, r4, lsl #9
   13260:	andeq	r3, r1, r4, lsl #9
   13264:	andeq	r3, r1, r4, lsl #9
   13268:	muleq	r1, r4, r4
   1326c:	muleq	r1, r4, r4
   13270:	muleq	r1, r4, r4
   13274:	muleq	r1, r4, r4
   13278:	andeq	r3, r1, ip, asr #7
   1327c:	andeq	r3, r1, r4, lsl r5
   13280:	andeq	r3, r1, r4, lsl #9
   13284:	andeq	r3, r1, r4, lsl #9
   13288:	andeq	r3, r1, r4, lsl #9
   1328c:	andeq	r3, r1, r4, lsl #9
   13290:	andeq	r3, r1, r4, lsl #9
   13294:	andeq	r3, r1, r4, lsl #9
   13298:	andeq	r3, r1, r4, lsl #9
   1329c:	andeq	r3, r1, r4, lsl #9
   132a0:	andeq	r3, r1, r4, lsl #9
   132a4:	andeq	r3, r1, r4, lsl #9
   132a8:	andeq	r3, r1, r4, lsl #9
   132ac:	andeq	r3, r1, r4, lsl #9
   132b0:	andeq	r3, r1, r4, lsl #9
   132b4:	andeq	r3, r1, r4, lsl #9
   132b8:	andeq	r3, r1, r4, lsl #9
   132bc:	andeq	r3, r1, r4, lsl #9
   132c0:	andeq	r3, r1, r4, lsl #9
   132c4:	andeq	r3, r1, r4, lsl #9
   132c8:	andeq	r3, r1, r4, lsl #9
   132cc:	andeq	r3, r1, r4, lsl #9
   132d0:	andeq	r3, r1, r4, lsl #9
   132d4:	andeq	r3, r1, r4, lsl #9
   132d8:	andeq	r3, r1, r4, lsl #9
   132dc:	andeq	r3, r1, r4, lsl #9
   132e0:	andeq	r3, r1, r4, lsl #9
   132e4:	andeq	r3, r1, r4, lsl #9
   132e8:	muleq	r1, r4, r4
   132ec:	muleq	r1, ip, r3
   132f0:	andeq	r3, r1, r4, lsl #9
   132f4:	muleq	r1, r4, r4
   132f8:	andeq	r3, r1, r4, lsl #9
   132fc:	muleq	r1, r4, r4
   13300:	andeq	r3, r1, r4, lsl #9
   13304:	andeq	r3, r1, r4, lsl #9
   13308:	andeq	r3, r1, r4, lsl #9
   1330c:	andeq	r3, r1, r4, lsl #9
   13310:	andeq	r3, r1, r4, lsl #9
   13314:	andeq	r3, r1, r4, lsl #9
   13318:	andeq	r3, r1, r4, lsl #9
   1331c:	andeq	r3, r1, r4, lsl #9
   13320:	andeq	r3, r1, r4, lsl #9
   13324:	andeq	r3, r1, r4, lsl #9
   13328:	andeq	r3, r1, r4, lsl #9
   1332c:	andeq	r3, r1, r4, lsl #9
   13330:	andeq	r3, r1, r4, lsl #9
   13334:	andeq	r3, r1, r4, lsl #9
   13338:	andeq	r3, r1, r4, lsl #9
   1333c:	andeq	r3, r1, r4, lsl #9
   13340:	andeq	r3, r1, r4, lsl #9
   13344:	andeq	r3, r1, r4, lsl #9
   13348:	andeq	r3, r1, r4, lsl #9
   1334c:	andeq	r3, r1, r4, lsl #9
   13350:	andeq	r3, r1, r4, lsl #9
   13354:	andeq	r3, r1, r4, lsl #9
   13358:	andeq	r3, r1, r4, lsl #9
   1335c:	andeq	r3, r1, r4, lsl #9
   13360:	andeq	r3, r1, r4, lsl #9
   13364:	andeq	r3, r1, r4, lsl #9
   13368:	andeq	r3, r1, r8, ror r3
   1336c:	muleq	r1, r4, r4
   13370:	andeq	r3, r1, r8, ror r3
   13374:	andeq	r3, r1, ip, lsl #9
   13378:	ldr	r3, [sp, #24]
   1337c:	mov	r6, #0
   13380:	cmn	r3, #1
   13384:	bne	12d30 <__assert_fail@plt+0x1e00>
   13388:	ldr	r3, [sp, #44]	; 0x2c
   1338c:	ldrb	r3, [r3, #1]
   13390:	adds	r3, r3, #0
   13394:	movne	r3, #1
   13398:	b	12d38 <__assert_fail@plt+0x1e08>
   1339c:	ldr	r3, [sp, #176]	; 0xb0
   133a0:	mov	r6, #0
   133a4:	cmp	r3, #2
   133a8:	bne	12e78 <__assert_fail@plt+0x1f48>
   133ac:	ldr	r3, [sp, #64]	; 0x40
   133b0:	cmp	r3, #0
   133b4:	bne	13bec <__assert_fail@plt+0x2cbc>
   133b8:	add	sl, sl, #1
   133bc:	ldr	r6, [sp, #36]	; 0x24
   133c0:	str	r3, [sp, #32]
   133c4:	mov	r4, #92	; 0x5c
   133c8:	b	12d84 <__assert_fail@plt+0x1e54>
   133cc:	ldr	r3, [sp, #176]	; 0xb0
   133d0:	mov	r6, #0
   133d4:	cmp	r3, #2
   133d8:	bne	12eac <__assert_fail@plt+0x1f7c>
   133dc:	ldr	r3, [sp, #40]	; 0x28
   133e0:	cmp	r3, #0
   133e4:	bne	136c8 <__assert_fail@plt+0x2798>
   133e8:	mov	r1, r7
   133ec:	str	r3, [sp, #32]
   133f0:	mov	r4, #63	; 0x3f
   133f4:	b	12d50 <__assert_fail@plt+0x1e20>
   133f8:	ldr	r3, [sp, #176]	; 0xb0
   133fc:	mov	r6, #0
   13400:	cmp	r3, #2
   13404:	bne	12efc <__assert_fail@plt+0x1fcc>
   13408:	ldr	r3, [sp, #64]	; 0x40
   1340c:	cmp	r3, #0
   13410:	bne	13bec <__assert_fail@plt+0x2cbc>
   13414:	ldr	r2, [sp, #84]	; 0x54
   13418:	adds	r3, fp, #0
   1341c:	movne	r3, #1
   13420:	cmp	r2, #0
   13424:	movne	r3, #0
   13428:	cmp	r3, #0
   1342c:	strne	fp, [sp, #84]	; 0x54
   13430:	movne	fp, #0
   13434:	bne	13464 <__assert_fail@plt+0x2534>
   13438:	cmp	fp, r8
   1343c:	movhi	r3, #39	; 0x27
   13440:	strbhi	r3, [r9, r8]
   13444:	add	r3, r8, #1
   13448:	cmp	fp, r3
   1344c:	movhi	r2, #92	; 0x5c
   13450:	strbhi	r2, [r9, r3]
   13454:	add	r3, r8, #2
   13458:	cmp	fp, r3
   1345c:	movhi	r2, #39	; 0x27
   13460:	strbhi	r2, [r9, r3]
   13464:	ldr	r3, [sp, #64]	; 0x40
   13468:	add	r8, r8, #3
   1346c:	mov	r1, r7
   13470:	str	r7, [sp, #32]
   13474:	str	r7, [sp, #76]	; 0x4c
   13478:	str	r3, [sp, #36]	; 0x24
   1347c:	mov	r4, #39	; 0x27
   13480:	b	12d50 <__assert_fail@plt+0x1e20>
   13484:	mov	r6, #0
   13488:	b	12f14 <__assert_fail@plt+0x1fe4>
   1348c:	mov	r6, #0
   13490:	b	13108 <__assert_fail@plt+0x21d8>
   13494:	mov	r6, #0
   13498:	b	13128 <__assert_fail@plt+0x21f8>
   1349c:	str	r7, [sp, #32]
   134a0:	mov	r6, #0
   134a4:	b	13130 <__assert_fail@plt+0x2200>
   134a8:	mov	r6, #0
   134ac:	b	13158 <__assert_fail@plt+0x2228>
   134b0:	mov	r6, #0
   134b4:	b	12f24 <__assert_fail@plt+0x1ff4>
   134b8:	mov	r6, #0
   134bc:	b	12fec <__assert_fail@plt+0x20bc>
   134c0:	mov	r6, #0
   134c4:	b	12fbc <__assert_fail@plt+0x208c>
   134c8:	mov	r6, #0
   134cc:	mov	r3, #116	; 0x74
   134d0:	b	12fc4 <__assert_fail@plt+0x2094>
   134d4:	mov	r6, #0
   134d8:	b	13000 <__assert_fail@plt+0x20d0>
   134dc:	mov	r6, #0
   134e0:	b	13014 <__assert_fail@plt+0x20e4>
   134e4:	ldr	r3, [sp, #56]	; 0x38
   134e8:	mov	r6, #0
   134ec:	cmp	r3, #0
   134f0:	bne	13034 <__assert_fail@plt+0x2104>
   134f4:	ldr	r3, [sp, #96]	; 0x60
   134f8:	cmp	r3, #0
   134fc:	addne	sl, sl, #1
   13500:	bne	128a8 <__assert_fail@plt+0x1978>
   13504:	ldr	r1, [sp, #52]	; 0x34
   13508:	str	r3, [sp, #32]
   1350c:	mov	r4, r3
   13510:	b	12d50 <__assert_fail@plt+0x1e20>
   13514:	mov	r6, #0
   13518:	ldr	r3, [sp, #80]	; 0x50
   1351c:	cmp	r3, #1
   13520:	bne	13710 <__assert_fail@plt+0x27e0>
   13524:	bl	10e1c <__ctype_b_loc@plt>
   13528:	ldr	r2, [sp, #80]	; 0x50
   1352c:	sxth	r3, r4
   13530:	mov	r1, r2
   13534:	lsl	r3, r3, #1
   13538:	ldr	r2, [r0]
   1353c:	ldrh	r3, [r2, r3]
   13540:	and	r3, r3, #16384	; 0x4000
   13544:	cmp	r3, #0
   13548:	movne	r3, #1
   1354c:	moveq	r3, #0
   13550:	str	r3, [sp, #32]
   13554:	moveq	r3, #1
   13558:	movne	r3, #0
   1355c:	ldr	r2, [sp, #56]	; 0x38
   13560:	and	r3, r3, r2
   13564:	ands	r3, r3, #255	; 0xff
   13568:	beq	1313c <__assert_fail@plt+0x220c>
   1356c:	add	r1, sl, r1
   13570:	mov	r0, #0
   13574:	ldr	r7, [sp, #40]	; 0x28
   13578:	ldr	r2, [sp, #36]	; 0x24
   1357c:	ldr	lr, [sp, #52]	; 0x34
   13580:	b	13630 <__assert_fail@plt+0x2700>
   13584:	cmp	r7, #0
   13588:	bne	13984 <__assert_fail@plt+0x2a54>
   1358c:	eor	r0, r2, #1
   13590:	ands	r0, lr, r0
   13594:	beq	135cc <__assert_fail@plt+0x269c>
   13598:	cmp	fp, r8
   1359c:	movhi	r2, #39	; 0x27
   135a0:	strbhi	r2, [r9, r8]
   135a4:	add	r2, r8, #1
   135a8:	cmp	fp, r2
   135ac:	movhi	ip, #36	; 0x24
   135b0:	strbhi	ip, [r9, r2]
   135b4:	add	r2, r8, #2
   135b8:	cmp	fp, r2
   135bc:	movhi	ip, #39	; 0x27
   135c0:	strbhi	ip, [r9, r2]
   135c4:	add	r8, r8, #3
   135c8:	mov	r2, r0
   135cc:	cmp	fp, r8
   135d0:	movhi	r0, #92	; 0x5c
   135d4:	strbhi	r0, [r9, r8]
   135d8:	add	r0, r8, #1
   135dc:	cmp	fp, r0
   135e0:	lsrhi	ip, r4, #6
   135e4:	addhi	ip, ip, #48	; 0x30
   135e8:	strbhi	ip, [r9, r0]
   135ec:	add	ip, r8, #2
   135f0:	cmp	fp, ip
   135f4:	lsrhi	r0, r4, #3
   135f8:	andhi	r0, r0, #7
   135fc:	addhi	r0, r0, #48	; 0x30
   13600:	add	sl, sl, #1
   13604:	strbhi	r0, [r9, ip]
   13608:	and	r4, r4, #7
   1360c:	cmp	sl, r1
   13610:	add	r4, r4, #48	; 0x30
   13614:	add	r8, r8, #3
   13618:	bcs	1399c <__assert_fail@plt+0x2a6c>
   1361c:	mov	r0, r3
   13620:	cmp	fp, r8
   13624:	strbhi	r4, [r9, r8]
   13628:	ldrb	r4, [r5, #1]!
   1362c:	add	r8, r8, #1
   13630:	cmp	r3, #0
   13634:	bne	13584 <__assert_fail@plt+0x2654>
   13638:	cmp	r6, #0
   1363c:	bne	136e0 <__assert_fail@plt+0x27b0>
   13640:	eor	r6, r0, #1
   13644:	and	r6, r6, r2
   13648:	add	sl, sl, #1
   1364c:	cmp	r1, sl
   13650:	uxtb	r6, r6
   13654:	bls	13708 <__assert_fail@plt+0x27d8>
   13658:	cmp	r6, #0
   1365c:	beq	13620 <__assert_fail@plt+0x26f0>
   13660:	cmp	fp, r8
   13664:	movhi	r2, #39	; 0x27
   13668:	strbhi	r2, [r9, r8]
   1366c:	add	r2, r8, #1
   13670:	cmp	fp, r2
   13674:	movhi	ip, #39	; 0x27
   13678:	strbhi	ip, [r9, r2]
   1367c:	add	r8, r8, #2
   13680:	mov	r6, r3
   13684:	mov	r2, r3
   13688:	b	13620 <__assert_fail@plt+0x26f0>
   1368c:	ldr	r3, [sp, #184]	; 0xb8
   13690:	cmp	r3, #0
   13694:	beq	12d6c <__assert_fail@plt+0x1e3c>
   13698:	lsr	r2, r4, #5
   1369c:	mov	r0, r3
   136a0:	uxtb	r2, r2
   136a4:	and	r3, r4, #31
   136a8:	ldr	r2, [r0, r2, lsl #2]
   136ac:	lsr	r3, r2, r3
   136b0:	tst	r3, #1
   136b4:	beq	12d6c <__assert_fail@plt+0x1e3c>
   136b8:	ldr	r3, [sp, #40]	; 0x28
   136bc:	cmp	r3, #0
   136c0:	beq	12f58 <__assert_fail@plt+0x2028>
   136c4:	mov	r3, r1
   136c8:	str	r3, [sp, #64]	; 0x40
   136cc:	mov	sl, r9
   136d0:	ldr	r3, [sp, #56]	; 0x38
   136d4:	mov	r9, fp
   136d8:	ldr	r2, [sp, #64]	; 0x40
   136dc:	b	138cc <__assert_fail@plt+0x299c>
   136e0:	cmp	fp, r8
   136e4:	eor	r6, r0, #1
   136e8:	movhi	ip, #92	; 0x5c
   136ec:	and	r6, r6, r2
   136f0:	add	sl, sl, #1
   136f4:	strbhi	ip, [r9, r8]
   136f8:	cmp	r1, sl
   136fc:	add	r8, r8, #1
   13700:	uxtb	r6, r6
   13704:	bhi	13658 <__assert_fail@plt+0x2728>
   13708:	str	r2, [sp, #36]	; 0x24
   1370c:	b	12d84 <__assert_fail@plt+0x1e54>
   13710:	ldr	r3, [sp, #24]
   13714:	cmn	r3, #1
   13718:	mov	r3, #0
   1371c:	str	r3, [sp, #128]	; 0x80
   13720:	str	r3, [sp, #132]	; 0x84
   13724:	beq	13a18 <__assert_fail@plt+0x2ae8>
   13728:	mov	r2, r7
   1372c:	mov	r3, #0
   13730:	str	r7, [sp, #104]	; 0x68
   13734:	str	r5, [sp, #116]	; 0x74
   13738:	mov	r7, r3
   1373c:	mov	r5, r2
   13740:	str	r4, [sp, #32]
   13744:	str	r6, [sp, #108]	; 0x6c
   13748:	str	r8, [sp, #112]	; 0x70
   1374c:	ldr	r3, [sp, #44]	; 0x2c
   13750:	add	r6, sl, r7
   13754:	add	r4, r3, r6
   13758:	ldr	r3, [sp, #24]
   1375c:	mov	r1, r4
   13760:	sub	r2, r3, r6
   13764:	add	r0, sp, #124	; 0x7c
   13768:	add	r3, sp, #128	; 0x80
   1376c:	bl	183cc <__assert_fail@plt+0x749c>
   13770:	subs	r8, r0, #0
   13774:	beq	13afc <__assert_fail@plt+0x2bcc>
   13778:	cmn	r8, #1
   1377c:	beq	13ad4 <__assert_fail@plt+0x2ba4>
   13780:	cmn	r8, #2
   13784:	beq	13a6c <__assert_fail@plt+0x2b3c>
   13788:	ldr	r3, [sp, #64]	; 0x40
   1378c:	cmp	r3, #0
   13790:	beq	13850 <__assert_fail@plt+0x2920>
   13794:	cmp	r8, #1
   13798:	beq	13850 <__assert_fail@plt+0x2920>
   1379c:	sub	r3, r8, #1
   137a0:	add	r6, r3, r6
   137a4:	ldr	r3, [sp, #44]	; 0x2c
   137a8:	add	r6, r3, r6
   137ac:	ldrb	r3, [r4, #1]!
   137b0:	sub	r3, r3, #91	; 0x5b
   137b4:	cmp	r3, #33	; 0x21
   137b8:	ldrls	pc, [pc, r3, lsl #2]
   137bc:	b	13848 <__assert_fail@plt+0x2918>
   137c0:			; <UNDEFINED> instruction: 0x000138b4
   137c4:			; <UNDEFINED> instruction: 0x000138b4
   137c8:	andeq	r3, r1, r8, asr #16
   137cc:			; <UNDEFINED> instruction: 0x000138b4
   137d0:	andeq	r3, r1, r8, asr #16
   137d4:			; <UNDEFINED> instruction: 0x000138b4
   137d8:	andeq	r3, r1, r8, asr #16
   137dc:	andeq	r3, r1, r8, asr #16
   137e0:	andeq	r3, r1, r8, asr #16
   137e4:	andeq	r3, r1, r8, asr #16
   137e8:	andeq	r3, r1, r8, asr #16
   137ec:	andeq	r3, r1, r8, asr #16
   137f0:	andeq	r3, r1, r8, asr #16
   137f4:	andeq	r3, r1, r8, asr #16
   137f8:	andeq	r3, r1, r8, asr #16
   137fc:	andeq	r3, r1, r8, asr #16
   13800:	andeq	r3, r1, r8, asr #16
   13804:	andeq	r3, r1, r8, asr #16
   13808:	andeq	r3, r1, r8, asr #16
   1380c:	andeq	r3, r1, r8, asr #16
   13810:	andeq	r3, r1, r8, asr #16
   13814:	andeq	r3, r1, r8, asr #16
   13818:	andeq	r3, r1, r8, asr #16
   1381c:	andeq	r3, r1, r8, asr #16
   13820:	andeq	r3, r1, r8, asr #16
   13824:	andeq	r3, r1, r8, asr #16
   13828:	andeq	r3, r1, r8, asr #16
   1382c:	andeq	r3, r1, r8, asr #16
   13830:	andeq	r3, r1, r8, asr #16
   13834:	andeq	r3, r1, r8, asr #16
   13838:	andeq	r3, r1, r8, asr #16
   1383c:	andeq	r3, r1, r8, asr #16
   13840:	andeq	r3, r1, r8, asr #16
   13844:			; <UNDEFINED> instruction: 0x000138b4
   13848:	cmp	r6, r4
   1384c:	bne	137ac <__assert_fail@plt+0x287c>
   13850:	ldr	r0, [sp, #124]	; 0x7c
   13854:	bl	10d8c <iswprint@plt>
   13858:	add	r7, r7, r8
   1385c:	cmp	r0, #0
   13860:	add	r0, sp, #128	; 0x80
   13864:	moveq	r5, #0
   13868:	bl	10d38 <mbsinit@plt>
   1386c:	cmp	r0, #0
   13870:	beq	1374c <__assert_fail@plt+0x281c>
   13874:	ldr	r4, [sp, #32]
   13878:	str	r5, [sp, #32]
   1387c:	ldr	r3, [sp, #32]
   13880:	mov	r1, r7
   13884:	eor	r3, r3, #1
   13888:	ldr	r7, [sp, #104]	; 0x68
   1388c:	ldr	r6, [sp, #108]	; 0x6c
   13890:	ldr	r8, [sp, #112]	; 0x70
   13894:	ldr	r5, [sp, #116]	; 0x74
   13898:	uxtb	r3, r3
   1389c:	cmp	r1, #1
   138a0:	bls	1355c <__assert_fail@plt+0x262c>
   138a4:	ldr	r2, [sp, #56]	; 0x38
   138a8:	and	r3, r3, r2
   138ac:	uxtb	r3, r3
   138b0:	b	1356c <__assert_fail@plt+0x263c>
   138b4:	mov	r3, #2
   138b8:	str	r3, [sp, #176]	; 0xb0
   138bc:	ldr	r2, [sp, #64]	; 0x40
   138c0:	ldr	r3, [sp, #56]	; 0x38
   138c4:	mov	sl, r9
   138c8:	mov	r9, fp
   138cc:	and	r3, r3, r2
   138d0:	tst	r3, #255	; 0xff
   138d4:	ldr	r3, [sp, #176]	; 0xb0
   138d8:	movne	r3, #4
   138dc:	str	r3, [sp, #176]	; 0xb0
   138e0:	ldr	r3, [sp, #180]	; 0xb4
   138e4:	mov	ip, #0
   138e8:	bic	r3, r3, #2
   138ec:	str	r3, [sp, #4]
   138f0:	ldr	r3, [sp, #192]	; 0xc0
   138f4:	ldr	r2, [sp, #44]	; 0x2c
   138f8:	str	r3, [sp, #16]
   138fc:	ldr	r3, [sp, #188]	; 0xbc
   13900:	mov	r1, r9
   13904:	str	r3, [sp, #12]
   13908:	ldr	r3, [sp, #176]	; 0xb0
   1390c:	mov	r0, sl
   13910:	str	r3, [sp]
   13914:	str	ip, [sp, #8]
   13918:	ldr	r3, [sp, #24]
   1391c:	bl	1277c <__assert_fail@plt+0x184c>
   13920:	mov	fp, r0
   13924:	mov	r0, fp
   13928:	add	sp, sp, #140	; 0x8c
   1392c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13930:	mov	r4, #92	; 0x5c
   13934:	mov	r1, #0
   13938:	mov	r3, r4
   1393c:	b	12f30 <__assert_fail@plt+0x2000>
   13940:	mov	r3, #0
   13944:	ldr	r1, [sp, #52]	; 0x34
   13948:	str	r3, [sp, #32]
   1394c:	mov	r4, #63	; 0x3f
   13950:	b	12d50 <__assert_fail@plt+0x1e20>
   13954:	cmp	fp, #0
   13958:	beq	139b4 <__assert_fail@plt+0x2a84>
   1395c:	mov	r3, #39	; 0x27
   13960:	strb	r3, [r9]
   13964:	mov	r3, #0
   13968:	str	r3, [sp, #40]	; 0x28
   1396c:	mov	r3, #1
   13970:	str	r3, [sp, #68]	; 0x44
   13974:	ldr	r3, [pc, #448]	; 13b3c <__assert_fail@plt+0x2c0c>
   13978:	mov	r8, #1
   1397c:	str	r3, [sp, #72]	; 0x48
   13980:	b	12b64 <__assert_fail@plt+0x1c34>
   13984:	ldr	r3, [sp, #40]	; 0x28
   13988:	mov	sl, r9
   1398c:	str	r3, [sp, #56]	; 0x38
   13990:	mov	r9, fp
   13994:	ldr	r2, [sp, #64]	; 0x40
   13998:	b	138cc <__assert_fail@plt+0x299c>
   1399c:	str	r2, [sp, #36]	; 0x24
   139a0:	b	12db4 <__assert_fail@plt+0x1e84>
   139a4:	mov	r1, #0
   139a8:	str	r3, [sp, #32]
   139ac:	mov	r4, #63	; 0x3f
   139b0:	b	12d50 <__assert_fail@plt+0x1e20>
   139b4:	ldr	r3, [pc, #384]	; 13b3c <__assert_fail@plt+0x2c0c>
   139b8:	str	r3, [sp, #72]	; 0x48
   139bc:	mov	r3, #0
   139c0:	str	r3, [sp, #40]	; 0x28
   139c4:	mov	r3, #1
   139c8:	str	r3, [sp, #68]	; 0x44
   139cc:	mov	r8, r3
   139d0:	b	12b64 <__assert_fail@plt+0x1c34>
   139d4:	bl	10f24 <abort@plt>
   139d8:	cmp	fp, #0
   139dc:	beq	13a3c <__assert_fail@plt+0x2b0c>
   139e0:	mov	r2, #1
   139e4:	mov	r3, #34	; 0x22
   139e8:	strb	r3, [r9]
   139ec:	mov	r8, r2
   139f0:	mov	r3, r2
   139f4:	str	r2, [sp, #68]	; 0x44
   139f8:	str	r3, [sp, #56]	; 0x38
   139fc:	ldr	r3, [pc, #316]	; 13b40 <__assert_fail@plt+0x2c10>
   13a00:	ldr	r1, [sp, #56]	; 0x38
   13a04:	str	r3, [sp, #72]	; 0x48
   13a08:	ldr	r2, [sp, #176]	; 0xb0
   13a0c:	ldr	ip, [sp, #40]	; 0x28
   13a10:	ldr	lr, [sp, #176]	; 0xb0
   13a14:	b	12848 <__assert_fail@plt+0x1918>
   13a18:	ldr	r0, [sp, #44]	; 0x2c
   13a1c:	bl	10e34 <strlen@plt>
   13a20:	str	r0, [sp, #24]
   13a24:	b	13728 <__assert_fail@plt+0x27f8>
   13a28:	mov	r7, #0
   13a2c:	ldr	r1, [sp, #52]	; 0x34
   13a30:	str	r3, [sp, #32]
   13a34:	mov	r4, #48	; 0x30
   13a38:	b	12d50 <__assert_fail@plt+0x1e20>
   13a3c:	mov	r3, #1
   13a40:	str	r3, [sp, #68]	; 0x44
   13a44:	mov	r8, r3
   13a48:	b	139f8 <__assert_fail@plt+0x2ac8>
   13a4c:	mov	r3, #2
   13a50:	mov	sl, r9
   13a54:	str	r3, [sp, #176]	; 0xb0
   13a58:	mov	r9, fp
   13a5c:	ldr	r3, [sp, #56]	; 0x38
   13a60:	b	138cc <__assert_fail@plt+0x299c>
   13a64:	ldr	r6, [sp, #48]	; 0x30
   13a68:	b	13518 <__assert_fail@plt+0x25e8>
   13a6c:	ldr	r0, [sp, #24]
   13a70:	mov	ip, r6
   13a74:	cmp	r0, ip
   13a78:	mov	r1, r7
   13a7c:	mov	r2, r4
   13a80:	ldr	r7, [sp, #104]	; 0x68
   13a84:	ldr	r4, [sp, #32]
   13a88:	ldr	r6, [sp, #108]	; 0x6c
   13a8c:	ldr	r8, [sp, #112]	; 0x70
   13a90:	ldr	r5, [sp, #116]	; 0x74
   13a94:	bls	13ac4 <__assert_fail@plt+0x2b94>
   13a98:	ldrb	r3, [r2]
   13a9c:	cmp	r3, #0
   13aa0:	bne	13ab4 <__assert_fail@plt+0x2b84>
   13aa4:	b	13bd4 <__assert_fail@plt+0x2ca4>
   13aa8:	ldrb	r3, [r2, #1]!
   13aac:	cmp	r3, #0
   13ab0:	beq	13bd4 <__assert_fail@plt+0x2ca4>
   13ab4:	add	r1, r1, #1
   13ab8:	add	r3, sl, r1
   13abc:	cmp	r0, r3
   13ac0:	bhi	13aa8 <__assert_fail@plt+0x2b78>
   13ac4:	mov	r2, #0
   13ac8:	mov	r3, r7
   13acc:	str	r2, [sp, #32]
   13ad0:	b	1389c <__assert_fail@plt+0x296c>
   13ad4:	mov	r1, r7
   13ad8:	ldr	r7, [sp, #104]	; 0x68
   13adc:	mov	r2, #0
   13ae0:	ldr	r4, [sp, #32]
   13ae4:	ldr	r6, [sp, #108]	; 0x6c
   13ae8:	ldr	r8, [sp, #112]	; 0x70
   13aec:	ldr	r5, [sp, #116]	; 0x74
   13af0:	mov	r3, r7
   13af4:	str	r2, [sp, #32]
   13af8:	b	1389c <__assert_fail@plt+0x296c>
   13afc:	mov	r3, r5
   13b00:	eor	r3, r3, #1
   13b04:	ldr	r4, [sp, #32]
   13b08:	mov	r1, r7
   13b0c:	str	r5, [sp, #32]
   13b10:	ldr	r7, [sp, #104]	; 0x68
   13b14:	ldr	r6, [sp, #108]	; 0x6c
   13b18:	ldr	r8, [sp, #112]	; 0x70
   13b1c:	ldr	r5, [sp, #116]	; 0x74
   13b20:	uxtb	r3, r3
   13b24:	b	1389c <__assert_fail@plt+0x296c>
   13b28:	mov	sl, r9
   13b2c:	str	r3, [sp, #56]	; 0x38
   13b30:	mov	r9, fp
   13b34:	ldr	r2, [sp, #64]	; 0x40
   13b38:	b	138cc <__assert_fail@plt+0x299c>
   13b3c:	andeq	r9, r1, r8, lsl #9
   13b40:	andeq	r9, r1, r4, lsl #9
   13b44:	andeq	r9, r1, ip, lsl #9
   13b48:	stmdacc	r0, {r0, r6, r7, r8, ip, lr}
   13b4c:	ldr	r2, [sp, #44]	; 0x2c
   13b50:	ldrb	r1, [r2, r3]
   13b54:	sub	r2, r1, #33	; 0x21
   13b58:	uxtb	r2, r2
   13b5c:	cmp	r2, #29
   13b60:	bhi	13be0 <__assert_fail@plt+0x2cb0>
   13b64:	ldr	r0, [pc, #-36]	; 13b48 <__assert_fail@plt+0x2c18>
   13b68:	mov	ip, #1
   13b6c:	ands	r2, r0, ip, lsl r2
   13b70:	beq	13c00 <__assert_fail@plt+0x2cd0>
   13b74:	ldr	r2, [sp, #40]	; 0x28
   13b78:	cmp	r2, #0
   13b7c:	bne	13cf4 <__assert_fail@plt+0x2dc4>
   13b80:	add	r2, r8, #1
   13b84:	cmp	fp, r8
   13b88:	strbhi	r4, [r9, r8]
   13b8c:	cmp	fp, r2
   13b90:	movhi	r0, #34	; 0x22
   13b94:	strbhi	r0, [r9, r2]
   13b98:	add	r2, r8, #2
   13b9c:	cmp	fp, r2
   13ba0:	movhi	r0, #34	; 0x22
   13ba4:	strbhi	r0, [r9, r2]
   13ba8:	add	r2, r8, #3
   13bac:	cmp	fp, r2
   13bb0:	mov	sl, r3
   13bb4:	ldr	r3, [sp, #40]	; 0x28
   13bb8:	movhi	r0, #63	; 0x3f
   13bbc:	mov	r4, r1
   13bc0:	strbhi	r0, [r9, r2]
   13bc4:	add	r8, r8, #4
   13bc8:	mov	r1, r3
   13bcc:	str	r3, [sp, #32]
   13bd0:	b	12d50 <__assert_fail@plt+0x1e20>
   13bd4:	str	r3, [sp, #32]
   13bd8:	mov	r3, r7
   13bdc:	b	1389c <__assert_fail@plt+0x296c>
   13be0:	mov	r1, #0
   13be4:	str	r1, [sp, #32]
   13be8:	b	12d50 <__assert_fail@plt+0x1e20>
   13bec:	mov	sl, r9
   13bf0:	ldr	r3, [sp, #56]	; 0x38
   13bf4:	mov	r9, fp
   13bf8:	ldr	r2, [sp, #64]	; 0x40
   13bfc:	b	138cc <__assert_fail@plt+0x299c>
   13c00:	str	r2, [sp, #32]
   13c04:	mov	r1, #0
   13c08:	b	12d50 <__assert_fail@plt+0x1e20>
   13c0c:	ldr	r2, [sp, #76]	; 0x4c
   13c10:	mov	sl, r9
   13c14:	mov	r9, fp
   13c18:	mov	fp, r8
   13c1c:	ldr	r1, [sp, #72]	; 0x48
   13c20:	cmp	r1, #0
   13c24:	moveq	r3, #0
   13c28:	andne	r3, r2, #1
   13c2c:	cmp	r3, #0
   13c30:	beq	13c5c <__assert_fail@plt+0x2d2c>
   13c34:	ldrb	r3, [r1]
   13c38:	cmp	r3, #0
   13c3c:	beq	13c5c <__assert_fail@plt+0x2d2c>
   13c40:	mov	r2, r1
   13c44:	cmp	r9, fp
   13c48:	strbhi	r3, [sl, fp]
   13c4c:	ldrb	r3, [r2, #1]!
   13c50:	add	fp, fp, #1
   13c54:	cmp	r3, #0
   13c58:	bne	13c44 <__assert_fail@plt+0x2d14>
   13c5c:	cmp	r9, fp
   13c60:	movhi	r3, #0
   13c64:	strbhi	r3, [sl, fp]
   13c68:	b	13924 <__assert_fail@plt+0x29f4>
   13c6c:	ldr	r3, [sp, #192]	; 0xc0
   13c70:	mov	ip, #5
   13c74:	str	r3, [sp, #16]
   13c78:	ldr	r3, [sp, #188]	; 0xbc
   13c7c:	ldr	r2, [sp, #44]	; 0x2c
   13c80:	str	r3, [sp, #12]
   13c84:	ldr	r3, [sp, #184]	; 0xb8
   13c88:	ldr	r1, [sp, #84]	; 0x54
   13c8c:	str	r3, [sp, #8]
   13c90:	ldr	r3, [sp, #180]	; 0xb4
   13c94:	mov	r0, r9
   13c98:	str	r3, [sp, #4]
   13c9c:	str	ip, [sp]
   13ca0:	ldr	r3, [sp, #24]
   13ca4:	bl	1277c <__assert_fail@plt+0x184c>
   13ca8:	mov	fp, r0
   13cac:	b	13924 <__assert_fail@plt+0x29f4>
   13cb0:	mov	sl, r9
   13cb4:	mov	r9, fp
   13cb8:	mov	fp, r8
   13cbc:	b	13c1c <__assert_fail@plt+0x2cec>
   13cc0:	ldr	r1, [sp, #176]	; 0xb0
   13cc4:	bl	1265c <__assert_fail@plt+0x172c>
   13cc8:	str	r0, [sp, #192]	; 0xc0
   13ccc:	b	12c38 <__assert_fail@plt+0x1d08>
   13cd0:	ldr	r1, [sp, #176]	; 0xb0
   13cd4:	bl	1265c <__assert_fail@plt+0x172c>
   13cd8:	str	r0, [sp, #188]	; 0xbc
   13cdc:	b	12c18 <__assert_fail@plt+0x1ce8>
   13ce0:	mov	sl, r9
   13ce4:	mov	r2, r3
   13ce8:	mov	r9, fp
   13cec:	mov	fp, r8
   13cf0:	b	13c1c <__assert_fail@plt+0x2cec>
   13cf4:	mov	sl, r9
   13cf8:	mov	r9, fp
   13cfc:	b	138e0 <__assert_fail@plt+0x29b0>
   13d00:	push	{r4, r5, r6, lr}
   13d04:	mov	r5, r0
   13d08:	bl	10e4c <__errno_location@plt>
   13d0c:	cmp	r5, #0
   13d10:	mov	r1, #48	; 0x30
   13d14:	mov	r4, r0
   13d18:	ldr	r0, [pc, #16]	; 13d30 <__assert_fail@plt+0x2e00>
   13d1c:	ldr	r6, [r4]
   13d20:	movne	r0, r5
   13d24:	bl	1759c <__assert_fail@plt+0x666c>
   13d28:	str	r6, [r4]
   13d2c:	pop	{r4, r5, r6, pc}
   13d30:	andeq	sl, r2, ip, ror #2
   13d34:	ldr	r3, [pc, #12]	; 13d48 <__assert_fail@plt+0x2e18>
   13d38:	cmp	r0, #0
   13d3c:	moveq	r0, r3
   13d40:	ldr	r0, [r0]
   13d44:	bx	lr
   13d48:	andeq	sl, r2, ip, ror #2
   13d4c:	ldr	r3, [pc, #12]	; 13d60 <__assert_fail@plt+0x2e30>
   13d50:	cmp	r0, #0
   13d54:	moveq	r0, r3
   13d58:	str	r1, [r0]
   13d5c:	bx	lr
   13d60:	andeq	sl, r2, ip, ror #2
   13d64:	ldr	r3, [pc, #52]	; 13da0 <__assert_fail@plt+0x2e70>
   13d68:	cmp	r0, #0
   13d6c:	moveq	r0, r3
   13d70:	add	r3, r0, #8
   13d74:	push	{lr}		; (str lr, [sp, #-4]!)
   13d78:	lsr	lr, r1, #5
   13d7c:	and	r1, r1, #31
   13d80:	ldr	ip, [r3, lr, lsl #2]
   13d84:	lsr	r0, ip, r1
   13d88:	eor	r2, r2, r0
   13d8c:	and	r2, r2, #1
   13d90:	and	r0, r0, #1
   13d94:	eor	r1, ip, r2, lsl r1
   13d98:	str	r1, [r3, lr, lsl #2]
   13d9c:	pop	{pc}		; (ldr pc, [sp], #4)
   13da0:	andeq	sl, r2, ip, ror #2
   13da4:	ldr	r3, [pc, #16]	; 13dbc <__assert_fail@plt+0x2e8c>
   13da8:	cmp	r0, #0
   13dac:	movne	r3, r0
   13db0:	ldr	r0, [r3, #4]
   13db4:	str	r1, [r3, #4]
   13db8:	bx	lr
   13dbc:	andeq	sl, r2, ip, ror #2
   13dc0:	ldr	r3, [pc, #44]	; 13df4 <__assert_fail@plt+0x2ec4>
   13dc4:	cmp	r0, #0
   13dc8:	moveq	r0, r3
   13dcc:	mov	ip, #10
   13dd0:	cmp	r2, #0
   13dd4:	cmpne	r1, #0
   13dd8:	str	ip, [r0]
   13ddc:	beq	13dec <__assert_fail@plt+0x2ebc>
   13de0:	str	r1, [r0, #40]	; 0x28
   13de4:	str	r2, [r0, #44]	; 0x2c
   13de8:	bx	lr
   13dec:	push	{r4, lr}
   13df0:	bl	10f24 <abort@plt>
   13df4:	andeq	sl, r2, ip, ror #2
   13df8:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   13dfc:	sub	sp, sp, #24
   13e00:	ldr	ip, [pc, #108]	; 13e74 <__assert_fail@plt+0x2f44>
   13e04:	ldr	r4, [sp, #56]	; 0x38
   13e08:	mov	r9, r2
   13e0c:	cmp	r4, #0
   13e10:	moveq	r4, ip
   13e14:	mov	sl, r3
   13e18:	mov	r7, r0
   13e1c:	mov	r8, r1
   13e20:	bl	10e4c <__errno_location@plt>
   13e24:	ldr	r3, [r4, #44]	; 0x2c
   13e28:	mov	r1, r8
   13e2c:	ldr	r6, [r0]
   13e30:	str	r3, [sp, #16]
   13e34:	ldr	r2, [r4, #40]	; 0x28
   13e38:	add	r3, r4, #8
   13e3c:	str	r3, [sp, #8]
   13e40:	str	r2, [sp, #12]
   13e44:	ldr	r2, [r4, #4]
   13e48:	mov	r5, r0
   13e4c:	str	r2, [sp, #4]
   13e50:	ldr	ip, [r4]
   13e54:	mov	r3, sl
   13e58:	mov	r2, r9
   13e5c:	mov	r0, r7
   13e60:	str	ip, [sp]
   13e64:	bl	1277c <__assert_fail@plt+0x184c>
   13e68:	str	r6, [r5]
   13e6c:	add	sp, sp, #24
   13e70:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   13e74:	andeq	sl, r2, ip, ror #2
   13e78:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13e7c:	cmp	r2, #0
   13e80:	sub	sp, sp, #36	; 0x24
   13e84:	ldr	r4, [pc, #164]	; 13f30 <__assert_fail@plt+0x3000>
   13e88:	mov	r8, r1
   13e8c:	movne	r4, r2
   13e90:	mov	r7, r0
   13e94:	bl	10e4c <__errno_location@plt>
   13e98:	ldr	r3, [r4, #44]	; 0x2c
   13e9c:	ldr	r5, [r4, #4]
   13ea0:	add	r9, r4, #8
   13ea4:	orr	r5, r5, #1
   13ea8:	mov	r1, #0
   13eac:	mov	r2, r7
   13eb0:	ldr	fp, [r0]
   13eb4:	str	r3, [sp, #16]
   13eb8:	ldr	r3, [r4, #40]	; 0x28
   13ebc:	stmib	sp, {r5, r9}
   13ec0:	str	r3, [sp, #12]
   13ec4:	ldr	r3, [r4]
   13ec8:	mov	r6, r0
   13ecc:	str	r3, [sp]
   13ed0:	mov	r0, r1
   13ed4:	mov	r3, r8
   13ed8:	bl	1277c <__assert_fail@plt+0x184c>
   13edc:	add	r1, r0, #1
   13ee0:	mov	r0, r1
   13ee4:	str	r1, [sp, #28]
   13ee8:	bl	17058 <__assert_fail@plt+0x6128>
   13eec:	ldr	r3, [r4, #44]	; 0x2c
   13ef0:	ldr	r1, [sp, #28]
   13ef4:	str	r3, [sp, #16]
   13ef8:	ldr	r3, [r4, #40]	; 0x28
   13efc:	str	r5, [sp, #4]
   13f00:	str	r3, [sp, #12]
   13f04:	str	r9, [sp, #8]
   13f08:	ldr	ip, [r4]
   13f0c:	mov	r3, r8
   13f10:	mov	r2, r7
   13f14:	str	ip, [sp]
   13f18:	mov	sl, r0
   13f1c:	bl	1277c <__assert_fail@plt+0x184c>
   13f20:	mov	r0, sl
   13f24:	str	fp, [r6]
   13f28:	add	sp, sp, #36	; 0x24
   13f2c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13f30:	andeq	sl, r2, ip, ror #2
   13f34:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13f38:	cmp	r3, #0
   13f3c:	sub	sp, sp, #44	; 0x2c
   13f40:	ldr	r4, [pc, #192]	; 14008 <__assert_fail@plt+0x30d8>
   13f44:	mov	r6, r2
   13f48:	movne	r4, r3
   13f4c:	mov	r9, r1
   13f50:	mov	r8, r0
   13f54:	bl	10e4c <__errno_location@plt>
   13f58:	ldr	r3, [r4, #44]	; 0x2c
   13f5c:	ldr	r5, [r4, #4]
   13f60:	add	sl, r4, #8
   13f64:	cmp	r6, #0
   13f68:	orreq	r5, r5, #1
   13f6c:	mov	r1, #0
   13f70:	ldr	r2, [r0]
   13f74:	str	r3, [sp, #16]
   13f78:	ldr	r3, [r4, #40]	; 0x28
   13f7c:	stmib	sp, {r5, sl}
   13f80:	str	r3, [sp, #12]
   13f84:	ldr	r3, [r4]
   13f88:	mov	r7, r0
   13f8c:	str	r2, [sp, #28]
   13f90:	str	r3, [sp]
   13f94:	mov	r2, r8
   13f98:	mov	r3, r9
   13f9c:	mov	r0, r1
   13fa0:	bl	1277c <__assert_fail@plt+0x184c>
   13fa4:	add	r1, r0, #1
   13fa8:	mov	fp, r0
   13fac:	mov	r0, r1
   13fb0:	str	r1, [sp, #36]	; 0x24
   13fb4:	bl	17058 <__assert_fail@plt+0x6128>
   13fb8:	ldr	r3, [r4, #44]	; 0x2c
   13fbc:	mov	r2, r8
   13fc0:	str	r3, [sp, #16]
   13fc4:	ldr	r3, [r4, #40]	; 0x28
   13fc8:	str	r5, [sp, #4]
   13fcc:	str	r3, [sp, #12]
   13fd0:	str	sl, [sp, #8]
   13fd4:	ldr	ip, [r4]
   13fd8:	ldr	r1, [sp, #36]	; 0x24
   13fdc:	mov	r3, r9
   13fe0:	str	ip, [sp]
   13fe4:	str	r0, [sp, #32]
   13fe8:	bl	1277c <__assert_fail@plt+0x184c>
   13fec:	ldr	r2, [sp, #28]
   13ff0:	cmp	r6, #0
   13ff4:	str	r2, [r7]
   13ff8:	ldr	r0, [sp, #32]
   13ffc:	strne	fp, [r6]
   14000:	add	sp, sp, #44	; 0x2c
   14004:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14008:	andeq	sl, r2, ip, ror #2
   1400c:	push	{r4, r5, r6, r7, r8, lr}
   14010:	ldr	r6, [pc, #116]	; 1408c <__assert_fail@plt+0x315c>
   14014:	ldr	r3, [r6, #4]
   14018:	ldr	r7, [r6]
   1401c:	cmp	r3, #1
   14020:	movgt	r5, r7
   14024:	movgt	r4, #1
   14028:	ble	14048 <__assert_fail@plt+0x3118>
   1402c:	ldr	r0, [r5, #12]
   14030:	bl	124b0 <__assert_fail@plt+0x1580>
   14034:	ldr	r3, [r6, #4]
   14038:	add	r4, r4, #1
   1403c:	cmp	r3, r4
   14040:	add	r5, r5, #8
   14044:	bgt	1402c <__assert_fail@plt+0x30fc>
   14048:	ldr	r0, [r7, #4]
   1404c:	ldr	r4, [pc, #60]	; 14090 <__assert_fail@plt+0x3160>
   14050:	cmp	r0, r4
   14054:	beq	14068 <__assert_fail@plt+0x3138>
   14058:	bl	124b0 <__assert_fail@plt+0x1580>
   1405c:	mov	r3, #256	; 0x100
   14060:	str	r4, [r6, #12]
   14064:	str	r3, [r6, #8]
   14068:	ldr	r4, [pc, #36]	; 14094 <__assert_fail@plt+0x3164>
   1406c:	cmp	r7, r4
   14070:	beq	14080 <__assert_fail@plt+0x3150>
   14074:	mov	r0, r7
   14078:	bl	124b0 <__assert_fail@plt+0x1580>
   1407c:	str	r4, [r6]
   14080:	mov	r3, #1
   14084:	str	r3, [r6, #4]
   14088:	pop	{r4, r5, r6, r7, r8, pc}
   1408c:	strdeq	sl, [r2], -r4
   14090:	muleq	r2, ip, r1
   14094:	strdeq	sl, [r2], -ip
   14098:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1409c:	sub	sp, sp, #44	; 0x2c
   140a0:	mov	r5, r0
   140a4:	mov	sl, r1
   140a8:	bl	10e4c <__errno_location@plt>
   140ac:	ldr	r4, [pc, #400]	; 14244 <__assert_fail@plt+0x3314>
   140b0:	cmn	r5, #-2147483647	; 0x80000001
   140b4:	ldr	r6, [r4]
   140b8:	mov	r8, r0
   140bc:	movne	r0, #0
   140c0:	moveq	r0, #1
   140c4:	ldr	r3, [r8]
   140c8:	orrs	r0, r0, r5, lsr #31
   140cc:	str	r3, [sp, #24]
   140d0:	bne	14240 <__assert_fail@plt+0x3310>
   140d4:	ldr	r2, [r4, #4]
   140d8:	cmp	r5, r2
   140dc:	blt	1413c <__assert_fail@plt+0x320c>
   140e0:	add	r7, r4, #8
   140e4:	cmp	r6, r7
   140e8:	str	r2, [sp, #36]	; 0x24
   140ec:	beq	14210 <__assert_fail@plt+0x32e0>
   140f0:	mov	r3, #8
   140f4:	sub	r2, r5, r2
   140f8:	mov	r0, r6
   140fc:	str	r3, [sp]
   14100:	add	r2, r2, #1
   14104:	mvn	r3, #-2147483648	; 0x80000000
   14108:	add	r1, sp, #36	; 0x24
   1410c:	bl	17274 <__assert_fail@plt+0x6344>
   14110:	mov	r6, r0
   14114:	str	r0, [r4]
   14118:	ldr	r0, [r4, #4]
   1411c:	ldr	r2, [sp, #36]	; 0x24
   14120:	mov	r1, #0
   14124:	sub	r2, r2, r0
   14128:	add	r0, r6, r0, lsl #3
   1412c:	lsl	r2, r2, #3
   14130:	bl	10e64 <memset@plt>
   14134:	ldr	r3, [sp, #36]	; 0x24
   14138:	str	r3, [r4, #4]
   1413c:	ldr	r4, [pc, #260]	; 14248 <__assert_fail@plt+0x3318>
   14140:	add	fp, r6, r5, lsl #3
   14144:	ldr	r9, [r6, r5, lsl #3]
   14148:	ldr	r0, [r4, #4]
   1414c:	ldr	r3, [r4]
   14150:	ldr	r7, [fp, #4]
   14154:	ldr	r1, [r4, #44]	; 0x2c
   14158:	ldr	r2, [r4, #40]	; 0x28
   1415c:	orr	r0, r0, #1
   14160:	str	r3, [sp]
   14164:	add	r3, r4, #8
   14168:	str	r0, [sp, #28]
   1416c:	str	r0, [sp, #4]
   14170:	str	r1, [sp, #16]
   14174:	str	r2, [sp, #12]
   14178:	str	r3, [sp, #8]
   1417c:	mov	r0, r7
   14180:	mov	r1, r9
   14184:	mvn	r3, #0
   14188:	mov	r2, sl
   1418c:	bl	1277c <__assert_fail@plt+0x184c>
   14190:	cmp	r9, r0
   14194:	bhi	141fc <__assert_fail@plt+0x32cc>
   14198:	add	r3, r4, #48	; 0x30
   1419c:	add	r9, r0, #1
   141a0:	cmp	r7, r3
   141a4:	str	r9, [r6, r5, lsl #3]
   141a8:	beq	141b4 <__assert_fail@plt+0x3284>
   141ac:	mov	r0, r7
   141b0:	bl	124b0 <__assert_fail@plt+0x1580>
   141b4:	mov	r0, r9
   141b8:	bl	17058 <__assert_fail@plt+0x6128>
   141bc:	ldr	ip, [r4, #44]	; 0x2c
   141c0:	ldr	r3, [r4]
   141c4:	ldr	lr, [r4, #40]	; 0x28
   141c8:	ldr	r4, [pc, #124]	; 1424c <__assert_fail@plt+0x331c>
   141cc:	mov	r2, sl
   141d0:	mov	r1, r9
   141d4:	str	r0, [fp, #4]
   141d8:	str	r4, [sp, #8]
   141dc:	ldr	r4, [sp, #28]
   141e0:	str	r3, [sp]
   141e4:	str	r4, [sp, #4]
   141e8:	str	ip, [sp, #16]
   141ec:	str	lr, [sp, #12]
   141f0:	mvn	r3, #0
   141f4:	mov	r7, r0
   141f8:	bl	1277c <__assert_fail@plt+0x184c>
   141fc:	ldr	r3, [sp, #24]
   14200:	mov	r0, r7
   14204:	str	r3, [r8]
   14208:	add	sp, sp, #44	; 0x2c
   1420c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14210:	mov	r3, #8
   14214:	sub	r2, r5, r2
   14218:	str	r3, [sp]
   1421c:	add	r1, sp, #36	; 0x24
   14220:	add	r2, r2, #1
   14224:	mvn	r3, #-2147483648	; 0x80000000
   14228:	bl	17274 <__assert_fail@plt+0x6344>
   1422c:	mov	r6, r0
   14230:	ldm	r7, {r0, r1}
   14234:	str	r6, [r4]
   14238:	stm	r6, {r0, r1}
   1423c:	b	14118 <__assert_fail@plt+0x31e8>
   14240:	bl	10f24 <abort@plt>
   14244:	strdeq	sl, [r2], -r4
   14248:	andeq	sl, r2, ip, ror #2
   1424c:	andeq	sl, r2, r4, ror r1
   14250:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   14254:	sub	sp, sp, #52	; 0x34
   14258:	mov	r5, r0
   1425c:	mov	sl, r1
   14260:	mov	fp, r2
   14264:	bl	10e4c <__errno_location@plt>
   14268:	ldr	r4, [pc, #408]	; 14408 <__assert_fail@plt+0x34d8>
   1426c:	cmn	r5, #-2147483647	; 0x80000001
   14270:	ldr	r6, [r4]
   14274:	mov	r8, r0
   14278:	movne	r0, #0
   1427c:	moveq	r0, #1
   14280:	ldr	r3, [r8]
   14284:	orrs	r0, r0, r5, lsr #31
   14288:	str	r3, [sp, #28]
   1428c:	bne	14404 <__assert_fail@plt+0x34d4>
   14290:	ldr	r2, [r4, #4]
   14294:	cmp	r5, r2
   14298:	blt	142f8 <__assert_fail@plt+0x33c8>
   1429c:	add	r7, r4, #8
   142a0:	cmp	r6, r7
   142a4:	str	r2, [sp, #44]	; 0x2c
   142a8:	beq	143d4 <__assert_fail@plt+0x34a4>
   142ac:	mov	r3, #8
   142b0:	sub	r2, r5, r2
   142b4:	mov	r0, r6
   142b8:	str	r3, [sp]
   142bc:	add	r2, r2, #1
   142c0:	mvn	r3, #-2147483648	; 0x80000000
   142c4:	add	r1, sp, #44	; 0x2c
   142c8:	bl	17274 <__assert_fail@plt+0x6344>
   142cc:	mov	r6, r0
   142d0:	str	r0, [r4]
   142d4:	ldr	r0, [r4, #4]
   142d8:	ldr	r2, [sp, #44]	; 0x2c
   142dc:	mov	r1, #0
   142e0:	sub	r2, r2, r0
   142e4:	add	r0, r6, r0, lsl #3
   142e8:	lsl	r2, r2, #3
   142ec:	bl	10e64 <memset@plt>
   142f0:	ldr	r3, [sp, #44]	; 0x2c
   142f4:	str	r3, [r4, #4]
   142f8:	ldr	r4, [pc, #268]	; 1440c <__assert_fail@plt+0x34dc>
   142fc:	add	r3, r6, r5, lsl #3
   14300:	str	r3, [sp, #32]
   14304:	ldr	r7, [r3, #4]
   14308:	ldr	r0, [r4, #4]
   1430c:	ldr	r3, [r4]
   14310:	ldr	r9, [r6, r5, lsl #3]
   14314:	ldr	r1, [r4, #44]	; 0x2c
   14318:	ldr	r2, [r4, #40]	; 0x28
   1431c:	orr	r0, r0, #1
   14320:	str	r3, [sp]
   14324:	add	r3, r4, #8
   14328:	str	r0, [sp, #36]	; 0x24
   1432c:	str	r0, [sp, #4]
   14330:	str	r1, [sp, #16]
   14334:	str	r2, [sp, #12]
   14338:	str	r3, [sp, #8]
   1433c:	mov	r0, r7
   14340:	mov	r1, r9
   14344:	mov	r3, fp
   14348:	mov	r2, sl
   1434c:	bl	1277c <__assert_fail@plt+0x184c>
   14350:	cmp	r9, r0
   14354:	bhi	143c0 <__assert_fail@plt+0x3490>
   14358:	add	r3, r4, #48	; 0x30
   1435c:	add	r9, r0, #1
   14360:	cmp	r7, r3
   14364:	str	r9, [r6, r5, lsl #3]
   14368:	beq	14374 <__assert_fail@plt+0x3444>
   1436c:	mov	r0, r7
   14370:	bl	124b0 <__assert_fail@plt+0x1580>
   14374:	mov	r0, r9
   14378:	bl	17058 <__assert_fail@plt+0x6128>
   1437c:	ldr	ip, [sp, #32]
   14380:	ldr	lr, [r4, #44]	; 0x2c
   14384:	ldr	r5, [r4, #40]	; 0x28
   14388:	mov	r3, fp
   1438c:	mov	r2, sl
   14390:	mov	r1, r9
   14394:	str	r0, [ip, #4]
   14398:	ldr	ip, [r4]
   1439c:	ldr	r4, [pc, #108]	; 14410 <__assert_fail@plt+0x34e0>
   143a0:	str	lr, [sp, #16]
   143a4:	str	r4, [sp, #8]
   143a8:	ldr	r4, [sp, #36]	; 0x24
   143ac:	str	r5, [sp, #12]
   143b0:	str	r4, [sp, #4]
   143b4:	str	ip, [sp]
   143b8:	mov	r7, r0
   143bc:	bl	1277c <__assert_fail@plt+0x184c>
   143c0:	ldr	r3, [sp, #28]
   143c4:	mov	r0, r7
   143c8:	str	r3, [r8]
   143cc:	add	sp, sp, #52	; 0x34
   143d0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   143d4:	mov	r3, #8
   143d8:	sub	r2, r5, r2
   143dc:	str	r3, [sp]
   143e0:	add	r1, sp, #44	; 0x2c
   143e4:	add	r2, r2, #1
   143e8:	mvn	r3, #-2147483648	; 0x80000000
   143ec:	bl	17274 <__assert_fail@plt+0x6344>
   143f0:	mov	r6, r0
   143f4:	ldm	r7, {r0, r1}
   143f8:	str	r6, [r4]
   143fc:	stm	r6, {r0, r1}
   14400:	b	142d4 <__assert_fail@plt+0x33a4>
   14404:	bl	10f24 <abort@plt>
   14408:	strdeq	sl, [r2], -r4
   1440c:	andeq	sl, r2, ip, ror #2
   14410:	andeq	sl, r2, r4, ror r1
   14414:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   14418:	sub	sp, sp, #44	; 0x2c
   1441c:	mov	sl, r0
   14420:	bl	10e4c <__errno_location@plt>
   14424:	ldr	r4, [pc, #352]	; 1458c <__assert_fail@plt+0x365c>
   14428:	ldr	r2, [r4, #4]
   1442c:	ldr	r5, [r4]
   14430:	cmp	r2, #0
   14434:	ldr	r3, [r0]
   14438:	mov	r8, r0
   1443c:	str	r3, [sp, #28]
   14440:	bgt	1449c <__assert_fail@plt+0x356c>
   14444:	add	r6, r4, #8
   14448:	cmp	r5, r6
   1444c:	str	r2, [sp, #36]	; 0x24
   14450:	beq	1455c <__assert_fail@plt+0x362c>
   14454:	mov	r3, #8
   14458:	mov	r0, r5
   1445c:	str	r3, [sp]
   14460:	rsb	r2, r2, #1
   14464:	mvn	r3, #-2147483648	; 0x80000000
   14468:	add	r1, sp, #36	; 0x24
   1446c:	bl	17274 <__assert_fail@plt+0x6344>
   14470:	mov	r5, r0
   14474:	str	r0, [r4]
   14478:	ldr	r0, [r4, #4]
   1447c:	ldr	r2, [sp, #36]	; 0x24
   14480:	mov	r1, #0
   14484:	sub	r2, r2, r0
   14488:	add	r0, r5, r0, lsl #3
   1448c:	lsl	r2, r2, #3
   14490:	bl	10e64 <memset@plt>
   14494:	ldr	r3, [sp, #36]	; 0x24
   14498:	str	r3, [r4, #4]
   1449c:	ldr	r4, [pc, #236]	; 14590 <__assert_fail@plt+0x3660>
   144a0:	ldr	r9, [r5]
   144a4:	ldr	r6, [r5, #4]
   144a8:	ldr	r7, [r4, #4]
   144ac:	ldr	r1, [r4, #44]	; 0x2c
   144b0:	ldr	r2, [r4, #40]	; 0x28
   144b4:	ldr	r3, [r4]
   144b8:	orr	r7, r7, #1
   144bc:	add	fp, r4, #8
   144c0:	str	r1, [sp, #16]
   144c4:	str	r2, [sp, #12]
   144c8:	str	r3, [sp]
   144cc:	str	r7, [sp, #4]
   144d0:	str	fp, [sp, #8]
   144d4:	mov	r1, r9
   144d8:	mov	r0, r6
   144dc:	mvn	r3, #0
   144e0:	mov	r2, sl
   144e4:	bl	1277c <__assert_fail@plt+0x184c>
   144e8:	cmp	r9, r0
   144ec:	bhi	14548 <__assert_fail@plt+0x3618>
   144f0:	add	r3, r4, #48	; 0x30
   144f4:	add	r9, r0, #1
   144f8:	cmp	r6, r3
   144fc:	str	r9, [r5]
   14500:	beq	1450c <__assert_fail@plt+0x35dc>
   14504:	mov	r0, r6
   14508:	bl	124b0 <__assert_fail@plt+0x1580>
   1450c:	mov	r0, r9
   14510:	bl	17058 <__assert_fail@plt+0x6128>
   14514:	ldr	ip, [r4, #44]	; 0x2c
   14518:	ldr	r3, [r4]
   1451c:	ldr	lr, [r4, #40]	; 0x28
   14520:	mov	r2, sl
   14524:	mov	r1, r9
   14528:	str	r0, [r5, #4]
   1452c:	str	r3, [sp]
   14530:	stmib	sp, {r7, fp}
   14534:	str	ip, [sp, #16]
   14538:	str	lr, [sp, #12]
   1453c:	mvn	r3, #0
   14540:	mov	r6, r0
   14544:	bl	1277c <__assert_fail@plt+0x184c>
   14548:	ldr	r3, [sp, #28]
   1454c:	mov	r0, r6
   14550:	str	r3, [r8]
   14554:	add	sp, sp, #44	; 0x2c
   14558:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1455c:	mov	r3, #8
   14560:	str	r3, [sp]
   14564:	add	r1, sp, #36	; 0x24
   14568:	rsb	r2, r2, #1
   1456c:	mvn	r3, #-2147483648	; 0x80000000
   14570:	mov	r0, #0
   14574:	bl	17274 <__assert_fail@plt+0x6344>
   14578:	mov	r5, r0
   1457c:	ldm	r6, {r0, r1}
   14580:	str	r5, [r4]
   14584:	stm	r5, {r0, r1}
   14588:	b	14478 <__assert_fail@plt+0x3548>
   1458c:	strdeq	sl, [r2], -r4
   14590:	andeq	sl, r2, ip, ror #2
   14594:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   14598:	sub	sp, sp, #44	; 0x2c
   1459c:	mov	r9, r0
   145a0:	mov	sl, r1
   145a4:	bl	10e4c <__errno_location@plt>
   145a8:	ldr	r4, [pc, #364]	; 1471c <__assert_fail@plt+0x37ec>
   145ac:	ldr	r2, [r4, #4]
   145b0:	ldr	r5, [r4]
   145b4:	cmp	r2, #0
   145b8:	ldr	r3, [r0]
   145bc:	mov	r7, r0
   145c0:	str	r3, [sp, #24]
   145c4:	bgt	14620 <__assert_fail@plt+0x36f0>
   145c8:	add	r6, r4, #8
   145cc:	cmp	r5, r6
   145d0:	str	r2, [sp, #36]	; 0x24
   145d4:	beq	146ec <__assert_fail@plt+0x37bc>
   145d8:	mov	r3, #8
   145dc:	mov	r0, r5
   145e0:	str	r3, [sp]
   145e4:	rsb	r2, r2, #1
   145e8:	mvn	r3, #-2147483648	; 0x80000000
   145ec:	add	r1, sp, #36	; 0x24
   145f0:	bl	17274 <__assert_fail@plt+0x6344>
   145f4:	mov	r5, r0
   145f8:	str	r0, [r4]
   145fc:	ldr	r0, [r4, #4]
   14600:	ldr	r2, [sp, #36]	; 0x24
   14604:	mov	r1, #0
   14608:	sub	r2, r2, r0
   1460c:	add	r0, r5, r0, lsl #3
   14610:	lsl	r2, r2, #3
   14614:	bl	10e64 <memset@plt>
   14618:	ldr	r3, [sp, #36]	; 0x24
   1461c:	str	r3, [r4, #4]
   14620:	ldr	r4, [pc, #248]	; 14720 <__assert_fail@plt+0x37f0>
   14624:	ldr	r8, [r5]
   14628:	ldr	r6, [r5, #4]
   1462c:	ldr	r0, [r4, #4]
   14630:	ldr	r1, [r4, #44]	; 0x2c
   14634:	ldr	r2, [r4, #40]	; 0x28
   14638:	ldr	r3, [r4]
   1463c:	orr	r0, r0, #1
   14640:	add	fp, r4, #8
   14644:	str	r0, [sp, #28]
   14648:	str	r0, [sp, #4]
   1464c:	str	r1, [sp, #16]
   14650:	str	r2, [sp, #12]
   14654:	str	r3, [sp]
   14658:	str	fp, [sp, #8]
   1465c:	mov	r1, r8
   14660:	mov	r0, r6
   14664:	mov	r3, sl
   14668:	mov	r2, r9
   1466c:	bl	1277c <__assert_fail@plt+0x184c>
   14670:	cmp	r8, r0
   14674:	bhi	146d8 <__assert_fail@plt+0x37a8>
   14678:	add	r3, r4, #48	; 0x30
   1467c:	add	r8, r0, #1
   14680:	cmp	r6, r3
   14684:	str	r8, [r5]
   14688:	beq	14694 <__assert_fail@plt+0x3764>
   1468c:	mov	r0, r6
   14690:	bl	124b0 <__assert_fail@plt+0x1580>
   14694:	mov	r0, r8
   14698:	bl	17058 <__assert_fail@plt+0x6128>
   1469c:	ldr	lr, [r4, #44]	; 0x2c
   146a0:	ldr	ip, [r4]
   146a4:	mov	r3, sl
   146a8:	mov	r2, r9
   146ac:	mov	r1, r8
   146b0:	str	r0, [r5, #4]
   146b4:	ldr	r5, [r4, #40]	; 0x28
   146b8:	ldr	r4, [sp, #28]
   146bc:	str	fp, [sp, #8]
   146c0:	str	r4, [sp, #4]
   146c4:	str	lr, [sp, #16]
   146c8:	str	r5, [sp, #12]
   146cc:	str	ip, [sp]
   146d0:	mov	r6, r0
   146d4:	bl	1277c <__assert_fail@plt+0x184c>
   146d8:	ldr	r3, [sp, #24]
   146dc:	mov	r0, r6
   146e0:	str	r3, [r7]
   146e4:	add	sp, sp, #44	; 0x2c
   146e8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   146ec:	mov	r3, #8
   146f0:	str	r3, [sp]
   146f4:	add	r1, sp, #36	; 0x24
   146f8:	rsb	r2, r2, #1
   146fc:	mvn	r3, #-2147483648	; 0x80000000
   14700:	mov	r0, #0
   14704:	bl	17274 <__assert_fail@plt+0x6344>
   14708:	mov	r5, r0
   1470c:	ldm	r6, {r0, r1}
   14710:	str	r5, [r4]
   14714:	stm	r5, {r0, r1}
   14718:	b	145fc <__assert_fail@plt+0x36cc>
   1471c:	strdeq	sl, [r2], -r4
   14720:	andeq	sl, r2, ip, ror #2
   14724:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   14728:	sub	sp, sp, #132	; 0x84
   1472c:	mov	r5, r1
   14730:	mov	r4, r0
   14734:	mov	r9, r2
   14738:	add	r0, sp, #80	; 0x50
   1473c:	mov	r2, #48	; 0x30
   14740:	mov	r1, #0
   14744:	bl	10e64 <memset@plt>
   14748:	cmp	r5, #10
   1474c:	beq	14904 <__assert_fail@plt+0x39d4>
   14750:	add	lr, sp, #80	; 0x50
   14754:	str	r5, [sp, #80]	; 0x50
   14758:	ldm	lr!, {r0, r1, r2, r3}
   1475c:	add	ip, sp, #32
   14760:	ldr	r6, [pc, #416]	; 14908 <__assert_fail@plt+0x39d8>
   14764:	stmia	ip!, {r0, r1, r2, r3}
   14768:	ldm	lr!, {r0, r1, r2, r3}
   1476c:	stmia	ip!, {r0, r1, r2, r3}
   14770:	ldm	lr, {r0, r1, r2, r3}
   14774:	stm	ip, {r0, r1, r2, r3}
   14778:	bl	10e4c <__errno_location@plt>
   1477c:	cmn	r4, #-2147483647	; 0x80000001
   14780:	ldr	r5, [r6]
   14784:	mov	r7, r0
   14788:	movne	r0, #0
   1478c:	moveq	r0, #1
   14790:	ldr	r3, [r7]
   14794:	orrs	r0, r0, r4, lsr #31
   14798:	str	r3, [sp, #24]
   1479c:	bne	14904 <__assert_fail@plt+0x39d4>
   147a0:	ldr	r2, [r6, #4]
   147a4:	cmp	r4, r2
   147a8:	blt	14808 <__assert_fail@plt+0x38d8>
   147ac:	add	r8, r6, #8
   147b0:	cmp	r5, r8
   147b4:	str	r2, [sp, #80]	; 0x50
   147b8:	beq	148d4 <__assert_fail@plt+0x39a4>
   147bc:	mov	r3, #8
   147c0:	sub	r2, r4, r2
   147c4:	mov	r0, r5
   147c8:	str	r3, [sp]
   147cc:	add	r2, r2, #1
   147d0:	add	r1, sp, #80	; 0x50
   147d4:	mvn	r3, #-2147483648	; 0x80000000
   147d8:	bl	17274 <__assert_fail@plt+0x6344>
   147dc:	mov	r5, r0
   147e0:	str	r0, [r6]
   147e4:	ldr	r0, [r6, #4]
   147e8:	ldr	r2, [sp, #80]	; 0x50
   147ec:	mov	r1, #0
   147f0:	sub	r2, r2, r0
   147f4:	add	r0, r5, r0, lsl #3
   147f8:	lsl	r2, r2, #3
   147fc:	bl	10e64 <memset@plt>
   14800:	ldr	r3, [sp, #80]	; 0x50
   14804:	str	r3, [r6, #4]
   14808:	add	fp, r5, r4, lsl #3
   1480c:	ldr	r1, [sp, #36]	; 0x24
   14810:	ldr	r8, [r5, r4, lsl #3]
   14814:	ldr	r6, [fp, #4]
   14818:	ldr	r2, [sp, #72]	; 0x48
   1481c:	ldr	r3, [sp, #32]
   14820:	ldr	ip, [sp, #76]	; 0x4c
   14824:	orr	r1, r1, #1
   14828:	add	sl, sp, #40	; 0x28
   1482c:	str	r1, [sp, #28]
   14830:	str	r1, [sp, #4]
   14834:	str	r2, [sp, #12]
   14838:	str	r3, [sp]
   1483c:	mov	r0, r6
   14840:	mov	r1, r8
   14844:	str	ip, [sp, #16]
   14848:	str	sl, [sp, #8]
   1484c:	mvn	r3, #0
   14850:	mov	r2, r9
   14854:	bl	1277c <__assert_fail@plt+0x184c>
   14858:	cmp	r8, r0
   1485c:	bhi	148c0 <__assert_fail@plt+0x3990>
   14860:	ldr	r3, [pc, #164]	; 1490c <__assert_fail@plt+0x39dc>
   14864:	add	r8, r0, #1
   14868:	cmp	r6, r3
   1486c:	str	r8, [r5, r4, lsl #3]
   14870:	beq	1487c <__assert_fail@plt+0x394c>
   14874:	mov	r0, r6
   14878:	bl	124b0 <__assert_fail@plt+0x1580>
   1487c:	mov	r0, r8
   14880:	bl	17058 <__assert_fail@plt+0x6128>
   14884:	ldr	lr, [sp, #76]	; 0x4c
   14888:	ldr	r3, [sp, #32]
   1488c:	ldr	ip, [sp, #72]	; 0x48
   14890:	ldr	r4, [sp, #28]
   14894:	mov	r2, r9
   14898:	mov	r1, r8
   1489c:	str	r0, [fp, #4]
   148a0:	str	r3, [sp]
   148a4:	str	sl, [sp, #8]
   148a8:	str	r4, [sp, #4]
   148ac:	str	lr, [sp, #16]
   148b0:	str	ip, [sp, #12]
   148b4:	mvn	r3, #0
   148b8:	mov	r6, r0
   148bc:	bl	1277c <__assert_fail@plt+0x184c>
   148c0:	ldr	r3, [sp, #24]
   148c4:	mov	r0, r6
   148c8:	str	r3, [r7]
   148cc:	add	sp, sp, #132	; 0x84
   148d0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   148d4:	mov	r3, #8
   148d8:	sub	r2, r4, r2
   148dc:	add	r1, sp, #80	; 0x50
   148e0:	str	r3, [sp]
   148e4:	add	r2, r2, #1
   148e8:	mvn	r3, #-2147483648	; 0x80000000
   148ec:	bl	17274 <__assert_fail@plt+0x6344>
   148f0:	mov	r5, r0
   148f4:	ldm	r8, {r0, r1}
   148f8:	str	r5, [r6]
   148fc:	stm	r5, {r0, r1}
   14900:	b	147e4 <__assert_fail@plt+0x38b4>
   14904:	bl	10f24 <abort@plt>
   14908:	strdeq	sl, [r2], -r4
   1490c:	muleq	r2, ip, r1
   14910:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   14914:	sub	sp, sp, #132	; 0x84
   14918:	mov	r5, r1
   1491c:	mov	r4, r0
   14920:	mov	r9, r2
   14924:	add	r0, sp, #80	; 0x50
   14928:	mov	r2, #48	; 0x30
   1492c:	mov	r1, #0
   14930:	mov	sl, r3
   14934:	bl	10e64 <memset@plt>
   14938:	cmp	r5, #10
   1493c:	beq	14af8 <__assert_fail@plt+0x3bc8>
   14940:	add	lr, sp, #80	; 0x50
   14944:	str	r5, [sp, #80]	; 0x50
   14948:	ldm	lr!, {r0, r1, r2, r3}
   1494c:	add	ip, sp, #32
   14950:	ldr	r6, [pc, #420]	; 14afc <__assert_fail@plt+0x3bcc>
   14954:	stmia	ip!, {r0, r1, r2, r3}
   14958:	ldm	lr!, {r0, r1, r2, r3}
   1495c:	stmia	ip!, {r0, r1, r2, r3}
   14960:	ldm	lr, {r0, r1, r2, r3}
   14964:	stm	ip, {r0, r1, r2, r3}
   14968:	bl	10e4c <__errno_location@plt>
   1496c:	cmn	r4, #-2147483647	; 0x80000001
   14970:	ldr	r5, [r6]
   14974:	mov	r7, r0
   14978:	movne	r0, #0
   1497c:	moveq	r0, #1
   14980:	ldr	r3, [r7]
   14984:	orrs	r0, r0, r4, lsr #31
   14988:	str	r3, [sp, #24]
   1498c:	bne	14af8 <__assert_fail@plt+0x3bc8>
   14990:	ldr	r2, [r6, #4]
   14994:	cmp	r4, r2
   14998:	blt	149f8 <__assert_fail@plt+0x3ac8>
   1499c:	add	r8, r6, #8
   149a0:	cmp	r5, r8
   149a4:	str	r2, [sp, #80]	; 0x50
   149a8:	beq	14ac8 <__assert_fail@plt+0x3b98>
   149ac:	mov	r3, #8
   149b0:	sub	r2, r4, r2
   149b4:	mov	r0, r5
   149b8:	str	r3, [sp]
   149bc:	add	r2, r2, #1
   149c0:	add	r1, sp, #80	; 0x50
   149c4:	mvn	r3, #-2147483648	; 0x80000000
   149c8:	bl	17274 <__assert_fail@plt+0x6344>
   149cc:	mov	r5, r0
   149d0:	str	r0, [r6]
   149d4:	ldr	r0, [r6, #4]
   149d8:	ldr	r2, [sp, #80]	; 0x50
   149dc:	mov	r1, #0
   149e0:	sub	r2, r2, r0
   149e4:	add	r0, r5, r0, lsl #3
   149e8:	lsl	r2, r2, #3
   149ec:	bl	10e64 <memset@plt>
   149f0:	ldr	r3, [sp, #80]	; 0x50
   149f4:	str	r3, [r6, #4]
   149f8:	add	fp, r5, r4, lsl #3
   149fc:	ldr	r3, [sp, #32]
   14a00:	ldr	r1, [sp, #36]	; 0x24
   14a04:	ldr	r8, [r5, r4, lsl #3]
   14a08:	ldr	r6, [fp, #4]
   14a0c:	ldr	r2, [sp, #72]	; 0x48
   14a10:	ldr	ip, [sp, #76]	; 0x4c
   14a14:	orr	r1, r1, #1
   14a18:	str	r3, [sp]
   14a1c:	add	r3, sp, #40	; 0x28
   14a20:	str	r1, [sp, #28]
   14a24:	str	r1, [sp, #4]
   14a28:	str	r2, [sp, #12]
   14a2c:	str	r3, [sp, #8]
   14a30:	mov	r0, r6
   14a34:	mov	r1, r8
   14a38:	str	ip, [sp, #16]
   14a3c:	mov	r3, sl
   14a40:	mov	r2, r9
   14a44:	bl	1277c <__assert_fail@plt+0x184c>
   14a48:	cmp	r8, r0
   14a4c:	bhi	14ab4 <__assert_fail@plt+0x3b84>
   14a50:	ldr	r3, [pc, #168]	; 14b00 <__assert_fail@plt+0x3bd0>
   14a54:	add	r8, r0, #1
   14a58:	cmp	r6, r3
   14a5c:	str	r8, [r5, r4, lsl #3]
   14a60:	beq	14a6c <__assert_fail@plt+0x3b3c>
   14a64:	mov	r0, r6
   14a68:	bl	124b0 <__assert_fail@plt+0x1580>
   14a6c:	mov	r0, r8
   14a70:	bl	17058 <__assert_fail@plt+0x6128>
   14a74:	add	lr, sp, #40	; 0x28
   14a78:	ldr	ip, [sp, #76]	; 0x4c
   14a7c:	ldr	r4, [sp, #72]	; 0x48
   14a80:	ldr	r5, [sp, #28]
   14a84:	mov	r3, sl
   14a88:	mov	r2, r9
   14a8c:	mov	r1, r8
   14a90:	str	r0, [fp, #4]
   14a94:	str	lr, [sp, #8]
   14a98:	ldr	lr, [sp, #32]
   14a9c:	str	r5, [sp, #4]
   14aa0:	str	ip, [sp, #16]
   14aa4:	str	r4, [sp, #12]
   14aa8:	str	lr, [sp]
   14aac:	mov	r6, r0
   14ab0:	bl	1277c <__assert_fail@plt+0x184c>
   14ab4:	ldr	r3, [sp, #24]
   14ab8:	mov	r0, r6
   14abc:	str	r3, [r7]
   14ac0:	add	sp, sp, #132	; 0x84
   14ac4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14ac8:	mov	r3, #8
   14acc:	sub	r2, r4, r2
   14ad0:	add	r1, sp, #80	; 0x50
   14ad4:	str	r3, [sp]
   14ad8:	add	r2, r2, #1
   14adc:	mvn	r3, #-2147483648	; 0x80000000
   14ae0:	bl	17274 <__assert_fail@plt+0x6344>
   14ae4:	mov	r5, r0
   14ae8:	ldm	r8, {r0, r1}
   14aec:	str	r5, [r6]
   14af0:	stm	r5, {r0, r1}
   14af4:	b	149d4 <__assert_fail@plt+0x3aa4>
   14af8:	bl	10f24 <abort@plt>
   14afc:	strdeq	sl, [r2], -r4
   14b00:	muleq	r2, ip, r1
   14b04:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   14b08:	sub	sp, sp, #124	; 0x7c
   14b0c:	mov	r4, r0
   14b10:	mov	r9, r1
   14b14:	add	r0, sp, #72	; 0x48
   14b18:	mov	r2, #48	; 0x30
   14b1c:	mov	r1, #0
   14b20:	bl	10e64 <memset@plt>
   14b24:	cmp	r4, #10
   14b28:	beq	14cb4 <__assert_fail@plt+0x3d84>
   14b2c:	add	lr, sp, #72	; 0x48
   14b30:	str	r4, [sp, #72]	; 0x48
   14b34:	ldm	lr!, {r0, r1, r2, r3}
   14b38:	add	ip, sp, #24
   14b3c:	ldr	r5, [pc, #372]	; 14cb8 <__assert_fail@plt+0x3d88>
   14b40:	stmia	ip!, {r0, r1, r2, r3}
   14b44:	ldm	lr!, {r0, r1, r2, r3}
   14b48:	stmia	ip!, {r0, r1, r2, r3}
   14b4c:	ldm	lr, {r0, r1, r2, r3}
   14b50:	stm	ip, {r0, r1, r2, r3}
   14b54:	bl	10e4c <__errno_location@plt>
   14b58:	ldr	r2, [r5, #4]
   14b5c:	ldr	r4, [r5]
   14b60:	cmp	r2, #0
   14b64:	mov	r7, r0
   14b68:	ldr	fp, [r0]
   14b6c:	bgt	14bc8 <__assert_fail@plt+0x3c98>
   14b70:	add	r6, r5, #8
   14b74:	cmp	r4, r6
   14b78:	str	r2, [sp, #72]	; 0x48
   14b7c:	beq	14c84 <__assert_fail@plt+0x3d54>
   14b80:	mov	r3, #8
   14b84:	mov	r0, r4
   14b88:	str	r3, [sp]
   14b8c:	rsb	r2, r2, #1
   14b90:	add	r1, sp, #72	; 0x48
   14b94:	mvn	r3, #-2147483648	; 0x80000000
   14b98:	bl	17274 <__assert_fail@plt+0x6344>
   14b9c:	mov	r4, r0
   14ba0:	str	r0, [r5]
   14ba4:	ldr	r0, [r5, #4]
   14ba8:	ldr	r2, [sp, #72]	; 0x48
   14bac:	mov	r1, #0
   14bb0:	sub	r2, r2, r0
   14bb4:	add	r0, r4, r0, lsl #3
   14bb8:	lsl	r2, r2, #3
   14bbc:	bl	10e64 <memset@plt>
   14bc0:	ldr	r3, [sp, #72]	; 0x48
   14bc4:	str	r3, [r5, #4]
   14bc8:	ldr	r6, [sp, #28]
   14bcc:	ldr	r8, [r4]
   14bd0:	ldr	r5, [r4, #4]
   14bd4:	ldr	r2, [sp, #64]	; 0x40
   14bd8:	ldr	r3, [sp, #24]
   14bdc:	ldr	ip, [sp, #68]	; 0x44
   14be0:	orr	r6, r6, #1
   14be4:	add	sl, sp, #32
   14be8:	str	r2, [sp, #12]
   14bec:	str	r3, [sp]
   14bf0:	str	r6, [sp, #4]
   14bf4:	mov	r1, r8
   14bf8:	mov	r0, r5
   14bfc:	str	ip, [sp, #16]
   14c00:	str	sl, [sp, #8]
   14c04:	mvn	r3, #0
   14c08:	mov	r2, r9
   14c0c:	bl	1277c <__assert_fail@plt+0x184c>
   14c10:	cmp	r8, r0
   14c14:	bhi	14c74 <__assert_fail@plt+0x3d44>
   14c18:	ldr	r3, [pc, #156]	; 14cbc <__assert_fail@plt+0x3d8c>
   14c1c:	add	r8, r0, #1
   14c20:	cmp	r5, r3
   14c24:	str	r8, [r4]
   14c28:	beq	14c34 <__assert_fail@plt+0x3d04>
   14c2c:	mov	r0, r5
   14c30:	bl	124b0 <__assert_fail@plt+0x1580>
   14c34:	mov	r0, r8
   14c38:	bl	17058 <__assert_fail@plt+0x6128>
   14c3c:	ldr	lr, [sp, #68]	; 0x44
   14c40:	ldr	r3, [sp, #24]
   14c44:	ldr	ip, [sp, #64]	; 0x40
   14c48:	mov	r2, r9
   14c4c:	mov	r1, r8
   14c50:	str	r0, [r4, #4]
   14c54:	str	r3, [sp]
   14c58:	str	sl, [sp, #8]
   14c5c:	str	r6, [sp, #4]
   14c60:	str	lr, [sp, #16]
   14c64:	str	ip, [sp, #12]
   14c68:	mvn	r3, #0
   14c6c:	mov	r5, r0
   14c70:	bl	1277c <__assert_fail@plt+0x184c>
   14c74:	mov	r0, r5
   14c78:	str	fp, [r7]
   14c7c:	add	sp, sp, #124	; 0x7c
   14c80:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14c84:	mov	r3, #8
   14c88:	add	r1, sp, #72	; 0x48
   14c8c:	str	r3, [sp]
   14c90:	rsb	r2, r2, #1
   14c94:	mvn	r3, #-2147483648	; 0x80000000
   14c98:	mov	r0, #0
   14c9c:	bl	17274 <__assert_fail@plt+0x6344>
   14ca0:	mov	r4, r0
   14ca4:	ldm	r6, {r0, r1}
   14ca8:	str	r4, [r5]
   14cac:	stm	r4, {r0, r1}
   14cb0:	b	14ba4 <__assert_fail@plt+0x3c74>
   14cb4:	bl	10f24 <abort@plt>
   14cb8:	strdeq	sl, [r2], -r4
   14cbc:	muleq	r2, ip, r1
   14cc0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   14cc4:	sub	sp, sp, #132	; 0x84
   14cc8:	mov	r4, r0
   14ccc:	mov	r9, r1
   14cd0:	mov	sl, r2
   14cd4:	add	r0, sp, #80	; 0x50
   14cd8:	mov	r2, #48	; 0x30
   14cdc:	mov	r1, #0
   14ce0:	bl	10e64 <memset@plt>
   14ce4:	cmp	r4, #10
   14ce8:	beq	14e7c <__assert_fail@plt+0x3f4c>
   14cec:	add	lr, sp, #80	; 0x50
   14cf0:	str	r4, [sp, #80]	; 0x50
   14cf4:	ldm	lr!, {r0, r1, r2, r3}
   14cf8:	add	ip, sp, #32
   14cfc:	ldr	r5, [pc, #380]	; 14e80 <__assert_fail@plt+0x3f50>
   14d00:	stmia	ip!, {r0, r1, r2, r3}
   14d04:	ldm	lr!, {r0, r1, r2, r3}
   14d08:	stmia	ip!, {r0, r1, r2, r3}
   14d0c:	ldm	lr, {r0, r1, r2, r3}
   14d10:	stm	ip, {r0, r1, r2, r3}
   14d14:	bl	10e4c <__errno_location@plt>
   14d18:	ldr	r2, [r5, #4]
   14d1c:	ldr	r4, [r5]
   14d20:	cmp	r2, #0
   14d24:	ldr	r3, [r0]
   14d28:	mov	r7, r0
   14d2c:	str	r3, [sp, #28]
   14d30:	bgt	14d8c <__assert_fail@plt+0x3e5c>
   14d34:	add	r6, r5, #8
   14d38:	cmp	r4, r6
   14d3c:	str	r2, [sp, #80]	; 0x50
   14d40:	beq	14e4c <__assert_fail@plt+0x3f1c>
   14d44:	mov	r3, #8
   14d48:	mov	r0, r4
   14d4c:	str	r3, [sp]
   14d50:	rsb	r2, r2, #1
   14d54:	add	r1, sp, #80	; 0x50
   14d58:	mvn	r3, #-2147483648	; 0x80000000
   14d5c:	bl	17274 <__assert_fail@plt+0x6344>
   14d60:	mov	r4, r0
   14d64:	str	r0, [r5]
   14d68:	ldr	r0, [r5, #4]
   14d6c:	ldr	r2, [sp, #80]	; 0x50
   14d70:	mov	r1, #0
   14d74:	sub	r2, r2, r0
   14d78:	add	r0, r4, r0, lsl #3
   14d7c:	lsl	r2, r2, #3
   14d80:	bl	10e64 <memset@plt>
   14d84:	ldr	r3, [sp, #80]	; 0x50
   14d88:	str	r3, [r5, #4]
   14d8c:	ldr	r6, [sp, #36]	; 0x24
   14d90:	ldr	r8, [r4]
   14d94:	ldr	r5, [r4, #4]
   14d98:	ldr	r2, [sp, #72]	; 0x48
   14d9c:	ldr	r3, [sp, #32]
   14da0:	ldr	ip, [sp, #76]	; 0x4c
   14da4:	orr	r6, r6, #1
   14da8:	add	fp, sp, #40	; 0x28
   14dac:	str	r2, [sp, #12]
   14db0:	str	r3, [sp]
   14db4:	str	r6, [sp, #4]
   14db8:	mov	r1, r8
   14dbc:	mov	r0, r5
   14dc0:	str	ip, [sp, #16]
   14dc4:	str	fp, [sp, #8]
   14dc8:	mov	r3, sl
   14dcc:	mov	r2, r9
   14dd0:	bl	1277c <__assert_fail@plt+0x184c>
   14dd4:	cmp	r8, r0
   14dd8:	bhi	14e38 <__assert_fail@plt+0x3f08>
   14ddc:	ldr	r3, [pc, #160]	; 14e84 <__assert_fail@plt+0x3f54>
   14de0:	add	r8, r0, #1
   14de4:	cmp	r5, r3
   14de8:	str	r8, [r4]
   14dec:	beq	14df8 <__assert_fail@plt+0x3ec8>
   14df0:	mov	r0, r5
   14df4:	bl	124b0 <__assert_fail@plt+0x1580>
   14df8:	mov	r0, r8
   14dfc:	bl	17058 <__assert_fail@plt+0x6128>
   14e00:	ldr	ip, [sp, #76]	; 0x4c
   14e04:	ldr	lr, [sp, #32]
   14e08:	mov	r3, sl
   14e0c:	mov	r2, r9
   14e10:	mov	r1, r8
   14e14:	str	r0, [r4, #4]
   14e18:	ldr	r4, [sp, #72]	; 0x48
   14e1c:	str	fp, [sp, #8]
   14e20:	str	r6, [sp, #4]
   14e24:	str	ip, [sp, #16]
   14e28:	str	r4, [sp, #12]
   14e2c:	str	lr, [sp]
   14e30:	mov	r5, r0
   14e34:	bl	1277c <__assert_fail@plt+0x184c>
   14e38:	ldr	r3, [sp, #28]
   14e3c:	mov	r0, r5
   14e40:	str	r3, [r7]
   14e44:	add	sp, sp, #132	; 0x84
   14e48:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14e4c:	mov	r3, #8
   14e50:	add	r1, sp, #80	; 0x50
   14e54:	str	r3, [sp]
   14e58:	rsb	r2, r2, #1
   14e5c:	mvn	r3, #-2147483648	; 0x80000000
   14e60:	mov	r0, #0
   14e64:	bl	17274 <__assert_fail@plt+0x6344>
   14e68:	mov	r4, r0
   14e6c:	ldm	r6, {r0, r1}
   14e70:	str	r4, [r5]
   14e74:	stm	r4, {r0, r1}
   14e78:	b	14d68 <__assert_fail@plt+0x3e38>
   14e7c:	bl	10f24 <abort@plt>
   14e80:	strdeq	sl, [r2], -r4
   14e84:	muleq	r2, ip, r1
   14e88:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   14e8c:	mov	r4, r2
   14e90:	ldr	lr, [pc, #432]	; 15048 <__assert_fail@plt+0x4118>
   14e94:	mov	sl, r0
   14e98:	mov	fp, r1
   14e9c:	ldm	lr!, {r0, r1, r2, r3}
   14ea0:	sub	sp, sp, #92	; 0x5c
   14ea4:	add	ip, sp, #40	; 0x28
   14ea8:	lsr	r7, r4, #5
   14eac:	stmia	ip!, {r0, r1, r2, r3}
   14eb0:	add	r6, sp, #48	; 0x30
   14eb4:	ldm	lr!, {r0, r1, r2, r3}
   14eb8:	and	r4, r4, #31
   14ebc:	ldr	r5, [pc, #392]	; 1504c <__assert_fail@plt+0x411c>
   14ec0:	stmia	ip!, {r0, r1, r2, r3}
   14ec4:	ldm	lr, {r0, r1, r2, r3}
   14ec8:	stm	ip, {r0, r1, r2, r3}
   14ecc:	ldr	r2, [r6, r7, lsl #2]
   14ed0:	lsr	r3, r2, r4
   14ed4:	eor	r3, r3, #1
   14ed8:	and	r3, r3, #1
   14edc:	eor	r4, r2, r3, lsl r4
   14ee0:	str	r4, [r6, r7, lsl #2]
   14ee4:	bl	10e4c <__errno_location@plt>
   14ee8:	ldr	r2, [r5, #4]
   14eec:	ldr	r4, [r5]
   14ef0:	cmp	r2, #0
   14ef4:	ldr	r3, [r0]
   14ef8:	mov	r8, r0
   14efc:	str	r3, [sp, #28]
   14f00:	bgt	14f5c <__assert_fail@plt+0x402c>
   14f04:	add	r7, r5, #8
   14f08:	cmp	r4, r7
   14f0c:	str	r2, [sp, #36]	; 0x24
   14f10:	beq	15018 <__assert_fail@plt+0x40e8>
   14f14:	mov	r3, #8
   14f18:	mov	r0, r4
   14f1c:	str	r3, [sp]
   14f20:	rsb	r2, r2, #1
   14f24:	mvn	r3, #-2147483648	; 0x80000000
   14f28:	add	r1, sp, #36	; 0x24
   14f2c:	bl	17274 <__assert_fail@plt+0x6344>
   14f30:	mov	r4, r0
   14f34:	str	r0, [r5]
   14f38:	ldr	r0, [r5, #4]
   14f3c:	ldr	r2, [sp, #36]	; 0x24
   14f40:	mov	r1, #0
   14f44:	sub	r2, r2, r0
   14f48:	add	r0, r4, r0, lsl #3
   14f4c:	lsl	r2, r2, #3
   14f50:	bl	10e64 <memset@plt>
   14f54:	ldr	r3, [sp, #36]	; 0x24
   14f58:	str	r3, [r5, #4]
   14f5c:	ldr	r7, [sp, #44]	; 0x2c
   14f60:	ldr	r9, [r4]
   14f64:	ldr	r5, [r4, #4]
   14f68:	ldr	r2, [sp, #80]	; 0x50
   14f6c:	ldr	r3, [sp, #40]	; 0x28
   14f70:	ldr	ip, [sp, #84]	; 0x54
   14f74:	orr	r7, r7, #1
   14f78:	str	r2, [sp, #12]
   14f7c:	str	r3, [sp]
   14f80:	str	r7, [sp, #4]
   14f84:	str	r6, [sp, #8]
   14f88:	mov	r1, r9
   14f8c:	mov	r0, r5
   14f90:	str	ip, [sp, #16]
   14f94:	mov	r3, fp
   14f98:	mov	r2, sl
   14f9c:	bl	1277c <__assert_fail@plt+0x184c>
   14fa0:	cmp	r9, r0
   14fa4:	bhi	15004 <__assert_fail@plt+0x40d4>
   14fa8:	ldr	r3, [pc, #160]	; 15050 <__assert_fail@plt+0x4120>
   14fac:	add	r9, r0, #1
   14fb0:	cmp	r5, r3
   14fb4:	str	r9, [r4]
   14fb8:	beq	14fc4 <__assert_fail@plt+0x4094>
   14fbc:	mov	r0, r5
   14fc0:	bl	124b0 <__assert_fail@plt+0x1580>
   14fc4:	mov	r0, r9
   14fc8:	bl	17058 <__assert_fail@plt+0x6128>
   14fcc:	ldr	ip, [sp, #84]	; 0x54
   14fd0:	ldr	lr, [sp, #40]	; 0x28
   14fd4:	mov	r3, fp
   14fd8:	mov	r2, sl
   14fdc:	mov	r1, r9
   14fe0:	str	r0, [r4, #4]
   14fe4:	ldr	r4, [sp, #80]	; 0x50
   14fe8:	str	r6, [sp, #8]
   14fec:	str	r7, [sp, #4]
   14ff0:	str	ip, [sp, #16]
   14ff4:	str	r4, [sp, #12]
   14ff8:	str	lr, [sp]
   14ffc:	mov	r5, r0
   15000:	bl	1277c <__assert_fail@plt+0x184c>
   15004:	ldr	r3, [sp, #28]
   15008:	mov	r0, r5
   1500c:	str	r3, [r8]
   15010:	add	sp, sp, #92	; 0x5c
   15014:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15018:	mov	r3, #8
   1501c:	str	r3, [sp]
   15020:	add	r1, sp, #36	; 0x24
   15024:	rsb	r2, r2, #1
   15028:	mvn	r3, #-2147483648	; 0x80000000
   1502c:	mov	r0, #0
   15030:	bl	17274 <__assert_fail@plt+0x6344>
   15034:	mov	r4, r0
   15038:	ldm	r7, {r0, r1}
   1503c:	str	r4, [r5]
   15040:	stm	r4, {r0, r1}
   15044:	b	14f38 <__assert_fail@plt+0x4008>
   15048:	andeq	sl, r2, ip, ror #2
   1504c:	strdeq	sl, [r2], -r4
   15050:	muleq	r2, ip, r1
   15054:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   15058:	mov	r4, r1
   1505c:	ldr	lr, [pc, #420]	; 15208 <__assert_fail@plt+0x42d8>
   15060:	mov	r6, r0
   15064:	sub	sp, sp, #84	; 0x54
   15068:	ldm	lr!, {r0, r1, r2, r3}
   1506c:	add	ip, sp, #32
   15070:	lsr	r8, r4, #5
   15074:	add	r5, sp, #40	; 0x28
   15078:	stmia	ip!, {r0, r1, r2, r3}
   1507c:	and	r4, r4, #31
   15080:	ldm	lr!, {r0, r1, r2, r3}
   15084:	ldr	r7, [pc, #384]	; 1520c <__assert_fail@plt+0x42dc>
   15088:	stmia	ip!, {r0, r1, r2, r3}
   1508c:	ldm	lr, {r0, r1, r2, r3}
   15090:	stm	ip, {r0, r1, r2, r3}
   15094:	ldr	r2, [r5, r8, lsl #2]
   15098:	lsr	r3, r2, r4
   1509c:	eor	r3, r3, #1
   150a0:	and	r3, r3, #1
   150a4:	eor	r4, r2, r3, lsl r4
   150a8:	str	r4, [r5, r8, lsl #2]
   150ac:	bl	10e4c <__errno_location@plt>
   150b0:	ldr	r2, [r7, #4]
   150b4:	ldr	r4, [r7]
   150b8:	cmp	r2, #0
   150bc:	mov	r9, r0
   150c0:	ldr	sl, [r0]
   150c4:	bgt	15120 <__assert_fail@plt+0x41f0>
   150c8:	add	r8, r7, #8
   150cc:	cmp	r4, r8
   150d0:	str	r2, [sp, #28]
   150d4:	beq	151d8 <__assert_fail@plt+0x42a8>
   150d8:	mov	r3, #8
   150dc:	mov	r0, r4
   150e0:	str	r3, [sp]
   150e4:	rsb	r2, r2, #1
   150e8:	mvn	r3, #-2147483648	; 0x80000000
   150ec:	add	r1, sp, #28
   150f0:	bl	17274 <__assert_fail@plt+0x6344>
   150f4:	mov	r4, r0
   150f8:	str	r0, [r7]
   150fc:	ldr	r0, [r7, #4]
   15100:	ldr	r2, [sp, #28]
   15104:	mov	r1, #0
   15108:	sub	r2, r2, r0
   1510c:	add	r0, r4, r0, lsl #3
   15110:	lsl	r2, r2, #3
   15114:	bl	10e64 <memset@plt>
   15118:	ldr	r3, [sp, #28]
   1511c:	str	r3, [r7, #4]
   15120:	ldr	r8, [sp, #36]	; 0x24
   15124:	ldr	fp, [r4]
   15128:	ldr	r7, [r4, #4]
   1512c:	ldr	r2, [sp, #72]	; 0x48
   15130:	ldr	r3, [sp, #32]
   15134:	ldr	ip, [sp, #76]	; 0x4c
   15138:	orr	r8, r8, #1
   1513c:	str	r2, [sp, #12]
   15140:	str	r3, [sp]
   15144:	str	r8, [sp, #4]
   15148:	str	r5, [sp, #8]
   1514c:	mov	r1, fp
   15150:	mov	r0, r7
   15154:	str	ip, [sp, #16]
   15158:	mvn	r3, #0
   1515c:	mov	r2, r6
   15160:	bl	1277c <__assert_fail@plt+0x184c>
   15164:	cmp	fp, r0
   15168:	bhi	151c8 <__assert_fail@plt+0x4298>
   1516c:	ldr	r3, [pc, #156]	; 15210 <__assert_fail@plt+0x42e0>
   15170:	add	fp, r0, #1
   15174:	cmp	r7, r3
   15178:	str	fp, [r4]
   1517c:	beq	15188 <__assert_fail@plt+0x4258>
   15180:	mov	r0, r7
   15184:	bl	124b0 <__assert_fail@plt+0x1580>
   15188:	mov	r0, fp
   1518c:	bl	17058 <__assert_fail@plt+0x6128>
   15190:	ldr	lr, [sp, #76]	; 0x4c
   15194:	ldr	r3, [sp, #32]
   15198:	ldr	ip, [sp, #72]	; 0x48
   1519c:	mov	r2, r6
   151a0:	mov	r1, fp
   151a4:	str	r0, [r4, #4]
   151a8:	str	r3, [sp]
   151ac:	str	r5, [sp, #8]
   151b0:	str	r8, [sp, #4]
   151b4:	str	lr, [sp, #16]
   151b8:	str	ip, [sp, #12]
   151bc:	mvn	r3, #0
   151c0:	mov	r7, r0
   151c4:	bl	1277c <__assert_fail@plt+0x184c>
   151c8:	mov	r0, r7
   151cc:	str	sl, [r9]
   151d0:	add	sp, sp, #84	; 0x54
   151d4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   151d8:	mov	r3, #8
   151dc:	str	r3, [sp]
   151e0:	add	r1, sp, #28
   151e4:	rsb	r2, r2, #1
   151e8:	mvn	r3, #-2147483648	; 0x80000000
   151ec:	mov	r0, #0
   151f0:	bl	17274 <__assert_fail@plt+0x6344>
   151f4:	mov	r4, r0
   151f8:	ldm	r8, {r0, r1}
   151fc:	str	r4, [r7]
   15200:	stm	r4, {r0, r1}
   15204:	b	150fc <__assert_fail@plt+0x41cc>
   15208:	andeq	sl, r2, ip, ror #2
   1520c:	strdeq	sl, [r2], -r4
   15210:	muleq	r2, ip, r1
   15214:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   15218:	mov	r6, r0
   1521c:	ldr	lr, [pc, #404]	; 153b8 <__assert_fail@plt+0x4488>
   15220:	sub	sp, sp, #84	; 0x54
   15224:	add	ip, sp, #32
   15228:	ldm	lr!, {r0, r1, r2, r3}
   1522c:	ldr	r5, [pc, #392]	; 153bc <__assert_fail@plt+0x448c>
   15230:	stmia	ip!, {r0, r1, r2, r3}
   15234:	ldm	lr!, {r0, r1, r2, r3}
   15238:	ldr	r4, [sp, #44]	; 0x2c
   1523c:	stmia	ip!, {r0, r1, r2, r3}
   15240:	ldm	lr, {r0, r1, r2, r3}
   15244:	mvn	lr, r4
   15248:	and	lr, lr, #67108864	; 0x4000000
   1524c:	eor	lr, lr, r4
   15250:	stm	ip, {r0, r1, r2, r3}
   15254:	str	lr, [sp, #44]	; 0x2c
   15258:	bl	10e4c <__errno_location@plt>
   1525c:	ldr	r2, [r5, #4]
   15260:	ldr	r4, [r5]
   15264:	cmp	r2, #0
   15268:	mov	r8, r0
   1526c:	ldr	sl, [r0]
   15270:	bgt	152cc <__assert_fail@plt+0x439c>
   15274:	add	r7, r5, #8
   15278:	cmp	r4, r7
   1527c:	str	r2, [sp, #28]
   15280:	beq	15388 <__assert_fail@plt+0x4458>
   15284:	mov	r3, #8
   15288:	mov	r0, r4
   1528c:	str	r3, [sp]
   15290:	rsb	r2, r2, #1
   15294:	mvn	r3, #-2147483648	; 0x80000000
   15298:	add	r1, sp, #28
   1529c:	bl	17274 <__assert_fail@plt+0x6344>
   152a0:	mov	r4, r0
   152a4:	str	r0, [r5]
   152a8:	ldr	r0, [r5, #4]
   152ac:	ldr	r2, [sp, #28]
   152b0:	mov	r1, #0
   152b4:	sub	r2, r2, r0
   152b8:	add	r0, r4, r0, lsl #3
   152bc:	lsl	r2, r2, #3
   152c0:	bl	10e64 <memset@plt>
   152c4:	ldr	r3, [sp, #28]
   152c8:	str	r3, [r5, #4]
   152cc:	ldr	r7, [sp, #36]	; 0x24
   152d0:	ldr	r9, [r4]
   152d4:	ldr	r5, [r4, #4]
   152d8:	ldr	r2, [sp, #72]	; 0x48
   152dc:	ldr	r3, [sp, #32]
   152e0:	ldr	ip, [sp, #76]	; 0x4c
   152e4:	orr	r7, r7, #1
   152e8:	add	fp, sp, #40	; 0x28
   152ec:	str	r2, [sp, #12]
   152f0:	str	r3, [sp]
   152f4:	str	r7, [sp, #4]
   152f8:	mov	r1, r9
   152fc:	mov	r0, r5
   15300:	str	ip, [sp, #16]
   15304:	str	fp, [sp, #8]
   15308:	mvn	r3, #0
   1530c:	mov	r2, r6
   15310:	bl	1277c <__assert_fail@plt+0x184c>
   15314:	cmp	r9, r0
   15318:	bhi	15378 <__assert_fail@plt+0x4448>
   1531c:	ldr	r3, [pc, #156]	; 153c0 <__assert_fail@plt+0x4490>
   15320:	add	r9, r0, #1
   15324:	cmp	r5, r3
   15328:	str	r9, [r4]
   1532c:	beq	15338 <__assert_fail@plt+0x4408>
   15330:	mov	r0, r5
   15334:	bl	124b0 <__assert_fail@plt+0x1580>
   15338:	mov	r0, r9
   1533c:	bl	17058 <__assert_fail@plt+0x6128>
   15340:	ldr	lr, [sp, #76]	; 0x4c
   15344:	ldr	r3, [sp, #32]
   15348:	ldr	ip, [sp, #72]	; 0x48
   1534c:	mov	r2, r6
   15350:	mov	r1, r9
   15354:	str	r0, [r4, #4]
   15358:	str	r3, [sp]
   1535c:	str	fp, [sp, #8]
   15360:	str	r7, [sp, #4]
   15364:	str	lr, [sp, #16]
   15368:	str	ip, [sp, #12]
   1536c:	mvn	r3, #0
   15370:	mov	r5, r0
   15374:	bl	1277c <__assert_fail@plt+0x184c>
   15378:	mov	r0, r5
   1537c:	str	sl, [r8]
   15380:	add	sp, sp, #84	; 0x54
   15384:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15388:	mov	r3, #8
   1538c:	str	r3, [sp]
   15390:	add	r1, sp, #28
   15394:	rsb	r2, r2, #1
   15398:	mvn	r3, #-2147483648	; 0x80000000
   1539c:	mov	r0, #0
   153a0:	bl	17274 <__assert_fail@plt+0x6344>
   153a4:	mov	r4, r0
   153a8:	ldm	r7, {r0, r1}
   153ac:	str	r4, [r5]
   153b0:	stm	r4, {r0, r1}
   153b4:	b	152a8 <__assert_fail@plt+0x4378>
   153b8:	andeq	sl, r2, ip, ror #2
   153bc:	strdeq	sl, [r2], -r4
   153c0:	muleq	r2, ip, r1
   153c4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   153c8:	mov	r9, r0
   153cc:	ldr	lr, [pc, #416]	; 15574 <__assert_fail@plt+0x4644>
   153d0:	mov	sl, r1
   153d4:	sub	sp, sp, #92	; 0x5c
   153d8:	ldm	lr!, {r0, r1, r2, r3}
   153dc:	add	ip, sp, #40	; 0x28
   153e0:	ldr	r5, [pc, #400]	; 15578 <__assert_fail@plt+0x4648>
   153e4:	stmia	ip!, {r0, r1, r2, r3}
   153e8:	ldm	lr!, {r0, r1, r2, r3}
   153ec:	ldr	r4, [sp, #52]	; 0x34
   153f0:	stmia	ip!, {r0, r1, r2, r3}
   153f4:	ldm	lr, {r0, r1, r2, r3}
   153f8:	mvn	lr, r4
   153fc:	and	lr, lr, #67108864	; 0x4000000
   15400:	eor	lr, lr, r4
   15404:	stm	ip, {r0, r1, r2, r3}
   15408:	str	lr, [sp, #52]	; 0x34
   1540c:	bl	10e4c <__errno_location@plt>
   15410:	ldr	r2, [r5, #4]
   15414:	ldr	r4, [r5]
   15418:	cmp	r2, #0
   1541c:	ldr	r3, [r0]
   15420:	mov	r7, r0
   15424:	str	r3, [sp, #28]
   15428:	bgt	15484 <__assert_fail@plt+0x4554>
   1542c:	add	r6, r5, #8
   15430:	cmp	r4, r6
   15434:	str	r2, [sp, #36]	; 0x24
   15438:	beq	15544 <__assert_fail@plt+0x4614>
   1543c:	mov	r3, #8
   15440:	mov	r0, r4
   15444:	str	r3, [sp]
   15448:	rsb	r2, r2, #1
   1544c:	mvn	r3, #-2147483648	; 0x80000000
   15450:	add	r1, sp, #36	; 0x24
   15454:	bl	17274 <__assert_fail@plt+0x6344>
   15458:	mov	r4, r0
   1545c:	str	r0, [r5]
   15460:	ldr	r0, [r5, #4]
   15464:	ldr	r2, [sp, #36]	; 0x24
   15468:	mov	r1, #0
   1546c:	sub	r2, r2, r0
   15470:	add	r0, r4, r0, lsl #3
   15474:	lsl	r2, r2, #3
   15478:	bl	10e64 <memset@plt>
   1547c:	ldr	r3, [sp, #36]	; 0x24
   15480:	str	r3, [r5, #4]
   15484:	ldr	r6, [sp, #44]	; 0x2c
   15488:	ldr	r8, [r4]
   1548c:	ldr	r5, [r4, #4]
   15490:	ldr	r2, [sp, #80]	; 0x50
   15494:	ldr	r3, [sp, #40]	; 0x28
   15498:	ldr	ip, [sp, #84]	; 0x54
   1549c:	orr	r6, r6, #1
   154a0:	add	fp, sp, #48	; 0x30
   154a4:	str	r2, [sp, #12]
   154a8:	str	r3, [sp]
   154ac:	str	r6, [sp, #4]
   154b0:	mov	r1, r8
   154b4:	mov	r0, r5
   154b8:	str	ip, [sp, #16]
   154bc:	str	fp, [sp, #8]
   154c0:	mov	r3, sl
   154c4:	mov	r2, r9
   154c8:	bl	1277c <__assert_fail@plt+0x184c>
   154cc:	cmp	r8, r0
   154d0:	bhi	15530 <__assert_fail@plt+0x4600>
   154d4:	ldr	r3, [pc, #160]	; 1557c <__assert_fail@plt+0x464c>
   154d8:	add	r8, r0, #1
   154dc:	cmp	r5, r3
   154e0:	str	r8, [r4]
   154e4:	beq	154f0 <__assert_fail@plt+0x45c0>
   154e8:	mov	r0, r5
   154ec:	bl	124b0 <__assert_fail@plt+0x1580>
   154f0:	mov	r0, r8
   154f4:	bl	17058 <__assert_fail@plt+0x6128>
   154f8:	ldr	ip, [sp, #84]	; 0x54
   154fc:	ldr	lr, [sp, #40]	; 0x28
   15500:	mov	r3, sl
   15504:	mov	r2, r9
   15508:	mov	r1, r8
   1550c:	str	r0, [r4, #4]
   15510:	ldr	r4, [sp, #80]	; 0x50
   15514:	str	fp, [sp, #8]
   15518:	str	r6, [sp, #4]
   1551c:	str	ip, [sp, #16]
   15520:	str	r4, [sp, #12]
   15524:	str	lr, [sp]
   15528:	mov	r5, r0
   1552c:	bl	1277c <__assert_fail@plt+0x184c>
   15530:	ldr	r3, [sp, #28]
   15534:	mov	r0, r5
   15538:	str	r3, [r7]
   1553c:	add	sp, sp, #92	; 0x5c
   15540:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15544:	mov	r3, #8
   15548:	str	r3, [sp]
   1554c:	add	r1, sp, #36	; 0x24
   15550:	rsb	r2, r2, #1
   15554:	mvn	r3, #-2147483648	; 0x80000000
   15558:	mov	r0, #0
   1555c:	bl	17274 <__assert_fail@plt+0x6344>
   15560:	mov	r4, r0
   15564:	ldm	r6, {r0, r1}
   15568:	str	r4, [r5]
   1556c:	stm	r4, {r0, r1}
   15570:	b	15460 <__assert_fail@plt+0x4530>
   15574:	andeq	sl, r2, ip, ror #2
   15578:	strdeq	sl, [r2], -r4
   1557c:	muleq	r2, ip, r1
   15580:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   15584:	sub	sp, sp, #180	; 0xb4
   15588:	mov	r6, r1
   1558c:	mov	r4, r0
   15590:	mov	r9, r2
   15594:	add	r0, sp, #80	; 0x50
   15598:	mov	r2, #48	; 0x30
   1559c:	mov	r1, #0
   155a0:	bl	10e64 <memset@plt>
   155a4:	cmp	r6, #10
   155a8:	beq	15788 <__assert_fail@plt+0x4858>
   155ac:	add	r5, sp, #80	; 0x50
   155b0:	str	r6, [sp, #80]	; 0x50
   155b4:	ldm	r5!, {r0, r1, r2, r3}
   155b8:	add	ip, sp, #128	; 0x80
   155bc:	mov	r7, ip
   155c0:	add	lr, sp, #32
   155c4:	stmia	ip!, {r0, r1, r2, r3}
   155c8:	mov	r8, #67108864	; 0x4000000
   155cc:	ldm	r5!, {r0, r1, r2, r3}
   155d0:	ldr	r6, [pc, #436]	; 1578c <__assert_fail@plt+0x485c>
   155d4:	stmia	ip!, {r0, r1, r2, r3}
   155d8:	ldm	r5, {r0, r1, r2, r3}
   155dc:	stm	ip, {r0, r1, r2, r3}
   155e0:	ldm	r7!, {r0, r1, r2, r3}
   155e4:	stmia	lr!, {r0, r1, r2, r3}
   155e8:	ldm	r7!, {r0, r1, r2, r3}
   155ec:	str	r8, [sp, #44]	; 0x2c
   155f0:	stmia	lr!, {r0, r1, r2, r3}
   155f4:	ldm	ip, {r0, r1, r2, r3}
   155f8:	stm	lr, {r0, r1, r2, r3}
   155fc:	bl	10e4c <__errno_location@plt>
   15600:	cmn	r4, #-2147483647	; 0x80000001
   15604:	ldr	r5, [r6]
   15608:	mov	r7, r0
   1560c:	movne	r0, #0
   15610:	moveq	r0, #1
   15614:	ldr	r3, [r7]
   15618:	orrs	r0, r0, r4, lsr #31
   1561c:	str	r3, [sp, #24]
   15620:	bne	15788 <__assert_fail@plt+0x4858>
   15624:	ldr	r2, [r6, #4]
   15628:	cmp	r4, r2
   1562c:	blt	1568c <__assert_fail@plt+0x475c>
   15630:	add	r8, r6, #8
   15634:	cmp	r5, r8
   15638:	str	r2, [sp, #80]	; 0x50
   1563c:	beq	15758 <__assert_fail@plt+0x4828>
   15640:	mov	r3, #8
   15644:	sub	r2, r4, r2
   15648:	mov	r0, r5
   1564c:	str	r3, [sp]
   15650:	add	r2, r2, #1
   15654:	add	r1, sp, #80	; 0x50
   15658:	mvn	r3, #-2147483648	; 0x80000000
   1565c:	bl	17274 <__assert_fail@plt+0x6344>
   15660:	mov	r5, r0
   15664:	str	r0, [r6]
   15668:	ldr	r0, [r6, #4]
   1566c:	ldr	r2, [sp, #80]	; 0x50
   15670:	mov	r1, #0
   15674:	sub	r2, r2, r0
   15678:	add	r0, r5, r0, lsl #3
   1567c:	lsl	r2, r2, #3
   15680:	bl	10e64 <memset@plt>
   15684:	ldr	r3, [sp, #80]	; 0x50
   15688:	str	r3, [r6, #4]
   1568c:	add	fp, r5, r4, lsl #3
   15690:	ldr	r1, [sp, #36]	; 0x24
   15694:	ldr	r8, [r5, r4, lsl #3]
   15698:	ldr	r6, [fp, #4]
   1569c:	ldr	r2, [sp, #72]	; 0x48
   156a0:	ldr	r3, [sp, #32]
   156a4:	ldr	ip, [sp, #76]	; 0x4c
   156a8:	orr	r1, r1, #1
   156ac:	add	sl, sp, #40	; 0x28
   156b0:	str	r1, [sp, #28]
   156b4:	str	r1, [sp, #4]
   156b8:	str	r2, [sp, #12]
   156bc:	str	r3, [sp]
   156c0:	mov	r0, r6
   156c4:	mov	r1, r8
   156c8:	str	ip, [sp, #16]
   156cc:	str	sl, [sp, #8]
   156d0:	mvn	r3, #0
   156d4:	mov	r2, r9
   156d8:	bl	1277c <__assert_fail@plt+0x184c>
   156dc:	cmp	r8, r0
   156e0:	bhi	15744 <__assert_fail@plt+0x4814>
   156e4:	ldr	r3, [pc, #164]	; 15790 <__assert_fail@plt+0x4860>
   156e8:	add	r8, r0, #1
   156ec:	cmp	r6, r3
   156f0:	str	r8, [r5, r4, lsl #3]
   156f4:	beq	15700 <__assert_fail@plt+0x47d0>
   156f8:	mov	r0, r6
   156fc:	bl	124b0 <__assert_fail@plt+0x1580>
   15700:	mov	r0, r8
   15704:	bl	17058 <__assert_fail@plt+0x6128>
   15708:	ldr	lr, [sp, #76]	; 0x4c
   1570c:	ldr	r3, [sp, #32]
   15710:	ldr	ip, [sp, #72]	; 0x48
   15714:	ldr	r4, [sp, #28]
   15718:	mov	r2, r9
   1571c:	mov	r1, r8
   15720:	str	r0, [fp, #4]
   15724:	str	r3, [sp]
   15728:	str	sl, [sp, #8]
   1572c:	str	r4, [sp, #4]
   15730:	str	lr, [sp, #16]
   15734:	str	ip, [sp, #12]
   15738:	mvn	r3, #0
   1573c:	mov	r6, r0
   15740:	bl	1277c <__assert_fail@plt+0x184c>
   15744:	ldr	r3, [sp, #24]
   15748:	mov	r0, r6
   1574c:	str	r3, [r7]
   15750:	add	sp, sp, #180	; 0xb4
   15754:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15758:	mov	r3, #8
   1575c:	sub	r2, r4, r2
   15760:	add	r1, sp, #80	; 0x50
   15764:	str	r3, [sp]
   15768:	add	r2, r2, #1
   1576c:	mvn	r3, #-2147483648	; 0x80000000
   15770:	bl	17274 <__assert_fail@plt+0x6344>
   15774:	mov	r5, r0
   15778:	ldm	r8, {r0, r1}
   1577c:	str	r5, [r6]
   15780:	stm	r5, {r0, r1}
   15784:	b	15668 <__assert_fail@plt+0x4738>
   15788:	bl	10f24 <abort@plt>
   1578c:	strdeq	sl, [r2], -r4
   15790:	muleq	r2, ip, r1
   15794:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   15798:	mov	r7, r1
   1579c:	ldr	lr, [pc, #492]	; 15990 <__assert_fail@plt+0x4a60>
   157a0:	mov	r8, r2
   157a4:	mov	r4, r0
   157a8:	mov	fp, r3
   157ac:	ldm	lr!, {r0, r1, r2, r3}
   157b0:	sub	sp, sp, #100	; 0x64
   157b4:	add	ip, sp, #48	; 0x30
   157b8:	mov	sl, #10
   157bc:	stmia	ip!, {r0, r1, r2, r3}
   157c0:	cmp	r8, #0
   157c4:	cmpne	r7, #0
   157c8:	ldm	lr!, {r0, r1, r2, r3}
   157cc:	str	sl, [sp, #48]	; 0x30
   157d0:	stmia	ip!, {r0, r1, r2, r3}
   157d4:	ldm	lr, {r0, r1, r2, r3}
   157d8:	stm	ip, {r0, r1, r2, r3}
   157dc:	beq	1598c <__assert_fail@plt+0x4a5c>
   157e0:	str	r7, [sp, #88]	; 0x58
   157e4:	str	r8, [sp, #92]	; 0x5c
   157e8:	bl	10e4c <__errno_location@plt>
   157ec:	ldr	r6, [pc, #416]	; 15994 <__assert_fail@plt+0x4a64>
   157f0:	cmn	r4, #-2147483647	; 0x80000001
   157f4:	ldr	r5, [r6]
   157f8:	mov	r9, r0
   157fc:	movne	r0, #0
   15800:	moveq	r0, #1
   15804:	ldr	r3, [r9]
   15808:	orrs	r0, r0, r4, lsr #31
   1580c:	str	r3, [sp, #28]
   15810:	bne	1598c <__assert_fail@plt+0x4a5c>
   15814:	ldr	r2, [r6, #4]
   15818:	cmp	r4, r2
   1581c:	movlt	r3, sl
   15820:	blt	1588c <__assert_fail@plt+0x495c>
   15824:	add	r7, r6, #8
   15828:	cmp	r5, r7
   1582c:	str	r2, [sp, #44]	; 0x2c
   15830:	beq	1595c <__assert_fail@plt+0x4a2c>
   15834:	mov	r3, #8
   15838:	sub	r2, r4, r2
   1583c:	mov	r0, r5
   15840:	str	r3, [sp]
   15844:	add	r2, r2, #1
   15848:	mvn	r3, #-2147483648	; 0x80000000
   1584c:	add	r1, sp, #44	; 0x2c
   15850:	bl	17274 <__assert_fail@plt+0x6344>
   15854:	mov	r5, r0
   15858:	str	r0, [r6]
   1585c:	ldr	r0, [r6, #4]
   15860:	ldr	r2, [sp, #44]	; 0x2c
   15864:	mov	r1, #0
   15868:	sub	r2, r2, r0
   1586c:	add	r0, r5, r0, lsl #3
   15870:	lsl	r2, r2, #3
   15874:	bl	10e64 <memset@plt>
   15878:	ldr	r3, [sp, #48]	; 0x30
   1587c:	ldr	r7, [sp, #88]	; 0x58
   15880:	ldr	r8, [sp, #92]	; 0x5c
   15884:	ldr	r2, [sp, #44]	; 0x2c
   15888:	str	r2, [r6, #4]
   1588c:	add	r2, r5, r4, lsl #3
   15890:	mov	r1, r2
   15894:	str	r2, [sp, #32]
   15898:	ldr	r2, [sp, #52]	; 0x34
   1589c:	ldr	r6, [r1, #4]
   158a0:	ldr	sl, [r5, r4, lsl #3]
   158a4:	orr	r2, r2, #1
   158a8:	str	r3, [sp]
   158ac:	add	r3, sp, #56	; 0x38
   158b0:	str	r2, [sp, #36]	; 0x24
   158b4:	str	r2, [sp, #4]
   158b8:	str	r3, [sp, #8]
   158bc:	mov	r0, r6
   158c0:	str	r8, [sp, #16]
   158c4:	str	r7, [sp, #12]
   158c8:	mov	r1, sl
   158cc:	mvn	r3, #0
   158d0:	mov	r2, fp
   158d4:	bl	1277c <__assert_fail@plt+0x184c>
   158d8:	cmp	sl, r0
   158dc:	bhi	15948 <__assert_fail@plt+0x4a18>
   158e0:	ldr	r3, [pc, #176]	; 15998 <__assert_fail@plt+0x4a68>
   158e4:	add	r7, r0, #1
   158e8:	cmp	r6, r3
   158ec:	str	r7, [r5, r4, lsl #3]
   158f0:	beq	158fc <__assert_fail@plt+0x49cc>
   158f4:	mov	r0, r6
   158f8:	bl	124b0 <__assert_fail@plt+0x1580>
   158fc:	mov	r0, r7
   15900:	bl	17058 <__assert_fail@plt+0x6128>
   15904:	ldr	r3, [sp, #32]
   15908:	ldr	lr, [sp, #92]	; 0x5c
   1590c:	ldr	ip, [sp, #88]	; 0x58
   15910:	ldr	r4, [sp, #36]	; 0x24
   15914:	mov	r2, fp
   15918:	mov	r1, r7
   1591c:	str	r0, [r3, #4]
   15920:	add	r3, sp, #56	; 0x38
   15924:	str	r3, [sp, #8]
   15928:	ldr	r3, [sp, #48]	; 0x30
   1592c:	str	r4, [sp, #4]
   15930:	str	r3, [sp]
   15934:	str	lr, [sp, #16]
   15938:	str	ip, [sp, #12]
   1593c:	mvn	r3, #0
   15940:	mov	r6, r0
   15944:	bl	1277c <__assert_fail@plt+0x184c>
   15948:	ldr	r3, [sp, #28]
   1594c:	mov	r0, r6
   15950:	str	r3, [r9]
   15954:	add	sp, sp, #100	; 0x64
   15958:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1595c:	mov	r3, #8
   15960:	sub	r2, r4, r2
   15964:	str	r3, [sp]
   15968:	add	r1, sp, #44	; 0x2c
   1596c:	add	r2, r2, #1
   15970:	mvn	r3, #-2147483648	; 0x80000000
   15974:	bl	17274 <__assert_fail@plt+0x6344>
   15978:	mov	r5, r0
   1597c:	ldm	r7, {r0, r1}
   15980:	str	r5, [r6]
   15984:	stm	r5, {r0, r1}
   15988:	b	1585c <__assert_fail@plt+0x492c>
   1598c:	bl	10f24 <abort@plt>
   15990:	andeq	sl, r2, ip, ror #2
   15994:	strdeq	sl, [r2], -r4
   15998:	muleq	r2, ip, r1
   1599c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   159a0:	mov	r7, r1
   159a4:	ldr	lr, [pc, #492]	; 15b98 <__assert_fail@plt+0x4c68>
   159a8:	mov	r8, r2
   159ac:	mov	r4, r0
   159b0:	mov	fp, r3
   159b4:	ldm	lr!, {r0, r1, r2, r3}
   159b8:	sub	sp, sp, #100	; 0x64
   159bc:	add	ip, sp, #48	; 0x30
   159c0:	mov	sl, #10
   159c4:	stmia	ip!, {r0, r1, r2, r3}
   159c8:	cmp	r8, #0
   159cc:	cmpne	r7, #0
   159d0:	ldm	lr!, {r0, r1, r2, r3}
   159d4:	str	sl, [sp, #48]	; 0x30
   159d8:	stmia	ip!, {r0, r1, r2, r3}
   159dc:	ldm	lr, {r0, r1, r2, r3}
   159e0:	stm	ip, {r0, r1, r2, r3}
   159e4:	beq	15b94 <__assert_fail@plt+0x4c64>
   159e8:	str	r7, [sp, #88]	; 0x58
   159ec:	str	r8, [sp, #92]	; 0x5c
   159f0:	bl	10e4c <__errno_location@plt>
   159f4:	ldr	r6, [pc, #416]	; 15b9c <__assert_fail@plt+0x4c6c>
   159f8:	cmn	r4, #-2147483647	; 0x80000001
   159fc:	ldr	r5, [r6]
   15a00:	mov	r9, r0
   15a04:	movne	r0, #0
   15a08:	moveq	r0, #1
   15a0c:	ldr	r3, [r9]
   15a10:	orrs	r0, r0, r4, lsr #31
   15a14:	str	r3, [sp, #28]
   15a18:	bne	15b94 <__assert_fail@plt+0x4c64>
   15a1c:	ldr	r2, [r6, #4]
   15a20:	cmp	r4, r2
   15a24:	movlt	r3, sl
   15a28:	blt	15a94 <__assert_fail@plt+0x4b64>
   15a2c:	add	r7, r6, #8
   15a30:	cmp	r5, r7
   15a34:	str	r2, [sp, #44]	; 0x2c
   15a38:	beq	15b64 <__assert_fail@plt+0x4c34>
   15a3c:	mov	r3, #8
   15a40:	sub	r2, r4, r2
   15a44:	mov	r0, r5
   15a48:	str	r3, [sp]
   15a4c:	add	r2, r2, #1
   15a50:	mvn	r3, #-2147483648	; 0x80000000
   15a54:	add	r1, sp, #44	; 0x2c
   15a58:	bl	17274 <__assert_fail@plt+0x6344>
   15a5c:	mov	r5, r0
   15a60:	str	r0, [r6]
   15a64:	ldr	r0, [r6, #4]
   15a68:	ldr	r2, [sp, #44]	; 0x2c
   15a6c:	mov	r1, #0
   15a70:	sub	r2, r2, r0
   15a74:	add	r0, r5, r0, lsl #3
   15a78:	lsl	r2, r2, #3
   15a7c:	bl	10e64 <memset@plt>
   15a80:	ldr	r3, [sp, #48]	; 0x30
   15a84:	ldr	r7, [sp, #88]	; 0x58
   15a88:	ldr	r8, [sp, #92]	; 0x5c
   15a8c:	ldr	r2, [sp, #44]	; 0x2c
   15a90:	str	r2, [r6, #4]
   15a94:	add	r2, r5, r4, lsl #3
   15a98:	mov	r1, r2
   15a9c:	str	r2, [sp, #32]
   15aa0:	ldr	r2, [sp, #52]	; 0x34
   15aa4:	ldr	r6, [r1, #4]
   15aa8:	ldr	sl, [r5, r4, lsl #3]
   15aac:	orr	r2, r2, #1
   15ab0:	str	r3, [sp]
   15ab4:	add	r3, sp, #56	; 0x38
   15ab8:	str	r2, [sp, #36]	; 0x24
   15abc:	str	r2, [sp, #4]
   15ac0:	str	r3, [sp, #8]
   15ac4:	mov	r0, r6
   15ac8:	str	r8, [sp, #16]
   15acc:	str	r7, [sp, #12]
   15ad0:	mov	r1, sl
   15ad4:	ldr	r3, [sp, #136]	; 0x88
   15ad8:	mov	r2, fp
   15adc:	bl	1277c <__assert_fail@plt+0x184c>
   15ae0:	cmp	sl, r0
   15ae4:	bhi	15b50 <__assert_fail@plt+0x4c20>
   15ae8:	ldr	r3, [pc, #176]	; 15ba0 <__assert_fail@plt+0x4c70>
   15aec:	add	r7, r0, #1
   15af0:	cmp	r6, r3
   15af4:	str	r7, [r5, r4, lsl #3]
   15af8:	beq	15b04 <__assert_fail@plt+0x4bd4>
   15afc:	mov	r0, r6
   15b00:	bl	124b0 <__assert_fail@plt+0x1580>
   15b04:	mov	r0, r7
   15b08:	bl	17058 <__assert_fail@plt+0x6128>
   15b0c:	ldr	r3, [sp, #32]
   15b10:	ldr	lr, [sp, #92]	; 0x5c
   15b14:	ldr	ip, [sp, #88]	; 0x58
   15b18:	ldr	r4, [sp, #36]	; 0x24
   15b1c:	mov	r2, fp
   15b20:	mov	r1, r7
   15b24:	str	r0, [r3, #4]
   15b28:	add	r3, sp, #56	; 0x38
   15b2c:	str	r3, [sp, #8]
   15b30:	ldr	r3, [sp, #48]	; 0x30
   15b34:	str	r4, [sp, #4]
   15b38:	str	r3, [sp]
   15b3c:	str	lr, [sp, #16]
   15b40:	str	ip, [sp, #12]
   15b44:	ldr	r3, [sp, #136]	; 0x88
   15b48:	mov	r6, r0
   15b4c:	bl	1277c <__assert_fail@plt+0x184c>
   15b50:	ldr	r3, [sp, #28]
   15b54:	mov	r0, r6
   15b58:	str	r3, [r9]
   15b5c:	add	sp, sp, #100	; 0x64
   15b60:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15b64:	mov	r3, #8
   15b68:	sub	r2, r4, r2
   15b6c:	str	r3, [sp]
   15b70:	add	r1, sp, #44	; 0x2c
   15b74:	add	r2, r2, #1
   15b78:	mvn	r3, #-2147483648	; 0x80000000
   15b7c:	bl	17274 <__assert_fail@plt+0x6344>
   15b80:	mov	r5, r0
   15b84:	ldm	r7, {r0, r1}
   15b88:	str	r5, [r6]
   15b8c:	stm	r5, {r0, r1}
   15b90:	b	15a64 <__assert_fail@plt+0x4b34>
   15b94:	bl	10f24 <abort@plt>
   15b98:	andeq	sl, r2, ip, ror #2
   15b9c:	strdeq	sl, [r2], -r4
   15ba0:	muleq	r2, ip, r1
   15ba4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   15ba8:	mov	r5, r0
   15bac:	ldr	lr, [pc, #452]	; 15d78 <__assert_fail@plt+0x4e48>
   15bb0:	mov	r6, r1
   15bb4:	mov	sl, r2
   15bb8:	ldm	lr!, {r0, r1, r2, r3}
   15bbc:	sub	sp, sp, #92	; 0x5c
   15bc0:	add	ip, sp, #40	; 0x28
   15bc4:	cmp	r6, #0
   15bc8:	cmpne	r5, #0
   15bcc:	stmia	ip!, {r0, r1, r2, r3}
   15bd0:	mov	r9, #10
   15bd4:	ldm	lr!, {r0, r1, r2, r3}
   15bd8:	moveq	fp, #1
   15bdc:	movne	fp, #0
   15be0:	str	r9, [sp, #40]	; 0x28
   15be4:	stmia	ip!, {r0, r1, r2, r3}
   15be8:	ldm	lr, {r0, r1, r2, r3}
   15bec:	stm	ip, {r0, r1, r2, r3}
   15bf0:	beq	15d74 <__assert_fail@plt+0x4e44>
   15bf4:	str	r5, [sp, #80]	; 0x50
   15bf8:	str	r6, [sp, #84]	; 0x54
   15bfc:	bl	10e4c <__errno_location@plt>
   15c00:	ldr	r7, [pc, #372]	; 15d7c <__assert_fail@plt+0x4e4c>
   15c04:	ldr	r2, [r7, #4]
   15c08:	ldr	r4, [r7]
   15c0c:	cmp	r2, #0
   15c10:	ldr	r3, [r0]
   15c14:	mov	r8, r0
   15c18:	str	r3, [sp, #24]
   15c1c:	movgt	r3, r9
   15c20:	bgt	15c88 <__assert_fail@plt+0x4d58>
   15c24:	add	r5, r7, #8
   15c28:	cmp	r4, r5
   15c2c:	str	r2, [sp, #36]	; 0x24
   15c30:	beq	15d44 <__assert_fail@plt+0x4e14>
   15c34:	mov	r3, #8
   15c38:	mov	r0, r4
   15c3c:	str	r3, [sp]
   15c40:	rsb	r2, r2, #1
   15c44:	mvn	r3, #-2147483648	; 0x80000000
   15c48:	add	r1, sp, #36	; 0x24
   15c4c:	bl	17274 <__assert_fail@plt+0x6344>
   15c50:	mov	r4, r0
   15c54:	str	r0, [r7]
   15c58:	ldr	r0, [r7, #4]
   15c5c:	ldr	r2, [sp, #36]	; 0x24
   15c60:	mov	r1, #0
   15c64:	sub	r2, r2, r0
   15c68:	add	r0, r4, r0, lsl #3
   15c6c:	lsl	r2, r2, #3
   15c70:	bl	10e64 <memset@plt>
   15c74:	ldr	r3, [sp, #40]	; 0x28
   15c78:	ldr	r5, [sp, #80]	; 0x50
   15c7c:	ldr	r6, [sp, #84]	; 0x54
   15c80:	ldr	r2, [sp, #36]	; 0x24
   15c84:	str	r2, [r7, #4]
   15c88:	ldr	r2, [sp, #44]	; 0x2c
   15c8c:	ldr	r9, [r4]
   15c90:	ldr	r7, [r4, #4]
   15c94:	orr	r2, r2, #1
   15c98:	add	fp, sp, #48	; 0x30
   15c9c:	str	r2, [sp, #28]
   15ca0:	str	r2, [sp, #4]
   15ca4:	str	r3, [sp]
   15ca8:	str	r6, [sp, #16]
   15cac:	str	r5, [sp, #12]
   15cb0:	mov	r1, r9
   15cb4:	mov	r0, r7
   15cb8:	str	fp, [sp, #8]
   15cbc:	mvn	r3, #0
   15cc0:	mov	r2, sl
   15cc4:	bl	1277c <__assert_fail@plt+0x184c>
   15cc8:	cmp	r9, r0
   15ccc:	bhi	15d30 <__assert_fail@plt+0x4e00>
   15cd0:	ldr	r3, [pc, #168]	; 15d80 <__assert_fail@plt+0x4e50>
   15cd4:	add	r5, r0, #1
   15cd8:	cmp	r7, r3
   15cdc:	str	r5, [r4]
   15ce0:	beq	15cec <__assert_fail@plt+0x4dbc>
   15ce4:	mov	r0, r7
   15ce8:	bl	124b0 <__assert_fail@plt+0x1580>
   15cec:	mov	r0, r5
   15cf0:	bl	17058 <__assert_fail@plt+0x6128>
   15cf4:	ldr	lr, [sp, #84]	; 0x54
   15cf8:	ldr	r3, [sp, #40]	; 0x28
   15cfc:	ldr	ip, [sp, #80]	; 0x50
   15d00:	mov	r2, sl
   15d04:	mov	r1, r5
   15d08:	str	r0, [r4, #4]
   15d0c:	ldr	r4, [sp, #28]
   15d10:	str	r3, [sp]
   15d14:	str	fp, [sp, #8]
   15d18:	str	r4, [sp, #4]
   15d1c:	str	lr, [sp, #16]
   15d20:	str	ip, [sp, #12]
   15d24:	mvn	r3, #0
   15d28:	mov	r7, r0
   15d2c:	bl	1277c <__assert_fail@plt+0x184c>
   15d30:	ldr	r3, [sp, #24]
   15d34:	mov	r0, r7
   15d38:	str	r3, [r8]
   15d3c:	add	sp, sp, #92	; 0x5c
   15d40:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15d44:	mov	r3, #8
   15d48:	str	r3, [sp]
   15d4c:	add	r1, sp, #36	; 0x24
   15d50:	rsb	r2, r2, #1
   15d54:	mov	r0, fp
   15d58:	mvn	r3, #-2147483648	; 0x80000000
   15d5c:	bl	17274 <__assert_fail@plt+0x6344>
   15d60:	mov	r4, r0
   15d64:	ldm	r5, {r0, r1}
   15d68:	str	r4, [r7]
   15d6c:	stm	r4, {r0, r1}
   15d70:	b	15c58 <__assert_fail@plt+0x4d28>
   15d74:	bl	10f24 <abort@plt>
   15d78:	andeq	sl, r2, ip, ror #2
   15d7c:	strdeq	sl, [r2], -r4
   15d80:	muleq	r2, ip, r1
   15d84:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   15d88:	mov	r5, r0
   15d8c:	ldr	lr, [pc, #464]	; 15f64 <__assert_fail@plt+0x5034>
   15d90:	mov	r6, r1
   15d94:	mov	sl, r2
   15d98:	mov	fp, r3
   15d9c:	ldm	lr!, {r0, r1, r2, r3}
   15da0:	sub	sp, sp, #92	; 0x5c
   15da4:	add	ip, sp, #40	; 0x28
   15da8:	cmp	r6, #0
   15dac:	cmpne	r5, #0
   15db0:	stmia	ip!, {r0, r1, r2, r3}
   15db4:	moveq	r4, #1
   15db8:	ldm	lr!, {r0, r1, r2, r3}
   15dbc:	movne	r4, #0
   15dc0:	mov	r9, #10
   15dc4:	str	r4, [sp, #28]
   15dc8:	stmia	ip!, {r0, r1, r2, r3}
   15dcc:	ldm	lr, {r0, r1, r2, r3}
   15dd0:	str	r9, [sp, #40]	; 0x28
   15dd4:	stm	ip, {r0, r1, r2, r3}
   15dd8:	beq	15f60 <__assert_fail@plt+0x5030>
   15ddc:	str	r5, [sp, #80]	; 0x50
   15de0:	str	r6, [sp, #84]	; 0x54
   15de4:	bl	10e4c <__errno_location@plt>
   15de8:	ldr	r7, [pc, #376]	; 15f68 <__assert_fail@plt+0x5038>
   15dec:	ldr	r2, [r7, #4]
   15df0:	ldr	r4, [r7]
   15df4:	cmp	r2, #0
   15df8:	ldr	r3, [r0]
   15dfc:	mov	r8, r0
   15e00:	str	r3, [sp, #24]
   15e04:	movgt	r3, r9
   15e08:	bgt	15e70 <__assert_fail@plt+0x4f40>
   15e0c:	add	r5, r7, #8
   15e10:	cmp	r4, r5
   15e14:	str	r2, [sp, #36]	; 0x24
   15e18:	beq	15f30 <__assert_fail@plt+0x5000>
   15e1c:	mov	r3, #8
   15e20:	mov	r0, r4
   15e24:	str	r3, [sp]
   15e28:	rsb	r2, r2, #1
   15e2c:	mvn	r3, #-2147483648	; 0x80000000
   15e30:	add	r1, sp, #36	; 0x24
   15e34:	bl	17274 <__assert_fail@plt+0x6344>
   15e38:	mov	r4, r0
   15e3c:	str	r0, [r7]
   15e40:	ldr	r0, [r7, #4]
   15e44:	ldr	r2, [sp, #36]	; 0x24
   15e48:	mov	r1, #0
   15e4c:	sub	r2, r2, r0
   15e50:	add	r0, r4, r0, lsl #3
   15e54:	lsl	r2, r2, #3
   15e58:	bl	10e64 <memset@plt>
   15e5c:	ldr	r3, [sp, #40]	; 0x28
   15e60:	ldr	r5, [sp, #80]	; 0x50
   15e64:	ldr	r6, [sp, #84]	; 0x54
   15e68:	ldr	r2, [sp, #36]	; 0x24
   15e6c:	str	r2, [r7, #4]
   15e70:	ldr	r2, [sp, #44]	; 0x2c
   15e74:	ldr	r9, [r4]
   15e78:	ldr	r7, [r4, #4]
   15e7c:	orr	r2, r2, #1
   15e80:	str	r3, [sp]
   15e84:	add	r3, sp, #48	; 0x30
   15e88:	str	r2, [sp, #28]
   15e8c:	str	r2, [sp, #4]
   15e90:	str	r3, [sp, #8]
   15e94:	str	r6, [sp, #16]
   15e98:	str	r5, [sp, #12]
   15e9c:	mov	r1, r9
   15ea0:	mov	r0, r7
   15ea4:	mov	r3, fp
   15ea8:	mov	r2, sl
   15eac:	bl	1277c <__assert_fail@plt+0x184c>
   15eb0:	cmp	r9, r0
   15eb4:	bhi	15f1c <__assert_fail@plt+0x4fec>
   15eb8:	ldr	r3, [pc, #172]	; 15f6c <__assert_fail@plt+0x503c>
   15ebc:	add	r5, r0, #1
   15ec0:	cmp	r7, r3
   15ec4:	str	r5, [r4]
   15ec8:	beq	15ed4 <__assert_fail@plt+0x4fa4>
   15ecc:	mov	r0, r7
   15ed0:	bl	124b0 <__assert_fail@plt+0x1580>
   15ed4:	mov	r0, r5
   15ed8:	bl	17058 <__assert_fail@plt+0x6128>
   15edc:	add	lr, sp, #48	; 0x30
   15ee0:	ldr	ip, [sp, #84]	; 0x54
   15ee4:	mov	r1, r5
   15ee8:	ldr	r5, [sp, #28]
   15eec:	mov	r3, fp
   15ef0:	mov	r2, sl
   15ef4:	str	r0, [r4, #4]
   15ef8:	ldr	r4, [sp, #80]	; 0x50
   15efc:	str	lr, [sp, #8]
   15f00:	ldr	lr, [sp, #40]	; 0x28
   15f04:	str	r5, [sp, #4]
   15f08:	str	ip, [sp, #16]
   15f0c:	str	r4, [sp, #12]
   15f10:	str	lr, [sp]
   15f14:	mov	r7, r0
   15f18:	bl	1277c <__assert_fail@plt+0x184c>
   15f1c:	ldr	r3, [sp, #24]
   15f20:	mov	r0, r7
   15f24:	str	r3, [r8]
   15f28:	add	sp, sp, #92	; 0x5c
   15f2c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15f30:	mov	r3, #8
   15f34:	str	r3, [sp]
   15f38:	add	r1, sp, #36	; 0x24
   15f3c:	rsb	r2, r2, #1
   15f40:	ldr	r0, [sp, #28]
   15f44:	mvn	r3, #-2147483648	; 0x80000000
   15f48:	bl	17274 <__assert_fail@plt+0x6344>
   15f4c:	mov	r4, r0
   15f50:	ldm	r5, {r0, r1}
   15f54:	str	r4, [r7]
   15f58:	stm	r4, {r0, r1}
   15f5c:	b	15e40 <__assert_fail@plt+0x4f10>
   15f60:	bl	10f24 <abort@plt>
   15f64:	andeq	sl, r2, ip, ror #2
   15f68:	strdeq	sl, [r2], -r4
   15f6c:	muleq	r2, ip, r1
   15f70:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   15f74:	sub	sp, sp, #52	; 0x34
   15f78:	mov	r5, r0
   15f7c:	mov	sl, r1
   15f80:	mov	fp, r2
   15f84:	bl	10e4c <__errno_location@plt>
   15f88:	ldr	r4, [pc, #404]	; 16124 <__assert_fail@plt+0x51f4>
   15f8c:	cmn	r5, #-2147483647	; 0x80000001
   15f90:	ldr	r6, [r4]
   15f94:	mov	r8, r0
   15f98:	movne	r0, #0
   15f9c:	moveq	r0, #1
   15fa0:	ldr	r3, [r8]
   15fa4:	orrs	r0, r0, r5, lsr #31
   15fa8:	str	r3, [sp, #28]
   15fac:	bne	16120 <__assert_fail@plt+0x51f0>
   15fb0:	ldr	r2, [r4, #4]
   15fb4:	cmp	r5, r2
   15fb8:	blt	16018 <__assert_fail@plt+0x50e8>
   15fbc:	add	r7, r4, #8
   15fc0:	cmp	r6, r7
   15fc4:	str	r2, [sp, #44]	; 0x2c
   15fc8:	beq	160f0 <__assert_fail@plt+0x51c0>
   15fcc:	mov	r3, #8
   15fd0:	sub	r2, r5, r2
   15fd4:	mov	r0, r6
   15fd8:	str	r3, [sp]
   15fdc:	add	r2, r2, #1
   15fe0:	mvn	r3, #-2147483648	; 0x80000000
   15fe4:	add	r1, sp, #44	; 0x2c
   15fe8:	bl	17274 <__assert_fail@plt+0x6344>
   15fec:	mov	r6, r0
   15ff0:	str	r0, [r4]
   15ff4:	ldr	r0, [r4, #4]
   15ff8:	ldr	r2, [sp, #44]	; 0x2c
   15ffc:	mov	r1, #0
   16000:	sub	r2, r2, r0
   16004:	add	r0, r6, r0, lsl #3
   16008:	lsl	r2, r2, #3
   1600c:	bl	10e64 <memset@plt>
   16010:	ldr	r3, [sp, #44]	; 0x2c
   16014:	str	r3, [r4, #4]
   16018:	ldr	r2, [r4, #56]	; 0x38
   1601c:	add	r3, r6, r5, lsl #3
   16020:	ldr	r1, [r4, #20]
   16024:	ldr	r7, [r3, #4]
   16028:	ldr	r9, [r6, r5, lsl #3]
   1602c:	ldr	ip, [r4, #60]	; 0x3c
   16030:	str	r3, [sp, #32]
   16034:	ldr	r3, [r4, #16]
   16038:	str	r2, [sp, #12]
   1603c:	ldr	r2, [pc, #228]	; 16128 <__assert_fail@plt+0x51f8>
   16040:	orr	r1, r1, #1
   16044:	str	r1, [sp, #36]	; 0x24
   16048:	str	r1, [sp, #4]
   1604c:	str	r2, [sp, #8]
   16050:	str	r3, [sp]
   16054:	mov	r0, r7
   16058:	mov	r1, r9
   1605c:	str	ip, [sp, #16]
   16060:	mov	r3, fp
   16064:	mov	r2, sl
   16068:	bl	1277c <__assert_fail@plt+0x184c>
   1606c:	cmp	r9, r0
   16070:	bhi	160dc <__assert_fail@plt+0x51ac>
   16074:	ldr	r3, [pc, #176]	; 1612c <__assert_fail@plt+0x51fc>
   16078:	add	r9, r0, #1
   1607c:	cmp	r7, r3
   16080:	str	r9, [r6, r5, lsl #3]
   16084:	beq	16090 <__assert_fail@plt+0x5160>
   16088:	mov	r0, r7
   1608c:	bl	124b0 <__assert_fail@plt+0x1580>
   16090:	mov	r0, r9
   16094:	bl	17058 <__assert_fail@plt+0x6128>
   16098:	ldr	ip, [sp, #32]
   1609c:	ldr	lr, [r4, #60]	; 0x3c
   160a0:	ldr	r5, [r4, #56]	; 0x38
   160a4:	mov	r3, fp
   160a8:	mov	r2, sl
   160ac:	mov	r1, r9
   160b0:	str	r0, [ip, #4]
   160b4:	ldr	ip, [r4, #16]
   160b8:	ldr	r4, [pc, #104]	; 16128 <__assert_fail@plt+0x51f8>
   160bc:	str	lr, [sp, #16]
   160c0:	str	r4, [sp, #8]
   160c4:	ldr	r4, [sp, #36]	; 0x24
   160c8:	str	r5, [sp, #12]
   160cc:	str	r4, [sp, #4]
   160d0:	str	ip, [sp]
   160d4:	mov	r7, r0
   160d8:	bl	1277c <__assert_fail@plt+0x184c>
   160dc:	ldr	r3, [sp, #28]
   160e0:	mov	r0, r7
   160e4:	str	r3, [r8]
   160e8:	add	sp, sp, #52	; 0x34
   160ec:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   160f0:	mov	r3, #8
   160f4:	sub	r2, r5, r2
   160f8:	str	r3, [sp]
   160fc:	add	r1, sp, #44	; 0x2c
   16100:	add	r2, r2, #1
   16104:	mvn	r3, #-2147483648	; 0x80000000
   16108:	bl	17274 <__assert_fail@plt+0x6344>
   1610c:	mov	r6, r0
   16110:	ldm	r7, {r0, r1}
   16114:	str	r6, [r4]
   16118:	stm	r6, {r0, r1}
   1611c:	b	15ff4 <__assert_fail@plt+0x50c4>
   16120:	bl	10f24 <abort@plt>
   16124:	strdeq	sl, [r2], -r4
   16128:	andeq	sl, r2, ip, lsl #2
   1612c:	muleq	r2, ip, r1
   16130:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   16134:	sub	sp, sp, #44	; 0x2c
   16138:	mov	r9, r0
   1613c:	mov	sl, r1
   16140:	bl	10e4c <__errno_location@plt>
   16144:	ldr	r4, [pc, #360]	; 162b4 <__assert_fail@plt+0x5384>
   16148:	ldr	r2, [r4, #4]
   1614c:	ldr	r5, [r4]
   16150:	cmp	r2, #0
   16154:	ldr	r3, [r0]
   16158:	mov	r7, r0
   1615c:	str	r3, [sp, #24]
   16160:	bgt	161bc <__assert_fail@plt+0x528c>
   16164:	add	r6, r4, #8
   16168:	cmp	r5, r6
   1616c:	str	r2, [sp, #36]	; 0x24
   16170:	beq	16284 <__assert_fail@plt+0x5354>
   16174:	mov	r3, #8
   16178:	mov	r0, r5
   1617c:	str	r3, [sp]
   16180:	rsb	r2, r2, #1
   16184:	mvn	r3, #-2147483648	; 0x80000000
   16188:	add	r1, sp, #36	; 0x24
   1618c:	bl	17274 <__assert_fail@plt+0x6344>
   16190:	mov	r5, r0
   16194:	str	r0, [r4]
   16198:	ldr	r0, [r4, #4]
   1619c:	ldr	r2, [sp, #36]	; 0x24
   161a0:	mov	r1, #0
   161a4:	sub	r2, r2, r0
   161a8:	add	r0, r5, r0, lsl #3
   161ac:	lsl	r2, r2, #3
   161b0:	bl	10e64 <memset@plt>
   161b4:	ldr	r3, [sp, #36]	; 0x24
   161b8:	str	r3, [r4, #4]
   161bc:	ldr	r1, [r4, #20]
   161c0:	ldr	r8, [r5]
   161c4:	ldr	r6, [r5, #4]
   161c8:	ldr	r2, [r4, #56]	; 0x38
   161cc:	ldr	r3, [r4, #16]
   161d0:	ldr	ip, [r4, #60]	; 0x3c
   161d4:	ldr	fp, [pc, #220]	; 162b8 <__assert_fail@plt+0x5388>
   161d8:	orr	r1, r1, #1
   161dc:	str	r1, [sp, #28]
   161e0:	str	r1, [sp, #4]
   161e4:	str	r2, [sp, #12]
   161e8:	str	r3, [sp]
   161ec:	mov	r1, r8
   161f0:	mov	r0, r6
   161f4:	str	ip, [sp, #16]
   161f8:	str	fp, [sp, #8]
   161fc:	mov	r3, sl
   16200:	mov	r2, r9
   16204:	bl	1277c <__assert_fail@plt+0x184c>
   16208:	cmp	r8, r0
   1620c:	bhi	16270 <__assert_fail@plt+0x5340>
   16210:	ldr	r3, [pc, #164]	; 162bc <__assert_fail@plt+0x538c>
   16214:	add	r8, r0, #1
   16218:	cmp	r6, r3
   1621c:	str	r8, [r5]
   16220:	beq	1622c <__assert_fail@plt+0x52fc>
   16224:	mov	r0, r6
   16228:	bl	124b0 <__assert_fail@plt+0x1580>
   1622c:	mov	r0, r8
   16230:	bl	17058 <__assert_fail@plt+0x6128>
   16234:	ldr	lr, [r4, #60]	; 0x3c
   16238:	ldr	ip, [r4, #16]
   1623c:	mov	r3, sl
   16240:	mov	r2, r9
   16244:	mov	r1, r8
   16248:	str	r0, [r5, #4]
   1624c:	ldr	r5, [r4, #56]	; 0x38
   16250:	ldr	r4, [sp, #28]
   16254:	str	fp, [sp, #8]
   16258:	str	r4, [sp, #4]
   1625c:	str	lr, [sp, #16]
   16260:	str	r5, [sp, #12]
   16264:	str	ip, [sp]
   16268:	mov	r6, r0
   1626c:	bl	1277c <__assert_fail@plt+0x184c>
   16270:	ldr	r3, [sp, #24]
   16274:	mov	r0, r6
   16278:	str	r3, [r7]
   1627c:	add	sp, sp, #44	; 0x2c
   16280:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   16284:	mov	r3, #8
   16288:	str	r3, [sp]
   1628c:	add	r1, sp, #36	; 0x24
   16290:	rsb	r2, r2, #1
   16294:	mvn	r3, #-2147483648	; 0x80000000
   16298:	mov	r0, #0
   1629c:	bl	17274 <__assert_fail@plt+0x6344>
   162a0:	mov	r5, r0
   162a4:	ldm	r6, {r0, r1}
   162a8:	str	r5, [r4]
   162ac:	stm	r5, {r0, r1}
   162b0:	b	16198 <__assert_fail@plt+0x5268>
   162b4:	strdeq	sl, [r2], -r4
   162b8:	andeq	sl, r2, ip, lsl #2
   162bc:	muleq	r2, ip, r1
   162c0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   162c4:	sub	sp, sp, #44	; 0x2c
   162c8:	mov	r5, r0
   162cc:	mov	sl, r1
   162d0:	bl	10e4c <__errno_location@plt>
   162d4:	ldr	r4, [pc, #396]	; 16468 <__assert_fail@plt+0x5538>
   162d8:	cmn	r5, #-2147483647	; 0x80000001
   162dc:	ldr	r6, [r4]
   162e0:	mov	r8, r0
   162e4:	movne	r0, #0
   162e8:	moveq	r0, #1
   162ec:	ldr	r3, [r8]
   162f0:	orrs	r0, r0, r5, lsr #31
   162f4:	str	r3, [sp, #24]
   162f8:	bne	16464 <__assert_fail@plt+0x5534>
   162fc:	ldr	r2, [r4, #4]
   16300:	cmp	r5, r2
   16304:	blt	16364 <__assert_fail@plt+0x5434>
   16308:	add	r7, r4, #8
   1630c:	cmp	r6, r7
   16310:	str	r2, [sp, #36]	; 0x24
   16314:	beq	16434 <__assert_fail@plt+0x5504>
   16318:	mov	r3, #8
   1631c:	sub	r2, r5, r2
   16320:	mov	r0, r6
   16324:	str	r3, [sp]
   16328:	add	r2, r2, #1
   1632c:	mvn	r3, #-2147483648	; 0x80000000
   16330:	add	r1, sp, #36	; 0x24
   16334:	bl	17274 <__assert_fail@plt+0x6344>
   16338:	mov	r6, r0
   1633c:	str	r0, [r4]
   16340:	ldr	r0, [r4, #4]
   16344:	ldr	r2, [sp, #36]	; 0x24
   16348:	mov	r1, #0
   1634c:	sub	r2, r2, r0
   16350:	add	r0, r6, r0, lsl #3
   16354:	lsl	r2, r2, #3
   16358:	bl	10e64 <memset@plt>
   1635c:	ldr	r3, [sp, #36]	; 0x24
   16360:	str	r3, [r4, #4]
   16364:	ldr	r2, [r4, #56]	; 0x38
   16368:	add	fp, r6, r5, lsl #3
   1636c:	ldr	r1, [r4, #20]
   16370:	ldr	r9, [r6, r5, lsl #3]
   16374:	ldr	r7, [fp, #4]
   16378:	ldr	r3, [r4, #16]
   1637c:	ldr	ip, [r4, #60]	; 0x3c
   16380:	str	r2, [sp, #12]
   16384:	ldr	r2, [pc, #224]	; 1646c <__assert_fail@plt+0x553c>
   16388:	orr	r1, r1, #1
   1638c:	str	r1, [sp, #28]
   16390:	str	r1, [sp, #4]
   16394:	str	r2, [sp, #8]
   16398:	str	r3, [sp]
   1639c:	mov	r0, r7
   163a0:	mov	r1, r9
   163a4:	str	ip, [sp, #16]
   163a8:	mvn	r3, #0
   163ac:	mov	r2, sl
   163b0:	bl	1277c <__assert_fail@plt+0x184c>
   163b4:	cmp	r9, r0
   163b8:	bhi	16420 <__assert_fail@plt+0x54f0>
   163bc:	ldr	r3, [pc, #172]	; 16470 <__assert_fail@plt+0x5540>
   163c0:	add	r9, r0, #1
   163c4:	cmp	r7, r3
   163c8:	str	r9, [r6, r5, lsl #3]
   163cc:	beq	163d8 <__assert_fail@plt+0x54a8>
   163d0:	mov	r0, r7
   163d4:	bl	124b0 <__assert_fail@plt+0x1580>
   163d8:	mov	r0, r9
   163dc:	bl	17058 <__assert_fail@plt+0x6128>
   163e0:	ldr	ip, [r4, #60]	; 0x3c
   163e4:	ldr	r3, [r4, #16]
   163e8:	ldr	lr, [r4, #56]	; 0x38
   163ec:	ldr	r4, [pc, #120]	; 1646c <__assert_fail@plt+0x553c>
   163f0:	mov	r2, sl
   163f4:	mov	r1, r9
   163f8:	str	r0, [fp, #4]
   163fc:	str	r4, [sp, #8]
   16400:	ldr	r4, [sp, #28]
   16404:	str	r3, [sp]
   16408:	str	r4, [sp, #4]
   1640c:	str	ip, [sp, #16]
   16410:	str	lr, [sp, #12]
   16414:	mvn	r3, #0
   16418:	mov	r7, r0
   1641c:	bl	1277c <__assert_fail@plt+0x184c>
   16420:	ldr	r3, [sp, #24]
   16424:	mov	r0, r7
   16428:	str	r3, [r8]
   1642c:	add	sp, sp, #44	; 0x2c
   16430:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   16434:	mov	r3, #8
   16438:	sub	r2, r5, r2
   1643c:	str	r3, [sp]
   16440:	add	r1, sp, #36	; 0x24
   16444:	add	r2, r2, #1
   16448:	mvn	r3, #-2147483648	; 0x80000000
   1644c:	bl	17274 <__assert_fail@plt+0x6344>
   16450:	mov	r6, r0
   16454:	ldm	r7, {r0, r1}
   16458:	str	r6, [r4]
   1645c:	stm	r6, {r0, r1}
   16460:	b	16340 <__assert_fail@plt+0x5410>
   16464:	bl	10f24 <abort@plt>
   16468:	strdeq	sl, [r2], -r4
   1646c:	andeq	sl, r2, ip, lsl #2
   16470:	muleq	r2, ip, r1
   16474:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   16478:	sub	sp, sp, #44	; 0x2c
   1647c:	mov	sl, r0
   16480:	bl	10e4c <__errno_location@plt>
   16484:	ldr	r4, [pc, #348]	; 165e8 <__assert_fail@plt+0x56b8>
   16488:	ldr	r2, [r4, #4]
   1648c:	ldr	r5, [r4]
   16490:	cmp	r2, #0
   16494:	ldr	r3, [r0]
   16498:	mov	r8, r0
   1649c:	str	r3, [sp, #28]
   164a0:	bgt	164fc <__assert_fail@plt+0x55cc>
   164a4:	add	r6, r4, #8
   164a8:	cmp	r5, r6
   164ac:	str	r2, [sp, #36]	; 0x24
   164b0:	beq	165b8 <__assert_fail@plt+0x5688>
   164b4:	mov	r3, #8
   164b8:	mov	r0, r5
   164bc:	str	r3, [sp]
   164c0:	rsb	r2, r2, #1
   164c4:	mvn	r3, #-2147483648	; 0x80000000
   164c8:	add	r1, sp, #36	; 0x24
   164cc:	bl	17274 <__assert_fail@plt+0x6344>
   164d0:	mov	r5, r0
   164d4:	str	r0, [r4]
   164d8:	ldr	r0, [r4, #4]
   164dc:	ldr	r2, [sp, #36]	; 0x24
   164e0:	mov	r1, #0
   164e4:	sub	r2, r2, r0
   164e8:	add	r0, r5, r0, lsl #3
   164ec:	lsl	r2, r2, #3
   164f0:	bl	10e64 <memset@plt>
   164f4:	ldr	r3, [sp, #36]	; 0x24
   164f8:	str	r3, [r4, #4]
   164fc:	ldr	r7, [r4, #20]
   16500:	ldr	r9, [r5]
   16504:	ldr	r6, [r5, #4]
   16508:	ldr	r2, [r4, #56]	; 0x38
   1650c:	ldr	r3, [r4, #16]
   16510:	ldr	ip, [r4, #60]	; 0x3c
   16514:	ldr	fp, [pc, #208]	; 165ec <__assert_fail@plt+0x56bc>
   16518:	orr	r7, r7, #1
   1651c:	str	r2, [sp, #12]
   16520:	str	r3, [sp]
   16524:	str	r7, [sp, #4]
   16528:	mov	r1, r9
   1652c:	mov	r0, r6
   16530:	str	ip, [sp, #16]
   16534:	str	fp, [sp, #8]
   16538:	mvn	r3, #0
   1653c:	mov	r2, sl
   16540:	bl	1277c <__assert_fail@plt+0x184c>
   16544:	cmp	r9, r0
   16548:	bhi	165a4 <__assert_fail@plt+0x5674>
   1654c:	ldr	r3, [pc, #156]	; 165f0 <__assert_fail@plt+0x56c0>
   16550:	add	r9, r0, #1
   16554:	cmp	r6, r3
   16558:	str	r9, [r5]
   1655c:	beq	16568 <__assert_fail@plt+0x5638>
   16560:	mov	r0, r6
   16564:	bl	124b0 <__assert_fail@plt+0x1580>
   16568:	mov	r0, r9
   1656c:	bl	17058 <__assert_fail@plt+0x6128>
   16570:	ldr	ip, [r4, #60]	; 0x3c
   16574:	ldr	r3, [r4, #16]
   16578:	ldr	lr, [r4, #56]	; 0x38
   1657c:	mov	r2, sl
   16580:	mov	r1, r9
   16584:	str	r0, [r5, #4]
   16588:	str	r3, [sp]
   1658c:	stmib	sp, {r7, fp}
   16590:	str	ip, [sp, #16]
   16594:	str	lr, [sp, #12]
   16598:	mvn	r3, #0
   1659c:	mov	r6, r0
   165a0:	bl	1277c <__assert_fail@plt+0x184c>
   165a4:	ldr	r3, [sp, #28]
   165a8:	mov	r0, r6
   165ac:	str	r3, [r8]
   165b0:	add	sp, sp, #44	; 0x2c
   165b4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   165b8:	mov	r3, #8
   165bc:	str	r3, [sp]
   165c0:	add	r1, sp, #36	; 0x24
   165c4:	rsb	r2, r2, #1
   165c8:	mvn	r3, #-2147483648	; 0x80000000
   165cc:	mov	r0, #0
   165d0:	bl	17274 <__assert_fail@plt+0x6344>
   165d4:	mov	r5, r0
   165d8:	ldm	r6, {r0, r1}
   165dc:	str	r5, [r4]
   165e0:	stm	r5, {r0, r1}
   165e4:	b	164d8 <__assert_fail@plt+0x55a8>
   165e8:	strdeq	sl, [r2], -r4
   165ec:	andeq	sl, r2, ip, lsl #2
   165f0:	muleq	r2, ip, r1
   165f4:	push	{r4, r5, r6, lr}
   165f8:	sub	sp, sp, #32
   165fc:	cmp	r1, #0
   16600:	mov	r4, r0
   16604:	ldr	r5, [sp, #48]	; 0x30
   16608:	ldr	r6, [sp, #52]	; 0x34
   1660c:	beq	16924 <__assert_fail@plt+0x59f4>
   16610:	stm	sp, {r2, r3}
   16614:	mov	r3, r1
   16618:	ldr	r2, [pc, #808]	; 16948 <__assert_fail@plt+0x5a18>
   1661c:	mov	r1, #1
   16620:	bl	10e88 <__fprintf_chk@plt>
   16624:	mov	r2, #5
   16628:	ldr	r1, [pc, #796]	; 1694c <__assert_fail@plt+0x5a1c>
   1662c:	mov	r0, #0
   16630:	bl	10d68 <dcgettext@plt>
   16634:	ldr	r3, [pc, #788]	; 16950 <__assert_fail@plt+0x5a20>
   16638:	ldr	r2, [pc, #788]	; 16954 <__assert_fail@plt+0x5a24>
   1663c:	str	r3, [sp]
   16640:	mov	r1, #1
   16644:	mov	r3, r0
   16648:	mov	r0, r4
   1664c:	bl	10e88 <__fprintf_chk@plt>
   16650:	mov	r1, r4
   16654:	mov	r0, #10
   16658:	bl	10d5c <fputc_unlocked@plt>
   1665c:	mov	r2, #5
   16660:	ldr	r1, [pc, #752]	; 16958 <__assert_fail@plt+0x5a28>
   16664:	mov	r0, #0
   16668:	bl	10d68 <dcgettext@plt>
   1666c:	mov	r1, #1
   16670:	ldr	r3, [pc, #740]	; 1695c <__assert_fail@plt+0x5a2c>
   16674:	mov	r2, r0
   16678:	mov	r0, r4
   1667c:	bl	10e88 <__fprintf_chk@plt>
   16680:	mov	r1, r4
   16684:	mov	r0, #10
   16688:	bl	10d5c <fputc_unlocked@plt>
   1668c:	cmp	r6, #9
   16690:	ldrls	pc, [pc, r6, lsl #2]
   16694:	b	1693c <__assert_fail@plt+0x5a0c>
   16698:	andeq	r6, r1, ip, lsl r7
   1669c:	andeq	r6, r1, r4, lsr #14
   166a0:	andeq	r6, r1, r0, asr r7
   166a4:	andeq	r6, r1, r4, lsl #15
   166a8:	andeq	r6, r1, r0, asr #15
   166ac:	strdeq	r6, [r1], -ip
   166b0:	andeq	r6, r1, r8, lsr r8
   166b4:	andeq	r6, r1, ip, ror r8
   166b8:	andeq	r6, r1, ip, asr #17
   166bc:	andeq	r6, r1, r0, asr #13
   166c0:	ldr	r1, [pc, #664]	; 16960 <__assert_fail@plt+0x5a30>
   166c4:	mov	r2, #5
   166c8:	mov	r0, #0
   166cc:	bl	10d68 <dcgettext@plt>
   166d0:	ldr	ip, [r5, #32]
   166d4:	ldr	r1, [r5, #28]
   166d8:	ldr	r2, [r5, #24]
   166dc:	ldr	r3, [r5]
   166e0:	ldr	r6, [r5, #20]
   166e4:	str	ip, [sp, #28]
   166e8:	ldr	lr, [r5, #16]
   166ec:	str	r1, [sp, #24]
   166f0:	ldr	ip, [r5, #12]
   166f4:	str	r2, [sp, #20]
   166f8:	ldr	r1, [r5, #8]
   166fc:	ldr	r2, [r5, #4]
   16700:	str	r6, [sp, #16]
   16704:	stmib	sp, {r1, ip, lr}
   16708:	mov	r1, #1
   1670c:	str	r2, [sp]
   16710:	mov	r2, r0
   16714:	mov	r0, r4
   16718:	bl	10e88 <__fprintf_chk@plt>
   1671c:	add	sp, sp, #32
   16720:	pop	{r4, r5, r6, pc}
   16724:	mov	r2, #5
   16728:	ldr	r1, [pc, #564]	; 16964 <__assert_fail@plt+0x5a34>
   1672c:	mov	r0, #0
   16730:	bl	10d68 <dcgettext@plt>
   16734:	ldr	r3, [r5]
   16738:	mov	r1, #1
   1673c:	mov	r2, r0
   16740:	mov	r0, r4
   16744:	add	sp, sp, #32
   16748:	pop	{r4, r5, r6, lr}
   1674c:	b	10e88 <__fprintf_chk@plt>
   16750:	mov	r2, #5
   16754:	ldr	r1, [pc, #524]	; 16968 <__assert_fail@plt+0x5a38>
   16758:	mov	r0, #0
   1675c:	bl	10d68 <dcgettext@plt>
   16760:	ldr	r2, [r5, #4]
   16764:	ldr	r3, [r5]
   16768:	mov	r1, #1
   1676c:	str	r2, [sp, #48]	; 0x30
   16770:	mov	r2, r0
   16774:	mov	r0, r4
   16778:	add	sp, sp, #32
   1677c:	pop	{r4, r5, r6, lr}
   16780:	b	10e88 <__fprintf_chk@plt>
   16784:	mov	r2, #5
   16788:	ldr	r1, [pc, #476]	; 1696c <__assert_fail@plt+0x5a3c>
   1678c:	mov	r0, #0
   16790:	bl	10d68 <dcgettext@plt>
   16794:	ldr	r1, [r5, #8]
   16798:	ldr	r2, [r5, #4]
   1679c:	ldr	r3, [r5]
   167a0:	str	r1, [sp, #52]	; 0x34
   167a4:	str	r2, [sp, #48]	; 0x30
   167a8:	mov	r1, #1
   167ac:	mov	r2, r0
   167b0:	mov	r0, r4
   167b4:	add	sp, sp, #32
   167b8:	pop	{r4, r5, r6, lr}
   167bc:	b	10e88 <__fprintf_chk@plt>
   167c0:	mov	r2, #5
   167c4:	ldr	r1, [pc, #420]	; 16970 <__assert_fail@plt+0x5a40>
   167c8:	mov	r0, #0
   167cc:	bl	10d68 <dcgettext@plt>
   167d0:	ldr	r1, [r5, #8]
   167d4:	ldr	ip, [r5, #12]
   167d8:	ldr	r2, [r5, #4]
   167dc:	ldr	r3, [r5]
   167e0:	stmib	sp, {r1, ip}
   167e4:	str	r2, [sp]
   167e8:	mov	r1, #1
   167ec:	mov	r2, r0
   167f0:	mov	r0, r4
   167f4:	bl	10e88 <__fprintf_chk@plt>
   167f8:	b	1671c <__assert_fail@plt+0x57ec>
   167fc:	mov	r2, #5
   16800:	ldr	r1, [pc, #364]	; 16974 <__assert_fail@plt+0x5a44>
   16804:	mov	r0, #0
   16808:	bl	10d68 <dcgettext@plt>
   1680c:	add	r1, r5, #8
   16810:	ldr	r2, [r5, #4]
   16814:	ldm	r1, {r1, ip, lr}
   16818:	ldr	r3, [r5]
   1681c:	str	r2, [sp]
   16820:	stmib	sp, {r1, ip, lr}
   16824:	mov	r1, #1
   16828:	mov	r2, r0
   1682c:	mov	r0, r4
   16830:	bl	10e88 <__fprintf_chk@plt>
   16834:	b	1671c <__assert_fail@plt+0x57ec>
   16838:	mov	r2, #5
   1683c:	ldr	r1, [pc, #308]	; 16978 <__assert_fail@plt+0x5a48>
   16840:	mov	r0, #0
   16844:	bl	10d68 <dcgettext@plt>
   16848:	add	r1, r5, #8
   1684c:	ldr	r2, [r5, #4]
   16850:	ldm	r1, {r1, ip, lr}
   16854:	ldr	r6, [r5, #20]
   16858:	ldr	r3, [r5]
   1685c:	stmib	sp, {r1, ip, lr}
   16860:	mov	r1, #1
   16864:	str	r2, [sp]
   16868:	str	r6, [sp, #16]
   1686c:	mov	r2, r0
   16870:	mov	r0, r4
   16874:	bl	10e88 <__fprintf_chk@plt>
   16878:	b	1671c <__assert_fail@plt+0x57ec>
   1687c:	mov	r2, #5
   16880:	ldr	r1, [pc, #244]	; 1697c <__assert_fail@plt+0x5a4c>
   16884:	mov	r0, #0
   16888:	bl	10d68 <dcgettext@plt>
   1688c:	ldr	r2, [r5, #24]
   16890:	ldr	r3, [r5]
   16894:	ldr	r6, [r5, #20]
   16898:	ldr	lr, [r5, #16]
   1689c:	ldr	ip, [r5, #12]
   168a0:	str	r2, [sp, #20]
   168a4:	ldr	r1, [r5, #8]
   168a8:	ldr	r2, [r5, #4]
   168ac:	str	r6, [sp, #16]
   168b0:	stmib	sp, {r1, ip, lr}
   168b4:	mov	r1, #1
   168b8:	str	r2, [sp]
   168bc:	mov	r2, r0
   168c0:	mov	r0, r4
   168c4:	bl	10e88 <__fprintf_chk@plt>
   168c8:	b	1671c <__assert_fail@plt+0x57ec>
   168cc:	mov	r2, #5
   168d0:	ldr	r1, [pc, #168]	; 16980 <__assert_fail@plt+0x5a50>
   168d4:	mov	r0, #0
   168d8:	bl	10d68 <dcgettext@plt>
   168dc:	ldr	r1, [r5, #28]
   168e0:	ldr	r2, [r5, #24]
   168e4:	ldr	r3, [r5]
   168e8:	ldr	r6, [r5, #20]
   168ec:	ldr	lr, [r5, #16]
   168f0:	str	r1, [sp, #24]
   168f4:	ldr	ip, [r5, #12]
   168f8:	str	r2, [sp, #20]
   168fc:	ldr	r1, [r5, #8]
   16900:	ldr	r2, [r5, #4]
   16904:	str	r6, [sp, #16]
   16908:	stmib	sp, {r1, ip, lr}
   1690c:	mov	r1, #1
   16910:	str	r2, [sp]
   16914:	mov	r2, r0
   16918:	mov	r0, r4
   1691c:	bl	10e88 <__fprintf_chk@plt>
   16920:	b	1671c <__assert_fail@plt+0x57ec>
   16924:	str	r3, [sp]
   16928:	mov	r1, #1
   1692c:	mov	r3, r2
   16930:	ldr	r2, [pc, #76]	; 16984 <__assert_fail@plt+0x5a54>
   16934:	bl	10e88 <__fprintf_chk@plt>
   16938:	b	16624 <__assert_fail@plt+0x56f4>
   1693c:	mov	r2, #5
   16940:	ldr	r1, [pc, #64]	; 16988 <__assert_fail@plt+0x5a58>
   16944:	b	166c8 <__assert_fail@plt+0x5798>
   16948:	strdeq	r9, [r1], -r4
   1694c:	andeq	r9, r1, r8, lsl #10
   16950:	andeq	r0, r0, r6, ror #15
   16954:	andeq	r9, r1, r0, ror #15
   16958:	andeq	r9, r1, ip, lsl #10
   1695c:			; <UNDEFINED> instruction: 0x000195b8
   16960:	andeq	r9, r1, r8, ror #13
   16964:	ldrdeq	r9, [r1], -ip
   16968:	andeq	r9, r1, ip, ror #11
   1696c:	andeq	r9, r1, r4, lsl #12
   16970:	andeq	r9, r1, r0, lsr #12
   16974:	andeq	r9, r1, r0, asr #12
   16978:	andeq	r9, r1, r4, ror #12
   1697c:	andeq	r9, r1, ip, lsl #13
   16980:			; <UNDEFINED> instruction: 0x000196b8
   16984:	andeq	r9, r1, r0, lsl #10
   16988:	andeq	r9, r1, ip, lsl r7
   1698c:	push	{r4, r5, lr}
   16990:	sub	sp, sp, #12
   16994:	ldr	r5, [sp, #24]
   16998:	ldr	ip, [r5]
   1699c:	cmp	ip, #0
   169a0:	beq	169bc <__assert_fail@plt+0x5a8c>
   169a4:	mov	lr, r5
   169a8:	mov	ip, #0
   169ac:	ldr	r4, [lr, #4]!
   169b0:	add	ip, ip, #1
   169b4:	cmp	r4, #0
   169b8:	bne	169ac <__assert_fail@plt+0x5a7c>
   169bc:	stm	sp, {r5, ip}
   169c0:	bl	165f4 <__assert_fail@plt+0x56c4>
   169c4:	add	sp, sp, #12
   169c8:	pop	{r4, r5, pc}
   169cc:	push	{r4, r5, lr}
   169d0:	sub	sp, sp, #76	; 0x4c
   169d4:	mov	r5, r0
   169d8:	ldr	ip, [sp, #88]	; 0x58
   169dc:	ldr	r0, [ip]
   169e0:	cmp	r0, #0
   169e4:	str	r0, [sp, #32]
   169e8:	beq	16dbc <__assert_fail@plt+0x5e8c>
   169ec:	ldr	r0, [ip, #4]
   169f0:	cmp	r0, #0
   169f4:	str	r0, [sp, #36]	; 0x24
   169f8:	beq	16dc4 <__assert_fail@plt+0x5e94>
   169fc:	ldr	r0, [ip, #8]
   16a00:	cmp	r0, #0
   16a04:	str	r0, [sp, #40]	; 0x28
   16a08:	beq	16dcc <__assert_fail@plt+0x5e9c>
   16a0c:	ldr	r0, [ip, #12]
   16a10:	cmp	r0, #0
   16a14:	str	r0, [sp, #44]	; 0x2c
   16a18:	beq	16dd4 <__assert_fail@plt+0x5ea4>
   16a1c:	ldr	r0, [ip, #16]
   16a20:	cmp	r0, #0
   16a24:	str	r0, [sp, #48]	; 0x30
   16a28:	beq	16ddc <__assert_fail@plt+0x5eac>
   16a2c:	ldr	r0, [ip, #20]
   16a30:	cmp	r0, #0
   16a34:	str	r0, [sp, #52]	; 0x34
   16a38:	beq	16de4 <__assert_fail@plt+0x5eb4>
   16a3c:	ldr	r0, [ip, #24]
   16a40:	cmp	r0, #0
   16a44:	str	r0, [sp, #56]	; 0x38
   16a48:	beq	16dec <__assert_fail@plt+0x5ebc>
   16a4c:	ldr	r0, [ip, #28]
   16a50:	cmp	r0, #0
   16a54:	str	r0, [sp, #60]	; 0x3c
   16a58:	beq	16df4 <__assert_fail@plt+0x5ec4>
   16a5c:	ldr	r0, [ip, #32]
   16a60:	cmp	r0, #0
   16a64:	str	r0, [sp, #64]	; 0x40
   16a68:	beq	16dfc <__assert_fail@plt+0x5ecc>
   16a6c:	ldr	r0, [ip, #36]	; 0x24
   16a70:	cmp	r0, #0
   16a74:	movne	r4, #10
   16a78:	moveq	r4, #9
   16a7c:	cmp	r1, #0
   16a80:	beq	16d94 <__assert_fail@plt+0x5e64>
   16a84:	stm	sp, {r2, r3}
   16a88:	mov	r0, r5
   16a8c:	mov	r3, r1
   16a90:	ldr	r2, [pc, #876]	; 16e04 <__assert_fail@plt+0x5ed4>
   16a94:	mov	r1, #1
   16a98:	bl	10e88 <__fprintf_chk@plt>
   16a9c:	mov	r2, #5
   16aa0:	ldr	r1, [pc, #864]	; 16e08 <__assert_fail@plt+0x5ed8>
   16aa4:	mov	r0, #0
   16aa8:	bl	10d68 <dcgettext@plt>
   16aac:	ldr	r3, [pc, #856]	; 16e0c <__assert_fail@plt+0x5edc>
   16ab0:	ldr	r2, [pc, #856]	; 16e10 <__assert_fail@plt+0x5ee0>
   16ab4:	str	r3, [sp]
   16ab8:	mov	r1, #1
   16abc:	mov	r3, r0
   16ac0:	mov	r0, r5
   16ac4:	bl	10e88 <__fprintf_chk@plt>
   16ac8:	mov	r1, r5
   16acc:	mov	r0, #10
   16ad0:	bl	10d5c <fputc_unlocked@plt>
   16ad4:	mov	r2, #5
   16ad8:	ldr	r1, [pc, #820]	; 16e14 <__assert_fail@plt+0x5ee4>
   16adc:	mov	r0, #0
   16ae0:	bl	10d68 <dcgettext@plt>
   16ae4:	mov	r1, #1
   16ae8:	ldr	r3, [pc, #808]	; 16e18 <__assert_fail@plt+0x5ee8>
   16aec:	mov	r2, r0
   16af0:	mov	r0, r5
   16af4:	bl	10e88 <__fprintf_chk@plt>
   16af8:	mov	r1, r5
   16afc:	mov	r0, #10
   16b00:	bl	10d5c <fputc_unlocked@plt>
   16b04:	cmp	r4, #9
   16b08:	ldrls	pc, [pc, r4, lsl #2]
   16b0c:	b	16db0 <__assert_fail@plt+0x5e80>
   16b10:	muleq	r1, r4, fp
   16b14:	muleq	r1, ip, fp
   16b18:	andeq	r6, r1, r8, asr #23
   16b1c:	strdeq	r6, [r1], -ip
   16b20:	andeq	r6, r1, r4, lsr ip
   16b24:	andeq	r6, r1, r0, ror ip
   16b28:	andeq	r6, r1, ip, lsr #25
   16b2c:	strdeq	r6, [r1], -r0
   16b30:	andeq	r6, r1, ip, lsr sp
   16b34:	andeq	r6, r1, r8, lsr fp
   16b38:	ldr	r1, [pc, #732]	; 16e1c <__assert_fail@plt+0x5eec>
   16b3c:	mov	r2, #5
   16b40:	mov	r0, #0
   16b44:	bl	10d68 <dcgettext@plt>
   16b48:	ldr	ip, [sp, #64]	; 0x40
   16b4c:	ldr	r1, [sp, #60]	; 0x3c
   16b50:	ldr	r2, [sp, #56]	; 0x38
   16b54:	ldr	lr, [sp, #48]	; 0x30
   16b58:	str	ip, [sp, #28]
   16b5c:	str	r1, [sp, #24]
   16b60:	ldr	ip, [sp, #44]	; 0x2c
   16b64:	ldr	r1, [sp, #40]	; 0x28
   16b68:	ldr	r4, [sp, #52]	; 0x34
   16b6c:	str	r2, [sp, #20]
   16b70:	ldr	r2, [sp, #36]	; 0x24
   16b74:	stmib	sp, {r1, ip, lr}
   16b78:	mov	r1, #1
   16b7c:	str	r2, [sp]
   16b80:	ldr	r3, [sp, #32]
   16b84:	str	r4, [sp, #16]
   16b88:	mov	r2, r0
   16b8c:	mov	r0, r5
   16b90:	bl	10e88 <__fprintf_chk@plt>
   16b94:	add	sp, sp, #76	; 0x4c
   16b98:	pop	{r4, r5, pc}
   16b9c:	mov	r2, #5
   16ba0:	ldr	r1, [pc, #632]	; 16e20 <__assert_fail@plt+0x5ef0>
   16ba4:	mov	r0, #0
   16ba8:	bl	10d68 <dcgettext@plt>
   16bac:	ldr	r3, [sp, #32]
   16bb0:	mov	r1, #1
   16bb4:	mov	r2, r0
   16bb8:	mov	r0, r5
   16bbc:	add	sp, sp, #76	; 0x4c
   16bc0:	pop	{r4, r5, lr}
   16bc4:	b	10e88 <__fprintf_chk@plt>
   16bc8:	mov	r2, #5
   16bcc:	ldr	r1, [pc, #592]	; 16e24 <__assert_fail@plt+0x5ef4>
   16bd0:	mov	r0, #0
   16bd4:	bl	10d68 <dcgettext@plt>
   16bd8:	ldr	r2, [sp, #36]	; 0x24
   16bdc:	ldr	r3, [sp, #32]
   16be0:	str	r2, [sp, #88]	; 0x58
   16be4:	mov	r1, #1
   16be8:	mov	r2, r0
   16bec:	mov	r0, r5
   16bf0:	add	sp, sp, #76	; 0x4c
   16bf4:	pop	{r4, r5, lr}
   16bf8:	b	10e88 <__fprintf_chk@plt>
   16bfc:	mov	r2, #5
   16c00:	ldr	r1, [pc, #544]	; 16e28 <__assert_fail@plt+0x5ef8>
   16c04:	mov	r0, #0
   16c08:	bl	10d68 <dcgettext@plt>
   16c0c:	ldr	r1, [sp, #40]	; 0x28
   16c10:	ldr	r2, [sp, #36]	; 0x24
   16c14:	str	r1, [sp, #4]
   16c18:	str	r2, [sp]
   16c1c:	ldr	r3, [sp, #32]
   16c20:	mov	r1, #1
   16c24:	mov	r2, r0
   16c28:	mov	r0, r5
   16c2c:	bl	10e88 <__fprintf_chk@plt>
   16c30:	b	16b94 <__assert_fail@plt+0x5c64>
   16c34:	mov	r2, #5
   16c38:	ldr	r1, [pc, #492]	; 16e2c <__assert_fail@plt+0x5efc>
   16c3c:	mov	r0, #0
   16c40:	bl	10d68 <dcgettext@plt>
   16c44:	ldr	r1, [sp, #40]	; 0x28
   16c48:	ldr	ip, [sp, #44]	; 0x2c
   16c4c:	ldr	r2, [sp, #36]	; 0x24
   16c50:	ldr	r3, [sp, #32]
   16c54:	stmib	sp, {r1, ip}
   16c58:	str	r2, [sp]
   16c5c:	mov	r1, #1
   16c60:	mov	r2, r0
   16c64:	mov	r0, r5
   16c68:	bl	10e88 <__fprintf_chk@plt>
   16c6c:	b	16b94 <__assert_fail@plt+0x5c64>
   16c70:	mov	r2, #5
   16c74:	ldr	r1, [pc, #436]	; 16e30 <__assert_fail@plt+0x5f00>
   16c78:	mov	r0, #0
   16c7c:	bl	10d68 <dcgettext@plt>
   16c80:	add	r1, sp, #40	; 0x28
   16c84:	ldr	r2, [sp, #36]	; 0x24
   16c88:	ldm	r1, {r1, ip, lr}
   16c8c:	ldr	r3, [sp, #32]
   16c90:	str	r2, [sp]
   16c94:	stmib	sp, {r1, ip, lr}
   16c98:	mov	r1, #1
   16c9c:	mov	r2, r0
   16ca0:	mov	r0, r5
   16ca4:	bl	10e88 <__fprintf_chk@plt>
   16ca8:	b	16b94 <__assert_fail@plt+0x5c64>
   16cac:	mov	r2, #5
   16cb0:	ldr	r1, [pc, #380]	; 16e34 <__assert_fail@plt+0x5f04>
   16cb4:	mov	r0, #0
   16cb8:	bl	10d68 <dcgettext@plt>
   16cbc:	add	r1, sp, #40	; 0x28
   16cc0:	ldr	r2, [sp, #36]	; 0x24
   16cc4:	ldm	r1, {r1, ip, lr}
   16cc8:	ldr	r4, [sp, #52]	; 0x34
   16ccc:	str	r2, [sp]
   16cd0:	stmib	sp, {r1, ip, lr}
   16cd4:	mov	r1, #1
   16cd8:	ldr	r3, [sp, #32]
   16cdc:	str	r4, [sp, #16]
   16ce0:	mov	r2, r0
   16ce4:	mov	r0, r5
   16ce8:	bl	10e88 <__fprintf_chk@plt>
   16cec:	b	16b94 <__assert_fail@plt+0x5c64>
   16cf0:	mov	r2, #5
   16cf4:	ldr	r1, [pc, #316]	; 16e38 <__assert_fail@plt+0x5f08>
   16cf8:	mov	r0, #0
   16cfc:	bl	10d68 <dcgettext@plt>
   16d00:	add	r1, sp, #40	; 0x28
   16d04:	ldr	r2, [sp, #56]	; 0x38
   16d08:	ldm	r1, {r1, ip, lr}
   16d0c:	ldr	r4, [sp, #52]	; 0x34
   16d10:	str	r2, [sp, #20]
   16d14:	ldr	r2, [sp, #36]	; 0x24
   16d18:	stmib	sp, {r1, ip, lr}
   16d1c:	mov	r1, #1
   16d20:	str	r2, [sp]
   16d24:	ldr	r3, [sp, #32]
   16d28:	str	r4, [sp, #16]
   16d2c:	mov	r2, r0
   16d30:	mov	r0, r5
   16d34:	bl	10e88 <__fprintf_chk@plt>
   16d38:	b	16b94 <__assert_fail@plt+0x5c64>
   16d3c:	mov	r2, #5
   16d40:	ldr	r1, [pc, #244]	; 16e3c <__assert_fail@plt+0x5f0c>
   16d44:	mov	r0, #0
   16d48:	bl	10d68 <dcgettext@plt>
   16d4c:	ldr	r1, [sp, #60]	; 0x3c
   16d50:	ldr	r2, [sp, #56]	; 0x38
   16d54:	ldr	lr, [sp, #48]	; 0x30
   16d58:	ldr	ip, [sp, #44]	; 0x2c
   16d5c:	str	r1, [sp, #24]
   16d60:	ldr	r1, [sp, #40]	; 0x28
   16d64:	ldr	r4, [sp, #52]	; 0x34
   16d68:	str	r2, [sp, #20]
   16d6c:	ldr	r2, [sp, #36]	; 0x24
   16d70:	stmib	sp, {r1, ip, lr}
   16d74:	mov	r1, #1
   16d78:	str	r2, [sp]
   16d7c:	ldr	r3, [sp, #32]
   16d80:	str	r4, [sp, #16]
   16d84:	mov	r2, r0
   16d88:	mov	r0, r5
   16d8c:	bl	10e88 <__fprintf_chk@plt>
   16d90:	b	16b94 <__assert_fail@plt+0x5c64>
   16d94:	str	r3, [sp]
   16d98:	mov	r1, #1
   16d9c:	mov	r3, r2
   16da0:	mov	r0, r5
   16da4:	ldr	r2, [pc, #148]	; 16e40 <__assert_fail@plt+0x5f10>
   16da8:	bl	10e88 <__fprintf_chk@plt>
   16dac:	b	16a9c <__assert_fail@plt+0x5b6c>
   16db0:	mov	r2, #5
   16db4:	ldr	r1, [pc, #136]	; 16e44 <__assert_fail@plt+0x5f14>
   16db8:	b	16b40 <__assert_fail@plt+0x5c10>
   16dbc:	mov	r4, r0
   16dc0:	b	16a7c <__assert_fail@plt+0x5b4c>
   16dc4:	mov	r4, #1
   16dc8:	b	16a7c <__assert_fail@plt+0x5b4c>
   16dcc:	mov	r4, #2
   16dd0:	b	16a7c <__assert_fail@plt+0x5b4c>
   16dd4:	mov	r4, #3
   16dd8:	b	16a7c <__assert_fail@plt+0x5b4c>
   16ddc:	mov	r4, #4
   16de0:	b	16a7c <__assert_fail@plt+0x5b4c>
   16de4:	mov	r4, #5
   16de8:	b	16a7c <__assert_fail@plt+0x5b4c>
   16dec:	mov	r4, #6
   16df0:	b	16a7c <__assert_fail@plt+0x5b4c>
   16df4:	mov	r4, #7
   16df8:	b	16a7c <__assert_fail@plt+0x5b4c>
   16dfc:	mov	r4, #8
   16e00:	b	16a7c <__assert_fail@plt+0x5b4c>
   16e04:	strdeq	r9, [r1], -r4
   16e08:	andeq	r9, r1, r8, lsl #10
   16e0c:	andeq	r0, r0, r6, ror #15
   16e10:	andeq	r9, r1, r0, ror #15
   16e14:	andeq	r9, r1, ip, lsl #10
   16e18:			; <UNDEFINED> instruction: 0x000195b8
   16e1c:	andeq	r9, r1, r8, ror #13
   16e20:	ldrdeq	r9, [r1], -ip
   16e24:	andeq	r9, r1, ip, ror #11
   16e28:	andeq	r9, r1, r4, lsl #12
   16e2c:	andeq	r9, r1, r0, lsr #12
   16e30:	andeq	r9, r1, r0, asr #12
   16e34:	andeq	r9, r1, r4, ror #12
   16e38:	andeq	r9, r1, ip, lsl #13
   16e3c:			; <UNDEFINED> instruction: 0x000196b8
   16e40:	andeq	r9, r1, r0, lsl #10
   16e44:	andeq	r9, r1, ip, lsl r7
   16e48:	push	{r3}		; (str r3, [sp, #-4]!)
   16e4c:	push	{lr}		; (str lr, [sp, #-4]!)
   16e50:	sub	sp, sp, #56	; 0x38
   16e54:	add	r3, sp, #64	; 0x40
   16e58:	ldr	ip, [sp, #64]	; 0x40
   16e5c:	str	r3, [sp, #12]
   16e60:	cmp	ip, #0
   16e64:	str	ip, [sp, #16]
   16e68:	beq	16f00 <__assert_fail@plt+0x5fd0>
   16e6c:	ldr	ip, [sp, #68]	; 0x44
   16e70:	cmp	ip, #0
   16e74:	str	ip, [sp, #20]
   16e78:	beq	16f20 <__assert_fail@plt+0x5ff0>
   16e7c:	ldr	ip, [sp, #72]	; 0x48
   16e80:	cmp	ip, #0
   16e84:	str	ip, [sp, #24]
   16e88:	beq	16f28 <__assert_fail@plt+0x5ff8>
   16e8c:	ldr	ip, [sp, #76]	; 0x4c
   16e90:	cmp	ip, #0
   16e94:	str	ip, [sp, #28]
   16e98:	beq	16f30 <__assert_fail@plt+0x6000>
   16e9c:	ldr	ip, [sp, #80]	; 0x50
   16ea0:	cmp	ip, #0
   16ea4:	str	ip, [sp, #32]
   16ea8:	beq	16f38 <__assert_fail@plt+0x6008>
   16eac:	ldr	ip, [sp, #84]	; 0x54
   16eb0:	cmp	ip, #0
   16eb4:	str	ip, [sp, #36]	; 0x24
   16eb8:	beq	16f40 <__assert_fail@plt+0x6010>
   16ebc:	ldr	ip, [sp, #88]	; 0x58
   16ec0:	cmp	ip, #0
   16ec4:	str	ip, [sp, #40]	; 0x28
   16ec8:	beq	16f48 <__assert_fail@plt+0x6018>
   16ecc:	ldr	ip, [sp, #92]	; 0x5c
   16ed0:	cmp	ip, #0
   16ed4:	str	ip, [sp, #44]	; 0x2c
   16ed8:	beq	16f50 <__assert_fail@plt+0x6020>
   16edc:	ldr	ip, [sp, #96]	; 0x60
   16ee0:	cmp	ip, #0
   16ee4:	str	ip, [sp, #48]	; 0x30
   16ee8:	beq	16f58 <__assert_fail@plt+0x6028>
   16eec:	ldr	ip, [sp, #100]	; 0x64
   16ef0:	cmp	ip, #0
   16ef4:	str	ip, [sp, #52]	; 0x34
   16ef8:	movne	ip, #10
   16efc:	moveq	ip, #9
   16f00:	add	r3, sp, #16
   16f04:	stm	sp, {r3, ip}
   16f08:	ldr	r3, [sp, #60]	; 0x3c
   16f0c:	bl	165f4 <__assert_fail@plt+0x56c4>
   16f10:	add	sp, sp, #56	; 0x38
   16f14:	pop	{lr}		; (ldr lr, [sp], #4)
   16f18:	add	sp, sp, #4
   16f1c:	bx	lr
   16f20:	mov	ip, #1
   16f24:	b	16f00 <__assert_fail@plt+0x5fd0>
   16f28:	mov	ip, #2
   16f2c:	b	16f00 <__assert_fail@plt+0x5fd0>
   16f30:	mov	ip, #3
   16f34:	b	16f00 <__assert_fail@plt+0x5fd0>
   16f38:	mov	ip, #4
   16f3c:	b	16f00 <__assert_fail@plt+0x5fd0>
   16f40:	mov	ip, #5
   16f44:	b	16f00 <__assert_fail@plt+0x5fd0>
   16f48:	mov	ip, #6
   16f4c:	b	16f00 <__assert_fail@plt+0x5fd0>
   16f50:	mov	ip, #7
   16f54:	b	16f00 <__assert_fail@plt+0x5fd0>
   16f58:	mov	ip, #8
   16f5c:	b	16f00 <__assert_fail@plt+0x5fd0>
   16f60:	ldr	r3, [pc, #116]	; 16fdc <__assert_fail@plt+0x60ac>
   16f64:	push	{r4, lr}
   16f68:	mov	r0, #10
   16f6c:	ldr	r1, [r3]
   16f70:	bl	10d5c <fputc_unlocked@plt>
   16f74:	mov	r2, #5
   16f78:	ldr	r1, [pc, #96]	; 16fe0 <__assert_fail@plt+0x60b0>
   16f7c:	mov	r0, #0
   16f80:	bl	10d68 <dcgettext@plt>
   16f84:	ldr	r2, [pc, #88]	; 16fe4 <__assert_fail@plt+0x60b4>
   16f88:	mov	r1, r0
   16f8c:	mov	r0, #1
   16f90:	bl	10e70 <__printf_chk@plt>
   16f94:	mov	r2, #5
   16f98:	ldr	r1, [pc, #72]	; 16fe8 <__assert_fail@plt+0x60b8>
   16f9c:	mov	r0, #0
   16fa0:	bl	10d68 <dcgettext@plt>
   16fa4:	ldr	r3, [pc, #64]	; 16fec <__assert_fail@plt+0x60bc>
   16fa8:	ldr	r2, [pc, #64]	; 16ff0 <__assert_fail@plt+0x60c0>
   16fac:	mov	r1, r0
   16fb0:	mov	r0, #1
   16fb4:	bl	10e70 <__printf_chk@plt>
   16fb8:	mov	r2, #5
   16fbc:	ldr	r1, [pc, #48]	; 16ff4 <__assert_fail@plt+0x60c4>
   16fc0:	mov	r0, #0
   16fc4:	bl	10d68 <dcgettext@plt>
   16fc8:	ldr	r2, [pc, #40]	; 16ff8 <__assert_fail@plt+0x60c8>
   16fcc:	pop	{r4, lr}
   16fd0:	mov	r1, r0
   16fd4:	mov	r0, #1
   16fd8:	b	10e70 <__printf_chk@plt>
   16fdc:	andeq	sl, r2, r4, asr r1
   16fe0:	andeq	r9, r1, r8, asr r7
   16fe4:	andeq	r9, r1, ip, ror #14
   16fe8:	andeq	r9, r1, r4, lsl #15
   16fec:	muleq	r1, r0, r0
   16ff0:	strheq	r9, [r1], -r8
   16ff4:	muleq	r1, r8, r7
   16ff8:	andeq	r9, r1, r0, asr #15
   16ffc:	push	{r4, r5, r6, lr}
   17000:	mov	r6, r0
   17004:	mov	r5, r1
   17008:	mov	r4, r2
   1700c:	bl	18420 <__assert_fail@plt+0x74f0>
   17010:	cmp	r0, #0
   17014:	popne	{r4, r5, r6, pc}
   17018:	cmp	r6, #0
   1701c:	beq	1702c <__assert_fail@plt+0x60fc>
   17020:	cmp	r5, #0
   17024:	cmpne	r4, #0
   17028:	popeq	{r4, r5, r6, pc}
   1702c:	bl	17678 <__assert_fail@plt+0x6748>
   17030:	push	{r4, lr}
   17034:	bl	18294 <__assert_fail@plt+0x7364>
   17038:	cmp	r0, #0
   1703c:	popne	{r4, pc}
   17040:	bl	17678 <__assert_fail@plt+0x6748>
   17044:	push	{r4, lr}
   17048:	bl	18294 <__assert_fail@plt+0x7364>
   1704c:	cmp	r0, #0
   17050:	popne	{r4, pc}
   17054:	bl	17678 <__assert_fail@plt+0x6748>
   17058:	push	{r4, lr}
   1705c:	bl	18294 <__assert_fail@plt+0x7364>
   17060:	cmp	r0, #0
   17064:	popne	{r4, pc}
   17068:	bl	17678 <__assert_fail@plt+0x6748>
   1706c:	push	{r4, r5, r6, lr}
   17070:	mov	r5, r0
   17074:	mov	r4, r1
   17078:	bl	182c0 <__assert_fail@plt+0x7390>
   1707c:	cmp	r0, #0
   17080:	popne	{r4, r5, r6, pc}
   17084:	adds	r4, r4, #0
   17088:	movne	r4, #1
   1708c:	cmp	r5, #0
   17090:	orreq	r4, r4, #1
   17094:	cmp	r4, #0
   17098:	popeq	{r4, r5, r6, pc}
   1709c:	bl	17678 <__assert_fail@plt+0x6748>
   170a0:	push	{r4, lr}
   170a4:	cmp	r1, #0
   170a8:	orreq	r1, r1, #1
   170ac:	bl	182c0 <__assert_fail@plt+0x7390>
   170b0:	cmp	r0, #0
   170b4:	popne	{r4, pc}
   170b8:	bl	17678 <__assert_fail@plt+0x6748>
   170bc:	push	{r4, r5, r6, lr}
   170c0:	mov	r6, r0
   170c4:	mov	r5, r1
   170c8:	mov	r4, r2
   170cc:	bl	18420 <__assert_fail@plt+0x74f0>
   170d0:	cmp	r0, #0
   170d4:	popne	{r4, r5, r6, pc}
   170d8:	cmp	r6, #0
   170dc:	beq	170ec <__assert_fail@plt+0x61bc>
   170e0:	cmp	r5, #0
   170e4:	cmpne	r4, #0
   170e8:	popeq	{r4, r5, r6, pc}
   170ec:	bl	17678 <__assert_fail@plt+0x6748>
   170f0:	cmp	r2, #0
   170f4:	cmpne	r1, #0
   170f8:	moveq	r2, #1
   170fc:	moveq	r1, r2
   17100:	push	{r4, lr}
   17104:	bl	18420 <__assert_fail@plt+0x74f0>
   17108:	cmp	r0, #0
   1710c:	popne	{r4, pc}
   17110:	bl	17678 <__assert_fail@plt+0x6748>
   17114:	push	{r4, lr}
   17118:	mov	r2, r1
   1711c:	mov	r1, r0
   17120:	mov	r0, #0
   17124:	bl	18420 <__assert_fail@plt+0x74f0>
   17128:	cmp	r0, #0
   1712c:	popne	{r4, pc}
   17130:	bl	17678 <__assert_fail@plt+0x6748>
   17134:	cmp	r1, #0
   17138:	cmpne	r0, #0
   1713c:	moveq	r2, #1
   17140:	movne	r2, r1
   17144:	moveq	r1, r2
   17148:	movne	r1, r0
   1714c:	push	{r4, lr}
   17150:	mov	r0, #0
   17154:	bl	18420 <__assert_fail@plt+0x74f0>
   17158:	cmp	r0, #0
   1715c:	popne	{r4, pc}
   17160:	bl	17678 <__assert_fail@plt+0x6748>
   17164:	cmp	r0, #0
   17168:	push	{r4, r5, r6, lr}
   1716c:	mov	r5, r1
   17170:	ldr	r4, [r1]
   17174:	beq	171b0 <__assert_fail@plt+0x6280>
   17178:	lsr	r2, r4, #1
   1717c:	add	r3, r2, #1
   17180:	mvn	r3, r3
   17184:	cmp	r4, r3
   17188:	bhi	171cc <__assert_fail@plt+0x629c>
   1718c:	add	r4, r4, #1
   17190:	add	r4, r4, r2
   17194:	mov	r1, r4
   17198:	mov	r2, #1
   1719c:	bl	18420 <__assert_fail@plt+0x74f0>
   171a0:	cmp	r0, #0
   171a4:	beq	171d0 <__assert_fail@plt+0x62a0>
   171a8:	str	r4, [r5]
   171ac:	pop	{r4, r5, r6, pc}
   171b0:	cmp	r4, #0
   171b4:	moveq	r4, #64	; 0x40
   171b8:	mov	r1, r4
   171bc:	mov	r2, #1
   171c0:	bl	18420 <__assert_fail@plt+0x74f0>
   171c4:	cmp	r0, #0
   171c8:	bne	171a8 <__assert_fail@plt+0x6278>
   171cc:	bl	17678 <__assert_fail@plt+0x6748>
   171d0:	cmp	r4, #0
   171d4:	bne	171cc <__assert_fail@plt+0x629c>
   171d8:	str	r4, [r5]
   171dc:	pop	{r4, r5, r6, pc}
   171e0:	cmp	r0, #0
   171e4:	push	{r4, r5, r6, lr}
   171e8:	mov	r5, r1
   171ec:	ldr	r4, [r1]
   171f0:	mov	r6, r2
   171f4:	beq	17238 <__assert_fail@plt+0x6308>
   171f8:	lsr	r1, r4, #1
   171fc:	add	r3, r1, #1
   17200:	mvn	r3, r3
   17204:	cmp	r4, r3
   17208:	bhi	17270 <__assert_fail@plt+0x6340>
   1720c:	add	r4, r4, #1
   17210:	add	r4, r4, r1
   17214:	mov	r1, r4
   17218:	bl	18420 <__assert_fail@plt+0x74f0>
   1721c:	cmp	r0, #0
   17220:	bne	17230 <__assert_fail@plt+0x6300>
   17224:	cmp	r4, #0
   17228:	cmpne	r6, #0
   1722c:	bne	17270 <__assert_fail@plt+0x6340>
   17230:	str	r4, [r5]
   17234:	pop	{r4, r5, r6, pc}
   17238:	cmp	r4, #0
   1723c:	bne	17258 <__assert_fail@plt+0x6328>
   17240:	mov	r1, r2
   17244:	mov	r0, #64	; 0x40
   17248:	bl	18560 <__assert_fail@plt+0x7630>
   1724c:	cmp	r0, #0
   17250:	movne	r4, r0
   17254:	addeq	r4, r0, #1
   17258:	mov	r2, r6
   1725c:	mov	r1, r4
   17260:	mov	r0, #0
   17264:	bl	18420 <__assert_fail@plt+0x74f0>
   17268:	cmp	r0, #0
   1726c:	bne	17230 <__assert_fail@plt+0x6300>
   17270:	bl	17678 <__assert_fail@plt+0x6748>
   17274:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   17278:	sub	sp, sp, #12
   1727c:	ldr	r6, [r1]
   17280:	mov	r8, r1
   17284:	mov	r9, r0
   17288:	asrs	r4, r6, #1
   1728c:	mov	sl, r2
   17290:	mov	fp, r3
   17294:	ldr	r7, [sp, #48]	; 0x30
   17298:	bmi	17414 <__assert_fail@plt+0x64e4>
   1729c:	mvn	r1, #-2147483648	; 0x80000000
   172a0:	sub	r1, r1, r4
   172a4:	cmp	r6, r1
   172a8:	movle	r1, #0
   172ac:	movgt	r1, #1
   172b0:	mvn	r3, fp
   172b4:	cmp	r1, #0
   172b8:	addeq	r4, r4, r6
   172bc:	mvnne	r4, #-2147483648	; 0x80000000
   172c0:	lsr	r3, r3, #31
   172c4:	cmp	fp, r4
   172c8:	movge	r2, #0
   172cc:	andlt	r2, r3, #1
   172d0:	cmp	r2, #0
   172d4:	beq	173c4 <__assert_fail@plt+0x6494>
   172d8:	cmp	r7, #0
   172dc:	blt	174ac <__assert_fail@plt+0x657c>
   172e0:	bne	174a4 <__assert_fail@plt+0x6574>
   172e4:	mov	r5, #64	; 0x40
   172e8:	mov	r1, r7
   172ec:	mov	r0, r5
   172f0:	str	r3, [sp, #4]
   172f4:	bl	1876c <__assert_fail@plt+0x783c>
   172f8:	mov	r1, r7
   172fc:	mov	r4, r0
   17300:	mov	r0, r5
   17304:	bl	1898c <__assert_fail@plt+0x7a5c>
   17308:	ldr	r3, [sp, #4]
   1730c:	sub	r5, r5, r1
   17310:	cmp	r9, #0
   17314:	sub	r2, r4, r6
   17318:	streq	r9, [r8]
   1731c:	cmp	r2, sl
   17320:	bge	173a4 <__assert_fail@plt+0x6474>
   17324:	cmp	sl, #0
   17328:	blt	17444 <__assert_fail@plt+0x6514>
   1732c:	cmp	r6, #0
   17330:	blt	17350 <__assert_fail@plt+0x6420>
   17334:	mvn	r2, #-2147483648	; 0x80000000
   17338:	sub	r2, r2, sl
   1733c:	cmp	r6, r2
   17340:	movle	r2, #0
   17344:	movgt	r2, #1
   17348:	cmp	r2, #0
   1734c:	bne	17440 <__assert_fail@plt+0x6510>
   17350:	add	r6, r6, sl
   17354:	cmp	fp, r6
   17358:	movge	r3, #0
   1735c:	andlt	r3, r3, #1
   17360:	cmp	r3, #0
   17364:	mov	r4, r6
   17368:	bne	17440 <__assert_fail@plt+0x6510>
   1736c:	cmp	r7, #0
   17370:	blt	17458 <__assert_fail@plt+0x6528>
   17374:	beq	173a0 <__assert_fail@plt+0x6470>
   17378:	cmp	r6, #0
   1737c:	blt	174fc <__assert_fail@plt+0x65cc>
   17380:	mov	r1, r7
   17384:	mvn	r0, #-2147483648	; 0x80000000
   17388:	bl	1876c <__assert_fail@plt+0x783c>
   1738c:	cmp	r6, r0
   17390:	movle	r0, #0
   17394:	movgt	r0, #1
   17398:	cmp	r0, #0
   1739c:	bne	17440 <__assert_fail@plt+0x6510>
   173a0:	mul	r5, r6, r7
   173a4:	mov	r1, r5
   173a8:	mov	r0, r9
   173ac:	bl	182c0 <__assert_fail@plt+0x7390>
   173b0:	cmp	r0, #0
   173b4:	beq	17428 <__assert_fail@plt+0x64f8>
   173b8:	str	r4, [r8]
   173bc:	add	sp, sp, #12
   173c0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   173c4:	cmp	r7, #0
   173c8:	blt	17484 <__assert_fail@plt+0x6554>
   173cc:	beq	172e4 <__assert_fail@plt+0x63b4>
   173d0:	cmp	r4, #0
   173d4:	blt	174b4 <__assert_fail@plt+0x6584>
   173d8:	mov	r1, r7
   173dc:	mvn	r0, #-2147483648	; 0x80000000
   173e0:	str	r3, [sp, #4]
   173e4:	bl	1876c <__assert_fail@plt+0x783c>
   173e8:	ldr	r3, [sp, #4]
   173ec:	cmp	r0, r4
   173f0:	movge	r0, #0
   173f4:	movlt	r0, #1
   173f8:	cmp	r0, #0
   173fc:	mvnne	r5, #-2147483648	; 0x80000000
   17400:	bne	172e8 <__assert_fail@plt+0x63b8>
   17404:	mul	r5, r7, r4
   17408:	cmp	r5, #63	; 0x3f
   1740c:	bgt	17310 <__assert_fail@plt+0x63e0>
   17410:	b	172e4 <__assert_fail@plt+0x63b4>
   17414:	rsb	r1, r4, #-2147483648	; 0x80000000
   17418:	cmp	r6, r1
   1741c:	movge	r1, #0
   17420:	movlt	r1, #1
   17424:	b	172b0 <__assert_fail@plt+0x6380>
   17428:	adds	r5, r5, #0
   1742c:	movne	r5, #1
   17430:	cmp	r9, #0
   17434:	orreq	r5, r5, #1
   17438:	cmp	r5, #0
   1743c:	beq	173b8 <__assert_fail@plt+0x6488>
   17440:	bl	17678 <__assert_fail@plt+0x6748>
   17444:	rsb	r2, sl, #-2147483648	; 0x80000000
   17448:	cmp	r6, r2
   1744c:	movge	r2, #0
   17450:	movlt	r2, #1
   17454:	b	17348 <__assert_fail@plt+0x6418>
   17458:	cmp	r6, #0
   1745c:	blt	174e0 <__assert_fail@plt+0x65b0>
   17460:	cmn	r7, #1
   17464:	beq	173a0 <__assert_fail@plt+0x6470>
   17468:	mov	r1, r7
   1746c:	mov	r0, #-2147483648	; 0x80000000
   17470:	bl	1876c <__assert_fail@plt+0x783c>
   17474:	cmp	r6, r0
   17478:	movle	r0, #0
   1747c:	movgt	r0, #1
   17480:	b	17398 <__assert_fail@plt+0x6468>
   17484:	cmp	r4, #0
   17488:	blt	17520 <__assert_fail@plt+0x65f0>
   1748c:	cmn	r7, #1
   17490:	beq	17404 <__assert_fail@plt+0x64d4>
   17494:	str	r3, [sp, #4]
   17498:	mov	r1, r7
   1749c:	mov	r0, #-2147483648	; 0x80000000
   174a0:	b	173e4 <__assert_fail@plt+0x64b4>
   174a4:	mov	r4, fp
   174a8:	b	173d8 <__assert_fail@plt+0x64a8>
   174ac:	mov	r4, fp
   174b0:	b	1748c <__assert_fail@plt+0x655c>
   174b4:	cmn	r4, #1
   174b8:	beq	17404 <__assert_fail@plt+0x64d4>
   174bc:	mov	r1, r4
   174c0:	mov	r0, #-2147483648	; 0x80000000
   174c4:	str	r3, [sp, #4]
   174c8:	bl	1876c <__assert_fail@plt+0x783c>
   174cc:	ldr	r3, [sp, #4]
   174d0:	cmp	r7, r0
   174d4:	movle	r0, #0
   174d8:	movgt	r0, #1
   174dc:	b	173f8 <__assert_fail@plt+0x64c8>
   174e0:	mov	r1, r7
   174e4:	mvn	r0, #-2147483648	; 0x80000000
   174e8:	bl	1876c <__assert_fail@plt+0x783c>
   174ec:	cmp	r6, r0
   174f0:	movge	r0, #0
   174f4:	movlt	r0, #1
   174f8:	b	17398 <__assert_fail@plt+0x6468>
   174fc:	cmn	r6, #1
   17500:	beq	173a0 <__assert_fail@plt+0x6470>
   17504:	mov	r1, r6
   17508:	mov	r0, #-2147483648	; 0x80000000
   1750c:	bl	1876c <__assert_fail@plt+0x783c>
   17510:	cmp	r7, r0
   17514:	movle	r0, #0
   17518:	movgt	r0, #1
   1751c:	b	17398 <__assert_fail@plt+0x6468>
   17520:	mov	r1, r7
   17524:	mvn	r0, #-2147483648	; 0x80000000
   17528:	str	r3, [sp, #4]
   1752c:	bl	1876c <__assert_fail@plt+0x783c>
   17530:	ldr	r3, [sp, #4]
   17534:	cmp	r0, r4
   17538:	movle	r0, #0
   1753c:	movgt	r0, #1
   17540:	b	173f8 <__assert_fail@plt+0x64c8>
   17544:	push	{r4, lr}
   17548:	mov	r1, #1
   1754c:	bl	1824c <__assert_fail@plt+0x731c>
   17550:	cmp	r0, #0
   17554:	popne	{r4, pc}
   17558:	bl	17678 <__assert_fail@plt+0x6748>
   1755c:	push	{r4, lr}
   17560:	mov	r1, #1
   17564:	bl	1824c <__assert_fail@plt+0x731c>
   17568:	cmp	r0, #0
   1756c:	popne	{r4, pc}
   17570:	bl	17678 <__assert_fail@plt+0x6748>
   17574:	push	{r4, lr}
   17578:	bl	1824c <__assert_fail@plt+0x731c>
   1757c:	cmp	r0, #0
   17580:	popne	{r4, pc}
   17584:	bl	17678 <__assert_fail@plt+0x6748>
   17588:	push	{r4, lr}
   1758c:	bl	1824c <__assert_fail@plt+0x731c>
   17590:	cmp	r0, #0
   17594:	popne	{r4, pc}
   17598:	bl	17678 <__assert_fail@plt+0x6748>
   1759c:	push	{r4, r5, r6, lr}
   175a0:	mov	r6, r0
   175a4:	mov	r0, r1
   175a8:	mov	r4, r1
   175ac:	bl	18294 <__assert_fail@plt+0x7364>
   175b0:	subs	r5, r0, #0
   175b4:	beq	175cc <__assert_fail@plt+0x669c>
   175b8:	mov	r2, r4
   175bc:	mov	r1, r6
   175c0:	bl	10d2c <memcpy@plt>
   175c4:	mov	r0, r5
   175c8:	pop	{r4, r5, r6, pc}
   175cc:	bl	17678 <__assert_fail@plt+0x6748>
   175d0:	push	{r4, r5, r6, lr}
   175d4:	mov	r6, r0
   175d8:	mov	r0, r1
   175dc:	mov	r4, r1
   175e0:	bl	18294 <__assert_fail@plt+0x7364>
   175e4:	subs	r5, r0, #0
   175e8:	beq	17600 <__assert_fail@plt+0x66d0>
   175ec:	mov	r2, r4
   175f0:	mov	r1, r6
   175f4:	bl	10d2c <memcpy@plt>
   175f8:	mov	r0, r5
   175fc:	pop	{r4, r5, r6, pc}
   17600:	bl	17678 <__assert_fail@plt+0x6748>
   17604:	push	{r4, r5, r6, lr}
   17608:	mov	r6, r0
   1760c:	add	r0, r1, #1
   17610:	mov	r4, r1
   17614:	bl	18294 <__assert_fail@plt+0x7364>
   17618:	subs	r5, r0, #0
   1761c:	beq	1763c <__assert_fail@plt+0x670c>
   17620:	mov	r3, #0
   17624:	mov	r1, r6
   17628:	strb	r3, [r5, r4]
   1762c:	mov	r2, r4
   17630:	bl	10d2c <memcpy@plt>
   17634:	mov	r0, r5
   17638:	pop	{r4, r5, r6, pc}
   1763c:	bl	17678 <__assert_fail@plt+0x6748>
   17640:	push	{r4, r5, r6, lr}
   17644:	mov	r6, r0
   17648:	bl	10e34 <strlen@plt>
   1764c:	add	r4, r0, #1
   17650:	mov	r0, r4
   17654:	bl	18294 <__assert_fail@plt+0x7364>
   17658:	subs	r5, r0, #0
   1765c:	beq	17674 <__assert_fail@plt+0x6744>
   17660:	mov	r2, r4
   17664:	mov	r1, r6
   17668:	bl	10d2c <memcpy@plt>
   1766c:	mov	r0, r5
   17670:	pop	{r4, r5, r6, pc}
   17674:	bl	17678 <__assert_fail@plt+0x6748>
   17678:	ldr	r3, [pc, #44]	; 176ac <__assert_fail@plt+0x677c>
   1767c:	push	{r4, lr}
   17680:	mov	r2, #5
   17684:	ldr	r1, [pc, #36]	; 176b0 <__assert_fail@plt+0x6780>
   17688:	mov	r0, #0
   1768c:	ldr	r4, [r3]
   17690:	bl	10d68 <dcgettext@plt>
   17694:	ldr	r2, [pc, #24]	; 176b4 <__assert_fail@plt+0x6784>
   17698:	mov	r1, #0
   1769c:	mov	r3, r0
   176a0:	mov	r0, r4
   176a4:	bl	10dd4 <error@plt>
   176a8:	bl	10f24 <abort@plt>
   176ac:	strdeq	sl, [r2], -r0
   176b0:	andeq	r9, r1, r0, lsl r8
   176b4:	muleq	r1, r4, r1
   176b8:	cmp	r2, #36	; 0x24
   176bc:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   176c0:	sub	sp, sp, #52	; 0x34
   176c4:	bhi	18238 <__assert_fail@plt+0x7308>
   176c8:	cmp	r1, #0
   176cc:	mov	r5, r1
   176d0:	mov	r6, r2
   176d4:	addeq	r5, sp, #44	; 0x2c
   176d8:	mov	sl, r0
   176dc:	mov	r9, r3
   176e0:	bl	10e4c <__errno_location@plt>
   176e4:	mov	r4, #0
   176e8:	mov	r2, r6
   176ec:	mov	r3, r4
   176f0:	mov	r1, r5
   176f4:	str	r4, [r0]
   176f8:	mov	fp, r0
   176fc:	mov	r0, sl
   17700:	bl	10ee8 <__strtoll_internal@plt>
   17704:	ldr	r8, [r5]
   17708:	cmp	sl, r8
   1770c:	mov	r6, r0
   17710:	mov	r7, r1
   17714:	beq	17764 <__assert_fail@plt+0x6834>
   17718:	ldr	r4, [fp]
   1771c:	cmp	r4, #0
   17720:	bne	1774c <__assert_fail@plt+0x681c>
   17724:	ldr	r3, [sp, #88]	; 0x58
   17728:	cmp	r3, #0
   1772c:	beq	1773c <__assert_fail@plt+0x680c>
   17730:	ldrb	sl, [r8]
   17734:	cmp	sl, #0
   17738:	bne	17798 <__assert_fail@plt+0x6868>
   1773c:	strd	r6, [r9]
   17740:	mov	r0, r4
   17744:	add	sp, sp, #52	; 0x34
   17748:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1774c:	cmp	r4, #34	; 0x22
   17750:	beq	179f8 <__assert_fail@plt+0x6ac8>
   17754:	mov	r4, #4
   17758:	mov	r0, r4
   1775c:	add	sp, sp, #52	; 0x34
   17760:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   17764:	ldr	r3, [sp, #88]	; 0x58
   17768:	cmp	r3, r4
   1776c:	beq	17754 <__assert_fail@plt+0x6824>
   17770:	ldrb	sl, [sl]
   17774:	cmp	sl, r4
   17778:	beq	17754 <__assert_fail@plt+0x6824>
   1777c:	mov	r1, sl
   17780:	mov	r0, r3
   17784:	bl	10e40 <strchr@plt>
   17788:	cmp	r0, r4
   1778c:	movne	r6, #1
   17790:	movne	r7, #0
   17794:	beq	17754 <__assert_fail@plt+0x6824>
   17798:	mov	r1, sl
   1779c:	ldr	r0, [sp, #88]	; 0x58
   177a0:	bl	10e40 <strchr@plt>
   177a4:	cmp	r0, #0
   177a8:	beq	17db0 <__assert_fail@plt+0x6e80>
   177ac:	sub	r3, sl, #69	; 0x45
   177b0:	cmp	r3, #47	; 0x2f
   177b4:	ldrls	pc, [pc, r3, lsl #2]
   177b8:	b	1787c <__assert_fail@plt+0x694c>
   177bc:	muleq	r1, r4, r9
   177c0:	andeq	r7, r1, ip, ror r8
   177c4:	muleq	r1, r4, r9
   177c8:	andeq	r7, r1, ip, ror r8
   177cc:	andeq	r7, r1, ip, ror r8
   177d0:	andeq	r7, r1, ip, ror r8
   177d4:	muleq	r1, r4, r9
   177d8:	andeq	r7, r1, ip, ror r8
   177dc:	muleq	r1, r4, r9
   177e0:	andeq	r7, r1, ip, ror r8
   177e4:	andeq	r7, r1, ip, ror r8
   177e8:	muleq	r1, r4, r9
   177ec:	andeq	r7, r1, ip, ror r8
   177f0:	andeq	r7, r1, ip, ror r8
   177f4:	andeq	r7, r1, ip, ror r8
   177f8:	muleq	r1, r4, r9
   177fc:	andeq	r7, r1, ip, ror r8
   17800:	andeq	r7, r1, ip, ror r8
   17804:	andeq	r7, r1, ip, ror r8
   17808:	andeq	r7, r1, ip, ror r8
   1780c:	muleq	r1, r4, r9
   17810:	muleq	r1, r4, r9
   17814:	andeq	r7, r1, ip, ror r8
   17818:	andeq	r7, r1, ip, ror r8
   1781c:	andeq	r7, r1, ip, ror r8
   17820:	andeq	r7, r1, ip, ror r8
   17824:	andeq	r7, r1, ip, ror r8
   17828:	andeq	r7, r1, ip, ror r8
   1782c:	andeq	r7, r1, ip, ror r8
   17830:	andeq	r7, r1, ip, ror r8
   17834:	andeq	r7, r1, ip, ror r8
   17838:	andeq	r7, r1, ip, ror r8
   1783c:	andeq	r7, r1, ip, ror r8
   17840:	andeq	r7, r1, ip, ror r8
   17844:	muleq	r1, r4, r9
   17848:	andeq	r7, r1, ip, ror r8
   1784c:	andeq	r7, r1, ip, ror r8
   17850:	andeq	r7, r1, ip, ror r8
   17854:	muleq	r1, r4, r9
   17858:	andeq	r7, r1, ip, ror r8
   1785c:	muleq	r1, r4, r9
   17860:	andeq	r7, r1, ip, ror r8
   17864:	andeq	r7, r1, ip, ror r8
   17868:	andeq	r7, r1, ip, ror r8
   1786c:	andeq	r7, r1, ip, ror r8
   17870:	andeq	r7, r1, ip, ror r8
   17874:	andeq	r7, r1, ip, ror r8
   17878:	muleq	r1, r4, r9
   1787c:	mov	r3, #1024	; 0x400
   17880:	str	r3, [sp, #12]
   17884:	mov	r3, #0
   17888:	str	r3, [sp, #8]
   1788c:	ldr	r3, [pc, #1292]	; 17da0 <__assert_fail@plt+0x6e70>
   17890:	mvn	r2, #0
   17894:	strd	r2, [sp, #16]
   17898:	mov	r3, #0
   1789c:	mov	r2, #1024	; 0x400
   178a0:	strd	r2, [sp, #24]
   178a4:	mov	r3, #1
   178a8:	str	r3, [sp, #4]
   178ac:	sub	sl, sl, #66	; 0x42
   178b0:	cmp	sl, #53	; 0x35
   178b4:	ldrls	pc, [pc, sl, lsl #2]
   178b8:	b	17db0 <__assert_fail@plt+0x6e80>
   178bc:	andeq	r7, r1, r4, lsl sp
   178c0:			; <UNDEFINED> instruction: 0x00017db0
   178c4:			; <UNDEFINED> instruction: 0x00017db0
   178c8:	andeq	r7, r1, r8, lsr #22
   178cc:			; <UNDEFINED> instruction: 0x00017db0
   178d0:	andeq	r7, r1, r8, asr #21
   178d4:			; <UNDEFINED> instruction: 0x00017db0
   178d8:			; <UNDEFINED> instruction: 0x00017db0
   178dc:			; <UNDEFINED> instruction: 0x00017db0
   178e0:			; <UNDEFINED> instruction: 0x00017dbc
   178e4:			; <UNDEFINED> instruction: 0x00017db0
   178e8:	andeq	r7, r1, r8, ror #20
   178ec:			; <UNDEFINED> instruction: 0x00017db0
   178f0:			; <UNDEFINED> instruction: 0x00017db0
   178f4:	andeq	r7, r1, r8, lsr ip
   178f8:			; <UNDEFINED> instruction: 0x00017db0
   178fc:			; <UNDEFINED> instruction: 0x00017db0
   17900:			; <UNDEFINED> instruction: 0x00017db0
   17904:	andeq	r7, r1, r4, ror #23
   17908:			; <UNDEFINED> instruction: 0x00017db0
   1790c:			; <UNDEFINED> instruction: 0x00017db0
   17910:			; <UNDEFINED> instruction: 0x00017db0
   17914:			; <UNDEFINED> instruction: 0x00017db0
   17918:	andeq	r7, r1, ip, lsl #25
   1791c:	andeq	r7, r1, ip, lsl #23
   17920:			; <UNDEFINED> instruction: 0x00017db0
   17924:			; <UNDEFINED> instruction: 0x00017db0
   17928:			; <UNDEFINED> instruction: 0x00017db0
   1792c:			; <UNDEFINED> instruction: 0x00017db0
   17930:			; <UNDEFINED> instruction: 0x00017db0
   17934:			; <UNDEFINED> instruction: 0x00017db0
   17938:			; <UNDEFINED> instruction: 0x00017db0
   1793c:	andeq	r7, r1, ip, lsr sp
   17940:	andeq	r7, r1, r4, asr #20
   17944:			; <UNDEFINED> instruction: 0x00017db0
   17948:			; <UNDEFINED> instruction: 0x00017db0
   1794c:			; <UNDEFINED> instruction: 0x00017db0
   17950:	andeq	r7, r1, r8, asr #21
   17954:			; <UNDEFINED> instruction: 0x00017db0
   17958:			; <UNDEFINED> instruction: 0x00017db0
   1795c:			; <UNDEFINED> instruction: 0x00017db0
   17960:			; <UNDEFINED> instruction: 0x00017dbc
   17964:			; <UNDEFINED> instruction: 0x00017db0
   17968:	andeq	r7, r1, r8, ror #20
   1796c:			; <UNDEFINED> instruction: 0x00017db0
   17970:			; <UNDEFINED> instruction: 0x00017db0
   17974:			; <UNDEFINED> instruction: 0x00017db0
   17978:			; <UNDEFINED> instruction: 0x00017db0
   1797c:			; <UNDEFINED> instruction: 0x00017db0
   17980:			; <UNDEFINED> instruction: 0x00017db0
   17984:	andeq	r7, r1, r4, ror #23
   17988:			; <UNDEFINED> instruction: 0x00017db0
   1798c:			; <UNDEFINED> instruction: 0x00017db0
   17990:	andeq	r7, r1, r0, ror sp
   17994:	mov	r1, #48	; 0x30
   17998:	ldr	r0, [sp, #88]	; 0x58
   1799c:	bl	10e40 <strchr@plt>
   179a0:	cmp	r0, #0
   179a4:	beq	17df8 <__assert_fail@plt+0x6ec8>
   179a8:	ldrb	r3, [r8, #1]
   179ac:	cmp	r3, #68	; 0x44
   179b0:	beq	179c4 <__assert_fail@plt+0x6a94>
   179b4:	cmp	r3, #105	; 0x69
   179b8:	beq	17a00 <__assert_fail@plt+0x6ad0>
   179bc:	cmp	r3, #66	; 0x42
   179c0:	bne	1787c <__assert_fail@plt+0x694c>
   179c4:	mov	r3, #1000	; 0x3e8
   179c8:	str	r3, [sp, #12]
   179cc:	mov	r3, #0
   179d0:	str	r3, [sp, #8]
   179d4:	add	r3, pc, #956	; 0x3bc
   179d8:	ldrd	r2, [r3]
   179dc:	strd	r2, [sp, #16]
   179e0:	mov	r3, #0
   179e4:	mov	r2, #1000	; 0x3e8
   179e8:	strd	r2, [sp, #24]
   179ec:	mov	r3, #2
   179f0:	str	r3, [sp, #4]
   179f4:	b	178ac <__assert_fail@plt+0x697c>
   179f8:	mov	r4, #1
   179fc:	b	17724 <__assert_fail@plt+0x67f4>
   17a00:	ldrb	r3, [r8, #2]
   17a04:	mvn	r2, #0
   17a08:	cmp	r3, #66	; 0x42
   17a0c:	mov	r3, #1024	; 0x400
   17a10:	str	r3, [sp, #12]
   17a14:	mov	r3, #0
   17a18:	str	r3, [sp, #8]
   17a1c:	ldr	r3, [pc, #892]	; 17da0 <__assert_fail@plt+0x6e70>
   17a20:	strd	r2, [sp, #16]
   17a24:	mov	r3, #0
   17a28:	mov	r2, #1024	; 0x400
   17a2c:	strd	r2, [sp, #24]
   17a30:	moveq	r3, #3
   17a34:	streq	r3, [sp, #4]
   17a38:	movne	r3, #1
   17a3c:	strne	r3, [sp, #4]
   17a40:	b	178ac <__assert_fail@plt+0x697c>
   17a44:	mov	sl, #0
   17a48:	ldr	r2, [sp, #4]
   17a4c:	orr	r4, r4, sl
   17a50:	add	r3, r8, r2
   17a54:	str	r3, [r5]
   17a58:	ldrb	r3, [r8, r2]
   17a5c:	cmp	r3, #0
   17a60:	orrne	r4, r4, #2
   17a64:	b	1773c <__assert_fail@plt+0x680c>
   17a68:	mov	sl, #0
   17a6c:	mov	r3, r9
   17a70:	mov	fp, #1
   17a74:	mov	r9, r5
   17a78:	mov	r5, r4
   17a7c:	mov	r4, sl
   17a80:	mov	sl, r3
   17a84:	cmp	r6, #0
   17a88:	sbcs	r3, r7, #0
   17a8c:	blt	181b4 <__assert_fail@plt+0x7284>
   17a90:	ldrd	r2, [sp, #16]
   17a94:	cmp	r2, r6
   17a98:	sbcs	r1, r3, r7
   17a9c:	bge	180c4 <__assert_fail@plt+0x7194>
   17aa0:	sub	fp, fp, #1
   17aa4:	cmn	fp, #1
   17aa8:	mov	r4, #1
   17aac:	mvn	r6, #0
   17ab0:	mvn	r7, #-2147483648	; 0x80000000
   17ab4:	bne	17a94 <__assert_fail@plt+0x6b64>
   17ab8:	mov	r4, r5
   17abc:	mov	r5, r9
   17ac0:	mov	r9, sl
   17ac4:	b	17d2c <__assert_fail@plt+0x6dfc>
   17ac8:	mov	sl, #0
   17acc:	str	r9, [sp, #32]
   17ad0:	mov	r9, r5
   17ad4:	mov	r5, r4
   17ad8:	mov	r4, sl
   17adc:	ldr	sl, [sp, #12]
   17ae0:	mov	fp, #2
   17ae4:	cmp	r6, #0
   17ae8:	sbcs	r3, r7, #0
   17aec:	blt	18100 <__assert_fail@plt+0x71d0>
   17af0:	ldrd	r2, [sp, #16]
   17af4:	cmp	r2, r6
   17af8:	sbcs	r1, r3, r7
   17afc:	bge	18168 <__assert_fail@plt+0x7238>
   17b00:	sub	fp, fp, #1
   17b04:	cmn	fp, #1
   17b08:	mvn	r6, #0
   17b0c:	mvn	r7, #-2147483648	; 0x80000000
   17b10:	mov	r4, #1
   17b14:	bne	17af4 <__assert_fail@plt+0x6bc4>
   17b18:	mov	r4, r5
   17b1c:	mov	r5, r9
   17b20:	ldr	r9, [sp, #32]
   17b24:	b	17d2c <__assert_fail@plt+0x6dfc>
   17b28:	mov	sl, #0
   17b2c:	str	r4, [sp, #32]
   17b30:	str	r9, [sp, #36]	; 0x24
   17b34:	mov	r4, sl
   17b38:	mov	r9, r5
   17b3c:	ldr	sl, [sp, #12]
   17b40:	ldr	r5, [sp, #8]
   17b44:	mov	fp, #5
   17b48:	cmp	r6, #0
   17b4c:	sbcs	r3, r7, #0
   17b50:	blt	17f74 <__assert_fail@plt+0x7044>
   17b54:	ldrd	r2, [sp, #16]
   17b58:	cmp	r2, r6
   17b5c:	sbcs	r1, r3, r7
   17b60:	bge	17fac <__assert_fail@plt+0x707c>
   17b64:	sub	fp, fp, #1
   17b68:	cmn	fp, #1
   17b6c:	mvn	r6, #0
   17b70:	mvn	r7, #-2147483648	; 0x80000000
   17b74:	mov	r4, #1
   17b78:	bne	17b58 <__assert_fail@plt+0x6c28>
   17b7c:	mov	r5, r9
   17b80:	ldr	r4, [sp, #32]
   17b84:	ldr	r9, [sp, #36]	; 0x24
   17b88:	b	17d2c <__assert_fail@plt+0x6dfc>
   17b8c:	mov	sl, #0
   17b90:	str	r4, [sp, #32]
   17b94:	str	r9, [sp, #36]	; 0x24
   17b98:	mov	r4, sl
   17b9c:	mov	r9, r5
   17ba0:	ldr	sl, [sp, #12]
   17ba4:	ldr	r5, [sp, #8]
   17ba8:	mov	fp, #6
   17bac:	cmp	r6, #0
   17bb0:	sbcs	r3, r7, #0
   17bb4:	blt	17e28 <__assert_fail@plt+0x6ef8>
   17bb8:	ldrd	r2, [sp, #16]
   17bbc:	cmp	r2, r6
   17bc0:	sbcs	r1, r3, r7
   17bc4:	bge	17e08 <__assert_fail@plt+0x6ed8>
   17bc8:	sub	fp, fp, #1
   17bcc:	cmn	fp, #1
   17bd0:	mov	r4, #1
   17bd4:	mvn	r6, #0
   17bd8:	mvn	r7, #-2147483648	; 0x80000000
   17bdc:	bne	17bbc <__assert_fail@plt+0x6c8c>
   17be0:	b	17b7c <__assert_fail@plt+0x6c4c>
   17be4:	mov	sl, #0
   17be8:	str	r9, [sp, #32]
   17bec:	mov	r9, r5
   17bf0:	mov	r5, r4
   17bf4:	mov	r4, sl
   17bf8:	ldr	sl, [sp, #12]
   17bfc:	mov	fp, #3
   17c00:	cmp	r6, #0
   17c04:	sbcs	r3, r7, #0
   17c08:	blt	17f08 <__assert_fail@plt+0x6fd8>
   17c0c:	ldrd	r2, [sp, #16]
   17c10:	cmp	r2, r6
   17c14:	sbcs	r1, r3, r7
   17c18:	bge	17f40 <__assert_fail@plt+0x7010>
   17c1c:	sub	fp, fp, #1
   17c20:	cmn	fp, #1
   17c24:	mov	r4, #1
   17c28:	mvn	r6, #0
   17c2c:	mvn	r7, #-2147483648	; 0x80000000
   17c30:	bne	17c10 <__assert_fail@plt+0x6ce0>
   17c34:	b	17b18 <__assert_fail@plt+0x6be8>
   17c38:	mov	sl, #0
   17c3c:	str	r9, [sp, #32]
   17c40:	mov	r9, r5
   17c44:	mov	r5, r4
   17c48:	mov	r4, sl
   17c4c:	ldr	sl, [sp, #12]
   17c50:	mov	fp, #4
   17c54:	cmp	r6, #0
   17c58:	sbcs	r3, r7, #0
   17c5c:	blt	1807c <__assert_fail@plt+0x714c>
   17c60:	ldrd	r2, [sp, #16]
   17c64:	cmp	r2, r6
   17c68:	sbcs	r1, r3, r7
   17c6c:	bge	18058 <__assert_fail@plt+0x7128>
   17c70:	sub	fp, fp, #1
   17c74:	cmn	fp, #1
   17c78:	mvn	r6, #0
   17c7c:	mvn	r7, #-2147483648	; 0x80000000
   17c80:	mov	r4, #1
   17c84:	bne	17c64 <__assert_fail@plt+0x6d34>
   17c88:	b	17b18 <__assert_fail@plt+0x6be8>
   17c8c:	mov	sl, #0
   17c90:	str	r4, [sp, #32]
   17c94:	str	r9, [sp, #36]	; 0x24
   17c98:	mov	r4, sl
   17c9c:	mov	r9, r5
   17ca0:	ldr	sl, [sp, #12]
   17ca4:	ldr	r5, [sp, #8]
   17ca8:	mov	fp, #7
   17cac:	cmp	r6, #0
   17cb0:	sbcs	r3, r7, #0
   17cb4:	blt	17ecc <__assert_fail@plt+0x6f9c>
   17cb8:	ldrd	r2, [sp, #16]
   17cbc:	b	17cd8 <__assert_fail@plt+0x6da8>
   17cc0:	sub	fp, fp, #1
   17cc4:	cmn	fp, #1
   17cc8:	mvn	r6, #0
   17ccc:	mvn	r7, #-2147483648	; 0x80000000
   17cd0:	mov	r4, #1
   17cd4:	beq	17b7c <__assert_fail@plt+0x6c4c>
   17cd8:	cmp	r2, r6
   17cdc:	sbcs	r1, r3, r7
   17ce0:	blt	17cc0 <__assert_fail@plt+0x6d90>
   17ce4:	mul	r3, r6, r5
   17ce8:	cmp	fp, #0
   17cec:	mla	r3, sl, r7, r3
   17cf0:	umull	r6, r7, r6, sl
   17cf4:	sub	fp, fp, #1
   17cf8:	add	r7, r3, r7
   17cfc:	bne	17cac <__assert_fail@plt+0x6d7c>
   17d00:	mov	sl, r4
   17d04:	mov	r5, r9
   17d08:	ldr	r4, [sp, #32]
   17d0c:	ldr	r9, [sp, #36]	; 0x24
   17d10:	b	17a48 <__assert_fail@plt+0x6b18>
   17d14:	cmp	r6, #0
   17d18:	sbcs	r3, r7, #0
   17d1c:	blt	17e7c <__assert_fail@plt+0x6f4c>
   17d20:	cmp	r6, #0
   17d24:	sbcs	r3, r7, #2097152	; 0x200000
   17d28:	blt	17eb0 <__assert_fail@plt+0x6f80>
   17d2c:	mvn	r6, #0
   17d30:	mvn	r7, #-2147483648	; 0x80000000
   17d34:	mov	sl, #1
   17d38:	b	17a48 <__assert_fail@plt+0x6b18>
   17d3c:	cmp	r6, #0
   17d40:	sbcs	r3, r7, #0
   17d44:	blt	18020 <__assert_fail@plt+0x70f0>
   17d48:	cmp	r6, #0
   17d4c:	sbcs	r3, r7, #4194304	; 0x400000
   17d50:	bge	17d2c <__assert_fail@plt+0x6dfc>
   17d54:	lsl	r3, r7, #9
   17d58:	orr	r3, r3, r6, lsr #23
   17d5c:	lsl	r2, r6, #9
   17d60:	mov	r6, r2
   17d64:	mov	r7, r3
   17d68:	mov	sl, #0
   17d6c:	b	17a48 <__assert_fail@plt+0x6b18>
   17d70:	cmp	r6, #0
   17d74:	sbcs	r3, r7, #0
   17d78:	blt	17fe8 <__assert_fail@plt+0x70b8>
   17d7c:	cmp	r6, #0
   17d80:	sbcs	r3, r7, #1073741824	; 0x40000000
   17d84:	bge	17d2c <__assert_fail@plt+0x6dfc>
   17d88:	adds	r6, r6, r6
   17d8c:	adc	r7, r7, r7
   17d90:	mov	sl, #0
   17d94:	b	17a48 <__assert_fail@plt+0x6b18>
   17d98:	strbge	r5, [r3, #1015]!	; 0x3f7
   17d9c:	mlaeq	r0, fp, r4, ip
   17da0:			; <UNDEFINED> instruction: 0x001fffff
   17da4:	andeq	r9, r1, r4, lsr #16
   17da8:	andeq	r9, r1, r0, lsr r8
   17dac:	andeq	r9, r1, r0, asr #16
   17db0:	strd	r6, [r9]
   17db4:	orr	r4, r4, #2
   17db8:	b	17740 <__assert_fail@plt+0x6810>
   17dbc:	cmp	r6, #0
   17dc0:	sbcs	r3, r7, #0
   17dc4:	blt	181fc <__assert_fail@plt+0x72cc>
   17dc8:	ldrd	r2, [sp, #16]
   17dcc:	cmp	r2, r6
   17dd0:	sbcs	r3, r3, r7
   17dd4:	blt	17d2c <__assert_fail@plt+0x6dfc>
   17dd8:	ldr	r3, [sp, #8]
   17ddc:	ldr	r2, [sp, #12]
   17de0:	mov	sl, #0
   17de4:	mul	r3, r6, r3
   17de8:	mla	r3, r2, r7, r3
   17dec:	umull	r6, r7, r6, r2
   17df0:	add	r7, r3, r7
   17df4:	b	17a48 <__assert_fail@plt+0x6b18>
   17df8:	mov	r3, #1024	; 0x400
   17dfc:	str	r0, [sp, #8]
   17e00:	str	r3, [sp, #12]
   17e04:	b	1788c <__assert_fail@plt+0x695c>
   17e08:	mul	r3, r6, r5
   17e0c:	cmp	fp, #0
   17e10:	mla	r3, sl, r7, r3
   17e14:	umull	r6, r7, r6, sl
   17e18:	sub	fp, fp, #1
   17e1c:	add	r7, r3, r7
   17e20:	bne	17bac <__assert_fail@plt+0x6c7c>
   17e24:	b	17d00 <__assert_fail@plt+0x6dd0>
   17e28:	mvn	r3, #0
   17e2c:	mvn	r2, #0
   17e30:	cmp	r7, r3
   17e34:	cmpeq	r6, r2
   17e38:	beq	17e08 <__assert_fail@plt+0x6ed8>
   17e3c:	mov	r2, r6
   17e40:	mov	r3, r7
   17e44:	mov	r0, #0
   17e48:	mov	r1, #-2147483648	; 0x80000000
   17e4c:	bl	189ac <__assert_fail@plt+0x7a7c>
   17e50:	ldrd	r2, [sp, #24]
   17e54:	cmp	r0, r2
   17e58:	sbcs	r3, r1, r3
   17e5c:	bge	17e08 <__assert_fail@plt+0x6ed8>
   17e60:	mov	r5, r9
   17e64:	ldr	r4, [sp, #32]
   17e68:	ldr	r9, [sp, #36]	; 0x24
   17e6c:	mov	r6, #0
   17e70:	mov	r7, #-2147483648	; 0x80000000
   17e74:	mov	sl, #1
   17e78:	b	17a48 <__assert_fail@plt+0x6b18>
   17e7c:	mvn	r3, #0
   17e80:	mvn	r2, #0
   17e84:	cmp	r7, r3
   17e88:	cmpeq	r6, r2
   17e8c:	beq	17eb0 <__assert_fail@plt+0x6f80>
   17e90:	mov	r3, r7
   17e94:	mov	r2, r6
   17e98:	mov	r0, #0
   17e9c:	mov	r1, #-2147483648	; 0x80000000
   17ea0:	bl	189ac <__assert_fail@plt+0x7a7c>
   17ea4:	cmp	r0, #1024	; 0x400
   17ea8:	sbcs	r3, r1, #0
   17eac:	blt	17e6c <__assert_fail@plt+0x6f3c>
   17eb0:	lsl	r3, r7, #10
   17eb4:	orr	r3, r3, r6, lsr #22
   17eb8:	lsl	r2, r6, #10
   17ebc:	mov	r6, r2
   17ec0:	mov	r7, r3
   17ec4:	mov	sl, #0
   17ec8:	b	17a48 <__assert_fail@plt+0x6b18>
   17ecc:	mvn	r3, #0
   17ed0:	mvn	r2, #0
   17ed4:	cmp	r7, r3
   17ed8:	cmpeq	r6, r2
   17edc:	beq	17ce4 <__assert_fail@plt+0x6db4>
   17ee0:	mov	r2, r6
   17ee4:	mov	r3, r7
   17ee8:	mov	r0, #0
   17eec:	mov	r1, #-2147483648	; 0x80000000
   17ef0:	bl	189ac <__assert_fail@plt+0x7a7c>
   17ef4:	ldrd	r2, [sp, #24]
   17ef8:	cmp	r0, r2
   17efc:	sbcs	r3, r1, r3
   17f00:	bge	17ce4 <__assert_fail@plt+0x6db4>
   17f04:	b	17e60 <__assert_fail@plt+0x6f30>
   17f08:	mvn	r3, #0
   17f0c:	mvn	r2, #0
   17f10:	cmp	r7, r3
   17f14:	cmpeq	r6, r2
   17f18:	beq	17f40 <__assert_fail@plt+0x7010>
   17f1c:	mov	r2, r6
   17f20:	mov	r3, r7
   17f24:	mov	r0, #0
   17f28:	mov	r1, #-2147483648	; 0x80000000
   17f2c:	bl	189ac <__assert_fail@plt+0x7a7c>
   17f30:	ldrd	r2, [sp, #24]
   17f34:	cmp	r0, r2
   17f38:	sbcs	r3, r1, r3
   17f3c:	blt	180b4 <__assert_fail@plt+0x7184>
   17f40:	ldr	r3, [sp, #8]
   17f44:	cmp	fp, #0
   17f48:	sub	fp, fp, #1
   17f4c:	mul	r3, r6, r3
   17f50:	mla	r3, sl, r7, r3
   17f54:	umull	r6, r7, r6, sl
   17f58:	add	r7, r3, r7
   17f5c:	bne	17c00 <__assert_fail@plt+0x6cd0>
   17f60:	mov	sl, r4
   17f64:	mov	r4, r5
   17f68:	mov	r5, r9
   17f6c:	ldr	r9, [sp, #32]
   17f70:	b	17a48 <__assert_fail@plt+0x6b18>
   17f74:	mvn	r3, #0
   17f78:	mvn	r2, #0
   17f7c:	cmp	r7, r3
   17f80:	cmpeq	r6, r2
   17f84:	beq	17fac <__assert_fail@plt+0x707c>
   17f88:	mov	r2, r6
   17f8c:	mov	r3, r7
   17f90:	mov	r0, #0
   17f94:	mov	r1, #-2147483648	; 0x80000000
   17f98:	bl	189ac <__assert_fail@plt+0x7a7c>
   17f9c:	ldrd	r2, [sp, #24]
   17fa0:	cmp	r0, r2
   17fa4:	sbcs	r3, r1, r3
   17fa8:	blt	17fcc <__assert_fail@plt+0x709c>
   17fac:	mul	r3, r6, r5
   17fb0:	cmp	fp, #0
   17fb4:	mla	r3, sl, r7, r3
   17fb8:	umull	r6, r7, r6, sl
   17fbc:	sub	fp, fp, #1
   17fc0:	add	r7, r3, r7
   17fc4:	bne	17b48 <__assert_fail@plt+0x6c18>
   17fc8:	b	17d00 <__assert_fail@plt+0x6dd0>
   17fcc:	sub	fp, fp, #1
   17fd0:	cmn	fp, #1
   17fd4:	mov	r6, #0
   17fd8:	mov	r7, #-2147483648	; 0x80000000
   17fdc:	mov	r4, #1
   17fe0:	bne	17f88 <__assert_fail@plt+0x7058>
   17fe4:	b	17e60 <__assert_fail@plt+0x6f30>
   17fe8:	mvn	r3, #0
   17fec:	mvn	r2, #0
   17ff0:	cmp	r7, r3
   17ff4:	cmpeq	r6, r2
   17ff8:	beq	17d88 <__assert_fail@plt+0x6e58>
   17ffc:	mov	r2, r6
   18000:	mov	r3, r7
   18004:	mov	r0, #0
   18008:	mov	r1, #-2147483648	; 0x80000000
   1800c:	bl	189ac <__assert_fail@plt+0x7a7c>
   18010:	cmp	r1, #0
   18014:	cmpeq	r0, #1
   18018:	beq	17e6c <__assert_fail@plt+0x6f3c>
   1801c:	b	17d88 <__assert_fail@plt+0x6e58>
   18020:	mvn	r3, #0
   18024:	mvn	r2, #0
   18028:	cmp	r7, r3
   1802c:	cmpeq	r6, r2
   18030:	beq	17d54 <__assert_fail@plt+0x6e24>
   18034:	mov	r3, r7
   18038:	mov	r2, r6
   1803c:	mov	r0, #0
   18040:	mov	r1, #-2147483648	; 0x80000000
   18044:	bl	189ac <__assert_fail@plt+0x7a7c>
   18048:	cmp	r0, #512	; 0x200
   1804c:	sbcs	r3, r1, #0
   18050:	blt	17e6c <__assert_fail@plt+0x6f3c>
   18054:	b	17d54 <__assert_fail@plt+0x6e24>
   18058:	ldr	r3, [sp, #8]
   1805c:	cmp	fp, #0
   18060:	sub	fp, fp, #1
   18064:	mul	r3, r6, r3
   18068:	mla	r3, sl, r7, r3
   1806c:	umull	r6, r7, r6, sl
   18070:	add	r7, r3, r7
   18074:	bne	17c54 <__assert_fail@plt+0x6d24>
   18078:	b	17f60 <__assert_fail@plt+0x7030>
   1807c:	mvn	r3, #0
   18080:	mvn	r2, #0
   18084:	cmp	r7, r3
   18088:	cmpeq	r6, r2
   1808c:	beq	18058 <__assert_fail@plt+0x7128>
   18090:	mov	r2, r6
   18094:	mov	r3, r7
   18098:	mov	r0, #0
   1809c:	mov	r1, #-2147483648	; 0x80000000
   180a0:	bl	189ac <__assert_fail@plt+0x7a7c>
   180a4:	ldrd	r2, [sp, #24]
   180a8:	cmp	r0, r2
   180ac:	sbcs	r3, r1, r3
   180b0:	bge	18058 <__assert_fail@plt+0x7128>
   180b4:	mov	r4, r5
   180b8:	mov	r5, r9
   180bc:	ldr	r9, [sp, #32]
   180c0:	b	17e6c <__assert_fail@plt+0x6f3c>
   180c4:	ldr	r3, [sp, #8]
   180c8:	ldr	r2, [sp, #12]
   180cc:	cmp	fp, #0
   180d0:	mul	r3, r6, r3
   180d4:	sub	fp, fp, #1
   180d8:	mla	r3, r2, r7, r3
   180dc:	umull	r6, r7, r6, r2
   180e0:	add	r7, r3, r7
   180e4:	bne	17a84 <__assert_fail@plt+0x6b54>
   180e8:	mov	r3, sl
   180ec:	mov	sl, r4
   180f0:	mov	r4, r5
   180f4:	mov	r5, r9
   180f8:	mov	r9, r3
   180fc:	b	17a48 <__assert_fail@plt+0x6b18>
   18100:	mvn	r3, #0
   18104:	mvn	r2, #0
   18108:	cmp	r7, r3
   1810c:	cmpeq	r6, r2
   18110:	beq	18168 <__assert_fail@plt+0x7238>
   18114:	mov	r3, sl
   18118:	mov	sl, r9
   1811c:	mov	r9, r5
   18120:	mov	r5, r4
   18124:	mov	r4, fp
   18128:	mov	fp, r3
   1812c:	mov	r2, r6
   18130:	mov	r3, r7
   18134:	mov	r0, #0
   18138:	mov	r1, #-2147483648	; 0x80000000
   1813c:	bl	189ac <__assert_fail@plt+0x7a7c>
   18140:	ldrd	r2, [sp, #24]
   18144:	cmp	r0, r2
   18148:	sbcs	r3, r1, r3
   1814c:	blt	1818c <__assert_fail@plt+0x725c>
   18150:	mov	r3, fp
   18154:	mov	fp, r4
   18158:	mov	r4, r5
   1815c:	mov	r5, r9
   18160:	mov	r9, sl
   18164:	mov	sl, r3
   18168:	ldr	r3, [sp, #8]
   1816c:	cmp	fp, #0
   18170:	sub	fp, fp, #1
   18174:	mul	r3, r6, r3
   18178:	mla	r3, sl, r7, r3
   1817c:	umull	r6, r7, r6, sl
   18180:	add	r7, r3, r7
   18184:	bne	17ae4 <__assert_fail@plt+0x6bb4>
   18188:	b	17f60 <__assert_fail@plt+0x7030>
   1818c:	sub	r4, r4, #1
   18190:	cmn	r4, #1
   18194:	mov	r6, #0
   18198:	mov	r7, #-2147483648	; 0x80000000
   1819c:	mov	r5, #1
   181a0:	bne	1812c <__assert_fail@plt+0x71fc>
   181a4:	mov	r4, r9
   181a8:	mov	r5, sl
   181ac:	ldr	r9, [sp, #32]
   181b0:	b	17e6c <__assert_fail@plt+0x6f3c>
   181b4:	mvn	r3, #0
   181b8:	mvn	r2, #0
   181bc:	cmp	r7, r3
   181c0:	cmpeq	r6, r2
   181c4:	beq	180c4 <__assert_fail@plt+0x7194>
   181c8:	mov	r2, r6
   181cc:	mov	r3, r7
   181d0:	mov	r0, #0
   181d4:	mov	r1, #-2147483648	; 0x80000000
   181d8:	bl	189ac <__assert_fail@plt+0x7a7c>
   181dc:	ldrd	r2, [sp, #24]
   181e0:	cmp	r0, r2
   181e4:	sbcs	r3, r1, r3
   181e8:	bge	180c4 <__assert_fail@plt+0x7194>
   181ec:	mov	r4, r5
   181f0:	mov	r5, r9
   181f4:	mov	r9, sl
   181f8:	b	17e6c <__assert_fail@plt+0x6f3c>
   181fc:	mvn	r3, #0
   18200:	mvn	r2, #0
   18204:	cmp	r7, r3
   18208:	cmpeq	r6, r2
   1820c:	beq	17dd8 <__assert_fail@plt+0x6ea8>
   18210:	mov	r2, r6
   18214:	mov	r3, r7
   18218:	mov	r0, #0
   1821c:	mov	r1, #-2147483648	; 0x80000000
   18220:	bl	189ac <__assert_fail@plt+0x7a7c>
   18224:	ldrd	r2, [sp, #24]
   18228:	cmp	r0, r2
   1822c:	sbcs	r3, r1, r3
   18230:	blt	17e6c <__assert_fail@plt+0x6f3c>
   18234:	b	17dd8 <__assert_fail@plt+0x6ea8>
   18238:	ldr	r3, [pc, #-1180]	; 17da4 <__assert_fail@plt+0x6e74>
   1823c:	mov	r2, #85	; 0x55
   18240:	ldr	r1, [pc, #-1184]	; 17da8 <__assert_fail@plt+0x6e78>
   18244:	ldr	r0, [pc, #-1184]	; 17dac <__assert_fail@plt+0x6e7c>
   18248:	bl	10f30 <__assert_fail@plt>
   1824c:	cmp	r1, #0
   18250:	cmpne	r0, #0
   18254:	moveq	r1, #1
   18258:	moveq	r0, r1
   1825c:	umull	r2, r3, r0, r1
   18260:	adds	r3, r3, #0
   18264:	movne	r3, #1
   18268:	cmp	r2, #0
   1826c:	blt	1827c <__assert_fail@plt+0x734c>
   18270:	cmp	r3, #0
   18274:	bne	1827c <__assert_fail@plt+0x734c>
   18278:	b	10cc0 <calloc@plt>
   1827c:	push	{r4, lr}
   18280:	bl	10e4c <__errno_location@plt>
   18284:	mov	r3, #12
   18288:	str	r3, [r0]
   1828c:	mov	r0, #0
   18290:	pop	{r4, pc}
   18294:	cmp	r0, #0
   18298:	moveq	r0, #1
   1829c:	cmp	r0, #0
   182a0:	blt	182a8 <__assert_fail@plt+0x7378>
   182a4:	b	10de0 <malloc@plt>
   182a8:	push	{r4, lr}
   182ac:	bl	10e4c <__errno_location@plt>
   182b0:	mov	r3, #12
   182b4:	str	r3, [r0]
   182b8:	mov	r0, #0
   182bc:	pop	{r4, pc}
   182c0:	cmp	r0, #0
   182c4:	beq	182e8 <__assert_fail@plt+0x73b8>
   182c8:	cmp	r1, #0
   182cc:	push	{lr}		; (str lr, [sp, #-4]!)
   182d0:	sub	sp, sp, #12
   182d4:	beq	182f0 <__assert_fail@plt+0x73c0>
   182d8:	blt	18308 <__assert_fail@plt+0x73d8>
   182dc:	add	sp, sp, #12
   182e0:	pop	{lr}		; (ldr lr, [sp], #4)
   182e4:	b	10d74 <realloc@plt>
   182e8:	mov	r0, r1
   182ec:	b	18294 <__assert_fail@plt+0x7364>
   182f0:	str	r1, [sp, #4]
   182f4:	bl	124b0 <__assert_fail@plt+0x1580>
   182f8:	ldr	r3, [sp, #4]
   182fc:	mov	r0, r3
   18300:	add	sp, sp, #12
   18304:	pop	{pc}		; (ldr pc, [sp], #4)
   18308:	bl	10e4c <__errno_location@plt>
   1830c:	mov	r2, #12
   18310:	mov	r3, #0
   18314:	str	r2, [r0]
   18318:	b	182fc <__assert_fail@plt+0x73cc>
   1831c:	push	{r4, r5, r6, lr}
   18320:	mov	r4, r0
   18324:	bl	10dbc <__fpending@plt>
   18328:	ldr	r5, [r4]
   1832c:	and	r5, r5, #32
   18330:	mov	r6, r0
   18334:	mov	r0, r4
   18338:	bl	123b0 <__assert_fail@plt+0x1480>
   1833c:	cmp	r5, #0
   18340:	mov	r4, r0
   18344:	bne	18364 <__assert_fail@plt+0x7434>
   18348:	cmp	r0, #0
   1834c:	beq	1835c <__assert_fail@plt+0x742c>
   18350:	cmp	r6, #0
   18354:	beq	18380 <__assert_fail@plt+0x7450>
   18358:	mvn	r4, #0
   1835c:	mov	r0, r4
   18360:	pop	{r4, r5, r6, pc}
   18364:	cmp	r0, #0
   18368:	bne	18358 <__assert_fail@plt+0x7428>
   1836c:	bl	10e4c <__errno_location@plt>
   18370:	str	r4, [r0]
   18374:	mvn	r4, #0
   18378:	mov	r0, r4
   1837c:	pop	{r4, r5, r6, pc}
   18380:	bl	10e4c <__errno_location@plt>
   18384:	ldr	r4, [r0]
   18388:	subs	r4, r4, #9
   1838c:	mvnne	r4, #0
   18390:	mov	r0, r4
   18394:	pop	{r4, r5, r6, pc}
   18398:	push	{r4, lr}
   1839c:	mov	r0, #14
   183a0:	bl	10edc <nl_langinfo@plt>
   183a4:	cmp	r0, #0
   183a8:	beq	183c0 <__assert_fail@plt+0x7490>
   183ac:	ldrb	r2, [r0]
   183b0:	ldr	r3, [pc, #16]	; 183c8 <__assert_fail@plt+0x7498>
   183b4:	cmp	r2, #0
   183b8:	moveq	r0, r3
   183bc:	pop	{r4, pc}
   183c0:	ldr	r0, [pc]	; 183c8 <__assert_fail@plt+0x7498>
   183c4:	pop	{r4, pc}
   183c8:	andeq	r9, r1, r8, ror #16
   183cc:	push	{r4, r5, r6, r7, lr}
   183d0:	subs	r6, r0, #0
   183d4:	sub	sp, sp, #12
   183d8:	addeq	r6, sp, #4
   183dc:	mov	r0, r6
   183e0:	mov	r5, r2
   183e4:	mov	r7, r1
   183e8:	bl	10dc8 <mbrtowc@plt>
   183ec:	cmp	r5, #0
   183f0:	cmnne	r0, #3
   183f4:	mov	r4, r0
   183f8:	bls	18414 <__assert_fail@plt+0x74e4>
   183fc:	mov	r0, #0
   18400:	bl	1846c <__assert_fail@plt+0x753c>
   18404:	cmp	r0, #0
   18408:	moveq	r4, #1
   1840c:	ldrbeq	r3, [r7]
   18410:	streq	r3, [r6]
   18414:	mov	r0, r4
   18418:	add	sp, sp, #12
   1841c:	pop	{r4, r5, r6, r7, pc}
   18420:	push	{r4, r5, r6, lr}
   18424:	subs	r4, r2, #0
   18428:	mov	r6, r0
   1842c:	mov	r5, r1
   18430:	beq	1845c <__assert_fail@plt+0x752c>
   18434:	mov	r1, r4
   18438:	mvn	r0, #0
   1843c:	bl	18560 <__assert_fail@plt+0x7630>
   18440:	cmp	r0, r5
   18444:	bcs	1845c <__assert_fail@plt+0x752c>
   18448:	bl	10e4c <__errno_location@plt>
   1844c:	mov	r3, #12
   18450:	str	r3, [r0]
   18454:	mov	r0, #0
   18458:	pop	{r4, r5, r6, pc}
   1845c:	mul	r1, r5, r4
   18460:	mov	r0, r6
   18464:	pop	{r4, r5, r6, lr}
   18468:	b	182c0 <__assert_fail@plt+0x7390>
   1846c:	push	{lr}		; (str lr, [sp, #-4]!)
   18470:	sub	sp, sp, #268	; 0x10c
   18474:	add	r1, sp, #4
   18478:	ldr	r2, [pc, #60]	; 184bc <__assert_fail@plt+0x758c>
   1847c:	bl	184c8 <__assert_fail@plt+0x7598>
   18480:	cmp	r0, #0
   18484:	movne	r0, #0
   18488:	bne	184b4 <__assert_fail@plt+0x7584>
   1848c:	ldr	r1, [pc, #44]	; 184c0 <__assert_fail@plt+0x7590>
   18490:	add	r0, sp, #4
   18494:	bl	10ce4 <strcmp@plt>
   18498:	cmp	r0, #0
   1849c:	beq	184b4 <__assert_fail@plt+0x7584>
   184a0:	add	r0, sp, #4
   184a4:	ldr	r1, [pc, #24]	; 184c4 <__assert_fail@plt+0x7594>
   184a8:	bl	10ce4 <strcmp@plt>
   184ac:	adds	r0, r0, #0
   184b0:	movne	r0, #1
   184b4:	add	sp, sp, #268	; 0x10c
   184b8:	pop	{pc}		; (ldr pc, [sp], #4)
   184bc:	andeq	r0, r0, r1, lsl #2
   184c0:	andeq	r9, r1, r0, ror r8
   184c4:	andeq	r9, r1, r4, ror r8
   184c8:	push	{r4, r5, r6, lr}
   184cc:	mov	r5, r1
   184d0:	mov	r1, #0
   184d4:	mov	r4, r2
   184d8:	bl	10ec4 <setlocale@plt>
   184dc:	subs	r6, r0, #0
   184e0:	beq	1853c <__assert_fail@plt+0x760c>
   184e4:	bl	10e34 <strlen@plt>
   184e8:	cmp	r4, r0
   184ec:	bhi	18524 <__assert_fail@plt+0x75f4>
   184f0:	cmp	r4, #0
   184f4:	bne	18500 <__assert_fail@plt+0x75d0>
   184f8:	mov	r0, #34	; 0x22
   184fc:	pop	{r4, r5, r6, pc}
   18500:	sub	r4, r4, #1
   18504:	mov	r1, r6
   18508:	mov	r2, r4
   1850c:	mov	r0, r5
   18510:	bl	10d2c <memcpy@plt>
   18514:	mov	r3, #0
   18518:	strb	r3, [r5, r4]
   1851c:	mov	r0, #34	; 0x22
   18520:	pop	{r4, r5, r6, pc}
   18524:	add	r2, r0, #1
   18528:	mov	r1, r6
   1852c:	mov	r0, r5
   18530:	bl	10d2c <memcpy@plt>
   18534:	mov	r0, #0
   18538:	pop	{r4, r5, r6, pc}
   1853c:	cmp	r4, #0
   18540:	beq	18550 <__assert_fail@plt+0x7620>
   18544:	strb	r6, [r5]
   18548:	mov	r0, #22
   1854c:	pop	{r4, r5, r6, pc}
   18550:	mov	r0, #22
   18554:	pop	{r4, r5, r6, pc}
   18558:	mov	r1, #0
   1855c:	b	10ec4 <setlocale@plt>
   18560:	subs	r2, r1, #1
   18564:	bxeq	lr
   18568:	bcc	18740 <__assert_fail@plt+0x7810>
   1856c:	cmp	r0, r1
   18570:	bls	18724 <__assert_fail@plt+0x77f4>
   18574:	tst	r1, r2
   18578:	beq	18730 <__assert_fail@plt+0x7800>
   1857c:	clz	r3, r0
   18580:	clz	r2, r1
   18584:	sub	r3, r2, r3
   18588:	rsbs	r3, r3, #31
   1858c:	addne	r3, r3, r3, lsl #1
   18590:	mov	r2, #0
   18594:	addne	pc, pc, r3, lsl #2
   18598:	nop			; (mov r0, r0)
   1859c:	cmp	r0, r1, lsl #31
   185a0:	adc	r2, r2, r2
   185a4:	subcs	r0, r0, r1, lsl #31
   185a8:	cmp	r0, r1, lsl #30
   185ac:	adc	r2, r2, r2
   185b0:	subcs	r0, r0, r1, lsl #30
   185b4:	cmp	r0, r1, lsl #29
   185b8:	adc	r2, r2, r2
   185bc:	subcs	r0, r0, r1, lsl #29
   185c0:	cmp	r0, r1, lsl #28
   185c4:	adc	r2, r2, r2
   185c8:	subcs	r0, r0, r1, lsl #28
   185cc:	cmp	r0, r1, lsl #27
   185d0:	adc	r2, r2, r2
   185d4:	subcs	r0, r0, r1, lsl #27
   185d8:	cmp	r0, r1, lsl #26
   185dc:	adc	r2, r2, r2
   185e0:	subcs	r0, r0, r1, lsl #26
   185e4:	cmp	r0, r1, lsl #25
   185e8:	adc	r2, r2, r2
   185ec:	subcs	r0, r0, r1, lsl #25
   185f0:	cmp	r0, r1, lsl #24
   185f4:	adc	r2, r2, r2
   185f8:	subcs	r0, r0, r1, lsl #24
   185fc:	cmp	r0, r1, lsl #23
   18600:	adc	r2, r2, r2
   18604:	subcs	r0, r0, r1, lsl #23
   18608:	cmp	r0, r1, lsl #22
   1860c:	adc	r2, r2, r2
   18610:	subcs	r0, r0, r1, lsl #22
   18614:	cmp	r0, r1, lsl #21
   18618:	adc	r2, r2, r2
   1861c:	subcs	r0, r0, r1, lsl #21
   18620:	cmp	r0, r1, lsl #20
   18624:	adc	r2, r2, r2
   18628:	subcs	r0, r0, r1, lsl #20
   1862c:	cmp	r0, r1, lsl #19
   18630:	adc	r2, r2, r2
   18634:	subcs	r0, r0, r1, lsl #19
   18638:	cmp	r0, r1, lsl #18
   1863c:	adc	r2, r2, r2
   18640:	subcs	r0, r0, r1, lsl #18
   18644:	cmp	r0, r1, lsl #17
   18648:	adc	r2, r2, r2
   1864c:	subcs	r0, r0, r1, lsl #17
   18650:	cmp	r0, r1, lsl #16
   18654:	adc	r2, r2, r2
   18658:	subcs	r0, r0, r1, lsl #16
   1865c:	cmp	r0, r1, lsl #15
   18660:	adc	r2, r2, r2
   18664:	subcs	r0, r0, r1, lsl #15
   18668:	cmp	r0, r1, lsl #14
   1866c:	adc	r2, r2, r2
   18670:	subcs	r0, r0, r1, lsl #14
   18674:	cmp	r0, r1, lsl #13
   18678:	adc	r2, r2, r2
   1867c:	subcs	r0, r0, r1, lsl #13
   18680:	cmp	r0, r1, lsl #12
   18684:	adc	r2, r2, r2
   18688:	subcs	r0, r0, r1, lsl #12
   1868c:	cmp	r0, r1, lsl #11
   18690:	adc	r2, r2, r2
   18694:	subcs	r0, r0, r1, lsl #11
   18698:	cmp	r0, r1, lsl #10
   1869c:	adc	r2, r2, r2
   186a0:	subcs	r0, r0, r1, lsl #10
   186a4:	cmp	r0, r1, lsl #9
   186a8:	adc	r2, r2, r2
   186ac:	subcs	r0, r0, r1, lsl #9
   186b0:	cmp	r0, r1, lsl #8
   186b4:	adc	r2, r2, r2
   186b8:	subcs	r0, r0, r1, lsl #8
   186bc:	cmp	r0, r1, lsl #7
   186c0:	adc	r2, r2, r2
   186c4:	subcs	r0, r0, r1, lsl #7
   186c8:	cmp	r0, r1, lsl #6
   186cc:	adc	r2, r2, r2
   186d0:	subcs	r0, r0, r1, lsl #6
   186d4:	cmp	r0, r1, lsl #5
   186d8:	adc	r2, r2, r2
   186dc:	subcs	r0, r0, r1, lsl #5
   186e0:	cmp	r0, r1, lsl #4
   186e4:	adc	r2, r2, r2
   186e8:	subcs	r0, r0, r1, lsl #4
   186ec:	cmp	r0, r1, lsl #3
   186f0:	adc	r2, r2, r2
   186f4:	subcs	r0, r0, r1, lsl #3
   186f8:	cmp	r0, r1, lsl #2
   186fc:	adc	r2, r2, r2
   18700:	subcs	r0, r0, r1, lsl #2
   18704:	cmp	r0, r1, lsl #1
   18708:	adc	r2, r2, r2
   1870c:	subcs	r0, r0, r1, lsl #1
   18710:	cmp	r0, r1
   18714:	adc	r2, r2, r2
   18718:	subcs	r0, r0, r1
   1871c:	mov	r0, r2
   18720:	bx	lr
   18724:	moveq	r0, #1
   18728:	movne	r0, #0
   1872c:	bx	lr
   18730:	clz	r2, r1
   18734:	rsb	r2, r2, #31
   18738:	lsr	r0, r0, r2
   1873c:	bx	lr
   18740:	cmp	r0, #0
   18744:	mvnne	r0, #0
   18748:	b	18a80 <__assert_fail@plt+0x7b50>
   1874c:	cmp	r1, #0
   18750:	beq	18740 <__assert_fail@plt+0x7810>
   18754:	push	{r0, r1, lr}
   18758:	bl	18560 <__assert_fail@plt+0x7630>
   1875c:	pop	{r1, r2, lr}
   18760:	mul	r3, r2, r0
   18764:	sub	r1, r1, r3
   18768:	bx	lr
   1876c:	cmp	r1, #0
   18770:	beq	1897c <__assert_fail@plt+0x7a4c>
   18774:	eor	ip, r0, r1
   18778:	rsbmi	r1, r1, #0
   1877c:	subs	r2, r1, #1
   18780:	beq	18948 <__assert_fail@plt+0x7a18>
   18784:	movs	r3, r0
   18788:	rsbmi	r3, r0, #0
   1878c:	cmp	r3, r1
   18790:	bls	18954 <__assert_fail@plt+0x7a24>
   18794:	tst	r1, r2
   18798:	beq	18964 <__assert_fail@plt+0x7a34>
   1879c:	clz	r2, r3
   187a0:	clz	r0, r1
   187a4:	sub	r2, r0, r2
   187a8:	rsbs	r2, r2, #31
   187ac:	addne	r2, r2, r2, lsl #1
   187b0:	mov	r0, #0
   187b4:	addne	pc, pc, r2, lsl #2
   187b8:	nop			; (mov r0, r0)
   187bc:	cmp	r3, r1, lsl #31
   187c0:	adc	r0, r0, r0
   187c4:	subcs	r3, r3, r1, lsl #31
   187c8:	cmp	r3, r1, lsl #30
   187cc:	adc	r0, r0, r0
   187d0:	subcs	r3, r3, r1, lsl #30
   187d4:	cmp	r3, r1, lsl #29
   187d8:	adc	r0, r0, r0
   187dc:	subcs	r3, r3, r1, lsl #29
   187e0:	cmp	r3, r1, lsl #28
   187e4:	adc	r0, r0, r0
   187e8:	subcs	r3, r3, r1, lsl #28
   187ec:	cmp	r3, r1, lsl #27
   187f0:	adc	r0, r0, r0
   187f4:	subcs	r3, r3, r1, lsl #27
   187f8:	cmp	r3, r1, lsl #26
   187fc:	adc	r0, r0, r0
   18800:	subcs	r3, r3, r1, lsl #26
   18804:	cmp	r3, r1, lsl #25
   18808:	adc	r0, r0, r0
   1880c:	subcs	r3, r3, r1, lsl #25
   18810:	cmp	r3, r1, lsl #24
   18814:	adc	r0, r0, r0
   18818:	subcs	r3, r3, r1, lsl #24
   1881c:	cmp	r3, r1, lsl #23
   18820:	adc	r0, r0, r0
   18824:	subcs	r3, r3, r1, lsl #23
   18828:	cmp	r3, r1, lsl #22
   1882c:	adc	r0, r0, r0
   18830:	subcs	r3, r3, r1, lsl #22
   18834:	cmp	r3, r1, lsl #21
   18838:	adc	r0, r0, r0
   1883c:	subcs	r3, r3, r1, lsl #21
   18840:	cmp	r3, r1, lsl #20
   18844:	adc	r0, r0, r0
   18848:	subcs	r3, r3, r1, lsl #20
   1884c:	cmp	r3, r1, lsl #19
   18850:	adc	r0, r0, r0
   18854:	subcs	r3, r3, r1, lsl #19
   18858:	cmp	r3, r1, lsl #18
   1885c:	adc	r0, r0, r0
   18860:	subcs	r3, r3, r1, lsl #18
   18864:	cmp	r3, r1, lsl #17
   18868:	adc	r0, r0, r0
   1886c:	subcs	r3, r3, r1, lsl #17
   18870:	cmp	r3, r1, lsl #16
   18874:	adc	r0, r0, r0
   18878:	subcs	r3, r3, r1, lsl #16
   1887c:	cmp	r3, r1, lsl #15
   18880:	adc	r0, r0, r0
   18884:	subcs	r3, r3, r1, lsl #15
   18888:	cmp	r3, r1, lsl #14
   1888c:	adc	r0, r0, r0
   18890:	subcs	r3, r3, r1, lsl #14
   18894:	cmp	r3, r1, lsl #13
   18898:	adc	r0, r0, r0
   1889c:	subcs	r3, r3, r1, lsl #13
   188a0:	cmp	r3, r1, lsl #12
   188a4:	adc	r0, r0, r0
   188a8:	subcs	r3, r3, r1, lsl #12
   188ac:	cmp	r3, r1, lsl #11
   188b0:	adc	r0, r0, r0
   188b4:	subcs	r3, r3, r1, lsl #11
   188b8:	cmp	r3, r1, lsl #10
   188bc:	adc	r0, r0, r0
   188c0:	subcs	r3, r3, r1, lsl #10
   188c4:	cmp	r3, r1, lsl #9
   188c8:	adc	r0, r0, r0
   188cc:	subcs	r3, r3, r1, lsl #9
   188d0:	cmp	r3, r1, lsl #8
   188d4:	adc	r0, r0, r0
   188d8:	subcs	r3, r3, r1, lsl #8
   188dc:	cmp	r3, r1, lsl #7
   188e0:	adc	r0, r0, r0
   188e4:	subcs	r3, r3, r1, lsl #7
   188e8:	cmp	r3, r1, lsl #6
   188ec:	adc	r0, r0, r0
   188f0:	subcs	r3, r3, r1, lsl #6
   188f4:	cmp	r3, r1, lsl #5
   188f8:	adc	r0, r0, r0
   188fc:	subcs	r3, r3, r1, lsl #5
   18900:	cmp	r3, r1, lsl #4
   18904:	adc	r0, r0, r0
   18908:	subcs	r3, r3, r1, lsl #4
   1890c:	cmp	r3, r1, lsl #3
   18910:	adc	r0, r0, r0
   18914:	subcs	r3, r3, r1, lsl #3
   18918:	cmp	r3, r1, lsl #2
   1891c:	adc	r0, r0, r0
   18920:	subcs	r3, r3, r1, lsl #2
   18924:	cmp	r3, r1, lsl #1
   18928:	adc	r0, r0, r0
   1892c:	subcs	r3, r3, r1, lsl #1
   18930:	cmp	r3, r1
   18934:	adc	r0, r0, r0
   18938:	subcs	r3, r3, r1
   1893c:	cmp	ip, #0
   18940:	rsbmi	r0, r0, #0
   18944:	bx	lr
   18948:	teq	ip, r0
   1894c:	rsbmi	r0, r0, #0
   18950:	bx	lr
   18954:	movcc	r0, #0
   18958:	asreq	r0, ip, #31
   1895c:	orreq	r0, r0, #1
   18960:	bx	lr
   18964:	clz	r2, r1
   18968:	rsb	r2, r2, #31
   1896c:	cmp	ip, #0
   18970:	lsr	r0, r3, r2
   18974:	rsbmi	r0, r0, #0
   18978:	bx	lr
   1897c:	cmp	r0, #0
   18980:	mvngt	r0, #-2147483648	; 0x80000000
   18984:	movlt	r0, #-2147483648	; 0x80000000
   18988:	b	18a80 <__assert_fail@plt+0x7b50>
   1898c:	cmp	r1, #0
   18990:	beq	1897c <__assert_fail@plt+0x7a4c>
   18994:	push	{r0, r1, lr}
   18998:	bl	18774 <__assert_fail@plt+0x7844>
   1899c:	pop	{r1, r2, lr}
   189a0:	mul	r3, r2, r0
   189a4:	sub	r1, r1, r3
   189a8:	bx	lr
   189ac:	cmp	r3, #0
   189b0:	cmpeq	r2, #0
   189b4:	bne	189d8 <__assert_fail@plt+0x7aa8>
   189b8:	cmp	r1, #0
   189bc:	movlt	r1, #-2147483648	; 0x80000000
   189c0:	movlt	r0, #0
   189c4:	blt	189d4 <__assert_fail@plt+0x7aa4>
   189c8:	cmpeq	r0, #0
   189cc:	mvnne	r1, #-2147483648	; 0x80000000
   189d0:	mvnne	r0, #0
   189d4:	b	18a80 <__assert_fail@plt+0x7b50>
   189d8:	sub	sp, sp, #8
   189dc:	push	{sp, lr}
   189e0:	cmp	r1, #0
   189e4:	blt	18a04 <__assert_fail@plt+0x7ad4>
   189e8:	cmp	r3, #0
   189ec:	blt	18a38 <__assert_fail@plt+0x7b08>
   189f0:	bl	18a90 <__assert_fail@plt+0x7b60>
   189f4:	ldr	lr, [sp, #4]
   189f8:	add	sp, sp, #8
   189fc:	pop	{r2, r3}
   18a00:	bx	lr
   18a04:	rsbs	r0, r0, #0
   18a08:	sbc	r1, r1, r1, lsl #1
   18a0c:	cmp	r3, #0
   18a10:	blt	18a5c <__assert_fail@plt+0x7b2c>
   18a14:	bl	18a90 <__assert_fail@plt+0x7b60>
   18a18:	ldr	lr, [sp, #4]
   18a1c:	add	sp, sp, #8
   18a20:	pop	{r2, r3}
   18a24:	rsbs	r0, r0, #0
   18a28:	sbc	r1, r1, r1, lsl #1
   18a2c:	rsbs	r2, r2, #0
   18a30:	sbc	r3, r3, r3, lsl #1
   18a34:	bx	lr
   18a38:	rsbs	r2, r2, #0
   18a3c:	sbc	r3, r3, r3, lsl #1
   18a40:	bl	18a90 <__assert_fail@plt+0x7b60>
   18a44:	ldr	lr, [sp, #4]
   18a48:	add	sp, sp, #8
   18a4c:	pop	{r2, r3}
   18a50:	rsbs	r0, r0, #0
   18a54:	sbc	r1, r1, r1, lsl #1
   18a58:	bx	lr
   18a5c:	rsbs	r2, r2, #0
   18a60:	sbc	r3, r3, r3, lsl #1
   18a64:	bl	18a90 <__assert_fail@plt+0x7b60>
   18a68:	ldr	lr, [sp, #4]
   18a6c:	add	sp, sp, #8
   18a70:	pop	{r2, r3}
   18a74:	rsbs	r2, r2, #0
   18a78:	sbc	r3, r3, r3, lsl #1
   18a7c:	bx	lr
   18a80:	push	{r1, lr}
   18a84:	mov	r0, #8
   18a88:	bl	10cd8 <raise@plt>
   18a8c:	pop	{r1, pc}
   18a90:	cmp	r1, r3
   18a94:	push	{r4, r5, r6, r7, r8, r9, lr}
   18a98:	cmpeq	r0, r2
   18a9c:	mov	r4, r0
   18aa0:	mov	r5, r1
   18aa4:	ldr	r9, [sp, #28]
   18aa8:	movcc	r0, #0
   18aac:	movcc	r1, #0
   18ab0:	bcc	18ba8 <__assert_fail@plt+0x7c78>
   18ab4:	cmp	r3, #0
   18ab8:	clzeq	ip, r2
   18abc:	clzne	ip, r3
   18ac0:	addeq	ip, ip, #32
   18ac4:	cmp	r5, #0
   18ac8:	clzeq	r1, r4
   18acc:	addeq	r1, r1, #32
   18ad0:	clzne	r1, r5
   18ad4:	sub	ip, ip, r1
   18ad8:	sub	lr, ip, #32
   18adc:	lsl	r7, r3, ip
   18ae0:	rsb	r8, ip, #32
   18ae4:	orr	r7, r7, r2, lsl lr
   18ae8:	orr	r7, r7, r2, lsr r8
   18aec:	lsl	r6, r2, ip
   18af0:	cmp	r5, r7
   18af4:	cmpeq	r4, r6
   18af8:	movcc	r0, #0
   18afc:	movcc	r1, #0
   18b00:	bcc	18b1c <__assert_fail@plt+0x7bec>
   18b04:	mov	r3, #1
   18b08:	subs	r4, r4, r6
   18b0c:	lsl	r1, r3, lr
   18b10:	lsl	r0, r3, ip
   18b14:	orr	r1, r1, r3, lsr r8
   18b18:	sbc	r5, r5, r7
   18b1c:	cmp	ip, #0
   18b20:	beq	18ba8 <__assert_fail@plt+0x7c78>
   18b24:	lsrs	r3, r7, #1
   18b28:	rrx	r2, r6
   18b2c:	mov	r6, ip
   18b30:	b	18b54 <__assert_fail@plt+0x7c24>
   18b34:	subs	r4, r4, r2
   18b38:	sbc	r5, r5, r3
   18b3c:	adds	r4, r4, r4
   18b40:	adc	r5, r5, r5
   18b44:	adds	r4, r4, #1
   18b48:	adc	r5, r5, #0
   18b4c:	subs	r6, r6, #1
   18b50:	beq	18b70 <__assert_fail@plt+0x7c40>
   18b54:	cmp	r5, r3
   18b58:	cmpeq	r4, r2
   18b5c:	bcs	18b34 <__assert_fail@plt+0x7c04>
   18b60:	adds	r4, r4, r4
   18b64:	adc	r5, r5, r5
   18b68:	subs	r6, r6, #1
   18b6c:	bne	18b54 <__assert_fail@plt+0x7c24>
   18b70:	lsr	r6, r4, ip
   18b74:	lsr	r7, r5, ip
   18b78:	orr	r6, r6, r5, lsl r8
   18b7c:	adds	r2, r0, r4
   18b80:	orr	r6, r6, r5, lsr lr
   18b84:	adc	r3, r1, r5
   18b88:	lsl	r1, r7, ip
   18b8c:	orr	r1, r1, r6, lsl lr
   18b90:	lsl	r0, r6, ip
   18b94:	orr	r1, r1, r6, lsr r8
   18b98:	subs	r0, r2, r0
   18b9c:	mov	r4, r6
   18ba0:	mov	r5, r7
   18ba4:	sbc	r1, r3, r1
   18ba8:	cmp	r9, #0
   18bac:	popeq	{r4, r5, r6, r7, r8, r9, pc}
   18bb0:	strd	r4, [r9]
   18bb4:	pop	{r4, r5, r6, r7, r8, r9, pc}
   18bb8:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   18bbc:	mov	r7, r0
   18bc0:	ldr	r6, [pc, #72]	; 18c10 <__assert_fail@plt+0x7ce0>
   18bc4:	ldr	r5, [pc, #72]	; 18c14 <__assert_fail@plt+0x7ce4>
   18bc8:	add	r6, pc, r6
   18bcc:	add	r5, pc, r5
   18bd0:	sub	r6, r6, r5
   18bd4:	mov	r8, r1
   18bd8:	mov	r9, r2
   18bdc:	bl	10ca0 <calloc@plt-0x20>
   18be0:	asrs	r6, r6, #2
   18be4:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   18be8:	mov	r4, #0
   18bec:	add	r4, r4, #1
   18bf0:	ldr	r3, [r5], #4
   18bf4:	mov	r2, r9
   18bf8:	mov	r1, r8
   18bfc:	mov	r0, r7
   18c00:	blx	r3
   18c04:	cmp	r6, r4
   18c08:	bne	18bec <__assert_fail@plt+0x7cbc>
   18c0c:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   18c10:	andeq	r1, r1, r0, asr #6
   18c14:	andeq	r1, r1, r8, lsr r3
   18c18:	bx	lr
   18c1c:	ldr	r3, [pc, #12]	; 18c30 <__assert_fail@plt+0x7d00>
   18c20:	mov	r1, #0
   18c24:	add	r3, pc, r3
   18c28:	ldr	r2, [r3]
   18c2c:	b	10e58 <__cxa_atexit@plt>
   18c30:			; <UNDEFINED> instruction: 0x000114bc

Disassembly of section .fini:

00018c34 <.fini>:
   18c34:	push	{r3, lr}
   18c38:	pop	{r3, pc}
