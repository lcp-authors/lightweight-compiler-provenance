
../repos/coreutils/src/who:     file format elf32-littlearm


Disassembly of section .init:

00010e78 <.init>:
   10e78:	push	{r3, lr}
   10e7c:	bl	1151c <__assert_fail@plt+0x390>
   10e80:	pop	{r3, pc}

Disassembly of section .plt:

00010e84 <calloc@plt-0x14>:
   10e84:	push	{lr}		; (str lr, [sp, #-4]!)
   10e88:	ldr	lr, [pc, #4]	; 10e94 <calloc@plt-0x4>
   10e8c:	add	lr, pc, lr
   10e90:	ldr	pc, [lr, #8]!
   10e94:	andeq	r7, r1, ip, ror #2

00010e98 <calloc@plt>:
   10e98:	add	ip, pc, #0, 12
   10e9c:	add	ip, ip, #94208	; 0x17000
   10ea0:	ldr	pc, [ip, #364]!	; 0x16c

00010ea4 <fputs_unlocked@plt>:
   10ea4:	add	ip, pc, #0, 12
   10ea8:	add	ip, ip, #94208	; 0x17000
   10eac:	ldr	pc, [ip, #356]!	; 0x164

00010eb0 <raise@plt>:
   10eb0:	add	ip, pc, #0, 12
   10eb4:	add	ip, ip, #94208	; 0x17000
   10eb8:	ldr	pc, [ip, #348]!	; 0x15c

00010ebc <strcmp@plt>:
   10ebc:	add	ip, pc, #0, 12
   10ec0:	add	ip, ip, #94208	; 0x17000
   10ec4:	ldr	pc, [ip, #340]!	; 0x154

00010ec8 <fflush@plt>:
   10ec8:	add	ip, pc, #0, 12
   10ecc:	add	ip, ip, #94208	; 0x17000
   10ed0:	ldr	pc, [ip, #332]!	; 0x14c

00010ed4 <utmpxname@plt>:
   10ed4:	add	ip, pc, #0, 12
   10ed8:	add	ip, ip, #94208	; 0x17000
   10edc:	ldr	pc, [ip, #324]!	; 0x144

00010ee0 <free@plt>:
   10ee0:	add	ip, pc, #0, 12
   10ee4:	add	ip, ip, #94208	; 0x17000
   10ee8:	ldr	pc, [ip, #316]!	; 0x13c

00010eec <gai_strerror@plt>:
   10eec:	add	ip, pc, #0, 12
   10ef0:	add	ip, ip, #94208	; 0x17000
   10ef4:	ldr	pc, [ip, #308]!	; 0x134

00010ef8 <_exit@plt>:
   10ef8:	add	ip, pc, #0, 12
   10efc:	add	ip, ip, #94208	; 0x17000
   10f00:	ldr	pc, [ip, #300]!	; 0x12c

00010f04 <memcpy@plt>:
   10f04:	add	ip, pc, #0, 12
   10f08:	add	ip, ip, #94208	; 0x17000
   10f0c:	ldr	pc, [ip, #292]!	; 0x124

00010f10 <mbsinit@plt>:
   10f10:	add	ip, pc, #0, 12
   10f14:	add	ip, ip, #94208	; 0x17000
   10f18:	ldr	pc, [ip, #284]!	; 0x11c

00010f1c <time@plt>:
   10f1c:	add	ip, pc, #0, 12
   10f20:	add	ip, ip, #94208	; 0x17000
   10f24:	ldr	pc, [ip, #276]!	; 0x114

00010f28 <memcmp@plt>:
   10f28:	add	ip, pc, #0, 12
   10f2c:	add	ip, ip, #94208	; 0x17000
   10f30:	ldr	pc, [ip, #268]!	; 0x10c

00010f34 <stpcpy@plt>:
   10f34:	add	ip, pc, #0, 12
   10f38:	add	ip, ip, #94208	; 0x17000
   10f3c:	ldr	pc, [ip, #260]!	; 0x104

00010f40 <fputc_unlocked@plt>:
   10f40:	add	ip, pc, #0, 12
   10f44:	add	ip, ip, #94208	; 0x17000
   10f48:	ldr	pc, [ip, #252]!	; 0xfc

00010f4c <dcgettext@plt>:
   10f4c:	add	ip, pc, #0, 12
   10f50:	add	ip, ip, #94208	; 0x17000
   10f54:	ldr	pc, [ip, #244]!	; 0xf4

00010f58 <strdup@plt>:
   10f58:	add	ip, pc, #0, 12
   10f5c:	add	ip, ip, #94208	; 0x17000
   10f60:	ldr	pc, [ip, #236]!	; 0xec

00010f64 <setutxent@plt>:
   10f64:	add	ip, pc, #0, 12
   10f68:	add	ip, ip, #94208	; 0x17000
   10f6c:	ldr	pc, [ip, #228]!	; 0xe4

00010f70 <realloc@plt>:
   10f70:	add	ip, pc, #0, 12
   10f74:	add	ip, ip, #94208	; 0x17000
   10f78:	ldr	pc, [ip, #220]!	; 0xdc

00010f7c <textdomain@plt>:
   10f7c:	add	ip, pc, #0, 12
   10f80:	add	ip, ip, #94208	; 0x17000
   10f84:	ldr	pc, [ip, #212]!	; 0xd4

00010f88 <iswprint@plt>:
   10f88:	add	ip, pc, #0, 12
   10f8c:	add	ip, ip, #94208	; 0x17000
   10f90:	ldr	pc, [ip, #204]!	; 0xcc

00010f94 <fwrite@plt>:
   10f94:	add	ip, pc, #0, 12
   10f98:	add	ip, ip, #94208	; 0x17000
   10f9c:	ldr	pc, [ip, #196]!	; 0xc4

00010fa0 <lseek64@plt>:
   10fa0:	add	ip, pc, #0, 12
   10fa4:	add	ip, ip, #94208	; 0x17000
   10fa8:	ldr	pc, [ip, #188]!	; 0xbc

00010fac <__ctype_get_mb_cur_max@plt>:
   10fac:	add	ip, pc, #0, 12
   10fb0:	add	ip, ip, #94208	; 0x17000
   10fb4:	ldr	pc, [ip, #180]!	; 0xb4

00010fb8 <__fpending@plt>:
   10fb8:	add	ip, pc, #0, 12
   10fbc:	add	ip, ip, #94208	; 0x17000
   10fc0:	ldr	pc, [ip, #172]!	; 0xac

00010fc4 <mbrtowc@plt>:
   10fc4:	add	ip, pc, #0, 12
   10fc8:	add	ip, ip, #94208	; 0x17000
   10fcc:	ldr	pc, [ip, #164]!	; 0xa4

00010fd0 <error@plt>:
   10fd0:	add	ip, pc, #0, 12
   10fd4:	add	ip, ip, #94208	; 0x17000
   10fd8:	ldr	pc, [ip, #156]!	; 0x9c

00010fdc <__asprintf_chk@plt>:
   10fdc:	add	ip, pc, #0, 12
   10fe0:	add	ip, ip, #94208	; 0x17000
   10fe4:	ldr	pc, [ip, #148]!	; 0x94

00010fe8 <puts@plt>:
   10fe8:	add	ip, pc, #0, 12
   10fec:	add	ip, ip, #94208	; 0x17000
   10ff0:	ldr	pc, [ip, #140]!	; 0x8c

00010ff4 <malloc@plt>:
   10ff4:	add	ip, pc, #0, 12
   10ff8:	add	ip, ip, #94208	; 0x17000
   10ffc:	ldr	pc, [ip, #132]!	; 0x84

00011000 <__libc_start_main@plt>:
   11000:	add	ip, pc, #0, 12
   11004:	add	ip, ip, #94208	; 0x17000
   11008:	ldr	pc, [ip, #124]!	; 0x7c

0001100c <strftime@plt>:
   1100c:	add	ip, pc, #0, 12
   11010:	add	ip, ip, #94208	; 0x17000
   11014:	ldr	pc, [ip, #116]!	; 0x74

00011018 <__freading@plt>:
   11018:	add	ip, pc, #0, 12
   1101c:	add	ip, ip, #94208	; 0x17000
   11020:	ldr	pc, [ip, #108]!	; 0x6c

00011024 <localtime@plt>:
   11024:	add	ip, pc, #0, 12
   11028:	add	ip, ip, #94208	; 0x17000
   1102c:	ldr	pc, [ip, #100]!	; 0x64

00011030 <__gmon_start__@plt>:
   11030:	add	ip, pc, #0, 12
   11034:	add	ip, ip, #94208	; 0x17000
   11038:	ldr	pc, [ip, #92]!	; 0x5c

0001103c <getopt_long@plt>:
   1103c:	add	ip, pc, #0, 12
   11040:	add	ip, ip, #94208	; 0x17000
   11044:	ldr	pc, [ip, #84]!	; 0x54

00011048 <kill@plt>:
   11048:	add	ip, pc, #0, 12
   1104c:	add	ip, ip, #94208	; 0x17000
   11050:	ldr	pc, [ip, #76]!	; 0x4c

00011054 <__ctype_b_loc@plt>:
   11054:	add	ip, pc, #0, 12
   11058:	add	ip, ip, #94208	; 0x17000
   1105c:	ldr	pc, [ip, #68]!	; 0x44

00011060 <exit@plt>:
   11060:	add	ip, pc, #0, 12
   11064:	add	ip, ip, #94208	; 0x17000
   11068:	ldr	pc, [ip, #60]!	; 0x3c

0001106c <ttyname@plt>:
   1106c:	add	ip, pc, #0, 12
   11070:	add	ip, ip, #94208	; 0x17000
   11074:	ldr	pc, [ip, #52]!	; 0x34

00011078 <strlen@plt>:
   11078:	add	ip, pc, #0, 12
   1107c:	add	ip, ip, #94208	; 0x17000
   11080:	ldr	pc, [ip, #44]!	; 0x2c

00011084 <strchr@plt>:
   11084:	add	ip, pc, #0, 12
   11088:	add	ip, ip, #94208	; 0x17000
   1108c:	ldr	pc, [ip, #36]!	; 0x24

00011090 <__errno_location@plt>:
   11090:	add	ip, pc, #0, 12
   11094:	add	ip, ip, #94208	; 0x17000
   11098:	ldr	pc, [ip, #28]!

0001109c <__sprintf_chk@plt>:
   1109c:	add	ip, pc, #0, 12
   110a0:	add	ip, ip, #94208	; 0x17000
   110a4:	ldr	pc, [ip, #20]!

000110a8 <__cxa_atexit@plt>:
   110a8:	add	ip, pc, #0, 12
   110ac:	add	ip, ip, #94208	; 0x17000
   110b0:	ldr	pc, [ip, #12]!

000110b4 <memset@plt>:
   110b4:	add	ip, pc, #0, 12
   110b8:	add	ip, ip, #94208	; 0x17000
   110bc:	ldr	pc, [ip, #4]!

000110c0 <strncpy@plt>:
   110c0:	add	ip, pc, #0, 12
   110c4:	add	ip, ip, #90112	; 0x16000
   110c8:	ldr	pc, [ip, #4092]!	; 0xffc

000110cc <__printf_chk@plt>:
   110cc:	add	ip, pc, #0, 12
   110d0:	add	ip, ip, #90112	; 0x16000
   110d4:	ldr	pc, [ip, #4084]!	; 0xff4

000110d8 <fileno@plt>:
   110d8:	add	ip, pc, #0, 12
   110dc:	add	ip, ip, #90112	; 0x16000
   110e0:	ldr	pc, [ip, #4076]!	; 0xfec

000110e4 <__fprintf_chk@plt>:
   110e4:	add	ip, pc, #0, 12
   110e8:	add	ip, ip, #90112	; 0x16000
   110ec:	ldr	pc, [ip, #4068]!	; 0xfe4

000110f0 <fclose@plt>:
   110f0:	add	ip, pc, #0, 12
   110f4:	add	ip, ip, #90112	; 0x16000
   110f8:	ldr	pc, [ip, #4060]!	; 0xfdc

000110fc <fseeko64@plt>:
   110fc:	add	ip, pc, #0, 12
   11100:	add	ip, ip, #90112	; 0x16000
   11104:	ldr	pc, [ip, #4052]!	; 0xfd4

00011108 <endutxent@plt>:
   11108:	add	ip, pc, #0, 12
   1110c:	add	ip, ip, #90112	; 0x16000
   11110:	ldr	pc, [ip, #4044]!	; 0xfcc

00011114 <setlocale@plt>:
   11114:	add	ip, pc, #0, 12
   11118:	add	ip, ip, #90112	; 0x16000
   1111c:	ldr	pc, [ip, #4036]!	; 0xfc4

00011120 <strrchr@plt>:
   11120:	add	ip, pc, #0, 12
   11124:	add	ip, ip, #90112	; 0x16000
   11128:	ldr	pc, [ip, #4028]!	; 0xfbc

0001112c <nl_langinfo@plt>:
   1112c:	add	ip, pc, #0, 12
   11130:	add	ip, ip, #90112	; 0x16000
   11134:	ldr	pc, [ip, #4020]!	; 0xfb4

00011138 <freeaddrinfo@plt>:
   11138:	add	ip, pc, #0, 12
   1113c:	add	ip, ip, #90112	; 0x16000
   11140:	ldr	pc, [ip, #4012]!	; 0xfac

00011144 <getaddrinfo@plt>:
   11144:	add	ip, pc, #0, 12
   11148:	add	ip, ip, #90112	; 0x16000
   1114c:	ldr	pc, [ip, #4004]!	; 0xfa4

00011150 <bindtextdomain@plt>:
   11150:	add	ip, pc, #0, 12
   11154:	add	ip, ip, #90112	; 0x16000
   11158:	ldr	pc, [ip, #3996]!	; 0xf9c

0001115c <__xstat64@plt>:
   1115c:	add	ip, pc, #0, 12
   11160:	add	ip, ip, #90112	; 0x16000
   11164:	ldr	pc, [ip, #3988]!	; 0xf94

00011168 <strncmp@plt>:
   11168:	add	ip, pc, #0, 12
   1116c:	add	ip, ip, #90112	; 0x16000
   11170:	ldr	pc, [ip, #3980]!	; 0xf8c

00011174 <abort@plt>:
   11174:	add	ip, pc, #0, 12
   11178:	add	ip, ip, #90112	; 0x16000
   1117c:	ldr	pc, [ip, #3972]!	; 0xf84

00011180 <getutxent@plt>:
   11180:	add	ip, pc, #0, 12
   11184:	add	ip, ip, #90112	; 0x16000
   11188:	ldr	pc, [ip, #3964]!	; 0xf7c

0001118c <__assert_fail@plt>:
   1118c:	add	ip, pc, #0, 12
   11190:	add	ip, ip, #90112	; 0x16000
   11194:	ldr	pc, [ip, #3956]!	; 0xf74

Disassembly of section .text:

00011198 <.text>:
   11198:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1119c:	mov	r8, r0
   111a0:	sub	sp, sp, #20
   111a4:	ldr	r0, [r1]
   111a8:	mov	r7, r1
   111ac:	bl	12b60 <__assert_fail@plt+0x19d4>
   111b0:	ldr	r1, [pc, #732]	; 11494 <__assert_fail@plt+0x308>
   111b4:	mov	r0, #6
   111b8:	bl	11114 <setlocale@plt>
   111bc:	ldr	r1, [pc, #724]	; 11498 <__assert_fail@plt+0x30c>
   111c0:	ldr	r0, [pc, #724]	; 1149c <__assert_fail@plt+0x310>
   111c4:	bl	11150 <bindtextdomain@plt>
   111c8:	ldr	r0, [pc, #716]	; 1149c <__assert_fail@plt+0x310>
   111cc:	bl	10f7c <textdomain@plt>
   111d0:	ldr	r0, [pc, #712]	; 114a0 <__assert_fail@plt+0x314>
   111d4:	bl	16194 <__assert_fail@plt+0x5008>
   111d8:	mov	fp, #1
   111dc:	ldr	sl, [pc, #704]	; 114a4 <__assert_fail@plt+0x318>
   111e0:	ldr	r9, [pc, #704]	; 114a8 <__assert_fail@plt+0x31c>
   111e4:	ldr	r4, [pc, #704]	; 114ac <__assert_fail@plt+0x320>
   111e8:	mov	r5, fp
   111ec:	mov	r6, #0
   111f0:	str	r6, [sp]
   111f4:	mov	r3, sl
   111f8:	mov	r2, r9
   111fc:	mov	r1, r7
   11200:	mov	r0, r8
   11204:	bl	1103c <getopt_long@plt>
   11208:	cmn	r0, #1
   1120c:	beq	113b4 <__assert_fail@plt+0x228>
   11210:	cmp	r0, #109	; 0x6d
   11214:	beq	1134c <__assert_fail@plt+0x1c0>
   11218:	bgt	11254 <__assert_fail@plt+0xc8>
   1121c:	cmp	r0, #84	; 0x54
   11220:	beq	112f0 <__assert_fail@plt+0x164>
   11224:	ble	11284 <__assert_fail@plt+0xf8>
   11228:	cmp	r0, #98	; 0x62
   1122c:	beq	11340 <__assert_fail@plt+0x1b4>
   11230:	ble	112f8 <__assert_fail@plt+0x16c>
   11234:	cmp	r0, #100	; 0x64
   11238:	beq	112c4 <__assert_fail@plt+0x138>
   1123c:	cmp	r0, #108	; 0x6c
   11240:	bne	1129c <__assert_fail@plt+0x110>
   11244:	strb	r5, [r4, #83]	; 0x53
   11248:	strb	r5, [r4]
   1124c:	mov	fp, r6
   11250:	b	111f0 <__assert_fail@plt+0x64>
   11254:	cmp	r0, #115	; 0x73
   11258:	beq	11330 <__assert_fail@plt+0x1a4>
   1125c:	ble	112a4 <__assert_fail@plt+0x118>
   11260:	cmp	r0, #117	; 0x75
   11264:	beq	113a4 <__assert_fail@plt+0x218>
   11268:	blt	11398 <__assert_fail@plt+0x20c>
   1126c:	cmp	r0, #119	; 0x77
   11270:	beq	112f0 <__assert_fail@plt+0x164>
   11274:	cmp	r0, #256	; 0x100
   11278:	bne	1129c <__assert_fail@plt+0x110>
   1127c:	strb	r5, [r4, #54]	; 0x36
   11280:	b	111f0 <__assert_fail@plt+0x64>
   11284:	cmn	r0, #2
   11288:	beq	11390 <__assert_fail@plt+0x204>
   1128c:	cmp	r0, #72	; 0x48
   11290:	beq	112e8 <__assert_fail@plt+0x15c>
   11294:	cmn	r0, #3
   11298:	beq	11354 <__assert_fail@plt+0x1c8>
   1129c:	mov	r0, #1
   112a0:	bl	12498 <__assert_fail@plt+0x130c>
   112a4:	cmp	r0, #113	; 0x71
   112a8:	beq	11338 <__assert_fail@plt+0x1ac>
   112ac:	bgt	112d8 <__assert_fail@plt+0x14c>
   112b0:	cmp	r0, #112	; 0x70
   112b4:	bne	1129c <__assert_fail@plt+0x110>
   112b8:	strb	r5, [r4, #82]	; 0x52
   112bc:	mov	fp, r6
   112c0:	b	111f0 <__assert_fail@plt+0x64>
   112c4:	strb	r5, [r4, #84]	; 0x54
   112c8:	strb	r5, [r4]
   112cc:	strb	r5, [r4, #2]
   112d0:	mov	fp, r6
   112d4:	b	111f0 <__assert_fail@plt+0x64>
   112d8:	strb	r5, [r4, #68]	; 0x44
   112dc:	strb	r5, [r4]
   112e0:	mov	fp, r6
   112e4:	b	111f0 <__assert_fail@plt+0x64>
   112e8:	strb	r5, [r4, #65]	; 0x41
   112ec:	b	111f0 <__assert_fail@plt+0x64>
   112f0:	strb	r5, [r4, #3]
   112f4:	b	111f0 <__assert_fail@plt+0x64>
   112f8:	cmp	r0, #97	; 0x61
   112fc:	bne	1129c <__assert_fail@plt+0x110>
   11300:	strb	r5, [r4, #80]	; 0x50
   11304:	strb	r5, [r4, #84]	; 0x54
   11308:	strb	r5, [r4, #83]	; 0x53
   1130c:	strb	r5, [r4, #82]	; 0x52
   11310:	strb	r5, [r4, #68]	; 0x44
   11314:	strb	r5, [r4, #81]	; 0x51
   11318:	strb	r5, [r4, #67]	; 0x43
   1131c:	strb	r5, [r4, #3]
   11320:	strb	r5, [r4]
   11324:	strb	r5, [r4, #2]
   11328:	mov	fp, r6
   1132c:	b	111f0 <__assert_fail@plt+0x64>
   11330:	strb	r5, [r4, #1]
   11334:	b	111f0 <__assert_fail@plt+0x64>
   11338:	strb	r5, [r4, #64]	; 0x40
   1133c:	b	111f0 <__assert_fail@plt+0x64>
   11340:	strb	r5, [r4, #80]	; 0x50
   11344:	mov	fp, r6
   11348:	b	111f0 <__assert_fail@plt+0x64>
   1134c:	strb	r5, [r4, #66]	; 0x42
   11350:	b	111f0 <__assert_fail@plt+0x64>
   11354:	ldr	ip, [pc, #340]	; 114b0 <__assert_fail@plt+0x324>
   11358:	ldr	r1, [pc, #340]	; 114b4 <__assert_fail@plt+0x328>
   1135c:	ldr	r3, [pc, #340]	; 114b8 <__assert_fail@plt+0x32c>
   11360:	ldr	r0, [pc, #340]	; 114bc <__assert_fail@plt+0x330>
   11364:	ldr	r2, [pc, #340]	; 114c0 <__assert_fail@plt+0x334>
   11368:	str	r6, [sp, #12]
   1136c:	ldr	r0, [r0]
   11370:	ldr	r3, [r3]
   11374:	stmib	sp, {r1, ip}
   11378:	str	r2, [sp]
   1137c:	ldr	r1, [pc, #320]	; 114c4 <__assert_fail@plt+0x338>
   11380:	ldr	r2, [pc, #320]	; 114c8 <__assert_fail@plt+0x33c>
   11384:	bl	15094 <__assert_fail@plt+0x3f08>
   11388:	mov	r0, #0
   1138c:	bl	11060 <exit@plt>
   11390:	mov	r0, #0
   11394:	bl	12498 <__assert_fail@plt+0x130c>
   11398:	strb	r5, [r4, #81]	; 0x51
   1139c:	mov	fp, r6
   113a0:	b	111f0 <__assert_fail@plt+0x64>
   113a4:	strb	r5, [r4, #67]	; 0x43
   113a8:	strb	r5, [r4]
   113ac:	mov	fp, r6
   113b0:	b	111f0 <__assert_fail@plt+0x64>
   113b4:	ldr	r4, [pc, #240]	; 114ac <__assert_fail@plt+0x320>
   113b8:	cmp	fp, #0
   113bc:	movne	r3, #1
   113c0:	strbne	r3, [r4, #1]
   113c4:	strbne	r3, [r4, #67]	; 0x43
   113c8:	ldrb	r3, [r4, #2]
   113cc:	mov	r0, #2
   113d0:	ldr	r5, [pc, #244]	; 114cc <__assert_fail@plt+0x340>
   113d4:	cmp	r3, #0
   113d8:	movne	r3, #0
   113dc:	strbne	r3, [r4, #1]
   113e0:	bl	12a34 <__assert_fail@plt+0x18a8>
   113e4:	cmp	r0, #0
   113e8:	movne	r3, #16
   113ec:	moveq	r3, #12
   113f0:	str	r3, [r4, #4]
   113f4:	ldr	r3, [r5]
   113f8:	ldrne	r2, [pc, #208]	; 114d0 <__assert_fail@plt+0x344>
   113fc:	ldreq	r2, [pc, #208]	; 114d4 <__assert_fail@plt+0x348>
   11400:	sub	r8, r8, r3
   11404:	add	r8, r8, #1
   11408:	str	r2, [r4, #44]	; 0x2c
   1140c:	cmp	r8, #3
   11410:	ldrls	pc, [pc, r8, lsl #2]
   11414:	b	11458 <__assert_fail@plt+0x2cc>
   11418:	andeq	r1, r1, r0, lsr r4
   1141c:	andeq	r1, r1, r0, lsr r4
   11420:	andeq	r1, r1, r8, asr #8
   11424:	andeq	r1, r1, r8, lsr #8
   11428:	mov	r3, #1
   1142c:	strb	r3, [r4, #66]	; 0x42
   11430:	mov	r1, #1
   11434:	ldr	r0, [pc, #156]	; 114d8 <__assert_fail@plt+0x34c>
   11438:	bl	11d6c <__assert_fail@plt+0xbe0>
   1143c:	mov	r0, #0
   11440:	add	sp, sp, #20
   11444:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   11448:	ldr	r0, [r7, r3, lsl #2]
   1144c:	mov	r1, #0
   11450:	bl	11d6c <__assert_fail@plt+0xbe0>
   11454:	b	1143c <__assert_fail@plt+0x2b0>
   11458:	mov	r2, #5
   1145c:	ldr	r1, [pc, #120]	; 114dc <__assert_fail@plt+0x350>
   11460:	mov	r0, #0
   11464:	bl	10f4c <dcgettext@plt>
   11468:	ldr	r3, [r5]
   1146c:	add	r3, r3, #2
   11470:	mov	r4, r0
   11474:	ldr	r0, [r7, r3, lsl #2]
   11478:	bl	14a20 <__assert_fail@plt+0x3894>
   1147c:	mov	r1, #0
   11480:	mov	r2, r4
   11484:	mov	r3, r0
   11488:	mov	r0, r1
   1148c:	bl	10fd0 <error@plt>
   11490:	b	1129c <__assert_fail@plt+0x110>
   11494:	andeq	r6, r1, r0, lsr r9
   11498:	andeq	r6, r1, r0, asr #20
   1149c:	muleq	r1, r8, r9
   114a0:	strdeq	r2, [r1], -r8
   114a4:	strdeq	r6, [r1], -ip
   114a8:	andeq	r6, r1, ip, lsl #21
   114ac:	andeq	r8, r2, r4, lsl #3
   114b0:	andeq	r6, r1, r8, asr sl
   114b4:	andeq	r6, r1, r8, ror #20
   114b8:	andeq	r8, r2, r0, lsr #2
   114bc:	andeq	r8, r2, ip, ror r1
   114c0:	andeq	r6, r1, r8, ror sl
   114c4:	andeq	r6, r1, r0, lsl #9
   114c8:	muleq	r1, r4, r9
   114cc:	andeq	r8, r2, r0, ror r1
   114d0:	muleq	r1, ip, sl
   114d4:	andeq	r6, r1, ip, lsr #21
   114d8:	andeq	r6, r1, r4, asr #18
   114dc:			; <UNDEFINED> instruction: 0x00016ab8
   114e0:	mov	fp, #0
   114e4:	mov	lr, #0
   114e8:	pop	{r1}		; (ldr r1, [sp], #4)
   114ec:	mov	r2, sp
   114f0:	push	{r2}		; (str r2, [sp, #-4]!)
   114f4:	push	{r0}		; (str r0, [sp, #-4]!)
   114f8:	ldr	ip, [pc, #16]	; 11510 <__assert_fail@plt+0x384>
   114fc:	push	{ip}		; (str ip, [sp, #-4]!)
   11500:	ldr	r0, [pc, #12]	; 11514 <__assert_fail@plt+0x388>
   11504:	ldr	r3, [pc, #12]	; 11518 <__assert_fail@plt+0x38c>
   11508:	bl	11000 <__libc_start_main@plt>
   1150c:	bl	11174 <abort@plt>
   11510:	muleq	r1, r0, r1
   11514:	muleq	r1, r8, r1
   11518:	andeq	r6, r1, r0, lsr r1
   1151c:	ldr	r3, [pc, #20]	; 11538 <__assert_fail@plt+0x3ac>
   11520:	ldr	r2, [pc, #20]	; 1153c <__assert_fail@plt+0x3b0>
   11524:	add	r3, pc, r3
   11528:	ldr	r2, [r3, r2]
   1152c:	cmp	r2, #0
   11530:	bxeq	lr
   11534:	b	11030 <__gmon_start__@plt>
   11538:	ldrdeq	r6, [r1], -r4
   1153c:	andeq	r0, r0, ip, lsl #2
   11540:	ldr	r3, [pc, #28]	; 11564 <__assert_fail@plt+0x3d8>
   11544:	ldr	r0, [pc, #28]	; 11568 <__assert_fail@plt+0x3dc>
   11548:	sub	r3, r3, r0
   1154c:	cmp	r3, #6
   11550:	bxls	lr
   11554:	ldr	r3, [pc, #16]	; 1156c <__assert_fail@plt+0x3e0>
   11558:	cmp	r3, #0
   1155c:	bxeq	lr
   11560:	bx	r3
   11564:	andeq	r8, r2, fp, ror #2
   11568:	andeq	r8, r2, r8, ror #2
   1156c:	andeq	r0, r0, r0
   11570:	ldr	r1, [pc, #36]	; 1159c <__assert_fail@plt+0x410>
   11574:	ldr	r0, [pc, #36]	; 115a0 <__assert_fail@plt+0x414>
   11578:	sub	r1, r1, r0
   1157c:	asr	r1, r1, #2
   11580:	add	r1, r1, r1, lsr #31
   11584:	asrs	r1, r1, #1
   11588:	bxeq	lr
   1158c:	ldr	r3, [pc, #16]	; 115a4 <__assert_fail@plt+0x418>
   11590:	cmp	r3, #0
   11594:	bxeq	lr
   11598:	bx	r3
   1159c:	andeq	r8, r2, r8, ror #2
   115a0:	andeq	r8, r2, r8, ror #2
   115a4:	andeq	r0, r0, r0
   115a8:	push	{r4, lr}
   115ac:	ldr	r4, [pc, #24]	; 115cc <__assert_fail@plt+0x440>
   115b0:	ldrb	r3, [r4]
   115b4:	cmp	r3, #0
   115b8:	popne	{r4, pc}
   115bc:	bl	11540 <__assert_fail@plt+0x3b4>
   115c0:	mov	r3, #1
   115c4:	strb	r3, [r4]
   115c8:	pop	{r4, pc}
   115cc:	andeq	r8, r2, r0, lsl #3
   115d0:	ldr	r0, [pc, #40]	; 11600 <__assert_fail@plt+0x474>
   115d4:	ldr	r3, [r0]
   115d8:	cmp	r3, #0
   115dc:	bne	115e4 <__assert_fail@plt+0x458>
   115e0:	b	11570 <__assert_fail@plt+0x3e4>
   115e4:	ldr	r3, [pc, #24]	; 11604 <__assert_fail@plt+0x478>
   115e8:	cmp	r3, #0
   115ec:	beq	115e0 <__assert_fail@plt+0x454>
   115f0:	push	{r4, lr}
   115f4:	blx	r3
   115f8:	pop	{r4, lr}
   115fc:	b	11570 <__assert_fail@plt+0x3e4>
   11600:	andeq	r7, r2, r4, lsl pc
   11604:	andeq	r0, r0, r0
   11608:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1160c:	mov	r9, r0
   11610:	ldr	r4, [pc, #468]	; 117ec <__assert_fail@plt+0x660>
   11614:	ldr	ip, [pc, #468]	; 117f0 <__assert_fail@plt+0x664>
   11618:	sub	sp, sp, #76	; 0x4c
   1161c:	ldrb	r0, [r4]
   11620:	mov	r5, r1
   11624:	mov	sl, r3
   11628:	cmp	r0, #0
   1162c:	strb	r2, [ip, #1]
   11630:	ldr	fp, [sp, #128]	; 0x80
   11634:	ldrb	r7, [r4, #1]
   11638:	beq	11644 <__assert_fail@plt+0x4b8>
   1163c:	cmp	r7, #0
   11640:	beq	11770 <__assert_fail@plt+0x5e4>
   11644:	add	r6, sp, #72	; 0x48
   11648:	mov	r3, #0
   1164c:	strb	r3, [r6, #-24]!	; 0xffffffe8
   11650:	cmp	r7, #0
   11654:	bne	11668 <__assert_fail@plt+0x4dc>
   11658:	ldr	r0, [sp, #124]	; 0x7c
   1165c:	bl	11078 <strlen@plt>
   11660:	cmp	r0, #11
   11664:	bls	117c4 <__assert_fail@plt+0x638>
   11668:	add	r7, sp, #72	; 0x48
   1166c:	mov	r3, #0
   11670:	strb	r3, [r7, #-16]!
   11674:	ldrb	r3, [r4, #2]
   11678:	cmp	r3, #0
   1167c:	moveq	r0, #1
   11680:	beq	11698 <__assert_fail@plt+0x50c>
   11684:	ldr	r0, [sp, #132]	; 0x84
   11688:	bl	11078 <strlen@plt>
   1168c:	cmp	r0, #11
   11690:	addhi	r0, r0, #2
   11694:	movls	r0, #14
   11698:	bl	15190 <__assert_fail@plt+0x4004>
   1169c:	ldrb	r3, [r4, #2]
   116a0:	cmp	r3, #0
   116a4:	mov	r8, r0
   116a8:	strbeq	r3, [r0]
   116ac:	bne	117a8 <__assert_fail@plt+0x61c>
   116b0:	ldrb	r0, [r4, #3]
   116b4:	ldr	r3, [pc, #308]	; 117f0 <__assert_fail@plt+0x664>
   116b8:	ldr	r2, [pc, #308]	; 117f4 <__assert_fail@plt+0x668>
   116bc:	cmp	r0, #0
   116c0:	movne	r2, r3
   116c4:	ldr	r3, [pc, #300]	; 117f8 <__assert_fail@plt+0x66c>
   116c8:	cmp	r5, #0
   116cc:	moveq	r5, r3
   116d0:	ldr	r3, [sp, #116]	; 0x74
   116d4:	ldr	r1, [r4, #4]
   116d8:	str	r3, [sp, #20]
   116dc:	ldr	r3, [sp, #112]	; 0x70
   116e0:	str	r1, [sp, #16]
   116e4:	str	r3, [sp, #12]
   116e8:	str	r2, [sp, #4]
   116ec:	str	r8, [sp, #36]	; 0x24
   116f0:	str	fp, [sp, #32]
   116f4:	str	r7, [sp, #28]
   116f8:	str	r6, [sp, #24]
   116fc:	str	sl, [sp, #8]
   11700:	mov	r3, r9
   11704:	str	r5, [sp]
   11708:	ldr	r2, [pc, #236]	; 117fc <__assert_fail@plt+0x670>
   1170c:	mov	r1, #1
   11710:	add	r0, sp, #44	; 0x2c
   11714:	bl	10fdc <__asprintf_chk@plt>
   11718:	cmn	r0, #1
   1171c:	beq	117e8 <__assert_fail@plt+0x65c>
   11720:	ldr	r4, [sp, #44]	; 0x2c
   11724:	mov	r0, r4
   11728:	bl	11078 <strlen@plt>
   1172c:	add	r0, r4, r0
   11730:	b	11738 <__assert_fail@plt+0x5ac>
   11734:	mov	r0, r2
   11738:	ldrb	r3, [r0, #-1]
   1173c:	sub	r2, r0, #1
   11740:	cmp	r3, #32
   11744:	beq	11734 <__assert_fail@plt+0x5a8>
   11748:	mov	r3, #0
   1174c:	strb	r3, [r0]
   11750:	ldr	r0, [sp, #44]	; 0x2c
   11754:	bl	10fe8 <puts@plt>
   11758:	ldr	r0, [sp, #44]	; 0x2c
   1175c:	bl	129dc <__assert_fail@plt+0x1850>
   11760:	mov	r0, r8
   11764:	bl	129dc <__assert_fail@plt+0x1850>
   11768:	add	sp, sp, #76	; 0x4c
   1176c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   11770:	ldr	r0, [sp, #120]	; 0x78
   11774:	bl	11078 <strlen@plt>
   11778:	cmp	r0, #6
   1177c:	bhi	11644 <__assert_fail@plt+0x4b8>
   11780:	ldr	r3, [sp, #120]	; 0x78
   11784:	add	r6, sp, #48	; 0x30
   11788:	str	r3, [sp]
   1178c:	mov	r0, r6
   11790:	ldr	r3, [pc, #104]	; 11800 <__assert_fail@plt+0x674>
   11794:	mov	r2, #8
   11798:	mov	r1, #1
   1179c:	bl	1109c <__sprintf_chk@plt>
   117a0:	ldrb	r7, [r4, #1]
   117a4:	b	11650 <__assert_fail@plt+0x4c4>
   117a8:	ldr	r3, [sp, #132]	; 0x84
   117ac:	mvn	r2, #0
   117b0:	str	r3, [sp]
   117b4:	mov	r1, #1
   117b8:	ldr	r3, [pc, #68]	; 11804 <__assert_fail@plt+0x678>
   117bc:	bl	1109c <__sprintf_chk@plt>
   117c0:	b	116b0 <__assert_fail@plt+0x524>
   117c4:	ldr	r3, [sp, #124]	; 0x7c
   117c8:	add	r7, sp, #56	; 0x38
   117cc:	str	r3, [sp]
   117d0:	mov	r0, r7
   117d4:	ldr	r3, [pc, #44]	; 11808 <__assert_fail@plt+0x67c>
   117d8:	mov	r2, #13
   117dc:	mov	r1, #1
   117e0:	bl	1109c <__sprintf_chk@plt>
   117e4:	b	11674 <__assert_fail@plt+0x4e8>
   117e8:	bl	156d8 <__assert_fail@plt+0x454c>
   117ec:	andeq	r8, r2, r4, lsl #3
   117f0:	andeq	r8, r2, r8, lsl r1
   117f4:	andeq	r6, r1, r0, lsr r9
   117f8:	andeq	r6, r1, ip, lsl r3
   117fc:	andeq	r6, r1, ip, lsr r3
   11800:	andeq	r6, r1, r4, lsr #6
   11804:	andeq	r6, r1, r4, lsr r3
   11808:	andeq	r6, r1, ip, lsr #6
   1180c:	push	{r4, r5, r6, lr}
   11810:	mov	r2, #5
   11814:	ldr	r1, [pc, #128]	; 1189c <__assert_fail@plt+0x710>
   11818:	mov	r4, r0
   1181c:	mov	r0, #0
   11820:	bl	10f4c <dcgettext@plt>
   11824:	bl	11078 <strlen@plt>
   11828:	add	r0, r0, #5
   1182c:	bl	15190 <__assert_fail@plt+0x4004>
   11830:	mov	r2, #5
   11834:	ldr	r1, [pc, #96]	; 1189c <__assert_fail@plt+0x710>
   11838:	mov	r5, r0
   1183c:	mov	r0, #0
   11840:	bl	10f4c <dcgettext@plt>
   11844:	mov	r1, r0
   11848:	mov	r0, r5
   1184c:	bl	10f34 <stpcpy@plt>
   11850:	ldrb	r2, [r4, #40]	; 0x28
   11854:	cmp	r2, #0
   11858:	beq	11894 <__assert_fail@plt+0x708>
   1185c:	add	ip, r4, #44	; 0x2c
   11860:	add	r3, r4, #41	; 0x29
   11864:	mov	r1, r0
   11868:	b	11878 <__assert_fail@plt+0x6ec>
   1186c:	ldrb	r2, [r3], #1
   11870:	cmp	r2, #0
   11874:	beq	11884 <__assert_fail@plt+0x6f8>
   11878:	cmp	ip, r3
   1187c:	strb	r2, [r1], #1
   11880:	bhi	1186c <__assert_fail@plt+0x6e0>
   11884:	mov	r3, #0
   11888:	mov	r0, r5
   1188c:	strb	r3, [r1]
   11890:	pop	{r4, r5, r6, pc}
   11894:	mov	r1, r0
   11898:	b	11884 <__assert_fail@plt+0x6f8>
   1189c:	andeq	r6, r1, r0, ror #6
   118a0:	push	{r4, lr}
   118a4:	sub	sp, sp, #8
   118a8:	add	r3, sp, #8
   118ac:	str	r0, [r3, #-4]!
   118b0:	mov	r0, r3
   118b4:	bl	11024 <localtime@plt>
   118b8:	subs	r3, r0, #0
   118bc:	beq	118e0 <__assert_fail@plt+0x754>
   118c0:	ldr	r4, [pc, #48]	; 118f8 <__assert_fail@plt+0x76c>
   118c4:	mov	r1, #33	; 0x21
   118c8:	add	r0, r4, #8
   118cc:	ldr	r2, [r4, #44]	; 0x2c
   118d0:	bl	1100c <strftime@plt>
   118d4:	add	r0, r4, #8
   118d8:	add	sp, sp, #8
   118dc:	pop	{r4, pc}
   118e0:	ldr	r0, [sp, #4]
   118e4:	ldr	r2, [pc, #16]	; 118fc <__assert_fail@plt+0x770>
   118e8:	asr	r1, r0, #31
   118ec:	bl	12a90 <__assert_fail@plt+0x1904>
   118f0:	add	sp, sp, #8
   118f4:	pop	{r4, pc}
   118f8:	andeq	r8, r2, r4, lsl #3
   118fc:	andeq	r8, r2, ip, lsl #3
   11900:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   11904:	sub	sp, sp, #468	; 0x1d4
   11908:	ldr	r3, [r0, #4]
   1190c:	mov	r4, r0
   11910:	add	r7, sp, #44	; 0x2c
   11914:	str	r3, [sp]
   11918:	mov	r5, r1
   1191c:	ldr	r3, [pc, #1016]	; 11d1c <__assert_fail@plt+0xb90>
   11920:	mov	r0, r7
   11924:	mov	r2, #12
   11928:	mov	r1, #1
   1192c:	bl	1109c <__sprintf_chk@plt>
   11930:	ldrb	r3, [r4, #8]
   11934:	cmp	r3, #47	; 0x2f
   11938:	beq	11c08 <__assert_fail@plt+0xa7c>
   1193c:	ldr	r2, [pc, #988]	; 11d20 <__assert_fail@plt+0xb94>
   11940:	add	ip, sp, #56	; 0x38
   11944:	cmp	r3, #0
   11948:	ldm	r2, {r0, r1}
   1194c:	add	r8, r4, #8
   11950:	str	r0, [sp, #56]	; 0x38
   11954:	strh	r1, [sp, #60]	; 0x3c
   11958:	add	r0, ip, #5
   1195c:	add	r1, r4, #40	; 0x28
   11960:	beq	11984 <__assert_fail@plt+0x7f8>
   11964:	add	r2, r8, #1
   11968:	b	11978 <__assert_fail@plt+0x7ec>
   1196c:	ldrb	r3, [r2], #1
   11970:	cmp	r3, #0
   11974:	beq	11984 <__assert_fail@plt+0x7f8>
   11978:	cmp	r2, r1
   1197c:	strb	r3, [r0], #1
   11980:	bcc	1196c <__assert_fail@plt+0x7e0>
   11984:	mov	r3, #0
   11988:	strb	r3, [r0]
   1198c:	mov	r1, ip
   11990:	add	r2, sp, #96	; 0x60
   11994:	mov	r0, #3
   11998:	bl	1115c <__xstat64@plt>
   1199c:	cmp	r0, #0
   119a0:	bne	11a70 <__assert_fail@plt+0x8e4>
   119a4:	ldr	r3, [sp, #112]	; 0x70
   119a8:	ldr	r6, [sp, #168]	; 0xa8
   119ac:	tst	r3, #16
   119b0:	moveq	fp, #45	; 0x2d
   119b4:	movne	fp, #43	; 0x2b
   119b8:	cmp	r6, #0
   119bc:	beq	11a74 <__assert_fail@plt+0x8e8>
   119c0:	ldr	r9, [pc, #860]	; 11d24 <__assert_fail@plt+0xb98>
   119c4:	ldr	r3, [r9, #4]
   119c8:	cmp	r3, #-2147483648	; 0x80000000
   119cc:	beq	11c88 <__assert_fail@plt+0xafc>
   119d0:	cmp	r6, r5
   119d4:	ble	11bd0 <__assert_fail@plt+0xa44>
   119d8:	ldr	r2, [r9, #4]
   119dc:	ldr	r3, [pc, #836]	; 11d28 <__assert_fail@plt+0xb9c>
   119e0:	add	r3, r2, r3
   119e4:	cmp	r6, r3
   119e8:	movlt	r3, #0
   119ec:	movge	r3, #1
   119f0:	cmp	r6, r2
   119f4:	movgt	r3, #0
   119f8:	cmp	r3, #0
   119fc:	beq	11bd0 <__assert_fail@plt+0xa44>
   11a00:	sub	r2, r2, r6
   11a04:	cmp	r2, #59	; 0x3b
   11a08:	ble	11ce8 <__assert_fail@plt+0xb5c>
   11a0c:	ldr	r3, [pc, #792]	; 11d2c <__assert_fail@plt+0xba0>
   11a10:	cmp	r2, r3
   11a14:	bgt	11d08 <__assert_fail@plt+0xb7c>
   11a18:	ldr	r3, [pc, #784]	; 11d30 <__assert_fail@plt+0xba4>
   11a1c:	asr	r0, r2, #31
   11a20:	mov	r6, #3600	; 0xe10
   11a24:	smull	r1, r3, r3, r2
   11a28:	ldr	r1, [pc, #772]	; 11d34 <__assert_fail@plt+0xba8>
   11a2c:	add	r3, r3, r2
   11a30:	rsb	r3, r0, r3, asr #11
   11a34:	str	r3, [sp]
   11a38:	mul	r6, r6, r3
   11a3c:	ldr	r3, [pc, #756]	; 11d38 <__assert_fail@plt+0xbac>
   11a40:	sub	r6, r2, r6
   11a44:	mov	r2, #6
   11a48:	smull	r0, r1, r1, r6
   11a4c:	ldr	r0, [pc, #744]	; 11d3c <__assert_fail@plt+0xbb0>
   11a50:	add	ip, r1, r6
   11a54:	asr	r1, r6, #31
   11a58:	rsb	r1, r1, ip, asr #5
   11a5c:	str	r1, [sp, #4]
   11a60:	mov	r1, #1
   11a64:	bl	1109c <__sprintf_chk@plt>
   11a68:	ldr	r0, [pc, #716]	; 11d3c <__assert_fail@plt+0xbb0>
   11a6c:	b	11be0 <__assert_fail@plt+0xa54>
   11a70:	mov	fp, #63	; 0x3f
   11a74:	ldr	r3, [pc, #708]	; 11d40 <__assert_fail@plt+0xbb4>
   11a78:	add	r6, sp, #464	; 0x1d0
   11a7c:	str	r3, [r6, #-428]!	; 0xfffffe54
   11a80:	ldrb	r3, [r4, #76]	; 0x4c
   11a84:	cmp	r3, #0
   11a88:	beq	11b6c <__assert_fail@plt+0x9e0>
   11a8c:	add	r9, sp, #204	; 0xcc
   11a90:	mov	ip, r9
   11a94:	add	r1, r4, #332	; 0x14c
   11a98:	add	r2, r4, #77	; 0x4d
   11a9c:	b	11aac <__assert_fail@plt+0x920>
   11aa0:	ldrb	r3, [r2], #1
   11aa4:	cmp	r3, #0
   11aa8:	beq	11ab8 <__assert_fail@plt+0x92c>
   11aac:	cmp	r1, r2
   11ab0:	strb	r3, [ip], #1
   11ab4:	bhi	11aa0 <__assert_fail@plt+0x914>
   11ab8:	mov	r5, #0
   11abc:	mov	r1, #58	; 0x3a
   11ac0:	mov	r0, r9
   11ac4:	strb	r5, [ip]
   11ac8:	bl	11084 <strchr@plt>
   11acc:	cmp	r0, #0
   11ad0:	beq	11c4c <__assert_fail@plt+0xac0>
   11ad4:	strb	r5, [r0]
   11ad8:	ldrb	r3, [sp, #204]	; 0xcc
   11adc:	add	r2, r0, #1
   11ae0:	str	r2, [sp, #24]
   11ae4:	cmp	r3, r5
   11ae8:	beq	11c1c <__assert_fail@plt+0xa90>
   11aec:	ldr	r5, [pc, #592]	; 11d44 <__assert_fail@plt+0xbb8>
   11af0:	ldrb	r3, [r5, #54]	; 0x36
   11af4:	cmp	r3, #0
   11af8:	moveq	sl, r9
   11afc:	bne	11c70 <__assert_fail@plt+0xae4>
   11b00:	ldr	r3, [sp, #24]
   11b04:	cmp	r3, #0
   11b08:	beq	11cb4 <__assert_fail@plt+0xb28>
   11b0c:	mov	r0, sl
   11b10:	bl	11078 <strlen@plt>
   11b14:	str	r0, [sp, #28]
   11b18:	ldr	r0, [sp, #24]
   11b1c:	bl	11078 <strlen@plt>
   11b20:	ldr	r3, [sp, #28]
   11b24:	ldr	r2, [r5, #56]	; 0x38
   11b28:	add	r3, r3, r0
   11b2c:	add	r3, r3, #4
   11b30:	cmp	r3, r2
   11b34:	ldr	r0, [r5, #60]	; 0x3c
   11b38:	bhi	11c94 <__assert_fail@plt+0xb08>
   11b3c:	ldr	r3, [sp, #24]
   11b40:	str	sl, [sp]
   11b44:	str	r3, [sp, #4]
   11b48:	mvn	r2, #0
   11b4c:	ldr	r3, [pc, #500]	; 11d48 <__assert_fail@plt+0xbbc>
   11b50:	mov	r1, #1
   11b54:	bl	1109c <__sprintf_chk@plt>
   11b58:	cmp	sl, r9
   11b5c:	beq	11b88 <__assert_fail@plt+0x9fc>
   11b60:	mov	r0, sl
   11b64:	bl	129dc <__assert_fail@plt+0x1850>
   11b68:	b	11b88 <__assert_fail@plt+0x9fc>
   11b6c:	ldr	r5, [pc, #464]	; 11d44 <__assert_fail@plt+0xbb8>
   11b70:	ldr	r3, [r5, #56]	; 0x38
   11b74:	cmp	r3, #0
   11b78:	beq	11c28 <__assert_fail@plt+0xa9c>
   11b7c:	ldr	r2, [r5, #60]	; 0x3c
   11b80:	mov	r3, #0
   11b84:	strb	r3, [r2]
   11b88:	ldr	r0, [r4, #340]	; 0x154
   11b8c:	bl	118a0 <__assert_fail@plt+0x714>
   11b90:	ldr	r3, [r5, #60]	; 0x3c
   11b94:	ldr	ip, [pc, #432]	; 11d4c <__assert_fail@plt+0xbc0>
   11b98:	cmp	r3, #0
   11b9c:	movne	r2, r3
   11ba0:	moveq	r2, ip
   11ba4:	mov	r3, #32
   11ba8:	add	r1, r4, #44	; 0x2c
   11bac:	str	ip, [sp, #20]
   11bb0:	str	r8, [sp]
   11bb4:	str	r2, [sp, #16]
   11bb8:	stmib	sp, {r0, r6, r7}
   11bbc:	mov	r2, fp
   11bc0:	mov	r0, r3
   11bc4:	bl	11608 <__assert_fail@plt+0x47c>
   11bc8:	add	sp, sp, #468	; 0x1d4
   11bcc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   11bd0:	mov	r2, #5
   11bd4:	ldr	r1, [pc, #372]	; 11d50 <__assert_fail@plt+0xbc4>
   11bd8:	mov	r0, #0
   11bdc:	bl	10f4c <dcgettext@plt>
   11be0:	add	r6, sp, #36	; 0x24
   11be4:	mov	r3, #6
   11be8:	str	r0, [sp, #4]
   11bec:	str	r3, [sp]
   11bf0:	mov	r0, r6
   11bf4:	ldr	r3, [pc, #344]	; 11d54 <__assert_fail@plt+0xbc8>
   11bf8:	mov	r2, #7
   11bfc:	mov	r1, #1
   11c00:	bl	1109c <__sprintf_chk@plt>
   11c04:	b	11a80 <__assert_fail@plt+0x8f4>
   11c08:	add	ip, sp, #56	; 0x38
   11c0c:	mov	r0, ip
   11c10:	add	r8, r4, #8
   11c14:	add	r1, r4, #40	; 0x28
   11c18:	b	11964 <__assert_fail@plt+0x7d8>
   11c1c:	mov	sl, r9
   11c20:	ldr	r5, [pc, #284]	; 11d44 <__assert_fail@plt+0xbb8>
   11c24:	b	11b00 <__assert_fail@plt+0x974>
   11c28:	mov	r3, #1
   11c2c:	ldr	r0, [r5, #60]	; 0x3c
   11c30:	str	r3, [r5, #56]	; 0x38
   11c34:	bl	129dc <__assert_fail@plt+0x1850>
   11c38:	ldr	r0, [r5, #56]	; 0x38
   11c3c:	bl	15190 <__assert_fail@plt+0x4004>
   11c40:	mov	r2, r0
   11c44:	str	r0, [r5, #60]	; 0x3c
   11c48:	b	11b80 <__assert_fail@plt+0x9f4>
   11c4c:	ldrb	r3, [sp, #204]	; 0xcc
   11c50:	cmp	r3, #0
   11c54:	beq	11cac <__assert_fail@plt+0xb20>
   11c58:	ldr	r5, [pc, #228]	; 11d44 <__assert_fail@plt+0xbb8>
   11c5c:	ldrb	r3, [r5, #54]	; 0x36
   11c60:	cmp	r3, #0
   11c64:	moveq	sl, r9
   11c68:	beq	11cb4 <__assert_fail@plt+0xb28>
   11c6c:	str	r0, [sp, #24]
   11c70:	mov	r0, r9
   11c74:	bl	128bc <__assert_fail@plt+0x1730>
   11c78:	cmp	r0, #0
   11c7c:	movne	sl, r0
   11c80:	moveq	sl, r9
   11c84:	b	11b00 <__assert_fail@plt+0x974>
   11c88:	add	r0, r9, #4
   11c8c:	bl	10f1c <time@plt>
   11c90:	b	119d0 <__assert_fail@plt+0x844>
   11c94:	str	r3, [r5, #56]	; 0x38
   11c98:	bl	129dc <__assert_fail@plt+0x1850>
   11c9c:	ldr	r0, [r5, #56]	; 0x38
   11ca0:	bl	15190 <__assert_fail@plt+0x4004>
   11ca4:	str	r0, [r5, #60]	; 0x3c
   11ca8:	b	11b3c <__assert_fail@plt+0x9b0>
   11cac:	ldr	r5, [pc, #144]	; 11d44 <__assert_fail@plt+0xbb8>
   11cb0:	mov	sl, r9
   11cb4:	mov	r0, sl
   11cb8:	bl	11078 <strlen@plt>
   11cbc:	ldr	r2, [r5, #56]	; 0x38
   11cc0:	add	r3, r0, #3
   11cc4:	cmp	r3, r2
   11cc8:	ldr	r0, [r5, #60]	; 0x3c
   11ccc:	bhi	11cf0 <__assert_fail@plt+0xb64>
   11cd0:	str	sl, [sp]
   11cd4:	ldr	r3, [pc, #124]	; 11d58 <__assert_fail@plt+0xbcc>
   11cd8:	mvn	r2, #0
   11cdc:	mov	r1, #1
   11ce0:	bl	1109c <__sprintf_chk@plt>
   11ce4:	b	11b58 <__assert_fail@plt+0x9cc>
   11ce8:	ldr	r0, [pc, #108]	; 11d5c <__assert_fail@plt+0xbd0>
   11cec:	b	11be0 <__assert_fail@plt+0xa54>
   11cf0:	str	r3, [r5, #56]	; 0x38
   11cf4:	bl	129dc <__assert_fail@plt+0x1850>
   11cf8:	ldr	r0, [r5, #56]	; 0x38
   11cfc:	bl	15190 <__assert_fail@plt+0x4004>
   11d00:	str	r0, [r5, #60]	; 0x3c
   11d04:	b	11cd0 <__assert_fail@plt+0xb44>
   11d08:	ldr	r3, [pc, #80]	; 11d60 <__assert_fail@plt+0xbd4>
   11d0c:	mov	r2, #205	; 0xcd
   11d10:	ldr	r1, [pc, #76]	; 11d64 <__assert_fail@plt+0xbd8>
   11d14:	ldr	r0, [pc, #76]	; 11d68 <__assert_fail@plt+0xbdc>
   11d18:	bl	1118c <__assert_fail@plt>
   11d1c:	andeq	r6, r1, ip, ror #6
   11d20:	andeq	r6, r1, r0, ror r3
   11d24:	andeq	r8, r2, r8, lsl r1
   11d28:			; <UNDEFINED> instruction: 0xfffeae81
   11d2c:	andeq	r5, r1, pc, ror r1
   11d30:			; <UNDEFINED> instruction: 0x91a2b3c5
   11d34:	stmhi	r8, {r0, r3, r7, fp, pc}
   11d38:	andeq	r6, r1, r4, lsr #7
   11d3c:			; <UNDEFINED> instruction: 0x000281b4
   11d40:	eorseq	r2, pc, r0, lsr #32
   11d44:	andeq	r8, r2, r4, lsl #3
   11d48:	andeq	r6, r1, r0, asr #7
   11d4c:	andeq	r6, r1, r0, lsr r9
   11d50:			; <UNDEFINED> instruction: 0x000163b0
   11d54:			; <UNDEFINED> instruction: 0x000163b8
   11d58:	andeq	r6, r1, r8, asr #7
   11d5c:	andeq	r6, r1, r4, ror #6
   11d60:			; <UNDEFINED> instruction: 0x000161b8
   11d64:	andeq	r6, r1, r8, ror r3
   11d68:	andeq	r6, r1, r4, lsl #7
   11d6c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   11d70:	sub	sp, sp, #68	; 0x44
   11d74:	mov	r3, r1
   11d78:	add	r2, sp, #48	; 0x30
   11d7c:	add	r1, sp, #44	; 0x2c
   11d80:	mov	r4, r0
   11d84:	bl	14aac <__assert_fail@plt+0x3920>
   11d88:	subs	r1, r0, #0
   11d8c:	bne	12408 <__assert_fail@plt+0x127c>
   11d90:	ldr	sl, [pc, #1692]	; 12434 <__assert_fail@plt+0x12a8>
   11d94:	ldrb	r6, [sl, #64]	; 0x40
   11d98:	cmp	r6, #0
   11d9c:	bne	11fb8 <__assert_fail@plt+0xe2c>
   11da0:	ldrb	r2, [sl, #65]	; 0x41
   11da4:	ldr	r5, [sp, #44]	; 0x2c
   11da8:	ldr	r4, [sp, #48]	; 0x30
   11dac:	cmp	r2, #0
   11db0:	bne	122c0 <__assert_fail@plt+0x1134>
   11db4:	ldrb	r3, [sl, #66]	; 0x42
   11db8:	cmp	r3, #0
   11dbc:	moveq	r9, r3
   11dc0:	bne	12298 <__assert_fail@plt+0x110c>
   11dc4:	cmp	r5, #0
   11dc8:	sub	r5, r5, #1
   11dcc:	beq	12028 <__assert_fail@plt+0xe9c>
   11dd0:	mov	r3, #-2147483648	; 0x80000000
   11dd4:	add	r6, r4, #384	; 0x180
   11dd8:	ldr	fp, [pc, #1624]	; 12438 <__assert_fail@plt+0x12ac>
   11ddc:	add	r4, r4, #8
   11de0:	str	r3, [sp, #28]
   11de4:	b	11e24 <__assert_fail@plt+0xc98>
   11de8:	mov	r2, #32
   11dec:	mov	r1, r4
   11df0:	mov	r0, r9
   11df4:	bl	11168 <strncmp@plt>
   11df8:	cmp	r0, #0
   11dfc:	beq	11e34 <__assert_fail@plt+0xca8>
   11e00:	ldrsh	r3, [r4, #-8]
   11e04:	cmp	r3, #2
   11e08:	sub	r5, r5, #1
   11e0c:	ldreq	r3, [r6, #-44]	; 0xffffffd4
   11e10:	add	r4, r4, #384	; 0x180
   11e14:	streq	r3, [sp, #28]
   11e18:	cmn	r5, #1
   11e1c:	add	r6, r6, #384	; 0x180
   11e20:	beq	12028 <__assert_fail@plt+0xe9c>
   11e24:	ldrb	r3, [sl, #66]	; 0x42
   11e28:	sub	r7, r6, #384	; 0x180
   11e2c:	cmp	r3, #0
   11e30:	bne	11de8 <__assert_fail@plt+0xc5c>
   11e34:	ldrb	r3, [sl, #67]	; 0x43
   11e38:	cmp	r3, #0
   11e3c:	beq	11fb0 <__assert_fail@plt+0xe24>
   11e40:	ldrb	r3, [r4, #36]	; 0x24
   11e44:	cmp	r3, #0
   11e48:	ldrsh	r3, [r4, #-8]
   11e4c:	beq	11e58 <__assert_fail@plt+0xccc>
   11e50:	cmp	r3, #7
   11e54:	beq	12370 <__assert_fail@plt+0x11e4>
   11e58:	ldrb	r2, [sl, #68]	; 0x44
   11e5c:	cmp	r2, #0
   11e60:	beq	11e6c <__assert_fail@plt+0xce0>
   11e64:	cmp	r3, #1
   11e68:	beq	12088 <__assert_fail@plt+0xefc>
   11e6c:	ldrb	r2, [sl, #80]	; 0x50
   11e70:	cmp	r2, #0
   11e74:	beq	11e88 <__assert_fail@plt+0xcfc>
   11e78:	cmp	r3, #2
   11e7c:	moveq	r2, #5
   11e80:	ldreq	r1, [pc, #1460]	; 1243c <__assert_fail@plt+0x12b0>
   11e84:	beq	12040 <__assert_fail@plt+0xeb4>
   11e88:	ldrb	r2, [sl, #81]	; 0x51
   11e8c:	cmp	r2, #0
   11e90:	beq	11e9c <__assert_fail@plt+0xd10>
   11e94:	cmp	r3, #3
   11e98:	beq	12038 <__assert_fail@plt+0xeac>
   11e9c:	ldrb	r2, [sl, #82]	; 0x52
   11ea0:	cmp	r2, #0
   11ea4:	beq	11eb0 <__assert_fail@plt+0xd24>
   11ea8:	cmp	r3, #5
   11eac:	beq	121bc <__assert_fail@plt+0x1030>
   11eb0:	ldrb	r2, [sl, #83]	; 0x53
   11eb4:	cmp	r2, #0
   11eb8:	beq	11ec4 <__assert_fail@plt+0xd38>
   11ebc:	cmp	r3, #6
   11ec0:	beq	1222c <__assert_fail@plt+0x10a0>
   11ec4:	ldrb	r2, [sl, #84]	; 0x54
   11ec8:	cmp	r2, #0
   11ecc:	beq	11e04 <__assert_fail@plt+0xc78>
   11ed0:	cmp	r3, #8
   11ed4:	bne	11e04 <__assert_fail@plt+0xc78>
   11ed8:	mov	r0, r7
   11edc:	bl	1180c <__assert_fail@plt+0x680>
   11ee0:	ldr	r2, [r4, #-4]
   11ee4:	ldr	r3, [pc, #1364]	; 12440 <__assert_fail@plt+0x12b4>
   11ee8:	str	r2, [sp]
   11eec:	mov	r1, #1
   11ef0:	mov	r2, #12
   11ef4:	mov	r8, r0
   11ef8:	add	r0, sp, #52	; 0x34
   11efc:	bl	1109c <__sprintf_chk@plt>
   11f00:	ldr	r7, [sl, #88]	; 0x58
   11f04:	cmp	r7, #0
   11f08:	beq	12384 <__assert_fail@plt+0x11f8>
   11f0c:	ldr	r3, [sl, #88]	; 0x58
   11f10:	mov	r2, #5
   11f14:	ldr	r1, [pc, #1320]	; 12444 <__assert_fail@plt+0x12b8>
   11f18:	mov	r0, #0
   11f1c:	str	r3, [sp, #32]
   11f20:	bl	10f4c <dcgettext@plt>
   11f24:	mov	r2, #5
   11f28:	ldr	r1, [pc, #1304]	; 12448 <__assert_fail@plt+0x12bc>
   11f2c:	ldrsh	r7, [r6, #-52]	; 0xffffffcc
   11f30:	str	r0, [sp, #36]	; 0x24
   11f34:	mov	r0, #0
   11f38:	bl	10f4c <dcgettext@plt>
   11f3c:	ldrsh	r2, [r6, #-50]	; 0xffffffce
   11f40:	ldr	r1, [sp, #36]	; 0x24
   11f44:	ldr	r3, [pc, #1280]	; 1244c <__assert_fail@plt+0x12c0>
   11f48:	str	r1, [sp]
   11f4c:	str	r2, [sp, #12]
   11f50:	mov	r1, #1
   11f54:	mvn	r2, #0
   11f58:	str	r7, [sp, #4]
   11f5c:	str	r0, [sp, #8]
   11f60:	ldr	r0, [sp, #32]
   11f64:	bl	1109c <__sprintf_chk@plt>
   11f68:	ldr	r0, [r6, #-44]	; 0xffffffd4
   11f6c:	bl	118a0 <__assert_fail@plt+0x714>
   11f70:	ldr	r2, [sl, #88]	; 0x58
   11f74:	mov	r3, #32
   11f78:	add	r1, sp, #52	; 0x34
   11f7c:	str	r1, [sp, #12]
   11f80:	str	r2, [sp, #20]
   11f84:	str	r8, [sp, #16]
   11f88:	str	fp, [sp, #8]
   11f8c:	str	r4, [sp]
   11f90:	mov	r2, r3
   11f94:	ldr	r1, [pc, #1180]	; 12438 <__assert_fail@plt+0x12ac>
   11f98:	str	r0, [sp, #4]
   11f9c:	mvn	r0, #0
   11fa0:	bl	11608 <__assert_fail@plt+0x47c>
   11fa4:	mov	r0, r8
   11fa8:	bl	129dc <__assert_fail@plt+0x1850>
   11fac:	b	11e00 <__assert_fail@plt+0xc74>
   11fb0:	ldrsh	r3, [r4, #-8]
   11fb4:	b	11e58 <__assert_fail@plt+0xccc>
   11fb8:	ldr	r6, [sp, #44]	; 0x2c
   11fbc:	ldr	r4, [sp, #48]	; 0x30
   11fc0:	cmp	r6, #0
   11fc4:	sub	r5, r6, #1
   11fc8:	beq	12008 <__assert_fail@plt+0xe7c>
   11fcc:	ldr	sl, [pc, #1124]	; 12438 <__assert_fail@plt+0x12ac>
   11fd0:	ldr	r8, [pc, #1144]	; 12450 <__assert_fail@plt+0x12c4>
   11fd4:	ldr	r7, [pc, #1144]	; 12454 <__assert_fail@plt+0x12c8>
   11fd8:	mov	r6, r1
   11fdc:	mov	r9, #1
   11fe0:	ldrb	r3, [r4, #44]	; 0x2c
   11fe4:	cmp	r3, #0
   11fe8:	beq	11ff8 <__assert_fail@plt+0xe6c>
   11fec:	ldrsh	r3, [r4]
   11ff0:	cmp	r3, #7
   11ff4:	beq	12188 <__assert_fail@plt+0xffc>
   11ff8:	sub	r5, r5, #1
   11ffc:	cmn	r5, #1
   12000:	add	r4, r4, #384	; 0x180
   12004:	bne	11fe0 <__assert_fail@plt+0xe54>
   12008:	mov	r2, #5
   1200c:	ldr	r1, [pc, #1092]	; 12458 <__assert_fail@plt+0x12cc>
   12010:	mov	r0, #0
   12014:	bl	10f4c <dcgettext@plt>
   12018:	mov	r2, r6
   1201c:	mov	r1, r0
   12020:	mov	r0, #1
   12024:	bl	110cc <__printf_chk@plt>
   12028:	ldr	r0, [sp, #48]	; 0x30
   1202c:	bl	129dc <__assert_fail@plt+0x1850>
   12030:	add	sp, sp, #68	; 0x44
   12034:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12038:	ldr	r1, [pc, #1052]	; 1245c <__assert_fail@plt+0x12d0>
   1203c:	mov	r2, #5
   12040:	mov	r0, #0
   12044:	bl	10f4c <dcgettext@plt>
   12048:	mov	r7, r0
   1204c:	ldr	r0, [r6, #-44]	; 0xffffffd4
   12050:	bl	118a0 <__assert_fail@plt+0x714>
   12054:	mvn	r3, #0
   12058:	str	r7, [sp]
   1205c:	str	fp, [sp, #20]
   12060:	str	fp, [sp, #16]
   12064:	str	fp, [sp, #12]
   12068:	str	fp, [sp, #8]
   1206c:	mov	r2, #32
   12070:	ldr	r1, [pc, #960]	; 12438 <__assert_fail@plt+0x12ac>
   12074:	str	r0, [sp, #4]
   12078:	mov	r0, r3
   1207c:	bl	11608 <__assert_fail@plt+0x47c>
   12080:	ldrsh	r3, [r4, #-8]
   12084:	b	11e04 <__assert_fail@plt+0xc78>
   12088:	ldr	r3, [r4, #-4]
   1208c:	ldr	r0, [sl, #72]	; 0x48
   12090:	cmp	r3, #0
   12094:	add	r7, r3, #255	; 0xff
   12098:	movge	r7, r3
   1209c:	rsbs	r2, r3, #0
   120a0:	asr	r7, r7, #8
   120a4:	uxtb	r2, r2
   120a8:	uxtb	r8, r3
   120ac:	rsbpl	r8, r2, #0
   120b0:	cmp	r0, #0
   120b4:	uxtb	r7, r7
   120b8:	beq	123c8 <__assert_fail@plt+0x123c>
   120bc:	ldr	r3, [sl, #72]	; 0x48
   120c0:	mov	r2, #5
   120c4:	ldr	r1, [pc, #916]	; 12460 <__assert_fail@plt+0x12d4>
   120c8:	mov	r0, #0
   120cc:	str	r3, [sp, #32]
   120d0:	bl	10f4c <dcgettext@plt>
   120d4:	uxtb	r3, r8
   120d8:	str	r3, [sp, #4]
   120dc:	mvn	r2, #0
   120e0:	ldr	r3, [pc, #892]	; 12464 <__assert_fail@plt+0x12d8>
   120e4:	mov	r1, #1
   120e8:	str	r0, [sp]
   120ec:	ldr	r0, [sp, #32]
   120f0:	bl	1109c <__sprintf_chk@plt>
   120f4:	ldr	r0, [sl, #76]	; 0x4c
   120f8:	cmp	r0, #0
   120fc:	beq	123e8 <__assert_fail@plt+0x125c>
   12100:	mov	r2, #5
   12104:	ldr	r1, [pc, #860]	; 12468 <__assert_fail@plt+0x12dc>
   12108:	mov	r0, #0
   1210c:	ldr	r8, [sl, #76]	; 0x4c
   12110:	bl	10f4c <dcgettext@plt>
   12114:	cmp	r7, #78	; 0x4e
   12118:	movne	r3, r7
   1211c:	moveq	r3, #83	; 0x53
   12120:	mvn	r2, #0
   12124:	mov	r1, #1
   12128:	sub	r7, r7, #32
   1212c:	str	r3, [sp, #4]
   12130:	str	r0, [sp]
   12134:	ldr	r3, [pc, #816]	; 1246c <__assert_fail@plt+0x12e0>
   12138:	mov	r0, r8
   1213c:	bl	1109c <__sprintf_chk@plt>
   12140:	ldr	r0, [r6, #-44]	; 0xffffffd4
   12144:	ldr	r8, [sl, #72]	; 0x48
   12148:	bl	118a0 <__assert_fail@plt+0x714>
   1214c:	cmp	r7, #94	; 0x5e
   12150:	mvn	r3, #0
   12154:	ldrls	r2, [sl, #76]	; 0x4c
   12158:	ldrhi	r2, [pc, #728]	; 12438 <__assert_fail@plt+0x12ac>
   1215c:	str	fp, [sp, #20]
   12160:	str	fp, [sp, #12]
   12164:	str	r8, [sp]
   12168:	mov	r1, fp
   1216c:	str	r2, [sp, #16]
   12170:	stmib	sp, {r0, fp}
   12174:	mov	r2, #32
   12178:	mov	r0, r3
   1217c:	bl	11608 <__assert_fail@plt+0x47c>
   12180:	ldrsh	r3, [r4, #-8]
   12184:	b	11e04 <__assert_fail@plt+0xc78>
   12188:	mov	r0, r4
   1218c:	bl	14a38 <__assert_fail@plt+0x38ac>
   12190:	mov	r2, sl
   12194:	mov	r1, r8
   12198:	add	r6, r6, #1
   1219c:	mov	sl, r7
   121a0:	mov	r3, r0
   121a4:	mov	fp, r0
   121a8:	mov	r0, r9
   121ac:	bl	110cc <__printf_chk@plt>
   121b0:	mov	r0, fp
   121b4:	bl	129dc <__assert_fail@plt+0x1850>
   121b8:	b	11ff8 <__assert_fail@plt+0xe6c>
   121bc:	mov	r0, r7
   121c0:	bl	1180c <__assert_fail@plt+0x680>
   121c4:	ldr	r2, [r4, #-4]
   121c8:	ldr	r3, [pc, #624]	; 12440 <__assert_fail@plt+0x12b4>
   121cc:	mov	r1, #1
   121d0:	str	r2, [sp]
   121d4:	mov	r2, #12
   121d8:	mov	r7, r0
   121dc:	add	r0, sp, #52	; 0x34
   121e0:	bl	1109c <__sprintf_chk@plt>
   121e4:	ldr	r0, [r6, #-44]	; 0xffffffd4
   121e8:	bl	118a0 <__assert_fail@plt+0x714>
   121ec:	add	r2, sp, #52	; 0x34
   121f0:	mov	r3, #32
   121f4:	ldr	r1, [pc, #572]	; 12438 <__assert_fail@plt+0x12ac>
   121f8:	str	r2, [sp, #12]
   121fc:	mov	r2, r3
   12200:	str	r7, [sp, #16]
   12204:	str	fp, [sp, #20]
   12208:	str	fp, [sp, #8]
   1220c:	str	r4, [sp]
   12210:	str	r0, [sp, #4]
   12214:	mvn	r0, #0
   12218:	bl	11608 <__assert_fail@plt+0x47c>
   1221c:	mov	r0, r7
   12220:	bl	129dc <__assert_fail@plt+0x1850>
   12224:	ldrsh	r3, [r4, #-8]
   12228:	b	11e04 <__assert_fail@plt+0xc78>
   1222c:	mov	r0, r7
   12230:	bl	1180c <__assert_fail@plt+0x680>
   12234:	ldr	r2, [r4, #-4]
   12238:	ldr	r3, [pc, #512]	; 12440 <__assert_fail@plt+0x12b4>
   1223c:	str	r2, [sp]
   12240:	mov	r1, #1
   12244:	mov	r2, #12
   12248:	mov	r7, r0
   1224c:	add	r0, sp, #52	; 0x34
   12250:	bl	1109c <__sprintf_chk@plt>
   12254:	mov	r2, #5
   12258:	ldr	r1, [pc, #528]	; 12470 <__assert_fail@plt+0x12e4>
   1225c:	mov	r0, #0
   12260:	bl	10f4c <dcgettext@plt>
   12264:	mov	r8, r0
   12268:	ldr	r0, [r6, #-44]	; 0xffffffd4
   1226c:	bl	118a0 <__assert_fail@plt+0x714>
   12270:	add	r2, sp, #52	; 0x34
   12274:	mov	r3, #32
   12278:	str	r2, [sp, #12]
   1227c:	str	r7, [sp, #16]
   12280:	mov	r1, r8
   12284:	str	fp, [sp, #20]
   12288:	str	fp, [sp, #8]
   1228c:	str	r4, [sp]
   12290:	mov	r2, r3
   12294:	b	12210 <__assert_fail@plt+0x1084>
   12298:	mov	r0, #0
   1229c:	bl	1106c <ttyname@plt>
   122a0:	subs	r9, r0, #0
   122a4:	beq	12028 <__assert_fail@plt+0xe9c>
   122a8:	mov	r2, #5
   122ac:	ldr	r1, [pc, #448]	; 12474 <__assert_fail@plt+0x12e8>
   122b0:	bl	11168 <strncmp@plt>
   122b4:	cmp	r0, #0
   122b8:	addeq	r9, r9, #5
   122bc:	b	11dc4 <__assert_fail@plt+0xc38>
   122c0:	mov	r2, #5
   122c4:	ldr	r1, [pc, #428]	; 12478 <__assert_fail@plt+0x12ec>
   122c8:	bl	10f4c <dcgettext@plt>
   122cc:	mov	r2, #5
   122d0:	ldr	r1, [pc, #420]	; 1247c <__assert_fail@plt+0x12f0>
   122d4:	str	r0, [sp, #28]
   122d8:	mov	r0, r6
   122dc:	bl	10f4c <dcgettext@plt>
   122e0:	mov	r2, #5
   122e4:	ldr	r1, [pc, #404]	; 12480 <__assert_fail@plt+0x12f4>
   122e8:	mov	fp, r0
   122ec:	mov	r0, r6
   122f0:	bl	10f4c <dcgettext@plt>
   122f4:	mov	r2, #5
   122f8:	ldr	r1, [pc, #388]	; 12484 <__assert_fail@plt+0x12f8>
   122fc:	mov	r7, r0
   12300:	mov	r0, r6
   12304:	bl	10f4c <dcgettext@plt>
   12308:	mov	r2, #5
   1230c:	ldr	r1, [pc, #372]	; 12488 <__assert_fail@plt+0x12fc>
   12310:	mov	r8, r0
   12314:	mov	r0, r6
   12318:	bl	10f4c <dcgettext@plt>
   1231c:	mov	r2, #5
   12320:	ldr	r1, [pc, #356]	; 1248c <__assert_fail@plt+0x1300>
   12324:	mov	r9, r0
   12328:	mov	r0, r6
   1232c:	bl	10f4c <dcgettext@plt>
   12330:	mov	r2, #5
   12334:	ldr	r1, [pc, #340]	; 12490 <__assert_fail@plt+0x1304>
   12338:	str	r0, [sp, #32]
   1233c:	mov	r0, r6
   12340:	bl	10f4c <dcgettext@plt>
   12344:	ldr	r2, [sp, #32]
   12348:	mvn	r3, #0
   1234c:	str	r2, [sp, #16]
   12350:	str	fp, [sp]
   12354:	stmib	sp, {r7, r8, r9}
   12358:	mov	r2, #32
   1235c:	ldr	r1, [sp, #28]
   12360:	str	r0, [sp, #20]
   12364:	mov	r0, r3
   12368:	bl	11608 <__assert_fail@plt+0x47c>
   1236c:	b	11db4 <__assert_fail@plt+0xc28>
   12370:	mov	r0, r7
   12374:	ldr	r1, [sp, #28]
   12378:	bl	11900 <__assert_fail@plt+0x774>
   1237c:	ldrsh	r3, [r4, #-8]
   12380:	b	11e04 <__assert_fail@plt+0xc78>
   12384:	mov	r2, #5
   12388:	ldr	r1, [pc, #180]	; 12444 <__assert_fail@plt+0x12b8>
   1238c:	mov	r0, r7
   12390:	bl	10f4c <dcgettext@plt>
   12394:	bl	11078 <strlen@plt>
   12398:	mov	r2, #5
   1239c:	ldr	r1, [pc, #164]	; 12448 <__assert_fail@plt+0x12bc>
   123a0:	str	r0, [sp, #32]
   123a4:	mov	r0, r7
   123a8:	bl	10f4c <dcgettext@plt>
   123ac:	bl	11078 <strlen@plt>
   123b0:	ldr	r3, [sp, #32]
   123b4:	add	r0, r3, r0
   123b8:	add	r0, r0, #14
   123bc:	bl	15190 <__assert_fail@plt+0x4004>
   123c0:	str	r0, [sl, #88]	; 0x58
   123c4:	b	11f0c <__assert_fail@plt+0xd80>
   123c8:	mov	r2, #5
   123cc:	ldr	r1, [pc, #140]	; 12460 <__assert_fail@plt+0x12d4>
   123d0:	bl	10f4c <dcgettext@plt>
   123d4:	bl	11078 <strlen@plt>
   123d8:	add	r0, r0, #3
   123dc:	bl	15190 <__assert_fail@plt+0x4004>
   123e0:	str	r0, [sl, #72]	; 0x48
   123e4:	b	120bc <__assert_fail@plt+0xf30>
   123e8:	mov	r2, #5
   123ec:	ldr	r1, [pc, #116]	; 12468 <__assert_fail@plt+0x12dc>
   123f0:	bl	10f4c <dcgettext@plt>
   123f4:	bl	11078 <strlen@plt>
   123f8:	add	r0, r0, #2
   123fc:	bl	15190 <__assert_fail@plt+0x4004>
   12400:	str	r0, [sl, #76]	; 0x4c
   12404:	b	12100 <__assert_fail@plt+0xf74>
   12408:	bl	11090 <__errno_location@plt>
   1240c:	mov	r2, r4
   12410:	mov	r1, #3
   12414:	ldr	r4, [r0]
   12418:	mov	r0, #0
   1241c:	bl	1489c <__assert_fail@plt+0x3710>
   12420:	mov	r1, r4
   12424:	ldr	r2, [pc, #104]	; 12494 <__assert_fail@plt+0x1308>
   12428:	mov	r3, r0
   1242c:	mov	r0, #1
   12430:	bl	10fd0 <error@plt>
   12434:	andeq	r8, r2, r4, lsl #3
   12438:	andeq	r6, r1, r0, lsr r9
   1243c:	andeq	r6, r1, r0, asr #8
   12440:	andeq	r6, r1, ip, ror #6
   12444:	andeq	r6, r1, r4, ror #8
   12448:	andeq	r6, r1, ip, ror #8
   1244c:	andeq	r6, r1, r4, ror r4
   12450:	ldrdeq	r6, [r1], -r0
   12454:	andeq	r6, r1, r8, ror #6
   12458:	ldrdeq	r6, [r1], -r8
   1245c:	andeq	r6, r1, ip, asr #8
   12460:	andeq	r6, r1, ip, lsl r4
   12464:	andeq	r6, r1, r8, lsr #8
   12468:	andeq	r6, r1, r0, lsr r4
   1246c:	andeq	r6, r1, r8, lsr r4
   12470:	andeq	r6, r1, ip, asr r4
   12474:	andeq	r6, r1, r0, ror r3
   12478:	andeq	r6, r1, r8, ror #7
   1247c:	strdeq	r6, [r1], -r0
   12480:	strdeq	r6, [r1], -r8
   12484:	andeq	r6, r1, r0, lsl #8
   12488:	andeq	r6, r1, r8, lsl #8
   1248c:	andeq	r6, r1, ip, lsl #8
   12490:	andeq	r6, r1, r4, lsl r4
   12494:	andeq	r6, r1, r4, ror #23
   12498:	subs	r5, r0, #0
   1249c:	push	{r7, lr}
   124a0:	sub	sp, sp, #56	; 0x38
   124a4:	beq	124e0 <__assert_fail@plt+0x1354>
   124a8:	ldr	r3, [pc, #768]	; 127b0 <__assert_fail@plt+0x1624>
   124ac:	mov	r2, #5
   124b0:	ldr	r1, [pc, #764]	; 127b4 <__assert_fail@plt+0x1628>
   124b4:	mov	r0, #0
   124b8:	ldr	r4, [r3]
   124bc:	bl	10f4c <dcgettext@plt>
   124c0:	ldr	r3, [pc, #752]	; 127b8 <__assert_fail@plt+0x162c>
   124c4:	mov	r1, #1
   124c8:	ldr	r3, [r3]
   124cc:	mov	r2, r0
   124d0:	mov	r0, r4
   124d4:	bl	110e4 <__fprintf_chk@plt>
   124d8:	mov	r0, r5
   124dc:	bl	11060 <exit@plt>
   124e0:	mov	r2, #5
   124e4:	ldr	r1, [pc, #720]	; 127bc <__assert_fail@plt+0x1630>
   124e8:	bl	10f4c <dcgettext@plt>
   124ec:	ldr	r3, [pc, #708]	; 127b8 <__assert_fail@plt+0x162c>
   124f0:	ldr	r7, [pc, #712]	; 127c0 <__assert_fail@plt+0x1634>
   124f4:	ldr	r4, [pc, #712]	; 127c4 <__assert_fail@plt+0x1638>
   124f8:	ldr	r2, [r3]
   124fc:	mov	r1, r0
   12500:	mov	r0, #1
   12504:	bl	110cc <__printf_chk@plt>
   12508:	mov	r2, #5
   1250c:	ldr	r1, [pc, #692]	; 127c8 <__assert_fail@plt+0x163c>
   12510:	mov	r0, r5
   12514:	bl	10f4c <dcgettext@plt>
   12518:	ldr	r1, [r7]
   1251c:	bl	10ea4 <fputs_unlocked@plt>
   12520:	mov	r2, #5
   12524:	ldr	r1, [pc, #672]	; 127cc <__assert_fail@plt+0x1640>
   12528:	mov	r0, r5
   1252c:	bl	10f4c <dcgettext@plt>
   12530:	ldr	r1, [r7]
   12534:	bl	10ea4 <fputs_unlocked@plt>
   12538:	mov	r2, #5
   1253c:	ldr	r1, [pc, #652]	; 127d0 <__assert_fail@plt+0x1644>
   12540:	mov	r0, r5
   12544:	bl	10f4c <dcgettext@plt>
   12548:	ldr	r1, [r7]
   1254c:	bl	10ea4 <fputs_unlocked@plt>
   12550:	mov	r2, #5
   12554:	ldr	r1, [pc, #632]	; 127d4 <__assert_fail@plt+0x1648>
   12558:	mov	r0, r5
   1255c:	bl	10f4c <dcgettext@plt>
   12560:	ldr	r1, [r7]
   12564:	bl	10ea4 <fputs_unlocked@plt>
   12568:	mov	r2, #5
   1256c:	ldr	r1, [pc, #612]	; 127d8 <__assert_fail@plt+0x164c>
   12570:	mov	r0, r5
   12574:	bl	10f4c <dcgettext@plt>
   12578:	ldr	r1, [r7]
   1257c:	bl	10ea4 <fputs_unlocked@plt>
   12580:	mov	r2, #5
   12584:	ldr	r1, [pc, #592]	; 127dc <__assert_fail@plt+0x1650>
   12588:	mov	r0, r5
   1258c:	bl	10f4c <dcgettext@plt>
   12590:	ldr	r1, [r7]
   12594:	bl	10ea4 <fputs_unlocked@plt>
   12598:	mov	r2, #5
   1259c:	ldr	r1, [pc, #572]	; 127e0 <__assert_fail@plt+0x1654>
   125a0:	mov	r0, r5
   125a4:	bl	10f4c <dcgettext@plt>
   125a8:	ldr	r1, [r7]
   125ac:	bl	10ea4 <fputs_unlocked@plt>
   125b0:	mov	r2, #5
   125b4:	ldr	r1, [pc, #552]	; 127e4 <__assert_fail@plt+0x1658>
   125b8:	mov	r0, r5
   125bc:	bl	10f4c <dcgettext@plt>
   125c0:	ldr	r1, [r7]
   125c4:	bl	10ea4 <fputs_unlocked@plt>
   125c8:	mov	r2, #5
   125cc:	ldr	r1, [pc, #532]	; 127e8 <__assert_fail@plt+0x165c>
   125d0:	mov	r0, r5
   125d4:	bl	10f4c <dcgettext@plt>
   125d8:	ldr	r3, [pc, #524]	; 127ec <__assert_fail@plt+0x1660>
   125dc:	ldr	r2, [pc, #524]	; 127f0 <__assert_fail@plt+0x1664>
   125e0:	mov	r1, r0
   125e4:	mov	r0, #1
   125e8:	bl	110cc <__printf_chk@plt>
   125ec:	ldm	r4!, {r0, r1, r2, r3}
   125f0:	mov	lr, sp
   125f4:	stmia	lr!, {r0, r1, r2, r3}
   125f8:	ldm	r4!, {r0, r1, r2, r3}
   125fc:	ldr	ip, [sp]
   12600:	stmia	lr!, {r0, r1, r2, r3}
   12604:	cmp	ip, #0
   12608:	ldm	r4!, {r0, r1, r2, r3}
   1260c:	stmia	lr!, {r0, r1, r2, r3}
   12610:	ldm	r4, {r0, r1}
   12614:	moveq	r4, sp
   12618:	stm	lr, {r0, r1}
   1261c:	beq	1264c <__assert_fail@plt+0x14c0>
   12620:	ldr	r6, [pc, #460]	; 127f4 <__assert_fail@plt+0x1668>
   12624:	mov	r4, sp
   12628:	b	12638 <__assert_fail@plt+0x14ac>
   1262c:	ldr	ip, [r4, #8]!
   12630:	cmp	ip, #0
   12634:	beq	1264c <__assert_fail@plt+0x14c0>
   12638:	mov	r1, ip
   1263c:	mov	r0, r6
   12640:	bl	10ebc <strcmp@plt>
   12644:	cmp	r0, #0
   12648:	bne	1262c <__assert_fail@plt+0x14a0>
   1264c:	ldr	r4, [r4, #4]
   12650:	mov	r2, #5
   12654:	cmp	r4, #0
   12658:	ldr	r1, [pc, #408]	; 127f8 <__assert_fail@plt+0x166c>
   1265c:	beq	12704 <__assert_fail@plt+0x1578>
   12660:	mov	r0, #0
   12664:	bl	10f4c <dcgettext@plt>
   12668:	ldr	r3, [pc, #396]	; 127fc <__assert_fail@plt+0x1670>
   1266c:	ldr	r2, [pc, #396]	; 12800 <__assert_fail@plt+0x1674>
   12670:	mov	r1, r0
   12674:	mov	r0, #1
   12678:	bl	110cc <__printf_chk@plt>
   1267c:	mov	r1, #0
   12680:	mov	r0, #5
   12684:	bl	11114 <setlocale@plt>
   12688:	cmp	r0, #0
   1268c:	ldreq	r6, [pc, #352]	; 127f4 <__assert_fail@plt+0x1668>
   12690:	beq	126ac <__assert_fail@plt+0x1520>
   12694:	mov	r2, #3
   12698:	ldr	r1, [pc, #356]	; 12804 <__assert_fail@plt+0x1678>
   1269c:	bl	11168 <strncmp@plt>
   126a0:	ldr	r6, [pc, #332]	; 127f4 <__assert_fail@plt+0x1668>
   126a4:	cmp	r0, #0
   126a8:	bne	12794 <__assert_fail@plt+0x1608>
   126ac:	mov	r2, #5
   126b0:	ldr	r1, [pc, #336]	; 12808 <__assert_fail@plt+0x167c>
   126b4:	mov	r0, #0
   126b8:	bl	10f4c <dcgettext@plt>
   126bc:	ldr	r3, [pc, #304]	; 127f4 <__assert_fail@plt+0x1668>
   126c0:	ldr	r2, [pc, #308]	; 127fc <__assert_fail@plt+0x1670>
   126c4:	mov	r1, r0
   126c8:	mov	r0, #1
   126cc:	bl	110cc <__printf_chk@plt>
   126d0:	mov	r2, #5
   126d4:	ldr	r1, [pc, #304]	; 1280c <__assert_fail@plt+0x1680>
   126d8:	mov	r0, #0
   126dc:	bl	10f4c <dcgettext@plt>
   126e0:	ldr	r2, [pc, #296]	; 12810 <__assert_fail@plt+0x1684>
   126e4:	cmp	r4, r6
   126e8:	ldr	r3, [pc, #292]	; 12814 <__assert_fail@plt+0x1688>
   126ec:	movne	r3, r2
   126f0:	mov	r1, r0
   126f4:	mov	r2, r4
   126f8:	mov	r0, #1
   126fc:	bl	110cc <__printf_chk@plt>
   12700:	b	124d8 <__assert_fail@plt+0x134c>
   12704:	mov	r0, r4
   12708:	bl	10f4c <dcgettext@plt>
   1270c:	ldr	r3, [pc, #232]	; 127fc <__assert_fail@plt+0x1670>
   12710:	ldr	r2, [pc, #232]	; 12800 <__assert_fail@plt+0x1674>
   12714:	mov	r1, r0
   12718:	mov	r0, #1
   1271c:	bl	110cc <__printf_chk@plt>
   12720:	mov	r1, r4
   12724:	mov	r0, #5
   12728:	bl	11114 <setlocale@plt>
   1272c:	cmp	r0, #0
   12730:	beq	12748 <__assert_fail@plt+0x15bc>
   12734:	mov	r2, #3
   12738:	ldr	r1, [pc, #196]	; 12804 <__assert_fail@plt+0x1678>
   1273c:	bl	11168 <strncmp@plt>
   12740:	cmp	r0, #0
   12744:	bne	1278c <__assert_fail@plt+0x1600>
   12748:	mov	r2, #5
   1274c:	ldr	r1, [pc, #180]	; 12808 <__assert_fail@plt+0x167c>
   12750:	mov	r0, #0
   12754:	bl	10f4c <dcgettext@plt>
   12758:	ldr	r3, [pc, #148]	; 127f4 <__assert_fail@plt+0x1668>
   1275c:	ldr	r2, [pc, #152]	; 127fc <__assert_fail@plt+0x1670>
   12760:	mov	r4, r3
   12764:	mov	r1, r0
   12768:	mov	r0, #1
   1276c:	bl	110cc <__printf_chk@plt>
   12770:	ldr	r1, [pc, #148]	; 1280c <__assert_fail@plt+0x1680>
   12774:	mov	r2, #5
   12778:	mov	r0, #0
   1277c:	bl	10f4c <dcgettext@plt>
   12780:	ldr	r3, [pc, #140]	; 12814 <__assert_fail@plt+0x1688>
   12784:	mov	r1, r0
   12788:	b	126f4 <__assert_fail@plt+0x1568>
   1278c:	ldr	r6, [pc, #96]	; 127f4 <__assert_fail@plt+0x1668>
   12790:	mov	r4, r6
   12794:	mov	r2, #5
   12798:	ldr	r1, [pc, #120]	; 12818 <__assert_fail@plt+0x168c>
   1279c:	mov	r0, #0
   127a0:	bl	10f4c <dcgettext@plt>
   127a4:	ldr	r1, [r7]
   127a8:	bl	10ea4 <fputs_unlocked@plt>
   127ac:	b	126ac <__assert_fail@plt+0x1520>
   127b0:	andeq	r8, r2, r8, ror r1
   127b4:	andeq	r6, r1, r4, lsl #9
   127b8:	andeq	r8, r2, ip, lsl #4
   127bc:	andeq	r6, r1, ip, lsr #9
   127c0:	andeq	r8, r2, ip, ror r1
   127c4:	andeq	r6, r1, r4, asr #3
   127c8:	ldrdeq	r6, [r1], -r8
   127cc:	andeq	r6, r1, r4, lsl r5
   127d0:	ldrdeq	r6, [r1], -r8
   127d4:	andeq	r6, r1, ip, lsl #12
   127d8:	andeq	r6, r1, r8, asr #13
   127dc:	andeq	r6, r1, r8, lsr #15
   127e0:	andeq	r6, r1, ip, asr #16
   127e4:	andeq	r6, r1, ip, ror r8
   127e8:			; <UNDEFINED> instruction: 0x000168b4
   127ec:	andeq	r6, r1, r4, lsr r9
   127f0:	andeq	r6, r1, r4, asr #18
   127f4:	andeq	r6, r1, r0, lsl #9
   127f8:	andeq	r6, r1, r4, asr r9
   127fc:	andeq	r6, r1, ip, ror #18
   12800:	muleq	r1, r4, r9
   12804:	andeq	r6, r1, r4, lsr #19
   12808:	strdeq	r6, [r1], -r0
   1280c:	andeq	r6, r1, ip, lsl #20
   12810:	andeq	r6, r1, r0, lsr r9
   12814:	ldrdeq	r6, [r1], -r4
   12818:	andeq	r6, r1, r8, lsr #19
   1281c:	push	{r4, r5, r6, r7, lr}
   12820:	sub	sp, sp, #12
   12824:	ldr	ip, [pc, #140]	; 128b8 <__assert_fail@plt+0x172c>
   12828:	add	r3, sp, #8
   1282c:	mov	r4, #0
   12830:	mov	lr, #2
   12834:	mov	r5, r1
   12838:	str	r4, [r3, #-4]!
   1283c:	mov	r1, r4
   12840:	mov	r2, ip
   12844:	str	lr, [ip]
   12848:	mov	r7, r0
   1284c:	bl	11144 <getaddrinfo@plt>
   12850:	cmp	r0, #0
   12854:	bne	128a0 <__assert_fail@plt+0x1714>
   12858:	ldr	r6, [sp, #4]
   1285c:	ldr	r0, [r6, #24]
   12860:	cmp	r0, r4
   12864:	moveq	r0, r7
   12868:	bl	10f58 <strdup@plt>
   1286c:	cmp	r5, #0
   12870:	clz	r3, r0
   12874:	lsr	r3, r3, #5
   12878:	moveq	r3, #0
   1287c:	cmp	r3, #0
   12880:	mvnne	r3, #9
   12884:	mov	r4, r0
   12888:	strne	r3, [r5]
   1288c:	mov	r0, r6
   12890:	bl	11138 <freeaddrinfo@plt>
   12894:	mov	r0, r4
   12898:	add	sp, sp, #12
   1289c:	pop	{r4, r5, r6, r7, pc}
   128a0:	cmp	r5, #0
   128a4:	moveq	r4, r5
   128a8:	strne	r0, [r5]
   128ac:	mov	r0, r4
   128b0:	add	sp, sp, #12
   128b4:	pop	{r4, r5, r6, r7, pc}
   128b8:	andeq	r8, r2, r0, ror #3
   128bc:	ldr	r1, [pc]	; 128c4 <__assert_fail@plt+0x1738>
   128c0:	b	1281c <__assert_fail@plt+0x1690>
   128c4:	andeq	r8, r2, r0, lsl #4
   128c8:	ldr	r3, [pc, #4]	; 128d4 <__assert_fail@plt+0x1748>
   128cc:	ldr	r0, [r3, #32]
   128d0:	b	10eec <gai_strerror@plt>
   128d4:	andeq	r8, r2, r0, ror #3
   128d8:	ldr	r3, [pc, #4]	; 128e4 <__assert_fail@plt+0x1758>
   128dc:	str	r0, [r3]
   128e0:	bx	lr
   128e4:	andeq	r8, r2, r4, lsl #4
   128e8:	ldr	r3, [pc, #4]	; 128f4 <__assert_fail@plt+0x1768>
   128ec:	strb	r0, [r3, #4]
   128f0:	bx	lr
   128f4:	andeq	r8, r2, r4, lsl #4
   128f8:	ldr	r3, [pc, #192]	; 129c0 <__assert_fail@plt+0x1834>
   128fc:	push	{r4, r5, r6, lr}
   12900:	sub	sp, sp, #8
   12904:	ldr	r0, [r3]
   12908:	bl	157e8 <__assert_fail@plt+0x465c>
   1290c:	cmp	r0, #0
   12910:	beq	12934 <__assert_fail@plt+0x17a8>
   12914:	ldr	r4, [pc, #168]	; 129c4 <__assert_fail@plt+0x1838>
   12918:	ldrb	r3, [r4, #4]
   1291c:	cmp	r3, #0
   12920:	beq	12950 <__assert_fail@plt+0x17c4>
   12924:	bl	11090 <__errno_location@plt>
   12928:	ldr	r3, [r0]
   1292c:	cmp	r3, #32
   12930:	bne	12950 <__assert_fail@plt+0x17c4>
   12934:	ldr	r3, [pc, #140]	; 129c8 <__assert_fail@plt+0x183c>
   12938:	ldr	r0, [r3]
   1293c:	bl	157e8 <__assert_fail@plt+0x465c>
   12940:	cmp	r0, #0
   12944:	bne	12998 <__assert_fail@plt+0x180c>
   12948:	add	sp, sp, #8
   1294c:	pop	{r4, r5, r6, pc}
   12950:	mov	r2, #5
   12954:	ldr	r1, [pc, #112]	; 129cc <__assert_fail@plt+0x1840>
   12958:	mov	r0, #0
   1295c:	bl	10f4c <dcgettext@plt>
   12960:	ldr	r4, [r4]
   12964:	cmp	r4, #0
   12968:	mov	r5, r0
   1296c:	beq	129a4 <__assert_fail@plt+0x1818>
   12970:	bl	11090 <__errno_location@plt>
   12974:	ldr	r6, [r0]
   12978:	mov	r0, r4
   1297c:	bl	14888 <__assert_fail@plt+0x36fc>
   12980:	mov	r1, r6
   12984:	str	r5, [sp]
   12988:	ldr	r2, [pc, #64]	; 129d0 <__assert_fail@plt+0x1844>
   1298c:	mov	r3, r0
   12990:	mov	r0, #0
   12994:	bl	10fd0 <error@plt>
   12998:	ldr	r3, [pc, #52]	; 129d4 <__assert_fail@plt+0x1848>
   1299c:	ldr	r0, [r3]
   129a0:	bl	10ef8 <_exit@plt>
   129a4:	bl	11090 <__errno_location@plt>
   129a8:	mov	r3, r5
   129ac:	ldr	r2, [pc, #36]	; 129d8 <__assert_fail@plt+0x184c>
   129b0:	ldr	r1, [r0]
   129b4:	mov	r0, r4
   129b8:	bl	10fd0 <error@plt>
   129bc:	b	12998 <__assert_fail@plt+0x180c>
   129c0:	andeq	r8, r2, ip, ror r1
   129c4:	andeq	r8, r2, r4, lsl #4
   129c8:	andeq	r8, r2, r8, ror r1
   129cc:	ldrdeq	r6, [r1], -r4
   129d0:	andeq	r6, r1, r0, ror #23
   129d4:	andeq	r8, r2, r4, lsr #2
   129d8:	andeq	r6, r1, r4, ror #23
   129dc:	push	{r4, r5, lr}
   129e0:	sub	sp, sp, #12
   129e4:	mov	r5, r0
   129e8:	bl	11090 <__errno_location@plt>
   129ec:	mov	r2, #0
   129f0:	mov	r4, r0
   129f4:	ldr	r3, [r0]
   129f8:	str	r2, [r4]
   129fc:	mov	r0, r5
   12a00:	str	r3, [sp]
   12a04:	str	r3, [sp, #4]
   12a08:	bl	10ee0 <free@plt>
   12a0c:	ldr	r3, [r4]
   12a10:	add	r2, sp, #8
   12a14:	cmp	r3, #0
   12a18:	moveq	r3, #4
   12a1c:	movne	r3, #0
   12a20:	add	r3, r2, r3
   12a24:	ldr	r3, [r3, #-8]
   12a28:	str	r3, [r4]
   12a2c:	add	sp, sp, #12
   12a30:	pop	{r4, r5, pc}
   12a34:	push	{lr}		; (str lr, [sp, #-4]!)
   12a38:	sub	sp, sp, #268	; 0x10c
   12a3c:	add	r1, sp, #4
   12a40:	ldr	r2, [pc, #60]	; 12a84 <__assert_fail@plt+0x18f8>
   12a44:	bl	14bd8 <__assert_fail@plt+0x3a4c>
   12a48:	cmp	r0, #0
   12a4c:	movne	r0, #0
   12a50:	bne	12a7c <__assert_fail@plt+0x18f0>
   12a54:	ldr	r1, [pc, #44]	; 12a88 <__assert_fail@plt+0x18fc>
   12a58:	add	r0, sp, #4
   12a5c:	bl	10ebc <strcmp@plt>
   12a60:	cmp	r0, #0
   12a64:	beq	12a7c <__assert_fail@plt+0x18f0>
   12a68:	add	r0, sp, #4
   12a6c:	ldr	r1, [pc, #24]	; 12a8c <__assert_fail@plt+0x1900>
   12a70:	bl	10ebc <strcmp@plt>
   12a74:	adds	r0, r0, #0
   12a78:	movne	r0, #1
   12a7c:	add	sp, sp, #268	; 0x10c
   12a80:	pop	{pc}		; (ldr pc, [sp], #4)
   12a84:	andeq	r0, r0, r1, lsl #2
   12a88:	andeq	r6, r1, r8, ror #23
   12a8c:	andeq	r6, r1, ip, ror #23
   12a90:	cmp	r0, #0
   12a94:	sbcs	r3, r1, #0
   12a98:	mov	r3, #0
   12a9c:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   12aa0:	mov	r4, r0
   12aa4:	mov	r5, r1
   12aa8:	strb	r3, [r2, #20]
   12aac:	add	r6, r2, #20
   12ab0:	mov	r8, #10
   12ab4:	mov	r9, #0
   12ab8:	blt	12b08 <__assert_fail@plt+0x197c>
   12abc:	mov	r0, r4
   12ac0:	mov	r1, r5
   12ac4:	mov	r2, r8
   12ac8:	mov	r3, r9
   12acc:	bl	15f24 <__assert_fail@plt+0x4d98>
   12ad0:	mov	r0, r4
   12ad4:	mov	r1, r5
   12ad8:	mov	r3, r9
   12adc:	add	r2, r2, #48	; 0x30
   12ae0:	strb	r2, [r6, #-1]!
   12ae4:	mov	r2, r8
   12ae8:	bl	15f24 <__assert_fail@plt+0x4d98>
   12aec:	mov	r4, r0
   12af0:	mov	r5, r1
   12af4:	orrs	r3, r4, r5
   12af8:	bne	12abc <__assert_fail@plt+0x1930>
   12afc:	mov	r0, r6
   12b00:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   12b04:	mov	r6, r7
   12b08:	mov	r0, r4
   12b0c:	mov	r1, r5
   12b10:	mov	r2, r8
   12b14:	mov	r3, r9
   12b18:	bl	15f24 <__assert_fail@plt+0x4d98>
   12b1c:	mov	r0, r4
   12b20:	mov	r1, r5
   12b24:	mov	r3, r9
   12b28:	sub	r7, r6, #1
   12b2c:	rsb	r2, r2, #48	; 0x30
   12b30:	strb	r2, [r6, #-1]
   12b34:	mov	r2, r8
   12b38:	bl	15f24 <__assert_fail@plt+0x4d98>
   12b3c:	mov	r4, r0
   12b40:	mov	r5, r1
   12b44:	orrs	r3, r4, r5
   12b48:	bne	12b04 <__assert_fail@plt+0x1978>
   12b4c:	mov	r3, #45	; 0x2d
   12b50:	sub	r6, r6, #2
   12b54:	strb	r3, [r7, #-1]
   12b58:	mov	r0, r6
   12b5c:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   12b60:	push	{r4, r5, r6, lr}
   12b64:	subs	r4, r0, #0
   12b68:	beq	12bdc <__assert_fail@plt+0x1a50>
   12b6c:	mov	r1, #47	; 0x2f
   12b70:	bl	11120 <strrchr@plt>
   12b74:	subs	r5, r0, #0
   12b78:	beq	12bc8 <__assert_fail@plt+0x1a3c>
   12b7c:	add	r6, r5, #1
   12b80:	sub	r3, r6, r4
   12b84:	cmp	r3, #6
   12b88:	ble	12bc8 <__assert_fail@plt+0x1a3c>
   12b8c:	mov	r2, #7
   12b90:	ldr	r1, [pc, #96]	; 12bf8 <__assert_fail@plt+0x1a6c>
   12b94:	sub	r0, r5, #6
   12b98:	bl	11168 <strncmp@plt>
   12b9c:	cmp	r0, #0
   12ba0:	bne	12bc8 <__assert_fail@plt+0x1a3c>
   12ba4:	mov	r2, #3
   12ba8:	ldr	r1, [pc, #76]	; 12bfc <__assert_fail@plt+0x1a70>
   12bac:	mov	r0, r6
   12bb0:	bl	11168 <strncmp@plt>
   12bb4:	cmp	r0, #0
   12bb8:	movne	r4, r6
   12bbc:	ldreq	r3, [pc, #60]	; 12c00 <__assert_fail@plt+0x1a74>
   12bc0:	addeq	r4, r5, #4
   12bc4:	streq	r4, [r3]
   12bc8:	ldr	r2, [pc, #52]	; 12c04 <__assert_fail@plt+0x1a78>
   12bcc:	ldr	r3, [pc, #52]	; 12c08 <__assert_fail@plt+0x1a7c>
   12bd0:	str	r4, [r2]
   12bd4:	str	r4, [r3]
   12bd8:	pop	{r4, r5, r6, pc}
   12bdc:	ldr	r3, [pc, #40]	; 12c0c <__assert_fail@plt+0x1a80>
   12be0:	mov	r2, #55	; 0x37
   12be4:	mov	r1, #1
   12be8:	ldr	r3, [r3]
   12bec:	ldr	r0, [pc, #28]	; 12c10 <__assert_fail@plt+0x1a84>
   12bf0:	bl	10f94 <fwrite@plt>
   12bf4:	bl	11174 <abort@plt>
   12bf8:	andeq	r6, r1, ip, lsr #24
   12bfc:	andeq	r6, r1, r4, lsr ip
   12c00:	andeq	r8, r2, r8, ror #2
   12c04:	andeq	r8, r2, ip, lsl #4
   12c08:	andeq	r8, r2, ip, ror #2
   12c0c:	andeq	r8, r2, r8, ror r1
   12c10:	strdeq	r6, [r1], -r4
   12c14:	push	{r4, r5, r6, lr}
   12c18:	mov	r2, #48	; 0x30
   12c1c:	mov	r4, r1
   12c20:	mov	r1, #0
   12c24:	mov	r5, r0
   12c28:	bl	110b4 <memset@plt>
   12c2c:	cmp	r4, #10
   12c30:	beq	12c40 <__assert_fail@plt+0x1ab4>
   12c34:	str	r4, [r5]
   12c38:	mov	r0, r5
   12c3c:	pop	{r4, r5, r6, pc}
   12c40:	bl	11174 <abort@plt>
   12c44:	push	{r4, r5, r6, lr}
   12c48:	mov	r4, r0
   12c4c:	mov	r5, r1
   12c50:	bl	15a04 <__assert_fail@plt+0x4878>
   12c54:	ldrb	r3, [r0]
   12c58:	bic	r3, r3, #32
   12c5c:	cmp	r3, #85	; 0x55
   12c60:	bne	12cc0 <__assert_fail@plt+0x1b34>
   12c64:	ldrb	r3, [r0, #1]
   12c68:	bic	r3, r3, #32
   12c6c:	cmp	r3, #84	; 0x54
   12c70:	bne	12cfc <__assert_fail@plt+0x1b70>
   12c74:	ldrb	r3, [r0, #2]
   12c78:	bic	r3, r3, #32
   12c7c:	cmp	r3, #70	; 0x46
   12c80:	bne	12cfc <__assert_fail@plt+0x1b70>
   12c84:	ldrb	r3, [r0, #3]
   12c88:	cmp	r3, #45	; 0x2d
   12c8c:	bne	12cfc <__assert_fail@plt+0x1b70>
   12c90:	ldrb	r3, [r0, #4]
   12c94:	cmp	r3, #56	; 0x38
   12c98:	bne	12cfc <__assert_fail@plt+0x1b70>
   12c9c:	ldrb	r3, [r0, #5]
   12ca0:	cmp	r3, #0
   12ca4:	bne	12cfc <__assert_fail@plt+0x1b70>
   12ca8:	ldrb	r2, [r4]
   12cac:	ldr	r3, [pc, #152]	; 12d4c <__assert_fail@plt+0x1bc0>
   12cb0:	ldr	r0, [pc, #152]	; 12d50 <__assert_fail@plt+0x1bc4>
   12cb4:	cmp	r2, #96	; 0x60
   12cb8:	movne	r0, r3
   12cbc:	pop	{r4, r5, r6, pc}
   12cc0:	cmp	r3, #71	; 0x47
   12cc4:	bne	12cfc <__assert_fail@plt+0x1b70>
   12cc8:	ldrb	r3, [r0, #1]
   12ccc:	bic	r3, r3, #32
   12cd0:	cmp	r3, #66	; 0x42
   12cd4:	bne	12cfc <__assert_fail@plt+0x1b70>
   12cd8:	ldrb	r3, [r0, #2]
   12cdc:	cmp	r3, #49	; 0x31
   12ce0:	bne	12cfc <__assert_fail@plt+0x1b70>
   12ce4:	ldrb	r3, [r0, #3]
   12ce8:	cmp	r3, #56	; 0x38
   12cec:	bne	12cfc <__assert_fail@plt+0x1b70>
   12cf0:	ldrb	r3, [r0, #4]
   12cf4:	cmp	r3, #48	; 0x30
   12cf8:	beq	12d10 <__assert_fail@plt+0x1b84>
   12cfc:	ldr	r3, [pc, #80]	; 12d54 <__assert_fail@plt+0x1bc8>
   12d00:	cmp	r5, #9
   12d04:	ldr	r0, [pc, #76]	; 12d58 <__assert_fail@plt+0x1bcc>
   12d08:	movne	r0, r3
   12d0c:	pop	{r4, r5, r6, pc}
   12d10:	ldrb	r3, [r0, #5]
   12d14:	cmp	r3, #51	; 0x33
   12d18:	bne	12cfc <__assert_fail@plt+0x1b70>
   12d1c:	ldrb	r3, [r0, #6]
   12d20:	cmp	r3, #48	; 0x30
   12d24:	bne	12cfc <__assert_fail@plt+0x1b70>
   12d28:	ldrb	r3, [r0, #7]
   12d2c:	cmp	r3, #0
   12d30:	bne	12cfc <__assert_fail@plt+0x1b70>
   12d34:	ldrb	r2, [r4]
   12d38:	ldr	r3, [pc, #28]	; 12d5c <__assert_fail@plt+0x1bd0>
   12d3c:	ldr	r0, [pc, #28]	; 12d60 <__assert_fail@plt+0x1bd4>
   12d40:	cmp	r2, #96	; 0x60
   12d44:	movne	r0, r3
   12d48:	pop	{r4, r5, r6, pc}
   12d4c:	muleq	r1, r0, ip
   12d50:	andeq	r6, r1, ip, lsl #25
   12d54:	andeq	r6, r1, r0, lsr #25
   12d58:	muleq	r1, ip, ip
   12d5c:	muleq	r1, r8, ip
   12d60:	muleq	r1, r4, ip
   12d64:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12d68:	sub	sp, sp, #116	; 0x74
   12d6c:	mov	sl, r0
   12d70:	str	r3, [sp, #24]
   12d74:	mov	r3, #1
   12d78:	mov	r8, r1
   12d7c:	str	r2, [sp, #56]	; 0x38
   12d80:	str	r3, [sp, #36]	; 0x24
   12d84:	bl	10fac <__ctype_get_mb_cur_max@plt>
   12d88:	ldr	r3, [sp, #156]	; 0x9c
   12d8c:	mov	fp, r8
   12d90:	mov	r2, #0
   12d94:	lsr	r3, r3, #1
   12d98:	and	r3, r3, #1
   12d9c:	str	r2, [sp, #68]	; 0x44
   12da0:	str	r3, [sp, #28]
   12da4:	str	r2, [sp, #40]	; 0x28
   12da8:	str	r2, [sp, #44]	; 0x2c
   12dac:	str	r2, [sp, #52]	; 0x34
   12db0:	str	r2, [sp, #64]	; 0x40
   12db4:	str	r2, [sp, #72]	; 0x48
   12db8:	str	sl, [sp, #32]
   12dbc:	str	r0, [sp, #76]	; 0x4c
   12dc0:	ldr	r3, [sp, #152]	; 0x98
   12dc4:	cmp	r3, #10
   12dc8:	ldrls	pc, [pc, r3, lsl #2]
   12dcc:	b	13f8c <__assert_fail@plt+0x2e00>
   12dd0:	strdeq	r2, [r1], -ip
   12dd4:	andeq	r3, r1, r4, ror #1
   12dd8:	andeq	r3, r1, r8, lsl #2
   12ddc:	andeq	r3, r1, ip, lsr #2
   12de0:	andeq	r3, r1, r8, asr r2
   12de4:	andeq	r3, r1, ip, lsr #4
   12de8:	andeq	r3, r1, r4, lsl #4
   12dec:	andeq	r3, r1, r0, asr #2
   12df0:	andeq	r3, r1, r8, asr r1
   12df4:	andeq	r3, r1, r8, asr r1
   12df8:	andeq	r3, r1, r8, asr r1
   12dfc:	mov	r3, #0
   12e00:	mov	r7, r3
   12e04:	str	r3, [sp, #28]
   12e08:	ldr	r3, [sp, #44]	; 0x2c
   12e0c:	mov	sl, #0
   12e10:	eor	r3, r3, #1
   12e14:	str	r3, [sp, #60]	; 0x3c
   12e18:	ldr	r3, [sp, #24]
   12e1c:	cmn	r3, #1
   12e20:	beq	13384 <__assert_fail@plt+0x21f8>
   12e24:	ldr	r3, [sp, #24]
   12e28:	subs	r5, r3, sl
   12e2c:	movne	r5, #1
   12e30:	cmp	r5, #0
   12e34:	beq	1339c <__assert_fail@plt+0x2210>
   12e38:	ldr	r3, [sp, #152]	; 0x98
   12e3c:	ldr	r8, [sp, #44]	; 0x2c
   12e40:	cmp	r3, #2
   12e44:	moveq	r8, #0
   12e48:	andne	r8, r8, #1
   12e4c:	ldr	r3, [sp, #52]	; 0x34
   12e50:	adds	r9, r3, #0
   12e54:	movne	r9, #1
   12e58:	ands	r6, r9, r8
   12e5c:	beq	13804 <__assert_fail@plt+0x2678>
   12e60:	ldr	r2, [sp, #52]	; 0x34
   12e64:	ldr	r1, [sp, #24]
   12e68:	cmp	r2, #1
   12e6c:	mov	r3, r2
   12e70:	movls	r3, #0
   12e74:	movhi	r3, #1
   12e78:	cmn	r1, #1
   12e7c:	movne	r3, #0
   12e80:	cmp	r3, #0
   12e84:	add	r4, sl, r2
   12e88:	beq	12e98 <__assert_fail@plt+0x1d0c>
   12e8c:	ldr	r0, [sp, #56]	; 0x38
   12e90:	bl	11078 <strlen@plt>
   12e94:	str	r0, [sp, #24]
   12e98:	ldr	r3, [sp, #24]
   12e9c:	cmp	r3, r4
   12ea0:	ldr	r3, [sp, #56]	; 0x38
   12ea4:	add	r3, r3, sl
   12ea8:	str	r3, [sp, #48]	; 0x30
   12eac:	bcc	13810 <__assert_fail@plt+0x2684>
   12eb0:	mov	r0, r3
   12eb4:	ldr	r2, [sp, #52]	; 0x34
   12eb8:	ldr	r1, [sp, #64]	; 0x40
   12ebc:	bl	10f28 <memcmp@plt>
   12ec0:	cmp	r0, #0
   12ec4:	bne	13810 <__assert_fail@plt+0x2684>
   12ec8:	ldr	r3, [sp, #28]
   12ecc:	cmp	r3, #0
   12ed0:	bne	1408c <__assert_fail@plt+0x2f00>
   12ed4:	ldr	r3, [sp, #48]	; 0x30
   12ed8:	ldrb	r4, [r3]
   12edc:	cmp	r4, #126	; 0x7e
   12ee0:	ldrls	pc, [pc, r4, lsl #2]
   12ee4:	b	137a4 <__assert_fail@plt+0x2618>
   12ee8:	andeq	r3, r1, r8, asr #11
   12eec:	andeq	r3, r1, r4, lsr #15
   12ef0:	andeq	r3, r1, r4, lsr #15
   12ef4:	andeq	r3, r1, r4, lsr #15
   12ef8:	andeq	r3, r1, r4, lsr #15
   12efc:	andeq	r3, r1, r4, lsr #15
   12f00:	andeq	r3, r1, r4, lsr #15
   12f04:	andeq	r3, r1, ip, lsr #11
   12f08:	muleq	r1, r0, r5
   12f0c:	andeq	r3, r1, ip, lsl #15
   12f10:	strdeq	r3, [r1], -r0
   12f14:	ldrdeq	r3, [r1], -r4
   12f18:	andeq	r3, r1, r8, ror #14
   12f1c:	andeq	r3, r1, r4, asr #14
   12f20:	andeq	r3, r1, r4, lsr #15
   12f24:	andeq	r3, r1, r4, lsr #15
   12f28:	andeq	r3, r1, r4, lsr #15
   12f2c:	andeq	r3, r1, r4, lsr #15
   12f30:	andeq	r3, r1, r4, lsr #15
   12f34:	andeq	r3, r1, r4, lsr #15
   12f38:	andeq	r3, r1, r4, lsr #15
   12f3c:	andeq	r3, r1, r4, lsr #15
   12f40:	andeq	r3, r1, r4, lsr #15
   12f44:	andeq	r3, r1, r4, lsr #15
   12f48:	andeq	r3, r1, r4, lsr #15
   12f4c:	andeq	r3, r1, r4, lsr #15
   12f50:	andeq	r3, r1, r4, lsr #15
   12f54:	andeq	r3, r1, r4, lsr #15
   12f58:	andeq	r3, r1, r4, lsr #15
   12f5c:	andeq	r3, r1, r4, lsr #15
   12f60:	andeq	r3, r1, r4, lsr #15
   12f64:	andeq	r3, r1, r4, lsr #15
   12f68:	andeq	r3, r1, r4, lsl #15
   12f6c:			; <UNDEFINED> instruction: 0x000136b8
   12f70:			; <UNDEFINED> instruction: 0x000136b8
   12f74:	andeq	r3, r1, r8, asr #5
   12f78:			; <UNDEFINED> instruction: 0x000136b8
   12f7c:	andeq	r3, r1, r0, asr r7
   12f80:			; <UNDEFINED> instruction: 0x000136b8
   12f84:	andeq	r3, r1, r4, lsr #14
   12f88:			; <UNDEFINED> instruction: 0x000136b8
   12f8c:			; <UNDEFINED> instruction: 0x000136b8
   12f90:			; <UNDEFINED> instruction: 0x000136b8
   12f94:	andeq	r3, r1, r0, asr r7
   12f98:	andeq	r3, r1, r0, asr r7
   12f9c:	andeq	r3, r1, r0, asr r7
   12fa0:	andeq	r3, r1, r0, asr r7
   12fa4:	andeq	r3, r1, r0, asr r7
   12fa8:	andeq	r3, r1, r0, asr r7
   12fac:	andeq	r3, r1, r0, asr r7
   12fb0:	andeq	r3, r1, r0, asr r7
   12fb4:	andeq	r3, r1, r0, asr r7
   12fb8:	andeq	r3, r1, r0, asr r7
   12fbc:	andeq	r3, r1, r0, asr r7
   12fc0:	andeq	r3, r1, r0, asr r7
   12fc4:	andeq	r3, r1, r0, asr r7
   12fc8:	andeq	r3, r1, r0, asr r7
   12fcc:	andeq	r3, r1, r0, asr r7
   12fd0:	andeq	r3, r1, r0, asr r7
   12fd4:			; <UNDEFINED> instruction: 0x000136b8
   12fd8:			; <UNDEFINED> instruction: 0x000136b8
   12fdc:			; <UNDEFINED> instruction: 0x000136b8
   12fe0:			; <UNDEFINED> instruction: 0x000136b8
   12fe4:	strdeq	r3, [r1], -r4
   12fe8:	andeq	r3, r1, r4, lsr #15
   12fec:	andeq	r3, r1, r0, asr r7
   12ff0:	andeq	r3, r1, r0, asr r7
   12ff4:	andeq	r3, r1, r0, asr r7
   12ff8:	andeq	r3, r1, r0, asr r7
   12ffc:	andeq	r3, r1, r0, asr r7
   13000:	andeq	r3, r1, r0, asr r7
   13004:	andeq	r3, r1, r0, asr r7
   13008:	andeq	r3, r1, r0, asr r7
   1300c:	andeq	r3, r1, r0, asr r7
   13010:	andeq	r3, r1, r0, asr r7
   13014:	andeq	r3, r1, r0, asr r7
   13018:	andeq	r3, r1, r0, asr r7
   1301c:	andeq	r3, r1, r0, asr r7
   13020:	andeq	r3, r1, r0, asr r7
   13024:	andeq	r3, r1, r0, asr r7
   13028:	andeq	r3, r1, r0, asr r7
   1302c:	andeq	r3, r1, r0, asr r7
   13030:	andeq	r3, r1, r0, asr r7
   13034:	andeq	r3, r1, r0, asr r7
   13038:	andeq	r3, r1, r0, asr r7
   1303c:	andeq	r3, r1, r0, asr r7
   13040:	andeq	r3, r1, r0, asr r7
   13044:	andeq	r3, r1, r0, asr r7
   13048:	andeq	r3, r1, r0, asr r7
   1304c:	andeq	r3, r1, r0, asr r7
   13050:	andeq	r3, r1, r0, asr r7
   13054:			; <UNDEFINED> instruction: 0x000136b8
   13058:	andeq	r3, r1, r4, lsl r4
   1305c:	andeq	r3, r1, r0, asr r7
   13060:			; <UNDEFINED> instruction: 0x000136b8
   13064:	andeq	r3, r1, r0, asr r7
   13068:			; <UNDEFINED> instruction: 0x000136b8
   1306c:	andeq	r3, r1, r0, asr r7
   13070:	andeq	r3, r1, r0, asr r7
   13074:	andeq	r3, r1, r0, asr r7
   13078:	andeq	r3, r1, r0, asr r7
   1307c:	andeq	r3, r1, r0, asr r7
   13080:	andeq	r3, r1, r0, asr r7
   13084:	andeq	r3, r1, r0, asr r7
   13088:	andeq	r3, r1, r0, asr r7
   1308c:	andeq	r3, r1, r0, asr r7
   13090:	andeq	r3, r1, r0, asr r7
   13094:	andeq	r3, r1, r0, asr r7
   13098:	andeq	r3, r1, r0, asr r7
   1309c:	andeq	r3, r1, r0, asr r7
   130a0:	andeq	r3, r1, r0, asr r7
   130a4:	andeq	r3, r1, r0, asr r7
   130a8:	andeq	r3, r1, r0, asr r7
   130ac:	andeq	r3, r1, r0, asr r7
   130b0:	andeq	r3, r1, r0, asr r7
   130b4:	andeq	r3, r1, r0, asr r7
   130b8:	andeq	r3, r1, r0, asr r7
   130bc:	andeq	r3, r1, r0, asr r7
   130c0:	andeq	r3, r1, r0, asr r7
   130c4:	andeq	r3, r1, r0, asr r7
   130c8:	andeq	r3, r1, r0, asr r7
   130cc:	andeq	r3, r1, r0, asr r7
   130d0:	andeq	r3, r1, r0, asr r7
   130d4:	andeq	r3, r1, r8, lsr #5
   130d8:			; <UNDEFINED> instruction: 0x000136b8
   130dc:	andeq	r3, r1, r8, lsr #5
   130e0:	andeq	r3, r1, r8, asr #5
   130e4:	mov	r3, #1
   130e8:	str	r3, [sp, #28]
   130ec:	str	r3, [sp, #52]	; 0x34
   130f0:	ldr	r3, [pc, #4000]	; 14098 <__assert_fail@plt+0x2f0c>
   130f4:	mov	r7, #0
   130f8:	str	r3, [sp, #64]	; 0x40
   130fc:	mov	r3, #2
   13100:	str	r3, [sp, #152]	; 0x98
   13104:	b	12e08 <__assert_fail@plt+0x1c7c>
   13108:	ldr	r3, [sp, #28]
   1310c:	cmp	r3, #0
   13110:	beq	1326c <__assert_fail@plt+0x20e0>
   13114:	mov	r3, #1
   13118:	str	r3, [sp, #52]	; 0x34
   1311c:	ldr	r3, [pc, #3956]	; 14098 <__assert_fail@plt+0x2f0c>
   13120:	mov	r7, #0
   13124:	str	r3, [sp, #64]	; 0x40
   13128:	b	12e08 <__assert_fail@plt+0x1c7c>
   1312c:	mov	r3, #1
   13130:	str	r3, [sp, #44]	; 0x2c
   13134:	str	r3, [sp, #52]	; 0x34
   13138:	str	r3, [sp, #28]
   1313c:	b	130f0 <__assert_fail@plt+0x1f64>
   13140:	mov	r3, #0
   13144:	str	r3, [sp, #28]
   13148:	mov	r3, #1
   1314c:	str	r3, [sp, #44]	; 0x2c
   13150:	mov	r7, #0
   13154:	b	12e08 <__assert_fail@plt+0x1c7c>
   13158:	ldr	r3, [sp, #152]	; 0x98
   1315c:	cmp	r3, #10
   13160:	beq	131a4 <__assert_fail@plt+0x2018>
   13164:	mov	r2, #5
   13168:	ldr	r1, [pc, #3884]	; 1409c <__assert_fail@plt+0x2f10>
   1316c:	mov	r0, #0
   13170:	bl	10f4c <dcgettext@plt>
   13174:	ldr	r2, [pc, #3872]	; 1409c <__assert_fail@plt+0x2f10>
   13178:	cmp	r0, r2
   1317c:	str	r0, [sp, #164]	; 0xa4
   13180:	beq	14188 <__assert_fail@plt+0x2ffc>
   13184:	mov	r2, #5
   13188:	ldr	r1, [pc, #3848]	; 14098 <__assert_fail@plt+0x2f0c>
   1318c:	mov	r0, #0
   13190:	bl	10f4c <dcgettext@plt>
   13194:	ldr	r2, [pc, #3836]	; 14098 <__assert_fail@plt+0x2f0c>
   13198:	cmp	r0, r2
   1319c:	str	r0, [sp, #168]	; 0xa8
   131a0:	beq	14178 <__assert_fail@plt+0x2fec>
   131a4:	ldr	r7, [sp, #28]
   131a8:	cmp	r7, #0
   131ac:	movne	r7, #0
   131b0:	bne	131e4 <__assert_fail@plt+0x2058>
   131b4:	ldr	r3, [sp, #164]	; 0xa4
   131b8:	ldrb	r3, [r3]
   131bc:	cmp	r3, #0
   131c0:	beq	14198 <__assert_fail@plt+0x300c>
   131c4:	ldr	r2, [sp, #164]	; 0xa4
   131c8:	ldr	r1, [sp, #32]
   131cc:	cmp	fp, r7
   131d0:	strbhi	r3, [r1, r7]
   131d4:	ldrb	r3, [r2, #1]!
   131d8:	add	r7, r7, #1
   131dc:	cmp	r3, #0
   131e0:	bne	131cc <__assert_fail@plt+0x2040>
   131e4:	ldr	r0, [sp, #168]	; 0xa8
   131e8:	bl	11078 <strlen@plt>
   131ec:	ldr	r3, [sp, #168]	; 0xa8
   131f0:	str	r3, [sp, #64]	; 0x40
   131f4:	mov	r3, #1
   131f8:	str	r3, [sp, #44]	; 0x2c
   131fc:	str	r0, [sp, #52]	; 0x34
   13200:	b	12e08 <__assert_fail@plt+0x1c7c>
   13204:	mov	r3, #1
   13208:	str	r3, [sp, #44]	; 0x2c
   1320c:	str	r3, [sp, #52]	; 0x34
   13210:	str	r3, [sp, #28]
   13214:	ldr	r3, [pc, #3716]	; 140a0 <__assert_fail@plt+0x2f14>
   13218:	mov	r7, #0
   1321c:	str	r3, [sp, #64]	; 0x40
   13220:	mov	r3, #5
   13224:	str	r3, [sp, #152]	; 0x98
   13228:	b	12e08 <__assert_fail@plt+0x1c7c>
   1322c:	ldr	r3, [sp, #28]
   13230:	cmp	r3, #0
   13234:	beq	13f34 <__assert_fail@plt+0x2da8>
   13238:	ldr	r3, [sp, #28]
   1323c:	mov	r7, #0
   13240:	str	r3, [sp, #44]	; 0x2c
   13244:	mov	r3, #1
   13248:	str	r3, [sp, #52]	; 0x34
   1324c:	ldr	r3, [pc, #3660]	; 140a0 <__assert_fail@plt+0x2f14>
   13250:	str	r3, [sp, #64]	; 0x40
   13254:	b	12e08 <__assert_fail@plt+0x1c7c>
   13258:	ldr	r3, [sp, #28]
   1325c:	cmp	r3, #0
   13260:	mov	r3, #1
   13264:	streq	r3, [sp, #44]	; 0x2c
   13268:	bne	130ec <__assert_fail@plt+0x1f60>
   1326c:	cmp	fp, #0
   13270:	beq	13f64 <__assert_fail@plt+0x2dd8>
   13274:	ldr	r3, [sp, #32]
   13278:	mov	r2, #39	; 0x27
   1327c:	mov	r7, #1
   13280:	strb	r2, [r3]
   13284:	mov	r3, #0
   13288:	str	r3, [sp, #28]
   1328c:	mov	r3, #1
   13290:	str	r3, [sp, #52]	; 0x34
   13294:	ldr	r3, [pc, #3580]	; 14098 <__assert_fail@plt+0x2f0c>
   13298:	str	r3, [sp, #64]	; 0x40
   1329c:	mov	r3, #2
   132a0:	str	r3, [sp, #152]	; 0x98
   132a4:	b	12e08 <__assert_fail@plt+0x1c7c>
   132a8:	ldr	r3, [sp, #24]
   132ac:	cmn	r3, #1
   132b0:	beq	13ec8 <__assert_fail@plt+0x2d3c>
   132b4:	ldr	r3, [sp, #24]
   132b8:	subs	r3, r3, #1
   132bc:	movne	r3, #1
   132c0:	cmp	r3, #0
   132c4:	bne	132d0 <__assert_fail@plt+0x2144>
   132c8:	cmp	sl, #0
   132cc:	beq	136bc <__assert_fail@plt+0x2530>
   132d0:	ldr	r3, [sp, #152]	; 0x98
   132d4:	mov	r5, #0
   132d8:	sub	r2, r3, #2
   132dc:	mov	r8, r5
   132e0:	clz	r2, r2
   132e4:	lsr	r2, r2, #5
   132e8:	ldr	r3, [sp, #60]	; 0x3c
   132ec:	ldr	r1, [sp, #28]
   132f0:	orr	r3, r2, r3
   132f4:	eor	r3, r3, #1
   132f8:	orr	r3, r1, r3
   132fc:	tst	r3, #255	; 0xff
   13300:	bne	13a2c <__assert_fail@plt+0x28a0>
   13304:	cmp	r6, #0
   13308:	bne	13458 <__assert_fail@plt+0x22cc>
   1330c:	ldr	r3, [sp, #40]	; 0x28
   13310:	eor	r8, r8, #1
   13314:	and	r8, r8, r3
   13318:	add	sl, sl, #1
   1331c:	uxtb	r6, r8
   13320:	cmp	r6, #0
   13324:	beq	13358 <__assert_fail@plt+0x21cc>
   13328:	cmp	fp, r7
   1332c:	movhi	r2, #39	; 0x27
   13330:	ldrhi	r3, [sp, #32]
   13334:	strbhi	r2, [r3, r7]
   13338:	add	r3, r7, #1
   1333c:	cmp	fp, r3
   13340:	movhi	r1, #39	; 0x27
   13344:	ldrhi	r2, [sp, #32]
   13348:	add	r7, r7, #2
   1334c:	strbhi	r1, [r2, r3]
   13350:	mov	r3, #0
   13354:	str	r3, [sp, #40]	; 0x28
   13358:	cmp	r7, fp
   1335c:	ldrcc	r3, [sp, #32]
   13360:	strbcc	r4, [r3, r7]
   13364:	ldr	r3, [sp, #36]	; 0x24
   13368:	cmp	r5, #0
   1336c:	moveq	r3, #0
   13370:	str	r3, [sp, #36]	; 0x24
   13374:	ldr	r3, [sp, #24]
   13378:	add	r7, r7, #1
   1337c:	cmn	r3, #1
   13380:	bne	12e24 <__assert_fail@plt+0x1c98>
   13384:	ldr	r3, [sp, #56]	; 0x38
   13388:	ldrb	r5, [r3, sl]
   1338c:	adds	r5, r5, #0
   13390:	movne	r5, #1
   13394:	cmp	r5, #0
   13398:	bne	12e38 <__assert_fail@plt+0x1cac>
   1339c:	ldr	r3, [sp, #152]	; 0x98
   133a0:	ldr	r1, [sp, #28]
   133a4:	sub	r3, r3, #2
   133a8:	clz	r3, r3
   133ac:	lsr	r3, r3, #5
   133b0:	and	r9, r1, r3
   133b4:	cmp	r7, #0
   133b8:	movne	r2, #0
   133bc:	andeq	r2, r9, #1
   133c0:	cmp	r2, #0
   133c4:	bne	13da0 <__assert_fail@plt+0x2c14>
   133c8:	eor	r2, r1, #1
   133cc:	ands	r3, r3, r2
   133d0:	beq	1425c <__assert_fail@plt+0x30d0>
   133d4:	ldr	r2, [sp, #68]	; 0x44
   133d8:	cmp	r2, #0
   133dc:	beq	14248 <__assert_fail@plt+0x30bc>
   133e0:	ldr	r3, [sp, #36]	; 0x24
   133e4:	cmp	r3, #0
   133e8:	bne	14200 <__assert_fail@plt+0x3074>
   133ec:	ldr	r2, [sp, #72]	; 0x48
   133f0:	clz	r3, fp
   133f4:	cmp	r2, #0
   133f8:	lsr	r3, r3, #5
   133fc:	moveq	r3, #0
   13400:	cmp	r3, #0
   13404:	beq	141a0 <__assert_fail@plt+0x3014>
   13408:	str	r3, [sp, #68]	; 0x44
   1340c:	ldr	fp, [sp, #72]	; 0x48
   13410:	b	12dc0 <__assert_fail@plt+0x1c34>
   13414:	ldr	r3, [sp, #152]	; 0x98
   13418:	cmp	r3, #2
   1341c:	beq	13a70 <__assert_fail@plt+0x28e4>
   13420:	ldr	r3, [sp, #44]	; 0x2c
   13424:	ldr	r2, [sp, #28]
   13428:	and	r2, r3, r2
   1342c:	ands	r2, r9, r2
   13430:	bne	13a7c <__assert_fail@plt+0x28f0>
   13434:	mov	r4, #92	; 0x5c
   13438:	mov	r3, r4
   1343c:	ldr	r1, [sp, #44]	; 0x2c
   13440:	cmp	r1, #0
   13444:	moveq	r5, #0
   13448:	moveq	r8, r1
   1344c:	beq	132e8 <__assert_fail@plt+0x215c>
   13450:	mov	r4, r3
   13454:	mov	r5, #0
   13458:	ldr	r3, [sp, #28]
   1345c:	cmp	r3, #0
   13460:	bne	13a64 <__assert_fail@plt+0x28d8>
   13464:	ldr	r3, [sp, #40]	; 0x28
   13468:	eor	r9, r3, #1
   1346c:	and	r9, r9, r2
   13470:	ands	r9, r9, #255	; 0xff
   13474:	beq	134b8 <__assert_fail@plt+0x232c>
   13478:	cmp	fp, r7
   1347c:	movhi	r2, #39	; 0x27
   13480:	ldrhi	r3, [sp, #32]
   13484:	str	r9, [sp, #40]	; 0x28
   13488:	strbhi	r2, [r3, r7]
   1348c:	add	r3, r7, #1
   13490:	cmp	fp, r3
   13494:	movhi	r1, #36	; 0x24
   13498:	ldrhi	r2, [sp, #32]
   1349c:	strbhi	r1, [r2, r3]
   134a0:	add	r3, r7, #2
   134a4:	cmp	fp, r3
   134a8:	add	r7, r7, #3
   134ac:	ldrhi	r2, [sp, #32]
   134b0:	movhi	r1, #39	; 0x27
   134b4:	strbhi	r1, [r2, r3]
   134b8:	cmp	fp, r7
   134bc:	movhi	r2, #92	; 0x5c
   134c0:	ldrhi	r3, [sp, #32]
   134c4:	add	sl, sl, #1
   134c8:	strbhi	r2, [r3, r7]
   134cc:	add	r7, r7, #1
   134d0:	b	13358 <__assert_fail@plt+0x21cc>
   134d4:	ldr	r3, [sp, #152]	; 0x98
   134d8:	mov	r4, #11
   134dc:	sub	r2, r3, #2
   134e0:	mov	r3, #118	; 0x76
   134e4:	clz	r2, r2
   134e8:	lsr	r2, r2, #5
   134ec:	b	1343c <__assert_fail@plt+0x22b0>
   134f0:	mov	r4, #10
   134f4:	mov	r3, #110	; 0x6e
   134f8:	ldr	r2, [sp, #152]	; 0x98
   134fc:	ldr	r1, [sp, #28]
   13500:	sub	r2, r2, #2
   13504:	clz	r2, r2
   13508:	lsr	r2, r2, #5
   1350c:	ands	r1, r1, r2
   13510:	beq	1343c <__assert_fail@plt+0x22b0>
   13514:	ldr	sl, [sp, #32]
   13518:	mov	r8, fp
   1351c:	mov	r2, r1
   13520:	mov	r3, #2
   13524:	str	r3, [sp, #152]	; 0x98
   13528:	ldr	r9, [sp, #44]	; 0x2c
   1352c:	ldr	r3, [sp, #152]	; 0x98
   13530:	and	r9, r9, r2
   13534:	tst	r9, #255	; 0xff
   13538:	movne	r3, #4
   1353c:	str	r3, [sp, #152]	; 0x98
   13540:	ldr	r3, [sp, #156]	; 0x9c
   13544:	mov	ip, #0
   13548:	bic	r3, r3, #2
   1354c:	str	r3, [sp, #4]
   13550:	ldr	r3, [sp, #168]	; 0xa8
   13554:	ldr	r2, [sp, #56]	; 0x38
   13558:	str	r3, [sp, #16]
   1355c:	ldr	r3, [sp, #164]	; 0xa4
   13560:	mov	r1, r8
   13564:	str	r3, [sp, #12]
   13568:	ldr	r3, [sp, #152]	; 0x98
   1356c:	mov	r0, sl
   13570:	str	r3, [sp]
   13574:	str	ip, [sp, #8]
   13578:	ldr	r3, [sp, #24]
   1357c:	bl	12d64 <__assert_fail@plt+0x1bd8>
   13580:	mov	fp, r0
   13584:	mov	r0, fp
   13588:	add	sp, sp, #116	; 0x74
   1358c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13590:	ldr	r3, [sp, #152]	; 0x98
   13594:	mov	r4, #8
   13598:	sub	r2, r3, #2
   1359c:	mov	r3, #98	; 0x62
   135a0:	clz	r2, r2
   135a4:	lsr	r2, r2, #5
   135a8:	b	1343c <__assert_fail@plt+0x22b0>
   135ac:	ldr	r3, [sp, #152]	; 0x98
   135b0:	mov	r4, #7
   135b4:	sub	r2, r3, #2
   135b8:	mov	r3, #97	; 0x61
   135bc:	clz	r2, r2
   135c0:	lsr	r2, r2, #5
   135c4:	b	1343c <__assert_fail@plt+0x22b0>
   135c8:	ldr	r3, [sp, #44]	; 0x2c
   135cc:	cmp	r3, #0
   135d0:	beq	13db4 <__assert_fail@plt+0x2c28>
   135d4:	ldr	r3, [sp, #28]
   135d8:	cmp	r3, #0
   135dc:	bne	1408c <__assert_fail@plt+0x2f00>
   135e0:	ldr	r3, [sp, #152]	; 0x98
   135e4:	sub	r2, r3, #2
   135e8:	ldr	r3, [sp, #40]	; 0x28
   135ec:	clz	r2, r2
   135f0:	eor	r3, r3, #1
   135f4:	lsr	r2, r2, #5
   135f8:	ands	r3, r2, r3
   135fc:	moveq	r1, r7
   13600:	beq	13644 <__assert_fail@plt+0x24b8>
   13604:	cmp	fp, r7
   13608:	movhi	r0, #39	; 0x27
   1360c:	ldrhi	r1, [sp, #32]
   13610:	str	r3, [sp, #40]	; 0x28
   13614:	strbhi	r0, [r1, r7]
   13618:	add	r1, r7, #1
   1361c:	cmp	fp, r1
   13620:	movhi	ip, #36	; 0x24
   13624:	ldrhi	r0, [sp, #32]
   13628:	strbhi	ip, [r0, r1]
   1362c:	add	r1, r7, #2
   13630:	cmp	fp, r1
   13634:	movhi	ip, #39	; 0x27
   13638:	ldrhi	r0, [sp, #32]
   1363c:	strbhi	ip, [r0, r1]
   13640:	add	r1, r7, #3
   13644:	cmp	fp, r1
   13648:	movhi	r0, #92	; 0x5c
   1364c:	ldrhi	r3, [sp, #32]
   13650:	add	r7, r1, #1
   13654:	strbhi	r0, [r3, r1]
   13658:	cmp	r8, #0
   1365c:	beq	13fa0 <__assert_fail@plt+0x2e14>
   13660:	ldr	r0, [sp, #24]
   13664:	add	r3, sl, #1
   13668:	cmp	r3, r0
   1366c:	bcs	13edc <__assert_fail@plt+0x2d50>
   13670:	ldr	r0, [sp, #56]	; 0x38
   13674:	ldrb	r3, [r0, r3]
   13678:	sub	r3, r3, #48	; 0x30
   1367c:	cmp	r3, #9
   13680:	bhi	13edc <__assert_fail@plt+0x2d50>
   13684:	cmp	fp, r7
   13688:	movhi	r3, #48	; 0x30
   1368c:	ldrhi	r0, [sp, #32]
   13690:	ldr	r5, [sp, #28]
   13694:	mov	r4, #48	; 0x30
   13698:	strbhi	r3, [r0, r7]
   1369c:	add	r3, r1, #2
   136a0:	cmp	fp, r3
   136a4:	movhi	r0, #48	; 0x30
   136a8:	ldrhi	ip, [sp, #32]
   136ac:	add	r7, r1, #3
   136b0:	strbhi	r0, [ip, r3]
   136b4:	b	132e8 <__assert_fail@plt+0x215c>
   136b8:	mov	r5, #0
   136bc:	ldr	r3, [sp, #152]	; 0x98
   136c0:	sub	r2, r3, #2
   136c4:	ldr	r3, [sp, #28]
   136c8:	clz	r2, r2
   136cc:	lsr	r2, r2, #5
   136d0:	ands	r8, r3, r2
   136d4:	beq	132e8 <__assert_fail@plt+0x215c>
   136d8:	mov	r3, r8
   136dc:	mov	r2, r3
   136e0:	mov	r3, #2
   136e4:	ldr	sl, [sp, #32]
   136e8:	mov	r8, fp
   136ec:	str	r3, [sp, #152]	; 0x98
   136f0:	b	13528 <__assert_fail@plt+0x239c>
   136f4:	ldr	r3, [sp, #152]	; 0x98
   136f8:	cmp	r3, #2
   136fc:	beq	13e20 <__assert_fail@plt+0x2c94>
   13700:	cmp	r3, #5
   13704:	beq	13de0 <__assert_fail@plt+0x2c54>
   13708:	mov	r5, #0
   1370c:	sub	r2, r3, #2
   13710:	mov	r8, r5
   13714:	clz	r2, r2
   13718:	mov	r4, #63	; 0x3f
   1371c:	lsr	r2, r2, #5
   13720:	b	132e8 <__assert_fail@plt+0x215c>
   13724:	ldr	r3, [sp, #152]	; 0x98
   13728:	cmp	r3, #2
   1372c:	beq	13e40 <__assert_fail@plt+0x2cb4>
   13730:	mov	r2, #0
   13734:	str	r5, [sp, #68]	; 0x44
   13738:	mov	r8, r2
   1373c:	mov	r4, #39	; 0x27
   13740:	b	132e8 <__assert_fail@plt+0x215c>
   13744:	mov	r4, #13
   13748:	mov	r3, #114	; 0x72
   1374c:	b	134f8 <__assert_fail@plt+0x236c>
   13750:	ldr	r3, [sp, #152]	; 0x98
   13754:	mov	r8, #0
   13758:	sub	r2, r3, #2
   1375c:	clz	r2, r2
   13760:	lsr	r2, r2, #5
   13764:	b	132e8 <__assert_fail@plt+0x215c>
   13768:	ldr	r3, [sp, #152]	; 0x98
   1376c:	mov	r4, #12
   13770:	sub	r2, r3, #2
   13774:	mov	r3, #102	; 0x66
   13778:	clz	r2, r2
   1377c:	lsr	r2, r2, #5
   13780:	b	1343c <__assert_fail@plt+0x22b0>
   13784:	mov	r5, r6
   13788:	b	136bc <__assert_fail@plt+0x2530>
   1378c:	ldr	r3, [sp, #152]	; 0x98
   13790:	sub	r2, r3, #2
   13794:	mov	r3, #116	; 0x74
   13798:	clz	r2, r2
   1379c:	lsr	r2, r2, #5
   137a0:	b	1343c <__assert_fail@plt+0x22b0>
   137a4:	ldr	r8, [sp, #76]	; 0x4c
   137a8:	cmp	r8, #1
   137ac:	bne	13c5c <__assert_fail@plt+0x2ad0>
   137b0:	bl	11054 <__ctype_b_loc@plt>
   137b4:	sxth	r3, r4
   137b8:	mov	ip, r8
   137bc:	lsl	r3, r3, #1
   137c0:	ldr	r2, [r0]
   137c4:	ldrh	r3, [r2, r3]
   137c8:	and	r3, r3, #16384	; 0x4000
   137cc:	cmp	r3, #0
   137d0:	movne	r5, #1
   137d4:	moveq	r5, #0
   137d8:	moveq	r3, #1
   137dc:	movne	r3, #0
   137e0:	ldr	r2, [sp, #44]	; 0x2c
   137e4:	and	r3, r3, r2
   137e8:	ands	r8, r3, #255	; 0xff
   137ec:	bne	13af0 <__assert_fail@plt+0x2964>
   137f0:	ldr	r3, [sp, #152]	; 0x98
   137f4:	sub	r2, r3, #2
   137f8:	clz	r2, r2
   137fc:	lsr	r2, r2, #5
   13800:	b	132e8 <__assert_fail@plt+0x215c>
   13804:	ldr	r3, [sp, #56]	; 0x38
   13808:	add	r3, r3, sl
   1380c:	str	r3, [sp, #48]	; 0x30
   13810:	ldr	r3, [sp, #48]	; 0x30
   13814:	mov	r6, #0
   13818:	ldrb	r4, [r3]
   1381c:	cmp	r4, #126	; 0x7e
   13820:	ldrls	pc, [pc, r4, lsl #2]
   13824:	b	137a4 <__assert_fail@plt+0x2618>
   13828:	andeq	r3, r1, r8, asr #11
   1382c:	andeq	r3, r1, r4, lsr #15
   13830:	andeq	r3, r1, r4, lsr #15
   13834:	andeq	r3, r1, r4, lsr #15
   13838:	andeq	r3, r1, r4, lsr #15
   1383c:	andeq	r3, r1, r4, lsr #15
   13840:	andeq	r3, r1, r4, lsr #15
   13844:	andeq	r3, r1, ip, lsr #11
   13848:	muleq	r1, r0, r5
   1384c:	andeq	r3, r1, r4, lsr #20
   13850:	strdeq	r3, [r1], -r0
   13854:	ldrdeq	r3, [r1], -r4
   13858:	andeq	r3, r1, r8, ror #14
   1385c:	andeq	r3, r1, r4, asr #14
   13860:	andeq	r3, r1, r4, lsr #15
   13864:	andeq	r3, r1, r4, lsr #15
   13868:	andeq	r3, r1, r4, lsr #15
   1386c:	andeq	r3, r1, r4, lsr #15
   13870:	andeq	r3, r1, r4, lsr #15
   13874:	andeq	r3, r1, r4, lsr #15
   13878:	andeq	r3, r1, r4, lsr #15
   1387c:	andeq	r3, r1, r4, lsr #15
   13880:	andeq	r3, r1, r4, lsr #15
   13884:	andeq	r3, r1, r4, lsr #15
   13888:	andeq	r3, r1, r4, lsr #15
   1388c:	andeq	r3, r1, r4, lsr #15
   13890:	andeq	r3, r1, r4, lsr #15
   13894:	andeq	r3, r1, r4, lsr #15
   13898:	andeq	r3, r1, r4, lsr #15
   1389c:	andeq	r3, r1, r4, lsr #15
   138a0:	andeq	r3, r1, r4, lsr #15
   138a4:	andeq	r3, r1, r4, lsr #15
   138a8:			; <UNDEFINED> instruction: 0x000136bc
   138ac:			; <UNDEFINED> instruction: 0x000136b8
   138b0:			; <UNDEFINED> instruction: 0x000136b8
   138b4:	andeq	r3, r1, r8, asr #5
   138b8:			; <UNDEFINED> instruction: 0x000136b8
   138bc:	andeq	r3, r1, r0, asr r7
   138c0:			; <UNDEFINED> instruction: 0x000136b8
   138c4:	andeq	r3, r1, r4, lsr #14
   138c8:			; <UNDEFINED> instruction: 0x000136b8
   138cc:			; <UNDEFINED> instruction: 0x000136b8
   138d0:			; <UNDEFINED> instruction: 0x000136b8
   138d4:	andeq	r3, r1, r0, asr r7
   138d8:	andeq	r3, r1, r0, asr r7
   138dc:	andeq	r3, r1, r0, asr r7
   138e0:	andeq	r3, r1, r0, asr r7
   138e4:	andeq	r3, r1, r0, asr r7
   138e8:	andeq	r3, r1, r0, asr r7
   138ec:	andeq	r3, r1, r0, asr r7
   138f0:	andeq	r3, r1, r0, asr r7
   138f4:	andeq	r3, r1, r0, asr r7
   138f8:	andeq	r3, r1, r0, asr r7
   138fc:	andeq	r3, r1, r0, asr r7
   13900:	andeq	r3, r1, r0, asr r7
   13904:	andeq	r3, r1, r0, asr r7
   13908:	andeq	r3, r1, r0, asr r7
   1390c:	andeq	r3, r1, r0, asr r7
   13910:	andeq	r3, r1, r0, asr r7
   13914:			; <UNDEFINED> instruction: 0x000136b8
   13918:			; <UNDEFINED> instruction: 0x000136b8
   1391c:			; <UNDEFINED> instruction: 0x000136b8
   13920:			; <UNDEFINED> instruction: 0x000136b8
   13924:	strdeq	r3, [r1], -r4
   13928:	andeq	r3, r1, r4, lsr #15
   1392c:	andeq	r3, r1, r0, asr r7
   13930:	andeq	r3, r1, r0, asr r7
   13934:	andeq	r3, r1, r0, asr r7
   13938:	andeq	r3, r1, r0, asr r7
   1393c:	andeq	r3, r1, r0, asr r7
   13940:	andeq	r3, r1, r0, asr r7
   13944:	andeq	r3, r1, r0, asr r7
   13948:	andeq	r3, r1, r0, asr r7
   1394c:	andeq	r3, r1, r0, asr r7
   13950:	andeq	r3, r1, r0, asr r7
   13954:	andeq	r3, r1, r0, asr r7
   13958:	andeq	r3, r1, r0, asr r7
   1395c:	andeq	r3, r1, r0, asr r7
   13960:	andeq	r3, r1, r0, asr r7
   13964:	andeq	r3, r1, r0, asr r7
   13968:	andeq	r3, r1, r0, asr r7
   1396c:	andeq	r3, r1, r0, asr r7
   13970:	andeq	r3, r1, r0, asr r7
   13974:	andeq	r3, r1, r0, asr r7
   13978:	andeq	r3, r1, r0, asr r7
   1397c:	andeq	r3, r1, r0, asr r7
   13980:	andeq	r3, r1, r0, asr r7
   13984:	andeq	r3, r1, r0, asr r7
   13988:	andeq	r3, r1, r0, asr r7
   1398c:	andeq	r3, r1, r0, asr r7
   13990:	andeq	r3, r1, r0, asr r7
   13994:			; <UNDEFINED> instruction: 0x000136b8
   13998:	andeq	r3, r1, r4, lsl r4
   1399c:	andeq	r3, r1, r0, asr r7
   139a0:			; <UNDEFINED> instruction: 0x000136b8
   139a4:	andeq	r3, r1, r0, asr r7
   139a8:			; <UNDEFINED> instruction: 0x000136b8
   139ac:	andeq	r3, r1, r0, asr r7
   139b0:	andeq	r3, r1, r0, asr r7
   139b4:	andeq	r3, r1, r0, asr r7
   139b8:	andeq	r3, r1, r0, asr r7
   139bc:	andeq	r3, r1, r0, asr r7
   139c0:	andeq	r3, r1, r0, asr r7
   139c4:	andeq	r3, r1, r0, asr r7
   139c8:	andeq	r3, r1, r0, asr r7
   139cc:	andeq	r3, r1, r0, asr r7
   139d0:	andeq	r3, r1, r0, asr r7
   139d4:	andeq	r3, r1, r0, asr r7
   139d8:	andeq	r3, r1, r0, asr r7
   139dc:	andeq	r3, r1, r0, asr r7
   139e0:	andeq	r3, r1, r0, asr r7
   139e4:	andeq	r3, r1, r0, asr r7
   139e8:	andeq	r3, r1, r0, asr r7
   139ec:	andeq	r3, r1, r0, asr r7
   139f0:	andeq	r3, r1, r0, asr r7
   139f4:	andeq	r3, r1, r0, asr r7
   139f8:	andeq	r3, r1, r0, asr r7
   139fc:	andeq	r3, r1, r0, asr r7
   13a00:	andeq	r3, r1, r0, asr r7
   13a04:	andeq	r3, r1, r0, asr r7
   13a08:	andeq	r3, r1, r0, asr r7
   13a0c:	andeq	r3, r1, r0, asr r7
   13a10:	andeq	r3, r1, r0, asr r7
   13a14:	andeq	r3, r1, r8, lsr #5
   13a18:			; <UNDEFINED> instruction: 0x000136b8
   13a1c:	andeq	r3, r1, r8, lsr #5
   13a20:	andeq	r3, r1, r8, asr #5
   13a24:	mov	r3, #116	; 0x74
   13a28:	b	134f8 <__assert_fail@plt+0x236c>
   13a2c:	ldr	r3, [sp, #160]	; 0xa0
   13a30:	cmp	r3, #0
   13a34:	beq	13304 <__assert_fail@plt+0x2178>
   13a38:	lsr	r3, r4, #5
   13a3c:	ldr	r0, [sp, #160]	; 0xa0
   13a40:	uxtb	r3, r3
   13a44:	and	r1, r4, #31
   13a48:	ldr	r0, [r0, r3, lsl #2]
   13a4c:	lsr	r3, r0, r1
   13a50:	tst	r3, #1
   13a54:	beq	13304 <__assert_fail@plt+0x2178>
   13a58:	ldr	r3, [sp, #28]
   13a5c:	cmp	r3, #0
   13a60:	beq	13464 <__assert_fail@plt+0x22d8>
   13a64:	ldr	sl, [sp, #32]
   13a68:	mov	r8, fp
   13a6c:	b	13528 <__assert_fail@plt+0x239c>
   13a70:	ldr	r3, [sp, #28]
   13a74:	cmp	r3, #0
   13a78:	bne	13fcc <__assert_fail@plt+0x2e40>
   13a7c:	add	sl, sl, #1
   13a80:	ldr	r6, [sp, #40]	; 0x28
   13a84:	mov	r5, #0
   13a88:	mov	r4, #92	; 0x5c
   13a8c:	b	13320 <__assert_fail@plt+0x2194>
   13a90:	cmp	r9, r8
   13a94:	bne	13d04 <__assert_fail@plt+0x2b78>
   13a98:	ldr	r0, [sp, #100]	; 0x64
   13a9c:	bl	10f88 <iswprint@plt>
   13aa0:	add	r5, r5, r4
   13aa4:	cmp	r0, #0
   13aa8:	add	r0, sp, #104	; 0x68
   13aac:	moveq	r6, #0
   13ab0:	bl	10f10 <mbsinit@plt>
   13ab4:	cmp	r0, #0
   13ab8:	beq	13c98 <__assert_fail@plt+0x2b0c>
   13abc:	mov	r2, r6
   13ac0:	mov	ip, r5
   13ac4:	eor	r5, r2, #1
   13ac8:	ldr	r4, [sp, #80]	; 0x50
   13acc:	ldr	r6, [sp, #84]	; 0x54
   13ad0:	ldr	r7, [sp, #88]	; 0x58
   13ad4:	uxtb	r5, r5
   13ad8:	cmp	ip, #1
   13adc:	bls	13fdc <__assert_fail@plt+0x2e50>
   13ae0:	ldr	r3, [sp, #44]	; 0x2c
   13ae4:	and	r8, r3, r5
   13ae8:	mov	r5, r2
   13aec:	uxtb	r8, r8
   13af0:	add	r2, sl, ip
   13af4:	ldr	r0, [sp, #48]	; 0x30
   13af8:	mov	r1, #0
   13afc:	str	r5, [sp, #48]	; 0x30
   13b00:	ldr	r9, [sp, #28]
   13b04:	ldr	ip, [sp, #40]	; 0x28
   13b08:	ldr	r3, [sp, #32]
   13b0c:	ldr	r5, [sp, #152]	; 0x98
   13b10:	b	13bcc <__assert_fail@plt+0x2a40>
   13b14:	cmp	r9, #0
   13b18:	bne	13ef0 <__assert_fail@plt+0x2d64>
   13b1c:	eor	r1, ip, #1
   13b20:	cmp	r5, #2
   13b24:	movne	r1, #0
   13b28:	andeq	r1, r1, #1
   13b2c:	cmp	r1, #0
   13b30:	beq	13b68 <__assert_fail@plt+0x29dc>
   13b34:	cmp	fp, r7
   13b38:	movhi	ip, #39	; 0x27
   13b3c:	strbhi	ip, [r3, r7]
   13b40:	add	ip, r7, #1
   13b44:	cmp	fp, ip
   13b48:	movhi	lr, #36	; 0x24
   13b4c:	strbhi	lr, [r3, ip]
   13b50:	add	ip, r7, #2
   13b54:	cmp	fp, ip
   13b58:	movhi	lr, #39	; 0x27
   13b5c:	strbhi	lr, [r3, ip]
   13b60:	add	r7, r7, #3
   13b64:	mov	ip, r1
   13b68:	cmp	fp, r7
   13b6c:	movhi	r1, #92	; 0x5c
   13b70:	strbhi	r1, [r3, r7]
   13b74:	add	r1, r7, #1
   13b78:	cmp	fp, r1
   13b7c:	lsrhi	lr, r4, #6
   13b80:	addhi	lr, lr, #48	; 0x30
   13b84:	strbhi	lr, [r3, r1]
   13b88:	add	lr, r7, #2
   13b8c:	cmp	fp, lr
   13b90:	lsrhi	r1, r4, #3
   13b94:	andhi	r1, r1, #7
   13b98:	addhi	r1, r1, #48	; 0x30
   13b9c:	add	sl, sl, #1
   13ba0:	strbhi	r1, [r3, lr]
   13ba4:	and	r4, r4, #7
   13ba8:	cmp	r2, sl
   13bac:	add	r4, r4, #48	; 0x30
   13bb0:	add	r7, r7, #3
   13bb4:	bls	13f14 <__assert_fail@plt+0x2d88>
   13bb8:	mov	r1, r8
   13bbc:	cmp	fp, r7
   13bc0:	strbhi	r4, [r3, r7]
   13bc4:	ldrb	r4, [r0, #1]!
   13bc8:	add	r7, r7, #1
   13bcc:	cmp	r8, #0
   13bd0:	bne	13b14 <__assert_fail@plt+0x2988>
   13bd4:	cmp	r6, #0
   13bd8:	bne	13c28 <__assert_fail@plt+0x2a9c>
   13bdc:	eor	r6, r1, #1
   13be0:	and	r6, r6, ip
   13be4:	add	sl, sl, #1
   13be8:	cmp	r2, sl
   13bec:	uxtb	r6, r6
   13bf0:	bls	13c50 <__assert_fail@plt+0x2ac4>
   13bf4:	cmp	r6, #0
   13bf8:	beq	13bbc <__assert_fail@plt+0x2a30>
   13bfc:	cmp	fp, r7
   13c00:	movhi	ip, #39	; 0x27
   13c04:	strbhi	ip, [r3, r7]
   13c08:	add	ip, r7, #1
   13c0c:	cmp	fp, ip
   13c10:	movhi	lr, #39	; 0x27
   13c14:	strbhi	lr, [r3, ip]
   13c18:	add	r7, r7, #2
   13c1c:	mov	r6, r8
   13c20:	mov	ip, r8
   13c24:	b	13bbc <__assert_fail@plt+0x2a30>
   13c28:	cmp	fp, r7
   13c2c:	eor	r6, r1, #1
   13c30:	movhi	lr, #92	; 0x5c
   13c34:	and	r6, r6, ip
   13c38:	add	sl, sl, #1
   13c3c:	strbhi	lr, [r3, r7]
   13c40:	cmp	r2, sl
   13c44:	add	r7, r7, #1
   13c48:	uxtb	r6, r6
   13c4c:	bhi	13bf4 <__assert_fail@plt+0x2a68>
   13c50:	str	ip, [sp, #40]	; 0x28
   13c54:	ldr	r5, [sp, #48]	; 0x30
   13c58:	b	13320 <__assert_fail@plt+0x2194>
   13c5c:	ldr	r3, [sp, #24]
   13c60:	cmn	r3, #1
   13c64:	mov	r3, #0
   13c68:	str	r3, [sp, #104]	; 0x68
   13c6c:	str	r3, [sp, #108]	; 0x6c
   13c70:	beq	13f90 <__assert_fail@plt+0x2e04>
   13c74:	mov	r2, r5
   13c78:	mov	r3, #0
   13c7c:	str	r7, [sp, #88]	; 0x58
   13c80:	ldr	r7, [sp, #152]	; 0x98
   13c84:	str	r5, [sp, #92]	; 0x5c
   13c88:	str	r6, [sp, #84]	; 0x54
   13c8c:	mov	r5, r3
   13c90:	mov	r6, r2
   13c94:	str	r4, [sp, #80]	; 0x50
   13c98:	ldr	r3, [sp, #56]	; 0x38
   13c9c:	add	r9, sl, r5
   13ca0:	add	r8, r3, r9
   13ca4:	ldr	r3, [sp, #24]
   13ca8:	mov	r1, r8
   13cac:	sub	r2, r3, r9
   13cb0:	add	r0, sp, #100	; 0x64
   13cb4:	add	r3, sp, #104	; 0x68
   13cb8:	bl	15a38 <__assert_fail@plt+0x48ac>
   13cbc:	subs	r4, r0, #0
   13cc0:	beq	14068 <__assert_fail@plt+0x2edc>
   13cc4:	cmn	r4, #1
   13cc8:	beq	14048 <__assert_fail@plt+0x2ebc>
   13ccc:	cmn	r4, #2
   13cd0:	beq	13fe8 <__assert_fail@plt+0x2e5c>
   13cd4:	ldr	r2, [sp, #28]
   13cd8:	cmp	r7, #2
   13cdc:	movne	r2, #0
   13ce0:	andeq	r2, r2, #1
   13ce4:	cmp	r2, #0
   13ce8:	beq	13a98 <__assert_fail@plt+0x290c>
   13cec:	cmp	r4, #1
   13cf0:	beq	13a98 <__assert_fail@plt+0x290c>
   13cf4:	sub	r3, r4, #1
   13cf8:	add	r9, r3, r9
   13cfc:	ldr	r3, [sp, #56]	; 0x38
   13d00:	add	r9, r3, r9
   13d04:	ldrb	r3, [r8, #1]!
   13d08:	sub	r3, r3, #91	; 0x5b
   13d0c:	cmp	r3, #33	; 0x21
   13d10:	ldrls	pc, [pc, r3, lsl #2]
   13d14:	b	13a90 <__assert_fail@plt+0x2904>
   13d18:	andeq	r3, r1, r0, lsr #27
   13d1c:	andeq	r3, r1, r0, lsr #27
   13d20:	muleq	r1, r0, sl
   13d24:	andeq	r3, r1, r0, lsr #27
   13d28:	muleq	r1, r0, sl
   13d2c:	andeq	r3, r1, r0, lsr #27
   13d30:	muleq	r1, r0, sl
   13d34:	muleq	r1, r0, sl
   13d38:	muleq	r1, r0, sl
   13d3c:	muleq	r1, r0, sl
   13d40:	muleq	r1, r0, sl
   13d44:	muleq	r1, r0, sl
   13d48:	muleq	r1, r0, sl
   13d4c:	muleq	r1, r0, sl
   13d50:	muleq	r1, r0, sl
   13d54:	muleq	r1, r0, sl
   13d58:	muleq	r1, r0, sl
   13d5c:	muleq	r1, r0, sl
   13d60:	muleq	r1, r0, sl
   13d64:	muleq	r1, r0, sl
   13d68:	muleq	r1, r0, sl
   13d6c:	muleq	r1, r0, sl
   13d70:	muleq	r1, r0, sl
   13d74:	muleq	r1, r0, sl
   13d78:	muleq	r1, r0, sl
   13d7c:	muleq	r1, r0, sl
   13d80:	muleq	r1, r0, sl
   13d84:	muleq	r1, r0, sl
   13d88:	muleq	r1, r0, sl
   13d8c:	muleq	r1, r0, sl
   13d90:	muleq	r1, r0, sl
   13d94:	muleq	r1, r0, sl
   13d98:	muleq	r1, r0, sl
   13d9c:	andeq	r3, r1, r0, lsr #27
   13da0:	mov	r3, #2
   13da4:	ldr	sl, [sp, #32]
   13da8:	mov	r8, fp
   13dac:	str	r3, [sp, #152]	; 0x98
   13db0:	b	13528 <__assert_fail@plt+0x239c>
   13db4:	ldr	r3, [sp, #156]	; 0x9c
   13db8:	tst	r3, #1
   13dbc:	bne	13ee8 <__assert_fail@plt+0x2d5c>
   13dc0:	ldr	r3, [sp, #152]	; 0x98
   13dc4:	ldr	r4, [sp, #44]	; 0x2c
   13dc8:	sub	r2, r3, #2
   13dcc:	mov	r5, #0
   13dd0:	clz	r2, r2
   13dd4:	mov	r8, r4
   13dd8:	lsr	r2, r2, #5
   13ddc:	b	132e8 <__assert_fail@plt+0x215c>
   13de0:	ldr	r3, [sp, #156]	; 0x9c
   13de4:	ands	r9, r3, #4
   13de8:	beq	13f20 <__assert_fail@plt+0x2d94>
   13dec:	ldr	r2, [sp, #24]
   13df0:	add	r3, sl, #2
   13df4:	cmp	r3, r2
   13df8:	bcs	13e0c <__assert_fail@plt+0x2c80>
   13dfc:	ldr	r2, [sp, #48]	; 0x30
   13e00:	ldrb	r4, [r2, #1]
   13e04:	cmp	r4, #63	; 0x3f
   13e08:	beq	140a8 <__assert_fail@plt+0x2f1c>
   13e0c:	mov	r2, #0
   13e10:	mov	r8, r2
   13e14:	mov	r5, r2
   13e18:	mov	r4, #63	; 0x3f
   13e1c:	b	132e8 <__assert_fail@plt+0x215c>
   13e20:	ldr	r3, [sp, #28]
   13e24:	cmp	r3, #0
   13e28:	bne	1414c <__assert_fail@plt+0x2fc0>
   13e2c:	mov	r2, r5
   13e30:	mov	r8, r3
   13e34:	mov	r5, #0
   13e38:	mov	r4, #63	; 0x3f
   13e3c:	b	132e8 <__assert_fail@plt+0x215c>
   13e40:	ldr	r3, [sp, #28]
   13e44:	cmp	r3, #0
   13e48:	bne	1414c <__assert_fail@plt+0x2fc0>
   13e4c:	ldr	r2, [sp, #72]	; 0x48
   13e50:	adds	r3, fp, #0
   13e54:	movne	r3, #1
   13e58:	cmp	r2, #0
   13e5c:	movne	r3, #0
   13e60:	cmp	r3, #0
   13e64:	strne	fp, [sp, #72]	; 0x48
   13e68:	movne	fp, #0
   13e6c:	bne	13ea8 <__assert_fail@plt+0x2d1c>
   13e70:	cmp	fp, r7
   13e74:	movhi	r2, #39	; 0x27
   13e78:	ldrhi	r3, [sp, #32]
   13e7c:	strbhi	r2, [r3, r7]
   13e80:	add	r3, r7, #1
   13e84:	cmp	fp, r3
   13e88:	movhi	r1, #92	; 0x5c
   13e8c:	ldrhi	r2, [sp, #32]
   13e90:	strbhi	r1, [r2, r3]
   13e94:	add	r3, r7, #2
   13e98:	cmp	fp, r3
   13e9c:	movhi	r1, #39	; 0x27
   13ea0:	ldrhi	r2, [sp, #32]
   13ea4:	strbhi	r1, [r2, r3]
   13ea8:	ldr	r3, [sp, #28]
   13eac:	add	r7, r7, #3
   13eb0:	mov	r2, r5
   13eb4:	mov	r8, r3
   13eb8:	str	r5, [sp, #68]	; 0x44
   13ebc:	str	r3, [sp, #40]	; 0x28
   13ec0:	mov	r4, #39	; 0x27
   13ec4:	b	132e8 <__assert_fail@plt+0x215c>
   13ec8:	ldr	r3, [sp, #56]	; 0x38
   13ecc:	ldrb	r3, [r3, #1]
   13ed0:	adds	r3, r3, #0
   13ed4:	movne	r3, #1
   13ed8:	b	132c0 <__assert_fail@plt+0x2134>
   13edc:	ldr	r5, [sp, #28]
   13ee0:	mov	r4, #48	; 0x30
   13ee4:	b	132e8 <__assert_fail@plt+0x215c>
   13ee8:	add	sl, sl, #1
   13eec:	b	12e18 <__assert_fail@plt+0x1c8c>
   13ef0:	mov	sl, r3
   13ef4:	ldr	r3, [sp, #28]
   13ef8:	mov	r8, fp
   13efc:	str	r3, [sp, #44]	; 0x2c
   13f00:	ldr	r3, [sp, #152]	; 0x98
   13f04:	sub	r2, r3, #2
   13f08:	clz	r2, r2
   13f0c:	lsr	r2, r2, #5
   13f10:	b	13528 <__assert_fail@plt+0x239c>
   13f14:	str	ip, [sp, #40]	; 0x28
   13f18:	ldr	r5, [sp, #48]	; 0x30
   13f1c:	b	13358 <__assert_fail@plt+0x21cc>
   13f20:	mov	r2, r9
   13f24:	mov	r8, r9
   13f28:	mov	r5, #0
   13f2c:	mov	r4, #63	; 0x3f
   13f30:	b	132e8 <__assert_fail@plt+0x215c>
   13f34:	cmp	fp, #0
   13f38:	beq	13fb0 <__assert_fail@plt+0x2e24>
   13f3c:	ldr	r1, [sp, #32]
   13f40:	mov	r3, #34	; 0x22
   13f44:	mov	r2, #1
   13f48:	strb	r3, [r1]
   13f4c:	ldr	r3, [pc, #332]	; 140a0 <__assert_fail@plt+0x2f14>
   13f50:	str	r2, [sp, #52]	; 0x34
   13f54:	mov	r7, r2
   13f58:	str	r2, [sp, #44]	; 0x2c
   13f5c:	str	r3, [sp, #64]	; 0x40
   13f60:	b	12e08 <__assert_fail@plt+0x1c7c>
   13f64:	ldr	r3, [pc, #300]	; 14098 <__assert_fail@plt+0x2f0c>
   13f68:	str	r3, [sp, #64]	; 0x40
   13f6c:	mov	r3, #0
   13f70:	str	r3, [sp, #28]
   13f74:	mov	r3, #1
   13f78:	str	r3, [sp, #52]	; 0x34
   13f7c:	mov	r7, r3
   13f80:	mov	r3, #2
   13f84:	str	r3, [sp, #152]	; 0x98
   13f88:	b	12e08 <__assert_fail@plt+0x1c7c>
   13f8c:	bl	11174 <abort@plt>
   13f90:	ldr	r0, [sp, #56]	; 0x38
   13f94:	bl	11078 <strlen@plt>
   13f98:	str	r0, [sp, #24]
   13f9c:	b	13c74 <__assert_fail@plt+0x2ae8>
   13fa0:	mov	r5, r8
   13fa4:	mov	r4, #48	; 0x30
   13fa8:	ldr	r8, [sp, #44]	; 0x2c
   13fac:	b	132e8 <__assert_fail@plt+0x215c>
   13fb0:	mov	r3, #1
   13fb4:	str	r3, [sp, #52]	; 0x34
   13fb8:	mov	r7, r3
   13fbc:	str	r3, [sp, #44]	; 0x2c
   13fc0:	ldr	r3, [pc, #216]	; 140a0 <__assert_fail@plt+0x2f14>
   13fc4:	str	r3, [sp, #64]	; 0x40
   13fc8:	b	12e08 <__assert_fail@plt+0x1c7c>
   13fcc:	ldr	sl, [sp, #32]
   13fd0:	mov	r8, fp
   13fd4:	mov	r2, r3
   13fd8:	b	13528 <__assert_fail@plt+0x239c>
   13fdc:	mov	r3, r5
   13fe0:	mov	r5, r2
   13fe4:	b	137e0 <__assert_fail@plt+0x2654>
   13fe8:	ldr	r1, [sp, #24]
   13fec:	mov	r2, r5
   13ff0:	cmp	r1, r9
   13ff4:	mov	ip, r5
   13ff8:	ldr	r4, [sp, #80]	; 0x50
   13ffc:	ldr	r5, [sp, #92]	; 0x5c
   14000:	ldr	r6, [sp, #84]	; 0x54
   14004:	ldr	r7, [sp, #88]	; 0x58
   14008:	bls	1403c <__assert_fail@plt+0x2eb0>
   1400c:	ldrb	r3, [r8]
   14010:	cmp	r3, #0
   14014:	bne	14028 <__assert_fail@plt+0x2e9c>
   14018:	b	14040 <__assert_fail@plt+0x2eb4>
   1401c:	ldrb	r3, [r8, #1]!
   14020:	cmp	r3, #0
   14024:	beq	14140 <__assert_fail@plt+0x2fb4>
   14028:	add	r2, r2, #1
   1402c:	add	r3, sl, r2
   14030:	cmp	r1, r3
   14034:	bhi	1401c <__assert_fail@plt+0x2e90>
   14038:	mov	ip, r2
   1403c:	mov	r3, #0
   14040:	mov	r2, r3
   14044:	b	13ad8 <__assert_fail@plt+0x294c>
   14048:	mov	r3, #0
   1404c:	mov	ip, r5
   14050:	ldr	r4, [sp, #80]	; 0x50
   14054:	ldr	r5, [sp, #92]	; 0x5c
   14058:	ldr	r6, [sp, #84]	; 0x54
   1405c:	ldr	r7, [sp, #88]	; 0x58
   14060:	mov	r2, r3
   14064:	b	13ad8 <__assert_fail@plt+0x294c>
   14068:	mov	r3, r6
   1406c:	mov	ip, r5
   14070:	eor	r5, r3, #1
   14074:	mov	r2, r6
   14078:	ldr	r4, [sp, #80]	; 0x50
   1407c:	ldr	r6, [sp, #84]	; 0x54
   14080:	ldr	r7, [sp, #88]	; 0x58
   14084:	uxtb	r5, r5
   14088:	b	13ad8 <__assert_fail@plt+0x294c>
   1408c:	ldr	sl, [sp, #32]
   14090:	mov	r8, fp
   14094:	b	13efc <__assert_fail@plt+0x2d70>
   14098:	andeq	r6, r1, r0, lsr #25
   1409c:	andeq	r6, r1, r4, lsr #25
   140a0:	muleq	r1, ip, ip
   140a4:	stmdacc	r0, {r0, r6, r7, r8, ip, lr}
   140a8:	ldr	r2, [sp, #56]	; 0x38
   140ac:	ldrb	r1, [r2, r3]
   140b0:	sub	r2, r1, #33	; 0x21
   140b4:	uxtb	r2, r2
   140b8:	cmp	r2, #29
   140bc:	bhi	1415c <__assert_fail@plt+0x2fd0>
   140c0:	ldr	r0, [pc, #-36]	; 140a4 <__assert_fail@plt+0x2f18>
   140c4:	mov	ip, #1
   140c8:	ands	r2, r0, ip, lsl r2
   140cc:	beq	1416c <__assert_fail@plt+0x2fe0>
   140d0:	ldr	r2, [sp, #28]
   140d4:	cmp	r2, #0
   140d8:	bne	1426c <__assert_fail@plt+0x30e0>
   140dc:	cmp	fp, r7
   140e0:	ldr	r8, [sp, #28]
   140e4:	ldrhi	r2, [sp, #32]
   140e8:	mov	sl, r3
   140ec:	mov	r5, r8
   140f0:	strbhi	r4, [r2, r7]
   140f4:	add	r2, r7, #1
   140f8:	cmp	fp, r2
   140fc:	movhi	r0, #34	; 0x22
   14100:	ldrhi	ip, [sp, #32]
   14104:	mov	r4, r1
   14108:	strbhi	r0, [ip, r2]
   1410c:	add	r2, r7, #2
   14110:	cmp	fp, r2
   14114:	movhi	r0, #34	; 0x22
   14118:	ldrhi	ip, [sp, #32]
   1411c:	strbhi	r0, [ip, r2]
   14120:	add	r2, r7, #3
   14124:	cmp	fp, r2
   14128:	movhi	r0, #63	; 0x3f
   1412c:	ldrhi	ip, [sp, #32]
   14130:	add	r7, r7, #4
   14134:	strbhi	r0, [ip, r2]
   14138:	mov	r2, r8
   1413c:	b	132e8 <__assert_fail@plt+0x215c>
   14140:	mov	ip, r2
   14144:	mov	r2, r3
   14148:	b	13ad8 <__assert_fail@plt+0x294c>
   1414c:	ldr	sl, [sp, #32]
   14150:	mov	r8, fp
   14154:	ldr	r2, [sp, #28]
   14158:	b	13528 <__assert_fail@plt+0x239c>
   1415c:	mov	r2, #0
   14160:	mov	r8, r2
   14164:	mov	r5, r2
   14168:	b	132e8 <__assert_fail@plt+0x215c>
   1416c:	mov	r8, r2
   14170:	mov	r5, #0
   14174:	b	132e8 <__assert_fail@plt+0x215c>
   14178:	ldr	r1, [sp, #152]	; 0x98
   1417c:	bl	12c44 <__assert_fail@plt+0x1ab8>
   14180:	str	r0, [sp, #168]	; 0xa8
   14184:	b	131a4 <__assert_fail@plt+0x2018>
   14188:	ldr	r1, [sp, #152]	; 0x98
   1418c:	bl	12c44 <__assert_fail@plt+0x1ab8>
   14190:	str	r0, [sp, #164]	; 0xa4
   14194:	b	13184 <__assert_fail@plt+0x1ff8>
   14198:	ldr	r7, [sp, #28]
   1419c:	b	131e4 <__assert_fail@plt+0x2058>
   141a0:	ldr	sl, [sp, #32]
   141a4:	ldr	r2, [sp, #68]	; 0x44
   141a8:	mov	r8, fp
   141ac:	mov	fp, r7
   141b0:	ldr	r3, [sp, #64]	; 0x40
   141b4:	cmp	r3, #0
   141b8:	moveq	r2, #0
   141bc:	andne	r2, r2, #1
   141c0:	cmp	r2, #0
   141c4:	beq	141f0 <__assert_fail@plt+0x3064>
   141c8:	mov	r2, r3
   141cc:	ldrb	r3, [r3]
   141d0:	cmp	r3, #0
   141d4:	beq	141f0 <__assert_fail@plt+0x3064>
   141d8:	cmp	r8, fp
   141dc:	strbhi	r3, [sl, fp]
   141e0:	ldrb	r3, [r2, #1]!
   141e4:	add	fp, fp, #1
   141e8:	cmp	r3, #0
   141ec:	bne	141d8 <__assert_fail@plt+0x304c>
   141f0:	cmp	r8, fp
   141f4:	movhi	r3, #0
   141f8:	strbhi	r3, [sl, fp]
   141fc:	b	13584 <__assert_fail@plt+0x23f8>
   14200:	ldr	r3, [sp, #168]	; 0xa8
   14204:	ldr	sl, [sp, #32]
   14208:	str	r3, [sp, #16]
   1420c:	ldr	r3, [sp, #164]	; 0xa4
   14210:	mov	ip, #5
   14214:	str	r3, [sp, #12]
   14218:	ldr	r3, [sp, #160]	; 0xa0
   1421c:	ldr	r2, [sp, #56]	; 0x38
   14220:	str	r3, [sp, #8]
   14224:	ldr	r3, [sp, #156]	; 0x9c
   14228:	ldr	r1, [sp, #72]	; 0x48
   1422c:	str	r3, [sp, #4]
   14230:	mov	r0, sl
   14234:	ldr	r3, [sp, #24]
   14238:	str	ip, [sp]
   1423c:	bl	12d64 <__assert_fail@plt+0x1bd8>
   14240:	mov	fp, r0
   14244:	b	13584 <__assert_fail@plt+0x23f8>
   14248:	mov	r8, fp
   1424c:	ldr	sl, [sp, #32]
   14250:	mov	fp, r7
   14254:	mov	r2, r3
   14258:	b	141b0 <__assert_fail@plt+0x3024>
   1425c:	mov	r8, fp
   14260:	ldr	sl, [sp, #32]
   14264:	mov	fp, r7
   14268:	b	141b0 <__assert_fail@plt+0x3024>
   1426c:	ldr	sl, [sp, #32]
   14270:	mov	r8, fp
   14274:	b	13540 <__assert_fail@plt+0x23b4>
   14278:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1427c:	sub	sp, sp, #52	; 0x34
   14280:	mov	r4, r0
   14284:	mov	r5, r3
   14288:	mov	sl, r1
   1428c:	mov	fp, r2
   14290:	bl	11090 <__errno_location@plt>
   14294:	ldr	r7, [pc, #412]	; 14438 <__assert_fail@plt+0x32ac>
   14298:	cmn	r4, #-2147483647	; 0x80000001
   1429c:	ldr	r6, [r7]
   142a0:	mov	r8, r0
   142a4:	movne	r0, #0
   142a8:	moveq	r0, #1
   142ac:	ldr	r3, [r8]
   142b0:	orrs	r0, r0, r4, lsr #31
   142b4:	str	r3, [sp, #24]
   142b8:	bne	14434 <__assert_fail@plt+0x32a8>
   142bc:	ldr	r2, [r7, #4]
   142c0:	cmp	r4, r2
   142c4:	blt	14324 <__assert_fail@plt+0x3198>
   142c8:	add	r9, r7, #8
   142cc:	cmp	r6, r9
   142d0:	str	r2, [sp, #44]	; 0x2c
   142d4:	beq	14404 <__assert_fail@plt+0x3278>
   142d8:	mov	r3, #8
   142dc:	sub	r2, r4, r2
   142e0:	mov	r0, r6
   142e4:	str	r3, [sp]
   142e8:	add	r2, r2, #1
   142ec:	mvn	r3, #-2147483648	; 0x80000000
   142f0:	add	r1, sp, #44	; 0x2c
   142f4:	bl	1531c <__assert_fail@plt+0x4190>
   142f8:	mov	r6, r0
   142fc:	str	r0, [r7]
   14300:	ldr	r0, [r7, #4]
   14304:	ldr	r2, [sp, #44]	; 0x2c
   14308:	mov	r1, #0
   1430c:	sub	r2, r2, r0
   14310:	add	r0, r6, r0, lsl #3
   14314:	lsl	r2, r2, #3
   14318:	bl	110b4 <memset@plt>
   1431c:	ldr	r3, [sp, #44]	; 0x2c
   14320:	str	r3, [r7, #4]
   14324:	add	r3, r6, r4, lsl #3
   14328:	ldr	r1, [r5, #4]
   1432c:	ldr	r7, [r3, #4]
   14330:	ldr	r9, [r6, r4, lsl #3]
   14334:	ldr	r2, [r5, #40]	; 0x28
   14338:	ldr	ip, [r5, #44]	; 0x2c
   1433c:	add	r0, r5, #8
   14340:	str	r3, [sp, #28]
   14344:	ldr	r3, [r5]
   14348:	orr	r1, r1, #1
   1434c:	mov	lr, r0
   14350:	str	r1, [sp, #32]
   14354:	str	r0, [sp, #36]	; 0x24
   14358:	str	r1, [sp, #4]
   1435c:	str	r2, [sp, #12]
   14360:	str	r3, [sp]
   14364:	mov	r0, r7
   14368:	mov	r1, r9
   1436c:	str	ip, [sp, #16]
   14370:	str	lr, [sp, #8]
   14374:	mov	r3, fp
   14378:	mov	r2, sl
   1437c:	bl	12d64 <__assert_fail@plt+0x1bd8>
   14380:	cmp	r9, r0
   14384:	bhi	143f0 <__assert_fail@plt+0x3264>
   14388:	ldr	r3, [pc, #172]	; 1443c <__assert_fail@plt+0x32b0>
   1438c:	add	r9, r0, #1
   14390:	cmp	r7, r3
   14394:	str	r9, [r6, r4, lsl #3]
   14398:	beq	143a4 <__assert_fail@plt+0x3218>
   1439c:	mov	r0, r7
   143a0:	bl	129dc <__assert_fail@plt+0x1850>
   143a4:	mov	r0, r9
   143a8:	bl	151b8 <__assert_fail@plt+0x402c>
   143ac:	ldr	lr, [sp, #28]
   143b0:	ldr	ip, [r5, #44]	; 0x2c
   143b4:	ldr	r4, [r5, #40]	; 0x28
   143b8:	mov	r3, fp
   143bc:	mov	r2, sl
   143c0:	mov	r1, r9
   143c4:	str	r0, [lr, #4]
   143c8:	ldr	lr, [r5]
   143cc:	ldr	r5, [sp, #36]	; 0x24
   143d0:	str	ip, [sp, #16]
   143d4:	str	r5, [sp, #8]
   143d8:	ldr	r5, [sp, #32]
   143dc:	str	r4, [sp, #12]
   143e0:	str	r5, [sp, #4]
   143e4:	str	lr, [sp]
   143e8:	mov	r7, r0
   143ec:	bl	12d64 <__assert_fail@plt+0x1bd8>
   143f0:	ldr	r3, [sp, #24]
   143f4:	mov	r0, r7
   143f8:	str	r3, [r8]
   143fc:	add	sp, sp, #52	; 0x34
   14400:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14404:	mov	r3, #8
   14408:	sub	r2, r4, r2
   1440c:	str	r3, [sp]
   14410:	add	r1, sp, #44	; 0x2c
   14414:	add	r2, r2, #1
   14418:	mvn	r3, #-2147483648	; 0x80000000
   1441c:	bl	1531c <__assert_fail@plt+0x4190>
   14420:	mov	r6, r0
   14424:	ldm	r9, {r0, r1}
   14428:	str	r6, [r7]
   1442c:	stm	r6, {r0, r1}
   14430:	b	14300 <__assert_fail@plt+0x3174>
   14434:	bl	11174 <abort@plt>
   14438:	andeq	r8, r2, r8, lsr #2
   1443c:	andeq	r8, r2, r0, lsl r2
   14440:	push	{r4, r5, r6, lr}
   14444:	mov	r5, r0
   14448:	bl	11090 <__errno_location@plt>
   1444c:	cmp	r5, #0
   14450:	mov	r1, #48	; 0x30
   14454:	mov	r4, r0
   14458:	ldr	r0, [pc, #16]	; 14470 <__assert_fail@plt+0x32e4>
   1445c:	ldr	r6, [r4]
   14460:	movne	r0, r5
   14464:	bl	15618 <__assert_fail@plt+0x448c>
   14468:	str	r6, [r4]
   1446c:	pop	{r4, r5, r6, pc}
   14470:	andeq	r8, r2, r0, lsl r3
   14474:	ldr	r3, [pc, #12]	; 14488 <__assert_fail@plt+0x32fc>
   14478:	cmp	r0, #0
   1447c:	moveq	r0, r3
   14480:	ldr	r0, [r0]
   14484:	bx	lr
   14488:	andeq	r8, r2, r0, lsl r3
   1448c:	ldr	r3, [pc, #12]	; 144a0 <__assert_fail@plt+0x3314>
   14490:	cmp	r0, #0
   14494:	moveq	r0, r3
   14498:	str	r1, [r0]
   1449c:	bx	lr
   144a0:	andeq	r8, r2, r0, lsl r3
   144a4:	ldr	r3, [pc, #52]	; 144e0 <__assert_fail@plt+0x3354>
   144a8:	cmp	r0, #0
   144ac:	moveq	r0, r3
   144b0:	add	r3, r0, #8
   144b4:	push	{lr}		; (str lr, [sp, #-4]!)
   144b8:	lsr	lr, r1, #5
   144bc:	and	r1, r1, #31
   144c0:	ldr	ip, [r3, lr, lsl #2]
   144c4:	lsr	r0, ip, r1
   144c8:	eor	r2, r2, r0
   144cc:	and	r2, r2, #1
   144d0:	and	r0, r0, #1
   144d4:	eor	r1, ip, r2, lsl r1
   144d8:	str	r1, [r3, lr, lsl #2]
   144dc:	pop	{pc}		; (ldr pc, [sp], #4)
   144e0:	andeq	r8, r2, r0, lsl r3
   144e4:	ldr	r3, [pc, #16]	; 144fc <__assert_fail@plt+0x3370>
   144e8:	cmp	r0, #0
   144ec:	movne	r3, r0
   144f0:	ldr	r0, [r3, #4]
   144f4:	str	r1, [r3, #4]
   144f8:	bx	lr
   144fc:	andeq	r8, r2, r0, lsl r3
   14500:	ldr	r3, [pc, #44]	; 14534 <__assert_fail@plt+0x33a8>
   14504:	cmp	r0, #0
   14508:	moveq	r0, r3
   1450c:	mov	ip, #10
   14510:	cmp	r2, #0
   14514:	cmpne	r1, #0
   14518:	str	ip, [r0]
   1451c:	beq	1452c <__assert_fail@plt+0x33a0>
   14520:	str	r1, [r0, #40]	; 0x28
   14524:	str	r2, [r0, #44]	; 0x2c
   14528:	bx	lr
   1452c:	push	{r4, lr}
   14530:	bl	11174 <abort@plt>
   14534:	andeq	r8, r2, r0, lsl r3
   14538:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   1453c:	sub	sp, sp, #24
   14540:	ldr	ip, [pc, #108]	; 145b4 <__assert_fail@plt+0x3428>
   14544:	ldr	r4, [sp, #56]	; 0x38
   14548:	mov	r9, r2
   1454c:	cmp	r4, #0
   14550:	moveq	r4, ip
   14554:	mov	sl, r3
   14558:	mov	r7, r0
   1455c:	mov	r8, r1
   14560:	bl	11090 <__errno_location@plt>
   14564:	ldr	r3, [r4, #44]	; 0x2c
   14568:	mov	r1, r8
   1456c:	ldr	r6, [r0]
   14570:	str	r3, [sp, #16]
   14574:	ldr	r2, [r4, #40]	; 0x28
   14578:	add	r3, r4, #8
   1457c:	str	r3, [sp, #8]
   14580:	str	r2, [sp, #12]
   14584:	ldr	r2, [r4, #4]
   14588:	mov	r5, r0
   1458c:	str	r2, [sp, #4]
   14590:	ldr	ip, [r4]
   14594:	mov	r3, sl
   14598:	mov	r2, r9
   1459c:	mov	r0, r7
   145a0:	str	ip, [sp]
   145a4:	bl	12d64 <__assert_fail@plt+0x1bd8>
   145a8:	str	r6, [r5]
   145ac:	add	sp, sp, #24
   145b0:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   145b4:	andeq	r8, r2, r0, lsl r3
   145b8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   145bc:	cmp	r3, #0
   145c0:	sub	sp, sp, #44	; 0x2c
   145c4:	ldr	r4, [pc, #192]	; 1468c <__assert_fail@plt+0x3500>
   145c8:	mov	r6, r2
   145cc:	movne	r4, r3
   145d0:	mov	r9, r1
   145d4:	mov	r8, r0
   145d8:	bl	11090 <__errno_location@plt>
   145dc:	ldr	r3, [r4, #44]	; 0x2c
   145e0:	ldr	r5, [r4, #4]
   145e4:	add	sl, r4, #8
   145e8:	cmp	r6, #0
   145ec:	orreq	r5, r5, #1
   145f0:	mov	r1, #0
   145f4:	ldr	r2, [r0]
   145f8:	str	r3, [sp, #16]
   145fc:	ldr	r3, [r4, #40]	; 0x28
   14600:	stmib	sp, {r5, sl}
   14604:	str	r3, [sp, #12]
   14608:	ldr	r3, [r4]
   1460c:	mov	r7, r0
   14610:	str	r2, [sp, #28]
   14614:	str	r3, [sp]
   14618:	mov	r2, r8
   1461c:	mov	r3, r9
   14620:	mov	r0, r1
   14624:	bl	12d64 <__assert_fail@plt+0x1bd8>
   14628:	add	r1, r0, #1
   1462c:	mov	fp, r0
   14630:	mov	r0, r1
   14634:	str	r1, [sp, #36]	; 0x24
   14638:	bl	151b8 <__assert_fail@plt+0x402c>
   1463c:	ldr	r3, [r4, #44]	; 0x2c
   14640:	mov	r2, r8
   14644:	str	r3, [sp, #16]
   14648:	ldr	r3, [r4, #40]	; 0x28
   1464c:	str	r5, [sp, #4]
   14650:	str	r3, [sp, #12]
   14654:	str	sl, [sp, #8]
   14658:	ldr	ip, [r4]
   1465c:	ldr	r1, [sp, #36]	; 0x24
   14660:	mov	r3, r9
   14664:	str	ip, [sp]
   14668:	str	r0, [sp, #32]
   1466c:	bl	12d64 <__assert_fail@plt+0x1bd8>
   14670:	ldr	r2, [sp, #28]
   14674:	cmp	r6, #0
   14678:	str	r2, [r7]
   1467c:	ldr	r0, [sp, #32]
   14680:	strne	fp, [r6]
   14684:	add	sp, sp, #44	; 0x2c
   14688:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1468c:	andeq	r8, r2, r0, lsl r3
   14690:	mov	r3, r2
   14694:	mov	r2, #0
   14698:	b	145b8 <__assert_fail@plt+0x342c>
   1469c:	push	{r4, r5, r6, r7, r8, lr}
   146a0:	ldr	r6, [pc, #116]	; 1471c <__assert_fail@plt+0x3590>
   146a4:	ldr	r3, [r6, #4]
   146a8:	ldr	r7, [r6]
   146ac:	cmp	r3, #1
   146b0:	movgt	r5, r7
   146b4:	movgt	r4, #1
   146b8:	ble	146d8 <__assert_fail@plt+0x354c>
   146bc:	ldr	r0, [r5, #12]
   146c0:	bl	129dc <__assert_fail@plt+0x1850>
   146c4:	ldr	r3, [r6, #4]
   146c8:	add	r4, r4, #1
   146cc:	cmp	r3, r4
   146d0:	add	r5, r5, #8
   146d4:	bgt	146bc <__assert_fail@plt+0x3530>
   146d8:	ldr	r0, [r7, #4]
   146dc:	ldr	r4, [pc, #60]	; 14720 <__assert_fail@plt+0x3594>
   146e0:	cmp	r0, r4
   146e4:	beq	146f8 <__assert_fail@plt+0x356c>
   146e8:	bl	129dc <__assert_fail@plt+0x1850>
   146ec:	mov	r3, #256	; 0x100
   146f0:	str	r4, [r6, #12]
   146f4:	str	r3, [r6, #8]
   146f8:	ldr	r4, [pc, #36]	; 14724 <__assert_fail@plt+0x3598>
   146fc:	cmp	r7, r4
   14700:	beq	14710 <__assert_fail@plt+0x3584>
   14704:	mov	r0, r7
   14708:	bl	129dc <__assert_fail@plt+0x1850>
   1470c:	str	r4, [r6]
   14710:	mov	r3, #1
   14714:	str	r3, [r6, #4]
   14718:	pop	{r4, r5, r6, r7, r8, pc}
   1471c:	andeq	r8, r2, r8, lsr #2
   14720:	andeq	r8, r2, r0, lsl r2
   14724:	andeq	r8, r2, r0, lsr r1
   14728:	ldr	r3, [pc, #4]	; 14734 <__assert_fail@plt+0x35a8>
   1472c:	mvn	r2, #0
   14730:	b	14278 <__assert_fail@plt+0x30ec>
   14734:	andeq	r8, r2, r0, lsl r3
   14738:	ldr	r3, [pc]	; 14740 <__assert_fail@plt+0x35b4>
   1473c:	b	14278 <__assert_fail@plt+0x30ec>
   14740:	andeq	r8, r2, r0, lsl r3
   14744:	mov	r1, r0
   14748:	ldr	r3, [pc, #8]	; 14758 <__assert_fail@plt+0x35cc>
   1474c:	mvn	r2, #0
   14750:	mov	r0, #0
   14754:	b	14278 <__assert_fail@plt+0x30ec>
   14758:	andeq	r8, r2, r0, lsl r3
   1475c:	mov	r2, r1
   14760:	ldr	r3, [pc, #8]	; 14770 <__assert_fail@plt+0x35e4>
   14764:	mov	r1, r0
   14768:	mov	r0, #0
   1476c:	b	14278 <__assert_fail@plt+0x30ec>
   14770:	andeq	r8, r2, r0, lsl r3
   14774:	push	{r4, r5, lr}
   14778:	sub	sp, sp, #52	; 0x34
   1477c:	mov	r5, r2
   14780:	mov	r4, r0
   14784:	mov	r0, sp
   14788:	bl	12c14 <__assert_fail@plt+0x1a88>
   1478c:	mov	r3, sp
   14790:	mov	r1, r5
   14794:	mov	r0, r4
   14798:	mvn	r2, #0
   1479c:	bl	14278 <__assert_fail@plt+0x30ec>
   147a0:	add	sp, sp, #52	; 0x34
   147a4:	pop	{r4, r5, pc}
   147a8:	push	{r4, r5, r6, lr}
   147ac:	sub	sp, sp, #48	; 0x30
   147b0:	mov	r5, r2
   147b4:	mov	r6, r3
   147b8:	mov	r4, r0
   147bc:	mov	r0, sp
   147c0:	bl	12c14 <__assert_fail@plt+0x1a88>
   147c4:	mov	r3, sp
   147c8:	mov	r2, r6
   147cc:	mov	r1, r5
   147d0:	mov	r0, r4
   147d4:	bl	14278 <__assert_fail@plt+0x30ec>
   147d8:	add	sp, sp, #48	; 0x30
   147dc:	pop	{r4, r5, r6, pc}
   147e0:	mov	r2, r1
   147e4:	mov	r1, r0
   147e8:	mov	r0, #0
   147ec:	b	14774 <__assert_fail@plt+0x35e8>
   147f0:	mov	r3, r2
   147f4:	mov	r2, r1
   147f8:	mov	r1, r0
   147fc:	mov	r0, #0
   14800:	b	147a8 <__assert_fail@plt+0x361c>
   14804:	push	{r4, r5, r6, r7, r8, lr}
   14808:	mov	r7, r0
   1480c:	ldr	lr, [pc, #100]	; 14878 <__assert_fail@plt+0x36ec>
   14810:	mov	r8, r1
   14814:	mov	r4, r2
   14818:	ldm	lr!, {r0, r1, r2, r3}
   1481c:	sub	sp, sp, #48	; 0x30
   14820:	mov	ip, sp
   14824:	lsr	r5, r4, #5
   14828:	stmia	ip!, {r0, r1, r2, r3}
   1482c:	add	r6, sp, #8
   14830:	ldm	lr!, {r0, r1, r2, r3}
   14834:	and	r4, r4, #31
   14838:	stmia	ip!, {r0, r1, r2, r3}
   1483c:	ldm	lr, {r0, r1, r2, r3}
   14840:	stm	ip, {r0, r1, r2, r3}
   14844:	mov	r2, r8
   14848:	ldr	lr, [r6, r5, lsl #2]
   1484c:	mov	r1, r7
   14850:	mov	r3, sp
   14854:	lsr	ip, lr, r4
   14858:	eor	ip, ip, #1
   1485c:	and	ip, ip, #1
   14860:	mov	r0, #0
   14864:	eor	r4, lr, ip, lsl r4
   14868:	str	r4, [r6, r5, lsl #2]
   1486c:	bl	14278 <__assert_fail@plt+0x30ec>
   14870:	add	sp, sp, #48	; 0x30
   14874:	pop	{r4, r5, r6, r7, r8, pc}
   14878:	andeq	r8, r2, r0, lsl r3
   1487c:	mov	r2, r1
   14880:	mvn	r1, #0
   14884:	b	14804 <__assert_fail@plt+0x3678>
   14888:	mov	r2, #58	; 0x3a
   1488c:	mvn	r1, #0
   14890:	b	14804 <__assert_fail@plt+0x3678>
   14894:	mov	r2, #58	; 0x3a
   14898:	b	14804 <__assert_fail@plt+0x3678>
   1489c:	push	{r4, r5, r6, r7, lr}
   148a0:	sub	sp, sp, #100	; 0x64
   148a4:	mov	r6, r0
   148a8:	mov	r0, sp
   148ac:	mov	r7, r2
   148b0:	bl	12c14 <__assert_fail@plt+0x1a88>
   148b4:	mov	ip, sp
   148b8:	add	lr, sp, #48	; 0x30
   148bc:	ldm	ip!, {r0, r1, r2, r3}
   148c0:	stmia	lr!, {r0, r1, r2, r3}
   148c4:	ldm	ip!, {r0, r1, r2, r3}
   148c8:	ldr	r5, [sp, #60]	; 0x3c
   148cc:	stmia	lr!, {r0, r1, r2, r3}
   148d0:	mvn	r4, r5
   148d4:	ldm	ip, {r0, r1, r2, r3}
   148d8:	and	ip, r4, #67108864	; 0x4000000
   148dc:	eor	ip, ip, r5
   148e0:	str	ip, [sp, #60]	; 0x3c
   148e4:	stm	lr, {r0, r1, r2, r3}
   148e8:	mov	r1, r7
   148ec:	mov	r0, r6
   148f0:	add	r3, sp, #48	; 0x30
   148f4:	mvn	r2, #0
   148f8:	bl	14278 <__assert_fail@plt+0x30ec>
   148fc:	add	sp, sp, #100	; 0x64
   14900:	pop	{r4, r5, r6, r7, pc}
   14904:	push	{r4, r5, r6, r7, r8, lr}
   14908:	mov	r5, r1
   1490c:	ldr	lr, [pc, #100]	; 14978 <__assert_fail@plt+0x37ec>
   14910:	mov	r4, r2
   14914:	mov	r7, r0
   14918:	mov	r8, r3
   1491c:	ldm	lr!, {r0, r1, r2, r3}
   14920:	sub	sp, sp, #48	; 0x30
   14924:	mov	ip, sp
   14928:	mov	r6, #10
   1492c:	stmia	ip!, {r0, r1, r2, r3}
   14930:	cmp	r4, #0
   14934:	cmpne	r5, #0
   14938:	ldm	lr!, {r0, r1, r2, r3}
   1493c:	str	r6, [sp]
   14940:	stmia	ip!, {r0, r1, r2, r3}
   14944:	ldm	lr, {r0, r1, r2, r3}
   14948:	stm	ip, {r0, r1, r2, r3}
   1494c:	beq	14974 <__assert_fail@plt+0x37e8>
   14950:	mov	r3, sp
   14954:	mov	r1, r8
   14958:	mov	r0, r7
   1495c:	ldr	r2, [sp, #72]	; 0x48
   14960:	str	r5, [sp, #40]	; 0x28
   14964:	str	r4, [sp, #44]	; 0x2c
   14968:	bl	14278 <__assert_fail@plt+0x30ec>
   1496c:	add	sp, sp, #48	; 0x30
   14970:	pop	{r4, r5, r6, r7, r8, pc}
   14974:	bl	11174 <abort@plt>
   14978:	andeq	r8, r2, r0, lsl r3
   1497c:	push	{lr}		; (str lr, [sp, #-4]!)
   14980:	sub	sp, sp, #12
   14984:	mvn	ip, #0
   14988:	str	ip, [sp]
   1498c:	bl	14904 <__assert_fail@plt+0x3778>
   14990:	add	sp, sp, #12
   14994:	pop	{pc}		; (ldr pc, [sp], #4)
   14998:	push	{lr}		; (str lr, [sp, #-4]!)
   1499c:	sub	sp, sp, #12
   149a0:	mvn	ip, #0
   149a4:	mov	r3, r2
   149a8:	str	ip, [sp]
   149ac:	mov	r2, r1
   149b0:	mov	r1, r0
   149b4:	mov	r0, #0
   149b8:	bl	14904 <__assert_fail@plt+0x3778>
   149bc:	add	sp, sp, #12
   149c0:	pop	{pc}		; (ldr pc, [sp], #4)
   149c4:	push	{lr}		; (str lr, [sp, #-4]!)
   149c8:	sub	sp, sp, #12
   149cc:	str	r3, [sp]
   149d0:	mov	r3, r2
   149d4:	mov	r2, r1
   149d8:	mov	r1, r0
   149dc:	mov	r0, #0
   149e0:	bl	14904 <__assert_fail@plt+0x3778>
   149e4:	add	sp, sp, #12
   149e8:	pop	{pc}		; (ldr pc, [sp], #4)
   149ec:	ldr	r3, [pc]	; 149f4 <__assert_fail@plt+0x3868>
   149f0:	b	14278 <__assert_fail@plt+0x30ec>
   149f4:	andeq	r8, r2, r8, lsr r1
   149f8:	mov	r2, r1
   149fc:	ldr	r3, [pc, #8]	; 14a0c <__assert_fail@plt+0x3880>
   14a00:	mov	r1, r0
   14a04:	mov	r0, #0
   14a08:	b	14278 <__assert_fail@plt+0x30ec>
   14a0c:	andeq	r8, r2, r8, lsr r1
   14a10:	ldr	r3, [pc, #4]	; 14a1c <__assert_fail@plt+0x3890>
   14a14:	mvn	r2, #0
   14a18:	b	14278 <__assert_fail@plt+0x30ec>
   14a1c:	andeq	r8, r2, r8, lsr r1
   14a20:	mov	r1, r0
   14a24:	ldr	r3, [pc, #8]	; 14a34 <__assert_fail@plt+0x38a8>
   14a28:	mvn	r2, #0
   14a2c:	mov	r0, #0
   14a30:	b	14278 <__assert_fail@plt+0x30ec>
   14a34:	andeq	r8, r2, r8, lsr r1
   14a38:	push	{r4, r5, r6, lr}
   14a3c:	mov	r5, r0
   14a40:	mov	r0, #33	; 0x21
   14a44:	bl	15190 <__assert_fail@plt+0x4004>
   14a48:	add	r1, r5, #44	; 0x2c
   14a4c:	mov	r2, #32
   14a50:	mov	r5, #0
   14a54:	mov	r4, r0
   14a58:	bl	110c0 <strncpy@plt>
   14a5c:	mov	r0, r4
   14a60:	strb	r5, [r4, #32]
   14a64:	bl	11078 <strlen@plt>
   14a68:	add	r0, r4, r0
   14a6c:	cmp	r4, r0
   14a70:	bcs	14a80 <__assert_fail@plt+0x38f4>
   14a74:	ldrb	r3, [r0, #-1]
   14a78:	cmp	r3, #32
   14a7c:	beq	14a88 <__assert_fail@plt+0x38fc>
   14a80:	mov	r0, r4
   14a84:	pop	{r4, r5, r6, pc}
   14a88:	sub	r0, r0, #1
   14a8c:	cmp	r0, r4
   14a90:	strb	r5, [r0]
   14a94:	beq	14a80 <__assert_fail@plt+0x38f4>
   14a98:	ldrb	r3, [r0, #-1]!
   14a9c:	cmp	r3, #32
   14aa0:	beq	14a8c <__assert_fail@plt+0x3900>
   14aa4:	mov	r0, r4
   14aa8:	pop	{r4, r5, r6, pc}
   14aac:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   14ab0:	sub	sp, sp, #28
   14ab4:	add	fp, sp, #24
   14ab8:	mov	ip, #0
   14abc:	mov	r8, r3
   14ac0:	mov	r7, ip
   14ac4:	str	r1, [sp, #8]
   14ac8:	str	r2, [sp, #12]
   14acc:	str	ip, [fp, #-4]!
   14ad0:	mov	sl, ip
   14ad4:	bl	10ed4 <utmpxname@plt>
   14ad8:	bl	10f64 <setutxent@plt>
   14adc:	and	r6, r8, #2
   14ae0:	mov	r5, r7
   14ae4:	mov	r9, r7
   14ae8:	and	r8, r8, #1
   14aec:	bl	11180 <getutxent@plt>
   14af0:	subs	r4, r0, #0
   14af4:	beq	14b54 <__assert_fail@plt+0x39c8>
   14af8:	ldrb	r2, [r4, #44]	; 0x2c
   14afc:	ldrsh	r3, [r4]
   14b00:	cmp	r2, #0
   14b04:	sub	r3, r3, #7
   14b08:	clz	r3, r3
   14b0c:	lsr	r3, r3, #5
   14b10:	moveq	r3, #0
   14b14:	cmp	r3, #0
   14b18:	bne	14b74 <__assert_fail@plt+0x39e8>
   14b1c:	cmp	r6, #0
   14b20:	bne	14aec <__assert_fail@plt+0x3960>
   14b24:	ldr	r3, [sp, #20]
   14b28:	cmp	r5, r3
   14b2c:	beq	14bb4 <__assert_fail@plt+0x3a28>
   14b30:	mov	r1, r4
   14b34:	mov	r2, #384	; 0x180
   14b38:	add	r0, sl, r7
   14b3c:	bl	10f04 <memcpy@plt>
   14b40:	bl	11180 <getutxent@plt>
   14b44:	add	r5, r5, #1
   14b48:	add	r7, r7, #384	; 0x180
   14b4c:	subs	r4, r0, #0
   14b50:	bne	14af8 <__assert_fail@plt+0x396c>
   14b54:	bl	11108 <endutxent@plt>
   14b58:	ldr	r3, [sp, #8]
   14b5c:	mov	r0, r4
   14b60:	str	r5, [r3]
   14b64:	ldr	r3, [sp, #12]
   14b68:	str	sl, [r3]
   14b6c:	add	sp, sp, #28
   14b70:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14b74:	cmp	r8, #0
   14b78:	beq	14b24 <__assert_fail@plt+0x3998>
   14b7c:	ldr	r0, [r4, #4]
   14b80:	cmp	r0, #0
   14b84:	ble	14b24 <__assert_fail@plt+0x3998>
   14b88:	mov	r1, r9
   14b8c:	bl	11048 <kill@plt>
   14b90:	cmp	r0, #0
   14b94:	bge	14b24 <__assert_fail@plt+0x3998>
   14b98:	bl	11090 <__errno_location@plt>
   14b9c:	ldr	r3, [r0]
   14ba0:	cmp	r3, #3
   14ba4:	beq	14aec <__assert_fail@plt+0x3960>
   14ba8:	ldr	r3, [sp, #20]
   14bac:	cmp	r5, r3
   14bb0:	bne	14b30 <__assert_fail@plt+0x39a4>
   14bb4:	mov	r3, #384	; 0x180
   14bb8:	str	r3, [sp]
   14bbc:	mov	r0, sl
   14bc0:	mvn	r3, #0
   14bc4:	mov	r2, #1
   14bc8:	mov	r1, fp
   14bcc:	bl	1531c <__assert_fail@plt+0x4190>
   14bd0:	mov	sl, r0
   14bd4:	b	14b30 <__assert_fail@plt+0x39a4>
   14bd8:	push	{r4, r5, r6, lr}
   14bdc:	mov	r5, r1
   14be0:	mov	r1, #0
   14be4:	mov	r4, r2
   14be8:	bl	11114 <setlocale@plt>
   14bec:	subs	r6, r0, #0
   14bf0:	beq	14c4c <__assert_fail@plt+0x3ac0>
   14bf4:	bl	11078 <strlen@plt>
   14bf8:	cmp	r4, r0
   14bfc:	bhi	14c34 <__assert_fail@plt+0x3aa8>
   14c00:	cmp	r4, #0
   14c04:	bne	14c10 <__assert_fail@plt+0x3a84>
   14c08:	mov	r0, #34	; 0x22
   14c0c:	pop	{r4, r5, r6, pc}
   14c10:	sub	r4, r4, #1
   14c14:	mov	r1, r6
   14c18:	mov	r2, r4
   14c1c:	mov	r0, r5
   14c20:	bl	10f04 <memcpy@plt>
   14c24:	mov	r3, #0
   14c28:	strb	r3, [r5, r4]
   14c2c:	mov	r0, #34	; 0x22
   14c30:	pop	{r4, r5, r6, pc}
   14c34:	add	r2, r0, #1
   14c38:	mov	r1, r6
   14c3c:	mov	r0, r5
   14c40:	bl	10f04 <memcpy@plt>
   14c44:	mov	r0, #0
   14c48:	pop	{r4, r5, r6, pc}
   14c4c:	cmp	r4, #0
   14c50:	beq	14c60 <__assert_fail@plt+0x3ad4>
   14c54:	strb	r6, [r5]
   14c58:	mov	r0, #22
   14c5c:	pop	{r4, r5, r6, pc}
   14c60:	mov	r0, #22
   14c64:	pop	{r4, r5, r6, pc}
   14c68:	mov	r1, #0
   14c6c:	b	11114 <setlocale@plt>
   14c70:	push	{r4, r5, r6, lr}
   14c74:	sub	sp, sp, #32
   14c78:	cmp	r1, #0
   14c7c:	mov	r4, r0
   14c80:	ldr	r5, [sp, #48]	; 0x30
   14c84:	ldr	r6, [sp, #52]	; 0x34
   14c88:	beq	14fa0 <__assert_fail@plt+0x3e14>
   14c8c:	stm	sp, {r2, r3}
   14c90:	mov	r3, r1
   14c94:	ldr	r2, [pc, #808]	; 14fc4 <__assert_fail@plt+0x3e38>
   14c98:	mov	r1, #1
   14c9c:	bl	110e4 <__fprintf_chk@plt>
   14ca0:	mov	r2, #5
   14ca4:	ldr	r1, [pc, #796]	; 14fc8 <__assert_fail@plt+0x3e3c>
   14ca8:	mov	r0, #0
   14cac:	bl	10f4c <dcgettext@plt>
   14cb0:	ldr	r3, [pc, #788]	; 14fcc <__assert_fail@plt+0x3e40>
   14cb4:	ldr	r2, [pc, #788]	; 14fd0 <__assert_fail@plt+0x3e44>
   14cb8:	str	r3, [sp]
   14cbc:	mov	r1, #1
   14cc0:	mov	r3, r0
   14cc4:	mov	r0, r4
   14cc8:	bl	110e4 <__fprintf_chk@plt>
   14ccc:	mov	r1, r4
   14cd0:	mov	r0, #10
   14cd4:	bl	10f40 <fputc_unlocked@plt>
   14cd8:	mov	r2, #5
   14cdc:	ldr	r1, [pc, #752]	; 14fd4 <__assert_fail@plt+0x3e48>
   14ce0:	mov	r0, #0
   14ce4:	bl	10f4c <dcgettext@plt>
   14ce8:	mov	r1, #1
   14cec:	ldr	r3, [pc, #740]	; 14fd8 <__assert_fail@plt+0x3e4c>
   14cf0:	mov	r2, r0
   14cf4:	mov	r0, r4
   14cf8:	bl	110e4 <__fprintf_chk@plt>
   14cfc:	mov	r1, r4
   14d00:	mov	r0, #10
   14d04:	bl	10f40 <fputc_unlocked@plt>
   14d08:	cmp	r6, #9
   14d0c:	ldrls	pc, [pc, r6, lsl #2]
   14d10:	b	14fb8 <__assert_fail@plt+0x3e2c>
   14d14:	muleq	r1, r8, sp
   14d18:	andeq	r4, r1, r0, lsr #27
   14d1c:	andeq	r4, r1, ip, asr #27
   14d20:	andeq	r4, r1, r0, lsl #28
   14d24:	andeq	r4, r1, ip, lsr lr
   14d28:	andeq	r4, r1, r8, ror lr
   14d2c:			; <UNDEFINED> instruction: 0x00014eb4
   14d30:	strdeq	r4, [r1], -r8
   14d34:	andeq	r4, r1, r8, asr #30
   14d38:	andeq	r4, r1, ip, lsr sp
   14d3c:	ldr	r1, [pc, #664]	; 14fdc <__assert_fail@plt+0x3e50>
   14d40:	mov	r2, #5
   14d44:	mov	r0, #0
   14d48:	bl	10f4c <dcgettext@plt>
   14d4c:	ldr	ip, [r5, #32]
   14d50:	ldr	r1, [r5, #28]
   14d54:	ldr	r2, [r5, #24]
   14d58:	ldr	r3, [r5]
   14d5c:	ldr	r6, [r5, #20]
   14d60:	str	ip, [sp, #28]
   14d64:	ldr	lr, [r5, #16]
   14d68:	str	r1, [sp, #24]
   14d6c:	ldr	ip, [r5, #12]
   14d70:	str	r2, [sp, #20]
   14d74:	ldr	r1, [r5, #8]
   14d78:	ldr	r2, [r5, #4]
   14d7c:	str	r6, [sp, #16]
   14d80:	stmib	sp, {r1, ip, lr}
   14d84:	mov	r1, #1
   14d88:	str	r2, [sp]
   14d8c:	mov	r2, r0
   14d90:	mov	r0, r4
   14d94:	bl	110e4 <__fprintf_chk@plt>
   14d98:	add	sp, sp, #32
   14d9c:	pop	{r4, r5, r6, pc}
   14da0:	mov	r2, #5
   14da4:	ldr	r1, [pc, #564]	; 14fe0 <__assert_fail@plt+0x3e54>
   14da8:	mov	r0, #0
   14dac:	bl	10f4c <dcgettext@plt>
   14db0:	ldr	r3, [r5]
   14db4:	mov	r1, #1
   14db8:	mov	r2, r0
   14dbc:	mov	r0, r4
   14dc0:	add	sp, sp, #32
   14dc4:	pop	{r4, r5, r6, lr}
   14dc8:	b	110e4 <__fprintf_chk@plt>
   14dcc:	mov	r2, #5
   14dd0:	ldr	r1, [pc, #524]	; 14fe4 <__assert_fail@plt+0x3e58>
   14dd4:	mov	r0, #0
   14dd8:	bl	10f4c <dcgettext@plt>
   14ddc:	ldr	r2, [r5, #4]
   14de0:	ldr	r3, [r5]
   14de4:	mov	r1, #1
   14de8:	str	r2, [sp, #48]	; 0x30
   14dec:	mov	r2, r0
   14df0:	mov	r0, r4
   14df4:	add	sp, sp, #32
   14df8:	pop	{r4, r5, r6, lr}
   14dfc:	b	110e4 <__fprintf_chk@plt>
   14e00:	mov	r2, #5
   14e04:	ldr	r1, [pc, #476]	; 14fe8 <__assert_fail@plt+0x3e5c>
   14e08:	mov	r0, #0
   14e0c:	bl	10f4c <dcgettext@plt>
   14e10:	ldr	r1, [r5, #8]
   14e14:	ldr	r2, [r5, #4]
   14e18:	ldr	r3, [r5]
   14e1c:	str	r1, [sp, #52]	; 0x34
   14e20:	str	r2, [sp, #48]	; 0x30
   14e24:	mov	r1, #1
   14e28:	mov	r2, r0
   14e2c:	mov	r0, r4
   14e30:	add	sp, sp, #32
   14e34:	pop	{r4, r5, r6, lr}
   14e38:	b	110e4 <__fprintf_chk@plt>
   14e3c:	mov	r2, #5
   14e40:	ldr	r1, [pc, #420]	; 14fec <__assert_fail@plt+0x3e60>
   14e44:	mov	r0, #0
   14e48:	bl	10f4c <dcgettext@plt>
   14e4c:	ldr	r1, [r5, #8]
   14e50:	ldr	ip, [r5, #12]
   14e54:	ldr	r2, [r5, #4]
   14e58:	ldr	r3, [r5]
   14e5c:	stmib	sp, {r1, ip}
   14e60:	str	r2, [sp]
   14e64:	mov	r1, #1
   14e68:	mov	r2, r0
   14e6c:	mov	r0, r4
   14e70:	bl	110e4 <__fprintf_chk@plt>
   14e74:	b	14d98 <__assert_fail@plt+0x3c0c>
   14e78:	mov	r2, #5
   14e7c:	ldr	r1, [pc, #364]	; 14ff0 <__assert_fail@plt+0x3e64>
   14e80:	mov	r0, #0
   14e84:	bl	10f4c <dcgettext@plt>
   14e88:	add	r1, r5, #8
   14e8c:	ldr	r2, [r5, #4]
   14e90:	ldm	r1, {r1, ip, lr}
   14e94:	ldr	r3, [r5]
   14e98:	str	r2, [sp]
   14e9c:	stmib	sp, {r1, ip, lr}
   14ea0:	mov	r1, #1
   14ea4:	mov	r2, r0
   14ea8:	mov	r0, r4
   14eac:	bl	110e4 <__fprintf_chk@plt>
   14eb0:	b	14d98 <__assert_fail@plt+0x3c0c>
   14eb4:	mov	r2, #5
   14eb8:	ldr	r1, [pc, #308]	; 14ff4 <__assert_fail@plt+0x3e68>
   14ebc:	mov	r0, #0
   14ec0:	bl	10f4c <dcgettext@plt>
   14ec4:	add	r1, r5, #8
   14ec8:	ldr	r2, [r5, #4]
   14ecc:	ldm	r1, {r1, ip, lr}
   14ed0:	ldr	r6, [r5, #20]
   14ed4:	ldr	r3, [r5]
   14ed8:	stmib	sp, {r1, ip, lr}
   14edc:	mov	r1, #1
   14ee0:	str	r2, [sp]
   14ee4:	str	r6, [sp, #16]
   14ee8:	mov	r2, r0
   14eec:	mov	r0, r4
   14ef0:	bl	110e4 <__fprintf_chk@plt>
   14ef4:	b	14d98 <__assert_fail@plt+0x3c0c>
   14ef8:	mov	r2, #5
   14efc:	ldr	r1, [pc, #244]	; 14ff8 <__assert_fail@plt+0x3e6c>
   14f00:	mov	r0, #0
   14f04:	bl	10f4c <dcgettext@plt>
   14f08:	ldr	r2, [r5, #24]
   14f0c:	ldr	r3, [r5]
   14f10:	ldr	r6, [r5, #20]
   14f14:	ldr	lr, [r5, #16]
   14f18:	ldr	ip, [r5, #12]
   14f1c:	str	r2, [sp, #20]
   14f20:	ldr	r1, [r5, #8]
   14f24:	ldr	r2, [r5, #4]
   14f28:	str	r6, [sp, #16]
   14f2c:	stmib	sp, {r1, ip, lr}
   14f30:	mov	r1, #1
   14f34:	str	r2, [sp]
   14f38:	mov	r2, r0
   14f3c:	mov	r0, r4
   14f40:	bl	110e4 <__fprintf_chk@plt>
   14f44:	b	14d98 <__assert_fail@plt+0x3c0c>
   14f48:	mov	r2, #5
   14f4c:	ldr	r1, [pc, #168]	; 14ffc <__assert_fail@plt+0x3e70>
   14f50:	mov	r0, #0
   14f54:	bl	10f4c <dcgettext@plt>
   14f58:	ldr	r1, [r5, #28]
   14f5c:	ldr	r2, [r5, #24]
   14f60:	ldr	r3, [r5]
   14f64:	ldr	r6, [r5, #20]
   14f68:	ldr	lr, [r5, #16]
   14f6c:	str	r1, [sp, #24]
   14f70:	ldr	ip, [r5, #12]
   14f74:	str	r2, [sp, #20]
   14f78:	ldr	r1, [r5, #8]
   14f7c:	ldr	r2, [r5, #4]
   14f80:	str	r6, [sp, #16]
   14f84:	stmib	sp, {r1, ip, lr}
   14f88:	mov	r1, #1
   14f8c:	str	r2, [sp]
   14f90:	mov	r2, r0
   14f94:	mov	r0, r4
   14f98:	bl	110e4 <__fprintf_chk@plt>
   14f9c:	b	14d98 <__assert_fail@plt+0x3c0c>
   14fa0:	str	r3, [sp]
   14fa4:	mov	r1, #1
   14fa8:	mov	r3, r2
   14fac:	ldr	r2, [pc, #76]	; 15000 <__assert_fail@plt+0x3e74>
   14fb0:	bl	110e4 <__fprintf_chk@plt>
   14fb4:	b	14ca0 <__assert_fail@plt+0x3b14>
   14fb8:	mov	r2, #5
   14fbc:	ldr	r1, [pc, #64]	; 15004 <__assert_fail@plt+0x3e78>
   14fc0:	b	14d44 <__assert_fail@plt+0x3bb8>
   14fc4:	andeq	r6, r1, ip, lsl #26
   14fc8:	andeq	r6, r1, r0, lsr #26
   14fcc:	andeq	r0, r0, r6, ror #15
   14fd0:	strdeq	r6, [r1], -r8
   14fd4:	andeq	r6, r1, r4, lsr #26
   14fd8:	ldrdeq	r6, [r1], -r0
   14fdc:	andeq	r6, r1, r0, lsl #30
   14fe0:	strdeq	r6, [r1], -r4
   14fe4:	andeq	r6, r1, r4, lsl #28
   14fe8:	andeq	r6, r1, ip, lsl lr
   14fec:	andeq	r6, r1, r8, lsr lr
   14ff0:	andeq	r6, r1, r8, asr lr
   14ff4:	andeq	r6, r1, ip, ror lr
   14ff8:	andeq	r6, r1, r4, lsr #29
   14ffc:	ldrdeq	r6, [r1], -r0
   15000:	andeq	r6, r1, r8, lsl sp
   15004:	andeq	r6, r1, r4, lsr pc
   15008:	push	{r4, r5, lr}
   1500c:	sub	sp, sp, #12
   15010:	ldr	r5, [sp, #24]
   15014:	ldr	ip, [r5]
   15018:	cmp	ip, #0
   1501c:	beq	15038 <__assert_fail@plt+0x3eac>
   15020:	mov	lr, r5
   15024:	mov	ip, #0
   15028:	ldr	r4, [lr, #4]!
   1502c:	add	ip, ip, #1
   15030:	cmp	r4, #0
   15034:	bne	15028 <__assert_fail@plt+0x3e9c>
   15038:	stm	sp, {r5, ip}
   1503c:	bl	14c70 <__assert_fail@plt+0x3ae4>
   15040:	add	sp, sp, #12
   15044:	pop	{r4, r5, pc}
   15048:	push	{r4, r5, lr}
   1504c:	sub	sp, sp, #52	; 0x34
   15050:	add	r5, sp, #4
   15054:	ldr	r4, [sp, #64]	; 0x40
   15058:	mov	ip, #0
   1505c:	sub	r4, r4, #4
   15060:	ldr	lr, [r4, #4]!
   15064:	cmp	lr, #0
   15068:	str	lr, [r5, #4]!
   1506c:	beq	1507c <__assert_fail@plt+0x3ef0>
   15070:	add	ip, ip, #1
   15074:	cmp	ip, #10
   15078:	bne	15060 <__assert_fail@plt+0x3ed4>
   1507c:	add	lr, sp, #8
   15080:	str	ip, [sp, #4]
   15084:	str	lr, [sp]
   15088:	bl	14c70 <__assert_fail@plt+0x3ae4>
   1508c:	add	sp, sp, #52	; 0x34
   15090:	pop	{r4, r5, pc}
   15094:	push	{r3}		; (str r3, [sp, #-4]!)
   15098:	push	{r4, lr}
   1509c:	sub	sp, sp, #60	; 0x3c
   150a0:	add	lr, sp, #56	; 0x38
   150a4:	add	r3, sp, #72	; 0x48
   150a8:	str	r3, [lr, #-44]!	; 0xffffffd4
   150ac:	add	r4, sp, #68	; 0x44
   150b0:	mov	r3, #0
   150b4:	ldr	ip, [r4, #4]!
   150b8:	cmp	ip, #0
   150bc:	str	ip, [lr, #4]!
   150c0:	beq	150d0 <__assert_fail@plt+0x3f44>
   150c4:	add	r3, r3, #1
   150c8:	cmp	r3, #10
   150cc:	bne	150b4 <__assert_fail@plt+0x3f28>
   150d0:	add	ip, sp, #16
   150d4:	str	r3, [sp, #4]
   150d8:	str	ip, [sp]
   150dc:	ldr	r3, [sp, #68]	; 0x44
   150e0:	bl	14c70 <__assert_fail@plt+0x3ae4>
   150e4:	add	sp, sp, #60	; 0x3c
   150e8:	pop	{r4, lr}
   150ec:	add	sp, sp, #4
   150f0:	bx	lr
   150f4:	ldr	r3, [pc, #116]	; 15170 <__assert_fail@plt+0x3fe4>
   150f8:	push	{r4, lr}
   150fc:	mov	r0, #10
   15100:	ldr	r1, [r3]
   15104:	bl	10f40 <fputc_unlocked@plt>
   15108:	mov	r2, #5
   1510c:	ldr	r1, [pc, #96]	; 15174 <__assert_fail@plt+0x3fe8>
   15110:	mov	r0, #0
   15114:	bl	10f4c <dcgettext@plt>
   15118:	ldr	r2, [pc, #88]	; 15178 <__assert_fail@plt+0x3fec>
   1511c:	mov	r1, r0
   15120:	mov	r0, #1
   15124:	bl	110cc <__printf_chk@plt>
   15128:	mov	r2, #5
   1512c:	ldr	r1, [pc, #72]	; 1517c <__assert_fail@plt+0x3ff0>
   15130:	mov	r0, #0
   15134:	bl	10f4c <dcgettext@plt>
   15138:	ldr	r3, [pc, #64]	; 15180 <__assert_fail@plt+0x3ff4>
   1513c:	ldr	r2, [pc, #64]	; 15184 <__assert_fail@plt+0x3ff8>
   15140:	mov	r1, r0
   15144:	mov	r0, #1
   15148:	bl	110cc <__printf_chk@plt>
   1514c:	mov	r2, #5
   15150:	ldr	r1, [pc, #48]	; 15188 <__assert_fail@plt+0x3ffc>
   15154:	mov	r0, #0
   15158:	bl	10f4c <dcgettext@plt>
   1515c:	ldr	r2, [pc, #40]	; 1518c <__assert_fail@plt+0x4000>
   15160:	pop	{r4, lr}
   15164:	mov	r1, r0
   15168:	mov	r0, #1
   1516c:	b	110cc <__printf_chk@plt>
   15170:	andeq	r8, r2, ip, ror r1
   15174:	andeq	r6, r1, r0, ror pc
   15178:	andeq	r6, r1, r4, lsl #31
   1517c:	muleq	r1, ip, pc	; <UNPREDICTABLE>
   15180:	andeq	r6, r1, ip, ror #18
   15184:	muleq	r1, r4, r9
   15188:			; <UNDEFINED> instruction: 0x00016fb0
   1518c:	ldrdeq	r6, [r1], -r8
   15190:	push	{r4, lr}
   15194:	bl	15760 <__assert_fail@plt+0x45d4>
   15198:	cmp	r0, #0
   1519c:	popne	{r4, pc}
   151a0:	bl	156d8 <__assert_fail@plt+0x454c>
   151a4:	push	{r4, lr}
   151a8:	bl	15760 <__assert_fail@plt+0x45d4>
   151ac:	cmp	r0, #0
   151b0:	popne	{r4, pc}
   151b4:	bl	156d8 <__assert_fail@plt+0x454c>
   151b8:	push	{r4, lr}
   151bc:	bl	15760 <__assert_fail@plt+0x45d4>
   151c0:	cmp	r0, #0
   151c4:	popne	{r4, pc}
   151c8:	bl	156d8 <__assert_fail@plt+0x454c>
   151cc:	push	{r4, r5, r6, lr}
   151d0:	mov	r5, r0
   151d4:	mov	r4, r1
   151d8:	bl	1578c <__assert_fail@plt+0x4600>
   151dc:	cmp	r0, #0
   151e0:	popne	{r4, r5, r6, pc}
   151e4:	adds	r4, r4, #0
   151e8:	movne	r4, #1
   151ec:	cmp	r5, #0
   151f0:	orreq	r4, r4, #1
   151f4:	cmp	r4, #0
   151f8:	popeq	{r4, r5, r6, pc}
   151fc:	bl	156d8 <__assert_fail@plt+0x454c>
   15200:	push	{r4, lr}
   15204:	cmp	r1, #0
   15208:	orreq	r1, r1, #1
   1520c:	bl	1578c <__assert_fail@plt+0x4600>
   15210:	cmp	r0, #0
   15214:	popne	{r4, pc}
   15218:	bl	156d8 <__assert_fail@plt+0x454c>
   1521c:	push	{r4, r5, r6, lr}
   15220:	mov	r6, r0
   15224:	mov	r5, r1
   15228:	mov	r4, r2
   1522c:	bl	15a8c <__assert_fail@plt+0x4900>
   15230:	cmp	r0, #0
   15234:	popne	{r4, r5, r6, pc}
   15238:	cmp	r6, #0
   1523c:	beq	1524c <__assert_fail@plt+0x40c0>
   15240:	cmp	r5, #0
   15244:	cmpne	r4, #0
   15248:	popeq	{r4, r5, r6, pc}
   1524c:	bl	156d8 <__assert_fail@plt+0x454c>
   15250:	b	1521c <__assert_fail@plt+0x4090>
   15254:	cmp	r2, #0
   15258:	cmpne	r1, #0
   1525c:	moveq	r2, #1
   15260:	moveq	r1, r2
   15264:	push	{r4, lr}
   15268:	bl	15a8c <__assert_fail@plt+0x4900>
   1526c:	cmp	r0, #0
   15270:	popne	{r4, pc}
   15274:	bl	156d8 <__assert_fail@plt+0x454c>
   15278:	mov	r2, r1
   1527c:	mov	r1, r0
   15280:	mov	r0, #0
   15284:	b	1521c <__assert_fail@plt+0x4090>
   15288:	mov	r2, r1
   1528c:	mov	r1, r0
   15290:	mov	r0, #0
   15294:	b	15254 <__assert_fail@plt+0x40c8>
   15298:	push	{r4, r5, r6, lr}
   1529c:	subs	r6, r0, #0
   152a0:	sub	sp, sp, #8
   152a4:	mov	r5, r1
   152a8:	ldr	r4, [r1]
   152ac:	beq	152e8 <__assert_fail@plt+0x415c>
   152b0:	lsr	r1, r4, #1
   152b4:	add	r3, r1, #1
   152b8:	mvn	r3, r3
   152bc:	cmp	r4, r3
   152c0:	bhi	152e4 <__assert_fail@plt+0x4158>
   152c4:	add	r4, r4, #1
   152c8:	add	r4, r4, r1
   152cc:	mov	r0, r6
   152d0:	mov	r1, r4
   152d4:	bl	1521c <__assert_fail@plt+0x4090>
   152d8:	str	r4, [r5]
   152dc:	add	sp, sp, #8
   152e0:	pop	{r4, r5, r6, pc}
   152e4:	bl	156d8 <__assert_fail@plt+0x454c>
   152e8:	cmp	r4, #0
   152ec:	bne	152cc <__assert_fail@plt+0x4140>
   152f0:	mov	r1, r2
   152f4:	mov	r0, #64	; 0x40
   152f8:	str	r2, [sp, #4]
   152fc:	bl	15ad8 <__assert_fail@plt+0x494c>
   15300:	ldr	r2, [sp, #4]
   15304:	cmp	r0, #0
   15308:	movne	r4, r0
   1530c:	addeq	r4, r0, #1
   15310:	b	152cc <__assert_fail@plt+0x4140>
   15314:	mov	r2, #1
   15318:	b	15298 <__assert_fail@plt+0x410c>
   1531c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   15320:	sub	sp, sp, #12
   15324:	ldr	r6, [r1]
   15328:	mov	sl, r1
   1532c:	mov	r9, r0
   15330:	asrs	r4, r6, #1
   15334:	mov	r5, r2
   15338:	mov	fp, r3
   1533c:	ldr	r7, [sp, #48]	; 0x30
   15340:	bmi	154ac <__assert_fail@plt+0x4320>
   15344:	mvn	r3, #-2147483648	; 0x80000000
   15348:	sub	r3, r3, r4
   1534c:	cmp	r6, r3
   15350:	movle	r3, #0
   15354:	movgt	r3, #1
   15358:	mvn	r8, fp
   1535c:	cmp	r3, #0
   15360:	addeq	r4, r4, r6
   15364:	mvnne	r4, #-2147483648	; 0x80000000
   15368:	lsr	r8, r8, #31
   1536c:	cmp	fp, r4
   15370:	movge	r3, #0
   15374:	andlt	r3, r8, #1
   15378:	cmp	r3, #0
   1537c:	beq	15464 <__assert_fail@plt+0x42d8>
   15380:	cmp	r7, #0
   15384:	blt	15534 <__assert_fail@plt+0x43a8>
   15388:	bne	1552c <__assert_fail@plt+0x43a0>
   1538c:	mov	r2, #64	; 0x40
   15390:	mov	r1, r7
   15394:	mov	r0, r2
   15398:	str	r2, [sp, #4]
   1539c:	bl	15ce4 <__assert_fail@plt+0x4b58>
   153a0:	ldr	r2, [sp, #4]
   153a4:	mov	r1, r7
   153a8:	mov	r4, r0
   153ac:	mov	r0, r2
   153b0:	bl	15f04 <__assert_fail@plt+0x4d78>
   153b4:	ldr	r2, [sp, #4]
   153b8:	sub	r1, r2, r1
   153bc:	cmp	r9, #0
   153c0:	sub	r3, r4, r6
   153c4:	streq	r9, [sl]
   153c8:	cmp	r3, r5
   153cc:	bge	15450 <__assert_fail@plt+0x42c4>
   153d0:	cmp	r5, #0
   153d4:	blt	154c0 <__assert_fail@plt+0x4334>
   153d8:	cmp	r6, #0
   153dc:	blt	153fc <__assert_fail@plt+0x4270>
   153e0:	mvn	r3, #-2147483648	; 0x80000000
   153e4:	sub	r3, r3, r5
   153e8:	cmp	r6, r3
   153ec:	movle	r3, #0
   153f0:	movgt	r3, #1
   153f4:	cmp	r3, #0
   153f8:	bne	155bc <__assert_fail@plt+0x4430>
   153fc:	add	r5, r6, r5
   15400:	cmp	fp, r5
   15404:	movge	r8, #0
   15408:	andlt	r8, r8, #1
   1540c:	cmp	r8, #0
   15410:	mov	r4, r5
   15414:	bne	155bc <__assert_fail@plt+0x4430>
   15418:	cmp	r7, #0
   1541c:	blt	154d4 <__assert_fail@plt+0x4348>
   15420:	beq	1544c <__assert_fail@plt+0x42c0>
   15424:	cmp	r5, #0
   15428:	blt	1557c <__assert_fail@plt+0x43f0>
   1542c:	mov	r1, r7
   15430:	mvn	r0, #-2147483648	; 0x80000000
   15434:	bl	15ce4 <__assert_fail@plt+0x4b58>
   15438:	cmp	r5, r0
   1543c:	movle	r0, #0
   15440:	movgt	r0, #1
   15444:	cmp	r0, #0
   15448:	bne	155bc <__assert_fail@plt+0x4430>
   1544c:	mul	r1, r5, r7
   15450:	mov	r0, r9
   15454:	bl	151cc <__assert_fail@plt+0x4040>
   15458:	str	r4, [sl]
   1545c:	add	sp, sp, #12
   15460:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15464:	cmp	r7, #0
   15468:	blt	15500 <__assert_fail@plt+0x4374>
   1546c:	beq	1538c <__assert_fail@plt+0x4200>
   15470:	cmp	r4, #0
   15474:	blt	1553c <__assert_fail@plt+0x43b0>
   15478:	mov	r1, r7
   1547c:	mvn	r0, #-2147483648	; 0x80000000
   15480:	bl	15ce4 <__assert_fail@plt+0x4b58>
   15484:	cmp	r0, r4
   15488:	movge	r0, #0
   1548c:	movlt	r0, #1
   15490:	cmp	r0, #0
   15494:	mvnne	r2, #-2147483648	; 0x80000000
   15498:	bne	15390 <__assert_fail@plt+0x4204>
   1549c:	mul	r1, r7, r4
   154a0:	cmp	r1, #63	; 0x3f
   154a4:	bgt	153bc <__assert_fail@plt+0x4230>
   154a8:	b	1538c <__assert_fail@plt+0x4200>
   154ac:	rsb	r3, r4, #-2147483648	; 0x80000000
   154b0:	cmp	r6, r3
   154b4:	movge	r3, #0
   154b8:	movlt	r3, #1
   154bc:	b	15358 <__assert_fail@plt+0x41cc>
   154c0:	rsb	r3, r5, #-2147483648	; 0x80000000
   154c4:	cmp	r6, r3
   154c8:	movge	r3, #0
   154cc:	movlt	r3, #1
   154d0:	b	153f4 <__assert_fail@plt+0x4268>
   154d4:	cmp	r5, #0
   154d8:	blt	15560 <__assert_fail@plt+0x43d4>
   154dc:	cmn	r7, #1
   154e0:	beq	1544c <__assert_fail@plt+0x42c0>
   154e4:	mov	r1, r7
   154e8:	mov	r0, #-2147483648	; 0x80000000
   154ec:	bl	15ce4 <__assert_fail@plt+0x4b58>
   154f0:	cmp	r5, r0
   154f4:	movle	r0, #0
   154f8:	movgt	r0, #1
   154fc:	b	15444 <__assert_fail@plt+0x42b8>
   15500:	cmp	r4, #0
   15504:	blt	155a0 <__assert_fail@plt+0x4414>
   15508:	cmn	r7, #1
   1550c:	beq	1549c <__assert_fail@plt+0x4310>
   15510:	mov	r1, r7
   15514:	mov	r0, #-2147483648	; 0x80000000
   15518:	bl	15ce4 <__assert_fail@plt+0x4b58>
   1551c:	cmp	r0, r4
   15520:	movge	r0, #0
   15524:	movlt	r0, #1
   15528:	b	15490 <__assert_fail@plt+0x4304>
   1552c:	mov	r4, fp
   15530:	b	15478 <__assert_fail@plt+0x42ec>
   15534:	mov	r4, fp
   15538:	b	15508 <__assert_fail@plt+0x437c>
   1553c:	cmn	r4, #1
   15540:	beq	1549c <__assert_fail@plt+0x4310>
   15544:	mov	r1, r4
   15548:	mov	r0, #-2147483648	; 0x80000000
   1554c:	bl	15ce4 <__assert_fail@plt+0x4b58>
   15550:	cmp	r7, r0
   15554:	movle	r0, #0
   15558:	movgt	r0, #1
   1555c:	b	15490 <__assert_fail@plt+0x4304>
   15560:	mov	r1, r7
   15564:	mvn	r0, #-2147483648	; 0x80000000
   15568:	bl	15ce4 <__assert_fail@plt+0x4b58>
   1556c:	cmp	r5, r0
   15570:	movge	r0, #0
   15574:	movlt	r0, #1
   15578:	b	15444 <__assert_fail@plt+0x42b8>
   1557c:	cmn	r5, #1
   15580:	beq	1544c <__assert_fail@plt+0x42c0>
   15584:	mov	r1, r5
   15588:	mov	r0, #-2147483648	; 0x80000000
   1558c:	bl	15ce4 <__assert_fail@plt+0x4b58>
   15590:	cmp	r7, r0
   15594:	movle	r0, #0
   15598:	movgt	r0, #1
   1559c:	b	15444 <__assert_fail@plt+0x42b8>
   155a0:	mov	r1, r7
   155a4:	mvn	r0, #-2147483648	; 0x80000000
   155a8:	bl	15ce4 <__assert_fail@plt+0x4b58>
   155ac:	cmp	r0, r4
   155b0:	movle	r0, #0
   155b4:	movgt	r0, #1
   155b8:	b	15490 <__assert_fail@plt+0x4304>
   155bc:	bl	156d8 <__assert_fail@plt+0x454c>
   155c0:	push	{r4, lr}
   155c4:	mov	r1, #1
   155c8:	bl	15718 <__assert_fail@plt+0x458c>
   155cc:	cmp	r0, #0
   155d0:	popne	{r4, pc}
   155d4:	bl	156d8 <__assert_fail@plt+0x454c>
   155d8:	push	{r4, lr}
   155dc:	mov	r1, #1
   155e0:	bl	15718 <__assert_fail@plt+0x458c>
   155e4:	cmp	r0, #0
   155e8:	popne	{r4, pc}
   155ec:	bl	156d8 <__assert_fail@plt+0x454c>
   155f0:	push	{r4, lr}
   155f4:	bl	15718 <__assert_fail@plt+0x458c>
   155f8:	cmp	r0, #0
   155fc:	popne	{r4, pc}
   15600:	bl	156d8 <__assert_fail@plt+0x454c>
   15604:	push	{r4, lr}
   15608:	bl	15718 <__assert_fail@plt+0x458c>
   1560c:	cmp	r0, #0
   15610:	popne	{r4, pc}
   15614:	bl	156d8 <__assert_fail@plt+0x454c>
   15618:	push	{r4, r5, r6, lr}
   1561c:	mov	r6, r0
   15620:	mov	r0, r1
   15624:	mov	r4, r1
   15628:	bl	15760 <__assert_fail@plt+0x45d4>
   1562c:	subs	r5, r0, #0
   15630:	beq	15648 <__assert_fail@plt+0x44bc>
   15634:	mov	r2, r4
   15638:	mov	r1, r6
   1563c:	bl	10f04 <memcpy@plt>
   15640:	mov	r0, r5
   15644:	pop	{r4, r5, r6, pc}
   15648:	bl	156d8 <__assert_fail@plt+0x454c>
   1564c:	push	{r4, r5, r6, lr}
   15650:	mov	r6, r0
   15654:	mov	r0, r1
   15658:	mov	r4, r1
   1565c:	bl	15760 <__assert_fail@plt+0x45d4>
   15660:	subs	r5, r0, #0
   15664:	beq	1567c <__assert_fail@plt+0x44f0>
   15668:	mov	r2, r4
   1566c:	mov	r1, r6
   15670:	bl	10f04 <memcpy@plt>
   15674:	mov	r0, r5
   15678:	pop	{r4, r5, r6, pc}
   1567c:	bl	156d8 <__assert_fail@plt+0x454c>
   15680:	push	{r4, r5, r6, lr}
   15684:	mov	r6, r0
   15688:	add	r0, r1, #1
   1568c:	mov	r4, r1
   15690:	bl	15760 <__assert_fail@plt+0x45d4>
   15694:	subs	r5, r0, #0
   15698:	beq	156b8 <__assert_fail@plt+0x452c>
   1569c:	mov	r3, #0
   156a0:	mov	r1, r6
   156a4:	strb	r3, [r5, r4]
   156a8:	mov	r2, r4
   156ac:	bl	10f04 <memcpy@plt>
   156b0:	mov	r0, r5
   156b4:	pop	{r4, r5, r6, pc}
   156b8:	bl	156d8 <__assert_fail@plt+0x454c>
   156bc:	push	{r4, lr}
   156c0:	mov	r4, r0
   156c4:	bl	11078 <strlen@plt>
   156c8:	add	r1, r0, #1
   156cc:	mov	r0, r4
   156d0:	pop	{r4, lr}
   156d4:	b	15618 <__assert_fail@plt+0x448c>
   156d8:	ldr	r3, [pc, #44]	; 1570c <__assert_fail@plt+0x4580>
   156dc:	push	{r4, lr}
   156e0:	mov	r2, #5
   156e4:	ldr	r1, [pc, #36]	; 15710 <__assert_fail@plt+0x4584>
   156e8:	mov	r0, #0
   156ec:	ldr	r4, [r3]
   156f0:	bl	10f4c <dcgettext@plt>
   156f4:	ldr	r2, [pc, #24]	; 15714 <__assert_fail@plt+0x4588>
   156f8:	mov	r1, #0
   156fc:	mov	r3, r0
   15700:	mov	r0, r4
   15704:	bl	10fd0 <error@plt>
   15708:	bl	11174 <abort@plt>
   1570c:	andeq	r8, r2, r4, lsr #2
   15710:	andeq	r7, r1, r8, lsr #32
   15714:	andeq	r6, r1, r4, ror #23
   15718:	cmp	r1, #0
   1571c:	cmpne	r0, #0
   15720:	moveq	r1, #1
   15724:	moveq	r0, r1
   15728:	umull	r2, r3, r0, r1
   1572c:	adds	r3, r3, #0
   15730:	movne	r3, #1
   15734:	cmp	r2, #0
   15738:	blt	15748 <__assert_fail@plt+0x45bc>
   1573c:	cmp	r3, #0
   15740:	bne	15748 <__assert_fail@plt+0x45bc>
   15744:	b	10e98 <calloc@plt>
   15748:	push	{r4, lr}
   1574c:	bl	11090 <__errno_location@plt>
   15750:	mov	r3, #12
   15754:	str	r3, [r0]
   15758:	mov	r0, #0
   1575c:	pop	{r4, pc}
   15760:	cmp	r0, #0
   15764:	moveq	r0, #1
   15768:	cmp	r0, #0
   1576c:	blt	15774 <__assert_fail@plt+0x45e8>
   15770:	b	10ff4 <malloc@plt>
   15774:	push	{r4, lr}
   15778:	bl	11090 <__errno_location@plt>
   1577c:	mov	r3, #12
   15780:	str	r3, [r0]
   15784:	mov	r0, #0
   15788:	pop	{r4, pc}
   1578c:	cmp	r0, #0
   15790:	beq	157b4 <__assert_fail@plt+0x4628>
   15794:	cmp	r1, #0
   15798:	push	{lr}		; (str lr, [sp, #-4]!)
   1579c:	sub	sp, sp, #12
   157a0:	beq	157bc <__assert_fail@plt+0x4630>
   157a4:	blt	157d4 <__assert_fail@plt+0x4648>
   157a8:	add	sp, sp, #12
   157ac:	pop	{lr}		; (ldr lr, [sp], #4)
   157b0:	b	10f70 <realloc@plt>
   157b4:	mov	r0, r1
   157b8:	b	15760 <__assert_fail@plt+0x45d4>
   157bc:	str	r1, [sp, #4]
   157c0:	bl	129dc <__assert_fail@plt+0x1850>
   157c4:	ldr	r3, [sp, #4]
   157c8:	mov	r0, r3
   157cc:	add	sp, sp, #12
   157d0:	pop	{pc}		; (ldr pc, [sp], #4)
   157d4:	bl	11090 <__errno_location@plt>
   157d8:	mov	r2, #12
   157dc:	mov	r3, #0
   157e0:	str	r2, [r0]
   157e4:	b	157c8 <__assert_fail@plt+0x463c>
   157e8:	push	{r4, r5, r6, lr}
   157ec:	mov	r4, r0
   157f0:	bl	10fb8 <__fpending@plt>
   157f4:	ldr	r5, [r4]
   157f8:	and	r5, r5, #32
   157fc:	mov	r6, r0
   15800:	mov	r0, r4
   15804:	bl	15864 <__assert_fail@plt+0x46d8>
   15808:	cmp	r5, #0
   1580c:	mov	r4, r0
   15810:	bne	15830 <__assert_fail@plt+0x46a4>
   15814:	cmp	r0, #0
   15818:	beq	15828 <__assert_fail@plt+0x469c>
   1581c:	cmp	r6, #0
   15820:	beq	1584c <__assert_fail@plt+0x46c0>
   15824:	mvn	r4, #0
   15828:	mov	r0, r4
   1582c:	pop	{r4, r5, r6, pc}
   15830:	cmp	r0, #0
   15834:	bne	15824 <__assert_fail@plt+0x4698>
   15838:	bl	11090 <__errno_location@plt>
   1583c:	str	r4, [r0]
   15840:	mvn	r4, #0
   15844:	mov	r0, r4
   15848:	pop	{r4, r5, r6, pc}
   1584c:	bl	11090 <__errno_location@plt>
   15850:	ldr	r4, [r0]
   15854:	subs	r4, r4, #9
   15858:	mvnne	r4, #0
   1585c:	mov	r0, r4
   15860:	pop	{r4, r5, r6, pc}
   15864:	push	{r4, r5, lr}
   15868:	sub	sp, sp, #12
   1586c:	mov	r4, r0
   15870:	bl	110d8 <fileno@plt>
   15874:	cmp	r0, #0
   15878:	mov	r0, r4
   1587c:	blt	158f8 <__assert_fail@plt+0x476c>
   15880:	bl	11018 <__freading@plt>
   15884:	cmp	r0, #0
   15888:	bne	158c4 <__assert_fail@plt+0x4738>
   1588c:	mov	r0, r4
   15890:	bl	15904 <__assert_fail@plt+0x4778>
   15894:	cmp	r0, #0
   15898:	beq	158f4 <__assert_fail@plt+0x4768>
   1589c:	bl	11090 <__errno_location@plt>
   158a0:	mov	r5, r0
   158a4:	mov	r0, r4
   158a8:	ldr	r4, [r5]
   158ac:	bl	110f0 <fclose@plt>
   158b0:	cmp	r4, #0
   158b4:	mvnne	r0, #0
   158b8:	strne	r4, [r5]
   158bc:	add	sp, sp, #12
   158c0:	pop	{r4, r5, pc}
   158c4:	mov	r0, r4
   158c8:	bl	110d8 <fileno@plt>
   158cc:	mov	r3, #1
   158d0:	str	r3, [sp]
   158d4:	mov	r2, #0
   158d8:	mov	r3, #0
   158dc:	bl	10fa0 <lseek64@plt>
   158e0:	mvn	r3, #0
   158e4:	mvn	r2, #0
   158e8:	cmp	r1, r3
   158ec:	cmpeq	r0, r2
   158f0:	bne	1588c <__assert_fail@plt+0x4700>
   158f4:	mov	r0, r4
   158f8:	add	sp, sp, #12
   158fc:	pop	{r4, r5, lr}
   15900:	b	110f0 <fclose@plt>
   15904:	push	{r4, lr}
   15908:	subs	r4, r0, #0
   1590c:	sub	sp, sp, #8
   15910:	beq	1592c <__assert_fail@plt+0x47a0>
   15914:	bl	11018 <__freading@plt>
   15918:	cmp	r0, #0
   1591c:	beq	1592c <__assert_fail@plt+0x47a0>
   15920:	ldr	r3, [r4]
   15924:	tst	r3, #256	; 0x100
   15928:	bne	1593c <__assert_fail@plt+0x47b0>
   1592c:	mov	r0, r4
   15930:	add	sp, sp, #8
   15934:	pop	{r4, lr}
   15938:	b	10ec8 <fflush@plt>
   1593c:	mov	r3, #1
   15940:	str	r3, [sp]
   15944:	mov	r2, #0
   15948:	mov	r3, #0
   1594c:	mov	r0, r4
   15950:	bl	15964 <__assert_fail@plt+0x47d8>
   15954:	mov	r0, r4
   15958:	add	sp, sp, #8
   1595c:	pop	{r4, lr}
   15960:	b	10ec8 <fflush@plt>
   15964:	push	{r4, r5, r6, r7, r8, lr}
   15968:	sub	sp, sp, #8
   1596c:	ldmib	r0, {ip, lr}
   15970:	mov	r4, r0
   15974:	ldr	r5, [sp, #32]
   15978:	cmp	lr, ip
   1597c:	beq	15994 <__assert_fail@plt+0x4808>
   15980:	str	r5, [sp, #32]
   15984:	mov	r0, r4
   15988:	add	sp, sp, #8
   1598c:	pop	{r4, r5, r6, r7, r8, lr}
   15990:	b	110fc <fseeko64@plt>
   15994:	ldr	lr, [r0, #20]
   15998:	ldr	ip, [r0, #16]
   1599c:	cmp	lr, ip
   159a0:	bne	15980 <__assert_fail@plt+0x47f4>
   159a4:	ldr	r8, [r0, #36]	; 0x24
   159a8:	cmp	r8, #0
   159ac:	bne	15980 <__assert_fail@plt+0x47f4>
   159b0:	mov	r6, r2
   159b4:	mov	r7, r3
   159b8:	bl	110d8 <fileno@plt>
   159bc:	mov	r2, r6
   159c0:	mov	r3, r7
   159c4:	str	r5, [sp]
   159c8:	bl	10fa0 <lseek64@plt>
   159cc:	mvn	r3, #0
   159d0:	mvn	r2, #0
   159d4:	cmp	r1, r3
   159d8:	cmpeq	r0, r2
   159dc:	beq	159fc <__assert_fail@plt+0x4870>
   159e0:	ldr	r3, [r4]
   159e4:	strd	r0, [r4, #80]	; 0x50
   159e8:	mov	r0, r8
   159ec:	bic	r3, r3, #16
   159f0:	str	r3, [r4]
   159f4:	add	sp, sp, #8
   159f8:	pop	{r4, r5, r6, r7, r8, pc}
   159fc:	mvn	r0, #0
   15a00:	b	159f4 <__assert_fail@plt+0x4868>
   15a04:	push	{r4, lr}
   15a08:	mov	r0, #14
   15a0c:	bl	1112c <nl_langinfo@plt>
   15a10:	cmp	r0, #0
   15a14:	beq	15a2c <__assert_fail@plt+0x48a0>
   15a18:	ldrb	r2, [r0]
   15a1c:	ldr	r3, [pc, #16]	; 15a34 <__assert_fail@plt+0x48a8>
   15a20:	cmp	r2, #0
   15a24:	moveq	r0, r3
   15a28:	pop	{r4, pc}
   15a2c:	ldr	r0, [pc]	; 15a34 <__assert_fail@plt+0x48a8>
   15a30:	pop	{r4, pc}
   15a34:	andeq	r7, r1, ip, lsr r0
   15a38:	push	{r4, r5, r6, r7, lr}
   15a3c:	subs	r6, r0, #0
   15a40:	sub	sp, sp, #12
   15a44:	addeq	r6, sp, #4
   15a48:	mov	r0, r6
   15a4c:	mov	r5, r2
   15a50:	mov	r7, r1
   15a54:	bl	10fc4 <mbrtowc@plt>
   15a58:	cmp	r5, #0
   15a5c:	cmnne	r0, #3
   15a60:	mov	r4, r0
   15a64:	bls	15a80 <__assert_fail@plt+0x48f4>
   15a68:	mov	r0, #0
   15a6c:	bl	12a34 <__assert_fail@plt+0x18a8>
   15a70:	cmp	r0, #0
   15a74:	moveq	r4, #1
   15a78:	ldrbeq	r3, [r7]
   15a7c:	streq	r3, [r6]
   15a80:	mov	r0, r4
   15a84:	add	sp, sp, #12
   15a88:	pop	{r4, r5, r6, r7, pc}
   15a8c:	push	{r4, r5, r6, lr}
   15a90:	subs	r4, r2, #0
   15a94:	mov	r6, r0
   15a98:	mov	r5, r1
   15a9c:	beq	15ac8 <__assert_fail@plt+0x493c>
   15aa0:	mov	r1, r4
   15aa4:	mvn	r0, #0
   15aa8:	bl	15ad8 <__assert_fail@plt+0x494c>
   15aac:	cmp	r0, r5
   15ab0:	bcs	15ac8 <__assert_fail@plt+0x493c>
   15ab4:	bl	11090 <__errno_location@plt>
   15ab8:	mov	r3, #12
   15abc:	str	r3, [r0]
   15ac0:	mov	r0, #0
   15ac4:	pop	{r4, r5, r6, pc}
   15ac8:	mul	r1, r5, r4
   15acc:	mov	r0, r6
   15ad0:	pop	{r4, r5, r6, lr}
   15ad4:	b	1578c <__assert_fail@plt+0x4600>
   15ad8:	subs	r2, r1, #1
   15adc:	bxeq	lr
   15ae0:	bcc	15cb8 <__assert_fail@plt+0x4b2c>
   15ae4:	cmp	r0, r1
   15ae8:	bls	15c9c <__assert_fail@plt+0x4b10>
   15aec:	tst	r1, r2
   15af0:	beq	15ca8 <__assert_fail@plt+0x4b1c>
   15af4:	clz	r3, r0
   15af8:	clz	r2, r1
   15afc:	sub	r3, r2, r3
   15b00:	rsbs	r3, r3, #31
   15b04:	addne	r3, r3, r3, lsl #1
   15b08:	mov	r2, #0
   15b0c:	addne	pc, pc, r3, lsl #2
   15b10:	nop			; (mov r0, r0)
   15b14:	cmp	r0, r1, lsl #31
   15b18:	adc	r2, r2, r2
   15b1c:	subcs	r0, r0, r1, lsl #31
   15b20:	cmp	r0, r1, lsl #30
   15b24:	adc	r2, r2, r2
   15b28:	subcs	r0, r0, r1, lsl #30
   15b2c:	cmp	r0, r1, lsl #29
   15b30:	adc	r2, r2, r2
   15b34:	subcs	r0, r0, r1, lsl #29
   15b38:	cmp	r0, r1, lsl #28
   15b3c:	adc	r2, r2, r2
   15b40:	subcs	r0, r0, r1, lsl #28
   15b44:	cmp	r0, r1, lsl #27
   15b48:	adc	r2, r2, r2
   15b4c:	subcs	r0, r0, r1, lsl #27
   15b50:	cmp	r0, r1, lsl #26
   15b54:	adc	r2, r2, r2
   15b58:	subcs	r0, r0, r1, lsl #26
   15b5c:	cmp	r0, r1, lsl #25
   15b60:	adc	r2, r2, r2
   15b64:	subcs	r0, r0, r1, lsl #25
   15b68:	cmp	r0, r1, lsl #24
   15b6c:	adc	r2, r2, r2
   15b70:	subcs	r0, r0, r1, lsl #24
   15b74:	cmp	r0, r1, lsl #23
   15b78:	adc	r2, r2, r2
   15b7c:	subcs	r0, r0, r1, lsl #23
   15b80:	cmp	r0, r1, lsl #22
   15b84:	adc	r2, r2, r2
   15b88:	subcs	r0, r0, r1, lsl #22
   15b8c:	cmp	r0, r1, lsl #21
   15b90:	adc	r2, r2, r2
   15b94:	subcs	r0, r0, r1, lsl #21
   15b98:	cmp	r0, r1, lsl #20
   15b9c:	adc	r2, r2, r2
   15ba0:	subcs	r0, r0, r1, lsl #20
   15ba4:	cmp	r0, r1, lsl #19
   15ba8:	adc	r2, r2, r2
   15bac:	subcs	r0, r0, r1, lsl #19
   15bb0:	cmp	r0, r1, lsl #18
   15bb4:	adc	r2, r2, r2
   15bb8:	subcs	r0, r0, r1, lsl #18
   15bbc:	cmp	r0, r1, lsl #17
   15bc0:	adc	r2, r2, r2
   15bc4:	subcs	r0, r0, r1, lsl #17
   15bc8:	cmp	r0, r1, lsl #16
   15bcc:	adc	r2, r2, r2
   15bd0:	subcs	r0, r0, r1, lsl #16
   15bd4:	cmp	r0, r1, lsl #15
   15bd8:	adc	r2, r2, r2
   15bdc:	subcs	r0, r0, r1, lsl #15
   15be0:	cmp	r0, r1, lsl #14
   15be4:	adc	r2, r2, r2
   15be8:	subcs	r0, r0, r1, lsl #14
   15bec:	cmp	r0, r1, lsl #13
   15bf0:	adc	r2, r2, r2
   15bf4:	subcs	r0, r0, r1, lsl #13
   15bf8:	cmp	r0, r1, lsl #12
   15bfc:	adc	r2, r2, r2
   15c00:	subcs	r0, r0, r1, lsl #12
   15c04:	cmp	r0, r1, lsl #11
   15c08:	adc	r2, r2, r2
   15c0c:	subcs	r0, r0, r1, lsl #11
   15c10:	cmp	r0, r1, lsl #10
   15c14:	adc	r2, r2, r2
   15c18:	subcs	r0, r0, r1, lsl #10
   15c1c:	cmp	r0, r1, lsl #9
   15c20:	adc	r2, r2, r2
   15c24:	subcs	r0, r0, r1, lsl #9
   15c28:	cmp	r0, r1, lsl #8
   15c2c:	adc	r2, r2, r2
   15c30:	subcs	r0, r0, r1, lsl #8
   15c34:	cmp	r0, r1, lsl #7
   15c38:	adc	r2, r2, r2
   15c3c:	subcs	r0, r0, r1, lsl #7
   15c40:	cmp	r0, r1, lsl #6
   15c44:	adc	r2, r2, r2
   15c48:	subcs	r0, r0, r1, lsl #6
   15c4c:	cmp	r0, r1, lsl #5
   15c50:	adc	r2, r2, r2
   15c54:	subcs	r0, r0, r1, lsl #5
   15c58:	cmp	r0, r1, lsl #4
   15c5c:	adc	r2, r2, r2
   15c60:	subcs	r0, r0, r1, lsl #4
   15c64:	cmp	r0, r1, lsl #3
   15c68:	adc	r2, r2, r2
   15c6c:	subcs	r0, r0, r1, lsl #3
   15c70:	cmp	r0, r1, lsl #2
   15c74:	adc	r2, r2, r2
   15c78:	subcs	r0, r0, r1, lsl #2
   15c7c:	cmp	r0, r1, lsl #1
   15c80:	adc	r2, r2, r2
   15c84:	subcs	r0, r0, r1, lsl #1
   15c88:	cmp	r0, r1
   15c8c:	adc	r2, r2, r2
   15c90:	subcs	r0, r0, r1
   15c94:	mov	r0, r2
   15c98:	bx	lr
   15c9c:	moveq	r0, #1
   15ca0:	movne	r0, #0
   15ca4:	bx	lr
   15ca8:	clz	r2, r1
   15cac:	rsb	r2, r2, #31
   15cb0:	lsr	r0, r0, r2
   15cb4:	bx	lr
   15cb8:	cmp	r0, #0
   15cbc:	mvnne	r0, #0
   15cc0:	b	15ff8 <__assert_fail@plt+0x4e6c>
   15cc4:	cmp	r1, #0
   15cc8:	beq	15cb8 <__assert_fail@plt+0x4b2c>
   15ccc:	push	{r0, r1, lr}
   15cd0:	bl	15ad8 <__assert_fail@plt+0x494c>
   15cd4:	pop	{r1, r2, lr}
   15cd8:	mul	r3, r2, r0
   15cdc:	sub	r1, r1, r3
   15ce0:	bx	lr
   15ce4:	cmp	r1, #0
   15ce8:	beq	15ef4 <__assert_fail@plt+0x4d68>
   15cec:	eor	ip, r0, r1
   15cf0:	rsbmi	r1, r1, #0
   15cf4:	subs	r2, r1, #1
   15cf8:	beq	15ec0 <__assert_fail@plt+0x4d34>
   15cfc:	movs	r3, r0
   15d00:	rsbmi	r3, r0, #0
   15d04:	cmp	r3, r1
   15d08:	bls	15ecc <__assert_fail@plt+0x4d40>
   15d0c:	tst	r1, r2
   15d10:	beq	15edc <__assert_fail@plt+0x4d50>
   15d14:	clz	r2, r3
   15d18:	clz	r0, r1
   15d1c:	sub	r2, r0, r2
   15d20:	rsbs	r2, r2, #31
   15d24:	addne	r2, r2, r2, lsl #1
   15d28:	mov	r0, #0
   15d2c:	addne	pc, pc, r2, lsl #2
   15d30:	nop			; (mov r0, r0)
   15d34:	cmp	r3, r1, lsl #31
   15d38:	adc	r0, r0, r0
   15d3c:	subcs	r3, r3, r1, lsl #31
   15d40:	cmp	r3, r1, lsl #30
   15d44:	adc	r0, r0, r0
   15d48:	subcs	r3, r3, r1, lsl #30
   15d4c:	cmp	r3, r1, lsl #29
   15d50:	adc	r0, r0, r0
   15d54:	subcs	r3, r3, r1, lsl #29
   15d58:	cmp	r3, r1, lsl #28
   15d5c:	adc	r0, r0, r0
   15d60:	subcs	r3, r3, r1, lsl #28
   15d64:	cmp	r3, r1, lsl #27
   15d68:	adc	r0, r0, r0
   15d6c:	subcs	r3, r3, r1, lsl #27
   15d70:	cmp	r3, r1, lsl #26
   15d74:	adc	r0, r0, r0
   15d78:	subcs	r3, r3, r1, lsl #26
   15d7c:	cmp	r3, r1, lsl #25
   15d80:	adc	r0, r0, r0
   15d84:	subcs	r3, r3, r1, lsl #25
   15d88:	cmp	r3, r1, lsl #24
   15d8c:	adc	r0, r0, r0
   15d90:	subcs	r3, r3, r1, lsl #24
   15d94:	cmp	r3, r1, lsl #23
   15d98:	adc	r0, r0, r0
   15d9c:	subcs	r3, r3, r1, lsl #23
   15da0:	cmp	r3, r1, lsl #22
   15da4:	adc	r0, r0, r0
   15da8:	subcs	r3, r3, r1, lsl #22
   15dac:	cmp	r3, r1, lsl #21
   15db0:	adc	r0, r0, r0
   15db4:	subcs	r3, r3, r1, lsl #21
   15db8:	cmp	r3, r1, lsl #20
   15dbc:	adc	r0, r0, r0
   15dc0:	subcs	r3, r3, r1, lsl #20
   15dc4:	cmp	r3, r1, lsl #19
   15dc8:	adc	r0, r0, r0
   15dcc:	subcs	r3, r3, r1, lsl #19
   15dd0:	cmp	r3, r1, lsl #18
   15dd4:	adc	r0, r0, r0
   15dd8:	subcs	r3, r3, r1, lsl #18
   15ddc:	cmp	r3, r1, lsl #17
   15de0:	adc	r0, r0, r0
   15de4:	subcs	r3, r3, r1, lsl #17
   15de8:	cmp	r3, r1, lsl #16
   15dec:	adc	r0, r0, r0
   15df0:	subcs	r3, r3, r1, lsl #16
   15df4:	cmp	r3, r1, lsl #15
   15df8:	adc	r0, r0, r0
   15dfc:	subcs	r3, r3, r1, lsl #15
   15e00:	cmp	r3, r1, lsl #14
   15e04:	adc	r0, r0, r0
   15e08:	subcs	r3, r3, r1, lsl #14
   15e0c:	cmp	r3, r1, lsl #13
   15e10:	adc	r0, r0, r0
   15e14:	subcs	r3, r3, r1, lsl #13
   15e18:	cmp	r3, r1, lsl #12
   15e1c:	adc	r0, r0, r0
   15e20:	subcs	r3, r3, r1, lsl #12
   15e24:	cmp	r3, r1, lsl #11
   15e28:	adc	r0, r0, r0
   15e2c:	subcs	r3, r3, r1, lsl #11
   15e30:	cmp	r3, r1, lsl #10
   15e34:	adc	r0, r0, r0
   15e38:	subcs	r3, r3, r1, lsl #10
   15e3c:	cmp	r3, r1, lsl #9
   15e40:	adc	r0, r0, r0
   15e44:	subcs	r3, r3, r1, lsl #9
   15e48:	cmp	r3, r1, lsl #8
   15e4c:	adc	r0, r0, r0
   15e50:	subcs	r3, r3, r1, lsl #8
   15e54:	cmp	r3, r1, lsl #7
   15e58:	adc	r0, r0, r0
   15e5c:	subcs	r3, r3, r1, lsl #7
   15e60:	cmp	r3, r1, lsl #6
   15e64:	adc	r0, r0, r0
   15e68:	subcs	r3, r3, r1, lsl #6
   15e6c:	cmp	r3, r1, lsl #5
   15e70:	adc	r0, r0, r0
   15e74:	subcs	r3, r3, r1, lsl #5
   15e78:	cmp	r3, r1, lsl #4
   15e7c:	adc	r0, r0, r0
   15e80:	subcs	r3, r3, r1, lsl #4
   15e84:	cmp	r3, r1, lsl #3
   15e88:	adc	r0, r0, r0
   15e8c:	subcs	r3, r3, r1, lsl #3
   15e90:	cmp	r3, r1, lsl #2
   15e94:	adc	r0, r0, r0
   15e98:	subcs	r3, r3, r1, lsl #2
   15e9c:	cmp	r3, r1, lsl #1
   15ea0:	adc	r0, r0, r0
   15ea4:	subcs	r3, r3, r1, lsl #1
   15ea8:	cmp	r3, r1
   15eac:	adc	r0, r0, r0
   15eb0:	subcs	r3, r3, r1
   15eb4:	cmp	ip, #0
   15eb8:	rsbmi	r0, r0, #0
   15ebc:	bx	lr
   15ec0:	teq	ip, r0
   15ec4:	rsbmi	r0, r0, #0
   15ec8:	bx	lr
   15ecc:	movcc	r0, #0
   15ed0:	asreq	r0, ip, #31
   15ed4:	orreq	r0, r0, #1
   15ed8:	bx	lr
   15edc:	clz	r2, r1
   15ee0:	rsb	r2, r2, #31
   15ee4:	cmp	ip, #0
   15ee8:	lsr	r0, r3, r2
   15eec:	rsbmi	r0, r0, #0
   15ef0:	bx	lr
   15ef4:	cmp	r0, #0
   15ef8:	mvngt	r0, #-2147483648	; 0x80000000
   15efc:	movlt	r0, #-2147483648	; 0x80000000
   15f00:	b	15ff8 <__assert_fail@plt+0x4e6c>
   15f04:	cmp	r1, #0
   15f08:	beq	15ef4 <__assert_fail@plt+0x4d68>
   15f0c:	push	{r0, r1, lr}
   15f10:	bl	15cec <__assert_fail@plt+0x4b60>
   15f14:	pop	{r1, r2, lr}
   15f18:	mul	r3, r2, r0
   15f1c:	sub	r1, r1, r3
   15f20:	bx	lr
   15f24:	cmp	r3, #0
   15f28:	cmpeq	r2, #0
   15f2c:	bne	15f50 <__assert_fail@plt+0x4dc4>
   15f30:	cmp	r1, #0
   15f34:	movlt	r1, #-2147483648	; 0x80000000
   15f38:	movlt	r0, #0
   15f3c:	blt	15f4c <__assert_fail@plt+0x4dc0>
   15f40:	cmpeq	r0, #0
   15f44:	mvnne	r1, #-2147483648	; 0x80000000
   15f48:	mvnne	r0, #0
   15f4c:	b	15ff8 <__assert_fail@plt+0x4e6c>
   15f50:	sub	sp, sp, #8
   15f54:	push	{sp, lr}
   15f58:	cmp	r1, #0
   15f5c:	blt	15f7c <__assert_fail@plt+0x4df0>
   15f60:	cmp	r3, #0
   15f64:	blt	15fb0 <__assert_fail@plt+0x4e24>
   15f68:	bl	16008 <__assert_fail@plt+0x4e7c>
   15f6c:	ldr	lr, [sp, #4]
   15f70:	add	sp, sp, #8
   15f74:	pop	{r2, r3}
   15f78:	bx	lr
   15f7c:	rsbs	r0, r0, #0
   15f80:	sbc	r1, r1, r1, lsl #1
   15f84:	cmp	r3, #0
   15f88:	blt	15fd4 <__assert_fail@plt+0x4e48>
   15f8c:	bl	16008 <__assert_fail@plt+0x4e7c>
   15f90:	ldr	lr, [sp, #4]
   15f94:	add	sp, sp, #8
   15f98:	pop	{r2, r3}
   15f9c:	rsbs	r0, r0, #0
   15fa0:	sbc	r1, r1, r1, lsl #1
   15fa4:	rsbs	r2, r2, #0
   15fa8:	sbc	r3, r3, r3, lsl #1
   15fac:	bx	lr
   15fb0:	rsbs	r2, r2, #0
   15fb4:	sbc	r3, r3, r3, lsl #1
   15fb8:	bl	16008 <__assert_fail@plt+0x4e7c>
   15fbc:	ldr	lr, [sp, #4]
   15fc0:	add	sp, sp, #8
   15fc4:	pop	{r2, r3}
   15fc8:	rsbs	r0, r0, #0
   15fcc:	sbc	r1, r1, r1, lsl #1
   15fd0:	bx	lr
   15fd4:	rsbs	r2, r2, #0
   15fd8:	sbc	r3, r3, r3, lsl #1
   15fdc:	bl	16008 <__assert_fail@plt+0x4e7c>
   15fe0:	ldr	lr, [sp, #4]
   15fe4:	add	sp, sp, #8
   15fe8:	pop	{r2, r3}
   15fec:	rsbs	r2, r2, #0
   15ff0:	sbc	r3, r3, r3, lsl #1
   15ff4:	bx	lr
   15ff8:	push	{r1, lr}
   15ffc:	mov	r0, #8
   16000:	bl	10eb0 <raise@plt>
   16004:	pop	{r1, pc}
   16008:	cmp	r1, r3
   1600c:	push	{r4, r5, r6, r7, r8, r9, lr}
   16010:	cmpeq	r0, r2
   16014:	mov	r4, r0
   16018:	mov	r5, r1
   1601c:	ldr	r9, [sp, #28]
   16020:	movcc	r0, #0
   16024:	movcc	r1, #0
   16028:	bcc	16120 <__assert_fail@plt+0x4f94>
   1602c:	cmp	r3, #0
   16030:	clzeq	ip, r2
   16034:	clzne	ip, r3
   16038:	addeq	ip, ip, #32
   1603c:	cmp	r5, #0
   16040:	clzeq	r1, r4
   16044:	addeq	r1, r1, #32
   16048:	clzne	r1, r5
   1604c:	sub	ip, ip, r1
   16050:	sub	lr, ip, #32
   16054:	lsl	r7, r3, ip
   16058:	rsb	r8, ip, #32
   1605c:	orr	r7, r7, r2, lsl lr
   16060:	orr	r7, r7, r2, lsr r8
   16064:	lsl	r6, r2, ip
   16068:	cmp	r5, r7
   1606c:	cmpeq	r4, r6
   16070:	movcc	r0, #0
   16074:	movcc	r1, #0
   16078:	bcc	16094 <__assert_fail@plt+0x4f08>
   1607c:	mov	r3, #1
   16080:	subs	r4, r4, r6
   16084:	lsl	r1, r3, lr
   16088:	lsl	r0, r3, ip
   1608c:	orr	r1, r1, r3, lsr r8
   16090:	sbc	r5, r5, r7
   16094:	cmp	ip, #0
   16098:	beq	16120 <__assert_fail@plt+0x4f94>
   1609c:	lsrs	r3, r7, #1
   160a0:	rrx	r2, r6
   160a4:	mov	r6, ip
   160a8:	b	160cc <__assert_fail@plt+0x4f40>
   160ac:	subs	r4, r4, r2
   160b0:	sbc	r5, r5, r3
   160b4:	adds	r4, r4, r4
   160b8:	adc	r5, r5, r5
   160bc:	adds	r4, r4, #1
   160c0:	adc	r5, r5, #0
   160c4:	subs	r6, r6, #1
   160c8:	beq	160e8 <__assert_fail@plt+0x4f5c>
   160cc:	cmp	r5, r3
   160d0:	cmpeq	r4, r2
   160d4:	bcs	160ac <__assert_fail@plt+0x4f20>
   160d8:	adds	r4, r4, r4
   160dc:	adc	r5, r5, r5
   160e0:	subs	r6, r6, #1
   160e4:	bne	160cc <__assert_fail@plt+0x4f40>
   160e8:	lsr	r6, r4, ip
   160ec:	lsr	r7, r5, ip
   160f0:	orr	r6, r6, r5, lsl r8
   160f4:	adds	r2, r0, r4
   160f8:	orr	r6, r6, r5, lsr lr
   160fc:	adc	r3, r1, r5
   16100:	lsl	r1, r7, ip
   16104:	orr	r1, r1, r6, lsl lr
   16108:	lsl	r0, r6, ip
   1610c:	orr	r1, r1, r6, lsr r8
   16110:	subs	r0, r2, r0
   16114:	mov	r4, r6
   16118:	mov	r5, r7
   1611c:	sbc	r1, r3, r1
   16120:	cmp	r9, #0
   16124:	popeq	{r4, r5, r6, r7, r8, r9, pc}
   16128:	strd	r4, [r9]
   1612c:	pop	{r4, r5, r6, r7, r8, r9, pc}
   16130:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   16134:	mov	r7, r0
   16138:	ldr	r6, [pc, #72]	; 16188 <__assert_fail@plt+0x4ffc>
   1613c:	ldr	r5, [pc, #72]	; 1618c <__assert_fail@plt+0x5000>
   16140:	add	r6, pc, r6
   16144:	add	r5, pc, r5
   16148:	sub	r6, r6, r5
   1614c:	mov	r8, r1
   16150:	mov	r9, r2
   16154:	bl	10e78 <calloc@plt-0x20>
   16158:	asrs	r6, r6, #2
   1615c:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   16160:	mov	r4, #0
   16164:	add	r4, r4, #1
   16168:	ldr	r3, [r5], #4
   1616c:	mov	r2, r9
   16170:	mov	r1, r8
   16174:	mov	r0, r7
   16178:	blx	r3
   1617c:	cmp	r6, r4
   16180:	bne	16164 <__assert_fail@plt+0x4fd8>
   16184:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   16188:	andeq	r1, r1, r8, asr #27
   1618c:	andeq	r1, r1, r0, asr #27
   16190:	bx	lr
   16194:	ldr	r3, [pc, #12]	; 161a8 <__assert_fail@plt+0x501c>
   16198:	mov	r1, #0
   1619c:	add	r3, pc, r3
   161a0:	ldr	r2, [r3]
   161a4:	b	110a8 <__cxa_atexit@plt>
   161a8:	andeq	r1, r1, r0, ror pc

Disassembly of section .fini:

000161ac <.fini>:
   161ac:	push	{r3, lr}
   161b0:	pop	{r3, pc}
