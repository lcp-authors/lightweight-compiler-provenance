
../repos/stcorp-coda-3a25f25/codaeval:     file format elf32-littlearm


Disassembly of section .init:

00010df8 <.init>:
   10df8:	push	{r3, lr}
   10dfc:	bl	1101c <_start@@Base+0x3c>
   10e00:	pop	{r3, pc}

Disassembly of section .plt:

00010e04 <coda_match_filefilter@plt-0x14>:
   10e04:	push	{lr}		; (str lr, [sp, #-4]!)
   10e08:	ldr	lr, [pc, #4]	; 10e14 <coda_match_filefilter@plt-0x4>
   10e0c:	add	lr, pc, lr
   10e10:	ldr	pc, [lr, #8]!
   10e14:	andeq	r2, r1, ip, ror #3

00010e18 <coda_match_filefilter@plt>:
   10e18:	add	ip, pc, #0, 12
   10e1c:	add	ip, ip, #73728	; 0x12000
   10e20:	ldr	pc, [ip, #492]!	; 0x1ec

00010e24 <coda_expression_eval_integer@plt>:
   10e24:	add	ip, pc, #0, 12
   10e28:	add	ip, ip, #73728	; 0x12000
   10e2c:	ldr	pc, [ip, #484]!	; 0x1e4

00010e30 <strcmp@plt>:
   10e30:	add	ip, pc, #0, 12
   10e34:	add	ip, ip, #73728	; 0x12000
   10e38:	ldr	pc, [ip, #476]!	; 0x1dc

00010e3c <printf@plt>:
   10e3c:	add	ip, pc, #0, 12
   10e40:	add	ip, ip, #73728	; 0x12000
   10e44:	ldr	pc, [ip, #468]!	; 0x1d4

00010e48 <coda_set_error@plt>:
   10e48:	add	ip, pc, #0, 12
   10e4c:	add	ip, ip, #73728	; 0x12000
   10e50:	ldr	pc, [ip, #460]!	; 0x1cc

00010e54 <coda_open@plt>:
   10e54:	add	ip, pc, #0, 12
   10e58:	add	ip, ip, #73728	; 0x12000
   10e5c:	ldr	pc, [ip, #452]!	; 0x1c4

00010e60 <free@plt>:
   10e60:	add	ip, pc, #0, 12
   10e64:	add	ip, ip, #73728	; 0x12000
   10e68:	ldr	pc, [ip, #444]!	; 0x1bc

00010e6c <coda_set_definition_path_conditional@plt>:
   10e6c:	add	ip, pc, #0, 12
   10e70:	add	ip, ip, #73728	; 0x12000
   10e74:	ldr	pc, [ip, #436]!	; 0x1b4

00010e78 <coda_set_definition_path@plt>:
   10e78:	add	ip, pc, #0, 12
   10e7c:	add	ip, ip, #73728	; 0x12000
   10e80:	ldr	pc, [ip, #428]!	; 0x1ac

00010e84 <fwrite@plt>:
   10e84:	add	ip, pc, #0, 12
   10e88:	add	ip, ip, #73728	; 0x12000
   10e8c:	ldr	pc, [ip, #420]!	; 0x1a4

00010e90 <coda_expression_eval_bool@plt>:
   10e90:	add	ip, pc, #0, 12
   10e94:	add	ip, ip, #73728	; 0x12000
   10e98:	ldr	pc, [ip, #412]!	; 0x19c

00010e9c <coda_cursor_set_product@plt>:
   10e9c:	add	ip, pc, #0, 12
   10ea0:	add	ip, ip, #73728	; 0x12000
   10ea4:	ldr	pc, [ip, #404]!	; 0x194

00010ea8 <coda_done@plt>:
   10ea8:	add	ip, pc, #0, 12
   10eac:	add	ip, ip, #73728	; 0x12000
   10eb0:	ldr	pc, [ip, #396]!	; 0x18c

00010eb4 <puts@plt>:
   10eb4:	add	ip, pc, #0, 12
   10eb8:	add	ip, ip, #73728	; 0x12000
   10ebc:	ldr	pc, [ip, #388]!	; 0x184

00010ec0 <__libc_start_main@plt>:
   10ec0:	add	ip, pc, #0, 12
   10ec4:	add	ip, ip, #73728	; 0x12000
   10ec8:	ldr	pc, [ip, #380]!	; 0x17c

00010ecc <coda_expression_delete@plt>:
   10ecc:	add	ip, pc, #0, 12
   10ed0:	add	ip, ip, #73728	; 0x12000
   10ed4:	ldr	pc, [ip, #372]!	; 0x174

00010ed8 <__gmon_start__@plt>:
   10ed8:	add	ip, pc, #0, 12
   10edc:	add	ip, ip, #73728	; 0x12000
   10ee0:	ldr	pc, [ip, #364]!	; 0x16c

00010ee4 <__ctype_b_loc@plt>:
   10ee4:	add	ip, pc, #0, 12
   10ee8:	add	ip, ip, #73728	; 0x12000
   10eec:	ldr	pc, [ip, #356]!	; 0x164

00010ef0 <exit@plt>:
   10ef0:	add	ip, pc, #0, 12
   10ef4:	add	ip, ip, #73728	; 0x12000
   10ef8:	ldr	pc, [ip, #348]!	; 0x15c

00010efc <strlen@plt>:
   10efc:	add	ip, pc, #0, 12
   10f00:	add	ip, ip, #73728	; 0x12000
   10f04:	ldr	pc, [ip, #340]!	; 0x154

00010f08 <fprintf@plt>:
   10f08:	add	ip, pc, #0, 12
   10f0c:	add	ip, ip, #73728	; 0x12000
   10f10:	ldr	pc, [ip, #332]!	; 0x14c

00010f14 <coda_init@plt>:
   10f14:	add	ip, pc, #0, 12
   10f18:	add	ip, ip, #73728	; 0x12000
   10f1c:	ldr	pc, [ip, #324]!	; 0x144

00010f20 <coda_set_option_perform_conversions@plt>:
   10f20:	add	ip, pc, #0, 12
   10f24:	add	ip, ip, #73728	; 0x12000
   10f28:	ldr	pc, [ip, #316]!	; 0x13c

00010f2c <coda_expression_eval_string@plt>:
   10f2c:	add	ip, pc, #0, 12
   10f30:	add	ip, ip, #73728	; 0x12000
   10f34:	ldr	pc, [ip, #308]!	; 0x134

00010f38 <putchar@plt>:
   10f38:	add	ip, pc, #0, 12
   10f3c:	add	ip, ip, #73728	; 0x12000
   10f40:	ldr	pc, [ip, #300]!	; 0x12c

00010f44 <coda_expression_get_type@plt>:
   10f44:	add	ip, pc, #0, 12
   10f48:	add	ip, ip, #73728	; 0x12000
   10f4c:	ldr	pc, [ip, #292]!	; 0x124

00010f50 <coda_close@plt>:
   10f50:	add	ip, pc, #0, 12
   10f54:	add	ip, ip, #73728	; 0x12000
   10f58:	ldr	pc, [ip, #284]!	; 0x11c

00010f5c <coda_expression_is_constant@plt>:
   10f5c:	add	ip, pc, #0, 12
   10f60:	add	ip, ip, #73728	; 0x12000
   10f64:	ldr	pc, [ip, #276]!	; 0x114

00010f68 <coda_expression_eval_float@plt>:
   10f68:	add	ip, pc, #0, 12
   10f6c:	add	ip, ip, #73728	; 0x12000
   10f70:	ldr	pc, [ip, #268]!	; 0x10c

00010f74 <coda_expression_eval_node@plt>:
   10f74:	add	ip, pc, #0, 12
   10f78:	add	ip, ip, #73728	; 0x12000
   10f7c:	ldr	pc, [ip, #260]!	; 0x104

00010f80 <coda_errno_to_string@plt>:
   10f80:	add	ip, pc, #0, 12
   10f84:	add	ip, ip, #73728	; 0x12000
   10f88:	ldr	pc, [ip, #252]!	; 0xfc

00010f8c <coda_expression_get_type_name@plt>:
   10f8c:	add	ip, pc, #0, 12
   10f90:	add	ip, ip, #73728	; 0x12000
   10f94:	ldr	pc, [ip, #244]!	; 0xf4

00010f98 <coda_expression_from_string@plt>:
   10f98:	add	ip, pc, #0, 12
   10f9c:	add	ip, ip, #73728	; 0x12000
   10fa0:	ldr	pc, [ip, #236]!	; 0xec

00010fa4 <coda_get_libcoda_version@plt>:
   10fa4:	add	ip, pc, #0, 12
   10fa8:	add	ip, ip, #73728	; 0x12000
   10fac:	ldr	pc, [ip, #228]!	; 0xe4

00010fb0 <coda_get_errno@plt>:
   10fb0:	add	ip, pc, #0, 12
   10fb4:	add	ip, ip, #73728	; 0x12000
   10fb8:	ldr	pc, [ip, #220]!	; 0xdc

00010fbc <abort@plt>:
   10fbc:	add	ip, pc, #0, 12
   10fc0:	add	ip, ip, #73728	; 0x12000
   10fc4:	ldr	pc, [ip, #212]!	; 0xd4

00010fc8 <coda_str64@plt>:
   10fc8:	add	ip, pc, #0, 12
   10fcc:	add	ip, ip, #73728	; 0x12000
   10fd0:	ldr	pc, [ip, #204]!	; 0xcc

00010fd4 <__assert_fail@plt>:
   10fd4:	add	ip, pc, #0, 12
   10fd8:	add	ip, ip, #73728	; 0x12000
   10fdc:	ldr	pc, [ip, #196]!	; 0xc4

Disassembly of section .text:

00010fe0 <_start@@Base>:
   10fe0:	mov	fp, #0
   10fe4:	mov	lr, #0
   10fe8:	pop	{r1}		; (ldr r1, [sp], #4)
   10fec:	mov	r2, sp
   10ff0:	push	{r2}		; (str r2, [sp, #-4]!)
   10ff4:	push	{r0}		; (str r0, [sp, #-4]!)
   10ff8:	ldr	ip, [pc, #16]	; 11010 <_start@@Base+0x30>
   10ffc:	push	{ip}		; (str ip, [sp, #-4]!)
   11000:	ldr	r0, [pc, #12]	; 11014 <_start@@Base+0x34>
   11004:	ldr	r3, [pc, #12]	; 11018 <_start@@Base+0x38>
   11008:	bl	10ec0 <__libc_start_main@plt>
   1100c:	bl	10fbc <abort@plt>
   11010:	andeq	r1, r1, r0, ror #23
   11014:	andeq	r1, r1, ip, ror #4
   11018:	andeq	r1, r1, r0, lsl #23
   1101c:	ldr	r3, [pc, #20]	; 11038 <_start@@Base+0x58>
   11020:	ldr	r2, [pc, #20]	; 1103c <_start@@Base+0x5c>
   11024:	add	r3, pc, r3
   11028:	ldr	r2, [r3, r2]
   1102c:	cmp	r2, #0
   11030:	bxeq	lr
   11034:	b	10ed8 <__gmon_start__@plt>
   11038:	ldrdeq	r1, [r1], -r4
   1103c:	andeq	r0, r0, r4, lsr #1
   11040:	ldr	r0, [pc, #24]	; 11060 <_start@@Base+0x80>
   11044:	ldr	r3, [pc, #24]	; 11064 <_start@@Base+0x84>
   11048:	cmp	r3, r0
   1104c:	bxeq	lr
   11050:	ldr	r3, [pc, #16]	; 11068 <_start@@Base+0x88>
   11054:	cmp	r3, #0
   11058:	bxeq	lr
   1105c:	bx	r3
   11060:	strheq	r3, [r2], -r0
   11064:	strheq	r3, [r2], -r0
   11068:	andeq	r0, r0, r0
   1106c:	ldr	r0, [pc, #36]	; 11098 <_start@@Base+0xb8>
   11070:	ldr	r1, [pc, #36]	; 1109c <_start@@Base+0xbc>
   11074:	sub	r1, r1, r0
   11078:	asr	r1, r1, #2
   1107c:	add	r1, r1, r1, lsr #31
   11080:	asrs	r1, r1, #1
   11084:	bxeq	lr
   11088:	ldr	r3, [pc, #16]	; 110a0 <_start@@Base+0xc0>
   1108c:	cmp	r3, #0
   11090:	bxeq	lr
   11094:	bx	r3
   11098:	strheq	r3, [r2], -r0
   1109c:	strheq	r3, [r2], -r0
   110a0:	andeq	r0, r0, r0
   110a4:	push	{r4, lr}
   110a8:	ldr	r4, [pc, #24]	; 110c8 <_start@@Base+0xe8>
   110ac:	ldrb	r3, [r4]
   110b0:	cmp	r3, #0
   110b4:	popne	{r4, pc}
   110b8:	bl	11040 <_start@@Base+0x60>
   110bc:	mov	r3, #1
   110c0:	strb	r3, [r4]
   110c4:	pop	{r4, pc}
   110c8:	strheq	r3, [r2], -r4
   110cc:	b	1106c <_start@@Base+0x8c>

000110d0 <callback@@Base>:
   110d0:	push	{r4, r5, r6, r7, fp, lr}
   110d4:	add	fp, sp, #16
   110d8:	sub	sp, sp, #528	; 0x210
   110dc:	mov	r5, #0
   110e0:	cmp	r1, #4
   110e4:	bhi	111f0 <callback@@Base+0x120>
   110e8:	mov	r4, r0
   110ec:	add	r0, pc, #4
   110f0:	mov	r3, r2
   110f4:	ldr	pc, [r0, r1, lsl #2]
   110f8:	muleq	r1, r8, r1
   110fc:			; <UNDEFINED> instruction: 0x000111b4
   11100:	ldrdeq	r1, [r1], -r4
   11104:	strdeq	r1, [r1], -r0
   11108:	andeq	r1, r1, ip, lsl #2
   1110c:	mov	r0, #0
   11110:	sub	r1, fp, #20
   11114:	str	r0, [fp, #-20]	; 0xffffffec
   11118:	mov	r0, r4
   1111c:	bl	10e54 <coda_open@plt>
   11120:	mov	r5, #1
   11124:	cmp	r0, #0
   11128:	bne	111f0 <callback@@Base+0x120>
   1112c:	ldr	r1, [fp, #-20]	; 0xffffffec
   11130:	mov	r0, sp
   11134:	bl	10e9c <coda_cursor_set_product@plt>
   11138:	cmp	r0, #0
   1113c:	beq	1114c <callback@@Base+0x7c>
   11140:	ldr	r0, [fp, #-20]	; 0xffffffec
   11144:	bl	10f50 <coda_close@plt>
   11148:	b	111f0 <callback@@Base+0x120>
   1114c:	movw	r0, #12472	; 0x30b8
   11150:	movt	r0, #2
   11154:	ldr	r0, [r0]
   11158:	cmp	r0, #0
   1115c:	beq	11170 <callback@@Base+0xa0>
   11160:	mov	r1, sp
   11164:	bl	10f74 <coda_expression_eval_node@plt>
   11168:	cmp	r0, #0
   1116c:	bne	11230 <callback@@Base+0x160>
   11170:	mov	r0, sp
   11174:	bl	1165c <main@@Base+0x3f0>
   11178:	cmp	r0, #0
   1117c:	bne	111fc <callback@@Base+0x12c>
   11180:	ldr	r0, [fp, #-20]	; 0xffffffec
   11184:	bl	10f50 <coda_close@plt>
   11188:	mov	r5, r0
   1118c:	cmp	r0, #0
   11190:	movwne	r5, #1
   11194:	b	111f0 <callback@@Base+0x120>
   11198:	movw	r0, #12464	; 0x30b0
   1119c:	movw	r1, #7156	; 0x1bf4
   111a0:	mov	r2, r3
   111a4:	mov	r3, r4
   111a8:	movt	r0, #2
   111ac:	movt	r1, #1
   111b0:	b	111c8 <callback@@Base+0xf8>
   111b4:	movw	r0, #12464	; 0x30b0
   111b8:	movw	r1, #7212	; 0x1c2c
   111bc:	mov	r2, r4
   111c0:	movt	r0, #2
   111c4:	movt	r1, #1
   111c8:	ldr	r0, [r0]
   111cc:	bl	10f08 <fprintf@plt>
   111d0:	b	111f0 <callback@@Base+0x120>
   111d4:	movw	r0, #12464	; 0x30b0
   111d8:	movw	r1, #7174	; 0x1c06
   111dc:	mov	r2, r4
   111e0:	movt	r0, #2
   111e4:	movt	r1, #1
   111e8:	ldr	r0, [r0]
   111ec:	bl	10f08 <fprintf@plt>
   111f0:	mov	r0, r5
   111f4:	sub	sp, fp, #16
   111f8:	pop	{r4, r5, r6, r7, fp, pc}
   111fc:	movw	r0, #12464	; 0x30b0
   11200:	movt	r0, #2
   11204:	ldr	r5, [r0]
   11208:	bl	10fb0 <coda_get_errno@plt>
   1120c:	ldr	r0, [r0]
   11210:	bl	10f80 <coda_errno_to_string@plt>
   11214:	movw	r1, #7156	; 0x1bf4
   11218:	mov	r2, r0
   1121c:	mov	r0, r5
   11220:	mov	r3, r4
   11224:	movt	r1, #1
   11228:	bl	10f08 <fprintf@plt>
   1122c:	b	11180 <callback@@Base+0xb0>
   11230:	movw	r0, #12464	; 0x30b0
   11234:	movt	r0, #2
   11238:	ldr	r4, [r0]
   1123c:	bl	10fb0 <coda_get_errno@plt>
   11240:	ldr	r0, [r0]
   11244:	bl	10f80 <coda_errno_to_string@plt>
   11248:	movw	r1, #7701	; 0x1e15
   1124c:	mov	r2, r0
   11250:	mov	r0, r4
   11254:	movt	r1, #1
   11258:	bl	10f08 <fprintf@plt>
   1125c:	ldr	r0, [fp, #-20]	; 0xffffffec
   11260:	bl	10f50 <coda_close@plt>
   11264:	mov	r5, #0
   11268:	b	111f0 <callback@@Base+0x120>

0001126c <main@@Base>:
   1126c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   11270:	add	fp, sp, #28
   11274:	sub	sp, sp, #12
   11278:	cmp	r0, #1
   1127c:	beq	11590 <main@@Base+0x324>
   11280:	ldr	r6, [r1, #4]
   11284:	mov	r4, r1
   11288:	movw	r1, #7248	; 0x1c50
   1128c:	mov	r5, r0
   11290:	movt	r1, #1
   11294:	mov	r0, r6
   11298:	bl	10e30 <strcmp@plt>
   1129c:	cmp	r0, #0
   112a0:	beq	11590 <main@@Base+0x324>
   112a4:	movw	r1, #7251	; 0x1c53
   112a8:	mov	r0, r6
   112ac:	movt	r1, #1
   112b0:	bl	10e30 <strcmp@plt>
   112b4:	cmp	r0, #0
   112b8:	beq	11590 <main@@Base+0x324>
   112bc:	movw	r1, #7258	; 0x1c5a
   112c0:	mov	r0, r6
   112c4:	movt	r1, #1
   112c8:	bl	10e30 <strcmp@plt>
   112cc:	cmp	r0, #0
   112d0:	beq	115c4 <main@@Base+0x358>
   112d4:	movw	r1, #7261	; 0x1c5d
   112d8:	mov	r0, r6
   112dc:	movt	r1, #1
   112e0:	bl	10e30 <strcmp@plt>
   112e4:	cmp	r0, #0
   112e8:	beq	115c4 <main@@Base+0x358>
   112ec:	cmp	r5, #3
   112f0:	blt	1130c <main@@Base+0xa0>
   112f4:	movw	r1, #7271	; 0x1c67
   112f8:	mov	r0, r6
   112fc:	movt	r1, #1
   11300:	bl	10e30 <strcmp@plt>
   11304:	cmp	r0, #0
   11308:	beq	114ec <main@@Base+0x280>
   1130c:	ldr	r0, [r4]
   11310:	movw	r2, #7274	; 0x1c6a
   11314:	mov	r1, #0
   11318:	movt	r2, #1
   1131c:	bl	10e6c <coda_set_definition_path_conditional@plt>
   11320:	mov	r7, #1
   11324:	cmp	r0, #0
   11328:	bne	1159c <main@@Base+0x330>
   1132c:	cmp	r7, r5
   11330:	bge	11414 <main@@Base+0x1a8>
   11334:	movw	r6, #7311	; 0x1c8f
   11338:	mov	r0, #1
   1133c:	mov	r9, #0
   11340:	movt	r6, #1
   11344:	str	r0, [sp, #8]
   11348:	ldr	r8, [r4, r7, lsl #2]
   1134c:	mov	r1, r6
   11350:	mov	r0, r8
   11354:	bl	10e30 <strcmp@plt>
   11358:	cmp	r0, #0
   1135c:	beq	113f4 <main@@Base+0x188>
   11360:	movw	r1, #7314	; 0x1c92
   11364:	mov	r0, r8
   11368:	movt	r1, #1
   1136c:	bl	10e30 <strcmp@plt>
   11370:	cmp	r0, #0
   11374:	beq	113f4 <main@@Base+0x188>
   11378:	movw	r1, #7322	; 0x1c9a
   1137c:	mov	r0, r8
   11380:	movt	r1, #1
   11384:	bl	10e30 <strcmp@plt>
   11388:	cmp	r0, #0
   1138c:	beq	113fc <main@@Base+0x190>
   11390:	movw	r1, #7325	; 0x1c9d
   11394:	mov	r0, r8
   11398:	movt	r1, #1
   1139c:	bl	10e30 <strcmp@plt>
   113a0:	cmp	r0, #0
   113a4:	beq	113fc <main@@Base+0x190>
   113a8:	movw	r1, #7347	; 0x1cb3
   113ac:	mov	r0, r8
   113b0:	movt	r1, #1
   113b4:	bl	10e30 <strcmp@plt>
   113b8:	cmp	r0, #0
   113bc:	bne	11440 <main@@Base+0x1d4>
   113c0:	add	sl, r7, #1
   113c4:	cmp	sl, r5
   113c8:	bge	11440 <main@@Base+0x1d4>
   113cc:	ldr	r0, [r4, sl, lsl #2]
   113d0:	ldrb	r1, [r0]
   113d4:	cmp	r1, #45	; 0x2d
   113d8:	beq	11440 <main@@Base+0x1d4>
   113dc:	movw	r1, #12472	; 0x30b8
   113e0:	movt	r1, #2
   113e4:	bl	10f98 <coda_expression_from_string@plt>
   113e8:	cmp	r0, #0
   113ec:	beq	11408 <main@@Base+0x19c>
   113f0:	b	1155c <main@@Base+0x2f0>
   113f4:	mov	r9, #1
   113f8:	b	11404 <main@@Base+0x198>
   113fc:	mov	r0, #0
   11400:	str	r0, [sp, #8]
   11404:	mov	sl, r7
   11408:	add	r7, sl, #1
   1140c:	cmp	r7, r5
   11410:	blt	11348 <main@@Base+0xdc>
   11414:	movw	r0, #12464	; 0x30b0
   11418:	mov	r1, #25
   1141c:	mov	r2, #1
   11420:	movt	r0, #2
   11424:	ldr	r3, [r0]
   11428:	movw	r0, #7387	; 0x1cdb
   1142c:	movt	r0, #1
   11430:	bl	10e84 <fwrite@plt>
   11434:	bl	11990 <main@@Base+0x724>
   11438:	mov	r0, #1
   1143c:	bl	10ef0 <exit@plt>
   11440:	ldrb	r0, [r8]
   11444:	cmp	r0, #45	; 0x2d
   11448:	beq	11414 <main@@Base+0x1a8>
   1144c:	movw	sl, #12476	; 0x30bc
   11450:	mov	r0, r8
   11454:	movt	sl, #2
   11458:	mov	r1, sl
   1145c:	bl	10f98 <coda_expression_from_string@plt>
   11460:	cmp	r0, #0
   11464:	bne	115d0 <main@@Base+0x364>
   11468:	ldr	r0, [sl]
   1146c:	movw	r6, #12480	; 0x30c0
   11470:	movt	r6, #2
   11474:	mov	r1, r6
   11478:	bl	10f44 <coda_expression_get_type@plt>
   1147c:	cmp	r0, #0
   11480:	bne	1159c <main@@Base+0x330>
   11484:	ldr	r0, [r6]
   11488:	orr	r1, r0, #1
   1148c:	cmp	r1, #5
   11490:	beq	115f8 <main@@Base+0x38c>
   11494:	cmp	r9, #0
   11498:	bne	11530 <main@@Base+0x2c4>
   1149c:	add	r6, r7, #1
   114a0:	cmp	r6, r5
   114a4:	bge	114fc <main@@Base+0x290>
   114a8:	bl	10f14 <coda_init@plt>
   114ac:	cmp	r0, #0
   114b0:	bne	1159c <main@@Base+0x330>
   114b4:	ldr	r0, [sp, #8]
   114b8:	bl	10f20 <coda_set_option_perform_conversions@plt>
   114bc:	movw	r3, #4304	; 0x10d0
   114c0:	mov	r0, #0
   114c4:	sub	r1, r5, r6
   114c8:	add	r2, r4, r6, lsl #2
   114cc:	str	r0, [sp]
   114d0:	movt	r3, #1
   114d4:	mov	r0, #0
   114d8:	bl	10e18 <coda_match_filefilter@plt>
   114dc:	cmp	r0, #0
   114e0:	bne	1159c <main@@Base+0x330>
   114e4:	bl	10ea8 <coda_done@plt>
   114e8:	b	11530 <main@@Base+0x2c4>
   114ec:	ldr	r0, [r4, #8]
   114f0:	bl	10e78 <coda_set_definition_path@plt>
   114f4:	mov	r7, #3
   114f8:	b	1132c <main@@Base+0xc0>
   114fc:	movw	r0, #12472	; 0x30b8
   11500:	movt	r0, #2
   11504:	ldr	r0, [r0]
   11508:	cmp	r0, #0
   1150c:	bne	11618 <main@@Base+0x3ac>
   11510:	ldr	r0, [sl]
   11514:	bl	10f5c <coda_expression_is_constant@plt>
   11518:	cmp	r0, #0
   1151c:	beq	11634 <main@@Base+0x3c8>
   11520:	mov	r0, #0
   11524:	bl	1165c <main@@Base+0x3f0>
   11528:	cmp	r0, #0
   1152c:	bne	1159c <main@@Base+0x330>
   11530:	ldr	r0, [sl]
   11534:	bl	10ecc <coda_expression_delete@plt>
   11538:	movw	r0, #12472	; 0x30b8
   1153c:	movt	r0, #2
   11540:	ldr	r0, [r0]
   11544:	cmp	r0, #0
   11548:	beq	11550 <main@@Base+0x2e4>
   1154c:	bl	10ecc <coda_expression_delete@plt>
   11550:	mov	r0, #0
   11554:	sub	sp, fp, #28
   11558:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1155c:	movw	r0, #12464	; 0x30b0
   11560:	movt	r0, #2
   11564:	ldr	r4, [r0]
   11568:	bl	10fb0 <coda_get_errno@plt>
   1156c:	ldr	r0, [r0]
   11570:	bl	10f80 <coda_errno_to_string@plt>
   11574:	movw	r1, #7350	; 0x1cb6
   11578:	mov	r2, r0
   1157c:	movt	r1, #1
   11580:	mov	r0, r4
   11584:	bl	10f08 <fprintf@plt>
   11588:	mov	r0, #1
   1158c:	bl	10ef0 <exit@plt>
   11590:	bl	11990 <main@@Base+0x724>
   11594:	mov	r0, #0
   11598:	bl	10ef0 <exit@plt>
   1159c:	movw	r0, #12464	; 0x30b0
   115a0:	movt	r0, #2
   115a4:	ldr	r4, [r0]
   115a8:	bl	10fb0 <coda_get_errno@plt>
   115ac:	ldr	r0, [r0]
   115b0:	bl	10f80 <coda_errno_to_string@plt>
   115b4:	movw	r1, #7300	; 0x1c84
   115b8:	mov	r2, r0
   115bc:	movt	r1, #1
   115c0:	b	11580 <main@@Base+0x314>
   115c4:	bl	11b4c <main@@Base+0x8e0>
   115c8:	mov	r0, #0
   115cc:	bl	10ef0 <exit@plt>
   115d0:	movw	r0, #12464	; 0x30b0
   115d4:	movt	r0, #2
   115d8:	ldr	r4, [r0]
   115dc:	bl	10fb0 <coda_get_errno@plt>
   115e0:	ldr	r0, [r0]
   115e4:	bl	10f80 <coda_errno_to_string@plt>
   115e8:	movw	r1, #7413	; 0x1cf5
   115ec:	mov	r2, r0
   115f0:	movt	r1, #1
   115f4:	b	11580 <main@@Base+0x314>
   115f8:	movw	r1, #12464	; 0x30b0
   115fc:	movt	r1, #2
   11600:	ldr	r4, [r1]
   11604:	bl	10f8c <coda_expression_get_type_name@plt>
   11608:	movw	r1, #7445	; 0x1d15
   1160c:	mov	r2, r0
   11610:	movt	r1, #1
   11614:	b	11580 <main@@Base+0x314>
   11618:	movw	r0, #12464	; 0x30b0
   1161c:	mov	r1, #96	; 0x60
   11620:	movt	r0, #2
   11624:	ldr	r3, [r0]
   11628:	movw	r0, #7492	; 0x1d44
   1162c:	movt	r0, #1
   11630:	b	1164c <main@@Base+0x3e0>
   11634:	movw	r0, #12464	; 0x30b0
   11638:	mov	r1, #111	; 0x6f
   1163c:	movt	r0, #2
   11640:	ldr	r3, [r0]
   11644:	movw	r0, #7589	; 0x1da5
   11648:	movt	r0, #1
   1164c:	mov	r2, #1
   11650:	bl	10e84 <fwrite@plt>
   11654:	mov	r0, #1
   11658:	bl	10ef0 <exit@plt>
   1165c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   11660:	add	fp, sp, #28
   11664:	sub	sp, sp, #36	; 0x24
   11668:	mov	r1, r0
   1166c:	movw	r0, #12480	; 0x30c0
   11670:	mov	r4, #0
   11674:	movt	r0, #2
   11678:	ldr	r0, [r0]
   1167c:	cmp	r0, #5
   11680:	bhi	11964 <main@@Base+0x6f8>
   11684:	add	r2, pc, #0
   11688:	ldr	pc, [r2, r0, lsl #2]
   1168c:	andeq	r1, r1, r4, lsr #13
   11690:	ldrdeq	r1, [r1], -ip
   11694:	andeq	r1, r1, r4, lsl r7
   11698:	andeq	r1, r1, ip, asr #14
   1169c:	andeq	r1, r1, r0, ror r9
   116a0:	andeq	r1, r1, r0, ror r9
   116a4:	movw	r0, #12476	; 0x30bc
   116a8:	mov	r2, sp
   116ac:	movt	r0, #2
   116b0:	ldr	r0, [r0]
   116b4:	bl	10e90 <coda_expression_eval_bool@plt>
   116b8:	cmp	r0, #0
   116bc:	beq	1179c <main@@Base+0x530>
   116c0:	bl	10fb0 <coda_get_errno@plt>
   116c4:	ldr	r0, [r0]
   116c8:	bl	10f80 <coda_errno_to_string@plt>
   116cc:	movw	r1, #7761	; 0x1e51
   116d0:	mov	r2, r0
   116d4:	movt	r1, #1
   116d8:	b	1178c <main@@Base+0x520>
   116dc:	movw	r0, #12476	; 0x30bc
   116e0:	add	r2, sp, #24
   116e4:	movt	r0, #2
   116e8:	ldr	r0, [r0]
   116ec:	bl	10e24 <coda_expression_eval_integer@plt>
   116f0:	cmp	r0, #0
   116f4:	beq	117bc <main@@Base+0x550>
   116f8:	bl	10fb0 <coda_get_errno@plt>
   116fc:	ldr	r0, [r0]
   11700:	bl	10f80 <coda_errno_to_string@plt>
   11704:	movw	r1, #7812	; 0x1e84
   11708:	mov	r2, r0
   1170c:	movt	r1, #1
   11710:	b	1178c <main@@Base+0x520>
   11714:	movw	r0, #12476	; 0x30bc
   11718:	mov	r2, sp
   1171c:	movt	r0, #2
   11720:	ldr	r0, [r0]
   11724:	bl	10f68 <coda_expression_eval_float@plt>
   11728:	cmp	r0, #0
   1172c:	beq	117dc <main@@Base+0x570>
   11730:	bl	10fb0 <coda_get_errno@plt>
   11734:	ldr	r0, [r0]
   11738:	bl	10f80 <coda_errno_to_string@plt>
   1173c:	movw	r1, #7852	; 0x1eac
   11740:	mov	r2, r0
   11744:	movt	r1, #1
   11748:	b	1178c <main@@Base+0x520>
   1174c:	mov	r0, #0
   11750:	mov	r2, sp
   11754:	add	r3, sp, #24
   11758:	str	r0, [sp]
   1175c:	movw	r0, #12476	; 0x30bc
   11760:	movt	r0, #2
   11764:	ldr	r0, [r0]
   11768:	bl	10f2c <coda_expression_eval_string@plt>
   1176c:	cmp	r0, #0
   11770:	beq	117f4 <main@@Base+0x588>
   11774:	bl	10fb0 <coda_get_errno@plt>
   11778:	ldr	r0, [r0]
   1177c:	bl	10f80 <coda_errno_to_string@plt>
   11780:	movw	r1, #7906	; 0x1ee2
   11784:	mov	r2, r0
   11788:	movt	r1, #1
   1178c:	mvn	r0, #400	; 0x190
   11790:	bl	10e48 <coda_set_error@plt>
   11794:	mvn	r4, #0
   11798:	b	11964 <main@@Base+0x6f8>
   1179c:	ldr	r1, [sp]
   117a0:	movw	r2, #7806	; 0x1e7e
   117a4:	movw	r0, #7801	; 0x1e79
   117a8:	movt	r2, #1
   117ac:	movt	r0, #1
   117b0:	cmp	r1, #0
   117b4:	moveq	r0, r2
   117b8:	b	117d4 <main@@Base+0x568>
   117bc:	ldr	r0, [sp, #24]
   117c0:	ldr	r1, [sp, #28]
   117c4:	mov	r5, sp
   117c8:	mov	r2, r5
   117cc:	bl	10fc8 <coda_str64@plt>
   117d0:	mov	r0, r5
   117d4:	bl	10eb4 <puts@plt>
   117d8:	b	11964 <main@@Base+0x6f8>
   117dc:	vldr	d16, [sp]
   117e0:	movw	r0, #7899	; 0x1edb
   117e4:	movt	r0, #1
   117e8:	vmov	r2, r3, d16
   117ec:	bl	10e3c <printf@plt>
   117f0:	b	11964 <main@@Base+0x6f8>
   117f4:	ldr	r4, [sp]
   117f8:	cmp	r4, #0
   117fc:	ldrne	r5, [sp, #24]
   11800:	cmpne	r5, #0
   11804:	beq	11948 <main@@Base+0x6dc>
   11808:	cmn	r5, #1
   1180c:	bgt	11824 <main@@Base+0x5b8>
   11810:	mov	r0, r4
   11814:	bl	10efc <strlen@plt>
   11818:	mov	r5, r0
   1181c:	cmp	r0, #1
   11820:	blt	11948 <main@@Base+0x6dc>
   11824:	movw	r9, #8066	; 0x1f82
   11828:	movw	sl, #8075	; 0x1f8b
   1182c:	movw	r7, #8078	; 0x1f8e
   11830:	movw	r6, #8051	; 0x1f73
   11834:	movt	r9, #1
   11838:	movt	sl, #1
   1183c:	movt	r7, #1
   11840:	movt	r6, #1
   11844:	b	11854 <main@@Base+0x5e8>
   11848:	mov	r0, r8
   1184c:	bl	10f38 <putchar@plt>
   11850:	b	1193c <main@@Base+0x6d0>
   11854:	ldrb	r8, [r4]
   11858:	cmp	r8, #26
   1185c:	bgt	1189c <main@@Base+0x630>
   11860:	sub	r0, r8, #7
   11864:	cmp	r0, #6
   11868:	bhi	118bc <main@@Base+0x650>
   1186c:	add	r1, pc, #0
   11870:	ldr	pc, [r1, r0, lsl #2]
   11874:	muleq	r1, r0, r8
   11878:	andeq	r1, r1, ip, lsl r9
   1187c:	andeq	r1, r1, r8, ror #17
   11880:	strdeq	r1, [r1], -r4
   11884:	andeq	r1, r1, r0, lsl #18
   11888:	andeq	r1, r1, r8, lsr #18
   1188c:	andeq	r1, r1, r4, lsr r9
   11890:	movw	r0, #8054	; 0x1f76
   11894:	movt	r0, #1
   11898:	b	11938 <main@@Base+0x6cc>
   1189c:	cmp	r8, #92	; 0x5c
   118a0:	beq	1190c <main@@Base+0x6a0>
   118a4:	cmp	r8, #34	; 0x22
   118a8:	beq	11914 <main@@Base+0x6a8>
   118ac:	cmp	r8, #27
   118b0:	bne	118bc <main@@Base+0x650>
   118b4:	mov	r0, r6
   118b8:	b	11938 <main@@Base+0x6cc>
   118bc:	bl	10ee4 <__ctype_b_loc@plt>
   118c0:	ldr	r0, [r0]
   118c4:	add	r0, r0, r8, lsl #1
   118c8:	ldrb	r0, [r0, #1]
   118cc:	tst	r0, #64	; 0x40
   118d0:	bne	11848 <main@@Base+0x5dc>
   118d4:	movw	r0, #8081	; 0x1f91
   118d8:	mov	r1, r8
   118dc:	movt	r0, #1
   118e0:	bl	10e3c <printf@plt>
   118e4:	b	1193c <main@@Base+0x6d0>
   118e8:	movw	r0, #8069	; 0x1f85
   118ec:	movt	r0, #1
   118f0:	b	11938 <main@@Base+0x6cc>
   118f4:	movw	r0, #8063	; 0x1f7f
   118f8:	movt	r0, #1
   118fc:	b	11938 <main@@Base+0x6cc>
   11900:	movw	r0, #8072	; 0x1f88
   11904:	movt	r0, #1
   11908:	b	11938 <main@@Base+0x6cc>
   1190c:	mov	r0, sl
   11910:	b	11938 <main@@Base+0x6cc>
   11914:	mov	r0, r7
   11918:	b	11938 <main@@Base+0x6cc>
   1191c:	movw	r0, #8057	; 0x1f79
   11920:	movt	r0, #1
   11924:	b	11938 <main@@Base+0x6cc>
   11928:	movw	r0, #8060	; 0x1f7c
   1192c:	movt	r0, #1
   11930:	b	11938 <main@@Base+0x6cc>
   11934:	mov	r0, r9
   11938:	bl	10e3c <printf@plt>
   1193c:	add	r4, r4, #1
   11940:	subs	r5, r5, #1
   11944:	bne	11854 <main@@Base+0x5e8>
   11948:	mov	r0, #10
   1194c:	bl	10f38 <putchar@plt>
   11950:	ldr	r0, [sp]
   11954:	cmp	r0, #0
   11958:	beq	11960 <main@@Base+0x6f4>
   1195c:	bl	10e60 <free@plt>
   11960:	mov	r4, #0
   11964:	mov	r0, r4
   11968:	sub	sp, fp, #28
   1196c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   11970:	movw	r0, #7945	; 0x1f09
   11974:	movw	r1, #7947	; 0x1f0b
   11978:	movw	r3, #8016	; 0x1f50
   1197c:	mov	r2, #230	; 0xe6
   11980:	movt	r0, #1
   11984:	movt	r1, #1
   11988:	movt	r3, #1
   1198c:	bl	10fd4 <__assert_fail@plt>
   11990:	push	{fp, lr}
   11994:	mov	fp, sp
   11998:	movw	r0, #8087	; 0x1f97
   1199c:	movt	r0, #1
   119a0:	bl	10eb4 <puts@plt>
   119a4:	movw	r0, #8096	; 0x1fa0
   119a8:	movt	r0, #1
   119ac:	bl	10eb4 <puts@plt>
   119b0:	movw	r0, #8176	; 0x1ff0
   119b4:	movt	r0, #1
   119b8:	bl	10eb4 <puts@plt>
   119bc:	movw	r0, #8256	; 0x2040
   119c0:	movt	r0, #1
   119c4:	bl	10eb4 <puts@plt>
   119c8:	movw	r0, #8304	; 0x2070
   119cc:	movt	r0, #1
   119d0:	bl	10eb4 <puts@plt>
   119d4:	movw	r0, #8384	; 0x20c0
   119d8:	movt	r0, #1
   119dc:	bl	10eb4 <puts@plt>
   119e0:	movw	r0, #8464	; 0x2110
   119e4:	movt	r0, #1
   119e8:	bl	10eb4 <puts@plt>
   119ec:	mov	r0, #10
   119f0:	bl	10f38 <putchar@plt>
   119f4:	movw	r0, #8512	; 0x2140
   119f8:	movt	r0, #1
   119fc:	bl	10eb4 <puts@plt>
   11a00:	movw	r0, #8544	; 0x2160
   11a04:	movt	r0, #1
   11a08:	bl	10eb4 <puts@plt>
   11a0c:	movw	r0, #8576	; 0x2180
   11a10:	movt	r0, #1
   11a14:	bl	10eb4 <puts@plt>
   11a18:	movw	r0, #8656	; 0x21d0
   11a1c:	movt	r0, #1
   11a20:	bl	10eb4 <puts@plt>
   11a24:	movw	r0, #8736	; 0x2220
   11a28:	movt	r0, #1
   11a2c:	bl	10eb4 <puts@plt>
   11a30:	movw	r0, #8784	; 0x2250
   11a34:	movt	r0, #1
   11a38:	bl	10eb4 <puts@plt>
   11a3c:	movw	r0, #8848	; 0x2290
   11a40:	movt	r0, #1
   11a44:	bl	10eb4 <puts@plt>
   11a48:	movw	r0, #8880	; 0x22b0
   11a4c:	movt	r0, #1
   11a50:	bl	10eb4 <puts@plt>
   11a54:	movw	r0, #8960	; 0x2300
   11a58:	movt	r0, #1
   11a5c:	bl	10eb4 <puts@plt>
   11a60:	movw	r0, #9040	; 0x2350
   11a64:	movt	r0, #1
   11a68:	bl	10eb4 <puts@plt>
   11a6c:	movw	r0, #9072	; 0x2370
   11a70:	movt	r0, #1
   11a74:	bl	10eb4 <puts@plt>
   11a78:	movw	r0, #9152	; 0x23c0
   11a7c:	movt	r0, #1
   11a80:	bl	10eb4 <puts@plt>
   11a84:	mov	r0, #10
   11a88:	bl	10f38 <putchar@plt>
   11a8c:	movw	r0, #9200	; 0x23f0
   11a90:	movt	r0, #1
   11a94:	bl	10eb4 <puts@plt>
   11a98:	movw	r0, #9280	; 0x2440
   11a9c:	movt	r0, #1
   11aa0:	bl	10eb4 <puts@plt>
   11aa4:	mov	r0, #10
   11aa8:	bl	10f38 <putchar@plt>
   11aac:	movw	r0, #9312	; 0x2460
   11ab0:	movt	r0, #1
   11ab4:	bl	10eb4 <puts@plt>
   11ab8:	movw	r0, #9344	; 0x2480
   11abc:	movt	r0, #1
   11ac0:	bl	10eb4 <puts@plt>
   11ac4:	mov	r0, #10
   11ac8:	bl	10f38 <putchar@plt>
   11acc:	movw	r0, #9376	; 0x24a0
   11ad0:	movt	r0, #1
   11ad4:	bl	10eb4 <puts@plt>
   11ad8:	movw	r0, #9408	; 0x24c0
   11adc:	movt	r0, #1
   11ae0:	bl	10eb4 <puts@plt>
   11ae4:	mov	r0, #10
   11ae8:	bl	10f38 <putchar@plt>
   11aec:	movw	r0, #9472	; 0x2500
   11af0:	movt	r0, #1
   11af4:	bl	10eb4 <puts@plt>
   11af8:	movw	r0, #9552	; 0x2550
   11afc:	movt	r0, #1
   11b00:	bl	10eb4 <puts@plt>
   11b04:	movw	r0, #9632	; 0x25a0
   11b08:	movt	r0, #1
   11b0c:	bl	10eb4 <puts@plt>
   11b10:	movw	r0, #9680	; 0x25d0
   11b14:	movt	r0, #1
   11b18:	bl	10eb4 <puts@plt>
   11b1c:	movw	r0, #9760	; 0x2620
   11b20:	movt	r0, #1
   11b24:	bl	10eb4 <puts@plt>
   11b28:	movw	r0, #9840	; 0x2670
   11b2c:	movt	r0, #1
   11b30:	bl	10eb4 <puts@plt>
   11b34:	movw	r0, #9904	; 0x26b0
   11b38:	movt	r0, #1
   11b3c:	bl	10eb4 <puts@plt>
   11b40:	mov	r0, #10
   11b44:	pop	{fp, lr}
   11b48:	b	10f38 <putchar@plt>
   11b4c:	push	{fp, lr}
   11b50:	mov	fp, sp
   11b54:	bl	10fa4 <coda_get_libcoda_version@plt>
   11b58:	mov	r1, r0
   11b5c:	movw	r0, #7748	; 0x1e44
   11b60:	movt	r0, #1
   11b64:	bl	10e3c <printf@plt>
   11b68:	movw	r0, #9968	; 0x26f0
   11b6c:	movt	r0, #1
   11b70:	bl	10eb4 <puts@plt>
   11b74:	mov	r0, #10
   11b78:	pop	{fp, lr}
   11b7c:	b	10f38 <putchar@plt>

00011b80 <__libc_csu_init@@Base>:
   11b80:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   11b84:	mov	r7, r0
   11b88:	ldr	r6, [pc, #72]	; 11bd8 <__libc_csu_init@@Base+0x58>
   11b8c:	ldr	r5, [pc, #72]	; 11bdc <__libc_csu_init@@Base+0x5c>
   11b90:	add	r6, pc, r6
   11b94:	add	r5, pc, r5
   11b98:	sub	r6, r6, r5
   11b9c:	mov	r8, r1
   11ba0:	mov	r9, r2
   11ba4:	bl	10df8 <coda_match_filefilter@plt-0x20>
   11ba8:	asrs	r6, r6, #2
   11bac:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   11bb0:	mov	r4, #0
   11bb4:	add	r4, r4, #1
   11bb8:	ldr	r3, [r5], #4
   11bbc:	mov	r2, r9
   11bc0:	mov	r1, r8
   11bc4:	mov	r0, r7
   11bc8:	blx	r3
   11bcc:	cmp	r6, r4
   11bd0:	bne	11bb4 <__libc_csu_init@@Base+0x34>
   11bd4:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   11bd8:	andeq	r1, r1, ip, asr r3
   11bdc:	andeq	r1, r1, r4, asr r3

00011be0 <__libc_csu_fini@@Base>:
   11be0:	bx	lr

Disassembly of section .fini:

00011be4 <.fini>:
   11be4:	push	{r3, lr}
   11be8:	pop	{r3, pc}
