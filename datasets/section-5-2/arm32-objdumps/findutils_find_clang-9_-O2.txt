
../repos/findutils/find/find:     file format elf32-littlearm


Disassembly of section .init:

00012340 <.init>:
   12340:	push	{r3, lr}
   12344:	bl	12afc <__assert_fail@plt+0x4c>
   12348:	pop	{r3, pc}

Disassembly of section .plt:

0001234c <pthread_mutex_unlock@plt-0x14>:
   1234c:	push	{lr}		; (str lr, [sp, #-4]!)
   12350:	ldr	lr, [pc, #4]	; 1235c <pthread_mutex_unlock@plt-0x4>
   12354:	add	lr, pc, lr
   12358:	ldr	pc, [lr, #8]!
   1235c:	andeq	fp, r4, r4, lsr #25

00012360 <pthread_mutex_unlock@plt>:
   12360:	add	ip, pc, #0, 12
   12364:	add	ip, ip, #307200	; 0x4b000
   12368:	ldr	pc, [ip, #3236]!	; 0xca4

0001236c <fdopen@plt>:
   1236c:	add	ip, pc, #0, 12
   12370:	add	ip, ip, #307200	; 0x4b000
   12374:	ldr	pc, [ip, #3228]!	; 0xc9c

00012378 <fstatfs64@plt>:
   12378:	add	ip, pc, #0, 12
   1237c:	add	ip, ip, #307200	; 0x4b000
   12380:	ldr	pc, [ip, #3220]!	; 0xc94

00012384 <calloc@plt>:
   12384:	add	ip, pc, #0, 12
   12388:	add	ip, ip, #307200	; 0x4b000
   1238c:	ldr	pc, [ip, #3212]!	; 0xc8c

00012390 <endgrent@plt>:
   12390:	add	ip, pc, #0, 12
   12394:	add	ip, ip, #307200	; 0x4b000
   12398:	ldr	pc, [ip, #3204]!	; 0xc84

0001239c <wctype@plt>:
   1239c:	add	ip, pc, #0, 12
   123a0:	add	ip, ip, #307200	; 0x4b000
   123a4:	ldr	pc, [ip, #3196]!	; 0xc7c

000123a8 <raise@plt>:
   123a8:	add	ip, pc, #0, 12
   123ac:	add	ip, ip, #307200	; 0x4b000
   123b0:	ldr	pc, [ip, #3188]!	; 0xc74

000123b4 <wcrtomb@plt>:
   123b4:	add	ip, pc, #0, 12
   123b8:	add	ip, ip, #307200	; 0x4b000
   123bc:	ldr	pc, [ip, #3180]!	; 0xc6c

000123c0 <gmtime_r@plt>:
   123c0:	add	ip, pc, #0, 12
   123c4:	add	ip, ip, #307200	; 0x4b000
   123c8:	ldr	pc, [ip, #3172]!	; 0xc64

000123cc <__getdelim@plt>:
   123cc:	add	ip, pc, #0, 12
   123d0:	add	ip, ip, #307200	; 0x4b000
   123d4:	ldr	pc, [ip, #3164]!	; 0xc5c

000123d8 <getpwnam@plt>:
   123d8:	add	ip, pc, #0, 12
   123dc:	add	ip, ip, #307200	; 0x4b000
   123e0:	ldr	pc, [ip, #3156]!	; 0xc54

000123e4 <is_selinux_enabled@plt>:
   123e4:	add	ip, pc, #0, 12
   123e8:	add	ip, ip, #307200	; 0x4b000
   123ec:	ldr	pc, [ip, #3148]!	; 0xc4c

000123f0 <iswctype@plt>:
   123f0:	add	ip, pc, #0, 12
   123f4:	add	ip, ip, #307200	; 0x4b000
   123f8:	ldr	pc, [ip, #3140]!	; 0xc44

000123fc <strcmp@plt>:
   123fc:	add	ip, pc, #0, 12
   12400:	add	ip, ip, #307200	; 0x4b000
   12404:	ldr	pc, [ip, #3132]!	; 0xc3c

00012408 <strtol@plt>:
   12408:	add	ip, pc, #0, 12
   1240c:	add	ip, ip, #307200	; 0x4b000
   12410:	ldr	pc, [ip, #3124]!	; 0xc34

00012414 <getpwuid@plt>:
   12414:	add	ip, pc, #0, 12
   12418:	add	ip, ip, #307200	; 0x4b000
   1241c:	ldr	pc, [ip, #3116]!	; 0xc2c

00012420 <printf@plt>:
   12420:	add	ip, pc, #0, 12
   12424:	add	ip, ip, #307200	; 0x4b000
   12428:	ldr	pc, [ip, #3108]!	; 0xc24

0001242c <pthread_mutex_destroy@plt>:
   1242c:	add	ip, pc, #0, 12
   12430:	add	ip, ip, #307200	; 0x4b000
   12434:	ldr	pc, [ip, #3100]!	; 0xc1c

00012438 <mktime@plt>:
   12438:	add	ip, pc, #0, 12
   1243c:	add	ip, ip, #307200	; 0x4b000
   12440:	ldr	pc, [ip, #3092]!	; 0xc14

00012444 <fflush@plt>:
   12444:	add	ip, pc, #0, 12
   12448:	add	ip, ip, #307200	; 0x4b000
   1244c:	ldr	pc, [ip, #3084]!	; 0xc0c

00012450 <unlinkat@plt>:
   12450:	add	ip, pc, #0, 12
   12454:	add	ip, ip, #307200	; 0x4b000
   12458:	ldr	pc, [ip, #3076]!	; 0xc04

0001245c <wcwidth@plt>:
   1245c:	add	ip, pc, #0, 12
   12460:	add	ip, ip, #307200	; 0x4b000
   12464:	ldr	pc, [ip, #3068]!	; 0xbfc

00012468 <lsetfilecon@plt>:
   12468:	add	ip, pc, #0, 12
   1246c:	add	ip, ip, #307200	; 0x4b000
   12470:	ldr	pc, [ip, #3060]!	; 0xbf4

00012474 <memmove@plt>:
   12474:	add	ip, pc, #0, 12
   12478:	add	ip, ip, #307200	; 0x4b000
   1247c:	ldr	pc, [ip, #3052]!	; 0xbec

00012480 <free@plt>:
   12480:	add	ip, pc, #0, 12
   12484:	add	ip, ip, #307200	; 0x4b000
   12488:	ldr	pc, [ip, #3044]!	; 0xbe4

0001248c <pthread_mutex_lock@plt>:
   1248c:	add	ip, pc, #0, 12
   12490:	add	ip, ip, #307200	; 0x4b000
   12494:	ldr	pc, [ip, #3036]!	; 0xbdc

00012498 <faccessat@plt>:
   12498:	add	ip, pc, #0, 12
   1249c:	add	ip, ip, #307200	; 0x4b000
   124a0:	ldr	pc, [ip, #3028]!	; 0xbd4

000124a4 <ferror@plt>:
   124a4:	add	ip, pc, #0, 12
   124a8:	add	ip, ip, #307200	; 0x4b000
   124ac:	ldr	pc, [ip, #3020]!	; 0xbcc

000124b0 <thrd_exit@plt>:
   124b0:	add	ip, pc, #0, 12
   124b4:	add	ip, ip, #307200	; 0x4b000
   124b8:	ldr	pc, [ip, #3012]!	; 0xbc4

000124bc <strndup@plt>:
   124bc:	add	ip, pc, #0, 12
   124c0:	add	ip, ip, #307200	; 0x4b000
   124c4:	ldr	pc, [ip, #3004]!	; 0xbbc

000124c8 <clock_gettime@plt>:
   124c8:	add	ip, pc, #0, 12
   124cc:	add	ip, ip, #307200	; 0x4b000
   124d0:	ldr	pc, [ip, #2996]!	; 0xbb4

000124d4 <_exit@plt>:
   124d4:	add	ip, pc, #0, 12
   124d8:	add	ip, ip, #307200	; 0x4b000
   124dc:	ldr	pc, [ip, #2988]!	; 0xbac

000124e0 <memcpy@plt>:
   124e0:	add	ip, pc, #0, 12
   124e4:	add	ip, ip, #307200	; 0x4b000
   124e8:	ldr	pc, [ip, #2980]!	; 0xba4

000124ec <execvp@plt>:
   124ec:	add	ip, pc, #0, 12
   124f0:	add	ip, ip, #307200	; 0x4b000
   124f4:	ldr	pc, [ip, #2972]!	; 0xb9c

000124f8 <pthread_mutex_init@plt>:
   124f8:	add	ip, pc, #0, 12
   124fc:	add	ip, ip, #307200	; 0x4b000
   12500:	ldr	pc, [ip, #2964]!	; 0xb94

00012504 <__strtoull_internal@plt>:
   12504:	add	ip, pc, #0, 12
   12508:	add	ip, ip, #307200	; 0x4b000
   1250c:	ldr	pc, [ip, #2956]!	; 0xb8c

00012510 <towlower@plt>:
   12510:	add	ip, pc, #0, 12
   12514:	add	ip, ip, #307200	; 0x4b000
   12518:	ldr	pc, [ip, #2948]!	; 0xb84

0001251c <mbsinit@plt>:
   1251c:	add	ip, pc, #0, 12
   12520:	add	ip, ip, #307200	; 0x4b000
   12524:	ldr	pc, [ip, #2940]!	; 0xb7c

00012528 <signal@plt>:
   12528:	add	ip, pc, #0, 12
   1252c:	add	ip, ip, #307200	; 0x4b000
   12530:	ldr	pc, [ip, #2932]!	; 0xb74

00012534 <time@plt>:
   12534:	add	ip, pc, #0, 12
   12538:	add	ip, ip, #307200	; 0x4b000
   1253c:	ldr	pc, [ip, #2924]!	; 0xb6c

00012540 <memcmp@plt>:
   12540:	add	ip, pc, #0, 12
   12544:	add	ip, ip, #307200	; 0x4b000
   12548:	ldr	pc, [ip, #2916]!	; 0xb64

0001254c <uname@plt>:
   1254c:	add	ip, pc, #0, 12
   12550:	add	ip, ip, #307200	; 0x4b000
   12554:	ldr	pc, [ip, #2908]!	; 0xb5c

00012558 <ctime@plt>:
   12558:	add	ip, pc, #0, 12
   1255c:	add	ip, ip, #307200	; 0x4b000
   12560:	ldr	pc, [ip, #2900]!	; 0xb54

00012564 <dcgettext@plt>:
   12564:	add	ip, pc, #0, 12
   12568:	add	ip, ip, #307200	; 0x4b000
   1256c:	ldr	pc, [ip, #2892]!	; 0xb4c

00012570 <strdup@plt>:
   12570:	add	ip, pc, #0, 12
   12574:	add	ip, ip, #307200	; 0x4b000
   12578:	ldr	pc, [ip, #2884]!	; 0xb44

0001257c <sysconf@plt>:
   1257c:	add	ip, pc, #0, 12
   12580:	add	ip, ip, #307200	; 0x4b000
   12584:	ldr	pc, [ip, #2876]!	; 0xb3c

00012588 <getrlimit64@plt>:
   12588:	add	ip, pc, #0, 12
   1258c:	add	ip, ip, #307200	; 0x4b000
   12590:	ldr	pc, [ip, #2868]!	; 0xb34

00012594 <realloc@plt>:
   12594:	add	ip, pc, #0, 12
   12598:	add	ip, ip, #307200	; 0x4b000
   1259c:	ldr	pc, [ip, #2860]!	; 0xb2c

000125a0 <fgetfilecon@plt>:
   125a0:	add	ip, pc, #0, 12
   125a4:	add	ip, ip, #307200	; 0x4b000
   125a8:	ldr	pc, [ip, #2852]!	; 0xb24

000125ac <localtime_r@plt>:
   125ac:	add	ip, pc, #0, 12
   125b0:	add	ip, ip, #307200	; 0x4b000
   125b4:	ldr	pc, [ip, #2844]!	; 0xb1c

000125b8 <textdomain@plt>:
   125b8:	add	ip, pc, #0, 12
   125bc:	add	ip, ip, #307200	; 0x4b000
   125c0:	ldr	pc, [ip, #2836]!	; 0xb14

000125c4 <iswcntrl@plt>:
   125c4:	add	ip, pc, #0, 12
   125c8:	add	ip, ip, #307200	; 0x4b000
   125cc:	ldr	pc, [ip, #2828]!	; 0xb0c

000125d0 <chdir@plt>:
   125d0:	add	ip, pc, #0, 12
   125d4:	add	ip, ip, #307200	; 0x4b000
   125d8:	ldr	pc, [ip, #2820]!	; 0xb04

000125dc <__fxstatat64@plt>:
   125dc:	add	ip, pc, #0, 12
   125e0:	add	ip, ip, #307200	; 0x4b000
   125e4:	ldr	pc, [ip, #2812]!	; 0xafc

000125e8 <iswprint@plt>:
   125e8:	add	ip, pc, #0, 12
   125ec:	add	ip, ip, #307200	; 0x4b000
   125f0:	ldr	pc, [ip, #2804]!	; 0xaf4

000125f4 <tzset@plt>:
   125f4:	add	ip, pc, #0, 12
   125f8:	add	ip, ip, #307200	; 0x4b000
   125fc:	ldr	pc, [ip, #2796]!	; 0xaec

00012600 <poll@plt>:
   12600:	add	ip, pc, #0, 12
   12604:	add	ip, ip, #307200	; 0x4b000
   12608:	ldr	pc, [ip, #2788]!	; 0xae4

0001260c <__fxstat64@plt>:
   1260c:	add	ip, pc, #0, 12
   12610:	add	ip, ip, #307200	; 0x4b000
   12614:	ldr	pc, [ip, #2780]!	; 0xadc

00012618 <fwrite@plt>:
   12618:	add	ip, pc, #0, 12
   1261c:	add	ip, ip, #307200	; 0x4b000
   12620:	ldr	pc, [ip, #2772]!	; 0xad4

00012624 <strcat@plt>:
   12624:	add	ip, pc, #0, 12
   12628:	add	ip, ip, #307200	; 0x4b000
   1262c:	ldr	pc, [ip, #2764]!	; 0xacc

00012630 <lseek64@plt>:
   12630:	add	ip, pc, #0, 12
   12634:	add	ip, ip, #307200	; 0x4b000
   12638:	ldr	pc, [ip, #2756]!	; 0xac4

0001263c <waitpid@plt>:
   1263c:	add	ip, pc, #0, 12
   12640:	add	ip, ip, #307200	; 0x4b000
   12644:	ldr	pc, [ip, #2748]!	; 0xabc

00012648 <__ctype_get_mb_cur_max@plt>:
   12648:	add	ip, pc, #0, 12
   1264c:	add	ip, ip, #307200	; 0x4b000
   12650:	ldr	pc, [ip, #2740]!	; 0xab4

00012654 <hasmntopt@plt>:
   12654:	add	ip, pc, #0, 12
   12658:	add	ip, ip, #307200	; 0x4b000
   1265c:	ldr	pc, [ip, #2732]!	; 0xaac

00012660 <strcpy@plt>:
   12660:	add	ip, pc, #0, 12
   12664:	add	ip, ip, #307200	; 0x4b000
   12668:	ldr	pc, [ip, #2724]!	; 0xaa4

0001266c <gettimeofday@plt>:
   1266c:	add	ip, pc, #0, 12
   12670:	add	ip, ip, #307200	; 0x4b000
   12674:	ldr	pc, [ip, #2716]!	; 0xa9c

00012678 <__fpending@plt>:
   12678:	add	ip, pc, #0, 12
   1267c:	add	ip, ip, #307200	; 0x4b000
   12680:	ldr	pc, [ip, #2708]!	; 0xa94

00012684 <mbrtowc@plt>:
   12684:	add	ip, pc, #0, 12
   12688:	add	ip, ip, #307200	; 0x4b000
   1268c:	ldr	pc, [ip, #2700]!	; 0xa8c

00012690 <strtok_r@plt>:
   12690:	add	ip, pc, #0, 12
   12694:	add	ip, ip, #307200	; 0x4b000
   12698:	ldr	pc, [ip, #2692]!	; 0xa84

0001269c <error@plt>:
   1269c:	add	ip, pc, #0, 12
   126a0:	add	ip, ip, #307200	; 0x4b000
   126a4:	ldr	pc, [ip, #2684]!	; 0xa7c

000126a8 <getmntent@plt>:
   126a8:	add	ip, pc, #0, 12
   126ac:	add	ip, ip, #307200	; 0x4b000
   126b0:	ldr	pc, [ip, #2676]!	; 0xa74

000126b4 <opendir@plt>:
   126b4:	add	ip, pc, #0, 12
   126b8:	add	ip, ip, #307200	; 0x4b000
   126bc:	ldr	pc, [ip, #2668]!	; 0xa6c

000126c0 <fnmatch@plt>:
   126c0:	add	ip, pc, #0, 12
   126c4:	add	ip, ip, #307200	; 0x4b000
   126c8:	ldr	pc, [ip, #2660]!	; 0xa64

000126cc <open64@plt>:
   126cc:	add	ip, pc, #0, 12
   126d0:	add	ip, ip, #307200	; 0x4b000
   126d4:	ldr	pc, [ip, #2652]!	; 0xa5c

000126d8 <getenv@plt>:
   126d8:	add	ip, pc, #0, 12
   126dc:	add	ip, ip, #307200	; 0x4b000
   126e0:	ldr	pc, [ip, #2644]!	; 0xa54

000126e4 <lgetfilecon@plt>:
   126e4:	add	ip, pc, #0, 12
   126e8:	add	ip, ip, #307200	; 0x4b000
   126ec:	ldr	pc, [ip, #2636]!	; 0xa4c

000126f0 <malloc@plt>:
   126f0:	add	ip, pc, #0, 12
   126f4:	add	ip, ip, #307200	; 0x4b000
   126f8:	ldr	pc, [ip, #2628]!	; 0xa44

000126fc <__libc_start_main@plt>:
   126fc:	add	ip, pc, #0, 12
   12700:	add	ip, ip, #307200	; 0x4b000
   12704:	ldr	pc, [ip, #2620]!	; 0xa3c

00012708 <readlinkat@plt>:
   12708:	add	ip, pc, #0, 12
   1270c:	add	ip, ip, #307200	; 0x4b000
   12710:	ldr	pc, [ip, #2612]!	; 0xa34

00012714 <strftime@plt>:
   12714:	add	ip, pc, #0, 12
   12718:	add	ip, ip, #307200	; 0x4b000
   1271c:	ldr	pc, [ip, #2604]!	; 0xa2c

00012720 <__freading@plt>:
   12720:	add	ip, pc, #0, 12
   12724:	add	ip, ip, #307200	; 0x4b000
   12728:	ldr	pc, [ip, #2596]!	; 0xa24

0001272c <localtime@plt>:
   1272c:	add	ip, pc, #0, 12
   12730:	add	ip, ip, #307200	; 0x4b000
   12734:	ldr	pc, [ip, #2588]!	; 0xa1c

00012738 <__ctype_tolower_loc@plt>:
   12738:	add	ip, pc, #0, 12
   1273c:	add	ip, ip, #307200	; 0x4b000
   12740:	ldr	pc, [ip, #2580]!	; 0xa14

00012744 <modf@plt>:
   12744:	add	ip, pc, #0, 12
   12748:	add	ip, ip, #307200	; 0x4b000
   1274c:	ldr	pc, [ip, #2572]!	; 0xa0c

00012750 <__ctype_toupper_loc@plt>:
   12750:	add	ip, pc, #0, 12
   12754:	add	ip, ip, #307200	; 0x4b000
   12758:	ldr	pc, [ip, #2564]!	; 0xa04

0001275c <__gmon_start__@plt>:
   1275c:	add	ip, pc, #0, 12
   12760:	add	ip, ip, #307200	; 0x4b000
   12764:	ldr	pc, [ip, #2556]!	; 0x9fc

00012768 <__ctype_b_loc@plt>:
   12768:	add	ip, pc, #0, 12
   1276c:	add	ip, ip, #307200	; 0x4b000
   12770:	ldr	pc, [ip, #2548]!	; 0x9f4

00012774 <getcwd@plt>:
   12774:	add	ip, pc, #0, 12
   12778:	add	ip, ip, #307200	; 0x4b000
   1277c:	ldr	pc, [ip, #2540]!	; 0x9ec

00012780 <exit@plt>:
   12780:	add	ip, pc, #0, 12
   12784:	add	ip, ip, #307200	; 0x4b000
   12788:	ldr	pc, [ip, #2532]!	; 0x9e4

0001278c <feof@plt>:
   1278c:	add	ip, pc, #0, 12
   12790:	add	ip, ip, #307200	; 0x4b000
   12794:	ldr	pc, [ip, #2524]!	; 0x9dc

00012798 <getfilecon@plt>:
   12798:	add	ip, pc, #0, 12
   1279c:	add	ip, ip, #307200	; 0x4b000
   127a0:	ldr	pc, [ip, #2516]!	; 0x9d4

000127a4 <bcmp@plt>:
   127a4:	add	ip, pc, #0, 12
   127a8:	add	ip, ip, #307200	; 0x4b000
   127ac:	ldr	pc, [ip, #2508]!	; 0x9cc

000127b0 <strtoul@plt>:
   127b0:	add	ip, pc, #0, 12
   127b4:	add	ip, ip, #307200	; 0x4b000
   127b8:	ldr	pc, [ip, #2500]!	; 0x9c4

000127bc <strlen@plt>:
   127bc:	add	ip, pc, #0, 12
   127c0:	add	ip, ip, #307200	; 0x4b000
   127c4:	ldr	pc, [ip, #2492]!	; 0x9bc

000127c8 <strchr@plt>:
   127c8:	add	ip, pc, #0, 12
   127cc:	add	ip, ip, #307200	; 0x4b000
   127d0:	ldr	pc, [ip, #2484]!	; 0x9b4

000127d4 <setenv@plt>:
   127d4:	add	ip, pc, #0, 12
   127d8:	add	ip, ip, #307200	; 0x4b000
   127dc:	ldr	pc, [ip, #2476]!	; 0x9ac

000127e0 <openat64@plt>:
   127e0:	add	ip, pc, #0, 12
   127e4:	add	ip, ip, #307200	; 0x4b000
   127e8:	ldr	pc, [ip, #2468]!	; 0x9a4

000127ec <memrchr@plt>:
   127ec:	add	ip, pc, #0, 12
   127f0:	add	ip, ip, #307200	; 0x4b000
   127f4:	ldr	pc, [ip, #2460]!	; 0x99c

000127f8 <fprintf@plt>:
   127f8:	add	ip, pc, #0, 12
   127fc:	add	ip, ip, #307200	; 0x4b000
   12800:	ldr	pc, [ip, #2452]!	; 0x994

00012804 <__errno_location@plt>:
   12804:	add	ip, pc, #0, 12
   12808:	add	ip, ip, #307200	; 0x4b000
   1280c:	ldr	pc, [ip, #2444]!	; 0x98c

00012810 <iswalnum@plt>:
   12810:	add	ip, pc, #0, 12
   12814:	add	ip, ip, #307200	; 0x4b000
   12818:	ldr	pc, [ip, #2436]!	; 0x984

0001281c <snprintf@plt>:
   1281c:	add	ip, pc, #0, 12
   12820:	add	ip, ip, #307200	; 0x4b000
   12824:	ldr	pc, [ip, #2428]!	; 0x97c

00012828 <__cxa_atexit@plt>:
   12828:	add	ip, pc, #0, 12
   1282c:	add	ip, ip, #307200	; 0x4b000
   12830:	ldr	pc, [ip, #2420]!	; 0x974

00012834 <memset@plt>:
   12834:	add	ip, pc, #0, 12
   12838:	add	ip, ip, #307200	; 0x4b000
   1283c:	ldr	pc, [ip, #2412]!	; 0x96c

00012840 <putchar@plt>:
   12840:	add	ip, pc, #0, 12
   12844:	add	ip, ip, #307200	; 0x4b000
   12848:	ldr	pc, [ip, #2404]!	; 0x964

0001284c <strncpy@plt>:
   1284c:	add	ip, pc, #0, 12
   12850:	add	ip, ip, #307200	; 0x4b000
   12854:	ldr	pc, [ip, #2396]!	; 0x95c

00012858 <pthread_mutexattr_gettype@plt>:
   12858:	add	ip, pc, #0, 12
   1285c:	add	ip, ip, #307200	; 0x4b000
   12860:	ldr	pc, [ip, #2388]!	; 0x954

00012864 <btowc@plt>:
   12864:	add	ip, pc, #0, 12
   12868:	add	ip, ip, #307200	; 0x4b000
   1286c:	ldr	pc, [ip, #2380]!	; 0x94c

00012870 <strtod@plt>:
   12870:	add	ip, pc, #0, 12
   12874:	add	ip, ip, #307200	; 0x4b000
   12878:	ldr	pc, [ip, #2372]!	; 0x944

0001287c <fileno@plt>:
   1287c:	add	ip, pc, #0, 12
   12880:	add	ip, ip, #307200	; 0x4b000
   12884:	ldr	pc, [ip, #2364]!	; 0x93c

00012888 <difftime@plt>:
   12888:	add	ip, pc, #0, 12
   1288c:	add	ip, ip, #307200	; 0x4b000
   12890:	ldr	pc, [ip, #2356]!	; 0x934

00012894 <memchr@plt>:
   12894:	add	ip, pc, #0, 12
   12898:	add	ip, ip, #307200	; 0x4b000
   1289c:	ldr	pc, [ip, #2348]!	; 0x92c

000128a0 <setfilecon@plt>:
   128a0:	add	ip, pc, #0, 12
   128a4:	add	ip, ip, #307200	; 0x4b000
   128a8:	ldr	pc, [ip, #2340]!	; 0x924

000128ac <access@plt>:
   128ac:	add	ip, pc, #0, 12
   128b0:	add	ip, ip, #307200	; 0x4b000
   128b4:	ldr	pc, [ip, #2332]!	; 0x91c

000128b8 <fclose@plt>:
   128b8:	add	ip, pc, #0, 12
   128bc:	add	ip, ip, #307200	; 0x4b000
   128c0:	ldr	pc, [ip, #2324]!	; 0x914

000128c4 <strnlen@plt>:
   128c4:	add	ip, pc, #0, 12
   128c8:	add	ip, ip, #307200	; 0x4b000
   128cc:	ldr	pc, [ip, #2316]!	; 0x90c

000128d0 <fseeko64@plt>:
   128d0:	add	ip, pc, #0, 12
   128d4:	add	ip, ip, #307200	; 0x4b000
   128d8:	ldr	pc, [ip, #2308]!	; 0x904

000128dc <endmntent@plt>:
   128dc:	add	ip, pc, #0, 12
   128e0:	add	ip, ip, #307200	; 0x4b000
   128e4:	ldr	pc, [ip, #2300]!	; 0x8fc

000128e8 <fcntl64@plt>:
   128e8:	add	ip, pc, #0, 12
   128ec:	add	ip, ip, #307200	; 0x4b000
   128f0:	ldr	pc, [ip, #2292]!	; 0x8f4

000128f4 <rpmatch@plt>:
   128f4:	add	ip, pc, #0, 12
   128f8:	add	ip, ip, #307200	; 0x4b000
   128fc:	ldr	pc, [ip, #2284]!	; 0x8ec

00012900 <setlocale@plt>:
   12900:	add	ip, pc, #0, 12
   12904:	add	ip, ip, #307200	; 0x4b000
   12908:	ldr	pc, [ip, #2276]!	; 0x8e4

0001290c <fork@plt>:
   1290c:	add	ip, pc, #0, 12
   12910:	add	ip, ip, #307200	; 0x4b000
   12914:	ldr	pc, [ip, #2268]!	; 0x8dc

00012918 <endpwent@plt>:
   12918:	add	ip, pc, #0, 12
   1291c:	add	ip, ip, #307200	; 0x4b000
   12920:	ldr	pc, [ip, #2260]!	; 0x8d4

00012924 <strrchr@plt>:
   12924:	add	ip, pc, #0, 12
   12928:	add	ip, ip, #307200	; 0x4b000
   1292c:	ldr	pc, [ip, #2252]!	; 0x8cc

00012930 <vfprintf@plt>:
   12930:	add	ip, pc, #0, 12
   12934:	add	ip, ip, #307200	; 0x4b000
   12938:	ldr	pc, [ip, #2244]!	; 0x8c4

0001293c <nl_langinfo@plt>:
   1293c:	add	ip, pc, #0, 12
   12940:	add	ip, ip, #307200	; 0x4b000
   12944:	ldr	pc, [ip, #2236]!	; 0x8bc

00012948 <fputc@plt>:
   12948:	add	ip, pc, #0, 12
   1294c:	add	ip, ip, #307200	; 0x4b000
   12950:	ldr	pc, [ip, #2228]!	; 0x8b4

00012954 <sscanf@plt>:
   12954:	add	ip, pc, #0, 12
   12958:	add	ip, ip, #307200	; 0x4b000
   1295c:	ldr	pc, [ip, #2220]!	; 0x8ac

00012960 <localeconv@plt>:
   12960:	add	ip, pc, #0, 12
   12964:	add	ip, ip, #307200	; 0x4b000
   12968:	ldr	pc, [ip, #2212]!	; 0x8a4

0001296c <sprintf@plt>:
   1296c:	add	ip, pc, #0, 12
   12970:	add	ip, ip, #307200	; 0x4b000
   12974:	ldr	pc, [ip, #2204]!	; 0x89c

00012978 <readdir64@plt>:
   12978:	add	ip, pc, #0, 12
   1297c:	add	ip, ip, #307200	; 0x4b000
   12980:	ldr	pc, [ip, #2196]!	; 0x894

00012984 <fdopendir@plt>:
   12984:	add	ip, pc, #0, 12
   12988:	add	ip, ip, #307200	; 0x4b000
   1298c:	ldr	pc, [ip, #2188]!	; 0x88c

00012990 <timegm@plt>:
   12990:	add	ip, pc, #0, 12
   12994:	add	ip, ip, #307200	; 0x4b000
   12998:	ldr	pc, [ip, #2180]!	; 0x884

0001299c <putc@plt>:
   1299c:	add	ip, pc, #0, 12
   129a0:	add	ip, ip, #307200	; 0x4b000
   129a4:	ldr	pc, [ip, #2172]!	; 0x87c

000129a8 <dirfd@plt>:
   129a8:	add	ip, pc, #0, 12
   129ac:	add	ip, ip, #307200	; 0x4b000
   129b0:	ldr	pc, [ip, #2164]!	; 0x874

000129b4 <fchdir@plt>:
   129b4:	add	ip, pc, #0, 12
   129b8:	add	ip, ip, #307200	; 0x4b000
   129bc:	ldr	pc, [ip, #2156]!	; 0x86c

000129c0 <fopen64@plt>:
   129c0:	add	ip, pc, #0, 12
   129c4:	add	ip, ip, #307200	; 0x4b000
   129c8:	ldr	pc, [ip, #2148]!	; 0x864

000129cc <qsort@plt>:
   129cc:	add	ip, pc, #0, 12
   129d0:	add	ip, ip, #307200	; 0x4b000
   129d4:	ldr	pc, [ip, #2140]!	; 0x85c

000129d8 <freecon@plt>:
   129d8:	add	ip, pc, #0, 12
   129dc:	add	ip, ip, #307200	; 0x4b000
   129e0:	ldr	pc, [ip, #2132]!	; 0x854

000129e4 <strpbrk@plt>:
   129e4:	add	ip, pc, #0, 12
   129e8:	add	ip, ip, #307200	; 0x4b000
   129ec:	ldr	pc, [ip, #2124]!	; 0x84c

000129f0 <setmntent@plt>:
   129f0:	add	ip, pc, #0, 12
   129f4:	add	ip, ip, #307200	; 0x4b000
   129f8:	ldr	pc, [ip, #2116]!	; 0x844

000129fc <bindtextdomain@plt>:
   129fc:	add	ip, pc, #0, 12
   12a00:	add	ip, ip, #307200	; 0x4b000
   12a04:	ldr	pc, [ip, #2108]!	; 0x83c

00012a08 <getdelim@plt>:
   12a08:	add	ip, pc, #0, 12
   12a0c:	add	ip, ip, #307200	; 0x4b000
   12a10:	ldr	pc, [ip, #2100]!	; 0x834

00012a14 <__xstat64@plt>:
   12a14:	add	ip, pc, #0, 12
   12a18:	add	ip, ip, #307200	; 0x4b000
   12a1c:	ldr	pc, [ip, #2092]!	; 0x82c

00012a20 <isatty@plt>:
   12a20:	add	ip, pc, #0, 12
   12a24:	add	ip, ip, #307200	; 0x4b000
   12a28:	ldr	pc, [ip, #2084]!	; 0x824

00012a2c <unsetenv@plt>:
   12a2c:	add	ip, pc, #0, 12
   12a30:	add	ip, ip, #307200	; 0x4b000
   12a34:	ldr	pc, [ip, #2076]!	; 0x81c

00012a38 <towupper@plt>:
   12a38:	add	ip, pc, #0, 12
   12a3c:	add	ip, ip, #307200	; 0x4b000
   12a40:	ldr	pc, [ip, #2068]!	; 0x814

00012a44 <fputs@plt>:
   12a44:	add	ip, pc, #0, 12
   12a48:	add	ip, ip, #307200	; 0x4b000
   12a4c:	ldr	pc, [ip, #2060]!	; 0x80c

00012a50 <strncmp@plt>:
   12a50:	add	ip, pc, #0, 12
   12a54:	add	ip, ip, #307200	; 0x4b000
   12a58:	ldr	pc, [ip, #2052]!	; 0x804

00012a5c <abort@plt>:
   12a5c:	add	ip, pc, #0, 12
   12a60:	add	ip, ip, #307200	; 0x4b000
   12a64:	ldr	pc, [ip, #2044]!	; 0x7fc

00012a68 <close@plt>:
   12a68:	add	ip, pc, #0, 12
   12a6c:	add	ip, ip, #307200	; 0x4b000
   12a70:	ldr	pc, [ip, #2036]!	; 0x7f4

00012a74 <__lxstat64@plt>:
   12a74:	add	ip, pc, #0, 12
   12a78:	add	ip, ip, #307200	; 0x4b000
   12a7c:	ldr	pc, [ip, #2028]!	; 0x7ec

00012a80 <closedir@plt>:
   12a80:	add	ip, pc, #0, 12
   12a84:	add	ip, ip, #307200	; 0x4b000
   12a88:	ldr	pc, [ip, #2020]!	; 0x7e4

00012a8c <getgrgid@plt>:
   12a8c:	add	ip, pc, #0, 12
   12a90:	add	ip, ip, #307200	; 0x4b000
   12a94:	ldr	pc, [ip, #2012]!	; 0x7dc

00012a98 <getgrnam@plt>:
   12a98:	add	ip, pc, #0, 12
   12a9c:	add	ip, ip, #307200	; 0x4b000
   12aa0:	ldr	pc, [ip, #2004]!	; 0x7d4

00012aa4 <strspn@plt>:
   12aa4:	add	ip, pc, #0, 12
   12aa8:	add	ip, ip, #307200	; 0x4b000
   12aac:	ldr	pc, [ip, #1996]!	; 0x7cc

00012ab0 <__assert_fail@plt>:
   12ab0:	add	ip, pc, #0, 12
   12ab4:	add	ip, ip, #307200	; 0x4b000
   12ab8:	ldr	pc, [ip, #1988]!	; 0x7c4

Disassembly of section .text:

00012ac0 <.text>:
   12ac0:	mov	fp, #0
   12ac4:	mov	lr, #0
   12ac8:	pop	{r1}		; (ldr r1, [sp], #4)
   12acc:	mov	r2, sp
   12ad0:	push	{r2}		; (str r2, [sp, #-4]!)
   12ad4:	push	{r0}		; (str r0, [sp, #-4]!)
   12ad8:	ldr	ip, [pc, #16]	; 12af0 <__assert_fail@plt+0x40>
   12adc:	push	{ip}		; (str ip, [sp, #-4]!)
   12ae0:	ldr	r0, [pc, #12]	; 12af4 <__assert_fail@plt+0x44>
   12ae4:	ldr	r3, [pc, #12]	; 12af8 <__assert_fail@plt+0x48>
   12ae8:	bl	126fc <__libc_start_main@plt>
   12aec:	bl	12a5c <abort@plt>
   12af0:	andeq	r7, r4, r0, lsr r8
   12af4:			; <UNDEFINED> instruction: 0x00012bb0
   12af8:	ldrdeq	r7, [r4], -r0
   12afc:	ldr	r3, [pc, #20]	; 12b18 <__assert_fail@plt+0x68>
   12b00:	ldr	r2, [pc, #20]	; 12b1c <__assert_fail@plt+0x6c>
   12b04:	add	r3, pc, r3
   12b08:	ldr	r2, [r3, r2]
   12b0c:	cmp	r2, #0
   12b10:	bxeq	lr
   12b14:	b	1275c <__gmon_start__@plt>
   12b18:	strdeq	fp, [r4], -r4
   12b1c:	andeq	r0, r0, r0, lsl #5
   12b20:	ldr	r0, [pc, #24]	; 12b40 <__assert_fail@plt+0x90>
   12b24:	ldr	r3, [pc, #24]	; 12b44 <__assert_fail@plt+0x94>
   12b28:	cmp	r3, r0
   12b2c:	bxeq	lr
   12b30:	ldr	r3, [pc, #16]	; 12b48 <__assert_fail@plt+0x98>
   12b34:	cmp	r3, #0
   12b38:	bxeq	lr
   12b3c:	bx	r3
   12b40:	andeq	lr, r5, ip, lsr r5
   12b44:	andeq	lr, r5, ip, lsr r5
   12b48:	andeq	r0, r0, r0
   12b4c:	ldr	r0, [pc, #36]	; 12b78 <__assert_fail@plt+0xc8>
   12b50:	ldr	r1, [pc, #36]	; 12b7c <__assert_fail@plt+0xcc>
   12b54:	sub	r1, r1, r0
   12b58:	asr	r1, r1, #2
   12b5c:	add	r1, r1, r1, lsr #31
   12b60:	asrs	r1, r1, #1
   12b64:	bxeq	lr
   12b68:	ldr	r3, [pc, #16]	; 12b80 <__assert_fail@plt+0xd0>
   12b6c:	cmp	r3, #0
   12b70:	bxeq	lr
   12b74:	bx	r3
   12b78:	andeq	lr, r5, ip, lsr r5
   12b7c:	andeq	lr, r5, ip, lsr r5
   12b80:	andeq	r0, r0, r0
   12b84:	push	{r4, lr}
   12b88:	ldr	r4, [pc, #24]	; 12ba8 <__assert_fail@plt+0xf8>
   12b8c:	ldrb	r3, [r4]
   12b90:	cmp	r3, #0
   12b94:	popne	{r4, pc}
   12b98:	bl	12b20 <__assert_fail@plt+0x70>
   12b9c:	mov	r3, #1
   12ba0:	strb	r3, [r4]
   12ba4:	pop	{r4, pc}
   12ba8:	andeq	lr, r5, r0, ror #10
   12bac:	b	12b4c <__assert_fail@plt+0x9c>
   12bb0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12bb4:	add	fp, sp, #28
   12bb8:	sub	sp, sp, #236	; 0xec
   12bbc:	mov	r5, r0
   12bc0:	ldr	r0, [r1]
   12bc4:	mov	r6, r1
   12bc8:	cmp	r0, #0
   12bcc:	movweq	r0, #30812	; 0x785c
   12bd0:	movteq	r0, #4
   12bd4:	bl	2b208 <__assert_fail@plt+0x18758>
   12bd8:	bl	188d0 <__assert_fail@plt+0x5e20>
   12bdc:	movw	r8, #61000	; 0xee48
   12be0:	mov	r0, #0
   12be4:	movt	r8, #5
   12be8:	strb	r0, [r8, #32]
   12bec:	str	r0, [r8, #28]
   12bf0:	strb	r0, [r8, #40]	; 0x28
   12bf4:	mvn	r0, #99	; 0x63
   12bf8:	str	r0, [r8, #16]
   12bfc:	bl	20f18 <__assert_fail@plt+0xe468>
   12c00:	cmp	r0, #0
   12c04:	beq	12c0c <__assert_fail@plt+0x15c>
   12c08:	bl	20b54 <__assert_fail@plt+0xe0a4>
   12c0c:	movw	r0, #42994	; 0xa7f2
   12c10:	movt	r0, #4
   12c14:	bl	19a58 <__assert_fail@plt+0x6fa8>
   12c18:	cmp	r0, #0
   12c1c:	str	r0, [r8, #36]	; 0x24
   12c20:	beq	13074 <__assert_fail@plt+0x5c4>
   12c24:	movw	r4, #61044	; 0xee74
   12c28:	movt	r4, #5
   12c2c:	mov	r0, r4
   12c30:	bl	195f8 <__assert_fail@plt+0x6b48>
   12c34:	movw	r1, #38711	; 0x9737
   12c38:	mov	r0, #6
   12c3c:	movt	r1, #4
   12c40:	bl	12900 <setlocale@plt>
   12c44:	movw	r7, #48993	; 0xbf61
   12c48:	movw	r1, #30861	; 0x788d
   12c4c:	movt	r7, #4
   12c50:	movt	r1, #4
   12c54:	mov	r0, r7
   12c58:	bl	129fc <bindtextdomain@plt>
   12c5c:	mov	r0, r7
   12c60:	bl	125b8 <textdomain@plt>
   12c64:	movw	r0, #10196	; 0x27d4
   12c68:	movt	r0, #2
   12c6c:	bl	47834 <__assert_fail@plt+0x34d84>
   12c70:	cmp	r0, #0
   12c74:	bne	13088 <__assert_fail@plt+0x5d8>
   12c78:	mov	r0, r5
   12c7c:	mov	r1, r6
   12c80:	bl	19170 <__assert_fail@plt+0x66c0>
   12c84:	mov	r7, r0
   12c88:	ldr	r0, [r4, #44]	; 0x2c
   12c8c:	tst	r0, #2
   12c90:	movwne	r1, #36428	; 0x8e4c
   12c94:	movtne	r1, #1
   12c98:	strne	r1, [r4, #52]	; 0x34
   12c9c:	tst	r0, #128	; 0x80
   12ca0:	bne	1303c <__assert_fail@plt+0x58c>
   12ca4:	mov	r0, r5
   12ca8:	mov	r1, r6
   12cac:	mov	r2, r7
   12cb0:	bl	1616c <__assert_fail@plt+0x36bc>
   12cb4:	add	r6, r6, r7, lsl #2
   12cb8:	mov	r9, r0
   12cbc:	mov	r0, #0
   12cc0:	cmp	r7, r5
   12cc4:	bge	12cd8 <__assert_fail@plt+0x228>
   12cc8:	ldr	r0, [r6]
   12ccc:	mov	r1, #1
   12cd0:	bl	190e4 <__assert_fail@plt+0x6634>
   12cd4:	eor	r0, r0, #1
   12cd8:	ldr	r5, [r4, #76]	; 0x4c
   12cdc:	cmp	r5, #0
   12ce0:	beq	12dcc <__assert_fail@plt+0x31c>
   12ce4:	cmp	r0, #0
   12ce8:	bne	130b4 <__assert_fail@plt+0x604>
   12cec:	movw	r1, #39074	; 0x98a2
   12cf0:	mov	r0, r5
   12cf4:	movt	r1, #4
   12cf8:	bl	123fc <strcmp@plt>
   12cfc:	cmp	r0, #0
   12d00:	beq	12df8 <__assert_fail@plt+0x348>
   12d04:	mov	r0, #0
   12d08:	mov	r1, r5
   12d0c:	bl	19960 <__assert_fail@plt+0x6eb0>
   12d10:	str	r0, [sp, #20]
   12d14:	ldr	r0, [r4, #76]	; 0x4c
   12d18:	movw	r1, #49160	; 0xc008
   12d1c:	movt	r1, #4
   12d20:	bl	129c0 <fopen64@plt>
   12d24:	cmp	r0, #0
   12d28:	beq	13148 <__assert_fail@plt+0x698>
   12d2c:	mov	r6, r0
   12d30:	bl	1287c <fileno@plt>
   12d34:	cmn	r0, #1
   12d38:	ble	13178 <__assert_fail@plt+0x6c8>
   12d3c:	mov	r5, r0
   12d40:	ldrb	r0, [r4, #80]	; 0x50
   12d44:	cmp	r0, #0
   12d48:	beq	12dbc <__assert_fail@plt+0x30c>
   12d4c:	add	r2, sp, #128	; 0x80
   12d50:	mov	r0, #3
   12d54:	mov	r1, r5
   12d58:	bl	1260c <__fxstat64@plt>
   12d5c:	cmp	r0, #0
   12d60:	bne	12dbc <__assert_fail@plt+0x30c>
   12d64:	add	r2, sp, #24
   12d68:	mov	r0, #3
   12d6c:	mov	r1, #0
   12d70:	bl	1260c <__fxstat64@plt>
   12d74:	cmp	r0, #0
   12d78:	bne	12dbc <__assert_fail@plt+0x30c>
   12d7c:	ldr	r0, [sp, #120]	; 0x78
   12d80:	ldr	r2, [sp, #224]	; 0xe0
   12d84:	ldr	r1, [sp, #124]	; 0x7c
   12d88:	ldr	r3, [sp, #228]	; 0xe4
   12d8c:	eor	r1, r3, r1
   12d90:	eor	r0, r2, r0
   12d94:	orrs	r0, r0, r1
   12d98:	bne	12dbc <__assert_fail@plt+0x30c>
   12d9c:	ldr	r0, [sp, #24]
   12da0:	ldr	r2, [sp, #128]	; 0x80
   12da4:	ldr	r1, [sp, #28]
   12da8:	ldr	r3, [sp, #132]	; 0x84
   12dac:	eor	r1, r3, r1
   12db0:	eor	r0, r2, r0
   12db4:	orrs	r0, r0, r1
   12db8:	beq	131c4 <__assert_fail@plt+0x714>
   12dbc:	mov	r0, r5
   12dc0:	mov	r1, #1
   12dc4:	bl	22748 <__assert_fail@plt+0xfc98>
   12dc8:	b	12e34 <__assert_fail@plt+0x384>
   12dcc:	cmp	r0, #0
   12dd0:	beq	12fb0 <__assert_fail@plt+0x500>
   12dd4:	mov	r0, r6
   12dd8:	bl	22434 <__assert_fail@plt+0xf984>
   12ddc:	mov	r5, r0
   12de0:	mov	r0, #0
   12de4:	mov	r6, #0
   12de8:	str	r0, [sp, #20]
   12dec:	cmp	r5, #0
   12df0:	bne	12e48 <__assert_fail@plt+0x398>
   12df4:	b	13070 <__assert_fail@plt+0x5c0>
   12df8:	ldrb	r0, [r4, #80]	; 0x50
   12dfc:	cmp	r0, #0
   12e00:	bne	13198 <__assert_fail@plt+0x6e8>
   12e04:	movw	r1, #31091	; 0x7973
   12e08:	mov	r0, #0
   12e0c:	mov	r2, #5
   12e10:	movt	r1, #4
   12e14:	bl	12564 <dcgettext@plt>
   12e18:	mov	r1, r0
   12e1c:	mov	r0, #0
   12e20:	bl	19960 <__assert_fail@plt+0x6eb0>
   12e24:	str	r0, [sp, #20]
   12e28:	movw	r0, #58712	; 0xe558
   12e2c:	movt	r0, #5
   12e30:	ldr	r6, [r0]
   12e34:	mov	r0, r6
   12e38:	bl	22464 <__assert_fail@plt+0xf9b4>
   12e3c:	mov	r5, r0
   12e40:	cmp	r5, #0
   12e44:	beq	13070 <__assert_fail@plt+0x5c0>
   12e48:	add	r1, sp, #128	; 0x80
   12e4c:	mov	r0, r5
   12e50:	str	r6, [sp, #12]
   12e54:	str	r9, [sp, #16]
   12e58:	bl	2249c <__assert_fail@plt+0xf9ec>
   12e5c:	cmp	r0, #0
   12e60:	beq	12f54 <__assert_fail@plt+0x4a4>
   12e64:	mov	sl, r0
   12e68:	mov	r6, #1
   12e6c:	add	r9, sp, #128	; 0x80
   12e70:	mov	r7, #1
   12e74:	b	12eac <__assert_fail@plt+0x3fc>
   12e78:	mov	r0, sl
   12e7c:	bl	127bc <strlen@plt>
   12e80:	str	r0, [r8, #20]
   12e84:	mov	r0, sl
   12e88:	bl	13208 <__assert_fail@plt+0x758>
   12e8c:	cmp	r0, #0
   12e90:	beq	12fcc <__assert_fail@plt+0x51c>
   12e94:	mov	r0, r5
   12e98:	mov	r1, r9
   12e9c:	bl	2249c <__assert_fail@plt+0xf9ec>
   12ea0:	mov	sl, r0
   12ea4:	cmp	r0, #0
   12ea8:	beq	12f58 <__assert_fail@plt+0x4a8>
   12eac:	ldrb	r1, [sl]
   12eb0:	ldr	r0, [r4, #76]	; 0x4c
   12eb4:	cmp	r1, #0
   12eb8:	beq	12edc <__assert_fail@plt+0x42c>
   12ebc:	cmp	r0, #0
   12ec0:	bne	12e78 <__assert_fail@plt+0x3c8>
   12ec4:	mov	r0, sl
   12ec8:	mov	r1, #1
   12ecc:	bl	190e4 <__assert_fail@plt+0x6634>
   12ed0:	cmp	r0, #0
   12ed4:	beq	12e78 <__assert_fail@plt+0x3c8>
   12ed8:	b	12fd8 <__assert_fail@plt+0x528>
   12edc:	cmp	r0, #0
   12ee0:	beq	12f24 <__assert_fail@plt+0x474>
   12ee4:	mov	r0, r5
   12ee8:	bl	22554 <__assert_fail@plt+0xfaa4>
   12eec:	movw	r1, #31362	; 0x7a82
   12ef0:	mov	r7, r0
   12ef4:	mov	r0, #0
   12ef8:	mov	r2, #5
   12efc:	movt	r1, #4
   12f00:	bl	12564 <dcgettext@plt>
   12f04:	ldr	r3, [sp, #20]
   12f08:	movw	r2, #31351	; 0x7a77
   12f0c:	str	r0, [sp, #4]
   12f10:	mov	r0, #0
   12f14:	mov	r1, #0
   12f18:	str	r7, [sp]
   12f1c:	movt	r2, #4
   12f20:	b	12f44 <__assert_fail@plt+0x494>
   12f24:	mov	r0, #0
   12f28:	mov	r1, sl
   12f2c:	bl	19960 <__assert_fail@plt+0x6eb0>
   12f30:	movw	r2, #56015	; 0xdacf
   12f34:	mov	r3, r0
   12f38:	mov	r0, #0
   12f3c:	mov	r1, #2
   12f40:	movt	r2, #4
   12f44:	bl	1269c <error@plt>
   12f48:	mov	r7, #0
   12f4c:	str	r6, [r8, #28]
   12f50:	b	12e94 <__assert_fail@plt+0x3e4>
   12f54:	mov	r7, #1
   12f58:	ldr	r0, [sp, #128]	; 0x80
   12f5c:	ldr	r9, [sp, #16]
   12f60:	cmp	r0, #2
   12f64:	beq	12fdc <__assert_fail@plt+0x52c>
   12f68:	cmp	r0, #4
   12f6c:	bne	13068 <__assert_fail@plt+0x5b8>
   12f70:	bl	12804 <__errno_location@plt>
   12f74:	movw	r1, #31296	; 0x7a40
   12f78:	ldr	r6, [r0]
   12f7c:	mov	r0, #0
   12f80:	mov	r2, #5
   12f84:	mov	r7, #0
   12f88:	movt	r1, #4
   12f8c:	bl	12564 <dcgettext@plt>
   12f90:	ldr	r3, [sp, #20]
   12f94:	mov	r2, r0
   12f98:	mov	r0, #0
   12f9c:	mov	r1, r6
   12fa0:	bl	1269c <error@plt>
   12fa4:	mov	r0, #1
   12fa8:	str	r0, [r8, #28]
   12fac:	b	12fdc <__assert_fail@plt+0x52c>
   12fb0:	mov	r0, #46	; 0x2e
   12fb4:	strh	r0, [sp, #128]	; 0x80
   12fb8:	add	r0, sp, #128	; 0x80
   12fbc:	bl	13208 <__assert_fail@plt+0x758>
   12fc0:	cmp	r0, #0
   12fc4:	bne	13024 <__assert_fail@plt+0x574>
   12fc8:	b	13030 <__assert_fail@plt+0x580>
   12fcc:	ldr	r9, [sp, #16]
   12fd0:	mov	r7, #0
   12fd4:	b	12fdc <__assert_fail@plt+0x52c>
   12fd8:	ldr	r9, [sp, #16]
   12fdc:	mov	r0, r5
   12fe0:	bl	22578 <__assert_fail@plt+0xfac8>
   12fe4:	tst	r7, #1
   12fe8:	ldrne	r0, [r4, #76]	; 0x4c
   12fec:	cmpne	r0, #0
   12ff0:	bne	13000 <__assert_fail@plt+0x550>
   12ff4:	tst	r7, #1
   12ff8:	bne	13024 <__assert_fail@plt+0x574>
   12ffc:	b	13030 <__assert_fail@plt+0x580>
   13000:	ldr	r4, [sp, #12]
   13004:	mov	r0, r4
   13008:	bl	124a4 <ferror@plt>
   1300c:	cmp	r0, #0
   13010:	bne	13128 <__assert_fail@plt+0x678>
   13014:	mov	r0, r4
   13018:	bl	128b8 <fclose@plt>
   1301c:	cmp	r0, #0
   13020:	bne	13128 <__assert_fail@plt+0x678>
   13024:	mov	r0, r9
   13028:	bl	154a4 <__assert_fail@plt+0x29f4>
   1302c:	bl	18970 <__assert_fail@plt+0x5ec0>
   13030:	ldr	r0, [r8, #28]
   13034:	sub	sp, fp, #28
   13038:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1303c:	movw	r0, #58704	; 0xe550
   13040:	movt	r0, #5
   13044:	ldr	r9, [r0]
   13048:	add	r0, r4, #28
   1304c:	bl	12558 <ctime@plt>
   13050:	movw	r1, #30920	; 0x78c8
   13054:	mov	r2, r0
   13058:	mov	r0, r9
   1305c:	movt	r1, #4
   13060:	bl	127f8 <fprintf@plt>
   13064:	b	12ca4 <__assert_fail@plt+0x1f4>
   13068:	cmp	r0, #3
   1306c:	bne	13110 <__assert_fail@plt+0x660>
   13070:	bl	2e574 <__assert_fail@plt+0x1bac4>
   13074:	bl	12804 <__errno_location@plt>
   13078:	ldr	r4, [r0]
   1307c:	movw	r1, #30817	; 0x7861
   13080:	movt	r1, #4
   13084:	b	13098 <__assert_fail@plt+0x5e8>
   13088:	bl	12804 <__errno_location@plt>
   1308c:	ldr	r4, [r0]
   13090:	movw	r1, #30885	; 0x78a5
   13094:	movt	r1, #4
   13098:	mov	r0, #0
   1309c:	mov	r2, #5
   130a0:	bl	12564 <dcgettext@plt>
   130a4:	mov	r2, r0
   130a8:	mov	r0, #1
   130ac:	mov	r1, r4
   130b0:	bl	1269c <error@plt>
   130b4:	movw	r1, #30939	; 0x78db
   130b8:	mov	r0, #0
   130bc:	mov	r2, #5
   130c0:	movt	r1, #4
   130c4:	bl	12564 <dcgettext@plt>
   130c8:	ldr	r1, [r6]
   130cc:	mov	r4, r0
   130d0:	mov	r0, #0
   130d4:	bl	19960 <__assert_fail@plt+0x6eb0>
   130d8:	mov	r3, r0
   130dc:	mov	r0, #0
   130e0:	mov	r1, #0
   130e4:	mov	r2, r4
   130e8:	bl	1269c <error@plt>
   130ec:	movw	r1, #30956	; 0x78ec
   130f0:	mov	r0, #0
   130f4:	mov	r2, #5
   130f8:	movt	r1, #4
   130fc:	bl	12564 <dcgettext@plt>
   13100:	movw	r2, #56015	; 0xdacf
   13104:	mov	r3, r0
   13108:	movt	r2, #4
   1310c:	b	131b8 <__assert_fail@plt+0x708>
   13110:	movw	r0, #31311	; 0x7a4f
   13114:	movw	r1, #31135	; 0x799f
   13118:	movw	r3, #31145	; 0x79a9
   1311c:	movw	r2, #675	; 0x2a3
   13120:	movt	r0, #4
   13124:	b	1318c <__assert_fail@plt+0x6dc>
   13128:	movw	r1, #31392	; 0x7aa0
   1312c:	mov	r0, #0
   13130:	mov	r2, #5
   13134:	movt	r1, #4
   13138:	bl	12564 <dcgettext@plt>
   1313c:	ldr	r3, [sp, #20]
   13140:	mov	r2, r0
   13144:	b	131b8 <__assert_fail@plt+0x708>
   13148:	bl	12804 <__errno_location@plt>
   1314c:	movw	r1, #31108	; 0x7984
   13150:	ldr	r4, [r0]
   13154:	mov	r0, #0
   13158:	mov	r2, #5
   1315c:	movt	r1, #4
   13160:	bl	12564 <dcgettext@plt>
   13164:	ldr	r3, [sp, #20]
   13168:	mov	r2, r0
   1316c:	mov	r0, #1
   13170:	mov	r1, r4
   13174:	bl	1269c <error@plt>
   13178:	movw	r0, #31614	; 0x7b7e
   1317c:	movw	r1, #31135	; 0x799f
   13180:	movw	r3, #31145	; 0x79a9
   13184:	movw	r2, #610	; 0x262
   13188:	movt	r0, #4
   1318c:	movt	r1, #4
   13190:	movt	r3, #4
   13194:	bl	12ab0 <__assert_fail@plt>
   13198:	movw	r1, #31007	; 0x791f
   1319c:	mov	r0, #0
   131a0:	mov	r2, #5
   131a4:	movt	r1, #4
   131a8:	bl	12564 <dcgettext@plt>
   131ac:	movw	r2, #53924	; 0xd2a4
   131b0:	mov	r3, r0
   131b4:	movt	r2, #4
   131b8:	mov	r0, #1
   131bc:	mov	r1, #0
   131c0:	bl	1269c <error@plt>
   131c4:	movw	r1, #31197	; 0x79dd
   131c8:	mov	r0, #0
   131cc:	mov	r2, #5
   131d0:	movt	r1, #4
   131d4:	bl	12564 <dcgettext@plt>
   131d8:	mov	r3, r0
   131dc:	ldr	r0, [sp, #20]
   131e0:	movw	r2, #31189	; 0x79d5
   131e4:	movt	r2, #4
   131e8:	str	r0, [sp]
   131ec:	b	131b8 <__assert_fail@plt+0x708>
   131f0:	movw	r1, #58000	; 0xe290
   131f4:	movt	r1, #5
   131f8:	ldr	r1, [r1]
   131fc:	str	r1, [r0]
   13200:	mov	r0, #1
   13204:	bx	lr
   13208:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1320c:	add	fp, sp, #28
   13210:	sub	sp, sp, #268	; 0x10c
   13214:	mov	r7, r0
   13218:	bl	127bc <strlen@plt>
   1321c:	movw	r8, #58000	; 0xe290
   13220:	movw	sl, #61000	; 0xee48
   13224:	movt	r8, #5
   13228:	movt	sl, #5
   1322c:	ldr	r1, [r8]
   13230:	str	r0, [sl, #20]
   13234:	tst	r1, #512	; 0x200
   13238:	beq	13258 <__assert_fail@plt+0x7a8>
   1323c:	movw	r2, #58004	; 0xe294
   13240:	mvn	r0, #99	; 0x63
   13244:	movt	r2, #5
   13248:	str	r0, [sl, #16]
   1324c:	ldr	r3, [r2]
   13250:	cmn	r3, #1
   13254:	strle	r0, [r2]
   13258:	mov	r0, #0
   1325c:	str	r0, [sp, #52]	; 0x34
   13260:	movw	r0, #61044	; 0xee74
   13264:	str	r7, [sp, #48]	; 0x30
   13268:	movt	r0, #5
   1326c:	ldr	r0, [r0, #48]	; 0x30
   13270:	cmp	r0, #0
   13274:	beq	13298 <__assert_fail@plt+0x7e8>
   13278:	cmp	r0, #1
   1327c:	beq	13290 <__assert_fail@plt+0x7e0>
   13280:	cmp	r0, #2
   13284:	bne	132a4 <__assert_fail@plt+0x7f4>
   13288:	mov	r0, #17
   1328c:	b	1329c <__assert_fail@plt+0x7ec>
   13290:	mov	r0, #3
   13294:	b	1329c <__assert_fail@plt+0x7ec>
   13298:	mov	r0, #16
   1329c:	orr	r1, r1, r0
   132a0:	str	r1, [r8]
   132a4:	movw	r0, #61044	; 0xee74
   132a8:	mov	r2, #0
   132ac:	mov	r4, #0
   132b0:	movt	r0, #5
   132b4:	ldrb	r0, [r0, #13]
   132b8:	cmp	r0, #0
   132bc:	add	r0, sp, #48	; 0x30
   132c0:	orrne	r1, r1, #64	; 0x40
   132c4:	strne	r1, [r8]
   132c8:	bl	30244 <__assert_fail@plt+0x1d794>
   132cc:	mov	r5, r0
   132d0:	bl	12804 <__errno_location@plt>
   132d4:	mov	r6, r0
   132d8:	cmp	r5, #0
   132dc:	beq	13a64 <__assert_fail@plt+0xfb4>
   132e0:	mov	r0, r5
   132e4:	str	r7, [sp, #20]
   132e8:	str	r4, [r6]
   132ec:	bl	30bac <__assert_fail@plt+0x1e0fc>
   132f0:	movw	r7, #61044	; 0xee74
   132f4:	cmp	r0, #0
   132f8:	movt	r7, #5
   132fc:	beq	13a30 <__assert_fail@plt+0xf80>
   13300:	mov	r9, r0
   13304:	add	r0, sp, #56	; 0x38
   13308:	mov	r4, #0
   1330c:	str	r6, [sp, #32]
   13310:	str	r5, [sp, #36]	; 0x24
   13314:	add	r0, r0, #96	; 0x60
   13318:	str	r0, [sp, #40]	; 0x28
   1331c:	mov	r0, #-2147483648	; 0x80000000
   13320:	str	r0, [sp, #44]	; 0x2c
   13324:	b	13354 <__assert_fail@plt+0x8a4>
   13328:	ldrh	r0, [r9, #56]	; 0x38
   1332c:	ldr	r6, [sp, #32]
   13330:	mov	r4, #0
   13334:	cmp	r0, #6
   13338:	strbeq	r4, [sl, #24]
   1333c:	mov	r0, r5
   13340:	str	r4, [r6]
   13344:	bl	30bac <__assert_fail@plt+0x1e0fc>
   13348:	mov	r9, r0
   1334c:	cmp	r0, #0
   13350:	beq	13a30 <__assert_fail@plt+0xf80>
   13354:	ldrb	r0, [sl, #32]
   13358:	cmp	r0, #0
   1335c:	beq	13374 <__assert_fail@plt+0x8c4>
   13360:	ldr	r0, [r9, #48]	; 0x30
   13364:	ldr	r1, [sp, #44]	; 0x2c
   13368:	cmp	r0, r1
   1336c:	beq	13374 <__assert_fail@plt+0x8c4>
   13370:	bl	18744 <__assert_fail@plt+0x5c94>
   13374:	ldr	r0, [r9, #48]	; 0x30
   13378:	strb	r4, [sl, #4]
   1337c:	strb	r4, [sl, #40]	; 0x28
   13380:	str	r0, [sp, #44]	; 0x2c
   13384:	ldr	r0, [r9, #80]	; 0x50
   13388:	cmp	r0, #0
   1338c:	str	r0, [sl, #8]
   13390:	movwne	r0, #1
   13394:	strb	r0, [sl, #5]
   13398:	ldrb	r0, [r7, #44]	; 0x2c
   1339c:	tst	r0, #4
   133a0:	bne	13860 <__assert_fail@plt+0xdb0>
   133a4:	ldrh	r0, [r9, #56]	; 0x38
   133a8:	cmp	r0, #6
   133ac:	bne	133e8 <__assert_fail@plt+0x938>
   133b0:	ldrb	r0, [r8, #1]
   133b4:	tst	r0, #2
   133b8:	beq	13408 <__assert_fail@plt+0x958>
   133bc:	movw	r0, #58004	; 0xe294
   133c0:	movt	r0, #5
   133c4:	ldr	r0, [r0]
   133c8:	cmp	r0, #0
   133cc:	bmi	13408 <__assert_fail@plt+0x958>
   133d0:	bl	12a68 <close@plt>
   133d4:	movw	r0, #58004	; 0xe294
   133d8:	mvn	r1, #0
   133dc:	movt	r0, #5
   133e0:	str	r1, [r0]
   133e4:	b	13408 <__assert_fail@plt+0x958>
   133e8:	ldr	r0, [r9, #48]	; 0x30
   133ec:	cmp	r0, #0
   133f0:	beq	133b0 <__assert_fail@plt+0x900>
   133f4:	movw	r1, #58008	; 0xe298
   133f8:	movt	r1, #5
   133fc:	ldr	r1, [r1]
   13400:	cmp	r0, r1
   13404:	bgt	133b0 <__assert_fail@plt+0x900>
   13408:	ldrb	r0, [r8, #1]
   1340c:	tst	r0, #2
   13410:	beq	13474 <__assert_fail@plt+0x9c4>
   13414:	ldr	r0, [r5, #32]
   13418:	cmn	r0, #100	; 0x64
   1341c:	beq	13428 <__assert_fail@plt+0x978>
   13420:	cmn	r0, #1
   13424:	ble	13b08 <__assert_fail@plt+0x1058>
   13428:	movw	r1, #58004	; 0xe294
   1342c:	str	r0, [sl, #16]
   13430:	movt	r1, #5
   13434:	ldr	r1, [r1]
   13438:	cmn	r1, #1
   1343c:	bgt	13474 <__assert_fail@plt+0x9c4>
   13440:	cmn	r0, #100	; 0x64
   13444:	bne	1345c <__assert_fail@plt+0x9ac>
   13448:	movw	r0, #58004	; 0xe294
   1344c:	mvn	r1, #99	; 0x63
   13450:	movt	r0, #5
   13454:	str	r1, [r0]
   13458:	b	13474 <__assert_fail@plt+0x9c4>
   1345c:	cmp	r0, #0
   13460:	bmi	13b60 <__assert_fail@plt+0x10b0>
   13464:	bl	227a8 <__assert_fail@plt+0xfcf8>
   13468:	movw	r1, #58004	; 0xe294
   1346c:	movt	r1, #5
   13470:	str	r0, [r1]
   13474:	ldr	r0, [r9, #48]	; 0x30
   13478:	movw	r1, #58008	; 0xe298
   1347c:	movt	r1, #5
   13480:	str	r0, [r1]
   13484:	ldr	r1, [sp, #40]	; 0x28
   13488:	ldrd	r2, [r9, #160]	; 0xa0
   1348c:	strd	r2, [r1]
   13490:	ldrh	r1, [r9, #56]	; 0x38
   13494:	sub	r1, r1, #2
   13498:	cmp	r1, #11
   1349c:	bhi	135bc <__assert_fail@plt+0xb0c>
   134a0:	add	r2, pc, #0
   134a4:	ldr	pc, [r2, r1, lsl #2]
   134a8:	ldrdeq	r3, [r1], -r8
   134ac:			; <UNDEFINED> instruction: 0x000135bc
   134b0:	andeq	r3, r1, r4, lsr #10
   134b4:			; <UNDEFINED> instruction: 0x000135bc
   134b8:			; <UNDEFINED> instruction: 0x000135bc
   134bc:	andeq	r3, r1, ip, ror r5
   134c0:			; <UNDEFINED> instruction: 0x000135bc
   134c4:			; <UNDEFINED> instruction: 0x000135bc
   134c8:	andeq	r3, r1, r0, asr #10
   134cc:			; <UNDEFINED> instruction: 0x000135bc
   134d0:			; <UNDEFINED> instruction: 0x000135bc
   134d4:	andeq	r3, r1, r8, lsl #11
   134d8:	ldr	r0, [r9, #80]	; 0x50
   134dc:	and	r0, r0, #61440	; 0xf000
   134e0:	cmp	r0, #40960	; 0xa000
   134e4:	bne	13628 <__assert_fail@plt+0xb78>
   134e8:	movw	r1, #32079	; 0x7d4f
   134ec:	mov	r0, #0
   134f0:	mov	r2, #5
   134f4:	movt	r1, #4
   134f8:	bl	12564 <dcgettext@plt>
   134fc:	ldr	r1, [r9, #28]
   13500:	mov	r4, r0
   13504:	mov	r0, #0
   13508:	bl	19960 <__assert_fail@plt+0x6eb0>
   1350c:	mov	r3, r0
   13510:	mov	r0, #0
   13514:	mov	r1, #0
   13518:	mov	r2, r4
   1351c:	bl	1269c <error@plt>
   13520:	b	138e4 <__assert_fail@plt+0xe34>
   13524:	ldr	r1, [r9, #28]
   13528:	ldr	r0, [r9, #32]
   1352c:	bl	18628 <__assert_fail@plt+0x5b78>
   13530:	ldrb	r0, [r7]
   13534:	cmp	r0, #0
   13538:	bne	1333c <__assert_fail@plt+0x88c>
   1353c:	b	135bc <__assert_fail@plt+0xb0c>
   13540:	cmp	r0, #0
   13544:	beq	1357c <__assert_fail@plt+0xacc>
   13548:	ldr	r0, [r9, #24]
   1354c:	ldr	r2, [r7, #52]	; 0x34
   13550:	sub	r1, fp, #136	; 0x88
   13554:	blx	r2
   13558:	cmp	r0, #0
   1355c:	beq	1356c <__assert_fail@plt+0xabc>
   13560:	ldr	r0, [r6]
   13564:	cmp	r0, #40	; 0x28
   13568:	beq	135ac <__assert_fail@plt+0xafc>
   1356c:	ldr	r1, [r9, #28]
   13570:	ldr	r0, [r9, #32]
   13574:	bl	18628 <__assert_fail@plt+0x5b78>
   13578:	b	135bc <__assert_fail@plt+0xb0c>
   1357c:	ldr	r1, [r9, #28]
   13580:	ldr	r0, [r9, #32]
   13584:	b	135b4 <__assert_fail@plt+0xb04>
   13588:	ldr	r0, [r9, #24]
   1358c:	ldr	r2, [r7, #52]	; 0x34
   13590:	sub	r1, fp, #136	; 0x88
   13594:	blx	r2
   13598:	cmp	r0, #0
   1359c:	beq	135bc <__assert_fail@plt+0xb0c>
   135a0:	ldr	r0, [r6]
   135a4:	cmp	r0, #40	; 0x28
   135a8:	bne	135bc <__assert_fail@plt+0xb0c>
   135ac:	ldr	r1, [r9, #28]
   135b0:	mov	r0, #40	; 0x28
   135b4:	bl	18628 <__assert_fail@plt+0x5b78>
   135b8:	b	1333c <__assert_fail@plt+0x88c>
   135bc:	ldrh	r1, [r9, #56]	; 0x38
   135c0:	bic	r0, r1, #1
   135c4:	cmp	r0, #10
   135c8:	bne	135f0 <__assert_fail@plt+0xb40>
   135cc:	ldrb	r0, [sl, #4]
   135d0:	cmp	r0, #0
   135d4:	bne	13b28 <__assert_fail@plt+0x1078>
   135d8:	ldr	r0, [sl, #8]
   135dc:	cmp	r1, #11
   135e0:	cmpne	r0, #0
   135e4:	bne	13b40 <__assert_fail@plt+0x1090>
   135e8:	str	r0, [fp, #-136]	; 0xffffff78
   135ec:	b	136d4 <__assert_fail@plt+0xc24>
   135f0:	movw	r0, #257	; 0x101
   135f4:	add	r1, r9, #64	; 0x40
   135f8:	mov	r2, #104	; 0x68
   135fc:	strh	r0, [sl, #4]
   13600:	add	r0, sp, #56	; 0x38
   13604:	bl	124e0 <memcpy@plt>
   13608:	ldr	r0, [sp, #72]	; 0x48
   1360c:	cmp	r0, #0
   13610:	str	r0, [sl, #8]
   13614:	str	r0, [fp, #-136]	; 0xffffff78
   13618:	beq	13690 <__assert_fail@plt+0xbe0>
   1361c:	ldr	r0, [r9, #48]	; 0x30
   13620:	str	r0, [sl]
   13624:	b	136e4 <__assert_fail@plt+0xc34>
   13628:	movw	r1, #32200	; 0x7dc8
   1362c:	mov	r0, #0
   13630:	mov	r2, #5
   13634:	movt	r1, #4
   13638:	bl	12564 <dcgettext@plt>
   1363c:	ldr	r1, [r9, #28]
   13640:	mov	r6, r0
   13644:	mov	r0, #0
   13648:	bl	19960 <__assert_fail@plt+0x6eb0>
   1364c:	mov	r8, r0
   13650:	ldr	r0, [r9]
   13654:	ldr	r1, [r7, #72]	; 0x48
   13658:	ldr	r4, [r0, #40]	; 0x28
   1365c:	cmp	r4, #0
   13660:	beq	138ac <__assert_fail@plt+0xdfc>
   13664:	ldr	r5, [r0, #28]
   13668:	mov	r0, #0
   1366c:	ldrb	r7, [r5, r4]
   13670:	strb	r0, [r5, r4]
   13674:	mov	r0, #1
   13678:	mov	r2, r5
   1367c:	bl	2c88c <__assert_fail@plt+0x19ddc>
   13680:	strb	r7, [r5, r4]
   13684:	movw	r7, #61044	; 0xee74
   13688:	movt	r7, #5
   1368c:	b	138bc <__assert_fail@plt+0xe0c>
   13690:	movw	r1, #31828	; 0x7c54
   13694:	mov	r0, #0
   13698:	mov	r2, #5
   1369c:	movt	r1, #4
   136a0:	bl	12564 <dcgettext@plt>
   136a4:	ldr	r1, [r7, #72]	; 0x48
   136a8:	ldr	r2, [r9, #28]
   136ac:	mov	r4, r0
   136b0:	mov	r0, #0
   136b4:	bl	2c88c <__assert_fail@plt+0x19ddc>
   136b8:	mov	r3, r0
   136bc:	mov	r2, r4
   136c0:	mov	r0, #0
   136c4:	mov	r1, #0
   136c8:	mov	r4, #0
   136cc:	bl	1269c <error@plt>
   136d0:	ldr	r0, [fp, #-136]	; 0xffffff78
   136d4:	ldr	r1, [r9, #48]	; 0x30
   136d8:	cmp	r0, #0
   136dc:	str	r1, [sl]
   136e0:	beq	13740 <__assert_fail@plt+0xc90>
   136e4:	ldr	r1, [r9, #28]
   136e8:	add	r2, r9, #168	; 0xa8
   136ec:	sub	r0, fp, #136	; 0x88
   136f0:	add	r3, sp, #56	; 0x38
   136f4:	str	r4, [sp]
   136f8:	bl	18f98 <__assert_fail@plt+0x64e8>
   136fc:	cmp	r0, #0
   13700:	beq	1333c <__assert_fail@plt+0x88c>
   13704:	ldr	r1, [fp, #-136]	; 0xffffff78
   13708:	ldrh	r0, [r9, #56]	; 0x38
   1370c:	and	r1, r1, #61440	; 0xf000
   13710:	cmp	r1, #16384	; 0x4000
   13714:	bne	13744 <__assert_fail@plt+0xc94>
   13718:	mov	r6, #1
   1371c:	cmp	r0, #11
   13720:	bne	13760 <__assert_fail@plt+0xcb0>
   13724:	ldr	r5, [sp, #36]	; 0x24
   13728:	mov	r1, r9
   1372c:	mov	r2, #1
   13730:	mov	r0, r5
   13734:	bl	32230 <__assert_fail@plt+0x1f780>
   13738:	ldr	r6, [sp, #32]
   1373c:	b	1333c <__assert_fail@plt+0x88c>
   13740:	ldrh	r0, [r9, #56]	; 0x38
   13744:	cmp	r0, #6
   13748:	bhi	13984 <__assert_fail@plt+0xed4>
   1374c:	mov	r1, #1
   13750:	mov	r2, #70	; 0x46
   13754:	mov	r6, #1
   13758:	tst	r2, r1, lsl r0
   1375c:	moveq	r6, #0
   13760:	ldr	r2, [r7, #4]
   13764:	mov	r1, #0
   13768:	cmp	r2, #0
   1376c:	bmi	137a4 <__assert_fail@plt+0xcf4>
   13770:	ldr	r3, [r9, #48]	; 0x30
   13774:	cmp	r3, r2
   13778:	blt	137a4 <__assert_fail@plt+0xcf4>
   1377c:	ldr	r0, [sp, #36]	; 0x24
   13780:	mov	r1, r9
   13784:	mov	r2, #4
   13788:	bl	32230 <__assert_fail@plt+0x1f780>
   1378c:	ldr	r0, [r7, #4]
   13790:	ldr	r1, [r9, #48]	; 0x30
   13794:	cmp	r1, r0
   13798:	ldrh	r0, [r9, #56]	; 0x38
   1379c:	mov	r1, #0
   137a0:	movwgt	r1, #1
   137a4:	ldrb	r3, [r7]
   137a8:	subs	r2, r0, #6
   137ac:	sub	r0, r0, #1
   137b0:	mov	r4, #1
   137b4:	clz	r0, r0
   137b8:	movwne	r2, #1
   137bc:	lsr	r0, r0, #5
   137c0:	clz	r3, r3
   137c4:	lsr	r3, r3, #5
   137c8:	orr	r2, r2, r3
   137cc:	and	r0, r0, r3
   137d0:	eor	r0, r0, r2
   137d4:	cmp	r0, #1
   137d8:	bne	137f0 <__assert_fail@plt+0xd40>
   137dc:	ldr	r0, [r7, #8]
   137e0:	ldr	r2, [r9, #48]	; 0x30
   137e4:	cmp	r2, r0
   137e8:	movwlt	r1, #1
   137ec:	mov	r4, r1
   137f0:	ldrb	r0, [r7, #44]	; 0x2c
   137f4:	tst	r0, #4
   137f8:	bne	1398c <__assert_fail@plt+0xedc>
   137fc:	ldr	r5, [sp, #36]	; 0x24
   13800:	cmp	r4, #0
   13804:	bne	13328 <__assert_fail@plt+0x878>
   13808:	ldrh	r0, [r9, #56]	; 0x38
   1380c:	orr	r0, r0, #1
   13810:	subs	r0, r0, #11
   13814:	movwne	r0, #1
   13818:	strb	r0, [sl, #4]
   1381c:	ldr	r0, [r9, #24]
   13820:	ldr	r1, [r5, #32]
   13824:	str	r0, [sl, #12]
   13828:	str	r1, [sl, #16]
   1382c:	bl	15eec <__assert_fail@plt+0x343c>
   13830:	mov	r2, r0
   13834:	ldr	r0, [r9, #28]
   13838:	add	r1, sp, #56	; 0x38
   1383c:	bl	1980c <__assert_fail@plt+0x6d5c>
   13840:	ldrb	r0, [sl, #24]
   13844:	cmp	r0, #0
   13848:	beq	13328 <__assert_fail@plt+0x878>
   1384c:	mov	r0, r5
   13850:	mov	r1, r9
   13854:	mov	r2, #4
   13858:	bl	32230 <__assert_fail@plt+0x1f780>
   1385c:	b	13328 <__assert_fail@plt+0x878>
   13860:	movw	r0, #58704	; 0xe550
   13864:	ldr	r2, [r9, #28]
   13868:	ldr	r1, [r7, #72]	; 0x48
   1386c:	movt	r0, #5
   13870:	ldr	r6, [r0]
   13874:	mov	r0, #0
   13878:	bl	2c88c <__assert_fail@plt+0x19ddc>
   1387c:	ldrh	r2, [r9, #56]	; 0x38
   13880:	str	r0, [sp, #28]
   13884:	sub	r0, r2, #1
   13888:	uxth	r1, r0
   1388c:	cmp	r1, #14
   13890:	bcs	138f4 <__assert_fail@plt+0xe44>
   13894:	movw	r1, #32276	; 0x7e14
   13898:	sxth	r0, r0
   1389c:	movt	r1, #4
   138a0:	ldr	r0, [r1, r0, lsl #2]
   138a4:	str	r0, [sp, #24]
   138a8:	b	13910 <__assert_fail@plt+0xe60>
   138ac:	movw	r2, #38711	; 0x9737
   138b0:	mov	r0, #1
   138b4:	movt	r2, #4
   138b8:	bl	2c88c <__assert_fail@plt+0x19ddc>
   138bc:	str	r0, [sp]
   138c0:	mov	r0, #0
   138c4:	mov	r1, #0
   138c8:	mov	r2, r6
   138cc:	mov	r3, r8
   138d0:	bl	1269c <error@plt>
   138d4:	ldr	r6, [sp, #32]
   138d8:	ldr	r5, [sp, #36]	; 0x24
   138dc:	movw	r8, #58000	; 0xe290
   138e0:	movt	r8, #5
   138e4:	mov	r0, #1
   138e8:	mov	r4, #0
   138ec:	str	r0, [sl, #28]
   138f0:	b	1333c <__assert_fail@plt+0x88c>
   138f4:	movw	r4, #58721	; 0xe561
   138f8:	movw	r1, #32074	; 0x7d4a
   138fc:	movt	r4, #5
   13900:	movt	r1, #4
   13904:	mov	r0, r4
   13908:	bl	1296c <sprintf@plt>
   1390c:	str	r4, [sp, #24]
   13910:	movw	r7, #61044	; 0xee74
   13914:	movw	r0, #58008	; 0xe298
   13918:	ldr	r2, [r9, #28]
   1391c:	ldr	r4, [r9, #48]	; 0x30
   13920:	movt	r7, #5
   13924:	movt	r0, #5
   13928:	ldr	r1, [r7, #72]	; 0x48
   1392c:	ldr	r5, [r0]
   13930:	mov	r0, #1
   13934:	bl	2c88c <__assert_fail@plt+0x19ddc>
   13938:	ldr	r1, [r7, #72]	; 0x48
   1393c:	ldr	r2, [r9, #24]
   13940:	mov	r8, r0
   13944:	mov	r0, #2
   13948:	bl	2c88c <__assert_fail@plt+0x19ddc>
   1394c:	ldr	r2, [sp, #28]
   13950:	ldr	r3, [sp, #24]
   13954:	movw	r1, #31622	; 0x7b86
   13958:	stm	sp, {r4, r5, r8}
   1395c:	str	r0, [sp, #12]
   13960:	mov	r0, r6
   13964:	movt	r1, #4
   13968:	bl	127f8 <fprintf@plt>
   1396c:	ldr	r6, [sp, #32]
   13970:	ldr	r5, [sp, #36]	; 0x24
   13974:	movw	r8, #58000	; 0xe290
   13978:	mov	r4, #0
   1397c:	movt	r8, #5
   13980:	b	133a4 <__assert_fail@plt+0x8f4>
   13984:	mov	r6, #0
   13988:	b	13760 <__assert_fail@plt+0xcb0>
   1398c:	movw	r0, #58704	; 0xe550
   13990:	ldr	r2, [r9, #28]
   13994:	ldr	r1, [r7, #72]	; 0x48
   13998:	movt	r0, #5
   1399c:	ldr	r5, [r0]
   139a0:	mov	r0, #0
   139a4:	bl	2c88c <__assert_fail@plt+0x19ddc>
   139a8:	ldrh	r2, [r9, #56]	; 0x38
   139ac:	mov	r7, r0
   139b0:	sub	r0, r2, #1
   139b4:	uxth	r1, r0
   139b8:	cmp	r1, #14
   139bc:	bcs	139d4 <__assert_fail@plt+0xf24>
   139c0:	movw	r1, #32276	; 0x7e14
   139c4:	sxth	r0, r0
   139c8:	movt	r1, #4
   139cc:	ldr	r3, [r1, r0, lsl #2]
   139d0:	b	139f0 <__assert_fail@plt+0xf40>
   139d4:	movw	r8, #58721	; 0xe561
   139d8:	movw	r1, #32074	; 0x7d4a
   139dc:	movt	r8, #5
   139e0:	movt	r1, #4
   139e4:	mov	r0, r8
   139e8:	bl	1296c <sprintf@plt>
   139ec:	mov	r3, r8
   139f0:	ldrb	r1, [sl, #5]
   139f4:	ldrb	r0, [sl, #4]
   139f8:	mov	r2, r7
   139fc:	str	r6, [sp]
   13a00:	str	r4, [sp, #4]
   13a04:	str	r1, [sp, #12]
   13a08:	movw	r1, #31871	; 0x7c7f
   13a0c:	str	r0, [sp, #8]
   13a10:	mov	r0, r5
   13a14:	movt	r1, #4
   13a18:	bl	127f8 <fprintf@plt>
   13a1c:	movw	r8, #58000	; 0xe290
   13a20:	movw	r7, #61044	; 0xee74
   13a24:	movt	r8, #5
   13a28:	movt	r7, #5
   13a2c:	b	137fc <__assert_fail@plt+0xd4c>
   13a30:	ldr	r7, [r6]
   13a34:	cmp	r7, #0
   13a38:	beq	13aa8 <__assert_fail@plt+0xff8>
   13a3c:	ldr	r1, [sp, #20]
   13a40:	mov	r0, #0
   13a44:	mov	r4, #0
   13a48:	bl	19960 <__assert_fail@plt+0x6eb0>
   13a4c:	movw	r2, #31426	; 0x7ac2
   13a50:	mov	r3, r0
   13a54:	mov	r0, #0
   13a58:	mov	r1, r7
   13a5c:	movt	r2, #4
   13a60:	b	13ae8 <__assert_fail@plt+0x1038>
   13a64:	movw	r1, #31409	; 0x7ab1
   13a68:	ldr	r4, [r6]
   13a6c:	mov	r0, #0
   13a70:	mov	r2, #5
   13a74:	movt	r1, #4
   13a78:	bl	12564 <dcgettext@plt>
   13a7c:	mov	r5, r0
   13a80:	mov	r0, #0
   13a84:	mov	r1, r7
   13a88:	bl	19960 <__assert_fail@plt+0x6eb0>
   13a8c:	mov	r3, r0
   13a90:	mov	r0, #0
   13a94:	mov	r1, r4
   13a98:	mov	r2, r5
   13a9c:	bl	1269c <error@plt>
   13aa0:	mov	r4, #1
   13aa4:	b	13aec <__assert_fail@plt+0x103c>
   13aa8:	mov	r0, r5
   13aac:	bl	30a04 <__assert_fail@plt+0x1df54>
   13ab0:	ldr	r7, [sp, #20]
   13ab4:	cmp	r0, #0
   13ab8:	beq	13b00 <__assert_fail@plt+0x1050>
   13abc:	movw	r1, #31484	; 0x7afc
   13ac0:	ldr	r5, [r6]
   13ac4:	mov	r0, #0
   13ac8:	mov	r2, #5
   13acc:	mov	r4, #0
   13ad0:	movt	r1, #4
   13ad4:	bl	12564 <dcgettext@plt>
   13ad8:	mov	r2, r0
   13adc:	mov	r0, #0
   13ae0:	mov	r1, r5
   13ae4:	mov	r3, r7
   13ae8:	bl	1269c <error@plt>
   13aec:	mov	r0, #1
   13af0:	str	r0, [sl, #28]
   13af4:	mov	r0, r4
   13af8:	sub	sp, fp, #28
   13afc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13b00:	mov	r4, #1
   13b04:	b	13af4 <__assert_fail@plt+0x1044>
   13b08:	movw	r0, #31539	; 0x7b33
   13b0c:	movw	r1, #31135	; 0x799f
   13b10:	movw	r3, #31573	; 0x7b55
   13b14:	mov	r2, #107	; 0x6b
   13b18:	movt	r0, #4
   13b1c:	movt	r1, #4
   13b20:	movt	r3, #4
   13b24:	bl	12ab0 <__assert_fail@plt>
   13b28:	movw	r0, #31726	; 0x7bee
   13b2c:	movw	r1, #31135	; 0x799f
   13b30:	movw	r3, #31743	; 0x7bff
   13b34:	mov	r2, #380	; 0x17c
   13b38:	movt	r0, #4
   13b3c:	b	13b54 <__assert_fail@plt+0x10a4>
   13b40:	movw	r0, #31783	; 0x7c27
   13b44:	movw	r1, #31135	; 0x799f
   13b48:	movw	r3, #31743	; 0x7bff
   13b4c:	movw	r2, #381	; 0x17d
   13b50:	movt	r0, #4
   13b54:	movt	r1, #4
   13b58:	movt	r3, #4
   13b5c:	bl	12ab0 <__assert_fail@plt>
   13b60:	movw	r0, #31594	; 0x7b6a
   13b64:	movw	r1, #31135	; 0x799f
   13b68:	movw	r3, #31573	; 0x7b55
   13b6c:	mov	r2, #125	; 0x7d
   13b70:	movt	r0, #4
   13b74:	b	13b1c <__assert_fail@plt+0x106c>
   13b78:	ldrd	r0, [r1, #72]	; 0x48
   13b7c:	mov	r3, #60	; 0x3c
   13b80:	b	13b88 <__assert_fail@plt+0x10d8>
   13b84:	nop	{0}
   13b88:	push	{r4, r5, r7, sl, fp, lr}
   13b8c:	add	fp, sp, #16
   13b90:	mov	r4, r1
   13b94:	ldr	r1, [r2, #44]	; 0x2c
   13b98:	cmp	r1, #2
   13b9c:	beq	13c48 <__assert_fail@plt+0x1198>
   13ba0:	cmp	r1, #1
   13ba4:	beq	13bfc <__assert_fail@plt+0x114c>
   13ba8:	cmp	r1, #0
   13bac:	bne	13ca4 <__assert_fail@plt+0x11f4>
   13bb0:	ldr	r5, [r2, #52]	; 0x34
   13bb4:	ldr	r2, [r2, #48]	; 0x30
   13bb8:	cmp	r0, r2
   13bbc:	moveq	r1, #0
   13bc0:	cmpeq	r4, r5
   13bc4:	beq	13c9c <__assert_fail@plt+0x11ec>
   13bc8:	mov	r1, r2
   13bcc:	bl	12888 <difftime@plt>
   13bd0:	sub	r0, r4, r5
   13bd4:	vldr	d16, [pc, #236]	; 13cc8 <__assert_fail@plt+0x1218>
   13bd8:	mov	r1, #0
   13bdc:	vmov	s2, r0
   13be0:	vcvt.f64.s32	d17, s2
   13be4:	vmla.f64	d0, d17, d16
   13be8:	vcmpe.f64	d0, #0.0
   13bec:	vmrs	APSR_nzcv, fpscr
   13bf0:	movwpl	r1, #1
   13bf4:	mov	r0, r1
   13bf8:	pop	{r4, r5, r7, sl, fp, pc}
   13bfc:	ldr	r5, [r2, #52]	; 0x34
   13c00:	ldr	r2, [r2, #48]	; 0x30
   13c04:	cmp	r0, r2
   13c08:	moveq	r1, #0
   13c0c:	cmpeq	r4, r5
   13c10:	beq	13c9c <__assert_fail@plt+0x11ec>
   13c14:	mov	r1, r2
   13c18:	bl	12888 <difftime@plt>
   13c1c:	sub	r0, r4, r5
   13c20:	vldr	d16, [pc, #160]	; 13cc8 <__assert_fail@plt+0x1218>
   13c24:	mov	r1, #0
   13c28:	vmov	s2, r0
   13c2c:	vcvt.f64.s32	d17, s2
   13c30:	vmla.f64	d0, d17, d16
   13c34:	vcmpe.f64	d0, #0.0
   13c38:	vmrs	APSR_nzcv, fpscr
   13c3c:	movwmi	r1, #1
   13c40:	mov	r0, r1
   13c44:	pop	{r4, r5, r7, sl, fp, pc}
   13c48:	ldr	r7, [r2, #52]	; 0x34
   13c4c:	ldr	r2, [r2, #48]	; 0x30
   13c50:	mov	r5, r3
   13c54:	mov	r1, r2
   13c58:	bl	12888 <difftime@plt>
   13c5c:	sub	r0, r4, r7
   13c60:	vldr	d16, [pc, #96]	; 13cc8 <__assert_fail@plt+0x1218>
   13c64:	vmov	s4, r5
   13c68:	mov	r1, #0
   13c6c:	vmov	s2, r0
   13c70:	mov	r0, #0
   13c74:	vcvt.f64.s32	d17, s2
   13c78:	vcvt.f64.s32	d18, s4
   13c7c:	vmla.f64	d0, d17, d16
   13c80:	vcmpe.f64	d0, d18
   13c84:	vmrs	APSR_nzcv, fpscr
   13c88:	vcmpe.f64	d0, #0.0
   13c8c:	movwls	r1, #1
   13c90:	vmrs	APSR_nzcv, fpscr
   13c94:	movwgt	r0, #1
   13c98:	and	r1, r0, r1
   13c9c:	mov	r0, r1
   13ca0:	pop	{r4, r5, r7, sl, fp, pc}
   13ca4:	movw	r0, #35937	; 0x8c61
   13ca8:	movw	r1, #32371	; 0x7e73
   13cac:	movw	r3, #33350	; 0x8246
   13cb0:	mov	r2, #138	; 0x8a
   13cb4:	movt	r0, #4
   13cb8:	movt	r1, #4
   13cbc:	movt	r3, #4
   13cc0:	bl	12ab0 <__assert_fail@plt>
   13cc4:	nop	{0}
   13cc8:	stmda	r6!, {r0, r2, r4, r7, r9, sl, ip, lr, pc}
   13ccc:	cdpcc	14, 1, cr2, cr1, cr11, {0}
   13cd0:	push	{r4, r5, r6, sl, fp, lr}
   13cd4:	add	fp, sp, #16
   13cd8:	mov	r5, r2
   13cdc:	ldr	r2, [r2, #156]	; 0x9c
   13ce0:	mov	r4, r1
   13ce4:	mov	r6, r0
   13ce8:	cmp	r2, #0
   13cec:	beq	13d04 <__assert_fail@plt+0x1254>
   13cf0:	mov	r0, r6
   13cf4:	mov	r1, r4
   13cf8:	bl	1980c <__assert_fail@plt+0x6d5c>
   13cfc:	cmp	r0, #0
   13d00:	beq	13d18 <__assert_fail@plt+0x1268>
   13d04:	ldr	r2, [r5, #160]	; 0xa0
   13d08:	mov	r0, r6
   13d0c:	mov	r1, r4
   13d10:	pop	{r4, r5, r6, sl, fp, lr}
   13d14:	b	1980c <__assert_fail@plt+0x6d5c>
   13d18:	mov	r0, #0
   13d1c:	pop	{r4, r5, r6, sl, fp, pc}
   13d20:	push	{r4, r5, r6, r7, fp, lr}
   13d24:	add	fp, sp, #16
   13d28:	ldr	r0, [r2, #44]	; 0x2c
   13d2c:	cmp	r0, #0
   13d30:	bne	13d80 <__assert_fail@plt+0x12d0>
   13d34:	ldrd	r4, [r2, #48]	; 0x30
   13d38:	ldrd	r6, [r1, #72]	; 0x48
   13d3c:	cmp	r4, r6
   13d40:	moveq	r0, #0
   13d44:	cmpeq	r5, r7
   13d48:	beq	13d7c <__assert_fail@plt+0x12cc>
   13d4c:	mov	r0, r6
   13d50:	mov	r1, r4
   13d54:	bl	12888 <difftime@plt>
   13d58:	sub	r0, r7, r5
   13d5c:	vldr	d16, [pc, #60]	; 13da0 <__assert_fail@plt+0x12f0>
   13d60:	vmov	s2, r0
   13d64:	mov	r0, #0
   13d68:	vcvt.f64.s32	d17, s2
   13d6c:	vmla.f64	d0, d17, d16
   13d70:	vcmpe.f64	d0, #0.0
   13d74:	vmrs	APSR_nzcv, fpscr
   13d78:	movwpl	r0, #1
   13d7c:	pop	{r4, r5, r6, r7, fp, pc}
   13d80:	movw	r0, #32332	; 0x7e4c
   13d84:	movw	r1, #32371	; 0x7e73
   13d88:	movw	r3, #32378	; 0x7e7a
   13d8c:	mov	r2, #166	; 0xa6
   13d90:	movt	r0, #4
   13d94:	movt	r1, #4
   13d98:	movt	r3, #4
   13d9c:	bl	12ab0 <__assert_fail@plt>
   13da0:	stmda	r6!, {r0, r2, r4, r7, r9, sl, ip, lr, pc}
   13da4:	cdpcc	14, 1, cr2, cr1, cr11, {0}
   13da8:	ldrd	r0, [r1, #72]	; 0x48
   13dac:	movw	r3, #20864	; 0x5180
   13db0:	movt	r3, #1
   13db4:	b	13b88 <__assert_fail@plt+0x10d8>
   13db8:	mov	r0, #1
   13dbc:	bx	lr
   13dc0:	ldrd	r0, [r1, #88]	; 0x58
   13dc4:	mov	r3, #60	; 0x3c
   13dc8:	b	13b88 <__assert_fail@plt+0x10d8>
   13dcc:	nop	{0}
   13dd0:	push	{r4, r5, r6, r7, fp, lr}
   13dd4:	add	fp, sp, #16
   13dd8:	ldr	r0, [r2, #44]	; 0x2c
   13ddc:	cmp	r0, #0
   13de0:	bne	13e30 <__assert_fail@plt+0x1380>
   13de4:	ldrd	r4, [r2, #48]	; 0x30
   13de8:	ldrd	r6, [r1, #88]	; 0x58
   13dec:	cmp	r4, r6
   13df0:	moveq	r0, #0
   13df4:	cmpeq	r5, r7
   13df8:	beq	13e2c <__assert_fail@plt+0x137c>
   13dfc:	mov	r0, r6
   13e00:	mov	r1, r4
   13e04:	bl	12888 <difftime@plt>
   13e08:	sub	r0, r7, r5
   13e0c:	vldr	d16, [pc, #60]	; 13e50 <__assert_fail@plt+0x13a0>
   13e10:	vmov	s2, r0
   13e14:	mov	r0, #0
   13e18:	vcvt.f64.s32	d17, s2
   13e1c:	vmla.f64	d0, d17, d16
   13e20:	vcmpe.f64	d0, #0.0
   13e24:	vmrs	APSR_nzcv, fpscr
   13e28:	movwpl	r0, #1
   13e2c:	pop	{r4, r5, r6, r7, fp, pc}
   13e30:	movw	r0, #32332	; 0x7e4c
   13e34:	movw	r1, #32371	; 0x7e73
   13e38:	movw	r3, #32445	; 0x7ebd
   13e3c:	mov	r2, #199	; 0xc7
   13e40:	movt	r0, #4
   13e44:	movt	r1, #4
   13e48:	movt	r3, #4
   13e4c:	bl	12ab0 <__assert_fail@plt>
   13e50:	stmda	r6!, {r0, r2, r4, r7, r9, sl, ip, lr, pc}
   13e54:	cdpcc	14, 1, cr2, cr1, cr11, {0}
   13e58:	push	{r4, r5, r6, sl, fp, lr}
   13e5c:	add	fp, sp, #16
   13e60:	mov	r5, r2
   13e64:	ldr	r2, [r2, #156]	; 0x9c
   13e68:	mov	r4, r1
   13e6c:	mov	r6, r0
   13e70:	cmp	r2, #0
   13e74:	beq	13e84 <__assert_fail@plt+0x13d4>
   13e78:	mov	r0, r6
   13e7c:	mov	r1, r4
   13e80:	bl	1980c <__assert_fail@plt+0x6d5c>
   13e84:	ldr	r2, [r5, #160]	; 0xa0
   13e88:	mov	r0, r6
   13e8c:	mov	r1, r4
   13e90:	pop	{r4, r5, r6, sl, fp, lr}
   13e94:	b	1980c <__assert_fail@plt+0x6d5c>
   13e98:	ldrd	r0, [r1, #88]	; 0x58
   13e9c:	movw	r3, #20864	; 0x5180
   13ea0:	movt	r3, #1
   13ea4:	b	13b88 <__assert_fail@plt+0x10d8>
   13ea8:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   13eac:	add	fp, sp, #24
   13eb0:	movw	r9, #61000	; 0xee48
   13eb4:	mov	r5, r1
   13eb8:	movw	r1, #35340	; 0x8a0c
   13ebc:	mov	r8, r0
   13ec0:	movt	r9, #5
   13ec4:	movt	r1, #4
   13ec8:	ldr	r6, [r9, #12]
   13ecc:	mov	r0, r6
   13ed0:	bl	123fc <strcmp@plt>
   13ed4:	mov	r4, #1
   13ed8:	cmp	r0, #0
   13edc:	beq	13fac <__assert_fail@plt+0x14fc>
   13ee0:	ldrb	r0, [r9, #4]
   13ee4:	cmp	r0, #0
   13ee8:	beq	13f08 <__assert_fail@plt+0x1458>
   13eec:	ldr	r0, [r5, #16]
   13ef0:	and	r0, r0, #61440	; 0xf000
   13ef4:	sub	r0, r0, #16384	; 0x4000
   13ef8:	clz	r0, r0
   13efc:	lsr	r0, r0, #5
   13f00:	lsl	r5, r0, #9
   13f04:	b	13f0c <__assert_fail@plt+0x145c>
   13f08:	mov	r5, #0
   13f0c:	ldr	r0, [r9, #16]
   13f10:	mov	r1, r6
   13f14:	mov	r2, r5
   13f18:	bl	12450 <unlinkat@plt>
   13f1c:	cmp	r0, #0
   13f20:	beq	13fac <__assert_fail@plt+0x14fc>
   13f24:	bl	12804 <__errno_location@plt>
   13f28:	ldr	r6, [r0]
   13f2c:	mov	r7, r0
   13f30:	cmp	r6, #2
   13f34:	bne	13f5c <__assert_fail@plt+0x14ac>
   13f38:	movw	r0, #61044	; 0xee74
   13f3c:	movt	r0, #5
   13f40:	ldrb	r0, [r0, #14]
   13f44:	cmp	r0, #0
   13f48:	beq	13f5c <__assert_fail@plt+0x14ac>
   13f4c:	mov	r0, #0
   13f50:	str	r0, [r7]
   13f54:	mov	r0, r4
   13f58:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   13f5c:	cmp	r5, #0
   13f60:	cmpeq	r6, #21
   13f64:	beq	13fb4 <__assert_fail@plt+0x1504>
   13f68:	movw	r1, #32512	; 0x7f00
   13f6c:	mov	r0, #0
   13f70:	mov	r2, #5
   13f74:	mov	r4, #0
   13f78:	movt	r1, #4
   13f7c:	bl	12564 <dcgettext@plt>
   13f80:	mov	r5, r0
   13f84:	mov	r0, #0
   13f88:	mov	r1, r8
   13f8c:	bl	19960 <__assert_fail@plt+0x6eb0>
   13f90:	mov	r3, r0
   13f94:	mov	r0, #0
   13f98:	mov	r1, r6
   13f9c:	mov	r2, r5
   13fa0:	bl	1269c <error@plt>
   13fa4:	mov	r0, #1
   13fa8:	str	r0, [r9, #28]
   13fac:	mov	r0, r4
   13fb0:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   13fb4:	ldr	r1, [r9, #12]
   13fb8:	ldr	r0, [r9, #16]
   13fbc:	mov	r2, #512	; 0x200
   13fc0:	bl	12450 <unlinkat@plt>
   13fc4:	cmp	r0, #0
   13fc8:	beq	13fac <__assert_fail@plt+0x14fc>
   13fcc:	ldr	r6, [r7]
   13fd0:	b	13f68 <__assert_fail@plt+0x14b8>
   13fd4:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   13fd8:	add	fp, sp, #24
   13fdc:	mov	r8, r0
   13fe0:	ldr	r0, [r1, #16]
   13fe4:	and	r0, r0, #61440	; 0xf000
   13fe8:	cmp	r0, #32768	; 0x8000
   13fec:	beq	14064 <__assert_fail@plt+0x15b4>
   13ff0:	mov	r4, #0
   13ff4:	cmp	r0, #16384	; 0x4000
   13ff8:	bne	14074 <__assert_fail@plt+0x15c4>
   13ffc:	bl	12804 <__errno_location@plt>
   14000:	movw	r9, #61000	; 0xee48
   14004:	mov	r4, #0
   14008:	mov	r6, r0
   1400c:	movw	r2, #18688	; 0x4900
   14010:	movt	r9, #5
   14014:	str	r4, [r0]
   14018:	movt	r2, #10
   1401c:	ldr	r1, [r9, #12]
   14020:	ldr	r0, [r9, #16]
   14024:	bl	26670 <__assert_fail@plt+0x13bc0>
   14028:	cmn	r0, #1
   1402c:	ble	140b8 <__assert_fail@plt+0x1608>
   14030:	mov	r5, r0
   14034:	bl	12984 <fdopendir@plt>
   14038:	cmp	r0, #0
   1403c:	beq	140c0 <__assert_fail@plt+0x1610>
   14040:	mov	r7, r0
   14044:	mov	r0, #0
   14048:	str	r0, [r6]
   1404c:	mov	r0, r7
   14050:	bl	12978 <readdir64@plt>
   14054:	cmp	r0, #0
   14058:	beq	14104 <__assert_fail@plt+0x1654>
   1405c:	mov	r4, #0
   14060:	b	1408c <__assert_fail@plt+0x15dc>
   14064:	ldrd	r0, [r1, #48]	; 0x30
   14068:	orr	r0, r0, r1
   1406c:	clz	r0, r0
   14070:	lsr	r4, r0, #5
   14074:	mov	r0, r4
   14078:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   1407c:	mov	r0, r7
   14080:	bl	12978 <readdir64@plt>
   14084:	cmp	r0, #0
   14088:	beq	14104 <__assert_fail@plt+0x1654>
   1408c:	ldrb	r1, [r0, #19]
   14090:	cmp	r1, #46	; 0x2e
   14094:	bne	14108 <__assert_fail@plt+0x1658>
   14098:	ldrb	r1, [r0, #20]
   1409c:	cmp	r1, #0
   140a0:	beq	1407c <__assert_fail@plt+0x15cc>
   140a4:	cmp	r1, #46	; 0x2e
   140a8:	ldrbeq	r0, [r0, #21]
   140ac:	cmpeq	r0, #0
   140b0:	bne	14108 <__assert_fail@plt+0x1658>
   140b4:	b	1407c <__assert_fail@plt+0x15cc>
   140b8:	ldr	r5, [r6]
   140bc:	b	1416c <__assert_fail@plt+0x16bc>
   140c0:	ldr	r6, [r6]
   140c4:	mov	r0, #0
   140c8:	mov	r1, r8
   140cc:	mov	r4, #0
   140d0:	bl	19960 <__assert_fail@plt+0x6eb0>
   140d4:	movw	r2, #56015	; 0xdacf
   140d8:	mov	r3, r0
   140dc:	mov	r0, #0
   140e0:	mov	r1, r6
   140e4:	movt	r2, #4
   140e8:	bl	1269c <error@plt>
   140ec:	mov	r0, #1
   140f0:	str	r0, [r9, #28]
   140f4:	mov	r0, r5
   140f8:	bl	12a68 <close@plt>
   140fc:	mov	r0, r4
   14100:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   14104:	mov	r4, #1
   14108:	ldr	r5, [r6]
   1410c:	cmp	r5, #0
   14110:	beq	14154 <__assert_fail@plt+0x16a4>
   14114:	mov	r0, #0
   14118:	mov	r1, r8
   1411c:	mov	r4, #0
   14120:	bl	19960 <__assert_fail@plt+0x6eb0>
   14124:	movw	r2, #56015	; 0xdacf
   14128:	mov	r3, r0
   1412c:	mov	r0, #0
   14130:	mov	r1, r5
   14134:	movt	r2, #4
   14138:	bl	1269c <error@plt>
   1413c:	mov	r0, #1
   14140:	str	r0, [r9, #28]
   14144:	mov	r0, r7
   14148:	bl	12a80 <closedir@plt>
   1414c:	mov	r0, r4
   14150:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   14154:	mov	r0, r7
   14158:	bl	12a80 <closedir@plt>
   1415c:	cmp	r0, #0
   14160:	beq	14074 <__assert_fail@plt+0x15c4>
   14164:	ldr	r5, [r6]
   14168:	mov	r4, #0
   1416c:	mov	r0, #0
   14170:	mov	r1, r8
   14174:	bl	19960 <__assert_fail@plt+0x6eb0>
   14178:	movw	r2, #56015	; 0xdacf
   1417c:	mov	r3, r0
   14180:	mov	r0, #0
   14184:	mov	r1, r5
   14188:	movt	r2, #4
   1418c:	bl	1269c <error@plt>
   14190:	mov	r0, #1
   14194:	str	r0, [r9, #28]
   14198:	mov	r0, r4
   1419c:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   141a0:	b	156ac <__assert_fail@plt+0x2bfc>
   141a4:	movw	r0, #61000	; 0xee48
   141a8:	movt	r0, #5
   141ac:	ldr	r0, [r0, #12]
   141b0:	b	156ac <__assert_fail@plt+0x2bfc>
   141b4:	mov	r0, #0
   141b8:	bx	lr
   141bc:	push	{r4, r5, fp, lr}
   141c0:	add	fp, sp, #8
   141c4:	sub	sp, sp, #16
   141c8:	movw	r3, #61044	; 0xee74
   141cc:	mov	ip, r1
   141d0:	movw	r1, #61000	; 0xee48
   141d4:	ldrb	r5, [r2, #32]
   141d8:	ldr	r2, [r2, #44]	; 0x2c
   141dc:	movt	r1, #5
   141e0:	movt	r3, #5
   141e4:	ldr	r4, [r3, #20]
   141e8:	ldr	lr, [r1, #12]
   141ec:	ldr	r3, [r3, #40]	; 0x28
   141f0:	ldr	r1, [r1, #16]
   141f4:	str	r4, [sp]
   141f8:	stmib	sp, {r3, r5}
   141fc:	str	r2, [sp, #12]
   14200:	mov	r2, lr
   14204:	mov	r3, ip
   14208:	bl	21180 <__assert_fail@plt+0xe6d0>
   1420c:	mov	r0, #1
   14210:	sub	sp, fp, #8
   14214:	pop	{r4, r5, fp, pc}
   14218:	push	{fp, lr}
   1421c:	mov	fp, sp
   14220:	sub	sp, sp, #8
   14224:	ldrb	ip, [r2, #52]	; 0x34
   14228:	ldr	r1, [r2, #56]	; 0x38
   1422c:	ldr	r2, [r2, #44]	; 0x2c
   14230:	movw	r3, #53924	; 0xd2a4
   14234:	str	r0, [sp]
   14238:	movt	r3, #4
   1423c:	mov	r0, r2
   14240:	mov	r2, ip
   14244:	bl	21b2c <__assert_fail@plt+0xf07c>
   14248:	mov	r0, #1
   1424c:	mov	sp, fp
   14250:	pop	{fp, pc}
   14254:	push	{r4, sl, fp, lr}
   14258:	add	fp, sp, #8
   1425c:	ldr	r4, [r2, #44]	; 0x2c
   14260:	mov	r1, r4
   14264:	bl	12a44 <fputs@plt>
   14268:	mov	r0, #0
   1426c:	mov	r1, r4
   14270:	bl	1299c <putc@plt>
   14274:	mov	r0, #1
   14278:	pop	{r4, sl, fp, pc}
   1427c:	push	{r4, sl, fp, lr}
   14280:	add	fp, sp, #8
   14284:	mov	r4, r2
   14288:	mov	r2, r0
   1428c:	mov	r0, r1
   14290:	mov	r1, r2
   14294:	bl	1b8b8 <__assert_fail@plt+0x8e08>
   14298:	ldr	r1, [r4, #40]	; 0x28
   1429c:	bl	123fc <strcmp@plt>
   142a0:	clz	r0, r0
   142a4:	lsr	r0, r0, #5
   142a8:	pop	{r4, sl, fp, pc}
   142ac:	ldr	r0, [r2, #40]	; 0x28
   142b0:	cmp	r0, #2
   142b4:	beq	142e4 <__assert_fail@plt+0x1834>
   142b8:	cmp	r0, #1
   142bc:	beq	14304 <__assert_fail@plt+0x1854>
   142c0:	cmp	r0, #0
   142c4:	bne	142fc <__assert_fail@plt+0x184c>
   142c8:	ldr	r1, [r1, #28]
   142cc:	ldrd	r2, [r2, #48]	; 0x30
   142d0:	mov	r0, #1
   142d4:	subs	r1, r2, r1
   142d8:	sbcs	r1, r3, #0
   142dc:	bcs	142fc <__assert_fail@plt+0x184c>
   142e0:	bx	lr
   142e4:	ldr	r0, [r1, #28]
   142e8:	ldrd	r2, [r2, #48]	; 0x30
   142ec:	eor	r0, r2, r0
   142f0:	orrs	r0, r0, r3
   142f4:	mov	r0, #1
   142f8:	bxeq	lr
   142fc:	mov	r0, #0
   14300:	bx	lr
   14304:	ldrd	r2, [r2, #48]	; 0x30
   14308:	ldr	r1, [r1, #28]
   1430c:	mov	r0, #1
   14310:	subs	r1, r1, r2
   14314:	rscs	r1, r3, #0
   14318:	movcs	r0, #0
   1431c:	bx	lr
   14320:	ldr	r0, [r1, #28]
   14324:	ldr	r1, [r2, #40]	; 0x28
   14328:	sub	r0, r1, r0
   1432c:	clz	r0, r0
   14330:	lsr	r0, r0, #5
   14334:	bx	lr
   14338:	push	{r4, r5, r6, r7, fp, lr}
   1433c:	add	fp, sp, #16
   14340:	mov	r5, r0
   14344:	ldr	r0, [r1, #16]
   14348:	mov	r7, #0
   1434c:	and	r0, r0, #61440	; 0xf000
   14350:	cmp	r0, #40960	; 0xa000
   14354:	bne	143bc <__assert_fail@plt+0x190c>
   14358:	movw	r7, #61000	; 0xee48
   1435c:	mov	r6, r2
   14360:	movt	r7, #5
   14364:	ldr	r1, [r7, #12]
   14368:	ldr	r0, [r7, #16]
   1436c:	bl	22400 <__assert_fail@plt+0xf950>
   14370:	mov	r4, r0
   14374:	cmp	r0, #0
   14378:	beq	14398 <__assert_fail@plt+0x18e8>
   1437c:	ldr	r0, [r6, #40]	; 0x28
   14380:	mov	r1, r4
   14384:	mov	r2, #16
   14388:	bl	126c0 <fnmatch@plt>
   1438c:	clz	r0, r0
   14390:	lsr	r7, r0, #5
   14394:	b	143b4 <__assert_fail@plt+0x1904>
   14398:	bl	12804 <__errno_location@plt>
   1439c:	ldr	r0, [r0]
   143a0:	mov	r1, r5
   143a4:	bl	18628 <__assert_fail@plt+0x5b78>
   143a8:	mov	r0, #1
   143ac:	str	r0, [r7, #28]
   143b0:	mov	r7, #0
   143b4:	mov	r0, r4
   143b8:	bl	30174 <__assert_fail@plt+0x1d6c4>
   143bc:	mov	r0, r7
   143c0:	pop	{r4, r5, r6, r7, fp, pc}
   143c4:	push	{r4, r5, fp, lr}
   143c8:	add	fp, sp, #8
   143cc:	ldr	r4, [r2, #40]	; 0x28
   143d0:	bl	22958 <__assert_fail@plt+0xfea8>
   143d4:	mov	r5, r0
   143d8:	bl	22aa8 <__assert_fail@plt+0xfff8>
   143dc:	mov	r0, r4
   143e0:	mov	r1, r5
   143e4:	mov	r2, #16
   143e8:	bl	126c0 <fnmatch@plt>
   143ec:	mov	r4, r0
   143f0:	mov	r0, r5
   143f4:	bl	30174 <__assert_fail@plt+0x1d6c4>
   143f8:	clz	r0, r4
   143fc:	lsr	r0, r0, #5
   14400:	pop	{r4, r5, fp, pc}
   14404:	push	{r4, r5, fp, lr}
   14408:	add	fp, sp, #8
   1440c:	ldr	r0, [r2, #40]	; 0x28
   14410:	cmp	r0, #2
   14414:	beq	14444 <__assert_fail@plt+0x1994>
   14418:	cmp	r0, #1
   1441c:	beq	14470 <__assert_fail@plt+0x19c0>
   14420:	cmp	r0, #0
   14424:	bne	14468 <__assert_fail@plt+0x19b8>
   14428:	ldrd	r4, [r1, #96]	; 0x60
   1442c:	ldrd	r2, [r2, #48]	; 0x30
   14430:	mov	r0, #1
   14434:	subs	r1, r2, r4
   14438:	sbcs	r1, r3, r5
   1443c:	bcs	14468 <__assert_fail@plt+0x19b8>
   14440:	pop	{r4, r5, fp, pc}
   14444:	ldr	r0, [r2, #48]	; 0x30
   14448:	ldr	r3, [r2, #52]	; 0x34
   1444c:	ldr	r2, [r1, #96]	; 0x60
   14450:	ldr	r1, [r1, #100]	; 0x64
   14454:	eor	r1, r1, r3
   14458:	eor	r0, r2, r0
   1445c:	orrs	r0, r0, r1
   14460:	mov	r0, #1
   14464:	popeq	{r4, r5, fp, pc}
   14468:	mov	r0, #0
   1446c:	pop	{r4, r5, fp, pc}
   14470:	ldrd	r2, [r2, #48]	; 0x30
   14474:	ldrd	r4, [r1, #96]	; 0x60
   14478:	mov	r0, #1
   1447c:	subs	r1, r4, r2
   14480:	sbcs	r1, r5, r3
   14484:	movcs	r0, #0
   14488:	pop	{r4, r5, fp, pc}
   1448c:	push	{fp, lr}
   14490:	mov	fp, sp
   14494:	mov	r1, r0
   14498:	ldr	r0, [r2, #40]	; 0x28
   1449c:	mov	r2, #16
   144a0:	bl	126c0 <fnmatch@plt>
   144a4:	clz	r0, r0
   144a8:	lsr	r0, r0, #5
   144ac:	pop	{fp, pc}
   144b0:	ldr	r0, [r2, #40]	; 0x28
   144b4:	cmp	r0, #2
   144b8:	beq	144e8 <__assert_fail@plt+0x1a38>
   144bc:	cmp	r0, #1
   144c0:	beq	14508 <__assert_fail@plt+0x1a58>
   144c4:	cmp	r0, #0
   144c8:	bne	14500 <__assert_fail@plt+0x1a50>
   144cc:	ldr	r1, [r1, #20]
   144d0:	ldrd	r2, [r2, #48]	; 0x30
   144d4:	mov	r0, #1
   144d8:	subs	r1, r2, r1
   144dc:	sbcs	r1, r3, #0
   144e0:	bcs	14500 <__assert_fail@plt+0x1a50>
   144e4:	bx	lr
   144e8:	ldr	r0, [r1, #20]
   144ec:	ldrd	r2, [r2, #48]	; 0x30
   144f0:	eor	r0, r2, r0
   144f4:	orrs	r0, r0, r3
   144f8:	mov	r0, #1
   144fc:	bxeq	lr
   14500:	mov	r0, #0
   14504:	bx	lr
   14508:	ldrd	r2, [r2, #48]	; 0x30
   1450c:	ldr	r1, [r1, #20]
   14510:	mov	r0, #1
   14514:	subs	r1, r1, r2
   14518:	rscs	r1, r3, #0
   1451c:	movcs	r0, #0
   14520:	bx	lr
   14524:	push	{r4, r5, r6, r7, fp, lr}
   14528:	add	fp, sp, #16
   1452c:	mov	r5, r0
   14530:	ldr	r0, [r1, #16]
   14534:	mov	r7, #0
   14538:	and	r0, r0, #61440	; 0xf000
   1453c:	cmp	r0, #40960	; 0xa000
   14540:	bne	145a8 <__assert_fail@plt+0x1af8>
   14544:	movw	r7, #61000	; 0xee48
   14548:	mov	r6, r2
   1454c:	movt	r7, #5
   14550:	ldr	r1, [r7, #12]
   14554:	ldr	r0, [r7, #16]
   14558:	bl	22400 <__assert_fail@plt+0xf950>
   1455c:	mov	r4, r0
   14560:	cmp	r0, #0
   14564:	beq	14584 <__assert_fail@plt+0x1ad4>
   14568:	ldr	r0, [r6, #40]	; 0x28
   1456c:	mov	r1, r4
   14570:	mov	r2, #0
   14574:	bl	126c0 <fnmatch@plt>
   14578:	clz	r0, r0
   1457c:	lsr	r7, r0, #5
   14580:	b	145a0 <__assert_fail@plt+0x1af0>
   14584:	bl	12804 <__errno_location@plt>
   14588:	ldr	r0, [r0]
   1458c:	mov	r1, r5
   14590:	bl	18628 <__assert_fail@plt+0x5b78>
   14594:	mov	r0, #1
   14598:	str	r0, [r7, #28]
   1459c:	mov	r7, #0
   145a0:	mov	r0, r4
   145a4:	bl	30174 <__assert_fail@plt+0x1d6c4>
   145a8:	mov	r0, r7
   145ac:	pop	{r4, r5, r6, r7, fp, pc}
   145b0:	push	{r4, r5, fp, lr}
   145b4:	add	fp, sp, #8
   145b8:	sub	sp, sp, #16
   145bc:	movw	r3, #61044	; 0xee74
   145c0:	mov	ip, r1
   145c4:	movw	r1, #61000	; 0xee48
   145c8:	ldrb	r5, [r2, #32]
   145cc:	ldr	r2, [r2, #44]	; 0x2c
   145d0:	movt	r1, #5
   145d4:	movt	r3, #5
   145d8:	ldr	r4, [r3, #20]
   145dc:	ldr	lr, [r1, #12]
   145e0:	ldr	r3, [r3, #40]	; 0x28
   145e4:	ldr	r1, [r1, #16]
   145e8:	str	r4, [sp]
   145ec:	stmib	sp, {r3, r5}
   145f0:	str	r2, [sp, #12]
   145f4:	mov	r2, lr
   145f8:	mov	r3, ip
   145fc:	bl	21180 <__assert_fail@plt+0xe6d0>
   14600:	mov	r0, #1
   14604:	sub	sp, fp, #8
   14608:	pop	{r4, r5, fp, pc}
   1460c:	ldrd	r0, [r1, #80]	; 0x50
   14610:	mov	r3, #60	; 0x3c
   14614:	b	13b88 <__assert_fail@plt+0x10d8>
   14618:	ldrd	r0, [r1, #80]	; 0x50
   1461c:	movw	r3, #20864	; 0x5180
   14620:	movt	r3, #1
   14624:	b	13b88 <__assert_fail@plt+0x10d8>
   14628:	push	{r4, r5, fp, lr}
   1462c:	add	fp, sp, #8
   14630:	ldr	r4, [r2, #40]	; 0x28
   14634:	bl	22958 <__assert_fail@plt+0xfea8>
   14638:	mov	r5, r0
   1463c:	bl	22aa8 <__assert_fail@plt+0xfff8>
   14640:	mov	r0, r4
   14644:	mov	r1, r5
   14648:	mov	r2, #0
   1464c:	bl	126c0 <fnmatch@plt>
   14650:	mov	r4, r0
   14654:	mov	r0, r5
   14658:	bl	30174 <__assert_fail@plt+0x1d6c4>
   1465c:	clz	r0, r4
   14660:	lsr	r0, r0, #5
   14664:	pop	{r4, r5, fp, pc}
   14668:	push	{fp, lr}
   1466c:	mov	fp, sp
   14670:	ldr	r2, [r2, #160]	; 0xa0
   14674:	bl	1980c <__assert_fail@plt+0x6d5c>
   14678:	eor	r0, r0, #1
   1467c:	pop	{fp, pc}
   14680:	push	{r4, r5, r6, r7, fp, lr}
   14684:	add	fp, sp, #16
   14688:	ldr	r0, [r2, #44]	; 0x2c
   1468c:	cmp	r0, #0
   14690:	bne	146e0 <__assert_fail@plt+0x1c30>
   14694:	ldrd	r4, [r2, #48]	; 0x30
   14698:	ldrd	r6, [r1, #80]	; 0x50
   1469c:	cmp	r4, r6
   146a0:	moveq	r0, #0
   146a4:	cmpeq	r5, r7
   146a8:	beq	146dc <__assert_fail@plt+0x1c2c>
   146ac:	mov	r0, r6
   146b0:	mov	r1, r4
   146b4:	bl	12888 <difftime@plt>
   146b8:	sub	r0, r7, r5
   146bc:	vldr	d16, [pc, #60]	; 14700 <__assert_fail@plt+0x1c50>
   146c0:	vmov	s2, r0
   146c4:	mov	r0, #0
   146c8:	vcvt.f64.s32	d17, s2
   146cc:	vmla.f64	d0, d17, d16
   146d0:	vcmpe.f64	d0, #0.0
   146d4:	vmrs	APSR_nzcv, fpscr
   146d8:	movwpl	r0, #1
   146dc:	pop	{r4, r5, r6, r7, fp, pc}
   146e0:	movw	r0, #32332	; 0x7e4c
   146e4:	movw	r1, #32371	; 0x7e73
   146e8:	movw	r3, #32529	; 0x7f11
   146ec:	movw	r2, #621	; 0x26d
   146f0:	movt	r0, #4
   146f4:	movt	r1, #4
   146f8:	movt	r3, #4
   146fc:	bl	12ab0 <__assert_fail@plt>
   14700:	stmda	r6!, {r0, r2, r4, r7, r9, sl, ip, lr, pc}
   14704:	cdpcc	14, 1, cr2, cr1, cr11, {0}
   14708:	push	{r4, r5, r6, r7, fp, lr}
   1470c:	add	fp, sp, #16
   14710:	mov	r5, r0
   14714:	ldr	r0, [r2, #44]	; 0x2c
   14718:	cmp	r0, #0
   1471c:	bne	147f4 <__assert_fail@plt+0x1d44>
   14720:	ldr	r0, [r2, #40]	; 0x28
   14724:	cmp	r0, #4
   14728:	bhi	1480c <__assert_fail@plt+0x1d5c>
   1472c:	add	r3, pc, #0
   14730:	ldr	pc, [r3, r0, lsl #2]
   14734:	andeq	r4, r1, r8, asr #14
   14738:			; <UNDEFINED> instruction: 0x000147b0
   1473c:	andeq	r4, r1, r0, asr r7
   14740:	andeq	r4, r1, r8, asr r7
   14744:	andeq	r4, r1, r4, lsr #16
   14748:	add	r0, r1, #72	; 0x48
   1474c:	b	1475c <__assert_fail@plt+0x1cac>
   14750:	add	r0, r1, #88	; 0x58
   14754:	b	1475c <__assert_fail@plt+0x1cac>
   14758:	add	r0, r1, #80	; 0x50
   1475c:	ldr	r5, [r2, #52]	; 0x34
   14760:	ldr	r2, [r2, #48]	; 0x30
   14764:	ldrd	r6, [r0]
   14768:	cmp	r2, r6
   1476c:	moveq	r4, #0
   14770:	cmpeq	r5, r7
   14774:	beq	147a8 <__assert_fail@plt+0x1cf8>
   14778:	mov	r0, r6
   1477c:	mov	r1, r2
   14780:	bl	12888 <difftime@plt>
   14784:	sub	r0, r7, r5
   14788:	vldr	d16, [pc, #184]	; 14848 <__assert_fail@plt+0x1d98>
   1478c:	mov	r4, #0
   14790:	vmov	s2, r0
   14794:	vcvt.f64.s32	d17, s2
   14798:	vmla.f64	d0, d17, d16
   1479c:	vcmpe.f64	d0, #0.0
   147a0:	vmrs	APSR_nzcv, fpscr
   147a4:	movwpl	r4, #1
   147a8:	mov	r0, r4
   147ac:	pop	{r4, r5, r6, r7, fp, pc}
   147b0:	movw	r1, #32704	; 0x7fc0
   147b4:	mov	r0, #0
   147b8:	mov	r2, #5
   147bc:	mov	r4, #0
   147c0:	movt	r1, #4
   147c4:	bl	12564 <dcgettext@plt>
   147c8:	mov	r6, r0
   147cc:	mov	r0, #0
   147d0:	mov	r1, r5
   147d4:	bl	19960 <__assert_fail@plt+0x6eb0>
   147d8:	mov	r3, r0
   147dc:	mov	r0, #0
   147e0:	mov	r1, #0
   147e4:	mov	r2, r6
   147e8:	bl	1269c <error@plt>
   147ec:	mov	r0, r4
   147f0:	pop	{r4, r5, r6, r7, fp, pc}
   147f4:	movw	r0, #32332	; 0x7e4c
   147f8:	movw	r1, #32371	; 0x7e73
   147fc:	movw	r3, #32595	; 0x7f53
   14800:	movw	r2, #631	; 0x277
   14804:	movt	r0, #4
   14808:	b	14838 <__assert_fail@plt+0x1d88>
   1480c:	movw	r0, #32752	; 0x7ff0
   14810:	movw	r1, #32371	; 0x7e73
   14814:	movw	r3, #32595	; 0x7f53
   14818:	movw	r2, #667	; 0x29b
   1481c:	movt	r0, #4
   14820:	b	14838 <__assert_fail@plt+0x1d88>
   14824:	movw	r0, #32663	; 0x7f97
   14828:	movw	r1, #32371	; 0x7e73
   1482c:	movw	r3, #32595	; 0x7f53
   14830:	mov	r2, #636	; 0x27c
   14834:	movt	r0, #4
   14838:	movt	r1, #4
   1483c:	movt	r3, #4
   14840:	bl	12ab0 <__assert_fail@plt>
   14844:	nop	{0}
   14848:	stmda	r6!, {r0, r2, r4, r7, r9, sl, ip, lr, pc}
   1484c:	cdpcc	14, 1, cr2, cr1, cr11, {0}
   14850:	push	{fp, lr}
   14854:	mov	fp, sp
   14858:	ldr	r0, [r1, #28]
   1485c:	bl	12a8c <getgrgid@plt>
   14860:	clz	r0, r0
   14864:	lsr	r0, r0, #5
   14868:	pop	{fp, pc}
   1486c:	push	{fp, lr}
   14870:	mov	fp, sp
   14874:	ldr	r0, [r1, #24]
   14878:	bl	12414 <getpwuid@plt>
   1487c:	clz	r0, r0
   14880:	lsr	r0, r0, #5
   14884:	pop	{fp, pc}
   14888:	push	{r4, r5, r6, sl, fp, lr}
   1488c:	add	fp, sp, #16
   14890:	mov	r6, r0
   14894:	ldr	r0, [r2, #132]	; 0x84
   14898:	mov	r5, r1
   1489c:	mov	r4, r2
   148a0:	mov	r1, r6
   148a4:	ldr	r0, [r0]
   148a8:	bl	148d0 <__assert_fail@plt+0x1e20>
   148ac:	cmp	r0, #0
   148b0:	beq	148c8 <__assert_fail@plt+0x1e18>
   148b4:	mov	r0, r6
   148b8:	mov	r1, r5
   148bc:	mov	r2, r4
   148c0:	pop	{r4, r5, r6, sl, fp, lr}
   148c4:	b	156ac <__assert_fail@plt+0x2bfc>
   148c8:	mov	r0, #0
   148cc:	pop	{r4, r5, r6, sl, fp, pc}
   148d0:	push	{r4, r5, r6, r7, fp, lr}
   148d4:	add	fp, sp, #16
   148d8:	mov	r5, r0
   148dc:	movw	r0, #58716	; 0xe55c
   148e0:	mov	r4, r1
   148e4:	movt	r0, #5
   148e8:	ldr	r0, [r0]
   148ec:	bl	30118 <__assert_fail@plt+0x1d668>
   148f0:	movw	r7, #58704	; 0xe550
   148f4:	movw	r1, #33420	; 0x828c
   148f8:	mov	r0, #0
   148fc:	mov	r2, #5
   14900:	movt	r7, #5
   14904:	movt	r1, #4
   14908:	ldr	r6, [r7]
   1490c:	bl	12564 <dcgettext@plt>
   14910:	mov	r1, r0
   14914:	mov	r0, r6
   14918:	mov	r2, r5
   1491c:	mov	r3, r4
   14920:	bl	127f8 <fprintf@plt>
   14924:	cmn	r0, #1
   14928:	ble	1493c <__assert_fail@plt+0x1e8c>
   1492c:	ldr	r0, [r7]
   14930:	bl	30118 <__assert_fail@plt+0x1d668>
   14934:	pop	{r4, r5, r6, r7, fp, lr}
   14938:	b	2fb0c <__assert_fail@plt+0x1d05c>
   1493c:	bl	12804 <__errno_location@plt>
   14940:	movw	r1, #33437	; 0x829d
   14944:	ldr	r4, [r0]
   14948:	mov	r0, #0
   1494c:	mov	r2, #5
   14950:	movt	r1, #4
   14954:	bl	12564 <dcgettext@plt>
   14958:	mov	r2, r0
   1495c:	mov	r0, #1
   14960:	mov	r1, r4
   14964:	bl	1269c <error@plt>
   14968:	push	{r4, r5, fp, lr}
   1496c:	add	fp, sp, #8
   14970:	mov	r5, r1
   14974:	mov	r1, r0
   14978:	ldr	r0, [r2, #132]	; 0x84
   1497c:	mov	r4, r2
   14980:	ldr	r0, [r0]
   14984:	bl	148d0 <__assert_fail@plt+0x1e20>
   14988:	cmp	r0, #0
   1498c:	beq	149ac <__assert_fail@plt+0x1efc>
   14990:	movw	r0, #61000	; 0xee48
   14994:	mov	r1, r5
   14998:	mov	r2, r4
   1499c:	movt	r0, #5
   149a0:	ldr	r0, [r0, #12]
   149a4:	pop	{r4, r5, fp, lr}
   149a8:	b	156ac <__assert_fail@plt+0x2bfc>
   149ac:	mov	r0, #0
   149b0:	pop	{r4, r5, fp, pc}
   149b4:	mov	r0, #1
   149b8:	bx	lr
   149bc:	push	{r4, r5, r6, sl, fp, lr}
   149c0:	add	fp, sp, #16
   149c4:	mov	r5, r2
   149c8:	ldr	r2, [r2, #156]	; 0x9c
   149cc:	mov	r4, r1
   149d0:	mov	r6, r0
   149d4:	cmp	r2, #0
   149d8:	beq	149f8 <__assert_fail@plt+0x1f48>
   149dc:	mov	r0, r6
   149e0:	mov	r1, r4
   149e4:	bl	1980c <__assert_fail@plt+0x6d5c>
   149e8:	cmp	r0, #0
   149ec:	beq	149f8 <__assert_fail@plt+0x1f48>
   149f0:	mov	r0, #1
   149f4:	pop	{r4, r5, r6, sl, fp, pc}
   149f8:	ldr	r2, [r5, #160]	; 0xa0
   149fc:	mov	r0, r6
   14a00:	mov	r1, r4
   14a04:	pop	{r4, r5, r6, sl, fp, lr}
   14a08:	b	1980c <__assert_fail@plt+0x6d5c>
   14a0c:	push	{fp, lr}
   14a10:	mov	fp, sp
   14a14:	mov	r1, r0
   14a18:	ldr	r0, [r2, #40]	; 0x28
   14a1c:	mov	r2, #0
   14a20:	bl	126c0 <fnmatch@plt>
   14a24:	clz	r0, r0
   14a28:	lsr	r0, r0, #5
   14a2c:	pop	{fp, pc}
   14a30:	push	{fp, lr}
   14a34:	mov	fp, sp
   14a38:	ldr	r0, [r1, #16]
   14a3c:	ldr	r3, [r2, #40]!	; 0x28
   14a40:	and	r1, r0, #61440	; 0xf000
   14a44:	cmp	r3, #2
   14a48:	sub	r1, r1, #16384	; 0x4000
   14a4c:	clz	r1, r1
   14a50:	lsr	r1, r1, #5
   14a54:	add	r1, r2, r1, lsl #2
   14a58:	ldr	r1, [r1, #4]
   14a5c:	beq	14a8c <__assert_fail@plt+0x1fdc>
   14a60:	cmp	r3, #1
   14a64:	beq	14a78 <__assert_fail@plt+0x1fc8>
   14a68:	cmp	r3, #0
   14a6c:	bne	14aa8 <__assert_fail@plt+0x1ff8>
   14a70:	and	r0, r1, r0
   14a74:	b	14a90 <__assert_fail@plt+0x1fe0>
   14a78:	cmp	r1, #0
   14a7c:	beq	14aa0 <__assert_fail@plt+0x1ff0>
   14a80:	ands	r0, r1, r0
   14a84:	movwne	r0, #1
   14a88:	pop	{fp, pc}
   14a8c:	bfc	r0, #12, #20
   14a90:	sub	r0, r0, r1
   14a94:	clz	r0, r0
   14a98:	lsr	r0, r0, #5
   14a9c:	pop	{fp, pc}
   14aa0:	mov	r0, #1
   14aa4:	pop	{fp, pc}
   14aa8:	bl	12a5c <abort@plt>
   14aac:	push	{fp, lr}
   14ab0:	mov	fp, sp
   14ab4:	movw	r0, #61000	; 0xee48
   14ab8:	mov	r2, #1
   14abc:	mov	r3, #0
   14ac0:	movt	r0, #5
   14ac4:	ldr	r1, [r0, #12]
   14ac8:	ldr	r0, [r0, #16]
   14acc:	bl	12498 <faccessat@plt>
   14ad0:	clz	r0, r0
   14ad4:	lsr	r0, r0, #5
   14ad8:	pop	{fp, pc}
   14adc:	push	{fp, lr}
   14ae0:	mov	fp, sp
   14ae4:	movw	r0, #61000	; 0xee48
   14ae8:	mov	r2, #4
   14aec:	mov	r3, #0
   14af0:	movt	r0, #5
   14af4:	ldr	r1, [r0, #12]
   14af8:	ldr	r0, [r0, #16]
   14afc:	bl	12498 <faccessat@plt>
   14b00:	clz	r0, r0
   14b04:	lsr	r0, r0, #5
   14b08:	pop	{fp, pc}
   14b0c:	push	{fp, lr}
   14b10:	mov	fp, sp
   14b14:	movw	r0, #61000	; 0xee48
   14b18:	mov	r2, #2
   14b1c:	mov	r3, #0
   14b20:	movt	r0, #5
   14b24:	ldr	r1, [r0, #12]
   14b28:	ldr	r0, [r0, #16]
   14b2c:	bl	12498 <faccessat@plt>
   14b30:	clz	r0, r0
   14b34:	lsr	r0, r0, #5
   14b38:	pop	{fp, pc}
   14b3c:	push	{fp, lr}
   14b40:	mov	fp, sp
   14b44:	sub	sp, sp, #8
   14b48:	ldrb	ip, [r2, #52]	; 0x34
   14b4c:	ldr	r1, [r2, #56]	; 0x38
   14b50:	ldr	r2, [r2, #44]	; 0x2c
   14b54:	movw	r3, #53924	; 0xd2a4
   14b58:	str	r0, [sp]
   14b5c:	movt	r3, #4
   14b60:	mov	r0, r2
   14b64:	mov	r2, ip
   14b68:	bl	21b2c <__assert_fail@plt+0xf07c>
   14b6c:	mov	r0, #1
   14b70:	mov	sp, fp
   14b74:	pop	{fp, pc}
   14b78:	push	{r4, sl, fp, lr}
   14b7c:	add	fp, sp, #8
   14b80:	ldr	r4, [r2, #44]	; 0x2c
   14b84:	mov	r1, r4
   14b88:	bl	12a44 <fputs@plt>
   14b8c:	mov	r0, #0
   14b90:	mov	r1, r4
   14b94:	bl	1299c <putc@plt>
   14b98:	mov	r0, #1
   14b9c:	pop	{r4, sl, fp, pc}
   14ba0:	push	{fp, lr}
   14ba4:	mov	fp, sp
   14ba8:	movw	r0, #61044	; 0xee74
   14bac:	movt	r0, #5
   14bb0:	ldrb	r0, [r0]
   14bb4:	cmp	r0, #0
   14bb8:	beq	14bec <__assert_fail@plt+0x213c>
   14bbc:	movw	r0, #61000	; 0xee48
   14bc0:	movt	r0, #5
   14bc4:	ldrb	r2, [r0, #4]
   14bc8:	cmp	r2, #0
   14bcc:	beq	14bf4 <__assert_fail@plt+0x2144>
   14bd0:	cmp	r1, #0
   14bd4:	beq	14bec <__assert_fail@plt+0x213c>
   14bd8:	ldr	r1, [r1, #16]
   14bdc:	and	r1, r1, #61440	; 0xf000
   14be0:	cmp	r1, #16384	; 0x4000
   14be4:	moveq	r1, #1
   14be8:	strbeq	r1, [r0, #24]
   14bec:	mov	r0, #1
   14bf0:	pop	{fp, pc}
   14bf4:	movw	r0, #31727	; 0x7bef
   14bf8:	movw	r1, #32371	; 0x7e73
   14bfc:	movw	r3, #32762	; 0x7ffa
   14c00:	movw	r2, #853	; 0x355
   14c04:	movt	r0, #4
   14c08:	movt	r1, #4
   14c0c:	movt	r3, #4
   14c10:	bl	12ab0 <__assert_fail@plt>
   14c14:	push	{fp, lr}
   14c18:	mov	fp, sp
   14c1c:	bl	18970 <__assert_fail@plt+0x5ec0>
   14c20:	movw	r0, #61000	; 0xee48
   14c24:	movt	r0, #5
   14c28:	ldr	r0, [r0, #28]
   14c2c:	bl	12780 <exit@plt>
   14c30:	push	{r4, r5, r6, sl, fp, lr}
   14c34:	add	fp, sp, #16
   14c38:	sub	sp, sp, #8
   14c3c:	mov	r4, r2
   14c40:	mov	r5, r0
   14c44:	bl	127bc <strlen@plt>
   14c48:	mov	r6, r0
   14c4c:	ldr	r0, [r4, #40]	; 0x28
   14c50:	mov	r1, #0
   14c54:	mov	r3, #0
   14c58:	str	r1, [sp]
   14c5c:	mov	r1, r5
   14c60:	mov	r2, r6
   14c64:	bl	38154 <__assert_fail@plt+0x256a4>
   14c68:	sub	r0, r0, r6
   14c6c:	clz	r0, r0
   14c70:	lsr	r0, r0, #5
   14c74:	sub	sp, fp, #16
   14c78:	pop	{r4, r5, r6, sl, fp, pc}
   14c7c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   14c80:	add	fp, sp, #28
   14c84:	sub	sp, sp, #4
   14c88:	ldrd	r6, [r2, #40]	; 0x28
   14c8c:	ldrd	r8, [r1, #48]	; 0x30
   14c90:	mov	sl, r2
   14c94:	asr	r5, r7, #31
   14c98:	mov	r0, r8
   14c9c:	mov	r1, r9
   14ca0:	mov	r2, r7
   14ca4:	mov	r3, r5
   14ca8:	bl	47544 <__assert_fail@plt+0x34a94>
   14cac:	umull	r4, r2, r0, r7
   14cb0:	mla	r2, r0, r5, r2
   14cb4:	mla	r7, r1, r7, r2
   14cb8:	adds	r2, r0, #1
   14cbc:	adc	r3, r1, #0
   14cc0:	subs	r5, r8, r4
   14cc4:	sbc	r7, r9, r7
   14cc8:	orrs	r7, r5, r7
   14ccc:	moveq	r3, r1
   14cd0:	moveq	r2, r0
   14cd4:	cmp	r6, #2
   14cd8:	beq	14d08 <__assert_fail@plt+0x2258>
   14cdc:	cmp	r6, #1
   14ce0:	beq	14d2c <__assert_fail@plt+0x227c>
   14ce4:	cmp	r6, #0
   14ce8:	bne	14d20 <__assert_fail@plt+0x2270>
   14cec:	ldrd	r4, [sl, #48]	; 0x30
   14cf0:	mov	r0, #1
   14cf4:	subs	r1, r4, r2
   14cf8:	sbcs	r1, r5, r3
   14cfc:	bcs	14d20 <__assert_fail@plt+0x2270>
   14d00:	sub	sp, fp, #28
   14d04:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14d08:	ldrd	r0, [sl, #48]	; 0x30
   14d0c:	eor	r1, r3, r1
   14d10:	eor	r0, r2, r0
   14d14:	orrs	r0, r0, r1
   14d18:	mov	r0, #1
   14d1c:	beq	14d00 <__assert_fail@plt+0x2250>
   14d20:	mov	r0, #0
   14d24:	sub	sp, fp, #28
   14d28:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14d2c:	ldrd	r4, [sl, #48]	; 0x30
   14d30:	mov	r0, #1
   14d34:	subs	r1, r2, r4
   14d38:	sbcs	r1, r3, r5
   14d3c:	movcs	r0, #0
   14d40:	sub	sp, fp, #28
   14d44:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14d48:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   14d4c:	add	fp, sp, #24
   14d50:	mov	r6, r1
   14d54:	mov	r5, r2
   14d58:	mov	r2, r0
   14d5c:	mov	r4, r1
   14d60:	ldr	r0, [r6, #96]!	; 0x60
   14d64:	add	r7, r5, #40	; 0x28
   14d68:	ldr	r1, [r6, #4]
   14d6c:	orrs	r3, r0, r1
   14d70:	beq	14d8c <__assert_fail@plt+0x22dc>
   14d74:	ldrd	r8, [r7]
   14d78:	eor	r1, r1, r9
   14d7c:	eor	r0, r0, r8
   14d80:	orrs	r0, r0, r1
   14d84:	mov	r0, #0
   14d88:	bne	14dec <__assert_fail@plt+0x233c>
   14d8c:	movw	r0, #61000	; 0xee48
   14d90:	movt	r0, #5
   14d94:	ldr	r1, [r0, #12]
   14d98:	mov	r0, r2
   14d9c:	mov	r2, r4
   14da0:	bl	18500 <__assert_fail@plt+0x5a50>
   14da4:	mov	r1, r0
   14da8:	mov	r0, #0
   14dac:	cmp	r1, #0
   14db0:	bne	14dec <__assert_fail@plt+0x233c>
   14db4:	ldrd	r2, [r7]
   14db8:	ldrd	r6, [r6]
   14dbc:	eor	r1, r7, r3
   14dc0:	eor	r2, r6, r2
   14dc4:	orrs	r1, r2, r1
   14dc8:	bne	14dec <__assert_fail@plt+0x233c>
   14dcc:	add	r0, r5, #48	; 0x30
   14dd0:	ldrd	r2, [r4]
   14dd4:	ldrd	r0, [r0]
   14dd8:	eor	r1, r3, r1
   14ddc:	eor	r0, r2, r0
   14de0:	orr	r0, r0, r1
   14de4:	clz	r0, r0
   14de8:	lsr	r0, r0, #5
   14dec:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   14df0:	mov	r0, #1
   14df4:	bx	lr
   14df8:	push	{fp, lr}
   14dfc:	mov	fp, sp
   14e00:	movw	ip, #61000	; 0xee48
   14e04:	movt	ip, #5
   14e08:	ldrb	r0, [ip, #5]
   14e0c:	cmp	r0, #0
   14e10:	beq	14e84 <__assert_fail@plt+0x23d4>
   14e14:	ldr	r3, [ip, #8]
   14e18:	mov	r0, #0
   14e1c:	cmp	r3, #0
   14e20:	popeq	{fp, pc}
   14e24:	ldrb	r0, [ip, #4]
   14e28:	cmp	r0, #0
   14e2c:	ldrne	r3, [r1, #16]
   14e30:	and	r0, r3, #61440	; 0xf000
   14e34:	sub	r0, r0, #4096	; 0x1000
   14e38:	lsr	r1, r0, #14
   14e3c:	cmp	r1, #2
   14e40:	bhi	14e5c <__assert_fail@plt+0x23ac>
   14e44:	lsr	r1, r0, #12
   14e48:	movw	ip, #2731	; 0xaab
   14e4c:	mov	r0, #1
   14e50:	uxth	r3, r1
   14e54:	tst	r0, ip, lsr r3
   14e58:	bne	14e64 <__assert_fail@plt+0x23b4>
   14e5c:	mov	r0, #0
   14e60:	pop	{fp, pc}
   14e64:	movw	r3, #33476	; 0x82c4
   14e68:	movt	r3, #4
   14e6c:	ldr	r1, [r3, r1, lsl #2]
   14e70:	add	r1, r2, r1
   14e74:	ldrb	r1, [r1, #40]	; 0x28
   14e78:	cmp	r1, #0
   14e7c:	moveq	r0, #0
   14e80:	pop	{fp, pc}
   14e84:	movw	r0, #32828	; 0x803c
   14e88:	movw	r1, #32371	; 0x7e73
   14e8c:	movw	r3, #32844	; 0x804c
   14e90:	movw	r2, #977	; 0x3d1
   14e94:	movt	r0, #4
   14e98:	movt	r1, #4
   14e9c:	movt	r3, #4
   14ea0:	bl	12ab0 <__assert_fail@plt>
   14ea4:	ldr	r0, [r2, #40]	; 0x28
   14ea8:	cmp	r0, #2
   14eac:	beq	14edc <__assert_fail@plt+0x242c>
   14eb0:	cmp	r0, #1
   14eb4:	beq	14efc <__assert_fail@plt+0x244c>
   14eb8:	cmp	r0, #0
   14ebc:	bne	14ef4 <__assert_fail@plt+0x2444>
   14ec0:	ldr	r1, [r1, #24]
   14ec4:	ldrd	r2, [r2, #48]	; 0x30
   14ec8:	mov	r0, #1
   14ecc:	subs	r1, r2, r1
   14ed0:	sbcs	r1, r3, #0
   14ed4:	bcs	14ef4 <__assert_fail@plt+0x2444>
   14ed8:	bx	lr
   14edc:	ldr	r0, [r1, #24]
   14ee0:	ldrd	r2, [r2, #48]	; 0x30
   14ee4:	eor	r0, r2, r0
   14ee8:	orrs	r0, r0, r3
   14eec:	mov	r0, #1
   14ef0:	bxeq	lr
   14ef4:	mov	r0, #0
   14ef8:	bx	lr
   14efc:	ldrd	r2, [r2, #48]	; 0x30
   14f00:	ldr	r1, [r1, #24]
   14f04:	mov	r0, #1
   14f08:	subs	r1, r1, r2
   14f0c:	rscs	r1, r3, #0
   14f10:	movcs	r0, #0
   14f14:	bx	lr
   14f18:	push	{r4, r6, r7, r8, r9, sl, fp, lr}
   14f1c:	add	fp, sp, #24
   14f20:	ldrd	r6, [r1, #72]	; 0x48
   14f24:	ldrd	r8, [r1, #88]	; 0x58
   14f28:	mov	r4, r2
   14f2c:	cmp	r8, r6
   14f30:	cmpeq	r7, r9
   14f34:	beq	14f6c <__assert_fail@plt+0x24bc>
   14f38:	mov	r0, r6
   14f3c:	mov	r1, r8
   14f40:	bl	12888 <difftime@plt>
   14f44:	sub	r0, r7, r9
   14f48:	vldr	d16, [pc, #72]	; 14f98 <__assert_fail@plt+0x24e8>
   14f4c:	vmov	s2, r0
   14f50:	vcvt.f64.s32	d17, s2
   14f54:	vmla.f64	d0, d17, d16
   14f58:	vcmpe.f64	d0, #0.0
   14f5c:	vmrs	APSR_nzcv, fpscr
   14f60:	bpl	14f6c <__assert_fail@plt+0x24bc>
   14f64:	mov	r0, #0
   14f68:	pop	{r4, r6, r7, r8, r9, sl, fp, pc}
   14f6c:	movw	r2, #51712	; 0xca00
   14f70:	movw	r3, #20864	; 0x5180
   14f74:	subs	r1, r9, r7
   14f78:	sub	r0, r8, r6
   14f7c:	movt	r2, #15258	; 0x3b9a
   14f80:	add	r0, r0, r1, asr #31
   14f84:	movt	r3, #1
   14f88:	addmi	r1, r1, r2
   14f8c:	mov	r2, r4
   14f90:	pop	{r4, r6, r7, r8, r9, sl, fp, lr}
   14f94:	b	13b88 <__assert_fail@plt+0x10d8>
   14f98:	stmda	r6!, {r0, r2, r4, r7, r9, sl, ip, lr, pc}
   14f9c:	cdpcc	14, 1, cr2, cr1, cr11, {0}
   14fa0:	ldr	r0, [r1, #24]
   14fa4:	ldr	r1, [r2, #40]	; 0x28
   14fa8:	sub	r0, r1, r0
   14fac:	clz	r0, r0
   14fb0:	lsr	r0, r0, #5
   14fb4:	bx	lr
   14fb8:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   14fbc:	add	fp, sp, #24
   14fc0:	sub	sp, sp, #104	; 0x68
   14fc4:	mov	r8, r2
   14fc8:	mov	r9, r1
   14fcc:	mov	r7, r0
   14fd0:	bl	18f5c <__assert_fail@plt+0x64ac>
   14fd4:	mov	r4, sp
   14fd8:	mov	r6, r0
   14fdc:	mov	r0, r4
   14fe0:	bl	184fc <__assert_fail@plt+0x5a4c>
   14fe4:	movw	r0, #36324	; 0x8de4
   14fe8:	movw	r5, #61000	; 0xee48
   14fec:	movw	r2, #36080	; 0x8cf0
   14ff0:	cmp	r6, #0
   14ff4:	mov	r1, r4
   14ff8:	movt	r0, #1
   14ffc:	movt	r5, #5
   15000:	movt	r2, #1
   15004:	movne	r2, r0
   15008:	ldr	r0, [r5, #12]
   1500c:	blx	r2
   15010:	cmp	r0, #0
   15014:	beq	150a0 <__assert_fail@plt+0x25f0>
   15018:	bl	18f5c <__assert_fail@plt+0x64ac>
   1501c:	mov	r4, r0
   15020:	bl	12804 <__errno_location@plt>
   15024:	cmp	r4, #0
   15028:	beq	15068 <__assert_fail@plt+0x25b8>
   1502c:	ldr	r1, [r0]
   15030:	cmp	r1, #2
   15034:	bne	15068 <__assert_fail@plt+0x25b8>
   15038:	ldrb	r0, [r5, #5]
   1503c:	cmp	r0, #0
   15040:	beq	15128 <__assert_fail@plt+0x2678>
   15044:	ldr	r0, [r5, #8]
   15048:	mov	r6, #0
   1504c:	cmp	r0, #0
   15050:	beq	1511c <__assert_fail@plt+0x266c>
   15054:	ldrb	r1, [r5, #4]
   15058:	cmp	r1, #0
   1505c:	ldrne	r0, [r9, #16]
   15060:	and	r0, r0, #61440	; 0xf000
   15064:	b	150d0 <__assert_fail@plt+0x2620>
   15068:	ldr	r4, [r0]
   1506c:	mov	r0, #0
   15070:	mov	r1, r7
   15074:	mov	r6, #0
   15078:	bl	19960 <__assert_fail@plt+0x6eb0>
   1507c:	movw	r2, #56015	; 0xdacf
   15080:	mov	r3, r0
   15084:	mov	r0, #0
   15088:	mov	r1, r4
   1508c:	movt	r2, #4
   15090:	bl	1269c <error@plt>
   15094:	mov	r0, #1
   15098:	str	r0, [r5, #28]
   1509c:	b	1511c <__assert_fail@plt+0x266c>
   150a0:	ldrb	r0, [r5, #5]
   150a4:	cmp	r0, #0
   150a8:	beq	15128 <__assert_fail@plt+0x2678>
   150ac:	ldr	r0, [r5, #8]
   150b0:	mov	r6, #0
   150b4:	cmp	r0, #0
   150b8:	beq	1511c <__assert_fail@plt+0x266c>
   150bc:	ldrb	r1, [r5, #4]
   150c0:	ldr	r2, [sp, #16]
   150c4:	cmp	r1, #0
   150c8:	moveq	r2, r0
   150cc:	and	r0, r2, #61440	; 0xf000
   150d0:	sub	r0, r0, #4096	; 0x1000
   150d4:	lsr	r1, r0, #14
   150d8:	cmp	r1, #2
   150dc:	bhi	150f8 <__assert_fail@plt+0x2648>
   150e0:	lsr	r0, r0, #12
   150e4:	movw	r2, #2731	; 0xaab
   150e8:	mov	r6, #1
   150ec:	uxth	r1, r0
   150f0:	tst	r6, r2, lsr r1
   150f4:	bne	15100 <__assert_fail@plt+0x2650>
   150f8:	mov	r6, #0
   150fc:	b	1511c <__assert_fail@plt+0x266c>
   15100:	movw	r1, #33476	; 0x82c4
   15104:	movt	r1, #4
   15108:	ldr	r0, [r1, r0, lsl #2]
   1510c:	add	r0, r8, r0
   15110:	ldrb	r0, [r0, #40]	; 0x28
   15114:	cmp	r0, #0
   15118:	moveq	r6, #0
   1511c:	mov	r0, r6
   15120:	sub	sp, fp, #24
   15124:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   15128:	movw	r0, #32828	; 0x803c
   1512c:	movw	r1, #32371	; 0x7e73
   15130:	movw	r3, #32844	; 0x804c
   15134:	movw	r2, #977	; 0x3d1
   15138:	movt	r0, #4
   1513c:	movt	r1, #4
   15140:	movt	r3, #4
   15144:	bl	12ab0 <__assert_fail@plt>
   15148:	push	{r4, r5, r6, r7, fp, lr}
   1514c:	add	fp, sp, #16
   15150:	sub	sp, sp, #8
   15154:	mov	r4, r0
   15158:	movw	r0, #61044	; 0xee74
   1515c:	mov	r5, r2
   15160:	add	r2, sp, #4
   15164:	movt	r0, #5
   15168:	ldr	r3, [r0, #64]	; 0x40
   1516c:	movw	r0, #61000	; 0xee48
   15170:	movt	r0, #5
   15174:	ldr	r1, [r0, #12]
   15178:	ldr	r0, [r0, #16]
   1517c:	blx	r3
   15180:	cmn	r0, #1
   15184:	ble	151b0 <__assert_fail@plt+0x2700>
   15188:	ldr	r0, [r5, #40]	; 0x28
   1518c:	ldr	r1, [sp, #4]
   15190:	mov	r2, #0
   15194:	bl	126c0 <fnmatch@plt>
   15198:	mov	r4, r0
   1519c:	ldr	r0, [sp, #4]
   151a0:	bl	129d8 <freecon@plt>
   151a4:	clz	r0, r4
   151a8:	lsr	r5, r0, #5
   151ac:	b	151f4 <__assert_fail@plt+0x2744>
   151b0:	bl	12804 <__errno_location@plt>
   151b4:	movw	r1, #32909	; 0x808d
   151b8:	ldr	r6, [r0]
   151bc:	mov	r0, #0
   151c0:	mov	r2, #5
   151c4:	mov	r5, #0
   151c8:	movt	r1, #4
   151cc:	bl	12564 <dcgettext@plt>
   151d0:	mov	r7, r0
   151d4:	mov	r0, #0
   151d8:	mov	r1, r4
   151dc:	bl	19960 <__assert_fail@plt+0x6eb0>
   151e0:	mov	r3, r0
   151e4:	mov	r0, #0
   151e8:	mov	r1, r6
   151ec:	mov	r2, r7
   151f0:	bl	1269c <error@plt>
   151f4:	mov	r0, r5
   151f8:	sub	sp, fp, #16
   151fc:	pop	{r4, r5, r6, r7, fp, pc}
   15200:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   15204:	add	fp, sp, #24
   15208:	sub	sp, sp, #264	; 0x108
   1520c:	mov	r4, r0
   15210:	cmp	r1, #0
   15214:	beq	152a4 <__assert_fail@plt+0x27f4>
   15218:	movw	r8, #32931	; 0x80a3
   1521c:	add	r6, sp, #4
   15220:	mov	r5, r1
   15224:	mov	r9, #0
   15228:	movt	r8, #4
   1522c:	sub	r7, r6, #1
   15230:	b	15258 <__assert_fail@plt+0x27a8>
   15234:	mov	r1, r0
   15238:	mov	r2, r6
   1523c:	strb	r9, [r6, r1]
   15240:	mov	r0, r4
   15244:	mov	r1, r8
   15248:	bl	127f8 <fprintf@plt>
   1524c:	ldr	r5, [r5, #152]	; 0x98
   15250:	cmp	r5, #0
   15254:	beq	152a4 <__assert_fail@plt+0x27f4>
   15258:	ldr	r1, [r5, #4]
   1525c:	mov	r2, #0
   15260:	cmp	r1, #0
   15264:	beq	15240 <__assert_fail@plt+0x2790>
   15268:	mov	r0, r6
   1526c:	bl	12660 <strcpy@plt>
   15270:	bl	127bc <strlen@plt>
   15274:	subs	r1, r0, #1
   15278:	bmi	15234 <__assert_fail@plt+0x2784>
   1527c:	ldrb	r1, [r7, r0]
   15280:	cmp	r1, #32
   15284:	cmpne	r1, #9
   15288:	bne	15234 <__assert_fail@plt+0x2784>
   1528c:	sub	r1, r0, #1
   15290:	sub	r0, r0, #2
   15294:	cmn	r0, #1
   15298:	mov	r0, r1
   1529c:	bgt	1527c <__assert_fail@plt+0x27cc>
   152a0:	b	15238 <__assert_fail@plt+0x2788>
   152a4:	mov	r0, #10
   152a8:	mov	r1, r4
   152ac:	bl	12948 <fputc@plt>
   152b0:	sub	sp, fp, #24
   152b4:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   152b8:	cmp	r1, #0
   152bc:	bxeq	lr
   152c0:	push	{r4, r5, fp, lr}
   152c4:	add	fp, sp, #8
   152c8:	sub	sp, sp, #8
   152cc:	mov	r5, r1
   152d0:	ldr	r1, [r1, #156]	; 0x9c
   152d4:	mov	r4, r0
   152d8:	bl	153ec <__assert_fail@plt+0x293c>
   152dc:	ldrb	r2, [r5, #20]
   152e0:	ldrb	r0, [r5, #18]
   152e4:	movw	ip, #38711	; 0x9737
   152e8:	ldrb	r1, [r5, #19]
   152ec:	movw	r3, #32970	; 0x80ca
   152f0:	movt	ip, #4
   152f4:	movt	r3, #4
   152f8:	cmp	r2, #0
   152fc:	movw	r2, #32944	; 0x80b0
   15300:	moveq	r3, ip
   15304:	cmp	r0, #0
   15308:	movt	r2, #4
   1530c:	mov	r0, r4
   15310:	moveq	r2, ip
   15314:	cmp	r1, #0
   15318:	movw	r1, #32937	; 0x80a9
   1531c:	str	r3, [sp]
   15320:	movw	r3, #32957	; 0x80bd
   15324:	movt	r1, #4
   15328:	movt	r3, #4
   1532c:	moveq	r3, ip
   15330:	bl	127f8 <fprintf@plt>
   15334:	mov	r0, r4
   15338:	mov	r1, r5
   1533c:	bl	15ebc <__assert_fail@plt+0x340c>
   15340:	vldr	s0, [r5, #28]
   15344:	movw	r1, #32983	; 0x80d7
   15348:	mov	r0, r4
   1534c:	movt	r1, #4
   15350:	vcvt.f64.f32	d16, s0
   15354:	vmov	r2, r3, d16
   15358:	bl	127f8 <fprintf@plt>
   1535c:	movw	r0, #61044	; 0xee74
   15360:	movt	r0, #5
   15364:	ldrb	r0, [r0, #44]	; 0x2c
   15368:	tst	r0, #64	; 0x40
   1536c:	beq	153d8 <__assert_fail@plt+0x2928>
   15370:	ldr	r3, [r5, #164]	; 0xa4
   15374:	ldr	r2, [r5, #168]	; 0xa8
   15378:	movw	r1, #33009	; 0x80f1
   1537c:	mov	r0, r4
   15380:	movt	r1, #4
   15384:	bl	127f8 <fprintf@plt>
   15388:	ldr	r0, [r5, #164]	; 0xa4
   1538c:	cmp	r0, #0
   15390:	beq	153c0 <__assert_fail@plt+0x2910>
   15394:	vmov	s2, r0
   15398:	vldr	s0, [r5, #168]	; 0xa8
   1539c:	movw	r1, #33036	; 0x810c
   153a0:	mov	r0, r4
   153a4:	movt	r1, #4
   153a8:	vcvt.f64.u32	d16, s2
   153ac:	vcvt.f64.u32	d17, s0
   153b0:	vdiv.f64	d16, d17, d16
   153b4:	vmov	r2, r3, d16
   153b8:	bl	127f8 <fprintf@plt>
   153bc:	b	153d8 <__assert_fail@plt+0x2928>
   153c0:	movw	r0, #33044	; 0x8114
   153c4:	mov	r1, #4
   153c8:	mov	r2, #1
   153cc:	mov	r3, r4
   153d0:	movt	r0, #4
   153d4:	bl	12618 <fwrite@plt>
   153d8:	ldr	r1, [r5, #160]	; 0xa0
   153dc:	mov	r0, r4
   153e0:	sub	sp, fp, #8
   153e4:	pop	{r4, r5, fp, lr}
   153e8:	b	153ec <__assert_fail@plt+0x293c>
   153ec:	push	{r4, r5, fp, lr}
   153f0:	add	fp, sp, #8
   153f4:	cmp	r1, #0
   153f8:	popeq	{r4, r5, fp, pc}
   153fc:	mov	r5, r1
   15400:	movw	r1, #15568	; 0x3cd0
   15404:	mov	r4, r0
   15408:	movw	r0, #18876	; 0x49bc
   1540c:	movt	r0, #1
   15410:	movt	r1, #1
   15414:	ldr	r3, [r5]
   15418:	ldr	r2, [r5, #156]	; 0x9c
   1541c:	cmp	r3, r0
   15420:	cmpne	r3, r1
   15424:	bne	15440 <__assert_fail@plt+0x2990>
   15428:	cmp	r2, #0
   1542c:	bne	15454 <__assert_fail@plt+0x29a4>
   15430:	ldr	r5, [r5, #160]	; 0xa0
   15434:	cmp	r5, #0
   15438:	bne	15414 <__assert_fail@plt+0x2964>
   1543c:	pop	{r4, r5, fp, pc}
   15440:	cmp	r2, #0
   15444:	bne	15454 <__assert_fail@plt+0x29a4>
   15448:	ldr	r0, [r5, #160]	; 0xa0
   1544c:	cmp	r0, #0
   15450:	beq	15494 <__assert_fail@plt+0x29e4>
   15454:	movw	r0, #33468	; 0x82bc
   15458:	mov	r1, #3
   1545c:	mov	r2, #1
   15460:	mov	r3, r4
   15464:	movt	r0, #4
   15468:	bl	12618 <fwrite@plt>
   1546c:	mov	r0, r4
   15470:	mov	r1, r5
   15474:	bl	152b8 <__assert_fail@plt+0x2808>
   15478:	movw	r0, #33472	; 0x82c0
   1547c:	mov	r1, #3
   15480:	mov	r2, #1
   15484:	mov	r3, r4
   15488:	movt	r0, #4
   1548c:	pop	{r4, r5, fp, lr}
   15490:	b	12618 <fwrite@plt>
   15494:	mov	r0, r4
   15498:	mov	r1, r5
   1549c:	pop	{r4, r5, fp, lr}
   154a0:	b	152b8 <__assert_fail@plt+0x2808>
   154a4:	push	{r4, r5, fp, lr}
   154a8:	add	fp, sp, #8
   154ac:	mov	r4, r0
   154b0:	movw	r0, #61044	; 0xee74
   154b4:	movt	r0, #5
   154b8:	ldrb	r0, [r0, #44]	; 0x2c
   154bc:	tst	r0, #64	; 0x40
   154c0:	popeq	{r4, r5, fp, pc}
   154c4:	movw	r5, #58704	; 0xe550
   154c8:	movw	r0, #33049	; 0x8119
   154cc:	mov	r1, #42	; 0x2a
   154d0:	mov	r2, #1
   154d4:	movt	r5, #5
   154d8:	movt	r0, #4
   154dc:	ldr	r3, [r5]
   154e0:	bl	12618 <fwrite@plt>
   154e4:	ldr	r0, [r5]
   154e8:	mov	r1, r4
   154ec:	bl	152b8 <__assert_fail@plt+0x2808>
   154f0:	ldr	r1, [r5]
   154f4:	mov	r0, #10
   154f8:	pop	{r4, r5, fp, lr}
   154fc:	b	12948 <fputc@plt>
   15500:	push	{fp, lr}
   15504:	mov	fp, sp
   15508:	cmp	r0, #0
   1550c:	popeq	{fp, pc}
   15510:	movw	lr, #19360	; 0x4ba0
   15514:	movw	ip, #19476	; 0x4c14
   15518:	movt	lr, #1
   1551c:	movt	ip, #1
   15520:	b	15530 <__assert_fail@plt+0x2a80>
   15524:	ldr	r0, [r0, #152]	; 0x98
   15528:	cmp	r0, #0
   1552c:	beq	155e0 <__assert_fail@plt+0x2b30>
   15530:	ldr	r3, [r0]
   15534:	cmp	r3, #0
   15538:	beq	155fc <__assert_fail@plt+0x2b4c>
   1553c:	ldr	r2, [r0, #172]	; 0xac
   15540:	cmp	r2, #0
   15544:	beq	15614 <__assert_fail@plt+0x2b64>
   15548:	ldr	r1, [r2, #12]
   1554c:	cmp	r1, #0
   15550:	cmpne	r1, r3
   15554:	bne	155e4 <__assert_fail@plt+0x2b34>
   15558:	ldr	r1, [r2]
   1555c:	cmp	r1, #6
   15560:	bhi	15524 <__assert_fail@plt+0x2a74>
   15564:	add	r2, pc, #0
   15568:	ldr	pc, [r2, r1, lsl #2]
   1556c:	andeq	r5, r1, ip, lsr #12
   15570:	andeq	r5, r1, r8, lsl #11
   15574:	andeq	r5, r1, r4, asr #12
   15578:	andeq	r5, r1, r8, lsl #11
   1557c:	andeq	r5, r1, r8, lsl #11
   15580:	andeq	r5, r1, r8, lsl #11
   15584:	andeq	r5, r1, r4, lsr #11
   15588:	ldrb	r1, [r0, #17]
   1558c:	cmp	r1, #0
   15590:	bne	1565c <__assert_fail@plt+0x2bac>
   15594:	ldrb	r1, [r0, #16]
   15598:	cmp	r1, #0
   1559c:	beq	15524 <__assert_fail@plt+0x2a74>
   155a0:	b	15674 <__assert_fail@plt+0x2bc4>
   155a4:	ldrb	r1, [r0, #16]
   155a8:	cmp	r1, #0
   155ac:	beq	1568c <__assert_fail@plt+0x2bdc>
   155b0:	cmp	r3, lr
   155b4:	cmpne	r3, ip
   155b8:	beq	15524 <__assert_fail@plt+0x2a74>
   155bc:	ldrb	r1, [r0, #17]
   155c0:	cmp	r1, #0
   155c4:	bne	15524 <__assert_fail@plt+0x2a74>
   155c8:	movw	r0, #33313	; 0x8221
   155cc:	movw	r1, #32371	; 0x7e73
   155d0:	movw	r3, #33113	; 0x8159
   155d4:	movw	r2, #1349	; 0x545
   155d8:	movt	r0, #4
   155dc:	b	156a0 <__assert_fail@plt+0x2bf0>
   155e0:	pop	{fp, pc}
   155e4:	movw	r0, #33186	; 0x81a2
   155e8:	movw	r1, #32371	; 0x7e73
   155ec:	movw	r3, #33113	; 0x8159
   155f0:	movw	r2, #1322	; 0x52a
   155f4:	movt	r0, #4
   155f8:	b	156a0 <__assert_fail@plt+0x2bf0>
   155fc:	movw	r0, #33092	; 0x8144
   15600:	movw	r1, #32371	; 0x7e73
   15604:	movw	r3, #33113	; 0x8159
   15608:	movw	r2, #1310	; 0x51e
   1560c:	movt	r0, #4
   15610:	b	156a0 <__assert_fail@plt+0x2bf0>
   15614:	movw	r0, #33162	; 0x818a
   15618:	movw	r1, #32371	; 0x7e73
   1561c:	movw	r3, #33113	; 0x8159
   15620:	movw	r2, #1313	; 0x521
   15624:	movt	r0, #4
   15628:	b	156a0 <__assert_fail@plt+0x2bf0>
   1562c:	movw	r0, #33229	; 0x81cd
   15630:	movw	r1, #32371	; 0x7e73
   15634:	movw	r3, #33113	; 0x8159
   15638:	movw	r2, #1338	; 0x53a
   1563c:	movt	r0, #4
   15640:	b	156a0 <__assert_fail@plt+0x2bf0>
   15644:	movw	r0, #33265	; 0x81f1
   15648:	movw	r1, #32371	; 0x7e73
   1564c:	movw	r3, #33113	; 0x8159
   15650:	movw	r2, #1339	; 0x53b
   15654:	movt	r0, #4
   15658:	b	156a0 <__assert_fail@plt+0x2bf0>
   1565c:	movw	r0, #33312	; 0x8220
   15660:	movw	r1, #32371	; 0x7e73
   15664:	movw	r3, #33113	; 0x8159
   15668:	movw	r2, #1363	; 0x553
   1566c:	movt	r0, #4
   15670:	b	156a0 <__assert_fail@plt+0x2bf0>
   15674:	movw	r0, #33333	; 0x8235
   15678:	movw	r1, #32371	; 0x7e73
   1567c:	movw	r3, #33113	; 0x8159
   15680:	movw	r2, #1364	; 0x554
   15684:	movt	r0, #4
   15688:	b	156a0 <__assert_fail@plt+0x2bf0>
   1568c:	movw	r0, #33334	; 0x8236
   15690:	movw	r1, #32371	; 0x7e73
   15694:	movw	r3, #33113	; 0x8159
   15698:	movw	r2, #1343	; 0x53f
   1569c:	movt	r0, #4
   156a0:	movt	r1, #4
   156a4:	movt	r3, #4
   156a8:	bl	12ab0 <__assert_fail@plt>
   156ac:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   156b0:	add	fp, sp, #28
   156b4:	sub	sp, sp, #36	; 0x24
   156b8:	mov	r8, r2
   156bc:	mov	r9, r0
   156c0:	mov	r4, r2
   156c4:	ldr	r0, [r8], #40	; 0x28
   156c8:	bl	19930 <__assert_fail@plt+0x6e80>
   156cc:	mov	sl, r0
   156d0:	cmp	r0, #0
   156d4:	beq	1575c <__assert_fail@plt+0x2cac>
   156d8:	ldr	r0, [r4, #116]	; 0x74
   156dc:	cmp	r0, #0
   156e0:	bne	157dc <__assert_fail@plt+0x2d2c>
   156e4:	movw	r5, #61000	; 0xee48
   156e8:	mov	r1, #47	; 0x2f
   156ec:	movt	r5, #5
   156f0:	ldr	r6, [r5, #12]
   156f4:	mov	r0, r6
   156f8:	bl	127c8 <strchr@plt>
   156fc:	cmp	r0, #0
   15700:	beq	15798 <__assert_fail@plt+0x2ce8>
   15704:	mov	r0, r6
   15708:	bl	22a14 <__assert_fail@plt+0xff64>
   1570c:	ldr	r5, [r5, #16]
   15710:	mov	r6, r0
   15714:	mov	r0, #8
   15718:	bl	2e038 <__assert_fail@plt+0x1b588>
   1571c:	mov	r1, #0
   15720:	str	r0, [r4, #144]	; 0x90
   15724:	mov	r2, #0
   15728:	str	r1, [r0, #4]
   1572c:	mov	r0, r5
   15730:	mov	r1, r6
   15734:	bl	26670 <__assert_fail@plt+0x13bc0>
   15738:	ldr	r1, [r4, #144]	; 0x90
   1573c:	cmp	r0, #0
   15740:	str	r0, [r1]
   15744:	bmi	15984 <__assert_fail@plt+0x2ed4>
   15748:	mov	r1, #1
   1574c:	bl	22748 <__assert_fail@plt+0xfc98>
   15750:	mov	r0, r6
   15754:	bl	30174 <__assert_fail@plt+0x1d6c4>
   15758:	b	157dc <__assert_fail@plt+0x2d2c>
   1575c:	movw	r0, #58736	; 0xe570
   15760:	ldr	r1, [r4, #144]	; 0x90
   15764:	mov	r7, #0
   15768:	mov	r5, #0
   1576c:	mov	r6, #0
   15770:	movt	r0, #5
   15774:	ldr	r0, [r0]
   15778:	cmp	r1, r0
   1577c:	beq	15810 <__assert_fail@plt+0x2d60>
   15780:	movw	r0, #33592	; 0x8338
   15784:	movw	r1, #33625	; 0x8359
   15788:	movw	r3, #33632	; 0x8360
   1578c:	mov	r2, #148	; 0x94
   15790:	movt	r0, #4
   15794:	b	15978 <__assert_fail@plt+0x2ec8>
   15798:	ldr	r5, [r5, #16]
   1579c:	mov	r0, #8
   157a0:	bl	2e038 <__assert_fail@plt+0x1b588>
   157a4:	mov	r1, #0
   157a8:	str	r0, [r4, #144]	; 0x90
   157ac:	mov	r2, #0
   157b0:	str	r1, [r0, #4]
   157b4:	movw	r1, #35340	; 0x8a0c
   157b8:	mov	r0, r5
   157bc:	movt	r1, #4
   157c0:	bl	26670 <__assert_fail@plt+0x13bc0>
   157c4:	ldr	r1, [r4, #144]	; 0x90
   157c8:	cmp	r0, #0
   157cc:	str	r0, [r1]
   157d0:	bmi	1598c <__assert_fail@plt+0x2edc>
   157d4:	mov	r1, #1
   157d8:	bl	22748 <__assert_fail@plt+0xfc98>
   157dc:	movw	r0, #61000	; 0xee48
   157e0:	movt	r0, #5
   157e4:	ldr	r0, [r0, #12]
   157e8:	bl	22958 <__assert_fail@plt+0xfea8>
   157ec:	mov	r9, r0
   157f0:	ldrb	r0, [r0]
   157f4:	movw	r5, #33589	; 0x8335
   157f8:	movt	r5, #4
   157fc:	mov	r7, r9
   15800:	subs	r0, r0, #47	; 0x2f
   15804:	moveq	r5, r0
   15808:	movwne	r0, #1
   1580c:	lsl	r6, r0, #1
   15810:	ldrb	r0, [r8]
   15814:	cmp	r0, #0
   15818:	beq	15870 <__assert_fail@plt+0x2dc0>
   1581c:	mov	r0, r9
   15820:	bl	127bc <strlen@plt>
   15824:	mov	r1, #0
   15828:	add	r2, r8, #4
   1582c:	stm	sp, {r5, r6}
   15830:	add	r3, r0, #1
   15834:	str	r1, [sp, #8]
   15838:	mov	r0, r2
   1583c:	add	r1, r4, #88	; 0x58
   15840:	mov	r2, r9
   15844:	bl	1fd7c <__assert_fail@plt+0xd2cc>
   15848:	ldr	r0, [r4, #116]	; 0x74
   1584c:	cmp	r0, #0
   15850:	beq	15954 <__assert_fail@plt+0x2ea4>
   15854:	movw	r0, #61000	; 0xee48
   15858:	mov	r6, #1
   1585c:	movt	r0, #5
   15860:	strb	r6, [r0, #32]
   15864:	cmp	r7, #0
   15868:	bne	15938 <__assert_fail@plt+0x2e88>
   1586c:	b	15948 <__assert_fail@plt+0x2e98>
   15870:	add	r0, r4, #88	; 0x58
   15874:	str	r7, [sp, #20]
   15878:	str	sl, [sp, #24]
   1587c:	str	r0, [sp, #32]
   15880:	add	r0, r8, #4
   15884:	str	r0, [sp, #28]
   15888:	ldr	r0, [r4, #136]	; 0x88
   1588c:	cmp	r0, #1
   15890:	blt	158fc <__assert_fail@plt+0x2e4c>
   15894:	mov	r7, r9
   15898:	mov	sl, r5
   1589c:	mov	r9, r6
   158a0:	mov	r5, #0
   158a4:	ldr	r0, [r4, #132]	; 0x84
   158a8:	ldr	r6, [r0, r5, lsl #2]
   158ac:	mov	r0, r6
   158b0:	bl	127bc <strlen@plt>
   158b4:	mov	r8, r0
   158b8:	mov	r0, r7
   158bc:	bl	127bc <strlen@plt>
   158c0:	str	r0, [sp, #12]
   158c4:	mov	r0, #0
   158c8:	ldr	r1, [sp, #32]
   158cc:	mov	r2, r6
   158d0:	mov	r3, r8
   158d4:	str	sl, [sp]
   158d8:	str	r9, [sp, #4]
   158dc:	str	r7, [sp, #8]
   158e0:	str	r0, [sp, #16]
   158e4:	ldr	r0, [sp, #28]
   158e8:	bl	1fbfc <__assert_fail@plt+0xd14c>
   158ec:	ldr	r0, [r4, #136]	; 0x88
   158f0:	add	r5, r5, #1
   158f4:	cmp	r5, r0
   158f8:	blt	158a4 <__assert_fail@plt+0x2df4>
   158fc:	ldr	r0, [sp, #28]
   15900:	ldr	r1, [sp, #32]
   15904:	bl	1ffec <__assert_fail@plt+0xd53c>
   15908:	ldrh	r0, [r4, #148]	; 0x94
   1590c:	ldr	sl, [sp, #24]
   15910:	bic	r0, r0, #128	; 0x80
   15914:	cmp	sl, #0
   15918:	clz	r0, r0
   1591c:	lsr	r6, r0, #5
   15920:	beq	1592c <__assert_fail@plt+0x2e7c>
   15924:	ldr	r0, [r4, #144]	; 0x90
   15928:	bl	2d020 <__assert_fail@plt+0x1a570>
   1592c:	ldr	r7, [sp, #20]
   15930:	cmp	r7, #0
   15934:	beq	15948 <__assert_fail@plt+0x2e98>
   15938:	cmp	sl, #0
   1593c:	beq	15964 <__assert_fail@plt+0x2eb4>
   15940:	mov	r0, r7
   15944:	bl	30174 <__assert_fail@plt+0x1d6c4>
   15948:	mov	r0, r6
   1594c:	sub	sp, fp, #28
   15950:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15954:	mov	r6, #1
   15958:	cmp	r7, #0
   1595c:	bne	15938 <__assert_fail@plt+0x2e88>
   15960:	b	15948 <__assert_fail@plt+0x2e98>
   15964:	movw	r0, #33702	; 0x83a6
   15968:	movw	r1, #33625	; 0x8359
   1596c:	movw	r3, #33632	; 0x8360
   15970:	mov	r2, #208	; 0xd0
   15974:	movt	r0, #4
   15978:	movt	r1, #4
   1597c:	movt	r3, #4
   15980:	bl	12ab0 <__assert_fail@plt>
   15984:	mov	r0, r6
   15988:	bl	30174 <__assert_fail@plt+0x1d6c4>
   1598c:	bl	12804 <__errno_location@plt>
   15990:	movw	r1, #33524	; 0x82f4
   15994:	ldr	r4, [r0]
   15998:	mov	r0, #0
   1599c:	mov	r2, #5
   159a0:	movt	r1, #4
   159a4:	bl	12564 <dcgettext@plt>
   159a8:	mov	r6, r0
   159ac:	mov	r0, #0
   159b0:	mov	r1, r9
   159b4:	bl	19960 <__assert_fail@plt+0x6eb0>
   159b8:	mov	r3, r0
   159bc:	mov	r0, #1
   159c0:	mov	r1, r4
   159c4:	mov	r2, r6
   159c8:	bl	1269c <error@plt>
   159cc:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   159d0:	add	fp, sp, #28
   159d4:	sub	sp, sp, #20
   159d8:	movw	r9, #61044	; 0xee74
   159dc:	movw	sl, #58704	; 0xe550
   159e0:	mov	r8, r3
   159e4:	mov	r5, r1
   159e8:	movt	r9, #5
   159ec:	movt	sl, #5
   159f0:	ldrb	r0, [r9, #44]	; 0x2c
   159f4:	tst	r0, #32
   159f8:	bne	15b88 <__assert_fail@plt+0x30d8>
   159fc:	movw	r0, #58716	; 0xe55c
   15a00:	movt	r0, #5
   15a04:	ldr	r0, [r0]
   15a08:	bl	30118 <__assert_fail@plt+0x1d668>
   15a0c:	ldr	r0, [sl]
   15a10:	bl	30118 <__assert_fail@plt+0x1d668>
   15a14:	movw	r0, #58740	; 0xe574
   15a18:	movt	r0, #5
   15a1c:	ldrb	r1, [r0]
   15a20:	cmp	r1, #0
   15a24:	bne	15a3c <__assert_fail@plt+0x2f8c>
   15a28:	mov	r1, #1
   15a2c:	strb	r1, [r0]
   15a30:	mov	r0, #17
   15a34:	mov	r1, #0
   15a38:	bl	12528 <signal@plt>
   15a3c:	bl	1290c <fork@plt>
   15a40:	cmn	r0, #1
   15a44:	beq	15c24 <__assert_fail@plt+0x3174>
   15a48:	mov	r6, r0
   15a4c:	cmp	r0, #0
   15a50:	beq	15c50 <__assert_fail@plt+0x31a0>
   15a54:	add	r7, r5, #108	; 0x6c
   15a58:	mov	r0, r6
   15a5c:	mov	r1, r7
   15a60:	mov	r2, #0
   15a64:	bl	1263c <waitpid@plt>
   15a68:	cmn	r0, #1
   15a6c:	bne	15ad0 <__assert_fail@plt+0x3020>
   15a70:	bl	12804 <__errno_location@plt>
   15a74:	ldr	r4, [r0]
   15a78:	cmp	r4, #4
   15a7c:	beq	15a58 <__assert_fail@plt+0x2fa8>
   15a80:	movw	r1, #33849	; 0x8439
   15a84:	mov	r0, #0
   15a88:	mov	r2, #5
   15a8c:	mov	r6, #0
   15a90:	movt	r1, #4
   15a94:	bl	12564 <dcgettext@plt>
   15a98:	ldr	r1, [r8]
   15a9c:	mov	r5, r0
   15aa0:	mov	r0, #0
   15aa4:	bl	19960 <__assert_fail@plt+0x6eb0>
   15aa8:	mov	r3, r0
   15aac:	mov	r0, #0
   15ab0:	mov	r1, r4
   15ab4:	mov	r2, r5
   15ab8:	bl	1269c <error@plt>
   15abc:	movw	r0, #61000	; 0xee48
   15ac0:	mov	r1, #1
   15ac4:	movt	r0, #5
   15ac8:	str	r1, [r0, #28]
   15acc:	b	15b7c <__assert_fail@plt+0x30cc>
   15ad0:	ldr	r0, [r7]
   15ad4:	mov	r1, #2130706432	; 0x7f000000
   15ad8:	and	r1, r1, r0, lsl #24
   15adc:	add	r1, r1, #16777216	; 0x1000000
   15ae0:	cmp	r1, #33554432	; 0x2000000
   15ae4:	blt	15b44 <__assert_fail@plt+0x3094>
   15ae8:	movw	r1, #33870	; 0x844e
   15aec:	mov	r0, #0
   15af0:	mov	r2, #5
   15af4:	movt	r1, #4
   15af8:	bl	12564 <dcgettext@plt>
   15afc:	ldr	r1, [r9, #72]	; 0x48
   15b00:	ldr	r2, [r8]
   15b04:	mov	r4, r0
   15b08:	mov	r0, #0
   15b0c:	bl	2c88c <__assert_fail@plt+0x19ddc>
   15b10:	mov	r3, r0
   15b14:	ldr	r0, [r5, #108]	; 0x6c
   15b18:	mov	r1, #0
   15b1c:	mov	r2, r4
   15b20:	and	r0, r0, #127	; 0x7f
   15b24:	str	r0, [sp]
   15b28:	mov	r0, #0
   15b2c:	bl	1269c <error@plt>
   15b30:	ldrb	r0, [r5]
   15b34:	cmp	r0, #0
   15b38:	bne	15b6c <__assert_fail@plt+0x30bc>
   15b3c:	mov	r6, #1
   15b40:	b	15b7c <__assert_fail@plt+0x30cc>
   15b44:	ldrb	r1, [r9, #44]	; 0x2c
   15b48:	ubfx	r4, r0, #8, #8
   15b4c:	tst	r1, #32
   15b50:	bne	15c08 <__assert_fail@plt+0x3158>
   15b54:	mov	r6, #1
   15b58:	cmp	r4, #0
   15b5c:	beq	15b7c <__assert_fail@plt+0x30cc>
   15b60:	ldrb	r0, [r5]
   15b64:	cmp	r0, #0
   15b68:	beq	15b7c <__assert_fail@plt+0x30cc>
   15b6c:	movw	r0, #61000	; 0xee48
   15b70:	mov	r6, #1
   15b74:	movt	r0, #5
   15b78:	str	r6, [r0, #28]
   15b7c:	mov	r0, r6
   15b80:	sub	sp, fp, #28
   15b84:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15b88:	ldr	r0, [r5, #48]	; 0x30
   15b8c:	movw	r1, #33708	; 0x83ac
   15b90:	mov	r4, #0
   15b94:	movt	r1, #4
   15b98:	subs	r2, r0, #1
   15b9c:	ldr	r0, [sl]
   15ba0:	sbc	r3, r4, #0
   15ba4:	bl	127f8 <fprintf@plt>
   15ba8:	ldr	r0, [r5, #48]	; 0x30
   15bac:	ldr	r6, [sl]
   15bb0:	cmp	r0, #1
   15bb4:	beq	15bf8 <__assert_fail@plt+0x3148>
   15bb8:	movw	r7, #56014	; 0xdace
   15bbc:	movt	r7, #4
   15bc0:	ldr	r0, [r5, #52]	; 0x34
   15bc4:	ldr	r1, [r0, r4, lsl #2]
   15bc8:	mov	r0, #0
   15bcc:	bl	19960 <__assert_fail@plt+0x6eb0>
   15bd0:	mov	r2, r0
   15bd4:	mov	r0, r6
   15bd8:	mov	r1, r7
   15bdc:	bl	127f8 <fprintf@plt>
   15be0:	ldr	r0, [r5, #48]	; 0x30
   15be4:	ldr	r6, [sl]
   15be8:	add	r4, r4, #1
   15bec:	sub	r0, r0, #1
   15bf0:	cmp	r4, r0
   15bf4:	bcc	15bc0 <__assert_fail@plt+0x3110>
   15bf8:	mov	r0, #10
   15bfc:	mov	r1, r6
   15c00:	bl	12948 <fputc@plt>
   15c04:	b	159fc <__assert_fail@plt+0x2f4c>
   15c08:	ldr	r0, [sl]
   15c0c:	movw	r1, #33897	; 0x8469
   15c10:	mov	r2, r6
   15c14:	mov	r3, r4
   15c18:	movt	r1, #4
   15c1c:	bl	127f8 <fprintf@plt>
   15c20:	b	15b54 <__assert_fail@plt+0x30a4>
   15c24:	bl	12804 <__errno_location@plt>
   15c28:	movw	r1, #33750	; 0x83d6
   15c2c:	ldr	r4, [r0]
   15c30:	mov	r0, #0
   15c34:	mov	r2, #5
   15c38:	movt	r1, #4
   15c3c:	bl	12564 <dcgettext@plt>
   15c40:	mov	r2, r0
   15c44:	mov	r0, #1
   15c48:	mov	r1, r4
   15c4c:	bl	1269c <error@plt>
   15c50:	ldr	r6, [r5, #104]	; 0x68
   15c54:	cmp	r6, #0
   15c58:	bne	15c7c <__assert_fail@plt+0x31cc>
   15c5c:	movw	r0, #33762	; 0x83e2
   15c60:	movw	r1, #33625	; 0x8359
   15c64:	movw	r3, #33789	; 0x83fd
   15c68:	movw	r2, #321	; 0x141
   15c6c:	movt	r0, #4
   15c70:	movt	r1, #4
   15c74:	movt	r3, #4
   15c78:	bl	12ab0 <__assert_fail@plt>
   15c7c:	ldrb	r0, [r5, #100]	; 0x64
   15c80:	mov	r5, #1
   15c84:	cmp	r0, #0
   15c88:	beq	15d2c <__assert_fail@plt+0x327c>
   15c8c:	movw	r0, #34024	; 0x84e8
   15c90:	mov	r5, #0
   15c94:	movt	r0, #4
   15c98:	vldr	d16, [r0]
   15c9c:	mov	r0, #108	; 0x6c
   15ca0:	strh	r0, [sp, #16]
   15ca4:	mov	r0, #0
   15ca8:	vstr	d16, [sp, #8]
   15cac:	bl	12a68 <close@plt>
   15cb0:	cmn	r0, #1
   15cb4:	bgt	15ce8 <__assert_fail@plt+0x3238>
   15cb8:	bl	12804 <__errno_location@plt>
   15cbc:	movw	r1, #33959	; 0x84a7
   15cc0:	ldr	r4, [r0]
   15cc4:	mov	r0, #0
   15cc8:	mov	r2, #5
   15ccc:	movt	r1, #4
   15cd0:	bl	12564 <dcgettext@plt>
   15cd4:	mov	r2, r0
   15cd8:	mov	r0, #0
   15cdc:	mov	r1, r4
   15ce0:	bl	1269c <error@plt>
   15ce4:	b	15d2c <__assert_fail@plt+0x327c>
   15ce8:	add	r0, sp, #8
   15cec:	mov	r1, #131072	; 0x20000
   15cf0:	bl	22aec <__assert_fail@plt+0x1003c>
   15cf4:	mov	r5, #1
   15cf8:	cmn	r0, #1
   15cfc:	bgt	15d2c <__assert_fail@plt+0x327c>
   15d00:	bl	12804 <__errno_location@plt>
   15d04:	ldr	r4, [r0]
   15d08:	add	r1, sp, #8
   15d0c:	mov	r0, #0
   15d10:	bl	19960 <__assert_fail@plt+0x6eb0>
   15d14:	movw	r2, #56015	; 0xdacf
   15d18:	mov	r3, r0
   15d1c:	mov	r0, #0
   15d20:	mov	r1, r4
   15d24:	movt	r2, #4
   15d28:	bl	1269c <error@plt>
   15d2c:	mov	r0, r6
   15d30:	bl	2d004 <__assert_fail@plt+0x1a554>
   15d34:	cmp	r0, #0
   15d38:	bne	15d74 <__assert_fail@plt+0x32c4>
   15d3c:	cmp	r5, #0
   15d40:	beq	15de0 <__assert_fail@plt+0x3330>
   15d44:	bl	20f18 <__assert_fail@plt+0xe468>
   15d48:	cmp	r0, #0
   15d4c:	beq	15d54 <__assert_fail@plt+0x32a4>
   15d50:	bl	20f38 <__assert_fail@plt+0xe488>
   15d54:	mov	r0, r8
   15d58:	bl	207ac <__assert_fail@plt+0xdcfc>
   15d5c:	cmp	r0, #0
   15d60:	beq	15de8 <__assert_fail@plt+0x3338>
   15d64:	bl	12804 <__errno_location@plt>
   15d68:	mov	r1, #7
   15d6c:	str	r1, [r0]
   15d70:	b	15df8 <__assert_fail@plt+0x3348>
   15d74:	bl	12804 <__errno_location@plt>
   15d78:	movw	r1, #33987	; 0x84c3
   15d7c:	ldr	r4, [r0]
   15d80:	mov	r0, #0
   15d84:	mov	r2, #5
   15d88:	movt	r1, #4
   15d8c:	bl	12564 <dcgettext@plt>
   15d90:	mov	r2, r0
   15d94:	ldr	r0, [r6]
   15d98:	cmn	r0, #1
   15d9c:	bgt	15dc4 <__assert_fail@plt+0x3314>
   15da0:	ldr	r0, [r6, #4]
   15da4:	movw	r1, #38711	; 0x9737
   15da8:	movw	r3, #46220	; 0xb48c
   15dac:	movt	r1, #4
   15db0:	movt	r3, #4
   15db4:	cmp	r0, #0
   15db8:	moveq	r3, r1
   15dbc:	moveq	r0, r1
   15dc0:	b	15dd0 <__assert_fail@plt+0x3320>
   15dc4:	movw	r3, #38711	; 0x9737
   15dc8:	movt	r3, #4
   15dcc:	mov	r0, r3
   15dd0:	str	r0, [sp]
   15dd4:	mov	r0, #0
   15dd8:	mov	r1, r4
   15ddc:	bl	1269c <error@plt>
   15de0:	mov	r0, #1
   15de4:	bl	124d4 <_exit@plt>
   15de8:	ldr	r0, [r8]
   15dec:	mov	r1, r8
   15df0:	bl	124ec <execvp@plt>
   15df4:	bl	12804 <__errno_location@plt>
   15df8:	ldr	r1, [r8]
   15dfc:	ldr	r4, [r0]
   15e00:	mov	r0, #0
   15e04:	bl	19960 <__assert_fail@plt+0x6eb0>
   15e08:	movw	r2, #56015	; 0xdacf
   15e0c:	mov	r3, r0
   15e10:	mov	r0, #0
   15e14:	mov	r1, r4
   15e18:	movt	r2, #4
   15e1c:	bl	1269c <error@plt>
   15e20:	mov	r0, #1
   15e24:	bl	124d4 <_exit@plt>
   15e28:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   15e2c:	add	fp, sp, #24
   15e30:	movw	r8, #58744	; 0xe578
   15e34:	mov	r5, r0
   15e38:	cmp	r1, #0
   15e3c:	mov	r4, r1
   15e40:	movt	r8, #5
   15e44:	movwne	r4, #16
   15e48:	ldr	r0, [r8]
   15e4c:	cmp	r0, #0
   15e50:	beq	15e94 <__assert_fail@plt+0x33e4>
   15e54:	movw	r6, #58748	; 0xe57c
   15e58:	mov	r7, #0
   15e5c:	movt	r6, #5
   15e60:	ldr	r0, [r6]
   15e64:	mov	r2, r4
   15e68:	ldr	r1, [r0, r7, lsl #2]
   15e6c:	mov	r0, r5
   15e70:	bl	126c0 <fnmatch@plt>
   15e74:	cmp	r0, #0
   15e78:	beq	15eb4 <__assert_fail@plt+0x3404>
   15e7c:	ldr	r0, [r8]
   15e80:	add	r7, r7, #1
   15e84:	cmp	r7, r0
   15e88:	bcc	15e60 <__assert_fail@plt+0x33b0>
   15e8c:	mov	r0, #0
   15e90:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   15e94:	movw	r1, #35340	; 0x8a0c
   15e98:	mov	r0, r5
   15e9c:	mov	r2, r4
   15ea0:	movt	r1, #4
   15ea4:	bl	126c0 <fnmatch@plt>
   15ea8:	clz	r0, r0
   15eac:	lsr	r0, r0, #5
   15eb0:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   15eb4:	mov	r0, #1
   15eb8:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   15ebc:	ldr	r3, [r1, #36]	; 0x24
   15ec0:	ldr	r2, [r1, #4]
   15ec4:	mov	ip, r0
   15ec8:	cmp	r3, #0
   15ecc:	beq	15ee0 <__assert_fail@plt+0x3430>
   15ed0:	movw	r1, #34034	; 0x84f2
   15ed4:	mov	r0, ip
   15ed8:	movt	r1, #4
   15edc:	b	127f8 <fprintf@plt>
   15ee0:	mov	r0, r2
   15ee4:	mov	r1, ip
   15ee8:	b	12a44 <fputs@plt>
   15eec:	movw	r0, #58752	; 0xe580
   15ef0:	movt	r0, #5
   15ef4:	ldr	r0, [r0]
   15ef8:	bx	lr
   15efc:	push	{r4, sl, fp, lr}
   15f00:	add	fp, sp, #8
   15f04:	cmp	r0, #0
   15f08:	beq	160b0 <__assert_fail@plt+0x3600>
   15f0c:	mov	r4, r0
   15f10:	ldr	r0, [r0, #160]	; 0xa0
   15f14:	cmp	r0, #0
   15f18:	blne	15efc <__assert_fail@plt+0x344c>
   15f1c:	ldr	r0, [r4, #156]	; 0x9c
   15f20:	cmp	r0, #0
   15f24:	blne	15efc <__assert_fail@plt+0x344c>
   15f28:	ldr	r0, [r4, #8]
   15f2c:	cmp	r0, #5
   15f30:	bhi	160c8 <__assert_fail@plt+0x3618>
   15f34:	add	r1, pc, #0
   15f38:	ldr	pc, [r1, r0, lsl #2]
   15f3c:	andeq	r5, r1, r4, asr pc
   15f40:	andeq	r6, r1, r8, lsr #32
   15f44:	andeq	r5, r1, r4, lsl #31
   15f48:	andeq	r5, r1, ip, asr #31
   15f4c:	andeq	r6, r1, r0, ror #1
   15f50:	strdeq	r6, [r1], -r8
   15f54:	ldr	r0, [r4, #160]	; 0xa0
   15f58:	cmp	r0, #0
   15f5c:	bne	16110 <__assert_fail@plt+0x3660>
   15f60:	ldr	r0, [r4, #156]	; 0x9c
   15f64:	cmp	r0, #0
   15f68:	vldreq	s0, [r4, #28]
   15f6c:	popeq	{r4, sl, fp, pc}
   15f70:	movw	r0, #34178	; 0x8582
   15f74:	movw	r1, #34050	; 0x8502
   15f78:	movw	r3, #34057	; 0x8509
   15f7c:	movw	r2, #1170	; 0x492
   15f80:	b	16054 <__assert_fail@plt+0x35a4>
   15f84:	ldr	r0, [r4]
   15f88:	movw	r1, #18024	; 0x4668
   15f8c:	movt	r1, #1
   15f90:	cmp	r0, r1
   15f94:	bne	16124 <__assert_fail@plt+0x3674>
   15f98:	ldr	r0, [r4, #156]	; 0x9c
   15f9c:	cmp	r0, #0
   15fa0:	ldreq	r0, [r4, #160]	; 0xa0
   15fa4:	vmoveq.f32	s2, #112	; 0x3f800000  1.0
   15fa8:	vldreq	s0, [r0, #28]
   15fac:	vsubeq.f32	s0, s2, s0
   15fb0:	vstreq	s0, [r4, #28]
   15fb4:	popeq	{r4, sl, fp, pc}
   15fb8:	movw	r0, #34178	; 0x8582
   15fbc:	movw	r1, #34050	; 0x8502
   15fc0:	movw	r3, #34057	; 0x8509
   15fc4:	movw	r2, #1181	; 0x49d
   15fc8:	b	16054 <__assert_fail@plt+0x35a4>
   15fcc:	ldr	r0, [r4]
   15fd0:	movw	r1, #15568	; 0x3cd0
   15fd4:	movt	r1, #1
   15fd8:	cmp	r0, r1
   15fdc:	beq	16064 <__assert_fail@plt+0x35b4>
   15fe0:	movw	r1, #15960	; 0x3e58
   15fe4:	movt	r1, #1
   15fe8:	cmp	r0, r1
   15fec:	beq	1608c <__assert_fail@plt+0x35dc>
   15ff0:	movw	r1, #18876	; 0x49bc
   15ff4:	movt	r1, #1
   15ff8:	cmp	r0, r1
   15ffc:	bne	16154 <__assert_fail@plt+0x36a4>
   16000:	ldr	r0, [r4, #160]	; 0xa0
   16004:	vmov.f32	s0, #112	; 0x3f800000  1.0
   16008:	vmov.f32	s2, s0
   1600c:	cmp	r0, #0
   16010:	vldrne	s2, [r0, #28]
   16014:	ldr	r0, [r4, #156]	; 0x9c
   16018:	cmp	r0, #0
   1601c:	vldrne	s0, [r0, #28]
   16020:	vadd.f32	s0, s2, s0
   16024:	b	16090 <__assert_fail@plt+0x35e0>
   16028:	ldr	r0, [r4, #160]	; 0xa0
   1602c:	cmp	r0, #0
   16030:	bne	1613c <__assert_fail@plt+0x368c>
   16034:	ldr	r0, [r4, #156]	; 0x9c
   16038:	cmp	r0, #0
   1603c:	vldreq	s0, [r4, #28]
   16040:	popeq	{r4, sl, fp, pc}
   16044:	movw	r0, #34178	; 0x8582
   16048:	movw	r1, #34050	; 0x8502
   1604c:	movw	r3, #34057	; 0x8509
   16050:	movw	r2, #1175	; 0x497
   16054:	movt	r0, #4
   16058:	movt	r1, #4
   1605c:	movt	r3, #4
   16060:	bl	12ab0 <__assert_fail@plt>
   16064:	ldr	r0, [r4, #160]	; 0xa0
   16068:	vmov.f32	s0, #112	; 0x3f800000  1.0
   1606c:	vmov.f32	s2, s0
   16070:	cmp	r0, #0
   16074:	vldrne	s2, [r0, #28]
   16078:	ldr	r0, [r4, #156]	; 0x9c
   1607c:	cmp	r0, #0
   16080:	vldrne	s0, [r0, #28]
   16084:	vmul.f32	s0, s2, s0
   16088:	b	16090 <__assert_fail@plt+0x35e0>
   1608c:	vmov.f32	s0, #112	; 0x3f800000  1.0
   16090:	vldr	s2, [pc, #208]	; 16168 <__assert_fail@plt+0x36b8>
   16094:	vmov.f32	s4, #112	; 0x3f800000  1.0
   16098:	vcmpe.f32	s0, s4
   1609c:	vmax.f32	d1, d0, d1
   160a0:	vmrs	APSR_nzcv, fpscr
   160a4:	vselgt.f32	s0, s4, s2
   160a8:	vstr	s0, [r4, #28]
   160ac:	pop	{r4, sl, fp, pc}
   160b0:	movw	r0, #34040	; 0x84f8
   160b4:	movw	r1, #34050	; 0x8502
   160b8:	movw	r3, #34057	; 0x8509
   160bc:	movw	r2, #1156	; 0x484
   160c0:	movt	r0, #4
   160c4:	b	16058 <__assert_fail@plt+0x35a8>
   160c8:	movw	r0, #35937	; 0x8c61
   160cc:	movw	r1, #34050	; 0x8502
   160d0:	movw	r3, #34057	; 0x8509
   160d4:	mov	r2, #1216	; 0x4c0
   160d8:	movt	r0, #4
   160dc:	b	16058 <__assert_fail@plt+0x35a8>
   160e0:	movw	r0, #34132	; 0x8554
   160e4:	movw	r1, #34050	; 0x8502
   160e8:	movw	r3, #34057	; 0x8509
   160ec:	movw	r2, #1164	; 0x48c
   160f0:	movt	r0, #4
   160f4:	b	16058 <__assert_fail@plt+0x35a8>
   160f8:	movw	r0, #34107	; 0x853b
   160fc:	movw	r1, #34050	; 0x8502
   16100:	movw	r3, #34057	; 0x8509
   16104:	movw	r2, #1163	; 0x48b
   16108:	movt	r0, #4
   1610c:	b	16058 <__assert_fail@plt+0x35a8>
   16110:	movw	r0, #34156	; 0x856c
   16114:	movw	r1, #34050	; 0x8502
   16118:	movw	r3, #34057	; 0x8509
   1611c:	movw	r2, #1169	; 0x491
   16120:	b	1614c <__assert_fail@plt+0x369c>
   16124:	movw	r0, #34199	; 0x8597
   16128:	movw	r1, #34050	; 0x8502
   1612c:	movw	r3, #34057	; 0x8509
   16130:	movw	r2, #1180	; 0x49c
   16134:	movt	r0, #4
   16138:	b	16058 <__assert_fail@plt+0x35a8>
   1613c:	movw	r0, #34156	; 0x856c
   16140:	movw	r1, #34050	; 0x8502
   16144:	movw	r3, #34057	; 0x8509
   16148:	movw	r2, #1174	; 0x496
   1614c:	movt	r0, #4
   16150:	b	16058 <__assert_fail@plt+0x35a8>
   16154:	movw	r0, #35937	; 0x8c61
   16158:	movw	r1, #34050	; 0x8502
   1615c:	movw	r3, #34057	; 0x8509
   16160:	movw	r2, #1204	; 0x4b4
   16164:	b	160d8 <__assert_fail@plt+0x3628>
   16168:	andeq	r0, r0, r0
   1616c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   16170:	add	fp, sp, #28
   16174:	sub	sp, sp, #28
   16178:	movw	r7, #58756	; 0xe584
   1617c:	mov	r6, r0
   16180:	mov	r0, #0
   16184:	mov	r4, r1
   16188:	str	r2, [sp, #16]
   1618c:	movt	r7, #5
   16190:	cmp	r6, r2
   16194:	str	r6, [sp, #24]
   16198:	str	r0, [r7]
   1619c:	add	r0, r1, r2, lsl #2
   161a0:	movw	r1, #58748	; 0xe57c
   161a4:	movt	r1, #5
   161a8:	str	r0, [r1]
   161ac:	ble	161ec <__assert_fail@plt+0x373c>
   161b0:	movw	r8, #58744	; 0xe578
   161b4:	mov	r5, r2
   161b8:	movt	r8, #5
   161bc:	ldr	r0, [r4, r5, lsl #2]
   161c0:	mov	r1, #1
   161c4:	bl	190e4 <__assert_fail@plt+0x6634>
   161c8:	cmp	r0, #0
   161cc:	bne	161ec <__assert_fail@plt+0x373c>
   161d0:	ldr	r0, [r8]
   161d4:	add	r5, r5, #1
   161d8:	cmp	r5, r6
   161dc:	str	r5, [sp, #16]
   161e0:	add	r0, r0, #1
   161e4:	str	r0, [r8]
   161e8:	blt	161bc <__assert_fail@plt+0x370c>
   161ec:	movw	r8, #46295	; 0xb4d7
   161f0:	movt	r8, #4
   161f4:	mov	r0, r8
   161f8:	bl	1befc <__assert_fail@plt+0x944c>
   161fc:	mov	r6, r0
   16200:	movw	r0, #36017	; 0x8cb1
   16204:	movt	r0, #4
   16208:	bl	1befc <__assert_fail@plt+0x944c>
   1620c:	mov	r5, r0
   16210:	movw	r0, #34528	; 0x86e0
   16214:	movt	r0, #4
   16218:	bl	1befc <__assert_fail@plt+0x944c>
   1621c:	cmp	r6, #0
   16220:	beq	166a0 <__assert_fail@plt+0x3bf0>
   16224:	cmp	r5, #0
   16228:	beq	166b8 <__assert_fail@plt+0x3c08>
   1622c:	cmp	r0, #0
   16230:	str	r5, [sp, #8]
   16234:	str	r0, [sp, #12]
   16238:	beq	166d0 <__assert_fail@plt+0x3c20>
   1623c:	add	r2, sp, #24
   16240:	mov	r0, r6
   16244:	mov	r1, r4
   16248:	bl	1c098 <__assert_fail@plt+0x95e8>
   1624c:	movw	sl, #58760	; 0xe588
   16250:	mov	r0, #1
   16254:	movt	sl, #5
   16258:	ldr	r2, [sl]
   1625c:	str	r8, [r2, #4]
   16260:	ldr	r3, [r7]
   16264:	strb	r0, [r3, #33]	; 0x21
   16268:	mov	r0, r4
   1626c:	ldr	r1, [sp, #24]
   16270:	bl	1bee4 <__assert_fail@plt+0x9434>
   16274:	ldr	r0, [sl]
   16278:	bl	15500 <__assert_fail@plt+0x2a50>
   1627c:	ldr	r1, [sp, #24]
   16280:	ldr	r0, [sp, #16]
   16284:	cmp	r0, r1
   16288:	bge	16340 <__assert_fail@plt+0x3890>
   1628c:	mov	r8, #0
   16290:	b	162b4 <__assert_fail@plt+0x3804>
   16294:	str	r8, [r0, #36]	; 0x24
   16298:	bl	15500 <__assert_fail@plt+0x2a50>
   1629c:	ldr	r0, [r7]
   162a0:	bl	15500 <__assert_fail@plt+0x2a50>
   162a4:	ldr	r1, [sp, #24]
   162a8:	ldr	r0, [sp, #16]
   162ac:	cmp	r0, r1
   162b0:	bge	16340 <__assert_fail@plt+0x3890>
   162b4:	movw	r1, #61000	; 0xee48
   162b8:	movt	r1, #5
   162bc:	strb	r8, [r1, #40]	; 0x28
   162c0:	mov	r1, #0
   162c4:	ldr	r0, [r4, r0, lsl #2]
   162c8:	bl	190e4 <__assert_fail@plt+0x6634>
   162cc:	cmp	r0, #0
   162d0:	beq	16598 <__assert_fail@plt+0x3ae8>
   162d4:	ldr	r0, [sp, #16]
   162d8:	ldr	r6, [r4, r0, lsl #2]
   162dc:	mov	r0, r6
   162e0:	bl	1befc <__assert_fail@plt+0x944c>
   162e4:	cmp	r0, #0
   162e8:	beq	1662c <__assert_fail@plt+0x3b7c>
   162ec:	mov	r5, r0
   162f0:	ldr	r0, [r0]
   162f4:	ldr	r9, [sp, #16]
   162f8:	mov	r1, r4
   162fc:	add	r2, sp, #16
   16300:	cmp	r0, #4
   16304:	mov	r0, r5
   16308:	addne	r9, r9, #1
   1630c:	strne	r9, [sp, #16]
   16310:	ldr	r3, [r5, #8]
   16314:	blx	r3
   16318:	cmp	r0, #0
   1631c:	beq	16610 <__assert_fail@plt+0x3b60>
   16320:	ldr	r0, [sl]
   16324:	str	r6, [r0, #4]
   16328:	ldr	r1, [sp, #16]
   1632c:	cmp	r1, r9
   16330:	beq	16294 <__assert_fail@plt+0x37e4>
   16334:	ldr	r1, [r4, r9, lsl #2]
   16338:	str	r1, [r0, #36]	; 0x24
   1633c:	b	16298 <__assert_fail@plt+0x37e8>
   16340:	ldr	r3, [r7]
   16344:	ldr	r2, [sl]
   16348:	mov	r0, r4
   1634c:	bl	1bef8 <__assert_fail@plt+0x9448>
   16350:	ldr	r0, [r7]
   16354:	ldr	r1, [r0, #152]	; 0x98
   16358:	cmp	r1, #0
   1635c:	beq	163c8 <__assert_fail@plt+0x3918>
   16360:	mov	r0, r1
   16364:	bl	190b8 <__assert_fail@plt+0x6608>
   16368:	cmp	r0, #0
   1636c:	beq	16408 <__assert_fail@plt+0x3958>
   16370:	ldr	r0, [sp, #8]
   16374:	add	r8, sp, #24
   16378:	mov	r1, r4
   1637c:	mov	r2, r8
   16380:	bl	1c064 <__assert_fail@plt+0x95b4>
   16384:	ldr	r0, [sl]
   16388:	movw	r1, #36017	; 0x8cb1
   1638c:	mov	r6, #1
   16390:	movt	r1, #4
   16394:	str	r1, [r0, #4]
   16398:	strb	r6, [r0, #33]	; 0x21
   1639c:	bl	15500 <__assert_fail@plt+0x2a50>
   163a0:	ldr	r0, [sp, #12]
   163a4:	mov	r1, r4
   163a8:	mov	r2, r8
   163ac:	bl	1c0cc <__assert_fail@plt+0x961c>
   163b0:	ldr	r0, [sl]
   163b4:	movw	r1, #34527	; 0x86df
   163b8:	movt	r1, #4
   163bc:	str	r1, [r0, #4]
   163c0:	strb	r6, [r0, #33]	; 0x21
   163c4:	b	163f8 <__assert_fail@plt+0x3948>
   163c8:	str	r1, [sl]
   163cc:	str	r1, [r7]
   163d0:	str	r0, [sp, #20]
   163d4:	bl	30174 <__assert_fail@plt+0x1d6c4>
   163d8:	ldr	r0, [sp, #12]
   163dc:	add	r2, sp, #24
   163e0:	mov	r1, r4
   163e4:	bl	1c0cc <__assert_fail@plt+0x961c>
   163e8:	ldr	r0, [sl]
   163ec:	movw	r1, #34527	; 0x86df
   163f0:	movt	r1, #4
   163f4:	str	r1, [r0, #4]
   163f8:	bl	15500 <__assert_fail@plt+0x2a50>
   163fc:	ldr	r0, [r7]
   16400:	bl	15500 <__assert_fail@plt+0x2a50>
   16404:	b	16424 <__assert_fail@plt+0x3974>
   16408:	ldr	r0, [r7]
   1640c:	str	r0, [sp, #20]
   16410:	ldr	r0, [r0, #152]	; 0x98
   16414:	str	r0, [r7]
   16418:	bl	15500 <__assert_fail@plt+0x2a50>
   1641c:	ldr	r0, [sp, #20]
   16420:	bl	30174 <__assert_fail@plt+0x1d6c4>
   16424:	movw	r5, #61044	; 0xee74
   16428:	movt	r5, #5
   1642c:	ldrb	r0, [r5, #44]	; 0x2c
   16430:	tst	r0, #9
   16434:	bne	164d0 <__assert_fail@plt+0x3a20>
   16438:	ldr	r0, [r7]
   1643c:	bl	1bc80 <__assert_fail@plt+0x91d0>
   16440:	ldr	r0, [r7]
   16444:	bl	15500 <__assert_fail@plt+0x2a50>
   16448:	ldr	r0, [r7]
   1644c:	mov	r1, #0
   16450:	mov	r2, #0
   16454:	str	r0, [sp, #20]
   16458:	add	r0, sp, #20
   1645c:	bl	16764 <__assert_fail@plt+0x3cb4>
   16460:	movw	r4, #58752	; 0xe580
   16464:	movt	r4, #5
   16468:	str	r0, [r4]
   1646c:	bl	15efc <__assert_fail@plt+0x344c>
   16470:	ldr	r0, [sp, #20]
   16474:	cmp	r0, #0
   16478:	bne	166f0 <__assert_fail@plt+0x3c40>
   1647c:	ldrb	r0, [r5, #44]	; 0x2c
   16480:	tst	r0, #9
   16484:	bne	16500 <__assert_fail@plt+0x3a50>
   16488:	ldr	r0, [r4]
   1648c:	bl	16df8 <__assert_fail@plt+0x4348>
   16490:	mov	r0, r4
   16494:	bl	17044 <__assert_fail@plt+0x4594>
   16498:	ldr	r0, [r4]
   1649c:	mov	r1, #1
   164a0:	bl	177f8 <__assert_fail@plt+0x4d48>
   164a4:	ldr	r0, [r4]
   164a8:	bl	17894 <__assert_fail@plt+0x4de4>
   164ac:	ldr	r0, [r4]
   164b0:	mov	r1, #1
   164b4:	bl	177f8 <__assert_fail@plt+0x4d48>
   164b8:	ldrb	r0, [r5, #44]	; 0x2c
   164bc:	tst	r0, #9
   164c0:	bne	16534 <__assert_fail@plt+0x3a84>
   164c4:	ldr	r0, [r4]
   164c8:	sub	sp, fp, #28
   164cc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   164d0:	movw	r4, #58704	; 0xe550
   164d4:	movw	r0, #34534	; 0x86e6
   164d8:	mov	r1, #16
   164dc:	mov	r2, #1
   164e0:	movt	r4, #5
   164e4:	movt	r0, #4
   164e8:	ldr	r3, [r4]
   164ec:	bl	12618 <fwrite@plt>
   164f0:	ldr	r0, [r4]
   164f4:	ldr	r1, [r7]
   164f8:	bl	15200 <__assert_fail@plt+0x2750>
   164fc:	b	16438 <__assert_fail@plt+0x3988>
   16500:	movw	r6, #58704	; 0xe550
   16504:	movw	r0, #36030	; 0x8cbe
   16508:	mov	r1, #11
   1650c:	mov	r2, #1
   16510:	movt	r6, #5
   16514:	movt	r0, #4
   16518:	ldr	r3, [r6]
   1651c:	bl	12618 <fwrite@plt>
   16520:	ldr	r0, [r6]
   16524:	ldr	r1, [r4]
   16528:	mov	r2, #0
   1652c:	bl	16a14 <__assert_fail@plt+0x3f64>
   16530:	b	16488 <__assert_fail@plt+0x39d8>
   16534:	movw	r5, #58704	; 0xe550
   16538:	movw	r0, #34610	; 0x8732
   1653c:	mov	r1, #21
   16540:	mov	r2, #1
   16544:	movt	r5, #5
   16548:	movt	r0, #4
   1654c:	ldr	r3, [r5]
   16550:	bl	12618 <fwrite@plt>
   16554:	ldr	r0, [r5]
   16558:	ldr	r1, [r4]
   1655c:	mov	r2, #0
   16560:	bl	16a14 <__assert_fail@plt+0x3f64>
   16564:	ldr	r3, [r5]
   16568:	movw	r0, #34632	; 0x8748
   1656c:	mov	r1, #24
   16570:	mov	r2, #1
   16574:	movt	r0, #4
   16578:	bl	12618 <fwrite@plt>
   1657c:	ldr	r0, [r5]
   16580:	ldr	r1, [r4]
   16584:	bl	152b8 <__assert_fail@plt+0x2808>
   16588:	ldr	r1, [r5]
   1658c:	mov	r0, #10
   16590:	bl	12948 <fputc@plt>
   16594:	b	164c4 <__assert_fail@plt+0x3a14>
   16598:	movw	r1, #34342	; 0x8626
   1659c:	mov	r0, #0
   165a0:	mov	r2, #5
   165a4:	movt	r1, #4
   165a8:	bl	12564 <dcgettext@plt>
   165ac:	mov	r2, r0
   165b0:	ldr	r0, [sp, #16]
   165b4:	mov	r1, #0
   165b8:	ldr	r3, [r4, r0, lsl #2]
   165bc:	mov	r0, #0
   165c0:	bl	1269c <error@plt>
   165c4:	ldr	r0, [sp, #16]
   165c8:	mov	r1, #0
   165cc:	ldr	r0, [r4, r0, lsl #2]
   165d0:	bl	128ac <access@plt>
   165d4:	cmp	r0, #0
   165d8:	bne	16608 <__assert_fail@plt+0x3b58>
   165dc:	movw	r1, #34378	; 0x864a
   165e0:	mov	r0, #0
   165e4:	mov	r2, #5
   165e8:	movt	r1, #4
   165ec:	bl	12564 <dcgettext@plt>
   165f0:	mov	r2, r0
   165f4:	ldr	r0, [sl]
   165f8:	mov	r1, #0
   165fc:	ldr	r3, [r0, #4]
   16600:	mov	r0, #0
   16604:	bl	1269c <error@plt>
   16608:	mov	r0, #1
   1660c:	bl	12780 <exit@plt>
   16610:	ldr	r0, [sp, #16]
   16614:	ldr	r1, [r4, r0, lsl #2]
   16618:	cmp	r1, #0
   1661c:	bne	16654 <__assert_fail@plt+0x3ba4>
   16620:	movw	r1, #34502	; 0x86c6
   16624:	movt	r1, #4
   16628:	b	16634 <__assert_fail@plt+0x3b84>
   1662c:	movw	r1, #34426	; 0x867a
   16630:	movt	r1, #4
   16634:	mov	r0, #0
   16638:	mov	r2, #5
   1663c:	bl	12564 <dcgettext@plt>
   16640:	mov	r2, r0
   16644:	mov	r0, #1
   16648:	mov	r1, #0
   1664c:	mov	r3, r6
   16650:	bl	1269c <error@plt>
   16654:	cmp	r0, r9
   16658:	ldreq	r0, [r5]
   1665c:	cmpeq	r0, #4
   16660:	beq	16694 <__assert_fail@plt+0x3be4>
   16664:	movw	r1, #34472	; 0x86a8
   16668:	mov	r0, #0
   1666c:	mov	r2, #5
   16670:	movt	r1, #4
   16674:	bl	12564 <dcgettext@plt>
   16678:	mov	r2, r0
   1667c:	ldr	r0, [sp, #16]
   16680:	ldr	r3, [r4, r0, lsl #2]
   16684:	str	r6, [sp]
   16688:	mov	r0, #1
   1668c:	mov	r1, #0
   16690:	bl	1269c <error@plt>
   16694:	movw	r1, #34449	; 0x8691
   16698:	movt	r1, #4
   1669c:	b	16634 <__assert_fail@plt+0x3b84>
   166a0:	movw	r0, #34224	; 0x85b0
   166a4:	movw	r1, #34050	; 0x8502
   166a8:	movw	r3, #34243	; 0x85c3
   166ac:	movw	r2, #1270	; 0x4f6
   166b0:	movt	r0, #4
   166b4:	b	166e4 <__assert_fail@plt+0x3c34>
   166b8:	movw	r0, #34302	; 0x85fe
   166bc:	movw	r1, #34050	; 0x8502
   166c0:	movw	r3, #34243	; 0x85c3
   166c4:	movw	r2, #1271	; 0x4f7
   166c8:	movt	r0, #4
   166cc:	b	166e4 <__assert_fail@plt+0x3c34>
   166d0:	movw	r0, #34322	; 0x8612
   166d4:	movw	r1, #34050	; 0x8502
   166d8:	movw	r3, #34243	; 0x85c3
   166dc:	movw	r2, #1272	; 0x4f8
   166e0:	movt	r0, #4
   166e4:	movt	r1, #4
   166e8:	movt	r3, #4
   166ec:	bl	12ab0 <__assert_fail@plt>
   166f0:	ldr	r1, [r0]
   166f4:	movw	r2, #15800	; 0x3db8
   166f8:	movt	r2, #1
   166fc:	cmp	r1, r2
   16700:	bne	16710 <__assert_fail@plt+0x3c60>
   16704:	movw	r1, #35440	; 0x8a70
   16708:	movt	r1, #4
   1670c:	b	16724 <__assert_fail@plt+0x3c74>
   16710:	ldr	r0, [r0, #4]
   16714:	cmp	r0, #0
   16718:	bne	16740 <__assert_fail@plt+0x3c90>
   1671c:	movw	r1, #34583	; 0x8717
   16720:	movt	r1, #4
   16724:	mov	r0, #0
   16728:	mov	r2, #5
   1672c:	bl	12564 <dcgettext@plt>
   16730:	mov	r2, r0
   16734:	mov	r0, #1
   16738:	mov	r1, #0
   1673c:	bl	1269c <error@plt>
   16740:	movw	r1, #34551	; 0x86f7
   16744:	mov	r0, #0
   16748:	mov	r2, #5
   1674c:	movt	r1, #4
   16750:	bl	12564 <dcgettext@plt>
   16754:	mov	r2, r0
   16758:	ldr	r0, [sp, #20]
   1675c:	ldr	r3, [r0, #4]
   16760:	b	16688 <__assert_fail@plt+0x3bd8>
   16764:	push	{r4, r5, r6, r7, fp, lr}
   16768:	add	fp, sp, #16
   1676c:	ldr	r4, [r0]
   16770:	cmp	r4, #0
   16774:	beq	168d0 <__assert_fail@plt+0x3e20>
   16778:	mov	r5, r0
   1677c:	ldr	r0, [r4, #8]
   16780:	cmp	r0, #5
   16784:	bhi	168f4 <__assert_fail@plt+0x3e44>
   16788:	mov	r6, r1
   1678c:	add	r1, pc, #0
   16790:	ldr	pc, [r1, r0, lsl #2]
   16794:	ldrdeq	r6, [r1], -r0
   16798:	andeq	r6, r1, ip, lsr #15
   1679c:			; <UNDEFINED> instruction: 0x000167b4
   167a0:	andeq	r6, r1, r8, lsl r9
   167a4:	andeq	r6, r1, r0, ror #15
   167a8:	andeq	r6, r1, r0, lsl #18
   167ac:	ldr	r2, [r4, #152]	; 0x98
   167b0:	b	16838 <__assert_fail@plt+0x3d88>
   167b4:	ldr	r0, [r4, #152]	; 0x98
   167b8:	mov	r1, #4
   167bc:	mov	r2, r4
   167c0:	str	r0, [r5]
   167c4:	mov	r0, r5
   167c8:	bl	16764 <__assert_fail@plt+0x3cb4>
   167cc:	str	r0, [r4, #160]	; 0xa0
   167d0:	ldr	r2, [r5]
   167d4:	cmp	r2, #0
   167d8:	bne	16844 <__assert_fail@plt+0x3d94>
   167dc:	b	168c8 <__assert_fail@plt+0x3e18>
   167e0:	ldr	r0, [r4, #152]	; 0x98
   167e4:	cmp	r0, #0
   167e8:	beq	16924 <__assert_fail@plt+0x3e74>
   167ec:	ldrb	r1, [r0, #33]	; 0x21
   167f0:	cmp	r1, #0
   167f4:	bne	16924 <__assert_fail@plt+0x3e74>
   167f8:	str	r0, [r5]
   167fc:	ldr	r0, [r0, #8]
   16800:	cmp	r0, #5
   16804:	beq	1699c <__assert_fail@plt+0x3eec>
   16808:	mov	r0, r5
   1680c:	mov	r1, #0
   16810:	mov	r2, r4
   16814:	bl	16764 <__assert_fail@plt+0x3cb4>
   16818:	mov	r4, r0
   1681c:	ldr	r0, [r5]
   16820:	cmp	r0, #0
   16824:	beq	16944 <__assert_fail@plt+0x3e94>
   16828:	ldr	r1, [r0, #8]
   1682c:	cmp	r1, #5
   16830:	bne	16944 <__assert_fail@plt+0x3e94>
   16834:	ldr	r2, [r0, #152]	; 0x98
   16838:	str	r2, [r5]
   1683c:	cmp	r2, #0
   16840:	beq	168c8 <__assert_fail@plt+0x3e18>
   16844:	ldr	r0, [r2, #12]
   16848:	cmp	r0, r6
   1684c:	ble	168c8 <__assert_fail@plt+0x3e18>
   16850:	ldr	r0, [r2, #8]
   16854:	cmp	r0, #5
   16858:	beq	168d0 <__assert_fail@plt+0x3e20>
   1685c:	ldr	r0, [r2, #12]
   16860:	cmp	r0, r6
   16864:	ble	168c0 <__assert_fail@plt+0x3e10>
   16868:	ldr	r0, [r2, #8]
   1686c:	cmp	r0, #5
   16870:	bhi	16950 <__assert_fail@plt+0x3ea0>
   16874:	add	r1, pc, #0
   16878:	ldr	pc, [r1, r0, lsl #2]
   1687c:	ldrdeq	r6, [r1], -r0
   16880:	ldrdeq	r6, [r1], -r0
   16884:	ldrdeq	r6, [r1], -r0
   16888:	muleq	r1, r4, r8
   1688c:	ldrdeq	r6, [r1], -r0
   16890:	andeq	r6, r1, r0, asr #17
   16894:	str	r4, [r2, #156]	; 0x9c
   16898:	ldr	r4, [r5]
   1689c:	ldr	r0, [r4, #152]	; 0x98
   168a0:	str	r0, [r5]
   168a4:	mov	r0, r5
   168a8:	ldrsh	r1, [r4, #12]
   168ac:	bl	16764 <__assert_fail@plt+0x3cb4>
   168b0:	str	r0, [r4, #160]	; 0xa0
   168b4:	ldr	r2, [r5]
   168b8:	cmp	r2, #0
   168bc:	bne	1685c <__assert_fail@plt+0x3dac>
   168c0:	cmp	r4, #0
   168c4:	beq	168d0 <__assert_fail@plt+0x3e20>
   168c8:	mov	r0, r4
   168cc:	pop	{r4, r5, r6, r7, fp, pc}
   168d0:	movw	r1, #35169	; 0x8961
   168d4:	movt	r1, #4
   168d8:	mov	r0, #0
   168dc:	mov	r2, #5
   168e0:	bl	12564 <dcgettext@plt>
   168e4:	mov	r2, r0
   168e8:	mov	r0, #1
   168ec:	mov	r1, #0
   168f0:	bl	1269c <error@plt>
   168f4:	movw	r1, #35708	; 0x8b7c
   168f8:	movt	r1, #4
   168fc:	b	168d8 <__assert_fail@plt+0x3e28>
   16900:	mov	r7, r2
   16904:	cmp	r2, #0
   16908:	bne	16974 <__assert_fail@plt+0x3ec4>
   1690c:	movw	r1, #35269	; 0x89c5
   16910:	movt	r1, #4
   16914:	b	1692c <__assert_fail@plt+0x3e7c>
   16918:	movw	r1, #35188	; 0x8974
   1691c:	movt	r1, #4
   16920:	b	1692c <__assert_fail@plt+0x3e7c>
   16924:	movw	r1, #35462	; 0x8a86
   16928:	movt	r1, #4
   1692c:	mov	r0, #0
   16930:	mov	r2, #5
   16934:	bl	12564 <dcgettext@plt>
   16938:	ldr	r3, [r4, #4]
   1693c:	mov	r2, r0
   16940:	b	16a08 <__assert_fail@plt+0x3f58>
   16944:	movw	r1, #35627	; 0x8b2b
   16948:	movt	r1, #4
   1694c:	b	168d8 <__assert_fail@plt+0x3e28>
   16950:	movw	r1, #35741	; 0x8b9d
   16954:	mov	r0, #0
   16958:	mov	r2, #5
   1695c:	movt	r1, #4
   16960:	bl	12564 <dcgettext@plt>
   16964:	mov	r2, r0
   16968:	ldr	r0, [r5]
   1696c:	ldr	r3, [r0, #8]
   16970:	b	16a08 <__assert_fail@plt+0x3f58>
   16974:	ldr	r1, [r7, #8]
   16978:	ldrb	r0, [r4, #33]	; 0x21
   1697c:	bic	r1, r1, #1
   16980:	cmp	r1, #2
   16984:	bne	169b4 <__assert_fail@plt+0x3f04>
   16988:	cmp	r0, #0
   1698c:	bne	169c8 <__assert_fail@plt+0x3f18>
   16990:	movw	r1, #35342	; 0x8a0e
   16994:	movt	r1, #4
   16998:	b	169d0 <__assert_fail@plt+0x3f20>
   1699c:	ldrb	r0, [r4, #33]	; 0x21
   169a0:	cmp	r0, #0
   169a4:	bne	169e8 <__assert_fail@plt+0x3f38>
   169a8:	movw	r1, #35572	; 0x8af4
   169ac:	movt	r1, #4
   169b0:	b	168d8 <__assert_fail@plt+0x3e28>
   169b4:	cmp	r0, #0
   169b8:	bne	169c8 <__assert_fail@plt+0x3f18>
   169bc:	movw	r1, #35420	; 0x8a5c
   169c0:	movt	r1, #4
   169c4:	b	168d8 <__assert_fail@plt+0x3e28>
   169c8:	movw	r1, #35386	; 0x8a3a
   169cc:	movt	r1, #4
   169d0:	mov	r0, #0
   169d4:	mov	r2, #5
   169d8:	bl	12564 <dcgettext@plt>
   169dc:	ldr	r3, [r7, #4]
   169e0:	mov	r2, r0
   169e4:	b	16a08 <__assert_fail@plt+0x3f58>
   169e8:	movw	r1, #35269	; 0x89c5
   169ec:	mov	r0, #0
   169f0:	mov	r2, #5
   169f4:	movt	r1, #4
   169f8:	bl	12564 <dcgettext@plt>
   169fc:	mov	r2, r0
   16a00:	ldr	r0, [r5]
   16a04:	ldr	r3, [r0, #4]
   16a08:	mov	r0, #1
   16a0c:	mov	r1, #0
   16a10:	bl	1269c <error@plt>
   16a14:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   16a18:	add	fp, sp, #28
   16a1c:	sub	sp, sp, #12
   16a20:	cmp	r1, #0
   16a24:	beq	16dc0 <__assert_fail@plt+0x4310>
   16a28:	movw	r7, #35013	; 0x88c5
   16a2c:	movw	r9, #58012	; 0xe29c
   16a30:	mov	sl, r2
   16a34:	mov	r6, r1
   16a38:	mov	r4, r0
   16a3c:	movt	r7, #4
   16a40:	movt	r9, #5
   16a44:	cmp	sl, #1
   16a48:	blt	16a6c <__assert_fail@plt+0x3fbc>
   16a4c:	mov	r5, sl
   16a50:	mov	r0, r7
   16a54:	mov	r1, #4
   16a58:	mov	r2, #1
   16a5c:	mov	r3, r4
   16a60:	bl	12618 <fwrite@plt>
   16a64:	subs	r5, r5, #1
   16a68:	bne	16a50 <__assert_fail@plt+0x3fa0>
   16a6c:	movw	r0, #35018	; 0x88ca
   16a70:	mov	r1, #6
   16a74:	mov	r2, #1
   16a78:	mov	r3, r4
   16a7c:	movt	r0, #4
   16a80:	bl	12618 <fwrite@plt>
   16a84:	ldr	r3, [r6, #36]	; 0x24
   16a88:	ldr	r2, [r6, #4]
   16a8c:	cmp	r3, #0
   16a90:	beq	16aa8 <__assert_fail@plt+0x3ff8>
   16a94:	movw	r1, #34034	; 0x84f2
   16a98:	mov	r0, r4
   16a9c:	movt	r1, #4
   16aa0:	bl	127f8 <fprintf@plt>
   16aa4:	b	16ab4 <__assert_fail@plt+0x4004>
   16aa8:	mov	r0, r2
   16aac:	mov	r1, r4
   16ab0:	bl	12a44 <fputs@plt>
   16ab4:	ldrh	r0, [r6, #8]
   16ab8:	movw	r2, #36728	; 0x8f78
   16abc:	mov	r1, #6
   16ac0:	movw	r5, #38711	; 0x9737
   16ac4:	movt	r2, #4
   16ac8:	movt	r5, #4
   16acc:	cmp	r0, #6
   16ad0:	movcs	r0, r1
   16ad4:	add	r0, r2, r0, lsl #3
   16ad8:	ldr	r2, [r0, #4]
   16adc:	ldrh	r0, [r6, #12]
   16ae0:	cmp	r0, #6
   16ae4:	movcs	r0, r1
   16ae8:	movw	r1, #36784	; 0x8fb0
   16aec:	movt	r1, #4
   16af0:	add	r0, r1, r0, lsl #3
   16af4:	movw	r1, #35025	; 0x88d1
   16af8:	movt	r1, #4
   16afc:	ldr	r3, [r0, #4]
   16b00:	mov	r0, r4
   16b04:	bl	127f8 <fprintf@plt>
   16b08:	ldr	r0, [r6, #24]
   16b0c:	ldr	r2, [r9]
   16b10:	mov	r1, #0
   16b14:	cmp	r2, r0
   16b18:	beq	16bc4 <__assert_fail@plt+0x4114>
   16b1c:	ldr	r2, [r9, #8]
   16b20:	mov	r1, #1
   16b24:	cmp	r2, r0
   16b28:	beq	16bc4 <__assert_fail@plt+0x4114>
   16b2c:	ldr	r2, [r9, #16]
   16b30:	mov	r1, #2
   16b34:	cmp	r2, r0
   16b38:	beq	16bc4 <__assert_fail@plt+0x4114>
   16b3c:	ldr	r2, [r9, #24]
   16b40:	mov	r1, #3
   16b44:	cmp	r2, r0
   16b48:	beq	16bc4 <__assert_fail@plt+0x4114>
   16b4c:	ldr	r2, [r9, #32]
   16b50:	mov	r1, #4
   16b54:	cmp	r2, r0
   16b58:	beq	16bc4 <__assert_fail@plt+0x4114>
   16b5c:	ldr	r2, [r9, #40]	; 0x28
   16b60:	mov	r1, #5
   16b64:	cmp	r2, r0
   16b68:	beq	16bc4 <__assert_fail@plt+0x4114>
   16b6c:	ldr	r2, [r9, #48]	; 0x30
   16b70:	mov	r1, #6
   16b74:	cmp	r2, r0
   16b78:	beq	16bc4 <__assert_fail@plt+0x4114>
   16b7c:	ldr	r2, [r9, #56]	; 0x38
   16b80:	mov	r1, #7
   16b84:	cmp	r2, r0
   16b88:	beq	16bc4 <__assert_fail@plt+0x4114>
   16b8c:	ldr	r2, [r9, #64]	; 0x40
   16b90:	mov	r1, #8
   16b94:	cmp	r2, r0
   16b98:	beq	16bc4 <__assert_fail@plt+0x4114>
   16b9c:	ldr	r2, [r9, #72]	; 0x48
   16ba0:	mov	r1, #9
   16ba4:	cmp	r2, r0
   16ba8:	beq	16bc4 <__assert_fail@plt+0x4114>
   16bac:	ldr	r2, [r9, #80]	; 0x50
   16bb0:	mov	r1, #10
   16bb4:	cmp	r2, r0
   16bb8:	movw	r2, #36692	; 0x8f54
   16bbc:	movt	r2, #4
   16bc0:	bne	16bcc <__assert_fail@plt+0x411c>
   16bc4:	add	r0, r9, r1, lsl #3
   16bc8:	ldr	r2, [r0, #4]
   16bcc:	vldr	s0, [r6, #28]
   16bd0:	ldrb	r0, [r6, #16]
   16bd4:	movw	r1, #35091	; 0x8913
   16bd8:	movt	r1, #4
   16bdc:	cmp	r0, #0
   16be0:	mov	r0, r5
   16be4:	vcvt.f64.f32	d16, s0
   16be8:	moveq	r0, r1
   16bec:	movw	r1, #35043	; 0x88e3
   16bf0:	movt	r1, #4
   16bf4:	str	r0, [sp, #8]
   16bf8:	mov	r0, r4
   16bfc:	vstr	d16, [sp]
   16c00:	bl	127f8 <fprintf@plt>
   16c04:	ldrb	r0, [r6, #18]
   16c08:	cmp	r0, #0
   16c0c:	bne	16c28 <__assert_fail@plt+0x4178>
   16c10:	ldrb	r0, [r6, #19]
   16c14:	cmp	r0, #0
   16c18:	bne	16c28 <__assert_fail@plt+0x4178>
   16c1c:	ldrb	r0, [r6, #20]
   16c20:	cmp	r0, #0
   16c24:	beq	16ccc <__assert_fail@plt+0x421c>
   16c28:	movw	r0, #35095	; 0x8917
   16c2c:	mov	r1, #6
   16c30:	mov	r2, #1
   16c34:	mov	r3, r4
   16c38:	movt	r0, #4
   16c3c:	bl	12618 <fwrite@plt>
   16c40:	ldrb	r0, [r6, #18]
   16c44:	cmp	r0, #0
   16c48:	beq	16c6c <__assert_fail@plt+0x41bc>
   16c4c:	movw	r0, #42840	; 0xa758
   16c50:	mov	r1, #4
   16c54:	mov	r2, #1
   16c58:	mov	r3, r4
   16c5c:	mov	r8, #1
   16c60:	movt	r0, #4
   16c64:	bl	12618 <fwrite@plt>
   16c68:	b	16c70 <__assert_fail@plt+0x41c0>
   16c6c:	mov	r8, #0
   16c70:	ldrb	r0, [r6, #20]
   16c74:	cmp	r0, #0
   16c78:	beq	16ca0 <__assert_fail@plt+0x41f0>
   16c7c:	movw	r1, #35102	; 0x891e
   16c80:	movw	r2, #35110	; 0x8926
   16c84:	cmp	r8, #0
   16c88:	mov	r0, r4
   16c8c:	movt	r1, #4
   16c90:	movt	r2, #4
   16c94:	moveq	r2, r5
   16c98:	bl	127f8 <fprintf@plt>
   16c9c:	mov	r8, #1
   16ca0:	ldrb	r0, [r6, #19]
   16ca4:	cmp	r0, #0
   16ca8:	beq	16ccc <__assert_fail@plt+0x421c>
   16cac:	movw	r1, #35112	; 0x8928
   16cb0:	movw	r2, #35110	; 0x8926
   16cb4:	cmp	r8, #0
   16cb8:	mov	r0, r4
   16cbc:	movt	r1, #4
   16cc0:	movt	r2, #4
   16cc4:	moveq	r2, r5
   16cc8:	bl	127f8 <fprintf@plt>
   16ccc:	mov	r0, #10
   16cd0:	mov	r1, r4
   16cd4:	bl	12948 <fputc@plt>
   16cd8:	cmp	sl, #1
   16cdc:	blt	16d00 <__assert_fail@plt+0x4250>
   16ce0:	mov	r5, sl
   16ce4:	mov	r0, r7
   16ce8:	mov	r1, #4
   16cec:	mov	r2, #1
   16cf0:	mov	r3, r4
   16cf4:	bl	12618 <fwrite@plt>
   16cf8:	subs	r5, r5, #1
   16cfc:	bne	16ce4 <__assert_fail@plt+0x4234>
   16d00:	ldr	r0, [r6, #156]	; 0x9c
   16d04:	cmp	r0, #0
   16d08:	beq	16d40 <__assert_fail@plt+0x4290>
   16d0c:	movw	r0, #35133	; 0x893d
   16d10:	mov	r1, #6
   16d14:	mov	r2, #1
   16d18:	mov	r3, r4
   16d1c:	movt	r0, #4
   16d20:	bl	12618 <fwrite@plt>
   16d24:	ldr	r1, [r6, #156]	; 0x9c
   16d28:	add	r2, sl, #1
   16d2c:	mov	r0, r4
   16d30:	bl	16a14 <__assert_fail@plt+0x3f64>
   16d34:	cmp	sl, #1
   16d38:	bge	16d6c <__assert_fail@plt+0x42bc>
   16d3c:	b	16d8c <__assert_fail@plt+0x42dc>
   16d40:	ldr	r0, [r6, #160]	; 0xa0
   16d44:	cmp	r0, #0
   16d48:	beq	16dd8 <__assert_fail@plt+0x4328>
   16d4c:	movw	r0, #35140	; 0x8944
   16d50:	mov	r1, #9
   16d54:	mov	r2, #1
   16d58:	mov	r3, r4
   16d5c:	movt	r0, #4
   16d60:	bl	12618 <fwrite@plt>
   16d64:	cmp	sl, #1
   16d68:	blt	16d8c <__assert_fail@plt+0x42dc>
   16d6c:	mov	r5, sl
   16d70:	mov	r0, r7
   16d74:	mov	r1, #4
   16d78:	mov	r2, #1
   16d7c:	mov	r3, r4
   16d80:	bl	12618 <fwrite@plt>
   16d84:	subs	r5, r5, #1
   16d88:	bne	16d70 <__assert_fail@plt+0x42c0>
   16d8c:	ldr	r0, [r6, #160]	; 0xa0
   16d90:	cmp	r0, #0
   16d94:	beq	16dc8 <__assert_fail@plt+0x4318>
   16d98:	movw	r0, #35150	; 0x894e
   16d9c:	mov	r1, #7
   16da0:	mov	r2, #1
   16da4:	mov	r3, r4
   16da8:	movt	r0, #4
   16dac:	bl	12618 <fwrite@plt>
   16db0:	ldr	r6, [r6, #160]	; 0xa0
   16db4:	add	sl, sl, #1
   16db8:	cmp	r6, #0
   16dbc:	bne	16a44 <__assert_fail@plt+0x3f94>
   16dc0:	sub	sp, fp, #28
   16dc4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   16dc8:	movw	r0, #35158	; 0x8956
   16dcc:	mov	r1, #10
   16dd0:	movt	r0, #4
   16dd4:	b	16de4 <__assert_fail@plt+0x4334>
   16dd8:	movw	r0, #35119	; 0x892f
   16ddc:	mov	r1, #13
   16de0:	movt	r0, #4
   16de4:	mov	r2, #1
   16de8:	mov	r3, r4
   16dec:	sub	sp, fp, #28
   16df0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   16df4:	b	12618 <fwrite@plt>
   16df8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   16dfc:	add	fp, sp, #28
   16e00:	sub	sp, sp, #20
   16e04:	cmp	r0, #0
   16e08:	beq	17008 <__assert_fail@plt+0x4558>
   16e0c:	mov	sl, r0
   16e10:	ldr	r0, [r0, #160]	; 0xa0
   16e14:	bl	16df8 <__assert_fail@plt+0x4348>
   16e18:	ldr	r0, [sl, #156]	; 0x9c
   16e1c:	bl	16df8 <__assert_fail@plt+0x4348>
   16e20:	ldrb	r0, [sl, #18]
   16e24:	mov	r2, #3
   16e28:	cmp	r0, #0
   16e2c:	bne	16e48 <__assert_fail@plt+0x4398>
   16e30:	ldrb	r0, [sl, #20]
   16e34:	mov	r2, #1
   16e38:	cmp	r0, #0
   16e3c:	bne	16e48 <__assert_fail@plt+0x4398>
   16e40:	ldrb	r0, [sl, #19]
   16e44:	lsl	r2, r0, #1
   16e48:	ldr	r4, [sl]
   16e4c:	movw	r0, #16800	; 0x41a0
   16e50:	movt	r0, #1
   16e54:	cmp	r4, r0
   16e58:	movwne	r0, #16804	; 0x41a4
   16e5c:	movtne	r0, #1
   16e60:	cmpne	r4, r0
   16e64:	bne	16e7c <__assert_fail@plt+0x43cc>
   16e68:	ldrb	r1, [sl, #40]	; 0x28
   16e6c:	mov	r0, #7
   16e70:	cmp	r1, #0
   16e74:	movweq	r0, #8
   16e78:	b	16ffc <__assert_fail@plt+0x454c>
   16e7c:	movw	r0, #42680	; 0xa6b8
   16e80:	movt	r0, #1
   16e84:	cmp	r4, r0
   16e88:	beq	16fa0 <__assert_fail@plt+0x44f0>
   16e8c:	movw	r8, #58768	; 0xe590
   16e90:	str	r2, [sp, #4]
   16e94:	movt	r8, #5
   16e98:	ldrb	r0, [r8]
   16e9c:	cmp	r0, #0
   16ea0:	bne	16f34 <__assert_fail@plt+0x4484>
   16ea4:	movw	r3, #31980	; 0x7cec
   16ea8:	movw	r0, #58100	; 0xe2f4
   16eac:	mov	r1, #59	; 0x3b
   16eb0:	mov	r2, #8
   16eb4:	movt	r3, #1
   16eb8:	movt	r0, #5
   16ebc:	bl	129cc <qsort@plt>
   16ec0:	mov	r4, #0
   16ec4:	add	r9, sp, #16
   16ec8:	add	r7, sp, #12
   16ecc:	movw	r0, #58100	; 0xe2f4
   16ed0:	mov	r1, r7
   16ed4:	mov	r2, #4
   16ed8:	movt	r0, #5
   16edc:	ldr	r5, [r0, r4, lsl #3]!
   16ee0:	ldr	r6, [r0, #8]
   16ee4:	mov	r0, r9
   16ee8:	str	r5, [sp, #12]
   16eec:	str	r6, [sp, #16]
   16ef0:	bl	12540 <memcmp@plt>
   16ef4:	cmp	r0, #0
   16ef8:	bmi	17010 <__assert_fail@plt+0x4560>
   16efc:	mov	r0, r9
   16f00:	mov	r1, r7
   16f04:	mov	r2, #4
   16f08:	str	r5, [sp, #16]
   16f0c:	str	r6, [sp, #12]
   16f10:	bl	12540 <memcmp@plt>
   16f14:	cmp	r0, #1
   16f18:	bge	17024 <__assert_fail@plt+0x4574>
   16f1c:	add	r4, r4, #1
   16f20:	cmp	r4, #58	; 0x3a
   16f24:	bne	16ecc <__assert_fail@plt+0x441c>
   16f28:	mov	r0, #1
   16f2c:	strb	r0, [r8]
   16f30:	ldr	r4, [sl]
   16f34:	mov	r9, #59	; 0x3b
   16f38:	mov	r8, #0
   16f3c:	add	r6, sp, #16
   16f40:	add	r7, sp, #12
   16f44:	str	sl, [sp, #8]
   16f48:	b	16f58 <__assert_fail@plt+0x44a8>
   16f4c:	mov	r9, r5
   16f50:	cmp	r8, r9
   16f54:	bcs	16fc8 <__assert_fail@plt+0x4518>
   16f58:	movw	sl, #58100	; 0xe2f4
   16f5c:	add	r0, r9, r8
   16f60:	mov	r1, r7
   16f64:	mov	r2, #4
   16f68:	str	r4, [sp, #16]
   16f6c:	movt	sl, #5
   16f70:	lsr	r5, r0, #1
   16f74:	ldr	r0, [sl, r5, lsl #3]!
   16f78:	str	r0, [sp, #12]
   16f7c:	mov	r0, r6
   16f80:	bl	12540 <memcmp@plt>
   16f84:	cmp	r0, #0
   16f88:	bmi	16f4c <__assert_fail@plt+0x449c>
   16f8c:	beq	16fa8 <__assert_fail@plt+0x44f8>
   16f90:	add	r8, r5, #1
   16f94:	cmp	r8, r9
   16f98:	bcc	16f58 <__assert_fail@plt+0x44a8>
   16f9c:	b	16fc8 <__assert_fail@plt+0x4518>
   16fa0:	ldr	r0, [sl, #24]
   16fa4:	b	16ffc <__assert_fail@plt+0x454c>
   16fa8:	cmp	sl, #0
   16fac:	beq	16fc8 <__assert_fail@plt+0x4518>
   16fb0:	movw	r0, #58100	; 0xe2f4
   16fb4:	ldr	sl, [sp, #8]
   16fb8:	movt	r0, #5
   16fbc:	add	r0, r0, r5, lsl #3
   16fc0:	ldr	r0, [r0, #4]
   16fc4:	b	16ff8 <__assert_fail@plt+0x4548>
   16fc8:	movw	r1, #35815	; 0x8be7
   16fcc:	mov	r0, #0
   16fd0:	mov	r2, #5
   16fd4:	movt	r1, #4
   16fd8:	bl	12564 <dcgettext@plt>
   16fdc:	ldr	sl, [sp, #8]
   16fe0:	mov	r2, r0
   16fe4:	mov	r0, #0
   16fe8:	mov	r1, #0
   16fec:	ldr	r3, [sl, #4]
   16ff0:	bl	1269c <error@plt>
   16ff4:	mov	r0, #10
   16ff8:	ldr	r2, [sp, #4]
   16ffc:	cmp	r0, r2
   17000:	movhi	r2, r0
   17004:	str	r2, [sl, #24]
   17008:	sub	sp, fp, #28
   1700c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   17010:	movw	r2, #35779	; 0x8bc3
   17014:	mov	r0, #1
   17018:	mov	r1, #0
   1701c:	movt	r2, #4
   17020:	bl	1269c <error@plt>
   17024:	movw	r0, #35927	; 0x8c57
   17028:	movw	r1, #34050	; 0x8502
   1702c:	movw	r3, #35939	; 0x8c63
   17030:	movw	r2, #1013	; 0x3f5
   17034:	movt	r0, #4
   17038:	movt	r1, #4
   1703c:	movt	r3, #4
   17040:	bl	12ab0 <__assert_fail@plt>
   17044:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   17048:	add	fp, sp, #28
   1704c:	sub	sp, sp, #4
   17050:	vpush	{d8-d9}
   17054:	sub	sp, sp, #120	; 0x78
   17058:	mov	r5, #0
   1705c:	cmp	r0, #0
   17060:	str	r5, [fp, #-52]	; 0xffffffcc
   17064:	str	r5, [fp, #-56]	; 0xffffffc8
   17068:	str	r5, [fp, #-60]	; 0xffffffc4
   1706c:	str	r5, [fp, #-64]	; 0xffffffc0
   17070:	beq	1778c <__assert_fail@plt+0x4cdc>
   17074:	ldr	r4, [r0]
   17078:	mov	r9, r0
   1707c:	cmp	r4, #0
   17080:	beq	1778c <__assert_fail@plt+0x4cdc>
   17084:	vmov.i32	q8, #0	; 0x00000000
   17088:	add	r2, sp, #16
   1708c:	mov	r0, #84	; 0x54
   17090:	mov	r1, r2
   17094:	vst1.64	{d16-d17}, [r1], r0
   17098:	mov	r0, #0
   1709c:	str	r0, [r1]
   170a0:	add	r1, r2, #64	; 0x40
   170a4:	str	r0, [sp, #96]	; 0x60
   170a8:	mov	r0, r4
   170ac:	vst1.64	{d16-d17}, [r1]
   170b0:	add	r1, r2, #48	; 0x30
   170b4:	vst1.64	{d16-d17}, [r1]
   170b8:	add	r1, r2, #32
   170bc:	vst1.64	{d16-d17}, [r1]
   170c0:	add	r1, r2, #16
   170c4:	vst1.64	{d16-d17}, [r1]
   170c8:	ldr	r1, [r0, #156]!	; 0x9c
   170cc:	cmp	r1, #0
   170d0:	beq	170f8 <__assert_fail@plt+0x4648>
   170d4:	mov	r5, r0
   170d8:	mov	r0, r1
   170dc:	mov	r2, r4
   170e0:	mov	r4, r1
   170e4:	ldr	r1, [r0, #156]!	; 0x9c
   170e8:	cmp	r1, #0
   170ec:	bne	170d4 <__assert_fail@plt+0x4624>
   170f0:	ldr	r7, [r2, #12]
   170f4:	b	17100 <__assert_fail@plt+0x4650>
   170f8:	mov	r7, #3
   170fc:	mov	r5, r9
   17100:	ldr	r0, [r4, #8]
   17104:	cmp	r0, #3
   17108:	beq	171b4 <__assert_fail@plt+0x4704>
   1710c:	mov	r0, #176	; 0xb0
   17110:	bl	2e430 <__assert_fail@plt+0x1b980>
   17114:	mov	r1, #0
   17118:	cmp	r7, #3
   1711c:	mov	r2, #3
   17120:	str	r1, [r0, #24]
   17124:	str	r2, [r0, #8]
   17128:	str	r7, [r0, #12]
   1712c:	beq	17160 <__assert_fail@plt+0x46b0>
   17130:	cmp	r7, #2
   17134:	beq	17174 <__assert_fail@plt+0x46c4>
   17138:	cmp	r7, #1
   1713c:	bne	171ac <__assert_fail@plt+0x46fc>
   17140:	movw	r1, #35110	; 0x8926
   17144:	movw	r2, #15960	; 0x3e58
   17148:	vmov.f32	s0, #112	; 0x3f800000  1.0
   1714c:	movt	r2, #1
   17150:	movt	r1, #4
   17154:	str	r2, [r0]
   17158:	str	r1, [r0, #4]
   1715c:	b	171a8 <__assert_fail@plt+0x46f8>
   17160:	movw	r1, #34893	; 0x884d
   17164:	movw	r2, #15568	; 0x3cd0
   17168:	movt	r1, #4
   1716c:	movt	r2, #1
   17170:	b	17184 <__assert_fail@plt+0x46d4>
   17174:	movw	r1, #36137	; 0x8d29
   17178:	movw	r2, #18876	; 0x49bc
   1717c:	movt	r1, #4
   17180:	movt	r2, #1
   17184:	str	r2, [r0]
   17188:	str	r1, [r0, #4]
   1718c:	vldr	s0, [pc, #976]	; 17564 <__assert_fail@plt+0x4ab4>
   17190:	vmov.f32	s4, #112	; 0x3f800000  1.0
   17194:	vldr	s2, [r4, #28]
   17198:	vmax.f32	d0, d1, d0
   1719c:	vcmpe.f32	s2, s4
   171a0:	vmrs	APSR_nzcv, fpscr
   171a4:	vselgt.f32	s0, s4, s0
   171a8:	vstr	s0, [r0, #28]
   171ac:	str	r4, [r0, #160]	; 0xa0
   171b0:	str	r0, [r5]
   171b4:	movw	r0, #61044	; 0xee74
   171b8:	movt	r0, #5
   171bc:	ldrb	r0, [r0, #44]	; 0x2c
   171c0:	tst	r0, #9
   171c4:	bne	177a0 <__assert_fail@plt+0x4cf0>
   171c8:	ldr	r4, [r9]
   171cc:	add	r5, sp, #16
   171d0:	cmp	r4, #0
   171d4:	beq	17758 <__assert_fail@plt+0x4ca8>
   171d8:	ldr	r0, [r4, #8]
   171dc:	vldr	s16, [pc, #896]	; 17564 <__assert_fail@plt+0x4ab4>
   171e0:	mov	ip, #0
   171e4:	vmov.f32	s18, #112	; 0x3f800000  1.0
   171e8:	mov	lr, #0
   171ec:	mov	r7, #0
   171f0:	cmp	r0, #3
   171f4:	mov	r0, #0
   171f8:	ldreq	ip, [r4, #12]
   171fc:	str	r0, [sp, #4]
   17200:	str	ip, [sp, #12]
   17204:	mov	sl, lr
   17208:	mov	r6, r7
   1720c:	ldr	r0, [r4, #8]
   17210:	cmp	r0, #3
   17214:	bne	17224 <__assert_fail@plt+0x4774>
   17218:	ldr	r0, [r4, #12]
   1721c:	cmp	r0, ip
   17220:	bne	1722c <__assert_fail@plt+0x477c>
   17224:	mov	r8, r4
   17228:	b	1731c <__assert_fail@plt+0x486c>
   1722c:	mov	r0, #176	; 0xb0
   17230:	str	sl, [sp, #8]
   17234:	mov	sl, r9
   17238:	mov	r9, r5
   1723c:	mov	r5, r6
   17240:	mov	r6, r7
   17244:	mov	r7, lr
   17248:	bl	2e430 <__assert_fail@plt+0x1b980>
   1724c:	ldr	ip, [sp, #12]
   17250:	mov	r8, r0
   17254:	mov	r0, #0
   17258:	str	r0, [r8, #24]
   1725c:	mov	r0, #3
   17260:	str	r0, [r8, #8]
   17264:	cmp	ip, #3
   17268:	str	ip, [r8, #12]
   1726c:	beq	172cc <__assert_fail@plt+0x481c>
   17270:	mov	lr, r7
   17274:	mov	r7, r6
   17278:	cmp	ip, #2
   1727c:	mov	r6, r5
   17280:	beq	172b8 <__assert_fail@plt+0x4808>
   17284:	mov	r5, r9
   17288:	mov	r9, sl
   1728c:	ldr	sl, [sp, #8]
   17290:	cmp	ip, #1
   17294:	bne	17314 <__assert_fail@plt+0x4864>
   17298:	movw	r0, #35110	; 0x8926
   1729c:	movw	r1, #15960	; 0x3e58
   172a0:	vmov.f32	s0, s18
   172a4:	movt	r1, #1
   172a8:	movt	r0, #4
   172ac:	str	r1, [r8]
   172b0:	str	r0, [r8, #4]
   172b4:	b	17310 <__assert_fail@plt+0x4860>
   172b8:	movw	r0, #36137	; 0x8d29
   172bc:	movw	r1, #18876	; 0x49bc
   172c0:	movt	r1, #1
   172c4:	movt	r0, #4
   172c8:	b	172e8 <__assert_fail@plt+0x4838>
   172cc:	movw	r0, #34893	; 0x884d
   172d0:	movw	r1, #15568	; 0x3cd0
   172d4:	mov	lr, r7
   172d8:	mov	r7, r6
   172dc:	mov	r6, r5
   172e0:	movt	r1, #1
   172e4:	movt	r0, #4
   172e8:	str	r1, [r8]
   172ec:	str	r0, [r8, #4]
   172f0:	vldr	s0, [r4, #28]
   172f4:	vmax.f32	d1, d0, d8
   172f8:	vcmpe.f32	s0, s18
   172fc:	vmrs	APSR_nzcv, fpscr
   17300:	vselgt.f32	s0, s18, s2
   17304:	mov	r5, r9
   17308:	mov	r9, sl
   1730c:	ldr	sl, [sp, #8]
   17310:	vstr	s0, [r8, #28]
   17314:	str	r4, [r8, #160]	; 0xa0
   17318:	str	r8, [r9]
   1731c:	mov	r4, r8
   17320:	ldr	r1, [r4, #160]!	; 0xa0
   17324:	ldr	r0, [r1, #8]
   17328:	cmp	r0, #2
   1732c:	bcs	176c4 <__assert_fail@plt+0x4c14>
   17330:	ldrb	r0, [r1, #16]
   17334:	cmp	ip, #1
   17338:	beq	17744 <__assert_fail@plt+0x4c94>
   1733c:	cmp	r0, #0
   17340:	bne	17738 <__assert_fail@plt+0x4c88>
   17344:	ldr	r0, [r1]
   17348:	movw	r2, #17548	; 0x448c
   1734c:	movt	r2, #1
   17350:	cmp	r0, r2
   17354:	movwne	r2, #17348	; 0x43c4
   17358:	movtne	r2, #1
   1735c:	cmpne	r0, r2
   17360:	beq	17380 <__assert_fail@plt+0x48d0>
   17364:	movw	r2, #17960	; 0x4628
   17368:	movt	r2, #1
   1736c:	cmp	r0, r2
   17370:	movwne	r2, #18956	; 0x4a0c
   17374:	movtne	r2, #1
   17378:	cmpne	r0, r2
   1737c:	bne	173c0 <__assert_fail@plt+0x4910>
   17380:	movw	r0, #61044	; 0xee74
   17384:	movt	r0, #5
   17388:	ldrb	r0, [r0, #44]	; 0x2c
   1738c:	tst	r0, #8
   17390:	bne	174cc <__assert_fail@plt+0x4a1c>
   17394:	ldr	r0, [r8, #156]	; 0x9c
   17398:	cmp	sl, #0
   1739c:	moveq	sl, r8
   173a0:	str	r0, [r9]
   173a4:	ldr	r0, [fp, #-64]	; 0xffffffc0
   173a8:	str	r0, [r8, #156]	; 0x9c
   173ac:	str	r8, [fp, #-64]	; 0xffffffc0
   173b0:	ldr	r4, [r9]
   173b4:	cmp	r4, #0
   173b8:	bne	1720c <__assert_fail@plt+0x475c>
   173bc:	b	1776c <__assert_fail@plt+0x4cbc>
   173c0:	movw	r2, #61044	; 0xee74
   173c4:	movt	r2, #5
   173c8:	ldrh	r2, [r2, #68]	; 0x44
   173cc:	cmp	r2, #0
   173d0:	beq	17418 <__assert_fail@plt+0x4968>
   173d4:	movw	r3, #18876	; 0x49bc
   173d8:	movt	r3, #1
   173dc:	cmp	r0, r3
   173e0:	movwne	r3, #15960	; 0x3e58
   173e4:	movtne	r3, #1
   173e8:	cmpne	r0, r3
   173ec:	beq	17418 <__assert_fail@plt+0x4968>
   173f0:	movw	r3, #15568	; 0x3cd0
   173f4:	movt	r3, #1
   173f8:	cmp	r0, r3
   173fc:	movwne	r3, #18024	; 0x4668
   17400:	movtne	r3, #1
   17404:	cmpne	r0, r3
   17408:	beq	17418 <__assert_fail@plt+0x4968>
   1740c:	ldr	r3, [r1, #24]
   17410:	cmp	r3, #0
   17414:	beq	17380 <__assert_fail@plt+0x48d0>
   17418:	movw	r3, #19504	; 0x4c30
   1741c:	movt	r3, #1
   17420:	cmp	r0, r3
   17424:	beq	17460 <__assert_fail@plt+0x49b0>
   17428:	mov	r0, #0
   1742c:	cmp	r2, #2
   17430:	bcc	1773c <__assert_fail@plt+0x4c8c>
   17434:	ldr	r3, [r1, #24]
   17438:	sub	r5, r3, #1
   1743c:	cmp	r5, #1
   17440:	bhi	17480 <__assert_fail@plt+0x49d0>
   17444:	cmp	r2, #2
   17448:	add	r5, sp, #16
   1744c:	bhi	1748c <__assert_fail@plt+0x49dc>
   17450:	ldrb	r1, [r1, #18]
   17454:	cmp	r1, #0
   17458:	beq	1748c <__assert_fail@plt+0x49dc>
   1745c:	b	1773c <__assert_fail@plt+0x4c8c>
   17460:	ldr	r0, [r8, #156]	; 0x9c
   17464:	cmp	r6, #0
   17468:	moveq	r6, r8
   1746c:	str	r0, [r9]
   17470:	ldr	r0, [fp, #-56]	; 0xffffffc8
   17474:	str	r0, [r8, #156]	; 0x9c
   17478:	str	r8, [fp, #-56]	; 0xffffffc8
   1747c:	b	173b0 <__assert_fail@plt+0x4900>
   17480:	cmp	r2, #3
   17484:	add	r5, sp, #16
   17488:	bcc	1773c <__assert_fail@plt+0x4c8c>
   1748c:	movw	r0, #61044	; 0xee74
   17490:	movt	r0, #5
   17494:	ldrb	r0, [r0, #44]	; 0x2c
   17498:	tst	r0, #8
   1749c:	bne	17568 <__assert_fail@plt+0x4ab8>
   174a0:	ldr	r0, [r8, #156]	; 0x9c
   174a4:	str	r0, [r9]
   174a8:	ldr	r0, [r5, r3, lsl #3]
   174ac:	str	r0, [r8, #156]	; 0x9c
   174b0:	add	r0, r5, r3, lsl #3
   174b4:	str	r8, [r5, r3, lsl #3]
   174b8:	ldr	r1, [r0, #4]
   174bc:	cmp	r1, #0
   174c0:	orreq	r0, r0, #4
   174c4:	streq	r8, [r0]
   174c8:	b	173b0 <__assert_fail@plt+0x4900>
   174cc:	movw	r0, #61044	; 0xee74
   174d0:	str	r6, [sp, #8]
   174d4:	movw	r6, #58704	; 0xe550
   174d8:	movw	r1, #36042	; 0x8cca
   174dc:	str	r7, [sp]
   174e0:	mov	r7, lr
   174e4:	movt	r0, #5
   174e8:	movt	r6, #5
   174ec:	movt	r1, #4
   174f0:	ldrh	r2, [r0, #68]	; 0x44
   174f4:	ldr	r0, [r6]
   174f8:	bl	127f8 <fprintf@plt>
   174fc:	ldr	r0, [r4]
   17500:	ldr	r1, [r6]
   17504:	ldr	r3, [r0, #36]	; 0x24
   17508:	ldr	r2, [r0, #4]
   1750c:	cmp	r3, #0
   17510:	bne	17520 <__assert_fail@plt+0x4a70>
   17514:	mov	r0, r2
   17518:	bl	12a44 <fputs@plt>
   1751c:	b	17530 <__assert_fail@plt+0x4a80>
   17520:	mov	r0, r1
   17524:	movw	r1, #34034	; 0x84f2
   17528:	movt	r1, #4
   1752c:	bl	127f8 <fprintf@plt>
   17530:	movw	r0, #58704	; 0xe550
   17534:	mov	r1, #16
   17538:	mov	r2, #1
   1753c:	movt	r0, #5
   17540:	ldr	r3, [r0]
   17544:	movw	r0, #36075	; 0x8ceb
   17548:	movt	r0, #4
   1754c:	bl	12618 <fwrite@plt>
   17550:	mov	lr, r7
   17554:	ldr	r7, [sp]
   17558:	ldr	ip, [sp, #12]
   1755c:	ldr	r6, [sp, #8]
   17560:	b	17394 <__assert_fail@plt+0x48e4>
   17564:	andeq	r0, r0, r0
   17568:	str	r6, [sp, #8]
   1756c:	movw	r6, #58704	; 0xe550
   17570:	movw	r1, #36092	; 0x8cfc
   17574:	str	r7, [sp]
   17578:	mov	r7, lr
   1757c:	movt	r6, #5
   17580:	movt	r1, #4
   17584:	ldr	r0, [r6]
   17588:	bl	127f8 <fprintf@plt>
   1758c:	ldr	r0, [r4]
   17590:	ldr	r1, [r6]
   17594:	ldr	r3, [r0, #36]	; 0x24
   17598:	ldr	r2, [r0, #4]
   1759c:	cmp	r3, #0
   175a0:	bne	175b0 <__assert_fail@plt+0x4b00>
   175a4:	mov	r0, r2
   175a8:	bl	12a44 <fputs@plt>
   175ac:	b	175c0 <__assert_fail@plt+0x4b10>
   175b0:	mov	r0, r1
   175b4:	movw	r1, #34034	; 0x84f2
   175b8:	movt	r1, #4
   175bc:	bl	127f8 <fprintf@plt>
   175c0:	ldr	r1, [r4]
   175c4:	movw	ip, #58012	; 0xe29c
   175c8:	movw	r0, #58704	; 0xe550
   175cc:	mov	r3, #0
   175d0:	movt	ip, #5
   175d4:	movt	r0, #5
   175d8:	ldr	r2, [ip]
   175dc:	ldr	r0, [r0]
   175e0:	ldr	r1, [r1, #24]
   175e4:	cmp	r2, r1
   175e8:	beq	17694 <__assert_fail@plt+0x4be4>
   175ec:	ldr	r2, [ip, #8]
   175f0:	mov	r3, #1
   175f4:	cmp	r2, r1
   175f8:	beq	17694 <__assert_fail@plt+0x4be4>
   175fc:	ldr	r2, [ip, #16]
   17600:	mov	r3, #2
   17604:	cmp	r2, r1
   17608:	beq	17694 <__assert_fail@plt+0x4be4>
   1760c:	ldr	r2, [ip, #24]
   17610:	mov	r3, #3
   17614:	cmp	r2, r1
   17618:	beq	17694 <__assert_fail@plt+0x4be4>
   1761c:	ldr	r2, [ip, #32]
   17620:	mov	r3, #4
   17624:	cmp	r2, r1
   17628:	beq	17694 <__assert_fail@plt+0x4be4>
   1762c:	ldr	r2, [ip, #40]	; 0x28
   17630:	mov	r3, #5
   17634:	cmp	r2, r1
   17638:	beq	17694 <__assert_fail@plt+0x4be4>
   1763c:	ldr	r2, [ip, #48]	; 0x30
   17640:	mov	r3, #6
   17644:	cmp	r2, r1
   17648:	beq	17694 <__assert_fail@plt+0x4be4>
   1764c:	ldr	r2, [ip, #56]	; 0x38
   17650:	mov	r3, #7
   17654:	cmp	r2, r1
   17658:	beq	17694 <__assert_fail@plt+0x4be4>
   1765c:	ldr	r2, [ip, #64]	; 0x40
   17660:	mov	r3, #8
   17664:	cmp	r2, r1
   17668:	beq	17694 <__assert_fail@plt+0x4be4>
   1766c:	ldr	r2, [ip, #72]	; 0x48
   17670:	mov	r3, #9
   17674:	cmp	r2, r1
   17678:	beq	17694 <__assert_fail@plt+0x4be4>
   1767c:	ldr	r2, [ip, #80]	; 0x50
   17680:	mov	r3, #10
   17684:	cmp	r2, r1
   17688:	movw	r2, #36692	; 0x8f54
   1768c:	movt	r2, #4
   17690:	bne	1769c <__assert_fail@plt+0x4bec>
   17694:	add	r1, ip, r3, lsl #3
   17698:	ldr	r2, [r1, #4]
   1769c:	movw	r1, #36122	; 0x8d1a
   176a0:	movt	r1, #4
   176a4:	bl	127f8 <fprintf@plt>
   176a8:	ldr	r0, [r4]
   176ac:	mov	lr, r7
   176b0:	ldr	r7, [sp]
   176b4:	ldr	ip, [sp, #12]
   176b8:	ldr	r6, [sp, #8]
   176bc:	ldr	r3, [r0, #24]
   176c0:	b	174a0 <__assert_fail@plt+0x49f0>
   176c4:	beq	176d8 <__assert_fail@plt+0x4c28>
   176c8:	cmp	r0, #3
   176cc:	bne	177d4 <__assert_fail@plt+0x4d24>
   176d0:	mov	r0, r4
   176d4:	b	176dc <__assert_fail@plt+0x4c2c>
   176d8:	add	r0, r1, #160	; 0xa0
   176dc:	str	sl, [fp, #-60]	; 0xffffffc4
   176e0:	str	r6, [fp, #-52]	; 0xffffffcc
   176e4:	bl	17044 <__assert_fail@plt+0x4594>
   176e8:	ldr	r1, [r4]
   176ec:	ldr	ip, [sp, #12]
   176f0:	strb	r0, [r1, #16]
   176f4:	cmp	r0, #0
   176f8:	beq	1771c <__assert_fail@plt+0x4c6c>
   176fc:	mov	r0, r5
   17700:	sub	r1, fp, #64	; 0x40
   17704:	sub	r2, fp, #56	; 0x38
   17708:	mov	r3, r9
   1770c:	bl	17d20 <__assert_fail@plt+0x5270>
   17710:	ldr	ip, [sp, #12]
   17714:	mov	r0, #1
   17718:	str	r0, [sp, #4]
   1771c:	ldr	r4, [r8, #156]!	; 0x9c
   17720:	cmp	r4, #0
   17724:	beq	17760 <__assert_fail@plt+0x4cb0>
   17728:	ldr	lr, [fp, #-60]	; 0xffffffc4
   1772c:	ldr	r7, [fp, #-52]	; 0xffffffcc
   17730:	mov	r9, r8
   17734:	b	17204 <__assert_fail@plt+0x4754>
   17738:	mov	r0, #1
   1773c:	mov	lr, sl
   17740:	mov	r7, r6
   17744:	str	lr, [fp, #-60]	; 0xffffffc4
   17748:	str	r7, [fp, #-52]	; 0xffffffcc
   1774c:	cmp	r0, #0
   17750:	bne	176fc <__assert_fail@plt+0x4c4c>
   17754:	b	1771c <__assert_fail@plt+0x4c6c>
   17758:	mov	r5, #0
   1775c:	b	17778 <__assert_fail@plt+0x4cc8>
   17760:	ldr	r5, [sp, #4]
   17764:	mov	r9, r8
   17768:	b	17778 <__assert_fail@plt+0x4cc8>
   1776c:	ldr	r5, [sp, #4]
   17770:	str	sl, [fp, #-60]	; 0xffffffc4
   17774:	str	r6, [fp, #-52]	; 0xffffffcc
   17778:	add	r0, sp, #16
   1777c:	sub	r1, fp, #64	; 0x40
   17780:	sub	r2, fp, #56	; 0x38
   17784:	mov	r3, r9
   17788:	bl	17d20 <__assert_fail@plt+0x5270>
   1778c:	and	r0, r5, #1
   17790:	sub	sp, fp, #48	; 0x30
   17794:	vpop	{d8-d9}
   17798:	add	sp, sp, #4
   1779c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   177a0:	movw	r4, #58704	; 0xe550
   177a4:	movw	r0, #36019	; 0x8cb3
   177a8:	mov	r1, #22
   177ac:	mov	r2, #1
   177b0:	movt	r4, #5
   177b4:	movt	r0, #4
   177b8:	ldr	r3, [r4]
   177bc:	bl	12618 <fwrite@plt>
   177c0:	ldr	r0, [r4]
   177c4:	ldr	r1, [r9]
   177c8:	mov	r2, #0
   177cc:	bl	16a14 <__assert_fail@plt+0x3f64>
   177d0:	b	171c8 <__assert_fail@plt+0x4718>
   177d4:	movw	r1, #35708	; 0x8b7c
   177d8:	mov	r0, #0
   177dc:	mov	r2, #5
   177e0:	movt	r1, #4
   177e4:	bl	12564 <dcgettext@plt>
   177e8:	mov	r2, r0
   177ec:	mov	r0, #1
   177f0:	mov	r1, #0
   177f4:	bl	1269c <error@plt>
   177f8:	push	{r4, sl, fp, lr}
   177fc:	add	fp, sp, #8
   17800:	mov	r4, r0
   17804:	tst	r1, #1
   17808:	beq	17834 <__assert_fail@plt+0x4d84>
   1780c:	b	17828 <__assert_fail@plt+0x4d78>
   17810:	ldr	r4, [r4, #160]	; 0xa0
   17814:	mov	r1, #0
   17818:	cmp	r4, #0
   1781c:	beq	17858 <__assert_fail@plt+0x4da8>
   17820:	tst	r1, #1
   17824:	beq	17834 <__assert_fail@plt+0x4d84>
   17828:	ldr	r0, [r4, #8]
   1782c:	cmp	r0, #3
   17830:	bne	17874 <__assert_fail@plt+0x4dc4>
   17834:	ldr	r0, [r4, #156]	; 0x9c
   17838:	cmp	r0, #0
   1783c:	beq	17810 <__assert_fail@plt+0x4d60>
   17840:	ldr	r1, [r0, #8]
   17844:	cmp	r1, #3
   17848:	bne	1785c <__assert_fail@plt+0x4dac>
   1784c:	mov	r1, #0
   17850:	bl	177f8 <__assert_fail@plt+0x4d48>
   17854:	b	17810 <__assert_fail@plt+0x4d60>
   17858:	pop	{r4, sl, fp, pc}
   1785c:	movw	r0, #36269	; 0x8dad
   17860:	movw	r1, #34050	; 0x8502
   17864:	movw	r3, #36217	; 0x8d79
   17868:	movw	r2, #1235	; 0x4d3
   1786c:	movt	r0, #4
   17870:	b	17888 <__assert_fail@plt+0x4dd8>
   17874:	movw	r0, #36198	; 0x8d66
   17878:	movw	r1, #34050	; 0x8502
   1787c:	movw	r3, #36217	; 0x8d79
   17880:	movw	r2, #1230	; 0x4ce
   17884:	movt	r0, #4
   17888:	movt	r1, #4
   1788c:	movt	r3, #4
   17890:	bl	12ab0 <__assert_fail@plt>
   17894:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   17898:	add	fp, sp, #28
   1789c:	sub	sp, sp, #4
   178a0:	vpush	{d8-d9}
   178a4:	sub	sp, sp, #8
   178a8:	cmp	r0, #0
   178ac:	beq	17ad4 <__assert_fail@plt+0x5024>
   178b0:	movw	r8, #36299	; 0x8dcb
   178b4:	movw	sl, #61044	; 0xee74
   178b8:	movw	r9, #18876	; 0x49bc
   178bc:	mov	r4, r0
   178c0:	movt	r8, #4
   178c4:	movt	sl, #5
   178c8:	movt	r9, #1
   178cc:	b	178f8 <__assert_fail@plt+0x4e48>
   178d0:	movw	r2, #36322	; 0x8de2
   178d4:	movt	r2, #4
   178d8:	ldrb	r0, [sl, #44]	; 0x2c
   178dc:	tst	r0, #8
   178e0:	bne	17a78 <__assert_fail@plt+0x4fc8>
   178e4:	ldr	r0, [r4, #156]	; 0x9c
   178e8:	bl	17894 <__assert_fail@plt+0x4de4>
   178ec:	ldr	r4, [r4, #160]	; 0xa0
   178f0:	cmp	r4, #0
   178f4:	beq	17ad4 <__assert_fail@plt+0x5024>
   178f8:	ldr	r0, [r4, #8]
   178fc:	mov	r2, r8
   17900:	cmp	r0, #3
   17904:	bne	178d8 <__assert_fail@plt+0x4e28>
   17908:	ldr	r0, [r4, #156]	; 0x9c
   1790c:	cmp	r0, #0
   17910:	ldrne	r5, [r4, #160]	; 0xa0
   17914:	cmpne	r5, #0
   17918:	beq	178d0 <__assert_fail@plt+0x4e20>
   1791c:	ldr	r7, [r0, #160]	; 0xa0
   17920:	cmp	r7, #0
   17924:	beq	17a48 <__assert_fail@plt+0x4f98>
   17928:	mov	r0, r7
   1792c:	bl	17f88 <__assert_fail@plt+0x54d8>
   17930:	cmp	r0, #0
   17934:	bne	17a54 <__assert_fail@plt+0x4fa4>
   17938:	mov	r0, r5
   1793c:	bl	17f88 <__assert_fail@plt+0x54d8>
   17940:	cmp	r0, #0
   17944:	bne	17a60 <__assert_fail@plt+0x4fb0>
   17948:	mov	r0, r7
   1794c:	bl	17fd4 <__assert_fail@plt+0x5524>
   17950:	mov	r6, r0
   17954:	mov	r0, r5
   17958:	bl	17fd4 <__assert_fail@plt+0x5524>
   1795c:	cmp	r6, r0
   17960:	blt	17a6c <__assert_fail@plt+0x4fbc>
   17964:	bne	179b4 <__assert_fail@plt+0x4f04>
   17968:	ldrb	r0, [sl, #44]	; 0x2c
   1796c:	vldr	s16, [r5, #28]
   17970:	vldr	s18, [r7, #28]
   17974:	tst	r0, #8
   17978:	bne	17a1c <__assert_fail@plt+0x4f6c>
   1797c:	ldr	r0, [r4]
   17980:	cmp	r0, r9
   17984:	beq	179a8 <__assert_fail@plt+0x4ef8>
   17988:	movw	r1, #15568	; 0x3cd0
   1798c:	movt	r1, #1
   17990:	cmp	r0, r1
   17994:	bne	17ab0 <__assert_fail@plt+0x5000>
   17998:	vcmpe.f32	s16, s18
   1799c:	vmrs	APSR_nzcv, fpscr
   179a0:	bgt	179b4 <__assert_fail@plt+0x4f04>
   179a4:	b	17abc <__assert_fail@plt+0x500c>
   179a8:	vcmpe.f32	s16, s18
   179ac:	vmrs	APSR_nzcv, fpscr
   179b0:	bpl	17ac8 <__assert_fail@plt+0x5018>
   179b4:	ldrb	r0, [sl, #44]	; 0x2c
   179b8:	tst	r0, #8
   179bc:	bne	179e4 <__assert_fail@plt+0x4f34>
   179c0:	ldr	r0, [r4, #156]	; 0x9c
   179c4:	ldr	r1, [r4, #160]	; 0xa0
   179c8:	ldr	r2, [r0, #160]	; 0xa0
   179cc:	str	r1, [r0, #160]	; 0xa0
   179d0:	str	r2, [r4, #160]	; 0xa0
   179d4:	ldr	r1, [r4, #8]
   179d8:	cmp	r1, #3
   179dc:	beq	1790c <__assert_fail@plt+0x4e5c>
   179e0:	b	17aa8 <__assert_fail@plt+0x4ff8>
   179e4:	movw	r0, #58704	; 0xe550
   179e8:	mov	r1, #24
   179ec:	mov	r2, #1
   179f0:	movt	r0, #5
   179f4:	ldr	r3, [r0]
   179f8:	mov	r5, r0
   179fc:	movw	r0, #36584	; 0x8ee8
   17a00:	movt	r0, #4
   17a04:	bl	12618 <fwrite@plt>
   17a08:	ldr	r0, [r5]
   17a0c:	mov	r1, r4
   17a10:	mov	r2, #0
   17a14:	bl	16a14 <__assert_fail@plt+0x3f64>
   17a18:	b	179c0 <__assert_fail@plt+0x4f10>
   17a1c:	vcvt.f64.f32	d17, s18
   17a20:	movw	r0, #58704	; 0xe550
   17a24:	vcvt.f64.f32	d16, s16
   17a28:	movw	r1, #36450	; 0x8e62
   17a2c:	movt	r0, #5
   17a30:	movt	r1, #4
   17a34:	ldr	r0, [r0]
   17a38:	vmov	r2, r3, d17
   17a3c:	vstr	d16, [sp]
   17a40:	bl	127f8 <fprintf@plt>
   17a44:	b	1797c <__assert_fail@plt+0x4ecc>
   17a48:	movw	r2, #36344	; 0x8df8
   17a4c:	movt	r2, #4
   17a50:	b	178d8 <__assert_fail@plt+0x4e28>
   17a54:	movw	r2, #36373	; 0x8e15
   17a58:	movt	r2, #4
   17a5c:	b	178d8 <__assert_fail@plt+0x4e28>
   17a60:	movw	r2, #36403	; 0x8e33
   17a64:	movt	r2, #4
   17a68:	b	178d8 <__assert_fail@plt+0x4e28>
   17a6c:	movw	r2, #36434	; 0x8e52
   17a70:	movt	r2, #4
   17a74:	b	178d8 <__assert_fail@plt+0x4e28>
   17a78:	movw	r0, #58704	; 0xe550
   17a7c:	movw	r1, #36609	; 0x8f01
   17a80:	movt	r0, #5
   17a84:	movt	r1, #4
   17a88:	mov	r5, r0
   17a8c:	ldr	r0, [r0]
   17a90:	bl	127f8 <fprintf@plt>
   17a94:	ldr	r0, [r5]
   17a98:	mov	r1, r4
   17a9c:	mov	r2, #0
   17aa0:	bl	16a14 <__assert_fail@plt+0x3f64>
   17aa4:	b	178e4 <__assert_fail@plt+0x4e34>
   17aa8:	mov	r2, r8
   17aac:	b	178d8 <__assert_fail@plt+0x4e28>
   17ab0:	movw	r2, #36566	; 0x8ed6
   17ab4:	movt	r2, #4
   17ab8:	b	178d8 <__assert_fail@plt+0x4e28>
   17abc:	movw	r2, #36521	; 0x8ea9
   17ac0:	movt	r2, #4
   17ac4:	b	178d8 <__assert_fail@plt+0x4e28>
   17ac8:	movw	r2, #36477	; 0x8e7d
   17acc:	movt	r2, #4
   17ad0:	b	178d8 <__assert_fail@plt+0x4e28>
   17ad4:	sub	sp, fp, #48	; 0x30
   17ad8:	vpop	{d8-d9}
   17adc:	add	sp, sp, #4
   17ae0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   17ae4:	push	{fp, lr}
   17ae8:	mov	fp, sp
   17aec:	bl	17b00 <__assert_fail@plt+0x5050>
   17af0:	cmp	r0, #0
   17af4:	movne	r1, #0
   17af8:	strne	r1, [r0, #36]	; 0x24
   17afc:	pop	{fp, pc}
   17b00:	push	{r4, sl, fp, lr}
   17b04:	add	fp, sp, #8
   17b08:	mov	r4, r0
   17b0c:	ldr	r0, [r0]
   17b10:	cmp	r0, #2
   17b14:	beq	17ba8 <__assert_fail@plt+0x50f8>
   17b18:	cmp	r0, #0
   17b1c:	beq	17bc0 <__assert_fail@plt+0x5110>
   17b20:	mov	r0, #176	; 0xb0
   17b24:	bl	2e430 <__assert_fail@plt+0x1b980>
   17b28:	movw	r2, #58756	; 0xe584
   17b2c:	movt	r2, #5
   17b30:	ldr	r1, [r2]
   17b34:	cmp	r1, #0
   17b38:	movw	r1, #58760	; 0xe588
   17b3c:	movt	r1, #5
   17b40:	beq	17b50 <__assert_fail@plt+0x50a0>
   17b44:	ldr	r2, [r1]
   17b48:	str	r0, [r2, #152]	; 0x98
   17b4c:	b	17b54 <__assert_fail@plt+0x50a4>
   17b50:	str	r0, [r2]
   17b54:	movw	r2, #61044	; 0xee74
   17b58:	str	r0, [r1]
   17b5c:	movw	r1, #34717	; 0x879d
   17b60:	mov	r3, #1065353216	; 0x3f800000
   17b64:	movt	r2, #5
   17b68:	movt	r1, #4
   17b6c:	ldrb	r2, [r2, #15]
   17b70:	str	r1, [r0, #36]	; 0x24
   17b74:	mov	r1, #10
   17b78:	str	r1, [r0, #24]
   17b7c:	movw	r1, #257	; 0x101
   17b80:	strh	r1, [r0, #18]
   17b84:	mov	r1, #0
   17b88:	str	r1, [r0, #8]
   17b8c:	str	r1, [r0, #12]
   17b90:	str	r3, [r0, #28]
   17b94:	str	r1, [r0, #164]	; 0xa4
   17b98:	str	r1, [r0, #168]	; 0xa8
   17b9c:	str	r4, [r0, #172]	; 0xac
   17ba0:	strb	r2, [r0, #32]
   17ba4:	pop	{r4, sl, fp, pc}
   17ba8:	movw	r0, #33275	; 0x81fb
   17bac:	movw	r1, #34050	; 0x8502
   17bb0:	movw	r3, #34657	; 0x8761
   17bb4:	movw	r2, #1486	; 0x5ce
   17bb8:	movt	r0, #4
   17bbc:	b	17bd4 <__assert_fail@plt+0x5124>
   17bc0:	movw	r0, #33239	; 0x81d7
   17bc4:	movw	r1, #34050	; 0x8502
   17bc8:	movw	r3, #34657	; 0x8761
   17bcc:	movw	r2, #1485	; 0x5cd
   17bd0:	movt	r0, #4
   17bd4:	movt	r1, #4
   17bd8:	movt	r3, #4
   17bdc:	bl	12ab0 <__assert_fail@plt>
   17be0:	push	{r4, r5, r6, sl, fp, lr}
   17be4:	add	fp, sp, #16
   17be8:	movw	r6, #58764	; 0xe58c
   17bec:	mov	r5, r0
   17bf0:	mov	r4, r1
   17bf4:	movt	r6, #5
   17bf8:	ldr	r0, [r6]
   17bfc:	cmp	r0, #0
   17c00:	bne	17c1c <__assert_fail@plt+0x516c>
   17c04:	movw	r0, #34748	; 0x87bc
   17c08:	movt	r0, #4
   17c0c:	bl	1befc <__assert_fail@plt+0x944c>
   17c10:	cmp	r0, #0
   17c14:	str	r0, [r6]
   17c18:	beq	17ccc <__assert_fail@plt+0x521c>
   17c1c:	movw	r1, #58760	; 0xe588
   17c20:	movt	r1, #5
   17c24:	ldr	r1, [r1]
   17c28:	cmp	r1, #0
   17c2c:	beq	17c94 <__assert_fail@plt+0x51e4>
   17c30:	ldr	r1, [r1, #8]
   17c34:	cmp	r1, #1
   17c38:	cmpne	r1, #5
   17c3c:	bne	17c8c <__assert_fail@plt+0x51dc>
   17c40:	bl	17b00 <__assert_fail@plt+0x5050>
   17c44:	movw	r3, #34893	; 0x884d
   17c48:	movw	r6, #15568	; 0x3cd0
   17c4c:	cmp	r0, #0
   17c50:	mov	r2, #3
   17c54:	movne	r1, #0
   17c58:	movt	r3, #4
   17c5c:	movt	r6, #1
   17c60:	strne	r1, [r0, #36]	; 0x24
   17c64:	mov	r1, #0
   17c68:	str	r1, [r0, #36]	; 0x24
   17c6c:	str	r1, [r0, #40]	; 0x28
   17c70:	str	r6, [r0]
   17c74:	str	r3, [r0, #4]
   17c78:	str	r2, [r0, #8]
   17c7c:	str	r2, [r0, #12]
   17c80:	str	r1, [r0, #16]
   17c84:	strb	r1, [r0, #20]
   17c88:	b	17c94 <__assert_fail@plt+0x51e4>
   17c8c:	cmp	r1, #0
   17c90:	beq	17ca8 <__assert_fail@plt+0x51f8>
   17c94:	mov	r0, r5
   17c98:	bl	17b00 <__assert_fail@plt+0x5050>
   17c9c:	str	r5, [r0, #172]	; 0xac
   17ca0:	str	r4, [r0, #36]	; 0x24
   17ca4:	pop	{r4, r5, r6, sl, fp, pc}
   17ca8:	movw	r1, #34851	; 0x8823
   17cac:	mov	r0, #0
   17cb0:	mov	r2, #5
   17cb4:	movt	r1, #4
   17cb8:	bl	12564 <dcgettext@plt>
   17cbc:	mov	r2, r0
   17cc0:	mov	r0, #1
   17cc4:	mov	r1, #0
   17cc8:	bl	1269c <error@plt>
   17ccc:	movw	r0, #34752	; 0x87c0
   17cd0:	movw	r1, #34050	; 0x8502
   17cd4:	movw	r3, #34770	; 0x87d2
   17cd8:	movw	r2, #1528	; 0x5f8
   17cdc:	movt	r0, #4
   17ce0:	movt	r1, #4
   17ce4:	movt	r3, #4
   17ce8:	bl	12ab0 <__assert_fail@plt>
   17cec:	push	{fp, lr}
   17cf0:	mov	fp, sp
   17cf4:	sub	sp, sp, #8
   17cf8:	ldr	r0, [r0]
   17cfc:	mov	r2, #4
   17d00:	str	r0, [sp, #4]
   17d04:	ldr	r0, [r1]
   17d08:	mov	r1, sp
   17d0c:	str	r0, [sp]
   17d10:	add	r0, sp, #4
   17d14:	bl	12540 <memcmp@plt>
   17d18:	mov	sp, fp
   17d1c:	pop	{fp, pc}
   17d20:	push	{r4, r5, r6, sl, fp, lr}
   17d24:	add	fp, sp, #16
   17d28:	mov	r5, r0
   17d2c:	mov	r0, r1
   17d30:	mov	r1, r3
   17d34:	mov	r4, r3
   17d38:	mov	r6, r2
   17d3c:	bl	17dd4 <__assert_fail@plt+0x5324>
   17d40:	mov	r0, r6
   17d44:	mov	r1, r4
   17d48:	bl	17dd4 <__assert_fail@plt+0x5324>
   17d4c:	mov	r0, r5
   17d50:	mov	r1, r4
   17d54:	bl	17dd4 <__assert_fail@plt+0x5324>
   17d58:	add	r0, r5, #8
   17d5c:	mov	r1, r4
   17d60:	bl	17dd4 <__assert_fail@plt+0x5324>
   17d64:	add	r0, r5, #16
   17d68:	mov	r1, r4
   17d6c:	bl	17dd4 <__assert_fail@plt+0x5324>
   17d70:	add	r0, r5, #24
   17d74:	mov	r1, r4
   17d78:	bl	17dd4 <__assert_fail@plt+0x5324>
   17d7c:	add	r0, r5, #32
   17d80:	mov	r1, r4
   17d84:	bl	17dd4 <__assert_fail@plt+0x5324>
   17d88:	add	r0, r5, #40	; 0x28
   17d8c:	mov	r1, r4
   17d90:	bl	17dd4 <__assert_fail@plt+0x5324>
   17d94:	add	r0, r5, #48	; 0x30
   17d98:	mov	r1, r4
   17d9c:	bl	17dd4 <__assert_fail@plt+0x5324>
   17da0:	add	r0, r5, #56	; 0x38
   17da4:	mov	r1, r4
   17da8:	bl	17dd4 <__assert_fail@plt+0x5324>
   17dac:	add	r0, r5, #64	; 0x40
   17db0:	mov	r1, r4
   17db4:	bl	17dd4 <__assert_fail@plt+0x5324>
   17db8:	add	r0, r5, #72	; 0x48
   17dbc:	mov	r1, r4
   17dc0:	bl	17dd4 <__assert_fail@plt+0x5324>
   17dc4:	add	r0, r5, #80	; 0x50
   17dc8:	mov	r1, r4
   17dcc:	pop	{r4, r5, r6, sl, fp, lr}
   17dd0:	b	17dd4 <__assert_fail@plt+0x5324>
   17dd4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   17dd8:	add	fp, sp, #28
   17ddc:	sub	sp, sp, #4
   17de0:	mov	sl, r0
   17de4:	ldr	r0, [r0]
   17de8:	cmp	r0, #0
   17dec:	beq	17f14 <__assert_fail@plt+0x5464>
   17df0:	movw	r5, #61044	; 0xee74
   17df4:	mov	r9, r1
   17df8:	movt	r5, #5
   17dfc:	ldrb	r1, [r5, #44]	; 0x2c
   17e00:	tst	r1, #8
   17e04:	bne	17f1c <__assert_fail@plt+0x546c>
   17e08:	bl	15efc <__assert_fail@plt+0x344c>
   17e0c:	ldr	r1, [sl]
   17e10:	cmp	r1, #0
   17e14:	beq	17ee0 <__assert_fail@plt+0x5430>
   17e18:	mov	lr, r5
   17e1c:	mov	ip, #0
   17e20:	mov	r6, #0
   17e24:	mov	r8, #0
   17e28:	b	17e48 <__assert_fail@plt+0x5398>
   17e2c:	cmp	r8, #0
   17e30:	str	r6, [r1, #156]	; 0x9c
   17e34:	mov	r6, r1
   17e38:	moveq	r8, r1
   17e3c:	cmp	r2, #0
   17e40:	mov	r1, r2
   17e44:	beq	17ed4 <__assert_fail@plt+0x5424>
   17e48:	ldr	r2, [r1, #156]	; 0x9c
   17e4c:	cmp	r6, #0
   17e50:	str	ip, [r1, #156]	; 0x9c
   17e54:	beq	17e2c <__assert_fail@plt+0x537c>
   17e58:	ldr	r5, [r1, #160]	; 0xa0
   17e5c:	mov	r3, r6
   17e60:	ldr	r4, [r5, #24]
   17e64:	b	17e78 <__assert_fail@plt+0x53c8>
   17e68:	bcs	17ec0 <__assert_fail@plt+0x5410>
   17e6c:	ldr	r3, [r3, #156]	; 0x9c
   17e70:	cmp	r3, #0
   17e74:	beq	17e2c <__assert_fail@plt+0x537c>
   17e78:	ldr	r0, [r3, #160]	; 0xa0
   17e7c:	ldr	r7, [r0, #24]
   17e80:	cmp	r7, r4
   17e84:	bne	17e68 <__assert_fail@plt+0x53b8>
   17e88:	vldr	s0, [r5, #28]
   17e8c:	vldr	s2, [r0, #28]
   17e90:	vcmp.f32	s2, s0
   17e94:	vmrs	APSR_nzcv, fpscr
   17e98:	beq	17ec0 <__assert_fail@plt+0x5410>
   17e9c:	ldr	r0, [r3, #12]
   17ea0:	vcmpe.f32	s2, s0
   17ea4:	cmp	r0, #2
   17ea8:	bne	17eb8 <__assert_fail@plt+0x5408>
   17eac:	vmrs	APSR_nzcv, fpscr
   17eb0:	bpl	17e6c <__assert_fail@plt+0x53bc>
   17eb4:	b	17ec0 <__assert_fail@plt+0x5410>
   17eb8:	vmrs	APSR_nzcv, fpscr
   17ebc:	bmi	17e6c <__assert_fail@plt+0x53bc>
   17ec0:	ldr	r0, [r3, #156]	; 0x9c
   17ec4:	cmp	r0, #0
   17ec8:	str	r0, [r1, #156]	; 0x9c
   17ecc:	str	r1, [r3, #156]	; 0x9c
   17ed0:	b	17e38 <__assert_fail@plt+0x5388>
   17ed4:	mov	r5, lr
   17ed8:	str	r2, [sl]
   17edc:	b	17ee8 <__assert_fail@plt+0x5438>
   17ee0:	mov	r8, #0
   17ee4:	mov	r6, #0
   17ee8:	ldrb	r0, [r5, #44]	; 0x2c
   17eec:	tst	r0, #8
   17ef0:	bne	17f54 <__assert_fail@plt+0x54a4>
   17ef4:	mov	r0, r6
   17ef8:	bl	15efc <__assert_fail@plt+0x344c>
   17efc:	ldr	r0, [r9]
   17f00:	str	r0, [r8, #156]	; 0x9c
   17f04:	mov	r0, #0
   17f08:	str	r6, [r9]
   17f0c:	str	r0, [sl]
   17f10:	str	r0, [sl, #4]
   17f14:	sub	sp, fp, #28
   17f18:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   17f1c:	movw	r4, #58704	; 0xe550
   17f20:	movw	r1, #36140	; 0x8d2c
   17f24:	movw	r2, #36145	; 0x8d31
   17f28:	movt	r4, #5
   17f2c:	movt	r1, #4
   17f30:	movt	r2, #4
   17f34:	ldr	r0, [r4]
   17f38:	bl	127f8 <fprintf@plt>
   17f3c:	ldr	r0, [r4]
   17f40:	ldr	r1, [sl]
   17f44:	mov	r2, #2
   17f48:	bl	16a14 <__assert_fail@plt+0x3f64>
   17f4c:	ldr	r0, [sl]
   17f50:	b	17e08 <__assert_fail@plt+0x5358>
   17f54:	movw	r4, #58704	; 0xe550
   17f58:	movw	r1, #36140	; 0x8d2c
   17f5c:	movw	r2, #36172	; 0x8d4c
   17f60:	movt	r4, #5
   17f64:	movt	r1, #4
   17f68:	movt	r2, #4
   17f6c:	ldr	r0, [r4]
   17f70:	bl	127f8 <fprintf@plt>
   17f74:	ldr	r0, [r4]
   17f78:	mov	r1, r6
   17f7c:	mov	r2, #2
   17f80:	bl	16a14 <__assert_fail@plt+0x3f64>
   17f84:	b	17ef4 <__assert_fail@plt+0x5444>
   17f88:	push	{r4, r5, fp, lr}
   17f8c:	add	fp, sp, #8
   17f90:	cmp	r0, #0
   17f94:	beq	17fc8 <__assert_fail@plt+0x5518>
   17f98:	mov	r4, r0
   17f9c:	mov	r5, #1
   17fa0:	ldrb	r0, [r4, #16]
   17fa4:	cmp	r0, #0
   17fa8:	bne	17fcc <__assert_fail@plt+0x551c>
   17fac:	ldr	r0, [r4, #156]	; 0x9c
   17fb0:	bl	17f88 <__assert_fail@plt+0x54d8>
   17fb4:	cmp	r0, #0
   17fb8:	bne	17fcc <__assert_fail@plt+0x551c>
   17fbc:	ldr	r4, [r4, #160]	; 0xa0
   17fc0:	cmp	r4, #0
   17fc4:	bne	17fa0 <__assert_fail@plt+0x54f0>
   17fc8:	mov	r5, #0
   17fcc:	mov	r0, r5
   17fd0:	pop	{r4, r5, fp, pc}
   17fd4:	cmp	r0, #0
   17fd8:	moveq	r0, #0
   17fdc:	bxeq	lr
   17fe0:	push	{r4, r5, fp, lr}
   17fe4:	add	fp, sp, #8
   17fe8:	mov	r4, r0
   17fec:	ldr	r0, [r0, #156]	; 0x9c
   17ff0:	bl	17fd4 <__assert_fail@plt+0x5524>
   17ff4:	mov	r5, r0
   17ff8:	ldr	r0, [r4, #160]	; 0xa0
   17ffc:	bl	17fd4 <__assert_fail@plt+0x5524>
   18000:	ldr	r1, [r4, #24]
   18004:	cmp	r5, r0
   18008:	movhi	r0, r5
   1800c:	cmp	r0, r1
   18010:	movcc	r0, r1
   18014:	pop	{r4, r5, fp, pc}
   18018:	push	{r4, r5, fp, lr}
   1801c:	add	fp, sp, #8
   18020:	mov	r4, r1
   18024:	mov	r1, r2
   18028:	mov	r5, r0
   1802c:	bl	17be0 <__assert_fail@plt+0x5130>
   18030:	str	r4, [r0]
   18034:	mov	r2, #1
   18038:	ldr	r1, [r5, #4]
   1803c:	str	r2, [r0, #8]
   18040:	mov	r2, #0
   18044:	str	r2, [r0, #12]
   18048:	str	r2, [r0, #40]	; 0x28
   1804c:	str	r1, [r0, #4]
   18050:	pop	{r4, r5, fp, pc}
   18054:	push	{r4, r5, fp, lr}
   18058:	add	fp, sp, #8
   1805c:	ldr	r5, [r0, #12]
   18060:	cmp	r5, #0
   18064:	beq	18094 <__assert_fail@plt+0x55e4>
   18068:	mov	r4, r0
   1806c:	bl	17be0 <__assert_fail@plt+0x5130>
   18070:	str	r5, [r0]
   18074:	mov	r2, #1
   18078:	ldr	r1, [r4, #4]
   1807c:	str	r2, [r0, #8]
   18080:	mov	r2, #0
   18084:	str	r2, [r0, #12]
   18088:	str	r2, [r0, #40]	; 0x28
   1808c:	str	r1, [r0, #4]
   18090:	pop	{r4, r5, fp, pc}
   18094:	movw	r0, #36840	; 0x8fe8
   18098:	movw	r1, #36865	; 0x9001
   1809c:	movw	r3, #36872	; 0x9008
   180a0:	mov	r2, #123	; 0x7b
   180a4:	movt	r0, #4
   180a8:	movt	r1, #4
   180ac:	movt	r3, #4
   180b0:	bl	12ab0 <__assert_fail@plt>
   180b4:	push	{r4, r5, r6, sl, fp, lr}
   180b8:	add	fp, sp, #16
   180bc:	ldr	r5, [r0, #12]
   180c0:	cmp	r5, #0
   180c4:	beq	180f0 <__assert_fail@plt+0x5640>
   180c8:	mov	r1, #0
   180cc:	mov	r4, r0
   180d0:	mov	r6, #0
   180d4:	bl	17be0 <__assert_fail@plt+0x5130>
   180d8:	str	r5, [r0]
   180dc:	mov	r2, #1
   180e0:	ldr	r1, [r4, #4]
   180e4:	str	r6, [r0, #40]	; 0x28
   180e8:	stmib	r0, {r1, r2, r6}
   180ec:	pop	{r4, r5, r6, sl, fp, pc}
   180f0:	movw	r0, #36840	; 0x8fe8
   180f4:	movw	r1, #36865	; 0x9001
   180f8:	movw	r3, #36872	; 0x9008
   180fc:	mov	r2, #123	; 0x7b
   18100:	movt	r0, #4
   18104:	movt	r1, #4
   18108:	movt	r3, #4
   1810c:	bl	12ab0 <__assert_fail@plt>
   18110:	push	{fp, lr}
   18114:	mov	fp, sp
   18118:	cmp	r0, #0
   1811c:	bne	1828c <__assert_fail@plt+0x57dc>
   18120:	movw	r5, #58716	; 0xe55c
   18124:	movw	r1, #36987	; 0x907b
   18128:	mov	r0, #0
   1812c:	mov	r2, #5
   18130:	movt	r5, #5
   18134:	movt	r1, #4
   18138:	ldr	r4, [r5]
   1813c:	bl	12564 <dcgettext@plt>
   18140:	movw	r6, #60684	; 0xed0c
   18144:	mov	r1, r0
   18148:	mov	r0, r4
   1814c:	movt	r6, #5
   18150:	ldr	r2, [r6]
   18154:	bl	127f8 <fprintf@plt>
   18158:	movw	r1, #37061	; 0x90c5
   1815c:	mov	r0, #0
   18160:	mov	r2, #5
   18164:	movt	r1, #4
   18168:	bl	12564 <dcgettext@plt>
   1816c:	ldr	r1, [r5]
   18170:	bl	12a44 <fputs@plt>
   18174:	movw	r1, #37199	; 0x914f
   18178:	mov	r0, #0
   1817c:	mov	r2, #5
   18180:	movt	r1, #4
   18184:	bl	12564 <dcgettext@plt>
   18188:	ldr	r1, [r5]
   1818c:	bl	12a44 <fputs@plt>
   18190:	movw	r1, #37407	; 0x921f
   18194:	mov	r0, #0
   18198:	mov	r2, #5
   1819c:	movt	r1, #4
   181a0:	bl	12564 <dcgettext@plt>
   181a4:	ldr	r1, [r5]
   181a8:	bl	12a44 <fputs@plt>
   181ac:	movw	r1, #37492	; 0x9274
   181b0:	mov	r0, #0
   181b4:	mov	r2, #5
   181b8:	movt	r1, #4
   181bc:	bl	12564 <dcgettext@plt>
   181c0:	ldr	r1, [r5]
   181c4:	bl	12a44 <fputs@plt>
   181c8:	movw	r1, #37697	; 0x9341
   181cc:	mov	r0, #0
   181d0:	mov	r2, #5
   181d4:	movt	r1, #4
   181d8:	bl	12564 <dcgettext@plt>
   181dc:	ldr	r1, [r5]
   181e0:	bl	12a44 <fputs@plt>
   181e4:	movw	r1, #38238	; 0x955e
   181e8:	mov	r0, #0
   181ec:	mov	r2, #5
   181f0:	movt	r1, #4
   181f4:	bl	12564 <dcgettext@plt>
   181f8:	ldr	r1, [r5]
   181fc:	bl	12a44 <fputs@plt>
   18200:	movw	r1, #38494	; 0x965e
   18204:	mov	r0, #0
   18208:	mov	r2, #5
   1820c:	movt	r1, #4
   18210:	bl	12564 <dcgettext@plt>
   18214:	ldr	r1, [r5]
   18218:	bl	12a44 <fputs@plt>
   1821c:	movw	r1, #38518	; 0x9676
   18220:	mov	r0, #0
   18224:	mov	r2, #5
   18228:	movt	r1, #4
   1822c:	bl	12564 <dcgettext@plt>
   18230:	ldr	r1, [r5]
   18234:	bl	12a44 <fputs@plt>
   18238:	movw	r1, #38577	; 0x96b1
   1823c:	mov	r0, #0
   18240:	mov	r2, #5
   18244:	movt	r1, #4
   18248:	bl	12564 <dcgettext@plt>
   1824c:	ldr	r1, [r5]
   18250:	bl	12a44 <fputs@plt>
   18254:	mov	r0, #0
   18258:	bl	182d0 <__assert_fail@plt+0x5820>
   1825c:	movw	r1, #38646	; 0x96f6
   18260:	mov	r0, #0
   18264:	mov	r2, #5
   18268:	movt	r1, #4
   1826c:	bl	12564 <dcgettext@plt>
   18270:	ldr	r1, [r5]
   18274:	bl	12a44 <fputs@plt>
   18278:	ldr	r0, [r5]
   1827c:	ldr	r1, [r6]
   18280:	bl	22394 <__assert_fail@plt+0xf8e4>
   18284:	mov	r0, #0
   18288:	bl	12780 <exit@plt>
   1828c:	mov	r4, r0
   18290:	movw	r0, #58704	; 0xe550
   18294:	movw	r1, #36948	; 0x9054
   18298:	mov	r2, #5
   1829c:	movt	r0, #5
   182a0:	movt	r1, #4
   182a4:	ldr	r5, [r0]
   182a8:	mov	r0, #0
   182ac:	bl	12564 <dcgettext@plt>
   182b0:	mov	r1, r0
   182b4:	movw	r0, #60684	; 0xed0c
   182b8:	movt	r0, #5
   182bc:	ldr	r2, [r0]
   182c0:	mov	r0, r5
   182c4:	bl	127f8 <fprintf@plt>
   182c8:	mov	r0, r4
   182cc:	bl	12780 <exit@plt>
   182d0:	push	{r4, r5, r6, sl, fp, lr}
   182d4:	add	fp, sp, #16
   182d8:	movw	r1, #39295	; 0x997f
   182dc:	mov	r4, r0
   182e0:	mov	r0, #0
   182e4:	mov	r2, #5
   182e8:	movt	r1, #4
   182ec:	bl	12564 <dcgettext@plt>
   182f0:	movw	r6, #58716	; 0xe55c
   182f4:	movt	r6, #5
   182f8:	ldr	r1, [r6]
   182fc:	bl	12a44 <fputs@plt>
   18300:	ldr	r0, [r6]
   18304:	cmp	r4, #0
   18308:	beq	18410 <__assert_fail@plt+0x5960>
   1830c:	movw	r4, #39320	; 0x9998
   18310:	movw	r2, #43747	; 0xaae3
   18314:	movw	r3, #39333	; 0x99a5
   18318:	movt	r4, #4
   1831c:	movt	r2, #4
   18320:	movt	r3, #4
   18324:	mov	r1, r4
   18328:	bl	127f8 <fprintf@plt>
   1832c:	ldr	r0, [r6]
   18330:	movw	r2, #39405	; 0x99ed
   18334:	movw	r3, #39409	; 0x99f1
   18338:	mov	r1, r4
   1833c:	movt	r2, #4
   18340:	movt	r3, #4
   18344:	bl	127f8 <fprintf@plt>
   18348:	ldr	r0, [r6]
   1834c:	movw	r2, #39462	; 0x9a26
   18350:	movw	r3, #39468	; 0x9a2c
   18354:	mov	r1, r4
   18358:	movt	r2, #4
   1835c:	movt	r3, #4
   18360:	bl	127f8 <fprintf@plt>
   18364:	ldr	r0, [r6]
   18368:	movw	r2, #39512	; 0x9a58
   1836c:	movw	r3, #39519	; 0x9a5f
   18370:	mov	r1, r4
   18374:	movt	r2, #4
   18378:	movt	r3, #4
   1837c:	bl	127f8 <fprintf@plt>
   18380:	ldr	r0, [r6]
   18384:	movw	r2, #42840	; 0xa758
   18388:	movw	r3, #39557	; 0x9a85
   1838c:	mov	r1, r4
   18390:	movt	r2, #4
   18394:	movt	r3, #4
   18398:	bl	127f8 <fprintf@plt>
   1839c:	ldr	r0, [r6]
   183a0:	movw	r2, #42756	; 0xa704
   183a4:	movw	r3, #39593	; 0x9aa9
   183a8:	mov	r1, r4
   183ac:	movt	r2, #4
   183b0:	movt	r3, #4
   183b4:	bl	127f8 <fprintf@plt>
   183b8:	ldr	r0, [r6]
   183bc:	movw	r2, #39694	; 0x9b0e
   183c0:	movw	r3, #39671	; 0x9af7
   183c4:	mov	r1, r4
   183c8:	movt	r2, #4
   183cc:	movt	r3, #4
   183d0:	bl	127f8 <fprintf@plt>
   183d4:	ldr	r0, [r6]
   183d8:	movw	r2, #40759	; 0x9f37
   183dc:	movw	r3, #39699	; 0x9b13
   183e0:	mov	r1, r4
   183e4:	movt	r2, #4
   183e8:	movt	r3, #4
   183ec:	bl	127f8 <fprintf@plt>
   183f0:	ldr	r0, [r6]
   183f4:	movw	r2, #43219	; 0xa8d3
   183f8:	movw	r3, #39737	; 0x9b39
   183fc:	mov	r1, r4
   18400:	movt	r2, #4
   18404:	movt	r3, #4
   18408:	pop	{r4, r5, r6, sl, fp, lr}
   1840c:	b	127f8 <fprintf@plt>
   18410:	movw	r4, #32939	; 0x80ab
   18414:	movw	r2, #38711	; 0x9737
   18418:	movw	r3, #43747	; 0xaae3
   1841c:	movt	r4, #4
   18420:	movt	r2, #4
   18424:	movt	r3, #4
   18428:	mov	r1, r4
   1842c:	bl	127f8 <fprintf@plt>
   18430:	movw	r5, #39330	; 0x99a2
   18434:	ldr	r0, [r6]
   18438:	movw	r3, #39405	; 0x99ed
   1843c:	mov	r1, r4
   18440:	movt	r5, #4
   18444:	movt	r3, #4
   18448:	mov	r2, r5
   1844c:	bl	127f8 <fprintf@plt>
   18450:	ldr	r0, [r6]
   18454:	movw	r3, #39462	; 0x9a26
   18458:	mov	r1, r4
   1845c:	mov	r2, r5
   18460:	movt	r3, #4
   18464:	bl	127f8 <fprintf@plt>
   18468:	ldr	r0, [r6]
   1846c:	movw	r3, #39512	; 0x9a58
   18470:	mov	r1, r4
   18474:	mov	r2, r5
   18478:	movt	r3, #4
   1847c:	bl	127f8 <fprintf@plt>
   18480:	ldr	r0, [r6]
   18484:	movw	r3, #42840	; 0xa758
   18488:	mov	r1, r4
   1848c:	mov	r2, r5
   18490:	movt	r3, #4
   18494:	bl	127f8 <fprintf@plt>
   18498:	ldr	r0, [r6]
   1849c:	movw	r3, #42756	; 0xa704
   184a0:	mov	r1, r4
   184a4:	mov	r2, r5
   184a8:	movt	r3, #4
   184ac:	bl	127f8 <fprintf@plt>
   184b0:	ldr	r0, [r6]
   184b4:	movw	r3, #39694	; 0x9b0e
   184b8:	mov	r1, r4
   184bc:	mov	r2, r5
   184c0:	movt	r3, #4
   184c4:	bl	127f8 <fprintf@plt>
   184c8:	ldr	r0, [r6]
   184cc:	movw	r3, #40759	; 0x9f37
   184d0:	mov	r1, r4
   184d4:	mov	r2, r5
   184d8:	movt	r3, #4
   184dc:	bl	127f8 <fprintf@plt>
   184e0:	ldr	r0, [r6]
   184e4:	movw	r3, #43219	; 0xa8d3
   184e8:	mov	r1, r4
   184ec:	mov	r2, r5
   184f0:	movt	r3, #4
   184f4:	pop	{r4, r5, r6, sl, fp, lr}
   184f8:	b	127f8 <fprintf@plt>
   184fc:	bx	lr
   18500:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   18504:	add	fp, sp, #24
   18508:	movw	r7, #61000	; 0xee48
   1850c:	mov	r5, r0
   18510:	mov	r4, r2
   18514:	movt	r7, #5
   18518:	ldrb	r0, [r7, #4]
   1851c:	cmp	r0, #0
   18520:	beq	1853c <__assert_fail@plt+0x5a8c>
   18524:	movw	r0, #257	; 0x101
   18528:	strh	r0, [r7, #4]
   1852c:	ldr	r0, [r4, #16]
   18530:	str	r0, [r7, #8]
   18534:	mov	r0, #0
   18538:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   1853c:	movw	r8, #61044	; 0xee74
   18540:	mov	r6, r1
   18544:	mov	r0, r1
   18548:	mov	r1, r4
   1854c:	movt	r8, #5
   18550:	ldr	r2, [r8, #52]	; 0x34
   18554:	blx	r2
   18558:	cmp	r0, #0
   1855c:	beq	185d4 <__assert_fail@plt+0x5b24>
   18560:	ldrb	r0, [r8, #14]
   18564:	cmp	r0, #0
   18568:	beq	18580 <__assert_fail@plt+0x5ad0>
   1856c:	bl	12804 <__errno_location@plt>
   18570:	ldr	r1, [r0]
   18574:	mvn	r0, #0
   18578:	cmp	r1, #2
   1857c:	beq	185d0 <__assert_fail@plt+0x5b20>
   18580:	ldrb	r0, [r7, #40]	; 0x28
   18584:	cmp	r0, #0
   18588:	bne	185c4 <__assert_fail@plt+0x5b14>
   1858c:	bl	12804 <__errno_location@plt>
   18590:	ldr	r1, [r8, #72]	; 0x48
   18594:	ldr	r4, [r0]
   18598:	mov	r0, #0
   1859c:	mov	r2, r5
   185a0:	bl	2c88c <__assert_fail@plt+0x19ddc>
   185a4:	movw	r2, #56015	; 0xdacf
   185a8:	mov	r3, r0
   185ac:	mov	r0, #0
   185b0:	mov	r1, r4
   185b4:	movt	r2, #4
   185b8:	bl	1269c <error@plt>
   185bc:	mov	r0, #1
   185c0:	str	r0, [r7, #28]
   185c4:	mov	r0, #1
   185c8:	strb	r0, [r7, #40]	; 0x28
   185cc:	mvn	r0, #0
   185d0:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   185d4:	ldr	r0, [r4, #16]
   185d8:	cmp	r0, #0
   185dc:	bne	18524 <__assert_fail@plt+0x5a74>
   185e0:	movw	r1, #31828	; 0x7c54
   185e4:	mov	r0, #0
   185e8:	mov	r2, #5
   185ec:	movt	r1, #4
   185f0:	bl	12564 <dcgettext@plt>
   185f4:	ldr	r1, [r8, #72]	; 0x48
   185f8:	mov	r5, r0
   185fc:	mov	r0, #0
   18600:	mov	r2, r6
   18604:	bl	2c88c <__assert_fail@plt+0x19ddc>
   18608:	mov	r3, r0
   1860c:	mov	r0, #0
   18610:	mov	r1, #0
   18614:	mov	r2, r5
   18618:	bl	1269c <error@plt>
   1861c:	mov	r0, #1
   18620:	str	r0, [r7, #28]
   18624:	b	18524 <__assert_fail@plt+0x5a74>
   18628:	push	{r4, r5, fp, lr}
   1862c:	add	fp, sp, #8
   18630:	movw	r5, #61000	; 0xee48
   18634:	mov	r4, r0
   18638:	movt	r5, #5
   1863c:	ldrb	r0, [r5, #40]	; 0x28
   18640:	cmp	r0, #0
   18644:	bne	18680 <__assert_fail@plt+0x5bd0>
   18648:	movw	r0, #61044	; 0xee74
   1864c:	mov	r2, r1
   18650:	movt	r0, #5
   18654:	ldr	r1, [r0, #72]	; 0x48
   18658:	mov	r0, #0
   1865c:	bl	2c88c <__assert_fail@plt+0x19ddc>
   18660:	movw	r2, #56015	; 0xdacf
   18664:	mov	r3, r0
   18668:	mov	r0, #0
   1866c:	mov	r1, r4
   18670:	movt	r2, #4
   18674:	bl	1269c <error@plt>
   18678:	mov	r0, #1
   1867c:	str	r0, [r5, #28]
   18680:	mov	r0, #1
   18684:	strb	r0, [r5, #40]	; 0x28
   18688:	pop	{r4, r5, fp, pc}
   1868c:	push	{r4, r5, r6, r7, fp, lr}
   18690:	add	fp, sp, #16
   18694:	vpush	{d8}
   18698:	sub	sp, sp, #392	; 0x188
   1869c:	mov	r5, sp
   186a0:	mov	r0, r5
   186a4:	bl	1254c <uname@plt>
   186a8:	cmp	r0, #0
   186ac:	beq	186b8 <__assert_fail@plt+0x5c08>
   186b0:	mov	r4, #1
   186b4:	b	1872c <__assert_fail@plt+0x5c7c>
   186b8:	add	r0, r5, #130	; 0x82
   186bc:	mov	r1, #0
   186c0:	mov	r4, #0
   186c4:	bl	12870 <strtod@plt>
   186c8:	movw	r0, #38712	; 0x9738
   186cc:	mov	r1, r5
   186d0:	mov	r2, #6
   186d4:	vmov.f64	d8, d0
   186d8:	movt	r0, #4
   186dc:	bl	127a4 <bcmp@plt>
   186e0:	vcvt.f32.f64	s16, d8
   186e4:	cmp	r0, #0
   186e8:	beq	1871c <__assert_fail@plt+0x5c6c>
   186ec:	movw	r0, #38718	; 0x973e
   186f0:	mov	r1, sp
   186f4:	mov	r2, #8
   186f8:	movt	r0, #4
   186fc:	bl	127a4 <bcmp@plt>
   18700:	vldr	s0, [pc, #52]	; 1873c <__assert_fail@plt+0x5c8c>
   18704:	vcmpe.f32	s16, s0
   18708:	vmrs	APSR_nzcv, fpscr
   1870c:	movwge	r4, #1
   18710:	cmp	r0, #0
   18714:	movne	r4, #1
   18718:	b	1872c <__assert_fail@plt+0x5c7c>
   1871c:	vldr	s0, [pc, #28]	; 18740 <__assert_fail@plt+0x5c90>
   18720:	vcmpe.f32	s16, s0
   18724:	vmrs	APSR_nzcv, fpscr
   18728:	movwge	r4, #1
   1872c:	mov	r0, r4
   18730:	sub	sp, fp, #24
   18734:	vpop	{d8}
   18738:	pop	{r4, r5, r6, r7, fp, pc}
   1873c:	submi	r6, r6, r6, ror #12
   18740:	andmi	ip, ip, sp, asr #25
   18744:	push	{r4, sl, fp, lr}
   18748:	add	fp, sp, #8
   1874c:	movw	r4, #61000	; 0xee48
   18750:	movt	r4, #5
   18754:	ldrb	r0, [r4, #32]
   18758:	cmp	r0, #0
   1875c:	popeq	{r4, sl, fp, pc}
   18760:	bl	15eec <__assert_fail@plt+0x343c>
   18764:	bl	18774 <__assert_fail@plt+0x5cc4>
   18768:	mov	r0, #0
   1876c:	strb	r0, [r4, #32]
   18770:	pop	{r4, sl, fp, pc}
   18774:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   18778:	add	fp, sp, #28
   1877c:	sub	sp, sp, #4
   18780:	cmp	r0, #0
   18784:	beq	18838 <__assert_fail@plt+0x5d88>
   18788:	movw	r6, #61000	; 0xee48
   1878c:	movw	r7, #16804	; 0x41a4
   18790:	movw	r8, #39480	; 0x9a38
   18794:	movw	sl, #58736	; 0xe570
   18798:	movw	r5, #18792	; 0x4968
   1879c:	mov	r4, r0
   187a0:	mov	r9, #0
   187a4:	movt	r6, #5
   187a8:	movt	r7, #1
   187ac:	movt	r8, #1
   187b0:	movt	sl, #5
   187b4:	movt	r5, #1
   187b8:	b	187c8 <__assert_fail@plt+0x5d18>
   187bc:	ldr	r4, [r4, #160]	; 0xa0
   187c0:	cmp	r4, #0
   187c4:	beq	18838 <__assert_fail@plt+0x5d88>
   187c8:	ldrb	r0, [r6, #32]
   187cc:	cmp	r0, #0
   187d0:	beq	18840 <__assert_fail@plt+0x5d90>
   187d4:	ldr	r0, [r4, #156]	; 0x9c
   187d8:	bl	18774 <__assert_fail@plt+0x5cc4>
   187dc:	ldr	r0, [r4]
   187e0:	cmp	r0, r7
   187e4:	cmpne	r0, r5
   187e8:	bne	187bc <__assert_fail@plt+0x5d0c>
   187ec:	mov	r2, r4
   187f0:	ldrb	r0, [r2, #40]!	; 0x28
   187f4:	cmp	r0, #0
   187f8:	beq	187bc <__assert_fail@plt+0x5d0c>
   187fc:	ldr	r0, [r4, #116]	; 0x74
   18800:	cmp	r0, #0
   18804:	beq	187bc <__assert_fail@plt+0x5d0c>
   18808:	ldr	r0, [r4, #144]	; 0x90
   1880c:	mov	r1, r8
   18810:	bl	208c4 <__assert_fail@plt+0xde14>
   18814:	ldr	r0, [r4, #144]	; 0x90
   18818:	ldr	r1, [sl]
   1881c:	cmp	r0, r1
   18820:	beq	187bc <__assert_fail@plt+0x5d0c>
   18824:	bl	2d020 <__assert_fail@plt+0x1a570>
   18828:	ldr	r0, [r4, #144]	; 0x90
   1882c:	bl	30174 <__assert_fail@plt+0x1d6c4>
   18830:	str	r9, [r4, #144]	; 0x90
   18834:	b	187bc <__assert_fail@plt+0x5d0c>
   18838:	sub	sp, fp, #28
   1883c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   18840:	movw	r0, #39768	; 0x9b58
   18844:	movw	r1, #36865	; 0x9001
   18848:	movw	r3, #39795	; 0x9b73
   1884c:	mov	r2, #396	; 0x18c
   18850:	movt	r0, #4
   18854:	movt	r1, #4
   18858:	movt	r3, #4
   1885c:	bl	12ab0 <__assert_fail@plt>
   18860:	push	{r4, r5, fp, lr}
   18864:	add	fp, sp, #8
   18868:	cmp	r0, #0
   1886c:	popeq	{r4, r5, fp, pc}
   18870:	movw	r5, #16800	; 0x41a0
   18874:	mov	r4, r0
   18878:	movt	r5, #1
   1887c:	b	1888c <__assert_fail@plt+0x5ddc>
   18880:	ldr	r4, [r4, #160]	; 0xa0
   18884:	cmp	r4, #0
   18888:	beq	188cc <__assert_fail@plt+0x5e1c>
   1888c:	ldr	r0, [r4, #156]	; 0x9c
   18890:	bl	18860 <__assert_fail@plt+0x5db0>
   18894:	ldr	r0, [r4]
   18898:	cmp	r0, r5
   1889c:	bne	18880 <__assert_fail@plt+0x5dd0>
   188a0:	mov	r0, r4
   188a4:	ldrb	r1, [r0, #40]!	; 0x28
   188a8:	cmp	r1, #0
   188ac:	beq	18880 <__assert_fail@plt+0x5dd0>
   188b0:	ldr	r1, [r4, #116]	; 0x74
   188b4:	cmp	r1, #0
   188b8:	beq	18880 <__assert_fail@plt+0x5dd0>
   188bc:	add	r0, r0, #4
   188c0:	add	r1, r4, #88	; 0x58
   188c4:	bl	1ffec <__assert_fail@plt+0xd53c>
   188c8:	b	18880 <__assert_fail@plt+0x5dd0>
   188cc:	pop	{r4, r5, fp, pc}
   188d0:	push	{r4, r5, fp, lr}
   188d4:	add	fp, sp, #8
   188d8:	sub	sp, sp, #8
   188dc:	mov	r0, #8
   188e0:	bl	2e038 <__assert_fail@plt+0x1b588>
   188e4:	movw	r5, #58736	; 0xe570
   188e8:	movt	r5, #5
   188ec:	str	r0, [r5]
   188f0:	bl	2cfa8 <__assert_fail@plt+0x1a4f8>
   188f4:	cmp	r0, #0
   188f8:	subeq	sp, fp, #8
   188fc:	popeq	{r4, r5, fp, pc}
   18900:	bl	12804 <__errno_location@plt>
   18904:	movw	r1, #38726	; 0x9746
   18908:	ldr	r4, [r0]
   1890c:	mov	r0, #0
   18910:	mov	r2, #5
   18914:	movt	r1, #4
   18918:	bl	12564 <dcgettext@plt>
   1891c:	mov	r2, r0
   18920:	ldr	r0, [r5]
   18924:	ldr	r1, [r0]
   18928:	cmn	r1, #1
   1892c:	bgt	18954 <__assert_fail@plt+0x5ea4>
   18930:	ldr	r0, [r0, #4]
   18934:	movw	r1, #38711	; 0x9737
   18938:	movw	r3, #46220	; 0xb48c
   1893c:	movt	r1, #4
   18940:	movt	r3, #4
   18944:	cmp	r0, #0
   18948:	moveq	r3, r1
   1894c:	moveq	r0, r1
   18950:	b	18960 <__assert_fail@plt+0x5eb0>
   18954:	movw	r3, #38711	; 0x9737
   18958:	movt	r3, #4
   1895c:	mov	r0, r3
   18960:	str	r0, [sp]
   18964:	mov	r0, #1
   18968:	mov	r1, r4
   1896c:	bl	1269c <error@plt>
   18970:	push	{r4, r5, fp, lr}
   18974:	add	fp, sp, #8
   18978:	sub	sp, sp, #8
   1897c:	bl	15eec <__assert_fail@plt+0x343c>
   18980:	cmp	r0, #0
   18984:	beq	189d8 <__assert_fail@plt+0x5f28>
   18988:	movw	r1, #34912	; 0x8860
   1898c:	mov	r4, r0
   18990:	movt	r1, #1
   18994:	bl	18b18 <__assert_fail@plt+0x6068>
   18998:	movw	r5, #61000	; 0xee48
   1899c:	movt	r5, #5
   189a0:	ldrb	r0, [r5, #32]
   189a4:	cmp	r0, #0
   189a8:	beq	189bc <__assert_fail@plt+0x5f0c>
   189ac:	bl	15eec <__assert_fail@plt+0x343c>
   189b0:	bl	18774 <__assert_fail@plt+0x5cc4>
   189b4:	mov	r0, #0
   189b8:	strb	r0, [r5, #32]
   189bc:	ldr	r0, [r5, #36]	; 0x24
   189c0:	bl	19bb8 <__assert_fail@plt+0x7108>
   189c4:	movw	r1, #35664	; 0x8b50
   189c8:	mov	r0, r4
   189cc:	movt	r1, #1
   189d0:	bl	18b18 <__assert_fail@plt+0x6068>
   189d4:	b	189e8 <__assert_fail@plt+0x5f38>
   189d8:	movw	r0, #61000	; 0xee48
   189dc:	movt	r0, #5
   189e0:	ldr	r0, [r0, #36]	; 0x24
   189e4:	bl	19bb8 <__assert_fail@plt+0x7108>
   189e8:	movw	r5, #58736	; 0xe570
   189ec:	movt	r5, #5
   189f0:	ldr	r0, [r5]
   189f4:	bl	2d004 <__assert_fail@plt+0x1a554>
   189f8:	cmp	r0, #0
   189fc:	bne	18aa0 <__assert_fail@plt+0x5ff0>
   18a00:	ldr	r0, [r5]
   18a04:	bl	2d020 <__assert_fail@plt+0x1a570>
   18a08:	ldr	r0, [r5]
   18a0c:	bl	30174 <__assert_fail@plt+0x1d6c4>
   18a10:	mov	r0, #0
   18a14:	str	r0, [r5]
   18a18:	bl	20f18 <__assert_fail@plt+0xe468>
   18a1c:	cmp	r0, #0
   18a20:	beq	18a2c <__assert_fail@plt+0x5f7c>
   18a24:	bl	20f38 <__assert_fail@plt+0xe488>
   18a28:	bl	20ee8 <__assert_fail@plt+0xe438>
   18a2c:	movw	r0, #58716	; 0xe55c
   18a30:	movt	r0, #5
   18a34:	ldr	r0, [r0]
   18a38:	bl	30118 <__assert_fail@plt+0x1d668>
   18a3c:	cmn	r0, #1
   18a40:	beq	18a4c <__assert_fail@plt+0x5f9c>
   18a44:	sub	sp, fp, #8
   18a48:	pop	{r4, r5, fp, pc}
   18a4c:	bl	12804 <__errno_location@plt>
   18a50:	ldr	r4, [r0]
   18a54:	movw	r0, #61044	; 0xee74
   18a58:	movw	r2, #38771	; 0x9773
   18a5c:	movt	r0, #5
   18a60:	movt	r2, #4
   18a64:	ldr	r1, [r0, #72]	; 0x48
   18a68:	mov	r0, #0
   18a6c:	bl	2c88c <__assert_fail@plt+0x19ddc>
   18a70:	movw	r2, #56015	; 0xdacf
   18a74:	mov	r3, r0
   18a78:	mov	r0, #0
   18a7c:	mov	r1, r4
   18a80:	movt	r2, #4
   18a84:	bl	1269c <error@plt>
   18a88:	movw	r0, #61000	; 0xee48
   18a8c:	mov	r1, #1
   18a90:	movt	r0, #5
   18a94:	str	r1, [r0, #28]
   18a98:	sub	sp, fp, #8
   18a9c:	pop	{r4, r5, fp, pc}
   18aa0:	bl	12804 <__errno_location@plt>
   18aa4:	movw	r1, #39849	; 0x9ba9
   18aa8:	ldr	r4, [r0]
   18aac:	mov	r0, #0
   18ab0:	mov	r2, #5
   18ab4:	movt	r1, #4
   18ab8:	bl	12564 <dcgettext@plt>
   18abc:	mov	r2, r0
   18ac0:	ldr	r0, [r5]
   18ac4:	ldr	r1, [r0]
   18ac8:	cmn	r1, #1
   18acc:	bgt	18af4 <__assert_fail@plt+0x6044>
   18ad0:	ldr	r0, [r0, #4]
   18ad4:	movw	r1, #38711	; 0x9737
   18ad8:	movw	r3, #46220	; 0xb48c
   18adc:	movt	r1, #4
   18ae0:	movt	r3, #4
   18ae4:	cmp	r0, #0
   18ae8:	moveq	r3, r1
   18aec:	moveq	r0, r1
   18af0:	b	18b00 <__assert_fail@plt+0x6050>
   18af4:	movw	r3, #38711	; 0x9737
   18af8:	movt	r3, #4
   18afc:	mov	r0, r3
   18b00:	str	r0, [sp]
   18b04:	mov	r0, #0
   18b08:	mov	r1, r4
   18b0c:	bl	1269c <error@plt>
   18b10:	mov	r0, #1
   18b14:	bl	124d4 <_exit@plt>
   18b18:	push	{r4, r5, fp, lr}
   18b1c:	add	fp, sp, #8
   18b20:	mov	r4, r1
   18b24:	mov	r5, r0
   18b28:	ldr	r0, [r5, #156]	; 0x9c
   18b2c:	cmp	r0, #0
   18b30:	movne	r1, r4
   18b34:	blne	18b18 <__assert_fail@plt+0x6068>
   18b38:	mov	r0, r5
   18b3c:	blx	r4
   18b40:	ldr	r5, [r5, #160]	; 0xa0
   18b44:	cmp	r5, #0
   18b48:	bne	18b28 <__assert_fail@plt+0x6078>
   18b4c:	pop	{r4, r5, fp, pc}
   18b50:	ldr	r1, [r0]
   18b54:	movw	r2, #16980	; 0x4254
   18b58:	movt	r2, #1
   18b5c:	cmp	r1, r2
   18b60:	beq	18b90 <__assert_fail@plt+0x60e0>
   18b64:	movw	r2, #16828	; 0x41bc
   18b68:	movt	r2, #1
   18b6c:	cmp	r1, r2
   18b70:	movwne	r2, #16920	; 0x4218
   18b74:	movtne	r2, #1
   18b78:	cmpne	r1, r2
   18b7c:	beq	18b90 <__assert_fail@plt+0x60e0>
   18b80:	movw	r2, #42680	; 0xa6b8
   18b84:	movt	r2, #1
   18b88:	cmp	r1, r2
   18b8c:	bxne	lr
   18b90:	mov	r1, #0
   18b94:	str	r1, [r0, #44]	; 0x2c
   18b98:	bx	lr
   18b9c:	push	{r4, sl, fp, lr}
   18ba0:	add	fp, sp, #8
   18ba4:	mov	r4, r0
   18ba8:	movw	r0, #61044	; 0xee74
   18bac:	mov	r2, r1
   18bb0:	movt	r0, #5
   18bb4:	ldr	r1, [r0, #72]	; 0x48
   18bb8:	mov	r0, #0
   18bbc:	bl	2c88c <__assert_fail@plt+0x19ddc>
   18bc0:	movw	r2, #56015	; 0xdacf
   18bc4:	mov	r3, r0
   18bc8:	mov	r0, #0
   18bcc:	mov	r1, r4
   18bd0:	movt	r2, #4
   18bd4:	bl	1269c <error@plt>
   18bd8:	movw	r0, #61000	; 0xee48
   18bdc:	mov	r1, #1
   18be0:	movt	r0, #5
   18be4:	str	r1, [r0, #28]
   18be8:	pop	{r4, sl, fp, pc}
   18bec:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   18bf0:	add	fp, sp, #24
   18bf4:	sub	sp, sp, #8
   18bf8:	movw	r8, #61000	; 0xee48
   18bfc:	mov	r4, r1
   18c00:	mov	r5, r0
   18c04:	movt	r8, #5
   18c08:	ldr	r1, [r8, #16]
   18c0c:	cmn	r1, #100	; 0x64
   18c10:	beq	18c1c <__assert_fail@plt+0x616c>
   18c14:	cmn	r1, #1
   18c18:	ble	18cd0 <__assert_fail@plt+0x6220>
   18c1c:	ldr	r0, [r8]
   18c20:	cmp	r0, #0
   18c24:	beq	18c48 <__assert_fail@plt+0x6198>
   18c28:	mov	r0, #256	; 0x100
   18c2c:	mov	r2, r5
   18c30:	mov	r3, r4
   18c34:	str	r0, [sp]
   18c38:	mov	r0, #3
   18c3c:	bl	125dc <__fxstatat64@plt>
   18c40:	sub	sp, fp, #24
   18c44:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   18c48:	mov	r6, #0
   18c4c:	mov	r0, #3
   18c50:	mov	r2, r5
   18c54:	mov	r3, r4
   18c58:	str	r6, [sp]
   18c5c:	bl	125dc <__fxstatat64@plt>
   18c60:	cmp	r0, #0
   18c64:	beq	18ca4 <__assert_fail@plt+0x61f4>
   18c68:	mov	r7, r0
   18c6c:	bl	12804 <__errno_location@plt>
   18c70:	ldr	r0, [r0]
   18c74:	cmp	r0, #20
   18c78:	beq	18c88 <__assert_fail@plt+0x61d8>
   18c7c:	cmp	r0, #2
   18c80:	mov	r6, r7
   18c84:	bne	18ca4 <__assert_fail@plt+0x61f4>
   18c88:	movw	r0, #61044	; 0xee74
   18c8c:	movt	r0, #5
   18c90:	ldrb	r0, [r0, #44]	; 0x2c
   18c94:	tst	r0, #2
   18c98:	bne	18cb0 <__assert_fail@plt+0x6200>
   18c9c:	ldr	r1, [r8, #16]
   18ca0:	b	18c28 <__assert_fail@plt+0x6178>
   18ca4:	mov	r0, r6
   18ca8:	sub	sp, fp, #24
   18cac:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   18cb0:	movw	r0, #58704	; 0xe550
   18cb4:	movw	r1, #39897	; 0x9bd9
   18cb8:	mov	r2, r5
   18cbc:	movt	r0, #5
   18cc0:	movt	r1, #4
   18cc4:	ldr	r0, [r0]
   18cc8:	bl	127f8 <fprintf@plt>
   18ccc:	b	18c9c <__assert_fail@plt+0x61ec>
   18cd0:	movw	r0, #38787	; 0x9783
   18cd4:	movw	r1, #36865	; 0x9001
   18cd8:	movw	r3, #38809	; 0x9799
   18cdc:	movw	r2, #605	; 0x25d
   18ce0:	movt	r0, #4
   18ce4:	movt	r1, #4
   18ce8:	movt	r3, #4
   18cec:	bl	12ab0 <__assert_fail@plt>
   18cf0:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   18cf4:	add	fp, sp, #24
   18cf8:	sub	sp, sp, #8
   18cfc:	movw	r8, #61000	; 0xee48
   18d00:	mov	r4, r1
   18d04:	mov	r5, r0
   18d08:	movt	r8, #5
   18d0c:	ldr	r1, [r8, #16]
   18d10:	cmn	r1, #100	; 0x64
   18d14:	beq	18d20 <__assert_fail@plt+0x6270>
   18d18:	cmn	r1, #1
   18d1c:	ble	18dc4 <__assert_fail@plt+0x6314>
   18d20:	mov	r6, #0
   18d24:	mov	r0, #3
   18d28:	mov	r2, r5
   18d2c:	mov	r3, r4
   18d30:	str	r6, [sp]
   18d34:	bl	125dc <__fxstatat64@plt>
   18d38:	cmp	r0, #0
   18d3c:	beq	18d98 <__assert_fail@plt+0x62e8>
   18d40:	mov	r7, r0
   18d44:	bl	12804 <__errno_location@plt>
   18d48:	ldr	r0, [r0]
   18d4c:	cmp	r0, #20
   18d50:	beq	18d60 <__assert_fail@plt+0x62b0>
   18d54:	cmp	r0, #2
   18d58:	mov	r6, r7
   18d5c:	bne	18d98 <__assert_fail@plt+0x62e8>
   18d60:	movw	r0, #61044	; 0xee74
   18d64:	movt	r0, #5
   18d68:	ldrb	r0, [r0, #44]	; 0x2c
   18d6c:	tst	r0, #2
   18d70:	bne	18da4 <__assert_fail@plt+0x62f4>
   18d74:	ldr	r1, [r8, #16]
   18d78:	mov	r0, #256	; 0x100
   18d7c:	mov	r2, r5
   18d80:	mov	r3, r4
   18d84:	str	r0, [sp]
   18d88:	mov	r0, #3
   18d8c:	bl	125dc <__fxstatat64@plt>
   18d90:	sub	sp, fp, #24
   18d94:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   18d98:	mov	r0, r6
   18d9c:	sub	sp, fp, #24
   18da0:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   18da4:	movw	r0, #58704	; 0xe550
   18da8:	movw	r1, #39897	; 0x9bd9
   18dac:	mov	r2, r5
   18db0:	movt	r0, #5
   18db4:	movt	r1, #4
   18db8:	ldr	r0, [r0]
   18dbc:	bl	127f8 <fprintf@plt>
   18dc0:	b	18d74 <__assert_fail@plt+0x62c4>
   18dc4:	movw	r0, #38787	; 0x9783
   18dc8:	movw	r1, #36865	; 0x9001
   18dcc:	movw	r3, #38855	; 0x97c7
   18dd0:	mov	r2, #636	; 0x27c
   18dd4:	movt	r0, #4
   18dd8:	movt	r1, #4
   18ddc:	movt	r3, #4
   18de0:	bl	12ab0 <__assert_fail@plt>
   18de4:	push	{fp, lr}
   18de8:	mov	fp, sp
   18dec:	sub	sp, sp, #8
   18df0:	mov	r2, r0
   18df4:	movw	r0, #61000	; 0xee48
   18df8:	mov	r3, r1
   18dfc:	movt	r0, #5
   18e00:	ldr	r1, [r0, #16]
   18e04:	cmn	r1, #1
   18e08:	bgt	18e14 <__assert_fail@plt+0x6364>
   18e0c:	cmn	r1, #100	; 0x64
   18e10:	bne	18e2c <__assert_fail@plt+0x637c>
   18e14:	mov	r0, #256	; 0x100
   18e18:	str	r0, [sp]
   18e1c:	mov	r0, #3
   18e20:	bl	125dc <__fxstatat64@plt>
   18e24:	mov	sp, fp
   18e28:	pop	{fp, pc}
   18e2c:	movw	r0, #38901	; 0x97f5
   18e30:	movw	r1, #36865	; 0x9001
   18e34:	movw	r3, #38957	; 0x982d
   18e38:	movw	r2, #653	; 0x28d
   18e3c:	movt	r0, #4
   18e40:	movt	r1, #4
   18e44:	movt	r3, #4
   18e48:	bl	12ab0 <__assert_fail@plt>
   18e4c:	push	{r4, r5, fp, lr}
   18e50:	add	fp, sp, #8
   18e54:	sub	sp, sp, #8
   18e58:	mov	r5, r0
   18e5c:	movw	r0, #58776	; 0xe598
   18e60:	mov	r4, r1
   18e64:	movw	r1, #39003	; 0x985b
   18e68:	movt	r0, #5
   18e6c:	movt	r1, #4
   18e70:	ldrd	r2, [r0]
   18e74:	adds	r2, r2, #1
   18e78:	adc	r3, r3, #0
   18e7c:	strd	r2, [r0]
   18e80:	movw	r0, #58704	; 0xe550
   18e84:	mov	r2, r5
   18e88:	movt	r0, #5
   18e8c:	ldr	r0, [r0]
   18e90:	bl	127f8 <fprintf@plt>
   18e94:	movw	r0, #61044	; 0xee74
   18e98:	movt	r0, #5
   18e9c:	ldr	r0, [r0, #48]	; 0x30
   18ea0:	cmp	r0, #0
   18ea4:	beq	18ee0 <__assert_fail@plt+0x6430>
   18ea8:	cmp	r0, #2
   18eac:	beq	18ecc <__assert_fail@plt+0x641c>
   18eb0:	cmp	r0, #1
   18eb4:	bne	18f1c <__assert_fail@plt+0x646c>
   18eb8:	mov	r0, r5
   18ebc:	mov	r1, r4
   18ec0:	sub	sp, fp, #8
   18ec4:	pop	{r4, r5, fp, lr}
   18ec8:	b	18cf0 <__assert_fail@plt+0x6240>
   18ecc:	mov	r0, r5
   18ed0:	mov	r1, r4
   18ed4:	sub	sp, fp, #8
   18ed8:	pop	{r4, r5, fp, lr}
   18edc:	b	18bec <__assert_fail@plt+0x613c>
   18ee0:	movw	r0, #61000	; 0xee48
   18ee4:	movt	r0, #5
   18ee8:	ldr	r1, [r0, #16]
   18eec:	cmn	r1, #1
   18ef0:	bgt	18efc <__assert_fail@plt+0x644c>
   18ef4:	cmn	r1, #100	; 0x64
   18ef8:	bne	18f3c <__assert_fail@plt+0x648c>
   18efc:	mov	r0, #256	; 0x100
   18f00:	mov	r2, r5
   18f04:	mov	r3, r4
   18f08:	str	r0, [sp]
   18f0c:	mov	r0, #3
   18f10:	bl	125dc <__fxstatat64@plt>
   18f14:	sub	sp, fp, #8
   18f18:	pop	{r4, r5, fp, pc}
   18f1c:	movw	r0, #35937	; 0x8c61
   18f20:	movw	r1, #36865	; 0x9001
   18f24:	movw	r3, #39020	; 0x986c
   18f28:	movw	r2, #677	; 0x2a5
   18f2c:	movt	r0, #4
   18f30:	movt	r1, #4
   18f34:	movt	r3, #4
   18f38:	bl	12ab0 <__assert_fail@plt>
   18f3c:	movw	r0, #38901	; 0x97f5
   18f40:	movw	r1, #36865	; 0x9001
   18f44:	movw	r3, #38957	; 0x982d
   18f48:	movw	r2, #653	; 0x28d
   18f4c:	movt	r0, #4
   18f50:	movt	r1, #4
   18f54:	movt	r3, #4
   18f58:	bl	12ab0 <__assert_fail@plt>
   18f5c:	movw	r0, #61044	; 0xee74
   18f60:	movt	r0, #5
   18f64:	ldr	r0, [r0, #48]	; 0x30
   18f68:	cmp	r0, #1
   18f6c:	moveq	r0, #1
   18f70:	bxeq	lr
   18f74:	cmp	r0, #2
   18f78:	movne	r0, #0
   18f7c:	bxne	lr
   18f80:	movw	r0, #61000	; 0xee48
   18f84:	movt	r0, #5
   18f88:	ldr	r0, [r0]
   18f8c:	clz	r0, r0
   18f90:	lsr	r0, r0, #5
   18f94:	bx	lr
   18f98:	push	{r4, r5, fp, lr}
   18f9c:	add	fp, sp, #8
   18fa0:	mov	r4, r3
   18fa4:	ldr	r3, [r0]
   18fa8:	mov	r5, r0
   18fac:	cmp	r3, #0
   18fb0:	beq	1900c <__assert_fail@plt+0x655c>
   18fb4:	and	r0, r3, #61440	; 0xf000
   18fb8:	cmp	r0, #40960	; 0xa000
   18fbc:	bne	18ff0 <__assert_fail@plt+0x6540>
   18fc0:	movw	r0, #61044	; 0xee74
   18fc4:	movt	r0, #5
   18fc8:	ldr	r0, [r0, #48]	; 0x30
   18fcc:	cmp	r0, #1
   18fd0:	beq	19074 <__assert_fail@plt+0x65c4>
   18fd4:	cmp	r0, #2
   18fd8:	bne	18ff0 <__assert_fail@plt+0x6540>
   18fdc:	movw	r0, #61000	; 0xee48
   18fe0:	movt	r0, #5
   18fe4:	ldr	r0, [r0]
   18fe8:	cmp	r0, #0
   18fec:	beq	19074 <__assert_fail@plt+0x65c4>
   18ff0:	movw	r1, #61000	; 0xee48
   18ff4:	mov	r0, #1
   18ff8:	movt	r1, #5
   18ffc:	str	r3, [r1, #8]
   19000:	strb	r0, [r1, #5]
   19004:	str	r3, [r4, #16]
   19008:	pop	{r4, r5, fp, pc}
   1900c:	ldr	r0, [fp, #8]
   19010:	cmp	r0, #0
   19014:	beq	19034 <__assert_fail@plt+0x6584>
   19018:	movw	r0, #61000	; 0xee48
   1901c:	mov	r1, #0
   19020:	movt	r0, #5
   19024:	str	r1, [r0, #8]
   19028:	strh	r1, [r0, #4]
   1902c:	mov	r0, #1
   19030:	pop	{r4, r5, fp, pc}
   19034:	mov	r0, r1
   19038:	mov	r1, r2
   1903c:	mov	r2, r4
   19040:	bl	18500 <__assert_fail@plt+0x5a50>
   19044:	mov	r1, r0
   19048:	mov	r0, #0
   1904c:	cmp	r1, #0
   19050:	popne	{r4, r5, fp, pc}
   19054:	ldr	r1, [r4, #16]
   19058:	movw	r2, #61000	; 0xee48
   1905c:	mov	r0, #1
   19060:	movt	r2, #5
   19064:	str	r1, [r5]
   19068:	strb	r0, [r2, #5]
   1906c:	str	r1, [r2, #8]
   19070:	pop	{r4, r5, fp, pc}
   19074:	mov	r0, r1
   19078:	mov	r1, r2
   1907c:	mov	r2, r4
   19080:	bl	18500 <__assert_fail@plt+0x5a50>
   19084:	mov	r1, r0
   19088:	mov	r0, #0
   1908c:	cmp	r1, #0
   19090:	beq	19098 <__assert_fail@plt+0x65e8>
   19094:	pop	{r4, r5, fp, pc}
   19098:	ldr	r0, [r4, #16]
   1909c:	movw	r1, #61000	; 0xee48
   190a0:	movt	r1, #5
   190a4:	str	r0, [r1, #8]
   190a8:	str	r0, [r5]
   190ac:	mov	r0, #1
   190b0:	strb	r0, [r1, #5]
   190b4:	pop	{r4, r5, fp, pc}
   190b8:	mov	r1, r0
   190bc:	mov	r0, #1
   190c0:	cmp	r1, #0
   190c4:	bxeq	lr
   190c8:	ldrb	r2, [r1, #17]
   190cc:	cmp	r2, #0
   190d0:	bne	190dc <__assert_fail@plt+0x662c>
   190d4:	ldr	r1, [r1, #152]	; 0x98
   190d8:	b	190c0 <__assert_fail@plt+0x6610>
   190dc:	mov	r0, #0
   190e0:	bx	lr
   190e4:	mov	ip, r0
   190e8:	ldrb	r0, [r0]
   190ec:	sub	r3, r0, #33	; 0x21
   190f0:	mov	r0, #0
   190f4:	cmp	r3, #12
   190f8:	bxhi	lr
   190fc:	add	r2, pc, #0
   19100:	ldr	pc, [r2, r3, lsl #2]
   19104:	andeq	r9, r1, r8, lsr r1
   19108:	andeq	r9, r1, r4, asr #2
   1910c:	andeq	r9, r1, r4, asr #2
   19110:	andeq	r9, r1, r4, asr #2
   19114:	andeq	r9, r1, r4, asr #2
   19118:	andeq	r9, r1, r4, asr #2
   1911c:	andeq	r9, r1, r4, asr #2
   19120:	andeq	r9, r1, r8, lsr r1
   19124:	andeq	r9, r1, r8, asr #2
   19128:	andeq	r9, r1, r4, asr #2
   1912c:	andeq	r9, r1, r4, asr #2
   19130:	andeq	r9, r1, r8, asr #2
   19134:	andeq	r9, r1, r0, ror #2
   19138:	ldrb	r0, [ip, #1]
   1913c:	clz	r0, r0
   19140:	lsr	r0, r0, #5
   19144:	bx	lr
   19148:	eor	r0, r1, #1
   1914c:	ldrb	r1, [ip, #1]
   19150:	clz	r1, r1
   19154:	lsr	r1, r1, #5
   19158:	and	r0, r1, r0
   1915c:	bx	lr
   19160:	ldrb	r0, [ip, #1]
   19164:	cmp	r0, #0
   19168:	movwne	r0, #1
   1916c:	bx	lr
   19170:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   19174:	add	fp, sp, #28
   19178:	sub	sp, sp, #20
   1917c:	mov	r4, #1
   19180:	cmp	r0, #2
   19184:	blt	19500 <__assert_fail@plt+0x6a50>
   19188:	movw	r5, #39064	; 0x9898
   1918c:	movw	sl, #39067	; 0x989b
   19190:	movw	r8, #61044	; 0xee74
   19194:	mov	r9, r1
   19198:	mov	r6, r0
   1919c:	mov	r4, #1
   191a0:	movt	r5, #4
   191a4:	movt	sl, #4
   191a8:	movt	r8, #5
   191ac:	b	191c4 <__assert_fail@plt+0x6714>
   191b0:	mov	r0, #2
   191b4:	bl	1bd18 <__assert_fail@plt+0x9268>
   191b8:	add	r4, r4, #1
   191bc:	cmp	r4, r6
   191c0:	bge	19500 <__assert_fail@plt+0x6a50>
   191c4:	ldr	r7, [r9, r4, lsl #2]
   191c8:	mov	r0, r5
   191cc:	mov	r1, r7
   191d0:	bl	123fc <strcmp@plt>
   191d4:	cmp	r0, #0
   191d8:	beq	191b0 <__assert_fail@plt+0x6700>
   191dc:	mov	r0, sl
   191e0:	mov	r1, r7
   191e4:	bl	123fc <strcmp@plt>
   191e8:	cmp	r0, #0
   191ec:	beq	192f8 <__assert_fail@plt+0x6848>
   191f0:	movw	r0, #39070	; 0x989e
   191f4:	mov	r1, r7
   191f8:	movt	r0, #4
   191fc:	bl	123fc <strcmp@plt>
   19200:	cmp	r0, #0
   19204:	beq	19300 <__assert_fail@plt+0x6850>
   19208:	movw	r0, #39073	; 0x98a1
   1920c:	mov	r1, r7
   19210:	movt	r0, #4
   19214:	bl	123fc <strcmp@plt>
   19218:	cmp	r0, #0
   1921c:	beq	194fc <__assert_fail@plt+0x6a4c>
   19220:	movw	r0, #39076	; 0x98a4
   19224:	mov	r1, r7
   19228:	movt	r0, #4
   1922c:	bl	123fc <strcmp@plt>
   19230:	cmp	r0, #0
   19234:	beq	19308 <__assert_fail@plt+0x6858>
   19238:	movw	r0, #40139	; 0x9ccb
   1923c:	mov	r1, r7
   19240:	mov	r2, #2
   19244:	movt	r0, #4
   19248:	bl	12a50 <strncmp@plt>
   1924c:	cmp	r0, #0
   19250:	bne	19500 <__assert_fail@plt+0x6a50>
   19254:	ldrb	r5, [r7, #2]!
   19258:	cmp	r5, #0
   1925c:	beq	19518 <__assert_fail@plt+0x6a68>
   19260:	mov	sl, r6
   19264:	bl	12768 <__ctype_b_loc@plt>
   19268:	ldr	r0, [r0]
   1926c:	add	r0, r0, r5, lsl #1
   19270:	ldrb	r0, [r0, #1]
   19274:	tst	r0, #8
   19278:	beq	1950c <__assert_fail@plt+0x6a5c>
   1927c:	bl	12804 <__errno_location@plt>
   19280:	mov	r6, r0
   19284:	ldr	r0, [r0]
   19288:	add	r1, sp, #16
   1928c:	mov	r2, #10
   19290:	str	r0, [sp, #4]
   19294:	mov	r0, #0
   19298:	str	r0, [r6]
   1929c:	mov	r0, r7
   192a0:	bl	127b0 <strtoul@plt>
   192a4:	mov	r5, r0
   192a8:	ldr	r0, [sp, #16]
   192ac:	cmp	r5, #0
   192b0:	cmpeq	r0, r7
   192b4:	beq	1950c <__assert_fail@plt+0x6a5c>
   192b8:	ldrb	r0, [r0]
   192bc:	cmp	r0, #0
   192c0:	bne	1953c <__assert_fail@plt+0x6a8c>
   192c4:	cmn	r5, #1
   192c8:	beq	19564 <__assert_fail@plt+0x6ab4>
   192cc:	cmp	r5, #65536	; 0x10000
   192d0:	bcs	19570 <__assert_fail@plt+0x6ac0>
   192d4:	ldr	r0, [sp, #4]
   192d8:	strh	r5, [r8, #68]	; 0x44
   192dc:	movw	r5, #39064	; 0x9898
   192e0:	movt	r5, #4
   192e4:	str	r0, [r6]
   192e8:	mov	r6, sl
   192ec:	movw	sl, #39067	; 0x989b
   192f0:	movt	sl, #4
   192f4:	b	191b8 <__assert_fail@plt+0x6708>
   192f8:	mov	r0, #1
   192fc:	b	191b4 <__assert_fail@plt+0x6704>
   19300:	mov	r0, #0
   19304:	b	191b4 <__assert_fail@plt+0x6704>
   19308:	add	r4, r4, #1
   1930c:	cmp	r4, r6
   19310:	bge	195c0 <__assert_fail@plt+0x6b10>
   19314:	ldr	r1, [r9, r4, lsl #2]
   19318:	mov	r0, #0
   1931c:	add	r2, sp, #12
   19320:	str	r0, [sp, #12]
   19324:	mov	r0, #44	; 0x2c
   19328:	strh	r0, [sp, #10]
   1932c:	str	r1, [sp, #4]
   19330:	mov	r0, r1
   19334:	add	r1, sp, #10
   19338:	bl	12690 <strtok_r@plt>
   1933c:	cmp	r0, #0
   19340:	beq	195cc <__assert_fail@plt+0x6b1c>
   19344:	mov	r7, r0
   19348:	movw	r0, #43747	; 0xaae3
   1934c:	mov	r1, r7
   19350:	movt	r0, #4
   19354:	bl	123fc <strcmp@plt>
   19358:	cmp	r0, #0
   1935c:	beq	19460 <__assert_fail@plt+0x69b0>
   19360:	movw	r0, #39405	; 0x99ed
   19364:	mov	r1, r7
   19368:	movt	r0, #4
   1936c:	bl	123fc <strcmp@plt>
   19370:	cmp	r0, #0
   19374:	beq	19468 <__assert_fail@plt+0x69b8>
   19378:	movw	r0, #39462	; 0x9a26
   1937c:	mov	r1, r7
   19380:	movt	r0, #4
   19384:	bl	123fc <strcmp@plt>
   19388:	cmp	r0, #0
   1938c:	beq	19470 <__assert_fail@plt+0x69c0>
   19390:	movw	r0, #39512	; 0x9a58
   19394:	mov	r1, r7
   19398:	movt	r0, #4
   1939c:	bl	123fc <strcmp@plt>
   193a0:	cmp	r0, #0
   193a4:	beq	19478 <__assert_fail@plt+0x69c8>
   193a8:	movw	r0, #42840	; 0xa758
   193ac:	mov	r1, r7
   193b0:	movt	r0, #4
   193b4:	bl	123fc <strcmp@plt>
   193b8:	cmp	r0, #0
   193bc:	beq	19480 <__assert_fail@plt+0x69d0>
   193c0:	movw	r0, #42756	; 0xa704
   193c4:	mov	r1, r7
   193c8:	movt	r0, #4
   193cc:	bl	123fc <strcmp@plt>
   193d0:	cmp	r0, #0
   193d4:	beq	19488 <__assert_fail@plt+0x69d8>
   193d8:	movw	r0, #39694	; 0x9b0e
   193dc:	mov	r1, r7
   193e0:	movt	r0, #4
   193e4:	bl	123fc <strcmp@plt>
   193e8:	cmp	r0, #0
   193ec:	beq	19490 <__assert_fail@plt+0x69e0>
   193f0:	movw	r0, #40759	; 0x9f37
   193f4:	mov	r1, r7
   193f8:	movt	r0, #4
   193fc:	bl	123fc <strcmp@plt>
   19400:	cmp	r0, #0
   19404:	beq	19498 <__assert_fail@plt+0x69e8>
   19408:	movw	r0, #43219	; 0xa8d3
   1940c:	mov	r1, r7
   19410:	movt	r0, #4
   19414:	bl	123fc <strcmp@plt>
   19418:	cmp	r0, #0
   1941c:	beq	194a0 <__assert_fail@plt+0x69f0>
   19420:	movw	r1, #39956	; 0x9c14
   19424:	mov	r0, #0
   19428:	mov	r2, #5
   1942c:	movt	r1, #4
   19430:	bl	12564 <dcgettext@plt>
   19434:	ldr	r1, [r8, #72]	; 0x48
   19438:	ldr	r2, [sp, #4]
   1943c:	mov	r7, r0
   19440:	mov	r0, #0
   19444:	bl	2c88c <__assert_fail@plt+0x19ddc>
   19448:	mov	r3, r0
   1944c:	mov	r0, #0
   19450:	mov	r1, #0
   19454:	mov	r2, r7
   19458:	bl	1269c <error@plt>
   1945c:	b	194c4 <__assert_fail@plt+0x6a14>
   19460:	mov	r0, #0
   19464:	b	194a4 <__assert_fail@plt+0x69f4>
   19468:	mov	r0, #1
   1946c:	b	194a4 <__assert_fail@plt+0x69f4>
   19470:	mov	r0, #2
   19474:	b	194a4 <__assert_fail@plt+0x69f4>
   19478:	mov	r0, #3
   1947c:	b	194a4 <__assert_fail@plt+0x69f4>
   19480:	mov	r0, #4
   19484:	b	194a4 <__assert_fail@plt+0x69f4>
   19488:	mov	r0, #5
   1948c:	b	194a4 <__assert_fail@plt+0x69f4>
   19490:	mov	r0, #6
   19494:	b	194a4 <__assert_fail@plt+0x69f4>
   19498:	mov	r0, #7
   1949c:	b	194a4 <__assert_fail@plt+0x69f4>
   194a0:	mov	r0, #8
   194a4:	movw	r1, #40320	; 0x9d80
   194a8:	add	r0, r0, r0, lsl #1
   194ac:	movt	r1, #4
   194b0:	add	r0, r1, r0, lsl #2
   194b4:	ldr	r1, [r8, #44]	; 0x2c
   194b8:	ldr	r0, [r0, #4]
   194bc:	orr	r0, r1, r0
   194c0:	str	r0, [r8, #44]	; 0x2c
   194c4:	mov	r0, #0
   194c8:	add	r1, sp, #10
   194cc:	add	r2, sp, #12
   194d0:	bl	12690 <strtok_r@plt>
   194d4:	mov	r7, r0
   194d8:	cmp	r0, #0
   194dc:	bne	19348 <__assert_fail@plt+0x6898>
   194e0:	ldrb	r0, [r8, #44]	; 0x2c
   194e4:	tst	r0, #16
   194e8:	beq	191b8 <__assert_fail@plt+0x6708>
   194ec:	mov	r0, #1
   194f0:	bl	182d0 <__assert_fail@plt+0x5820>
   194f4:	mov	r0, #0
   194f8:	bl	12780 <exit@plt>
   194fc:	add	r4, r4, #1
   19500:	mov	r0, r4
   19504:	sub	sp, fp, #28
   19508:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1950c:	movw	r1, #40089	; 0x9c99
   19510:	movt	r1, #4
   19514:	b	19520 <__assert_fail@plt+0x6a70>
   19518:	movw	r1, #40025	; 0x9c59
   1951c:	movt	r1, #4
   19520:	mov	r0, #0
   19524:	mov	r2, #5
   19528:	bl	12564 <dcgettext@plt>
   1952c:	mov	r2, r0
   19530:	mov	r0, #1
   19534:	mov	r1, #0
   19538:	bl	1269c <error@plt>
   1953c:	movw	r1, #40142	; 0x9cce
   19540:	mov	r0, #0
   19544:	mov	r2, #5
   19548:	movt	r1, #4
   1954c:	bl	12564 <dcgettext@plt>
   19550:	mov	r2, r0
   19554:	mov	r0, #1
   19558:	mov	r1, #0
   1955c:	mov	r3, r7
   19560:	bl	1269c <error@plt>
   19564:	ldr	r4, [r6]
   19568:	cmp	r4, #0
   1956c:	bne	19598 <__assert_fail@plt+0x6ae8>
   19570:	movw	r1, #40172	; 0x9cec
   19574:	mov	r0, #0
   19578:	mov	r2, #5
   1957c:	movt	r1, #4
   19580:	bl	12564 <dcgettext@plt>
   19584:	mov	r2, r0
   19588:	mov	r0, #1
   1958c:	mov	r1, #0
   19590:	mov	r3, r5
   19594:	bl	1269c <error@plt>
   19598:	movw	r1, #40142	; 0x9cce
   1959c:	mov	r0, #0
   195a0:	mov	r2, #5
   195a4:	movt	r1, #4
   195a8:	bl	12564 <dcgettext@plt>
   195ac:	mov	r2, r0
   195b0:	mov	r0, #1
   195b4:	mov	r1, r4
   195b8:	mov	r3, r7
   195bc:	bl	1269c <error@plt>
   195c0:	movw	r1, #39079	; 0x98a7
   195c4:	movt	r1, #4
   195c8:	b	195d4 <__assert_fail@plt+0x6b24>
   195cc:	movw	r1, #39992	; 0x9c38
   195d0:	movt	r1, #4
   195d4:	mov	r0, #0
   195d8:	mov	r2, #5
   195dc:	bl	12564 <dcgettext@plt>
   195e0:	mov	r2, r0
   195e4:	mov	r0, #0
   195e8:	mov	r1, #0
   195ec:	bl	1269c <error@plt>
   195f0:	mov	r0, #1
   195f4:	bl	18110 <__assert_fail@plt+0x5660>
   195f8:	push	{r4, r5, r6, sl, fp, lr}
   195fc:	add	fp, sp, #16
   19600:	vpush	{d8}
   19604:	sub	sp, sp, #392	; 0x188
   19608:	mov	r4, r0
   1960c:	movw	r0, #39117	; 0x98cd
   19610:	movt	r0, #4
   19614:	bl	126d8 <getenv@plt>
   19618:	cmp	r0, #0
   1961c:	mov	r5, sp
   19620:	movwne	r0, #1
   19624:	strb	r0, [r4, #17]
   19628:	mov	r0, r5
   1962c:	bl	1254c <uname@plt>
   19630:	cmp	r0, #0
   19634:	beq	19640 <__assert_fail@plt+0x6b90>
   19638:	mov	r6, #1
   1963c:	b	196b4 <__assert_fail@plt+0x6c04>
   19640:	add	r0, r5, #130	; 0x82
   19644:	mov	r1, #0
   19648:	mov	r6, #0
   1964c:	bl	12870 <strtod@plt>
   19650:	movw	r0, #38712	; 0x9738
   19654:	mov	r1, r5
   19658:	mov	r2, #6
   1965c:	vmov.f64	d8, d0
   19660:	movt	r0, #4
   19664:	bl	127a4 <bcmp@plt>
   19668:	vcvt.f32.f64	s16, d8
   1966c:	cmp	r0, #0
   19670:	beq	196a4 <__assert_fail@plt+0x6bf4>
   19674:	movw	r0, #38718	; 0x973e
   19678:	mov	r1, sp
   1967c:	mov	r2, #8
   19680:	movt	r0, #4
   19684:	bl	127a4 <bcmp@plt>
   19688:	vldr	s0, [pc, #372]	; 19804 <__assert_fail@plt+0x6d54>
   1968c:	vcmpe.f32	s16, s0
   19690:	vmrs	APSR_nzcv, fpscr
   19694:	movwge	r6, #1
   19698:	cmp	r0, #0
   1969c:	movne	r6, #1
   196a0:	b	196b4 <__assert_fail@plt+0x6c04>
   196a4:	vldr	s0, [pc, #348]	; 19808 <__assert_fail@plt+0x6d58>
   196a8:	vcmpe.f32	s16, s0
   196ac:	vmrs	APSR_nzcv, fpscr
   196b0:	movwge	r6, #1
   196b4:	mov	r5, #0
   196b8:	mov	r0, #0
   196bc:	str	r5, [r4, #60]	; 0x3c
   196c0:	strb	r6, [r4, #56]	; 0x38
   196c4:	bl	12a20 <isatty@plt>
   196c8:	cmp	r0, #0
   196cc:	strb	r5, [r4, #15]
   196d0:	mov	r1, #1
   196d4:	movwne	r0, #1
   196d8:	strb	r0, [r4, #16]
   196dc:	ldrb	r0, [r4, #17]
   196e0:	cmp	r0, #0
   196e4:	mvn	r0, #0
   196e8:	strbne	r5, [r4, #16]
   196ec:	strh	r1, [r4]
   196f0:	str	r0, [r4, #4]
   196f4:	str	r0, [r4, #8]
   196f8:	mov	r0, sp
   196fc:	mov	r1, #0
   19700:	mov	r5, #0
   19704:	bl	1266c <gettimeofday@plt>
   19708:	cmp	r0, #0
   1970c:	beq	19728 <__assert_fail@plt+0x6c78>
   19710:	mov	r0, #0
   19714:	bl	12534 <time@plt>
   19718:	cmn	r0, #1
   1971c:	beq	197e4 <__assert_fail@plt+0x6d34>
   19720:	mov	r1, #0
   19724:	b	19738 <__assert_fail@plt+0x6c88>
   19728:	mov	r2, #1000	; 0x3e8
   1972c:	ldm	sp, {r0, r1}
   19730:	mov	r5, #0
   19734:	mul	r1, r1, r2
   19738:	orr	r3, r5, r0
   1973c:	sub	r0, r0, #4480	; 0x1180
   19740:	add	r2, r4, #20
   19744:	mov	r5, #0
   19748:	sub	r0, r0, #81920	; 0x14000
   1974c:	str	r3, [r2]
   19750:	str	r1, [r2, #4]
   19754:	strb	r5, [r4, #36]	; 0x24
   19758:	str	r0, [r4, #28]
   1975c:	mov	r0, #2
   19760:	str	r1, [r4, #32]
   19764:	strh	r5, [r4, #13]
   19768:	mov	r1, #512	; 0x200
   1976c:	strh	r0, [r4, #68]	; 0x44
   19770:	ldrb	r0, [r4, #17]
   19774:	cmp	r0, #0
   19778:	movw	r0, #39133	; 0x98dd
   1977c:	movt	r0, #4
   19780:	movweq	r1, #1024	; 0x400
   19784:	str	r1, [r4, #40]	; 0x28
   19788:	str	r5, [r4, #44]	; 0x2c
   1978c:	bl	126d8 <getenv@plt>
   19790:	cmp	r0, #0
   19794:	bne	197c0 <__assert_fail@plt+0x6d10>
   19798:	mov	r0, #0
   1979c:	strb	r5, [r4, #12]
   197a0:	bl	1bd18 <__assert_fail@plt+0x9268>
   197a4:	mov	r0, #8
   197a8:	strb	r5, [r4, #80]	; 0x50
   197ac:	str	r0, [r4, #72]	; 0x48
   197b0:	str	r5, [r4, #76]	; 0x4c
   197b4:	sub	sp, fp, #24
   197b8:	vpop	{d8}
   197bc:	pop	{r4, r5, r6, sl, fp, pc}
   197c0:	movw	r1, #39149	; 0x98ed
   197c4:	mov	r0, #0
   197c8:	mov	r2, #5
   197cc:	movt	r1, #4
   197d0:	bl	12564 <dcgettext@plt>
   197d4:	mov	r2, r0
   197d8:	mov	r0, #1
   197dc:	mov	r1, #0
   197e0:	bl	1269c <error@plt>
   197e4:	movw	r0, #40276	; 0x9d54
   197e8:	movw	r1, #36865	; 0x9001
   197ec:	movw	r3, #40292	; 0x9d64
   197f0:	movw	r2, #978	; 0x3d2
   197f4:	movt	r0, #4
   197f8:	movt	r1, #4
   197fc:	movt	r3, #4
   19800:	bl	12ab0 <__assert_fail@plt>
   19804:	submi	r6, r6, r6, ror #12
   19808:	andmi	ip, ip, sp, asr #25
   1980c:	push	{r4, r5, r6, sl, fp, lr}
   19810:	add	fp, sp, #16
   19814:	mov	r6, r0
   19818:	ldr	r0, [r2, #164]	; 0xa4
   1981c:	mov	r4, r2
   19820:	mov	r5, r1
   19824:	add	r0, r0, #1
   19828:	str	r0, [r2, #164]	; 0xa4
   1982c:	ldrb	r0, [r2, #18]
   19830:	cmp	r0, #0
   19834:	movw	r0, #61000	; 0xee48
   19838:	movt	r0, #5
   1983c:	beq	1985c <__assert_fail@plt+0x6dac>
   19840:	ldrb	r1, [r0, #4]
   19844:	cmp	r1, #0
   19848:	beq	198d8 <__assert_fail@plt+0x6e28>
   1984c:	ldrb	r2, [r4, #19]
   19850:	cmp	r2, #0
   19854:	movwne	r2, #1
   19858:	b	1986c <__assert_fail@plt+0x6dbc>
   1985c:	ldrb	r1, [r4, #19]
   19860:	mov	r2, #1
   19864:	cmp	r1, #0
   19868:	beq	1988c <__assert_fail@plt+0x6ddc>
   1986c:	ldrb	r3, [r0, #5]
   19870:	cmp	r2, #0
   19874:	clz	r1, r3
   19878:	lsr	r1, r1, #5
   1987c:	beq	198a4 <__assert_fail@plt+0x6df4>
   19880:	cmp	r3, #0
   19884:	beq	198d8 <__assert_fail@plt+0x6e28>
   19888:	b	198a4 <__assert_fail@plt+0x6df4>
   1988c:	ldrb	r1, [r4, #20]
   19890:	cmp	r1, #0
   19894:	beq	198f8 <__assert_fail@plt+0x6e48>
   19898:	ldrb	r1, [r0, #5]
   1989c:	clz	r1, r1
   198a0:	lsr	r1, r1, #5
   198a4:	ldrb	r2, [r4, #20]
   198a8:	cmp	r2, #0
   198ac:	beq	198f8 <__assert_fail@plt+0x6e48>
   198b0:	ldrd	r2, [r5, #96]	; 0x60
   198b4:	orr	r2, r2, r3
   198b8:	clz	r2, r2
   198bc:	lsr	r2, r2, #5
   198c0:	orrs	r1, r1, r2
   198c4:	bne	198d8 <__assert_fail@plt+0x6e28>
   198c8:	ldr	r1, [r5, #16]
   198cc:	and	r1, r1, #61440	; 0xf000
   198d0:	cmp	r1, #16384	; 0x4000
   198d4:	bne	198f8 <__assert_fail@plt+0x6e48>
   198d8:	ldr	r1, [r0, #12]
   198dc:	mov	r0, r6
   198e0:	mov	r2, r5
   198e4:	bl	18500 <__assert_fail@plt+0x5a50>
   198e8:	mov	r1, r0
   198ec:	mov	r0, #0
   198f0:	cmp	r1, #0
   198f4:	popne	{r4, r5, r6, sl, fp, pc}
   198f8:	ldr	r3, [r4]
   198fc:	mov	r0, r6
   19900:	mov	r1, r5
   19904:	mov	r2, r4
   19908:	blx	r3
   1990c:	mov	r1, r0
   19910:	mov	r0, #0
   19914:	cmp	r1, #0
   19918:	beq	1992c <__assert_fail@plt+0x6e7c>
   1991c:	ldr	r0, [r4, #168]	; 0xa8
   19920:	add	r0, r0, #1
   19924:	str	r0, [r4, #168]	; 0xa8
   19928:	mov	r0, #1
   1992c:	pop	{r4, r5, r6, sl, fp, pc}
   19930:	movw	r1, #18792	; 0x4968
   19934:	movw	r2, #16804	; 0x41a4
   19938:	movt	r1, #1
   1993c:	movt	r2, #1
   19940:	sub	r1, r0, r1
   19944:	sub	r0, r0, r2
   19948:	clz	r1, r1
   1994c:	clz	r0, r0
   19950:	lsr	r1, r1, #5
   19954:	lsr	r0, r0, #5
   19958:	orr	r0, r0, r1
   1995c:	bx	lr
   19960:	mov	r2, r1
   19964:	movw	r1, #61044	; 0xee74
   19968:	movt	r1, #5
   1996c:	ldr	r1, [r1, #72]	; 0x48
   19970:	b	2c88c <__assert_fail@plt+0x19ddc>
   19974:	push	{r4, r5, r6, r7, fp, lr}
   19978:	add	fp, sp, #16
   1997c:	movw	r7, #61000	; 0xee48
   19980:	mov	r6, r0
   19984:	mov	r4, r2
   19988:	mov	r5, r1
   1998c:	movt	r7, #5
   19990:	ldrb	r0, [r7, #40]	; 0x28
   19994:	cmp	r0, #0
   19998:	cmpne	r4, #0
   1999c:	bne	199d8 <__assert_fail@plt+0x6f28>
   199a0:	movw	r0, #61044	; 0xee74
   199a4:	mov	r2, r3
   199a8:	movt	r0, #5
   199ac:	ldr	r1, [r0, #72]	; 0x48
   199b0:	mov	r0, #0
   199b4:	bl	2c88c <__assert_fail@plt+0x19ddc>
   199b8:	movw	r2, #56015	; 0xdacf
   199bc:	mov	r3, r0
   199c0:	mov	r0, r6
   199c4:	mov	r1, r5
   199c8:	movt	r2, #4
   199cc:	bl	1269c <error@plt>
   199d0:	mov	r0, #1
   199d4:	str	r0, [r7, #28]
   199d8:	cmp	r4, #0
   199dc:	movne	r0, #1
   199e0:	strbne	r0, [r7, #40]	; 0x28
   199e4:	pop	{r4, r5, r6, r7, fp, pc}
   199e8:	push	{fp, lr}
   199ec:	mov	fp, sp
   199f0:	mov	r3, r1
   199f4:	mov	r1, r0
   199f8:	mov	r0, #1
   199fc:	mov	r2, #1
   19a00:	bl	19974 <__assert_fail@plt+0x6ec4>
   19a04:	bl	12a5c <abort@plt>
   19a08:	push	{fp, lr}
   19a0c:	mov	fp, sp
   19a10:	mov	r3, r1
   19a14:	mov	r1, r0
   19a18:	movw	r0, #61000	; 0xee48
   19a1c:	mov	r2, #0
   19a20:	movt	r0, #5
   19a24:	strb	r2, [r0, #40]	; 0x28
   19a28:	mov	r0, #1
   19a2c:	mov	r2, #0
   19a30:	bl	19974 <__assert_fail@plt+0x6ec4>
   19a34:	bl	12a5c <abort@plt>
   19a38:	push	{fp, lr}
   19a3c:	mov	fp, sp
   19a40:	add	r2, r0, #4
   19a44:	add	r1, r0, #48	; 0x30
   19a48:	mov	r0, r2
   19a4c:	bl	1ffec <__assert_fail@plt+0xd53c>
   19a50:	mov	r0, #0
   19a54:	pop	{fp, pc}
   19a58:	push	{r4, r5, r6, sl, fp, lr}
   19a5c:	add	fp, sp, #16
   19a60:	sub	sp, sp, #8
   19a64:	mov	r6, r0
   19a68:	mov	r0, #8
   19a6c:	bl	327ac <__assert_fail@plt+0x1fcfc>
   19a70:	mov	r4, #0
   19a74:	cmp	r0, #0
   19a78:	beq	19ae4 <__assert_fail@plt+0x7034>
   19a7c:	mov	r5, r0
   19a80:	mov	r0, r6
   19a84:	bl	12570 <strdup@plt>
   19a88:	cmp	r0, #0
   19a8c:	str	r0, [r5]
   19a90:	beq	19adc <__assert_fail@plt+0x702c>
   19a94:	movw	r0, #39792	; 0x9b70
   19a98:	movw	r2, #39664	; 0x9af0
   19a9c:	movw	r3, #39720	; 0x9b28
   19aa0:	mov	r1, #0
   19aa4:	mov	r4, #0
   19aa8:	movt	r0, #1
   19aac:	movt	r2, #1
   19ab0:	movt	r3, #1
   19ab4:	str	r0, [sp]
   19ab8:	mov	r0, #11
   19abc:	bl	231d4 <__assert_fail@plt+0x10724>
   19ac0:	cmp	r0, #0
   19ac4:	str	r0, [r5, #4]
   19ac8:	beq	19ad4 <__assert_fail@plt+0x7024>
   19acc:	mov	r4, r5
   19ad0:	b	19ae4 <__assert_fail@plt+0x7034>
   19ad4:	ldr	r0, [r5]
   19ad8:	bl	30174 <__assert_fail@plt+0x1d6c4>
   19adc:	mov	r0, r5
   19ae0:	bl	30174 <__assert_fail@plt+0x1d6c4>
   19ae4:	mov	r0, r4
   19ae8:	sub	sp, fp, #16
   19aec:	pop	{r4, r5, r6, sl, fp, pc}
   19af0:	push	{fp, lr}
   19af4:	mov	fp, sp
   19af8:	mov	ip, r1
   19afc:	ldr	lr, [r0]
   19b00:	ldr	r3, [r0, #4]
   19b04:	ldr	r1, [r0, #12]
   19b08:	ldr	r2, [r0, #8]
   19b0c:	eor	r0, r2, lr
   19b10:	eor	r1, r1, r3
   19b14:	mov	r2, ip
   19b18:	mov	r3, #0
   19b1c:	bl	47618 <__assert_fail@plt+0x34b68>
   19b20:	mov	r0, r2
   19b24:	pop	{fp, pc}
   19b28:	push	{r4, r5, fp, lr}
   19b2c:	add	fp, sp, #8
   19b30:	ldrd	r2, [r1, #8]
   19b34:	ldrd	r4, [r0, #8]
   19b38:	eor	r3, r5, r3
   19b3c:	eor	r2, r4, r2
   19b40:	orrs	r2, r2, r3
   19b44:	mov	r2, #0
   19b48:	bne	19b68 <__assert_fail@plt+0x70b8>
   19b4c:	ldrd	r2, [r1]
   19b50:	ldrd	r0, [r0]
   19b54:	eor	r1, r1, r3
   19b58:	eor	r0, r0, r2
   19b5c:	orr	r0, r0, r1
   19b60:	clz	r0, r0
   19b64:	lsr	r2, r0, #5
   19b68:	mov	r0, r2
   19b6c:	pop	{r4, r5, fp, pc}
   19b70:	push	{r4, sl, fp, lr}
   19b74:	add	fp, sp, #8
   19b78:	mov	r4, r0
   19b7c:	ldr	r0, [r0, #20]
   19b80:	cmp	r0, #0
   19b84:	beq	19b94 <__assert_fail@plt+0x70e4>
   19b88:	bl	128b8 <fclose@plt>
   19b8c:	cmp	r0, #0
   19b90:	bne	19ba8 <__assert_fail@plt+0x70f8>
   19b94:	ldr	r0, [r4, #16]
   19b98:	bl	30174 <__assert_fail@plt+0x1d6c4>
   19b9c:	mov	r0, r4
   19ba0:	pop	{r4, sl, fp, lr}
   19ba4:	b	30174 <__assert_fail@plt+0x1d6c4>
   19ba8:	bl	12804 <__errno_location@plt>
   19bac:	ldr	r0, [r0]
   19bb0:	ldr	r1, [r4, #16]
   19bb4:	bl	19a08 <__assert_fail@plt+0x6f58>
   19bb8:	push	{r4, sl, fp, lr}
   19bbc:	add	fp, sp, #8
   19bc0:	mov	r4, r0
   19bc4:	ldr	r0, [r0]
   19bc8:	bl	30174 <__assert_fail@plt+0x1d6c4>
   19bcc:	ldr	r0, [r4, #4]
   19bd0:	pop	{r4, sl, fp, lr}
   19bd4:	b	234d8 <__assert_fail@plt+0x10a28>
   19bd8:	push	{r4, r5, r6, r7, fp, lr}
   19bdc:	add	fp, sp, #16
   19be0:	sub	sp, sp, #104	; 0x68
   19be4:	mov	r5, r0
   19be8:	mov	r0, #24
   19bec:	mov	r7, r1
   19bf0:	bl	327ac <__assert_fail@plt+0x1fcfc>
   19bf4:	mov	r6, #0
   19bf8:	cmp	r0, #0
   19bfc:	beq	19d14 <__assert_fail@plt+0x7264>
   19c00:	mov	r4, r0
   19c04:	mov	r0, r7
   19c08:	bl	12570 <strdup@plt>
   19c0c:	cmp	r0, #0
   19c10:	str	r0, [r4, #16]
   19c14:	beq	19cc0 <__assert_fail@plt+0x7210>
   19c18:	ldr	r1, [r5]
   19c1c:	mov	r0, r7
   19c20:	bl	22c8c <__assert_fail@plt+0x101dc>
   19c24:	cmp	r0, #0
   19c28:	str	r0, [r4, #20]
   19c2c:	beq	19cb8 <__assert_fail@plt+0x7208>
   19c30:	bl	1287c <fileno@plt>
   19c34:	cmn	r0, #1
   19c38:	ble	19d5c <__assert_fail@plt+0x72ac>
   19c3c:	mov	r1, #1
   19c40:	mov	r6, r0
   19c44:	bl	22748 <__assert_fail@plt+0xfc98>
   19c48:	mov	r2, sp
   19c4c:	mov	r0, #3
   19c50:	mov	r1, r6
   19c54:	bl	1260c <__fxstat64@plt>
   19c58:	cmn	r0, #1
   19c5c:	ble	19ccc <__assert_fail@plt+0x721c>
   19c60:	ldm	sp, {r0, r1}
   19c64:	ldr	r2, [sp, #96]	; 0x60
   19c68:	ldr	r3, [sp, #100]	; 0x64
   19c6c:	stm	r4, {r0, r1, r2, r3}
   19c70:	mov	r1, r4
   19c74:	ldr	r0, [r5, #4]
   19c78:	bl	22f20 <__assert_fail@plt+0x10470>
   19c7c:	cmp	r0, #0
   19c80:	beq	19cfc <__assert_fail@plt+0x724c>
   19c84:	mov	r6, r0
   19c88:	ldr	r0, [r4, #20]
   19c8c:	cmp	r0, #0
   19c90:	beq	19ca0 <__assert_fail@plt+0x71f0>
   19c94:	bl	128b8 <fclose@plt>
   19c98:	cmp	r0, #0
   19c9c:	bne	19d7c <__assert_fail@plt+0x72cc>
   19ca0:	ldr	r0, [r4, #16]
   19ca4:	bl	30174 <__assert_fail@plt+0x1d6c4>
   19ca8:	mov	r0, r4
   19cac:	bl	30174 <__assert_fail@plt+0x1d6c4>
   19cb0:	ldr	r6, [r6, #20]
   19cb4:	b	19d14 <__assert_fail@plt+0x7264>
   19cb8:	ldr	r0, [r4, #16]
   19cbc:	bl	30174 <__assert_fail@plt+0x1d6c4>
   19cc0:	mov	r0, r4
   19cc4:	bl	30174 <__assert_fail@plt+0x1d6c4>
   19cc8:	b	19d14 <__assert_fail@plt+0x7264>
   19ccc:	ldr	r0, [r4, #20]
   19cd0:	cmp	r0, #0
   19cd4:	beq	19ce4 <__assert_fail@plt+0x7234>
   19cd8:	bl	128b8 <fclose@plt>
   19cdc:	cmp	r0, #0
   19ce0:	bne	19d7c <__assert_fail@plt+0x72cc>
   19ce4:	ldr	r0, [r4, #16]
   19ce8:	bl	30174 <__assert_fail@plt+0x1d6c4>
   19cec:	mov	r0, r4
   19cf0:	bl	30174 <__assert_fail@plt+0x1d6c4>
   19cf4:	mov	r6, #0
   19cf8:	b	19d14 <__assert_fail@plt+0x7264>
   19cfc:	ldr	r0, [r5, #4]
   19d00:	mov	r1, r4
   19d04:	bl	23d28 <__assert_fail@plt+0x11278>
   19d08:	cmp	r0, #0
   19d0c:	beq	19d20 <__assert_fail@plt+0x7270>
   19d10:	ldr	r6, [r4, #20]
   19d14:	mov	r0, r6
   19d18:	sub	sp, fp, #16
   19d1c:	pop	{r4, r5, r6, r7, fp, pc}
   19d20:	bl	12804 <__errno_location@plt>
   19d24:	mov	r5, r0
   19d28:	ldr	r0, [r4, #20]
   19d2c:	ldr	r6, [r5]
   19d30:	cmp	r0, #0
   19d34:	beq	19d44 <__assert_fail@plt+0x7294>
   19d38:	bl	128b8 <fclose@plt>
   19d3c:	cmp	r0, #0
   19d40:	bne	19d8c <__assert_fail@plt+0x72dc>
   19d44:	ldr	r0, [r4, #16]
   19d48:	bl	30174 <__assert_fail@plt+0x1d6c4>
   19d4c:	mov	r0, r4
   19d50:	bl	30174 <__assert_fail@plt+0x1d6c4>
   19d54:	str	r6, [r5]
   19d58:	b	19cf4 <__assert_fail@plt+0x7244>
   19d5c:	movw	r0, #31614	; 0x7b7e
   19d60:	movw	r1, #40428	; 0x9dec
   19d64:	movw	r3, #40440	; 0x9df8
   19d68:	mov	r2, #166	; 0xa6
   19d6c:	movt	r0, #4
   19d70:	movt	r1, #4
   19d74:	movt	r3, #4
   19d78:	bl	12ab0 <__assert_fail@plt>
   19d7c:	bl	12804 <__errno_location@plt>
   19d80:	ldr	r0, [r0]
   19d84:	ldr	r1, [r4, #16]
   19d88:	bl	19a08 <__assert_fail@plt+0x6f58>
   19d8c:	ldr	r1, [r4, #16]
   19d90:	ldr	r0, [r5]
   19d94:	bl	19a08 <__assert_fail@plt+0x6f58>
   19d98:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   19d9c:	add	fp, sp, #24
   19da0:	ldr	r4, [fp, #8]
   19da4:	cmp	r4, #40	; 0x28
   19da8:	beq	1a070 <__assert_fail@plt+0x75c0>
   19dac:	cmp	r4, #91	; 0x5b
   19db0:	beq	1a088 <__assert_fail@plt+0x75d8>
   19db4:	cmp	r4, #123	; 0x7b
   19db8:	beq	1a0a0 <__assert_fail@plt+0x75f0>
   19dbc:	ldr	r9, [fp, #12]
   19dc0:	mov	r8, r0
   19dc4:	mov	r0, #20
   19dc8:	mov	r5, r3
   19dcc:	mov	r6, r2
   19dd0:	mov	r7, r1
   19dd4:	bl	2e038 <__assert_fail@plt+0x1b588>
   19dd8:	mov	r1, #0
   19ddc:	str	r0, [r8]
   19de0:	str	r5, [r0]
   19de4:	str	r6, [r0, #12]
   19de8:	str	r1, [r0, #16]
   19dec:	strb	r9, [r0, #5]
   19df0:	strb	r4, [r0, #4]
   19df4:	add	r0, r6, #2
   19df8:	bl	2e038 <__assert_fail@plt+0x1b588>
   19dfc:	ldr	r1, [r8]
   19e00:	mov	r2, r6
   19e04:	str	r0, [r1, #8]
   19e08:	mov	r1, r7
   19e0c:	bl	1284c <strncpy@plt>
   19e10:	add	r0, r0, r6
   19e14:	cmp	r5, #1
   19e18:	bhi	19e38 <__assert_fail@plt+0x7388>
   19e1c:	cmp	r4, #0
   19e20:	bne	1a0b8 <__assert_fail@plt+0x7608>
   19e24:	cmp	r9, #0
   19e28:	bne	1a0d0 <__assert_fail@plt+0x7620>
   19e2c:	mov	r1, #0
   19e30:	strb	r1, [r0]
   19e34:	b	19fd4 <__assert_fail@plt+0x7524>
   19e38:	cmp	r5, #2
   19e3c:	bne	1a0e8 <__assert_fail@plt+0x7638>
   19e40:	sub	r2, r4, #37	; 0x25
   19e44:	cmp	r2, #84	; 0x54
   19e48:	bhi	19e2c <__assert_fail@plt+0x737c>
   19e4c:	ldr	r1, [fp, #16]
   19e50:	add	r3, pc, #0
   19e54:	ldr	pc, [r3, r2, lsl #2]
   19e58:	andeq	r9, r1, r4, ror #31
   19e5c:	andeq	r9, r1, ip, lsr #28
   19e60:	andeq	r9, r1, ip, lsr #28
   19e64:	andeq	r9, r1, ip, lsr #28
   19e68:	andeq	r9, r1, ip, lsr #28
   19e6c:	andeq	r9, r1, ip, lsr #28
   19e70:	andeq	r9, r1, ip, lsr #28
   19e74:	andeq	r9, r1, ip, lsr #28
   19e78:	andeq	r9, r1, ip, lsr #28
   19e7c:	andeq	r9, r1, ip, lsr #28
   19e80:	andeq	r9, r1, ip, lsr #28
   19e84:	andeq	r9, r1, ip, lsr #28
   19e88:	andeq	r9, r1, ip, lsr #28
   19e8c:	andeq	r9, r1, ip, lsr #28
   19e90:	andeq	r9, r1, ip, lsr #28
   19e94:	andeq	r9, r1, ip, lsr #28
   19e98:	andeq	r9, r1, ip, lsr #28
   19e9c:	andeq	r9, r1, ip, lsr #28
   19ea0:	andeq	r9, r1, ip, lsr #28
   19ea4:	andeq	r9, r1, ip, lsr #28
   19ea8:	andeq	r9, r1, ip, lsr #28
   19eac:	andeq	r9, r1, ip, lsr #28
   19eb0:	andeq	r9, r1, ip, lsr #28
   19eb4:	andeq	r9, r1, ip, lsr #28
   19eb8:	andeq	r9, r1, ip, lsr #28
   19ebc:	andeq	r9, r1, ip, lsr #28
   19ec0:	andeq	r9, r1, ip, lsr #28
   19ec4:	andeq	r9, r1, ip, lsr #28
   19ec8:	andeq	r9, r1, ip, lsr #31
   19ecc:	andeq	r9, r1, ip, lsr #31
   19ed0:	andeq	r9, r1, ip, lsr #31
   19ed4:	andeq	r9, r1, ip, lsr #31
   19ed8:	andeq	r9, r1, ip, lsr #28
   19edc:	andeq	r9, r1, ip, lsr #31
   19ee0:	andeq	r9, r1, ip, lsr #31
   19ee4:	andeq	r9, r1, r0, ror #31
   19ee8:	andeq	r9, r1, ip, lsr #28
   19eec:	andeq	r9, r1, ip, lsr #28
   19ef0:	andeq	r9, r1, ip, lsr #28
   19ef4:	andeq	r9, r1, ip, lsr #28
   19ef8:	andeq	r9, r1, ip, lsr #31
   19efc:	andeq	r9, r1, ip, lsr #28
   19f00:	andeq	r9, r1, ip, lsr #28
   19f04:	andeq	r9, r1, r0, ror #31
   19f08:	andeq	r9, r1, ip, lsr #28
   19f0c:	andeq	r9, r1, ip, lsr #28
   19f10:	strdeq	r9, [r1], -r8
   19f14:	andeq	r9, r1, ip, lsr #31
   19f18:	andeq	r9, r1, ip, lsr #31
   19f1c:	andeq	r9, r1, ip, lsr #28
   19f20:	andeq	r9, r1, ip, lsr #28
   19f24:	andeq	r9, r1, ip, lsr #28
   19f28:	andeq	r9, r1, ip, ror #31
   19f2c:	andeq	sl, r1, r0, rrx
   19f30:	andeq	r9, r1, ip, lsr #28
   19f34:	andeq	r9, r1, ip, lsr #28
   19f38:	andeq	r9, r1, ip, lsr #28
   19f3c:	andeq	r9, r1, ip, lsr #28
   19f40:	andeq	r9, r1, ip, lsr #28
   19f44:	andeq	r9, r1, ip, lsr #28
   19f48:	andeq	r9, r1, ip, lsr #31
   19f4c:	andeq	r9, r1, ip, lsr #31
   19f50:	andeq	r9, r1, ip, lsr #31
   19f54:	andeq	r9, r1, r4, ror #31
   19f58:	andeq	r9, r1, ip, lsr #28
   19f5c:	andeq	r9, r1, r0, ror #31
   19f60:	andeq	r9, r1, ip, lsr #31
   19f64:	andeq	r9, r1, r0, ror #31
   19f68:	andeq	sl, r1, r8
   19f6c:	andeq	r9, r1, ip, lsr #28
   19f70:	andeq	r9, r1, ip, lsr #31
   19f74:	andeq	sl, r1, ip, lsl r0
   19f78:	andeq	sl, r1, ip, asr #32
   19f7c:	andeq	r9, r1, ip, lsr #31
   19f80:	andeq	r9, r1, ip, lsr #28
   19f84:	andeq	r9, r1, r0, ror #31
   19f88:	andeq	r9, r1, ip, lsr #28
   19f8c:	andeq	r9, r1, ip, lsr #28
   19f90:	andeq	r9, r1, ip, lsr #31
   19f94:	andeq	r9, r1, ip, lsr #31
   19f98:	andeq	r9, r1, ip, lsr #31
   19f9c:	andeq	r9, r1, ip, lsr #28
   19fa0:	andeq	r9, r1, ip, lsr #28
   19fa4:	andeq	r9, r1, ip, lsr #28
   19fa8:	andeq	sl, r1, r4, lsr r0
   19fac:	mov	r2, #1
   19fb0:	strb	r2, [r1, #18]
   19fb4:	mov	r2, #115	; 0x73
   19fb8:	strb	r2, [r0]
   19fbc:	mov	r2, #3
   19fc0:	mov	r3, #0
   19fc4:	strb	r3, [r0, #1]
   19fc8:	ldr	r0, [r1, #24]
   19fcc:	cmp	r2, r0
   19fd0:	strhi	r2, [r1, #24]
   19fd4:	ldr	r0, [r8]
   19fd8:	add	r0, r0, #16
   19fdc:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   19fe0:	mov	r4, #115	; 0x73
   19fe4:	strb	r4, [r0], #1
   19fe8:	b	19e2c <__assert_fail@plt+0x737c>
   19fec:	mov	r2, #1
   19ff0:	strb	r2, [r1, #18]
   19ff4:	b	1a03c <__assert_fail@plt+0x758c>
   19ff8:	mov	r2, #1
   19ffc:	strb	r2, [r1, #18]
   1a000:	mov	r2, #103	; 0x67
   1a004:	b	19fb8 <__assert_fail@plt+0x7508>
   1a008:	mov	r2, #1
   1a00c:	mov	r3, #115	; 0x73
   1a010:	strb	r2, [r1, #20]
   1a014:	strb	r3, [r0]
   1a018:	b	19fc0 <__assert_fail@plt+0x7510>
   1a01c:	mov	r2, #1
   1a020:	strb	r2, [r1, #18]
   1a024:	mov	r2, #115	; 0x73
   1a028:	strb	r2, [r0]
   1a02c:	mov	r2, #4
   1a030:	b	19fc0 <__assert_fail@plt+0x7510>
   1a034:	mov	r2, #1
   1a038:	strb	r2, [r1, #19]
   1a03c:	mov	r2, #115	; 0x73
   1a040:	strb	r2, [r0]
   1a044:	mov	r2, #2
   1a048:	b	19fc0 <__assert_fail@plt+0x7510>
   1a04c:	mov	r2, #111	; 0x6f
   1a050:	strb	r2, [r0]
   1a054:	mov	r2, #1
   1a058:	strb	r2, [r1, #18]
   1a05c:	b	19fbc <__assert_fail@plt+0x750c>
   1a060:	mov	r2, #115	; 0x73
   1a064:	strb	r2, [r0]
   1a068:	mov	r2, #5
   1a06c:	b	19fc0 <__assert_fail@plt+0x7510>
   1a070:	movw	r0, #40639	; 0x9ebf
   1a074:	movw	r1, #40513	; 0x9e41
   1a078:	movw	r3, #40521	; 0x9e49
   1a07c:	mov	r2, #80	; 0x50
   1a080:	movt	r0, #4
   1a084:	b	1a0fc <__assert_fail@plt+0x764c>
   1a088:	movw	r0, #40620	; 0x9eac
   1a08c:	movw	r1, #40513	; 0x9e41
   1a090:	movw	r3, #40521	; 0x9e49
   1a094:	mov	r2, #79	; 0x4f
   1a098:	movt	r0, #4
   1a09c:	b	1a0fc <__assert_fail@plt+0x764c>
   1a0a0:	movw	r0, #40494	; 0x9e2e
   1a0a4:	movw	r1, #40513	; 0x9e41
   1a0a8:	movw	r3, #40521	; 0x9e49
   1a0ac:	mov	r2, #78	; 0x4e
   1a0b0:	movt	r0, #4
   1a0b4:	b	1a0fc <__assert_fail@plt+0x764c>
   1a0b8:	movw	r0, #40658	; 0x9ed2
   1a0bc:	movw	r1, #40513	; 0x9e41
   1a0c0:	movw	r3, #40521	; 0x9e49
   1a0c4:	mov	r2, #97	; 0x61
   1a0c8:	movt	r0, #4
   1a0cc:	b	1a0fc <__assert_fail@plt+0x764c>
   1a0d0:	movw	r0, #40675	; 0x9ee3
   1a0d4:	movw	r1, #40513	; 0x9e41
   1a0d8:	movw	r3, #40521	; 0x9e49
   1a0dc:	mov	r2, #98	; 0x62
   1a0e0:	movt	r0, #4
   1a0e4:	b	1a0fc <__assert_fail@plt+0x764c>
   1a0e8:	movw	r0, #40696	; 0x9ef8
   1a0ec:	movw	r1, #40513	; 0x9e41
   1a0f0:	movw	r3, #40521	; 0x9e49
   1a0f4:	mov	r2, #105	; 0x69
   1a0f8:	movt	r0, #4
   1a0fc:	movt	r1, #4
   1a100:	movt	r3, #4
   1a104:	bl	12ab0 <__assert_fail@plt>
   1a108:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1a10c:	add	fp, sp, #28
   1a110:	sub	sp, sp, #20
   1a114:	mov	r6, r2
   1a118:	mov	r2, r1
   1a11c:	movw	r1, #42680	; 0xa6b8
   1a120:	mov	r7, r0
   1a124:	movt	r1, #1
   1a128:	mov	r0, r2
   1a12c:	mov	r2, r6
   1a130:	bl	18018 <__assert_fail@plt+0x5568>
   1a134:	movw	r1, #257	; 0x101
   1a138:	add	r9, r0, #40	; 0x28
   1a13c:	mov	r2, #0
   1a140:	mov	r8, r6
   1a144:	str	r0, [sp, #16]
   1a148:	strh	r1, [r0, #16]
   1a14c:	vld1.32	{d16-d17}, [r7]!
   1a150:	vst1.32	{d16-d17}, [r9]
   1a154:	ldr	r1, [r7]
   1a158:	movw	r7, #41085	; 0xa07d
   1a15c:	str	r2, [r0, #40]	; 0x28
   1a160:	strh	r2, [r0, #18]
   1a164:	str	r2, [r0, #24]
   1a168:	movt	r7, #4
   1a16c:	str	r1, [r0, #56]	; 0x38
   1a170:	b	1a1b8 <__assert_fail@plt+0x7708>
   1a174:	cmp	r4, #2
   1a178:	mov	r0, #0
   1a17c:	add	r1, r4, r6
   1a180:	sub	r2, r6, r5
   1a184:	mov	r3, #2
   1a188:	ldrbeq	r0, [r6, #1]
   1a18c:	sub	r4, r1, #1
   1a190:	mov	r1, r5
   1a194:	str	r8, [sp]
   1a198:	str	r0, [sp, #4]
   1a19c:	ldr	r0, [sp, #16]
   1a1a0:	str	r0, [sp, #8]
   1a1a4:	mov	r0, r9
   1a1a8:	bl	19d98 <__assert_fail@plt+0x72e8>
   1a1ac:	mov	r9, r0
   1a1b0:	add	r8, r4, #1
   1a1b4:	add	r6, r4, #1
   1a1b8:	ldrb	r0, [r6]
   1a1bc:	cmp	r0, #37	; 0x25
   1a1c0:	beq	1a248 <__assert_fail@plt+0x7798>
   1a1c4:	cmp	r0, #92	; 0x5c
   1a1c8:	beq	1a1e0 <__assert_fail@plt+0x7730>
   1a1cc:	cmp	r0, #0
   1a1d0:	beq	1a5a0 <__assert_fail@plt+0x7af0>
   1a1d4:	mov	r4, r6
   1a1d8:	add	r6, r6, #1
   1a1dc:	b	1a1b8 <__assert_fail@plt+0x7708>
   1a1e0:	mov	r4, r6
   1a1e4:	ldrb	r0, [r4, #1]!
   1a1e8:	cmp	r0, #0
   1a1ec:	beq	1a324 <__assert_fail@plt+0x7874>
   1a1f0:	cmp	r0, #99	; 0x63
   1a1f4:	beq	1a5f0 <__assert_fail@plt+0x7b40>
   1a1f8:	and	r1, r0, #248	; 0xf8
   1a1fc:	cmp	r1, #48	; 0x30
   1a200:	bne	1a380 <__assert_fail@plt+0x78d0>
   1a204:	ldrb	r1, [r6, #2]
   1a208:	sub	r0, r0, #48	; 0x30
   1a20c:	mov	r7, #1
   1a210:	and	r2, r1, #248	; 0xf8
   1a214:	cmp	r2, #48	; 0x30
   1a218:	bne	1a240 <__assert_fail@plt+0x7790>
   1a21c:	add	r0, r1, r0, lsl #3
   1a220:	ldrb	r1, [r6, #3]
   1a224:	mov	r7, #2
   1a228:	sub	r0, r0, #48	; 0x30
   1a22c:	and	r2, r1, #248	; 0xf8
   1a230:	cmp	r2, #48	; 0x30
   1a234:	addeq	r0, r1, r0, lsl #3
   1a238:	moveq	r7, #3
   1a23c:	subeq	r0, r0, #48	; 0x30
   1a240:	strb	r0, [r6]
   1a244:	b	1a538 <__assert_fail@plt+0x7a88>
   1a248:	mov	r5, r8
   1a24c:	ldrb	r8, [r6, #1]
   1a250:	mov	r4, #1
   1a254:	mov	sl, #1
   1a258:	cmp	r8, #37	; 0x25
   1a25c:	beq	1a2f4 <__assert_fail@plt+0x7844>
   1a260:	cmp	r8, #0
   1a264:	beq	1a664 <__assert_fail@plt+0x7bb4>
   1a268:	mov	r1, #1
   1a26c:	ldrb	r8, [r6, r1]
   1a270:	mov	sl, r1
   1a274:	cmp	r8, #0
   1a278:	beq	1a298 <__assert_fail@plt+0x77e8>
   1a27c:	mov	r0, r7
   1a280:	mov	r1, r8
   1a284:	mov	r2, #5
   1a288:	bl	12894 <memchr@plt>
   1a28c:	add	r1, sl, #1
   1a290:	cmp	r0, #0
   1a294:	bne	1a26c <__assert_fail@plt+0x77bc>
   1a298:	bl	12768 <__ctype_b_loc@plt>
   1a29c:	ldr	r0, [r0]
   1a2a0:	add	r1, r0, r8, lsl #1
   1a2a4:	ldrb	r1, [r1, #1]
   1a2a8:	tst	r1, #8
   1a2ac:	beq	1a2d0 <__assert_fail@plt+0x7820>
   1a2b0:	add	r1, sl, #1
   1a2b4:	ldrb	r8, [r6, r1]
   1a2b8:	add	r1, r1, #1
   1a2bc:	add	r2, r0, r8, lsl #1
   1a2c0:	ldrb	r2, [r2, #1]
   1a2c4:	tst	r2, #8
   1a2c8:	bne	1a2b4 <__assert_fail@plt+0x7804>
   1a2cc:	sub	sl, r1, #1
   1a2d0:	cmp	r8, #46	; 0x2e
   1a2d4:	bne	1a2f4 <__assert_fail@plt+0x7844>
   1a2d8:	add	r1, r6, #1
   1a2dc:	ldrb	r8, [r1, sl]
   1a2e0:	add	sl, sl, #1
   1a2e4:	add	r2, r0, r8, lsl #1
   1a2e8:	ldrb	r2, [r2, #1]
   1a2ec:	tst	r2, #8
   1a2f0:	bne	1a2dc <__assert_fail@plt+0x782c>
   1a2f4:	movw	r0, #41090	; 0xa082
   1a2f8:	mov	r1, r8
   1a2fc:	mov	r2, #29
   1a300:	movt	r0, #4
   1a304:	bl	12894 <memchr@plt>
   1a308:	cmp	r0, #0
   1a30c:	add	r6, r6, sl
   1a310:	mov	r0, r8
   1a314:	beq	1a350 <__assert_fail@plt+0x78a0>
   1a318:	cmp	r0, #0
   1a31c:	bne	1a174 <__assert_fail@plt+0x76c4>
   1a320:	b	1a410 <__assert_fail@plt+0x7960>
   1a324:	movw	r1, #40716	; 0x9f0c
   1a328:	mov	r0, #0
   1a32c:	mov	r2, #5
   1a330:	mov	r7, #0
   1a334:	movt	r1, #4
   1a338:	bl	12564 <dcgettext@plt>
   1a33c:	mov	r2, r0
   1a340:	mov	r0, #0
   1a344:	mov	r1, #0
   1a348:	bl	1269c <error@plt>
   1a34c:	b	1a538 <__assert_fail@plt+0x7a88>
   1a350:	movw	r0, #41119	; 0xa09f
   1a354:	mov	r1, r8
   1a358:	mov	r2, #5
   1a35c:	movt	r0, #4
   1a360:	bl	12894 <memchr@plt>
   1a364:	cmp	r0, #0
   1a368:	beq	1a40c <__assert_fail@plt+0x795c>
   1a36c:	ldrb	r0, [r6, #1]
   1a370:	mov	r4, #2
   1a374:	cmp	r0, #0
   1a378:	bne	1a174 <__assert_fail@plt+0x76c4>
   1a37c:	b	1a410 <__assert_fail@plt+0x7960>
   1a380:	sub	r1, r0, #92	; 0x5c
   1a384:	cmp	r1, #26
   1a388:	bhi	1a4d4 <__assert_fail@plt+0x7a24>
   1a38c:	add	r2, pc, #4
   1a390:	mov	r0, #7
   1a394:	ldr	pc, [r2, r1, lsl #2]
   1a398:	andeq	sl, r1, r4, lsl #8
   1a39c:	ldrdeq	sl, [r1], -r4
   1a3a0:	ldrdeq	sl, [r1], -r4
   1a3a4:	ldrdeq	sl, [r1], -r4
   1a3a8:	ldrdeq	sl, [r1], -r4
   1a3ac:	andeq	sl, r1, r0, lsr r5
   1a3b0:	andeq	sl, r1, ip, lsl #10
   1a3b4:	ldrdeq	sl, [r1], -r4
   1a3b8:	ldrdeq	sl, [r1], -r4
   1a3bc:	ldrdeq	sl, [r1], -r4
   1a3c0:	andeq	sl, r1, r4, lsr #10
   1a3c4:	ldrdeq	sl, [r1], -r4
   1a3c8:	ldrdeq	sl, [r1], -r4
   1a3cc:	ldrdeq	sl, [r1], -r4
   1a3d0:	ldrdeq	sl, [r1], -r4
   1a3d4:	ldrdeq	sl, [r1], -r4
   1a3d8:	ldrdeq	sl, [r1], -r4
   1a3dc:	ldrdeq	sl, [r1], -r4
   1a3e0:	andeq	sl, r1, ip, lsr #10
   1a3e4:	ldrdeq	sl, [r1], -r4
   1a3e8:	ldrdeq	sl, [r1], -r4
   1a3ec:	ldrdeq	sl, [r1], -r4
   1a3f0:	andeq	sl, r1, r4, lsl #10
   1a3f4:	ldrdeq	sl, [r1], -r4
   1a3f8:	andeq	sl, r1, r4, lsl r5
   1a3fc:	ldrdeq	sl, [r1], -r4
   1a400:	andeq	sl, r1, ip, lsl r5
   1a404:	mov	r0, #92	; 0x5c
   1a408:	b	1a530 <__assert_fail@plt+0x7a80>
   1a40c:	mov	r4, #0
   1a410:	movw	r0, #40832	; 0x9f80
   1a414:	mov	r1, r8
   1a418:	mov	r2, #4
   1a41c:	movt	r0, #4
   1a420:	bl	12894 <memchr@plt>
   1a424:	cmp	r0, #0
   1a428:	bne	1a68c <__assert_fail@plt+0x7bdc>
   1a42c:	cmp	r4, #2
   1a430:	mov	r8, r5
   1a434:	bne	1a44c <__assert_fail@plt+0x799c>
   1a438:	ldrb	r0, [r6, #1]
   1a43c:	movw	r1, #40898	; 0x9fc2
   1a440:	movt	r1, #4
   1a444:	cmp	r0, #0
   1a448:	beq	1a454 <__assert_fail@plt+0x79a4>
   1a44c:	movw	r1, #40971	; 0xa00b
   1a450:	movt	r1, #4
   1a454:	mov	r0, #0
   1a458:	mov	r2, #5
   1a45c:	bl	12564 <dcgettext@plt>
   1a460:	mov	r7, r6
   1a464:	mov	r2, r0
   1a468:	mov	r0, #0
   1a46c:	mov	r1, #0
   1a470:	ldrb	r3, [r7], -r8
   1a474:	bl	1269c <error@plt>
   1a478:	mov	r0, #20
   1a47c:	bl	2e038 <__assert_fail@plt+0x1b588>
   1a480:	mov	r5, #0
   1a484:	add	r4, r7, #1
   1a488:	str	r0, [r9]
   1a48c:	strh	r5, [r0, #4]
   1a490:	str	r5, [r0]
   1a494:	str	r4, [r0, #12]
   1a498:	str	r5, [r0, #16]
   1a49c:	add	r0, r7, #3
   1a4a0:	bl	2e038 <__assert_fail@plt+0x1b588>
   1a4a4:	ldr	r1, [r9]
   1a4a8:	mov	r2, r4
   1a4ac:	str	r0, [r1, #8]
   1a4b0:	mov	r1, r8
   1a4b4:	bl	1284c <strncpy@plt>
   1a4b8:	strb	r5, [r0, r4]
   1a4bc:	movw	r7, #41085	; 0xa07d
   1a4c0:	mov	r4, r6
   1a4c4:	ldr	r0, [r9]
   1a4c8:	movt	r7, #4
   1a4cc:	add	r9, r0, #16
   1a4d0:	b	1a1b0 <__assert_fail@plt+0x7700>
   1a4d4:	movw	r1, #40763	; 0x9f3b
   1a4d8:	mov	r0, #0
   1a4dc:	mov	r2, #5
   1a4e0:	movt	r1, #4
   1a4e4:	bl	12564 <dcgettext@plt>
   1a4e8:	ldrb	r3, [r4]
   1a4ec:	mov	r2, r0
   1a4f0:	mov	r0, #0
   1a4f4:	mov	r1, #0
   1a4f8:	bl	1269c <error@plt>
   1a4fc:	add	r6, r4, #1
   1a500:	b	1a1b8 <__assert_fail@plt+0x7708>
   1a504:	mov	r0, #13
   1a508:	b	1a530 <__assert_fail@plt+0x7a80>
   1a50c:	mov	r0, #8
   1a510:	b	1a530 <__assert_fail@plt+0x7a80>
   1a514:	mov	r0, #9
   1a518:	b	1a530 <__assert_fail@plt+0x7a80>
   1a51c:	mov	r0, #11
   1a520:	b	1a530 <__assert_fail@plt+0x7a80>
   1a524:	mov	r0, #12
   1a528:	b	1a530 <__assert_fail@plt+0x7a80>
   1a52c:	mov	r0, #10
   1a530:	strb	r0, [r6]
   1a534:	mov	r7, #1
   1a538:	mov	r0, #20
   1a53c:	bl	2e038 <__assert_fail@plt+0x1b588>
   1a540:	sub	r1, r6, r8
   1a544:	mov	r5, #0
   1a548:	str	r0, [r9]
   1a54c:	add	r4, r1, #1
   1a550:	str	r5, [r0]
   1a554:	str	r4, [r0, #12]
   1a558:	str	r5, [r0, #16]
   1a55c:	strh	r5, [r0, #4]
   1a560:	add	r0, r1, #3
   1a564:	bl	2e038 <__assert_fail@plt+0x1b588>
   1a568:	ldr	r1, [r9]
   1a56c:	mov	r2, r4
   1a570:	str	r0, [r1, #8]
   1a574:	mov	r1, r8
   1a578:	bl	1284c <strncpy@plt>
   1a57c:	strb	r5, [r0, r4]
   1a580:	add	r4, r6, r7
   1a584:	movw	r7, #41085	; 0xa07d
   1a588:	ldr	r0, [r9]
   1a58c:	add	r8, r4, #1
   1a590:	movt	r7, #4
   1a594:	add	r6, r4, #1
   1a598:	add	r9, r0, #16
   1a59c:	b	1a1b8 <__assert_fail@plt+0x7708>
   1a5a0:	cmp	r6, r8
   1a5a4:	bls	1a658 <__assert_fail@plt+0x7ba8>
   1a5a8:	mov	r0, #20
   1a5ac:	bl	2e038 <__assert_fail@plt+0x1b588>
   1a5b0:	mov	r7, #0
   1a5b4:	sub	r4, r6, r8
   1a5b8:	str	r0, [r9]
   1a5bc:	str	r7, [r0]
   1a5c0:	str	r4, [r0, #12]
   1a5c4:	str	r7, [r0, #16]
   1a5c8:	strh	r7, [r0, #4]
   1a5cc:	add	r0, r4, #2
   1a5d0:	bl	2e038 <__assert_fail@plt+0x1b588>
   1a5d4:	ldr	r1, [r9]
   1a5d8:	mov	r2, r4
   1a5dc:	str	r0, [r1, #8]
   1a5e0:	mov	r1, r8
   1a5e4:	bl	1284c <strncpy@plt>
   1a5e8:	strb	r7, [r0, r4]
   1a5ec:	b	1a658 <__assert_fail@plt+0x7ba8>
   1a5f0:	mov	r0, #20
   1a5f4:	bl	2e038 <__assert_fail@plt+0x1b588>
   1a5f8:	mov	r1, #1
   1a5fc:	sub	r6, r6, r8
   1a600:	mov	r4, #0
   1a604:	str	r0, [r9]
   1a608:	str	r1, [r0]
   1a60c:	str	r6, [r0, #12]
   1a610:	str	r4, [r0, #16]
   1a614:	strh	r4, [r0, #4]
   1a618:	add	r0, r6, #2
   1a61c:	bl	2e038 <__assert_fail@plt+0x1b588>
   1a620:	ldr	r1, [r9]
   1a624:	mov	r2, r6
   1a628:	str	r0, [r1, #8]
   1a62c:	mov	r1, r8
   1a630:	bl	1284c <strncpy@plt>
   1a634:	ldr	r1, [sp, #16]
   1a638:	strb	r4, [r0, r6]
   1a63c:	ldrb	r0, [r1, #18]
   1a640:	cmp	r0, #0
   1a644:	beq	1a658 <__assert_fail@plt+0x7ba8>
   1a648:	ldr	r0, [r1, #24]
   1a64c:	cmp	r0, #2
   1a650:	movls	r0, #3
   1a654:	strls	r0, [r1, #24]
   1a658:	mov	r0, #1
   1a65c:	sub	sp, fp, #28
   1a660:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1a664:	movw	r1, #40798	; 0x9f5e
   1a668:	mov	r0, #0
   1a66c:	mov	r2, #5
   1a670:	movt	r1, #4
   1a674:	bl	12564 <dcgettext@plt>
   1a678:	mov	r2, r0
   1a67c:	mov	r0, #1
   1a680:	mov	r1, #0
   1a684:	mov	r3, r6
   1a688:	bl	1269c <error@plt>
   1a68c:	movw	r1, #40836	; 0x9f84
   1a690:	mov	r0, #0
   1a694:	mov	r2, #5
   1a698:	movt	r1, #4
   1a69c:	bl	12564 <dcgettext@plt>
   1a6a0:	ldrb	r3, [r6]
   1a6a4:	mov	r2, r0
   1a6a8:	mov	r0, #1
   1a6ac:	mov	r1, #0
   1a6b0:	bl	1269c <error@plt>
   1a6b4:	nop	{0}
   1a6b8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1a6bc:	add	fp, sp, #28
   1a6c0:	sub	sp, sp, #4
   1a6c4:	vpush	{d8-d9}
   1a6c8:	sub	sp, sp, #808	; 0x328
   1a6cc:	mov	r7, r2
   1a6d0:	ldr	r8, [r7, #40]!	; 0x28
   1a6d4:	cmp	r8, #0
   1a6d8:	beq	1b0ec <__assert_fail@plt+0x863c>
   1a6dc:	mov	r4, r0
   1a6e0:	add	r0, r1, #48	; 0x30
   1a6e4:	vldr	d8, [pc, #1004]	; 1aad8 <__assert_fail@plt+0x8028>
   1a6e8:	mov	r9, r2
   1a6ec:	mov	sl, r1
   1a6f0:	str	r0, [sp, #28]
   1a6f4:	add	r0, r1, #64	; 0x40
   1a6f8:	str	r0, [sp, #32]
   1a6fc:	add	r0, r1, #72	; 0x48
   1a700:	str	r0, [sp, #44]	; 0x2c
   1a704:	add	r0, r1, #80	; 0x50
   1a708:	str	r0, [sp, #40]	; 0x28
   1a70c:	add	r0, r1, #88	; 0x58
   1a710:	str	r0, [sp, #36]	; 0x24
   1a714:	add	r0, r1, #96	; 0x60
   1a718:	str	r0, [sp, #24]
   1a71c:	b	1a740 <__assert_fail@plt+0x7c90>
   1a720:	ldr	r1, [r8, #8]
   1a724:	movw	r2, #38711	; 0x9737
   1a728:	mov	r0, r7
   1a72c:	movt	r2, #4
   1a730:	bl	1b160 <__assert_fail@plt+0x86b0>
   1a734:	ldr	r8, [r8, #16]
   1a738:	cmp	r8, #0
   1a73c:	beq	1b0ec <__assert_fail@plt+0x863c>
   1a740:	ldr	r0, [r8]
   1a744:	cmp	r0, #2
   1a748:	bne	1a7c8 <__assert_fail@plt+0x7d18>
   1a74c:	ldrb	r2, [r8, #5]
   1a750:	cmp	r2, #0
   1a754:	beq	1a7fc <__assert_fail@plt+0x7d4c>
   1a758:	ldrb	r0, [r8, #4]
   1a75c:	sub	r0, r0, #65	; 0x41
   1a760:	cmp	r0, #19
   1a764:	bhi	1b100 <__assert_fail@plt+0x8650>
   1a768:	add	r1, pc, #0
   1a76c:	ldr	pc, [r1, r0, lsl #2]
   1a770:	andeq	sl, r1, r0, asr #15
   1a774:	andeq	sl, r1, r8, ror sl
   1a778:	andeq	sl, r1, ip, lsl #21
   1a77c:	andeq	fp, r1, r0, lsl #2
   1a780:	andeq	fp, r1, r0, lsl #2
   1a784:	andeq	fp, r1, r0, lsl #2
   1a788:	andeq	fp, r1, r0, lsl #2
   1a78c:	andeq	fp, r1, r0, lsl #2
   1a790:	andeq	fp, r1, r0, lsl #2
   1a794:	andeq	fp, r1, r0, lsl #2
   1a798:	andeq	fp, r1, r0, lsl #2
   1a79c:	andeq	fp, r1, r0, lsl #2
   1a7a0:	andeq	fp, r1, r0, lsl #2
   1a7a4:	andeq	fp, r1, r0, lsl #2
   1a7a8:	andeq	fp, r1, r0, lsl #2
   1a7ac:	andeq	fp, r1, r0, lsl #2
   1a7b0:	andeq	fp, r1, r0, lsl #2
   1a7b4:	andeq	fp, r1, r0, lsl #2
   1a7b8:	andeq	fp, r1, r0, lsl #2
   1a7bc:	andeq	sl, r1, r0, ror sl
   1a7c0:	ldr	r0, [sp, #44]	; 0x2c
   1a7c4:	b	1aa90 <__assert_fail@plt+0x7fe0>
   1a7c8:	cmp	r0, #1
   1a7cc:	beq	1aa1c <__assert_fail@plt+0x7f6c>
   1a7d0:	cmp	r0, #0
   1a7d4:	bne	1a734 <__assert_fail@plt+0x7c84>
   1a7d8:	ldr	r6, [r8, #12]
   1a7dc:	ldr	r3, [r7, #4]
   1a7e0:	ldr	r0, [r8, #8]
   1a7e4:	mov	r1, #1
   1a7e8:	mov	r2, r6
   1a7ec:	bl	12618 <fwrite@plt>
   1a7f0:	cmp	r0, r6
   1a7f4:	bcs	1a734 <__assert_fail@plt+0x7c84>
   1a7f8:	b	1aa5c <__assert_fail@plt+0x7fac>
   1a7fc:	ldrb	r0, [r8, #4]
   1a800:	cmp	r0, #121	; 0x79
   1a804:	bhi	1a734 <__assert_fail@plt+0x7c84>
   1a808:	add	r1, pc, #0
   1a80c:	ldr	pc, [r1, r0, lsl #2]
   1a810:	andeq	fp, r1, r0, lsr #2
   1a814:	andeq	sl, r1, r4, lsr r7
   1a818:	andeq	sl, r1, r4, lsr r7
   1a81c:	andeq	sl, r1, r4, lsr r7
   1a820:	andeq	sl, r1, r4, lsr r7
   1a824:	andeq	sl, r1, r4, lsr r7
   1a828:	andeq	sl, r1, r4, lsr r7
   1a82c:	andeq	sl, r1, r4, lsr r7
   1a830:	andeq	sl, r1, r4, lsr r7
   1a834:	andeq	sl, r1, r4, lsr r7
   1a838:	andeq	sl, r1, r4, lsr r7
   1a83c:	andeq	sl, r1, r4, lsr r7
   1a840:	andeq	sl, r1, r4, lsr r7
   1a844:	andeq	sl, r1, r4, lsr r7
   1a848:	andeq	sl, r1, r4, lsr r7
   1a84c:	andeq	sl, r1, r4, lsr r7
   1a850:	andeq	sl, r1, r4, lsr r7
   1a854:	andeq	sl, r1, r4, lsr r7
   1a858:	andeq	sl, r1, r4, lsr r7
   1a85c:	andeq	sl, r1, r4, lsr r7
   1a860:	andeq	sl, r1, r4, lsr r7
   1a864:	andeq	sl, r1, r4, lsr r7
   1a868:	andeq	sl, r1, r4, lsr r7
   1a86c:	andeq	sl, r1, r4, lsr r7
   1a870:	andeq	sl, r1, r4, lsr r7
   1a874:	andeq	sl, r1, r4, lsr r7
   1a878:	andeq	sl, r1, r4, lsr r7
   1a87c:	andeq	sl, r1, r4, lsr r7
   1a880:	andeq	sl, r1, r4, lsr r7
   1a884:	andeq	sl, r1, r4, lsr r7
   1a888:	andeq	sl, r1, r4, lsr r7
   1a88c:	andeq	sl, r1, r4, lsr r7
   1a890:	andeq	sl, r1, r4, lsr r7
   1a894:	andeq	sl, r1, r4, lsr r7
   1a898:	andeq	sl, r1, r4, lsr r7
   1a89c:	andeq	sl, r1, r4, lsr r7
   1a8a0:	andeq	sl, r1, r4, lsr r7
   1a8a4:	strdeq	sl, [r1], -r8
   1a8a8:	andeq	sl, r1, r4, lsr r7
   1a8ac:	andeq	sl, r1, r4, lsr r7
   1a8b0:	andeq	sl, r1, r4, lsr r7
   1a8b4:	andeq	sl, r1, r4, lsr r7
   1a8b8:	andeq	sl, r1, r4, lsr r7
   1a8bc:	andeq	sl, r1, r4, lsr r7
   1a8c0:	andeq	sl, r1, r4, lsr r7
   1a8c4:	andeq	sl, r1, r4, lsr r7
   1a8c8:	andeq	sl, r1, r4, lsr r7
   1a8cc:	andeq	sl, r1, r4, lsr r7
   1a8d0:	andeq	sl, r1, r4, lsr r7
   1a8d4:	andeq	sl, r1, r4, lsr r7
   1a8d8:	andeq	sl, r1, r4, lsr r7
   1a8dc:	andeq	sl, r1, r4, lsr r7
   1a8e0:	andeq	sl, r1, r4, lsr r7
   1a8e4:	andeq	sl, r1, r4, lsr r7
   1a8e8:	andeq	sl, r1, r4, lsr r7
   1a8ec:	andeq	sl, r1, r4, lsr r7
   1a8f0:	andeq	sl, r1, r4, lsr r7
   1a8f4:	andeq	sl, r1, r4, lsr r7
   1a8f8:	andeq	sl, r1, r4, lsr r7
   1a8fc:	andeq	sl, r1, r4, lsr r7
   1a900:	andeq	sl, r1, r4, lsr r7
   1a904:	andeq	sl, r1, r4, lsr r7
   1a908:	andeq	sl, r1, r4, lsr r7
   1a90c:	andeq	sl, r1, r4, lsr r7
   1a910:	andeq	sl, r1, r4, lsr r7
   1a914:	andeq	sl, r1, r4, lsr r7
   1a918:	andeq	sl, r1, r4, lsr r7
   1a91c:	andeq	sl, r1, r4, lsr r7
   1a920:	andeq	sl, r1, ip, ror #22
   1a924:	andeq	sl, r1, r4, lsr r7
   1a928:	muleq	r1, r0, fp
   1a92c:	andeq	sl, r1, r0, lsl lr
   1a930:			; <UNDEFINED> instruction: 0x0001abbc
   1a934:	andeq	sl, r1, r4, lsr r7
   1a938:	andeq	sl, r1, r4, lsr r7
   1a93c:	andeq	sl, r1, r4, lsr r7
   1a940:	andeq	sl, r1, r4, lsr r7
   1a944:	andeq	sl, r1, ip, lsl #22
   1a948:	andeq	sl, r1, r4, lsr r7
   1a94c:	andeq	sl, r1, r4, lsr r7
   1a950:	andeq	sl, r1, ip, lsl #26
   1a954:	andeq	sl, r1, r4, lsr r7
   1a958:	andeq	sl, r1, r4, lsr r7
   1a95c:	andeq	sl, r1, r0, ror #26
   1a960:	andeq	sl, r1, r4, lsr r7
   1a964:	andeq	sl, r1, r4, lsl #30
   1a968:	andeq	sl, r1, r4, lsr r7
   1a96c:	andeq	sl, r1, r4, lsr r7
   1a970:	andeq	sl, r1, r4, lsr r7
   1a974:	andeq	sl, r1, r0, lsl #24
   1a978:	andeq	sl, r1, r4, lsr #27
   1a97c:	andeq	sl, r1, r4, lsr r7
   1a980:	andeq	sl, r1, r4, lsr r7
   1a984:	andeq	sl, r1, r4, lsr r7
   1a988:	andeq	sl, r1, r4, lsr r7
   1a98c:	andeq	sl, r1, r4, lsr r7
   1a990:	andeq	sl, r1, r4, lsr r7
   1a994:	andeq	sl, r1, r4, lsr fp
   1a998:	andeq	sl, r1, ip, lsr #21
   1a99c:	andeq	sl, r1, ip, ror #27
   1a9a0:	andeq	sl, r1, r8, ror #24
   1a9a4:	andeq	sl, r1, r4, lsr r7
   1a9a8:	andeq	sl, r1, r4, ror ip
   1a9ac:	andeq	sl, r1, r0, lsl #28
   1a9b0:	muleq	r1, r4, ip
   1a9b4:	andeq	sl, r1, ip, lsr #29
   1a9b8:	andeq	sl, r1, r4, lsr r7
   1a9bc:	andeq	sl, r1, r0, asr #22
   1a9c0:	andeq	sl, r1, r0, asr #28
   1a9c4:	andeq	sl, r1, r4, asr #21
   1a9c8:	andeq	sl, r1, r0, ror #22
   1a9cc:	andeq	sl, r1, r4, lsr r7
   1a9d0:	andeq	sl, r1, r0, ror #21
   1a9d4:	andeq	sl, r1, r4, lsr r7
   1a9d8:	andeq	sl, r1, r4, lsr r7
   1a9dc:	andeq	sl, r1, r0, lsl #26
   1a9e0:	strdeq	sl, [r1], -r8
   1a9e4:	ldrdeq	sl, [r1], -r4
   1a9e8:	andeq	sl, r1, r4, lsr r7
   1a9ec:	andeq	sl, r1, r4, lsr r7
   1a9f0:	andeq	sl, r1, r4, lsr r7
   1a9f4:	andeq	sl, r1, r0, asr #30
   1a9f8:	ldr	r5, [r8, #12]
   1a9fc:	ldr	r3, [r7, #4]
   1aa00:	ldr	r0, [r8, #8]
   1aa04:	mov	r1, #1
   1aa08:	mov	r2, r5
   1aa0c:	bl	12618 <fwrite@plt>
   1aa10:	cmp	r0, r5
   1aa14:	bcs	1a734 <__assert_fail@plt+0x7c84>
   1aa18:	b	1aa5c <__assert_fail@plt+0x7fac>
   1aa1c:	ldr	r6, [r8, #12]
   1aa20:	ldr	r3, [r7, #4]
   1aa24:	ldr	r0, [r8, #8]
   1aa28:	mov	r1, #1
   1aa2c:	mov	r2, r6
   1aa30:	bl	12618 <fwrite@plt>
   1aa34:	cmp	r0, r6
   1aa38:	bcs	1aa4c <__assert_fail@plt+0x7f9c>
   1aa3c:	bl	12804 <__errno_location@plt>
   1aa40:	ldr	r0, [r0]
   1aa44:	ldr	r1, [r9, #48]	; 0x30
   1aa48:	bl	18b9c <__assert_fail@plt+0x60ec>
   1aa4c:	ldr	r0, [r7, #4]
   1aa50:	bl	30118 <__assert_fail@plt+0x1d668>
   1aa54:	cmp	r0, #0
   1aa58:	beq	1a734 <__assert_fail@plt+0x7c84>
   1aa5c:	bl	12804 <__errno_location@plt>
   1aa60:	ldr	r0, [r0]
   1aa64:	ldr	r1, [r9, #48]	; 0x30
   1aa68:	bl	18b9c <__assert_fail@plt+0x60ec>
   1aa6c:	b	1a734 <__assert_fail@plt+0x7c84>
   1aa70:	ldr	r0, [sp, #40]	; 0x28
   1aa74:	b	1aa90 <__assert_fail@plt+0x7fe0>
   1aa78:	mvn	r1, #0
   1aa7c:	cmp	r2, #64	; 0x40
   1aa80:	mvn	r0, #0
   1aa84:	bne	1a720 <__assert_fail@plt+0x7c70>
   1aa88:	b	1aa94 <__assert_fail@plt+0x7fe4>
   1aa8c:	ldr	r0, [sp, #36]	; 0x24
   1aa90:	ldrd	r0, [r0]
   1aa94:	ldr	r6, [r8, #8]
   1aa98:	bl	1b1b4 <__assert_fail@plt+0x8704>
   1aa9c:	mov	r2, r0
   1aaa0:	mov	r0, r7
   1aaa4:	mov	r1, r6
   1aaa8:	b	1a730 <__assert_fail@plt+0x7c80>
   1aaac:	ldr	r0, [sp, #32]
   1aab0:	ldr	r6, [r8, #8]
   1aab4:	mov	r2, #0
   1aab8:	mov	r3, #512	; 0x200
   1aabc:	ldrd	r0, [r0]
   1aac0:	b	1ab7c <__assert_fail@plt+0x80cc>
   1aac4:	ldr	r2, [sl, #16]
   1aac8:	ldr	r1, [r8, #8]
   1aacc:	mov	r0, r7
   1aad0:	bfc	r2, #12, #20
   1aad4:	b	1a730 <__assert_fail@plt+0x7c80>
   1aad8:	andeq	r0, r0, r0
   1aadc:	addmi	r0, r0, r0
   1aae0:	ldrb	r2, [r9, #52]	; 0x34
   1aae4:	ldr	r1, [r9, #56]	; 0x38
   1aae8:	ldr	r0, [r9, #44]	; 0x2c
   1aaec:	ldr	r3, [r8, #8]
   1aaf0:	str	r4, [sp]
   1aaf4:	b	1ad50 <__assert_fail@plt+0x82a0>
   1aaf8:	ldr	r0, [sp, #40]	; 0x28
   1aafc:	ldr	r5, [r8, #8]
   1ab00:	ldrd	r0, [r0]
   1ab04:	bl	1b6d4 <__assert_fail@plt+0x8c24>
   1ab08:	b	1af30 <__assert_fail@plt+0x8480>
   1ab0c:	add	r5, sp, #48	; 0x30
   1ab10:	mov	r0, sl
   1ab14:	mov	r1, r5
   1ab18:	bl	22c84 <__assert_fail@plt+0x101d4>
   1ab1c:	mov	r0, #0
   1ab20:	mov	r2, r5
   1ab24:	strb	r0, [sp, #58]	; 0x3a
   1ab28:	mov	r0, r7
   1ab2c:	ldr	r1, [r8, #8]
   1ab30:	b	1a730 <__assert_fail@plt+0x7c80>
   1ab34:	ldr	r6, [r8, #8]
   1ab38:	ldr	r0, [sp, #44]	; 0x2c
   1ab3c:	b	1adf4 <__assert_fail@plt+0x8344>
   1ab40:	ldr	r0, [sp, #32]
   1ab44:	ldr	r5, [r8, #8]
   1ab48:	mov	r6, #512	; 0x200
   1ab4c:	mov	r2, #0
   1ab50:	mov	r3, #1024	; 0x400
   1ab54:	ldrd	r0, [r0]
   1ab58:	str	r6, [sp]
   1ab5c:	b	1aec4 <__assert_fail@plt+0x8414>
   1ab60:	ldr	r5, [r8, #8]
   1ab64:	ldr	r0, [sl, #20]
   1ab68:	b	1af0c <__assert_fail@plt+0x845c>
   1ab6c:	ldr	r6, [r8, #8]
   1ab70:	ldrd	r0, [sl]
   1ab74:	mov	r2, #0
   1ab78:	mov	r3, #1
   1ab7c:	str	r3, [sp]
   1ab80:	stmib	sp, {r2, r3}
   1ab84:	str	r2, [sp, #12]
   1ab88:	add	r2, sp, #152	; 0x98
   1ab8c:	b	1ae34 <__assert_fail@plt+0x8384>
   1ab90:	ldr	r6, [r8, #8]
   1ab94:	mov	r0, sl
   1ab98:	mov	r1, r4
   1ab9c:	bl	1b8b8 <__assert_fail@plt+0x8e08>
   1aba0:	ldr	r3, [r9, #44]	; 0x2c
   1aba4:	ldr	r1, [r9, #56]	; 0x38
   1aba8:	ldrb	r2, [r9, #52]	; 0x34
   1abac:	str	r0, [sp]
   1abb0:	mov	r0, r3
   1abb4:	mov	r3, r6
   1abb8:	b	1ad50 <__assert_fail@plt+0x82a0>
   1abbc:	movw	r5, #61000	; 0xee48
   1abc0:	movt	r5, #5
   1abc4:	ldr	r0, [r5, #20]
   1abc8:	add	r0, r0, #1
   1abcc:	bl	2e038 <__assert_fail@plt+0x1b588>
   1abd0:	ldr	r5, [r5, #20]
   1abd4:	mov	r1, r4
   1abd8:	mov	r6, r0
   1abdc:	mov	r2, r5
   1abe0:	bl	124e0 <memcpy@plt>
   1abe4:	mov	r0, #0
   1abe8:	mov	r2, r6
   1abec:	strb	r0, [r6, r5]
   1abf0:	mov	r0, r7
   1abf4:	ldr	r1, [r8, #8]
   1abf8:	bl	1b160 <__assert_fail@plt+0x86b0>
   1abfc:	b	1aea0 <__assert_fail@plt+0x83f0>
   1ac00:	ldr	r0, [sl, #16]
   1ac04:	and	r0, r0, #61440	; 0xf000
   1ac08:	cmp	r0, #40960	; 0xa000
   1ac0c:	bne	1af50 <__assert_fail@plt+0x84a0>
   1ac10:	movw	r0, #61000	; 0xee48
   1ac14:	add	r3, sp, #48	; 0x30
   1ac18:	movt	r0, #5
   1ac1c:	ldr	r2, [r0, #12]
   1ac20:	ldr	r1, [r0, #16]
   1ac24:	mov	r0, #0
   1ac28:	str	r0, [sp]
   1ac2c:	mov	r0, #3
   1ac30:	bl	125dc <__fxstatat64@plt>
   1ac34:	cmp	r0, #0
   1ac38:	beq	1b024 <__assert_fail@plt+0x8574>
   1ac3c:	bl	12804 <__errno_location@plt>
   1ac40:	mov	r6, r0
   1ac44:	ldr	r0, [r0]
   1ac48:	cmp	r0, #20
   1ac4c:	cmpne	r0, #2
   1ac50:	bne	1b094 <__assert_fail@plt+0x85e4>
   1ac54:	ldr	r1, [r8, #8]
   1ac58:	movw	r2, #41683	; 0xa2d3
   1ac5c:	mov	r0, r7
   1ac60:	movt	r2, #4
   1ac64:	b	1a730 <__assert_fail@plt+0x7c80>
   1ac68:	movw	r0, #61000	; 0xee48
   1ac6c:	movt	r0, #5
   1ac70:	b	1aef4 <__assert_fail@plt+0x8444>
   1ac74:	mov	r0, r4
   1ac78:	bl	22958 <__assert_fail@plt+0xfea8>
   1ac7c:	mov	r6, r0
   1ac80:	ldr	r3, [r8, #8]
   1ac84:	ldr	r0, [r9, #44]	; 0x2c
   1ac88:	ldr	r1, [r9, #56]	; 0x38
   1ac8c:	ldrb	r2, [r9, #52]	; 0x34
   1ac90:	b	1ae80 <__assert_fail@plt+0x83d0>
   1ac94:	mov	r0, r4
   1ac98:	bl	2e53c <__assert_fail@plt+0x1ba8c>
   1ac9c:	mov	r6, r0
   1aca0:	bl	127bc <strlen@plt>
   1aca4:	add	r0, r6, r0
   1aca8:	sub	r1, r0, #1
   1acac:	mov	r0, r1
   1acb0:	cmp	r6, r1
   1acb4:	bhi	1acc8 <__assert_fail@plt+0x8218>
   1acb8:	mov	r1, r0
   1acbc:	ldrb	r2, [r1], #-1
   1acc0:	cmp	r2, #47	; 0x2f
   1acc4:	beq	1acac <__assert_fail@plt+0x81fc>
   1acc8:	cmp	r6, r0
   1accc:	bcs	1ace0 <__assert_fail@plt+0x8230>
   1acd0:	ldrb	r1, [r0, #1]
   1acd4:	cmp	r1, #47	; 0x2f
   1acd8:	moveq	r1, #0
   1acdc:	strbeq	r1, [r0, #1]
   1ace0:	mov	r0, r6
   1ace4:	mov	r1, #47	; 0x2f
   1ace8:	bl	12924 <strrchr@plt>
   1acec:	cmp	r0, #0
   1acf0:	beq	1af88 <__assert_fail@plt+0x84d8>
   1acf4:	mov	r1, #0
   1acf8:	strb	r1, [r0]
   1acfc:	b	1ae70 <__assert_fail@plt+0x83c0>
   1ad00:	ldr	r5, [r8, #8]
   1ad04:	ldr	r0, [sp, #28]
   1ad08:	b	1aeb4 <__assert_fail@plt+0x8404>
   1ad0c:	movw	r0, #61000	; 0xee48
   1ad10:	movw	r6, #38711	; 0x9737
   1ad14:	movt	r0, #5
   1ad18:	movt	r6, #4
   1ad1c:	ldr	r1, [r0]
   1ad20:	cmp	r1, #1
   1ad24:	blt	1ad3c <__assert_fail@plt+0x828c>
   1ad28:	ldr	r0, [r0, #20]
   1ad2c:	mov	r6, r4
   1ad30:	ldrb	r0, [r6, r0]!
   1ad34:	cmp	r0, #47	; 0x2f
   1ad38:	addeq	r6, r6, #1
   1ad3c:	ldrb	r2, [r9, #52]	; 0x34
   1ad40:	ldr	r1, [r9, #56]	; 0x38
   1ad44:	ldr	r0, [r9, #44]	; 0x2c
   1ad48:	ldr	r3, [r8, #8]
   1ad4c:	str	r6, [sp]
   1ad50:	bl	21b2c <__assert_fail@plt+0xf07c>
   1ad54:	cmn	r0, #1
   1ad58:	bgt	1a734 <__assert_fail@plt+0x7c84>
   1ad5c:	b	1aa5c <__assert_fail@plt+0x7fac>
   1ad60:	ldr	r2, [sp, #28]
   1ad64:	ldr	r0, [sp, #32]
   1ad68:	str	r4, [sp, #20]
   1ad6c:	ldr	r6, [r8, #8]
   1ad70:	ldrd	r4, [r2]
   1ad74:	ldrd	r0, [r0]
   1ad78:	orrs	r2, r4, r5
   1ad7c:	beq	1afa8 <__assert_fail@plt+0x84f8>
   1ad80:	bl	474e4 <__assert_fail@plt+0x34a34>
   1ad84:	vmov	d9, r0, r1
   1ad88:	mov	r0, r4
   1ad8c:	mov	r1, r5
   1ad90:	bl	474e4 <__assert_fail@plt+0x34a34>
   1ad94:	vmov	d16, r0, r1
   1ad98:	vmul.f64	d17, d9, d8
   1ad9c:	vdiv.f64	d16, d17, d16
   1ada0:	b	1b07c <__assert_fail@plt+0x85cc>
   1ada4:	movw	r0, #61044	; 0xee74
   1ada8:	movw	r5, #61000	; 0xee48
   1adac:	add	r2, sp, #48	; 0x30
   1adb0:	movt	r0, #5
   1adb4:	movt	r5, #5
   1adb8:	ldr	r3, [r0, #64]	; 0x40
   1adbc:	ldr	r1, [r5, #12]
   1adc0:	ldr	r0, [r5, #16]
   1adc4:	blx	r3
   1adc8:	ldr	r1, [r8, #8]
   1adcc:	cmn	r0, #1
   1add0:	ble	1afc4 <__assert_fail@plt+0x8514>
   1add4:	ldr	r2, [sp, #48]	; 0x30
   1add8:	mov	r0, r7
   1addc:	bl	1b160 <__assert_fail@plt+0x86b0>
   1ade0:	ldr	r0, [sp, #48]	; 0x30
   1ade4:	bl	129d8 <freecon@plt>
   1ade8:	b	1a734 <__assert_fail@plt+0x7c84>
   1adec:	ldr	r6, [r8, #8]
   1adf0:	ldr	r0, [sp, #36]	; 0x24
   1adf4:	ldrd	r0, [r0]
   1adf8:	bl	1b6d4 <__assert_fail@plt+0x8c24>
   1adfc:	b	1aa9c <__assert_fail@plt+0x7fec>
   1ae00:	ldr	r0, [sl, #28]
   1ae04:	bl	12a8c <getgrgid@plt>
   1ae08:	cmp	r0, #0
   1ae0c:	bne	1aee4 <__assert_fail@plt+0x8434>
   1ae10:	ldr	r6, [r8, #8]
   1ae14:	ldr	r0, [sl, #28]
   1ae18:	mov	r2, #1
   1ae1c:	mov	r1, #0
   1ae20:	str	r2, [sp]
   1ae24:	stmib	sp, {r1, r2}
   1ae28:	str	r1, [sp, #12]
   1ae2c:	add	r2, sp, #152	; 0x98
   1ae30:	mov	r1, #0
   1ae34:	mov	r3, #0
   1ae38:	bl	24010 <__assert_fail@plt+0x11560>
   1ae3c:	b	1aa9c <__assert_fail@plt+0x7fec>
   1ae40:	ldr	r0, [sl, #16]
   1ae44:	and	r0, r0, #61440	; 0xf000
   1ae48:	cmp	r0, #40960	; 0xa000
   1ae4c:	bne	1b048 <__assert_fail@plt+0x8598>
   1ae50:	movw	r5, #61000	; 0xee48
   1ae54:	movt	r5, #5
   1ae58:	ldr	r1, [r5, #12]
   1ae5c:	ldr	r0, [r5, #16]
   1ae60:	bl	22400 <__assert_fail@plt+0xf950>
   1ae64:	cmp	r0, #0
   1ae68:	beq	1b030 <__assert_fail@plt+0x8580>
   1ae6c:	mov	r6, r0
   1ae70:	ldrb	r2, [r9, #52]	; 0x34
   1ae74:	ldr	r1, [r9, #56]	; 0x38
   1ae78:	ldr	r0, [r9, #44]	; 0x2c
   1ae7c:	ldr	r3, [r8, #8]
   1ae80:	str	r6, [sp]
   1ae84:	bl	21b2c <__assert_fail@plt+0xf07c>
   1ae88:	cmn	r0, #1
   1ae8c:	bgt	1aea0 <__assert_fail@plt+0x83f0>
   1ae90:	bl	12804 <__errno_location@plt>
   1ae94:	ldr	r0, [r0]
   1ae98:	ldr	r1, [r9, #48]	; 0x30
   1ae9c:	bl	18b9c <__assert_fail@plt+0x60ec>
   1aea0:	mov	r0, r6
   1aea4:	bl	30174 <__assert_fail@plt+0x1d6c4>
   1aea8:	b	1a734 <__assert_fail@plt+0x7c84>
   1aeac:	ldr	r5, [r8, #8]
   1aeb0:	ldr	r0, [sp, #24]
   1aeb4:	ldrd	r0, [r0]
   1aeb8:	mov	r3, #1
   1aebc:	mov	r2, #0
   1aec0:	str	r3, [sp]
   1aec4:	stmib	sp, {r2, r3}
   1aec8:	str	r2, [sp, #12]
   1aecc:	add	r2, sp, #152	; 0x98
   1aed0:	b	1af28 <__assert_fail@plt+0x8478>
   1aed4:	ldr	r0, [sl, #24]
   1aed8:	bl	12414 <getpwuid@plt>
   1aedc:	cmp	r0, #0
   1aee0:	beq	1af04 <__assert_fail@plt+0x8454>
   1aee4:	ldr	r1, [r8, #8]
   1aee8:	ldr	r2, [r8, #12]
   1aeec:	mov	r3, #115	; 0x73
   1aef0:	strb	r3, [r1, r2]
   1aef4:	ldr	r2, [r0]
   1aef8:	ldr	r1, [r8, #8]
   1aefc:	mov	r0, r7
   1af00:	b	1a730 <__assert_fail@plt+0x7c80>
   1af04:	ldr	r5, [r8, #8]
   1af08:	ldr	r0, [sl, #24]
   1af0c:	mov	r2, #1
   1af10:	mov	r1, #0
   1af14:	str	r2, [sp]
   1af18:	stmib	sp, {r1, r2}
   1af1c:	str	r1, [sp, #12]
   1af20:	add	r2, sp, #152	; 0x98
   1af24:	mov	r1, #0
   1af28:	mov	r3, #0
   1af2c:	bl	24010 <__assert_fail@plt+0x11560>
   1af30:	mov	r2, r0
   1af34:	mov	r0, r7
   1af38:	mov	r1, r5
   1af3c:	b	1a730 <__assert_fail@plt+0x7c80>
   1af40:	ldr	r1, [r8, #8]
   1af44:	ldr	r0, [sl, #16]
   1af48:	and	r0, r0, #61440	; 0xf000
   1af4c:	b	1af54 <__assert_fail@plt+0x84a4>
   1af50:	ldr	r1, [r8, #8]
   1af54:	sub	r0, r0, #4096	; 0x1000
   1af58:	lsr	r2, r0, #14
   1af5c:	cmp	r2, #2
   1af60:	bhi	1af78 <__assert_fail@plt+0x84c8>
   1af64:	movw	r2, #41860	; 0xa384
   1af68:	movt	r2, #4
   1af6c:	ldr	r2, [r2, r0, lsr #10]
   1af70:	mov	r0, r7
   1af74:	b	1a730 <__assert_fail@plt+0x7c80>
   1af78:	movw	r2, #41761	; 0xa321
   1af7c:	mov	r0, r7
   1af80:	movt	r2, #4
   1af84:	b	1a730 <__assert_fail@plt+0x7c80>
   1af88:	movw	r5, #35340	; 0x8a0c
   1af8c:	ldrb	r2, [r9, #52]	; 0x34
   1af90:	ldr	r1, [r9, #56]	; 0x38
   1af94:	ldr	r0, [r9, #44]	; 0x2c
   1af98:	ldr	r3, [r8, #8]
   1af9c:	movt	r5, #4
   1afa0:	str	r5, [sp]
   1afa4:	b	1ae84 <__assert_fail@plt+0x83d4>
   1afa8:	orrs	r0, r0, r1
   1afac:	beq	1b078 <__assert_fail@plt+0x85c8>
   1afb0:	add	r0, pc, #408	; 0x198
   1afb4:	cmp	r1, #0
   1afb8:	addmi	r0, r0, #8
   1afbc:	vldr	d16, [r0]
   1afc0:	b	1b07c <__assert_fail@plt+0x85cc>
   1afc4:	movw	r2, #38711	; 0x9737
   1afc8:	mov	r0, r7
   1afcc:	movt	r2, #4
   1afd0:	bl	1b160 <__assert_fail@plt+0x86b0>
   1afd4:	bl	12804 <__errno_location@plt>
   1afd8:	ldr	r0, [r0]
   1afdc:	movw	r1, #32909	; 0x808d
   1afe0:	mov	r2, #5
   1afe4:	movt	r1, #4
   1afe8:	str	r0, [sp, #20]
   1afec:	mov	r0, #0
   1aff0:	bl	12564 <dcgettext@plt>
   1aff4:	mov	r6, r0
   1aff8:	mov	r0, #0
   1affc:	mov	r1, r4
   1b000:	bl	19960 <__assert_fail@plt+0x6eb0>
   1b004:	ldr	r1, [sp, #20]
   1b008:	mov	r3, r0
   1b00c:	mov	r0, #0
   1b010:	mov	r2, r6
   1b014:	bl	1269c <error@plt>
   1b018:	mov	r0, #1
   1b01c:	str	r0, [r5, #28]
   1b020:	b	1a734 <__assert_fail@plt+0x7c84>
   1b024:	ldr	r1, [r8, #8]
   1b028:	ldr	r0, [sp, #64]	; 0x40
   1b02c:	b	1af48 <__assert_fail@plt+0x8498>
   1b030:	bl	12804 <__errno_location@plt>
   1b034:	ldr	r0, [r0]
   1b038:	mov	r1, r4
   1b03c:	bl	18628 <__assert_fail@plt+0x5b78>
   1b040:	mov	r0, #1
   1b044:	str	r0, [r5, #28]
   1b048:	ldrb	r2, [r9, #52]	; 0x34
   1b04c:	ldr	r1, [r9, #56]	; 0x38
   1b050:	ldr	r0, [r9, #44]	; 0x2c
   1b054:	ldr	r3, [r8, #8]
   1b058:	movw	r6, #38711	; 0x9737
   1b05c:	movt	r6, #4
   1b060:	str	r6, [sp]
   1b064:	bl	21b2c <__assert_fail@plt+0xf07c>
   1b068:	mov	r6, #0
   1b06c:	cmn	r0, #1
   1b070:	bgt	1aea0 <__assert_fail@plt+0x83f0>
   1b074:	b	1ae90 <__assert_fail@plt+0x83e0>
   1b078:	vmov.f64	d16, #112	; 0x3f800000  1.0
   1b07c:	vmov	r2, r3, d16
   1b080:	ldr	r4, [sp, #20]
   1b084:	mov	r0, r7
   1b088:	mov	r1, r6
   1b08c:	bl	1b160 <__assert_fail@plt+0x86b0>
   1b090:	b	1a734 <__assert_fail@plt+0x7c84>
   1b094:	ldr	r1, [r8, #8]
   1b098:	cmp	r0, #40	; 0x28
   1b09c:	bne	1b0b0 <__assert_fail@plt+0x8600>
   1b0a0:	movw	r2, #39068	; 0x989c
   1b0a4:	mov	r0, r7
   1b0a8:	movt	r2, #4
   1b0ac:	b	1a730 <__assert_fail@plt+0x7c80>
   1b0b0:	movw	r2, #43550	; 0xaa1e
   1b0b4:	mov	r0, r7
   1b0b8:	movt	r2, #4
   1b0bc:	bl	1b160 <__assert_fail@plt+0x86b0>
   1b0c0:	ldr	r5, [r6]
   1b0c4:	mov	r0, #0
   1b0c8:	mov	r1, r4
   1b0cc:	bl	19960 <__assert_fail@plt+0x6eb0>
   1b0d0:	movw	r2, #56015	; 0xdacf
   1b0d4:	mov	r3, r0
   1b0d8:	mov	r0, #0
   1b0dc:	mov	r1, r5
   1b0e0:	movt	r2, #4
   1b0e4:	bl	1269c <error@plt>
   1b0e8:	b	1a734 <__assert_fail@plt+0x7c84>
   1b0ec:	mov	r0, #1
   1b0f0:	sub	sp, fp, #48	; 0x30
   1b0f4:	vpop	{d8-d9}
   1b0f8:	add	sp, sp, #4
   1b0fc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1b100:	movw	r0, #35937	; 0x8c61
   1b104:	movw	r1, #40513	; 0x9e41
   1b108:	movw	r3, #41017	; 0xa039
   1b10c:	movw	r2, #1304	; 0x518
   1b110:	movt	r0, #4
   1b114:	movt	r1, #4
   1b118:	movt	r3, #4
   1b11c:	bl	12ab0 <__assert_fail@plt>
   1b120:	movw	r1, #40798	; 0x9f5e
   1b124:	mov	r0, #0
   1b128:	mov	r2, #5
   1b12c:	movt	r1, #4
   1b130:	bl	12564 <dcgettext@plt>
   1b134:	movw	r3, #41117	; 0xa09d
   1b138:	mov	r2, r0
   1b13c:	mov	r0, #1
   1b140:	mov	r1, #0
   1b144:	movt	r3, #4
   1b148:	bl	1269c <error@plt>
   1b14c:	nop	{0}
   1b150:	andeq	r0, r0, r0
   1b154:	svcvc	0x00f00000	; IMB
   1b158:	andeq	r0, r0, r0
   1b15c:			; <UNDEFINED> instruction: 0xfff00000	; IMB
   1b160:	sub	sp, sp, #8
   1b164:	push	{r4, sl, fp, lr}
   1b168:	add	fp, sp, #8
   1b16c:	sub	sp, sp, #8
   1b170:	str	r2, [fp, #8]
   1b174:	add	r2, fp, #8
   1b178:	str	r3, [fp, #12]
   1b17c:	mov	r4, r0
   1b180:	str	r2, [sp, #4]
   1b184:	ldr	r0, [r0, #4]
   1b188:	bl	12930 <vfprintf@plt>
   1b18c:	cmn	r0, #1
   1b190:	bgt	1b1a4 <__assert_fail@plt+0x86f4>
   1b194:	bl	12804 <__errno_location@plt>
   1b198:	ldr	r0, [r0]
   1b19c:	ldr	r1, [r4, #8]
   1b1a0:	bl	18b9c <__assert_fail@plt+0x60ec>
   1b1a4:	sub	sp, fp, #8
   1b1a8:	pop	{r4, sl, fp, lr}
   1b1ac:	add	sp, sp, #8
   1b1b0:	bx	lr
   1b1b4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1b1b8:	add	fp, sp, #28
   1b1bc:	sub	sp, sp, #148	; 0x94
   1b1c0:	mov	r4, r2
   1b1c4:	mov	r3, r1
   1b1c8:	cmp	r2, #43	; 0x2b
   1b1cc:	str	r1, [fp, #-76]	; 0xffffffb4
   1b1d0:	str	r0, [fp, #-80]	; 0xffffffb0
   1b1d4:	bne	1b1f8 <__assert_fail@plt+0x8748>
   1b1d8:	movw	r0, #41768	; 0xa328
   1b1dc:	movt	r0, #4
   1b1e0:	vldr	d16, [r0]
   1b1e4:	movw	r0, #9515	; 0x252b
   1b1e8:	movt	r0, #84	; 0x54
   1b1ec:	str	r0, [sp, #56]	; 0x38
   1b1f0:	vstr	d16, [sp, #48]	; 0x30
   1b1f4:	b	1b22c <__assert_fail@plt+0x877c>
   1b1f8:	mov	r5, #0
   1b1fc:	mov	r0, #37	; 0x25
   1b200:	strb	r5, [sp, #50]	; 0x32
   1b204:	strb	r4, [sp, #49]	; 0x31
   1b208:	strb	r0, [sp, #48]	; 0x30
   1b20c:	sub	r0, r4, #64	; 0x40
   1b210:	cmp	r0, #24
   1b214:	bhi	1b330 <__assert_fail@plt+0x8880>
   1b218:	movw	r2, #1
   1b21c:	mov	r1, #1
   1b220:	movt	r2, #280	; 0x118
   1b224:	tst	r2, r1, lsl r0
   1b228:	beq	1b330 <__assert_fail@plt+0x8880>
   1b22c:	movw	r2, #41124	; 0xa0a4
   1b230:	add	r0, sp, #64	; 0x40
   1b234:	mov	r1, #32
   1b238:	movt	r2, #4
   1b23c:	bl	1281c <snprintf@plt>
   1b240:	cmp	r0, #32
   1b244:	bge	1b430 <__assert_fail@plt+0x8980>
   1b248:	mov	r8, r0
   1b24c:	mov	r5, #1
   1b250:	cmp	r4, #64	; 0x40
   1b254:	beq	1b340 <__assert_fail@plt+0x8890>
   1b258:	sub	r0, fp, #80	; 0x50
   1b25c:	bl	1272c <localtime@plt>
   1b260:	cmp	r0, #0
   1b264:	beq	1b340 <__assert_fail@plt+0x8890>
   1b268:	add	r6, sp, #48	; 0x30
   1b26c:	mov	r4, r0
   1b270:	mov	r0, r6
   1b274:	bl	127bc <strlen@plt>
   1b278:	mov	r7, r0
   1b27c:	add	r0, r0, #2
   1b280:	bl	2e038 <__assert_fail@plt+0x1b588>
   1b284:	mov	r1, #95	; 0x5f
   1b288:	mov	r9, r0
   1b28c:	add	r2, r7, #1
   1b290:	strb	r1, [r0], #1
   1b294:	mov	r1, r6
   1b298:	bl	124e0 <memcpy@plt>
   1b29c:	mov	r1, #28
   1b2a0:	mov	r2, r4
   1b2a4:	add	r0, r4, #16
   1b2a8:	sub	r3, fp, #72	; 0x48
   1b2ac:	movw	r5, #59576	; 0xe8b8
   1b2b0:	movw	r7, #59580	; 0xe8bc
   1b2b4:	vld1.32	{d16-d17}, [r2], r1
   1b2b8:	vld1.32	{d18-d19}, [r0]
   1b2bc:	add	r0, r3, #16
   1b2c0:	movt	r5, #5
   1b2c4:	movt	r7, #5
   1b2c8:	vld1.32	{d20-d21}, [r2]
   1b2cc:	vst1.64	{d16-d17}, [r3], r1
   1b2d0:	vst1.64	{d18-d19}, [r0]
   1b2d4:	mov	r1, #11
   1b2d8:	vst1.32	{d20-d21}, [r3]
   1b2dc:	ldr	r0, [fp, #-72]	; 0xffffffb8
   1b2e0:	cmp	r0, #10
   1b2e4:	mvngt	r1, #10
   1b2e8:	add	r0, r1, r0
   1b2ec:	str	r0, [fp, #-72]	; 0xffffffb8
   1b2f0:	ldr	r0, [r5]
   1b2f4:	cmp	r0, #0
   1b2f8:	bne	1b310 <__assert_fail@plt+0x8860>
   1b2fc:	mov	r0, #1
   1b300:	str	r0, [r7]
   1b304:	mov	r0, #1
   1b308:	bl	2e038 <__assert_fail@plt+0x1b588>
   1b30c:	str	r0, [r5]
   1b310:	ldr	r1, [r7]
   1b314:	mov	r2, r9
   1b318:	mov	r3, r4
   1b31c:	bl	12714 <strftime@plt>
   1b320:	cmp	r0, #0
   1b324:	beq	1b4b8 <__assert_fail@plt+0x8a08>
   1b328:	ldr	r1, [r7]
   1b32c:	b	1b4b0 <__assert_fail@plt+0x8a00>
   1b330:	mov	r8, #0
   1b334:	strb	r5, [sp, #64]	; 0x40
   1b338:	cmp	r4, #64	; 0x40
   1b33c:	bne	1b258 <__assert_fail@plt+0x87a8>
   1b340:	ldr	r2, [fp, #-80]	; 0xffffffb0
   1b344:	movw	r6, #58784	; 0xe5a0
   1b348:	mov	r0, #1
   1b34c:	mov	r1, #0
   1b350:	stm	sp, {r0, r1}
   1b354:	str	r0, [sp, #8]
   1b358:	movt	r6, #5
   1b35c:	str	r1, [sp, #12]
   1b360:	rsbs	r0, r2, #0
   1b364:	asr	r3, r2, #31
   1b368:	sbc	r1, r1, r2, asr #31
   1b36c:	cmp	r3, #0
   1b370:	movpl	r0, r2
   1b374:	movpl	r1, r3
   1b378:	add	r2, r6, #1
   1b37c:	mov	r3, #0
   1b380:	bl	24010 <__assert_fail@plt+0x11560>
   1b384:	cmp	r0, r6
   1b388:	bls	1b448 <__assert_fail@plt+0x8998>
   1b38c:	mov	r4, r0
   1b390:	movw	r0, #791	; 0x317
   1b394:	add	r0, r6, r0
   1b398:	cmp	r4, r0
   1b39c:	bcs	1b460 <__assert_fail@plt+0x89b0>
   1b3a0:	ldr	r0, [fp, #-80]	; 0xffffffb0
   1b3a4:	cmn	r0, #1
   1b3a8:	movle	r0, #45	; 0x2d
   1b3ac:	strble	r0, [r4, #-1]!
   1b3b0:	cmp	r5, #0
   1b3b4:	beq	1b634 <__assert_fail@plt+0x8b84>
   1b3b8:	mov	r0, r4
   1b3bc:	sub	r5, r4, r6
   1b3c0:	bl	127bc <strlen@plt>
   1b3c4:	add	r0, r0, r5
   1b3c8:	movw	r1, #791	; 0x317
   1b3cc:	cmp	r0, r1
   1b3d0:	bcs	1b478 <__assert_fail@plt+0x89c8>
   1b3d4:	movw	r1, #790	; 0x316
   1b3d8:	add	r5, sp, #64	; 0x40
   1b3dc:	sub	r6, r1, r0
   1b3e0:	mov	r0, r5
   1b3e4:	bl	127bc <strlen@plt>
   1b3e8:	cmp	r0, r6
   1b3ec:	bcc	1b410 <__assert_fail@plt+0x8960>
   1b3f0:	movw	r2, #41249	; 0xa121
   1b3f4:	mov	r0, #0
   1b3f8:	mov	r1, #0
   1b3fc:	mov	r3, r8
   1b400:	str	r6, [sp]
   1b404:	str	r5, [sp, #4]
   1b408:	movt	r2, #4
   1b40c:	bl	1269c <error@plt>
   1b410:	add	r0, sp, #64	; 0x40
   1b414:	bl	127bc <strlen@plt>
   1b418:	cmp	r0, r6
   1b41c:	bcs	1b490 <__assert_fail@plt+0x89e0>
   1b420:	add	r1, sp, #64	; 0x40
   1b424:	mov	r0, r4
   1b428:	bl	12624 <strcat@plt>
   1b42c:	b	1b634 <__assert_fail@plt+0x8b84>
   1b430:	movw	r0, #41132	; 0xa0ac
   1b434:	movw	r1, #40513	; 0x9e41
   1b438:	movw	r3, #41158	; 0xa0c6
   1b43c:	movw	r2, #665	; 0x299
   1b440:	movt	r0, #4
   1b444:	b	1b4a4 <__assert_fail@plt+0x89f4>
   1b448:	movw	r0, #41198	; 0xa0ee
   1b44c:	movw	r1, #40513	; 0x9e41
   1b450:	movw	r3, #41158	; 0xa0c6
   1b454:	movw	r2, #697	; 0x2b9
   1b458:	movt	r0, #4
   1b45c:	b	1b4a4 <__assert_fail@plt+0x89f4>
   1b460:	movw	r0, #41206	; 0xa0f6
   1b464:	movw	r1, #40513	; 0x9e41
   1b468:	movw	r3, #41158	; 0xa0c6
   1b46c:	movw	r2, #698	; 0x2ba
   1b470:	movt	r0, #4
   1b474:	b	1b4a4 <__assert_fail@plt+0x89f4>
   1b478:	movw	r0, #41231	; 0xa10f
   1b47c:	movw	r1, #40513	; 0x9e41
   1b480:	movw	r3, #41158	; 0xa0c6
   1b484:	movw	r2, #711	; 0x2c7
   1b488:	movt	r0, #4
   1b48c:	b	1b4a4 <__assert_fail@plt+0x89f4>
   1b490:	movw	r0, #41295	; 0xa14f
   1b494:	movw	r1, #40513	; 0x9e41
   1b498:	movw	r3, #41158	; 0xa0c6
   1b49c:	mov	r2, #720	; 0x2d0
   1b4a0:	movt	r0, #4
   1b4a4:	movt	r1, #4
   1b4a8:	movt	r3, #4
   1b4ac:	bl	12ab0 <__assert_fail@plt>
   1b4b0:	cmp	r0, r1
   1b4b4:	bcc	1b4ec <__assert_fail@plt+0x8a3c>
   1b4b8:	ldr	r0, [r5]
   1b4bc:	mov	r1, r7
   1b4c0:	mov	r2, #1
   1b4c4:	bl	2e1e4 <__assert_fail@plt+0x1b734>
   1b4c8:	ldr	r1, [r7]
   1b4cc:	mov	r2, r9
   1b4d0:	mov	r3, r4
   1b4d4:	str	r0, [r5]
   1b4d8:	bl	12714 <strftime@plt>
   1b4dc:	ldr	r1, [r7]
   1b4e0:	cmp	r0, #0
   1b4e4:	bne	1b4b0 <__assert_fail@plt+0x8a00>
   1b4e8:	b	1b4b8 <__assert_fail@plt+0x8a08>
   1b4ec:	str	r0, [sp, #20]
   1b4f0:	add	r0, r8, r0
   1b4f4:	str	r8, [sp, #28]
   1b4f8:	add	r4, r0, #1
   1b4fc:	ldr	r0, [r5]
   1b500:	mov	r1, r4
   1b504:	bl	2e080 <__assert_fail@plt+0x1b5d0>
   1b508:	str	r0, [r5]
   1b50c:	mov	r0, r4
   1b510:	str	r4, [r7]
   1b514:	str	r4, [sp, #24]
   1b518:	bl	2e038 <__assert_fail@plt+0x1b588>
   1b51c:	ldr	r1, [r7]
   1b520:	sub	r3, fp, #72	; 0x48
   1b524:	mov	r2, r9
   1b528:	str	r0, [sp, #40]	; 0x28
   1b52c:	str	r9, [sp, #36]	; 0x24
   1b530:	bl	12714 <strftime@plt>
   1b534:	ldr	r0, [r5]
   1b538:	ldrb	r1, [r0]
   1b53c:	str	r0, [sp, #32]
   1b540:	cmp	r1, #0
   1b544:	beq	1b614 <__assert_fail@plt+0x8b64>
   1b548:	ldr	r2, [sp, #40]	; 0x28
   1b54c:	ldr	r3, [sp, #32]
   1b550:	mov	r8, #0
   1b554:	mov	r7, #0
   1b558:	mov	r6, #0
   1b55c:	ldrb	r0, [r2]
   1b560:	add	sl, r2, #1
   1b564:	add	r5, r3, #1
   1b568:	mov	r3, #0
   1b56c:	str	r3, [sp, #44]	; 0x2c
   1b570:	clz	r2, r0
   1b574:	lsr	r2, r2, #5
   1b578:	tst	r2, #1
   1b57c:	beq	1b5b4 <__assert_fail@plt+0x8b04>
   1b580:	b	1b614 <__assert_fail@plt+0x8b64>
   1b584:	str	r7, [sp, #44]	; 0x2c
   1b588:	mov	r8, #1
   1b58c:	mov	r6, #1
   1b590:	ldrb	r0, [sl, r7]
   1b594:	ldrb	r1, [r5, r7]
   1b598:	add	r7, r7, #1
   1b59c:	clz	r2, r0
   1b5a0:	cmp	r1, #0
   1b5a4:	lsr	r2, r2, #5
   1b5a8:	beq	1b608 <__assert_fail@plt+0x8b58>
   1b5ac:	tst	r2, #1
   1b5b0:	bne	1b614 <__assert_fail@plt+0x8b64>
   1b5b4:	uxtb	r4, r1
   1b5b8:	uxtb	r9, r0
   1b5bc:	cmp	r4, r9
   1b5c0:	beq	1b590 <__assert_fail@plt+0x8ae0>
   1b5c4:	bl	12768 <__ctype_b_loc@plt>
   1b5c8:	ldr	r0, [r0]
   1b5cc:	add	r1, r0, r4, lsl #1
   1b5d0:	ldrb	r1, [r1, #1]
   1b5d4:	tst	r1, #8
   1b5d8:	addne	r0, r0, r9, lsl #1
   1b5dc:	ldrbne	r0, [r0, #1]
   1b5e0:	tstne	r0, #8
   1b5e4:	beq	1b614 <__assert_fail@plt+0x8b64>
   1b5e8:	tst	r6, #1
   1b5ec:	beq	1b584 <__assert_fail@plt+0x8ad4>
   1b5f0:	ldr	r0, [sp, #44]	; 0x2c
   1b5f4:	sub	r0, r7, r0
   1b5f8:	cmp	r0, r8
   1b5fc:	bne	1b614 <__assert_fail@plt+0x8b64>
   1b600:	add	r8, r8, #1
   1b604:	b	1b58c <__assert_fail@plt+0x8adc>
   1b608:	cmp	r8, #2
   1b60c:	cmpeq	r0, #0
   1b610:	beq	1b640 <__assert_fail@plt+0x8b90>
   1b614:	ldr	r0, [sp, #36]	; 0x24
   1b618:	bl	30174 <__assert_fail@plt+0x1d6c4>
   1b61c:	ldr	r0, [sp, #40]	; 0x28
   1b620:	bl	30174 <__assert_fail@plt+0x1d6c4>
   1b624:	movw	r0, #59576	; 0xe8b8
   1b628:	movt	r0, #5
   1b62c:	ldr	r0, [r0]
   1b630:	add	r4, r0, #1
   1b634:	mov	r0, r4
   1b638:	sub	sp, fp, #28
   1b63c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1b640:	ldr	r0, [sp, #44]	; 0x2c
   1b644:	add	r4, r0, #2
   1b648:	bl	12768 <__ctype_b_loc@plt>
   1b64c:	ldr	r1, [sp, #32]
   1b650:	ldr	r0, [r0]
   1b654:	ldrb	r2, [r1, r4]!
   1b658:	add	r0, r0, r2, lsl #1
   1b65c:	ldrb	r0, [r0, #1]
   1b660:	tst	r0, #8
   1b664:	bne	1b614 <__assert_fail@plt+0x8b64>
   1b668:	ldr	r2, [sp, #20]
   1b66c:	ldr	r7, [sp, #28]
   1b670:	ldr	r3, [sp, #24]
   1b674:	sub	r2, r2, r4
   1b678:	add	r0, r4, r7
   1b67c:	add	r2, r2, #1
   1b680:	add	r0, r0, r2
   1b684:	cmp	r0, r3
   1b688:	bne	1b6b4 <__assert_fail@plt+0x8c04>
   1b68c:	add	r0, r1, r7
   1b690:	bl	12474 <memmove@plt>
   1b694:	ldr	r0, [sp, #32]
   1b698:	ldr	r1, [sp, #44]	; 0x2c
   1b69c:	mov	r2, r7
   1b6a0:	add	r0, r0, r1
   1b6a4:	add	r1, sp, #64	; 0x40
   1b6a8:	add	r0, r0, #2
   1b6ac:	bl	124e0 <memcpy@plt>
   1b6b0:	b	1b614 <__assert_fail@plt+0x8b64>
   1b6b4:	movw	r0, #41323	; 0xa16b
   1b6b8:	movw	r1, #40513	; 0x9e41
   1b6bc:	movw	r3, #41374	; 0xa19e
   1b6c0:	movw	r2, #549	; 0x225
   1b6c4:	movt	r0, #4
   1b6c8:	movt	r1, #4
   1b6cc:	movt	r3, #4
   1b6d0:	bl	12ab0 <__assert_fail@plt>
   1b6d4:	push	{r4, r5, fp, lr}
   1b6d8:	add	fp, sp, #8
   1b6dc:	sub	sp, sp, #40	; 0x28
   1b6e0:	str	r1, [fp, #-12]
   1b6e4:	str	r0, [fp, #-16]
   1b6e8:	sub	r0, fp, #16
   1b6ec:	bl	1272c <localtime@plt>
   1b6f0:	cmp	r0, #0
   1b6f4:	beq	1b7d0 <__assert_fail@plt+0x8d20>
   1b6f8:	ldr	ip, [r0, #24]
   1b6fc:	cmn	ip, #1
   1b700:	ble	1b7f0 <__assert_fail@plt+0x8d40>
   1b704:	cmp	ip, #7
   1b708:	bge	1b808 <__assert_fail@plt+0x8d58>
   1b70c:	ldr	r2, [r0, #16]
   1b710:	cmn	r2, #1
   1b714:	ble	1b820 <__assert_fail@plt+0x8d70>
   1b718:	cmp	r2, #12
   1b71c:	bge	1b838 <__assert_fail@plt+0x8d88>
   1b720:	ldr	r3, [r0, #8]
   1b724:	cmn	r3, #1
   1b728:	ble	1b850 <__assert_fail@plt+0x8da0>
   1b72c:	cmp	r3, #24
   1b730:	bge	1b868 <__assert_fail@plt+0x8db8>
   1b734:	ldr	r4, [r0, #4]
   1b738:	cmp	r4, #60	; 0x3c
   1b73c:	bge	1b880 <__assert_fail@plt+0x8dd0>
   1b740:	ldr	r1, [r0]
   1b744:	cmp	r1, #62	; 0x3e
   1b748:	bge	1b898 <__assert_fail@plt+0x8de8>
   1b74c:	ldr	lr, [r0, #12]
   1b750:	ldr	r0, [r0, #20]
   1b754:	str	r1, [sp, #16]
   1b758:	movw	r1, #41812	; 0xa354
   1b75c:	ldr	r5, [fp, #-12]
   1b760:	str	r4, [sp, #12]
   1b764:	movw	r4, #59584	; 0xe8c0
   1b768:	str	r3, [sp, #8]
   1b76c:	movt	r1, #4
   1b770:	movt	r4, #5
   1b774:	ldr	r1, [r1, r2, lsl #2]
   1b778:	movw	r2, #41626	; 0xa29a
   1b77c:	movt	r2, #4
   1b780:	str	r5, [sp, #20]
   1b784:	str	lr, [sp, #4]
   1b788:	str	r1, [sp]
   1b78c:	movw	r1, #1900	; 0x76c
   1b790:	add	r0, r0, r1
   1b794:	mov	r1, #1024	; 0x400
   1b798:	str	r0, [sp, #24]
   1b79c:	movw	r0, #41784	; 0xa338
   1b7a0:	movt	r0, #4
   1b7a4:	ldr	r3, [r0, ip, lsl #2]
   1b7a8:	mov	r0, r4
   1b7ac:	bl	1281c <snprintf@plt>
   1b7b0:	cmp	r0, #1024	; 0x400
   1b7b4:	blt	1b7e4 <__assert_fail@plt+0x8d34>
   1b7b8:	movw	r0, #41665	; 0xa2c1
   1b7bc:	movw	r1, #40513	; 0x9e41
   1b7c0:	movw	r3, #41468	; 0xa1fc
   1b7c4:	movw	r2, #770	; 0x302
   1b7c8:	movt	r0, #4
   1b7cc:	b	1b8ac <__assert_fail@plt+0x8dfc>
   1b7d0:	ldr	r0, [fp, #-16]
   1b7d4:	ldr	r1, [fp, #-12]
   1b7d8:	mov	r2, #64	; 0x40
   1b7dc:	bl	1b1b4 <__assert_fail@plt+0x8704>
   1b7e0:	mov	r4, r0
   1b7e4:	mov	r0, r4
   1b7e8:	sub	sp, fp, #8
   1b7ec:	pop	{r4, r5, fp, pc}
   1b7f0:	movw	r0, #41450	; 0xa1ea
   1b7f4:	movw	r1, #40513	; 0x9e41
   1b7f8:	movw	r3, #41468	; 0xa1fc
   1b7fc:	movw	r2, #749	; 0x2ed
   1b800:	movt	r0, #4
   1b804:	b	1b8ac <__assert_fail@plt+0x8dfc>
   1b808:	movw	r0, #41504	; 0xa220
   1b80c:	movw	r1, #40513	; 0x9e41
   1b810:	movw	r3, #41468	; 0xa1fc
   1b814:	movw	r2, #750	; 0x2ee
   1b818:	movt	r0, #4
   1b81c:	b	1b8ac <__assert_fail@plt+0x8dfc>
   1b820:	movw	r0, #41521	; 0xa231
   1b824:	movw	r1, #40513	; 0x9e41
   1b828:	movw	r3, #41468	; 0xa1fc
   1b82c:	movw	r2, #751	; 0x2ef
   1b830:	movt	r0, #4
   1b834:	b	1b8ac <__assert_fail@plt+0x8dfc>
   1b838:	movw	r0, #41538	; 0xa242
   1b83c:	movw	r1, #40513	; 0x9e41
   1b840:	movw	r3, #41468	; 0xa1fc
   1b844:	mov	r2, #752	; 0x2f0
   1b848:	movt	r0, #4
   1b84c:	b	1b8ac <__assert_fail@plt+0x8dfc>
   1b850:	movw	r0, #41555	; 0xa253
   1b854:	movw	r1, #40513	; 0x9e41
   1b858:	movw	r3, #41468	; 0xa1fc
   1b85c:	movw	r2, #753	; 0x2f1
   1b860:	movt	r0, #4
   1b864:	b	1b8ac <__assert_fail@plt+0x8dfc>
   1b868:	movw	r0, #41573	; 0xa265
   1b86c:	movw	r1, #40513	; 0x9e41
   1b870:	movw	r3, #41468	; 0xa1fc
   1b874:	movw	r2, #754	; 0x2f2
   1b878:	movt	r0, #4
   1b87c:	b	1b8ac <__assert_fail@plt+0x8dfc>
   1b880:	movw	r0, #41591	; 0xa277
   1b884:	movw	r1, #40513	; 0x9e41
   1b888:	movw	r3, #41468	; 0xa1fc
   1b88c:	movw	r2, #755	; 0x2f3
   1b890:	movt	r0, #4
   1b894:	b	1b8ac <__assert_fail@plt+0x8dfc>
   1b898:	movw	r0, #41608	; 0xa288
   1b89c:	movw	r1, #40513	; 0x9e41
   1b8a0:	movw	r3, #41468	; 0xa1fc
   1b8a4:	mov	r2, #756	; 0x2f4
   1b8a8:	movt	r0, #4
   1b8ac:	movt	r1, #4
   1b8b0:	movt	r3, #4
   1b8b4:	bl	12ab0 <__assert_fail@plt>
   1b8b8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1b8bc:	add	fp, sp, #28
   1b8c0:	sub	sp, sp, #108	; 0x6c
   1b8c4:	mov	r4, r0
   1b8c8:	movw	r0, #60612	; 0xecc4
   1b8cc:	movw	r5, #60616	; 0xecc8
   1b8d0:	movw	r1, #60608	; 0xecc0
   1b8d4:	movt	r0, #5
   1b8d8:	movt	r5, #5
   1b8dc:	movt	r1, #5
   1b8e0:	ldr	r0, [r0]
   1b8e4:	cmp	r0, #0
   1b8e8:	beq	1b914 <__assert_fail@plt+0x8e64>
   1b8ec:	ldrb	r1, [r1]
   1b8f0:	cmp	r1, #1
   1b8f4:	bne	1b910 <__assert_fail@plt+0x8e60>
   1b8f8:	ldrd	r2, [r5]
   1b8fc:	ldrd	r6, [r4]
   1b900:	eor	r1, r7, r3
   1b904:	eor	r2, r6, r2
   1b908:	orrs	r1, r2, r1
   1b90c:	beq	1ba80 <__assert_fail@plt+0x8fd0>
   1b910:	bl	30174 <__assert_fail@plt+0x1d6c4>
   1b914:	ldrd	r0, [r4]
   1b918:	movw	r7, #60624	; 0xecd0
   1b91c:	movw	r8, #60628	; 0xecd4
   1b920:	movt	r7, #5
   1b924:	movt	r8, #5
   1b928:	strd	r0, [r5]
   1b92c:	ldr	r5, [r7]
   1b930:	cmp	r5, #0
   1b934:	beq	1b968 <__assert_fail@plt+0x8eb8>
   1b938:	ldrb	r0, [r8]
   1b93c:	cmp	r0, #0
   1b940:	bne	1b968 <__assert_fail@plt+0x8eb8>
   1b944:	ldr	r6, [r5, #28]
   1b948:	mov	r0, r5
   1b94c:	bl	334bc <__assert_fail@plt+0x20a0c>
   1b950:	cmp	r6, #0
   1b954:	mov	r5, r6
   1b958:	bne	1b944 <__assert_fail@plt+0x8e94>
   1b95c:	mov	r0, #0
   1b960:	str	r0, [r7]
   1b964:	b	1b970 <__assert_fail@plt+0x8ec0>
   1b968:	cmp	r5, #0
   1b96c:	bne	1b990 <__assert_fail@plt+0x8ee0>
   1b970:	mov	r0, #1
   1b974:	mov	r6, #1
   1b978:	bl	32840 <__assert_fail@plt+0x1fd90>
   1b97c:	mov	r5, r0
   1b980:	cmp	r0, #0
   1b984:	str	r0, [r7]
   1b988:	strb	r6, [r8]
   1b98c:	beq	1ba88 <__assert_fail@plt+0x8fd8>
   1b990:	movw	r6, #41949	; 0xa3dd
   1b994:	movw	r9, #61044	; 0xee74
   1b998:	mov	r7, #0
   1b99c:	mov	sl, sp
   1b9a0:	movt	r6, #4
   1b9a4:	movt	r9, #5
   1b9a8:	b	1b9d0 <__assert_fail@plt+0x8f20>
   1b9ac:	ldrd	r0, [r4]
   1b9b0:	ldrd	r2, [r8]
   1b9b4:	eor	r1, r3, r1
   1b9b8:	eor	r0, r2, r0
   1b9bc:	orrs	r0, r0, r1
   1b9c0:	moveq	r7, r5
   1b9c4:	ldr	r5, [r5, #28]
   1b9c8:	cmp	r5, #0
   1b9cc:	beq	1ba28 <__assert_fail@plt+0x8f78>
   1b9d0:	ldr	r0, [r5, #12]
   1b9d4:	mov	r1, r6
   1b9d8:	bl	123fc <strcmp@plt>
   1b9dc:	cmp	r0, #0
   1b9e0:	beq	1b9c4 <__assert_fail@plt+0x8f14>
   1b9e4:	mov	r8, r5
   1b9e8:	ldr	r0, [r8, #16]!
   1b9ec:	ldr	r1, [r8, #4]
   1b9f0:	and	r0, r0, r1
   1b9f4:	cmn	r0, #1
   1b9f8:	bne	1b9ac <__assert_fail@plt+0x8efc>
   1b9fc:	mov	r0, sl
   1ba00:	bl	184fc <__assert_fail@plt+0x5a4c>
   1ba04:	ldr	r0, [r5, #4]
   1ba08:	ldr	r2, [r9, #52]	; 0x34
   1ba0c:	mov	r1, sl
   1ba10:	blx	r2
   1ba14:	cmp	r0, #0
   1ba18:	bne	1b9c4 <__assert_fail@plt+0x8f14>
   1ba1c:	ldm	sp, {r0, r1}
   1ba20:	strd	r0, [r8]
   1ba24:	b	1b9ac <__assert_fail@plt+0x8efc>
   1ba28:	cmp	r7, #0
   1ba2c:	beq	1ba4c <__assert_fail@plt+0x8f9c>
   1ba30:	ldr	r0, [r7, #12]
   1ba34:	bl	2e53c <__assert_fail@plt+0x1ba8c>
   1ba38:	movw	r2, #60608	; 0xecc0
   1ba3c:	mov	r1, #1
   1ba40:	movt	r2, #5
   1ba44:	strb	r1, [r2]
   1ba48:	b	1ba74 <__assert_fail@plt+0x8fc4>
   1ba4c:	movw	r1, #60608	; 0xecc0
   1ba50:	mov	r0, #0
   1ba54:	mov	r2, #5
   1ba58:	movt	r1, #5
   1ba5c:	strb	r0, [r1]
   1ba60:	movw	r1, #36692	; 0x8f54
   1ba64:	mov	r0, #0
   1ba68:	movt	r1, #4
   1ba6c:	bl	12564 <dcgettext@plt>
   1ba70:	bl	2e53c <__assert_fail@plt+0x1ba8c>
   1ba74:	movw	r1, #60612	; 0xecc4
   1ba78:	movt	r1, #5
   1ba7c:	str	r0, [r1]
   1ba80:	sub	sp, fp, #28
   1ba84:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1ba88:	movw	r1, #41912	; 0xa3b8
   1ba8c:	mov	r0, #0
   1ba90:	mov	r2, #5
   1ba94:	movt	r1, #4
   1ba98:	bl	12564 <dcgettext@plt>
   1ba9c:	mov	r2, r0
   1baa0:	mov	r0, #1
   1baa4:	mov	r1, #0
   1baa8:	bl	1269c <error@plt>
   1baac:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   1bab0:	add	fp, sp, #24
   1bab4:	mov	r5, r0
   1bab8:	movw	r0, #41908	; 0xa3b4
   1babc:	movt	r0, #4
   1bac0:	mov	r1, r5
   1bac4:	bl	123fc <strcmp@plt>
   1bac8:	mov	r4, #1
   1bacc:	cmp	r0, #0
   1bad0:	beq	1bb34 <__assert_fail@plt+0x9084>
   1bad4:	movw	r7, #60624	; 0xecd0
   1bad8:	movt	r7, #5
   1badc:	ldr	r6, [r7]
   1bae0:	cmp	r6, #0
   1bae4:	bne	1bb10 <__assert_fail@plt+0x9060>
   1bae8:	mov	r0, #0
   1baec:	mov	r8, #0
   1baf0:	bl	32840 <__assert_fail@plt+0x1fd90>
   1baf4:	mov	r6, r0
   1baf8:	str	r0, [r7]
   1bafc:	movw	r0, #60628	; 0xecd4
   1bb00:	movt	r0, #5
   1bb04:	cmp	r6, #0
   1bb08:	strb	r8, [r0]
   1bb0c:	beq	1bb34 <__assert_fail@plt+0x9084>
   1bb10:	ldr	r1, [r6, #12]
   1bb14:	mov	r0, r5
   1bb18:	bl	123fc <strcmp@plt>
   1bb1c:	cmp	r0, #0
   1bb20:	beq	1bb34 <__assert_fail@plt+0x9084>
   1bb24:	ldr	r6, [r6, #28]
   1bb28:	cmp	r6, #0
   1bb2c:	bne	1bb10 <__assert_fail@plt+0x9060>
   1bb30:	mov	r4, #0
   1bb34:	mov	r0, r4
   1bb38:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   1bb3c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1bb40:	add	fp, sp, #28
   1bb44:	sub	sp, sp, #116	; 0x74
   1bb48:	mov	r4, r0
   1bb4c:	mov	r7, #0
   1bb50:	mov	r0, #0
   1bb54:	str	r7, [sp, #4]
   1bb58:	bl	32840 <__assert_fail@plt+0x1fd90>
   1bb5c:	cmp	r0, #0
   1bb60:	beq	1bc74 <__assert_fail@plt+0x91c4>
   1bb64:	str	r4, [sp]
   1bb68:	mov	r8, r0
   1bb6c:	mov	r9, #0
   1bb70:	add	sl, sp, #4
   1bb74:	mov	r4, #0
   1bb78:	mov	r5, r0
   1bb7c:	b	1bb98 <__assert_fail@plt+0x90e8>
   1bb80:	mov	r0, r7
   1bb84:	bl	30174 <__assert_fail@plt+0x1d6c4>
   1bb88:	mov	r7, #0
   1bb8c:	ldr	r5, [r5, #28]
   1bb90:	cmp	r5, #0
   1bb94:	beq	1bc3c <__assert_fail@plt+0x918c>
   1bb98:	add	r6, r9, #1
   1bb9c:	mov	r0, r4
   1bba0:	mov	r2, sl
   1bba4:	mov	r7, r4
   1bba8:	lsl	r1, r6, #3
   1bbac:	bl	20a44 <__assert_fail@plt+0xdf94>
   1bbb0:	mov	r4, r0
   1bbb4:	cmp	r0, #0
   1bbb8:	beq	1bb80 <__assert_fail@plt+0x90d0>
   1bbbc:	mov	r7, r5
   1bbc0:	ldr	r0, [r7, #16]!
   1bbc4:	ldr	r1, [r7, #4]
   1bbc8:	and	r0, r0, r1
   1bbcc:	cmn	r0, #1
   1bbd0:	beq	1bbf0 <__assert_fail@plt+0x9140>
   1bbd4:	ldrd	r0, [r7]
   1bbd8:	mov	r2, r4
   1bbdc:	mov	r7, r4
   1bbe0:	str	r0, [r2, r9, lsl #3]!
   1bbe4:	mov	r9, r6
   1bbe8:	str	r1, [r2, #4]
   1bbec:	b	1bb8c <__assert_fail@plt+0x90dc>
   1bbf0:	add	sl, sp, #8
   1bbf4:	mov	r0, sl
   1bbf8:	bl	184fc <__assert_fail@plt+0x5a4c>
   1bbfc:	movw	r1, #61044	; 0xee74
   1bc00:	ldr	r0, [r5, #4]
   1bc04:	movt	r1, #5
   1bc08:	ldr	r2, [r1, #52]	; 0x34
   1bc0c:	mov	r1, sl
   1bc10:	blx	r2
   1bc14:	cmp	r0, #0
   1bc18:	beq	1bc28 <__assert_fail@plt+0x9178>
   1bc1c:	mov	r7, r4
   1bc20:	add	sl, sp, #4
   1bc24:	b	1bb8c <__assert_fail@plt+0x90dc>
   1bc28:	ldr	r0, [sp, #8]
   1bc2c:	ldr	r1, [sp, #12]
   1bc30:	add	sl, sp, #4
   1bc34:	strd	r0, [r7]
   1bc38:	b	1bbd4 <__assert_fail@plt+0x9124>
   1bc3c:	cmp	r8, #0
   1bc40:	beq	1bc5c <__assert_fail@plt+0x91ac>
   1bc44:	ldr	r4, [r8, #28]
   1bc48:	mov	r0, r8
   1bc4c:	bl	334bc <__assert_fail@plt+0x20a0c>
   1bc50:	cmp	r4, #0
   1bc54:	mov	r8, r4
   1bc58:	bne	1bc44 <__assert_fail@plt+0x9194>
   1bc5c:	cmp	r7, #0
   1bc60:	beq	1bc70 <__assert_fail@plt+0x91c0>
   1bc64:	ldr	r0, [sp]
   1bc68:	str	r9, [r0]
   1bc6c:	b	1bc74 <__assert_fail@plt+0x91c4>
   1bc70:	mov	r7, #0
   1bc74:	mov	r0, r7
   1bc78:	sub	sp, fp, #28
   1bc7c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1bc80:	push	{fp, lr}
   1bc84:	mov	fp, sp
   1bc88:	cmp	r0, #0
   1bc8c:	beq	1bcf0 <__assert_fail@plt+0x9240>
   1bc90:	movw	r2, #16040	; 0x3ea8
   1bc94:	movw	ip, #19360	; 0x4ba0
   1bc98:	mov	r1, #0
   1bc9c:	movt	r2, #1
   1bca0:	movt	ip, #1
   1bca4:	b	1bcbc <__assert_fail@plt+0x920c>
   1bca8:	cmp	r3, ip
   1bcac:	orreq	r1, r1, #2
   1bcb0:	ldr	r0, [r0, #152]	; 0x98
   1bcb4:	cmp	r0, #0
   1bcb8:	beq	1bcd0 <__assert_fail@plt+0x9220>
   1bcbc:	ldr	r3, [r0]
   1bcc0:	cmp	r3, r2
   1bcc4:	bne	1bca8 <__assert_fail@plt+0x91f8>
   1bcc8:	orr	r1, r1, #1
   1bccc:	b	1bcb0 <__assert_fail@plt+0x9200>
   1bcd0:	and	r0, r1, #3
   1bcd4:	cmp	r0, #3
   1bcd8:	popne	{fp, pc}
   1bcdc:	movw	r0, #61044	; 0xee74
   1bce0:	movt	r0, #5
   1bce4:	ldrb	r0, [r0, #1]
   1bce8:	cmp	r0, #0
   1bcec:	beq	1bcf4 <__assert_fail@plt+0x9244>
   1bcf0:	pop	{fp, pc}
   1bcf4:	movw	r1, #41956	; 0xa3e4
   1bcf8:	mov	r0, #0
   1bcfc:	mov	r2, #5
   1bd00:	movt	r1, #4
   1bd04:	bl	12564 <dcgettext@plt>
   1bd08:	mov	r2, r0
   1bd0c:	mov	r0, #1
   1bd10:	mov	r1, #0
   1bd14:	bl	1269c <error@plt>
   1bd18:	movw	r1, #61044	; 0xee74
   1bd1c:	cmp	r0, #0
   1bd20:	movt	r1, #5
   1bd24:	beq	1bd50 <__assert_fail@plt+0x92a0>
   1bd28:	cmp	r0, #2
   1bd2c:	beq	1bd6c <__assert_fail@plt+0x92bc>
   1bd30:	cmp	r0, #1
   1bd34:	bne	1bd8c <__assert_fail@plt+0x92dc>
   1bd38:	movw	r2, #48552	; 0xbda8
   1bd3c:	movt	r2, #1
   1bd40:	str	r2, [r1, #64]	; 0x40
   1bd44:	movw	r2, #36080	; 0x8cf0
   1bd48:	movt	r2, #1
   1bd4c:	b	1bd80 <__assert_fail@plt+0x92d0>
   1bd50:	movw	r2, #48692	; 0xbe34
   1bd54:	movt	r2, #1
   1bd58:	str	r2, [r1, #64]	; 0x40
   1bd5c:	movw	r2, #36324	; 0x8de4
   1bd60:	movt	r2, #1
   1bd64:	str	r2, [r1, #52]	; 0x34
   1bd68:	b	1bd8c <__assert_fail@plt+0x92dc>
   1bd6c:	movw	r2, #48696	; 0xbe38
   1bd70:	movt	r2, #1
   1bd74:	str	r2, [r1, #64]	; 0x40
   1bd78:	movw	r2, #35820	; 0x8bec
   1bd7c:	movt	r2, #1
   1bd80:	str	r2, [r1, #52]	; 0x34
   1bd84:	mov	r2, #1
   1bd88:	strb	r2, [r1, #12]
   1bd8c:	str	r0, [r1, #48]	; 0x30
   1bd90:	ldrb	r0, [r1, #44]	; 0x2c
   1bd94:	tst	r0, #2
   1bd98:	movwne	r0, #36428	; 0x8e4c
   1bd9c:	movtne	r0, #1
   1bda0:	strne	r0, [r1, #52]	; 0x34
   1bda4:	bx	lr
   1bda8:	push	{r4, r5, r6, r7, fp, lr}
   1bdac:	add	fp, sp, #16
   1bdb0:	mov	r4, r2
   1bdb4:	mov	r5, r1
   1bdb8:	mov	r6, r0
   1bdbc:	bl	2d048 <__assert_fail@plt+0x1a598>
   1bdc0:	cmp	r0, #0
   1bdc4:	beq	1be08 <__assert_fail@plt+0x9358>
   1bdc8:	mov	r7, r0
   1bdcc:	bl	12804 <__errno_location@plt>
   1bdd0:	ldr	r0, [r0]
   1bdd4:	cmp	r0, #20
   1bdd8:	cmpne	r0, #2
   1bddc:	bne	1be0c <__assert_fail@plt+0x935c>
   1bde0:	movw	r0, #61044	; 0xee74
   1bde4:	movt	r0, #5
   1bde8:	ldrb	r0, [r0, #44]	; 0x2c
   1bdec:	tst	r0, #2
   1bdf0:	bne	1be14 <__assert_fail@plt+0x9364>
   1bdf4:	mov	r0, r6
   1bdf8:	mov	r1, r5
   1bdfc:	mov	r2, r4
   1be00:	pop	{r4, r5, r6, r7, fp, lr}
   1be04:	b	2d280 <__assert_fail@plt+0x1a7d0>
   1be08:	mov	r7, #0
   1be0c:	mov	r0, r7
   1be10:	pop	{r4, r5, r6, r7, fp, pc}
   1be14:	movw	r0, #58704	; 0xe550
   1be18:	movw	r1, #42135	; 0xa497
   1be1c:	mov	r2, r5
   1be20:	movt	r0, #5
   1be24:	movt	r1, #4
   1be28:	ldr	r0, [r0]
   1be2c:	bl	127f8 <fprintf@plt>
   1be30:	b	1bdf4 <__assert_fail@plt+0x9344>
   1be34:	b	2d280 <__assert_fail@plt+0x1a7d0>
   1be38:	push	{r4, r5, r6, r7, fp, lr}
   1be3c:	add	fp, sp, #16
   1be40:	mov	r6, r0
   1be44:	movw	r0, #61000	; 0xee48
   1be48:	mov	r4, r2
   1be4c:	mov	r5, r1
   1be50:	movt	r0, #5
   1be54:	ldr	r0, [r0]
   1be58:	cmp	r0, #0
   1be5c:	beq	1be74 <__assert_fail@plt+0x93c4>
   1be60:	mov	r0, r6
   1be64:	mov	r1, r5
   1be68:	mov	r2, r4
   1be6c:	pop	{r4, r5, r6, r7, fp, lr}
   1be70:	b	2d280 <__assert_fail@plt+0x1a7d0>
   1be74:	mov	r0, r6
   1be78:	mov	r1, r5
   1be7c:	mov	r2, r4
   1be80:	bl	2d048 <__assert_fail@plt+0x1a598>
   1be84:	cmp	r0, #0
   1be88:	beq	1bed8 <__assert_fail@plt+0x9428>
   1be8c:	mov	r7, r0
   1be90:	bl	12804 <__errno_location@plt>
   1be94:	ldr	r0, [r0]
   1be98:	cmp	r0, #20
   1be9c:	cmpne	r0, #2
   1bea0:	bne	1bedc <__assert_fail@plt+0x942c>
   1bea4:	movw	r0, #61044	; 0xee74
   1bea8:	movt	r0, #5
   1beac:	ldrb	r0, [r0, #44]	; 0x2c
   1beb0:	tst	r0, #2
   1beb4:	beq	1be60 <__assert_fail@plt+0x93b0>
   1beb8:	movw	r0, #58704	; 0xe550
   1bebc:	movw	r1, #42135	; 0xa497
   1bec0:	mov	r2, r5
   1bec4:	movt	r0, #5
   1bec8:	movt	r1, #4
   1becc:	ldr	r0, [r0]
   1bed0:	bl	127f8 <fprintf@plt>
   1bed4:	b	1be60 <__assert_fail@plt+0x93b0>
   1bed8:	mov	r7, #0
   1bedc:	mov	r0, r7
   1bee0:	pop	{r4, r5, r6, r7, fp, pc}
   1bee4:	movw	r0, #60632	; 0xecd8
   1bee8:	mov	r1, #0
   1beec:	movt	r0, #5
   1bef0:	str	r1, [r0]
   1bef4:	bx	lr
   1bef8:	bx	lr
   1befc:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   1bf00:	add	fp, sp, #24
   1bf04:	sub	sp, sp, #8
   1bf08:	mov	r4, r0
   1bf0c:	movw	r0, #42128	; 0xa490
   1bf10:	mov	r2, #6
   1bf14:	movt	r0, #4
   1bf18:	mov	r1, r4
   1bf1c:	bl	12a50 <strncmp@plt>
   1bf20:	cmp	r0, #0
   1bf24:	bne	1bf58 <__assert_fail@plt+0x94a8>
   1bf28:	mov	r0, r4
   1bf2c:	bl	127bc <strlen@plt>
   1bf30:	cmp	r0, #8
   1bf34:	bne	1bf58 <__assert_fail@plt+0x94a8>
   1bf38:	movw	r0, #60632	; 0xecd8
   1bf3c:	movw	r8, #46324	; 0xb4f4
   1bf40:	movt	r0, #5
   1bf44:	movt	r8, #4
   1bf48:	ldr	r1, [r0]
   1bf4c:	cmp	r1, #0
   1bf50:	streq	r4, [r0]
   1bf54:	b	1bffc <__assert_fail@plt+0x954c>
   1bf58:	mov	r6, r4
   1bf5c:	ldrb	r0, [r6], #1
   1bf60:	cmp	r0, #45	; 0x2d
   1bf64:	movw	r0, #35777	; 0x8bc1
   1bf68:	movne	r6, r4
   1bf6c:	movt	r0, #4
   1bf70:	mov	r1, r6
   1bf74:	bl	123fc <strcmp@plt>
   1bf78:	cmp	r0, #0
   1bf7c:	beq	1bfbc <__assert_fail@plt+0x950c>
   1bf80:	movw	r7, #46340	; 0xb504
   1bf84:	mov	r8, #0
   1bf88:	mov	r5, #0
   1bf8c:	movt	r7, #4
   1bf90:	cmn	r5, #1360	; 0x550
   1bf94:	beq	1bffc <__assert_fail@plt+0x954c>
   1bf98:	sub	r0, r7, r5
   1bf9c:	mov	r1, r6
   1bfa0:	ldr	r0, [r0, #20]
   1bfa4:	bl	123fc <strcmp@plt>
   1bfa8:	sub	r5, r5, #16
   1bfac:	cmp	r0, #0
   1bfb0:	bne	1bf90 <__assert_fail@plt+0x94e0>
   1bfb4:	sub	r8, r7, r5
   1bfb8:	b	1bfc4 <__assert_fail@plt+0x9514>
   1bfbc:	movw	r8, #46340	; 0xb504
   1bfc0:	movt	r8, #4
   1bfc4:	ldr	r0, [r8]
   1bfc8:	cmp	r0, #1
   1bfcc:	beq	1bff8 <__assert_fail@plt+0x9548>
   1bfd0:	cmp	r0, #2
   1bfd4:	beq	1bffc <__assert_fail@plt+0x954c>
   1bfd8:	movw	r6, #60632	; 0xecd8
   1bfdc:	cmp	r0, #0
   1bfe0:	movt	r6, #5
   1bfe4:	ldr	r1, [r6]
   1bfe8:	beq	1c008 <__assert_fail@plt+0x9558>
   1bfec:	cmp	r1, #0
   1bff0:	streq	r4, [r6]
   1bff4:	b	1bffc <__assert_fail@plt+0x954c>
   1bff8:	mov	r8, #0
   1bffc:	mov	r0, r8
   1c000:	sub	sp, fp, #24
   1c004:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   1c008:	cmp	r1, #0
   1c00c:	beq	1bffc <__assert_fail@plt+0x954c>
   1c010:	movw	r0, #61044	; 0xee74
   1c014:	movt	r0, #5
   1c018:	ldrb	r1, [r0, #17]
   1c01c:	cmp	r1, #0
   1c020:	bne	1bffc <__assert_fail@plt+0x954c>
   1c024:	ldrb	r0, [r0, #16]
   1c028:	cmp	r0, #0
   1c02c:	beq	1bffc <__assert_fail@plt+0x954c>
   1c030:	movw	r1, #42212	; 0xa4e4
   1c034:	mov	r0, #0
   1c038:	mov	r2, #5
   1c03c:	movt	r1, #4
   1c040:	bl	12564 <dcgettext@plt>
   1c044:	mov	r2, r0
   1c048:	ldr	r0, [r6]
   1c04c:	mov	r1, #0
   1c050:	mov	r3, r4
   1c054:	stm	sp, {r0, r4}
   1c058:	mov	r0, #0
   1c05c:	bl	1269c <error@plt>
   1c060:	b	1bffc <__assert_fail@plt+0x954c>
   1c064:	push	{fp, lr}
   1c068:	mov	fp, sp
   1c06c:	bl	17ae4 <__assert_fail@plt+0x5034>
   1c070:	mov	r2, #5
   1c074:	mov	r1, #0
   1c078:	str	r2, [r0, #8]
   1c07c:	movw	r2, #15800	; 0x3db8
   1c080:	str	r1, [r0, #12]
   1c084:	movt	r2, #1
   1c088:	str	r2, [r0]
   1c08c:	strh	r1, [r0, #18]
   1c090:	mov	r0, #1
   1c094:	pop	{fp, pc}
   1c098:	push	{r4, r5, fp, lr}
   1c09c:	add	fp, sp, #8
   1c0a0:	mov	r1, #0
   1c0a4:	mov	r5, #0
   1c0a8:	bl	17be0 <__assert_fail@plt+0x5130>
   1c0ac:	movw	r1, #18868	; 0x49b4
   1c0b0:	mov	r4, #4
   1c0b4:	movt	r1, #1
   1c0b8:	strd	r4, [r0, #8]
   1c0bc:	str	r1, [r0]
   1c0c0:	strh	r5, [r0, #18]
   1c0c4:	mov	r0, #1
   1c0c8:	pop	{r4, r5, fp, pc}
   1c0cc:	push	{fp, lr}
   1c0d0:	mov	fp, sp
   1c0d4:	bl	180b4 <__assert_fail@plt+0x5604>
   1c0d8:	movw	r1, #257	; 0x101
   1c0dc:	str	r1, [r0, #16]
   1c0e0:	add	r1, r0, #40	; 0x28
   1c0e4:	movw	r0, #44636	; 0xae5c
   1c0e8:	movt	r0, #4
   1c0ec:	bl	1f1e4 <__assert_fail@plt+0xc734>
   1c0f0:	mov	r0, #1
   1c0f4:	pop	{fp, pc}
   1c0f8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1c0fc:	add	fp, sp, #28
   1c100:	sub	sp, sp, #116	; 0x74
   1c104:	mov	r6, #0
   1c108:	cmp	r1, #0
   1c10c:	beq	1c1ac <__assert_fail@plt+0x96fc>
   1c110:	ldr	r8, [r2]
   1c114:	mov	sl, r2
   1c118:	mov	r5, r1
   1c11c:	ldr	r4, [r1, r8, lsl #2]
   1c120:	cmp	r4, #0
   1c124:	beq	1c1ac <__assert_fail@plt+0x96fc>
   1c128:	mov	r7, r0
   1c12c:	mov	r0, r4
   1c130:	bl	127bc <strlen@plt>
   1c134:	cmp	r0, #8
   1c138:	bne	1c1ac <__assert_fail@plt+0x96fc>
   1c13c:	mov	r0, #116	; 0x74
   1c140:	mov	r1, r4
   1c144:	mov	r2, #6
   1c148:	strh	r0, [fp, #-32]	; 0xffffffe0
   1c14c:	movw	r0, #16993	; 0x4261
   1c150:	movt	r0, #28003	; 0x6d63
   1c154:	str	r0, [fp, #-36]	; 0xffffffdc
   1c158:	movw	r0, #42128	; 0xa490
   1c15c:	movt	r0, #4
   1c160:	bl	12a50 <strncmp@plt>
   1c164:	cmp	r0, #0
   1c168:	bne	1c384 <__assert_fail@plt+0x98d4>
   1c16c:	ldrb	r9, [r4, #6]
   1c170:	cmp	r9, #66	; 0x42
   1c174:	beq	1c184 <__assert_fail@plt+0x96d4>
   1c178:	ldrb	r4, [r4, #7]
   1c17c:	cmp	r4, #66	; 0x42
   1c180:	bne	1c1b8 <__assert_fail@plt+0x9708>
   1c184:	movw	r1, #42581	; 0xa655
   1c188:	mov	r0, #0
   1c18c:	mov	r2, #5
   1c190:	mov	r6, #0
   1c194:	movt	r1, #4
   1c198:	bl	12564 <dcgettext@plt>
   1c19c:	mov	r2, r0
   1c1a0:	mov	r0, #0
   1c1a4:	mov	r1, #0
   1c1a8:	bl	1269c <error@plt>
   1c1ac:	mov	r0, r6
   1c1b0:	sub	sp, fp, #28
   1c1b4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1c1b8:	mov	r6, #0
   1c1bc:	cmp	r9, #116	; 0x74
   1c1c0:	beq	1c1ac <__assert_fail@plt+0x96fc>
   1c1c4:	sub	r0, fp, #36	; 0x24
   1c1c8:	mov	r1, r9
   1c1cc:	bl	127c8 <strchr@plt>
   1c1d0:	cmp	r0, #0
   1c1d4:	beq	1c1ac <__assert_fail@plt+0x96fc>
   1c1d8:	sub	r0, fp, #36	; 0x24
   1c1dc:	mov	r1, r4
   1c1e0:	bl	127c8 <strchr@plt>
   1c1e4:	cmp	r0, #0
   1c1e8:	beq	1c1ac <__assert_fail@plt+0x96fc>
   1c1ec:	add	r0, r8, #1
   1c1f0:	ldr	r1, [r5, r0, lsl #2]
   1c1f4:	cmp	r1, #0
   1c1f8:	beq	1c3a4 <__assert_fail@plt+0x98f4>
   1c1fc:	str	r0, [sl]
   1c200:	mov	r0, r7
   1c204:	bl	18054 <__assert_fail@plt+0x55a4>
   1c208:	mov	r6, r0
   1c20c:	cmp	r9, #97	; 0x61
   1c210:	beq	1c234 <__assert_fail@plt+0x9784>
   1c214:	cmp	r9, #109	; 0x6d
   1c218:	beq	1c22c <__assert_fail@plt+0x977c>
   1c21c:	cmp	r9, #99	; 0x63
   1c220:	bne	1c3ec <__assert_fail@plt+0x993c>
   1c224:	mov	r0, #2
   1c228:	b	1c238 <__assert_fail@plt+0x9788>
   1c22c:	mov	r0, #3
   1c230:	b	1c238 <__assert_fail@plt+0x9788>
   1c234:	mov	r0, #0
   1c238:	movw	r8, #61044	; 0xee74
   1c23c:	cmp	r4, #116	; 0x74
   1c240:	str	r0, [r6, #40]	; 0x28
   1c244:	movt	r8, #5
   1c248:	bne	1c290 <__assert_fail@plt+0x97e0>
   1c24c:	ldr	r0, [sl]
   1c250:	add	r2, r8, #20
   1c254:	ldr	r1, [r5, r0, lsl #2]
   1c258:	add	r0, r6, #48	; 0x30
   1c25c:	bl	29fa0 <__assert_fail@plt+0x174f0>
   1c260:	cmp	r0, #0
   1c264:	bne	1c2f0 <__assert_fail@plt+0x9840>
   1c268:	movw	r1, #42703	; 0xa6cf
   1c26c:	mov	r0, #0
   1c270:	mov	r2, #5
   1c274:	movt	r1, #4
   1c278:	bl	12564 <dcgettext@plt>
   1c27c:	mov	r4, r0
   1c280:	ldr	r0, [sl]
   1c284:	ldr	r1, [r8, #72]	; 0x48
   1c288:	ldr	r2, [r5, r0, lsl #2]
   1c28c:	b	1c3d0 <__assert_fail@plt+0x9920>
   1c290:	mov	r7, sp
   1c294:	mov	r0, r7
   1c298:	bl	184fc <__assert_fail@plt+0x5a4c>
   1c29c:	ldr	r0, [sl]
   1c2a0:	ldr	r2, [r8, #52]	; 0x34
   1c2a4:	mov	r1, r7
   1c2a8:	ldr	r0, [r5, r0, lsl #2]
   1c2ac:	blx	r2
   1c2b0:	cmp	r0, #0
   1c2b4:	bne	1c448 <__assert_fail@plt+0x9998>
   1c2b8:	cmp	r4, #109	; 0x6d
   1c2bc:	beq	1c2e0 <__assert_fail@plt+0x9830>
   1c2c0:	cmp	r4, #99	; 0x63
   1c2c4:	beq	1c2d8 <__assert_fail@plt+0x9828>
   1c2c8:	cmp	r4, #97	; 0x61
   1c2cc:	bne	1c45c <__assert_fail@plt+0x99ac>
   1c2d0:	add	r0, r7, #72	; 0x48
   1c2d4:	b	1c2e4 <__assert_fail@plt+0x9834>
   1c2d8:	add	r0, r7, #88	; 0x58
   1c2dc:	b	1c2e4 <__assert_fail@plt+0x9834>
   1c2e0:	add	r0, r7, #80	; 0x50
   1c2e4:	ldm	r0, {r0, r3}
   1c2e8:	add	r1, r6, #48	; 0x30
   1c2ec:	stm	r1, {r0, r3}
   1c2f0:	mov	r0, #0
   1c2f4:	movw	r2, #10111	; 0x277f
   1c2f8:	vldr	s0, [pc, #412]	; 1c49c <__assert_fail@plt+0x99ec>
   1c2fc:	str	r0, [r6, #44]	; 0x2c
   1c300:	movt	r2, #133	; 0x85
   1c304:	ldr	r0, [r6, #48]	; 0x30
   1c308:	ldr	r1, [r8, #28]
   1c30c:	sub	r0, r1, r0
   1c310:	add	r1, pc, #380	; 0x17c
   1c314:	cmp	r0, r2
   1c318:	addgt	r1, r1, #4
   1c31c:	vldr	s2, [r1]
   1c320:	movw	r1, #20864	; 0x5180
   1c324:	movt	r1, #1
   1c328:	cmp	r0, r1
   1c32c:	vselge.f32	s0, s2, s0
   1c330:	vstr	s0, [r6, #28]
   1c334:	ldr	r0, [sl]
   1c338:	add	r0, r0, #1
   1c33c:	str	r0, [sl]
   1c340:	ldr	r0, [r6]
   1c344:	cmp	r0, #0
   1c348:	beq	1c418 <__assert_fail@plt+0x9968>
   1c34c:	movw	r1, #18184	; 0x4708
   1c350:	movt	r1, #1
   1c354:	cmp	r0, r1
   1c358:	bne	1c430 <__assert_fail@plt+0x9980>
   1c35c:	ldrb	r0, [r6, #18]
   1c360:	mov	r6, #1
   1c364:	cmp	r0, #0
   1c368:	bne	1c1ac <__assert_fail@plt+0x96fc>
   1c36c:	movw	r0, #42825	; 0xa749
   1c370:	movw	r1, #42507	; 0xa60b
   1c374:	movw	r3, #42516	; 0xa614
   1c378:	movw	r2, #1649	; 0x671
   1c37c:	movt	r0, #4
   1c380:	b	1c398 <__assert_fail@plt+0x98e8>
   1c384:	movw	r0, #42464	; 0xa5e0
   1c388:	movw	r1, #42507	; 0xa60b
   1c38c:	movw	r3, #42516	; 0xa614
   1c390:	movw	r2, #1555	; 0x613
   1c394:	movt	r0, #4
   1c398:	movt	r1, #4
   1c39c:	movt	r3, #4
   1c3a0:	bl	12ab0 <__assert_fail@plt>
   1c3a4:	movw	r1, #42650	; 0xa69a
   1c3a8:	mov	r0, #0
   1c3ac:	mov	r2, #5
   1c3b0:	movt	r1, #4
   1c3b4:	bl	12564 <dcgettext@plt>
   1c3b8:	mov	r4, r0
   1c3bc:	ldr	r0, [sl]
   1c3c0:	ldr	r2, [r5, r0, lsl #2]
   1c3c4:	movw	r0, #61044	; 0xee74
   1c3c8:	movt	r0, #5
   1c3cc:	ldr	r1, [r0, #72]	; 0x48
   1c3d0:	mov	r0, #0
   1c3d4:	bl	2c88c <__assert_fail@plt+0x19ddc>
   1c3d8:	mov	r3, r0
   1c3dc:	mov	r0, #1
   1c3e0:	mov	r1, #0
   1c3e4:	mov	r2, r4
   1c3e8:	bl	1269c <error@plt>
   1c3ec:	sub	r0, fp, #36	; 0x24
   1c3f0:	mov	r1, r9
   1c3f4:	bl	127c8 <strchr@plt>
   1c3f8:	cmp	r0, #0
   1c3fc:	bne	1c47c <__assert_fail@plt+0x99cc>
   1c400:	movw	r0, #42680	; 0xa6b8
   1c404:	movw	r1, #42507	; 0xa60b
   1c408:	movw	r3, #42516	; 0xa614
   1c40c:	movw	r2, #1611	; 0x64b
   1c410:	movt	r0, #4
   1c414:	b	1c398 <__assert_fail@plt+0x98e8>
   1c418:	movw	r0, #42761	; 0xa709
   1c41c:	movw	r1, #42507	; 0xa60b
   1c420:	movw	r3, #42516	; 0xa614
   1c424:	movw	r2, #1647	; 0x66f
   1c428:	movt	r0, #4
   1c42c:	b	1c398 <__assert_fail@plt+0x98e8>
   1c430:	movw	r0, #42789	; 0xa725
   1c434:	movw	r1, #42507	; 0xa60b
   1c438:	movw	r3, #42516	; 0xa614
   1c43c:	mov	r2, #1648	; 0x670
   1c440:	movt	r0, #4
   1c444:	b	1c398 <__assert_fail@plt+0x98e8>
   1c448:	bl	12804 <__errno_location@plt>
   1c44c:	ldr	r1, [sl]
   1c450:	ldr	r0, [r0]
   1c454:	ldr	r1, [r5, r1, lsl #2]
   1c458:	bl	199e8 <__assert_fail@plt+0x6f38>
   1c45c:	movw	r0, #35937	; 0x8c61
   1c460:	movw	r1, #42507	; 0xa60b
   1c464:	movw	r3, #42845	; 0xa75d
   1c468:	movw	r2, #498	; 0x1f2
   1c46c:	movt	r0, #4
   1c470:	movt	r1, #4
   1c474:	movt	r3, #4
   1c478:	bl	12ab0 <__assert_fail@plt>
   1c47c:	movw	r0, #35937	; 0x8c61
   1c480:	movw	r1, #42507	; 0xa60b
   1c484:	movw	r3, #42516	; 0xa614
   1c488:	movw	r2, #1612	; 0x64c
   1c48c:	movt	r0, #4
   1c490:	b	1c398 <__assert_fail@plt+0x98e8>
   1c494:	mcrcc	14, 6, sl, cr7, cr4, {0}
   1c498:			; <UNDEFINED> instruction: 0x3e99999a
   1c49c:	stccc	7, cr13, [r3], #-40	; 0xffffffd8
   1c4a0:	push	{r4, sl, fp, lr}
   1c4a4:	add	fp, sp, #8
   1c4a8:	mov	r1, #0
   1c4ac:	mov	r4, #0
   1c4b0:	bl	17be0 <__assert_fail@plt+0x5130>
   1c4b4:	mov	r2, #2
   1c4b8:	mov	r1, #4
   1c4bc:	str	r2, [r0, #8]
   1c4c0:	str	r1, [r0, #12]
   1c4c4:	movw	r1, #18024	; 0x4668
   1c4c8:	movt	r1, #1
   1c4cc:	str	r1, [r0]
   1c4d0:	strh	r4, [r0, #18]
   1c4d4:	mov	r0, #1
   1c4d8:	pop	{r4, sl, fp, pc}
   1c4dc:	push	{fp, lr}
   1c4e0:	mov	fp, sp
   1c4e4:	bl	17ae4 <__assert_fail@plt+0x5034>
   1c4e8:	mov	r2, #3
   1c4ec:	mov	r1, #1
   1c4f0:	str	r2, [r0, #8]
   1c4f4:	str	r1, [r0, #12]
   1c4f8:	movw	r1, #15960	; 0x3e58
   1c4fc:	movt	r1, #1
   1c500:	str	r1, [r0]
   1c504:	mov	r1, #1065353216	; 0x3f800000
   1c508:	str	r1, [r0, #28]
   1c50c:	mov	r1, #0
   1c510:	strh	r1, [r0, #18]
   1c514:	mov	r0, #1
   1c518:	pop	{fp, pc}
   1c51c:	push	{fp, lr}
   1c520:	mov	fp, sp
   1c524:	bl	17ae4 <__assert_fail@plt+0x5034>
   1c528:	mov	r1, #3
   1c52c:	str	r1, [r0, #8]
   1c530:	str	r1, [r0, #12]
   1c534:	movw	r1, #15568	; 0x3cd0
   1c538:	movt	r1, #1
   1c53c:	str	r1, [r0]
   1c540:	mov	r1, #0
   1c544:	strh	r1, [r0, #18]
   1c548:	mov	r0, #1
   1c54c:	pop	{fp, pc}
   1c550:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1c554:	add	fp, sp, #28
   1c558:	sub	sp, sp, #28
   1c55c:	mov	r4, #0
   1c560:	cmp	r1, #0
   1c564:	beq	1c638 <__assert_fail@plt+0x9b88>
   1c568:	ldr	r9, [r2]
   1c56c:	mov	r5, r2
   1c570:	ldr	r7, [r1, r9, lsl #2]
   1c574:	cmp	r7, #0
   1c578:	beq	1c638 <__assert_fail@plt+0x9b88>
   1c57c:	movw	sl, #61044	; 0xee74
   1c580:	movw	r1, #43233	; 0xa8e1
   1c584:	mov	r8, r0
   1c588:	add	r0, r9, #1
   1c58c:	vldr	d0, [pc, #180]	; 1c648 <__assert_fail@plt+0x9b98>
   1c590:	add	r6, sp, #8
   1c594:	mov	r4, #0
   1c598:	movt	sl, #5
   1c59c:	str	r0, [r5]
   1c5a0:	movt	r1, #4
   1c5a4:	str	r4, [sp, #8]
   1c5a8:	ldr	r0, [sl, #28]
   1c5ac:	str	r1, [sp]
   1c5b0:	movw	r1, #20864	; 0x5180
   1c5b4:	ldr	r3, [sl, #32]
   1c5b8:	movt	r1, #1
   1c5bc:	add	r2, r0, r1
   1c5c0:	mov	r0, r7
   1c5c4:	mov	r1, r6
   1c5c8:	bl	1ea10 <__assert_fail@plt+0xbf60>
   1c5cc:	cmp	r0, #0
   1c5d0:	beq	1c634 <__assert_fail@plt+0x9b84>
   1c5d4:	mov	r0, r8
   1c5d8:	mov	r1, r7
   1c5dc:	bl	18054 <__assert_fail@plt+0x55a4>
   1c5e0:	mov	r1, #8
   1c5e4:	movw	r3, #10111	; 0x277f
   1c5e8:	vldr	s0, [pc, #104]	; 1c658 <__assert_fail@plt+0x9ba8>
   1c5ec:	mov	r4, #1
   1c5f0:	vld1.64	{d16-d17}, [r6], r1
   1c5f4:	add	r1, r0, #40	; 0x28
   1c5f8:	movt	r3, #133	; 0x85
   1c5fc:	vst1.64	{d16-d17}, [r1]
   1c600:	ldr	r1, [r6]
   1c604:	ldr	r2, [sl, #28]
   1c608:	sub	r1, r2, r1
   1c60c:	add	r2, pc, #60	; 0x3c
   1c610:	cmp	r1, r3
   1c614:	addgt	r2, r2, #4
   1c618:	vldr	s2, [r2]
   1c61c:	movw	r2, #20864	; 0x5180
   1c620:	movt	r2, #1
   1c624:	cmp	r1, r2
   1c628:	vselge.f32	s0, s2, s0
   1c62c:	vstr	s0, [r0, #28]
   1c630:	b	1c638 <__assert_fail@plt+0x9b88>
   1c634:	str	r9, [r5]
   1c638:	mov	r0, r4
   1c63c:	sub	sp, fp, #28
   1c640:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1c644:	nop	{0}
   1c648:	andeq	r0, r0, r0
   1c64c:	submi	r0, lr, r0
   1c650:	mcrcc	14, 6, sl, cr7, cr4, {0}
   1c654:			; <UNDEFINED> instruction: 0x3e99999a
   1c658:	stccc	7, cr13, [r3], #-40	; 0xffffffd8
   1c65c:	push	{r4, r5, r6, sl, fp, lr}
   1c660:	add	fp, sp, #16
   1c664:	sub	sp, sp, #104	; 0x68
   1c668:	mov	r4, r0
   1c66c:	mov	r0, sp
   1c670:	mov	r6, r2
   1c674:	mov	r5, r1
   1c678:	bl	184fc <__assert_fail@plt+0x5a4c>
   1c67c:	mov	r0, #0
   1c680:	cmp	r5, #0
   1c684:	beq	1c724 <__assert_fail@plt+0x9c74>
   1c688:	ldr	r1, [r6]
   1c68c:	ldr	r5, [r5, r1, lsl #2]
   1c690:	cmp	r5, #0
   1c694:	beq	1c724 <__assert_fail@plt+0x9c74>
   1c698:	add	r0, r1, #1
   1c69c:	mov	r1, sp
   1c6a0:	str	r0, [r6]
   1c6a4:	movw	r6, #61044	; 0xee74
   1c6a8:	mov	r0, r5
   1c6ac:	movt	r6, #5
   1c6b0:	ldr	r2, [r6, #52]	; 0x34
   1c6b4:	blx	r2
   1c6b8:	cmp	r0, #0
   1c6bc:	bne	1c72c <__assert_fail@plt+0x9c7c>
   1c6c0:	mov	r0, r4
   1c6c4:	mov	r1, r5
   1c6c8:	bl	18054 <__assert_fail@plt+0x55a4>
   1c6cc:	mov	r1, #0
   1c6d0:	add	ip, r0, #44	; 0x2c
   1c6d4:	vldr	s0, [pc, #104]	; 1c744 <__assert_fail@plt+0x9c94>
   1c6d8:	str	r1, [r0, #40]	; 0x28
   1c6dc:	ldr	r2, [sp, #80]	; 0x50
   1c6e0:	ldr	r3, [sp, #84]	; 0x54
   1c6e4:	stm	ip, {r1, r2, r3}
   1c6e8:	movw	r3, #10111	; 0x277f
   1c6ec:	ldr	r1, [r6, #28]
   1c6f0:	ldr	r2, [sp, #80]	; 0x50
   1c6f4:	movt	r3, #133	; 0x85
   1c6f8:	sub	r1, r1, r2
   1c6fc:	add	r2, pc, #56	; 0x38
   1c700:	cmp	r1, r3
   1c704:	addgt	r2, r2, #4
   1c708:	vldr	s2, [r2]
   1c70c:	movw	r2, #20864	; 0x5180
   1c710:	movt	r2, #1
   1c714:	cmp	r1, r2
   1c718:	vselge.f32	s0, s2, s0
   1c71c:	vstr	s0, [r0, #28]
   1c720:	mov	r0, #1
   1c724:	sub	sp, fp, #16
   1c728:	pop	{r4, r5, r6, sl, fp, pc}
   1c72c:	bl	12804 <__errno_location@plt>
   1c730:	ldr	r0, [r0]
   1c734:	mov	r1, r5
   1c738:	bl	199e8 <__assert_fail@plt+0x6f38>
   1c73c:	mcrcc	14, 6, sl, cr7, cr4, {0}
   1c740:			; <UNDEFINED> instruction: 0x3e99999a
   1c744:	stccc	7, cr13, [r3], #-40	; 0xffffffd8
   1c748:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1c74c:	add	fp, sp, #28
   1c750:	sub	sp, sp, #28
   1c754:	mov	r4, r1
   1c758:	movw	r1, #43431	; 0xa9a7
   1c75c:	mov	r5, r2
   1c760:	mov	r6, r0
   1c764:	mov	r0, #0
   1c768:	mov	r2, #5
   1c76c:	mov	r8, #0
   1c770:	movt	r1, #4
   1c774:	bl	12564 <dcgettext@plt>
   1c778:	cmp	r4, #0
   1c77c:	beq	1c898 <__assert_fail@plt+0x9de8>
   1c780:	ldr	r9, [r5]
   1c784:	ldr	r7, [r4, r9, lsl #2]
   1c788:	cmp	r7, #0
   1c78c:	beq	1c898 <__assert_fail@plt+0x9de8>
   1c790:	movw	sl, #61044	; 0xee74
   1c794:	add	r1, r9, #1
   1c798:	vldr	d0, [pc, #448]	; 1c960 <__assert_fail@plt+0x9eb0>
   1c79c:	add	r4, sp, #8
   1c7a0:	movt	sl, #5
   1c7a4:	str	r1, [r5]
   1c7a8:	ldrb	r1, [r7]
   1c7ac:	str	r0, [sp]
   1c7b0:	movw	r0, #20864	; 0x5180
   1c7b4:	ldr	r2, [sl, #28]
   1c7b8:	movt	r0, #1
   1c7bc:	ldr	r3, [sl, #32]
   1c7c0:	cmp	r1, #45	; 0x2d
   1c7c4:	mov	r1, r4
   1c7c8:	add	r0, r2, r0
   1c7cc:	subeq	r2, r0, #1
   1c7d0:	mov	r0, r7
   1c7d4:	bl	1ea10 <__assert_fail@plt+0xbf60>
   1c7d8:	cmp	r0, #0
   1c7dc:	beq	1c894 <__assert_fail@plt+0x9de4>
   1c7e0:	mov	r0, r6
   1c7e4:	mov	r1, r7
   1c7e8:	bl	18054 <__assert_fail@plt+0x55a4>
   1c7ec:	mov	r5, r0
   1c7f0:	mov	r0, #8
   1c7f4:	movw	r2, #10111	; 0x277f
   1c7f8:	vldr	s0, [pc, #368]	; 1c970 <__assert_fail@plt+0x9ec0>
   1c7fc:	movw	r7, #20864	; 0x5180
   1c800:	mov	r8, #1
   1c804:	vld1.64	{d16-d17}, [r4], r0
   1c808:	add	r0, r5, #40	; 0x28
   1c80c:	movt	r2, #133	; 0x85
   1c810:	movt	r7, #1
   1c814:	vst1.64	{d16-d17}, [r0]
   1c818:	ldr	r0, [r4]
   1c81c:	ldr	r1, [sl, #28]
   1c820:	sub	r0, r1, r0
   1c824:	add	r1, pc, #316	; 0x13c
   1c828:	cmp	r0, r2
   1c82c:	addgt	r1, r1, #4
   1c830:	cmp	r0, r7
   1c834:	vldr	s2, [r1]
   1c838:	vselge.f32	s0, s2, s0
   1c83c:	vstr	s0, [r5, #28]
   1c840:	ldrb	r0, [sl, #44]	; 0x2c
   1c844:	tst	r0, #1
   1c848:	beq	1c898 <__assert_fail@plt+0x9de8>
   1c84c:	movw	sl, #58704	; 0xe550
   1c850:	ldr	r2, [r5, #4]
   1c854:	movw	r1, #43499	; 0xa9eb
   1c858:	movt	sl, #5
   1c85c:	movt	r1, #4
   1c860:	ldr	r0, [sl]
   1c864:	bl	127f8 <fprintf@plt>
   1c868:	ldr	r9, [sp, #12]
   1c86c:	ldr	r0, [sl]
   1c870:	cmp	r9, #0
   1c874:	beq	1c8a4 <__assert_fail@plt+0x9df4>
   1c878:	cmp	r9, #1
   1c87c:	bne	1c8b8 <__assert_fail@plt+0x9e08>
   1c880:	movw	r3, #43543	; 0xaa17
   1c884:	movw	r2, #49407	; 0xc0ff
   1c888:	movt	r3, #4
   1c88c:	movt	r2, #4
   1c890:	b	1c8e4 <__assert_fail@plt+0x9e34>
   1c894:	str	r9, [r5]
   1c898:	mov	r0, r8
   1c89c:	sub	sp, fp, #28
   1c8a0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1c8a4:	movw	r3, #43540	; 0xaa14
   1c8a8:	movw	r2, #43534	; 0xaa0e
   1c8ac:	movt	r3, #4
   1c8b0:	movt	r2, #4
   1c8b4:	b	1c8e4 <__assert_fail@plt+0x9e34>
   1c8b8:	movw	r1, #43546	; 0xaa1a
   1c8bc:	movw	r3, #43549	; 0xaa1d
   1c8c0:	cmp	r9, #2
   1c8c4:	movw	r2, #43550	; 0xaa1e
   1c8c8:	movt	r1, #4
   1c8cc:	movt	r3, #4
   1c8d0:	movt	r2, #4
   1c8d4:	moveq	r3, r1
   1c8d8:	movw	r1, #43537	; 0xaa11
   1c8dc:	movt	r1, #4
   1c8e0:	moveq	r2, r1
   1c8e4:	movw	r1, #43513	; 0xa9f9
   1c8e8:	movt	r1, #4
   1c8ec:	bl	127f8 <fprintf@plt>
   1c8f0:	ldr	r4, [r5, #48]	; 0x30
   1c8f4:	ldr	r6, [sl]
   1c8f8:	add	r0, sp, #4
   1c8fc:	str	r4, [sp, #4]
   1c900:	bl	12558 <ctime@plt>
   1c904:	movw	r1, #43572	; 0xaa34
   1c908:	str	r0, [sp]
   1c90c:	asr	r3, r4, #31
   1c910:	mov	r0, r6
   1c914:	mov	r2, r4
   1c918:	movt	r1, #4
   1c91c:	bl	127f8 <fprintf@plt>
   1c920:	cmp	r9, #2
   1c924:	bne	1c898 <__assert_fail@plt+0x9de8>
   1c928:	ldr	r0, [r5, #48]	; 0x30
   1c92c:	ldr	r5, [sl]
   1c930:	add	r4, r0, r7
   1c934:	add	r0, sp, #4
   1c938:	str	r4, [sp, #4]
   1c93c:	bl	12558 <ctime@plt>
   1c940:	movw	r1, #43552	; 0xaa20
   1c944:	str	r0, [sp]
   1c948:	asr	r3, r4, #31
   1c94c:	mov	r0, r5
   1c950:	mov	r2, r4
   1c954:	movt	r1, #4
   1c958:	bl	127f8 <fprintf@plt>
   1c95c:	b	1c898 <__assert_fail@plt+0x9de8>
   1c960:	andeq	r0, r0, r0
   1c964:	rscsmi	r1, r5, r0, lsl #16
   1c968:	mcrcc	14, 6, sl, cr7, cr4, {0}
   1c96c:			; <UNDEFINED> instruction: 0x3e99999a
   1c970:	stccc	7, cr13, [r3], #-40	; 0xffffffd8
   1c974:	nop	{0}
   1c978:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1c97c:	add	fp, sp, #28
   1c980:	sub	sp, sp, #28
   1c984:	mov	r4, #0
   1c988:	cmp	r1, #0
   1c98c:	beq	1ca60 <__assert_fail@plt+0x9fb0>
   1c990:	ldr	r9, [r2]
   1c994:	mov	r5, r2
   1c998:	ldr	r7, [r1, r9, lsl #2]
   1c99c:	cmp	r7, #0
   1c9a0:	beq	1ca60 <__assert_fail@plt+0x9fb0>
   1c9a4:	movw	sl, #61044	; 0xee74
   1c9a8:	movw	r1, #43233	; 0xa8e1
   1c9ac:	mov	r8, r0
   1c9b0:	add	r0, r9, #1
   1c9b4:	vldr	d0, [pc, #180]	; 1ca70 <__assert_fail@plt+0x9fc0>
   1c9b8:	add	r6, sp, #8
   1c9bc:	movt	sl, #5
   1c9c0:	str	r0, [r5]
   1c9c4:	mov	r0, #2
   1c9c8:	movt	r1, #4
   1c9cc:	str	r0, [sp, #8]
   1c9d0:	ldr	r0, [sl, #28]
   1c9d4:	str	r1, [sp]
   1c9d8:	movw	r1, #20864	; 0x5180
   1c9dc:	ldr	r3, [sl, #32]
   1c9e0:	movt	r1, #1
   1c9e4:	add	r2, r0, r1
   1c9e8:	mov	r0, r7
   1c9ec:	mov	r1, r6
   1c9f0:	bl	1ea10 <__assert_fail@plt+0xbf60>
   1c9f4:	cmp	r0, #0
   1c9f8:	beq	1ca5c <__assert_fail@plt+0x9fac>
   1c9fc:	mov	r0, r8
   1ca00:	mov	r1, r7
   1ca04:	bl	18054 <__assert_fail@plt+0x55a4>
   1ca08:	mov	r1, #8
   1ca0c:	movw	r3, #10111	; 0x277f
   1ca10:	vldr	s0, [pc, #104]	; 1ca80 <__assert_fail@plt+0x9fd0>
   1ca14:	mov	r4, #1
   1ca18:	vld1.64	{d16-d17}, [r6], r1
   1ca1c:	add	r1, r0, #40	; 0x28
   1ca20:	movt	r3, #133	; 0x85
   1ca24:	vst1.64	{d16-d17}, [r1]
   1ca28:	ldr	r1, [r6]
   1ca2c:	ldr	r2, [sl, #28]
   1ca30:	sub	r1, r2, r1
   1ca34:	add	r2, pc, #60	; 0x3c
   1ca38:	cmp	r1, r3
   1ca3c:	addgt	r2, r2, #4
   1ca40:	vldr	s2, [r2]
   1ca44:	movw	r2, #20864	; 0x5180
   1ca48:	movt	r2, #1
   1ca4c:	cmp	r1, r2
   1ca50:	vselge.f32	s0, s2, s0
   1ca54:	vstr	s0, [r0, #28]
   1ca58:	b	1ca60 <__assert_fail@plt+0x9fb0>
   1ca5c:	str	r9, [r5]
   1ca60:	mov	r0, r4
   1ca64:	sub	sp, fp, #28
   1ca68:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1ca6c:	nop	{0}
   1ca70:	andeq	r0, r0, r0
   1ca74:	submi	r0, lr, r0
   1ca78:	mcrcc	14, 6, sl, cr7, cr4, {0}
   1ca7c:			; <UNDEFINED> instruction: 0x3e99999a
   1ca80:	stccc	7, cr13, [r3], #-40	; 0xffffffd8
   1ca84:	push	{r4, r5, r6, sl, fp, lr}
   1ca88:	add	fp, sp, #16
   1ca8c:	sub	sp, sp, #104	; 0x68
   1ca90:	mov	r4, r0
   1ca94:	mov	r0, sp
   1ca98:	mov	r6, r2
   1ca9c:	mov	r5, r1
   1caa0:	bl	184fc <__assert_fail@plt+0x5a4c>
   1caa4:	mov	r0, #0
   1caa8:	cmp	r5, #0
   1caac:	beq	1cb54 <__assert_fail@plt+0xa0a4>
   1cab0:	ldr	r1, [r6]
   1cab4:	ldr	r5, [r5, r1, lsl #2]
   1cab8:	cmp	r5, #0
   1cabc:	beq	1cb54 <__assert_fail@plt+0xa0a4>
   1cac0:	add	r0, r1, #1
   1cac4:	mov	r1, sp
   1cac8:	str	r0, [r6]
   1cacc:	movw	r6, #61044	; 0xee74
   1cad0:	mov	r0, r5
   1cad4:	movt	r6, #5
   1cad8:	ldr	r2, [r6, #52]	; 0x34
   1cadc:	blx	r2
   1cae0:	cmp	r0, #0
   1cae4:	bne	1cb5c <__assert_fail@plt+0xa0ac>
   1cae8:	mov	r0, r4
   1caec:	mov	r1, r5
   1caf0:	bl	18054 <__assert_fail@plt+0x55a4>
   1caf4:	mov	r1, #2
   1caf8:	mov	r3, #0
   1cafc:	vldr	s0, [pc, #112]	; 1cb74 <__assert_fail@plt+0xa0c4>
   1cb00:	str	r1, [r0, #40]	; 0x28
   1cb04:	ldr	r1, [sp, #80]	; 0x50
   1cb08:	ldr	r2, [sp, #84]	; 0x54
   1cb0c:	str	r3, [r0, #44]	; 0x2c
   1cb10:	movw	r3, #10111	; 0x277f
   1cb14:	movt	r3, #133	; 0x85
   1cb18:	str	r1, [r0, #48]	; 0x30
   1cb1c:	str	r2, [r0, #52]	; 0x34
   1cb20:	ldr	r1, [r6, #28]
   1cb24:	ldr	r2, [sp, #80]	; 0x50
   1cb28:	sub	r1, r1, r2
   1cb2c:	add	r2, pc, #56	; 0x38
   1cb30:	cmp	r1, r3
   1cb34:	addgt	r2, r2, #4
   1cb38:	vldr	s2, [r2]
   1cb3c:	movw	r2, #20864	; 0x5180
   1cb40:	movt	r2, #1
   1cb44:	cmp	r1, r2
   1cb48:	vselge.f32	s0, s2, s0
   1cb4c:	vstr	s0, [r0, #28]
   1cb50:	mov	r0, #1
   1cb54:	sub	sp, fp, #16
   1cb58:	pop	{r4, r5, r6, sl, fp, pc}
   1cb5c:	bl	12804 <__errno_location@plt>
   1cb60:	ldr	r0, [r0]
   1cb64:	mov	r1, r5
   1cb68:	bl	199e8 <__assert_fail@plt+0x6f38>
   1cb6c:	mcrcc	14, 6, sl, cr7, cr4, {0}
   1cb70:			; <UNDEFINED> instruction: 0x3e99999a
   1cb74:	stccc	7, cr13, [r3], #-40	; 0xffffffd8
   1cb78:	push	{r4, r5, r6, r7, fp, lr}
   1cb7c:	add	fp, sp, #16
   1cb80:	mov	r6, r0
   1cb84:	mov	r0, #0
   1cb88:	cmp	r1, #0
   1cb8c:	beq	1cbf0 <__assert_fail@plt+0xa140>
   1cb90:	mov	r5, r1
   1cb94:	ldr	r1, [r2]
   1cb98:	mov	r4, r2
   1cb9c:	ldr	r1, [r5, r1, lsl #2]
   1cba0:	cmp	r1, #0
   1cba4:	beq	1cbf0 <__assert_fail@plt+0xa140>
   1cba8:	bl	123e4 <is_selinux_enabled@plt>
   1cbac:	cmp	r0, #0
   1cbb0:	ble	1cbf4 <__assert_fail@plt+0xa144>
   1cbb4:	mov	r0, r6
   1cbb8:	mov	r1, #0
   1cbbc:	mov	r7, #0
   1cbc0:	bl	18054 <__assert_fail@plt+0x55a4>
   1cbc4:	movw	r1, #55050	; 0xd70a
   1cbc8:	movt	r1, #15395	; 0x3c23
   1cbcc:	str	r1, [r0, #28]
   1cbd0:	strb	r7, [r0, #18]
   1cbd4:	ldr	r1, [r4]
   1cbd8:	ldr	r1, [r5, r1, lsl #2]
   1cbdc:	str	r1, [r0, #40]	; 0x28
   1cbe0:	ldr	r0, [r4]
   1cbe4:	add	r0, r0, #1
   1cbe8:	str	r0, [r4]
   1cbec:	mov	r0, #1
   1cbf0:	pop	{r4, r5, r6, r7, fp, pc}
   1cbf4:	movw	r1, #43580	; 0xaa3c
   1cbf8:	mov	r0, #0
   1cbfc:	mov	r2, #5
   1cc00:	movt	r1, #4
   1cc04:	bl	12564 <dcgettext@plt>
   1cc08:	mov	r2, r0
   1cc0c:	mov	r0, #1
   1cc10:	mov	r1, #0
   1cc14:	bl	1269c <error@plt>
   1cc18:	push	{r4, sl, fp, lr}
   1cc1c:	add	fp, sp, #8
   1cc20:	movw	r4, #61044	; 0xee74
   1cc24:	movt	r4, #5
   1cc28:	ldrb	r0, [r4, #36]	; 0x24
   1cc2c:	cmp	r0, #0
   1cc30:	beq	1cc3c <__assert_fail@plt+0xa18c>
   1cc34:	mov	r0, #1
   1cc38:	pop	{r4, sl, fp, pc}
   1cc3c:	mov	r0, r4
   1cc40:	mov	r2, #0
   1cc44:	ldr	r1, [r0, #28]!
   1cc48:	add	r1, r1, #4480	; 0x1180
   1cc4c:	add	r1, r1, #81920	; 0x14000
   1cc50:	stm	r0, {r1, r2}
   1cc54:	bl	1272c <localtime@plt>
   1cc58:	cmp	r0, #0
   1cc5c:	beq	1cc80 <__assert_fail@plt+0xa1d0>
   1cc60:	ldm	r0, {r1, r2}
   1cc64:	rsb	r2, r2, r2, lsl #4
   1cc68:	ldr	r0, [r0, #8]
   1cc6c:	add	r1, r1, r2, lsl #2
   1cc70:	mov	r2, #3600	; 0xe10
   1cc74:	mla	r1, r0, r2, r1
   1cc78:	ldr	r0, [r4, #28]
   1cc7c:	b	1cca4 <__assert_fail@plt+0xa1f4>
   1cc80:	ldr	r0, [r4, #28]
   1cc84:	movw	r1, #17671	; 0x4507
   1cc88:	movt	r1, #49710	; 0xc22e
   1cc8c:	smmla	r1, r0, r1, r0
   1cc90:	asr	r2, r1, #16
   1cc94:	add	r1, r2, r1, lsr #31
   1cc98:	movw	r2, #675	; 0x2a3
   1cc9c:	mul	r1, r1, r2
   1cca0:	sub	r1, r0, r1, lsl #7
   1cca4:	mov	r2, #1
   1cca8:	sub	r0, r0, r1
   1ccac:	strb	r2, [r4, #36]	; 0x24
   1ccb0:	str	r0, [r4, #28]
   1ccb4:	mov	r0, #1
   1ccb8:	pop	{r4, sl, fp, pc}
   1ccbc:	push	{fp, lr}
   1ccc0:	mov	fp, sp
   1ccc4:	bl	180b4 <__assert_fail@plt+0x5604>
   1ccc8:	movw	r1, #257	; 0x101
   1cccc:	mov	r2, #0
   1ccd0:	strh	r1, [r0, #16]
   1ccd4:	movw	r1, #61044	; 0xee74
   1ccd8:	movt	r1, #5
   1ccdc:	strb	r2, [r1]
   1cce0:	mov	r1, #1065353216	; 0x3f800000
   1cce4:	strh	r2, [r0, #18]
   1cce8:	str	r1, [r0, #28]
   1ccec:	mov	r0, #1
   1ccf0:	pop	{fp, pc}
   1ccf4:	push	{r4, sl, fp, lr}
   1ccf8:	add	fp, sp, #8
   1ccfc:	movw	r4, #61044	; 0xee74
   1cd00:	movt	r4, #5
   1cd04:	ldrb	r0, [r4, #17]
   1cd08:	cmp	r0, #0
   1cd0c:	bne	1cd40 <__assert_fail@plt+0xa290>
   1cd10:	ldrb	r0, [r4, #16]
   1cd14:	cmp	r0, #0
   1cd18:	beq	1cd40 <__assert_fail@plt+0xa290>
   1cd1c:	movw	r1, #43632	; 0xaa70
   1cd20:	mov	r0, #0
   1cd24:	mov	r2, #5
   1cd28:	movt	r1, #4
   1cd2c:	bl	12564 <dcgettext@plt>
   1cd30:	mov	r2, r0
   1cd34:	mov	r0, #0
   1cd38:	mov	r1, #0
   1cd3c:	bl	1269c <error@plt>
   1cd40:	movw	r1, #60636	; 0xecdc
   1cd44:	mov	r0, #256	; 0x100
   1cd48:	movt	r1, #5
   1cd4c:	strh	r0, [r4]
   1cd50:	ldr	r0, [r1]
   1cd54:	cmp	r0, #0
   1cd58:	bne	1cd6c <__assert_fail@plt+0xa2bc>
   1cd5c:	movw	r0, #46340	; 0xb504
   1cd60:	movt	r0, #4
   1cd64:	add	r0, r0, #1296	; 0x510
   1cd68:	str	r0, [r1]
   1cd6c:	bl	180b4 <__assert_fail@plt+0x5604>
   1cd70:	mov	r1, #1065353216	; 0x3f800000
   1cd74:	str	r1, [r0, #28]
   1cd78:	mov	r1, #0
   1cd7c:	strh	r1, [r0, #18]
   1cd80:	mov	r0, #1
   1cd84:	pop	{r4, sl, fp, pc}
   1cd88:	push	{fp, lr}
   1cd8c:	mov	fp, sp
   1cd90:	movw	r0, #61044	; 0xee74
   1cd94:	mov	r1, #256	; 0x100
   1cd98:	movt	r0, #5
   1cd9c:	strh	r1, [r0]
   1cda0:	movw	r1, #60636	; 0xecdc
   1cda4:	movt	r1, #5
   1cda8:	ldr	r0, [r1]
   1cdac:	cmp	r0, #0
   1cdb0:	bne	1cdc4 <__assert_fail@plt+0xa314>
   1cdb4:	movw	r0, #46340	; 0xb504
   1cdb8:	movt	r0, #4
   1cdbc:	add	r0, r0, #1296	; 0x510
   1cdc0:	str	r0, [r1]
   1cdc4:	bl	180b4 <__assert_fail@plt+0x5604>
   1cdc8:	mov	r1, #1065353216	; 0x3f800000
   1cdcc:	str	r1, [r0, #28]
   1cdd0:	mov	r1, #0
   1cdd4:	strh	r1, [r0, #18]
   1cdd8:	mov	r0, #1
   1cddc:	pop	{fp, pc}
   1cde0:	push	{fp, lr}
   1cde4:	mov	fp, sp
   1cde8:	bl	180b4 <__assert_fail@plt+0x5604>
   1cdec:	movw	r1, #55050	; 0xd70a
   1cdf0:	movt	r1, #15395	; 0x3c23
   1cdf4:	str	r1, [r0, #28]
   1cdf8:	mov	r0, #1
   1cdfc:	pop	{fp, pc}
   1ce00:	mov	r3, r2
   1ce04:	mov	r2, r1
   1ce08:	mov	r1, r0
   1ce0c:	movw	r0, #43746	; 0xaae2
   1ce10:	movt	r0, #4
   1ce14:	b	1eb80 <__assert_fail@plt+0xc0d0>
   1ce18:	push	{fp, lr}
   1ce1c:	mov	fp, sp
   1ce20:	bl	180b4 <__assert_fail@plt+0x5604>
   1ce24:	mov	r1, #0
   1ce28:	movw	r3, #19116	; 0x4aac
   1ce2c:	str	r1, [r0, #16]
   1ce30:	movt	r3, #1
   1ce34:	ldr	r1, [r0]
   1ce38:	add	r2, pc, #20
   1ce3c:	cmp	r1, r3
   1ce40:	addeq	r2, r2, #4
   1ce44:	ldr	r1, [r2]
   1ce48:	str	r1, [r0, #28]
   1ce4c:	mov	r0, #1
   1ce50:	pop	{fp, pc}
   1ce54:	svccc	0x00666666
   1ce58:	cdpcc	12, 4, cr12, cr12, cr13, {6}
   1ce5c:	mov	r3, r2
   1ce60:	mov	r2, r1
   1ce64:	mov	r1, r0
   1ce68:	movw	r0, #44600	; 0xae38
   1ce6c:	movt	r0, #4
   1ce70:	b	1eb80 <__assert_fail@plt+0xc0d0>
   1ce74:	mov	r0, #0
   1ce78:	cmp	r1, #0
   1ce7c:	beq	1cea8 <__assert_fail@plt+0xa3f8>
   1ce80:	ldr	r3, [r2]
   1ce84:	ldr	r1, [r1, r3, lsl #2]
   1ce88:	cmp	r1, #0
   1ce8c:	bxeq	lr
   1ce90:	add	r0, r3, #1
   1ce94:	str	r0, [r2]
   1ce98:	movw	r0, #61044	; 0xee74
   1ce9c:	movt	r0, #5
   1cea0:	str	r1, [r0, #76]	; 0x4c
   1cea4:	mov	r0, #1
   1cea8:	bx	lr
   1ceac:	push	{r4, r5, fp, lr}
   1ceb0:	add	fp, sp, #8
   1ceb4:	mov	r3, r0
   1ceb8:	mov	r0, #0
   1cebc:	cmp	r1, #0
   1cec0:	beq	1cf08 <__assert_fail@plt+0xa458>
   1cec4:	ldr	r5, [r2]
   1cec8:	ldr	r4, [r1, r5, lsl #2]
   1cecc:	cmp	r4, #0
   1ced0:	beq	1cf08 <__assert_fail@plt+0xa458>
   1ced4:	add	r0, r5, #1
   1ced8:	str	r0, [r2]
   1cedc:	mov	r0, r3
   1cee0:	bl	180b4 <__assert_fail@plt+0x5604>
   1cee4:	mov	r5, r0
   1cee8:	add	r1, r0, #40	; 0x28
   1ceec:	mov	r0, r4
   1cef0:	bl	1f1e4 <__assert_fail@plt+0xc734>
   1cef4:	mov	r0, #1065353216	; 0x3f800000
   1cef8:	str	r0, [r5, #28]
   1cefc:	movw	r0, #257	; 0x101
   1cf00:	strh	r0, [r5, #16]
   1cf04:	mov	r0, #1
   1cf08:	pop	{r4, r5, fp, pc}
   1cf0c:	push	{fp, lr}
   1cf10:	mov	fp, sp
   1cf14:	movw	r0, #61044	; 0xee74
   1cf18:	movw	r1, #48552	; 0xbda8
   1cf1c:	mov	r2, #1
   1cf20:	movt	r0, #5
   1cf24:	movt	r1, #1
   1cf28:	str	r1, [r0, #64]	; 0x40
   1cf2c:	movw	r1, #36080	; 0x8cf0
   1cf30:	str	r2, [r0, #48]	; 0x30
   1cf34:	movt	r1, #1
   1cf38:	str	r1, [r0, #52]	; 0x34
   1cf3c:	strb	r2, [r0, #12]
   1cf40:	ldrb	r1, [r0, #44]	; 0x2c
   1cf44:	tst	r1, #2
   1cf48:	movwne	r1, #36428	; 0x8e4c
   1cf4c:	movtne	r1, #1
   1cf50:	strne	r1, [r0, #52]	; 0x34
   1cf54:	movw	r1, #60636	; 0xecdc
   1cf58:	movt	r1, #5
   1cf5c:	ldr	r0, [r1]
   1cf60:	cmp	r0, #0
   1cf64:	bne	1cf78 <__assert_fail@plt+0xa4c8>
   1cf68:	movw	r0, #46340	; 0xb504
   1cf6c:	movt	r0, #4
   1cf70:	add	r0, r0, #1296	; 0x510
   1cf74:	str	r0, [r1]
   1cf78:	bl	180b4 <__assert_fail@plt+0x5604>
   1cf7c:	mov	r1, #1065353216	; 0x3f800000
   1cf80:	str	r1, [r0, #28]
   1cf84:	mov	r1, #0
   1cf88:	strh	r1, [r0, #18]
   1cf8c:	mov	r0, #1
   1cf90:	pop	{fp, pc}
   1cf94:	push	{r4, r5, fp, lr}
   1cf98:	add	fp, sp, #8
   1cf9c:	mov	r3, r0
   1cfa0:	mov	r0, #0
   1cfa4:	cmp	r1, #0
   1cfa8:	beq	1cffc <__assert_fail@plt+0xa54c>
   1cfac:	ldr	r5, [r2]
   1cfb0:	ldr	r4, [r1, r5, lsl #2]
   1cfb4:	cmp	r4, #0
   1cfb8:	beq	1cffc <__assert_fail@plt+0xa54c>
   1cfbc:	add	r0, r5, #1
   1cfc0:	mov	r1, r4
   1cfc4:	str	r0, [r2]
   1cfc8:	mov	r0, r3
   1cfcc:	bl	18054 <__assert_fail@plt+0x55a4>
   1cfd0:	mov	r5, r0
   1cfd4:	add	r1, r0, #40	; 0x28
   1cfd8:	mov	r0, r4
   1cfdc:	bl	1f1e4 <__assert_fail@plt+0xc734>
   1cfe0:	mov	r0, #0
   1cfe4:	mov	r1, #1065353216	; 0x3f800000
   1cfe8:	strb	r0, [r5, #19]
   1cfec:	mov	r0, #1
   1cff0:	strb	r0, [r5, #16]
   1cff4:	strh	r0, [r5, #17]
   1cff8:	str	r1, [r5, #28]
   1cffc:	pop	{r4, r5, fp, pc}
   1d000:	push	{r4, r5, fp, lr}
   1d004:	add	fp, sp, #8
   1d008:	mov	r3, r0
   1d00c:	mov	r0, #0
   1d010:	cmp	r1, #0
   1d014:	beq	1d068 <__assert_fail@plt+0xa5b8>
   1d018:	ldr	r5, [r2]
   1d01c:	ldr	r4, [r1, r5, lsl #2]
   1d020:	cmp	r4, #0
   1d024:	beq	1d068 <__assert_fail@plt+0xa5b8>
   1d028:	add	r0, r5, #1
   1d02c:	mov	r1, r4
   1d030:	str	r0, [r2]
   1d034:	mov	r0, r3
   1d038:	bl	18054 <__assert_fail@plt+0x55a4>
   1d03c:	mov	r5, r0
   1d040:	add	r1, r0, #40	; 0x28
   1d044:	mov	r0, r4
   1d048:	bl	1f1e4 <__assert_fail@plt+0xc734>
   1d04c:	mov	r0, #0
   1d050:	mov	r1, #1065353216	; 0x3f800000
   1d054:	strb	r0, [r5, #19]
   1d058:	mov	r0, #1
   1d05c:	strb	r0, [r5, #16]
   1d060:	strh	r0, [r5, #17]
   1d064:	str	r1, [r5, #28]
   1d068:	pop	{r4, r5, fp, pc}
   1d06c:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   1d070:	add	fp, sp, #24
   1d074:	sub	sp, sp, #24
   1d078:	ldr	r7, [r2]
   1d07c:	mov	r4, r2
   1d080:	cmp	r1, #0
   1d084:	beq	1d0e4 <__assert_fail@plt+0xa634>
   1d088:	mov	r5, r0
   1d08c:	ldr	r0, [r1, r7, lsl #2]
   1d090:	cmp	r0, #0
   1d094:	beq	1d0e4 <__assert_fail@plt+0xa634>
   1d098:	add	r2, r7, #1
   1d09c:	str	r2, [r4]
   1d0a0:	ldr	r6, [r1, r2, lsl #2]
   1d0a4:	cmp	r6, #0
   1d0a8:	beq	1d0e4 <__assert_fail@plt+0xa634>
   1d0ac:	add	r1, r7, #2
   1d0b0:	add	r8, sp, #4
   1d0b4:	str	r1, [r4]
   1d0b8:	mov	r1, r8
   1d0bc:	bl	1f1e4 <__assert_fail@plt+0xc734>
   1d0c0:	ldr	r7, [r4]
   1d0c4:	mov	r0, r8
   1d0c8:	mov	r1, r5
   1d0cc:	mov	r2, r6
   1d0d0:	bl	1a108 <__assert_fail@plt+0x7658>
   1d0d4:	mov	r1, r0
   1d0d8:	mov	r0, #1
   1d0dc:	cmp	r1, #0
   1d0e0:	bne	1d0ec <__assert_fail@plt+0xa63c>
   1d0e4:	mov	r0, #0
   1d0e8:	str	r7, [r4]
   1d0ec:	sub	sp, fp, #24
   1d0f0:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   1d0f4:	push	{r4, r5, r6, sl, fp, lr}
   1d0f8:	add	fp, sp, #16
   1d0fc:	sub	sp, sp, #104	; 0x68
   1d100:	mov	r5, r0
   1d104:	mov	r0, #0
   1d108:	cmp	r1, #0
   1d10c:	beq	1d1e8 <__assert_fail@plt+0xa738>
   1d110:	ldr	r3, [r2]
   1d114:	ldr	r4, [r1, r3, lsl #2]
   1d118:	cmp	r4, #0
   1d11c:	beq	1d1e8 <__assert_fail@plt+0xa738>
   1d120:	movw	r6, #61044	; 0xee74
   1d124:	add	r0, r3, #1
   1d128:	movt	r6, #5
   1d12c:	str	r0, [r2]
   1d130:	ldrh	r0, [r6, #68]	; 0x44
   1d134:	cmp	r0, #2
   1d138:	bcc	1d14c <__assert_fail@plt+0xa69c>
   1d13c:	mov	r0, r4
   1d140:	bl	1baac <__assert_fail@plt+0x8ffc>
   1d144:	cmp	r0, #0
   1d148:	beq	1d1bc <__assert_fail@plt+0xa70c>
   1d14c:	mov	r0, r5
   1d150:	mov	r1, r4
   1d154:	bl	18054 <__assert_fail@plt+0x55a4>
   1d158:	movw	r1, #33590	; 0x8336
   1d15c:	mov	r5, r0
   1d160:	str	r4, [r0, #40]	; 0x28
   1d164:	mov	r2, sp
   1d168:	mov	r0, #3
   1d16c:	movt	r1, #4
   1d170:	bl	12a14 <__xstat64@plt>
   1d174:	cmp	r0, #0
   1d178:	beq	1d188 <__assert_fail@plt+0xa6d8>
   1d17c:	vmov.f32	s0, #112	; 0x3f800000  1.0
   1d180:	vstr	s0, [r5, #28]
   1d184:	b	1d1e4 <__assert_fail@plt+0xa734>
   1d188:	movw	r1, #33590	; 0x8336
   1d18c:	mov	r0, sp
   1d190:	movt	r1, #4
   1d194:	bl	1b8b8 <__assert_fail@plt+0x8e08>
   1d198:	mov	r1, r0
   1d19c:	mov	r0, r4
   1d1a0:	bl	123fc <strcmp@plt>
   1d1a4:	add	r1, pc, #100	; 0x64
   1d1a8:	cmp	r0, #0
   1d1ac:	addeq	r1, r1, #4
   1d1b0:	vldr	s0, [r1]
   1d1b4:	vstr	s0, [r5, #28]
   1d1b8:	b	1d1e4 <__assert_fail@plt+0xa734>
   1d1bc:	ldrb	r0, [r6, #44]	; 0x2c
   1d1c0:	tst	r0, #8
   1d1c4:	bne	1d1f0 <__assert_fail@plt+0xa740>
   1d1c8:	movw	r0, #43200	; 0xa8c0
   1d1cc:	movt	r0, #4
   1d1d0:	bl	1befc <__assert_fail@plt+0x944c>
   1d1d4:	bl	180b4 <__assert_fail@plt+0x5604>
   1d1d8:	mov	r1, #0
   1d1dc:	str	r1, [r0, #28]
   1d1e0:	str	r1, [r0, #16]
   1d1e4:	mov	r0, #1
   1d1e8:	sub	sp, fp, #16
   1d1ec:	pop	{r4, r5, r6, sl, fp, pc}
   1d1f0:	movw	r0, #58704	; 0xe550
   1d1f4:	movw	r1, #44648	; 0xae68
   1d1f8:	mov	r2, r4
   1d1fc:	movt	r0, #5
   1d200:	movt	r1, #4
   1d204:	ldr	r0, [r0]
   1d208:	bl	127f8 <fprintf@plt>
   1d20c:	b	1d1c8 <__assert_fail@plt+0xa718>
   1d210:			; <UNDEFINED> instruction: 0x3e99999a
   1d214:	svccc	0x00333333
   1d218:	push	{r4, sl, fp, lr}
   1d21c:	add	fp, sp, #8
   1d220:	mov	r4, r2
   1d224:	mov	r2, r0
   1d228:	mov	r0, r1
   1d22c:	mov	r1, r4
   1d230:	bl	1f2d4 <__assert_fail@plt+0xc824>
   1d234:	cmp	r0, #0
   1d238:	beq	1d260 <__assert_fail@plt+0xa7b0>
   1d23c:	add	r1, pc, #48	; 0x30
   1d240:	ldrd	r2, [r0, #48]	; 0x30
   1d244:	subs	r2, r2, #100	; 0x64
   1d248:	sbcs	r2, r3, #0
   1d24c:	addcc	r1, r1, #4
   1d250:	ldr	r1, [r1]
   1d254:	str	r1, [r0, #28]
   1d258:	mov	r0, #1
   1d25c:	pop	{r4, sl, fp, pc}
   1d260:	ldr	r0, [r4]
   1d264:	sub	r0, r0, #1
   1d268:	str	r0, [r4]
   1d26c:	mov	r0, #0
   1d270:	pop	{r4, sl, fp, pc}
   1d274:	cdpcc	12, 4, cr12, cr12, cr13, {6}
   1d278:	svccc	0x007d70a4
   1d27c:	push	{r4, r5, r6, r7, fp, lr}
   1d280:	add	fp, sp, #16
   1d284:	sub	sp, sp, #8
   1d288:	mov	r5, r0
   1d28c:	mov	r0, #0
   1d290:	cmp	r1, #0
   1d294:	beq	1d340 <__assert_fail@plt+0xa890>
   1d298:	ldr	r3, [r2]
   1d29c:	ldr	r4, [r1, r3, lsl #2]
   1d2a0:	cmp	r4, #0
   1d2a4:	beq	1d340 <__assert_fail@plt+0xa890>
   1d2a8:	add	r0, r3, #1
   1d2ac:	str	r0, [r2]
   1d2b0:	mov	r0, r4
   1d2b4:	bl	12a98 <getgrnam@plt>
   1d2b8:	mov	r6, r0
   1d2bc:	bl	12390 <endgrent@plt>
   1d2c0:	cmp	r6, #0
   1d2c4:	beq	1d2d0 <__assert_fail@plt+0xa820>
   1d2c8:	ldr	r6, [r6, #8]
   1d2cc:	b	1d310 <__assert_fail@plt+0xa860>
   1d2d0:	movw	r1, #44708	; 0xaea4
   1d2d4:	mov	r0, r4
   1d2d8:	movt	r1, #4
   1d2dc:	bl	12aa4 <strspn@plt>
   1d2e0:	cmp	r0, #0
   1d2e4:	beq	1d348 <__assert_fail@plt+0xa898>
   1d2e8:	mov	r6, r4
   1d2ec:	ldrb	r0, [r6, r0]!
   1d2f0:	cmp	r0, #0
   1d2f4:	bne	1d378 <__assert_fail@plt+0xa8c8>
   1d2f8:	movw	r0, #61044	; 0xee74
   1d2fc:	movt	r0, #5
   1d300:	ldr	r1, [r0, #72]	; 0x48
   1d304:	mov	r0, r4
   1d308:	bl	221f8 <__assert_fail@plt+0xf748>
   1d30c:	mov	r6, r0
   1d310:	mov	r0, r5
   1d314:	mov	r1, r4
   1d318:	bl	18054 <__assert_fail@plt+0x55a4>
   1d31c:	str	r6, [r0, #40]	; 0x28
   1d320:	ldrd	r2, [r0, #48]	; 0x30
   1d324:	add	r1, pc, #236	; 0xec
   1d328:	subs	r2, r2, #100	; 0x64
   1d32c:	sbcs	r2, r3, #0
   1d330:	addcc	r1, r1, #4
   1d334:	ldr	r1, [r1]
   1d338:	str	r1, [r0, #28]
   1d33c:	mov	r0, #1
   1d340:	sub	sp, fp, #16
   1d344:	pop	{r4, r5, r6, r7, fp, pc}
   1d348:	ldrb	r0, [r4]
   1d34c:	cmp	r0, #0
   1d350:	bne	1d3d4 <__assert_fail@plt+0xa924>
   1d354:	movw	r1, #44884	; 0xaf54
   1d358:	mov	r0, #0
   1d35c:	mov	r2, #5
   1d360:	movt	r1, #4
   1d364:	bl	12564 <dcgettext@plt>
   1d368:	mov	r2, r0
   1d36c:	mov	r0, #1
   1d370:	mov	r1, #0
   1d374:	bl	1269c <error@plt>
   1d378:	movw	r1, #44719	; 0xaeaf
   1d37c:	mov	r0, #0
   1d380:	mov	r2, #5
   1d384:	movt	r1, #4
   1d388:	bl	12564 <dcgettext@plt>
   1d38c:	movw	r7, #61044	; 0xee74
   1d390:	mov	r5, r0
   1d394:	mov	r0, #0
   1d398:	mov	r2, r4
   1d39c:	movt	r7, #5
   1d3a0:	ldr	r1, [r7, #72]	; 0x48
   1d3a4:	bl	2c88c <__assert_fail@plt+0x19ddc>
   1d3a8:	ldr	r1, [r7, #72]	; 0x48
   1d3ac:	mov	r4, r0
   1d3b0:	mov	r0, #1
   1d3b4:	mov	r2, r6
   1d3b8:	bl	2c88c <__assert_fail@plt+0x19ddc>
   1d3bc:	str	r0, [sp]
   1d3c0:	mov	r0, #1
   1d3c4:	mov	r1, #0
   1d3c8:	mov	r2, r5
   1d3cc:	mov	r3, r4
   1d3d0:	bl	1269c <error@plt>
   1d3d4:	movw	r1, #44844	; 0xaf2c
   1d3d8:	mov	r0, #0
   1d3dc:	mov	r2, #5
   1d3e0:	movt	r1, #4
   1d3e4:	bl	12564 <dcgettext@plt>
   1d3e8:	mov	r5, r0
   1d3ec:	movw	r0, #61044	; 0xee74
   1d3f0:	mov	r2, r4
   1d3f4:	movt	r0, #5
   1d3f8:	ldr	r1, [r0, #72]	; 0x48
   1d3fc:	mov	r0, #0
   1d400:	bl	2c88c <__assert_fail@plt+0x19ddc>
   1d404:	mov	r3, r0
   1d408:	mov	r0, #1
   1d40c:	mov	r1, #0
   1d410:	mov	r2, r5
   1d414:	bl	1269c <error@plt>
   1d418:	cdpcc	12, 4, cr12, cr12, cr13, {6}
   1d41c:	svccc	0x007d70a4
   1d420:	push	{fp, lr}
   1d424:	mov	fp, sp
   1d428:	movw	r0, #61044	; 0xee74
   1d42c:	mov	r1, #1
   1d430:	movt	r0, #5
   1d434:	strb	r1, [r0, #14]
   1d438:	movw	r1, #60636	; 0xecdc
   1d43c:	movt	r1, #5
   1d440:	ldr	r0, [r1]
   1d444:	cmp	r0, #0
   1d448:	bne	1d45c <__assert_fail@plt+0xa9ac>
   1d44c:	movw	r0, #46340	; 0xb504
   1d450:	movt	r0, #4
   1d454:	add	r0, r0, #1296	; 0x510
   1d458:	str	r0, [r1]
   1d45c:	bl	180b4 <__assert_fail@plt+0x5604>
   1d460:	mov	r1, #1065353216	; 0x3f800000
   1d464:	str	r1, [r0, #28]
   1d468:	mov	r1, #0
   1d46c:	strh	r1, [r0, #18]
   1d470:	mov	r0, #1
   1d474:	pop	{fp, pc}
   1d478:	push	{r4, r5, fp, lr}
   1d47c:	add	fp, sp, #8
   1d480:	mov	r3, r0
   1d484:	mov	r0, #0
   1d488:	cmp	r1, #0
   1d48c:	beq	1d4e4 <__assert_fail@plt+0xaa34>
   1d490:	ldr	r5, [r2]
   1d494:	ldr	r4, [r1, r5, lsl #2]
   1d498:	cmp	r4, #0
   1d49c:	beq	1d4e4 <__assert_fail@plt+0xaa34>
   1d4a0:	add	r0, r5, #1
   1d4a4:	mov	r1, r4
   1d4a8:	str	r0, [r2]
   1d4ac:	mov	r0, r3
   1d4b0:	bl	18054 <__assert_fail@plt+0x55a4>
   1d4b4:	movw	r1, #44940	; 0xaf8c
   1d4b8:	mov	r5, r0
   1d4bc:	str	r4, [r0, #40]	; 0x28
   1d4c0:	mov	r0, r4
   1d4c4:	movt	r1, #4
   1d4c8:	bl	129e4 <strpbrk@plt>
   1d4cc:	add	r1, pc, #20
   1d4d0:	cmp	r0, #0
   1d4d4:	addeq	r1, r1, #4
   1d4d8:	ldr	r0, [r1]
   1d4dc:	str	r0, [r5, #28]
   1d4e0:	mov	r0, #1
   1d4e4:	pop	{r4, r5, fp, pc}
   1d4e8:	stccc	7, cr13, [r3, #44]!	; 0x2c
   1d4ec:	stccc	7, cr13, [r3], #-44	; 0xffffffd4
   1d4f0:	push	{r4, r5, r6, sl, fp, lr}
   1d4f4:	add	fp, sp, #16
   1d4f8:	mov	r6, r2
   1d4fc:	mov	r4, r1
   1d500:	mov	r5, r0
   1d504:	bl	1f42c <__assert_fail@plt+0xc97c>
   1d508:	mov	r0, #0
   1d50c:	cmp	r4, #0
   1d510:	beq	1d588 <__assert_fail@plt+0xaad8>
   1d514:	ldr	r1, [r6]
   1d518:	ldr	r4, [r4, r1, lsl #2]
   1d51c:	cmp	r4, #0
   1d520:	beq	1d588 <__assert_fail@plt+0xaad8>
   1d524:	add	r0, r1, #1
   1d528:	movw	r1, #44951	; 0xaf97
   1d52c:	mov	r2, r4
   1d530:	str	r0, [r6]
   1d534:	movw	r0, #44944	; 0xaf90
   1d538:	movt	r1, #4
   1d53c:	movt	r0, #4
   1d540:	bl	1f4d4 <__assert_fail@plt+0xca24>
   1d544:	mov	r0, r5
   1d548:	mov	r1, r4
   1d54c:	bl	18054 <__assert_fail@plt+0x55a4>
   1d550:	movw	r1, #44940	; 0xaf8c
   1d554:	mov	r5, r0
   1d558:	str	r4, [r0, #40]	; 0x28
   1d55c:	mov	r0, #0
   1d560:	movt	r1, #4
   1d564:	strh	r0, [r5, #18]
   1d568:	mov	r0, r4
   1d56c:	bl	129e4 <strpbrk@plt>
   1d570:	add	r1, pc, #20
   1d574:	cmp	r0, #0
   1d578:	addeq	r1, r1, #4
   1d57c:	ldr	r0, [r1]
   1d580:	str	r0, [r5, #28]
   1d584:	mov	r0, #1
   1d588:	pop	{r4, r5, r6, sl, fp, pc}
   1d58c:	svccc	0x004ccccd
   1d590:	stclcc	12, cr12, [ip, #820]	; 0x334
   1d594:	push	{r4, sl, fp, lr}
   1d598:	add	fp, sp, #8
   1d59c:	mov	r4, r2
   1d5a0:	mov	r2, r0
   1d5a4:	mov	r0, r1
   1d5a8:	mov	r1, r4
   1d5ac:	bl	1f2d4 <__assert_fail@plt+0xc824>
   1d5b0:	cmp	r0, #0
   1d5b4:	beq	1d5dc <__assert_fail@plt+0xab2c>
   1d5b8:	movw	r2, #14269	; 0x37bd
   1d5bc:	mov	r1, r0
   1d5c0:	mov	r0, #1
   1d5c4:	movt	r2, #13702	; 0x3586
   1d5c8:	strb	r0, [r1, #20]
   1d5cc:	str	r2, [r1, #28]
   1d5d0:	mov	r2, #0
   1d5d4:	strh	r2, [r1, #18]
   1d5d8:	pop	{r4, sl, fp, pc}
   1d5dc:	ldr	r0, [r4]
   1d5e0:	sub	r0, r0, #1
   1d5e4:	str	r0, [r4]
   1d5e8:	mov	r0, #0
   1d5ec:	pop	{r4, sl, fp, pc}
   1d5f0:	push	{fp, lr}
   1d5f4:	mov	fp, sp
   1d5f8:	sub	sp, sp, #8
   1d5fc:	movw	r3, #17548	; 0x448c
   1d600:	movt	r3, #1
   1d604:	str	r3, [sp]
   1d608:	movw	r3, #43042	; 0xa822
   1d60c:	movt	r3, #4
   1d610:	bl	1f588 <__assert_fail@plt+0xcad8>
   1d614:	mov	sp, fp
   1d618:	pop	{fp, pc}
   1d61c:	mov	ip, r2
   1d620:	mov	r2, r0
   1d624:	movw	r0, #61044	; 0xee74
   1d628:	movt	r0, #5
   1d62c:	ldr	r0, [r0, #60]	; 0x3c
   1d630:	orr	r3, r0, #4194304	; 0x400000
   1d634:	mov	r0, r1
   1d638:	mov	r1, ip
   1d63c:	b	1f6c0 <__assert_fail@plt+0xcc10>
   1d640:	push	{fp, lr}
   1d644:	mov	fp, sp
   1d648:	sub	sp, sp, #8
   1d64c:	movw	r3, #17548	; 0x448c
   1d650:	movt	r3, #1
   1d654:	str	r3, [sp]
   1d658:	movw	r3, #44952	; 0xaf98
   1d65c:	movt	r3, #4
   1d660:	bl	1f588 <__assert_fail@plt+0xcad8>
   1d664:	mov	sp, fp
   1d668:	pop	{fp, pc}
   1d66c:	push	{r4, sl, fp, lr}
   1d670:	add	fp, sp, #8
   1d674:	mov	r4, r2
   1d678:	mov	r2, r0
   1d67c:	mov	r0, r1
   1d680:	mov	r1, r4
   1d684:	bl	1f2d4 <__assert_fail@plt+0xc824>
   1d688:	cmp	r0, #0
   1d68c:	beq	1d6b0 <__assert_fail@plt+0xac00>
   1d690:	ldr	r2, [r0, #48]	; 0x30
   1d694:	ldr	r1, [r0, #52]	; 0x34
   1d698:	eor	r3, r2, #1
   1d69c:	orrs	r3, r3, r1
   1d6a0:	bne	1d6c4 <__assert_fail@plt+0xac14>
   1d6a4:	movw	r1, #28836	; 0x70a4
   1d6a8:	movt	r1, #16253	; 0x3f7d
   1d6ac:	b	1d6e4 <__assert_fail@plt+0xac34>
   1d6b0:	ldr	r0, [r4]
   1d6b4:	sub	r0, r0, #1
   1d6b8:	str	r0, [r4]
   1d6bc:	mov	r0, #0
   1d6c0:	pop	{r4, sl, fp, pc}
   1d6c4:	eor	r2, r2, #2
   1d6c8:	orrs	r1, r2, r1
   1d6cc:	bne	1d6dc <__assert_fail@plt+0xac2c>
   1d6d0:	movw	r1, #55050	; 0xd70a
   1d6d4:	movt	r1, #15395	; 0x3c23
   1d6d8:	b	1d6e4 <__assert_fail@plt+0xac34>
   1d6dc:	movw	r1, #4719	; 0x126f
   1d6e0:	movt	r1, #14979	; 0x3a83
   1d6e4:	str	r1, [r0, #28]
   1d6e8:	mov	r0, #1
   1d6ec:	pop	{r4, sl, fp, pc}
   1d6f0:	push	{r4, r5, r6, sl, fp, lr}
   1d6f4:	add	fp, sp, #16
   1d6f8:	mov	r5, r2
   1d6fc:	mov	r6, r1
   1d700:	mov	r4, r0
   1d704:	bl	1f42c <__assert_fail@plt+0xc97c>
   1d708:	mov	r0, #0
   1d70c:	cmp	r6, #0
   1d710:	beq	1d768 <__assert_fail@plt+0xacb8>
   1d714:	ldr	r1, [r5]
   1d718:	ldr	r6, [r6, r1, lsl #2]
   1d71c:	cmp	r6, #0
   1d720:	beq	1d768 <__assert_fail@plt+0xacb8>
   1d724:	add	r0, r1, #1
   1d728:	mov	r1, r6
   1d72c:	str	r0, [r5]
   1d730:	mov	r0, r4
   1d734:	bl	18054 <__assert_fail@plt+0x55a4>
   1d738:	movw	r1, #44940	; 0xaf8c
   1d73c:	mov	r4, r0
   1d740:	str	r6, [r0, #40]	; 0x28
   1d744:	mov	r0, r6
   1d748:	movt	r1, #4
   1d74c:	bl	129e4 <strpbrk@plt>
   1d750:	add	r1, pc, #20
   1d754:	cmp	r0, #0
   1d758:	addeq	r1, r1, #4
   1d75c:	ldr	r0, [r1]
   1d760:	str	r0, [r4, #28]
   1d764:	mov	r0, #1
   1d768:	pop	{r4, r5, r6, sl, fp, pc}
   1d76c:	stccc	7, cr13, [r3, #44]!	; 0x2c
   1d770:	stccc	7, cr13, [r3], #-44	; 0xffffffd4
   1d774:	push	{r4, sl, fp, lr}
   1d778:	add	fp, sp, #8
   1d77c:	bl	180b4 <__assert_fail@plt+0x5604>
   1d780:	mov	r4, r0
   1d784:	add	r1, r0, #40	; 0x28
   1d788:	movw	r0, #44636	; 0xae5c
   1d78c:	movt	r0, #4
   1d790:	bl	1f1e4 <__assert_fail@plt+0xc734>
   1d794:	mov	r0, #1065353216	; 0x3f800000
   1d798:	str	r0, [r4, #28]
   1d79c:	movw	r0, #257	; 0x101
   1d7a0:	strh	r0, [r4, #16]
   1d7a4:	mov	r0, #1
   1d7a8:	pop	{r4, sl, fp, pc}
   1d7ac:	mov	r0, r1
   1d7b0:	movw	r1, #61044	; 0xee74
   1d7b4:	mov	r3, r2
   1d7b8:	movt	r1, #5
   1d7bc:	add	r2, r1, #4
   1d7c0:	mov	r1, r3
   1d7c4:	b	1f7f8 <__assert_fail@plt+0xcd48>
   1d7c8:	mov	r0, r1
   1d7cc:	movw	r1, #61044	; 0xee74
   1d7d0:	mov	r3, r2
   1d7d4:	movt	r1, #5
   1d7d8:	add	r2, r1, #8
   1d7dc:	mov	r1, r3
   1d7e0:	b	1f7f8 <__assert_fail@plt+0xcd48>
   1d7e4:	nop	{0}
   1d7e8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1d7ec:	add	fp, sp, #28
   1d7f0:	sub	sp, sp, #28
   1d7f4:	mov	r4, #0
   1d7f8:	cmp	r1, #0
   1d7fc:	beq	1d8d0 <__assert_fail@plt+0xae20>
   1d800:	ldr	r9, [r2]
   1d804:	mov	r5, r2
   1d808:	ldr	r7, [r1, r9, lsl #2]
   1d80c:	cmp	r7, #0
   1d810:	beq	1d8d0 <__assert_fail@plt+0xae20>
   1d814:	movw	sl, #61044	; 0xee74
   1d818:	movw	r1, #43233	; 0xa8e1
   1d81c:	mov	r8, r0
   1d820:	add	r0, r9, #1
   1d824:	vldr	d0, [pc, #180]	; 1d8e0 <__assert_fail@plt+0xae30>
   1d828:	add	r6, sp, #8
   1d82c:	movt	sl, #5
   1d830:	str	r0, [r5]
   1d834:	mov	r0, #3
   1d838:	movt	r1, #4
   1d83c:	str	r0, [sp, #8]
   1d840:	ldr	r0, [sl, #28]
   1d844:	str	r1, [sp]
   1d848:	movw	r1, #20864	; 0x5180
   1d84c:	ldr	r3, [sl, #32]
   1d850:	movt	r1, #1
   1d854:	add	r2, r0, r1
   1d858:	mov	r0, r7
   1d85c:	mov	r1, r6
   1d860:	bl	1ea10 <__assert_fail@plt+0xbf60>
   1d864:	cmp	r0, #0
   1d868:	beq	1d8cc <__assert_fail@plt+0xae1c>
   1d86c:	mov	r0, r8
   1d870:	mov	r1, r7
   1d874:	bl	18054 <__assert_fail@plt+0x55a4>
   1d878:	mov	r1, #8
   1d87c:	movw	r3, #10111	; 0x277f
   1d880:	vldr	s0, [pc, #104]	; 1d8f0 <__assert_fail@plt+0xae40>
   1d884:	mov	r4, #1
   1d888:	vld1.64	{d16-d17}, [r6], r1
   1d88c:	add	r1, r0, #40	; 0x28
   1d890:	movt	r3, #133	; 0x85
   1d894:	vst1.64	{d16-d17}, [r1]
   1d898:	ldr	r1, [r6]
   1d89c:	ldr	r2, [sl, #28]
   1d8a0:	sub	r1, r2, r1
   1d8a4:	add	r2, pc, #60	; 0x3c
   1d8a8:	cmp	r1, r3
   1d8ac:	addgt	r2, r2, #4
   1d8b0:	vldr	s2, [r2]
   1d8b4:	movw	r2, #20864	; 0x5180
   1d8b8:	movt	r2, #1
   1d8bc:	cmp	r1, r2
   1d8c0:	vselge.f32	s0, s2, s0
   1d8c4:	vstr	s0, [r0, #28]
   1d8c8:	b	1d8d0 <__assert_fail@plt+0xae20>
   1d8cc:	str	r9, [r5]
   1d8d0:	mov	r0, r4
   1d8d4:	sub	sp, fp, #28
   1d8d8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1d8dc:	nop	{0}
   1d8e0:	andeq	r0, r0, r0
   1d8e4:	submi	r0, lr, r0
   1d8e8:	mcrcc	14, 6, sl, cr7, cr4, {0}
   1d8ec:			; <UNDEFINED> instruction: 0x3e99999a
   1d8f0:	stccc	7, cr13, [r3], #-40	; 0xffffffd8
   1d8f4:	push	{fp, lr}
   1d8f8:	mov	fp, sp
   1d8fc:	movw	r0, #61044	; 0xee74
   1d900:	mov	r1, #1
   1d904:	movt	r0, #5
   1d908:	strb	r1, [r0, #13]
   1d90c:	movw	r1, #60636	; 0xecdc
   1d910:	movt	r1, #5
   1d914:	ldr	r0, [r1]
   1d918:	cmp	r0, #0
   1d91c:	bne	1d930 <__assert_fail@plt+0xae80>
   1d920:	movw	r0, #46340	; 0xb504
   1d924:	movt	r0, #4
   1d928:	add	r0, r0, #1296	; 0x510
   1d92c:	str	r0, [r1]
   1d930:	bl	180b4 <__assert_fail@plt+0x5604>
   1d934:	mov	r1, #1065353216	; 0x3f800000
   1d938:	str	r1, [r0, #28]
   1d93c:	mov	r1, #0
   1d940:	strh	r1, [r0, #18]
   1d944:	mov	r0, #1
   1d948:	pop	{fp, pc}
   1d94c:	push	{r4, r5, fp, lr}
   1d950:	add	fp, sp, #8
   1d954:	mov	r5, r0
   1d958:	mov	r0, #0
   1d95c:	cmp	r1, #0
   1d960:	beq	1d9dc <__assert_fail@plt+0xaf2c>
   1d964:	ldr	r3, [r2]
   1d968:	ldr	r4, [r1, r3, lsl #2]
   1d96c:	cmp	r4, #0
   1d970:	beq	1d9dc <__assert_fail@plt+0xaf2c>
   1d974:	add	r0, r3, #1
   1d978:	str	r0, [r2]
   1d97c:	bl	1f42c <__assert_fail@plt+0xc97c>
   1d980:	movw	r0, #45377	; 0xb141
   1d984:	movw	r1, #45383	; 0xb147
   1d988:	mov	r2, r4
   1d98c:	movt	r0, #4
   1d990:	movt	r1, #4
   1d994:	bl	1f4d4 <__assert_fail@plt+0xca24>
   1d998:	mov	r0, r5
   1d99c:	mov	r1, r4
   1d9a0:	bl	18054 <__assert_fail@plt+0x55a4>
   1d9a4:	movw	r1, #44940	; 0xaf8c
   1d9a8:	mov	r5, r0
   1d9ac:	str	r4, [r0, #40]	; 0x28
   1d9b0:	mov	r0, #0
   1d9b4:	movt	r1, #4
   1d9b8:	strh	r0, [r5, #18]
   1d9bc:	mov	r0, r4
   1d9c0:	bl	129e4 <strpbrk@plt>
   1d9c4:	add	r1, pc, #20
   1d9c8:	cmp	r0, #0
   1d9cc:	addeq	r1, r1, #4
   1d9d0:	ldr	r0, [r1]
   1d9d4:	str	r0, [r5, #28]
   1d9d8:	mov	r0, #1
   1d9dc:	pop	{r4, r5, fp, pc}
   1d9e0:	svccc	0x004ccccd
   1d9e4:	stclcc	12, cr12, [ip, #820]	; 0x334
   1d9e8:	push	{r4, r5, r6, sl, fp, lr}
   1d9ec:	add	fp, sp, #16
   1d9f0:	sub	sp, sp, #104	; 0x68
   1d9f4:	mov	r4, r0
   1d9f8:	mov	r0, sp
   1d9fc:	mov	r6, r2
   1da00:	mov	r5, r1
   1da04:	bl	184fc <__assert_fail@plt+0x5a4c>
   1da08:	mov	r0, #0
   1da0c:	cmp	r5, #0
   1da10:	beq	1dab8 <__assert_fail@plt+0xb008>
   1da14:	ldr	r1, [r6]
   1da18:	ldr	r5, [r5, r1, lsl #2]
   1da1c:	cmp	r5, #0
   1da20:	beq	1dab8 <__assert_fail@plt+0xb008>
   1da24:	add	r0, r1, #1
   1da28:	mov	r1, sp
   1da2c:	str	r0, [r6]
   1da30:	movw	r6, #61044	; 0xee74
   1da34:	mov	r0, r5
   1da38:	movt	r6, #5
   1da3c:	ldr	r2, [r6, #52]	; 0x34
   1da40:	blx	r2
   1da44:	cmp	r0, #0
   1da48:	bne	1dac0 <__assert_fail@plt+0xb010>
   1da4c:	mov	r0, r4
   1da50:	mov	r1, r5
   1da54:	bl	18054 <__assert_fail@plt+0x55a4>
   1da58:	ldr	r1, [sp, #80]	; 0x50
   1da5c:	ldr	r2, [sp, #84]	; 0x54
   1da60:	mov	r3, #3
   1da64:	mov	r5, #0
   1da68:	vldr	s0, [pc, #104]	; 1dad8 <__assert_fail@plt+0xb028>
   1da6c:	str	r3, [r0, #40]	; 0x28
   1da70:	str	r5, [r0, #44]	; 0x2c
   1da74:	movw	r3, #10111	; 0x277f
   1da78:	movt	r3, #133	; 0x85
   1da7c:	str	r1, [r0, #48]	; 0x30
   1da80:	str	r2, [r0, #52]	; 0x34
   1da84:	ldr	r1, [r6, #28]
   1da88:	ldr	r2, [sp, #80]	; 0x50
   1da8c:	sub	r1, r1, r2
   1da90:	add	r2, pc, #56	; 0x38
   1da94:	cmp	r1, r3
   1da98:	addgt	r2, r2, #4
   1da9c:	vldr	s2, [r2]
   1daa0:	movw	r2, #20864	; 0x5180
   1daa4:	movt	r2, #1
   1daa8:	cmp	r1, r2
   1daac:	vselge.f32	s0, s2, s0
   1dab0:	vstr	s0, [r0, #28]
   1dab4:	mov	r0, #1
   1dab8:	sub	sp, fp, #16
   1dabc:	pop	{r4, r5, r6, sl, fp, pc}
   1dac0:	bl	12804 <__errno_location@plt>
   1dac4:	ldr	r0, [r0]
   1dac8:	mov	r1, r5
   1dacc:	bl	199e8 <__assert_fail@plt+0x6f38>
   1dad0:	mcrcc	14, 6, sl, cr7, cr4, {0}
   1dad4:			; <UNDEFINED> instruction: 0x3e99999a
   1dad8:	stccc	7, cr13, [r3], #-40	; 0xffffffd8
   1dadc:	push	{fp, lr}
   1dae0:	mov	fp, sp
   1dae4:	movw	r0, #61044	; 0xee74
   1dae8:	mov	r1, #1
   1daec:	movt	r0, #5
   1daf0:	strb	r1, [r0, #12]
   1daf4:	movw	r1, #60636	; 0xecdc
   1daf8:	movt	r1, #5
   1dafc:	ldr	r0, [r1]
   1db00:	cmp	r0, #0
   1db04:	bne	1db18 <__assert_fail@plt+0xb068>
   1db08:	movw	r0, #46340	; 0xb504
   1db0c:	movt	r0, #4
   1db10:	add	r0, r0, #1296	; 0x510
   1db14:	str	r0, [r1]
   1db18:	bl	180b4 <__assert_fail@plt+0x5604>
   1db1c:	mov	r1, #1065353216	; 0x3f800000
   1db20:	str	r1, [r0, #28]
   1db24:	mov	r1, #0
   1db28:	strh	r1, [r0, #18]
   1db2c:	mov	r0, #1
   1db30:	pop	{fp, pc}
   1db34:	push	{fp, lr}
   1db38:	mov	fp, sp
   1db3c:	mov	r1, #0
   1db40:	bl	18054 <__assert_fail@plt+0x55a4>
   1db44:	movw	r1, #46871	; 0xb717
   1db48:	movt	r1, #14545	; 0x38d1
   1db4c:	str	r1, [r0, #28]
   1db50:	mov	r0, #1
   1db54:	pop	{fp, pc}
   1db58:	push	{fp, lr}
   1db5c:	mov	fp, sp
   1db60:	bl	180b4 <__assert_fail@plt+0x5604>
   1db64:	movw	r1, #4719	; 0x126f
   1db68:	movt	r1, #14979	; 0x3a83
   1db6c:	str	r1, [r0, #28]
   1db70:	mov	r0, #1
   1db74:	pop	{fp, pc}
   1db78:	push	{r4, sl, fp, lr}
   1db7c:	add	fp, sp, #8
   1db80:	movw	r0, #61044	; 0xee74
   1db84:	movw	r1, #60636	; 0xecdc
   1db88:	mov	r4, #0
   1db8c:	movt	r0, #5
   1db90:	movt	r1, #5
   1db94:	strb	r4, [r0, #14]
   1db98:	ldr	r0, [r1]
   1db9c:	cmp	r0, #0
   1dba0:	bne	1dbb4 <__assert_fail@plt+0xb104>
   1dba4:	movw	r0, #46340	; 0xb504
   1dba8:	movt	r0, #4
   1dbac:	add	r0, r0, #1296	; 0x510
   1dbb0:	str	r0, [r1]
   1dbb4:	bl	180b4 <__assert_fail@plt+0x5604>
   1dbb8:	mov	r1, #1065353216	; 0x3f800000
   1dbbc:	str	r1, [r0, #28]
   1dbc0:	strh	r4, [r0, #18]
   1dbc4:	mov	r0, #1
   1dbc8:	pop	{r4, sl, fp, pc}
   1dbcc:	push	{r4, sl, fp, lr}
   1dbd0:	add	fp, sp, #8
   1dbd4:	movw	r0, #61044	; 0xee74
   1dbd8:	movw	r1, #60636	; 0xecdc
   1dbdc:	mov	r4, #0
   1dbe0:	movt	r0, #5
   1dbe4:	movt	r1, #5
   1dbe8:	strb	r4, [r0, #16]
   1dbec:	ldr	r0, [r1]
   1dbf0:	cmp	r0, #0
   1dbf4:	bne	1dc08 <__assert_fail@plt+0xb158>
   1dbf8:	movw	r0, #46340	; 0xb504
   1dbfc:	movt	r0, #4
   1dc00:	add	r0, r0, #1296	; 0x510
   1dc04:	str	r0, [r1]
   1dc08:	bl	180b4 <__assert_fail@plt+0x5604>
   1dc0c:	mov	r1, #1065353216	; 0x3f800000
   1dc10:	str	r1, [r0, #28]
   1dc14:	strh	r4, [r0, #18]
   1dc18:	mov	r0, #1
   1dc1c:	pop	{r4, sl, fp, pc}
   1dc20:	push	{fp, lr}
   1dc24:	mov	fp, sp
   1dc28:	movw	r0, #61044	; 0xee74
   1dc2c:	mov	r1, #1
   1dc30:	movt	r0, #5
   1dc34:	strb	r1, [r0, #16]
   1dc38:	movw	r1, #60636	; 0xecdc
   1dc3c:	movt	r1, #5
   1dc40:	ldr	r0, [r1]
   1dc44:	cmp	r0, #0
   1dc48:	bne	1dc5c <__assert_fail@plt+0xb1ac>
   1dc4c:	movw	r0, #46340	; 0xb504
   1dc50:	movt	r0, #4
   1dc54:	add	r0, r0, #1296	; 0x510
   1dc58:	str	r0, [r1]
   1dc5c:	bl	180b4 <__assert_fail@plt+0x5604>
   1dc60:	mov	r1, #1065353216	; 0x3f800000
   1dc64:	str	r1, [r0, #28]
   1dc68:	mov	r1, #0
   1dc6c:	strh	r1, [r0, #18]
   1dc70:	mov	r0, #1
   1dc74:	pop	{fp, pc}
   1dc78:	push	{fp, lr}
   1dc7c:	mov	fp, sp
   1dc80:	bl	17ae4 <__assert_fail@plt+0x5034>
   1dc84:	mov	r2, #3
   1dc88:	mov	r1, #2
   1dc8c:	str	r2, [r0, #8]
   1dc90:	str	r1, [r0, #12]
   1dc94:	movw	r1, #18876	; 0x49bc
   1dc98:	movt	r1, #1
   1dc9c:	str	r1, [r0]
   1dca0:	mov	r1, #0
   1dca4:	strh	r1, [r0, #18]
   1dca8:	mov	r0, #1
   1dcac:	pop	{fp, pc}
   1dcb0:	mov	r3, r2
   1dcb4:	mov	r2, r1
   1dcb8:	mov	r1, r0
   1dcbc:	movw	r0, #33464	; 0x82b8
   1dcc0:	movt	r0, #4
   1dcc4:	b	1eb80 <__assert_fail@plt+0xc0d0>
   1dcc8:	mov	r3, r2
   1dccc:	mov	r2, r1
   1dcd0:	mov	r1, r0
   1dcd4:	movw	r0, #31084	; 0x796c
   1dcd8:	movt	r0, #4
   1dcdc:	b	1eb80 <__assert_fail@plt+0xc0d0>
   1dce0:	push	{fp, lr}
   1dce4:	mov	fp, sp
   1dce8:	sub	sp, sp, #8
   1dcec:	movw	r3, #18956	; 0x4a0c
   1dcf0:	movt	r3, #1
   1dcf4:	str	r3, [sp]
   1dcf8:	movw	r3, #43043	; 0xa823
   1dcfc:	movt	r3, #4
   1dd00:	bl	1f588 <__assert_fail@plt+0xcad8>
   1dd04:	mov	sp, fp
   1dd08:	pop	{fp, pc}
   1dd0c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1dd10:	add	fp, sp, #28
   1dd14:	sub	sp, sp, #4
   1dd18:	vpush	{d8}
   1dd1c:	sub	sp, sp, #8
   1dd20:	mov	r6, #0
   1dd24:	cmp	r1, #0
   1dd28:	beq	1de5c <__assert_fail@plt+0xb3ac>
   1dd2c:	mov	r8, r0
   1dd30:	ldr	r0, [r2]
   1dd34:	ldr	r4, [r1, r0, lsl #2]
   1dd38:	cmp	r4, #0
   1dd3c:	beq	1de5c <__assert_fail@plt+0xb3ac>
   1dd40:	add	r0, r0, #1
   1dd44:	str	r0, [r2]
   1dd48:	ldrb	r0, [r4]
   1dd4c:	cmp	r0, #45	; 0x2d
   1dd50:	beq	1dd6c <__assert_fail@plt+0xb2bc>
   1dd54:	cmp	r0, #47	; 0x2f
   1dd58:	bne	1dd7c <__assert_fail@plt+0xb2cc>
   1dd5c:	vldr	s16, [pc, #340]	; 1deb8 <__assert_fail@plt+0xb408>
   1dd60:	mov	r0, #1
   1dd64:	mov	sl, #1
   1dd68:	b	1dd88 <__assert_fail@plt+0xb2d8>
   1dd6c:	vldr	s16, [pc, #320]	; 1deb4 <__assert_fail@plt+0xb404>
   1dd70:	mov	sl, #0
   1dd74:	mov	r0, #1
   1dd78:	b	1dd88 <__assert_fail@plt+0xb2d8>
   1dd7c:	vldr	s16, [pc, #312]	; 1debc <__assert_fail@plt+0xb40c>
   1dd80:	mov	sl, #2
   1dd84:	mov	r0, #0
   1dd88:	add	r0, r4, r0
   1dd8c:	bl	26054 <__assert_fail@plt+0x135a4>
   1dd90:	cmp	r0, #0
   1dd94:	beq	1de70 <__assert_fail@plt+0xb3c0>
   1dd98:	mov	r7, r0
   1dd9c:	ldrb	r0, [r4]
   1dda0:	cmp	r0, #43	; 0x2b
   1dda4:	bne	1ddb8 <__assert_fail@plt+0xb308>
   1dda8:	ldrb	r0, [r4, #1]
   1ddac:	and	r0, r0, #248	; 0xf8
   1ddb0:	cmp	r0, #48	; 0x30
   1ddb4:	beq	1de70 <__assert_fail@plt+0xb3c0>
   1ddb8:	mov	r5, #0
   1ddbc:	mov	r0, #0
   1ddc0:	mov	r1, #0
   1ddc4:	mov	r2, #0
   1ddc8:	mov	r3, r7
   1ddcc:	str	r5, [sp]
   1ddd0:	bl	264e8 <__assert_fail@plt+0x13a38>
   1ddd4:	mov	r9, r0
   1ddd8:	mov	r0, #0
   1dddc:	mov	r1, #1
   1dde0:	mov	r2, #0
   1dde4:	mov	r3, r7
   1dde8:	str	r5, [sp]
   1ddec:	mov	r6, #1
   1ddf0:	bl	264e8 <__assert_fail@plt+0x13a38>
   1ddf4:	mov	r5, r0
   1ddf8:	mov	r0, r7
   1ddfc:	bl	30174 <__assert_fail@plt+0x1d6c4>
   1de00:	orrs	r0, r5, r9
   1de04:	ldrbeq	r0, [r4]
   1de08:	cmpeq	r0, #47	; 0x2f
   1de0c:	bne	1de40 <__assert_fail@plt+0xb390>
   1de10:	movw	r1, #45410	; 0xb162
   1de14:	mov	r0, #0
   1de18:	mov	r2, #5
   1de1c:	mov	sl, #0
   1de20:	movt	r1, #4
   1de24:	bl	12564 <dcgettext@plt>
   1de28:	mov	r2, r0
   1de2c:	mov	r0, #0
   1de30:	mov	r1, #0
   1de34:	mov	r3, r4
   1de38:	bl	1269c <error@plt>
   1de3c:	vldr	s16, [pc, #124]	; 1dec0 <__assert_fail@plt+0xb410>
   1de40:	mov	r0, r8
   1de44:	mov	r1, r4
   1de48:	bl	18054 <__assert_fail@plt+0x55a4>
   1de4c:	str	sl, [r0, #40]	; 0x28
   1de50:	str	r9, [r0, #44]	; 0x2c
   1de54:	str	r5, [r0, #48]	; 0x30
   1de58:	vstr	s16, [r0, #28]
   1de5c:	mov	r0, r6
   1de60:	sub	sp, fp, #40	; 0x28
   1de64:	vpop	{d8}
   1de68:	add	sp, sp, #4
   1de6c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1de70:	movw	r1, #45394	; 0xb152
   1de74:	mov	r0, #0
   1de78:	mov	r2, #5
   1de7c:	movt	r1, #4
   1de80:	bl	12564 <dcgettext@plt>
   1de84:	mov	r5, r0
   1de88:	movw	r0, #61044	; 0xee74
   1de8c:	mov	r2, r4
   1de90:	movt	r0, #5
   1de94:	ldr	r1, [r0, #72]	; 0x48
   1de98:	mov	r0, #0
   1de9c:	bl	2c88c <__assert_fail@plt+0x19ddc>
   1dea0:	mov	r3, r0
   1dea4:	mov	r0, #1
   1dea8:	mov	r1, #0
   1deac:	mov	r2, r5
   1deb0:	bl	1269c <error@plt>
   1deb4:	cdpcc	12, 4, cr12, cr12, cr13, {6}
   1deb8:			; <UNDEFINED> instruction: 0x3e99999a
   1debc:	stccc	7, cr13, [r3], #-40	; 0xffffffd8
   1dec0:	svccc	0x007fa440
   1dec4:	push	{r4, r5, fp, lr}
   1dec8:	add	fp, sp, #8
   1decc:	mov	r1, #0
   1ded0:	mov	r5, #0
   1ded4:	bl	18054 <__assert_fail@plt+0x55a4>
   1ded8:	mov	r4, r0
   1dedc:	add	r1, r0, #40	; 0x28
   1dee0:	movw	r0, #44636	; 0xae5c
   1dee4:	movt	r0, #4
   1dee8:	bl	1f1e4 <__assert_fail@plt+0xc734>
   1deec:	mov	r0, #1
   1def0:	strb	r5, [r4, #19]
   1def4:	strb	r0, [r4, #16]
   1def8:	strh	r0, [r4, #17]
   1defc:	mov	r0, #1065353216	; 0x3f800000
   1df00:	str	r0, [r4, #28]
   1df04:	mov	r0, #1
   1df08:	pop	{r4, r5, fp, pc}
   1df0c:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   1df10:	add	fp, sp, #24
   1df14:	sub	sp, sp, #24
   1df18:	mov	r5, r0
   1df1c:	mov	r0, #0
   1df20:	cmp	r1, #0
   1df24:	beq	1df7c <__assert_fail@plt+0xb4cc>
   1df28:	ldr	r7, [r2]
   1df2c:	mov	r4, r2
   1df30:	ldr	r6, [r1, r7, lsl #2]
   1df34:	cmp	r6, #0
   1df38:	beq	1df7c <__assert_fail@plt+0xb4cc>
   1df3c:	add	r0, r7, #1
   1df40:	add	r8, sp, #4
   1df44:	str	r0, [r4]
   1df48:	movw	r0, #44636	; 0xae5c
   1df4c:	mov	r1, r8
   1df50:	movt	r0, #4
   1df54:	bl	1f1e4 <__assert_fail@plt+0xc734>
   1df58:	mov	r0, r8
   1df5c:	mov	r1, r5
   1df60:	mov	r2, r6
   1df64:	bl	1a108 <__assert_fail@plt+0x7658>
   1df68:	mov	r1, r0
   1df6c:	mov	r0, #1
   1df70:	cmp	r1, #0
   1df74:	moveq	r0, #0
   1df78:	streq	r7, [r4]
   1df7c:	sub	sp, fp, #24
   1df80:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   1df84:	push	{fp, lr}
   1df88:	mov	fp, sp
   1df8c:	bl	180b4 <__assert_fail@plt+0x5604>
   1df90:	movw	r1, #61044	; 0xee74
   1df94:	movt	r1, #5
   1df98:	ldrb	r1, [r1]
   1df9c:	cmp	r1, #0
   1dfa0:	moveq	r1, #0
   1dfa4:	strheq	r1, [r0, #18]
   1dfa8:	mov	r1, #1
   1dfac:	strh	r1, [r0, #16]
   1dfb0:	mov	r0, #1
   1dfb4:	pop	{fp, pc}
   1dfb8:	push	{fp, lr}
   1dfbc:	mov	fp, sp
   1dfc0:	bl	180b4 <__assert_fail@plt+0x5604>
   1dfc4:	mov	r1, #1065353216	; 0x3f800000
   1dfc8:	str	r1, [r0, #28]
   1dfcc:	mov	r1, #1
   1dfd0:	str	r1, [r0, #16]
   1dfd4:	mov	r0, #1
   1dfd8:	pop	{fp, pc}
   1dfdc:	mov	ip, r2
   1dfe0:	mov	r2, r0
   1dfe4:	movw	r0, #61044	; 0xee74
   1dfe8:	movt	r0, #5
   1dfec:	ldr	r3, [r0, #60]	; 0x3c
   1dff0:	mov	r0, r1
   1dff4:	mov	r1, ip
   1dff8:	b	1f6c0 <__assert_fail@plt+0xcc10>
   1dffc:	push	{fp, lr}
   1e000:	mov	fp, sp
   1e004:	mov	r0, #0
   1e008:	cmp	r1, #0
   1e00c:	beq	1e078 <__assert_fail@plt+0xb5c8>
   1e010:	ldr	r3, [r2]
   1e014:	ldr	r1, [r1, r3, lsl #2]
   1e018:	cmp	r1, #0
   1e01c:	popeq	{fp, pc}
   1e020:	add	r0, r3, #1
   1e024:	str	r0, [r2]
   1e028:	mov	r0, r1
   1e02c:	bl	22010 <__assert_fail@plt+0xf560>
   1e030:	movw	r1, #61044	; 0xee74
   1e034:	movt	r1, #5
   1e038:	str	r0, [r1, #60]	; 0x3c
   1e03c:	movw	r1, #60636	; 0xecdc
   1e040:	movt	r1, #5
   1e044:	ldr	r0, [r1]
   1e048:	cmp	r0, #0
   1e04c:	bne	1e060 <__assert_fail@plt+0xb5b0>
   1e050:	movw	r0, #46340	; 0xb504
   1e054:	movt	r0, #4
   1e058:	add	r0, r0, #1296	; 0x510
   1e05c:	str	r0, [r1]
   1e060:	bl	180b4 <__assert_fail@plt+0x5604>
   1e064:	mov	r1, #1065353216	; 0x3f800000
   1e068:	str	r1, [r0, #28]
   1e06c:	mov	r1, #0
   1e070:	strh	r1, [r0, #18]
   1e074:	mov	r0, #1
   1e078:	pop	{fp, pc}
   1e07c:	push	{r4, r5, r6, r7, fp, lr}
   1e080:	add	fp, sp, #16
   1e084:	sub	sp, sp, #208	; 0xd0
   1e088:	mov	r5, r0
   1e08c:	add	r0, sp, #104	; 0x68
   1e090:	mov	r6, r2
   1e094:	mov	r4, r1
   1e098:	bl	184fc <__assert_fail@plt+0x5a4c>
   1e09c:	mov	r0, #0
   1e0a0:	cmp	r4, #0
   1e0a4:	beq	1e22c <__assert_fail@plt+0xb77c>
   1e0a8:	ldr	r1, [r6]
   1e0ac:	ldr	r4, [r4, r1, lsl #2]
   1e0b0:	cmp	r4, #0
   1e0b4:	beq	1e22c <__assert_fail@plt+0xb77c>
   1e0b8:	movw	r7, #61044	; 0xee74
   1e0bc:	add	r0, r1, #1
   1e0c0:	add	r1, sp, #104	; 0x68
   1e0c4:	movt	r7, #5
   1e0c8:	str	r0, [r6]
   1e0cc:	mov	r0, r4
   1e0d0:	ldr	r2, [r7, #52]	; 0x34
   1e0d4:	blx	r2
   1e0d8:	cmp	r0, #0
   1e0dc:	bne	1e234 <__assert_fail@plt+0xb784>
   1e0e0:	mov	r0, sp
   1e0e4:	bl	184fc <__assert_fail@plt+0x5a4c>
   1e0e8:	ldr	r0, [r7, #48]	; 0x30
   1e0ec:	mov	r1, #0
   1e0f0:	cmp	r0, #0
   1e0f4:	bne	1e120 <__assert_fail@plt+0xb670>
   1e0f8:	ldrb	r0, [r7, #56]	; 0x38
   1e0fc:	mov	r1, #32768	; 0x8000
   1e100:	cmp	r0, #0
   1e104:	bne	1e120 <__assert_fail@plt+0xb670>
   1e108:	ldr	r0, [sp, #120]	; 0x78
   1e10c:	mvn	r6, #1
   1e110:	mov	r1, #0
   1e114:	and	r0, r0, #61440	; 0xf000
   1e118:	cmp	r0, #40960	; 0xa000
   1e11c:	beq	1e1e4 <__assert_fail@plt+0xb734>
   1e120:	mov	r0, r4
   1e124:	bl	20e10 <__assert_fail@plt+0xe360>
   1e128:	mov	r6, r0
   1e12c:	cmp	r0, #0
   1e130:	bmi	1e1e4 <__assert_fail@plt+0xb734>
   1e134:	mov	r2, sp
   1e138:	mov	r0, #3
   1e13c:	mov	r1, r6
   1e140:	bl	1260c <__fxstat64@plt>
   1e144:	cmp	r0, #0
   1e148:	bne	1e234 <__assert_fail@plt+0xb784>
   1e14c:	ldr	r2, [r7, #52]	; 0x34
   1e150:	add	r1, sp, #104	; 0x68
   1e154:	mov	r0, r4
   1e158:	blx	r2
   1e15c:	cmp	r0, #0
   1e160:	bne	1e234 <__assert_fail@plt+0xb784>
   1e164:	ldr	r0, [r7, #48]	; 0x30
   1e168:	cmp	r0, #0
   1e16c:	ldrbeq	r0, [r7, #56]	; 0x38
   1e170:	cmpeq	r0, #0
   1e174:	beq	1e18c <__assert_fail@plt+0xb6dc>
   1e178:	add	r0, sp, #104	; 0x68
   1e17c:	mov	r1, sp
   1e180:	mov	r2, #104	; 0x68
   1e184:	bl	124e0 <memcpy@plt>
   1e188:	b	1e1e4 <__assert_fail@plt+0xb734>
   1e18c:	ldr	r0, [sp, #120]	; 0x78
   1e190:	and	r0, r0, #61440	; 0xf000
   1e194:	cmp	r0, #40960	; 0xa000
   1e198:	beq	1e1d8 <__assert_fail@plt+0xb728>
   1e19c:	ldr	r2, [sp, #104]	; 0x68
   1e1a0:	ldr	r3, [sp, #108]	; 0x6c
   1e1a4:	ldm	sp, {r0, r1}
   1e1a8:	eor	r1, r3, r1
   1e1ac:	eor	r0, r2, r0
   1e1b0:	orrs	r0, r0, r1
   1e1b4:	bne	1e1d8 <__assert_fail@plt+0xb728>
   1e1b8:	ldr	r0, [sp, #96]	; 0x60
   1e1bc:	ldr	r2, [sp, #200]	; 0xc8
   1e1c0:	ldr	r1, [sp, #100]	; 0x64
   1e1c4:	ldr	r3, [sp, #204]	; 0xcc
   1e1c8:	eor	r1, r3, r1
   1e1cc:	eor	r0, r2, r0
   1e1d0:	orrs	r0, r0, r1
   1e1d4:	beq	1e1e4 <__assert_fail@plt+0xb734>
   1e1d8:	mov	r0, r6
   1e1dc:	bl	12a68 <close@plt>
   1e1e0:	mvn	r6, #0
   1e1e4:	mov	r0, r5
   1e1e8:	mov	r1, r4
   1e1ec:	bl	18054 <__assert_fail@plt+0x55a4>
   1e1f0:	mov	r1, r0
   1e1f4:	ldr	r0, [sp, #200]	; 0xc8
   1e1f8:	ldr	r2, [sp, #204]	; 0xcc
   1e1fc:	movw	r7, #55050	; 0xd70a
   1e200:	movt	r7, #15395	; 0x3c23
   1e204:	str	r0, [r1, #40]	; 0x28
   1e208:	str	r2, [r1, #44]	; 0x2c
   1e20c:	mov	r0, #1
   1e210:	ldr	r2, [sp, #104]	; 0x68
   1e214:	ldr	r3, [sp, #108]	; 0x6c
   1e218:	str	r6, [r1, #56]	; 0x38
   1e21c:	strh	r0, [r1, #18]
   1e220:	str	r7, [r1, #28]
   1e224:	str	r2, [r1, #48]	; 0x30
   1e228:	str	r3, [r1, #52]	; 0x34
   1e22c:	sub	sp, fp, #16
   1e230:	pop	{r4, r5, r6, r7, fp, pc}
   1e234:	bl	12804 <__errno_location@plt>
   1e238:	ldr	r0, [r0]
   1e23c:	mov	r1, r4
   1e240:	bl	199e8 <__assert_fail@plt+0x6f38>
   1e244:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1e248:	add	fp, sp, #28
   1e24c:	sub	sp, sp, #20
   1e250:	mov	r8, r0
   1e254:	mov	r0, #0
   1e258:	cmp	r1, #0
   1e25c:	beq	1e4a0 <__assert_fail@plt+0xb9f0>
   1e260:	mov	r7, r1
   1e264:	ldr	r1, [r2]
   1e268:	mov	r4, r2
   1e26c:	ldr	r5, [r7, r1, lsl #2]
   1e270:	cmp	r5, #0
   1e274:	beq	1e4a0 <__assert_fail@plt+0xb9f0>
   1e278:	mov	r0, r5
   1e27c:	bl	127bc <strlen@plt>
   1e280:	cmp	r0, #0
   1e284:	beq	1e54c <__assert_fail@plt+0xba9c>
   1e288:	sub	r6, r0, #1
   1e28c:	ldrb	r0, [r5, r6]
   1e290:	sub	r0, r0, #48	; 0x30
   1e294:	cmp	r0, #71	; 0x47
   1e298:	bhi	1e51c <__assert_fail@plt+0xba6c>
   1e29c:	add	r1, pc, #8
   1e2a0:	mov	sl, #512	; 0x200
   1e2a4:	mov	r9, #0
   1e2a8:	ldr	pc, [r1, r0, lsl #2]
   1e2ac:	andeq	lr, r1, ip, asr #7
   1e2b0:	andeq	lr, r1, ip, asr #7
   1e2b4:	andeq	lr, r1, ip, asr #7
   1e2b8:	andeq	lr, r1, ip, asr #7
   1e2bc:	andeq	lr, r1, ip, asr #7
   1e2c0:	andeq	lr, r1, ip, asr #7
   1e2c4:	andeq	lr, r1, ip, asr #7
   1e2c8:	andeq	lr, r1, ip, asr #7
   1e2cc:	andeq	lr, r1, ip, asr #7
   1e2d0:	andeq	lr, r1, ip, asr #7
   1e2d4:	andeq	lr, r1, ip, lsl r5
   1e2d8:	andeq	lr, r1, ip, lsl r5
   1e2dc:	andeq	lr, r1, ip, lsl r5
   1e2e0:	andeq	lr, r1, ip, lsl r5
   1e2e4:	andeq	lr, r1, ip, lsl r5
   1e2e8:	andeq	lr, r1, ip, lsl r5
   1e2ec:	andeq	lr, r1, ip, lsl r5
   1e2f0:	andeq	lr, r1, ip, lsl r5
   1e2f4:	andeq	lr, r1, ip, lsl r5
   1e2f8:	andeq	lr, r1, ip, lsl r5
   1e2fc:	andeq	lr, r1, ip, lsl r5
   1e300:	andeq	lr, r1, ip, lsl r5
   1e304:	andeq	lr, r1, ip, lsl r5
   1e308:	andeq	lr, r1, r0, ror #9
   1e30c:	andeq	lr, r1, ip, lsl r5
   1e310:	andeq	lr, r1, ip, lsl r5
   1e314:	andeq	lr, r1, ip, lsl r5
   1e318:	andeq	lr, r1, ip, lsl r5
   1e31c:	andeq	lr, r1, ip, lsl r5
   1e320:	andeq	lr, r1, r8, lsr #9
   1e324:	andeq	lr, r1, ip, lsl r5
   1e328:	andeq	lr, r1, ip, lsl r5
   1e32c:	andeq	lr, r1, ip, lsl r5
   1e330:	andeq	lr, r1, ip, lsl r5
   1e334:	andeq	lr, r1, ip, lsl r5
   1e338:	andeq	lr, r1, ip, lsl r5
   1e33c:	andeq	lr, r1, ip, lsl r5
   1e340:	andeq	lr, r1, ip, lsl r5
   1e344:	andeq	lr, r1, ip, lsl r5
   1e348:	andeq	lr, r1, ip, lsl r5
   1e34c:	andeq	lr, r1, ip, lsl r5
   1e350:	andeq	lr, r1, ip, lsl r5
   1e354:	andeq	lr, r1, ip, lsl r5
   1e358:	andeq	lr, r1, ip, lsl r5
   1e35c:	andeq	lr, r1, ip, lsl r5
   1e360:	andeq	lr, r1, ip, lsl r5
   1e364:	andeq	lr, r1, ip, lsl r5
   1e368:	andeq	lr, r1, ip, lsl r5
   1e36c:	andeq	lr, r1, ip, lsl r5
   1e370:	andeq	lr, r1, ip, lsl r5
   1e374:			; <UNDEFINED> instruction: 0x0001e4bc
   1e378:	strdeq	lr, [r1], -r4
   1e37c:	andeq	lr, r1, ip, lsl r5
   1e380:	andeq	lr, r1, ip, lsl r5
   1e384:	andeq	lr, r1, ip, lsl r5
   1e388:	andeq	lr, r1, ip, lsl r5
   1e38c:	andeq	lr, r1, ip, lsl r5
   1e390:	andeq	lr, r1, ip, lsl r5
   1e394:	andeq	lr, r1, ip, lsl r5
   1e398:	andeq	lr, r1, r8, lsl #10
   1e39c:	andeq	lr, r1, ip, lsl r5
   1e3a0:	andeq	lr, r1, ip, lsl r5
   1e3a4:	andeq	lr, r1, ip, lsl r5
   1e3a8:	andeq	lr, r1, ip, lsl r5
   1e3ac:	andeq	lr, r1, ip, lsl r5
   1e3b0:	andeq	lr, r1, ip, lsl r5
   1e3b4:	andeq	lr, r1, ip, lsl r5
   1e3b8:	andeq	lr, r1, ip, lsl r5
   1e3bc:	andeq	lr, r1, ip, lsl r5
   1e3c0:	andeq	lr, r1, ip, lsl r5
   1e3c4:	andeq	lr, r1, ip, lsl r5
   1e3c8:	andeq	lr, r1, ip, asr #9
   1e3cc:	ldrb	r0, [r5]
   1e3d0:	cmp	r0, #45	; 0x2d
   1e3d4:	beq	1e3f0 <__assert_fail@plt+0xb940>
   1e3d8:	cmp	r0, #43	; 0x2b
   1e3dc:	mov	r7, #2
   1e3e0:	mov	r0, r5
   1e3e4:	addeq	r0, r5, #1
   1e3e8:	moveq	r7, #0
   1e3ec:	b	1e3f8 <__assert_fail@plt+0xb948>
   1e3f0:	add	r0, r5, #1
   1e3f4:	mov	r7, #1
   1e3f8:	movw	r1, #38711	; 0x9737
   1e3fc:	add	r3, sp, #8
   1e400:	mov	r2, #10
   1e404:	movt	r1, #4
   1e408:	str	r1, [sp]
   1e40c:	add	r1, sp, #16
   1e410:	bl	2ee78 <__assert_fail@plt+0x1c3c8>
   1e414:	cmp	r0, #0
   1e418:	bne	1e570 <__assert_fail@plt+0xbac0>
   1e41c:	mov	r0, r8
   1e420:	mov	r1, r5
   1e424:	bl	18054 <__assert_fail@plt+0x55a4>
   1e428:	ldr	r2, [sp, #8]
   1e42c:	ldr	r1, [sp, #12]
   1e430:	mov	r3, #1
   1e434:	cmp	r7, #1
   1e438:	strh	r3, [r0, #18]
   1e43c:	str	r7, [r0, #40]	; 0x28
   1e440:	str	sl, [r0, #44]	; 0x2c
   1e444:	str	r2, [r0, #48]	; 0x30
   1e448:	str	r1, [r0, #52]	; 0x34
   1e44c:	beq	1e468 <__assert_fail@plt+0xb9b8>
   1e450:	cmp	r7, #0
   1e454:	bne	1e488 <__assert_fail@plt+0xb9d8>
   1e458:	umull	r2, r3, r2, sl
   1e45c:	mla	r1, r1, sl, r3
   1e460:	add	r3, pc, #336	; 0x150
   1e464:	b	1e474 <__assert_fail@plt+0xb9c4>
   1e468:	umull	r2, r3, r2, sl
   1e46c:	mla	r1, r1, sl, r3
   1e470:	add	r3, pc, #312	; 0x138
   1e474:	rsbs	r2, r2, #20480	; 0x5000
   1e478:	rscs	r1, r1, #0
   1e47c:	addcc	r3, r3, #4
   1e480:	vldr	s0, [r3]
   1e484:	b	1e48c <__assert_fail@plt+0xb9dc>
   1e488:	vldr	s0, [pc, #284]	; 1e5ac <__assert_fail@plt+0xbafc>
   1e48c:	vstr	s0, [r0, #28]
   1e490:	ldr	r0, [r4]
   1e494:	add	r0, r0, #1
   1e498:	str	r0, [r4]
   1e49c:	mov	r0, #1
   1e4a0:	sub	sp, fp, #28
   1e4a4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1e4a8:	mov	r0, #0
   1e4ac:	mov	sl, #1048576	; 0x100000
   1e4b0:	mov	r9, #77	; 0x4d
   1e4b4:	strb	r0, [r5, r6]
   1e4b8:	b	1e3cc <__assert_fail@plt+0xb91c>
   1e4bc:	mov	r0, #0
   1e4c0:	mov	r9, #98	; 0x62
   1e4c4:	strb	r0, [r5, r6]
   1e4c8:	b	1e3cc <__assert_fail@plt+0xb91c>
   1e4cc:	mov	r0, #0
   1e4d0:	mov	sl, #2
   1e4d4:	mov	r9, #119	; 0x77
   1e4d8:	strb	r0, [r5, r6]
   1e4dc:	b	1e3cc <__assert_fail@plt+0xb91c>
   1e4e0:	mov	r0, #0
   1e4e4:	mov	sl, #1073741824	; 0x40000000
   1e4e8:	mov	r9, #71	; 0x47
   1e4ec:	strb	r0, [r5, r6]
   1e4f0:	b	1e3cc <__assert_fail@plt+0xb91c>
   1e4f4:	mov	r0, #0
   1e4f8:	mov	sl, #1
   1e4fc:	mov	r9, #99	; 0x63
   1e500:	strb	r0, [r5, r6]
   1e504:	b	1e3cc <__assert_fail@plt+0xb91c>
   1e508:	mov	r0, #0
   1e50c:	mov	sl, #1024	; 0x400
   1e510:	mov	r9, #107	; 0x6b
   1e514:	strb	r0, [r5, r6]
   1e518:	b	1e3cc <__assert_fail@plt+0xb91c>
   1e51c:	movw	r1, #45667	; 0xb263
   1e520:	mov	r0, #0
   1e524:	mov	r2, #5
   1e528:	movt	r1, #4
   1e52c:	bl	12564 <dcgettext@plt>
   1e530:	mov	r2, r0
   1e534:	ldr	r0, [r4]
   1e538:	mov	r1, #0
   1e53c:	ldr	r0, [r7, r0, lsl #2]
   1e540:	ldrb	r3, [r0, r6]
   1e544:	mov	r0, #1
   1e548:	bl	1269c <error@plt>
   1e54c:	movw	r1, #45636	; 0xb244
   1e550:	mov	r0, #0
   1e554:	mov	r2, #5
   1e558:	movt	r1, #4
   1e55c:	bl	12564 <dcgettext@plt>
   1e560:	mov	r2, r0
   1e564:	mov	r0, #1
   1e568:	mov	r1, #0
   1e56c:	bl	1269c <error@plt>
   1e570:	movw	r1, #45691	; 0xb27b
   1e574:	mov	r0, #0
   1e578:	mov	r2, #5
   1e57c:	movt	r1, #4
   1e580:	strb	r0, [sp, #7]
   1e584:	mov	r0, #0
   1e588:	strb	r9, [sp, #6]
   1e58c:	bl	12564 <dcgettext@plt>
   1e590:	mov	r2, r0
   1e594:	add	r0, sp, #6
   1e598:	mov	r1, #0
   1e59c:	mov	r3, r5
   1e5a0:	str	r0, [sp]
   1e5a4:	mov	r0, #1
   1e5a8:	bl	1269c <error@plt>
   1e5ac:	stccc	7, cr13, [r3], #-40	; 0xffffffd8
   1e5b0:	stclcc	12, cr12, [ip, #820]	; 0x334
   1e5b4:	svccc	0x00666666
   1e5b8:	svccc	0x00666666
   1e5bc:	stclcc	12, cr12, [ip, #820]	; 0x334
   1e5c0:	movw	r3, #19960	; 0x4df8
   1e5c4:	mov	ip, r2
   1e5c8:	mov	r2, r0
   1e5cc:	mov	r0, r1
   1e5d0:	movt	r3, #1
   1e5d4:	mov	r1, ip
   1e5d8:	b	1f900 <__assert_fail@plt+0xce50>
   1e5dc:	push	{r4, sl, fp, lr}
   1e5e0:	add	fp, sp, #8
   1e5e4:	mov	r4, r2
   1e5e8:	mov	r2, r0
   1e5ec:	mov	r0, r1
   1e5f0:	mov	r1, r4
   1e5f4:	bl	1f2d4 <__assert_fail@plt+0xc824>
   1e5f8:	cmp	r0, #0
   1e5fc:	beq	1e624 <__assert_fail@plt+0xbb74>
   1e600:	add	r1, pc, #48	; 0x30
   1e604:	ldrd	r2, [r0, #48]	; 0x30
   1e608:	subs	r2, r2, #100	; 0x64
   1e60c:	sbcs	r2, r3, #0
   1e610:	addcc	r1, r1, #4
   1e614:	ldr	r1, [r1]
   1e618:	str	r1, [r0, #28]
   1e61c:	mov	r0, #1
   1e620:	pop	{r4, sl, fp, pc}
   1e624:	ldr	r0, [r4]
   1e628:	sub	r0, r0, #1
   1e62c:	str	r0, [r4]
   1e630:	mov	r0, #0
   1e634:	pop	{r4, sl, fp, pc}
   1e638:	cdpcc	12, 4, cr12, cr12, cr13, {6}
   1e63c:	svccc	0x007d70a4
   1e640:	push	{r4, r5, r6, sl, fp, lr}
   1e644:	add	fp, sp, #16
   1e648:	sub	sp, sp, #24
   1e64c:	mov	r5, r0
   1e650:	mov	r0, #0
   1e654:	cmp	r1, #0
   1e658:	beq	1e6f8 <__assert_fail@plt+0xbc48>
   1e65c:	ldr	r3, [r2]
   1e660:	ldr	r4, [r1, r3, lsl #2]
   1e664:	cmp	r4, #0
   1e668:	beq	1e6f8 <__assert_fail@plt+0xbc48>
   1e66c:	add	r0, r3, #1
   1e670:	vldr	d0, [pc, #176]	; 1e728 <__assert_fail@plt+0xbc78>
   1e674:	add	r6, sp, #8
   1e678:	mov	r3, #0
   1e67c:	str	r0, [r2]
   1e680:	movw	r0, #43431	; 0xa9a7
   1e684:	mov	r1, r6
   1e688:	mov	r2, #0
   1e68c:	movt	r0, #4
   1e690:	str	r0, [sp]
   1e694:	mov	r0, r4
   1e698:	bl	1ea10 <__assert_fail@plt+0xbf60>
   1e69c:	cmp	r0, #0
   1e6a0:	beq	1e700 <__assert_fail@plt+0xbc50>
   1e6a4:	mov	r0, r5
   1e6a8:	mov	r1, r4
   1e6ac:	bl	18054 <__assert_fail@plt+0x55a4>
   1e6b0:	mov	r1, #8
   1e6b4:	movw	r3, #10111	; 0x277f
   1e6b8:	vldr	s0, [pc, #120]	; 1e738 <__assert_fail@plt+0xbc88>
   1e6bc:	vld1.64	{d16-d17}, [r6], r1
   1e6c0:	add	r1, r0, #40	; 0x28
   1e6c4:	movt	r3, #133	; 0x85
   1e6c8:	vst1.64	{d16-d17}, [r1]
   1e6cc:	ldr	r1, [r6]
   1e6d0:	add	r2, pc, #88	; 0x58
   1e6d4:	cmp	r1, r3
   1e6d8:	addgt	r2, r2, #4
   1e6dc:	vldr	s2, [r2]
   1e6e0:	movw	r2, #20864	; 0x5180
   1e6e4:	movt	r2, #1
   1e6e8:	cmp	r1, r2
   1e6ec:	vselge.f32	s0, s2, s0
   1e6f0:	vstr	s0, [r0, #28]
   1e6f4:	mov	r0, #1
   1e6f8:	sub	sp, fp, #16
   1e6fc:	pop	{r4, r5, r6, sl, fp, pc}
   1e700:	movw	r1, #46098	; 0xb412
   1e704:	mov	r0, #0
   1e708:	mov	r2, #5
   1e70c:	movt	r1, #4
   1e710:	bl	12564 <dcgettext@plt>
   1e714:	mov	r2, r0
   1e718:	mov	r0, #1
   1e71c:	mov	r1, #0
   1e720:	mov	r3, r4
   1e724:	bl	1269c <error@plt>
   1e728:	andeq	r0, r0, r0
   1e72c:	rscsmi	r1, r5, r0, lsl #16
   1e730:	mcrcc	14, 6, sl, cr7, cr4, {0}
   1e734:			; <UNDEFINED> instruction: 0x3e99999a
   1e738:	stccc	7, cr13, [r3], #-40	; 0xffffffd8
   1e73c:	push	{r4, r5, r6, sl, fp, lr}
   1e740:	add	fp, sp, #16
   1e744:	mov	r5, r0
   1e748:	mov	r0, #0
   1e74c:	cmp	r1, #0
   1e750:	beq	1e7f0 <__assert_fail@plt+0xbd40>
   1e754:	ldr	r3, [r2]
   1e758:	ldr	r4, [r1, r3, lsl #2]
   1e75c:	cmp	r4, #0
   1e760:	beq	1e7f0 <__assert_fail@plt+0xbd40>
   1e764:	add	r0, r3, #1
   1e768:	str	r0, [r2]
   1e76c:	mov	r0, r4
   1e770:	bl	123d8 <getpwnam@plt>
   1e774:	mov	r6, r0
   1e778:	bl	12918 <endpwent@plt>
   1e77c:	cmp	r6, #0
   1e780:	beq	1e78c <__assert_fail@plt+0xbcdc>
   1e784:	ldr	r6, [r6, #8]
   1e788:	b	1e7c8 <__assert_fail@plt+0xbd18>
   1e78c:	movw	r1, #44708	; 0xaea4
   1e790:	mov	r0, r4
   1e794:	movt	r1, #4
   1e798:	bl	12aa4 <strspn@plt>
   1e79c:	cmp	r0, #0
   1e7a0:	beq	1e7f4 <__assert_fail@plt+0xbd44>
   1e7a4:	ldrb	r0, [r4, r0]
   1e7a8:	cmp	r0, #0
   1e7ac:	bne	1e7f4 <__assert_fail@plt+0xbd44>
   1e7b0:	movw	r0, #61044	; 0xee74
   1e7b4:	movt	r0, #5
   1e7b8:	ldr	r1, [r0, #72]	; 0x48
   1e7bc:	mov	r0, r4
   1e7c0:	bl	221f8 <__assert_fail@plt+0xf748>
   1e7c4:	mov	r6, r0
   1e7c8:	mov	r0, r5
   1e7cc:	mov	r1, r4
   1e7d0:	bl	18054 <__assert_fail@plt+0x55a4>
   1e7d4:	str	r6, [r0, #40]	; 0x28
   1e7d8:	add	r1, pc, #136	; 0x88
   1e7dc:	cmp	r6, #100	; 0x64
   1e7e0:	addcc	r1, r1, #4
   1e7e4:	ldr	r1, [r1]
   1e7e8:	str	r1, [r0, #28]
   1e7ec:	mov	r0, #1
   1e7f0:	pop	{r4, r5, r6, sl, fp, pc}
   1e7f4:	ldrb	r0, [r4]
   1e7f8:	cmp	r0, #0
   1e7fc:	bne	1e824 <__assert_fail@plt+0xbd74>
   1e800:	movw	r1, #46162	; 0xb452
   1e804:	mov	r0, #0
   1e808:	mov	r2, #5
   1e80c:	movt	r1, #4
   1e810:	bl	12564 <dcgettext@plt>
   1e814:	mov	r2, r0
   1e818:	mov	r0, #1
   1e81c:	mov	r1, #0
   1e820:	bl	1269c <error@plt>
   1e824:	movw	r1, #46127	; 0xb42f
   1e828:	mov	r0, #0
   1e82c:	mov	r2, #5
   1e830:	movt	r1, #4
   1e834:	bl	12564 <dcgettext@plt>
   1e838:	mov	r5, r0
   1e83c:	movw	r0, #61044	; 0xee74
   1e840:	mov	r2, r4
   1e844:	movt	r0, #5
   1e848:	ldr	r1, [r0, #72]	; 0x48
   1e84c:	mov	r0, #0
   1e850:	bl	2c88c <__assert_fail@plt+0x19ddc>
   1e854:	mov	r3, r0
   1e858:	mov	r0, #1
   1e85c:	mov	r1, #0
   1e860:	mov	r2, r5
   1e864:	bl	1269c <error@plt>
   1e868:	cdpcc	12, 4, cr12, cr12, cr13, {6}
   1e86c:	svccc	0x007d70a4
   1e870:	push	{fp, lr}
   1e874:	mov	fp, sp
   1e878:	sub	sp, sp, #8
   1e87c:	movw	r3, #18956	; 0x4a0c
   1e880:	movt	r3, #1
   1e884:	str	r3, [sp]
   1e888:	movw	r3, #45384	; 0xb148
   1e88c:	movt	r3, #4
   1e890:	bl	1f588 <__assert_fail@plt+0xcad8>
   1e894:	mov	sp, fp
   1e898:	pop	{fp, pc}
   1e89c:	movw	r3, #20408	; 0x4fb8
   1e8a0:	mov	ip, r2
   1e8a4:	mov	r2, r0
   1e8a8:	mov	r0, r1
   1e8ac:	movt	r3, #1
   1e8b0:	mov	r1, ip
   1e8b4:	b	1f900 <__assert_fail@plt+0xce50>
   1e8b8:	push	{fp, lr}
   1e8bc:	mov	fp, sp
   1e8c0:	movw	r0, #43200	; 0xa8c0
   1e8c4:	movt	r0, #4
   1e8c8:	bl	1befc <__assert_fail@plt+0x944c>
   1e8cc:	bl	180b4 <__assert_fail@plt+0x5604>
   1e8d0:	mov	r1, #0
   1e8d4:	str	r1, [r0, #28]
   1e8d8:	str	r1, [r0, #16]
   1e8dc:	mov	r0, #1
   1e8e0:	pop	{fp, pc}
   1e8e4:	push	{fp, lr}
   1e8e8:	mov	fp, sp
   1e8ec:	bl	180b4 <__assert_fail@plt+0x5604>
   1e8f0:	mov	r1, #1065353216	; 0x3f800000
   1e8f4:	str	r1, [r0, #28]
   1e8f8:	mov	r1, #0
   1e8fc:	strh	r1, [r0, #18]
   1e900:	mov	r0, #1
   1e904:	pop	{fp, pc}
   1e908:	push	{fp, lr}
   1e90c:	mov	fp, sp
   1e910:	mov	r0, #0
   1e914:	bl	18110 <__assert_fail@plt+0x5660>
   1e918:	push	{fp, lr}
   1e91c:	mov	fp, sp
   1e920:	sub	sp, sp, #8
   1e924:	movw	r0, #30812	; 0x785c
   1e928:	movt	r0, #4
   1e92c:	bl	210d0 <__assert_fail@plt+0xe620>
   1e930:	movw	r1, #46204	; 0xb47c
   1e934:	mov	r0, #0
   1e938:	mov	r2, #5
   1e93c:	mov	r5, #0
   1e940:	movt	r1, #4
   1e944:	bl	12564 <dcgettext@plt>
   1e948:	bl	12420 <printf@plt>
   1e94c:	movw	r0, #46223	; 0xb48f
   1e950:	movt	r0, #4
   1e954:	bl	12420 <printf@plt>
   1e958:	movw	r4, #61044	; 0xee74
   1e95c:	movw	r2, #46255	; 0xb4af
   1e960:	movw	r1, #46247	; 0xb4a7
   1e964:	movt	r4, #5
   1e968:	movt	r2, #4
   1e96c:	movt	r1, #4
   1e970:	ldrb	r0, [r4, #56]	; 0x38
   1e974:	cmp	r0, #0
   1e978:	movw	r0, #46231	; 0xb497
   1e97c:	movt	r0, #4
   1e980:	moveq	r1, r2
   1e984:	bl	12420 <printf@plt>
   1e988:	movw	r0, #46264	; 0xb4b8
   1e98c:	movt	r0, #4
   1e990:	bl	12420 <printf@plt>
   1e994:	bl	123e4 <is_selinux_enabled@plt>
   1e998:	cmp	r0, #1
   1e99c:	blt	1e9ac <__assert_fail@plt+0xbefc>
   1e9a0:	movw	r0, #46283	; 0xb4cb
   1e9a4:	movt	r0, #4
   1e9a8:	bl	12420 <printf@plt>
   1e9ac:	add	r0, sp, #4
   1e9b0:	str	r5, [sp, #4]
   1e9b4:	bl	131f0 <__assert_fail@plt+0x740>
   1e9b8:	cmp	r0, #0
   1e9bc:	beq	1e9f0 <__assert_fail@plt+0xbf40>
   1e9c0:	movw	r0, #46292	; 0xb4d4
   1e9c4:	movt	r0, #4
   1e9c8:	bl	12420 <printf@plt>
   1e9cc:	ldrb	r0, [sp, #5]
   1e9d0:	tst	r0, #2
   1e9d4:	beq	1e9e4 <__assert_fail@plt+0xbf34>
   1e9d8:	movw	r0, #46297	; 0xb4d9
   1e9dc:	movt	r0, #4
   1e9e0:	bl	12420 <printf@plt>
   1e9e4:	movw	r0, #33473	; 0x82c1
   1e9e8:	movt	r0, #4
   1e9ec:	bl	12420 <printf@plt>
   1e9f0:	ldrh	r1, [r4, #68]	; 0x44
   1e9f4:	movw	r0, #46307	; 0xb4e3
   1e9f8:	movt	r0, #4
   1e9fc:	bl	12420 <printf@plt>
   1ea00:	mov	r0, #10
   1ea04:	bl	12840 <putchar@plt>
   1ea08:	mov	r0, #0
   1ea0c:	bl	12780 <exit@plt>
   1ea10:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   1ea14:	add	fp, sp, #24
   1ea18:	vpush	{d8}
   1ea1c:	sub	sp, sp, #16
   1ea20:	mov	r4, r1
   1ea24:	ldrb	r1, [r0]
   1ea28:	vmov.f64	d8, d0
   1ea2c:	mov	r8, r3
   1ea30:	mov	r7, r2
   1ea34:	mov	r5, r0
   1ea38:	cmp	r1, #43	; 0x2b
   1ea3c:	beq	1ea54 <__assert_fail@plt+0xbfa4>
   1ea40:	cmp	r1, #45	; 0x2d
   1ea44:	mov	r0, #2
   1ea48:	addeq	r5, r5, #1
   1ea4c:	moveq	r0, #0
   1ea50:	b	1ea5c <__assert_fail@plt+0xbfac>
   1ea54:	add	r5, r5, #1
   1ea58:	mov	r0, #1
   1ea5c:	movw	r3, #10352	; 0x2870
   1ea60:	str	r0, [r4, #4]
   1ea64:	add	r2, sp, #8
   1ea68:	mov	r0, r5
   1ea6c:	mov	r1, #0
   1ea70:	mov	r6, #0
   1ea74:	movt	r3, #1
   1ea78:	bl	2e5b8 <__assert_fail@plt+0x1bb08>
   1ea7c:	cmp	r0, #0
   1ea80:	beq	1eb30 <__assert_fail@plt+0xc080>
   1ea84:	vldr	d16, [sp, #8]
   1ea88:	mov	r0, sp
   1ea8c:	vmul.f64	d0, d16, d8
   1ea90:	bl	12744 <modf@plt>
   1ea94:	vldr	d17, [pc, #220]	; 1eb78 <__assert_fail@plt+0xc0c8>
   1ea98:	vmul.f64	d16, d0, d17
   1ea9c:	vcmpe.f64	d16, d17
   1eaa0:	vmrs	APSR_nzcv, fpscr
   1eaa4:	bpl	1eb40 <__assert_fail@plt+0xc090>
   1eaa8:	vmov	s0, r7
   1eaac:	vldr	d17, [sp]
   1eab0:	mov	r1, #0
   1eab4:	mov	r2, #0
   1eab8:	vcvt.f64.s32	d18, s0
   1eabc:	vcmpe.f64	d17, #0.0
   1eac0:	vsub.f64	d18, d18, d17
   1eac4:	vcvt.s32.f64	s0, d18
   1eac8:	vcvt.s32.f64	s2, d18
   1eacc:	vmov	r0, s2
   1ead0:	vstr	s0, [r4, #8]
   1ead4:	cmp	r7, r0
   1ead8:	movwlt	r2, #1
   1eadc:	vmrs	APSR_nzcv, fpscr
   1eae0:	movwmi	r1, #1
   1eae4:	cmp	r1, r2
   1eae8:	bne	1eb60 <__assert_fail@plt+0xc0b0>
   1eaec:	vmov	s0, r8
   1eaf0:	mov	r6, #1
   1eaf4:	vcvt.f64.s32	d17, s0
   1eaf8:	vsub.f64	d18, d17, d16
   1eafc:	vcmpe.f64	d16, d17
   1eb00:	vmrs	APSR_nzcv, fpscr
   1eb04:	vcvt.s32.f64	s2, d18
   1eb08:	vcvt.s32.f64	s0, d18
   1eb0c:	vstr	s2, [r4, #12]
   1eb10:	ble	1eb30 <__assert_fail@plt+0xc080>
   1eb14:	vmov	r1, s0
   1eb18:	movw	r2, #51712	; 0xca00
   1eb1c:	sub	r0, r0, #1
   1eb20:	movt	r2, #15258	; 0x3b9a
   1eb24:	str	r0, [r4, #8]
   1eb28:	add	r1, r1, r2
   1eb2c:	str	r1, [r4, #12]
   1eb30:	mov	r0, r6
   1eb34:	sub	sp, fp, #32
   1eb38:	vpop	{d8}
   1eb3c:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   1eb40:	movw	r0, #43304	; 0xa928
   1eb44:	movw	r1, #42507	; 0xa60b
   1eb48:	movw	r3, #43330	; 0xa942
   1eb4c:	movw	r2, #3149	; 0xc4d
   1eb50:	movt	r0, #4
   1eb54:	movt	r1, #4
   1eb58:	movt	r3, #4
   1eb5c:	bl	12ab0 <__assert_fail@plt>
   1eb60:	ldr	r2, [fp, #8]
   1eb64:	mov	r0, #1
   1eb68:	mov	r1, #0
   1eb6c:	mov	r3, r5
   1eb70:	bl	1269c <error@plt>
   1eb74:	nop	{0}
   1eb78:	andeq	r0, r0, r0
   1eb7c:	bicmi	ip, sp, r5, ror #26
   1eb80:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1eb84:	add	fp, sp, #28
   1eb88:	sub	sp, sp, #60	; 0x3c
   1eb8c:	mov	r6, r0
   1eb90:	mov	r0, #0
   1eb94:	cmp	r2, #0
   1eb98:	beq	1f030 <__assert_fail@plt+0xc580>
   1eb9c:	mov	r7, r2
   1eba0:	ldr	r2, [r3]
   1eba4:	mov	sl, r3
   1eba8:	ldr	r2, [r7, r2, lsl #2]
   1ebac:	cmp	r2, #0
   1ebb0:	beq	1f030 <__assert_fail@plt+0xc580>
   1ebb4:	ldr	r4, [r1, #12]
   1ebb8:	movw	r2, #43752	; 0xaae8
   1ebbc:	mov	r0, r1
   1ebc0:	movt	r2, #4
   1ebc4:	mov	r1, r4
   1ebc8:	bl	18018 <__assert_fail@plt+0x5568>
   1ebcc:	mov	r3, r0
   1ebd0:	mov	r0, #0
   1ebd4:	movw	r1, #257	; 0x101
   1ebd8:	movw	ip, #61044	; 0xee74
   1ebdc:	str	r0, [r3, #144]	; 0x90
   1ebe0:	str	r1, [r3, #16]
   1ebe4:	movw	r1, #18792	; 0x4968
   1ebe8:	movt	ip, #5
   1ebec:	movt	r1, #1
   1ebf0:	cmp	r4, r1
   1ebf4:	movwne	r2, #18568	; 0x4888
   1ebf8:	movne	r5, #1
   1ebfc:	movtne	r2, #1
   1ec00:	cmpne	r4, r2
   1ec04:	bne	1ec14 <__assert_fail@plt+0xc164>
   1ec08:	mov	r0, #1
   1ec0c:	mov	r5, #0
   1ec10:	strb	r0, [ip, #80]	; 0x50
   1ec14:	strb	r0, [r3, #140]	; 0x8c
   1ec18:	sub	r0, r4, r1
   1ec1c:	movw	r1, #16804	; 0x41a4
   1ec20:	str	r3, [sp, #32]
   1ec24:	str	r4, [sp, #20]
   1ec28:	movt	r1, #1
   1ec2c:	clz	r0, r0
   1ec30:	lsr	r0, r0, #5
   1ec34:	sub	r1, r4, r1
   1ec38:	clz	r1, r1
   1ec3c:	lsr	r1, r1, #5
   1ec40:	orr	r9, r1, r0
   1ec44:	cmp	r9, #1
   1ec48:	bne	1ed08 <__assert_fail@plt+0xc258>
   1ec4c:	mov	r0, #0
   1ec50:	str	r5, [sp, #28]
   1ec54:	str	r6, [sp, #24]
   1ec58:	str	r0, [r3, #144]	; 0x90
   1ec5c:	strb	r0, [ip, #14]
   1ec60:	movw	r0, #44595	; 0xae33
   1ec64:	movt	r0, #4
   1ec68:	bl	126d8 <getenv@plt>
   1ec6c:	cmp	r0, #0
   1ec70:	beq	1ecfc <__assert_fail@plt+0xc24c>
   1ec74:	movw	r5, #33748	; 0x83d4
   1ec78:	add	r8, sp, #36	; 0x24
   1ec7c:	sub	r6, fp, #32
   1ec80:	mov	r2, #1
   1ec84:	mov	r4, r0
   1ec88:	movt	r5, #4
   1ec8c:	mov	r3, r8
   1ec90:	str	r6, [sp]
   1ec94:	mov	r1, r5
   1ec98:	bl	22304 <__assert_fail@plt+0xf854>
   1ec9c:	ldr	r1, [fp, #-32]	; 0xffffffe0
   1eca0:	cmp	r1, #1
   1eca4:	beq	1ecc4 <__assert_fail@plt+0xc214>
   1eca8:	cmp	r1, #0
   1ecac:	beq	1f038 <__assert_fail@plt+0xc588>
   1ecb0:	ldr	r0, [sp, #36]	; 0x24
   1ecb4:	ldrb	r2, [r4, r0]
   1ecb8:	cmp	r2, #47	; 0x2f
   1ecbc:	beq	1ecdc <__assert_fail@plt+0xc22c>
   1ecc0:	b	1f060 <__assert_fail@plt+0xc5b0>
   1ecc4:	ldr	r0, [sp, #36]	; 0x24
   1ecc8:	ldrb	r2, [r4, r0]
   1eccc:	cmp	r2, #46	; 0x2e
   1ecd0:	beq	1f038 <__assert_fail@plt+0xc588>
   1ecd4:	cmp	r2, #47	; 0x2f
   1ecd8:	bne	1f060 <__assert_fail@plt+0xc5b0>
   1ecdc:	mov	r0, r4
   1ece0:	mov	r1, r5
   1ece4:	mov	r2, #0
   1ece8:	mov	r3, r8
   1ecec:	str	r6, [sp]
   1ecf0:	bl	22304 <__assert_fail@plt+0xf854>
   1ecf4:	cmp	r0, #0
   1ecf8:	bne	1ec9c <__assert_fail@plt+0xc1ec>
   1ecfc:	ldr	r3, [sp, #32]
   1ed00:	ldr	r5, [sp, #28]
   1ed04:	b	1ed20 <__assert_fail@plt+0xc270>
   1ed08:	movw	r0, #58736	; 0xe570
   1ed0c:	movt	r0, #5
   1ed10:	ldr	r0, [r0]
   1ed14:	cmp	r0, #0
   1ed18:	beq	1f0dc <__assert_fail@plt+0xc62c>
   1ed1c:	str	r0, [r3, #144]	; 0x90
   1ed20:	add	r2, r3, #40	; 0x28
   1ed24:	mov	r0, #0
   1ed28:	str	sl, [sp, #28]
   1ed2c:	str	r7, [sp, #16]
   1ed30:	strb	r0, [r2]
   1ed34:	ldr	r1, [sl]
   1ed38:	mov	sl, r7
   1ed3c:	ldr	r4, [sl, r1, lsl #2]!
   1ed40:	cmp	r4, #0
   1ed44:	beq	1ef48 <__assert_fail@plt+0xc498>
   1ed48:	eor	r6, r9, #1
   1ed4c:	eor	r5, r5, #1
   1ed50:	mov	r9, r1
   1ed54:	mov	r8, #0
   1ed58:	mov	r7, #0
   1ed5c:	str	r2, [sp, #12]
   1ed60:	str	r1, [sp, #24]
   1ed64:	b	1ed7c <__assert_fail@plt+0xc2cc>
   1ed68:	mov	r0, #0
   1ed6c:	ldr	r4, [sl, #4]!
   1ed70:	add	r9, r9, #1
   1ed74:	cmp	r4, #0
   1ed78:	beq	1ee10 <__assert_fail@plt+0xc360>
   1ed7c:	ldrb	r1, [r4]
   1ed80:	cmp	r1, #59	; 0x3b
   1ed84:	bne	1ed98 <__assert_fail@plt+0xc2e8>
   1ed88:	ldrb	r0, [r4, #1]
   1ed8c:	cmp	r0, #0
   1ed90:	bne	1edbc <__assert_fail@plt+0xc30c>
   1ed94:	b	1edfc <__assert_fail@plt+0xc34c>
   1ed98:	subs	r1, r1, #43	; 0x2b
   1ed9c:	movwne	r1, #1
   1eda0:	orrs	r1, r5, r1
   1eda4:	bne	1edbc <__assert_fail@plt+0xc30c>
   1eda8:	cmp	r0, #0
   1edac:	beq	1edbc <__assert_fail@plt+0xc30c>
   1edb0:	ldrb	r0, [r4, #1]
   1edb4:	cmp	r0, #0
   1edb8:	beq	1ee04 <__assert_fail@plt+0xc354>
   1edbc:	movw	r1, #43875	; 0xab63
   1edc0:	mov	r0, r4
   1edc4:	movt	r1, #4
   1edc8:	bl	25038 <__assert_fail@plt+0x12588>
   1edcc:	mov	r1, #0
   1edd0:	cmp	r0, #0
   1edd4:	beq	1ed68 <__assert_fail@plt+0xc2b8>
   1edd8:	cmp	r9, #0
   1eddc:	mov	r0, r9
   1ede0:	movwne	r0, #1
   1ede4:	orrs	r0, r0, r6
   1ede8:	beq	1f0b8 <__assert_fail@plt+0xc608>
   1edec:	add	r7, r7, #1
   1edf0:	mov	r0, #1
   1edf4:	mov	r8, r4
   1edf8:	b	1ed6c <__assert_fail@plt+0xc2bc>
   1edfc:	mov	r1, #0
   1ee00:	b	1ee10 <__assert_fail@plt+0xc360>
   1ee04:	ldr	r0, [sp, #12]
   1ee08:	mov	r1, #1
   1ee0c:	strb	r1, [r0]
   1ee10:	ldr	r0, [sp, #24]
   1ee14:	cmp	r9, r0
   1ee18:	beq	1ef40 <__assert_fail@plt+0xc490>
   1ee1c:	ldr	r0, [sl]
   1ee20:	cmp	r0, #0
   1ee24:	beq	1ef40 <__assert_fail@plt+0xc490>
   1ee28:	cmp	r1, #0
   1ee2c:	beq	1ee6c <__assert_fail@plt+0xc3bc>
   1ee30:	ldr	r1, [sp, #20]
   1ee34:	movw	r2, #16804	; 0x41a4
   1ee38:	movw	r0, #44605	; 0xae3d
   1ee3c:	movw	r4, #38711	; 0x9737
   1ee40:	movt	r2, #1
   1ee44:	movt	r0, #4
   1ee48:	movt	r4, #4
   1ee4c:	cmp	r1, r2
   1ee50:	moveq	r4, r0
   1ee54:	cmp	r7, #2
   1ee58:	bge	1f108 <__assert_fail@plt+0xc658>
   1ee5c:	mov	r0, r8
   1ee60:	bl	127bc <strlen@plt>
   1ee64:	cmp	r0, #2
   1ee68:	bne	1f130 <__assert_fail@plt+0xc680>
   1ee6c:	ldr	r0, [sp, #12]
   1ee70:	mov	r1, #2048	; 0x800
   1ee74:	add	r7, r0, #4
   1ee78:	mov	r0, r7
   1ee7c:	bl	205fc <__assert_fail@plt+0xdb4c>
   1ee80:	sub	r0, r0, #1
   1ee84:	cmp	r0, #1
   1ee88:	bls	1f0fc <__assert_fail@plt+0xc64c>
   1ee8c:	mov	r0, r7
   1ee90:	bl	20700 <__assert_fail@plt+0xdc50>
   1ee94:	ldr	r6, [sp, #32]
   1ee98:	movw	r0, #22988	; 0x59cc
   1ee9c:	ldr	r8, [sp, #24]
   1eea0:	movt	r0, #1
   1eea4:	str	r0, [r6, #76]	; 0x4c
   1eea8:	ldrb	r0, [r6, #40]	; 0x28
   1eeac:	cmp	r0, #0
   1eeb0:	beq	1ef64 <__assert_fail@plt+0xc4b4>
   1eeb4:	ldr	r2, [sp, #12]
   1eeb8:	mov	r1, #0
   1eebc:	mvn	r0, r8
   1eec0:	add	r5, r6, #88	; 0x58
   1eec4:	str	r1, [r6, #132]	; 0x84
   1eec8:	str	r1, [r6, #80]	; 0x50
   1eecc:	str	r1, [r6, #84]	; 0x54
   1eed0:	add	r4, r9, r0
   1eed4:	str	r1, [r6, #64]	; 0x40
   1eed8:	str	r1, [r6, #68]	; 0x44
   1eedc:	mov	r0, r7
   1eee0:	mov	r1, r5
   1eee4:	str	r4, [r6, #72]	; 0x48
   1eee8:	bl	20724 <__assert_fail@plt+0xdc74>
   1eeec:	sub	r0, r9, #1
   1eef0:	cmp	r8, r0
   1eef4:	bge	1f018 <__assert_fail@plt+0xc568>
   1eef8:	ldr	r0, [sp, #16]
   1eefc:	add	r8, r0, r8, lsl #2
   1ef00:	ldr	r6, [r8], #4
   1ef04:	mov	r0, r6
   1ef08:	bl	127bc <strlen@plt>
   1ef0c:	mov	r1, #0
   1ef10:	add	r3, r0, #1
   1ef14:	mov	r0, r7
   1ef18:	mov	r2, r6
   1ef1c:	str	r1, [sp]
   1ef20:	str	r1, [sp, #4]
   1ef24:	mov	r1, #1
   1ef28:	str	r1, [sp, #8]
   1ef2c:	mov	r1, r5
   1ef30:	bl	1fd7c <__assert_fail@plt+0xd2cc>
   1ef34:	subs	r4, r4, #1
   1ef38:	bne	1ef00 <__assert_fail@plt+0xc450>
   1ef3c:	b	1f018 <__assert_fail@plt+0xc568>
   1ef40:	ldr	r3, [sp, #32]
   1ef44:	mov	r1, r9
   1ef48:	ldr	r0, [sp, #28]
   1ef4c:	str	r1, [r0]
   1ef50:	mov	r0, r3
   1ef54:	bl	30174 <__assert_fail@plt+0x1d6c4>
   1ef58:	mov	r0, #0
   1ef5c:	sub	sp, fp, #28
   1ef60:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1ef64:	mov	r5, #0
   1ef68:	mov	r0, #2
   1ef6c:	str	r5, [r6, #80]	; 0x50
   1ef70:	str	r5, [r6, #84]	; 0x54
   1ef74:	str	r0, [r6, #64]	; 0x40
   1ef78:	movw	r0, #43875	; 0xab63
   1ef7c:	movt	r0, #4
   1ef80:	str	r0, [r6, #68]	; 0x44
   1ef84:	sub	r0, r9, r8
   1ef88:	str	r0, [r6, #136]	; 0x88
   1ef8c:	lsl	r0, r0, #2
   1ef90:	bl	2e038 <__assert_fail@plt+0x1b588>
   1ef94:	ldr	r2, [sp, #12]
   1ef98:	str	r0, [r6, #132]	; 0x84
   1ef9c:	add	r1, r6, #88	; 0x58
   1efa0:	mov	r0, r7
   1efa4:	bl	20724 <__assert_fail@plt+0xdc74>
   1efa8:	ldr	r1, [r6, #136]	; 0x88
   1efac:	cmp	r1, #1
   1efb0:	blt	1f018 <__assert_fail@plt+0xc568>
   1efb4:	and	r0, r1, #1
   1efb8:	beq	1effc <__assert_fail@plt+0xc54c>
   1efbc:	ldr	r2, [sp, #16]
   1efc0:	sub	r1, r1, r0
   1efc4:	mov	r5, #0
   1efc8:	add	r2, r2, r8, lsl #2
   1efcc:	add	r2, r2, #4
   1efd0:	ldr	r3, [r6, #132]	; 0x84
   1efd4:	ldr	r7, [r2, #-4]
   1efd8:	str	r7, [r3, r5, lsl #2]
   1efdc:	ldr	r3, [r6, #132]	; 0x84
   1efe0:	ldr	r7, [r2]
   1efe4:	add	r2, r2, #8
   1efe8:	add	r3, r3, r5, lsl #2
   1efec:	add	r5, r5, #2
   1eff0:	cmp	r1, r5
   1eff4:	str	r7, [r3, #4]
   1eff8:	bne	1efd0 <__assert_fail@plt+0xc520>
   1effc:	cmp	r0, #0
   1f000:	beq	1f018 <__assert_fail@plt+0xc568>
   1f004:	ldr	r1, [sp, #16]
   1f008:	add	r0, r5, r8
   1f00c:	ldr	r0, [r1, r0, lsl #2]
   1f010:	ldr	r1, [r6, #132]	; 0x84
   1f014:	str	r0, [r1, r5, lsl #2]
   1f018:	ldr	r0, [sl]
   1f01c:	cmp	r0, #0
   1f020:	ldr	r0, [sp, #28]
   1f024:	addne	r9, r9, #1
   1f028:	str	r9, [r0]
   1f02c:	mov	r0, #1
   1f030:	sub	sp, fp, #28
   1f034:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1f038:	movw	r1, #44184	; 0xac98
   1f03c:	mov	r0, #0
   1f040:	mov	r2, #5
   1f044:	movt	r1, #4
   1f048:	bl	12564 <dcgettext@plt>
   1f04c:	ldr	r3, [sp, #24]
   1f050:	mov	r2, r0
   1f054:	mov	r0, #1
   1f058:	mov	r1, #0
   1f05c:	bl	1269c <error@plt>
   1f060:	add	r0, r4, r0
   1f064:	bl	124bc <strndup@plt>
   1f068:	movw	r1, #44435	; 0xad93
   1f06c:	mov	r5, r0
   1f070:	mov	r0, #0
   1f074:	mov	r2, #5
   1f078:	movt	r1, #4
   1f07c:	bl	12564 <dcgettext@plt>
   1f080:	mov	r6, r0
   1f084:	ldr	r0, [sp, #36]	; 0x24
   1f088:	cmp	r5, #0
   1f08c:	addeq	r5, r4, r0
   1f090:	mov	r0, #0
   1f094:	mov	r1, r5
   1f098:	bl	19960 <__assert_fail@plt+0x6eb0>
   1f09c:	mov	r3, r0
   1f0a0:	ldr	r0, [sp, #24]
   1f0a4:	mov	r1, #0
   1f0a8:	mov	r2, r6
   1f0ac:	str	r0, [sp]
   1f0b0:	mov	r0, #1
   1f0b4:	bl	1269c <error@plt>
   1f0b8:	movw	r1, #43878	; 0xab66
   1f0bc:	movt	r1, #4
   1f0c0:	mov	r0, #0
   1f0c4:	mov	r2, #5
   1f0c8:	bl	12564 <dcgettext@plt>
   1f0cc:	mov	r2, r0
   1f0d0:	mov	r0, #1
   1f0d4:	mov	r1, #0
   1f0d8:	bl	1269c <error@plt>
   1f0dc:	movw	r0, #43776	; 0xab00
   1f0e0:	movw	r1, #42507	; 0xa60b
   1f0e4:	movw	r3, #43795	; 0xab13
   1f0e8:	movw	r2, #2937	; 0xb79
   1f0ec:	movt	r0, #4
   1f0f0:	movt	r1, #4
   1f0f4:	movt	r3, #4
   1f0f8:	bl	12ab0 <__assert_fail@plt>
   1f0fc:	movw	r1, #44143	; 0xac6f
   1f100:	movt	r1, #4
   1f104:	b	1f0c0 <__assert_fail@plt+0xc610>
   1f108:	movw	r1, #43992	; 0xabd8
   1f10c:	mov	r0, #0
   1f110:	mov	r2, #5
   1f114:	movt	r1, #4
   1f118:	bl	12564 <dcgettext@plt>
   1f11c:	mov	r2, r0
   1f120:	mov	r0, #1
   1f124:	mov	r1, #0
   1f128:	mov	r3, r4
   1f12c:	bl	1269c <error@plt>
   1f130:	movw	r2, #44048	; 0xac10
   1f134:	add	r0, sp, #36	; 0x24
   1f138:	mov	r1, #19
   1f13c:	mov	r3, r4
   1f140:	movt	r2, #4
   1f144:	bl	1281c <snprintf@plt>
   1f148:	cmp	r0, #20
   1f14c:	bcs	1f1cc <__assert_fail@plt+0xc71c>
   1f150:	movw	r1, #44086	; 0xac36
   1f154:	mov	r0, #0
   1f158:	mov	r2, #5
   1f15c:	movt	r1, #4
   1f160:	bl	12564 <dcgettext@plt>
   1f164:	mov	r4, r0
   1f168:	movw	r0, #61044	; 0xee74
   1f16c:	add	r2, sp, #36	; 0x24
   1f170:	movt	r0, #5
   1f174:	ldr	r1, [r0, #72]	; 0x48
   1f178:	mov	r7, r0
   1f17c:	mov	r0, #0
   1f180:	bl	2c88c <__assert_fail@plt+0x19ddc>
   1f184:	ldr	r1, [r7, #72]	; 0x48
   1f188:	movw	r2, #43875	; 0xab63
   1f18c:	mov	r5, r0
   1f190:	mov	r0, #1
   1f194:	movt	r2, #4
   1f198:	bl	2c88c <__assert_fail@plt+0x19ddc>
   1f19c:	ldr	r1, [r7, #72]	; 0x48
   1f1a0:	mov	r6, r0
   1f1a4:	mov	r0, #2
   1f1a8:	mov	r2, r8
   1f1ac:	bl	2c88c <__assert_fail@plt+0x19ddc>
   1f1b0:	str	r0, [sp, #4]
   1f1b4:	mov	r0, #1
   1f1b8:	mov	r1, #0
   1f1bc:	mov	r2, r4
   1f1c0:	mov	r3, r5
   1f1c4:	str	r6, [sp]
   1f1c8:	bl	1269c <error@plt>
   1f1cc:	movw	r0, #44065	; 0xac21
   1f1d0:	movw	r1, #42507	; 0xa60b
   1f1d4:	movw	r3, #43795	; 0xab13
   1f1d8:	movw	r2, #3014	; 0xbc6
   1f1dc:	movt	r0, #4
   1f1e0:	b	1f0f0 <__assert_fail@plt+0xc640>
   1f1e4:	push	{r4, r5, fp, lr}
   1f1e8:	add	fp, sp, #8
   1f1ec:	mov	r5, r0
   1f1f0:	mov	r0, #0
   1f1f4:	mov	r4, r1
   1f1f8:	str	r0, [r1]
   1f1fc:	mov	r0, #0
   1f200:	bl	2b2cc <__assert_fail@plt+0x1881c>
   1f204:	movw	r1, #44609	; 0xae41
   1f208:	str	r0, [r4, #16]
   1f20c:	mov	r0, r5
   1f210:	movt	r1, #4
   1f214:	bl	123fc <strcmp@plt>
   1f218:	cmp	r0, #0
   1f21c:	beq	1f268 <__assert_fail@plt+0xc7b8>
   1f220:	movw	r1, #44636	; 0xae5c
   1f224:	mov	r0, r5
   1f228:	movt	r1, #4
   1f22c:	bl	123fc <strcmp@plt>
   1f230:	cmp	r0, #0
   1f234:	beq	1f27c <__assert_fail@plt+0xc7cc>
   1f238:	movw	r0, #61000	; 0xee48
   1f23c:	mov	r1, r5
   1f240:	movt	r0, #5
   1f244:	ldr	r0, [r0, #36]	; 0x24
   1f248:	bl	19bd8 <__assert_fail@plt+0x7128>
   1f24c:	cmp	r0, #0
   1f250:	stmib	r4, {r0, r5}
   1f254:	bne	1f2a4 <__assert_fail@plt+0xc7f4>
   1f258:	bl	12804 <__errno_location@plt>
   1f25c:	ldr	r0, [r0]
   1f260:	mov	r1, r5
   1f264:	bl	19a08 <__assert_fail@plt+0x6f58>
   1f268:	movw	r1, #44621	; 0xae4d
   1f26c:	movw	r0, #58704	; 0xe550
   1f270:	movt	r1, #4
   1f274:	movt	r0, #5
   1f278:	b	1f28c <__assert_fail@plt+0xc7dc>
   1f27c:	movw	r1, #38771	; 0x9773
   1f280:	movw	r0, #58716	; 0xe55c
   1f284:	movt	r1, #4
   1f288:	movt	r0, #5
   1f28c:	ldr	r0, [r0]
   1f290:	mov	r2, #5
   1f294:	str	r0, [r4, #4]
   1f298:	mov	r0, #0
   1f29c:	bl	12564 <dcgettext@plt>
   1f2a0:	str	r0, [r4, #8]
   1f2a4:	ldr	r0, [r4, #4]
   1f2a8:	bl	1287c <fileno@plt>
   1f2ac:	cmn	r0, #1
   1f2b0:	beq	1f2c8 <__assert_fail@plt+0xc818>
   1f2b4:	bl	12a20 <isatty@plt>
   1f2b8:	cmp	r0, #0
   1f2bc:	movwne	r0, #1
   1f2c0:	strb	r0, [r4, #12]
   1f2c4:	pop	{r4, r5, fp, pc}
   1f2c8:	mov	r0, #0
   1f2cc:	strb	r0, [r4, #12]
   1f2d0:	pop	{r4, r5, fp, pc}
   1f2d4:	push	{r4, r5, r6, r7, fp, lr}
   1f2d8:	add	fp, sp, #16
   1f2dc:	sub	sp, sp, #24
   1f2e0:	mov	r4, #0
   1f2e4:	cmp	r0, #0
   1f2e8:	beq	1f394 <__assert_fail@plt+0xc8e4>
   1f2ec:	mov	r5, r2
   1f2f0:	ldr	r2, [r1]
   1f2f4:	ldr	r6, [r0, r2, lsl #2]
   1f2f8:	cmp	r6, #0
   1f2fc:	beq	1f394 <__assert_fail@plt+0xc8e4>
   1f300:	add	r0, r2, #1
   1f304:	str	r0, [r1]
   1f308:	ldrb	r0, [r6]
   1f30c:	cmp	r0, #45	; 0x2d
   1f310:	beq	1f32c <__assert_fail@plt+0xc87c>
   1f314:	cmp	r0, #43	; 0x2b
   1f318:	mov	r7, #2
   1f31c:	mov	r0, r6
   1f320:	addeq	r0, r6, #1
   1f324:	moveq	r7, #0
   1f328:	b	1f334 <__assert_fail@plt+0xc884>
   1f32c:	add	r0, r6, #1
   1f330:	mov	r7, #1
   1f334:	movw	r1, #38711	; 0x9737
   1f338:	add	r3, sp, #8
   1f33c:	mov	r2, #10
   1f340:	movt	r1, #4
   1f344:	str	r1, [sp]
   1f348:	add	r1, sp, #20
   1f34c:	bl	2ee78 <__assert_fail@plt+0x1c3c8>
   1f350:	cmp	r0, #0
   1f354:	bne	1f394 <__assert_fail@plt+0xc8e4>
   1f358:	mov	r0, r5
   1f35c:	mov	r1, r6
   1f360:	bl	18054 <__assert_fail@plt+0x55a4>
   1f364:	str	r7, [r0, #40]	; 0x28
   1f368:	mov	r4, r0
   1f36c:	ldr	r0, [sp, #8]
   1f370:	ldr	r1, [sp, #12]
   1f374:	mov	r5, r4
   1f378:	str	r0, [r5, #48]!	; 0x30
   1f37c:	movw	r0, #61044	; 0xee74
   1f380:	str	r1, [r4, #52]	; 0x34
   1f384:	movt	r0, #5
   1f388:	ldrb	r0, [r0, #44]	; 0x2c
   1f38c:	tst	r0, #1
   1f390:	bne	1f3a0 <__assert_fail@plt+0xc8f0>
   1f394:	mov	r0, r4
   1f398:	sub	sp, fp, #16
   1f39c:	pop	{r4, r5, r6, r7, fp, pc}
   1f3a0:	movw	r6, #58704	; 0xe550
   1f3a4:	ldr	r2, [r4, #4]
   1f3a8:	movw	r1, #43499	; 0xa9eb
   1f3ac:	movt	r6, #5
   1f3b0:	movt	r1, #4
   1f3b4:	ldr	r0, [r6]
   1f3b8:	bl	127f8 <fprintf@plt>
   1f3bc:	ldr	r0, [r6]
   1f3c0:	cmp	r7, #1
   1f3c4:	beq	1f3e4 <__assert_fail@plt+0xc934>
   1f3c8:	cmp	r7, #0
   1f3cc:	bne	1f3f8 <__assert_fail@plt+0xc948>
   1f3d0:	movw	r3, #43540	; 0xaa14
   1f3d4:	movw	r2, #43534	; 0xaa0e
   1f3d8:	movt	r3, #4
   1f3dc:	movt	r2, #4
   1f3e0:	b	1f408 <__assert_fail@plt+0xc958>
   1f3e4:	movw	r3, #43543	; 0xaa17
   1f3e8:	movw	r2, #49407	; 0xc0ff
   1f3ec:	movt	r3, #4
   1f3f0:	movt	r2, #4
   1f3f4:	b	1f408 <__assert_fail@plt+0xc958>
   1f3f8:	movw	r3, #44699	; 0xae9b
   1f3fc:	movw	r2, #43537	; 0xaa11
   1f400:	movt	r3, #4
   1f404:	movt	r2, #4
   1f408:	movw	r1, #43513	; 0xa9f9
   1f40c:	movt	r1, #4
   1f410:	bl	127f8 <fprintf@plt>
   1f414:	ldrd	r2, [r5]
   1f418:	ldr	r0, [r6]
   1f41c:	movw	r1, #44702	; 0xae9e
   1f420:	movt	r1, #4
   1f424:	bl	127f8 <fprintf@plt>
   1f428:	b	1f394 <__assert_fail@plt+0xc8e4>
   1f42c:	push	{r4, sl, fp, lr}
   1f430:	add	fp, sp, #8
   1f434:	movw	r4, #60640	; 0xece0
   1f438:	movt	r4, #5
   1f43c:	ldrb	r0, [r4]
   1f440:	cmp	r0, #0
   1f444:	popne	{r4, sl, fp, pc}
   1f448:	movw	r0, #44963	; 0xafa3
   1f44c:	mov	r2, #0
   1f450:	movt	r0, #4
   1f454:	mov	r1, r0
   1f458:	bl	126c0 <fnmatch@plt>
   1f45c:	cmp	r0, #0
   1f460:	bne	1f4b0 <__assert_fail@plt+0xca00>
   1f464:	movw	r0, #44967	; 0xafa7
   1f468:	movw	r1, #44963	; 0xafa3
   1f46c:	mov	r2, #0
   1f470:	movt	r0, #4
   1f474:	movt	r1, #4
   1f478:	bl	126c0 <fnmatch@plt>
   1f47c:	cmp	r0, #0
   1f480:	beq	1f4b0 <__assert_fail@plt+0xca00>
   1f484:	movw	r0, #44967	; 0xafa7
   1f488:	movw	r1, #44963	; 0xafa3
   1f48c:	mov	r2, #16
   1f490:	movt	r0, #4
   1f494:	movt	r1, #4
   1f498:	bl	126c0 <fnmatch@plt>
   1f49c:	cmp	r0, #0
   1f4a0:	bne	1f4b0 <__assert_fail@plt+0xca00>
   1f4a4:	mov	r0, #1
   1f4a8:	strb	r0, [r4]
   1f4ac:	pop	{r4, sl, fp, pc}
   1f4b0:	movw	r1, #44971	; 0xafab
   1f4b4:	mov	r0, #0
   1f4b8:	mov	r2, #5
   1f4bc:	movt	r1, #4
   1f4c0:	bl	12564 <dcgettext@plt>
   1f4c4:	mov	r2, r0
   1f4c8:	mov	r0, #1
   1f4cc:	mov	r1, #0
   1f4d0:	bl	1269c <error@plt>
   1f4d4:	push	{r4, r5, r6, r7, fp, lr}
   1f4d8:	add	fp, sp, #16
   1f4dc:	sub	sp, sp, #8
   1f4e0:	mov	r5, r0
   1f4e4:	movw	r0, #61044	; 0xee74
   1f4e8:	mov	r4, r1
   1f4ec:	movt	r0, #5
   1f4f0:	ldrb	r1, [r0, #17]
   1f4f4:	cmp	r1, #0
   1f4f8:	bne	1f580 <__assert_fail@plt+0xcad0>
   1f4fc:	ldrb	r0, [r0, #16]
   1f500:	cmp	r0, #0
   1f504:	beq	1f580 <__assert_fail@plt+0xcad0>
   1f508:	mov	r0, r2
   1f50c:	mov	r1, #47	; 0x2f
   1f510:	bl	127c8 <strchr@plt>
   1f514:	cmp	r0, #0
   1f518:	beq	1f580 <__assert_fail@plt+0xcad0>
   1f51c:	movw	r1, #45026	; 0xafe2
   1f520:	mov	r0, #0
   1f524:	mov	r2, #5
   1f528:	movt	r1, #4
   1f52c:	bl	12564 <dcgettext@plt>
   1f530:	mov	r6, r0
   1f534:	mov	r0, #0
   1f538:	mov	r1, r5
   1f53c:	bl	19960 <__assert_fail@plt+0x6eb0>
   1f540:	movw	r1, #33590	; 0x8336
   1f544:	mov	r5, r0
   1f548:	mov	r0, #1
   1f54c:	movt	r1, #4
   1f550:	bl	19960 <__assert_fail@plt+0x6eb0>
   1f554:	mov	r7, r0
   1f558:	mov	r0, #2
   1f55c:	mov	r1, r4
   1f560:	bl	19960 <__assert_fail@plt+0x6eb0>
   1f564:	str	r0, [sp, #4]
   1f568:	mov	r0, #0
   1f56c:	mov	r1, #0
   1f570:	mov	r2, r6
   1f574:	mov	r3, r5
   1f578:	str	r7, [sp]
   1f57c:	bl	1269c <error@plt>
   1f580:	sub	sp, fp, #16
   1f584:	pop	{r4, r5, r6, r7, fp, pc}
   1f588:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   1f58c:	add	fp, sp, #24
   1f590:	sub	sp, sp, #8
   1f594:	mov	r9, r3
   1f598:	mov	r4, r2
   1f59c:	mov	r6, r1
   1f5a0:	mov	r7, r0
   1f5a4:	bl	1f42c <__assert_fail@plt+0xc97c>
   1f5a8:	mov	r5, #0
   1f5ac:	cmp	r6, #0
   1f5b0:	beq	1f62c <__assert_fail@plt+0xcb7c>
   1f5b4:	ldr	r0, [r4]
   1f5b8:	ldr	r6, [r6, r0, lsl #2]
   1f5bc:	cmp	r6, #0
   1f5c0:	beq	1f62c <__assert_fail@plt+0xcb7c>
   1f5c4:	ldr	r8, [fp, #8]
   1f5c8:	add	r0, r0, #1
   1f5cc:	mov	r2, r6
   1f5d0:	str	r0, [r4]
   1f5d4:	mov	r0, r7
   1f5d8:	mov	r1, r8
   1f5dc:	bl	18018 <__assert_fail@plt+0x5568>
   1f5e0:	movw	r1, #44940	; 0xaf8c
   1f5e4:	mov	r7, r0
   1f5e8:	str	r6, [r0, #40]	; 0x28
   1f5ec:	mov	r0, #0
   1f5f0:	movt	r1, #4
   1f5f4:	strh	r0, [r7, #18]
   1f5f8:	mov	r0, r6
   1f5fc:	bl	129e4 <strpbrk@plt>
   1f600:	add	r1, pc, #176	; 0xb0
   1f604:	cmp	r0, #0
   1f608:	mov	r5, #1
   1f60c:	addeq	r1, r1, #4
   1f610:	ldr	r0, [r1]
   1f614:	str	r0, [r7, #28]
   1f618:	movw	r0, #61044	; 0xee74
   1f61c:	movt	r0, #5
   1f620:	ldrb	r0, [r0, #17]
   1f624:	cmp	r0, #0
   1f628:	beq	1f638 <__assert_fail@plt+0xcb88>
   1f62c:	mov	r0, r5
   1f630:	sub	sp, fp, #24
   1f634:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   1f638:	mov	r0, r6
   1f63c:	mov	r1, #47	; 0x2f
   1f640:	bl	12924 <strrchr@plt>
   1f644:	cmp	r0, #0
   1f648:	beq	1f62c <__assert_fail@plt+0xcb7c>
   1f64c:	ldrb	r0, [r0, #1]
   1f650:	cmp	r0, #0
   1f654:	bne	1f62c <__assert_fail@plt+0xcb7c>
   1f658:	movw	r0, #17548	; 0x448c
   1f65c:	movt	r0, #1
   1f660:	sub	r0, r8, r0
   1f664:	clz	r0, r0
   1f668:	lsr	r1, r0, #5
   1f66c:	mov	r0, r6
   1f670:	bl	15e28 <__assert_fail@plt+0x3378>
   1f674:	cmp	r0, #0
   1f678:	bne	1f62c <__assert_fail@plt+0xcb7c>
   1f67c:	movw	r1, #45204	; 0xb094
   1f680:	mov	r0, #0
   1f684:	mov	r2, #5
   1f688:	movt	r1, #4
   1f68c:	bl	12564 <dcgettext@plt>
   1f690:	mov	r2, r0
   1f694:	mov	r0, #0
   1f698:	mov	r1, #0
   1f69c:	mov	r3, r9
   1f6a0:	str	r6, [sp]
   1f6a4:	bl	1269c <error@plt>
   1f6a8:	movw	r0, #52343	; 0xcc77
   1f6ac:	movt	r0, #12843	; 0x322b
   1f6b0:	str	r0, [r7, #28]
   1f6b4:	b	1f62c <__assert_fail@plt+0xcb7c>
   1f6b8:	svccc	0x004ccccd
   1f6bc:	stclcc	12, cr12, [ip, #820]	; 0x334
   1f6c0:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   1f6c4:	add	fp, sp, #24
   1f6c8:	sub	sp, sp, #8
   1f6cc:	mov	r6, r3
   1f6d0:	mov	r3, r0
   1f6d4:	mov	r0, #0
   1f6d8:	cmp	r3, #0
   1f6dc:	beq	1f7b4 <__assert_fail@plt+0xcd04>
   1f6e0:	ldr	r7, [r1]
   1f6e4:	ldr	r4, [r3, r7, lsl #2]
   1f6e8:	cmp	r4, #0
   1f6ec:	beq	1f7b4 <__assert_fail@plt+0xcd04>
   1f6f0:	add	r0, r7, #1
   1f6f4:	str	r0, [r1]
   1f6f8:	movw	r1, #19504	; 0x4c30
   1f6fc:	mov	r0, r2
   1f700:	mov	r2, r4
   1f704:	movt	r1, #1
   1f708:	bl	18018 <__assert_fail@plt+0x5568>
   1f70c:	mov	r5, #0
   1f710:	mov	r8, r0
   1f714:	strh	r5, [r0, #18]
   1f718:	mov	r0, #32
   1f71c:	bl	2e038 <__assert_fail@plt+0x1b588>
   1f720:	mov	r7, r0
   1f724:	str	r0, [r8, #40]	; 0x28
   1f728:	mov	r0, #100	; 0x64
   1f72c:	str	r0, [r7, #4]
   1f730:	mov	r0, #100	; 0x64
   1f734:	bl	2e038 <__assert_fail@plt+0x1b588>
   1f738:	str	r5, [r7, #16]
   1f73c:	str	r0, [r7]
   1f740:	mov	r0, r6
   1f744:	bl	34b08 <__assert_fail@plt+0x22058>
   1f748:	mov	r0, r4
   1f74c:	str	r5, [r7, #20]
   1f750:	str	r6, [r7, #12]
   1f754:	bl	127bc <strlen@plt>
   1f758:	mov	r1, r0
   1f75c:	mov	r0, r4
   1f760:	mov	r2, r7
   1f764:	bl	33590 <__assert_fail@plt+0x20ae0>
   1f768:	cmp	r0, #0
   1f76c:	bne	1f7bc <__assert_fail@plt+0xcd0c>
   1f770:	movw	r1, #44940	; 0xaf8c
   1f774:	mov	r0, r4
   1f778:	movt	r1, #4
   1f77c:	bl	129e4 <strpbrk@plt>
   1f780:	cmp	r0, #0
   1f784:	beq	1f790 <__assert_fail@plt+0xcce0>
   1f788:	vldr	s0, [pc, #92]	; 1f7ec <__assert_fail@plt+0xcd3c>
   1f78c:	b	1f7ac <__assert_fail@plt+0xccfc>
   1f790:	mov	r0, r4
   1f794:	mov	r1, #46	; 0x2e
   1f798:	bl	127c8 <strchr@plt>
   1f79c:	add	r1, pc, #76	; 0x4c
   1f7a0:	cmp	r0, #0
   1f7a4:	addeq	r1, r1, #4
   1f7a8:	vldr	s0, [r1]
   1f7ac:	mov	r0, #1
   1f7b0:	vstr	s0, [r8, #28]
   1f7b4:	sub	sp, fp, #24
   1f7b8:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   1f7bc:	movw	r1, #45268	; 0xb0d4
   1f7c0:	mov	r6, r0
   1f7c4:	mov	r0, #0
   1f7c8:	mov	r2, #5
   1f7cc:	movt	r1, #4
   1f7d0:	bl	12564 <dcgettext@plt>
   1f7d4:	mov	r2, r0
   1f7d8:	mov	r0, #1
   1f7dc:	mov	r1, #0
   1f7e0:	mov	r3, r4
   1f7e4:	str	r6, [sp]
   1f7e8:	bl	1269c <error@plt>
   1f7ec:	svccc	0x004ccccd
   1f7f0:	svccc	0x004ccccd
   1f7f4:	stclcc	12, cr12, [ip, #820]	; 0x334
   1f7f8:	push	{r4, r5, r6, r7, fp, lr}
   1f7fc:	add	fp, sp, #16
   1f800:	sub	sp, sp, #8
   1f804:	mov	r6, r2
   1f808:	mov	r2, r0
   1f80c:	mov	r0, #0
   1f810:	cmp	r2, #0
   1f814:	beq	1f8b8 <__assert_fail@plt+0xce08>
   1f818:	ldr	r3, [r1]
   1f81c:	ldr	r5, [r2, r3, lsl #2]
   1f820:	cmp	r5, #0
   1f824:	beq	1f8b8 <__assert_fail@plt+0xce08>
   1f828:	add	r0, r2, r3, lsl #2
   1f82c:	ldr	r4, [r0, #-4]
   1f830:	add	r0, r3, #1
   1f834:	str	r0, [r1]
   1f838:	movw	r1, #44708	; 0xaea4
   1f83c:	mov	r0, r5
   1f840:	movt	r1, #4
   1f844:	bl	12aa4 <strspn@plt>
   1f848:	movw	r7, #61044	; 0xee74
   1f84c:	cmp	r0, #1
   1f850:	movt	r7, #5
   1f854:	blt	1f8c0 <__assert_fail@plt+0xce10>
   1f858:	ldrb	r0, [r5, r0]
   1f85c:	cmp	r0, #0
   1f860:	bne	1f8c0 <__assert_fail@plt+0xce10>
   1f864:	ldr	r1, [r7, #72]	; 0x48
   1f868:	mov	r0, r5
   1f86c:	bl	221f8 <__assert_fail@plt+0xf748>
   1f870:	cmp	r0, #0
   1f874:	str	r0, [r6]
   1f878:	bmi	1f8c0 <__assert_fail@plt+0xce10>
   1f87c:	movw	r1, #60636	; 0xecdc
   1f880:	movt	r1, #5
   1f884:	ldr	r0, [r1]
   1f888:	cmp	r0, #0
   1f88c:	bne	1f8a0 <__assert_fail@plt+0xcdf0>
   1f890:	movw	r0, #46340	; 0xb504
   1f894:	movt	r0, #4
   1f898:	add	r0, r0, #1296	; 0x510
   1f89c:	str	r0, [r1]
   1f8a0:	bl	180b4 <__assert_fail@plt+0x5604>
   1f8a4:	mov	r1, #1065353216	; 0x3f800000
   1f8a8:	str	r1, [r0, #28]
   1f8ac:	mov	r1, #0
   1f8b0:	strh	r1, [r0, #18]
   1f8b4:	mov	r0, #1
   1f8b8:	sub	sp, fp, #16
   1f8bc:	pop	{r4, r5, r6, r7, fp, pc}
   1f8c0:	movw	r1, #45314	; 0xb102
   1f8c4:	mov	r0, #0
   1f8c8:	mov	r2, #5
   1f8cc:	movt	r1, #4
   1f8d0:	bl	12564 <dcgettext@plt>
   1f8d4:	ldr	r1, [r7, #72]	; 0x48
   1f8d8:	mov	r6, r0
   1f8dc:	mov	r0, #0
   1f8e0:	mov	r2, r5
   1f8e4:	bl	2c88c <__assert_fail@plt+0x19ddc>
   1f8e8:	str	r0, [sp]
   1f8ec:	mov	r0, #1
   1f8f0:	mov	r1, #0
   1f8f4:	mov	r2, r6
   1f8f8:	mov	r3, r4
   1f8fc:	bl	1269c <error@plt>
   1f900:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   1f904:	add	fp, sp, #24
   1f908:	sub	sp, sp, #8
   1f90c:	movw	r4, #20408	; 0x4fb8
   1f910:	mov	r6, r3
   1f914:	mov	r3, r0
   1f918:	movw	r0, #45724	; 0xb29c
   1f91c:	movw	r8, #45731	; 0xb2a3
   1f920:	movt	r4, #1
   1f924:	movt	r0, #4
   1f928:	movt	r8, #4
   1f92c:	cmp	r6, r4
   1f930:	moveq	r8, r0
   1f934:	mov	r0, #0
   1f938:	cmp	r3, #0
   1f93c:	beq	1fb48 <__assert_fail@plt+0xd098>
   1f940:	ldr	r7, [r1]
   1f944:	ldr	r5, [r3, r7, lsl #2]
   1f948:	cmp	r5, #0
   1f94c:	beq	1fb48 <__assert_fail@plt+0xd098>
   1f950:	add	r0, r7, #1
   1f954:	str	r0, [r1]
   1f958:	ldrb	r0, [r5]
   1f95c:	cmp	r0, #0
   1f960:	beq	1fbd4 <__assert_fail@plt+0xd124>
   1f964:	mov	r0, r2
   1f968:	mov	r1, r6
   1f96c:	mov	r2, r5
   1f970:	bl	18018 <__assert_fail@plt+0x5568>
   1f974:	mov	r1, #0
   1f978:	vldr	s0, [pc, #608]	; 1fbe0 <__assert_fail@plt+0xd130>
   1f97c:	vldr	s2, [pc, #608]	; 1fbe4 <__assert_fail@plt+0xd134>
   1f980:	vldr	s4, [pc, #624]	; 1fbf8 <__assert_fail@plt+0xd148>
   1f984:	vldr	s6, [pc, #616]	; 1fbf4 <__assert_fail@plt+0xd144>
   1f988:	vldr	s10, [pc, #608]	; 1fbf0 <__assert_fail@plt+0xd140>
   1f98c:	vldr	s12, [pc, #600]	; 1fbec <__assert_fail@plt+0xd13c>
   1f990:	vldr	s14, [pc, #592]	; 1fbe8 <__assert_fail@plt+0xd138>
   1f994:	vmov.f32	s8, #108	; 0x3f600000  0.875
   1f998:	mvn	r2, #67	; 0x43
   1f99c:	mov	r3, #1
   1f9a0:	str	r1, [r0, #28]
   1f9a4:	subs	r1, r6, r4
   1f9a8:	movwne	r1, #1
   1f9ac:	strb	r1, [r0, #19]
   1f9b0:	sub	r1, r6, r4
   1f9b4:	clz	r1, r1
   1f9b8:	lsr	r1, r1, #5
   1f9bc:	strb	r1, [r0, #18]
   1f9c0:	add	r1, r0, #40	; 0x28
   1f9c4:	ldrb	r4, [r5]
   1f9c8:	uxtab	r7, r2, r4
   1f9cc:	mov	r6, r5
   1f9d0:	cmp	r7, #47	; 0x2f
   1f9d4:	bhi	1fb38 <__assert_fail@plt+0xd088>
   1f9d8:	add	r4, pc, #8
   1f9dc:	mov	r5, #0
   1f9e0:	vmov.f32	s1, s2
   1f9e4:	ldr	pc, [r4, r7, lsl #2]
   1f9e8:	andeq	pc, r1, ip, asr fp	; <UNPREDICTABLE>
   1f9ec:	andeq	pc, r1, r0, asr fp	; <UNPREDICTABLE>
   1f9f0:	andeq	pc, r1, r0, asr fp	; <UNPREDICTABLE>
   1f9f4:	andeq	pc, r1, r0, asr fp	; <UNPREDICTABLE>
   1f9f8:	andeq	pc, r1, r0, asr fp	; <UNPREDICTABLE>
   1f9fc:	andeq	pc, r1, r0, asr fp	; <UNPREDICTABLE>
   1fa00:	andeq	pc, r1, r0, asr fp	; <UNPREDICTABLE>
   1fa04:	andeq	pc, r1, r0, asr fp	; <UNPREDICTABLE>
   1fa08:	andeq	pc, r1, r0, asr fp	; <UNPREDICTABLE>
   1fa0c:	andeq	pc, r1, r0, asr fp	; <UNPREDICTABLE>
   1fa10:	andeq	pc, r1, r0, asr fp	; <UNPREDICTABLE>
   1fa14:	andeq	pc, r1, r0, asr fp	; <UNPREDICTABLE>
   1fa18:	andeq	pc, r1, r0, asr fp	; <UNPREDICTABLE>
   1fa1c:	andeq	pc, r1, r0, asr fp	; <UNPREDICTABLE>
   1fa20:	andeq	pc, r1, r0, asr fp	; <UNPREDICTABLE>
   1fa24:	andeq	pc, r1, r0, asr fp	; <UNPREDICTABLE>
   1fa28:	andeq	pc, r1, r0, asr fp	; <UNPREDICTABLE>
   1fa2c:	andeq	pc, r1, r0, asr fp	; <UNPREDICTABLE>
   1fa30:	andeq	pc, r1, r0, asr fp	; <UNPREDICTABLE>
   1fa34:	andeq	pc, r1, r0, asr fp	; <UNPREDICTABLE>
   1fa38:	andeq	pc, r1, r0, asr fp	; <UNPREDICTABLE>
   1fa3c:	andeq	pc, r1, r0, asr fp	; <UNPREDICTABLE>
   1fa40:	andeq	pc, r1, r0, asr fp	; <UNPREDICTABLE>
   1fa44:	andeq	pc, r1, r0, asr fp	; <UNPREDICTABLE>
   1fa48:	andeq	pc, r1, r0, asr fp	; <UNPREDICTABLE>
   1fa4c:	andeq	pc, r1, r0, asr fp	; <UNPREDICTABLE>
   1fa50:	andeq	pc, r1, r0, asr fp	; <UNPREDICTABLE>
   1fa54:	andeq	pc, r1, r0, asr fp	; <UNPREDICTABLE>
   1fa58:	andeq	pc, r1, r0, asr fp	; <UNPREDICTABLE>
   1fa5c:	andeq	pc, r1, r0, asr fp	; <UNPREDICTABLE>
   1fa60:	andeq	pc, r1, ip, ror #21
   1fa64:	andeq	pc, r1, r8, lsr #21
   1fa68:	andeq	pc, r1, ip, asr #21
   1fa6c:	andeq	pc, r1, r0, asr fp	; <UNPREDICTABLE>
   1fa70:	andeq	pc, r1, r4, ror #21
   1fa74:	andeq	pc, r1, r0, asr fp	; <UNPREDICTABLE>
   1fa78:	andeq	pc, r1, r0, asr fp	; <UNPREDICTABLE>
   1fa7c:	andeq	pc, r1, r0, asr fp	; <UNPREDICTABLE>
   1fa80:	andeq	pc, r1, r0, asr fp	; <UNPREDICTABLE>
   1fa84:	andeq	pc, r1, r0, asr fp	; <UNPREDICTABLE>
   1fa88:	ldrdeq	pc, [r1], -r8
   1fa8c:	andeq	pc, r1, r0, asr fp	; <UNPREDICTABLE>
   1fa90:	andeq	pc, r1, r0, asr fp	; <UNPREDICTABLE>
   1fa94:	andeq	pc, r1, r0, asr fp	; <UNPREDICTABLE>
   1fa98:			; <UNDEFINED> instruction: 0x0001fab4
   1fa9c:	andeq	pc, r1, r0, asr fp	; <UNPREDICTABLE>
   1faa0:	andeq	pc, r1, r0, asr fp	; <UNPREDICTABLE>
   1faa4:	andeq	pc, r1, r0, asr #21
   1faa8:	vmov.f32	s1, s4
   1faac:	mov	r5, #1
   1fab0:	b	1faec <__assert_fail@plt+0xd03c>
   1fab4:	mov	r5, #5
   1fab8:	vmov.f32	s1, s12
   1fabc:	b	1faec <__assert_fail@plt+0xd03c>
   1fac0:	mov	r5, #6
   1fac4:	vmov.f32	s1, s14
   1fac8:	b	1faec <__assert_fail@plt+0xd03c>
   1facc:	mov	r5, #2
   1fad0:	vmov.f32	s1, s6
   1fad4:	b	1faec <__assert_fail@plt+0xd03c>
   1fad8:	mov	r5, #4
   1fadc:	vmov.f32	s1, s10
   1fae0:	b	1faec <__assert_fail@plt+0xd03c>
   1fae4:	mov	r5, #3
   1fae8:	vmov.f32	s1, s8
   1faec:	ldrb	r7, [r1, r5]
   1faf0:	cmp	r7, #0
   1faf4:	bne	1fb80 <__assert_fail@plt+0xd0d0>
   1faf8:	vadd.f32	s0, s1, s0
   1fafc:	vstr	s0, [r0, #28]
   1fb00:	strb	r3, [r1, r5]
   1fb04:	mov	r5, r6
   1fb08:	ldrb	r4, [r5, #1]!
   1fb0c:	cmp	r4, #0
   1fb10:	beq	1f9c8 <__assert_fail@plt+0xcf18>
   1fb14:	cmp	r4, #44	; 0x2c
   1fb18:	bne	1fbac <__assert_fail@plt+0xd0fc>
   1fb1c:	ldrb	r4, [r6, #2]!
   1fb20:	mov	r5, r6
   1fb24:	cmp	r4, #0
   1fb28:	bne	1f9c8 <__assert_fail@plt+0xcf18>
   1fb2c:	movw	r1, #46019	; 0xb3c3
   1fb30:	movt	r1, #4
   1fb34:	b	1fbb4 <__assert_fail@plt+0xd104>
   1fb38:	uxtb	r0, r4
   1fb3c:	cmp	r0, #0
   1fb40:	bne	1fb50 <__assert_fail@plt+0xd0a0>
   1fb44:	mov	r0, #1
   1fb48:	sub	sp, fp, #24
   1fb4c:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   1fb50:	movw	r1, #45889	; 0xb341
   1fb54:	movt	r1, #4
   1fb58:	b	1fb64 <__assert_fail@plt+0xd0b4>
   1fb5c:	movw	r1, #45788	; 0xb2dc
   1fb60:	movt	r1, #4
   1fb64:	mov	r0, #0
   1fb68:	mov	r2, #5
   1fb6c:	bl	12564 <dcgettext@plt>
   1fb70:	mov	r2, r0
   1fb74:	ldrb	r0, [r6]
   1fb78:	str	r0, [sp]
   1fb7c:	b	1fbc4 <__assert_fail@plt+0xd114>
   1fb80:	movw	r1, #45916	; 0xb35c
   1fb84:	mov	r0, #0
   1fb88:	mov	r2, #5
   1fb8c:	movt	r1, #4
   1fb90:	bl	12564 <dcgettext@plt>
   1fb94:	ldrb	r3, [r6]
   1fb98:	mov	r2, r0
   1fb9c:	mov	r0, #1
   1fba0:	mov	r1, #0
   1fba4:	str	r8, [sp]
   1fba8:	bl	1269c <error@plt>
   1fbac:	movw	r1, #45969	; 0xb391
   1fbb0:	movt	r1, #4
   1fbb4:	mov	r0, #0
   1fbb8:	mov	r2, #5
   1fbbc:	bl	12564 <dcgettext@plt>
   1fbc0:	mov	r2, r0
   1fbc4:	mov	r0, #1
   1fbc8:	mov	r1, #0
   1fbcc:	mov	r3, r8
   1fbd0:	bl	1269c <error@plt>
   1fbd4:	movw	r1, #45737	; 0xb2a9
   1fbd8:	movt	r1, #4
   1fbdc:	b	1fbb4 <__assert_fail@plt+0xd104>
   1fbe0:	andeq	r0, r0, r0
   1fbe4:	bcc	1a51e9c <stdout@@GLIBC_2.4+0x19f3940>
   1fbe8:			; <UNDEFINED> instruction: 0x378560fd
   1fbec:	usatcc	r7, #29, lr, asr #16
   1fbf0:	cfldr64cc	mvdx12, [lr], #436	; 0x1b4
   1fbf4:	ldccc	3, cr13, [ip, #364]!	; 0x16c
   1fbf8:	stmibcc	r8!, {r2, r4, r5, r6, r9, lr}^
   1fbfc:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1fc00:	add	fp, sp, #28
   1fc04:	sub	sp, sp, #20
   1fc08:	movw	r5, #60644	; 0xece4
   1fc0c:	str	r1, [sp, #12]
   1fc10:	str	r0, [sp, #16]
   1fc14:	ldr	r4, [r0, #12]
   1fc18:	ldr	r0, [fp, #20]
   1fc1c:	ldr	r1, [fp, #12]
   1fc20:	mov	r9, r3
   1fc24:	mov	r7, r2
   1fc28:	movt	r5, #5
   1fc2c:	ldr	r6, [r5]
   1fc30:	cmp	r6, #0
   1fc34:	bne	1fc54 <__assert_fail@plt+0xd1a4>
   1fc38:	mov	r8, r0
   1fc3c:	add	r0, r4, #1
   1fc40:	bl	2e038 <__assert_fail@plt+0x1b588>
   1fc44:	ldr	r1, [fp, #12]
   1fc48:	mov	r6, r0
   1fc4c:	mov	r0, r8
   1fc50:	str	r6, [r5]
   1fc54:	sub	sl, r4, #1
   1fc58:	add	r5, r0, r1
   1fc5c:	b	1fc94 <__assert_fail@plt+0xd1e4>
   1fc60:	ldr	r1, [fp, #16]
   1fc64:	mov	r0, r6
   1fc68:	sub	sl, sl, r5
   1fc6c:	bl	12660 <strcpy@plt>
   1fc70:	ldr	r0, [fp, #20]
   1fc74:	add	r6, r6, r0
   1fc78:	ldr	r0, [sp, #16]
   1fc7c:	ldr	r0, [r0, #20]
   1fc80:	sub	r9, r9, r0
   1fc84:	add	r7, r7, r0
   1fc88:	ldrb	r0, [r7]
   1fc8c:	cmp	r0, #0
   1fc90:	beq	1fd18 <__assert_fail@plt+0xd268>
   1fc94:	ldr	r0, [sp, #16]
   1fc98:	ldr	r1, [r0, #24]
   1fc9c:	mov	r0, r7
   1fca0:	bl	25038 <__assert_fail@plt+0x12588>
   1fca4:	cmp	r0, #0
   1fca8:	mov	r4, r9
   1fcac:	subne	r4, r0, r7
   1fcb0:	cmp	sl, r4
   1fcb4:	bls	1fd0c <__assert_fail@plt+0xd25c>
   1fcb8:	mov	r8, r0
   1fcbc:	mov	r0, r6
   1fcc0:	mov	r1, r7
   1fcc4:	mov	r2, r4
   1fcc8:	bl	1284c <strncpy@plt>
   1fccc:	sub	r9, r9, r4
   1fcd0:	add	r7, r7, r4
   1fcd4:	add	r6, r6, r4
   1fcd8:	sub	sl, sl, r4
   1fcdc:	cmp	r8, #0
   1fce0:	beq	1fc88 <__assert_fail@plt+0xd1d8>
   1fce4:	ldr	r4, [fp, #12]
   1fce8:	ldr	r1, [fp, #8]
   1fcec:	cmp	sl, r5
   1fcf0:	bls	1fd0c <__assert_fail@plt+0xd25c>
   1fcf4:	cmp	r1, #0
   1fcf8:	beq	1fc60 <__assert_fail@plt+0xd1b0>
   1fcfc:	mov	r0, r6
   1fd00:	bl	12660 <strcpy@plt>
   1fd04:	add	r6, r6, r4
   1fd08:	b	1fc60 <__assert_fail@plt+0xd1b0>
   1fd0c:	ldrb	r0, [r7]
   1fd10:	cmp	r0, #0
   1fd14:	bne	1fd58 <__assert_fail@plt+0xd2a8>
   1fd18:	movw	r1, #60644	; 0xece4
   1fd1c:	mov	r0, #0
   1fd20:	movt	r1, #5
   1fd24:	strb	r0, [r6]
   1fd28:	str	r0, [sp]
   1fd2c:	str	r0, [sp, #4]
   1fd30:	ldr	r0, [fp, #24]
   1fd34:	ldr	r2, [r1]
   1fd38:	ldr	r1, [sp, #12]
   1fd3c:	str	r0, [sp, #8]
   1fd40:	sub	r0, r6, r2
   1fd44:	add	r3, r0, #1
   1fd48:	ldr	r0, [sp, #16]
   1fd4c:	bl	1fd7c <__assert_fail@plt+0xd2cc>
   1fd50:	sub	sp, fp, #28
   1fd54:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1fd58:	movw	r1, #47732	; 0xba74
   1fd5c:	mov	r0, #0
   1fd60:	mov	r2, #5
   1fd64:	movt	r1, #4
   1fd68:	bl	12564 <dcgettext@plt>
   1fd6c:	mov	r2, r0
   1fd70:	mov	r0, #1
   1fd74:	mov	r1, #0
   1fd78:	bl	1269c <error@plt>
   1fd7c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1fd80:	add	fp, sp, #28
   1fd84:	sub	sp, sp, #4
   1fd88:	cmp	r2, #0
   1fd8c:	beq	1ff9c <__assert_fail@plt+0xd4ec>
   1fd90:	movw	sl, #48571	; 0xbdbb
   1fd94:	mov	r5, r0
   1fd98:	ldr	r6, [fp, #16]
   1fd9c:	ldr	r0, [fp, #12]
   1fda0:	mov	r9, r3
   1fda4:	mov	r8, r2
   1fda8:	mov	r4, r1
   1fdac:	movt	sl, #4
   1fdb0:	cmp	r2, sl
   1fdb4:	beq	1fe68 <__assert_fail@plt+0xd3b8>
   1fdb8:	ldr	r1, [r4, #16]
   1fdbc:	add	r0, r0, r9
   1fdc0:	add	r0, r0, r1
   1fdc4:	ldr	r1, [r5, #12]
   1fdc8:	cmp	r0, r1
   1fdcc:	bls	1fe24 <__assert_fail@plt+0xd374>
   1fdd0:	cmp	r6, #0
   1fdd4:	bne	1ffbc <__assert_fail@plt+0xd50c>
   1fdd8:	ldr	r0, [r5, #28]
   1fddc:	ldr	r1, [r4]
   1fde0:	cmp	r1, r0
   1fde4:	beq	1ffbc <__assert_fail@plt+0xd50c>
   1fde8:	ldr	r0, [r5, #24]
   1fdec:	cmp	r0, #0
   1fdf0:	bne	1ffc8 <__assert_fail@plt+0xd518>
   1fdf4:	ldr	r0, [r5]
   1fdf8:	cmp	r0, #0
   1fdfc:	beq	1fe14 <__assert_fail@plt+0xd364>
   1fe00:	ldr	r0, [r5, #36]	; 0x24
   1fe04:	cmp	r0, #0
   1fe08:	ldreq	r0, [r5, #40]	; 0x28
   1fe0c:	cmpeq	r0, #0
   1fe10:	bne	1ffc8 <__assert_fail@plt+0xd518>
   1fe14:	mov	r0, r5
   1fe18:	mov	r1, r4
   1fe1c:	bl	1ffec <__assert_fail@plt+0xd53c>
   1fe20:	b	1fe2c <__assert_fail@plt+0xd37c>
   1fe24:	cmp	r6, #0
   1fe28:	bne	1fe4c <__assert_fail@plt+0xd39c>
   1fe2c:	ldr	r0, [r5, #40]	; 0x28
   1fe30:	cmp	r0, #0
   1fe34:	beq	1fe4c <__assert_fail@plt+0xd39c>
   1fe38:	ldr	r1, [r5, #28]
   1fe3c:	ldr	r2, [r4]
   1fe40:	sub	r1, r2, r1
   1fe44:	cmp	r1, r0
   1fe48:	beq	1fe5c <__assert_fail@plt+0xd3ac>
   1fe4c:	ldr	r0, [r5, #16]
   1fe50:	ldr	r1, [r4]
   1fe54:	cmp	r1, r0
   1fe58:	bne	1fe68 <__assert_fail@plt+0xd3b8>
   1fe5c:	mov	r0, r5
   1fe60:	mov	r1, r4
   1fe64:	bl	1ffec <__assert_fail@plt+0xd53c>
   1fe68:	cmp	r6, #0
   1fe6c:	moveq	r0, #1
   1fe70:	streq	r0, [r4, #28]
   1fe74:	ldr	r0, [r4]
   1fe78:	ldr	r1, [r4, #8]
   1fe7c:	cmp	r0, r1
   1fe80:	bcc	1feb8 <__assert_fail@plt+0xd408>
   1fe84:	ldr	r0, [r4, #4]
   1fe88:	cmp	r0, #0
   1fe8c:	beq	1fea4 <__assert_fail@plt+0xd3f4>
   1fe90:	lsl	r2, r1, #1
   1fe94:	lsl	r1, r1, #3
   1fe98:	str	r2, [r4, #8]
   1fe9c:	bl	2e080 <__assert_fail@plt+0x1b5d0>
   1fea0:	b	1feb4 <__assert_fail@plt+0xd404>
   1fea4:	mov	r0, #64	; 0x40
   1fea8:	str	r0, [r4, #8]
   1feac:	mov	r0, #256	; 0x100
   1feb0:	bl	2e038 <__assert_fail@plt+0x1b588>
   1feb4:	str	r0, [r4, #4]
   1feb8:	cmp	r8, sl
   1febc:	beq	1ff44 <__assert_fail@plt+0xd494>
   1fec0:	mov	sl, r6
   1fec4:	ldr	r1, [fp, #8]
   1fec8:	ldm	r4, {r2, r3}
   1fecc:	ldr	r6, [r4, #12]
   1fed0:	ldr	r0, [r4, #16]
   1fed4:	add	r7, r2, #1
   1fed8:	str	r7, [r4]
   1fedc:	add	r7, r6, r0
   1fee0:	cmp	r1, #0
   1fee4:	str	r7, [r3, r2, lsl #2]
   1fee8:	beq	1ff08 <__assert_fail@plt+0xd458>
   1feec:	ldr	r2, [r4, #12]
   1fef0:	add	r0, r2, r0
   1fef4:	bl	12660 <strcpy@plt>
   1fef8:	ldr	r0, [r4, #16]
   1fefc:	ldr	r1, [fp, #12]
   1ff00:	add	r0, r0, r1
   1ff04:	str	r0, [r4, #16]
   1ff08:	ldr	r1, [r4, #12]
   1ff0c:	mov	r6, sl
   1ff10:	add	r0, r1, r0
   1ff14:	mov	r1, r8
   1ff18:	bl	12660 <strcpy@plt>
   1ff1c:	ldr	r0, [r4, #16]
   1ff20:	cmp	sl, #0
   1ff24:	add	r0, r0, r9
   1ff28:	str	r0, [r4, #16]
   1ff2c:	beq	1ff5c <__assert_fail@plt+0xd4ac>
   1ff30:	ldr	r0, [r5, #16]
   1ff34:	ldr	r1, [r4]
   1ff38:	cmp	r1, r0
   1ff3c:	beq	1ff7c <__assert_fail@plt+0xd4cc>
   1ff40:	b	1ff88 <__assert_fail@plt+0xd4d8>
   1ff44:	ldm	r4, {r0, r1}
   1ff48:	add	r2, r0, #1
   1ff4c:	str	r2, [r4]
   1ff50:	mov	r2, #0
   1ff54:	str	r2, [r1, r0, lsl #2]
   1ff58:	b	1ff88 <__assert_fail@plt+0xd4d8>
   1ff5c:	ldr	r0, [r5, #40]	; 0x28
   1ff60:	cmp	r0, #0
   1ff64:	beq	1ff30 <__assert_fail@plt+0xd480>
   1ff68:	ldr	r1, [r5, #28]
   1ff6c:	ldr	r2, [r4]
   1ff70:	sub	r1, r2, r1
   1ff74:	cmp	r1, r0
   1ff78:	bne	1ff30 <__assert_fail@plt+0xd480>
   1ff7c:	mov	r0, r5
   1ff80:	mov	r1, r4
   1ff84:	bl	1ffec <__assert_fail@plt+0xd53c>
   1ff88:	cmp	r6, #0
   1ff8c:	ldrne	r0, [r4, #16]
   1ff90:	strne	r0, [r4, #20]
   1ff94:	sub	sp, fp, #28
   1ff98:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1ff9c:	movw	r0, #47943	; 0xbb47
   1ffa0:	movw	r1, #47769	; 0xba99
   1ffa4:	movw	r3, #47955	; 0xbb53
   1ffa8:	movw	r2, #341	; 0x155
   1ffac:	movt	r0, #4
   1ffb0:	movt	r1, #4
   1ffb4:	movt	r3, #4
   1ffb8:	bl	12ab0 <__assert_fail@plt>
   1ffbc:	movw	r1, #48073	; 0xbbc9
   1ffc0:	movt	r1, #4
   1ffc4:	b	1ffd0 <__assert_fail@plt+0xd520>
   1ffc8:	movw	r1, #48132	; 0xbc04
   1ffcc:	movt	r1, #4
   1ffd0:	mov	r0, #0
   1ffd4:	mov	r2, #5
   1ffd8:	bl	12564 <dcgettext@plt>
   1ffdc:	mov	r2, r0
   1ffe0:	mov	r0, #1
   1ffe4:	mov	r1, #0
   1ffe8:	bl	1269c <error@plt>
   1ffec:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1fff0:	add	fp, sp, #28
   1fff4:	sub	sp, sp, #36	; 0x24
   1fff8:	mov	r5, r0
   1fffc:	mov	r0, #1
   20000:	mov	r8, r1
   20004:	str	r0, [r1, #28]
   20008:	ldr	r2, [r1]
   2000c:	ldmib	r1, {r0, r1}
   20010:	cmp	r2, r1
   20014:	bcc	20048 <__assert_fail@plt+0xd598>
   20018:	cmp	r0, #0
   2001c:	beq	20034 <__assert_fail@plt+0xd584>
   20020:	lsl	r2, r1, #1
   20024:	lsl	r1, r1, #3
   20028:	str	r2, [r8, #8]
   2002c:	bl	2e080 <__assert_fail@plt+0x1b5d0>
   20030:	b	20044 <__assert_fail@plt+0xd594>
   20034:	mov	r0, #64	; 0x40
   20038:	str	r0, [r8, #8]
   2003c:	mov	r0, #256	; 0x100
   20040:	bl	2e038 <__assert_fail@plt+0x1b588>
   20044:	str	r0, [r8, #4]
   20048:	ldr	r2, [r8]
   2004c:	mov	r3, #0
   20050:	adds	r1, r2, #1
   20054:	str	r1, [r8]
   20058:	str	r3, [r0, r2, lsl #2]
   2005c:	bcs	20530 <__assert_fail@plt+0xda80>
   20060:	ldr	r0, [r8, #4]
   20064:	ldr	r0, [r0, r2, lsl #2]
   20068:	cmp	r0, #0
   2006c:	bne	20548 <__assert_fail@plt+0xda98>
   20070:	mov	r0, #4
   20074:	add	r0, r0, r1, lsl #2
   20078:	bl	2e038 <__assert_fail@plt+0x1b588>
   2007c:	ldr	sl, [r8]
   20080:	ldr	lr, [r5, #28]
   20084:	mov	r9, r0
   20088:	add	r0, r0, #4
   2008c:	mov	ip, #0
   20090:	str	r5, [sp, #24]
   20094:	str	r8, [sp, #4]
   20098:	str	r0, [sp, #8]
   2009c:	mov	r4, sl
   200a0:	b	200d8 <__assert_fail@plt+0xd628>
   200a4:	add	r2, lr, #1
   200a8:	cmp	r6, r2
   200ac:	movhi	r2, r6
   200b0:	add	r0, r7, r3
   200b4:	sub	ip, r0, lr
   200b8:	ldr	sl, [r8]
   200bc:	cmp	r2, #0
   200c0:	add	r1, ip, #1
   200c4:	movweq	r2, #1
   200c8:	mov	r4, r2
   200cc:	sub	r0, sl, lr
   200d0:	cmp	r1, r0
   200d4:	bcs	204bc <__assert_fail@plt+0xda0c>
   200d8:	cmp	lr, #0
   200dc:	str	ip, [sp, #28]
   200e0:	str	r4, [sp, #32]
   200e4:	beq	20250 <__assert_fail@plt+0xd7a0>
   200e8:	ldr	r2, [r8, #4]
   200ec:	mov	r3, #0
   200f0:	cmp	lr, #4
   200f4:	bcc	201e0 <__assert_fail@plt+0xd730>
   200f8:	add	r7, r2, lr, lsl #2
   200fc:	cmp	r9, r7
   20100:	bcs	20110 <__assert_fail@plt+0xd660>
   20104:	add	r7, r9, lr, lsl #2
   20108:	cmp	r7, r2
   2010c:	bhi	201e0 <__assert_fail@plt+0xd730>
   20110:	bic	r3, lr, #3
   20114:	mov	r0, #1
   20118:	str	lr, [sp, #20]
   2011c:	mov	lr, #0
   20120:	mov	ip, #48	; 0x30
   20124:	sub	r6, r3, #4
   20128:	add	r7, r0, r6, lsr #2
   2012c:	cmp	r6, #12
   20130:	and	r0, r7, #3
   20134:	str	r0, [sp, #16]
   20138:	bcc	201a0 <__assert_fail@plt+0xd6f0>
   2013c:	ldr	r0, [sp, #16]
   20140:	mov	r4, #0
   20144:	mov	lr, #0
   20148:	sub	r8, r7, r0
   2014c:	add	r6, r2, r4
   20150:	add	r1, r9, r4
   20154:	add	r4, r4, #64	; 0x40
   20158:	subs	r8, r8, #4
   2015c:	add	lr, lr, #16
   20160:	mov	r0, r6
   20164:	mov	r5, r1
   20168:	add	r7, r1, #16
   2016c:	add	r1, r1, #32
   20170:	vld1.32	{d16-d17}, [r0], ip
   20174:	vst1.32	{d16-d17}, [r5], ip
   20178:	add	ip, r6, #16
   2017c:	vld1.32	{d16-d17}, [ip]
   20180:	mov	ip, #48	; 0x30
   20184:	vst1.32	{d16-d17}, [r7]
   20188:	add	r7, r6, #32
   2018c:	vld1.32	{d16-d17}, [r7]
   20190:	vst1.32	{d16-d17}, [r1]
   20194:	vld1.32	{d16-d17}, [r0]
   20198:	vst1.32	{d16-d17}, [r5]
   2019c:	bne	2014c <__assert_fail@plt+0xd69c>
   201a0:	ldr	r0, [sp, #16]
   201a4:	cmp	r0, #0
   201a8:	beq	201c8 <__assert_fail@plt+0xd718>
   201ac:	add	r7, r2, lr, lsl #2
   201b0:	add	r6, r9, lr, lsl #2
   201b4:	rsb	r5, r0, #0
   201b8:	vld1.32	{d16-d17}, [r7]!
   201bc:	adds	r5, r5, #1
   201c0:	vst1.32	{d16-d17}, [r6]!
   201c4:	bcc	201b8 <__assert_fail@plt+0xd708>
   201c8:	ldr	lr, [sp, #20]
   201cc:	ldr	r8, [sp, #4]
   201d0:	ldr	ip, [sp, #28]
   201d4:	ldr	r4, [sp, #32]
   201d8:	cmp	lr, r3
   201dc:	beq	20250 <__assert_fail@plt+0xd7a0>
   201e0:	mvn	r0, r3
   201e4:	ands	r6, lr, #3
   201e8:	add	r7, lr, r0
   201ec:	beq	20204 <__assert_fail@plt+0xd754>
   201f0:	ldr	r0, [r2, r3, lsl #2]
   201f4:	subs	r6, r6, #1
   201f8:	str	r0, [r9, r3, lsl #2]
   201fc:	add	r3, r3, #1
   20200:	bne	201f0 <__assert_fail@plt+0xd740>
   20204:	cmp	r7, #3
   20208:	bcc	20250 <__assert_fail@plt+0xd7a0>
   2020c:	sub	r7, lr, r3
   20210:	lsl	r3, r3, #2
   20214:	mov	r6, r9
   20218:	add	r0, r2, #16
   2021c:	ldr	r1, [r2, r3]!
   20220:	add	r5, r6, #16
   20224:	subs	r7, r7, #4
   20228:	str	r1, [r6, r3]!
   2022c:	ldr	r1, [r2, #4]
   20230:	str	r1, [r6, #4]
   20234:	ldr	r1, [r2, #8]
   20238:	str	r1, [r6, #8]
   2023c:	ldr	r1, [r2, #12]
   20240:	mov	r2, r0
   20244:	str	r1, [r6, #12]
   20248:	mov	r6, r5
   2024c:	bne	20218 <__assert_fail@plt+0xd768>
   20250:	ldr	r5, [sp, #24]
   20254:	cmp	lr, r4
   20258:	mov	r7, lr
   2025c:	bcs	202fc <__assert_fail@plt+0xd84c>
   20260:	add	r2, lr, ip
   20264:	mov	r7, lr
   20268:	cmp	r2, sl
   2026c:	bcs	202fc <__assert_fail@plt+0xd84c>
   20270:	mvn	r0, lr
   20274:	ldr	r3, [r8, #4]
   20278:	add	r1, r4, r0
   2027c:	add	r0, sl, r0
   20280:	sub	r7, r0, ip
   20284:	mov	r0, r1
   20288:	cmp	r7, r1
   2028c:	movcc	r0, r7
   20290:	add	r5, r0, #1
   20294:	cmp	r5, #4
   20298:	bcc	202d8 <__assert_fail@plt+0xd828>
   2029c:	cmp	r7, r1
   202a0:	movcc	r1, r7
   202a4:	add	r7, r9, lr, lsl #2
   202a8:	add	r0, r2, r1
   202ac:	add	r0, r3, r0, lsl #2
   202b0:	add	r0, r0, #4
   202b4:	cmp	r7, r0
   202b8:	bcs	2040c <__assert_fail@plt+0xd95c>
   202bc:	lsl	r0, lr, #2
   202c0:	add	r0, r0, r1, lsl #2
   202c4:	ldr	r1, [sp, #8]
   202c8:	add	r0, r1, r0
   202cc:	add	r1, r3, r2, lsl #2
   202d0:	cmp	r0, r1
   202d4:	bls	2040c <__assert_fail@plt+0xd95c>
   202d8:	ldr	r5, [sp, #24]
   202dc:	mov	r7, lr
   202e0:	ldr	r0, [r3, r2, lsl #2]
   202e4:	add	r2, r2, #1
   202e8:	cmp	r2, sl
   202ec:	str	r0, [r9, r7, lsl #2]
   202f0:	add	r7, r7, #1
   202f4:	cmpcc	r7, r4
   202f8:	bcc	202e0 <__assert_fail@plt+0xd830>
   202fc:	cmp	r7, lr
   20300:	bcc	204ec <__assert_fail@plt+0xda3c>
   20304:	mov	r0, #0
   20308:	mov	r2, r7
   2030c:	mov	r3, r9
   20310:	str	r0, [r9, r7, lsl #2]
   20314:	mov	r0, r5
   20318:	ldr	r1, [r8, #24]
   2031c:	ldr	r6, [r5, #32]
   20320:	blx	r6
   20324:	cmp	r0, #0
   20328:	beq	2034c <__assert_fail@plt+0xd89c>
   2032c:	ldr	r0, [r8, #36]	; 0x24
   20330:	ldr	r6, [sp, #32]
   20334:	cmp	r0, r6
   20338:	bcs	20390 <__assert_fail@plt+0xd8e0>
   2033c:	ldr	r3, [sp, #28]
   20340:	str	r6, [r8, #36]	; 0x24
   20344:	mov	r0, r6
   20348:	b	2039c <__assert_fail@plt+0xd8ec>
   2034c:	ldr	lr, [r5, #28]
   20350:	ldr	r1, [sp, #32]
   20354:	add	r2, lr, #1
   20358:	cmp	r1, r2
   2035c:	bls	2050c <__assert_fail@plt+0xda5c>
   20360:	ldr	r7, [r8, #40]	; 0x28
   20364:	ldr	ip, [sp, #28]
   20368:	sub	r0, r7, #1
   2036c:	cmp	r0, r1
   20370:	strcs	r1, [r8, #40]	; 0x28
   20374:	movcs	r7, r1
   20378:	ldr	r3, [r8, #36]	; 0x24
   2037c:	cmp	r3, #0
   20380:	cmpne	r7, r3
   20384:	bhi	203e0 <__assert_fail@plt+0xd930>
   20388:	lsr	r1, r1, #1
   2038c:	b	203f8 <__assert_fail@plt+0xd948>
   20390:	ldr	r3, [sp, #28]
   20394:	cmp	r0, #0
   20398:	beq	203c4 <__assert_fail@plt+0xd914>
   2039c:	ldr	r1, [r8, #40]	; 0x28
   203a0:	cmp	r1, r0
   203a4:	bls	203c4 <__assert_fail@plt+0xd914>
   203a8:	sub	r0, r1, r0
   203ac:	mov	r1, #0
   203b0:	cmp	r1, r0, lsr #1
   203b4:	addeq	r6, r6, #1
   203b8:	lsrne	r0, r0, #1
   203bc:	addne	r6, r0, r6
   203c0:	b	203cc <__assert_fail@plt+0xd91c>
   203c4:	cmn	r6, #1
   203c8:	addne	r6, r6, #1
   203cc:	ldr	lr, [r5, #28]
   203d0:	cmp	lr, #0
   203d4:	bne	200a4 <__assert_fail@plt+0xd5f4>
   203d8:	mov	r2, r6
   203dc:	b	200b0 <__assert_fail@plt+0xd600>
   203e0:	sub	r3, r7, r3
   203e4:	mov	r0, #0
   203e8:	cmp	r0, r3, lsr #1
   203ec:	subeq	r1, r1, #1
   203f0:	lsrne	r0, r3, #1
   203f4:	subne	r1, r1, r0
   203f8:	cmp	r1, r2
   203fc:	movhi	r2, r1
   20400:	cmp	lr, #0
   20404:	moveq	r2, r1
   20408:	b	200b8 <__assert_fail@plt+0xd608>
   2040c:	bic	r0, r5, #3
   20410:	mov	r1, #1
   20414:	str	lr, [sp, #20]
   20418:	str	r0, [sp, #16]
   2041c:	subs	r0, r0, #4
   20420:	add	r6, r1, r0, lsr #2
   20424:	and	r0, r6, #1
   20428:	str	r0, [sp, #12]
   2042c:	beq	2046c <__assert_fail@plt+0xd9bc>
   20430:	sub	r4, r0, r6
   20434:	add	r0, lr, ip
   20438:	mov	lr, #0
   2043c:	mov	r6, #32
   20440:	add	ip, r3, r0, lsl #2
   20444:	add	r0, ip, #16
   20448:	vld1.32	{d16-d17}, [ip], r6
   2044c:	add	r1, r7, #16
   20450:	adds	r4, r4, #2
   20454:	add	lr, lr, #8
   20458:	vst1.32	{d16-d17}, [r7], r6
   2045c:	vld1.32	{d16-d17}, [r0]
   20460:	vst1.32	{d16-d17}, [r1]
   20464:	bne	20444 <__assert_fail@plt+0xd994>
   20468:	b	20470 <__assert_fail@plt+0xd9c0>
   2046c:	mov	lr, #0
   20470:	ldr	r0, [sp, #12]
   20474:	cmp	r0, #0
   20478:	beq	20498 <__assert_fail@plt+0xd9e8>
   2047c:	add	r0, r2, lr
   20480:	add	r0, r3, r0, lsl #2
   20484:	vld1.32	{d16-d17}, [r0]
   20488:	ldr	r0, [sp, #20]
   2048c:	add	r0, r0, lr
   20490:	add	r0, r9, r0, lsl #2
   20494:	vst1.32	{d16-d17}, [r0]
   20498:	ldr	r0, [sp, #16]
   2049c:	ldr	lr, [sp, #20]
   204a0:	cmp	r5, r0
   204a4:	ldr	r5, [sp, #24]
   204a8:	add	r7, lr, r0
   204ac:	beq	202fc <__assert_fail@plt+0xd84c>
   204b0:	ldr	r4, [sp, #32]
   204b4:	add	r2, r2, r0
   204b8:	b	202e0 <__assert_fail@plt+0xd830>
   204bc:	mov	r0, r9
   204c0:	bl	30174 <__assert_fail@plt+0x1d6c4>
   204c4:	ldr	r0, [r5, #28]
   204c8:	mov	r2, #0
   204cc:	mvn	r1, #0
   204d0:	str	r2, [r8, #28]
   204d4:	str	r1, [r8, #32]
   204d8:	str	r0, [r8]
   204dc:	ldr	r0, [r8, #20]
   204e0:	str	r0, [r8, #16]
   204e4:	sub	sp, fp, #28
   204e8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   204ec:	movw	r0, #48448	; 0xbd40
   204f0:	movw	r1, #47769	; 0xba99
   204f4:	movw	r3, #48477	; 0xbd5d
   204f8:	mov	r2, #242	; 0xf2
   204fc:	movt	r0, #4
   20500:	movt	r1, #4
   20504:	movt	r3, #4
   20508:	bl	12ab0 <__assert_fail@plt>
   2050c:	movw	r1, #47891	; 0xbb13
   20510:	mov	r0, #0
   20514:	mov	r2, #5
   20518:	movt	r1, #4
   2051c:	bl	12564 <dcgettext@plt>
   20520:	mov	r2, r0
   20524:	mov	r0, #1
   20528:	mov	r1, #0
   2052c:	bl	1269c <error@plt>
   20530:	movw	r0, #47749	; 0xba85
   20534:	movw	r1, #47769	; 0xba99
   20538:	movw	r3, #47780	; 0xbaa4
   2053c:	movw	r2, #261	; 0x105
   20540:	movt	r0, #4
   20544:	b	2055c <__assert_fail@plt+0xdaac>
   20548:	movw	r0, #47848	; 0xbae8
   2054c:	movw	r1, #47769	; 0xba99
   20550:	movw	r3, #47780	; 0xbaa4
   20554:	movw	r2, #262	; 0x106
   20558:	movt	r0, #4
   2055c:	movt	r1, #4
   20560:	movt	r3, #4
   20564:	bl	12ab0 <__assert_fail@plt>
   20568:	ldr	r0, [r0, #28]
   2056c:	mov	r3, #0
   20570:	mvn	r2, #0
   20574:	str	r3, [r1, #28]
   20578:	str	r2, [r1, #32]
   2057c:	str	r0, [r1]
   20580:	ldr	r0, [r1, #20]
   20584:	str	r0, [r1, #16]
   20588:	bx	lr
   2058c:	push	{fp, lr}
   20590:	mov	fp, sp
   20594:	mov	r0, #0
   20598:	bl	1257c <sysconf@plt>
   2059c:	cmp	r0, #0
   205a0:	mvnle	r0, #-2147483648	; 0x80000000
   205a4:	pop	{fp, pc}
   205a8:	push	{r4, r5, fp, lr}
   205ac:	add	fp, sp, #8
   205b0:	movw	r0, #58692	; 0xe544
   205b4:	movt	r0, #5
   205b8:	ldr	r1, [r0]
   205bc:	ldr	r0, [r1]
   205c0:	cmp	r0, #0
   205c4:	beq	205f0 <__assert_fail@plt+0xdb40>
   205c8:	add	r5, r1, #4
   205cc:	mov	r4, #0
   205d0:	bl	127bc <strlen@plt>
   205d4:	add	r0, r4, r0
   205d8:	add	r4, r0, #1
   205dc:	ldr	r0, [r5], #4
   205e0:	cmp	r0, #0
   205e4:	bne	205d0 <__assert_fail@plt+0xdb20>
   205e8:	mov	r0, r4
   205ec:	pop	{r4, r5, fp, pc}
   205f0:	mov	r4, #0
   205f4:	mov	r0, r4
   205f8:	pop	{r4, r5, fp, pc}
   205fc:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   20600:	add	fp, sp, #24
   20604:	mov	r4, r0
   20608:	movw	r0, #58692	; 0xe544
   2060c:	mov	r5, r1
   20610:	mov	r8, #0
   20614:	mov	r6, #0
   20618:	movt	r0, #5
   2061c:	ldr	r1, [r0]
   20620:	ldr	r0, [r1]
   20624:	cmp	r0, #0
   20628:	beq	2064c <__assert_fail@plt+0xdb9c>
   2062c:	add	r7, r1, #4
   20630:	mov	r6, #0
   20634:	bl	127bc <strlen@plt>
   20638:	add	r0, r6, r0
   2063c:	add	r6, r0, #1
   20640:	ldr	r0, [r7], #4
   20644:	cmp	r0, #0
   20648:	bne	20634 <__assert_fail@plt+0xdb84>
   2064c:	mov	r0, #4096	; 0x1000
   20650:	str	r0, [r4, #8]
   20654:	mov	r0, #0
   20658:	bl	1257c <sysconf@plt>
   2065c:	cmp	r0, #0
   20660:	mov	r1, r0
   20664:	mov	r0, #1
   20668:	str	r8, [r4]
   2066c:	mvnle	r1, #-2147483648	; 0x80000000
   20670:	cmp	r1, r6
   20674:	str	r1, [r4, #4]
   20678:	bcc	206d4 <__assert_fail@plt+0xdc24>
   2067c:	add	r2, r6, r5
   20680:	mov	r0, #2
   20684:	cmp	r2, r1
   20688:	bcs	206d4 <__assert_fail@plt+0xdc24>
   2068c:	sub	r0, r1, r6
   20690:	sub	r1, r0, r5
   20694:	mvn	r0, #1
   20698:	add	r0, r0, r1, lsr #2
   2069c:	str	r1, [r4, #4]
   206a0:	cmp	r0, #0
   206a4:	str	r0, [r4, #16]
   206a8:	beq	206d8 <__assert_fail@plt+0xdc28>
   206ac:	movw	r2, #1784	; 0x6f8
   206b0:	mov	r0, #0
   206b4:	movt	r2, #2
   206b8:	str	r0, [r4, #20]
   206bc:	str	r0, [r4, #24]
   206c0:	str	r0, [r4, #28]
   206c4:	str	r2, [r4, #32]
   206c8:	str	r0, [r4, #36]	; 0x24
   206cc:	str	r0, [r4, #40]	; 0x28
   206d0:	str	r1, [r4, #12]
   206d4:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   206d8:	movw	r0, #48155	; 0xbc1b
   206dc:	movw	r1, #47769	; 0xba99
   206e0:	movw	r3, #48178	; 0xbc32
   206e4:	movw	r2, #518	; 0x206
   206e8:	movt	r0, #4
   206ec:	movt	r1, #4
   206f0:	movt	r3, #4
   206f4:	bl	12ab0 <__assert_fail@plt>
   206f8:	mov	r0, #0
   206fc:	bx	lr
   20700:	ldr	r1, [r0, #4]
   20704:	mov	r2, #0
   20708:	cmp	r2, r1, lsr #17
   2070c:	beq	2071c <__assert_fail@plt+0xdc6c>
   20710:	ldr	r1, [r0, #8]
   20714:	cmp	r1, #131072	; 0x20000
   20718:	movls	r1, #131072	; 0x20000
   2071c:	str	r1, [r0, #12]
   20720:	bx	lr
   20724:	push	{r4, r5, r6, sl, fp, lr}
   20728:	add	fp, sp, #16
   2072c:	mov	r6, #0
   20730:	mov	r4, r1
   20734:	str	r6, [r1, #16]
   20738:	str	r6, [r1, #36]	; 0x24
   2073c:	str	r6, [r1, #40]	; 0x28
   20740:	str	r6, [r1]
   20744:	str	r6, [r1, #4]
   20748:	str	r6, [r1, #8]
   2074c:	movw	r1, #63488	; 0xf800
   20750:	ldr	r0, [r0, #12]
   20754:	movt	r1, #32767	; 0x7fff
   20758:	cmp	r0, r1
   2075c:	bcs	2078c <__assert_fail@plt+0xdcdc>
   20760:	add	r0, r0, #1
   20764:	mov	r5, r2
   20768:	bl	2e038 <__assert_fail@plt+0x1b588>
   2076c:	mvn	r1, #0
   20770:	str	r0, [r4, #12]
   20774:	str	r6, [r4, #16]
   20778:	str	r6, [r4, #20]
   2077c:	str	r5, [r4, #24]
   20780:	str	r6, [r4, #28]
   20784:	str	r1, [r4, #32]
   20788:	pop	{r4, r5, r6, sl, fp, pc}
   2078c:	movw	r0, #48253	; 0xbc7d
   20790:	movw	r1, #47769	; 0xba99
   20794:	movw	r3, #48288	; 0xbca0
   20798:	mov	r2, #572	; 0x23c
   2079c:	movt	r0, #4
   207a0:	movt	r1, #4
   207a4:	movt	r3, #4
   207a8:	bl	12ab0 <__assert_fail@plt>
   207ac:	push	{r4, r5, r6, sl, fp, lr}
   207b0:	add	fp, sp, #16
   207b4:	mov	r1, r0
   207b8:	ldr	r0, [r0]
   207bc:	cmp	r0, #0
   207c0:	beq	207ec <__assert_fail@plt+0xdd3c>
   207c4:	add	r6, r1, #4
   207c8:	mov	r5, #0
   207cc:	mov	r4, #0
   207d0:	bl	127bc <strlen@plt>
   207d4:	add	r4, r0, r4
   207d8:	ldr	r0, [r6, r5, lsl #2]
   207dc:	add	r5, r5, #1
   207e0:	cmp	r0, #0
   207e4:	bne	207d0 <__assert_fail@plt+0xdd20>
   207e8:	b	207f4 <__assert_fail@plt+0xdd44>
   207ec:	mov	r4, #0
   207f0:	mov	r5, #0
   207f4:	movw	r0, #48373	; 0xbcf5
   207f8:	mov	r1, r5
   207fc:	movt	r0, #4
   20800:	bl	20830 <__assert_fail@plt+0xdd80>
   20804:	mov	r1, r0
   20808:	mov	r0, #1
   2080c:	cmp	r1, #0
   20810:	popne	{r4, r5, r6, sl, fp, pc}
   20814:	movw	r0, #48410	; 0xbd1a
   20818:	mov	r1, r4
   2081c:	movt	r0, #4
   20820:	bl	20830 <__assert_fail@plt+0xdd80>
   20824:	cmp	r0, #0
   20828:	movwne	r0, #1
   2082c:	pop	{r4, r5, r6, sl, fp, pc}
   20830:	push	{r4, r5, fp, lr}
   20834:	add	fp, sp, #8
   20838:	sub	sp, sp, #16
   2083c:	mov	r5, r1
   20840:	mov	r4, r0
   20844:	bl	126d8 <getenv@plt>
   20848:	cmp	r0, #0
   2084c:	beq	20888 <__assert_fail@plt+0xddd8>
   20850:	mov	r1, #0
   20854:	add	r3, sp, #8
   20858:	mov	r2, #10
   2085c:	str	r1, [sp]
   20860:	add	r1, sp, #12
   20864:	bl	2e650 <__assert_fail@plt+0x1bba0>
   20868:	cmp	r0, #0
   2086c:	bne	20894 <__assert_fail@plt+0xdde4>
   20870:	ldr	r1, [sp, #8]
   20874:	mov	r0, #1
   20878:	cmp	r1, r5
   2087c:	movcs	r0, #0
   20880:	sub	sp, fp, #8
   20884:	pop	{r4, r5, fp, pc}
   20888:	mov	r0, #0
   2088c:	sub	sp, fp, #8
   20890:	pop	{r4, r5, fp, pc}
   20894:	bl	12804 <__errno_location@plt>
   20898:	movw	r1, #48583	; 0xbdc7
   2089c:	ldr	r5, [r0]
   208a0:	mov	r0, #0
   208a4:	mov	r2, #5
   208a8:	movt	r1, #4
   208ac:	bl	12564 <dcgettext@plt>
   208b0:	mov	r2, r0
   208b4:	mov	r0, #1
   208b8:	mov	r1, r5
   208bc:	mov	r3, r4
   208c0:	bl	1269c <error@plt>
   208c4:	push	{r4, r5, r6, sl, fp, lr}
   208c8:	add	fp, sp, #16
   208cc:	sub	sp, sp, #8
   208d0:	mov	r6, r0
   208d4:	mov	r0, sp
   208d8:	mov	r5, r2
   208dc:	mov	r4, r1
   208e0:	bl	2cfa8 <__assert_fail@plt+0x1a4f8>
   208e4:	cmp	r0, #0
   208e8:	bne	2095c <__assert_fail@plt+0xdeac>
   208ec:	mov	r0, r6
   208f0:	bl	2d004 <__assert_fail@plt+0x1a554>
   208f4:	cmp	r0, #0
   208f8:	bne	20950 <__assert_fail@plt+0xdea0>
   208fc:	mov	r0, r5
   20900:	blx	r4
   20904:	mov	r4, r0
   20908:	mov	r5, #0
   2090c:	cmn	r0, #1
   20910:	bgt	2091c <__assert_fail@plt+0xde6c>
   20914:	bl	12804 <__errno_location@plt>
   20918:	ldr	r5, [r0]
   2091c:	mov	r0, sp
   20920:	bl	2d004 <__assert_fail@plt+0x1a554>
   20924:	cmp	r0, #0
   20928:	bne	20950 <__assert_fail@plt+0xdea0>
   2092c:	mov	r0, sp
   20930:	bl	2d020 <__assert_fail@plt+0x1a570>
   20934:	cmp	r5, #0
   20938:	beq	20944 <__assert_fail@plt+0xde94>
   2093c:	bl	12804 <__errno_location@plt>
   20940:	str	r5, [r0]
   20944:	mov	r0, r4
   20948:	sub	sp, fp, #16
   2094c:	pop	{r4, r5, r6, sl, fp, pc}
   20950:	bl	12804 <__errno_location@plt>
   20954:	ldr	r0, [r0]
   20958:	bl	26630 <__assert_fail@plt+0x13b80>
   2095c:	bl	12804 <__errno_location@plt>
   20960:	ldr	r0, [r0]
   20964:	bl	265f0 <__assert_fail@plt+0x13b40>
   20968:	push	{r4, r5, r6, sl, fp, lr}
   2096c:	add	fp, sp, #16
   20970:	sub	sp, sp, #8
   20974:	mov	r4, r2
   20978:	cmn	r0, #100	; 0x64
   2097c:	bne	20990 <__assert_fail@plt+0xdee0>
   20980:	mov	r0, r4
   20984:	sub	sp, fp, #16
   20988:	pop	{r4, r5, r6, sl, fp, lr}
   2098c:	bx	r1
   20990:	mov	r5, r0
   20994:	mov	r0, sp
   20998:	mov	r6, r1
   2099c:	bl	2cfa8 <__assert_fail@plt+0x1a4f8>
   209a0:	cmp	r0, #0
   209a4:	bne	20a2c <__assert_fail@plt+0xdf7c>
   209a8:	mov	r0, r5
   209ac:	bl	129b4 <fchdir@plt>
   209b0:	cmp	r0, #0
   209b4:	beq	209d8 <__assert_fail@plt+0xdf28>
   209b8:	bl	12804 <__errno_location@plt>
   209bc:	ldr	r5, [r0]
   209c0:	mov	r4, r0
   209c4:	mov	r0, sp
   209c8:	bl	2d020 <__assert_fail@plt+0x1a570>
   209cc:	str	r5, [r4]
   209d0:	mvn	r4, #0
   209d4:	b	20a20 <__assert_fail@plt+0xdf70>
   209d8:	mov	r0, r4
   209dc:	blx	r6
   209e0:	mov	r4, r0
   209e4:	mov	r5, #0
   209e8:	cmn	r0, #1
   209ec:	bgt	209f8 <__assert_fail@plt+0xdf48>
   209f0:	bl	12804 <__errno_location@plt>
   209f4:	ldr	r5, [r0]
   209f8:	mov	r0, sp
   209fc:	bl	2d004 <__assert_fail@plt+0x1a554>
   20a00:	cmp	r0, #0
   20a04:	bne	20a38 <__assert_fail@plt+0xdf88>
   20a08:	mov	r0, sp
   20a0c:	bl	2d020 <__assert_fail@plt+0x1a570>
   20a10:	cmp	r5, #0
   20a14:	beq	20a20 <__assert_fail@plt+0xdf70>
   20a18:	bl	12804 <__errno_location@plt>
   20a1c:	str	r5, [r0]
   20a20:	mov	r0, r4
   20a24:	sub	sp, fp, #16
   20a28:	pop	{r4, r5, r6, sl, fp, pc}
   20a2c:	bl	12804 <__errno_location@plt>
   20a30:	ldr	r0, [r0]
   20a34:	bl	265f0 <__assert_fail@plt+0x13b40>
   20a38:	bl	12804 <__errno_location@plt>
   20a3c:	ldr	r0, [r0]
   20a40:	bl	26630 <__assert_fail@plt+0x13b80>
   20a44:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   20a48:	add	fp, sp, #24
   20a4c:	mov	r6, r2
   20a50:	mov	r7, r1
   20a54:	mov	r4, r0
   20a58:	bl	12804 <__errno_location@plt>
   20a5c:	cmp	r7, #0
   20a60:	beq	20af8 <__assert_fail@plt+0xe048>
   20a64:	mov	r5, r0
   20a68:	ldr	r8, [r0]
   20a6c:	ldr	r0, [r6]
   20a70:	cmp	r0, #0
   20a74:	mov	r1, r0
   20a78:	movweq	r1, #16
   20a7c:	cmp	r1, r7
   20a80:	bcs	20a98 <__assert_fail@plt+0xdfe8>
   20a84:	lsl	r2, r1, #1
   20a88:	cmp	r1, r1, lsl #1
   20a8c:	mov	r1, r2
   20a90:	bls	20a7c <__assert_fail@plt+0xdfcc>
   20a94:	mov	r1, r7
   20a98:	cmp	r0, #0
   20a9c:	beq	20acc <__assert_fail@plt+0xe01c>
   20aa0:	cmp	r1, r0
   20aa4:	beq	20ae4 <__assert_fail@plt+0xe034>
   20aa8:	mov	r0, r4
   20aac:	str	r1, [r6]
   20ab0:	bl	33500 <__assert_fail@plt+0x20a50>
   20ab4:	mov	r4, r0
   20ab8:	cmp	r0, #0
   20abc:	bne	20aec <__assert_fail@plt+0xe03c>
   20ac0:	mov	r4, #0
   20ac4:	mov	r0, r4
   20ac8:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   20acc:	cmp	r4, #0
   20ad0:	bne	20b10 <__assert_fail@plt+0xe060>
   20ad4:	mov	r0, r1
   20ad8:	str	r1, [r6]
   20adc:	bl	327ac <__assert_fail@plt+0x1fcfc>
   20ae0:	mov	r4, r0
   20ae4:	cmp	r4, #0
   20ae8:	beq	20ac0 <__assert_fail@plt+0xe010>
   20aec:	mov	r0, r4
   20af0:	str	r8, [r5]
   20af4:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   20af8:	movw	r0, #48644	; 0xbe04
   20afc:	movw	r1, #48656	; 0xbe10
   20b00:	movw	r3, #48668	; 0xbe1c
   20b04:	mov	r2, #71	; 0x47
   20b08:	movt	r0, #4
   20b0c:	b	20b24 <__assert_fail@plt+0xe074>
   20b10:	movw	r0, #48710	; 0xbe46
   20b14:	movw	r1, #48656	; 0xbe10
   20b18:	movw	r3, #48668	; 0xbe1c
   20b1c:	mov	r2, #79	; 0x4f
   20b20:	movt	r0, #4
   20b24:	movt	r1, #4
   20b28:	movt	r3, #4
   20b2c:	bl	12ab0 <__assert_fail@plt>
   20b30:	push	{r4, sl, fp, lr}
   20b34:	add	fp, sp, #8
   20b38:	mov	r4, r0
   20b3c:	bl	20a44 <__assert_fail@plt+0xdf94>
   20b40:	cmp	r0, #0
   20b44:	popne	{r4, sl, fp, pc}
   20b48:	mov	r0, r4
   20b4c:	bl	30174 <__assert_fail@plt+0x1d6c4>
   20b50:	bl	2e574 <__assert_fail@plt+0x1bac4>
   20b54:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   20b58:	add	fp, sp, #28
   20b5c:	sub	sp, sp, #540	; 0x21c
   20b60:	bl	20cb8 <__assert_fail@plt+0xe208>
   20b64:	cmn	r0, #-2147483647	; 0x80000001
   20b68:	mov	r5, #0
   20b6c:	addne	r0, r0, #1
   20b70:	str	r5, [sp, #20]
   20b74:	str	r5, [sp, #12]
   20b78:	str	r5, [sp, #16]
   20b7c:	cmp	r0, #1
   20b80:	str	r0, [sp, #4]
   20b84:	blt	20c90 <__assert_fail@plt+0xe1e0>
   20b88:	add	r0, sp, #12
   20b8c:	add	r6, sp, #24
   20b90:	mov	sl, #5
   20b94:	add	r0, r0, #8
   20b98:	str	r0, [sp, #8]
   20b9c:	b	20bb0 <__assert_fail@plt+0xe100>
   20ba0:	ldr	r0, [sp, #4]
   20ba4:	add	r5, r7, r5
   20ba8:	cmp	r5, r0
   20bac:	bge	20c90 <__assert_fail@plt+0xe1e0>
   20bb0:	ldr	r0, [sp, #4]
   20bb4:	sub	r4, r0, r5
   20bb8:	cmp	r4, #64	; 0x40
   20bbc:	mov	r7, r4
   20bc0:	movge	r7, #64	; 0x40
   20bc4:	cmp	r4, #1
   20bc8:	blt	20bf4 <__assert_fail@plt+0xe144>
   20bcc:	mov	r0, #0
   20bd0:	mov	r1, #0
   20bd4:	add	r2, r6, r0
   20bd8:	add	r0, r0, #8
   20bdc:	str	sl, [r2, #4]
   20be0:	add	r2, r5, r1
   20be4:	str	r2, [r6, r1, lsl #3]
   20be8:	add	r1, r1, #1
   20bec:	cmp	r1, r7
   20bf0:	blt	20bd4 <__assert_fail@plt+0xe124>
   20bf4:	mov	r0, r6
   20bf8:	mov	r1, r7
   20bfc:	mov	r2, #0
   20c00:	bl	12600 <poll@plt>
   20c04:	cmn	r0, #1
   20c08:	beq	20c90 <__assert_fail@plt+0xe1e0>
   20c0c:	cmp	r4, #1
   20c10:	blt	20ba0 <__assert_fail@plt+0xe0f0>
   20c14:	mov	r8, #0
   20c18:	mov	r9, #6
   20c1c:	b	20c48 <__assert_fail@plt+0xe198>
   20c20:	str	r0, [sp, #12]
   20c24:	ldr	r1, [sp, #16]
   20c28:	str	r4, [r0, r1, lsl #2]
   20c2c:	ldr	r0, [sp, #16]
   20c30:	add	r0, r0, #1
   20c34:	str	r0, [sp, #16]
   20c38:	add	r8, r8, #1
   20c3c:	add	r9, r9, #8
   20c40:	cmp	r8, r7
   20c44:	bge	20ba0 <__assert_fail@plt+0xe0f0>
   20c48:	add	r0, r6, r9
   20c4c:	ldrh	r0, [r0]
   20c50:	cmp	r0, #32
   20c54:	beq	20c38 <__assert_fail@plt+0xe188>
   20c58:	ldr	r4, [r6, r8, lsl #3]
   20c5c:	mov	r1, #1
   20c60:	mov	r0, r4
   20c64:	bl	2ff38 <__assert_fail@plt+0x1d488>
   20c68:	tst	r0, #1
   20c6c:	bne	20c38 <__assert_fail@plt+0xe188>
   20c70:	ldr	r1, [sp, #16]
   20c74:	mov	r2, #4
   20c78:	ldr	r0, [sp, #12]
   20c7c:	add	r1, r2, r1, lsl #2
   20c80:	ldr	r2, [sp, #8]
   20c84:	bl	20a44 <__assert_fail@plt+0xdf94>
   20c88:	cmp	r0, #0
   20c8c:	bne	20c20 <__assert_fail@plt+0xe170>
   20c90:	ldr	r0, [sp, #12]
   20c94:	movw	r2, #60648	; 0xece8
   20c98:	ldr	r1, [sp, #16]
   20c9c:	movt	r2, #5
   20ca0:	str	r0, [r2]
   20ca4:	movw	r0, #60652	; 0xecec
   20ca8:	movt	r0, #5
   20cac:	str	r1, [r0]
   20cb0:	sub	sp, fp, #28
   20cb4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   20cb8:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   20cbc:	add	fp, sp, #24
   20cc0:	sub	sp, sp, #16
   20cc4:	movw	r0, #48961	; 0xbf41
   20cc8:	movt	r0, #4
   20ccc:	bl	228bc <__assert_fail@plt+0xfe0c>
   20cd0:	cmp	r0, #0
   20cd4:	beq	20db0 <__assert_fail@plt+0xe300>
   20cd8:	mov	r4, r0
   20cdc:	bl	12804 <__errno_location@plt>
   20ce0:	mov	r7, #0
   20ce4:	mov	r6, r0
   20ce8:	str	r7, [r0]
   20cec:	mov	r0, r4
   20cf0:	bl	12978 <readdir64@plt>
   20cf4:	cmp	r0, #0
   20cf8:	beq	20d6c <__assert_fail@plt+0xe2bc>
   20cfc:	mov	r8, #0
   20d00:	mvn	r5, #0
   20d04:	mov	r7, #0
   20d08:	b	20d38 <__assert_fail@plt+0xe288>
   20d0c:	mov	r0, r1
   20d10:	mov	r1, #0
   20d14:	bl	221f8 <__assert_fail@plt+0xf748>
   20d18:	cmp	r0, r5
   20d1c:	mov	r7, #1
   20d20:	movgt	r5, r0
   20d24:	mov	r0, r4
   20d28:	str	r8, [r6]
   20d2c:	bl	12978 <readdir64@plt>
   20d30:	cmp	r0, #0
   20d34:	beq	20d70 <__assert_fail@plt+0xe2c0>
   20d38:	mov	r1, r0
   20d3c:	ldrb	r2, [r1, #19]!
   20d40:	cmp	r2, #46	; 0x2e
   20d44:	bne	20d0c <__assert_fail@plt+0xe25c>
   20d48:	ldrb	r2, [r0, #20]
   20d4c:	cmp	r2, #0
   20d50:	beq	20d24 <__assert_fail@plt+0xe274>
   20d54:	cmp	r2, #46	; 0x2e
   20d58:	bne	20d0c <__assert_fail@plt+0xe25c>
   20d5c:	ldrb	r0, [r0, #21]
   20d60:	cmp	r0, #0
   20d64:	bne	20d0c <__assert_fail@plt+0xe25c>
   20d68:	b	20d24 <__assert_fail@plt+0xe274>
   20d6c:	mvn	r5, #0
   20d70:	ldr	r6, [r6]
   20d74:	cmp	r6, #0
   20d78:	beq	20dec <__assert_fail@plt+0xe33c>
   20d7c:	movw	r2, #48961	; 0xbf41
   20d80:	mov	r0, #0
   20d84:	mov	r1, #8
   20d88:	movt	r2, #4
   20d8c:	bl	2c88c <__assert_fail@plt+0x19ddc>
   20d90:	movw	r2, #56015	; 0xdacf
   20d94:	mov	r3, r0
   20d98:	mov	r0, #0
   20d9c:	mov	r1, r6
   20da0:	movt	r2, #4
   20da4:	bl	1269c <error@plt>
   20da8:	mov	r0, r4
   20dac:	bl	12a80 <closedir@plt>
   20db0:	mov	r0, #4
   20db4:	bl	1257c <sysconf@plt>
   20db8:	mov	r5, r0
   20dbc:	mov	r1, sp
   20dc0:	mov	r0, #7
   20dc4:	bl	12588 <getrlimit64@plt>
   20dc8:	cmn	r5, #1
   20dcc:	movweq	r5, #20
   20dd0:	cmp	r0, #0
   20dd4:	bne	20e04 <__assert_fail@plt+0xe354>
   20dd8:	ldm	sp, {r0, r1}
   20ddc:	and	r1, r0, r1
   20de0:	cmn	r1, #1
   20de4:	movne	r5, r0
   20de8:	b	20e04 <__assert_fail@plt+0xe354>
   20dec:	mov	r0, r4
   20df0:	bl	12a80 <closedir@plt>
   20df4:	cmp	r7, #0
   20df8:	beq	20db0 <__assert_fail@plt+0xe300>
   20dfc:	cmn	r5, #1
   20e00:	ble	20db0 <__assert_fail@plt+0xe300>
   20e04:	mov	r0, r5
   20e08:	sub	sp, fp, #24
   20e0c:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   20e10:	sub	sp, sp, #8
   20e14:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   20e18:	add	fp, sp, #28
   20e1c:	sub	sp, sp, #4
   20e20:	movw	sl, #60657	; 0xecf1
   20e24:	mov	r4, r0
   20e28:	str	r2, [fp, #8]
   20e2c:	str	r3, [fp, #12]
   20e30:	tst	r1, #64	; 0x40
   20e34:	mov	r6, #0
   20e38:	movw	r9, #60656	; 0xecf0
   20e3c:	mov	r5, r1
   20e40:	movt	sl, #5
   20e44:	ldrne	r6, [fp, #8]
   20e48:	movt	r9, #5
   20e4c:	ldrb	r0, [sl]
   20e50:	cmp	r0, #0
   20e54:	bne	20ea0 <__assert_fail@plt+0xe3f0>
   20e58:	movw	r0, #33590	; 0x8336
   20e5c:	mov	r1, #524288	; 0x80000
   20e60:	movt	r0, #4
   20e64:	bl	22aec <__assert_fail@plt+0x1003c>
   20e68:	cmp	r0, #0
   20e6c:	bmi	20e90 <__assert_fail@plt+0xe3e0>
   20e70:	mov	r1, #1
   20e74:	mov	r7, r0
   20e78:	bl	2ff38 <__assert_fail@plt+0x1d488>
   20e7c:	mov	r8, r0
   20e80:	mov	r0, r7
   20e84:	bl	12a68 <close@plt>
   20e88:	and	r0, r8, #1
   20e8c:	b	20e94 <__assert_fail@plt+0xe3e4>
   20e90:	mov	r0, #0
   20e94:	mov	r1, #1
   20e98:	strb	r0, [r9]
   20e9c:	strb	r1, [sl]
   20ea0:	orr	r1, r5, #524288	; 0x80000
   20ea4:	mov	r0, r4
   20ea8:	mov	r2, r6
   20eac:	bl	22aec <__assert_fail@plt+0x1003c>
   20eb0:	mov	r4, r0
   20eb4:	cmp	r0, #0
   20eb8:	bmi	20ed4 <__assert_fail@plt+0xe424>
   20ebc:	ldrb	r0, [r9]
   20ec0:	cmp	r0, #0
   20ec4:	bne	20ed4 <__assert_fail@plt+0xe424>
   20ec8:	mov	r0, r4
   20ecc:	mov	r1, #1
   20ed0:	bl	22748 <__assert_fail@plt+0xfc98>
   20ed4:	mov	r0, r4
   20ed8:	sub	sp, fp, #28
   20edc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   20ee0:	add	sp, sp, #8
   20ee4:	bx	lr
   20ee8:	push	{r4, sl, fp, lr}
   20eec:	add	fp, sp, #8
   20ef0:	movw	r4, #60648	; 0xece8
   20ef4:	movt	r4, #5
   20ef8:	ldr	r0, [r4]
   20efc:	bl	30174 <__assert_fail@plt+0x1d6c4>
   20f00:	movw	r0, #60652	; 0xecec
   20f04:	mov	r1, #0
   20f08:	movt	r0, #5
   20f0c:	str	r1, [r4]
   20f10:	str	r1, [r0]
   20f14:	pop	{r4, sl, fp, pc}
   20f18:	push	{fp, lr}
   20f1c:	mov	fp, sp
   20f20:	movw	r0, #48727	; 0xbe57
   20f24:	movt	r0, #4
   20f28:	bl	126d8 <getenv@plt>
   20f2c:	cmp	r0, #0
   20f30:	movwne	r0, #1
   20f34:	pop	{fp, pc}
   20f38:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   20f3c:	add	fp, sp, #28
   20f40:	sub	sp, sp, #524	; 0x20c
   20f44:	movw	r0, #60652	; 0xecec
   20f48:	movt	r0, #5
   20f4c:	ldr	sl, [r0]
   20f50:	movw	r0, #60648	; 0xece8
   20f54:	movt	r0, #5
   20f58:	ldr	r0, [r0]
   20f5c:	str	r0, [sp, #4]
   20f60:	bl	20cb8 <__assert_fail@plt+0xe208>
   20f64:	mov	r7, r0
   20f68:	cmn	r0, #-2147483647	; 0x80000001
   20f6c:	addne	r7, r7, #1
   20f70:	cmp	r7, #1
   20f74:	blt	21080 <__assert_fail@plt+0xe5d0>
   20f78:	mov	r4, #0
   20f7c:	add	r5, sp, #8
   20f80:	mov	r3, #5
   20f84:	mov	r8, #0
   20f88:	str	r7, [sp]
   20f8c:	sub	r9, r7, r8
   20f90:	cmp	r9, #64	; 0x40
   20f94:	mov	r6, r9
   20f98:	movge	r6, #64	; 0x40
   20f9c:	cmp	r9, #1
   20fa0:	blt	20fcc <__assert_fail@plt+0xe51c>
   20fa4:	mov	r0, #0
   20fa8:	mov	r1, #0
   20fac:	add	r2, r5, r0
   20fb0:	add	r0, r0, #8
   20fb4:	str	r3, [r2, #4]
   20fb8:	add	r2, r8, r1
   20fbc:	str	r2, [r5, r1, lsl #3]
   20fc0:	add	r1, r1, #1
   20fc4:	cmp	r1, r6
   20fc8:	blt	20fac <__assert_fail@plt+0xe4fc>
   20fcc:	mov	r0, r5
   20fd0:	mov	r1, r6
   20fd4:	mov	r2, #0
   20fd8:	bl	12600 <poll@plt>
   20fdc:	mov	r3, #5
   20fe0:	cmn	r0, #1
   20fe4:	beq	21080 <__assert_fail@plt+0xe5d0>
   20fe8:	cmp	r9, #1
   20fec:	blt	21064 <__assert_fail@plt+0xe5b4>
   20ff0:	mov	r9, #0
   20ff4:	b	21008 <__assert_fail@plt+0xe558>
   20ff8:	mov	r3, #5
   20ffc:	add	r9, r9, #1
   21000:	cmp	r9, r6
   21004:	bge	21064 <__assert_fail@plt+0xe5b4>
   21008:	add	r0, r5, r9, lsl #3
   2100c:	ldrh	r0, [r0, #6]
   21010:	cmp	r0, #32
   21014:	beq	20ffc <__assert_fail@plt+0xe54c>
   21018:	ldr	r7, [r5, r9, lsl #3]
   2101c:	mov	r1, #1
   21020:	mov	r0, r7
   21024:	bl	2ff38 <__assert_fail@plt+0x1d488>
   21028:	tst	r0, #1
   2102c:	bne	20ff8 <__assert_fail@plt+0xe548>
   21030:	ldr	r1, [sp, #4]
   21034:	cmp	r4, sl
   21038:	mov	r3, #5
   2103c:	bcs	21078 <__assert_fail@plt+0xe5c8>
   21040:	ldr	r0, [r1, r4, lsl #2]
   21044:	cmp	r0, r7
   21048:	bge	2105c <__assert_fail@plt+0xe5ac>
   2104c:	add	r4, r4, #1
   21050:	cmp	sl, r4
   21054:	bne	21040 <__assert_fail@plt+0xe590>
   21058:	b	21078 <__assert_fail@plt+0xe5c8>
   2105c:	beq	20ffc <__assert_fail@plt+0xe54c>
   21060:	b	21078 <__assert_fail@plt+0xe5c8>
   21064:	ldr	r7, [sp]
   21068:	add	r8, r6, r8
   2106c:	cmp	r8, r7
   21070:	blt	20f8c <__assert_fail@plt+0xe4dc>
   21074:	b	21080 <__assert_fail@plt+0xe5d0>
   21078:	cmp	r7, #0
   2107c:	bpl	21088 <__assert_fail@plt+0xe5d8>
   21080:	sub	sp, fp, #28
   21084:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   21088:	movw	r1, #48755	; 0xbe73
   2108c:	mov	r0, #0
   21090:	mov	r2, #5
   21094:	movt	r1, #4
   21098:	bl	12564 <dcgettext@plt>
   2109c:	mov	r2, r0
   210a0:	mov	r0, #0
   210a4:	mov	r1, #0
   210a8:	mov	r3, r7
   210ac:	bl	1269c <error@plt>
   210b0:	movw	r0, #48907	; 0xbf0b
   210b4:	movw	r1, #48916	; 0xbf14
   210b8:	movw	r3, #48925	; 0xbf1d
   210bc:	mov	r2, #396	; 0x18c
   210c0:	movt	r0, #4
   210c4:	movt	r1, #4
   210c8:	movt	r3, #4
   210cc:	bl	12ab0 <__assert_fail@plt>
   210d0:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   210d4:	add	fp, sp, #24
   210d8:	sub	sp, sp, #16
   210dc:	mov	r8, r0
   210e0:	movw	r0, #58704	; 0xe550
   210e4:	movt	r0, #5
   210e8:	ldr	r0, [r0]
   210ec:	bl	30118 <__assert_fail@plt+0x1d668>
   210f0:	movw	r0, #58716	; 0xe55c
   210f4:	movw	r1, #49003	; 0xbf6b
   210f8:	mov	r2, #5
   210fc:	mov	r9, #0
   21100:	movt	r0, #5
   21104:	movt	r1, #4
   21108:	ldr	r6, [r0]
   2110c:	movw	r0, #58572	; 0xe4cc
   21110:	movt	r0, #5
   21114:	ldr	r5, [r0]
   21118:	mov	r0, #0
   2111c:	bl	12564 <dcgettext@plt>
   21120:	movw	r1, #49018	; 0xbf7a
   21124:	mov	r7, r0
   21128:	mov	r0, #0
   2112c:	mov	r2, #5
   21130:	movt	r1, #4
   21134:	bl	12564 <dcgettext@plt>
   21138:	movw	r1, #49033	; 0xbf89
   2113c:	mov	r4, r0
   21140:	mov	r0, #0
   21144:	mov	r2, #5
   21148:	movt	r1, #4
   2114c:	bl	12564 <dcgettext@plt>
   21150:	movw	r2, #48989	; 0xbf5d
   21154:	str	r0, [sp, #8]
   21158:	mov	r0, r6
   2115c:	mov	r1, r8
   21160:	mov	r3, r5
   21164:	str	r7, [sp]
   21168:	str	r4, [sp, #4]
   2116c:	str	r9, [sp, #12]
   21170:	movt	r2, #4
   21174:	bl	2de20 <__assert_fail@plt+0x1b370>
   21178:	sub	sp, fp, #24
   2117c:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   21180:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   21184:	add	fp, sp, #28
   21188:	sub	sp, sp, #948	; 0x3b4
   2118c:	mov	sl, r0
   21190:	ldr	r0, [r3, #16]
   21194:	str	r1, [fp, #-964]	; 0xfffffc3c
   21198:	sub	r1, fp, #44	; 0x2c
   2119c:	mov	r6, r3
   211a0:	str	r2, [fp, #-960]	; 0xfffffc40
   211a4:	bl	22b28 <__assert_fail@plt+0x10078>
   211a8:	movw	r5, #58576	; 0xe4d0
   211ac:	ldrd	r0, [r6, #96]	; 0x60
   211b0:	movt	r5, #5
   211b4:	ldr	r4, [r5]
   211b8:	sub	sp, sp, #16
   211bc:	mov	r3, #1
   211c0:	mov	r2, #0
   211c4:	str	r3, [sp]
   211c8:	stmib	sp, {r2, r3}
   211cc:	str	r2, [sp, #12]
   211d0:	sub	r2, fp, #696	; 0x2b8
   211d4:	mov	r3, #0
   211d8:	bl	24010 <__assert_fail@plt+0x11560>
   211dc:	add	sp, sp, #16
   211e0:	ldr	r7, [fp, #20]
   211e4:	movw	r1, #49046	; 0xbf96
   211e8:	mov	r3, r0
   211ec:	mov	r2, r4
   211f0:	movt	r1, #4
   211f4:	mov	r0, r7
   211f8:	bl	127f8 <fprintf@plt>
   211fc:	cmp	r0, #0
   21200:	bmi	21870 <__assert_fail@plt+0xedc0>
   21204:	ldr	r1, [r5]
   21208:	ldr	r8, [fp, #12]
   2120c:	str	r6, [fp, #-956]	; 0xfffffc44
   21210:	add	r6, r6, #64	; 0x40
   21214:	cmp	r0, r1
   21218:	mov	r1, r7
   2121c:	strgt	r0, [r5]
   21220:	mov	r0, #32
   21224:	bl	1299c <putc@plt>
   21228:	movw	r9, #58580	; 0xe4d4
   2122c:	mov	r5, r0
   21230:	ldrd	r0, [r6]
   21234:	movt	r9, #5
   21238:	ldr	r4, [r9]
   2123c:	sub	sp, sp, #16
   21240:	asr	r2, r8, #31
   21244:	mov	r3, #512	; 0x200
   21248:	mov	r6, #0
   2124c:	stm	sp, {r3, r6, r8}
   21250:	str	r2, [sp, #12]
   21254:	sub	r2, fp, #696	; 0x2b8
   21258:	mov	r3, #0
   2125c:	bl	24010 <__assert_fail@plt+0x11560>
   21260:	add	sp, sp, #16
   21264:	movw	r1, #49046	; 0xbf96
   21268:	mov	r3, r0
   2126c:	mov	r0, r7
   21270:	mov	r2, r4
   21274:	movt	r1, #4
   21278:	bl	127f8 <fprintf@plt>
   2127c:	cmn	r5, #1
   21280:	movweq	r6, #150	; 0x96
   21284:	cmp	r0, #0
   21288:	bmi	21878 <__assert_fail@plt+0xedc8>
   2128c:	ldr	r1, [r9]
   21290:	mov	r2, r6
   21294:	ldr	r6, [fp, #-956]	; 0xfffffc44
   21298:	cmp	r0, r1
   2129c:	ble	212a4 <__assert_fail@plt+0xe7f4>
   212a0:	str	r0, [r9]
   212a4:	cmn	r5, #1
   212a8:	mov	r9, r2
   212ac:	beq	218a8 <__assert_fail@plt+0xedf8>
   212b0:	mov	r0, #32
   212b4:	mov	r1, r7
   212b8:	bl	1299c <putc@plt>
   212bc:	cmn	r0, #1
   212c0:	beq	21880 <__assert_fail@plt+0xedd0>
   212c4:	sub	r0, fp, #44	; 0x2c
   212c8:	mov	r1, r7
   212cc:	bl	12a44 <fputs@plt>
   212d0:	cmp	r0, #0
   212d4:	movwmi	r9, #275	; 0x113
   212d8:	bmi	21888 <__assert_fail@plt+0xedd8>
   212dc:	movw	r4, #58584	; 0xe4d8
   212e0:	ldr	r3, [r6, #20]
   212e4:	movw	r1, #49050	; 0xbf9a
   212e8:	mov	r0, r7
   212ec:	movt	r4, #5
   212f0:	movt	r1, #4
   212f4:	ldr	r2, [r4]
   212f8:	bl	127f8 <fprintf@plt>
   212fc:	cmp	r0, #0
   21300:	bmi	21890 <__assert_fail@plt+0xede0>
   21304:	ldr	r1, [r4]
   21308:	cmp	r0, r1
   2130c:	mov	r1, r7
   21310:	strgt	r0, [r4]
   21314:	mov	r0, #32
   21318:	bl	1299c <putc@plt>
   2131c:	cmn	r0, #1
   21320:	ldr	r0, [r6, #24]
   21324:	movweq	r9, #250	; 0xfa
   21328:	bl	24cd8 <__assert_fail@plt+0x12228>
   2132c:	movw	r4, #58588	; 0xe4dc
   21330:	cmp	r0, #0
   21334:	movt	r4, #5
   21338:	beq	2137c <__assert_fail@plt+0xe8cc>
   2133c:	mov	r1, #0
   21340:	mov	r5, r0
   21344:	bl	25ac4 <__assert_fail@plt+0x13014>
   21348:	ldr	r2, [r4]
   2134c:	movw	r1, #49055	; 0xbf9f
   21350:	mov	r3, r5
   21354:	movt	r1, #4
   21358:	cmp	r0, r2
   2135c:	strgt	r0, [r4]
   21360:	movgt	r2, r0
   21364:	mov	r0, r7
   21368:	bl	127f8 <fprintf@plt>
   2136c:	cmn	r0, #1
   21370:	bgt	213a4 <__assert_fail@plt+0xe8f4>
   21374:	mov	r9, #400	; 0x190
   21378:	b	217c0 <__assert_fail@plt+0xed10>
   2137c:	ldr	r2, [r6, #24]
   21380:	movw	r1, #49061	; 0xbfa5
   21384:	mov	r0, r7
   21388:	movt	r1, #4
   2138c:	bl	127f8 <fprintf@plt>
   21390:	ldr	r1, [r4]
   21394:	cmp	r0, r1
   21398:	strgt	r0, [r4]
   2139c:	cmp	r0, #1
   213a0:	blt	218c8 <__assert_fail@plt+0xee18>
   213a4:	ldr	r0, [r6, #28]
   213a8:	bl	24e88 <__assert_fail@plt+0x123d8>
   213ac:	cmp	r0, #0
   213b0:	beq	213fc <__assert_fail@plt+0xe94c>
   213b4:	mov	r1, #0
   213b8:	mov	r5, r0
   213bc:	bl	25ac4 <__assert_fail@plt+0x13014>
   213c0:	movw	r1, #58592	; 0xe4e0
   213c4:	mov	r3, r5
   213c8:	movt	r1, #5
   213cc:	ldr	r2, [r1]
   213d0:	cmp	r0, r2
   213d4:	strgt	r0, [r1]
   213d8:	movw	r1, #49055	; 0xbf9f
   213dc:	movgt	r2, r0
   213e0:	mov	r0, r7
   213e4:	movt	r1, #4
   213e8:	bl	127f8 <fprintf@plt>
   213ec:	cmn	r0, #1
   213f0:	bgt	21444 <__assert_fail@plt+0xe994>
   213f4:	mov	r9, #500	; 0x1f4
   213f8:	b	217c0 <__assert_fail@plt+0xed10>
   213fc:	movw	r4, #58592	; 0xe4e0
   21400:	ldr	r3, [r6, #28]
   21404:	movw	r1, #49068	; 0xbfac
   21408:	mov	r0, r7
   2140c:	movt	r4, #5
   21410:	movt	r1, #4
   21414:	ldr	r2, [r4]
   21418:	bl	127f8 <fprintf@plt>
   2141c:	ldr	r1, [r4]
   21420:	cmp	r0, r1
   21424:	strgt	r0, [r4]
   21428:	cmp	r0, #0
   2142c:	bmi	218d0 <__assert_fail@plt+0xee20>
   21430:	mov	r0, #32
   21434:	mov	r1, r7
   21438:	bl	1299c <putc@plt>
   2143c:	cmn	r0, #1
   21440:	beq	218d8 <__assert_fail@plt+0xee28>
   21444:	ldr	r0, [r6, #16]
   21448:	and	r0, r0, #45056	; 0xb000
   2144c:	orr	r0, r0, #16384	; 0x4000
   21450:	cmp	r0, #24576	; 0x6000
   21454:	bne	214f8 <__assert_fail@plt+0xea48>
   21458:	add	r4, r6, #32
   2145c:	movw	r5, #58596	; 0xe4e4
   21460:	ldrd	r0, [r4]
   21464:	movt	r5, #5
   21468:	ldr	r2, [r5]
   2146c:	lsr	r3, r0, #8
   21470:	lsr	r1, r1, #12
   21474:	mov	r0, r7
   21478:	bfi	r3, r1, #12, #20
   2147c:	movw	r1, #49050	; 0xbf9a
   21480:	movt	r1, #4
   21484:	bl	127f8 <fprintf@plt>
   21488:	cmp	r0, #0
   2148c:	bmi	218b0 <__assert_fail@plt+0xee00>
   21490:	ldr	r1, [r5]
   21494:	cmp	r1, r0
   21498:	movw	r1, #39330	; 0x99a2
   2149c:	movt	r1, #4
   214a0:	strlt	r0, [r5]
   214a4:	mov	r0, r7
   214a8:	bl	127f8 <fprintf@plt>
   214ac:	cmp	r0, #0
   214b0:	bmi	218b8 <__assert_fail@plt+0xee08>
   214b4:	ldrd	r0, [r4]
   214b8:	movw	r4, #58600	; 0xe4e8
   214bc:	movt	r4, #5
   214c0:	lsr	r2, r0, #12
   214c4:	orr	r3, r2, r1, lsl #20
   214c8:	ldr	r2, [r4]
   214cc:	movw	r1, #49050	; 0xbf9a
   214d0:	movt	r1, #4
   214d4:	bfi	r3, r0, #0, #8
   214d8:	mov	r0, r7
   214dc:	bl	127f8 <fprintf@plt>
   214e0:	cmp	r0, #0
   214e4:	bmi	218c0 <__assert_fail@plt+0xee10>
   214e8:	ldr	r1, [r4]
   214ec:	cmp	r1, r0
   214f0:	strlt	r0, [r4]
   214f4:	b	2156c <__assert_fail@plt+0xeabc>
   214f8:	movw	r5, #58604	; 0xe4ec
   214fc:	add	r0, r6, #48	; 0x30
   21500:	mov	r1, #1
   21504:	cmp	r8, #0
   21508:	movt	r5, #5
   2150c:	ldm	r0, {r0, r3}
   21510:	movpl	r8, r1
   21514:	asr	r2, r8, #31
   21518:	ldr	r4, [r5]
   2151c:	sub	sp, sp, #16
   21520:	mov	r6, #0
   21524:	stm	sp, {r1, r6, r8}
   21528:	str	r2, [sp, #12]
   2152c:	mov	r1, r3
   21530:	sub	r2, fp, #696	; 0x2b8
   21534:	mov	r3, #0
   21538:	bl	24010 <__assert_fail@plt+0x11560>
   2153c:	add	sp, sp, #16
   21540:	movw	r1, #49046	; 0xbf96
   21544:	mov	r3, r0
   21548:	mov	r0, r7
   2154c:	mov	r2, r4
   21550:	movt	r1, #4
   21554:	bl	127f8 <fprintf@plt>
   21558:	cmp	r0, #0
   2155c:	bmi	218e0 <__assert_fail@plt+0xee30>
   21560:	ldr	r1, [r5]
   21564:	cmp	r0, r1
   21568:	strgt	r0, [r5]
   2156c:	mov	r0, #32
   21570:	mov	r1, r7
   21574:	bl	1299c <putc@plt>
   21578:	mvn	r1, #0
   2157c:	subs	r6, r0, r1
   21580:	movwne	r6, #1
   21584:	cmn	r0, #1
   21588:	movweq	r9, #850	; 0x352
   2158c:	beq	21898 <__assert_fail@plt+0xede8>
   21590:	ldr	r0, [fp, #-956]	; 0xfffffc44
   21594:	add	r4, r0, #80	; 0x50
   21598:	mov	r0, r4
   2159c:	bl	1272c <localtime@plt>
   215a0:	cmp	r0, #0
   215a4:	beq	215d8 <__assert_fail@plt+0xeb28>
   215a8:	mov	r5, r0
   215ac:	ldr	r0, [fp, #8]
   215b0:	str	sl, [fp, #-968]	; 0xfffffc38
   215b4:	str	r9, [fp, #-972]	; 0xfffffc34
   215b8:	sub	r1, r0, #19968	; 0x4e00
   215bc:	sub	r2, r1, #15532032	; 0xed0000
   215c0:	ldr	r1, [r4]
   215c4:	cmp	r2, r1
   215c8:	ble	21648 <__assert_fail@plt+0xeb98>
   215cc:	movw	r8, #49086	; 0xbfbe
   215d0:	movt	r8, #4
   215d4:	b	21664 <__assert_fail@plt+0xebb4>
   215d8:	ldr	r0, [r4]
   215dc:	sub	sp, sp, #16
   215e0:	cmn	r0, #1
   215e4:	ble	217f0 <__assert_fail@plt+0xed40>
   215e8:	mov	r1, #1
   215ec:	mov	r4, #0
   215f0:	sub	r2, fp, #696	; 0x2b8
   215f4:	mov	r3, #0
   215f8:	stm	sp, {r1, r4}
   215fc:	str	r1, [sp, #8]
   21600:	asr	r1, r0, #31
   21604:	str	r4, [sp, #12]
   21608:	bl	24010 <__assert_fail@plt+0x11560>
   2160c:	add	sp, sp, #16
   21610:	movw	r1, #49103	; 0xbfcf
   21614:	mov	r3, r0
   21618:	mov	r0, r7
   2161c:	mov	r2, #12
   21620:	movt	r1, #4
   21624:	bl	127f8 <fprintf@plt>
   21628:	cmp	r0, #0
   2162c:	movwmi	r9, #1100	; 0x44c
   21630:	cmn	r0, #1
   21634:	movwgt	r4, #1
   21638:	and	r0, r6, r4
   2163c:	cmp	r0, #1
   21640:	beq	216f4 <__assert_fail@plt+0xec44>
   21644:	b	217c0 <__assert_fail@plt+0xed10>
   21648:	movw	r2, #49086	; 0xbfbe
   2164c:	add	r0, r0, #3600	; 0xe10
   21650:	movw	r8, #49074	; 0xbfb2
   21654:	movt	r2, #4
   21658:	cmp	r1, r0
   2165c:	movt	r8, #4
   21660:	movgt	r8, r2
   21664:	sub	sl, fp, #952	; 0x3b8
   21668:	mov	r1, #256	; 0x100
   2166c:	mov	r2, r8
   21670:	mov	r3, r5
   21674:	mov	r9, #256	; 0x100
   21678:	mov	r0, sl
   2167c:	bl	12714 <strftime@plt>
   21680:	cmp	r0, #0
   21684:	bne	216bc <__assert_fail@plt+0xec0c>
   21688:	mov	r4, #7
   2168c:	add	r0, r4, r9, lsl #1
   21690:	bic	r0, r0, #7
   21694:	sub	sl, sp, r0
   21698:	mov	sp, sl
   2169c:	lsl	r9, r9, #1
   216a0:	mov	r0, sl
   216a4:	mov	r2, r8
   216a8:	mov	r3, r5
   216ac:	mov	r1, r9
   216b0:	bl	12714 <strftime@plt>
   216b4:	cmp	r0, #0
   216b8:	beq	2168c <__assert_fail@plt+0xebdc>
   216bc:	movw	r1, #49099	; 0xbfcb
   216c0:	mov	r0, r7
   216c4:	mov	r2, sl
   216c8:	movt	r1, #4
   216cc:	bl	127f8 <fprintf@plt>
   216d0:	cmp	r0, #0
   216d4:	ldr	sl, [fp, #-968]	; 0xfffffc38
   216d8:	ldr	r9, [fp, #-972]	; 0xfffffc34
   216dc:	mov	r1, #0
   216e0:	movwmi	r9, #900	; 0x384
   216e4:	cmn	r0, #1
   216e8:	movwgt	r1, #1
   216ec:	tst	r6, r1
   216f0:	beq	217c0 <__assert_fail@plt+0xed10>
   216f4:	ldr	r5, [fp, #16]
   216f8:	mov	r0, sl
   216fc:	mov	r1, r7
   21700:	mov	r2, r5
   21704:	bl	218f8 <__assert_fail@plt+0xee48>
   21708:	cmp	r0, #0
   2170c:	ldr	r0, [fp, #-956]	; 0xfffffc44
   21710:	beq	218a0 <__assert_fail@plt+0xedf0>
   21714:	ldr	r0, [r0, #16]
   21718:	and	r0, r0, #61440	; 0xf000
   2171c:	cmp	r0, #40960	; 0xa000
   21720:	bne	217a4 <__assert_fail@plt+0xecf4>
   21724:	ldr	r0, [fp, #-964]	; 0xfffffc3c
   21728:	ldr	r1, [fp, #-960]	; 0xfffffc40
   2172c:	bl	22400 <__assert_fail@plt+0xf950>
   21730:	cmp	r0, #0
   21734:	beq	21780 <__assert_fail@plt+0xecd0>
   21738:	mov	r6, r0
   2173c:	movw	r0, #49108	; 0xbfd4
   21740:	mov	r1, r7
   21744:	movt	r0, #4
   21748:	bl	12a44 <fputs@plt>
   2174c:	cmn	r0, #1
   21750:	ble	218e8 <__assert_fail@plt+0xee38>
   21754:	mov	r0, r6
   21758:	mov	r1, r7
   2175c:	mov	r2, r5
   21760:	bl	218f8 <__assert_fail@plt+0xee48>
   21764:	mov	r4, r0
   21768:	mov	r0, r6
   2176c:	bl	30174 <__assert_fail@plt+0x1d6c4>
   21770:	cmp	r4, #0
   21774:	bne	217a4 <__assert_fail@plt+0xecf4>
   21778:	movw	r9, #1350	; 0x546
   2177c:	b	217c0 <__assert_fail@plt+0xed10>
   21780:	bl	12804 <__errno_location@plt>
   21784:	ldr	r1, [r0]
   21788:	movw	r2, #56015	; 0xdacf
   2178c:	mov	r0, #0
   21790:	mov	r3, sl
   21794:	movt	r2, #4
   21798:	bl	1269c <error@plt>
   2179c:	mov	r0, #0
   217a0:	bl	30174 <__assert_fail@plt+0x1d6c4>
   217a4:	mov	r0, #10
   217a8:	mov	r1, r7
   217ac:	bl	1299c <putc@plt>
   217b0:	cmn	r0, #1
   217b4:	subne	sp, fp, #28
   217b8:	popne	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   217bc:	movw	r9, #1400	; 0x578
   217c0:	bl	12804 <__errno_location@plt>
   217c4:	movw	r1, #49113	; 0xbfd9
   217c8:	ldr	r4, [r0]
   217cc:	mov	r0, #0
   217d0:	mov	r2, #5
   217d4:	movt	r1, #4
   217d8:	bl	12564 <dcgettext@plt>
   217dc:	mov	r2, r0
   217e0:	mov	r0, #1
   217e4:	mov	r1, r4
   217e8:	mov	r3, r9
   217ec:	bl	1269c <error@plt>
   217f0:	mov	r5, #0
   217f4:	mov	r1, #1
   217f8:	rsbs	r3, r0, #0
   217fc:	sub	r2, fp, #696	; 0x2b8
   21800:	stm	sp, {r1, r5}
   21804:	str	r1, [sp, #8]
   21808:	sbc	r1, r5, r0, asr #31
   2180c:	mov	r0, r3
   21810:	mov	r3, #0
   21814:	str	r5, [sp, #12]
   21818:	bl	24010 <__assert_fail@plt+0x11560>
   2181c:	add	sp, sp, #16
   21820:	mov	r4, r0
   21824:	bl	127bc <strlen@plt>
   21828:	sub	sp, sp, #8
   2182c:	movw	r1, #49096	; 0xbfc8
   21830:	movw	r3, #39074	; 0x98a2
   21834:	rsb	r0, r0, #12
   21838:	str	r4, [sp]
   2183c:	bic	r2, r0, r0, asr #31
   21840:	movt	r1, #4
   21844:	movt	r3, #4
   21848:	mov	r0, r7
   2184c:	bl	127f8 <fprintf@plt>
   21850:	add	sp, sp, #8
   21854:	cmp	r0, #0
   21858:	movwmi	r9, #1000	; 0x3e8
   2185c:	cmn	r0, #1
   21860:	movwgt	r5, #1
   21864:	tst	r6, r5
   21868:	bne	216f4 <__assert_fail@plt+0xec44>
   2186c:	b	217c0 <__assert_fail@plt+0xed10>
   21870:	mov	r9, #100	; 0x64
   21874:	b	217c0 <__assert_fail@plt+0xed10>
   21878:	mov	r9, #200	; 0xc8
   2187c:	b	217c0 <__assert_fail@plt+0xed10>
   21880:	mov	r9, #250	; 0xfa
   21884:	b	217c0 <__assert_fail@plt+0xed10>
   21888:	movw	r9, #275	; 0x113
   2188c:	b	217c0 <__assert_fail@plt+0xed10>
   21890:	mov	r9, #300	; 0x12c
   21894:	b	217c0 <__assert_fail@plt+0xed10>
   21898:	movw	r9, #850	; 0x352
   2189c:	b	217c0 <__assert_fail@plt+0xed10>
   218a0:	mov	r9, #1200	; 0x4b0
   218a4:	b	217c0 <__assert_fail@plt+0xed10>
   218a8:	mov	r9, #150	; 0x96
   218ac:	b	217c0 <__assert_fail@plt+0xed10>
   218b0:	mov	r9, #600	; 0x258
   218b4:	b	217c0 <__assert_fail@plt+0xed10>
   218b8:	movw	r9, #625	; 0x271
   218bc:	b	217c0 <__assert_fail@plt+0xed10>
   218c0:	movw	r9, #650	; 0x28a
   218c4:	b	217c0 <__assert_fail@plt+0xed10>
   218c8:	movw	r9, #450	; 0x1c2
   218cc:	b	217c0 <__assert_fail@plt+0xed10>
   218d0:	movw	r9, #550	; 0x226
   218d4:	b	217c0 <__assert_fail@plt+0xed10>
   218d8:	movw	r9, #525	; 0x20d
   218dc:	b	217c0 <__assert_fail@plt+0xed10>
   218e0:	mov	r9, #800	; 0x320
   218e4:	b	217c0 <__assert_fail@plt+0xed10>
   218e8:	mov	r0, r6
   218ec:	bl	30174 <__assert_fail@plt+0x1d6c4>
   218f0:	movw	r9, #1300	; 0x514
   218f4:	b	217c0 <__assert_fail@plt+0xed10>
   218f8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   218fc:	add	fp, sp, #28
   21900:	sub	sp, sp, #4
   21904:	mov	r5, r1
   21908:	mov	r4, r0
   2190c:	cmp	r2, #0
   21910:	beq	21940 <__assert_fail@plt+0xee90>
   21914:	movw	r1, #56015	; 0xdacf
   21918:	mov	r0, r5
   2191c:	mov	r2, r4
   21920:	movt	r1, #4
   21924:	bl	127f8 <fprintf@plt>
   21928:	mov	r1, r0
   2192c:	mov	r0, #0
   21930:	cmn	r1, #1
   21934:	movwgt	r0, #1
   21938:	sub	sp, fp, #28
   2193c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   21940:	movw	r7, #49153	; 0xc001
   21944:	movw	r8, #49165	; 0xc00d
   21948:	movw	r9, #49159	; 0xc007
   2194c:	movw	sl, #49168	; 0xc010
   21950:	movw	r6, #49171	; 0xc013
   21954:	movt	r7, #4
   21958:	movt	r8, #4
   2195c:	movt	r9, #4
   21960:	movt	sl, #4
   21964:	movt	r6, #4
   21968:	b	21980 <__assert_fail@plt+0xeed0>
   2196c:	mov	r0, r5
   21970:	mov	r1, r6
   21974:	bl	127f8 <fprintf@plt>
   21978:	cmn	r0, #1
   2197c:	ble	21b20 <__assert_fail@plt+0xf070>
   21980:	ldrb	r2, [r4], #1
   21984:	cmp	r2, #34	; 0x22
   21988:	bhi	21a40 <__assert_fail@plt+0xef90>
   2198c:	add	r1, pc, #4
   21990:	mov	r0, #1
   21994:	ldr	pc, [r1, r2, lsl #2]
   21998:	andeq	r1, r2, r4, lsr #22
   2199c:	andeq	r1, r2, r4, ror #20
   219a0:	andeq	r1, r2, r4, ror #20
   219a4:	andeq	r1, r2, r4, ror #20
   219a8:	andeq	r1, r2, r4, ror #20
   219ac:	andeq	r1, r2, r4, ror #20
   219b0:	andeq	r1, r2, r4, ror #20
   219b4:	andeq	r1, r2, r4, ror #20
   219b8:	andeq	r1, r2, r4, lsr #20
   219bc:	andeq	r1, r2, ip, lsl #21
   219c0:	andeq	r1, r2, r8, lsr #21
   219c4:	andeq	r1, r2, r4, ror #20
   219c8:	andeq	r1, r2, r0, asr #21
   219cc:	ldrdeq	r1, [r2], -r8
   219d0:	andeq	r1, r2, r4, ror #20
   219d4:	andeq	r1, r2, r4, ror #20
   219d8:	andeq	r1, r2, r4, ror #20
   219dc:	andeq	r1, r2, r4, ror #20
   219e0:	andeq	r1, r2, r4, ror #20
   219e4:	andeq	r1, r2, r4, ror #20
   219e8:	andeq	r1, r2, r4, ror #20
   219ec:	andeq	r1, r2, r4, ror #20
   219f0:	andeq	r1, r2, r4, ror #20
   219f4:	andeq	r1, r2, r4, ror #20
   219f8:	andeq	r1, r2, r4, ror #20
   219fc:	andeq	r1, r2, r4, ror #20
   21a00:	andeq	r1, r2, r4, ror #20
   21a04:	andeq	r1, r2, r4, ror #20
   21a08:	andeq	r1, r2, r4, ror #20
   21a0c:	andeq	r1, r2, r4, ror #20
   21a10:	andeq	r1, r2, r4, ror #20
   21a14:	andeq	r1, r2, r4, ror #20
   21a18:	strdeq	r1, [r2], -r0
   21a1c:	andeq	r1, r2, r4, ror #20
   21a20:	andeq	r1, r2, ip, ror #18
   21a24:	movw	r1, #49156	; 0xc004
   21a28:	mov	r0, r5
   21a2c:	movt	r1, #4
   21a30:	bl	127f8 <fprintf@plt>
   21a34:	cmn	r0, #1
   21a38:	bgt	21980 <__assert_fail@plt+0xeed0>
   21a3c:	b	21b20 <__assert_fail@plt+0xf070>
   21a40:	cmp	r2, #92	; 0x5c
   21a44:	bne	21a64 <__assert_fail@plt+0xefb4>
   21a48:	movw	r1, #49150	; 0xbffe
   21a4c:	mov	r0, r5
   21a50:	movt	r1, #4
   21a54:	bl	127f8 <fprintf@plt>
   21a58:	cmn	r0, #1
   21a5c:	bgt	21980 <__assert_fail@plt+0xeed0>
   21a60:	b	21b20 <__assert_fail@plt+0xf070>
   21a64:	sub	r0, r2, #33	; 0x21
   21a68:	uxtb	r0, r0
   21a6c:	cmp	r0, #93	; 0x5d
   21a70:	bhi	21b08 <__assert_fail@plt+0xf058>
   21a74:	mov	r0, r2
   21a78:	mov	r1, r5
   21a7c:	bl	1299c <putc@plt>
   21a80:	cmn	r0, #1
   21a84:	bne	21980 <__assert_fail@plt+0xeed0>
   21a88:	b	21b20 <__assert_fail@plt+0xf070>
   21a8c:	movw	r1, #49162	; 0xc00a
   21a90:	mov	r0, r5
   21a94:	movt	r1, #4
   21a98:	bl	127f8 <fprintf@plt>
   21a9c:	cmn	r0, #1
   21aa0:	bgt	21980 <__assert_fail@plt+0xeed0>
   21aa4:	b	21b20 <__assert_fail@plt+0xf070>
   21aa8:	mov	r0, r5
   21aac:	mov	r1, r7
   21ab0:	bl	127f8 <fprintf@plt>
   21ab4:	cmn	r0, #1
   21ab8:	bgt	21980 <__assert_fail@plt+0xeed0>
   21abc:	b	21b20 <__assert_fail@plt+0xf070>
   21ac0:	mov	r0, r5
   21ac4:	mov	r1, r8
   21ac8:	bl	127f8 <fprintf@plt>
   21acc:	cmn	r0, #1
   21ad0:	bgt	21980 <__assert_fail@plt+0xeed0>
   21ad4:	b	21b20 <__assert_fail@plt+0xf070>
   21ad8:	mov	r0, r5
   21adc:	mov	r1, r9
   21ae0:	bl	127f8 <fprintf@plt>
   21ae4:	cmn	r0, #1
   21ae8:	bgt	21980 <__assert_fail@plt+0xeed0>
   21aec:	b	21b20 <__assert_fail@plt+0xf070>
   21af0:	mov	r0, r5
   21af4:	mov	r1, sl
   21af8:	bl	127f8 <fprintf@plt>
   21afc:	cmn	r0, #1
   21b00:	bgt	21980 <__assert_fail@plt+0xeed0>
   21b04:	b	21b20 <__assert_fail@plt+0xf070>
   21b08:	movw	r1, #49174	; 0xc016
   21b0c:	mov	r0, r5
   21b10:	movt	r1, #4
   21b14:	bl	127f8 <fprintf@plt>
   21b18:	cmn	r0, #1
   21b1c:	bgt	21980 <__assert_fail@plt+0xeed0>
   21b20:	mov	r0, #0
   21b24:	sub	sp, fp, #28
   21b28:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   21b2c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   21b30:	add	fp, sp, #28
   21b34:	sub	sp, sp, #12
   21b38:	sub	sp, sp, #8192	; 0x2000
   21b3c:	ldr	r7, [fp, #8]
   21b40:	mov	r9, r3
   21b44:	mov	sl, r0
   21b48:	cmp	r2, #0
   21b4c:	beq	21bec <__assert_fail@plt+0xf13c>
   21b50:	add	r4, sp, #8
   21b54:	mov	r8, r1
   21b58:	str	r1, [sp]
   21b5c:	mov	r1, #8192	; 0x2000
   21b60:	mov	r2, r7
   21b64:	mvn	r3, #0
   21b68:	mov	r0, r4
   21b6c:	bl	2b3cc <__assert_fail@plt+0x1891c>
   21b70:	mov	r5, r0
   21b74:	cmp	r0, #8192	; 0x2000
   21b78:	mov	r6, r4
   21b7c:	bcc	21ba8 <__assert_fail@plt+0xf0f8>
   21b80:	add	r4, r5, #1
   21b84:	mov	r0, r4
   21b88:	bl	2e038 <__assert_fail@plt+0x1b588>
   21b8c:	mov	r1, r4
   21b90:	mov	r2, r7
   21b94:	mvn	r3, #0
   21b98:	mov	r6, r0
   21b9c:	str	r8, [sp]
   21ba0:	add	r4, sp, #8
   21ba4:	bl	2b3cc <__assert_fail@plt+0x1891c>
   21ba8:	mov	r0, r6
   21bac:	mov	r1, r5
   21bb0:	bl	21c04 <__assert_fail@plt+0xf154>
   21bb4:	mov	r1, #0
   21bb8:	mov	r2, r6
   21bbc:	strb	r1, [r6, r0]
   21bc0:	mov	r0, sl
   21bc4:	mov	r1, r9
   21bc8:	bl	127f8 <fprintf@plt>
   21bcc:	mov	r5, r0
   21bd0:	cmp	r6, r4
   21bd4:	beq	21be0 <__assert_fail@plt+0xf130>
   21bd8:	mov	r0, r6
   21bdc:	bl	30174 <__assert_fail@plt+0x1d6c4>
   21be0:	mov	r0, r5
   21be4:	sub	sp, fp, #28
   21be8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   21bec:	mov	r0, sl
   21bf0:	mov	r1, r9
   21bf4:	mov	r2, r7
   21bf8:	sub	sp, fp, #28
   21bfc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   21c00:	b	127f8 <fprintf@plt>
   21c04:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   21c08:	add	fp, sp, #28
   21c0c:	sub	sp, sp, #28
   21c10:	mov	r5, r1
   21c14:	mov	sl, r0
   21c18:	add	r6, r0, r1
   21c1c:	bl	12648 <__ctype_get_mb_cur_max@plt>
   21c20:	cmp	r0, #2
   21c24:	bcs	21c60 <__assert_fail@plt+0xf1b0>
   21c28:	cmp	r5, #1
   21c2c:	blt	22004 <__assert_fail@plt+0xf554>
   21c30:	bl	12768 <__ctype_b_loc@plt>
   21c34:	mov	r1, #63	; 0x3f
   21c38:	ldrb	r2, [sl]
   21c3c:	ldr	r3, [r0]
   21c40:	add	r2, r3, r2, lsl #1
   21c44:	ldrb	r2, [r2, #1]
   21c48:	tst	r2, #64	; 0x40
   21c4c:	strbeq	r1, [sl]
   21c50:	add	sl, sl, #1
   21c54:	cmp	sl, r6
   21c58:	bcc	21c38 <__assert_fail@plt+0xf188>
   21c5c:	b	22004 <__assert_fail@plt+0xf554>
   21c60:	cmp	r5, #1
   21c64:	mov	r4, sl
   21c68:	blt	22000 <__assert_fail@plt+0xf550>
   21c6c:	mov	r3, #0
   21c70:	add	r8, sp, #12
   21c74:	add	r9, sp, #16
   21c78:	mov	r4, sl
   21c7c:	mov	r7, sl
   21c80:	ldrb	r0, [r7]
   21c84:	sub	r1, r0, #32
   21c88:	cmp	r1, #94	; 0x5e
   21c8c:	bhi	21e28 <__assert_fail@plt+0xf378>
   21c90:	add	r2, pc, #0
   21c94:	ldr	pc, [r2, r1, lsl #2]
   21c98:	andeq	r1, r2, r4, lsl lr
   21c9c:	andeq	r1, r2, r4, lsl lr
   21ca0:	andeq	r1, r2, r4, lsl lr
   21ca4:	andeq	r1, r2, r4, lsl lr
   21ca8:	andeq	r1, r2, r8, lsr #28
   21cac:	andeq	r1, r2, r4, lsl lr
   21cb0:	andeq	r1, r2, r4, lsl lr
   21cb4:	andeq	r1, r2, r4, lsl lr
   21cb8:	andeq	r1, r2, r4, lsl lr
   21cbc:	andeq	r1, r2, r4, lsl lr
   21cc0:	andeq	r1, r2, r4, lsl lr
   21cc4:	andeq	r1, r2, r4, lsl lr
   21cc8:	andeq	r1, r2, r4, lsl lr
   21ccc:	andeq	r1, r2, r4, lsl lr
   21cd0:	andeq	r1, r2, r4, lsl lr
   21cd4:	andeq	r1, r2, r4, lsl lr
   21cd8:	andeq	r1, r2, r4, lsl lr
   21cdc:	andeq	r1, r2, r4, lsl lr
   21ce0:	andeq	r1, r2, r4, lsl lr
   21ce4:	andeq	r1, r2, r4, lsl lr
   21ce8:	andeq	r1, r2, r4, lsl lr
   21cec:	andeq	r1, r2, r4, lsl lr
   21cf0:	andeq	r1, r2, r4, lsl lr
   21cf4:	andeq	r1, r2, r4, lsl lr
   21cf8:	andeq	r1, r2, r4, lsl lr
   21cfc:	andeq	r1, r2, r4, lsl lr
   21d00:	andeq	r1, r2, r4, lsl lr
   21d04:	andeq	r1, r2, r4, lsl lr
   21d08:	andeq	r1, r2, r4, lsl lr
   21d0c:	andeq	r1, r2, r4, lsl lr
   21d10:	andeq	r1, r2, r4, lsl lr
   21d14:	andeq	r1, r2, r4, lsl lr
   21d18:	andeq	r1, r2, r8, lsr #28
   21d1c:	andeq	r1, r2, r4, lsl lr
   21d20:	andeq	r1, r2, r4, lsl lr
   21d24:	andeq	r1, r2, r4, lsl lr
   21d28:	andeq	r1, r2, r4, lsl lr
   21d2c:	andeq	r1, r2, r4, lsl lr
   21d30:	andeq	r1, r2, r4, lsl lr
   21d34:	andeq	r1, r2, r4, lsl lr
   21d38:	andeq	r1, r2, r4, lsl lr
   21d3c:	andeq	r1, r2, r4, lsl lr
   21d40:	andeq	r1, r2, r4, lsl lr
   21d44:	andeq	r1, r2, r4, lsl lr
   21d48:	andeq	r1, r2, r4, lsl lr
   21d4c:	andeq	r1, r2, r4, lsl lr
   21d50:	andeq	r1, r2, r4, lsl lr
   21d54:	andeq	r1, r2, r4, lsl lr
   21d58:	andeq	r1, r2, r4, lsl lr
   21d5c:	andeq	r1, r2, r4, lsl lr
   21d60:	andeq	r1, r2, r4, lsl lr
   21d64:	andeq	r1, r2, r4, lsl lr
   21d68:	andeq	r1, r2, r4, lsl lr
   21d6c:	andeq	r1, r2, r4, lsl lr
   21d70:	andeq	r1, r2, r4, lsl lr
   21d74:	andeq	r1, r2, r4, lsl lr
   21d78:	andeq	r1, r2, r4, lsl lr
   21d7c:	andeq	r1, r2, r4, lsl lr
   21d80:	andeq	r1, r2, r4, lsl lr
   21d84:	andeq	r1, r2, r4, lsl lr
   21d88:	andeq	r1, r2, r4, lsl lr
   21d8c:	andeq	r1, r2, r4, lsl lr
   21d90:	andeq	r1, r2, r4, lsl lr
   21d94:	andeq	r1, r2, r4, lsl lr
   21d98:	andeq	r1, r2, r8, lsr #28
   21d9c:	andeq	r1, r2, r4, lsl lr
   21da0:	andeq	r1, r2, r4, lsl lr
   21da4:	andeq	r1, r2, r4, lsl lr
   21da8:	andeq	r1, r2, r4, lsl lr
   21dac:	andeq	r1, r2, r4, lsl lr
   21db0:	andeq	r1, r2, r4, lsl lr
   21db4:	andeq	r1, r2, r4, lsl lr
   21db8:	andeq	r1, r2, r4, lsl lr
   21dbc:	andeq	r1, r2, r4, lsl lr
   21dc0:	andeq	r1, r2, r4, lsl lr
   21dc4:	andeq	r1, r2, r4, lsl lr
   21dc8:	andeq	r1, r2, r4, lsl lr
   21dcc:	andeq	r1, r2, r4, lsl lr
   21dd0:	andeq	r1, r2, r4, lsl lr
   21dd4:	andeq	r1, r2, r4, lsl lr
   21dd8:	andeq	r1, r2, r4, lsl lr
   21ddc:	andeq	r1, r2, r4, lsl lr
   21de0:	andeq	r1, r2, r4, lsl lr
   21de4:	andeq	r1, r2, r4, lsl lr
   21de8:	andeq	r1, r2, r4, lsl lr
   21dec:	andeq	r1, r2, r4, lsl lr
   21df0:	andeq	r1, r2, r4, lsl lr
   21df4:	andeq	r1, r2, r4, lsl lr
   21df8:	andeq	r1, r2, r4, lsl lr
   21dfc:	andeq	r1, r2, r4, lsl lr
   21e00:	andeq	r1, r2, r4, lsl lr
   21e04:	andeq	r1, r2, r4, lsl lr
   21e08:	andeq	r1, r2, r4, lsl lr
   21e0c:	andeq	r1, r2, r4, lsl lr
   21e10:	andeq	r1, r2, r4, lsl lr
   21e14:	strb	r0, [r4], #1
   21e18:	add	r7, r7, #1
   21e1c:	cmp	r7, r6
   21e20:	bcc	21c80 <__assert_fail@plt+0xf1d0>
   21e24:	b	22000 <__assert_fail@plt+0xf550>
   21e28:	str	r3, [sp, #20]
   21e2c:	str	r3, [sp, #16]
   21e30:	str	r6, [sp]
   21e34:	b	21e54 <__assert_fail@plt+0xf3a4>
   21e38:	mov	r0, #63	; 0x3f
   21e3c:	add	r7, r7, r5
   21e40:	strb	r0, [r4], #1
   21e44:	mov	r0, r9
   21e48:	bl	1251c <mbsinit@plt>
   21e4c:	cmp	r0, #0
   21e50:	bne	21ff4 <__assert_fail@plt+0xf544>
   21e54:	sub	r2, r6, r7
   21e58:	mov	r0, r8
   21e5c:	mov	r1, r7
   21e60:	mov	r3, r9
   21e64:	bl	327dc <__assert_fail@plt+0x1fd2c>
   21e68:	cmp	r0, #0
   21e6c:	beq	21e88 <__assert_fail@plt+0xf3d8>
   21e70:	mov	r5, r0
   21e74:	cmn	r0, #2
   21e78:	beq	21fe0 <__assert_fail@plt+0xf530>
   21e7c:	cmn	r5, #1
   21e80:	bne	21e8c <__assert_fail@plt+0xf3dc>
   21e84:	b	21fe8 <__assert_fail@plt+0xf538>
   21e88:	mov	r5, #1
   21e8c:	ldr	r0, [sp, #12]
   21e90:	bl	1245c <wcwidth@plt>
   21e94:	cmp	r0, #0
   21e98:	bmi	21e38 <__assert_fail@plt+0xf388>
   21e9c:	cmp	r5, #16
   21ea0:	bcc	21f84 <__assert_fail@plt+0xf4d4>
   21ea4:	add	r0, r7, r5
   21ea8:	cmp	r4, r0
   21eac:	addcc	r0, r4, r5
   21eb0:	cmpcc	r7, r0
   21eb4:	bcc	21f84 <__assert_fail@plt+0xf4d4>
   21eb8:	bic	r0, r5, #15
   21ebc:	mov	r2, #0
   21ec0:	mov	lr, #48	; 0x30
   21ec4:	sub	r1, r0, #16
   21ec8:	str	r0, [sp, #4]
   21ecc:	mov	r0, #1
   21ed0:	add	r3, r0, r1, lsr #4
   21ed4:	cmp	r1, #48	; 0x30
   21ed8:	and	r0, r3, #3
   21edc:	str	r0, [sp, #8]
   21ee0:	bcc	21f3c <__assert_fail@plt+0xf48c>
   21ee4:	ldr	r0, [sp, #8]
   21ee8:	mov	r2, #0
   21eec:	sub	r3, r3, r0
   21ef0:	add	r1, r7, r2
   21ef4:	add	r9, r4, r2
   21ef8:	subs	r3, r3, #4
   21efc:	add	r2, r2, #64	; 0x40
   21f00:	mov	r0, r1
   21f04:	mov	ip, r9
   21f08:	add	r8, r1, #16
   21f0c:	add	r6, r9, #16
   21f10:	add	r1, r1, #32
   21f14:	vld1.8	{d16-d17}, [r0], lr
   21f18:	vst1.8	{d16-d17}, [ip], lr
   21f1c:	vld1.8	{d16-d17}, [r8]
   21f20:	vst1.8	{d16-d17}, [r6]
   21f24:	vld1.8	{d16-d17}, [r1]
   21f28:	add	r1, r9, #32
   21f2c:	vst1.8	{d16-d17}, [r1]
   21f30:	vld1.8	{d16-d17}, [r0]
   21f34:	vst1.8	{d16-d17}, [ip]
   21f38:	bne	21ef0 <__assert_fail@plt+0xf440>
   21f3c:	ldr	r0, [sp, #8]
   21f40:	cmp	r0, #0
   21f44:	beq	21f64 <__assert_fail@plt+0xf4b4>
   21f48:	add	r3, r4, r2
   21f4c:	add	r2, r7, r2
   21f50:	rsb	r1, r0, #0
   21f54:	vld1.8	{d16-d17}, [r2]!
   21f58:	adds	r1, r1, #1
   21f5c:	vst1.8	{d16-d17}, [r3]!
   21f60:	bcc	21f54 <__assert_fail@plt+0xf4a4>
   21f64:	ldr	r0, [sp, #4]
   21f68:	ldr	r6, [sp]
   21f6c:	add	r8, sp, #12
   21f70:	add	r9, sp, #16
   21f74:	add	r7, r7, r0
   21f78:	add	r4, r4, r0
   21f7c:	subs	r5, r5, r0
   21f80:	beq	21e44 <__assert_fail@plt+0xf394>
   21f84:	ands	r1, r5, #3
   21f88:	sub	r0, r5, #1
   21f8c:	beq	21fa4 <__assert_fail@plt+0xf4f4>
   21f90:	ldrb	r2, [r7], #1
   21f94:	subs	r1, r1, #1
   21f98:	sub	r5, r5, #1
   21f9c:	strb	r2, [r4], #1
   21fa0:	bne	21f90 <__assert_fail@plt+0xf4e0>
   21fa4:	cmp	r0, #3
   21fa8:	bcc	21e44 <__assert_fail@plt+0xf394>
   21fac:	ldrb	r0, [r7]
   21fb0:	subs	r5, r5, #4
   21fb4:	strb	r0, [r4]
   21fb8:	ldrb	r0, [r7, #1]
   21fbc:	strb	r0, [r4, #1]
   21fc0:	ldrb	r0, [r7, #2]
   21fc4:	strb	r0, [r4, #2]
   21fc8:	ldrb	r0, [r7, #3]
   21fcc:	add	r7, r7, #4
   21fd0:	strb	r0, [r4, #3]
   21fd4:	add	r4, r4, #4
   21fd8:	bne	21fac <__assert_fail@plt+0xf4fc>
   21fdc:	b	21e44 <__assert_fail@plt+0xf394>
   21fe0:	mov	r7, r6
   21fe4:	b	21fec <__assert_fail@plt+0xf53c>
   21fe8:	add	r7, r7, #1
   21fec:	mov	r0, #63	; 0x3f
   21ff0:	strb	r0, [r4], #1
   21ff4:	mov	r3, #0
   21ff8:	cmp	r7, r6
   21ffc:	bcc	21c80 <__assert_fail@plt+0xf1d0>
   22000:	sub	r5, r4, sl
   22004:	mov	r0, r5
   22008:	sub	sp, fp, #28
   2200c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   22010:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   22014:	add	fp, sp, #28
   22018:	sub	sp, sp, #12
   2201c:	movw	sl, #49180	; 0xc01c
   22020:	mov	r7, r0
   22024:	mov	r4, #0
   22028:	mov	r6, #0
   2202c:	movt	sl, #4
   22030:	ldr	r5, [sl, r4]
   22034:	mov	r1, r7
   22038:	mov	r0, r5
   2203c:	bl	123fc <strcmp@plt>
   22040:	cmp	r0, #0
   22044:	beq	22104 <__assert_fail@plt+0xf654>
   22048:	mov	r0, r5
   2204c:	bl	2ce5c <__assert_fail@plt+0x1a3ac>
   22050:	bl	127bc <strlen@plt>
   22054:	add	r0, r6, r0
   22058:	add	r4, r4, #12
   2205c:	add	r6, r0, #2
   22060:	cmp	r4, #156	; 0x9c
   22064:	bne	22030 <__assert_fail@plt+0xf580>
   22068:	add	r0, r6, #1
   2206c:	str	r7, [sp, #8]
   22070:	bl	2e038 <__assert_fail@plt+0x1b588>
   22074:	mov	r6, r0
   22078:	mov	r4, #0
   2207c:	movw	r8, #8236	; 0x202c
   22080:	mov	r9, #0
   22084:	str	r0, [sp, #4]
   22088:	ldr	r0, [sl, -r9]
   2208c:	cmp	r9, #0
   22090:	strhne	r8, [r6]
   22094:	strbne	r4, [r6, #2]!
   22098:	bl	2ce5c <__assert_fail@plt+0x1a3ac>
   2209c:	mov	r7, r0
   220a0:	bl	127bc <strlen@plt>
   220a4:	mov	r5, r0
   220a8:	add	r2, r0, #1
   220ac:	mov	r0, r6
   220b0:	mov	r1, r7
   220b4:	bl	124e0 <memcpy@plt>
   220b8:	sub	r9, r9, #12
   220bc:	add	r6, r6, r5
   220c0:	cmn	r9, #156	; 0x9c
   220c4:	bne	22088 <__assert_fail@plt+0xf5d8>
   220c8:	movw	r1, #49336	; 0xc0b8
   220cc:	mov	r0, #0
   220d0:	mov	r2, #5
   220d4:	movt	r1, #4
   220d8:	bl	12564 <dcgettext@plt>
   220dc:	mov	r5, r0
   220e0:	ldr	r0, [sp, #8]
   220e4:	bl	2ce5c <__assert_fail@plt+0x1a3ac>
   220e8:	mov	r3, r0
   220ec:	ldr	r0, [sp, #4]
   220f0:	mov	r1, #0
   220f4:	mov	r2, r5
   220f8:	str	r0, [sp]
   220fc:	mov	r0, #1
   22100:	bl	1269c <error@plt>
   22104:	add	r0, sl, r4
   22108:	ldr	r0, [r0, #8]
   2210c:	sub	sp, fp, #28
   22110:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   22114:	mov	r1, r0
   22118:	mov	r0, #0
   2211c:	cmp	r1, #12
   22120:	bxhi	lr
   22124:	add	r0, r1, r1, lsl #1
   22128:	movw	r1, #49180	; 0xc01c
   2212c:	movt	r1, #4
   22130:	ldr	r0, [r1, r0, lsl #2]
   22134:	bx	lr
   22138:	mov	r1, r0
   2213c:	mvn	r0, #0
   22140:	cmp	r1, #12
   22144:	bxhi	lr
   22148:	add	r0, r1, r1, lsl #1
   2214c:	movw	r1, #49180	; 0xc01c
   22150:	movt	r1, #4
   22154:	add	r0, r1, r0, lsl #2
   22158:	ldr	r0, [r0, #8]
   2215c:	bx	lr
   22160:	mov	r1, r0
   22164:	mov	r0, #0
   22168:	cmp	r1, #12
   2216c:	bxhi	lr
   22170:	add	r0, r1, r1, lsl #1
   22174:	movw	r1, #49180	; 0xc01c
   22178:	movt	r1, #4
   2217c:	add	r0, r1, r0, lsl #2
   22180:	ldr	r0, [r0, #4]
   22184:	bx	lr
   22188:	push	{r4, sl, fp, lr}
   2218c:	add	fp, sp, #8
   22190:	mov	lr, r0
   22194:	mvn	r0, #0
   22198:	cmp	lr, #12
   2219c:	pophi	{r4, sl, fp, pc}
   221a0:	cmp	lr, #0
   221a4:	beq	221f4 <__assert_fail@plt+0xf744>
   221a8:	movw	r3, #49180	; 0xc01c
   221ac:	add	r2, lr, lr, lsl #1
   221b0:	movt	r3, #4
   221b4:	add	r2, r3, r2, lsl #2
   221b8:	ldr	ip, [r2, #8]
   221bc:	add	r2, r3, #4
   221c0:	mov	r3, #0
   221c4:	b	221d8 <__assert_fail@plt+0xf728>
   221c8:	add	r3, r3, #1
   221cc:	add	r2, r2, #12
   221d0:	cmp	lr, r3
   221d4:	beq	221f4 <__assert_fail@plt+0xf744>
   221d8:	ldr	r4, [r2]
   221dc:	tst	r4, r1
   221e0:	beq	221c8 <__assert_fail@plt+0xf718>
   221e4:	ldr	r4, [r2, #4]
   221e8:	cmp	ip, r4
   221ec:	bne	221c8 <__assert_fail@plt+0xf718>
   221f0:	mov	r0, r3
   221f4:	pop	{r4, sl, fp, pc}
   221f8:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   221fc:	add	fp, sp, #24
   22200:	sub	sp, sp, #8
   22204:	mov	r5, r1
   22208:	mov	r4, r0
   2220c:	bl	12804 <__errno_location@plt>
   22210:	mov	r6, r0
   22214:	mov	r0, #0
   22218:	add	r1, sp, #4
   2221c:	mov	r2, #10
   22220:	str	r0, [r6]
   22224:	mov	r0, r4
   22228:	bl	12408 <strtol@plt>
   2222c:	add	r1, r0, #-2147483647	; 0x80000001
   22230:	cmp	r1, #1
   22234:	bls	22294 <__assert_fail@plt+0xf7e4>
   22238:	ldr	r7, [sp, #4]
   2223c:	ldrb	r1, [r7]
   22240:	cmp	r1, #0
   22244:	bne	222ac <__assert_fail@plt+0xf7fc>
   22248:	cmp	r7, r4
   2224c:	subne	sp, fp, #24
   22250:	popne	{r4, r5, r6, r7, r8, sl, fp, pc}
   22254:	movw	r1, #49520	; 0xc170
   22258:	ldr	r6, [r6]
   2225c:	mov	r0, #0
   22260:	mov	r2, #5
   22264:	movt	r1, #4
   22268:	bl	12564 <dcgettext@plt>
   2226c:	mov	r7, r0
   22270:	mov	r0, #0
   22274:	mov	r1, r5
   22278:	mov	r2, r4
   2227c:	bl	2c88c <__assert_fail@plt+0x19ddc>
   22280:	mov	r3, r0
   22284:	mov	r0, #1
   22288:	mov	r1, r6
   2228c:	mov	r2, r7
   22290:	bl	1269c <error@plt>
   22294:	ldr	r1, [r6]
   22298:	movw	r2, #56015	; 0xdacf
   2229c:	mov	r0, #1
   222a0:	mov	r3, r4
   222a4:	movt	r2, #4
   222a8:	bl	1269c <error@plt>
   222ac:	movw	r1, #49493	; 0xc155
   222b0:	ldr	r8, [r6]
   222b4:	mov	r0, #0
   222b8:	mov	r2, #5
   222bc:	movt	r1, #4
   222c0:	bl	12564 <dcgettext@plt>
   222c4:	mov	r6, r0
   222c8:	mov	r0, #0
   222cc:	mov	r1, r5
   222d0:	mov	r2, r7
   222d4:	bl	2c88c <__assert_fail@plt+0x19ddc>
   222d8:	mov	r7, r0
   222dc:	mov	r0, #1
   222e0:	mov	r1, r5
   222e4:	mov	r2, r4
   222e8:	bl	2c88c <__assert_fail@plt+0x19ddc>
   222ec:	str	r0, [sp]
   222f0:	mov	r0, #1
   222f4:	mov	r1, r8
   222f8:	mov	r2, r6
   222fc:	mov	r3, r7
   22300:	bl	1269c <error@plt>
   22304:	push	{r4, r5, fp, lr}
   22308:	add	fp, sp, #8
   2230c:	ldr	r5, [fp, #8]
   22310:	cmp	r2, #0
   22314:	beq	2232c <__assert_fail@plt+0xf87c>
   22318:	mov	r2, #0
   2231c:	str	r2, [r3]
   22320:	str	r2, [r5]
   22324:	ldr	r2, [r3]
   22328:	b	22350 <__assert_fail@plt+0xf8a0>
   2232c:	ldr	r2, [r5]
   22330:	ldr	r4, [r3]
   22334:	add	r2, r4, r2
   22338:	str	r2, [r3]
   2233c:	ldrb	r4, [r0, r2]
   22340:	cmp	r4, #0
   22344:	beq	2238c <__assert_fail@plt+0xf8dc>
   22348:	add	r2, r2, #1
   2234c:	str	r2, [r3]
   22350:	add	r4, r0, r2
   22354:	ldrb	r0, [r1]
   22358:	cmp	r0, #0
   2235c:	beq	22378 <__assert_fail@plt+0xf8c8>
   22360:	mov	r0, r4
   22364:	bl	129e4 <strpbrk@plt>
   22368:	cmp	r0, #0
   2236c:	beq	22378 <__assert_fail@plt+0xf8c8>
   22370:	sub	r0, r0, r4
   22374:	b	22380 <__assert_fail@plt+0xf8d0>
   22378:	mov	r0, r4
   2237c:	bl	127bc <strlen@plt>
   22380:	str	r0, [r5]
   22384:	mov	r0, #1
   22388:	pop	{r4, r5, fp, pc}
   2238c:	mov	r0, #0
   22390:	pop	{r4, r5, fp, pc}
   22394:	push	{r4, r5, fp, lr}
   22398:	add	fp, sp, #8
   2239c:	sub	sp, sp, #16
   223a0:	mov	r4, r1
   223a4:	movw	r1, #49544	; 0xc188
   223a8:	mov	r5, r0
   223ac:	mov	r0, #0
   223b0:	mov	r2, #5
   223b4:	movt	r1, #4
   223b8:	bl	12564 <dcgettext@plt>
   223bc:	movw	r2, #49789	; 0xc27d
   223c0:	movw	r3, #48989	; 0xbf5d
   223c4:	mov	r1, r0
   223c8:	movw	r0, #49836	; 0xc2ac
   223cc:	movt	r2, #4
   223d0:	movt	r0, #4
   223d4:	movt	r3, #4
   223d8:	str	r2, [sp, #4]
   223dc:	movw	r2, #49750	; 0xc256
   223e0:	str	r3, [sp]
   223e4:	str	r0, [sp, #8]
   223e8:	mov	r0, r5
   223ec:	mov	r3, r4
   223f0:	movt	r2, #4
   223f4:	bl	127f8 <fprintf@plt>
   223f8:	sub	sp, fp, #8
   223fc:	pop	{r4, r5, fp, pc}
   22400:	push	{fp, lr}
   22404:	mov	fp, sp
   22408:	sub	sp, sp, #8
   2240c:	movw	r2, #9992	; 0x2708
   22410:	mov	r3, #0
   22414:	movt	r2, #1
   22418:	str	r3, [sp]
   2241c:	mov	r3, #0
   22420:	str	r2, [sp, #4]
   22424:	mov	r2, #0
   22428:	bl	225a4 <__assert_fail@plt+0xfaf4>
   2242c:	mov	sp, fp
   22430:	pop	{fp, pc}
   22434:	push	{r4, sl, fp, lr}
   22438:	add	fp, sp, #8
   2243c:	mov	r4, r0
   22440:	mov	r0, #24
   22444:	bl	327ac <__assert_fail@plt+0x1fcfc>
   22448:	cmp	r0, #0
   2244c:	moveq	r0, #0
   22450:	movne	r1, #0
   22454:	strne	r4, [r0, #16]
   22458:	strne	r4, [r0, #20]
   2245c:	strne	r1, [r0]
   22460:	pop	{r4, sl, fp, pc}
   22464:	push	{r4, sl, fp, lr}
   22468:	add	fp, sp, #8
   2246c:	mov	r4, r0
   22470:	mov	r0, #24
   22474:	bl	327ac <__assert_fail@plt+0x1fcfc>
   22478:	cmp	r0, #0
   2247c:	beq	22494 <__assert_fail@plt+0xf9e4>
   22480:	vmov.i32	q8, #0	; 0x00000000
   22484:	mov	r1, r0
   22488:	str	r4, [r1], #4
   2248c:	vst1.32	{d16-d17}, [r1]
   22490:	pop	{r4, sl, fp, pc}
   22494:	mov	r0, #0
   22498:	pop	{r4, sl, fp, pc}
   2249c:	push	{r4, r5, r6, sl, fp, lr}
   224a0:	add	fp, sp, #16
   224a4:	ldr	r3, [r0]
   224a8:	mov	r4, r1
   224ac:	mov	r5, r0
   224b0:	cmp	r3, #0
   224b4:	beq	224f0 <__assert_fail@plt+0xfa40>
   224b8:	add	r0, r5, #8
   224bc:	add	r1, r5, #12
   224c0:	mov	r2, #0
   224c4:	mov	r6, #0
   224c8:	bl	12a08 <getdelim@plt>
   224cc:	cmn	r0, #1
   224d0:	ble	22520 <__assert_fail@plt+0xfa70>
   224d4:	mov	r0, #1
   224d8:	str	r0, [r4]
   224dc:	ldmib	r5, {r0, r6}
   224e0:	add	r0, r0, #1
   224e4:	str	r0, [r5, #4]
   224e8:	mov	r0, r6
   224ec:	pop	{r4, r5, r6, sl, fp, pc}
   224f0:	ldr	r0, [r5, #20]
   224f4:	ldr	r0, [r0]
   224f8:	cmp	r0, #0
   224fc:	beq	22540 <__assert_fail@plt+0xfa90>
   22500:	mov	r0, #1
   22504:	str	r0, [r4]
   22508:	ldr	r0, [r5, #20]
   2250c:	add	r1, r0, #4
   22510:	str	r1, [r5, #20]
   22514:	ldr	r6, [r0]
   22518:	mov	r0, r6
   2251c:	pop	{r4, r5, r6, sl, fp, pc}
   22520:	ldr	r0, [r5]
   22524:	bl	1278c <feof@plt>
   22528:	cmp	r0, #0
   2252c:	mov	r1, #2
   22530:	mov	r0, r6
   22534:	movweq	r1, #4
   22538:	str	r1, [r4]
   2253c:	pop	{r4, r5, r6, sl, fp, pc}
   22540:	mov	r0, #2
   22544:	mov	r6, #0
   22548:	str	r0, [r4]
   2254c:	mov	r0, r6
   22550:	pop	{r4, r5, r6, sl, fp, pc}
   22554:	ldr	r1, [r0]
   22558:	cmp	r1, #0
   2255c:	ldrne	r0, [r0, #4]
   22560:	bxne	lr
   22564:	ldr	r1, [r0, #16]
   22568:	ldr	r0, [r0, #20]
   2256c:	sub	r0, r0, r1
   22570:	asr	r0, r0, #2
   22574:	bx	lr
   22578:	push	{r4, sl, fp, lr}
   2257c:	add	fp, sp, #8
   22580:	mov	r4, r0
   22584:	ldr	r0, [r0]
   22588:	cmp	r0, #0
   2258c:	beq	22598 <__assert_fail@plt+0xfae8>
   22590:	ldr	r0, [r4, #8]
   22594:	bl	30174 <__assert_fail@plt+0x1d6c4>
   22598:	mov	r0, r4
   2259c:	pop	{r4, sl, fp, lr}
   225a0:	b	30174 <__assert_fail@plt+0x1d6c4>
   225a4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   225a8:	add	fp, sp, #28
   225ac:	sub	sp, sp, #4
   225b0:	sub	sp, sp, #1024	; 0x400
   225b4:	mov	r9, r0
   225b8:	mov	r0, sp
   225bc:	cmp	r2, #0
   225c0:	mov	r5, r2
   225c4:	mov	r4, r3
   225c8:	ldr	sl, [fp, #12]
   225cc:	movw	r7, #55912	; 0xda68
   225d0:	mov	r8, r1
   225d4:	moveq	r5, r0
   225d8:	ldr	r0, [fp, #8]
   225dc:	movweq	r4, #1024	; 0x400
   225e0:	movt	r7, #4
   225e4:	cmn	r4, #-2147483647	; 0x80000001
   225e8:	mov	r6, r5
   225ec:	mvncs	r4, #-2147483648	; 0x80000000
   225f0:	cmp	r0, #0
   225f4:	movne	r7, r0
   225f8:	mov	r0, r9
   225fc:	mov	r1, r8
   22600:	mov	r2, r6
   22604:	mov	r3, r4
   22608:	blx	sl
   2260c:	cmn	r0, #1
   22610:	ble	22678 <__assert_fail@plt+0xfbc8>
   22614:	cmp	r0, r4
   22618:	blt	226a4 <__assert_fail@plt+0xfbf4>
   2261c:	cmp	r6, r5
   22620:	beq	22630 <__assert_fail@plt+0xfb80>
   22624:	ldr	r1, [r7, #8]
   22628:	mov	r0, r6
   2262c:	blx	r1
   22630:	cmn	r4, #-1073741823	; 0xc0000001
   22634:	bge	226f4 <__assert_fail@plt+0xfc44>
   22638:	mov	r0, #1
   2263c:	ldr	r1, [r7]
   22640:	orr	r4, r0, r4, lsl #1
   22644:	mov	r0, r4
   22648:	blx	r1
   2264c:	mov	r6, r0
   22650:	cmp	r0, #0
   22654:	bne	225f8 <__assert_fail@plt+0xfb48>
   22658:	ldr	r1, [r7, #12]
   2265c:	cmp	r1, #0
   22660:	beq	2266c <__assert_fail@plt+0xfbbc>
   22664:	mov	r0, r4
   22668:	blx	r1
   2266c:	bl	12804 <__errno_location@plt>
   22670:	mov	r1, #12
   22674:	b	226fc <__assert_fail@plt+0xfc4c>
   22678:	mov	r4, #0
   2267c:	cmp	r6, r5
   22680:	beq	22704 <__assert_fail@plt+0xfc54>
   22684:	bl	12804 <__errno_location@plt>
   22688:	ldr	r1, [r7, #8]
   2268c:	ldr	r8, [r0]
   22690:	mov	r5, r0
   22694:	mov	r0, r6
   22698:	blx	r1
   2269c:	str	r8, [r5]
   226a0:	b	22704 <__assert_fail@plt+0xfc54>
   226a4:	mov	r1, #0
   226a8:	add	r8, r0, #1
   226ac:	strb	r1, [r6, r0]
   226b0:	mov	r0, sp
   226b4:	cmp	r6, r0
   226b8:	beq	22718 <__assert_fail@plt+0xfc68>
   226bc:	cmp	r6, r5
   226c0:	beq	22710 <__assert_fail@plt+0xfc60>
   226c4:	cmp	r8, r4
   226c8:	bge	22710 <__assert_fail@plt+0xfc60>
   226cc:	ldr	r2, [r7, #4]
   226d0:	cmp	r2, #0
   226d4:	beq	22710 <__assert_fail@plt+0xfc60>
   226d8:	mov	r0, r6
   226dc:	mov	r1, r8
   226e0:	blx	r2
   226e4:	cmp	r0, #0
   226e8:	mov	r4, r0
   226ec:	moveq	r4, r6
   226f0:	b	22704 <__assert_fail@plt+0xfc54>
   226f4:	bl	12804 <__errno_location@plt>
   226f8:	mov	r1, #36	; 0x24
   226fc:	mov	r4, #0
   22700:	str	r1, [r0]
   22704:	mov	r0, r4
   22708:	sub	sp, fp, #28
   2270c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   22710:	mov	r4, r6
   22714:	b	22704 <__assert_fail@plt+0xfc54>
   22718:	ldr	r1, [r7]
   2271c:	mov	r0, r8
   22720:	blx	r1
   22724:	cmp	r0, #0
   22728:	beq	22740 <__assert_fail@plt+0xfc90>
   2272c:	mov	r1, sp
   22730:	mov	r2, r8
   22734:	mov	r4, r0
   22738:	bl	124e0 <memcpy@plt>
   2273c:	b	22704 <__assert_fail@plt+0xfc54>
   22740:	mov	r4, r8
   22744:	b	22658 <__assert_fail@plt+0xfba8>
   22748:	push	{r4, r5, r6, sl, fp, lr}
   2274c:	add	fp, sp, #16
   22750:	mov	r6, r1
   22754:	mov	r1, #1
   22758:	mov	r2, #0
   2275c:	mov	r4, r0
   22760:	mov	r5, #0
   22764:	bl	2ff38 <__assert_fail@plt+0x1d488>
   22768:	cmp	r0, #0
   2276c:	bmi	2279c <__assert_fail@plt+0xfcec>
   22770:	cmp	r6, #0
   22774:	bic	r2, r0, #1
   22778:	orrne	r2, r0, #1
   2277c:	cmp	r0, r2
   22780:	beq	227a0 <__assert_fail@plt+0xfcf0>
   22784:	mov	r0, r4
   22788:	mov	r1, #2
   2278c:	bl	2ff38 <__assert_fail@plt+0x1d488>
   22790:	cmn	r0, #1
   22794:	movwne	r0, #0
   22798:	pop	{r4, r5, r6, sl, fp, pc}
   2279c:	mvn	r5, #0
   227a0:	mov	r0, r5
   227a4:	pop	{r4, r5, r6, sl, fp, pc}
   227a8:	movw	r1, #1030	; 0x406
   227ac:	mov	r2, #0
   227b0:	b	2ff38 <__assert_fail@plt+0x1d488>
   227b4:	movw	r1, #60660	; 0xecf4
   227b8:	movt	r1, #5
   227bc:	str	r0, [r1]
   227c0:	bx	lr
   227c4:	movw	r1, #60664	; 0xecf8
   227c8:	movt	r1, #5
   227cc:	strb	r0, [r1]
   227d0:	bx	lr
   227d4:	push	{r4, r5, r6, sl, fp, lr}
   227d8:	add	fp, sp, #16
   227dc:	sub	sp, sp, #8
   227e0:	movw	r0, #58716	; 0xe55c
   227e4:	movt	r0, #5
   227e8:	ldr	r0, [r0]
   227ec:	bl	46abc <__assert_fail@plt+0x3400c>
   227f0:	cmp	r0, #0
   227f4:	beq	2281c <__assert_fail@plt+0xfd6c>
   227f8:	movw	r0, #60664	; 0xecf8
   227fc:	movt	r0, #5
   22800:	ldrb	r0, [r0]
   22804:	cmp	r0, #0
   22808:	beq	2283c <__assert_fail@plt+0xfd8c>
   2280c:	bl	12804 <__errno_location@plt>
   22810:	ldr	r0, [r0]
   22814:	cmp	r0, #32
   22818:	bne	2283c <__assert_fail@plt+0xfd8c>
   2281c:	movw	r0, #58704	; 0xe550
   22820:	movt	r0, #5
   22824:	ldr	r0, [r0]
   22828:	bl	46abc <__assert_fail@plt+0x3400c>
   2282c:	cmp	r0, #0
   22830:	subeq	sp, fp, #16
   22834:	popeq	{r4, r5, r6, sl, fp, pc}
   22838:	b	228ac <__assert_fail@plt+0xfdfc>
   2283c:	movw	r1, #49858	; 0xc2c2
   22840:	mov	r0, #0
   22844:	mov	r2, #5
   22848:	movt	r1, #4
   2284c:	bl	12564 <dcgettext@plt>
   22850:	mov	r4, r0
   22854:	movw	r0, #60660	; 0xecf4
   22858:	movt	r0, #5
   2285c:	ldr	r6, [r0]
   22860:	bl	12804 <__errno_location@plt>
   22864:	ldr	r5, [r0]
   22868:	cmp	r6, #0
   2286c:	bne	22888 <__assert_fail@plt+0xfdd8>
   22870:	movw	r2, #56015	; 0xdacf
   22874:	mov	r0, #0
   22878:	mov	r1, r5
   2287c:	mov	r3, r4
   22880:	movt	r2, #4
   22884:	b	228a8 <__assert_fail@plt+0xfdf8>
   22888:	mov	r0, r6
   2288c:	bl	2cad4 <__assert_fail@plt+0x1a024>
   22890:	movw	r2, #49870	; 0xc2ce
   22894:	mov	r3, r0
   22898:	str	r4, [sp]
   2289c:	mov	r0, #0
   228a0:	mov	r1, r5
   228a4:	movt	r2, #4
   228a8:	bl	1269c <error@plt>
   228ac:	movw	r0, #58608	; 0xe4f0
   228b0:	movt	r0, #5
   228b4:	ldr	r0, [r0]
   228b8:	bl	124d4 <_exit@plt>
   228bc:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   228c0:	add	fp, sp, #24
   228c4:	bl	126b4 <opendir@plt>
   228c8:	cmp	r0, #0
   228cc:	beq	22920 <__assert_fail@plt+0xfe70>
   228d0:	mov	r4, r0
   228d4:	bl	129a8 <dirfd@plt>
   228d8:	cmp	r0, #2
   228dc:	bhi	2292c <__assert_fail@plt+0xfe7c>
   228e0:	movw	r1, #1030	; 0x406
   228e4:	mov	r2, #3
   228e8:	bl	2ff38 <__assert_fail@plt+0x1d488>
   228ec:	cmn	r0, #1
   228f0:	ble	22934 <__assert_fail@plt+0xfe84>
   228f4:	mov	r7, r0
   228f8:	bl	12984 <fdopendir@plt>
   228fc:	mov	r5, r0
   22900:	bl	12804 <__errno_location@plt>
   22904:	ldr	r8, [r0]
   22908:	mov	r6, r0
   2290c:	cmp	r5, #0
   22910:	bne	22944 <__assert_fail@plt+0xfe94>
   22914:	mov	r0, r7
   22918:	bl	12a68 <close@plt>
   2291c:	b	22940 <__assert_fail@plt+0xfe90>
   22920:	mov	r5, #0
   22924:	mov	r0, r5
   22928:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   2292c:	mov	r0, r4
   22930:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   22934:	bl	12804 <__errno_location@plt>
   22938:	ldr	r8, [r0]
   2293c:	mov	r6, r0
   22940:	mov	r5, #0
   22944:	mov	r0, r4
   22948:	bl	12a80 <closedir@plt>
   2294c:	mov	r0, r5
   22950:	str	r8, [r6]
   22954:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   22958:	push	{r4, r5, r6, sl, fp, lr}
   2295c:	add	fp, sp, #16
   22960:	mov	r6, r0
   22964:	bl	46a38 <__assert_fail@plt+0x33f88>
   22968:	mov	r4, r0
   2296c:	ldrb	r0, [r0]
   22970:	cmp	r0, #0
   22974:	beq	22994 <__assert_fail@plt+0xfee4>
   22978:	mov	r0, r4
   2297c:	bl	46a84 <__assert_fail@plt+0x33fd4>
   22980:	mov	r5, r0
   22984:	ldrb	r0, [r4, r0]
   22988:	cmp	r0, #47	; 0x2f
   2298c:	addeq	r5, r5, #1
   22990:	b	229a4 <__assert_fail@plt+0xfef4>
   22994:	mov	r0, r6
   22998:	bl	46a84 <__assert_fail@plt+0x33fd4>
   2299c:	mov	r5, r0
   229a0:	mov	r4, r6
   229a4:	add	r0, r5, #1
   229a8:	bl	2e050 <__assert_fail@plt+0x1b5a0>
   229ac:	mov	r1, r4
   229b0:	mov	r2, r5
   229b4:	mov	r6, r0
   229b8:	bl	124e0 <memcpy@plt>
   229bc:	mov	r0, #0
   229c0:	strb	r0, [r6, r5]
   229c4:	mov	r0, r6
   229c8:	pop	{r4, r5, r6, sl, fp, pc}
   229cc:	push	{r4, r5, r6, sl, fp, lr}
   229d0:	add	fp, sp, #16
   229d4:	mov	r5, r0
   229d8:	mov	r4, r0
   229dc:	ldrb	r6, [r5], #-1
   229e0:	bl	46a38 <__assert_fail@plt+0x33f88>
   229e4:	sub	r2, r0, r4
   229e8:	sub	r0, r6, #47	; 0x2f
   229ec:	clz	r0, r0
   229f0:	lsr	r1, r0, #5
   229f4:	mov	r0, r2
   229f8:	cmp	r2, r1
   229fc:	bls	22a10 <__assert_fail@plt+0xff60>
   22a00:	ldrb	r3, [r5, r0]
   22a04:	sub	r2, r0, #1
   22a08:	cmp	r3, #47	; 0x2f
   22a0c:	beq	229f4 <__assert_fail@plt+0xff44>
   22a10:	pop	{r4, r5, r6, sl, fp, pc}
   22a14:	push	{r4, r5, r6, sl, fp, lr}
   22a18:	add	fp, sp, #16
   22a1c:	mov	r6, r0
   22a20:	mov	r4, r0
   22a24:	ldrb	r5, [r6], #-1
   22a28:	bl	46a38 <__assert_fail@plt+0x33f88>
   22a2c:	sub	r1, r0, r4
   22a30:	sub	r0, r5, #47	; 0x2f
   22a34:	clz	r0, r0
   22a38:	lsr	r0, r0, #5
   22a3c:	mov	r5, r1
   22a40:	cmp	r1, r0
   22a44:	bls	22a58 <__assert_fail@plt+0xffa8>
   22a48:	ldrb	r2, [r6, r5]
   22a4c:	sub	r1, r5, #1
   22a50:	cmp	r2, #47	; 0x2f
   22a54:	beq	22a3c <__assert_fail@plt+0xff8c>
   22a58:	cmp	r5, #0
   22a5c:	mov	r0, r5
   22a60:	addeq	r0, r0, #1
   22a64:	add	r0, r0, #1
   22a68:	bl	327ac <__assert_fail@plt+0x1fcfc>
   22a6c:	mov	r6, r0
   22a70:	cmp	r0, #0
   22a74:	beq	22aa0 <__assert_fail@plt+0xfff0>
   22a78:	mov	r0, r6
   22a7c:	mov	r1, r4
   22a80:	mov	r2, r5
   22a84:	bl	124e0 <memcpy@plt>
   22a88:	cmp	r5, #0
   22a8c:	moveq	r0, #46	; 0x2e
   22a90:	moveq	r5, #1
   22a94:	strbeq	r0, [r6]
   22a98:	mov	r0, #0
   22a9c:	strb	r0, [r6, r5]
   22aa0:	mov	r0, r6
   22aa4:	pop	{r4, r5, r6, sl, fp, pc}
   22aa8:	push	{r4, r5, fp, lr}
   22aac:	add	fp, sp, #8
   22ab0:	mov	r4, r0
   22ab4:	bl	46a38 <__assert_fail@plt+0x33f88>
   22ab8:	mov	r5, r0
   22abc:	ldrb	r0, [r0]
   22ac0:	cmp	r0, #0
   22ac4:	moveq	r5, r4
   22ac8:	mov	r0, r5
   22acc:	bl	46a84 <__assert_fail@plt+0x33fd4>
   22ad0:	ldrb	r1, [r5, r0]
   22ad4:	mov	r2, #0
   22ad8:	strb	r2, [r5, r0]
   22adc:	cmp	r1, #0
   22ae0:	movwne	r1, #1
   22ae4:	mov	r0, r1
   22ae8:	pop	{r4, r5, fp, pc}
   22aec:	sub	sp, sp, #8
   22af0:	push	{fp, lr}
   22af4:	mov	fp, sp
   22af8:	sub	sp, sp, #8
   22afc:	str	r2, [fp, #8]
   22b00:	str	r3, [fp, #12]
   22b04:	tst	r1, #64	; 0x40
   22b08:	mov	r2, #0
   22b0c:	ldrne	r2, [fp, #8]
   22b10:	bl	126cc <open64@plt>
   22b14:	bl	2d964 <__assert_fail@plt+0x1aeb4>
   22b18:	mov	sp, fp
   22b1c:	pop	{fp, lr}
   22b20:	add	sp, sp, #8
   22b24:	bx	lr
   22b28:	push	{fp, lr}
   22b2c:	mov	fp, sp
   22b30:	and	r2, r0, #61440	; 0xf000
   22b34:	sub	r2, r2, #4096	; 0x1000
   22b38:	lsr	r3, r2, #12
   22b3c:	cmp	r3, #11
   22b40:	bhi	22b90 <__assert_fail@plt+0x100e0>
   22b44:	add	r2, pc, #4
   22b48:	mov	ip, #45	; 0x2d
   22b4c:	ldr	pc, [r2, r3, lsl #2]
   22b50:	andeq	r2, r2, r0, lsl #23
   22b54:	andeq	r2, r2, r8, lsl #23
   22b58:	muleq	r2, r0, fp
   22b5c:	muleq	r2, r8, fp
   22b60:	muleq	r2, r0, fp
   22b64:			; <UNDEFINED> instruction: 0x00022bb0
   22b68:	muleq	r2, r0, fp
   22b6c:			; <UNDEFINED> instruction: 0x00022bb4
   22b70:	muleq	r2, r0, fp
   22b74:	andeq	r2, r2, r0, lsr #23
   22b78:	muleq	r2, r0, fp
   22b7c:	andeq	r2, r2, r8, lsr #23
   22b80:	mov	ip, #112	; 0x70
   22b84:	b	22bb4 <__assert_fail@plt+0x10104>
   22b88:	mov	ip, #99	; 0x63
   22b8c:	b	22bb4 <__assert_fail@plt+0x10104>
   22b90:	mov	ip, #63	; 0x3f
   22b94:	b	22bb4 <__assert_fail@plt+0x10104>
   22b98:	mov	ip, #100	; 0x64
   22b9c:	b	22bb4 <__assert_fail@plt+0x10104>
   22ba0:	mov	ip, #108	; 0x6c
   22ba4:	b	22bb4 <__assert_fail@plt+0x10104>
   22ba8:	mov	ip, #115	; 0x73
   22bac:	b	22bb4 <__assert_fail@plt+0x10104>
   22bb0:	mov	ip, #98	; 0x62
   22bb4:	tst	r0, #2
   22bb8:	mov	r3, #119	; 0x77
   22bbc:	mov	r2, #32
   22bc0:	mov	lr, #45	; 0x2d
   22bc4:	movweq	r3, #45	; 0x2d
   22bc8:	tst	r0, #4
   22bcc:	strh	r2, [r1, #10]
   22bd0:	mov	r2, #114	; 0x72
   22bd4:	strb	ip, [r1]
   22bd8:	mov	ip, #119	; 0x77
   22bdc:	movweq	r2, #45	; 0x2d
   22be0:	tst	r0, #16
   22be4:	strb	r3, [r1, #8]
   22be8:	mov	r3, #114	; 0x72
   22bec:	strb	r2, [r1, #7]
   22bf0:	mov	r2, #119	; 0x77
   22bf4:	movweq	r2, #45	; 0x2d
   22bf8:	tst	r0, #32
   22bfc:	strb	r2, [r1, #5]
   22c00:	mov	r2, #114	; 0x72
   22c04:	movweq	r2, #45	; 0x2d
   22c08:	tst	r0, #128	; 0x80
   22c0c:	movweq	ip, #45	; 0x2d
   22c10:	tst	r0, #256	; 0x100
   22c14:	strb	r2, [r1, #4]
   22c18:	movweq	r3, #45	; 0x2d
   22c1c:	ands	r2, r0, #1
   22c20:	strb	ip, [r1, #2]
   22c24:	mov	r2, #84	; 0x54
   22c28:	mov	ip, #45	; 0x2d
   22c2c:	strb	r3, [r1, #1]
   22c30:	mov	r3, #45	; 0x2d
   22c34:	movwne	r3, #120	; 0x78
   22c38:	movwne	r2, #116	; 0x74
   22c3c:	tst	r0, #512	; 0x200
   22c40:	moveq	r2, r3
   22c44:	mov	r3, #83	; 0x53
   22c48:	strb	r2, [r1, #9]
   22c4c:	ands	r2, r0, #8
   22c50:	mov	r2, #83	; 0x53
   22c54:	movwne	lr, #120	; 0x78
   22c58:	movwne	r2, #115	; 0x73
   22c5c:	tst	r0, #1024	; 0x400
   22c60:	moveq	r2, lr
   22c64:	strb	r2, [r1, #6]
   22c68:	ands	r2, r0, #64	; 0x40
   22c6c:	movwne	ip, #120	; 0x78
   22c70:	movwne	r3, #115	; 0x73
   22c74:	tst	r0, #2048	; 0x800
   22c78:	moveq	r3, ip
   22c7c:	strb	r3, [r1, #3]
   22c80:	pop	{fp, pc}
   22c84:	ldr	r0, [r0, #16]
   22c88:	b	22b28 <__assert_fail@plt+0x10078>
   22c8c:	push	{r4, r5, r6, r7, fp, lr}
   22c90:	add	fp, sp, #16
   22c94:	mov	r5, r1
   22c98:	bl	129c0 <fopen64@plt>
   22c9c:	mov	r4, #0
   22ca0:	cmp	r0, #0
   22ca4:	beq	22d0c <__assert_fail@plt+0x1025c>
   22ca8:	mov	r6, r0
   22cac:	bl	1287c <fileno@plt>
   22cb0:	cmp	r0, #2
   22cb4:	bhi	22d14 <__assert_fail@plt+0x10264>
   22cb8:	bl	2d958 <__assert_fail@plt+0x1aea8>
   22cbc:	cmn	r0, #1
   22cc0:	ble	22d1c <__assert_fail@plt+0x1026c>
   22cc4:	mov	r7, r0
   22cc8:	mov	r0, r6
   22ccc:	bl	128b8 <fclose@plt>
   22cd0:	cmp	r0, #0
   22cd4:	bne	22cf0 <__assert_fail@plt+0x10240>
   22cd8:	mov	r0, r7
   22cdc:	mov	r1, r5
   22ce0:	bl	1236c <fdopen@plt>
   22ce4:	mov	r4, r0
   22ce8:	cmp	r0, #0
   22cec:	bne	22d0c <__assert_fail@plt+0x1025c>
   22cf0:	bl	12804 <__errno_location@plt>
   22cf4:	ldr	r5, [r0]
   22cf8:	mov	r4, r0
   22cfc:	mov	r0, r7
   22d00:	bl	12a68 <close@plt>
   22d04:	str	r5, [r4]
   22d08:	mov	r4, #0
   22d0c:	mov	r0, r4
   22d10:	pop	{r4, r5, r6, r7, fp, pc}
   22d14:	mov	r0, r6
   22d18:	pop	{r4, r5, r6, r7, fp, pc}
   22d1c:	bl	12804 <__errno_location@plt>
   22d20:	ldr	r7, [r0]
   22d24:	mov	r5, r0
   22d28:	mov	r0, r6
   22d2c:	bl	128b8 <fclose@plt>
   22d30:	mov	r0, r4
   22d34:	str	r7, [r5]
   22d38:	pop	{r4, r5, r6, r7, fp, pc}
   22d3c:	andeq	r0, r0, r0
   22d40:	ldr	r0, [r0, #8]
   22d44:	bx	lr
   22d48:	ldr	r0, [r0, #12]
   22d4c:	bx	lr
   22d50:	ldr	r0, [r0, #16]
   22d54:	bx	lr
   22d58:	ldm	r0, {r2, ip}
   22d5c:	mov	r0, #0
   22d60:	cmp	r2, ip
   22d64:	bxcs	lr
   22d68:	mov	r0, #0
   22d6c:	b	22d7c <__assert_fail@plt+0x102cc>
   22d70:	add	r2, r2, #8
   22d74:	cmp	r2, ip
   22d78:	bcs	22dac <__assert_fail@plt+0x102fc>
   22d7c:	ldr	r1, [r2]
   22d80:	cmp	r1, #0
   22d84:	beq	22d70 <__assert_fail@plt+0x102c0>
   22d88:	mov	r3, #0
   22d8c:	mov	r1, r2
   22d90:	ldr	r1, [r1, #4]
   22d94:	add	r3, r3, #1
   22d98:	cmp	r1, #0
   22d9c:	bne	22d90 <__assert_fail@plt+0x102e0>
   22da0:	cmp	r3, r0
   22da4:	movhi	r0, r3
   22da8:	b	22d70 <__assert_fail@plt+0x102c0>
   22dac:	bx	lr
   22db0:	push	{fp, lr}
   22db4:	mov	fp, sp
   22db8:	ldm	r0, {r3, ip}
   22dbc:	mov	lr, #0
   22dc0:	mov	r1, #0
   22dc4:	cmp	r3, ip
   22dc8:	bcs	22e0c <__assert_fail@plt+0x1035c>
   22dcc:	mov	r1, #0
   22dd0:	mov	lr, #0
   22dd4:	b	22de4 <__assert_fail@plt+0x10334>
   22dd8:	add	r3, r3, #8
   22ddc:	cmp	r3, ip
   22de0:	bcs	22e0c <__assert_fail@plt+0x1035c>
   22de4:	ldr	r2, [r3]
   22de8:	cmp	r2, #0
   22dec:	beq	22dd8 <__assert_fail@plt+0x10328>
   22df0:	mov	r2, r3
   22df4:	ldr	r2, [r2, #4]
   22df8:	add	r1, r1, #1
   22dfc:	cmp	r2, #0
   22e00:	bne	22df4 <__assert_fail@plt+0x10344>
   22e04:	add	lr, lr, #1
   22e08:	b	22dd8 <__assert_fail@plt+0x10328>
   22e0c:	ldr	r2, [r0, #12]
   22e10:	cmp	lr, r2
   22e14:	bne	22e2c <__assert_fail@plt+0x1037c>
   22e18:	ldr	r2, [r0, #16]
   22e1c:	mov	r0, #1
   22e20:	cmp	r1, r2
   22e24:	movne	r0, #0
   22e28:	pop	{fp, pc}
   22e2c:	mov	r0, #0
   22e30:	pop	{fp, pc}
   22e34:	nop	{0}
   22e38:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   22e3c:	add	fp, sp, #24
   22e40:	sub	sp, sp, #8
   22e44:	ldr	r6, [r0]
   22e48:	ldmib	r0, {r3, r7, r8}
   22e4c:	ldr	r2, [r0, #16]
   22e50:	mov	r4, r1
   22e54:	mov	r5, #0
   22e58:	cmp	r6, r3
   22e5c:	bcs	22ea4 <__assert_fail@plt+0x103f4>
   22e60:	mov	r5, #0
   22e64:	b	22e74 <__assert_fail@plt+0x103c4>
   22e68:	add	r6, r6, #8
   22e6c:	cmp	r6, r3
   22e70:	bcs	22ea4 <__assert_fail@plt+0x103f4>
   22e74:	ldr	r0, [r6]
   22e78:	cmp	r0, #0
   22e7c:	beq	22e68 <__assert_fail@plt+0x103b8>
   22e80:	mov	r0, #0
   22e84:	mov	r1, r6
   22e88:	ldr	r1, [r1, #4]
   22e8c:	add	r0, r0, #1
   22e90:	cmp	r1, #0
   22e94:	bne	22e88 <__assert_fail@plt+0x103d8>
   22e98:	cmp	r0, r5
   22e9c:	movhi	r5, r0
   22ea0:	b	22e68 <__assert_fail@plt+0x103b8>
   22ea4:	movw	r1, #49877	; 0xc2d5
   22ea8:	mov	r0, r4
   22eac:	movt	r1, #4
   22eb0:	bl	127f8 <fprintf@plt>
   22eb4:	movw	r1, #49901	; 0xc2ed
   22eb8:	mov	r0, r4
   22ebc:	mov	r2, r7
   22ec0:	movt	r1, #4
   22ec4:	bl	127f8 <fprintf@plt>
   22ec8:	vmov	s0, r8
   22ecc:	vldr	d16, [pc, #68]	; 22f18 <__assert_fail@plt+0x10468>
   22ed0:	movw	r1, #49925	; 0xc305
   22ed4:	mov	r0, r4
   22ed8:	mov	r2, r8
   22edc:	movt	r1, #4
   22ee0:	vcvt.f64.u32	d17, s0
   22ee4:	vmov	s0, r7
   22ee8:	vcvt.f64.u32	d18, s0
   22eec:	vmul.f64	d16, d17, d16
   22ef0:	vdiv.f64	d16, d16, d18
   22ef4:	vstr	d16, [sp]
   22ef8:	bl	127f8 <fprintf@plt>
   22efc:	movw	r1, #49958	; 0xc326
   22f00:	mov	r0, r4
   22f04:	mov	r2, r5
   22f08:	movt	r1, #4
   22f0c:	sub	sp, fp, #24
   22f10:	pop	{r4, r5, r6, r7, r8, sl, fp, lr}
   22f14:	b	127f8 <fprintf@plt>
   22f18:	andeq	r0, r0, r0
   22f1c:	subsmi	r0, r9, r0
   22f20:	push	{r4, r5, r6, r7, fp, lr}
   22f24:	add	fp, sp, #16
   22f28:	mov	r4, r1
   22f2c:	ldr	r1, [r0, #8]
   22f30:	ldr	r2, [r0, #24]
   22f34:	mov	r5, r0
   22f38:	mov	r0, r4
   22f3c:	blx	r2
   22f40:	ldr	r1, [r5, #8]
   22f44:	cmp	r0, r1
   22f48:	bcs	22fb0 <__assert_fail@plt+0x10500>
   22f4c:	ldr	r7, [r5]
   22f50:	mov	r6, #0
   22f54:	ldr	r1, [r7, r0, lsl #3]!
   22f58:	cmp	r1, #0
   22f5c:	cmpne	r7, #0
   22f60:	bne	22f90 <__assert_fail@plt+0x104e0>
   22f64:	mov	r0, r6
   22f68:	pop	{r4, r5, r6, r7, fp, pc}
   22f6c:	ldr	r2, [r5, #28]
   22f70:	mov	r0, r4
   22f74:	blx	r2
   22f78:	cmp	r0, #0
   22f7c:	bne	22fa4 <__assert_fail@plt+0x104f4>
   22f80:	ldr	r7, [r7, #4]
   22f84:	cmp	r7, #0
   22f88:	beq	22f64 <__assert_fail@plt+0x104b4>
   22f8c:	ldr	r1, [r7]
   22f90:	cmp	r1, r4
   22f94:	bne	22f6c <__assert_fail@plt+0x104bc>
   22f98:	mov	r6, r4
   22f9c:	mov	r0, r6
   22fa0:	pop	{r4, r5, r6, r7, fp, pc}
   22fa4:	ldr	r6, [r7]
   22fa8:	mov	r0, r6
   22fac:	pop	{r4, r5, r6, r7, fp, pc}
   22fb0:	bl	12a5c <abort@plt>
   22fb4:	push	{fp, lr}
   22fb8:	mov	fp, sp
   22fbc:	ldr	r1, [r0, #16]
   22fc0:	cmp	r1, #0
   22fc4:	beq	22fe4 <__assert_fail@plt+0x10534>
   22fc8:	ldm	r0, {r1, r2}
   22fcc:	cmp	r1, r2
   22fd0:	bcs	22fec <__assert_fail@plt+0x1053c>
   22fd4:	ldr	r0, [r1], #8
   22fd8:	cmp	r0, #0
   22fdc:	beq	22fcc <__assert_fail@plt+0x1051c>
   22fe0:	pop	{fp, pc}
   22fe4:	mov	r0, #0
   22fe8:	pop	{fp, pc}
   22fec:	bl	12a5c <abort@plt>
   22ff0:	push	{r4, r5, fp, lr}
   22ff4:	add	fp, sp, #8
   22ff8:	mov	r5, r1
   22ffc:	ldr	r1, [r0, #8]
   23000:	ldr	r2, [r0, #24]
   23004:	mov	r4, r0
   23008:	mov	r0, r5
   2300c:	blx	r2
   23010:	ldr	r1, [r4, #8]
   23014:	cmp	r0, r1
   23018:	bcs	2307c <__assert_fail@plt+0x105cc>
   2301c:	ldr	r1, [r4]
   23020:	add	r2, r1, r0, lsl #3
   23024:	ldr	r3, [r2]
   23028:	ldr	r2, [r2, #4]
   2302c:	cmp	r3, r5
   23030:	beq	23040 <__assert_fail@plt+0x10590>
   23034:	cmp	r2, #0
   23038:	bne	23024 <__assert_fail@plt+0x10574>
   2303c:	b	23050 <__assert_fail@plt+0x105a0>
   23040:	cmp	r2, #0
   23044:	beq	23050 <__assert_fail@plt+0x105a0>
   23048:	ldr	r0, [r2]
   2304c:	pop	{r4, r5, fp, pc}
   23050:	ldr	r2, [r4, #4]
   23054:	add	r0, r1, r0, lsl #3
   23058:	add	r1, r0, #8
   2305c:	cmp	r1, r2
   23060:	bcs	23074 <__assert_fail@plt+0x105c4>
   23064:	ldr	r0, [r1], #8
   23068:	cmp	r0, #0
   2306c:	beq	2305c <__assert_fail@plt+0x105ac>
   23070:	pop	{r4, r5, fp, pc}
   23074:	mov	r0, #0
   23078:	pop	{r4, r5, fp, pc}
   2307c:	bl	12a5c <abort@plt>
   23080:	push	{r4, r5, fp, lr}
   23084:	add	fp, sp, #8
   23088:	ldm	r0, {r5, lr}
   2308c:	mov	ip, r0
   23090:	mov	r0, #0
   23094:	cmp	r5, lr
   23098:	popcs	{r4, r5, fp, pc}
   2309c:	mov	r0, #0
   230a0:	b	230b4 <__assert_fail@plt+0x10604>
   230a4:	ldr	lr, [ip, #4]
   230a8:	add	r5, r5, #8
   230ac:	cmp	r5, lr
   230b0:	bcs	230ec <__assert_fail@plt+0x1063c>
   230b4:	ldr	r3, [r5]
   230b8:	cmp	r3, #0
   230bc:	cmpne	r5, #0
   230c0:	beq	230a8 <__assert_fail@plt+0x105f8>
   230c4:	mov	r3, r5
   230c8:	cmp	r0, r2
   230cc:	bcs	230ec <__assert_fail@plt+0x1063c>
   230d0:	ldr	r4, [r3]
   230d4:	str	r4, [r1, r0, lsl #2]
   230d8:	add	r0, r0, #1
   230dc:	ldr	r3, [r3, #4]
   230e0:	cmp	r3, #0
   230e4:	bne	230c8 <__assert_fail@plt+0x10618>
   230e8:	b	230a4 <__assert_fail@plt+0x105f4>
   230ec:	pop	{r4, r5, fp, pc}
   230f0:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   230f4:	add	fp, sp, #24
   230f8:	mov	r5, r1
   230fc:	ldr	r4, [r0]
   23100:	ldr	r1, [r0, #4]
   23104:	mov	r6, #0
   23108:	cmp	r4, r1
   2310c:	bcs	23178 <__assert_fail@plt+0x106c8>
   23110:	mov	r9, r2
   23114:	mov	r8, r0
   23118:	mov	r6, #0
   2311c:	b	23130 <__assert_fail@plt+0x10680>
   23120:	ldr	r1, [r8, #4]
   23124:	add	r4, r4, #8
   23128:	cmp	r4, r1
   2312c:	bcs	23178 <__assert_fail@plt+0x106c8>
   23130:	ldr	r0, [r4]
   23134:	cmp	r0, #0
   23138:	cmpne	r4, #0
   2313c:	beq	23124 <__assert_fail@plt+0x10674>
   23140:	mov	r1, r9
   23144:	blx	r5
   23148:	cmp	r0, #0
   2314c:	beq	23178 <__assert_fail@plt+0x106c8>
   23150:	mov	r7, r4
   23154:	ldr	r7, [r7, #4]
   23158:	add	r6, r6, #1
   2315c:	cmp	r7, #0
   23160:	beq	23120 <__assert_fail@plt+0x10670>
   23164:	ldr	r0, [r7]
   23168:	mov	r1, r9
   2316c:	blx	r5
   23170:	cmp	r0, #0
   23174:	bne	23154 <__assert_fail@plt+0x106a4>
   23178:	mov	r0, r6
   2317c:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   23180:	ldrb	r2, [r0]
   23184:	cmp	r2, #0
   23188:	moveq	r0, #0
   2318c:	bxeq	lr
   23190:	add	r3, r0, #1
   23194:	mov	r0, #0
   23198:	rsb	r0, r0, r0, lsl #5
   2319c:	uxtab	r0, r0, r2
   231a0:	udiv	r2, r0, r1
   231a4:	mls	r0, r2, r1, r0
   231a8:	ldrb	r2, [r3], #1
   231ac:	cmp	r2, #0
   231b0:	bne	23198 <__assert_fail@plt+0x106e8>
   231b4:	bx	lr
   231b8:	movw	r1, #49984	; 0xc340
   231bc:	movt	r1, #4
   231c0:	vld1.32	{d16-d17}, [r1]!
   231c4:	ldr	r1, [r1]
   231c8:	vst1.32	{d16-d17}, [r0]!
   231cc:	str	r1, [r0]
   231d0:	bx	lr
   231d4:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   231d8:	add	fp, sp, #24
   231dc:	movw	r9, #13308	; 0x33fc
   231e0:	cmp	r3, #0
   231e4:	movw	r5, #13288	; 0x33e8
   231e8:	mov	r6, r0
   231ec:	mov	r0, #40	; 0x28
   231f0:	mov	r7, r1
   231f4:	movt	r9, #2
   231f8:	movne	r9, r3
   231fc:	cmp	r2, #0
   23200:	movt	r5, #2
   23204:	movne	r5, r2
   23208:	bl	327ac <__assert_fail@plt+0x1fcfc>
   2320c:	mov	r8, #0
   23210:	cmp	r0, #0
   23214:	beq	233d0 <__assert_fail@plt+0x10920>
   23218:	mov	r4, r0
   2321c:	movw	r0, #49984	; 0xc340
   23220:	cmp	r7, #0
   23224:	movt	r0, #4
   23228:	moveq	r7, r0
   2322c:	cmp	r7, r0
   23230:	str	r7, [r4, #20]
   23234:	beq	232b0 <__assert_fail@plt+0x10800>
   23238:	vldr	s2, [pc, #408]	; 233d8 <__assert_fail@plt+0x10928>
   2323c:	vldr	s0, [r7, #8]
   23240:	vcmpe.f32	s0, s2
   23244:	vmrs	APSR_nzcv, fpscr
   23248:	ble	2335c <__assert_fail@plt+0x108ac>
   2324c:	vldr	s4, [pc, #392]	; 233dc <__assert_fail@plt+0x1092c>
   23250:	vcmpe.f32	s0, s4
   23254:	vmrs	APSR_nzcv, fpscr
   23258:	bpl	2335c <__assert_fail@plt+0x108ac>
   2325c:	vldr	s4, [pc, #380]	; 233e0 <__assert_fail@plt+0x10930>
   23260:	vldr	s6, [r7, #12]
   23264:	vcmpe.f32	s6, s4
   23268:	vmrs	APSR_nzcv, fpscr
   2326c:	ble	2335c <__assert_fail@plt+0x108ac>
   23270:	vldr	s4, [r7]
   23274:	vcmpe.f32	s4, #0.0
   23278:	vmrs	APSR_nzcv, fpscr
   2327c:	blt	2335c <__assert_fail@plt+0x108ac>
   23280:	vadd.f32	s2, s4, s2
   23284:	vcmpe.f32	s2, s0
   23288:	vmrs	APSR_nzcv, fpscr
   2328c:	bpl	2335c <__assert_fail@plt+0x108ac>
   23290:	vldr	s0, [r7, #4]
   23294:	vmov.f32	s4, #112	; 0x3f800000  1.0
   23298:	vcmpe.f32	s0, s4
   2329c:	vmrs	APSR_nzcv, fpscr
   232a0:	bhi	2335c <__assert_fail@plt+0x108ac>
   232a4:	vcmpe.f32	s2, s0
   232a8:	vmrs	APSR_nzcv, fpscr
   232ac:	bpl	2335c <__assert_fail@plt+0x108ac>
   232b0:	ldrb	r0, [r7, #16]
   232b4:	cmp	r0, #0
   232b8:	bne	232e4 <__assert_fail@plt+0x10834>
   232bc:	vmov	s2, r6
   232c0:	vldr	s0, [r7, #8]
   232c4:	vldr	s4, [pc, #280]	; 233e4 <__assert_fail@plt+0x10934>
   232c8:	vcvt.f32.u32	s2, s2
   232cc:	vdiv.f32	s2, s2, s0
   232d0:	vcvt.u32.f32	s0, s2
   232d4:	vcmpe.f32	s2, s4
   232d8:	vmrs	APSR_nzcv, fpscr
   232dc:	bge	2336c <__assert_fail@plt+0x108bc>
   232e0:	vmov	r6, s0
   232e4:	cmp	r6, #10
   232e8:	movls	r6, #10
   232ec:	orr	r0, r6, #1
   232f0:	cmn	r0, #1
   232f4:	beq	2336c <__assert_fail@plt+0x108bc>
   232f8:	ldr	r6, [fp, #8]
   232fc:	mov	r1, #3
   23300:	cmp	r0, #10
   23304:	bcc	2333c <__assert_fail@plt+0x1088c>
   23308:	mov	r1, #3
   2330c:	mov	r3, #9
   23310:	mov	r2, #12
   23314:	udiv	r7, r0, r1
   23318:	mls	r7, r7, r1, r0
   2331c:	cmp	r7, #0
   23320:	beq	2333c <__assert_fail@plt+0x1088c>
   23324:	add	r3, r3, r2
   23328:	add	r2, r2, #8
   2332c:	add	r1, r1, #2
   23330:	add	r3, r3, #4
   23334:	cmp	r3, r0
   23338:	bcc	23314 <__assert_fail@plt+0x10864>
   2333c:	udiv	r2, r0, r1
   23340:	mls	r1, r2, r1, r0
   23344:	cmp	r1, #0
   23348:	bne	23364 <__assert_fail@plt+0x108b4>
   2334c:	add	r0, r0, #2
   23350:	cmn	r0, #1
   23354:	bne	232fc <__assert_fail@plt+0x1084c>
   23358:	b	2336c <__assert_fail@plt+0x108bc>
   2335c:	str	r0, [r4, #20]
   23360:	b	23374 <__assert_fail@plt+0x108c4>
   23364:	cmp	r0, #536870912	; 0x20000000
   23368:	bcc	23384 <__assert_fail@plt+0x108d4>
   2336c:	mov	r0, #0
   23370:	str	r0, [r4, #8]
   23374:	mov	r0, r4
   23378:	bl	30174 <__assert_fail@plt+0x1d6c4>
   2337c:	mov	r0, r8
   23380:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   23384:	cmp	r0, #0
   23388:	str	r0, [r4, #8]
   2338c:	beq	23374 <__assert_fail@plt+0x108c4>
   23390:	mov	r1, #8
   23394:	bl	2fb8c <__assert_fail@plt+0x1d0dc>
   23398:	cmp	r0, #0
   2339c:	str	r0, [r4]
   233a0:	beq	23374 <__assert_fail@plt+0x108c4>
   233a4:	mov	r1, #0
   233a8:	str	r5, [r4, #24]
   233ac:	str	r9, [r4, #28]
   233b0:	str	r6, [r4, #32]
   233b4:	mov	r8, r4
   233b8:	str	r1, [r4, #36]	; 0x24
   233bc:	str	r1, [r4, #12]
   233c0:	str	r1, [r4, #16]
   233c4:	ldr	r1, [r4, #8]
   233c8:	add	r0, r0, r1, lsl #3
   233cc:	str	r0, [r4, #4]
   233d0:	mov	r0, r8
   233d4:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   233d8:	stclcc	12, cr12, [ip, #820]	; 0x334
   233dc:	svccc	0x00666666
   233e0:	svccc	0x008ccccd
   233e4:	svcmi	0x00800000
   233e8:	ror	r2, r0, #3
   233ec:	udiv	r2, r2, r1
   233f0:	mul	r1, r2, r1
   233f4:	rsb	r0, r1, r0, ror #3
   233f8:	bx	lr
   233fc:	sub	r0, r0, r1
   23400:	clz	r0, r0
   23404:	lsr	r0, r0, #5
   23408:	bx	lr
   2340c:	push	{r4, r5, r6, r7, fp, lr}
   23410:	add	fp, sp, #16
   23414:	mov	r4, r0
   23418:	ldr	r5, [r0]
   2341c:	ldr	r0, [r0, #4]
   23420:	cmp	r5, r0
   23424:	bcs	234c8 <__assert_fail@plt+0x10a18>
   23428:	mov	r6, #0
   2342c:	b	23448 <__assert_fail@plt+0x10998>
   23430:	str	r6, [r5]
   23434:	str	r6, [r5, #4]
   23438:	ldr	r0, [r4, #4]
   2343c:	add	r5, r5, #8
   23440:	cmp	r5, r0
   23444:	bcs	234c8 <__assert_fail@plt+0x10a18>
   23448:	ldr	r1, [r5]
   2344c:	cmp	r1, #0
   23450:	beq	2343c <__assert_fail@plt+0x1098c>
   23454:	ldr	r1, [r4, #32]
   23458:	ldr	r7, [r5, #4]
   2345c:	cmp	r1, #0
   23460:	mov	r0, r1
   23464:	movwne	r0, #1
   23468:	cmp	r7, #0
   2346c:	bne	234b0 <__assert_fail@plt+0x10a00>
   23470:	cmp	r0, #0
   23474:	beq	23430 <__assert_fail@plt+0x10980>
   23478:	ldr	r0, [r5]
   2347c:	blx	r1
   23480:	b	23430 <__assert_fail@plt+0x10980>
   23484:	str	r6, [r7]
   23488:	cmp	r1, #0
   2348c:	ldr	r2, [r7, #4]
   23490:	ldr	r0, [r4, #36]	; 0x24
   23494:	str	r0, [r7, #4]
   23498:	mov	r0, r1
   2349c:	str	r7, [r4, #36]	; 0x24
   234a0:	movwne	r0, #1
   234a4:	cmp	r2, #0
   234a8:	mov	r7, r2
   234ac:	beq	23470 <__assert_fail@plt+0x109c0>
   234b0:	tst	r0, #1
   234b4:	beq	23484 <__assert_fail@plt+0x109d4>
   234b8:	ldr	r0, [r7]
   234bc:	blx	r1
   234c0:	ldr	r1, [r4, #32]
   234c4:	b	23484 <__assert_fail@plt+0x109d4>
   234c8:	mov	r0, #0
   234cc:	str	r0, [r4, #12]
   234d0:	str	r0, [r4, #16]
   234d4:	pop	{r4, r5, r6, r7, fp, pc}
   234d8:	push	{r4, r5, r6, sl, fp, lr}
   234dc:	add	fp, sp, #16
   234e0:	mov	r4, r0
   234e4:	ldr	r0, [r0, #32]
   234e8:	cmp	r0, #0
   234ec:	beq	23560 <__assert_fail@plt+0x10ab0>
   234f0:	ldr	r0, [r4, #16]
   234f4:	cmp	r0, #0
   234f8:	beq	23560 <__assert_fail@plt+0x10ab0>
   234fc:	ldr	r5, [r4]
   23500:	ldr	r1, [r4, #4]
   23504:	cmp	r5, r1
   23508:	bcc	23520 <__assert_fail@plt+0x10a70>
   2350c:	b	23560 <__assert_fail@plt+0x10ab0>
   23510:	ldr	r1, [r4, #4]
   23514:	add	r5, r5, #8
   23518:	cmp	r5, r1
   2351c:	bcs	23560 <__assert_fail@plt+0x10ab0>
   23520:	ldr	r0, [r5]
   23524:	cmp	r0, #0
   23528:	cmpne	r5, #0
   2352c:	beq	23514 <__assert_fail@plt+0x10a64>
   23530:	ldr	r1, [r4, #32]
   23534:	blx	r1
   23538:	ldr	r6, [r5, #4]
   2353c:	cmp	r6, #0
   23540:	beq	23510 <__assert_fail@plt+0x10a60>
   23544:	ldr	r1, [r4, #32]
   23548:	ldr	r0, [r6]
   2354c:	blx	r1
   23550:	ldr	r6, [r6, #4]
   23554:	cmp	r6, #0
   23558:	bne	23544 <__assert_fail@plt+0x10a94>
   2355c:	b	23510 <__assert_fail@plt+0x10a60>
   23560:	ldr	r5, [r4]
   23564:	ldr	r1, [r4, #4]
   23568:	cmp	r5, r1
   2356c:	bcc	23580 <__assert_fail@plt+0x10ad0>
   23570:	b	235a8 <__assert_fail@plt+0x10af8>
   23574:	add	r5, r5, #8
   23578:	cmp	r5, r1
   2357c:	bcs	235a8 <__assert_fail@plt+0x10af8>
   23580:	ldr	r0, [r5, #4]
   23584:	cmp	r0, #0
   23588:	beq	23574 <__assert_fail@plt+0x10ac4>
   2358c:	ldr	r6, [r0, #4]
   23590:	bl	30174 <__assert_fail@plt+0x1d6c4>
   23594:	cmp	r6, #0
   23598:	mov	r0, r6
   2359c:	bne	2358c <__assert_fail@plt+0x10adc>
   235a0:	ldr	r1, [r4, #4]
   235a4:	b	23574 <__assert_fail@plt+0x10ac4>
   235a8:	ldr	r0, [r4, #36]	; 0x24
   235ac:	cmp	r0, #0
   235b0:	beq	235c8 <__assert_fail@plt+0x10b18>
   235b4:	ldr	r5, [r0, #4]
   235b8:	bl	30174 <__assert_fail@plt+0x1d6c4>
   235bc:	cmp	r5, #0
   235c0:	mov	r0, r5
   235c4:	bne	235b4 <__assert_fail@plt+0x10b04>
   235c8:	ldr	r0, [r4]
   235cc:	bl	30174 <__assert_fail@plt+0x1d6c4>
   235d0:	mov	r0, r4
   235d4:	pop	{r4, r5, r6, sl, fp, lr}
   235d8:	b	30174 <__assert_fail@plt+0x1d6c4>
   235dc:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   235e0:	add	fp, sp, #28
   235e4:	sub	sp, sp, #44	; 0x2c
   235e8:	mov	r7, r0
   235ec:	mov	r4, r0
   235f0:	ldr	r0, [r7, #20]!
   235f4:	ldrb	r2, [r0, #16]
   235f8:	cmp	r2, #0
   235fc:	bne	2362c <__assert_fail@plt+0x10b7c>
   23600:	vmov	s2, r1
   23604:	vldr	s0, [r0, #8]
   23608:	vldr	s4, [pc, #564]	; 23844 <__assert_fail@plt+0x10d94>
   2360c:	mov	r5, #0
   23610:	vcvt.f32.u32	s2, s2
   23614:	vdiv.f32	s2, s2, s0
   23618:	vcvt.u32.f32	s0, s2
   2361c:	vcmpe.f32	s2, s4
   23620:	vmrs	APSR_nzcv, fpscr
   23624:	bge	23834 <__assert_fail@plt+0x10d84>
   23628:	vmov	r1, s0
   2362c:	cmp	r1, #10
   23630:	mov	r5, #0
   23634:	movls	r1, #10
   23638:	orr	r6, r1, #1
   2363c:	cmn	r6, #1
   23640:	beq	23834 <__assert_fail@plt+0x10d84>
   23644:	mov	r0, #3
   23648:	cmp	r6, #10
   2364c:	bcc	23684 <__assert_fail@plt+0x10bd4>
   23650:	mov	r0, #3
   23654:	mov	r2, #9
   23658:	mov	r1, #12
   2365c:	udiv	r3, r6, r0
   23660:	mls	r3, r3, r0, r6
   23664:	cmp	r3, #0
   23668:	beq	23684 <__assert_fail@plt+0x10bd4>
   2366c:	add	r2, r2, r1
   23670:	add	r1, r1, #8
   23674:	add	r0, r0, #2
   23678:	add	r2, r2, #4
   2367c:	cmp	r2, r6
   23680:	bcc	2365c <__assert_fail@plt+0x10bac>
   23684:	udiv	r1, r6, r0
   23688:	mls	r0, r1, r0, r6
   2368c:	cmp	r0, #0
   23690:	bne	236a4 <__assert_fail@plt+0x10bf4>
   23694:	add	r6, r6, #2
   23698:	cmn	r6, #1
   2369c:	bne	23644 <__assert_fail@plt+0x10b94>
   236a0:	b	23834 <__assert_fail@plt+0x10d84>
   236a4:	sub	r0, r6, #1
   236a8:	cmn	r0, #-536870910	; 0xe0000002
   236ac:	bhi	23834 <__assert_fail@plt+0x10d84>
   236b0:	ldr	r0, [r4, #8]
   236b4:	cmp	r6, r0
   236b8:	bne	236c4 <__assert_fail@plt+0x10c14>
   236bc:	mov	r5, #1
   236c0:	b	23834 <__assert_fail@plt+0x10d84>
   236c4:	mov	r0, r6
   236c8:	mov	r1, #8
   236cc:	bl	2fb8c <__assert_fail@plt+0x1d0dc>
   236d0:	cmp	r0, #0
   236d4:	str	r0, [sp, #4]
   236d8:	beq	23834 <__assert_fail@plt+0x10d84>
   236dc:	add	r0, r0, r6, lsl #3
   236e0:	mov	r1, #0
   236e4:	add	r5, sp, #4
   236e8:	mov	sl, r4
   236ec:	mov	r2, #0
   236f0:	str	r1, [sp, #20]
   236f4:	str	r1, [sp, #16]
   236f8:	str	r6, [sp, #12]
   236fc:	mov	r1, r4
   23700:	str	r0, [sp, #8]
   23704:	add	r0, r5, #20
   23708:	vld1.32	{d16-d17}, [r7]
   2370c:	vst1.32	{d16-d17}, [r0]
   23710:	ldr	r0, [sl, #36]!	; 0x24
   23714:	str	r0, [sp, #40]	; 0x28
   23718:	mov	r0, r5
   2371c:	bl	23848 <__assert_fail@plt+0x10d98>
   23720:	cmp	r0, #0
   23724:	beq	2374c <__assert_fail@plt+0x10c9c>
   23728:	ldr	r0, [r4]
   2372c:	bl	30174 <__assert_fail@plt+0x1d6c4>
   23730:	mov	r0, #36	; 0x24
   23734:	vld1.32	{d16-d17}, [r5], r0
   23738:	vst1.32	{d16-d17}, [r4], r0
   2373c:	ldr	r0, [r5]
   23740:	mov	r5, #1
   23744:	str	r0, [r4]
   23748:	b	23834 <__assert_fail@plt+0x10d84>
   2374c:	ldr	r0, [sp, #40]	; 0x28
   23750:	str	r0, [sl]
   23754:	ldr	r0, [sp, #8]
   23758:	ldr	r8, [sp, #4]
   2375c:	cmp	r8, r0
   23760:	str	r0, [sp]
   23764:	bcs	23810 <__assert_fail@plt+0x10d60>
   23768:	mov	r9, #0
   2376c:	b	23784 <__assert_fail@plt+0x10cd4>
   23770:	str	r9, [r8, #4]
   23774:	ldr	r0, [sp]
   23778:	add	r8, r8, #8
   2377c:	cmp	r8, r0
   23780:	bcs	23810 <__assert_fail@plt+0x10d60>
   23784:	ldr	r0, [r8]
   23788:	cmp	r0, #0
   2378c:	beq	23774 <__assert_fail@plt+0x10cc4>
   23790:	ldr	r6, [r8, #4]
   23794:	cmp	r6, #0
   23798:	beq	23770 <__assert_fail@plt+0x10cc0>
   2379c:	ldr	r1, [r4, #8]
   237a0:	b	237c4 <__assert_fail@plt+0x10d14>
   237a4:	add	r0, r3, r0, lsl #3
   237a8:	add	r0, r0, #4
   237ac:	ldr	r3, [r0]
   237b0:	cmp	r2, #0
   237b4:	str	r3, [r6, #4]
   237b8:	str	r6, [r0]
   237bc:	mov	r6, r2
   237c0:	beq	23770 <__assert_fail@plt+0x10cc0>
   237c4:	ldr	r5, [r6]
   237c8:	ldr	r2, [r4, #24]
   237cc:	mov	r0, r5
   237d0:	blx	r2
   237d4:	ldr	r1, [r4, #8]
   237d8:	cmp	r0, r1
   237dc:	bcs	23840 <__assert_fail@plt+0x10d90>
   237e0:	ldr	r3, [r4]
   237e4:	ldr	r2, [r6, #4]
   237e8:	ldr	r7, [r3, r0, lsl #3]
   237ec:	cmp	r7, #0
   237f0:	bne	237a4 <__assert_fail@plt+0x10cf4>
   237f4:	str	r5, [r3, r0, lsl #3]
   237f8:	ldr	r0, [r4, #12]
   237fc:	add	r0, r0, #1
   23800:	str	r0, [r4, #12]
   23804:	mov	r0, sl
   23808:	str	r9, [r6]
   2380c:	b	237ac <__assert_fail@plt+0x10cfc>
   23810:	add	r1, sp, #4
   23814:	mov	r0, r4
   23818:	mov	r2, #0
   2381c:	mov	r5, #0
   23820:	bl	23848 <__assert_fail@plt+0x10d98>
   23824:	cmp	r0, #0
   23828:	beq	23840 <__assert_fail@plt+0x10d90>
   2382c:	ldr	r0, [sp, #4]
   23830:	bl	30174 <__assert_fail@plt+0x1d6c4>
   23834:	mov	r0, r5
   23838:	sub	sp, fp, #28
   2383c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   23840:	bl	12a5c <abort@plt>
   23844:	svcmi	0x00800000
   23848:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2384c:	add	fp, sp, #28
   23850:	sub	sp, sp, #12
   23854:	ldr	sl, [r1]
   23858:	str	r1, [sp, #8]
   2385c:	ldr	r1, [r1, #4]
   23860:	mov	r7, r0
   23864:	mov	r0, #1
   23868:	str	r2, [sp, #4]
   2386c:	cmp	sl, r1
   23870:	bcs	239cc <__assert_fail@plt+0x10f1c>
   23874:	add	r8, r7, #36	; 0x24
   23878:	mov	r9, #0
   2387c:	b	238b8 <__assert_fail@plt+0x10e08>
   23880:	str	r4, [r6, r5, lsl #3]
   23884:	ldr	r0, [r7, #12]
   23888:	add	r0, r0, #1
   2388c:	str	r0, [r7, #12]
   23890:	ldr	r1, [sp, #8]
   23894:	str	r9, [sl]
   23898:	ldr	r0, [r1, #12]
   2389c:	sub	r0, r0, #1
   238a0:	str	r0, [r1, #12]
   238a4:	ldr	r0, [sp, #8]
   238a8:	add	sl, sl, #8
   238ac:	ldr	r0, [r0, #4]
   238b0:	cmp	sl, r0
   238b4:	bcs	239c8 <__assert_fail@plt+0x10f18>
   238b8:	ldr	r4, [sl]
   238bc:	cmp	r4, #0
   238c0:	beq	238a4 <__assert_fail@plt+0x10df4>
   238c4:	ldr	r5, [sl, #4]
   238c8:	cmp	r5, #0
   238cc:	beq	23948 <__assert_fail@plt+0x10e98>
   238d0:	ldr	r1, [r7, #8]
   238d4:	b	23908 <__assert_fail@plt+0x10e58>
   238d8:	str	r4, [r3, r0, lsl #3]
   238dc:	ldr	r0, [r7, #12]
   238e0:	add	r0, r0, #1
   238e4:	str	r0, [r7, #12]
   238e8:	mov	r0, r8
   238ec:	str	r9, [r5]
   238f0:	ldr	r3, [r0]
   238f4:	cmp	r2, #0
   238f8:	str	r3, [r5, #4]
   238fc:	str	r5, [r0]
   23900:	mov	r5, r2
   23904:	beq	23944 <__assert_fail@plt+0x10e94>
   23908:	ldr	r4, [r5]
   2390c:	ldr	r2, [r7, #24]
   23910:	mov	r0, r4
   23914:	blx	r2
   23918:	ldr	r1, [r7, #8]
   2391c:	cmp	r0, r1
   23920:	bcs	239e0 <__assert_fail@plt+0x10f30>
   23924:	ldr	r3, [r7]
   23928:	ldr	r2, [r5, #4]
   2392c:	ldr	r6, [r3, r0, lsl #3]
   23930:	cmp	r6, #0
   23934:	beq	238d8 <__assert_fail@plt+0x10e28>
   23938:	add	r0, r3, r0, lsl #3
   2393c:	add	r0, r0, #4
   23940:	b	238f0 <__assert_fail@plt+0x10e40>
   23944:	ldr	r4, [sl]
   23948:	ldr	r0, [sp, #4]
   2394c:	str	r9, [sl, #4]
   23950:	cmp	r0, #0
   23954:	bne	238a4 <__assert_fail@plt+0x10df4>
   23958:	ldr	r1, [r7, #8]
   2395c:	ldr	r2, [r7, #24]
   23960:	mov	r0, r4
   23964:	blx	r2
   23968:	mov	r5, r0
   2396c:	ldr	r0, [r7, #8]
   23970:	cmp	r5, r0
   23974:	bcs	239e0 <__assert_fail@plt+0x10f30>
   23978:	ldr	r6, [r7]
   2397c:	ldr	r0, [r6, r5, lsl #3]
   23980:	cmp	r0, #0
   23984:	beq	23880 <__assert_fail@plt+0x10dd0>
   23988:	ldr	r0, [r8]
   2398c:	cmp	r0, #0
   23990:	beq	239a0 <__assert_fail@plt+0x10ef0>
   23994:	ldr	r1, [r0, #4]
   23998:	str	r1, [r8]
   2399c:	b	239b0 <__assert_fail@plt+0x10f00>
   239a0:	mov	r0, #8
   239a4:	bl	327ac <__assert_fail@plt+0x1fcfc>
   239a8:	cmp	r0, #0
   239ac:	beq	239d4 <__assert_fail@plt+0x10f24>
   239b0:	add	r1, r6, r5, lsl #3
   239b4:	str	r4, [r0]
   239b8:	ldr	r2, [r1, #4]
   239bc:	str	r2, [r0, #4]
   239c0:	str	r0, [r1, #4]
   239c4:	b	23890 <__assert_fail@plt+0x10de0>
   239c8:	mov	r0, #1
   239cc:	sub	sp, fp, #28
   239d0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   239d4:	mov	r0, #0
   239d8:	sub	sp, fp, #28
   239dc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   239e0:	bl	12a5c <abort@plt>
   239e4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   239e8:	add	fp, sp, #28
   239ec:	sub	sp, sp, #4
   239f0:	cmp	r1, #0
   239f4:	beq	23d10 <__assert_fail@plt+0x11260>
   239f8:	mov	r8, r2
   239fc:	mov	sl, r1
   23a00:	ldr	r1, [r0, #8]
   23a04:	ldr	r2, [r0, #24]
   23a08:	mov	r4, r0
   23a0c:	mov	r0, sl
   23a10:	blx	r2
   23a14:	mov	r7, r0
   23a18:	ldr	r0, [r4, #8]
   23a1c:	cmp	r7, r0
   23a20:	bcs	23d10 <__assert_fail@plt+0x11260>
   23a24:	ldr	r5, [r4]
   23a28:	mov	r9, r5
   23a2c:	ldr	r1, [r9, r7, lsl #3]!
   23a30:	cmp	r1, #0
   23a34:	beq	23ac0 <__assert_fail@plt+0x11010>
   23a38:	cmp	r1, sl
   23a3c:	beq	23a68 <__assert_fail@plt+0x10fb8>
   23a40:	ldr	r2, [r4, #28]
   23a44:	mov	r0, sl
   23a48:	blx	r2
   23a4c:	cmp	r0, #0
   23a50:	mov	r6, r9
   23a54:	beq	23a7c <__assert_fail@plt+0x10fcc>
   23a58:	ldr	r0, [r6]
   23a5c:	cmp	r0, #0
   23a60:	bne	23a6c <__assert_fail@plt+0x10fbc>
   23a64:	b	23ac0 <__assert_fail@plt+0x11010>
   23a68:	mov	r0, sl
   23a6c:	cmp	r8, #0
   23a70:	mov	r7, #0
   23a74:	strne	r0, [r8]
   23a78:	b	23cac <__assert_fail@plt+0x111fc>
   23a7c:	add	r6, r5, r7, lsl #3
   23a80:	ldr	r0, [r6, #4]!
   23a84:	cmp	r0, #0
   23a88:	beq	23ac0 <__assert_fail@plt+0x11010>
   23a8c:	ldr	r1, [r0]
   23a90:	cmp	r1, sl
   23a94:	beq	23ab4 <__assert_fail@plt+0x11004>
   23a98:	ldr	r2, [r4, #28]
   23a9c:	mov	r0, sl
   23aa0:	blx	r2
   23aa4:	ldr	r6, [r6]
   23aa8:	cmp	r0, #0
   23aac:	beq	23a80 <__assert_fail@plt+0x10fd0>
   23ab0:	b	23a58 <__assert_fail@plt+0x10fa8>
   23ab4:	mov	r0, sl
   23ab8:	cmp	r0, #0
   23abc:	bne	23a6c <__assert_fail@plt+0x10fbc>
   23ac0:	vldr	s0, [r4, #8]
   23ac4:	vldr	s2, [r4, #12]
   23ac8:	ldr	r0, [r4, #20]
   23acc:	vcvt.f32.u32	s0, s0
   23ad0:	vcvt.f32.u32	s4, s2
   23ad4:	vldr	s2, [r0, #8]
   23ad8:	vmul.f32	s6, s2, s0
   23adc:	vcmpe.f32	s6, s4
   23ae0:	vmrs	APSR_nzcv, fpscr
   23ae4:	bpl	23c38 <__assert_fail@plt+0x11188>
   23ae8:	movw	r1, #49984	; 0xc340
   23aec:	movt	r1, #4
   23af0:	cmp	r0, r1
   23af4:	beq	23b80 <__assert_fail@plt+0x110d0>
   23af8:	vldr	s6, [pc, #532]	; 23d14 <__assert_fail@plt+0x11264>
   23afc:	vcmpe.f32	s2, s6
   23b00:	vmrs	APSR_nzcv, fpscr
   23b04:	ble	23b6c <__assert_fail@plt+0x110bc>
   23b08:	vldr	s8, [pc, #520]	; 23d18 <__assert_fail@plt+0x11268>
   23b0c:	vcmpe.f32	s2, s8
   23b10:	vmrs	APSR_nzcv, fpscr
   23b14:	bpl	23b6c <__assert_fail@plt+0x110bc>
   23b18:	vldr	s8, [pc, #508]	; 23d1c <__assert_fail@plt+0x1126c>
   23b1c:	vldr	s10, [r0, #12]
   23b20:	vcmpe.f32	s10, s8
   23b24:	vmrs	APSR_nzcv, fpscr
   23b28:	ble	23b6c <__assert_fail@plt+0x110bc>
   23b2c:	vldr	s8, [r0]
   23b30:	vcmpe.f32	s8, #0.0
   23b34:	vmrs	APSR_nzcv, fpscr
   23b38:	blt	23b6c <__assert_fail@plt+0x110bc>
   23b3c:	vadd.f32	s6, s8, s6
   23b40:	vcmpe.f32	s6, s2
   23b44:	vmrs	APSR_nzcv, fpscr
   23b48:	bpl	23b6c <__assert_fail@plt+0x110bc>
   23b4c:	vldr	s8, [r0, #4]
   23b50:	vmov.f32	s10, #112	; 0x3f800000  1.0
   23b54:	vcmpe.f32	s8, s10
   23b58:	vmrs	APSR_nzcv, fpscr
   23b5c:	bhi	23b6c <__assert_fail@plt+0x110bc>
   23b60:	vcmpe.f32	s6, s8
   23b64:	vmrs	APSR_nzcv, fpscr
   23b68:	bmi	23b84 <__assert_fail@plt+0x110d4>
   23b6c:	vldr	s2, [pc, #428]	; 23d20 <__assert_fail@plt+0x11270>
   23b70:	movw	r0, #49984	; 0xc340
   23b74:	movt	r0, #4
   23b78:	str	r0, [r4, #20]
   23b7c:	b	23b84 <__assert_fail@plt+0x110d4>
   23b80:	mov	r0, r1
   23b84:	vmul.f32	s6, s2, s0
   23b88:	vcmpe.f32	s6, s4
   23b8c:	vmrs	APSR_nzcv, fpscr
   23b90:	bpl	23c38 <__assert_fail@plt+0x11188>
   23b94:	vldr	s4, [r0, #12]
   23b98:	ldrb	r0, [r0, #16]
   23b9c:	mvn	r7, #0
   23ba0:	cmp	r0, #0
   23ba4:	vmul.f32	s0, s4, s0
   23ba8:	vldr	s4, [pc, #372]	; 23d24 <__assert_fail@plt+0x11274>
   23bac:	vmul.f32	s2, s2, s0
   23bb0:	vseleq.f32	s0, s2, s0
   23bb4:	vcmpe.f32	s0, s4
   23bb8:	vmrs	APSR_nzcv, fpscr
   23bbc:	bge	23cac <__assert_fail@plt+0x111fc>
   23bc0:	vcvt.u32.f32	s0, s0
   23bc4:	mov	r0, r4
   23bc8:	vmov	r1, s0
   23bcc:	bl	235dc <__assert_fail@plt+0x10b2c>
   23bd0:	cmp	r0, #0
   23bd4:	beq	23cac <__assert_fail@plt+0x111fc>
   23bd8:	ldr	r1, [r4, #8]
   23bdc:	ldr	r2, [r4, #24]
   23be0:	mov	r0, sl
   23be4:	blx	r2
   23be8:	mov	r7, r0
   23bec:	ldr	r0, [r4, #8]
   23bf0:	cmp	r7, r0
   23bf4:	bcs	23d10 <__assert_fail@plt+0x11260>
   23bf8:	ldr	r5, [r4]
   23bfc:	mov	r9, r5
   23c00:	ldr	r1, [r9, r7, lsl #3]!
   23c04:	cmp	r1, #0
   23c08:	beq	23c38 <__assert_fail@plt+0x11188>
   23c0c:	cmp	r1, sl
   23c10:	mov	r0, sl
   23c14:	beq	23c30 <__assert_fail@plt+0x11180>
   23c18:	ldr	r2, [r4, #28]
   23c1c:	mov	r0, sl
   23c20:	blx	r2
   23c24:	cmp	r0, #0
   23c28:	beq	23cc0 <__assert_fail@plt+0x11210>
   23c2c:	ldr	r0, [r9]
   23c30:	cmp	r0, #0
   23c34:	bne	23d10 <__assert_fail@plt+0x11260>
   23c38:	ldr	r0, [r9]
   23c3c:	cmp	r0, #0
   23c40:	beq	23c5c <__assert_fail@plt+0x111ac>
   23c44:	ldr	r0, [r4, #36]	; 0x24
   23c48:	cmp	r0, #0
   23c4c:	beq	23c7c <__assert_fail@plt+0x111cc>
   23c50:	ldr	r1, [r0, #4]
   23c54:	str	r1, [r4, #36]	; 0x24
   23c58:	b	23c8c <__assert_fail@plt+0x111dc>
   23c5c:	str	sl, [r9]
   23c60:	ldr	r0, [r4, #12]
   23c64:	ldr	r1, [r4, #16]
   23c68:	add	r0, r0, #1
   23c6c:	add	r1, r1, #1
   23c70:	str	r0, [r4, #12]
   23c74:	str	r1, [r4, #16]
   23c78:	b	23ca8 <__assert_fail@plt+0x111f8>
   23c7c:	mov	r0, #8
   23c80:	bl	327ac <__assert_fail@plt+0x1fcfc>
   23c84:	cmp	r0, #0
   23c88:	beq	23cb8 <__assert_fail@plt+0x11208>
   23c8c:	str	sl, [r0]
   23c90:	ldr	r1, [r9, #4]
   23c94:	str	r1, [r0, #4]
   23c98:	str	r0, [r9, #4]
   23c9c:	ldr	r0, [r4, #16]
   23ca0:	add	r0, r0, #1
   23ca4:	str	r0, [r4, #16]
   23ca8:	mov	r7, #1
   23cac:	mov	r0, r7
   23cb0:	sub	sp, fp, #28
   23cb4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   23cb8:	mvn	r7, #0
   23cbc:	b	23cac <__assert_fail@plt+0x111fc>
   23cc0:	add	r6, r5, r7, lsl #3
   23cc4:	ldr	r0, [r6, #4]!
   23cc8:	cmp	r0, #0
   23ccc:	beq	23c38 <__assert_fail@plt+0x11188>
   23cd0:	ldr	r1, [r0]
   23cd4:	cmp	r1, sl
   23cd8:	beq	23d04 <__assert_fail@plt+0x11254>
   23cdc:	ldr	r2, [r4, #28]
   23ce0:	mov	r0, sl
   23ce4:	blx	r2
   23ce8:	ldr	r6, [r6]
   23cec:	cmp	r0, #0
   23cf0:	beq	23cc4 <__assert_fail@plt+0x11214>
   23cf4:	ldr	r0, [r6]
   23cf8:	cmp	r0, #0
   23cfc:	beq	23c38 <__assert_fail@plt+0x11188>
   23d00:	b	23d10 <__assert_fail@plt+0x11260>
   23d04:	mov	r0, sl
   23d08:	cmp	r0, #0
   23d0c:	beq	23c38 <__assert_fail@plt+0x11188>
   23d10:	bl	12a5c <abort@plt>
   23d14:	stclcc	12, cr12, [ip, #820]	; 0x334
   23d18:	svccc	0x00666666
   23d1c:	svccc	0x008ccccd
   23d20:	svccc	0x004ccccd
   23d24:	svcmi	0x00800000
   23d28:	push	{r4, sl, fp, lr}
   23d2c:	add	fp, sp, #8
   23d30:	sub	sp, sp, #8
   23d34:	add	r2, sp, #4
   23d38:	mov	r4, r1
   23d3c:	bl	239e4 <__assert_fail@plt+0x10f34>
   23d40:	cmn	r0, #1
   23d44:	beq	23d58 <__assert_fail@plt+0x112a8>
   23d48:	ldr	r1, [sp, #4]
   23d4c:	cmp	r0, #0
   23d50:	moveq	r4, r1
   23d54:	b	23d5c <__assert_fail@plt+0x112ac>
   23d58:	mov	r4, #0
   23d5c:	mov	r0, r4
   23d60:	sub	sp, fp, #8
   23d64:	pop	{r4, sl, fp, pc}
   23d68:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   23d6c:	add	fp, sp, #24
   23d70:	mov	r9, r1
   23d74:	ldr	r1, [r0, #8]
   23d78:	ldr	r2, [r0, #24]
   23d7c:	mov	r5, r0
   23d80:	mov	r0, r9
   23d84:	blx	r2
   23d88:	mov	r7, r0
   23d8c:	ldr	r0, [r5, #8]
   23d90:	cmp	r7, r0
   23d94:	bcs	23ff8 <__assert_fail@plt+0x11548>
   23d98:	ldr	r6, [r5]
   23d9c:	mov	r8, #0
   23da0:	mov	r4, r6
   23da4:	ldr	r1, [r4, r7, lsl #3]!
   23da8:	cmp	r1, #0
   23dac:	beq	23e60 <__assert_fail@plt+0x113b0>
   23db0:	cmp	r1, r9
   23db4:	beq	23dd0 <__assert_fail@plt+0x11320>
   23db8:	ldr	r2, [r5, #28]
   23dbc:	mov	r0, r9
   23dc0:	blx	r2
   23dc4:	cmp	r0, #0
   23dc8:	beq	23e08 <__assert_fail@plt+0x11358>
   23dcc:	ldr	r9, [r4]
   23dd0:	add	r0, r6, r7, lsl #3
   23dd4:	ldr	r0, [r0, #4]
   23dd8:	cmp	r0, #0
   23ddc:	beq	23e50 <__assert_fail@plt+0x113a0>
   23de0:	ldm	r0, {r1, r2}
   23de4:	stm	r4, {r1, r2}
   23de8:	mov	r1, #0
   23dec:	str	r1, [r0]
   23df0:	ldr	r1, [r5, #36]	; 0x24
   23df4:	str	r1, [r0, #4]
   23df8:	str	r0, [r5, #36]	; 0x24
   23dfc:	cmp	r9, #0
   23e00:	bne	23e98 <__assert_fail@plt+0x113e8>
   23e04:	b	23e60 <__assert_fail@plt+0x113b0>
   23e08:	add	r7, r6, r7, lsl #3
   23e0c:	ldr	r0, [r7, #4]!
   23e10:	cmp	r0, #0
   23e14:	beq	23e60 <__assert_fail@plt+0x113b0>
   23e18:	ldr	r1, [r0]
   23e1c:	cmp	r1, r9
   23e20:	beq	23e68 <__assert_fail@plt+0x113b8>
   23e24:	ldr	r2, [r5, #28]
   23e28:	mov	r0, r9
   23e2c:	blx	r2
   23e30:	ldr	r1, [r7]
   23e34:	cmp	r0, #0
   23e38:	bne	23e70 <__assert_fail@plt+0x113c0>
   23e3c:	ldr	r0, [r1, #4]!
   23e40:	mov	r7, r1
   23e44:	cmp	r0, #0
   23e48:	bne	23e18 <__assert_fail@plt+0x11368>
   23e4c:	b	23e60 <__assert_fail@plt+0x113b0>
   23e50:	mov	r0, #0
   23e54:	str	r0, [r4]
   23e58:	cmp	r9, #0
   23e5c:	bne	23e98 <__assert_fail@plt+0x113e8>
   23e60:	mov	r0, r8
   23e64:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   23e68:	mov	r1, r0
   23e6c:	b	23e74 <__assert_fail@plt+0x113c4>
   23e70:	ldr	r9, [r1]
   23e74:	ldr	r0, [r1, #4]
   23e78:	str	r0, [r7]
   23e7c:	mov	r0, #0
   23e80:	str	r0, [r1]
   23e84:	ldr	r0, [r5, #36]	; 0x24
   23e88:	str	r0, [r1, #4]
   23e8c:	str	r1, [r5, #36]	; 0x24
   23e90:	cmp	r9, #0
   23e94:	beq	23e60 <__assert_fail@plt+0x113b0>
   23e98:	ldr	r0, [r5, #16]
   23e9c:	sub	r0, r0, #1
   23ea0:	str	r0, [r5, #16]
   23ea4:	ldr	r0, [r4]
   23ea8:	cmp	r0, #0
   23eac:	bne	23fec <__assert_fail@plt+0x1153c>
   23eb0:	ldr	r0, [r5, #12]
   23eb4:	vldr	s0, [r5, #8]
   23eb8:	sub	r1, r0, #1
   23ebc:	str	r1, [r5, #12]
   23ec0:	vmov	s2, r1
   23ec4:	ldr	r0, [r5, #20]
   23ec8:	vcvt.f32.u32	s0, s0
   23ecc:	vcvt.f32.u32	s2, s2
   23ed0:	vldr	s4, [r0]
   23ed4:	vmul.f32	s6, s4, s0
   23ed8:	vcmpe.f32	s6, s2
   23edc:	vmrs	APSR_nzcv, fpscr
   23ee0:	ble	23fec <__assert_fail@plt+0x1153c>
   23ee4:	movw	r1, #49984	; 0xc340
   23ee8:	movt	r1, #4
   23eec:	cmp	r0, r1
   23ef0:	beq	23f7c <__assert_fail@plt+0x114cc>
   23ef4:	vldr	s8, [pc, #256]	; 23ffc <__assert_fail@plt+0x1154c>
   23ef8:	vldr	s6, [r0, #8]
   23efc:	vcmpe.f32	s6, s8
   23f00:	vmrs	APSR_nzcv, fpscr
   23f04:	ble	23f68 <__assert_fail@plt+0x114b8>
   23f08:	vldr	s10, [pc, #240]	; 24000 <__assert_fail@plt+0x11550>
   23f0c:	vcmpe.f32	s6, s10
   23f10:	vmrs	APSR_nzcv, fpscr
   23f14:	bpl	23f68 <__assert_fail@plt+0x114b8>
   23f18:	vcmpe.f32	s4, #0.0
   23f1c:	vmrs	APSR_nzcv, fpscr
   23f20:	blt	23f68 <__assert_fail@plt+0x114b8>
   23f24:	vldr	s10, [r0, #12]
   23f28:	vldr	s12, [pc, #212]	; 24004 <__assert_fail@plt+0x11554>
   23f2c:	vcmpe.f32	s10, s12
   23f30:	vmrs	APSR_nzcv, fpscr
   23f34:	ble	23f68 <__assert_fail@plt+0x114b8>
   23f38:	vadd.f32	s8, s4, s8
   23f3c:	vcmpe.f32	s8, s6
   23f40:	vmrs	APSR_nzcv, fpscr
   23f44:	bpl	23f68 <__assert_fail@plt+0x114b8>
   23f48:	vldr	s6, [r0, #4]
   23f4c:	vmov.f32	s10, #112	; 0x3f800000  1.0
   23f50:	vcmpe.f32	s6, s10
   23f54:	vmrs	APSR_nzcv, fpscr
   23f58:	bhi	23f68 <__assert_fail@plt+0x114b8>
   23f5c:	vcmpe.f32	s8, s6
   23f60:	vmrs	APSR_nzcv, fpscr
   23f64:	bmi	23f80 <__assert_fail@plt+0x114d0>
   23f68:	vldr	s4, [pc, #152]	; 24008 <__assert_fail@plt+0x11558>
   23f6c:	movw	r0, #49984	; 0xc340
   23f70:	movt	r0, #4
   23f74:	str	r0, [r5, #20]
   23f78:	b	23f80 <__assert_fail@plt+0x114d0>
   23f7c:	mov	r0, r1
   23f80:	vmul.f32	s4, s4, s0
   23f84:	vcmpe.f32	s4, s2
   23f88:	vmrs	APSR_nzcv, fpscr
   23f8c:	ble	23fec <__assert_fail@plt+0x1153c>
   23f90:	vldr	s2, [r0, #4]
   23f94:	ldrb	r1, [r0, #16]
   23f98:	cmp	r1, #0
   23f9c:	vmul.f32	s0, s2, s0
   23fa0:	bne	23fac <__assert_fail@plt+0x114fc>
   23fa4:	vldr	s2, [r0, #8]
   23fa8:	vmul.f32	s0, s0, s2
   23fac:	vcvt.u32.f32	s0, s0
   23fb0:	mov	r0, r5
   23fb4:	vmov	r1, s0
   23fb8:	bl	235dc <__assert_fail@plt+0x10b2c>
   23fbc:	cmp	r0, #0
   23fc0:	bne	23fec <__assert_fail@plt+0x1153c>
   23fc4:	ldr	r0, [r5, #36]	; 0x24
   23fc8:	cmp	r0, #0
   23fcc:	beq	23fe4 <__assert_fail@plt+0x11534>
   23fd0:	ldr	r4, [r0, #4]
   23fd4:	bl	30174 <__assert_fail@plt+0x1d6c4>
   23fd8:	cmp	r4, #0
   23fdc:	mov	r0, r4
   23fe0:	bne	23fd0 <__assert_fail@plt+0x11520>
   23fe4:	mov	r0, #0
   23fe8:	str	r0, [r5, #36]	; 0x24
   23fec:	mov	r8, r9
   23ff0:	mov	r0, r8
   23ff4:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   23ff8:	bl	12a5c <abort@plt>
   23ffc:	stclcc	12, cr12, [ip, #820]	; 0x334
   24000:	svccc	0x00666666
   24004:	svccc	0x008ccccd
   24008:	andeq	r0, r0, r0
   2400c:	b	23d68 <__assert_fail@plt+0x112b8>
   24010:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   24014:	add	fp, sp, #28
   24018:	sub	sp, sp, #4
   2401c:	vpush	{d8-d9}
   24020:	sub	sp, sp, #96	; 0x60
   24024:	mov	r7, r3
   24028:	mov	r5, r2
   2402c:	mov	r8, r1
   24030:	mov	sl, r0
   24034:	bl	12960 <localeconv@plt>
   24038:	ldr	r6, [r0]
   2403c:	mov	r4, r0
   24040:	mov	r0, r6
   24044:	bl	127bc <strlen@plt>
   24048:	sub	r1, r0, #1
   2404c:	movw	r2, #35340	; 0x8a0c
   24050:	cmp	r1, #16
   24054:	movt	r2, #4
   24058:	movcs	r0, #1
   2405c:	movcc	r2, r6
   24060:	ldr	r6, [r4, #4]
   24064:	str	r0, [sp, #40]	; 0x28
   24068:	ldr	r0, [r4, #8]
   2406c:	str	r2, [sp, #8]
   24070:	str	r0, [sp, #16]
   24074:	mov	r0, r6
   24078:	bl	127bc <strlen@plt>
   2407c:	cmp	r0, #17
   24080:	movw	r0, #647	; 0x287
   24084:	movw	r1, #38711	; 0x9737
   24088:	str	r5, [sp, #28]
   2408c:	str	r7, [sp, #32]
   24090:	ldr	r4, [fp, #20]
   24094:	add	r0, r5, r0
   24098:	movt	r1, #4
   2409c:	movcc	r1, r6
   240a0:	ldr	r5, [fp, #16]
   240a4:	ldr	r6, [fp, #8]
   240a8:	str	r0, [sp, #24]
   240ac:	ands	r0, r7, #32
   240b0:	str	r1, [sp, #12]
   240b4:	str	r0, [sp, #20]
   240b8:	mov	r0, #1000	; 0x3e8
   240bc:	movwne	r0, #1024	; 0x400
   240c0:	str	r0, [sp, #36]	; 0x24
   240c4:	and	r0, r7, #3
   240c8:	ldr	r7, [fp, #12]
   240cc:	str	r0, [sp, #44]	; 0x2c
   240d0:	subs	r0, r6, r5
   240d4:	sbcs	r0, r7, r4
   240d8:	bcs	241c8 <__assert_fail@plt+0x11718>
   240dc:	orrs	r0, r6, r7
   240e0:	beq	2431c <__assert_fail@plt+0x1186c>
   240e4:	ldr	r9, [fp, #16]
   240e8:	ldr	r5, [fp, #20]
   240ec:	mov	r2, r6
   240f0:	mov	r3, r7
   240f4:	mov	r0, r9
   240f8:	mov	r1, r5
   240fc:	bl	47618 <__assert_fail@plt+0x34b68>
   24100:	mov	r4, r0
   24104:	mov	r3, r1
   24108:	umull	r0, r1, r0, r6
   2410c:	mla	r1, r4, r7, r1
   24110:	mla	r1, r3, r6, r1
   24114:	subs	r0, r9, r0
   24118:	sbc	r1, r5, r1
   2411c:	orrs	r0, r0, r1
   24120:	bne	2431c <__assert_fail@plt+0x1186c>
   24124:	mov	r0, sl
   24128:	mov	r1, r8
   2412c:	mov	r2, r4
   24130:	mov	r6, r8
   24134:	mov	r8, r3
   24138:	bl	47618 <__assert_fail@plt+0x34b68>
   2413c:	mov	r5, r0
   24140:	mov	r9, r1
   24144:	umull	r0, r1, r0, r4
   24148:	mov	r2, #10
   2414c:	mov	r3, r8
   24150:	mla	r1, r5, r8, r1
   24154:	mla	r1, r9, r4, r1
   24158:	subs	r0, sl, r0
   2415c:	umull	sl, r0, r0, r2
   24160:	mov	r2, r4
   24164:	sbc	r1, r6, r1
   24168:	add	r1, r1, r1, lsl #2
   2416c:	add	r7, r0, r1, lsl #1
   24170:	mov	r0, sl
   24174:	mov	r1, r7
   24178:	bl	47618 <__assert_fail@plt+0x34b68>
   2417c:	mov	r6, r0
   24180:	umull	r0, r2, r0, r4
   24184:	mla	r2, r6, r8, r2
   24188:	mla	r1, r1, r4, r2
   2418c:	mov	r2, #2
   24190:	subs	r0, sl, r0
   24194:	sbc	r1, r7, r1
   24198:	subs	r3, r4, r0, lsl #1
   2419c:	lsl	r1, r1, #1
   241a0:	orr	r1, r1, r0, lsr #31
   241a4:	orr	r7, r1, r0, lsl #1
   241a8:	sbcs	r3, r8, r1
   241ac:	movwcc	r2, #3
   241b0:	cmp	r7, #0
   241b4:	movwne	r7, #1
   241b8:	rsbs	r0, r4, r0, lsl #1
   241bc:	sbcs	r0, r1, r8
   241c0:	movcs	r7, r2
   241c4:	b	24234 <__assert_fail@plt+0x11784>
   241c8:	mov	r0, r6
   241cc:	mov	r1, r7
   241d0:	mov	r2, r5
   241d4:	mov	r3, r4
   241d8:	bl	47618 <__assert_fail@plt+0x34b68>
   241dc:	mov	r2, r0
   241e0:	mov	r3, r1
   241e4:	umull	r0, r1, r0, r5
   241e8:	mla	r1, r2, r4, r1
   241ec:	mla	r1, r3, r5, r1
   241f0:	subs	r0, r6, r0
   241f4:	sbc	r1, r7, r1
   241f8:	orrs	r0, r0, r1
   241fc:	bne	2431c <__assert_fail@plt+0x1186c>
   24200:	umull	r5, r0, r2, sl
   24204:	mov	r4, r8
   24208:	mla	r0, r2, r8, r0
   2420c:	mla	r9, r3, sl, r0
   24210:	mov	r0, r5
   24214:	mov	r1, r9
   24218:	bl	47618 <__assert_fail@plt+0x34b68>
   2421c:	eor	r1, r1, r8
   24220:	eor	r0, r0, sl
   24224:	orrs	r0, r0, r1
   24228:	bne	2431c <__assert_fail@plt+0x1186c>
   2422c:	mov	r7, #0
   24230:	mov	r6, #0
   24234:	ldr	r0, [sp, #32]
   24238:	ldr	r1, [sp, #24]
   2423c:	ldr	r2, [sp, #36]	; 0x24
   24240:	ands	r4, r0, #16
   24244:	beq	24588 <__assert_fail@plt+0x11ad8>
   24248:	subs	r0, r5, r2
   2424c:	mov	r8, #0
   24250:	sbcs	r0, r9, #0
   24254:	bcs	24268 <__assert_fail@plt+0x117b8>
   24258:	ldr	r0, [sp, #24]
   2425c:	mov	sl, r5
   24260:	str	r0, [sp, #4]
   24264:	b	248c0 <__assert_fail@plt+0x11e10>
   24268:	ldr	r2, [sp, #36]	; 0x24
   2426c:	mov	r0, r5
   24270:	mov	r1, r9
   24274:	mov	r3, #0
   24278:	bl	47618 <__assert_fail@plt+0x34b68>
   2427c:	ldr	r2, [sp, #36]	; 0x24
   24280:	mov	sl, r0
   24284:	mov	r9, r1
   24288:	mls	r0, r0, r2, r5
   2428c:	add	r0, r0, r0, lsl #2
   24290:	add	r0, r6, r0, lsl #1
   24294:	udiv	r6, r0, r2
   24298:	mls	r0, r6, r2, r0
   2429c:	lsl	r0, r0, #1
   242a0:	add	r0, r0, r7, lsr #1
   242a4:	cmp	r0, r2
   242a8:	bcs	242bc <__assert_fail@plt+0x1180c>
   242ac:	rsb	r1, r7, #0
   242b0:	subs	r7, r0, r1
   242b4:	movwne	r7, #1
   242b8:	b	242cc <__assert_fail@plt+0x1181c>
   242bc:	add	r0, r0, r7
   242c0:	mov	r7, #2
   242c4:	cmp	r2, r0
   242c8:	movwcc	r7, #3
   242cc:	mov	r0, r8
   242d0:	add	r0, r8, #1
   242d4:	mov	r8, r0
   242d8:	cmp	r0, #7
   242dc:	bhi	242f0 <__assert_fail@plt+0x11840>
   242e0:	subs	r0, sl, r2
   242e4:	mov	r5, sl
   242e8:	sbcs	r0, r9, #0
   242ec:	bcs	24268 <__assert_fail@plt+0x117b8>
   242f0:	rsbs	r0, sl, #9
   242f4:	rscs	r0, r9, #0
   242f8:	bcc	24820 <__assert_fail@plt+0x11d70>
   242fc:	ldr	r0, [sp, #44]	; 0x2c
   24300:	cmp	r0, #1
   24304:	bne	2482c <__assert_fail@plt+0x11d7c>
   24308:	and	r0, r6, #1
   2430c:	add	r0, r7, r0
   24310:	cmp	r0, #2
   24314:	bhi	2483c <__assert_fail@plt+0x11d8c>
   24318:	b	24874 <__assert_fail@plt+0x11dc4>
   2431c:	ldr	r9, [fp, #20]
   24320:	ldr	r0, [fp, #16]
   24324:	mov	r1, r9
   24328:	bl	474d0 <__assert_fail@plt+0x34a20>
   2432c:	vmov	d8, r0, r1
   24330:	mov	r0, sl
   24334:	mov	r1, r8
   24338:	bl	474d0 <__assert_fail@plt+0x34a20>
   2433c:	mov	r4, r0
   24340:	mov	r5, r1
   24344:	mov	r0, r6
   24348:	mov	r1, r7
   2434c:	bl	474d0 <__assert_fail@plt+0x34a20>
   24350:	vmov	d16, r0, r1
   24354:	vmov	d17, r4, r5
   24358:	ldr	r7, [sp, #32]
   2435c:	tst	r7, #16
   24360:	vdiv.f64	d16, d16, d8
   24364:	vmul.f64	d8, d16, d17
   24368:	bne	243e8 <__assert_fail@plt+0x11938>
   2436c:	ldr	r6, [sp, #44]	; 0x2c
   24370:	cmp	r6, #1
   24374:	beq	2459c <__assert_fail@plt+0x11aec>
   24378:	vldr	d16, [pc, #592]	; 245d0 <__assert_fail@plt+0x11b20>
   2437c:	ldr	sl, [sp, #28]
   24380:	ldr	r8, [sp, #24]
   24384:	vcmpe.f64	d8, d16
   24388:	vmrs	APSR_nzcv, fpscr
   2438c:	bpl	245a4 <__assert_fail@plt+0x11af4>
   24390:	vmov	r0, r1, d8
   24394:	bl	47668 <__assert_fail@plt+0x34bb8>
   24398:	mov	r4, r0
   2439c:	mov	r5, r1
   243a0:	mov	r0, #0
   243a4:	cmp	r6, #0
   243a8:	mov	r2, #0
   243ac:	bne	243d4 <__assert_fail@plt+0x11924>
   243b0:	mov	r0, r4
   243b4:	mov	r1, r5
   243b8:	bl	474d0 <__assert_fail@plt+0x34a20>
   243bc:	vmov	d16, r0, r1
   243c0:	mov	r2, #0
   243c4:	mov	r0, #0
   243c8:	vcmp.f64	d8, d16
   243cc:	vmrs	APSR_nzcv, fpscr
   243d0:	movwne	r0, #1
   243d4:	adds	r0, r0, r4
   243d8:	adc	r1, r2, r5
   243dc:	bl	474d0 <__assert_fail@plt+0x34a20>
   243e0:	vmov	d8, r0, r1
   243e4:	b	245a4 <__assert_fail@plt+0x11af4>
   243e8:	ldr	r0, [sp, #36]	; 0x24
   243ec:	mov	r6, #1
   243f0:	vmov	s0, r0
   243f4:	vcvt.f64.u32	d16, s0
   243f8:	vmul.f64	d17, d16, d16
   243fc:	vcmpe.f64	d17, d8
   24400:	vmrs	APSR_nzcv, fpscr
   24404:	bls	24418 <__assert_fail@plt+0x11968>
   24408:	ldr	sl, [sp, #40]	; 0x28
   2440c:	ldr	r8, [sp, #24]
   24410:	vmov.f64	d17, d16
   24414:	b	244b0 <__assert_fail@plt+0x11a00>
   24418:	vmul.f64	d18, d17, d16
   2441c:	ldr	sl, [sp, #40]	; 0x28
   24420:	ldr	r8, [sp, #24]
   24424:	mov	r6, #2
   24428:	vcmpe.f64	d18, d8
   2442c:	vmrs	APSR_nzcv, fpscr
   24430:	bhi	244b0 <__assert_fail@plt+0x11a00>
   24434:	vmul.f64	d19, d18, d16
   24438:	vmov.f64	d17, d18
   2443c:	mov	r6, #3
   24440:	vcmpe.f64	d19, d8
   24444:	vmrs	APSR_nzcv, fpscr
   24448:	bhi	244b0 <__assert_fail@plt+0x11a00>
   2444c:	vmul.f64	d18, d19, d16
   24450:	vmov.f64	d17, d19
   24454:	mov	r6, #4
   24458:	vcmpe.f64	d18, d8
   2445c:	vmrs	APSR_nzcv, fpscr
   24460:	bhi	244b0 <__assert_fail@plt+0x11a00>
   24464:	vmul.f64	d19, d18, d16
   24468:	vmov.f64	d17, d18
   2446c:	mov	r6, #5
   24470:	vcmpe.f64	d19, d8
   24474:	vmrs	APSR_nzcv, fpscr
   24478:	bhi	244b0 <__assert_fail@plt+0x11a00>
   2447c:	vmul.f64	d18, d19, d16
   24480:	vmov.f64	d17, d19
   24484:	mov	r6, #6
   24488:	vcmpe.f64	d18, d8
   2448c:	vmrs	APSR_nzcv, fpscr
   24490:	bhi	244b0 <__assert_fail@plt+0x11a00>
   24494:	vmul.f64	d16, d18, d16
   24498:	mov	r6, #7
   2449c:	vmov.f64	d17, d18
   244a0:	vcmpe.f64	d16, d8
   244a4:	vmrs	APSR_nzcv, fpscr
   244a8:	movls	r6, #8
   244ac:	vmovls.f64	d17, d16
   244b0:	vdiv.f64	d8, d8, d17
   244b4:	ldr	r0, [sp, #44]	; 0x2c
   244b8:	cmp	r0, #1
   244bc:	vmov.f64	d16, d8
   244c0:	beq	24530 <__assert_fail@plt+0x11a80>
   244c4:	vldr	d16, [pc, #260]	; 245d0 <__assert_fail@plt+0x11b20>
   244c8:	vcmpe.f64	d8, d16
   244cc:	vmov.f64	d16, d8
   244d0:	vmrs	APSR_nzcv, fpscr
   244d4:	bpl	24530 <__assert_fail@plt+0x11a80>
   244d8:	vmov	r0, r1, d8
   244dc:	bl	47668 <__assert_fail@plt+0x34bb8>
   244e0:	mov	r5, r1
   244e4:	ldr	r1, [sp, #44]	; 0x2c
   244e8:	mov	r4, r0
   244ec:	mov	r0, #0
   244f0:	mov	r2, #0
   244f4:	cmp	r1, #0
   244f8:	bne	24520 <__assert_fail@plt+0x11a70>
   244fc:	mov	r0, r4
   24500:	mov	r1, r5
   24504:	bl	474d0 <__assert_fail@plt+0x34a20>
   24508:	vmov	d16, r0, r1
   2450c:	mov	r2, #0
   24510:	mov	r0, #0
   24514:	vcmp.f64	d8, d16
   24518:	vmrs	APSR_nzcv, fpscr
   2451c:	movwne	r0, #1
   24520:	adds	r0, r0, r4
   24524:	adc	r1, r2, r5
   24528:	bl	474d0 <__assert_fail@plt+0x34a20>
   2452c:	vmov	d16, r0, r1
   24530:	ldr	r5, [sp, #28]
   24534:	vmov	r2, r3, d16
   24538:	movw	r1, #50010	; 0xc35a
   2453c:	movt	r1, #4
   24540:	mov	r0, r5
   24544:	bl	1296c <sprintf@plt>
   24548:	ldr	r1, [sp, #20]
   2454c:	mov	r0, #3
   24550:	cmp	r1, #0
   24554:	movwne	r0, #2
   24558:	add	r4, r0, sl
   2455c:	mov	r0, r5
   24560:	bl	127bc <strlen@plt>
   24564:	cmp	r4, r0
   24568:	bcc	245ec <__assert_fail@plt+0x11b3c>
   2456c:	ldr	r7, [sp, #32]
   24570:	mov	r2, r0
   24574:	add	r5, sl, #1
   24578:	tst	r7, #8
   2457c:	bne	245d8 <__assert_fail@plt+0x11b28>
   24580:	ldr	sl, [sp, #28]
   24584:	b	24694 <__assert_fail@plt+0x11be4>
   24588:	mov	r0, r1
   2458c:	mvn	r8, #0
   24590:	str	r1, [sp, #4]
   24594:	mov	sl, r5
   24598:	b	248c0 <__assert_fail@plt+0x11e10>
   2459c:	ldr	sl, [sp, #28]
   245a0:	ldr	r8, [sp, #24]
   245a4:	vmov	r2, r3, d8
   245a8:	movw	r1, #50004	; 0xc354
   245ac:	mov	r0, sl
   245b0:	movt	r1, #4
   245b4:	bl	1296c <sprintf@plt>
   245b8:	mov	r0, sl
   245bc:	bl	127bc <strlen@plt>
   245c0:	mov	r2, r0
   245c4:	mov	r5, #0
   245c8:	mvn	r6, #0
   245cc:	b	24694 <__assert_fail@plt+0x11be4>
   245d0:	andeq	r0, r0, r0
   245d4:	mvnsmi	r0, #0
   245d8:	ldr	r0, [sp, #28]
   245dc:	add	r0, r2, r0
   245e0:	ldrb	r0, [r0, #-1]
   245e4:	cmp	r0, #48	; 0x30
   245e8:	bne	24814 <__assert_fail@plt+0x11d64>
   245ec:	vmov.f64	d9, #36	; 0x41200000  10.0
   245f0:	ldr	r4, [sp, #44]	; 0x2c
   245f4:	vmul.f64	d8, d8, d9
   245f8:	cmp	r4, #1
   245fc:	beq	24664 <__assert_fail@plt+0x11bb4>
   24600:	vldr	d16, [pc, #-56]	; 245d0 <__assert_fail@plt+0x11b20>
   24604:	vcmpe.f64	d8, d16
   24608:	vmrs	APSR_nzcv, fpscr
   2460c:	bpl	24664 <__assert_fail@plt+0x11bb4>
   24610:	vmov	r0, r1, d8
   24614:	bl	47668 <__assert_fail@plt+0x34bb8>
   24618:	mov	sl, r0
   2461c:	mov	r5, r1
   24620:	mov	r0, #0
   24624:	cmp	r4, #0
   24628:	mov	r2, #0
   2462c:	bne	24654 <__assert_fail@plt+0x11ba4>
   24630:	mov	r0, sl
   24634:	mov	r1, r5
   24638:	bl	474d0 <__assert_fail@plt+0x34a20>
   2463c:	vmov	d16, r0, r1
   24640:	mov	r2, #0
   24644:	mov	r0, #0
   24648:	vcmp.f64	d8, d16
   2464c:	vmrs	APSR_nzcv, fpscr
   24650:	movwne	r0, #1
   24654:	adds	r0, r0, sl
   24658:	adc	r1, r2, r5
   2465c:	bl	474d0 <__assert_fail@plt+0x34a20>
   24660:	vmov	d8, r0, r1
   24664:	vdiv.f64	d16, d8, d9
   24668:	ldr	sl, [sp, #28]
   2466c:	movw	r1, #50004	; 0xc354
   24670:	ldr	r7, [sp, #32]
   24674:	movt	r1, #4
   24678:	mov	r0, sl
   2467c:	vmov	r2, r3, d16
   24680:	bl	1296c <sprintf@plt>
   24684:	mov	r0, sl
   24688:	bl	127bc <strlen@plt>
   2468c:	mov	r2, r0
   24690:	mov	r5, #0
   24694:	sub	r4, r8, r2
   24698:	mov	r1, sl
   2469c:	mov	r0, r4
   246a0:	bl	12474 <memmove@plt>
   246a4:	sub	r5, r8, r5
   246a8:	tst	r7, #4
   246ac:	bne	249cc <__assert_fail@plt+0x11f1c>
   246b0:	tst	r7, #128	; 0x80
   246b4:	beq	24ae4 <__assert_fail@plt+0x12034>
   246b8:	cmn	r6, #1
   246bc:	bgt	247a8 <__assert_fail@plt+0x11cf8>
   246c0:	ldr	r0, [fp, #16]
   246c4:	mov	r6, #0
   246c8:	subs	r0, r0, #2
   246cc:	sbcs	r0, r9, #0
   246d0:	bcc	247a8 <__assert_fail@plt+0x11cf8>
   246d4:	ldr	r0, [sp, #36]	; 0x24
   246d8:	ldr	r1, [fp, #16]
   246dc:	mov	r6, #1
   246e0:	subs	r0, r0, r1
   246e4:	rscs	r0, r9, #0
   246e8:	bcs	247a8 <__assert_fail@plt+0x11cf8>
   246ec:	ldr	r0, [sp, #36]	; 0x24
   246f0:	ldr	r2, [fp, #16]
   246f4:	mov	r6, #2
   246f8:	umull	r1, r0, r0, r0
   246fc:	subs	r2, r1, r2
   24700:	sbcs	r2, r0, r9
   24704:	bcs	247a8 <__assert_fail@plt+0x11cf8>
   24708:	ldr	r3, [sp, #36]	; 0x24
   2470c:	mov	r6, #3
   24710:	umull	r1, r2, r1, r3
   24714:	mla	r2, r0, r3, r2
   24718:	ldr	r0, [fp, #16]
   2471c:	subs	r0, r1, r0
   24720:	sbcs	r0, r2, r9
   24724:	bcs	247a8 <__assert_fail@plt+0x11cf8>
   24728:	ldr	r3, [sp, #36]	; 0x24
   2472c:	mov	r6, #4
   24730:	umull	r0, r1, r1, r3
   24734:	mla	r1, r2, r3, r1
   24738:	ldr	r2, [fp, #16]
   2473c:	subs	r2, r0, r2
   24740:	sbcs	r2, r1, r9
   24744:	bcs	247a8 <__assert_fail@plt+0x11cf8>
   24748:	ldr	r3, [sp, #36]	; 0x24
   2474c:	mov	r6, #5
   24750:	umull	r0, r2, r0, r3
   24754:	mla	r1, r1, r3, r2
   24758:	ldr	r2, [fp, #16]
   2475c:	subs	r2, r0, r2
   24760:	sbcs	r2, r1, r9
   24764:	bcs	247a8 <__assert_fail@plt+0x11cf8>
   24768:	ldr	r3, [sp, #36]	; 0x24
   2476c:	mov	r6, #6
   24770:	umull	r0, r2, r0, r3
   24774:	mla	r1, r1, r3, r2
   24778:	ldr	r2, [fp, #16]
   2477c:	subs	r2, r0, r2
   24780:	sbcs	r2, r1, r9
   24784:	bcs	247a8 <__assert_fail@plt+0x11cf8>
   24788:	ldr	r3, [sp, #36]	; 0x24
   2478c:	mov	r6, #7
   24790:	umull	r0, r2, r0, r3
   24794:	mla	r1, r1, r3, r2
   24798:	ldr	r2, [fp, #16]
   2479c:	subs	r0, r0, r2
   247a0:	sbcs	r0, r1, r9
   247a4:	movwcc	r6, #8
   247a8:	and	r0, r7, #256	; 0x100
   247ac:	tst	r7, #64	; 0x40
   247b0:	orrsne	r1, r6, r0
   247b4:	movne	r1, #32
   247b8:	addne	r8, sl, #648	; 0x288
   247bc:	strbne	r1, [sl, #647]	; 0x287
   247c0:	cmp	r6, #0
   247c4:	beq	247ec <__assert_fail@plt+0x11d3c>
   247c8:	ldr	r1, [sp, #20]
   247cc:	cmp	r1, #0
   247d0:	moveq	r1, #107	; 0x6b
   247d4:	cmpeq	r6, #1
   247d8:	beq	247e8 <__assert_fail@plt+0x11d38>
   247dc:	movw	r1, #50064	; 0xc390
   247e0:	movt	r1, #4
   247e4:	ldrb	r1, [r1, r6]
   247e8:	strb	r1, [r8], #1
   247ec:	cmp	r0, #0
   247f0:	beq	24ae4 <__assert_fail@plt+0x12034>
   247f4:	ldr	r0, [sp, #20]
   247f8:	cmp	r0, #0
   247fc:	cmpne	r6, #0
   24800:	movne	r0, #105	; 0x69
   24804:	strbne	r0, [r8], #1
   24808:	mov	r0, #66	; 0x42
   2480c:	strb	r0, [r8], #1
   24810:	b	24ae4 <__assert_fail@plt+0x12034>
   24814:	ldr	sl, [sp, #28]
   24818:	ldr	r7, [sp, #32]
   2481c:	b	24694 <__assert_fail@plt+0x11be4>
   24820:	ldr	r0, [sp, #24]
   24824:	str	r0, [sp, #4]
   24828:	b	248c0 <__assert_fail@plt+0x11e10>
   2482c:	cmp	r0, #0
   24830:	bne	24874 <__assert_fail@plt+0x11dc4>
   24834:	cmp	r7, #0
   24838:	beq	24874 <__assert_fail@plt+0x11dc4>
   2483c:	adds	r0, sl, #1
   24840:	add	r6, r6, #1
   24844:	mov	r7, #0
   24848:	adc	r1, r9, #0
   2484c:	cmp	r6, #10
   24850:	bne	24874 <__assert_fail@plt+0x11dc4>
   24854:	rsbs	r2, r0, #9
   24858:	mov	r6, #0
   2485c:	mov	sl, r0
   24860:	mov	r9, r1
   24864:	mov	r7, #0
   24868:	rscs	r2, r1, #0
   2486c:	ldr	r2, [sp, #36]	; 0x24
   24870:	bcc	24b00 <__assert_fail@plt+0x12050>
   24874:	ldr	r0, [sp, #32]
   24878:	tst	r0, #8
   2487c:	beq	24894 <__assert_fail@plt+0x11de4>
   24880:	cmp	r6, #0
   24884:	bne	24894 <__assert_fail@plt+0x11de4>
   24888:	ldr	r0, [sp, #24]
   2488c:	str	r0, [sp, #4]
   24890:	b	248bc <__assert_fail@plt+0x11e0c>
   24894:	ldr	r1, [sp, #28]
   24898:	ldr	r2, [sp, #40]	; 0x28
   2489c:	add	r0, r6, #48	; 0x30
   248a0:	strb	r0, [r1, #646]!	; 0x286
   248a4:	sub	r0, r1, r2
   248a8:	ldr	r1, [sp, #8]
   248ac:	str	r0, [sp, #4]
   248b0:	bl	124e0 <memcpy@plt>
   248b4:	ldr	r2, [sp, #36]	; 0x24
   248b8:	mov	r7, #0
   248bc:	mov	r6, #0
   248c0:	ldr	r0, [sp, #44]	; 0x2c
   248c4:	cmp	r0, #0
   248c8:	beq	24908 <__assert_fail@plt+0x11e58>
   248cc:	cmp	r0, #1
   248d0:	bne	248fc <__assert_fail@plt+0x11e4c>
   248d4:	mov	r0, #0
   248d8:	rsbs	r1, r7, #0
   248dc:	and	r2, sl, #1
   248e0:	eor	r1, r2, r1
   248e4:	sbc	r0, r0, #0
   248e8:	ldr	r2, [sp, #36]	; 0x24
   248ec:	orrs	r0, r1, r0
   248f0:	addne	r6, r6, #1
   248f4:	cmp	r6, #5
   248f8:	bgt	24914 <__assert_fail@plt+0x11e64>
   248fc:	ldr	r7, [sp, #28]
   24900:	ldr	r5, [sp, #32]
   24904:	b	24970 <__assert_fail@plt+0x11ec0>
   24908:	add	r0, r6, r7
   2490c:	cmp	r0, #1
   24910:	blt	248fc <__assert_fail@plt+0x11e4c>
   24914:	ldr	r7, [sp, #28]
   24918:	ldr	r5, [sp, #32]
   2491c:	adds	sl, sl, #1
   24920:	adc	r9, r9, #0
   24924:	cmp	r8, #7
   24928:	bgt	24970 <__assert_fail@plt+0x11ec0>
   2492c:	cmp	r4, #0
   24930:	beq	24970 <__assert_fail@plt+0x11ec0>
   24934:	eor	r0, sl, r2
   24938:	orrs	r0, r0, r9
   2493c:	addeq	r8, r8, #1
   24940:	moveq	r9, #0
   24944:	moveq	sl, #1
   24948:	tsteq	r5, #8
   2494c:	bne	24970 <__assert_fail@plt+0x11ec0>
   24950:	ldr	r0, [sp, #4]
   24954:	mov	r1, #48	; 0x30
   24958:	ldr	r2, [sp, #40]	; 0x28
   2495c:	strb	r1, [r0, #-1]!
   24960:	ldr	r1, [sp, #8]
   24964:	sub	r0, r0, r2
   24968:	str	r0, [sp, #4]
   2496c:	bl	124e0 <memcpy@plt>
   24970:	ldr	r4, [sp, #4]
   24974:	mov	r0, sl
   24978:	mov	r1, r9
   2497c:	mov	r2, #10
   24980:	mov	r3, #0
   24984:	bl	47618 <__assert_fail@plt+0x34b68>
   24988:	add	r2, r0, r0, lsl #2
   2498c:	sub	r2, sl, r2, lsl #1
   24990:	orr	r2, r2, #48	; 0x30
   24994:	strb	r2, [r4, #-1]!
   24998:	rsbs	r2, sl, #9
   2499c:	mov	sl, r0
   249a0:	rscs	r2, r9, #0
   249a4:	mov	r9, r1
   249a8:	bcc	24974 <__assert_fail@plt+0x11ec4>
   249ac:	mov	r6, r8
   249b0:	mov	sl, r7
   249b4:	mov	r7, r5
   249b8:	ldr	r9, [fp, #20]
   249bc:	ldr	r8, [sp, #24]
   249c0:	ldr	r5, [sp, #4]
   249c4:	tst	r7, #4
   249c8:	beq	246b0 <__assert_fail@plt+0x11c00>
   249cc:	ldr	r9, [sp, #12]
   249d0:	str	r6, [sp, #8]
   249d4:	sub	r7, r5, r4
   249d8:	mov	r0, r9
   249dc:	bl	127bc <strlen@plt>
   249e0:	str	r0, [sp, #44]	; 0x2c
   249e4:	add	r0, sp, #48	; 0x30
   249e8:	mov	r1, r4
   249ec:	mov	r2, r7
   249f0:	bl	124e0 <memcpy@plt>
   249f4:	ldr	r6, [sp, #16]
   249f8:	add	r0, sp, #48	; 0x30
   249fc:	ldrb	r8, [r6]
   24a00:	cmp	r8, #255	; 0xff
   24a04:	mov	sl, r8
   24a08:	moveq	sl, r7
   24a0c:	cmp	r8, #0
   24a10:	mvneq	sl, #0
   24a14:	cmp	sl, r7
   24a18:	movhi	sl, r7
   24a1c:	sub	r4, r5, sl
   24a20:	sub	r5, r7, sl
   24a24:	mov	r2, sl
   24a28:	add	r1, r0, r5
   24a2c:	mov	r0, r4
   24a30:	bl	124e0 <memcpy@plt>
   24a34:	cmp	r5, #0
   24a38:	beq	24ac8 <__assert_fail@plt+0x12018>
   24a3c:	clz	r0, r8
   24a40:	lsr	r8, r0, #5
   24a44:	ldr	r0, [sp, #44]	; 0x2c
   24a48:	rsb	r0, r0, #0
   24a4c:	str	r0, [sp, #40]	; 0x28
   24a50:	ldr	r0, [sp, #40]	; 0x28
   24a54:	ldr	r2, [sp, #44]	; 0x2c
   24a58:	mov	r1, r9
   24a5c:	add	r4, r4, r0
   24a60:	mov	r0, r4
   24a64:	bl	124e0 <memcpy@plt>
   24a68:	tst	r8, #1
   24a6c:	add	r0, sp, #48	; 0x30
   24a70:	addeq	r6, r6, #1
   24a74:	mov	r8, r6
   24a78:	ldrb	r6, [r6]
   24a7c:	cmp	r6, #255	; 0xff
   24a80:	mov	r7, r6
   24a84:	moveq	r7, r5
   24a88:	cmp	r6, #0
   24a8c:	moveq	r7, sl
   24a90:	cmp	r5, r7
   24a94:	movcc	r7, r5
   24a98:	sub	r5, r5, r7
   24a9c:	sub	r4, r4, r7
   24aa0:	mov	r2, r7
   24aa4:	add	r1, r0, r5
   24aa8:	mov	r0, r4
   24aac:	bl	124e0 <memcpy@plt>
   24ab0:	clz	r0, r6
   24ab4:	mov	r6, r8
   24ab8:	cmp	r5, #0
   24abc:	mov	sl, r7
   24ac0:	lsr	r8, r0, #5
   24ac4:	bne	24a50 <__assert_fail@plt+0x11fa0>
   24ac8:	ldr	r8, [sp, #24]
   24acc:	ldr	sl, [sp, #28]
   24ad0:	ldr	r7, [sp, #32]
   24ad4:	ldr	r9, [fp, #20]
   24ad8:	ldr	r6, [sp, #8]
   24adc:	tst	r7, #128	; 0x80
   24ae0:	bne	246b8 <__assert_fail@plt+0x11c08>
   24ae4:	mov	r0, #0
   24ae8:	strb	r0, [r8]
   24aec:	mov	r0, r4
   24af0:	sub	sp, fp, #48	; 0x30
   24af4:	vpop	{d8-d9}
   24af8:	add	sp, sp, #4
   24afc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   24b00:	ldr	r0, [sp, #24]
   24b04:	mov	r7, #0
   24b08:	mov	sl, #10
   24b0c:	mov	r9, #0
   24b10:	str	r0, [sp, #4]
   24b14:	b	248c0 <__assert_fail@plt+0x11e10>
   24b18:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   24b1c:	add	fp, sp, #24
   24b20:	sub	sp, sp, #8
   24b24:	mov	r4, r2
   24b28:	mov	r8, r1
   24b2c:	cmp	r0, #0
   24b30:	bne	24b5c <__assert_fail@plt+0x120ac>
   24b34:	movw	r0, #39138	; 0x98e2
   24b38:	movt	r0, #4
   24b3c:	bl	126d8 <getenv@plt>
   24b40:	cmp	r0, #0
   24b44:	bne	24b5c <__assert_fail@plt+0x120ac>
   24b48:	movw	r0, #50016	; 0xc360
   24b4c:	movt	r0, #4
   24b50:	bl	126d8 <getenv@plt>
   24b54:	cmp	r0, #0
   24b58:	beq	24c80 <__assert_fail@plt+0x121d0>
   24b5c:	mov	r6, r0
   24b60:	movw	r7, #50088	; 0xc3a8
   24b64:	movw	r1, #50076	; 0xc39c
   24b68:	mov	r3, #4
   24b6c:	ldrb	r5, [r6], #1
   24b70:	movt	r7, #4
   24b74:	movt	r1, #4
   24b78:	mov	r2, r7
   24b7c:	cmp	r5, #39	; 0x27
   24b80:	movne	r6, r0
   24b84:	mov	r0, r6
   24b88:	bl	4647c <__assert_fail@plt+0x339cc>
   24b8c:	sub	r1, r5, #39	; 0x27
   24b90:	cmp	r0, #0
   24b94:	clz	r1, r1
   24b98:	lsr	r1, r1, #5
   24b9c:	lsl	r5, r1, #2
   24ba0:	bmi	24bc8 <__assert_fail@plt+0x12118>
   24ba4:	ldr	r0, [r7, r0, lsl #2]
   24ba8:	mov	r2, #1
   24bac:	mov	r1, #0
   24bb0:	str	r2, [r4]
   24bb4:	str	r1, [r4, #4]
   24bb8:	orr	r1, r0, r5
   24bbc:	mov	r0, #0
   24bc0:	str	r1, [r8]
   24bc4:	b	24bf8 <__assert_fail@plt+0x12148>
   24bc8:	movw	r0, #50026	; 0xc36a
   24bcc:	add	r1, sp, #4
   24bd0:	mov	r2, #0
   24bd4:	mov	r3, r4
   24bd8:	mov	r7, #0
   24bdc:	movt	r0, #4
   24be0:	str	r0, [sp]
   24be4:	mov	r0, r6
   24be8:	bl	2ee78 <__assert_fail@plt+0x1c3c8>
   24bec:	cmp	r0, #0
   24bf0:	beq	24c3c <__assert_fail@plt+0x1218c>
   24bf4:	str	r7, [r8]
   24bf8:	ldrd	r2, [r4]
   24bfc:	orrs	r1, r2, r3
   24c00:	beq	24c0c <__assert_fail@plt+0x1215c>
   24c04:	sub	sp, fp, #24
   24c08:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   24c0c:	movw	r0, #39117	; 0x98cd
   24c10:	movt	r0, #4
   24c14:	bl	126d8 <getenv@plt>
   24c18:	cmp	r0, #0
   24c1c:	mov	r2, #512	; 0x200
   24c20:	mov	r0, #4
   24c24:	mov	r1, #0
   24c28:	movweq	r2, #1024	; 0x400
   24c2c:	str	r2, [r4]
   24c30:	str	r1, [r4, #4]
   24c34:	sub	sp, fp, #24
   24c38:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   24c3c:	ldrb	r0, [r6]
   24c40:	sub	r0, r0, #48	; 0x30
   24c44:	uxtb	r0, r0
   24c48:	cmp	r0, #10
   24c4c:	bcc	24c78 <__assert_fail@plt+0x121c8>
   24c50:	ldr	r0, [sp, #4]
   24c54:	cmp	r0, r6
   24c58:	beq	24ca8 <__assert_fail@plt+0x121f8>
   24c5c:	ldrb	r2, [r6, #1]
   24c60:	add	r1, r6, #1
   24c64:	mov	r6, r1
   24c68:	sub	r2, r2, #48	; 0x30
   24c6c:	uxtb	r2, r2
   24c70:	cmp	r2, #10
   24c74:	bcs	24c54 <__assert_fail@plt+0x121a4>
   24c78:	mov	r1, r5
   24c7c:	b	24bbc <__assert_fail@plt+0x1210c>
   24c80:	movw	r0, #39117	; 0x98cd
   24c84:	movt	r0, #4
   24c88:	bl	126d8 <getenv@plt>
   24c8c:	cmp	r0, #0
   24c90:	mov	r2, #512	; 0x200
   24c94:	mov	r1, #0
   24c98:	movweq	r2, #1024	; 0x400
   24c9c:	str	r2, [r4]
   24ca0:	str	r1, [r4, #4]
   24ca4:	b	24bbc <__assert_fail@plt+0x1210c>
   24ca8:	ldrb	r2, [r0, #-1]
   24cac:	orr	r1, r5, #384	; 0x180
   24cb0:	cmp	r2, #66	; 0x42
   24cb4:	mov	r2, r1
   24cb8:	orrne	r2, r5, #128	; 0x80
   24cbc:	bne	24cd0 <__assert_fail@plt+0x12220>
   24cc0:	ldrb	r0, [r0, #-2]
   24cc4:	cmp	r0, #105	; 0x69
   24cc8:	orreq	r1, r2, #32
   24ccc:	b	24bbc <__assert_fail@plt+0x1210c>
   24cd0:	orr	r1, r2, #32
   24cd4:	b	24bbc <__assert_fail@plt+0x1210c>
   24cd8:	push	{r4, r5, r6, r7, fp, lr}
   24cdc:	add	fp, sp, #16
   24ce0:	movw	r7, #60668	; 0xecfc
   24ce4:	mov	r4, r0
   24ce8:	movt	r7, #5
   24cec:	ldr	r5, [r7]
   24cf0:	cmp	r5, #0
   24cf4:	beq	24d10 <__assert_fail@plt+0x12260>
   24cf8:	ldr	r0, [r5]
   24cfc:	cmp	r0, r4
   24d00:	beq	24d64 <__assert_fail@plt+0x122b4>
   24d04:	ldr	r5, [r5, #4]
   24d08:	cmp	r5, #0
   24d0c:	bne	24cf8 <__assert_fail@plt+0x12248>
   24d10:	mov	r0, r4
   24d14:	bl	12414 <getpwuid@plt>
   24d18:	cmp	r0, #0
   24d1c:	beq	24d28 <__assert_fail@plt+0x12278>
   24d20:	ldr	r6, [r0]
   24d24:	b	24d30 <__assert_fail@plt+0x12280>
   24d28:	movw	r6, #38711	; 0x9737
   24d2c:	movt	r6, #4
   24d30:	mov	r0, r6
   24d34:	bl	127bc <strlen@plt>
   24d38:	add	r0, r0, #12
   24d3c:	bic	r0, r0, #3
   24d40:	bl	2e038 <__assert_fail@plt+0x1b588>
   24d44:	mov	r5, r0
   24d48:	str	r4, [r0]
   24d4c:	add	r0, r0, #8
   24d50:	mov	r1, r6
   24d54:	bl	12660 <strcpy@plt>
   24d58:	ldr	r0, [r7]
   24d5c:	str	r5, [r7]
   24d60:	str	r0, [r5, #4]
   24d64:	ldrb	r0, [r5, #8]!
   24d68:	cmp	r0, #0
   24d6c:	moveq	r5, r0
   24d70:	mov	r0, r5
   24d74:	pop	{r4, r5, r6, r7, fp, pc}
   24d78:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   24d7c:	add	fp, sp, #24
   24d80:	movw	r8, #60668	; 0xecfc
   24d84:	mov	r4, r0
   24d88:	movt	r8, #5
   24d8c:	ldr	r5, [r8]
   24d90:	cmp	r5, #0
   24d94:	beq	24dd4 <__assert_fail@plt+0x12324>
   24d98:	ldrb	r6, [r4]
   24d9c:	b	24dac <__assert_fail@plt+0x122fc>
   24da0:	ldr	r5, [r5, #4]
   24da4:	cmp	r5, #0
   24da8:	beq	24dd4 <__assert_fail@plt+0x12324>
   24dac:	mov	r0, r5
   24db0:	ldrb	r1, [r0, #8]!
   24db4:	cmp	r1, r6
   24db8:	bne	24da0 <__assert_fail@plt+0x122f0>
   24dbc:	mov	r1, r4
   24dc0:	bl	123fc <strcmp@plt>
   24dc4:	cmp	r0, #0
   24dc8:	bne	24da0 <__assert_fail@plt+0x122f0>
   24dcc:	mov	r0, r5
   24dd0:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   24dd4:	movw	r7, #60672	; 0xed00
   24dd8:	movt	r7, #5
   24ddc:	ldr	r5, [r7]
   24de0:	cmp	r5, #0
   24de4:	beq	24e20 <__assert_fail@plt+0x12370>
   24de8:	ldrb	r6, [r4]
   24dec:	b	24dfc <__assert_fail@plt+0x1234c>
   24df0:	ldr	r5, [r5, #4]
   24df4:	cmp	r5, #0
   24df8:	beq	24e20 <__assert_fail@plt+0x12370>
   24dfc:	mov	r0, r5
   24e00:	ldrb	r1, [r0, #8]!
   24e04:	cmp	r1, r6
   24e08:	bne	24df0 <__assert_fail@plt+0x12340>
   24e0c:	mov	r1, r4
   24e10:	bl	123fc <strcmp@plt>
   24e14:	cmp	r0, #0
   24e18:	bne	24df0 <__assert_fail@plt+0x12340>
   24e1c:	b	24e7c <__assert_fail@plt+0x123cc>
   24e20:	mov	r0, r4
   24e24:	bl	123d8 <getpwnam@plt>
   24e28:	mov	r6, r0
   24e2c:	mov	r0, r4
   24e30:	bl	127bc <strlen@plt>
   24e34:	add	r0, r0, #12
   24e38:	bic	r0, r0, #3
   24e3c:	bl	2e038 <__assert_fail@plt+0x1b588>
   24e40:	mov	r5, r0
   24e44:	add	r0, r0, #8
   24e48:	mov	r1, r4
   24e4c:	bl	12660 <strcpy@plt>
   24e50:	cmp	r6, #0
   24e54:	beq	24e70 <__assert_fail@plt+0x123c0>
   24e58:	ldr	r0, [r6, #8]
   24e5c:	ldr	r1, [r8]
   24e60:	str	r5, [r8]
   24e64:	stm	r5, {r0, r1}
   24e68:	mov	r0, r5
   24e6c:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   24e70:	ldr	r0, [r7]
   24e74:	str	r5, [r7]
   24e78:	str	r0, [r5, #4]
   24e7c:	mov	r5, #0
   24e80:	mov	r0, r5
   24e84:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   24e88:	push	{r4, r5, r6, r7, fp, lr}
   24e8c:	add	fp, sp, #16
   24e90:	movw	r7, #60676	; 0xed04
   24e94:	mov	r4, r0
   24e98:	movt	r7, #5
   24e9c:	ldr	r5, [r7]
   24ea0:	cmp	r5, #0
   24ea4:	beq	24ec0 <__assert_fail@plt+0x12410>
   24ea8:	ldr	r0, [r5]
   24eac:	cmp	r0, r4
   24eb0:	beq	24f14 <__assert_fail@plt+0x12464>
   24eb4:	ldr	r5, [r5, #4]
   24eb8:	cmp	r5, #0
   24ebc:	bne	24ea8 <__assert_fail@plt+0x123f8>
   24ec0:	mov	r0, r4
   24ec4:	bl	12a8c <getgrgid@plt>
   24ec8:	cmp	r0, #0
   24ecc:	beq	24ed8 <__assert_fail@plt+0x12428>
   24ed0:	ldr	r6, [r0]
   24ed4:	b	24ee0 <__assert_fail@plt+0x12430>
   24ed8:	movw	r6, #38711	; 0x9737
   24edc:	movt	r6, #4
   24ee0:	mov	r0, r6
   24ee4:	bl	127bc <strlen@plt>
   24ee8:	add	r0, r0, #12
   24eec:	bic	r0, r0, #3
   24ef0:	bl	2e038 <__assert_fail@plt+0x1b588>
   24ef4:	mov	r5, r0
   24ef8:	str	r4, [r0]
   24efc:	add	r0, r0, #8
   24f00:	mov	r1, r6
   24f04:	bl	12660 <strcpy@plt>
   24f08:	ldr	r0, [r7]
   24f0c:	str	r5, [r7]
   24f10:	str	r0, [r5, #4]
   24f14:	ldrb	r0, [r5, #8]!
   24f18:	cmp	r0, #0
   24f1c:	moveq	r5, r0
   24f20:	mov	r0, r5
   24f24:	pop	{r4, r5, r6, r7, fp, pc}
   24f28:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   24f2c:	add	fp, sp, #24
   24f30:	movw	r8, #60676	; 0xed04
   24f34:	mov	r4, r0
   24f38:	movt	r8, #5
   24f3c:	ldr	r5, [r8]
   24f40:	cmp	r5, #0
   24f44:	beq	24f84 <__assert_fail@plt+0x124d4>
   24f48:	ldrb	r6, [r4]
   24f4c:	b	24f5c <__assert_fail@plt+0x124ac>
   24f50:	ldr	r5, [r5, #4]
   24f54:	cmp	r5, #0
   24f58:	beq	24f84 <__assert_fail@plt+0x124d4>
   24f5c:	mov	r0, r5
   24f60:	ldrb	r1, [r0, #8]!
   24f64:	cmp	r1, r6
   24f68:	bne	24f50 <__assert_fail@plt+0x124a0>
   24f6c:	mov	r1, r4
   24f70:	bl	123fc <strcmp@plt>
   24f74:	cmp	r0, #0
   24f78:	bne	24f50 <__assert_fail@plt+0x124a0>
   24f7c:	mov	r0, r5
   24f80:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   24f84:	movw	r7, #60680	; 0xed08
   24f88:	movt	r7, #5
   24f8c:	ldr	r5, [r7]
   24f90:	cmp	r5, #0
   24f94:	beq	24fd0 <__assert_fail@plt+0x12520>
   24f98:	ldrb	r6, [r4]
   24f9c:	b	24fac <__assert_fail@plt+0x124fc>
   24fa0:	ldr	r5, [r5, #4]
   24fa4:	cmp	r5, #0
   24fa8:	beq	24fd0 <__assert_fail@plt+0x12520>
   24fac:	mov	r0, r5
   24fb0:	ldrb	r1, [r0, #8]!
   24fb4:	cmp	r1, r6
   24fb8:	bne	24fa0 <__assert_fail@plt+0x124f0>
   24fbc:	mov	r1, r4
   24fc0:	bl	123fc <strcmp@plt>
   24fc4:	cmp	r0, #0
   24fc8:	bne	24fa0 <__assert_fail@plt+0x124f0>
   24fcc:	b	2502c <__assert_fail@plt+0x1257c>
   24fd0:	mov	r0, r4
   24fd4:	bl	12a98 <getgrnam@plt>
   24fd8:	mov	r6, r0
   24fdc:	mov	r0, r4
   24fe0:	bl	127bc <strlen@plt>
   24fe4:	add	r0, r0, #12
   24fe8:	bic	r0, r0, #3
   24fec:	bl	2e038 <__assert_fail@plt+0x1b588>
   24ff0:	mov	r5, r0
   24ff4:	add	r0, r0, #8
   24ff8:	mov	r1, r4
   24ffc:	bl	12660 <strcpy@plt>
   25000:	cmp	r6, #0
   25004:	beq	25020 <__assert_fail@plt+0x12570>
   25008:	ldr	r0, [r6, #8]
   2500c:	ldr	r1, [r8]
   25010:	str	r5, [r8]
   25014:	stm	r5, {r0, r1}
   25018:	mov	r0, r5
   2501c:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   25020:	ldr	r0, [r7]
   25024:	str	r5, [r7]
   25028:	str	r0, [r5, #4]
   2502c:	mov	r5, #0
   25030:	mov	r0, r5
   25034:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   25038:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2503c:	add	fp, sp, #28
   25040:	sub	sp, sp, #308	; 0x134
   25044:	mov	r6, r1
   25048:	mov	sl, r0
   2504c:	bl	12648 <__ctype_get_mb_cur_max@plt>
   25050:	cmp	r0, #2
   25054:	bcc	25408 <__assert_fail@plt+0x12958>
   25058:	mov	r4, #0
   2505c:	sub	r0, fp, #88	; 0x58
   25060:	str	r4, [fp, #-80]	; 0xffffffb0
   25064:	str	r4, [fp, #-84]	; 0xffffffac
   25068:	strb	r4, [fp, #-76]	; 0xffffffb4
   2506c:	strb	r4, [fp, #-88]	; 0xffffffa8
   25070:	str	r6, [fp, #-72]	; 0xffffffb8
   25074:	bl	25e30 <__assert_fail@plt+0x13380>
   25078:	ldrb	r0, [fp, #-64]	; 0xffffffc0
   2507c:	cmp	r0, #0
   25080:	beq	25090 <__assert_fail@plt+0x125e0>
   25084:	ldr	r0, [fp, #-60]	; 0xffffffc4
   25088:	cmp	r0, #0
   2508c:	beq	25524 <__assert_fail@plt+0x12a74>
   25090:	add	r0, sp, #136	; 0x88
   25094:	str	r4, [fp, #-136]	; 0xffffff78
   25098:	str	r4, [fp, #-140]	; 0xffffff74
   2509c:	str	r6, [fp, #-128]	; 0xffffff80
   250a0:	strb	r4, [fp, #-132]	; 0xffffff7c
   250a4:	str	r6, [sp, #16]
   250a8:	strb	r4, [fp, #-144]	; 0xffffff70
   250ac:	str	r4, [sp, #144]	; 0x90
   250b0:	str	r4, [sp, #140]	; 0x8c
   250b4:	str	sl, [sp, #152]	; 0x98
   250b8:	strb	r4, [sp, #148]	; 0x94
   250bc:	strb	r4, [sp, #136]	; 0x88
   250c0:	bl	25e30 <__assert_fail@plt+0x13380>
   250c4:	ldrb	r0, [sp, #160]	; 0xa0
   250c8:	cmp	r0, #0
   250cc:	beq	250dc <__assert_fail@plt+0x1262c>
   250d0:	ldr	r0, [sp, #164]	; 0xa4
   250d4:	cmp	r0, #0
   250d8:	beq	25530 <__assert_fail@plt+0x12a80>
   250dc:	add	r0, sp, #24
   250e0:	mov	r8, #1
   250e4:	mov	r6, #0
   250e8:	sub	r5, fp, #144	; 0x90
   250ec:	mov	r1, #0
   250f0:	mov	r7, #0
   250f4:	mov	r9, #0
   250f8:	add	r0, r0, #4
   250fc:	str	r0, [sp, #12]
   25100:	add	r0, sp, #136	; 0x88
   25104:	add	r0, r0, #16
   25108:	str	r0, [sp, #8]
   2510c:	add	r0, r9, r9, lsl #2
   25110:	mov	r4, r7
   25114:	cmp	r7, r0
   25118:	bcc	251c4 <__assert_fail@plt+0x12714>
   2511c:	tst	r8, #1
   25120:	beq	251c4 <__assert_fail@plt+0x12714>
   25124:	cmp	r9, #10
   25128:	bcc	251c4 <__assert_fail@plt+0x12714>
   2512c:	subs	r0, r4, r1
   25130:	beq	25178 <__assert_fail@plt+0x126c8>
   25134:	sub	r7, r1, r4
   25138:	b	25158 <__assert_fail@plt+0x126a8>
   2513c:	strb	r6, [fp, #-132]	; 0xffffff7c
   25140:	adds	r7, r7, #1
   25144:	ldr	r0, [fp, #-128]	; 0xffffff80
   25148:	ldr	r1, [fp, #-124]	; 0xffffff84
   2514c:	add	r0, r0, r1
   25150:	str	r0, [fp, #-128]	; 0xffffff80
   25154:	bcs	25178 <__assert_fail@plt+0x126c8>
   25158:	mov	r0, r5
   2515c:	bl	25e30 <__assert_fail@plt+0x13380>
   25160:	ldrb	r0, [fp, #-120]	; 0xffffff88
   25164:	cmp	r0, #0
   25168:	beq	2513c <__assert_fail@plt+0x1268c>
   2516c:	ldr	r0, [fp, #-116]	; 0xffffff8c
   25170:	cmp	r0, #0
   25174:	bne	2513c <__assert_fail@plt+0x1268c>
   25178:	mov	r0, r5
   2517c:	bl	25e30 <__assert_fail@plt+0x13380>
   25180:	ldrb	r0, [fp, #-120]	; 0xffffff88
   25184:	cmp	r0, #0
   25188:	beq	251c0 <__assert_fail@plt+0x12710>
   2518c:	ldr	r0, [fp, #-116]	; 0xffffff8c
   25190:	mov	r1, r4
   25194:	cmp	r0, #0
   25198:	bne	251c4 <__assert_fail@plt+0x12714>
   2519c:	ldr	r1, [sp, #16]
   251a0:	mov	r0, sl
   251a4:	add	r2, sp, #80	; 0x50
   251a8:	bl	25558 <__assert_fail@plt+0x12aa8>
   251ac:	mov	r8, #0
   251b0:	cmp	r0, #0
   251b4:	mov	r1, r4
   251b8:	beq	251c4 <__assert_fail@plt+0x12714>
   251bc:	b	2554c <__assert_fail@plt+0x12a9c>
   251c0:	mov	r1, r4
   251c4:	ldrb	r0, [sp, #160]	; 0xa0
   251c8:	add	r7, r4, #1
   251cc:	str	r1, [sp, #20]
   251d0:	cmp	r0, #0
   251d4:	ldrbne	r0, [fp, #-64]	; 0xffffffc0
   251d8:	cmpne	r0, #0
   251dc:	bne	25208 <__assert_fail@plt+0x12758>
   251e0:	ldr	r2, [sp, #156]	; 0x9c
   251e4:	ldr	r0, [fp, #-68]	; 0xffffffbc
   251e8:	cmp	r2, r0
   251ec:	bne	253c4 <__assert_fail@plt+0x12914>
   251f0:	ldr	r1, [fp, #-72]	; 0xffffffb8
   251f4:	ldr	r0, [sp, #152]	; 0x98
   251f8:	bl	127a4 <bcmp@plt>
   251fc:	cmp	r0, #0
   25200:	bne	253c4 <__assert_fail@plt+0x12914>
   25204:	b	25218 <__assert_fail@plt+0x12768>
   25208:	ldr	r0, [fp, #-60]	; 0xffffffc4
   2520c:	ldr	r1, [sp, #164]	; 0xa4
   25210:	cmp	r1, r0
   25214:	bne	253c4 <__assert_fail@plt+0x12914>
   25218:	add	r2, sp, #136	; 0x88
   2521c:	mov	r1, #48	; 0x30
   25220:	add	r3, sp, #80	; 0x50
   25224:	str	r9, [sp]
   25228:	str	r8, [sp, #4]
   2522c:	mov	r0, r2
   25230:	add	r2, r2, #32
   25234:	vld1.64	{d16-d17}, [r0], r1
   25238:	ldr	r1, [sp, #8]
   2523c:	vld1.64	{d20-d21}, [r2]
   25240:	vldr	d22, [r0]
   25244:	add	r0, r3, #32
   25248:	vld1.64	{d18-d19}, [r1]
   2524c:	add	r1, r3, #16
   25250:	vst1.64	{d20-d21}, [r0]
   25254:	mov	r0, r3
   25258:	vst1.64	{d18-d19}, [r1]
   2525c:	mov	r1, #12
   25260:	vst1.64	{d16-d17}, [r0], r1
   25264:	strb	r6, [r0]
   25268:	ldr	r0, [sp, #16]
   2526c:	vstr	d22, [sp, #128]	; 0x80
   25270:	ldr	r1, [sp, #100]	; 0x64
   25274:	str	r0, [sp, #40]	; 0x28
   25278:	ldr	r0, [sp, #96]	; 0x60
   2527c:	strb	r6, [sp, #24]
   25280:	add	r0, r0, r1
   25284:	str	r0, [sp, #96]	; 0x60
   25288:	ldr	r0, [sp, #12]
   2528c:	str	r6, [r0]
   25290:	str	r6, [r0, #4]
   25294:	add	r0, sp, #24
   25298:	strb	r6, [sp, #36]	; 0x24
   2529c:	bl	25e30 <__assert_fail@plt+0x13380>
   252a0:	ldrb	r0, [sp, #48]	; 0x30
   252a4:	cmp	r0, #0
   252a8:	beq	252b8 <__assert_fail@plt+0x12808>
   252ac:	ldr	r0, [sp, #52]	; 0x34
   252b0:	cmp	r0, #0
   252b4:	beq	25554 <__assert_fail@plt+0x12aa4>
   252b8:	strb	r6, [sp, #36]	; 0x24
   252bc:	ldr	r0, [sp, #40]	; 0x28
   252c0:	ldr	r1, [sp, #44]	; 0x2c
   252c4:	add	r0, r0, r1
   252c8:	str	r0, [sp, #40]	; 0x28
   252cc:	add	r0, sp, #24
   252d0:	bl	25e30 <__assert_fail@plt+0x13380>
   252d4:	ldrb	r0, [sp, #48]	; 0x30
   252d8:	cmp	r0, #0
   252dc:	beq	252ec <__assert_fail@plt+0x1283c>
   252e0:	ldr	r0, [sp, #52]	; 0x34
   252e4:	cmp	r0, #0
   252e8:	beq	2553c <__assert_fail@plt+0x12a8c>
   252ec:	add	r7, r4, #2
   252f0:	add	r0, sp, #80	; 0x50
   252f4:	bl	25e30 <__assert_fail@plt+0x13380>
   252f8:	ldr	r0, [sp, #108]	; 0x6c
   252fc:	ldrb	r1, [sp, #104]	; 0x68
   25300:	cmp	r0, #0
   25304:	bne	25310 <__assert_fail@plt+0x12860>
   25308:	cmp	r1, #0
   2530c:	bne	2552c <__assert_fail@plt+0x12a7c>
   25310:	cmp	r1, #0
   25314:	ldrbne	r1, [sp, #48]	; 0x30
   25318:	cmpne	r1, #0
   2531c:	bne	25358 <__assert_fail@plt+0x128a8>
   25320:	ldr	r4, [sp, #100]	; 0x64
   25324:	ldr	r0, [sp, #44]	; 0x2c
   25328:	cmp	r4, r0
   2532c:	bne	253b8 <__assert_fail@plt+0x12908>
   25330:	ldr	r8, [sp, #40]	; 0x28
   25334:	ldr	r9, [sp, #96]	; 0x60
   25338:	mov	r2, r4
   2533c:	mov	r0, r9
   25340:	mov	r1, r8
   25344:	bl	127a4 <bcmp@plt>
   25348:	cmp	r0, #0
   2534c:	mov	r0, r4
   25350:	beq	25374 <__assert_fail@plt+0x128c4>
   25354:	b	253b8 <__assert_fail@plt+0x12908>
   25358:	ldr	r1, [sp, #52]	; 0x34
   2535c:	cmp	r0, r1
   25360:	bne	253b8 <__assert_fail@plt+0x12908>
   25364:	ldr	r8, [sp, #40]	; 0x28
   25368:	ldr	r4, [sp, #44]	; 0x2c
   2536c:	ldr	r9, [sp, #96]	; 0x60
   25370:	ldr	r0, [sp, #100]	; 0x64
   25374:	mov	r1, #0
   25378:	add	r0, r9, r0
   2537c:	strb	r1, [sp, #92]	; 0x5c
   25380:	str	r0, [sp, #96]	; 0x60
   25384:	add	r0, r8, r4
   25388:	strb	r1, [sp, #36]	; 0x24
   2538c:	str	r0, [sp, #40]	; 0x28
   25390:	add	r0, sp, #24
   25394:	bl	25e30 <__assert_fail@plt+0x13380>
   25398:	ldrb	r0, [sp, #48]	; 0x30
   2539c:	add	r7, r7, #1
   253a0:	cmp	r0, #0
   253a4:	beq	252f0 <__assert_fail@plt+0x12840>
   253a8:	ldr	r0, [sp, #52]	; 0x34
   253ac:	cmp	r0, #0
   253b0:	bne	252f0 <__assert_fail@plt+0x12840>
   253b4:	b	2553c <__assert_fail@plt+0x12a8c>
   253b8:	ldr	r8, [sp, #4]
   253bc:	ldr	r9, [sp]
   253c0:	mov	r6, #0
   253c4:	mov	r4, #0
   253c8:	add	r9, r9, #1
   253cc:	strb	r4, [sp, #148]	; 0x94
   253d0:	ldr	r0, [sp, #152]	; 0x98
   253d4:	ldr	r1, [sp, #156]	; 0x9c
   253d8:	add	r0, r0, r1
   253dc:	str	r0, [sp, #152]	; 0x98
   253e0:	add	r0, sp, #136	; 0x88
   253e4:	bl	25e30 <__assert_fail@plt+0x13380>
   253e8:	ldrb	r0, [sp, #160]	; 0xa0
   253ec:	ldr	r1, [sp, #20]
   253f0:	cmp	r0, #0
   253f4:	beq	2510c <__assert_fail@plt+0x1265c>
   253f8:	ldr	r0, [sp, #164]	; 0xa4
   253fc:	cmp	r0, #0
   25400:	bne	2510c <__assert_fail@plt+0x1265c>
   25404:	b	25530 <__assert_fail@plt+0x12a80>
   25408:	ldrb	r5, [r6]
   2540c:	cmp	r5, #0
   25410:	beq	25524 <__assert_fail@plt+0x12a74>
   25414:	ldrb	r9, [sl]
   25418:	cmp	r9, #0
   2541c:	beq	2552c <__assert_fail@plt+0x12a7c>
   25420:	mov	lr, #1
   25424:	mov	ip, #0
   25428:	mov	r3, r6
   2542c:	mov	r7, #0
   25430:	mov	r8, #0
   25434:	add	r0, r8, r8, lsl #2
   25438:	cmp	r7, r0
   2543c:	bcc	254cc <__assert_fail@plt+0x12a1c>
   25440:	tst	lr, #1
   25444:	beq	254cc <__assert_fail@plt+0x12a1c>
   25448:	cmp	r8, #10
   2544c:	bcc	254cc <__assert_fail@plt+0x12a1c>
   25450:	cmp	r3, #0
   25454:	beq	25494 <__assert_fail@plt+0x129e4>
   25458:	sub	r1, r7, ip
   2545c:	mov	r0, r3
   25460:	str	r7, [sp, #20]
   25464:	mov	r7, r5
   25468:	mov	r4, lr
   2546c:	mov	r5, r3
   25470:	bl	128c4 <strnlen@plt>
   25474:	mov	r3, r5
   25478:	mov	r5, r7
   2547c:	ldr	r7, [sp, #20]
   25480:	mov	lr, r4
   25484:	ldrb	r0, [r3, r0]!
   25488:	mov	ip, r7
   2548c:	cmp	r0, #0
   25490:	bne	254cc <__assert_fail@plt+0x12a1c>
   25494:	mov	r0, r6
   25498:	mov	r4, ip
   2549c:	bl	127bc <strlen@plt>
   254a0:	mov	r2, r0
   254a4:	mov	r0, sl
   254a8:	mov	r1, r6
   254ac:	sub	r3, fp, #88	; 0x58
   254b0:	bl	25968 <__assert_fail@plt+0x12eb8>
   254b4:	cmp	r0, #0
   254b8:	bne	25544 <__assert_fail@plt+0x12a94>
   254bc:	ldrb	r9, [sl]
   254c0:	mov	lr, #0
   254c4:	mov	r3, #0
   254c8:	mov	ip, r4
   254cc:	uxtb	r0, r9
   254d0:	cmp	r0, r5
   254d4:	bne	25508 <__assert_fail@plt+0x12a58>
   254d8:	mov	r0, #1
   254dc:	ldrb	r1, [r6, r0]
   254e0:	cmp	r1, #0
   254e4:	beq	25524 <__assert_fail@plt+0x12a74>
   254e8:	ldrb	r2, [sl, r0]
   254ec:	cmp	r2, #0
   254f0:	beq	2552c <__assert_fail@plt+0x12a7c>
   254f4:	add	r0, r0, #1
   254f8:	cmp	r2, r1
   254fc:	beq	254dc <__assert_fail@plt+0x12a2c>
   25500:	add	r7, r7, r0
   25504:	b	2550c <__assert_fail@plt+0x12a5c>
   25508:	add	r7, r7, #1
   2550c:	ldrb	r9, [sl, #1]!
   25510:	add	r8, r8, #1
   25514:	mov	r4, #0
   25518:	cmp	r9, #0
   2551c:	bne	25434 <__assert_fail@plt+0x12984>
   25520:	b	25530 <__assert_fail@plt+0x12a80>
   25524:	mov	r4, sl
   25528:	b	25530 <__assert_fail@plt+0x12a80>
   2552c:	mov	r4, #0
   25530:	mov	r0, r4
   25534:	sub	sp, fp, #28
   25538:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2553c:	ldr	r4, [sp, #152]	; 0x98
   25540:	b	25530 <__assert_fail@plt+0x12a80>
   25544:	ldr	r4, [fp, #-88]	; 0xffffffa8
   25548:	b	25530 <__assert_fail@plt+0x12a80>
   2554c:	ldr	r4, [sp, #80]	; 0x50
   25550:	b	25530 <__assert_fail@plt+0x12a80>
   25554:	bl	12a5c <abort@plt>
   25558:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2555c:	add	fp, sp, #28
   25560:	sub	sp, sp, #132	; 0x84
   25564:	mov	r4, r0
   25568:	mov	r0, r1
   2556c:	mov	r8, r2
   25570:	mov	r7, r1
   25574:	bl	46fd0 <__assert_fail@plt+0x34520>
   25578:	mov	sl, r0
   2557c:	movw	r0, #47662	; 0xba2e
   25580:	mov	r5, #0
   25584:	movt	r0, #744	; 0x2e8
   25588:	cmp	sl, r0
   2558c:	bhi	25958 <__assert_fail@plt+0x12ea8>
   25590:	mov	r0, #44	; 0x2c
   25594:	mul	r0, sl, r0
   25598:	cmp	r0, #4016	; 0xfb0
   2559c:	bhi	255c4 <__assert_fail@plt+0x12b14>
   255a0:	add	r0, r0, #22
   255a4:	bic	r0, r0, #7
   255a8:	sub	r0, sp, r0
   255ac:	add	r1, r0, #15
   255b0:	bic	r9, r1, #15
   255b4:	mov	sp, r0
   255b8:	cmp	r9, #0
   255bc:	bne	255d4 <__assert_fail@plt+0x12b24>
   255c0:	b	25958 <__assert_fail@plt+0x12ea8>
   255c4:	bl	46e84 <__assert_fail@plt+0x343d4>
   255c8:	mov	r9, r0
   255cc:	cmp	r9, #0
   255d0:	beq	25958 <__assert_fail@plt+0x12ea8>
   255d4:	sub	r6, fp, #88	; 0x58
   255d8:	str	r4, [fp, #-160]	; 0xffffff60
   255dc:	mov	r4, #0
   255e0:	mov	r0, r6
   255e4:	str	r4, [fp, #-80]	; 0xffffffb0
   255e8:	str	r4, [fp, #-84]	; 0xffffffac
   255ec:	strb	r4, [fp, #-76]	; 0xffffffb4
   255f0:	strb	r4, [fp, #-88]	; 0xffffffa8
   255f4:	str	r7, [fp, #-72]	; 0xffffffb8
   255f8:	bl	25e30 <__assert_fail@plt+0x13380>
   255fc:	add	r0, sl, sl, lsl #2
   25600:	add	r3, r9, r0, lsl #3
   25604:	ldrb	r0, [fp, #-64]	; 0xffffffc0
   25608:	str	r3, [fp, #-148]	; 0xffffff6c
   2560c:	cmp	r0, #0
   25610:	beq	25620 <__assert_fail@plt+0x12b70>
   25614:	ldr	r0, [fp, #-60]	; 0xffffffc4
   25618:	cmp	r0, #0
   2561c:	beq	256a4 <__assert_fail@plt+0x12bf4>
   25620:	add	r7, r9, #16
   25624:	add	r5, r6, #32
   25628:	ldr	r0, [fp, #-72]	; 0xffffffb8
   2562c:	cmp	r0, r5
   25630:	bne	25648 <__assert_fail@plt+0x12b98>
   25634:	ldr	r2, [fp, #-68]	; 0xffffffbc
   25638:	mov	r0, r7
   2563c:	mov	r1, r5
   25640:	bl	124e0 <memcpy@plt>
   25644:	mov	r0, r7
   25648:	str	r0, [r7, #-16]
   2564c:	ldr	r0, [fp, #-68]	; 0xffffffbc
   25650:	str	r0, [r7, #-12]
   25654:	ldrb	r0, [fp, #-64]	; 0xffffffc0
   25658:	strb	r0, [r7, #-8]
   2565c:	cmp	r0, #0
   25660:	ldrne	r0, [fp, #-60]	; 0xffffffc4
   25664:	strne	r0, [r7, #-4]
   25668:	strb	r4, [fp, #-76]	; 0xffffffb4
   2566c:	ldr	r0, [fp, #-72]	; 0xffffffb8
   25670:	ldr	r1, [fp, #-68]	; 0xffffffbc
   25674:	add	r0, r0, r1
   25678:	str	r0, [fp, #-72]	; 0xffffffb8
   2567c:	mov	r0, r6
   25680:	bl	25e30 <__assert_fail@plt+0x13380>
   25684:	ldrb	r1, [fp, #-64]	; 0xffffffc0
   25688:	ldr	r0, [fp, #-60]	; 0xffffffc4
   2568c:	ldr	r3, [fp, #-148]	; 0xffffff6c
   25690:	add	r7, r7, #40	; 0x28
   25694:	cmp	r1, #0
   25698:	beq	25628 <__assert_fail@plt+0x12b78>
   2569c:	cmp	r0, #0
   256a0:	bne	25628 <__assert_fail@plt+0x12b78>
   256a4:	mov	r0, #1
   256a8:	cmp	sl, #3
   256ac:	str	r8, [fp, #-156]	; 0xffffff64
   256b0:	str	sl, [fp, #-152]	; 0xffffff68
   256b4:	str	r0, [r3, #4]
   256b8:	bcc	25784 <__assert_fail@plt+0x12cd4>
   256bc:	mov	r4, #2
   256c0:	mov	r5, #0
   256c4:	b	256e4 <__assert_fail@plt+0x12c34>
   256c8:	mov	r5, #0
   256cc:	mov	r0, r4
   256d0:	str	r0, [r3, r4, lsl #2]
   256d4:	ldr	r0, [fp, #-152]	; 0xffffff68
   256d8:	add	r4, r4, #1
   256dc:	cmp	r4, r0
   256e0:	beq	25784 <__assert_fail@plt+0x12cd4>
   256e4:	add	r0, r4, r4, lsl #2
   256e8:	add	r0, r9, r0, lsl #3
   256ec:	ldrb	r8, [r0, #-32]	; 0xffffffe0
   256f0:	sub	sl, r0, #40	; 0x28
   256f4:	sub	r6, r0, #36	; 0x24
   256f8:	sub	r7, r0, #28
   256fc:	cmp	r8, #0
   25700:	beq	2572c <__assert_fail@plt+0x12c7c>
   25704:	add	r0, r5, r5, lsl #2
   25708:	add	r0, r9, r0, lsl #3
   2570c:	ldrb	r1, [r0, #8]
   25710:	cmp	r1, #0
   25714:	beq	2572c <__assert_fail@plt+0x12c7c>
   25718:	ldr	r0, [r0, #12]
   2571c:	ldr	r1, [r7]
   25720:	cmp	r1, r0
   25724:	bne	2575c <__assert_fail@plt+0x12cac>
   25728:	b	25778 <__assert_fail@plt+0x12cc8>
   2572c:	add	r0, r5, r5, lsl #2
   25730:	ldr	r2, [r6]
   25734:	add	r1, r9, r0, lsl #3
   25738:	ldr	r1, [r1, #4]
   2573c:	cmp	r2, r1
   25740:	bne	2575c <__assert_fail@plt+0x12cac>
   25744:	ldr	r1, [r9, r0, lsl #3]
   25748:	ldr	r0, [sl]
   2574c:	bl	127a4 <bcmp@plt>
   25750:	ldr	r3, [fp, #-148]	; 0xffffff6c
   25754:	cmp	r0, #0
   25758:	beq	25778 <__assert_fail@plt+0x12cc8>
   2575c:	cmp	r5, #0
   25760:	beq	256c8 <__assert_fail@plt+0x12c18>
   25764:	ldr	r0, [r3, r5, lsl #2]
   25768:	sub	r5, r5, r0
   2576c:	cmp	r8, #0
   25770:	bne	25704 <__assert_fail@plt+0x12c54>
   25774:	b	2572c <__assert_fail@plt+0x12c7c>
   25778:	add	r5, r5, #1
   2577c:	sub	r0, r4, r5
   25780:	b	256d0 <__assert_fail@plt+0x12c20>
   25784:	ldr	r8, [fp, #-156]	; 0xffffff64
   25788:	ldr	r0, [fp, #-160]	; 0xffffff60
   2578c:	mov	r6, #0
   25790:	str	r6, [r8]
   25794:	str	r6, [fp, #-80]	; 0xffffffb0
   25798:	str	r6, [fp, #-84]	; 0xffffffac
   2579c:	strb	r6, [fp, #-76]	; 0xffffffb4
   257a0:	strb	r6, [fp, #-88]	; 0xffffffa8
   257a4:	str	r6, [fp, #-136]	; 0xffffff78
   257a8:	str	r6, [fp, #-140]	; 0xffffff74
   257ac:	str	r0, [fp, #-128]	; 0xffffff80
   257b0:	str	r0, [fp, #-72]	; 0xffffffb8
   257b4:	sub	r0, fp, #144	; 0x90
   257b8:	strb	r6, [fp, #-132]	; 0xffffff7c
   257bc:	strb	r6, [fp, #-144]	; 0xffffff70
   257c0:	bl	25e30 <__assert_fail@plt+0x13380>
   257c4:	ldr	r0, [fp, #-116]	; 0xffffff8c
   257c8:	ldrb	r1, [fp, #-120]	; 0xffffff88
   257cc:	cmp	r0, #0
   257d0:	bne	257dc <__assert_fail@plt+0x12d2c>
   257d4:	cmp	r1, #0
   257d8:	bne	2594c <__assert_fail@plt+0x12e9c>
   257dc:	clz	r1, r1
   257e0:	sub	r4, fp, #88	; 0x58
   257e4:	mov	sl, #0
   257e8:	lsr	r1, r1, #5
   257ec:	add	r2, sl, sl, lsl #2
   257f0:	tst	r1, #1
   257f4:	add	r3, r9, r2, lsl #3
   257f8:	bne	25820 <__assert_fail@plt+0x12d70>
   257fc:	ldrb	r1, [r3, #8]
   25800:	cmp	r1, #0
   25804:	beq	25820 <__assert_fail@plt+0x12d70>
   25808:	ldr	r1, [r3, #12]
   2580c:	cmp	r1, r0
   25810:	bne	2584c <__assert_fail@plt+0x12d9c>
   25814:	ldr	r7, [fp, #-128]	; 0xffffff80
   25818:	ldr	r5, [fp, #-124]	; 0xffffff84
   2581c:	b	258ac <__assert_fail@plt+0x12dfc>
   25820:	ldr	r5, [r3, #4]
   25824:	ldr	r0, [fp, #-124]	; 0xffffff84
   25828:	cmp	r5, r0
   2582c:	bne	2584c <__assert_fail@plt+0x12d9c>
   25830:	ldr	r0, [r9, r2, lsl #3]
   25834:	ldr	r7, [fp, #-128]	; 0xffffff80
   25838:	mov	r2, r5
   2583c:	mov	r1, r7
   25840:	bl	127a4 <bcmp@plt>
   25844:	cmp	r0, #0
   25848:	beq	258ac <__assert_fail@plt+0x12dfc>
   2584c:	cmp	sl, #0
   25850:	beq	258cc <__assert_fail@plt+0x12e1c>
   25854:	ldr	r0, [fp, #-148]	; 0xffffff6c
   25858:	ldr	r5, [r0, sl, lsl #2]
   2585c:	sub	sl, sl, r5
   25860:	cmp	r5, #0
   25864:	bne	25888 <__assert_fail@plt+0x12dd8>
   25868:	b	25918 <__assert_fail@plt+0x12e68>
   2586c:	strb	r6, [fp, #-76]	; 0xffffffb4
   25870:	subs	r5, r5, #1
   25874:	ldr	r0, [fp, #-72]	; 0xffffffb8
   25878:	ldr	r1, [fp, #-68]	; 0xffffffbc
   2587c:	add	r0, r0, r1
   25880:	str	r0, [fp, #-72]	; 0xffffffb8
   25884:	beq	25918 <__assert_fail@plt+0x12e68>
   25888:	mov	r0, r4
   2588c:	bl	25e30 <__assert_fail@plt+0x13380>
   25890:	ldrb	r0, [fp, #-64]	; 0xffffffc0
   25894:	cmp	r0, #0
   25898:	beq	2586c <__assert_fail@plt+0x12dbc>
   2589c:	ldr	r0, [fp, #-60]	; 0xffffffc4
   258a0:	cmp	r0, #0
   258a4:	bne	2586c <__assert_fail@plt+0x12dbc>
   258a8:	b	25964 <__assert_fail@plt+0x12eb4>
   258ac:	add	r0, r7, r5
   258b0:	strb	r6, [fp, #-132]	; 0xffffff7c
   258b4:	add	sl, sl, #1
   258b8:	str	r0, [fp, #-128]	; 0xffffff80
   258bc:	ldr	r0, [fp, #-152]	; 0xffffff68
   258c0:	cmp	sl, r0
   258c4:	bne	25918 <__assert_fail@plt+0x12e68>
   258c8:	b	25944 <__assert_fail@plt+0x12e94>
   258cc:	mov	r0, r4
   258d0:	bl	25e30 <__assert_fail@plt+0x13380>
   258d4:	ldrb	r0, [fp, #-64]	; 0xffffffc0
   258d8:	cmp	r0, #0
   258dc:	beq	258ec <__assert_fail@plt+0x12e3c>
   258e0:	ldr	r0, [fp, #-60]	; 0xffffffc4
   258e4:	cmp	r0, #0
   258e8:	beq	25964 <__assert_fail@plt+0x12eb4>
   258ec:	mov	sl, #0
   258f0:	strb	sl, [fp, #-76]	; 0xffffffb4
   258f4:	strb	sl, [fp, #-132]	; 0xffffff7c
   258f8:	ldr	r0, [fp, #-72]	; 0xffffffb8
   258fc:	ldr	r1, [fp, #-68]	; 0xffffffbc
   25900:	add	r0, r0, r1
   25904:	ldr	r1, [fp, #-124]	; 0xffffff84
   25908:	str	r0, [fp, #-72]	; 0xffffffb8
   2590c:	ldr	r0, [fp, #-128]	; 0xffffff80
   25910:	add	r0, r0, r1
   25914:	str	r0, [fp, #-128]	; 0xffffff80
   25918:	sub	r0, fp, #144	; 0x90
   2591c:	bl	25e30 <__assert_fail@plt+0x13380>
   25920:	ldrb	r2, [fp, #-120]	; 0xffffff88
   25924:	clz	r0, r2
   25928:	lsr	r1, r0, #5
   2592c:	ldr	r0, [fp, #-116]	; 0xffffff8c
   25930:	cmp	r0, #0
   25934:	bne	257ec <__assert_fail@plt+0x12d3c>
   25938:	cmp	r2, #0
   2593c:	beq	257ec <__assert_fail@plt+0x12d3c>
   25940:	b	2594c <__assert_fail@plt+0x12e9c>
   25944:	ldr	r0, [fp, #-72]	; 0xffffffb8
   25948:	str	r0, [r8]
   2594c:	mov	r0, r9
   25950:	bl	46ef4 <__assert_fail@plt+0x34444>
   25954:	mov	r5, #1
   25958:	mov	r0, r5
   2595c:	sub	sp, fp, #28
   25960:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   25964:	bl	12a5c <abort@plt>
   25968:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   2596c:	add	fp, sp, #24
   25970:	mov	r4, #0
   25974:	cmn	r2, #-536870911	; 0xe0000001
   25978:	bhi	25ab8 <__assert_fail@plt+0x13008>
   2597c:	mov	r7, r0
   25980:	lsl	r0, r2, #2
   25984:	mov	r8, r3
   25988:	mov	r5, r2
   2598c:	mov	r6, r1
   25990:	cmp	r0, #4016	; 0xfb0
   25994:	bhi	259bc <__assert_fail@plt+0x12f0c>
   25998:	add	r0, r0, #22
   2599c:	bic	r0, r0, #7
   259a0:	sub	r1, sp, r0
   259a4:	add	r0, r1, #15
   259a8:	bic	r0, r0, #15
   259ac:	mov	sp, r1
   259b0:	cmp	r0, #0
   259b4:	bne	259c8 <__assert_fail@plt+0x12f18>
   259b8:	b	25ab8 <__assert_fail@plt+0x13008>
   259bc:	bl	46e84 <__assert_fail@plt+0x343d4>
   259c0:	cmp	r0, #0
   259c4:	beq	25ab8 <__assert_fail@plt+0x13008>
   259c8:	mov	r1, #1
   259cc:	cmp	r5, #3
   259d0:	str	r1, [r0, #4]
   259d4:	bcc	25a3c <__assert_fail@plt+0x12f8c>
   259d8:	mov	r1, #2
   259dc:	mov	r2, #0
   259e0:	b	259fc <__assert_fail@plt+0x12f4c>
   259e4:	add	r2, r2, #1
   259e8:	sub	r3, r1, r2
   259ec:	str	r3, [r0, r1, lsl #2]
   259f0:	add	r1, r1, #1
   259f4:	cmp	r1, r5
   259f8:	beq	25a3c <__assert_fail@plt+0x12f8c>
   259fc:	add	r3, r1, r6
   25a00:	ldrb	r4, [r6, r2]
   25a04:	ldrb	r3, [r3, #-1]
   25a08:	cmp	r3, r4
   25a0c:	beq	259e4 <__assert_fail@plt+0x12f34>
   25a10:	cmp	r2, #0
   25a14:	beq	25a30 <__assert_fail@plt+0x12f80>
   25a18:	ldr	r4, [r0, r2, lsl #2]
   25a1c:	sub	r2, r2, r4
   25a20:	ldrb	r4, [r6, r2]
   25a24:	cmp	r3, r4
   25a28:	bne	25a10 <__assert_fail@plt+0x12f60>
   25a2c:	b	259e4 <__assert_fail@plt+0x12f34>
   25a30:	mov	r2, #0
   25a34:	mov	r3, r1
   25a38:	b	259ec <__assert_fail@plt+0x12f3c>
   25a3c:	mov	r1, #0
   25a40:	str	r1, [r8]
   25a44:	ldrb	r3, [r7]
   25a48:	cmp	r3, #0
   25a4c:	beq	25ab0 <__assert_fail@plt+0x13000>
   25a50:	mov	r2, r7
   25a54:	b	25a70 <__assert_fail@plt+0x12fc0>
   25a58:	add	r7, r7, #1
   25a5c:	add	r2, r2, #1
   25a60:	mov	r1, #0
   25a64:	ldrb	r3, [r7]
   25a68:	cmp	r3, #0
   25a6c:	beq	25ab0 <__assert_fail@plt+0x13000>
   25a70:	ldrb	r4, [r6, r1]
   25a74:	uxtb	r3, r3
   25a78:	cmp	r4, r3
   25a7c:	bne	25a94 <__assert_fail@plt+0x12fe4>
   25a80:	add	r1, r1, #1
   25a84:	cmp	r1, r5
   25a88:	beq	25aac <__assert_fail@plt+0x12ffc>
   25a8c:	add	r7, r7, #1
   25a90:	b	25a64 <__assert_fail@plt+0x12fb4>
   25a94:	cmp	r1, #0
   25a98:	beq	25a58 <__assert_fail@plt+0x12fa8>
   25a9c:	ldr	r3, [r0, r1, lsl #2]
   25aa0:	sub	r1, r1, r3
   25aa4:	add	r2, r2, r3
   25aa8:	b	25a64 <__assert_fail@plt+0x12fb4>
   25aac:	str	r2, [r8]
   25ab0:	bl	46ef4 <__assert_fail@plt+0x34444>
   25ab4:	mov	r4, #1
   25ab8:	mov	r0, r4
   25abc:	sub	sp, fp, #24
   25ac0:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   25ac4:	push	{r4, r5, fp, lr}
   25ac8:	add	fp, sp, #8
   25acc:	mov	r4, r1
   25ad0:	mov	r5, r0
   25ad4:	bl	127bc <strlen@plt>
   25ad8:	mov	r1, r0
   25adc:	mov	r0, r5
   25ae0:	mov	r2, r4
   25ae4:	pop	{r4, r5, fp, lr}
   25ae8:	b	25aec <__assert_fail@plt+0x1303c>
   25aec:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   25af0:	add	fp, sp, #28
   25af4:	sub	sp, sp, #20
   25af8:	mov	r5, r2
   25afc:	mov	r6, r1
   25b00:	mov	r4, r0
   25b04:	add	r7, r0, r1
   25b08:	bl	12648 <__ctype_get_mb_cur_max@plt>
   25b0c:	cmp	r0, #1
   25b10:	bls	25db8 <__assert_fail@plt+0x13308>
   25b14:	cmp	r6, #1
   25b18:	blt	25e10 <__assert_fail@plt+0x13360>
   25b1c:	and	r2, r5, #1
   25b20:	and	sl, r5, #2
   25b24:	mov	r3, #0
   25b28:	add	r8, sp, #4
   25b2c:	add	r9, sp, #8
   25b30:	mov	r5, #0
   25b34:	ldrb	r0, [r4]
   25b38:	sub	r0, r0, #32
   25b3c:	cmp	r0, #94	; 0x5e
   25b40:	bhi	25cdc <__assert_fail@plt+0x1322c>
   25b44:	add	r1, pc, #0
   25b48:	ldr	pc, [r1, r0, lsl #2]
   25b4c:	andeq	r5, r2, r8, asr #25
   25b50:	andeq	r5, r2, r8, asr #25
   25b54:	andeq	r5, r2, r8, asr #25
   25b58:	andeq	r5, r2, r8, asr #25
   25b5c:	ldrdeq	r5, [r2], -ip
   25b60:	andeq	r5, r2, r8, asr #25
   25b64:	andeq	r5, r2, r8, asr #25
   25b68:	andeq	r5, r2, r8, asr #25
   25b6c:	andeq	r5, r2, r8, asr #25
   25b70:	andeq	r5, r2, r8, asr #25
   25b74:	andeq	r5, r2, r8, asr #25
   25b78:	andeq	r5, r2, r8, asr #25
   25b7c:	andeq	r5, r2, r8, asr #25
   25b80:	andeq	r5, r2, r8, asr #25
   25b84:	andeq	r5, r2, r8, asr #25
   25b88:	andeq	r5, r2, r8, asr #25
   25b8c:	andeq	r5, r2, r8, asr #25
   25b90:	andeq	r5, r2, r8, asr #25
   25b94:	andeq	r5, r2, r8, asr #25
   25b98:	andeq	r5, r2, r8, asr #25
   25b9c:	andeq	r5, r2, r8, asr #25
   25ba0:	andeq	r5, r2, r8, asr #25
   25ba4:	andeq	r5, r2, r8, asr #25
   25ba8:	andeq	r5, r2, r8, asr #25
   25bac:	andeq	r5, r2, r8, asr #25
   25bb0:	andeq	r5, r2, r8, asr #25
   25bb4:	andeq	r5, r2, r8, asr #25
   25bb8:	andeq	r5, r2, r8, asr #25
   25bbc:	andeq	r5, r2, r8, asr #25
   25bc0:	andeq	r5, r2, r8, asr #25
   25bc4:	andeq	r5, r2, r8, asr #25
   25bc8:	andeq	r5, r2, r8, asr #25
   25bcc:	ldrdeq	r5, [r2], -ip
   25bd0:	andeq	r5, r2, r8, asr #25
   25bd4:	andeq	r5, r2, r8, asr #25
   25bd8:	andeq	r5, r2, r8, asr #25
   25bdc:	andeq	r5, r2, r8, asr #25
   25be0:	andeq	r5, r2, r8, asr #25
   25be4:	andeq	r5, r2, r8, asr #25
   25be8:	andeq	r5, r2, r8, asr #25
   25bec:	andeq	r5, r2, r8, asr #25
   25bf0:	andeq	r5, r2, r8, asr #25
   25bf4:	andeq	r5, r2, r8, asr #25
   25bf8:	andeq	r5, r2, r8, asr #25
   25bfc:	andeq	r5, r2, r8, asr #25
   25c00:	andeq	r5, r2, r8, asr #25
   25c04:	andeq	r5, r2, r8, asr #25
   25c08:	andeq	r5, r2, r8, asr #25
   25c0c:	andeq	r5, r2, r8, asr #25
   25c10:	andeq	r5, r2, r8, asr #25
   25c14:	andeq	r5, r2, r8, asr #25
   25c18:	andeq	r5, r2, r8, asr #25
   25c1c:	andeq	r5, r2, r8, asr #25
   25c20:	andeq	r5, r2, r8, asr #25
   25c24:	andeq	r5, r2, r8, asr #25
   25c28:	andeq	r5, r2, r8, asr #25
   25c2c:	andeq	r5, r2, r8, asr #25
   25c30:	andeq	r5, r2, r8, asr #25
   25c34:	andeq	r5, r2, r8, asr #25
   25c38:	andeq	r5, r2, r8, asr #25
   25c3c:	andeq	r5, r2, r8, asr #25
   25c40:	andeq	r5, r2, r8, asr #25
   25c44:	andeq	r5, r2, r8, asr #25
   25c48:	andeq	r5, r2, r8, asr #25
   25c4c:	ldrdeq	r5, [r2], -ip
   25c50:	andeq	r5, r2, r8, asr #25
   25c54:	andeq	r5, r2, r8, asr #25
   25c58:	andeq	r5, r2, r8, asr #25
   25c5c:	andeq	r5, r2, r8, asr #25
   25c60:	andeq	r5, r2, r8, asr #25
   25c64:	andeq	r5, r2, r8, asr #25
   25c68:	andeq	r5, r2, r8, asr #25
   25c6c:	andeq	r5, r2, r8, asr #25
   25c70:	andeq	r5, r2, r8, asr #25
   25c74:	andeq	r5, r2, r8, asr #25
   25c78:	andeq	r5, r2, r8, asr #25
   25c7c:	andeq	r5, r2, r8, asr #25
   25c80:	andeq	r5, r2, r8, asr #25
   25c84:	andeq	r5, r2, r8, asr #25
   25c88:	andeq	r5, r2, r8, asr #25
   25c8c:	andeq	r5, r2, r8, asr #25
   25c90:	andeq	r5, r2, r8, asr #25
   25c94:	andeq	r5, r2, r8, asr #25
   25c98:	andeq	r5, r2, r8, asr #25
   25c9c:	andeq	r5, r2, r8, asr #25
   25ca0:	andeq	r5, r2, r8, asr #25
   25ca4:	andeq	r5, r2, r8, asr #25
   25ca8:	andeq	r5, r2, r8, asr #25
   25cac:	andeq	r5, r2, r8, asr #25
   25cb0:	andeq	r5, r2, r8, asr #25
   25cb4:	andeq	r5, r2, r8, asr #25
   25cb8:	andeq	r5, r2, r8, asr #25
   25cbc:	andeq	r5, r2, r8, asr #25
   25cc0:	andeq	r5, r2, r8, asr #25
   25cc4:	andeq	r5, r2, r8, asr #25
   25cc8:	add	r5, r5, #1
   25ccc:	add	r4, r4, #1
   25cd0:	cmp	r4, r7
   25cd4:	bcc	25b34 <__assert_fail@plt+0x13084>
   25cd8:	b	25e24 <__assert_fail@plt+0x13374>
   25cdc:	str	r2, [sp]
   25ce0:	str	r3, [sp, #12]
   25ce4:	str	r3, [sp, #8]
   25ce8:	b	25d14 <__assert_fail@plt+0x13264>
   25cec:	mvn	r1, #-2147483648	; 0x80000000
   25cf0:	sub	r1, r1, r5
   25cf4:	cmp	r0, r1
   25cf8:	bgt	25e18 <__assert_fail@plt+0x13368>
   25cfc:	add	r5, r0, r5
   25d00:	mov	r0, r9
   25d04:	add	r4, r4, r6
   25d08:	bl	1251c <mbsinit@plt>
   25d0c:	cmp	r0, #0
   25d10:	bne	25dac <__assert_fail@plt+0x132fc>
   25d14:	sub	r2, r7, r4
   25d18:	mov	r0, r8
   25d1c:	mov	r1, r4
   25d20:	mov	r3, r9
   25d24:	bl	327dc <__assert_fail@plt+0x1fd2c>
   25d28:	cmp	r0, #0
   25d2c:	beq	25d48 <__assert_fail@plt+0x13298>
   25d30:	mov	r6, r0
   25d34:	cmn	r0, #2
   25d38:	beq	25d84 <__assert_fail@plt+0x132d4>
   25d3c:	cmn	r6, #1
   25d40:	bne	25d4c <__assert_fail@plt+0x1329c>
   25d44:	b	25d98 <__assert_fail@plt+0x132e8>
   25d48:	mov	r6, #1
   25d4c:	ldr	r0, [sp, #4]
   25d50:	bl	1245c <wcwidth@plt>
   25d54:	cmp	r0, #0
   25d58:	bpl	25cec <__assert_fail@plt+0x1323c>
   25d5c:	cmp	sl, #0
   25d60:	bne	25e20 <__assert_fail@plt+0x13370>
   25d64:	ldr	r0, [sp, #4]
   25d68:	bl	125c4 <iswcntrl@plt>
   25d6c:	cmp	r0, #0
   25d70:	bne	25d00 <__assert_fail@plt+0x13250>
   25d74:	cmn	r5, #-2147483647	; 0x80000001
   25d78:	beq	25e18 <__assert_fail@plt+0x13368>
   25d7c:	add	r5, r5, #1
   25d80:	b	25d00 <__assert_fail@plt+0x13250>
   25d84:	ldr	r0, [sp]
   25d88:	mov	r4, r7
   25d8c:	cmp	r0, #0
   25d90:	beq	25da8 <__assert_fail@plt+0x132f8>
   25d94:	b	25e20 <__assert_fail@plt+0x13370>
   25d98:	ldr	r0, [sp]
   25d9c:	cmp	r0, #0
   25da0:	bne	25e20 <__assert_fail@plt+0x13370>
   25da4:	add	r4, r4, #1
   25da8:	add	r5, r5, #1
   25dac:	ldr	r2, [sp]
   25db0:	mov	r3, #0
   25db4:	b	25cd0 <__assert_fail@plt+0x13220>
   25db8:	cmp	r6, #1
   25dbc:	blt	25e10 <__assert_fail@plt+0x13360>
   25dc0:	and	r6, r5, #2
   25dc4:	bl	12768 <__ctype_b_loc@plt>
   25dc8:	ldr	r0, [r0]
   25dcc:	mov	r5, #0
   25dd0:	b	25ddc <__assert_fail@plt+0x1332c>
   25dd4:	cmp	r4, r7
   25dd8:	bcs	25e24 <__assert_fail@plt+0x13374>
   25ddc:	ldrb	r1, [r4], #1
   25de0:	add	r1, r0, r1, lsl #1
   25de4:	ldrh	r1, [r1]
   25de8:	tst	r1, #16384	; 0x4000
   25dec:	bne	25e00 <__assert_fail@plt+0x13350>
   25df0:	cmp	r6, #0
   25df4:	bne	25e20 <__assert_fail@plt+0x13370>
   25df8:	tst	r1, #2
   25dfc:	bne	25dd4 <__assert_fail@plt+0x13324>
   25e00:	cmn	r5, #-2147483647	; 0x80000001
   25e04:	beq	25e18 <__assert_fail@plt+0x13368>
   25e08:	add	r5, r5, #1
   25e0c:	b	25dd4 <__assert_fail@plt+0x13324>
   25e10:	mov	r5, #0
   25e14:	b	25e24 <__assert_fail@plt+0x13374>
   25e18:	mvn	r5, #-2147483648	; 0x80000000
   25e1c:	b	25e24 <__assert_fail@plt+0x13374>
   25e20:	mvn	r5, #0
   25e24:	mov	r0, r5
   25e28:	sub	sp, fp, #28
   25e2c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   25e30:	push	{r4, r5, r6, r7, fp, lr}
   25e34:	add	fp, sp, #16
   25e38:	mov	r4, r0
   25e3c:	ldrb	r0, [r0, #12]
   25e40:	cmp	r0, #0
   25e44:	popne	{r4, r5, r6, r7, fp, pc}
   25e48:	ldrb	r0, [r4]
   25e4c:	ldr	r5, [r4, #16]
   25e50:	cmp	r0, #0
   25e54:	beq	25eb0 <__assert_fail@plt+0x13400>
   25e58:	bl	12648 <__ctype_get_mb_cur_max@plt>
   25e5c:	mov	r1, r0
   25e60:	mov	r0, r5
   25e64:	bl	2d928 <__assert_fail@plt+0x1ae78>
   25e68:	add	r6, r4, #4
   25e6c:	add	r7, r4, #28
   25e70:	mov	r2, r0
   25e74:	mov	r1, r5
   25e78:	mov	r0, r7
   25e7c:	mov	r3, r6
   25e80:	bl	327dc <__assert_fail@plt+0x1fd2c>
   25e84:	cmn	r0, #2
   25e88:	str	r0, [r4, #20]
   25e8c:	beq	25f2c <__assert_fail@plt+0x1347c>
   25e90:	cmp	r0, #0
   25e94:	beq	25ee8 <__assert_fail@plt+0x13438>
   25e98:	cmn	r0, #1
   25e9c:	bne	25f0c <__assert_fail@plt+0x1345c>
   25ea0:	mov	r0, #0
   25ea4:	strb	r0, [r4, #24]
   25ea8:	mov	r0, #1
   25eac:	b	25f3c <__assert_fail@plt+0x1348c>
   25eb0:	ldrb	r0, [r5]
   25eb4:	movw	r2, #56176	; 0xdb70
   25eb8:	movt	r2, #4
   25ebc:	ubfx	r1, r0, #5, #3
   25ec0:	ldr	r1, [r2, r1, lsl #2]
   25ec4:	and	r2, r0, #31
   25ec8:	mov	r0, #1
   25ecc:	tst	r1, r0, lsl r2
   25ed0:	beq	25f4c <__assert_fail@plt+0x1349c>
   25ed4:	str	r0, [r4, #20]
   25ed8:	ldrb	r1, [r5]
   25edc:	strb	r0, [r4, #24]
   25ee0:	str	r1, [r4, #28]
   25ee4:	b	25f40 <__assert_fail@plt+0x13490>
   25ee8:	mov	r0, #1
   25eec:	str	r0, [r4, #20]
   25ef0:	ldr	r0, [r4, #16]
   25ef4:	ldrb	r0, [r0]
   25ef8:	cmp	r0, #0
   25efc:	bne	25f68 <__assert_fail@plt+0x134b8>
   25f00:	ldr	r0, [r7]
   25f04:	cmp	r0, #0
   25f08:	bne	25f80 <__assert_fail@plt+0x134d0>
   25f0c:	mov	r0, #1
   25f10:	strb	r0, [r4, #24]
   25f14:	mov	r0, r6
   25f18:	bl	1251c <mbsinit@plt>
   25f1c:	cmp	r0, #0
   25f20:	movne	r0, #0
   25f24:	strbne	r0, [r4]
   25f28:	b	25f40 <__assert_fail@plt+0x13490>
   25f2c:	ldr	r0, [r4, #16]
   25f30:	bl	127bc <strlen@plt>
   25f34:	mov	r1, #0
   25f38:	strb	r1, [r4, #24]
   25f3c:	str	r0, [r4, #20]
   25f40:	mov	r0, #1
   25f44:	strb	r0, [r4, #12]
   25f48:	pop	{r4, r5, r6, r7, fp, pc}
   25f4c:	add	r0, r4, #4
   25f50:	bl	1251c <mbsinit@plt>
   25f54:	cmp	r0, #0
   25f58:	beq	25f98 <__assert_fail@plt+0x134e8>
   25f5c:	mov	r0, #1
   25f60:	strb	r0, [r4]
   25f64:	b	25e58 <__assert_fail@plt+0x133a8>
   25f68:	movw	r0, #50179	; 0xc403
   25f6c:	movw	r1, #50119	; 0xc3c7
   25f70:	movw	r3, #50131	; 0xc3d3
   25f74:	mov	r2, #171	; 0xab
   25f78:	movt	r0, #4
   25f7c:	b	25fac <__assert_fail@plt+0x134fc>
   25f80:	movw	r0, #50202	; 0xc41a
   25f84:	movw	r1, #50119	; 0xc3c7
   25f88:	movw	r3, #50131	; 0xc3d3
   25f8c:	mov	r2, #172	; 0xac
   25f90:	movt	r0, #4
   25f94:	b	25fac <__assert_fail@plt+0x134fc>
   25f98:	movw	r0, #50096	; 0xc3b0
   25f9c:	movw	r1, #50119	; 0xc3c7
   25fa0:	movw	r3, #50131	; 0xc3d3
   25fa4:	mov	r2, #143	; 0x8f
   25fa8:	movt	r0, #4
   25fac:	movt	r1, #4
   25fb0:	movt	r3, #4
   25fb4:	bl	12ab0 <__assert_fail@plt>
   25fb8:	ldr	r2, [r0, #16]
   25fbc:	add	r1, r2, r1
   25fc0:	str	r1, [r0, #16]
   25fc4:	bx	lr
   25fc8:	push	{r4, r5, r6, sl, fp, lr}
   25fcc:	add	fp, sp, #16
   25fd0:	mov	r5, r1
   25fd4:	ldrb	r1, [r1]
   25fd8:	mov	r4, r0
   25fdc:	strb	r1, [r0], #4
   25fe0:	cmp	r1, #0
   25fe4:	beq	25ff4 <__assert_fail@plt+0x13544>
   25fe8:	ldmib	r5, {r1, r2}
   25fec:	stm	r0, {r1, r2}
   25ff0:	b	26000 <__assert_fail@plt+0x13550>
   25ff4:	mov	r1, #0
   25ff8:	str	r1, [r0]
   25ffc:	str	r1, [r0, #4]
   26000:	ldrb	r0, [r5, #12]
   26004:	strb	r0, [r4, #12]
   26008:	add	r0, r5, #32
   2600c:	ldr	r1, [r5, #16]
   26010:	cmp	r1, r0
   26014:	beq	26020 <__assert_fail@plt+0x13570>
   26018:	mov	r6, r1
   2601c:	b	26030 <__assert_fail@plt+0x13580>
   26020:	ldr	r2, [r5, #20]
   26024:	add	r6, r4, #32
   26028:	mov	r0, r6
   2602c:	bl	124e0 <memcpy@plt>
   26030:	str	r6, [r4, #16]
   26034:	ldr	r0, [r5, #20]
   26038:	str	r0, [r4, #20]
   2603c:	ldrb	r0, [r5, #24]
   26040:	strb	r0, [r4, #24]
   26044:	cmp	r0, #0
   26048:	ldrne	r0, [r5, #28]
   2604c:	strne	r0, [r4, #28]
   26050:	pop	{r4, r5, r6, sl, fp, pc}
   26054:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   26058:	add	fp, sp, #28
   2605c:	sub	sp, sp, #4
   26060:	ldrb	r1, [r0]
   26064:	mov	r4, r0
   26068:	and	r0, r1, #248	; 0xf8
   2606c:	cmp	r0, #48	; 0x30
   26070:	bne	260bc <__assert_fail@plt+0x1360c>
   26074:	mov	r0, #0
   26078:	mov	r5, #0
   2607c:	mov	r2, r4
   26080:	lsl	r3, r5, #3
   26084:	uxtab	r1, r3, r1
   26088:	sub	r5, r1, #48	; 0x30
   2608c:	cmp	r0, r5, lsr #12
   26090:	bne	260b4 <__assert_fail@plt+0x13604>
   26094:	ldrb	r1, [r2, #1]
   26098:	add	r6, r2, #1
   2609c:	and	r2, r1, #248	; 0xf8
   260a0:	cmp	r2, #48	; 0x30
   260a4:	mov	r2, r6
   260a8:	beq	26080 <__assert_fail@plt+0x135d0>
   260ac:	cmp	r1, #0
   260b0:	beq	26414 <__assert_fail@plt+0x13964>
   260b4:	sub	sp, fp, #28
   260b8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   260bc:	movw	sl, #5
   260c0:	mov	r2, #1
   260c4:	mvn	r3, #42	; 0x2a
   260c8:	mov	r7, #1
   260cc:	mov	r0, #1
   260d0:	movt	sl, #4
   260d4:	b	260f0 <__assert_fail@plt+0x13640>
   260d8:	cmp	r1, #0
   260dc:	beq	26110 <__assert_fail@plt+0x13660>
   260e0:	mov	r6, #0
   260e4:	ldrb	r1, [r4, r7]
   260e8:	add	r0, r6, r0
   260ec:	add	r7, r7, #1
   260f0:	uxtab	r6, r3, r1
   260f4:	uxtb	r1, r1
   260f8:	cmp	r6, #18
   260fc:	bhi	260d8 <__assert_fail@plt+0x13628>
   26100:	tst	sl, r2, lsl r6
   26104:	mov	r6, #1
   26108:	bne	260e4 <__assert_fail@plt+0x13634>
   2610c:	b	260d8 <__assert_fail@plt+0x13628>
   26110:	mov	r1, #16
   26114:	bl	2e108 <__assert_fail@plt+0x1b658>
   26118:	mov	r9, #0
   2611c:	mov	ip, #1
   26120:	mvn	lr, #87	; 0x57
   26124:	mov	r8, #0
   26128:	mov	r2, #0
   2612c:	b	2613c <__assert_fail@plt+0x1368c>
   26130:	movw	r1, #4095	; 0xfff
   26134:	orr	r2, r2, r1
   26138:	add	r4, r4, #1
   2613c:	ldrb	r6, [r4]
   26140:	sub	r3, r6, #97	; 0x61
   26144:	cmp	r3, #20
   26148:	bhi	261bc <__assert_fail@plt+0x1370c>
   2614c:	add	r5, pc, #4
   26150:	mov	r1, #2496	; 0x9c0
   26154:	ldr	pc, [r5, r3, lsl #2]
   26158:	andeq	r6, r2, r0, lsr r1
   2615c:	andeq	r6, r2, r4, ror r4
   26160:	andeq	r6, r2, r4, ror r4
   26164:	andeq	r6, r2, r4, ror r4
   26168:	andeq	r6, r2, r4, ror r4
   2616c:	andeq	r6, r2, r4, ror r4
   26170:	andeq	r6, r2, ip, lsr #3
   26174:	andeq	r6, r2, r4, ror r4
   26178:	andeq	r6, r2, r4, ror r4
   2617c:	andeq	r6, r2, r4, ror r4
   26180:	andeq	r6, r2, r4, ror r4
   26184:	andeq	r6, r2, r4, ror r4
   26188:	andeq	r6, r2, r4, ror r4
   2618c:	andeq	r6, r2, r4, ror r4
   26190:			; <UNDEFINED> instruction: 0x000261b4
   26194:	andeq	r6, r2, r4, ror r4
   26198:	andeq	r6, r2, r4, ror r4
   2619c:	andeq	r6, r2, r4, ror r4
   261a0:	andeq	r6, r2, r4, ror r4
   261a4:	andeq	r6, r2, r4, ror r4
   261a8:	andeq	r6, r2, r4, lsr r1
   261ac:	movw	r1, #1080	; 0x438
   261b0:	b	26134 <__assert_fail@plt+0x13684>
   261b4:	movw	r1, #519	; 0x207
   261b8:	b	26134 <__assert_fail@plt+0x13684>
   261bc:	sub	r1, r6, #43	; 0x2b
   261c0:	cmp	r1, #18
   261c4:	bhi	26474 <__assert_fail@plt+0x139c4>
   261c8:	tst	sl, ip, lsl r1
   261cc:	beq	26474 <__assert_fail@plt+0x139c4>
   261d0:	ldrb	r1, [r4, #1]
   261d4:	sub	r3, r1, #48	; 0x30
   261d8:	cmp	r3, #8
   261dc:	bcs	26238 <__assert_fail@plt+0x13788>
   261e0:	add	r3, r4, #2
   261e4:	mov	r7, #0
   261e8:	lsl	r4, r7, #3
   261ec:	uxtab	r1, r4, r1
   261f0:	sub	r7, r1, #48	; 0x30
   261f4:	cmp	r9, r7, lsr #12
   261f8:	bne	26474 <__assert_fail@plt+0x139c4>
   261fc:	ldrb	r1, [r3], #1
   26200:	and	r4, r1, #248	; 0xf8
   26204:	cmp	r4, #48	; 0x30
   26208:	beq	261e8 <__assert_fail@plt+0x13738>
   2620c:	cmp	r2, #0
   26210:	bne	26474 <__assert_fail@plt+0x139c4>
   26214:	sub	r4, r3, #1
   26218:	mov	r5, #1
   2621c:	movw	r2, #4095	; 0xfff
   26220:	cmp	r1, #0
   26224:	beq	26264 <__assert_fail@plt+0x137b4>
   26228:	cmp	r1, #44	; 0x2c
   2622c:	movw	r1, #4095	; 0xfff
   26230:	beq	26370 <__assert_fail@plt+0x138c0>
   26234:	b	26474 <__assert_fail@plt+0x139c4>
   26238:	add	r4, r4, #2
   2623c:	cmp	r1, #103	; 0x67
   26240:	beq	2626c <__assert_fail@plt+0x137bc>
   26244:	cmp	r1, #111	; 0x6f
   26248:	beq	2627c <__assert_fail@plt+0x137cc>
   2624c:	cmp	r1, #117	; 0x75
   26250:	bne	2628c <__assert_fail@plt+0x137dc>
   26254:	mov	r5, #3
   26258:	mov	r1, #0
   2625c:	mov	r7, #448	; 0x1c0
   26260:	b	26370 <__assert_fail@plt+0x138c0>
   26264:	movw	r1, #4095	; 0xfff
   26268:	b	26370 <__assert_fail@plt+0x138c0>
   2626c:	mov	r5, #3
   26270:	mov	r1, #0
   26274:	mov	r7, #56	; 0x38
   26278:	b	26370 <__assert_fail@plt+0x138c0>
   2627c:	mov	r5, #3
   26280:	mov	r1, #0
   26284:	mov	r7, #7
   26288:	b	26370 <__assert_fail@plt+0x138c0>
   2628c:	mov	r3, #1
   26290:	mov	r7, #0
   26294:	b	262a4 <__assert_fail@plt+0x137f4>
   26298:	orr	r7, r7, #512	; 0x200
   2629c:	mov	r3, r5
   262a0:	ldrb	r1, [r4], #1
   262a4:	uxtab	r1, lr, r1
   262a8:	mov	r5, r3
   262ac:	cmp	r1, #32
   262b0:	bhi	26364 <__assert_fail@plt+0x138b4>
   262b4:	add	ip, pc, #4
   262b8:	mov	r3, #2
   262bc:	ldr	pc, [ip, r1, lsl #2]
   262c0:	andeq	r6, r2, r0, lsr #5
   262c4:	andeq	r6, r2, r4, ror #6
   262c8:	andeq	r6, r2, r4, ror #6
   262cc:	andeq	r6, r2, r4, ror #6
   262d0:	andeq	r6, r2, r4, ror #6
   262d4:	andeq	r6, r2, r4, ror #6
   262d8:	andeq	r6, r2, r4, ror #6
   262dc:	andeq	r6, r2, r4, ror #6
   262e0:	andeq	r6, r2, r4, ror #6
   262e4:	andeq	r6, r2, r4, ror #6
   262e8:	andeq	r6, r2, r4, ror #6
   262ec:	andeq	r6, r2, r4, ror #6
   262f0:	andeq	r6, r2, r4, ror #6
   262f4:	andeq	r6, r2, r4, ror #6
   262f8:	andeq	r6, r2, r4, ror #6
   262fc:	andeq	r6, r2, r4, ror #6
   26300:	andeq	r6, r2, r4, ror #6
   26304:	andeq	r6, r2, r4, ror #6
   26308:	andeq	r6, r2, r4, ror #6
   2630c:	andeq	r6, r2, r4, ror #6
   26310:	andeq	r6, r2, r4, ror #6
   26314:	andeq	r6, r2, r4, ror #6
   26318:	andeq	r6, r2, r4, ror #6
   2631c:	andeq	r6, r2, r4, ror #6
   26320:	andeq	r6, r2, r4, ror #6
   26324:	andeq	r6, r2, r4, ror #6
   26328:	andeq	r6, r2, r4, asr #6
   2632c:	andeq	r6, r2, ip, asr #6
   26330:	muleq	r2, r8, r2
   26334:	andeq	r6, r2, r4, ror #6
   26338:	andeq	r6, r2, r4, ror #6
   2633c:	andeq	r6, r2, r4, asr r3
   26340:	andeq	r6, r2, ip, asr r3
   26344:	orr	r7, r7, #292	; 0x124
   26348:	b	2629c <__assert_fail@plt+0x137ec>
   2634c:	orr	r7, r7, #3072	; 0xc00
   26350:	b	2629c <__assert_fail@plt+0x137ec>
   26354:	orr	r7, r7, #146	; 0x92
   26358:	b	2629c <__assert_fail@plt+0x137ec>
   2635c:	orr	r7, r7, #73	; 0x49
   26360:	b	2629c <__assert_fail@plt+0x137ec>
   26364:	sub	r4, r4, #1
   26368:	mov	r1, #0
   2636c:	mov	ip, #1
   26370:	mov	r3, r0
   26374:	cmp	r1, #0
   26378:	strb	r6, [r3, r8, lsl #4]!
   2637c:	stmib	r3, {r2, r7}
   26380:	strb	r5, [r3, #1]
   26384:	bne	26394 <__assert_fail@plt+0x138e4>
   26388:	cmp	r2, #0
   2638c:	andne	r7, r7, r2
   26390:	mov	r1, r7
   26394:	add	r7, r0, r8, lsl #4
   26398:	add	r3, r8, #1
   2639c:	str	r1, [r7, #12]
   263a0:	ldrb	r6, [r4]
   263a4:	sub	r1, r6, #43	; 0x2b
   263a8:	cmp	r1, #18
   263ac:	bhi	26458 <__assert_fail@plt+0x139a8>
   263b0:	add	r7, pc, #4
   263b4:	mov	r8, r3
   263b8:	ldr	pc, [r7, r1, lsl #2]
   263bc:	ldrdeq	r6, [r2], -r0
   263c0:	andeq	r6, r2, r8, lsl #8
   263c4:	ldrdeq	r6, [r2], -r0
   263c8:	andeq	r6, r2, r4, ror r4
   263cc:	andeq	r6, r2, r4, ror r4
   263d0:	andeq	r6, r2, r4, ror r4
   263d4:	andeq	r6, r2, r4, ror r4
   263d8:	andeq	r6, r2, r4, ror r4
   263dc:	andeq	r6, r2, r4, ror r4
   263e0:	andeq	r6, r2, r4, ror r4
   263e4:	andeq	r6, r2, r4, ror r4
   263e8:	andeq	r6, r2, r4, ror r4
   263ec:	andeq	r6, r2, r4, ror r4
   263f0:	andeq	r6, r2, r4, ror r4
   263f4:	andeq	r6, r2, r4, ror r4
   263f8:	andeq	r6, r2, r4, ror r4
   263fc:	andeq	r6, r2, r4, ror r4
   26400:	andeq	r6, r2, r4, ror r4
   26404:	ldrdeq	r6, [r2], -r0
   26408:	add	r4, r4, #1
   2640c:	mov	r8, r3
   26410:	b	26128 <__assert_fail@plt+0x13678>
   26414:	mov	r0, #32
   26418:	bl	2e038 <__assert_fail@plt+0x1b588>
   2641c:	mov	r1, #0
   26420:	movw	r2, #317	; 0x13d
   26424:	and	r3, r5, #3072	; 0xc00
   26428:	movw	r7, #1023	; 0x3ff
   2642c:	strb	r1, [r0, #17]
   26430:	strh	r2, [r0]
   26434:	sub	r2, r6, r4
   26438:	movw	r1, #4095	; 0xfff
   2643c:	cmp	r2, #5
   26440:	str	r1, [r0, #4]
   26444:	str	r5, [r0, #8]
   26448:	orrlt	r1, r3, r7
   2644c:	str	r1, [r0, #12]
   26450:	sub	sp, fp, #28
   26454:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   26458:	cmp	r6, #0
   2645c:	bne	26474 <__assert_fail@plt+0x139c4>
   26460:	add	r1, r0, r3, lsl #4
   26464:	mov	r2, #0
   26468:	strb	r2, [r1, #1]
   2646c:	sub	sp, fp, #28
   26470:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   26474:	bl	30174 <__assert_fail@plt+0x1d6c4>
   26478:	mov	r0, #0
   2647c:	sub	sp, fp, #28
   26480:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   26484:	push	{r4, sl, fp, lr}
   26488:	add	fp, sp, #8
   2648c:	sub	sp, sp, #104	; 0x68
   26490:	mov	r1, r0
   26494:	mov	r2, sp
   26498:	mov	r0, #3
   2649c:	bl	12a14 <__xstat64@plt>
   264a0:	mov	r1, r0
   264a4:	mov	r0, #0
   264a8:	cmp	r1, #0
   264ac:	beq	264b8 <__assert_fail@plt+0x13a08>
   264b0:	sub	sp, fp, #8
   264b4:	pop	{r4, sl, fp, pc}
   264b8:	ldr	r4, [sp, #16]
   264bc:	mov	r0, #32
   264c0:	bl	2e038 <__assert_fail@plt+0x1b588>
   264c4:	mov	r1, #0
   264c8:	strb	r1, [r0, #17]
   264cc:	movw	r1, #4095	; 0xfff
   264d0:	stmib	r0, {r1, r4}
   264d4:	str	r1, [r0, #12]
   264d8:	movw	r1, #317	; 0x13d
   264dc:	strh	r1, [r0]
   264e0:	sub	sp, fp, #8
   264e4:	pop	{r4, sl, fp, pc}
   264e8:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   264ec:	add	fp, sp, #24
   264f0:	ldrb	r4, [r3, #1]
   264f4:	ldr	ip, [fp, #8]
   264f8:	bfc	r0, #12, #20
   264fc:	cmp	r4, #0
   26500:	beq	265e0 <__assert_fail@plt+0x13b30>
   26504:	cmp	r1, #0
   26508:	mov	lr, r1
   2650c:	add	r3, r3, #8
   26510:	mov	r9, #0
   26514:	movw	r8, #4095	; 0xfff
   26518:	movwne	lr, #3072	; 0xc00
   2651c:	b	26538 <__assert_fail@plt+0x13a88>
   26520:	bic	r0, r0, r3
   26524:	orr	r9, r3, r9
   26528:	ldrb	r4, [r5, #9]
   2652c:	add	r3, r5, #16
   26530:	cmp	r4, #0
   26534:	beq	265e4 <__assert_fail@plt+0x13b34>
   26538:	mov	r5, r3
   2653c:	ldr	r7, [r3, #-4]
   26540:	ldr	r3, [r3]
   26544:	uxtb	r4, r4
   26548:	ldr	r6, [r5, #4]
   2654c:	cmp	r4, #2
   26550:	bic	r6, lr, r6
   26554:	beq	26580 <__assert_fail@plt+0x13ad0>
   26558:	cmp	r4, #3
   2655c:	bne	2658c <__assert_fail@plt+0x13adc>
   26560:	and	r4, r3, r0
   26564:	tst	r4, #146	; 0x92
   26568:	mov	r3, r4
   2656c:	orrne	r3, r3, #146	; 0x92
   26570:	tst	r4, #292	; 0x124
   26574:	orrne	r3, r3, #292	; 0x124
   26578:	tst	r4, #73	; 0x49
   2657c:	b	26588 <__assert_fail@plt+0x13ad8>
   26580:	and	r4, r0, #73	; 0x49
   26584:	orrs	r4, r4, r1
   26588:	orrne	r3, r3, #73	; 0x49
   2658c:	cmp	r7, #0
   26590:	mov	r4, r7
   26594:	mvneq	r4, r2
   26598:	bic	r4, r4, r6
   2659c:	and	r3, r4, r3
   265a0:	ldrb	r4, [r5, #-8]
   265a4:	cmp	r4, #43	; 0x2b
   265a8:	beq	265d8 <__assert_fail@plt+0x13b28>
   265ac:	cmp	r4, #45	; 0x2d
   265b0:	beq	26520 <__assert_fail@plt+0x13a70>
   265b4:	cmp	r4, #61	; 0x3d
   265b8:	bne	26528 <__assert_fail@plt+0x13a78>
   265bc:	mvn	r4, r7
   265c0:	cmp	r7, #0
   265c4:	orrne	r6, r6, r4
   265c8:	and	r0, r6, r0
   265cc:	orr	r0, r3, r0
   265d0:	bic	r3, r8, r6
   265d4:	b	26524 <__assert_fail@plt+0x13a74>
   265d8:	orr	r0, r3, r0
   265dc:	b	26524 <__assert_fail@plt+0x13a74>
   265e0:	mov	r9, #0
   265e4:	cmp	ip, #0
   265e8:	strne	r9, [ip]
   265ec:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   265f0:	push	{fp, lr}
   265f4:	mov	fp, sp
   265f8:	mov	r4, r0
   265fc:	movw	r0, #58608	; 0xe4f0
   26600:	movw	r1, #50220	; 0xc42c
   26604:	mov	r2, #5
   26608:	movt	r0, #5
   2660c:	movt	r1, #4
   26610:	ldr	r5, [r0]
   26614:	mov	r0, #0
   26618:	bl	12564 <dcgettext@plt>
   2661c:	mov	r2, r0
   26620:	mov	r0, r5
   26624:	mov	r1, r4
   26628:	bl	1269c <error@plt>
   2662c:	bl	12a5c <abort@plt>
   26630:	push	{fp, lr}
   26634:	mov	fp, sp
   26638:	mov	r4, r0
   2663c:	movw	r0, #58608	; 0xe4f0
   26640:	movw	r1, #50263	; 0xc457
   26644:	mov	r2, #5
   26648:	movt	r0, #5
   2664c:	movt	r1, #4
   26650:	ldr	r5, [r0]
   26654:	mov	r0, #0
   26658:	bl	12564 <dcgettext@plt>
   2665c:	mov	r2, r0
   26660:	mov	r0, r5
   26664:	mov	r1, r4
   26668:	bl	1269c <error@plt>
   2666c:	bl	12a5c <abort@plt>
   26670:	sub	sp, sp, #4
   26674:	push	{fp, lr}
   26678:	mov	fp, sp
   2667c:	sub	sp, sp, #4
   26680:	str	r3, [fp, #8]
   26684:	tst	r2, #64	; 0x40
   26688:	mov	r3, #0
   2668c:	ldrne	r3, [fp, #8]
   26690:	bl	127e0 <openat64@plt>
   26694:	bl	2d964 <__assert_fail@plt+0x1aeb4>
   26698:	mov	sp, fp
   2669c:	pop	{fp, lr}
   266a0:	add	sp, sp, #4
   266a4:	bx	lr
   266a8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   266ac:	add	fp, sp, #28
   266b0:	sub	sp, sp, #4
   266b4:	vpush	{d8-d9}
   266b8:	sub	sp, sp, #1424	; 0x590
   266bc:	mov	r8, r0
   266c0:	add	r0, r0, #48	; 0x30
   266c4:	sub	r1, fp, #72	; 0x48
   266c8:	movw	lr, #50368	; 0xc4c0
   266cc:	vmov.i32	q4, #0	; 0x00000000
   266d0:	mvn	r4, #1
   266d4:	add	r3, sp, #240	; 0xf0
   266d8:	sub	r9, fp, #112	; 0x70
   266dc:	mov	sl, #0
   266e0:	mov	r7, #0
   266e4:	str	r0, [sp, #84]	; 0x54
   266e8:	add	r0, r1, #1
   266ec:	movt	lr, #4
   266f0:	add	ip, r1, #19
   266f4:	str	r0, [sp, #76]	; 0x4c
   266f8:	add	r0, r8, #8
   266fc:	str	ip, [sp, #168]	; 0xa8
   26700:	str	r0, [sp, #88]	; 0x58
   26704:	add	r0, r8, #32
   26708:	str	r0, [sp, #92]	; 0x5c
   2670c:	add	r0, r8, #40	; 0x28
   26710:	str	r0, [sp, #80]	; 0x50
   26714:	add	r0, r8, #56	; 0x38
   26718:	str	r0, [sp, #160]	; 0xa0
   2671c:	add	r0, r8, #64	; 0x40
   26720:	str	r0, [sp, #156]	; 0x9c
   26724:	add	r0, r8, #72	; 0x48
   26728:	str	r0, [sp, #136]	; 0x88
   2672c:	add	r0, r8, #80	; 0x50
   26730:	str	r0, [sp, #132]	; 0x84
   26734:	add	r0, r8, #88	; 0x58
   26738:	str	r0, [sp, #72]	; 0x48
   2673c:	add	r0, r8, #96	; 0x60
   26740:	str	r0, [sp, #116]	; 0x74
   26744:	add	r0, r8, #104	; 0x68
   26748:	str	r0, [sp, #112]	; 0x70
   2674c:	add	r0, r8, #112	; 0x70
   26750:	str	r0, [sp, #108]	; 0x6c
   26754:	add	r0, r8, #120	; 0x78
   26758:	str	r0, [sp, #104]	; 0x68
   2675c:	add	r0, r8, #128	; 0x80
   26760:	str	r0, [sp, #100]	; 0x64
   26764:	add	r0, r8, #136	; 0x88
   26768:	str	r0, [sp, #96]	; 0x60
   2676c:	mov	r0, #0
   26770:	strh	r0, [fp, #-112]	; 0xffffff90
   26774:	mov	r0, #0
   26778:	str	r0, [sp, #120]	; 0x78
   2677c:	mov	r0, #0
   26780:	str	r0, [sp, #124]	; 0x7c
   26784:	mov	r0, #0
   26788:	str	r0, [sp, #128]	; 0x80
   2678c:	mov	r0, #0
   26790:	str	r0, [sp, #144]	; 0x90
   26794:	mov	r0, #0
   26798:	str	r0, [sp, #148]	; 0x94
   2679c:	mov	r0, #0
   267a0:	str	r0, [sp, #140]	; 0x8c
   267a4:	cmp	sl, #12
   267a8:	bne	267e0 <__assert_fail@plt+0x13d30>
   267ac:	b	29f78 <__assert_fail@plt+0x174c8>
   267b0:	movw	r1, #51310	; 0xc86e
   267b4:	ldr	r4, [sp, #176]	; 0xb0
   267b8:	movt	r1, #4
   267bc:	add	r0, r1, r0
   267c0:	ldrsb	sl, [r0]
   267c4:	add	r7, r7, #1
   267c8:	add	r0, r9, r7, lsl #1
   267cc:	cmp	r7, #18
   267d0:	strh	sl, [r0]
   267d4:	bgt	29f88 <__assert_fail@plt+0x174d8>
   267d8:	cmp	sl, #12
   267dc:	beq	29f78 <__assert_fail@plt+0x174c8>
   267e0:	add	r0, lr, sl
   267e4:	str	r7, [sp, #184]	; 0xb8
   267e8:	ldrsb	r5, [r0]
   267ec:	cmn	r5, #93	; 0x5d
   267f0:	beq	276f8 <__assert_fail@plt+0x14c48>
   267f4:	cmn	r4, #2
   267f8:	bne	26ee4 <__assert_fail@plt+0x14434>
   267fc:	ldr	r1, [r8]
   26800:	str	r3, [sp, #172]	; 0xac
   26804:	b	26810 <__assert_fail@plt+0x13d60>
   26808:	add	r1, r1, #1
   2680c:	str	r1, [r8]
   26810:	ldrb	r3, [r1]
   26814:	sub	r0, r3, #9
   26818:	cmp	r0, #5
   2681c:	bcc	26808 <__assert_fail@plt+0x13d58>
   26820:	cmp	r3, #32
   26824:	beq	26808 <__assert_fail@plt+0x13d58>
   26828:	sub	r0, r3, #48	; 0x30
   2682c:	cmp	r0, #10
   26830:	bcs	26844 <__assert_fail@plt+0x13d94>
   26834:	cmp	r3, #45	; 0x2d
   26838:	cmpne	r3, #43	; 0x2b
   2683c:	beq	269a4 <__assert_fail@plt+0x13ef4>
   26840:	b	26a40 <__assert_fail@plt+0x13f90>
   26844:	sub	r0, r3, #40	; 0x28
   26848:	cmp	r0, #82	; 0x52
   2684c:	bhi	27694 <__assert_fail@plt+0x14be4>
   26850:	add	r2, pc, #0
   26854:	ldr	pc, [r2, r0, lsl #2]
   26858:	ldrdeq	r6, [r2], -r4
   2685c:	muleq	r2, r4, r6
   26860:	muleq	r2, r4, r6
   26864:	andeq	r6, r2, r4, lsr #19
   26868:	muleq	r2, r4, r6
   2686c:	andeq	r6, r2, r4, lsr #19
   26870:	muleq	r2, r4, r6
   26874:	muleq	r2, r4, r6
   26878:	muleq	r2, r4, r6
   2687c:	muleq	r2, r4, r6
   26880:	muleq	r2, r4, r6
   26884:	muleq	r2, r4, r6
   26888:	muleq	r2, r4, r6
   2688c:	muleq	r2, r4, r6
   26890:	muleq	r2, r4, r6
   26894:	muleq	r2, r4, r6
   26898:	muleq	r2, r4, r6
   2689c:	muleq	r2, r4, r6
   268a0:	muleq	r2, r4, r6
   268a4:	muleq	r2, r4, r6
   268a8:	muleq	r2, r4, r6
   268ac:	muleq	r2, r4, r6
   268b0:	muleq	r2, r4, r6
   268b4:	muleq	r2, r4, r6
   268b8:	muleq	r2, r4, r6
   268bc:	andeq	r6, r2, r4, lsr ip
   268c0:	andeq	r6, r2, r4, lsr ip
   268c4:	andeq	r6, r2, r4, lsr ip
   268c8:	andeq	r6, r2, r4, lsr ip
   268cc:	andeq	r6, r2, r4, lsr ip
   268d0:	andeq	r6, r2, r4, lsr ip
   268d4:	andeq	r6, r2, r4, lsr ip
   268d8:	andeq	r6, r2, r4, lsr ip
   268dc:	andeq	r6, r2, r4, lsr ip
   268e0:	andeq	r6, r2, r4, lsr ip
   268e4:	andeq	r6, r2, r4, lsr ip
   268e8:	andeq	r6, r2, r4, lsr ip
   268ec:	andeq	r6, r2, r4, lsr ip
   268f0:	andeq	r6, r2, r4, lsr ip
   268f4:	andeq	r6, r2, r4, lsr ip
   268f8:	andeq	r6, r2, r4, lsr ip
   268fc:	andeq	r6, r2, r4, lsr ip
   26900:	andeq	r6, r2, r4, lsr ip
   26904:	andeq	r6, r2, r4, lsr ip
   26908:	andeq	r6, r2, r4, lsr ip
   2690c:	andeq	r6, r2, r4, lsr ip
   26910:	andeq	r6, r2, r4, lsr ip
   26914:	andeq	r6, r2, r4, lsr ip
   26918:	andeq	r6, r2, r4, lsr ip
   2691c:	andeq	r6, r2, r4, lsr ip
   26920:	andeq	r6, r2, r4, lsr ip
   26924:	muleq	r2, r4, r6
   26928:	muleq	r2, r4, r6
   2692c:	muleq	r2, r4, r6
   26930:	muleq	r2, r4, r6
   26934:	muleq	r2, r4, r6
   26938:	muleq	r2, r4, r6
   2693c:	andeq	r6, r2, r4, lsr ip
   26940:	andeq	r6, r2, r4, lsr ip
   26944:	andeq	r6, r2, r4, lsr ip
   26948:	andeq	r6, r2, r4, lsr ip
   2694c:	andeq	r6, r2, r4, lsr ip
   26950:	andeq	r6, r2, r4, lsr ip
   26954:	andeq	r6, r2, r4, lsr ip
   26958:	andeq	r6, r2, r4, lsr ip
   2695c:	andeq	r6, r2, r4, lsr ip
   26960:	andeq	r6, r2, r4, lsr ip
   26964:	andeq	r6, r2, r4, lsr ip
   26968:	andeq	r6, r2, r4, lsr ip
   2696c:	andeq	r6, r2, r4, lsr ip
   26970:	andeq	r6, r2, r4, lsr ip
   26974:	andeq	r6, r2, r4, lsr ip
   26978:	andeq	r6, r2, r4, lsr ip
   2697c:	andeq	r6, r2, r4, lsr ip
   26980:	andeq	r6, r2, r4, lsr ip
   26984:	andeq	r6, r2, r4, lsr ip
   26988:	andeq	r6, r2, r4, lsr ip
   2698c:	andeq	r6, r2, r4, lsr ip
   26990:	andeq	r6, r2, r4, lsr ip
   26994:	andeq	r6, r2, r4, lsr ip
   26998:	andeq	r6, r2, r4, lsr ip
   2699c:	andeq	r6, r2, r4, lsr ip
   269a0:	andeq	r6, r2, r4, lsr ip
   269a4:	add	r1, r1, #1
   269a8:	str	r1, [r8]
   269ac:	ldrb	r2, [r1]
   269b0:	sub	r0, r2, #9
   269b4:	cmp	r0, #5
   269b8:	bcc	269a4 <__assert_fail@plt+0x13ef4>
   269bc:	cmp	r2, #32
   269c0:	beq	269a4 <__assert_fail@plt+0x13ef4>
   269c4:	sub	r0, r2, #48	; 0x30
   269c8:	cmp	r0, #9
   269cc:	bhi	26810 <__assert_fail@plt+0x13d60>
   269d0:	b	26a2c <__assert_fail@plt+0x13f7c>
   269d4:	mov	r0, #0
   269d8:	b	269e8 <__assert_fail@plt+0x13f38>
   269dc:	sub	r0, r0, #1
   269e0:	cmp	r0, #0
   269e4:	beq	26810 <__assert_fail@plt+0x13d60>
   269e8:	mov	r2, r1
   269ec:	add	r1, r1, #1
   269f0:	str	r1, [r8]
   269f4:	ldrb	r2, [r2]
   269f8:	cmp	r2, #40	; 0x28
   269fc:	beq	26a14 <__assert_fail@plt+0x13f64>
   26a00:	cmp	r2, #41	; 0x29
   26a04:	beq	269dc <__assert_fail@plt+0x13f2c>
   26a08:	cmp	r2, #0
   26a0c:	bne	269e0 <__assert_fail@plt+0x13f30>
   26a10:	b	26a24 <__assert_fail@plt+0x13f74>
   26a14:	add	r0, r0, #1
   26a18:	cmp	r0, #0
   26a1c:	bne	269e8 <__assert_fail@plt+0x13f38>
   26a20:	b	26810 <__assert_fail@plt+0x13d60>
   26a24:	ldr	r3, [sp, #172]	; 0xac
   26a28:	b	276ac <__assert_fail@plt+0x14bfc>
   26a2c:	cmp	r3, #45	; 0x2d
   26a30:	mov	r0, #1
   26a34:	str	r5, [sp, #236]	; 0xec
   26a38:	mvneq	r0, #0
   26a3c:	b	26a4c <__assert_fail@plt+0x13f9c>
   26a40:	mov	r0, #0
   26a44:	mov	r2, r3
   26a48:	str	r5, [sp, #236]	; 0xec
   26a4c:	mov	r5, #0
   26a50:	mov	r3, r1
   26a54:	cmn	r5, #1
   26a58:	ble	26a70 <__assert_fail@plt+0x13fc0>
   26a5c:	movw	r6, #52428	; 0xcccc
   26a60:	movt	r6, #3276	; 0xccc
   26a64:	cmp	r5, r6
   26a68:	ble	26a84 <__assert_fail@plt+0x13fd4>
   26a6c:	b	26d74 <__assert_fail@plt+0x142c4>
   26a70:	beq	26a84 <__assert_fail@plt+0x13fd4>
   26a74:	mov	r6, #-2147483648	; 0x80000000
   26a78:	sdiv	r6, r6, r5
   26a7c:	cmp	r6, #10
   26a80:	blt	26d74 <__assert_fail@plt+0x142c4>
   26a84:	mvn	r6, #47	; 0x2f
   26a88:	cmp	r0, #0
   26a8c:	mov	r4, #63	; 0x3f
   26a90:	uxtab	r6, r6, r2
   26a94:	uxtb	r2, r2
   26a98:	rsbmi	r6, r2, #48	; 0x30
   26a9c:	add	r2, r5, r5, lsl #2
   26aa0:	add	r5, r6, r2, lsl #1
   26aa4:	cmp	r5, r2, lsl #1
   26aa8:	bvs	26f68 <__assert_fail@plt+0x144b8>
   26aac:	ldrb	r2, [r3, #1]!
   26ab0:	sub	r6, r2, #48	; 0x30
   26ab4:	cmp	r6, #10
   26ab8:	bcc	26a54 <__assert_fail@plt+0x13fa4>
   26abc:	orr	r2, r2, #2
   26ac0:	cmp	r2, #46	; 0x2e
   26ac4:	bne	26d7c <__assert_fail@plt+0x142cc>
   26ac8:	ldrb	r2, [r3, #1]
   26acc:	sub	r2, r2, #48	; 0x30
   26ad0:	cmp	r2, #9
   26ad4:	bhi	26d7c <__assert_fail@plt+0x142cc>
   26ad8:	mov	r1, r3
   26adc:	add	r2, r2, r2, lsl #2
   26ae0:	ldrb	r6, [r1, #2]!
   26ae4:	sub	r4, r6, #48	; 0x30
   26ae8:	mov	r6, #2
   26aec:	cmp	r4, #10
   26af0:	movwcc	r6, #3
   26af4:	addcc	r1, r3, #3
   26af8:	ldrb	r3, [r3, r6]
   26afc:	sub	r3, r3, #48	; 0x30
   26b00:	cmp	r3, #10
   26b04:	str	r3, [sp, #232]	; 0xe8
   26b08:	addcc	r1, r1, #1
   26b0c:	mov	r3, r1
   26b10:	ldrb	r6, [r3], #1
   26b14:	sub	r7, r6, #48	; 0x30
   26b18:	cmp	r7, #10
   26b1c:	str	r7, [sp, #228]	; 0xe4
   26b20:	movcs	r3, r1
   26b24:	mov	r1, r3
   26b28:	ldrb	r6, [r1], #1
   26b2c:	sub	r7, r6, #48	; 0x30
   26b30:	cmp	r7, #10
   26b34:	movcs	r1, r3
   26b38:	mov	r3, r1
   26b3c:	ldrb	r6, [r3], #1
   26b40:	sub	r9, r6, #48	; 0x30
   26b44:	cmp	r9, #10
   26b48:	movcs	r3, r1
   26b4c:	mov	r1, r3
   26b50:	ldrb	r6, [r1], #1
   26b54:	sub	lr, r6, #48	; 0x30
   26b58:	cmp	lr, #10
   26b5c:	movcs	r1, r3
   26b60:	mov	r6, r1
   26b64:	ldrb	r3, [r6], #1
   26b68:	sub	ip, r3, #48	; 0x30
   26b6c:	cmp	ip, #10
   26b70:	movcs	r6, r1
   26b74:	mov	r1, r6
   26b78:	ldrb	r3, [r1], #1
   26b7c:	sub	r3, r3, #48	; 0x30
   26b80:	cmp	r3, #10
   26b84:	movcs	r1, r6
   26b88:	cmp	r4, #10
   26b8c:	lsl	r6, r2, #1
   26b90:	addcc	r6, r4, r2, lsl #1
   26b94:	ldr	r4, [sp, #232]	; 0xe8
   26b98:	add	r2, r6, r6, lsl #2
   26b9c:	cmp	r4, #10
   26ba0:	lsl	r6, r2, #1
   26ba4:	addcc	r6, r4, r2, lsl #1
   26ba8:	ldr	r4, [sp, #228]	; 0xe4
   26bac:	add	r2, r6, r6, lsl #2
   26bb0:	cmp	r4, #10
   26bb4:	lsl	r6, r2, #1
   26bb8:	addcc	r6, r4, r2, lsl #1
   26bbc:	cmp	r7, #10
   26bc0:	add	r2, r6, r6, lsl #2
   26bc4:	lsl	r6, r2, #1
   26bc8:	addcc	r6, r7, r2, lsl #1
   26bcc:	cmp	r9, #10
   26bd0:	add	r2, r6, r6, lsl #2
   26bd4:	lsl	r6, r2, #1
   26bd8:	addcc	r6, r9, r2, lsl #1
   26bdc:	cmp	lr, #10
   26be0:	add	r2, r6, r6, lsl #2
   26be4:	lsl	r6, r2, #1
   26be8:	addcc	r6, lr, r2, lsl #1
   26bec:	cmp	ip, #10
   26bf0:	add	r2, r6, r6, lsl #2
   26bf4:	lsl	r6, r2, #1
   26bf8:	addcc	r6, ip, r2, lsl #1
   26bfc:	cmp	r3, #10
   26c00:	add	r6, r6, r6, lsl #2
   26c04:	lsl	r2, r6, #1
   26c08:	addcc	r2, r3, r6, lsl #1
   26c0c:	cmn	r0, #1
   26c10:	ble	26dcc <__assert_fail@plt+0x1431c>
   26c14:	ldr	ip, [sp, #168]	; 0xa8
   26c18:	ldr	r7, [sp, #184]	; 0xb8
   26c1c:	movw	lr, #50368	; 0xc4c0
   26c20:	sub	r4, fp, #112	; 0x70
   26c24:	mov	r9, r4
   26c28:	movt	lr, #4
   26c2c:	mov	r4, #63	; 0x3f
   26c30:	b	26f04 <__assert_fail@plt+0x14454>
   26c34:	sub	r0, fp, #72	; 0x48
   26c38:	str	r5, [sp, #236]	; 0xec
   26c3c:	mov	r5, r0
   26c40:	cmp	r5, ip
   26c44:	bcs	26c54 <__assert_fail@plt+0x141a4>
   26c48:	strb	r3, [r5], #1
   26c4c:	ldr	r2, [r8]
   26c50:	b	26c58 <__assert_fail@plt+0x141a8>
   26c54:	mov	r2, r1
   26c58:	add	r1, r2, #1
   26c5c:	str	r1, [r8]
   26c60:	ldrb	r3, [r2, #1]
   26c64:	mov	r2, #1
   26c68:	sub	r6, r3, #65	; 0x41
   26c6c:	cmp	r6, #26
   26c70:	subcs	r6, r3, #97	; 0x61
   26c74:	cmpcs	r6, #26
   26c78:	movcs	r2, #0
   26c7c:	cmp	r3, #46	; 0x2e
   26c80:	beq	26c40 <__assert_fail@plt+0x14190>
   26c84:	cmp	r2, #0
   26c88:	bne	26c40 <__assert_fail@plt+0x14190>
   26c8c:	mov	r1, #0
   26c90:	mov	r6, r9
   26c94:	mvn	r3, #96	; 0x60
   26c98:	strb	r1, [r5]
   26c9c:	ldrb	r7, [fp, #-72]	; 0xffffffb8
   26ca0:	cmp	r7, #0
   26ca4:	beq	26ccc <__assert_fail@plt+0x1421c>
   26ca8:	ldr	r1, [sp, #76]	; 0x4c
   26cac:	uxtab	r2, r3, r7
   26cb0:	cmp	r2, #26
   26cb4:	subcc	r7, r7, #32
   26cb8:	strb	r7, [r1, #-1]
   26cbc:	ldrb	r7, [r1]
   26cc0:	add	r1, r1, #1
   26cc4:	cmp	r7, #0
   26cc8:	bne	26cac <__assert_fail@plt+0x141fc>
   26ccc:	movw	r1, #53083	; 0xcf5b
   26cd0:	mov	r2, #3
   26cd4:	movt	r1, #4
   26cd8:	bl	127a4 <bcmp@plt>
   26cdc:	movw	r9, #51336	; 0xc888
   26ce0:	sub	r4, fp, #72	; 0x48
   26ce4:	cmp	r0, #0
   26ce8:	movt	r9, #4
   26cec:	beq	26ea4 <__assert_fail@plt+0x143f4>
   26cf0:	movw	r1, #53086	; 0xcf5e
   26cf4:	mov	r0, r4
   26cf8:	mov	r2, #5
   26cfc:	movt	r1, #4
   26d00:	bl	127a4 <bcmp@plt>
   26d04:	cmp	r0, #0
   26d08:	beq	26dac <__assert_fail@plt+0x142fc>
   26d0c:	movw	r1, #53091	; 0xcf63
   26d10:	mov	r0, r4
   26d14:	mov	r2, #3
   26d18:	movt	r1, #4
   26d1c:	bl	127a4 <bcmp@plt>
   26d20:	cmp	r0, #0
   26d24:	beq	26dbc <__assert_fail@plt+0x1430c>
   26d28:	movw	r1, #53094	; 0xcf66
   26d2c:	mov	r0, r4
   26d30:	mov	r2, #5
   26d34:	movt	r1, #4
   26d38:	bl	127a4 <bcmp@plt>
   26d3c:	cmp	r0, #0
   26d40:	beq	26e18 <__assert_fail@plt+0x14368>
   26d44:	mov	r0, r4
   26d48:	bl	127bc <strlen@plt>
   26d4c:	mov	r7, r0
   26d50:	cmp	r0, #3
   26d54:	beq	26e28 <__assert_fail@plt+0x14378>
   26d58:	cmp	r7, #4
   26d5c:	bne	26e30 <__assert_fail@plt+0x14380>
   26d60:	ldrb	r0, [fp, #-69]	; 0xffffffbb
   26d64:	sub	r0, r0, #46	; 0x2e
   26d68:	clz	r0, r0
   26d6c:	lsr	r5, r0, #5
   26d70:	b	26e34 <__assert_fail@plt+0x14384>
   26d74:	mov	r4, #63	; 0x3f
   26d78:	b	26f68 <__assert_fail@plt+0x144b8>
   26d7c:	sub	r1, r3, r1
   26d80:	cmp	r0, #0
   26d84:	lsr	r0, r0, #31
   26d88:	movw	r4, #274	; 0x112
   26d8c:	str	r3, [r8]
   26d90:	str	r5, [sp, #120]	; 0x78
   26d94:	str	r1, [sp, #128]	; 0x80
   26d98:	asr	r1, r5, #31
   26d9c:	movweq	r4, #275	; 0x113
   26da0:	str	r0, [sp, #148]	; 0x94
   26da4:	str	r1, [sp, #124]	; 0x7c
   26da8:	b	26f68 <__assert_fail@plt+0x144b8>
   26dac:	movw	r0, #51336	; 0xc888
   26db0:	movt	r0, #4
   26db4:	add	r9, r0, #12
   26db8:	b	26ea4 <__assert_fail@plt+0x143f4>
   26dbc:	movw	r0, #51336	; 0xc888
   26dc0:	movt	r0, #4
   26dc4:	add	r9, r0, #24
   26dc8:	b	26ea4 <__assert_fail@plt+0x143f4>
   26dcc:	ldrb	r3, [r1]
   26dd0:	ldr	ip, [sp, #168]	; 0xa8
   26dd4:	ldr	r7, [sp, #184]	; 0xb8
   26dd8:	movw	lr, #50368	; 0xc4c0
   26ddc:	sub	r4, fp, #112	; 0x70
   26de0:	movt	lr, #4
   26de4:	mov	r9, r4
   26de8:	mov	r4, #63	; 0x3f
   26dec:	sub	r6, r3, #48	; 0x30
   26df0:	cmp	r6, #9
   26df4:	bhi	26f04 <__assert_fail@plt+0x14454>
   26df8:	uxtb	r3, r3
   26dfc:	cmp	r3, #48	; 0x30
   26e00:	bne	26f00 <__assert_fail@plt+0x14450>
   26e04:	ldrb	r3, [r1, #1]!
   26e08:	sub	r6, r3, #48	; 0x30
   26e0c:	cmp	r6, #10
   26e10:	bcc	26df8 <__assert_fail@plt+0x14348>
   26e14:	b	26f04 <__assert_fail@plt+0x14454>
   26e18:	movw	r0, #51336	; 0xc888
   26e1c:	movt	r0, #4
   26e20:	add	r9, r0, #36	; 0x24
   26e24:	b	26ea4 <__assert_fail@plt+0x143f4>
   26e28:	mov	r5, #1
   26e2c:	b	26e34 <__assert_fail@plt+0x14384>
   26e30:	mov	r5, #0
   26e34:	movw	r1, #53099	; 0xcf6b
   26e38:	movw	r9, #51396	; 0xc8c4
   26e3c:	sub	r2, fp, #72	; 0x48
   26e40:	movt	r1, #4
   26e44:	movt	r9, #4
   26e48:	b	26e68 <__assert_fail@plt+0x143b8>
   26e4c:	bl	123fc <strcmp@plt>
   26e50:	cmp	r0, #0
   26e54:	beq	26ea4 <__assert_fail@plt+0x143f4>
   26e58:	ldr	r1, [r9, #12]!
   26e5c:	sub	r2, fp, #72	; 0x48
   26e60:	cmp	r1, #0
   26e64:	beq	26e88 <__assert_fail@plt+0x143d8>
   26e68:	mov	r0, r2
   26e6c:	cmp	r5, #0
   26e70:	beq	26e4c <__assert_fail@plt+0x1439c>
   26e74:	mov	r2, #3
   26e78:	bl	12a50 <strncmp@plt>
   26e7c:	cmp	r0, #0
   26e80:	bne	26e58 <__assert_fail@plt+0x143a8>
   26e84:	b	26ea4 <__assert_fail@plt+0x143f4>
   26e88:	mov	r0, r8
   26e8c:	mov	r1, r2
   26e90:	bl	2b110 <__assert_fail@plt+0x18660>
   26e94:	sub	r4, fp, #72	; 0x48
   26e98:	mov	r9, r0
   26e9c:	cmp	r0, #0
   26ea0:	beq	26f80 <__assert_fail@plt+0x144d0>
   26ea4:	ldr	r1, [r9, #8]
   26ea8:	ldr	r5, [r9, #4]
   26eac:	asr	r0, r1, #31
   26eb0:	str	r1, [sp, #148]	; 0x94
   26eb4:	str	r0, [sp, #144]	; 0x90
   26eb8:	mov	r0, r1
   26ebc:	lsr	r0, r1, #8
   26ec0:	str	r0, [sp, #140]	; 0x8c
   26ec4:	mov	r4, r5
   26ec8:	ldr	ip, [sp, #168]	; 0xa8
   26ecc:	ldr	r3, [sp, #172]	; 0xac
   26ed0:	ldr	r7, [sp, #184]	; 0xb8
   26ed4:	ldr	r5, [sp, #236]	; 0xec
   26ed8:	movw	lr, #50368	; 0xc4c0
   26edc:	mov	r9, r6
   26ee0:	movt	lr, #4
   26ee4:	cmp	r4, #1
   26ee8:	blt	276ac <__assert_fail@plt+0x14bfc>
   26eec:	lsr	r1, r4, #1
   26ef0:	mov	r0, #2
   26ef4:	cmp	r1, #138	; 0x8a
   26ef8:	bls	26f70 <__assert_fail@plt+0x144c0>
   26efc:	b	276b4 <__assert_fail@plt+0x14c04>
   26f00:	add	r2, r2, #1
   26f04:	sub	r1, r1, #1
   26f08:	ldrb	r3, [r1, #1]!
   26f0c:	sub	r3, r3, #48	; 0x30
   26f10:	cmp	r3, #10
   26f14:	bcc	26f08 <__assert_fail@plt+0x14458>
   26f18:	cmn	r0, #1
   26f1c:	bgt	26f44 <__assert_fail@plt+0x14494>
   26f20:	cmp	r2, #0
   26f24:	beq	26f44 <__assert_fail@plt+0x14494>
   26f28:	sub	r3, r5, #1
   26f2c:	cmp	r3, r5
   26f30:	bvs	26f68 <__assert_fail@plt+0x144b8>
   26f34:	movw	r5, #51712	; 0xca00
   26f38:	movt	r5, #15258	; 0x3b9a
   26f3c:	sub	r2, r5, r2
   26f40:	mov	r5, r3
   26f44:	str	r2, [sp, #144]	; 0x90
   26f48:	cmp	r0, #0
   26f4c:	mov	r0, r5
   26f50:	lsr	r0, r5, #8
   26f54:	mov	r4, #276	; 0x114
   26f58:	str	r1, [r8]
   26f5c:	str	r5, [sp, #148]	; 0x94
   26f60:	movweq	r4, #277	; 0x115
   26f64:	str	r0, [sp, #140]	; 0x8c
   26f68:	ldr	r3, [sp, #172]	; 0xac
   26f6c:	ldr	r5, [sp, #236]	; 0xec
   26f70:	movw	r0, #50482	; 0xc532
   26f74:	movt	r0, #4
   26f78:	ldrb	r0, [r0, r4]
   26f7c:	b	276b4 <__assert_fail@plt+0x14c04>
   26f80:	movw	r1, #53467	; 0xd0db
   26f84:	mov	r0, r4
   26f88:	mov	r2, #4
   26f8c:	movt	r1, #4
   26f90:	bl	127a4 <bcmp@plt>
   26f94:	movw	r9, #51696	; 0xc9f0
   26f98:	sub	r4, fp, #72	; 0x48
   26f9c:	cmp	r0, #0
   26fa0:	movt	r9, #4
   26fa4:	beq	26ea4 <__assert_fail@plt+0x143f4>
   26fa8:	movw	r1, #53471	; 0xd0df
   26fac:	mov	r0, r4
   26fb0:	mov	r2, #5
   26fb4:	movt	r1, #4
   26fb8:	bl	127a4 <bcmp@plt>
   26fbc:	movw	r9, #51708	; 0xc9fc
   26fc0:	sub	r4, fp, #72	; 0x48
   26fc4:	cmp	r0, #0
   26fc8:	movt	r9, #4
   26fcc:	beq	26ea4 <__assert_fail@plt+0x143f4>
   26fd0:	movw	r1, #53476	; 0xd0e4
   26fd4:	mov	r0, r4
   26fd8:	mov	r2, #6
   26fdc:	movt	r1, #4
   26fe0:	bl	127a4 <bcmp@plt>
   26fe4:	movw	r5, #51708	; 0xc9fc
   26fe8:	cmp	r0, #0
   26fec:	movt	r5, #4
   26ff0:	add	r9, r5, #12
   26ff4:	beq	26ea4 <__assert_fail@plt+0x143f4>
   26ff8:	movw	r1, #53482	; 0xd0ea
   26ffc:	mov	r0, r4
   27000:	mov	r2, #10
   27004:	str	r9, [sp, #232]	; 0xe8
   27008:	movt	r1, #4
   2700c:	bl	127a4 <bcmp@plt>
   27010:	add	r9, r5, #24
   27014:	cmp	r0, #0
   27018:	beq	26ea4 <__assert_fail@plt+0x143f4>
   2701c:	movw	r1, #53492	; 0xd0f4
   27020:	mov	r0, r4
   27024:	mov	r2, #5
   27028:	str	r9, [sp, #228]	; 0xe4
   2702c:	movt	r1, #4
   27030:	bl	127a4 <bcmp@plt>
   27034:	add	r9, r5, #36	; 0x24
   27038:	cmp	r0, #0
   2703c:	beq	26ea4 <__assert_fail@plt+0x143f4>
   27040:	movw	r1, #53257	; 0xd009
   27044:	mov	r0, r4
   27048:	mov	r2, #4
   2704c:	str	r9, [sp, #224]	; 0xe0
   27050:	movt	r1, #4
   27054:	bl	127a4 <bcmp@plt>
   27058:	add	r9, r5, #48	; 0x30
   2705c:	cmp	r0, #0
   27060:	beq	26ea4 <__assert_fail@plt+0x143f4>
   27064:	movw	r1, #53497	; 0xd0f9
   27068:	mov	r0, r4
   2706c:	mov	r2, #5
   27070:	str	r9, [sp, #220]	; 0xdc
   27074:	movt	r1, #4
   27078:	bl	127a4 <bcmp@plt>
   2707c:	add	r9, r5, #60	; 0x3c
   27080:	cmp	r0, #0
   27084:	beq	26ea4 <__assert_fail@plt+0x143f4>
   27088:	movw	r1, #53502	; 0xd0fe
   2708c:	mov	r0, r4
   27090:	mov	r2, #7
   27094:	str	r9, [sp, #216]	; 0xd8
   27098:	movt	r1, #4
   2709c:	bl	127a4 <bcmp@plt>
   270a0:	add	r9, r5, #72	; 0x48
   270a4:	cmp	r0, #0
   270a8:	beq	26ea4 <__assert_fail@plt+0x143f4>
   270ac:	movw	r1, #53509	; 0xd105
   270b0:	mov	r0, r4
   270b4:	mov	r2, #4
   270b8:	str	r9, [sp, #212]	; 0xd4
   270bc:	movt	r1, #4
   270c0:	bl	127a4 <bcmp@plt>
   270c4:	add	r9, r5, #84	; 0x54
   270c8:	cmp	r0, #0
   270cc:	beq	26ea4 <__assert_fail@plt+0x143f4>
   270d0:	movw	r1, #53513	; 0xd109
   270d4:	mov	r0, r4
   270d8:	mov	r2, #7
   270dc:	str	r9, [sp, #208]	; 0xd0
   270e0:	movt	r1, #4
   270e4:	bl	127a4 <bcmp@plt>
   270e8:	add	r9, r5, #96	; 0x60
   270ec:	cmp	r0, #0
   270f0:	beq	26ea4 <__assert_fail@plt+0x143f4>
   270f4:	movw	r1, #53520	; 0xd110
   270f8:	sub	r0, fp, #72	; 0x48
   270fc:	mov	r2, #4
   27100:	str	r9, [sp, #204]	; 0xcc
   27104:	movt	r1, #4
   27108:	bl	127a4 <bcmp@plt>
   2710c:	add	r5, r5, #108	; 0x6c
   27110:	cmp	r0, #0
   27114:	beq	29c3c <__assert_fail@plt+0x1718c>
   27118:	sub	r1, r7, #1
   2711c:	sub	r0, fp, #72	; 0x48
   27120:	ldrb	r0, [r0, r1]
   27124:	str	r1, [sp, #200]	; 0xc8
   27128:	cmp	r0, #83	; 0x53
   2712c:	bne	272b4 <__assert_fail@plt+0x14804>
   27130:	ldr	r1, [sp, #200]	; 0xc8
   27134:	sub	r4, fp, #72	; 0x48
   27138:	mov	r0, #0
   2713c:	mov	r2, #5
   27140:	strb	r0, [r4, r1]
   27144:	movw	r1, #53471	; 0xd0df
   27148:	mov	r0, r4
   2714c:	movt	r1, #4
   27150:	bl	127a4 <bcmp@plt>
   27154:	movw	r9, #51708	; 0xc9fc
   27158:	cmp	r0, #0
   2715c:	movt	r9, #4
   27160:	beq	26ea4 <__assert_fail@plt+0x143f4>
   27164:	movw	r1, #53476	; 0xd0e4
   27168:	mov	r0, r4
   2716c:	mov	r2, #6
   27170:	movt	r1, #4
   27174:	bl	127a4 <bcmp@plt>
   27178:	ldr	r9, [sp, #232]	; 0xe8
   2717c:	sub	r4, fp, #72	; 0x48
   27180:	cmp	r0, #0
   27184:	beq	26ea4 <__assert_fail@plt+0x143f4>
   27188:	movw	r1, #53482	; 0xd0ea
   2718c:	mov	r0, r4
   27190:	mov	r2, #10
   27194:	movt	r1, #4
   27198:	bl	127a4 <bcmp@plt>
   2719c:	ldr	r9, [sp, #228]	; 0xe4
   271a0:	sub	r4, fp, #72	; 0x48
   271a4:	cmp	r0, #0
   271a8:	beq	26ea4 <__assert_fail@plt+0x143f4>
   271ac:	movw	r1, #53492	; 0xd0f4
   271b0:	mov	r0, r4
   271b4:	mov	r2, #5
   271b8:	movt	r1, #4
   271bc:	bl	127a4 <bcmp@plt>
   271c0:	ldr	r9, [sp, #224]	; 0xe0
   271c4:	sub	r4, fp, #72	; 0x48
   271c8:	cmp	r0, #0
   271cc:	beq	26ea4 <__assert_fail@plt+0x143f4>
   271d0:	movw	r1, #53257	; 0xd009
   271d4:	mov	r0, r4
   271d8:	mov	r2, #4
   271dc:	movt	r1, #4
   271e0:	bl	127a4 <bcmp@plt>
   271e4:	ldr	r9, [sp, #220]	; 0xdc
   271e8:	sub	r4, fp, #72	; 0x48
   271ec:	cmp	r0, #0
   271f0:	beq	26ea4 <__assert_fail@plt+0x143f4>
   271f4:	movw	r1, #53497	; 0xd0f9
   271f8:	mov	r0, r4
   271fc:	mov	r2, #5
   27200:	movt	r1, #4
   27204:	bl	127a4 <bcmp@plt>
   27208:	ldr	r9, [sp, #216]	; 0xd8
   2720c:	sub	r4, fp, #72	; 0x48
   27210:	cmp	r0, #0
   27214:	beq	26ea4 <__assert_fail@plt+0x143f4>
   27218:	movw	r1, #53502	; 0xd0fe
   2721c:	mov	r0, r4
   27220:	mov	r2, #7
   27224:	movt	r1, #4
   27228:	bl	127a4 <bcmp@plt>
   2722c:	ldr	r9, [sp, #212]	; 0xd4
   27230:	sub	r4, fp, #72	; 0x48
   27234:	cmp	r0, #0
   27238:	beq	26ea4 <__assert_fail@plt+0x143f4>
   2723c:	movw	r1, #53509	; 0xd105
   27240:	mov	r0, r4
   27244:	mov	r2, #4
   27248:	movt	r1, #4
   2724c:	bl	127a4 <bcmp@plt>
   27250:	ldr	r9, [sp, #208]	; 0xd0
   27254:	sub	r4, fp, #72	; 0x48
   27258:	cmp	r0, #0
   2725c:	beq	26ea4 <__assert_fail@plt+0x143f4>
   27260:	movw	r1, #53513	; 0xd109
   27264:	mov	r0, r4
   27268:	mov	r2, #7
   2726c:	movt	r1, #4
   27270:	bl	127a4 <bcmp@plt>
   27274:	ldr	r9, [sp, #204]	; 0xcc
   27278:	sub	r4, fp, #72	; 0x48
   2727c:	cmp	r0, #0
   27280:	beq	26ea4 <__assert_fail@plt+0x143f4>
   27284:	movw	r1, #53520	; 0xd110
   27288:	mov	r0, r4
   2728c:	mov	r2, #4
   27290:	movt	r1, #4
   27294:	bl	127a4 <bcmp@plt>
   27298:	sub	r4, fp, #72	; 0x48
   2729c:	cmp	r0, #0
   272a0:	mov	r9, r5
   272a4:	beq	26ea4 <__assert_fail@plt+0x143f4>
   272a8:	ldr	r1, [sp, #200]	; 0xc8
   272ac:	mov	r0, #83	; 0x53
   272b0:	strb	r0, [r4, r1]
   272b4:	movw	r1, #53524	; 0xd114
   272b8:	sub	r4, fp, #72	; 0x48
   272bc:	mov	r2, #9
   272c0:	movt	r1, #4
   272c4:	mov	r0, r4
   272c8:	bl	127a4 <bcmp@plt>
   272cc:	movw	r9, #51840	; 0xca80
   272d0:	cmp	r0, #0
   272d4:	movt	r9, #4
   272d8:	beq	26ea4 <__assert_fail@plt+0x143f4>
   272dc:	movw	r1, #53533	; 0xd11d
   272e0:	mov	r0, r4
   272e4:	mov	r2, #10
   272e8:	movt	r1, #4
   272ec:	bl	127a4 <bcmp@plt>
   272f0:	cmp	r0, #0
   272f4:	beq	29c44 <__assert_fail@plt+0x17194>
   272f8:	movw	r1, #53543	; 0xd127
   272fc:	sub	r0, fp, #72	; 0x48
   27300:	mov	r2, #6
   27304:	movt	r1, #4
   27308:	bl	127a4 <bcmp@plt>
   2730c:	cmp	r0, #0
   27310:	beq	29c50 <__assert_fail@plt+0x171a0>
   27314:	movw	r1, #53549	; 0xd12d
   27318:	sub	r0, fp, #72	; 0x48
   2731c:	mov	r2, #4
   27320:	movt	r1, #4
   27324:	bl	127a4 <bcmp@plt>
   27328:	cmp	r0, #0
   2732c:	beq	29c60 <__assert_fail@plt+0x171b0>
   27330:	movw	r1, #53553	; 0xd131
   27334:	sub	r0, fp, #72	; 0x48
   27338:	mov	r2, #5
   2733c:	movt	r1, #4
   27340:	bl	127a4 <bcmp@plt>
   27344:	cmp	r0, #0
   27348:	beq	29c70 <__assert_fail@plt+0x171c0>
   2734c:	movw	r1, #53558	; 0xd136
   27350:	sub	r0, fp, #72	; 0x48
   27354:	mov	r2, #5
   27358:	movt	r1, #4
   2735c:	bl	127a4 <bcmp@plt>
   27360:	cmp	r0, #0
   27364:	beq	29c80 <__assert_fail@plt+0x171d0>
   27368:	movw	r1, #53563	; 0xd13b
   2736c:	sub	r0, fp, #72	; 0x48
   27370:	mov	r2, #5
   27374:	movt	r1, #4
   27378:	bl	127a4 <bcmp@plt>
   2737c:	cmp	r0, #0
   27380:	beq	29c90 <__assert_fail@plt+0x171e0>
   27384:	movw	r1, #53568	; 0xd140
   27388:	sub	r0, fp, #72	; 0x48
   2738c:	mov	r2, #6
   27390:	movt	r1, #4
   27394:	bl	127a4 <bcmp@plt>
   27398:	cmp	r0, #0
   2739c:	beq	29ca0 <__assert_fail@plt+0x171f0>
   273a0:	movw	r1, #53574	; 0xd146
   273a4:	sub	r0, fp, #72	; 0x48
   273a8:	mov	r2, #6
   273ac:	movt	r1, #4
   273b0:	bl	127a4 <bcmp@plt>
   273b4:	cmp	r0, #0
   273b8:	beq	29cb0 <__assert_fail@plt+0x17200>
   273bc:	movw	r1, #53580	; 0xd14c
   273c0:	sub	r0, fp, #72	; 0x48
   273c4:	mov	r2, #7
   273c8:	movt	r1, #4
   273cc:	bl	127a4 <bcmp@plt>
   273d0:	cmp	r0, #0
   273d4:	beq	29cc0 <__assert_fail@plt+0x17210>
   273d8:	movw	r1, #53587	; 0xd153
   273dc:	sub	r0, fp, #72	; 0x48
   273e0:	mov	r2, #6
   273e4:	movt	r1, #4
   273e8:	bl	127a4 <bcmp@plt>
   273ec:	cmp	r0, #0
   273f0:	beq	29cd0 <__assert_fail@plt+0x17220>
   273f4:	movw	r1, #53593	; 0xd159
   273f8:	sub	r0, fp, #72	; 0x48
   273fc:	mov	r2, #6
   27400:	movt	r1, #4
   27404:	bl	127a4 <bcmp@plt>
   27408:	cmp	r0, #0
   2740c:	beq	29ce0 <__assert_fail@plt+0x17230>
   27410:	movw	r1, #53599	; 0xd15f
   27414:	sub	r0, fp, #72	; 0x48
   27418:	mov	r2, #8
   2741c:	movt	r1, #4
   27420:	bl	127a4 <bcmp@plt>
   27424:	cmp	r0, #0
   27428:	beq	29cf0 <__assert_fail@plt+0x17240>
   2742c:	movw	r1, #53607	; 0xd167
   27430:	sub	r0, fp, #72	; 0x48
   27434:	mov	r2, #7
   27438:	movt	r1, #4
   2743c:	bl	127a4 <bcmp@plt>
   27440:	cmp	r0, #0
   27444:	beq	29d00 <__assert_fail@plt+0x17250>
   27448:	movw	r1, #53614	; 0xd16e
   2744c:	sub	r0, fp, #72	; 0x48
   27450:	mov	r2, #6
   27454:	movt	r1, #4
   27458:	bl	127a4 <bcmp@plt>
   2745c:	cmp	r0, #0
   27460:	beq	29d10 <__assert_fail@plt+0x17260>
   27464:	movw	r1, #53620	; 0xd174
   27468:	sub	r0, fp, #72	; 0x48
   2746c:	mov	r2, #6
   27470:	movt	r1, #4
   27474:	bl	127a4 <bcmp@plt>
   27478:	cmp	r0, #0
   2747c:	beq	29d20 <__assert_fail@plt+0x17270>
   27480:	movw	r1, #53626	; 0xd17a
   27484:	sub	r0, fp, #72	; 0x48
   27488:	mov	r2, #9
   2748c:	movt	r1, #4
   27490:	bl	127a4 <bcmp@plt>
   27494:	cmp	r0, #0
   27498:	beq	29d30 <__assert_fail@plt+0x17280>
   2749c:	movw	r1, #53635	; 0xd183
   274a0:	sub	r0, fp, #72	; 0x48
   274a4:	mov	r2, #8
   274a8:	movt	r1, #4
   274ac:	bl	127a4 <bcmp@plt>
   274b0:	cmp	r0, #0
   274b4:	beq	29d40 <__assert_fail@plt+0x17290>
   274b8:	movw	r1, #53643	; 0xd18b
   274bc:	sub	r0, fp, #72	; 0x48
   274c0:	mov	r2, #4
   274c4:	movt	r1, #4
   274c8:	bl	127a4 <bcmp@plt>
   274cc:	cmp	r0, #0
   274d0:	beq	29d50 <__assert_fail@plt+0x172a0>
   274d4:	movw	r1, #53647	; 0xd18f
   274d8:	sub	r0, fp, #72	; 0x48
   274dc:	mov	r2, #6
   274e0:	movt	r1, #4
   274e4:	bl	127a4 <bcmp@plt>
   274e8:	cmp	r0, #0
   274ec:	beq	29d60 <__assert_fail@plt+0x172b0>
   274f0:	ldrb	r0, [fp, #-72]	; 0xffffffb8
   274f4:	cmp	r7, #1
   274f8:	bne	29d70 <__assert_fail@plt+0x172c0>
   274fc:	cmp	r0, #90	; 0x5a
   27500:	sub	r4, fp, #72	; 0x48
   27504:	bhi	29d7c <__assert_fail@plt+0x172cc>
   27508:	movw	r9, #52092	; 0xcb7c
   2750c:	add	r1, pc, #8
   27510:	mov	r5, #63	; 0x3f
   27514:	movt	r9, #4
   27518:	ldr	pc, [r1, r0, lsl #2]
   2751c:	andeq	r6, r2, r4, asr #29
   27520:	andeq	r9, r2, ip, ror sp
   27524:	andeq	r9, r2, ip, ror sp
   27528:	andeq	r9, r2, ip, ror sp
   2752c:	andeq	r9, r2, ip, ror sp
   27530:	andeq	r9, r2, ip, ror sp
   27534:	andeq	r9, r2, ip, ror sp
   27538:	andeq	r9, r2, ip, ror sp
   2753c:	andeq	r9, r2, ip, ror sp
   27540:	andeq	r9, r2, ip, ror sp
   27544:	andeq	r9, r2, ip, ror sp
   27548:	andeq	r9, r2, ip, ror sp
   2754c:	andeq	r9, r2, ip, ror sp
   27550:	andeq	r9, r2, ip, ror sp
   27554:	andeq	r9, r2, ip, ror sp
   27558:	andeq	r9, r2, ip, ror sp
   2755c:	andeq	r9, r2, ip, ror sp
   27560:	andeq	r9, r2, ip, ror sp
   27564:	andeq	r9, r2, ip, ror sp
   27568:	andeq	r9, r2, ip, ror sp
   2756c:	andeq	r9, r2, ip, ror sp
   27570:	andeq	r9, r2, ip, ror sp
   27574:	andeq	r9, r2, ip, ror sp
   27578:	andeq	r9, r2, ip, ror sp
   2757c:	andeq	r9, r2, ip, ror sp
   27580:	andeq	r9, r2, ip, ror sp
   27584:	andeq	r9, r2, ip, ror sp
   27588:	andeq	r9, r2, ip, ror sp
   2758c:	andeq	r9, r2, ip, ror sp
   27590:	andeq	r9, r2, ip, ror sp
   27594:	andeq	r9, r2, ip, ror sp
   27598:	andeq	r9, r2, ip, ror sp
   2759c:	andeq	r9, r2, ip, ror sp
   275a0:	andeq	r9, r2, ip, ror sp
   275a4:	andeq	r9, r2, ip, ror sp
   275a8:	andeq	r9, r2, ip, ror sp
   275ac:	andeq	r9, r2, ip, ror sp
   275b0:	andeq	r9, r2, ip, ror sp
   275b4:	andeq	r9, r2, ip, ror sp
   275b8:	andeq	r9, r2, ip, ror sp
   275bc:	andeq	r9, r2, ip, ror sp
   275c0:	andeq	r9, r2, ip, ror sp
   275c4:	andeq	r9, r2, ip, ror sp
   275c8:	andeq	r9, r2, ip, ror sp
   275cc:	andeq	r9, r2, ip, ror sp
   275d0:	andeq	r9, r2, ip, ror sp
   275d4:	andeq	r9, r2, ip, ror sp
   275d8:	andeq	r9, r2, ip, ror sp
   275dc:	andeq	r9, r2, ip, ror sp
   275e0:	andeq	r9, r2, ip, ror sp
   275e4:	andeq	r9, r2, ip, ror sp
   275e8:	andeq	r9, r2, ip, ror sp
   275ec:	andeq	r9, r2, ip, ror sp
   275f0:	andeq	r9, r2, ip, ror sp
   275f4:	andeq	r9, r2, ip, ror sp
   275f8:	andeq	r9, r2, ip, ror sp
   275fc:	andeq	r9, r2, ip, ror sp
   27600:	andeq	r9, r2, ip, ror sp
   27604:	andeq	r9, r2, ip, ror sp
   27608:	andeq	r9, r2, ip, ror sp
   2760c:	andeq	r9, r2, ip, ror sp
   27610:	andeq	r9, r2, ip, ror sp
   27614:	andeq	r9, r2, ip, ror sp
   27618:	andeq	r9, r2, ip, ror sp
   2761c:	andeq	r9, r2, ip, ror sp
   27620:	andeq	r6, r2, r4, lsr #29
   27624:	andeq	r7, r2, r8, lsl #13
   27628:	andeq	r9, r2, r8, lsl #28
   2762c:	andeq	r9, r2, r8, lsl lr
   27630:	andeq	r9, r2, r8, lsr #28
   27634:	andeq	r9, r2, r8, lsr lr
   27638:	andeq	r9, r2, r8, asr #28
   2763c:	andeq	r9, r2, r8, asr lr
   27640:	andeq	r9, r2, r8, ror #28
   27644:	andeq	r9, r2, ip, ror sp
   27648:	andeq	r9, r2, r8, ror lr
   2764c:	andeq	r9, r2, r8, lsl #29
   27650:	muleq	r2, r8, lr
   27654:	andeq	r9, r2, r8, lsr #29
   27658:			; <UNDEFINED> instruction: 0x00029eb8
   2765c:	andeq	r9, r2, r8, asr #29
   27660:	ldrdeq	r9, [r2], -r8
   27664:	andeq	r9, r2, r8, ror #29
   27668:	strdeq	r9, [r2], -r8
   2766c:	andeq	r9, r2, r8, lsl #30
   27670:	andeq	r9, r2, r8, lsl pc
   27674:	andeq	r9, r2, r8, lsr #30
   27678:	andeq	r9, r2, r8, lsr pc
   2767c:	andeq	r9, r2, r8, asr #30
   27680:	andeq	r9, r2, r8, asr pc
   27684:	andeq	r9, r2, r8, ror #30
   27688:	movw	r0, #52092	; 0xcb7c
   2768c:	movt	r0, #4
   27690:	b	26db4 <__assert_fail@plt+0x14304>
   27694:	add	r0, r1, #1
   27698:	ldr	r3, [sp, #172]	; 0xac
   2769c:	str	r0, [r8]
   276a0:	ldrb	r4, [r1]
   276a4:	cmp	r4, #1
   276a8:	bge	26eec <__assert_fail@plt+0x1443c>
   276ac:	mov	r0, #0
   276b0:	mov	r4, #0
   276b4:	add	r1, r0, r5
   276b8:	cmp	r1, #112	; 0x70
   276bc:	bhi	276f8 <__assert_fail@plt+0x14c48>
   276c0:	movw	r2, #50760	; 0xc648
   276c4:	movt	r2, #4
   276c8:	add	r2, r2, r1
   276cc:	ldrsb	r2, [r2]
   276d0:	cmp	r0, r2
   276d4:	bne	276f8 <__assert_fail@plt+0x14c48>
   276d8:	movw	r0, #50873	; 0xc6b9
   276dc:	movt	r0, #4
   276e0:	ldrb	sl, [r0, r1]
   276e4:	orr	r0, r1, #4
   276e8:	cmp	r0, #111	; 0x6f
   276ec:	bne	27c04 <__assert_fail@plt+0x15154>
   276f0:	rsb	r2, sl, #0
   276f4:	b	2770c <__assert_fail@plt+0x14c5c>
   276f8:	movw	r0, #50986	; 0xc72a
   276fc:	movt	r0, #4
   27700:	ldrb	r2, [r0, sl]
   27704:	cmp	r2, #0
   27708:	beq	29f80 <__assert_fail@plt+0x174d0>
   2770c:	movw	r0, #51100	; 0xc79c
   27710:	str	r4, [sp, #176]	; 0xb0
   27714:	mov	r1, r3
   27718:	movt	r0, #4
   2771c:	ldrb	r4, [r0, r2]
   27720:	rsb	r0, r4, #1
   27724:	rsb	r0, r0, r0, lsl #3
   27728:	ldr	r0, [r1, r0, lsl #3]!
   2772c:	ldr	r5, [r1, #52]	; 0x34
   27730:	str	r0, [sp, #236]	; 0xec
   27734:	ldr	r0, [r1, #44]	; 0x2c
   27738:	str	r5, [sp, #180]	; 0xb4
   2773c:	str	r0, [sp, #192]	; 0xc0
   27740:	ldr	r0, [r1, #40]	; 0x28
   27744:	str	r0, [sp, #200]	; 0xc8
   27748:	ldr	r0, [r1, #36]	; 0x24
   2774c:	str	r0, [sp, #196]	; 0xc4
   27750:	ldr	r0, [r1, #4]
   27754:	str	r0, [sp, #232]	; 0xe8
   27758:	ldr	r0, [r1, #8]
   2775c:	str	r0, [sp, #228]	; 0xe4
   27760:	ldr	r0, [r1, #12]
   27764:	str	r0, [sp, #220]	; 0xdc
   27768:	ldr	r0, [r1, #16]
   2776c:	str	r0, [sp, #224]	; 0xe0
   27770:	ldr	r0, [r1, #20]
   27774:	str	r0, [sp, #216]	; 0xd8
   27778:	ldr	r0, [r1, #24]
   2777c:	str	r0, [sp, #212]	; 0xd4
   27780:	ldr	r0, [r1, #28]
   27784:	str	r0, [sp, #208]	; 0xd0
   27788:	ldr	r0, [r1, #32]
   2778c:	ldr	r1, [r1, #48]	; 0x30
   27790:	str	r0, [sp, #204]	; 0xcc
   27794:	sub	r0, r2, #4
   27798:	str	r1, [sp, #188]	; 0xbc
   2779c:	cmp	r0, #87	; 0x57
   277a0:	bhi	29b10 <__assert_fail@plt+0x17060>
   277a4:	add	r1, pc, #20
   277a8:	add	r6, r3, #8
   277ac:	add	r9, r3, #16
   277b0:	add	sl, r3, #24
   277b4:	add	r7, r3, #32
   277b8:	add	r5, r3, #40	; 0x28
   277bc:	ldr	pc, [r1, r0, lsl #2]
   277c0:	andeq	r8, r2, ip, ror r8
   277c4:	andeq	r9, r2, r0, lsl fp
   277c8:	andeq	r9, r2, r0, lsl fp
   277cc:	andeq	r8, r2, r4, lsr #17
   277d0:	muleq	r2, r0, r7
   277d4:	andeq	r8, r2, r0, ror #19
   277d8:	andeq	r8, r2, r0, lsl #20
   277dc:	andeq	r8, r2, ip, lsl #16
   277e0:	andeq	r8, r2, r8, asr #17
   277e4:	andeq	r8, r2, r0, ror #17
   277e8:	andeq	r8, r2, r4, lsr #21
   277ec:	andeq	r8, r2, r8, asr sl
   277f0:	andeq	r9, r2, r0, lsl fp
   277f4:	andeq	r9, r2, r0, lsl fp
   277f8:	andeq	r8, r2, r0, asr r3
   277fc:	andeq	r8, r2, r4, lsr #16
   27800:	andeq	r8, r2, ip, lsr r7
   27804:	andeq	r9, r2, r0, lsl fp
   27808:	muleq	r2, r8, r2
   2780c:	andeq	r8, r2, ip, ror #17
   27810:	muleq	r2, r0, r9
   27814:	andeq	r9, r2, r0, lsl fp
   27818:	andeq	r9, r2, r0, lsl fp
   2781c:	andeq	r8, r2, r8, lsl fp
   27820:	andeq	r8, r2, r0, ror #21
   27824:	andeq	r8, r2, ip, ror #4
   27828:	andeq	r8, r2, r4, lsl #15
   2782c:	andeq	r8, r2, r4, lsl ip
   27830:	andeq	r8, r2, r4, lsl #5
   27834:	strdeq	r8, [r2], -r4
   27838:	andeq	r8, r2, ip, asr #5
   2783c:	andeq	r8, r2, ip, ror #16
   27840:	andeq	r8, r2, r4, asr #5
   27844:	ldrdeq	r8, [r2], -r8	; <UNPREDICTABLE>
   27848:	strdeq	r8, [r2], -r4
   2784c:	andeq	r8, r2, ip, ror #7
   27850:	andeq	r8, r2, r8, lsr #15
   27854:	strdeq	r8, [r2], -r8	; <UNPREDICTABLE>
   27858:	ldrdeq	r8, [r2], -r8	; <UNPREDICTABLE>
   2785c:	andeq	r8, r2, r4, asr lr
   27860:	andeq	r8, r2, ip, ror r3
   27864:	andeq	r8, r2, ip, ror #21
   27868:	andeq	r8, r2, r0, lsl lr
   2786c:	andeq	r8, r2, ip, lsr r2
   27870:	andeq	r8, r2, r8, lsl sl
   27874:	andeq	r9, r2, r0, lsl fp
   27878:	andeq	r8, r2, ip, asr #3
   2787c:	andeq	r7, r2, ip, ror lr
   27880:	andeq	r7, r2, r0, lsr #18
   27884:	andeq	r7, r2, r0, lsr #18
   27888:	andeq	r8, r2, ip, lsr #23
   2788c:	andeq	r7, r2, r8, ror #24
   27890:	andeq	r8, r2, ip, lsr #18
   27894:	andeq	r8, r2, r8, lsr sl
   27898:	andeq	r7, r2, r8, ror ip
   2789c:	andeq	r7, r2, ip, ror #28
   278a0:	andeq	r7, r2, ip, asr #28
   278a4:	andeq	r7, r2, ip, lsl #26
   278a8:	ldrdeq	r7, [r2], -r8
   278ac:	andeq	r8, r2, r4, ror sl
   278b0:	andeq	r7, r2, r8, ror #25
   278b4:	andeq	r8, r2, ip, lsr #27
   278b8:	andeq	r8, r2, r4, ror ip
   278bc:	andeq	r7, r2, r0, ror #24
   278c0:	strdeq	r8, [r2], -ip
   278c4:	andeq	r8, r2, r4, lsr #24
   278c8:	andeq	r7, r2, r0, ror ip
   278cc:	andeq	r7, r2, r0, lsl #25
   278d0:	andeq	r7, r2, r0, lsl #25
   278d4:			; <UNDEFINED> instruction: 0x00028eb0
   278d8:	andeq	r9, r2, r0, lsl fp
   278dc:	andeq	r7, r2, r8, ror #24
   278e0:	andeq	r7, r2, r8, ror ip
   278e4:	andeq	r7, r2, ip, lsl #26
   278e8:	andeq	r7, r2, r8, ror #25
   278ec:	andeq	r7, r2, r0, ror #24
   278f0:	andeq	r7, r2, r0, ror ip
   278f4:	ldrdeq	r7, [r2], -r8
   278f8:	andeq	r9, r2, r0, lsl fp
   278fc:	andeq	r9, r2, r0, lsl fp
   27900:	andeq	r9, r2, r0, lsl fp
   27904:	strdeq	r7, [r2], -r0
   27908:	andeq	r9, r2, r0, lsl fp
   2790c:	strdeq	r7, [r2], -r0
   27910:			; <UNDEFINED> instruction: 0x00028cb4
   27914:	andeq	r7, r2, r4, asr sp
   27918:	andeq	r8, r2, ip, asr r2
   2791c:	andeq	r8, r2, r4, ror #20
   27920:	str	r4, [sp, #164]	; 0xa4
   27924:	ldm	r3, {r0, r4}
   27928:	str	r3, [sp, #172]	; 0xac
   2792c:	ldr	r3, [r5, #8]
   27930:	str	r2, [sp, #152]	; 0x98
   27934:	ldr	r2, [r7, #4]
   27938:	str	r4, [sp, #60]	; 0x3c
   2793c:	str	r0, [sp, #28]
   27940:	ldm	r6, {r0, r6}
   27944:	str	r6, [sp, #56]	; 0x38
   27948:	str	r2, [sp, #36]	; 0x24
   2794c:	str	r0, [sp, #52]	; 0x34
   27950:	ldm	r9, {r0, lr}
   27954:	ldr	r9, [r7]
   27958:	ldm	r5, {r1, r7}
   2795c:	str	lr, [sp, #48]	; 0x30
   27960:	str	r7, [sp, #20]
   27964:	str	r0, [sp, #24]
   27968:	ldm	sl, {r0, ip}
   2796c:	str	ip, [sp, #44]	; 0x2c
   27970:	str	r0, [sp, #40]	; 0x28
   27974:	ldr	r0, [r8, #144]	; 0x90
   27978:	str	r0, [sp, #68]	; 0x44
   2797c:	add	r0, r0, r3
   27980:	str	r0, [sp, #64]	; 0x40
   27984:	str	r0, [r8, #144]	; 0x90
   27988:	ldr	r0, [sp, #96]	; 0x60
   2798c:	ldm	r0, {r3, r5}
   27990:	adds	r1, r3, r1
   27994:	adc	r3, r5, r7
   27998:	stm	r0, {r1, r3}
   2799c:	ldr	r1, [sp, #100]	; 0x64
   279a0:	ldm	r1, {r0, sl}
   279a4:	adds	r0, r0, r9
   279a8:	adc	r9, sl, r2
   279ac:	stm	r1, {r0, r9}
   279b0:	ldr	r1, [sp, #104]	; 0x68
   279b4:	ldr	r7, [sp, #40]	; 0x28
   279b8:	ldm	r1, {r0, r2}
   279bc:	str	r2, [sp, #32]
   279c0:	adds	r0, r0, r7
   279c4:	adc	r2, r2, ip
   279c8:	str	r2, [sp, #16]
   279cc:	stm	r1, {r0, r2}
   279d0:	ldr	r1, [sp, #108]	; 0x6c
   279d4:	ldr	r7, [sp, #24]
   279d8:	ldm	r1, {r0, r2}
   279dc:	str	r2, [sp, #40]	; 0x28
   279e0:	adds	r0, r0, r7
   279e4:	mov	r7, #0
   279e8:	adc	lr, r2, lr
   279ec:	stm	r1, {r0, lr}
   279f0:	ldr	ip, [sp, #112]	; 0x70
   279f4:	ldr	r2, [sp, #52]	; 0x34
   279f8:	ldrd	r0, [ip]
   279fc:	adds	r0, r0, r2
   27a00:	str	r1, [sp, #24]
   27a04:	adc	r2, r1, r6
   27a08:	stm	ip, {r0, r2}
   27a0c:	ldr	ip, [sp, #116]	; 0x74
   27a10:	ldr	r6, [sp, #28]
   27a14:	ldrd	r0, [ip]
   27a18:	adds	r0, r0, r6
   27a1c:	str	r1, [sp, #52]	; 0x34
   27a20:	mov	r6, #0
   27a24:	adc	r4, r1, r4
   27a28:	cmn	r5, #1
   27a2c:	mov	r1, #0
   27a30:	stm	ip, {r0, r4}
   27a34:	mov	r0, #0
   27a38:	mov	ip, #0
   27a3c:	mov	r5, #0
   27a40:	movwgt	r1, #1
   27a44:	cmn	r3, #1
   27a48:	mov	r3, #0
   27a4c:	movwgt	r0, #1
   27a50:	str	r1, [sp, #28]
   27a54:	subs	r0, r1, r0
   27a58:	mov	r1, #0
   27a5c:	movwne	r0, #1
   27a60:	str	r0, [sp, #12]
   27a64:	ldr	r0, [sp, #20]
   27a68:	cmn	r0, #1
   27a6c:	mov	r0, #0
   27a70:	movwgt	r0, #1
   27a74:	cmn	sl, #1
   27a78:	ldr	sl, [sp, #64]	; 0x40
   27a7c:	movwgt	r1, #1
   27a80:	cmn	r9, #1
   27a84:	str	r0, [sp, #20]
   27a88:	mov	r0, #0
   27a8c:	movwgt	r0, #1
   27a90:	str	r1, [sp, #8]
   27a94:	subs	r0, r1, r0
   27a98:	ldr	r1, [sp, #40]	; 0x28
   27a9c:	movwne	r0, #1
   27aa0:	str	r0, [sp, #4]
   27aa4:	ldr	r0, [sp, #36]	; 0x24
   27aa8:	cmn	r0, #1
   27aac:	mov	r0, #0
   27ab0:	movwgt	r0, #1
   27ab4:	str	r0, [sp, #36]	; 0x24
   27ab8:	ldr	r0, [sp, #32]
   27abc:	cmn	r0, #1
   27ac0:	ldr	r0, [sp, #16]
   27ac4:	movwgt	ip, #1
   27ac8:	cmn	r0, #1
   27acc:	mov	r0, #0
   27ad0:	movwgt	r0, #1
   27ad4:	subs	r0, ip, r0
   27ad8:	movwne	r0, #1
   27adc:	str	r0, [sp, #32]
   27ae0:	ldr	r0, [sp, #44]	; 0x2c
   27ae4:	cmn	r0, #1
   27ae8:	mov	r0, #0
   27aec:	movwgt	r0, #1
   27af0:	cmn	r1, #1
   27af4:	mov	r1, #0
   27af8:	movwgt	r7, #1
   27afc:	cmn	lr, #1
   27b00:	mov	lr, #0
   27b04:	movwgt	r1, #1
   27b08:	subs	r1, r7, r1
   27b0c:	movwne	r1, #1
   27b10:	str	r1, [sp, #44]	; 0x2c
   27b14:	ldr	r1, [sp, #48]	; 0x30
   27b18:	cmn	r1, #1
   27b1c:	ldr	r1, [sp, #24]
   27b20:	movwgt	lr, #1
   27b24:	cmn	r1, #1
   27b28:	ldr	r1, [sp, #56]	; 0x38
   27b2c:	movwgt	r5, #1
   27b30:	cmn	r2, #1
   27b34:	mov	r2, #0
   27b38:	movwgt	r2, #1
   27b3c:	subs	r2, r5, r2
   27b40:	movwne	r2, #1
   27b44:	cmn	r1, #1
   27b48:	ldr	r1, [sp, #52]	; 0x34
   27b4c:	movwgt	r3, #1
   27b50:	cmn	r1, #1
   27b54:	ldr	r1, [sp, #60]	; 0x3c
   27b58:	movwgt	r6, #1
   27b5c:	cmn	r4, #1
   27b60:	mov	r4, #0
   27b64:	movwgt	r4, #1
   27b68:	subs	r9, r6, r4
   27b6c:	ldr	r4, [sp, #68]	; 0x44
   27b70:	movwne	r9, #1
   27b74:	cmn	r1, #1
   27b78:	mov	r1, #0
   27b7c:	movwgt	r1, #1
   27b80:	str	r1, [sp, #60]	; 0x3c
   27b84:	cmp	sl, r4
   27b88:	bvs	29f80 <__assert_fail@plt+0x174d0>
   27b8c:	ldr	r4, [sp, #28]
   27b90:	ldr	r1, [sp, #20]
   27b94:	sub	r4, r4, r1
   27b98:	ldr	r1, [sp, #12]
   27b9c:	clz	r4, r4
   27ba0:	lsr	r4, r4, #5
   27ba4:	ands	r4, r4, r1
   27ba8:	bne	29f80 <__assert_fail@plt+0x174d0>
   27bac:	ldr	r1, [sp, #8]
   27bb0:	ldr	r4, [sp, #36]	; 0x24
   27bb4:	sub	r4, r1, r4
   27bb8:	ldr	r1, [sp, #4]
   27bbc:	clz	r4, r4
   27bc0:	lsr	r4, r4, #5
   27bc4:	ands	r4, r4, r1
   27bc8:	bne	29f80 <__assert_fail@plt+0x174d0>
   27bcc:	ldr	r1, [sp, #32]
   27bd0:	sub	r0, ip, r0
   27bd4:	mov	sl, #1
   27bd8:	clz	r0, r0
   27bdc:	lsr	r0, r0, #5
   27be0:	ands	r0, r0, r1
   27be4:	ldreq	r1, [sp, #44]	; 0x2c
   27be8:	subeq	r0, r7, lr
   27bec:	clzeq	r0, r0
   27bf0:	lsreq	r0, r0, #5
   27bf4:	andseq	r0, r0, r1
   27bf8:	bne	29f8c <__assert_fail@plt+0x174dc>
   27bfc:	sub	r0, r5, r3
   27c00:	b	29738 <__assert_fail@plt+0x16c88>
   27c04:	ldr	r2, [sp, #148]	; 0x94
   27c08:	ldr	r5, [sp, #140]	; 0x8c
   27c0c:	add	r0, r3, #56	; 0x38
   27c10:	add	r1, r3, #64	; 0x40
   27c14:	mvn	r4, #1
   27c18:	uxtb	r2, r2
   27c1c:	orr	r2, r2, r5, lsl #8
   27c20:	ldr	r5, [sp, #144]	; 0x90
   27c24:	stm	r0, {r2, r5}
   27c28:	ldr	r5, [sp, #120]	; 0x78
   27c2c:	ldr	r2, [sp, #124]	; 0x7c
   27c30:	str	r5, [r1]
   27c34:	str	r2, [r1, #4]
   27c38:	add	r1, r3, #76	; 0x4c
   27c3c:	vst1.32	{d8-d9}, [r1]
   27c40:	ldr	r1, [sp, #128]	; 0x80
   27c44:	str	r1, [r3, #72]	; 0x48
   27c48:	add	r1, r3, #92	; 0x5c
   27c4c:	vst1.32	{d8-d9}, [r1]
   27c50:	mov	r1, #0
   27c54:	str	r1, [r3, #108]	; 0x6c
   27c58:	mov	r3, r0
   27c5c:	b	267c4 <__assert_fail@plt+0x13d14>
   27c60:	ldrd	r0, [r3, #-48]	; 0xffffffd0
   27c64:	b	28c78 <__assert_fail@plt+0x161c8>
   27c68:	ldrd	r0, [r3, #-48]	; 0xffffffd0
   27c6c:	b	28bb0 <__assert_fail@plt+0x16100>
   27c70:	ldrd	r0, [r3, #-48]	; 0xffffffd0
   27c74:	b	28c28 <__assert_fail@plt+0x16178>
   27c78:	ldrd	r0, [r3, #-48]	; 0xffffffd0
   27c7c:	b	28a3c <__assert_fail@plt+0x15f8c>
   27c80:	ldrd	r0, [r3, #-56]	; 0xffffffc8
   27c84:	str	r0, [sp, #200]	; 0xc8
   27c88:	asr	r0, r0, #31
   27c8c:	str	r1, [sp, #188]	; 0xbc
   27c90:	str	r0, [sp, #192]	; 0xc0
   27c94:	mov	r0, #0
   27c98:	str	r0, [sp, #228]	; 0xe4
   27c9c:	mov	r0, #0
   27ca0:	str	r0, [sp, #220]	; 0xdc
   27ca4:	mov	r0, #0
   27ca8:	str	r0, [sp, #224]	; 0xe0
   27cac:	mov	r0, #0
   27cb0:	str	r0, [sp, #216]	; 0xd8
   27cb4:	mov	r0, #0
   27cb8:	str	r0, [sp, #212]	; 0xd4
   27cbc:	mov	r0, #0
   27cc0:	str	r0, [sp, #208]	; 0xd0
   27cc4:	mov	r0, #0
   27cc8:	str	r0, [sp, #204]	; 0xcc
   27ccc:	mov	r0, #0
   27cd0:	str	r0, [sp, #196]	; 0xc4
   27cd4:	b	29b00 <__assert_fail@plt+0x17050>
   27cd8:	ldrd	r0, [r3]
   27cdc:	str	r1, [sp, #216]	; 0xd8
   27ce0:	str	r0, [sp, #224]	; 0xe0
   27ce4:	b	29ab8 <__assert_fail@plt+0x17008>
   27ce8:	ldrd	r0, [r3, #-48]	; 0xffffffd0
   27cec:	b	28a78 <__assert_fail@plt+0x15fc8>
   27cf0:	ldr	r5, [r6]
   27cf4:	ldr	r1, [r6, #4]
   27cf8:	adds	r0, r5, #-2147483648	; 0x80000000
   27cfc:	adcs	r0, r1, #0
   27d00:	bne	29f80 <__assert_fail@plt+0x174d0>
   27d04:	str	r5, [sp, #236]	; 0xec
   27d08:	b	29b08 <__assert_fail@plt+0x17058>
   27d0c:	ldrd	r6, [r3]
   27d10:	cmn	r7, #1
   27d14:	ble	28f38 <__assert_fail@plt+0x16488>
   27d18:	ldr	r5, [r3, #-48]	; 0xffffffd0
   27d1c:	ldr	r9, [r3, #-44]	; 0xffffffd4
   27d20:	orrs	r0, r6, r7
   27d24:	beq	29aa4 <__assert_fail@plt+0x16ff4>
   27d28:	cmn	r9, #1
   27d2c:	ble	29034 <__assert_fail@plt+0x16584>
   27d30:	mov	sl, r2
   27d34:	str	r4, [sp, #164]	; 0xa4
   27d38:	mov	r4, r3
   27d3c:	mvn	r0, #0
   27d40:	mvn	r1, #-2147483648	; 0x80000000
   27d44:	mov	r2, r6
   27d48:	mov	r3, r7
   27d4c:	bl	47618 <__assert_fail@plt+0x34b68>
   27d50:	b	28f74 <__assert_fail@plt+0x164c4>
   27d54:	sub	r1, r3, #56	; 0x38
   27d58:	ldr	r0, [r8, #156]	; 0x9c
   27d5c:	ldr	lr, [r3, #-40]	; 0xffffffd8
   27d60:	str	r3, [sp, #172]	; 0xac
   27d64:	str	r2, [sp, #152]	; 0x98
   27d68:	str	r4, [sp, #164]	; 0xa4
   27d6c:	vld1.64	{d16-d17}, [r1]
   27d70:	cmp	r0, #0
   27d74:	beq	27dac <__assert_fail@plt+0x152fc>
   27d78:	ldr	r1, [sp, #84]	; 0x54
   27d7c:	ldr	r1, [r1]
   27d80:	cmp	r1, #0
   27d84:	bne	27dac <__assert_fail@plt+0x152fc>
   27d88:	ldrb	r1, [r8, #153]	; 0x99
   27d8c:	cmp	r1, #0
   27d90:	bne	27dac <__assert_fail@plt+0x152fc>
   27d94:	ldr	ip, [r3, #-36]	; 0xffffffdc
   27d98:	cmp	lr, #2
   27d9c:	bgt	29c00 <__assert_fail@plt+0x17150>
   27da0:	ldr	r2, [r8, #172]	; 0xac
   27da4:	cmp	r2, #0
   27da8:	bne	29c00 <__assert_fail@plt+0x17150>
   27dac:	cmp	lr, #5
   27db0:	blt	28fd0 <__assert_fail@plt+0x16520>
   27db4:	vmov.32	r4, d17[0]
   27db8:	vmov.32	r1, d17[1]
   27dbc:	add	r0, r0, #1
   27dc0:	mov	r2, #100	; 0x64
   27dc4:	mov	r3, #0
   27dc8:	str	lr, [sp, #64]	; 0x40
   27dcc:	str	r0, [r8, #156]	; 0x9c
   27dd0:	mov	r0, r4
   27dd4:	str	r1, [sp, #68]	; 0x44
   27dd8:	str	r4, [sp, #60]	; 0x3c
   27ddc:	bl	47544 <__assert_fail@plt+0x34a94>
   27de0:	mov	ip, #100	; 0x64
   27de4:	umull	r2, r3, r0, ip
   27de8:	mla	r3, r1, ip, r3
   27dec:	subs	r2, r4, r2
   27df0:	ldr	r4, [sp, #68]	; 0x44
   27df4:	sbc	r3, r4, r3
   27df8:	ldr	r4, [sp, #156]	; 0x9c
   27dfc:	strd	r2, [r4]
   27e00:	mov	r2, #100	; 0x64
   27e04:	mov	r3, #0
   27e08:	bl	47544 <__assert_fail@plt+0x34a94>
   27e0c:	mov	r0, r2
   27e10:	ldr	r2, [sp, #160]	; 0xa0
   27e14:	mov	r1, r3
   27e18:	mov	r3, #0
   27e1c:	strd	r0, [r2]
   27e20:	movw	r2, #10000	; 0x2710
   27e24:	ldr	r0, [sp, #60]	; 0x3c
   27e28:	ldr	r1, [sp, #68]	; 0x44
   27e2c:	bl	47544 <__assert_fail@plt+0x34a94>
   27e30:	ldr	r2, [sp, #80]	; 0x50
   27e34:	ldr	r3, [sp, #172]	; 0xac
   27e38:	strd	r0, [r2]
   27e3c:	ldr	r0, [sp, #64]	; 0x40
   27e40:	sub	r0, r0, #4
   27e44:	str	r0, [r8, #48]	; 0x30
   27e48:	b	29458 <__assert_fail@plt+0x169a8>
   27e4c:	ldrd	r6, [r3]
   27e50:	cmn	r7, #1
   27e54:	ble	29088 <__assert_fail@plt+0x165d8>
   27e58:	ldr	r5, [r3, #-56]	; 0xffffffc8
   27e5c:	ldr	r9, [r3, #-52]	; 0xffffffcc
   27e60:	orrs	r0, r6, r7
   27e64:	bne	27d28 <__assert_fail@plt+0x15278>
   27e68:	b	29aa4 <__assert_fail@plt+0x16ff4>
   27e6c:	mov	r0, #0
   27e70:	str	r0, [sp, #220]	; 0xdc
   27e74:	mov	r0, #1
   27e78:	b	28a40 <__assert_fail@plt+0x15f90>
   27e7c:	ldr	r0, [r3, #-56]	; 0xffffffc8
   27e80:	str	r2, [sp, #152]	; 0x98
   27e84:	ldr	r6, [r3, #-12]
   27e88:	ldr	r1, [r3, #-16]
   27e8c:	ldr	ip, [r3, #-20]	; 0xffffffec
   27e90:	ldr	r5, [r3, #-24]	; 0xffffffe8
   27e94:	sub	lr, r3, #36	; 0x24
   27e98:	ldr	r2, [r3, #-8]
   27e9c:	str	r3, [sp, #172]	; 0xac
   27ea0:	str	r4, [sp, #164]	; 0xa4
   27ea4:	ldm	lr, {r4, sl, lr}
   27ea8:	str	lr, [sp, #44]	; 0x2c
   27eac:	str	r0, [sp, #56]	; 0x38
   27eb0:	ldr	r0, [r3, #-52]	; 0xffffffcc
   27eb4:	str	r4, [sp, #52]	; 0x34
   27eb8:	str	r0, [sp, #68]	; 0x44
   27ebc:	ldr	r0, [r3, #-48]	; 0xffffffd0
   27ec0:	str	r0, [sp, #48]	; 0x30
   27ec4:	ldr	r0, [r3, #-44]	; 0xffffffd4
   27ec8:	str	r0, [sp, #60]	; 0x3c
   27ecc:	ldr	r0, [r3, #-40]	; 0xffffffd8
   27ed0:	ldr	r3, [r3]
   27ed4:	str	r0, [sp, #40]	; 0x28
   27ed8:	ldr	r0, [r8, #144]	; 0x90
   27edc:	cmn	r3, #1
   27ee0:	str	r0, [sp, #64]	; 0x40
   27ee4:	ble	290e0 <__assert_fail@plt+0x16630>
   27ee8:	add	r2, r0, r2
   27eec:	str	r2, [sp, #36]	; 0x24
   27ef0:	str	r2, [r8, #144]	; 0x90
   27ef4:	ldr	r2, [sp, #96]	; 0x60
   27ef8:	ldm	r2, {r0, r3}
   27efc:	adds	r0, r0, r1
   27f00:	adc	r7, r3, r6
   27f04:	stm	r2, {r0, r7}
   27f08:	ldr	r2, [sp, #100]	; 0x64
   27f0c:	ldm	r2, {r0, r9}
   27f10:	str	ip, [sp, #20]
   27f14:	adds	r5, r0, r5
   27f18:	mov	r0, r4
   27f1c:	adc	ip, r9, ip
   27f20:	stm	r2, {r5, ip}
   27f24:	ldr	r2, [sp, #104]	; 0x68
   27f28:	ldr	r4, [r2]
   27f2c:	ldr	r1, [r2, #4]
   27f30:	adds	r4, r4, sl
   27f34:	str	r1, [sp, #16]
   27f38:	adc	r1, r1, lr
   27f3c:	str	r1, [sp, #24]
   27f40:	str	r4, [r2]
   27f44:	str	r1, [r2, #4]
   27f48:	ldr	r2, [sp, #108]	; 0x6c
   27f4c:	ldr	r5, [sp, #40]	; 0x28
   27f50:	ldr	r4, [r2]
   27f54:	ldr	r1, [r2, #4]
   27f58:	adds	r4, r4, r5
   27f5c:	str	r1, [sp, #28]
   27f60:	mov	r5, #0
   27f64:	adc	r0, r1, r0
   27f68:	str	r0, [sp, #32]
   27f6c:	str	r4, [r2]
   27f70:	str	r0, [r2, #4]
   27f74:	ldr	lr, [sp, #112]	; 0x70
   27f78:	ldr	r1, [sp, #48]	; 0x30
   27f7c:	ldr	sl, [sp, #60]	; 0x3c
   27f80:	ldr	r4, [lr]
   27f84:	ldr	r0, [lr, #4]
   27f88:	adds	r2, r4, r1
   27f8c:	str	r0, [sp, #40]	; 0x28
   27f90:	mov	r1, #0
   27f94:	adc	r0, r0, sl
   27f98:	str	r0, [sp, #48]	; 0x30
   27f9c:	str	r2, [lr]
   27fa0:	str	r0, [lr, #4]
   27fa4:	ldr	r0, [sp, #116]	; 0x74
   27fa8:	ldr	r4, [sp, #56]	; 0x38
   27fac:	ldm	r0, {r2, lr}
   27fb0:	adds	r2, r2, r4
   27fb4:	ldr	r4, [sp, #68]	; 0x44
   27fb8:	adc	r4, lr, r4
   27fbc:	cmn	r3, #1
   27fc0:	stm	r0, {r2, r4}
   27fc4:	mov	r2, #0
   27fc8:	mov	r0, #0
   27fcc:	mov	r3, #0
   27fd0:	movwgt	r2, #1
   27fd4:	cmn	r7, #1
   27fd8:	movwgt	r1, #1
   27fdc:	str	r2, [sp, #56]	; 0x38
   27fe0:	subs	r1, r2, r1
   27fe4:	ldr	r2, [sp, #48]	; 0x30
   27fe8:	movwne	r1, #1
   27fec:	cmn	r6, #1
   27ff0:	ldr	r6, [sp, #68]	; 0x44
   27ff4:	movwgt	r0, #1
   27ff8:	cmn	r9, #1
   27ffc:	str	r1, [sp, #12]
   28000:	mov	r1, #0
   28004:	mov	r9, #0
   28008:	movwgt	r1, #1
   2800c:	cmn	ip, #1
   28010:	str	r0, [sp, #8]
   28014:	mov	r0, #0
   28018:	mov	ip, #0
   2801c:	movwgt	r0, #1
   28020:	str	r1, [sp, #4]
   28024:	subs	r0, r1, r0
   28028:	ldr	r1, [sp, #28]
   2802c:	movwne	r0, #1
   28030:	str	r0, [sp]
   28034:	ldr	r0, [sp, #20]
   28038:	cmn	r0, #1
   2803c:	mov	r0, #0
   28040:	movwgt	r0, #1
   28044:	str	r0, [sp, #20]
   28048:	ldr	r0, [sp, #16]
   2804c:	cmn	r0, #1
   28050:	ldr	r0, [sp, #24]
   28054:	movwgt	r5, #1
   28058:	cmn	r0, #1
   2805c:	mov	r0, #0
   28060:	movwgt	r0, #1
   28064:	subs	r0, r5, r0
   28068:	movwne	r0, #1
   2806c:	str	r0, [sp, #24]
   28070:	ldr	r0, [sp, #44]	; 0x2c
   28074:	cmn	r0, #1
   28078:	mov	r0, #0
   2807c:	movwgt	r0, #1
   28080:	cmn	r1, #1
   28084:	ldr	r1, [sp, #32]
   28088:	movwgt	r9, #1
   2808c:	cmn	r1, #1
   28090:	mov	r1, #0
   28094:	movwgt	r1, #1
   28098:	subs	r1, r9, r1
   2809c:	movwne	r1, #1
   280a0:	str	r1, [sp, #44]	; 0x2c
   280a4:	ldr	r1, [sp, #52]	; 0x34
   280a8:	cmn	r1, #1
   280ac:	ldr	r1, [sp, #40]	; 0x28
   280b0:	movwgt	ip, #1
   280b4:	cmn	r1, #1
   280b8:	mov	r1, #0
   280bc:	movwgt	r1, #1
   280c0:	cmn	r2, #1
   280c4:	mov	r2, #0
   280c8:	movwgt	r2, #1
   280cc:	subs	r7, r1, r2
   280d0:	mov	r2, #0
   280d4:	movwne	r7, #1
   280d8:	cmn	sl, #1
   280dc:	movwgt	r3, #1
   280e0:	cmn	lr, #1
   280e4:	ldr	lr, [sp, #64]	; 0x40
   280e8:	movwgt	r2, #1
   280ec:	cmn	r4, #1
   280f0:	mov	r4, #0
   280f4:	movwgt	r4, #1
   280f8:	subs	sl, r2, r4
   280fc:	ldr	r4, [sp, #36]	; 0x24
   28100:	movwne	sl, #1
   28104:	cmn	r6, #1
   28108:	mov	r6, #0
   2810c:	movwgt	r6, #1
   28110:	str	r6, [sp, #68]	; 0x44
   28114:	cmp	r4, lr
   28118:	bvs	29f80 <__assert_fail@plt+0x174d0>
   2811c:	ldr	r4, [sp, #56]	; 0x38
   28120:	ldr	r6, [sp, #8]
   28124:	sub	r4, r4, r6
   28128:	ldr	r6, [sp, #12]
   2812c:	clz	r4, r4
   28130:	lsr	r4, r4, #5
   28134:	ands	r4, r4, r6
   28138:	bne	29f80 <__assert_fail@plt+0x174d0>
   2813c:	ldr	r6, [sp, #4]
   28140:	ldr	r4, [sp, #20]
   28144:	sub	r4, r6, r4
   28148:	ldr	r6, [sp]
   2814c:	clz	r4, r4
   28150:	lsr	r4, r4, #5
   28154:	ands	r4, r4, r6
   28158:	bne	29f80 <__assert_fail@plt+0x174d0>
   2815c:	ldr	r6, [sp, #24]
   28160:	sub	r0, r5, r0
   28164:	movw	lr, #50368	; 0xc4c0
   28168:	clz	r0, r0
   2816c:	movt	lr, #4
   28170:	lsr	r0, r0, #5
   28174:	ands	r0, r0, r6
   28178:	bne	29f80 <__assert_fail@plt+0x174d0>
   2817c:	ldr	r6, [sp, #44]	; 0x2c
   28180:	sub	r0, r9, ip
   28184:	clz	r0, r0
   28188:	lsr	r0, r0, #5
   2818c:	ands	r0, r0, r6
   28190:	bne	29f80 <__assert_fail@plt+0x174d0>
   28194:	sub	r0, r1, r3
   28198:	clz	r0, r0
   2819c:	lsr	r0, r0, #5
   281a0:	ands	r0, r0, r7
   281a4:	bne	29f80 <__assert_fail@plt+0x174d0>
   281a8:	ldr	r0, [sp, #68]	; 0x44
   281ac:	ldr	ip, [sp, #168]	; 0xa8
   281b0:	ldr	r3, [sp, #172]	; 0xac
   281b4:	sub	r0, r2, r0
   281b8:	ldr	r2, [sp, #152]	; 0x98
   281bc:	clz	r0, r0
   281c0:	lsr	r0, r0, #5
   281c4:	ands	r0, r0, sl
   281c8:	b	29368 <__assert_fail@plt+0x168b8>
   281cc:	sub	r0, r3, #112	; 0x70
   281d0:	vldr	d18, [r3, #-96]	; 0xffffffa0
   281d4:	mov	r5, r2
   281d8:	ldr	r2, [sp, #160]	; 0xa0
   281dc:	mov	r7, r4
   281e0:	mov	r4, r3
   281e4:	mov	sl, #1
   281e8:	vld1.64	{d16-d17}, [r0]
   281ec:	ldr	r0, [sp, #92]	; 0x5c
   281f0:	vst1.64	{d16-d17}, [r0]!
   281f4:	vstr	d18, [r0]
   281f8:	ldrd	r0, [r3, #-48]	; 0xffffffd0
   281fc:	rsbs	r0, r0, #0
   28200:	rsc	r3, r1, #0
   28204:	stm	r2, {r0, r3}
   28208:	ands	r0, r1, r3
   2820c:	bmi	29f8c <__assert_fail@plt+0x174dc>
   28210:	ldrd	r0, [r6]
   28214:	ldr	r2, [sp, #156]	; 0x9c
   28218:	rsbs	r0, r0, #0
   2821c:	rsc	r3, r1, #0
   28220:	stm	r2, {r0, r3}
   28224:	mov	r2, r5
   28228:	ands	r0, r1, r3
   2822c:	mov	r3, r4
   28230:	mov	r4, r7
   28234:	bpl	29b10 <__assert_fail@plt+0x17060>
   28238:	b	29f8c <__assert_fail@plt+0x174dc>
   2823c:	mov	r5, r4
   28240:	mov	r4, r2
   28244:	ldrd	r0, [r3, #-48]	; 0xffffffd0
   28248:	ldr	r2, [sp, #156]	; 0x9c
   2824c:	strd	r0, [r2]
   28250:	ldrd	r0, [r3]
   28254:	ldr	r2, [sp, #160]	; 0xa0
   28258:	b	28b08 <__assert_fail@plt+0x16058>
   2825c:	mvn	r0, #0
   28260:	str	r0, [sp, #236]	; 0xec
   28264:	mvn	r0, #0
   28268:	b	29b0c <__assert_fail@plt+0x1705c>
   2826c:	mov	r0, #1
   28270:	str	r0, [r8, #20]
   28274:	ldr	r0, [r8, #168]	; 0xa8
   28278:	add	r0, r0, #1
   2827c:	str	r0, [r8, #168]	; 0xa8
   28280:	b	29b10 <__assert_fail@plt+0x17060>
   28284:	ldr	r0, [r3, #-56]	; 0xffffffc8
   28288:	str	r3, [sp, #172]	; 0xac
   2828c:	str	r4, [sp, #164]	; 0xa4
   28290:	str	r2, [sp, #152]	; 0x98
   28294:	b	28408 <__assert_fail@plt+0x15958>
   28298:	mov	r5, r4
   2829c:	mov	r4, r2
   282a0:	ldrd	r0, [r3, #-48]	; 0xffffffd0
   282a4:	ldr	r2, [sp, #136]	; 0x88
   282a8:	vmov.i32	q8, #0	; 0x00000000
   282ac:	strd	r0, [r2]
   282b0:	mov	r2, r4
   282b4:	mov	r4, r5
   282b8:	ldr	r0, [sp, #132]	; 0x84
   282bc:	vst1.64	{d16-d17}, [r0]
   282c0:	b	289d4 <__assert_fail@plt+0x15f24>
   282c4:	ldr	r0, [r3, #-56]	; 0xffffffc8
   282c8:	b	28870 <__assert_fail@plt+0x15dc0>
   282cc:	ldr	r1, [r3, #-40]	; 0xffffffd8
   282d0:	ldr	sl, [r3, #4]
   282d4:	ldr	r0, [r3, #-48]	; 0xffffffd0
   282d8:	ldr	r5, [r3, #-44]	; 0xffffffd4
   282dc:	str	r2, [sp, #152]	; 0x98
   282e0:	mov	r2, #0
   282e4:	mov	r6, #100	; 0x64
   282e8:	str	r3, [sp, #172]	; 0xac
   282ec:	cmp	r1, #3
   282f0:	mov	r1, #0
   282f4:	movwlt	r1, #1
   282f8:	cmp	sl, #0
   282fc:	movwmi	r2, #1
   28300:	ands	r1, r2, r1
   28304:	umull	r7, r1, r0, r6
   28308:	moveq	r7, r0
   2830c:	mlane	r5, r5, r6, r1
   28310:	cmn	sl, #1
   28314:	ble	29378 <__assert_fail@plt+0x168c8>
   28318:	ldr	r0, [r3, #-56]	; 0xffffffc8
   2831c:	ldr	r9, [r3]
   28320:	cmn	r5, #1
   28324:	str	r0, [sp, #68]	; 0x44
   28328:	ble	297ec <__assert_fail@plt+0x16d3c>
   2832c:	movw	r1, #8738	; 0x2222
   28330:	movw	r0, #8738	; 0x2222
   28334:	mov	r2, #1
   28338:	movt	r1, #8738	; 0x2222
   2833c:	movt	r0, #546	; 0x222
   28340:	subs	r1, r1, r7
   28344:	sbcs	r0, r0, r5
   28348:	blt	29824 <__assert_fail@plt+0x16d74>
   2834c:	b	29820 <__assert_fail@plt+0x16d70>
   28350:	mov	r5, r4
   28354:	mov	r4, r2
   28358:	ldrd	r0, [r3, #-48]	; 0xffffffd0
   2835c:	ldr	r2, [sp, #136]	; 0x88
   28360:	vmov.i32	q8, #0	; 0x00000000
   28364:	strd	r0, [r2]
   28368:	mov	r2, r4
   2836c:	mov	r4, r5
   28370:	ldr	r0, [sp, #132]	; 0x84
   28374:	vst1.64	{d16-d17}, [r0]
   28378:	b	28860 <__assert_fail@plt+0x15db0>
   2837c:	mov	r5, r2
   28380:	ldrd	r0, [r3, #-112]	; 0xffffff90
   28384:	ldr	r2, [sp, #160]	; 0xa0
   28388:	mov	r7, r4
   2838c:	mov	r4, r3
   28390:	mov	sl, #1
   28394:	strd	r0, [r2]
   28398:	ldrd	r0, [r3, #-48]	; 0xffffffd0
   2839c:	ldr	r2, [sp, #156]	; 0x9c
   283a0:	rsbs	r0, r0, #0
   283a4:	rsc	r3, r1, #0
   283a8:	stm	r2, {r0, r3}
   283ac:	ands	r0, r1, r3
   283b0:	bmi	29f8c <__assert_fail@plt+0x174dc>
   283b4:	ldrd	r0, [r6]
   283b8:	ldr	r2, [sp, #80]	; 0x50
   283bc:	rsbs	r0, r0, #0
   283c0:	rsc	r3, r1, #0
   283c4:	stm	r2, {r0, r3}
   283c8:	ands	r0, r1, r3
   283cc:	bmi	29f8c <__assert_fail@plt+0x174dc>
   283d0:	mov	r3, r4
   283d4:	ldr	r1, [sp, #84]	; 0x54
   283d8:	mov	r2, r5
   283dc:	mov	r4, r7
   283e0:	ldr	r0, [r3, #16]
   283e4:	str	r0, [r1]
   283e8:	b	29b10 <__assert_fail@plt+0x17060>
   283ec:	ldrd	r0, [r3, #-56]	; 0xffffffc8
   283f0:	b	287ac <__assert_fail@plt+0x15cfc>
   283f4:	movw	r0, #40336	; 0x9d90
   283f8:	str	r3, [sp, #172]	; 0xac
   283fc:	str	r4, [sp, #164]	; 0xa4
   28400:	str	r2, [sp, #152]	; 0x98
   28404:	movt	r0, #65535	; 0xffff
   28408:	str	r0, [r8, #24]
   2840c:	ldr	r0, [r3, #4]
   28410:	ldr	r1, [r3]
   28414:	ldr	r3, [r5, #8]
   28418:	ldr	r2, [sl, #4]
   2841c:	ldr	r4, [r7, #4]
   28420:	ldr	sl, [sl]
   28424:	str	r0, [sp, #68]	; 0x44
   28428:	ldm	r6, {r0, r6}
   2842c:	str	r1, [sp, #56]	; 0x38
   28430:	str	r6, [sp, #52]	; 0x34
   28434:	str	r2, [sp, #36]	; 0x24
   28438:	str	r4, [sp, #24]
   2843c:	str	r0, [sp, #48]	; 0x30
   28440:	ldm	r9, {r0, ip}
   28444:	ldr	r9, [r7]
   28448:	ldm	r5, {r1, r7}
   2844c:	str	ip, [sp, #44]	; 0x2c
   28450:	str	r7, [sp, #20]
   28454:	str	r0, [sp, #40]	; 0x28
   28458:	ldr	r0, [r8, #144]	; 0x90
   2845c:	str	r0, [sp, #64]	; 0x40
   28460:	add	r0, r0, r3
   28464:	str	r0, [sp, #60]	; 0x3c
   28468:	str	r0, [r8, #144]	; 0x90
   2846c:	ldr	r0, [sp, #96]	; 0x60
   28470:	ldm	r0, {r3, r5}
   28474:	adds	r1, r3, r1
   28478:	adc	r3, r5, r7
   2847c:	stm	r0, {r1, r3}
   28480:	ldr	r7, [sp, #100]	; 0x64
   28484:	ldm	r7, {r0, lr}
   28488:	adds	r0, r0, r9
   2848c:	adc	r9, lr, r4
   28490:	stm	r7, {r0, r9}
   28494:	ldr	r4, [sp, #104]	; 0x68
   28498:	ldm	r4, {r0, r7}
   2849c:	adds	r0, r0, sl
   284a0:	adc	sl, r7, r2
   284a4:	stm	r4, {r0, sl}
   284a8:	ldr	r4, [sp, #108]	; 0x6c
   284ac:	ldr	r2, [sp, #40]	; 0x28
   284b0:	ldrd	r0, [r4]
   284b4:	adds	r0, r0, r2
   284b8:	str	r1, [sp, #32]
   284bc:	adc	r1, r1, ip
   284c0:	str	r1, [sp, #28]
   284c4:	strd	r0, [r4]
   284c8:	ldr	r4, [sp, #112]	; 0x70
   284cc:	ldr	r1, [sp, #48]	; 0x30
   284d0:	ldm	r4, {r0, r2}
   284d4:	str	r2, [sp, #40]	; 0x28
   284d8:	adds	r0, r0, r1
   284dc:	adc	r6, r2, r6
   284e0:	stm	r4, {r0, r6}
   284e4:	ldr	ip, [sp, #116]	; 0x74
   284e8:	ldr	r1, [sp, #56]	; 0x38
   284ec:	ldr	r2, [sp, #68]	; 0x44
   284f0:	ldm	ip, {r0, r4}
   284f4:	str	r4, [sp, #48]	; 0x30
   284f8:	adds	r0, r0, r1
   284fc:	mov	r1, #0
   28500:	adc	r2, r4, r2
   28504:	cmn	r5, #1
   28508:	mov	r5, #0
   2850c:	mov	r4, #0
   28510:	str	r2, [sp, #56]	; 0x38
   28514:	stm	ip, {r0, r2}
   28518:	mov	r2, #0
   2851c:	movwgt	r2, #1
   28520:	cmn	r3, #1
   28524:	mov	r0, #0
   28528:	mov	ip, #0
   2852c:	mov	r3, #0
   28530:	movwgt	r0, #1
   28534:	str	r2, [sp, #16]
   28538:	subs	r0, r2, r0
   2853c:	mov	r2, #0
   28540:	movwne	r0, #1
   28544:	str	r0, [sp, #12]
   28548:	ldr	r0, [sp, #20]
   2854c:	cmn	r0, #1
   28550:	mov	r0, #0
   28554:	movwgt	r0, #1
   28558:	cmn	lr, #1
   2855c:	mov	lr, #0
   28560:	movwgt	r1, #1
   28564:	cmn	r9, #1
   28568:	str	r0, [sp, #20]
   2856c:	mov	r0, #0
   28570:	movwgt	r0, #1
   28574:	str	r1, [sp, #8]
   28578:	subs	r0, r1, r0
   2857c:	ldr	r1, [sp, #32]
   28580:	movwne	r0, #1
   28584:	str	r0, [sp, #4]
   28588:	ldr	r0, [sp, #24]
   2858c:	cmn	r0, #1
   28590:	mov	r0, #0
   28594:	movwgt	r0, #1
   28598:	cmn	r7, #1
   2859c:	mov	r7, #0
   285a0:	movwgt	ip, #1
   285a4:	cmn	sl, #1
   285a8:	str	r0, [sp, #24]
   285ac:	mov	r0, #0
   285b0:	movwgt	r0, #1
   285b4:	subs	r0, ip, r0
   285b8:	movwne	r0, #1
   285bc:	str	r0, [sp]
   285c0:	ldr	r0, [sp, #36]	; 0x24
   285c4:	cmn	r0, #1
   285c8:	mov	r0, #0
   285cc:	movwgt	r0, #1
   285d0:	cmn	r1, #1
   285d4:	ldr	r1, [sp, #28]
   285d8:	movwgt	r7, #1
   285dc:	cmn	r1, #1
   285e0:	mov	r1, #0
   285e4:	movwgt	r1, #1
   285e8:	subs	sl, r7, r1
   285ec:	ldr	r1, [sp, #44]	; 0x2c
   285f0:	movwne	sl, #1
   285f4:	cmn	r1, #1
   285f8:	ldr	r1, [sp, #40]	; 0x28
   285fc:	movwgt	lr, #1
   28600:	cmn	r1, #1
   28604:	ldr	r1, [sp, #52]	; 0x34
   28608:	movwgt	r5, #1
   2860c:	cmn	r6, #1
   28610:	mov	r6, #0
   28614:	movwgt	r2, #1
   28618:	subs	r2, r5, r2
   2861c:	movwne	r2, #1
   28620:	cmn	r1, #1
   28624:	ldr	r1, [sp, #48]	; 0x30
   28628:	movwgt	r3, #1
   2862c:	cmn	r1, #1
   28630:	ldr	r1, [sp, #56]	; 0x38
   28634:	movwgt	r6, #1
   28638:	cmn	r1, #1
   2863c:	mov	r1, #0
   28640:	movwgt	r1, #1
   28644:	subs	r9, r6, r1
   28648:	ldr	r1, [sp, #68]	; 0x44
   2864c:	movwne	r9, #1
   28650:	cmn	r1, #1
   28654:	ldr	r1, [sp, #64]	; 0x40
   28658:	movwgt	r4, #1
   2865c:	str	r4, [sp, #68]	; 0x44
   28660:	ldr	r4, [sp, #60]	; 0x3c
   28664:	cmp	r4, r1
   28668:	bvs	29f80 <__assert_fail@plt+0x174d0>
   2866c:	ldr	r1, [sp, #16]
   28670:	ldr	r4, [sp, #20]
   28674:	sub	r1, r1, r4
   28678:	ldr	r4, [sp, #12]
   2867c:	clz	r1, r1
   28680:	lsr	r1, r1, #5
   28684:	ands	r1, r1, r4
   28688:	bne	29f80 <__assert_fail@plt+0x174d0>
   2868c:	ldr	r1, [sp, #8]
   28690:	ldr	r4, [sp, #24]
   28694:	sub	r1, r1, r4
   28698:	ldr	r4, [sp, #4]
   2869c:	clz	r1, r1
   286a0:	lsr	r1, r1, #5
   286a4:	ands	r1, r1, r4
   286a8:	bne	29f80 <__assert_fail@plt+0x174d0>
   286ac:	ldr	r1, [sp]
   286b0:	sub	r0, ip, r0
   286b4:	clz	r0, r0
   286b8:	lsr	r0, r0, #5
   286bc:	ands	r0, r0, r1
   286c0:	bne	29f80 <__assert_fail@plt+0x174d0>
   286c4:	sub	r0, r7, lr
   286c8:	clz	r0, r0
   286cc:	lsr	r0, r0, #5
   286d0:	ands	r0, r0, sl
   286d4:	bne	29f80 <__assert_fail@plt+0x174d0>
   286d8:	sub	r0, r5, r3
   286dc:	mov	sl, #1
   286e0:	clz	r0, r0
   286e4:	lsr	r0, r0, #5
   286e8:	ands	r0, r0, r2
   286ec:	ldreq	r0, [sp, #68]	; 0x44
   286f0:	subeq	r0, r6, r0
   286f4:	clzeq	r0, r0
   286f8:	lsreq	r0, r0, #5
   286fc:	andseq	r0, r0, r9
   28700:	bne	29f8c <__assert_fail@plt+0x174dc>
   28704:	movw	r1, #53057	; 0xcf41
   28708:	mov	r0, #1
   2870c:	mov	r2, #5
   28710:	movt	r1, #4
   28714:	strb	r0, [r8, #153]	; 0x99
   28718:	mov	r0, #0
   2871c:	bl	12564 <dcgettext@plt>
   28720:	ldr	r2, [sp, #152]	; 0x98
   28724:	ldr	r3, [sp, #172]	; 0xac
   28728:	ldr	ip, [sp, #168]	; 0xa8
   2872c:	ldr	r4, [sp, #164]	; 0xa4
   28730:	movw	lr, #50368	; 0xc4c0
   28734:	movt	lr, #4
   28738:	b	29b10 <__assert_fail@plt+0x17060>
   2873c:	mov	r0, r2
   28740:	mov	r1, r4
   28744:	mov	r4, r3
   28748:	ldr	r9, [r3, #-56]	; 0xffffffc8
   2874c:	ldr	sl, [r3, #-52]	; 0xffffffcc
   28750:	ldr	r2, [r3, #-272]	; 0xfffffef0
   28754:	ldr	r3, [r3, #-268]	; 0xfffffef4
   28758:	ldr	r5, [sp, #136]	; 0x88
   2875c:	ldrd	r6, [r4, #-160]	; 0xffffff60
   28760:	strd	r2, [r5]
   28764:	mov	r3, r4
   28768:	mov	r4, r1
   2876c:	ldr	r2, [sp, #132]	; 0x84
   28770:	strd	r6, [r2]
   28774:	str	r9, [r8, #88]	; 0x58
   28778:	mov	r2, r0
   2877c:	str	sl, [r8, #92]	; 0x5c
   28780:	b	28860 <__assert_fail@plt+0x15db0>
   28784:	ldr	r0, [r3]
   28788:	str	r0, [r8, #24]
   2878c:	b	29b10 <__assert_fail@plt+0x17060>
   28790:	ldr	r0, [r8, #172]	; 0xac
   28794:	movw	r1, #42756	; 0xa704
   28798:	movt	r1, #4
   2879c:	add	r0, r0, #1
   287a0:	str	r0, [r8, #172]	; 0xac
   287a4:	b	28aac <__assert_fail@plt+0x15ffc>
   287a8:	ldrd	r0, [r3, #-48]	; 0xffffffd0
   287ac:	mov	r5, r4
   287b0:	mov	r4, r2
   287b4:	ldr	r2, [sp, #88]	; 0x58
   287b8:	strd	r0, [r2]
   287bc:	mov	r1, #1
   287c0:	mov	r2, r4
   287c4:	mov	r4, r5
   287c8:	ldr	r0, [r3]
   287cc:	strb	r1, [r8, #187]	; 0xbb
   287d0:	str	r0, [r8, #16]
   287d4:	b	29b10 <__assert_fail@plt+0x17060>
   287d8:	ldr	r0, [r3, #-208]	; 0xffffff30
   287dc:	mov	r5, r4
   287e0:	mov	r4, r2
   287e4:	cmp	r0, #4
   287e8:	blt	28f9c <__assert_fail@plt+0x164ec>
   287ec:	sub	r0, r3, #224	; 0xe0
   287f0:	vldr	d18, [r3, #-208]	; 0xffffff30
   287f4:	vld1.64	{d16-d17}, [r0]
   287f8:	ldr	r0, [sp, #92]	; 0x5c
   287fc:	vst1.64	{d16-d17}, [r0]!
   28800:	vstr	d18, [r0]
   28804:	ldrd	r0, [r3, #-104]	; 0xffffff98
   28808:	b	28af8 <__assert_fail@plt+0x16048>
   2880c:	ldr	r0, [r8, #156]	; 0x9c
   28810:	movw	r1, #53048	; 0xcf38
   28814:	movt	r1, #4
   28818:	add	r0, r0, #1
   2881c:	str	r0, [r8, #156]	; 0x9c
   28820:	b	28aac <__assert_fail@plt+0x15ffc>
   28824:	ldrd	r0, [r3, #-160]	; 0xffffff60
   28828:	ldr	r7, [sp, #136]	; 0x88
   2882c:	mov	r6, r4
   28830:	mov	r4, r3
   28834:	mov	r5, r2
   28838:	ldrd	r2, [r3, #-48]	; 0xffffffd0
   2883c:	strd	r0, [r7]
   28840:	ldr	r0, [sp, #132]	; 0x84
   28844:	strd	r2, [r0]
   28848:	mov	r0, #0
   2884c:	mov	r3, r4
   28850:	mov	r2, r5
   28854:	mov	r4, r6
   28858:	str	r0, [r8, #88]	; 0x58
   2885c:	str	r0, [r8, #92]	; 0x5c
   28860:	ldr	r0, [r3]
   28864:	str	r0, [r8, #28]
   28868:	b	29b10 <__assert_fail@plt+0x17060>
   2886c:	ldr	r0, [r3]
   28870:	add	r0, r0, #3600	; 0xe10
   28874:	str	r0, [r8, #24]
   28878:	b	29b10 <__assert_fail@plt+0x17060>
   2887c:	mov	r5, r2
   28880:	ldrd	r0, [r3]
   28884:	ldr	r2, [sp, #72]	; 0x48
   28888:	strd	r0, [r2]
   2888c:	movw	r1, #43286	; 0xa916
   28890:	mov	r0, #1
   28894:	strb	r0, [r8, #152]	; 0x98
   28898:	movt	r1, #4
   2889c:	mov	r0, #0
   288a0:	b	28ab4 <__assert_fail@plt+0x16004>
   288a4:	ldr	r1, [r8, #172]	; 0xac
   288a8:	ldr	r0, [r8, #156]	; 0x9c
   288ac:	add	r1, r1, #1
   288b0:	add	r0, r0, #1
   288b4:	str	r1, [r8, #172]	; 0xac
   288b8:	movw	r1, #53028	; 0xcf24
   288bc:	str	r0, [r8, #156]	; 0x9c
   288c0:	movt	r1, #4
   288c4:	b	28aac <__assert_fail@plt+0x15ffc>
   288c8:	ldr	r0, [r8, #160]	; 0xa0
   288cc:	movw	r1, #53053	; 0xcf3d
   288d0:	movt	r1, #4
   288d4:	add	r0, r0, #1
   288d8:	str	r0, [r8, #160]	; 0xa0
   288dc:	b	28aac <__assert_fail@plt+0x15ffc>
   288e0:	movw	r1, #53057	; 0xcf41
   288e4:	movt	r1, #4
   288e8:	b	28aac <__assert_fail@plt+0x15ffc>
   288ec:	ldrd	r0, [r3, #-160]	; 0xffffff60
   288f0:	ldr	r7, [sp, #136]	; 0x88
   288f4:	mov	r6, r4
   288f8:	mov	r4, r3
   288fc:	mov	r5, r2
   28900:	ldrd	r2, [r3, #-48]	; 0xffffffd0
   28904:	strd	r0, [r7]
   28908:	ldr	r0, [sp, #132]	; 0x84
   2890c:	strd	r2, [r0]
   28910:	mov	r0, #0
   28914:	mov	r3, r4
   28918:	mov	r2, r5
   2891c:	mov	r4, r6
   28920:	str	r0, [r8, #88]	; 0x58
   28924:	str	r0, [r8, #92]	; 0x5c
   28928:	b	289d4 <__assert_fail@plt+0x15f24>
   2892c:	mov	r0, #0
   28930:	str	r0, [sp, #228]	; 0xe4
   28934:	mov	r0, #1
   28938:	str	r0, [sp, #236]	; 0xec
   2893c:	mov	r0, #0
   28940:	str	r0, [sp, #220]	; 0xdc
   28944:	mov	r0, #0
   28948:	str	r0, [sp, #224]	; 0xe0
   2894c:	mov	r0, #0
   28950:	str	r0, [sp, #216]	; 0xd8
   28954:	mov	r0, #0
   28958:	str	r0, [sp, #212]	; 0xd4
   2895c:	mov	r0, #0
   28960:	str	r0, [sp, #208]	; 0xd0
   28964:	mov	r0, #0
   28968:	str	r0, [sp, #204]	; 0xcc
   2896c:	mov	r0, #0
   28970:	str	r0, [sp, #196]	; 0xc4
   28974:	mov	r0, #0
   28978:	str	r0, [sp, #200]	; 0xc8
   2897c:	mov	r0, #0
   28980:	str	r0, [sp, #192]	; 0xc0
   28984:	mov	r0, #0
   28988:	str	r0, [sp, #188]	; 0xbc
   2898c:	b	29b08 <__assert_fail@plt+0x17058>
   28990:	mov	r0, r2
   28994:	mov	r1, r4
   28998:	mov	r4, r3
   2899c:	ldr	r9, [r3, #-56]	; 0xffffffc8
   289a0:	ldr	sl, [r3, #-52]	; 0xffffffcc
   289a4:	ldr	r2, [r3, #-272]	; 0xfffffef0
   289a8:	ldr	r3, [r3, #-268]	; 0xfffffef4
   289ac:	ldr	r5, [sp, #136]	; 0x88
   289b0:	ldrd	r6, [r4, #-160]	; 0xffffff60
   289b4:	strd	r2, [r5]
   289b8:	mov	r3, r4
   289bc:	mov	r4, r1
   289c0:	ldr	r2, [sp, #132]	; 0x84
   289c4:	strd	r6, [r2]
   289c8:	str	r9, [r8, #88]	; 0x58
   289cc:	mov	r2, r0
   289d0:	str	sl, [r8, #92]	; 0x5c
   289d4:	mov	r0, #2
   289d8:	str	r0, [r8, #28]
   289dc:	b	29b10 <__assert_fail@plt+0x17060>
   289e0:	ldr	r0, [r8, #164]	; 0xa4
   289e4:	movw	r1, #53037	; 0xcf2d
   289e8:	movt	r1, #4
   289ec:	add	r0, r0, #1
   289f0:	str	r0, [r8, #164]	; 0xa4
   289f4:	b	28aac <__assert_fail@plt+0x15ffc>
   289f8:	ldrd	r0, [r3, #-104]	; 0xffffff98
   289fc:	b	28af0 <__assert_fail@plt+0x16040>
   28a00:	ldr	r0, [r8, #176]	; 0xb0
   28a04:	movw	r1, #53043	; 0xcf33
   28a08:	movt	r1, #4
   28a0c:	add	r0, r0, #1
   28a10:	str	r0, [r8, #176]	; 0xb0
   28a14:	b	28aac <__assert_fail@plt+0x15ffc>
   28a18:	mov	r5, r4
   28a1c:	mov	r4, r2
   28a20:	ldrd	r0, [r3, #-104]	; 0xffffff98
   28a24:	ldr	r2, [sp, #156]	; 0x9c
   28a28:	strd	r0, [r2]
   28a2c:	ldrd	r0, [r3, #-56]	; 0xffffffc8
   28a30:	ldr	r2, [sp, #160]	; 0xa0
   28a34:	b	28e2c <__assert_fail@plt+0x1637c>
   28a38:	ldrd	r0, [r3, #-56]	; 0xffffffc8
   28a3c:	str	r1, [sp, #220]	; 0xdc
   28a40:	str	r0, [sp, #228]	; 0xe4
   28a44:	mov	r0, #0
   28a48:	str	r0, [sp, #224]	; 0xe0
   28a4c:	mov	r0, #0
   28a50:	str	r0, [sp, #216]	; 0xd8
   28a54:	b	29ac8 <__assert_fail@plt+0x17018>
   28a58:	movw	r1, #53066	; 0xcf4a
   28a5c:	movt	r1, #4
   28a60:	b	28aac <__assert_fail@plt+0x15ffc>
   28a64:	ldrd	r0, [r6]
   28a68:	str	r1, [sp, #232]	; 0xe8
   28a6c:	str	r0, [sp, #236]	; 0xec
   28a70:	b	29b10 <__assert_fail@plt+0x17060>
   28a74:	ldrd	r0, [r3, #-56]	; 0xffffffc8
   28a78:	str	r0, [sp, #212]	; 0xd4
   28a7c:	mov	r0, #0
   28a80:	str	r1, [sp, #208]	; 0xd0
   28a84:	str	r0, [sp, #228]	; 0xe4
   28a88:	mov	r0, #0
   28a8c:	str	r0, [sp, #220]	; 0xdc
   28a90:	mov	r0, #0
   28a94:	str	r0, [sp, #224]	; 0xe0
   28a98:	mov	r0, #0
   28a9c:	str	r0, [sp, #216]	; 0xd8
   28aa0:	b	29ad8 <__assert_fail@plt+0x17028>
   28aa4:	movw	r1, #48637	; 0xbdfd
   28aa8:	movt	r1, #4
   28aac:	mov	r0, #0
   28ab0:	mov	r5, r2
   28ab4:	mov	r2, #5
   28ab8:	mov	r6, r4
   28abc:	mov	r4, r3
   28ac0:	bl	12564 <dcgettext@plt>
   28ac4:	ldr	ip, [sp, #168]	; 0xa8
   28ac8:	movw	lr, #50368	; 0xc4c0
   28acc:	mov	r3, r4
   28ad0:	mov	r2, r5
   28ad4:	mov	r4, r6
   28ad8:	movt	lr, #4
   28adc:	b	29b10 <__assert_fail@plt+0x17060>
   28ae0:	ldr	r0, [r3]
   28ae4:	str	r0, [r8, #20]
   28ae8:	b	29b10 <__assert_fail@plt+0x17060>
   28aec:	ldrd	r0, [r3, #-56]	; 0xffffffc8
   28af0:	mov	r5, r4
   28af4:	mov	r4, r2
   28af8:	ldr	r2, [sp, #160]	; 0xa0
   28afc:	strd	r0, [r2]
   28b00:	ldrd	r0, [r6]
   28b04:	ldr	r2, [sp, #156]	; 0x9c
   28b08:	strd	r0, [r2]
   28b0c:	mov	r2, r4
   28b10:	mov	r4, r5
   28b14:	b	29b10 <__assert_fail@plt+0x17060>
   28b18:	ldr	r0, [r8, #176]	; 0xb0
   28b1c:	str	r2, [sp, #152]	; 0x98
   28b20:	mov	r2, #0
   28b24:	mov	r6, #100	; 0x64
   28b28:	str	r3, [sp, #172]	; 0xac
   28b2c:	str	r4, [sp, #164]	; 0xa4
   28b30:	add	r0, r0, #1
   28b34:	str	r0, [r8, #176]	; 0xb0
   28b38:	ldr	r1, [r3, #-40]	; 0xffffffd8
   28b3c:	ldr	sl, [r3, #4]
   28b40:	ldr	r0, [r3, #-48]	; 0xffffffd0
   28b44:	ldr	r5, [r3, #-44]	; 0xffffffd4
   28b48:	cmp	r1, #3
   28b4c:	mov	r1, #0
   28b50:	movwlt	r1, #1
   28b54:	cmp	sl, #0
   28b58:	movwmi	r2, #1
   28b5c:	ands	r1, r2, r1
   28b60:	umull	r7, r1, r0, r6
   28b64:	moveq	r7, r0
   28b68:	mlane	r5, r5, r6, r1
   28b6c:	cmn	sl, #1
   28b70:	ble	293bc <__assert_fail@plt+0x1690c>
   28b74:	ldr	r0, [r3, #-56]	; 0xffffffc8
   28b78:	ldr	r9, [r3]
   28b7c:	cmn	r5, #1
   28b80:	str	r0, [sp, #68]	; 0x44
   28b84:	ble	2997c <__assert_fail@plt+0x16ecc>
   28b88:	movw	r1, #8738	; 0x2222
   28b8c:	movw	r0, #8738	; 0x2222
   28b90:	mov	r2, #1
   28b94:	movt	r1, #8738	; 0x2222
   28b98:	movt	r0, #546	; 0x222
   28b9c:	subs	r1, r1, r7
   28ba0:	sbcs	r0, r0, r5
   28ba4:	blt	299b4 <__assert_fail@plt+0x16f04>
   28ba8:	b	299b0 <__assert_fail@plt+0x16f00>
   28bac:	ldrd	r0, [r3, #-56]	; 0xffffffc8
   28bb0:	str	r0, [sp, #236]	; 0xec
   28bb4:	mov	r0, #0
   28bb8:	str	r1, [sp, #232]	; 0xe8
   28bbc:	str	r0, [sp, #228]	; 0xe4
   28bc0:	mov	r0, #0
   28bc4:	str	r0, [sp, #220]	; 0xdc
   28bc8:	mov	r0, #0
   28bcc:	str	r0, [sp, #224]	; 0xe0
   28bd0:	mov	r0, #0
   28bd4:	str	r0, [sp, #216]	; 0xd8
   28bd8:	mov	r0, #0
   28bdc:	str	r0, [sp, #212]	; 0xd4
   28be0:	mov	r0, #0
   28be4:	str	r0, [sp, #208]	; 0xd0
   28be8:	mov	r0, #0
   28bec:	str	r0, [sp, #204]	; 0xcc
   28bf0:	mov	r0, #0
   28bf4:	str	r0, [sp, #196]	; 0xc4
   28bf8:	mov	r0, #0
   28bfc:	str	r0, [sp, #200]	; 0xc8
   28c00:	mov	r0, #0
   28c04:	str	r0, [sp, #192]	; 0xc0
   28c08:	mov	r0, #0
   28c0c:	str	r0, [sp, #188]	; 0xbc
   28c10:	b	29b10 <__assert_fail@plt+0x17060>
   28c14:	movw	r0, #40336	; 0x9d90
   28c18:	movt	r0, #65535	; 0xffff
   28c1c:	str	r0, [r8, #24]
   28c20:	b	29b10 <__assert_fail@plt+0x17060>
   28c24:	ldrd	r0, [r3, #-56]	; 0xffffffc8
   28c28:	str	r0, [sp, #200]	; 0xc8
   28c2c:	mov	r0, #0
   28c30:	str	r1, [sp, #192]	; 0xc0
   28c34:	str	r0, [sp, #228]	; 0xe4
   28c38:	mov	r0, #0
   28c3c:	str	r0, [sp, #220]	; 0xdc
   28c40:	mov	r0, #0
   28c44:	str	r0, [sp, #224]	; 0xe0
   28c48:	mov	r0, #0
   28c4c:	str	r0, [sp, #216]	; 0xd8
   28c50:	mov	r0, #0
   28c54:	str	r0, [sp, #212]	; 0xd4
   28c58:	mov	r0, #0
   28c5c:	str	r0, [sp, #208]	; 0xd0
   28c60:	mov	r0, #0
   28c64:	str	r0, [sp, #204]	; 0xcc
   28c68:	mov	r0, #0
   28c6c:	str	r0, [sp, #196]	; 0xc4
   28c70:	b	29af8 <__assert_fail@plt+0x17048>
   28c74:	ldrd	r0, [r3, #-56]	; 0xffffffc8
   28c78:	str	r0, [sp, #204]	; 0xcc
   28c7c:	mov	r0, #0
   28c80:	str	r1, [sp, #196]	; 0xc4
   28c84:	str	r0, [sp, #228]	; 0xe4
   28c88:	mov	r0, #0
   28c8c:	str	r0, [sp, #220]	; 0xdc
   28c90:	mov	r0, #0
   28c94:	str	r0, [sp, #224]	; 0xe0
   28c98:	mov	r0, #0
   28c9c:	str	r0, [sp, #216]	; 0xd8
   28ca0:	mov	r0, #0
   28ca4:	str	r0, [sp, #212]	; 0xd4
   28ca8:	mov	r0, #0
   28cac:	str	r0, [sp, #208]	; 0xd0
   28cb0:	b	29ae8 <__assert_fail@plt+0x17038>
   28cb4:	ldr	r0, [r8, #156]	; 0x9c
   28cb8:	vld1.64	{d16-d17}, [r3]
   28cbc:	ldr	r6, [r9]
   28cc0:	cmp	r0, #0
   28cc4:	beq	28cfc <__assert_fail@plt+0x1624c>
   28cc8:	ldr	r1, [sp, #84]	; 0x54
   28ccc:	ldr	r1, [r1]
   28cd0:	cmp	r1, #0
   28cd4:	bne	28cfc <__assert_fail@plt+0x1624c>
   28cd8:	ldrb	r1, [r8, #153]	; 0x99
   28cdc:	cmp	r1, #0
   28ce0:	bne	28cfc <__assert_fail@plt+0x1624c>
   28ce4:	ldr	r7, [r9, #4]
   28ce8:	cmp	r6, #2
   28cec:	bgt	29c20 <__assert_fail@plt+0x17170>
   28cf0:	ldr	r1, [r8, #172]	; 0xac
   28cf4:	cmp	r1, #0
   28cf8:	bne	29c20 <__assert_fail@plt+0x17170>
   28cfc:	cmp	r6, #5
   28d00:	str	r2, [sp, #152]	; 0x98
   28d04:	blt	29000 <__assert_fail@plt+0x16550>
   28d08:	vmov.32	r5, d17[1]
   28d0c:	vmov.32	r9, d17[0]
   28d10:	add	r0, r0, #1
   28d14:	mov	sl, r3
   28d18:	mov	r2, #100	; 0x64
   28d1c:	mov	r3, #0
   28d20:	str	r4, [sp, #164]	; 0xa4
   28d24:	mov	r4, #100	; 0x64
   28d28:	str	r0, [r8, #156]	; 0x9c
   28d2c:	mov	r0, r9
   28d30:	mov	r1, r5
   28d34:	bl	47544 <__assert_fail@plt+0x34a94>
   28d38:	umull	r2, r3, r0, r4
   28d3c:	ldr	r7, [sp, #156]	; 0x9c
   28d40:	mla	r3, r1, r4, r3
   28d44:	subs	r2, r9, r2
   28d48:	sbc	r3, r5, r3
   28d4c:	strd	r2, [r7]
   28d50:	mov	r2, #100	; 0x64
   28d54:	mov	r3, #0
   28d58:	bl	47544 <__assert_fail@plt+0x34a94>
   28d5c:	mov	r0, r2
   28d60:	ldr	r2, [sp, #160]	; 0xa0
   28d64:	mov	r1, r3
   28d68:	mov	r3, #0
   28d6c:	strd	r0, [r2]
   28d70:	mov	r0, r9
   28d74:	mov	r1, r5
   28d78:	movw	r2, #10000	; 0x2710
   28d7c:	bl	47544 <__assert_fail@plt+0x34a94>
   28d80:	ldr	r2, [sp, #80]	; 0x50
   28d84:	ldr	ip, [sp, #168]	; 0xa8
   28d88:	ldr	r4, [sp, #164]	; 0xa4
   28d8c:	movw	lr, #50368	; 0xc4c0
   28d90:	mov	r3, sl
   28d94:	movt	lr, #4
   28d98:	strd	r0, [r2]
   28d9c:	sub	r0, r6, #4
   28da0:	ldr	r2, [sp, #152]	; 0x98
   28da4:	str	r0, [r8, #48]	; 0x30
   28da8:	b	29b10 <__assert_fail@plt+0x17060>
   28dac:	mov	r0, #0
   28db0:	str	r0, [sp, #228]	; 0xe4
   28db4:	mov	r0, #1
   28db8:	str	r0, [sp, #212]	; 0xd4
   28dbc:	mov	r0, #0
   28dc0:	str	r0, [sp, #220]	; 0xdc
   28dc4:	mov	r0, #0
   28dc8:	str	r0, [sp, #224]	; 0xe0
   28dcc:	mov	r0, #0
   28dd0:	str	r0, [sp, #216]	; 0xd8
   28dd4:	b	29ad0 <__assert_fail@plt+0x17020>
   28dd8:	ldr	r1, [sp, #88]	; 0x58
   28ddc:	mov	r0, #0
   28de0:	str	r0, [r1]
   28de4:	str	r0, [r1, #4]
   28de8:	ldr	r0, [r3]
   28dec:	str	r0, [r8, #16]
   28df0:	b	29b10 <__assert_fail@plt+0x17060>
   28df4:	ldr	r1, [sp, #88]	; 0x58
   28df8:	mov	r0, #0
   28dfc:	str	r0, [r1]
   28e00:	str	r0, [r1, #4]
   28e04:	ldr	r0, [r3, #-56]	; 0xffffffc8
   28e08:	str	r0, [r8, #16]
   28e0c:	b	29b10 <__assert_fail@plt+0x17060>
   28e10:	mov	r5, r4
   28e14:	mov	r4, r2
   28e18:	ldrd	r0, [r3, #-168]	; 0xffffff58
   28e1c:	ldr	r2, [sp, #160]	; 0xa0
   28e20:	strd	r0, [r2]
   28e24:	ldrd	r0, [r3, #-104]	; 0xffffff98
   28e28:	ldr	r2, [sp, #156]	; 0x9c
   28e2c:	strd	r0, [r2]
   28e30:	mov	r0, r3
   28e34:	mov	r2, r4
   28e38:	mov	r4, r5
   28e3c:	vld1.64	{d16-d17}, [r0]!
   28e40:	vldr	d18, [r0]
   28e44:	ldr	r0, [sp, #92]	; 0x5c
   28e48:	vst1.64	{d16-d17}, [r0]!
   28e4c:	vstr	d18, [r0]
   28e50:	b	29b10 <__assert_fail@plt+0x17060>
   28e54:	mov	r5, r2
   28e58:	ldrd	r0, [r3, #-104]	; 0xffffff98
   28e5c:	ldr	r2, [sp, #156]	; 0x9c
   28e60:	mov	r7, r4
   28e64:	mov	r4, r3
   28e68:	strd	r0, [r2]
   28e6c:	ldrd	r0, [r3, #-56]	; 0xffffffc8
   28e70:	ldr	r2, [sp, #160]	; 0xa0
   28e74:	strd	r0, [r2]
   28e78:	ldrd	r0, [r6]
   28e7c:	ldr	r2, [sp, #80]	; 0x50
   28e80:	rsbs	r0, r0, #0
   28e84:	rsc	r3, r1, #0
   28e88:	stm	r2, {r0, r3}
   28e8c:	ands	r0, r1, r3
   28e90:	bmi	29f80 <__assert_fail@plt+0x174d0>
   28e94:	ldr	r0, [r4, #16]
   28e98:	ldr	r1, [sp, #84]	; 0x54
   28e9c:	mov	r3, r4
   28ea0:	mov	r2, r5
   28ea4:	mov	r4, r7
   28ea8:	str	r0, [r1]
   28eac:	b	29b10 <__assert_fail@plt+0x17060>
   28eb0:	mov	r0, #0
   28eb4:	str	r0, [sp, #228]	; 0xe4
   28eb8:	mov	r0, #1
   28ebc:	str	r0, [sp, #200]	; 0xc8
   28ec0:	mov	r0, #0
   28ec4:	str	r0, [sp, #220]	; 0xdc
   28ec8:	mov	r0, #0
   28ecc:	str	r0, [sp, #224]	; 0xe0
   28ed0:	mov	r0, #0
   28ed4:	str	r0, [sp, #216]	; 0xd8
   28ed8:	mov	r0, #0
   28edc:	str	r0, [sp, #212]	; 0xd4
   28ee0:	mov	r0, #0
   28ee4:	str	r0, [sp, #208]	; 0xd0
   28ee8:	mov	r0, #0
   28eec:	str	r0, [sp, #204]	; 0xcc
   28ef0:	mov	r0, #0
   28ef4:	str	r0, [sp, #196]	; 0xc4
   28ef8:	b	29af0 <__assert_fail@plt+0x17040>
   28efc:	mov	r0, #0
   28f00:	str	r0, [sp, #228]	; 0xe4
   28f04:	mov	r0, #1
   28f08:	str	r0, [sp, #204]	; 0xcc
   28f0c:	mov	r0, #0
   28f10:	str	r0, [sp, #220]	; 0xdc
   28f14:	mov	r0, #0
   28f18:	str	r0, [sp, #224]	; 0xe0
   28f1c:	mov	r0, #0
   28f20:	str	r0, [sp, #216]	; 0xd8
   28f24:	mov	r0, #0
   28f28:	str	r0, [sp, #212]	; 0xd4
   28f2c:	mov	r0, #0
   28f30:	str	r0, [sp, #208]	; 0xd0
   28f34:	b	29ae0 <__assert_fail@plt+0x17030>
   28f38:	ldr	r9, [r3, #-44]	; 0xffffffd4
   28f3c:	ldr	r5, [r3, #-48]	; 0xffffffd0
   28f40:	cmn	r9, #1
   28f44:	ble	29098 <__assert_fail@plt+0x165e8>
   28f48:	and	r0, r6, r7
   28f4c:	cmn	r0, #1
   28f50:	beq	29aa4 <__assert_fail@plt+0x16ff4>
   28f54:	mov	sl, r2
   28f58:	str	r4, [sp, #164]	; 0xa4
   28f5c:	mov	r4, r3
   28f60:	mov	r0, #0
   28f64:	mov	r1, #-2147483648	; 0x80000000
   28f68:	mov	r2, r6
   28f6c:	mov	r3, r7
   28f70:	bl	47544 <__assert_fail@plt+0x34a94>
   28f74:	mov	r3, r4
   28f78:	ldr	ip, [sp, #168]	; 0xa8
   28f7c:	ldr	r4, [sp, #164]	; 0xa4
   28f80:	movw	lr, #50368	; 0xc4c0
   28f84:	subs	r0, r0, r5
   28f88:	mov	r2, sl
   28f8c:	movt	lr, #4
   28f90:	sbcs	r0, r1, r9
   28f94:	bge	29aa4 <__assert_fail@plt+0x16ff4>
   28f98:	b	29f80 <__assert_fail@plt+0x174d0>
   28f9c:	ldrd	r0, [r3, #-216]	; 0xffffff28
   28fa0:	ldr	r2, [sp, #160]	; 0xa0
   28fa4:	strd	r0, [r2]
   28fa8:	ldrd	r0, [r3, #-104]	; 0xffffff98
   28fac:	ldr	r2, [sp, #156]	; 0x9c
   28fb0:	strd	r0, [r2]
   28fb4:	mov	r0, r3
   28fb8:	vld1.64	{d16-d17}, [r0]!
   28fbc:	vldr	d18, [r0]
   28fc0:	ldr	r0, [sp, #92]	; 0x5c
   28fc4:	vst1.64	{d16-d17}, [r0]!
   28fc8:	vstr	d18, [r0]
   28fcc:	b	28b0c <__assert_fail@plt+0x1605c>
   28fd0:	ldr	r0, [r8, #172]	; 0xac
   28fd4:	vmov.32	r4, d17[1]
   28fd8:	mov	r2, #0
   28fdc:	cmp	lr, #3
   28fe0:	add	r0, r0, #1
   28fe4:	str	r0, [r8, #172]	; 0xac
   28fe8:	vmov.32	r0, d17[0]
   28fec:	bge	29400 <__assert_fail@plt+0x16950>
   28ff0:	mov	r1, r4
   28ff4:	mov	ip, #0
   28ff8:	mov	r3, #0
   28ffc:	b	29430 <__assert_fail@plt+0x16980>
   29000:	vmov.32	r1, d17[1]
   29004:	vmov.32	r9, d17[0]
   29008:	ldr	r0, [r8, #172]	; 0xac
   2900c:	mov	sl, r3
   29010:	mov	r5, #0
   29014:	cmp	r6, #3
   29018:	add	r0, r0, #1
   2901c:	str	r0, [r8, #172]	; 0xac
   29020:	bge	29784 <__assert_fail@plt+0x16cd4>
   29024:	mov	r0, r9
   29028:	mov	r2, #0
   2902c:	mov	r3, #0
   29030:	b	297c0 <__assert_fail@plt+0x16d10>
   29034:	and	r0, r5, r9
   29038:	cmn	r0, #1
   2903c:	beq	29a9c <__assert_fail@plt+0x16fec>
   29040:	mov	sl, r2
   29044:	str	r4, [sp, #164]	; 0xa4
   29048:	mov	r4, r3
   2904c:	mov	r0, #0
   29050:	mov	r1, #-2147483648	; 0x80000000
   29054:	mov	r2, r5
   29058:	mov	r3, r9
   2905c:	bl	47544 <__assert_fail@plt+0x34a94>
   29060:	mov	r3, r4
   29064:	ldr	ip, [sp, #168]	; 0xa8
   29068:	ldr	r4, [sp, #164]	; 0xa4
   2906c:	movw	lr, #50368	; 0xc4c0
   29070:	subs	r0, r0, r6
   29074:	mov	r2, sl
   29078:	movt	lr, #4
   2907c:	sbcs	r0, r1, r7
   29080:	bge	29aa4 <__assert_fail@plt+0x16ff4>
   29084:	b	29f80 <__assert_fail@plt+0x174d0>
   29088:	ldr	r9, [r3, #-52]	; 0xffffffcc
   2908c:	ldr	r5, [r3, #-56]	; 0xffffffc8
   29090:	cmn	r9, #1
   29094:	bgt	28f48 <__assert_fail@plt+0x16498>
   29098:	mov	sl, r2
   2909c:	str	r4, [sp, #164]	; 0xa4
   290a0:	mov	r4, r3
   290a4:	mvn	r0, #0
   290a8:	mvn	r1, #-2147483648	; 0x80000000
   290ac:	mov	r2, r6
   290b0:	mov	r3, r7
   290b4:	bl	47544 <__assert_fail@plt+0x34a94>
   290b8:	mov	r3, r4
   290bc:	ldr	ip, [sp, #168]	; 0xa8
   290c0:	ldr	r4, [sp, #164]	; 0xa4
   290c4:	movw	lr, #50368	; 0xc4c0
   290c8:	subs	r0, r5, r0
   290cc:	mov	r2, sl
   290d0:	movt	lr, #4
   290d4:	sbcs	r0, r9, r1
   290d8:	bge	29aa4 <__assert_fail@plt+0x16ff4>
   290dc:	b	29f80 <__assert_fail@plt+0x174d0>
   290e0:	sub	r3, r0, r2
   290e4:	ldr	r0, [sp, #96]	; 0x60
   290e8:	str	r3, [r8, #144]	; 0x90
   290ec:	ldm	r0, {r3, r9}
   290f0:	subs	r1, r3, r1
   290f4:	sbc	r3, r9, r6
   290f8:	stm	r0, {r1, r3}
   290fc:	str	r2, [sp, #36]	; 0x24
   29100:	ldr	r2, [sp, #100]	; 0x64
   29104:	ldrd	r0, [r2]
   29108:	subs	r0, r0, r5
   2910c:	mov	r5, ip
   29110:	str	r1, [sp, #12]
   29114:	sbc	ip, r1, ip
   29118:	stm	r2, {r0, ip}
   2911c:	ldr	r2, [sp, #104]	; 0x68
   29120:	ldrd	r0, [r2]
   29124:	subs	r0, r0, sl
   29128:	str	r1, [sp, #16]
   2912c:	sbc	sl, r1, lr
   29130:	stm	r2, {r0, sl}
   29134:	ldr	r7, [sp, #108]	; 0x6c
   29138:	ldr	r2, [sp, #40]	; 0x28
   2913c:	ldrd	r0, [r7]
   29140:	subs	r0, r0, r2
   29144:	str	r1, [sp, #24]
   29148:	sbc	r1, r1, r4
   2914c:	str	r1, [sp, #28]
   29150:	strd	r0, [r7]
   29154:	ldr	r4, [sp, #112]	; 0x70
   29158:	ldr	r2, [sp, #48]	; 0x30
   2915c:	ldr	r7, [sp, #60]	; 0x3c
   29160:	ldrd	r0, [r4]
   29164:	subs	r0, r0, r2
   29168:	str	r1, [sp, #32]
   2916c:	sbc	r1, r1, r7
   29170:	str	r1, [sp, #40]	; 0x28
   29174:	strd	r0, [r4]
   29178:	ldr	r2, [sp, #116]	; 0x74
   2917c:	ldr	r4, [sp, #56]	; 0x38
   29180:	ldrd	r0, [r2]
   29184:	subs	lr, r0, r4
   29188:	ldr	r4, [sp, #68]	; 0x44
   2918c:	str	r1, [sp, #48]	; 0x30
   29190:	sbc	r0, r1, r4
   29194:	cmn	r6, #1
   29198:	mov	r6, #0
   2919c:	str	r0, [sp, #56]	; 0x38
   291a0:	str	lr, [r2]
   291a4:	str	r0, [r2, #4]
   291a8:	mov	r0, #0
   291ac:	movwgt	r0, #1
   291b0:	cmn	r9, #1
   291b4:	mov	r2, #0
   291b8:	movwgt	r2, #1
   291bc:	ldr	r1, [sp, #12]
   291c0:	subs	r0, r2, r0
   291c4:	movwne	r0, #1
   291c8:	cmn	r3, #1
   291cc:	str	r0, [sp, #8]
   291d0:	mov	r0, #0
   291d4:	movwgt	r0, #1
   291d8:	subs	r0, r2, r0
   291dc:	ldr	r2, [sp, #28]
   291e0:	movwne	r0, #1
   291e4:	cmn	r5, #1
   291e8:	mov	r5, #0
   291ec:	str	r0, [sp, #4]
   291f0:	mov	r0, #0
   291f4:	movwgt	r0, #1
   291f8:	cmn	r1, #1
   291fc:	mov	r1, #0
   29200:	movwgt	r1, #1
   29204:	subs	r0, r1, r0
   29208:	movwne	r0, #1
   2920c:	cmn	ip, #1
   29210:	str	r0, [sp, #20]
   29214:	mov	r0, #0
   29218:	movwgt	r0, #1
   2921c:	subs	r9, r1, r0
   29220:	ldr	r0, [sp, #44]	; 0x2c
   29224:	ldr	r1, [sp, #16]
   29228:	movwne	r9, #1
   2922c:	cmn	r0, #1
   29230:	mov	r0, #0
   29234:	movwgt	r0, #1
   29238:	cmn	r1, #1
   2923c:	mov	r1, #0
   29240:	movwgt	r1, #1
   29244:	subs	lr, r1, r0
   29248:	mov	r0, #0
   2924c:	movwne	lr, #1
   29250:	cmn	sl, #1
   29254:	movwgt	r0, #1
   29258:	subs	r3, r1, r0
   2925c:	ldr	r0, [sp, #52]	; 0x34
   29260:	ldr	r1, [sp, #24]
   29264:	movwne	r3, #1
   29268:	cmn	r0, #1
   2926c:	mov	r0, #0
   29270:	movwgt	r0, #1
   29274:	cmn	r1, #1
   29278:	mov	r1, #0
   2927c:	movwgt	r1, #1
   29280:	subs	r0, r1, r0
   29284:	movwne	r0, #1
   29288:	cmn	r2, #1
   2928c:	ldr	r2, [sp, #32]
   29290:	movwgt	r6, #1
   29294:	subs	r6, r1, r6
   29298:	mov	r1, #0
   2929c:	movwne	r6, #1
   292a0:	cmn	r7, #1
   292a4:	ldr	r7, [sp, #48]	; 0x30
   292a8:	movwgt	r1, #1
   292ac:	cmn	r2, #1
   292b0:	ldr	r2, [sp, #40]	; 0x28
   292b4:	movwgt	r5, #1
   292b8:	subs	r1, r5, r1
   292bc:	movwne	r1, #1
   292c0:	cmn	r2, #1
   292c4:	mov	r2, #0
   292c8:	movwgt	r2, #1
   292cc:	subs	r5, r5, r2
   292d0:	mov	r2, #0
   292d4:	movwne	r5, #1
   292d8:	cmn	r4, #1
   292dc:	ldr	r4, [sp, #36]	; 0x24
   292e0:	movwgt	r2, #1
   292e4:	cmn	r7, #1
   292e8:	mov	r7, #0
   292ec:	movwgt	r7, #1
   292f0:	subs	ip, r7, r2
   292f4:	ldr	r2, [sp, #56]	; 0x38
   292f8:	movwne	ip, #1
   292fc:	cmn	r2, #1
   29300:	mov	r2, #0
   29304:	movwgt	r2, #1
   29308:	subs	sl, r7, r2
   2930c:	ldr	r2, [sp, #64]	; 0x40
   29310:	movwne	sl, #1
   29314:	cmp	r2, r4
   29318:	bvs	29f80 <__assert_fail@plt+0x174d0>
   2931c:	ldr	r2, [sp, #8]
   29320:	ldr	r4, [sp, #4]
   29324:	ands	r2, r2, r4
   29328:	bne	29f80 <__assert_fail@plt+0x174d0>
   2932c:	ldr	r2, [sp, #20]
   29330:	ands	r2, r2, r9
   29334:	bne	29f80 <__assert_fail@plt+0x174d0>
   29338:	ands	r2, lr, r3
   2933c:	bne	29f80 <__assert_fail@plt+0x174d0>
   29340:	ldr	r3, [sp, #172]	; 0xac
   29344:	ldr	r2, [sp, #152]	; 0x98
   29348:	movw	lr, #50368	; 0xc4c0
   2934c:	ands	r0, r0, r6
   29350:	movt	lr, #4
   29354:	bne	29f80 <__assert_fail@plt+0x174d0>
   29358:	ands	r0, r1, r5
   2935c:	bne	29f80 <__assert_fail@plt+0x174d0>
   29360:	ands	r0, ip, sl
   29364:	ldr	ip, [sp, #168]	; 0xa8
   29368:	ldr	r4, [sp, #164]	; 0xa4
   2936c:	mov	sl, #1
   29370:	beq	29778 <__assert_fail@plt+0x16cc8>
   29374:	b	29f8c <__assert_fail@plt+0x174dc>
   29378:	mov	r0, r7
   2937c:	mov	r1, r5
   29380:	mov	r2, #100	; 0x64
   29384:	mov	r3, #0
   29388:	bl	47544 <__assert_fail@plt+0x34a94>
   2938c:	umull	r2, r3, r0, r6
   29390:	mla	r3, r1, r6, r3
   29394:	rsb	r1, r1, r1, lsl #4
   29398:	subs	r2, r7, r2
   2939c:	mov	r7, #60	; 0x3c
   293a0:	umull	r0, r7, r0, r7
   293a4:	sbc	r3, r5, r3
   293a8:	add	r1, r7, r1, lsl #2
   293ac:	adds	r0, r0, r2
   293b0:	mov	r7, #1
   293b4:	adc	r1, r1, r3
   293b8:	b	298c8 <__assert_fail@plt+0x16e18>
   293bc:	mov	r0, r7
   293c0:	mov	r1, r5
   293c4:	mov	r2, #100	; 0x64
   293c8:	mov	r3, #0
   293cc:	bl	47544 <__assert_fail@plt+0x34a94>
   293d0:	umull	r2, r3, r0, r6
   293d4:	mla	r3, r1, r6, r3
   293d8:	rsb	r1, r1, r1, lsl #4
   293dc:	subs	r2, r7, r2
   293e0:	mov	r7, #60	; 0x3c
   293e4:	umull	r0, r7, r0, r7
   293e8:	sbc	r3, r5, r3
   293ec:	add	r1, r7, r1, lsl #2
   293f0:	adds	r0, r0, r2
   293f4:	mov	r7, #1
   293f8:	adc	r1, r1, r3
   293fc:	b	29a54 <__assert_fail@plt+0x16fa4>
   29400:	mov	r1, r4
   29404:	mov	r2, #100	; 0x64
   29408:	mov	r3, #0
   2940c:	str	r0, [sp, #68]	; 0x44
   29410:	bl	47544 <__assert_fail@plt+0x34a94>
   29414:	mov	lr, #100	; 0x64
   29418:	mov	r2, #0
   2941c:	umull	ip, r3, r0, lr
   29420:	mla	lr, r1, lr, r3
   29424:	ldr	r3, [sp, #68]	; 0x44
   29428:	subs	ip, r3, ip
   2942c:	sbc	r3, r4, lr
   29430:	ldr	r4, [sp, #136]	; 0x88
   29434:	strd	r0, [r4]
   29438:	ldr	r0, [sp, #132]	; 0x84
   2943c:	str	ip, [r0]
   29440:	str	r3, [r0, #4]
   29444:	mov	r0, #2
   29448:	str	r2, [r8, #88]	; 0x58
   2944c:	str	r2, [r8, #92]	; 0x5c
   29450:	ldr	r3, [sp, #172]	; 0xac
   29454:	str	r0, [r8, #28]
   29458:	ldm	r3, {r0, r4}
   2945c:	ldr	r1, [r5, #4]
   29460:	ldr	r2, [r8, #144]	; 0x90
   29464:	str	r4, [sp, #60]	; 0x3c
   29468:	str	r0, [sp, #24]
   2946c:	ldm	r6, {r0, lr}
   29470:	str	lr, [sp, #52]	; 0x34
   29474:	str	r2, [sp, #68]	; 0x44
   29478:	str	r1, [sp, #16]
   2947c:	str	r0, [sp, #56]	; 0x38
   29480:	ldm	r9, {r0, ip}
   29484:	ldr	r9, [r5]
   29488:	ldr	r5, [r5, #8]
   2948c:	str	ip, [sp, #48]	; 0x30
   29490:	str	r0, [sp, #44]	; 0x2c
   29494:	ldm	sl, {r0, r3}
   29498:	str	r3, [sp, #40]	; 0x28
   2949c:	add	r2, r2, r5
   294a0:	str	r2, [sp, #64]	; 0x40
   294a4:	str	r0, [sp, #36]	; 0x24
   294a8:	ldr	r0, [r7, #4]
   294ac:	ldr	r7, [r7]
   294b0:	str	r2, [r8, #144]	; 0x90
   294b4:	ldr	r2, [sp, #96]	; 0x60
   294b8:	str	r0, [sp, #32]
   294bc:	ldm	r2, {r5, r6}
   294c0:	adds	r5, r5, r9
   294c4:	adc	r9, r6, r1
   294c8:	stm	r2, {r5, r9}
   294cc:	ldr	r1, [sp, #100]	; 0x64
   294d0:	ldm	r1, {r5, sl}
   294d4:	adds	r5, r5, r7
   294d8:	adc	r0, sl, r0
   294dc:	str	r0, [sp, #28]
   294e0:	str	r5, [r1]
   294e4:	str	r0, [r1, #4]
   294e8:	ldr	r1, [sp, #104]	; 0x68
   294ec:	ldr	r0, [sp, #36]	; 0x24
   294f0:	ldr	r7, [r1]
   294f4:	ldr	r5, [r1, #4]
   294f8:	adds	r0, r7, r0
   294fc:	adc	r7, r5, r3
   29500:	stm	r1, {r0, r7}
   29504:	ldr	r2, [sp, #108]	; 0x6c
   29508:	ldr	r3, [sp, #44]	; 0x2c
   2950c:	ldrd	r0, [r2]
   29510:	adds	r0, r0, r3
   29514:	str	r1, [sp, #36]	; 0x24
   29518:	adc	r1, r1, ip
   2951c:	str	r1, [sp, #20]
   29520:	strd	r0, [r2]
   29524:	ldr	ip, [sp, #112]	; 0x70
   29528:	ldr	r2, [sp, #56]	; 0x38
   2952c:	ldrd	r0, [ip]
   29530:	adds	r0, r0, r2
   29534:	str	r1, [sp, #44]	; 0x2c
   29538:	adc	r3, r1, lr
   2953c:	stm	ip, {r0, r3}
   29540:	mov	lr, #0
   29544:	ldr	ip, [sp, #116]	; 0x74
   29548:	ldr	r2, [sp, #24]
   2954c:	ldrd	r0, [ip]
   29550:	adds	r0, r0, r2
   29554:	str	r1, [sp, #56]	; 0x38
   29558:	mov	r2, #0
   2955c:	adc	r4, r1, r4
   29560:	cmn	r6, #1
   29564:	mov	r1, #0
   29568:	stm	ip, {r0, r4}
   2956c:	mov	r0, #0
   29570:	mov	ip, #0
   29574:	mov	r6, #0
   29578:	movwgt	r1, #1
   2957c:	cmn	r9, #1
   29580:	movwgt	r0, #1
   29584:	str	r1, [sp, #24]
   29588:	subs	r0, r1, r0
   2958c:	mov	r1, #0
   29590:	movwne	r0, #1
   29594:	str	r0, [sp, #12]
   29598:	ldr	r0, [sp, #16]
   2959c:	cmn	r0, #1
   295a0:	mov	r0, #0
   295a4:	movwgt	r0, #1
   295a8:	cmn	sl, #1
   295ac:	ldr	sl, [sp, #64]	; 0x40
   295b0:	str	r0, [sp, #16]
   295b4:	ldr	r0, [sp, #28]
   295b8:	movwgt	r1, #1
   295bc:	str	r1, [sp, #28]
   295c0:	cmn	r0, #1
   295c4:	mov	r0, #0
   295c8:	movwgt	r0, #1
   295cc:	subs	r0, r1, r0
   295d0:	ldr	r1, [sp, #52]	; 0x34
   295d4:	movwne	r0, #1
   295d8:	str	r0, [sp, #8]
   295dc:	ldr	r0, [sp, #32]
   295e0:	cmn	r0, #1
   295e4:	mov	r0, #0
   295e8:	movwgt	r0, #1
   295ec:	cmn	r5, #1
   295f0:	mov	r5, #0
   295f4:	movwgt	ip, #1
   295f8:	cmn	r7, #1
   295fc:	str	r0, [sp, #32]
   29600:	mov	r0, #0
   29604:	mov	r7, #0
   29608:	movwgt	r0, #1
   2960c:	subs	r0, ip, r0
   29610:	movwne	r0, #1
   29614:	str	r0, [sp, #4]
   29618:	ldr	r0, [sp, #40]	; 0x28
   2961c:	cmn	r0, #1
   29620:	ldr	r0, [sp, #36]	; 0x24
   29624:	movwgt	r5, #1
   29628:	cmn	r0, #1
   2962c:	ldr	r0, [sp, #20]
   29630:	movwgt	r7, #1
   29634:	cmn	r0, #1
   29638:	mov	r0, #0
   2963c:	movwgt	r0, #1
   29640:	subs	r0, r7, r0
   29644:	movwne	r0, #1
   29648:	str	r0, [sp, #40]	; 0x28
   2964c:	ldr	r0, [sp, #48]	; 0x30
   29650:	cmn	r0, #1
   29654:	ldr	r0, [sp, #44]	; 0x2c
   29658:	movwgt	lr, #1
   2965c:	cmn	r0, #1
   29660:	mov	r0, #0
   29664:	movwgt	r0, #1
   29668:	cmn	r3, #1
   2966c:	mov	r3, #0
   29670:	movwgt	r2, #1
   29674:	subs	r2, r0, r2
   29678:	movwne	r2, #1
   2967c:	cmn	r1, #1
   29680:	ldr	r1, [sp, #56]	; 0x38
   29684:	movwgt	r3, #1
   29688:	cmn	r1, #1
   2968c:	ldr	r1, [sp, #60]	; 0x3c
   29690:	movwgt	r6, #1
   29694:	cmn	r4, #1
   29698:	mov	r4, #0
   2969c:	movwgt	r4, #1
   296a0:	subs	r9, r6, r4
   296a4:	ldr	r4, [sp, #68]	; 0x44
   296a8:	movwne	r9, #1
   296ac:	cmn	r1, #1
   296b0:	mov	r1, #0
   296b4:	movwgt	r1, #1
   296b8:	str	r1, [sp, #60]	; 0x3c
   296bc:	cmp	sl, r4
   296c0:	bvs	29f80 <__assert_fail@plt+0x174d0>
   296c4:	ldr	r4, [sp, #24]
   296c8:	ldr	r1, [sp, #16]
   296cc:	sub	r4, r4, r1
   296d0:	ldr	r1, [sp, #12]
   296d4:	clz	r4, r4
   296d8:	lsr	r4, r4, #5
   296dc:	ands	r4, r4, r1
   296e0:	bne	29f80 <__assert_fail@plt+0x174d0>
   296e4:	ldr	r1, [sp, #28]
   296e8:	ldr	r4, [sp, #32]
   296ec:	sub	r4, r1, r4
   296f0:	ldr	r1, [sp, #8]
   296f4:	clz	r4, r4
   296f8:	lsr	r4, r4, #5
   296fc:	ands	r4, r4, r1
   29700:	bne	29f80 <__assert_fail@plt+0x174d0>
   29704:	ldr	r1, [sp, #4]
   29708:	sub	r5, ip, r5
   2970c:	mov	sl, #1
   29710:	clz	r5, r5
   29714:	lsr	r5, r5, #5
   29718:	ands	r5, r5, r1
   2971c:	ldreq	r1, [sp, #40]	; 0x28
   29720:	subeq	r7, r7, lr
   29724:	clzeq	r7, r7
   29728:	lsreq	r7, r7, #5
   2972c:	andseq	r1, r7, r1
   29730:	bne	29f8c <__assert_fail@plt+0x174dc>
   29734:	sub	r0, r0, r3
   29738:	clz	r0, r0
   2973c:	lsr	r0, r0, #5
   29740:	ands	r0, r0, r2
   29744:	bne	29f8c <__assert_fail@plt+0x174dc>
   29748:	ldr	r0, [sp, #60]	; 0x3c
   2974c:	ldr	ip, [sp, #168]	; 0xa8
   29750:	ldr	r3, [sp, #172]	; 0xac
   29754:	ldr	r2, [sp, #152]	; 0x98
   29758:	ldr	r4, [sp, #164]	; 0xa4
   2975c:	movw	lr, #50368	; 0xc4c0
   29760:	movt	lr, #4
   29764:	sub	r0, r6, r0
   29768:	clz	r0, r0
   2976c:	lsr	r0, r0, #5
   29770:	ands	r0, r0, r9
   29774:	bne	29f8c <__assert_fail@plt+0x174dc>
   29778:	mov	r0, #1
   2977c:	strb	r0, [r8, #153]	; 0x99
   29780:	b	29b10 <__assert_fail@plt+0x17060>
   29784:	mov	r0, r9
   29788:	mov	r2, #100	; 0x64
   2978c:	mov	r3, #0
   29790:	mov	r7, #100	; 0x64
   29794:	mov	r6, r1
   29798:	bl	47544 <__assert_fail@plt+0x34a94>
   2979c:	mov	r2, r4
   297a0:	umull	r2, r3, r0, r7
   297a4:	ldr	ip, [sp, #168]	; 0xa8
   297a8:	movw	lr, #50368	; 0xc4c0
   297ac:	mov	r5, #0
   297b0:	movt	lr, #4
   297b4:	mla	r3, r1, r7, r3
   297b8:	subs	r2, r9, r2
   297bc:	sbc	r3, r6, r3
   297c0:	ldr	r7, [sp, #136]	; 0x88
   297c4:	strd	r0, [r7]
   297c8:	ldr	r0, [sp, #132]	; 0x84
   297cc:	strd	r2, [r0]
   297d0:	mov	r0, #2
   297d4:	str	r5, [r8, #88]	; 0x58
   297d8:	str	r5, [r8, #92]	; 0x5c
   297dc:	mov	r3, sl
   297e0:	ldr	r2, [sp, #152]	; 0x98
   297e4:	str	r0, [r8, #28]
   297e8:	b	29b10 <__assert_fail@plt+0x17060>
   297ec:	and	r0, r7, r5
   297f0:	cmn	r0, #1
   297f4:	beq	29820 <__assert_fail@plt+0x16d70>
   297f8:	mov	r0, #0
   297fc:	mov	r1, #-2147483648	; 0x80000000
   29800:	mov	r2, r7
   29804:	mov	r3, r5
   29808:	bl	47544 <__assert_fail@plt+0x34a94>
   2980c:	subs	r0, r0, #60	; 0x3c
   29810:	mov	r2, #1
   29814:	sbcs	r0, r1, #0
   29818:	movge	r2, #0
   2981c:	b	29824 <__assert_fail@plt+0x16d74>
   29820:	mov	r2, #0
   29824:	mov	r0, #60	; 0x3c
   29828:	str	r2, [sp, #64]	; 0x40
   2982c:	rsb	r2, r5, r5, lsl #4
   29830:	cmn	sl, #1
   29834:	mov	r6, #0
   29838:	mov	ip, #0
   2983c:	mov	r3, #0
   29840:	umull	lr, r1, r7, r0
   29844:	movwgt	r6, #1
   29848:	mov	r7, #0
   2984c:	add	r2, r1, r2, lsl #2
   29850:	cmn	r2, #1
   29854:	movwgt	r7, #1
   29858:	subs	r0, r7, r6
   2985c:	movwne	r0, #1
   29860:	subs	r1, lr, r9
   29864:	str	r1, [sp, #60]	; 0x3c
   29868:	sbc	r1, r2, sl
   2986c:	cmn	r1, #1
   29870:	movwgt	ip, #1
   29874:	subs	r5, r7, ip
   29878:	movwne	r5, #1
   2987c:	and	r5, r0, r5
   29880:	adds	r0, lr, r9
   29884:	adc	r2, r2, sl
   29888:	cmn	r2, #1
   2988c:	movwgt	r3, #1
   29890:	subs	r3, r7, r3
   29894:	sub	r7, r7, r6
   29898:	ldr	r6, [sp, #68]	; 0x44
   2989c:	clz	r7, r7
   298a0:	movwne	r3, #1
   298a4:	lsr	r7, r7, #5
   298a8:	ands	r6, r6, #1
   298ac:	andeq	r5, r7, r3
   298b0:	ldr	r3, [sp, #64]	; 0x40
   298b4:	moveq	r1, r2
   298b8:	ldr	r2, [sp, #60]	; 0x3c
   298bc:	orr	r3, r3, r5
   298c0:	movne	r0, r2
   298c4:	eor	r7, r3, #1
   298c8:	adds	r3, r0, #1440	; 0x5a0
   298cc:	mov	sl, #1
   298d0:	adc	r1, r1, #0
   298d4:	cmp	r7, #0
   298d8:	beq	29f8c <__assert_fail@plt+0x174dc>
   298dc:	rsbs	r2, r3, #2880	; 0xb40
   298e0:	rscs	r1, r1, #0
   298e4:	bcc	29f8c <__assert_fail@plt+0x174dc>
   298e8:	rsb	r0, r0, r0, lsl #4
   298ec:	mov	r3, #0
   298f0:	mov	r2, #0
   298f4:	lsl	r1, r0, #2
   298f8:	str	r1, [r8, #24]
   298fc:	sbfx	r1, r0, #29, #1
   29900:	ldr	r7, [sp, #172]	; 0xac
   29904:	cmn	r1, #1
   29908:	movwgt	r3, #1
   2990c:	ldrd	r6, [r7, #-112]	; 0xffffff90
   29910:	adds	r0, r6, r0, lsl #2
   29914:	mov	r6, #0
   29918:	adc	r1, r1, r7
   2991c:	cmn	r1, #1
   29920:	str	r0, [r8, #24]
   29924:	movwgt	r6, #1
   29928:	subs	r6, r3, r6
   2992c:	movwne	r6, #1
   29930:	cmn	r7, #1
   29934:	movwgt	r2, #1
   29938:	sub	r2, r3, r2
   2993c:	clz	r2, r2
   29940:	lsr	r2, r2, #5
   29944:	tst	r2, r6
   29948:	bne	29f8c <__assert_fail@plt+0x174dc>
   2994c:	asr	r2, r0, #31
   29950:	ldr	ip, [sp, #168]	; 0xa8
   29954:	ldr	r3, [sp, #172]	; 0xac
   29958:	movw	lr, #50368	; 0xc4c0
   2995c:	eor	r0, r0, r0
   29960:	eor	r1, r1, r2
   29964:	ldr	r2, [sp, #152]	; 0x98
   29968:	movt	lr, #4
   2996c:	orrs	r0, r0, r1
   29970:	mov	r0, r4
   29974:	beq	29b10 <__assert_fail@plt+0x17060>
   29978:	b	29f8c <__assert_fail@plt+0x174dc>
   2997c:	and	r0, r7, r5
   29980:	cmn	r0, #1
   29984:	beq	299b0 <__assert_fail@plt+0x16f00>
   29988:	mov	r0, #0
   2998c:	mov	r1, #-2147483648	; 0x80000000
   29990:	mov	r2, r7
   29994:	mov	r3, r5
   29998:	bl	47544 <__assert_fail@plt+0x34a94>
   2999c:	subs	r0, r0, #60	; 0x3c
   299a0:	mov	r2, #1
   299a4:	sbcs	r0, r1, #0
   299a8:	movge	r2, #0
   299ac:	b	299b4 <__assert_fail@plt+0x16f04>
   299b0:	mov	r2, #0
   299b4:	mov	r0, #60	; 0x3c
   299b8:	str	r2, [sp, #64]	; 0x40
   299bc:	rsb	r2, r5, r5, lsl #4
   299c0:	cmn	sl, #1
   299c4:	mov	r6, #0
   299c8:	mov	r4, r9
   299cc:	mov	ip, #0
   299d0:	mov	r3, #0
   299d4:	umull	lr, r1, r7, r0
   299d8:	movwgt	r6, #1
   299dc:	mov	r7, #0
   299e0:	add	r2, r1, r2, lsl #2
   299e4:	cmn	r2, #1
   299e8:	movwgt	r7, #1
   299ec:	subs	r0, r7, r6
   299f0:	movwne	r0, #1
   299f4:	subs	r9, lr, r9
   299f8:	sbc	r1, r2, sl
   299fc:	cmn	r1, #1
   29a00:	movwgt	ip, #1
   29a04:	subs	r5, r7, ip
   29a08:	movwne	r5, #1
   29a0c:	and	r5, r0, r5
   29a10:	adds	r0, lr, r4
   29a14:	adc	r2, r2, sl
   29a18:	cmn	r2, #1
   29a1c:	movwgt	r3, #1
   29a20:	subs	r3, r7, r3
   29a24:	sub	r7, r7, r6
   29a28:	ldr	r6, [sp, #68]	; 0x44
   29a2c:	clz	r7, r7
   29a30:	movwne	r3, #1
   29a34:	lsr	r7, r7, #5
   29a38:	ands	r6, r6, #1
   29a3c:	andeq	r5, r7, r3
   29a40:	ldr	r3, [sp, #64]	; 0x40
   29a44:	moveq	r1, r2
   29a48:	movne	r0, r9
   29a4c:	orr	r3, r3, r5
   29a50:	eor	r7, r3, #1
   29a54:	ldr	ip, [sp, #168]	; 0xa8
   29a58:	movw	lr, #50368	; 0xc4c0
   29a5c:	adds	r3, r0, #1440	; 0x5a0
   29a60:	mov	sl, #1
   29a64:	movt	lr, #4
   29a68:	adc	r1, r1, #0
   29a6c:	cmp	r7, #0
   29a70:	beq	29f8c <__assert_fail@plt+0x174dc>
   29a74:	rsbs	r2, r3, #2880	; 0xb40
   29a78:	ldr	r3, [sp, #172]	; 0xac
   29a7c:	ldr	r2, [sp, #152]	; 0x98
   29a80:	ldr	r4, [sp, #164]	; 0xa4
   29a84:	rscs	r1, r1, #0
   29a88:	bcc	29f8c <__assert_fail@plt+0x174dc>
   29a8c:	rsb	r0, r0, r0, lsl #4
   29a90:	lsl	r0, r0, #2
   29a94:	str	r0, [r8, #24]
   29a98:	b	29b10 <__assert_fail@plt+0x17060>
   29a9c:	mvn	r5, #0
   29aa0:	mvn	r9, #0
   29aa4:	umull	r1, r0, r5, r6
   29aa8:	mla	r0, r5, r7, r0
   29aac:	mla	r0, r9, r6, r0
   29ab0:	str	r1, [sp, #224]	; 0xe0
   29ab4:	str	r0, [sp, #216]	; 0xd8
   29ab8:	mov	r0, #0
   29abc:	str	r0, [sp, #228]	; 0xe4
   29ac0:	mov	r0, #0
   29ac4:	str	r0, [sp, #220]	; 0xdc
   29ac8:	mov	r0, #0
   29acc:	str	r0, [sp, #212]	; 0xd4
   29ad0:	mov	r0, #0
   29ad4:	str	r0, [sp, #208]	; 0xd0
   29ad8:	mov	r0, #0
   29adc:	str	r0, [sp, #204]	; 0xcc
   29ae0:	mov	r0, #0
   29ae4:	str	r0, [sp, #196]	; 0xc4
   29ae8:	mov	r0, #0
   29aec:	str	r0, [sp, #200]	; 0xc8
   29af0:	mov	r0, #0
   29af4:	str	r0, [sp, #192]	; 0xc0
   29af8:	mov	r0, #0
   29afc:	str	r0, [sp, #188]	; 0xbc
   29b00:	mov	r0, #0
   29b04:	str	r0, [sp, #236]	; 0xec
   29b08:	mov	r0, #0
   29b0c:	str	r0, [sp, #232]	; 0xe8
   29b10:	sub	r0, r4, r4, lsl #3
   29b14:	ldr	r7, [sp, #184]	; 0xb8
   29b18:	add	r3, r3, r0, lsl #3
   29b1c:	ldr	r0, [sp, #236]	; 0xec
   29b20:	sub	r7, r7, r4
   29b24:	sub	r4, fp, #112	; 0x70
   29b28:	mov	r9, r4
   29b2c:	str	r0, [r3, #56]!	; 0x38
   29b30:	ldr	r0, [sp, #232]	; 0xe8
   29b34:	str	r0, [r3, #4]
   29b38:	ldr	r0, [sp, #228]	; 0xe4
   29b3c:	str	r0, [r3, #8]
   29b40:	ldr	r0, [sp, #220]	; 0xdc
   29b44:	str	r0, [r3, #12]
   29b48:	ldr	r0, [sp, #224]	; 0xe0
   29b4c:	str	r0, [r3, #16]
   29b50:	ldr	r0, [sp, #216]	; 0xd8
   29b54:	str	r0, [r3, #20]
   29b58:	ldr	r0, [sp, #212]	; 0xd4
   29b5c:	str	r0, [r3, #24]
   29b60:	ldr	r0, [sp, #208]	; 0xd0
   29b64:	str	r0, [r3, #28]
   29b68:	ldr	r0, [sp, #204]	; 0xcc
   29b6c:	str	r0, [r3, #32]
   29b70:	ldr	r0, [sp, #196]	; 0xc4
   29b74:	str	r0, [r3, #36]	; 0x24
   29b78:	ldr	r0, [sp, #200]	; 0xc8
   29b7c:	str	r0, [r3, #40]	; 0x28
   29b80:	ldr	r0, [sp, #192]	; 0xc0
   29b84:	str	r0, [r3, #44]	; 0x2c
   29b88:	ldr	r0, [sp, #188]	; 0xbc
   29b8c:	str	r0, [r3, #48]	; 0x30
   29b90:	ldr	r0, [sp, #180]	; 0xb4
   29b94:	str	r0, [r3, #52]	; 0x34
   29b98:	add	r0, r4, r7, lsl #1
   29b9c:	ldrsh	r1, [r0]
   29ba0:	movw	r0, #51192	; 0xc7f8
   29ba4:	movt	r0, #4
   29ba8:	ldrb	r0, [r0, r2]
   29bac:	movw	r2, #51284	; 0xc854
   29bb0:	movt	r2, #4
   29bb4:	sub	r0, r0, #28
   29bb8:	add	r2, r2, r0
   29bbc:	ldrsb	r2, [r2]
   29bc0:	add	r2, r1, r2
   29bc4:	cmp	r2, #112	; 0x70
   29bc8:	bhi	267b0 <__assert_fail@plt+0x13d00>
   29bcc:	mov	r5, r3
   29bd0:	movw	r3, #50760	; 0xc648
   29bd4:	movt	r3, #4
   29bd8:	add	r3, r3, r2
   29bdc:	ldrsb	r3, [r3]
   29be0:	cmp	r3, r1
   29be4:	mov	r3, r5
   29be8:	bne	267b0 <__assert_fail@plt+0x13d00>
   29bec:	movw	r0, #50873	; 0xc6b9
   29bf0:	ldr	r4, [sp, #176]	; 0xb0
   29bf4:	movt	r0, #4
   29bf8:	ldrb	sl, [r0, r2]
   29bfc:	b	267c4 <__assert_fail@plt+0x13d14>
   29c00:	mov	r0, #1
   29c04:	strb	r0, [r8, #180]	; 0xb4
   29c08:	ldr	r0, [sp, #92]	; 0x5c
   29c0c:	vst1.64	{d16-d17}, [r0]
   29c10:	ldr	r0, [sp, #84]	; 0x54
   29c14:	str	lr, [r0]
   29c18:	str	ip, [r0, #4]
   29c1c:	b	29458 <__assert_fail@plt+0x169a8>
   29c20:	mov	r0, #1
   29c24:	strb	r0, [r8, #180]	; 0xb4
   29c28:	ldr	r0, [sp, #92]	; 0x5c
   29c2c:	vst1.64	{d16-d17}, [r0]
   29c30:	ldr	r0, [sp, #84]	; 0x54
   29c34:	strd	r6, [r0]
   29c38:	b	29b10 <__assert_fail@plt+0x17060>
   29c3c:	mov	r9, r5
   29c40:	b	26ea4 <__assert_fail@plt+0x143f4>
   29c44:	movw	r0, #51840	; 0xca80
   29c48:	movt	r0, #4
   29c4c:	b	26db4 <__assert_fail@plt+0x14304>
   29c50:	movw	r0, #51840	; 0xca80
   29c54:	movt	r0, #4
   29c58:	add	r9, r0, #24
   29c5c:	b	26ea4 <__assert_fail@plt+0x143f4>
   29c60:	movw	r0, #51840	; 0xca80
   29c64:	movt	r0, #4
   29c68:	add	r9, r0, #36	; 0x24
   29c6c:	b	26ea4 <__assert_fail@plt+0x143f4>
   29c70:	movw	r0, #51840	; 0xca80
   29c74:	movt	r0, #4
   29c78:	add	r9, r0, #48	; 0x30
   29c7c:	b	26ea4 <__assert_fail@plt+0x143f4>
   29c80:	movw	r0, #51840	; 0xca80
   29c84:	movt	r0, #4
   29c88:	add	r9, r0, #60	; 0x3c
   29c8c:	b	26ea4 <__assert_fail@plt+0x143f4>
   29c90:	movw	r0, #51840	; 0xca80
   29c94:	movt	r0, #4
   29c98:	add	r9, r0, #72	; 0x48
   29c9c:	b	26ea4 <__assert_fail@plt+0x143f4>
   29ca0:	movw	r0, #51840	; 0xca80
   29ca4:	movt	r0, #4
   29ca8:	add	r9, r0, #84	; 0x54
   29cac:	b	26ea4 <__assert_fail@plt+0x143f4>
   29cb0:	movw	r0, #51840	; 0xca80
   29cb4:	movt	r0, #4
   29cb8:	add	r9, r0, #96	; 0x60
   29cbc:	b	26ea4 <__assert_fail@plt+0x143f4>
   29cc0:	movw	r0, #51840	; 0xca80
   29cc4:	movt	r0, #4
   29cc8:	add	r9, r0, #108	; 0x6c
   29ccc:	b	26ea4 <__assert_fail@plt+0x143f4>
   29cd0:	movw	r0, #51840	; 0xca80
   29cd4:	movt	r0, #4
   29cd8:	add	r9, r0, #120	; 0x78
   29cdc:	b	26ea4 <__assert_fail@plt+0x143f4>
   29ce0:	movw	r0, #51840	; 0xca80
   29ce4:	movt	r0, #4
   29ce8:	add	r9, r0, #132	; 0x84
   29cec:	b	26ea4 <__assert_fail@plt+0x143f4>
   29cf0:	movw	r0, #51840	; 0xca80
   29cf4:	movt	r0, #4
   29cf8:	add	r9, r0, #144	; 0x90
   29cfc:	b	26ea4 <__assert_fail@plt+0x143f4>
   29d00:	movw	r0, #51840	; 0xca80
   29d04:	movt	r0, #4
   29d08:	add	r9, r0, #156	; 0x9c
   29d0c:	b	26ea4 <__assert_fail@plt+0x143f4>
   29d10:	movw	r0, #51840	; 0xca80
   29d14:	movt	r0, #4
   29d18:	add	r9, r0, #168	; 0xa8
   29d1c:	b	26ea4 <__assert_fail@plt+0x143f4>
   29d20:	movw	r0, #51840	; 0xca80
   29d24:	movt	r0, #4
   29d28:	add	r9, r0, #180	; 0xb4
   29d2c:	b	26ea4 <__assert_fail@plt+0x143f4>
   29d30:	movw	r0, #51840	; 0xca80
   29d34:	movt	r0, #4
   29d38:	add	r9, r0, #192	; 0xc0
   29d3c:	b	26ea4 <__assert_fail@plt+0x143f4>
   29d40:	movw	r0, #51840	; 0xca80
   29d44:	movt	r0, #4
   29d48:	add	r9, r0, #204	; 0xcc
   29d4c:	b	26ea4 <__assert_fail@plt+0x143f4>
   29d50:	movw	r0, #51840	; 0xca80
   29d54:	movt	r0, #4
   29d58:	add	r9, r0, #216	; 0xd8
   29d5c:	b	26ea4 <__assert_fail@plt+0x143f4>
   29d60:	movw	r0, #51840	; 0xca80
   29d64:	movt	r0, #4
   29d68:	add	r9, r0, #228	; 0xe4
   29d6c:	b	26ea4 <__assert_fail@plt+0x143f4>
   29d70:	cmp	r0, #0
   29d74:	sub	r4, fp, #72	; 0x48
   29d78:	beq	29e00 <__assert_fail@plt+0x17350>
   29d7c:	ldrb	r2, [fp, #-71]	; 0xffffffb9
   29d80:	cmp	r0, #46	; 0x2e
   29d84:	sub	r0, r0, #46	; 0x2e
   29d88:	ldr	r1, [sp, #76]	; 0x4c
   29d8c:	clz	r0, r0
   29d90:	moveq	r1, r4
   29d94:	lsr	r0, r0, #5
   29d98:	cmp	r2, #0
   29d9c:	strb	r2, [r1]
   29da0:	beq	29dd4 <__assert_fail@plt+0x17324>
   29da4:	ldr	r2, [sp, #76]	; 0x4c
   29da8:	ldrb	r3, [r2]
   29dac:	ldrb	r5, [r2, #1]!
   29db0:	cmp	r3, #46	; 0x2e
   29db4:	sub	r3, r3, #46	; 0x2e
   29db8:	clz	r3, r3
   29dbc:	addne	r1, r1, #1
   29dc0:	cmp	r5, #0
   29dc4:	lsr	r3, r3, #5
   29dc8:	strb	r5, [r1]
   29dcc:	orr	r0, r0, r3
   29dd0:	bne	29da8 <__assert_fail@plt+0x172f8>
   29dd4:	mov	r5, #63	; 0x3f
   29dd8:	tst	r0, #1
   29ddc:	beq	26ec4 <__assert_fail@plt+0x14414>
   29de0:	sub	r4, fp, #72	; 0x48
   29de4:	mov	r0, r8
   29de8:	mov	r1, r4
   29dec:	bl	2b110 <__assert_fail@plt+0x18660>
   29df0:	mov	r9, r0
   29df4:	cmp	r0, #0
   29df8:	bne	26ea4 <__assert_fail@plt+0x143f4>
   29dfc:	b	26ec4 <__assert_fail@plt+0x14414>
   29e00:	mov	r5, #63	; 0x3f
   29e04:	b	26ec4 <__assert_fail@plt+0x14414>
   29e08:	movw	r0, #52092	; 0xcb7c
   29e0c:	movt	r0, #4
   29e10:	add	r9, r0, #24
   29e14:	b	26ea4 <__assert_fail@plt+0x143f4>
   29e18:	movw	r0, #52092	; 0xcb7c
   29e1c:	movt	r0, #4
   29e20:	add	r9, r0, #36	; 0x24
   29e24:	b	26ea4 <__assert_fail@plt+0x143f4>
   29e28:	movw	r0, #52092	; 0xcb7c
   29e2c:	movt	r0, #4
   29e30:	add	r9, r0, #48	; 0x30
   29e34:	b	26ea4 <__assert_fail@plt+0x143f4>
   29e38:	movw	r0, #52092	; 0xcb7c
   29e3c:	movt	r0, #4
   29e40:	add	r9, r0, #60	; 0x3c
   29e44:	b	26ea4 <__assert_fail@plt+0x143f4>
   29e48:	movw	r0, #52092	; 0xcb7c
   29e4c:	movt	r0, #4
   29e50:	add	r9, r0, #72	; 0x48
   29e54:	b	26ea4 <__assert_fail@plt+0x143f4>
   29e58:	movw	r0, #52092	; 0xcb7c
   29e5c:	movt	r0, #4
   29e60:	add	r9, r0, #84	; 0x54
   29e64:	b	26ea4 <__assert_fail@plt+0x143f4>
   29e68:	movw	r0, #52092	; 0xcb7c
   29e6c:	movt	r0, #4
   29e70:	add	r9, r0, #96	; 0x60
   29e74:	b	26ea4 <__assert_fail@plt+0x143f4>
   29e78:	movw	r0, #52092	; 0xcb7c
   29e7c:	movt	r0, #4
   29e80:	add	r9, r0, #108	; 0x6c
   29e84:	b	26ea4 <__assert_fail@plt+0x143f4>
   29e88:	movw	r0, #52092	; 0xcb7c
   29e8c:	movt	r0, #4
   29e90:	add	r9, r0, #120	; 0x78
   29e94:	b	26ea4 <__assert_fail@plt+0x143f4>
   29e98:	movw	r0, #52092	; 0xcb7c
   29e9c:	movt	r0, #4
   29ea0:	add	r9, r0, #132	; 0x84
   29ea4:	b	26ea4 <__assert_fail@plt+0x143f4>
   29ea8:	movw	r0, #52092	; 0xcb7c
   29eac:	movt	r0, #4
   29eb0:	add	r9, r0, #144	; 0x90
   29eb4:	b	26ea4 <__assert_fail@plt+0x143f4>
   29eb8:	movw	r0, #52092	; 0xcb7c
   29ebc:	movt	r0, #4
   29ec0:	add	r9, r0, #156	; 0x9c
   29ec4:	b	26ea4 <__assert_fail@plt+0x143f4>
   29ec8:	movw	r0, #52092	; 0xcb7c
   29ecc:	movt	r0, #4
   29ed0:	add	r9, r0, #168	; 0xa8
   29ed4:	b	26ea4 <__assert_fail@plt+0x143f4>
   29ed8:	movw	r0, #52092	; 0xcb7c
   29edc:	movt	r0, #4
   29ee0:	add	r9, r0, #180	; 0xb4
   29ee4:	b	26ea4 <__assert_fail@plt+0x143f4>
   29ee8:	movw	r0, #52092	; 0xcb7c
   29eec:	movt	r0, #4
   29ef0:	add	r9, r0, #192	; 0xc0
   29ef4:	b	26ea4 <__assert_fail@plt+0x143f4>
   29ef8:	movw	r0, #52092	; 0xcb7c
   29efc:	movt	r0, #4
   29f00:	add	r9, r0, #204	; 0xcc
   29f04:	b	26ea4 <__assert_fail@plt+0x143f4>
   29f08:	movw	r0, #52092	; 0xcb7c
   29f0c:	movt	r0, #4
   29f10:	add	r9, r0, #216	; 0xd8
   29f14:	b	26ea4 <__assert_fail@plt+0x143f4>
   29f18:	movw	r0, #52092	; 0xcb7c
   29f1c:	movt	r0, #4
   29f20:	add	r9, r0, #228	; 0xe4
   29f24:	b	26ea4 <__assert_fail@plt+0x143f4>
   29f28:	movw	r0, #52092	; 0xcb7c
   29f2c:	movt	r0, #4
   29f30:	add	r9, r0, #240	; 0xf0
   29f34:	b	26ea4 <__assert_fail@plt+0x143f4>
   29f38:	movw	r0, #52092	; 0xcb7c
   29f3c:	movt	r0, #4
   29f40:	add	r9, r0, #252	; 0xfc
   29f44:	b	26ea4 <__assert_fail@plt+0x143f4>
   29f48:	movw	r0, #52092	; 0xcb7c
   29f4c:	movt	r0, #4
   29f50:	add	r9, r0, #264	; 0x108
   29f54:	b	26ea4 <__assert_fail@plt+0x143f4>
   29f58:	movw	r0, #52092	; 0xcb7c
   29f5c:	movt	r0, #4
   29f60:	add	r9, r0, #276	; 0x114
   29f64:	b	26ea4 <__assert_fail@plt+0x143f4>
   29f68:	movw	r0, #52092	; 0xcb7c
   29f6c:	movt	r0, #4
   29f70:	add	r9, r0, #288	; 0x120
   29f74:	b	26ea4 <__assert_fail@plt+0x143f4>
   29f78:	mov	sl, #0
   29f7c:	b	29f8c <__assert_fail@plt+0x174dc>
   29f80:	mov	sl, #1
   29f84:	b	29f8c <__assert_fail@plt+0x174dc>
   29f88:	mov	sl, #2
   29f8c:	mov	r0, sl
   29f90:	sub	sp, fp, #48	; 0x30
   29f94:	vpop	{d8-d9}
   29f98:	add	sp, sp, #4
   29f9c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   29fa0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   29fa4:	add	fp, sp, #28
   29fa8:	sub	sp, sp, #620	; 0x26c
   29fac:	mov	r4, r0
   29fb0:	movw	r0, #53073	; 0xcf51
   29fb4:	mov	r6, r2
   29fb8:	mov	r5, r1
   29fbc:	movt	r0, #4
   29fc0:	bl	126d8 <getenv@plt>
   29fc4:	bl	45e50 <__assert_fail@plt+0x333a0>
   29fc8:	cmp	r0, #0
   29fcc:	beq	2a354 <__assert_fail@plt+0x178a4>
   29fd0:	add	r8, sp, #136	; 0x88
   29fd4:	cmp	r6, #0
   29fd8:	str	r4, [sp, #36]	; 0x24
   29fdc:	str	r0, [sp, #76]	; 0x4c
   29fe0:	bne	29ff0 <__assert_fail@plt+0x17540>
   29fe4:	sub	r6, fp, #184	; 0xb8
   29fe8:	mov	r0, r6
   29fec:	bl	46cf4 <__assert_fail@plt+0x34244>
   29ff0:	add	r0, r8, #8
   29ff4:	ldr	r2, [r6]
   29ff8:	add	sl, r5, #4
   29ffc:	str	r0, [sp, #20]
   2a000:	add	r0, r8, #40	; 0x28
   2a004:	str	r0, [sp, #68]	; 0x44
   2a008:	add	r0, r8, #56	; 0x38
   2a00c:	str	r0, [sp, #64]	; 0x40
   2a010:	add	r0, r8, #64	; 0x40
   2a014:	str	r0, [sp, #60]	; 0x3c
   2a018:	add	r0, r8, #72	; 0x48
   2a01c:	str	r0, [sp, #56]	; 0x38
   2a020:	add	r0, r8, #80	; 0x50
   2a024:	str	r0, [sp, #52]	; 0x34
   2a028:	add	r0, r8, #88	; 0x58
   2a02c:	str	r0, [sp, #32]
   2a030:	add	r0, r8, #96	; 0x60
   2a034:	str	r0, [sp, #48]	; 0x30
   2a038:	add	r0, r8, #104	; 0x68
   2a03c:	str	r0, [sp, #24]
   2a040:	add	r0, r8, #112	; 0x70
   2a044:	str	r0, [sp, #28]
   2a048:	add	r0, r8, #120	; 0x78
   2a04c:	str	r0, [sp, #16]
   2a050:	add	r0, r8, #128	; 0x80
   2a054:	str	r0, [sp, #12]
   2a058:	add	r0, r8, #136	; 0x88
   2a05c:	str	r0, [sp, #8]
   2a060:	ldr	r0, [r6, #4]
   2a064:	str	r0, [sp, #40]	; 0x28
   2a068:	b	2a070 <__assert_fail@plt+0x175c0>
   2a06c:	add	sl, sl, #1
   2a070:	ldrb	r0, [sl, #-4]
   2a074:	sub	r1, r0, #9
   2a078:	cmp	r1, #5
   2a07c:	bcc	2a06c <__assert_fail@plt+0x175bc>
   2a080:	cmp	r0, #32
   2a084:	beq	2a06c <__assert_fail@plt+0x175bc>
   2a088:	vmov.i32	q8, #0	; 0x00000000
   2a08c:	sub	r4, fp, #240	; 0xf0
   2a090:	mov	r0, #52	; 0x34
   2a094:	str	r2, [sp, #44]	; 0x2c
   2a098:	mov	r2, #0
   2a09c:	sub	r7, sl, #4
   2a0a0:	mov	r1, r4
   2a0a4:	add	r9, r4, #32
   2a0a8:	add	r5, r4, #16
   2a0ac:	str	r2, [fp, #-192]	; 0xffffff40
   2a0b0:	vst1.64	{d16-d17}, [r1], r0
   2a0b4:	mov	r0, #0
   2a0b8:	vst1.64	{d16-d17}, [r9]
   2a0bc:	vst1.64	{d16-d17}, [r5]
   2a0c0:	str	r2, [r1]
   2a0c4:	movw	r1, #53663	; 0xd19f
   2a0c8:	str	r0, [sp, #84]	; 0x54
   2a0cc:	mov	r0, r7
   2a0d0:	mov	r2, #4
   2a0d4:	movt	r1, #4
   2a0d8:	bl	12a50 <strncmp@plt>
   2a0dc:	cmp	r0, #0
   2a0e0:	beq	2a35c <__assert_fail@plt+0x178ac>
   2a0e4:	ldr	sl, [sp, #76]	; 0x4c
   2a0e8:	mov	r0, #0
   2a0ec:	str	r0, [sp, #72]	; 0x48
   2a0f0:	mov	r3, sl
   2a0f4:	sub	r2, fp, #284	; 0x11c
   2a0f8:	mov	r0, r3
   2a0fc:	mov	r1, r6
   2a100:	str	r3, [sp, #80]	; 0x50
   2a104:	bl	45f04 <__assert_fail@plt+0x33454>
   2a108:	cmp	r0, #0
   2a10c:	beq	2a3e4 <__assert_fail@plt+0x17934>
   2a110:	ldrb	r0, [r7]
   2a114:	movw	r1, #35937	; 0x8c61
   2a118:	movw	r2, #1900	; 0x76c
   2a11c:	vld1.64	{d18-d19}, [r9]
   2a120:	vld1.64	{d20-d21}, [r5]
   2a124:	add	lr, sp, #256	; 0x100
   2a128:	movt	r1, #4
   2a12c:	cmp	r0, #0
   2a130:	ldr	r0, [fp, #-264]	; 0xfffffef8
   2a134:	movne	r1, r7
   2a138:	ldr	r7, [sp, #48]	; 0x30
   2a13c:	str	r1, [sp, #136]	; 0x88
   2a140:	asr	r1, r0, #31
   2a144:	adds	r0, r0, r2
   2a148:	ldr	r2, [sp, #68]	; 0x44
   2a14c:	adc	r1, r1, #0
   2a150:	strd	r0, [r2]
   2a154:	ldr	r1, [fp, #-268]	; 0xfffffef4
   2a158:	mov	r0, #0
   2a15c:	str	r0, [sp, #184]	; 0xb8
   2a160:	add	r2, r1, #1
   2a164:	ldr	r1, [sp, #64]	; 0x40
   2a168:	asr	r3, r2, #31
   2a16c:	strd	r2, [r1]
   2a170:	ldr	r2, [fp, #-272]	; 0xfffffef0
   2a174:	ldr	r1, [sp, #60]	; 0x3c
   2a178:	asr	r3, r2, #31
   2a17c:	strd	r2, [r1]
   2a180:	ldr	r2, [fp, #-276]	; 0xfffffeec
   2a184:	ldr	r1, [sp, #56]	; 0x38
   2a188:	asr	r3, r2, #31
   2a18c:	strd	r2, [r1]
   2a190:	ldr	r2, [fp, #-280]	; 0xfffffee8
   2a194:	ldr	r1, [sp, #52]	; 0x34
   2a198:	asr	r3, r2, #31
   2a19c:	strd	r2, [r1]
   2a1a0:	ldr	r2, [sp, #40]	; 0x28
   2a1a4:	mov	r1, #48	; 0x30
   2a1a8:	ldr	r3, [fp, #-252]	; 0xffffff04
   2a1ac:	vld1.64	{d16-d17}, [r4], r1
   2a1b0:	vldr	d22, [r4]
   2a1b4:	ldr	r4, [sp, #44]	; 0x2c
   2a1b8:	str	r2, [sp, #228]	; 0xe4
   2a1bc:	mov	r2, #2
   2a1c0:	str	r3, [fp, #-44]	; 0xffffffd4
   2a1c4:	str	r2, [sp, #164]	; 0xa4
   2a1c8:	ldr	r2, [fp, #-284]	; 0xfffffee4
   2a1cc:	str	r2, [sp, #224]	; 0xe0
   2a1d0:	add	r2, r7, #32
   2a1d4:	vst1.64	{d18-d19}, [r2]
   2a1d8:	add	r2, r7, #16
   2a1dc:	vst1.64	{d20-d21}, [r2]
   2a1e0:	mov	r2, r7
   2a1e4:	vst1.64	{d16-d17}, [r2], r1
   2a1e8:	vmov.i32	q8, #0	; 0x00000000
   2a1ec:	add	r1, r8, #156	; 0x9c
   2a1f0:	vstr	d22, [r2]
   2a1f4:	vst1.32	{d16-d17}, [r1]
   2a1f8:	add	r1, r8, #172	; 0xac
   2a1fc:	vst1.32	{d16-d17}, [r1]
   2a200:	strh	r0, [lr, #32]
   2a204:	str	r0, [sp, #336]	; 0x150
   2a208:	movw	r0, #269	; 0x10d
   2a20c:	str	r3, [sp, #332]	; 0x14c
   2a210:	str	r0, [sp, #328]	; 0x148
   2a214:	ldr	r0, [fp, #-244]	; 0xffffff0c
   2a218:	str	r0, [sp, #324]	; 0x144
   2a21c:	add	r0, r4, #42752	; 0xa700
   2a220:	add	r0, r0, #7733248	; 0x760000
   2a224:	cmp	r0, r4
   2a228:	str	r0, [sp, #132]	; 0x84
   2a22c:	bvs	2a30c <__assert_fail@plt+0x1785c>
   2a230:	ldr	r0, [sp, #80]	; 0x50
   2a234:	add	r1, sp, #132	; 0x84
   2a238:	add	r2, sp, #88	; 0x58
   2a23c:	bl	45f04 <__assert_fail@plt+0x33454>
   2a240:	cmp	r0, #0
   2a244:	beq	2a264 <__assert_fail@plt+0x177b4>
   2a248:	ldr	r0, [sp, #128]	; 0x80
   2a24c:	cmp	r0, #0
   2a250:	beq	2a264 <__assert_fail@plt+0x177b4>
   2a254:	ldr	r1, [sp, #120]	; 0x78
   2a258:	ldr	r2, [sp, #332]	; 0x14c
   2a25c:	cmp	r1, r2
   2a260:	bne	2a2f4 <__assert_fail@plt+0x17844>
   2a264:	add	r0, r4, #19968	; 0x4e00
   2a268:	add	r0, r0, #15532032	; 0xed0000
   2a26c:	cmp	r0, r4
   2a270:	str	r0, [sp, #132]	; 0x84
   2a274:	bvs	2a30c <__assert_fail@plt+0x1785c>
   2a278:	ldr	r0, [sp, #80]	; 0x50
   2a27c:	add	r1, sp, #132	; 0x84
   2a280:	add	r2, sp, #88	; 0x58
   2a284:	bl	45f04 <__assert_fail@plt+0x33454>
   2a288:	cmp	r0, #0
   2a28c:	beq	2a2ac <__assert_fail@plt+0x177fc>
   2a290:	ldr	r0, [sp, #128]	; 0x80
   2a294:	cmp	r0, #0
   2a298:	beq	2a2ac <__assert_fail@plt+0x177fc>
   2a29c:	ldr	r1, [sp, #120]	; 0x78
   2a2a0:	ldr	r2, [sp, #332]	; 0x14c
   2a2a4:	cmp	r1, r2
   2a2a8:	bne	2a2f4 <__assert_fail@plt+0x17844>
   2a2ac:	movw	r0, #62720	; 0xf500
   2a2b0:	movt	r0, #355	; 0x163
   2a2b4:	adds	r0, r4, r0
   2a2b8:	str	r0, [sp, #132]	; 0x84
   2a2bc:	bvs	2a30c <__assert_fail@plt+0x1785c>
   2a2c0:	ldr	r0, [sp, #80]	; 0x50
   2a2c4:	add	r1, sp, #132	; 0x84
   2a2c8:	add	r2, sp, #88	; 0x58
   2a2cc:	bl	45f04 <__assert_fail@plt+0x33454>
   2a2d0:	cmp	r0, #0
   2a2d4:	beq	2a30c <__assert_fail@plt+0x1785c>
   2a2d8:	ldr	r0, [sp, #128]	; 0x80
   2a2dc:	cmp	r0, #0
   2a2e0:	beq	2a30c <__assert_fail@plt+0x1785c>
   2a2e4:	ldr	r1, [sp, #120]	; 0x78
   2a2e8:	ldr	r2, [sp, #332]	; 0x14c
   2a2ec:	cmp	r1, r2
   2a2f0:	beq	2a30c <__assert_fail@plt+0x1785c>
   2a2f4:	mov	r2, #0
   2a2f8:	str	r2, [sp, #348]	; 0x15c
   2a2fc:	str	r1, [sp, #344]	; 0x158
   2a300:	movw	r1, #269	; 0x10d
   2a304:	str	r1, [sp, #340]	; 0x154
   2a308:	str	r0, [sp, #336]	; 0x150
   2a30c:	ldr	r0, [sp, #324]	; 0x144
   2a310:	cmp	r0, #0
   2a314:	beq	2a33c <__assert_fail@plt+0x1788c>
   2a318:	ldr	r1, [sp, #336]	; 0x150
   2a31c:	cmp	r1, #0
   2a320:	beq	2a33c <__assert_fail@plt+0x1788c>
   2a324:	bl	123fc <strcmp@plt>
   2a328:	cmp	r0, #0
   2a32c:	moveq	r0, #0
   2a330:	streq	r0, [sp, #336]	; 0x150
   2a334:	mvneq	r0, #0
   2a338:	streq	r0, [sp, #332]	; 0x14c
   2a33c:	add	r0, sp, #136	; 0x88
   2a340:	bl	266a8 <__assert_fail@plt+0x13bf8>
   2a344:	cmp	r0, #0
   2a348:	beq	2a3c0 <__assert_fail@plt+0x17910>
   2a34c:	mov	r0, #0
   2a350:	b	2a3e0 <__assert_fail@plt+0x17930>
   2a354:	mov	r4, #0
   2a358:	b	2a40c <__assert_fail@plt+0x1795c>
   2a35c:	mov	r0, #1
   2a360:	mov	r1, sl
   2a364:	b	2a380 <__assert_fail@plt+0x178d0>
   2a368:	ldrb	r2, [r1, #1]!
   2a36c:	cmp	r2, #34	; 0x22
   2a370:	cmpne	r2, #92	; 0x5c
   2a374:	bne	2a0e4 <__assert_fail@plt+0x17634>
   2a378:	add	r0, r0, #1
   2a37c:	add	r1, r1, #1
   2a380:	ldrb	r2, [r1]
   2a384:	cmp	r2, #92	; 0x5c
   2a388:	beq	2a368 <__assert_fail@plt+0x178b8>
   2a38c:	cmp	r2, #0
   2a390:	beq	2a0e4 <__assert_fail@plt+0x17634>
   2a394:	cmp	r2, #34	; 0x22
   2a398:	bne	2a378 <__assert_fail@plt+0x178c8>
   2a39c:	cmp	r0, #101	; 0x65
   2a3a0:	bcc	2a4a4 <__assert_fail@plt+0x179f4>
   2a3a4:	bl	327ac <__assert_fail@plt+0x1fcfc>
   2a3a8:	cmp	r0, #0
   2a3ac:	mov	r7, r0
   2a3b0:	bne	2a4ac <__assert_fail@plt+0x179fc>
   2a3b4:	mov	r4, #0
   2a3b8:	mov	r7, #0
   2a3bc:	b	2a528 <__assert_fail@plt+0x17a78>
   2a3c0:	ldrb	r0, [sp, #288]	; 0x120
   2a3c4:	cmp	r0, #0
   2a3c8:	beq	2a418 <__assert_fail@plt+0x17968>
   2a3cc:	ldr	r0, [sp, #32]
   2a3d0:	ldr	r2, [sp, #36]	; 0x24
   2a3d4:	ldrd	r0, [r0]
   2a3d8:	stm	r2, {r0, r1}
   2a3dc:	mov	r0, #1
   2a3e0:	str	r0, [sp, #84]	; 0x54
   2a3e4:	ldr	r0, [sp, #80]	; 0x50
   2a3e8:	cmp	r0, sl
   2a3ec:	beq	2a3f4 <__assert_fail@plt+0x17944>
   2a3f0:	bl	45edc <__assert_fail@plt+0x3342c>
   2a3f4:	ldr	r7, [sp, #72]	; 0x48
   2a3f8:	ldr	r4, [sp, #84]	; 0x54
   2a3fc:	mov	r0, r7
   2a400:	bl	30174 <__assert_fail@plt+0x1d6c4>
   2a404:	mov	r0, sl
   2a408:	bl	45edc <__assert_fail@plt+0x3342c>
   2a40c:	mov	r0, r4
   2a410:	sub	sp, fp, #28
   2a414:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2a418:	ldr	r3, [sp, #312]	; 0x138
   2a41c:	add	ip, sp, #292	; 0x124
   2a420:	ldr	r7, [sp, #304]	; 0x130
   2a424:	ldm	ip, {r1, r2, ip}
   2a428:	add	r6, r3, ip
   2a42c:	ldr	r3, [sp, #308]	; 0x134
   2a430:	orr	r2, r2, r1
   2a434:	orr	r1, r2, r3
   2a438:	orr	r7, r1, r7
   2a43c:	orr	r7, r7, r6
   2a440:	cmp	r7, #1
   2a444:	bgt	2a34c <__assert_fail@plt+0x1789c>
   2a448:	ldr	r0, [sp, #68]	; 0x44
   2a44c:	mvn	lr, #0
   2a450:	ldrd	r4, [r0]
   2a454:	cmp	r5, #0
   2a458:	bmi	2a530 <__assert_fail@plt+0x17a80>
   2a45c:	add	r7, r0, #8
   2a460:	mov	r0, #0
   2a464:	ldr	r7, [r7]
   2a468:	cmp	r7, #2
   2a46c:	bne	2a558 <__assert_fail@plt+0x17aa8>
   2a470:	subs	r6, r4, #69	; 0x45
   2a474:	mov	r7, #0
   2a478:	str	r0, [sp, #84]	; 0x54
   2a47c:	sbcs	r6, r5, #0
   2a480:	movw	r6, #1900	; 0x76c
   2a484:	movwlt	r7, #1
   2a488:	cmp	r7, #0
   2a48c:	movwne	r6, #2000	; 0x7d0
   2a490:	adds	r4, r6, r4
   2a494:	adc	r5, r5, #0
   2a498:	cmn	r5, #1
   2a49c:	bgt	2a55c <__assert_fail@plt+0x17aac>
   2a4a0:	b	2a538 <__assert_fail@plt+0x17a88>
   2a4a4:	mov	r7, #0
   2a4a8:	sub	r0, fp, #176	; 0xb0
   2a4ac:	ldrb	r2, [sl]
   2a4b0:	mov	r1, r0
   2a4b4:	cmp	r2, #34	; 0x22
   2a4b8:	beq	2a4dc <__assert_fail@plt+0x17a2c>
   2a4bc:	uxtb	r2, r2
   2a4c0:	cmp	r2, #92	; 0x5c
   2a4c4:	addeq	sl, sl, #1
   2a4c8:	ldrb	r2, [sl]
   2a4cc:	strb	r2, [r1], #1
   2a4d0:	ldrb	r2, [sl, #1]!
   2a4d4:	cmp	r2, #34	; 0x22
   2a4d8:	bne	2a4bc <__assert_fail@plt+0x17a0c>
   2a4dc:	mov	r2, #0
   2a4e0:	strb	r2, [r1]
   2a4e4:	bl	45e50 <__assert_fail@plt+0x333a0>
   2a4e8:	cmp	r0, #0
   2a4ec:	beq	2a524 <__assert_fail@plt+0x17a74>
   2a4f0:	str	r7, [sp, #72]	; 0x48
   2a4f4:	add	r7, sl, #1
   2a4f8:	ldr	sl, [sp, #76]	; 0x4c
   2a4fc:	mov	r3, r0
   2a500:	b	2a508 <__assert_fail@plt+0x17a58>
   2a504:	add	r7, r7, #1
   2a508:	ldrb	r0, [r7]
   2a50c:	sub	r1, r0, #9
   2a510:	cmp	r1, #5
   2a514:	bcc	2a504 <__assert_fail@plt+0x17a54>
   2a518:	cmp	r0, #32
   2a51c:	beq	2a504 <__assert_fail@plt+0x17a54>
   2a520:	b	2a0f4 <__assert_fail@plt+0x17644>
   2a524:	mov	r4, #0
   2a528:	ldr	sl, [sp, #76]	; 0x4c
   2a52c:	b	2a3fc <__assert_fail@plt+0x1794c>
   2a530:	mov	r0, #0
   2a534:	str	r0, [sp, #84]	; 0x54
   2a538:	movw	r7, #63636	; 0xf894
   2a53c:	movt	r7, #65535	; 0xffff
   2a540:	subs	r9, r7, r4
   2a544:	sbc	r7, lr, r5
   2a548:	str	r9, [fp, #-56]	; 0xffffffc8
   2a54c:	teq	r7, r9, asr #31
   2a550:	bne	2a3e4 <__assert_fail@plt+0x17934>
   2a554:	b	2a574 <__assert_fail@plt+0x17ac4>
   2a558:	str	r0, [sp, #84]	; 0x54
   2a55c:	movw	r7, #1900	; 0x76c
   2a560:	subs	r9, r4, r7
   2a564:	str	r9, [fp, #-56]	; 0xffffffc8
   2a568:	sbc	r7, r5, #0
   2a56c:	teq	r7, r9, asr #31
   2a570:	bne	2a3e4 <__assert_fail@plt+0x17934>
   2a574:	ldr	r0, [sp, #64]	; 0x40
   2a578:	mov	r7, #0
   2a57c:	ldrd	r4, [r0]
   2a580:	mov	r0, #0
   2a584:	cmn	r5, #1
   2a588:	movwgt	r7, #1
   2a58c:	subs	sl, r4, #1
   2a590:	mov	r4, #0
   2a594:	sbc	r6, r5, #0
   2a598:	str	sl, [fp, #-60]	; 0xffffffc4
   2a59c:	cmn	r6, #1
   2a5a0:	movwgt	r4, #1
   2a5a4:	subs	r7, r7, r4
   2a5a8:	movwne	r7, #1
   2a5ac:	cmp	r5, #0
   2a5b0:	mov	r5, #0
   2a5b4:	movwmi	r5, #1
   2a5b8:	tst	r5, r7
   2a5bc:	bne	2a658 <__assert_fail@plt+0x17ba8>
   2a5c0:	asr	r7, sl, #31
   2a5c4:	eor	r5, sl, sl
   2a5c8:	str	r0, [sp, #84]	; 0x54
   2a5cc:	eor	r7, r6, r7
   2a5d0:	orrs	r7, r5, r7
   2a5d4:	bne	2a9e8 <__assert_fail@plt+0x17f38>
   2a5d8:	ldr	r0, [sp, #60]	; 0x3c
   2a5dc:	ldr	r8, [r0]
   2a5e0:	ldr	r5, [r0, #4]
   2a5e4:	teq	r5, r8, asr #31
   2a5e8:	str	r8, [fp, #-64]	; 0xffffffc0
   2a5ec:	bne	2a9e8 <__assert_fail@plt+0x17f38>
   2a5f0:	cmp	r3, #0
   2a5f4:	bne	2a60c <__assert_fail@plt+0x17b5c>
   2a5f8:	cmp	r2, #0
   2a5fc:	bne	2a6b8 <__assert_fail@plt+0x17c08>
   2a600:	ldrb	r2, [sp, #289]	; 0x121
   2a604:	cmp	r2, #0
   2a608:	beq	2a6b8 <__assert_fail@plt+0x17c08>
   2a60c:	ldr	r0, [sp, #56]	; 0x38
   2a610:	ldr	r2, [sp, #164]	; 0xa4
   2a614:	ldr	r6, [r0]
   2a618:	ldr	r3, [r0, #4]
   2a61c:	cmp	r2, #0
   2a620:	beq	2a660 <__assert_fail@plt+0x17bb0>
   2a624:	cmp	r2, #1
   2a628:	bne	2a684 <__assert_fail@plt+0x17bd4>
   2a62c:	eor	r2, r6, #12
   2a630:	orrs	r2, r2, r3
   2a634:	mvn	r2, #0
   2a638:	movweq	r2, #12
   2a63c:	subs	r7, r6, #1
   2a640:	sbc	r3, r3, #0
   2a644:	subs	r7, r7, #11
   2a648:	sbcs	r3, r3, #0
   2a64c:	addcc	r2, r6, #12
   2a650:	mov	r6, r2
   2a654:	b	2a690 <__assert_fail@plt+0x17be0>
   2a658:	ldr	sl, [sp, #76]	; 0x4c
   2a65c:	b	2a3e0 <__assert_fail@plt+0x17930>
   2a660:	eor	r2, r6, #12
   2a664:	orrs	r2, r2, r3
   2a668:	mvnne	r2, #0
   2a66c:	subs	r7, r6, #1
   2a670:	sbc	r3, r3, #0
   2a674:	subs	r7, r7, #11
   2a678:	sbcs	r3, r3, #0
   2a67c:	movcs	r6, r2
   2a680:	b	2a690 <__assert_fail@plt+0x17be0>
   2a684:	subs	r2, r6, #24
   2a688:	sbcs	r2, r3, #0
   2a68c:	mvncs	r6, #0
   2a690:	ldr	r0, [sp, #80]	; 0x50
   2a694:	cmp	r6, #0
   2a698:	str	r6, [fp, #-68]	; 0xffffffbc
   2a69c:	bmi	2a9e8 <__assert_fail@plt+0x17f38>
   2a6a0:	ldr	r2, [sp, #52]	; 0x34
   2a6a4:	ldr	r7, [sp, #224]	; 0xe0
   2a6a8:	ldr	r4, [r2]
   2a6ac:	str	r7, [fp, #-76]	; 0xffffffb4
   2a6b0:	str	r4, [fp, #-72]	; 0xffffffb8
   2a6b4:	b	2a6d8 <__assert_fail@plt+0x17c28>
   2a6b8:	ldr	r0, [sp, #80]	; 0x50
   2a6bc:	mov	r6, #0
   2a6c0:	mov	r4, #0
   2a6c4:	mov	r7, #0
   2a6c8:	str	r6, [fp, #-68]	; 0xffffffbc
   2a6cc:	str	r6, [fp, #-72]	; 0xffffffb8
   2a6d0:	str	r6, [fp, #-76]	; 0xffffffb4
   2a6d4:	str	r6, [sp, #228]	; 0xe4
   2a6d8:	cmp	r1, #0
   2a6dc:	mvnne	r1, #0
   2a6e0:	strne	r1, [fp, #-44]	; 0xffffffd4
   2a6e4:	cmp	ip, #0
   2a6e8:	beq	2a6fc <__assert_fail@plt+0x17c4c>
   2a6ec:	ldr	r1, [sp, #156]	; 0x9c
   2a6f0:	str	r1, [sp, #64]	; 0x40
   2a6f4:	str	r1, [fp, #-44]	; 0xffffffd4
   2a6f8:	b	2a704 <__assert_fail@plt+0x17c54>
   2a6fc:	ldr	r1, [fp, #-44]	; 0xffffffd4
   2a700:	str	r1, [sp, #64]	; 0x40
   2a704:	mvn	r1, #0
   2a708:	str	r1, [fp, #-52]	; 0xffffffcc
   2a70c:	sub	r1, fp, #76	; 0x4c
   2a710:	bl	462d8 <__assert_fail@plt+0x33828>
   2a714:	mov	r5, r0
   2a718:	ldr	r0, [fp, #-52]	; 0xffffffcc
   2a71c:	str	r4, [sp, #68]	; 0x44
   2a720:	cmp	r0, #0
   2a724:	bmi	2a768 <__assert_fail@plt+0x17cb8>
   2a728:	sub	r3, fp, #76	; 0x4c
   2a72c:	ldm	r3, {r0, r1, r2, r3}
   2a730:	eor	r1, r1, r4
   2a734:	eor	r0, r0, r7
   2a738:	orr	r0, r1, r0
   2a73c:	eor	r1, r2, r6
   2a740:	orr	r0, r0, r1
   2a744:	eor	r1, r3, r8
   2a748:	orr	r0, r0, r1
   2a74c:	ldr	r1, [fp, #-60]	; 0xffffffc4
   2a750:	eor	r1, r1, sl
   2a754:	orr	r0, r0, r1
   2a758:	ldr	r1, [fp, #-56]	; 0xffffffc8
   2a75c:	eor	r1, r1, r9
   2a760:	orrs	r0, r0, r1
   2a764:	beq	2a994 <__assert_fail@plt+0x17ee4>
   2a768:	ldr	r0, [sp, #312]	; 0x138
   2a76c:	cmp	r0, #0
   2a770:	beq	2a9e8 <__assert_fail@plt+0x17f38>
   2a774:	mov	r0, #88	; 0x58
   2a778:	ldr	r4, [sp, #160]	; 0xa0
   2a77c:	str	r6, [sp, #60]	; 0x3c
   2a780:	mov	r2, #43	; 0x2b
   2a784:	strb	r0, [sp, #90]	; 0x5a
   2a788:	movw	r0, #22616	; 0x5858
   2a78c:	strh	r0, [sp, #88]	; 0x58
   2a790:	movw	r0, #46021	; 0xb3c5
   2a794:	movt	r0, #37282	; 0x91a2
   2a798:	smmla	r0, r4, r0, r4
   2a79c:	asr	r1, r0, #11
   2a7a0:	add	r5, r1, r0, lsr #31
   2a7a4:	movw	r1, #53076	; 0xcf54
   2a7a8:	add	r0, sp, #88	; 0x58
   2a7ac:	add	r6, r0, #3
   2a7b0:	movt	r1, #4
   2a7b4:	cmp	r5, #0
   2a7b8:	mov	r3, r5
   2a7bc:	mov	r0, r6
   2a7c0:	rsbmi	r3, r5, #0
   2a7c4:	cmp	r4, #0
   2a7c8:	movwmi	r2, #45	; 0x2d
   2a7cc:	bl	1296c <sprintf@plt>
   2a7d0:	mov	r1, #3600	; 0xe10
   2a7d4:	mls	r1, r5, r1, r4
   2a7d8:	ldr	r4, [sp, #68]	; 0x44
   2a7dc:	cmp	r1, #0
   2a7e0:	beq	2a8a4 <__assert_fail@plt+0x17df4>
   2a7e4:	add	r0, r6, r0
   2a7e8:	mov	r2, #58	; 0x3a
   2a7ec:	rsbmi	r1, r1, #0
   2a7f0:	mov	ip, r7
   2a7f4:	strb	r2, [r0]
   2a7f8:	movw	r2, #33205	; 0x81b5
   2a7fc:	uxth	r3, r1
   2a800:	movt	r2, #6990	; 0x1b4e
   2a804:	umull	r2, r7, r3, r2
   2a808:	mov	r2, #48	; 0x30
   2a80c:	add	r7, r2, r7, lsr #6
   2a810:	strb	r7, [r0, #1]
   2a814:	movw	r7, #34953	; 0x8889
   2a818:	movt	r7, #34952	; 0x8888
   2a81c:	umull	r3, r7, r3, r7
   2a820:	movw	r3, #52429	; 0xcccd
   2a824:	movt	r3, #52428	; 0xcccc
   2a828:	ubfx	r6, r7, #5, #8
   2a82c:	umull	r5, r4, r6, r3
   2a830:	lsr	r5, r4, #3
   2a834:	add	r5, r5, r5, lsl #2
   2a838:	sub	r6, r6, r5, lsl #1
   2a83c:	orr	r6, r6, #48	; 0x30
   2a840:	strb	r6, [r0, #2]
   2a844:	lsr	r6, r7, #5
   2a848:	add	r0, r0, #3
   2a84c:	lsl	r6, r6, #4
   2a850:	sub	r7, r6, r7, lsr #5
   2a854:	sub	r1, r1, r7, lsl #2
   2a858:	movw	r7, #65535	; 0xffff
   2a85c:	tst	r1, r7
   2a860:	beq	2a894 <__assert_fail@plt+0x17de4>
   2a864:	mov	r7, #58	; 0x3a
   2a868:	strb	r7, [r0]
   2a86c:	uxtb	r7, r1
   2a870:	umull	r3, r7, r7, r3
   2a874:	orr	r2, r2, r7, lsr #3
   2a878:	strb	r2, [r0, #1]
   2a87c:	lsr	r2, r7, #3
   2a880:	add	r2, r2, r2, lsl #2
   2a884:	sub	r1, r1, r2, lsl #1
   2a888:	orr	r1, r1, #48	; 0x30
   2a88c:	strb	r1, [r0, #2]
   2a890:	add	r0, r0, #3
   2a894:	ldr	r4, [sp, #68]	; 0x44
   2a898:	mov	r7, ip
   2a89c:	mov	r1, #0
   2a8a0:	strb	r1, [r0]
   2a8a4:	add	r0, sp, #88	; 0x58
   2a8a8:	bl	45e50 <__assert_fail@plt+0x333a0>
   2a8ac:	cmp	r0, #0
   2a8b0:	beq	2a9e8 <__assert_fail@plt+0x17f38>
   2a8b4:	mov	r6, r0
   2a8b8:	ldr	r0, [sp, #64]	; 0x40
   2a8bc:	ldr	r5, [sp, #60]	; 0x3c
   2a8c0:	sub	r1, fp, #76	; 0x4c
   2a8c4:	str	r0, [fp, #-44]	; 0xffffffd4
   2a8c8:	mvn	r0, #0
   2a8cc:	str	r9, [fp, #-56]	; 0xffffffc8
   2a8d0:	str	sl, [fp, #-60]	; 0xffffffc4
   2a8d4:	str	r8, [fp, #-64]	; 0xffffffc0
   2a8d8:	str	r5, [fp, #-68]	; 0xffffffbc
   2a8dc:	str	r4, [fp, #-72]	; 0xffffffb8
   2a8e0:	str	r7, [fp, #-76]	; 0xffffffb4
   2a8e4:	str	r0, [fp, #-52]	; 0xffffffcc
   2a8e8:	mov	r0, r6
   2a8ec:	bl	462d8 <__assert_fail@plt+0x33828>
   2a8f0:	ldr	r1, [fp, #-52]	; 0xffffffcc
   2a8f4:	cmn	r1, #1
   2a8f8:	ble	2a9e0 <__assert_fail@plt+0x17f30>
   2a8fc:	str	r0, [sp, #4]
   2a900:	ldr	r0, [fp, #-56]	; 0xffffffc8
   2a904:	ldr	r4, [fp, #-76]	; 0xffffffb4
   2a908:	str	r0, [sp, #56]	; 0x38
   2a90c:	ldr	r0, [fp, #-60]	; 0xffffffc4
   2a910:	str	r0, [sp, #52]	; 0x34
   2a914:	ldr	r0, [fp, #-72]	; 0xffffffb8
   2a918:	str	r0, [sp, #32]
   2a91c:	ldr	r0, [fp, #-68]	; 0xffffffbc
   2a920:	str	r0, [sp, #40]	; 0x28
   2a924:	ldr	r0, [fp, #-64]	; 0xffffffc0
   2a928:	str	r0, [sp, #44]	; 0x2c
   2a92c:	mov	r0, r6
   2a930:	bl	45edc <__assert_fail@plt+0x3342c>
   2a934:	ldr	r1, [sp, #68]	; 0x44
   2a938:	ldr	r2, [sp, #32]
   2a93c:	eor	r0, r4, r7
   2a940:	eor	r1, r2, r1
   2a944:	orr	r0, r1, r0
   2a948:	ldr	r1, [sp, #40]	; 0x28
   2a94c:	eor	r1, r1, r5
   2a950:	orr	r0, r0, r1
   2a954:	ldr	r1, [sp, #44]	; 0x2c
   2a958:	eor	r1, r1, r8
   2a95c:	orr	r0, r0, r1
   2a960:	ldr	r1, [sp, #52]	; 0x34
   2a964:	eor	r1, r1, sl
   2a968:	orr	r0, r0, r1
   2a96c:	ldr	r1, [sp, #56]	; 0x38
   2a970:	eor	r1, r1, r9
   2a974:	orrs	r0, r0, r1
   2a978:	bne	2a9e8 <__assert_fail@plt+0x17f38>
   2a97c:	mov	r6, r5
   2a980:	ldr	sl, [sp, #76]	; 0x4c
   2a984:	ldr	r5, [sp, #4]
   2a988:	mvn	r2, #0
   2a98c:	mov	r3, r7
   2a990:	b	2a99c <__assert_fail@plt+0x17eec>
   2a994:	ldr	sl, [sp, #76]	; 0x4c
   2a998:	mvn	r2, #0
   2a99c:	ldr	r0, [sp, #296]	; 0x128
   2a9a0:	mov	r8, r7
   2a9a4:	cmp	r0, #0
   2a9a8:	beq	2ac30 <__assert_fail@plt+0x18180>
   2a9ac:	ldr	r0, [sp, #292]	; 0x124
   2a9b0:	cmp	r0, #0
   2a9b4:	bne	2ac30 <__assert_fail@plt+0x18180>
   2a9b8:	ldr	r0, [sp, #20]
   2a9bc:	ldrd	r4, [r0]
   2a9c0:	subs	r0, r4, #1
   2a9c4:	sbcs	r0, r5, #0
   2a9c8:	blt	2a9f0 <__assert_fail@plt+0x17f40>
   2a9cc:	ldr	r0, [sp, #152]	; 0x98
   2a9d0:	ldr	r1, [fp, #-52]	; 0xffffffcc
   2a9d4:	subs	r0, r1, r0
   2a9d8:	movwne	r0, #1
   2a9dc:	b	2a9f4 <__assert_fail@plt+0x17f44>
   2a9e0:	mov	r0, r6
   2a9e4:	bl	45edc <__assert_fail@plt+0x3342c>
   2a9e8:	ldr	sl, [sp, #76]	; 0x4c
   2a9ec:	b	2a3e4 <__assert_fail@plt+0x17934>
   2a9f0:	mov	r0, #0
   2a9f4:	subs	r0, r4, r0
   2a9f8:	sbcs	r0, r5, #0
   2a9fc:	bge	2aa20 <__assert_fail@plt+0x17f70>
   2aa00:	subs	r0, r4, #1
   2aa04:	sbcs	r0, r5, #0
   2aa08:	blt	2aa44 <__assert_fail@plt+0x17f94>
   2aa0c:	ldr	r0, [sp, #152]	; 0x98
   2aa10:	ldr	r1, [fp, #-52]	; 0xffffffcc
   2aa14:	subs	r0, r1, r0
   2aa18:	movwne	r0, #1
   2aa1c:	b	2aa48 <__assert_fail@plt+0x17f98>
   2aa20:	subs	r0, r4, #1
   2aa24:	mov	r2, #0
   2aa28:	sbcs	r0, r5, #0
   2aa2c:	blt	2aa88 <__assert_fail@plt+0x17fd8>
   2aa30:	ldr	r0, [sp, #152]	; 0x98
   2aa34:	ldr	r1, [fp, #-52]	; 0xffffffcc
   2aa38:	subs	r0, r1, r0
   2aa3c:	movwne	r0, #1
   2aa40:	b	2aa8c <__assert_fail@plt+0x17fdc>
   2aa44:	mov	r0, #0
   2aa48:	subs	r0, r4, r0
   2aa4c:	sbc	r1, r5, #0
   2aa50:	eor	r0, r0, r2
   2aa54:	eor	r1, r1, r2
   2aa58:	orrs	r0, r0, r1
   2aa5c:	beq	2aae4 <__assert_fail@plt+0x18034>
   2aa60:	mov	r0, #0
   2aa64:	str	r0, [sp, #84]	; 0x54
   2aa68:	subs	r0, r4, #1
   2aa6c:	sbcs	r0, r5, #0
   2aa70:	blt	2aab8 <__assert_fail@plt+0x18008>
   2aa74:	ldr	r0, [sp, #152]	; 0x98
   2aa78:	ldr	r1, [fp, #-52]	; 0xffffffcc
   2aa7c:	subs	r0, r1, r0
   2aa80:	movwne	r0, #1
   2aa84:	b	2aabc <__assert_fail@plt+0x1800c>
   2aa88:	mov	r0, #0
   2aa8c:	movw	r3, #37449	; 0x9249
   2aa90:	subs	r0, r4, r0
   2aa94:	str	r2, [sp, #84]	; 0x54
   2aa98:	sbc	r1, r5, r2
   2aa9c:	movw	r2, #9362	; 0x2492
   2aaa0:	movt	r3, #18724	; 0x4924
   2aaa4:	movt	r2, #4681	; 0x1249
   2aaa8:	subs	r0, r3, r0
   2aaac:	sbcs	r0, r2, r1
   2aab0:	blt	2a3e4 <__assert_fail@plt+0x17934>
   2aab4:	b	2aae4 <__assert_fail@plt+0x18034>
   2aab8:	mov	r0, #0
   2aabc:	subs	r2, r4, r0
   2aac0:	ldr	r0, [sp, #84]	; 0x54
   2aac4:	mov	r1, #-2147483648	; 0x80000000
   2aac8:	sbc	r3, r5, r0
   2aacc:	mov	r0, #0
   2aad0:	bl	47544 <__assert_fail@plt+0x34a94>
   2aad4:	ldr	sl, [sp, #76]	; 0x4c
   2aad8:	subs	r0, r0, #7
   2aadc:	sbcs	r0, r1, #0
   2aae0:	blt	2a3e4 <__assert_fail@plt+0x17934>
   2aae4:	rsbs	r0, r4, #0
   2aae8:	rscs	r0, r5, #0
   2aaec:	bge	2ab04 <__assert_fail@plt+0x18054>
   2aaf0:	ldr	r1, [sp, #152]	; 0x98
   2aaf4:	ldr	r0, [fp, #-52]	; 0xffffffcc
   2aaf8:	subs	r2, r0, r1
   2aafc:	movwne	r2, #1
   2ab00:	b	2ab10 <__assert_fail@plt+0x18060>
   2ab04:	ldr	r0, [fp, #-52]	; 0xffffffcc
   2ab08:	ldr	r1, [sp, #152]	; 0x98
   2ab0c:	mov	r2, #0
   2ab10:	sub	r0, r1, r0
   2ab14:	movw	r1, #9363	; 0x2493
   2ab18:	mov	r7, #7
   2ab1c:	subs	r2, r4, r2
   2ab20:	mov	r3, #0
   2ab24:	movt	r1, #37449	; 0x9249
   2ab28:	add	r0, r0, #7
   2ab2c:	umull	r2, r7, r2, r7
   2ab30:	sbc	r3, r5, r3
   2ab34:	rsb	r3, r3, r3, lsl #3
   2ab38:	smmla	r1, r0, r1, r0
   2ab3c:	add	r3, r7, r3
   2ab40:	asr	r7, r1, #2
   2ab44:	add	r1, r7, r1, lsr #31
   2ab48:	sub	r1, r1, r1, lsl #3
   2ab4c:	add	r0, r0, r1
   2ab50:	adds	r1, r0, r2
   2ab54:	asr	r7, r0, #31
   2ab58:	mov	r2, #0
   2ab5c:	adc	r0, r7, r3
   2ab60:	str	r2, [sp, #84]	; 0x54
   2ab64:	mov	r2, #0
   2ab68:	cmn	r0, #1
   2ab6c:	movwgt	r2, #1
   2ab70:	cmn	r7, #1
   2ab74:	mov	r7, #0
   2ab78:	movwgt	r7, #1
   2ab7c:	subs	r2, r7, r2
   2ab80:	movwne	r2, #1
   2ab84:	cmn	r3, #1
   2ab88:	mov	r3, #0
   2ab8c:	movwgt	r3, #1
   2ab90:	sub	r3, r7, r3
   2ab94:	clz	r3, r3
   2ab98:	lsr	r3, r3, #5
   2ab9c:	ands	r2, r3, r2
   2aba0:	bne	2a3e4 <__assert_fail@plt+0x17934>
   2aba4:	ldr	r3, [fp, #-64]	; 0xffffffc0
   2aba8:	mov	r2, #0
   2abac:	cmn	r0, #1
   2abb0:	mov	r7, #0
   2abb4:	str	r2, [sp, #84]	; 0x54
   2abb8:	mov	r2, #0
   2abbc:	movwgt	r2, #1
   2abc0:	adds	r1, r1, r3
   2abc4:	adc	r0, r0, r3, asr #31
   2abc8:	asr	r3, r3, #31
   2abcc:	str	r1, [fp, #-64]	; 0xffffffc0
   2abd0:	cmn	r0, #1
   2abd4:	movwgt	r7, #1
   2abd8:	subs	r7, r2, r7
   2abdc:	movwne	r7, #1
   2abe0:	cmn	r3, #1
   2abe4:	mov	r3, #0
   2abe8:	movwgt	r3, #1
   2abec:	sub	r2, r2, r3
   2abf0:	clz	r2, r2
   2abf4:	lsr	r2, r2, #5
   2abf8:	tst	r2, r7
   2abfc:	asreq	r2, r1, #31
   2ac00:	eoreq	r1, r1, r1
   2ac04:	eoreq	r0, r0, r2
   2ac08:	orrseq	r0, r1, r0
   2ac0c:	bne	2a3e4 <__assert_fail@plt+0x17934>
   2ac10:	mvn	r0, #0
   2ac14:	sub	r1, fp, #76	; 0x4c
   2ac18:	str	r0, [fp, #-44]	; 0xffffffd4
   2ac1c:	ldr	r0, [sp, #80]	; 0x50
   2ac20:	bl	462d8 <__assert_fail@plt+0x33828>
   2ac24:	mov	r5, r0
   2ac28:	cmn	r0, #1
   2ac2c:	beq	2a3e4 <__assert_fail@plt+0x17934>
   2ac30:	ldr	r1, [sp, #24]
   2ac34:	ldr	r0, [sp, #48]	; 0x30
   2ac38:	mov	ip, r6
   2ac3c:	ldr	r4, [r1]
   2ac40:	ldr	r2, [r1, #4]
   2ac44:	ldr	r1, [sp, #28]
   2ac48:	ldm	r0, {r0, r3}
   2ac4c:	ldr	lr, [r1]
   2ac50:	ldr	r9, [r1, #4]
   2ac54:	orr	r7, r2, r3
   2ac58:	orr	r6, r4, r0
   2ac5c:	orr	r7, r7, r9
   2ac60:	orr	r6, r6, lr
   2ac64:	orrs	r7, r6, r7
   2ac68:	beq	2ade8 <__assert_fail@plt+0x18338>
   2ac6c:	ldr	r7, [fp, #-56]	; 0xffffffc8
   2ac70:	mov	r1, #0
   2ac74:	mov	r5, #0
   2ac78:	str	r1, [sp, #84]	; 0x54
   2ac7c:	mov	r1, #0
   2ac80:	asr	r6, r7, #31
   2ac84:	cmn	r6, #1
   2ac88:	movwgt	r1, #1
   2ac8c:	adds	r0, r7, r0
   2ac90:	adc	r7, r6, r3
   2ac94:	mov	r6, #0
   2ac98:	cmn	r7, #1
   2ac9c:	movwgt	r6, #1
   2aca0:	subs	r6, r1, r6
   2aca4:	movwne	r6, #1
   2aca8:	cmn	r3, #1
   2acac:	movwgt	r5, #1
   2acb0:	sub	r1, r1, r5
   2acb4:	clz	r1, r1
   2acb8:	lsr	r1, r1, #5
   2acbc:	tst	r1, r6
   2acc0:	asreq	r1, r0, #31
   2acc4:	eoreq	r6, r0, r0
   2acc8:	eoreq	r1, r7, r1
   2accc:	orrseq	r1, r6, r1
   2acd0:	bne	2a3e4 <__assert_fail@plt+0x17934>
   2acd4:	ldr	r1, [fp, #-60]	; 0xffffffc4
   2acd8:	mov	r7, #0
   2acdc:	mov	r5, #0
   2ace0:	mov	r3, #0
   2ace4:	str	r7, [sp, #84]	; 0x54
   2ace8:	asr	r6, r1, #31
   2acec:	cmn	r6, #1
   2acf0:	movwgt	r5, #1
   2acf4:	adds	r7, r1, r4
   2acf8:	mov	r1, #0
   2acfc:	adc	r6, r6, r2
   2ad00:	cmn	r6, #1
   2ad04:	movwgt	r1, #1
   2ad08:	subs	r1, r5, r1
   2ad0c:	movwne	r1, #1
   2ad10:	cmn	r2, #1
   2ad14:	movwgt	r3, #1
   2ad18:	sub	r3, r5, r3
   2ad1c:	clz	r3, r3
   2ad20:	lsr	r3, r3, #5
   2ad24:	tst	r3, r1
   2ad28:	asreq	r1, r7, #31
   2ad2c:	eoreq	r3, r7, r7
   2ad30:	eoreq	r1, r6, r1
   2ad34:	orrseq	r1, r3, r1
   2ad38:	bne	2a3e4 <__assert_fail@plt+0x17934>
   2ad3c:	ldr	r1, [fp, #-64]	; 0xffffffc0
   2ad40:	mov	r6, #0
   2ad44:	mov	r5, #0
   2ad48:	str	r6, [sp, #84]	; 0x54
   2ad4c:	mov	r6, #0
   2ad50:	asr	r3, r1, #31
   2ad54:	cmn	r3, #1
   2ad58:	movwgt	r6, #1
   2ad5c:	adds	r2, r1, lr
   2ad60:	mov	r1, #0
   2ad64:	adc	r3, r3, r9
   2ad68:	cmn	r3, #1
   2ad6c:	movwgt	r1, #1
   2ad70:	subs	r1, r6, r1
   2ad74:	movwne	r1, #1
   2ad78:	cmn	r9, #1
   2ad7c:	movwgt	r5, #1
   2ad80:	sub	r6, r6, r5
   2ad84:	clz	r6, r6
   2ad88:	lsr	r6, r6, #5
   2ad8c:	tst	r6, r1
   2ad90:	bne	2a9e8 <__assert_fail@plt+0x17f38>
   2ad94:	asr	r1, r2, #31
   2ad98:	eor	r6, r2, r2
   2ad9c:	eor	r1, r3, r1
   2ada0:	orrs	r1, r6, r1
   2ada4:	bne	2a9e8 <__assert_fail@plt+0x17f38>
   2ada8:	str	r7, [fp, #-60]	; 0xffffffc4
   2adac:	str	r0, [fp, #-56]	; 0xffffffc8
   2adb0:	ldr	r0, [sp, #68]	; 0x44
   2adb4:	str	r2, [fp, #-64]	; 0xffffffc0
   2adb8:	str	ip, [fp, #-68]	; 0xffffffbc
   2adbc:	sub	r1, fp, #76	; 0x4c
   2adc0:	str	r0, [fp, #-72]	; 0xffffffb8
   2adc4:	ldr	r0, [sp, #64]	; 0x40
   2adc8:	str	r0, [fp, #-44]	; 0xffffffd4
   2adcc:	ldr	r0, [sp, #80]	; 0x50
   2add0:	str	r8, [fp, #-76]	; 0xffffffb4
   2add4:	bl	462d8 <__assert_fail@plt+0x33828>
   2add8:	ldr	sl, [sp, #76]	; 0x4c
   2addc:	mov	r5, r0
   2ade0:	cmn	r0, #1
   2ade4:	beq	2a3e4 <__assert_fail@plt+0x17934>
   2ade8:	ldr	r0, [sp, #312]	; 0x138
   2adec:	cmp	r0, #0
   2adf0:	beq	2ae24 <__assert_fail@plt+0x18374>
   2adf4:	ldr	r0, [fp, #-40]	; 0xffffffd8
   2adf8:	ldr	r2, [sp, #160]	; 0xa0
   2adfc:	asr	r1, r0, #31
   2ae00:	subs	r0, r0, r2
   2ae04:	sbc	r1, r1, r2, asr #31
   2ae08:	adds	r4, r0, r5
   2ae0c:	adc	r0, r1, r5, asr #31
   2ae10:	teq	r0, r4, asr #31
   2ae14:	mov	r0, #0
   2ae18:	str	r0, [sp, #84]	; 0x54
   2ae1c:	bne	2a3e4 <__assert_fail@plt+0x17934>
   2ae20:	b	2ae28 <__assert_fail@plt+0x18378>
   2ae24:	mov	r4, r5
   2ae28:	ldr	r1, [sp, #280]	; 0x118
   2ae2c:	ldr	r0, [sp, #228]	; 0xe4
   2ae30:	movw	r5, #51712	; 0xca00
   2ae34:	mov	r3, #0
   2ae38:	movt	r5, #15258	; 0x3b9a
   2ae3c:	asr	r2, r1, #31
   2ae40:	adds	r7, r1, r0
   2ae44:	adc	r6, r2, r0, asr #31
   2ae48:	mov	r0, #0
   2ae4c:	mov	r2, r5
   2ae50:	str	r0, [sp, #84]	; 0x54
   2ae54:	mov	r0, r7
   2ae58:	mov	r1, r6
   2ae5c:	bl	47544 <__assert_fail@plt+0x34a94>
   2ae60:	adds	r0, r2, r5
   2ae64:	mov	r2, r5
   2ae68:	adc	r1, r3, #0
   2ae6c:	mov	r3, #0
   2ae70:	bl	47544 <__assert_fail@plt+0x34a94>
   2ae74:	subs	r0, r7, r2
   2ae78:	str	r2, [sp, #64]	; 0x40
   2ae7c:	mov	r3, #0
   2ae80:	sbc	r1, r6, r2, asr #31
   2ae84:	mov	r2, r5
   2ae88:	bl	47544 <__assert_fail@plt+0x34a94>
   2ae8c:	str	r0, [sp, #68]	; 0x44
   2ae90:	ldr	r0, [sp, #16]
   2ae94:	mov	r7, r1
   2ae98:	ldr	r5, [r0, #4]
   2ae9c:	ldr	r6, [r0]
   2aea0:	cmn	r5, #1
   2aea4:	ble	2aec8 <__assert_fail@plt+0x18418>
   2aea8:	movw	r1, #24175	; 0x5e6f
   2aeac:	movw	r0, #6699	; 0x1a2b
   2aeb0:	movt	r1, #15437	; 0x3c4d
   2aeb4:	movt	r0, #9
   2aeb8:	subs	r1, r1, r6
   2aebc:	sbcs	r0, r0, r5
   2aec0:	blt	2a3e4 <__assert_fail@plt+0x17934>
   2aec4:	b	2af04 <__assert_fail@plt+0x18454>
   2aec8:	mvn	r1, #0
   2aecc:	eor	r0, r6, r1
   2aed0:	eor	r1, r5, r1
   2aed4:	orrs	r0, r0, r1
   2aed8:	beq	2af04 <__assert_fail@plt+0x18454>
   2aedc:	mov	r0, #0
   2aee0:	mov	r1, #-2147483648	; 0x80000000
   2aee4:	mov	r2, r6
   2aee8:	mov	r3, r5
   2aeec:	str	r0, [sp, #84]	; 0x54
   2aef0:	mov	r0, #0
   2aef4:	bl	47544 <__assert_fail@plt+0x34a94>
   2aef8:	subs	r0, r0, #3600	; 0xe10
   2aefc:	sbcs	r0, r1, #0
   2af00:	blt	2a3e4 <__assert_fail@plt+0x17934>
   2af04:	mov	r0, #3600	; 0xe10
   2af08:	umull	r1, r2, r6, r0
   2af0c:	mla	r0, r5, r0, r2
   2af10:	asr	r2, r4, #31
   2af14:	adds	r5, r4, r1
   2af18:	mov	r1, #0
   2af1c:	adc	r4, r2, r0
   2af20:	str	r1, [sp, #84]	; 0x54
   2af24:	mov	r1, #0
   2af28:	cmn	r4, #1
   2af2c:	movwgt	r1, #1
   2af30:	cmn	r2, #1
   2af34:	mov	r2, #0
   2af38:	movwgt	r2, #1
   2af3c:	subs	r1, r2, r1
   2af40:	movwne	r1, #1
   2af44:	cmn	r0, #1
   2af48:	mov	r0, #0
   2af4c:	movwgt	r0, #1
   2af50:	sub	r0, r2, r0
   2af54:	clz	r0, r0
   2af58:	lsr	r0, r0, #5
   2af5c:	tst	r0, r1
   2af60:	bne	2a9e8 <__assert_fail@plt+0x17f38>
   2af64:	ldr	r0, [sp, #12]
   2af68:	ldrd	r8, [r0]
   2af6c:	cmn	r9, #1
   2af70:	ble	2af98 <__assert_fail@plt+0x184e8>
   2af74:	movw	r1, #8738	; 0x2222
   2af78:	movw	r0, #8738	; 0x2222
   2af7c:	ldr	sl, [sp, #76]	; 0x4c
   2af80:	movt	r1, #8738	; 0x2222
   2af84:	movt	r0, #546	; 0x222
   2af88:	subs	r1, r1, r8
   2af8c:	sbcs	r0, r0, r9
   2af90:	blt	2a3e4 <__assert_fail@plt+0x17934>
   2af94:	b	2afd8 <__assert_fail@plt+0x18528>
   2af98:	ldr	sl, [sp, #76]	; 0x4c
   2af9c:	mvn	r1, #0
   2afa0:	eor	r0, r8, r1
   2afa4:	eor	r1, r9, r1
   2afa8:	orrs	r0, r0, r1
   2afac:	beq	2afd8 <__assert_fail@plt+0x18528>
   2afb0:	mov	r0, #0
   2afb4:	mov	r1, #-2147483648	; 0x80000000
   2afb8:	mov	r2, r8
   2afbc:	mov	r3, r9
   2afc0:	str	r0, [sp, #84]	; 0x54
   2afc4:	mov	r0, #0
   2afc8:	bl	47544 <__assert_fail@plt+0x34a94>
   2afcc:	subs	r0, r0, #60	; 0x3c
   2afd0:	sbcs	r0, r1, #0
   2afd4:	blt	2a3e4 <__assert_fail@plt+0x17934>
   2afd8:	mov	r0, #60	; 0x3c
   2afdc:	rsb	r2, r9, r9, lsl #4
   2afe0:	mov	r3, #0
   2afe4:	mov	r6, #0
   2afe8:	umull	r0, r1, r8, r0
   2afec:	str	r3, [sp, #84]	; 0x54
   2aff0:	mov	r3, #0
   2aff4:	add	r2, r1, r2, lsl #2
   2aff8:	adds	r0, r5, r0
   2affc:	adc	r1, r4, r2
   2b000:	cmn	r1, #1
   2b004:	movwgt	r3, #1
   2b008:	cmn	r4, #1
   2b00c:	movwgt	r6, #1
   2b010:	subs	r3, r6, r3
   2b014:	movwne	r3, #1
   2b018:	cmn	r2, #1
   2b01c:	mov	r2, #0
   2b020:	movwgt	r2, #1
   2b024:	sub	r2, r6, r2
   2b028:	clz	r2, r2
   2b02c:	lsr	r2, r2, #5
   2b030:	ands	r2, r2, r3
   2b034:	bne	2a3e4 <__assert_fail@plt+0x17934>
   2b038:	ldr	r3, [sp, #8]
   2b03c:	mov	r2, #0
   2b040:	cmn	r1, #1
   2b044:	mov	r6, #0
   2b048:	str	r2, [sp, #84]	; 0x54
   2b04c:	mov	r2, #0
   2b050:	movwgt	r2, #1
   2b054:	ldrd	r4, [r3]
   2b058:	mov	r3, #0
   2b05c:	adds	r0, r0, r4
   2b060:	adc	r1, r1, r5
   2b064:	cmn	r1, #1
   2b068:	movwgt	r3, #1
   2b06c:	subs	r3, r2, r3
   2b070:	movwne	r3, #1
   2b074:	cmn	r5, #1
   2b078:	movwgt	r6, #1
   2b07c:	sub	r2, r2, r6
   2b080:	clz	r2, r2
   2b084:	lsr	r2, r2, #5
   2b088:	ands	r2, r2, r3
   2b08c:	bne	2a3e4 <__assert_fail@plt+0x17934>
   2b090:	ldr	r3, [sp, #68]	; 0x44
   2b094:	mov	r2, #0
   2b098:	cmn	r1, #1
   2b09c:	str	r2, [sp, #84]	; 0x54
   2b0a0:	mov	r2, #0
   2b0a4:	movwgt	r2, #1
   2b0a8:	adds	r0, r0, r3
   2b0ac:	mov	r3, #0
   2b0b0:	adc	r1, r1, r7
   2b0b4:	cmn	r1, #1
   2b0b8:	movwgt	r3, #1
   2b0bc:	subs	r3, r2, r3
   2b0c0:	movwne	r3, #1
   2b0c4:	cmn	r7, #1
   2b0c8:	mov	r7, #0
   2b0cc:	movwgt	r7, #1
   2b0d0:	sub	r2, r2, r7
   2b0d4:	clz	r2, r2
   2b0d8:	lsr	r2, r2, #5
   2b0dc:	tst	r2, r3
   2b0e0:	bne	2a9e8 <__assert_fail@plt+0x17f38>
   2b0e4:	ldr	sl, [sp, #76]	; 0x4c
   2b0e8:	asr	r2, r0, #31
   2b0ec:	eor	r3, r0, r0
   2b0f0:	eor	r1, r1, r2
   2b0f4:	orrs	r1, r3, r1
   2b0f8:	bne	2a3e4 <__assert_fail@plt+0x17934>
   2b0fc:	ldr	r1, [sp, #36]	; 0x24
   2b100:	str	r0, [r1]
   2b104:	ldr	r0, [sp, #64]	; 0x40
   2b108:	str	r0, [r1, #4]
   2b10c:	b	2a3dc <__assert_fail@plt+0x1792c>
   2b110:	push	{r4, r5, r6, sl, fp, lr}
   2b114:	add	fp, sp, #16
   2b118:	mov	r4, r1
   2b11c:	movw	r1, #53270	; 0xd016
   2b120:	mov	r5, r0
   2b124:	movt	r1, #4
   2b128:	mov	r0, r4
   2b12c:	bl	123fc <strcmp@plt>
   2b130:	cmp	r0, #0
   2b134:	beq	2b1d4 <__assert_fail@plt+0x18724>
   2b138:	movw	r1, #53274	; 0xd01a
   2b13c:	mov	r0, r4
   2b140:	movt	r1, #4
   2b144:	bl	123fc <strcmp@plt>
   2b148:	movw	r6, #52404	; 0xccb4
   2b14c:	cmp	r0, #0
   2b150:	movt	r6, #4
   2b154:	beq	2b1e4 <__assert_fail@plt+0x18734>
   2b158:	movw	r1, #53277	; 0xd01d
   2b15c:	mov	r0, r4
   2b160:	movt	r1, #4
   2b164:	bl	123fc <strcmp@plt>
   2b168:	cmp	r0, #0
   2b16c:	beq	2b1f0 <__assert_fail@plt+0x18740>
   2b170:	ldr	r1, [r5, #188]	; 0xbc
   2b174:	cmp	r1, #0
   2b178:	beq	2b19c <__assert_fail@plt+0x186ec>
   2b17c:	add	r5, r5, #200	; 0xc8
   2b180:	mov	r0, r4
   2b184:	bl	123fc <strcmp@plt>
   2b188:	cmp	r0, #0
   2b18c:	beq	2b1fc <__assert_fail@plt+0x1874c>
   2b190:	ldr	r1, [r5], #12
   2b194:	cmp	r1, #0
   2b198:	bne	2b180 <__assert_fail@plt+0x186d0>
   2b19c:	movw	r5, #52452	; 0xcce4
   2b1a0:	movw	r1, #53281	; 0xd021
   2b1a4:	movt	r5, #4
   2b1a8:	movt	r1, #4
   2b1ac:	mov	r0, r4
   2b1b0:	bl	123fc <strcmp@plt>
   2b1b4:	cmp	r0, #0
   2b1b8:	beq	2b200 <__assert_fail@plt+0x18750>
   2b1bc:	ldr	r1, [r5, #12]!
   2b1c0:	cmp	r1, #0
   2b1c4:	bne	2b1ac <__assert_fail@plt+0x186fc>
   2b1c8:	mov	r5, #0
   2b1cc:	mov	r0, r5
   2b1d0:	pop	{r4, r5, r6, sl, fp, pc}
   2b1d4:	movw	r5, #52404	; 0xccb4
   2b1d8:	movt	r5, #4
   2b1dc:	mov	r0, r5
   2b1e0:	pop	{r4, r5, r6, sl, fp, pc}
   2b1e4:	add	r5, r6, #12
   2b1e8:	mov	r0, r5
   2b1ec:	pop	{r4, r5, r6, sl, fp, pc}
   2b1f0:	add	r5, r6, #24
   2b1f4:	mov	r0, r5
   2b1f8:	pop	{r4, r5, r6, sl, fp, pc}
   2b1fc:	sub	r5, r5, #12
   2b200:	mov	r0, r5
   2b204:	pop	{r4, r5, r6, sl, fp, pc}
   2b208:	push	{r4, r5, fp, lr}
   2b20c:	add	fp, sp, #8
   2b210:	cmp	r0, #0
   2b214:	beq	2b2a8 <__assert_fail@plt+0x187f8>
   2b218:	mov	r1, #47	; 0x2f
   2b21c:	mov	r4, r0
   2b220:	bl	12924 <strrchr@plt>
   2b224:	cmp	r0, #0
   2b228:	mov	r5, r4
   2b22c:	addne	r5, r0, #1
   2b230:	sub	r0, r5, r4
   2b234:	cmp	r0, #7
   2b238:	blt	2b28c <__assert_fail@plt+0x187dc>
   2b23c:	movw	r1, #53724	; 0xd1dc
   2b240:	sub	r0, r5, #7
   2b244:	mov	r2, #7
   2b248:	movt	r1, #4
   2b24c:	bl	12a50 <strncmp@plt>
   2b250:	cmp	r0, #0
   2b254:	bne	2b28c <__assert_fail@plt+0x187dc>
   2b258:	movw	r1, #53732	; 0xd1e4
   2b25c:	mov	r0, r5
   2b260:	mov	r2, #3
   2b264:	movt	r1, #4
   2b268:	bl	12a50 <strncmp@plt>
   2b26c:	cmp	r0, #0
   2b270:	beq	2b27c <__assert_fail@plt+0x187cc>
   2b274:	mov	r4, r5
   2b278:	b	2b28c <__assert_fail@plt+0x187dc>
   2b27c:	movw	r0, #58688	; 0xe540
   2b280:	add	r4, r5, #3
   2b284:	movt	r0, #5
   2b288:	str	r4, [r0]
   2b28c:	movw	r0, #58696	; 0xe548
   2b290:	movt	r0, #5
   2b294:	str	r4, [r0]
   2b298:	movw	r0, #60684	; 0xed0c
   2b29c:	movt	r0, #5
   2b2a0:	str	r4, [r0]
   2b2a4:	pop	{r4, r5, fp, pc}
   2b2a8:	movw	r0, #58704	; 0xe550
   2b2ac:	mov	r1, #55	; 0x37
   2b2b0:	mov	r2, #1
   2b2b4:	movt	r0, #5
   2b2b8:	ldr	r3, [r0]
   2b2bc:	movw	r0, #53668	; 0xd1a4
   2b2c0:	movt	r0, #4
   2b2c4:	bl	12618 <fwrite@plt>
   2b2c8:	bl	12a5c <abort@plt>
   2b2cc:	push	{r4, r5, r6, sl, fp, lr}
   2b2d0:	add	fp, sp, #16
   2b2d4:	mov	r4, r0
   2b2d8:	movw	r0, #60688	; 0xed10
   2b2dc:	movt	r0, #5
   2b2e0:	cmp	r4, #0
   2b2e4:	moveq	r4, r0
   2b2e8:	bl	12804 <__errno_location@plt>
   2b2ec:	ldr	r6, [r0]
   2b2f0:	mov	r5, r0
   2b2f4:	mov	r0, r4
   2b2f8:	mov	r1, #48	; 0x30
   2b2fc:	bl	2e498 <__assert_fail@plt+0x1b9e8>
   2b300:	str	r6, [r5]
   2b304:	pop	{r4, r5, r6, sl, fp, pc}
   2b308:	movw	r1, #60688	; 0xed10
   2b30c:	cmp	r0, #0
   2b310:	movt	r1, #5
   2b314:	movne	r1, r0
   2b318:	ldr	r0, [r1]
   2b31c:	bx	lr
   2b320:	movw	r2, #60688	; 0xed10
   2b324:	cmp	r0, #0
   2b328:	movt	r2, #5
   2b32c:	movne	r2, r0
   2b330:	str	r1, [r2]
   2b334:	bx	lr
   2b338:	movw	r3, #60688	; 0xed10
   2b33c:	cmp	r0, #0
   2b340:	and	r2, r2, #1
   2b344:	movt	r3, #5
   2b348:	movne	r3, r0
   2b34c:	ubfx	r0, r1, #5, #3
   2b350:	and	r1, r1, #31
   2b354:	add	ip, r3, r0, lsl #2
   2b358:	mov	r0, #1
   2b35c:	ldr	r3, [ip, #8]
   2b360:	and	r0, r0, r3, lsr r1
   2b364:	eor	r2, r0, r2
   2b368:	eor	r1, r3, r2, lsl r1
   2b36c:	str	r1, [ip, #8]
   2b370:	bx	lr
   2b374:	movw	r2, #60688	; 0xed10
   2b378:	cmp	r0, #0
   2b37c:	movt	r2, #5
   2b380:	movne	r2, r0
   2b384:	ldr	r0, [r2, #4]
   2b388:	str	r1, [r2, #4]
   2b38c:	bx	lr
   2b390:	push	{fp, lr}
   2b394:	mov	fp, sp
   2b398:	movw	r3, #60688	; 0xed10
   2b39c:	cmp	r0, #0
   2b3a0:	movt	r3, #5
   2b3a4:	movne	r3, r0
   2b3a8:	cmp	r1, #0
   2b3ac:	mov	r0, #10
   2b3b0:	cmpne	r2, #0
   2b3b4:	str	r0, [r3]
   2b3b8:	bne	2b3c0 <__assert_fail@plt+0x18910>
   2b3bc:	bl	12a5c <abort@plt>
   2b3c0:	str	r1, [r3, #40]	; 0x28
   2b3c4:	str	r2, [r3, #44]	; 0x2c
   2b3c8:	pop	{fp, pc}
   2b3cc:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2b3d0:	add	fp, sp, #28
   2b3d4:	sub	sp, sp, #20
   2b3d8:	mov	r7, r0
   2b3dc:	ldr	r0, [fp, #8]
   2b3e0:	movw	r5, #60688	; 0xed10
   2b3e4:	mov	r8, r3
   2b3e8:	mov	r9, r2
   2b3ec:	mov	sl, r1
   2b3f0:	movt	r5, #5
   2b3f4:	cmp	r0, #0
   2b3f8:	movne	r5, r0
   2b3fc:	bl	12804 <__errno_location@plt>
   2b400:	ldr	r2, [r5, #40]	; 0x28
   2b404:	ldr	r3, [r5, #44]	; 0x2c
   2b408:	mov	r4, r0
   2b40c:	ldm	r5, {r0, r1}
   2b410:	add	r5, r5, #8
   2b414:	ldr	r6, [r4]
   2b418:	stm	sp, {r0, r1, r5}
   2b41c:	mov	r0, r7
   2b420:	mov	r1, sl
   2b424:	str	r2, [sp, #12]
   2b428:	str	r3, [sp, #16]
   2b42c:	mov	r2, r9
   2b430:	mov	r3, r8
   2b434:	bl	2b444 <__assert_fail@plt+0x18994>
   2b438:	str	r6, [r4]
   2b43c:	sub	sp, fp, #28
   2b440:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2b444:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2b448:	add	fp, sp, #28
   2b44c:	sub	sp, sp, #156	; 0x9c
   2b450:	mov	r5, r0
   2b454:	add	r0, r2, #1
   2b458:	mov	r6, r1
   2b45c:	mov	sl, r3
   2b460:	str	r2, [fp, #-80]	; 0xffffffb0
   2b464:	str	r0, [sp, #72]	; 0x48
   2b468:	ldr	r0, [fp, #12]
   2b46c:	and	r1, r0, #1
   2b470:	str	r1, [sp, #36]	; 0x24
   2b474:	and	r1, r0, #4
   2b478:	str	r1, [sp, #32]
   2b47c:	ubfx	r9, r0, #1, #1
   2b480:	bl	12648 <__ctype_get_mb_cur_max@plt>
   2b484:	str	r0, [sp, #40]	; 0x28
   2b488:	ldr	r0, [fp, #24]
   2b48c:	ldr	r7, [fp, #8]
   2b490:	mov	r1, #0
   2b494:	str	r5, [fp, #-84]	; 0xffffffac
   2b498:	str	r1, [fp, #-56]	; 0xffffffc8
   2b49c:	mov	r1, #0
   2b4a0:	str	r1, [sp, #60]	; 0x3c
   2b4a4:	mov	r1, #1
   2b4a8:	str	r1, [fp, #-48]	; 0xffffffd0
   2b4ac:	str	r0, [sp, #80]	; 0x50
   2b4b0:	ldr	r0, [fp, #20]
   2b4b4:	str	r0, [sp, #76]	; 0x4c
   2b4b8:	mov	r0, #0
   2b4bc:	str	r0, [sp, #56]	; 0x38
   2b4c0:	mov	r0, #0
   2b4c4:	str	r0, [fp, #-88]	; 0xffffffa8
   2b4c8:	mov	r0, #0
   2b4cc:	str	r0, [fp, #-72]	; 0xffffffb8
   2b4d0:	mov	r0, #0
   2b4d4:	cmp	r7, #10
   2b4d8:	bhi	2c46c <__assert_fail@plt+0x199bc>
   2b4dc:	add	r1, pc, #24
   2b4e0:	ldr	ip, [fp, #-80]	; 0xffffffb0
   2b4e4:	mov	r4, r6
   2b4e8:	mov	r8, #0
   2b4ec:	mov	r2, #1
   2b4f0:	mov	r3, #0
   2b4f4:	mov	lr, sl
   2b4f8:	ldr	pc, [r1, r7, lsl #2]
   2b4fc:	andeq	fp, r2, r0, asr #11
   2b500:	andeq	fp, r2, r4, lsl r6
   2b504:	ldrdeq	fp, [r2], -r4
   2b508:			; <UNDEFINED> instruction: 0x0002b5b8
   2b50c:	andeq	fp, r2, r8, lsl #12
   2b510:	andeq	fp, r2, ip, lsr r6
   2b514:	andeq	fp, r2, r4, ror #11
   2b518:	andeq	fp, r2, r0, asr #13
   2b51c:	andeq	fp, r2, r8, lsr #10
   2b520:	andeq	fp, r2, r8, lsr #10
   2b524:	andeq	fp, r2, r0, asr r5
   2b528:	movw	r0, #53812	; 0xd234
   2b52c:	mov	r1, r7
   2b530:	movt	r0, #4
   2b534:	bl	2ce74 <__assert_fail@plt+0x1a3c4>
   2b538:	str	r0, [sp, #76]	; 0x4c
   2b53c:	movw	r0, #40656	; 0x9ed0
   2b540:	mov	r1, r7
   2b544:	movt	r0, #4
   2b548:	bl	2ce74 <__assert_fail@plt+0x1a3c4>
   2b54c:	str	r0, [sp, #80]	; 0x50
   2b550:	mov	r8, #0
   2b554:	tst	r9, #1
   2b558:	bne	2b590 <__assert_fail@plt+0x18ae0>
   2b55c:	ldr	r0, [sp, #76]	; 0x4c
   2b560:	ldrb	r0, [r0]
   2b564:	cmp	r0, #0
   2b568:	beq	2b590 <__assert_fail@plt+0x18ae0>
   2b56c:	ldr	r1, [sp, #76]	; 0x4c
   2b570:	mov	r8, #0
   2b574:	add	r1, r1, #1
   2b578:	cmp	r8, r4
   2b57c:	strbcc	r0, [r5, r8]
   2b580:	ldrb	r0, [r1, r8]
   2b584:	add	r8, r8, #1
   2b588:	cmp	r0, #0
   2b58c:	bne	2b578 <__assert_fail@plt+0x18ac8>
   2b590:	ldr	r6, [sp, #80]	; 0x50
   2b594:	mov	r0, r6
   2b598:	bl	127bc <strlen@plt>
   2b59c:	ldr	ip, [fp, #-80]	; 0xffffffb0
   2b5a0:	str	r0, [fp, #-72]	; 0xffffffb8
   2b5a4:	str	r6, [fp, #-88]	; 0xffffffa8
   2b5a8:	mov	r2, #1
   2b5ac:	mov	r3, r9
   2b5b0:	mov	lr, sl
   2b5b4:	b	2b6c0 <__assert_fail@plt+0x18c10>
   2b5b8:	mov	r0, #1
   2b5bc:	b	2b614 <__assert_fail@plt+0x18b64>
   2b5c0:	mov	r7, #0
   2b5c4:	mov	r8, #0
   2b5c8:	mov	r2, r0
   2b5cc:	mov	r3, #0
   2b5d0:	b	2b6c0 <__assert_fail@plt+0x18c10>
   2b5d4:	tst	r9, #1
   2b5d8:	bne	2b614 <__assert_fail@plt+0x18b64>
   2b5dc:	mov	r2, r0
   2b5e0:	b	2b66c <__assert_fail@plt+0x18bbc>
   2b5e4:	mov	r0, #1
   2b5e8:	mov	r8, #0
   2b5ec:	mov	r7, #5
   2b5f0:	mov	r2, #1
   2b5f4:	str	r0, [fp, #-72]	; 0xffffffb8
   2b5f8:	movw	r0, #53666	; 0xd1a2
   2b5fc:	movt	r0, #4
   2b600:	str	r0, [fp, #-88]	; 0xffffffa8
   2b604:	b	2b634 <__assert_fail@plt+0x18b84>
   2b608:	mov	r2, #1
   2b60c:	tst	r9, #1
   2b610:	beq	2b66c <__assert_fail@plt+0x18bbc>
   2b614:	mov	r1, #1
   2b618:	mov	r8, #0
   2b61c:	mov	r7, #2
   2b620:	mov	r2, r0
   2b624:	str	r1, [fp, #-72]	; 0xffffffb8
   2b628:	movw	r1, #40656	; 0x9ed0
   2b62c:	movt	r1, #4
   2b630:	str	r1, [fp, #-88]	; 0xffffffa8
   2b634:	mov	r3, #1
   2b638:	b	2b6c0 <__assert_fail@plt+0x18c10>
   2b63c:	tst	r9, #1
   2b640:	beq	2b690 <__assert_fail@plt+0x18be0>
   2b644:	mov	r0, #1
   2b648:	mov	r8, #0
   2b64c:	mov	r2, #1
   2b650:	mov	r3, #1
   2b654:	mov	r7, #5
   2b658:	str	r0, [fp, #-72]	; 0xffffffb8
   2b65c:	movw	r0, #53666	; 0xd1a2
   2b660:	movt	r0, #4
   2b664:	str	r0, [fp, #-88]	; 0xffffffa8
   2b668:	b	2b6c0 <__assert_fail@plt+0x18c10>
   2b66c:	cmp	r4, #0
   2b670:	mov	r8, #1
   2b674:	mov	r3, #0
   2b678:	mov	r7, #2
   2b67c:	movne	r0, #39	; 0x27
   2b680:	strbne	r0, [r5]
   2b684:	movw	r0, #40656	; 0x9ed0
   2b688:	movt	r0, #4
   2b68c:	b	2b6b4 <__assert_fail@plt+0x18c04>
   2b690:	cmp	r4, #0
   2b694:	mov	r8, #1
   2b698:	mov	r2, #1
   2b69c:	mov	r7, #5
   2b6a0:	mov	r3, #0
   2b6a4:	movne	r0, #34	; 0x22
   2b6a8:	strbne	r0, [r5]
   2b6ac:	movw	r0, #53666	; 0xd1a2
   2b6b0:	movt	r0, #4
   2b6b4:	str	r0, [fp, #-88]	; 0xffffffa8
   2b6b8:	mov	r0, #1
   2b6bc:	str	r0, [fp, #-72]	; 0xffffffb8
   2b6c0:	ldr	r0, [fp, #-72]	; 0xffffffb8
   2b6c4:	eor	r6, r3, #1
   2b6c8:	str	r7, [fp, #-68]	; 0xffffffbc
   2b6cc:	str	r3, [fp, #-76]	; 0xffffffb4
   2b6d0:	str	r2, [sp, #84]	; 0x54
   2b6d4:	str	r6, [sp, #92]	; 0x5c
   2b6d8:	cmp	r0, #0
   2b6dc:	movwne	r0, #1
   2b6e0:	and	r1, r0, r3
   2b6e4:	and	r1, r2, r1
   2b6e8:	str	r1, [sp, #48]	; 0x30
   2b6ec:	sub	r1, r7, #2
   2b6f0:	clz	r1, r1
   2b6f4:	lsr	r1, r1, #5
   2b6f8:	and	r1, r1, r3
   2b6fc:	str	r1, [sp, #64]	; 0x40
   2b700:	subs	r1, r7, #2
   2b704:	mov	r7, #0
   2b708:	movwne	r1, #1
   2b70c:	orr	r6, r1, r6
   2b710:	and	r1, r1, r2
   2b714:	and	r0, r0, r1
   2b718:	str	r6, [sp, #68]	; 0x44
   2b71c:	str	r0, [fp, #-60]	; 0xffffffc4
   2b720:	orr	r0, r1, r3
   2b724:	ldr	r1, [fp, #16]
   2b728:	eor	r0, r0, #1
   2b72c:	clz	r1, r1
   2b730:	lsr	r1, r1, #5
   2b734:	orr	r0, r1, r0
   2b738:	str	r0, [fp, #-64]	; 0xffffffc0
   2b73c:	eor	r0, r2, #1
   2b740:	str	r0, [sp, #52]	; 0x34
   2b744:	cmn	lr, #1
   2b748:	beq	2b758 <__assert_fail@plt+0x18ca8>
   2b74c:	cmp	r7, lr
   2b750:	bne	2b764 <__assert_fail@plt+0x18cb4>
   2b754:	b	2c2ac <__assert_fail@plt+0x197fc>
   2b758:	ldrb	r0, [ip, r7]
   2b75c:	cmp	r0, #0
   2b760:	beq	2c2b4 <__assert_fail@plt+0x19804>
   2b764:	ldr	r0, [fp, #-60]	; 0xffffffc4
   2b768:	mov	sl, #0
   2b76c:	cmp	r0, #0
   2b770:	beq	2b7a8 <__assert_fail@plt+0x18cf8>
   2b774:	ldr	r0, [fp, #-72]	; 0xffffffb8
   2b778:	add	r5, r7, r0
   2b77c:	cmp	r0, #2
   2b780:	bcc	2b79c <__assert_fail@plt+0x18cec>
   2b784:	cmn	lr, #1
   2b788:	bne	2b79c <__assert_fail@plt+0x18cec>
   2b78c:	mov	r0, ip
   2b790:	bl	127bc <strlen@plt>
   2b794:	ldr	ip, [fp, #-80]	; 0xffffffb0
   2b798:	mov	lr, r0
   2b79c:	cmp	r5, lr
   2b7a0:	bls	2b7b0 <__assert_fail@plt+0x18d00>
   2b7a4:	ldr	r5, [fp, #-84]	; 0xffffffac
   2b7a8:	mov	r0, #0
   2b7ac:	b	2b7fc <__assert_fail@plt+0x18d4c>
   2b7b0:	ldr	r1, [fp, #-88]	; 0xffffffa8
   2b7b4:	ldr	r2, [fp, #-72]	; 0xffffffb8
   2b7b8:	add	r0, ip, r7
   2b7bc:	mov	r6, r4
   2b7c0:	mov	r4, lr
   2b7c4:	bl	127a4 <bcmp@plt>
   2b7c8:	ldr	r2, [sp, #92]	; 0x5c
   2b7cc:	cmp	r0, #0
   2b7d0:	ldr	r5, [fp, #-84]	; 0xffffffac
   2b7d4:	mov	r1, r0
   2b7d8:	movwne	r1, #1
   2b7dc:	orr	r1, r1, r2
   2b7e0:	tst	r1, #1
   2b7e4:	beq	2c33c <__assert_fail@plt+0x1988c>
   2b7e8:	ldr	ip, [fp, #-80]	; 0xffffffb0
   2b7ec:	clz	r0, r0
   2b7f0:	mov	lr, r4
   2b7f4:	mov	r4, r6
   2b7f8:	lsr	r0, r0, #5
   2b7fc:	str	r0, [fp, #-52]	; 0xffffffcc
   2b800:	ldrb	r6, [ip, r7]
   2b804:	cmp	r6, #126	; 0x7e
   2b808:	bhi	2bd38 <__assert_fail@plt+0x19288>
   2b80c:	add	r3, pc, #16
   2b810:	mov	r9, #1
   2b814:	mov	r2, #110	; 0x6e
   2b818:	mov	r0, #97	; 0x61
   2b81c:	mov	r1, #0
   2b820:	ldr	pc, [r3, r6, lsl #2]
   2b824:	muleq	r2, r8, fp
   2b828:	andeq	fp, r2, r8, lsr sp
   2b82c:	andeq	fp, r2, r8, lsr sp
   2b830:	andeq	fp, r2, r8, lsr sp
   2b834:	andeq	fp, r2, r8, lsr sp
   2b838:	andeq	fp, r2, r8, lsr sp
   2b83c:	andeq	fp, r2, r8, lsr sp
   2b840:	andeq	fp, r2, r4, lsl lr
   2b844:	andeq	fp, r2, r8, ror fp
   2b848:	andeq	fp, r2, r0, ror fp
   2b84c:	andeq	fp, r2, r4, lsl #23
   2b850:	andeq	fp, r2, r0, lsr #25
   2b854:	andeq	fp, r2, r8, ror #22
   2b858:	andeq	fp, r2, r0, lsl #23
   2b85c:	andeq	fp, r2, r8, lsr sp
   2b860:	andeq	fp, r2, r8, lsr sp
   2b864:	andeq	fp, r2, r8, lsr sp
   2b868:	andeq	fp, r2, r8, lsr sp
   2b86c:	andeq	fp, r2, r8, lsr sp
   2b870:	andeq	fp, r2, r8, lsr sp
   2b874:	andeq	fp, r2, r8, lsr sp
   2b878:	andeq	fp, r2, r8, lsr sp
   2b87c:	andeq	fp, r2, r8, lsr sp
   2b880:	andeq	fp, r2, r8, lsr sp
   2b884:	andeq	fp, r2, r8, lsr sp
   2b888:	andeq	fp, r2, r8, lsr sp
   2b88c:	andeq	fp, r2, r8, lsr sp
   2b890:	andeq	fp, r2, r8, lsr sp
   2b894:	andeq	fp, r2, r8, lsr sp
   2b898:	andeq	fp, r2, r8, lsr sp
   2b89c:	andeq	fp, r2, r8, lsr sp
   2b8a0:	andeq	fp, r2, r8, lsr sp
   2b8a4:	andeq	fp, r2, ip, lsl fp
   2b8a8:	andeq	fp, r2, r0, lsr #22
   2b8ac:	andeq	fp, r2, r0, lsr #22
   2b8b0:	andeq	fp, r2, r8, lsl #22
   2b8b4:	andeq	fp, r2, r0, lsr #22
   2b8b8:	andeq	fp, r2, r0, lsr #20
   2b8bc:	andeq	fp, r2, r0, lsr #22
   2b8c0:	andeq	fp, r2, r8, lsr #25
   2b8c4:	andeq	fp, r2, r0, lsr #22
   2b8c8:	andeq	fp, r2, r0, lsr #22
   2b8cc:	andeq	fp, r2, r0, lsr #22
   2b8d0:	andeq	fp, r2, r0, lsr #20
   2b8d4:	andeq	fp, r2, r0, lsr #20
   2b8d8:	andeq	fp, r2, r0, lsr #20
   2b8dc:	andeq	fp, r2, r0, lsr #20
   2b8e0:	andeq	fp, r2, r0, lsr #20
   2b8e4:	andeq	fp, r2, r0, lsr #20
   2b8e8:	andeq	fp, r2, r0, lsr #20
   2b8ec:	andeq	fp, r2, r0, lsr #20
   2b8f0:	andeq	fp, r2, r0, lsr #20
   2b8f4:	andeq	fp, r2, r0, lsr #20
   2b8f8:	andeq	fp, r2, r0, lsr #20
   2b8fc:	andeq	fp, r2, r0, lsr #20
   2b900:	andeq	fp, r2, r0, lsr #20
   2b904:	andeq	fp, r2, r0, lsr #20
   2b908:	andeq	fp, r2, r0, lsr #20
   2b90c:	andeq	fp, r2, r0, lsr #20
   2b910:	andeq	fp, r2, r0, lsr #22
   2b914:	andeq	fp, r2, r0, lsr #22
   2b918:	andeq	fp, r2, r0, lsr #22
   2b91c:	andeq	fp, r2, r0, lsr #22
   2b920:	andeq	fp, r2, r0, ror ip
   2b924:	andeq	fp, r2, r8, lsr sp
   2b928:	andeq	fp, r2, r0, lsr #20
   2b92c:	andeq	fp, r2, r0, lsr #20
   2b930:	andeq	fp, r2, r0, lsr #20
   2b934:	andeq	fp, r2, r0, lsr #20
   2b938:	andeq	fp, r2, r0, lsr #20
   2b93c:	andeq	fp, r2, r0, lsr #20
   2b940:	andeq	fp, r2, r0, lsr #20
   2b944:	andeq	fp, r2, r0, lsr #20
   2b948:	andeq	fp, r2, r0, lsr #20
   2b94c:	andeq	fp, r2, r0, lsr #20
   2b950:	andeq	fp, r2, r0, lsr #20
   2b954:	andeq	fp, r2, r0, lsr #20
   2b958:	andeq	fp, r2, r0, lsr #20
   2b95c:	andeq	fp, r2, r0, lsr #20
   2b960:	andeq	fp, r2, r0, lsr #20
   2b964:	andeq	fp, r2, r0, lsr #20
   2b968:	andeq	fp, r2, r0, lsr #20
   2b96c:	andeq	fp, r2, r0, lsr #20
   2b970:	andeq	fp, r2, r0, lsr #20
   2b974:	andeq	fp, r2, r0, lsr #20
   2b978:	andeq	fp, r2, r0, lsr #20
   2b97c:	andeq	fp, r2, r0, lsr #20
   2b980:	andeq	fp, r2, r0, lsr #20
   2b984:	andeq	fp, r2, r0, lsr #20
   2b988:	andeq	fp, r2, r0, lsr #20
   2b98c:	andeq	fp, r2, r0, lsr #20
   2b990:	andeq	fp, r2, r0, lsr #22
   2b994:	andeq	fp, r2, r8, asr #22
   2b998:	andeq	fp, r2, r0, lsr #20
   2b99c:	andeq	fp, r2, r0, lsr #22
   2b9a0:	andeq	fp, r2, r0, lsr #20
   2b9a4:	andeq	fp, r2, r0, lsr #22
   2b9a8:	andeq	fp, r2, r0, lsr #20
   2b9ac:	andeq	fp, r2, r0, lsr #20
   2b9b0:	andeq	fp, r2, r0, lsr #20
   2b9b4:	andeq	fp, r2, r0, lsr #20
   2b9b8:	andeq	fp, r2, r0, lsr #20
   2b9bc:	andeq	fp, r2, r0, lsr #20
   2b9c0:	andeq	fp, r2, r0, lsr #20
   2b9c4:	andeq	fp, r2, r0, lsr #20
   2b9c8:	andeq	fp, r2, r0, lsr #20
   2b9cc:	andeq	fp, r2, r0, lsr #20
   2b9d0:	andeq	fp, r2, r0, lsr #20
   2b9d4:	andeq	fp, r2, r0, lsr #20
   2b9d8:	andeq	fp, r2, r0, lsr #20
   2b9dc:	andeq	fp, r2, r0, lsr #20
   2b9e0:	andeq	fp, r2, r0, lsr #20
   2b9e4:	andeq	fp, r2, r0, lsr #20
   2b9e8:	andeq	fp, r2, r0, lsr #20
   2b9ec:	andeq	fp, r2, r0, lsr #20
   2b9f0:	andeq	fp, r2, r0, lsr #20
   2b9f4:	andeq	fp, r2, r0, lsr #20
   2b9f8:	andeq	fp, r2, r0, lsr #20
   2b9fc:	andeq	fp, r2, r0, lsr #20
   2ba00:	andeq	fp, r2, r0, lsr #20
   2ba04:	andeq	fp, r2, r0, lsr #20
   2ba08:	andeq	fp, r2, r0, lsr #20
   2ba0c:	andeq	fp, r2, r0, lsr #20
   2ba10:	ldrdeq	fp, [r2], -ip
   2ba14:	andeq	fp, r2, r0, lsr #22
   2ba18:	ldrdeq	fp, [r2], -ip
   2ba1c:	andeq	fp, r2, r8, lsl #22
   2ba20:	ldr	r0, [fp, #-64]	; 0xffffffc0
   2ba24:	tst	r0, #1
   2ba28:	bne	2ba54 <__assert_fail@plt+0x18fa4>
   2ba2c:	ldr	r1, [fp, #16]
   2ba30:	ubfx	r0, r6, #5, #3
   2ba34:	mov	r2, #1
   2ba38:	ldr	r0, [r1, r0, lsl #2]
   2ba3c:	and	r1, r6, #31
   2ba40:	tst	r0, r2, lsl r1
   2ba44:	beq	2ba54 <__assert_fail@plt+0x18fa4>
   2ba48:	mov	r0, r6
   2ba4c:	mov	r1, r9
   2ba50:	b	2ba68 <__assert_fail@plt+0x18fb8>
   2ba54:	ldr	r0, [fp, #-52]	; 0xffffffcc
   2ba58:	mov	r1, r9
   2ba5c:	cmp	r0, #0
   2ba60:	mov	r0, r6
   2ba64:	beq	2bda8 <__assert_fail@plt+0x192f8>
   2ba68:	ldr	r2, [fp, #-76]	; 0xffffffb4
   2ba6c:	tst	r2, #1
   2ba70:	bne	2c378 <__assert_fail@plt+0x198c8>
   2ba74:	ldr	r2, [fp, #-68]	; 0xffffffbc
   2ba78:	ldr	r3, [fp, #-56]	; 0xffffffc8
   2ba7c:	subs	r2, r2, #2
   2ba80:	movwne	r2, #1
   2ba84:	orr	r2, r2, r3
   2ba88:	tst	r2, #1
   2ba8c:	bne	2bac8 <__assert_fail@plt+0x19018>
   2ba90:	cmp	r8, r4
   2ba94:	movcc	r2, #39	; 0x27
   2ba98:	strbcc	r2, [r5, r8]
   2ba9c:	add	r2, r8, #1
   2baa0:	cmp	r2, r4
   2baa4:	movcc	r3, #36	; 0x24
   2baa8:	strbcc	r3, [r5, r2]
   2baac:	add	r2, r8, #2
   2bab0:	add	r8, r8, #3
   2bab4:	cmp	r2, r4
   2bab8:	movcc	r3, #39	; 0x27
   2babc:	strbcc	r3, [r5, r2]
   2bac0:	mov	r2, #1
   2bac4:	str	r2, [fp, #-56]	; 0xffffffc8
   2bac8:	cmp	r8, r4
   2bacc:	movcc	r2, #92	; 0x5c
   2bad0:	strbcc	r2, [r5, r8]
   2bad4:	add	r8, r8, #1
   2bad8:	b	2bdec <__assert_fail@plt+0x1933c>
   2badc:	cmp	lr, #1
   2bae0:	beq	2bb08 <__assert_fail@plt+0x19058>
   2bae4:	mov	r9, #0
   2bae8:	cmn	lr, #1
   2baec:	bne	2bb14 <__assert_fail@plt+0x19064>
   2baf0:	ldrb	r0, [ip, #1]
   2baf4:	cmp	r0, #0
   2baf8:	beq	2bb08 <__assert_fail@plt+0x19058>
   2bafc:	mvn	lr, #0
   2bb00:	mov	sl, #0
   2bb04:	b	2ba20 <__assert_fail@plt+0x18f70>
   2bb08:	mov	r9, #0
   2bb0c:	cmp	r7, #0
   2bb10:	beq	2bb1c <__assert_fail@plt+0x1906c>
   2bb14:	mov	sl, #0
   2bb18:	b	2ba20 <__assert_fail@plt+0x18f70>
   2bb1c:	mov	r1, #1
   2bb20:	ldr	r0, [fp, #-68]	; 0xffffffbc
   2bb24:	cmp	r0, #2
   2bb28:	bne	2bb40 <__assert_fail@plt+0x19090>
   2bb2c:	ldr	r0, [fp, #-76]	; 0xffffffb4
   2bb30:	mov	r9, r1
   2bb34:	tst	r0, #1
   2bb38:	beq	2ba20 <__assert_fail@plt+0x18f70>
   2bb3c:	b	2c378 <__assert_fail@plt+0x198c8>
   2bb40:	mov	r9, r1
   2bb44:	b	2ba20 <__assert_fail@plt+0x18f70>
   2bb48:	ldr	r0, [fp, #-68]	; 0xffffffbc
   2bb4c:	cmp	r0, #2
   2bb50:	bne	2bd8c <__assert_fail@plt+0x192dc>
   2bb54:	ldr	r0, [fp, #-76]	; 0xffffffb4
   2bb58:	tst	r0, #1
   2bb5c:	bne	2c378 <__assert_fail@plt+0x198c8>
   2bb60:	mov	sl, #0
   2bb64:	b	2bda0 <__assert_fail@plt+0x192f0>
   2bb68:	mov	r0, #102	; 0x66
   2bb6c:	b	2be14 <__assert_fail@plt+0x19364>
   2bb70:	mov	r2, #116	; 0x74
   2bb74:	b	2bb84 <__assert_fail@plt+0x190d4>
   2bb78:	mov	r0, #98	; 0x62
   2bb7c:	b	2be14 <__assert_fail@plt+0x19364>
   2bb80:	mov	r2, #114	; 0x72
   2bb84:	ldr	r0, [sp, #68]	; 0x44
   2bb88:	tst	r0, #1
   2bb8c:	mov	r0, r2
   2bb90:	bne	2be14 <__assert_fail@plt+0x19364>
   2bb94:	b	2c378 <__assert_fail@plt+0x198c8>
   2bb98:	ldr	r0, [sp, #84]	; 0x54
   2bb9c:	tst	r0, #1
   2bba0:	beq	2be30 <__assert_fail@plt+0x19380>
   2bba4:	ldr	r0, [fp, #-76]	; 0xffffffb4
   2bba8:	tst	r0, #1
   2bbac:	bne	2c464 <__assert_fail@plt+0x199b4>
   2bbb0:	ldr	r0, [fp, #-68]	; 0xffffffbc
   2bbb4:	ldr	r1, [fp, #-56]	; 0xffffffc8
   2bbb8:	subs	r0, r0, #2
   2bbbc:	movwne	r0, #1
   2bbc0:	orr	r0, r0, r1
   2bbc4:	tst	r0, #1
   2bbc8:	bne	2bc04 <__assert_fail@plt+0x19154>
   2bbcc:	cmp	r8, r4
   2bbd0:	movcc	r0, #39	; 0x27
   2bbd4:	strbcc	r0, [r5, r8]
   2bbd8:	add	r0, r8, #1
   2bbdc:	cmp	r0, r4
   2bbe0:	movcc	r1, #36	; 0x24
   2bbe4:	strbcc	r1, [r5, r0]
   2bbe8:	add	r0, r8, #2
   2bbec:	add	r8, r8, #3
   2bbf0:	cmp	r0, r4
   2bbf4:	movcc	r1, #39	; 0x27
   2bbf8:	strbcc	r1, [r5, r0]
   2bbfc:	mov	r0, #1
   2bc00:	str	r0, [fp, #-56]	; 0xffffffc8
   2bc04:	ldr	r1, [fp, #-68]	; 0xffffffbc
   2bc08:	cmp	r8, r4
   2bc0c:	mov	r9, #0
   2bc10:	mov	sl, #1
   2bc14:	mov	r6, #48	; 0x30
   2bc18:	movcc	r0, #92	; 0x5c
   2bc1c:	strbcc	r0, [r5, r8]
   2bc20:	add	r0, r8, #1
   2bc24:	cmp	r1, #2
   2bc28:	beq	2bff8 <__assert_fail@plt+0x19548>
   2bc2c:	add	r1, r7, #1
   2bc30:	cmp	r1, lr
   2bc34:	bcs	2bff8 <__assert_fail@plt+0x19548>
   2bc38:	ldrb	r1, [ip, r1]
   2bc3c:	sub	r1, r1, #48	; 0x30
   2bc40:	uxtb	r1, r1
   2bc44:	cmp	r1, #9
   2bc48:	bhi	2bff8 <__assert_fail@plt+0x19548>
   2bc4c:	cmp	r0, r4
   2bc50:	movcc	r1, #48	; 0x30
   2bc54:	strbcc	r1, [r5, r0]
   2bc58:	add	r0, r8, #2
   2bc5c:	add	r8, r8, #3
   2bc60:	cmp	r0, r4
   2bc64:	movcc	r1, #48	; 0x30
   2bc68:	strbcc	r1, [r5, r0]
   2bc6c:	b	2ba20 <__assert_fail@plt+0x18f70>
   2bc70:	ldr	r0, [fp, #-68]	; 0xffffffbc
   2bc74:	mov	sl, #0
   2bc78:	mov	r6, #63	; 0x3f
   2bc7c:	cmp	r0, #5
   2bc80:	beq	2c000 <__assert_fail@plt+0x19550>
   2bc84:	cmp	r0, #2
   2bc88:	bne	2c0a8 <__assert_fail@plt+0x195f8>
   2bc8c:	ldr	r0, [fp, #-76]	; 0xffffffb4
   2bc90:	mov	r9, #0
   2bc94:	tst	r0, #1
   2bc98:	beq	2ba20 <__assert_fail@plt+0x18f70>
   2bc9c:	b	2c378 <__assert_fail@plt+0x198c8>
   2bca0:	mov	r0, #118	; 0x76
   2bca4:	b	2be14 <__assert_fail@plt+0x19364>
   2bca8:	mov	r0, #1
   2bcac:	mov	r6, #39	; 0x27
   2bcb0:	str	r0, [sp, #60]	; 0x3c
   2bcb4:	ldr	r0, [fp, #-68]	; 0xffffffbc
   2bcb8:	cmp	r0, #2
   2bcbc:	bne	2be4c <__assert_fail@plt+0x1939c>
   2bcc0:	ldr	r0, [fp, #-76]	; 0xffffffb4
   2bcc4:	tst	r0, #1
   2bcc8:	bne	2c378 <__assert_fail@plt+0x198c8>
   2bccc:	ldr	r2, [sp, #56]	; 0x38
   2bcd0:	clz	r1, r4
   2bcd4:	mov	sl, #0
   2bcd8:	mov	r9, #1
   2bcdc:	lsr	r1, r1, #5
   2bce0:	cmp	r2, #0
   2bce4:	mov	r0, r2
   2bce8:	movwne	r0, #1
   2bcec:	orrs	r0, r0, r1
   2bcf0:	moveq	r2, r4
   2bcf4:	moveq	r4, r0
   2bcf8:	cmp	r8, r4
   2bcfc:	str	r2, [sp, #56]	; 0x38
   2bd00:	movcc	r0, #39	; 0x27
   2bd04:	strbcc	r0, [r5, r8]
   2bd08:	add	r0, r8, #1
   2bd0c:	cmp	r0, r4
   2bd10:	movcc	r1, #92	; 0x5c
   2bd14:	strbcc	r1, [r5, r0]
   2bd18:	add	r0, r8, #2
   2bd1c:	add	r8, r8, #3
   2bd20:	cmp	r0, r4
   2bd24:	movcc	r1, #39	; 0x27
   2bd28:	strbcc	r1, [r5, r0]
   2bd2c:	mov	r0, #0
   2bd30:	str	r0, [fp, #-56]	; 0xffffffc8
   2bd34:	b	2ba20 <__assert_fail@plt+0x18f70>
   2bd38:	ldr	r0, [sp, #40]	; 0x28
   2bd3c:	str	r4, [sp, #88]	; 0x58
   2bd40:	cmp	r0, #1
   2bd44:	bne	2be54 <__assert_fail@plt+0x193a4>
   2bd48:	str	lr, [sp, #28]
   2bd4c:	bl	12768 <__ctype_b_loc@plt>
   2bd50:	ldr	r0, [r0]
   2bd54:	ldr	ip, [fp, #-80]	; 0xffffffb0
   2bd58:	mov	r2, #1
   2bd5c:	add	r0, r0, r6, lsl #1
   2bd60:	ldrb	r0, [r0, #1]
   2bd64:	ubfx	r9, r0, #6, #1
   2bd68:	ldr	r0, [sp, #52]	; 0x34
   2bd6c:	cmp	r2, #1
   2bd70:	orr	r0, r9, r0
   2bd74:	bhi	2c0b0 <__assert_fail@plt+0x19600>
   2bd78:	tst	r0, #1
   2bd7c:	beq	2c0b0 <__assert_fail@plt+0x19600>
   2bd80:	ldr	lr, [sp, #28]
   2bd84:	ldr	r4, [sp, #88]	; 0x58
   2bd88:	b	2ba20 <__assert_fail@plt+0x18f70>
   2bd8c:	ldr	r1, [sp, #48]	; 0x30
   2bd90:	mov	sl, #0
   2bd94:	mov	r0, #92	; 0x5c
   2bd98:	cmp	r1, #0
   2bd9c:	beq	2be14 <__assert_fail@plt+0x19364>
   2bda0:	mov	r6, #92	; 0x5c
   2bda4:	mov	r9, #0
   2bda8:	cmp	sl, #0
   2bdac:	bne	2bde4 <__assert_fail@plt+0x19334>
   2bdb0:	ldr	r0, [fp, #-56]	; 0xffffffc8
   2bdb4:	tst	r0, #1
   2bdb8:	beq	2bde4 <__assert_fail@plt+0x19334>
   2bdbc:	cmp	r8, r4
   2bdc0:	movcc	r0, #39	; 0x27
   2bdc4:	strbcc	r0, [r5, r8]
   2bdc8:	add	r0, r8, #1
   2bdcc:	add	r8, r8, #2
   2bdd0:	cmp	r0, r4
   2bdd4:	movcc	r1, #39	; 0x27
   2bdd8:	strbcc	r1, [r5, r0]
   2bddc:	mov	r0, #0
   2bde0:	str	r0, [fp, #-56]	; 0xffffffc8
   2bde4:	mov	r1, r9
   2bde8:	mov	r0, r6
   2bdec:	cmp	r8, r4
   2bdf0:	strbcc	r0, [r5, r8]
   2bdf4:	ldr	r0, [fp, #-48]	; 0xffffffd0
   2bdf8:	add	r8, r8, #1
   2bdfc:	and	r0, r0, r1
   2be00:	str	r0, [fp, #-48]	; 0xffffffd0
   2be04:	add	r7, r7, #1
   2be08:	cmn	lr, #1
   2be0c:	bne	2b74c <__assert_fail@plt+0x18c9c>
   2be10:	b	2b758 <__assert_fail@plt+0x18ca8>
   2be14:	ldr	r1, [sp, #84]	; 0x54
   2be18:	mov	sl, #0
   2be1c:	mov	r9, #0
   2be20:	tst	r1, #1
   2be24:	mov	r1, #0
   2be28:	beq	2ba20 <__assert_fail@plt+0x18f70>
   2be2c:	b	2ba68 <__assert_fail@plt+0x18fb8>
   2be30:	ldr	r0, [sp, #36]	; 0x24
   2be34:	mov	r6, #0
   2be38:	mov	sl, #0
   2be3c:	mov	r9, #0
   2be40:	cmp	r0, #0
   2be44:	beq	2ba20 <__assert_fail@plt+0x18f70>
   2be48:	b	2be04 <__assert_fail@plt+0x19354>
   2be4c:	mov	r9, #1
   2be50:	b	2ba20 <__assert_fail@plt+0x18f70>
   2be54:	mov	r0, #0
   2be58:	cmn	lr, #1
   2be5c:	sub	r4, fp, #40	; 0x28
   2be60:	str	r0, [fp, #-36]	; 0xffffffdc
   2be64:	str	r0, [fp, #-40]	; 0xffffffd8
   2be68:	bne	2be7c <__assert_fail@plt+0x193cc>
   2be6c:	mov	r0, ip
   2be70:	bl	127bc <strlen@plt>
   2be74:	ldr	ip, [fp, #-80]	; 0xffffffb0
   2be78:	mov	lr, r0
   2be7c:	ldr	r0, [sp, #72]	; 0x48
   2be80:	mov	r9, #1
   2be84:	mov	r2, #0
   2be88:	str	lr, [sp, #28]
   2be8c:	add	r0, r0, r7
   2be90:	str	r0, [sp, #20]
   2be94:	b	2bed8 <__assert_fail@plt+0x19428>
   2be98:	ldr	r5, [sp, #44]	; 0x2c
   2be9c:	add	r5, r0, r5
   2bea0:	ldr	r0, [fp, #-44]	; 0xffffffd4
   2bea4:	bl	125e8 <iswprint@plt>
   2bea8:	cmp	r0, #0
   2beac:	sub	r4, fp, #40	; 0x28
   2beb0:	movwne	r0, #1
   2beb4:	and	r9, r9, r0
   2beb8:	mov	r0, r4
   2bebc:	bl	1251c <mbsinit@plt>
   2bec0:	mov	r2, r5
   2bec4:	ldr	lr, [sp, #28]
   2bec8:	ldr	r5, [fp, #-84]	; 0xffffffac
   2becc:	ldr	ip, [fp, #-80]	; 0xffffffb0
   2bed0:	cmp	r0, #0
   2bed4:	bne	2bd68 <__assert_fail@plt+0x192b8>
   2bed8:	add	r0, r2, r7
   2bedc:	str	r2, [sp, #44]	; 0x2c
   2bee0:	mov	r3, r4
   2bee4:	add	r1, ip, r0
   2bee8:	str	r0, [sp, #24]
   2beec:	sub	r2, lr, r0
   2bef0:	sub	r0, fp, #44	; 0x2c
   2bef4:	bl	327dc <__assert_fail@plt+0x1fd2c>
   2bef8:	cmp	r0, #0
   2befc:	beq	2c2a0 <__assert_fail@plt+0x197f0>
   2bf00:	cmn	r0, #1
   2bf04:	beq	2c25c <__assert_fail@plt+0x197ac>
   2bf08:	ldr	lr, [sp, #28]
   2bf0c:	cmn	r0, #2
   2bf10:	beq	2c264 <__assert_fail@plt+0x197b4>
   2bf14:	ldr	r2, [sp, #64]	; 0x40
   2bf18:	ldr	r4, [sp, #88]	; 0x58
   2bf1c:	ldr	ip, [sp, #84]	; 0x54
   2bf20:	cmp	r0, #2
   2bf24:	mov	r1, #0
   2bf28:	movwcc	r1, #1
   2bf2c:	eor	r2, r2, #1
   2bf30:	orrs	r1, r2, r1
   2bf34:	bne	2be98 <__assert_fail@plt+0x193e8>
   2bf38:	ldr	r1, [sp, #44]	; 0x2c
   2bf3c:	ldr	r2, [sp, #20]
   2bf40:	add	r1, r2, r1
   2bf44:	sub	r2, r0, #1
   2bf48:	b	2bf58 <__assert_fail@plt+0x194a8>
   2bf4c:	add	r1, r1, #1
   2bf50:	subs	r2, r2, #1
   2bf54:	beq	2be98 <__assert_fail@plt+0x193e8>
   2bf58:	ldrb	r3, [r1]
   2bf5c:	sub	r3, r3, #91	; 0x5b
   2bf60:	cmp	r3, #33	; 0x21
   2bf64:	bhi	2bf4c <__assert_fail@plt+0x1949c>
   2bf68:	add	r5, pc, #0
   2bf6c:	ldr	pc, [r5, r3, lsl #2]
   2bf70:	andeq	ip, r2, r4, asr r3
   2bf74:	andeq	ip, r2, r4, asr r3
   2bf78:	andeq	fp, r2, ip, asr #30
   2bf7c:	andeq	ip, r2, r4, asr r3
   2bf80:	andeq	fp, r2, ip, asr #30
   2bf84:	andeq	ip, r2, r4, asr r3
   2bf88:	andeq	fp, r2, ip, asr #30
   2bf8c:	andeq	fp, r2, ip, asr #30
   2bf90:	andeq	fp, r2, ip, asr #30
   2bf94:	andeq	fp, r2, ip, asr #30
   2bf98:	andeq	fp, r2, ip, asr #30
   2bf9c:	andeq	fp, r2, ip, asr #30
   2bfa0:	andeq	fp, r2, ip, asr #30
   2bfa4:	andeq	fp, r2, ip, asr #30
   2bfa8:	andeq	fp, r2, ip, asr #30
   2bfac:	andeq	fp, r2, ip, asr #30
   2bfb0:	andeq	fp, r2, ip, asr #30
   2bfb4:	andeq	fp, r2, ip, asr #30
   2bfb8:	andeq	fp, r2, ip, asr #30
   2bfbc:	andeq	fp, r2, ip, asr #30
   2bfc0:	andeq	fp, r2, ip, asr #30
   2bfc4:	andeq	fp, r2, ip, asr #30
   2bfc8:	andeq	fp, r2, ip, asr #30
   2bfcc:	andeq	fp, r2, ip, asr #30
   2bfd0:	andeq	fp, r2, ip, asr #30
   2bfd4:	andeq	fp, r2, ip, asr #30
   2bfd8:	andeq	fp, r2, ip, asr #30
   2bfdc:	andeq	fp, r2, ip, asr #30
   2bfe0:	andeq	fp, r2, ip, asr #30
   2bfe4:	andeq	fp, r2, ip, asr #30
   2bfe8:	andeq	fp, r2, ip, asr #30
   2bfec:	andeq	fp, r2, ip, asr #30
   2bff0:	andeq	fp, r2, ip, asr #30
   2bff4:	andeq	ip, r2, r4, asr r3
   2bff8:	mov	r8, r0
   2bffc:	b	2ba20 <__assert_fail@plt+0x18f70>
   2c000:	ldr	r0, [sp, #32]
   2c004:	cmp	r0, #0
   2c008:	beq	2c0a8 <__assert_fail@plt+0x195f8>
   2c00c:	add	r0, r7, #2
   2c010:	cmp	r0, lr
   2c014:	bcs	2c0a8 <__assert_fail@plt+0x195f8>
   2c018:	add	r1, r7, ip
   2c01c:	ldrb	r1, [r1, #1]
   2c020:	cmp	r1, #63	; 0x3f
   2c024:	bne	2c0a8 <__assert_fail@plt+0x195f8>
   2c028:	ldrb	r9, [ip, r0]
   2c02c:	sub	r2, r9, #33	; 0x21
   2c030:	cmp	r2, #29
   2c034:	bhi	2c0a8 <__assert_fail@plt+0x195f8>
   2c038:	movw	r1, #20929	; 0x51c1
   2c03c:	mov	r3, #1
   2c040:	movt	r1, #14336	; 0x3800
   2c044:	tst	r1, r3, lsl r2
   2c048:	beq	2c0a8 <__assert_fail@plt+0x195f8>
   2c04c:	ldr	r1, [fp, #-76]	; 0xffffffb4
   2c050:	tst	r1, #1
   2c054:	bne	2c378 <__assert_fail@plt+0x198c8>
   2c058:	cmp	r8, r4
   2c05c:	add	r2, r8, #1
   2c060:	mov	r6, r9
   2c064:	mov	r7, r0
   2c068:	mov	r9, #0
   2c06c:	movcc	r1, #63	; 0x3f
   2c070:	strbcc	r1, [r5, r8]
   2c074:	cmp	r2, r4
   2c078:	movcc	r1, #34	; 0x22
   2c07c:	strbcc	r1, [r5, r2]
   2c080:	add	r2, r8, #2
   2c084:	cmp	r2, r4
   2c088:	movcc	r1, #34	; 0x22
   2c08c:	strbcc	r1, [r5, r2]
   2c090:	add	r2, r8, #3
   2c094:	add	r8, r8, #4
   2c098:	cmp	r2, r4
   2c09c:	movcc	r1, #63	; 0x3f
   2c0a0:	strbcc	r1, [r5, r2]
   2c0a4:	b	2ba20 <__assert_fail@plt+0x18f70>
   2c0a8:	mov	r9, #0
   2c0ac:	b	2ba20 <__assert_fail@plt+0x18f70>
   2c0b0:	ldr	lr, [sp, #28]
   2c0b4:	ldr	r4, [fp, #-56]	; 0xffffffc8
   2c0b8:	add	r1, r2, r7
   2c0bc:	mov	r2, #0
   2c0c0:	str	r1, [sp, #44]	; 0x2c
   2c0c4:	tst	r0, #1
   2c0c8:	bne	2c1e4 <__assert_fail@plt+0x19734>
   2c0cc:	ldr	r1, [fp, #-76]	; 0xffffffb4
   2c0d0:	tst	r1, #1
   2c0d4:	bne	2c374 <__assert_fail@plt+0x198c4>
   2c0d8:	ldr	r1, [fp, #-68]	; 0xffffffbc
   2c0dc:	subs	r2, r1, #2
   2c0e0:	movwne	r2, #1
   2c0e4:	orr	r2, r2, r4
   2c0e8:	tst	r2, #1
   2c0ec:	bne	2c130 <__assert_fail@plt+0x19680>
   2c0f0:	ldr	r1, [sp, #88]	; 0x58
   2c0f4:	add	r2, r8, #1
   2c0f8:	mov	r4, #1
   2c0fc:	cmp	r8, r1
   2c100:	movcc	r1, #39	; 0x27
   2c104:	strbcc	r1, [r5, r8]
   2c108:	ldr	r1, [sp, #88]	; 0x58
   2c10c:	cmp	r2, r1
   2c110:	movcc	r1, #36	; 0x24
   2c114:	strbcc	r1, [r5, r2]
   2c118:	ldr	r1, [sp, #88]	; 0x58
   2c11c:	add	r2, r8, #2
   2c120:	add	r8, r8, #3
   2c124:	cmp	r2, r1
   2c128:	movcc	r1, #39	; 0x27
   2c12c:	strbcc	r1, [r5, r2]
   2c130:	ldr	r1, [sp, #88]	; 0x58
   2c134:	add	r2, r8, #1
   2c138:	cmp	r8, r1
   2c13c:	movcc	r1, #92	; 0x5c
   2c140:	strbcc	r1, [r5, r8]
   2c144:	ldr	r1, [sp, #88]	; 0x58
   2c148:	cmp	r2, r1
   2c14c:	bcs	2c160 <__assert_fail@plt+0x196b0>
   2c150:	uxtb	r3, r6
   2c154:	mov	r1, #48	; 0x30
   2c158:	orr	r3, r1, r3, lsr #6
   2c15c:	strb	r3, [r5, r2]
   2c160:	ldr	r1, [sp, #88]	; 0x58
   2c164:	add	r2, r8, #2
   2c168:	add	r8, r8, #3
   2c16c:	cmp	r2, r1
   2c170:	lsrcc	r3, r6, #3
   2c174:	movcc	r1, #6
   2c178:	bficc	r3, r1, #3, #29
   2c17c:	mov	r1, #6
   2c180:	bfi	r6, r1, #3, #29
   2c184:	strbcc	r3, [r5, r2]
   2c188:	mov	r2, #1
   2c18c:	b	2c20c <__assert_fail@plt+0x1975c>
   2c190:	ldr	r1, [sp, #88]	; 0x58
   2c194:	ldr	r5, [fp, #-84]	; 0xffffffac
   2c198:	ldr	r4, [sp, #88]	; 0x58
   2c19c:	cmp	r8, r1
   2c1a0:	movcc	r1, #39	; 0x27
   2c1a4:	strbcc	r1, [r5, r8]
   2c1a8:	add	r1, r8, #1
   2c1ac:	add	r8, r8, #2
   2c1b0:	cmp	r1, r4
   2c1b4:	movcc	r4, #39	; 0x27
   2c1b8:	strbcc	r4, [r5, r1]
   2c1bc:	mov	r4, #0
   2c1c0:	ldr	r1, [sp, #88]	; 0x58
   2c1c4:	cmp	r8, r1
   2c1c8:	ldr	r1, [sp, #72]	; 0x48
   2c1cc:	strbcc	r6, [r5, r8]
   2c1d0:	add	r8, r8, #1
   2c1d4:	ldrb	r6, [r1, r7]
   2c1d8:	mov	r7, r3
   2c1dc:	tst	r0, #1
   2c1e0:	beq	2c0cc <__assert_fail@plt+0x1961c>
   2c1e4:	ldr	r1, [fp, #-52]	; 0xffffffcc
   2c1e8:	tst	r1, #1
   2c1ec:	beq	2c204 <__assert_fail@plt+0x19754>
   2c1f0:	ldr	r1, [sp, #88]	; 0x58
   2c1f4:	cmp	r8, r1
   2c1f8:	movcc	r1, #92	; 0x5c
   2c1fc:	strbcc	r1, [r5, r8]
   2c200:	add	r8, r8, #1
   2c204:	mov	r1, #0
   2c208:	str	r1, [fp, #-52]	; 0xffffffcc
   2c20c:	ldr	r1, [sp, #44]	; 0x2c
   2c210:	add	r3, r7, #1
   2c214:	and	sl, r2, #1
   2c218:	cmp	r1, r3
   2c21c:	bls	2c240 <__assert_fail@plt+0x19790>
   2c220:	cmp	sl, #0
   2c224:	mvn	r5, r4
   2c228:	movwne	sl, #1
   2c22c:	orr	r5, r5, sl
   2c230:	tst	r5, #1
   2c234:	beq	2c190 <__assert_fail@plt+0x196e0>
   2c238:	ldr	r5, [fp, #-84]	; 0xffffffac
   2c23c:	b	2c1c0 <__assert_fail@plt+0x19710>
   2c240:	str	r4, [fp, #-56]	; 0xffffffc8
   2c244:	ldr	r4, [sp, #88]	; 0x58
   2c248:	cmp	sl, #0
   2c24c:	movwne	sl, #1
   2c250:	cmp	sl, #0
   2c254:	beq	2bdb0 <__assert_fail@plt+0x19300>
   2c258:	b	2bde4 <__assert_fail@plt+0x19334>
   2c25c:	mov	r9, #0
   2c260:	b	2c2a0 <__assert_fail@plt+0x197f0>
   2c264:	ldr	r0, [sp, #24]
   2c268:	mov	r9, #0
   2c26c:	cmp	lr, r0
   2c270:	bls	2c2a0 <__assert_fail@plt+0x197f0>
   2c274:	ldr	ip, [fp, #-80]	; 0xffffffb0
   2c278:	ldr	r2, [sp, #44]	; 0x2c
   2c27c:	add	r0, ip, r7
   2c280:	ldrb	r1, [r0, r2]
   2c284:	cmp	r1, #0
   2c288:	beq	2bd68 <__assert_fail@plt+0x192b8>
   2c28c:	add	r2, r2, #1
   2c290:	add	r1, r7, r2
   2c294:	cmp	r1, lr
   2c298:	bcc	2c280 <__assert_fail@plt+0x197d0>
   2c29c:	b	2bd68 <__assert_fail@plt+0x192b8>
   2c2a0:	ldr	ip, [fp, #-80]	; 0xffffffb0
   2c2a4:	ldr	r2, [sp, #44]	; 0x2c
   2c2a8:	b	2bd68 <__assert_fail@plt+0x192b8>
   2c2ac:	mov	lr, r7
   2c2b0:	b	2c2b8 <__assert_fail@plt+0x19808>
   2c2b4:	mvn	lr, #0
   2c2b8:	ldr	r1, [fp, #-68]	; 0xffffffbc
   2c2bc:	ldr	r2, [fp, #-76]	; 0xffffffb4
   2c2c0:	eor	r0, r1, #2
   2c2c4:	orr	r0, r0, r8
   2c2c8:	clz	r0, r0
   2c2cc:	lsr	r0, r0, #5
   2c2d0:	tst	r2, r0
   2c2d4:	bne	2c378 <__assert_fail@plt+0x198c8>
   2c2d8:	subs	r0, r1, #2
   2c2dc:	movwne	r0, #1
   2c2e0:	orr	r0, r2, r0
   2c2e4:	tst	r0, #1
   2c2e8:	ldreq	r0, [sp, #60]	; 0x3c
   2c2ec:	eoreq	r0, r0, #1
   2c2f0:	tsteq	r0, #1
   2c2f4:	bne	2c40c <__assert_fail@plt+0x1995c>
   2c2f8:	ldr	r0, [fp, #-48]	; 0xffffffd0
   2c2fc:	mov	sl, lr
   2c300:	tst	r0, #1
   2c304:	bne	2c3d8 <__assert_fail@plt+0x19928>
   2c308:	ldr	r6, [sp, #56]	; 0x38
   2c30c:	mov	r9, #0
   2c310:	cmp	r6, #0
   2c314:	beq	2c404 <__assert_fail@plt+0x19954>
   2c318:	ldr	r0, [sp, #84]	; 0x54
   2c31c:	mov	r1, #0
   2c320:	mov	r7, #2
   2c324:	cmp	r4, #0
   2c328:	str	r1, [fp, #-48]	; 0xffffffd0
   2c32c:	mov	r1, #0
   2c330:	str	r1, [fp, #-76]	; 0xffffffb4
   2c334:	beq	2b4d4 <__assert_fail@plt+0x18a24>
   2c338:	b	2c40c <__assert_fail@plt+0x1995c>
   2c33c:	ldr	ip, [fp, #-80]	; 0xffffffb0
   2c340:	ldr	r1, [fp, #12]
   2c344:	ldr	r2, [fp, #-68]	; 0xffffffbc
   2c348:	mov	lr, r4
   2c34c:	mov	r4, r6
   2c350:	b	2c398 <__assert_fail@plt+0x198e8>
   2c354:	tst	ip, #1
   2c358:	ldr	r5, [fp, #-84]	; 0xffffffac
   2c35c:	ldr	ip, [fp, #-80]	; 0xffffffb0
   2c360:	ldr	r1, [fp, #12]
   2c364:	mov	r0, #2
   2c368:	movwne	r0, #4
   2c36c:	mov	r2, r0
   2c370:	b	2c398 <__assert_fail@plt+0x198e8>
   2c374:	ldr	r4, [sp, #88]	; 0x58
   2c378:	ldr	r1, [sp, #84]	; 0x54
   2c37c:	mov	r0, #2
   2c380:	tst	r1, #1
   2c384:	movwne	r0, #4
   2c388:	ldr	r2, [fp, #-68]	; 0xffffffbc
   2c38c:	ldr	r1, [fp, #12]
   2c390:	cmp	r2, #2
   2c394:	moveq	r2, r0
   2c398:	mov	r0, #0
   2c39c:	bic	r1, r1, #2
   2c3a0:	str	r2, [sp]
   2c3a4:	mov	r2, ip
   2c3a8:	mov	r3, lr
   2c3ac:	str	r0, [sp, #8]
   2c3b0:	ldr	r0, [sp, #76]	; 0x4c
   2c3b4:	str	r1, [sp, #4]
   2c3b8:	mov	r1, r4
   2c3bc:	str	r0, [sp, #12]
   2c3c0:	ldr	r0, [sp, #80]	; 0x50
   2c3c4:	str	r0, [sp, #16]
   2c3c8:	mov	r0, r5
   2c3cc:	bl	2b444 <__assert_fail@plt+0x18994>
   2c3d0:	mov	r8, r0
   2c3d4:	b	2c458 <__assert_fail@plt+0x199a8>
   2c3d8:	mov	r0, #5
   2c3dc:	ldr	r1, [sp, #56]	; 0x38
   2c3e0:	ldr	r2, [fp, #-80]	; 0xffffffb0
   2c3e4:	mov	r3, sl
   2c3e8:	str	r0, [sp]
   2c3ec:	ldr	r0, [fp, #12]
   2c3f0:	str	r0, [sp, #4]
   2c3f4:	ldr	r0, [fp, #16]
   2c3f8:	str	r0, [sp, #8]
   2c3fc:	ldr	r0, [sp, #76]	; 0x4c
   2c400:	b	2c3bc <__assert_fail@plt+0x1990c>
   2c404:	mov	r0, #0
   2c408:	str	r0, [fp, #-76]	; 0xffffffb4
   2c40c:	ldr	r1, [fp, #-88]	; 0xffffffa8
   2c410:	cmp	r1, #0
   2c414:	beq	2c44c <__assert_fail@plt+0x1999c>
   2c418:	ldr	r0, [fp, #-76]	; 0xffffffb4
   2c41c:	tst	r0, #1
   2c420:	bne	2c44c <__assert_fail@plt+0x1999c>
   2c424:	ldrb	r0, [r1]
   2c428:	cmp	r0, #0
   2c42c:	beq	2c44c <__assert_fail@plt+0x1999c>
   2c430:	add	r1, r1, #1
   2c434:	cmp	r8, r4
   2c438:	strbcc	r0, [r5, r8]
   2c43c:	add	r8, r8, #1
   2c440:	ldrb	r0, [r1], #1
   2c444:	cmp	r0, #0
   2c448:	bne	2c434 <__assert_fail@plt+0x19984>
   2c44c:	cmp	r8, r4
   2c450:	movcc	r0, #0
   2c454:	strbcc	r0, [r5, r8]
   2c458:	mov	r0, r8
   2c45c:	sub	sp, fp, #28
   2c460:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2c464:	mov	r0, #4
   2c468:	b	2c388 <__assert_fail@plt+0x198d8>
   2c46c:	bl	12a5c <abort@plt>
   2c470:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2c474:	add	fp, sp, #28
   2c478:	sub	sp, sp, #28
   2c47c:	movw	r5, #60688	; 0xed10
   2c480:	cmp	r2, #0
   2c484:	mov	r4, r1
   2c488:	mov	r7, r0
   2c48c:	str	r0, [sp, #20]
   2c490:	movt	r5, #5
   2c494:	movne	r5, r2
   2c498:	bl	12804 <__errno_location@plt>
   2c49c:	mov	sl, r0
   2c4a0:	ldr	r2, [r5, #40]	; 0x28
   2c4a4:	ldr	r3, [r5, #44]	; 0x2c
   2c4a8:	ldm	r5, {r0, r1}
   2c4ac:	orr	r8, r1, #1
   2c4b0:	add	r9, r5, #8
   2c4b4:	mov	r1, #0
   2c4b8:	ldr	r6, [sl]
   2c4bc:	stm	sp, {r0, r8, r9}
   2c4c0:	mov	r0, #0
   2c4c4:	str	r2, [sp, #12]
   2c4c8:	str	r3, [sp, #16]
   2c4cc:	mov	r2, r7
   2c4d0:	mov	r3, r4
   2c4d4:	str	r6, [sp, #24]
   2c4d8:	mov	r6, r4
   2c4dc:	bl	2b444 <__assert_fail@plt+0x18994>
   2c4e0:	add	r7, r0, #1
   2c4e4:	mov	r0, r7
   2c4e8:	bl	2e068 <__assert_fail@plt+0x1b5b8>
   2c4ec:	mov	r4, r0
   2c4f0:	ldr	r0, [r5]
   2c4f4:	ldr	r2, [r5, #44]	; 0x2c
   2c4f8:	ldr	r1, [r5, #40]	; 0x28
   2c4fc:	mov	r3, r6
   2c500:	stm	sp, {r0, r8, r9}
   2c504:	str	r2, [sp, #16]
   2c508:	ldr	r2, [sp, #20]
   2c50c:	str	r1, [sp, #12]
   2c510:	mov	r0, r4
   2c514:	mov	r1, r7
   2c518:	bl	2b444 <__assert_fail@plt+0x18994>
   2c51c:	ldr	r0, [sp, #24]
   2c520:	str	r0, [sl]
   2c524:	mov	r0, r4
   2c528:	sub	sp, fp, #28
   2c52c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2c530:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2c534:	add	fp, sp, #28
   2c538:	sub	sp, sp, #36	; 0x24
   2c53c:	movw	r8, #60688	; 0xed10
   2c540:	cmp	r3, #0
   2c544:	mov	r4, r2
   2c548:	str	r2, [sp, #24]
   2c54c:	mov	r5, r1
   2c550:	mov	r6, r0
   2c554:	str	r0, [sp, #20]
   2c558:	movt	r8, #5
   2c55c:	movne	r8, r3
   2c560:	bl	12804 <__errno_location@plt>
   2c564:	str	r0, [sp, #28]
   2c568:	ldr	r1, [r8, #40]	; 0x28
   2c56c:	ldr	r2, [r8, #44]	; 0x2c
   2c570:	ldr	r7, [r0]
   2c574:	cmp	r4, #0
   2c578:	add	sl, r8, #8
   2c57c:	mov	r0, #0
   2c580:	ldm	r8, {r3, r9}
   2c584:	orreq	r9, r9, #1
   2c588:	stm	sp, {r3, r9, sl}
   2c58c:	str	r1, [sp, #12]
   2c590:	str	r2, [sp, #16]
   2c594:	mov	r1, #0
   2c598:	mov	r2, r6
   2c59c:	mov	r3, r5
   2c5a0:	str	r7, [sp, #32]
   2c5a4:	mov	r7, r5
   2c5a8:	bl	2b444 <__assert_fail@plt+0x18994>
   2c5ac:	add	r4, r0, #1
   2c5b0:	mov	r5, r0
   2c5b4:	mov	r0, r4
   2c5b8:	bl	2e068 <__assert_fail@plt+0x1b5b8>
   2c5bc:	mov	r6, r0
   2c5c0:	ldr	r0, [r8]
   2c5c4:	ldr	r2, [r8, #44]	; 0x2c
   2c5c8:	ldr	r1, [r8, #40]	; 0x28
   2c5cc:	mov	r3, r7
   2c5d0:	stm	sp, {r0, r9, sl}
   2c5d4:	str	r2, [sp, #16]
   2c5d8:	ldr	r2, [sp, #20]
   2c5dc:	str	r1, [sp, #12]
   2c5e0:	mov	r0, r6
   2c5e4:	mov	r1, r4
   2c5e8:	bl	2b444 <__assert_fail@plt+0x18994>
   2c5ec:	ldr	r0, [sp, #24]
   2c5f0:	ldr	r1, [sp, #32]
   2c5f4:	ldr	r2, [sp, #28]
   2c5f8:	cmp	r0, #0
   2c5fc:	str	r1, [r2]
   2c600:	strne	r5, [r0]
   2c604:	mov	r0, r6
   2c608:	sub	sp, fp, #28
   2c60c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2c610:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   2c614:	add	fp, sp, #24
   2c618:	movw	r5, #58620	; 0xe4fc
   2c61c:	movw	r8, #58616	; 0xe4f8
   2c620:	movt	r5, #5
   2c624:	movt	r8, #5
   2c628:	ldr	r0, [r5]
   2c62c:	ldr	r4, [r8]
   2c630:	cmp	r0, #2
   2c634:	blt	2c660 <__assert_fail@plt+0x19bb0>
   2c638:	add	r7, r4, #12
   2c63c:	mov	r6, #0
   2c640:	ldr	r0, [r7, r6, lsl #3]
   2c644:	bl	30174 <__assert_fail@plt+0x1d6c4>
   2c648:	ldr	r1, [r5]
   2c64c:	add	r2, r6, #2
   2c650:	add	r0, r6, #1
   2c654:	mov	r6, r0
   2c658:	cmp	r2, r1
   2c65c:	blt	2c640 <__assert_fail@plt+0x19b90>
   2c660:	ldr	r0, [r4, #4]
   2c664:	movw	r9, #60736	; 0xed40
   2c668:	movw	r7, #58624	; 0xe500
   2c66c:	movt	r9, #5
   2c670:	movt	r7, #5
   2c674:	cmp	r0, r9
   2c678:	beq	2c688 <__assert_fail@plt+0x19bd8>
   2c67c:	bl	30174 <__assert_fail@plt+0x1d6c4>
   2c680:	mov	r0, #256	; 0x100
   2c684:	stm	r7, {r0, r9}
   2c688:	cmp	r4, r7
   2c68c:	beq	2c69c <__assert_fail@plt+0x19bec>
   2c690:	mov	r0, r4
   2c694:	bl	30174 <__assert_fail@plt+0x1d6c4>
   2c698:	str	r7, [r8]
   2c69c:	mov	r0, #1
   2c6a0:	str	r0, [r5]
   2c6a4:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   2c6a8:	movw	r3, #60688	; 0xed10
   2c6ac:	mvn	r2, #0
   2c6b0:	movt	r3, #5
   2c6b4:	b	2c6b8 <__assert_fail@plt+0x19c08>
   2c6b8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2c6bc:	add	fp, sp, #28
   2c6c0:	sub	sp, sp, #44	; 0x2c
   2c6c4:	mov	r7, r3
   2c6c8:	str	r2, [sp, #36]	; 0x24
   2c6cc:	str	r1, [sp, #32]
   2c6d0:	mov	r5, r0
   2c6d4:	bl	12804 <__errno_location@plt>
   2c6d8:	cmp	r5, #0
   2c6dc:	bmi	2c84c <__assert_fail@plt+0x19d9c>
   2c6e0:	cmn	r5, #-2147483647	; 0x80000001
   2c6e4:	beq	2c84c <__assert_fail@plt+0x19d9c>
   2c6e8:	movw	r8, #58620	; 0xe4fc
   2c6ec:	movw	r4, #58616	; 0xe4f8
   2c6f0:	str	r0, [sp, #28]
   2c6f4:	ldr	r0, [r0]
   2c6f8:	movt	r8, #5
   2c6fc:	movt	r4, #5
   2c700:	ldr	r1, [r8]
   2c704:	ldr	r6, [r4]
   2c708:	str	r0, [sp, #24]
   2c70c:	cmp	r1, r5
   2c710:	ble	2c71c <__assert_fail@plt+0x19c6c>
   2c714:	mov	sl, r6
   2c718:	b	2c788 <__assert_fail@plt+0x19cd8>
   2c71c:	movw	r9, #58624	; 0xe500
   2c720:	mov	r0, #8
   2c724:	str	r1, [fp, #-32]	; 0xffffffe0
   2c728:	sub	r1, r5, r1
   2c72c:	mvn	r3, #-2147483648	; 0x80000000
   2c730:	movt	r9, #5
   2c734:	str	r0, [sp]
   2c738:	add	r2, r1, #1
   2c73c:	sub	r1, fp, #32
   2c740:	subs	r0, r6, r9
   2c744:	movne	r0, r6
   2c748:	bl	2e268 <__assert_fail@plt+0x1b7b8>
   2c74c:	mov	sl, r0
   2c750:	cmp	r6, r9
   2c754:	str	r0, [r4]
   2c758:	bne	2c764 <__assert_fail@plt+0x19cb4>
   2c75c:	ldrd	r0, [r9]
   2c760:	stm	sl, {r0, r1}
   2c764:	ldr	r1, [r8]
   2c768:	ldr	r2, [fp, #-32]	; 0xffffffe0
   2c76c:	add	r0, sl, r1, lsl #3
   2c770:	sub	r1, r2, r1
   2c774:	lsl	r2, r1, #3
   2c778:	mov	r1, #0
   2c77c:	bl	12834 <memset@plt>
   2c780:	ldr	r0, [fp, #-32]	; 0xffffffe0
   2c784:	str	r0, [r8]
   2c788:	mov	r9, sl
   2c78c:	ldm	r7, {r0, r1}
   2c790:	orr	r8, r1, #1
   2c794:	add	r1, r7, #8
   2c798:	ldr	r2, [r7, #40]	; 0x28
   2c79c:	ldr	r3, [r7, #44]	; 0x2c
   2c7a0:	ldr	r6, [r9, r5, lsl #3]!
   2c7a4:	str	r1, [sp, #20]
   2c7a8:	ldr	r4, [r9, #4]!
   2c7ac:	stm	sp, {r0, r8}
   2c7b0:	add	r0, sp, #8
   2c7b4:	stm	r0, {r1, r2, r3}
   2c7b8:	ldr	r2, [sp, #32]
   2c7bc:	ldr	r3, [sp, #36]	; 0x24
   2c7c0:	mov	r1, r6
   2c7c4:	mov	r0, r4
   2c7c8:	bl	2b444 <__assert_fail@plt+0x18994>
   2c7cc:	cmp	r6, r0
   2c7d0:	bhi	2c834 <__assert_fail@plt+0x19d84>
   2c7d4:	add	r6, r0, #1
   2c7d8:	movw	r0, #60736	; 0xed40
   2c7dc:	movt	r0, #5
   2c7e0:	str	r6, [sl, r5, lsl #3]
   2c7e4:	cmp	r4, r0
   2c7e8:	beq	2c7f4 <__assert_fail@plt+0x19d44>
   2c7ec:	mov	r0, r4
   2c7f0:	bl	30174 <__assert_fail@plt+0x1d6c4>
   2c7f4:	mov	r0, r6
   2c7f8:	bl	2e068 <__assert_fail@plt+0x1b5b8>
   2c7fc:	str	r0, [r9]
   2c800:	mov	r4, r0
   2c804:	add	r3, sp, #8
   2c808:	ldr	r0, [r7]
   2c80c:	ldr	r1, [r7, #40]	; 0x28
   2c810:	ldr	r2, [r7, #44]	; 0x2c
   2c814:	stm	sp, {r0, r8}
   2c818:	ldr	r0, [sp, #20]
   2c81c:	stm	r3, {r0, r1, r2}
   2c820:	ldr	r2, [sp, #32]
   2c824:	ldr	r3, [sp, #36]	; 0x24
   2c828:	mov	r0, r4
   2c82c:	mov	r1, r6
   2c830:	bl	2b444 <__assert_fail@plt+0x18994>
   2c834:	ldr	r0, [sp, #28]
   2c838:	ldr	r1, [sp, #24]
   2c83c:	str	r1, [r0]
   2c840:	mov	r0, r4
   2c844:	sub	sp, fp, #28
   2c848:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2c84c:	bl	12a5c <abort@plt>
   2c850:	movw	r3, #60688	; 0xed10
   2c854:	movt	r3, #5
   2c858:	b	2c6b8 <__assert_fail@plt+0x19c08>
   2c85c:	movw	r3, #60688	; 0xed10
   2c860:	mov	r1, r0
   2c864:	mov	r0, #0
   2c868:	mvn	r2, #0
   2c86c:	movt	r3, #5
   2c870:	b	2c6b8 <__assert_fail@plt+0x19c08>
   2c874:	movw	r3, #60688	; 0xed10
   2c878:	mov	r2, r1
   2c87c:	mov	r1, r0
   2c880:	mov	r0, #0
   2c884:	movt	r3, #5
   2c888:	b	2c6b8 <__assert_fail@plt+0x19c08>
   2c88c:	push	{fp, lr}
   2c890:	mov	fp, sp
   2c894:	sub	sp, sp, #48	; 0x30
   2c898:	vmov.i32	q8, #0	; 0x00000000
   2c89c:	mov	ip, #32
   2c8a0:	mov	r3, sp
   2c8a4:	mov	lr, r2
   2c8a8:	cmp	r1, #10
   2c8ac:	add	r2, r3, #16
   2c8b0:	vst1.64	{d16-d17}, [r3], ip
   2c8b4:	vst1.64	{d16-d17}, [r2]
   2c8b8:	vst1.64	{d16-d17}, [r3]
   2c8bc:	beq	2c8dc <__assert_fail@plt+0x19e2c>
   2c8c0:	str	r1, [sp]
   2c8c4:	mov	r3, sp
   2c8c8:	mov	r1, lr
   2c8cc:	mvn	r2, #0
   2c8d0:	bl	2c6b8 <__assert_fail@plt+0x19c08>
   2c8d4:	mov	sp, fp
   2c8d8:	pop	{fp, pc}
   2c8dc:	bl	12a5c <abort@plt>
   2c8e0:	push	{r4, sl, fp, lr}
   2c8e4:	add	fp, sp, #8
   2c8e8:	sub	sp, sp, #48	; 0x30
   2c8ec:	vmov.i32	q8, #0	; 0x00000000
   2c8f0:	mov	ip, r3
   2c8f4:	mov	r3, sp
   2c8f8:	mov	lr, #32
   2c8fc:	cmp	r1, #10
   2c900:	add	r4, r3, #16
   2c904:	vst1.64	{d16-d17}, [r3], lr
   2c908:	vst1.64	{d16-d17}, [r4]
   2c90c:	vst1.64	{d16-d17}, [r3]
   2c910:	beq	2c930 <__assert_fail@plt+0x19e80>
   2c914:	str	r1, [sp]
   2c918:	mov	r1, r2
   2c91c:	mov	r3, sp
   2c920:	mov	r2, ip
   2c924:	bl	2c6b8 <__assert_fail@plt+0x19c08>
   2c928:	sub	sp, fp, #8
   2c92c:	pop	{r4, sl, fp, pc}
   2c930:	bl	12a5c <abort@plt>
   2c934:	push	{fp, lr}
   2c938:	mov	fp, sp
   2c93c:	sub	sp, sp, #48	; 0x30
   2c940:	vmov.i32	q8, #0	; 0x00000000
   2c944:	mov	r3, sp
   2c948:	mov	ip, #32
   2c94c:	cmp	r0, #10
   2c950:	add	r2, r3, #16
   2c954:	vst1.64	{d16-d17}, [r3], ip
   2c958:	vst1.64	{d16-d17}, [r2]
   2c95c:	vst1.64	{d16-d17}, [r3]
   2c960:	beq	2c980 <__assert_fail@plt+0x19ed0>
   2c964:	str	r0, [sp]
   2c968:	mov	r3, sp
   2c96c:	mov	r0, #0
   2c970:	mvn	r2, #0
   2c974:	bl	2c6b8 <__assert_fail@plt+0x19c08>
   2c978:	mov	sp, fp
   2c97c:	pop	{fp, pc}
   2c980:	bl	12a5c <abort@plt>
   2c984:	push	{fp, lr}
   2c988:	mov	fp, sp
   2c98c:	sub	sp, sp, #48	; 0x30
   2c990:	vmov.i32	q8, #0	; 0x00000000
   2c994:	mov	r3, sp
   2c998:	mov	ip, #32
   2c99c:	cmp	r0, #10
   2c9a0:	add	lr, r3, #16
   2c9a4:	vst1.64	{d16-d17}, [r3], ip
   2c9a8:	vst1.64	{d16-d17}, [lr]
   2c9ac:	vst1.64	{d16-d17}, [r3]
   2c9b0:	beq	2c9cc <__assert_fail@plt+0x19f1c>
   2c9b4:	str	r0, [sp]
   2c9b8:	mov	r3, sp
   2c9bc:	mov	r0, #0
   2c9c0:	bl	2c6b8 <__assert_fail@plt+0x19c08>
   2c9c4:	mov	sp, fp
   2c9c8:	pop	{fp, pc}
   2c9cc:	bl	12a5c <abort@plt>
   2c9d0:	push	{r4, sl, fp, lr}
   2c9d4:	add	fp, sp, #8
   2c9d8:	sub	sp, sp, #48	; 0x30
   2c9dc:	mov	lr, r0
   2c9e0:	movw	r0, #60688	; 0xed10
   2c9e4:	mov	ip, r1
   2c9e8:	mov	r1, #32
   2c9ec:	mov	r4, #1
   2c9f0:	movt	r0, #5
   2c9f4:	add	r3, r0, #16
   2c9f8:	vld1.64	{d16-d17}, [r0], r1
   2c9fc:	vld1.64	{d20-d21}, [r0]
   2ca00:	vld1.64	{d18-d19}, [r3]
   2ca04:	mov	r3, sp
   2ca08:	add	r0, r3, #32
   2ca0c:	add	r1, r3, #16
   2ca10:	vst1.64	{d20-d21}, [r0]
   2ca14:	mov	r0, #28
   2ca18:	vst1.64	{d18-d19}, [r1]
   2ca1c:	mov	r1, r3
   2ca20:	and	r0, r0, r2, lsr #3
   2ca24:	and	r2, r2, #31
   2ca28:	vst1.64	{d16-d17}, [r1], r0
   2ca2c:	ldr	r0, [r1, #8]
   2ca30:	bic	r4, r4, r0, lsr r2
   2ca34:	eor	r0, r0, r4, lsl r2
   2ca38:	mov	r2, ip
   2ca3c:	str	r0, [r1, #8]
   2ca40:	mov	r0, #0
   2ca44:	mov	r1, lr
   2ca48:	bl	2c6b8 <__assert_fail@plt+0x19c08>
   2ca4c:	sub	sp, fp, #8
   2ca50:	pop	{r4, sl, fp, pc}
   2ca54:	push	{fp, lr}
   2ca58:	mov	fp, sp
   2ca5c:	sub	sp, sp, #48	; 0x30
   2ca60:	mov	ip, r0
   2ca64:	movw	r0, #60688	; 0xed10
   2ca68:	mov	r2, #32
   2ca6c:	movt	r0, #5
   2ca70:	add	r3, r0, #16
   2ca74:	vld1.64	{d16-d17}, [r0], r2
   2ca78:	vld1.64	{d20-d21}, [r0]
   2ca7c:	vld1.64	{d18-d19}, [r3]
   2ca80:	mov	r3, sp
   2ca84:	add	r0, r3, #32
   2ca88:	add	r2, r3, #16
   2ca8c:	vst1.64	{d20-d21}, [r0]
   2ca90:	mov	r0, #28
   2ca94:	vst1.64	{d18-d19}, [r2]
   2ca98:	mov	r2, r3
   2ca9c:	and	r0, r0, r1, lsr #3
   2caa0:	and	r1, r1, #31
   2caa4:	vst1.64	{d16-d17}, [r2], r0
   2caa8:	mov	r0, #1
   2caac:	ldr	lr, [r2, #8]
   2cab0:	bic	r0, r0, lr, lsr r1
   2cab4:	eor	r0, lr, r0, lsl r1
   2cab8:	mov	r1, ip
   2cabc:	str	r0, [r2, #8]
   2cac0:	mov	r0, #0
   2cac4:	mvn	r2, #0
   2cac8:	bl	2c6b8 <__assert_fail@plt+0x19c08>
   2cacc:	mov	sp, fp
   2cad0:	pop	{fp, pc}
   2cad4:	push	{fp, lr}
   2cad8:	mov	fp, sp
   2cadc:	sub	sp, sp, #48	; 0x30
   2cae0:	mov	r1, r0
   2cae4:	movw	r0, #60688	; 0xed10
   2cae8:	mov	r3, #32
   2caec:	movt	r0, #5
   2caf0:	add	r2, r0, #16
   2caf4:	vld1.64	{d16-d17}, [r0], r3
   2caf8:	mov	r3, sp
   2cafc:	vld1.64	{d18-d19}, [r2]
   2cb00:	vld1.64	{d20-d21}, [r0]
   2cb04:	add	r2, r3, #16
   2cb08:	add	r0, r3, #32
   2cb0c:	vst1.64	{d18-d19}, [r2]
   2cb10:	vst1.64	{d20-d21}, [r0]
   2cb14:	mov	r0, #12
   2cb18:	mov	r2, r3
   2cb1c:	vst1.64	{d16-d17}, [r2], r0
   2cb20:	ldr	r0, [r2]
   2cb24:	orr	r0, r0, #67108864	; 0x4000000
   2cb28:	str	r0, [r2]
   2cb2c:	mov	r0, #0
   2cb30:	mvn	r2, #0
   2cb34:	bl	2c6b8 <__assert_fail@plt+0x19c08>
   2cb38:	mov	sp, fp
   2cb3c:	pop	{fp, pc}
   2cb40:	push	{fp, lr}
   2cb44:	mov	fp, sp
   2cb48:	sub	sp, sp, #48	; 0x30
   2cb4c:	mov	ip, r1
   2cb50:	mov	r1, r0
   2cb54:	movw	r0, #60688	; 0xed10
   2cb58:	mov	r2, #32
   2cb5c:	movt	r0, #5
   2cb60:	add	r3, r0, #16
   2cb64:	vld1.64	{d16-d17}, [r0], r2
   2cb68:	vld1.64	{d18-d19}, [r3]
   2cb6c:	vld1.64	{d20-d21}, [r0]
   2cb70:	mov	r3, sp
   2cb74:	add	r2, r3, #16
   2cb78:	add	r0, r3, #32
   2cb7c:	vst1.64	{d18-d19}, [r2]
   2cb80:	vst1.64	{d20-d21}, [r0]
   2cb84:	mov	r0, #12
   2cb88:	mov	r2, r3
   2cb8c:	vst1.64	{d16-d17}, [r2], r0
   2cb90:	ldr	r0, [r2]
   2cb94:	orr	r0, r0, #67108864	; 0x4000000
   2cb98:	str	r0, [r2]
   2cb9c:	mov	r0, #0
   2cba0:	mov	r2, ip
   2cba4:	bl	2c6b8 <__assert_fail@plt+0x19c08>
   2cba8:	mov	sp, fp
   2cbac:	pop	{fp, pc}
   2cbb0:	push	{r4, sl, fp, lr}
   2cbb4:	add	fp, sp, #8
   2cbb8:	sub	sp, sp, #96	; 0x60
   2cbbc:	vmov.i32	q8, #0	; 0x00000000
   2cbc0:	mov	ip, r2
   2cbc4:	mov	r2, sp
   2cbc8:	mov	r4, #28
   2cbcc:	cmp	r1, #10
   2cbd0:	mov	r3, r2
   2cbd4:	add	lr, r2, #16
   2cbd8:	vst1.64	{d16-d17}, [r3], r4
   2cbdc:	vst1.64	{d16-d17}, [lr]
   2cbe0:	vst1.32	{d16-d17}, [r3]
   2cbe4:	beq	2cc34 <__assert_fail@plt+0x1a184>
   2cbe8:	vld1.64	{d16-d17}, [r2], r4
   2cbec:	vld1.64	{d18-d19}, [lr]
   2cbf0:	add	r3, sp, #48	; 0x30
   2cbf4:	vld1.32	{d20-d21}, [r2]
   2cbf8:	add	r2, r3, #20
   2cbfc:	add	r4, r3, #4
   2cc00:	vst1.32	{d18-d19}, [r2]
   2cc04:	add	r2, r3, #32
   2cc08:	vst1.32	{d16-d17}, [r4]
   2cc0c:	vst1.32	{d20-d21}, [r2]
   2cc10:	str	r1, [sp, #48]	; 0x30
   2cc14:	mvn	r2, #0
   2cc18:	ldr	r1, [sp, #60]	; 0x3c
   2cc1c:	orr	r1, r1, #67108864	; 0x4000000
   2cc20:	str	r1, [sp, #60]	; 0x3c
   2cc24:	mov	r1, ip
   2cc28:	bl	2c6b8 <__assert_fail@plt+0x19c08>
   2cc2c:	sub	sp, fp, #8
   2cc30:	pop	{r4, sl, fp, pc}
   2cc34:	bl	12a5c <abort@plt>
   2cc38:	push	{r4, r5, r6, sl, fp, lr}
   2cc3c:	add	fp, sp, #16
   2cc40:	sub	sp, sp, #48	; 0x30
   2cc44:	mov	ip, r3
   2cc48:	movw	r3, #60688	; 0xed10
   2cc4c:	mov	r6, #32
   2cc50:	cmp	r1, #0
   2cc54:	mov	r4, sp
   2cc58:	movt	r3, #5
   2cc5c:	cmpne	r2, #0
   2cc60:	add	r5, r4, #16
   2cc64:	add	lr, r3, #16
   2cc68:	vld1.64	{d16-d17}, [r3], r6
   2cc6c:	vld1.64	{d18-d19}, [lr]
   2cc70:	vld1.64	{d20-d21}, [r3]
   2cc74:	mov	r3, #10
   2cc78:	vst1.64	{d16-d17}, [r4], r6
   2cc7c:	vst1.64	{d18-d19}, [r5]
   2cc80:	vst1.64	{d20-d21}, [r4]
   2cc84:	str	r3, [sp]
   2cc88:	bne	2cc90 <__assert_fail@plt+0x1a1e0>
   2cc8c:	bl	12a5c <abort@plt>
   2cc90:	str	r2, [sp, #44]	; 0x2c
   2cc94:	str	r1, [sp, #40]	; 0x28
   2cc98:	mov	r3, sp
   2cc9c:	mov	r1, ip
   2cca0:	mvn	r2, #0
   2cca4:	bl	2c6b8 <__assert_fail@plt+0x19c08>
   2cca8:	sub	sp, fp, #16
   2ccac:	pop	{r4, r5, r6, sl, fp, pc}
   2ccb0:	push	{r4, r5, r6, sl, fp, lr}
   2ccb4:	add	fp, sp, #16
   2ccb8:	sub	sp, sp, #48	; 0x30
   2ccbc:	mov	lr, r3
   2ccc0:	movw	r3, #60688	; 0xed10
   2ccc4:	mov	r6, #32
   2ccc8:	cmp	r1, #0
   2cccc:	mov	r4, sp
   2ccd0:	movt	r3, #5
   2ccd4:	cmpne	r2, #0
   2ccd8:	add	r5, r4, #16
   2ccdc:	add	ip, r3, #16
   2cce0:	vld1.64	{d16-d17}, [r3], r6
   2cce4:	vld1.64	{d18-d19}, [ip]
   2cce8:	vld1.64	{d20-d21}, [r3]
   2ccec:	mov	r3, #10
   2ccf0:	vst1.64	{d16-d17}, [r4], r6
   2ccf4:	vst1.64	{d18-d19}, [r5]
   2ccf8:	vst1.64	{d20-d21}, [r4]
   2ccfc:	str	r3, [sp]
   2cd00:	bne	2cd08 <__assert_fail@plt+0x1a258>
   2cd04:	bl	12a5c <abort@plt>
   2cd08:	ldr	ip, [fp, #8]
   2cd0c:	str	r2, [sp, #44]	; 0x2c
   2cd10:	str	r1, [sp, #40]	; 0x28
   2cd14:	mov	r3, sp
   2cd18:	mov	r1, lr
   2cd1c:	mov	r2, ip
   2cd20:	bl	2c6b8 <__assert_fail@plt+0x19c08>
   2cd24:	sub	sp, fp, #16
   2cd28:	pop	{r4, r5, r6, sl, fp, pc}
   2cd2c:	push	{r4, sl, fp, lr}
   2cd30:	add	fp, sp, #8
   2cd34:	sub	sp, sp, #48	; 0x30
   2cd38:	movw	r3, #60688	; 0xed10
   2cd3c:	mov	lr, #32
   2cd40:	mov	ip, r2
   2cd44:	cmp	r0, #0
   2cd48:	movt	r3, #5
   2cd4c:	cmpne	r1, #0
   2cd50:	add	r2, r3, #16
   2cd54:	vld1.64	{d16-d17}, [r3], lr
   2cd58:	vld1.64	{d20-d21}, [r3]
   2cd5c:	vld1.64	{d18-d19}, [r2]
   2cd60:	mov	r2, sp
   2cd64:	add	r4, r2, #16
   2cd68:	vst1.64	{d16-d17}, [r2], lr
   2cd6c:	vst1.64	{d20-d21}, [r2]
   2cd70:	mov	r2, #10
   2cd74:	vst1.64	{d18-d19}, [r4]
   2cd78:	str	r2, [sp]
   2cd7c:	bne	2cd84 <__assert_fail@plt+0x1a2d4>
   2cd80:	bl	12a5c <abort@plt>
   2cd84:	str	r1, [sp, #44]	; 0x2c
   2cd88:	str	r0, [sp, #40]	; 0x28
   2cd8c:	mov	r3, sp
   2cd90:	mov	r0, #0
   2cd94:	mov	r1, ip
   2cd98:	mvn	r2, #0
   2cd9c:	bl	2c6b8 <__assert_fail@plt+0x19c08>
   2cda0:	sub	sp, fp, #8
   2cda4:	pop	{r4, sl, fp, pc}
   2cda8:	push	{r4, r5, fp, lr}
   2cdac:	add	fp, sp, #8
   2cdb0:	sub	sp, sp, #48	; 0x30
   2cdb4:	mov	ip, r3
   2cdb8:	movw	r3, #60688	; 0xed10
   2cdbc:	mov	r4, #32
   2cdc0:	mov	lr, r2
   2cdc4:	cmp	r0, #0
   2cdc8:	movt	r3, #5
   2cdcc:	cmpne	r1, #0
   2cdd0:	add	r2, r3, #16
   2cdd4:	vld1.64	{d16-d17}, [r3], r4
   2cdd8:	vld1.64	{d20-d21}, [r3]
   2cddc:	vld1.64	{d18-d19}, [r2]
   2cde0:	mov	r2, sp
   2cde4:	add	r5, r2, #16
   2cde8:	vst1.64	{d16-d17}, [r2], r4
   2cdec:	vst1.64	{d20-d21}, [r2]
   2cdf0:	mov	r2, #10
   2cdf4:	vst1.64	{d18-d19}, [r5]
   2cdf8:	str	r2, [sp]
   2cdfc:	bne	2ce04 <__assert_fail@plt+0x1a354>
   2ce00:	bl	12a5c <abort@plt>
   2ce04:	str	r1, [sp, #44]	; 0x2c
   2ce08:	str	r0, [sp, #40]	; 0x28
   2ce0c:	mov	r3, sp
   2ce10:	mov	r0, #0
   2ce14:	mov	r1, lr
   2ce18:	mov	r2, ip
   2ce1c:	bl	2c6b8 <__assert_fail@plt+0x19c08>
   2ce20:	sub	sp, fp, #8
   2ce24:	pop	{r4, r5, fp, pc}
   2ce28:	movw	r3, #58632	; 0xe508
   2ce2c:	movt	r3, #5
   2ce30:	b	2c6b8 <__assert_fail@plt+0x19c08>
   2ce34:	movw	r3, #58632	; 0xe508
   2ce38:	mov	r2, r1
   2ce3c:	mov	r1, r0
   2ce40:	mov	r0, #0
   2ce44:	movt	r3, #5
   2ce48:	b	2c6b8 <__assert_fail@plt+0x19c08>
   2ce4c:	movw	r3, #58632	; 0xe508
   2ce50:	mvn	r2, #0
   2ce54:	movt	r3, #5
   2ce58:	b	2c6b8 <__assert_fail@plt+0x19c08>
   2ce5c:	movw	r3, #58632	; 0xe508
   2ce60:	mov	r1, r0
   2ce64:	mov	r0, #0
   2ce68:	mvn	r2, #0
   2ce6c:	movt	r3, #5
   2ce70:	b	2c6b8 <__assert_fail@plt+0x19c08>
   2ce74:	push	{r4, r5, fp, lr}
   2ce78:	add	fp, sp, #8
   2ce7c:	mov	r5, r0
   2ce80:	mov	r4, r1
   2ce84:	mov	r0, #0
   2ce88:	mov	r2, #5
   2ce8c:	mov	r1, r5
   2ce90:	bl	12564 <dcgettext@plt>
   2ce94:	cmp	r0, r5
   2ce98:	popne	{r4, r5, fp, pc}
   2ce9c:	bl	46e4c <__assert_fail@plt+0x3439c>
   2cea0:	ldrb	r1, [r0]
   2cea4:	and	r1, r1, #223	; 0xdf
   2cea8:	cmp	r1, #71	; 0x47
   2ceac:	beq	2cf14 <__assert_fail@plt+0x1a464>
   2ceb0:	cmp	r1, #85	; 0x55
   2ceb4:	bne	2cf6c <__assert_fail@plt+0x1a4bc>
   2ceb8:	ldrb	r1, [r0, #1]
   2cebc:	and	r1, r1, #223	; 0xdf
   2cec0:	cmp	r1, #84	; 0x54
   2cec4:	bne	2cf6c <__assert_fail@plt+0x1a4bc>
   2cec8:	ldrb	r1, [r0, #2]
   2cecc:	and	r1, r1, #223	; 0xdf
   2ced0:	cmp	r1, #70	; 0x46
   2ced4:	bne	2cf6c <__assert_fail@plt+0x1a4bc>
   2ced8:	ldrb	r1, [r0, #3]
   2cedc:	cmp	r1, #45	; 0x2d
   2cee0:	bne	2cf6c <__assert_fail@plt+0x1a4bc>
   2cee4:	ldrb	r1, [r0, #4]
   2cee8:	cmp	r1, #56	; 0x38
   2ceec:	bne	2cf6c <__assert_fail@plt+0x1a4bc>
   2cef0:	ldrb	r0, [r0, #5]
   2cef4:	cmp	r0, #0
   2cef8:	bne	2cf6c <__assert_fail@plt+0x1a4bc>
   2cefc:	ldrb	r1, [r5]
   2cf00:	movw	r2, #53814	; 0xd236
   2cf04:	movw	r0, #53818	; 0xd23a
   2cf08:	movt	r2, #4
   2cf0c:	movt	r0, #4
   2cf10:	b	2cf9c <__assert_fail@plt+0x1a4ec>
   2cf14:	ldrb	r1, [r0, #1]
   2cf18:	and	r1, r1, #223	; 0xdf
   2cf1c:	cmp	r1, #66	; 0x42
   2cf20:	bne	2cf6c <__assert_fail@plt+0x1a4bc>
   2cf24:	ldrb	r1, [r0, #2]
   2cf28:	cmp	r1, #49	; 0x31
   2cf2c:	bne	2cf6c <__assert_fail@plt+0x1a4bc>
   2cf30:	ldrb	r1, [r0, #3]
   2cf34:	cmp	r1, #56	; 0x38
   2cf38:	bne	2cf6c <__assert_fail@plt+0x1a4bc>
   2cf3c:	ldrb	r1, [r0, #4]
   2cf40:	cmp	r1, #48	; 0x30
   2cf44:	bne	2cf6c <__assert_fail@plt+0x1a4bc>
   2cf48:	ldrb	r1, [r0, #5]
   2cf4c:	cmp	r1, #51	; 0x33
   2cf50:	bne	2cf6c <__assert_fail@plt+0x1a4bc>
   2cf54:	ldrb	r1, [r0, #6]
   2cf58:	cmp	r1, #48	; 0x30
   2cf5c:	bne	2cf6c <__assert_fail@plt+0x1a4bc>
   2cf60:	ldrb	r0, [r0, #7]
   2cf64:	cmp	r0, #0
   2cf68:	beq	2cf88 <__assert_fail@plt+0x1a4d8>
   2cf6c:	movw	r1, #53666	; 0xd1a2
   2cf70:	movw	r0, #40656	; 0x9ed0
   2cf74:	cmp	r4, #9
   2cf78:	movt	r1, #4
   2cf7c:	movt	r0, #4
   2cf80:	moveq	r0, r1
   2cf84:	pop	{r4, r5, fp, pc}
   2cf88:	ldrb	r1, [r5]
   2cf8c:	movw	r2, #53822	; 0xd23e
   2cf90:	movw	r0, #53826	; 0xd242
   2cf94:	movt	r2, #4
   2cf98:	movt	r0, #4
   2cf9c:	cmp	r1, #96	; 0x60
   2cfa0:	moveq	r0, r2
   2cfa4:	pop	{r4, r5, fp, pc}
   2cfa8:	push	{r4, r5, fp, lr}
   2cfac:	add	fp, sp, #8
   2cfb0:	mov	r4, #0
   2cfb4:	mov	r5, r0
   2cfb8:	mov	r1, #524288	; 0x80000
   2cfbc:	str	r4, [r0, #4]
   2cfc0:	movw	r0, #35340	; 0x8a0c
   2cfc4:	movt	r0, #4
   2cfc8:	bl	22aec <__assert_fail@plt+0x1003c>
   2cfcc:	cmn	r0, #1
   2cfd0:	str	r0, [r5]
   2cfd4:	ble	2cfe0 <__assert_fail@plt+0x1a530>
   2cfd8:	mov	r0, r4
   2cfdc:	pop	{r4, r5, fp, pc}
   2cfe0:	mov	r0, #0
   2cfe4:	mov	r1, #0
   2cfe8:	mov	r4, #0
   2cfec:	bl	12774 <getcwd@plt>
   2cff0:	cmp	r0, #0
   2cff4:	str	r0, [r5, #4]
   2cff8:	mvneq	r4, #0
   2cffc:	mov	r0, r4
   2d000:	pop	{r4, r5, fp, pc}
   2d004:	ldr	r1, [r0]
   2d008:	cmp	r1, #0
   2d00c:	bmi	2d018 <__assert_fail@plt+0x1a568>
   2d010:	mov	r0, r1
   2d014:	b	129b4 <fchdir@plt>
   2d018:	ldr	r0, [r0, #4]
   2d01c:	b	2fbe0 <__assert_fail@plt+0x1d130>
   2d020:	push	{r4, sl, fp, lr}
   2d024:	add	fp, sp, #8
   2d028:	mov	r4, r0
   2d02c:	ldr	r0, [r0]
   2d030:	cmp	r0, #0
   2d034:	bmi	2d03c <__assert_fail@plt+0x1a58c>
   2d038:	bl	12a68 <close@plt>
   2d03c:	ldr	r0, [r4, #4]
   2d040:	pop	{r4, sl, fp, lr}
   2d044:	b	30174 <__assert_fail@plt+0x1d6c4>
   2d048:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2d04c:	add	fp, sp, #28
   2d050:	sub	sp, sp, #964	; 0x3c4
   2d054:	sub	sp, sp, #3072	; 0xc00
   2d058:	mov	r4, r2
   2d05c:	mov	r5, r1
   2d060:	cmn	r0, #100	; 0x64
   2d064:	beq	2d078 <__assert_fail@plt+0x1a5c8>
   2d068:	mov	r7, r0
   2d06c:	ldrb	r0, [r5]
   2d070:	cmp	r0, #47	; 0x2f
   2d074:	bne	2d08c <__assert_fail@plt+0x1a5dc>
   2d078:	mov	r0, r5
   2d07c:	mov	r1, r4
   2d080:	sub	sp, fp, #28
   2d084:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2d088:	b	32650 <__assert_fail@plt+0x1fba0>
   2d08c:	mov	sl, sp
   2d090:	mov	r1, r7
   2d094:	mov	r2, r5
   2d098:	mov	r0, sl
   2d09c:	bl	46924 <__assert_fail@plt+0x33e74>
   2d0a0:	cmp	r0, #0
   2d0a4:	beq	2d190 <__assert_fail@plt+0x1a6e0>
   2d0a8:	mov	r1, r4
   2d0ac:	mov	r6, r0
   2d0b0:	bl	32650 <__assert_fail@plt+0x1fba0>
   2d0b4:	mov	r9, r0
   2d0b8:	bl	12804 <__errno_location@plt>
   2d0bc:	ldr	r2, [r0]
   2d0c0:	mov	r8, r0
   2d0c4:	cmp	r6, sl
   2d0c8:	beq	2d0dc <__assert_fail@plt+0x1a62c>
   2d0cc:	mov	r0, r6
   2d0d0:	mov	r6, r2
   2d0d4:	bl	30174 <__assert_fail@plt+0x1d6c4>
   2d0d8:	mov	r2, r6
   2d0dc:	cmn	r9, #1
   2d0e0:	bne	2d25c <__assert_fail@plt+0x1a7ac>
   2d0e4:	sub	r0, r2, #1
   2d0e8:	cmp	r0, #37	; 0x25
   2d0ec:	bhi	2d250 <__assert_fail@plt+0x1a7a0>
   2d0f0:	add	r1, pc, #0
   2d0f4:	ldr	pc, [r1, r0, lsl #2]
   2d0f8:	muleq	r2, r0, r1
   2d0fc:	muleq	r2, r0, r1
   2d100:	andeq	sp, r2, r8, asr r2
   2d104:	andeq	sp, r2, r8, asr r2
   2d108:	andeq	sp, r2, r8, asr r2
   2d10c:	andeq	sp, r2, r8, asr r2
   2d110:	andeq	sp, r2, r8, asr r2
   2d114:	andeq	sp, r2, r8, asr r2
   2d118:	andeq	sp, r2, r8, asr r2
   2d11c:	andeq	sp, r2, r8, asr r2
   2d120:	andeq	sp, r2, r8, asr r2
   2d124:	andeq	sp, r2, r8, asr r2
   2d128:	muleq	r2, r0, r1
   2d12c:	andeq	sp, r2, r8, asr r2
   2d130:	andeq	sp, r2, r8, asr r2
   2d134:	andeq	sp, r2, r8, asr r2
   2d138:	andeq	sp, r2, r8, asr r2
   2d13c:	andeq	sp, r2, r8, asr r2
   2d140:	andeq	sp, r2, r8, asr r2
   2d144:	muleq	r2, r0, r1
   2d148:	andeq	sp, r2, r8, asr r2
   2d14c:	andeq	sp, r2, r8, asr r2
   2d150:	andeq	sp, r2, r8, asr r2
   2d154:	andeq	sp, r2, r8, asr r2
   2d158:	andeq	sp, r2, r8, asr r2
   2d15c:	andeq	sp, r2, r8, asr r2
   2d160:	andeq	sp, r2, r8, asr r2
   2d164:	andeq	sp, r2, r8, asr r2
   2d168:	andeq	sp, r2, r8, asr r2
   2d16c:	andeq	sp, r2, r8, asr r2
   2d170:	andeq	sp, r2, r8, asr r2
   2d174:	andeq	sp, r2, r8, asr r2
   2d178:	andeq	sp, r2, r8, asr r2
   2d17c:	andeq	sp, r2, r8, asr r2
   2d180:	andeq	sp, r2, r8, asr r2
   2d184:	andeq	sp, r2, r8, asr r2
   2d188:	andeq	sp, r2, r8, asr r2
   2d18c:	muleq	r2, r0, r1
   2d190:	mov	r0, sp
   2d194:	bl	2cfa8 <__assert_fail@plt+0x1a4f8>
   2d198:	cmp	r0, #0
   2d19c:	bne	2d268 <__assert_fail@plt+0x1a7b8>
   2d1a0:	cmp	r7, #0
   2d1a4:	bmi	2d1d0 <__assert_fail@plt+0x1a720>
   2d1a8:	ldr	r0, [sp]
   2d1ac:	cmp	r0, r7
   2d1b0:	bne	2d1d0 <__assert_fail@plt+0x1a720>
   2d1b4:	mov	r0, sp
   2d1b8:	bl	2d020 <__assert_fail@plt+0x1a570>
   2d1bc:	bl	12804 <__errno_location@plt>
   2d1c0:	mov	r1, #9
   2d1c4:	mvn	r9, #0
   2d1c8:	str	r1, [r0]
   2d1cc:	b	2d25c <__assert_fail@plt+0x1a7ac>
   2d1d0:	mov	r0, r7
   2d1d4:	bl	129b4 <fchdir@plt>
   2d1d8:	cmp	r0, #0
   2d1dc:	beq	2d200 <__assert_fail@plt+0x1a750>
   2d1e0:	bl	12804 <__errno_location@plt>
   2d1e4:	ldr	r5, [r0]
   2d1e8:	mov	r4, r0
   2d1ec:	mov	r0, sp
   2d1f0:	bl	2d020 <__assert_fail@plt+0x1a570>
   2d1f4:	str	r5, [r4]
   2d1f8:	mvn	r9, #0
   2d1fc:	b	2d25c <__assert_fail@plt+0x1a7ac>
   2d200:	mov	r0, r5
   2d204:	mov	r1, r4
   2d208:	bl	32650 <__assert_fail@plt+0x1fba0>
   2d20c:	mov	r9, r0
   2d210:	mov	r4, #0
   2d214:	cmn	r0, #1
   2d218:	bne	2d224 <__assert_fail@plt+0x1a774>
   2d21c:	bl	12804 <__errno_location@plt>
   2d220:	ldr	r4, [r0]
   2d224:	mov	r0, sp
   2d228:	bl	2d004 <__assert_fail@plt+0x1a554>
   2d22c:	cmp	r0, #0
   2d230:	bne	2d274 <__assert_fail@plt+0x1a7c4>
   2d234:	mov	r0, sp
   2d238:	bl	2d020 <__assert_fail@plt+0x1a570>
   2d23c:	cmp	r4, #0
   2d240:	beq	2d25c <__assert_fail@plt+0x1a7ac>
   2d244:	bl	12804 <__errno_location@plt>
   2d248:	str	r4, [r0]
   2d24c:	b	2d25c <__assert_fail@plt+0x1a7ac>
   2d250:	cmp	r2, #95	; 0x5f
   2d254:	beq	2d190 <__assert_fail@plt+0x1a6e0>
   2d258:	str	r2, [r8]
   2d25c:	mov	r0, r9
   2d260:	sub	sp, fp, #28
   2d264:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2d268:	bl	12804 <__errno_location@plt>
   2d26c:	ldr	r0, [r0]
   2d270:	bl	265f0 <__assert_fail@plt+0x13b40>
   2d274:	bl	12804 <__errno_location@plt>
   2d278:	ldr	r0, [r0]
   2d27c:	bl	26630 <__assert_fail@plt+0x13b80>
   2d280:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2d284:	add	fp, sp, #28
   2d288:	sub	sp, sp, #964	; 0x3c4
   2d28c:	sub	sp, sp, #3072	; 0xc00
   2d290:	mov	r4, r2
   2d294:	mov	r5, r1
   2d298:	cmn	r0, #100	; 0x64
   2d29c:	beq	2d2b0 <__assert_fail@plt+0x1a800>
   2d2a0:	mov	r7, r0
   2d2a4:	ldrb	r0, [r5]
   2d2a8:	cmp	r0, #47	; 0x2f
   2d2ac:	bne	2d2c4 <__assert_fail@plt+0x1a814>
   2d2b0:	mov	r0, r5
   2d2b4:	mov	r1, r4
   2d2b8:	sub	sp, fp, #28
   2d2bc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2d2c0:	b	326c4 <__assert_fail@plt+0x1fc14>
   2d2c4:	mov	sl, sp
   2d2c8:	mov	r1, r7
   2d2cc:	mov	r2, r5
   2d2d0:	mov	r0, sl
   2d2d4:	bl	46924 <__assert_fail@plt+0x33e74>
   2d2d8:	cmp	r0, #0
   2d2dc:	beq	2d3c8 <__assert_fail@plt+0x1a918>
   2d2e0:	mov	r1, r4
   2d2e4:	mov	r6, r0
   2d2e8:	bl	326c4 <__assert_fail@plt+0x1fc14>
   2d2ec:	mov	r9, r0
   2d2f0:	bl	12804 <__errno_location@plt>
   2d2f4:	ldr	r2, [r0]
   2d2f8:	mov	r8, r0
   2d2fc:	cmp	r6, sl
   2d300:	beq	2d314 <__assert_fail@plt+0x1a864>
   2d304:	mov	r0, r6
   2d308:	mov	r6, r2
   2d30c:	bl	30174 <__assert_fail@plt+0x1d6c4>
   2d310:	mov	r2, r6
   2d314:	cmn	r9, #1
   2d318:	bne	2d494 <__assert_fail@plt+0x1a9e4>
   2d31c:	sub	r0, r2, #1
   2d320:	cmp	r0, #37	; 0x25
   2d324:	bhi	2d488 <__assert_fail@plt+0x1a9d8>
   2d328:	add	r1, pc, #0
   2d32c:	ldr	pc, [r1, r0, lsl #2]
   2d330:	andeq	sp, r2, r8, asr #7
   2d334:	andeq	sp, r2, r8, asr #7
   2d338:	muleq	r2, r0, r4
   2d33c:	muleq	r2, r0, r4
   2d340:	muleq	r2, r0, r4
   2d344:	muleq	r2, r0, r4
   2d348:	muleq	r2, r0, r4
   2d34c:	muleq	r2, r0, r4
   2d350:	muleq	r2, r0, r4
   2d354:	muleq	r2, r0, r4
   2d358:	muleq	r2, r0, r4
   2d35c:	muleq	r2, r0, r4
   2d360:	andeq	sp, r2, r8, asr #7
   2d364:	muleq	r2, r0, r4
   2d368:	muleq	r2, r0, r4
   2d36c:	muleq	r2, r0, r4
   2d370:	muleq	r2, r0, r4
   2d374:	muleq	r2, r0, r4
   2d378:	muleq	r2, r0, r4
   2d37c:	andeq	sp, r2, r8, asr #7
   2d380:	muleq	r2, r0, r4
   2d384:	muleq	r2, r0, r4
   2d388:	muleq	r2, r0, r4
   2d38c:	muleq	r2, r0, r4
   2d390:	muleq	r2, r0, r4
   2d394:	muleq	r2, r0, r4
   2d398:	muleq	r2, r0, r4
   2d39c:	muleq	r2, r0, r4
   2d3a0:	muleq	r2, r0, r4
   2d3a4:	muleq	r2, r0, r4
   2d3a8:	muleq	r2, r0, r4
   2d3ac:	muleq	r2, r0, r4
   2d3b0:	muleq	r2, r0, r4
   2d3b4:	muleq	r2, r0, r4
   2d3b8:	muleq	r2, r0, r4
   2d3bc:	muleq	r2, r0, r4
   2d3c0:	muleq	r2, r0, r4
   2d3c4:	andeq	sp, r2, r8, asr #7
   2d3c8:	mov	r0, sp
   2d3cc:	bl	2cfa8 <__assert_fail@plt+0x1a4f8>
   2d3d0:	cmp	r0, #0
   2d3d4:	bne	2d4a0 <__assert_fail@plt+0x1a9f0>
   2d3d8:	cmp	r7, #0
   2d3dc:	bmi	2d408 <__assert_fail@plt+0x1a958>
   2d3e0:	ldr	r0, [sp]
   2d3e4:	cmp	r0, r7
   2d3e8:	bne	2d408 <__assert_fail@plt+0x1a958>
   2d3ec:	mov	r0, sp
   2d3f0:	bl	2d020 <__assert_fail@plt+0x1a570>
   2d3f4:	bl	12804 <__errno_location@plt>
   2d3f8:	mov	r1, #9
   2d3fc:	mvn	r9, #0
   2d400:	str	r1, [r0]
   2d404:	b	2d494 <__assert_fail@plt+0x1a9e4>
   2d408:	mov	r0, r7
   2d40c:	bl	129b4 <fchdir@plt>
   2d410:	cmp	r0, #0
   2d414:	beq	2d438 <__assert_fail@plt+0x1a988>
   2d418:	bl	12804 <__errno_location@plt>
   2d41c:	ldr	r5, [r0]
   2d420:	mov	r4, r0
   2d424:	mov	r0, sp
   2d428:	bl	2d020 <__assert_fail@plt+0x1a570>
   2d42c:	str	r5, [r4]
   2d430:	mvn	r9, #0
   2d434:	b	2d494 <__assert_fail@plt+0x1a9e4>
   2d438:	mov	r0, r5
   2d43c:	mov	r1, r4
   2d440:	bl	326c4 <__assert_fail@plt+0x1fc14>
   2d444:	mov	r9, r0
   2d448:	mov	r4, #0
   2d44c:	cmn	r0, #1
   2d450:	bne	2d45c <__assert_fail@plt+0x1a9ac>
   2d454:	bl	12804 <__errno_location@plt>
   2d458:	ldr	r4, [r0]
   2d45c:	mov	r0, sp
   2d460:	bl	2d004 <__assert_fail@plt+0x1a554>
   2d464:	cmp	r0, #0
   2d468:	bne	2d4ac <__assert_fail@plt+0x1a9fc>
   2d46c:	mov	r0, sp
   2d470:	bl	2d020 <__assert_fail@plt+0x1a570>
   2d474:	cmp	r4, #0
   2d478:	beq	2d494 <__assert_fail@plt+0x1a9e4>
   2d47c:	bl	12804 <__errno_location@plt>
   2d480:	str	r4, [r0]
   2d484:	b	2d494 <__assert_fail@plt+0x1a9e4>
   2d488:	cmp	r2, #95	; 0x5f
   2d48c:	beq	2d3c8 <__assert_fail@plt+0x1a918>
   2d490:	str	r2, [r8]
   2d494:	mov	r0, r9
   2d498:	sub	sp, fp, #28
   2d49c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2d4a0:	bl	12804 <__errno_location@plt>
   2d4a4:	ldr	r0, [r0]
   2d4a8:	bl	265f0 <__assert_fail@plt+0x13b40>
   2d4ac:	bl	12804 <__errno_location@plt>
   2d4b0:	ldr	r0, [r0]
   2d4b4:	bl	26630 <__assert_fail@plt+0x13b80>
   2d4b8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2d4bc:	add	fp, sp, #28
   2d4c0:	sub	sp, sp, #964	; 0x3c4
   2d4c4:	sub	sp, sp, #3072	; 0xc00
   2d4c8:	mov	r4, r2
   2d4cc:	mov	r5, r1
   2d4d0:	cmn	r0, #100	; 0x64
   2d4d4:	beq	2d4e8 <__assert_fail@plt+0x1aa38>
   2d4d8:	mov	r7, r0
   2d4dc:	ldrb	r0, [r5]
   2d4e0:	cmp	r0, #47	; 0x2f
   2d4e4:	bne	2d4fc <__assert_fail@plt+0x1aa4c>
   2d4e8:	mov	r0, r5
   2d4ec:	mov	r1, r4
   2d4f0:	sub	sp, fp, #28
   2d4f4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2d4f8:	b	128a0 <setfilecon@plt>
   2d4fc:	mov	sl, sp
   2d500:	mov	r1, r7
   2d504:	mov	r2, r5
   2d508:	mov	r0, sl
   2d50c:	bl	46924 <__assert_fail@plt+0x33e74>
   2d510:	cmp	r0, #0
   2d514:	beq	2d600 <__assert_fail@plt+0x1ab50>
   2d518:	mov	r1, r4
   2d51c:	mov	r6, r0
   2d520:	bl	128a0 <setfilecon@plt>
   2d524:	mov	r9, r0
   2d528:	bl	12804 <__errno_location@plt>
   2d52c:	ldr	r2, [r0]
   2d530:	mov	r8, r0
   2d534:	cmp	r6, sl
   2d538:	beq	2d54c <__assert_fail@plt+0x1aa9c>
   2d53c:	mov	r0, r6
   2d540:	mov	r6, r2
   2d544:	bl	30174 <__assert_fail@plt+0x1d6c4>
   2d548:	mov	r2, r6
   2d54c:	cmn	r9, #1
   2d550:	bne	2d6cc <__assert_fail@plt+0x1ac1c>
   2d554:	sub	r0, r2, #1
   2d558:	cmp	r0, #37	; 0x25
   2d55c:	bhi	2d6c0 <__assert_fail@plt+0x1ac10>
   2d560:	add	r1, pc, #0
   2d564:	ldr	pc, [r1, r0, lsl #2]
   2d568:	andeq	sp, r2, r0, lsl #12
   2d56c:	andeq	sp, r2, r0, lsl #12
   2d570:	andeq	sp, r2, r8, asr #13
   2d574:	andeq	sp, r2, r8, asr #13
   2d578:	andeq	sp, r2, r8, asr #13
   2d57c:	andeq	sp, r2, r8, asr #13
   2d580:	andeq	sp, r2, r8, asr #13
   2d584:	andeq	sp, r2, r8, asr #13
   2d588:	andeq	sp, r2, r8, asr #13
   2d58c:	andeq	sp, r2, r8, asr #13
   2d590:	andeq	sp, r2, r8, asr #13
   2d594:	andeq	sp, r2, r8, asr #13
   2d598:	andeq	sp, r2, r0, lsl #12
   2d59c:	andeq	sp, r2, r8, asr #13
   2d5a0:	andeq	sp, r2, r8, asr #13
   2d5a4:	andeq	sp, r2, r8, asr #13
   2d5a8:	andeq	sp, r2, r8, asr #13
   2d5ac:	andeq	sp, r2, r8, asr #13
   2d5b0:	andeq	sp, r2, r8, asr #13
   2d5b4:	andeq	sp, r2, r0, lsl #12
   2d5b8:	andeq	sp, r2, r8, asr #13
   2d5bc:	andeq	sp, r2, r8, asr #13
   2d5c0:	andeq	sp, r2, r8, asr #13
   2d5c4:	andeq	sp, r2, r8, asr #13
   2d5c8:	andeq	sp, r2, r8, asr #13
   2d5cc:	andeq	sp, r2, r8, asr #13
   2d5d0:	andeq	sp, r2, r8, asr #13
   2d5d4:	andeq	sp, r2, r8, asr #13
   2d5d8:	andeq	sp, r2, r8, asr #13
   2d5dc:	andeq	sp, r2, r8, asr #13
   2d5e0:	andeq	sp, r2, r8, asr #13
   2d5e4:	andeq	sp, r2, r8, asr #13
   2d5e8:	andeq	sp, r2, r8, asr #13
   2d5ec:	andeq	sp, r2, r8, asr #13
   2d5f0:	andeq	sp, r2, r8, asr #13
   2d5f4:	andeq	sp, r2, r8, asr #13
   2d5f8:	andeq	sp, r2, r8, asr #13
   2d5fc:	andeq	sp, r2, r0, lsl #12
   2d600:	mov	r0, sp
   2d604:	bl	2cfa8 <__assert_fail@plt+0x1a4f8>
   2d608:	cmp	r0, #0
   2d60c:	bne	2d6d8 <__assert_fail@plt+0x1ac28>
   2d610:	cmp	r7, #0
   2d614:	bmi	2d640 <__assert_fail@plt+0x1ab90>
   2d618:	ldr	r0, [sp]
   2d61c:	cmp	r0, r7
   2d620:	bne	2d640 <__assert_fail@plt+0x1ab90>
   2d624:	mov	r0, sp
   2d628:	bl	2d020 <__assert_fail@plt+0x1a570>
   2d62c:	bl	12804 <__errno_location@plt>
   2d630:	mov	r1, #9
   2d634:	mvn	r9, #0
   2d638:	str	r1, [r0]
   2d63c:	b	2d6cc <__assert_fail@plt+0x1ac1c>
   2d640:	mov	r0, r7
   2d644:	bl	129b4 <fchdir@plt>
   2d648:	cmp	r0, #0
   2d64c:	beq	2d670 <__assert_fail@plt+0x1abc0>
   2d650:	bl	12804 <__errno_location@plt>
   2d654:	ldr	r5, [r0]
   2d658:	mov	r4, r0
   2d65c:	mov	r0, sp
   2d660:	bl	2d020 <__assert_fail@plt+0x1a570>
   2d664:	str	r5, [r4]
   2d668:	mvn	r9, #0
   2d66c:	b	2d6cc <__assert_fail@plt+0x1ac1c>
   2d670:	mov	r0, r5
   2d674:	mov	r1, r4
   2d678:	bl	128a0 <setfilecon@plt>
   2d67c:	mov	r9, r0
   2d680:	mov	r4, #0
   2d684:	cmn	r0, #1
   2d688:	bne	2d694 <__assert_fail@plt+0x1abe4>
   2d68c:	bl	12804 <__errno_location@plt>
   2d690:	ldr	r4, [r0]
   2d694:	mov	r0, sp
   2d698:	bl	2d004 <__assert_fail@plt+0x1a554>
   2d69c:	cmp	r0, #0
   2d6a0:	bne	2d6e4 <__assert_fail@plt+0x1ac34>
   2d6a4:	mov	r0, sp
   2d6a8:	bl	2d020 <__assert_fail@plt+0x1a570>
   2d6ac:	cmp	r4, #0
   2d6b0:	beq	2d6cc <__assert_fail@plt+0x1ac1c>
   2d6b4:	bl	12804 <__errno_location@plt>
   2d6b8:	str	r4, [r0]
   2d6bc:	b	2d6cc <__assert_fail@plt+0x1ac1c>
   2d6c0:	cmp	r2, #95	; 0x5f
   2d6c4:	beq	2d600 <__assert_fail@plt+0x1ab50>
   2d6c8:	str	r2, [r8]
   2d6cc:	mov	r0, r9
   2d6d0:	sub	sp, fp, #28
   2d6d4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2d6d8:	bl	12804 <__errno_location@plt>
   2d6dc:	ldr	r0, [r0]
   2d6e0:	bl	265f0 <__assert_fail@plt+0x13b40>
   2d6e4:	bl	12804 <__errno_location@plt>
   2d6e8:	ldr	r0, [r0]
   2d6ec:	bl	26630 <__assert_fail@plt+0x13b80>
   2d6f0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2d6f4:	add	fp, sp, #28
   2d6f8:	sub	sp, sp, #964	; 0x3c4
   2d6fc:	sub	sp, sp, #3072	; 0xc00
   2d700:	mov	r4, r2
   2d704:	mov	r5, r1
   2d708:	cmn	r0, #100	; 0x64
   2d70c:	beq	2d720 <__assert_fail@plt+0x1ac70>
   2d710:	mov	r7, r0
   2d714:	ldrb	r0, [r5]
   2d718:	cmp	r0, #47	; 0x2f
   2d71c:	bne	2d734 <__assert_fail@plt+0x1ac84>
   2d720:	mov	r0, r5
   2d724:	mov	r1, r4
   2d728:	sub	sp, fp, #28
   2d72c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2d730:	b	12468 <lsetfilecon@plt>
   2d734:	mov	sl, sp
   2d738:	mov	r1, r7
   2d73c:	mov	r2, r5
   2d740:	mov	r0, sl
   2d744:	bl	46924 <__assert_fail@plt+0x33e74>
   2d748:	cmp	r0, #0
   2d74c:	beq	2d838 <__assert_fail@plt+0x1ad88>
   2d750:	mov	r1, r4
   2d754:	mov	r6, r0
   2d758:	bl	12468 <lsetfilecon@plt>
   2d75c:	mov	r9, r0
   2d760:	bl	12804 <__errno_location@plt>
   2d764:	ldr	r2, [r0]
   2d768:	mov	r8, r0
   2d76c:	cmp	r6, sl
   2d770:	beq	2d784 <__assert_fail@plt+0x1acd4>
   2d774:	mov	r0, r6
   2d778:	mov	r6, r2
   2d77c:	bl	30174 <__assert_fail@plt+0x1d6c4>
   2d780:	mov	r2, r6
   2d784:	cmn	r9, #1
   2d788:	bne	2d904 <__assert_fail@plt+0x1ae54>
   2d78c:	sub	r0, r2, #1
   2d790:	cmp	r0, #37	; 0x25
   2d794:	bhi	2d8f8 <__assert_fail@plt+0x1ae48>
   2d798:	add	r1, pc, #0
   2d79c:	ldr	pc, [r1, r0, lsl #2]
   2d7a0:	andeq	sp, r2, r8, lsr r8
   2d7a4:	andeq	sp, r2, r8, lsr r8
   2d7a8:	andeq	sp, r2, r0, lsl #18
   2d7ac:	andeq	sp, r2, r0, lsl #18
   2d7b0:	andeq	sp, r2, r0, lsl #18
   2d7b4:	andeq	sp, r2, r0, lsl #18
   2d7b8:	andeq	sp, r2, r0, lsl #18
   2d7bc:	andeq	sp, r2, r0, lsl #18
   2d7c0:	andeq	sp, r2, r0, lsl #18
   2d7c4:	andeq	sp, r2, r0, lsl #18
   2d7c8:	andeq	sp, r2, r0, lsl #18
   2d7cc:	andeq	sp, r2, r0, lsl #18
   2d7d0:	andeq	sp, r2, r8, lsr r8
   2d7d4:	andeq	sp, r2, r0, lsl #18
   2d7d8:	andeq	sp, r2, r0, lsl #18
   2d7dc:	andeq	sp, r2, r0, lsl #18
   2d7e0:	andeq	sp, r2, r0, lsl #18
   2d7e4:	andeq	sp, r2, r0, lsl #18
   2d7e8:	andeq	sp, r2, r0, lsl #18
   2d7ec:	andeq	sp, r2, r8, lsr r8
   2d7f0:	andeq	sp, r2, r0, lsl #18
   2d7f4:	andeq	sp, r2, r0, lsl #18
   2d7f8:	andeq	sp, r2, r0, lsl #18
   2d7fc:	andeq	sp, r2, r0, lsl #18
   2d800:	andeq	sp, r2, r0, lsl #18
   2d804:	andeq	sp, r2, r0, lsl #18
   2d808:	andeq	sp, r2, r0, lsl #18
   2d80c:	andeq	sp, r2, r0, lsl #18
   2d810:	andeq	sp, r2, r0, lsl #18
   2d814:	andeq	sp, r2, r0, lsl #18
   2d818:	andeq	sp, r2, r0, lsl #18
   2d81c:	andeq	sp, r2, r0, lsl #18
   2d820:	andeq	sp, r2, r0, lsl #18
   2d824:	andeq	sp, r2, r0, lsl #18
   2d828:	andeq	sp, r2, r0, lsl #18
   2d82c:	andeq	sp, r2, r0, lsl #18
   2d830:	andeq	sp, r2, r0, lsl #18
   2d834:	andeq	sp, r2, r8, lsr r8
   2d838:	mov	r0, sp
   2d83c:	bl	2cfa8 <__assert_fail@plt+0x1a4f8>
   2d840:	cmp	r0, #0
   2d844:	bne	2d910 <__assert_fail@plt+0x1ae60>
   2d848:	cmp	r7, #0
   2d84c:	bmi	2d878 <__assert_fail@plt+0x1adc8>
   2d850:	ldr	r0, [sp]
   2d854:	cmp	r0, r7
   2d858:	bne	2d878 <__assert_fail@plt+0x1adc8>
   2d85c:	mov	r0, sp
   2d860:	bl	2d020 <__assert_fail@plt+0x1a570>
   2d864:	bl	12804 <__errno_location@plt>
   2d868:	mov	r1, #9
   2d86c:	mvn	r9, #0
   2d870:	str	r1, [r0]
   2d874:	b	2d904 <__assert_fail@plt+0x1ae54>
   2d878:	mov	r0, r7
   2d87c:	bl	129b4 <fchdir@plt>
   2d880:	cmp	r0, #0
   2d884:	beq	2d8a8 <__assert_fail@plt+0x1adf8>
   2d888:	bl	12804 <__errno_location@plt>
   2d88c:	ldr	r5, [r0]
   2d890:	mov	r4, r0
   2d894:	mov	r0, sp
   2d898:	bl	2d020 <__assert_fail@plt+0x1a570>
   2d89c:	str	r5, [r4]
   2d8a0:	mvn	r9, #0
   2d8a4:	b	2d904 <__assert_fail@plt+0x1ae54>
   2d8a8:	mov	r0, r5
   2d8ac:	mov	r1, r4
   2d8b0:	bl	12468 <lsetfilecon@plt>
   2d8b4:	mov	r9, r0
   2d8b8:	mov	r4, #0
   2d8bc:	cmn	r0, #1
   2d8c0:	bne	2d8cc <__assert_fail@plt+0x1ae1c>
   2d8c4:	bl	12804 <__errno_location@plt>
   2d8c8:	ldr	r4, [r0]
   2d8cc:	mov	r0, sp
   2d8d0:	bl	2d004 <__assert_fail@plt+0x1a554>
   2d8d4:	cmp	r0, #0
   2d8d8:	bne	2d91c <__assert_fail@plt+0x1ae6c>
   2d8dc:	mov	r0, sp
   2d8e0:	bl	2d020 <__assert_fail@plt+0x1a570>
   2d8e4:	cmp	r4, #0
   2d8e8:	beq	2d904 <__assert_fail@plt+0x1ae54>
   2d8ec:	bl	12804 <__errno_location@plt>
   2d8f0:	str	r4, [r0]
   2d8f4:	b	2d904 <__assert_fail@plt+0x1ae54>
   2d8f8:	cmp	r2, #95	; 0x5f
   2d8fc:	beq	2d838 <__assert_fail@plt+0x1ad88>
   2d900:	str	r2, [r8]
   2d904:	mov	r0, r9
   2d908:	sub	sp, fp, #28
   2d90c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2d910:	bl	12804 <__errno_location@plt>
   2d914:	ldr	r0, [r0]
   2d918:	bl	265f0 <__assert_fail@plt+0x13b40>
   2d91c:	bl	12804 <__errno_location@plt>
   2d920:	ldr	r0, [r0]
   2d924:	bl	26630 <__assert_fail@plt+0x13b80>
   2d928:	push	{r4, r5, fp, lr}
   2d92c:	add	fp, sp, #8
   2d930:	mov	r4, r1
   2d934:	mov	r1, #0
   2d938:	mov	r5, r0
   2d93c:	mov	r2, r4
   2d940:	bl	12894 <memchr@plt>
   2d944:	sub	r1, r0, r5
   2d948:	cmp	r0, #0
   2d94c:	addne	r4, r1, #1
   2d950:	mov	r0, r4
   2d954:	pop	{r4, r5, fp, pc}
   2d958:	mov	r1, #0
   2d95c:	mov	r2, #3
   2d960:	b	2ff38 <__assert_fail@plt+0x1d488>
   2d964:	push	{r4, r5, r6, r7, fp, lr}
   2d968:	add	fp, sp, #16
   2d96c:	mov	r4, r0
   2d970:	cmp	r0, #2
   2d974:	bhi	2d9a4 <__assert_fail@plt+0x1aef4>
   2d978:	mov	r0, r4
   2d97c:	bl	2d958 <__assert_fail@plt+0x1aea8>
   2d980:	mov	r5, r0
   2d984:	bl	12804 <__errno_location@plt>
   2d988:	ldr	r7, [r0]
   2d98c:	mov	r6, r0
   2d990:	mov	r0, r4
   2d994:	bl	12a68 <close@plt>
   2d998:	mov	r0, r5
   2d99c:	str	r7, [r6]
   2d9a0:	pop	{r4, r5, r6, r7, fp, pc}
   2d9a4:	mov	r0, r4
   2d9a8:	pop	{r4, r5, r6, r7, fp, pc}
   2d9ac:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   2d9b0:	add	fp, sp, #24
   2d9b4:	sub	sp, sp, #32
   2d9b8:	ldr	r7, [fp, #12]
   2d9bc:	ldr	r6, [fp, #8]
   2d9c0:	mov	r4, r2
   2d9c4:	mov	r5, r0
   2d9c8:	cmp	r1, #0
   2d9cc:	beq	2d9ec <__assert_fail@plt+0x1af3c>
   2d9d0:	mov	r2, r1
   2d9d4:	movw	r1, #53916	; 0xd29c
   2d9d8:	str	r3, [sp]
   2d9dc:	mov	r0, r5
   2d9e0:	mov	r3, r4
   2d9e4:	movt	r1, #4
   2d9e8:	b	2d9fc <__assert_fail@plt+0x1af4c>
   2d9ec:	movw	r1, #53928	; 0xd2a8
   2d9f0:	mov	r0, r5
   2d9f4:	mov	r2, r4
   2d9f8:	movt	r1, #4
   2d9fc:	bl	127f8 <fprintf@plt>
   2da00:	movw	r1, #53935	; 0xd2af
   2da04:	mov	r0, #0
   2da08:	mov	r2, #5
   2da0c:	movt	r1, #4
   2da10:	bl	12564 <dcgettext@plt>
   2da14:	movw	r1, #54631	; 0xd567
   2da18:	mov	r2, r0
   2da1c:	mov	r0, r5
   2da20:	movw	r3, #2022	; 0x7e6
   2da24:	movt	r1, #4
   2da28:	bl	127f8 <fprintf@plt>
   2da2c:	mov	r0, #10
   2da30:	mov	r1, r5
   2da34:	bl	12948 <fputc@plt>
   2da38:	movw	r1, #53939	; 0xd2b3
   2da3c:	mov	r0, #0
   2da40:	mov	r2, #5
   2da44:	movt	r1, #4
   2da48:	bl	12564 <dcgettext@plt>
   2da4c:	movw	r2, #54110	; 0xd35e
   2da50:	mov	r1, r0
   2da54:	mov	r0, r5
   2da58:	movt	r2, #4
   2da5c:	bl	127f8 <fprintf@plt>
   2da60:	mov	r0, #10
   2da64:	mov	r1, r5
   2da68:	bl	12948 <fputc@plt>
   2da6c:	cmp	r7, #9
   2da70:	bhi	2daac <__assert_fail@plt+0x1affc>
   2da74:	add	r0, pc, #0
   2da78:	ldr	pc, [r0, r7, lsl #2]
   2da7c:	andeq	sp, r2, r4, lsr #21
   2da80:			; <UNDEFINED> instruction: 0x0002dab8
   2da84:	andeq	sp, r2, r4, ror #21
   2da88:	andeq	sp, r2, r0, lsl fp
   2da8c:	andeq	sp, r2, r8, lsr fp
   2da90:	andeq	sp, r2, r4, ror #22
   2da94:	muleq	r2, r8, fp
   2da98:	ldrdeq	sp, [r2], -r8
   2da9c:	andeq	sp, r2, r4, ror ip
   2daa0:	andeq	sp, r2, ip, lsl ip
   2daa4:	sub	sp, fp, #24
   2daa8:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   2daac:	movw	r1, #54463	; 0xd4bf
   2dab0:	movt	r1, #4
   2dab4:	b	2dc24 <__assert_fail@plt+0x1b174>
   2dab8:	movw	r1, #54144	; 0xd380
   2dabc:	mov	r0, #0
   2dac0:	mov	r2, #5
   2dac4:	movt	r1, #4
   2dac8:	bl	12564 <dcgettext@plt>
   2dacc:	ldr	r2, [r6]
   2dad0:	mov	r1, r0
   2dad4:	mov	r0, r5
   2dad8:	sub	sp, fp, #24
   2dadc:	pop	{r4, r5, r6, r7, r8, sl, fp, lr}
   2dae0:	b	127f8 <fprintf@plt>
   2dae4:	movw	r1, #54160	; 0xd390
   2dae8:	mov	r0, #0
   2daec:	mov	r2, #5
   2daf0:	movt	r1, #4
   2daf4:	bl	12564 <dcgettext@plt>
   2daf8:	ldm	r6, {r2, r3}
   2dafc:	mov	r1, r0
   2db00:	mov	r0, r5
   2db04:	sub	sp, fp, #24
   2db08:	pop	{r4, r5, r6, r7, r8, sl, fp, lr}
   2db0c:	b	127f8 <fprintf@plt>
   2db10:	movw	r1, #54183	; 0xd3a7
   2db14:	mov	r0, #0
   2db18:	mov	r2, #5
   2db1c:	movt	r1, #4
   2db20:	bl	12564 <dcgettext@plt>
   2db24:	mov	r1, r0
   2db28:	ldr	r0, [r6, #8]
   2db2c:	ldm	r6, {r2, r3}
   2db30:	str	r0, [sp]
   2db34:	b	2dbd0 <__assert_fail@plt+0x1b120>
   2db38:	movw	r1, #54211	; 0xd3c3
   2db3c:	mov	r0, #0
   2db40:	mov	r2, #5
   2db44:	movt	r1, #4
   2db48:	bl	12564 <dcgettext@plt>
   2db4c:	mov	r1, r0
   2db50:	ldr	r0, [r6, #8]
   2db54:	ldm	r6, {r2, r3}
   2db58:	ldr	r7, [r6, #12]
   2db5c:	stm	sp, {r0, r7}
   2db60:	b	2dbd0 <__assert_fail@plt+0x1b120>
   2db64:	movw	r1, #54243	; 0xd3e3
   2db68:	mov	r0, #0
   2db6c:	mov	r2, #5
   2db70:	movt	r1, #4
   2db74:	bl	12564 <dcgettext@plt>
   2db78:	mov	r1, r0
   2db7c:	ldm	r6, {r2, r3}
   2db80:	ldr	r0, [r6, #8]
   2db84:	ldr	r7, [r6, #12]
   2db88:	ldr	r6, [r6, #16]
   2db8c:	stm	sp, {r0, r7}
   2db90:	str	r6, [sp, #8]
   2db94:	b	2dbd0 <__assert_fail@plt+0x1b120>
   2db98:	movw	r1, #54279	; 0xd407
   2db9c:	mov	r0, #0
   2dba0:	mov	r2, #5
   2dba4:	movt	r1, #4
   2dba8:	bl	12564 <dcgettext@plt>
   2dbac:	mov	r1, r0
   2dbb0:	ldm	r6, {r2, r3}
   2dbb4:	ldr	r0, [r6, #8]
   2dbb8:	ldr	r7, [r6, #12]
   2dbbc:	ldr	r4, [r6, #16]
   2dbc0:	ldr	r6, [r6, #20]
   2dbc4:	stm	sp, {r0, r7}
   2dbc8:	str	r4, [sp, #8]
   2dbcc:	str	r6, [sp, #12]
   2dbd0:	mov	r0, r5
   2dbd4:	b	2dcc4 <__assert_fail@plt+0x1b214>
   2dbd8:	movw	r1, #54319	; 0xd42f
   2dbdc:	mov	r0, #0
   2dbe0:	mov	r2, #5
   2dbe4:	movt	r1, #4
   2dbe8:	bl	12564 <dcgettext@plt>
   2dbec:	mov	ip, r0
   2dbf0:	ldm	r6, {r2, r3}
   2dbf4:	ldr	r0, [r6, #8]
   2dbf8:	ldr	r7, [r6, #12]
   2dbfc:	ldr	r4, [r6, #16]
   2dc00:	ldr	r1, [r6, #20]
   2dc04:	ldr	r6, [r6, #24]
   2dc08:	stm	sp, {r0, r7}
   2dc0c:	str	r4, [sp, #8]
   2dc10:	str	r1, [sp, #12]
   2dc14:	str	r6, [sp, #16]
   2dc18:	b	2dcbc <__assert_fail@plt+0x1b20c>
   2dc1c:	movw	r1, #54411	; 0xd48b
   2dc20:	movt	r1, #4
   2dc24:	mov	r0, #0
   2dc28:	mov	r2, #5
   2dc2c:	bl	12564 <dcgettext@plt>
   2dc30:	mov	ip, r0
   2dc34:	ldr	r2, [r6]
   2dc38:	ldr	r3, [r6, #4]
   2dc3c:	ldr	r0, [r6, #8]
   2dc40:	ldr	r7, [r6, #12]
   2dc44:	ldr	r4, [r6, #16]
   2dc48:	ldr	r1, [r6, #20]
   2dc4c:	ldr	lr, [r6, #24]
   2dc50:	ldr	r8, [r6, #28]
   2dc54:	ldr	r6, [r6, #32]
   2dc58:	stm	sp, {r0, r7}
   2dc5c:	str	r4, [sp, #8]
   2dc60:	str	r1, [sp, #12]
   2dc64:	str	lr, [sp, #16]
   2dc68:	str	r8, [sp, #20]
   2dc6c:	str	r6, [sp, #24]
   2dc70:	b	2dcbc <__assert_fail@plt+0x1b20c>
   2dc74:	movw	r1, #54363	; 0xd45b
   2dc78:	mov	r0, #0
   2dc7c:	mov	r2, #5
   2dc80:	movt	r1, #4
   2dc84:	bl	12564 <dcgettext@plt>
   2dc88:	mov	ip, r0
   2dc8c:	ldm	r6, {r2, r3}
   2dc90:	ldr	r0, [r6, #8]
   2dc94:	ldr	r7, [r6, #12]
   2dc98:	ldr	r4, [r6, #16]
   2dc9c:	ldr	r1, [r6, #20]
   2dca0:	ldr	lr, [r6, #24]
   2dca4:	ldr	r6, [r6, #28]
   2dca8:	stm	sp, {r0, r7}
   2dcac:	str	r4, [sp, #8]
   2dcb0:	str	r1, [sp, #12]
   2dcb4:	str	lr, [sp, #16]
   2dcb8:	str	r6, [sp, #20]
   2dcbc:	mov	r0, r5
   2dcc0:	mov	r1, ip
   2dcc4:	bl	127f8 <fprintf@plt>
   2dcc8:	sub	sp, fp, #24
   2dccc:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   2dcd0:	push	{r4, sl, fp, lr}
   2dcd4:	add	fp, sp, #8
   2dcd8:	sub	sp, sp, #8
   2dcdc:	ldr	ip, [fp, #8]
   2dce0:	mov	lr, #0
   2dce4:	ldr	r4, [ip, lr, lsl #2]
   2dce8:	add	lr, lr, #1
   2dcec:	cmp	r4, #0
   2dcf0:	bne	2dce4 <__assert_fail@plt+0x1b234>
   2dcf4:	sub	r4, lr, #1
   2dcf8:	str	ip, [sp]
   2dcfc:	str	r4, [sp, #4]
   2dd00:	bl	2d9ac <__assert_fail@plt+0x1aefc>
   2dd04:	sub	sp, fp, #8
   2dd08:	pop	{r4, sl, fp, pc}
   2dd0c:	push	{fp, lr}
   2dd10:	mov	fp, sp
   2dd14:	sub	sp, sp, #48	; 0x30
   2dd18:	ldr	ip, [fp, #8]
   2dd1c:	ldr	lr, [ip]
   2dd20:	cmp	lr, #0
   2dd24:	str	lr, [sp, #8]
   2dd28:	beq	2ddc4 <__assert_fail@plt+0x1b314>
   2dd2c:	ldr	lr, [ip, #4]
   2dd30:	cmp	lr, #0
   2dd34:	str	lr, [sp, #12]
   2dd38:	beq	2ddcc <__assert_fail@plt+0x1b31c>
   2dd3c:	ldr	lr, [ip, #8]
   2dd40:	cmp	lr, #0
   2dd44:	str	lr, [sp, #16]
   2dd48:	beq	2ddd4 <__assert_fail@plt+0x1b324>
   2dd4c:	ldr	lr, [ip, #12]
   2dd50:	cmp	lr, #0
   2dd54:	str	lr, [sp, #20]
   2dd58:	beq	2dddc <__assert_fail@plt+0x1b32c>
   2dd5c:	ldr	lr, [ip, #16]
   2dd60:	cmp	lr, #0
   2dd64:	str	lr, [sp, #24]
   2dd68:	beq	2dde4 <__assert_fail@plt+0x1b334>
   2dd6c:	ldr	lr, [ip, #20]
   2dd70:	cmp	lr, #0
   2dd74:	str	lr, [sp, #28]
   2dd78:	beq	2ddec <__assert_fail@plt+0x1b33c>
   2dd7c:	ldr	lr, [ip, #24]
   2dd80:	cmp	lr, #0
   2dd84:	str	lr, [sp, #32]
   2dd88:	beq	2ddf4 <__assert_fail@plt+0x1b344>
   2dd8c:	ldr	lr, [ip, #28]
   2dd90:	cmp	lr, #0
   2dd94:	str	lr, [sp, #36]	; 0x24
   2dd98:	beq	2ddfc <__assert_fail@plt+0x1b34c>
   2dd9c:	ldr	lr, [ip, #32]
   2dda0:	cmp	lr, #0
   2dda4:	str	lr, [sp, #40]	; 0x28
   2dda8:	beq	2de04 <__assert_fail@plt+0x1b354>
   2ddac:	ldr	lr, [ip, #36]	; 0x24
   2ddb0:	mov	ip, #10
   2ddb4:	cmp	lr, #0
   2ddb8:	str	lr, [sp, #44]	; 0x2c
   2ddbc:	movweq	ip, #9
   2ddc0:	b	2de08 <__assert_fail@plt+0x1b358>
   2ddc4:	mov	ip, #0
   2ddc8:	b	2de08 <__assert_fail@plt+0x1b358>
   2ddcc:	mov	ip, #1
   2ddd0:	b	2de08 <__assert_fail@plt+0x1b358>
   2ddd4:	mov	ip, #2
   2ddd8:	b	2de08 <__assert_fail@plt+0x1b358>
   2dddc:	mov	ip, #3
   2dde0:	b	2de08 <__assert_fail@plt+0x1b358>
   2dde4:	mov	ip, #4
   2dde8:	b	2de08 <__assert_fail@plt+0x1b358>
   2ddec:	mov	ip, #5
   2ddf0:	b	2de08 <__assert_fail@plt+0x1b358>
   2ddf4:	mov	ip, #6
   2ddf8:	b	2de08 <__assert_fail@plt+0x1b358>
   2ddfc:	mov	ip, #7
   2de00:	b	2de08 <__assert_fail@plt+0x1b358>
   2de04:	mov	ip, #8
   2de08:	add	lr, sp, #8
   2de0c:	str	ip, [sp, #4]
   2de10:	str	lr, [sp]
   2de14:	bl	2d9ac <__assert_fail@plt+0x1aefc>
   2de18:	mov	sp, fp
   2de1c:	pop	{fp, pc}
   2de20:	push	{fp, lr}
   2de24:	mov	fp, sp
   2de28:	sub	sp, sp, #56	; 0x38
   2de2c:	add	ip, fp, #8
   2de30:	str	ip, [sp, #12]
   2de34:	ldr	lr, [fp, #8]
   2de38:	cmp	lr, #0
   2de3c:	str	lr, [sp, #16]
   2de40:	beq	2dedc <__assert_fail@plt+0x1b42c>
   2de44:	ldr	lr, [ip, #4]
   2de48:	cmp	lr, #0
   2de4c:	str	lr, [sp, #20]
   2de50:	beq	2dee4 <__assert_fail@plt+0x1b434>
   2de54:	ldr	lr, [ip, #8]
   2de58:	cmp	lr, #0
   2de5c:	str	lr, [sp, #24]
   2de60:	beq	2deec <__assert_fail@plt+0x1b43c>
   2de64:	ldr	lr, [ip, #12]
   2de68:	cmp	lr, #0
   2de6c:	str	lr, [sp, #28]
   2de70:	beq	2def4 <__assert_fail@plt+0x1b444>
   2de74:	ldr	lr, [ip, #16]
   2de78:	cmp	lr, #0
   2de7c:	str	lr, [sp, #32]
   2de80:	beq	2defc <__assert_fail@plt+0x1b44c>
   2de84:	ldr	lr, [ip, #20]
   2de88:	cmp	lr, #0
   2de8c:	str	lr, [sp, #36]	; 0x24
   2de90:	beq	2df04 <__assert_fail@plt+0x1b454>
   2de94:	ldr	lr, [ip, #24]
   2de98:	cmp	lr, #0
   2de9c:	str	lr, [sp, #40]	; 0x28
   2dea0:	beq	2df0c <__assert_fail@plt+0x1b45c>
   2dea4:	ldr	lr, [ip, #28]
   2dea8:	cmp	lr, #0
   2deac:	str	lr, [sp, #44]	; 0x2c
   2deb0:	beq	2df14 <__assert_fail@plt+0x1b464>
   2deb4:	ldr	lr, [ip, #32]
   2deb8:	cmp	lr, #0
   2debc:	str	lr, [sp, #48]	; 0x30
   2dec0:	beq	2df1c <__assert_fail@plt+0x1b46c>
   2dec4:	ldr	lr, [ip, #36]	; 0x24
   2dec8:	mov	ip, #10
   2decc:	cmp	lr, #0
   2ded0:	str	lr, [sp, #52]	; 0x34
   2ded4:	movweq	ip, #9
   2ded8:	b	2df20 <__assert_fail@plt+0x1b470>
   2dedc:	mov	ip, #0
   2dee0:	b	2df20 <__assert_fail@plt+0x1b470>
   2dee4:	mov	ip, #1
   2dee8:	b	2df20 <__assert_fail@plt+0x1b470>
   2deec:	mov	ip, #2
   2def0:	b	2df20 <__assert_fail@plt+0x1b470>
   2def4:	mov	ip, #3
   2def8:	b	2df20 <__assert_fail@plt+0x1b470>
   2defc:	mov	ip, #4
   2df00:	b	2df20 <__assert_fail@plt+0x1b470>
   2df04:	mov	ip, #5
   2df08:	b	2df20 <__assert_fail@plt+0x1b470>
   2df0c:	mov	ip, #6
   2df10:	b	2df20 <__assert_fail@plt+0x1b470>
   2df14:	mov	ip, #7
   2df18:	b	2df20 <__assert_fail@plt+0x1b470>
   2df1c:	mov	ip, #8
   2df20:	add	lr, sp, #16
   2df24:	str	ip, [sp, #4]
   2df28:	str	lr, [sp]
   2df2c:	bl	2d9ac <__assert_fail@plt+0x1aefc>
   2df30:	mov	sp, fp
   2df34:	pop	{fp, pc}
   2df38:	push	{fp, lr}
   2df3c:	mov	fp, sp
   2df40:	movw	r0, #58716	; 0xe55c
   2df44:	movt	r0, #5
   2df48:	ldr	r1, [r0]
   2df4c:	mov	r0, #10
   2df50:	bl	12948 <fputc@plt>
   2df54:	movw	r1, #54523	; 0xd4fb
   2df58:	mov	r0, #0
   2df5c:	mov	r2, #5
   2df60:	movt	r1, #4
   2df64:	bl	12564 <dcgettext@plt>
   2df68:	movw	r1, #49836	; 0xc2ac
   2df6c:	movt	r1, #4
   2df70:	bl	12420 <printf@plt>
   2df74:	movw	r1, #54543	; 0xd50f
   2df78:	mov	r0, #0
   2df7c:	mov	r2, #5
   2df80:	movt	r1, #4
   2df84:	bl	12564 <dcgettext@plt>
   2df88:	movw	r1, #48989	; 0xbf5d
   2df8c:	movw	r2, #49750	; 0xc256
   2df90:	movt	r1, #4
   2df94:	movt	r2, #4
   2df98:	bl	12420 <printf@plt>
   2df9c:	movw	r1, #54563	; 0xd523
   2dfa0:	mov	r0, #0
   2dfa4:	mov	r2, #5
   2dfa8:	movt	r1, #4
   2dfac:	bl	12564 <dcgettext@plt>
   2dfb0:	movw	r1, #54602	; 0xd54a
   2dfb4:	movt	r1, #4
   2dfb8:	pop	{fp, lr}
   2dfbc:	b	12420 <printf@plt>
   2dfc0:	push	{r4, r5, r6, sl, fp, lr}
   2dfc4:	add	fp, sp, #16
   2dfc8:	mov	r4, r2
   2dfcc:	mov	r5, r1
   2dfd0:	mov	r6, r0
   2dfd4:	bl	33554 <__assert_fail@plt+0x20aa4>
   2dfd8:	cmp	r0, #0
   2dfdc:	popne	{r4, r5, r6, sl, fp, pc}
   2dfe0:	cmp	r6, #0
   2dfe4:	beq	2dff8 <__assert_fail@plt+0x1b548>
   2dfe8:	cmp	r5, #0
   2dfec:	cmpne	r4, #0
   2dff0:	bne	2dff8 <__assert_fail@plt+0x1b548>
   2dff4:	pop	{r4, r5, r6, sl, fp, pc}
   2dff8:	bl	2e574 <__assert_fail@plt+0x1bac4>
   2dffc:	push	{r4, r5, r6, sl, fp, lr}
   2e000:	add	fp, sp, #16
   2e004:	mov	r4, r2
   2e008:	mov	r5, r1
   2e00c:	mov	r6, r0
   2e010:	bl	33554 <__assert_fail@plt+0x20aa4>
   2e014:	cmp	r0, #0
   2e018:	popne	{r4, r5, r6, sl, fp, pc}
   2e01c:	cmp	r6, #0
   2e020:	beq	2e034 <__assert_fail@plt+0x1b584>
   2e024:	cmp	r5, #0
   2e028:	cmpne	r4, #0
   2e02c:	bne	2e034 <__assert_fail@plt+0x1b584>
   2e030:	pop	{r4, r5, r6, sl, fp, pc}
   2e034:	bl	2e574 <__assert_fail@plt+0x1bac4>
   2e038:	push	{fp, lr}
   2e03c:	mov	fp, sp
   2e040:	bl	327ac <__assert_fail@plt+0x1fcfc>
   2e044:	cmp	r0, #0
   2e048:	popne	{fp, pc}
   2e04c:	bl	2e574 <__assert_fail@plt+0x1bac4>
   2e050:	push	{fp, lr}
   2e054:	mov	fp, sp
   2e058:	bl	327ac <__assert_fail@plt+0x1fcfc>
   2e05c:	cmp	r0, #0
   2e060:	popne	{fp, pc}
   2e064:	bl	2e574 <__assert_fail@plt+0x1bac4>
   2e068:	push	{fp, lr}
   2e06c:	mov	fp, sp
   2e070:	bl	327ac <__assert_fail@plt+0x1fcfc>
   2e074:	cmp	r0, #0
   2e078:	popne	{fp, pc}
   2e07c:	bl	2e574 <__assert_fail@plt+0x1bac4>
   2e080:	push	{r4, r5, fp, lr}
   2e084:	add	fp, sp, #8
   2e088:	mov	r4, r1
   2e08c:	mov	r5, r0
   2e090:	bl	33500 <__assert_fail@plt+0x20a50>
   2e094:	cmp	r0, #0
   2e098:	popne	{r4, r5, fp, pc}
   2e09c:	cmp	r5, #0
   2e0a0:	beq	2e0b0 <__assert_fail@plt+0x1b600>
   2e0a4:	cmp	r4, #0
   2e0a8:	bne	2e0b0 <__assert_fail@plt+0x1b600>
   2e0ac:	pop	{r4, r5, fp, pc}
   2e0b0:	bl	2e574 <__assert_fail@plt+0x1bac4>
   2e0b4:	push	{fp, lr}
   2e0b8:	mov	fp, sp
   2e0bc:	cmp	r1, #0
   2e0c0:	orreq	r1, r1, #1
   2e0c4:	bl	33500 <__assert_fail@plt+0x20a50>
   2e0c8:	cmp	r0, #0
   2e0cc:	popne	{fp, pc}
   2e0d0:	bl	2e574 <__assert_fail@plt+0x1bac4>
   2e0d4:	push	{fp, lr}
   2e0d8:	mov	fp, sp
   2e0dc:	clz	r3, r2
   2e0e0:	lsr	ip, r3, #5
   2e0e4:	clz	r3, r1
   2e0e8:	lsr	r3, r3, #5
   2e0ec:	orrs	r3, r3, ip
   2e0f0:	movwne	r1, #1
   2e0f4:	movwne	r2, #1
   2e0f8:	bl	33554 <__assert_fail@plt+0x20aa4>
   2e0fc:	cmp	r0, #0
   2e100:	popne	{fp, pc}
   2e104:	bl	2e574 <__assert_fail@plt+0x1bac4>
   2e108:	push	{fp, lr}
   2e10c:	mov	fp, sp
   2e110:	mov	r2, r1
   2e114:	mov	r1, r0
   2e118:	mov	r0, #0
   2e11c:	bl	33554 <__assert_fail@plt+0x20aa4>
   2e120:	cmp	r0, #0
   2e124:	popne	{fp, pc}
   2e128:	bl	2e574 <__assert_fail@plt+0x1bac4>
   2e12c:	push	{fp, lr}
   2e130:	mov	fp, sp
   2e134:	mov	r2, r1
   2e138:	mov	r1, r0
   2e13c:	clz	r0, r2
   2e140:	clz	r3, r1
   2e144:	lsr	r0, r0, #5
   2e148:	lsr	r3, r3, #5
   2e14c:	orrs	r0, r3, r0
   2e150:	mov	r0, #0
   2e154:	movwne	r1, #1
   2e158:	movwne	r2, #1
   2e15c:	bl	33554 <__assert_fail@plt+0x20aa4>
   2e160:	cmp	r0, #0
   2e164:	popne	{fp, pc}
   2e168:	bl	2e574 <__assert_fail@plt+0x1bac4>
   2e16c:	push	{r4, r5, r6, sl, fp, lr}
   2e170:	add	fp, sp, #16
   2e174:	ldr	r5, [r1]
   2e178:	mov	r4, r1
   2e17c:	mov	r6, r0
   2e180:	cmp	r0, #0
   2e184:	beq	2e19c <__assert_fail@plt+0x1b6ec>
   2e188:	mov	r0, #1
   2e18c:	add	r0, r0, r5, lsr #1
   2e190:	adds	r5, r5, r0
   2e194:	bcc	2e1a4 <__assert_fail@plt+0x1b6f4>
   2e198:	b	2e1e0 <__assert_fail@plt+0x1b730>
   2e19c:	cmp	r5, #0
   2e1a0:	movweq	r5, #64	; 0x40
   2e1a4:	mov	r0, r6
   2e1a8:	mov	r1, r5
   2e1ac:	mov	r2, #1
   2e1b0:	bl	33554 <__assert_fail@plt+0x20aa4>
   2e1b4:	cmp	r5, #0
   2e1b8:	mov	r1, r5
   2e1bc:	movwne	r1, #1
   2e1c0:	cmp	r0, #0
   2e1c4:	bne	2e1d8 <__assert_fail@plt+0x1b728>
   2e1c8:	clz	r2, r6
   2e1cc:	lsr	r2, r2, #5
   2e1d0:	orrs	r1, r2, r1
   2e1d4:	bne	2e1e0 <__assert_fail@plt+0x1b730>
   2e1d8:	str	r5, [r4]
   2e1dc:	pop	{r4, r5, r6, sl, fp, pc}
   2e1e0:	bl	2e574 <__assert_fail@plt+0x1bac4>
   2e1e4:	push	{r4, r5, r6, r7, fp, lr}
   2e1e8:	add	fp, sp, #16
   2e1ec:	ldr	r5, [r1]
   2e1f0:	mov	r6, r2
   2e1f4:	mov	r4, r1
   2e1f8:	mov	r7, r0
   2e1fc:	cmp	r0, #0
   2e200:	beq	2e218 <__assert_fail@plt+0x1b768>
   2e204:	mov	r0, #1
   2e208:	add	r0, r0, r5, lsr #1
   2e20c:	adds	r5, r5, r0
   2e210:	bcc	2e230 <__assert_fail@plt+0x1b780>
   2e214:	b	2e264 <__assert_fail@plt+0x1b7b4>
   2e218:	cmp	r5, #0
   2e21c:	bne	2e230 <__assert_fail@plt+0x1b780>
   2e220:	mov	r0, #64	; 0x40
   2e224:	cmp	r6, #64	; 0x40
   2e228:	udiv	r5, r0, r6
   2e22c:	addhi	r5, r5, #1
   2e230:	mov	r0, r7
   2e234:	mov	r1, r5
   2e238:	mov	r2, r6
   2e23c:	bl	33554 <__assert_fail@plt+0x20aa4>
   2e240:	cmp	r0, #0
   2e244:	bne	2e25c <__assert_fail@plt+0x1b7ac>
   2e248:	cmp	r7, #0
   2e24c:	beq	2e264 <__assert_fail@plt+0x1b7b4>
   2e250:	cmp	r6, #0
   2e254:	cmpne	r5, #0
   2e258:	bne	2e264 <__assert_fail@plt+0x1b7b4>
   2e25c:	str	r5, [r4]
   2e260:	pop	{r4, r5, r6, r7, fp, pc}
   2e264:	bl	2e574 <__assert_fail@plt+0x1bac4>
   2e268:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   2e26c:	add	fp, sp, #24
   2e270:	mov	r8, r1
   2e274:	ldr	r1, [r1]
   2e278:	mov	r5, r0
   2e27c:	add	r0, r1, r1, asr #1
   2e280:	cmp	r0, r1
   2e284:	mvnvs	r0, #-2147483648	; 0x80000000
   2e288:	cmp	r0, r3
   2e28c:	mov	r7, r0
   2e290:	movgt	r7, r3
   2e294:	cmn	r3, #1
   2e298:	movle	r7, r0
   2e29c:	ldr	r0, [fp, #8]
   2e2a0:	cmn	r0, #1
   2e2a4:	ble	2e2cc <__assert_fail@plt+0x1b81c>
   2e2a8:	cmp	r0, #0
   2e2ac:	beq	2e320 <__assert_fail@plt+0x1b870>
   2e2b0:	cmn	r7, #1
   2e2b4:	ble	2e2f4 <__assert_fail@plt+0x1b844>
   2e2b8:	mvn	r4, #-2147483648	; 0x80000000
   2e2bc:	udiv	r6, r4, r0
   2e2c0:	cmp	r6, r7
   2e2c4:	bge	2e320 <__assert_fail@plt+0x1b870>
   2e2c8:	b	2e330 <__assert_fail@plt+0x1b880>
   2e2cc:	cmn	r7, #1
   2e2d0:	ble	2e310 <__assert_fail@plt+0x1b860>
   2e2d4:	cmn	r0, #1
   2e2d8:	beq	2e320 <__assert_fail@plt+0x1b870>
   2e2dc:	mov	r6, #-2147483648	; 0x80000000
   2e2e0:	mvn	r4, #-2147483648	; 0x80000000
   2e2e4:	sdiv	r6, r6, r0
   2e2e8:	cmp	r6, r7
   2e2ec:	bge	2e320 <__assert_fail@plt+0x1b870>
   2e2f0:	b	2e330 <__assert_fail@plt+0x1b880>
   2e2f4:	beq	2e320 <__assert_fail@plt+0x1b870>
   2e2f8:	mov	r6, #-2147483648	; 0x80000000
   2e2fc:	mvn	r4, #-2147483648	; 0x80000000
   2e300:	sdiv	r6, r6, r7
   2e304:	cmp	r6, r0
   2e308:	bge	2e320 <__assert_fail@plt+0x1b870>
   2e30c:	b	2e330 <__assert_fail@plt+0x1b880>
   2e310:	mvn	r4, #-2147483648	; 0x80000000
   2e314:	sdiv	r6, r4, r0
   2e318:	cmp	r7, r6
   2e31c:	blt	2e330 <__assert_fail@plt+0x1b880>
   2e320:	mul	r6, r7, r0
   2e324:	mov	r4, #64	; 0x40
   2e328:	cmp	r6, #63	; 0x3f
   2e32c:	bgt	2e338 <__assert_fail@plt+0x1b888>
   2e330:	sdiv	r7, r4, r0
   2e334:	mul	r6, r7, r0
   2e338:	cmp	r5, #0
   2e33c:	moveq	r4, #0
   2e340:	streq	r4, [r8]
   2e344:	sub	r4, r7, r1
   2e348:	cmp	r4, r2
   2e34c:	bge	2e3f8 <__assert_fail@plt+0x1b948>
   2e350:	add	r7, r1, r2
   2e354:	mov	r6, #0
   2e358:	mov	r2, #0
   2e35c:	cmp	r7, r3
   2e360:	movwgt	r6, #1
   2e364:	cmn	r3, #1
   2e368:	movwgt	r2, #1
   2e36c:	cmp	r7, r1
   2e370:	bvs	2e42c <__assert_fail@plt+0x1b97c>
   2e374:	ands	r1, r2, r6
   2e378:	bne	2e42c <__assert_fail@plt+0x1b97c>
   2e37c:	cmn	r0, #1
   2e380:	ble	2e3a8 <__assert_fail@plt+0x1b8f8>
   2e384:	cmp	r0, #0
   2e388:	beq	2e3f4 <__assert_fail@plt+0x1b944>
   2e38c:	cmn	r7, #1
   2e390:	ble	2e3cc <__assert_fail@plt+0x1b91c>
   2e394:	mvn	r1, #-2147483648	; 0x80000000
   2e398:	udiv	r1, r1, r0
   2e39c:	cmp	r1, r7
   2e3a0:	bge	2e3f4 <__assert_fail@plt+0x1b944>
   2e3a4:	b	2e42c <__assert_fail@plt+0x1b97c>
   2e3a8:	cmn	r7, #1
   2e3ac:	ble	2e3e4 <__assert_fail@plt+0x1b934>
   2e3b0:	cmn	r0, #1
   2e3b4:	beq	2e3f4 <__assert_fail@plt+0x1b944>
   2e3b8:	mov	r1, #-2147483648	; 0x80000000
   2e3bc:	sdiv	r1, r1, r0
   2e3c0:	cmp	r1, r7
   2e3c4:	bge	2e3f4 <__assert_fail@plt+0x1b944>
   2e3c8:	b	2e42c <__assert_fail@plt+0x1b97c>
   2e3cc:	beq	2e3f4 <__assert_fail@plt+0x1b944>
   2e3d0:	mov	r1, #-2147483648	; 0x80000000
   2e3d4:	sdiv	r1, r1, r7
   2e3d8:	cmp	r1, r0
   2e3dc:	bge	2e3f4 <__assert_fail@plt+0x1b944>
   2e3e0:	b	2e42c <__assert_fail@plt+0x1b97c>
   2e3e4:	mvn	r1, #-2147483648	; 0x80000000
   2e3e8:	sdiv	r1, r1, r0
   2e3ec:	cmp	r7, r1
   2e3f0:	blt	2e42c <__assert_fail@plt+0x1b97c>
   2e3f4:	mul	r6, r7, r0
   2e3f8:	mov	r0, r5
   2e3fc:	mov	r1, r6
   2e400:	bl	33500 <__assert_fail@plt+0x20a50>
   2e404:	cmp	r6, #0
   2e408:	movwne	r6, #1
   2e40c:	cmp	r0, #0
   2e410:	bne	2e424 <__assert_fail@plt+0x1b974>
   2e414:	clz	r1, r5
   2e418:	lsr	r1, r1, #5
   2e41c:	orrs	r1, r1, r6
   2e420:	bne	2e42c <__assert_fail@plt+0x1b97c>
   2e424:	str	r7, [r8]
   2e428:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   2e42c:	bl	2e574 <__assert_fail@plt+0x1bac4>
   2e430:	push	{fp, lr}
   2e434:	mov	fp, sp
   2e438:	mov	r1, #1
   2e43c:	bl	2fb8c <__assert_fail@plt+0x1d0dc>
   2e440:	cmp	r0, #0
   2e444:	popne	{fp, pc}
   2e448:	bl	2e574 <__assert_fail@plt+0x1bac4>
   2e44c:	push	{fp, lr}
   2e450:	mov	fp, sp
   2e454:	bl	2fb8c <__assert_fail@plt+0x1d0dc>
   2e458:	cmp	r0, #0
   2e45c:	popne	{fp, pc}
   2e460:	bl	2e574 <__assert_fail@plt+0x1bac4>
   2e464:	push	{fp, lr}
   2e468:	mov	fp, sp
   2e46c:	mov	r1, #1
   2e470:	bl	2fb8c <__assert_fail@plt+0x1d0dc>
   2e474:	cmp	r0, #0
   2e478:	popne	{fp, pc}
   2e47c:	bl	2e574 <__assert_fail@plt+0x1bac4>
   2e480:	push	{fp, lr}
   2e484:	mov	fp, sp
   2e488:	bl	2fb8c <__assert_fail@plt+0x1d0dc>
   2e48c:	cmp	r0, #0
   2e490:	popne	{fp, pc}
   2e494:	bl	2e574 <__assert_fail@plt+0x1bac4>
   2e498:	push	{r4, r5, fp, lr}
   2e49c:	add	fp, sp, #8
   2e4a0:	mov	r5, r0
   2e4a4:	mov	r0, r1
   2e4a8:	mov	r4, r1
   2e4ac:	bl	327ac <__assert_fail@plt+0x1fcfc>
   2e4b0:	cmp	r0, #0
   2e4b4:	beq	2e4c8 <__assert_fail@plt+0x1ba18>
   2e4b8:	mov	r1, r5
   2e4bc:	mov	r2, r4
   2e4c0:	pop	{r4, r5, fp, lr}
   2e4c4:	b	124e0 <memcpy@plt>
   2e4c8:	bl	2e574 <__assert_fail@plt+0x1bac4>
   2e4cc:	push	{r4, r5, fp, lr}
   2e4d0:	add	fp, sp, #8
   2e4d4:	mov	r5, r0
   2e4d8:	mov	r0, r1
   2e4dc:	mov	r4, r1
   2e4e0:	bl	327ac <__assert_fail@plt+0x1fcfc>
   2e4e4:	cmp	r0, #0
   2e4e8:	beq	2e4fc <__assert_fail@plt+0x1ba4c>
   2e4ec:	mov	r1, r5
   2e4f0:	mov	r2, r4
   2e4f4:	pop	{r4, r5, fp, lr}
   2e4f8:	b	124e0 <memcpy@plt>
   2e4fc:	bl	2e574 <__assert_fail@plt+0x1bac4>
   2e500:	push	{r4, r5, fp, lr}
   2e504:	add	fp, sp, #8
   2e508:	mov	r5, r0
   2e50c:	add	r0, r1, #1
   2e510:	mov	r4, r1
   2e514:	bl	327ac <__assert_fail@plt+0x1fcfc>
   2e518:	cmp	r0, #0
   2e51c:	beq	2e538 <__assert_fail@plt+0x1ba88>
   2e520:	mov	r1, #0
   2e524:	mov	r2, r4
   2e528:	strb	r1, [r0, r4]
   2e52c:	mov	r1, r5
   2e530:	pop	{r4, r5, fp, lr}
   2e534:	b	124e0 <memcpy@plt>
   2e538:	bl	2e574 <__assert_fail@plt+0x1bac4>
   2e53c:	push	{r4, r5, fp, lr}
   2e540:	add	fp, sp, #8
   2e544:	mov	r4, r0
   2e548:	bl	127bc <strlen@plt>
   2e54c:	add	r5, r0, #1
   2e550:	mov	r0, r5
   2e554:	bl	327ac <__assert_fail@plt+0x1fcfc>
   2e558:	cmp	r0, #0
   2e55c:	beq	2e570 <__assert_fail@plt+0x1bac0>
   2e560:	mov	r1, r4
   2e564:	mov	r2, r5
   2e568:	pop	{r4, r5, fp, lr}
   2e56c:	b	124e0 <memcpy@plt>
   2e570:	bl	2e574 <__assert_fail@plt+0x1bac4>
   2e574:	push	{fp, lr}
   2e578:	mov	fp, sp
   2e57c:	movw	r0, #58608	; 0xe4f0
   2e580:	movw	r1, #54678	; 0xd596
   2e584:	mov	r2, #5
   2e588:	movt	r0, #5
   2e58c:	movt	r1, #4
   2e590:	ldr	r4, [r0]
   2e594:	mov	r0, #0
   2e598:	bl	12564 <dcgettext@plt>
   2e59c:	movw	r2, #56015	; 0xdacf
   2e5a0:	mov	r3, r0
   2e5a4:	mov	r0, r4
   2e5a8:	mov	r1, #0
   2e5ac:	movt	r2, #4
   2e5b0:	bl	1269c <error@plt>
   2e5b4:	bl	12a5c <abort@plt>
   2e5b8:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   2e5bc:	add	fp, sp, #24
   2e5c0:	sub	sp, sp, #8
   2e5c4:	mov	r4, r3
   2e5c8:	mov	r8, r2
   2e5cc:	mov	r9, r1
   2e5d0:	mov	r5, r0
   2e5d4:	bl	12804 <__errno_location@plt>
   2e5d8:	mov	r6, #0
   2e5dc:	mov	r7, r0
   2e5e0:	add	r1, sp, #4
   2e5e4:	str	r6, [r0]
   2e5e8:	mov	r0, r5
   2e5ec:	blx	r4
   2e5f0:	ldr	r0, [sp, #4]
   2e5f4:	cmp	r0, r5
   2e5f8:	beq	2e638 <__assert_fail@plt+0x1bb88>
   2e5fc:	cmp	r9, #0
   2e600:	beq	2e620 <__assert_fail@plt+0x1bb70>
   2e604:	vcmp.f64	d0, #0.0
   2e608:	vmrs	APSR_nzcv, fpscr
   2e60c:	beq	2e634 <__assert_fail@plt+0x1bb84>
   2e610:	ldr	r1, [r7]
   2e614:	subs	r6, r1, #34	; 0x22
   2e618:	movwne	r6, #1
   2e61c:	b	2e638 <__assert_fail@plt+0x1bb88>
   2e620:	ldrb	r1, [r0]
   2e624:	mov	r6, #0
   2e628:	cmp	r1, #0
   2e62c:	bne	2e640 <__assert_fail@plt+0x1bb90>
   2e630:	b	2e604 <__assert_fail@plt+0x1bb54>
   2e634:	mov	r6, #1
   2e638:	cmp	r9, #0
   2e63c:	strne	r0, [r9]
   2e640:	vstr	d0, [r8]
   2e644:	mov	r0, r6
   2e648:	sub	sp, fp, #24
   2e64c:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   2e650:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2e654:	add	fp, sp, #28
   2e658:	sub	sp, sp, #20
   2e65c:	cmp	r2, #37	; 0x25
   2e660:	bcs	2ee58 <__assert_fail@plt+0x1c3a8>
   2e664:	ldr	r9, [fp, #8]
   2e668:	mov	r5, r2
   2e66c:	mov	r4, r1
   2e670:	mov	r7, r0
   2e674:	str	r3, [sp, #12]
   2e678:	bl	12804 <__errno_location@plt>
   2e67c:	mov	r8, r0
   2e680:	mov	r0, #0
   2e684:	str	r0, [r8]
   2e688:	bl	12768 <__ctype_b_loc@plt>
   2e68c:	ldr	r1, [r0]
   2e690:	mov	r2, r7
   2e694:	ldrb	r0, [r2], #1
   2e698:	add	r3, r1, r0, lsl #1
   2e69c:	ldrb	r3, [r3, #1]
   2e6a0:	tst	r3, #32
   2e6a4:	bne	2e694 <__assert_fail@plt+0x1bbe4>
   2e6a8:	cmp	r4, #0
   2e6ac:	add	r6, sp, #16
   2e6b0:	mov	sl, #4
   2e6b4:	movne	r6, r4
   2e6b8:	cmp	r0, #45	; 0x2d
   2e6bc:	beq	2ee4c <__assert_fail@plt+0x1c39c>
   2e6c0:	mov	r0, r7
   2e6c4:	mov	r1, r6
   2e6c8:	mov	r2, r5
   2e6cc:	bl	127b0 <strtoul@plt>
   2e6d0:	ldr	r5, [r6]
   2e6d4:	cmp	r5, r7
   2e6d8:	beq	2e704 <__assert_fail@plt+0x1bc54>
   2e6dc:	mov	r4, r0
   2e6e0:	ldr	r0, [r8]
   2e6e4:	cmp	r0, #0
   2e6e8:	beq	2e734 <__assert_fail@plt+0x1bc84>
   2e6ec:	cmp	r0, #34	; 0x22
   2e6f0:	bne	2ee4c <__assert_fail@plt+0x1c39c>
   2e6f4:	mov	sl, #1
   2e6f8:	cmp	r9, #0
   2e6fc:	bne	2e740 <__assert_fail@plt+0x1bc90>
   2e700:	b	2ee44 <__assert_fail@plt+0x1c394>
   2e704:	cmp	r9, #0
   2e708:	beq	2ee4c <__assert_fail@plt+0x1c39c>
   2e70c:	ldrb	r1, [r7]
   2e710:	cmp	r1, #0
   2e714:	beq	2ee4c <__assert_fail@plt+0x1c39c>
   2e718:	mov	r0, r9
   2e71c:	bl	127c8 <strchr@plt>
   2e720:	cmp	r0, #0
   2e724:	beq	2ee4c <__assert_fail@plt+0x1c39c>
   2e728:	mov	r4, #1
   2e72c:	mov	sl, #0
   2e730:	b	2e740 <__assert_fail@plt+0x1bc90>
   2e734:	mov	sl, r0
   2e738:	cmp	r9, #0
   2e73c:	beq	2ee44 <__assert_fail@plt+0x1c394>
   2e740:	ldrb	r7, [r5]
   2e744:	cmp	r7, #0
   2e748:	beq	2ee44 <__assert_fail@plt+0x1c394>
   2e74c:	mov	r0, r9
   2e750:	mov	r1, r7
   2e754:	bl	127c8 <strchr@plt>
   2e758:	cmp	r0, #0
   2e75c:	beq	2e9d8 <__assert_fail@plt+0x1bf28>
   2e760:	sub	r0, r7, #69	; 0x45
   2e764:	mov	lr, #1
   2e768:	mov	r8, #1024	; 0x400
   2e76c:	cmp	r0, #47	; 0x2f
   2e770:	bhi	2e88c <__assert_fail@plt+0x1bddc>
   2e774:	add	r1, pc, #0
   2e778:	ldr	pc, [r1, r0, lsl #2]
   2e77c:	andeq	lr, r2, ip, lsr r8
   2e780:	andeq	lr, r2, ip, lsl #17
   2e784:	andeq	lr, r2, ip, lsr r8
   2e788:	andeq	lr, r2, ip, lsl #17
   2e78c:	andeq	lr, r2, ip, lsl #17
   2e790:	andeq	lr, r2, ip, lsl #17
   2e794:	andeq	lr, r2, ip, lsr r8
   2e798:	andeq	lr, r2, ip, lsl #17
   2e79c:	andeq	lr, r2, ip, lsr r8
   2e7a0:	andeq	lr, r2, ip, lsl #17
   2e7a4:	andeq	lr, r2, ip, lsl #17
   2e7a8:	andeq	lr, r2, ip, lsr r8
   2e7ac:	andeq	lr, r2, ip, lsl #17
   2e7b0:	andeq	lr, r2, ip, lsl #17
   2e7b4:	andeq	lr, r2, ip, lsl #17
   2e7b8:	andeq	lr, r2, ip, lsr r8
   2e7bc:	andeq	lr, r2, ip, lsl #17
   2e7c0:	andeq	lr, r2, ip, lsl #17
   2e7c4:	andeq	lr, r2, ip, lsl #17
   2e7c8:	andeq	lr, r2, ip, lsl #17
   2e7cc:	andeq	lr, r2, ip, lsr r8
   2e7d0:	andeq	lr, r2, ip, lsr r8
   2e7d4:	andeq	lr, r2, ip, lsl #17
   2e7d8:	andeq	lr, r2, ip, lsl #17
   2e7dc:	andeq	lr, r2, ip, lsl #17
   2e7e0:	andeq	lr, r2, ip, lsl #17
   2e7e4:	andeq	lr, r2, ip, lsl #17
   2e7e8:	andeq	lr, r2, ip, lsl #17
   2e7ec:	andeq	lr, r2, ip, lsl #17
   2e7f0:	andeq	lr, r2, ip, lsl #17
   2e7f4:	andeq	lr, r2, ip, lsl #17
   2e7f8:	andeq	lr, r2, ip, lsl #17
   2e7fc:	andeq	lr, r2, ip, lsl #17
   2e800:	andeq	lr, r2, ip, lsl #17
   2e804:	andeq	lr, r2, ip, lsr r8
   2e808:	andeq	lr, r2, ip, lsl #17
   2e80c:	andeq	lr, r2, ip, lsl #17
   2e810:	andeq	lr, r2, ip, lsl #17
   2e814:	andeq	lr, r2, ip, lsr r8
   2e818:	andeq	lr, r2, ip, lsl #17
   2e81c:	andeq	lr, r2, ip, lsr r8
   2e820:	andeq	lr, r2, ip, lsl #17
   2e824:	andeq	lr, r2, ip, lsl #17
   2e828:	andeq	lr, r2, ip, lsl #17
   2e82c:	andeq	lr, r2, ip, lsl #17
   2e830:	andeq	lr, r2, ip, lsl #17
   2e834:	andeq	lr, r2, ip, lsl #17
   2e838:	andeq	lr, r2, ip, lsr r8
   2e83c:	mov	r0, r9
   2e840:	mov	r1, #48	; 0x30
   2e844:	bl	127c8 <strchr@plt>
   2e848:	cmp	r0, #0
   2e84c:	beq	2e888 <__assert_fail@plt+0x1bdd8>
   2e850:	ldrb	r0, [r5, #1]
   2e854:	cmp	r0, #66	; 0x42
   2e858:	cmpne	r0, #68	; 0x44
   2e85c:	bne	2e86c <__assert_fail@plt+0x1bdbc>
   2e860:	mov	lr, #2
   2e864:	mov	r8, #1000	; 0x3e8
   2e868:	b	2e88c <__assert_fail@plt+0x1bddc>
   2e86c:	cmp	r0, #105	; 0x69
   2e870:	bne	2e888 <__assert_fail@plt+0x1bdd8>
   2e874:	ldrb	r0, [r5, #2]
   2e878:	mov	lr, #1
   2e87c:	cmp	r0, #66	; 0x42
   2e880:	movweq	lr, #3
   2e884:	b	2e88c <__assert_fail@plt+0x1bddc>
   2e888:	mov	lr, #1
   2e88c:	sub	r1, r7, #66	; 0x42
   2e890:	cmp	r1, #53	; 0x35
   2e894:	bhi	2e9d8 <__assert_fail@plt+0x1bf28>
   2e898:	add	r2, pc, #4
   2e89c:	mov	r0, #0
   2e8a0:	ldr	pc, [r2, r1, lsl #2]
   2e8a4:	andeq	lr, r2, ip, lsl #23
   2e8a8:	ldrdeq	lr, [r2], -r8
   2e8ac:	ldrdeq	lr, [r2], -r8
   2e8b0:	andeq	lr, r2, r8, lsr #23
   2e8b4:	ldrdeq	lr, [r2], -r8
   2e8b8:	andeq	lr, r2, ip, ror r9
   2e8bc:	ldrdeq	lr, [r2], -r8
   2e8c0:	ldrdeq	lr, [r2], -r8
   2e8c4:	ldrdeq	lr, [r2], -r8
   2e8c8:	andeq	lr, r2, r4, ror #19
   2e8cc:	ldrdeq	lr, [r2], -r8
   2e8d0:	andeq	lr, r2, r4, lsl #20
   2e8d4:	ldrdeq	lr, [r2], -r8
   2e8d8:	ldrdeq	lr, [r2], -r8
   2e8dc:	andeq	lr, r2, r0, ror #24
   2e8e0:	ldrdeq	lr, [r2], -r8
   2e8e4:	ldrdeq	lr, [r2], -r8
   2e8e8:	ldrdeq	lr, [r2], -r8
   2e8ec:	andeq	lr, r2, r4, asr #20
   2e8f0:	ldrdeq	lr, [r2], -r8
   2e8f4:	ldrdeq	lr, [r2], -r8
   2e8f8:	ldrdeq	lr, [r2], -r8
   2e8fc:	ldrdeq	lr, [r2], -r8
   2e900:	strdeq	lr, [r2], -ip
   2e904:			; <UNDEFINED> instruction: 0x0002eabc
   2e908:	ldrdeq	lr, [r2], -r8
   2e90c:	ldrdeq	lr, [r2], -r8
   2e910:	ldrdeq	lr, [r2], -r8
   2e914:	ldrdeq	lr, [r2], -r8
   2e918:	ldrdeq	lr, [r2], -r8
   2e91c:	ldrdeq	lr, [r2], -r8
   2e920:	ldrdeq	lr, [r2], -r8
   2e924:	strdeq	lr, [r2], -r4
   2e928:	andeq	lr, r2, ip, lsr #28
   2e92c:	ldrdeq	lr, [r2], -r8
   2e930:	ldrdeq	lr, [r2], -r8
   2e934:	ldrdeq	lr, [r2], -r8
   2e938:	andeq	lr, r2, ip, ror r9
   2e93c:	ldrdeq	lr, [r2], -r8
   2e940:	ldrdeq	lr, [r2], -r8
   2e944:	ldrdeq	lr, [r2], -r8
   2e948:	andeq	lr, r2, r4, ror #19
   2e94c:	ldrdeq	lr, [r2], -r8
   2e950:	andeq	lr, r2, r4, lsl #20
   2e954:	ldrdeq	lr, [r2], -r8
   2e958:	ldrdeq	lr, [r2], -r8
   2e95c:	ldrdeq	lr, [r2], -r8
   2e960:	ldrdeq	lr, [r2], -r8
   2e964:	ldrdeq	lr, [r2], -r8
   2e968:	ldrdeq	lr, [r2], -r8
   2e96c:	andeq	lr, r2, r4, asr #20
   2e970:	ldrdeq	lr, [r2], -r8
   2e974:	ldrdeq	lr, [r2], -r8
   2e978:	andeq	lr, r2, r8, lsl lr
   2e97c:	mvn	r0, #0
   2e980:	mul	r1, r4, r8
   2e984:	mov	r7, #0
   2e988:	udiv	r0, r0, r8
   2e98c:	cmp	r0, r4
   2e990:	mvncc	r1, #0
   2e994:	cmp	r0, r1
   2e998:	mul	r2, r1, r8
   2e99c:	mvncc	r2, #0
   2e9a0:	cmp	r0, r2
   2e9a4:	mul	r3, r2, r8
   2e9a8:	mov	r2, #0
   2e9ac:	mvncc	r3, #0
   2e9b0:	movwcc	r7, #1
   2e9b4:	cmp	r0, r1
   2e9b8:	mov	r1, #0
   2e9bc:	movwcc	r1, #1
   2e9c0:	cmp	r0, r4
   2e9c4:	mov	r4, r3
   2e9c8:	movwcc	r2, #1
   2e9cc:	orr	r0, r2, r1
   2e9d0:	orr	r0, r0, r7
   2e9d4:	b	2ee2c <__assert_fail@plt+0x1c37c>
   2e9d8:	ldr	r0, [sp, #12]
   2e9dc:	orr	sl, sl, #2
   2e9e0:	b	2ee48 <__assert_fail@plt+0x1c398>
   2e9e4:	mvn	r0, #0
   2e9e8:	mul	r1, r4, r8
   2e9ec:	udiv	r0, r0, r8
   2e9f0:	cmp	r0, r4
   2e9f4:	mov	r0, #0
   2e9f8:	mvncc	r1, #0
   2e9fc:	movwcc	r0, #1
   2ea00:	b	2ee28 <__assert_fail@plt+0x1c378>
   2ea04:	mvn	r0, #0
   2ea08:	mul	r1, r4, r8
   2ea0c:	mov	r3, #0
   2ea10:	udiv	r0, r0, r8
   2ea14:	cmp	r0, r4
   2ea18:	mvncc	r1, #0
   2ea1c:	cmp	r0, r1
   2ea20:	mul	r2, r1, r8
   2ea24:	mov	r1, #0
   2ea28:	mvncc	r2, #0
   2ea2c:	movwcc	r3, #1
   2ea30:	cmp	r0, r4
   2ea34:	movwcc	r1, #1
   2ea38:	mov	r4, r2
   2ea3c:	orr	r0, r1, r3
   2ea40:	b	2ee2c <__assert_fail@plt+0x1c37c>
   2ea44:	mvn	r0, #0
   2ea48:	mul	r1, r4, r8
   2ea4c:	mov	r7, #0
   2ea50:	udiv	r0, r0, r8
   2ea54:	cmp	r0, r4
   2ea58:	mvncc	r1, #0
   2ea5c:	cmp	r0, r1
   2ea60:	mul	r2, r1, r8
   2ea64:	mvncc	r2, #0
   2ea68:	cmp	r0, r2
   2ea6c:	mul	r3, r2, r8
   2ea70:	mvncc	r3, #0
   2ea74:	cmp	r0, r3
   2ea78:	mul	ip, r3, r8
   2ea7c:	mov	r3, #0
   2ea80:	mvncc	ip, #0
   2ea84:	movwcc	r7, #1
   2ea88:	cmp	r0, r2
   2ea8c:	mov	r2, #0
   2ea90:	movwcc	r2, #1
   2ea94:	cmp	r0, r1
   2ea98:	mov	r1, #0
   2ea9c:	movwcc	r1, #1
   2eaa0:	cmp	r0, r4
   2eaa4:	mov	r4, ip
   2eaa8:	movwcc	r3, #1
   2eaac:	orr	r0, r3, r1
   2eab0:	orr	r0, r0, r2
   2eab4:	orr	r0, r0, r7
   2eab8:	b	2ee2c <__assert_fail@plt+0x1c37c>
   2eabc:	mvn	r0, #0
   2eac0:	str	lr, [sp, #8]
   2eac4:	mul	lr, r4, r8
   2eac8:	udiv	r0, r0, r8
   2eacc:	cmp	r0, r4
   2ead0:	mvncc	lr, #0
   2ead4:	cmp	r0, lr
   2ead8:	mul	r9, lr, r8
   2eadc:	mvncc	r9, #0
   2eae0:	cmp	r0, r9
   2eae4:	mul	r7, r9, r8
   2eae8:	mvncc	r7, #0
   2eaec:	cmp	r0, r7
   2eaf0:	mul	r3, r7, r8
   2eaf4:	mvncc	r3, #0
   2eaf8:	cmp	r0, r3
   2eafc:	mul	r1, r3, r8
   2eb00:	mvncc	r1, #0
   2eb04:	cmp	r0, r1
   2eb08:	mul	r2, r1, r8
   2eb0c:	mvncc	r2, #0
   2eb10:	cmp	r0, r2
   2eb14:	mul	ip, r2, r8
   2eb18:	mov	r8, #0
   2eb1c:	mov	r2, #0
   2eb20:	mvncc	ip, #0
   2eb24:	movwcc	r8, #1
   2eb28:	cmp	r0, r1
   2eb2c:	mov	r1, #0
   2eb30:	movwcc	r1, #1
   2eb34:	cmp	r0, r3
   2eb38:	mov	r3, #0
   2eb3c:	movwcc	r3, #1
   2eb40:	cmp	r0, r7
   2eb44:	mov	r7, #0
   2eb48:	movwcc	r7, #1
   2eb4c:	cmp	r0, r9
   2eb50:	mov	r9, #0
   2eb54:	movwcc	r9, #1
   2eb58:	cmp	r0, lr
   2eb5c:	mov	lr, #0
   2eb60:	movwcc	lr, #1
   2eb64:	cmp	r0, r4
   2eb68:	mov	r4, ip
   2eb6c:	movwcc	r2, #1
   2eb70:	orr	r0, r2, lr
   2eb74:	ldr	lr, [sp, #8]
   2eb78:	orr	r0, r0, r9
   2eb7c:	orr	r0, r0, r7
   2eb80:	orr	r0, r0, r3
   2eb84:	orr	r0, r0, r1
   2eb88:	b	2ede8 <__assert_fail@plt+0x1c338>
   2eb8c:	mov	r1, #0
   2eb90:	lsr	r0, r4, #22
   2eb94:	cmp	r1, r4, lsr #22
   2eb98:	lsl	r4, r4, #10
   2eb9c:	movwne	r0, #1
   2eba0:	mvnne	r4, #0
   2eba4:	b	2ee2c <__assert_fail@plt+0x1c37c>
   2eba8:	mvn	r0, #0
   2ebac:	mul	ip, r4, r8
   2ebb0:	str	lr, [sp, #8]
   2ebb4:	mov	r9, #0
   2ebb8:	udiv	r0, r0, r8
   2ebbc:	cmp	r0, r4
   2ebc0:	mvncc	ip, #0
   2ebc4:	cmp	r0, ip
   2ebc8:	mul	r2, ip, r8
   2ebcc:	mvncc	r2, #0
   2ebd0:	cmp	r0, r2
   2ebd4:	mul	r3, r2, r8
   2ebd8:	mvncc	r3, #0
   2ebdc:	cmp	r0, r3
   2ebe0:	mul	r7, r3, r8
   2ebe4:	mvncc	r7, #0
   2ebe8:	cmp	r0, r7
   2ebec:	mul	r1, r7, r8
   2ebf0:	mvncc	r1, #0
   2ebf4:	cmp	r0, r1
   2ebf8:	mul	lr, r1, r8
   2ebfc:	mov	r8, #0
   2ec00:	mov	r1, #0
   2ec04:	mvncc	lr, #0
   2ec08:	movwcc	r8, #1
   2ec0c:	cmp	r0, r7
   2ec10:	mov	r7, #0
   2ec14:	movwcc	r7, #1
   2ec18:	cmp	r0, r3
   2ec1c:	mov	r3, #0
   2ec20:	movwcc	r3, #1
   2ec24:	cmp	r0, r2
   2ec28:	mov	r2, #0
   2ec2c:	movwcc	r2, #1
   2ec30:	cmp	r0, ip
   2ec34:	movwcc	r1, #1
   2ec38:	cmp	r0, r4
   2ec3c:	mov	r4, lr
   2ec40:	ldr	lr, [sp, #8]
   2ec44:	movwcc	r9, #1
   2ec48:	orr	r0, r9, r1
   2ec4c:	orr	r0, r0, r2
   2ec50:	orr	r0, r0, r3
   2ec54:	orr	r0, r0, r7
   2ec58:	orr	r0, r0, r8
   2ec5c:	b	2ee2c <__assert_fail@plt+0x1c37c>
   2ec60:	mvn	r0, #0
   2ec64:	mul	r1, r4, r8
   2ec68:	udiv	r0, r0, r8
   2ec6c:	cmp	r0, r4
   2ec70:	mvncc	r1, #0
   2ec74:	cmp	r0, r1
   2ec78:	mul	r2, r1, r8
   2ec7c:	mvncc	r2, #0
   2ec80:	cmp	r0, r2
   2ec84:	mul	r3, r2, r8
   2ec88:	mvncc	r3, #0
   2ec8c:	cmp	r0, r3
   2ec90:	mul	r7, r3, r8
   2ec94:	mvncc	r7, #0
   2ec98:	cmp	r0, r7
   2ec9c:	mul	ip, r7, r8
   2eca0:	mov	r8, lr
   2eca4:	mov	lr, #0
   2eca8:	mov	r7, #0
   2ecac:	mvncc	ip, #0
   2ecb0:	movwcc	lr, #1
   2ecb4:	cmp	r0, r3
   2ecb8:	mov	r3, #0
   2ecbc:	movwcc	r3, #1
   2ecc0:	cmp	r0, r2
   2ecc4:	mov	r2, #0
   2ecc8:	movwcc	r2, #1
   2eccc:	cmp	r0, r1
   2ecd0:	mov	r1, #0
   2ecd4:	movwcc	r1, #1
   2ecd8:	cmp	r0, r4
   2ecdc:	mov	r4, ip
   2ece0:	movwcc	r7, #1
   2ece4:	orr	r0, r7, r1
   2ece8:	orr	r0, r0, r2
   2ecec:	orr	r0, r0, r3
   2ecf0:	orr	r0, r0, lr
   2ecf4:	mov	lr, r8
   2ecf8:	b	2ee2c <__assert_fail@plt+0x1c37c>
   2ecfc:	mvn	r0, #0
   2ed00:	str	lr, [sp, #8]
   2ed04:	mul	lr, r4, r8
   2ed08:	udiv	r0, r0, r8
   2ed0c:	cmp	r0, r4
   2ed10:	mvncc	lr, #0
   2ed14:	cmp	r0, lr
   2ed18:	mul	r9, lr, r8
   2ed1c:	mvncc	r9, #0
   2ed20:	cmp	r0, r9
   2ed24:	mul	r7, r9, r8
   2ed28:	mvncc	r7, #0
   2ed2c:	cmp	r0, r7
   2ed30:	mul	r3, r7, r8
   2ed34:	mvncc	r3, #0
   2ed38:	cmp	r0, r3
   2ed3c:	mul	r1, r3, r8
   2ed40:	mvncc	r1, #0
   2ed44:	cmp	r0, r1
   2ed48:	mul	r2, r1, r8
   2ed4c:	mvncc	r2, #0
   2ed50:	cmp	r0, r2
   2ed54:	mul	ip, r2, r8
   2ed58:	mvncc	ip, #0
   2ed5c:	cmp	r0, ip
   2ed60:	mul	r8, ip, r8
   2ed64:	mov	ip, #0
   2ed68:	mvncc	r8, #0
   2ed6c:	str	r8, [sp, #4]
   2ed70:	mov	r8, #0
   2ed74:	movwcc	r8, #1
   2ed78:	cmp	r0, r2
   2ed7c:	mov	r2, #0
   2ed80:	movwcc	r2, #1
   2ed84:	cmp	r0, r1
   2ed88:	mov	r1, #0
   2ed8c:	movwcc	r1, #1
   2ed90:	cmp	r0, r3
   2ed94:	mov	r3, #0
   2ed98:	movwcc	r3, #1
   2ed9c:	cmp	r0, r7
   2eda0:	mov	r7, #0
   2eda4:	movwcc	r7, #1
   2eda8:	cmp	r0, r9
   2edac:	mov	r9, #0
   2edb0:	movwcc	r9, #1
   2edb4:	cmp	r0, lr
   2edb8:	mov	lr, #0
   2edbc:	movwcc	lr, #1
   2edc0:	cmp	r0, r4
   2edc4:	ldr	r4, [sp, #4]
   2edc8:	movwcc	ip, #1
   2edcc:	orr	r0, ip, lr
   2edd0:	ldr	lr, [sp, #8]
   2edd4:	orr	r0, r0, r9
   2edd8:	orr	r0, r0, r7
   2eddc:	orr	r0, r0, r3
   2ede0:	orr	r0, r0, r1
   2ede4:	orr	r0, r0, r2
   2ede8:	orr	r0, r0, r8
   2edec:	and	r0, r0, #1
   2edf0:	b	2ee2c <__assert_fail@plt+0x1c37c>
   2edf4:	movw	r0, #65535	; 0xffff
   2edf8:	movt	r0, #63	; 0x3f
   2edfc:	orr	r1, r0, #4194304	; 0x400000
   2ee00:	mov	r0, #0
   2ee04:	cmp	r4, r1
   2ee08:	lsl	r4, r4, #9
   2ee0c:	movwhi	r0, #1
   2ee10:	mvnhi	r4, #0
   2ee14:	b	2ee2c <__assert_fail@plt+0x1c37c>
   2ee18:	cmp	r4, #0
   2ee1c:	lsl	r1, r4, #1
   2ee20:	lsr	r0, r4, #31
   2ee24:	mvnmi	r1, #0
   2ee28:	mov	r4, r1
   2ee2c:	add	r1, r5, lr
   2ee30:	orr	sl, r0, sl
   2ee34:	str	r1, [r6]
   2ee38:	ldrb	r1, [r5, lr]
   2ee3c:	cmp	r1, #0
   2ee40:	orrne	sl, sl, #2
   2ee44:	ldr	r0, [sp, #12]
   2ee48:	str	r4, [r0]
   2ee4c:	mov	r0, sl
   2ee50:	sub	sp, fp, #28
   2ee54:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2ee58:	movw	r0, #54695	; 0xd5a7
   2ee5c:	movw	r1, #54733	; 0xd5cd
   2ee60:	movw	r3, #54745	; 0xd5d9
   2ee64:	mov	r2, #84	; 0x54
   2ee68:	movt	r0, #4
   2ee6c:	movt	r1, #4
   2ee70:	movt	r3, #4
   2ee74:	bl	12ab0 <__assert_fail@plt>
   2ee78:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2ee7c:	add	fp, sp, #28
   2ee80:	sub	sp, sp, #44	; 0x2c
   2ee84:	cmp	r2, #37	; 0x25
   2ee88:	bcs	2faec <__assert_fail@plt+0x1d03c>
   2ee8c:	ldr	sl, [fp, #8]
   2ee90:	mov	r6, r2
   2ee94:	mov	r7, r1
   2ee98:	mov	r4, r0
   2ee9c:	str	r3, [sp, #36]	; 0x24
   2eea0:	bl	12804 <__errno_location@plt>
   2eea4:	mov	r5, r0
   2eea8:	mov	r0, #0
   2eeac:	str	r0, [r5]
   2eeb0:	bl	12768 <__ctype_b_loc@plt>
   2eeb4:	ldr	r1, [r0]
   2eeb8:	mov	r2, r4
   2eebc:	ldrb	r0, [r2], #1
   2eec0:	add	r3, r1, r0, lsl #1
   2eec4:	ldrb	r3, [r3, #1]
   2eec8:	tst	r3, #32
   2eecc:	bne	2eebc <__assert_fail@plt+0x1c40c>
   2eed0:	cmp	r7, #0
   2eed4:	sub	r9, fp, #32
   2eed8:	mov	r8, #4
   2eedc:	movne	r9, r7
   2eee0:	cmp	r0, #45	; 0x2d
   2eee4:	beq	2fae0 <__assert_fail@plt+0x1d030>
   2eee8:	mov	r0, r4
   2eeec:	mov	r1, r9
   2eef0:	mov	r2, r6
   2eef4:	mov	r3, #0
   2eef8:	bl	12504 <__strtoull_internal@plt>
   2eefc:	mov	r7, r1
   2ef00:	ldr	r1, [r9]
   2ef04:	cmp	r1, r4
   2ef08:	beq	2ef34 <__assert_fail@plt+0x1c484>
   2ef0c:	mov	r6, r0
   2ef10:	ldr	r0, [r5]
   2ef14:	cmp	r0, #0
   2ef18:	beq	2ef70 <__assert_fail@plt+0x1c4c0>
   2ef1c:	cmp	r0, #34	; 0x22
   2ef20:	bne	2fae0 <__assert_fail@plt+0x1d030>
   2ef24:	mov	r8, #1
   2ef28:	cmp	sl, #0
   2ef2c:	bne	2ef7c <__assert_fail@plt+0x1c4cc>
   2ef30:	b	2fad8 <__assert_fail@plt+0x1d028>
   2ef34:	cmp	sl, #0
   2ef38:	beq	2fae0 <__assert_fail@plt+0x1d030>
   2ef3c:	mov	r5, r1
   2ef40:	ldrb	r1, [r4]
   2ef44:	cmp	r1, #0
   2ef48:	beq	2fae0 <__assert_fail@plt+0x1d030>
   2ef4c:	mov	r0, sl
   2ef50:	bl	127c8 <strchr@plt>
   2ef54:	cmp	r0, #0
   2ef58:	beq	2fae0 <__assert_fail@plt+0x1d030>
   2ef5c:	mov	r1, r5
   2ef60:	mov	r8, #0
   2ef64:	mov	r6, #1
   2ef68:	mov	r7, #0
   2ef6c:	b	2ef7c <__assert_fail@plt+0x1c4cc>
   2ef70:	mov	r8, r0
   2ef74:	cmp	sl, #0
   2ef78:	beq	2fad8 <__assert_fail@plt+0x1d028>
   2ef7c:	ldrb	r4, [r1]
   2ef80:	cmp	r4, #0
   2ef84:	beq	2fad8 <__assert_fail@plt+0x1d028>
   2ef88:	str	r1, [sp, #32]
   2ef8c:	mov	r0, sl
   2ef90:	mov	r1, r4
   2ef94:	bl	127c8 <strchr@plt>
   2ef98:	cmp	r0, #0
   2ef9c:	beq	2f260 <__assert_fail@plt+0x1c7b0>
   2efa0:	sub	r0, r4, #69	; 0x45
   2efa4:	mov	r1, #1
   2efa8:	mov	r3, #0
   2efac:	mov	r5, #1024	; 0x400
   2efb0:	cmp	r0, #47	; 0x2f
   2efb4:	str	r1, [sp, #28]
   2efb8:	bhi	2f0bc <__assert_fail@plt+0x1c60c>
   2efbc:	add	r1, pc, #0
   2efc0:	ldr	pc, [r1, r0, lsl #2]
   2efc4:	andeq	pc, r2, r4, lsl #1
   2efc8:	strheq	pc, [r2], -ip	; <UNPREDICTABLE>
   2efcc:	andeq	pc, r2, r4, lsl #1
   2efd0:	strheq	pc, [r2], -ip	; <UNPREDICTABLE>
   2efd4:	strheq	pc, [r2], -ip	; <UNPREDICTABLE>
   2efd8:	strheq	pc, [r2], -ip	; <UNPREDICTABLE>
   2efdc:	andeq	pc, r2, r4, lsl #1
   2efe0:	strheq	pc, [r2], -ip	; <UNPREDICTABLE>
   2efe4:	andeq	pc, r2, r4, lsl #1
   2efe8:	strheq	pc, [r2], -ip	; <UNPREDICTABLE>
   2efec:	strheq	pc, [r2], -ip	; <UNPREDICTABLE>
   2eff0:	andeq	pc, r2, r4, lsl #1
   2eff4:	strheq	pc, [r2], -ip	; <UNPREDICTABLE>
   2eff8:	strheq	pc, [r2], -ip	; <UNPREDICTABLE>
   2effc:	strheq	pc, [r2], -ip	; <UNPREDICTABLE>
   2f000:	andeq	pc, r2, r4, lsl #1
   2f004:	strheq	pc, [r2], -ip	; <UNPREDICTABLE>
   2f008:	strheq	pc, [r2], -ip	; <UNPREDICTABLE>
   2f00c:	strheq	pc, [r2], -ip	; <UNPREDICTABLE>
   2f010:	strheq	pc, [r2], -ip	; <UNPREDICTABLE>
   2f014:	andeq	pc, r2, r4, lsl #1
   2f018:	andeq	pc, r2, r4, lsl #1
   2f01c:	strheq	pc, [r2], -ip	; <UNPREDICTABLE>
   2f020:	strheq	pc, [r2], -ip	; <UNPREDICTABLE>
   2f024:	strheq	pc, [r2], -ip	; <UNPREDICTABLE>
   2f028:	strheq	pc, [r2], -ip	; <UNPREDICTABLE>
   2f02c:	strheq	pc, [r2], -ip	; <UNPREDICTABLE>
   2f030:	strheq	pc, [r2], -ip	; <UNPREDICTABLE>
   2f034:	strheq	pc, [r2], -ip	; <UNPREDICTABLE>
   2f038:	strheq	pc, [r2], -ip	; <UNPREDICTABLE>
   2f03c:	strheq	pc, [r2], -ip	; <UNPREDICTABLE>
   2f040:	strheq	pc, [r2], -ip	; <UNPREDICTABLE>
   2f044:	strheq	pc, [r2], -ip	; <UNPREDICTABLE>
   2f048:	strheq	pc, [r2], -ip	; <UNPREDICTABLE>
   2f04c:	andeq	pc, r2, r4, lsl #1
   2f050:	strheq	pc, [r2], -ip	; <UNPREDICTABLE>
   2f054:	strheq	pc, [r2], -ip	; <UNPREDICTABLE>
   2f058:	strheq	pc, [r2], -ip	; <UNPREDICTABLE>
   2f05c:	andeq	pc, r2, r4, lsl #1
   2f060:	strheq	pc, [r2], -ip	; <UNPREDICTABLE>
   2f064:	andeq	pc, r2, r4, lsl #1
   2f068:	strheq	pc, [r2], -ip	; <UNPREDICTABLE>
   2f06c:	strheq	pc, [r2], -ip	; <UNPREDICTABLE>
   2f070:	strheq	pc, [r2], -ip	; <UNPREDICTABLE>
   2f074:	strheq	pc, [r2], -ip	; <UNPREDICTABLE>
   2f078:	strheq	pc, [r2], -ip	; <UNPREDICTABLE>
   2f07c:	strheq	pc, [r2], -ip	; <UNPREDICTABLE>
   2f080:	andeq	pc, r2, r4, lsl #1
   2f084:	mov	r0, sl
   2f088:	mov	r1, #48	; 0x30
   2f08c:	bl	127c8 <strchr@plt>
   2f090:	cmp	r0, #0
   2f094:	beq	2f0b8 <__assert_fail@plt+0x1c608>
   2f098:	ldr	r1, [sp, #32]
   2f09c:	ldrb	r0, [r1, #1]
   2f0a0:	cmp	r0, #66	; 0x42
   2f0a4:	cmpne	r0, #68	; 0x44
   2f0a8:	bne	2f26c <__assert_fail@plt+0x1c7bc>
   2f0ac:	mov	r5, #1000	; 0x3e8
   2f0b0:	mov	r0, #2
   2f0b4:	str	r0, [sp, #28]
   2f0b8:	mov	r3, #0
   2f0bc:	sub	r0, r4, #66	; 0x42
   2f0c0:	cmp	r0, #53	; 0x35
   2f0c4:	bhi	2f260 <__assert_fail@plt+0x1c7b0>
   2f0c8:	add	r1, pc, #0
   2f0cc:	ldr	pc, [r1, r0, lsl #2]
   2f0d0:	andeq	pc, r2, r8, ror #11
   2f0d4:	andeq	pc, r2, r0, ror #4
   2f0d8:	andeq	pc, r2, r0, ror #4
   2f0dc:	andeq	pc, r2, r0, lsl r6	; <UNPREDICTABLE>
   2f0e0:	andeq	pc, r2, r0, ror #4
   2f0e4:	andeq	pc, r2, r8, lsr #3
   2f0e8:	andeq	pc, r2, r0, ror #4
   2f0ec:	andeq	pc, r2, r0, ror #4
   2f0f0:	andeq	pc, r2, r0, ror #4
   2f0f4:	muleq	r2, r0, r2
   2f0f8:	andeq	pc, r2, r0, ror #4
   2f0fc:	ldrdeq	pc, [r2], -r8
   2f100:	andeq	pc, r2, r0, ror #4
   2f104:	andeq	pc, r2, r0, ror #4
   2f108:	andeq	pc, r2, r4, ror #14
   2f10c:	andeq	pc, r2, r0, ror #4
   2f110:	andeq	pc, r2, r0, ror #4
   2f114:	andeq	pc, r2, r0, ror #4
   2f118:	andeq	pc, r2, r4, ror #6
   2f11c:	andeq	pc, r2, r0, ror #4
   2f120:	andeq	pc, r2, r0, ror #4
   2f124:	andeq	pc, r2, r0, ror #4
   2f128:	andeq	pc, r2, r0, ror #4
   2f12c:	andeq	pc, r2, ip, lsl #17
   2f130:	andeq	pc, r2, ip, asr #8
   2f134:	andeq	pc, r2, r0, ror #4
   2f138:	andeq	pc, r2, r0, ror #4
   2f13c:	andeq	pc, r2, r0, ror #4
   2f140:	andeq	pc, r2, r0, ror #4
   2f144:	andeq	pc, r2, r0, ror #4
   2f148:	andeq	pc, r2, r0, ror #4
   2f14c:	andeq	pc, r2, r0, ror #4
   2f150:	andeq	pc, r2, r0, ror #20
   2f154:			; <UNDEFINED> instruction: 0x0002fab8
   2f158:	andeq	pc, r2, r0, ror #4
   2f15c:	andeq	pc, r2, r0, ror #4
   2f160:	andeq	pc, r2, r0, ror #4
   2f164:	andeq	pc, r2, r8, lsr #3
   2f168:	andeq	pc, r2, r0, ror #4
   2f16c:	andeq	pc, r2, r0, ror #4
   2f170:	andeq	pc, r2, r0, ror #4
   2f174:	muleq	r2, r0, r2
   2f178:	andeq	pc, r2, r0, ror #4
   2f17c:	ldrdeq	pc, [r2], -r8
   2f180:	andeq	pc, r2, r0, ror #4
   2f184:	andeq	pc, r2, r0, ror #4
   2f188:	andeq	pc, r2, r0, ror #4
   2f18c:	andeq	pc, r2, r0, ror #4
   2f190:	andeq	pc, r2, r0, ror #4
   2f194:	andeq	pc, r2, r0, ror #4
   2f198:	andeq	pc, r2, r4, ror #6
   2f19c:	andeq	pc, r2, r0, ror #4
   2f1a0:	andeq	pc, r2, r0, ror #4
   2f1a4:	muleq	r2, r4, sl
   2f1a8:	mvn	r0, #0
   2f1ac:	mvn	r1, #0
   2f1b0:	mov	r2, r5
   2f1b4:	mov	sl, r3
   2f1b8:	bl	47618 <__assert_fail@plt+0x34b68>
   2f1bc:	subs	r3, r0, r6
   2f1c0:	umull	r4, r2, r6, r5
   2f1c4:	mov	lr, #0
   2f1c8:	str	r1, [sp, #20]
   2f1cc:	sbcs	r3, r1, r7
   2f1d0:	movwcc	lr, #1
   2f1d4:	mla	ip, r6, sl, r2
   2f1d8:	mov	r2, r1
   2f1dc:	mov	r2, #0
   2f1e0:	cmp	lr, #0
   2f1e4:	mla	r7, r7, r5, ip
   2f1e8:	mvnne	r4, #0
   2f1ec:	mvnne	r7, #0
   2f1f0:	subs	r6, r0, r4
   2f1f4:	sbcs	r6, r1, r7
   2f1f8:	umull	r3, r6, r4, r5
   2f1fc:	movwcc	r2, #1
   2f200:	cmp	r2, #0
   2f204:	mvnne	r3, #0
   2f208:	cmp	r2, #0
   2f20c:	str	r6, [sp, #16]
   2f210:	umull	r6, ip, r3, r5
   2f214:	mla	r1, r3, sl, ip
   2f218:	ldr	ip, [sp, #16]
   2f21c:	str	r1, [sp, #12]
   2f220:	mla	r4, r4, sl, ip
   2f224:	mla	r4, r7, r5, r4
   2f228:	mvnne	r4, #0
   2f22c:	subs	r0, r0, r3
   2f230:	ldr	r0, [sp, #20]
   2f234:	ldr	r7, [sp, #12]
   2f238:	sbcs	r0, r0, r4
   2f23c:	mov	r0, #0
   2f240:	mla	r7, r4, r5, r7
   2f244:	movwcc	r0, #1
   2f248:	cmp	r0, #0
   2f24c:	mov	r1, r0
   2f250:	orr	r0, lr, r2
   2f254:	mvnne	r7, #0
   2f258:	mvnne	r6, #0
   2f25c:	b	2f884 <__assert_fail@plt+0x1cdd4>
   2f260:	ldr	r0, [sp, #36]	; 0x24
   2f264:	orr	r8, r8, #2
   2f268:	b	2fadc <__assert_fail@plt+0x1d02c>
   2f26c:	cmp	r0, #105	; 0x69
   2f270:	mov	r3, #0
   2f274:	bne	2f0bc <__assert_fail@plt+0x1c60c>
   2f278:	ldrb	r0, [r1, #2]
   2f27c:	mov	r1, #1
   2f280:	cmp	r0, #66	; 0x42
   2f284:	movweq	r1, #3
   2f288:	str	r1, [sp, #28]
   2f28c:	b	2f0bc <__assert_fail@plt+0x1c60c>
   2f290:	mvn	r0, #0
   2f294:	mvn	r1, #0
   2f298:	mov	r2, r5
   2f29c:	mov	r4, r3
   2f2a0:	bl	47618 <__assert_fail@plt+0x34b68>
   2f2a4:	subs	r0, r0, r6
   2f2a8:	mov	r2, #0
   2f2ac:	sbcs	r0, r1, r7
   2f2b0:	umull	r0, r1, r6, r5
   2f2b4:	movwcc	r2, #1
   2f2b8:	cmp	r2, #0
   2f2bc:	mla	r1, r6, r4, r1
   2f2c0:	mov	r3, r2
   2f2c4:	mvnne	r0, #0
   2f2c8:	mla	r7, r7, r5, r1
   2f2cc:	mvnne	r7, #0
   2f2d0:	mov	r6, r0
   2f2d4:	b	2fab8 <__assert_fail@plt+0x1d008>
   2f2d8:	mvn	r0, #0
   2f2dc:	mvn	r1, #0
   2f2e0:	mov	r2, r5
   2f2e4:	str	r3, [sp, #24]
   2f2e8:	bl	47618 <__assert_fail@plt+0x34b68>
   2f2ec:	subs	r3, r0, r6
   2f2f0:	mov	ip, r0
   2f2f4:	umull	r4, r0, r6, r5
   2f2f8:	mov	sl, #0
   2f2fc:	sbcs	r3, r1, r7
   2f300:	mov	r3, #0
   2f304:	movwcc	r3, #1
   2f308:	cmp	r3, #0
   2f30c:	str	r0, [sp, #20]
   2f310:	ldr	r0, [sp, #24]
   2f314:	mvnne	r4, #0
   2f318:	cmp	r3, #0
   2f31c:	umull	lr, r2, r4, r5
   2f320:	mla	r2, r4, r0, r2
   2f324:	str	r2, [sp, #16]
   2f328:	ldr	r2, [sp, #20]
   2f32c:	mla	r6, r6, r0, r2
   2f330:	ldr	r0, [sp, #16]
   2f334:	mla	r6, r7, r5, r6
   2f338:	mvnne	r6, #0
   2f33c:	mla	r7, r6, r5, r0
   2f340:	subs	r0, ip, r4
   2f344:	sbcs	r0, r1, r6
   2f348:	movwcc	sl, #1
   2f34c:	cmp	sl, #0
   2f350:	orr	r3, r3, sl
   2f354:	mvnne	lr, #0
   2f358:	mvnne	r7, #0
   2f35c:	mov	r6, lr
   2f360:	b	2fab8 <__assert_fail@plt+0x1d008>
   2f364:	mvn	r0, #0
   2f368:	mvn	r1, #0
   2f36c:	mov	r2, r5
   2f370:	mov	sl, r3
   2f374:	bl	47618 <__assert_fail@plt+0x34b68>
   2f378:	subs	r3, r0, r6
   2f37c:	mov	ip, r1
   2f380:	umull	r2, lr, r6, r5
   2f384:	str	r0, [sp, #20]
   2f388:	sbcs	r3, r1, r7
   2f38c:	mov	r1, #0
   2f390:	str	ip, [sp, #16]
   2f394:	movwcc	r1, #1
   2f398:	mla	r6, r6, sl, lr
   2f39c:	mov	lr, #0
   2f3a0:	cmp	r1, #0
   2f3a4:	mla	r7, r7, r5, r6
   2f3a8:	mvnne	r2, #0
   2f3ac:	cmp	r1, #0
   2f3b0:	umull	r3, r4, r2, r5
   2f3b4:	mvnne	r7, #0
   2f3b8:	mla	r4, r2, sl, r4
   2f3bc:	subs	r2, r0, r2
   2f3c0:	sbcs	r2, ip, r7
   2f3c4:	mla	r4, r7, r5, r4
   2f3c8:	mov	r2, #0
   2f3cc:	movwcc	lr, #1
   2f3d0:	cmp	lr, #0
   2f3d4:	mvnne	r3, #0
   2f3d8:	mvnne	r4, #0
   2f3dc:	subs	r7, r0, r3
   2f3e0:	mov	r0, r5
   2f3e4:	sbcs	r7, ip, r4
   2f3e8:	umull	r5, r7, r3, r5
   2f3ec:	movwcc	r2, #1
   2f3f0:	cmp	r2, #0
   2f3f4:	mla	r3, r3, sl, r7
   2f3f8:	mvnne	r5, #0
   2f3fc:	cmp	r2, #0
   2f400:	mla	r3, r4, r0, r3
   2f404:	umull	r6, ip, r5, r0
   2f408:	mvnne	r3, #0
   2f40c:	mla	ip, r5, sl, ip
   2f410:	mla	r7, r3, r0, ip
   2f414:	ldr	r0, [sp, #20]
   2f418:	subs	r0, r0, r5
   2f41c:	ldr	r0, [sp, #16]
   2f420:	sbcs	r0, r0, r3
   2f424:	mov	r0, #0
   2f428:	movwcc	r0, #1
   2f42c:	cmp	r0, #0
   2f430:	mov	r3, r0
   2f434:	orr	r0, r1, lr
   2f438:	orr	r0, r0, r2
   2f43c:	mvnne	r7, #0
   2f440:	mvnne	r6, #0
   2f444:	orr	r3, r0, r3
   2f448:	b	2fab8 <__assert_fail@plt+0x1d008>
   2f44c:	mvn	r0, #0
   2f450:	mvn	r1, #0
   2f454:	mov	r2, r5
   2f458:	mov	r4, r3
   2f45c:	str	r3, [sp, #24]
   2f460:	bl	47618 <__assert_fail@plt+0x34b68>
   2f464:	umull	r3, r2, r6, r5
   2f468:	mla	r2, r6, r4, r2
   2f46c:	subs	r6, r0, r6
   2f470:	sbcs	r6, r1, r7
   2f474:	mov	r6, #0
   2f478:	mla	r2, r7, r5, r2
   2f47c:	mov	r7, #0
   2f480:	movwcc	r6, #1
   2f484:	cmp	r6, #0
   2f488:	str	r6, [sp, #20]
   2f48c:	mvnne	r3, #0
   2f490:	mvnne	r2, #0
   2f494:	subs	r4, r0, r3
   2f498:	umull	r6, ip, r3, r5
   2f49c:	sbcs	r4, r1, r2
   2f4a0:	ldr	r4, [sp, #24]
   2f4a4:	movwcc	r7, #1
   2f4a8:	cmp	r7, #0
   2f4ac:	mov	lr, r7
   2f4b0:	str	r7, [sp, #16]
   2f4b4:	mvnne	r6, #0
   2f4b8:	cmp	lr, #0
   2f4bc:	mov	lr, #0
   2f4c0:	umull	sl, r7, r6, r5
   2f4c4:	mla	r3, r3, r4, ip
   2f4c8:	mla	r2, r2, r5, r3
   2f4cc:	mvnne	r2, #0
   2f4d0:	subs	r3, r0, r6
   2f4d4:	mla	r7, r6, r4, r7
   2f4d8:	mov	r4, r0
   2f4dc:	mov	r0, #0
   2f4e0:	mla	r7, r2, r5, r7
   2f4e4:	sbcs	r2, r1, r2
   2f4e8:	mov	r3, r4
   2f4ec:	movwcc	r0, #1
   2f4f0:	str	r3, [sp, #4]
   2f4f4:	cmp	r0, #0
   2f4f8:	str	r0, [sp, #12]
   2f4fc:	mov	r0, r1
   2f500:	mvnne	sl, #0
   2f504:	mvnne	r7, #0
   2f508:	str	r0, [sp, #8]
   2f50c:	subs	r2, r4, sl
   2f510:	ldr	r4, [sp, #24]
   2f514:	sbcs	r2, r1, r7
   2f518:	umull	r6, r2, sl, r5
   2f51c:	movwcc	lr, #1
   2f520:	cmp	lr, #0
   2f524:	mvnne	r6, #0
   2f528:	mla	r2, sl, r4, r2
   2f52c:	cmp	lr, #0
   2f530:	umull	r1, ip, r6, r5
   2f534:	mla	r2, r7, r5, r2
   2f538:	mvnne	r2, #0
   2f53c:	mla	ip, r6, r4, ip
   2f540:	subs	r6, r3, r6
   2f544:	mla	r7, r2, r5, ip
   2f548:	sbcs	r2, r0, r2
   2f54c:	mov	ip, #0
   2f550:	mov	r2, #0
   2f554:	movwcc	ip, #1
   2f558:	cmp	ip, #0
   2f55c:	mvnne	r1, #0
   2f560:	mvnne	r7, #0
   2f564:	subs	r6, r3, r1
   2f568:	ldr	r3, [sp, #24]
   2f56c:	sbcs	r6, r0, r7
   2f570:	umull	r0, sl, r1, r5
   2f574:	movwcc	r2, #1
   2f578:	cmp	r2, #0
   2f57c:	mvnne	r0, #0
   2f580:	mla	r1, r1, r3, sl
   2f584:	cmp	r2, #0
   2f588:	umull	r6, r4, r0, r5
   2f58c:	mla	r1, r7, r5, r1
   2f590:	mvnne	r1, #0
   2f594:	mla	r4, r0, r3, r4
   2f598:	ldr	r3, [sp, #4]
   2f59c:	mla	r7, r1, r5, r4
   2f5a0:	ldr	r5, [sp, #16]
   2f5a4:	subs	r0, r3, r0
   2f5a8:	ldr	r0, [sp, #8]
   2f5ac:	sbcs	r0, r0, r1
   2f5b0:	mov	r0, #0
   2f5b4:	movwcc	r0, #1
   2f5b8:	cmp	r0, #0
   2f5bc:	mov	r1, r0
   2f5c0:	ldr	r0, [sp, #20]
   2f5c4:	mvnne	r7, #0
   2f5c8:	mvnne	r6, #0
   2f5cc:	orr	r0, r0, r5
   2f5d0:	ldr	r5, [sp, #12]
   2f5d4:	orr	r0, r0, r5
   2f5d8:	orr	r0, r0, lr
   2f5dc:	orr	r0, r0, ip
   2f5e0:	orr	r0, r0, r2
   2f5e4:	b	2fa54 <__assert_fail@plt+0x1cfa4>
   2f5e8:	mov	r1, #0
   2f5ec:	lsl	r2, r7, #10
   2f5f0:	lsl	r0, r6, #10
   2f5f4:	lsr	r3, r7, #22
   2f5f8:	cmp	r1, r7, lsr #22
   2f5fc:	orr	r2, r2, r6, lsr #22
   2f600:	mvnne	r0, #0
   2f604:	movwne	r3, #1
   2f608:	cmp	r1, r7, lsr #22
   2f60c:	b	2fa84 <__assert_fail@plt+0x1cfd4>
   2f610:	mvn	r0, #0
   2f614:	mvn	r1, #0
   2f618:	mov	r2, r5
   2f61c:	mov	sl, r3
   2f620:	bl	47618 <__assert_fail@plt+0x34b68>
   2f624:	subs	r2, r0, r6
   2f628:	mov	ip, r0
   2f62c:	mov	r0, #0
   2f630:	sbcs	r2, r1, r7
   2f634:	umull	r4, r2, r6, r5
   2f638:	movwcc	r0, #1
   2f63c:	cmp	r0, #0
   2f640:	mla	r2, r6, sl, r2
   2f644:	str	r0, [sp, #20]
   2f648:	mvnne	r4, #0
   2f64c:	cmp	r0, #0
   2f650:	mla	r2, r7, r5, r2
   2f654:	mov	r0, #0
   2f658:	umull	lr, r3, r4, r5
   2f65c:	mvnne	r2, #0
   2f660:	mla	r3, r4, sl, r3
   2f664:	mla	r6, r2, r5, r3
   2f668:	subs	r3, ip, r4
   2f66c:	mov	r3, r1
   2f670:	sbcs	r2, r1, r2
   2f674:	str	r3, [sp, #8]
   2f678:	movwcc	r0, #1
   2f67c:	cmp	r0, #0
   2f680:	str	r0, [sp, #16]
   2f684:	mov	r0, ip
   2f688:	mvnne	lr, #0
   2f68c:	mvnne	r6, #0
   2f690:	str	r0, [sp, #12]
   2f694:	subs	r2, ip, lr
   2f698:	umull	r7, r4, lr, r5
   2f69c:	sbcs	r2, r1, r6
   2f6a0:	mov	r2, #0
   2f6a4:	movwcc	r2, #1
   2f6a8:	mla	r4, lr, sl, r4
   2f6ac:	cmp	r2, #0
   2f6b0:	mla	r6, r6, r5, r4
   2f6b4:	mov	r4, #0
   2f6b8:	mvnne	r7, #0
   2f6bc:	cmp	r2, #0
   2f6c0:	umull	r1, ip, r7, r5
   2f6c4:	mvnne	r6, #0
   2f6c8:	mla	ip, r7, sl, ip
   2f6cc:	subs	r7, r0, r7
   2f6d0:	sbcs	r7, r3, r6
   2f6d4:	mla	lr, r6, r5, ip
   2f6d8:	mov	ip, #0
   2f6dc:	movwcc	ip, #1
   2f6e0:	cmp	ip, #0
   2f6e4:	mvnne	r1, #0
   2f6e8:	mvnne	lr, #0
   2f6ec:	subs	r7, r0, r1
   2f6f0:	sbcs	r7, r3, lr
   2f6f4:	umull	r0, r7, r1, r5
   2f6f8:	movwcc	r4, #1
   2f6fc:	cmp	r4, #0
   2f700:	mla	r1, r1, sl, r7
   2f704:	mvnne	r0, #0
   2f708:	cmp	r4, #0
   2f70c:	mla	r1, lr, r5, r1
   2f710:	umull	r6, r3, r0, r5
   2f714:	mvnne	r1, #0
   2f718:	mla	r3, r0, sl, r3
   2f71c:	mla	r7, r1, r5, r3
   2f720:	ldr	r3, [sp, #12]
   2f724:	subs	r0, r3, r0
   2f728:	ldr	r0, [sp, #8]
   2f72c:	ldr	r3, [sp, #16]
   2f730:	sbcs	r0, r0, r1
   2f734:	mov	r0, #0
   2f738:	movwcc	r0, #1
   2f73c:	cmp	r0, #0
   2f740:	mov	r1, r0
   2f744:	ldr	r0, [sp, #20]
   2f748:	mvnne	r7, #0
   2f74c:	mvnne	r6, #0
   2f750:	orr	r0, r0, r3
   2f754:	orr	r0, r0, r2
   2f758:	orr	r0, r0, ip
   2f75c:	orr	r0, r0, r4
   2f760:	b	2f884 <__assert_fail@plt+0x1cdd4>
   2f764:	mvn	r0, #0
   2f768:	mvn	r1, #0
   2f76c:	mov	r2, r5
   2f770:	mov	sl, r3
   2f774:	bl	47618 <__assert_fail@plt+0x34b68>
   2f778:	umull	r3, r2, r6, r5
   2f77c:	mov	lr, r1
   2f780:	mov	r1, r0
   2f784:	mla	r2, r6, sl, r2
   2f788:	subs	r6, r0, r6
   2f78c:	mov	r0, #0
   2f790:	sbcs	r6, lr, r7
   2f794:	mla	r2, r7, r5, r2
   2f798:	movwcc	r0, #1
   2f79c:	cmp	r0, #0
   2f7a0:	str	r0, [sp, #20]
   2f7a4:	mov	r0, r1
   2f7a8:	mvnne	r3, #0
   2f7ac:	mvnne	r2, #0
   2f7b0:	str	r0, [sp, #16]
   2f7b4:	subs	r4, r1, r3
   2f7b8:	umull	r7, ip, r3, r5
   2f7bc:	sbcs	r4, lr, r2
   2f7c0:	mov	r4, #0
   2f7c4:	movwcc	r4, #1
   2f7c8:	mla	r3, r3, sl, ip
   2f7cc:	mov	ip, #0
   2f7d0:	cmp	r4, #0
   2f7d4:	mla	r2, r2, r5, r3
   2f7d8:	mvnne	r7, #0
   2f7dc:	cmp	r4, #0
   2f7e0:	umull	r1, r6, r7, r5
   2f7e4:	mvnne	r2, #0
   2f7e8:	mla	r6, r7, sl, r6
   2f7ec:	mla	r3, r2, r5, r6
   2f7f0:	subs	r6, r0, r7
   2f7f4:	sbcs	r2, lr, r2
   2f7f8:	mov	r2, #0
   2f7fc:	movwcc	ip, #1
   2f800:	cmp	ip, #0
   2f804:	mvnne	r1, #0
   2f808:	mvnne	r3, #0
   2f80c:	subs	r6, r0, r1
   2f810:	sbcs	r6, lr, r3
   2f814:	umull	r0, r6, r1, r5
   2f818:	movwcc	r2, #1
   2f81c:	cmp	r2, #0
   2f820:	mvnne	r0, #0
   2f824:	cmp	r2, #0
   2f828:	str	r6, [sp, #12]
   2f82c:	umull	r6, r7, r0, r5
   2f830:	mla	r7, r0, sl, r7
   2f834:	str	r7, [sp, #8]
   2f838:	ldr	r7, [sp, #12]
   2f83c:	mla	r1, r1, sl, r7
   2f840:	mla	r1, r3, r5, r1
   2f844:	ldr	r3, [sp, #8]
   2f848:	mvnne	r1, #0
   2f84c:	mla	r7, r1, r5, r3
   2f850:	ldr	r3, [sp, #16]
   2f854:	subs	r0, r3, r0
   2f858:	sbcs	r0, lr, r1
   2f85c:	mov	r0, #0
   2f860:	movwcc	r0, #1
   2f864:	cmp	r0, #0
   2f868:	mov	r1, r0
   2f86c:	ldr	r0, [sp, #20]
   2f870:	mvnne	r7, #0
   2f874:	mvnne	r6, #0
   2f878:	orr	r0, r0, r4
   2f87c:	orr	r0, r0, ip
   2f880:	orr	r0, r0, r2
   2f884:	orr	r3, r0, r1
   2f888:	b	2fab8 <__assert_fail@plt+0x1d008>
   2f88c:	mvn	r0, #0
   2f890:	mvn	r1, #0
   2f894:	mov	r2, r5
   2f898:	mov	sl, r3
   2f89c:	bl	47618 <__assert_fail@plt+0x34b68>
   2f8a0:	mov	ip, r1
   2f8a4:	subs	r1, r0, r6
   2f8a8:	umull	r3, lr, r6, r5
   2f8ac:	mov	r2, r5
   2f8b0:	sbcs	r1, ip, r7
   2f8b4:	mov	r1, #0
   2f8b8:	str	ip, [sp, #4]
   2f8bc:	movwcc	r1, #1
   2f8c0:	mla	r6, r6, sl, lr
   2f8c4:	cmp	r1, #0
   2f8c8:	mla	r7, r7, r2, r6
   2f8cc:	str	r1, [sp, #20]
   2f8d0:	mvnne	r3, #0
   2f8d4:	cmp	r1, #0
   2f8d8:	mov	r1, r0
   2f8dc:	umull	r4, r5, r3, r5
   2f8e0:	mvnne	r7, #0
   2f8e4:	mov	lr, r1
   2f8e8:	mla	r5, r3, sl, r5
   2f8ec:	subs	r3, r0, r3
   2f8f0:	sbcs	r0, ip, r7
   2f8f4:	mov	r0, #0
   2f8f8:	mla	r5, r7, r2, r5
   2f8fc:	movwcc	r0, #1
   2f900:	cmp	r0, #0
   2f904:	str	r0, [sp, #16]
   2f908:	mvnne	r4, #0
   2f90c:	mvnne	r5, #0
   2f910:	subs	r0, r1, r4
   2f914:	mov	r1, #0
   2f918:	sbcs	r0, ip, r5
   2f91c:	umull	r3, r0, r4, r2
   2f920:	movwcc	r1, #1
   2f924:	cmp	r1, #0
   2f928:	mla	r0, r4, sl, r0
   2f92c:	mov	r4, lr
   2f930:	str	r1, [sp, #12]
   2f934:	mvnne	r3, #0
   2f938:	cmp	r1, #0
   2f93c:	mla	r0, r5, r2, r0
   2f940:	str	r4, [sp]
   2f944:	umull	r7, r6, r3, r2
   2f948:	mvnne	r0, #0
   2f94c:	mla	r6, r3, sl, r6
   2f950:	subs	r3, lr, r3
   2f954:	mov	r3, #0
   2f958:	mla	r5, r0, r2, r6
   2f95c:	sbcs	r0, ip, r0
   2f960:	mov	r0, #0
   2f964:	movwcc	r0, #1
   2f968:	cmp	r0, #0
   2f96c:	str	r0, [sp, #8]
   2f970:	mvnne	r7, #0
   2f974:	mvnne	r5, #0
   2f978:	subs	r0, lr, r7
   2f97c:	sbcs	r0, ip, r5
   2f980:	umull	r6, r0, r7, r2
   2f984:	movwcc	r3, #1
   2f988:	cmp	r3, #0
   2f98c:	mla	r7, r7, sl, r0
   2f990:	mov	r0, ip
   2f994:	mvnne	r6, #0
   2f998:	cmp	r3, #0
   2f99c:	mla	r7, r5, r2, r7
   2f9a0:	mov	r5, #0
   2f9a4:	umull	r1, lr, r6, r2
   2f9a8:	mvnne	r7, #0
   2f9ac:	mla	lr, r6, sl, lr
   2f9b0:	subs	r6, r4, r6
   2f9b4:	mla	lr, r7, r2, lr
   2f9b8:	sbcs	r7, ip, r7
   2f9bc:	mov	ip, #0
   2f9c0:	movwcc	ip, #1
   2f9c4:	cmp	ip, #0
   2f9c8:	mvnne	r1, #0
   2f9cc:	mvnne	lr, #0
   2f9d0:	subs	r7, r4, r1
   2f9d4:	sbcs	r7, r0, lr
   2f9d8:	umull	r0, r7, r1, r2
   2f9dc:	movwcc	r5, #1
   2f9e0:	cmp	r5, #0
   2f9e4:	mla	r1, r1, sl, r7
   2f9e8:	mvnne	r0, #0
   2f9ec:	cmp	r5, #0
   2f9f0:	mla	r1, lr, r2, r1
   2f9f4:	umull	r6, r4, r0, r2
   2f9f8:	mvnne	r1, #0
   2f9fc:	mla	r4, r0, sl, r4
   2fa00:	mla	r7, r1, r2, r4
   2fa04:	ldr	r2, [sp]
   2fa08:	subs	r0, r2, r0
   2fa0c:	ldr	r0, [sp, #4]
   2fa10:	ldr	r2, [sp, #16]
   2fa14:	sbcs	r0, r0, r1
   2fa18:	mov	r0, #0
   2fa1c:	movwcc	r0, #1
   2fa20:	cmp	r0, #0
   2fa24:	mov	r1, r0
   2fa28:	ldr	r0, [sp, #20]
   2fa2c:	mvnne	r7, #0
   2fa30:	mvnne	r6, #0
   2fa34:	orr	r0, r0, r2
   2fa38:	ldr	r2, [sp, #12]
   2fa3c:	orr	r0, r0, r2
   2fa40:	ldr	r2, [sp, #8]
   2fa44:	orr	r0, r0, r2
   2fa48:	orr	r0, r0, r3
   2fa4c:	orr	r0, r0, ip
   2fa50:	orr	r0, r0, r5
   2fa54:	orr	r0, r0, r1
   2fa58:	and	r3, r0, #1
   2fa5c:	b	2fab8 <__assert_fail@plt+0x1d008>
   2fa60:	mov	r1, #0
   2fa64:	lsl	r2, r7, #9
   2fa68:	lsl	r0, r6, #9
   2fa6c:	lsr	r3, r7, #23
   2fa70:	cmp	r1, r7, lsr #23
   2fa74:	orr	r2, r2, r6, lsr #23
   2fa78:	mvnne	r0, #0
   2fa7c:	movwne	r3, #1
   2fa80:	cmp	r1, r7, lsr #23
   2fa84:	mvnne	r2, #0
   2fa88:	mov	r6, r0
   2fa8c:	mov	r7, r2
   2fa90:	b	2fab8 <__assert_fail@plt+0x1d008>
   2fa94:	lsl	r1, r7, #1
   2fa98:	cmp	r7, #0
   2fa9c:	lsl	r0, r6, #1
   2faa0:	lsr	r3, r7, #31
   2faa4:	orr	r1, r1, r6, lsr #31
   2faa8:	mvnmi	r0, #0
   2faac:	mvnmi	r1, #0
   2fab0:	mov	r6, r0
   2fab4:	mov	r7, r1
   2fab8:	ldr	r1, [sp, #32]
   2fabc:	ldr	r2, [sp, #28]
   2fac0:	orr	r8, r3, r8
   2fac4:	add	r0, r1, r2
   2fac8:	str	r0, [r9]
   2facc:	ldrb	r0, [r1, r2]
   2fad0:	cmp	r0, #0
   2fad4:	orrne	r8, r8, #2
   2fad8:	ldr	r0, [sp, #36]	; 0x24
   2fadc:	strd	r6, [r0]
   2fae0:	mov	r0, r8
   2fae4:	sub	sp, fp, #28
   2fae8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2faec:	movw	r0, #54695	; 0xd5a7
   2faf0:	movw	r1, #54733	; 0xd5cd
   2faf4:	movw	r3, #54826	; 0xd62a
   2faf8:	mov	r2, #84	; 0x54
   2fafc:	movt	r0, #4
   2fb00:	movt	r1, #4
   2fb04:	movt	r3, #4
   2fb08:	bl	12ab0 <__assert_fail@plt>
   2fb0c:	push	{r4, sl, fp, lr}
   2fb10:	add	fp, sp, #8
   2fb14:	sub	sp, sp, #8
   2fb18:	movw	r0, #58712	; 0xe558
   2fb1c:	mov	r4, #0
   2fb20:	mov	r1, sp
   2fb24:	mov	r2, #10
   2fb28:	movt	r0, #5
   2fb2c:	str	r4, [sp, #4]
   2fb30:	str	r4, [sp]
   2fb34:	ldr	r3, [r0]
   2fb38:	add	r0, sp, #4
   2fb3c:	bl	123cc <__getdelim@plt>
   2fb40:	cmp	r0, #1
   2fb44:	blt	2fb78 <__assert_fail@plt+0x1d0c8>
   2fb48:	sub	r1, r0, #1
   2fb4c:	ldr	r0, [sp, #4]
   2fb50:	ldrb	r2, [r0, r1]
   2fb54:	cmp	r2, #10
   2fb58:	bne	2fb68 <__assert_fail@plt+0x1d0b8>
   2fb5c:	mov	r2, #0
   2fb60:	strb	r2, [r0, r1]
   2fb64:	ldr	r0, [sp, #4]
   2fb68:	bl	128f4 <rpmatch@plt>
   2fb6c:	cmp	r0, #0
   2fb70:	mov	r4, #0
   2fb74:	movwgt	r4, #1
   2fb78:	ldr	r0, [sp, #4]
   2fb7c:	bl	30174 <__assert_fail@plt+0x1d6c4>
   2fb80:	mov	r0, r4
   2fb84:	sub	sp, fp, #8
   2fb88:	pop	{r4, sl, fp, pc}
   2fb8c:	clz	r2, r1
   2fb90:	clz	r3, r0
   2fb94:	lsr	r2, r2, #5
   2fb98:	lsr	r3, r3, #5
   2fb9c:	orrs	r2, r3, r2
   2fba0:	movwne	r1, #1
   2fba4:	movwne	r0, #1
   2fba8:	cmp	r1, #0
   2fbac:	beq	2fbdc <__assert_fail@plt+0x1d12c>
   2fbb0:	mvn	r2, #-2147483648	; 0x80000000
   2fbb4:	udiv	r2, r2, r1
   2fbb8:	cmp	r2, r0
   2fbbc:	bcs	2fbdc <__assert_fail@plt+0x1d12c>
   2fbc0:	push	{fp, lr}
   2fbc4:	mov	fp, sp
   2fbc8:	bl	12804 <__errno_location@plt>
   2fbcc:	mov	r1, #12
   2fbd0:	str	r1, [r0]
   2fbd4:	mov	r0, #0
   2fbd8:	pop	{fp, pc}
   2fbdc:	b	12384 <calloc@plt>
   2fbe0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2fbe4:	add	fp, sp, #28
   2fbe8:	sub	sp, sp, #4
   2fbec:	mov	r4, r0
   2fbf0:	bl	125d0 <chdir@plt>
   2fbf4:	cmp	r0, #0
   2fbf8:	beq	2fcbc <__assert_fail@plt+0x1d20c>
   2fbfc:	mov	r6, r0
   2fc00:	bl	12804 <__errno_location@plt>
   2fc04:	mov	r9, r0
   2fc08:	ldr	r0, [r0]
   2fc0c:	cmp	r0, #36	; 0x24
   2fc10:	bne	2feac <__assert_fail@plt+0x1d3fc>
   2fc14:	mov	r0, r4
   2fc18:	bl	127bc <strlen@plt>
   2fc1c:	cmp	r0, #0
   2fc20:	beq	2fed0 <__assert_fail@plt+0x1d420>
   2fc24:	mov	r7, r0
   2fc28:	mov	r0, #0
   2fc2c:	cmp	r0, r7, lsr #12
   2fc30:	beq	2fee8 <__assert_fail@plt+0x1d438>
   2fc34:	movw	r1, #33590	; 0x8336
   2fc38:	mov	r0, r4
   2fc3c:	movt	r1, #4
   2fc40:	bl	12aa4 <strspn@plt>
   2fc44:	cmp	r0, #0
   2fc48:	beq	2fcc4 <__assert_fail@plt+0x1d214>
   2fc4c:	mov	r6, r0
   2fc50:	cmp	r0, #2
   2fc54:	bne	2fcd0 <__assert_fail@plt+0x1d220>
   2fc58:	add	r0, r4, #3
   2fc5c:	sub	r2, r7, #3
   2fc60:	mov	r1, #47	; 0x2f
   2fc64:	mov	r8, #47	; 0x2f
   2fc68:	bl	12894 <memchr@plt>
   2fc6c:	cmp	r0, #0
   2fc70:	beq	2fe58 <__assert_fail@plt+0x1d3a8>
   2fc74:	mov	r6, r0
   2fc78:	mov	r0, #0
   2fc7c:	mov	r1, r4
   2fc80:	mov	r2, #18688	; 0x4900
   2fc84:	strb	r0, [r6]
   2fc88:	mvn	r0, #99	; 0x63
   2fc8c:	bl	127e0 <openat64@plt>
   2fc90:	cmp	r0, #0
   2fc94:	strb	r8, [r6]
   2fc98:	bmi	2fe50 <__assert_fail@plt+0x1d3a0>
   2fc9c:	movw	r1, #33590	; 0x8336
   2fca0:	add	r6, r6, #1
   2fca4:	mov	r5, r0
   2fca8:	movt	r1, #4
   2fcac:	mov	r0, r6
   2fcb0:	bl	12aa4 <strspn@plt>
   2fcb4:	add	r6, r6, r0
   2fcb8:	b	2fcf4 <__assert_fail@plt+0x1d244>
   2fcbc:	mov	r6, #0
   2fcc0:	b	2feac <__assert_fail@plt+0x1d3fc>
   2fcc4:	mvn	r5, #99	; 0x63
   2fcc8:	mov	r6, r4
   2fccc:	b	2fcf4 <__assert_fail@plt+0x1d244>
   2fcd0:	movw	r1, #33590	; 0x8336
   2fcd4:	mvn	r0, #99	; 0x63
   2fcd8:	mov	r2, #18688	; 0x4900
   2fcdc:	movt	r1, #4
   2fce0:	bl	127e0 <openat64@plt>
   2fce4:	cmp	r0, #0
   2fce8:	bmi	2fe50 <__assert_fail@plt+0x1d3a0>
   2fcec:	mov	r5, r0
   2fcf0:	add	r6, r4, r6
   2fcf4:	ldrb	r0, [r6]
   2fcf8:	cmp	r0, #47	; 0x2f
   2fcfc:	beq	2ff00 <__assert_fail@plt+0x1d450>
   2fd00:	add	sl, r4, r7
   2fd04:	cmp	r6, sl
   2fd08:	bhi	2ff18 <__assert_fail@plt+0x1d468>
   2fd0c:	sub	r0, sl, r6
   2fd10:	str	r9, [sp]
   2fd14:	cmp	r0, #4096	; 0x1000
   2fd18:	blt	2fdd0 <__assert_fail@plt+0x1d320>
   2fd1c:	movw	r9, #33590	; 0x8336
   2fd20:	mov	r8, #0
   2fd24:	movt	r9, #4
   2fd28:	b	2fd54 <__assert_fail@plt+0x1d2a4>
   2fd2c:	mov	r0, #47	; 0x2f
   2fd30:	mov	r1, r9
   2fd34:	strb	r0, [r4], #1
   2fd38:	mov	r0, r4
   2fd3c:	bl	12aa4 <strspn@plt>
   2fd40:	add	r6, r4, r0
   2fd44:	mov	r5, r7
   2fd48:	sub	r0, sl, r6
   2fd4c:	cmp	r0, #4096	; 0x1000
   2fd50:	blt	2fdd4 <__assert_fail@plt+0x1d324>
   2fd54:	mov	r0, r6
   2fd58:	mov	r1, #47	; 0x2f
   2fd5c:	mov	r2, #4096	; 0x1000
   2fd60:	bl	127ec <memrchr@plt>
   2fd64:	cmp	r0, #0
   2fd68:	beq	2fe64 <__assert_fail@plt+0x1d3b4>
   2fd6c:	mov	r4, r0
   2fd70:	strb	r8, [r0], -r6
   2fd74:	cmp	r0, #4096	; 0x1000
   2fd78:	bge	2feb8 <__assert_fail@plt+0x1d408>
   2fd7c:	mov	r0, r5
   2fd80:	mov	r1, r6
   2fd84:	mov	r2, #18688	; 0x4900
   2fd88:	bl	127e0 <openat64@plt>
   2fd8c:	cmp	r0, #0
   2fd90:	bmi	2fe74 <__assert_fail@plt+0x1d3c4>
   2fd94:	mov	r7, r0
   2fd98:	cmp	r5, #0
   2fd9c:	bmi	2fd2c <__assert_fail@plt+0x1d27c>
   2fda0:	mov	r0, r5
   2fda4:	bl	12a68 <close@plt>
   2fda8:	cmp	r0, #0
   2fdac:	beq	2fd2c <__assert_fail@plt+0x1d27c>
   2fdb0:	movw	r0, #55007	; 0xd6df
   2fdb4:	movw	r1, #54913	; 0xd681
   2fdb8:	movw	r3, #55020	; 0xd6ec
   2fdbc:	mov	r2, #64	; 0x40
   2fdc0:	movt	r0, #4
   2fdc4:	movt	r1, #4
   2fdc8:	movt	r3, #4
   2fdcc:	bl	12ab0 <__assert_fail@plt>
   2fdd0:	mov	r7, r5
   2fdd4:	cmp	r6, sl
   2fdd8:	bcs	2fe18 <__assert_fail@plt+0x1d368>
   2fddc:	mov	r0, r7
   2fde0:	mov	r1, r6
   2fde4:	mov	r2, #18688	; 0x4900
   2fde8:	bl	127e0 <openat64@plt>
   2fdec:	ldr	r9, [sp]
   2fdf0:	cmp	r0, #0
   2fdf4:	bmi	2fe84 <__assert_fail@plt+0x1d3d4>
   2fdf8:	mov	r5, r0
   2fdfc:	cmp	r7, #0
   2fe00:	bmi	2fe20 <__assert_fail@plt+0x1d370>
   2fe04:	mov	r0, r7
   2fe08:	bl	12a68 <close@plt>
   2fe0c:	cmp	r0, #0
   2fe10:	beq	2fe20 <__assert_fail@plt+0x1d370>
   2fe14:	b	2fdb0 <__assert_fail@plt+0x1d300>
   2fe18:	ldr	r9, [sp]
   2fe1c:	mov	r5, r7
   2fe20:	mov	r0, r5
   2fe24:	bl	129b4 <fchdir@plt>
   2fe28:	cmp	r0, #0
   2fe2c:	bne	2fe88 <__assert_fail@plt+0x1d3d8>
   2fe30:	mov	r6, #0
   2fe34:	cmp	r5, #0
   2fe38:	bmi	2feac <__assert_fail@plt+0x1d3fc>
   2fe3c:	mov	r0, r5
   2fe40:	bl	12a68 <close@plt>
   2fe44:	cmp	r0, #0
   2fe48:	beq	2feac <__assert_fail@plt+0x1d3fc>
   2fe4c:	b	2fdb0 <__assert_fail@plt+0x1d300>
   2fe50:	ldr	r4, [r9]
   2fe54:	b	2fea4 <__assert_fail@plt+0x1d3f4>
   2fe58:	mov	r0, #36	; 0x24
   2fe5c:	str	r0, [r9]
   2fe60:	b	2fea8 <__assert_fail@plt+0x1d3f8>
   2fe64:	ldr	r1, [sp]
   2fe68:	mov	r0, #36	; 0x24
   2fe6c:	str	r0, [r1]
   2fe70:	b	2fea8 <__assert_fail@plt+0x1d3f8>
   2fe74:	ldr	r9, [sp]
   2fe78:	mov	r0, #47	; 0x2f
   2fe7c:	strb	r0, [r4]
   2fe80:	b	2fe88 <__assert_fail@plt+0x1d3d8>
   2fe84:	mov	r5, r7
   2fe88:	ldr	r4, [r9]
   2fe8c:	cmp	r5, #0
   2fe90:	bmi	2fea4 <__assert_fail@plt+0x1d3f4>
   2fe94:	mov	r0, r5
   2fe98:	bl	12a68 <close@plt>
   2fe9c:	cmp	r0, #0
   2fea0:	bne	2fdb0 <__assert_fail@plt+0x1d300>
   2fea4:	str	r4, [r9]
   2fea8:	mvn	r6, #0
   2feac:	mov	r0, r6
   2feb0:	sub	sp, fp, #28
   2feb4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2feb8:	movw	r0, #54988	; 0xd6cc
   2febc:	movw	r1, #54913	; 0xd681
   2fec0:	movw	r3, #54926	; 0xd68e
   2fec4:	mov	r2, #179	; 0xb3
   2fec8:	movt	r0, #4
   2fecc:	b	2ff2c <__assert_fail@plt+0x1d47c>
   2fed0:	movw	r0, #54905	; 0xd679
   2fed4:	movw	r1, #54913	; 0xd681
   2fed8:	movw	r3, #54926	; 0xd68e
   2fedc:	mov	r2, #126	; 0x7e
   2fee0:	movt	r0, #4
   2fee4:	b	2ff2c <__assert_fail@plt+0x1d47c>
   2fee8:	movw	r0, #54949	; 0xd6a5
   2feec:	movw	r1, #54913	; 0xd681
   2fef0:	movw	r3, #54926	; 0xd68e
   2fef4:	mov	r2, #127	; 0x7f
   2fef8:	movt	r0, #4
   2fefc:	b	2ff2c <__assert_fail@plt+0x1d47c>
   2ff00:	movw	r0, #54961	; 0xd6b1
   2ff04:	movw	r1, #54913	; 0xd681
   2ff08:	movw	r3, #54926	; 0xd68e
   2ff0c:	mov	r2, #162	; 0xa2
   2ff10:	movt	r0, #4
   2ff14:	b	2ff2c <__assert_fail@plt+0x1d47c>
   2ff18:	movw	r0, #54973	; 0xd6bd
   2ff1c:	movw	r1, #54913	; 0xd681
   2ff20:	movw	r3, #54926	; 0xd68e
   2ff24:	mov	r2, #163	; 0xa3
   2ff28:	movt	r0, #4
   2ff2c:	movt	r1, #4
   2ff30:	movt	r3, #4
   2ff34:	bl	12ab0 <__assert_fail@plt>
   2ff38:	sub	sp, sp, #8
   2ff3c:	push	{r4, r5, r6, r7, fp, lr}
   2ff40:	add	fp, sp, #16
   2ff44:	sub	sp, sp, #8
   2ff48:	mov	r5, r0
   2ff4c:	add	r0, fp, #8
   2ff50:	cmp	r1, #11
   2ff54:	str	r2, [fp, #8]
   2ff58:	str	r3, [fp, #12]
   2ff5c:	str	r0, [sp, #4]
   2ff60:	bhi	2ff9c <__assert_fail@plt+0x1d4ec>
   2ff64:	mov	r0, #1
   2ff68:	movw	r2, #1300	; 0x514
   2ff6c:	tst	r2, r0, lsl r1
   2ff70:	bne	3005c <__assert_fail@plt+0x1d5ac>
   2ff74:	movw	r2, #2570	; 0xa0a
   2ff78:	tst	r2, r0, lsl r1
   2ff7c:	bne	2ffc4 <__assert_fail@plt+0x1d514>
   2ff80:	cmp	r1, #0
   2ff84:	bne	2ff9c <__assert_fail@plt+0x1d4ec>
   2ff88:	ldr	r0, [sp, #4]
   2ff8c:	add	r1, r0, #4
   2ff90:	str	r1, [sp, #4]
   2ff94:	mov	r1, #0
   2ff98:	b	30068 <__assert_fail@plt+0x1d5b8>
   2ff9c:	sub	r0, r1, #1024	; 0x400
   2ffa0:	cmp	r0, #10
   2ffa4:	bhi	3005c <__assert_fail@plt+0x1d5ac>
   2ffa8:	mov	r2, #1
   2ffac:	movw	r3, #645	; 0x285
   2ffb0:	tst	r3, r2, lsl r0
   2ffb4:	bne	3005c <__assert_fail@plt+0x1d5ac>
   2ffb8:	movw	r3, #1282	; 0x502
   2ffbc:	tst	r3, r2, lsl r0
   2ffc0:	beq	2ffd0 <__assert_fail@plt+0x1d520>
   2ffc4:	mov	r0, r5
   2ffc8:	bl	128e8 <fcntl64@plt>
   2ffcc:	b	30074 <__assert_fail@plt+0x1d5c4>
   2ffd0:	cmp	r0, #6
   2ffd4:	bne	3005c <__assert_fail@plt+0x1d5ac>
   2ffd8:	ldr	r0, [sp, #4]
   2ffdc:	movw	r7, #60992	; 0xee40
   2ffe0:	movt	r7, #5
   2ffe4:	add	r1, r0, #4
   2ffe8:	str	r1, [sp, #4]
   2ffec:	ldr	r6, [r0]
   2fff0:	ldr	r0, [r7]
   2fff4:	cmp	r0, #0
   2fff8:	bmi	30098 <__assert_fail@plt+0x1d5e8>
   2fffc:	mov	r0, r5
   30000:	movw	r1, #1030	; 0x406
   30004:	mov	r2, r6
   30008:	bl	128e8 <fcntl64@plt>
   3000c:	mov	r4, r0
   30010:	cmn	r0, #1
   30014:	bgt	3008c <__assert_fail@plt+0x1d5dc>
   30018:	bl	12804 <__errno_location@plt>
   3001c:	ldr	r0, [r0]
   30020:	cmp	r0, #22
   30024:	bne	3008c <__assert_fail@plt+0x1d5dc>
   30028:	mov	r0, r5
   3002c:	mov	r1, #0
   30030:	mov	r2, r6
   30034:	bl	128e8 <fcntl64@plt>
   30038:	mov	r4, r0
   3003c:	cmp	r0, #0
   30040:	bmi	30078 <__assert_fail@plt+0x1d5c8>
   30044:	mvn	r0, #0
   30048:	str	r0, [r7]
   3004c:	mov	r0, #1
   30050:	cmp	r0, #0
   30054:	bne	300c4 <__assert_fail@plt+0x1d614>
   30058:	b	30078 <__assert_fail@plt+0x1d5c8>
   3005c:	ldr	r0, [sp, #4]
   30060:	add	r2, r0, #4
   30064:	str	r2, [sp, #4]
   30068:	ldr	r2, [r0]
   3006c:	mov	r0, r5
   30070:	bl	128e8 <fcntl64@plt>
   30074:	mov	r4, r0
   30078:	mov	r0, r4
   3007c:	sub	sp, fp, #16
   30080:	pop	{r4, r5, r6, r7, fp, lr}
   30084:	add	sp, sp, #8
   30088:	bx	lr
   3008c:	mov	r0, #1
   30090:	str	r0, [r7]
   30094:	b	30078 <__assert_fail@plt+0x1d5c8>
   30098:	mov	r0, r5
   3009c:	mov	r1, #0
   300a0:	mov	r2, r6
   300a4:	bl	128e8 <fcntl64@plt>
   300a8:	mov	r4, r0
   300ac:	ldr	r0, [r7]
   300b0:	add	r0, r0, #1
   300b4:	clz	r0, r0
   300b8:	lsr	r0, r0, #5
   300bc:	cmp	r0, #0
   300c0:	beq	30078 <__assert_fail@plt+0x1d5c8>
   300c4:	cmp	r4, #0
   300c8:	bmi	30078 <__assert_fail@plt+0x1d5c8>
   300cc:	mov	r0, r4
   300d0:	mov	r1, #1
   300d4:	bl	128e8 <fcntl64@plt>
   300d8:	cmp	r0, #0
   300dc:	bmi	300f8 <__assert_fail@plt+0x1d648>
   300e0:	orr	r2, r0, #1
   300e4:	mov	r0, r4
   300e8:	mov	r1, #2
   300ec:	bl	128e8 <fcntl64@plt>
   300f0:	cmn	r0, #1
   300f4:	bne	30078 <__assert_fail@plt+0x1d5c8>
   300f8:	bl	12804 <__errno_location@plt>
   300fc:	ldr	r6, [r0]
   30100:	mov	r5, r0
   30104:	mov	r0, r4
   30108:	bl	12a68 <close@plt>
   3010c:	str	r6, [r5]
   30110:	mvn	r4, #0
   30114:	b	30078 <__assert_fail@plt+0x1d5c8>
   30118:	push	{r4, sl, fp, lr}
   3011c:	add	fp, sp, #8
   30120:	sub	sp, sp, #8
   30124:	mov	r4, r0
   30128:	cmp	r0, #0
   3012c:	beq	30164 <__assert_fail@plt+0x1d6b4>
   30130:	mov	r0, r4
   30134:	bl	12720 <__freading@plt>
   30138:	cmp	r0, #0
   3013c:	beq	30164 <__assert_fail@plt+0x1d6b4>
   30140:	ldrb	r0, [r4, #1]
   30144:	tst	r0, #1
   30148:	beq	30164 <__assert_fail@plt+0x1d6b4>
   3014c:	mov	r0, #1
   30150:	mov	r2, #0
   30154:	mov	r3, #0
   30158:	str	r0, [sp]
   3015c:	mov	r0, r4
   30160:	bl	3019c <__assert_fail@plt+0x1d6ec>
   30164:	mov	r0, r4
   30168:	sub	sp, fp, #8
   3016c:	pop	{r4, sl, fp, lr}
   30170:	b	12444 <fflush@plt>
   30174:	push	{r4, r5, r6, sl, fp, lr}
   30178:	add	fp, sp, #16
   3017c:	mov	r4, r0
   30180:	bl	12804 <__errno_location@plt>
   30184:	ldr	r6, [r0]
   30188:	mov	r5, r0
   3018c:	mov	r0, r4
   30190:	bl	12480 <free@plt>
   30194:	str	r6, [r5]
   30198:	pop	{r4, r5, r6, sl, fp, pc}
   3019c:	push	{r4, r5, r6, r7, fp, lr}
   301a0:	add	fp, sp, #16
   301a4:	sub	sp, sp, #8
   301a8:	mov	r4, r0
   301ac:	ldr	r0, [r0, #4]
   301b0:	mov	r5, r3
   301b4:	mov	r6, r2
   301b8:	ldr	r1, [r4, #8]
   301bc:	cmp	r1, r0
   301c0:	bne	301dc <__assert_fail@plt+0x1d72c>
   301c4:	ldrd	r0, [r4, #16]
   301c8:	cmp	r1, r0
   301cc:	bne	301dc <__assert_fail@plt+0x1d72c>
   301d0:	ldr	r0, [r4, #36]	; 0x24
   301d4:	cmp	r0, #0
   301d8:	beq	301f4 <__assert_fail@plt+0x1d744>
   301dc:	mov	r0, r4
   301e0:	mov	r2, r6
   301e4:	mov	r3, r5
   301e8:	sub	sp, fp, #16
   301ec:	pop	{r4, r5, r6, r7, fp, lr}
   301f0:	b	128d0 <fseeko64@plt>
   301f4:	ldr	r7, [fp, #8]
   301f8:	mov	r0, r4
   301fc:	bl	1287c <fileno@plt>
   30200:	mov	r2, r6
   30204:	mov	r3, r5
   30208:	str	r7, [sp]
   3020c:	bl	12630 <lseek64@plt>
   30210:	and	r2, r0, r1
   30214:	cmn	r2, #1
   30218:	beq	30238 <__assert_fail@plt+0x1d788>
   3021c:	strd	r0, [r4, #80]	; 0x50
   30220:	ldr	r0, [r4]
   30224:	bic	r0, r0, #16
   30228:	str	r0, [r4]
   3022c:	mov	r0, #0
   30230:	sub	sp, fp, #16
   30234:	pop	{r4, r5, r6, r7, fp, pc}
   30238:	mvn	r0, #0
   3023c:	sub	sp, fp, #16
   30240:	pop	{r4, r5, r6, r7, fp, pc}
   30244:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   30248:	add	fp, sp, #28
   3024c:	sub	sp, sp, #28
   30250:	cmp	r1, #4096	; 0x1000
   30254:	bcs	30270 <__assert_fail@plt+0x1d7c0>
   30258:	mov	r7, r0
   3025c:	and	r0, r1, #516	; 0x204
   30260:	mov	r5, r1
   30264:	cmp	r0, #516	; 0x204
   30268:	tstne	r5, #18
   3026c:	bne	3028c <__assert_fail@plt+0x1d7dc>
   30270:	bl	12804 <__errno_location@plt>
   30274:	mov	r1, #22
   30278:	mov	r4, #0
   3027c:	str	r1, [r0]
   30280:	mov	r0, r4
   30284:	sub	sp, fp, #28
   30288:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   3028c:	mov	r0, #1
   30290:	mov	r1, #96	; 0x60
   30294:	mov	sl, r2
   30298:	bl	2fb8c <__assert_fail@plt+0x1d0dc>
   3029c:	cmp	r0, #0
   302a0:	beq	306a8 <__assert_fail@plt+0x1dbf8>
   302a4:	mov	r4, r0
   302a8:	mvn	r0, #99	; 0x63
   302ac:	tst	r5, #2
   302b0:	mov	r1, r5
   302b4:	str	r0, [r4, #32]
   302b8:	bic	r0, r5, #516	; 0x204
   302bc:	str	sl, [r4, #44]	; 0x2c
   302c0:	str	r4, [sp, #24]
   302c4:	orrne	r1, r0, #4
   302c8:	str	r1, [r4, #48]	; 0x30
   302cc:	ldr	r0, [r7]
   302d0:	cmp	r0, #0
   302d4:	beq	3030c <__assert_fail@plt+0x1d85c>
   302d8:	add	r6, r7, #4
   302dc:	mov	r4, #0
   302e0:	bl	127bc <strlen@plt>
   302e4:	cmp	r0, r4
   302e8:	movhi	r4, r0
   302ec:	ldr	r0, [r6], #4
   302f0:	cmp	r0, #0
   302f4:	bne	302e0 <__assert_fail@plt+0x1d830>
   302f8:	add	r0, r4, #1
   302fc:	ldr	r4, [sp, #24]
   30300:	cmp	r0, #4096	; 0x1000
   30304:	movls	r0, #4096	; 0x1000
   30308:	b	30310 <__assert_fail@plt+0x1d860>
   3030c:	mov	r0, #4096	; 0x1000
   30310:	ldr	r1, [r4, #36]	; 0x24
   30314:	add	r0, r0, #256	; 0x100
   30318:	adds	r1, r0, r1
   3031c:	bcc	30340 <__assert_fail@plt+0x1d890>
   30320:	ldr	r0, [r4, #24]
   30324:	bl	30174 <__assert_fail@plt+0x1d6c4>
   30328:	mov	r0, #0
   3032c:	str	r0, [r4, #24]
   30330:	bl	12804 <__errno_location@plt>
   30334:	mov	r1, #36	; 0x24
   30338:	str	r1, [r0]
   3033c:	b	306a0 <__assert_fail@plt+0x1dbf0>
   30340:	str	r1, [r4, #36]	; 0x24
   30344:	ldr	r0, [r4, #24]
   30348:	bl	33500 <__assert_fail@plt+0x20a50>
   3034c:	cmp	r0, #0
   30350:	beq	303c4 <__assert_fail@plt+0x1d914>
   30354:	str	r0, [r4, #24]
   30358:	ldr	r0, [r7]
   3035c:	cmp	r0, #0
   30360:	beq	303d8 <__assert_fail@plt+0x1d928>
   30364:	mov	r0, #176	; 0xb0
   30368:	bl	327ac <__assert_fail@plt+0x1fcfc>
   3036c:	cmp	r0, #0
   30370:	beq	30698 <__assert_fail@plt+0x1dbe8>
   30374:	ldr	r1, [r4, #24]
   30378:	mov	r6, r0
   3037c:	mov	r0, #0
   30380:	mov	r2, #196608	; 0x30000
   30384:	strb	r0, [r6, #168]	; 0xa8
   30388:	str	r2, [r6, #58]	; 0x3a
   3038c:	mvn	r2, #0
   30390:	str	r4, [r6, #44]	; 0x2c
   30394:	str	r2, [r6, #48]	; 0x30
   30398:	str	r0, [r6, #52]	; 0x34
   3039c:	str	r0, [r6, #12]
   303a0:	str	r0, [r6, #16]
   303a4:	str	r0, [r6, #20]
   303a8:	str	r1, [r6, #28]
   303ac:	str	r0, [r6, #32]
   303b0:	cmp	sl, #0
   303b4:	beq	303e4 <__assert_fail@plt+0x1d934>
   303b8:	ldrb	r0, [r4, #49]	; 0x31
   303bc:	ubfx	r0, r0, #2, #1
   303c0:	b	303e8 <__assert_fail@plt+0x1d938>
   303c4:	ldr	r0, [r4, #24]
   303c8:	bl	30174 <__assert_fail@plt+0x1d6c4>
   303cc:	mov	r0, #0
   303d0:	str	r0, [r4, #24]
   303d4:	b	306a0 <__assert_fail@plt+0x1dbf0>
   303d8:	mov	r6, #0
   303dc:	cmp	sl, #0
   303e0:	bne	303b8 <__assert_fail@plt+0x1d908>
   303e4:	mov	r0, #1
   303e8:	ldr	r4, [r7]
   303ec:	cmp	r4, #0
   303f0:	beq	3055c <__assert_fail@plt+0x1daac>
   303f4:	eor	r0, r0, #1
   303f8:	str	r6, [sp, #20]
   303fc:	and	r1, r5, #2048	; 0x800
   30400:	mov	r9, #0
   30404:	mov	r6, #0
   30408:	str	sl, [sp, #8]
   3040c:	str	r0, [sp, #12]
   30410:	mov	r0, #0
   30414:	str	r1, [sp, #16]
   30418:	str	r0, [sp, #4]
   3041c:	b	30448 <__assert_fail@plt+0x1d998>
   30420:	cmp	r9, #0
   30424:	str	r4, [r5, #8]
   30428:	beq	30550 <__assert_fail@plt+0x1daa0>
   3042c:	ldr	r0, [sp, #4]
   30430:	str	r5, [sp, #4]
   30434:	str	r5, [r0, #8]
   30438:	ldr	r4, [r7, #4]!
   3043c:	add	r6, r6, #1
   30440:	cmp	r4, #0
   30444:	beq	30578 <__assert_fail@plt+0x1dac8>
   30448:	mov	r0, r4
   3044c:	bl	127bc <strlen@plt>
   30450:	mov	r8, r0
   30454:	ldr	r0, [sp, #16]
   30458:	cmp	r0, #0
   3045c:	bne	30494 <__assert_fail@plt+0x1d9e4>
   30460:	cmp	r8, #3
   30464:	bcc	30494 <__assert_fail@plt+0x1d9e4>
   30468:	add	r0, r8, r4
   3046c:	ldrb	r0, [r0, #-1]
   30470:	cmp	r0, #47	; 0x2f
   30474:	bne	30494 <__assert_fail@plt+0x1d9e4>
   30478:	sub	r0, r4, #2
   3047c:	ldrb	r1, [r0, r8]
   30480:	cmp	r1, #47	; 0x2f
   30484:	bne	30494 <__assert_fail@plt+0x1d9e4>
   30488:	sub	r8, r8, #1
   3048c:	cmp	r8, #1
   30490:	bhi	3047c <__assert_fail@plt+0x1d9cc>
   30494:	add	r0, r8, #176	; 0xb0
   30498:	bic	r0, r0, #7
   3049c:	bl	327ac <__assert_fail@plt+0x1fcfc>
   304a0:	cmp	r0, #0
   304a4:	beq	30568 <__assert_fail@plt+0x1dab8>
   304a8:	add	sl, r0, #168	; 0xa8
   304ac:	mov	r5, r0
   304b0:	mov	r1, r4
   304b4:	mov	r2, r8
   304b8:	mov	r0, sl
   304bc:	bl	124e0 <memcpy@plt>
   304c0:	ldr	r0, [sp, #24]
   304c4:	ldr	r2, [sp, #20]
   304c8:	mov	r4, #0
   304cc:	strb	r4, [sl, r8]
   304d0:	str	r2, [r5, #4]
   304d4:	add	r2, r5, #44	; 0x2c
   304d8:	ldr	r1, [r0, #24]
   304dc:	stm	r2, {r0, r4, r8}
   304e0:	mov	r2, #196608	; 0x30000
   304e4:	str	r2, [r5, #58]	; 0x3a
   304e8:	ldr	r2, [sp, #12]
   304ec:	str	r4, [r5, #12]
   304f0:	str	r4, [r5, #16]
   304f4:	str	r4, [r5, #20]
   304f8:	str	sl, [r5, #24]
   304fc:	str	r1, [r5, #28]
   30500:	clz	r1, r9
   30504:	str	r4, [r5, #32]
   30508:	lsr	r1, r1, #5
   3050c:	orrs	r1, r2, r1
   30510:	bne	30528 <__assert_fail@plt+0x1da78>
   30514:	mov	r0, #2
   30518:	str	r0, [r5, #112]	; 0x70
   3051c:	str	r4, [r5, #116]	; 0x74
   30520:	mov	r0, #11
   30524:	b	30534 <__assert_fail@plt+0x1da84>
   30528:	mov	r1, r5
   3052c:	mov	r2, #0
   30530:	bl	3073c <__assert_fail@plt+0x1dc8c>
   30534:	ldr	sl, [sp, #8]
   30538:	strh	r0, [r5, #56]	; 0x38
   3053c:	cmp	sl, #0
   30540:	beq	30420 <__assert_fail@plt+0x1d970>
   30544:	str	r9, [r5, #8]
   30548:	mov	r9, r5
   3054c:	b	30438 <__assert_fail@plt+0x1d988>
   30550:	mov	r0, r5
   30554:	str	r5, [sp, #4]
   30558:	b	30548 <__assert_fail@plt+0x1da98>
   3055c:	ldr	r4, [sp, #24]
   30560:	mov	r9, #0
   30564:	b	305ac <__assert_fail@plt+0x1dafc>
   30568:	ldr	r6, [sp, #20]
   3056c:	cmp	r9, #0
   30570:	bne	30674 <__assert_fail@plt+0x1dbc4>
   30574:	b	3068c <__assert_fail@plt+0x1dbdc>
   30578:	cmp	sl, #0
   3057c:	beq	305a4 <__assert_fail@plt+0x1daf4>
   30580:	ldr	r4, [sp, #24]
   30584:	cmp	r6, #2
   30588:	bcc	305a8 <__assert_fail@plt+0x1daf8>
   3058c:	mov	r0, r4
   30590:	mov	r1, r9
   30594:	mov	r2, r6
   30598:	bl	308d4 <__assert_fail@plt+0x1de24>
   3059c:	mov	r9, r0
   305a0:	b	305a8 <__assert_fail@plt+0x1daf8>
   305a4:	ldr	r4, [sp, #24]
   305a8:	ldr	r6, [sp, #20]
   305ac:	mov	r0, #176	; 0xb0
   305b0:	bl	327ac <__assert_fail@plt+0x1fcfc>
   305b4:	cmp	r0, #0
   305b8:	beq	3064c <__assert_fail@plt+0x1db9c>
   305bc:	ldr	r2, [r4, #24]
   305c0:	mov	r1, #0
   305c4:	mov	r3, #196608	; 0x30000
   305c8:	str	r0, [r4]
   305cc:	str	r1, [r0, #52]	; 0x34
   305d0:	strb	r1, [r0, #168]	; 0xa8
   305d4:	str	r4, [r0, #44]	; 0x2c
   305d8:	str	r3, [r0, #58]	; 0x3a
   305dc:	str	r2, [r0, #28]
   305e0:	mov	r2, #9
   305e4:	str	r1, [r0, #32]
   305e8:	strh	r2, [r0, #56]	; 0x38
   305ec:	str	r9, [r0, #8]
   305f0:	str	r1, [r0, #12]
   305f4:	str	r1, [r0, #16]
   305f8:	str	r1, [r0, #20]
   305fc:	mov	r1, #1
   30600:	str	r1, [r0, #48]	; 0x30
   30604:	ldrh	r0, [r4, #48]	; 0x30
   30608:	movw	r1, #258	; 0x102
   3060c:	tst	r0, r1
   30610:	beq	306b0 <__assert_fail@plt+0x1dc00>
   30614:	movw	r0, #372	; 0x174
   30618:	movw	r2, #9288	; 0x2448
   3061c:	movw	r3, #9320	; 0x2468
   30620:	mov	r1, #0
   30624:	movt	r0, #3
   30628:	movt	r2, #3
   3062c:	movt	r3, #3
   30630:	str	r0, [sp]
   30634:	mov	r0, #31
   30638:	bl	231d4 <__assert_fail@plt+0x10724>
   3063c:	cmp	r0, #0
   30640:	str	r0, [r4, #56]	; 0x38
   30644:	bne	306c8 <__assert_fail@plt+0x1dc18>
   30648:	b	30654 <__assert_fail@plt+0x1dba4>
   3064c:	mov	r0, #0
   30650:	str	r0, [r4]
   30654:	cmp	r9, #0
   30658:	bne	30674 <__assert_fail@plt+0x1dbc4>
   3065c:	b	3068c <__assert_fail@plt+0x1dbdc>
   30660:	mov	r0, r9
   30664:	bl	30174 <__assert_fail@plt+0x1d6c4>
   30668:	cmp	r4, #0
   3066c:	mov	r9, r4
   30670:	beq	3068c <__assert_fail@plt+0x1dbdc>
   30674:	ldrd	r4, [r9, #8]
   30678:	cmp	r5, #0
   3067c:	beq	30660 <__assert_fail@plt+0x1dbb0>
   30680:	mov	r0, r5
   30684:	bl	12a80 <closedir@plt>
   30688:	b	30660 <__assert_fail@plt+0x1dbb0>
   3068c:	mov	r0, r6
   30690:	bl	30174 <__assert_fail@plt+0x1d6c4>
   30694:	ldr	r4, [sp, #24]
   30698:	ldr	r0, [r4, #24]
   3069c:	bl	30174 <__assert_fail@plt+0x1d6c4>
   306a0:	mov	r0, r4
   306a4:	bl	30174 <__assert_fail@plt+0x1d6c4>
   306a8:	mov	r4, #0
   306ac:	b	30280 <__assert_fail@plt+0x1d7d0>
   306b0:	mov	r0, #32
   306b4:	bl	327ac <__assert_fail@plt+0x1fcfc>
   306b8:	cmp	r0, #0
   306bc:	str	r0, [r4, #56]	; 0x38
   306c0:	beq	30654 <__assert_fail@plt+0x1dba4>
   306c4:	bl	46b40 <__assert_fail@plt+0x34090>
   306c8:	ldr	r4, [sp, #24]
   306cc:	ldr	r0, [r4, #48]	; 0x30
   306d0:	tst	r0, #516	; 0x204
   306d4:	bne	3072c <__assert_fail@plt+0x1dc7c>
   306d8:	mov	r1, #32768	; 0x8000
   306dc:	tst	r0, #512	; 0x200
   306e0:	and	r1, r1, r0, lsl #11
   306e4:	orr	r1, r1, #18688	; 0x4900
   306e8:	orr	r2, r1, #524288	; 0x80000
   306ec:	bne	30704 <__assert_fail@plt+0x1dc54>
   306f0:	movw	r0, #35340	; 0x8a0c
   306f4:	mov	r1, r2
   306f8:	movt	r0, #4
   306fc:	bl	22aec <__assert_fail@plt+0x1003c>
   30700:	b	30714 <__assert_fail@plt+0x1dc64>
   30704:	ldr	r0, [r4, #32]
   30708:	movw	r1, #35340	; 0x8a0c
   3070c:	movt	r1, #4
   30710:	bl	26670 <__assert_fail@plt+0x13bc0>
   30714:	cmn	r0, #1
   30718:	str	r0, [r4, #28]
   3071c:	bgt	3072c <__assert_fail@plt+0x1dc7c>
   30720:	ldr	r0, [r4, #48]	; 0x30
   30724:	orr	r0, r0, #4
   30728:	str	r0, [r4, #48]	; 0x30
   3072c:	add	r0, r4, #60	; 0x3c
   30730:	mvn	r1, #0
   30734:	bl	46d84 <__assert_fail@plt+0x342d4>
   30738:	b	30280 <__assert_fail@plt+0x1d7d0>
   3073c:	push	{r4, r5, r6, sl, fp, lr}
   30740:	add	fp, sp, #16
   30744:	sub	sp, sp, #8
   30748:	mov	r4, r1
   3074c:	ldr	r1, [r0, #48]	; 0x30
   30750:	ldr	r3, [r4, #48]	; 0x30
   30754:	add	r5, r4, #64	; 0x40
   30758:	cmp	r3, #0
   3075c:	andeq	r3, r1, #1
   30760:	orreq	r2, r3, r2
   30764:	cmp	r2, #0
   30768:	andseq	r1, r1, #2
   3076c:	beq	307c8 <__assert_fail@plt+0x1dd18>
   30770:	ldr	r1, [r4, #24]
   30774:	mov	r0, #3
   30778:	mov	r2, r5
   3077c:	bl	12a14 <__xstat64@plt>
   30780:	cmp	r0, #0
   30784:	beq	30848 <__assert_fail@plt+0x1dd98>
   30788:	bl	12804 <__errno_location@plt>
   3078c:	mov	r6, r0
   30790:	ldr	r0, [r0]
   30794:	cmp	r0, #2
   30798:	bne	307f8 <__assert_fail@plt+0x1dd48>
   3079c:	ldr	r1, [r4, #24]
   307a0:	mov	r0, #3
   307a4:	mov	r2, r5
   307a8:	bl	12a74 <__lxstat64@plt>
   307ac:	cmp	r0, #0
   307b0:	bne	307f4 <__assert_fail@plt+0x1dd44>
   307b4:	mov	r0, #0
   307b8:	str	r0, [r6]
   307bc:	mov	r0, #13
   307c0:	sub	sp, fp, #16
   307c4:	pop	{r4, r5, r6, sl, fp, pc}
   307c8:	ldr	r1, [r0, #32]
   307cc:	ldr	r2, [r4, #24]
   307d0:	mov	r0, #256	; 0x100
   307d4:	mov	r3, r5
   307d8:	str	r0, [sp]
   307dc:	mov	r0, #3
   307e0:	bl	125dc <__fxstatat64@plt>
   307e4:	cmp	r0, #0
   307e8:	beq	30848 <__assert_fail@plt+0x1dd98>
   307ec:	bl	12804 <__errno_location@plt>
   307f0:	mov	r6, r0
   307f4:	ldr	r0, [r6]
   307f8:	vmov.i32	q8, #0	; 0x00000000
   307fc:	add	r1, r5, #80	; 0x50
   30800:	str	r0, [r4, #32]
   30804:	mov	r0, #0
   30808:	str	r0, [r5, #96]	; 0x60
   3080c:	vst1.64	{d16-d17}, [r1]
   30810:	add	r1, r5, #64	; 0x40
   30814:	vst1.64	{d16-d17}, [r1]
   30818:	add	r1, r5, #48	; 0x30
   3081c:	vst1.64	{d16-d17}, [r1]
   30820:	add	r1, r5, #32
   30824:	vst1.64	{d16-d17}, [r1]
   30828:	add	r1, r5, #16
   3082c:	vst1.64	{d16-d17}, [r1]
   30830:	mov	r1, #100	; 0x64
   30834:	vst1.64	{d16-d17}, [r5], r1
   30838:	str	r0, [r5]
   3083c:	mov	r0, #10
   30840:	sub	sp, fp, #16
   30844:	pop	{r4, r5, r6, sl, fp, pc}
   30848:	ldr	r0, [r4, #80]	; 0x50
   3084c:	and	r0, r0, #61440	; 0xf000
   30850:	cmp	r0, #40960	; 0xa000
   30854:	beq	308bc <__assert_fail@plt+0x1de0c>
   30858:	cmp	r0, #32768	; 0x8000
   3085c:	beq	308b0 <__assert_fail@plt+0x1de00>
   30860:	cmp	r0, #16384	; 0x4000
   30864:	bne	308c8 <__assert_fail@plt+0x1de18>
   30868:	ldrb	r1, [r4, #168]	; 0xa8
   3086c:	mov	r0, #1
   30870:	cmp	r1, #46	; 0x2e
   30874:	bne	308cc <__assert_fail@plt+0x1de1c>
   30878:	ldrb	r1, [r4, #169]	; 0xa9
   3087c:	cmp	r1, #0
   30880:	beq	30898 <__assert_fail@plt+0x1dde8>
   30884:	cmp	r1, #46	; 0x2e
   30888:	bne	308cc <__assert_fail@plt+0x1de1c>
   3088c:	ldrb	r1, [r4, #170]	; 0xaa
   30890:	cmp	r1, #0
   30894:	bne	308cc <__assert_fail@plt+0x1de1c>
   30898:	ldr	r1, [r4, #48]	; 0x30
   3089c:	mov	r0, #5
   308a0:	cmp	r1, #0
   308a4:	movweq	r0, #1
   308a8:	sub	sp, fp, #16
   308ac:	pop	{r4, r5, r6, sl, fp, pc}
   308b0:	mov	r0, #8
   308b4:	sub	sp, fp, #16
   308b8:	pop	{r4, r5, r6, sl, fp, pc}
   308bc:	mov	r0, #12
   308c0:	sub	sp, fp, #16
   308c4:	pop	{r4, r5, r6, sl, fp, pc}
   308c8:	mov	r0, #3
   308cc:	sub	sp, fp, #16
   308d0:	pop	{r4, r5, r6, sl, fp, pc}
   308d4:	push	{r4, r5, r6, r7, fp, lr}
   308d8:	add	fp, sp, #16
   308dc:	mov	r6, r0
   308e0:	ldr	r7, [r0, #44]	; 0x2c
   308e4:	ldr	r0, [r0, #40]	; 0x28
   308e8:	mov	r5, r2
   308ec:	mov	r4, r1
   308f0:	cmp	r0, r2
   308f4:	bcs	3092c <__assert_fail@plt+0x1de7c>
   308f8:	add	r1, r5, #40	; 0x28
   308fc:	cmn	r1, #-1073741823	; 0xc0000001
   30900:	str	r1, [r6, #40]	; 0x28
   30904:	bhi	309d0 <__assert_fail@plt+0x1df20>
   30908:	ldr	r0, [r6, #8]
   3090c:	lsl	r1, r1, #2
   30910:	bl	33500 <__assert_fail@plt+0x20a50>
   30914:	cmp	r0, #0
   30918:	beq	309d0 <__assert_fail@plt+0x1df20>
   3091c:	str	r0, [r6, #8]
   30920:	cmp	r4, #0
   30924:	bne	30938 <__assert_fail@plt+0x1de88>
   30928:	b	3094c <__assert_fail@plt+0x1de9c>
   3092c:	ldr	r0, [r6, #8]
   30930:	cmp	r4, #0
   30934:	beq	3094c <__assert_fail@plt+0x1de9c>
   30938:	str	r4, [r0], #4
   3093c:	ldr	r4, [r4, #8]
   30940:	cmp	r4, #0
   30944:	bne	30938 <__assert_fail@plt+0x1de88>
   30948:	ldr	r0, [r6, #8]
   3094c:	mov	r1, r5
   30950:	mov	r2, #4
   30954:	mov	r3, r7
   30958:	bl	129cc <qsort@plt>
   3095c:	ldr	r0, [r6, #8]
   30960:	cmp	r5, #1
   30964:	ldr	r4, [r0]
   30968:	mov	r1, r4
   3096c:	beq	309f4 <__assert_fail@plt+0x1df44>
   30970:	mov	r2, r0
   30974:	ldr	r1, [r2, #4]!
   30978:	str	r1, [r4, #8]
   3097c:	subs	r1, r5, #2
   30980:	beq	309ec <__assert_fail@plt+0x1df3c>
   30984:	tst	r1, #1
   30988:	beq	309a0 <__assert_fail@plt+0x1def0>
   3098c:	ldr	r1, [r0, #8]!
   30990:	ldr	r2, [r0, #-4]
   30994:	str	r1, [r2, #8]
   30998:	sub	r1, r5, #3
   3099c:	mov	r2, r0
   309a0:	cmp	r5, #3
   309a4:	beq	309f0 <__assert_fail@plt+0x1df40>
   309a8:	mov	r0, r2
   309ac:	ldm	r2, {r3, r7}
   309b0:	subs	r1, r1, #2
   309b4:	str	r7, [r3, #8]
   309b8:	ldr	r3, [r0, #8]!
   309bc:	ldr	r2, [r2, #4]
   309c0:	str	r3, [r2, #8]
   309c4:	mov	r2, r0
   309c8:	bne	309ac <__assert_fail@plt+0x1defc>
   309cc:	b	309f0 <__assert_fail@plt+0x1df40>
   309d0:	ldr	r0, [r6, #8]
   309d4:	bl	30174 <__assert_fail@plt+0x1d6c4>
   309d8:	mov	r0, #0
   309dc:	str	r0, [r6, #40]	; 0x28
   309e0:	str	r0, [r6, #8]
   309e4:	mov	r0, r4
   309e8:	pop	{r4, r5, r6, r7, fp, pc}
   309ec:	mov	r0, r2
   309f0:	ldr	r1, [r0]
   309f4:	mov	r0, #0
   309f8:	str	r0, [r1, #8]
   309fc:	mov	r0, r4
   30a00:	pop	{r4, r5, r6, r7, fp, pc}
   30a04:	push	{r4, r5, r6, r7, fp, lr}
   30a08:	add	fp, sp, #16
   30a0c:	mov	r4, r0
   30a10:	ldr	r0, [r0]
   30a14:	cmp	r0, #0
   30a18:	beq	30a58 <__assert_fail@plt+0x1dfa8>
   30a1c:	ldr	r1, [r0, #48]	; 0x30
   30a20:	cmp	r1, #0
   30a24:	bmi	30a4c <__assert_fail@plt+0x1df9c>
   30a28:	ldr	r5, [r0, #8]
   30a2c:	cmp	r5, #0
   30a30:	ldreq	r5, [r0, #4]
   30a34:	bl	30174 <__assert_fail@plt+0x1d6c4>
   30a38:	ldr	r0, [r5, #48]	; 0x30
   30a3c:	cmn	r0, #1
   30a40:	mov	r0, r5
   30a44:	bgt	30a28 <__assert_fail@plt+0x1df78>
   30a48:	b	30a50 <__assert_fail@plt+0x1dfa0>
   30a4c:	mov	r5, r0
   30a50:	mov	r0, r5
   30a54:	bl	30174 <__assert_fail@plt+0x1d6c4>
   30a58:	ldr	r5, [r4, #4]
   30a5c:	cmp	r5, #0
   30a60:	bne	30a7c <__assert_fail@plt+0x1dfcc>
   30a64:	b	30a94 <__assert_fail@plt+0x1dfe4>
   30a68:	mov	r0, r5
   30a6c:	bl	30174 <__assert_fail@plt+0x1d6c4>
   30a70:	cmp	r6, #0
   30a74:	mov	r5, r6
   30a78:	beq	30a94 <__assert_fail@plt+0x1dfe4>
   30a7c:	ldrd	r6, [r5, #8]
   30a80:	cmp	r7, #0
   30a84:	beq	30a68 <__assert_fail@plt+0x1dfb8>
   30a88:	mov	r0, r7
   30a8c:	bl	12a80 <closedir@plt>
   30a90:	b	30a68 <__assert_fail@plt+0x1dfb8>
   30a94:	ldr	r0, [r4, #8]
   30a98:	bl	30174 <__assert_fail@plt+0x1d6c4>
   30a9c:	ldr	r0, [r4, #24]
   30aa0:	bl	30174 <__assert_fail@plt+0x1d6c4>
   30aa4:	ldr	r0, [r4, #48]	; 0x30
   30aa8:	tst	r0, #512	; 0x200
   30aac:	bne	30ad8 <__assert_fail@plt+0x1e028>
   30ab0:	mov	r6, #0
   30ab4:	tst	r0, #4
   30ab8:	bne	30b1c <__assert_fail@plt+0x1e06c>
   30abc:	ldr	r0, [r4, #28]
   30ac0:	bl	129b4 <fchdir@plt>
   30ac4:	cmp	r0, #0
   30ac8:	beq	30af8 <__assert_fail@plt+0x1e048>
   30acc:	bl	12804 <__errno_location@plt>
   30ad0:	ldr	r6, [r0]
   30ad4:	b	30afc <__assert_fail@plt+0x1e04c>
   30ad8:	ldr	r0, [r4, #32]
   30adc:	mov	r6, #0
   30ae0:	cmp	r0, #0
   30ae4:	bmi	30b1c <__assert_fail@plt+0x1e06c>
   30ae8:	bl	12a68 <close@plt>
   30aec:	cmp	r0, #0
   30af0:	bne	30b14 <__assert_fail@plt+0x1e064>
   30af4:	b	30b1c <__assert_fail@plt+0x1e06c>
   30af8:	mov	r6, #0
   30afc:	ldr	r0, [r4, #28]
   30b00:	bl	12a68 <close@plt>
   30b04:	cmp	r6, #0
   30b08:	bne	30b1c <__assert_fail@plt+0x1e06c>
   30b0c:	cmp	r0, #0
   30b10:	beq	30b1c <__assert_fail@plt+0x1e06c>
   30b14:	bl	12804 <__errno_location@plt>
   30b18:	ldr	r6, [r0]
   30b1c:	add	r5, r4, #60	; 0x3c
   30b20:	mov	r0, r5
   30b24:	bl	46da8 <__assert_fail@plt+0x342f8>
   30b28:	cmp	r0, #0
   30b2c:	bne	30b48 <__assert_fail@plt+0x1e098>
   30b30:	mov	r0, r5
   30b34:	bl	46dfc <__assert_fail@plt+0x3434c>
   30b38:	cmp	r0, #0
   30b3c:	bmi	30b20 <__assert_fail@plt+0x1e070>
   30b40:	bl	12a68 <close@plt>
   30b44:	b	30b20 <__assert_fail@plt+0x1e070>
   30b48:	ldr	r0, [r4, #52]	; 0x34
   30b4c:	cmp	r0, #0
   30b50:	beq	30b58 <__assert_fail@plt+0x1e0a8>
   30b54:	bl	234d8 <__assert_fail@plt+0x10a28>
   30b58:	ldrh	r0, [r4, #48]	; 0x30
   30b5c:	movw	r1, #258	; 0x102
   30b60:	tst	r0, r1
   30b64:	beq	30b7c <__assert_fail@plt+0x1e0cc>
   30b68:	ldr	r0, [r4, #56]	; 0x38
   30b6c:	cmp	r0, #0
   30b70:	beq	30b84 <__assert_fail@plt+0x1e0d4>
   30b74:	bl	234d8 <__assert_fail@plt+0x10a28>
   30b78:	b	30b84 <__assert_fail@plt+0x1e0d4>
   30b7c:	ldr	r0, [r4, #56]	; 0x38
   30b80:	bl	30174 <__assert_fail@plt+0x1d6c4>
   30b84:	mov	r0, r4
   30b88:	bl	30174 <__assert_fail@plt+0x1d6c4>
   30b8c:	cmp	r6, #0
   30b90:	beq	30ba4 <__assert_fail@plt+0x1e0f4>
   30b94:	bl	12804 <__errno_location@plt>
   30b98:	str	r6, [r0]
   30b9c:	mvn	r0, #0
   30ba0:	pop	{r4, r5, r6, r7, fp, pc}
   30ba4:	mov	r0, #0
   30ba8:	pop	{r4, r5, r6, r7, fp, pc}
   30bac:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   30bb0:	add	fp, sp, #24
   30bb4:	sub	sp, sp, #8
   30bb8:	ldr	r6, [r0]
   30bbc:	mov	r5, #0
   30bc0:	cmp	r6, #0
   30bc4:	beq	31304 <__assert_fail@plt+0x1e854>
   30bc8:	mov	r4, r0
   30bcc:	ldr	r0, [r0, #48]	; 0x30
   30bd0:	tst	r0, #8192	; 0x2000
   30bd4:	bne	31304 <__assert_fail@plt+0x1e854>
   30bd8:	ldrh	r1, [r6, #60]	; 0x3c
   30bdc:	mov	r2, #3
   30be0:	strh	r2, [r6, #60]	; 0x3c
   30be4:	cmp	r1, #1
   30be8:	beq	30c58 <__assert_fail@plt+0x1e1a8>
   30bec:	cmp	r1, #2
   30bf0:	bne	30c74 <__assert_fail@plt+0x1e1c4>
   30bf4:	ldrh	r2, [r6, #56]	; 0x38
   30bf8:	bic	r3, r2, #1
   30bfc:	cmp	r3, #12
   30c00:	bne	30c78 <__assert_fail@plt+0x1e1c8>
   30c04:	mov	r0, r4
   30c08:	mov	r1, r6
   30c0c:	mov	r2, #1
   30c10:	bl	3073c <__assert_fail@plt+0x1dc8c>
   30c14:	cmp	r0, #1
   30c18:	strh	r0, [r6, #56]	; 0x38
   30c1c:	bne	30d68 <__assert_fail@plt+0x1e2b8>
   30c20:	ldr	r0, [r4, #48]	; 0x30
   30c24:	tst	r0, #4
   30c28:	bne	30d68 <__assert_fail@plt+0x1e2b8>
   30c2c:	mov	r1, #32768	; 0x8000
   30c30:	tst	r0, #512	; 0x200
   30c34:	and	r1, r1, r0, lsl #11
   30c38:	orr	r1, r1, #18688	; 0x4900
   30c3c:	orr	r2, r1, #524288	; 0x80000
   30c40:	bne	30f4c <__assert_fail@plt+0x1e49c>
   30c44:	movw	r0, #35340	; 0x8a0c
   30c48:	mov	r1, r2
   30c4c:	movt	r0, #4
   30c50:	bl	22aec <__assert_fail@plt+0x1003c>
   30c54:	b	30f5c <__assert_fail@plt+0x1e4ac>
   30c58:	mov	r0, r4
   30c5c:	mov	r1, r6
   30c60:	mov	r2, #0
   30c64:	bl	3073c <__assert_fail@plt+0x1dc8c>
   30c68:	strh	r0, [r6, #56]	; 0x38
   30c6c:	mov	r5, r6
   30c70:	b	31304 <__assert_fail@plt+0x1e854>
   30c74:	ldrh	r2, [r6, #56]	; 0x38
   30c78:	cmp	r2, #1
   30c7c:	bne	30cd8 <__assert_fail@plt+0x1e228>
   30c80:	cmp	r1, #4
   30c84:	bne	30d70 <__assert_fail@plt+0x1e2c0>
   30c88:	ldrb	r0, [r6, #58]	; 0x3a
   30c8c:	tst	r0, #2
   30c90:	beq	30c9c <__assert_fail@plt+0x1e1ec>
   30c94:	ldr	r0, [r6, #36]	; 0x24
   30c98:	bl	12a68 <close@plt>
   30c9c:	ldr	r5, [r4, #4]
   30ca0:	cmp	r5, #0
   30ca4:	bne	30cc0 <__assert_fail@plt+0x1e210>
   30ca8:	b	30e08 <__assert_fail@plt+0x1e358>
   30cac:	mov	r0, r5
   30cb0:	bl	30174 <__assert_fail@plt+0x1d6c4>
   30cb4:	cmp	r8, #0
   30cb8:	mov	r5, r8
   30cbc:	beq	30e00 <__assert_fail@plt+0x1e350>
   30cc0:	ldrd	r8, [r5, #8]
   30cc4:	cmp	r9, #0
   30cc8:	beq	30cac <__assert_fail@plt+0x1e1fc>
   30ccc:	mov	r0, r9
   30cd0:	bl	12a80 <closedir@plt>
   30cd4:	b	30cac <__assert_fail@plt+0x1e1fc>
   30cd8:	ldr	r5, [r6, #8]
   30cdc:	cmp	r5, #0
   30ce0:	beq	30e24 <__assert_fail@plt+0x1e374>
   30ce4:	mov	r0, r6
   30ce8:	str	r5, [r4]
   30cec:	bl	30174 <__assert_fail@plt+0x1d6c4>
   30cf0:	ldr	r0, [r5, #48]	; 0x30
   30cf4:	cmp	r0, #0
   30cf8:	beq	30e70 <__assert_fail@plt+0x1e3c0>
   30cfc:	ldrh	r0, [r5, #60]	; 0x3c
   30d00:	mov	r6, r5
   30d04:	cmp	r0, #4
   30d08:	beq	30cd8 <__assert_fail@plt+0x1e228>
   30d0c:	cmp	r0, #2
   30d10:	bne	311cc <__assert_fail@plt+0x1e71c>
   30d14:	mov	r0, r4
   30d18:	mov	r1, r5
   30d1c:	mov	r2, #1
   30d20:	bl	3073c <__assert_fail@plt+0x1dc8c>
   30d24:	cmp	r0, #1
   30d28:	strh	r0, [r5, #56]	; 0x38
   30d2c:	bne	311c4 <__assert_fail@plt+0x1e714>
   30d30:	ldr	r0, [r4, #48]	; 0x30
   30d34:	tst	r0, #4
   30d38:	bne	311c4 <__assert_fail@plt+0x1e714>
   30d3c:	mov	r1, #32768	; 0x8000
   30d40:	tst	r0, #512	; 0x200
   30d44:	and	r1, r1, r0, lsl #11
   30d48:	orr	r1, r1, #18688	; 0x4900
   30d4c:	orr	r2, r1, #524288	; 0x80000
   30d50:	bne	31184 <__assert_fail@plt+0x1e6d4>
   30d54:	movw	r0, #35340	; 0x8a0c
   30d58:	mov	r1, r2
   30d5c:	movt	r0, #4
   30d60:	bl	22aec <__assert_fail@plt+0x1003c>
   30d64:	b	31194 <__assert_fail@plt+0x1e6e4>
   30d68:	mov	r5, r6
   30d6c:	b	31208 <__assert_fail@plt+0x1e758>
   30d70:	tst	r0, #64	; 0x40
   30d74:	beq	30d90 <__assert_fail@plt+0x1e2e0>
   30d78:	ldrd	r2, [r4, #16]
   30d7c:	ldrd	r8, [r6, #64]	; 0x40
   30d80:	eor	r1, r9, r3
   30d84:	eor	r2, r8, r2
   30d88:	orrs	r1, r2, r1
   30d8c:	bne	30c88 <__assert_fail@plt+0x1e1d8>
   30d90:	ldr	r5, [r4, #4]
   30d94:	cmp	r5, #0
   30d98:	beq	30ef4 <__assert_fail@plt+0x1e444>
   30d9c:	tst	r0, #4096	; 0x1000
   30da0:	bne	30eb4 <__assert_fail@plt+0x1e404>
   30da4:	ldr	r3, [r6, #24]
   30da8:	mov	r0, r4
   30dac:	mov	r1, r6
   30db0:	mvn	r2, #0
   30db4:	bl	313f0 <__assert_fail@plt+0x1e940>
   30db8:	cmp	r0, #0
   30dbc:	beq	30f0c <__assert_fail@plt+0x1e45c>
   30dc0:	bl	12804 <__errno_location@plt>
   30dc4:	ldr	r0, [r0]
   30dc8:	str	r0, [r6, #32]
   30dcc:	ldrh	r0, [r6, #58]	; 0x3a
   30dd0:	orr	r0, r0, #1
   30dd4:	strh	r0, [r6, #58]	; 0x3a
   30dd8:	ldr	r0, [r4, #4]
   30ddc:	cmp	r0, #0
   30de0:	beq	30f0c <__assert_fail@plt+0x1e45c>
   30de4:	ldmib	r0, {r1, r2}
   30de8:	cmp	r2, #0
   30dec:	ldr	r1, [r1, #24]
   30df0:	str	r1, [r0, #24]
   30df4:	mov	r0, r2
   30df8:	bne	30de4 <__assert_fail@plt+0x1e334>
   30dfc:	b	30f0c <__assert_fail@plt+0x1e45c>
   30e00:	mov	r0, #0
   30e04:	str	r0, [r4, #4]
   30e08:	mov	r0, #6
   30e0c:	strh	r0, [r6, #56]	; 0x38
   30e10:	mov	r0, r4
   30e14:	mov	r1, r6
   30e18:	bl	31314 <__assert_fail@plt+0x1e864>
   30e1c:	mov	r5, r6
   30e20:	b	31304 <__assert_fail@plt+0x1e854>
   30e24:	ldr	r5, [r6, #4]
   30e28:	ldr	r0, [r5, #12]
   30e2c:	cmp	r0, #0
   30e30:	beq	30f8c <__assert_fail@plt+0x1e4dc>
   30e34:	str	r5, [r4]
   30e38:	ldr	r1, [r5, #40]	; 0x28
   30e3c:	ldr	r0, [r4, #24]
   30e40:	mov	r5, #0
   30e44:	strb	r5, [r0, r1]
   30e48:	mov	r0, r4
   30e4c:	mov	r1, #3
   30e50:	bl	31650 <__assert_fail@plt+0x1eba0>
   30e54:	cmp	r0, #0
   30e58:	beq	30f7c <__assert_fail@plt+0x1e4cc>
   30e5c:	mov	r7, r0
   30e60:	mov	r0, r6
   30e64:	bl	30174 <__assert_fail@plt+0x1d6c4>
   30e68:	mov	r5, r7
   30e6c:	b	311cc <__assert_fail@plt+0x1e71c>
   30e70:	mov	r0, r4
   30e74:	bl	320e0 <__assert_fail@plt+0x1f630>
   30e78:	ldr	r1, [r4, #48]	; 0x30
   30e7c:	cmp	r0, #0
   30e80:	beq	30e94 <__assert_fail@plt+0x1e3e4>
   30e84:	orr	r0, r1, #8192	; 0x2000
   30e88:	mov	r5, #0
   30e8c:	str	r0, [r4, #48]	; 0x30
   30e90:	b	31304 <__assert_fail@plt+0x1e854>
   30e94:	movw	r0, #258	; 0x102
   30e98:	tst	r1, r0
   30e9c:	beq	3103c <__assert_fail@plt+0x1e58c>
   30ea0:	ldr	r0, [r4, #56]	; 0x38
   30ea4:	cmp	r0, #0
   30ea8:	beq	31044 <__assert_fail@plt+0x1e594>
   30eac:	bl	234d8 <__assert_fail@plt+0x10a28>
   30eb0:	b	31044 <__assert_fail@plt+0x1e594>
   30eb4:	bic	r0, r0, #4096	; 0x1000
   30eb8:	str	r0, [r4, #48]	; 0x30
   30ebc:	b	30ed4 <__assert_fail@plt+0x1e424>
   30ec0:	mov	r0, r5
   30ec4:	bl	30174 <__assert_fail@plt+0x1d6c4>
   30ec8:	cmp	r8, #0
   30ecc:	mov	r5, r8
   30ed0:	beq	30eec <__assert_fail@plt+0x1e43c>
   30ed4:	ldrd	r8, [r5, #8]
   30ed8:	cmp	r9, #0
   30edc:	beq	30ec0 <__assert_fail@plt+0x1e410>
   30ee0:	mov	r0, r9
   30ee4:	bl	12a80 <closedir@plt>
   30ee8:	b	30ec0 <__assert_fail@plt+0x1e410>
   30eec:	mov	r0, #0
   30ef0:	str	r0, [r4, #4]
   30ef4:	mov	r0, r4
   30ef8:	mov	r1, #3
   30efc:	bl	31650 <__assert_fail@plt+0x1eba0>
   30f00:	cmp	r0, #0
   30f04:	str	r0, [r4, #4]
   30f08:	beq	30f1c <__assert_fail@plt+0x1e46c>
   30f0c:	ldr	r5, [r4, #4]
   30f10:	mov	r0, #0
   30f14:	str	r0, [r4, #4]
   30f18:	b	311cc <__assert_fail@plt+0x1e71c>
   30f1c:	ldrb	r0, [r4, #49]	; 0x31
   30f20:	mov	r5, #0
   30f24:	tst	r0, #32
   30f28:	bne	31304 <__assert_fail@plt+0x1e854>
   30f2c:	ldr	r0, [r6, #32]
   30f30:	cmp	r0, #0
   30f34:	beq	30e10 <__assert_fail@plt+0x1e360>
   30f38:	ldrh	r0, [r6, #56]	; 0x38
   30f3c:	cmp	r0, #4
   30f40:	beq	30e10 <__assert_fail@plt+0x1e360>
   30f44:	mov	r0, #7
   30f48:	b	30e0c <__assert_fail@plt+0x1e35c>
   30f4c:	ldr	r0, [r4, #32]
   30f50:	movw	r1, #35340	; 0x8a0c
   30f54:	movt	r1, #4
   30f58:	bl	26670 <__assert_fail@plt+0x13bc0>
   30f5c:	cmn	r0, #1
   30f60:	str	r0, [r6, #36]	; 0x24
   30f64:	ble	31020 <__assert_fail@plt+0x1e570>
   30f68:	ldrh	r0, [r6, #58]	; 0x3a
   30f6c:	mov	r5, r6
   30f70:	orr	r0, r0, #2
   30f74:	strh	r0, [r6, #58]	; 0x3a
   30f78:	b	31208 <__assert_fail@plt+0x1e758>
   30f7c:	ldrb	r0, [r4, #49]	; 0x31
   30f80:	tst	r0, #32
   30f84:	bne	31304 <__assert_fail@plt+0x1e854>
   30f88:	ldr	r5, [r6, #4]
   30f8c:	mov	r0, r6
   30f90:	str	r5, [r4]
   30f94:	bl	30174 <__assert_fail@plt+0x1d6c4>
   30f98:	ldr	r0, [r5, #48]	; 0x30
   30f9c:	cmn	r0, #1
   30fa0:	beq	31004 <__assert_fail@plt+0x1e554>
   30fa4:	ldrh	r0, [r5, #56]	; 0x38
   30fa8:	cmp	r0, #11
   30fac:	beq	31310 <__assert_fail@plt+0x1e860>
   30fb0:	ldr	r0, [r5, #40]	; 0x28
   30fb4:	ldr	r1, [r4, #24]
   30fb8:	mov	r2, #0
   30fbc:	strb	r2, [r1, r0]
   30fc0:	ldr	r0, [r5, #48]	; 0x30
   30fc4:	cmp	r0, #0
   30fc8:	beq	31114 <__assert_fail@plt+0x1e664>
   30fcc:	ldrh	r0, [r5, #58]	; 0x3a
   30fd0:	tst	r0, #2
   30fd4:	bne	31140 <__assert_fail@plt+0x1e690>
   30fd8:	tst	r0, #1
   30fdc:	bne	312c8 <__assert_fail@plt+0x1e818>
   30fe0:	ldr	r1, [r5, #4]
   30fe4:	movw	r3, #55057	; 0xd711
   30fe8:	mov	r0, r4
   30fec:	mvn	r2, #0
   30ff0:	movt	r3, #4
   30ff4:	bl	313f0 <__assert_fail@plt+0x1e940>
   30ff8:	cmp	r0, #0
   30ffc:	bne	31124 <__assert_fail@plt+0x1e674>
   31000:	b	312c8 <__assert_fail@plt+0x1e818>
   31004:	mov	r0, r5
   31008:	bl	30174 <__assert_fail@plt+0x1d6c4>
   3100c:	bl	12804 <__errno_location@plt>
   31010:	mov	r5, #0
   31014:	str	r5, [r0]
   31018:	str	r5, [r4]
   3101c:	b	31304 <__assert_fail@plt+0x1e854>
   31020:	bl	12804 <__errno_location@plt>
   31024:	ldr	r0, [r0]
   31028:	mov	r1, #7
   3102c:	mov	r5, r6
   31030:	strh	r1, [r6, #56]	; 0x38
   31034:	str	r0, [r6, #32]
   31038:	b	31208 <__assert_fail@plt+0x1e758>
   3103c:	ldr	r0, [r4, #56]	; 0x38
   31040:	bl	30174 <__assert_fail@plt+0x1d6c4>
   31044:	ldr	r1, [r5, #52]	; 0x34
   31048:	add	r6, r5, #168	; 0xa8
   3104c:	str	r1, [r5, #40]	; 0x28
   31050:	add	r2, r1, #1
   31054:	mov	r1, r6
   31058:	ldr	r0, [r4, #24]
   3105c:	bl	12474 <memmove@plt>
   31060:	mov	r0, r6
   31064:	mov	r1, #47	; 0x2f
   31068:	bl	12924 <strrchr@plt>
   3106c:	cmp	r0, #0
   31070:	beq	310ac <__assert_fail@plt+0x1e5fc>
   31074:	cmp	r0, r6
   31078:	bne	31088 <__assert_fail@plt+0x1e5d8>
   3107c:	ldrb	r1, [r5, #169]	; 0xa9
   31080:	cmp	r1, #0
   31084:	beq	310ac <__assert_fail@plt+0x1e5fc>
   31088:	add	r7, r0, #1
   3108c:	mov	r0, r7
   31090:	bl	127bc <strlen@plt>
   31094:	mov	r8, r0
   31098:	add	r2, r0, #1
   3109c:	mov	r0, r6
   310a0:	mov	r1, r7
   310a4:	bl	12474 <memmove@plt>
   310a8:	str	r8, [r5, #52]	; 0x34
   310ac:	ldr	r0, [r4, #24]
   310b0:	movw	r1, #258	; 0x102
   310b4:	str	r0, [r5, #24]
   310b8:	str	r0, [r5, #28]
   310bc:	ldrh	r0, [r4, #48]	; 0x30
   310c0:	tst	r0, r1
   310c4:	beq	310f8 <__assert_fail@plt+0x1e648>
   310c8:	movw	r0, #372	; 0x174
   310cc:	movw	r2, #9288	; 0x2448
   310d0:	movw	r3, #9320	; 0x2468
   310d4:	mov	r1, #0
   310d8:	movt	r0, #3
   310dc:	movt	r2, #3
   310e0:	movt	r3, #3
   310e4:	str	r0, [sp]
   310e8:	mov	r0, #31
   310ec:	bl	231d4 <__assert_fail@plt+0x10724>
   310f0:	str	r0, [r4, #56]	; 0x38
   310f4:	b	31208 <__assert_fail@plt+0x1e758>
   310f8:	mov	r0, #32
   310fc:	bl	327ac <__assert_fail@plt+0x1fcfc>
   31100:	cmp	r0, #0
   31104:	str	r0, [r4, #56]	; 0x38
   31108:	beq	31208 <__assert_fail@plt+0x1e758>
   3110c:	bl	46b40 <__assert_fail@plt+0x34090>
   31110:	b	31208 <__assert_fail@plt+0x1e758>
   31114:	mov	r0, r4
   31118:	bl	320e0 <__assert_fail@plt+0x1f630>
   3111c:	cmp	r0, #0
   31120:	beq	312c8 <__assert_fail@plt+0x1e818>
   31124:	bl	12804 <__errno_location@plt>
   31128:	ldr	r0, [r0]
   3112c:	str	r0, [r5, #32]
   31130:	ldr	r0, [r4, #48]	; 0x30
   31134:	orr	r0, r0, #8192	; 0x2000
   31138:	str	r0, [r4, #48]	; 0x30
   3113c:	b	312c8 <__assert_fail@plt+0x1e818>
   31140:	ldr	r0, [r4, #48]	; 0x30
   31144:	tst	r0, #4
   31148:	bne	312c0 <__assert_fail@plt+0x1e810>
   3114c:	ldr	r6, [r5, #36]	; 0x24
   31150:	tst	r0, #512	; 0x200
   31154:	bne	31294 <__assert_fail@plt+0x1e7e4>
   31158:	mov	r0, r6
   3115c:	bl	129b4 <fchdir@plt>
   31160:	cmp	r0, #0
   31164:	beq	312c0 <__assert_fail@plt+0x1e810>
   31168:	bl	12804 <__errno_location@plt>
   3116c:	ldr	r0, [r0]
   31170:	str	r0, [r5, #32]
   31174:	ldr	r0, [r4, #48]	; 0x30
   31178:	orr	r0, r0, #8192	; 0x2000
   3117c:	str	r0, [r4, #48]	; 0x30
   31180:	b	312c0 <__assert_fail@plt+0x1e810>
   31184:	ldr	r0, [r4, #32]
   31188:	movw	r1, #35340	; 0x8a0c
   3118c:	movt	r1, #4
   31190:	bl	26670 <__assert_fail@plt+0x13bc0>
   31194:	cmn	r0, #1
   31198:	str	r0, [r5, #36]	; 0x24
   3119c:	ble	311b0 <__assert_fail@plt+0x1e700>
   311a0:	ldrh	r0, [r5, #58]	; 0x3a
   311a4:	orr	r0, r0, #2
   311a8:	strh	r0, [r5, #58]	; 0x3a
   311ac:	b	311c4 <__assert_fail@plt+0x1e714>
   311b0:	bl	12804 <__errno_location@plt>
   311b4:	ldr	r0, [r0]
   311b8:	mov	r1, #7
   311bc:	strh	r1, [r5, #56]	; 0x38
   311c0:	str	r0, [r5, #32]
   311c4:	mov	r0, #3
   311c8:	strh	r0, [r5, #60]	; 0x3c
   311cc:	ldr	r0, [r5, #4]
   311d0:	ldr	r1, [r0, #28]
   311d4:	ldr	r0, [r0, #40]	; 0x28
   311d8:	sub	r2, r0, #1
   311dc:	ldrb	r1, [r1, r2]
   311e0:	cmp	r1, #47	; 0x2f
   311e4:	ldr	r1, [r4, #24]
   311e8:	moveq	r0, r2
   311ec:	mov	r2, #47	; 0x2f
   311f0:	strb	r2, [r1, r0]!
   311f4:	ldr	r2, [r5, #52]	; 0x34
   311f8:	add	r0, r1, #1
   311fc:	add	r1, r5, #168	; 0xa8
   31200:	add	r2, r2, #1
   31204:	bl	12474 <memmove@plt>
   31208:	str	r5, [r4]
   3120c:	ldrh	r0, [r5, #56]	; 0x38
   31210:	cmp	r0, #11
   31214:	bne	3124c <__assert_fail@plt+0x1e79c>
   31218:	add	r0, r5, #112	; 0x70
   3121c:	ldrd	r0, [r0]
   31220:	eor	r2, r0, #1
   31224:	orrs	r2, r2, r1
   31228:	beq	31304 <__assert_fail@plt+0x1e854>
   3122c:	eor	r0, r0, #2
   31230:	orrs	r0, r0, r1
   31234:	bne	31310 <__assert_fail@plt+0x1e860>
   31238:	mov	r0, r4
   3123c:	mov	r1, r5
   31240:	mov	r2, #0
   31244:	bl	3073c <__assert_fail@plt+0x1dc8c>
   31248:	strh	r0, [r5, #56]	; 0x38
   3124c:	cmp	r0, #1
   31250:	bne	31304 <__assert_fail@plt+0x1e854>
   31254:	ldr	r0, [r5, #48]	; 0x30
   31258:	cmp	r0, #0
   3125c:	bne	3126c <__assert_fail@plt+0x1e7bc>
   31260:	add	r0, r5, #64	; 0x40
   31264:	ldrd	r0, [r0]
   31268:	strd	r0, [r4, #16]
   3126c:	mov	r0, r4
   31270:	mov	r1, r5
   31274:	bl	32170 <__assert_fail@plt+0x1f6c0>
   31278:	cmp	r0, #0
   3127c:	bne	31304 <__assert_fail@plt+0x1e854>
   31280:	bl	12804 <__errno_location@plt>
   31284:	mov	r1, #12
   31288:	mov	r5, #0
   3128c:	str	r1, [r0]
   31290:	b	31304 <__assert_fail@plt+0x1e854>
   31294:	ldr	r1, [r4, #32]
   31298:	cmp	r1, r6
   3129c:	bne	312a8 <__assert_fail@plt+0x1e7f8>
   312a0:	cmn	r1, #100	; 0x64
   312a4:	bne	31310 <__assert_fail@plt+0x1e860>
   312a8:	add	r0, r4, #60	; 0x3c
   312ac:	bl	46db0 <__assert_fail@plt+0x34300>
   312b0:	cmp	r0, #0
   312b4:	bmi	312bc <__assert_fail@plt+0x1e80c>
   312b8:	bl	12a68 <close@plt>
   312bc:	str	r6, [r4, #32]
   312c0:	ldr	r0, [r5, #36]	; 0x24
   312c4:	bl	12a68 <close@plt>
   312c8:	ldrh	r0, [r5, #56]	; 0x38
   312cc:	cmp	r0, #2
   312d0:	beq	312f8 <__assert_fail@plt+0x1e848>
   312d4:	ldr	r0, [r5, #32]
   312d8:	mov	r1, #7
   312dc:	cmp	r0, #0
   312e0:	movweq	r1, #6
   312e4:	strh	r1, [r5, #56]	; 0x38
   312e8:	bne	312f8 <__assert_fail@plt+0x1e848>
   312ec:	mov	r0, r4
   312f0:	mov	r1, r5
   312f4:	bl	31314 <__assert_fail@plt+0x1e864>
   312f8:	ldrb	r0, [r4, #49]	; 0x31
   312fc:	tst	r0, #32
   31300:	movne	r5, #0
   31304:	mov	r0, r5
   31308:	sub	sp, fp, #24
   3130c:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   31310:	bl	12a5c <abort@plt>
   31314:	push	{r4, r5, r7, sl, fp, lr}
   31318:	add	fp, sp, #16
   3131c:	sub	sp, sp, #24
   31320:	ldrh	r2, [r0, #48]	; 0x30
   31324:	movw	r3, #258	; 0x102
   31328:	add	lr, r1, #64	; 0x40
   3132c:	add	r4, r1, #160	; 0xa0
   31330:	tst	r2, r3
   31334:	beq	3136c <__assert_fail@plt+0x1e8bc>
   31338:	ldrd	r2, [lr]
   3133c:	mov	r1, sp
   31340:	stm	sp, {r2, r3}
   31344:	ldrd	r2, [r4]
   31348:	str	r3, [sp, #12]
   3134c:	str	r2, [sp, #8]
   31350:	ldr	r0, [r0, #56]	; 0x38
   31354:	bl	23d68 <__assert_fail@plt+0x112b8>
   31358:	cmp	r0, #0
   3135c:	beq	313ec <__assert_fail@plt+0x1e93c>
   31360:	bl	30174 <__assert_fail@plt+0x1d6c4>
   31364:	sub	sp, fp, #16
   31368:	pop	{r4, r5, r7, sl, fp, pc}
   3136c:	ldr	r1, [r1, #4]
   31370:	cmp	r1, #0
   31374:	beq	313e4 <__assert_fail@plt+0x1e934>
   31378:	ldr	r2, [r1, #48]	; 0x30
   3137c:	cmp	r2, #0
   31380:	bmi	313e4 <__assert_fail@plt+0x1e934>
   31384:	ldr	ip, [r0, #56]	; 0x38
   31388:	ldrd	r2, [ip, #16]
   3138c:	orrs	r2, r2, r3
   31390:	beq	313ec <__assert_fail@plt+0x1e93c>
   31394:	ldrd	r2, [r4]
   31398:	ldrd	r4, [ip]
   3139c:	eor	r3, r5, r3
   313a0:	eor	r2, r4, r2
   313a4:	orrs	r2, r2, r3
   313a8:	bne	313e4 <__assert_fail@plt+0x1e934>
   313ac:	add	r3, ip, #8
   313b0:	ldm	lr, {r2, r5}
   313b4:	ldm	r3, {r4, r7}
   313b8:	eor	r7, r7, r5
   313bc:	eor	r2, r4, r2
   313c0:	orrs	r2, r2, r7
   313c4:	bne	313e4 <__assert_fail@plt+0x1e934>
   313c8:	add	r2, r1, #64	; 0x40
   313cc:	add	r1, r1, #160	; 0xa0
   313d0:	ldm	r2, {r2, r5}
   313d4:	stm	r3, {r2, r5}
   313d8:	ldr	r0, [r0, #56]	; 0x38
   313dc:	ldrd	r2, [r1]
   313e0:	strd	r2, [r0]
   313e4:	sub	sp, fp, #16
   313e8:	pop	{r4, r5, r7, sl, fp, pc}
   313ec:	bl	12a5c <abort@plt>
   313f0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   313f4:	add	fp, sp, #28
   313f8:	sub	sp, sp, #108	; 0x6c
   313fc:	mov	r7, r3
   31400:	mov	r4, r2
   31404:	mov	r8, r1
   31408:	mov	sl, r0
   3140c:	cmp	r3, #0
   31410:	beq	31434 <__assert_fail@plt+0x1e984>
   31414:	movw	r1, #55057	; 0xd711
   31418:	mov	r0, r7
   3141c:	movt	r1, #4
   31420:	bl	123fc <strcmp@plt>
   31424:	cmp	r0, #0
   31428:	mov	r6, r0
   3142c:	movwne	r6, #1
   31430:	b	31438 <__assert_fail@plt+0x1e988>
   31434:	mov	r6, #1
   31438:	ldr	r0, [sl, #48]	; 0x30
   3143c:	tst	r0, #4
   31440:	bne	31498 <__assert_fail@plt+0x1e9e8>
   31444:	cmn	r4, #1
   31448:	mov	r1, #0
   3144c:	mov	r9, #0
   31450:	movwgt	r1, #1
   31454:	orrs	r1, r1, r6
   31458:	bne	314b8 <__assert_fail@plt+0x1ea08>
   3145c:	ands	r0, r0, #512	; 0x200
   31460:	beq	314b8 <__assert_fail@plt+0x1ea08>
   31464:	add	r4, sl, #60	; 0x3c
   31468:	mov	r0, r4
   3146c:	bl	46da8 <__assert_fail@plt+0x342f8>
   31470:	cmp	r0, #0
   31474:	bne	314c0 <__assert_fail@plt+0x1ea10>
   31478:	mov	r0, r4
   3147c:	bl	46dfc <__assert_fail@plt+0x3434c>
   31480:	cmn	r0, #1
   31484:	ble	314c0 <__assert_fail@plt+0x1ea10>
   31488:	mov	r4, r0
   3148c:	mov	r9, #0
   31490:	mov	r7, #0
   31494:	b	31508 <__assert_fail@plt+0x1ea58>
   31498:	mov	r5, #0
   3149c:	cmp	r4, #0
   314a0:	bmi	31640 <__assert_fail@plt+0x1eb90>
   314a4:	ands	r0, r0, #512	; 0x200
   314a8:	beq	31640 <__assert_fail@plt+0x1eb90>
   314ac:	mov	r0, r4
   314b0:	bl	12a68 <close@plt>
   314b4:	b	31640 <__assert_fail@plt+0x1eb90>
   314b8:	cmn	r4, #1
   314bc:	bgt	31508 <__assert_fail@plt+0x1ea58>
   314c0:	ldr	r0, [sl, #48]	; 0x30
   314c4:	mov	r1, #32768	; 0x8000
   314c8:	and	r1, r1, r0, lsl #11
   314cc:	tst	r0, #512	; 0x200
   314d0:	orr	r1, r1, #18688	; 0x4900
   314d4:	orr	r2, r1, #524288	; 0x80000
   314d8:	bne	314ec <__assert_fail@plt+0x1ea3c>
   314dc:	mov	r0, r7
   314e0:	mov	r1, r2
   314e4:	bl	22aec <__assert_fail@plt+0x1003c>
   314e8:	b	314f8 <__assert_fail@plt+0x1ea48>
   314ec:	ldr	r0, [sl, #32]
   314f0:	mov	r1, r7
   314f4:	bl	26670 <__assert_fail@plt+0x13bc0>
   314f8:	mov	r4, r0
   314fc:	mov	r9, #1
   31500:	cmp	r0, #0
   31504:	bmi	315e4 <__assert_fail@plt+0x1eb34>
   31508:	ldr	r5, [sl, #48]	; 0x30
   3150c:	tst	r5, #2
   31510:	bne	31554 <__assert_fail@plt+0x1eaa4>
   31514:	cmp	r7, #0
   31518:	beq	31534 <__assert_fail@plt+0x1ea84>
   3151c:	movw	r1, #55057	; 0xd711
   31520:	mov	r0, r7
   31524:	movt	r1, #4
   31528:	bl	123fc <strcmp@plt>
   3152c:	cmp	r0, #0
   31530:	beq	31554 <__assert_fail@plt+0x1eaa4>
   31534:	tst	r5, #512	; 0x200
   31538:	bne	315b4 <__assert_fail@plt+0x1eb04>
   3153c:	mov	r0, r4
   31540:	bl	129b4 <fchdir@plt>
   31544:	mov	r5, r0
   31548:	cmp	r9, #0
   3154c:	bne	31604 <__assert_fail@plt+0x1eb54>
   31550:	b	31640 <__assert_fail@plt+0x1eb90>
   31554:	mov	r2, sp
   31558:	mov	r0, #3
   3155c:	mov	r1, r4
   31560:	bl	1260c <__fxstat64@plt>
   31564:	cmp	r0, #0
   31568:	bne	315f8 <__assert_fail@plt+0x1eb48>
   3156c:	add	r0, r8, #64	; 0x40
   31570:	ldm	sp, {r2, r3}
   31574:	ldrd	r0, [r0]
   31578:	eor	r1, r1, r3
   3157c:	eor	r0, r0, r2
   31580:	orrs	r0, r0, r1
   31584:	bne	315ec <__assert_fail@plt+0x1eb3c>
   31588:	add	r0, r8, #160	; 0xa0
   3158c:	ldr	r2, [sp, #96]	; 0x60
   31590:	ldr	r3, [sp, #100]	; 0x64
   31594:	ldrd	r0, [r0]
   31598:	eor	r1, r1, r3
   3159c:	eor	r0, r0, r2
   315a0:	orrs	r0, r0, r1
   315a4:	bne	315ec <__assert_fail@plt+0x1eb3c>
   315a8:	ldr	r5, [sl, #48]	; 0x30
   315ac:	tst	r5, #512	; 0x200
   315b0:	beq	3153c <__assert_fail@plt+0x1ea8c>
   315b4:	ldr	r1, [sl, #32]
   315b8:	cmp	r1, r4
   315bc:	bne	315c8 <__assert_fail@plt+0x1eb18>
   315c0:	cmn	r1, #100	; 0x64
   315c4:	bne	3164c <__assert_fail@plt+0x1eb9c>
   315c8:	cmp	r6, #0
   315cc:	beq	31620 <__assert_fail@plt+0x1eb70>
   315d0:	add	r0, sl, #60	; 0x3c
   315d4:	bl	46db0 <__assert_fail@plt+0x34300>
   315d8:	cmp	r0, #0
   315dc:	bpl	31634 <__assert_fail@plt+0x1eb84>
   315e0:	b	31638 <__assert_fail@plt+0x1eb88>
   315e4:	mvn	r5, #0
   315e8:	b	31640 <__assert_fail@plt+0x1eb90>
   315ec:	bl	12804 <__errno_location@plt>
   315f0:	mov	r1, #2
   315f4:	str	r1, [r0]
   315f8:	mvn	r5, #0
   315fc:	cmp	r9, #0
   31600:	beq	31640 <__assert_fail@plt+0x1eb90>
   31604:	bl	12804 <__errno_location@plt>
   31608:	ldr	r7, [r0]
   3160c:	mov	r6, r0
   31610:	mov	r0, r4
   31614:	bl	12a68 <close@plt>
   31618:	str	r7, [r6]
   3161c:	b	31640 <__assert_fail@plt+0x1eb90>
   31620:	tst	r5, #4
   31624:	bne	31638 <__assert_fail@plt+0x1eb88>
   31628:	cmp	r1, #0
   3162c:	bmi	31638 <__assert_fail@plt+0x1eb88>
   31630:	mov	r0, r1
   31634:	bl	12a68 <close@plt>
   31638:	str	r4, [sl, #32]
   3163c:	mov	r5, #0
   31640:	mov	r0, r5
   31644:	sub	sp, fp, #28
   31648:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   3164c:	bl	12a5c <abort@plt>
   31650:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   31654:	add	fp, sp, #28
   31658:	sub	sp, sp, #68	; 0x44
   3165c:	ldr	sl, [r0]
   31660:	mov	r7, r1
   31664:	mov	r5, r0
   31668:	str	r0, [sp, #48]	; 0x30
   3166c:	ldr	r4, [sl, #12]
   31670:	cmp	r4, #0
   31674:	beq	316bc <__assert_fail@plt+0x1ec0c>
   31678:	mov	r0, r4
   3167c:	bl	129a8 <dirfd@plt>
   31680:	cmn	r0, #1
   31684:	str	r0, [fp, #-32]	; 0xffffffe0
   31688:	ble	316f0 <__assert_fail@plt+0x1ec40>
   3168c:	mov	r1, r5
   31690:	str	r4, [sp, #12]
   31694:	str	r7, [sp, #4]
   31698:	mov	ip, #0
   3169c:	ldr	r0, [r1, #44]!	; 0x2c
   316a0:	str	r1, [sp, #20]
   316a4:	mvn	r1, #0
   316a8:	cmp	r0, #0
   316ac:	movweq	r1, #34464	; 0x86a0
   316b0:	movteq	r1, #1
   316b4:	str	r1, [sp, #32]
   316b8:	b	31940 <__assert_fail@plt+0x1ee90>
   316bc:	ldr	r3, [r5, #48]	; 0x30
   316c0:	mvn	r0, #99	; 0x63
   316c4:	mov	r2, #0
   316c8:	and	r1, r3, #516	; 0x204
   316cc:	cmp	r1, #512	; 0x200
   316d0:	ldr	r1, [sl, #24]
   316d4:	ldreq	r0, [r5, #32]
   316d8:	tst	r3, #16
   316dc:	beq	31718 <__assert_fail@plt+0x1ec68>
   316e0:	tst	r3, #1
   316e4:	bne	3170c <__assert_fail@plt+0x1ec5c>
   316e8:	mov	r2, #32768	; 0x8000
   316ec:	b	31718 <__assert_fail@plt+0x1ec68>
   316f0:	ldr	r0, [sl, #12]
   316f4:	bl	12a80 <closedir@plt>
   316f8:	mov	r6, #0
   316fc:	str	r6, [sl, #12]
   31700:	cmp	r7, #3
   31704:	beq	3175c <__assert_fail@plt+0x1ecac>
   31708:	b	320d4 <__assert_fail@plt+0x1f624>
   3170c:	ldr	r3, [sl, #48]	; 0x30
   31710:	cmp	r3, #0
   31714:	movne	r2, #32768	; 0x8000
   31718:	sub	r3, fp, #32
   3171c:	bl	47084 <__assert_fail@plt+0x345d4>
   31720:	cmp	r0, #0
   31724:	str	r0, [sl, #12]
   31728:	beq	31750 <__assert_fail@plt+0x1eca0>
   3172c:	ldrh	r0, [sl, #56]	; 0x38
   31730:	cmp	r0, #11
   31734:	bne	31774 <__assert_fail@plt+0x1ecc4>
   31738:	mov	r0, r5
   3173c:	mov	r1, sl
   31740:	mov	r2, #0
   31744:	bl	3073c <__assert_fail@plt+0x1dc8c>
   31748:	strh	r0, [sl, #56]	; 0x38
   3174c:	b	317b4 <__assert_fail@plt+0x1ed04>
   31750:	mov	r6, #0
   31754:	cmp	r7, #3
   31758:	bne	320d4 <__assert_fail@plt+0x1f624>
   3175c:	mov	r0, #4
   31760:	strh	r0, [sl, #56]	; 0x38
   31764:	bl	12804 <__errno_location@plt>
   31768:	ldr	r0, [r0]
   3176c:	str	r0, [sl, #32]
   31770:	b	320d4 <__assert_fail@plt+0x1f624>
   31774:	ldrb	r0, [r5, #49]	; 0x31
   31778:	tst	r0, #1
   3177c:	beq	317b4 <__assert_fail@plt+0x1ed04>
   31780:	mov	r0, r5
   31784:	mov	r1, sl
   31788:	bl	31314 <__assert_fail@plt+0x1e864>
   3178c:	mov	r0, r5
   31790:	mov	r1, sl
   31794:	mov	r2, #0
   31798:	mov	r6, #0
   3179c:	bl	3073c <__assert_fail@plt+0x1dc8c>
   317a0:	mov	r0, r5
   317a4:	mov	r1, sl
   317a8:	bl	32170 <__assert_fail@plt+0x1f6c0>
   317ac:	cmp	r0, #0
   317b0:	beq	31858 <__assert_fail@plt+0x1eda8>
   317b4:	mov	r1, r5
   317b8:	str	r7, [sp, #4]
   317bc:	str	r4, [sp, #12]
   317c0:	ldr	r0, [r1, #44]!	; 0x2c
   317c4:	str	r1, [sp, #20]
   317c8:	mvn	r1, #0
   317cc:	cmp	r0, #0
   317d0:	movweq	r1, #34464	; 0x86a0
   317d4:	movteq	r1, #1
   317d8:	cmp	r7, #2
   317dc:	str	r1, [sp, #32]
   317e0:	bne	317fc <__assert_fail@plt+0x1ed4c>
   317e4:	mov	ip, #1
   317e8:	cmp	r7, #3
   317ec:	bne	31940 <__assert_fail@plt+0x1ee90>
   317f0:	sub	r0, r7, #3
   317f4:	mov	r5, #0
   317f8:	b	31884 <__assert_fail@plt+0x1edd4>
   317fc:	ldr	r0, [r5, #48]	; 0x30
   31800:	and	r0, r0, #56	; 0x38
   31804:	cmp	r0, #24
   31808:	bne	3187c <__assert_fail@plt+0x1edcc>
   3180c:	ldr	r0, [sl, #84]	; 0x54
   31810:	cmp	r0, #2
   31814:	bne	3187c <__assert_fail@plt+0x1edcc>
   31818:	ldr	r1, [fp, #-32]	; 0xffffffe0
   3181c:	mov	r0, sl
   31820:	bl	324e8 <__assert_fail@plt+0x1fa38>
   31824:	movw	r1, #26984	; 0x6968
   31828:	cmp	r0, r1
   3182c:	ble	31868 <__assert_fail@plt+0x1edb8>
   31830:	movw	r1, #26985	; 0x6969
   31834:	cmp	r0, r1
   31838:	movwne	r1, #16719	; 0x414f
   3183c:	movtne	r1, #21318	; 0x5346
   31840:	cmpne	r0, r1
   31844:	beq	3187c <__assert_fail@plt+0x1edcc>
   31848:	movw	r1, #40864	; 0x9fa0
   3184c:	cmp	r0, r1
   31850:	beq	3187c <__assert_fail@plt+0x1edcc>
   31854:	b	317e4 <__assert_fail@plt+0x1ed34>
   31858:	bl	12804 <__errno_location@plt>
   3185c:	mov	r1, #12
   31860:	str	r1, [r0]
   31864:	b	320d4 <__assert_fail@plt+0x1f624>
   31868:	movw	r1, #19778	; 0x4d42
   3186c:	movt	r1, #65363	; 0xff53
   31870:	cmp	r0, r1
   31874:	cmpne	r0, #0
   31878:	bne	317e4 <__assert_fail@plt+0x1ed34>
   3187c:	sub	r0, r7, #3
   31880:	mov	r5, #1
   31884:	clz	r0, r0
   31888:	lsr	r6, r0, #5
   3188c:	ldr	r0, [sp, #48]	; 0x30
   31890:	ldr	r2, [fp, #-32]	; 0xffffffe0
   31894:	ldrb	r0, [r0, #49]	; 0x31
   31898:	tst	r0, #2
   3189c:	beq	318b8 <__assert_fail@plt+0x1ee08>
   318a0:	mov	r0, r2
   318a4:	movw	r1, #1030	; 0x406
   318a8:	mov	r2, #3
   318ac:	bl	2ff38 <__assert_fail@plt+0x1d488>
   318b0:	mov	r2, r0
   318b4:	str	r0, [fp, #-32]	; 0xffffffe0
   318b8:	cmp	r2, #0
   318bc:	bmi	318d8 <__assert_fail@plt+0x1ee28>
   318c0:	ldr	r0, [sp, #48]	; 0x30
   318c4:	mov	r1, sl
   318c8:	mov	r3, #0
   318cc:	bl	313f0 <__assert_fail@plt+0x1e940>
   318d0:	cmp	r0, #0
   318d4:	beq	31938 <__assert_fail@plt+0x1ee88>
   318d8:	and	r0, r6, r5
   318dc:	cmp	r0, #1
   318e0:	bne	318f0 <__assert_fail@plt+0x1ee40>
   318e4:	bl	12804 <__errno_location@plt>
   318e8:	ldr	r0, [r0]
   318ec:	str	r0, [sl, #32]
   318f0:	ldrh	r0, [sl, #58]	; 0x3a
   318f4:	orr	r0, r0, #1
   318f8:	strh	r0, [sl, #58]	; 0x3a
   318fc:	ldr	r0, [sl, #12]
   31900:	bl	12a80 <closedir@plt>
   31904:	ldr	r5, [sp, #48]	; 0x30
   31908:	mov	r4, #0
   3190c:	str	r4, [sl, #12]
   31910:	ldrb	r0, [r5, #49]	; 0x31
   31914:	tst	r0, #2
   31918:	beq	3192c <__assert_fail@plt+0x1ee7c>
   3191c:	ldr	r0, [fp, #-32]	; 0xffffffe0
   31920:	cmp	r0, #0
   31924:	bmi	3192c <__assert_fail@plt+0x1ee7c>
   31928:	bl	12a68 <close@plt>
   3192c:	mov	ip, #1
   31930:	str	r4, [sl, #12]
   31934:	b	31940 <__assert_fail@plt+0x1ee90>
   31938:	ldr	r5, [sp, #48]	; 0x30
   3193c:	mov	ip, #0
   31940:	ldr	r0, [sl, #40]	; 0x28
   31944:	ldr	r1, [sl, #28]
   31948:	mov	r9, #0
   3194c:	sub	r2, r0, #1
   31950:	ldrb	r1, [r1, r2]
   31954:	cmp	r1, #47	; 0x2f
   31958:	ldrb	r1, [r5, #48]	; 0x30
   3195c:	moveq	r0, r2
   31960:	tst	r1, #4
   31964:	mov	r1, #0
   31968:	str	r1, [sp, #40]	; 0x28
   3196c:	beq	31984 <__assert_fail@plt+0x1eed4>
   31970:	ldr	r1, [r5, #24]
   31974:	mov	r2, #47	; 0x2f
   31978:	strb	r2, [r1, r0]!
   3197c:	add	r1, r1, #1
   31980:	str	r1, [sp, #40]	; 0x28
   31984:	ldr	r6, [sl, #12]
   31988:	add	r1, r0, #1
   3198c:	str	r1, [fp, #-44]	; 0xffffffd4
   31990:	cmp	r6, #0
   31994:	beq	31cf4 <__assert_fail@plt+0x1f244>
   31998:	ldr	r0, [sl, #48]	; 0x30
   3199c:	str	ip, [sp]
   319a0:	mov	r4, #0
   319a4:	add	r0, r0, #1
   319a8:	str	r0, [sp, #24]
   319ac:	ldr	r0, [r5, #36]	; 0x24
   319b0:	sub	r0, r0, r1
   319b4:	str	r0, [fp, #-36]	; 0xffffffdc
   319b8:	bl	12804 <__errno_location@plt>
   319bc:	str	r0, [sp, #36]	; 0x24
   319c0:	mov	r0, #0
   319c4:	mov	r9, #0
   319c8:	mov	r7, #0
   319cc:	str	sl, [sp, #28]
   319d0:	str	r0, [sp, #44]	; 0x2c
   319d4:	mov	r0, #0
   319d8:	str	r0, [sp, #8]
   319dc:	mov	r0, #0
   319e0:	str	r0, [sp, #16]
   319e4:	ldr	r0, [sp, #36]	; 0x24
   319e8:	str	r4, [r0]
   319ec:	mov	r0, r6
   319f0:	bl	12978 <readdir64@plt>
   319f4:	cmp	r0, #0
   319f8:	beq	31d00 <__assert_fail@plt+0x1f250>
   319fc:	mov	r8, r0
   31a00:	ldrb	r0, [r5, #48]	; 0x30
   31a04:	tst	r0, #32
   31a08:	bne	31a38 <__assert_fail@plt+0x1ef88>
   31a0c:	ldrb	r0, [r8, #19]
   31a10:	cmp	r0, #46	; 0x2e
   31a14:	bne	31a38 <__assert_fail@plt+0x1ef88>
   31a18:	ldrb	r0, [r8, #20]
   31a1c:	cmp	r0, #0
   31a20:	beq	31cd0 <__assert_fail@plt+0x1f220>
   31a24:	cmp	r0, #46	; 0x2e
   31a28:	bne	31a38 <__assert_fail@plt+0x1ef88>
   31a2c:	ldrb	r0, [r8, #21]
   31a30:	cmp	r0, #0
   31a34:	beq	31cd0 <__assert_fail@plt+0x1f220>
   31a38:	add	r4, r8, #19
   31a3c:	mov	r0, r4
   31a40:	bl	127bc <strlen@plt>
   31a44:	mov	r5, r0
   31a48:	add	r0, r0, #176	; 0xb0
   31a4c:	bic	r0, r0, #7
   31a50:	bl	327ac <__assert_fail@plt+0x1fcfc>
   31a54:	mov	r6, r0
   31a58:	cmp	r0, #0
   31a5c:	beq	3205c <__assert_fail@plt+0x1f5ac>
   31a60:	add	sl, r6, #168	; 0xa8
   31a64:	mov	r1, r4
   31a68:	mov	r2, r5
   31a6c:	str	r7, [fp, #-40]	; 0xffffffd8
   31a70:	mov	r0, sl
   31a74:	bl	124e0 <memcpy@plt>
   31a78:	ldr	r2, [sp, #48]	; 0x30
   31a7c:	mov	r0, #0
   31a80:	mov	r1, #196608	; 0x30000
   31a84:	ldr	r3, [fp, #-44]	; 0xffffffd4
   31a88:	strb	r0, [sl, r5]
   31a8c:	str	r5, [r6, #52]	; 0x34
   31a90:	str	r2, [r6, #44]	; 0x2c
   31a94:	add	r7, r5, r3
   31a98:	ldr	r4, [r2, #24]
   31a9c:	str	r0, [r6, #12]
   31aa0:	str	r0, [r6, #16]
   31aa4:	str	r0, [r6, #20]
   31aa8:	str	r1, [r6, #58]	; 0x3a
   31aac:	str	r4, [r6, #28]
   31ab0:	str	r0, [r6, #32]
   31ab4:	ldr	r0, [fp, #-36]	; 0xffffffdc
   31ab8:	cmp	r5, r0
   31abc:	bcs	31ad0 <__assert_fail@plt+0x1f020>
   31ac0:	mov	r5, r2
   31ac4:	cmp	r7, r3
   31ac8:	bcs	31b40 <__assert_fail@plt+0x1f090>
   31acc:	b	31f4c <__assert_fail@plt+0x1f49c>
   31ad0:	ldr	r1, [r2, #36]	; 0x24
   31ad4:	movw	r0, #257	; 0x101
   31ad8:	mov	r5, r2
   31adc:	add	r0, r7, r0
   31ae0:	adds	r1, r0, r1
   31ae4:	bcs	32028 <__assert_fail@plt+0x1f578>
   31ae8:	mov	r0, r4
   31aec:	str	r1, [r5, #36]	; 0x24
   31af0:	bl	33500 <__assert_fail@plt+0x20a50>
   31af4:	cmp	r0, #0
   31af8:	beq	32048 <__assert_fail@plt+0x1f598>
   31afc:	cmp	r0, r4
   31b00:	str	r0, [r5, #24]
   31b04:	beq	31b2c <__assert_fail@plt+0x1f07c>
   31b08:	ldrb	r1, [r5, #48]	; 0x30
   31b0c:	ldr	r3, [fp, #-44]	; 0xffffffd4
   31b10:	tst	r1, #4
   31b14:	ldr	r1, [sp, #40]	; 0x28
   31b18:	addne	r1, r0, r3
   31b1c:	mov	r0, #1
   31b20:	str	r1, [sp, #40]	; 0x28
   31b24:	str	r0, [sp, #16]
   31b28:	b	31b30 <__assert_fail@plt+0x1f080>
   31b2c:	ldr	r3, [fp, #-44]	; 0xffffffd4
   31b30:	ldr	r0, [r5, #36]	; 0x24
   31b34:	sub	r0, r0, r3
   31b38:	cmp	r7, r3
   31b3c:	bcc	31f4c <__assert_fail@plt+0x1f49c>
   31b40:	str	r0, [fp, #-36]	; 0xffffffdc
   31b44:	ldr	r0, [sp, #24]
   31b48:	add	r4, r6, #112	; 0x70
   31b4c:	str	r0, [r6, #48]	; 0x30
   31b50:	ldr	r0, [r5]
   31b54:	str	r7, [r6, #40]	; 0x28
   31b58:	str	r0, [r6, #4]
   31b5c:	ldrd	r0, [r8]
   31b60:	strd	r0, [r4, #48]	; 0x30
   31b64:	ldrb	r0, [r5, #48]	; 0x30
   31b68:	tst	r0, #4
   31b6c:	bne	31b78 <__assert_fail@plt+0x1f0c8>
   31b70:	str	sl, [r6, #24]
   31b74:	b	31b94 <__assert_fail@plt+0x1f0e4>
   31b78:	ldr	r0, [r6, #28]
   31b7c:	ldr	r1, [r6, #52]	; 0x34
   31b80:	str	r0, [r6, #24]
   31b84:	ldr	r0, [sp, #40]	; 0x28
   31b88:	add	r2, r1, #1
   31b8c:	mov	r1, sl
   31b90:	bl	12474 <memmove@plt>
   31b94:	ldr	r0, [r5, #44]	; 0x2c
   31b98:	ldr	r7, [fp, #-40]	; 0xffffffd8
   31b9c:	ldr	r2, [r5, #48]	; 0x30
   31ba0:	ldr	sl, [sp, #28]
   31ba4:	cmp	r0, #0
   31ba8:	beq	31bcc <__assert_fail@plt+0x1f11c>
   31bac:	ands	r0, r2, #1024	; 0x400
   31bb0:	bne	31bcc <__assert_fail@plt+0x1f11c>
   31bb4:	mov	r0, r5
   31bb8:	mov	r1, r6
   31bbc:	mov	r2, #0
   31bc0:	bl	3073c <__assert_fail@plt+0x1dc8c>
   31bc4:	strh	r0, [r6, #56]	; 0x38
   31bc8:	b	31c40 <__assert_fail@plt+0x1f190>
   31bcc:	ldrb	r3, [r8, #18]
   31bd0:	mov	r0, #0
   31bd4:	tst	r2, #8
   31bd8:	mov	r1, #0
   31bdc:	beq	31c00 <__assert_fail@plt+0x1f150>
   31be0:	orr	r1, r3, #4
   31be4:	cmp	r1, #4
   31be8:	mov	r1, #0
   31bec:	beq	31c00 <__assert_fail@plt+0x1f150>
   31bf0:	eor	r1, r3, #10
   31bf4:	and	r2, r2, #16
   31bf8:	orrs	r1, r2, r1
   31bfc:	movwne	r1, #1
   31c00:	mov	r2, #11
   31c04:	strh	r2, [r6, #56]	; 0x38
   31c08:	sub	r2, r3, #1
   31c0c:	uxtb	r3, r2
   31c10:	cmp	r3, #11
   31c14:	bhi	31c28 <__assert_fail@plt+0x1f178>
   31c18:	sxtb	r0, r2
   31c1c:	movw	r2, #55060	; 0xd714
   31c20:	movt	r2, #4
   31c24:	ldr	r0, [r2, r0, lsl #2]
   31c28:	cmp	r1, #0
   31c2c:	str	r0, [r6, #80]	; 0x50
   31c30:	mov	r0, #2
   31c34:	mov	r1, #0
   31c38:	movwne	r0, #1
   31c3c:	strd	r0, [r4]
   31c40:	mov	r4, #0
   31c44:	cmp	r9, #0
   31c48:	str	r4, [r6, #8]
   31c4c:	beq	31c5c <__assert_fail@plt+0x1f1ac>
   31c50:	ldr	r0, [sp, #44]	; 0x2c
   31c54:	str	r6, [r0, #8]
   31c58:	b	31c60 <__assert_fail@plt+0x1f1b0>
   31c5c:	mov	r9, r6
   31c60:	movw	r0, #10000	; 0x2710
   31c64:	cmp	r7, r0
   31c68:	bne	31cbc <__assert_fail@plt+0x1f20c>
   31c6c:	ldr	r0, [sp, #20]
   31c70:	ldr	r0, [r0]
   31c74:	cmp	r0, #0
   31c78:	bne	31cbc <__assert_fail@plt+0x1f20c>
   31c7c:	ldr	r1, [fp, #-32]	; 0xffffffe0
   31c80:	mov	r0, sl
   31c84:	bl	324e8 <__assert_fail@plt+0x1fa38>
   31c88:	mov	r1, #0
   31c8c:	str	r1, [sp, #8]
   31c90:	movw	r1, #19778	; 0x4d42
   31c94:	movt	r1, #65363	; 0xff53
   31c98:	cmp	r0, r1
   31c9c:	movwne	r1, #26985	; 0x6969
   31ca0:	cmpne	r0, r1
   31ca4:	beq	31cbc <__assert_fail@plt+0x1f20c>
   31ca8:	movw	r1, #6548	; 0x1994
   31cac:	movt	r1, #258	; 0x102
   31cb0:	cmp	r0, r1
   31cb4:	movne	r0, #1
   31cb8:	strne	r0, [sp, #8]
   31cbc:	ldr	r0, [sp, #32]
   31cc0:	add	r7, r7, #1
   31cc4:	cmp	r0, r7
   31cc8:	bls	31cdc <__assert_fail@plt+0x1f22c>
   31ccc:	str	r6, [sp, #44]	; 0x2c
   31cd0:	ldr	r6, [sl, #12]
   31cd4:	cmp	r6, #0
   31cd8:	bne	319e4 <__assert_fail@plt+0x1ef34>
   31cdc:	ldr	r0, [sp, #16]
   31ce0:	ldr	ip, [sp]
   31ce4:	ldr	r4, [sp, #8]
   31ce8:	tst	r0, #1
   31cec:	bne	31d54 <__assert_fail@plt+0x1f2a4>
   31cf0:	b	31df4 <__assert_fail@plt+0x1f344>
   31cf4:	mov	r7, #0
   31cf8:	mov	r4, #0
   31cfc:	b	31df4 <__assert_fail@plt+0x1f344>
   31d00:	ldr	r0, [sp, #36]	; 0x24
   31d04:	ldr	r0, [r0]
   31d08:	cmp	r0, #0
   31d0c:	beq	31d28 <__assert_fail@plt+0x1f278>
   31d10:	str	r0, [sl, #32]
   31d14:	ldr	r0, [sp, #12]
   31d18:	orrs	r0, r0, r7
   31d1c:	mov	r0, #4
   31d20:	movwne	r0, #7
   31d24:	strh	r0, [sl, #56]	; 0x38
   31d28:	ldr	r0, [sl, #12]
   31d2c:	ldr	r4, [sp, #8]
   31d30:	cmp	r0, #0
   31d34:	beq	31d44 <__assert_fail@plt+0x1f294>
   31d38:	bl	12a80 <closedir@plt>
   31d3c:	mov	r0, #0
   31d40:	str	r0, [sl, #12]
   31d44:	ldr	r0, [sp, #16]
   31d48:	ldr	ip, [sp]
   31d4c:	tst	r0, #1
   31d50:	beq	31df4 <__assert_fail@plt+0x1f344>
   31d54:	ldr	r1, [r5, #4]
   31d58:	ldr	r0, [r5, #24]
   31d5c:	cmp	r1, #0
   31d60:	bne	31d78 <__assert_fail@plt+0x1f2c8>
   31d64:	b	31d9c <__assert_fail@plt+0x1f2ec>
   31d68:	str	r0, [r1, #28]
   31d6c:	ldr	r1, [r1, #8]
   31d70:	cmp	r1, #0
   31d74:	beq	31d9c <__assert_fail@plt+0x1f2ec>
   31d78:	ldr	r2, [r1, #24]
   31d7c:	add	r3, r1, #168	; 0xa8
   31d80:	cmp	r2, r3
   31d84:	beq	31d68 <__assert_fail@plt+0x1f2b8>
   31d88:	ldr	r3, [r1, #28]
   31d8c:	sub	r2, r2, r3
   31d90:	add	r2, r0, r2
   31d94:	str	r2, [r1, #24]
   31d98:	b	31d68 <__assert_fail@plt+0x1f2b8>
   31d9c:	ldr	r1, [r9, #48]	; 0x30
   31da0:	cmp	r1, #0
   31da4:	bmi	31df4 <__assert_fail@plt+0x1f344>
   31da8:	mov	r1, r9
   31dac:	b	31dd0 <__assert_fail@plt+0x1f320>
   31db0:	str	r0, [r1, #28]
   31db4:	ldr	r2, [r1, #8]
   31db8:	cmp	r2, #0
   31dbc:	ldreq	r2, [r1, #4]
   31dc0:	ldr	r1, [r2, #48]	; 0x30
   31dc4:	cmn	r1, #1
   31dc8:	mov	r1, r2
   31dcc:	ble	31df4 <__assert_fail@plt+0x1f344>
   31dd0:	ldr	r2, [r1, #24]
   31dd4:	add	r3, r1, #168	; 0xa8
   31dd8:	cmp	r2, r3
   31ddc:	beq	31db0 <__assert_fail@plt+0x1f300>
   31de0:	ldr	r3, [r1, #28]
   31de4:	sub	r2, r2, r3
   31de8:	add	r2, r0, r2
   31dec:	str	r2, [r1, #24]
   31df0:	b	31db0 <__assert_fail@plt+0x1f300>
   31df4:	ldrb	r0, [r5, #48]	; 0x30
   31df8:	tst	r0, #4
   31dfc:	beq	31e28 <__assert_fail@plt+0x1f378>
   31e00:	ldr	r2, [sp, #40]	; 0x28
   31e04:	ldr	r0, [r5, #36]	; 0x24
   31e08:	ldr	r3, [fp, #-44]	; 0xffffffd4
   31e0c:	cmp	r3, r0
   31e10:	sub	r1, r2, #1
   31e14:	mov	r0, #0
   31e18:	moveq	r2, r1
   31e1c:	cmp	r7, #0
   31e20:	moveq	r2, r1
   31e24:	strb	r0, [r2]
   31e28:	ldr	r0, [sp, #12]
   31e2c:	cmp	r0, #0
   31e30:	movwne	r0, #1
   31e34:	orrs	r0, r0, ip
   31e38:	beq	31ea0 <__assert_fail@plt+0x1f3f0>
   31e3c:	cmp	r7, #0
   31e40:	bne	31ee0 <__assert_fail@plt+0x1f430>
   31e44:	ldr	r0, [sp, #4]
   31e48:	cmp	r0, #3
   31e4c:	bne	31e64 <__assert_fail@plt+0x1f3b4>
   31e50:	ldrh	r0, [sl, #56]	; 0x38
   31e54:	cmp	r0, #4
   31e58:	cmpne	r0, #7
   31e5c:	movne	r0, #6
   31e60:	strhne	r0, [sl, #56]	; 0x38
   31e64:	mov	r6, #0
   31e68:	cmp	r9, #0
   31e6c:	bne	31e88 <__assert_fail@plt+0x1f3d8>
   31e70:	b	320d4 <__assert_fail@plt+0x1f624>
   31e74:	mov	r0, r9
   31e78:	bl	30174 <__assert_fail@plt+0x1d6c4>
   31e7c:	cmp	r4, #0
   31e80:	mov	r9, r4
   31e84:	beq	320d4 <__assert_fail@plt+0x1f624>
   31e88:	ldrd	r4, [r9, #8]
   31e8c:	cmp	r5, #0
   31e90:	beq	31e74 <__assert_fail@plt+0x1f3c4>
   31e94:	mov	r0, r5
   31e98:	bl	12a80 <closedir@plt>
   31e9c:	b	31e74 <__assert_fail@plt+0x1f3c4>
   31ea0:	ldr	r0, [sp, #4]
   31ea4:	cmp	r0, #1
   31ea8:	cmpne	r7, #0
   31eac:	bne	31ee0 <__assert_fail@plt+0x1f430>
   31eb0:	ldr	r0, [sl, #48]	; 0x30
   31eb4:	cmp	r0, #0
   31eb8:	beq	31fc8 <__assert_fail@plt+0x1f518>
   31ebc:	ldr	r1, [sl, #4]
   31ec0:	movw	r3, #55057	; 0xd711
   31ec4:	mov	r0, r5
   31ec8:	mvn	r2, #0
   31ecc:	movt	r3, #4
   31ed0:	bl	313f0 <__assert_fail@plt+0x1e940>
   31ed4:	cmp	r0, #0
   31ed8:	bne	31fd8 <__assert_fail@plt+0x1f528>
   31edc:	b	31e3c <__assert_fail@plt+0x1f38c>
   31ee0:	tst	r4, #1
   31ee4:	beq	31f14 <__assert_fail@plt+0x1f464>
   31ee8:	movw	r0, #9392	; 0x24b0
   31eec:	mov	r1, r9
   31ef0:	mov	r2, r7
   31ef4:	movt	r0, #3
   31ef8:	str	r0, [r5, #44]	; 0x2c
   31efc:	mov	r0, r5
   31f00:	bl	308d4 <__assert_fail@plt+0x1de24>
   31f04:	mov	r6, r0
   31f08:	mov	r0, #0
   31f0c:	str	r0, [r5, #44]	; 0x2c
   31f10:	b	320d4 <__assert_fail@plt+0x1f624>
   31f14:	cmp	r7, #2
   31f18:	bcc	31f44 <__assert_fail@plt+0x1f494>
   31f1c:	ldr	r0, [sp, #20]
   31f20:	ldr	r0, [r0]
   31f24:	cmp	r0, #0
   31f28:	beq	31f44 <__assert_fail@plt+0x1f494>
   31f2c:	mov	r0, r5
   31f30:	mov	r1, r9
   31f34:	mov	r2, r7
   31f38:	bl	308d4 <__assert_fail@plt+0x1de24>
   31f3c:	mov	r6, r0
   31f40:	b	320d4 <__assert_fail@plt+0x1f624>
   31f44:	mov	r6, r9
   31f48:	b	320d4 <__assert_fail@plt+0x1f624>
   31f4c:	mov	r0, r6
   31f50:	bl	30174 <__assert_fail@plt+0x1d6c4>
   31f54:	ldr	r7, [sp, #28]
   31f58:	cmp	r9, #0
   31f5c:	bne	31f78 <__assert_fail@plt+0x1f4c8>
   31f60:	b	31f90 <__assert_fail@plt+0x1f4e0>
   31f64:	mov	r0, r9
   31f68:	bl	30174 <__assert_fail@plt+0x1d6c4>
   31f6c:	cmp	r4, #0
   31f70:	mov	r9, r4
   31f74:	beq	31f90 <__assert_fail@plt+0x1f4e0>
   31f78:	ldrd	r4, [r9, #8]
   31f7c:	cmp	r5, #0
   31f80:	beq	31f64 <__assert_fail@plt+0x1f4b4>
   31f84:	mov	r0, r5
   31f88:	bl	12a80 <closedir@plt>
   31f8c:	b	31f64 <__assert_fail@plt+0x1f4b4>
   31f90:	ldr	r0, [r7, #12]
   31f94:	bl	12a80 <closedir@plt>
   31f98:	ldr	r1, [sp, #48]	; 0x30
   31f9c:	mov	r0, #7
   31fa0:	mov	r6, #0
   31fa4:	strh	r0, [r7, #56]	; 0x38
   31fa8:	str	r6, [r7, #12]
   31fac:	ldr	r0, [r1, #48]	; 0x30
   31fb0:	orr	r0, r0, #8192	; 0x2000
   31fb4:	str	r0, [r1, #48]	; 0x30
   31fb8:	ldr	r1, [sp, #36]	; 0x24
   31fbc:	mov	r0, #36	; 0x24
   31fc0:	str	r0, [r1]
   31fc4:	b	320d4 <__assert_fail@plt+0x1f624>
   31fc8:	mov	r0, r5
   31fcc:	bl	320e0 <__assert_fail@plt+0x1f630>
   31fd0:	cmp	r0, #0
   31fd4:	beq	31e3c <__assert_fail@plt+0x1f38c>
   31fd8:	mov	r0, #7
   31fdc:	mov	r6, #0
   31fe0:	cmp	r9, #0
   31fe4:	strh	r0, [sl, #56]	; 0x38
   31fe8:	ldr	r0, [r5, #48]	; 0x30
   31fec:	orr	r0, r0, #8192	; 0x2000
   31ff0:	str	r0, [r5, #48]	; 0x30
   31ff4:	bne	32010 <__assert_fail@plt+0x1f560>
   31ff8:	b	320d4 <__assert_fail@plt+0x1f624>
   31ffc:	mov	r0, r9
   32000:	bl	30174 <__assert_fail@plt+0x1d6c4>
   32004:	cmp	r4, #0
   32008:	mov	r9, r4
   3200c:	beq	320d4 <__assert_fail@plt+0x1f624>
   32010:	ldrd	r4, [r9, #8]
   32014:	cmp	r5, #0
   32018:	beq	31ffc <__assert_fail@plt+0x1f54c>
   3201c:	mov	r0, r5
   32020:	bl	12a80 <closedir@plt>
   32024:	b	31ffc <__assert_fail@plt+0x1f54c>
   32028:	mov	r0, r4
   3202c:	bl	30174 <__assert_fail@plt+0x1d6c4>
   32030:	ldr	r1, [sp, #36]	; 0x24
   32034:	mov	r0, #0
   32038:	str	r0, [r5, #24]
   3203c:	mov	r0, #36	; 0x24
   32040:	str	r0, [r1]
   32044:	b	32058 <__assert_fail@plt+0x1f5a8>
   32048:	ldr	r0, [r5, #24]
   3204c:	bl	30174 <__assert_fail@plt+0x1d6c4>
   32050:	mov	r0, #0
   32054:	str	r0, [r5, #24]
   32058:	ldr	sl, [sp, #28]
   3205c:	ldr	r0, [sp, #36]	; 0x24
   32060:	ldr	r4, [r0]
   32064:	mov	r0, r6
   32068:	bl	30174 <__assert_fail@plt+0x1d6c4>
   3206c:	ldr	r5, [sp, #48]	; 0x30
   32070:	cmp	r9, #0
   32074:	bne	32090 <__assert_fail@plt+0x1f5e0>
   32078:	b	320a8 <__assert_fail@plt+0x1f5f8>
   3207c:	mov	r0, r9
   32080:	bl	30174 <__assert_fail@plt+0x1d6c4>
   32084:	cmp	r6, #0
   32088:	mov	r9, r6
   3208c:	beq	320a8 <__assert_fail@plt+0x1f5f8>
   32090:	ldrd	r6, [r9, #8]
   32094:	cmp	r7, #0
   32098:	beq	3207c <__assert_fail@plt+0x1f5cc>
   3209c:	mov	r0, r7
   320a0:	bl	12a80 <closedir@plt>
   320a4:	b	3207c <__assert_fail@plt+0x1f5cc>
   320a8:	ldr	r0, [sl, #12]
   320ac:	bl	12a80 <closedir@plt>
   320b0:	mov	r0, #7
   320b4:	mov	r6, #0
   320b8:	strh	r0, [sl, #56]	; 0x38
   320bc:	str	r6, [sl, #12]
   320c0:	ldr	r0, [r5, #48]	; 0x30
   320c4:	orr	r0, r0, #8192	; 0x2000
   320c8:	str	r0, [r5, #48]	; 0x30
   320cc:	ldr	r0, [sp, #36]	; 0x24
   320d0:	str	r4, [r0]
   320d4:	mov	r0, r6
   320d8:	sub	sp, fp, #28
   320dc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   320e0:	push	{r4, r5, fp, lr}
   320e4:	add	fp, sp, #8
   320e8:	mov	r5, r0
   320ec:	ldr	r0, [r0, #48]	; 0x30
   320f0:	mov	r4, #0
   320f4:	tst	r0, #4
   320f8:	bne	3213c <__assert_fail@plt+0x1f68c>
   320fc:	tst	r0, #512	; 0x200
   32100:	bne	3211c <__assert_fail@plt+0x1f66c>
   32104:	ldr	r0, [r5, #28]
   32108:	bl	129b4 <fchdir@plt>
   3210c:	cmp	r0, #0
   32110:	mov	r4, r0
   32114:	movwne	r4, #1
   32118:	b	3213c <__assert_fail@plt+0x1f68c>
   3211c:	ldr	r1, [r5, #32]
   32120:	add	r0, r5, #60	; 0x3c
   32124:	bl	46db0 <__assert_fail@plt+0x34300>
   32128:	cmp	r0, #0
   3212c:	bmi	32134 <__assert_fail@plt+0x1f684>
   32130:	bl	12a68 <close@plt>
   32134:	mvn	r0, #99	; 0x63
   32138:	str	r0, [r5, #32]
   3213c:	add	r5, r5, #60	; 0x3c
   32140:	mov	r0, r5
   32144:	bl	46da8 <__assert_fail@plt+0x342f8>
   32148:	cmp	r0, #0
   3214c:	bne	32168 <__assert_fail@plt+0x1f6b8>
   32150:	mov	r0, r5
   32154:	bl	46dfc <__assert_fail@plt+0x3434c>
   32158:	cmp	r0, #0
   3215c:	bmi	32140 <__assert_fail@plt+0x1f690>
   32160:	bl	12a68 <close@plt>
   32164:	b	32140 <__assert_fail@plt+0x1f690>
   32168:	mov	r0, r4
   3216c:	pop	{r4, r5, fp, pc}
   32170:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   32174:	add	fp, sp, #24
   32178:	mov	r6, r0
   3217c:	ldrh	r0, [r0, #48]	; 0x30
   32180:	mov	r4, r1
   32184:	add	r5, r1, #64	; 0x40
   32188:	movw	r1, #258	; 0x102
   3218c:	tst	r0, r1
   32190:	beq	32208 <__assert_fail@plt+0x1f758>
   32194:	mov	r0, #24
   32198:	bl	327ac <__assert_fail@plt+0x1fcfc>
   3219c:	mov	r8, #0
   321a0:	cmp	r0, #0
   321a4:	beq	32228 <__assert_fail@plt+0x1f778>
   321a8:	ldrd	r2, [r5]
   321ac:	mov	r7, r0
   321b0:	add	r0, r4, #160	; 0xa0
   321b4:	stm	r7, {r2, r3}
   321b8:	add	r2, r7, #8
   321bc:	ldrd	r0, [r0]
   321c0:	stm	r2, {r0, r1, r4}
   321c4:	mov	r1, r7
   321c8:	ldr	r0, [r6, #56]	; 0x38
   321cc:	bl	23d28 <__assert_fail@plt+0x11278>
   321d0:	cmp	r0, r7
   321d4:	beq	321fc <__assert_fail@plt+0x1f74c>
   321d8:	mov	r5, r0
   321dc:	mov	r0, r7
   321e0:	bl	30174 <__assert_fail@plt+0x1d6c4>
   321e4:	cmp	r5, #0
   321e8:	beq	32228 <__assert_fail@plt+0x1f778>
   321ec:	ldr	r0, [r5, #16]
   321f0:	mov	r1, #2
   321f4:	strh	r1, [r4, #56]	; 0x38
   321f8:	str	r0, [r4]
   321fc:	mov	r8, #1
   32200:	mov	r0, r8
   32204:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   32208:	ldr	r0, [r6, #56]	; 0x38
   3220c:	mov	r1, r5
   32210:	bl	46b5c <__assert_fail@plt+0x340ac>
   32214:	cmp	r0, #0
   32218:	mov	r8, #1
   3221c:	movne	r0, #2
   32220:	strhne	r0, [r4, #56]	; 0x38
   32224:	strne	r4, [r4]
   32228:	mov	r0, r8
   3222c:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   32230:	push	{fp, lr}
   32234:	mov	fp, sp
   32238:	cmp	r2, #5
   3223c:	bcc	32254 <__assert_fail@plt+0x1f7a4>
   32240:	bl	12804 <__errno_location@plt>
   32244:	mov	r1, #22
   32248:	str	r1, [r0]
   3224c:	mov	r0, #1
   32250:	pop	{fp, pc}
   32254:	mov	r0, #0
   32258:	strh	r2, [r1, #60]	; 0x3c
   3225c:	pop	{fp, pc}
   32260:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   32264:	add	fp, sp, #28
   32268:	sub	sp, sp, #4
   3226c:	mov	r9, r0
   32270:	mvn	r0, #4096	; 0x1000
   32274:	tst	r1, r0
   32278:	beq	32290 <__assert_fail@plt+0x1f7e0>
   3227c:	bl	12804 <__errno_location@plt>
   32280:	mov	r1, #22
   32284:	mov	r5, #0
   32288:	str	r1, [r0]
   3228c:	b	32390 <__assert_fail@plt+0x1f8e0>
   32290:	ldr	r8, [r9]
   32294:	mov	r7, r1
   32298:	bl	12804 <__errno_location@plt>
   3229c:	mov	r5, #0
   322a0:	mov	sl, r0
   322a4:	str	r5, [r0]
   322a8:	ldrb	r0, [r9, #49]	; 0x31
   322ac:	tst	r0, #32
   322b0:	bne	32390 <__assert_fail@plt+0x1f8e0>
   322b4:	ldrh	r0, [r8, #56]	; 0x38
   322b8:	cmp	r0, #1
   322bc:	beq	322cc <__assert_fail@plt+0x1f81c>
   322c0:	cmp	r0, #9
   322c4:	ldreq	r5, [r8, #8]
   322c8:	b	32390 <__assert_fail@plt+0x1f8e0>
   322cc:	ldr	r6, [r9, #4]
   322d0:	cmp	r6, #0
   322d4:	bne	322f0 <__assert_fail@plt+0x1f840>
   322d8:	b	3230c <__assert_fail@plt+0x1f85c>
   322dc:	mov	r0, r6
   322e0:	bl	30174 <__assert_fail@plt+0x1d6c4>
   322e4:	cmp	r4, #0
   322e8:	mov	r6, r4
   322ec:	beq	3230c <__assert_fail@plt+0x1f85c>
   322f0:	ldr	r1, [r6, #12]
   322f4:	ldr	r4, [r6, #8]
   322f8:	cmp	r1, #0
   322fc:	beq	322dc <__assert_fail@plt+0x1f82c>
   32300:	mov	r0, r1
   32304:	bl	12a80 <closedir@plt>
   32308:	b	322dc <__assert_fail@plt+0x1f82c>
   3230c:	mov	r4, #1
   32310:	cmp	r7, #4096	; 0x1000
   32314:	bne	32328 <__assert_fail@plt+0x1f878>
   32318:	ldr	r0, [r9, #48]	; 0x30
   3231c:	mov	r4, #2
   32320:	orr	r0, r0, #4096	; 0x1000
   32324:	str	r0, [r9, #48]	; 0x30
   32328:	ldr	r0, [r8, #48]	; 0x30
   3232c:	cmp	r0, #0
   32330:	bne	3237c <__assert_fail@plt+0x1f8cc>
   32334:	ldr	r0, [r8, #24]
   32338:	ldrb	r0, [r0]
   3233c:	cmp	r0, #47	; 0x2f
   32340:	beq	3237c <__assert_fail@plt+0x1f8cc>
   32344:	ldr	r0, [r9, #48]	; 0x30
   32348:	tst	r0, #4
   3234c:	bne	3237c <__assert_fail@plt+0x1f8cc>
   32350:	mov	r1, #32768	; 0x8000
   32354:	tst	r0, #512	; 0x200
   32358:	and	r1, r1, r0, lsl #11
   3235c:	orr	r1, r1, #18688	; 0x4900
   32360:	orr	r2, r1, #524288	; 0x80000
   32364:	bne	3239c <__assert_fail@plt+0x1f8ec>
   32368:	movw	r0, #35340	; 0x8a0c
   3236c:	mov	r1, r2
   32370:	movt	r0, #4
   32374:	bl	22aec <__assert_fail@plt+0x1003c>
   32378:	b	323ac <__assert_fail@plt+0x1f8fc>
   3237c:	mov	r0, r9
   32380:	mov	r1, r4
   32384:	bl	31650 <__assert_fail@plt+0x1eba0>
   32388:	mov	r5, r0
   3238c:	str	r0, [r9, #4]
   32390:	mov	r0, r5
   32394:	sub	sp, fp, #28
   32398:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   3239c:	ldr	r0, [r9, #32]
   323a0:	movw	r1, #35340	; 0x8a0c
   323a4:	movt	r1, #4
   323a8:	bl	26670 <__assert_fail@plt+0x13bc0>
   323ac:	mov	r8, r0
   323b0:	cmn	r0, #1
   323b4:	ble	323f8 <__assert_fail@plt+0x1f948>
   323b8:	mov	r0, r9
   323bc:	mov	r1, r4
   323c0:	bl	31650 <__assert_fail@plt+0x1eba0>
   323c4:	str	r0, [r9, #4]
   323c8:	ldrb	r0, [r9, #49]	; 0x31
   323cc:	tst	r0, #2
   323d0:	bne	32404 <__assert_fail@plt+0x1f954>
   323d4:	mov	r0, r8
   323d8:	bl	129b4 <fchdir@plt>
   323dc:	cmp	r0, #0
   323e0:	beq	32434 <__assert_fail@plt+0x1f984>
   323e4:	ldr	r4, [sl]
   323e8:	mov	r0, r8
   323ec:	bl	12a68 <close@plt>
   323f0:	str	r4, [sl]
   323f4:	b	32390 <__assert_fail@plt+0x1f8e0>
   323f8:	mov	r5, #0
   323fc:	str	r5, [r9, #4]
   32400:	b	32390 <__assert_fail@plt+0x1f8e0>
   32404:	ldr	r1, [r9, #32]
   32408:	cmp	r1, r8
   3240c:	bne	32418 <__assert_fail@plt+0x1f968>
   32410:	cmn	r1, #100	; 0x64
   32414:	bne	32444 <__assert_fail@plt+0x1f994>
   32418:	add	r0, r9, #60	; 0x3c
   3241c:	bl	46db0 <__assert_fail@plt+0x34300>
   32420:	cmp	r0, #0
   32424:	bmi	3242c <__assert_fail@plt+0x1f97c>
   32428:	bl	12a68 <close@plt>
   3242c:	str	r8, [r9, #32]
   32430:	b	3243c <__assert_fail@plt+0x1f98c>
   32434:	mov	r0, r8
   32438:	bl	12a68 <close@plt>
   3243c:	ldr	r5, [r9, #4]
   32440:	b	32390 <__assert_fail@plt+0x1f8e0>
   32444:	bl	12a5c <abort@plt>
   32448:	push	{fp, lr}
   3244c:	mov	fp, sp
   32450:	mov	r2, r1
   32454:	ldrd	r0, [r0, #8]
   32458:	mov	r3, #0
   3245c:	bl	47618 <__assert_fail@plt+0x34b68>
   32460:	mov	r0, r2
   32464:	pop	{fp, pc}
   32468:	push	{r4, r5, fp, lr}
   3246c:	add	fp, sp, #8
   32470:	ldrd	r2, [r1, #8]
   32474:	ldrd	r4, [r0, #8]
   32478:	eor	r3, r5, r3
   3247c:	eor	r2, r4, r2
   32480:	orrs	r2, r2, r3
   32484:	mov	r2, #0
   32488:	bne	324a8 <__assert_fail@plt+0x1f9f8>
   3248c:	ldrd	r2, [r1]
   32490:	ldrd	r0, [r0]
   32494:	eor	r1, r1, r3
   32498:	eor	r0, r0, r2
   3249c:	orr	r0, r0, r1
   324a0:	clz	r0, r0
   324a4:	lsr	r2, r0, #5
   324a8:	mov	r0, r2
   324ac:	pop	{r4, r5, fp, pc}
   324b0:	push	{r4, r5, fp, lr}
   324b4:	add	fp, sp, #8
   324b8:	ldr	r0, [r0]
   324bc:	ldrd	r2, [r0, #160]	; 0xa0
   324c0:	ldr	r0, [r1]
   324c4:	ldrd	r4, [r0, #160]	; 0xa0
   324c8:	mov	r0, #0
   324cc:	subs	r1, r4, r2
   324d0:	sbcs	r1, r5, r3
   324d4:	movwcc	r0, #1
   324d8:	subs	r1, r2, r4
   324dc:	sbcs	r1, r3, r5
   324e0:	subcc	r0, r0, #1
   324e4:	pop	{r4, r5, fp, pc}
   324e8:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   324ec:	add	fp, sp, #24
   324f0:	sub	sp, sp, #96	; 0x60
   324f4:	ldr	r7, [r0, #44]	; 0x2c
   324f8:	mov	r4, r0
   324fc:	mov	r5, #0
   32500:	ldrb	r0, [r7, #49]	; 0x31
   32504:	tst	r0, #2
   32508:	beq	32604 <__assert_fail@plt+0x1fb54>
   3250c:	ldr	r6, [r7, #52]	; 0x34
   32510:	mov	r9, r1
   32514:	cmp	r6, #0
   32518:	bne	32558 <__assert_fail@plt+0x1faa8>
   3251c:	movw	r0, #372	; 0x174
   32520:	movw	r2, #9744	; 0x2610
   32524:	movw	r3, #9776	; 0x2630
   32528:	mov	r1, #0
   3252c:	mov	r8, #0
   32530:	movt	r0, #3
   32534:	movt	r2, #3
   32538:	movt	r3, #3
   3253c:	str	r0, [sp]
   32540:	mov	r0, #13
   32544:	bl	231d4 <__assert_fail@plt+0x10724>
   32548:	mov	r6, r0
   3254c:	cmp	r0, #0
   32550:	str	r0, [r7, #52]	; 0x34
   32554:	beq	32590 <__assert_fail@plt+0x1fae0>
   32558:	ldrd	r0, [r4, #64]	; 0x40
   3255c:	str	r1, [sp, #12]
   32560:	str	r0, [sp, #8]
   32564:	add	r1, sp, #8
   32568:	mov	r0, r6
   3256c:	bl	22f20 <__assert_fail@plt+0x10470>
   32570:	cmp	r0, #0
   32574:	beq	32580 <__assert_fail@plt+0x1fad0>
   32578:	ldr	r5, [r0, #8]
   3257c:	b	32604 <__assert_fail@plt+0x1fb54>
   32580:	mov	r8, #1
   32584:	cmp	r9, #0
   32588:	bpl	3259c <__assert_fail@plt+0x1faec>
   3258c:	b	32604 <__assert_fail@plt+0x1fb54>
   32590:	mov	r6, #0
   32594:	cmp	r9, #0
   32598:	bmi	32604 <__assert_fail@plt+0x1fb54>
   3259c:	add	r1, sp, #8
   325a0:	mov	r0, r9
   325a4:	bl	12378 <fstatfs64@plt>
   325a8:	cmp	r0, #0
   325ac:	bne	32604 <__assert_fail@plt+0x1fb54>
   325b0:	cmp	r8, #0
   325b4:	beq	32600 <__assert_fail@plt+0x1fb50>
   325b8:	mov	r0, #16
   325bc:	bl	327ac <__assert_fail@plt+0x1fcfc>
   325c0:	cmp	r0, #0
   325c4:	beq	32600 <__assert_fail@plt+0x1fb50>
   325c8:	mov	r5, r0
   325cc:	ldrd	r0, [r4, #64]	; 0x40
   325d0:	ldr	r2, [sp, #8]
   325d4:	stm	r5, {r0, r1, r2}
   325d8:	mov	r0, r6
   325dc:	mov	r1, r5
   325e0:	bl	23d28 <__assert_fail@plt+0x11278>
   325e4:	cmp	r0, #0
   325e8:	beq	325f8 <__assert_fail@plt+0x1fb48>
   325ec:	cmp	r0, r5
   325f0:	beq	32600 <__assert_fail@plt+0x1fb50>
   325f4:	bl	12a5c <abort@plt>
   325f8:	mov	r0, r5
   325fc:	bl	30174 <__assert_fail@plt+0x1d6c4>
   32600:	ldr	r5, [sp, #8]
   32604:	mov	r0, r5
   32608:	sub	sp, fp, #24
   3260c:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   32610:	push	{fp, lr}
   32614:	mov	fp, sp
   32618:	mov	r2, r1
   3261c:	ldrd	r0, [r0]
   32620:	mov	r3, #0
   32624:	bl	47618 <__assert_fail@plt+0x34b68>
   32628:	mov	r0, r2
   3262c:	pop	{fp, pc}
   32630:	ldrd	r2, [r1]
   32634:	ldrd	r0, [r0]
   32638:	eor	r1, r1, r3
   3263c:	eor	r0, r0, r2
   32640:	orr	r0, r0, r1
   32644:	clz	r0, r0
   32648:	lsr	r0, r0, #5
   3264c:	bx	lr
   32650:	push	{r4, r5, fp, lr}
   32654:	add	fp, sp, #8
   32658:	mov	r4, r1
   3265c:	bl	12798 <getfilecon@plt>
   32660:	cmp	r0, #10
   32664:	beq	3267c <__assert_fail@plt+0x1fbcc>
   32668:	cmp	r0, #0
   3266c:	bne	326c0 <__assert_fail@plt+0x1fc10>
   32670:	bl	12804 <__errno_location@plt>
   32674:	mov	r1, #95	; 0x5f
   32678:	b	326b8 <__assert_fail@plt+0x1fc08>
   3267c:	ldr	r5, [r4]
   32680:	movw	r1, #55108	; 0xd744
   32684:	movt	r1, #4
   32688:	mov	r0, r5
   3268c:	bl	123fc <strcmp@plt>
   32690:	mov	r1, r0
   32694:	mov	r0, #10
   32698:	cmp	r1, #0
   3269c:	popne	{r4, r5, fp, pc}
   326a0:	mov	r0, r5
   326a4:	bl	129d8 <freecon@plt>
   326a8:	mov	r0, #0
   326ac:	str	r0, [r4]
   326b0:	bl	12804 <__errno_location@plt>
   326b4:	mov	r1, #61	; 0x3d
   326b8:	str	r1, [r0]
   326bc:	mvn	r0, #0
   326c0:	pop	{r4, r5, fp, pc}
   326c4:	push	{r4, r5, fp, lr}
   326c8:	add	fp, sp, #8
   326cc:	mov	r4, r1
   326d0:	bl	126e4 <lgetfilecon@plt>
   326d4:	cmp	r0, #10
   326d8:	beq	326f0 <__assert_fail@plt+0x1fc40>
   326dc:	cmp	r0, #0
   326e0:	bne	32734 <__assert_fail@plt+0x1fc84>
   326e4:	bl	12804 <__errno_location@plt>
   326e8:	mov	r1, #95	; 0x5f
   326ec:	b	3272c <__assert_fail@plt+0x1fc7c>
   326f0:	ldr	r5, [r4]
   326f4:	movw	r1, #55108	; 0xd744
   326f8:	movt	r1, #4
   326fc:	mov	r0, r5
   32700:	bl	123fc <strcmp@plt>
   32704:	mov	r1, r0
   32708:	mov	r0, #10
   3270c:	cmp	r1, #0
   32710:	popne	{r4, r5, fp, pc}
   32714:	mov	r0, r5
   32718:	bl	129d8 <freecon@plt>
   3271c:	mov	r0, #0
   32720:	str	r0, [r4]
   32724:	bl	12804 <__errno_location@plt>
   32728:	mov	r1, #61	; 0x3d
   3272c:	str	r1, [r0]
   32730:	mvn	r0, #0
   32734:	pop	{r4, r5, fp, pc}
   32738:	push	{r4, r5, fp, lr}
   3273c:	add	fp, sp, #8
   32740:	mov	r4, r1
   32744:	bl	125a0 <fgetfilecon@plt>
   32748:	cmp	r0, #10
   3274c:	beq	32764 <__assert_fail@plt+0x1fcb4>
   32750:	cmp	r0, #0
   32754:	bne	327a8 <__assert_fail@plt+0x1fcf8>
   32758:	bl	12804 <__errno_location@plt>
   3275c:	mov	r1, #95	; 0x5f
   32760:	b	327a0 <__assert_fail@plt+0x1fcf0>
   32764:	ldr	r5, [r4]
   32768:	movw	r1, #55108	; 0xd744
   3276c:	movt	r1, #4
   32770:	mov	r0, r5
   32774:	bl	123fc <strcmp@plt>
   32778:	mov	r1, r0
   3277c:	mov	r0, #10
   32780:	cmp	r1, #0
   32784:	popne	{r4, r5, fp, pc}
   32788:	mov	r0, r5
   3278c:	bl	129d8 <freecon@plt>
   32790:	mov	r0, #0
   32794:	str	r0, [r4]
   32798:	bl	12804 <__errno_location@plt>
   3279c:	mov	r1, #61	; 0x3d
   327a0:	str	r1, [r0]
   327a4:	mvn	r0, #0
   327a8:	pop	{r4, r5, fp, pc}
   327ac:	cmp	r0, #0
   327b0:	movweq	r0, #1
   327b4:	cmn	r0, #1
   327b8:	ble	327c0 <__assert_fail@plt+0x1fd10>
   327bc:	b	126f0 <malloc@plt>
   327c0:	push	{fp, lr}
   327c4:	mov	fp, sp
   327c8:	bl	12804 <__errno_location@plt>
   327cc:	mov	r1, #12
   327d0:	str	r1, [r0]
   327d4:	mov	r0, #0
   327d8:	pop	{fp, pc}
   327dc:	push	{r4, r5, r6, r7, fp, lr}
   327e0:	add	fp, sp, #16
   327e4:	sub	sp, sp, #8
   327e8:	cmp	r0, #0
   327ec:	add	r5, sp, #4
   327f0:	mov	r7, r2
   327f4:	mov	r4, r1
   327f8:	movne	r5, r0
   327fc:	mov	r0, r5
   32800:	bl	12684 <mbrtowc@plt>
   32804:	mov	r6, r0
   32808:	cmp	r7, #0
   3280c:	beq	32834 <__assert_fail@plt+0x1fd84>
   32810:	cmn	r6, #2
   32814:	bcc	32834 <__assert_fail@plt+0x1fd84>
   32818:	mov	r0, #0
   3281c:	bl	46d18 <__assert_fail@plt+0x34268>
   32820:	cmp	r0, #0
   32824:	bne	32834 <__assert_fail@plt+0x1fd84>
   32828:	ldrb	r0, [r4]
   3282c:	mov	r6, #1
   32830:	str	r0, [r5]
   32834:	mov	r0, r6
   32838:	sub	sp, fp, #16
   3283c:	pop	{r4, r5, r6, r7, fp, pc}
   32840:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   32844:	add	fp, sp, #28
   32848:	sub	sp, sp, #36	; 0x24
   3284c:	movw	r0, #55118	; 0xd74e
   32850:	movw	r1, #48580	; 0xbdc4
   32854:	movt	r0, #4
   32858:	movt	r1, #4
   3285c:	bl	129c0 <fopen64@plt>
   32860:	cmp	r0, #0
   32864:	beq	32fe8 <__assert_fail@plt+0x20538>
   32868:	mov	r3, r0
   3286c:	mov	r0, #0
   32870:	add	r1, sp, #24
   32874:	mov	r2, #10
   32878:	str	r0, [sp, #28]
   3287c:	str	r0, [sp, #24]
   32880:	add	r0, sp, #28
   32884:	mov	r9, r3
   32888:	bl	123cc <__getdelim@plt>
   3288c:	cmn	r0, #1
   32890:	beq	333bc <__assert_fail@plt+0x2090c>
   32894:	movw	r8, #55139	; 0xd763
   32898:	add	r0, sp, #32
   3289c:	add	sl, sp, #12
   328a0:	add	r6, sp, #20
   328a4:	add	r7, sp, #16
   328a8:	add	r5, sp, #28
   328ac:	add	r4, sp, #24
   328b0:	str	r9, [sp, #4]
   328b4:	movt	r8, #4
   328b8:	str	r0, [sp, #8]
   328bc:	b	328f0 <__assert_fail@plt+0x1fe40>
   328c0:	add	r6, sp, #20
   328c4:	add	r7, sp, #16
   328c8:	add	r5, sp, #28
   328cc:	add	r4, sp, #24
   328d0:	mov	r3, r9
   328d4:	mov	r0, r5
   328d8:	mov	r1, r4
   328dc:	mov	r2, #10
   328e0:	mov	r9, r3
   328e4:	bl	123cc <__getdelim@plt>
   328e8:	cmn	r0, #1
   328ec:	beq	333c4 <__assert_fail@plt+0x20914>
   328f0:	ldr	r0, [sp, #28]
   328f4:	mov	r1, r8
   328f8:	mov	r2, r6
   328fc:	mov	r3, r7
   32900:	str	sl, [sp]
   32904:	bl	12954 <sscanf@plt>
   32908:	orr	r0, r0, #1
   3290c:	cmp	r0, #3
   32910:	bne	328d0 <__assert_fail@plt+0x1fe20>
   32914:	ldr	r0, [sp, #12]
   32918:	ldr	r1, [sp, #28]
   3291c:	add	r0, r1, r0
   32920:	mov	r1, #32
   32924:	mov	r5, r0
   32928:	bl	127c8 <strchr@plt>
   3292c:	cmp	r0, #0
   32930:	beq	328c0 <__assert_fail@plt+0x1fe10>
   32934:	mov	r6, r0
   32938:	mov	r4, #0
   3293c:	mov	r1, #32
   32940:	strb	r4, [r6], #1
   32944:	mov	r0, r6
   32948:	bl	127c8 <strchr@plt>
   3294c:	cmp	r0, #0
   32950:	beq	328c0 <__assert_fail@plt+0x1fe10>
   32954:	movw	r1, #55156	; 0xd774
   32958:	strb	r4, [r0], #1
   3295c:	movt	r1, #4
   32960:	bl	45380 <__assert_fail@plt+0x328d0>
   32964:	cmp	r0, #0
   32968:	beq	328c0 <__assert_fail@plt+0x1fe10>
   3296c:	add	sl, r0, #3
   32970:	mov	r1, #32
   32974:	mov	r0, sl
   32978:	bl	127c8 <strchr@plt>
   3297c:	cmp	r0, #0
   32980:	beq	32a40 <__assert_fail@plt+0x1ff90>
   32984:	mov	r9, r0
   32988:	mov	r4, #0
   3298c:	mov	r1, #32
   32990:	strb	r4, [r9], #1
   32994:	mov	r0, r9
   32998:	bl	127c8 <strchr@plt>
   3299c:	cmp	r0, #0
   329a0:	beq	32a40 <__assert_fail@plt+0x1ff90>
   329a4:	strb	r4, [r0]
   329a8:	mov	r0, r9
   329ac:	bl	127bc <strlen@plt>
   329b0:	adds	r0, r0, #1
   329b4:	mov	r8, r5
   329b8:	bcs	32a58 <__assert_fail@plt+0x1ffa8>
   329bc:	mov	r2, #0
   329c0:	mov	r1, r9
   329c4:	b	329d8 <__assert_fail@plt+0x1ff28>
   329c8:	add	r2, r2, #1
   329cc:	strb	r3, [r1], #1
   329d0:	cmp	r2, r0
   329d4:	bcs	32a58 <__assert_fail@plt+0x1ffa8>
   329d8:	ldrb	r3, [r9, r2]
   329dc:	add	r7, r2, #4
   329e0:	cmp	r7, r0
   329e4:	bcs	329c8 <__assert_fail@plt+0x1ff18>
   329e8:	cmp	r3, #92	; 0x5c
   329ec:	bne	329c8 <__assert_fail@plt+0x1ff18>
   329f0:	add	r7, r2, r9
   329f4:	ldrb	r5, [r7, #1]
   329f8:	and	r4, r5, #252	; 0xfc
   329fc:	cmp	r4, #48	; 0x30
   32a00:	bne	329c8 <__assert_fail@plt+0x1ff18>
   32a04:	ldrb	r4, [r7, #2]
   32a08:	and	r7, r4, #248	; 0xf8
   32a0c:	cmp	r7, #48	; 0x30
   32a10:	bne	329c8 <__assert_fail@plt+0x1ff18>
   32a14:	add	ip, r2, #3
   32a18:	ldrb	lr, [r9, ip]
   32a1c:	and	r7, lr, #248	; 0xf8
   32a20:	cmp	r7, #48	; 0x30
   32a24:	bne	329c8 <__assert_fail@plt+0x1ff18>
   32a28:	lsl	r2, r5, #6
   32a2c:	add	r2, r2, r4, lsl #3
   32a30:	add	r2, r2, lr
   32a34:	add	r3, r2, #80	; 0x50
   32a38:	mov	r2, ip
   32a3c:	b	329c8 <__assert_fail@plt+0x1ff18>
   32a40:	ldr	r3, [sp, #4]
   32a44:	movw	r8, #55139	; 0xd763
   32a48:	add	sl, sp, #12
   32a4c:	add	r6, sp, #20
   32a50:	movt	r8, #4
   32a54:	b	32fd8 <__assert_fail@plt+0x20528>
   32a58:	mov	r0, r6
   32a5c:	bl	127bc <strlen@plt>
   32a60:	adds	r0, r0, #1
   32a64:	bcs	32aec <__assert_fail@plt+0x2003c>
   32a68:	mov	r2, #0
   32a6c:	mov	r1, r6
   32a70:	b	32a84 <__assert_fail@plt+0x1ffd4>
   32a74:	add	r2, r2, #1
   32a78:	strb	r3, [r1], #1
   32a7c:	cmp	r2, r0
   32a80:	bcs	32aec <__assert_fail@plt+0x2003c>
   32a84:	ldrb	r3, [r6, r2]
   32a88:	add	r7, r2, #4
   32a8c:	cmp	r7, r0
   32a90:	bcs	32a74 <__assert_fail@plt+0x1ffc4>
   32a94:	cmp	r3, #92	; 0x5c
   32a98:	bne	32a74 <__assert_fail@plt+0x1ffc4>
   32a9c:	add	r7, r2, r6
   32aa0:	ldrb	r5, [r7, #1]
   32aa4:	and	r4, r5, #252	; 0xfc
   32aa8:	cmp	r4, #48	; 0x30
   32aac:	bne	32a74 <__assert_fail@plt+0x1ffc4>
   32ab0:	ldrb	r4, [r7, #2]
   32ab4:	and	r7, r4, #248	; 0xf8
   32ab8:	cmp	r7, #48	; 0x30
   32abc:	bne	32a74 <__assert_fail@plt+0x1ffc4>
   32ac0:	add	ip, r2, #3
   32ac4:	ldrb	lr, [r6, ip]
   32ac8:	and	r7, lr, #248	; 0xf8
   32acc:	cmp	r7, #48	; 0x30
   32ad0:	bne	32a74 <__assert_fail@plt+0x1ffc4>
   32ad4:	lsl	r2, r5, #6
   32ad8:	add	r2, r2, r4, lsl #3
   32adc:	add	r2, r2, lr
   32ae0:	add	r3, r2, #80	; 0x50
   32ae4:	mov	r2, ip
   32ae8:	b	32a74 <__assert_fail@plt+0x1ffc4>
   32aec:	mov	r0, r8
   32af0:	bl	127bc <strlen@plt>
   32af4:	adds	r0, r0, #1
   32af8:	bcs	32b80 <__assert_fail@plt+0x200d0>
   32afc:	mov	r2, #0
   32b00:	mov	r1, r8
   32b04:	b	32b18 <__assert_fail@plt+0x20068>
   32b08:	add	r2, r2, #1
   32b0c:	strb	r3, [r1], #1
   32b10:	cmp	r2, r0
   32b14:	bcs	32b80 <__assert_fail@plt+0x200d0>
   32b18:	ldrb	r3, [r8, r2]
   32b1c:	add	r7, r2, #4
   32b20:	cmp	r7, r0
   32b24:	bcs	32b08 <__assert_fail@plt+0x20058>
   32b28:	cmp	r3, #92	; 0x5c
   32b2c:	bne	32b08 <__assert_fail@plt+0x20058>
   32b30:	add	r7, r2, r8
   32b34:	ldrb	r5, [r7, #1]
   32b38:	and	r4, r5, #252	; 0xfc
   32b3c:	cmp	r4, #48	; 0x30
   32b40:	bne	32b08 <__assert_fail@plt+0x20058>
   32b44:	ldrb	r4, [r7, #2]
   32b48:	and	r7, r4, #248	; 0xf8
   32b4c:	cmp	r7, #48	; 0x30
   32b50:	bne	32b08 <__assert_fail@plt+0x20058>
   32b54:	add	ip, r2, #3
   32b58:	ldrb	lr, [r8, ip]
   32b5c:	and	r7, lr, #248	; 0xf8
   32b60:	cmp	r7, #48	; 0x30
   32b64:	bne	32b08 <__assert_fail@plt+0x20058>
   32b68:	lsl	r2, r5, #6
   32b6c:	add	r2, r2, r4, lsl #3
   32b70:	add	r2, r2, lr
   32b74:	add	r3, r2, #80	; 0x50
   32b78:	mov	r2, ip
   32b7c:	b	32b08 <__assert_fail@plt+0x20058>
   32b80:	mov	r0, sl
   32b84:	bl	127bc <strlen@plt>
   32b88:	adds	r0, r0, #1
   32b8c:	bcs	32c14 <__assert_fail@plt+0x20164>
   32b90:	mov	r2, #0
   32b94:	mov	r1, sl
   32b98:	b	32bac <__assert_fail@plt+0x200fc>
   32b9c:	add	r2, r2, #1
   32ba0:	strb	r3, [r1], #1
   32ba4:	cmp	r2, r0
   32ba8:	bcs	32c14 <__assert_fail@plt+0x20164>
   32bac:	ldrb	r3, [sl, r2]
   32bb0:	add	r7, r2, #4
   32bb4:	cmp	r7, r0
   32bb8:	bcs	32b9c <__assert_fail@plt+0x200ec>
   32bbc:	cmp	r3, #92	; 0x5c
   32bc0:	bne	32b9c <__assert_fail@plt+0x200ec>
   32bc4:	add	r7, r2, sl
   32bc8:	ldrb	r5, [r7, #1]
   32bcc:	and	r4, r5, #252	; 0xfc
   32bd0:	cmp	r4, #48	; 0x30
   32bd4:	bne	32b9c <__assert_fail@plt+0x200ec>
   32bd8:	ldrb	r4, [r7, #2]
   32bdc:	and	r7, r4, #248	; 0xf8
   32be0:	cmp	r7, #48	; 0x30
   32be4:	bne	32b9c <__assert_fail@plt+0x200ec>
   32be8:	add	ip, r2, #3
   32bec:	ldrb	lr, [sl, ip]
   32bf0:	and	r7, lr, #248	; 0xf8
   32bf4:	cmp	r7, #48	; 0x30
   32bf8:	bne	32b9c <__assert_fail@plt+0x200ec>
   32bfc:	lsl	r2, r5, #6
   32c00:	add	r2, r2, r4, lsl #3
   32c04:	add	r2, r2, lr
   32c08:	add	r3, r2, #80	; 0x50
   32c0c:	mov	r2, ip
   32c10:	b	32b9c <__assert_fail@plt+0x200ec>
   32c14:	mov	r0, #32
   32c18:	bl	2e038 <__assert_fail@plt+0x1b588>
   32c1c:	mov	r7, r0
   32c20:	mov	r0, r9
   32c24:	bl	2e53c <__assert_fail@plt+0x1ba8c>
   32c28:	str	r0, [r7]
   32c2c:	mov	r0, r6
   32c30:	bl	2e53c <__assert_fail@plt+0x1ba8c>
   32c34:	str	r0, [r7, #4]
   32c38:	mov	r0, r8
   32c3c:	bl	2e53c <__assert_fail@plt+0x1ba8c>
   32c40:	str	r0, [r7, #8]
   32c44:	mov	r0, sl
   32c48:	bl	2e53c <__assert_fail@plt+0x1ba8c>
   32c4c:	str	r0, [r7, #12]
   32c50:	mov	r6, r0
   32c54:	ldr	r2, [sp, #20]
   32c58:	ldrb	r0, [r7, #24]
   32c5c:	mov	r3, r2
   32c60:	orr	r4, r0, #4
   32c64:	ldr	r0, [sp, #16]
   32c68:	bfc	r3, #0, #12
   32c6c:	strb	r4, [r7, #24]
   32c70:	bic	r1, r0, #255	; 0xff
   32c74:	uxtb	r0, r0
   32c78:	orr	r3, r3, r1, lsr #20
   32c7c:	bfi	r0, r2, #8, #12
   32c80:	str	r3, [r7, #20]
   32c84:	orr	r0, r0, r1, lsl #12
   32c88:	movw	r1, #55160	; 0xd778
   32c8c:	movt	r1, #4
   32c90:	str	r0, [r7, #16]
   32c94:	mov	r0, r6
   32c98:	bl	123fc <strcmp@plt>
   32c9c:	cmp	r0, #0
   32ca0:	mov	r8, #1
   32ca4:	mov	r0, #1
   32ca8:	beq	32e14 <__assert_fail@plt+0x20364>
   32cac:	movw	r1, #55167	; 0xd77f
   32cb0:	mov	r0, r6
   32cb4:	movt	r1, #4
   32cb8:	bl	123fc <strcmp@plt>
   32cbc:	cmp	r0, #0
   32cc0:	mov	r0, #1
   32cc4:	beq	32e14 <__assert_fail@plt+0x20364>
   32cc8:	movw	r1, #55172	; 0xd784
   32ccc:	mov	r0, r6
   32cd0:	movt	r1, #4
   32cd4:	bl	123fc <strcmp@plt>
   32cd8:	cmp	r0, #0
   32cdc:	mov	r0, #1
   32ce0:	beq	32e14 <__assert_fail@plt+0x20364>
   32ce4:	movw	r1, #55178	; 0xd78a
   32ce8:	mov	r0, r6
   32cec:	movt	r1, #4
   32cf0:	bl	123fc <strcmp@plt>
   32cf4:	cmp	r0, #0
   32cf8:	mov	r0, #1
   32cfc:	beq	32e14 <__assert_fail@plt+0x20364>
   32d00:	movw	r1, #55186	; 0xd792
   32d04:	mov	r0, r6
   32d08:	movt	r1, #4
   32d0c:	bl	123fc <strcmp@plt>
   32d10:	cmp	r0, #0
   32d14:	mov	r0, #1
   32d18:	beq	32e14 <__assert_fail@plt+0x20364>
   32d1c:	movw	r1, #55193	; 0xd799
   32d20:	mov	r0, r6
   32d24:	movt	r1, #4
   32d28:	bl	123fc <strcmp@plt>
   32d2c:	cmp	r0, #0
   32d30:	mov	r0, #1
   32d34:	beq	32e14 <__assert_fail@plt+0x20364>
   32d38:	movw	r1, #55201	; 0xd7a1
   32d3c:	mov	r0, r6
   32d40:	movt	r1, #4
   32d44:	bl	123fc <strcmp@plt>
   32d48:	cmp	r0, #0
   32d4c:	mov	r0, #1
   32d50:	beq	32e14 <__assert_fail@plt+0x20364>
   32d54:	movw	r1, #55213	; 0xd7ad
   32d58:	mov	r0, r6
   32d5c:	movt	r1, #4
   32d60:	bl	123fc <strcmp@plt>
   32d64:	cmp	r0, #0
   32d68:	mov	r0, #1
   32d6c:	beq	32e14 <__assert_fail@plt+0x20364>
   32d70:	movw	r1, #55220	; 0xd7b4
   32d74:	mov	r0, r6
   32d78:	movt	r1, #4
   32d7c:	bl	123fc <strcmp@plt>
   32d80:	cmp	r0, #0
   32d84:	mov	r0, #1
   32d88:	beq	32e14 <__assert_fail@plt+0x20364>
   32d8c:	movw	r1, #55231	; 0xd7bf
   32d90:	mov	r0, r6
   32d94:	movt	r1, #4
   32d98:	bl	123fc <strcmp@plt>
   32d9c:	cmp	r0, #0
   32da0:	mov	r0, #1
   32da4:	beq	32e14 <__assert_fail@plt+0x20364>
   32da8:	movw	r1, #55237	; 0xd7c5
   32dac:	mov	r0, r6
   32db0:	movt	r1, #4
   32db4:	bl	123fc <strcmp@plt>
   32db8:	cmp	r0, #0
   32dbc:	mov	r0, #1
   32dc0:	beq	32e14 <__assert_fail@plt+0x20364>
   32dc4:	movw	r1, #55243	; 0xd7cb
   32dc8:	mov	r0, r6
   32dcc:	movt	r1, #4
   32dd0:	bl	123fc <strcmp@plt>
   32dd4:	cmp	r0, #0
   32dd8:	mov	r0, #1
   32ddc:	beq	32e14 <__assert_fail@plt+0x20364>
   32de0:	movw	r1, #41949	; 0xa3dd
   32de4:	mov	r0, r6
   32de8:	movt	r1, #4
   32dec:	bl	123fc <strcmp@plt>
   32df0:	cmp	r0, #0
   32df4:	mov	r0, #1
   32df8:	beq	32e14 <__assert_fail@plt+0x20364>
   32dfc:	movw	r1, #55250	; 0xd7d2
   32e00:	mov	r0, r6
   32e04:	movt	r1, #4
   32e08:	bl	123fc <strcmp@plt>
   32e0c:	clz	r0, r0
   32e10:	lsr	r0, r0, #5
   32e14:	bic	r1, r4, #1
   32e18:	orr	r5, r1, r0
   32e1c:	mov	r1, #58	; 0x3a
   32e20:	strb	r5, [r7, #24]
   32e24:	ldr	r4, [r7]
   32e28:	mov	r0, r4
   32e2c:	bl	127c8 <strchr@plt>
   32e30:	ldr	r3, [sp, #4]
   32e34:	cmp	r0, #0
   32e38:	beq	32e44 <__assert_fail@plt+0x20394>
   32e3c:	add	r6, sp, #20
   32e40:	b	32fb0 <__assert_fail@plt+0x20500>
   32e44:	ldrb	r0, [r4]
   32e48:	mov	r9, r3
   32e4c:	cmp	r0, #47	; 0x2f
   32e50:	bne	32ea8 <__assert_fail@plt+0x203f8>
   32e54:	ldrb	r0, [r4, #1]
   32e58:	cmp	r0, #47	; 0x2f
   32e5c:	bne	32ea8 <__assert_fail@plt+0x203f8>
   32e60:	movw	r1, #55255	; 0xd7d7
   32e64:	mov	r0, r6
   32e68:	movt	r1, #4
   32e6c:	bl	123fc <strcmp@plt>
   32e70:	cmp	r0, #0
   32e74:	beq	32fa8 <__assert_fail@plt+0x204f8>
   32e78:	movw	r1, #55261	; 0xd7dd
   32e7c:	mov	r0, r6
   32e80:	movt	r1, #4
   32e84:	bl	123fc <strcmp@plt>
   32e88:	cmp	r0, #0
   32e8c:	beq	32fa8 <__assert_fail@plt+0x204f8>
   32e90:	movw	r1, #55266	; 0xd7e2
   32e94:	mov	r0, r6
   32e98:	movt	r1, #4
   32e9c:	bl	123fc <strcmp@plt>
   32ea0:	cmp	r0, #0
   32ea4:	beq	32fa8 <__assert_fail@plt+0x204f8>
   32ea8:	movw	r1, #55271	; 0xd7e7
   32eac:	mov	r0, r6
   32eb0:	movt	r1, #4
   32eb4:	bl	123fc <strcmp@plt>
   32eb8:	cmp	r0, #0
   32ebc:	beq	32fa8 <__assert_fail@plt+0x204f8>
   32ec0:	movw	r1, #41908	; 0xa3b4
   32ec4:	mov	r0, r6
   32ec8:	movt	r1, #4
   32ecc:	bl	123fc <strcmp@plt>
   32ed0:	cmp	r0, #0
   32ed4:	beq	32fa8 <__assert_fail@plt+0x204f8>
   32ed8:	movw	r1, #55276	; 0xd7ec
   32edc:	mov	r0, r6
   32ee0:	movt	r1, #4
   32ee4:	bl	123fc <strcmp@plt>
   32ee8:	cmp	r0, #0
   32eec:	beq	32fa8 <__assert_fail@plt+0x204f8>
   32ef0:	movw	r1, #55281	; 0xd7f1
   32ef4:	mov	r0, r6
   32ef8:	movt	r1, #4
   32efc:	bl	123fc <strcmp@plt>
   32f00:	cmp	r0, #0
   32f04:	beq	32fa8 <__assert_fail@plt+0x204f8>
   32f08:	movw	r1, #55292	; 0xd7fc
   32f0c:	mov	r0, r6
   32f10:	movt	r1, #4
   32f14:	bl	123fc <strcmp@plt>
   32f18:	cmp	r0, #0
   32f1c:	beq	32fa8 <__assert_fail@plt+0x204f8>
   32f20:	movw	r1, #55298	; 0xd802
   32f24:	mov	r0, r6
   32f28:	movt	r1, #4
   32f2c:	bl	123fc <strcmp@plt>
   32f30:	cmp	r0, #0
   32f34:	beq	32fa8 <__assert_fail@plt+0x204f8>
   32f38:	movw	r1, #55303	; 0xd807
   32f3c:	mov	r0, r6
   32f40:	movt	r1, #4
   32f44:	bl	123fc <strcmp@plt>
   32f48:	cmp	r0, #0
   32f4c:	beq	32fa8 <__assert_fail@plt+0x204f8>
   32f50:	movw	r1, #55309	; 0xd80d
   32f54:	mov	r0, r6
   32f58:	movt	r1, #4
   32f5c:	bl	123fc <strcmp@plt>
   32f60:	cmp	r0, #0
   32f64:	beq	32fa8 <__assert_fail@plt+0x204f8>
   32f68:	movw	r1, #55315	; 0xd813
   32f6c:	mov	r0, r6
   32f70:	movt	r1, #4
   32f74:	bl	123fc <strcmp@plt>
   32f78:	cmp	r0, #0
   32f7c:	add	r6, sp, #20
   32f80:	mov	r3, r9
   32f84:	beq	32fb0 <__assert_fail@plt+0x20500>
   32f88:	movw	r0, #55320	; 0xd818
   32f8c:	mov	r1, r4
   32f90:	movt	r0, #4
   32f94:	bl	123fc <strcmp@plt>
   32f98:	clz	r0, r0
   32f9c:	mov	r3, r9
   32fa0:	lsr	r8, r0, #5
   32fa4:	b	32fb0 <__assert_fail@plt+0x20500>
   32fa8:	add	r6, sp, #20
   32fac:	mov	r3, r9
   32fb0:	and	r0, r5, #253	; 0xfd
   32fb4:	add	sl, sp, #12
   32fb8:	orr	r0, r0, r8, lsl #1
   32fbc:	movw	r8, #55139	; 0xd763
   32fc0:	movt	r8, #4
   32fc4:	strb	r0, [r7, #24]
   32fc8:	ldr	r0, [sp, #8]
   32fcc:	str	r7, [r0]
   32fd0:	add	r0, r7, #28
   32fd4:	str	r0, [sp, #8]
   32fd8:	add	r7, sp, #16
   32fdc:	add	r5, sp, #28
   32fe0:	add	r4, sp, #24
   32fe4:	b	328d4 <__assert_fail@plt+0x1fe24>
   32fe8:	movw	r0, #55327	; 0xd81f
   32fec:	movw	r1, #49160	; 0xc008
   32ff0:	movt	r0, #4
   32ff4:	movt	r1, #4
   32ff8:	bl	129f0 <setmntent@plt>
   32ffc:	cmp	r0, #0
   33000:	beq	33410 <__assert_fail@plt+0x20960>
   33004:	mov	r8, r0
   33008:	bl	126a8 <getmntent@plt>
   3300c:	cmp	r0, #0
   33010:	beq	33418 <__assert_fail@plt+0x20968>
   33014:	mov	r5, r0
   33018:	add	sl, sp, #32
   3301c:	b	33078 <__assert_fail@plt+0x205c8>
   33020:	bic	r1, r4, #1
   33024:	orr	r4, r1, r0
   33028:	mov	r1, #58	; 0x3a
   3302c:	strb	r4, [r9, #24]
   33030:	ldr	r5, [r9]
   33034:	mov	r0, r5
   33038:	bl	127c8 <strchr@plt>
   3303c:	cmp	r0, #0
   33040:	beq	33268 <__assert_fail@plt+0x207b8>
   33044:	mvn	r0, #0
   33048:	str	r0, [r9, #16]
   3304c:	str	r0, [r9, #20]
   33050:	and	r0, r4, #253	; 0xfd
   33054:	orr	r0, r0, r6, lsl #1
   33058:	strb	r0, [r9, #24]
   3305c:	mov	r0, r8
   33060:	str	r9, [sl]
   33064:	add	sl, r9, #28
   33068:	bl	126a8 <getmntent@plt>
   3306c:	mov	r5, r0
   33070:	cmp	r0, #0
   33074:	beq	3341c <__assert_fail@plt+0x2096c>
   33078:	movw	r1, #55337	; 0xd829
   3307c:	mov	r0, r5
   33080:	movt	r1, #4
   33084:	bl	12654 <hasmntopt@plt>
   33088:	str	r0, [sp, #8]
   3308c:	mov	r0, #32
   33090:	bl	2e038 <__assert_fail@plt+0x1b588>
   33094:	mov	r9, r0
   33098:	ldr	r0, [r5]
   3309c:	bl	2e53c <__assert_fail@plt+0x1ba8c>
   330a0:	str	r0, [r9]
   330a4:	ldr	r0, [r5, #4]
   330a8:	bl	2e53c <__assert_fail@plt+0x1ba8c>
   330ac:	str	r0, [r9, #4]
   330b0:	mov	r0, #0
   330b4:	str	r0, [r9, #8]
   330b8:	ldr	r0, [r5, #8]
   330bc:	bl	2e53c <__assert_fail@plt+0x1ba8c>
   330c0:	str	r0, [r9, #12]
   330c4:	mov	r7, r0
   330c8:	movw	r1, #55160	; 0xd778
   330cc:	ldrb	r0, [r9, #24]
   330d0:	movt	r1, #4
   330d4:	orr	r4, r0, #4
   330d8:	mov	r0, r7
   330dc:	strb	r4, [r9, #24]
   330e0:	bl	123fc <strcmp@plt>
   330e4:	cmp	r0, #0
   330e8:	mov	r6, #1
   330ec:	mov	r0, #1
   330f0:	beq	33020 <__assert_fail@plt+0x20570>
   330f4:	movw	r1, #55167	; 0xd77f
   330f8:	mov	r0, r7
   330fc:	movt	r1, #4
   33100:	bl	123fc <strcmp@plt>
   33104:	cmp	r0, #0
   33108:	mov	r0, #1
   3310c:	beq	33020 <__assert_fail@plt+0x20570>
   33110:	movw	r1, #55172	; 0xd784
   33114:	mov	r0, r7
   33118:	movt	r1, #4
   3311c:	bl	123fc <strcmp@plt>
   33120:	cmp	r0, #0
   33124:	mov	r0, #1
   33128:	beq	33020 <__assert_fail@plt+0x20570>
   3312c:	movw	r1, #55178	; 0xd78a
   33130:	mov	r0, r7
   33134:	movt	r1, #4
   33138:	bl	123fc <strcmp@plt>
   3313c:	cmp	r0, #0
   33140:	mov	r0, #1
   33144:	beq	33020 <__assert_fail@plt+0x20570>
   33148:	movw	r1, #55186	; 0xd792
   3314c:	mov	r0, r7
   33150:	movt	r1, #4
   33154:	bl	123fc <strcmp@plt>
   33158:	cmp	r0, #0
   3315c:	mov	r0, #1
   33160:	beq	33020 <__assert_fail@plt+0x20570>
   33164:	movw	r1, #55193	; 0xd799
   33168:	mov	r0, r7
   3316c:	movt	r1, #4
   33170:	bl	123fc <strcmp@plt>
   33174:	cmp	r0, #0
   33178:	mov	r0, #1
   3317c:	beq	33020 <__assert_fail@plt+0x20570>
   33180:	movw	r1, #55201	; 0xd7a1
   33184:	mov	r0, r7
   33188:	movt	r1, #4
   3318c:	bl	123fc <strcmp@plt>
   33190:	cmp	r0, #0
   33194:	mov	r0, #1
   33198:	beq	33020 <__assert_fail@plt+0x20570>
   3319c:	movw	r1, #55213	; 0xd7ad
   331a0:	mov	r0, r7
   331a4:	movt	r1, #4
   331a8:	bl	123fc <strcmp@plt>
   331ac:	cmp	r0, #0
   331b0:	mov	r0, #1
   331b4:	beq	33020 <__assert_fail@plt+0x20570>
   331b8:	movw	r1, #55220	; 0xd7b4
   331bc:	mov	r0, r7
   331c0:	movt	r1, #4
   331c4:	bl	123fc <strcmp@plt>
   331c8:	cmp	r0, #0
   331cc:	mov	r0, #1
   331d0:	beq	33020 <__assert_fail@plt+0x20570>
   331d4:	movw	r1, #55231	; 0xd7bf
   331d8:	mov	r0, r7
   331dc:	movt	r1, #4
   331e0:	bl	123fc <strcmp@plt>
   331e4:	cmp	r0, #0
   331e8:	mov	r0, #1
   331ec:	beq	33020 <__assert_fail@plt+0x20570>
   331f0:	movw	r1, #55237	; 0xd7c5
   331f4:	mov	r0, r7
   331f8:	movt	r1, #4
   331fc:	bl	123fc <strcmp@plt>
   33200:	cmp	r0, #0
   33204:	mov	r0, #1
   33208:	beq	33020 <__assert_fail@plt+0x20570>
   3320c:	movw	r1, #55243	; 0xd7cb
   33210:	mov	r0, r7
   33214:	movt	r1, #4
   33218:	bl	123fc <strcmp@plt>
   3321c:	cmp	r0, #0
   33220:	mov	r0, #1
   33224:	beq	33020 <__assert_fail@plt+0x20570>
   33228:	movw	r1, #41949	; 0xa3dd
   3322c:	mov	r0, r7
   33230:	movt	r1, #4
   33234:	bl	123fc <strcmp@plt>
   33238:	cmp	r0, #0
   3323c:	mov	r0, #1
   33240:	beq	33020 <__assert_fail@plt+0x20570>
   33244:	movw	r1, #55250	; 0xd7d2
   33248:	mov	r0, r7
   3324c:	movt	r1, #4
   33250:	bl	123fc <strcmp@plt>
   33254:	ldr	r1, [sp, #8]
   33258:	orr	r0, r1, r0
   3325c:	clz	r0, r0
   33260:	lsr	r0, r0, #5
   33264:	b	33020 <__assert_fail@plt+0x20570>
   33268:	ldrb	r0, [r5]
   3326c:	cmp	r0, #47	; 0x2f
   33270:	bne	332c8 <__assert_fail@plt+0x20818>
   33274:	ldrb	r0, [r5, #1]
   33278:	cmp	r0, #47	; 0x2f
   3327c:	bne	332c8 <__assert_fail@plt+0x20818>
   33280:	movw	r1, #55255	; 0xd7d7
   33284:	mov	r0, r7
   33288:	movt	r1, #4
   3328c:	bl	123fc <strcmp@plt>
   33290:	cmp	r0, #0
   33294:	beq	33044 <__assert_fail@plt+0x20594>
   33298:	movw	r1, #55261	; 0xd7dd
   3329c:	mov	r0, r7
   332a0:	movt	r1, #4
   332a4:	bl	123fc <strcmp@plt>
   332a8:	cmp	r0, #0
   332ac:	beq	33044 <__assert_fail@plt+0x20594>
   332b0:	movw	r1, #55266	; 0xd7e2
   332b4:	mov	r0, r7
   332b8:	movt	r1, #4
   332bc:	bl	123fc <strcmp@plt>
   332c0:	cmp	r0, #0
   332c4:	beq	33044 <__assert_fail@plt+0x20594>
   332c8:	movw	r1, #55271	; 0xd7e7
   332cc:	mov	r0, r7
   332d0:	movt	r1, #4
   332d4:	bl	123fc <strcmp@plt>
   332d8:	cmp	r0, #0
   332dc:	beq	33044 <__assert_fail@plt+0x20594>
   332e0:	movw	r1, #41908	; 0xa3b4
   332e4:	mov	r0, r7
   332e8:	movt	r1, #4
   332ec:	bl	123fc <strcmp@plt>
   332f0:	cmp	r0, #0
   332f4:	beq	33044 <__assert_fail@plt+0x20594>
   332f8:	movw	r1, #55276	; 0xd7ec
   332fc:	mov	r0, r7
   33300:	movt	r1, #4
   33304:	bl	123fc <strcmp@plt>
   33308:	cmp	r0, #0
   3330c:	beq	33044 <__assert_fail@plt+0x20594>
   33310:	movw	r1, #55281	; 0xd7f1
   33314:	mov	r0, r7
   33318:	movt	r1, #4
   3331c:	bl	123fc <strcmp@plt>
   33320:	cmp	r0, #0
   33324:	beq	33044 <__assert_fail@plt+0x20594>
   33328:	movw	r1, #55292	; 0xd7fc
   3332c:	mov	r0, r7
   33330:	movt	r1, #4
   33334:	bl	123fc <strcmp@plt>
   33338:	cmp	r0, #0
   3333c:	beq	33044 <__assert_fail@plt+0x20594>
   33340:	movw	r1, #55298	; 0xd802
   33344:	mov	r0, r7
   33348:	movt	r1, #4
   3334c:	bl	123fc <strcmp@plt>
   33350:	cmp	r0, #0
   33354:	beq	33044 <__assert_fail@plt+0x20594>
   33358:	movw	r1, #55303	; 0xd807
   3335c:	mov	r0, r7
   33360:	movt	r1, #4
   33364:	bl	123fc <strcmp@plt>
   33368:	cmp	r0, #0
   3336c:	beq	33044 <__assert_fail@plt+0x20594>
   33370:	movw	r1, #55309	; 0xd80d
   33374:	mov	r0, r7
   33378:	movt	r1, #4
   3337c:	bl	123fc <strcmp@plt>
   33380:	cmp	r0, #0
   33384:	beq	33044 <__assert_fail@plt+0x20594>
   33388:	movw	r1, #55315	; 0xd813
   3338c:	mov	r0, r7
   33390:	movt	r1, #4
   33394:	bl	123fc <strcmp@plt>
   33398:	cmp	r0, #0
   3339c:	beq	33044 <__assert_fail@plt+0x20594>
   333a0:	movw	r0, #55320	; 0xd818
   333a4:	mov	r1, r5
   333a8:	movt	r0, #4
   333ac:	bl	123fc <strcmp@plt>
   333b0:	clz	r0, r0
   333b4:	lsr	r6, r0, #5
   333b8:	b	33044 <__assert_fail@plt+0x20594>
   333bc:	add	r0, sp, #32
   333c0:	str	r0, [sp, #8]
   333c4:	ldr	r0, [sp, #28]
   333c8:	bl	30174 <__assert_fail@plt+0x1d6c4>
   333cc:	ldrb	r1, [r9]
   333d0:	tst	r1, #32
   333d4:	bne	333f0 <__assert_fail@plt+0x20940>
   333d8:	mov	r0, r9
   333dc:	bl	128b8 <fclose@plt>
   333e0:	ldr	sl, [sp, #8]
   333e4:	cmn	r0, #1
   333e8:	bne	3342c <__assert_fail@plt+0x2097c>
   333ec:	b	3343c <__assert_fail@plt+0x2098c>
   333f0:	bl	12804 <__errno_location@plt>
   333f4:	ldr	r6, [r0]
   333f8:	mov	r5, r0
   333fc:	mov	r0, r9
   33400:	bl	128b8 <fclose@plt>
   33404:	ldr	sl, [sp, #8]
   33408:	str	r6, [r5]
   3340c:	b	3343c <__assert_fail@plt+0x2098c>
   33410:	mov	r4, #0
   33414:	b	334b0 <__assert_fail@plt+0x20a00>
   33418:	add	sl, sp, #32
   3341c:	mov	r0, r8
   33420:	bl	128dc <endmntent@plt>
   33424:	cmp	r0, #0
   33428:	beq	3343c <__assert_fail@plt+0x2098c>
   3342c:	mov	r0, #0
   33430:	str	r0, [sl]
   33434:	ldr	r4, [sp, #32]
   33438:	b	334b0 <__assert_fail@plt+0x20a00>
   3343c:	bl	12804 <__errno_location@plt>
   33440:	mov	r4, #0
   33444:	ldr	r8, [r0]
   33448:	mov	r5, r0
   3344c:	str	r4, [sl]
   33450:	ldr	r6, [sp, #32]
   33454:	cmp	r6, #0
   33458:	bne	33478 <__assert_fail@plt+0x209c8>
   3345c:	b	334ac <__assert_fail@plt+0x209fc>
   33460:	mov	r0, r6
   33464:	bl	30174 <__assert_fail@plt+0x1d6c4>
   33468:	cmp	r7, #0
   3346c:	mov	r6, r7
   33470:	str	r7, [sp, #32]
   33474:	beq	334ac <__assert_fail@plt+0x209fc>
   33478:	ldr	r0, [r6]
   3347c:	ldr	r7, [r6, #28]
   33480:	bl	30174 <__assert_fail@plt+0x1d6c4>
   33484:	ldr	r0, [r6, #4]
   33488:	bl	30174 <__assert_fail@plt+0x1d6c4>
   3348c:	ldr	r0, [r6, #8]
   33490:	bl	30174 <__assert_fail@plt+0x1d6c4>
   33494:	ldrb	r0, [r6, #24]
   33498:	tst	r0, #4
   3349c:	beq	33460 <__assert_fail@plt+0x209b0>
   334a0:	ldr	r0, [r6, #12]
   334a4:	bl	30174 <__assert_fail@plt+0x1d6c4>
   334a8:	b	33460 <__assert_fail@plt+0x209b0>
   334ac:	str	r8, [r5]
   334b0:	mov	r0, r4
   334b4:	sub	sp, fp, #28
   334b8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   334bc:	push	{r4, sl, fp, lr}
   334c0:	add	fp, sp, #8
   334c4:	mov	r4, r0
   334c8:	ldr	r0, [r0]
   334cc:	bl	30174 <__assert_fail@plt+0x1d6c4>
   334d0:	ldr	r0, [r4, #4]
   334d4:	bl	30174 <__assert_fail@plt+0x1d6c4>
   334d8:	ldr	r0, [r4, #8]
   334dc:	bl	30174 <__assert_fail@plt+0x1d6c4>
   334e0:	ldrb	r0, [r4, #24]
   334e4:	tst	r0, #4
   334e8:	beq	334f4 <__assert_fail@plt+0x20a44>
   334ec:	ldr	r0, [r4, #12]
   334f0:	bl	30174 <__assert_fail@plt+0x1d6c4>
   334f4:	mov	r0, r4
   334f8:	pop	{r4, sl, fp, lr}
   334fc:	b	30174 <__assert_fail@plt+0x1d6c4>
   33500:	push	{fp, lr}
   33504:	mov	fp, sp
   33508:	cmp	r0, #0
   3350c:	beq	33528 <__assert_fail@plt+0x20a78>
   33510:	cmp	r1, #0
   33514:	beq	33534 <__assert_fail@plt+0x20a84>
   33518:	cmn	r1, #1
   3351c:	ble	33540 <__assert_fail@plt+0x20a90>
   33520:	pop	{fp, lr}
   33524:	b	12594 <realloc@plt>
   33528:	mov	r0, r1
   3352c:	pop	{fp, lr}
   33530:	b	327ac <__assert_fail@plt+0x1fcfc>
   33534:	bl	30174 <__assert_fail@plt+0x1d6c4>
   33538:	mov	r0, #0
   3353c:	pop	{fp, pc}
   33540:	bl	12804 <__errno_location@plt>
   33544:	mov	r1, #12
   33548:	str	r1, [r0]
   3354c:	mov	r0, #0
   33550:	pop	{fp, pc}
   33554:	cmp	r2, #0
   33558:	beq	33588 <__assert_fail@plt+0x20ad8>
   3355c:	mvn	r3, #0
   33560:	udiv	r3, r3, r2
   33564:	cmp	r3, r1
   33568:	bcs	33588 <__assert_fail@plt+0x20ad8>
   3356c:	push	{fp, lr}
   33570:	mov	fp, sp
   33574:	bl	12804 <__errno_location@plt>
   33578:	mov	r1, #12
   3357c:	str	r1, [r0]
   33580:	mov	r0, #0
   33584:	pop	{fp, pc}
   33588:	mul	r1, r2, r1
   3358c:	b	33500 <__assert_fail@plt+0x20a50>
   33590:	push	{fp, lr}
   33594:	mov	fp, sp
   33598:	mov	lr, r0
   3359c:	movw	r0, #61128	; 0xeec8
   335a0:	mov	ip, r1
   335a4:	ldrb	r1, [r2, #28]
   335a8:	movt	r0, #5
   335ac:	ldr	r3, [r0]
   335b0:	mov	r0, #16
   335b4:	and	r1, r1, #111	; 0x6f
   335b8:	and	r0, r0, r3, lsr #21
   335bc:	orr	r0, r1, r0
   335c0:	mov	r1, lr
   335c4:	orr	r0, r0, #128	; 0x80
   335c8:	strb	r0, [r2, #28]
   335cc:	mov	r0, r2
   335d0:	mov	r2, ip
   335d4:	bl	33610 <__assert_fail@plt+0x20b60>
   335d8:	cmp	r0, #0
   335dc:	beq	33608 <__assert_fail@plt+0x20b58>
   335e0:	movw	r1, #55728	; 0xd9b0
   335e4:	mov	r2, #5
   335e8:	movt	r1, #4
   335ec:	ldr	r0, [r1, r0, lsl #2]
   335f0:	movw	r1, #55344	; 0xd830
   335f4:	movt	r1, #4
   335f8:	add	r1, r1, r0
   335fc:	mov	r0, #0
   33600:	pop	{fp, lr}
   33604:	b	12564 <dcgettext@plt>
   33608:	mov	r0, #0
   3360c:	pop	{fp, pc}
   33610:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   33614:	add	fp, sp, #28
   33618:	sub	sp, sp, #140	; 0x8c
   3361c:	mov	sl, r0
   33620:	mov	r0, #0
   33624:	str	r3, [sp, #24]
   33628:	mov	r5, r1
   3362c:	mov	r9, r2
   33630:	str	r0, [fp, #-52]	; 0xffffffcc
   33634:	str	r0, [sl, #24]
   33638:	str	r0, [sl, #8]
   3363c:	str	r3, [sl, #12]
   33640:	ldrb	r0, [sl, #28]
   33644:	and	r0, r0, #144	; 0x90
   33648:	strb	r0, [sl, #28]
   3364c:	ldm	sl, {r0, r1}
   33650:	cmp	r1, #159	; 0x9f
   33654:	bls	33e34 <__assert_fail@plt+0x21384>
   33658:	mov	r1, #160	; 0xa0
   3365c:	mov	r2, #160	; 0xa0
   33660:	str	r0, [sp, #28]
   33664:	str	r1, [sl, #8]
   33668:	mov	r1, #0
   3366c:	bl	12834 <memset@plt>
   33670:	ldr	r3, [sp, #28]
   33674:	mov	r0, #31
   33678:	str	r0, [r3, #64]	; 0x40
   3367c:	movw	r0, #43689	; 0xaaa9
   33680:	movt	r0, #2730	; 0xaaa
   33684:	cmp	r9, r0
   33688:	bhi	33828 <__assert_fail@plt+0x20d78>
   3368c:	add	r7, r9, #1
   33690:	mov	r4, r3
   33694:	lsl	r0, r7, #3
   33698:	str	r7, [r3, #4]
   3369c:	bl	327ac <__assert_fail@plt+0x1fcfc>
   336a0:	str	r0, [r4]
   336a4:	mov	r0, #1
   336a8:	mov	r6, r0
   336ac:	lsl	r0, r0, #1
   336b0:	cmp	r6, r9
   336b4:	bls	336a8 <__assert_fail@plt+0x20bf8>
   336b8:	mov	r0, #12
   336bc:	mov	r1, r6
   336c0:	str	r7, [sp, #12]
   336c4:	str	r5, [sp, #20]
   336c8:	bl	2fb8c <__assert_fail@plt+0x1d0dc>
   336cc:	ldr	r4, [sp, #28]
   336d0:	sub	r1, r6, #1
   336d4:	str	r1, [r4, #68]	; 0x44
   336d8:	str	r0, [r4, #32]
   336dc:	bl	12648 <__ctype_get_mb_cur_max@plt>
   336e0:	str	r0, [r4, #92]	; 0x5c
   336e4:	mov	r0, #14
   336e8:	bl	1293c <nl_langinfo@plt>
   336ec:	ldrb	r1, [r0]
   336f0:	orr	r1, r1, #32
   336f4:	cmp	r1, #117	; 0x75
   336f8:	bne	3374c <__assert_fail@plt+0x20c9c>
   336fc:	ldrb	r1, [r0, #1]
   33700:	orr	r1, r1, #32
   33704:	cmp	r1, #116	; 0x74
   33708:	bne	3374c <__assert_fail@plt+0x20c9c>
   3370c:	ldrb	r1, [r0, #2]
   33710:	orr	r1, r1, #32
   33714:	cmp	r1, #102	; 0x66
   33718:	bne	3374c <__assert_fail@plt+0x20c9c>
   3371c:	ldrb	r1, [r0, #3]!
   33720:	cmp	r1, #45	; 0x2d
   33724:	movw	r1, #55844	; 0xda24
   33728:	movt	r1, #4
   3372c:	addeq	r0, r0, #1
   33730:	bl	123fc <strcmp@plt>
   33734:	cmp	r0, #0
   33738:	bne	3374c <__assert_fail@plt+0x20c9c>
   3373c:	ldr	r1, [sp, #28]
   33740:	ldrb	r0, [r1, #88]	; 0x58
   33744:	orr	r0, r0, #4
   33748:	strb	r0, [r1, #88]	; 0x58
   3374c:	ldr	r3, [sp, #28]
   33750:	ldrb	r0, [r3, #88]	; 0x58
   33754:	and	r1, r0, #247	; 0xf7
   33758:	strb	r1, [r3, #88]	; 0x58
   3375c:	ldr	r1, [r3, #92]	; 0x5c
   33760:	cmp	r1, #2
   33764:	blt	33810 <__assert_fail@plt+0x20d60>
   33768:	tst	r0, #4
   3376c:	bne	33804 <__assert_fail@plt+0x20d54>
   33770:	mov	r0, #32
   33774:	mov	r1, #1
   33778:	mov	r4, #1
   3377c:	bl	2fb8c <__assert_fail@plt+0x1d0dc>
   33780:	ldr	r3, [sp, #28]
   33784:	cmp	r0, #0
   33788:	str	r0, [r3, #60]	; 0x3c
   3378c:	beq	33828 <__assert_fail@plt+0x20d78>
   33790:	mov	r5, #0
   33794:	mov	r7, #0
   33798:	b	337ac <__assert_fail@plt+0x20cfc>
   3379c:	add	r7, r7, #1
   337a0:	add	r5, r5, r8
   337a4:	cmp	r7, #8
   337a8:	beq	33810 <__assert_fail@plt+0x20d60>
   337ac:	mov	r8, #0
   337b0:	b	337c0 <__assert_fail@plt+0x20d10>
   337b4:	add	r8, r8, #1
   337b8:	cmp	r8, #32
   337bc:	beq	3379c <__assert_fail@plt+0x20cec>
   337c0:	add	r6, r5, r8
   337c4:	mov	r0, r6
   337c8:	bl	12864 <btowc@plt>
   337cc:	ldr	r3, [sp, #28]
   337d0:	cmn	r0, #1
   337d4:	beq	337e8 <__assert_fail@plt+0x20d38>
   337d8:	ldr	r1, [r3, #60]	; 0x3c
   337dc:	ldr	r2, [r1, r7, lsl #2]
   337e0:	orr	r2, r2, r4, lsl r8
   337e4:	str	r2, [r1, r7, lsl #2]
   337e8:	cmp	r6, #127	; 0x7f
   337ec:	bhi	337b4 <__assert_fail@plt+0x20d04>
   337f0:	cmp	r6, r0
   337f4:	ldrbne	r0, [r3, #88]	; 0x58
   337f8:	orrne	r0, r0, #8
   337fc:	strbne	r0, [r3, #88]	; 0x58
   33800:	b	337b4 <__assert_fail@plt+0x20d04>
   33804:	movw	r0, #55796	; 0xd9f4
   33808:	movt	r0, #4
   3380c:	str	r0, [r3, #60]	; 0x3c
   33810:	ldr	r0, [r3]
   33814:	ldr	r7, [sp, #20]
   33818:	cmp	r0, #0
   3381c:	ldrne	r0, [r3, #32]
   33820:	cmpne	r0, #0
   33824:	bne	33848 <__assert_fail@plt+0x20d98>
   33828:	mov	r4, #12
   3382c:	mov	r0, r3
   33830:	str	r4, [fp, #-52]	; 0xffffffcc
   33834:	bl	351bc <__assert_fail@plt+0x2270c>
   33838:	mov	r0, #0
   3383c:	str	r0, [sl]
   33840:	str	r0, [sl, #4]
   33844:	b	34a58 <__assert_fail@plt+0x21fa8>
   33848:	movw	r0, #9392	; 0x24b0
   3384c:	movw	r1, #10328	; 0x2858
   33850:	mov	r6, #0
   33854:	movt	r0, #1
   33858:	movt	r1, #1
   3385c:	str	r6, [fp, #-52]	; 0xffffffcc
   33860:	orrs	r4, r1, r0
   33864:	beq	33880 <__assert_fail@plt+0x20dd0>
   33868:	add	r0, r3, #136	; 0x88
   3386c:	mov	r1, #0
   33870:	bl	124f8 <pthread_mutex_init@plt>
   33874:	ldr	r3, [sp, #28]
   33878:	cmp	r0, #0
   3387c:	bne	33828 <__assert_fail@plt+0x20d78>
   33880:	vmov.i32	q8, #0	; 0x00000000
   33884:	add	r1, sp, #32
   33888:	str	r4, [sp, #8]
   3388c:	ldr	r4, [sl, #20]
   33890:	ldr	r2, [sp, #24]
   33894:	add	r0, r1, #64	; 0x40
   33898:	vst1.32	{d16-d17}, [r0]
   3389c:	add	r0, r1, #52	; 0x34
   338a0:	vst1.32	{d16-d17}, [r0]
   338a4:	add	r0, r1, #36	; 0x24
   338a8:	vst1.32	{d16-d17}, [r0]
   338ac:	add	r0, r1, #20
   338b0:	vst1.32	{d16-d17}, [r0]
   338b4:	add	r0, r1, #4
   338b8:	add	r1, r1, #44	; 0x2c
   338bc:	vst1.32	{d16-d17}, [r0]
   338c0:	str	r7, [sp, #32]
   338c4:	ubfx	r0, r2, #22, #1
   338c8:	vdup.32	q8, r9
   338cc:	strb	r0, [sp, #104]	; 0x68
   338d0:	and	r0, r2, #4194304	; 0x400000
   338d4:	str	r4, [sp, #96]	; 0x60
   338d8:	orrs	r5, r0, r4
   338dc:	str	r0, [sp, #16]
   338e0:	movwne	r5, #1
   338e4:	cmp	r9, #1
   338e8:	strb	r5, [sp, #107]	; 0x6b
   338ec:	ldr	r0, [r3, #92]	; 0x5c
   338f0:	str	r0, [sp, #112]	; 0x70
   338f4:	ldrb	r2, [r3, #88]	; 0x58
   338f8:	vst1.32	{d16-d17}, [r1]
   338fc:	ubfx	r1, r2, #3, #1
   33900:	strb	r1, [sp, #106]	; 0x6a
   33904:	ubfx	r1, r2, #2, #1
   33908:	strb	r1, [sp, #105]	; 0x69
   3390c:	blt	33984 <__assert_fail@plt+0x20ed4>
   33910:	ldr	r8, [sp, #12]
   33914:	cmp	r0, #2
   33918:	blt	33944 <__assert_fail@plt+0x20e94>
   3391c:	mov	r6, #12
   33920:	cmn	r9, #-1073741822	; 0xc0000002
   33924:	bhi	33e2c <__assert_fail@plt+0x2137c>
   33928:	lsl	r1, r8, #2
   3392c:	mov	r0, #0
   33930:	bl	33500 <__assert_fail@plt+0x20a50>
   33934:	ldr	r3, [sp, #28]
   33938:	cmp	r0, #0
   3393c:	beq	33e2c <__assert_fail@plt+0x2137c>
   33940:	str	r0, [sp, #40]	; 0x28
   33944:	cmp	r5, #0
   33948:	mov	r6, #0
   3394c:	mov	r5, #0
   33950:	beq	33978 <__assert_fail@plt+0x20ec8>
   33954:	mov	r0, #0
   33958:	mov	r1, r8
   3395c:	bl	33500 <__assert_fail@plt+0x20a50>
   33960:	cmp	r0, #0
   33964:	beq	33e28 <__assert_fail@plt+0x21378>
   33968:	ldr	r3, [sp, #28]
   3396c:	mov	r6, r0
   33970:	mov	r5, #1
   33974:	str	r0, [sp, #36]	; 0x24
   33978:	str	r8, [sp, #68]	; 0x44
   3397c:	ldr	r0, [r3, #92]	; 0x5c
   33980:	b	33988 <__assert_fail@plt+0x20ed8>
   33984:	mov	r8, #0
   33988:	ldr	r1, [sp, #16]
   3398c:	cmp	r5, #0
   33990:	moveq	r6, r7
   33994:	str	r6, [sp, #36]	; 0x24
   33998:	cmp	r1, #0
   3399c:	beq	33a80 <__assert_fail@plt+0x20fd0>
   339a0:	cmp	r0, #2
   339a4:	blt	33a94 <__assert_fail@plt+0x20fe4>
   339a8:	add	r0, sp, #32
   339ac:	bl	389a0 <__assert_fail@plt+0x25ef0>
   339b0:	cmp	r0, #0
   339b4:	bne	33e20 <__assert_fail@plt+0x21370>
   339b8:	ldr	r1, [sp, #28]
   339bc:	add	r5, sp, #32
   339c0:	b	339dc <__assert_fail@plt+0x20f2c>
   339c4:	mov	r0, r5
   339c8:	str	r4, [sp, #68]	; 0x44
   339cc:	bl	389a0 <__assert_fail@plt+0x25ef0>
   339d0:	ldr	r1, [sp, #28]
   339d4:	cmp	r0, #0
   339d8:	bne	33e20 <__assert_fail@plt+0x21370>
   339dc:	ldr	r0, [sp, #64]	; 0x40
   339e0:	cmp	r0, r9
   339e4:	bge	33b70 <__assert_fail@plt+0x210c0>
   339e8:	ldr	r0, [r1, #92]	; 0x5c
   339ec:	ldr	r2, [sp, #60]	; 0x3c
   339f0:	ldr	r1, [sp, #68]	; 0x44
   339f4:	add	r0, r0, r2
   339f8:	cmp	r1, r0
   339fc:	bgt	33b70 <__assert_fail@plt+0x210c0>
   33a00:	ldr	r0, [sp, #112]	; 0x70
   33a04:	lsl	r4, r1, #1
   33a08:	cmp	r0, #2
   33a0c:	blt	33a58 <__assert_fail@plt+0x20fa8>
   33a10:	mov	r6, #12
   33a14:	cmn	r4, #-1073741823	; 0xc0000001
   33a18:	bhi	33e2c <__assert_fail@plt+0x2137c>
   33a1c:	ldr	r0, [sp, #40]	; 0x28
   33a20:	lsl	r8, r1, #3
   33a24:	mov	r1, r8
   33a28:	bl	33500 <__assert_fail@plt+0x20a50>
   33a2c:	cmp	r0, #0
   33a30:	beq	33e2c <__assert_fail@plt+0x2137c>
   33a34:	str	r0, [sp, #40]	; 0x28
   33a38:	ldr	r0, [sp, #44]	; 0x2c
   33a3c:	cmp	r0, #0
   33a40:	beq	33a58 <__assert_fail@plt+0x20fa8>
   33a44:	mov	r1, r8
   33a48:	bl	33500 <__assert_fail@plt+0x20a50>
   33a4c:	cmp	r0, #0
   33a50:	beq	33e2c <__assert_fail@plt+0x2137c>
   33a54:	str	r0, [sp, #44]	; 0x2c
   33a58:	ldrb	r0, [sp, #107]	; 0x6b
   33a5c:	cmp	r0, #0
   33a60:	beq	339c4 <__assert_fail@plt+0x20f14>
   33a64:	ldr	r0, [sp, #36]	; 0x24
   33a68:	mov	r1, r4
   33a6c:	bl	33500 <__assert_fail@plt+0x20a50>
   33a70:	cmp	r0, #0
   33a74:	beq	33e28 <__assert_fail@plt+0x21378>
   33a78:	str	r0, [sp, #36]	; 0x24
   33a7c:	b	339c4 <__assert_fail@plt+0x20f14>
   33a80:	cmp	r0, #2
   33a84:	blt	33af8 <__assert_fail@plt+0x21048>
   33a88:	add	r0, sp, #32
   33a8c:	bl	392a0 <__assert_fail@plt+0x267f0>
   33a90:	b	33b70 <__assert_fail@plt+0x210c0>
   33a94:	cmp	r8, r9
   33a98:	movgt	r8, r9
   33a9c:	cmp	r8, #1
   33aa0:	blt	33b64 <__assert_fail@plt+0x210b4>
   33aa4:	mov	r5, #0
   33aa8:	bl	12750 <__ctype_toupper_loc@plt>
   33aac:	mov	r1, #0
   33ab0:	add	r2, r7, r5
   33ab4:	cmp	r4, #0
   33ab8:	ldrb	r2, [r2, r1]
   33abc:	bne	33af0 <__assert_fail@plt+0x21040>
   33ac0:	ldr	r3, [r0]
   33ac4:	ldr	r2, [r3, r2, lsl #2]
   33ac8:	ldr	r3, [sp, #36]	; 0x24
   33acc:	strb	r2, [r3, r1]
   33ad0:	add	r2, r1, #1
   33ad4:	cmp	r2, r8
   33ad8:	bge	33b5c <__assert_fail@plt+0x210ac>
   33adc:	ldr	r7, [sp, #32]
   33ae0:	ldr	r5, [sp, #56]	; 0x38
   33ae4:	ldr	r4, [sp, #96]	; 0x60
   33ae8:	mov	r1, r2
   33aec:	b	33ab0 <__assert_fail@plt+0x21000>
   33af0:	ldrb	r2, [r4, r2]
   33af4:	b	33ac0 <__assert_fail@plt+0x21010>
   33af8:	cmp	r4, #0
   33afc:	beq	33d80 <__assert_fail@plt+0x212d0>
   33b00:	cmp	r8, r9
   33b04:	movgt	r8, r9
   33b08:	cmp	r8, #1
   33b0c:	blt	33b64 <__assert_fail@plt+0x210b4>
   33b10:	ldrb	r0, [r7]
   33b14:	cmp	r8, #1
   33b18:	ldrb	r0, [r4, r0]
   33b1c:	strb	r0, [r6]
   33b20:	mov	r0, #1
   33b24:	beq	33b68 <__assert_fail@plt+0x210b8>
   33b28:	mov	r0, #1
   33b2c:	ldr	r1, [sp, #32]
   33b30:	ldr	r3, [sp, #56]	; 0x38
   33b34:	ldr	r7, [sp, #96]	; 0x60
   33b38:	ldr	r2, [sp, #36]	; 0x24
   33b3c:	add	r1, r1, r3
   33b40:	ldrb	r1, [r1, r0]
   33b44:	ldrb	r1, [r7, r1]
   33b48:	strb	r1, [r2, r0]
   33b4c:	add	r0, r0, #1
   33b50:	cmp	r0, r8
   33b54:	blt	33b2c <__assert_fail@plt+0x2107c>
   33b58:	b	33b68 <__assert_fail@plt+0x210b8>
   33b5c:	add	r0, r1, #1
   33b60:	b	33b68 <__assert_fail@plt+0x210b8>
   33b64:	mov	r0, #0
   33b68:	str	r0, [sp, #64]	; 0x40
   33b6c:	str	r0, [sp, #60]	; 0x3c
   33b70:	mov	r5, #0
   33b74:	ldr	r4, [sp, #24]
   33b78:	sub	r8, fp, #48	; 0x30
   33b7c:	add	r6, sp, #32
   33b80:	str	r5, [fp, #-52]	; 0xffffffcc
   33b84:	str	r5, [sl, #24]
   33b88:	mov	r0, r8
   33b8c:	mov	r1, r6
   33b90:	ldr	r7, [sl]
   33b94:	orr	r2, r4, #8388608	; 0x800000
   33b98:	str	r4, [r7, #128]	; 0x80
   33b9c:	bl	39710 <__assert_fail@plt+0x26c60>
   33ba0:	ldr	r1, [sp, #72]	; 0x48
   33ba4:	mov	r2, r8
   33ba8:	mov	r3, r4
   33bac:	str	r5, [sp]
   33bb0:	add	r0, r1, r0
   33bb4:	mov	r1, sl
   33bb8:	str	r0, [sp, #72]	; 0x48
   33bbc:	sub	r0, fp, #52	; 0x34
   33bc0:	str	r0, [sp, #4]
   33bc4:	mov	r0, r6
   33bc8:	bl	394a4 <__assert_fail@plt+0x269f4>
   33bcc:	ldr	r5, [sp, #28]
   33bd0:	mov	r4, r0
   33bd4:	cmp	r0, #0
   33bd8:	bne	33be8 <__assert_fail@plt+0x21138>
   33bdc:	ldr	r0, [fp, #-52]	; 0xffffffcc
   33be0:	cmp	r0, #0
   33be4:	bne	33eb8 <__assert_fail@plt+0x21408>
   33be8:	ldr	r1, [r7, #64]	; 0x40
   33bec:	cmp	r1, #31
   33bf0:	beq	33e50 <__assert_fail@plt+0x213a0>
   33bf4:	ldr	r0, [r7, #56]	; 0x38
   33bf8:	add	r0, r0, r1, lsl #5
   33bfc:	add	r2, r1, #1
   33c00:	vmov.i32	q8, #0	; 0x00000000
   33c04:	mov	r1, #0
   33c08:	str	r2, [r7, #64]	; 0x40
   33c0c:	mov	r2, #2
   33c10:	add	r6, r0, #4
   33c14:	str	r1, [r0, #20]
   33c18:	str	r1, [r0, #24]
   33c1c:	str	r2, [r0, #28]
   33c20:	mov	r0, #28
   33c24:	mov	r1, r6
   33c28:	vst1.32	{d16-d17}, [r1], r0
   33c2c:	mvn	r0, #0
   33c30:	str	r0, [r1]
   33c34:	cmp	r4, #0
   33c38:	mov	r0, r6
   33c3c:	beq	33c90 <__assert_fail@plt+0x211e0>
   33c40:	ldr	r1, [r7, #64]	; 0x40
   33c44:	cmp	r1, #31
   33c48:	beq	33e84 <__assert_fail@plt+0x213d4>
   33c4c:	ldr	r0, [r7, #56]	; 0x38
   33c50:	add	r0, r0, r1, lsl #5
   33c54:	add	r2, r1, #1
   33c58:	mov	r1, #0
   33c5c:	cmp	r6, #0
   33c60:	mvn	r3, #0
   33c64:	str	r2, [r7, #64]	; 0x40
   33c68:	mov	r2, #16
   33c6c:	str	r1, [r0, #4]!
   33c70:	add	ip, r0, #20
   33c74:	stmib	r0, {r4, r6}
   33c78:	str	r1, [r0, #12]
   33c7c:	str	r1, [r0, #16]
   33c80:	stm	ip, {r1, r2, r3}
   33c84:	str	r0, [r4]
   33c88:	beq	33eb0 <__assert_fail@plt+0x21400>
   33c8c:	str	r0, [r6]
   33c90:	cmp	r6, #0
   33c94:	cmpne	r0, #0
   33c98:	beq	33eb0 <__assert_fail@plt+0x21400>
   33c9c:	str	r0, [r5, #52]	; 0x34
   33ca0:	ldr	r9, [sl]
   33ca4:	ldr	r0, [r9, #4]
   33ca8:	lsl	r0, r0, #2
   33cac:	bl	327ac <__assert_fail@plt+0x1fcfc>
   33cb0:	str	r0, [r9, #12]
   33cb4:	ldr	r0, [r9, #4]
   33cb8:	lsl	r0, r0, #2
   33cbc:	bl	327ac <__assert_fail@plt+0x1fcfc>
   33cc0:	str	r0, [r9, #16]
   33cc4:	ldr	r0, [r9, #4]
   33cc8:	add	r0, r0, r0, lsl #1
   33ccc:	lsl	r0, r0, #2
   33cd0:	bl	327ac <__assert_fail@plt+0x1fcfc>
   33cd4:	str	r0, [r9, #20]
   33cd8:	ldr	r0, [r9, #4]
   33cdc:	add	r0, r0, r0, lsl #1
   33ce0:	lsl	r0, r0, #2
   33ce4:	bl	327ac <__assert_fail@plt+0x1fcfc>
   33ce8:	str	r0, [r9, #24]
   33cec:	ldr	r1, [r9, #12]
   33cf0:	cmp	r1, #0
   33cf4:	ldrne	r1, [r9, #16]
   33cf8:	cmpne	r1, #0
   33cfc:	beq	33d10 <__assert_fail@plt+0x21260>
   33d00:	cmp	r0, #0
   33d04:	ldrne	r0, [r9, #20]
   33d08:	cmpne	r0, #0
   33d0c:	bne	33d1c <__assert_fail@plt+0x2126c>
   33d10:	mov	r0, #12
   33d14:	str	r0, [fp, #-52]	; 0xffffffcc
   33d18:	b	33ec0 <__assert_fail@plt+0x21410>
   33d1c:	ldr	r0, [sl, #24]
   33d20:	lsl	r0, r0, #2
   33d24:	bl	327ac <__assert_fail@plt+0x1fcfc>
   33d28:	cmp	r0, #0
   33d2c:	str	r0, [r9, #132]	; 0x84
   33d30:	beq	34144 <__assert_fail@plt+0x21694>
   33d34:	ldr	r1, [sl, #24]
   33d38:	cmp	r1, #0
   33d3c:	beq	33f78 <__assert_fail@plt+0x214c8>
   33d40:	mov	r2, #0
   33d44:	cmp	r1, #4
   33d48:	bcc	33f68 <__assert_fail@plt+0x214b8>
   33d4c:	bic	r2, r1, #3
   33d50:	mov	r3, #1
   33d54:	add	r7, pc, #964	; 0x3c4
   33d58:	sub	r6, r2, #4
   33d5c:	add	r3, r3, r6, lsr #2
   33d60:	cmp	r6, #12
   33d64:	and	ip, r3, #3
   33d68:	bcs	33d8c <__assert_fail@plt+0x212dc>
   33d6c:	vld1.64	{d16-d17}, [r7 :128]
   33d70:	mov	r7, #0
   33d74:	cmp	ip, #0
   33d78:	bne	33dfc <__assert_fail@plt+0x2134c>
   33d7c:	b	33f70 <__assert_fail@plt+0x214c0>
   33d80:	str	r8, [sp, #64]	; 0x40
   33d84:	str	r8, [sp, #60]	; 0x3c
   33d88:	b	33b70 <__assert_fail@plt+0x210c0>
   33d8c:	sub	r6, r3, ip
   33d90:	add	r3, pc, #904	; 0x388
   33d94:	vmov.i32	q9, #12	; 0x0000000c
   33d98:	vmov.i32	q10, #8	; 0x00000008
   33d9c:	vmov.i32	q11, #4	; 0x00000004
   33da0:	vmov.i32	q12, #16	; 0x00000010
   33da4:	mov	r7, #0
   33da8:	mov	lr, #64	; 0x40
   33dac:	mov	r4, r0
   33db0:	vld1.64	{d16-d17}, [r3 :128]
   33db4:	mov	r3, r0
   33db8:	vadd.i32	q13, q8, q9
   33dbc:	add	r5, r3, #48	; 0x30
   33dc0:	vadd.i32	q14, q8, q10
   33dc4:	vadd.i32	q15, q8, q11
   33dc8:	subs	r6, r6, #4
   33dcc:	add	r7, r7, #16
   33dd0:	vst1.32	{d26-d27}, [r5]
   33dd4:	vst1.32	{d16-d17}, [r4], lr
   33dd8:	vadd.i32	q8, q8, q12
   33ddc:	add	r5, r3, #32
   33de0:	add	r3, r3, #16
   33de4:	vst1.32	{d28-d29}, [r5]
   33de8:	vst1.32	{d30-d31}, [r3]
   33dec:	mov	r3, r4
   33df0:	bne	33db8 <__assert_fail@plt+0x21308>
   33df4:	cmp	ip, #0
   33df8:	beq	33f70 <__assert_fail@plt+0x214c0>
   33dfc:	vmov.i32	q9, #4	; 0x00000004
   33e00:	add	r3, r0, r7, lsl #2
   33e04:	rsb	r7, ip, #0
   33e08:	vadd.i32	q10, q8, q9
   33e0c:	vst1.32	{d16-d17}, [r3]!
   33e10:	adds	r7, r7, #1
   33e14:	vorr	q8, q10, q10
   33e18:	bcc	33e08 <__assert_fail@plt+0x21358>
   33e1c:	b	33f70 <__assert_fail@plt+0x214c0>
   33e20:	mov	r6, r0
   33e24:	b	33e2c <__assert_fail@plt+0x2137c>
   33e28:	mov	r6, #12
   33e2c:	str	r6, [fp, #-52]	; 0xffffffcc
   33e30:	b	33ec0 <__assert_fail@plt+0x21410>
   33e34:	mov	r1, #160	; 0xa0
   33e38:	mov	r4, #160	; 0xa0
   33e3c:	bl	33500 <__assert_fail@plt+0x20a50>
   33e40:	cmp	r0, #0
   33e44:	beq	33e7c <__assert_fail@plt+0x213cc>
   33e48:	stm	sl, {r0, r4}
   33e4c:	b	33658 <__assert_fail@plt+0x20ba8>
   33e50:	mov	r0, #996	; 0x3e4
   33e54:	bl	327ac <__assert_fail@plt+0x1fcfc>
   33e58:	cmp	r0, #0
   33e5c:	beq	33f5c <__assert_fail@plt+0x214ac>
   33e60:	ldr	r1, [r7, #56]	; 0x38
   33e64:	ldr	r5, [sp, #28]
   33e68:	str	r1, [r0]
   33e6c:	mov	r1, #0
   33e70:	str	r1, [r7, #64]	; 0x40
   33e74:	str	r0, [r7, #56]	; 0x38
   33e78:	b	33bf8 <__assert_fail@plt+0x21148>
   33e7c:	mov	r4, #12
   33e80:	b	34a58 <__assert_fail@plt+0x21fa8>
   33e84:	mov	r0, #996	; 0x3e4
   33e88:	bl	327ac <__assert_fail@plt+0x1fcfc>
   33e8c:	ldr	r5, [sp, #28]
   33e90:	cmp	r0, #0
   33e94:	beq	33eb0 <__assert_fail@plt+0x21400>
   33e98:	ldr	r1, [r7, #56]	; 0x38
   33e9c:	str	r1, [r0]
   33ea0:	mov	r1, #0
   33ea4:	str	r1, [r7, #64]	; 0x40
   33ea8:	str	r0, [r7, #56]	; 0x38
   33eac:	b	33c50 <__assert_fail@plt+0x211a0>
   33eb0:	mov	r0, #12
   33eb4:	str	r0, [fp, #-52]	; 0xffffffcc
   33eb8:	mov	r0, #0
   33ebc:	str	r0, [r5, #52]	; 0x34
   33ec0:	ldr	r4, [sl]
   33ec4:	ldr	r0, [r4, #56]	; 0x38
   33ec8:	cmp	r0, #0
   33ecc:	beq	33ee4 <__assert_fail@plt+0x21434>
   33ed0:	ldr	r5, [r0]
   33ed4:	bl	30174 <__assert_fail@plt+0x1d6c4>
   33ed8:	cmp	r5, #0
   33edc:	mov	r0, r5
   33ee0:	bne	33ed0 <__assert_fail@plt+0x21420>
   33ee4:	mov	r0, #31
   33ee8:	mov	r5, #0
   33eec:	str	r0, [r4, #64]	; 0x40
   33ef0:	str	r5, [r4, #52]	; 0x34
   33ef4:	str	r5, [r4, #56]	; 0x38
   33ef8:	ldr	r0, [r4, #16]
   33efc:	bl	30174 <__assert_fail@plt+0x1d6c4>
   33f00:	str	r5, [r4, #16]
   33f04:	ldr	r0, [sp, #40]	; 0x28
   33f08:	bl	30174 <__assert_fail@plt+0x1d6c4>
   33f0c:	ldr	r0, [sp, #44]	; 0x2c
   33f10:	bl	30174 <__assert_fail@plt+0x1d6c4>
   33f14:	ldrb	r0, [sp, #107]	; 0x6b
   33f18:	cmp	r0, #0
   33f1c:	beq	33f28 <__assert_fail@plt+0x21478>
   33f20:	ldr	r0, [sp, #36]	; 0x24
   33f24:	bl	30174 <__assert_fail@plt+0x1d6c4>
   33f28:	ldr	r0, [sp, #8]
   33f2c:	cmp	r0, #0
   33f30:	beq	33f40 <__assert_fail@plt+0x21490>
   33f34:	ldr	r0, [sp, #28]
   33f38:	add	r0, r0, #136	; 0x88
   33f3c:	bl	1242c <pthread_mutex_destroy@plt>
   33f40:	ldr	r0, [sp, #28]
   33f44:	bl	351bc <__assert_fail@plt+0x2270c>
   33f48:	mov	r0, #0
   33f4c:	str	r0, [sl]
   33f50:	str	r0, [sl, #4]
   33f54:	ldr	r4, [fp, #-52]	; 0xffffffcc
   33f58:	b	34a58 <__assert_fail@plt+0x21fa8>
   33f5c:	ldr	r5, [sp, #28]
   33f60:	mov	r6, #0
   33f64:	b	33c34 <__assert_fail@plt+0x21184>
   33f68:	str	r2, [r0, r2, lsl #2]
   33f6c:	add	r2, r2, #1
   33f70:	cmp	r1, r2
   33f74:	bne	33f68 <__assert_fail@plt+0x214b8>
   33f78:	ldr	r2, [r9, #52]	; 0x34
   33f7c:	ldrb	r1, [r2, #24]
   33f80:	cmp	r1, #17
   33f84:	beq	33fb0 <__assert_fail@plt+0x21500>
   33f88:	cmp	r1, #4
   33f8c:	bne	34000 <__assert_fail@plt+0x21550>
   33f90:	ldr	r1, [r2, #20]
   33f94:	mov	r3, #1
   33f98:	ldr	r0, [r0, r1, lsl #2]
   33f9c:	str	r0, [r2, #20]
   33fa0:	ldr	r1, [r9, #80]	; 0x50
   33fa4:	orr	r0, r1, r3, lsl r0
   33fa8:	str	r0, [r9, #80]	; 0x50
   33fac:	b	34000 <__assert_fail@plt+0x21550>
   33fb0:	ldr	r1, [r2, #4]
   33fb4:	cmp	r1, #0
   33fb8:	beq	34000 <__assert_fail@plt+0x21550>
   33fbc:	ldrb	r3, [r1, #24]
   33fc0:	cmp	r3, #17
   33fc4:	bne	34000 <__assert_fail@plt+0x21550>
   33fc8:	ldr	r3, [r1, #4]
   33fcc:	ldr	r1, [r1, #20]
   33fd0:	cmp	r3, #0
   33fd4:	str	r3, [r2, #4]
   33fd8:	strne	r2, [r3]
   33fdc:	cmp	r1, #31
   33fe0:	ldr	r3, [r2, #20]
   33fe4:	ldr	r3, [r0, r3, lsl #2]
   33fe8:	str	r3, [r0, r1, lsl #2]
   33fec:	bgt	34000 <__assert_fail@plt+0x21550>
   33ff0:	ldr	r0, [r9, #80]	; 0x50
   33ff4:	mov	r3, #1
   33ff8:	bic	r0, r0, r3, lsl r1
   33ffc:	b	33fa8 <__assert_fail@plt+0x214f8>
   34000:	mov	r0, #1
   34004:	ldr	r7, [r2, #4]
   34008:	cmp	r7, #0
   3400c:	bne	3403c <__assert_fail@plt+0x2158c>
   34010:	mov	r3, #0
   34014:	ldr	r7, [r2, #8]
   34018:	mov	r1, r2
   3401c:	cmp	r7, r3
   34020:	cmpne	r7, #0
   34024:	bne	3403c <__assert_fail@plt+0x2158c>
   34028:	ldr	r2, [r1]
   3402c:	mov	r3, r1
   34030:	cmp	r2, #0
   34034:	bne	34014 <__assert_fail@plt+0x21564>
   34038:	b	340e0 <__assert_fail@plt+0x21630>
   3403c:	ldrb	r1, [r7, #24]
   34040:	cmp	r1, #17
   34044:	beq	34084 <__assert_fail@plt+0x215d4>
   34048:	cmp	r1, #4
   3404c:	mov	r2, r7
   34050:	bne	34004 <__assert_fail@plt+0x21554>
   34054:	ldr	r1, [r9, #132]	; 0x84
   34058:	mov	r2, r7
   3405c:	cmp	r1, #0
   34060:	beq	34004 <__assert_fail@plt+0x21554>
   34064:	ldr	r2, [r7, #20]
   34068:	ldr	r1, [r1, r2, lsl #2]
   3406c:	str	r1, [r7, #20]
   34070:	ldr	r2, [r9, #80]	; 0x50
   34074:	orr	r1, r2, r0, lsl r1
   34078:	str	r1, [r9, #80]	; 0x50
   3407c:	mov	r2, r7
   34080:	b	34004 <__assert_fail@plt+0x21554>
   34084:	ldr	r3, [r7, #4]
   34088:	mov	r2, r7
   3408c:	cmp	r3, #0
   34090:	beq	34004 <__assert_fail@plt+0x21554>
   34094:	ldrb	r1, [r3, #24]
   34098:	mov	r2, r7
   3409c:	cmp	r1, #17
   340a0:	bne	34004 <__assert_fail@plt+0x21554>
   340a4:	ldr	r1, [r3, #4]
   340a8:	ldr	r3, [r3, #20]
   340ac:	cmp	r1, #0
   340b0:	str	r1, [r7, #4]
   340b4:	strne	r7, [r1]
   340b8:	cmp	r3, #31
   340bc:	ldr	r1, [r7, #20]
   340c0:	ldr	r2, [r9, #132]	; 0x84
   340c4:	ldr	r1, [r2, r1, lsl #2]
   340c8:	str	r1, [r2, r3, lsl #2]
   340cc:	mov	r2, r7
   340d0:	bgt	34004 <__assert_fail@plt+0x21554>
   340d4:	ldr	r1, [r9, #80]	; 0x50
   340d8:	bic	r1, r1, r0, lsl r3
   340dc:	b	34078 <__assert_fail@plt+0x215c8>
   340e0:	ldr	r1, [sl, #24]
   340e4:	cmp	r1, #0
   340e8:	beq	34110 <__assert_fail@plt+0x21660>
   340ec:	ldr	r0, [r9, #132]	; 0x84
   340f0:	mov	r2, #0
   340f4:	ldr	r3, [r0, r2, lsl #2]
   340f8:	cmp	r2, r3
   340fc:	bne	34130 <__assert_fail@plt+0x21680>
   34100:	add	r2, r2, #1
   34104:	cmp	r1, r2
   34108:	bne	340f4 <__assert_fail@plt+0x21644>
   3410c:	b	34138 <__assert_fail@plt+0x21688>
   34110:	ldr	r0, [r9, #132]	; 0x84
   34114:	b	34138 <__assert_fail@plt+0x21688>
   34118:	nop	{0}
   3411c:	nop	{0}
   34120:	andeq	r0, r0, r0
   34124:	andeq	r0, r0, r1
   34128:	andeq	r0, r0, r2
   3412c:	andeq	r0, r0, r3
   34130:	cmp	r1, r2
   34134:	bne	34144 <__assert_fail@plt+0x21694>
   34138:	bl	30174 <__assert_fail@plt+0x1d6c4>
   3413c:	mov	r0, #0
   34140:	str	r0, [r9, #132]	; 0x84
   34144:	ldr	r0, [r9, #52]	; 0x34
   34148:	mov	r7, #0
   3414c:	sub	r8, fp, #48	; 0x30
   34150:	mov	r4, r0
   34154:	ldr	r0, [r0, #4]
   34158:	cmp	r0, #0
   3415c:	bne	34150 <__assert_fail@plt+0x216a0>
   34160:	ldr	r0, [r4, #8]
   34164:	cmp	r0, #0
   34168:	bne	34150 <__assert_fail@plt+0x216a0>
   3416c:	mov	r2, #0
   34170:	cmp	r2, #0
   34174:	str	r7, [fp, #-48]	; 0xffffffd0
   34178:	beq	341a0 <__assert_fail@plt+0x216f0>
   3417c:	ldrb	r0, [r2, #24]
   34180:	cmp	r0, #17
   34184:	bne	341a0 <__assert_fail@plt+0x216f0>
   34188:	mov	r0, r8
   3418c:	mov	r1, sl
   34190:	bl	3dabc <__assert_fail@plt+0x2b00c>
   34194:	cmp	r0, #0
   34198:	str	r0, [r4, #4]
   3419c:	strne	r4, [r0]
   341a0:	ldr	r2, [r4, #8]
   341a4:	cmp	r2, #0
   341a8:	beq	341d0 <__assert_fail@plt+0x21720>
   341ac:	ldrb	r0, [r2, #24]
   341b0:	cmp	r0, #17
   341b4:	bne	341d0 <__assert_fail@plt+0x21720>
   341b8:	mov	r0, r8
   341bc:	mov	r1, sl
   341c0:	bl	3dabc <__assert_fail@plt+0x2b00c>
   341c4:	cmp	r0, #0
   341c8:	str	r0, [r4, #8]
   341cc:	strne	r4, [r0]
   341d0:	ldr	r0, [fp, #-48]	; 0xffffffd0
   341d4:	cmp	r0, #0
   341d8:	bne	33d14 <__assert_fail@plt+0x21264>
   341dc:	ldr	r1, [r4]
   341e0:	cmp	r1, #0
   341e4:	beq	34204 <__assert_fail@plt+0x21754>
   341e8:	ldr	r0, [r1, #8]
   341ec:	cmp	r0, r4
   341f0:	cmpne	r0, #0
   341f4:	bne	34150 <__assert_fail@plt+0x216a0>
   341f8:	ldr	r2, [r1, #4]
   341fc:	mov	r4, r1
   34200:	b	34170 <__assert_fail@plt+0x216c0>
   34204:	ldr	r0, [r9, #52]	; 0x34
   34208:	mov	r4, r0
   3420c:	ldr	r0, [r0, #4]
   34210:	cmp	r0, #0
   34214:	bne	34208 <__assert_fail@plt+0x21758>
   34218:	ldr	r0, [r4, #8]
   3421c:	cmp	r0, #0
   34220:	bne	34208 <__assert_fail@plt+0x21758>
   34224:	ldr	r2, [r4, #24]
   34228:	uxtb	r0, r2
   3422c:	cmp	r0, #16
   34230:	bne	3424c <__assert_fail@plt+0x2179c>
   34234:	ldr	r0, [r4, #4]
   34238:	ldr	r1, [r0, #12]
   3423c:	str	r1, [r4, #12]
   34240:	ldr	r0, [r0, #28]
   34244:	str	r0, [r4, #28]
   34248:	b	3428c <__assert_fail@plt+0x217dc>
   3424c:	str	r4, [r4, #12]
   34250:	mov	r0, r9
   34254:	ldr	r1, [r4, #20]
   34258:	bl	3dd78 <__assert_fail@plt+0x2b2c8>
   3425c:	cmn	r0, #1
   34260:	str	r0, [r4, #28]
   34264:	beq	33d10 <__assert_fail@plt+0x21260>
   34268:	ldrb	r1, [r4, #24]
   3426c:	cmp	r1, #12
   34270:	bne	3428c <__assert_fail@plt+0x217dc>
   34274:	ldr	r1, [r9]
   34278:	ldr	r2, [r4, #20]
   3427c:	add	r0, r1, r0, lsl #3
   34280:	ldr	r1, [r0, #4]
   34284:	bfi	r1, r2, #8, #10
   34288:	str	r1, [r0, #4]
   3428c:	ldr	r1, [r4]
   34290:	cmp	r1, #0
   34294:	beq	342b8 <__assert_fail@plt+0x21808>
   34298:	ldr	r0, [r1, #8]
   3429c:	cmp	r0, r4
   342a0:	mov	r4, r1
   342a4:	beq	34224 <__assert_fail@plt+0x21774>
   342a8:	cmp	r0, #0
   342ac:	mov	r4, r1
   342b0:	beq	34224 <__assert_fail@plt+0x21774>
   342b4:	b	34208 <__assert_fail@plt+0x21758>
   342b8:	ldr	r4, [r9, #52]	; 0x34
   342bc:	ldrb	r0, [r4, #24]
   342c0:	cmp	r0, #16
   342c4:	beq	342dc <__assert_fail@plt+0x2182c>
   342c8:	cmp	r0, #11
   342cc:	bne	342ec <__assert_fail@plt+0x2183c>
   342d0:	ldr	r0, [r4, #4]
   342d4:	str	r4, [r0, #16]
   342d8:	b	34310 <__assert_fail@plt+0x21860>
   342dc:	ldmib	r4, {r0, r1}
   342e0:	ldr	r2, [r1, #12]
   342e4:	str	r2, [r0, #16]
   342e8:	b	34308 <__assert_fail@plt+0x21858>
   342ec:	ldr	r0, [r4, #4]
   342f0:	cmp	r0, #0
   342f4:	ldrne	r1, [r4, #16]
   342f8:	strne	r1, [r0, #16]
   342fc:	ldr	r1, [r4, #8]
   34300:	cmp	r1, #0
   34304:	beq	34310 <__assert_fail@plt+0x21860>
   34308:	ldr	r2, [r4, #16]
   3430c:	str	r2, [r1, #16]
   34310:	mov	r1, r4
   34314:	cmp	r0, #0
   34318:	bne	34330 <__assert_fail@plt+0x21880>
   3431c:	b	34384 <__assert_fail@plt+0x218d4>
   34320:	ldr	r0, [r1, #4]
   34324:	str	r1, [r0, #16]
   34328:	cmp	r0, #0
   3432c:	beq	34384 <__assert_fail@plt+0x218d4>
   34330:	mov	r1, r0
   34334:	ldrb	r0, [r0, #24]
   34338:	cmp	r0, #16
   3433c:	beq	34368 <__assert_fail@plt+0x218b8>
   34340:	cmp	r0, #11
   34344:	beq	34320 <__assert_fail@plt+0x21870>
   34348:	ldr	r0, [r1, #4]
   3434c:	cmp	r0, #0
   34350:	ldrne	r2, [r1, #16]
   34354:	strne	r2, [r0, #16]
   34358:	ldr	r2, [r1, #8]
   3435c:	cmp	r2, #0
   34360:	beq	34328 <__assert_fail@plt+0x21878>
   34364:	b	34374 <__assert_fail@plt+0x218c4>
   34368:	ldmib	r1, {r0, r2}
   3436c:	ldr	r3, [r2, #12]
   34370:	str	r3, [r0, #16]
   34374:	ldr	r3, [r1, #16]
   34378:	str	r3, [r2, #16]
   3437c:	cmp	r0, #0
   34380:	bne	34330 <__assert_fail@plt+0x21880>
   34384:	mov	r3, #0
   34388:	ldr	r0, [r1, #8]
   3438c:	mov	r2, r1
   34390:	cmp	r0, r3
   34394:	cmpne	r0, #0
   34398:	bne	34330 <__assert_fail@plt+0x21880>
   3439c:	ldr	r1, [r2]
   343a0:	mov	r3, r2
   343a4:	cmp	r1, #0
   343a8:	bne	34388 <__assert_fail@plt+0x218d8>
   343ac:	mov	r0, r9
   343b0:	mov	r1, r4
   343b4:	bl	3d920 <__assert_fail@plt+0x2ae70>
   343b8:	cmp	r0, #0
   343bc:	beq	343dc <__assert_fail@plt+0x2192c>
   343c0:	b	33d14 <__assert_fail@plt+0x21264>
   343c4:	mov	r0, r9
   343c8:	mov	r1, r7
   343cc:	bl	3d920 <__assert_fail@plt+0x2ae70>
   343d0:	cmp	r0, #0
   343d4:	mov	r4, r7
   343d8:	bne	33d14 <__assert_fail@plt+0x21264>
   343dc:	ldr	r7, [r4, #4]
   343e0:	cmp	r7, #0
   343e4:	bne	343c4 <__assert_fail@plt+0x21914>
   343e8:	mov	r1, #0
   343ec:	ldr	r7, [r4, #8]
   343f0:	mov	r0, r4
   343f4:	cmp	r7, r1
   343f8:	cmpne	r7, #0
   343fc:	bne	343c4 <__assert_fail@plt+0x21914>
   34400:	ldr	r4, [r0]
   34404:	mov	r1, r0
   34408:	cmp	r4, #0
   3440c:	bne	343ec <__assert_fail@plt+0x2193c>
   34410:	mov	r5, #0
   34414:	sub	r4, fp, #48	; 0x30
   34418:	mov	r7, #0
   3441c:	b	3444c <__assert_fail@plt+0x2199c>
   34420:	mov	r1, r5
   34424:	ldr	r2, [r9, #8]
   34428:	add	r0, r7, #1
   3442c:	subs	r3, r0, r2
   34430:	mov	r7, r3
   34434:	movwne	r3, #1
   34438:	movne	r7, r0
   3443c:	tst	r1, #1
   34440:	and	r5, r1, r3
   34444:	cmpeq	r0, r2
   34448:	beq	344a8 <__assert_fail@plt+0x219f8>
   3444c:	ldr	r0, [r9, #24]
   34450:	add	r6, r7, r7, lsl #1
   34454:	add	r0, r0, r6, lsl #2
   34458:	ldr	r0, [r0, #4]
   3445c:	cmp	r0, #0
   34460:	bne	34420 <__assert_fail@plt+0x21970>
   34464:	mov	r0, r4
   34468:	mov	r1, r9
   3446c:	mov	r2, r7
   34470:	mov	r3, #1
   34474:	bl	3df48 <__assert_fail@plt+0x2b498>
   34478:	cmp	r0, #0
   3447c:	bne	33d14 <__assert_fail@plt+0x21264>
   34480:	ldr	r0, [r9, #24]
   34484:	mov	r1, r5
   34488:	add	r0, r0, r6, lsl #2
   3448c:	ldr	r0, [r0, #4]
   34490:	cmp	r0, #0
   34494:	bne	34424 <__assert_fail@plt+0x21974>
   34498:	ldr	r0, [fp, #-40]	; 0xffffffd8
   3449c:	bl	30174 <__assert_fail@plt+0x1d6c4>
   344a0:	mov	r1, #1
   344a4:	b	34424 <__assert_fail@plt+0x21974>
   344a8:	ldrb	r1, [sl, #28]
   344ac:	str	sl, [sp, #12]
   344b0:	tst	r1, #16
   344b4:	bne	344d4 <__assert_fail@plt+0x21a24>
   344b8:	ldr	r1, [sp, #12]
   344bc:	ldr	r1, [r1, #24]
   344c0:	cmp	r1, #0
   344c4:	beq	344d4 <__assert_fail@plt+0x21a24>
   344c8:	ldrb	r1, [r9, #88]	; 0x58
   344cc:	tst	r1, #1
   344d0:	bne	344e0 <__assert_fail@plt+0x21a30>
   344d4:	ldr	r1, [r9, #76]	; 0x4c
   344d8:	cmp	r1, #0
   344dc:	beq	34628 <__assert_fail@plt+0x21b78>
   344e0:	add	r0, r0, r0, lsl #1
   344e4:	lsl	r0, r0, #2
   344e8:	bl	327ac <__assert_fail@plt+0x1fcfc>
   344ec:	cmp	r0, #0
   344f0:	str	r0, [r9, #28]
   344f4:	beq	34a64 <__assert_fail@plt+0x21fb4>
   344f8:	ldr	r1, [r9, #8]
   344fc:	cmp	r1, #0
   34500:	beq	34628 <__assert_fail@plt+0x21b78>
   34504:	mov	r1, #0
   34508:	str	r1, [r0]
   3450c:	str	r1, [r0, #4]
   34510:	str	r1, [r0, #8]
   34514:	ldr	r0, [r9, #8]
   34518:	cmp	r0, #2
   3451c:	bcc	3454c <__assert_fail@plt+0x21a9c>
   34520:	mov	r2, #1
   34524:	mov	r3, #12
   34528:	ldr	r0, [r9, #28]
   3452c:	add	r2, r2, #1
   34530:	str	r1, [r0, r3]!
   34534:	add	r3, r3, #12
   34538:	str	r1, [r0, #4]
   3453c:	str	r1, [r0, #8]
   34540:	ldr	r0, [r9, #8]
   34544:	cmp	r2, r0
   34548:	bcc	34528 <__assert_fail@plt+0x21a78>
   3454c:	cmp	r0, #0
   34550:	beq	34628 <__assert_fail@plt+0x21b78>
   34554:	ldr	ip, [r9, #24]
   34558:	mov	r6, #0
   3455c:	b	34570 <__assert_fail@plt+0x21ac0>
   34560:	ldr	r0, [r9, #8]
   34564:	add	r6, r6, #1
   34568:	cmp	r6, r0
   3456c:	bcs	34628 <__assert_fail@plt+0x21b78>
   34570:	add	lr, r6, r6, lsl #1
   34574:	add	r2, ip, lr, lsl #2
   34578:	ldr	r3, [r2, #4]
   3457c:	cmp	r3, #1
   34580:	blt	34564 <__assert_fail@plt+0x21ab4>
   34584:	ldr	r1, [r2, #8]
   34588:	mov	r5, #0
   3458c:	str	lr, [sp, #24]
   34590:	str	r1, [sp, #20]
   34594:	b	345c0 <__assert_fail@plt+0x21b10>
   34598:	add	r0, r4, r0, lsl #2
   3459c:	ldr	r0, [r0, #8]
   345a0:	add	r3, r2, #1
   345a4:	add	r5, r5, #1
   345a8:	str	r3, [r8]
   345ac:	str	r6, [r0, r2, lsl #2]
   345b0:	add	r0, ip, lr, lsl #2
   345b4:	ldr	r0, [r0, #4]
   345b8:	cmp	r5, r0
   345bc:	bge	34560 <__assert_fail@plt+0x21ab0>
   345c0:	ldr	r0, [r1, r5, lsl #2]
   345c4:	ldr	r4, [r9, #28]
   345c8:	add	r0, r0, r0, lsl #1
   345cc:	mov	r3, r4
   345d0:	ldr	r7, [r3, r0, lsl #2]!
   345d4:	mov	r8, r3
   345d8:	ldr	r2, [r8, #4]!
   345dc:	cmp	r7, r2
   345e0:	bne	34598 <__assert_fail@plt+0x21ae8>
   345e4:	mov	r1, #2
   345e8:	mov	sl, r9
   345ec:	add	r9, r4, r0, lsl #2
   345f0:	add	r1, r1, r7, lsl #1
   345f4:	str	r1, [r3]
   345f8:	lsl	r1, r1, #2
   345fc:	ldr	r0, [r9, #8]!
   34600:	bl	33500 <__assert_fail@plt+0x20a50>
   34604:	cmp	r0, #0
   34608:	beq	34a64 <__assert_fail@plt+0x21fb4>
   3460c:	str	r0, [r9]
   34610:	ldr	lr, [sp, #24]
   34614:	ldr	r1, [sp, #20]
   34618:	mov	r9, sl
   3461c:	ldr	ip, [sl, #24]
   34620:	ldr	r2, [r8]
   34624:	b	345a0 <__assert_fail@plt+0x21af0>
   34628:	mov	r0, #0
   3462c:	ldr	sl, [sp, #12]
   34630:	str	r0, [fp, #-52]	; 0xffffffcc
   34634:	ldr	r0, [sp, #16]
   34638:	cmp	r0, #0
   3463c:	bne	34784 <__assert_fail@plt+0x21cd4>
   34640:	ldr	r0, [sp, #28]
   34644:	ldrb	r2, [r0, #88]	; 0x58
   34648:	ands	r0, r2, #4
   3464c:	beq	34784 <__assert_fail@plt+0x21cd4>
   34650:	ldr	r0, [sl, #20]
   34654:	cmp	r0, #0
   34658:	bne	34784 <__assert_fail@plt+0x21cd4>
   3465c:	ldr	r5, [sp, #28]
   34660:	mov	r9, #0
   34664:	ldr	r7, [r5, #8]
   34668:	cmp	r7, #0
   3466c:	beq	3468c <__assert_fail@plt+0x21bdc>
   34670:	ldr	r3, [r5]
   34674:	mov	r8, #0
   34678:	mov	ip, #1
   3467c:	mov	lr, #139	; 0x8b
   34680:	mov	r6, #0
   34684:	mov	r4, #0
   34688:	b	346dc <__assert_fail@plt+0x21c2c>
   3468c:	mov	r8, #0
   34690:	mov	r0, #1
   34694:	and	r1, r2, #249	; 0xf9
   34698:	str	r0, [r5, #92]	; 0x5c
   3469c:	ldr	r0, [r5, #76]	; 0x4c
   346a0:	cmp	r0, #0
   346a4:	movwgt	r9, #1
   346a8:	orr	r0, r8, r9
   346ac:	and	r0, r0, #1
   346b0:	orr	r0, r1, r0, lsl #1
   346b4:	strb	r0, [r5, #88]	; 0x58
   346b8:	b	34784 <__assert_fail@plt+0x21cd4>
   346bc:	ldrsb	r0, [r5]
   346c0:	cmp	r0, #0
   346c4:	mov	r0, #0
   346c8:	movwmi	r0, #1
   346cc:	orr	r6, r6, r0
   346d0:	add	r4, r4, #1
   346d4:	cmp	r7, r4
   346d8:	beq	34a74 <__assert_fail@plt+0x21fc4>
   346dc:	add	r5, r3, r4, lsl #3
   346e0:	ldrb	r1, [r5, #4]
   346e4:	sub	r1, r1, #1
   346e8:	cmp	r1, #11
   346ec:	bhi	34b04 <__assert_fail@plt+0x22054>
   346f0:	add	r0, pc, #0
   346f4:	ldr	pc, [r0, r1, lsl #2]
   346f8:			; <UNDEFINED> instruction: 0x000346bc
   346fc:	ldrdeq	r4, [r3], -r0
   34700:	andeq	r4, r3, r8, lsr #14
   34704:	ldrdeq	r4, [r3], -r0
   34708:	andeq	r4, r3, ip, ror r7
   3470c:	andeq	r4, r3, r4, lsl #15
   34710:	andeq	r4, r3, r4, lsl #22
   34714:	ldrdeq	r4, [r3], -r0
   34718:	ldrdeq	r4, [r3], -r0
   3471c:	ldrdeq	r4, [r3], -r0
   34720:	ldrdeq	r4, [r3], -r0
   34724:	andeq	r4, r3, ip, asr r7
   34728:	ldr	r5, [r3, r4, lsl #3]
   3472c:	ldr	r0, [r5, #16]
   34730:	cmp	r0, #0
   34734:	bne	34784 <__assert_fail@plt+0x21cd4>
   34738:	ldr	r0, [r5, #20]
   3473c:	cmp	r0, #0
   34740:	ldreq	r0, [r5, #24]
   34744:	cmpeq	r0, #0
   34748:	bne	34784 <__assert_fail@plt+0x21cd4>
   3474c:	ldr	r0, [r5, #28]
   34750:	cmp	r0, #0
   34754:	beq	346d0 <__assert_fail@plt+0x21c20>
   34758:	b	34784 <__assert_fail@plt+0x21cd4>
   3475c:	ldr	r0, [r3, r4, lsl #3]
   34760:	sub	r0, r0, #16
   34764:	ror	r1, r0, #4
   34768:	cmp	r1, #7
   3476c:	bhi	34784 <__assert_fail@plt+0x21cd4>
   34770:	tst	lr, ip, lsl r1
   34774:	bne	346d0 <__assert_fail@plt+0x21c20>
   34778:	b	34784 <__assert_fail@plt+0x21cd4>
   3477c:	mov	r8, #1
   34780:	b	346d0 <__assert_fail@plt+0x21c20>
   34784:	ldr	lr, [sp, #28]
   34788:	ldr	r1, [lr, #52]	; 0x34
   3478c:	ldr	r0, [lr, #24]
   34790:	ldr	r1, [r1, #12]
   34794:	ldr	r1, [r1, #28]
   34798:	str	r1, [lr, #72]	; 0x48
   3479c:	add	r1, r1, r1, lsl #1
   347a0:	add	r5, r0, r1, lsl #2
   347a4:	mov	r4, r5
   347a8:	ldr	r7, [r4, #4]!
   347ac:	str	r7, [fp, #-44]	; 0xffffffd4
   347b0:	ldr	r0, [r4]
   347b4:	cmp	r0, #1
   347b8:	blt	34904 <__assert_fail@plt+0x21e54>
   347bc:	lsl	r0, r7, #2
   347c0:	str	r7, [fp, #-48]	; 0xffffffd0
   347c4:	bl	327ac <__assert_fail@plt+0x1fcfc>
   347c8:	cmp	r0, #0
   347cc:	str	r0, [fp, #-40]	; 0xffffffd8
   347d0:	beq	34aec <__assert_fail@plt+0x2203c>
   347d4:	mov	r6, r0
   347d8:	ldr	r0, [r4]
   347dc:	ldr	r1, [r5, #8]
   347e0:	lsl	r2, r0, #2
   347e4:	mov	r0, r6
   347e8:	bl	124e0 <memcpy@plt>
   347ec:	ldr	lr, [sp, #28]
   347f0:	mov	r0, #0
   347f4:	cmp	r7, #1
   347f8:	str	r0, [fp, #-32]	; 0xffffffe0
   347fc:	ldrge	r0, [lr, #76]	; 0x4c
   34800:	cmpge	r0, #1
   34804:	blt	34918 <__assert_fail@plt+0x21e68>
   34808:	mov	r0, #0
   3480c:	sub	r8, fp, #48	; 0x30
   34810:	mov	r9, #1
   34814:	ldr	r1, [r6, r0, lsl #2]
   34818:	ldr	r2, [lr]
   3481c:	add	r3, r2, r1, lsl #3
   34820:	ldrb	r3, [r3, #4]
   34824:	cmp	r3, #4
   34828:	bne	348f0 <__assert_fail@plt+0x21e40>
   3482c:	mov	r3, #0
   34830:	cmp	r7, #1
   34834:	bge	34848 <__assert_fail@plt+0x21d98>
   34838:	b	3486c <__assert_fail@plt+0x21dbc>
   3483c:	add	r3, r3, #1
   34840:	cmp	r7, r3
   34844:	beq	348f0 <__assert_fail@plt+0x21e40>
   34848:	ldr	r5, [r6, r3, lsl #2]
   3484c:	add	r4, r2, r5, lsl #3
   34850:	ldrb	r4, [r4, #4]
   34854:	cmp	r4, #9
   34858:	bne	3483c <__assert_fail@plt+0x21d8c>
   3485c:	ldr	r4, [r2, r1, lsl #3]
   34860:	ldr	r5, [r2, r5, lsl #3]
   34864:	cmp	r5, r4
   34868:	bne	3483c <__assert_fail@plt+0x21d8c>
   3486c:	cmp	r3, r7
   34870:	beq	348f0 <__assert_fail@plt+0x21e40>
   34874:	ldr	r2, [lr, #20]
   34878:	add	r1, r1, r1, lsl #1
   3487c:	cmp	r7, #1
   34880:	add	r1, r2, r1, lsl #2
   34884:	ldr	r1, [r1, #8]
   34888:	ldr	ip, [r1]
   3488c:	blt	348c8 <__assert_fail@plt+0x21e18>
   34890:	mov	r2, #0
   34894:	subs	r3, r7, #1
   34898:	beq	348bc <__assert_fail@plt+0x21e0c>
   3489c:	add	r5, r2, r3
   348a0:	lsr	r4, r5, #1
   348a4:	ldr	r1, [r6, r4, lsl #2]
   348a8:	cmp	r1, ip
   348ac:	addlt	r2, r9, r5, lsr #1
   348b0:	movge	r3, r4
   348b4:	cmp	r2, r3
   348b8:	bcc	3489c <__assert_fail@plt+0x21dec>
   348bc:	ldr	r1, [r6, r2, lsl #2]
   348c0:	cmp	r1, ip
   348c4:	beq	348f0 <__assert_fail@plt+0x21e40>
   348c8:	ldr	r0, [lr, #24]
   348cc:	add	r1, ip, ip, lsl #1
   348d0:	add	r1, r0, r1, lsl #2
   348d4:	mov	r0, r8
   348d8:	bl	3e5f8 <__assert_fail@plt+0x2bb48>
   348dc:	cmp	r0, #0
   348e0:	bne	349e0 <__assert_fail@plt+0x21f30>
   348e4:	ldr	r7, [fp, #-44]	; 0xffffffd4
   348e8:	ldr	lr, [sp, #28]
   348ec:	mov	r0, #0
   348f0:	add	r0, r0, #1
   348f4:	cmp	r0, r7
   348f8:	bge	34918 <__assert_fail@plt+0x21e68>
   348fc:	ldr	r6, [fp, #-40]	; 0xffffffd8
   34900:	b	34814 <__assert_fail@plt+0x21d64>
   34904:	mov	r0, #0
   34908:	str	r0, [fp, #-44]	; 0xffffffd4
   3490c:	str	r0, [fp, #-48]	; 0xffffffd0
   34910:	str	r0, [fp, #-40]	; 0xffffffd8
   34914:	str	r0, [fp, #-32]	; 0xffffffe0
   34918:	sub	r0, fp, #32
   3491c:	sub	r2, fp, #48	; 0x30
   34920:	mov	r1, lr
   34924:	mov	r3, #0
   34928:	bl	3e8f8 <__assert_fail@plt+0x2be48>
   3492c:	ldr	r1, [sp, #28]
   34930:	cmp	r0, #0
   34934:	str	r0, [r1, #36]	; 0x24
   34938:	beq	349c0 <__assert_fail@plt+0x21f10>
   3493c:	ldrsb	r2, [r0, #52]	; 0x34
   34940:	cmn	r2, #1
   34944:	ble	34958 <__assert_fail@plt+0x21ea8>
   34948:	str	r0, [r1, #40]	; 0x28
   3494c:	str	r0, [r1, #44]	; 0x2c
   34950:	str	r0, [r1, #48]	; 0x30
   34954:	b	349d4 <__assert_fail@plt+0x21f24>
   34958:	sub	r4, fp, #32
   3495c:	sub	r6, fp, #48	; 0x30
   34960:	mov	r3, #1
   34964:	mov	r0, r4
   34968:	mov	r2, r6
   3496c:	bl	3e8f8 <__assert_fail@plt+0x2be48>
   34970:	ldr	r1, [sp, #28]
   34974:	mov	r2, r6
   34978:	mov	r3, #2
   3497c:	str	r0, [r1, #40]	; 0x28
   34980:	ldr	r1, [sp, #28]
   34984:	mov	r0, r4
   34988:	bl	3e8f8 <__assert_fail@plt+0x2be48>
   3498c:	ldr	r1, [sp, #28]
   34990:	mov	r2, r6
   34994:	mov	r3, #6
   34998:	str	r0, [r1, #44]	; 0x2c
   3499c:	ldr	r1, [sp, #28]
   349a0:	mov	r0, r4
   349a4:	bl	3e8f8 <__assert_fail@plt+0x2be48>
   349a8:	ldr	r2, [sp, #28]
   349ac:	str	r0, [r2, #48]	; 0x30
   349b0:	ldr	r1, [r2, #40]	; 0x28
   349b4:	cmp	r1, #0
   349b8:	cmpne	r0, #0
   349bc:	bne	349c8 <__assert_fail@plt+0x21f18>
   349c0:	ldr	r0, [fp, #-32]	; 0xffffffe0
   349c4:	b	349e0 <__assert_fail@plt+0x21f30>
   349c8:	ldr	r0, [r2, #44]	; 0x2c
   349cc:	cmp	r0, #0
   349d0:	beq	349c0 <__assert_fail@plt+0x21f10>
   349d4:	ldr	r0, [fp, #-40]	; 0xffffffd8
   349d8:	bl	30174 <__assert_fail@plt+0x1d6c4>
   349dc:	mov	r0, #0
   349e0:	str	r0, [fp, #-52]	; 0xffffffcc
   349e4:	ldr	r5, [sl]
   349e8:	ldr	r0, [r5, #56]	; 0x38
   349ec:	cmp	r0, #0
   349f0:	beq	34a08 <__assert_fail@plt+0x21f58>
   349f4:	ldr	r4, [r0]
   349f8:	bl	30174 <__assert_fail@plt+0x1d6c4>
   349fc:	cmp	r4, #0
   34a00:	mov	r0, r4
   34a04:	bne	349f4 <__assert_fail@plt+0x21f44>
   34a08:	mov	r0, #31
   34a0c:	mov	r4, #0
   34a10:	str	r0, [r5, #64]	; 0x40
   34a14:	str	r4, [r5, #52]	; 0x34
   34a18:	str	r4, [r5, #56]	; 0x38
   34a1c:	ldr	r0, [r5, #16]
   34a20:	bl	30174 <__assert_fail@plt+0x1d6c4>
   34a24:	str	r4, [r5, #16]
   34a28:	ldr	r0, [sp, #40]	; 0x28
   34a2c:	bl	30174 <__assert_fail@plt+0x1d6c4>
   34a30:	ldr	r0, [sp, #44]	; 0x2c
   34a34:	bl	30174 <__assert_fail@plt+0x1d6c4>
   34a38:	ldrb	r0, [sp, #107]	; 0x6b
   34a3c:	cmp	r0, #0
   34a40:	beq	34a4c <__assert_fail@plt+0x21f9c>
   34a44:	ldr	r0, [sp, #36]	; 0x24
   34a48:	bl	30174 <__assert_fail@plt+0x1d6c4>
   34a4c:	ldr	r0, [fp, #-52]	; 0xffffffcc
   34a50:	cmp	r0, #0
   34a54:	bne	33f28 <__assert_fail@plt+0x21478>
   34a58:	mov	r0, r4
   34a5c:	sub	sp, fp, #28
   34a60:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   34a64:	ldr	sl, [sp, #12]
   34a68:	mov	r0, #12
   34a6c:	str	r0, [fp, #-52]	; 0xffffffcc
   34a70:	b	33ec0 <__assert_fail@plt+0x21410>
   34a74:	orr	r0, r6, r8
   34a78:	tst	r0, #1
   34a7c:	beq	34adc <__assert_fail@plt+0x2202c>
   34a80:	ldr	r5, [sp, #28]
   34a84:	mov	r2, #0
   34a88:	mov	r7, #7
   34a8c:	add	r3, r3, r2, lsl #3
   34a90:	ldr	r6, [r3, #4]
   34a94:	uxtb	r1, r6
   34a98:	cmp	r1, #5
   34a9c:	beq	34abc <__assert_fail@plt+0x2200c>
   34aa0:	cmp	r1, #1
   34aa4:	bne	34ac4 <__assert_fail@plt+0x22014>
   34aa8:	ldrsb	r0, [r3]
   34aac:	cmn	r0, #1
   34ab0:	bicle	r0, r6, #2097152	; 0x200000
   34ab4:	strle	r0, [r3, #4]
   34ab8:	b	34ac4 <__assert_fail@plt+0x22014>
   34abc:	bfi	r6, r7, #0, #8
   34ac0:	str	r6, [r3, #4]
   34ac4:	ldr	r0, [r5, #8]
   34ac8:	add	r2, r2, #1
   34acc:	cmp	r2, r0
   34ad0:	bcs	34ae4 <__assert_fail@plt+0x22034>
   34ad4:	ldr	r3, [r5]
   34ad8:	b	34a8c <__assert_fail@plt+0x21fdc>
   34adc:	ldr	r5, [sp, #28]
   34ae0:	b	34690 <__assert_fail@plt+0x21be0>
   34ae4:	ldrb	r2, [r5, #88]	; 0x58
   34ae8:	b	34690 <__assert_fail@plt+0x21be0>
   34aec:	mov	r0, #0
   34af0:	str	r0, [fp, #-48]	; 0xffffffd0
   34af4:	str	r0, [fp, #-44]	; 0xffffffd4
   34af8:	mov	r0, #12
   34afc:	str	r0, [fp, #-32]	; 0xffffffe0
   34b00:	b	349e0 <__assert_fail@plt+0x21f30>
   34b04:	bl	12a5c <abort@plt>
   34b08:	movw	r2, #61128	; 0xeec8
   34b0c:	movt	r2, #5
   34b10:	ldr	r1, [r2]
   34b14:	str	r0, [r2]
   34b18:	mov	r0, r1
   34b1c:	bx	lr
   34b20:	push	{r4, r5, r6, sl, fp, lr}
   34b24:	add	fp, sp, #16
   34b28:	ldr	r5, [r0, #16]
   34b2c:	ldr	r6, [r0]
   34b30:	mov	r4, r0
   34b34:	mov	r1, #0
   34b38:	mov	r2, #256	; 0x100
   34b3c:	mov	r0, r5
   34b40:	bl	12834 <memset@plt>
   34b44:	ldr	r1, [r6, #36]	; 0x24
   34b48:	mov	r0, r4
   34b4c:	mov	r2, r5
   34b50:	bl	34bb8 <__assert_fail@plt+0x22108>
   34b54:	ldr	r0, [r6, #36]	; 0x24
   34b58:	ldr	r1, [r6, #40]	; 0x28
   34b5c:	cmp	r0, r1
   34b60:	beq	34b74 <__assert_fail@plt+0x220c4>
   34b64:	mov	r0, r4
   34b68:	mov	r2, r5
   34b6c:	bl	34bb8 <__assert_fail@plt+0x22108>
   34b70:	ldr	r0, [r6, #36]	; 0x24
   34b74:	ldr	r1, [r6, #44]	; 0x2c
   34b78:	cmp	r0, r1
   34b7c:	beq	34b90 <__assert_fail@plt+0x220e0>
   34b80:	mov	r0, r4
   34b84:	mov	r2, r5
   34b88:	bl	34bb8 <__assert_fail@plt+0x22108>
   34b8c:	ldr	r0, [r6, #36]	; 0x24
   34b90:	ldr	r1, [r6, #48]	; 0x30
   34b94:	cmp	r0, r1
   34b98:	movne	r0, r4
   34b9c:	movne	r2, r5
   34ba0:	blne	34bb8 <__assert_fail@plt+0x22108>
   34ba4:	ldrb	r0, [r4, #28]
   34ba8:	orr	r0, r0, #8
   34bac:	strb	r0, [r4, #28]
   34bb0:	mov	r0, #0
   34bb4:	pop	{r4, r5, r6, sl, fp, pc}
   34bb8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   34bbc:	add	fp, sp, #28
   34bc0:	sub	sp, sp, #316	; 0x13c
   34bc4:	ldr	sl, [r0]
   34bc8:	str	r0, [sp, #20]
   34bcc:	mov	r3, #0
   34bd0:	str	r2, [sp, #36]	; 0x24
   34bd4:	ldr	r0, [sl, #92]	; 0x5c
   34bd8:	cmp	r0, #1
   34bdc:	bne	34bec <__assert_fail@plt+0x2213c>
   34be0:	ldr	r0, [sp, #20]
   34be4:	ldrb	r0, [r0, #14]
   34be8:	ubfx	r3, r0, #6, #1
   34bec:	ldr	r0, [r1, #8]
   34bf0:	cmp	r0, #1
   34bf4:	blt	34fc4 <__assert_fail@plt+0x22514>
   34bf8:	add	r0, sp, #40	; 0x28
   34bfc:	mov	r4, #1
   34c00:	mov	r2, #0
   34c04:	str	r3, [sp, #32]
   34c08:	str	r1, [sp, #12]
   34c0c:	str	sl, [sp, #24]
   34c10:	add	r0, r0, #1
   34c14:	str	r0, [sp, #8]
   34c18:	movw	r0, #1
   34c1c:	movt	r0, #32
   34c20:	add	r0, r0, #254	; 0xfe
   34c24:	str	r0, [sp, #4]
   34c28:	b	34c48 <__assert_fail@plt+0x22198>
   34c2c:	ldr	r3, [sp, #32]
   34c30:	ldr	r1, [sp, #12]
   34c34:	ldr	r2, [sp, #16]
   34c38:	ldr	r0, [r1, #8]
   34c3c:	add	r2, r2, #1
   34c40:	cmp	r2, r0
   34c44:	bge	34fc4 <__assert_fail@plt+0x22514>
   34c48:	ldr	r0, [r1, #12]
   34c4c:	str	r2, [sp, #16]
   34c50:	ldr	r5, [r0, r2, lsl #2]
   34c54:	ldr	r0, [sl]
   34c58:	add	r1, r0, r5, lsl #3
   34c5c:	ldrb	r6, [r1, #4]
   34c60:	sub	r1, r6, #1
   34c64:	cmp	r1, #6
   34c68:	bhi	34c30 <__assert_fail@plt+0x22180>
   34c6c:	add	r2, pc, #0
   34c70:	ldr	pc, [r2, r1, lsl #2]
   34c74:	muleq	r3, r0, ip
   34c78:	muleq	r3, ip, pc	; <UNPREDICTABLE>
   34c7c:	andeq	r4, r3, r4, lsr #27
   34c80:	andeq	r4, r3, r0, lsr ip
   34c84:	muleq	r3, ip, pc	; <UNPREDICTABLE>
   34c88:	andeq	r4, r3, r0, asr #28
   34c8c:	muleq	r3, ip, pc	; <UNPREDICTABLE>
   34c90:	ldrb	r6, [r0, r5, lsl #3]
   34c94:	ldr	r0, [sp, #36]	; 0x24
   34c98:	cmp	r3, #0
   34c9c:	strb	r4, [r0, r6]
   34ca0:	beq	34cbc <__assert_fail@plt+0x2220c>
   34ca4:	bl	12738 <__ctype_tolower_loc@plt>
   34ca8:	ldr	r0, [r0]
   34cac:	ldr	r3, [sp, #32]
   34cb0:	ldr	r1, [sp, #36]	; 0x24
   34cb4:	ldr	r0, [r0, r6, lsl #2]
   34cb8:	strb	r4, [r1, r0]
   34cbc:	ldr	r0, [sp, #20]
   34cc0:	ldrb	r0, [r0, #14]
   34cc4:	tst	r0, #64	; 0x40
   34cc8:	beq	34c30 <__assert_fail@plt+0x22180>
   34ccc:	ldr	r0, [sl, #92]	; 0x5c
   34cd0:	cmp	r0, #2
   34cd4:	blt	34c30 <__assert_fail@plt+0x22180>
   34cd8:	ldr	r0, [sl]
   34cdc:	add	r1, r5, #1
   34ce0:	ldr	r7, [sp, #4]
   34ce4:	movw	r6, #1
   34ce8:	add	r8, sp, #40	; 0x28
   34cec:	mov	ip, #0
   34cf0:	sub	r9, fp, #48	; 0x30
   34cf4:	movt	r6, #32
   34cf8:	ldrb	r0, [r0, r5, lsl #3]
   34cfc:	strb	r0, [sp, #40]	; 0x28
   34d00:	ldr	r0, [sl, #8]
   34d04:	cmp	r1, r0
   34d08:	ldr	r0, [sp, #8]
   34d0c:	bcs	34d4c <__assert_fail@plt+0x2229c>
   34d10:	ldr	r0, [sp, #8]
   34d14:	ldr	r1, [sl]
   34d18:	add	r1, r1, r5, lsl #3
   34d1c:	ldr	r2, [r1, #12]
   34d20:	and	r2, r2, r7
   34d24:	cmp	r2, r6
   34d28:	bne	34d4c <__assert_fail@plt+0x2229c>
   34d2c:	ldrb	r1, [r1, #8]
   34d30:	add	r3, r5, #2
   34d34:	strb	r1, [r0], #1
   34d38:	add	r1, r5, #1
   34d3c:	ldr	r2, [sl, #8]
   34d40:	mov	r5, r1
   34d44:	cmp	r3, r2
   34d48:	bcc	34d14 <__assert_fail@plt+0x22264>
   34d4c:	sub	r5, r0, r8
   34d50:	sub	r0, fp, #36	; 0x24
   34d54:	mov	r1, r8
   34d58:	mov	r3, r9
   34d5c:	str	ip, [fp, #-44]	; 0xffffffd4
   34d60:	str	ip, [fp, #-48]	; 0xffffffd0
   34d64:	mov	r2, r5
   34d68:	bl	327dc <__assert_fail@plt+0x1fd2c>
   34d6c:	cmp	r0, r5
   34d70:	bne	34c2c <__assert_fail@plt+0x2217c>
   34d74:	ldr	r0, [fp, #-36]	; 0xffffffdc
   34d78:	bl	12510 <towlower@plt>
   34d7c:	mov	r1, r0
   34d80:	mov	r0, r8
   34d84:	mov	r2, r9
   34d88:	bl	123b4 <wcrtomb@plt>
   34d8c:	cmn	r0, #1
   34d90:	beq	34c2c <__assert_fail@plt+0x2217c>
   34d94:	ldrb	r0, [sp, #40]	; 0x28
   34d98:	ldr	r1, [sp, #36]	; 0x24
   34d9c:	strb	r4, [r1, r0]
   34da0:	b	34c2c <__assert_fail@plt+0x2217c>
   34da4:	mov	r7, #0
   34da8:	mov	r6, #0
   34dac:	str	r5, [sp, #28]
   34db0:	ldr	r0, [r0, r5, lsl #3]
   34db4:	ldr	r1, [sp, #36]	; 0x24
   34db8:	lsl	sl, r7, #2
   34dbc:	mov	r8, #0
   34dc0:	add	r9, r1, r7
   34dc4:	ldr	r5, [r0, r6, lsl #2]
   34dc8:	b	34df4 <__assert_fail@plt+0x22344>
   34dcc:	bl	12738 <__ctype_tolower_loc@plt>
   34dd0:	ldr	r0, [r0]
   34dd4:	ldr	r3, [sp, #32]
   34dd8:	add	r0, r0, sl
   34ddc:	ldr	r0, [r0, r8, lsl #2]
   34de0:	ldr	r1, [sp, #36]	; 0x24
   34de4:	strb	r4, [r1, r0]
   34de8:	add	r8, r8, #1
   34dec:	cmp	r8, #32
   34df0:	beq	34e20 <__assert_fail@plt+0x22370>
   34df4:	tst	r5, r4, lsl r8
   34df8:	strbne	r4, [r9, r8]
   34dfc:	cmpne	r3, #0
   34e00:	beq	34de8 <__assert_fail@plt+0x22338>
   34e04:	add	r0, r7, r8
   34e08:	add	r0, r0, #128	; 0x80
   34e0c:	lsr	r0, r0, #7
   34e10:	cmp	r0, #2
   34e14:	bls	34dcc <__assert_fail@plt+0x2231c>
   34e18:	add	r0, r7, r8
   34e1c:	b	34de0 <__assert_fail@plt+0x22330>
   34e20:	ldr	sl, [sp, #24]
   34e24:	ldr	r5, [sp, #28]
   34e28:	add	r6, r6, #1
   34e2c:	cmp	r6, #8
   34e30:	beq	34c30 <__assert_fail@plt+0x22180>
   34e34:	ldr	r0, [sl]
   34e38:	add	r7, r7, r8
   34e3c:	b	34db0 <__assert_fail@plt+0x22300>
   34e40:	ldr	r6, [r0, r5, lsl #3]
   34e44:	ldr	r0, [sl, #92]	; 0x5c
   34e48:	cmp	r0, #2
   34e4c:	blt	34ec8 <__assert_fail@plt+0x22418>
   34e50:	ldr	r0, [r6, #36]	; 0x24
   34e54:	cmp	r0, #0
   34e58:	bne	34e74 <__assert_fail@plt+0x223c4>
   34e5c:	ldrb	r0, [r6, #16]
   34e60:	tst	r0, #1
   34e64:	bne	34e74 <__assert_fail@plt+0x223c4>
   34e68:	ldr	r0, [r6, #32]
   34e6c:	cmp	r0, #0
   34e70:	beq	34ec8 <__assert_fail@plt+0x22418>
   34e74:	mov	r7, #0
   34e78:	add	r8, sp, #40	; 0x28
   34e7c:	sub	r6, fp, #48	; 0x30
   34e80:	strb	r7, [fp, #-48]	; 0xffffffd0
   34e84:	mov	r0, #0
   34e88:	mov	r1, r6
   34e8c:	mov	r2, #1
   34e90:	mov	r3, r8
   34e94:	str	r7, [sp, #44]	; 0x2c
   34e98:	str	r7, [sp, #40]	; 0x28
   34e9c:	bl	327dc <__assert_fail@plt+0x1fd2c>
   34ea0:	cmn	r0, #2
   34ea4:	ldrb	r1, [fp, #-48]	; 0xffffffd0
   34ea8:	ldreq	r0, [sp, #36]	; 0x24
   34eac:	strbeq	r4, [r0, r1]
   34eb0:	add	r0, r1, #1
   34eb4:	uxtb	r1, r0
   34eb8:	strb	r0, [fp, #-48]	; 0xffffffd0
   34ebc:	cmp	r1, r0
   34ec0:	beq	34e84 <__assert_fail@plt+0x223d4>
   34ec4:	b	34c2c <__assert_fail@plt+0x2217c>
   34ec8:	ldr	r0, [r6, #20]
   34ecc:	cmp	r0, #1
   34ed0:	blt	34c30 <__assert_fail@plt+0x22180>
   34ed4:	mov	r9, #0
   34ed8:	b	34eec <__assert_fail@plt+0x2243c>
   34edc:	ldr	r0, [r6, #20]
   34ee0:	add	r9, r9, #1
   34ee4:	cmp	r9, r0
   34ee8:	bge	34c30 <__assert_fail@plt+0x22180>
   34eec:	mov	r0, #0
   34ef0:	add	r8, sp, #40	; 0x28
   34ef4:	sub	r2, fp, #48	; 0x30
   34ef8:	str	r0, [fp, #-44]	; 0xffffffd4
   34efc:	str	r0, [fp, #-48]	; 0xffffffd0
   34f00:	ldr	r0, [r6]
   34f04:	ldr	r1, [r0, r9, lsl #2]
   34f08:	mov	r0, r8
   34f0c:	bl	123b4 <wcrtomb@plt>
   34f10:	ldr	r3, [sp, #32]
   34f14:	cmn	r0, #1
   34f18:	beq	34f48 <__assert_fail@plt+0x22498>
   34f1c:	ldrb	r7, [sp, #40]	; 0x28
   34f20:	ldr	r0, [sp, #36]	; 0x24
   34f24:	cmp	r3, #0
   34f28:	strb	r4, [r0, r7]
   34f2c:	beq	34f48 <__assert_fail@plt+0x22498>
   34f30:	bl	12738 <__ctype_tolower_loc@plt>
   34f34:	ldr	r0, [r0]
   34f38:	ldr	r3, [sp, #32]
   34f3c:	ldr	r1, [sp, #36]	; 0x24
   34f40:	ldr	r0, [r0, r7, lsl #2]
   34f44:	strb	r4, [r1, r0]
   34f48:	ldr	r0, [sp, #20]
   34f4c:	ldrb	r0, [r0, #14]
   34f50:	tst	r0, #64	; 0x40
   34f54:	beq	34edc <__assert_fail@plt+0x2242c>
   34f58:	ldr	r0, [sl, #92]	; 0x5c
   34f5c:	cmp	r0, #2
   34f60:	blt	34edc <__assert_fail@plt+0x2242c>
   34f64:	ldr	r0, [r6]
   34f68:	ldr	r0, [r0, r9, lsl #2]
   34f6c:	bl	12510 <towlower@plt>
   34f70:	mov	r1, r0
   34f74:	mov	r0, r8
   34f78:	sub	r2, fp, #48	; 0x30
   34f7c:	bl	123b4 <wcrtomb@plt>
   34f80:	ldr	r3, [sp, #32]
   34f84:	cmn	r0, #1
   34f88:	beq	34edc <__assert_fail@plt+0x2242c>
   34f8c:	ldrb	r0, [sp, #40]	; 0x28
   34f90:	ldr	r1, [sp, #36]	; 0x24
   34f94:	strb	r4, [r1, r0]
   34f98:	b	34edc <__assert_fail@plt+0x2242c>
   34f9c:	ldr	r0, [sp, #36]	; 0x24
   34fa0:	mov	r1, #1
   34fa4:	mov	r2, #256	; 0x100
   34fa8:	bl	12834 <memset@plt>
   34fac:	cmp	r6, #2
   34fb0:	bne	34fc4 <__assert_fail@plt+0x22514>
   34fb4:	ldr	r1, [sp, #20]
   34fb8:	ldrb	r0, [r1, #28]
   34fbc:	orr	r0, r0, #1
   34fc0:	strb	r0, [r1, #28]
   34fc4:	sub	sp, fp, #28
   34fc8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   34fcc:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   34fd0:	add	fp, sp, #24
   34fd4:	mov	r4, r0
   34fd8:	mov	r0, #0
   34fdc:	mov	r6, r2
   34fe0:	mov	r8, r1
   34fe4:	str	r0, [r4]
   34fe8:	str	r0, [r4, #4]
   34fec:	str	r0, [r4, #8]
   34ff0:	mov	r0, #256	; 0x100
   34ff4:	bl	327ac <__assert_fail@plt+0x1fcfc>
   34ff8:	cmp	r0, #0
   34ffc:	str	r0, [r4, #16]
   35000:	beq	350b0 <__assert_fail@plt+0x22600>
   35004:	movw	r0, #45820	; 0xb2fc
   35008:	tst	r6, #1
   3500c:	and	r1, r6, #2
   35010:	movt	r0, #3
   35014:	movweq	r0, #710	; 0x2c6
   35018:	movteq	r0, #257	; 0x101
   3501c:	tst	r6, #4
   35020:	orr	r5, r0, r1, lsl #21
   35024:	bne	35038 <__assert_fail@plt+0x22588>
   35028:	ldrb	r0, [r4, #28]
   3502c:	and	r0, r0, #127	; 0x7f
   35030:	strb	r0, [r4, #28]
   35034:	b	35058 <__assert_fail@plt+0x225a8>
   35038:	ldrb	r0, [r4, #28]
   3503c:	mvn	r1, #127	; 0x7f
   35040:	orr	r0, r0, r1
   35044:	movw	r1, #45758	; 0xb2be
   35048:	movt	r1, #323	; 0x143
   3504c:	strb	r0, [r4, #28]
   35050:	and	r1, r5, r1
   35054:	orr	r5, r1, #256	; 0x100
   35058:	and	r1, r6, #8
   3505c:	and	r0, r0, #239	; 0xef
   35060:	mov	r7, #0
   35064:	orr	r0, r0, r1, lsl #1
   35068:	str	r7, [r4, #20]
   3506c:	strb	r0, [r4, #28]
   35070:	mov	r0, r8
   35074:	bl	127bc <strlen@plt>
   35078:	mov	r2, r0
   3507c:	mov	r0, r4
   35080:	mov	r1, r8
   35084:	mov	r3, r5
   35088:	bl	33610 <__assert_fail@plt+0x20b60>
   3508c:	cmp	r0, #16
   35090:	mov	r5, r0
   35094:	movweq	r5, #8
   35098:	cmp	r5, #0
   3509c:	bne	350bc <__assert_fail@plt+0x2260c>
   350a0:	mov	r0, r4
   350a4:	bl	34b20 <__assert_fail@plt+0x22070>
   350a8:	mov	r0, r7
   350ac:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   350b0:	mov	r7, #12
   350b4:	mov	r0, r7
   350b8:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   350bc:	ldr	r0, [r4, #16]
   350c0:	bl	30174 <__assert_fail@plt+0x1d6c4>
   350c4:	mov	r0, r5
   350c8:	str	r7, [r4, #16]
   350cc:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   350d0:	push	{r4, r5, r6, r7, fp, lr}
   350d4:	add	fp, sp, #16
   350d8:	cmp	r0, #17
   350dc:	bcs	35150 <__assert_fail@plt+0x226a0>
   350e0:	movw	r1, #55728	; 0xd9b0
   350e4:	mov	r4, r2
   350e8:	mov	r2, #5
   350ec:	mov	r5, r3
   350f0:	movt	r1, #4
   350f4:	ldr	r0, [r1, r0, lsl #2]
   350f8:	movw	r1, #55344	; 0xd830
   350fc:	movt	r1, #4
   35100:	add	r1, r1, r0
   35104:	mov	r0, #0
   35108:	bl	12564 <dcgettext@plt>
   3510c:	mov	r6, r0
   35110:	bl	127bc <strlen@plt>
   35114:	add	r7, r0, #1
   35118:	cmp	r5, #0
   3511c:	beq	35138 <__assert_fail@plt+0x22688>
   35120:	cmp	r7, r5
   35124:	mov	r2, r7
   35128:	bhi	35140 <__assert_fail@plt+0x22690>
   3512c:	mov	r0, r4
   35130:	mov	r1, r6
   35134:	bl	124e0 <memcpy@plt>
   35138:	mov	r0, r7
   3513c:	pop	{r4, r5, r6, r7, fp, pc}
   35140:	sub	r2, r5, #1
   35144:	mov	r0, #0
   35148:	strb	r0, [r4, r2]
   3514c:	b	3512c <__assert_fail@plt+0x2267c>
   35150:	bl	12a5c <abort@plt>
   35154:	push	{r4, r5, fp, lr}
   35158:	add	fp, sp, #8
   3515c:	ldr	r5, [r0]
   35160:	mov	r4, r0
   35164:	cmp	r5, #0
   35168:	beq	35194 <__assert_fail@plt+0x226e4>
   3516c:	movw	r0, #9392	; 0x24b0
   35170:	movw	r1, #10328	; 0x2858
   35174:	movt	r0, #1
   35178:	movt	r1, #1
   3517c:	orrs	r0, r1, r0
   35180:	beq	3518c <__assert_fail@plt+0x226dc>
   35184:	add	r0, r5, #136	; 0x88
   35188:	bl	1242c <pthread_mutex_destroy@plt>
   3518c:	mov	r0, r5
   35190:	bl	351bc <__assert_fail@plt+0x2270c>
   35194:	mov	r5, #0
   35198:	str	r5, [r4]
   3519c:	str	r5, [r4, #4]
   351a0:	ldr	r0, [r4, #16]
   351a4:	bl	30174 <__assert_fail@plt+0x1d6c4>
   351a8:	str	r5, [r4, #16]
   351ac:	ldr	r0, [r4, #20]
   351b0:	bl	30174 <__assert_fail@plt+0x1d6c4>
   351b4:	str	r5, [r4, #20]
   351b8:	pop	{r4, r5, fp, pc}
   351bc:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   351c0:	add	fp, sp, #24
   351c4:	mov	r8, r0
   351c8:	ldr	r0, [r0]
   351cc:	cmp	r0, #0
   351d0:	beq	35254 <__assert_fail@plt+0x227a4>
   351d4:	ldr	r1, [r8, #8]
   351d8:	cmp	r1, #0
   351dc:	beq	35254 <__assert_fail@plt+0x227a4>
   351e0:	movw	r7, #255	; 0xff
   351e4:	mov	r6, #0
   351e8:	movt	r7, #4
   351ec:	add	r1, r0, r6, lsl #3
   351f0:	ldr	r1, [r1, #4]
   351f4:	and	r1, r1, r7
   351f8:	cmp	r1, #3
   351fc:	beq	35230 <__assert_fail@plt+0x22780>
   35200:	cmp	r1, #6
   35204:	bne	3523c <__assert_fail@plt+0x2278c>
   35208:	ldr	r5, [r0, r6, lsl #3]
   3520c:	ldr	r0, [r5]
   35210:	bl	30174 <__assert_fail@plt+0x1d6c4>
   35214:	ldr	r0, [r5, #4]
   35218:	bl	30174 <__assert_fail@plt+0x1d6c4>
   3521c:	ldr	r0, [r5, #8]
   35220:	bl	30174 <__assert_fail@plt+0x1d6c4>
   35224:	ldr	r0, [r5, #12]
   35228:	bl	30174 <__assert_fail@plt+0x1d6c4>
   3522c:	b	35234 <__assert_fail@plt+0x22784>
   35230:	ldr	r5, [r0, r6, lsl #3]
   35234:	mov	r0, r5
   35238:	bl	30174 <__assert_fail@plt+0x1d6c4>
   3523c:	ldr	r0, [r8, #8]
   35240:	add	r6, r6, #1
   35244:	cmp	r6, r0
   35248:	bcs	35254 <__assert_fail@plt+0x227a4>
   3524c:	ldr	r0, [r8]
   35250:	b	351ec <__assert_fail@plt+0x2273c>
   35254:	ldr	r0, [r8, #12]
   35258:	bl	30174 <__assert_fail@plt+0x1d6c4>
   3525c:	ldr	r0, [r8, #8]
   35260:	cmp	r0, #0
   35264:	beq	352c8 <__assert_fail@plt+0x22818>
   35268:	mov	r5, #0
   3526c:	mov	r6, #8
   35270:	b	35288 <__assert_fail@plt+0x227d8>
   35274:	ldr	r0, [r8, #8]
   35278:	add	r5, r5, #1
   3527c:	add	r6, r6, #12
   35280:	cmp	r5, r0
   35284:	bcs	352c8 <__assert_fail@plt+0x22818>
   35288:	ldr	r0, [r8, #24]
   3528c:	cmp	r0, #0
   35290:	beq	3529c <__assert_fail@plt+0x227ec>
   35294:	ldr	r0, [r0, r6]
   35298:	bl	30174 <__assert_fail@plt+0x1d6c4>
   3529c:	ldr	r0, [r8, #28]
   352a0:	cmp	r0, #0
   352a4:	beq	352b0 <__assert_fail@plt+0x22800>
   352a8:	ldr	r0, [r0, r6]
   352ac:	bl	30174 <__assert_fail@plt+0x1d6c4>
   352b0:	ldr	r0, [r8, #20]
   352b4:	cmp	r0, #0
   352b8:	beq	35274 <__assert_fail@plt+0x227c4>
   352bc:	ldr	r0, [r0, r6]
   352c0:	bl	30174 <__assert_fail@plt+0x1d6c4>
   352c4:	b	35274 <__assert_fail@plt+0x227c4>
   352c8:	ldr	r0, [r8, #20]
   352cc:	bl	30174 <__assert_fail@plt+0x1d6c4>
   352d0:	ldr	r0, [r8, #24]
   352d4:	bl	30174 <__assert_fail@plt+0x1d6c4>
   352d8:	ldr	r0, [r8, #28]
   352dc:	bl	30174 <__assert_fail@plt+0x1d6c4>
   352e0:	ldr	r0, [r8]
   352e4:	bl	30174 <__assert_fail@plt+0x1d6c4>
   352e8:	ldr	r5, [r8, #32]
   352ec:	cmp	r5, #0
   352f0:	beq	35350 <__assert_fail@plt+0x228a0>
   352f4:	mov	r6, #0
   352f8:	add	r0, r6, r6, lsl #1
   352fc:	ldr	r0, [r5, r0, lsl #2]!
   35300:	add	r7, r5, #8
   35304:	cmp	r0, #1
   35308:	blt	3532c <__assert_fail@plt+0x2287c>
   3530c:	mov	r4, #0
   35310:	ldr	r0, [r7]
   35314:	ldr	r0, [r0, r4, lsl #2]
   35318:	bl	38938 <__assert_fail@plt+0x25e88>
   3531c:	ldr	r0, [r5]
   35320:	add	r4, r4, #1
   35324:	cmp	r4, r0
   35328:	blt	35310 <__assert_fail@plt+0x22860>
   3532c:	ldr	r0, [r7]
   35330:	bl	30174 <__assert_fail@plt+0x1d6c4>
   35334:	ldr	r0, [r8, #68]	; 0x44
   35338:	cmp	r6, r0
   3533c:	bcs	3534c <__assert_fail@plt+0x2289c>
   35340:	ldr	r5, [r8, #32]
   35344:	add	r6, r6, #1
   35348:	b	352f8 <__assert_fail@plt+0x22848>
   3534c:	ldr	r5, [r8, #32]
   35350:	mov	r0, r5
   35354:	bl	30174 <__assert_fail@plt+0x1d6c4>
   35358:	ldr	r0, [r8, #60]	; 0x3c
   3535c:	movw	r1, #55796	; 0xd9f4
   35360:	movt	r1, #4
   35364:	cmp	r0, r1
   35368:	beq	35370 <__assert_fail@plt+0x228c0>
   3536c:	bl	30174 <__assert_fail@plt+0x1d6c4>
   35370:	ldr	r0, [r8, #132]	; 0x84
   35374:	bl	30174 <__assert_fail@plt+0x1d6c4>
   35378:	mov	r0, r8
   3537c:	pop	{r4, r5, r6, r7, r8, sl, fp, lr}
   35380:	b	30174 <__assert_fail@plt+0x1d6c4>
   35384:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   35388:	add	fp, sp, #28
   3538c:	sub	sp, sp, #28
   35390:	ldr	sl, [fp, #8]
   35394:	mov	r7, #2
   35398:	cmp	sl, #7
   3539c:	bhi	35470 <__assert_fail@plt+0x229c0>
   353a0:	mov	r5, r0
   353a4:	ldr	r0, [r0]
   353a8:	mov	r6, r3
   353ac:	mov	r9, r2
   353b0:	mov	r4, r1
   353b4:	tst	sl, #4
   353b8:	str	r0, [sp, #24]
   353bc:	bne	353d4 <__assert_fail@plt+0x22924>
   353c0:	mov	r0, r4
   353c4:	bl	127bc <strlen@plt>
   353c8:	mov	r7, r0
   353cc:	mov	r8, #0
   353d0:	b	353dc <__assert_fail@plt+0x2292c>
   353d4:	ldr	r8, [r6]
   353d8:	ldr	r7, [r6, #4]
   353dc:	movw	r0, #9392	; 0x24b0
   353e0:	movw	r1, #10328	; 0x2858
   353e4:	movt	r0, #1
   353e8:	movt	r1, #1
   353ec:	orrs	r0, r1, r0
   353f0:	str	r0, [sp, #20]
   353f4:	beq	35404 <__assert_fail@plt+0x22954>
   353f8:	ldr	r0, [sp, #24]
   353fc:	add	r0, r0, #136	; 0x88
   35400:	bl	1248c <pthread_mutex_lock@plt>
   35404:	ldrb	r0, [r5, #28]
   35408:	tst	r0, #16
   3540c:	bne	35420 <__assert_fail@plt+0x22970>
   35410:	str	r7, [sp]
   35414:	stmib	sp, {r7, r9}
   35418:	str	r6, [sp, #12]
   3541c:	b	35434 <__assert_fail@plt+0x22984>
   35420:	mov	r0, #0
   35424:	str	r7, [sp]
   35428:	str	r7, [sp, #4]
   3542c:	str	r0, [sp, #8]
   35430:	str	r0, [sp, #12]
   35434:	mov	r0, r5
   35438:	mov	r1, r4
   3543c:	mov	r2, r7
   35440:	mov	r3, r8
   35444:	str	sl, [sp, #16]
   35448:	bl	3547c <__assert_fail@plt+0x229cc>
   3544c:	mov	r7, r0
   35450:	ldr	r0, [sp, #20]
   35454:	cmp	r0, #0
   35458:	beq	35468 <__assert_fail@plt+0x229b8>
   3545c:	ldr	r0, [sp, #24]
   35460:	add	r0, r0, #136	; 0x88
   35464:	bl	12360 <pthread_mutex_unlock@plt>
   35468:	cmp	r7, #0
   3546c:	movwne	r7, #1
   35470:	mov	r0, r7
   35474:	sub	sp, fp, #28
   35478:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   3547c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   35480:	add	fp, sp, #28
   35484:	sub	sp, sp, #412	; 0x19c
   35488:	ldr	r8, [r0]
   3548c:	str	r2, [sp, #68]	; 0x44
   35490:	str	r1, [sp, #100]	; 0x64
   35494:	mov	r4, r0
   35498:	add	r0, sp, #104	; 0x68
   3549c:	mov	r1, #0
   354a0:	mov	r2, #136	; 0x88
   354a4:	mov	r6, r3
   354a8:	mov	r9, #0
   354ac:	bl	12834 <memset@plt>
   354b0:	str	r8, [sp, #188]	; 0xbc
   354b4:	ldr	lr, [fp, #16]
   354b8:	ldr	ip, [fp, #8]
   354bc:	mov	r5, #0
   354c0:	ldr	r1, [r4, #16]
   354c4:	cmp	r1, #0
   354c8:	beq	354e4 <__assert_fail@plt+0x22a34>
   354cc:	ldrb	r2, [r4, #28]
   354d0:	and	r2, r2, #9
   354d4:	cmp	r2, #8
   354d8:	movne	r1, #0
   354dc:	subs	r5, r6, ip
   354e0:	movne	r5, r1
   354e4:	ldr	r2, [r4, #24]
   354e8:	ldr	r1, [r4, #8]
   354ec:	mov	sl, #1
   354f0:	mvn	r3, r2
   354f4:	cmp	r2, lr
   354f8:	addcc	r9, r3, lr
   354fc:	cmp	r1, #0
   35500:	beq	37fc8 <__assert_fail@plt+0x25518>
   35504:	ldr	r1, [r8, #36]	; 0x24
   35508:	cmp	r1, #0
   3550c:	ldrne	r0, [r8, #40]	; 0x28
   35510:	cmpne	r0, #0
   35514:	beq	37fc8 <__assert_fail@plt+0x25518>
   35518:	ldr	r3, [r8, #44]	; 0x2c
   3551c:	cmp	r3, #0
   35520:	ldrne	r7, [r8, #48]	; 0x30
   35524:	cmpne	r7, #0
   35528:	beq	37fc8 <__assert_fail@plt+0x25518>
   3552c:	ldr	r1, [r1, #8]
   35530:	ldr	r2, [r4, #20]
   35534:	cmp	r1, #0
   35538:	beq	35544 <__assert_fail@plt+0x22a94>
   3553c:	ldr	r7, [sp, #100]	; 0x64
   35540:	b	35554 <__assert_fail@plt+0x22aa4>
   35544:	ldr	r1, [r0, #8]
   35548:	ldr	r7, [sp, #100]	; 0x64
   3554c:	cmp	r1, #0
   35550:	beq	370d4 <__assert_fail@plt+0x24624>
   35554:	str	ip, [sp, #72]	; 0x48
   35558:	subs	r0, lr, r9
   3555c:	str	r9, [sp, #32]
   35560:	str	r0, [sp, #84]	; 0x54
   35564:	mov	r0, #1
   35568:	str	r0, [sp, #44]	; 0x2c
   3556c:	bne	35580 <__assert_fail@plt+0x22ad0>
   35570:	ldr	r0, [r8, #76]	; 0x4c
   35574:	cmp	r0, #0
   35578:	movwne	r0, #1
   3557c:	str	r0, [sp, #44]	; 0x2c
   35580:	ldr	r0, [r4, #12]
   35584:	ldr	sl, [r8, #92]	; 0x5c
   35588:	ldr	ip, [r8, #8]
   3558c:	str	r2, [sp, #168]	; 0xa8
   35590:	str	r7, [sp, #104]	; 0x68
   35594:	mov	lr, r4
   35598:	str	sl, [sp, #184]	; 0xb8
   3559c:	ubfx	r3, r0, #22, #1
   355a0:	ldr	r4, [sp, #68]	; 0x44
   355a4:	and	r0, r0, #4194304	; 0x400000
   355a8:	add	r1, ip, #1
   355ac:	orrs	r9, r2, r0
   355b0:	strb	r3, [sp, #176]	; 0xb0
   355b4:	add	r3, sp, #104	; 0x68
   355b8:	movwne	r9, #1
   355bc:	add	r3, r3, #44	; 0x2c
   355c0:	cmp	sl, r1
   355c4:	strb	r9, [sp, #179]	; 0xb3
   355c8:	movgt	r1, sl
   355cc:	vdup.32	q8, r4
   355d0:	ldrb	r0, [r8, #88]	; 0x58
   355d4:	vst1.32	{d16-d17}, [r3]
   355d8:	ubfx	r3, r0, #3, #1
   355dc:	strb	r3, [sp, #178]	; 0xb2
   355e0:	ubfx	r0, r0, #2, #1
   355e4:	str	r8, [sp, #96]	; 0x60
   355e8:	str	lr, [sp, #52]	; 0x34
   355ec:	str	r5, [sp, #92]	; 0x5c
   355f0:	str	r2, [sp, #88]	; 0x58
   355f4:	strb	r0, [sp, #177]	; 0xb1
   355f8:	add	r0, r4, #1
   355fc:	cmp	r0, r1
   35600:	movlt	r1, r0
   35604:	cmp	sl, #2
   35608:	mov	r0, lr
   3560c:	str	r1, [sp, #80]	; 0x50
   35610:	blt	35650 <__assert_fail@plt+0x22ba0>
   35614:	mov	sl, #12
   35618:	cmn	r1, #-1073741823	; 0xc0000001
   3561c:	bhi	37f74 <__assert_fail@plt+0x254c4>
   35620:	lsl	r1, r1, #2
   35624:	mov	r0, #0
   35628:	bl	33500 <__assert_fail@plt+0x20a50>
   3562c:	ldr	r1, [sp, #80]	; 0x50
   35630:	ldr	r2, [sp, #88]	; 0x58
   35634:	ldr	r5, [sp, #92]	; 0x5c
   35638:	ldr	r7, [sp, #100]	; 0x64
   3563c:	cmp	r0, #0
   35640:	beq	37f74 <__assert_fail@plt+0x254c4>
   35644:	str	r0, [sp, #112]	; 0x70
   35648:	ldr	r8, [sp, #96]	; 0x60
   3564c:	ldr	r0, [sp, #52]	; 0x34
   35650:	cmp	r9, #0
   35654:	mov	r4, #1
   35658:	mov	r9, r0
   3565c:	beq	35688 <__assert_fail@plt+0x22bd8>
   35660:	mov	r0, #0
   35664:	mov	r4, #0
   35668:	bl	33500 <__assert_fail@plt+0x20a50>
   3566c:	cmp	r0, #0
   35670:	beq	37e5c <__assert_fail@plt+0x253ac>
   35674:	ldr	r7, [sp, #100]	; 0x64
   35678:	ldr	r5, [sp, #92]	; 0x5c
   3567c:	ldr	r2, [sp, #88]	; 0x58
   35680:	ldr	r1, [sp, #80]	; 0x50
   35684:	str	r0, [sp, #108]	; 0x6c
   35688:	add	r3, r8, #96	; 0x60
   3568c:	str	r1, [sp, #140]	; 0x8c
   35690:	ldr	r0, [fp, #12]
   35694:	cmp	r4, #0
   35698:	str	r3, [sp, #172]	; 0xac
   3569c:	ldrb	r3, [r8, #88]	; 0x58
   356a0:	ubfx	r3, r3, #4, #1
   356a4:	strb	r3, [sp, #182]	; 0xb6
   356a8:	mov	r3, #0
   356ac:	beq	356c4 <__assert_fail@plt+0x22c14>
   356b0:	str	r7, [sp, #108]	; 0x6c
   356b4:	ldr	r3, [r8, #92]	; 0x5c
   356b8:	cmp	r3, #1
   356bc:	ldr	r3, [sp, #68]	; 0x44
   356c0:	movwgt	r3, #0
   356c4:	str	r0, [sp, #160]	; 0xa0
   356c8:	str	r3, [sp, #136]	; 0x88
   356cc:	str	r3, [sp, #132]	; 0x84
   356d0:	str	r0, [sp, #156]	; 0x9c
   356d4:	ldrb	r0, [r9, #28]
   356d8:	lsr	r0, r0, #7
   356dc:	strb	r0, [sp, #181]	; 0xb5
   356e0:	mvn	r0, #0
   356e4:	ldr	r8, [r8, #76]	; 0x4c
   356e8:	str	r0, [sp, #196]	; 0xc4
   356ec:	ldr	r0, [fp, #24]
   356f0:	lsl	r9, r8, #1
   356f4:	cmp	r8, #1
   356f8:	str	r0, [sp, #192]	; 0xc0
   356fc:	blt	35754 <__assert_fail@plt+0x22ca4>
   35700:	movw	r0, #43690	; 0xaaaa
   35704:	mov	sl, #12
   35708:	movt	r0, #2730	; 0xaaa
   3570c:	cmp	r9, r0
   35710:	bhi	37f74 <__assert_fail@plt+0x254c4>
   35714:	add	r0, r8, r8, lsl #1
   35718:	lsl	r0, r0, #4
   3571c:	bl	327ac <__assert_fail@plt+0x1fcfc>
   35720:	mov	r5, r0
   35724:	str	r0, [sp, #220]	; 0xdc
   35728:	lsl	r0, r8, #3
   3572c:	bl	327ac <__assert_fail@plt+0x1fcfc>
   35730:	cmp	r0, #0
   35734:	str	r0, [sp, #236]	; 0xec
   35738:	beq	37f74 <__assert_fail@plt+0x254c4>
   3573c:	cmp	r5, #0
   35740:	ldr	r7, [sp, #100]	; 0x64
   35744:	ldr	r5, [sp, #92]	; 0x5c
   35748:	ldr	r2, [sp, #88]	; 0x58
   3574c:	ldr	r1, [sp, #80]	; 0x50
   35750:	beq	37f74 <__assert_fail@plt+0x254c4>
   35754:	mov	r0, #1
   35758:	str	r9, [sp, #232]	; 0xe8
   3575c:	str	r0, [sp, #224]	; 0xe0
   35760:	ldr	r0, [sp, #84]	; 0x54
   35764:	str	r9, [sp, #216]	; 0xd8
   35768:	cmp	r0, #1
   3576c:	bhi	35780 <__assert_fail@plt+0x22cd0>
   35770:	ldr	r0, [sp, #96]	; 0x60
   35774:	ldrb	r0, [r0, #88]	; 0x58
   35778:	tst	r0, #2
   3577c:	beq	357b0 <__assert_fail@plt+0x22d00>
   35780:	mov	sl, #12
   35784:	cmn	r1, #-1073741822	; 0xc0000002
   35788:	bhi	37f74 <__assert_fail@plt+0x254c4>
   3578c:	mov	r0, #4
   35790:	add	r0, r0, r1, lsl #2
   35794:	bl	327ac <__assert_fail@plt+0x1fcfc>
   35798:	ldr	r2, [sp, #88]	; 0x58
   3579c:	ldr	r5, [sp, #92]	; 0x5c
   357a0:	ldr	r7, [sp, #100]	; 0x64
   357a4:	cmp	r0, #0
   357a8:	str	r0, [sp, #204]	; 0xcc
   357ac:	beq	37f74 <__assert_fail@plt+0x254c4>
   357b0:	ldr	r1, [fp, #24]
   357b4:	ldr	r3, [sp, #72]	; 0x48
   357b8:	str	r6, [fp, #-200]	; 0xffffff38
   357bc:	mov	r0, #4
   357c0:	mov	r8, #1
   357c4:	mov	r9, r6
   357c8:	tst	r1, #1
   357cc:	mov	r1, #4
   357d0:	mov	r4, r3
   357d4:	movweq	r1, #6
   357d8:	cmp	r3, r6
   357dc:	str	r1, [sp, #164]	; 0xa4
   357e0:	ldr	r1, [sp, #96]	; 0x60
   357e4:	mvnlt	r8, #0
   357e8:	movlt	r4, r6
   357ec:	movlt	r9, r3
   357f0:	cmp	r5, #0
   357f4:	ldr	r1, [r1, #92]	; 0x5c
   357f8:	str	r1, [sp, #56]	; 0x38
   357fc:	beq	35840 <__assert_fail@plt+0x22d90>
   35800:	cmp	r1, #1
   35804:	beq	35824 <__assert_fail@plt+0x22d74>
   35808:	ldr	r0, [sp, #52]	; 0x34
   3580c:	ldr	r0, [r0, #12]
   35810:	and	r0, r0, #4194304	; 0x400000
   35814:	orr	r0, r2, r0
   35818:	clz	r0, r0
   3581c:	lsr	r0, r0, #5
   35820:	lsl	r0, r0, #2
   35824:	cmp	r2, #0
   35828:	mov	r1, r2
   3582c:	movwne	r1, #1
   35830:	cmp	r3, r6
   35834:	orrge	r1, r1, #2
   35838:	orr	r0, r1, r0
   3583c:	b	35844 <__assert_fail@plt+0x22d94>
   35840:	mov	r0, #8
   35844:	add	r1, sp, #104	; 0x68
   35848:	cmp	r3, r6
   3584c:	sub	r0, r0, #4
   35850:	str	r8, [sp, #60]	; 0x3c
   35854:	str	r4, [sp, #80]	; 0x50
   35858:	str	r9, [sp, #76]	; 0x4c
   3585c:	add	r1, r1, #32
   35860:	str	r0, [sp, #72]	; 0x48
   35864:	str	r1, [sp, #28]
   35868:	sub	r1, fp, #200	; 0xc8
   3586c:	movwlt	r1, #0
   35870:	cmp	r1, #0
   35874:	str	r1, [sp, #40]	; 0x28
   35878:	movwne	r1, #1
   3587c:	str	r1, [sp, #48]	; 0x30
   35880:	sub	r1, fp, #192	; 0xc0
   35884:	add	r1, r1, #16
   35888:	str	r1, [sp, #36]	; 0x24
   3588c:	ldr	r1, [sp, #72]	; 0x48
   35890:	cmp	r1, #4
   35894:	bhi	35978 <__assert_fail@plt+0x22ec8>
   35898:	add	r0, pc, #0
   3589c:	ldr	pc, [r0, r1, lsl #2]
   358a0:			; <UNDEFINED> instruction: 0x000358b4
   358a4:			; <UNDEFINED> instruction: 0x000358b4
   358a8:	andeq	r5, r3, ip, lsr #18
   358ac:	andeq	r5, r3, r4, lsl #18
   358b0:	strdeq	r5, [r3], -ip
   358b4:	mov	sl, #1
   358b8:	cmp	r6, r9
   358bc:	blt	37f74 <__assert_fail@plt+0x254c4>
   358c0:	ldr	r1, [sp, #68]	; 0x44
   358c4:	cmp	r6, r1
   358c8:	mov	r0, #0
   358cc:	ldrblt	r0, [r7, r6]
   358d0:	cmp	r2, #0
   358d4:	ldrbne	r0, [r2, r0]
   358d8:	ldrb	r0, [r5, r0]
   358dc:	cmp	r0, #0
   358e0:	bne	359fc <__assert_fail@plt+0x22f4c>
   358e4:	sub	r0, r6, #1
   358e8:	cmp	r6, r9
   358ec:	mov	r6, r0
   358f0:	str	r0, [fp, #-200]	; 0xffffff38
   358f4:	bgt	358c4 <__assert_fail@plt+0x22e14>
   358f8:	b	37f74 <__assert_fail@plt+0x254c4>
   358fc:	add	r6, r6, #1
   35900:	str	r6, [fp, #-200]	; 0xffffff38
   35904:	cmp	r6, r4
   35908:	bge	35944 <__assert_fail@plt+0x22e94>
   3590c:	ldrb	r0, [r7, r6]
   35910:	ldrb	r0, [r2, r0]
   35914:	ldrb	r0, [r5, r0]
   35918:	cmp	r0, #0
   3591c:	beq	358fc <__assert_fail@plt+0x22e4c>
   35920:	b	35944 <__assert_fail@plt+0x22e94>
   35924:	add	r6, r6, #1
   35928:	str	r6, [fp, #-200]	; 0xffffff38
   3592c:	cmp	r6, r4
   35930:	bge	35944 <__assert_fail@plt+0x22e94>
   35934:	ldrb	r0, [r7, r6]
   35938:	ldrb	r0, [r5, r0]
   3593c:	cmp	r0, #0
   35940:	beq	35924 <__assert_fail@plt+0x22e74>
   35944:	cmp	r6, r4
   35948:	bne	359fc <__assert_fail@plt+0x22f4c>
   3594c:	ldr	r1, [sp, #68]	; 0x44
   35950:	mov	r0, #0
   35954:	mov	r6, r4
   35958:	cmp	r4, r1
   3595c:	ldrblt	r0, [r7, r4]
   35960:	cmp	r2, #0
   35964:	ldrbne	r0, [r2, r0]
   35968:	ldrb	r0, [r5, r0]
   3596c:	cmp	r0, #0
   35970:	bne	359fc <__assert_fail@plt+0x22f4c>
   35974:	b	38130 <__assert_fail@plt+0x25680>
   35978:	ldr	r0, [sp, #128]	; 0x80
   3597c:	ldr	r2, [sp, #136]	; 0x88
   35980:	sub	r1, r6, r0
   35984:	cmp	r1, r2
   35988:	bcs	359d0 <__assert_fail@plt+0x22f20>
   3598c:	ldr	r3, [sp, #132]	; 0x84
   35990:	mov	r2, #0
   35994:	cmp	r1, r3
   35998:	bcs	359a4 <__assert_fail@plt+0x22ef4>
   3599c:	ldr	r2, [sp, #108]	; 0x6c
   359a0:	ldrb	r2, [r2, r1]
   359a4:	ldrb	r1, [r5, r2]
   359a8:	cmp	r1, #0
   359ac:	bne	359fc <__assert_fail@plt+0x22f4c>
   359b0:	add	r6, r6, r8
   359b4:	mov	sl, #1
   359b8:	cmp	r6, r9
   359bc:	str	r6, [fp, #-200]	; 0xffffff38
   359c0:	blt	37f74 <__assert_fail@plt+0x254c4>
   359c4:	cmp	r6, r4
   359c8:	ble	3597c <__assert_fail@plt+0x22ecc>
   359cc:	b	37f74 <__assert_fail@plt+0x254c4>
   359d0:	ldr	r2, [fp, #24]
   359d4:	add	r0, sp, #104	; 0x68
   359d8:	mov	r1, r6
   359dc:	bl	3eeec <__assert_fail@plt+0x2c43c>
   359e0:	cmp	r0, #0
   359e4:	bne	37fdc <__assert_fail@plt+0x2552c>
   359e8:	ldr	r0, [sp, #128]	; 0x80
   359ec:	ldr	r6, [fp, #-200]	; 0xffffff38
   359f0:	ldr	r5, [sp, #92]	; 0x5c
   359f4:	sub	r1, r6, r0
   359f8:	b	3598c <__assert_fail@plt+0x22edc>
   359fc:	ldr	r2, [fp, #24]
   35a00:	add	r0, sp, #104	; 0x68
   35a04:	mov	r1, r6
   35a08:	bl	3eeec <__assert_fail@plt+0x2c43c>
   35a0c:	cmp	r0, #0
   35a10:	bne	37fdc <__assert_fail@plt+0x2552c>
   35a14:	ldr	r0, [sp, #56]	; 0x38
   35a18:	cmp	r0, #1
   35a1c:	ldrne	r0, [sp, #132]	; 0x84
   35a20:	cmpne	r0, #0
   35a24:	bne	35a64 <__assert_fail@plt+0x22fb4>
   35a28:	mov	r0, #0
   35a2c:	str	r0, [sp, #212]	; 0xd4
   35a30:	str	r0, [sp, #224]	; 0xe0
   35a34:	str	r0, [sp, #208]	; 0xd0
   35a38:	str	r0, [fp, #-196]	; 0xffffff3c
   35a3c:	ldr	r4, [sp, #188]	; 0xbc
   35a40:	ldr	r5, [sp, #144]	; 0x90
   35a44:	ldr	r9, [r4, #36]	; 0x24
   35a48:	ldrsb	r0, [r9, #52]	; 0x34
   35a4c:	cmn	r0, #1
   35a50:	ble	35a78 <__assert_fail@plt+0x22fc8>
   35a54:	ldr	r1, [sp, #48]	; 0x30
   35a58:	cmp	r9, #0
   35a5c:	bne	35ba8 <__assert_fail@plt+0x230f8>
   35a60:	b	37e5c <__assert_fail@plt+0x253ac>
   35a64:	ldr	r0, [sp, #112]	; 0x70
   35a68:	ldr	r0, [r0]
   35a6c:	cmn	r0, #1
   35a70:	bne	35a28 <__assert_fail@plt+0x22f78>
   35a74:	b	36e50 <__assert_fail@plt+0x243a0>
   35a78:	cmp	r5, #0
   35a7c:	ble	35ab8 <__assert_fail@plt+0x23008>
   35a80:	ldr	r1, [sp, #152]	; 0x98
   35a84:	sub	r0, r5, #1
   35a88:	cmp	r1, r0
   35a8c:	beq	35b84 <__assert_fail@plt+0x230d4>
   35a90:	ldr	r1, [sp, #184]	; 0xb8
   35a94:	cmp	r1, #2
   35a98:	blt	35acc <__assert_fail@plt+0x2301c>
   35a9c:	ldr	r1, [sp, #112]	; 0x70
   35aa0:	ldr	r6, [r1, r0, lsl #2]
   35aa4:	cmn	r6, #1
   35aa8:	bne	35b00 <__assert_fail@plt+0x23050>
   35aac:	sub	r0, r0, #1
   35ab0:	cmn	r0, #1
   35ab4:	bne	35aa0 <__assert_fail@plt+0x22ff0>
   35ab8:	ldr	r3, [sp, #164]	; 0xa4
   35abc:	ldr	r1, [sp, #48]	; 0x30
   35ac0:	tst	r3, #1
   35ac4:	beq	35b30 <__assert_fail@plt+0x23080>
   35ac8:	b	35b9c <__assert_fail@plt+0x230ec>
   35acc:	ldr	r1, [sp, #108]	; 0x6c
   35ad0:	ldr	r2, [sp, #172]	; 0xac
   35ad4:	mov	r3, #1
   35ad8:	ldrb	r0, [r1, r0]
   35adc:	ubfx	r1, r0, #5, #3
   35ae0:	ldr	r1, [r2, r1, lsl #2]
   35ae4:	and	r2, r0, #31
   35ae8:	tst	r1, r3, lsl r2
   35aec:	ldr	r1, [sp, #48]	; 0x30
   35af0:	bne	35b9c <__assert_fail@plt+0x230ec>
   35af4:	cmp	r0, #10
   35af8:	beq	35b18 <__assert_fail@plt+0x23068>
   35afc:	b	35ba0 <__assert_fail@plt+0x230f0>
   35b00:	ldrb	r0, [sp, #182]	; 0xb6
   35b04:	ldr	r1, [sp, #48]	; 0x30
   35b08:	cmp	r0, #0
   35b0c:	bne	36a98 <__assert_fail@plt+0x23fe8>
   35b10:	cmp	r6, #10
   35b14:	bne	35ba0 <__assert_fail@plt+0x230f0>
   35b18:	ldrb	r0, [sp, #181]	; 0xb5
   35b1c:	cmp	r0, #0
   35b20:	movwne	r0, #1
   35b24:	lsl	r3, r0, #1
   35b28:	tst	r3, #1
   35b2c:	bne	35b9c <__assert_fail@plt+0x230ec>
   35b30:	cmp	r3, #0
   35b34:	beq	35ba0 <__assert_fail@plt+0x230f0>
   35b38:	ands	r1, r3, #2
   35b3c:	and	r0, r3, #4
   35b40:	cmpne	r0, #0
   35b44:	bne	35b74 <__assert_fail@plt+0x230c4>
   35b48:	cmp	r1, #0
   35b4c:	bne	35b7c <__assert_fail@plt+0x230cc>
   35b50:	ldr	r9, [r4, #36]	; 0x24
   35b54:	cmp	r0, #0
   35b58:	beq	35a54 <__assert_fail@plt+0x22fa4>
   35b5c:	ldr	r2, [r9, #40]	; 0x28
   35b60:	sub	r0, fp, #196	; 0xc4
   35b64:	mov	r1, r4
   35b68:	bl	3e8f8 <__assert_fail@plt+0x2be48>
   35b6c:	mov	r9, r0
   35b70:	b	35a54 <__assert_fail@plt+0x22fa4>
   35b74:	ldr	r9, [r4, #48]	; 0x30
   35b78:	b	35a54 <__assert_fail@plt+0x22fa4>
   35b7c:	ldr	r9, [r4, #44]	; 0x2c
   35b80:	b	35a54 <__assert_fail@plt+0x22fa4>
   35b84:	ldr	r0, [sp, #192]	; 0xc0
   35b88:	ldr	r1, [sp, #48]	; 0x30
   35b8c:	and	r0, r0, #2
   35b90:	eor	r3, r0, #10
   35b94:	tst	r3, #1
   35b98:	beq	35b30 <__assert_fail@plt+0x23080>
   35b9c:	ldr	r9, [r4, #40]	; 0x28
   35ba0:	cmp	r9, #0
   35ba4:	beq	37e5c <__assert_fail@plt+0x253ac>
   35ba8:	ldr	r0, [sp, #204]	; 0xcc
   35bac:	mov	r6, r1
   35bb0:	cmp	r0, #0
   35bb4:	beq	35bcc <__assert_fail@plt+0x2311c>
   35bb8:	str	r9, [r0, r5, lsl #2]
   35bbc:	mov	r6, r1
   35bc0:	ldr	r0, [r4, #76]	; 0x4c
   35bc4:	cmp	r0, #0
   35bc8:	bne	368c4 <__assert_fail@plt+0x23e14>
   35bcc:	ldrb	r0, [r9, #52]	; 0x34
   35bd0:	mvn	sl, #0
   35bd4:	tst	r0, #16
   35bd8:	bne	36898 <__assert_fail@plt+0x23de8>
   35bdc:	mov	r0, #0
   35be0:	str	r0, [sp, #64]	; 0x40
   35be4:	ldr	r0, [sp, #144]	; 0x90
   35be8:	ldr	r1, [sp, #160]	; 0xa0
   35bec:	cmp	r1, r0
   35bf0:	ble	35bfc <__assert_fail@plt+0x2314c>
   35bf4:	ldr	r8, [sp, #40]	; 0x28
   35bf8:	b	35c1c <__assert_fail@plt+0x2316c>
   35bfc:	ldr	r8, [sp, #40]	; 0x28
   35c00:	b	364bc <__assert_fail@plt+0x23a0c>
   35c04:	ldr	r6, [sp, #24]
   35c08:	mov	r5, lr
   35c0c:	ldr	r0, [sp, #144]	; 0x90
   35c10:	ldr	r1, [sp, #160]	; 0xa0
   35c14:	cmp	r1, r0
   35c18:	ble	364bc <__assert_fail@plt+0x23a0c>
   35c1c:	ldr	r2, [sp, #140]	; 0x8c
   35c20:	ldr	r1, [sp, #152]	; 0x98
   35c24:	add	r7, r0, #1
   35c28:	mov	r4, r9
   35c2c:	cmp	r7, r2
   35c30:	blt	35c3c <__assert_fail@plt+0x2318c>
   35c34:	cmp	r2, r1
   35c38:	blt	36354 <__assert_fail@plt+0x238a4>
   35c3c:	ldr	r2, [sp, #132]	; 0x84
   35c40:	cmp	r7, r2
   35c44:	blt	35c50 <__assert_fail@plt+0x231a0>
   35c48:	cmp	r2, r1
   35c4c:	blt	36354 <__assert_fail@plt+0x238a4>
   35c50:	ldrb	r0, [r4, #52]	; 0x34
   35c54:	tst	r0, #32
   35c58:	bne	35f14 <__assert_fail@plt+0x23464>
   35c5c:	ldr	r1, [sp, #144]	; 0x90
   35c60:	ldr	r0, [sp, #108]	; 0x6c
   35c64:	add	r2, r1, #1
   35c68:	str	r2, [sp, #144]	; 0x90
   35c6c:	ldrb	r9, [r0, r1]
   35c70:	ldr	r0, [r4, #44]	; 0x2c
   35c74:	cmp	r0, #0
   35c78:	bne	35cac <__assert_fail@plt+0x231fc>
   35c7c:	ldr	r2, [r4, #48]	; 0x30
   35c80:	cmp	r2, #0
   35c84:	bne	36370 <__assert_fail@plt+0x238c0>
   35c88:	ldr	r0, [sp, #188]	; 0xbc
   35c8c:	mov	r1, r4
   35c90:	bl	4273c <__assert_fail@plt+0x2fc8c>
   35c94:	cmp	r0, #0
   35c98:	bne	35c70 <__assert_fail@plt+0x231c0>
   35c9c:	mov	r0, #12
   35ca0:	mov	r9, #0
   35ca4:	str	r0, [fp, #-196]	; 0xffffff3c
   35ca8:	b	35cb0 <__assert_fail@plt+0x23200>
   35cac:	ldr	r9, [r0, r9, lsl #2]
   35cb0:	ldr	r0, [sp, #204]	; 0xcc
   35cb4:	cmp	r0, #0
   35cb8:	beq	35cd0 <__assert_fail@plt+0x23220>
   35cbc:	sub	r0, fp, #196	; 0xc4
   35cc0:	add	r1, sp, #104	; 0x68
   35cc4:	mov	r2, r9
   35cc8:	bl	4060c <__assert_fail@plt+0x2db5c>
   35ccc:	mov	r9, r0
   35cd0:	cmp	r9, #0
   35cd4:	beq	35d28 <__assert_fail@plt+0x23278>
   35cd8:	sub	r0, r4, r9
   35cdc:	clz	r0, r0
   35ce0:	lsr	r0, r0, #5
   35ce4:	ands	r6, r6, r0
   35ce8:	ldrb	r0, [r9, #52]	; 0x34
   35cec:	moveq	r7, r5
   35cf0:	mov	r5, r7
   35cf4:	tst	r0, #16
   35cf8:	beq	35c0c <__assert_fail@plt+0x2315c>
   35cfc:	sxtb	r0, r0
   35d00:	cmn	r0, #1
   35d04:	ble	35db4 <__assert_fail@plt+0x23304>
   35d08:	ldr	r0, [sp, #44]	; 0x2c
   35d0c:	ldr	sl, [sp, #144]	; 0x90
   35d10:	cmp	r0, #0
   35d14:	beq	364d0 <__assert_fail@plt+0x23a20>
   35d18:	mov	r8, #0
   35d1c:	mov	r0, #1
   35d20:	str	r0, [sp, #64]	; 0x40
   35d24:	b	35c0c <__assert_fail@plt+0x2315c>
   35d28:	ldr	r0, [fp, #-196]	; 0xffffff3c
   35d2c:	cmp	r0, #0
   35d30:	bne	37e5c <__assert_fail@plt+0x253ac>
   35d34:	ldr	r0, [sp, #64]	; 0x40
   35d38:	ldr	r1, [sp, #44]	; 0x2c
   35d3c:	cmp	r0, #0
   35d40:	mvn	r1, r1
   35d44:	movwne	r0, #1
   35d48:	tst	r1, r0
   35d4c:	bne	364bc <__assert_fail@plt+0x23a0c>
   35d50:	ldr	r0, [sp, #204]	; 0xcc
   35d54:	cmp	r0, #0
   35d58:	beq	364bc <__assert_fail@plt+0x23a0c>
   35d5c:	ldr	r2, [sp, #144]	; 0x90
   35d60:	ldr	r1, [sp, #208]	; 0xd0
   35d64:	add	r0, r0, #4
   35d68:	cmp	r2, r1
   35d6c:	bge	364bc <__assert_fail@plt+0x23a0c>
   35d70:	add	r3, r2, #1
   35d74:	str	r3, [sp, #144]	; 0x90
   35d78:	ldr	r2, [r0, r2, lsl #2]
   35d7c:	cmp	r2, #0
   35d80:	mov	r2, r3
   35d84:	beq	35d68 <__assert_fail@plt+0x232b8>
   35d88:	sub	r0, fp, #196	; 0xc4
   35d8c:	add	r1, sp, #104	; 0x68
   35d90:	mov	r2, #0
   35d94:	bl	4060c <__assert_fail@plt+0x2db5c>
   35d98:	cmp	r0, #0
   35d9c:	mov	r9, r0
   35da0:	ldreq	r0, [fp, #-196]	; 0xffffff3c
   35da4:	cmpeq	r0, #0
   35da8:	bne	35dfc <__assert_fail@plt+0x2334c>
   35dac:	ldr	r0, [sp, #204]	; 0xcc
   35db0:	b	35d5c <__assert_fail@plt+0x232ac>
   35db4:	ldr	r0, [sp, #144]	; 0x90
   35db8:	cmn	r0, #1
   35dbc:	ble	35df4 <__assert_fail@plt+0x23344>
   35dc0:	ldr	r1, [sp, #152]	; 0x98
   35dc4:	cmp	r1, r0
   35dc8:	beq	36428 <__assert_fail@plt+0x23978>
   35dcc:	ldr	r1, [sp, #184]	; 0xb8
   35dd0:	cmp	r1, #2
   35dd4:	blt	35e08 <__assert_fail@plt+0x23358>
   35dd8:	ldr	r1, [sp, #112]	; 0x70
   35ddc:	ldr	r4, [r1, r0, lsl #2]
   35de0:	cmn	r4, #1
   35de4:	bne	35e38 <__assert_fail@plt+0x23388>
   35de8:	sub	r0, r0, #1
   35dec:	cmn	r0, #1
   35df0:	bne	35ddc <__assert_fail@plt+0x2332c>
   35df4:	ldr	r3, [sp, #164]	; 0xa4
   35df8:	b	35e60 <__assert_fail@plt+0x233b0>
   35dfc:	cmp	r9, #0
   35e00:	bne	35cd8 <__assert_fail@plt+0x23228>
   35e04:	b	364bc <__assert_fail@plt+0x23a0c>
   35e08:	ldr	r1, [sp, #108]	; 0x6c
   35e0c:	ldr	r2, [sp, #172]	; 0xac
   35e10:	mov	r3, #1
   35e14:	ldrb	r0, [r1, r0]
   35e18:	ubfx	r1, r0, #5, #3
   35e1c:	ldr	r1, [r2, r1, lsl #2]
   35e20:	and	r2, r0, #31
   35e24:	tst	r1, r3, lsl r2
   35e28:	moveq	r3, #0
   35e2c:	cmpeq	r0, #10
   35e30:	bne	35e60 <__assert_fail@plt+0x233b0>
   35e34:	b	35e50 <__assert_fail@plt+0x233a0>
   35e38:	ldrb	r0, [sp, #182]	; 0xb6
   35e3c:	cmp	r0, #0
   35e40:	bne	36450 <__assert_fail@plt+0x239a0>
   35e44:	mov	r3, #0
   35e48:	cmp	r4, #10
   35e4c:	bne	35e60 <__assert_fail@plt+0x233b0>
   35e50:	ldrb	r0, [sp, #181]	; 0xb5
   35e54:	cmp	r0, #0
   35e58:	movwne	r0, #1
   35e5c:	lsl	r3, r0, #1
   35e60:	ldr	r0, [r9, #8]
   35e64:	cmp	r0, #1
   35e68:	blt	35c0c <__assert_fail@plt+0x2315c>
   35e6c:	ldr	r1, [sp, #188]	; 0xbc
   35e70:	mov	lr, r5
   35e74:	ldr	r7, [r9, #12]
   35e78:	and	ip, r3, #8
   35e7c:	and	r2, r3, #2
   35e80:	and	r3, r3, #1
   35e84:	str	r6, [sp, #24]
   35e88:	ldr	r5, [r1]
   35e8c:	b	35e9c <__assert_fail@plt+0x233ec>
   35e90:	add	r7, r7, #4
   35e94:	subs	r0, r0, #1
   35e98:	beq	35c04 <__assert_fail@plt+0x23154>
   35e9c:	ldr	r4, [r7]
   35ea0:	add	r1, r5, r4, lsl #3
   35ea4:	ldr	r1, [r1, #4]
   35ea8:	uxtb	r6, r1
   35eac:	cmp	r6, #2
   35eb0:	bne	35e90 <__assert_fail@plt+0x233e0>
   35eb4:	movw	r6, #65280	; 0xff00
   35eb8:	movt	r6, #3
   35ebc:	tst	r1, r6
   35ec0:	beq	35f00 <__assert_fail@plt+0x23450>
   35ec4:	cmp	r3, #0
   35ec8:	bne	35ed4 <__assert_fail@plt+0x23424>
   35ecc:	ands	r6, r1, #1024	; 0x400
   35ed0:	bne	35e90 <__assert_fail@plt+0x233e0>
   35ed4:	cmp	r3, #0
   35ed8:	andsne	r6, r1, #2048	; 0x800
   35edc:	bne	35e90 <__assert_fail@plt+0x233e0>
   35ee0:	cmp	r2, #0
   35ee4:	bne	35ef0 <__assert_fail@plt+0x23440>
   35ee8:	ands	r6, r1, #8192	; 0x2000
   35eec:	bne	35e90 <__assert_fail@plt+0x233e0>
   35ef0:	cmp	ip, #0
   35ef4:	bne	35f00 <__assert_fail@plt+0x23450>
   35ef8:	ands	r1, r1, #32768	; 0x8000
   35efc:	bne	35e90 <__assert_fail@plt+0x233e0>
   35f00:	ldr	r6, [sp, #24]
   35f04:	cmp	r4, #0
   35f08:	mov	r5, lr
   35f0c:	bne	35d08 <__assert_fail@plt+0x23258>
   35f10:	b	35c0c <__assert_fail@plt+0x2315c>
   35f14:	ldr	r0, [r4, #8]
   35f18:	str	r6, [sp, #24]
   35f1c:	cmp	r0, #1
   35f20:	blt	363bc <__assert_fail@plt+0x2390c>
   35f24:	ldr	ip, [sp, #188]	; 0xbc
   35f28:	mov	r6, #0
   35f2c:	str	r5, [sp, #12]
   35f30:	str	ip, [sp, #20]
   35f34:	b	35f48 <__assert_fail@plt+0x23498>
   35f38:	ldr	r0, [r4, #8]
   35f3c:	add	r6, r6, #1
   35f40:	cmp	r6, r0
   35f44:	bge	363bc <__assert_fail@plt+0x2390c>
   35f48:	ldr	r0, [r4, #12]
   35f4c:	ldr	r1, [r0, r6, lsl #2]
   35f50:	ldr	r0, [ip]
   35f54:	add	r0, r0, r1, lsl #3
   35f58:	ldr	r3, [r0, #4]
   35f5c:	tst	r3, #1048576	; 0x100000
   35f60:	beq	35f38 <__assert_fail@plt+0x23488>
   35f64:	movw	r0, #65280	; 0xff00
   35f68:	movt	r0, #3
   35f6c:	tst	r3, r0
   35f70:	beq	36080 <__assert_fail@plt+0x235d0>
   35f74:	ldr	r0, [sp, #144]	; 0x90
   35f78:	cmn	r0, #1
   35f7c:	ble	35fb8 <__assert_fail@plt+0x23508>
   35f80:	ldr	r2, [sp, #152]	; 0x98
   35f84:	cmp	r2, r0
   35f88:	beq	3629c <__assert_fail@plt+0x237ec>
   35f8c:	ldr	r2, [sp, #184]	; 0xb8
   35f90:	cmp	r2, #2
   35f94:	blt	35fc0 <__assert_fail@plt+0x23510>
   35f98:	ldr	r2, [sp, #112]	; 0x70
   35f9c:	ldr	r5, [sp, #12]
   35fa0:	ldr	r9, [r2, r0, lsl #2]
   35fa4:	cmn	r9, #1
   35fa8:	bne	36004 <__assert_fail@plt+0x23554>
   35fac:	sub	r0, r0, #1
   35fb0:	cmn	r0, #1
   35fb4:	bne	35fa0 <__assert_fail@plt+0x234f0>
   35fb8:	ldr	lr, [sp, #164]	; 0xa4
   35fbc:	b	3602c <__assert_fail@plt+0x2357c>
   35fc0:	mov	r9, r3
   35fc4:	ldr	r3, [sp, #108]	; 0x6c
   35fc8:	ldr	r2, [sp, #172]	; 0xac
   35fcc:	mov	lr, #1
   35fd0:	ldrb	r0, [r3, r0]
   35fd4:	ubfx	r3, r0, #5, #3
   35fd8:	and	r5, r0, #31
   35fdc:	ldr	r3, [r2, r3, lsl #2]
   35fe0:	mov	r2, #0
   35fe4:	tst	r3, lr, lsl r5
   35fe8:	ldr	r5, [sp, #12]
   35fec:	bne	36044 <__assert_fail@plt+0x23594>
   35ff0:	mov	r3, r9
   35ff4:	mov	lr, #0
   35ff8:	cmp	r0, #10
   35ffc:	beq	3601c <__assert_fail@plt+0x2356c>
   36000:	b	3602c <__assert_fail@plt+0x2357c>
   36004:	ldrb	r0, [sp, #182]	; 0xb6
   36008:	cmp	r0, #0
   3600c:	bne	362d4 <__assert_fail@plt+0x23824>
   36010:	mov	lr, #0
   36014:	cmp	r9, #10
   36018:	bne	3602c <__assert_fail@plt+0x2357c>
   3601c:	ldrb	r0, [sp, #181]	; 0xb5
   36020:	cmp	r0, #0
   36024:	movwne	r0, #1
   36028:	lsl	lr, r0, #1
   3602c:	and	r0, lr, #1
   36030:	tst	r3, #1024	; 0x400
   36034:	eor	r2, r0, #1
   36038:	beq	36044 <__assert_fail@plt+0x23594>
   3603c:	cmp	r0, #0
   36040:	beq	35f38 <__assert_fail@plt+0x23488>
   36044:	ldr	r0, [ip]
   36048:	cmp	r2, #0
   3604c:	add	r0, r0, r1, lsl #3
   36050:	ldr	r0, [r0, #4]
   36054:	bne	36060 <__assert_fail@plt+0x235b0>
   36058:	ands	r2, r0, #2048	; 0x800
   3605c:	bne	35f38 <__assert_fail@plt+0x23488>
   36060:	tst	lr, #2
   36064:	bne	36070 <__assert_fail@plt+0x235c0>
   36068:	ands	r2, r0, #8192	; 0x2000
   3606c:	bne	35f38 <__assert_fail@plt+0x23488>
   36070:	tst	lr, #8
   36074:	bne	36080 <__assert_fail@plt+0x235d0>
   36078:	ands	r0, r0, #32768	; 0x8000
   3607c:	bne	35f38 <__assert_fail@plt+0x23488>
   36080:	ldr	r3, [sp, #144]	; 0x90
   36084:	mov	r0, ip
   36088:	add	r2, sp, #104	; 0x68
   3608c:	str	r6, [sp, #16]
   36090:	mov	r9, r1
   36094:	bl	421c8 <__assert_fail@plt+0x2f718>
   36098:	ldr	r6, [sp, #16]
   3609c:	ldr	ip, [sp, #20]
   360a0:	cmp	r0, #0
   360a4:	beq	35f38 <__assert_fail@plt+0x23488>
   360a8:	ldr	r1, [sp, #224]	; 0xe0
   360ac:	mov	r3, r9
   360b0:	cmp	r1, r0
   360b4:	movlt	r1, r0
   360b8:	str	r1, [sp, #224]	; 0xe0
   360bc:	ldr	r6, [sp, #144]	; 0x90
   360c0:	ldr	r2, [sp, #140]	; 0x8c
   360c4:	ldr	r1, [sp, #152]	; 0x98
   360c8:	ldr	r5, [sp, #208]	; 0xd0
   360cc:	add	r6, r6, r0
   360d0:	cmp	r2, r6
   360d4:	cmple	r2, r1
   360d8:	blt	360ec <__assert_fail@plt+0x2363c>
   360dc:	ldr	r0, [sp, #132]	; 0x84
   360e0:	cmp	r0, r6
   360e4:	cmple	r0, r1
   360e8:	bge	36108 <__assert_fail@plt+0x23658>
   360ec:	add	r1, r6, #1
   360f0:	add	r0, sp, #104	; 0x68
   360f4:	bl	40410 <__assert_fail@plt+0x2d960>
   360f8:	ldr	ip, [sp, #20]
   360fc:	mov	r3, r9
   36100:	cmp	r0, #0
   36104:	bne	36438 <__assert_fail@plt+0x23988>
   36108:	cmp	r6, r5
   3610c:	ble	36138 <__assert_fail@plt+0x23688>
   36110:	sub	r0, r6, r5
   36114:	mov	r1, #0
   36118:	lsl	r2, r0, #2
   3611c:	ldr	r0, [sp, #204]	; 0xcc
   36120:	add	r0, r0, r5, lsl #2
   36124:	add	r0, r0, #4
   36128:	bl	12834 <memset@plt>
   3612c:	ldr	ip, [sp, #20]
   36130:	mov	r3, r9
   36134:	str	r6, [sp, #208]	; 0xd0
   36138:	mov	r0, #0
   3613c:	str	r0, [fp, #-48]	; 0xffffffd0
   36140:	ldr	r0, [sp, #204]	; 0xcc
   36144:	ldr	r1, [ip, #24]
   36148:	ldr	r9, [r0, r6, lsl #2]
   3614c:	ldr	r0, [ip, #12]
   36150:	ldr	r0, [r0, r3, lsl #2]
   36154:	cmp	r9, #0
   36158:	add	r0, r0, r0, lsl #1
   3615c:	add	r2, r1, r0, lsl #2
   36160:	beq	36184 <__assert_fail@plt+0x236d4>
   36164:	ldr	r1, [r9, #40]	; 0x28
   36168:	sub	r0, fp, #192	; 0xc0
   3616c:	bl	4081c <__assert_fail@plt+0x2dd6c>
   36170:	ldr	r5, [sp, #12]
   36174:	cmp	r0, #0
   36178:	str	r0, [fp, #-48]	; 0xffffffd0
   3617c:	beq	36198 <__assert_fail@plt+0x236e8>
   36180:	b	36440 <__assert_fail@plt+0x23990>
   36184:	vldr	d16, [r2]
   36188:	ldr	r0, [r2, #8]
   3618c:	ldr	r5, [sp, #12]
   36190:	str	r0, [fp, #-184]	; 0xffffff48
   36194:	vstr	d16, [fp, #-192]	; 0xffffff40
   36198:	cmp	r6, #0
   3619c:	str	r6, [sp, #8]
   361a0:	str	r9, [sp, #4]
   361a4:	ble	362b0 <__assert_fail@plt+0x23800>
   361a8:	ldr	r1, [sp, #152]	; 0x98
   361ac:	sub	r3, r6, #1
   361b0:	cmp	r1, r3
   361b4:	ldr	r1, [sp, #20]
   361b8:	beq	362c0 <__assert_fail@plt+0x23810>
   361bc:	ldr	r0, [sp, #184]	; 0xb8
   361c0:	cmp	r0, #2
   361c4:	blt	361f0 <__assert_fail@plt+0x23740>
   361c8:	ldr	r2, [sp, #112]	; 0x70
   361cc:	sub	r0, fp, #48	; 0x30
   361d0:	ldr	r9, [r2, r3, lsl #2]
   361d4:	cmn	r9, #1
   361d8:	bne	36224 <__assert_fail@plt+0x23774>
   361dc:	sub	r3, r3, #1
   361e0:	cmn	r3, #1
   361e4:	bne	361d0 <__assert_fail@plt+0x23720>
   361e8:	ldr	r3, [sp, #164]	; 0xa4
   361ec:	b	3624c <__assert_fail@plt+0x2379c>
   361f0:	ldr	r0, [sp, #108]	; 0x6c
   361f4:	ldr	r2, [sp, #172]	; 0xac
   361f8:	ldrb	r6, [r0, r3]
   361fc:	mov	r3, #1
   36200:	ubfx	r0, r6, #5, #3
   36204:	ldr	r0, [r2, r0, lsl #2]
   36208:	and	r2, r6, #31
   3620c:	tst	r0, r3, lsl r2
   36210:	sub	r0, fp, #48	; 0x30
   36214:	moveq	r3, #0
   36218:	cmpeq	r6, #10
   3621c:	bne	3624c <__assert_fail@plt+0x2379c>
   36220:	b	3623c <__assert_fail@plt+0x2378c>
   36224:	ldrb	r2, [sp, #182]	; 0xb6
   36228:	cmp	r2, #0
   3622c:	bne	36310 <__assert_fail@plt+0x23860>
   36230:	mov	r3, #0
   36234:	cmp	r9, #10
   36238:	bne	3624c <__assert_fail@plt+0x2379c>
   3623c:	ldrb	r2, [sp, #181]	; 0xb5
   36240:	cmp	r2, #0
   36244:	movwne	r2, #1
   36248:	lsl	r3, r2, #1
   3624c:	sub	r2, fp, #192	; 0xc0
   36250:	bl	3e8f8 <__assert_fail@plt+0x2be48>
   36254:	ldr	r1, [sp, #204]	; 0xcc
   36258:	ldr	r6, [sp, #8]
   3625c:	str	r0, [r1, r6, lsl #2]
   36260:	ldr	r0, [sp, #4]
   36264:	cmp	r0, #0
   36268:	beq	36274 <__assert_fail@plt+0x237c4>
   3626c:	ldr	r0, [fp, #-184]	; 0xffffff48
   36270:	bl	30174 <__assert_fail@plt+0x1d6c4>
   36274:	ldr	r0, [sp, #204]	; 0xcc
   36278:	ldr	ip, [sp, #20]
   3627c:	ldr	r0, [r0, r6, lsl #2]
   36280:	ldr	r6, [sp, #16]
   36284:	cmp	r0, #0
   36288:	bne	35f38 <__assert_fail@plt+0x23488>
   3628c:	ldr	r0, [fp, #-48]	; 0xffffffd0
   36290:	cmp	r0, #0
   36294:	beq	35f38 <__assert_fail@plt+0x23488>
   36298:	b	36440 <__assert_fail@plt+0x23990>
   3629c:	ldr	r0, [sp, #192]	; 0xc0
   362a0:	ldr	r5, [sp, #12]
   362a4:	and	r0, r0, #2
   362a8:	eor	lr, r0, #10
   362ac:	b	3602c <__assert_fail@plt+0x2357c>
   362b0:	ldr	r3, [sp, #164]	; 0xa4
   362b4:	ldr	r1, [sp, #20]
   362b8:	sub	r0, fp, #48	; 0x30
   362bc:	b	3624c <__assert_fail@plt+0x2379c>
   362c0:	ldr	r0, [sp, #192]	; 0xc0
   362c4:	and	r0, r0, #2
   362c8:	eor	r3, r0, #10
   362cc:	sub	r0, fp, #48	; 0x30
   362d0:	b	3624c <__assert_fail@plt+0x2379c>
   362d4:	mov	r0, r9
   362d8:	str	r3, [sp, #4]
   362dc:	str	r1, [sp, #8]
   362e0:	bl	12810 <iswalnum@plt>
   362e4:	mov	lr, #1
   362e8:	mov	r2, #0
   362ec:	cmp	r9, #95	; 0x5f
   362f0:	beq	3633c <__assert_fail@plt+0x2388c>
   362f4:	ldr	r5, [sp, #12]
   362f8:	ldr	ip, [sp, #20]
   362fc:	ldr	r1, [sp, #8]
   36300:	ldr	r3, [sp, #4]
   36304:	cmp	r0, #0
   36308:	beq	36010 <__assert_fail@plt+0x23560>
   3630c:	b	36044 <__assert_fail@plt+0x23594>
   36310:	mov	r0, r9
   36314:	bl	12810 <iswalnum@plt>
   36318:	mov	r3, #1
   3631c:	cmp	r9, #95	; 0x5f
   36320:	beq	3634c <__assert_fail@plt+0x2389c>
   36324:	ldr	r5, [sp, #12]
   36328:	ldr	r1, [sp, #20]
   3632c:	cmp	r0, #0
   36330:	sub	r0, fp, #48	; 0x30
   36334:	beq	36230 <__assert_fail@plt+0x23780>
   36338:	b	3624c <__assert_fail@plt+0x2379c>
   3633c:	ldr	r5, [sp, #12]
   36340:	ldr	ip, [sp, #20]
   36344:	ldr	r1, [sp, #8]
   36348:	b	36044 <__assert_fail@plt+0x23594>
   3634c:	ldr	r5, [sp, #12]
   36350:	b	362b4 <__assert_fail@plt+0x23804>
   36354:	add	r1, r0, #2
   36358:	add	r0, sp, #104	; 0x68
   3635c:	bl	40410 <__assert_fail@plt+0x2d960>
   36360:	cmp	r0, #0
   36364:	str	r0, [fp, #-196]	; 0xffffff3c
   36368:	beq	35c50 <__assert_fail@plt+0x231a0>
   3636c:	b	37e5c <__assert_fail@plt+0x253ac>
   36370:	ldr	r0, [sp, #144]	; 0x90
   36374:	cmp	r0, #0
   36378:	ble	363b4 <__assert_fail@plt+0x23904>
   3637c:	ldr	r1, [sp, #152]	; 0x98
   36380:	sub	r3, r0, #1
   36384:	cmp	r1, r3
   36388:	beq	36470 <__assert_fail@plt+0x239c0>
   3638c:	ldr	r1, [sp, #184]	; 0xb8
   36390:	cmp	r1, #2
   36394:	blt	363cc <__assert_fail@plt+0x2391c>
   36398:	ldr	r1, [sp, #112]	; 0x70
   3639c:	ldr	r0, [r1, r3, lsl #2]
   363a0:	cmn	r0, #1
   363a4:	bne	363f4 <__assert_fail@plt+0x23944>
   363a8:	sub	r3, r3, #1
   363ac:	cmn	r3, #1
   363b0:	bne	3639c <__assert_fail@plt+0x238ec>
   363b4:	ldr	r1, [sp, #164]	; 0xa4
   363b8:	b	3641c <__assert_fail@plt+0x2396c>
   363bc:	ldr	r6, [sp, #24]
   363c0:	mov	r0, #0
   363c4:	str	r0, [fp, #-196]	; 0xffffff3c
   363c8:	b	35c5c <__assert_fail@plt+0x231ac>
   363cc:	ldr	r1, [sp, #108]	; 0x6c
   363d0:	ldr	ip, [sp, #172]	; 0xac
   363d4:	ldrb	r0, [r1, r3]
   363d8:	ubfx	r1, r0, #5, #3
   363dc:	and	r3, r0, #31
   363e0:	ldr	ip, [ip, r1, lsl #2]
   363e4:	mov	r1, #1
   363e8:	tst	ip, r1, lsl r3
   363ec:	bne	3641c <__assert_fail@plt+0x2396c>
   363f0:	b	36400 <__assert_fail@plt+0x23950>
   363f4:	ldrb	r1, [sp, #182]	; 0xb6
   363f8:	cmp	r1, #0
   363fc:	bne	36478 <__assert_fail@plt+0x239c8>
   36400:	mov	r1, #0
   36404:	cmp	r0, #10
   36408:	bne	3641c <__assert_fail@plt+0x2396c>
   3640c:	ldrb	r0, [sp, #181]	; 0xb5
   36410:	cmp	r0, #0
   36414:	movwne	r0, #1
   36418:	lsl	r1, r0, #1
   3641c:	bfi	r9, r1, #8, #1
   36420:	ldr	r9, [r2, r9, lsl #2]
   36424:	b	35cb0 <__assert_fail@plt+0x23200>
   36428:	ldr	r0, [sp, #192]	; 0xc0
   3642c:	and	r0, r0, #2
   36430:	eor	r3, r0, #10
   36434:	b	35e60 <__assert_fail@plt+0x233b0>
   36438:	ldr	r5, [sp, #12]
   3643c:	str	r0, [fp, #-48]	; 0xffffffd0
   36440:	ldr	r6, [sp, #24]
   36444:	str	r0, [fp, #-196]	; 0xffffff3c
   36448:	mov	r9, #0
   3644c:	b	35cb0 <__assert_fail@plt+0x23200>
   36450:	mov	r0, r4
   36454:	bl	12810 <iswalnum@plt>
   36458:	mov	r3, #1
   3645c:	cmp	r4, #95	; 0x5f
   36460:	beq	35e60 <__assert_fail@plt+0x233b0>
   36464:	cmp	r0, #0
   36468:	beq	35e44 <__assert_fail@plt+0x23394>
   3646c:	b	35e60 <__assert_fail@plt+0x233b0>
   36470:	mov	r1, #10
   36474:	b	3641c <__assert_fail@plt+0x2396c>
   36478:	str	r5, [sp, #12]
   3647c:	str	r2, [sp, #24]
   36480:	mov	r5, r0
   36484:	bl	12810 <iswalnum@plt>
   36488:	mov	r1, #1
   3648c:	cmp	r5, #95	; 0x5f
   36490:	beq	364b0 <__assert_fail@plt+0x23a00>
   36494:	mov	r3, r5
   36498:	ldr	r5, [sp, #12]
   3649c:	ldr	r2, [sp, #24]
   364a0:	cmp	r0, #0
   364a4:	mov	r0, r3
   364a8:	beq	36400 <__assert_fail@plt+0x23950>
   364ac:	b	3641c <__assert_fail@plt+0x2396c>
   364b0:	ldr	r5, [sp, #12]
   364b4:	ldr	r2, [sp, #24]
   364b8:	b	3641c <__assert_fail@plt+0x2396c>
   364bc:	cmp	r8, #0
   364c0:	beq	364d0 <__assert_fail@plt+0x23a20>
   364c4:	ldr	r0, [r8]
   364c8:	add	r0, r0, r5
   364cc:	str	r0, [r8]
   364d0:	ldr	r8, [sp, #60]	; 0x3c
   364d4:	ldr	r4, [sp, #80]	; 0x50
   364d8:	ldr	r9, [sp, #76]	; 0x4c
   364dc:	cmn	sl, #1
   364e0:	beq	36e48 <__assert_fail@plt+0x24398>
   364e4:	cmn	sl, #2
   364e8:	beq	37e5c <__assert_fail@plt+0x253ac>
   364ec:	ldr	r9, [sp, #52]	; 0x34
   364f0:	str	sl, [sp, #196]	; 0xc4
   364f4:	ldr	r2, [sp, #84]	; 0x54
   364f8:	ldr	lr, [sp, #96]	; 0x60
   364fc:	ldrb	r0, [r9, #28]
   36500:	cmp	r2, #2
   36504:	bcc	36510 <__assert_fail@plt+0x23a60>
   36508:	ands	r1, r0, #16
   3650c:	beq	3651c <__assert_fail@plt+0x23a6c>
   36510:	ldr	r1, [lr, #76]	; 0x4c
   36514:	cmp	r1, #0
   36518:	beq	3667c <__assert_fail@plt+0x23bcc>
   3651c:	ldr	r0, [sp, #204]	; 0xcc
   36520:	cmn	sl, #1
   36524:	ldr	r6, [r0, sl, lsl #2]
   36528:	ble	36560 <__assert_fail@plt+0x23ab0>
   3652c:	ldr	r0, [sp, #152]	; 0x98
   36530:	cmp	r0, sl
   36534:	beq	369b8 <__assert_fail@plt+0x23f08>
   36538:	ldr	r0, [sp, #184]	; 0xb8
   3653c:	cmp	r0, #2
   36540:	blt	36570 <__assert_fail@plt+0x23ac0>
   36544:	ldr	r0, [sp, #112]	; 0x70
   36548:	ldr	r4, [r0, sl, lsl #2]
   3654c:	cmn	r4, #1
   36550:	bne	365a8 <__assert_fail@plt+0x23af8>
   36554:	sub	sl, sl, #1
   36558:	cmn	sl, #1
   3655c:	bne	36548 <__assert_fail@plt+0x23a98>
   36560:	ldr	r3, [sp, #164]	; 0xa4
   36564:	movw	sl, #65280	; 0xff00
   36568:	movt	sl, #3
   3656c:	b	365d8 <__assert_fail@plt+0x23b28>
   36570:	ldr	r0, [sp, #108]	; 0x6c
   36574:	ldr	r1, [sp, #172]	; 0xac
   36578:	mov	r3, #1
   3657c:	ldrb	r0, [r0, sl]
   36580:	movw	sl, #65280	; 0xff00
   36584:	movt	sl, #3
   36588:	ubfx	r2, r0, #5, #3
   3658c:	ldr	r1, [r1, r2, lsl #2]
   36590:	and	r2, r0, #31
   36594:	tst	r1, r3, lsl r2
   36598:	moveq	r3, #0
   3659c:	cmpeq	r0, #10
   365a0:	bne	365d8 <__assert_fail@plt+0x23b28>
   365a4:	b	365c8 <__assert_fail@plt+0x23b18>
   365a8:	ldrb	r0, [sp, #182]	; 0xb6
   365ac:	movw	sl, #65280	; 0xff00
   365b0:	movt	sl, #3
   365b4:	cmp	r0, #0
   365b8:	bne	36a70 <__assert_fail@plt+0x23fc0>
   365bc:	mov	r3, #0
   365c0:	cmp	r4, #10
   365c4:	bne	365d8 <__assert_fail@plt+0x23b28>
   365c8:	ldrb	r0, [sp, #181]	; 0xb5
   365cc:	cmp	r0, #0
   365d0:	movwne	r0, #1
   365d4:	lsl	r3, r0, #1
   365d8:	ldr	r0, [r6, #8]
   365dc:	cmp	r0, #1
   365e0:	blt	3666c <__assert_fail@plt+0x23bbc>
   365e4:	ldr	r7, [r6, #12]
   365e8:	ldr	r6, [sp, #188]	; 0xbc
   365ec:	and	ip, r3, #8
   365f0:	and	r2, r3, #2
   365f4:	and	r3, r3, #1
   365f8:	ldr	r6, [r6]
   365fc:	b	3660c <__assert_fail@plt+0x23b5c>
   36600:	add	r7, r7, #4
   36604:	subs	r0, r0, #1
   36608:	beq	3666c <__assert_fail@plt+0x23bbc>
   3660c:	ldr	r5, [r7]
   36610:	add	r4, r6, r5, lsl #3
   36614:	ldr	r4, [r4, #4]
   36618:	uxtb	r1, r4
   3661c:	cmp	r1, #2
   36620:	bne	36600 <__assert_fail@plt+0x23b50>
   36624:	tst	r4, sl
   36628:	beq	36670 <__assert_fail@plt+0x23bc0>
   3662c:	cmp	r3, #0
   36630:	bne	3663c <__assert_fail@plt+0x23b8c>
   36634:	ands	r1, r4, #1024	; 0x400
   36638:	bne	36600 <__assert_fail@plt+0x23b50>
   3663c:	cmp	r3, #0
   36640:	andsne	r1, r4, #2048	; 0x800
   36644:	bne	36600 <__assert_fail@plt+0x23b50>
   36648:	cmp	r2, #0
   3664c:	bne	36658 <__assert_fail@plt+0x23ba8>
   36650:	ands	r1, r4, #8192	; 0x2000
   36654:	bne	36600 <__assert_fail@plt+0x23b50>
   36658:	cmp	ip, #0
   3665c:	bne	36670 <__assert_fail@plt+0x23bc0>
   36660:	ands	r1, r4, #32768	; 0x8000
   36664:	bne	36600 <__assert_fail@plt+0x23b50>
   36668:	b	36670 <__assert_fail@plt+0x23bc0>
   3666c:	mov	r5, #0
   36670:	str	r5, [sp, #200]	; 0xc8
   36674:	ldr	r2, [sp, #84]	; 0x54
   36678:	ldrb	r0, [r9, #28]
   3667c:	ldr	r4, [sp, #80]	; 0x50
   36680:	ldr	r9, [sp, #76]	; 0x4c
   36684:	cmp	r2, #2
   36688:	bcc	366a0 <__assert_fail@plt+0x23bf0>
   3668c:	ands	r0, r0, #16
   36690:	bne	366a0 <__assert_fail@plt+0x23bf0>
   36694:	ldrb	r0, [lr, #88]	; 0x58
   36698:	tst	r0, #1
   3669c:	bne	366ac <__assert_fail@plt+0x23bfc>
   366a0:	ldr	r0, [lr, #76]	; 0x4c
   366a4:	cmp	r0, #0
   366a8:	beq	36f20 <__assert_fail@plt+0x24470>
   366ac:	ldr	r6, [sp, #196]	; 0xc4
   366b0:	cmn	r6, #-1073741823	; 0xc0000001
   366b4:	bcs	37e5c <__assert_fail@plt+0x253ac>
   366b8:	ldr	r0, [sp, #188]	; 0xbc
   366bc:	ldr	r8, [sp, #200]	; 0xc8
   366c0:	str	r0, [sp, #64]	; 0x40
   366c4:	mov	r0, #4
   366c8:	add	r5, r0, r6, lsl #2
   366cc:	mov	r0, r5
   366d0:	bl	327ac <__assert_fail@plt+0x1fcfc>
   366d4:	mov	r7, r0
   366d8:	cmp	r0, #0
   366dc:	beq	37fe4 <__assert_fail@plt+0x25534>
   366e0:	ldr	r0, [sp, #64]	; 0x40
   366e4:	ldr	r0, [r0, #76]	; 0x4c
   366e8:	cmp	r0, #0
   366ec:	beq	36810 <__assert_fail@plt+0x23d60>
   366f0:	mov	r0, r5
   366f4:	bl	327ac <__assert_fail@plt+0x1fcfc>
   366f8:	cmp	r0, #0
   366fc:	beq	37fe4 <__assert_fail@plt+0x25534>
   36700:	add	r9, r6, #1
   36704:	mov	r1, #0
   36708:	mov	r5, r0
   3670c:	lsl	r2, r9, #2
   36710:	bl	12834 <memset@plt>
   36714:	ldr	r0, [sp, #36]	; 0x24
   36718:	mov	r1, #0
   3671c:	str	r6, [fp, #-180]	; 0xffffff4c
   36720:	str	r8, [fp, #-184]	; 0xffffff48
   36724:	str	r5, [fp, #-188]	; 0xffffff44
   36728:	str	r7, [fp, #-192]	; 0xffffff40
   3672c:	str	r1, [r0]
   36730:	str	r1, [r0, #4]
   36734:	str	r1, [r0, #8]
   36738:	add	r0, sp, #104	; 0x68
   3673c:	sub	r1, fp, #192	; 0xc0
   36740:	bl	43870 <__assert_fail@plt+0x30dc0>
   36744:	mov	sl, r0
   36748:	mov	r0, #0
   3674c:	bl	30174 <__assert_fail@plt+0x1d6c4>
   36750:	cmp	sl, #0
   36754:	bne	36e80 <__assert_fail@plt+0x243d0>
   36758:	ldr	r0, [r7]
   3675c:	cmp	r0, #0
   36760:	beq	36c14 <__assert_fail@plt+0x24164>
   36764:	mov	r1, #0
   36768:	cmp	r6, #0
   3676c:	mov	sl, #0
   36770:	str	r5, [sp, #20]
   36774:	str	r7, [sp, #24]
   36778:	str	r6, [sp, #16]
   3677c:	str	r1, [sp, #12]
   36780:	bmi	3686c <__assert_fail@plt+0x23dbc>
   36784:	ldr	r1, [sp, #24]
   36788:	ldr	r6, [sp, #20]
   3678c:	sub	r7, r9, #1
   36790:	add	r5, r1, #4
   36794:	ldr	r2, [r6]
   36798:	cmp	r0, #0
   3679c:	beq	367f4 <__assert_fail@plt+0x23d44>
   367a0:	cmp	r2, #0
   367a4:	beq	367f8 <__assert_fail@plt+0x23d48>
   367a8:	sub	r4, fp, #48	; 0x30
   367ac:	add	r1, r0, #4
   367b0:	add	r2, r2, #4
   367b4:	mov	r0, r4
   367b8:	bl	4081c <__assert_fail@plt+0x2dd6c>
   367bc:	cmp	r0, #0
   367c0:	str	r0, [fp, #-196]	; 0xffffff3c
   367c4:	bne	36890 <__assert_fail@plt+0x23de0>
   367c8:	ldr	r1, [sp, #64]	; 0x40
   367cc:	sub	r0, fp, #196	; 0xc4
   367d0:	mov	r2, r4
   367d4:	bl	41eb0 <__assert_fail@plt+0x2f400>
   367d8:	str	r0, [r5, #-4]
   367dc:	ldr	r0, [fp, #-40]	; 0xffffffd8
   367e0:	bl	30174 <__assert_fail@plt+0x1d6c4>
   367e4:	ldr	sl, [fp, #-196]	; 0xffffff3c
   367e8:	cmp	sl, #0
   367ec:	beq	367f8 <__assert_fail@plt+0x23d48>
   367f0:	b	3686c <__assert_fail@plt+0x23dbc>
   367f4:	str	r2, [r5, #-4]
   367f8:	cmp	r7, #0
   367fc:	beq	36868 <__assert_fail@plt+0x23db8>
   36800:	ldr	r0, [r5], #4
   36804:	add	r6, r6, #4
   36808:	sub	r7, r7, #1
   3680c:	b	36794 <__assert_fail@plt+0x23ce4>
   36810:	ldr	r0, [sp, #36]	; 0x24
   36814:	mov	r1, #0
   36818:	str	r6, [fp, #-180]	; 0xffffff4c
   3681c:	str	r8, [fp, #-184]	; 0xffffff48
   36820:	str	r1, [fp, #-188]	; 0xffffff44
   36824:	str	r7, [fp, #-192]	; 0xffffff40
   36828:	str	r1, [r0]
   3682c:	str	r1, [r0, #4]
   36830:	str	r1, [r0, #8]
   36834:	add	r0, sp, #104	; 0x68
   36838:	sub	r1, fp, #192	; 0xc0
   3683c:	bl	43870 <__assert_fail@plt+0x30dc0>
   36840:	mov	sl, r0
   36844:	mov	r0, #0
   36848:	bl	30174 <__assert_fail@plt+0x1d6c4>
   3684c:	cmp	sl, #0
   36850:	bne	36a64 <__assert_fail@plt+0x23fb4>
   36854:	ldr	r0, [r7]
   36858:	mov	r5, #0
   3685c:	cmp	r0, #0
   36860:	beq	36e34 <__assert_fail@plt+0x24384>
   36864:	b	36ef8 <__assert_fail@plt+0x24448>
   36868:	mov	sl, #0
   3686c:	ldr	r0, [sp, #20]
   36870:	bl	30174 <__assert_fail@plt+0x1d6c4>
   36874:	ldr	r4, [sp, #80]	; 0x50
   36878:	ldr	r9, [sp, #76]	; 0x4c
   3687c:	ldr	r7, [sp, #24]
   36880:	ldr	r6, [sp, #16]
   36884:	cmp	sl, #0
   36888:	beq	36ef8 <__assert_fail@plt+0x24448>
   3688c:	b	36e8c <__assert_fail@plt+0x243dc>
   36890:	mov	sl, r0
   36894:	b	3686c <__assert_fail@plt+0x23dbc>
   36898:	sxtb	r0, r0
   3689c:	cmn	r0, #1
   368a0:	ble	369c8 <__assert_fail@plt+0x23f18>
   368a4:	mov	r0, #1
   368a8:	mov	sl, r5
   368ac:	str	r0, [sp, #64]	; 0x40
   368b0:	ldr	r0, [sp, #44]	; 0x2c
   368b4:	cmp	r0, #0
   368b8:	bne	35be4 <__assert_fail@plt+0x23134>
   368bc:	mov	sl, r5
   368c0:	b	364d4 <__assert_fail@plt+0x23a24>
   368c4:	ldr	r0, [r9, #8]
   368c8:	str	r5, [sp, #12]
   368cc:	cmp	r0, #1
   368d0:	blt	3699c <__assert_fail@plt+0x23eec>
   368d4:	ldr	r4, [sp, #188]	; 0xbc
   368d8:	mov	r6, #0
   368dc:	b	36904 <__assert_fail@plt+0x23e54>
   368e0:	add	r1, r1, #1
   368e4:	str	r5, [r0, #4]
   368e8:	str	r1, [sp, #228]	; 0xe4
   368ec:	mov	r1, #0
   368f0:	str	r1, [r0]
   368f4:	ldr	r0, [r9, #8]
   368f8:	add	r6, r6, #1
   368fc:	cmp	r6, r0
   36900:	bge	3699c <__assert_fail@plt+0x23eec>
   36904:	ldr	r1, [r9, #12]
   36908:	ldr	r5, [r1, r6, lsl #2]
   3690c:	ldr	r1, [r4]
   36910:	add	r2, r1, r5, lsl #3
   36914:	ldrb	r2, [r2, #4]
   36918:	cmp	r2, #8
   3691c:	bne	368f8 <__assert_fail@plt+0x23e48>
   36920:	ldr	r1, [r1, r5, lsl #3]
   36924:	cmp	r1, #31
   36928:	bgt	368f8 <__assert_fail@plt+0x23e48>
   3692c:	ldr	r2, [r4, #80]	; 0x50
   36930:	mov	r3, #1
   36934:	tst	r2, r3, lsl r1
   36938:	beq	368f8 <__assert_fail@plt+0x23e48>
   3693c:	ldr	r0, [sp, #228]	; 0xe4
   36940:	ldr	r7, [sp, #232]	; 0xe8
   36944:	cmp	r0, r7
   36948:	beq	36978 <__assert_fail@plt+0x23ec8>
   3694c:	mov	r0, #1
   36950:	mov	r1, #24
   36954:	bl	2fb8c <__assert_fail@plt+0x1d0dc>
   36958:	ldr	r1, [sp, #228]	; 0xe4
   3695c:	ldr	r2, [sp, #236]	; 0xec
   36960:	str	r0, [r2, r1, lsl #2]
   36964:	ldr	r0, [sp, #236]	; 0xec
   36968:	ldr	r0, [r0, r1, lsl #2]
   3696c:	cmp	r0, #0
   36970:	bne	368e0 <__assert_fail@plt+0x23e30>
   36974:	b	36ec0 <__assert_fail@plt+0x24410>
   36978:	ldr	r0, [sp, #236]	; 0xec
   3697c:	lsl	r1, r7, #3
   36980:	bl	33500 <__assert_fail@plt+0x20a50>
   36984:	cmp	r0, #0
   36988:	beq	36ec0 <__assert_fail@plt+0x24410>
   3698c:	str	r0, [sp, #236]	; 0xec
   36990:	lsl	r0, r7, #1
   36994:	str	r0, [sp, #232]	; 0xe8
   36998:	b	3694c <__assert_fail@plt+0x23e9c>
   3699c:	mov	r6, #0
   369a0:	str	r6, [fp, #-196]	; 0xffffff3c
   369a4:	ldrb	r0, [r9, #52]	; 0x34
   369a8:	tst	r0, #64	; 0x40
   369ac:	bne	36a10 <__assert_fail@plt+0x23f60>
   369b0:	ldr	r5, [sp, #12]
   369b4:	b	35bcc <__assert_fail@plt+0x2311c>
   369b8:	ldr	r0, [sp, #192]	; 0xc0
   369bc:	and	r0, r0, #2
   369c0:	eor	r3, r0, #10
   369c4:	b	36564 <__assert_fail@plt+0x23ab4>
   369c8:	cmn	r5, #1
   369cc:	ble	36a08 <__assert_fail@plt+0x23f58>
   369d0:	ldr	r0, [sp, #152]	; 0x98
   369d4:	cmp	r0, r5
   369d8:	beq	36ec8 <__assert_fail@plt+0x24418>
   369dc:	ldr	r0, [sp, #184]	; 0xb8
   369e0:	cmp	r0, #2
   369e4:	blt	36a34 <__assert_fail@plt+0x23f84>
   369e8:	ldr	r0, [sp, #112]	; 0x70
   369ec:	mov	r1, r5
   369f0:	ldr	r4, [r0, r1, lsl #2]
   369f4:	cmn	r4, #1
   369f8:	bne	36ab8 <__assert_fail@plt+0x24008>
   369fc:	sub	r1, r1, #1
   36a00:	cmn	r1, #1
   36a04:	bne	369f0 <__assert_fail@plt+0x23f40>
   36a08:	ldr	r3, [sp, #164]	; 0xa4
   36a0c:	b	36ae0 <__assert_fail@plt+0x24030>
   36a10:	add	r1, r9, #4
   36a14:	add	r0, sp, #104	; 0x68
   36a18:	bl	3fa90 <__assert_fail@plt+0x2cfe0>
   36a1c:	ldr	r5, [sp, #12]
   36a20:	cmp	r0, #0
   36a24:	str	r0, [fp, #-196]	; 0xffffff3c
   36a28:	beq	35bcc <__assert_fail@plt+0x2311c>
   36a2c:	mov	sl, r0
   36a30:	b	364d4 <__assert_fail@plt+0x23a24>
   36a34:	ldr	r0, [sp, #108]	; 0x6c
   36a38:	ldr	r1, [sp, #172]	; 0xac
   36a3c:	mov	r3, #1
   36a40:	ldrb	r0, [r0, r5]
   36a44:	ubfx	r2, r0, #5, #3
   36a48:	ldr	r1, [r1, r2, lsl #2]
   36a4c:	and	r2, r0, #31
   36a50:	tst	r1, r3, lsl r2
   36a54:	moveq	r3, #0
   36a58:	cmpeq	r0, #10
   36a5c:	bne	36ae0 <__assert_fail@plt+0x24030>
   36a60:	b	36ad0 <__assert_fail@plt+0x24020>
   36a64:	mov	r0, #0
   36a68:	str	r0, [sp, #12]
   36a6c:	b	36e8c <__assert_fail@plt+0x243dc>
   36a70:	mov	r0, r4
   36a74:	mov	r5, lr
   36a78:	bl	12810 <iswalnum@plt>
   36a7c:	mov	r3, #1
   36a80:	cmp	r4, #95	; 0x5f
   36a84:	beq	36eb8 <__assert_fail@plt+0x24408>
   36a88:	cmp	r0, #0
   36a8c:	mov	lr, r5
   36a90:	beq	365bc <__assert_fail@plt+0x23b0c>
   36a94:	b	365d8 <__assert_fail@plt+0x23b28>
   36a98:	mov	r0, r6
   36a9c:	bl	12810 <iswalnum@plt>
   36aa0:	ldr	r1, [sp, #48]	; 0x30
   36aa4:	cmp	r6, #95	; 0x5f
   36aa8:	beq	35b9c <__assert_fail@plt+0x230ec>
   36aac:	cmp	r0, #0
   36ab0:	beq	35b10 <__assert_fail@plt+0x23060>
   36ab4:	b	35b9c <__assert_fail@plt+0x230ec>
   36ab8:	ldrb	r0, [sp, #182]	; 0xb6
   36abc:	cmp	r0, #0
   36ac0:	bne	36ed8 <__assert_fail@plt+0x24428>
   36ac4:	mov	r3, #0
   36ac8:	cmp	r4, #10
   36acc:	bne	36ae0 <__assert_fail@plt+0x24030>
   36ad0:	ldrb	r0, [sp, #181]	; 0xb5
   36ad4:	cmp	r0, #0
   36ad8:	movwne	r0, #1
   36adc:	lsl	r3, r0, #1
   36ae0:	ldr	r0, [r9, #8]
   36ae4:	cmp	r0, #1
   36ae8:	blt	35bdc <__assert_fail@plt+0x2312c>
   36aec:	str	r6, [sp, #24]
   36af0:	ldr	r6, [sp, #188]	; 0xbc
   36af4:	ldr	r7, [r9, #12]
   36af8:	mov	ip, r5
   36afc:	and	r1, r3, #8
   36b00:	and	r2, r3, #2
   36b04:	and	r3, r3, #1
   36b08:	ldr	r6, [r6]
   36b0c:	b	36b1c <__assert_fail@plt+0x2406c>
   36b10:	add	r7, r7, #4
   36b14:	subs	r0, r0, #1
   36b18:	beq	36bbc <__assert_fail@plt+0x2410c>
   36b1c:	ldr	r4, [r7]
   36b20:	add	r5, r6, r4, lsl #3
   36b24:	mov	lr, r4
   36b28:	ldr	r5, [r5, #4]
   36b2c:	uxtb	r4, r5
   36b30:	cmp	r4, #2
   36b34:	bne	36b10 <__assert_fail@plt+0x24060>
   36b38:	movw	r4, #65280	; 0xff00
   36b3c:	movt	r4, #3
   36b40:	tst	r5, r4
   36b44:	beq	36b84 <__assert_fail@plt+0x240d4>
   36b48:	cmp	r3, #0
   36b4c:	bne	36b58 <__assert_fail@plt+0x240a8>
   36b50:	ands	r4, r5, #1024	; 0x400
   36b54:	bne	36b10 <__assert_fail@plt+0x24060>
   36b58:	cmp	r3, #0
   36b5c:	andsne	r4, r5, #2048	; 0x800
   36b60:	bne	36b10 <__assert_fail@plt+0x24060>
   36b64:	cmp	r2, #0
   36b68:	bne	36b74 <__assert_fail@plt+0x240c4>
   36b6c:	ands	r4, r5, #8192	; 0x2000
   36b70:	bne	36b10 <__assert_fail@plt+0x24060>
   36b74:	cmp	r1, #0
   36b78:	bne	36b84 <__assert_fail@plt+0x240d4>
   36b7c:	ands	r5, r5, #32768	; 0x8000
   36b80:	bne	36b10 <__assert_fail@plt+0x24060>
   36b84:	ldr	r1, [sp, #44]	; 0x2c
   36b88:	clz	r0, lr
   36b8c:	ldr	r6, [sp, #24]
   36b90:	cmp	lr, #0
   36b94:	mov	sl, ip
   36b98:	mov	r5, ip
   36b9c:	lsr	r0, r0, #5
   36ba0:	movwne	lr, #1
   36ba4:	mvneq	sl, #0
   36ba8:	str	lr, [sp, #64]	; 0x40
   36bac:	orr	r0, r1, r0
   36bb0:	cmp	r0, #0
   36bb4:	bne	35be4 <__assert_fail@plt+0x23134>
   36bb8:	b	368bc <__assert_fail@plt+0x23e0c>
   36bbc:	ldr	r6, [sp, #24]
   36bc0:	mov	r0, #0
   36bc4:	mov	r5, ip
   36bc8:	b	35be0 <__assert_fail@plt+0x23130>
   36bcc:	ldr	r3, [sp, #164]	; 0xa4
   36bd0:	movw	lr, #65280	; 0xff00
   36bd4:	movt	lr, #3
   36bd8:	b	36d24 <__assert_fail@plt+0x24274>
   36bdc:	ldr	r0, [sp, #192]	; 0xc0
   36be0:	and	r0, r0, #2
   36be4:	eor	r3, r0, #10
   36be8:	b	36d24 <__assert_fail@plt+0x24274>
   36bec:	mov	r0, r7
   36bf0:	bl	12810 <iswalnum@plt>
   36bf4:	mov	r3, #1
   36bf8:	cmp	r7, #95	; 0x5f
   36bfc:	beq	36bd0 <__assert_fail@plt+0x24120>
   36c00:	movw	lr, #65280	; 0xff00
   36c04:	cmp	r0, #0
   36c08:	movt	lr, #3
   36c0c:	beq	36d08 <__assert_fail@plt+0x24258>
   36c10:	b	36d24 <__assert_fail@plt+0x24274>
   36c14:	ldr	r1, [r5]
   36c18:	cmp	r1, #0
   36c1c:	bne	36764 <__assert_fail@plt+0x23cb4>
   36c20:	cmp	r6, #1
   36c24:	blt	36e2c <__assert_fail@plt+0x2437c>
   36c28:	ldr	r0, [sp, #204]	; 0xcc
   36c2c:	lsl	r4, r6, #2
   36c30:	mov	r9, r6
   36c34:	sub	r0, r0, #4
   36c38:	b	36c50 <__assert_fail@plt+0x241a0>
   36c3c:	sub	r9, r9, #1
   36c40:	sub	r4, r4, #4
   36c44:	add	r1, r9, #1
   36c48:	cmp	r1, #2
   36c4c:	blt	36e2c <__assert_fail@plt+0x2437c>
   36c50:	ldr	r6, [r0, r9, lsl #2]
   36c54:	cmp	r6, #0
   36c58:	beq	36c3c <__assert_fail@plt+0x2418c>
   36c5c:	ldrb	r1, [r6, #52]	; 0x34
   36c60:	tst	r1, #16
   36c64:	beq	36c3c <__assert_fail@plt+0x2418c>
   36c68:	sub	sl, r9, #1
   36c6c:	cmp	r9, #0
   36c70:	str	r7, [sp, #24]
   36c74:	str	r5, [sp, #20]
   36c78:	ble	36bcc <__assert_fail@plt+0x2411c>
   36c7c:	ldr	r0, [sp, #152]	; 0x98
   36c80:	movw	lr, #65280	; 0xff00
   36c84:	movt	lr, #3
   36c88:	add	r0, r0, #1
   36c8c:	cmp	r0, r9
   36c90:	beq	36bdc <__assert_fail@plt+0x2412c>
   36c94:	ldr	r0, [sp, #184]	; 0xb8
   36c98:	cmp	r0, #2
   36c9c:	blt	36cc8 <__assert_fail@plt+0x24218>
   36ca0:	ldr	r0, [sp, #112]	; 0x70
   36ca4:	mov	r1, sl
   36ca8:	ldr	r7, [r0, r1, lsl #2]
   36cac:	cmn	r7, #1
   36cb0:	bne	36cfc <__assert_fail@plt+0x2424c>
   36cb4:	sub	r1, r1, #1
   36cb8:	cmn	r1, #1
   36cbc:	bne	36ca8 <__assert_fail@plt+0x241f8>
   36cc0:	ldr	r3, [sp, #164]	; 0xa4
   36cc4:	b	36d24 <__assert_fail@plt+0x24274>
   36cc8:	ldr	r0, [sp, #108]	; 0x6c
   36ccc:	ldr	r1, [sp, #172]	; 0xac
   36cd0:	mov	r3, #1
   36cd4:	add	r0, r0, r9
   36cd8:	ldrb	r0, [r0, #-1]
   36cdc:	ubfx	r2, r0, #5, #3
   36ce0:	ldr	r1, [r1, r2, lsl #2]
   36ce4:	and	r2, r0, #31
   36ce8:	tst	r1, r3, lsl r2
   36cec:	moveq	r3, #0
   36cf0:	cmpeq	r0, #10
   36cf4:	bne	36d24 <__assert_fail@plt+0x24274>
   36cf8:	b	36d14 <__assert_fail@plt+0x24264>
   36cfc:	ldrb	r0, [sp, #182]	; 0xb6
   36d00:	cmp	r0, #0
   36d04:	bne	36bec <__assert_fail@plt+0x2413c>
   36d08:	mov	r3, #0
   36d0c:	cmp	r7, #10
   36d10:	bne	36d24 <__assert_fail@plt+0x24274>
   36d14:	ldrb	r0, [sp, #181]	; 0xb5
   36d18:	cmp	r0, #0
   36d1c:	movwne	r0, #1
   36d20:	lsl	r3, r0, #1
   36d24:	ldr	r0, [r6, #8]
   36d28:	cmp	r0, #1
   36d2c:	blt	36db8 <__assert_fail@plt+0x24308>
   36d30:	ldr	r7, [r6, #12]
   36d34:	ldr	r6, [sp, #188]	; 0xbc
   36d38:	and	ip, r3, #8
   36d3c:	and	r2, r3, #2
   36d40:	and	r3, r3, #1
   36d44:	ldr	r6, [r6]
   36d48:	b	36d58 <__assert_fail@plt+0x242a8>
   36d4c:	add	r7, r7, #4
   36d50:	subs	r0, r0, #1
   36d54:	beq	36db8 <__assert_fail@plt+0x24308>
   36d58:	ldr	r8, [r7]
   36d5c:	add	r5, r6, r8, lsl #3
   36d60:	ldr	r5, [r5, #4]
   36d64:	uxtb	r1, r5
   36d68:	cmp	r1, #2
   36d6c:	bne	36d4c <__assert_fail@plt+0x2429c>
   36d70:	tst	r5, lr
   36d74:	beq	36dbc <__assert_fail@plt+0x2430c>
   36d78:	cmp	r3, #0
   36d7c:	bne	36d88 <__assert_fail@plt+0x242d8>
   36d80:	ands	r1, r5, #1024	; 0x400
   36d84:	bne	36d4c <__assert_fail@plt+0x2429c>
   36d88:	cmp	r3, #0
   36d8c:	andsne	r1, r5, #2048	; 0x800
   36d90:	bne	36d4c <__assert_fail@plt+0x2429c>
   36d94:	cmp	r2, #0
   36d98:	bne	36da4 <__assert_fail@plt+0x242f4>
   36d9c:	ands	r1, r5, #8192	; 0x2000
   36da0:	bne	36d4c <__assert_fail@plt+0x2429c>
   36da4:	cmp	ip, #0
   36da8:	bne	36dbc <__assert_fail@plt+0x2430c>
   36dac:	ands	r1, r5, #32768	; 0x8000
   36db0:	bne	36d4c <__assert_fail@plt+0x2429c>
   36db4:	b	36dbc <__assert_fail@plt+0x2430c>
   36db8:	mov	r8, #0
   36dbc:	ldr	r5, [sp, #20]
   36dc0:	mov	r1, #0
   36dc4:	mov	r2, r4
   36dc8:	mov	r0, r5
   36dcc:	bl	12834 <memset@plt>
   36dd0:	sub	r0, fp, #188	; 0xbc
   36dd4:	ldr	r7, [sp, #24]
   36dd8:	mov	r1, #0
   36ddc:	mov	r6, sl
   36de0:	stm	r0, {r5, r8, sl}
   36de4:	ldr	r0, [sp, #36]	; 0x24
   36de8:	str	r7, [fp, #-192]	; 0xffffff40
   36dec:	str	r1, [r0]
   36df0:	str	r1, [r0, #4]
   36df4:	str	r1, [r0, #8]
   36df8:	add	r0, sp, #104	; 0x68
   36dfc:	sub	r1, fp, #192	; 0xc0
   36e00:	bl	43870 <__assert_fail@plt+0x30dc0>
   36e04:	mov	sl, r0
   36e08:	mov	r0, #0
   36e0c:	bl	30174 <__assert_fail@plt+0x1d6c4>
   36e10:	cmp	sl, #0
   36e14:	bne	36e80 <__assert_fail@plt+0x243d0>
   36e18:	ldr	r0, [r7]
   36e1c:	cmp	r0, #0
   36e20:	beq	36c14 <__assert_fail@plt+0x24164>
   36e24:	sub	r6, r9, #1
   36e28:	b	36764 <__assert_fail@plt+0x23cb4>
   36e2c:	ldr	r4, [sp, #80]	; 0x50
   36e30:	ldr	r9, [sp, #76]	; 0x4c
   36e34:	mov	r0, r7
   36e38:	bl	30174 <__assert_fail@plt+0x1d6c4>
   36e3c:	mov	r0, r5
   36e40:	bl	30174 <__assert_fail@plt+0x1d6c4>
   36e44:	ldr	r8, [sp, #60]	; 0x3c
   36e48:	add	r0, sp, #104	; 0x68
   36e4c:	bl	3f8e0 <__assert_fail@plt+0x2ce30>
   36e50:	ldr	r0, [fp, #-200]	; 0xffffff38
   36e54:	mov	sl, #1
   36e58:	add	r6, r0, r8
   36e5c:	cmp	r6, r9
   36e60:	str	r6, [fp, #-200]	; 0xffffff38
   36e64:	blt	37f74 <__assert_fail@plt+0x254c4>
   36e68:	ldr	r7, [sp, #100]	; 0x64
   36e6c:	ldr	r5, [sp, #92]	; 0x5c
   36e70:	ldr	r2, [sp, #88]	; 0x58
   36e74:	cmp	r4, r6
   36e78:	bge	3588c <__assert_fail@plt+0x22ddc>
   36e7c:	b	37f74 <__assert_fail@plt+0x254c4>
   36e80:	ldr	r4, [sp, #80]	; 0x50
   36e84:	ldr	r9, [sp, #76]	; 0x4c
   36e88:	str	r5, [sp, #12]
   36e8c:	mov	r0, r7
   36e90:	bl	30174 <__assert_fail@plt+0x1d6c4>
   36e94:	ldr	r0, [sp, #12]
   36e98:	bl	30174 <__assert_fail@plt+0x1d6c4>
   36e9c:	ldr	r8, [sp, #60]	; 0x3c
   36ea0:	ldr	lr, [sp, #96]	; 0x60
   36ea4:	cmp	sl, #0
   36ea8:	beq	36f20 <__assert_fail@plt+0x24470>
   36eac:	cmp	sl, #1
   36eb0:	beq	36e48 <__assert_fail@plt+0x24398>
   36eb4:	b	37f74 <__assert_fail@plt+0x254c4>
   36eb8:	mov	lr, r5
   36ebc:	b	365d8 <__assert_fail@plt+0x23b28>
   36ec0:	mov	sl, #12
   36ec4:	b	364ec <__assert_fail@plt+0x23a3c>
   36ec8:	ldr	r0, [sp, #192]	; 0xc0
   36ecc:	and	r0, r0, #2
   36ed0:	eor	r3, r0, #10
   36ed4:	b	36ae0 <__assert_fail@plt+0x24030>
   36ed8:	mov	r0, r4
   36edc:	bl	12810 <iswalnum@plt>
   36ee0:	mov	r3, #1
   36ee4:	cmp	r4, #95	; 0x5f
   36ee8:	beq	36ae0 <__assert_fail@plt+0x24030>
   36eec:	cmp	r0, #0
   36ef0:	beq	36ac4 <__assert_fail@plt+0x24014>
   36ef4:	b	36ae0 <__assert_fail@plt+0x24030>
   36ef8:	ldr	r0, [sp, #204]	; 0xcc
   36efc:	bl	30174 <__assert_fail@plt+0x1d6c4>
   36f00:	mov	r0, #0
   36f04:	str	r8, [sp, #200]	; 0xc8
   36f08:	str	r7, [sp, #204]	; 0xcc
   36f0c:	str	r6, [sp, #196]	; 0xc4
   36f10:	bl	30174 <__assert_fail@plt+0x1d6c4>
   36f14:	mov	r0, #0
   36f18:	bl	30174 <__assert_fail@plt+0x1d6c4>
   36f1c:	ldr	lr, [sp, #96]	; 0x60
   36f20:	ldr	r4, [sp, #84]	; 0x54
   36f24:	cmp	r4, #0
   36f28:	beq	37f70 <__assert_fail@plt+0x254c0>
   36f2c:	ldr	r5, [sp, #32]
   36f30:	ldr	r9, [fp, #16]
   36f34:	cmp	r4, #1
   36f38:	beq	36f60 <__assert_fail@plt+0x244b0>
   36f3c:	mvn	r0, r5
   36f40:	mov	r1, #255	; 0xff
   36f44:	mov	r6, lr
   36f48:	add	r0, r0, r9
   36f4c:	lsl	r2, r0, #3
   36f50:	ldr	r0, [fp, #20]
   36f54:	add	r0, r0, #8
   36f58:	bl	12834 <memset@plt>
   36f5c:	mov	lr, r6
   36f60:	ldr	r2, [fp, #20]
   36f64:	cmp	r4, #2
   36f68:	mov	r0, #0
   36f6c:	ldr	r1, [sp, #196]	; 0xc4
   36f70:	stm	r2, {r0, r1}
   36f74:	bcc	37e40 <__assert_fail@plt+0x25390>
   36f78:	ldr	r0, [sp, #52]	; 0x34
   36f7c:	ldrb	r0, [r0, #28]
   36f80:	ands	r0, r0, #16
   36f84:	bne	37e40 <__assert_fail@plt+0x25390>
   36f88:	ldrb	r1, [lr, #88]	; 0x58
   36f8c:	mov	r0, #0
   36f90:	tst	r1, #1
   36f94:	mov	r1, #0
   36f98:	beq	36fac <__assert_fail@plt+0x244fc>
   36f9c:	ldr	r2, [lr, #76]	; 0x4c
   36fa0:	mov	r1, #0
   36fa4:	cmp	r2, #0
   36fa8:	movwgt	r1, #1
   36fac:	ldr	r2, [sp, #52]	; 0x34
   36fb0:	cmp	r1, #0
   36fb4:	mov	r1, #0
   36fb8:	ldr	r7, [r2]
   36fbc:	movw	r2, #55832	; 0xda18
   36fc0:	movt	r2, #4
   36fc4:	vldr	d16, [r2]
   36fc8:	ldr	r2, [r2, #8]
   36fcc:	str	r2, [fp, #-40]	; 0xffffffd8
   36fd0:	sub	r2, fp, #192	; 0xc0
   36fd4:	add	r6, r2, #12
   36fd8:	mov	r2, #16
   36fdc:	vstr	d16, [fp, #-48]	; 0xffffffd0
   36fe0:	str	r6, [fp, #-184]	; 0xffffff48
   36fe4:	str	r2, [fp, #-188]	; 0xffffff44
   36fe8:	str	r0, [fp, #-192]	; 0xffffff40
   36fec:	beq	3700c <__assert_fail@plt+0x2455c>
   36ff0:	mov	r0, #48	; 0x30
   36ff4:	bl	327ac <__assert_fail@plt+0x1fcfc>
   36ff8:	cmp	r0, #0
   36ffc:	str	r0, [fp, #-40]	; 0xffffffd8
   37000:	beq	37e5c <__assert_fail@plt+0x253ac>
   37004:	ldr	r0, [fp, #-192]	; 0xffffff40
   37008:	sub	r1, fp, #48	; 0x30
   3700c:	ldr	sl, [r7, #72]	; 0x48
   37010:	cmp	r0, r4
   37014:	str	r1, [sp, #88]	; 0x58
   37018:	str	r6, [sp, #72]	; 0x48
   3701c:	str	r7, [sp, #76]	; 0x4c
   37020:	bcs	3710c <__assert_fail@plt+0x2465c>
   37024:	sub	r0, fp, #192	; 0xc0
   37028:	mov	r1, r4
   3702c:	mov	r2, r6
   37030:	mov	r3, #8
   37034:	bl	46c30 <__assert_fail@plt+0x34180>
   37038:	cmp	r0, #0
   3703c:	bne	37110 <__assert_fail@plt+0x24660>
   37040:	ldr	r0, [fp, #-184]	; 0xffffff48
   37044:	ldr	r1, [sp, #72]	; 0x48
   37048:	cmp	r0, r1
   3704c:	beq	37054 <__assert_fail@plt+0x245a4>
   37050:	bl	30174 <__assert_fail@plt+0x1d6c4>
   37054:	ldr	r0, [sp, #72]	; 0x48
   37058:	mov	sl, #12
   3705c:	str	r0, [fp, #-184]	; 0xffffff48
   37060:	mov	r0, #16
   37064:	str	r0, [fp, #-188]	; 0xffffff44
   37068:	mov	r0, #0
   3706c:	str	r0, [fp, #-192]	; 0xffffff40
   37070:	ldr	r0, [sp, #88]	; 0x58
   37074:	cmp	r0, #0
   37078:	beq	37f74 <__assert_fail@plt+0x254c4>
   3707c:	ldr	r0, [sp, #88]	; 0x58
   37080:	ldr	r1, [r0]
   37084:	ldr	r0, [r0, #8]
   37088:	cmp	r1, #1
   3708c:	blt	38090 <__assert_fail@plt+0x255e0>
   37090:	ldr	r4, [sp, #88]	; 0x58
   37094:	mov	r5, #0
   37098:	mov	r6, #0
   3709c:	add	r0, r0, r5
   370a0:	ldr	r0, [r0, #20]
   370a4:	bl	30174 <__assert_fail@plt+0x1d6c4>
   370a8:	ldr	r0, [r4, #8]
   370ac:	add	r0, r0, r5
   370b0:	ldr	r0, [r0, #8]
   370b4:	bl	30174 <__assert_fail@plt+0x1d6c4>
   370b8:	ldr	r1, [r4]
   370bc:	ldr	r0, [r4, #8]
   370c0:	add	r6, r6, #1
   370c4:	add	r5, r5, #24
   370c8:	cmp	r6, r1
   370cc:	blt	3709c <__assert_fail@plt+0x245ec>
   370d0:	b	38090 <__assert_fail@plt+0x255e0>
   370d4:	ldr	r1, [r3, #8]
   370d8:	cmp	r1, #0
   370dc:	beq	370ec <__assert_fail@plt+0x2463c>
   370e0:	ldrsb	r1, [r4, #28]
   370e4:	cmp	r1, #0
   370e8:	bmi	35554 <__assert_fail@plt+0x22aa4>
   370ec:	mov	r0, #0
   370f0:	cmp	r6, #0
   370f4:	str	r0, [sp, #72]	; 0x48
   370f8:	beq	37e54 <__assert_fail@plt+0x253a4>
   370fc:	cmp	ip, #0
   37100:	mov	r6, #0
   37104:	bne	37fc8 <__assert_fail@plt+0x25518>
   37108:	b	35558 <__assert_fail@plt+0x22aa8>
   3710c:	str	r4, [fp, #-192]	; 0xffffff40
   37110:	ldr	r6, [fp, #20]
   37114:	ldr	r0, [fp, #-184]	; 0xffffff48
   37118:	lsl	r2, r4, #3
   3711c:	str	r2, [sp, #64]	; 0x40
   37120:	mov	r1, r6
   37124:	str	r0, [sp, #68]	; 0x44
   37128:	bl	124e0 <memcpy@plt>
   3712c:	ldr	r3, [r6]
   37130:	ldr	r0, [r6, #4]
   37134:	mov	r6, #0
   37138:	cmp	r3, r0
   3713c:	ble	371e4 <__assert_fail@plt+0x24734>
   37140:	mov	r0, r6
   37144:	bl	30174 <__assert_fail@plt+0x1d6c4>
   37148:	ldr	r0, [fp, #-184]	; 0xffffff48
   3714c:	ldr	r6, [sp, #72]	; 0x48
   37150:	cmp	r0, r6
   37154:	beq	3715c <__assert_fail@plt+0x246ac>
   37158:	bl	30174 <__assert_fail@plt+0x1d6c4>
   3715c:	str	r6, [fp, #-184]	; 0xffffff48
   37160:	ldr	r6, [sp, #88]	; 0x58
   37164:	ldr	lr, [sp, #96]	; 0x60
   37168:	mov	r0, #16
   3716c:	str	r0, [fp, #-188]	; 0xffffff44
   37170:	mov	r0, #0
   37174:	str	r0, [fp, #-192]	; 0xffffff40
   37178:	cmp	r6, #0
   3717c:	beq	37e40 <__assert_fail@plt+0x25390>
   37180:	ldr	r1, [r6]
   37184:	ldr	r0, [r6, #8]
   37188:	mov	r7, lr
   3718c:	cmp	r1, #1
   37190:	blt	371d0 <__assert_fail@plt+0x24720>
   37194:	mov	r4, #0
   37198:	mov	r5, #0
   3719c:	add	r0, r0, r4
   371a0:	ldr	r0, [r0, #20]
   371a4:	bl	30174 <__assert_fail@plt+0x1d6c4>
   371a8:	ldr	r0, [r6, #8]
   371ac:	add	r0, r0, r4
   371b0:	ldr	r0, [r0, #8]
   371b4:	bl	30174 <__assert_fail@plt+0x1d6c4>
   371b8:	ldr	r1, [r6]
   371bc:	ldr	r0, [r6, #8]
   371c0:	add	r5, r5, #1
   371c4:	add	r4, r4, #24
   371c8:	cmp	r5, r1
   371cc:	blt	3719c <__assert_fail@plt+0x246ec>
   371d0:	bl	30174 <__assert_fail@plt+0x1d6c4>
   371d4:	ldr	r5, [sp, #32]
   371d8:	ldr	r4, [sp, #84]	; 0x54
   371dc:	mov	lr, r7
   371e0:	b	37e40 <__assert_fail@plt+0x25390>
   371e4:	ldr	r0, [fp, #20]
   371e8:	mov	r8, #1
   371ec:	mov	ip, #0
   371f0:	mov	r6, #0
   371f4:	mov	lr, #0
   371f8:	add	r0, r0, #4
   371fc:	str	r0, [sp, #52]	; 0x34
   37200:	lsl	r0, r4, #4
   37204:	str	r0, [sp, #44]	; 0x2c
   37208:	mov	r0, #0
   3720c:	str	r0, [sp, #60]	; 0x3c
   37210:	ldr	r0, [sp, #76]	; 0x4c
   37214:	ldr	r0, [r0]
   37218:	add	r1, r0, sl, lsl #3
   3721c:	ldr	r7, [r1, #4]
   37220:	uxtb	r2, r7
   37224:	cmp	r2, #9
   37228:	beq	37258 <__assert_fail@plt+0x247a8>
   3722c:	cmp	r2, #8
   37230:	bne	372e0 <__assert_fail@plt+0x24830>
   37234:	ldr	r0, [r0, sl, lsl #3]
   37238:	add	r0, r0, #1
   3723c:	cmp	r0, r4
   37240:	bge	372e0 <__assert_fail@plt+0x24830>
   37244:	ldr	r1, [fp, #20]
   37248:	str	r3, [r1, r0, lsl #3]!
   3724c:	mvn	r0, #0
   37250:	str	r0, [r1, #4]
   37254:	b	372e0 <__assert_fail@plt+0x24830>
   37258:	ldr	r0, [r0, sl, lsl #3]
   3725c:	add	r0, r0, #1
   37260:	cmp	r0, r4
   37264:	bge	372e0 <__assert_fail@plt+0x24830>
   37268:	ldr	r1, [fp, #20]
   3726c:	ldr	r2, [r1, r0, lsl #3]
   37270:	cmp	r2, r3
   37274:	bge	37288 <__assert_fail@plt+0x247d8>
   37278:	add	r0, r1, r0, lsl #3
   3727c:	str	r3, [r0, #4]
   37280:	ldr	r0, [sp, #68]	; 0x44
   37284:	b	372a8 <__assert_fail@plt+0x247f8>
   37288:	tst	r7, #524288	; 0x80000
   3728c:	beq	372d4 <__assert_fail@plt+0x24824>
   37290:	ldr	r1, [sp, #68]	; 0x44
   37294:	ldr	r1, [r1, r0, lsl #3]
   37298:	cmn	r1, #1
   3729c:	beq	372d4 <__assert_fail@plt+0x24824>
   372a0:	ldr	r0, [fp, #20]
   372a4:	ldr	r1, [sp, #68]	; 0x44
   372a8:	ldr	r2, [sp, #64]	; 0x40
   372ac:	str	r6, [sp, #48]	; 0x30
   372b0:	mov	r7, r3
   372b4:	mov	r6, ip
   372b8:	str	lr, [sp, #56]	; 0x38
   372bc:	bl	124e0 <memcpy@plt>
   372c0:	mov	ip, r6
   372c4:	ldr	lr, [sp, #56]	; 0x38
   372c8:	ldr	r6, [sp, #48]	; 0x30
   372cc:	mov	r3, r7
   372d0:	b	372e0 <__assert_fail@plt+0x24830>
   372d4:	ldr	r1, [fp, #20]
   372d8:	add	r0, r1, r0, lsl #3
   372dc:	str	r3, [r0, #4]
   372e0:	ldr	r0, [fp, #20]
   372e4:	ldr	r0, [r0, #4]
   372e8:	cmp	r3, r0
   372ec:	ldreq	r0, [sp, #200]	; 0xc8
   372f0:	cmpeq	sl, r0
   372f4:	beq	37360 <__assert_fail@plt+0x248b0>
   372f8:	ldr	r0, [sp, #88]	; 0x58
   372fc:	cmp	r0, #0
   37300:	beq	37430 <__assert_fail@plt+0x24980>
   37304:	cmp	lr, #1
   37308:	blt	37430 <__assert_fail@plt+0x24980>
   3730c:	mov	r0, lr
   37310:	mov	lr, r6
   37314:	subs	r1, r0, #1
   37318:	str	r0, [sp, #56]	; 0x38
   3731c:	beq	37348 <__assert_fail@plt+0x24898>
   37320:	mov	r0, #0
   37324:	add	r2, r0, r1
   37328:	lsr	r6, r2, #1
   3732c:	ldr	r7, [ip, r6, lsl #2]
   37330:	cmp	r7, sl
   37334:	addlt	r0, r8, r2, lsr #1
   37338:	movge	r1, r6
   3733c:	cmp	r0, r1
   37340:	bcc	37324 <__assert_fail@plt+0x24874>
   37344:	b	3734c <__assert_fail@plt+0x2489c>
   37348:	mov	r0, #0
   3734c:	ldr	r0, [ip, r0, lsl #2]
   37350:	mov	r6, lr
   37354:	ldr	lr, [sp, #56]	; 0x38
   37358:	cmp	r0, sl
   3735c:	bne	37430 <__assert_fail@plt+0x24980>
   37360:	ldr	r7, [sp, #88]	; 0x58
   37364:	cmp	r7, #0
   37368:	beq	37da4 <__assert_fail@plt+0x252f4>
   3736c:	ldr	r1, [sp, #52]	; 0x34
   37370:	mov	r0, r4
   37374:	b	37384 <__assert_fail@plt+0x248d4>
   37378:	subs	r0, r0, #1
   3737c:	add	r1, r1, #8
   37380:	beq	37da4 <__assert_fail@plt+0x252f4>
   37384:	ldr	r2, [r1, #-4]
   37388:	cmp	r2, #0
   3738c:	bmi	37378 <__assert_fail@plt+0x248c8>
   37390:	ldr	r2, [r1]
   37394:	cmn	r2, #1
   37398:	bne	37378 <__assert_fail@plt+0x248c8>
   3739c:	ldr	r0, [r7]
   373a0:	cmp	r0, #0
   373a4:	beq	37da4 <__assert_fail@plt+0x252f4>
   373a8:	sub	r0, r0, #1
   373ac:	mov	sl, r4
   373b0:	mov	r9, r6
   373b4:	ldr	r6, [sp, #64]	; 0x40
   373b8:	str	r0, [r7]
   373bc:	add	r5, r0, r0, lsl #1
   373c0:	ldr	r4, [r7, #8]
   373c4:	mov	r2, r6
   373c8:	ldr	r0, [r4, r5, lsl #3]!
   373cc:	ldr	r1, [r4, #8]
   373d0:	str	r0, [sp, #80]	; 0x50
   373d4:	ldr	r0, [fp, #20]
   373d8:	bl	124e0 <memcpy@plt>
   373dc:	ldr	r0, [r4, #8]
   373e0:	mov	r2, r6
   373e4:	add	r1, r0, sl, lsl #3
   373e8:	ldr	r0, [sp, #68]	; 0x44
   373ec:	bl	124e0 <memcpy@plt>
   373f0:	mov	r0, r9
   373f4:	bl	30174 <__assert_fail@plt+0x1d6c4>
   373f8:	ldr	r0, [r7, #8]
   373fc:	add	r0, r0, r5, lsl #3
   37400:	ldr	r0, [r0, #8]
   37404:	bl	30174 <__assert_fail@plt+0x1d6c4>
   37408:	ldr	r0, [r7, #8]
   3740c:	ldr	r3, [sp, #80]	; 0x50
   37410:	add	r0, r0, r5, lsl #3
   37414:	ldr	r5, [sp, #32]
   37418:	ldr	r6, [r0, #20]
   3741c:	ldr	r1, [r0, #12]
   37420:	ldr	sl, [r0, #4]
   37424:	ldr	lr, [r0, #16]
   37428:	mov	ip, r6
   3742c:	str	r1, [sp, #60]	; 0x3c
   37430:	ldr	r4, [sp, #188]	; 0xbc
   37434:	str	r3, [sp, #80]	; 0x50
   37438:	ldr	r0, [r4]
   3743c:	add	r1, r0, sl, lsl #3
   37440:	ldr	r1, [r1, #4]
   37444:	tst	r1, #8
   37448:	bne	374e0 <__assert_fail@plt+0x24a30>
   3744c:	tst	r1, #1048576	; 0x100000
   37450:	bne	37558 <__assert_fail@plt+0x24aa8>
   37454:	uxtb	r1, r1
   37458:	cmp	r1, #4
   3745c:	bne	37580 <__assert_fail@plt+0x24ad0>
   37460:	ldr	r0, [r0, sl, lsl #3]
   37464:	ldr	r1, [sp, #84]	; 0x54
   37468:	mov	r7, #0
   3746c:	add	r0, r0, #1
   37470:	cmp	r0, r1
   37474:	bge	37488 <__assert_fail@plt+0x249d8>
   37478:	ldr	r1, [fp, #20]
   3747c:	ldr	r2, [r1, r0, lsl #3]!
   37480:	ldr	r1, [r1, #4]
   37484:	sub	r7, r1, r2
   37488:	ldr	r1, [sp, #88]	; 0x58
   3748c:	cmp	r1, #0
   37490:	beq	37868 <__assert_fail@plt+0x24db8>
   37494:	ldr	r1, [sp, #84]	; 0x54
   37498:	cmp	r0, r1
   3749c:	bge	374d8 <__assert_fail@plt+0x24a28>
   374a0:	ldr	r2, [fp, #20]
   374a4:	ldr	r1, [r2, r0, lsl #3]
   374a8:	cmn	r1, #1
   374ac:	beq	374d8 <__assert_fail@plt+0x24a28>
   374b0:	add	r0, r2, r0, lsl #3
   374b4:	ldr	r0, [r0, #4]
   374b8:	cmn	r0, #1
   374bc:	beq	374d8 <__assert_fail@plt+0x24a28>
   374c0:	cmp	r7, #0
   374c4:	beq	3788c <__assert_fail@plt+0x24ddc>
   374c8:	ldr	r0, [sp, #132]	; 0x84
   374cc:	sub	r0, r0, r3
   374d0:	cmp	r0, r7
   374d4:	bge	37aec <__assert_fail@plt+0x2503c>
   374d8:	ldr	r7, [sp, #88]	; 0x58
   374dc:	b	37764 <__assert_fail@plt+0x24cb4>
   374e0:	ldr	r0, [sp, #204]	; 0xcc
   374e4:	ldr	r4, [r4, #20]
   374e8:	cmp	lr, #1
   374ec:	ldr	r0, [r0, r3, lsl #2]
   374f0:	str	r0, [sp, #100]	; 0x64
   374f4:	blt	37538 <__assert_fail@plt+0x24a88>
   374f8:	mov	r0, #0
   374fc:	subs	r1, lr, #1
   37500:	beq	37524 <__assert_fail@plt+0x24a74>
   37504:	add	r2, r0, r1
   37508:	lsr	r3, r2, #1
   3750c:	ldr	r7, [ip, r3, lsl #2]
   37510:	cmp	r7, sl
   37514:	addlt	r0, r8, r2, lsr #1
   37518:	movge	r1, r3
   3751c:	cmp	r0, r1
   37520:	bcc	37504 <__assert_fail@plt+0x24a54>
   37524:	ldr	r0, [ip, r0, lsl #2]
   37528:	cmp	r0, sl
   3752c:	bne	37538 <__assert_fail@plt+0x24a88>
   37530:	str	lr, [sp, #56]	; 0x38
   37534:	b	37678 <__assert_fail@plt+0x24bc8>
   37538:	ldr	r0, [sp, #60]	; 0x3c
   3753c:	cmp	r0, #0
   37540:	beq	3764c <__assert_fail@plt+0x24b9c>
   37544:	cmp	lr, #0
   37548:	bne	37b44 <__assert_fail@plt+0x25094>
   3754c:	mov	r0, #1
   37550:	str	sl, [ip]
   37554:	b	37674 <__assert_fail@plt+0x24bc4>
   37558:	mov	r0, r4
   3755c:	mov	r1, sl
   37560:	add	r2, sp, #104	; 0x68
   37564:	mov	r9, ip
   37568:	bl	421c8 <__assert_fail@plt+0x2f718>
   3756c:	ldr	r3, [sp, #80]	; 0x50
   37570:	mov	r1, r0
   37574:	cmp	r1, #0
   37578:	mov	ip, r9
   3757c:	bne	375b4 <__assert_fail@plt+0x24b04>
   37580:	ldr	r0, [r4]
   37584:	mov	r2, r3
   37588:	mov	r7, r6
   3758c:	mov	r6, ip
   37590:	add	r1, r0, sl, lsl #3
   37594:	add	r0, sp, #104	; 0x68
   37598:	bl	4252c <__assert_fail@plt+0x2fa7c>
   3759c:	ldr	r3, [sp, #80]	; 0x50
   375a0:	mov	ip, r6
   375a4:	mov	r6, r7
   375a8:	mov	r1, #1
   375ac:	cmp	r0, #0
   375b0:	beq	37758 <__assert_fail@plt+0x24ca8>
   375b4:	ldr	r0, [r4, #12]
   375b8:	ldr	r7, [sp, #88]	; 0x58
   375bc:	add	r3, r1, r3
   375c0:	ldr	sl, [r0, sl, lsl #2]
   375c4:	cmp	r7, #0
   375c8:	beq	37800 <__assert_fail@plt+0x24d50>
   375cc:	ldr	r0, [sp, #196]	; 0xc4
   375d0:	cmp	r3, r0
   375d4:	bgt	37764 <__assert_fail@plt+0x24cb4>
   375d8:	ldr	r0, [sp, #204]	; 0xcc
   375dc:	ldr	r0, [r0, r3, lsl #2]
   375e0:	cmp	r0, #0
   375e4:	beq	37764 <__assert_fail@plt+0x24cb4>
   375e8:	ldr	r1, [r0, #8]
   375ec:	cmp	r1, #1
   375f0:	blt	37764 <__assert_fail@plt+0x24cb4>
   375f4:	ldr	r0, [r0, #12]
   375f8:	mov	lr, ip
   375fc:	mov	ip, r6
   37600:	subs	r1, r1, #1
   37604:	mov	r2, #0
   37608:	beq	37630 <__assert_fail@plt+0x24b80>
   3760c:	mov	r2, #0
   37610:	add	r4, r2, r1
   37614:	lsr	r7, r4, #1
   37618:	ldr	r6, [r0, r7, lsl #2]
   3761c:	cmp	r6, sl
   37620:	addlt	r2, r8, r4, lsr #1
   37624:	movge	r1, r7
   37628:	cmp	r2, r1
   3762c:	bcc	37610 <__assert_fail@plt+0x24b60>
   37630:	ldr	r0, [r0, r2, lsl #2]
   37634:	mov	r6, ip
   37638:	mov	ip, lr
   3763c:	mov	lr, #0
   37640:	cmp	r0, sl
   37644:	beq	37a08 <__assert_fail@plt+0x24f58>
   37648:	b	37758 <__assert_fail@plt+0x24ca8>
   3764c:	mov	r0, #4
   37650:	bl	327ac <__assert_fail@plt+0x1fcfc>
   37654:	cmp	r0, #0
   37658:	beq	38138 <__assert_fail@plt+0x25688>
   3765c:	mov	r6, r0
   37660:	str	sl, [r0]
   37664:	mov	r0, #1
   37668:	str	r0, [sp, #60]	; 0x3c
   3766c:	mov	r0, #1
   37670:	mov	ip, r6
   37674:	str	r0, [sp, #56]	; 0x38
   37678:	add	r0, sl, sl, lsl #1
   3767c:	add	r1, r4, r0, lsl #2
   37680:	ldr	lr, [r1, #4]
   37684:	cmp	lr, #1
   37688:	blt	37758 <__assert_fail@plt+0x24ca8>
   3768c:	ldr	r0, [sp, #100]	; 0x64
   37690:	str	ip, [sp, #40]	; 0x28
   37694:	ldr	ip, [r1, #8]
   37698:	str	r6, [sp, #48]	; 0x30
   3769c:	mov	r6, #0
   376a0:	ldr	r2, [r0, #8]
   376a4:	mvn	r0, #0
   376a8:	str	r0, [sp, #92]	; 0x5c
   376ac:	sub	sl, r2, #1
   376b0:	cmp	r2, #1
   376b4:	bge	376d4 <__assert_fail@plt+0x24c24>
   376b8:	b	376c0 <__assert_fail@plt+0x24c10>
   376bc:	ldr	r5, [sp, #32]
   376c0:	add	r6, r6, #1
   376c4:	cmp	r6, lr
   376c8:	beq	37734 <__assert_fail@plt+0x24c84>
   376cc:	cmp	r2, #1
   376d0:	blt	376c0 <__assert_fail@plt+0x24c10>
   376d4:	ldr	r0, [sp, #100]	; 0x64
   376d8:	ldr	r4, [ip, r6, lsl #2]
   376dc:	mov	r5, #0
   376e0:	cmp	sl, #0
   376e4:	ldr	r7, [r0, #12]
   376e8:	beq	37710 <__assert_fail@plt+0x24c60>
   376ec:	mov	r3, sl
   376f0:	add	r0, r5, r3
   376f4:	lsr	r1, r0, #1
   376f8:	ldr	r9, [r7, r1, lsl #2]
   376fc:	cmp	r9, r4
   37700:	addlt	r5, r8, r0, lsr #1
   37704:	movge	r3, r1
   37708:	cmp	r5, r3
   3770c:	bcc	376f0 <__assert_fail@plt+0x24c40>
   37710:	ldr	r0, [r7, r5, lsl #2]
   37714:	cmp	r0, r4
   37718:	bne	376bc <__assert_fail@plt+0x24c0c>
   3771c:	ldr	r0, [sp, #92]	; 0x5c
   37720:	ldr	r5, [sp, #32]
   37724:	cmn	r0, #1
   37728:	bne	37810 <__assert_fail@plt+0x24d60>
   3772c:	str	r4, [sp, #92]	; 0x5c
   37730:	b	376c0 <__assert_fail@plt+0x24c10>
   37734:	ldr	r6, [sp, #48]	; 0x30
   37738:	ldr	r3, [sp, #80]	; 0x50
   3773c:	ldr	ip, [sp, #40]	; 0x28
   37740:	ldr	lr, [sp, #56]	; 0x38
   37744:	ldr	sl, [sp, #92]	; 0x5c
   37748:	cmn	sl, #1
   3774c:	bgt	37a10 <__assert_fail@plt+0x24f60>
   37750:	cmn	sl, #2
   37754:	beq	3809c <__assert_fail@plt+0x255ec>
   37758:	ldr	r7, [sp, #88]	; 0x58
   3775c:	cmp	r7, #0
   37760:	beq	37ffc <__assert_fail@plt+0x2554c>
   37764:	ldr	r0, [r7]
   37768:	cmp	r0, #0
   3776c:	beq	37fd4 <__assert_fail@plt+0x25524>
   37770:	sub	r0, r0, #1
   37774:	mov	sl, r6
   37778:	ldr	r6, [sp, #64]	; 0x40
   3777c:	ldr	r9, [fp, #20]
   37780:	str	r0, [r7]
   37784:	add	r5, r0, r0, lsl #1
   37788:	ldr	r4, [r7, #8]
   3778c:	mov	r2, r6
   37790:	ldr	r0, [r4, r5, lsl #3]!
   37794:	ldr	r1, [r4, #8]
   37798:	str	r0, [sp, #80]	; 0x50
   3779c:	mov	r0, r9
   377a0:	bl	124e0 <memcpy@plt>
   377a4:	ldr	r0, [r4, #8]
   377a8:	ldr	r4, [sp, #84]	; 0x54
   377ac:	mov	r2, r6
   377b0:	add	r1, r0, r4, lsl #3
   377b4:	ldr	r0, [sp, #68]	; 0x44
   377b8:	bl	124e0 <memcpy@plt>
   377bc:	mov	r0, sl
   377c0:	bl	30174 <__assert_fail@plt+0x1d6c4>
   377c4:	ldr	r0, [r7, #8]
   377c8:	add	r0, r0, r5, lsl #3
   377cc:	ldr	r0, [r0, #8]
   377d0:	bl	30174 <__assert_fail@plt+0x1d6c4>
   377d4:	ldr	r0, [r7, #8]
   377d8:	ldr	r3, [sp, #80]	; 0x50
   377dc:	add	r0, r0, r5, lsl #3
   377e0:	ldr	r5, [sp, #32]
   377e4:	ldr	r6, [r0, #20]
   377e8:	ldr	r1, [r0, #12]
   377ec:	ldr	sl, [r0, #4]
   377f0:	ldr	lr, [r0, #16]
   377f4:	mov	ip, r6
   377f8:	str	r1, [sp, #60]	; 0x3c
   377fc:	b	37a18 <__assert_fail@plt+0x24f68>
   37800:	mov	lr, #0
   37804:	cmn	sl, #1
   37808:	bgt	37a10 <__assert_fail@plt+0x24f60>
   3780c:	b	37750 <__assert_fail@plt+0x24ca0>
   37810:	ldr	lr, [sp, #56]	; 0x38
   37814:	ldr	sl, [sp, #88]	; 0x58
   37818:	ldr	r6, [sp, #48]	; 0x30
   3781c:	ldr	r3, [sp, #80]	; 0x50
   37820:	ldr	ip, [sp, #40]	; 0x28
   37824:	cmp	lr, #1
   37828:	blt	378d4 <__assert_fail@plt+0x24e24>
   3782c:	mov	r0, lr
   37830:	mov	r9, lr
   37834:	mov	r0, #0
   37838:	subs	r1, lr, #1
   3783c:	beq	378ac <__assert_fail@plt+0x24dfc>
   37840:	ldr	lr, [sp, #92]	; 0x5c
   37844:	add	r2, r0, r1
   37848:	lsr	r6, r2, #1
   3784c:	ldr	r7, [ip, r6, lsl #2]
   37850:	cmp	r7, lr
   37854:	addlt	r0, r8, r2, lsr #1
   37858:	movge	r1, r6
   3785c:	cmp	r0, r1
   37860:	bcc	37844 <__assert_fail@plt+0x24d94>
   37864:	b	378b0 <__assert_fail@plt+0x24e00>
   37868:	cmp	r7, #0
   3786c:	beq	3788c <__assert_fail@plt+0x24ddc>
   37870:	ldr	r0, [r4, #12]
   37874:	add	r3, r7, r3
   37878:	mov	lr, #0
   3787c:	ldr	sl, [r0, sl, lsl #2]
   37880:	cmn	sl, #1
   37884:	bgt	37a10 <__assert_fail@plt+0x24f60>
   37888:	b	37750 <__assert_fail@plt+0x24ca0>
   3788c:	ldr	r0, [sp, #60]	; 0x3c
   37890:	cmp	r0, #0
   37894:	beq	37a2c <__assert_fail@plt+0x24f7c>
   37898:	cmp	lr, #0
   3789c:	bne	37c70 <__assert_fail@plt+0x251c0>
   378a0:	str	sl, [ip]
   378a4:	mov	r2, #1
   378a8:	b	37a58 <__assert_fail@plt+0x24fa8>
   378ac:	ldr	lr, [sp, #92]	; 0x5c
   378b0:	ldr	r0, [ip, r0, lsl #2]
   378b4:	ldr	r6, [sp, #48]	; 0x30
   378b8:	cmp	r0, lr
   378bc:	mov	lr, r9
   378c0:	bne	378d4 <__assert_fail@plt+0x24e24>
   378c4:	mov	sl, r4
   378c8:	cmn	sl, #1
   378cc:	bgt	37a10 <__assert_fail@plt+0x24f60>
   378d0:	b	37750 <__assert_fail@plt+0x24ca0>
   378d4:	cmp	sl, #0
   378d8:	beq	37744 <__assert_fail@plt+0x24c94>
   378dc:	ldr	r6, [sl]
   378e0:	ldr	r0, [sl, #4]
   378e4:	add	r1, r6, #1
   378e8:	cmp	r1, r0
   378ec:	str	r1, [sl]
   378f0:	bne	37924 <__assert_fail@plt+0x24e74>
   378f4:	ldr	r0, [sl, #8]
   378f8:	add	r1, r1, r1, lsl #1
   378fc:	lsl	r1, r1, #4
   37900:	bl	33500 <__assert_fail@plt+0x20a50>
   37904:	cmp	r0, #0
   37908:	beq	38098 <__assert_fail@plt+0x255e8>
   3790c:	str	r0, [sl, #8]
   37910:	ldr	r3, [sp, #80]	; 0x50
   37914:	ldr	r1, [sl, #4]
   37918:	lsl	r1, r1, #1
   3791c:	str	r1, [sl, #4]
   37920:	b	37928 <__assert_fail@plt+0x24e78>
   37924:	ldr	r0, [sl, #8]
   37928:	add	r6, r6, r6, lsl #1
   3792c:	str	r3, [r0, r6, lsl #3]!
   37930:	str	r4, [r0, #4]
   37934:	ldr	r0, [sp, #44]	; 0x2c
   37938:	bl	327ac <__assert_fail@plt+0x1fcfc>
   3793c:	ldr	r1, [sl, #8]
   37940:	cmp	r0, #0
   37944:	add	r4, r1, r6, lsl #3
   37948:	str	r0, [r4, #8]!
   3794c:	beq	38098 <__assert_fail@plt+0x255e8>
   37950:	ldr	r5, [sp, #64]	; 0x40
   37954:	ldr	r1, [fp, #20]
   37958:	mov	r2, r5
   3795c:	bl	124e0 <memcpy@plt>
   37960:	ldr	r0, [r4]
   37964:	ldr	r1, [sp, #84]	; 0x54
   37968:	mov	r2, r5
   3796c:	add	r0, r0, r1, lsl #3
   37970:	ldr	r1, [sp, #68]	; 0x44
   37974:	bl	124e0 <memcpy@plt>
   37978:	ldr	r0, [sl, #8]
   3797c:	ldr	lr, [sp, #56]	; 0x38
   37980:	add	r7, r0, r6, lsl #3
   37984:	cmp	lr, #1
   37988:	mov	r6, r7
   3798c:	str	lr, [r6, #16]!
   37990:	sub	r5, r6, #4
   37994:	blt	379e4 <__assert_fail@plt+0x24f34>
   37998:	lsl	r4, lr, #2
   3799c:	str	lr, [r5]
   379a0:	mov	r0, r4
   379a4:	bl	327ac <__assert_fail@plt+0x1fcfc>
   379a8:	ldr	sl, [sp, #92]	; 0x5c
   379ac:	cmp	r0, #0
   379b0:	str	r0, [r7, #20]
   379b4:	beq	38140 <__assert_fail@plt+0x25690>
   379b8:	ldr	r6, [sp, #48]	; 0x30
   379bc:	mov	r2, r4
   379c0:	mov	r1, r6
   379c4:	bl	124e0 <memcpy@plt>
   379c8:	ldr	r5, [sp, #32]
   379cc:	ldr	r3, [sp, #80]	; 0x50
   379d0:	ldr	ip, [sp, #40]	; 0x28
   379d4:	ldr	lr, [sp, #56]	; 0x38
   379d8:	cmn	sl, #1
   379dc:	bgt	37a10 <__assert_fail@plt+0x24f60>
   379e0:	b	37750 <__assert_fail@plt+0x24ca0>
   379e4:	mov	r0, #0
   379e8:	ldr	r6, [sp, #48]	; 0x30
   379ec:	ldr	r3, [sp, #80]	; 0x50
   379f0:	ldr	ip, [sp, #40]	; 0x28
   379f4:	ldr	sl, [sp, #92]	; 0x5c
   379f8:	str	r0, [r5]
   379fc:	str	r0, [r5, #4]
   37a00:	str	r0, [r5, #8]
   37a04:	ldr	r5, [sp, #32]
   37a08:	cmn	sl, #1
   37a0c:	ble	37750 <__assert_fail@plt+0x24ca0>
   37a10:	ldr	r4, [sp, #84]	; 0x54
   37a14:	ldr	r9, [fp, #20]
   37a18:	ldr	r0, [r9, #4]
   37a1c:	ldr	r9, [fp, #16]
   37a20:	cmp	r3, r0
   37a24:	ble	37210 <__assert_fail@plt+0x24760>
   37a28:	b	37140 <__assert_fail@plt+0x24690>
   37a2c:	mov	r0, #4
   37a30:	bl	327ac <__assert_fail@plt+0x1fcfc>
   37a34:	cmp	r0, #0
   37a38:	beq	38138 <__assert_fail@plt+0x25688>
   37a3c:	ldr	r3, [sp, #80]	; 0x50
   37a40:	mov	r6, r0
   37a44:	str	sl, [r0]
   37a48:	mov	r0, #1
   37a4c:	mov	r2, #1
   37a50:	str	r0, [sp, #60]	; 0x3c
   37a54:	mov	ip, r6
   37a58:	ldr	r0, [sp, #204]	; 0xcc
   37a5c:	ldr	r0, [r0, r3, lsl #2]
   37a60:	ldr	r1, [r0, #8]
   37a64:	cmp	r1, #1
   37a68:	blt	37580 <__assert_fail@plt+0x24ad0>
   37a6c:	str	r2, [sp, #56]	; 0x38
   37a70:	ldr	r2, [r4, #20]
   37a74:	str	r7, [sp, #100]	; 0x64
   37a78:	add	r7, sl, sl, lsl #1
   37a7c:	ldr	lr, [r0, #12]
   37a80:	mov	r9, ip
   37a84:	str	r6, [sp, #48]	; 0x30
   37a88:	add	r2, r2, r7, lsl #2
   37a8c:	ldr	r2, [r2, #8]
   37a90:	ldr	r2, [r2]
   37a94:	str	r2, [sp, #92]	; 0x5c
   37a98:	subs	r2, r1, #1
   37a9c:	mov	r1, #0
   37aa0:	beq	37acc <__assert_fail@plt+0x2501c>
   37aa4:	ldr	ip, [sp, #92]	; 0x5c
   37aa8:	add	r0, r1, r2
   37aac:	lsr	r7, r0, #1
   37ab0:	ldr	r6, [lr, r7, lsl #2]
   37ab4:	cmp	r6, ip
   37ab8:	addlt	r1, r8, r0, lsr #1
   37abc:	movge	r2, r7
   37ac0:	cmp	r1, r2
   37ac4:	bcc	37aa8 <__assert_fail@plt+0x24ff8>
   37ac8:	b	37ad0 <__assert_fail@plt+0x25020>
   37acc:	ldr	ip, [sp, #92]	; 0x5c
   37ad0:	ldr	r0, [lr, r1, lsl #2]
   37ad4:	ldr	r6, [sp, #48]	; 0x30
   37ad8:	ldr	r1, [sp, #100]	; 0x64
   37adc:	cmp	r0, ip
   37ae0:	bne	37574 <__assert_fail@plt+0x24ac4>
   37ae4:	mov	ip, r9
   37ae8:	b	37740 <__assert_fail@plt+0x24c90>
   37aec:	ldr	r2, [sp, #108]	; 0x6c
   37af0:	str	r6, [sp, #48]	; 0x30
   37af4:	mov	r6, ip
   37af8:	mov	r9, r3
   37afc:	add	r0, r2, r1
   37b00:	add	r1, r2, r3
   37b04:	mov	r2, r7
   37b08:	bl	127a4 <bcmp@plt>
   37b0c:	cmp	r0, #0
   37b10:	beq	37b24 <__assert_fail@plt+0x25074>
   37b14:	mov	ip, r6
   37b18:	ldr	r7, [sp, #88]	; 0x58
   37b1c:	ldr	r6, [sp, #48]	; 0x30
   37b20:	b	37764 <__assert_fail@plt+0x24cb4>
   37b24:	ldr	r0, [r4, #12]
   37b28:	add	r9, r7, r9
   37b2c:	mov	ip, r6
   37b30:	ldr	r7, [sp, #88]	; 0x58
   37b34:	ldr	r6, [sp, #48]	; 0x30
   37b38:	mov	r3, r9
   37b3c:	ldr	sl, [r0, sl, lsl #2]
   37b40:	b	375cc <__assert_fail@plt+0x24b1c>
   37b44:	ldr	r1, [sp, #60]	; 0x3c
   37b48:	mov	r9, ip
   37b4c:	mov	r0, r6
   37b50:	str	lr, [sp, #56]	; 0x38
   37b54:	cmp	r1, lr
   37b58:	bne	37b8c <__assert_fail@plt+0x250dc>
   37b5c:	ldr	r1, [sp, #60]	; 0x3c
   37b60:	lsl	r1, r1, #3
   37b64:	bl	33500 <__assert_fail@plt+0x20a50>
   37b68:	cmp	r0, #0
   37b6c:	mov	ip, r9
   37b70:	beq	3809c <__assert_fail@plt+0x255ec>
   37b74:	mov	r1, r0
   37b78:	ldr	r0, [sp, #60]	; 0x3c
   37b7c:	mov	r9, r1
   37b80:	lsl	r0, r0, #1
   37b84:	str	r0, [sp, #60]	; 0x3c
   37b88:	mov	r0, r1
   37b8c:	ldr	r1, [r9]
   37b90:	cmp	r1, sl
   37b94:	ble	37c18 <__assert_fail@plt+0x25168>
   37b98:	ldr	ip, [sp, #56]	; 0x38
   37b9c:	cmp	ip, #1
   37ba0:	blt	37c50 <__assert_fail@plt+0x251a0>
   37ba4:	ldr	r5, [sp, #56]	; 0x38
   37ba8:	ands	r1, r5, #3
   37bac:	sub	r2, r5, #1
   37bb0:	beq	37bd8 <__assert_fail@plt+0x25128>
   37bb4:	ldr	r5, [sp, #56]	; 0x38
   37bb8:	add	r7, r9, r5, lsl #2
   37bbc:	mov	r3, r7
   37bc0:	ldr	r6, [r3, #-4]!
   37bc4:	subs	r1, r1, #1
   37bc8:	sub	r5, r5, #1
   37bcc:	str	r6, [r7]
   37bd0:	mov	r7, r3
   37bd4:	bne	37bc0 <__assert_fail@plt+0x25110>
   37bd8:	mov	ip, #0
   37bdc:	cmp	r2, #3
   37be0:	bcc	37c50 <__assert_fail@plt+0x251a0>
   37be4:	add	r2, r9, r5, lsl #2
   37be8:	sub	r2, r2, #8
   37bec:	ldr	r6, [r2]
   37bf0:	ldr	r1, [r2, #4]
   37bf4:	ldmdb	r2, {r3, r7}
   37bf8:	sub	r5, r5, #4
   37bfc:	cmp	r5, #0
   37c00:	stmda	r2, {r3, r7}
   37c04:	str	r6, [r2, #4]
   37c08:	str	r1, [r2, #8]
   37c0c:	sub	r2, r2, #16
   37c10:	bgt	37bec <__assert_fail@plt+0x2513c>
   37c14:	b	37c50 <__assert_fail@plt+0x251a0>
   37c18:	ldr	ip, [sp, #56]	; 0x38
   37c1c:	add	r3, r9, ip, lsl #2
   37c20:	ldr	r2, [r3, #-4]
   37c24:	cmp	r2, sl
   37c28:	ble	37c50 <__assert_fail@plt+0x251a0>
   37c2c:	ldr	r1, [sp, #56]	; 0x38
   37c30:	sub	r1, r1, #2
   37c34:	str	r2, [r3]
   37c38:	sub	r1, r1, #1
   37c3c:	ldr	r2, [r3, #-8]
   37c40:	sub	r3, r3, #4
   37c44:	cmp	r2, sl
   37c48:	bgt	37c34 <__assert_fail@plt+0x25184>
   37c4c:	add	ip, r1, #2
   37c50:	ldr	r1, [sp, #56]	; 0x38
   37c54:	ldr	r5, [sp, #32]
   37c58:	str	sl, [r9, ip, lsl #2]
   37c5c:	mov	ip, r9
   37c60:	mov	r6, r0
   37c64:	add	r1, r1, #1
   37c68:	str	r1, [sp, #56]	; 0x38
   37c6c:	b	37678 <__assert_fail@plt+0x24bc8>
   37c70:	ldr	r1, [sp, #60]	; 0x3c
   37c74:	mov	r9, ip
   37c78:	mov	r0, r6
   37c7c:	str	r7, [sp, #100]	; 0x64
   37c80:	str	lr, [sp, #56]	; 0x38
   37c84:	cmp	r1, lr
   37c88:	bne	37cbc <__assert_fail@plt+0x2520c>
   37c8c:	ldr	r1, [sp, #60]	; 0x3c
   37c90:	lsl	r1, r1, #3
   37c94:	bl	33500 <__assert_fail@plt+0x20a50>
   37c98:	cmp	r0, #0
   37c9c:	mov	ip, r9
   37ca0:	beq	3809c <__assert_fail@plt+0x255ec>
   37ca4:	mov	r1, r0
   37ca8:	ldr	r0, [sp, #60]	; 0x3c
   37cac:	mov	r9, r1
   37cb0:	lsl	r0, r0, #1
   37cb4:	str	r0, [sp, #60]	; 0x3c
   37cb8:	mov	r0, r1
   37cbc:	ldr	r1, [r9]
   37cc0:	cmp	r1, sl
   37cc4:	ble	37d48 <__assert_fail@plt+0x25298>
   37cc8:	ldr	ip, [sp, #56]	; 0x38
   37ccc:	cmp	ip, #1
   37cd0:	blt	37d80 <__assert_fail@plt+0x252d0>
   37cd4:	ldr	r5, [sp, #56]	; 0x38
   37cd8:	ands	r1, r5, #3
   37cdc:	sub	r2, r5, #1
   37ce0:	beq	37d08 <__assert_fail@plt+0x25258>
   37ce4:	ldr	r5, [sp, #56]	; 0x38
   37ce8:	add	r7, r9, r5, lsl #2
   37cec:	mov	r3, r7
   37cf0:	ldr	r6, [r3, #-4]!
   37cf4:	subs	r1, r1, #1
   37cf8:	sub	r5, r5, #1
   37cfc:	str	r6, [r7]
   37d00:	mov	r7, r3
   37d04:	bne	37cf0 <__assert_fail@plt+0x25240>
   37d08:	mov	ip, #0
   37d0c:	cmp	r2, #3
   37d10:	bcc	37d80 <__assert_fail@plt+0x252d0>
   37d14:	add	r2, r9, r5, lsl #2
   37d18:	sub	r2, r2, #8
   37d1c:	ldr	r6, [r2]
   37d20:	ldr	r1, [r2, #4]
   37d24:	ldmdb	r2, {r3, r7}
   37d28:	sub	r5, r5, #4
   37d2c:	cmp	r5, #0
   37d30:	stmda	r2, {r3, r7}
   37d34:	str	r6, [r2, #4]
   37d38:	str	r1, [r2, #8]
   37d3c:	sub	r2, r2, #16
   37d40:	bgt	37d1c <__assert_fail@plt+0x2526c>
   37d44:	b	37d80 <__assert_fail@plt+0x252d0>
   37d48:	ldr	ip, [sp, #56]	; 0x38
   37d4c:	add	r3, r9, ip, lsl #2
   37d50:	ldr	r2, [r3, #-4]
   37d54:	cmp	r2, sl
   37d58:	ble	37d80 <__assert_fail@plt+0x252d0>
   37d5c:	ldr	r1, [sp, #56]	; 0x38
   37d60:	sub	r1, r1, #2
   37d64:	str	r2, [r3]
   37d68:	sub	r1, r1, #1
   37d6c:	ldr	r2, [r3, #-8]
   37d70:	sub	r3, r3, #4
   37d74:	cmp	r2, sl
   37d78:	bgt	37d64 <__assert_fail@plt+0x252b4>
   37d7c:	add	ip, r1, #2
   37d80:	ldr	r2, [sp, #56]	; 0x38
   37d84:	ldr	r5, [sp, #32]
   37d88:	ldr	r3, [sp, #80]	; 0x50
   37d8c:	ldr	r7, [sp, #100]	; 0x64
   37d90:	str	sl, [r9, ip, lsl #2]
   37d94:	mov	ip, r9
   37d98:	mov	r6, r0
   37d9c:	add	r2, r2, #1
   37da0:	b	37a58 <__assert_fail@plt+0x24fa8>
   37da4:	mov	r0, r6
   37da8:	bl	30174 <__assert_fail@plt+0x1d6c4>
   37dac:	ldr	r0, [fp, #-184]	; 0xffffff48
   37db0:	ldr	r6, [sp, #72]	; 0x48
   37db4:	cmp	r0, r6
   37db8:	beq	37dc0 <__assert_fail@plt+0x25310>
   37dbc:	bl	30174 <__assert_fail@plt+0x1d6c4>
   37dc0:	ldr	lr, [sp, #96]	; 0x60
   37dc4:	mov	r0, #16
   37dc8:	str	r6, [fp, #-184]	; 0xffffff48
   37dcc:	cmp	r7, #0
   37dd0:	str	r0, [fp, #-188]	; 0xffffff44
   37dd4:	mov	r0, #0
   37dd8:	str	r0, [fp, #-192]	; 0xffffff40
   37ddc:	beq	37e40 <__assert_fail@plt+0x25390>
   37de0:	ldr	r1, [r7]
   37de4:	ldr	r0, [r7, #8]
   37de8:	mov	r6, lr
   37dec:	cmp	r1, #1
   37df0:	blt	37e30 <__assert_fail@plt+0x25380>
   37df4:	mov	r4, #0
   37df8:	mov	r5, #0
   37dfc:	add	r0, r0, r4
   37e00:	ldr	r0, [r0, #20]
   37e04:	bl	30174 <__assert_fail@plt+0x1d6c4>
   37e08:	ldr	r0, [r7, #8]
   37e0c:	add	r0, r0, r4
   37e10:	ldr	r0, [r0, #8]
   37e14:	bl	30174 <__assert_fail@plt+0x1d6c4>
   37e18:	ldr	r1, [r7]
   37e1c:	ldr	r0, [r7, #8]
   37e20:	add	r5, r5, #1
   37e24:	add	r4, r4, #24
   37e28:	cmp	r5, r1
   37e2c:	blt	37dfc <__assert_fail@plt+0x2534c>
   37e30:	bl	30174 <__assert_fail@plt+0x1d6c4>
   37e34:	ldr	r5, [sp, #32]
   37e38:	ldr	r4, [sp, #84]	; 0x54
   37e3c:	mov	lr, r6
   37e40:	ldr	r0, [fp, #20]
   37e44:	ldrb	r1, [sp, #180]	; 0xb4
   37e48:	mov	r2, r9
   37e4c:	add	r0, r0, #4
   37e50:	b	37ebc <__assert_fail@plt+0x2540c>
   37e54:	mov	r6, #0
   37e58:	b	35558 <__assert_fail@plt+0x22aa8>
   37e5c:	mov	sl, #12
   37e60:	b	37f74 <__assert_fail@plt+0x254c4>
   37e64:	ldr	r7, [sp, #132]	; 0x84
   37e68:	ldr	r6, [sp, #28]
   37e6c:	ldr	ip, [sp, #116]	; 0x74
   37e70:	cmp	r3, r7
   37e74:	mov	r5, r6
   37e78:	addne	r5, ip, r3, lsl #2
   37e7c:	ldr	r3, [r5]
   37e80:	str	r3, [r0, #-4]
   37e84:	ldr	r5, [r0]
   37e88:	cmp	r5, r7
   37e8c:	addne	r6, ip, r5, lsl #2
   37e90:	ldr	r5, [sp, #32]
   37e94:	ldr	r7, [r6]
   37e98:	str	r7, [r0]
   37e9c:	ldr	r6, [fp, #-200]	; 0xffffff38
   37ea0:	add	r3, r3, r6
   37ea4:	add	r7, r7, r6
   37ea8:	stmda	r0, {r3, r7}
   37eac:	sub	r2, r2, #1
   37eb0:	add	r0, r0, #8
   37eb4:	cmp	r5, r2
   37eb8:	beq	37ed8 <__assert_fail@plt+0x25428>
   37ebc:	ldr	r3, [r0, #-4]
   37ec0:	cmn	r3, #1
   37ec4:	beq	37eac <__assert_fail@plt+0x253fc>
   37ec8:	cmp	r1, #0
   37ecc:	bne	37e64 <__assert_fail@plt+0x253b4>
   37ed0:	ldr	r7, [r0]
   37ed4:	b	37e9c <__assert_fail@plt+0x253ec>
   37ed8:	cmp	r5, #1
   37edc:	blt	37efc <__assert_fail@plt+0x2544c>
   37ee0:	ldr	r0, [fp, #20]
   37ee4:	lsl	r2, r5, #3
   37ee8:	mov	r1, #255	; 0xff
   37eec:	add	r0, r0, r4, lsl #3
   37ef0:	mov	r4, lr
   37ef4:	bl	12834 <memset@plt>
   37ef8:	mov	lr, r4
   37efc:	ldr	r0, [lr, #132]	; 0x84
   37f00:	mov	sl, #0
   37f04:	cmp	r0, #0
   37f08:	beq	37f74 <__assert_fail@plt+0x254c4>
   37f0c:	ldr	r1, [sp, #84]	; 0x54
   37f10:	cmp	r1, #2
   37f14:	bcc	37f74 <__assert_fail@plt+0x254c4>
   37f18:	ldr	r1, [sp, #32]
   37f1c:	ldr	r2, [fp, #16]
   37f20:	ldr	r6, [fp, #20]
   37f24:	mvn	r1, r1
   37f28:	add	r1, r1, r2
   37f2c:	mov	r2, #0
   37f30:	b	37f40 <__assert_fail@plt+0x25490>
   37f34:	add	r2, r2, #1
   37f38:	cmp	r1, r2
   37f3c:	beq	37f70 <__assert_fail@plt+0x254c0>
   37f40:	ldr	r3, [r0, r2, lsl #2]
   37f44:	cmp	r2, r3
   37f48:	beq	37f34 <__assert_fail@plt+0x25484>
   37f4c:	add	r3, r6, r3, lsl #3
   37f50:	add	r7, r6, r2, lsl #3
   37f54:	ldr	r3, [r3, #8]
   37f58:	str	r3, [r7, #8]
   37f5c:	ldr	r3, [r0, r2, lsl #2]
   37f60:	add	r3, r6, r3, lsl #3
   37f64:	ldr	r3, [r3, #12]
   37f68:	str	r3, [r7, #12]
   37f6c:	b	37f34 <__assert_fail@plt+0x25484>
   37f70:	mov	sl, #0
   37f74:	ldr	r0, [sp, #204]	; 0xcc
   37f78:	bl	30174 <__assert_fail@plt+0x1d6c4>
   37f7c:	ldr	r0, [sp, #96]	; 0x60
   37f80:	ldr	r0, [r0, #76]	; 0x4c
   37f84:	cmp	r0, #0
   37f88:	beq	37fa4 <__assert_fail@plt+0x254f4>
   37f8c:	add	r0, sp, #104	; 0x68
   37f90:	bl	3f8e0 <__assert_fail@plt+0x2ce30>
   37f94:	ldr	r0, [sp, #236]	; 0xec
   37f98:	bl	30174 <__assert_fail@plt+0x1d6c4>
   37f9c:	ldr	r0, [sp, #220]	; 0xdc
   37fa0:	bl	30174 <__assert_fail@plt+0x1d6c4>
   37fa4:	ldr	r0, [sp, #112]	; 0x70
   37fa8:	bl	30174 <__assert_fail@plt+0x1d6c4>
   37fac:	ldr	r0, [sp, #116]	; 0x74
   37fb0:	bl	30174 <__assert_fail@plt+0x1d6c4>
   37fb4:	ldrb	r0, [sp, #179]	; 0xb3
   37fb8:	cmp	r0, #0
   37fbc:	beq	37fc8 <__assert_fail@plt+0x25518>
   37fc0:	ldr	r0, [sp, #108]	; 0x6c
   37fc4:	bl	30174 <__assert_fail@plt+0x1d6c4>
   37fc8:	mov	r0, sl
   37fcc:	sub	sp, fp, #28
   37fd0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   37fd4:	mov	r5, #0
   37fd8:	b	38000 <__assert_fail@plt+0x25550>
   37fdc:	mov	sl, r0
   37fe0:	b	37f74 <__assert_fail@plt+0x254c4>
   37fe4:	mov	r0, r7
   37fe8:	bl	30174 <__assert_fail@plt+0x1d6c4>
   37fec:	mov	r0, #0
   37ff0:	bl	30174 <__assert_fail@plt+0x1d6c4>
   37ff4:	mov	sl, #12
   37ff8:	b	37f74 <__assert_fail@plt+0x254c4>
   37ffc:	mov	r5, #1
   38000:	mov	r0, ip
   38004:	bl	30174 <__assert_fail@plt+0x1d6c4>
   38008:	ldr	r0, [fp, #-184]	; 0xffffff48
   3800c:	ldr	r4, [sp, #72]	; 0x48
   38010:	cmp	r0, r4
   38014:	beq	3801c <__assert_fail@plt+0x2556c>
   38018:	bl	30174 <__assert_fail@plt+0x1d6c4>
   3801c:	mov	r0, #16
   38020:	str	r4, [fp, #-184]	; 0xffffff48
   38024:	mov	sl, #1
   38028:	cmp	r5, #0
   3802c:	str	r0, [fp, #-188]	; 0xffffff44
   38030:	mov	r0, #0
   38034:	str	r0, [fp, #-192]	; 0xffffff40
   38038:	bne	37f74 <__assert_fail@plt+0x254c4>
   3803c:	ldr	r0, [sp, #88]	; 0x58
   38040:	ldr	r1, [r0]
   38044:	ldr	r0, [r0, #8]
   38048:	cmp	r1, #1
   3804c:	blt	38090 <__assert_fail@plt+0x255e0>
   38050:	ldr	r4, [sp, #88]	; 0x58
   38054:	mov	r5, #0
   38058:	mov	r6, #0
   3805c:	add	r0, r0, r5
   38060:	ldr	r0, [r0, #20]
   38064:	bl	30174 <__assert_fail@plt+0x1d6c4>
   38068:	ldr	r0, [r4, #8]
   3806c:	add	r0, r0, r5
   38070:	ldr	r0, [r0, #8]
   38074:	bl	30174 <__assert_fail@plt+0x1d6c4>
   38078:	ldr	r1, [r4]
   3807c:	ldr	r0, [r4, #8]
   38080:	add	r6, r6, #1
   38084:	add	r5, r5, #24
   38088:	cmp	r6, r1
   3808c:	blt	3805c <__assert_fail@plt+0x255ac>
   38090:	bl	30174 <__assert_fail@plt+0x1d6c4>
   38094:	b	37f74 <__assert_fail@plt+0x254c4>
   38098:	ldr	ip, [sp, #40]	; 0x28
   3809c:	mov	r0, ip
   380a0:	bl	30174 <__assert_fail@plt+0x1d6c4>
   380a4:	ldr	r0, [fp, #-184]	; 0xffffff48
   380a8:	ldr	r4, [sp, #72]	; 0x48
   380ac:	cmp	r0, r4
   380b0:	beq	380b8 <__assert_fail@plt+0x25608>
   380b4:	bl	30174 <__assert_fail@plt+0x1d6c4>
   380b8:	mov	r0, #16
   380bc:	str	r4, [fp, #-184]	; 0xffffff48
   380c0:	mov	sl, #12
   380c4:	str	r0, [fp, #-188]	; 0xffffff44
   380c8:	mov	r0, #0
   380cc:	str	r0, [fp, #-192]	; 0xffffff40
   380d0:	ldr	r0, [sp, #88]	; 0x58
   380d4:	cmp	r0, #0
   380d8:	beq	37f74 <__assert_fail@plt+0x254c4>
   380dc:	ldr	r1, [r0]
   380e0:	ldr	r0, [r0, #8]
   380e4:	cmp	r1, #1
   380e8:	blt	38090 <__assert_fail@plt+0x255e0>
   380ec:	ldr	r4, [sp, #88]	; 0x58
   380f0:	mov	r5, #0
   380f4:	mov	r6, #0
   380f8:	add	r0, r0, r5
   380fc:	ldr	r0, [r0, #20]
   38100:	bl	30174 <__assert_fail@plt+0x1d6c4>
   38104:	ldr	r0, [r4, #8]
   38108:	add	r0, r0, r5
   3810c:	ldr	r0, [r0, #8]
   38110:	bl	30174 <__assert_fail@plt+0x1d6c4>
   38114:	ldr	r1, [r4]
   38118:	ldr	r0, [r4, #8]
   3811c:	add	r6, r6, #1
   38120:	add	r5, r5, #24
   38124:	cmp	r6, r1
   38128:	blt	380f8 <__assert_fail@plt+0x25648>
   3812c:	b	38090 <__assert_fail@plt+0x255e0>
   38130:	mov	sl, #1
   38134:	b	37f74 <__assert_fail@plt+0x254c4>
   38138:	mov	ip, #0
   3813c:	b	3809c <__assert_fail@plt+0x255ec>
   38140:	ldr	ip, [sp, #40]	; 0x28
   38144:	mov	r0, #0
   38148:	str	r0, [r6]
   3814c:	str	r0, [r5]
   38150:	b	3809c <__assert_fail@plt+0x255ec>
   38154:	push	{fp, lr}
   38158:	mov	fp, sp
   3815c:	sub	sp, sp, #16
   38160:	mov	ip, #1
   38164:	str	r2, [sp, #4]
   38168:	str	ip, [sp, #12]
   3816c:	mov	ip, #0
   38170:	str	ip, [sp]
   38174:	ldr	ip, [fp, #8]
   38178:	str	ip, [sp, #8]
   3817c:	bl	38188 <__assert_fail@plt+0x256d8>
   38180:	mov	sp, fp
   38184:	pop	{fp, pc}
   38188:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   3818c:	add	fp, sp, #28
   38190:	sub	sp, sp, #60	; 0x3c
   38194:	mvn	r4, #0
   38198:	cmp	r3, #0
   3819c:	bmi	38324 <__assert_fail@plt+0x25874>
   381a0:	mov	r5, r3
   381a4:	mov	r8, r2
   381a8:	cmp	r3, r2
   381ac:	bgt	38324 <__assert_fail@plt+0x25874>
   381b0:	mov	r6, r0
   381b4:	ldr	r0, [fp, #8]
   381b8:	mov	sl, r1
   381bc:	movw	r1, #10328	; 0x2858
   381c0:	mov	r9, r8
   381c4:	ldr	r7, [r6]
   381c8:	movt	r1, #1
   381cc:	add	r0, r0, r5
   381d0:	cmp	r0, r8
   381d4:	bicle	r9, r0, r0, asr #31
   381d8:	movw	r0, #9392	; 0x24b0
   381dc:	movt	r0, #1
   381e0:	orrs	r4, r1, r0
   381e4:	beq	381f0 <__assert_fail@plt+0x25740>
   381e8:	add	r0, r7, #136	; 0x88
   381ec:	bl	1248c <pthread_mutex_lock@plt>
   381f0:	ldrb	r0, [r6, #28]
   381f4:	ldr	r3, [fp, #16]
   381f8:	str	r6, [fp, #-32]	; 0xffffffe0
   381fc:	cmp	r9, r5
   38200:	ubfx	r1, r0, #5, #2
   38204:	str	r7, [fp, #-36]	; 0xffffffdc
   38208:	str	r4, [fp, #-40]	; 0xffffffd8
   3820c:	str	sl, [sp, #44]	; 0x2c
   38210:	str	r1, [sp, #40]	; 0x28
   38214:	ble	38248 <__assert_fail@plt+0x25798>
   38218:	tst	r0, #8
   3821c:	bne	38248 <__assert_fail@plt+0x25798>
   38220:	ldr	r1, [fp, #-32]	; 0xffffffe0
   38224:	ldr	r1, [r1, #16]
   38228:	cmp	r1, #0
   3822c:	beq	38248 <__assert_fail@plt+0x25798>
   38230:	ldr	r4, [fp, #-32]	; 0xffffffe0
   38234:	mov	r6, r3
   38238:	mov	r0, r4
   3823c:	bl	34b20 <__assert_fail@plt+0x22070>
   38240:	ldrb	r0, [r4, #28]
   38244:	mov	r3, r6
   38248:	mov	sl, #1
   3824c:	mov	r2, #0
   38250:	cmp	r3, #0
   38254:	beq	382a4 <__assert_fail@plt+0x257f4>
   38258:	ands	r1, r0, #16
   3825c:	bne	382a4 <__assert_fail@plt+0x257f4>
   38260:	and	r0, r0, #6
   38264:	cmp	r0, #4
   38268:	bne	38294 <__assert_fail@plt+0x257e4>
   3826c:	ldr	r0, [fp, #-32]	; 0xffffffe0
   38270:	ldr	sl, [r3]
   38274:	ldr	r0, [r0, #24]
   38278:	cmp	sl, r0
   3827c:	bhi	3829c <__assert_fail@plt+0x257ec>
   38280:	cmp	sl, #1
   38284:	bge	382a0 <__assert_fail@plt+0x257f0>
   38288:	mov	sl, #1
   3828c:	mov	r2, #0
   38290:	b	382a4 <__assert_fail@plt+0x257f4>
   38294:	ldr	r0, [fp, #-32]	; 0xffffffe0
   38298:	ldr	r0, [r0, #24]
   3829c:	add	sl, r0, #1
   382a0:	mov	r2, r3
   382a4:	lsl	r0, sl, #3
   382a8:	str	r2, [sp, #36]	; 0x24
   382ac:	bl	327ac <__assert_fail@plt+0x1fcfc>
   382b0:	cmp	r0, #0
   382b4:	beq	38644 <__assert_fail@plt+0x25b94>
   382b8:	mov	r6, r0
   382bc:	ldr	r0, [fp, #12]
   382c0:	str	r9, [sp]
   382c4:	ldr	r9, [fp, #-32]	; 0xffffffe0
   382c8:	ldr	r1, [sp, #44]	; 0x2c
   382cc:	mov	r2, r8
   382d0:	mov	r3, r5
   382d4:	stmib	sp, {r0, sl}
   382d8:	ldr	r0, [sp, #40]	; 0x28
   382dc:	str	r6, [sp, #12]
   382e0:	str	r0, [sp, #16]
   382e4:	mov	r0, r9
   382e8:	bl	3547c <__assert_fail@plt+0x229cc>
   382ec:	cmp	r0, #0
   382f0:	mov	r8, r6
   382f4:	beq	38330 <__assert_fail@plt+0x25880>
   382f8:	cmp	r0, #1
   382fc:	mvn	r4, #1
   38300:	mvneq	r4, #0
   38304:	ldr	r6, [fp, #-40]	; 0xffffffd8
   38308:	ldr	r5, [fp, #-36]	; 0xffffffdc
   3830c:	mov	r0, r8
   38310:	bl	30174 <__assert_fail@plt+0x1d6c4>
   38314:	cmp	r6, #0
   38318:	beq	38324 <__assert_fail@plt+0x25874>
   3831c:	add	r0, r5, #136	; 0x88
   38320:	bl	12360 <pthread_mutex_unlock@plt>
   38324:	mov	r0, r4
   38328:	sub	sp, fp, #28
   3832c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   38330:	ldr	lr, [sp, #36]	; 0x24
   38334:	str	r5, [sp, #44]	; 0x2c
   38338:	cmp	lr, #0
   3833c:	beq	38618 <__assert_fail@plt+0x25b68>
   38340:	ldrb	r0, [r9, #28]
   38344:	add	r7, sl, #1
   38348:	ubfx	r0, r0, #1, #2
   3834c:	cmp	r0, #1
   38350:	beq	383b0 <__assert_fail@plt+0x25900>
   38354:	cmp	r0, #0
   38358:	bne	383dc <__assert_fail@plt+0x2592c>
   3835c:	mov	r4, r8
   38360:	lsl	r8, r7, #2
   38364:	mov	r5, lr
   38368:	mov	r0, r8
   3836c:	bl	327ac <__assert_fail@plt+0x1fcfc>
   38370:	mov	r6, #0
   38374:	cmp	r0, #0
   38378:	str	r0, [r5, #4]
   3837c:	beq	3865c <__assert_fail@plt+0x25bac>
   38380:	mov	r0, r8
   38384:	bl	327ac <__assert_fail@plt+0x1fcfc>
   38388:	cmp	r0, #0
   3838c:	mov	lr, r5
   38390:	str	r0, [r5, #8]
   38394:	beq	386c8 <__assert_fail@plt+0x25c18>
   38398:	str	r7, [lr]
   3839c:	mov	r6, #1
   383a0:	mov	r8, r4
   383a4:	cmp	sl, #1
   383a8:	bge	383ec <__assert_fail@plt+0x2593c>
   383ac:	b	383cc <__assert_fail@plt+0x2591c>
   383b0:	ldr	r0, [lr]
   383b4:	mov	r6, #1
   383b8:	cmp	r7, r0
   383bc:	bhi	38664 <__assert_fail@plt+0x25bb4>
   383c0:	mov	r7, r0
   383c4:	cmp	sl, #1
   383c8:	bge	383ec <__assert_fail@plt+0x2593c>
   383cc:	mov	sl, #0
   383d0:	cmp	sl, r7
   383d4:	bcc	385e0 <__assert_fail@plt+0x25b30>
   383d8:	b	38600 <__assert_fail@plt+0x25b50>
   383dc:	ldr	r7, [lr]
   383e0:	mov	r6, #2
   383e4:	cmp	sl, #1
   383e8:	blt	383cc <__assert_fail@plt+0x2591c>
   383ec:	ldr	r5, [lr, #4]
   383f0:	ldr	r4, [lr, #8]
   383f4:	mov	r2, #0
   383f8:	cmp	sl, #3
   383fc:	str	r6, [sp, #40]	; 0x28
   38400:	bhi	38490 <__assert_fail@plt+0x259e0>
   38404:	tst	sl, #1
   38408:	mov	r3, r2
   3840c:	beq	38428 <__assert_fail@plt+0x25978>
   38410:	mov	r0, r8
   38414:	orr	r3, r2, #1
   38418:	ldr	r1, [r0, r2, lsl #3]!
   3841c:	str	r1, [r5, r2, lsl #2]
   38420:	ldr	r0, [r0, #4]
   38424:	str	r0, [r4, r2, lsl #2]
   38428:	orr	r0, r2, #1
   3842c:	cmp	sl, r0
   38430:	beq	385d0 <__assert_fail@plt+0x25b20>
   38434:	add	r2, r3, #1
   38438:	add	ip, r8, r3, lsl #3
   3843c:	sub	r0, sl, r3
   38440:	mov	r6, #0
   38444:	add	r1, r5, r2, lsl #2
   38448:	add	r2, r4, r2, lsl #2
   3844c:	add	r7, ip, #12
   38450:	ldr	r4, [r7, #-12]
   38454:	add	r5, r1, r6
   38458:	subs	r0, r0, #2
   3845c:	str	r4, [r5, #-4]
   38460:	add	r4, ip, r6, lsl #1
   38464:	add	r5, r2, r6
   38468:	ldr	r3, [r4, #4]
   3846c:	str	r3, [r5, #-4]
   38470:	ldr	r3, [r4, #8]
   38474:	str	r3, [r1, r6]
   38478:	ldr	r3, [r7]
   3847c:	add	r7, r7, #16
   38480:	str	r3, [r2, r6]
   38484:	add	r6, r6, #8
   38488:	bne	38450 <__assert_fail@plt+0x259a0>
   3848c:	b	385d0 <__assert_fail@plt+0x25b20>
   38490:	add	lr, r4, sl, lsl #2
   38494:	add	r7, r8, sl, lsl #3
   38498:	add	r6, r5, sl, lsl #2
   3849c:	mov	r9, #0
   384a0:	mov	r1, #0
   384a4:	mov	r3, #0
   384a8:	mov	r0, #0
   384ac:	mov	r2, #0
   384b0:	cmp	r8, lr
   384b4:	movwcc	r9, #1
   384b8:	cmp	r7, r4
   384bc:	movwhi	r1, #1
   384c0:	cmp	r8, r6
   384c4:	movwcc	r3, #1
   384c8:	cmp	r7, r5
   384cc:	mov	r7, #0
   384d0:	movwhi	r7, #1
   384d4:	cmp	r4, r6
   384d8:	mov	r6, #0
   384dc:	movwcc	r6, #1
   384e0:	cmp	r5, lr
   384e4:	movwcc	r0, #1
   384e8:	tst	r0, r6
   384ec:	andseq	r0, r7, r3
   384f0:	bne	3857c <__assert_fail@plt+0x25acc>
   384f4:	ands	r0, r1, r9
   384f8:	ldr	r9, [fp, #-32]	; 0xffffffe0
   384fc:	ldr	lr, [sp, #36]	; 0x24
   38500:	bne	38404 <__assert_fail@plt+0x25954>
   38504:	bic	r0, sl, #3
   38508:	mov	r1, #1
   3850c:	str	r4, [sp, #32]
   38510:	str	r0, [sp, #28]
   38514:	subs	r0, r0, #4
   38518:	add	r0, r1, r0, lsr #2
   3851c:	and	r1, r0, #1
   38520:	str	r1, [sp, #24]
   38524:	beq	38588 <__assert_fail@plt+0x25ad8>
   38528:	sub	r6, r0, r1
   3852c:	mov	r1, r4
   38530:	mov	r3, #0
   38534:	mov	r7, #64	; 0x40
   38538:	mov	r0, #32
   3853c:	mov	lr, r5
   38540:	mov	r4, r8
   38544:	mov	r9, r8
   38548:	add	ip, r9, #32
   3854c:	vld2.32	{d16-d19}, [r9], r7
   38550:	add	r8, lr, #16
   38554:	add	r2, r1, #16
   38558:	subs	r6, r6, #2
   3855c:	add	r3, r3, #8
   38560:	vst1.32	{d16-d17}, [lr], r0
   38564:	vst1.32	{d18-d19}, [r1], r0
   38568:	vld2.32	{d16-d19}, [ip]
   3856c:	vst1.32	{d16-d17}, [r8]
   38570:	vst1.32	{d18-d19}, [r2]
   38574:	bne	38548 <__assert_fail@plt+0x25a98>
   38578:	b	38590 <__assert_fail@plt+0x25ae0>
   3857c:	ldr	r9, [fp, #-32]	; 0xffffffe0
   38580:	ldr	lr, [sp, #36]	; 0x24
   38584:	b	38404 <__assert_fail@plt+0x25954>
   38588:	mov	r4, r8
   3858c:	mov	r3, #0
   38590:	ldr	r0, [sp, #24]
   38594:	mov	r8, r4
   38598:	ldr	r9, [fp, #-32]	; 0xffffffe0
   3859c:	ldr	lr, [sp, #36]	; 0x24
   385a0:	ldr	r4, [sp, #32]
   385a4:	cmp	r0, #0
   385a8:	beq	385c4 <__assert_fail@plt+0x25b14>
   385ac:	add	r0, r8, r3, lsl #3
   385b0:	vld2.32	{d16-d19}, [r0]
   385b4:	add	r0, r5, r3, lsl #2
   385b8:	vst1.32	{d16-d17}, [r0]
   385bc:	add	r0, r4, r3, lsl #2
   385c0:	vst1.32	{d18-d19}, [r0]
   385c4:	ldr	r2, [sp, #28]
   385c8:	cmp	sl, r2
   385cc:	bne	38404 <__assert_fail@plt+0x25954>
   385d0:	ldr	r7, [lr]
   385d4:	ldr	r6, [sp, #40]	; 0x28
   385d8:	cmp	sl, r7
   385dc:	bcs	38600 <__assert_fail@plt+0x25b50>
   385e0:	ldmib	lr, {r0, r1}
   385e4:	mvn	r2, #0
   385e8:	str	r2, [r1, sl, lsl #2]
   385ec:	str	r2, [r0, sl, lsl #2]
   385f0:	add	sl, sl, #1
   385f4:	ldr	r3, [lr]
   385f8:	cmp	sl, r3
   385fc:	bcc	385e8 <__assert_fail@plt+0x25b38>
   38600:	ldrb	r0, [r9, #28]
   38604:	cmp	r6, #0
   38608:	and	r0, r0, #249	; 0xf9
   3860c:	orr	r0, r0, r6, lsl #1
   38610:	strb	r0, [r9, #28]
   38614:	beq	3863c <__assert_fail@plt+0x25b8c>
   38618:	ldr	r0, [fp, #20]
   3861c:	cmp	r0, #0
   38620:	beq	38634 <__assert_fail@plt+0x25b84>
   38624:	ldr	r0, [r8, #4]
   38628:	ldr	r1, [sp, #44]	; 0x2c
   3862c:	sub	r4, r0, r1
   38630:	b	38304 <__assert_fail@plt+0x25854>
   38634:	ldr	r4, [r8]
   38638:	b	38304 <__assert_fail@plt+0x25854>
   3863c:	mvn	r4, #1
   38640:	b	38304 <__assert_fail@plt+0x25854>
   38644:	ldr	r6, [fp, #-40]	; 0xffffffd8
   38648:	ldr	r5, [fp, #-36]	; 0xffffffdc
   3864c:	mvn	r4, #1
   38650:	cmp	r6, #0
   38654:	bne	3831c <__assert_fail@plt+0x2586c>
   38658:	b	38324 <__assert_fail@plt+0x25874>
   3865c:	mov	r8, r4
   38660:	b	38600 <__assert_fail@plt+0x25b50>
   38664:	ldr	r0, [lr, #4]
   38668:	mov	r4, r8
   3866c:	lsl	r8, r7, #2
   38670:	mov	r1, r8
   38674:	bl	33500 <__assert_fail@plt+0x20a50>
   38678:	mov	r6, #0
   3867c:	cmp	r0, #0
   38680:	beq	386e0 <__assert_fail@plt+0x25c30>
   38684:	mov	r5, r0
   38688:	ldr	r0, [sp, #36]	; 0x24
   3868c:	mov	r1, r8
   38690:	ldr	r0, [r0, #8]
   38694:	bl	33500 <__assert_fail@plt+0x20a50>
   38698:	cmp	r0, #0
   3869c:	beq	386d8 <__assert_fail@plt+0x25c28>
   386a0:	ldr	lr, [sp, #36]	; 0x24
   386a4:	ldr	r9, [fp, #-32]	; 0xffffffe0
   386a8:	mov	r8, r4
   386ac:	mov	r6, #1
   386b0:	str	r7, [lr]
   386b4:	str	r5, [lr, #4]
   386b8:	str	r0, [lr, #8]
   386bc:	cmp	sl, #1
   386c0:	bge	383ec <__assert_fail@plt+0x2593c>
   386c4:	b	383cc <__assert_fail@plt+0x2591c>
   386c8:	ldr	r0, [lr, #4]
   386cc:	bl	30174 <__assert_fail@plt+0x1d6c4>
   386d0:	mov	r8, r4
   386d4:	b	38600 <__assert_fail@plt+0x25b50>
   386d8:	mov	r0, r5
   386dc:	bl	30174 <__assert_fail@plt+0x1d6c4>
   386e0:	ldr	r9, [fp, #-32]	; 0xffffffe0
   386e4:	mov	r8, r4
   386e8:	b	38600 <__assert_fail@plt+0x25b50>
   386ec:	push	{fp, lr}
   386f0:	mov	fp, sp
   386f4:	sub	sp, sp, #16
   386f8:	mov	ip, #0
   386fc:	str	r2, [sp, #4]
   38700:	str	ip, [sp, #12]
   38704:	ldr	ip, [fp, #12]
   38708:	str	ip, [sp, #8]
   3870c:	ldr	ip, [fp, #8]
   38710:	str	ip, [sp]
   38714:	bl	38188 <__assert_fail@plt+0x256d8>
   38718:	mov	sp, fp
   3871c:	pop	{fp, pc}
   38720:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   38724:	add	fp, sp, #28
   38728:	sub	sp, sp, #20
   3872c:	ldr	r4, [fp, #8]
   38730:	mov	r8, r1
   38734:	mov	r1, r0
   38738:	mov	r6, r2
   3873c:	orr	r0, r4, r2
   38740:	ldr	r2, [fp, #20]
   38744:	orrs	r0, r0, r2
   38748:	bmi	38808 <__assert_fail@plt+0x25d58>
   3874c:	adds	sl, r6, r4
   38750:	bvs	38808 <__assert_fail@plt+0x25d58>
   38754:	mov	r5, #0
   38758:	cmp	r4, #1
   3875c:	blt	387b4 <__assert_fail@plt+0x25d04>
   38760:	mov	r9, r3
   38764:	cmp	r6, #1
   38768:	blt	387bc <__assert_fail@plt+0x25d0c>
   3876c:	mov	r0, sl
   38770:	mov	r5, r1
   38774:	bl	327ac <__assert_fail@plt+0x1fcfc>
   38778:	cmp	r0, #0
   3877c:	beq	38808 <__assert_fail@plt+0x25d58>
   38780:	mov	r1, r8
   38784:	mov	r2, r6
   38788:	mov	r7, r0
   3878c:	bl	124e0 <memcpy@plt>
   38790:	add	r0, r7, r6
   38794:	mov	r1, r9
   38798:	mov	r2, r4
   3879c:	bl	124e0 <memcpy@plt>
   387a0:	ldr	r2, [fp, #20]
   387a4:	mov	r1, r5
   387a8:	mov	r4, r7
   387ac:	mov	r5, #0
   387b0:	b	387c4 <__assert_fail@plt+0x25d14>
   387b4:	mov	r7, r8
   387b8:	b	387c0 <__assert_fail@plt+0x25d10>
   387bc:	mov	r7, r9
   387c0:	mov	r4, #0
   387c4:	ldr	r0, [fp, #16]
   387c8:	ldr	r3, [fp, #12]
   387cc:	mov	r6, #1
   387d0:	str	r2, [sp, #4]
   387d4:	mov	r2, sl
   387d8:	str	r5, [sp]
   387dc:	str	r6, [sp, #12]
   387e0:	str	r0, [sp, #8]
   387e4:	mov	r0, r1
   387e8:	mov	r1, r7
   387ec:	bl	38188 <__assert_fail@plt+0x256d8>
   387f0:	mov	r5, r0
   387f4:	mov	r0, r4
   387f8:	bl	30174 <__assert_fail@plt+0x1d6c4>
   387fc:	mov	r0, r5
   38800:	sub	sp, fp, #28
   38804:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   38808:	mvn	r0, #1
   3880c:	sub	sp, fp, #28
   38810:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   38814:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   38818:	add	fp, sp, #28
   3881c:	sub	sp, sp, #20
   38820:	ldr	r4, [fp, #8]
   38824:	mov	r8, r1
   38828:	mov	r1, r0
   3882c:	mov	r6, r2
   38830:	orr	r0, r4, r2
   38834:	ldr	r2, [fp, #24]
   38838:	orrs	r0, r0, r2
   3883c:	bmi	388fc <__assert_fail@plt+0x25e4c>
   38840:	adds	sl, r6, r4
   38844:	bvs	388fc <__assert_fail@plt+0x25e4c>
   38848:	mov	r5, #0
   3884c:	cmp	r4, #1
   38850:	blt	388a8 <__assert_fail@plt+0x25df8>
   38854:	mov	r9, r3
   38858:	cmp	r6, #1
   3885c:	blt	388b0 <__assert_fail@plt+0x25e00>
   38860:	mov	r0, sl
   38864:	mov	r5, r1
   38868:	bl	327ac <__assert_fail@plt+0x1fcfc>
   3886c:	cmp	r0, #0
   38870:	beq	388fc <__assert_fail@plt+0x25e4c>
   38874:	mov	r1, r8
   38878:	mov	r2, r6
   3887c:	mov	r7, r0
   38880:	bl	124e0 <memcpy@plt>
   38884:	add	r0, r7, r6
   38888:	mov	r1, r9
   3888c:	mov	r2, r4
   38890:	bl	124e0 <memcpy@plt>
   38894:	ldr	r2, [fp, #24]
   38898:	mov	r1, r5
   3889c:	mov	r4, r7
   388a0:	mov	r5, #0
   388a4:	b	388b8 <__assert_fail@plt+0x25e08>
   388a8:	mov	r7, r8
   388ac:	b	388b4 <__assert_fail@plt+0x25e04>
   388b0:	mov	r7, r9
   388b4:	mov	r4, #0
   388b8:	ldr	r0, [fp, #20]
   388bc:	ldr	r6, [fp, #16]
   388c0:	ldr	r3, [fp, #12]
   388c4:	str	r2, [sp, #4]
   388c8:	mov	r2, sl
   388cc:	str	r5, [sp, #12]
   388d0:	str	r0, [sp, #8]
   388d4:	mov	r0, r1
   388d8:	mov	r1, r7
   388dc:	str	r6, [sp]
   388e0:	bl	38188 <__assert_fail@plt+0x256d8>
   388e4:	mov	r5, r0
   388e8:	mov	r0, r4
   388ec:	bl	30174 <__assert_fail@plt+0x1d6c4>
   388f0:	mov	r0, r5
   388f4:	sub	sp, fp, #28
   388f8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   388fc:	mvn	r0, #1
   38900:	sub	sp, fp, #28
   38904:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   38908:	ldrb	ip, [r0, #28]
   3890c:	cmp	r2, #0
   38910:	bic	ip, ip, #6
   38914:	orrne	ip, ip, #2
   38918:	strb	ip, [r0, #28]
   3891c:	ldr	r0, [sp]
   38920:	moveq	r0, r2
   38924:	cmp	r2, #0
   38928:	moveq	r3, r2
   3892c:	stm	r1, {r2, r3}
   38930:	str	r0, [r1, #8]
   38934:	bx	lr
   38938:	push	{r4, sl, fp, lr}
   3893c:	add	fp, sp, #8
   38940:	mov	r4, r0
   38944:	ldr	r0, [r0, #24]
   38948:	bl	30174 <__assert_fail@plt+0x1d6c4>
   3894c:	ldr	r0, [r4, #36]	; 0x24
   38950:	bl	30174 <__assert_fail@plt+0x1d6c4>
   38954:	ldr	r0, [r4, #40]	; 0x28
   38958:	add	r1, r4, #4
   3895c:	cmp	r0, r1
   38960:	beq	38974 <__assert_fail@plt+0x25ec4>
   38964:	ldr	r0, [r0, #8]
   38968:	bl	30174 <__assert_fail@plt+0x1d6c4>
   3896c:	ldr	r0, [r4, #40]	; 0x28
   38970:	bl	30174 <__assert_fail@plt+0x1d6c4>
   38974:	ldr	r0, [r4, #12]
   38978:	bl	30174 <__assert_fail@plt+0x1d6c4>
   3897c:	ldr	r0, [r4, #48]	; 0x30
   38980:	bl	30174 <__assert_fail@plt+0x1d6c4>
   38984:	ldr	r0, [r4, #44]	; 0x2c
   38988:	bl	30174 <__assert_fail@plt+0x1d6c4>
   3898c:	mov	r0, r4
   38990:	pop	{r4, sl, fp, lr}
   38994:	b	30174 <__assert_fail@plt+0x1d6c4>
   38998:	nop	{0}
   3899c:	nop	{0}
   389a0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   389a4:	add	fp, sp, #28
   389a8:	sub	sp, sp, #108	; 0x6c
   389ac:	mov	r3, r0
   389b0:	ldrb	r0, [r0, #74]	; 0x4a
   389b4:	ldr	r9, [r3, #36]	; 0x24
   389b8:	ldr	r1, [r3, #48]	; 0x30
   389bc:	ldr	r8, [r3, #28]
   389c0:	str	r3, [sp, #20]
   389c4:	cmp	r9, r1
   389c8:	movgt	r9, r1
   389cc:	cmp	r0, #0
   389d0:	bne	389ec <__assert_fail@plt+0x25f3c>
   389d4:	ldr	r0, [r3, #64]	; 0x40
   389d8:	cmp	r0, #0
   389dc:	bne	389ec <__assert_fail@plt+0x25f3c>
   389e0:	ldrb	r0, [r3, #76]	; 0x4c
   389e4:	cmp	r0, #0
   389e8:	beq	389f4 <__assert_fail@plt+0x25f44>
   389ec:	ldr	r7, [r3, #32]
   389f0:	b	38c0c <__assert_fail@plt+0x2615c>
   389f4:	cmp	r9, r8
   389f8:	ble	38be4 <__assert_fail@plt+0x26134>
   389fc:	add	r5, r3, #16
   38a00:	add	sl, sp, #32
   38a04:	str	r9, [sp, #16]
   38a08:	b	38a28 <__assert_fail@plt+0x25f78>
   38a0c:	mov	r8, r9
   38a10:	ldr	r9, [sp, #16]
   38a14:	mov	r3, sl
   38a18:	add	sl, sp, #32
   38a1c:	cmp	r9, r8
   38a20:	mov	r7, r8
   38a24:	ble	38fdc <__assert_fail@plt+0x2652c>
   38a28:	ldr	r6, [r3, #24]
   38a2c:	ldr	r4, [r3]
   38a30:	add	r0, r6, r8
   38a34:	ldrb	r7, [r4, r0]
   38a38:	tst	r7, #128	; 0x80
   38a3c:	bne	38a88 <__assert_fail@plt+0x25fd8>
   38a40:	mov	r0, r5
   38a44:	bl	1251c <mbsinit@plt>
   38a48:	cmp	r0, #0
   38a4c:	beq	38a88 <__assert_fail@plt+0x25fd8>
   38a50:	mov	r0, r7
   38a54:	bl	12a38 <towupper@plt>
   38a58:	cmp	r0, #128	; 0x80
   38a5c:	bcs	38a7c <__assert_fail@plt+0x25fcc>
   38a60:	ldr	r3, [sp, #20]
   38a64:	ldr	r1, [r3, #4]
   38a68:	strb	r0, [r1, r8]
   38a6c:	ldr	r1, [r3, #8]
   38a70:	str	r0, [r1, r8, lsl #2]
   38a74:	add	r8, r8, #1
   38a78:	b	38a1c <__assert_fail@plt+0x25f6c>
   38a7c:	ldr	r0, [sp, #20]
   38a80:	ldr	r4, [r0]
   38a84:	ldr	r6, [r0, #24]
   38a88:	ldm	r5, {r0, r1}
   38a8c:	str	r1, [fp, #-36]	; 0xffffffdc
   38a90:	sub	r2, r9, r8
   38a94:	mov	r3, r5
   38a98:	str	r0, [fp, #-40]	; 0xffffffd8
   38a9c:	add	r0, r4, r6
   38aa0:	add	r1, r0, r8
   38aa4:	add	r0, sp, #28
   38aa8:	bl	327dc <__assert_fail@plt+0x1fd2c>
   38aac:	sub	r4, r0, #1
   38ab0:	mov	r6, r0
   38ab4:	cmn	r4, #4
   38ab8:	bhi	38b98 <__assert_fail@plt+0x260e8>
   38abc:	ldr	r0, [sp, #28]
   38ac0:	bl	12a38 <towupper@plt>
   38ac4:	mov	r7, r0
   38ac8:	ldr	r0, [sp, #28]
   38acc:	cmp	r7, r0
   38ad0:	bne	38af4 <__assert_fail@plt+0x26044>
   38ad4:	ldr	sl, [sp, #20]
   38ad8:	ldr	r1, [sl]
   38adc:	ldr	r2, [sl, #24]
   38ae0:	ldr	r0, [sl, #4]
   38ae4:	add	r1, r1, r2
   38ae8:	add	r0, r0, r8
   38aec:	add	r1, r1, r8
   38af0:	b	38b1c <__assert_fail@plt+0x2606c>
   38af4:	mov	r0, sl
   38af8:	mov	r1, r7
   38afc:	sub	r2, fp, #40	; 0x28
   38b00:	bl	123b4 <wcrtomb@plt>
   38b04:	cmp	r6, r0
   38b08:	bne	38bec <__assert_fail@plt+0x2613c>
   38b0c:	mov	r1, sl
   38b10:	ldr	sl, [sp, #20]
   38b14:	ldr	r0, [sl, #4]
   38b18:	add	r0, r0, r8
   38b1c:	mov	r2, r6
   38b20:	bl	124e0 <memcpy@plt>
   38b24:	ldr	r0, [sl, #8]
   38b28:	add	r9, r8, #1
   38b2c:	str	r7, [r0, r8, lsl #2]
   38b30:	add	r7, r6, r8
   38b34:	cmp	r9, r7
   38b38:	bge	38a0c <__assert_fail@plt+0x25f5c>
   38b3c:	add	r0, r0, r8, lsl #2
   38b40:	mvn	r1, #3
   38b44:	add	r2, r1, r6, lsl #2
   38b48:	mov	r1, #255	; 0xff
   38b4c:	add	r0, r0, #4
   38b50:	bl	12834 <memset@plt>
   38b54:	sub	r0, r6, #2
   38b58:	ands	r1, r4, #7
   38b5c:	add	sl, sp, #32
   38b60:	beq	38b70 <__assert_fail@plt+0x260c0>
   38b64:	subs	r1, r1, #1
   38b68:	add	r9, r9, #1
   38b6c:	bne	38b64 <__assert_fail@plt+0x260b4>
   38b70:	ldr	r3, [sp, #20]
   38b74:	cmp	r0, #7
   38b78:	bcc	38b8c <__assert_fail@plt+0x260dc>
   38b7c:	add	r0, r6, r8
   38b80:	sub	r0, r0, r9
   38b84:	subs	r0, r0, #8
   38b88:	bne	38b84 <__assert_fail@plt+0x260d4>
   38b8c:	ldr	r9, [sp, #16]
   38b90:	mov	r8, r7
   38b94:	b	38a1c <__assert_fail@plt+0x25f6c>
   38b98:	ldr	r3, [sp, #20]
   38b9c:	add	r0, r6, #1
   38ba0:	cmp	r0, #2
   38ba4:	bcc	38bb8 <__assert_fail@plt+0x26108>
   38ba8:	ldr	r0, [r3, #36]	; 0x24
   38bac:	ldr	r1, [r3, #48]	; 0x30
   38bb0:	cmp	r0, r1
   38bb4:	blt	38bf8 <__assert_fail@plt+0x26148>
   38bb8:	ldr	r0, [r3, #4]
   38bbc:	cmn	r6, #1
   38bc0:	strb	r7, [r0, r8]
   38bc4:	ldr	r0, [r3, #8]
   38bc8:	str	r7, [r0, r8, lsl #2]
   38bcc:	add	r8, r8, #1
   38bd0:	bne	38a1c <__assert_fail@plt+0x25f6c>
   38bd4:	ldr	r0, [fp, #-40]	; 0xffffffd8
   38bd8:	ldr	r1, [fp, #-36]	; 0xffffffdc
   38bdc:	stm	r5, {r0, r1}
   38be0:	b	38a1c <__assert_fail@plt+0x25f6c>
   38be4:	mov	r7, r8
   38be8:	b	38fdc <__assert_fail@plt+0x2652c>
   38bec:	ldr	r3, [sp, #20]
   38bf0:	mov	r7, r8
   38bf4:	b	38c14 <__assert_fail@plt+0x26164>
   38bf8:	ldr	r0, [fp, #-40]	; 0xffffffd8
   38bfc:	ldr	r1, [fp, #-36]	; 0xffffffdc
   38c00:	mov	r7, r8
   38c04:	stm	r5, {r0, r1}
   38c08:	b	38fdc <__assert_fail@plt+0x2652c>
   38c0c:	cmp	r8, r9
   38c10:	bge	38fdc <__assert_fail@plt+0x2652c>
   38c14:	mov	r4, r3
   38c18:	mov	sl, r9
   38c1c:	sub	r2, r9, r8
   38c20:	ldr	r0, [r4, #16]!
   38c24:	ldr	r1, [r4, #4]
   38c28:	str	r0, [fp, #-40]	; 0xffffffd8
   38c2c:	str	r1, [fp, #-36]	; 0xffffffdc
   38c30:	ldr	r0, [r4, #48]	; 0x30
   38c34:	cmp	r0, #0
   38c38:	bne	38d58 <__assert_fail@plt+0x262a8>
   38c3c:	ldr	r0, [r3]
   38c40:	ldr	r1, [r3, #24]
   38c44:	mov	r9, r7
   38c48:	add	r0, r0, r1
   38c4c:	add	r7, r0, r7
   38c50:	add	r0, sp, #24
   38c54:	mov	r1, r7
   38c58:	mov	r3, r4
   38c5c:	bl	327dc <__assert_fail@plt+0x1fd2c>
   38c60:	mov	r5, r0
   38c64:	sub	r0, r0, #1
   38c68:	cmn	r0, #4
   38c6c:	str	r0, [sp, #16]
   38c70:	bhi	38dac <__assert_fail@plt+0x262fc>
   38c74:	ldr	r0, [sp, #24]
   38c78:	bl	12a38 <towupper@plt>
   38c7c:	mov	r6, r0
   38c80:	ldr	r0, [sp, #24]
   38c84:	cmp	r6, r0
   38c88:	bne	38c98 <__assert_fail@plt+0x261e8>
   38c8c:	ldr	r4, [sp, #20]
   38c90:	mov	r1, r7
   38c94:	b	38cb8 <__assert_fail@plt+0x26208>
   38c98:	add	r0, sp, #32
   38c9c:	sub	r2, fp, #40	; 0x28
   38ca0:	mov	r1, r6
   38ca4:	bl	123b4 <wcrtomb@plt>
   38ca8:	cmp	r0, r5
   38cac:	bne	38e2c <__assert_fail@plt+0x2637c>
   38cb0:	ldr	r4, [sp, #20]
   38cb4:	add	r1, sp, #32
   38cb8:	ldr	r0, [r4, #4]
   38cbc:	add	r0, r0, r8
   38cc0:	mov	r2, r5
   38cc4:	bl	124e0 <memcpy@plt>
   38cc8:	ldrb	r0, [r4, #76]	; 0x4c
   38ccc:	mov	r7, r9
   38cd0:	mov	r9, sl
   38cd4:	mov	r3, r4
   38cd8:	cmp	r0, #0
   38cdc:	bne	38ee0 <__assert_fail@plt+0x26430>
   38ce0:	ldr	r0, [r3, #8]
   38ce4:	add	r4, r5, r8
   38ce8:	add	r7, r5, r7
   38cec:	str	r6, [r0, r8, lsl #2]
   38cf0:	add	r6, r8, #1
   38cf4:	cmp	r6, r4
   38cf8:	bge	38d50 <__assert_fail@plt+0x262a0>
   38cfc:	mvn	r1, #3
   38d00:	add	r0, r0, r6, lsl #2
   38d04:	add	r2, r1, r5, lsl #2
   38d08:	mov	r1, #255	; 0xff
   38d0c:	bl	12834 <memset@plt>
   38d10:	ldr	r1, [sp, #16]
   38d14:	sub	r0, r5, #2
   38d18:	ands	r1, r1, #7
   38d1c:	beq	38d2c <__assert_fail@plt+0x2627c>
   38d20:	subs	r1, r1, #1
   38d24:	add	r6, r6, #1
   38d28:	bne	38d20 <__assert_fail@plt+0x26270>
   38d2c:	ldr	r3, [sp, #20]
   38d30:	cmp	r0, #7
   38d34:	bcc	38d48 <__assert_fail@plt+0x26298>
   38d38:	add	r0, r5, r8
   38d3c:	sub	r0, r0, r6
   38d40:	subs	r0, r0, #8
   38d44:	bne	38d40 <__assert_fail@plt+0x26290>
   38d48:	mov	r8, r4
   38d4c:	b	38c0c <__assert_fail@plt+0x2615c>
   38d50:	mov	r8, r6
   38d54:	b	38c0c <__assert_fail@plt+0x2615c>
   38d58:	cmp	r2, #1
   38d5c:	mov	r9, r7
   38d60:	add	r7, sp, #32
   38d64:	ldrge	r1, [r3, #80]	; 0x50
   38d68:	cmpge	r1, #1
   38d6c:	blt	38c50 <__assert_fail@plt+0x261a0>
   38d70:	ldr	r7, [r3, #24]
   38d74:	ldr	r6, [r3]
   38d78:	add	r7, r9, r7
   38d7c:	add	r3, r6, r7
   38d80:	mov	r6, #0
   38d84:	add	r7, sp, #32
   38d88:	ldrb	r5, [r3, r6]
   38d8c:	ldrb	r5, [r0, r5]
   38d90:	strb	r5, [r7, r6]
   38d94:	add	r6, r6, #1
   38d98:	cmp	r6, r2
   38d9c:	bge	38c50 <__assert_fail@plt+0x261a0>
   38da0:	cmp	r6, r1
   38da4:	blt	38d88 <__assert_fail@plt+0x262d8>
   38da8:	b	38c50 <__assert_fail@plt+0x261a0>
   38dac:	ldr	r3, [sp, #20]
   38db0:	add	r0, r5, #1
   38db4:	cmp	r0, #2
   38db8:	bcc	38dcc <__assert_fail@plt+0x2631c>
   38dbc:	ldr	r0, [r3, #36]	; 0x24
   38dc0:	ldr	r1, [r3, #48]	; 0x30
   38dc4:	cmp	r0, r1
   38dc8:	blt	38fcc <__assert_fail@plt+0x2651c>
   38dcc:	ldr	r2, [r3, #24]
   38dd0:	ldr	r0, [r3]
   38dd4:	ldr	r1, [r3, #64]	; 0x40
   38dd8:	mov	r7, r9
   38ddc:	add	r2, r2, r9
   38de0:	cmp	r1, #0
   38de4:	ldrb	r0, [r0, r2]
   38de8:	bne	39260 <__assert_fail@plt+0x267b0>
   38dec:	ldr	r1, [r3, #4]
   38df0:	mov	r9, sl
   38df4:	strb	r0, [r1, r8]
   38df8:	ldrb	r1, [r3, #76]	; 0x4c
   38dfc:	cmp	r1, #0
   38e00:	bne	39268 <__assert_fail@plt+0x267b8>
   38e04:	ldr	r1, [r3, #8]
   38e08:	add	r7, r7, #1
   38e0c:	cmn	r5, #1
   38e10:	str	r0, [r1, r8, lsl #2]
   38e14:	add	r8, r8, #1
   38e18:	bne	38c0c <__assert_fail@plt+0x2615c>
   38e1c:	ldr	r0, [fp, #-40]	; 0xffffffd8
   38e20:	ldr	r1, [fp, #-36]	; 0xffffffdc
   38e24:	stm	r4, {r0, r1}
   38e28:	b	38c0c <__assert_fail@plt+0x2615c>
   38e2c:	ldr	r3, [sp, #20]
   38e30:	mov	r2, r0
   38e34:	cmn	r0, #1
   38e38:	beq	38f5c <__assert_fail@plt+0x264ac>
   38e3c:	ldr	r1, [r3, #36]	; 0x24
   38e40:	add	r0, r2, r8
   38e44:	cmp	r0, r1
   38e48:	bhi	38fcc <__assert_fail@plt+0x2651c>
   38e4c:	str	r0, [sp, #12]
   38e50:	ldr	r0, [r3, #12]
   38e54:	mov	r7, r9
   38e58:	cmp	r0, #0
   38e5c:	bne	38e80 <__assert_fail@plt+0x263d0>
   38e60:	lsl	r0, r1, #2
   38e64:	mov	r4, r2
   38e68:	bl	327ac <__assert_fail@plt+0x1fcfc>
   38e6c:	ldr	r3, [sp, #20]
   38e70:	mov	r2, r4
   38e74:	cmp	r0, #0
   38e78:	str	r0, [r3, #12]
   38e7c:	beq	39254 <__assert_fail@plt+0x267a4>
   38e80:	ldrb	r1, [r3, #76]	; 0x4c
   38e84:	ldr	r9, [sp, #16]
   38e88:	cmp	r1, #0
   38e8c:	bne	390ac <__assert_fail@plt+0x265fc>
   38e90:	cmp	r8, #0
   38e94:	beq	390a4 <__assert_fail@plt+0x265f4>
   38e98:	mov	r1, #0
   38e9c:	cmp	r8, #4
   38ea0:	bcc	39094 <__assert_fail@plt+0x265e4>
   38ea4:	bic	r1, r8, #3
   38ea8:	stmib	sp, {r2, r7}
   38eac:	mov	r2, #1
   38eb0:	add	r3, pc, #968	; 0x3c8
   38eb4:	sub	r7, r1, #4
   38eb8:	add	r2, r2, r7, lsr #2
   38ebc:	cmp	r7, #12
   38ec0:	and	r4, r2, #3
   38ec4:	bcs	38ff0 <__assert_fail@plt+0x26540>
   38ec8:	vld1.64	{d16-d17}, [r3 :128]
   38ecc:	mov	sl, r4
   38ed0:	mov	r3, #0
   38ed4:	cmp	sl, #0
   38ed8:	bne	39064 <__assert_fail@plt+0x265b4>
   38edc:	b	39084 <__assert_fail@plt+0x265d4>
   38ee0:	ldr	lr, [r3, #12]
   38ee4:	mov	r1, #0
   38ee8:	cmp	r5, #4
   38eec:	bcc	38fa8 <__assert_fail@plt+0x264f8>
   38ef0:	vdup.32	q8, r7
   38ef4:	bic	r1, r5, #3
   38ef8:	mov	r3, #1
   38efc:	mov	r9, r7
   38f00:	subs	r2, r1, #4
   38f04:	add	r2, r3, r2, lsr #2
   38f08:	add	r3, pc, #880	; 0x370
   38f0c:	and	ip, r2, #1
   38f10:	beq	38f74 <__assert_fail@plt+0x264c4>
   38f14:	sub	r4, r2, ip
   38f18:	add	r2, pc, #864	; 0x360
   38f1c:	vmov.i32	q10, #4	; 0x00000004
   38f20:	vmov.i32	q11, #8	; 0x00000008
   38f24:	add	r7, lr, r8, lsl #2
   38f28:	mov	r3, #0
   38f2c:	vld1.64	{d18-d19}, [r2 :128]
   38f30:	mov	r2, #32
   38f34:	vadd.i32	q12, q9, q8
   38f38:	vadd.i32	q9, q9, q11
   38f3c:	add	r0, r7, #16
   38f40:	subs	r4, r4, #2
   38f44:	add	r3, r3, #8
   38f48:	vadd.i32	q13, q12, q10
   38f4c:	vst1.32	{d24-d25}, [r7], r2
   38f50:	vst1.32	{d26-d27}, [r0]
   38f54:	bne	38f34 <__assert_fail@plt+0x26484>
   38f58:	b	38f7c <__assert_fail@plt+0x264cc>
   38f5c:	ldr	r0, [r3, #4]
   38f60:	mov	r1, r7
   38f64:	mov	r2, r5
   38f68:	mov	r4, r3
   38f6c:	add	r0, r0, r8
   38f70:	b	38cc4 <__assert_fail@plt+0x26214>
   38f74:	vld1.64	{d18-d19}, [r3 :128]
   38f78:	mov	r3, #0
   38f7c:	cmp	ip, #0
   38f80:	beq	38f94 <__assert_fail@plt+0x264e4>
   38f84:	add	r0, r3, r8
   38f88:	vadd.i32	q8, q9, q8
   38f8c:	add	r0, lr, r0, lsl #2
   38f90:	vst1.32	{d16-d17}, [r0]
   38f94:	ldr	r3, [sp, #20]
   38f98:	mov	r7, r9
   38f9c:	cmp	r5, r1
   38fa0:	mov	r9, sl
   38fa4:	beq	38ce0 <__assert_fail@plt+0x26230>
   38fa8:	add	r0, r8, r1
   38fac:	add	r2, r7, r1
   38fb0:	sub	r4, r5, r1
   38fb4:	add	r0, lr, r0, lsl #2
   38fb8:	str	r2, [r0], #4
   38fbc:	add	r2, r2, #1
   38fc0:	subs	r4, r4, #1
   38fc4:	bne	38fb8 <__assert_fail@plt+0x26508>
   38fc8:	b	38ce0 <__assert_fail@plt+0x26230>
   38fcc:	ldr	r0, [fp, #-40]	; 0xffffffd8
   38fd0:	mov	r7, r9
   38fd4:	ldr	r1, [fp, #-36]	; 0xffffffdc
   38fd8:	stm	r4, {r0, r1}
   38fdc:	str	r8, [r3, #28]
   38fe0:	str	r7, [r3, #32]
   38fe4:	mov	r0, #0
   38fe8:	sub	sp, fp, #28
   38fec:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   38ff0:	mov	sl, r4
   38ff4:	sub	r4, r2, r4
   38ff8:	add	r2, pc, #640	; 0x280
   38ffc:	vmov.i32	q9, #12	; 0x0000000c
   39000:	vmov.i32	q10, #8	; 0x00000008
   39004:	vmov.i32	q11, #4	; 0x00000004
   39008:	vmov.i32	q12, #16	; 0x00000010
   3900c:	mov	r3, #0
   39010:	mov	lr, #64	; 0x40
   39014:	mov	r7, r0
   39018:	vld1.64	{d16-d17}, [r2 :128]
   3901c:	mov	r2, r0
   39020:	vadd.i32	q13, q8, q9
   39024:	add	ip, r2, #48	; 0x30
   39028:	vadd.i32	q14, q8, q10
   3902c:	vadd.i32	q15, q8, q11
   39030:	subs	r4, r4, #4
   39034:	add	r3, r3, #16
   39038:	vst1.32	{d26-d27}, [ip]
   3903c:	vst1.32	{d16-d17}, [r7], lr
   39040:	vadd.i32	q8, q8, q12
   39044:	add	ip, r2, #32
   39048:	add	r2, r2, #16
   3904c:	vst1.32	{d28-d29}, [ip]
   39050:	vst1.32	{d30-d31}, [r2]
   39054:	mov	r2, r7
   39058:	bne	39020 <__assert_fail@plt+0x26570>
   3905c:	cmp	sl, #0
   39060:	beq	39084 <__assert_fail@plt+0x265d4>
   39064:	vmov.i32	q9, #4	; 0x00000004
   39068:	add	r2, r0, r3, lsl #2
   3906c:	rsb	r3, sl, #0
   39070:	vadd.i32	q10, q8, q9
   39074:	vst1.32	{d16-d17}, [r2]!
   39078:	adds	r3, r3, #1
   3907c:	vorr	q8, q10, q10
   39080:	bcc	39070 <__assert_fail@plt+0x265c0>
   39084:	ldr	r3, [sp, #20]
   39088:	ldmib	sp, {r2, r7}
   3908c:	cmp	r8, r1
   39090:	beq	390a4 <__assert_fail@plt+0x265f4>
   39094:	str	r1, [r0, r1, lsl #2]
   39098:	add	r1, r1, #1
   3909c:	cmp	r8, r1
   390a0:	bne	39094 <__assert_fail@plt+0x265e4>
   390a4:	mov	r0, #1
   390a8:	strb	r0, [r3, #76]	; 0x4c
   390ac:	ldr	r0, [r3, #4]
   390b0:	add	r1, sp, #32
   390b4:	mov	r4, r3
   390b8:	mov	sl, r2
   390bc:	add	r0, r0, r8
   390c0:	bl	124e0 <memcpy@plt>
   390c4:	ldr	r0, [r4, #8]
   390c8:	cmp	sl, #2
   390cc:	str	r6, [r0, r8, lsl #2]
   390d0:	mov	r6, r7
   390d4:	ldr	r1, [r4, #12]
   390d8:	str	r7, [r1, r8, lsl #2]
   390dc:	bcc	3920c <__assert_fail@plt+0x2675c>
   390e0:	sub	lr, sl, #1
   390e4:	mov	ip, r6
   390e8:	mov	r2, #1
   390ec:	cmp	lr, #4
   390f0:	bcc	39174 <__assert_fail@plt+0x266c4>
   390f4:	add	r7, sl, r8
   390f8:	add	r4, r8, #1
   390fc:	str	ip, [sp, #8]
   39100:	add	r6, r0, r4, lsl #2
   39104:	add	r3, r0, r7, lsl #2
   39108:	add	r4, r1, r4, lsl #2
   3910c:	cmp	r4, r3
   39110:	addcc	r3, r1, r7, lsl #2
   39114:	cmpcc	r6, r3
   39118:	bcc	39174 <__assert_fail@plt+0x266c4>
   3911c:	add	r2, pc, #364	; 0x16c
   39120:	ldr	r3, [sp, #8]
   39124:	vdup.32	q9, r9
   39128:	vdup.32	q10, r5
   3912c:	vmov.i32	q12, #4	; 0x00000004
   39130:	vmov.i8	q13, #255	; 0xff
   39134:	vld1.64	{d22-d23}, [r2 :128]
   39138:	vdup.32	q8, r3
   3913c:	bic	r3, lr, #3
   39140:	orr	r2, r3, #1
   39144:	mov	r7, r3
   39148:	vcgt.u32	q14, q10, q11
   3914c:	subs	r7, r7, #4
   39150:	vbsl	q14, q11, q9
   39154:	vadd.i32	q11, q11, q12
   39158:	vadd.i32	q14, q14, q8
   3915c:	vst1.32	{d28-d29}, [r4]!
   39160:	vst1.32	{d26-d27}, [r6]!
   39164:	bne	39148 <__assert_fail@plt+0x26698>
   39168:	cmp	lr, r3
   3916c:	mov	r6, ip
   39170:	beq	3920c <__assert_fail@plt+0x2675c>
   39174:	tst	sl, #1
   39178:	mov	r3, r2
   3917c:	bne	391a4 <__assert_fail@plt+0x266f4>
   39180:	cmp	r2, r5
   39184:	mov	r3, r9
   39188:	add	r7, r2, r8
   3918c:	movcc	r3, r2
   39190:	add	r3, r3, ip
   39194:	str	r3, [r1, r7, lsl #2]
   39198:	mvn	r3, #0
   3919c:	str	r3, [r0, r7, lsl #2]
   391a0:	add	r3, r2, #1
   391a4:	add	r2, r2, #1
   391a8:	mov	r6, ip
   391ac:	cmp	sl, r2
   391b0:	beq	3920c <__assert_fail@plt+0x2675c>
   391b4:	add	r2, r8, r3
   391b8:	add	r2, r2, #1
   391bc:	add	r1, r1, r2, lsl #2
   391c0:	add	r0, r0, r2, lsl #2
   391c4:	mvn	r2, #0
   391c8:	cmp	r3, r5
   391cc:	mov	r7, r9
   391d0:	movcc	r7, r3
   391d4:	add	r7, r7, r6
   391d8:	str	r7, [r1, #-4]
   391dc:	add	r7, r3, #1
   391e0:	add	r3, r3, #2
   391e4:	str	r2, [r0, #-4]
   391e8:	cmp	r7, r5
   391ec:	movcs	r7, r9
   391f0:	cmp	r3, sl
   391f4:	add	r7, r7, r6
   391f8:	str	r7, [r1]
   391fc:	str	r2, [r0]
   39200:	add	r1, r1, #8
   39204:	add	r0, r0, #8
   39208:	bne	391c8 <__assert_fail@plt+0x26718>
   3920c:	ldr	r3, [sp, #20]
   39210:	sub	r1, sl, r5
   39214:	mov	r7, r6
   39218:	ldr	r0, [r3, #48]	; 0x30
   3921c:	ldr	r2, [r3, #52]	; 0x34
   39220:	add	r0, r0, r1
   39224:	cmp	r2, r6
   39228:	str	r0, [r3, #48]	; 0x30
   3922c:	ble	3923c <__assert_fail@plt+0x2678c>
   39230:	ldr	r2, [r3, #56]	; 0x38
   39234:	add	r1, r2, r1
   39238:	str	r1, [r3, #56]	; 0x38
   3923c:	ldr	r9, [r3, #36]	; 0x24
   39240:	ldr	r8, [sp, #12]
   39244:	add	r7, r5, r7
   39248:	cmp	r9, r0
   3924c:	movgt	r9, r0
   39250:	b	38c0c <__assert_fail@plt+0x2615c>
   39254:	mov	r0, #12
   39258:	sub	sp, fp, #28
   3925c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   39260:	ldrb	r0, [r1, r0]
   39264:	b	38dec <__assert_fail@plt+0x2633c>
   39268:	ldr	r1, [r3, #12]
   3926c:	str	r7, [r1, r8, lsl #2]
   39270:	b	38e04 <__assert_fail@plt+0x26354>
   39274:	nop	{0}
   39278:	nop	{0}
   3927c:	nop	{0}
   39280:	andeq	r0, r0, r0
   39284:	andeq	r0, r0, r1
   39288:	andeq	r0, r0, r2
   3928c:	andeq	r0, r0, r3
   39290:	andeq	r0, r0, r1
   39294:	andeq	r0, r0, r2
   39298:	andeq	r0, r0, r3
   3929c:	andeq	r0, r0, r4
   392a0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   392a4:	add	fp, sp, #28
   392a8:	sub	sp, sp, #68	; 0x44
   392ac:	mov	r4, r0
   392b0:	ldr	r8, [r0, #28]
   392b4:	ldr	r5, [r0, #36]	; 0x24
   392b8:	ldr	r0, [r0, #48]	; 0x30
   392bc:	cmp	r5, r0
   392c0:	movgt	r5, r0
   392c4:	cmp	r5, r8
   392c8:	ble	39494 <__assert_fail@plt+0x269e4>
   392cc:	add	r9, r4, #16
   392d0:	mov	r0, sp
   392d4:	ldr	r3, [r4, #64]	; 0x40
   392d8:	ldm	r9, {r6, sl}
   392dc:	sub	r2, r5, r8
   392e0:	cmp	r3, #0
   392e4:	bne	393d8 <__assert_fail@plt+0x26928>
   392e8:	ldr	r3, [r4]
   392ec:	ldr	r1, [r4, #24]
   392f0:	add	r1, r3, r1
   392f4:	add	r1, r1, r8
   392f8:	mov	r3, r9
   392fc:	bl	327dc <__assert_fail@plt+0x1fd2c>
   39300:	mov	r7, r0
   39304:	add	r0, r0, #1
   39308:	cmp	r0, #2
   3930c:	bcc	39328 <__assert_fail@plt+0x26878>
   39310:	cmn	r7, #2
   39314:	bne	39354 <__assert_fail@plt+0x268a4>
   39318:	ldr	r0, [r4, #36]	; 0x24
   3931c:	ldr	r1, [r4, #48]	; 0x30
   39320:	cmp	r0, r1
   39324:	blt	39490 <__assert_fail@plt+0x269e0>
   39328:	ldr	r1, [r4, #24]
   3932c:	ldr	r0, [r4]
   39330:	add	r1, r1, r8
   39334:	ldrb	r0, [r0, r1]
   39338:	str	r0, [sp]
   3933c:	ldr	r1, [r4, #64]	; 0x40
   39340:	cmp	r1, #0
   39344:	bne	39484 <__assert_fail@plt+0x269d4>
   39348:	mov	r7, #1
   3934c:	stm	r9, {r6, sl}
   39350:	b	39358 <__assert_fail@plt+0x268a8>
   39354:	ldr	r0, [sp]
   39358:	ldr	r1, [r4, #8]
   3935c:	add	sl, r7, r8
   39360:	add	r6, r8, #1
   39364:	cmp	r6, sl
   39368:	str	r0, [r1, r8, lsl #2]
   3936c:	bge	393c4 <__assert_fail@plt+0x26914>
   39370:	mvn	r0, #3
   39374:	add	r2, r0, r7, lsl #2
   39378:	add	r0, r1, r8, lsl #2
   3937c:	mov	r1, #255	; 0xff
   39380:	add	r0, r0, #4
   39384:	bl	12834 <memset@plt>
   39388:	sub	r1, r7, #1
   3938c:	sub	r0, r7, #2
   39390:	ands	r1, r1, #7
   39394:	beq	393a4 <__assert_fail@plt+0x268f4>
   39398:	subs	r1, r1, #1
   3939c:	add	r6, r6, #1
   393a0:	bne	39398 <__assert_fail@plt+0x268e8>
   393a4:	cmp	r0, #7
   393a8:	bcc	393bc <__assert_fail@plt+0x2690c>
   393ac:	add	r0, r7, r8
   393b0:	sub	r0, r0, r6
   393b4:	subs	r0, r0, #8
   393b8:	bne	393b4 <__assert_fail@plt+0x26904>
   393bc:	mov	r8, sl
   393c0:	b	393c8 <__assert_fail@plt+0x26918>
   393c4:	mov	r8, r6
   393c8:	mov	r0, sp
   393cc:	cmp	r5, r8
   393d0:	bgt	392d4 <__assert_fail@plt+0x26824>
   393d4:	b	39494 <__assert_fail@plt+0x269e4>
   393d8:	cmp	r2, #1
   393dc:	add	r1, sp, #4
   393e0:	blt	392f8 <__assert_fail@plt+0x26848>
   393e4:	ldr	r1, [r4, #80]	; 0x50
   393e8:	cmp	r1, #1
   393ec:	add	r1, sp, #4
   393f0:	blt	392f8 <__assert_fail@plt+0x26848>
   393f4:	ldr	r7, [r4, #24]
   393f8:	ldm	r4, {r1, ip}
   393fc:	cmp	r2, #2
   39400:	add	r7, r8, r7
   39404:	ldrb	r1, [r1, r7]
   39408:	ldrb	r1, [r3, r1]
   3940c:	strb	r1, [ip, r8]
   39410:	strb	r1, [sp, #4]
   39414:	add	r1, sp, #4
   39418:	blt	392f8 <__assert_fail@plt+0x26848>
   3941c:	ldr	r1, [r4, #80]	; 0x50
   39420:	cmp	r1, #2
   39424:	add	r1, sp, #4
   39428:	blt	392f8 <__assert_fail@plt+0x26848>
   3942c:	mov	lr, r0
   39430:	mov	r0, #1
   39434:	ldr	r7, [r4, #24]
   39438:	ldm	r4, {r1, ip}
   3943c:	ldr	r3, [r4, #64]	; 0x40
   39440:	add	r1, r1, r7
   39444:	add	r1, r1, r8
   39448:	ldrb	r1, [r1, r0]
   3944c:	ldrb	r1, [r3, r1]
   39450:	add	r3, ip, r8
   39454:	strb	r1, [r3, r0]
   39458:	add	r3, sp, #4
   3945c:	strb	r1, [r3, r0]
   39460:	add	r0, r0, #1
   39464:	cmp	r0, r2
   39468:	bge	39478 <__assert_fail@plt+0x269c8>
   3946c:	ldr	r1, [r4, #80]	; 0x50
   39470:	cmp	r0, r1
   39474:	blt	39434 <__assert_fail@plt+0x26984>
   39478:	add	r1, sp, #4
   3947c:	mov	r0, lr
   39480:	b	392f8 <__assert_fail@plt+0x26848>
   39484:	ldrb	r0, [r1, r0]
   39488:	str	r0, [sp]
   3948c:	b	39348 <__assert_fail@plt+0x26898>
   39490:	stm	r9, {r6, sl}
   39494:	str	r8, [r4, #28]
   39498:	str	r8, [r4, #32]
   3949c:	sub	sp, fp, #28
   394a0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   394a4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   394a8:	add	fp, sp, #28
   394ac:	sub	sp, sp, #28
   394b0:	ldr	r9, [r1]
   394b4:	mov	r5, r0
   394b8:	ldr	r4, [fp, #12]
   394bc:	mov	r6, r2
   394c0:	str	r1, [sp, #16]
   394c4:	str	r3, [sp, #20]
   394c8:	ldr	r0, [r9, #84]	; 0x54
   394cc:	str	r4, [sp, #4]
   394d0:	str	r0, [sp, #12]
   394d4:	ldr	r0, [fp, #8]
   394d8:	str	r0, [sp]
   394dc:	mov	r0, r5
   394e0:	bl	39f4c <__assert_fail@plt+0x2749c>
   394e4:	mov	r7, r0
   394e8:	cmp	r0, #0
   394ec:	bne	394fc <__assert_fail@plt+0x26a4c>
   394f0:	ldr	r0, [r4]
   394f4:	cmp	r0, #0
   394f8:	bne	39708 <__assert_fail@plt+0x26c58>
   394fc:	ldrb	r0, [r6, #4]
   39500:	cmp	r0, #10
   39504:	bne	39644 <__assert_fail@plt+0x26b94>
   39508:	ldr	r0, [sp, #20]
   3950c:	mov	sl, #0
   39510:	orr	r0, r0, #8388608	; 0x800000
   39514:	str	r0, [sp, #24]
   39518:	ldr	r2, [sp, #24]
   3951c:	mov	r0, r6
   39520:	mov	r1, r5
   39524:	bl	39710 <__assert_fail@plt+0x26c60>
   39528:	ldr	r1, [r5, #40]	; 0x28
   3952c:	mov	r8, #0
   39530:	add	r0, r1, r0
   39534:	str	r0, [r5, #40]	; 0x28
   39538:	ldrb	r0, [r6, #4]
   3953c:	orr	r1, r0, #8
   39540:	cmp	r1, #10
   39544:	bne	395a8 <__assert_fail@plt+0x26af8>
   39548:	ldr	r1, [r9, #64]	; 0x40
   3954c:	cmp	r1, #31
   39550:	beq	3961c <__assert_fail@plt+0x26b6c>
   39554:	ldr	r0, [r9, #56]	; 0x38
   39558:	add	r4, r0, r1, lsl #5
   3955c:	add	r2, r1, #1
   39560:	mov	r0, #10
   39564:	cmp	r7, #0
   39568:	str	r2, [r9, #64]	; 0x40
   3956c:	str	sl, [r4, #4]!
   39570:	stmib	r4, {r7, r8, sl}
   39574:	str	sl, [r4, #16]
   39578:	str	sl, [r4, #20]
   3957c:	str	r0, [r4, #24]
   39580:	mvn	r0, #0
   39584:	str	r0, [r4, #28]
   39588:	strne	r4, [r7]
   3958c:	cmp	r8, #0
   39590:	mov	r7, r4
   39594:	strne	r4, [r8]
   39598:	ldrb	r0, [r6, #4]
   3959c:	cmp	r0, #10
   395a0:	beq	39518 <__assert_fail@plt+0x26a68>
   395a4:	b	39648 <__assert_fail@plt+0x26b98>
   395a8:	ldr	r1, [fp, #8]
   395ac:	cmp	r1, #0
   395b0:	beq	395c0 <__assert_fail@plt+0x26b10>
   395b4:	cmp	r0, #9
   395b8:	mov	r8, #0
   395bc:	beq	39548 <__assert_fail@plt+0x26a98>
   395c0:	ldr	r0, [sp, #12]
   395c4:	ldr	r4, [r9, #84]	; 0x54
   395c8:	ldr	r1, [sp, #16]
   395cc:	ldr	r3, [sp, #20]
   395d0:	mov	r2, r6
   395d4:	str	r0, [r9, #84]	; 0x54
   395d8:	ldr	r0, [fp, #8]
   395dc:	str	r0, [sp]
   395e0:	ldr	r0, [fp, #12]
   395e4:	str	r0, [sp, #4]
   395e8:	mov	r0, r5
   395ec:	bl	39f4c <__assert_fail@plt+0x2749c>
   395f0:	mov	r8, r0
   395f4:	cmp	r0, #0
   395f8:	bne	3960c <__assert_fail@plt+0x26b5c>
   395fc:	ldr	r0, [fp, #12]
   39600:	ldr	r0, [r0]
   39604:	cmp	r0, #0
   39608:	bne	39654 <__assert_fail@plt+0x26ba4>
   3960c:	ldr	r0, [r9, #84]	; 0x54
   39610:	orr	r0, r0, r4
   39614:	str	r0, [r9, #84]	; 0x54
   39618:	b	39548 <__assert_fail@plt+0x26a98>
   3961c:	mov	r0, #996	; 0x3e4
   39620:	bl	327ac <__assert_fail@plt+0x1fcfc>
   39624:	cmp	r0, #0
   39628:	beq	396fc <__assert_fail@plt+0x26c4c>
   3962c:	ldr	r1, [r9, #56]	; 0x38
   39630:	str	r1, [r0]
   39634:	mov	r1, #0
   39638:	str	r1, [r9, #64]	; 0x40
   3963c:	str	r0, [r9, #56]	; 0x38
   39640:	b	39558 <__assert_fail@plt+0x26aa8>
   39644:	mov	r4, r7
   39648:	mov	r0, r4
   3964c:	sub	sp, fp, #28
   39650:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   39654:	mov	r4, #0
   39658:	cmp	r7, #0
   3965c:	beq	39648 <__assert_fail@plt+0x26b98>
   39660:	movw	r8, #255	; 0xff
   39664:	movt	r8, #4
   39668:	mov	r6, r7
   3966c:	ldr	r7, [r7, #4]
   39670:	cmp	r7, #0
   39674:	bne	39668 <__assert_fail@plt+0x26bb8>
   39678:	ldr	r7, [r6, #8]
   3967c:	cmp	r7, #0
   39680:	bne	39668 <__assert_fail@plt+0x26bb8>
   39684:	ldr	r0, [r6, #24]
   39688:	and	r0, r0, r8
   3968c:	cmp	r0, #3
   39690:	beq	396c4 <__assert_fail@plt+0x26c14>
   39694:	cmp	r0, #6
   39698:	bne	396d0 <__assert_fail@plt+0x26c20>
   3969c:	ldr	r5, [r6, #20]
   396a0:	ldr	r0, [r5]
   396a4:	bl	30174 <__assert_fail@plt+0x1d6c4>
   396a8:	ldr	r0, [r5, #4]
   396ac:	bl	30174 <__assert_fail@plt+0x1d6c4>
   396b0:	ldr	r0, [r5, #8]
   396b4:	bl	30174 <__assert_fail@plt+0x1d6c4>
   396b8:	ldr	r0, [r5, #12]
   396bc:	bl	30174 <__assert_fail@plt+0x1d6c4>
   396c0:	b	396c8 <__assert_fail@plt+0x26c18>
   396c4:	ldr	r5, [r6, #20]
   396c8:	mov	r0, r5
   396cc:	bl	30174 <__assert_fail@plt+0x1d6c4>
   396d0:	ldr	r0, [r6]
   396d4:	cmp	r0, #0
   396d8:	beq	39648 <__assert_fail@plt+0x26b98>
   396dc:	ldr	r7, [r0, #8]
   396e0:	cmp	r7, r6
   396e4:	mov	r6, r0
   396e8:	beq	39684 <__assert_fail@plt+0x26bd4>
   396ec:	cmp	r7, #0
   396f0:	mov	r6, r0
   396f4:	beq	39684 <__assert_fail@plt+0x26bd4>
   396f8:	b	39668 <__assert_fail@plt+0x26bb8>
   396fc:	ldr	r1, [fp, #12]
   39700:	mov	r0, #12
   39704:	str	r0, [r1]
   39708:	mov	r4, #0
   3970c:	b	39648 <__assert_fail@plt+0x26b98>
   39710:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   39714:	add	fp, sp, #24
   39718:	sub	sp, sp, #8
   3971c:	mov	r9, r0
   39720:	mov	r7, r1
   39724:	ldr	r0, [r1, #40]	; 0x28
   39728:	ldr	r1, [r1, #56]	; 0x38
   3972c:	cmp	r1, r0
   39730:	ble	39818 <__assert_fail@plt+0x26d68>
   39734:	ldr	r1, [r7, #4]
   39738:	mov	r5, r9
   3973c:	mov	r8, r2
   39740:	ldrb	r6, [r1, r0]
   39744:	strb	r6, [r5], #4
   39748:	ldr	r0, [r5]
   3974c:	bic	r1, r0, #6291456	; 0x600000
   39750:	str	r1, [r5]
   39754:	ldr	r3, [r7, #80]	; 0x50
   39758:	cmp	r3, #2
   3975c:	blt	39780 <__assert_fail@plt+0x26cd0>
   39760:	ldr	r2, [r7, #28]
   39764:	ldr	r1, [r7, #40]	; 0x28
   39768:	cmp	r1, r2
   3976c:	beq	39780 <__assert_fail@plt+0x26cd0>
   39770:	ldr	r2, [r7, #8]
   39774:	ldr	r1, [r2, r1, lsl #2]
   39778:	cmn	r1, #1
   3977c:	beq	39c54 <__assert_fail@plt+0x271a4>
   39780:	movw	r1, #65280	; 0xff00
   39784:	cmp	r6, #92	; 0x5c
   39788:	movt	r1, #65439	; 0xff9f
   3978c:	bne	39828 <__assert_fail@plt+0x26d78>
   39790:	ldr	r6, [r7, #40]	; 0x28
   39794:	ldr	r4, [r7, #48]	; 0x30
   39798:	add	r2, r6, #1
   3979c:	cmp	r2, r4
   397a0:	bge	3987c <__assert_fail@plt+0x26dcc>
   397a4:	ldrb	r4, [r7, #75]	; 0x4b
   397a8:	cmp	r4, #0
   397ac:	bne	39ed8 <__assert_fail@plt+0x27428>
   397b0:	ldr	r3, [r7, #4]
   397b4:	ldrb	r6, [r3, r2]
   397b8:	and	r0, r0, r1
   397bc:	strb	r6, [r9]
   397c0:	orr	r4, r0, #1
   397c4:	str	r4, [r9, #4]
   397c8:	ldr	r0, [r7, #80]	; 0x50
   397cc:	cmp	r0, #2
   397d0:	blt	39aa0 <__assert_fail@plt+0x26ff0>
   397d4:	ldr	r0, [r7, #8]
   397d8:	ldr	r1, [r7, #40]	; 0x28
   397dc:	add	r0, r0, r1, lsl #2
   397e0:	ldr	r4, [r0, #4]
   397e4:	mov	r0, r4
   397e8:	bl	12810 <iswalnum@plt>
   397ec:	sub	r1, r4, #95	; 0x5f
   397f0:	cmp	r0, #0
   397f4:	clz	r1, r1
   397f8:	movwne	r0, #1
   397fc:	lsr	r1, r1, #5
   39800:	orr	r0, r1, r0
   39804:	ldr	r1, [r5]
   39808:	bic	r1, r1, #4194304	; 0x400000
   3980c:	orr	r0, r1, r0, lsl #22
   39810:	uxtb	r1, r6
   39814:	b	39ac4 <__assert_fail@plt+0x27014>
   39818:	mov	r0, #2
   3981c:	mov	r4, #0
   39820:	strb	r0, [r9, #4]
   39824:	b	39ecc <__assert_fail@plt+0x2741c>
   39828:	and	r0, r0, r1
   3982c:	orr	r4, r0, #1
   39830:	str	r4, [r5]
   39834:	ldr	r0, [r7, #80]	; 0x50
   39838:	cmp	r0, #2
   3983c:	blt	39888 <__assert_fail@plt+0x26dd8>
   39840:	ldr	r0, [r7, #8]
   39844:	ldr	r1, [r7, #40]	; 0x28
   39848:	ldr	r4, [r0, r1, lsl #2]
   3984c:	mov	r0, r4
   39850:	bl	12810 <iswalnum@plt>
   39854:	sub	r1, r4, #95	; 0x5f
   39858:	cmp	r0, #0
   3985c:	clz	r1, r1
   39860:	movwne	r0, #1
   39864:	lsr	r1, r1, #5
   39868:	orr	r0, r1, r0
   3986c:	ldr	r1, [r5]
   39870:	bic	r1, r1, #4194304	; 0x400000
   39874:	orr	r0, r1, r0, lsl #22
   39878:	b	398a8 <__assert_fail@plt+0x26df8>
   3987c:	and	r0, r0, r1
   39880:	orr	r0, r0, #36	; 0x24
   39884:	b	39c68 <__assert_fail@plt+0x271b8>
   39888:	bl	12768 <__ctype_b_loc@plt>
   3988c:	ldr	r0, [r0]
   39890:	cmp	r6, #95	; 0x5f
   39894:	add	r0, r0, r6, lsl #1
   39898:	ldrh	r0, [r0]
   3989c:	ubfx	r0, r0, #3, #1
   398a0:	movweq	r0, #1
   398a4:	orr	r0, r4, r0, lsl #22
   398a8:	sub	r1, r6, #10
   398ac:	mov	r4, #1
   398b0:	str	r0, [r5]
   398b4:	cmp	r1, #115	; 0x73
   398b8:	bhi	39ecc <__assert_fail@plt+0x2741c>
   398bc:	add	r2, pc, #0
   398c0:	ldr	pc, [r2, r1, lsl #2]
   398c4:	muleq	r3, r4, sl
   398c8:	andeq	r9, r3, ip, asr #29
   398cc:	andeq	r9, r3, ip, asr #29
   398d0:	andeq	r9, r3, ip, asr #29
   398d4:	andeq	r9, r3, ip, asr #29
   398d8:	andeq	r9, r3, ip, asr #29
   398dc:	andeq	r9, r3, ip, asr #29
   398e0:	andeq	r9, r3, ip, asr #29
   398e4:	andeq	r9, r3, ip, asr #29
   398e8:	andeq	r9, r3, ip, asr #29
   398ec:	andeq	r9, r3, ip, asr #29
   398f0:	andeq	r9, r3, ip, asr #29
   398f4:	andeq	r9, r3, ip, asr #29
   398f8:	andeq	r9, r3, ip, asr #29
   398fc:	andeq	r9, r3, ip, asr #29
   39900:	andeq	r9, r3, ip, asr #29
   39904:	andeq	r9, r3, ip, asr #29
   39908:	andeq	r9, r3, ip, asr #29
   3990c:	andeq	r9, r3, ip, asr #29
   39910:	andeq	r9, r3, ip, asr #29
   39914:	andeq	r9, r3, ip, asr #29
   39918:	andeq	r9, r3, ip, asr #29
   3991c:	andeq	r9, r3, ip, asr #29
   39920:	andeq	r9, r3, ip, asr #29
   39924:	andeq	r9, r3, ip, asr #29
   39928:	andeq	r9, r3, ip, asr #29
   3992c:	andeq	r9, r3, r4, ror ip
   39930:	andeq	r9, r3, ip, asr #29
   39934:	andeq	r9, r3, ip, asr #29
   39938:	andeq	r9, r3, ip, asr #29
   3993c:	andeq	r9, r3, ip, asr #25
   39940:	ldrdeq	r9, [r3], -r8
   39944:	andeq	r9, r3, r4, ror #25
   39948:	andeq	r9, r3, ip, ror #25
   3994c:	andeq	r9, r3, ip, asr #29
   39950:	andeq	r9, r3, ip, asr #29
   39954:	strdeq	r9, [r3], -ip
   39958:	andeq	r9, r3, ip, asr #29
   3995c:	andeq	r9, r3, ip, asr #29
   39960:	andeq	r9, r3, ip, asr #29
   39964:	andeq	r9, r3, ip, asr #29
   39968:	andeq	r9, r3, ip, asr #29
   3996c:	andeq	r9, r3, ip, asr #29
   39970:	andeq	r9, r3, ip, asr #29
   39974:	andeq	r9, r3, ip, asr #29
   39978:	andeq	r9, r3, ip, asr #29
   3997c:	andeq	r9, r3, ip, asr #29
   39980:	andeq	r9, r3, ip, asr #29
   39984:	andeq	r9, r3, ip, asr #29
   39988:	andeq	r9, r3, ip, asr #29
   3998c:	andeq	r9, r3, ip, asr #29
   39990:	andeq	r9, r3, ip, asr #29
   39994:	andeq	r9, r3, ip, asr #29
   39998:	andeq	r9, r3, r4, lsl #26
   3999c:	andeq	r9, r3, ip, asr #29
   399a0:	andeq	r9, r3, ip, asr #29
   399a4:	andeq	r9, r3, ip, asr #29
   399a8:	andeq	r9, r3, ip, asr #29
   399ac:	andeq	r9, r3, ip, asr #29
   399b0:	andeq	r9, r3, ip, asr #29
   399b4:	andeq	r9, r3, ip, asr #29
   399b8:	andeq	r9, r3, ip, asr #29
   399bc:	andeq	r9, r3, ip, asr #29
   399c0:	andeq	r9, r3, ip, asr #29
   399c4:	andeq	r9, r3, ip, asr #29
   399c8:	andeq	r9, r3, ip, asr #29
   399cc:	andeq	r9, r3, ip, asr #29
   399d0:	andeq	r9, r3, ip, asr #29
   399d4:	andeq	r9, r3, ip, asr #29
   399d8:	andeq	r9, r3, ip, asr #29
   399dc:	andeq	r9, r3, ip, asr #29
   399e0:	andeq	r9, r3, ip, asr #29
   399e4:	andeq	r9, r3, ip, asr #29
   399e8:	andeq	r9, r3, ip, asr #29
   399ec:	andeq	r9, r3, ip, asr #29
   399f0:	andeq	r9, r3, ip, asr #29
   399f4:	andeq	r9, r3, ip, asr #29
   399f8:	andeq	r9, r3, ip, asr #29
   399fc:	andeq	r9, r3, ip, asr #29
   39a00:	andeq	r9, r3, ip, asr #29
   39a04:	andeq	r9, r3, ip, asr #29
   39a08:	andeq	r9, r3, r4, lsl sp
   39a0c:	andeq	r9, r3, ip, asr #29
   39a10:	andeq	r9, r3, ip, asr #29
   39a14:	andeq	r9, r3, ip, lsl sp
   39a18:	andeq	r9, r3, ip, asr #29
   39a1c:	andeq	r9, r3, ip, asr #29
   39a20:	andeq	r9, r3, ip, asr #29
   39a24:	andeq	r9, r3, ip, asr #29
   39a28:	andeq	r9, r3, ip, asr #29
   39a2c:	andeq	r9, r3, ip, asr #29
   39a30:	andeq	r9, r3, ip, asr #29
   39a34:	andeq	r9, r3, ip, asr #29
   39a38:	andeq	r9, r3, ip, asr #29
   39a3c:	andeq	r9, r3, ip, asr #29
   39a40:	andeq	r9, r3, ip, asr #29
   39a44:	andeq	r9, r3, ip, asr #29
   39a48:	andeq	r9, r3, ip, asr #29
   39a4c:	andeq	r9, r3, ip, asr #29
   39a50:	andeq	r9, r3, ip, asr #29
   39a54:	andeq	r9, r3, ip, asr #29
   39a58:	andeq	r9, r3, ip, asr #29
   39a5c:	andeq	r9, r3, ip, asr #29
   39a60:	andeq	r9, r3, ip, asr #29
   39a64:	andeq	r9, r3, ip, asr #29
   39a68:	andeq	r9, r3, ip, asr #29
   39a6c:	andeq	r9, r3, ip, asr #29
   39a70:	andeq	r9, r3, ip, asr #29
   39a74:	andeq	r9, r3, ip, asr #29
   39a78:	andeq	r9, r3, ip, asr #29
   39a7c:	andeq	r9, r3, ip, asr #29
   39a80:	andeq	r9, r3, ip, asr #29
   39a84:	andeq	r9, r3, ip, asr #29
   39a88:	andeq	r9, r3, r4, asr #26
   39a8c:	andeq	r9, r3, r4, asr sp
   39a90:	andeq	r9, r3, r8, ror #26
   39a94:	tst	r8, #2048	; 0x800
   39a98:	bne	39d60 <__assert_fail@plt+0x272b0>
   39a9c:	b	39ecc <__assert_fail@plt+0x2741c>
   39aa0:	bl	12768 <__ctype_b_loc@plt>
   39aa4:	ldr	r0, [r0]
   39aa8:	uxtb	r1, r6
   39aac:	cmp	r1, #95	; 0x5f
   39ab0:	add	r0, r0, r1, lsl #1
   39ab4:	ldrh	r0, [r0]
   39ab8:	ubfx	r0, r0, #3, #1
   39abc:	movweq	r0, #1
   39ac0:	orr	r0, r4, r0, lsl #22
   39ac4:	mvn	r2, #38	; 0x26
   39ac8:	mov	r4, #2
   39acc:	str	r0, [r5]
   39ad0:	uxtab	r2, r2, r6
   39ad4:	cmp	r2, #86	; 0x56
   39ad8:	bhi	39ecc <__assert_fail@plt+0x2741c>
   39adc:	add	r3, pc, #0
   39ae0:	ldr	pc, [r3, r2, lsl #2]
   39ae4:	andeq	r9, r3, r4, lsr #27
   39ae8:			; <UNDEFINED> instruction: 0x00039db4
   39aec:	andeq	r9, r3, r4, asr #27
   39af0:	andeq	r9, r3, ip, asr #29
   39af4:	ldrdeq	r9, [r3], -r4
   39af8:	andeq	r9, r3, ip, asr #29
   39afc:	andeq	r9, r3, ip, asr #29
   39b00:	andeq	r9, r3, ip, asr #29
   39b04:	andeq	r9, r3, ip, asr #29
   39b08:	andeq	r9, r3, ip, asr #29
   39b0c:	andeq	r9, r3, r0, asr #24
   39b10:	andeq	r9, r3, r0, asr #24
   39b14:	andeq	r9, r3, r0, asr #24
   39b18:	andeq	r9, r3, r0, asr #24
   39b1c:	andeq	r9, r3, r0, asr #24
   39b20:	andeq	r9, r3, r0, asr #24
   39b24:	andeq	r9, r3, r0, asr #24
   39b28:	andeq	r9, r3, r0, asr #24
   39b2c:	andeq	r9, r3, r0, asr #24
   39b30:	andeq	r9, r3, ip, asr #29
   39b34:	andeq	r9, r3, ip, asr #29
   39b38:	andeq	r9, r3, ip, ror #27
   39b3c:	andeq	r9, r3, ip, asr #29
   39b40:	strdeq	r9, [r3], -ip
   39b44:	andeq	r9, r3, ip, lsl #28
   39b48:	andeq	r9, r3, ip, asr #29
   39b4c:	andeq	r9, r3, ip, asr #29
   39b50:	andeq	r9, r3, r4, lsr #28
   39b54:	andeq	r9, r3, ip, asr #29
   39b58:	andeq	r9, r3, ip, asr #29
   39b5c:	andeq	r9, r3, ip, asr #29
   39b60:	andeq	r9, r3, ip, asr #29
   39b64:	andeq	r9, r3, ip, asr #29
   39b68:	andeq	r9, r3, ip, asr #29
   39b6c:	andeq	r9, r3, ip, asr #29
   39b70:	andeq	r9, r3, ip, asr #29
   39b74:	andeq	r9, r3, ip, asr #29
   39b78:	andeq	r9, r3, ip, asr #29
   39b7c:	andeq	r9, r3, ip, asr #29
   39b80:	andeq	r9, r3, ip, asr #29
   39b84:	andeq	r9, r3, ip, asr #29
   39b88:	andeq	r9, r3, ip, asr #29
   39b8c:	andeq	r9, r3, ip, asr #29
   39b90:	andeq	r9, r3, ip, asr #29
   39b94:	andeq	r9, r3, r4, lsr lr
   39b98:	andeq	r9, r3, ip, asr #29
   39b9c:	andeq	r9, r3, ip, asr #29
   39ba0:	andeq	r9, r3, ip, asr #29
   39ba4:	andeq	r9, r3, r4, asr #28
   39ba8:	andeq	r9, r3, ip, asr #29
   39bac:	andeq	r9, r3, ip, asr #29
   39bb0:	andeq	r9, r3, ip, asr #29
   39bb4:	andeq	r9, r3, ip, asr #29
   39bb8:	andeq	r9, r3, ip, asr #29
   39bbc:	andeq	r9, r3, ip, asr #29
   39bc0:	andeq	r9, r3, ip, asr #29
   39bc4:	andeq	r9, r3, ip, asr #29
   39bc8:	andeq	r9, r3, r4, asr lr
   39bcc:	andeq	r9, r3, ip, asr #29
   39bd0:	andeq	r9, r3, r4, ror #28
   39bd4:	andeq	r9, r3, ip, asr #29
   39bd8:	andeq	r9, r3, ip, asr #29
   39bdc:	andeq	r9, r3, ip, asr #29
   39be0:	andeq	r9, r3, ip, asr #29
   39be4:	andeq	r9, r3, ip, asr #29
   39be8:	andeq	r9, r3, ip, asr #29
   39bec:	andeq	r9, r3, ip, asr #29
   39bf0:	andeq	r9, r3, ip, asr #29
   39bf4:	andeq	r9, r3, ip, asr #29
   39bf8:	andeq	r9, r3, ip, asr #29
   39bfc:	andeq	r9, r3, ip, asr #29
   39c00:	andeq	r9, r3, ip, asr #29
   39c04:	andeq	r9, r3, ip, asr #29
   39c08:	andeq	r9, r3, ip, asr #29
   39c0c:	andeq	r9, r3, ip, asr #29
   39c10:	andeq	r9, r3, ip, asr #29
   39c14:	andeq	r9, r3, r4, ror lr
   39c18:	andeq	r9, r3, ip, asr #29
   39c1c:	andeq	r9, r3, ip, asr #29
   39c20:	andeq	r9, r3, ip, asr #29
   39c24:	andeq	r9, r3, r4, lsl #29
   39c28:	andeq	r9, r3, ip, asr #29
   39c2c:	andeq	r9, r3, ip, asr #29
   39c30:	andeq	r9, r3, ip, asr #29
   39c34:	muleq	r3, r4, lr
   39c38:	andeq	r9, r3, r8, lsr #29
   39c3c:			; <UNDEFINED> instruction: 0x00039eb4
   39c40:	tst	r8, #16384	; 0x4000
   39c44:	bne	39ecc <__assert_fail@plt+0x2741c>
   39c48:	sub	r1, r1, #49	; 0x31
   39c4c:	mov	r2, #4
   39c50:	b	39d34 <__assert_fail@plt+0x27284>
   39c54:	movw	r1, #65280	; 0xff00
   39c58:	movt	r1, #65439	; 0xff9f
   39c5c:	and	r0, r0, r1
   39c60:	orr	r0, r0, #1
   39c64:	orr	r0, r0, #2097152	; 0x200000
   39c68:	str	r0, [r5]
   39c6c:	mov	r4, #1
   39c70:	b	39ecc <__assert_fail@plt+0x2741c>
   39c74:	tst	r8, #8
   39c78:	bne	39cc4 <__assert_fail@plt+0x27214>
   39c7c:	ldr	r1, [r7, #40]	; 0x28
   39c80:	ldr	r2, [r7, #48]	; 0x30
   39c84:	add	r1, r1, #1
   39c88:	cmp	r1, r2
   39c8c:	beq	39cc4 <__assert_fail@plt+0x27214>
   39c90:	str	r1, [r7, #40]	; 0x28
   39c94:	mov	r0, sp
   39c98:	mov	r1, r7
   39c9c:	mov	r2, r8
   39ca0:	bl	39710 <__assert_fail@plt+0x26c60>
   39ca4:	ldr	r0, [r7, #40]	; 0x28
   39ca8:	sub	r0, r0, #1
   39cac:	str	r0, [r7, #40]	; 0x28
   39cb0:	ldrb	r0, [sp, #4]
   39cb4:	sub	r0, r0, #9
   39cb8:	cmp	r0, #1
   39cbc:	bhi	39ecc <__assert_fail@plt+0x2741c>
   39cc0:	ldr	r0, [r5]
   39cc4:	mov	r1, #32
   39cc8:	b	39d30 <__assert_fail@plt+0x27280>
   39ccc:	tst	r8, #8192	; 0x2000
   39cd0:	bne	39dbc <__assert_fail@plt+0x2730c>
   39cd4:	b	39ecc <__assert_fail@plt+0x2741c>
   39cd8:	tst	r8, #8192	; 0x2000
   39cdc:	bne	39dcc <__assert_fail@plt+0x2731c>
   39ce0:	b	39ecc <__assert_fail@plt+0x2741c>
   39ce4:	mov	r1, #11
   39ce8:	b	39ec4 <__assert_fail@plt+0x27414>
   39cec:	movw	r1, #1026	; 0x402
   39cf0:	tst	r8, r1
   39cf4:	bne	39ecc <__assert_fail@plt+0x2741c>
   39cf8:	b	39de4 <__assert_fail@plt+0x27334>
   39cfc:	mov	r1, #5
   39d00:	b	39ec4 <__assert_fail@plt+0x27414>
   39d04:	movw	r1, #1026	; 0x402
   39d08:	tst	r8, r1
   39d0c:	bne	39ecc <__assert_fail@plt+0x2741c>
   39d10:	b	39e1c <__assert_fail@plt+0x2736c>
   39d14:	mov	r1, #20
   39d18:	b	39ec4 <__assert_fail@plt+0x27414>
   39d1c:	movw	r1, #8
   39d20:	movt	r1, #128	; 0x80
   39d24:	tst	r8, r1
   39d28:	beq	39d78 <__assert_fail@plt+0x272c8>
   39d2c:	mov	r1, #16
   39d30:	mov	r2, #12
   39d34:	bfi	r0, r2, #0, #8
   39d38:	str	r1, [r9]
   39d3c:	str	r0, [r9, #4]
   39d40:	b	39ecc <__assert_fail@plt+0x2741c>
   39d44:	and	r1, r8, #4608	; 0x1200
   39d48:	cmp	r1, #4608	; 0x1200
   39d4c:	beq	39ea0 <__assert_fail@plt+0x273f0>
   39d50:	b	39ecc <__assert_fail@plt+0x2741c>
   39d54:	and	r1, r8, #33792	; 0x8400
   39d58:	cmp	r1, #32768	; 0x8000
   39d5c:	bne	39ecc <__assert_fail@plt+0x2741c>
   39d60:	mov	r1, #10
   39d64:	b	39ec4 <__assert_fail@plt+0x27414>
   39d68:	and	r1, r8, #4608	; 0x1200
   39d6c:	cmp	r1, #4608	; 0x1200
   39d70:	beq	39ec0 <__assert_fail@plt+0x27410>
   39d74:	b	39ecc <__assert_fail@plt+0x2741c>
   39d78:	ldr	r1, [r7, #40]	; 0x28
   39d7c:	cmp	r1, #0
   39d80:	beq	39d2c <__assert_fail@plt+0x2727c>
   39d84:	tst	r8, #2048	; 0x800
   39d88:	beq	39ecc <__assert_fail@plt+0x2741c>
   39d8c:	ldr	r2, [r7, #4]
   39d90:	add	r1, r1, r2
   39d94:	ldrb	r1, [r1, #-1]
   39d98:	cmp	r1, #10
   39d9c:	beq	39d2c <__assert_fail@plt+0x2727c>
   39da0:	b	39ecc <__assert_fail@plt+0x2741c>
   39da4:	tst	r8, #524288	; 0x80000
   39da8:	bne	39ecc <__assert_fail@plt+0x2741c>
   39dac:	mov	r1, #128	; 0x80
   39db0:	b	39d30 <__assert_fail@plt+0x27280>
   39db4:	tst	r8, #8192	; 0x2000
   39db8:	bne	39ecc <__assert_fail@plt+0x2741c>
   39dbc:	mov	r1, #8
   39dc0:	b	39ec4 <__assert_fail@plt+0x27414>
   39dc4:	tst	r8, #8192	; 0x2000
   39dc8:	bne	39ecc <__assert_fail@plt+0x2741c>
   39dcc:	mov	r1, #9
   39dd0:	b	39ec4 <__assert_fail@plt+0x27414>
   39dd4:	movw	r1, #1026	; 0x402
   39dd8:	and	r1, r8, r1
   39ddc:	cmp	r1, #2
   39de0:	bne	39ecc <__assert_fail@plt+0x2741c>
   39de4:	mov	r1, #18
   39de8:	b	39ec4 <__assert_fail@plt+0x27414>
   39dec:	tst	r8, #524288	; 0x80000
   39df0:	bne	39ecc <__assert_fail@plt+0x2741c>
   39df4:	mov	r1, #6
   39df8:	b	39d30 <__assert_fail@plt+0x27280>
   39dfc:	tst	r8, #524288	; 0x80000
   39e00:	bne	39ecc <__assert_fail@plt+0x2741c>
   39e04:	mov	r1, #9
   39e08:	b	39d30 <__assert_fail@plt+0x27280>
   39e0c:	movw	r1, #1026	; 0x402
   39e10:	and	r1, r8, r1
   39e14:	cmp	r1, #2
   39e18:	bne	39ecc <__assert_fail@plt+0x2741c>
   39e1c:	mov	r1, #19
   39e20:	b	39ec4 <__assert_fail@plt+0x27414>
   39e24:	tst	r8, #524288	; 0x80000
   39e28:	bne	39ecc <__assert_fail@plt+0x2741c>
   39e2c:	mov	r1, #512	; 0x200
   39e30:	b	39d30 <__assert_fail@plt+0x27280>
   39e34:	tst	r8, #524288	; 0x80000
   39e38:	bne	39ecc <__assert_fail@plt+0x2741c>
   39e3c:	mov	r1, #35	; 0x23
   39e40:	b	39ec4 <__assert_fail@plt+0x27414>
   39e44:	tst	r8, #524288	; 0x80000
   39e48:	bne	39ecc <__assert_fail@plt+0x2741c>
   39e4c:	mov	r1, #33	; 0x21
   39e50:	b	39ec4 <__assert_fail@plt+0x27414>
   39e54:	tst	r8, #524288	; 0x80000
   39e58:	bne	39ecc <__assert_fail@plt+0x2741c>
   39e5c:	mov	r1, #64	; 0x40
   39e60:	b	39d30 <__assert_fail@plt+0x27280>
   39e64:	tst	r8, #524288	; 0x80000
   39e68:	bne	39ecc <__assert_fail@plt+0x2741c>
   39e6c:	mov	r1, #256	; 0x100
   39e70:	b	39d30 <__assert_fail@plt+0x27280>
   39e74:	tst	r8, #524288	; 0x80000
   39e78:	bne	39ecc <__assert_fail@plt+0x2741c>
   39e7c:	mov	r1, #34	; 0x22
   39e80:	b	39ec4 <__assert_fail@plt+0x27414>
   39e84:	tst	r8, #524288	; 0x80000
   39e88:	bne	39ecc <__assert_fail@plt+0x2741c>
   39e8c:	mov	r1, #32
   39e90:	b	39ec4 <__assert_fail@plt+0x27414>
   39e94:	and	r1, r8, #4608	; 0x1200
   39e98:	cmp	r1, #512	; 0x200
   39e9c:	bne	39ecc <__assert_fail@plt+0x2741c>
   39ea0:	mov	r1, #23
   39ea4:	b	39ec4 <__assert_fail@plt+0x27414>
   39ea8:	tst	r8, #33792	; 0x8400
   39eac:	bne	39ecc <__assert_fail@plt+0x2741c>
   39eb0:	b	39d60 <__assert_fail@plt+0x272b0>
   39eb4:	and	r1, r8, #4608	; 0x1200
   39eb8:	cmp	r1, #512	; 0x200
   39ebc:	bne	39ecc <__assert_fail@plt+0x2741c>
   39ec0:	mov	r1, #24
   39ec4:	bfi	r0, r1, #0, #8
   39ec8:	str	r0, [r5]
   39ecc:	mov	r0, r4
   39ed0:	sub	sp, fp, #24
   39ed4:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   39ed8:	cmp	r3, #2
   39edc:	blt	39f0c <__assert_fail@plt+0x2745c>
   39ee0:	ldr	r3, [r7, #8]
   39ee4:	ldr	r4, [r3, r2, lsl #2]
   39ee8:	cmn	r4, #1
   39eec:	beq	397b0 <__assert_fail@plt+0x26d00>
   39ef0:	ldr	r4, [r7, #28]
   39ef4:	add	r6, r6, #2
   39ef8:	cmp	r4, r6
   39efc:	beq	39f0c <__assert_fail@plt+0x2745c>
   39f00:	ldr	r3, [r3, r6, lsl #2]
   39f04:	cmn	r3, #1
   39f08:	beq	397b0 <__assert_fail@plt+0x26d00>
   39f0c:	ldrb	r3, [r7, #76]	; 0x4c
   39f10:	mov	r6, r2
   39f14:	cmp	r3, #0
   39f18:	beq	39f24 <__assert_fail@plt+0x27474>
   39f1c:	ldr	r6, [r7, #12]
   39f20:	ldr	r6, [r6, r2, lsl #2]
   39f24:	ldr	r4, [r7, #24]
   39f28:	ldr	ip, [r7]
   39f2c:	cmp	r3, #0
   39f30:	add	r6, r4, r6
   39f34:	add	r6, ip, r6
   39f38:	ldrsb	r6, [r6]
   39f3c:	beq	397b8 <__assert_fail@plt+0x26d08>
   39f40:	cmn	r6, #1
   39f44:	ble	397b0 <__assert_fail@plt+0x26d00>
   39f48:	b	397b8 <__assert_fail@plt+0x26d08>
   39f4c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   39f50:	add	fp, sp, #28
   39f54:	sub	sp, sp, #20
   39f58:	ldr	r4, [fp, #12]
   39f5c:	ldr	r7, [fp, #8]
   39f60:	ldr	sl, [r1]
   39f64:	mov	r6, r2
   39f68:	str	r0, [sp, #12]
   39f6c:	str	r1, [sp, #8]
   39f70:	str	r3, [sp, #16]
   39f74:	str	r4, [sp, #4]
   39f78:	str	r7, [sp]
   39f7c:	bl	3a2a0 <__assert_fail@plt+0x277f0>
   39f80:	mov	r3, r4
   39f84:	mov	r4, r0
   39f88:	cmp	r0, #0
   39f8c:	bne	39fb8 <__assert_fail@plt+0x27508>
   39f90:	ldr	r0, [r3]
   39f94:	cmp	r0, #0
   39f98:	beq	39fb8 <__assert_fail@plt+0x27508>
   39f9c:	b	3a288 <__assert_fail@plt+0x277d8>
   39fa0:	cmp	r4, #0
   39fa4:	cmpne	r5, #0
   39fa8:	bne	3a01c <__assert_fail@plt+0x2756c>
   39fac:	cmp	r4, #0
   39fb0:	mov	r7, r8
   39fb4:	moveq	r4, r5
   39fb8:	ldrb	r0, [r6, #4]
   39fbc:	orr	r1, r0, #8
   39fc0:	cmp	r1, #10
   39fc4:	beq	3a28c <__assert_fail@plt+0x277dc>
   39fc8:	cmp	r7, #0
   39fcc:	beq	39fd8 <__assert_fail@plt+0x27528>
   39fd0:	cmp	r0, #9
   39fd4:	beq	3a28c <__assert_fail@plt+0x277dc>
   39fd8:	str	r3, [sp, #4]
   39fdc:	mov	r9, r3
   39fe0:	ldr	r0, [sp, #12]
   39fe4:	ldr	r1, [sp, #8]
   39fe8:	ldr	r3, [sp, #16]
   39fec:	mov	r2, r6
   39ff0:	mov	r8, r7
   39ff4:	str	r7, [sp]
   39ff8:	bl	3a2a0 <__assert_fail@plt+0x277f0>
   39ffc:	mov	r3, r9
   3a000:	mov	r5, r0
   3a004:	cmp	r0, #0
   3a008:	bne	39fa0 <__assert_fail@plt+0x274f0>
   3a00c:	ldr	r0, [r3]
   3a010:	cmp	r0, #0
   3a014:	beq	39fa0 <__assert_fail@plt+0x274f0>
   3a018:	b	3a0a0 <__assert_fail@plt+0x275f0>
   3a01c:	ldr	r1, [sl, #64]	; 0x40
   3a020:	cmp	r1, #31
   3a024:	beq	3a074 <__assert_fail@plt+0x275c4>
   3a028:	ldr	r0, [sl, #56]	; 0x38
   3a02c:	add	r0, r0, r1, lsl #5
   3a030:	add	r2, r1, #1
   3a034:	mov	r1, #0
   3a038:	mov	r7, r8
   3a03c:	str	r2, [sl, #64]	; 0x40
   3a040:	str	r1, [r0, #4]!
   3a044:	stmib	r0, {r4, r5}
   3a048:	str	r1, [r0, #12]
   3a04c:	str	r1, [r0, #16]
   3a050:	str	r1, [r0, #20]
   3a054:	mov	r1, #16
   3a058:	str	r1, [r0, #24]
   3a05c:	mvn	r1, #0
   3a060:	str	r1, [r0, #28]
   3a064:	str	r0, [r4]
   3a068:	str	r0, [r5]
   3a06c:	mov	r4, r0
   3a070:	b	39fb8 <__assert_fail@plt+0x27508>
   3a074:	mov	r0, #996	; 0x3e4
   3a078:	bl	327ac <__assert_fail@plt+0x1fcfc>
   3a07c:	cmp	r0, #0
   3a080:	beq	3a144 <__assert_fail@plt+0x27694>
   3a084:	ldr	r1, [sl, #56]	; 0x38
   3a088:	mov	r3, r9
   3a08c:	str	r1, [r0]
   3a090:	mov	r1, #0
   3a094:	str	r1, [sl, #64]	; 0x40
   3a098:	str	r0, [sl, #56]	; 0x38
   3a09c:	b	3a02c <__assert_fail@plt+0x2757c>
   3a0a0:	cmp	r4, #0
   3a0a4:	beq	3a288 <__assert_fail@plt+0x277d8>
   3a0a8:	movw	r5, #255	; 0xff
   3a0ac:	movt	r5, #4
   3a0b0:	mov	r6, r4
   3a0b4:	ldr	r4, [r4, #4]
   3a0b8:	cmp	r4, #0
   3a0bc:	bne	3a0b0 <__assert_fail@plt+0x27600>
   3a0c0:	ldr	r4, [r6, #8]
   3a0c4:	cmp	r4, #0
   3a0c8:	bne	3a0b0 <__assert_fail@plt+0x27600>
   3a0cc:	ldr	r0, [r6, #24]
   3a0d0:	and	r0, r0, r5
   3a0d4:	cmp	r0, #3
   3a0d8:	beq	3a10c <__assert_fail@plt+0x2765c>
   3a0dc:	cmp	r0, #6
   3a0e0:	bne	3a118 <__assert_fail@plt+0x27668>
   3a0e4:	ldr	r4, [r6, #20]
   3a0e8:	ldr	r0, [r4]
   3a0ec:	bl	30174 <__assert_fail@plt+0x1d6c4>
   3a0f0:	ldr	r0, [r4, #4]
   3a0f4:	bl	30174 <__assert_fail@plt+0x1d6c4>
   3a0f8:	ldr	r0, [r4, #8]
   3a0fc:	bl	30174 <__assert_fail@plt+0x1d6c4>
   3a100:	ldr	r0, [r4, #12]
   3a104:	bl	30174 <__assert_fail@plt+0x1d6c4>
   3a108:	b	3a110 <__assert_fail@plt+0x27660>
   3a10c:	ldr	r4, [r6, #20]
   3a110:	mov	r0, r4
   3a114:	bl	30174 <__assert_fail@plt+0x1d6c4>
   3a118:	ldr	r0, [r6]
   3a11c:	cmp	r0, #0
   3a120:	beq	3a288 <__assert_fail@plt+0x277d8>
   3a124:	ldr	r4, [r0, #8]
   3a128:	cmp	r4, r6
   3a12c:	mov	r6, r0
   3a130:	beq	3a0cc <__assert_fail@plt+0x2761c>
   3a134:	cmp	r4, #0
   3a138:	mov	r6, r0
   3a13c:	beq	3a0cc <__assert_fail@plt+0x2761c>
   3a140:	b	3a0b0 <__assert_fail@plt+0x27600>
   3a144:	movw	r6, #255	; 0xff
   3a148:	mov	r1, r9
   3a14c:	movt	r6, #4
   3a150:	mov	r7, r5
   3a154:	ldr	r5, [r5, #4]
   3a158:	cmp	r5, #0
   3a15c:	bne	3a150 <__assert_fail@plt+0x276a0>
   3a160:	ldr	r5, [r7, #8]
   3a164:	cmp	r5, #0
   3a168:	bne	3a150 <__assert_fail@plt+0x276a0>
   3a16c:	ldr	r0, [r7, #24]
   3a170:	and	r0, r0, r6
   3a174:	cmp	r0, #3
   3a178:	beq	3a1ac <__assert_fail@plt+0x276fc>
   3a17c:	cmp	r0, #6
   3a180:	bne	3a1bc <__assert_fail@plt+0x2770c>
   3a184:	ldr	r5, [r7, #20]
   3a188:	ldr	r0, [r5]
   3a18c:	bl	30174 <__assert_fail@plt+0x1d6c4>
   3a190:	ldr	r0, [r5, #4]
   3a194:	bl	30174 <__assert_fail@plt+0x1d6c4>
   3a198:	ldr	r0, [r5, #8]
   3a19c:	bl	30174 <__assert_fail@plt+0x1d6c4>
   3a1a0:	ldr	r0, [r5, #12]
   3a1a4:	bl	30174 <__assert_fail@plt+0x1d6c4>
   3a1a8:	b	3a1b0 <__assert_fail@plt+0x27700>
   3a1ac:	ldr	r5, [r7, #20]
   3a1b0:	mov	r0, r5
   3a1b4:	bl	30174 <__assert_fail@plt+0x1d6c4>
   3a1b8:	mov	r1, r9
   3a1bc:	ldr	r0, [r7]
   3a1c0:	cmp	r0, #0
   3a1c4:	beq	3a1e8 <__assert_fail@plt+0x27738>
   3a1c8:	ldr	r5, [r0, #8]
   3a1cc:	cmp	r5, r7
   3a1d0:	mov	r7, r0
   3a1d4:	beq	3a16c <__assert_fail@plt+0x276bc>
   3a1d8:	cmp	r5, #0
   3a1dc:	mov	r7, r0
   3a1e0:	beq	3a16c <__assert_fail@plt+0x276bc>
   3a1e4:	b	3a150 <__assert_fail@plt+0x276a0>
   3a1e8:	mov	r5, r4
   3a1ec:	ldr	r4, [r4, #4]
   3a1f0:	cmp	r4, #0
   3a1f4:	bne	3a1e8 <__assert_fail@plt+0x27738>
   3a1f8:	ldr	r4, [r5, #8]
   3a1fc:	cmp	r4, #0
   3a200:	bne	3a1e8 <__assert_fail@plt+0x27738>
   3a204:	ldr	r0, [r5, #24]
   3a208:	and	r0, r0, r6
   3a20c:	cmp	r0, #3
   3a210:	beq	3a244 <__assert_fail@plt+0x27794>
   3a214:	cmp	r0, #6
   3a218:	bne	3a254 <__assert_fail@plt+0x277a4>
   3a21c:	ldr	r4, [r5, #20]
   3a220:	ldr	r0, [r4]
   3a224:	bl	30174 <__assert_fail@plt+0x1d6c4>
   3a228:	ldr	r0, [r4, #4]
   3a22c:	bl	30174 <__assert_fail@plt+0x1d6c4>
   3a230:	ldr	r0, [r4, #8]
   3a234:	bl	30174 <__assert_fail@plt+0x1d6c4>
   3a238:	ldr	r0, [r4, #12]
   3a23c:	bl	30174 <__assert_fail@plt+0x1d6c4>
   3a240:	b	3a248 <__assert_fail@plt+0x27798>
   3a244:	ldr	r4, [r5, #20]
   3a248:	mov	r0, r4
   3a24c:	bl	30174 <__assert_fail@plt+0x1d6c4>
   3a250:	mov	r1, r9
   3a254:	ldr	r0, [r5]
   3a258:	cmp	r0, #0
   3a25c:	beq	3a280 <__assert_fail@plt+0x277d0>
   3a260:	ldr	r4, [r0, #8]
   3a264:	cmp	r4, r5
   3a268:	mov	r5, r0
   3a26c:	beq	3a204 <__assert_fail@plt+0x27754>
   3a270:	cmp	r4, #0
   3a274:	mov	r5, r0
   3a278:	beq	3a204 <__assert_fail@plt+0x27754>
   3a27c:	b	3a1e8 <__assert_fail@plt+0x27738>
   3a280:	mov	r0, #12
   3a284:	str	r0, [r1]
   3a288:	mov	r4, #0
   3a28c:	mov	r0, r4
   3a290:	sub	sp, fp, #28
   3a294:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   3a298:	nop	{0}
   3a29c:	nop	{0}
   3a2a0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   3a2a4:	add	fp, sp, #28
   3a2a8:	sub	sp, sp, #156	; 0x9c
   3a2ac:	mov	r5, r0
   3a2b0:	mov	lr, r2
   3a2b4:	ldr	r0, [r2, #4]
   3a2b8:	ldr	r2, [fp, #12]
   3a2bc:	mov	r7, r1
   3a2c0:	mvn	r1, #0
   3a2c4:	mov	r9, #0
   3a2c8:	mov	ip, r3
   3a2cc:	ldr	sl, [r7]
   3a2d0:	str	r2, [sp, #20]
   3a2d4:	uxtab	r1, r1, r0
   3a2d8:	ldr	r6, [fp, #8]
   3a2dc:	add	r2, pc, #12
   3a2e0:	str	r5, [sp, #28]
   3a2e4:	str	r3, [sp, #48]	; 0x30
   3a2e8:	str	lr, [sp, #44]	; 0x2c
   3a2ec:	ldr	pc, [r2, r1, lsl #2]
   3a2f0:	andeq	sl, r3, r8, asr #11
   3a2f4:	andeq	ip, r3, r8, lsr #3
   3a2f8:	andeq	ip, r3, r0, asr #16
   3a2fc:	andeq	sl, r3, r8, lsl #15
   3a300:	andeq	sl, r3, r8, lsl #16
   3a304:	andeq	ip, r3, r0, asr #16
   3a308:	andeq	ip, r3, r0, asr #16
   3a30c:	andeq	sl, r3, r0, ror r8
   3a310:	andeq	sl, r3, r0, lsr #7
   3a314:	andeq	ip, r3, r8, lsr #3
   3a318:	muleq	r3, r0, r3
   3a31c:	muleq	r3, r4, r4
   3a320:	andeq	ip, r3, r0, asr #16
   3a324:	andeq	ip, r3, r0, asr #16
   3a328:	andeq	ip, r3, r0, asr #16
   3a32c:	andeq	ip, r3, r0, asr #16
   3a330:	andeq	ip, r3, r0, asr #16
   3a334:	muleq	r3, r0, r3
   3a338:	muleq	r3, r0, r3
   3a33c:	andeq	sl, r3, r4, asr r5
   3a340:	andeq	ip, r3, r0, asr #16
   3a344:	andeq	ip, r3, r0, asr #16
   3a348:	andeq	sl, r3, ip, ror #17
   3a34c:			; <UNDEFINED> instruction: 0x0003a3b0
   3a350:	andeq	ip, r3, r0, asr #16
   3a354:	andeq	ip, r3, r0, asr #16
   3a358:	andeq	ip, r3, r0, asr #16
   3a35c:	andeq	ip, r3, r0, asr #16
   3a360:	andeq	ip, r3, r0, asr #16
   3a364:	andeq	ip, r3, r0, asr #16
   3a368:	andeq	ip, r3, r0, asr #16
   3a36c:	andeq	sl, r3, ip, lsl #8
   3a370:	andeq	sl, r3, ip, lsl #8
   3a374:	andeq	sl, r3, ip, lsr #8
   3a378:	andeq	sl, r3, ip, lsr #8
   3a37c:	strdeq	sl, [r3], -ip
   3a380:	andeq	r0, r0, r0
   3a384:	mvnseq	r0, #0
   3a388:			; <UNDEFINED> instruction: 0x87fffffe
   3a38c:			; <UNDEFINED> instruction: 0x07fffffe
   3a390:	tst	ip, #32
   3a394:	bne	3a8f4 <__assert_fail@plt+0x27e44>
   3a398:	tst	ip, #16
   3a39c:	bne	3a90c <__assert_fail@plt+0x27e5c>
   3a3a0:	tst	ip, #131072	; 0x20000
   3a3a4:	uxtbeq	r1, r0
   3a3a8:	cmpeq	r1, #9
   3a3ac:	beq	3a94c <__assert_fail@plt+0x27e9c>
   3a3b0:	mov	r1, #1
   3a3b4:	bfi	r0, r1, #0, #8
   3a3b8:	str	r0, [lr, #4]
   3a3bc:	ldr	r1, [sl, #64]	; 0x40
   3a3c0:	cmp	r1, #31
   3a3c4:	beq	3c354 <__assert_fail@plt+0x298a4>
   3a3c8:	ldr	r0, [sl, #56]	; 0x38
   3a3cc:	add	r7, r0, r1, lsl #5
   3a3d0:	add	r2, r1, #1
   3a3d4:	mov	r0, #0
   3a3d8:	mvn	r3, #0
   3a3dc:	str	r2, [sl, #64]	; 0x40
   3a3e0:	str	r0, [r7, #4]!
   3a3e4:	str	r0, [r7, #8]
   3a3e8:	str	r0, [r7, #4]
   3a3ec:	ldm	lr, {r1, r2}
   3a3f0:	str	r3, [r7, #28]
   3a3f4:	str	r0, [r7, #16]
   3a3f8:	str	r0, [r7, #12]
   3a3fc:	bic	r0, r2, #786432	; 0xc0000
   3a400:	str	r1, [r7, #20]
   3a404:	str	r0, [r7, #24]
   3a408:	b	3b330 <__assert_fail@plt+0x28880>
   3a40c:	mvn	r2, #32
   3a410:	ldr	r1, [r5, #64]	; 0x40
   3a414:	movw	r3, #55852	; 0xda2c
   3a418:	uxtab	r0, r2, r0
   3a41c:	movw	r2, #55846	; 0xda26
   3a420:	movt	r3, #4
   3a424:	movt	r2, #4
   3a428:	b	3a448 <__assert_fail@plt+0x27998>
   3a42c:	mvn	r2, #34	; 0x22
   3a430:	ldr	r1, [r5, #64]	; 0x40
   3a434:	movw	r3, #38711	; 0x9737
   3a438:	uxtab	r0, r2, r0
   3a43c:	movw	r2, #55854	; 0xda2e
   3a440:	movt	r3, #4
   3a444:	movt	r2, #4
   3a448:	clz	r0, r0
   3a44c:	lsr	r0, r0, #5
   3a450:	str	r0, [sp]
   3a454:	ldr	r4, [sp, #20]
   3a458:	str	r4, [sp, #4]
   3a45c:	mov	r0, sl
   3a460:	bl	3c840 <__assert_fail@plt+0x29d90>
   3a464:	mov	r7, r0
   3a468:	cmp	r0, #0
   3a46c:	bne	3a488 <__assert_fail@plt+0x279d8>
   3a470:	ldr	r0, [r4]
   3a474:	cmp	r0, #0
   3a478:	ldr	ip, [sp, #48]	; 0x30
   3a47c:	ldr	lr, [sp, #44]	; 0x2c
   3a480:	beq	3b330 <__assert_fail@plt+0x28880>
   3a484:	b	3c1a8 <__assert_fail@plt+0x296f8>
   3a488:	ldr	ip, [sp, #48]	; 0x30
   3a48c:	ldr	lr, [sp, #44]	; 0x2c
   3a490:	b	3b330 <__assert_fail@plt+0x28880>
   3a494:	ldr	r0, [lr]
   3a498:	movw	r1, #783	; 0x30f
   3a49c:	tst	r0, r1
   3a4a0:	beq	3a4e8 <__assert_fail@plt+0x27a38>
   3a4a4:	ldrb	r0, [sl, #88]	; 0x58
   3a4a8:	tst	r0, #16
   3a4ac:	bne	3a4e4 <__assert_fail@plt+0x27a34>
   3a4b0:	orr	r1, r0, #16
   3a4b4:	tst	r0, #8
   3a4b8:	strb	r1, [sl, #88]	; 0x58
   3a4bc:	bne	3c658 <__assert_fail@plt+0x29ba8>
   3a4c0:	sub	r1, pc, #328	; 0x148
   3a4c4:	tst	r0, #4
   3a4c8:	vld1.64	{d16-d17}, [r1 :128]
   3a4cc:	add	r1, sl, #96	; 0x60
   3a4d0:	vst1.32	{d16-d17}, [r1]
   3a4d4:	beq	3c664 <__assert_fail@plt+0x29bb4>
   3a4d8:	vmov.i32	q8, #0	; 0x00000000
   3a4dc:	add	r0, sl, #112	; 0x70
   3a4e0:	vst1.32	{d16-d17}, [r0]
   3a4e4:	ldr	r0, [lr]
   3a4e8:	cmp	r0, #512	; 0x200
   3a4ec:	beq	3b130 <__assert_fail@plt+0x28680>
   3a4f0:	cmp	r0, #256	; 0x100
   3a4f4:	bne	3b23c <__assert_fail@plt+0x2878c>
   3a4f8:	mov	r0, #6
   3a4fc:	str	r0, [lr]
   3a500:	ldr	r1, [sl, #64]	; 0x40
   3a504:	cmp	r1, #31
   3a508:	beq	3c5b8 <__assert_fail@plt+0x29b08>
   3a50c:	ldr	r0, [sl, #56]	; 0x38
   3a510:	add	r4, r0, r1, lsl #5
   3a514:	add	r2, r1, #1
   3a518:	mov	r0, #0
   3a51c:	mvn	r3, #0
   3a520:	str	r2, [sl, #64]	; 0x40
   3a524:	str	r0, [r4, #4]!
   3a528:	str	r0, [r4, #8]
   3a52c:	str	r0, [r4, #4]
   3a530:	ldm	lr, {r1, r2}
   3a534:	str	r3, [r4, #28]
   3a538:	str	r0, [r4, #16]
   3a53c:	str	r0, [r4, #12]
   3a540:	bic	r0, r2, #786432	; 0xc0000
   3a544:	str	r1, [r4, #20]
   3a548:	str	r0, [r4, #24]
   3a54c:	mov	r0, #9
   3a550:	b	3b188 <__assert_fail@plt+0x286d8>
   3a554:	mov	r9, #0
   3a558:	mov	r0, #32
   3a55c:	mov	r1, #1
   3a560:	str	r9, [fp, #-32]	; 0xffffffe0
   3a564:	bl	2fb8c <__assert_fail@plt+0x1d0dc>
   3a568:	mov	r8, r0
   3a56c:	mov	r0, #40	; 0x28
   3a570:	mov	r1, #1
   3a574:	bl	2fb8c <__assert_fail@plt+0x1d0dc>
   3a578:	mov	r7, r0
   3a57c:	cmp	r8, #0
   3a580:	cmpne	r7, #0
   3a584:	beq	3c3b4 <__assert_fail@plt+0x29904>
   3a588:	ldr	r6, [sp, #44]	; 0x2c
   3a58c:	ldr	r4, [sp, #48]	; 0x30
   3a590:	mov	r1, r5
   3a594:	mov	r0, r6
   3a598:	mov	r2, r4
   3a59c:	bl	3cbfc <__assert_fail@plt+0x2a14c>
   3a5a0:	mov	r3, r0
   3a5a4:	ldr	r0, [r6, #4]
   3a5a8:	str	r7, [sp, #60]	; 0x3c
   3a5ac:	uxtb	r1, r0
   3a5b0:	cmp	r1, #25
   3a5b4:	beq	3a954 <__assert_fail@plt+0x27ea4>
   3a5b8:	cmp	r1, #2
   3a5bc:	beq	3c3a0 <__assert_fail@plt+0x298f0>
   3a5c0:	mov	r1, #0
   3a5c4:	b	3a9ac <__assert_fail@plt+0x27efc>
   3a5c8:	ldr	r1, [sl, #64]	; 0x40
   3a5cc:	cmp	r1, #31
   3a5d0:	beq	3c3c8 <__assert_fail@plt+0x29918>
   3a5d4:	ldr	r0, [sl, #56]	; 0x38
   3a5d8:	add	r4, r0, r1, lsl #5
   3a5dc:	add	r2, r1, #1
   3a5e0:	mov	r0, #0
   3a5e4:	mvn	r3, #0
   3a5e8:	str	r2, [sl, #64]	; 0x40
   3a5ec:	str	r0, [r4, #4]!
   3a5f0:	str	r0, [r4, #8]
   3a5f4:	str	r0, [r4, #4]
   3a5f8:	ldm	lr, {r1, r2}
   3a5fc:	str	r3, [r4, #28]
   3a600:	str	r0, [r4, #16]
   3a604:	str	r0, [r4, #12]
   3a608:	bic	r0, r2, #786432	; 0xc0000
   3a60c:	str	r1, [r4, #20]
   3a610:	str	r0, [r4, #24]
   3a614:	ldr	r0, [sl, #92]	; 0x5c
   3a618:	cmp	r0, #2
   3a61c:	blt	3a904 <__assert_fail@plt+0x27e54>
   3a620:	ldr	r0, [r5, #40]	; 0x28
   3a624:	ldr	r1, [r5, #56]	; 0x38
   3a628:	cmp	r1, r0
   3a62c:	ble	3a904 <__assert_fail@plt+0x27e54>
   3a630:	mov	r8, #0
   3a634:	mvn	r9, #0
   3a638:	ldr	r1, [r5, #28]
   3a63c:	cmp	r0, r1
   3a640:	beq	3a904 <__assert_fail@plt+0x27e54>
   3a644:	ldr	r1, [r5, #8]
   3a648:	ldr	r0, [r1, r0, lsl #2]
   3a64c:	cmn	r0, #1
   3a650:	bne	3a904 <__assert_fail@plt+0x27e54>
   3a654:	mov	r0, lr
   3a658:	mov	r1, r5
   3a65c:	mov	r2, ip
   3a660:	bl	39710 <__assert_fail@plt+0x26c60>
   3a664:	ldr	r1, [r5, #40]	; 0x28
   3a668:	add	r0, r1, r0
   3a66c:	str	r0, [r5, #40]	; 0x28
   3a670:	ldr	r1, [sl, #64]	; 0x40
   3a674:	cmp	r1, #31
   3a678:	beq	3a720 <__assert_fail@plt+0x27c70>
   3a67c:	ldr	r0, [sl, #56]	; 0x38
   3a680:	add	r6, r0, r1, lsl #5
   3a684:	ldr	lr, [sp, #44]	; 0x2c
   3a688:	add	r2, r1, #1
   3a68c:	ldr	ip, [sp, #48]	; 0x30
   3a690:	str	r2, [sl, #64]	; 0x40
   3a694:	str	r8, [r6, #4]!
   3a698:	str	r8, [r6, #8]
   3a69c:	str	r8, [r6, #4]
   3a6a0:	ldm	lr, {r0, r1}
   3a6a4:	str	r9, [r6, #28]
   3a6a8:	str	r8, [r6, #16]
   3a6ac:	str	r8, [r6, #12]
   3a6b0:	str	r0, [r6, #20]
   3a6b4:	bic	r0, r1, #786432	; 0xc0000
   3a6b8:	str	r0, [r6, #24]
   3a6bc:	ldr	r1, [sl, #64]	; 0x40
   3a6c0:	cmp	r1, #31
   3a6c4:	beq	3a748 <__assert_fail@plt+0x27c98>
   3a6c8:	ldr	r0, [sl, #56]	; 0x38
   3a6cc:	add	r7, r0, r1, lsl #5
   3a6d0:	add	r2, r1, #1
   3a6d4:	mov	r0, #16
   3a6d8:	cmp	r6, #0
   3a6dc:	str	r2, [sl, #64]	; 0x40
   3a6e0:	str	r8, [r7, #4]!
   3a6e4:	stmib	r7, {r4, r6, r8}
   3a6e8:	str	r8, [r7, #16]
   3a6ec:	str	r8, [r7, #20]
   3a6f0:	str	r0, [r7, #24]
   3a6f4:	str	r9, [r7, #28]
   3a6f8:	str	r7, [r4]
   3a6fc:	beq	3c650 <__assert_fail@plt+0x29ba0>
   3a700:	ldr	r5, [sp, #28]
   3a704:	str	r7, [r6]
   3a708:	mov	r4, r7
   3a70c:	ldr	r0, [r5, #40]	; 0x28
   3a710:	ldr	r1, [r5, #56]	; 0x38
   3a714:	cmp	r1, r0
   3a718:	bgt	3a638 <__assert_fail@plt+0x27b88>
   3a71c:	b	3b330 <__assert_fail@plt+0x28880>
   3a720:	mov	r0, #996	; 0x3e4
   3a724:	bl	327ac <__assert_fail@plt+0x1fcfc>
   3a728:	cmp	r0, #0
   3a72c:	beq	3a778 <__assert_fail@plt+0x27cc8>
   3a730:	ldr	r1, [sl, #56]	; 0x38
   3a734:	str	r1, [r0]
   3a738:	mov	r1, #0
   3a73c:	str	r1, [sl, #64]	; 0x40
   3a740:	str	r0, [sl, #56]	; 0x38
   3a744:	b	3a680 <__assert_fail@plt+0x27bd0>
   3a748:	mov	r0, #996	; 0x3e4
   3a74c:	bl	327ac <__assert_fail@plt+0x1fcfc>
   3a750:	ldr	lr, [sp, #44]	; 0x2c
   3a754:	ldr	ip, [sp, #48]	; 0x30
   3a758:	cmp	r0, #0
   3a75c:	beq	3c650 <__assert_fail@plt+0x29ba0>
   3a760:	ldr	r1, [sl, #56]	; 0x38
   3a764:	str	r1, [r0]
   3a768:	mov	r1, #0
   3a76c:	str	r1, [sl, #64]	; 0x40
   3a770:	str	r0, [sl, #56]	; 0x38
   3a774:	b	3a6cc <__assert_fail@plt+0x27c1c>
   3a778:	ldr	ip, [sp, #48]	; 0x30
   3a77c:	ldr	lr, [sp, #44]	; 0x2c
   3a780:	mov	r6, #0
   3a784:	b	3a6bc <__assert_fail@plt+0x27c0c>
   3a788:	ldr	r0, [lr]
   3a78c:	ldr	r2, [sl, #84]	; 0x54
   3a790:	mov	r1, #1
   3a794:	tst	r2, r1, lsl r0
   3a798:	beq	3c3fc <__assert_fail@plt+0x2994c>
   3a79c:	lsl	r0, r1, r0
   3a7a0:	ldr	r1, [sl, #64]	; 0x40
   3a7a4:	ldr	r2, [sl, #80]	; 0x50
   3a7a8:	orr	r0, r2, r0
   3a7ac:	cmp	r1, #31
   3a7b0:	str	r0, [sl, #80]	; 0x50
   3a7b4:	beq	3c438 <__assert_fail@plt+0x29988>
   3a7b8:	ldr	r0, [sl, #56]	; 0x38
   3a7bc:	add	r7, r0, r1, lsl #5
   3a7c0:	add	r2, r1, #1
   3a7c4:	mov	r0, #0
   3a7c8:	mvn	r3, #0
   3a7cc:	str	r2, [sl, #64]	; 0x40
   3a7d0:	str	r0, [r7, #4]!
   3a7d4:	str	r0, [r7, #8]
   3a7d8:	str	r0, [r7, #4]
   3a7dc:	ldm	lr, {r1, r2}
   3a7e0:	str	r3, [r7, #28]
   3a7e4:	str	r0, [r7, #16]
   3a7e8:	str	r0, [r7, #12]
   3a7ec:	bic	r0, r2, #786432	; 0xc0000
   3a7f0:	str	r1, [r7, #20]
   3a7f4:	str	r0, [r7, #24]
   3a7f8:	ldr	r0, [sl, #76]	; 0x4c
   3a7fc:	add	r0, r0, #1
   3a800:	str	r0, [sl, #76]	; 0x4c
   3a804:	b	3a860 <__assert_fail@plt+0x27db0>
   3a808:	ldr	r1, [sl, #64]	; 0x40
   3a80c:	cmp	r1, #31
   3a810:	beq	3c404 <__assert_fail@plt+0x29954>
   3a814:	ldr	r0, [sl, #56]	; 0x38
   3a818:	add	r7, r0, r1, lsl #5
   3a81c:	add	r2, r1, #1
   3a820:	mov	r0, #0
   3a824:	mvn	r3, #0
   3a828:	str	r2, [sl, #64]	; 0x40
   3a82c:	str	r0, [r7, #4]!
   3a830:	str	r0, [r7, #8]
   3a834:	str	r0, [r7, #4]
   3a838:	ldm	lr, {r1, r2}
   3a83c:	str	r3, [r7, #28]
   3a840:	str	r0, [r7, #16]
   3a844:	str	r0, [r7, #12]
   3a848:	bic	r0, r2, #786432	; 0xc0000
   3a84c:	str	r1, [r7, #20]
   3a850:	str	r0, [r7, #24]
   3a854:	ldr	r0, [sl, #92]	; 0x5c
   3a858:	cmp	r0, #2
   3a85c:	blt	3b330 <__assert_fail@plt+0x28880>
   3a860:	ldrb	r0, [sl, #88]	; 0x58
   3a864:	orr	r0, r0, #2
   3a868:	strb	r0, [sl, #88]	; 0x58
   3a86c:	b	3b330 <__assert_fail@plt+0x28880>
   3a870:	ldr	r4, [r7, #24]
   3a874:	orr	r2, ip, #8388608	; 0x800000
   3a878:	mov	r1, r5
   3a87c:	add	r0, r4, #1
   3a880:	str	r0, [r7, #24]
   3a884:	mov	r0, lr
   3a888:	bl	39710 <__assert_fail@plt+0x26c60>
   3a88c:	ldr	r1, [r5, #40]	; 0x28
   3a890:	ldr	lr, [sp, #44]	; 0x2c
   3a894:	mov	r9, #0
   3a898:	add	r0, r1, r0
   3a89c:	str	r0, [r5, #40]	; 0x28
   3a8a0:	ldrb	r0, [lr, #4]
   3a8a4:	cmp	r0, #9
   3a8a8:	beq	3b2c0 <__assert_fail@plt+0x28810>
   3a8ac:	add	r0, r6, #1
   3a8b0:	mov	r1, r7
   3a8b4:	mov	r2, lr
   3a8b8:	mov	r7, lr
   3a8bc:	str	r0, [sp]
   3a8c0:	mov	r0, r5
   3a8c4:	ldr	r6, [sp, #20]
   3a8c8:	str	r6, [sp, #4]
   3a8cc:	ldr	r3, [sp, #48]	; 0x30
   3a8d0:	bl	394a4 <__assert_fail@plt+0x269f4>
   3a8d4:	mov	r9, r0
   3a8d8:	ldr	r0, [r6]
   3a8dc:	cmp	r0, #0
   3a8e0:	beq	3b2b0 <__assert_fail@plt+0x28800>
   3a8e4:	mov	r9, #0
   3a8e8:	b	3c1a8 <__assert_fail@plt+0x296f8>
   3a8ec:	tst	ip, #16777216	; 0x1000000
   3a8f0:	beq	3a390 <__assert_fail@plt+0x278e0>
   3a8f4:	mov	r0, #13
   3a8f8:	b	3b234 <__assert_fail@plt+0x28784>
   3a8fc:	mov	r0, #5
   3a900:	b	3b234 <__assert_fail@plt+0x28784>
   3a904:	mov	r7, r4
   3a908:	b	3b330 <__assert_fail@plt+0x28880>
   3a90c:	mov	r0, lr
   3a910:	mov	r1, r5
   3a914:	mov	r2, ip
   3a918:	mov	r4, ip
   3a91c:	mov	r6, lr
   3a920:	bl	39710 <__assert_fail@plt+0x26c60>
   3a924:	ldr	r1, [r5, #40]	; 0x28
   3a928:	mov	r2, r6
   3a92c:	mov	r3, r4
   3a930:	add	r0, r1, r0
   3a934:	mov	r1, r7
   3a938:	str	r0, [r5, #40]	; 0x28
   3a93c:	mov	r0, r5
   3a940:	sub	sp, fp, #28
   3a944:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   3a948:	b	3a2a0 <__assert_fail@plt+0x277f0>
   3a94c:	mov	r0, #16
   3a950:	b	3b234 <__assert_fail@plt+0x28784>
   3a954:	ldrb	r0, [r7, #16]
   3a958:	tst	r4, #256	; 0x100
   3a95c:	orr	r0, r0, #1
   3a960:	strb	r0, [r7, #16]
   3a964:	beq	3a974 <__assert_fail@plt+0x27ec4>
   3a968:	ldr	r0, [r8]
   3a96c:	orr	r0, r0, #1024	; 0x400
   3a970:	str	r0, [r8]
   3a974:	ldr	r0, [r5, #40]	; 0x28
   3a978:	mov	r1, r5
   3a97c:	mov	r2, r4
   3a980:	add	r0, r0, r3
   3a984:	str	r0, [r5, #40]	; 0x28
   3a988:	mov	r0, r6
   3a98c:	bl	3cbfc <__assert_fail@plt+0x2a14c>
   3a990:	ldr	r6, [sp, #44]	; 0x2c
   3a994:	mov	r3, r0
   3a998:	ldr	r0, [r6, #4]
   3a99c:	uxtb	r1, r0
   3a9a0:	cmp	r1, #2
   3a9a4:	beq	3c3a0 <__assert_fail@plt+0x298f0>
   3a9a8:	mov	r1, #1
   3a9ac:	str	r1, [sp, #56]	; 0x38
   3a9b0:	uxtb	r1, r0
   3a9b4:	mov	r2, r6
   3a9b8:	ldr	r7, [sp, #48]	; 0x30
   3a9bc:	cmp	r1, #21
   3a9c0:	moveq	r1, #1
   3a9c4:	bfieq	r0, r1, #0, #8
   3a9c8:	mov	r1, r5
   3a9cc:	streq	r0, [r6, #4]
   3a9d0:	sub	r0, fp, #80	; 0x50
   3a9d4:	str	r0, [fp, #-36]	; 0xffffffdc
   3a9d8:	mov	r0, #3
   3a9dc:	str	r0, [fp, #-40]	; 0xffffffd8
   3a9e0:	mov	r0, #1
   3a9e4:	str	r7, [sp]
   3a9e8:	str	r0, [sp, #4]
   3a9ec:	sub	r0, fp, #40	; 0x28
   3a9f0:	bl	3cd74 <__assert_fail@plt+0x2a2c4>
   3a9f4:	cmp	r0, #0
   3a9f8:	bne	3c388 <__assert_fail@plt+0x298d8>
   3a9fc:	and	r0, r7, #65536	; 0x10000
   3aa00:	mov	r2, r7
   3aa04:	str	r0, [sp, #40]	; 0x28
   3aa08:	mov	r0, #0
   3aa0c:	str	r0, [sp, #36]	; 0x24
   3aa10:	mov	r0, #0
   3aa14:	str	r0, [sp, #32]
   3aa18:	ldr	r4, [sp, #44]	; 0x2c
   3aa1c:	ldr	r7, [sp, #60]	; 0x3c
   3aa20:	mov	r0, r4
   3aa24:	mov	r1, r5
   3aa28:	bl	3cbfc <__assert_fail@plt+0x2a14c>
   3aa2c:	ldr	r6, [fp, #-40]	; 0xffffffd8
   3aa30:	mov	r9, r0
   3aa34:	cmp	r6, #2
   3aa38:	beq	3ac18 <__assert_fail@plt+0x28168>
   3aa3c:	cmp	r6, #4
   3aa40:	bne	3aa84 <__assert_fail@plt+0x27fd4>
   3aa44:	ldr	r5, [sp, #28]
   3aa48:	ldr	r1, [fp, #-36]	; 0xffffffdc
   3aa4c:	mov	r2, r7
   3aa50:	sub	r3, fp, #32
   3aa54:	ldr	r0, [r5, #64]	; 0x40
   3aa58:	str	r1, [sp]
   3aa5c:	ldr	r1, [sp, #48]	; 0x30
   3aa60:	str	r1, [sp, #4]
   3aa64:	mov	r1, r8
   3aa68:	bl	3d040 <__assert_fail@plt+0x2a590>
   3aa6c:	ldr	r1, [sp, #20]
   3aa70:	ldr	lr, [sp, #44]	; 0x2c
   3aa74:	cmp	r0, #0
   3aa78:	str	r0, [r1]
   3aa7c:	beq	3ac60 <__assert_fail@plt+0x281b0>
   3aa80:	b	3c310 <__assert_fail@plt+0x29860>
   3aa84:	ldr	r0, [sp, #44]	; 0x2c
   3aa88:	ldr	r2, [sp, #48]	; 0x30
   3aa8c:	mov	r4, r9
   3aa90:	mov	r9, #7
   3aa94:	str	sl, [sp, #52]	; 0x34
   3aa98:	ldrb	r0, [r0, #4]
   3aa9c:	cmp	r0, #22
   3aaa0:	beq	3aab0 <__assert_fail@plt+0x28000>
   3aaa4:	cmp	r0, #2
   3aaa8:	bne	3abcc <__assert_fail@plt+0x2811c>
   3aaac:	b	3c2fc <__assert_fail@plt+0x2984c>
   3aab0:	ldr	r7, [sp, #28]
   3aab4:	mov	r5, r4
   3aab8:	ldr	r0, [r7, #40]	; 0x28
   3aabc:	mov	r1, r7
   3aac0:	add	r0, r0, r4
   3aac4:	str	r0, [r7, #40]	; 0x28
   3aac8:	add	r0, sp, #64	; 0x40
   3aacc:	bl	3cbfc <__assert_fail@plt+0x2a14c>
   3aad0:	mov	r3, r0
   3aad4:	ldrb	r0, [sp, #68]	; 0x44
   3aad8:	cmp	r0, #21
   3aadc:	beq	3abb4 <__assert_fail@plt+0x28104>
   3aae0:	ldr	r4, [sp, #48]	; 0x30
   3aae4:	cmp	r0, #2
   3aae8:	beq	3c2fc <__assert_fail@plt+0x2984c>
   3aaec:	mov	r0, #3
   3aaf0:	str	r8, [sp, #24]
   3aaf4:	add	r2, sp, #64	; 0x40
   3aaf8:	str	r0, [fp, #-48]	; 0xffffffd0
   3aafc:	add	r0, sp, #72	; 0x48
   3ab00:	str	r0, [fp, #-44]	; 0xffffffd4
   3ab04:	mov	r0, #1
   3ab08:	str	r4, [sp]
   3ab0c:	str	r0, [sp, #4]
   3ab10:	sub	r0, fp, #48	; 0x30
   3ab14:	ldr	r7, [sp, #28]
   3ab18:	mov	r1, r7
   3ab1c:	bl	3cd74 <__assert_fail@plt+0x2a2c4>
   3ab20:	cmp	r0, #0
   3ab24:	bne	3c7ac <__assert_fail@plt+0x29cfc>
   3ab28:	ldr	r0, [sp, #44]	; 0x2c
   3ab2c:	mov	r1, r7
   3ab30:	mov	r2, r4
   3ab34:	bl	3cbfc <__assert_fail@plt+0x2a14c>
   3ab38:	ldr	r8, [fp, #-48]	; 0xffffffd0
   3ab3c:	mov	r9, #11
   3ab40:	str	r0, [sp, #16]
   3ab44:	cmp	r8, #2
   3ab48:	beq	3c2f8 <__assert_fail@plt+0x29848>
   3ab4c:	cmp	r8, #4
   3ab50:	beq	3c2f8 <__assert_fail@plt+0x29848>
   3ab54:	cmp	r6, #3
   3ab58:	bne	3ab6c <__assert_fail@plt+0x280bc>
   3ab5c:	ldr	r0, [fp, #-36]	; 0xffffffdc
   3ab60:	bl	127bc <strlen@plt>
   3ab64:	cmp	r0, #1
   3ab68:	bhi	3c7b8 <__assert_fail@plt+0x29d08>
   3ab6c:	cmp	r8, #3
   3ab70:	bne	3ab84 <__assert_fail@plt+0x280d4>
   3ab74:	ldr	r0, [fp, #-44]	; 0xffffffd4
   3ab78:	bl	127bc <strlen@plt>
   3ab7c:	cmp	r0, #1
   3ab80:	bhi	3c7b8 <__assert_fail@plt+0x29d08>
   3ab84:	ldr	lr, [sp, #44]	; 0x2c
   3ab88:	cmp	r6, #3
   3ab8c:	beq	3ad04 <__assert_fail@plt+0x28254>
   3ab90:	cmp	r6, #0
   3ab94:	mov	r7, #0
   3ab98:	ldrbeq	r7, [fp, #-36]	; 0xffffffdc
   3ab9c:	cmp	r8, #3
   3aba0:	beq	3ad14 <__assert_fail@plt+0x28264>
   3aba4:	cmp	r8, #0
   3aba8:	mov	sl, #0
   3abac:	ldrbeq	sl, [fp, #-44]	; 0xffffffd4
   3abb0:	b	3ad1c <__assert_fail@plt+0x2826c>
   3abb4:	ldr	r0, [r7, #40]	; 0x28
   3abb8:	mov	r1, #1
   3abbc:	sub	r0, r0, r5
   3abc0:	str	r0, [r7, #40]	; 0x28
   3abc4:	ldr	r0, [sp, #44]	; 0x2c
   3abc8:	strb	r1, [r0, #4]
   3abcc:	add	r0, pc, #12
   3abd0:	ldr	sl, [sp, #52]	; 0x34
   3abd4:	ldr	r7, [sp, #60]	; 0x3c
   3abd8:	mov	r9, r4
   3abdc:	ldr	pc, [r0, r6, lsl #2]
   3abe0:	strdeq	sl, [r3], -r0
   3abe4:			; <UNDEFINED> instruction: 0x0003acbc
   3abe8:	andeq	sl, r3, r8, lsl ip
   3abec:	andeq	sl, r3, ip, ror #25
   3abf0:	ldrb	r0, [fp, #-36]	; 0xffffffdc
   3abf4:	mov	r3, #1
   3abf8:	ubfx	r1, r0, #5, #3
   3abfc:	and	r0, r0, #31
   3ac00:	ldr	r5, [sp, #28]
   3ac04:	ldr	lr, [sp, #44]	; 0x2c
   3ac08:	ldr	r2, [r8, r1, lsl #2]
   3ac0c:	orr	r0, r2, r3, lsl r0
   3ac10:	str	r0, [r8, r1, lsl #2]
   3ac14:	b	3ac60 <__assert_fail@plt+0x281b0>
   3ac18:	ldr	r7, [fp, #-36]	; 0xffffffdc
   3ac1c:	mov	r0, r7
   3ac20:	bl	127bc <strlen@plt>
   3ac24:	cmp	r0, #1
   3ac28:	bne	3c4fc <__assert_fail@plt+0x29a4c>
   3ac2c:	ldrb	r0, [r7]
   3ac30:	mov	r3, #1
   3ac34:	ubfx	r1, r0, #5, #3
   3ac38:	and	r0, r0, #31
   3ac3c:	ldr	r2, [r8, r1, lsl #2]
   3ac40:	orr	r0, r2, r3, lsl r0
   3ac44:	str	r0, [r8, r1, lsl #2]
   3ac48:	mov	r1, #0
   3ac4c:	ldr	r0, [sp, #20]
   3ac50:	ldr	r5, [sp, #28]
   3ac54:	ldr	lr, [sp, #44]	; 0x2c
   3ac58:	ldr	r7, [sp, #60]	; 0x3c
   3ac5c:	str	r1, [r0]
   3ac60:	ldrb	r0, [lr, #4]
   3ac64:	cmp	r0, #21
   3ac68:	beq	3aee8 <__assert_fail@plt+0x28438>
   3ac6c:	cmp	r0, #2
   3ac70:	ldr	r0, [sp, #48]	; 0x30
   3ac74:	beq	3c394 <__assert_fail@plt+0x298e4>
   3ac78:	sub	r1, fp, #80	; 0x50
   3ac7c:	mov	r2, lr
   3ac80:	mov	r3, r9
   3ac84:	mov	r4, lr
   3ac88:	str	r1, [fp, #-36]	; 0xffffffdc
   3ac8c:	mov	r1, #3
   3ac90:	str	r1, [fp, #-40]	; 0xffffffd8
   3ac94:	str	r0, [sp]
   3ac98:	mov	r0, #0
   3ac9c:	mov	r1, r5
   3aca0:	str	r0, [sp, #4]
   3aca4:	sub	r0, fp, #40	; 0x28
   3aca8:	bl	3cd74 <__assert_fail@plt+0x2a2c4>
   3acac:	ldr	r2, [sp, #48]	; 0x30
   3acb0:	cmp	r0, #0
   3acb4:	beq	3aa20 <__assert_fail@plt+0x27f70>
   3acb8:	b	3c388 <__assert_fail@plt+0x298d8>
   3acbc:	ldr	r1, [r7, #20]
   3acc0:	ldr	r0, [sp, #36]	; 0x24
   3acc4:	cmp	r0, r1
   3acc8:	beq	3ae4c <__assert_fail@plt+0x2839c>
   3accc:	ldr	r0, [r7]
   3acd0:	ldr	r5, [sp, #28]
   3acd4:	ldr	lr, [sp, #44]	; 0x2c
   3acd8:	ldr	r3, [fp, #-36]	; 0xffffffdc
   3acdc:	add	r2, r1, #1
   3ace0:	str	r2, [r7, #20]
   3ace4:	str	r3, [r0, r1, lsl #2]
   3ace8:	b	3ac60 <__assert_fail@plt+0x281b0>
   3acec:	ldr	r7, [fp, #-36]	; 0xffffffdc
   3acf0:	mov	r0, r7
   3acf4:	bl	127bc <strlen@plt>
   3acf8:	cmp	r0, #1
   3acfc:	beq	3ac2c <__assert_fail@plt+0x2817c>
   3ad00:	b	3c500 <__assert_fail@plt+0x29a50>
   3ad04:	ldr	r0, [fp, #-36]	; 0xffffffdc
   3ad08:	ldrb	r7, [r0]
   3ad0c:	cmp	r8, #3
   3ad10:	bne	3aba4 <__assert_fail@plt+0x280f4>
   3ad14:	ldr	r0, [fp, #-44]	; 0xffffffd4
   3ad18:	ldrb	sl, [r0]
   3ad1c:	cmp	r6, #3
   3ad20:	cmpne	r6, #0
   3ad24:	bne	3ad4c <__assert_fail@plt+0x2829c>
   3ad28:	ldr	r0, [sp, #52]	; 0x34
   3ad2c:	ldr	r0, [r0, #92]	; 0x5c
   3ad30:	cmp	r0, #2
   3ad34:	blt	3ad50 <__assert_fail@plt+0x282a0>
   3ad38:	mov	r0, r7
   3ad3c:	bl	12864 <btowc@plt>
   3ad40:	ldr	lr, [sp, #44]	; 0x2c
   3ad44:	mov	r7, r0
   3ad48:	b	3ad50 <__assert_fail@plt+0x282a0>
   3ad4c:	ldr	r7, [fp, #-36]	; 0xffffffdc
   3ad50:	cmp	r8, #3
   3ad54:	cmpne	r8, #0
   3ad58:	bne	3ad80 <__assert_fail@plt+0x282d0>
   3ad5c:	ldr	r0, [sp, #52]	; 0x34
   3ad60:	ldr	r0, [r0, #92]	; 0x5c
   3ad64:	cmp	r0, #2
   3ad68:	blt	3ad84 <__assert_fail@plt+0x282d4>
   3ad6c:	mov	r0, sl
   3ad70:	bl	12864 <btowc@plt>
   3ad74:	ldr	lr, [sp, #44]	; 0x2c
   3ad78:	mov	sl, r0
   3ad7c:	b	3ad84 <__assert_fail@plt+0x282d4>
   3ad80:	ldr	sl, [fp, #-44]	; 0xffffffd4
   3ad84:	ldr	r8, [sp, #24]
   3ad88:	cmn	r7, #1
   3ad8c:	mov	r9, #3
   3ad90:	cmnne	sl, #1
   3ad94:	beq	3c2fc <__assert_fail@plt+0x2984c>
   3ad98:	ldr	r0, [sp, #40]	; 0x28
   3ad9c:	cmp	r0, #0
   3ada0:	beq	3adb0 <__assert_fail@plt+0x28300>
   3ada4:	cmp	r7, sl
   3ada8:	mov	r9, #11
   3adac:	bhi	3c2fc <__assert_fail@plt+0x2984c>
   3adb0:	ldr	r0, [sp, #52]	; 0x34
   3adb4:	ldr	r0, [r0, #92]	; 0x5c
   3adb8:	cmp	r0, #2
   3adbc:	blt	3adf4 <__assert_fail@plt+0x28344>
   3adc0:	ldr	r4, [sp, #60]	; 0x3c
   3adc4:	ldr	r1, [sp, #32]
   3adc8:	ldr	r5, [sp, #28]
   3adcc:	ldr	r0, [r4, #32]
   3add0:	cmp	r1, r0
   3add4:	beq	3ae8c <__assert_fail@plt+0x283dc>
   3add8:	ldmib	r4, {r6, r9}
   3addc:	str	r7, [r6, r0, lsl #2]
   3ade0:	ldr	r0, [r4, #32]
   3ade4:	add	r1, r0, #1
   3ade8:	str	r1, [r4, #32]
   3adec:	str	sl, [r9, r0, lsl #2]
   3adf0:	b	3adf8 <__assert_fail@plt+0x28348>
   3adf4:	ldr	r5, [sp, #28]
   3adf8:	ldr	r9, [sp, #16]
   3adfc:	mov	r0, #0
   3ae00:	b	3ae10 <__assert_fail@plt+0x28360>
   3ae04:	add	r0, r0, #1
   3ae08:	cmp	r0, #256	; 0x100
   3ae0c:	beq	3ae38 <__assert_fail@plt+0x28388>
   3ae10:	cmp	r7, r0
   3ae14:	cmpls	r0, sl
   3ae18:	bhi	3ae04 <__assert_fail@plt+0x28354>
   3ae1c:	ubfx	r1, r0, #5, #3
   3ae20:	and	r3, r0, #31
   3ae24:	mov	r4, #1
   3ae28:	ldr	r2, [r8, r1, lsl #2]
   3ae2c:	orr	r2, r2, r4, lsl r3
   3ae30:	str	r2, [r8, r1, lsl #2]
   3ae34:	b	3ae04 <__assert_fail@plt+0x28354>
   3ae38:	ldr	r0, [sp, #20]
   3ae3c:	ldr	sl, [sp, #52]	; 0x34
   3ae40:	ldr	r7, [sp, #60]	; 0x3c
   3ae44:	mov	r1, #0
   3ae48:	b	3ac5c <__assert_fail@plt+0x281ac>
   3ae4c:	ldr	r1, [sp, #36]	; 0x24
   3ae50:	mov	r0, #1
   3ae54:	orr	r1, r0, r1, lsl #1
   3ae58:	ldr	r0, [r7]
   3ae5c:	str	r1, [sp, #36]	; 0x24
   3ae60:	lsl	r1, r1, #2
   3ae64:	bl	33500 <__assert_fail@plt+0x20a50>
   3ae68:	cmp	r0, #0
   3ae6c:	beq	3c80c <__assert_fail@plt+0x29d5c>
   3ae70:	ldr	r7, [sp, #60]	; 0x3c
   3ae74:	ldr	r5, [sp, #28]
   3ae78:	ldr	lr, [sp, #44]	; 0x2c
   3ae7c:	mov	r9, r4
   3ae80:	str	r0, [r7]
   3ae84:	ldr	r1, [r7, #20]
   3ae88:	b	3acd8 <__assert_fail@plt+0x28228>
   3ae8c:	ldr	r1, [sp, #32]
   3ae90:	mov	r0, #1
   3ae94:	orr	r1, r0, r1, lsl #1
   3ae98:	ldr	r0, [r4, #4]
   3ae9c:	lsl	r9, r1, #2
   3aea0:	str	r1, [sp, #32]
   3aea4:	mov	r1, r9
   3aea8:	bl	33500 <__assert_fail@plt+0x20a50>
   3aeac:	mov	r6, r0
   3aeb0:	ldr	r0, [r4, #8]
   3aeb4:	mov	r1, r9
   3aeb8:	bl	33500 <__assert_fail@plt+0x20a50>
   3aebc:	mov	r9, r0
   3aec0:	cmp	r6, #0
   3aec4:	cmpne	r9, #0
   3aec8:	beq	3c824 <__assert_fail@plt+0x29d74>
   3aecc:	ldr	r4, [sp, #60]	; 0x3c
   3aed0:	stmib	r4, {r6, r9}
   3aed4:	ldr	r0, [r4, #32]
   3aed8:	ldr	r5, [sp, #28]
   3aedc:	ldr	lr, [sp, #44]	; 0x2c
   3aee0:	ldr	r8, [sp, #24]
   3aee4:	b	3addc <__assert_fail@plt+0x2832c>
   3aee8:	ldr	r0, [r5, #40]	; 0x28
   3aeec:	ldr	ip, [sp, #48]	; 0x30
   3aef0:	add	r0, r0, r9
   3aef4:	str	r0, [r5, #40]	; 0x28
   3aef8:	ldr	r0, [sp, #56]	; 0x38
   3aefc:	cmp	r0, #0
   3af00:	beq	3af20 <__assert_fail@plt+0x28470>
   3af04:	vld1.32	{d16-d17}, [r8]
   3af08:	mov	r0, r8
   3af0c:	vmvn	q8, q8
   3af10:	vst1.32	{d16-d17}, [r0]!
   3af14:	vld1.32	{d16-d17}, [r0]
   3af18:	vmvn	q8, q8
   3af1c:	vst1.32	{d16-d17}, [r0]
   3af20:	ldr	r0, [sl, #92]	; 0x5c
   3af24:	cmp	r0, #2
   3af28:	blt	3afac <__assert_fail@plt+0x284fc>
   3af2c:	ldr	r6, [sl, #60]	; 0x3c
   3af30:	ldm	r8, {r1, r2, r3, r7}
   3af34:	ldr	r5, [r6]
   3af38:	and	r1, r1, r5
   3af3c:	ldr	r5, [sp, #28]
   3af40:	str	r1, [r8]
   3af44:	ldr	r1, [r6, #4]
   3af48:	and	r1, r2, r1
   3af4c:	str	r1, [r8, #4]
   3af50:	ldr	r1, [r6, #8]
   3af54:	and	r1, r3, r1
   3af58:	str	r1, [r8, #8]
   3af5c:	ldr	r1, [r6, #12]
   3af60:	and	r1, r7, r1
   3af64:	ldr	r7, [sp, #60]	; 0x3c
   3af68:	str	r1, [r8, #12]
   3af6c:	ldr	r1, [r8, #16]
   3af70:	ldr	r2, [r6, #16]
   3af74:	and	r1, r1, r2
   3af78:	str	r1, [r8, #16]
   3af7c:	ldr	r1, [r6, #20]
   3af80:	ldr	r2, [r8, #20]
   3af84:	and	r1, r2, r1
   3af88:	str	r1, [r8, #20]
   3af8c:	ldr	r1, [r6, #24]
   3af90:	ldr	r2, [r8, #24]
   3af94:	and	r1, r2, r1
   3af98:	str	r1, [r8, #24]
   3af9c:	ldr	r1, [r6, #28]
   3afa0:	ldr	r2, [r8, #28]
   3afa4:	and	r1, r2, r1
   3afa8:	str	r1, [r8, #28]
   3afac:	ldr	r1, [r7, #20]
   3afb0:	cmp	r1, #0
   3afb4:	bne	3afdc <__assert_fail@plt+0x2852c>
   3afb8:	ldr	r1, [r7, #24]
   3afbc:	cmp	r1, #0
   3afc0:	bne	3afdc <__assert_fail@plt+0x2852c>
   3afc4:	ldr	r1, [r7, #28]
   3afc8:	cmp	r1, #0
   3afcc:	bne	3afdc <__assert_fail@plt+0x2852c>
   3afd0:	ldr	r1, [r7, #32]
   3afd4:	cmp	r1, #0
   3afd8:	beq	3c258 <__assert_fail@plt+0x297a8>
   3afdc:	ldrb	r0, [sl, #88]	; 0x58
   3afe0:	orr	r0, r0, #2
   3afe4:	strb	r0, [sl, #88]	; 0x58
   3afe8:	ldr	r1, [sl, #64]	; 0x40
   3afec:	cmp	r1, #31
   3aff0:	beq	3c46c <__assert_fail@plt+0x299bc>
   3aff4:	ldr	r0, [sl, #56]	; 0x38
   3aff8:	add	r0, r0, r1, lsl #5
   3affc:	add	r2, r1, #1
   3b000:	vmov.i32	q8, #0	; 0x00000000
   3b004:	mov	r1, #6
   3b008:	str	r2, [sl, #64]	; 0x40
   3b00c:	mov	r2, #0
   3b010:	add	r4, r0, #4
   3b014:	str	r2, [r0, #20]
   3b018:	str	r7, [r0, #24]
   3b01c:	str	r1, [r0, #28]
   3b020:	mov	r0, #28
   3b024:	mov	r1, r4
   3b028:	vst1.32	{d16-d17}, [r1], r0
   3b02c:	mvn	r0, #0
   3b030:	str	r0, [r1]
   3b034:	ldr	r0, [r8]
   3b038:	cmp	r0, #0
   3b03c:	bne	3b094 <__assert_fail@plt+0x285e4>
   3b040:	ldr	r0, [r8, #4]
   3b044:	cmp	r0, #0
   3b048:	bne	3b094 <__assert_fail@plt+0x285e4>
   3b04c:	ldr	r0, [r8, #8]
   3b050:	cmp	r0, #0
   3b054:	bne	3b094 <__assert_fail@plt+0x285e4>
   3b058:	ldr	r0, [r8, #12]
   3b05c:	cmp	r0, #0
   3b060:	bne	3b094 <__assert_fail@plt+0x285e4>
   3b064:	ldr	r0, [r8, #16]
   3b068:	cmp	r0, #0
   3b06c:	bne	3b094 <__assert_fail@plt+0x285e4>
   3b070:	ldr	r0, [r8, #20]
   3b074:	cmp	r0, #0
   3b078:	bne	3b094 <__assert_fail@plt+0x285e4>
   3b07c:	ldr	r0, [r8, #24]
   3b080:	cmp	r0, #0
   3b084:	bne	3b094 <__assert_fail@plt+0x285e4>
   3b088:	ldr	r0, [r8, #28]
   3b08c:	cmp	r0, #0
   3b090:	beq	3c508 <__assert_fail@plt+0x29a58>
   3b094:	ldr	r1, [sl, #64]	; 0x40
   3b098:	cmp	r1, #31
   3b09c:	beq	3c49c <__assert_fail@plt+0x299ec>
   3b0a0:	ldr	r0, [sl, #56]	; 0x38
   3b0a4:	add	r0, r0, r1, lsl #5
   3b0a8:	add	r2, r1, #1
   3b0ac:	vmov.i32	q8, #0	; 0x00000000
   3b0b0:	mov	r1, #3
   3b0b4:	str	r2, [sl, #64]	; 0x40
   3b0b8:	mov	r2, #0
   3b0bc:	add	r6, r0, #4
   3b0c0:	str	r2, [r0, #20]
   3b0c4:	str	r8, [r0, #24]
   3b0c8:	str	r1, [r0, #28]
   3b0cc:	mov	r0, #28
   3b0d0:	mov	r1, r6
   3b0d4:	vst1.32	{d16-d17}, [r1], r0
   3b0d8:	mvn	r0, #0
   3b0dc:	str	r0, [r1]
   3b0e0:	ldr	r1, [sl, #64]	; 0x40
   3b0e4:	cmp	r1, #31
   3b0e8:	beq	3c4cc <__assert_fail@plt+0x29a1c>
   3b0ec:	ldr	r0, [sl, #56]	; 0x38
   3b0f0:	add	r7, r0, r1, lsl #5
   3b0f4:	add	r2, r1, #1
   3b0f8:	mov	r0, #0
   3b0fc:	mov	r1, #10
   3b100:	str	r2, [sl, #64]	; 0x40
   3b104:	mvn	r2, #0
   3b108:	str	r0, [r7, #4]!
   3b10c:	add	r3, r7, #20
   3b110:	str	r6, [r7, #4]
   3b114:	str	r4, [r7, #8]
   3b118:	str	r0, [r7, #12]
   3b11c:	str	r0, [r7, #16]
   3b120:	stm	r3, {r0, r1, r2}
   3b124:	str	r7, [r6]
   3b128:	str	r7, [r4]
   3b12c:	b	3b330 <__assert_fail@plt+0x28880>
   3b130:	mov	r0, #5
   3b134:	str	r0, [lr]
   3b138:	ldr	r1, [sl, #64]	; 0x40
   3b13c:	cmp	r1, #31
   3b140:	beq	3c5ec <__assert_fail@plt+0x29b3c>
   3b144:	ldr	r0, [sl, #56]	; 0x38
   3b148:	add	r4, r0, r1, lsl #5
   3b14c:	add	r2, r1, #1
   3b150:	mov	r0, #0
   3b154:	mvn	r3, #0
   3b158:	str	r2, [sl, #64]	; 0x40
   3b15c:	str	r0, [r4, #4]!
   3b160:	str	r0, [r4, #8]
   3b164:	str	r0, [r4, #4]
   3b168:	ldm	lr, {r1, r2}
   3b16c:	str	r3, [r4, #28]
   3b170:	str	r0, [r4, #16]
   3b174:	str	r0, [r4, #12]
   3b178:	bic	r0, r2, #786432	; 0xc0000
   3b17c:	str	r1, [r4, #20]
   3b180:	str	r0, [r4, #24]
   3b184:	mov	r0, #10
   3b188:	str	r0, [lr]
   3b18c:	ldr	r1, [sl, #64]	; 0x40
   3b190:	cmp	r1, #31
   3b194:	beq	3c554 <__assert_fail@plt+0x29aa4>
   3b198:	ldr	r0, [sl, #56]	; 0x38
   3b19c:	add	r5, r0, r1, lsl #5
   3b1a0:	add	r2, r1, #1
   3b1a4:	mov	r0, #0
   3b1a8:	mvn	r3, #0
   3b1ac:	str	r2, [sl, #64]	; 0x40
   3b1b0:	str	r0, [r5, #4]!
   3b1b4:	str	r0, [r5, #8]
   3b1b8:	str	r0, [r5, #4]
   3b1bc:	ldm	lr, {r1, r2}
   3b1c0:	str	r3, [r5, #28]
   3b1c4:	str	r0, [r5, #16]
   3b1c8:	str	r0, [r5, #12]
   3b1cc:	bic	r0, r2, #786432	; 0xc0000
   3b1d0:	str	r1, [r5, #20]
   3b1d4:	str	r0, [r5, #24]
   3b1d8:	ldr	r1, [sl, #64]	; 0x40
   3b1dc:	cmp	r1, #31
   3b1e0:	beq	3c588 <__assert_fail@plt+0x29ad8>
   3b1e4:	ldr	r0, [sl, #56]	; 0x38
   3b1e8:	add	r6, r0, r1, lsl #5
   3b1ec:	add	r2, r1, #1
   3b1f0:	mov	r0, #0
   3b1f4:	cmp	r4, #0
   3b1f8:	mov	r1, #10
   3b1fc:	str	r2, [sl, #64]	; 0x40
   3b200:	mvn	r2, #0
   3b204:	str	r0, [r6, #4]!
   3b208:	add	r3, r6, #20
   3b20c:	stmib	r6, {r4, r5}
   3b210:	str	r0, [r6, #12]
   3b214:	str	r0, [r6, #16]
   3b218:	stm	r3, {r0, r1, r2}
   3b21c:	strne	r6, [r4]
   3b220:	cmp	r5, #0
   3b224:	strne	r6, [r5]
   3b228:	cmpne	r4, #0
   3b22c:	bne	3b288 <__assert_fail@plt+0x287d8>
   3b230:	mov	r0, #12
   3b234:	ldr	r1, [sp, #20]
   3b238:	b	3c1a4 <__assert_fail@plt+0x296f4>
   3b23c:	ldr	r1, [sl, #64]	; 0x40
   3b240:	cmp	r1, #31
   3b244:	beq	3c620 <__assert_fail@plt+0x29b70>
   3b248:	ldr	r0, [sl, #56]	; 0x38
   3b24c:	add	r6, r0, r1, lsl #5
   3b250:	add	r2, r1, #1
   3b254:	mov	r0, #0
   3b258:	mvn	r3, #0
   3b25c:	str	r2, [sl, #64]	; 0x40
   3b260:	str	r0, [r6, #4]!
   3b264:	str	r0, [r6, #8]
   3b268:	str	r0, [r6, #4]
   3b26c:	ldm	lr, {r1, r2}
   3b270:	str	r3, [r6, #28]
   3b274:	str	r0, [r6, #16]
   3b278:	str	r0, [r6, #12]
   3b27c:	bic	r0, r2, #786432	; 0xc0000
   3b280:	str	r1, [r6, #20]
   3b284:	str	r0, [r6, #24]
   3b288:	ldr	r4, [sp, #28]
   3b28c:	mov	r0, lr
   3b290:	mov	r2, ip
   3b294:	mov	r1, r4
   3b298:	bl	39710 <__assert_fail@plt+0x26c60>
   3b29c:	ldr	r1, [r4, #40]	; 0x28
   3b2a0:	mov	r9, r6
   3b2a4:	add	r0, r1, r0
   3b2a8:	str	r0, [r4, #40]	; 0x28
   3b2ac:	b	3c1a8 <__assert_fail@plt+0x296f8>
   3b2b0:	ldrb	r0, [r7, #4]
   3b2b4:	cmp	r0, #9
   3b2b8:	bne	3c700 <__assert_fail@plt+0x29c50>
   3b2bc:	mov	lr, r7
   3b2c0:	cmp	r4, #8
   3b2c4:	bhi	3b2d8 <__assert_fail@plt+0x28828>
   3b2c8:	ldr	r0, [sl, #84]	; 0x54
   3b2cc:	mov	r1, #1
   3b2d0:	orr	r0, r0, r1, lsl r4
   3b2d4:	str	r0, [sl, #84]	; 0x54
   3b2d8:	ldr	r1, [sl, #64]	; 0x40
   3b2dc:	ldr	ip, [sp, #48]	; 0x30
   3b2e0:	cmp	r1, #31
   3b2e4:	beq	3c520 <__assert_fail@plt+0x29a70>
   3b2e8:	ldr	r0, [sl, #56]	; 0x38
   3b2ec:	add	r0, r0, r1, lsl #5
   3b2f0:	add	r2, r1, #1
   3b2f4:	mov	r1, #0
   3b2f8:	cmp	r9, #0
   3b2fc:	mvn	r3, #0
   3b300:	str	r2, [sl, #64]	; 0x40
   3b304:	mov	r2, #17
   3b308:	mov	r7, r0
   3b30c:	str	r1, [r7, #4]!
   3b310:	add	r6, r7, #20
   3b314:	str	r9, [r7, #4]
   3b318:	str	r1, [r7, #8]
   3b31c:	str	r1, [r7, #12]
   3b320:	str	r1, [r7, #16]
   3b324:	stm	r6, {r1, r2, r3}
   3b328:	strne	r7, [r9]
   3b32c:	str	r4, [r0, #24]
   3b330:	mov	r0, lr
   3b334:	mov	r1, r5
   3b338:	mov	r2, ip
   3b33c:	bl	39710 <__assert_fail@plt+0x26c60>
   3b340:	ldr	r1, [r5, #40]	; 0x28
   3b344:	ldr	ip, [sp, #48]	; 0x30
   3b348:	ldr	lr, [sp, #44]	; 0x2c
   3b34c:	mov	r4, #0
   3b350:	add	r0, r1, r0
   3b354:	str	r0, [r5, #40]	; 0x28
   3b358:	and	r0, ip, #16777216	; 0x1000000
   3b35c:	str	r0, [sp, #32]
   3b360:	and	r0, ip, #2097152	; 0x200000
   3b364:	str	r0, [sp, #16]
   3b368:	add	r0, sl, #56	; 0x38
   3b36c:	str	r0, [sp, #60]	; 0x3c
   3b370:	add	r0, sl, #64	; 0x40
   3b374:	str	r0, [sp, #24]
   3b378:	ldrb	r0, [lr, #4]
   3b37c:	mov	r9, r7
   3b380:	cmp	r0, #23
   3b384:	bhi	3c1a8 <__assert_fail@plt+0x296f8>
   3b388:	movw	r2, #2048	; 0x800
   3b38c:	mov	r1, #1
   3b390:	movt	r2, #140	; 0x8c
   3b394:	tst	r2, r1, lsl r0
   3b398:	beq	3c1a8 <__assert_fail@plt+0x296f8>
   3b39c:	cmp	r0, #23
   3b3a0:	str	r9, [sp, #40]	; 0x28
   3b3a4:	bne	3b454 <__assert_fail@plt+0x289a4>
   3b3a8:	ldr	r9, [r5, #40]	; 0x28
   3b3ac:	ldm	lr, {r7, sl}
   3b3b0:	mov	r6, r5
   3b3b4:	mvn	r2, #0
   3b3b8:	mov	r8, r2
   3b3bc:	mov	r0, lr
   3b3c0:	mov	r1, r6
   3b3c4:	mov	r2, ip
   3b3c8:	mov	r5, r6
   3b3cc:	bl	39710 <__assert_fail@plt+0x26c60>
   3b3d0:	ldr	r1, [r6, #40]	; 0x28
   3b3d4:	ldr	lr, [sp, #44]	; 0x2c
   3b3d8:	add	r0, r1, r0
   3b3dc:	str	r0, [r6, #40]	; 0x28
   3b3e0:	ldrb	r0, [lr, #4]
   3b3e4:	ldrb	r1, [lr]
   3b3e8:	cmp	r0, #24
   3b3ec:	beq	3b470 <__assert_fail@plt+0x289c0>
   3b3f0:	cmp	r0, #2
   3b3f4:	beq	3ba84 <__assert_fail@plt+0x28fd4>
   3b3f8:	cmp	r1, #44	; 0x2c
   3b3fc:	beq	3b470 <__assert_fail@plt+0x289c0>
   3b400:	ldr	ip, [sp, #48]	; 0x30
   3b404:	mvn	r2, #1
   3b408:	cmp	r1, #48	; 0x30
   3b40c:	bcc	3b3b8 <__assert_fail@plt+0x28908>
   3b410:	cmp	r0, #1
   3b414:	bne	3b3b8 <__assert_fail@plt+0x28908>
   3b418:	cmn	r8, #2
   3b41c:	beq	3b3b8 <__assert_fail@plt+0x28908>
   3b420:	cmp	r1, #57	; 0x39
   3b424:	bhi	3b3b8 <__assert_fail@plt+0x28908>
   3b428:	cmn	r8, #1
   3b42c:	beq	3b44c <__assert_fail@plt+0x2899c>
   3b430:	add	r0, r8, r8, lsl #2
   3b434:	add	r0, r1, r0, lsl #1
   3b438:	movw	r1, #32816	; 0x8030
   3b43c:	cmp	r0, r1
   3b440:	movge	r0, r1
   3b444:	sub	r2, r0, #48	; 0x30
   3b448:	b	3b3b8 <__assert_fail@plt+0x28908>
   3b44c:	sub	r2, r1, #48	; 0x30
   3b450:	b	3b3b8 <__assert_fail@plt+0x28908>
   3b454:	cmp	r0, #19
   3b458:	sub	r0, r0, #18
   3b45c:	mvn	sl, #0
   3b460:	clz	r0, r0
   3b464:	movweq	sl, #1
   3b468:	lsr	r8, r0, #5
   3b46c:	b	3b604 <__assert_fail@plt+0x28b54>
   3b470:	cmn	r8, #1
   3b474:	bne	3b4a8 <__assert_fail@plt+0x289f8>
   3b478:	ldr	ip, [sp, #48]	; 0x30
   3b47c:	cmp	r1, #44	; 0x2c
   3b480:	moveq	r8, #0
   3b484:	cmpeq	r0, #1
   3b488:	beq	3b4f4 <__assert_fail@plt+0x28a44>
   3b48c:	ldr	r0, [sp, #20]
   3b490:	mov	r1, #10
   3b494:	str	r1, [r0]
   3b498:	ldr	r9, [sp, #40]	; 0x28
   3b49c:	mov	r7, #0
   3b4a0:	mov	r5, r6
   3b4a4:	b	3c0b8 <__assert_fail@plt+0x29608>
   3b4a8:	ldr	ip, [sp, #48]	; 0x30
   3b4ac:	cmn	r8, #2
   3b4b0:	beq	3b4c8 <__assert_fail@plt+0x28a18>
   3b4b4:	cmp	r0, #24
   3b4b8:	beq	3b5b0 <__assert_fail@plt+0x28b00>
   3b4bc:	cmp	r0, #1
   3b4c0:	cmpeq	r1, #44	; 0x2c
   3b4c4:	beq	3b4f4 <__assert_fail@plt+0x28a44>
   3b4c8:	ldr	r1, [sp, #16]
   3b4cc:	cmp	r1, #0
   3b4d0:	beq	3c014 <__assert_fail@plt+0x29564>
   3b4d4:	mov	r0, #1
   3b4d8:	str	r9, [r6, #40]	; 0x28
   3b4dc:	mov	r5, r6
   3b4e0:	bfi	sl, r0, #0, #8
   3b4e4:	stm	lr, {r7, sl}
   3b4e8:	ldr	r9, [sp, #40]	; 0x28
   3b4ec:	mov	r7, r9
   3b4f0:	b	3c0b8 <__assert_fail@plt+0x29608>
   3b4f4:	mvn	r2, #0
   3b4f8:	str	r9, [sp, #56]	; 0x38
   3b4fc:	mov	r9, r2
   3b500:	mov	r0, lr
   3b504:	mov	r1, r6
   3b508:	mov	r2, ip
   3b50c:	mov	r5, r6
   3b510:	bl	39710 <__assert_fail@plt+0x26c60>
   3b514:	ldr	r1, [r6, #40]	; 0x28
   3b518:	ldr	lr, [sp, #44]	; 0x2c
   3b51c:	add	r0, r1, r0
   3b520:	str	r0, [r6, #40]	; 0x28
   3b524:	ldrb	r0, [lr, #4]
   3b528:	cmp	r0, #24
   3b52c:	beq	3b598 <__assert_fail@plt+0x28ae8>
   3b530:	cmp	r0, #2
   3b534:	beq	3be88 <__assert_fail@plt+0x293d8>
   3b538:	ldrb	r1, [lr]
   3b53c:	ldr	ip, [sp, #48]	; 0x30
   3b540:	cmp	r1, #44	; 0x2c
   3b544:	beq	3b59c <__assert_fail@plt+0x28aec>
   3b548:	mvn	r2, #1
   3b54c:	cmp	r1, #48	; 0x30
   3b550:	bcc	3b4fc <__assert_fail@plt+0x28a4c>
   3b554:	cmp	r0, #1
   3b558:	bne	3b4fc <__assert_fail@plt+0x28a4c>
   3b55c:	cmn	r9, #2
   3b560:	beq	3b4fc <__assert_fail@plt+0x28a4c>
   3b564:	cmp	r1, #57	; 0x39
   3b568:	bhi	3b4fc <__assert_fail@plt+0x28a4c>
   3b56c:	cmn	r9, #1
   3b570:	beq	3b590 <__assert_fail@plt+0x28ae0>
   3b574:	add	r0, r9, r9, lsl #2
   3b578:	add	r0, r1, r0, lsl #1
   3b57c:	movw	r1, #32816	; 0x8030
   3b580:	cmp	r0, r1
   3b584:	movge	r0, r1
   3b588:	sub	r2, r0, #48	; 0x30
   3b58c:	b	3b4fc <__assert_fail@plt+0x28a4c>
   3b590:	sub	r2, r1, #48	; 0x30
   3b594:	b	3b4fc <__assert_fail@plt+0x28a4c>
   3b598:	ldr	ip, [sp, #48]	; 0x30
   3b59c:	mov	r2, r9
   3b5a0:	ldr	r9, [sp, #56]	; 0x38
   3b5a4:	cmn	r2, #2
   3b5a8:	bne	3b5bc <__assert_fail@plt+0x28b0c>
   3b5ac:	b	3b4c8 <__assert_fail@plt+0x28a18>
   3b5b0:	mov	r2, r8
   3b5b4:	cmn	r2, #2
   3b5b8:	beq	3b4c8 <__assert_fail@plt+0x28a18>
   3b5bc:	ldr	r9, [sp, #40]	; 0x28
   3b5c0:	cmp	r8, r2
   3b5c4:	mov	r1, #0
   3b5c8:	mov	r5, r6
   3b5cc:	movwle	r1, #1
   3b5d0:	cmp	r0, #24
   3b5d4:	bne	3be48 <__assert_fail@plt+0x29398>
   3b5d8:	add	r0, r2, #1
   3b5dc:	mov	sl, r2
   3b5e0:	clz	r0, r0
   3b5e4:	lsr	r0, r0, #5
   3b5e8:	orrs	r0, r1, r0
   3b5ec:	beq	3be48 <__assert_fail@plt+0x29398>
   3b5f0:	cmn	sl, #1
   3b5f4:	mov	r0, sl
   3b5f8:	moveq	r0, r8
   3b5fc:	cmp	r0, #32768	; 0x8000
   3b600:	bge	3c000 <__assert_fail@plt+0x29550>
   3b604:	mov	r0, lr
   3b608:	mov	r1, r5
   3b60c:	mov	r2, ip
   3b610:	bl	39710 <__assert_fail@plt+0x26c60>
   3b614:	ldr	r1, [r5, #40]	; 0x28
   3b618:	mov	r7, #0
   3b61c:	cmp	r9, #0
   3b620:	add	r0, r1, r0
   3b624:	str	r0, [r5, #40]	; 0x28
   3b628:	beq	3ba8c <__assert_fail@plt+0x28fdc>
   3b62c:	ldr	ip, [sp, #48]	; 0x30
   3b630:	orrs	r0, sl, r8
   3b634:	beq	3ba98 <__assert_fail@plt+0x28fe8>
   3b638:	mov	r0, #0
   3b63c:	cmp	r8, #1
   3b640:	mov	r7, r9
   3b644:	str	r0, [sp, #36]	; 0x24
   3b648:	ldr	lr, [sp, #44]	; 0x2c
   3b64c:	ldr	r5, [sp, #24]
   3b650:	bge	3bb4c <__assert_fail@plt+0x2909c>
   3b654:	ldrb	r0, [r7, #24]
   3b658:	cmp	r0, #17
   3b65c:	bne	3b6d0 <__assert_fail@plt+0x28c20>
   3b660:	ldr	r0, [r7, #20]
   3b664:	mov	r2, r7
   3b668:	mov	r1, r2
   3b66c:	ldr	r2, [r2, #4]
   3b670:	cmp	r2, #0
   3b674:	bne	3b668 <__assert_fail@plt+0x28bb8>
   3b678:	ldr	r2, [r1, #8]
   3b67c:	cmp	r2, #0
   3b680:	bne	3b668 <__assert_fail@plt+0x28bb8>
   3b684:	ldr	r2, [r1, #24]
   3b688:	uxtb	r3, r2
   3b68c:	cmp	r3, #17
   3b690:	bne	3b6a4 <__assert_fail@plt+0x28bf4>
   3b694:	ldr	r3, [r1, #20]
   3b698:	cmp	r3, r0
   3b69c:	orreq	r2, r2, #524288	; 0x80000
   3b6a0:	streq	r2, [r1, #24]
   3b6a4:	ldr	r3, [r1]
   3b6a8:	cmp	r3, #0
   3b6ac:	beq	3b6d0 <__assert_fail@plt+0x28c20>
   3b6b0:	ldr	r2, [r3, #8]
   3b6b4:	cmp	r2, r1
   3b6b8:	mov	r1, r3
   3b6bc:	beq	3b684 <__assert_fail@plt+0x28bd4>
   3b6c0:	cmp	r2, #0
   3b6c4:	mov	r1, r3
   3b6c8:	beq	3b684 <__assert_fail@plt+0x28bd4>
   3b6cc:	b	3b668 <__assert_fail@plt+0x28bb8>
   3b6d0:	ldr	r1, [r5]
   3b6d4:	cmn	sl, #1
   3b6d8:	mov	r6, #10
   3b6dc:	movweq	r6, #11
   3b6e0:	cmp	r1, #31
   3b6e4:	beq	3bdf8 <__assert_fail@plt+0x29348>
   3b6e8:	ldr	r0, [sp, #60]	; 0x3c
   3b6ec:	ldr	r0, [r0]
   3b6f0:	add	r9, r0, r1, lsl #5
   3b6f4:	add	r2, r1, #1
   3b6f8:	mvn	r0, #0
   3b6fc:	str	r2, [r5]
   3b700:	str	r4, [r9, #4]!
   3b704:	str	r7, [r9, #4]
   3b708:	str	r4, [r9, #8]
   3b70c:	str	r4, [r9, #12]
   3b710:	str	r4, [r9, #16]
   3b714:	str	r4, [r9, #20]
   3b718:	str	r6, [r9, #24]
   3b71c:	str	r0, [r9, #28]
   3b720:	add	r0, r8, #2
   3b724:	str	r9, [r7]
   3b728:	cmp	r0, sl
   3b72c:	bgt	3ba10 <__assert_fail@plt+0x28f60>
   3b730:	str	sl, [sp, #52]	; 0x34
   3b734:	mov	sl, r9
   3b738:	ldr	r1, [r5]
   3b73c:	str	r0, [sp, #56]	; 0x38
   3b740:	cmp	r1, #31
   3b744:	beq	3b950 <__assert_fail@plt+0x28ea0>
   3b748:	ldr	r0, [sp, #60]	; 0x3c
   3b74c:	ldr	r0, [r0]
   3b750:	add	r8, r0, r1, lsl #5
   3b754:	add	r3, r1, #1
   3b758:	add	r2, r7, #20
   3b75c:	sub	r6, fp, #80	; 0x50
   3b760:	str	r3, [r5]
   3b764:	str	r4, [r8, #4]!
   3b768:	str	r4, [r8, #8]
   3b76c:	str	r4, [r8, #4]
   3b770:	ldm	r2, {r0, r1}
   3b774:	mvn	r2, #0
   3b778:	str	r2, [r8, #28]
   3b77c:	str	r4, [r8, #16]
   3b780:	str	r4, [r8, #12]
   3b784:	str	r0, [r8, #20]
   3b788:	bic	r0, r1, #786432	; 0xc0000
   3b78c:	str	r0, [r8, #24]
   3b790:	mov	r0, r8
   3b794:	str	r8, [fp, #-80]	; 0xffffffb0
   3b798:	str	r9, [r0]
   3b79c:	ldr	r0, [r6]
   3b7a0:	ldr	r1, [r0, #24]
   3b7a4:	orr	r1, r1, #262144	; 0x40000
   3b7a8:	str	r1, [r0, #24]
   3b7ac:	ldr	r0, [r7, #4]
   3b7b0:	ldr	r9, [r6]
   3b7b4:	cmp	r0, #0
   3b7b8:	beq	3b7c8 <__assert_fail@plt+0x28d18>
   3b7bc:	add	r6, r9, #4
   3b7c0:	mov	r7, r0
   3b7c4:	b	3b7fc <__assert_fail@plt+0x28d4c>
   3b7c8:	mov	r1, #0
   3b7cc:	mov	r0, r7
   3b7d0:	ldr	r7, [r7, #8]
   3b7d4:	cmp	r7, r1
   3b7d8:	cmpne	r7, #0
   3b7dc:	bne	3b7f8 <__assert_fail@plt+0x28d48>
   3b7e0:	ldr	r7, [r0]
   3b7e4:	ldr	r9, [r9]
   3b7e8:	mov	r1, r0
   3b7ec:	cmp	r7, #0
   3b7f0:	bne	3b7cc <__assert_fail@plt+0x28d1c>
   3b7f4:	b	3b888 <__assert_fail@plt+0x28dd8>
   3b7f8:	add	r6, r9, #8
   3b7fc:	ldr	r1, [r5]
   3b800:	cmp	r1, #31
   3b804:	beq	3b854 <__assert_fail@plt+0x28da4>
   3b808:	ldr	r0, [sp, #60]	; 0x3c
   3b80c:	ldr	r0, [r0]
   3b810:	add	r0, r0, r1, lsl #5
   3b814:	add	r3, r1, #1
   3b818:	add	r2, r7, #20
   3b81c:	str	r3, [r5]
   3b820:	mvn	r3, #0
   3b824:	str	r4, [r0, #4]!
   3b828:	str	r4, [r0, #8]
   3b82c:	str	r4, [r0, #4]
   3b830:	ldm	r2, {r1, r2}
   3b834:	str	r3, [r0, #28]
   3b838:	str	r4, [r0, #16]
   3b83c:	str	r4, [r0, #12]
   3b840:	str	r1, [r0, #20]
   3b844:	bic	r1, r2, #786432	; 0xc0000
   3b848:	str	r1, [r0, #24]
   3b84c:	str	r0, [r6]
   3b850:	b	3b798 <__assert_fail@plt+0x28ce8>
   3b854:	mov	r0, #996	; 0x3e4
   3b858:	bl	327ac <__assert_fail@plt+0x1fcfc>
   3b85c:	cmp	r0, #0
   3b860:	beq	3b9f8 <__assert_fail@plt+0x28f48>
   3b864:	ldr	r2, [sp, #60]	; 0x3c
   3b868:	ldr	ip, [sp, #48]	; 0x30
   3b86c:	ldr	lr, [sp, #44]	; 0x2c
   3b870:	ldr	r1, [r2]
   3b874:	str	r1, [r0]
   3b878:	mov	r1, #0
   3b87c:	str	r0, [r2]
   3b880:	str	r1, [r5]
   3b884:	b	3b810 <__assert_fail@plt+0x28d60>
   3b888:	mov	r7, r8
   3b88c:	ldr	r1, [r5]
   3b890:	cmp	r1, #31
   3b894:	beq	3b984 <__assert_fail@plt+0x28ed4>
   3b898:	ldr	r0, [sp, #60]	; 0x3c
   3b89c:	ldr	r0, [r0]
   3b8a0:	add	r6, r0, r1, lsl #5
   3b8a4:	add	r2, r1, #1
   3b8a8:	mov	r0, #16
   3b8ac:	cmp	r7, #0
   3b8b0:	str	r2, [r5]
   3b8b4:	str	r4, [r6, #4]!
   3b8b8:	str	sl, [r6, #4]
   3b8bc:	str	r7, [r6, #8]
   3b8c0:	str	r4, [r6, #12]
   3b8c4:	str	r4, [r6, #16]
   3b8c8:	str	r4, [r6, #20]
   3b8cc:	str	r0, [r6, #24]
   3b8d0:	mvn	r0, #0
   3b8d4:	str	r0, [r6, #28]
   3b8d8:	str	r6, [sl]
   3b8dc:	beq	3c0a0 <__assert_fail@plt+0x295f0>
   3b8e0:	str	r6, [r7]
   3b8e4:	ldr	r1, [r5]
   3b8e8:	cmp	r1, #31
   3b8ec:	beq	3b9b8 <__assert_fail@plt+0x28f08>
   3b8f0:	ldr	r0, [sp, #60]	; 0x3c
   3b8f4:	ldr	r0, [r0]
   3b8f8:	add	sl, r0, r1, lsl #5
   3b8fc:	add	r2, r1, #1
   3b900:	mov	r0, #10
   3b904:	ldr	r1, [sp, #56]	; 0x38
   3b908:	str	r2, [r5]
   3b90c:	str	r4, [sl, #4]!
   3b910:	str	r6, [sl, #4]
   3b914:	str	r4, [sl, #8]
   3b918:	str	r4, [sl, #12]
   3b91c:	str	r4, [sl, #16]
   3b920:	str	r4, [sl, #20]
   3b924:	str	r0, [sl, #24]
   3b928:	mvn	r0, #0
   3b92c:	str	r0, [sl, #28]
   3b930:	ldr	r0, [sp, #52]	; 0x34
   3b934:	str	sl, [r6]
   3b938:	cmp	r1, r0
   3b93c:	bge	3ba0c <__assert_fail@plt+0x28f5c>
   3b940:	ldr	r9, [r7]
   3b944:	mov	r0, r1
   3b948:	add	r0, r1, #1
   3b94c:	b	3b738 <__assert_fail@plt+0x28c88>
   3b950:	mov	r0, #996	; 0x3e4
   3b954:	bl	327ac <__assert_fail@plt+0x1fcfc>
   3b958:	cmp	r0, #0
   3b95c:	beq	3b9ec <__assert_fail@plt+0x28f3c>
   3b960:	ldr	r2, [sp, #60]	; 0x3c
   3b964:	ldr	ip, [sp, #48]	; 0x30
   3b968:	ldr	lr, [sp, #44]	; 0x2c
   3b96c:	ldr	r1, [r2]
   3b970:	str	r1, [r0]
   3b974:	mov	r1, #0
   3b978:	str	r0, [r2]
   3b97c:	str	r1, [r5]
   3b980:	b	3b750 <__assert_fail@plt+0x28ca0>
   3b984:	mov	r0, #996	; 0x3e4
   3b988:	bl	327ac <__assert_fail@plt+0x1fcfc>
   3b98c:	ldr	lr, [sp, #44]	; 0x2c
   3b990:	ldr	ip, [sp, #48]	; 0x30
   3b994:	cmp	r0, #0
   3b998:	beq	3c0a0 <__assert_fail@plt+0x295f0>
   3b99c:	ldr	r2, [sp, #60]	; 0x3c
   3b9a0:	ldr	r1, [r2]
   3b9a4:	str	r1, [r0]
   3b9a8:	mov	r1, #0
   3b9ac:	str	r0, [r2]
   3b9b0:	str	r1, [r5]
   3b9b4:	b	3b8a0 <__assert_fail@plt+0x28df0>
   3b9b8:	mov	r0, #996	; 0x3e4
   3b9bc:	bl	327ac <__assert_fail@plt+0x1fcfc>
   3b9c0:	ldr	lr, [sp, #44]	; 0x2c
   3b9c4:	ldr	ip, [sp, #48]	; 0x30
   3b9c8:	cmp	r0, #0
   3b9cc:	beq	3c0a0 <__assert_fail@plt+0x295f0>
   3b9d0:	ldr	r2, [sp, #60]	; 0x3c
   3b9d4:	ldr	r1, [r2]
   3b9d8:	str	r1, [r0]
   3b9dc:	mov	r1, #0
   3b9e0:	str	r0, [r2]
   3b9e4:	str	r1, [r5]
   3b9e8:	b	3b8f8 <__assert_fail@plt+0x28e48>
   3b9ec:	mov	r7, #0
   3b9f0:	str	r7, [fp, #-80]	; 0xffffffb0
   3b9f4:	b	3ba00 <__assert_fail@plt+0x28f50>
   3b9f8:	mov	r7, #0
   3b9fc:	str	r7, [r6]
   3ba00:	ldr	ip, [sp, #48]	; 0x30
   3ba04:	ldr	lr, [sp, #44]	; 0x2c
   3ba08:	b	3b88c <__assert_fail@plt+0x28ddc>
   3ba0c:	mov	r9, sl
   3ba10:	ldr	r6, [sp, #36]	; 0x24
   3ba14:	ldr	r8, [sp, #28]
   3ba18:	cmp	r6, #0
   3ba1c:	beq	3ba74 <__assert_fail@plt+0x28fc4>
   3ba20:	ldr	r1, [r5]
   3ba24:	cmp	r1, #31
   3ba28:	beq	3be54 <__assert_fail@plt+0x293a4>
   3ba2c:	ldr	r0, [sp, #60]	; 0x3c
   3ba30:	ldr	r0, [r0]
   3ba34:	add	r7, r0, r1, lsl #5
   3ba38:	add	r2, r1, #1
   3ba3c:	mov	r0, #0
   3ba40:	mov	r1, #16
   3ba44:	str	r2, [r5]
   3ba48:	str	r0, [r7, #4]!
   3ba4c:	stmib	r7, {r6, r9}
   3ba50:	str	r0, [r7, #12]
   3ba54:	str	r0, [r7, #16]
   3ba58:	str	r0, [r7, #20]
   3ba5c:	str	r1, [r7, #24]
   3ba60:	mvn	r1, #0
   3ba64:	str	r1, [r7, #28]
   3ba68:	str	r7, [r6]
   3ba6c:	str	r7, [r9]
   3ba70:	b	3ba7c <__assert_fail@plt+0x28fcc>
   3ba74:	mov	r0, #0
   3ba78:	mov	r7, r9
   3ba7c:	mov	r5, r8
   3ba80:	b	3c0d8 <__assert_fail@plt+0x29628>
   3ba84:	ldr	ip, [sp, #48]	; 0x30
   3ba88:	b	3b4c8 <__assert_fail@plt+0x28a18>
   3ba8c:	ldr	ip, [sp, #48]	; 0x30
   3ba90:	ldr	lr, [sp, #44]	; 0x2c
   3ba94:	b	3c0b8 <__assert_fail@plt+0x29608>
   3ba98:	ldr	lr, [sp, #44]	; 0x2c
   3ba9c:	mov	r0, r9
   3baa0:	mov	r6, r0
   3baa4:	ldr	r0, [r0, #4]
   3baa8:	cmp	r0, #0
   3baac:	bne	3baa0 <__assert_fail@plt+0x28ff0>
   3bab0:	ldr	r0, [r6, #8]
   3bab4:	cmp	r0, #0
   3bab8:	bne	3baa0 <__assert_fail@plt+0x28ff0>
   3babc:	ldr	r0, [r6, #24]
   3bac0:	movw	r1, #255	; 0xff
   3bac4:	movt	r1, #4
   3bac8:	and	r0, r0, r1
   3bacc:	cmp	r0, #3
   3bad0:	beq	3bb04 <__assert_fail@plt+0x29054>
   3bad4:	cmp	r0, #6
   3bad8:	bne	3bb18 <__assert_fail@plt+0x29068>
   3badc:	ldr	r5, [r6, #20]
   3bae0:	ldr	r0, [r5]
   3bae4:	bl	30174 <__assert_fail@plt+0x1d6c4>
   3bae8:	ldr	r0, [r5, #4]
   3baec:	bl	30174 <__assert_fail@plt+0x1d6c4>
   3baf0:	ldr	r0, [r5, #8]
   3baf4:	bl	30174 <__assert_fail@plt+0x1d6c4>
   3baf8:	ldr	r0, [r5, #12]
   3bafc:	bl	30174 <__assert_fail@plt+0x1d6c4>
   3bb00:	b	3bb08 <__assert_fail@plt+0x29058>
   3bb04:	ldr	r5, [r6, #20]
   3bb08:	mov	r0, r5
   3bb0c:	bl	30174 <__assert_fail@plt+0x1d6c4>
   3bb10:	ldr	ip, [sp, #48]	; 0x30
   3bb14:	ldr	lr, [sp, #44]	; 0x2c
   3bb18:	ldr	r1, [r6]
   3bb1c:	cmp	r1, #0
   3bb20:	beq	3bb44 <__assert_fail@plt+0x29094>
   3bb24:	ldr	r0, [r1, #8]
   3bb28:	cmp	r0, r6
   3bb2c:	mov	r6, r1
   3bb30:	beq	3babc <__assert_fail@plt+0x2900c>
   3bb34:	cmp	r0, #0
   3bb38:	mov	r6, r1
   3bb3c:	beq	3babc <__assert_fail@plt+0x2900c>
   3bb40:	b	3baa0 <__assert_fail@plt+0x28ff0>
   3bb44:	ldr	r5, [sp, #28]
   3bb48:	b	3c0b8 <__assert_fail@plt+0x29608>
   3bb4c:	mov	r3, r9
   3bb50:	str	sl, [sp, #52]	; 0x34
   3bb54:	str	r9, [sp, #36]	; 0x24
   3bb58:	beq	3be2c <__assert_fail@plt+0x2937c>
   3bb5c:	ldr	sl, [sp, #40]	; 0x28
   3bb60:	ldr	r0, [sl]
   3bb64:	mov	r3, sl
   3bb68:	str	r0, [sp, #36]	; 0x24
   3bb6c:	mov	r0, #2
   3bb70:	ldr	r1, [r5]
   3bb74:	str	r0, [sp, #56]	; 0x38
   3bb78:	cmp	r1, #31
   3bb7c:	beq	3bd50 <__assert_fail@plt+0x292a0>
   3bb80:	ldr	r0, [sp, #60]	; 0x3c
   3bb84:	ldr	r0, [r0]
   3bb88:	add	r6, r0, r1, lsl #5
   3bb8c:	add	r2, r3, #20
   3bb90:	mov	r9, r3
   3bb94:	add	r3, r1, #1
   3bb98:	sub	r7, fp, #80	; 0x50
   3bb9c:	str	r3, [r5]
   3bba0:	str	r4, [r6, #4]!
   3bba4:	str	r4, [r6, #8]
   3bba8:	str	r4, [r6, #4]
   3bbac:	ldm	r2, {r0, r1}
   3bbb0:	mvn	r2, #0
   3bbb4:	str	r2, [r6, #28]
   3bbb8:	str	r4, [r6, #16]
   3bbbc:	str	r4, [r6, #12]
   3bbc0:	str	r0, [r6, #20]
   3bbc4:	bic	r0, r1, #786432	; 0xc0000
   3bbc8:	str	r0, [r6, #24]
   3bbcc:	mov	r0, r6
   3bbd0:	str	r6, [fp, #-80]	; 0xffffffb0
   3bbd4:	ldr	r1, [sp, #36]	; 0x24
   3bbd8:	str	r1, [r0]
   3bbdc:	ldr	r0, [r7]
   3bbe0:	ldr	r1, [r0, #24]
   3bbe4:	orr	r1, r1, #262144	; 0x40000
   3bbe8:	str	r1, [r0, #24]
   3bbec:	ldr	r0, [r9, #4]
   3bbf0:	ldr	r1, [r7]
   3bbf4:	cmp	r0, #0
   3bbf8:	str	r1, [sp, #36]	; 0x24
   3bbfc:	beq	3bc0c <__assert_fail@plt+0x2915c>
   3bc00:	add	r7, r1, #4
   3bc04:	mov	r9, r0
   3bc08:	b	3bc4c <__assert_fail@plt+0x2919c>
   3bc0c:	mov	r1, #0
   3bc10:	mov	r0, r9
   3bc14:	ldr	r9, [r9, #8]
   3bc18:	cmp	r9, r1
   3bc1c:	cmpne	r9, #0
   3bc20:	bne	3bc44 <__assert_fail@plt+0x29194>
   3bc24:	ldr	r1, [sp, #36]	; 0x24
   3bc28:	ldr	r9, [r0]
   3bc2c:	ldr	r1, [r1]
   3bc30:	cmp	r9, #0
   3bc34:	str	r1, [sp, #36]	; 0x24
   3bc38:	mov	r1, r0
   3bc3c:	bne	3bc10 <__assert_fail@plt+0x29160>
   3bc40:	b	3bcd8 <__assert_fail@plt+0x29228>
   3bc44:	ldr	r0, [sp, #36]	; 0x24
   3bc48:	add	r7, r0, #8
   3bc4c:	ldr	r1, [r5]
   3bc50:	cmp	r1, #31
   3bc54:	beq	3bca4 <__assert_fail@plt+0x291f4>
   3bc58:	ldr	r0, [sp, #60]	; 0x3c
   3bc5c:	ldr	r0, [r0]
   3bc60:	add	r0, r0, r1, lsl #5
   3bc64:	add	r3, r1, #1
   3bc68:	add	r2, r9, #20
   3bc6c:	str	r3, [r5]
   3bc70:	mvn	r3, #0
   3bc74:	str	r4, [r0, #4]!
   3bc78:	str	r4, [r0, #8]
   3bc7c:	str	r4, [r0, #4]
   3bc80:	ldm	r2, {r1, r2}
   3bc84:	str	r3, [r0, #28]
   3bc88:	str	r4, [r0, #16]
   3bc8c:	str	r4, [r0, #12]
   3bc90:	str	r1, [r0, #20]
   3bc94:	bic	r1, r2, #786432	; 0xc0000
   3bc98:	str	r1, [r0, #24]
   3bc9c:	str	r0, [r7]
   3bca0:	b	3bbd4 <__assert_fail@plt+0x29124>
   3bca4:	mov	r0, #996	; 0x3e4
   3bca8:	bl	327ac <__assert_fail@plt+0x1fcfc>
   3bcac:	cmp	r0, #0
   3bcb0:	beq	3bde4 <__assert_fail@plt+0x29334>
   3bcb4:	ldr	r2, [sp, #60]	; 0x3c
   3bcb8:	ldr	ip, [sp, #48]	; 0x30
   3bcbc:	ldr	lr, [sp, #44]	; 0x2c
   3bcc0:	ldr	r1, [r2]
   3bcc4:	str	r1, [r0]
   3bcc8:	mov	r1, #0
   3bccc:	str	r0, [r2]
   3bcd0:	str	r1, [r5]
   3bcd4:	b	3bc60 <__assert_fail@plt+0x291b0>
   3bcd8:	mov	r3, r6
   3bcdc:	ldr	r1, [r5]
   3bce0:	cmp	r1, #31
   3bce4:	beq	3bd90 <__assert_fail@plt+0x292e0>
   3bce8:	ldr	r0, [sp, #60]	; 0x3c
   3bcec:	ldr	r0, [r0]
   3bcf0:	add	r2, r1, #1
   3bcf4:	add	r1, r0, r1, lsl #5
   3bcf8:	mov	r0, #16
   3bcfc:	cmp	r3, #0
   3bd00:	str	r2, [r5]
   3bd04:	str	r4, [r1, #4]!
   3bd08:	str	sl, [r1, #4]
   3bd0c:	str	r3, [r1, #8]
   3bd10:	str	r4, [r1, #12]
   3bd14:	str	r4, [r1, #16]
   3bd18:	str	r4, [r1, #20]
   3bd1c:	str	r0, [r1, #24]
   3bd20:	mvn	r0, #0
   3bd24:	str	r1, [sp, #36]	; 0x24
   3bd28:	str	r0, [r1, #28]
   3bd2c:	str	r1, [sl]
   3bd30:	beq	3c0a0 <__assert_fail@plt+0x295f0>
   3bd34:	ldr	r1, [sp, #56]	; 0x38
   3bd38:	ldr	sl, [sp, #36]	; 0x24
   3bd3c:	add	r0, r1, #1
   3bd40:	cmp	r1, r8
   3bd44:	str	sl, [r3]
   3bd48:	bne	3bb70 <__assert_fail@plt+0x290c0>
   3bd4c:	b	3be2c <__assert_fail@plt+0x2937c>
   3bd50:	mov	r0, #996	; 0x3e4
   3bd54:	mov	r6, r3
   3bd58:	bl	327ac <__assert_fail@plt+0x1fcfc>
   3bd5c:	cmp	r0, #0
   3bd60:	beq	3bdcc <__assert_fail@plt+0x2931c>
   3bd64:	ldr	r2, [sp, #60]	; 0x3c
   3bd68:	ldr	r5, [sp, #24]
   3bd6c:	ldr	ip, [sp, #48]	; 0x30
   3bd70:	ldr	lr, [sp, #44]	; 0x2c
   3bd74:	mov	r3, r6
   3bd78:	ldr	r1, [r2]
   3bd7c:	str	r1, [r0]
   3bd80:	mov	r1, #0
   3bd84:	str	r0, [r2]
   3bd88:	str	r1, [r5]
   3bd8c:	b	3bb88 <__assert_fail@plt+0x290d8>
   3bd90:	mov	r0, #996	; 0x3e4
   3bd94:	mov	r6, r3
   3bd98:	bl	327ac <__assert_fail@plt+0x1fcfc>
   3bd9c:	ldr	lr, [sp, #44]	; 0x2c
   3bda0:	ldr	ip, [sp, #48]	; 0x30
   3bda4:	cmp	r0, #0
   3bda8:	beq	3c0a0 <__assert_fail@plt+0x295f0>
   3bdac:	ldr	r2, [sp, #60]	; 0x3c
   3bdb0:	mov	r3, r6
   3bdb4:	ldr	r1, [r2]
   3bdb8:	str	r1, [r0]
   3bdbc:	mov	r1, #0
   3bdc0:	str	r0, [r2]
   3bdc4:	str	r1, [r5]
   3bdc8:	b	3bcf0 <__assert_fail@plt+0x29240>
   3bdcc:	ldr	ip, [sp, #48]	; 0x30
   3bdd0:	ldr	lr, [sp, #44]	; 0x2c
   3bdd4:	ldr	r5, [sp, #24]
   3bdd8:	mov	r3, #0
   3bddc:	str	r3, [fp, #-80]	; 0xffffffb0
   3bde0:	b	3bcdc <__assert_fail@plt+0x2922c>
   3bde4:	ldr	ip, [sp, #48]	; 0x30
   3bde8:	ldr	lr, [sp, #44]	; 0x2c
   3bdec:	mov	r3, #0
   3bdf0:	str	r3, [r7]
   3bdf4:	b	3bcdc <__assert_fail@plt+0x2922c>
   3bdf8:	mov	r0, #996	; 0x3e4
   3bdfc:	bl	327ac <__assert_fail@plt+0x1fcfc>
   3be00:	ldr	lr, [sp, #44]	; 0x2c
   3be04:	ldr	ip, [sp, #48]	; 0x30
   3be08:	cmp	r0, #0
   3be0c:	beq	3c0a0 <__assert_fail@plt+0x295f0>
   3be10:	ldr	r2, [sp, #60]	; 0x3c
   3be14:	ldr	r1, [r2]
   3be18:	str	r1, [r0]
   3be1c:	mov	r1, #0
   3be20:	str	r0, [r2]
   3be24:	str	r1, [r5]
   3be28:	b	3b6f0 <__assert_fail@plt+0x28c40>
   3be2c:	ldr	sl, [sp, #52]	; 0x34
   3be30:	mov	r0, #0
   3be34:	cmp	r8, sl
   3be38:	bne	3be94 <__assert_fail@plt+0x293e4>
   3be3c:	ldr	r7, [sp, #36]	; 0x24
   3be40:	ldr	r5, [sp, #28]
   3be44:	b	3c0d8 <__assert_fail@plt+0x29628>
   3be48:	ldr	r0, [sp, #20]
   3be4c:	mov	r1, #10
   3be50:	b	3c008 <__assert_fail@plt+0x29558>
   3be54:	mov	r0, #996	; 0x3e4
   3be58:	bl	327ac <__assert_fail@plt+0x1fcfc>
   3be5c:	cmp	r0, #0
   3be60:	beq	3c02c <__assert_fail@plt+0x2957c>
   3be64:	ldr	r2, [sp, #60]	; 0x3c
   3be68:	ldr	ip, [sp, #48]	; 0x30
   3be6c:	ldr	lr, [sp, #44]	; 0x2c
   3be70:	ldr	r1, [r2]
   3be74:	str	r1, [r0]
   3be78:	mov	r1, #0
   3be7c:	str	r0, [r2]
   3be80:	str	r1, [r5]
   3be84:	b	3ba34 <__assert_fail@plt+0x28f84>
   3be88:	ldr	ip, [sp, #48]	; 0x30
   3be8c:	ldr	r9, [sp, #56]	; 0x38
   3be90:	b	3b4c8 <__assert_fail@plt+0x28a18>
   3be94:	mov	r6, r3
   3be98:	ldr	r1, [r5]
   3be9c:	ldr	r9, [r6], #20
   3bea0:	cmp	r1, #31
   3bea4:	beq	3c044 <__assert_fail@plt+0x29594>
   3bea8:	ldr	r0, [sp, #60]	; 0x3c
   3beac:	ldr	r0, [r0]
   3beb0:	add	r7, r0, r1, lsl #5
   3beb4:	add	r2, r1, #1
   3beb8:	str	r2, [r5]
   3bebc:	mvn	r2, #0
   3bec0:	str	r4, [r7, #4]!
   3bec4:	str	r4, [r7, #8]
   3bec8:	str	r4, [r7, #4]
   3becc:	ldm	r6, {r0, r1}
   3bed0:	str	r2, [r7, #28]
   3bed4:	str	r4, [r7, #16]
   3bed8:	str	r4, [r7, #12]
   3bedc:	sub	r6, fp, #80	; 0x50
   3bee0:	str	r0, [r7, #20]
   3bee4:	bic	r0, r1, #786432	; 0xc0000
   3bee8:	str	r0, [r7, #24]
   3beec:	mov	r0, r7
   3bef0:	str	r7, [fp, #-80]	; 0xffffffb0
   3bef4:	str	r9, [r0]
   3bef8:	ldr	r0, [r6]
   3befc:	ldr	r1, [r0, #24]
   3bf00:	orr	r1, r1, #262144	; 0x40000
   3bf04:	str	r1, [r0, #24]
   3bf08:	ldr	r0, [r3, #4]
   3bf0c:	ldr	r9, [r6]
   3bf10:	cmp	r0, #0
   3bf14:	beq	3bf24 <__assert_fail@plt+0x29474>
   3bf18:	add	r2, r9, #4
   3bf1c:	mov	r6, r0
   3bf20:	b	3bf58 <__assert_fail@plt+0x294a8>
   3bf24:	mov	r1, #0
   3bf28:	ldr	r6, [r3, #8]
   3bf2c:	mov	r0, r3
   3bf30:	cmp	r6, r1
   3bf34:	cmpne	r6, #0
   3bf38:	bne	3bf54 <__assert_fail@plt+0x294a4>
   3bf3c:	ldr	r3, [r0]
   3bf40:	ldr	r9, [r9]
   3bf44:	mov	r1, r0
   3bf48:	cmp	r3, #0
   3bf4c:	bne	3bf28 <__assert_fail@plt+0x29478>
   3bf50:	b	3b654 <__assert_fail@plt+0x28ba4>
   3bf54:	add	r2, r9, #8
   3bf58:	ldr	r1, [r5]
   3bf5c:	str	r2, [sp, #56]	; 0x38
   3bf60:	cmp	r1, #31
   3bf64:	beq	3bfbc <__assert_fail@plt+0x2950c>
   3bf68:	ldr	r0, [sp, #60]	; 0x3c
   3bf6c:	ldr	r0, [r0]
   3bf70:	add	r0, r0, r1, lsl #5
   3bf74:	add	r3, r1, #1
   3bf78:	add	r2, r6, #20
   3bf7c:	str	r3, [r5]
   3bf80:	mvn	r3, #0
   3bf84:	str	r4, [r0, #4]!
   3bf88:	str	r4, [r0, #8]
   3bf8c:	str	r4, [r0, #4]
   3bf90:	ldm	r2, {r1, r2}
   3bf94:	str	r3, [r0, #28]
   3bf98:	mov	r3, r6
   3bf9c:	ldr	r6, [sp, #56]	; 0x38
   3bfa0:	str	r4, [r0, #16]
   3bfa4:	str	r4, [r0, #12]
   3bfa8:	str	r1, [r0, #20]
   3bfac:	bic	r1, r2, #786432	; 0xc0000
   3bfb0:	str	r1, [r0, #24]
   3bfb4:	str	r0, [r6]
   3bfb8:	b	3bef4 <__assert_fail@plt+0x29444>
   3bfbc:	mov	r0, #996	; 0x3e4
   3bfc0:	str	r6, [sp, #12]
   3bfc4:	bl	327ac <__assert_fail@plt+0x1fcfc>
   3bfc8:	cmp	r0, #0
   3bfcc:	beq	3c090 <__assert_fail@plt+0x295e0>
   3bfd0:	ldr	r2, [sp, #60]	; 0x3c
   3bfd4:	ldr	r5, [sp, #24]
   3bfd8:	ldr	ip, [sp, #48]	; 0x30
   3bfdc:	ldr	lr, [sp, #44]	; 0x2c
   3bfe0:	ldr	sl, [sp, #52]	; 0x34
   3bfe4:	ldr	r6, [sp, #12]
   3bfe8:	ldr	r1, [r2]
   3bfec:	str	r1, [r0]
   3bff0:	mov	r1, #0
   3bff4:	str	r0, [r2]
   3bff8:	str	r1, [r5]
   3bffc:	b	3bf70 <__assert_fail@plt+0x294c0>
   3c000:	ldr	r0, [sp, #20]
   3c004:	mov	r1, #15
   3c008:	str	r1, [r0]
   3c00c:	mov	r7, #0
   3c010:	b	3c0b8 <__assert_fail@plt+0x29608>
   3c014:	ldr	r1, [sp, #20]
   3c018:	cmp	r0, #2
   3c01c:	mov	r0, #10
   3c020:	movweq	r0, #9
   3c024:	str	r0, [r1]
   3c028:	b	3b498 <__assert_fail@plt+0x289e8>
   3c02c:	ldr	ip, [sp, #48]	; 0x30
   3c030:	ldr	lr, [sp, #44]	; 0x2c
   3c034:	ldr	r9, [sp, #40]	; 0x28
   3c038:	mov	r7, #0
   3c03c:	mov	r5, r8
   3c040:	b	3c0b8 <__assert_fail@plt+0x29608>
   3c044:	mov	r0, #996	; 0x3e4
   3c048:	mov	r7, r3
   3c04c:	bl	327ac <__assert_fail@plt+0x1fcfc>
   3c050:	cmp	r0, #0
   3c054:	beq	3c088 <__assert_fail@plt+0x295d8>
   3c058:	ldr	r2, [sp, #60]	; 0x3c
   3c05c:	ldr	r5, [sp, #24]
   3c060:	ldr	ip, [sp, #48]	; 0x30
   3c064:	ldr	lr, [sp, #44]	; 0x2c
   3c068:	ldr	sl, [sp, #52]	; 0x34
   3c06c:	mov	r3, r7
   3c070:	ldr	r1, [r2]
   3c074:	str	r1, [r0]
   3c078:	mov	r1, #0
   3c07c:	str	r0, [r2]
   3c080:	str	r1, [r5]
   3c084:	b	3beb0 <__assert_fail@plt+0x29400>
   3c088:	str	r4, [fp, #-80]	; 0xffffffb0
   3c08c:	b	3c098 <__assert_fail@plt+0x295e8>
   3c090:	ldr	r0, [sp, #56]	; 0x38
   3c094:	str	r4, [r0]
   3c098:	ldr	ip, [sp, #48]	; 0x30
   3c09c:	ldr	lr, [sp, #44]	; 0x2c
   3c0a0:	ldr	r0, [sp, #20]
   3c0a4:	ldr	r5, [sp, #28]
   3c0a8:	ldr	r9, [sp, #40]	; 0x28
   3c0ac:	mov	r1, #12
   3c0b0:	mov	r7, #0
   3c0b4:	str	r1, [r0]
   3c0b8:	clz	r0, r7
   3c0bc:	cmp	r7, #0
   3c0c0:	lsr	r0, r0, #5
   3c0c4:	bne	3c0d8 <__assert_fail@plt+0x29628>
   3c0c8:	ldr	r1, [sp, #20]
   3c0cc:	ldr	r1, [r1]
   3c0d0:	cmp	r1, #0
   3c0d4:	bne	3c1b4 <__assert_fail@plt+0x29704>
   3c0d8:	ldr	r1, [sp, #32]
   3c0dc:	cmp	r1, #0
   3c0e0:	beq	3b378 <__assert_fail@plt+0x288c8>
   3c0e4:	ldrb	r1, [lr, #4]
   3c0e8:	cmp	r1, #23
   3c0ec:	cmpne	r1, #11
   3c0f0:	bne	3b378 <__assert_fail@plt+0x288c8>
   3c0f4:	movw	r6, #255	; 0xff
   3c0f8:	cmp	r0, #0
   3c0fc:	movt	r6, #4
   3c100:	bne	3c198 <__assert_fail@plt+0x296e8>
   3c104:	mov	r5, r7
   3c108:	ldr	r7, [r7, #4]
   3c10c:	cmp	r7, #0
   3c110:	bne	3c104 <__assert_fail@plt+0x29654>
   3c114:	ldr	r7, [r5, #8]
   3c118:	cmp	r7, #0
   3c11c:	bne	3c104 <__assert_fail@plt+0x29654>
   3c120:	ldr	r0, [r5, #24]
   3c124:	and	r0, r0, r6
   3c128:	cmp	r0, #3
   3c12c:	beq	3c160 <__assert_fail@plt+0x296b0>
   3c130:	cmp	r0, #6
   3c134:	bne	3c16c <__assert_fail@plt+0x296bc>
   3c138:	ldr	r4, [r5, #20]
   3c13c:	ldr	r0, [r4]
   3c140:	bl	30174 <__assert_fail@plt+0x1d6c4>
   3c144:	ldr	r0, [r4, #4]
   3c148:	bl	30174 <__assert_fail@plt+0x1d6c4>
   3c14c:	ldr	r0, [r4, #8]
   3c150:	bl	30174 <__assert_fail@plt+0x1d6c4>
   3c154:	ldr	r0, [r4, #12]
   3c158:	bl	30174 <__assert_fail@plt+0x1d6c4>
   3c15c:	b	3c164 <__assert_fail@plt+0x296b4>
   3c160:	ldr	r4, [r5, #20]
   3c164:	mov	r0, r4
   3c168:	bl	30174 <__assert_fail@plt+0x1d6c4>
   3c16c:	ldr	r0, [r5]
   3c170:	cmp	r0, #0
   3c174:	beq	3c198 <__assert_fail@plt+0x296e8>
   3c178:	ldr	r7, [r0, #8]
   3c17c:	cmp	r7, r5
   3c180:	mov	r5, r0
   3c184:	beq	3c120 <__assert_fail@plt+0x29670>
   3c188:	cmp	r7, #0
   3c18c:	mov	r5, r0
   3c190:	beq	3c120 <__assert_fail@plt+0x29670>
   3c194:	b	3c104 <__assert_fail@plt+0x29654>
   3c198:	mov	r0, #13
   3c19c:	ldr	r1, [sp, #20]
   3c1a0:	mov	r9, #0
   3c1a4:	str	r0, [r1]
   3c1a8:	mov	r0, r9
   3c1ac:	sub	sp, fp, #28
   3c1b0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   3c1b4:	cmp	r9, #0
   3c1b8:	beq	3a8e4 <__assert_fail@plt+0x27e34>
   3c1bc:	movw	r6, #255	; 0xff
   3c1c0:	movt	r6, #4
   3c1c4:	mov	r5, r9
   3c1c8:	ldr	r9, [r9, #4]
   3c1cc:	cmp	r9, #0
   3c1d0:	bne	3c1c4 <__assert_fail@plt+0x29714>
   3c1d4:	ldr	r9, [r5, #8]
   3c1d8:	cmp	r9, #0
   3c1dc:	bne	3c1c4 <__assert_fail@plt+0x29714>
   3c1e0:	ldr	r0, [r5, #24]
   3c1e4:	and	r0, r0, r6
   3c1e8:	cmp	r0, #3
   3c1ec:	beq	3c220 <__assert_fail@plt+0x29770>
   3c1f0:	cmp	r0, #6
   3c1f4:	bne	3c22c <__assert_fail@plt+0x2977c>
   3c1f8:	ldr	r4, [r5, #20]
   3c1fc:	ldr	r0, [r4]
   3c200:	bl	30174 <__assert_fail@plt+0x1d6c4>
   3c204:	ldr	r0, [r4, #4]
   3c208:	bl	30174 <__assert_fail@plt+0x1d6c4>
   3c20c:	ldr	r0, [r4, #8]
   3c210:	bl	30174 <__assert_fail@plt+0x1d6c4>
   3c214:	ldr	r0, [r4, #12]
   3c218:	bl	30174 <__assert_fail@plt+0x1d6c4>
   3c21c:	b	3c224 <__assert_fail@plt+0x29774>
   3c220:	ldr	r4, [r5, #20]
   3c224:	mov	r0, r4
   3c228:	bl	30174 <__assert_fail@plt+0x1d6c4>
   3c22c:	ldr	r0, [r5]
   3c230:	cmp	r0, #0
   3c234:	beq	3a8e4 <__assert_fail@plt+0x27e34>
   3c238:	ldr	r9, [r0, #8]
   3c23c:	cmp	r9, r5
   3c240:	mov	r5, r0
   3c244:	beq	3c1e0 <__assert_fail@plt+0x29730>
   3c248:	cmp	r9, #0
   3c24c:	mov	r5, r0
   3c250:	beq	3c1e0 <__assert_fail@plt+0x29730>
   3c254:	b	3c1c4 <__assert_fail@plt+0x29714>
   3c258:	cmp	r0, #2
   3c25c:	blt	3c278 <__assert_fail@plt+0x297c8>
   3c260:	ldr	r0, [r7, #36]	; 0x24
   3c264:	cmp	r0, #0
   3c268:	bne	3afdc <__assert_fail@plt+0x2852c>
   3c26c:	ldrb	r0, [r7, #16]
   3c270:	tst	r0, #1
   3c274:	bne	3afdc <__assert_fail@plt+0x2852c>
   3c278:	ldr	r0, [r7]
   3c27c:	bl	30174 <__assert_fail@plt+0x1d6c4>
   3c280:	ldr	r0, [r7, #4]
   3c284:	bl	30174 <__assert_fail@plt+0x1d6c4>
   3c288:	ldr	r0, [r7, #8]
   3c28c:	bl	30174 <__assert_fail@plt+0x1d6c4>
   3c290:	ldr	r0, [r7, #12]
   3c294:	bl	30174 <__assert_fail@plt+0x1d6c4>
   3c298:	mov	r0, r7
   3c29c:	bl	30174 <__assert_fail@plt+0x1d6c4>
   3c2a0:	ldr	r1, [sl, #64]	; 0x40
   3c2a4:	cmp	r1, #31
   3c2a8:	beq	3c7e4 <__assert_fail@plt+0x29d34>
   3c2ac:	ldr	r0, [sl, #56]	; 0x38
   3c2b0:	add	r0, r0, r1, lsl #5
   3c2b4:	add	r2, r1, #1
   3c2b8:	vmov.i32	q8, #0	; 0x00000000
   3c2bc:	ldr	ip, [sp, #48]	; 0x30
   3c2c0:	ldr	lr, [sp, #44]	; 0x2c
   3c2c4:	mov	r1, #3
   3c2c8:	str	r2, [sl, #64]	; 0x40
   3c2cc:	mov	r2, #0
   3c2d0:	add	r7, r0, #4
   3c2d4:	str	r2, [r0, #20]
   3c2d8:	str	r8, [r0, #24]
   3c2dc:	str	r1, [r0, #28]
   3c2e0:	mov	r0, #28
   3c2e4:	mov	r1, r7
   3c2e8:	vst1.32	{d16-d17}, [r1], r0
   3c2ec:	mvn	r0, #0
   3c2f0:	str	r0, [r1]
   3c2f4:	b	3b330 <__assert_fail@plt+0x28880>
   3c2f8:	ldr	r8, [sp, #24]
   3c2fc:	ldr	r0, [sp, #20]
   3c300:	ldr	r5, [sp, #28]
   3c304:	ldr	sl, [sp, #52]	; 0x34
   3c308:	ldr	r7, [sp, #60]	; 0x3c
   3c30c:	str	r9, [r0]
   3c310:	ldr	r4, [sp, #20]
   3c314:	mov	r0, r8
   3c318:	bl	30174 <__assert_fail@plt+0x1d6c4>
   3c31c:	ldr	r0, [r7]
   3c320:	bl	30174 <__assert_fail@plt+0x1d6c4>
   3c324:	ldr	r0, [r7, #4]
   3c328:	bl	30174 <__assert_fail@plt+0x1d6c4>
   3c32c:	ldr	r0, [r7, #8]
   3c330:	bl	30174 <__assert_fail@plt+0x1d6c4>
   3c334:	ldr	r0, [r7, #12]
   3c338:	bl	30174 <__assert_fail@plt+0x1d6c4>
   3c33c:	mov	r0, r7
   3c340:	bl	30174 <__assert_fail@plt+0x1d6c4>
   3c344:	ldr	r0, [r4]
   3c348:	mov	r7, #0
   3c34c:	mov	r9, #0
   3c350:	b	3a474 <__assert_fail@plt+0x279c4>
   3c354:	mov	r0, #996	; 0x3e4
   3c358:	bl	327ac <__assert_fail@plt+0x1fcfc>
   3c35c:	cmp	r0, #0
   3c360:	beq	3c650 <__assert_fail@plt+0x29ba0>
   3c364:	ldr	r1, [sl, #56]	; 0x38
   3c368:	ldr	r5, [sp, #28]
   3c36c:	ldr	ip, [sp, #48]	; 0x30
   3c370:	ldr	lr, [sp, #44]	; 0x2c
   3c374:	str	r1, [r0]
   3c378:	mov	r1, #0
   3c37c:	str	r1, [sl, #64]	; 0x40
   3c380:	str	r0, [sl, #56]	; 0x38
   3c384:	b	3a3cc <__assert_fail@plt+0x2791c>
   3c388:	mov	r9, r0
   3c38c:	str	sl, [sp, #52]	; 0x34
   3c390:	b	3c2fc <__assert_fail@plt+0x2984c>
   3c394:	mov	r9, #7
   3c398:	str	sl, [sp, #52]	; 0x34
   3c39c:	b	3c2fc <__assert_fail@plt+0x2984c>
   3c3a0:	ldr	r4, [sp, #20]
   3c3a4:	ldr	r7, [sp, #60]	; 0x3c
   3c3a8:	mov	r0, #2
   3c3ac:	str	r0, [r4]
   3c3b0:	b	3c314 <__assert_fail@plt+0x29864>
   3c3b4:	mov	r0, r8
   3c3b8:	bl	30174 <__assert_fail@plt+0x1d6c4>
   3c3bc:	mov	r0, r7
   3c3c0:	bl	30174 <__assert_fail@plt+0x1d6c4>
   3c3c4:	b	3b230 <__assert_fail@plt+0x28780>
   3c3c8:	mov	r0, #996	; 0x3e4
   3c3cc:	bl	327ac <__assert_fail@plt+0x1fcfc>
   3c3d0:	cmp	r0, #0
   3c3d4:	beq	3c650 <__assert_fail@plt+0x29ba0>
   3c3d8:	ldr	r1, [sl, #56]	; 0x38
   3c3dc:	ldr	r5, [sp, #28]
   3c3e0:	ldr	ip, [sp, #48]	; 0x30
   3c3e4:	ldr	lr, [sp, #44]	; 0x2c
   3c3e8:	str	r1, [r0]
   3c3ec:	mov	r1, #0
   3c3f0:	str	r1, [sl, #64]	; 0x40
   3c3f4:	str	r0, [sl, #56]	; 0x38
   3c3f8:	b	3a5d8 <__assert_fail@plt+0x27b28>
   3c3fc:	mov	r0, #6
   3c400:	b	3b234 <__assert_fail@plt+0x28784>
   3c404:	mov	r0, #996	; 0x3e4
   3c408:	bl	327ac <__assert_fail@plt+0x1fcfc>
   3c40c:	cmp	r0, #0
   3c410:	beq	3c650 <__assert_fail@plt+0x29ba0>
   3c414:	ldr	r1, [sl, #56]	; 0x38
   3c418:	ldr	r5, [sp, #28]
   3c41c:	ldr	ip, [sp, #48]	; 0x30
   3c420:	ldr	lr, [sp, #44]	; 0x2c
   3c424:	str	r1, [r0]
   3c428:	mov	r1, #0
   3c42c:	str	r1, [sl, #64]	; 0x40
   3c430:	str	r0, [sl, #56]	; 0x38
   3c434:	b	3a818 <__assert_fail@plt+0x27d68>
   3c438:	mov	r0, #996	; 0x3e4
   3c43c:	bl	327ac <__assert_fail@plt+0x1fcfc>
   3c440:	cmp	r0, #0
   3c444:	beq	3c650 <__assert_fail@plt+0x29ba0>
   3c448:	ldr	r1, [sl, #56]	; 0x38
   3c44c:	ldr	r5, [sp, #28]
   3c450:	ldr	ip, [sp, #48]	; 0x30
   3c454:	ldr	lr, [sp, #44]	; 0x2c
   3c458:	str	r1, [r0]
   3c45c:	mov	r1, #0
   3c460:	str	r1, [sl, #64]	; 0x40
   3c464:	str	r0, [sl, #56]	; 0x38
   3c468:	b	3a7bc <__assert_fail@plt+0x27d0c>
   3c46c:	mov	r0, #996	; 0x3e4
   3c470:	bl	327ac <__assert_fail@plt+0x1fcfc>
   3c474:	cmp	r0, #0
   3c478:	beq	3c814 <__assert_fail@plt+0x29d64>
   3c47c:	ldr	r1, [sl, #56]	; 0x38
   3c480:	ldr	ip, [sp, #48]	; 0x30
   3c484:	ldr	lr, [sp, #44]	; 0x2c
   3c488:	str	r1, [r0]
   3c48c:	mov	r1, #0
   3c490:	str	r1, [sl, #64]	; 0x40
   3c494:	str	r0, [sl, #56]	; 0x38
   3c498:	b	3aff8 <__assert_fail@plt+0x28548>
   3c49c:	mov	r0, #996	; 0x3e4
   3c4a0:	bl	327ac <__assert_fail@plt+0x1fcfc>
   3c4a4:	cmp	r0, #0
   3c4a8:	beq	3c814 <__assert_fail@plt+0x29d64>
   3c4ac:	ldr	r1, [sl, #56]	; 0x38
   3c4b0:	ldr	ip, [sp, #48]	; 0x30
   3c4b4:	ldr	lr, [sp, #44]	; 0x2c
   3c4b8:	str	r1, [r0]
   3c4bc:	mov	r1, #0
   3c4c0:	str	r1, [sl, #64]	; 0x40
   3c4c4:	str	r0, [sl, #56]	; 0x38
   3c4c8:	b	3b0a4 <__assert_fail@plt+0x285f4>
   3c4cc:	mov	r0, #996	; 0x3e4
   3c4d0:	bl	327ac <__assert_fail@plt+0x1fcfc>
   3c4d4:	cmp	r0, #0
   3c4d8:	beq	3c814 <__assert_fail@plt+0x29d64>
   3c4dc:	ldr	r1, [sl, #56]	; 0x38
   3c4e0:	ldr	ip, [sp, #48]	; 0x30
   3c4e4:	ldr	lr, [sp, #44]	; 0x2c
   3c4e8:	str	r1, [r0]
   3c4ec:	mov	r1, #0
   3c4f0:	str	r1, [sl, #64]	; 0x40
   3c4f4:	str	r0, [sl, #56]	; 0x38
   3c4f8:	b	3b0f0 <__assert_fail@plt+0x28640>
   3c4fc:	str	sl, [sp, #52]	; 0x34
   3c500:	mov	r9, #3
   3c504:	b	3c2fc <__assert_fail@plt+0x2984c>
   3c508:	mov	r0, r8
   3c50c:	bl	30174 <__assert_fail@plt+0x1d6c4>
   3c510:	ldr	lr, [sp, #44]	; 0x2c
   3c514:	ldr	ip, [sp, #48]	; 0x30
   3c518:	mov	r7, r4
   3c51c:	b	3b330 <__assert_fail@plt+0x28880>
   3c520:	mov	r0, #996	; 0x3e4
   3c524:	bl	327ac <__assert_fail@plt+0x1fcfc>
   3c528:	cmp	r0, #0
   3c52c:	beq	3c650 <__assert_fail@plt+0x29ba0>
   3c530:	ldr	r1, [sl, #56]	; 0x38
   3c534:	ldr	r5, [sp, #28]
   3c538:	ldr	ip, [sp, #48]	; 0x30
   3c53c:	ldr	lr, [sp, #44]	; 0x2c
   3c540:	str	r1, [r0]
   3c544:	mov	r1, #0
   3c548:	str	r1, [sl, #64]	; 0x40
   3c54c:	str	r0, [sl, #56]	; 0x38
   3c550:	b	3b2ec <__assert_fail@plt+0x2883c>
   3c554:	mov	r0, #996	; 0x3e4
   3c558:	bl	327ac <__assert_fail@plt+0x1fcfc>
   3c55c:	cmp	r0, #0
   3c560:	beq	3c6ec <__assert_fail@plt+0x29c3c>
   3c564:	ldr	r1, [sl, #56]	; 0x38
   3c568:	ldr	ip, [sp, #48]	; 0x30
   3c56c:	ldr	lr, [sp, #44]	; 0x2c
   3c570:	mov	r9, #0
   3c574:	str	r1, [r0]
   3c578:	mov	r1, #0
   3c57c:	str	r1, [sl, #64]	; 0x40
   3c580:	str	r0, [sl, #56]	; 0x38
   3c584:	b	3b19c <__assert_fail@plt+0x286ec>
   3c588:	mov	r0, #996	; 0x3e4
   3c58c:	bl	327ac <__assert_fail@plt+0x1fcfc>
   3c590:	ldr	lr, [sp, #44]	; 0x2c
   3c594:	ldr	ip, [sp, #48]	; 0x30
   3c598:	cmp	r0, #0
   3c59c:	beq	3b230 <__assert_fail@plt+0x28780>
   3c5a0:	ldr	r1, [sl, #56]	; 0x38
   3c5a4:	str	r1, [r0]
   3c5a8:	mov	r1, #0
   3c5ac:	str	r1, [sl, #64]	; 0x40
   3c5b0:	str	r0, [sl, #56]	; 0x38
   3c5b4:	b	3b1e8 <__assert_fail@plt+0x28738>
   3c5b8:	mov	r0, #996	; 0x3e4
   3c5bc:	bl	327ac <__assert_fail@plt+0x1fcfc>
   3c5c0:	cmp	r0, #0
   3c5c4:	beq	3c7c0 <__assert_fail@plt+0x29d10>
   3c5c8:	ldr	r1, [sl, #56]	; 0x38
   3c5cc:	ldr	ip, [sp, #48]	; 0x30
   3c5d0:	ldr	lr, [sp, #44]	; 0x2c
   3c5d4:	mov	r9, #0
   3c5d8:	str	r1, [r0]
   3c5dc:	mov	r1, #0
   3c5e0:	str	r1, [sl, #64]	; 0x40
   3c5e4:	str	r0, [sl, #56]	; 0x38
   3c5e8:	b	3a510 <__assert_fail@plt+0x27a60>
   3c5ec:	mov	r0, #996	; 0x3e4
   3c5f0:	bl	327ac <__assert_fail@plt+0x1fcfc>
   3c5f4:	cmp	r0, #0
   3c5f8:	beq	3c7cc <__assert_fail@plt+0x29d1c>
   3c5fc:	ldr	r1, [sl, #56]	; 0x38
   3c600:	ldr	ip, [sp, #48]	; 0x30
   3c604:	ldr	lr, [sp, #44]	; 0x2c
   3c608:	mov	r9, #0
   3c60c:	str	r1, [r0]
   3c610:	mov	r1, #0
   3c614:	str	r1, [sl, #64]	; 0x40
   3c618:	str	r0, [sl, #56]	; 0x38
   3c61c:	b	3b148 <__assert_fail@plt+0x28698>
   3c620:	mov	r0, #996	; 0x3e4
   3c624:	bl	327ac <__assert_fail@plt+0x1fcfc>
   3c628:	cmp	r0, #0
   3c62c:	beq	3c650 <__assert_fail@plt+0x29ba0>
   3c630:	ldr	r1, [sl, #56]	; 0x38
   3c634:	ldr	ip, [sp, #48]	; 0x30
   3c638:	ldr	lr, [sp, #44]	; 0x2c
   3c63c:	str	r1, [r0]
   3c640:	mov	r1, #0
   3c644:	str	r1, [sl, #64]	; 0x40
   3c648:	str	r0, [sl, #56]	; 0x38
   3c64c:	b	3b24c <__assert_fail@plt+0x2879c>
   3c650:	mov	r0, #12
   3c654:	b	3c19c <__assert_fail@plt+0x296ec>
   3c658:	mov	r4, #0
   3c65c:	mov	r5, #0
   3c660:	b	3c66c <__assert_fail@plt+0x29bbc>
   3c664:	mov	r5, #4
   3c668:	mov	r4, #128	; 0x80
   3c66c:	bl	12768 <__ctype_b_loc@plt>
   3c670:	ldr	r0, [r0]
   3c674:	ldr	ip, [sp, #48]	; 0x30
   3c678:	ldr	lr, [sp, #44]	; 0x2c
   3c67c:	mov	r1, #1
   3c680:	mov	r9, #0
   3c684:	add	r7, r0, r4, lsl #1
   3c688:	b	3c6a0 <__assert_fail@plt+0x29bf0>
   3c68c:	add	r5, r5, #1
   3c690:	add	r7, r7, #64	; 0x40
   3c694:	add	r4, r4, #32
   3c698:	cmp	r5, #8
   3c69c:	beq	3a4e4 <__assert_fail@plt+0x27a34>
   3c6a0:	add	r0, sl, r5, lsl #2
   3c6a4:	mov	r3, #0
   3c6a8:	add	r2, r0, #96	; 0x60
   3c6ac:	mov	r0, r7
   3c6b0:	b	3c6d0 <__assert_fail@plt+0x29c20>
   3c6b4:	ldr	r6, [r2]
   3c6b8:	orr	r6, r6, r1, lsl r3
   3c6bc:	str	r6, [r2]
   3c6c0:	add	r3, r3, #1
   3c6c4:	add	r0, r0, #2
   3c6c8:	cmp	r3, #32
   3c6cc:	beq	3c68c <__assert_fail@plt+0x29bdc>
   3c6d0:	add	r6, r4, r3
   3c6d4:	cmp	r6, #95	; 0x5f
   3c6d8:	beq	3c6b4 <__assert_fail@plt+0x29c04>
   3c6dc:	ldrh	r6, [r0]
   3c6e0:	ands	r6, r6, #8
   3c6e4:	beq	3c6c0 <__assert_fail@plt+0x29c10>
   3c6e8:	b	3c6b4 <__assert_fail@plt+0x29c04>
   3c6ec:	ldr	ip, [sp, #48]	; 0x30
   3c6f0:	ldr	lr, [sp, #44]	; 0x2c
   3c6f4:	mov	r5, #0
   3c6f8:	mov	r9, #0
   3c6fc:	b	3b1d8 <__assert_fail@plt+0x28728>
   3c700:	cmp	r9, #0
   3c704:	beq	3c7a4 <__assert_fail@plt+0x29cf4>
   3c708:	movw	r5, #255	; 0xff
   3c70c:	movt	r5, #4
   3c710:	mov	r6, r9
   3c714:	ldr	r9, [r9, #4]
   3c718:	cmp	r9, #0
   3c71c:	bne	3c710 <__assert_fail@plt+0x29c60>
   3c720:	ldr	r9, [r6, #8]
   3c724:	cmp	r9, #0
   3c728:	bne	3c710 <__assert_fail@plt+0x29c60>
   3c72c:	ldr	r0, [r6, #24]
   3c730:	and	r0, r0, r5
   3c734:	cmp	r0, #3
   3c738:	beq	3c76c <__assert_fail@plt+0x29cbc>
   3c73c:	cmp	r0, #6
   3c740:	bne	3c778 <__assert_fail@plt+0x29cc8>
   3c744:	ldr	r4, [r6, #20]
   3c748:	ldr	r0, [r4]
   3c74c:	bl	30174 <__assert_fail@plt+0x1d6c4>
   3c750:	ldr	r0, [r4, #4]
   3c754:	bl	30174 <__assert_fail@plt+0x1d6c4>
   3c758:	ldr	r0, [r4, #8]
   3c75c:	bl	30174 <__assert_fail@plt+0x1d6c4>
   3c760:	ldr	r0, [r4, #12]
   3c764:	bl	30174 <__assert_fail@plt+0x1d6c4>
   3c768:	b	3c770 <__assert_fail@plt+0x29cc0>
   3c76c:	ldr	r4, [r6, #20]
   3c770:	mov	r0, r4
   3c774:	bl	30174 <__assert_fail@plt+0x1d6c4>
   3c778:	ldr	r0, [r6]
   3c77c:	cmp	r0, #0
   3c780:	beq	3c7a4 <__assert_fail@plt+0x29cf4>
   3c784:	ldr	r9, [r0, #8]
   3c788:	cmp	r9, r6
   3c78c:	mov	r6, r0
   3c790:	beq	3c72c <__assert_fail@plt+0x29c7c>
   3c794:	cmp	r9, #0
   3c798:	mov	r6, r0
   3c79c:	beq	3c72c <__assert_fail@plt+0x29c7c>
   3c7a0:	b	3c710 <__assert_fail@plt+0x29c60>
   3c7a4:	mov	r0, #8
   3c7a8:	b	3c19c <__assert_fail@plt+0x296ec>
   3c7ac:	ldr	r8, [sp, #24]
   3c7b0:	mov	r9, r0
   3c7b4:	b	3c2fc <__assert_fail@plt+0x2984c>
   3c7b8:	ldr	r8, [sp, #24]
   3c7bc:	b	3c500 <__assert_fail@plt+0x29a50>
   3c7c0:	mov	r4, #0
   3c7c4:	mov	r0, #9
   3c7c8:	b	3c7d4 <__assert_fail@plt+0x29d24>
   3c7cc:	mov	r4, #0
   3c7d0:	mov	r0, #10
   3c7d4:	ldr	ip, [sp, #48]	; 0x30
   3c7d8:	ldr	lr, [sp, #44]	; 0x2c
   3c7dc:	mov	r9, #0
   3c7e0:	b	3b188 <__assert_fail@plt+0x286d8>
   3c7e4:	mov	r0, #996	; 0x3e4
   3c7e8:	bl	327ac <__assert_fail@plt+0x1fcfc>
   3c7ec:	cmp	r0, #0
   3c7f0:	beq	3c814 <__assert_fail@plt+0x29d64>
   3c7f4:	ldr	r1, [sl, #56]	; 0x38
   3c7f8:	str	r1, [r0]
   3c7fc:	mov	r1, #0
   3c800:	str	r1, [sl, #64]	; 0x40
   3c804:	str	r0, [sl, #56]	; 0x38
   3c808:	b	3c2b0 <__assert_fail@plt+0x29800>
   3c80c:	ldr	r5, [sp, #28]
   3c810:	ldr	r7, [sp, #60]	; 0x3c
   3c814:	ldr	r4, [sp, #20]
   3c818:	mov	r0, #12
   3c81c:	str	r0, [r4]
   3c820:	b	3c314 <__assert_fail@plt+0x29864>
   3c824:	mov	r0, r6
   3c828:	bl	30174 <__assert_fail@plt+0x1d6c4>
   3c82c:	mov	r0, r9
   3c830:	bl	30174 <__assert_fail@plt+0x1d6c4>
   3c834:	ldr	r8, [sp, #24]
   3c838:	mov	r9, #12
   3c83c:	b	3c2fc <__assert_fail@plt+0x2984c>
   3c840:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   3c844:	add	fp, sp, #28
   3c848:	sub	sp, sp, #12
   3c84c:	mov	r9, r1
   3c850:	mov	r6, r0
   3c854:	mov	r4, #0
   3c858:	mov	r0, #32
   3c85c:	mov	r1, #1
   3c860:	mov	sl, r3
   3c864:	mov	r5, r2
   3c868:	str	r4, [sp, #8]
   3c86c:	bl	2fb8c <__assert_fail@plt+0x1d0dc>
   3c870:	ldr	r1, [fp, #12]
   3c874:	cmp	r0, #0
   3c878:	beq	3cbc8 <__assert_fail@plt+0x2a118>
   3c87c:	mov	r7, r0
   3c880:	mov	r0, #40	; 0x28
   3c884:	mov	r1, #1
   3c888:	bl	2fb8c <__assert_fail@plt+0x1d0dc>
   3c88c:	cmp	r0, #0
   3c890:	beq	3cae8 <__assert_fail@plt+0x2a038>
   3c894:	mov	r8, r0
   3c898:	ldrb	r0, [r0, #16]
   3c89c:	ldr	r1, [fp, #8]
   3c8a0:	mov	r4, #0
   3c8a4:	add	r3, sp, #8
   3c8a8:	str	r5, [sp]
   3c8ac:	mov	r2, r8
   3c8b0:	str	r4, [sp, #4]
   3c8b4:	and	r0, r0, #254	; 0xfe
   3c8b8:	orr	r0, r0, r1
   3c8bc:	mov	r1, r7
   3c8c0:	strb	r0, [r8, #16]
   3c8c4:	mov	r0, r9
   3c8c8:	bl	3d040 <__assert_fail@plt+0x2a590>
   3c8cc:	cmp	r0, #0
   3c8d0:	bne	3cb04 <__assert_fail@plt+0x2a054>
   3c8d4:	ldrb	r0, [sl]
   3c8d8:	cmp	r0, #0
   3c8dc:	beq	3c908 <__assert_fail@plt+0x29e58>
   3c8e0:	add	r1, sl, #1
   3c8e4:	mov	r2, #1
   3c8e8:	ubfx	r3, r0, #5, #3
   3c8ec:	and	r0, r0, #31
   3c8f0:	ldr	r5, [r7, r3, lsl #2]
   3c8f4:	orr	r0, r5, r2, lsl r0
   3c8f8:	str	r0, [r7, r3, lsl #2]
   3c8fc:	ldrb	r0, [r1], #1
   3c900:	cmp	r0, #0
   3c904:	bne	3c8e8 <__assert_fail@plt+0x29e38>
   3c908:	ldr	r0, [fp, #8]
   3c90c:	cmp	r0, #0
   3c910:	beq	3c930 <__assert_fail@plt+0x29e80>
   3c914:	vld1.32	{d16-d17}, [r7]
   3c918:	mov	r0, r7
   3c91c:	vmvn	q8, q8
   3c920:	vst1.32	{d16-d17}, [r0]!
   3c924:	vld1.32	{d16-d17}, [r0]
   3c928:	vmvn	q8, q8
   3c92c:	vst1.32	{d16-d17}, [r0]
   3c930:	ldr	r0, [r6, #92]	; 0x5c
   3c934:	cmp	r0, #2
   3c938:	blt	3c9b4 <__assert_fail@plt+0x29f04>
   3c93c:	ldr	r5, [r6, #60]	; 0x3c
   3c940:	ldm	r7, {r0, r1, r2, ip}
   3c944:	ldr	r3, [r5]
   3c948:	and	r0, r0, r3
   3c94c:	str	r0, [r7]
   3c950:	ldr	r0, [r5, #4]
   3c954:	and	r0, r1, r0
   3c958:	str	r0, [r7, #4]
   3c95c:	ldr	r0, [r5, #8]
   3c960:	and	r0, r2, r0
   3c964:	str	r0, [r7, #8]
   3c968:	ldr	r0, [r5, #12]
   3c96c:	and	r0, ip, r0
   3c970:	str	r0, [r7, #12]
   3c974:	ldr	r0, [r7, #16]
   3c978:	ldr	r1, [r5, #16]
   3c97c:	and	r0, r0, r1
   3c980:	str	r0, [r7, #16]
   3c984:	ldr	r0, [r5, #20]
   3c988:	ldr	r1, [r7, #20]
   3c98c:	and	r0, r1, r0
   3c990:	str	r0, [r7, #20]
   3c994:	ldr	r0, [r5, #24]
   3c998:	ldr	r1, [r7, #24]
   3c99c:	and	r0, r1, r0
   3c9a0:	str	r0, [r7, #24]
   3c9a4:	ldr	r0, [r5, #28]
   3c9a8:	ldr	r1, [r7, #28]
   3c9ac:	and	r0, r1, r0
   3c9b0:	str	r0, [r7, #28]
   3c9b4:	ldr	r1, [r6, #64]	; 0x40
   3c9b8:	cmp	r1, #31
   3c9bc:	beq	3cb44 <__assert_fail@plt+0x2a094>
   3c9c0:	ldr	r0, [r6, #56]	; 0x38
   3c9c4:	add	r0, r0, r1, lsl #5
   3c9c8:	add	r2, r1, #1
   3c9cc:	vmov.i32	q8, #0	; 0x00000000
   3c9d0:	mov	r1, #3
   3c9d4:	str	r2, [r6, #64]	; 0x40
   3c9d8:	mov	r2, #0
   3c9dc:	add	r5, r0, #4
   3c9e0:	str	r2, [r0, #20]
   3c9e4:	str	r7, [r0, #24]
   3c9e8:	str	r1, [r0, #28]
   3c9ec:	mov	r0, #28
   3c9f0:	mov	r1, r5
   3c9f4:	vst1.32	{d16-d17}, [r1], r0
   3c9f8:	mvn	r0, #0
   3c9fc:	str	r0, [r1]
   3ca00:	ldr	r0, [r6, #92]	; 0x5c
   3ca04:	cmp	r0, #2
   3ca08:	blt	3cab0 <__assert_fail@plt+0x2a000>
   3ca0c:	ldrb	r0, [r6, #88]	; 0x58
   3ca10:	orr	r0, r0, #2
   3ca14:	strb	r0, [r6, #88]	; 0x58
   3ca18:	ldr	r1, [r6, #64]	; 0x40
   3ca1c:	cmp	r1, #31
   3ca20:	beq	3cb6c <__assert_fail@plt+0x2a0bc>
   3ca24:	ldr	r0, [r6, #56]	; 0x38
   3ca28:	add	r0, r0, r1, lsl #5
   3ca2c:	vmov.i32	q8, #0	; 0x00000000
   3ca30:	add	r2, r1, #1
   3ca34:	mov	r1, #6
   3ca38:	mov	r4, #0
   3ca3c:	str	r2, [r6, #64]	; 0x40
   3ca40:	add	r7, r0, #4
   3ca44:	str	r4, [r0, #20]
   3ca48:	str	r8, [r0, #24]
   3ca4c:	str	r1, [r0, #28]
   3ca50:	mov	r0, #28
   3ca54:	mov	r1, r7
   3ca58:	vst1.32	{d16-d17}, [r1], r0
   3ca5c:	mvn	r0, #0
   3ca60:	str	r0, [r1]
   3ca64:	ldr	r1, [r6, #64]	; 0x40
   3ca68:	cmp	r1, #31
   3ca6c:	beq	3cbd4 <__assert_fail@plt+0x2a124>
   3ca70:	ldr	r0, [r6, #56]	; 0x38
   3ca74:	add	r4, r0, r1, lsl #5
   3ca78:	add	r2, r1, #1
   3ca7c:	mov	r0, #0
   3ca80:	mov	r1, #10
   3ca84:	str	r2, [r6, #64]	; 0x40
   3ca88:	mvn	r2, #0
   3ca8c:	str	r0, [r4, #4]!
   3ca90:	add	r3, r4, #20
   3ca94:	stmib	r4, {r5, r7}
   3ca98:	str	r0, [r4, #12]
   3ca9c:	str	r0, [r4, #16]
   3caa0:	stm	r3, {r0, r1, r2}
   3caa4:	str	r4, [r5]
   3caa8:	str	r4, [r7]
   3caac:	b	3cadc <__assert_fail@plt+0x2a02c>
   3cab0:	ldr	r0, [r8]
   3cab4:	bl	30174 <__assert_fail@plt+0x1d6c4>
   3cab8:	ldr	r0, [r8, #4]
   3cabc:	bl	30174 <__assert_fail@plt+0x1d6c4>
   3cac0:	ldr	r0, [r8, #8]
   3cac4:	bl	30174 <__assert_fail@plt+0x1d6c4>
   3cac8:	ldr	r0, [r8, #12]
   3cacc:	bl	30174 <__assert_fail@plt+0x1d6c4>
   3cad0:	mov	r0, r8
   3cad4:	bl	30174 <__assert_fail@plt+0x1d6c4>
   3cad8:	mov	r4, r5
   3cadc:	mov	r0, r4
   3cae0:	sub	sp, fp, #28
   3cae4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   3cae8:	mov	r0, r7
   3caec:	bl	30174 <__assert_fail@plt+0x1d6c4>
   3caf0:	ldr	r1, [fp, #12]
   3caf4:	mov	r0, #12
   3caf8:	mov	r4, #0
   3cafc:	str	r0, [r1]
   3cb00:	b	3cadc <__assert_fail@plt+0x2a02c>
   3cb04:	mov	r5, r0
   3cb08:	mov	r0, r7
   3cb0c:	bl	30174 <__assert_fail@plt+0x1d6c4>
   3cb10:	ldr	r0, [r8]
   3cb14:	bl	30174 <__assert_fail@plt+0x1d6c4>
   3cb18:	ldr	r0, [r8, #4]
   3cb1c:	bl	30174 <__assert_fail@plt+0x1d6c4>
   3cb20:	ldr	r0, [r8, #8]
   3cb24:	bl	30174 <__assert_fail@plt+0x1d6c4>
   3cb28:	ldr	r0, [r8, #12]
   3cb2c:	bl	30174 <__assert_fail@plt+0x1d6c4>
   3cb30:	mov	r0, r8
   3cb34:	bl	30174 <__assert_fail@plt+0x1d6c4>
   3cb38:	ldr	r0, [fp, #12]
   3cb3c:	str	r5, [r0]
   3cb40:	b	3cadc <__assert_fail@plt+0x2a02c>
   3cb44:	mov	r0, #996	; 0x3e4
   3cb48:	bl	327ac <__assert_fail@plt+0x1fcfc>
   3cb4c:	cmp	r0, #0
   3cb50:	beq	3cb94 <__assert_fail@plt+0x2a0e4>
   3cb54:	ldr	r1, [r6, #56]	; 0x38
   3cb58:	str	r1, [r0]
   3cb5c:	mov	r1, #0
   3cb60:	str	r1, [r6, #64]	; 0x40
   3cb64:	str	r0, [r6, #56]	; 0x38
   3cb68:	b	3c9c4 <__assert_fail@plt+0x29f14>
   3cb6c:	mov	r0, #996	; 0x3e4
   3cb70:	bl	327ac <__assert_fail@plt+0x1fcfc>
   3cb74:	cmp	r0, #0
   3cb78:	beq	3cb94 <__assert_fail@plt+0x2a0e4>
   3cb7c:	ldr	r1, [r6, #56]	; 0x38
   3cb80:	str	r1, [r0]
   3cb84:	mov	r1, #0
   3cb88:	str	r1, [r6, #64]	; 0x40
   3cb8c:	str	r0, [r6, #56]	; 0x38
   3cb90:	b	3ca28 <__assert_fail@plt+0x29f78>
   3cb94:	mov	r0, r7
   3cb98:	bl	30174 <__assert_fail@plt+0x1d6c4>
   3cb9c:	ldr	r0, [r8]
   3cba0:	bl	30174 <__assert_fail@plt+0x1d6c4>
   3cba4:	ldr	r0, [r8, #4]
   3cba8:	bl	30174 <__assert_fail@plt+0x1d6c4>
   3cbac:	ldr	r0, [r8, #8]
   3cbb0:	bl	30174 <__assert_fail@plt+0x1d6c4>
   3cbb4:	ldr	r0, [r8, #12]
   3cbb8:	bl	30174 <__assert_fail@plt+0x1d6c4>
   3cbbc:	mov	r0, r8
   3cbc0:	bl	30174 <__assert_fail@plt+0x1d6c4>
   3cbc4:	ldr	r1, [fp, #12]
   3cbc8:	mov	r0, #12
   3cbcc:	str	r0, [r1]
   3cbd0:	b	3cadc <__assert_fail@plt+0x2a02c>
   3cbd4:	mov	r0, #996	; 0x3e4
   3cbd8:	bl	327ac <__assert_fail@plt+0x1fcfc>
   3cbdc:	cmp	r0, #0
   3cbe0:	beq	3cadc <__assert_fail@plt+0x2a02c>
   3cbe4:	ldr	r1, [r6, #56]	; 0x38
   3cbe8:	str	r1, [r0]
   3cbec:	mov	r1, #0
   3cbf0:	str	r1, [r6, #64]	; 0x40
   3cbf4:	str	r0, [r6, #56]	; 0x38
   3cbf8:	b	3ca74 <__assert_fail@plt+0x29fc4>
   3cbfc:	push	{fp, lr}
   3cc00:	mov	fp, sp
   3cc04:	ldr	ip, [r1, #40]	; 0x28
   3cc08:	ldr	r3, [r1, #56]	; 0x38
   3cc0c:	cmp	r3, ip
   3cc10:	ble	3cc90 <__assert_fail@plt+0x2a1e0>
   3cc14:	ldr	r3, [r1, #4]
   3cc18:	ldrb	lr, [r3, ip]
   3cc1c:	strb	lr, [r0]
   3cc20:	ldr	r3, [r1, #80]	; 0x50
   3cc24:	cmp	r3, #2
   3cc28:	blt	3cc4c <__assert_fail@plt+0x2a19c>
   3cc2c:	ldr	r3, [r1, #28]
   3cc30:	ldr	ip, [r1, #40]	; 0x28
   3cc34:	cmp	ip, r3
   3cc38:	beq	3cc4c <__assert_fail@plt+0x2a19c>
   3cc3c:	ldr	r3, [r1, #8]
   3cc40:	ldr	r3, [r3, ip, lsl #2]
   3cc44:	cmn	r3, #1
   3cc48:	beq	3cd40 <__assert_fail@plt+0x2a290>
   3cc4c:	tst	r2, #1
   3cc50:	beq	3cca4 <__assert_fail@plt+0x2a1f4>
   3cc54:	cmp	lr, #92	; 0x5c
   3cc58:	bne	3cca4 <__assert_fail@plt+0x2a1f4>
   3cc5c:	ldr	r2, [r1, #40]	; 0x28
   3cc60:	ldr	r3, [r1, #48]	; 0x30
   3cc64:	add	r2, r2, #1
   3cc68:	cmp	r2, r3
   3cc6c:	bge	3cd40 <__assert_fail@plt+0x2a290>
   3cc70:	str	r2, [r1, #40]	; 0x28
   3cc74:	ldr	r1, [r1, #4]
   3cc78:	ldrb	r2, [r1, r2]
   3cc7c:	mov	r1, #1
   3cc80:	strb	r1, [r0, #4]
   3cc84:	strb	r2, [r0]
   3cc88:	mov	r0, r1
   3cc8c:	pop	{fp, pc}
   3cc90:	mov	r1, #2
   3cc94:	strb	r1, [r0, #4]
   3cc98:	mov	r1, #0
   3cc9c:	mov	r0, r1
   3cca0:	pop	{fp, pc}
   3cca4:	cmp	lr, #92	; 0x5c
   3cca8:	bgt	3ccfc <__assert_fail@plt+0x2a24c>
   3ccac:	cmp	lr, #45	; 0x2d
   3ccb0:	beq	3cd14 <__assert_fail@plt+0x2a264>
   3ccb4:	cmp	lr, #91	; 0x5b
   3ccb8:	bne	3cd40 <__assert_fail@plt+0x2a290>
   3ccbc:	ldr	r3, [r1, #40]	; 0x28
   3ccc0:	ldr	ip, [r1, #48]	; 0x30
   3ccc4:	add	r3, r3, #1
   3ccc8:	cmp	r3, ip
   3cccc:	bge	3cd30 <__assert_fail@plt+0x2a280>
   3ccd0:	ldr	r1, [r1, #4]
   3ccd4:	ldrb	r1, [r1, r3]
   3ccd8:	cmp	r1, #61	; 0x3d
   3ccdc:	strb	r1, [r0]
   3cce0:	beq	3cd50 <__assert_fail@plt+0x2a2a0>
   3cce4:	cmp	r1, #58	; 0x3a
   3cce8:	beq	3cd58 <__assert_fail@plt+0x2a2a8>
   3ccec:	cmp	r1, #46	; 0x2e
   3ccf0:	bne	3cd38 <__assert_fail@plt+0x2a288>
   3ccf4:	mov	r1, #26
   3ccf8:	b	3cd64 <__assert_fail@plt+0x2a2b4>
   3ccfc:	cmp	lr, #93	; 0x5d
   3cd00:	beq	3cd1c <__assert_fail@plt+0x2a26c>
   3cd04:	cmp	lr, #94	; 0x5e
   3cd08:	bne	3cd40 <__assert_fail@plt+0x2a290>
   3cd0c:	mov	r1, #25
   3cd10:	b	3cd20 <__assert_fail@plt+0x2a270>
   3cd14:	mov	r1, #22
   3cd18:	b	3cd20 <__assert_fail@plt+0x2a270>
   3cd1c:	mov	r1, #21
   3cd20:	strb	r1, [r0, #4]
   3cd24:	mov	r1, #1
   3cd28:	mov	r0, r1
   3cd2c:	pop	{fp, pc}
   3cd30:	mov	r1, #0
   3cd34:	strb	r1, [r0]
   3cd38:	mov	r1, #91	; 0x5b
   3cd3c:	strb	r1, [r0]
   3cd40:	mov	r1, #1
   3cd44:	strb	r1, [r0, #4]
   3cd48:	mov	r0, r1
   3cd4c:	pop	{fp, pc}
   3cd50:	mov	r1, #28
   3cd54:	b	3cd64 <__assert_fail@plt+0x2a2b4>
   3cd58:	tst	r2, #4
   3cd5c:	beq	3cd38 <__assert_fail@plt+0x2a288>
   3cd60:	mov	r1, #30
   3cd64:	strb	r1, [r0, #4]
   3cd68:	mov	r1, #2
   3cd6c:	mov	r0, r1
   3cd70:	pop	{fp, pc}
   3cd74:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   3cd78:	add	fp, sp, #24
   3cd7c:	sub	sp, sp, #8
   3cd80:	mov	r5, r2
   3cd84:	ldr	r2, [r1, #80]	; 0x50
   3cd88:	mov	r9, r0
   3cd8c:	ldr	r0, [r1, #40]	; 0x28
   3cd90:	cmp	r2, #1
   3cd94:	beq	3ce0c <__assert_fail@plt+0x2a35c>
   3cd98:	ldr	r2, [r1, #28]
   3cd9c:	add	r6, r0, #1
   3cda0:	cmp	r6, r2
   3cda4:	bge	3ce0c <__assert_fail@plt+0x2a35c>
   3cda8:	ldr	lr, [r1, #8]
   3cdac:	sub	r4, r0, r2
   3cdb0:	sub	ip, r2, r0
   3cdb4:	mvn	r2, #0
   3cdb8:	add	r6, lr, r0, lsl #2
   3cdbc:	ldr	r7, [r6, -r2, lsl #2]
   3cdc0:	cmn	r7, #1
   3cdc4:	bne	3cdd8 <__assert_fail@plt+0x2a328>
   3cdc8:	sub	r2, r2, #1
   3cdcc:	cmp	r4, r2
   3cdd0:	bne	3cdbc <__assert_fail@plt+0x2a30c>
   3cdd4:	b	3cde4 <__assert_fail@plt+0x2a334>
   3cdd8:	rsb	ip, r2, #0
   3cddc:	cmp	ip, #2
   3cde0:	bcc	3ce0c <__assert_fail@plt+0x2a35c>
   3cde4:	mov	r2, #1
   3cde8:	str	r2, [r9]
   3cdec:	ldr	r0, [lr, r0, lsl #2]
   3cdf0:	str	r0, [r9, #4]
   3cdf4:	ldr	r0, [r1, #40]	; 0x28
   3cdf8:	add	r0, r0, ip
   3cdfc:	str	r0, [r1, #40]	; 0x28
   3ce00:	mov	r0, #0
   3ce04:	sub	sp, fp, #24
   3ce08:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   3ce0c:	add	r2, r0, r3
   3ce10:	str	r2, [r1, #40]	; 0x28
   3ce14:	ldrb	r6, [r5, #4]
   3ce18:	sub	r0, r6, #22
   3ce1c:	cmp	r0, #8
   3ce20:	bhi	3d028 <__assert_fail@plt+0x2a578>
   3ce24:	add	r3, pc, #0
   3ce28:	ldr	pc, [r3, r0, lsl #2]
   3ce2c:	andeq	sp, r3, r0
   3ce30:	andeq	sp, r3, r8, lsr #32
   3ce34:	andeq	sp, r3, r8, lsr #32
   3ce38:	andeq	sp, r3, r8, lsr #32
   3ce3c:	andeq	ip, r3, r0, asr lr
   3ce40:	andeq	sp, r3, r8, lsr #32
   3ce44:	andeq	ip, r3, r0, asr lr
   3ce48:	andeq	sp, r3, r8, lsr #32
   3ce4c:	andeq	ip, r3, r0, asr lr
   3ce50:	ldr	r3, [r1, #56]	; 0x38
   3ce54:	mov	r0, #7
   3ce58:	cmp	r3, r2
   3ce5c:	ble	3d038 <__assert_fail@plt+0x2a588>
   3ce60:	ldrb	r3, [r5]
   3ce64:	mov	r2, #0
   3ce68:	uxtb	r7, r6
   3ce6c:	cmp	r7, #30
   3ce70:	bne	3ce80 <__assert_fail@plt+0x2a3d0>
   3ce74:	ldrb	r7, [r1, #75]	; 0x4b
   3ce78:	cmp	r7, #0
   3ce7c:	bne	3ced8 <__assert_fail@plt+0x2a428>
   3ce80:	ldr	r4, [r1, #40]	; 0x28
   3ce84:	ldr	r7, [r1, #4]
   3ce88:	add	r6, r4, #1
   3ce8c:	str	r6, [r1, #40]	; 0x28
   3ce90:	ldrb	r4, [r7, r4]
   3ce94:	ldr	r7, [r1, #56]	; 0x38
   3ce98:	cmp	r7, r6
   3ce9c:	ble	3d038 <__assert_fail@plt+0x2a588>
   3cea0:	uxtb	r7, r4
   3cea4:	cmp	r7, r3
   3cea8:	bne	3cebc <__assert_fail@plt+0x2a40c>
   3ceac:	ldr	r7, [r1, #4]
   3ceb0:	ldrb	r7, [r7, r6]
   3ceb4:	cmp	r7, #93	; 0x5d
   3ceb8:	beq	3cfb0 <__assert_fail@plt+0x2a500>
   3cebc:	ldr	r7, [r9, #4]
   3cec0:	strb	r4, [r7, r2]
   3cec4:	add	r2, r2, #1
   3cec8:	cmp	r2, #32
   3cecc:	beq	3d038 <__assert_fail@plt+0x2a588>
   3ced0:	ldrb	r6, [r5, #4]
   3ced4:	b	3ce68 <__assert_fail@plt+0x2a3b8>
   3ced8:	ldrb	r7, [r1, #76]	; 0x4c
   3cedc:	cmp	r7, #0
   3cee0:	beq	3cf7c <__assert_fail@plt+0x2a4cc>
   3cee4:	ldr	lr, [r1, #28]
   3cee8:	ldr	ip, [r1, #40]	; 0x28
   3ceec:	cmp	lr, ip
   3cef0:	beq	3cf04 <__assert_fail@plt+0x2a454>
   3cef4:	ldr	r4, [r1, #8]
   3cef8:	ldr	r4, [r4, ip, lsl #2]
   3cefc:	cmn	r4, #1
   3cf00:	beq	3cf9c <__assert_fail@plt+0x2a4ec>
   3cf04:	ldr	r6, [r1, #12]
   3cf08:	ldr	r7, [r1, #24]
   3cf0c:	ldr	r4, [r1]
   3cf10:	ldr	r6, [r6, ip, lsl #2]
   3cf14:	add	r6, r7, r6
   3cf18:	add	r4, r4, r6
   3cf1c:	ldrsb	r4, [r4]
   3cf20:	cmn	r4, #1
   3cf24:	ble	3cf9c <__assert_fail@plt+0x2a4ec>
   3cf28:	ldr	r7, [r1, #80]	; 0x50
   3cf2c:	mov	r6, #1
   3cf30:	cmp	r7, #1
   3cf34:	beq	3cf70 <__assert_fail@plt+0x2a4c0>
   3cf38:	add	r7, ip, #1
   3cf3c:	cmp	r7, lr
   3cf40:	bge	3cf70 <__assert_fail@plt+0x2a4c0>
   3cf44:	ldr	r6, [r1, #8]
   3cf48:	sub	lr, lr, ip
   3cf4c:	add	r8, r6, ip, lsl #2
   3cf50:	mov	r6, #1
   3cf54:	ldr	r7, [r8, r6, lsl #2]
   3cf58:	cmn	r7, #1
   3cf5c:	bne	3cf70 <__assert_fail@plt+0x2a4c0>
   3cf60:	add	r6, r6, #1
   3cf64:	cmp	lr, r6
   3cf68:	bne	3cf54 <__assert_fail@plt+0x2a4a4>
   3cf6c:	mov	r6, lr
   3cf70:	add	r6, r6, ip
   3cf74:	str	r6, [r1, #40]	; 0x28
   3cf78:	b	3ce94 <__assert_fail@plt+0x2a3e4>
   3cf7c:	ldr	r7, [r1, #40]	; 0x28
   3cf80:	ldr	r4, [r1, #24]
   3cf84:	ldr	ip, [r1]
   3cf88:	add	r6, r7, #1
   3cf8c:	add	r7, r7, r4
   3cf90:	str	r6, [r1, #40]	; 0x28
   3cf94:	ldrb	r4, [ip, r7]
   3cf98:	b	3ce94 <__assert_fail@plt+0x2a3e4>
   3cf9c:	add	r6, ip, #1
   3cfa0:	str	r6, [r1, #40]	; 0x28
   3cfa4:	ldr	r7, [r1, #4]
   3cfa8:	ldrb	r4, [r7, ip]
   3cfac:	b	3ce94 <__assert_fail@plt+0x2a3e4>
   3cfb0:	add	r0, r6, #1
   3cfb4:	str	r0, [r1, #40]	; 0x28
   3cfb8:	mov	r0, #0
   3cfbc:	ldr	r1, [r9, #4]
   3cfc0:	strb	r0, [r1, r2]
   3cfc4:	ldrb	r1, [r5, #4]
   3cfc8:	cmp	r1, #30
   3cfcc:	beq	3cfe8 <__assert_fail@plt+0x2a538>
   3cfd0:	cmp	r1, #28
   3cfd4:	beq	3cff0 <__assert_fail@plt+0x2a540>
   3cfd8:	cmp	r1, #26
   3cfdc:	bne	3d038 <__assert_fail@plt+0x2a588>
   3cfe0:	mov	r1, #3
   3cfe4:	b	3cff4 <__assert_fail@plt+0x2a544>
   3cfe8:	mov	r1, #4
   3cfec:	b	3cff4 <__assert_fail@plt+0x2a544>
   3cff0:	mov	r1, #2
   3cff4:	str	r1, [r9]
   3cff8:	sub	sp, fp, #24
   3cffc:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   3d000:	ldr	r0, [fp, #12]
   3d004:	cmp	r0, #0
   3d008:	bne	3d028 <__assert_fail@plt+0x2a578>
   3d00c:	ldr	r2, [fp, #8]
   3d010:	mov	r0, sp
   3d014:	bl	3cbfc <__assert_fail@plt+0x2a14c>
   3d018:	ldrb	r1, [sp, #4]
   3d01c:	mov	r0, #11
   3d020:	cmp	r1, #21
   3d024:	bne	3d038 <__assert_fail@plt+0x2a588>
   3d028:	mov	r0, #0
   3d02c:	str	r0, [r9]
   3d030:	ldrb	r1, [r5]
   3d034:	strb	r1, [r9, #4]
   3d038:	sub	sp, fp, #24
   3d03c:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   3d040:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   3d044:	add	fp, sp, #24
   3d048:	mov	r8, r0
   3d04c:	ldrb	r0, [fp, #14]
   3d050:	ldr	r6, [fp, #8]
   3d054:	mov	r5, r3
   3d058:	mov	r7, r2
   3d05c:	mov	r4, r1
   3d060:	tst	r0, #64	; 0x40
   3d064:	beq	3d0a0 <__assert_fail@plt+0x2a5f0>
   3d068:	movw	r1, #55860	; 0xda34
   3d06c:	mov	r0, r6
   3d070:	movt	r1, #4
   3d074:	bl	123fc <strcmp@plt>
   3d078:	cmp	r0, #0
   3d07c:	beq	3d098 <__assert_fail@plt+0x2a5e8>
   3d080:	movw	r1, #55866	; 0xda3a
   3d084:	mov	r0, r6
   3d088:	movt	r1, #4
   3d08c:	bl	123fc <strcmp@plt>
   3d090:	cmp	r0, #0
   3d094:	bne	3d0a0 <__assert_fail@plt+0x2a5f0>
   3d098:	movw	r6, #55872	; 0xda40
   3d09c:	movt	r6, #4
   3d0a0:	ldr	r0, [r5]
   3d0a4:	ldr	r1, [r7, #36]	; 0x24
   3d0a8:	cmp	r0, r1
   3d0ac:	beq	3d5d4 <__assert_fail@plt+0x2ab24>
   3d0b0:	mov	r0, r6
   3d0b4:	bl	1239c <wctype@plt>
   3d0b8:	ldr	r2, [r7, #36]	; 0x24
   3d0bc:	ldr	r1, [r7, #12]
   3d0c0:	add	r3, r2, #1
   3d0c4:	str	r3, [r7, #36]	; 0x24
   3d0c8:	str	r0, [r1, r2, lsl #2]
   3d0cc:	movw	r1, #55846	; 0xda26
   3d0d0:	mov	r0, r6
   3d0d4:	movt	r1, #4
   3d0d8:	bl	123fc <strcmp@plt>
   3d0dc:	cmp	r0, #0
   3d0e0:	beq	3d210 <__assert_fail@plt+0x2a760>
   3d0e4:	movw	r1, #55878	; 0xda46
   3d0e8:	mov	r0, r6
   3d0ec:	movt	r1, #4
   3d0f0:	bl	123fc <strcmp@plt>
   3d0f4:	cmp	r0, #0
   3d0f8:	beq	3d260 <__assert_fail@plt+0x2a7b0>
   3d0fc:	movw	r1, #55866	; 0xda3a
   3d100:	mov	r0, r6
   3d104:	movt	r1, #4
   3d108:	bl	123fc <strcmp@plt>
   3d10c:	cmp	r0, #0
   3d110:	beq	3d2b0 <__assert_fail@plt+0x2a800>
   3d114:	movw	r1, #55854	; 0xda2e
   3d118:	mov	r0, r6
   3d11c:	movt	r1, #4
   3d120:	bl	123fc <strcmp@plt>
   3d124:	cmp	r0, #0
   3d128:	beq	3d300 <__assert_fail@plt+0x2a850>
   3d12c:	movw	r1, #55872	; 0xda40
   3d130:	mov	r0, r6
   3d134:	movt	r1, #4
   3d138:	bl	123fc <strcmp@plt>
   3d13c:	cmp	r0, #0
   3d140:	beq	3d388 <__assert_fail@plt+0x2a8d8>
   3d144:	movw	r1, #55903	; 0xda5f
   3d148:	mov	r0, r6
   3d14c:	movt	r1, #4
   3d150:	bl	123fc <strcmp@plt>
   3d154:	cmp	r0, #0
   3d158:	beq	3d3d8 <__assert_fail@plt+0x2a928>
   3d15c:	movw	r1, #34528	; 0x86e0
   3d160:	mov	r0, r6
   3d164:	movt	r1, #4
   3d168:	bl	123fc <strcmp@plt>
   3d16c:	cmp	r0, #0
   3d170:	beq	3d430 <__assert_fail@plt+0x2a980>
   3d174:	movw	r1, #55860	; 0xda34
   3d178:	mov	r0, r6
   3d17c:	movt	r1, #4
   3d180:	bl	123fc <strcmp@plt>
   3d184:	cmp	r0, #0
   3d188:	beq	3d484 <__assert_fail@plt+0x2a9d4>
   3d18c:	movw	r1, #55884	; 0xda4c
   3d190:	mov	r0, r6
   3d194:	movt	r1, #4
   3d198:	bl	123fc <strcmp@plt>
   3d19c:	cmp	r0, #0
   3d1a0:	beq	3d4d8 <__assert_fail@plt+0x2aa28>
   3d1a4:	movw	r1, #55890	; 0xda52
   3d1a8:	mov	r0, r6
   3d1ac:	movt	r1, #4
   3d1b0:	bl	123fc <strcmp@plt>
   3d1b4:	cmp	r0, #0
   3d1b8:	beq	3d52c <__assert_fail@plt+0x2aa7c>
   3d1bc:	movw	r1, #55896	; 0xda58
   3d1c0:	mov	r0, r6
   3d1c4:	movt	r1, #4
   3d1c8:	bl	123fc <strcmp@plt>
   3d1cc:	cmp	r0, #0
   3d1d0:	beq	3d580 <__assert_fail@plt+0x2aad0>
   3d1d4:	movw	r1, #55902	; 0xda5e
   3d1d8:	mov	r0, r6
   3d1dc:	movt	r1, #4
   3d1e0:	bl	123fc <strcmp@plt>
   3d1e4:	mov	r1, r0
   3d1e8:	mov	r0, #4
   3d1ec:	cmp	r1, #0
   3d1f0:	bne	3d914 <__assert_fail@plt+0x2ae64>
   3d1f4:	bl	12768 <__ctype_b_loc@plt>
   3d1f8:	ldr	r1, [r0]
   3d1fc:	mov	r2, #0
   3d200:	mov	r3, #1
   3d204:	cmp	r8, #0
   3d208:	beq	3d364 <__assert_fail@plt+0x2a8b4>
   3d20c:	b	3d85c <__assert_fail@plt+0x2adac>
   3d210:	bl	12768 <__ctype_b_loc@plt>
   3d214:	ldr	r1, [r0]
   3d218:	cmp	r8, #0
   3d21c:	bne	3d674 <__assert_fail@plt+0x2abc4>
   3d220:	mov	r0, #0
   3d224:	mov	r2, #1
   3d228:	b	3d23c <__assert_fail@plt+0x2a78c>
   3d22c:	add	r0, r0, #1
   3d230:	add	r1, r1, #2
   3d234:	cmp	r0, #256	; 0x100
   3d238:	beq	3d428 <__assert_fail@plt+0x2a978>
   3d23c:	ldrb	r3, [r1]
   3d240:	tst	r3, #8
   3d244:	beq	3d22c <__assert_fail@plt+0x2a77c>
   3d248:	ubfx	r3, r0, #5, #3
   3d24c:	and	r6, r0, #31
   3d250:	ldr	r7, [r4, r3, lsl #2]
   3d254:	orr	r7, r7, r2, lsl r6
   3d258:	str	r7, [r4, r3, lsl #2]
   3d25c:	b	3d22c <__assert_fail@plt+0x2a77c>
   3d260:	bl	12768 <__ctype_b_loc@plt>
   3d264:	ldr	r1, [r0]
   3d268:	cmp	r8, #0
   3d26c:	bne	3d6f8 <__assert_fail@plt+0x2ac48>
   3d270:	mov	r0, #0
   3d274:	mov	r2, #1
   3d278:	b	3d28c <__assert_fail@plt+0x2a7dc>
   3d27c:	add	r0, r0, #1
   3d280:	add	r1, r1, #2
   3d284:	cmp	r0, #256	; 0x100
   3d288:	beq	3d428 <__assert_fail@plt+0x2a978>
   3d28c:	ldrb	r3, [r1]
   3d290:	tst	r3, #2
   3d294:	beq	3d27c <__assert_fail@plt+0x2a7cc>
   3d298:	ubfx	r3, r0, #5, #3
   3d29c:	and	r6, r0, #31
   3d2a0:	ldr	r7, [r4, r3, lsl #2]
   3d2a4:	orr	r7, r7, r2, lsl r6
   3d2a8:	str	r7, [r4, r3, lsl #2]
   3d2ac:	b	3d27c <__assert_fail@plt+0x2a7cc>
   3d2b0:	bl	12768 <__ctype_b_loc@plt>
   3d2b4:	ldr	r1, [r0]
   3d2b8:	cmp	r8, #0
   3d2bc:	bne	3d77c <__assert_fail@plt+0x2accc>
   3d2c0:	mov	r0, #0
   3d2c4:	mov	r2, #1
   3d2c8:	b	3d2dc <__assert_fail@plt+0x2a82c>
   3d2cc:	add	r0, r0, #1
   3d2d0:	add	r1, r1, #2
   3d2d4:	cmp	r0, #256	; 0x100
   3d2d8:	beq	3d428 <__assert_fail@plt+0x2a978>
   3d2dc:	ldrb	r3, [r1, #1]
   3d2e0:	tst	r3, #2
   3d2e4:	beq	3d2cc <__assert_fail@plt+0x2a81c>
   3d2e8:	ubfx	r3, r0, #5, #3
   3d2ec:	and	r6, r0, #31
   3d2f0:	ldr	r7, [r4, r3, lsl #2]
   3d2f4:	orr	r7, r7, r2, lsl r6
   3d2f8:	str	r7, [r4, r3, lsl #2]
   3d2fc:	b	3d2cc <__assert_fail@plt+0x2a81c>
   3d300:	bl	12768 <__ctype_b_loc@plt>
   3d304:	ldr	r1, [r0]
   3d308:	cmp	r8, #0
   3d30c:	bne	3d800 <__assert_fail@plt+0x2ad50>
   3d310:	mov	r0, #0
   3d314:	mov	r2, #1
   3d318:	b	3d32c <__assert_fail@plt+0x2a87c>
   3d31c:	add	r0, r0, #1
   3d320:	add	r1, r1, #2
   3d324:	cmp	r0, #256	; 0x100
   3d328:	beq	3d428 <__assert_fail@plt+0x2a978>
   3d32c:	ldrb	r3, [r1, #1]
   3d330:	tst	r3, #32
   3d334:	beq	3d31c <__assert_fail@plt+0x2a86c>
   3d338:	ubfx	r3, r0, #5, #3
   3d33c:	and	r6, r0, #31
   3d340:	ldr	r7, [r4, r3, lsl #2]
   3d344:	orr	r7, r7, r2, lsl r6
   3d348:	str	r7, [r4, r3, lsl #2]
   3d34c:	b	3d31c <__assert_fail@plt+0x2a86c>
   3d350:	add	r2, r2, #1
   3d354:	add	r1, r1, #2
   3d358:	mov	r0, #0
   3d35c:	cmp	r2, #256	; 0x100
   3d360:	beq	3d914 <__assert_fail@plt+0x2ae64>
   3d364:	ldrb	r0, [r1, #1]
   3d368:	tst	r0, #16
   3d36c:	beq	3d350 <__assert_fail@plt+0x2a8a0>
   3d370:	ubfx	r0, r2, #5, #3
   3d374:	and	r6, r2, #31
   3d378:	ldr	r7, [r4, r0, lsl #2]
   3d37c:	orr	r7, r7, r3, lsl r6
   3d380:	str	r7, [r4, r0, lsl #2]
   3d384:	b	3d350 <__assert_fail@plt+0x2a8a0>
   3d388:	bl	12768 <__ctype_b_loc@plt>
   3d38c:	ldr	r1, [r0]
   3d390:	cmp	r8, #0
   3d394:	bne	3d884 <__assert_fail@plt+0x2add4>
   3d398:	mov	r0, #0
   3d39c:	mov	r2, #1
   3d3a0:	b	3d3b4 <__assert_fail@plt+0x2a904>
   3d3a4:	add	r0, r0, #1
   3d3a8:	add	r1, r1, #2
   3d3ac:	cmp	r0, #256	; 0x100
   3d3b0:	beq	3d428 <__assert_fail@plt+0x2a978>
   3d3b4:	ldrb	r3, [r1, #1]
   3d3b8:	tst	r3, #4
   3d3bc:	beq	3d3a4 <__assert_fail@plt+0x2a8f4>
   3d3c0:	ubfx	r3, r0, #5, #3
   3d3c4:	and	r6, r0, #31
   3d3c8:	ldr	r7, [r4, r3, lsl #2]
   3d3cc:	orr	r7, r7, r2, lsl r6
   3d3d0:	str	r7, [r4, r3, lsl #2]
   3d3d4:	b	3d3a4 <__assert_fail@plt+0x2a8f4>
   3d3d8:	bl	12768 <__ctype_b_loc@plt>
   3d3dc:	ldr	r1, [r0]
   3d3e0:	cmp	r8, #0
   3d3e4:	bne	3d8cc <__assert_fail@plt+0x2ae1c>
   3d3e8:	mov	r0, #0
   3d3ec:	mov	r2, #1
   3d3f0:	b	3d404 <__assert_fail@plt+0x2a954>
   3d3f4:	add	r0, r0, #1
   3d3f8:	add	r1, r1, #2
   3d3fc:	cmp	r0, #256	; 0x100
   3d400:	beq	3d428 <__assert_fail@plt+0x2a978>
   3d404:	ldrb	r3, [r1, #1]
   3d408:	tst	r3, #8
   3d40c:	beq	3d3f4 <__assert_fail@plt+0x2a944>
   3d410:	ubfx	r3, r0, #5, #3
   3d414:	and	r6, r0, #31
   3d418:	ldr	r7, [r4, r3, lsl #2]
   3d41c:	orr	r7, r7, r2, lsl r6
   3d420:	str	r7, [r4, r3, lsl #2]
   3d424:	b	3d3f4 <__assert_fail@plt+0x2a944>
   3d428:	mov	r0, #0
   3d42c:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   3d430:	bl	12768 <__ctype_b_loc@plt>
   3d434:	ldr	r1, [r0]
   3d438:	mov	r2, #0
   3d43c:	mov	r3, #1
   3d440:	cmp	r8, #0
   3d444:	beq	3d460 <__assert_fail@plt+0x2a9b0>
   3d448:	b	3d610 <__assert_fail@plt+0x2ab60>
   3d44c:	add	r2, r2, #1
   3d450:	add	r1, r1, #2
   3d454:	mov	r0, #0
   3d458:	cmp	r2, #256	; 0x100
   3d45c:	beq	3d914 <__assert_fail@plt+0x2ae64>
   3d460:	ldrb	r0, [r1, #1]
   3d464:	tst	r0, #64	; 0x40
   3d468:	beq	3d44c <__assert_fail@plt+0x2a99c>
   3d46c:	ubfx	r0, r2, #5, #3
   3d470:	and	r6, r2, #31
   3d474:	ldr	r7, [r4, r0, lsl #2]
   3d478:	orr	r7, r7, r3, lsl r6
   3d47c:	str	r7, [r4, r0, lsl #2]
   3d480:	b	3d44c <__assert_fail@plt+0x2a99c>
   3d484:	bl	12768 <__ctype_b_loc@plt>
   3d488:	ldr	r1, [r0]
   3d48c:	mov	r2, #0
   3d490:	mov	r3, #1
   3d494:	cmp	r8, #0
   3d498:	beq	3d4b4 <__assert_fail@plt+0x2aa04>
   3d49c:	b	3d64c <__assert_fail@plt+0x2ab9c>
   3d4a0:	add	r2, r2, #1
   3d4a4:	add	r1, r1, #2
   3d4a8:	mov	r0, #0
   3d4ac:	cmp	r2, #256	; 0x100
   3d4b0:	beq	3d914 <__assert_fail@plt+0x2ae64>
   3d4b4:	ldrb	r0, [r1, #1]
   3d4b8:	tst	r0, #1
   3d4bc:	beq	3d4a0 <__assert_fail@plt+0x2a9f0>
   3d4c0:	ubfx	r0, r2, #5, #3
   3d4c4:	and	r6, r2, #31
   3d4c8:	ldr	r7, [r4, r0, lsl #2]
   3d4cc:	orr	r7, r7, r3, lsl r6
   3d4d0:	str	r7, [r4, r0, lsl #2]
   3d4d4:	b	3d4a0 <__assert_fail@plt+0x2a9f0>
   3d4d8:	bl	12768 <__ctype_b_loc@plt>
   3d4dc:	ldr	r1, [r0]
   3d4e0:	mov	r2, #0
   3d4e4:	mov	r3, #1
   3d4e8:	cmp	r8, #0
   3d4ec:	beq	3d508 <__assert_fail@plt+0x2aa58>
   3d4f0:	b	3d6d0 <__assert_fail@plt+0x2ac20>
   3d4f4:	add	r2, r2, #1
   3d4f8:	add	r1, r1, #2
   3d4fc:	mov	r0, #0
   3d500:	cmp	r2, #256	; 0x100
   3d504:	beq	3d914 <__assert_fail@plt+0x2ae64>
   3d508:	ldrb	r0, [r1]
   3d50c:	tst	r0, #1
   3d510:	beq	3d4f4 <__assert_fail@plt+0x2aa44>
   3d514:	ubfx	r0, r2, #5, #3
   3d518:	and	r6, r2, #31
   3d51c:	ldr	r7, [r4, r0, lsl #2]
   3d520:	orr	r7, r7, r3, lsl r6
   3d524:	str	r7, [r4, r0, lsl #2]
   3d528:	b	3d4f4 <__assert_fail@plt+0x2aa44>
   3d52c:	bl	12768 <__ctype_b_loc@plt>
   3d530:	ldr	r1, [r0]
   3d534:	mov	r2, #0
   3d538:	mov	r3, #1
   3d53c:	cmp	r8, #0
   3d540:	beq	3d55c <__assert_fail@plt+0x2aaac>
   3d544:	b	3d754 <__assert_fail@plt+0x2aca4>
   3d548:	add	r2, r2, #1
   3d54c:	add	r1, r1, #2
   3d550:	mov	r0, #0
   3d554:	cmp	r2, #256	; 0x100
   3d558:	beq	3d914 <__assert_fail@plt+0x2ae64>
   3d55c:	ldrsh	r0, [r1]
   3d560:	cmn	r0, #1
   3d564:	bgt	3d548 <__assert_fail@plt+0x2aa98>
   3d568:	ubfx	r0, r2, #5, #3
   3d56c:	and	r6, r2, #31
   3d570:	ldr	r7, [r4, r0, lsl #2]
   3d574:	orr	r7, r7, r3, lsl r6
   3d578:	str	r7, [r4, r0, lsl #2]
   3d57c:	b	3d548 <__assert_fail@plt+0x2aa98>
   3d580:	bl	12768 <__ctype_b_loc@plt>
   3d584:	ldr	r1, [r0]
   3d588:	mov	r2, #0
   3d58c:	mov	r3, #1
   3d590:	cmp	r8, #0
   3d594:	beq	3d5b0 <__assert_fail@plt+0x2ab00>
   3d598:	b	3d7d8 <__assert_fail@plt+0x2ad28>
   3d59c:	add	r2, r2, #1
   3d5a0:	add	r1, r1, #2
   3d5a4:	mov	r0, #0
   3d5a8:	cmp	r2, #256	; 0x100
   3d5ac:	beq	3d914 <__assert_fail@plt+0x2ae64>
   3d5b0:	ldrb	r0, [r1]
   3d5b4:	tst	r0, #4
   3d5b8:	beq	3d59c <__assert_fail@plt+0x2aaec>
   3d5bc:	ubfx	r0, r2, #5, #3
   3d5c0:	and	r6, r2, #31
   3d5c4:	ldr	r7, [r4, r0, lsl #2]
   3d5c8:	orr	r7, r7, r3, lsl r6
   3d5cc:	str	r7, [r4, r0, lsl #2]
   3d5d0:	b	3d59c <__assert_fail@plt+0x2aaec>
   3d5d4:	mov	r1, #1
   3d5d8:	orr	r9, r1, r0, lsl #1
   3d5dc:	ldr	r0, [r7, #12]
   3d5e0:	lsl	r1, r9, #2
   3d5e4:	bl	33500 <__assert_fail@plt+0x20a50>
   3d5e8:	cmp	r0, #0
   3d5ec:	beq	3d918 <__assert_fail@plt+0x2ae68>
   3d5f0:	str	r0, [r7, #12]
   3d5f4:	str	r9, [r5]
   3d5f8:	b	3d0b0 <__assert_fail@plt+0x2a600>
   3d5fc:	add	r2, r2, #1
   3d600:	add	r1, r1, #2
   3d604:	mov	r0, #0
   3d608:	cmp	r2, #256	; 0x100
   3d60c:	beq	3d914 <__assert_fail@plt+0x2ae64>
   3d610:	ldrb	r0, [r1, #1]
   3d614:	tst	r0, #64	; 0x40
   3d618:	beq	3d5fc <__assert_fail@plt+0x2ab4c>
   3d61c:	ldrb	r0, [r8, r2]
   3d620:	ubfx	r7, r0, #5, #3
   3d624:	and	r0, r0, #31
   3d628:	ldr	r6, [r4, r7, lsl #2]
   3d62c:	orr	r0, r6, r3, lsl r0
   3d630:	str	r0, [r4, r7, lsl #2]
   3d634:	b	3d5fc <__assert_fail@plt+0x2ab4c>
   3d638:	add	r2, r2, #1
   3d63c:	add	r1, r1, #2
   3d640:	mov	r0, #0
   3d644:	cmp	r2, #256	; 0x100
   3d648:	beq	3d914 <__assert_fail@plt+0x2ae64>
   3d64c:	ldrb	r0, [r1, #1]
   3d650:	tst	r0, #1
   3d654:	beq	3d638 <__assert_fail@plt+0x2ab88>
   3d658:	ldrb	r0, [r8, r2]
   3d65c:	ubfx	r7, r0, #5, #3
   3d660:	and	r0, r0, #31
   3d664:	ldr	r6, [r4, r7, lsl #2]
   3d668:	orr	r0, r6, r3, lsl r0
   3d66c:	str	r0, [r4, r7, lsl #2]
   3d670:	b	3d638 <__assert_fail@plt+0x2ab88>
   3d674:	mov	r2, #0
   3d678:	mov	r3, #1
   3d67c:	b	3d694 <__assert_fail@plt+0x2abe4>
   3d680:	add	r2, r2, #1
   3d684:	add	r1, r1, #2
   3d688:	mov	r0, #0
   3d68c:	cmp	r2, #256	; 0x100
   3d690:	beq	3d914 <__assert_fail@plt+0x2ae64>
   3d694:	ldrb	r0, [r1]
   3d698:	tst	r0, #8
   3d69c:	beq	3d680 <__assert_fail@plt+0x2abd0>
   3d6a0:	ldrb	r0, [r8, r2]
   3d6a4:	ubfx	r7, r0, #5, #3
   3d6a8:	and	r0, r0, #31
   3d6ac:	ldr	r6, [r4, r7, lsl #2]
   3d6b0:	orr	r0, r6, r3, lsl r0
   3d6b4:	str	r0, [r4, r7, lsl #2]
   3d6b8:	b	3d680 <__assert_fail@plt+0x2abd0>
   3d6bc:	add	r2, r2, #1
   3d6c0:	add	r1, r1, #2
   3d6c4:	mov	r0, #0
   3d6c8:	cmp	r2, #256	; 0x100
   3d6cc:	beq	3d914 <__assert_fail@plt+0x2ae64>
   3d6d0:	ldrb	r0, [r1]
   3d6d4:	tst	r0, #1
   3d6d8:	beq	3d6bc <__assert_fail@plt+0x2ac0c>
   3d6dc:	ldrb	r0, [r8, r2]
   3d6e0:	ubfx	r7, r0, #5, #3
   3d6e4:	and	r0, r0, #31
   3d6e8:	ldr	r6, [r4, r7, lsl #2]
   3d6ec:	orr	r0, r6, r3, lsl r0
   3d6f0:	str	r0, [r4, r7, lsl #2]
   3d6f4:	b	3d6bc <__assert_fail@plt+0x2ac0c>
   3d6f8:	mov	r2, #0
   3d6fc:	mov	r3, #1
   3d700:	b	3d718 <__assert_fail@plt+0x2ac68>
   3d704:	add	r2, r2, #1
   3d708:	add	r1, r1, #2
   3d70c:	mov	r0, #0
   3d710:	cmp	r2, #256	; 0x100
   3d714:	beq	3d914 <__assert_fail@plt+0x2ae64>
   3d718:	ldrb	r0, [r1]
   3d71c:	tst	r0, #2
   3d720:	beq	3d704 <__assert_fail@plt+0x2ac54>
   3d724:	ldrb	r0, [r8, r2]
   3d728:	ubfx	r7, r0, #5, #3
   3d72c:	and	r0, r0, #31
   3d730:	ldr	r6, [r4, r7, lsl #2]
   3d734:	orr	r0, r6, r3, lsl r0
   3d738:	str	r0, [r4, r7, lsl #2]
   3d73c:	b	3d704 <__assert_fail@plt+0x2ac54>
   3d740:	add	r2, r2, #1
   3d744:	add	r1, r1, #2
   3d748:	mov	r0, #0
   3d74c:	cmp	r2, #256	; 0x100
   3d750:	beq	3d914 <__assert_fail@plt+0x2ae64>
   3d754:	ldrsh	r0, [r1]
   3d758:	cmn	r0, #1
   3d75c:	bgt	3d740 <__assert_fail@plt+0x2ac90>
   3d760:	ldrb	r0, [r8, r2]
   3d764:	ubfx	r7, r0, #5, #3
   3d768:	and	r0, r0, #31
   3d76c:	ldr	r6, [r4, r7, lsl #2]
   3d770:	orr	r0, r6, r3, lsl r0
   3d774:	str	r0, [r4, r7, lsl #2]
   3d778:	b	3d740 <__assert_fail@plt+0x2ac90>
   3d77c:	mov	r2, #0
   3d780:	mov	r3, #1
   3d784:	b	3d79c <__assert_fail@plt+0x2acec>
   3d788:	add	r2, r2, #1
   3d78c:	add	r1, r1, #2
   3d790:	mov	r0, #0
   3d794:	cmp	r2, #256	; 0x100
   3d798:	beq	3d914 <__assert_fail@plt+0x2ae64>
   3d79c:	ldrb	r0, [r1, #1]
   3d7a0:	tst	r0, #2
   3d7a4:	beq	3d788 <__assert_fail@plt+0x2acd8>
   3d7a8:	ldrb	r0, [r8, r2]
   3d7ac:	ubfx	r7, r0, #5, #3
   3d7b0:	and	r0, r0, #31
   3d7b4:	ldr	r6, [r4, r7, lsl #2]
   3d7b8:	orr	r0, r6, r3, lsl r0
   3d7bc:	str	r0, [r4, r7, lsl #2]
   3d7c0:	b	3d788 <__assert_fail@plt+0x2acd8>
   3d7c4:	add	r2, r2, #1
   3d7c8:	add	r1, r1, #2
   3d7cc:	mov	r0, #0
   3d7d0:	cmp	r2, #256	; 0x100
   3d7d4:	beq	3d914 <__assert_fail@plt+0x2ae64>
   3d7d8:	ldrb	r0, [r1]
   3d7dc:	tst	r0, #4
   3d7e0:	beq	3d7c4 <__assert_fail@plt+0x2ad14>
   3d7e4:	ldrb	r0, [r8, r2]
   3d7e8:	ubfx	r7, r0, #5, #3
   3d7ec:	and	r0, r0, #31
   3d7f0:	ldr	r6, [r4, r7, lsl #2]
   3d7f4:	orr	r0, r6, r3, lsl r0
   3d7f8:	str	r0, [r4, r7, lsl #2]
   3d7fc:	b	3d7c4 <__assert_fail@plt+0x2ad14>
   3d800:	mov	r2, #0
   3d804:	mov	r3, #1
   3d808:	b	3d820 <__assert_fail@plt+0x2ad70>
   3d80c:	add	r2, r2, #1
   3d810:	add	r1, r1, #2
   3d814:	mov	r0, #0
   3d818:	cmp	r2, #256	; 0x100
   3d81c:	beq	3d914 <__assert_fail@plt+0x2ae64>
   3d820:	ldrb	r0, [r1, #1]
   3d824:	tst	r0, #32
   3d828:	beq	3d80c <__assert_fail@plt+0x2ad5c>
   3d82c:	ldrb	r0, [r8, r2]
   3d830:	ubfx	r7, r0, #5, #3
   3d834:	and	r0, r0, #31
   3d838:	ldr	r6, [r4, r7, lsl #2]
   3d83c:	orr	r0, r6, r3, lsl r0
   3d840:	str	r0, [r4, r7, lsl #2]
   3d844:	b	3d80c <__assert_fail@plt+0x2ad5c>
   3d848:	add	r2, r2, #1
   3d84c:	add	r1, r1, #2
   3d850:	mov	r0, #0
   3d854:	cmp	r2, #256	; 0x100
   3d858:	beq	3d914 <__assert_fail@plt+0x2ae64>
   3d85c:	ldrb	r0, [r1, #1]
   3d860:	tst	r0, #16
   3d864:	beq	3d848 <__assert_fail@plt+0x2ad98>
   3d868:	ldrb	r0, [r8, r2]
   3d86c:	ubfx	r7, r0, #5, #3
   3d870:	and	r0, r0, #31
   3d874:	ldr	r6, [r4, r7, lsl #2]
   3d878:	orr	r0, r6, r3, lsl r0
   3d87c:	str	r0, [r4, r7, lsl #2]
   3d880:	b	3d848 <__assert_fail@plt+0x2ad98>
   3d884:	mov	r2, #0
   3d888:	mov	r3, #1
   3d88c:	b	3d8a4 <__assert_fail@plt+0x2adf4>
   3d890:	add	r2, r2, #1
   3d894:	add	r1, r1, #2
   3d898:	mov	r0, #0
   3d89c:	cmp	r2, #256	; 0x100
   3d8a0:	beq	3d914 <__assert_fail@plt+0x2ae64>
   3d8a4:	ldrb	r0, [r1, #1]
   3d8a8:	tst	r0, #4
   3d8ac:	beq	3d890 <__assert_fail@plt+0x2ade0>
   3d8b0:	ldrb	r0, [r8, r2]
   3d8b4:	ubfx	r7, r0, #5, #3
   3d8b8:	and	r0, r0, #31
   3d8bc:	ldr	r6, [r4, r7, lsl #2]
   3d8c0:	orr	r0, r6, r3, lsl r0
   3d8c4:	str	r0, [r4, r7, lsl #2]
   3d8c8:	b	3d890 <__assert_fail@plt+0x2ade0>
   3d8cc:	mov	r2, #0
   3d8d0:	mov	r3, #1
   3d8d4:	b	3d8ec <__assert_fail@plt+0x2ae3c>
   3d8d8:	add	r2, r2, #1
   3d8dc:	add	r1, r1, #2
   3d8e0:	mov	r0, #0
   3d8e4:	cmp	r2, #256	; 0x100
   3d8e8:	beq	3d914 <__assert_fail@plt+0x2ae64>
   3d8ec:	ldrb	r0, [r1, #1]
   3d8f0:	tst	r0, #8
   3d8f4:	beq	3d8d8 <__assert_fail@plt+0x2ae28>
   3d8f8:	ldrb	r0, [r8, r2]
   3d8fc:	ubfx	r7, r0, #5, #3
   3d900:	and	r0, r0, #31
   3d904:	ldr	r6, [r4, r7, lsl #2]
   3d908:	orr	r0, r6, r3, lsl r0
   3d90c:	str	r0, [r4, r7, lsl #2]
   3d910:	b	3d8d8 <__assert_fail@plt+0x2ae28>
   3d914:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   3d918:	mov	r0, #12
   3d91c:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   3d920:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   3d924:	add	fp, sp, #24
   3d928:	ldr	r3, [r1, #24]
   3d92c:	mvn	r7, #1
   3d930:	ldr	r2, [r1, #28]
   3d934:	mov	r4, #0
   3d938:	uxtab	r3, r7, r3
   3d93c:	cmp	r3, #14
   3d940:	bhi	3da64 <__assert_fail@plt+0x2afb4>
   3d944:	add	r7, pc, #0
   3d948:	ldr	pc, [r7, r3, lsl #2]
   3d94c:	muleq	r3, r8, sl
   3d950:	andeq	sp, r3, r4, ror #20
   3d954:	andeq	sp, r3, ip, ror sl
   3d958:	andeq	sp, r3, r4, ror #20
   3d95c:	andeq	sp, r3, r4, ror #20
   3d960:	andeq	sp, r3, r4, ror #20
   3d964:	andeq	sp, r3, r8, lsl #19
   3d968:	andeq	sp, r3, r8, lsl #19
   3d96c:	ldrdeq	sp, [r3], -ip
   3d970:	ldrdeq	sp, [r3], -ip
   3d974:	andeq	sp, r3, r8, lsl #19
   3d978:	andeq	sp, r3, r4, ror #20
   3d97c:	andeq	sp, r3, r4, ror #20
   3d980:	andeq	sp, r3, r4, ror #20
   3d984:	muleq	r3, r8, sl
   3d988:	ldr	r1, [r1, #16]
   3d98c:	ldr	r5, [r1, #28]
   3d990:	ldr	r6, [r0, #20]
   3d994:	add	r0, r2, r2, lsl #1
   3d998:	mov	r1, #1
   3d99c:	str	r1, [r6, r0, lsl #2]!
   3d9a0:	mov	r0, #4
   3d9a4:	mov	r7, r6
   3d9a8:	str	r1, [r7, #4]!
   3d9ac:	bl	327ac <__assert_fail@plt+0x1fcfc>
   3d9b0:	cmp	r0, #0
   3d9b4:	str	r0, [r6, #8]
   3d9b8:	strne	r5, [r0]
   3d9bc:	movne	r0, r4
   3d9c0:	popne	{r4, r5, r6, r7, r8, r9, fp, pc}
   3d9c4:	mov	r0, #0
   3d9c8:	str	r0, [r7]
   3d9cc:	str	r0, [r6]
   3d9d0:	mov	r4, #12
   3d9d4:	mov	r0, r4
   3d9d8:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   3d9dc:	ldrb	r3, [r0, #88]	; 0x58
   3d9e0:	add	r6, r1, #16
   3d9e4:	add	r5, r2, r2, lsl #1
   3d9e8:	orr	r3, r3, #1
   3d9ec:	strb	r3, [r0, #88]	; 0x58
   3d9f0:	mov	r3, r6
   3d9f4:	ldr	r7, [r1, #4]
   3d9f8:	ldr	r1, [r1, #8]
   3d9fc:	cmp	r1, #0
   3da00:	addne	r3, r1, #12
   3da04:	cmp	r7, #0
   3da08:	ldr	r1, [r3]
   3da0c:	addne	r6, r7, #12
   3da10:	ldr	r8, [r1, #28]
   3da14:	ldr	r1, [r6]
   3da18:	ldr	r6, [r0, #20]
   3da1c:	mov	r0, #2
   3da20:	ldr	r9, [r1, #28]
   3da24:	mov	r7, r6
   3da28:	str	r0, [r7, r5, lsl #2]!
   3da2c:	mov	r0, #8
   3da30:	bl	327ac <__assert_fail@plt+0x1fcfc>
   3da34:	cmp	r0, #0
   3da38:	str	r0, [r7, #8]
   3da3c:	beq	3d9d0 <__assert_fail@plt+0x2af20>
   3da40:	add	r1, r6, r5, lsl #2
   3da44:	cmp	r9, r8
   3da48:	add	r1, r1, #4
   3da4c:	bne	3daa0 <__assert_fail@plt+0x2aff0>
   3da50:	mov	r2, #1
   3da54:	str	r2, [r1]
   3da58:	str	r9, [r0]
   3da5c:	mov	r0, r4
   3da60:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   3da64:	ldr	r1, [r1, #16]
   3da68:	ldr	r0, [r0, #12]
   3da6c:	ldr	r1, [r1, #28]
   3da70:	str	r1, [r0, r2, lsl #2]
   3da74:	mov	r0, r4
   3da78:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   3da7c:	ldr	r7, [r1, #16]
   3da80:	ldr	r3, [r0, #12]
   3da84:	ldr	r5, [r7, #28]
   3da88:	str	r5, [r3, r2, lsl #2]
   3da8c:	ldrb	r1, [r1, #24]
   3da90:	cmp	r1, #4
   3da94:	beq	3d990 <__assert_fail@plt+0x2aee0>
   3da98:	mov	r0, r4
   3da9c:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   3daa0:	mov	r2, #2
   3daa4:	str	r2, [r1]
   3daa8:	stmcs	r0, {r8, r9}
   3daac:	strcc	r9, [r0]
   3dab0:	strcc	r8, [r0, #4]
   3dab4:	mov	r0, r4
   3dab8:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   3dabc:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   3dac0:	add	fp, sp, #28
   3dac4:	sub	sp, sp, #4
   3dac8:	ldr	r6, [r2, #4]
   3dacc:	mov	r8, r0
   3dad0:	ldr	r5, [r1]
   3dad4:	mov	r9, r2
   3dad8:	cmp	r6, #0
   3dadc:	ldrbne	r0, [r1, #28]
   3dae0:	andsne	r0, r0, #16
   3dae4:	bne	3dc88 <__assert_fail@plt+0x2b1d8>
   3dae8:	ldr	r1, [r5, #64]	; 0x40
   3daec:	cmp	r1, #31
   3daf0:	beq	3dcb0 <__assert_fail@plt+0x2b200>
   3daf4:	ldr	r0, [r5, #56]	; 0x38
   3daf8:	add	r0, r0, r1, lsl #5
   3dafc:	add	r2, r1, #1
   3db00:	vmov.i32	q8, #0	; 0x00000000
   3db04:	mov	r1, #0
   3db08:	str	r2, [r5, #64]	; 0x40
   3db0c:	mov	r2, #8
   3db10:	add	sl, r0, #4
   3db14:	str	r1, [r0, #20]
   3db18:	str	r1, [r0, #24]
   3db1c:	str	r2, [r0, #28]
   3db20:	mov	r0, #28
   3db24:	mov	r1, sl
   3db28:	vst1.32	{d16-d17}, [r1], r0
   3db2c:	mvn	r0, #0
   3db30:	str	r0, [r1]
   3db34:	ldr	r1, [r5, #64]	; 0x40
   3db38:	cmp	r1, #31
   3db3c:	beq	3dcd8 <__assert_fail@plt+0x2b228>
   3db40:	ldr	r0, [r5, #56]	; 0x38
   3db44:	add	r0, r0, r1, lsl #5
   3db48:	add	r2, r1, #1
   3db4c:	vmov.i32	q8, #0	; 0x00000000
   3db50:	mov	r1, #0
   3db54:	str	r2, [r5, #64]	; 0x40
   3db58:	mov	r2, #9
   3db5c:	add	r7, r0, #4
   3db60:	str	r1, [r0, #20]
   3db64:	str	r1, [r0, #24]
   3db68:	str	r2, [r0, #28]
   3db6c:	mov	r0, #28
   3db70:	mov	r1, r7
   3db74:	vst1.32	{d16-d17}, [r1], r0
   3db78:	mvn	r0, #0
   3db7c:	str	r0, [r1]
   3db80:	cmp	r6, #0
   3db84:	mov	r4, r7
   3db88:	beq	3dbd8 <__assert_fail@plt+0x2b128>
   3db8c:	ldr	r1, [r5, #64]	; 0x40
   3db90:	cmp	r1, #31
   3db94:	beq	3dd28 <__assert_fail@plt+0x2b278>
   3db98:	ldr	r0, [r5, #56]	; 0x38
   3db9c:	add	r4, r0, r1, lsl #5
   3dba0:	add	r2, r1, #1
   3dba4:	mov	r0, #0
   3dba8:	cmp	r7, #0
   3dbac:	mov	r1, #16
   3dbb0:	str	r2, [r5, #64]	; 0x40
   3dbb4:	mvn	r2, #0
   3dbb8:	str	r0, [r4, #4]!
   3dbbc:	add	r3, r4, #20
   3dbc0:	stmib	r4, {r6, r7}
   3dbc4:	str	r0, [r4, #12]
   3dbc8:	str	r0, [r4, #16]
   3dbcc:	stm	r3, {r0, r1, r2}
   3dbd0:	str	r4, [r6]
   3dbd4:	strne	r4, [r7]
   3dbd8:	ldr	r1, [r5, #64]	; 0x40
   3dbdc:	cmp	r1, #31
   3dbe0:	beq	3dd00 <__assert_fail@plt+0x2b250>
   3dbe4:	ldr	r0, [r5, #56]	; 0x38
   3dbe8:	add	r6, r0, r1, lsl #5
   3dbec:	add	r2, r1, #1
   3dbf0:	mov	r0, #0
   3dbf4:	cmp	sl, #0
   3dbf8:	mov	r1, #16
   3dbfc:	str	r2, [r5, #64]	; 0x40
   3dc00:	mvn	r2, #0
   3dc04:	str	r0, [r6, #4]!
   3dc08:	add	r3, r6, #20
   3dc0c:	str	sl, [r6, #4]
   3dc10:	str	r4, [r6, #8]
   3dc14:	str	r0, [r6, #12]
   3dc18:	str	r0, [r6, #16]
   3dc1c:	stm	r3, {r0, r1, r2}
   3dc20:	strne	r6, [sl]
   3dc24:	cmp	r4, #0
   3dc28:	strne	r6, [r4]
   3dc2c:	cmp	r7, #0
   3dc30:	beq	3dc40 <__assert_fail@plt+0x2b190>
   3dc34:	cmp	sl, #0
   3dc38:	cmpne	r4, #0
   3dc3c:	bne	3dc50 <__assert_fail@plt+0x2b1a0>
   3dc40:	mov	r0, #12
   3dc44:	mov	r6, #0
   3dc48:	str	r0, [r8]
   3dc4c:	b	3dca4 <__assert_fail@plt+0x2b1f4>
   3dc50:	cmp	r6, #0
   3dc54:	beq	3dc40 <__assert_fail@plt+0x2b190>
   3dc58:	ldr	r0, [r9, #20]
   3dc5c:	str	r0, [r7, #20]
   3dc60:	str	r0, [sl, #20]
   3dc64:	ldr	r1, [r9, #24]
   3dc68:	ldr	r0, [r7, #24]
   3dc6c:	lsr	r1, r1, #19
   3dc70:	bfi	r0, r1, #19, #1
   3dc74:	str	r0, [r7, #24]
   3dc78:	ldr	r0, [sl, #24]
   3dc7c:	bfi	r0, r1, #19, #1
   3dc80:	str	r0, [sl, #24]
   3dc84:	b	3dca4 <__assert_fail@plt+0x2b1f4>
   3dc88:	ldr	r0, [r9, #20]
   3dc8c:	cmp	r0, #31
   3dc90:	bgt	3dca4 <__assert_fail@plt+0x2b1f4>
   3dc94:	ldr	r1, [r5, #80]	; 0x50
   3dc98:	mov	r2, #1
   3dc9c:	tst	r1, r2, lsl r0
   3dca0:	bne	3dae8 <__assert_fail@plt+0x2b038>
   3dca4:	mov	r0, r6
   3dca8:	sub	sp, fp, #28
   3dcac:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   3dcb0:	mov	r0, #996	; 0x3e4
   3dcb4:	bl	327ac <__assert_fail@plt+0x1fcfc>
   3dcb8:	cmp	r0, #0
   3dcbc:	beq	3dd50 <__assert_fail@plt+0x2b2a0>
   3dcc0:	ldr	r1, [r5, #56]	; 0x38
   3dcc4:	str	r1, [r0]
   3dcc8:	mov	r1, #0
   3dccc:	str	r1, [r5, #64]	; 0x40
   3dcd0:	str	r0, [r5, #56]	; 0x38
   3dcd4:	b	3daf8 <__assert_fail@plt+0x2b048>
   3dcd8:	mov	r0, #996	; 0x3e4
   3dcdc:	bl	327ac <__assert_fail@plt+0x1fcfc>
   3dce0:	cmp	r0, #0
   3dce4:	beq	3dd58 <__assert_fail@plt+0x2b2a8>
   3dce8:	ldr	r1, [r5, #56]	; 0x38
   3dcec:	str	r1, [r0]
   3dcf0:	mov	r1, #0
   3dcf4:	str	r1, [r5, #64]	; 0x40
   3dcf8:	str	r0, [r5, #56]	; 0x38
   3dcfc:	b	3db44 <__assert_fail@plt+0x2b094>
   3dd00:	mov	r0, #996	; 0x3e4
   3dd04:	bl	327ac <__assert_fail@plt+0x1fcfc>
   3dd08:	cmp	r0, #0
   3dd0c:	beq	3dd60 <__assert_fail@plt+0x2b2b0>
   3dd10:	ldr	r1, [r5, #56]	; 0x38
   3dd14:	str	r1, [r0]
   3dd18:	mov	r1, #0
   3dd1c:	str	r1, [r5, #64]	; 0x40
   3dd20:	str	r0, [r5, #56]	; 0x38
   3dd24:	b	3dbe8 <__assert_fail@plt+0x2b138>
   3dd28:	mov	r0, #996	; 0x3e4
   3dd2c:	bl	327ac <__assert_fail@plt+0x1fcfc>
   3dd30:	cmp	r0, #0
   3dd34:	beq	3dd70 <__assert_fail@plt+0x2b2c0>
   3dd38:	ldr	r1, [r5, #56]	; 0x38
   3dd3c:	str	r1, [r0]
   3dd40:	mov	r1, #0
   3dd44:	str	r1, [r5, #64]	; 0x40
   3dd48:	str	r0, [r5, #56]	; 0x38
   3dd4c:	b	3db9c <__assert_fail@plt+0x2b0ec>
   3dd50:	mov	sl, #0
   3dd54:	b	3db34 <__assert_fail@plt+0x2b084>
   3dd58:	mov	r7, #0
   3dd5c:	b	3db80 <__assert_fail@plt+0x2b0d0>
   3dd60:	mov	r6, #0
   3dd64:	cmp	r7, #0
   3dd68:	bne	3dc34 <__assert_fail@plt+0x2b184>
   3dd6c:	b	3dc40 <__assert_fail@plt+0x2b190>
   3dd70:	mov	r4, #0
   3dd74:	b	3dbd8 <__assert_fail@plt+0x2b128>
   3dd78:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   3dd7c:	add	fp, sp, #28
   3dd80:	sub	sp, sp, #12
   3dd84:	mov	r4, r0
   3dd88:	ldr	r7, [r0, #4]
   3dd8c:	ldr	r0, [r0, #8]
   3dd90:	mov	r5, r2
   3dd94:	mov	r9, r1
   3dd98:	cmp	r0, r7
   3dd9c:	bcs	3de68 <__assert_fail@plt+0x2b3b8>
   3dda0:	ldr	r1, [r4]
   3dda4:	str	r9, [r1, r0, lsl #3]!
   3dda8:	str	r5, [r1, #4]
   3ddac:	ldr	r0, [r4]
   3ddb0:	ldr	r1, [r4, #8]
   3ddb4:	add	r0, r0, r1, lsl #3
   3ddb8:	ldr	r1, [r0, #4]
   3ddbc:	bfc	r1, #8, #10
   3ddc0:	str	r1, [r0, #4]
   3ddc4:	uxtb	r1, r5
   3ddc8:	cmp	r1, #5
   3ddcc:	bne	3dde0 <__assert_fail@plt+0x2b330>
   3ddd0:	ldr	r2, [r4, #92]	; 0x5c
   3ddd4:	mov	r0, #1048576	; 0x100000
   3ddd8:	cmp	r2, #1
   3dddc:	bgt	3ddf0 <__assert_fail@plt+0x2b340>
   3dde0:	sub	r0, r1, #6
   3dde4:	clz	r0, r0
   3dde8:	lsr	r0, r0, #5
   3ddec:	lsl	r0, r0, #20
   3ddf0:	ldr	r1, [r4]
   3ddf4:	ldr	r2, [r4, #8]
   3ddf8:	add	r1, r1, r2, lsl #3
   3ddfc:	ldr	r2, [r1, #4]
   3de00:	bic	r2, r2, #1048576	; 0x100000
   3de04:	orr	r0, r2, r0
   3de08:	mvn	r2, #0
   3de0c:	str	r0, [r1, #4]
   3de10:	ldr	r0, [r4, #8]
   3de14:	ldr	r1, [r4, #12]
   3de18:	str	r2, [r1, r0, lsl #2]
   3de1c:	mov	r2, #0
   3de20:	ldr	r0, [r4, #8]
   3de24:	ldr	r1, [r4, #20]
   3de28:	add	r0, r0, r0, lsl #1
   3de2c:	str	r2, [r1, r0, lsl #2]!
   3de30:	str	r2, [r1, #4]
   3de34:	str	r2, [r1, #8]
   3de38:	ldr	r0, [r4, #8]
   3de3c:	ldr	r1, [r4, #24]
   3de40:	add	r0, r0, r0, lsl #1
   3de44:	str	r2, [r1, r0, lsl #2]!
   3de48:	str	r2, [r1, #4]
   3de4c:	str	r2, [r1, #8]
   3de50:	ldr	r6, [r4, #8]
   3de54:	add	r0, r6, #1
   3de58:	str	r0, [r4, #8]
   3de5c:	mov	r0, r6
   3de60:	sub	sp, fp, #28
   3de64:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   3de68:	movw	r0, #21845	; 0x5555
   3de6c:	lsl	r1, r7, #1
   3de70:	mvn	r6, #0
   3de74:	movt	r0, #5461	; 0x1555
   3de78:	cmp	r1, r0
   3de7c:	bhi	3de5c <__assert_fail@plt+0x2b3ac>
   3de80:	ldr	r0, [r4]
   3de84:	str	r1, [sp, #8]
   3de88:	lsl	r1, r7, #4
   3de8c:	bl	33500 <__assert_fail@plt+0x20a50>
   3de90:	cmp	r0, #0
   3de94:	beq	3de5c <__assert_fail@plt+0x2b3ac>
   3de98:	str	r0, [r4]
   3de9c:	lsl	r8, r7, #3
   3dea0:	ldr	r0, [r4, #12]
   3dea4:	mov	r1, r8
   3dea8:	bl	33500 <__assert_fail@plt+0x20a50>
   3deac:	str	r0, [sp, #4]
   3deb0:	ldr	r0, [r4, #16]
   3deb4:	mov	r1, r8
   3deb8:	bl	33500 <__assert_fail@plt+0x20a50>
   3debc:	mov	r2, r0
   3dec0:	add	r1, r7, r7, lsl #1
   3dec4:	ldr	r0, [r4, #20]
   3dec8:	mov	r7, r2
   3decc:	lsl	r8, r1, #3
   3ded0:	mov	r1, r8
   3ded4:	bl	33500 <__assert_fail@plt+0x20a50>
   3ded8:	mov	sl, r0
   3dedc:	ldr	r0, [r4, #24]
   3dee0:	mov	r1, r8
   3dee4:	bl	33500 <__assert_fail@plt+0x20a50>
   3dee8:	mov	r8, r0
   3deec:	ldr	r0, [sp, #4]
   3def0:	cmp	r0, #0
   3def4:	beq	3df04 <__assert_fail@plt+0x2b454>
   3def8:	cmp	r7, #0
   3defc:	cmpne	sl, #0
   3df00:	bne	3df24 <__assert_fail@plt+0x2b474>
   3df04:	bl	30174 <__assert_fail@plt+0x1d6c4>
   3df08:	mov	r0, r7
   3df0c:	bl	30174 <__assert_fail@plt+0x1d6c4>
   3df10:	mov	r0, sl
   3df14:	bl	30174 <__assert_fail@plt+0x1d6c4>
   3df18:	mov	r0, r8
   3df1c:	bl	30174 <__assert_fail@plt+0x1d6c4>
   3df20:	b	3de5c <__assert_fail@plt+0x2b3ac>
   3df24:	cmp	r8, #0
   3df28:	beq	3df04 <__assert_fail@plt+0x2b454>
   3df2c:	add	r1, r4, #12
   3df30:	stm	r1, {r0, r7, sl}
   3df34:	str	r8, [r4, #24]
   3df38:	ldr	r0, [sp, #8]
   3df3c:	str	r0, [r4, #4]
   3df40:	ldr	r0, [r4, #8]
   3df44:	b	3dda0 <__assert_fail@plt+0x2b2f0>
   3df48:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   3df4c:	add	fp, sp, #28
   3df50:	sub	sp, sp, #44	; 0x2c
   3df54:	mov	r8, r0
   3df58:	ldr	r0, [r1, #20]
   3df5c:	add	r4, r2, r2, lsl #1
   3df60:	mov	r5, r1
   3df64:	mov	r1, #0
   3df68:	mov	r9, r3
   3df6c:	mov	r6, r2
   3df70:	add	r0, r0, r4, lsl #2
   3df74:	ldr	r0, [r0, #4]
   3df78:	str	r1, [sp, #36]	; 0x24
   3df7c:	add	r0, r0, #1
   3df80:	str	r0, [sp, #32]
   3df84:	lsl	r0, r0, #2
   3df88:	bl	327ac <__assert_fail@plt+0x1fcfc>
   3df8c:	cmp	r0, #0
   3df90:	str	r0, [sp, #40]	; 0x28
   3df94:	beq	3e164 <__assert_fail@plt+0x2b6b4>
   3df98:	mov	r1, #1
   3df9c:	str	r6, [r0]
   3dfa0:	str	r1, [sp, #36]	; 0x24
   3dfa4:	mvn	r1, #0
   3dfa8:	ldr	r0, [r5, #24]
   3dfac:	add	r0, r0, r4, lsl #2
   3dfb0:	str	r1, [r0, #4]
   3dfb4:	ldr	r2, [r5]
   3dfb8:	add	r0, r2, r6, lsl #3
   3dfbc:	ldr	r0, [r0, #4]
   3dfc0:	ubfx	r1, r0, #8, #10
   3dfc4:	cmp	r1, #0
   3dfc8:	beq	3e024 <__assert_fail@plt+0x2b574>
   3dfcc:	ldr	r3, [r5, #20]
   3dfd0:	add	r3, r3, r4, lsl #2
   3dfd4:	ldr	r7, [r3, #4]
   3dfd8:	cmp	r7, #0
   3dfdc:	beq	3e024 <__assert_fail@plt+0x2b574>
   3dfe0:	ldr	r3, [r3, #8]
   3dfe4:	ldr	r3, [r3]
   3dfe8:	add	r2, r2, r3, lsl #3
   3dfec:	ldrb	r2, [r2, #6]
   3dff0:	tst	r2, #4
   3dff4:	bne	3e024 <__assert_fail@plt+0x2b574>
   3dff8:	str	r1, [sp]
   3dffc:	mov	r0, r5
   3e000:	mov	r1, r6
   3e004:	mov	r2, r6
   3e008:	mov	r3, r6
   3e00c:	bl	3e170 <__assert_fail@plt+0x2b6c0>
   3e010:	cmp	r0, #0
   3e014:	bne	3e15c <__assert_fail@plt+0x2b6ac>
   3e018:	ldr	r0, [r5]
   3e01c:	add	r0, r0, r6, lsl #3
   3e020:	ldr	r0, [r0, #4]
   3e024:	tst	r0, #8
   3e028:	beq	3e130 <__assert_fail@plt+0x2b680>
   3e02c:	ldr	r0, [r5, #20]
   3e030:	add	r1, r0, r4, lsl #2
   3e034:	ldr	r1, [r1, #4]
   3e038:	cmp	r1, #1
   3e03c:	blt	3e130 <__assert_fail@plt+0x2b680>
   3e040:	str	r8, [sp, #12]
   3e044:	mov	r8, #0
   3e048:	add	r7, sp, #16
   3e04c:	add	sl, sp, #32
   3e050:	mov	r6, #0
   3e054:	str	r9, [sp, #8]
   3e058:	b	3e078 <__assert_fail@plt+0x2b5c8>
   3e05c:	mov	r8, #1
   3e060:	ldr	r0, [r5, #20]
   3e064:	add	r6, r6, #1
   3e068:	add	r1, r0, r4, lsl #2
   3e06c:	ldr	r1, [r1, #4]
   3e070:	cmp	r6, r1
   3e074:	bge	3e104 <__assert_fail@plt+0x2b654>
   3e078:	add	r0, r0, r4, lsl #2
   3e07c:	ldr	r0, [r0, #8]
   3e080:	ldr	r2, [r0, r6, lsl #2]
   3e084:	ldr	r0, [r5, #24]
   3e088:	add	r9, r2, r2, lsl #1
   3e08c:	add	r0, r0, r9, lsl #2
   3e090:	ldr	r1, [r0, #4]
   3e094:	cmn	r1, #1
   3e098:	beq	3e05c <__assert_fail@plt+0x2b5ac>
   3e09c:	cmp	r1, #0
   3e0a0:	bne	3e0c0 <__assert_fail@plt+0x2b610>
   3e0a4:	mov	r0, r7
   3e0a8:	mov	r1, r5
   3e0ac:	mov	r3, #0
   3e0b0:	bl	3df48 <__assert_fail@plt+0x2b498>
   3e0b4:	cmp	r0, #0
   3e0b8:	beq	3e0d0 <__assert_fail@plt+0x2b620>
   3e0bc:	b	3e15c <__assert_fail@plt+0x2b6ac>
   3e0c0:	vldr	d16, [r0]
   3e0c4:	ldr	r0, [r0, #8]
   3e0c8:	str	r0, [sp, #24]
   3e0cc:	vstr	d16, [sp, #16]
   3e0d0:	mov	r0, sl
   3e0d4:	mov	r1, r7
   3e0d8:	bl	3e5f8 <__assert_fail@plt+0x2bb48>
   3e0dc:	cmp	r0, #0
   3e0e0:	bne	3e15c <__assert_fail@plt+0x2b6ac>
   3e0e4:	ldr	r0, [r5, #24]
   3e0e8:	add	r0, r0, r9, lsl #2
   3e0ec:	ldr	r0, [r0, #4]
   3e0f0:	cmp	r0, #0
   3e0f4:	bne	3e060 <__assert_fail@plt+0x2b5b0>
   3e0f8:	ldr	r0, [sp, #24]
   3e0fc:	bl	30174 <__assert_fail@plt+0x1d6c4>
   3e100:	b	3e05c <__assert_fail@plt+0x2b5ac>
   3e104:	tst	r8, #1
   3e108:	ldr	r8, [sp, #12]
   3e10c:	ldr	r0, [sp, #8]
   3e110:	beq	3e130 <__assert_fail@plt+0x2b680>
   3e114:	cmp	r0, #0
   3e118:	bne	3e130 <__assert_fail@plt+0x2b680>
   3e11c:	ldr	r0, [r5, #24]
   3e120:	mov	r1, #0
   3e124:	add	r0, r0, r4, lsl #2
   3e128:	str	r1, [r0, #4]
   3e12c:	b	3e148 <__assert_fail@plt+0x2b698>
   3e130:	ldr	r0, [r5, #24]
   3e134:	vldr	d16, [sp, #32]
   3e138:	ldr	r1, [sp, #40]	; 0x28
   3e13c:	add	r0, r0, r4, lsl #2
   3e140:	str	r1, [r0, #8]
   3e144:	vstr	d16, [r0]
   3e148:	ldr	r0, [sp, #40]	; 0x28
   3e14c:	vldr	d16, [sp, #32]
   3e150:	str	r0, [r8, #8]
   3e154:	mov	r0, #0
   3e158:	vstr	d16, [r8]
   3e15c:	sub	sp, fp, #28
   3e160:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   3e164:	mov	r0, #12
   3e168:	sub	sp, fp, #28
   3e16c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   3e170:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   3e174:	add	fp, sp, #28
   3e178:	sub	sp, sp, #20
   3e17c:	mov	r9, r0
   3e180:	ldr	r0, [fp, #8]
   3e184:	mov	r8, r2
   3e188:	mov	r5, r1
   3e18c:	str	r3, [sp, #8]
   3e190:	str	r0, [sp, #12]
   3e194:	ldr	r1, [sp, #12]
   3e198:	movw	r0, #65280	; 0xff00
   3e19c:	movt	r0, #3
   3e1a0:	and	r0, r0, r1, lsl #8
   3e1a4:	str	r0, [sp, #16]
   3e1a8:	ldr	r2, [r9]
   3e1ac:	add	r3, r2, r5, lsl #3
   3e1b0:	ldrb	r0, [r3, #4]!
   3e1b4:	cmp	r0, #4
   3e1b8:	bne	3e290 <__assert_fail@plt+0x2b7e0>
   3e1bc:	ldr	r0, [r9, #12]
   3e1c0:	ldr	r1, [r9, #20]
   3e1c4:	add	r7, r8, r8, lsl #1
   3e1c8:	ldr	r6, [r0, r5, lsl #2]
   3e1cc:	add	r0, r1, r7, lsl #2
   3e1d0:	mov	r1, #0
   3e1d4:	str	r1, [r0, #4]
   3e1d8:	mov	r0, r9
   3e1dc:	ldr	r1, [r2, r6, lsl #3]!
   3e1e0:	ldr	r2, [r2, #4]
   3e1e4:	bl	3dd78 <__assert_fail@plt+0x2b2c8>
   3e1e8:	cmn	r0, #1
   3e1ec:	beq	3e5f0 <__assert_fail@plt+0x2bb40>
   3e1f0:	mov	r4, r0
   3e1f4:	ldr	r0, [r9]
   3e1f8:	movw	r2, #255	; 0xff
   3e1fc:	movt	r2, #65532	; 0xfffc
   3e200:	add	r0, r0, r4, lsl #3
   3e204:	ldr	r1, [r0, #4]
   3e208:	and	r1, r1, r2
   3e20c:	ldr	r2, [sp, #16]
   3e210:	orr	r1, r1, r2
   3e214:	movw	r2, #65280	; 0xff00
   3e218:	str	r1, [r0, #4]
   3e21c:	movt	r2, #3
   3e220:	ldr	r0, [r9]
   3e224:	add	r1, r0, r6, lsl #3
   3e228:	add	r0, r0, r4, lsl #3
   3e22c:	ldr	r1, [r1, #4]
   3e230:	and	r1, r1, r2
   3e234:	ldr	r2, [r0, #4]
   3e238:	orr	r1, r1, r2
   3e23c:	str	r1, [r0, #4]
   3e240:	ldr	r0, [r9]
   3e244:	add	r0, r0, r4, lsl #3
   3e248:	ldr	r1, [r0, #4]
   3e24c:	orr	r1, r1, #262144	; 0x40000
   3e250:	str	r1, [r0, #4]
   3e254:	ldr	r0, [r9, #16]
   3e258:	str	r6, [r0, r4, lsl #2]
   3e25c:	ldr	r0, [r9, #12]
   3e260:	ldr	r1, [r0, r5, lsl #2]
   3e264:	str	r1, [r0, r8, lsl #2]
   3e268:	mov	r1, r4
   3e26c:	ldr	r0, [r9, #20]
   3e270:	add	r0, r0, r7, lsl #2
   3e274:	bl	3e784 <__assert_fail@plt+0x2bcd4>
   3e278:	cmp	r0, #0
   3e27c:	mov	r5, r6
   3e280:	mov	r8, r4
   3e284:	mov	r7, #12
   3e288:	bne	3e1a8 <__assert_fail@plt+0x2b6f8>
   3e28c:	b	3e5c0 <__assert_fail@plt+0x2bb10>
   3e290:	ldr	r0, [r9, #20]
   3e294:	add	ip, r5, r5, lsl #1
   3e298:	add	r7, r0, ip, lsl #2
   3e29c:	ldr	r1, [r7, #4]
   3e2a0:	cmp	r1, #0
   3e2a4:	beq	3e5a4 <__assert_fail@plt+0x2baf4>
   3e2a8:	ldr	r7, [r7, #8]
   3e2ac:	add	r4, r8, r8, lsl #1
   3e2b0:	cmp	r1, #1
   3e2b4:	add	r0, r0, r4, lsl #2
   3e2b8:	ldr	sl, [r7]
   3e2bc:	mov	r7, #0
   3e2c0:	str	r7, [r0, #4]
   3e2c4:	beq	3e4cc <__assert_fail@plt+0x2ba1c>
   3e2c8:	ldr	r1, [r9, #8]
   3e2cc:	mov	r8, r4
   3e2d0:	ldr	r4, [sp, #12]
   3e2d4:	sub	r3, r1, #1
   3e2d8:	cmp	r3, #1
   3e2dc:	blt	3e32c <__assert_fail@plt+0x2b87c>
   3e2e0:	add	r3, r2, r3, lsl #3
   3e2e4:	ldr	r7, [r3, #4]
   3e2e8:	ands	r3, r7, #262144	; 0x40000
   3e2ec:	beq	3e32c <__assert_fail@plt+0x2b87c>
   3e2f0:	ldr	r6, [r9, #16]
   3e2f4:	sub	r3, r2, #12
   3e2f8:	sub	r6, r6, #4
   3e2fc:	ldr	r5, [r6, r1, lsl #2]
   3e300:	cmp	r5, sl
   3e304:	ubfxeq	r7, r7, #8, #10
   3e308:	cmpeq	r7, r4
   3e30c:	beq	3e4b0 <__assert_fail@plt+0x2ba00>
   3e310:	sub	r7, r1, #2
   3e314:	cmp	r7, #1
   3e318:	blt	3e32c <__assert_fail@plt+0x2b87c>
   3e31c:	ldr	r7, [r3, r1, lsl #3]
   3e320:	sub	r1, r1, #1
   3e324:	ands	r5, r7, #262144	; 0x40000
   3e328:	bne	3e2fc <__assert_fail@plt+0x2b84c>
   3e32c:	ldr	r1, [r2, sl, lsl #3]!
   3e330:	mov	r0, r9
   3e334:	mov	r5, ip
   3e338:	ldr	r2, [r2, #4]
   3e33c:	bl	3dd78 <__assert_fail@plt+0x2b2c8>
   3e340:	mov	r7, #12
   3e344:	cmn	r0, #1
   3e348:	beq	3e5c0 <__assert_fail@plt+0x2bb10>
   3e34c:	mov	r6, r0
   3e350:	ldr	r0, [r9]
   3e354:	movw	r2, #255	; 0xff
   3e358:	mov	r4, r8
   3e35c:	movt	r2, #65532	; 0xfffc
   3e360:	add	r0, r0, r6, lsl #3
   3e364:	ldr	r1, [r0, #4]
   3e368:	and	r1, r1, r2
   3e36c:	ldr	r2, [sp, #16]
   3e370:	orr	r1, r1, r2
   3e374:	movw	r2, #65280	; 0xff00
   3e378:	str	r1, [r0, #4]
   3e37c:	movt	r2, #3
   3e380:	ldr	r0, [r9]
   3e384:	add	r1, r0, sl, lsl #3
   3e388:	add	r0, r0, r6, lsl #3
   3e38c:	ldr	r1, [r1, #4]
   3e390:	and	r1, r1, r2
   3e394:	ldr	r2, [r0, #4]
   3e398:	orr	r1, r1, r2
   3e39c:	str	r1, [r0, #4]
   3e3a0:	ldr	r0, [r9]
   3e3a4:	add	r0, r0, r6, lsl #3
   3e3a8:	ldr	r1, [r0, #4]
   3e3ac:	orr	r1, r1, #262144	; 0x40000
   3e3b0:	str	r1, [r0, #4]
   3e3b4:	mov	r1, r6
   3e3b8:	ldr	r0, [r9, #16]
   3e3bc:	str	sl, [r0, r6, lsl #2]
   3e3c0:	ldr	r0, [r9, #20]
   3e3c4:	add	r0, r0, r8, lsl #2
   3e3c8:	bl	3e784 <__assert_fail@plt+0x2bcd4>
   3e3cc:	cmp	r0, #0
   3e3d0:	beq	3e5c0 <__assert_fail@plt+0x2bb10>
   3e3d4:	ldr	r0, [sp, #12]
   3e3d8:	ldr	r3, [sp, #8]
   3e3dc:	mov	r1, sl
   3e3e0:	mov	r2, r6
   3e3e4:	str	r0, [sp]
   3e3e8:	mov	r0, r9
   3e3ec:	bl	3e170 <__assert_fail@plt+0x2b6c0>
   3e3f0:	cmp	r0, #0
   3e3f4:	bne	3e5bc <__assert_fail@plt+0x2bb0c>
   3e3f8:	ldr	r1, [r9, #20]
   3e3fc:	ldr	r0, [r9]
   3e400:	add	r1, r1, r5, lsl #2
   3e404:	ldr	r1, [r1, #8]
   3e408:	ldr	r5, [r1, #4]
   3e40c:	ldr	r1, [r0, r5, lsl #3]!
   3e410:	ldr	r2, [r0, #4]
   3e414:	mov	r0, r9
   3e418:	bl	3dd78 <__assert_fail@plt+0x2b2c8>
   3e41c:	mov	r7, #12
   3e420:	cmn	r0, #1
   3e424:	beq	3e5c0 <__assert_fail@plt+0x2bb10>
   3e428:	mov	r8, r0
   3e42c:	ldr	r0, [r9]
   3e430:	movw	r2, #255	; 0xff
   3e434:	movt	r2, #65532	; 0xfffc
   3e438:	add	r0, r0, r8, lsl #3
   3e43c:	ldr	r1, [r0, #4]
   3e440:	and	r1, r1, r2
   3e444:	ldr	r2, [sp, #16]
   3e448:	orr	r1, r1, r2
   3e44c:	movw	r2, #65280	; 0xff00
   3e450:	str	r1, [r0, #4]
   3e454:	movt	r2, #3
   3e458:	ldr	r0, [r9]
   3e45c:	add	r1, r0, r5, lsl #3
   3e460:	add	r0, r0, r8, lsl #3
   3e464:	ldr	r1, [r1, #4]
   3e468:	and	r1, r1, r2
   3e46c:	ldr	r2, [r0, #4]
   3e470:	orr	r1, r1, r2
   3e474:	str	r1, [r0, #4]
   3e478:	ldr	r0, [r9]
   3e47c:	add	r0, r0, r8, lsl #3
   3e480:	ldr	r1, [r0, #4]
   3e484:	orr	r1, r1, #262144	; 0x40000
   3e488:	str	r1, [r0, #4]
   3e48c:	mov	r1, r8
   3e490:	ldr	r0, [r9, #16]
   3e494:	str	r5, [r0, r8, lsl #2]
   3e498:	ldr	r0, [r9, #20]
   3e49c:	add	r0, r0, r4, lsl #2
   3e4a0:	bl	3e784 <__assert_fail@plt+0x2bcd4>
   3e4a4:	cmp	r0, #0
   3e4a8:	bne	3e1a8 <__assert_fail@plt+0x2b6f8>
   3e4ac:	b	3e5c0 <__assert_fail@plt+0x2bb10>
   3e4b0:	sub	r1, r1, #1
   3e4b4:	mov	r5, ip
   3e4b8:	bl	3e784 <__assert_fail@plt+0x2bcd4>
   3e4bc:	cmp	r0, #0
   3e4c0:	mov	r4, r8
   3e4c4:	bne	3e3f8 <__assert_fail@plt+0x2b948>
   3e4c8:	b	3e5f0 <__assert_fail@plt+0x2bb40>
   3e4cc:	ldr	r1, [sp, #8]
   3e4d0:	cmp	r5, r1
   3e4d4:	bne	3e4e0 <__assert_fail@plt+0x2ba30>
   3e4d8:	cmp	r8, r5
   3e4dc:	bne	3e5cc <__assert_fail@plt+0x2bb1c>
   3e4e0:	ldr	r1, [r2, sl, lsl #3]!
   3e4e4:	ldr	r6, [r3]
   3e4e8:	mov	r0, r9
   3e4ec:	ldr	r2, [r2, #4]
   3e4f0:	bl	3dd78 <__assert_fail@plt+0x2b2c8>
   3e4f4:	mov	r8, r0
   3e4f8:	ubfx	r0, r6, #8, #10
   3e4fc:	mov	r7, #12
   3e500:	cmn	r8, #1
   3e504:	beq	3e5c0 <__assert_fail@plt+0x2bb10>
   3e508:	ldr	r1, [sp, #12]
   3e50c:	movw	r7, #255	; 0xff
   3e510:	movt	r7, #65532	; 0xfffc
   3e514:	orr	r1, r0, r1
   3e518:	movw	r0, #65280	; 0xff00
   3e51c:	movt	r0, #3
   3e520:	str	r1, [sp, #12]
   3e524:	mov	r3, r0
   3e528:	and	r0, r0, r1, lsl #8
   3e52c:	ldr	r1, [r9]
   3e530:	add	r1, r1, r8, lsl #3
   3e534:	ldr	r2, [r1, #4]
   3e538:	and	r2, r2, r7
   3e53c:	mov	r7, #12
   3e540:	orr	r0, r2, r0
   3e544:	str	r0, [r1, #4]
   3e548:	ldr	r0, [r9]
   3e54c:	add	r1, r0, sl, lsl #3
   3e550:	add	r0, r0, r8, lsl #3
   3e554:	ldr	r1, [r1, #4]
   3e558:	ldr	r2, [r0, #4]
   3e55c:	and	r1, r1, r3
   3e560:	orr	r1, r1, r2
   3e564:	str	r1, [r0, #4]
   3e568:	ldr	r0, [r9]
   3e56c:	add	r0, r0, r8, lsl #3
   3e570:	ldr	r1, [r0, #4]
   3e574:	orr	r1, r1, #262144	; 0x40000
   3e578:	str	r1, [r0, #4]
   3e57c:	mov	r1, r8
   3e580:	ldr	r0, [r9, #16]
   3e584:	str	sl, [r0, r8, lsl #2]
   3e588:	ldr	r0, [r9, #20]
   3e58c:	add	r0, r0, r4, lsl #2
   3e590:	bl	3e784 <__assert_fail@plt+0x2bcd4>
   3e594:	cmp	r0, #0
   3e598:	mov	r5, sl
   3e59c:	bne	3e194 <__assert_fail@plt+0x2b6e4>
   3e5a0:	b	3e5c0 <__assert_fail@plt+0x2bb10>
   3e5a4:	ldr	r0, [r9, #12]
   3e5a8:	ldr	r1, [r0, r5, lsl #2]
   3e5ac:	str	r1, [r0, r8, lsl #2]
   3e5b0:	mov	r0, #0
   3e5b4:	sub	sp, fp, #28
   3e5b8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   3e5bc:	mov	r7, r0
   3e5c0:	mov	r0, r7
   3e5c4:	sub	sp, fp, #28
   3e5c8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   3e5cc:	mov	r1, sl
   3e5d0:	bl	3e784 <__assert_fail@plt+0x2bcd4>
   3e5d4:	mov	r1, r0
   3e5d8:	mov	r7, #12
   3e5dc:	mov	r0, #0
   3e5e0:	cmp	r1, #0
   3e5e4:	moveq	r0, r7
   3e5e8:	sub	sp, fp, #28
   3e5ec:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   3e5f0:	mov	r7, #12
   3e5f4:	b	3e5c0 <__assert_fail@plt+0x2bb10>
   3e5f8:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   3e5fc:	add	fp, sp, #24
   3e600:	mov	r8, #0
   3e604:	cmp	r1, #0
   3e608:	beq	3e758 <__assert_fail@plt+0x2bca8>
   3e60c:	mov	r6, r1
   3e610:	ldr	r1, [r1, #4]
   3e614:	cmp	r1, #0
   3e618:	beq	3e758 <__assert_fail@plt+0x2bca8>
   3e61c:	mov	r9, r0
   3e620:	ldr	r2, [r0]
   3e624:	ldr	r0, [r0, #4]
   3e628:	add	r3, r0, r1, lsl #1
   3e62c:	cmp	r2, r3
   3e630:	bge	3e65c <__assert_fail@plt+0x2bbac>
   3e634:	ldr	r0, [r9, #8]
   3e638:	add	r7, r2, r1
   3e63c:	lsl	r1, r7, #3
   3e640:	bl	33500 <__assert_fail@plt+0x20a50>
   3e644:	cmp	r0, #0
   3e648:	beq	3e778 <__assert_fail@plt+0x2bcc8>
   3e64c:	str	r0, [r9, #8]
   3e650:	lsl	r0, r7, #1
   3e654:	str	r0, [r9]
   3e658:	ldr	r0, [r9, #4]
   3e65c:	cmp	r0, #0
   3e660:	beq	3e760 <__assert_fail@plt+0x2bcb0>
   3e664:	ldr	r2, [r6, #4]
   3e668:	sub	r1, r0, #1
   3e66c:	add	r7, r0, r2, lsl #1
   3e670:	sub	r0, r2, #1
   3e674:	orrs	r2, r0, r1
   3e678:	bmi	3e6c0 <__assert_fail@plt+0x2bc10>
   3e67c:	ldr	r2, [r6, #8]
   3e680:	ldr	r3, [r9, #8]
   3e684:	b	3e6a4 <__assert_fail@plt+0x2bbf4>
   3e688:	sublt	r7, r7, #1
   3e68c:	subge	r1, r1, #1
   3e690:	sublt	r0, r0, #1
   3e694:	strlt	r4, [r3, r7, lsl #2]
   3e698:	orr	r5, r0, r1
   3e69c:	cmn	r5, #1
   3e6a0:	ble	3e6c0 <__assert_fail@plt+0x2bc10>
   3e6a4:	ldr	r4, [r2, r0, lsl #2]
   3e6a8:	ldr	r5, [r3, r1, lsl #2]
   3e6ac:	cmp	r5, r4
   3e6b0:	bne	3e688 <__assert_fail@plt+0x2bbd8>
   3e6b4:	sub	r1, r1, #1
   3e6b8:	sub	r0, r0, #1
   3e6bc:	b	3e698 <__assert_fail@plt+0x2bbe8>
   3e6c0:	cmp	r0, #0
   3e6c4:	bmi	3e6e4 <__assert_fail@plt+0x2bc34>
   3e6c8:	add	r2, r0, #1
   3e6cc:	ldr	r0, [r9, #8]
   3e6d0:	ldr	r1, [r6, #8]
   3e6d4:	sub	r7, r7, r2
   3e6d8:	lsl	r2, r2, #2
   3e6dc:	add	r0, r0, r7, lsl #2
   3e6e0:	bl	124e0 <memcpy@plt>
   3e6e4:	ldr	r0, [r9, #4]
   3e6e8:	ldr	r2, [r6, #4]
   3e6ec:	sub	r1, r0, #1
   3e6f0:	add	r3, r1, r2, lsl #1
   3e6f4:	sub	r2, r3, r7
   3e6f8:	adds	r2, r2, #1
   3e6fc:	bcs	3e758 <__assert_fail@plt+0x2bca8>
   3e700:	add	r0, r2, r0
   3e704:	str	r0, [r9, #4]
   3e708:	ldr	r0, [r9, #8]
   3e70c:	ldr	r6, [r0, r1, lsl #2]
   3e710:	ldr	r5, [r0, r3, lsl #2]
   3e714:	cmp	r5, r6
   3e718:	ble	3e734 <__assert_fail@plt+0x2bc84>
   3e71c:	add	r6, r2, r1
   3e720:	subs	r2, r2, #1
   3e724:	sub	r3, r3, #1
   3e728:	str	r5, [r0, r6, lsl #2]
   3e72c:	bne	3e70c <__assert_fail@plt+0x2bc5c>
   3e730:	b	3e758 <__assert_fail@plt+0x2bca8>
   3e734:	add	r5, r2, r1
   3e738:	cmp	r1, #0
   3e73c:	str	r6, [r0, r5, lsl #2]
   3e740:	sub	r6, r1, #1
   3e744:	mov	r1, r6
   3e748:	bgt	3e70c <__assert_fail@plt+0x2bc5c>
   3e74c:	add	r1, r0, r7, lsl #2
   3e750:	lsl	r2, r2, #2
   3e754:	bl	124e0 <memcpy@plt>
   3e758:	mov	r0, r8
   3e75c:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   3e760:	ldr	r0, [r6, #4]
   3e764:	str	r0, [r9, #4]
   3e768:	ldr	r0, [r9, #8]
   3e76c:	ldr	r2, [r6, #4]
   3e770:	ldr	r1, [r6, #8]
   3e774:	b	3e750 <__assert_fail@plt+0x2bca0>
   3e778:	mov	r8, #12
   3e77c:	mov	r0, r8
   3e780:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   3e784:	push	{r4, r5, r6, sl, fp, lr}
   3e788:	add	fp, sp, #16
   3e78c:	ldr	r2, [r0]
   3e790:	mov	r5, r1
   3e794:	mov	r4, r0
   3e798:	cmp	r2, #0
   3e79c:	beq	3e7cc <__assert_fail@plt+0x2bd1c>
   3e7a0:	ldr	r1, [r4, #4]
   3e7a4:	cmp	r1, #0
   3e7a8:	bne	3e808 <__assert_fail@plt+0x2bd58>
   3e7ac:	ldr	r0, [r4, #8]
   3e7b0:	str	r5, [r0]
   3e7b4:	ldr	r0, [r4, #4]
   3e7b8:	mov	r6, #1
   3e7bc:	add	r0, r0, #1
   3e7c0:	str	r0, [r4, #4]
   3e7c4:	mov	r0, r6
   3e7c8:	pop	{r4, r5, r6, sl, fp, pc}
   3e7cc:	mov	r6, #1
   3e7d0:	mov	r0, #4
   3e7d4:	str	r6, [r4]
   3e7d8:	str	r6, [r4, #4]
   3e7dc:	bl	327ac <__assert_fail@plt+0x1fcfc>
   3e7e0:	cmp	r0, #0
   3e7e4:	str	r0, [r4, #8]
   3e7e8:	strne	r5, [r0]
   3e7ec:	movne	r0, r6
   3e7f0:	popne	{r4, r5, r6, sl, fp, pc}
   3e7f4:	mov	r6, #0
   3e7f8:	mov	r0, r6
   3e7fc:	str	r6, [r4]
   3e800:	str	r6, [r4, #4]
   3e804:	pop	{r4, r5, r6, sl, fp, pc}
   3e808:	cmp	r2, r1
   3e80c:	bne	3e838 <__assert_fail@plt+0x2bd88>
   3e810:	lsl	r0, r2, #1
   3e814:	lsl	r1, r2, #3
   3e818:	str	r0, [r4]
   3e81c:	ldr	r0, [r4, #8]
   3e820:	bl	33500 <__assert_fail@plt+0x20a50>
   3e824:	cmp	r0, #0
   3e828:	beq	3e8ec <__assert_fail@plt+0x2be3c>
   3e82c:	str	r0, [r4, #8]
   3e830:	ldr	r1, [r4, #4]
   3e834:	b	3e83c <__assert_fail@plt+0x2bd8c>
   3e838:	ldr	r0, [r4, #8]
   3e83c:	ldr	r2, [r0]
   3e840:	cmp	r2, r5
   3e844:	ble	3e8b4 <__assert_fail@plt+0x2be04>
   3e848:	cmp	r1, #1
   3e84c:	blt	3e8e4 <__assert_fail@plt+0x2be34>
   3e850:	ands	r3, r1, #3
   3e854:	sub	ip, r1, #1
   3e858:	beq	3e87c <__assert_fail@plt+0x2bdcc>
   3e85c:	add	lr, r0, r1, lsl #2
   3e860:	mov	r6, lr
   3e864:	ldr	r2, [r6, #-4]!
   3e868:	subs	r3, r3, #1
   3e86c:	sub	r1, r1, #1
   3e870:	str	r2, [lr]
   3e874:	mov	lr, r6
   3e878:	bne	3e864 <__assert_fail@plt+0x2bdb4>
   3e87c:	cmp	ip, #3
   3e880:	bcc	3e8ac <__assert_fail@plt+0x2bdfc>
   3e884:	add	r2, r0, r1, lsl #2
   3e888:	sub	r2, r2, #8
   3e88c:	sub	lr, r2, #8
   3e890:	sub	r1, r1, #4
   3e894:	sub	sl, r2, #4
   3e898:	sub	r2, r2, #16
   3e89c:	ldm	lr, {r3, r6, ip, lr}
   3e8a0:	cmp	r1, #0
   3e8a4:	stm	sl, {r3, r6, ip, lr}
   3e8a8:	bgt	3e88c <__assert_fail@plt+0x2bddc>
   3e8ac:	mov	r1, #0
   3e8b0:	b	3e8e4 <__assert_fail@plt+0x2be34>
   3e8b4:	add	r2, r0, r1, lsl #2
   3e8b8:	ldr	r3, [r2, #-4]
   3e8bc:	cmp	r3, r5
   3e8c0:	ble	3e8e4 <__assert_fail@plt+0x2be34>
   3e8c4:	sub	r1, r1, #2
   3e8c8:	str	r3, [r2]
   3e8cc:	sub	r1, r1, #1
   3e8d0:	ldr	r3, [r2, #-8]
   3e8d4:	sub	r2, r2, #4
   3e8d8:	cmp	r3, r5
   3e8dc:	bgt	3e8c8 <__assert_fail@plt+0x2be18>
   3e8e0:	add	r1, r1, #2
   3e8e4:	str	r5, [r0, r1, lsl #2]
   3e8e8:	b	3e7b4 <__assert_fail@plt+0x2bd04>
   3e8ec:	mov	r6, #0
   3e8f0:	mov	r0, r6
   3e8f4:	pop	{r4, r5, r6, sl, fp, pc}
   3e8f8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   3e8fc:	add	fp, sp, #28
   3e900:	sub	sp, sp, #28
   3e904:	ldr	r8, [r2, #4]
   3e908:	str	r2, [sp, #24]
   3e90c:	cmp	r8, #0
   3e910:	beq	3eb1c <__assert_fail@plt+0x2c06c>
   3e914:	mov	r9, r3
   3e918:	add	r7, r8, r3
   3e91c:	cmp	r8, #1
   3e920:	str	r0, [sp, #4]
   3e924:	blt	3ea08 <__assert_fail@plt+0x2bf58>
   3e928:	ldr	r0, [sp, #24]
   3e92c:	mov	sl, #0
   3e930:	cmp	r8, #4
   3e934:	ldr	ip, [r0, #8]
   3e938:	bcc	3e9f0 <__assert_fail@plt+0x2bf40>
   3e93c:	mov	r3, #0
   3e940:	bic	sl, r8, #3
   3e944:	mov	r0, #1
   3e948:	vdup.32	q8, r3
   3e94c:	sub	r2, sl, #4
   3e950:	add	r0, r0, r2, lsr #2
   3e954:	cmp	r2, #12
   3e958:	and	lr, r0, #3
   3e95c:	vmov.32	d16[0], r7
   3e960:	bcc	3e9b4 <__assert_fail@plt+0x2bf04>
   3e964:	sub	r5, r0, lr
   3e968:	mov	r3, #0
   3e96c:	mov	r4, #64	; 0x40
   3e970:	mov	r7, ip
   3e974:	mov	r6, ip
   3e978:	vld1.32	{d18-d19}, [r6], r4
   3e97c:	add	r2, r7, #16
   3e980:	add	r0, r7, #32
   3e984:	subs	r5, r5, #4
   3e988:	add	r3, r3, #16
   3e98c:	vld1.32	{d20-d21}, [r2]
   3e990:	vadd.i32	q8, q9, q8
   3e994:	vld1.32	{d18-d19}, [r0]
   3e998:	add	r0, r7, #48	; 0x30
   3e99c:	mov	r7, r6
   3e9a0:	vadd.i32	q8, q10, q8
   3e9a4:	vld1.32	{d20-d21}, [r0]
   3e9a8:	vadd.i32	q8, q9, q8
   3e9ac:	vadd.i32	q8, q10, q8
   3e9b0:	bne	3e978 <__assert_fail@plt+0x2bec8>
   3e9b4:	cmp	lr, #0
   3e9b8:	beq	3e9d4 <__assert_fail@plt+0x2bf24>
   3e9bc:	add	r0, ip, r3, lsl #2
   3e9c0:	rsb	r3, lr, #0
   3e9c4:	vld1.32	{d18-d19}, [r0]!
   3e9c8:	adds	r3, r3, #1
   3e9cc:	vadd.i32	q8, q9, q8
   3e9d0:	bcc	3e9c4 <__assert_fail@plt+0x2bf14>
   3e9d4:	vext.8	q9, q8, q8, #8
   3e9d8:	cmp	r8, sl
   3e9dc:	vadd.i32	q8, q8, q9
   3e9e0:	vdup.32	q9, d16[1]
   3e9e4:	vadd.i32	q8, q8, q9
   3e9e8:	vmov.32	r7, d16[0]
   3e9ec:	beq	3ea08 <__assert_fail@plt+0x2bf58>
   3e9f0:	add	r3, ip, sl, lsl #2
   3e9f4:	sub	r2, r8, sl
   3e9f8:	ldr	r0, [r3], #4
   3e9fc:	subs	r2, r2, #1
   3ea00:	add	r7, r0, r7
   3ea04:	bne	3e9f8 <__assert_fail@plt+0x2bf48>
   3ea08:	ldr	r0, [r1, #32]
   3ea0c:	mov	sl, r1
   3ea10:	ldr	r1, [r1, #68]	; 0x44
   3ea14:	and	r1, r1, r7
   3ea18:	add	r2, r1, r1, lsl #1
   3ea1c:	ldr	r1, [r0, r2, lsl #2]
   3ea20:	cmp	r1, #1
   3ea24:	blt	3eabc <__assert_fail@plt+0x2c00c>
   3ea28:	add	r0, r0, r2, lsl #2
   3ea2c:	sub	ip, r8, #1
   3ea30:	mov	r5, #0
   3ea34:	ldr	lr, [r0, #8]
   3ea38:	b	3ea48 <__assert_fail@plt+0x2bf98>
   3ea3c:	add	r5, r5, #1
   3ea40:	cmp	r5, r1
   3ea44:	bge	3eabc <__assert_fail@plt+0x2c00c>
   3ea48:	ldr	r4, [lr, r5, lsl #2]
   3ea4c:	ldr	r0, [r4]
   3ea50:	cmp	r0, r7
   3ea54:	bne	3ea3c <__assert_fail@plt+0x2bf8c>
   3ea58:	ldrb	r0, [r4, #52]	; 0x34
   3ea5c:	and	r0, r0, #15
   3ea60:	cmp	r0, r9
   3ea64:	bne	3ea3c <__assert_fail@plt+0x2bf8c>
   3ea68:	ldr	r0, [sp, #24]
   3ea6c:	cmp	r0, #0
   3ea70:	ldrne	r3, [r4, #40]	; 0x28
   3ea74:	cmpne	r3, #0
   3ea78:	beq	3ea3c <__assert_fail@plt+0x2bf8c>
   3ea7c:	ldr	r0, [r3, #4]
   3ea80:	cmp	r0, r8
   3ea84:	bne	3ea3c <__assert_fail@plt+0x2bf8c>
   3ea88:	mov	r0, ip
   3ea8c:	add	r6, r0, #1
   3ea90:	cmp	r6, #1
   3ea94:	blt	3ed5c <__assert_fail@plt+0x2c2ac>
   3ea98:	ldr	r2, [sp, #24]
   3ea9c:	ldr	r6, [r2, #8]
   3eaa0:	ldr	r2, [r3, #8]
   3eaa4:	ldr	r6, [r6, r0, lsl #2]
   3eaa8:	ldr	r2, [r2, r0, lsl #2]
   3eaac:	sub	r0, r0, #1
   3eab0:	cmp	r2, r6
   3eab4:	beq	3ea8c <__assert_fail@plt+0x2bfdc>
   3eab8:	b	3ea3c <__assert_fail@plt+0x2bf8c>
   3eabc:	mov	r0, #56	; 0x38
   3eac0:	mov	r1, #1
   3eac4:	bl	2fb8c <__assert_fail@plt+0x1d0dc>
   3eac8:	cmp	r0, #0
   3eacc:	beq	3ed7c <__assert_fail@plt+0x2c2cc>
   3ead0:	mov	r4, r0
   3ead4:	ldr	r0, [sp, #24]
   3ead8:	add	r6, r4, #4
   3eadc:	ldr	r8, [r0, #4]
   3eae0:	cmp	r8, #1
   3eae4:	str	r8, [r4, #8]
   3eae8:	blt	3eb28 <__assert_fail@plt+0x2c078>
   3eaec:	lsl	r0, r8, #2
   3eaf0:	str	r8, [r4, #4]
   3eaf4:	bl	327ac <__assert_fail@plt+0x1fcfc>
   3eaf8:	cmp	r0, #0
   3eafc:	str	r0, [r4, #12]
   3eb00:	beq	3ed90 <__assert_fail@plt+0x2c2e0>
   3eb04:	ldr	r1, [sp, #24]
   3eb08:	ldr	r8, [r1, #4]
   3eb0c:	ldr	r1, [r1, #8]
   3eb10:	lsl	r2, r8, #2
   3eb14:	bl	124e0 <memcpy@plt>
   3eb18:	b	3eb38 <__assert_fail@plt+0x2c088>
   3eb1c:	mov	r4, #0
   3eb20:	str	r4, [r0]
   3eb24:	b	3ed5c <__assert_fail@plt+0x2c2ac>
   3eb28:	mov	r0, #0
   3eb2c:	str	r0, [r6]
   3eb30:	str	r0, [r6, #4]
   3eb34:	str	r0, [r6, #8]
   3eb38:	str	r6, [r4, #40]	; 0x28
   3eb3c:	and	r0, r9, #15
   3eb40:	cmp	r8, #1
   3eb44:	ldrb	r1, [r4, #52]	; 0x34
   3eb48:	and	r1, r1, #240	; 0xf0
   3eb4c:	orr	r0, r1, r0
   3eb50:	strb	r0, [r4, #52]	; 0x34
   3eb54:	mov	r0, sl
   3eb58:	blt	3ed48 <__assert_fail@plt+0x2c298>
   3eb5c:	movw	lr, #65280	; 0xff00
   3eb60:	and	r1, r9, #4
   3eb64:	and	ip, r9, #1
   3eb68:	mov	sl, #0
   3eb6c:	mov	r5, #0
   3eb70:	str	r0, [sp, #16]
   3eb74:	movt	lr, #3
   3eb78:	str	r1, [sp]
   3eb7c:	and	r1, r9, #2
   3eb80:	str	ip, [sp, #12]
   3eb84:	str	r1, [sp, #8]
   3eb88:	add	r1, lr, #255	; 0xff
   3eb8c:	str	r1, [sp, #20]
   3eb90:	b	3eba4 <__assert_fail@plt+0x2c0f4>
   3eb94:	add	r5, r5, #1
   3eb98:	add	sl, sl, #1
   3eb9c:	cmp	sl, r8
   3eba0:	bge	3ed48 <__assert_fail@plt+0x2c298>
   3eba4:	ldr	r1, [sp, #24]
   3eba8:	ldr	r2, [r0]
   3ebac:	ldr	r1, [r1, #8]
   3ebb0:	ldr	r1, [r1, sl, lsl #2]
   3ebb4:	add	r1, r2, r1, lsl #3
   3ebb8:	ldr	r9, [r1, #4]
   3ebbc:	ldr	r1, [sp, #20]
   3ebc0:	and	r1, r9, r1
   3ebc4:	cmp	r1, #1
   3ebc8:	beq	3eb98 <__assert_fail@plt+0x2c0e8>
   3ebcc:	ldrb	r3, [r4, #52]	; 0x34
   3ebd0:	mov	r2, #32
   3ebd4:	and	r1, r9, lr
   3ebd8:	and	r2, r2, r9, lsr #15
   3ebdc:	orr	r2, r3, r2
   3ebe0:	uxtb	r3, r9
   3ebe4:	strb	r2, [r4, #52]	; 0x34
   3ebe8:	cmp	r3, #2
   3ebec:	beq	3ec00 <__assert_fail@plt+0x2c150>
   3ebf0:	cmp	r3, #4
   3ebf4:	bne	3ec0c <__assert_fail@plt+0x2c15c>
   3ebf8:	mov	r3, #64	; 0x40
   3ebfc:	b	3ec04 <__assert_fail@plt+0x2c154>
   3ec00:	mov	r3, #16
   3ec04:	orr	r2, r2, r3
   3ec08:	strb	r2, [r4, #52]	; 0x34
   3ec0c:	cmp	r1, #0
   3ec10:	beq	3eb98 <__assert_fail@plt+0x2c0e8>
   3ec14:	ldr	r1, [r4, #40]	; 0x28
   3ec18:	cmp	r1, r6
   3ec1c:	beq	3ec34 <__assert_fail@plt+0x2c184>
   3ec20:	cmp	ip, #0
   3ec24:	bne	3ecc8 <__assert_fail@plt+0x2c218>
   3ec28:	ands	r1, r9, #256	; 0x100
   3ec2c:	bne	3ecfc <__assert_fail@plt+0x2c24c>
   3ec30:	b	3ecc8 <__assert_fail@plt+0x2c218>
   3ec34:	mov	r0, #12
   3ec38:	bl	327ac <__assert_fail@plt+0x1fcfc>
   3ec3c:	cmp	r0, #0
   3ec40:	beq	3ed74 <__assert_fail@plt+0x2c2c4>
   3ec44:	mov	r5, r0
   3ec48:	str	r0, [r4, #40]	; 0x28
   3ec4c:	ldr	r0, [sp, #24]
   3ec50:	ldr	r8, [r0, #4]
   3ec54:	cmp	r8, #1
   3ec58:	str	r8, [r5, #4]
   3ec5c:	blt	3ec90 <__assert_fail@plt+0x2c1e0>
   3ec60:	lsl	r0, r8, #2
   3ec64:	str	r8, [r5]
   3ec68:	bl	327ac <__assert_fail@plt+0x1fcfc>
   3ec6c:	cmp	r0, #0
   3ec70:	str	r0, [r5, #8]
   3ec74:	beq	3ed68 <__assert_fail@plt+0x2c2b8>
   3ec78:	ldr	r1, [sp, #24]
   3ec7c:	ldr	r8, [r1, #4]
   3ec80:	ldr	r1, [r1, #8]
   3ec84:	lsl	r2, r8, #2
   3ec88:	bl	124e0 <memcpy@plt>
   3ec8c:	b	3eca0 <__assert_fail@plt+0x2c1f0>
   3ec90:	mov	r0, #0
   3ec94:	str	r0, [r5]
   3ec98:	str	r0, [r5, #4]
   3ec9c:	str	r0, [r5, #8]
   3eca0:	ldrb	r0, [r4, #52]	; 0x34
   3eca4:	ldr	ip, [sp, #12]
   3eca8:	movw	lr, #65280	; 0xff00
   3ecac:	mov	r5, #0
   3ecb0:	movt	lr, #3
   3ecb4:	orr	r0, r0, #128	; 0x80
   3ecb8:	strb	r0, [r4, #52]	; 0x34
   3ecbc:	ldr	r0, [sp, #16]
   3ecc0:	cmp	ip, #0
   3ecc4:	beq	3ec28 <__assert_fail@plt+0x2c178>
   3ecc8:	cmp	ip, #0
   3eccc:	andsne	r1, r9, #512	; 0x200
   3ecd0:	bne	3ecfc <__assert_fail@plt+0x2c24c>
   3ecd4:	ldr	r1, [sp, #8]
   3ecd8:	cmp	r1, #0
   3ecdc:	bne	3ece8 <__assert_fail@plt+0x2c238>
   3ece0:	ands	r1, r9, #4096	; 0x1000
   3ece4:	bne	3ecfc <__assert_fail@plt+0x2c24c>
   3ece8:	ldr	r1, [sp]
   3ecec:	cmp	r1, #0
   3ecf0:	bne	3eb98 <__assert_fail@plt+0x2c0e8>
   3ecf4:	ands	r1, r9, #16384	; 0x4000
   3ecf8:	beq	3eb98 <__assert_fail@plt+0x2c0e8>
   3ecfc:	subs	r1, sl, r5
   3ed00:	bmi	3eb94 <__assert_fail@plt+0x2c0e4>
   3ed04:	ldr	r2, [r4, #8]
   3ed08:	cmp	r2, r1
   3ed0c:	subgt	r2, r2, #1
   3ed10:	strgt	r2, [r4, #8]
   3ed14:	cmpgt	r2, r1
   3ed18:	ble	3eb94 <__assert_fail@plt+0x2c0e4>
   3ed1c:	ldr	r2, [r4, #12]
   3ed20:	add	r3, r2, r1, lsl #2
   3ed24:	ldr	r3, [r3, #4]
   3ed28:	str	r3, [r2, r1, lsl #2]
   3ed2c:	add	r1, r1, #1
   3ed30:	ldr	r3, [r4, #8]
   3ed34:	cmp	r1, r3
   3ed38:	blt	3ed20 <__assert_fail@plt+0x2c270>
   3ed3c:	ldr	r1, [sp, #24]
   3ed40:	ldr	r8, [r1, #4]
   3ed44:	b	3eb94 <__assert_fail@plt+0x2c0e4>
   3ed48:	mov	r1, r4
   3ed4c:	mov	r2, r7
   3ed50:	bl	3eda8 <__assert_fail@plt+0x2c2f8>
   3ed54:	cmp	r0, #0
   3ed58:	bne	3ed74 <__assert_fail@plt+0x2c2c4>
   3ed5c:	mov	r0, r4
   3ed60:	sub	sp, fp, #28
   3ed64:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   3ed68:	mov	r0, #0
   3ed6c:	str	r0, [r5]
   3ed70:	str	r0, [r5, #4]
   3ed74:	mov	r0, r4
   3ed78:	bl	38938 <__assert_fail@plt+0x25e88>
   3ed7c:	ldr	r1, [sp, #4]
   3ed80:	mov	r0, #12
   3ed84:	mov	r4, #0
   3ed88:	str	r0, [r1]
   3ed8c:	b	3ed5c <__assert_fail@plt+0x2c2ac>
   3ed90:	mov	r0, #0
   3ed94:	str	r0, [r4, #4]
   3ed98:	str	r0, [r4, #8]
   3ed9c:	mov	r0, r4
   3eda0:	bl	30174 <__assert_fail@plt+0x1d6c4>
   3eda4:	b	3ed7c <__assert_fail@plt+0x2c2cc>
   3eda8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   3edac:	add	fp, sp, #28
   3edb0:	sub	sp, sp, #4
   3edb4:	str	r2, [r1]
   3edb8:	mov	r4, r1
   3edbc:	mov	r7, r0
   3edc0:	mov	r0, #0
   3edc4:	mov	r9, r2
   3edc8:	ldr	r1, [r1, #8]
   3edcc:	str	r1, [r4, #16]
   3edd0:	str	r0, [r4, #20]
   3edd4:	lsl	r0, r1, #2
   3edd8:	bl	327ac <__assert_fail@plt+0x1fcfc>
   3eddc:	mov	r8, #12
   3ede0:	cmp	r0, #0
   3ede4:	str	r0, [r4, #24]
   3ede8:	beq	3eeb0 <__assert_fail@plt+0x2c400>
   3edec:	ldr	r1, [r4, #8]
   3edf0:	cmp	r1, #1
   3edf4:	blt	3ee70 <__assert_fail@plt+0x2c3c0>
   3edf8:	mov	r5, #0
   3edfc:	mov	sl, #2
   3ee00:	b	3ee20 <__assert_fail@plt+0x2c370>
   3ee04:	add	r2, r1, #1
   3ee08:	str	r2, [r4, #20]
   3ee0c:	str	r6, [r0, r1, lsl #2]
   3ee10:	ldr	r1, [r4, #8]
   3ee14:	add	r5, r5, #1
   3ee18:	cmp	r5, r1
   3ee1c:	bge	3ee70 <__assert_fail@plt+0x2c3c0>
   3ee20:	ldr	r2, [r4, #12]
   3ee24:	ldr	r6, [r2, r5, lsl #2]
   3ee28:	ldr	r2, [r7]
   3ee2c:	add	r2, r2, r6, lsl #3
   3ee30:	ldrb	r2, [r2, #4]
   3ee34:	tst	r2, #8
   3ee38:	bne	3ee14 <__assert_fail@plt+0x2c364>
   3ee3c:	ldr	r2, [r4, #16]
   3ee40:	ldr	r1, [r4, #20]
   3ee44:	cmp	r2, r1
   3ee48:	bne	3ee04 <__assert_fail@plt+0x2c354>
   3ee4c:	add	r1, sl, r2, lsl #1
   3ee50:	str	r1, [r4, #16]
   3ee54:	lsl	r1, r1, #2
   3ee58:	bl	33500 <__assert_fail@plt+0x20a50>
   3ee5c:	cmp	r0, #0
   3ee60:	beq	3eeb0 <__assert_fail@plt+0x2c400>
   3ee64:	str	r0, [r4, #24]
   3ee68:	ldr	r1, [r4, #20]
   3ee6c:	b	3ee04 <__assert_fail@plt+0x2c354>
   3ee70:	ldr	r1, [r7, #68]	; 0x44
   3ee74:	ldr	r0, [r7, #32]
   3ee78:	and	r1, r1, r9
   3ee7c:	mov	r5, r0
   3ee80:	add	r2, r1, r1, lsl #1
   3ee84:	ldr	r1, [r5, r2, lsl #2]!
   3ee88:	mov	r6, r5
   3ee8c:	ldr	r3, [r6, #4]!
   3ee90:	cmp	r3, r1
   3ee94:	ble	3eebc <__assert_fail@plt+0x2c40c>
   3ee98:	add	r0, r0, r2, lsl #2
   3ee9c:	ldr	r0, [r0, #8]
   3eea0:	add	r2, r1, #1
   3eea4:	mov	r8, #0
   3eea8:	str	r2, [r5]
   3eeac:	str	r4, [r0, r1, lsl #2]
   3eeb0:	mov	r0, r8
   3eeb4:	sub	sp, fp, #28
   3eeb8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   3eebc:	add	r7, r0, r2, lsl #2
   3eec0:	mov	r2, #2
   3eec4:	add	r9, r2, r1, lsl #1
   3eec8:	ldr	r0, [r7, #8]!
   3eecc:	lsl	r1, r9, #2
   3eed0:	bl	33500 <__assert_fail@plt+0x20a50>
   3eed4:	cmp	r0, #0
   3eed8:	beq	3eeb0 <__assert_fail@plt+0x2c400>
   3eedc:	str	r0, [r7]
   3eee0:	str	r9, [r6]
   3eee4:	ldr	r1, [r5]
   3eee8:	b	3eea0 <__assert_fail@plt+0x2c3f0>
   3eeec:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   3eef0:	add	fp, sp, #28
   3eef4:	sub	sp, sp, #36	; 0x24
   3eef8:	mov	r4, r0
   3eefc:	ldr	r0, [r0, #24]
   3ef00:	mov	r6, r2
   3ef04:	mov	r9, r1
   3ef08:	cmp	r0, r1
   3ef0c:	ble	3f108 <__assert_fail@plt+0x2c658>
   3ef10:	ldr	r0, [r4, #80]	; 0x50
   3ef14:	mov	r1, #4
   3ef18:	cmp	r0, #2
   3ef1c:	movge	r0, #0
   3ef20:	strge	r0, [r4, #16]
   3ef24:	strge	r0, [r4, #20]
   3ef28:	mov	r0, #0
   3ef2c:	tst	r6, #1
   3ef30:	strb	r0, [r4, #76]	; 0x4c
   3ef34:	str	r0, [r4, #24]
   3ef38:	str	r0, [r4, #28]
   3ef3c:	str	r0, [r4, #32]
   3ef40:	movweq	r1, #6
   3ef44:	ldr	r2, [r4, #44]	; 0x2c
   3ef48:	ldr	r3, [r4, #52]	; 0x34
   3ef4c:	str	r2, [r4, #48]	; 0x30
   3ef50:	str	r3, [r4, #56]	; 0x38
   3ef54:	str	r1, [r4, #60]	; 0x3c
   3ef58:	ldrb	r1, [r4, #75]	; 0x4b
   3ef5c:	cmp	r1, #0
   3ef60:	bne	3ef6c <__assert_fail@plt+0x2c4bc>
   3ef64:	ldr	r1, [r4]
   3ef68:	str	r1, [r4, #4]
   3ef6c:	mov	r5, r9
   3ef70:	cmp	r5, #0
   3ef74:	beq	3f090 <__assert_fail@plt+0x2c5e0>
   3ef78:	ldr	r1, [r4, #32]
   3ef7c:	cmp	r5, r1
   3ef80:	bge	3f118 <__assert_fail@plt+0x2c668>
   3ef84:	ldrb	r0, [r4, #76]	; 0x4c
   3ef88:	cmp	r0, #0
   3ef8c:	bne	3f294 <__assert_fail@plt+0x2c7e4>
   3ef90:	cmp	r5, #0
   3ef94:	ble	3efd0 <__assert_fail@plt+0x2c520>
   3ef98:	ldr	r1, [r4, #48]	; 0x30
   3ef9c:	sub	r0, r5, #1
   3efa0:	cmp	r1, r0
   3efa4:	beq	3f34c <__assert_fail@plt+0x2c89c>
   3efa8:	ldr	r1, [r4, #80]	; 0x50
   3efac:	cmp	r1, #2
   3efb0:	blt	3efd8 <__assert_fail@plt+0x2c528>
   3efb4:	ldr	r1, [r4, #8]
   3efb8:	ldr	r6, [r1, r0, lsl #2]
   3efbc:	cmn	r6, #1
   3efc0:	bne	3f008 <__assert_fail@plt+0x2c558>
   3efc4:	sub	r0, r0, #1
   3efc8:	cmn	r0, #1
   3efcc:	bne	3efb8 <__assert_fail@plt+0x2c508>
   3efd0:	ldr	r1, [r4, #60]	; 0x3c
   3efd4:	b	3f030 <__assert_fail@plt+0x2c580>
   3efd8:	ldr	r1, [r4, #4]
   3efdc:	ldr	r2, [r4, #68]	; 0x44
   3efe0:	ldrb	r0, [r1, r0]
   3efe4:	ubfx	r1, r0, #5, #3
   3efe8:	and	r3, r0, #31
   3efec:	ldr	r2, [r2, r1, lsl #2]
   3eff0:	mov	r1, #1
   3eff4:	tst	r2, r1, lsl r3
   3eff8:	moveq	r1, #0
   3effc:	cmpeq	r0, #10
   3f000:	bne	3f030 <__assert_fail@plt+0x2c580>
   3f004:	b	3f020 <__assert_fail@plt+0x2c570>
   3f008:	ldrb	r0, [r4, #78]	; 0x4e
   3f00c:	cmp	r0, #0
   3f010:	bne	3f5e4 <__assert_fail@plt+0x2cb34>
   3f014:	mov	r1, #0
   3f018:	cmp	r6, #10
   3f01c:	bne	3f030 <__assert_fail@plt+0x2c580>
   3f020:	ldrb	r0, [r4, #77]	; 0x4d
   3f024:	cmp	r0, #0
   3f028:	movwne	r0, #1
   3f02c:	lsl	r1, r0, #1
   3f030:	str	r1, [r4, #60]	; 0x3c
   3f034:	ldr	r0, [r4, #80]	; 0x50
   3f038:	cmp	r0, #2
   3f03c:	blt	3f058 <__assert_fail@plt+0x2c5a8>
   3f040:	ldr	r2, [r4, #28]
   3f044:	ldr	r0, [r4, #8]
   3f048:	sub	r2, r2, r5
   3f04c:	add	r1, r0, r5, lsl #2
   3f050:	lsl	r2, r2, #2
   3f054:	bl	12474 <memmove@plt>
   3f058:	ldrb	r0, [r4, #75]	; 0x4b
   3f05c:	cmp	r0, #0
   3f060:	bne	3f334 <__assert_fail@plt+0x2c884>
   3f064:	ldr	r0, [r4, #28]
   3f068:	ldr	r1, [r4, #32]
   3f06c:	sub	r0, r0, r5
   3f070:	sub	r1, r1, r5
   3f074:	str	r0, [r4, #28]
   3f078:	str	r1, [r4, #32]
   3f07c:	ldrb	r0, [r4, #75]	; 0x4b
   3f080:	cmp	r0, #0
   3f084:	ldreq	r0, [r4, #4]
   3f088:	addeq	r0, r0, r5
   3f08c:	streq	r0, [r4, #4]
   3f090:	str	r9, [r4, #24]
   3f094:	ldr	r0, [r4, #48]	; 0x30
   3f098:	ldr	r3, [r4, #80]	; 0x50
   3f09c:	ldr	r1, [r4, #56]	; 0x38
   3f0a0:	sub	r2, r0, r5
   3f0a4:	cmp	r3, #2
   3f0a8:	sub	r0, r1, r5
   3f0ac:	str	r2, [r4, #48]	; 0x30
   3f0b0:	str	r0, [r4, #56]	; 0x38
   3f0b4:	blt	3f0dc <__assert_fail@plt+0x2c62c>
   3f0b8:	ldrb	r0, [r4, #72]	; 0x48
   3f0bc:	cmp	r0, #0
   3f0c0:	beq	3f0f0 <__assert_fail@plt+0x2c640>
   3f0c4:	mov	r0, r4
   3f0c8:	bl	389a0 <__assert_fail@plt+0x25ef0>
   3f0cc:	cmp	r0, #0
   3f0d0:	beq	3f0f8 <__assert_fail@plt+0x2c648>
   3f0d4:	sub	sp, fp, #28
   3f0d8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   3f0dc:	ldrb	r0, [r4, #75]	; 0x4b
   3f0e0:	cmp	r0, #0
   3f0e4:	bne	3f358 <__assert_fail@plt+0x2c8a8>
   3f0e8:	str	r2, [r4, #28]
   3f0ec:	b	3f0f8 <__assert_fail@plt+0x2c648>
   3f0f0:	mov	r0, r4
   3f0f4:	bl	392a0 <__assert_fail@plt+0x267f0>
   3f0f8:	mov	r0, #0
   3f0fc:	str	r0, [r4, #40]	; 0x28
   3f100:	sub	sp, fp, #28
   3f104:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   3f108:	sub	r5, r9, r0
   3f10c:	cmp	r5, #0
   3f110:	bne	3ef78 <__assert_fail@plt+0x2c4c8>
   3f114:	b	3f090 <__assert_fail@plt+0x2c5e0>
   3f118:	ldrb	r2, [r4, #76]	; 0x4c
   3f11c:	ldr	lr, [r4, #28]
   3f120:	cmp	r2, #0
   3f124:	bne	3f7a4 <__assert_fail@plt+0x2ccf4>
   3f128:	mov	r2, #0
   3f12c:	str	r2, [r4, #28]
   3f130:	ldr	r3, [r4, #80]	; 0x50
   3f134:	cmp	r3, #2
   3f138:	blt	3f3c8 <__assert_fail@plt+0x2c918>
   3f13c:	ldrb	r2, [r4, #73]	; 0x49
   3f140:	cmp	r2, #0
   3f144:	beq	3f200 <__assert_fail@plt+0x2c750>
   3f148:	ldr	r7, [r4]
   3f14c:	sub	r3, r5, r3
   3f150:	add	ip, r7, r0
   3f154:	add	r3, ip, r3
   3f158:	add	r8, ip, r5
   3f15c:	cmp	r3, r7
   3f160:	movcc	r3, r7
   3f164:	mov	r7, r8
   3f168:	sub	r7, r7, #1
   3f16c:	cmp	r7, r3
   3f170:	bcc	3f200 <__assert_fail@plt+0x2c750>
   3f174:	ldrb	r2, [r7]
   3f178:	and	r2, r2, #192	; 0xc0
   3f17c:	cmp	r2, #128	; 0x80
   3f180:	beq	3f168 <__assert_fail@plt+0x2c6b8>
   3f184:	ldr	r0, [r4, #48]	; 0x30
   3f188:	mov	sl, lr
   3f18c:	mov	r1, r7
   3f190:	add	r0, ip, r0
   3f194:	sub	r2, r0, r7
   3f198:	ldr	r0, [r4, #64]	; 0x40
   3f19c:	cmp	r0, #0
   3f1a0:	bne	3f87c <__assert_fail@plt+0x2cdcc>
   3f1a4:	mov	r0, #0
   3f1a8:	add	r3, sp, #24
   3f1ac:	str	r0, [sp, #28]
   3f1b0:	str	r0, [sp, #24]
   3f1b4:	add	r0, sp, #20
   3f1b8:	bl	327dc <__assert_fail@plt+0x1fd2c>
   3f1bc:	sub	r1, r8, r7
   3f1c0:	mvn	r7, #0
   3f1c4:	cmp	r0, r1
   3f1c8:	bcc	3f1ec <__assert_fail@plt+0x2c73c>
   3f1cc:	cmn	r0, #3
   3f1d0:	bhi	3f1ec <__assert_fail@plt+0x2c73c>
   3f1d4:	mov	r2, #0
   3f1d8:	sub	r0, r0, r1
   3f1dc:	str	r2, [r4, #16]
   3f1e0:	str	r2, [r4, #20]
   3f1e4:	str	r0, [r4, #28]
   3f1e8:	ldr	r7, [sp, #20]
   3f1ec:	cmn	r7, #1
   3f1f0:	bne	3f624 <__assert_fail@plt+0x2cb74>
   3f1f4:	ldr	r0, [r4, #24]
   3f1f8:	ldr	r1, [r4, #32]
   3f1fc:	mov	lr, sl
   3f200:	add	r8, r1, r0
   3f204:	cmp	r8, r9
   3f208:	bge	3f604 <__assert_fail@plt+0x2cb54>
   3f20c:	add	sl, r4, #16
   3f210:	str	lr, [sp]
   3f214:	ldr	r0, [r4]
   3f218:	ldr	r2, [r4, #44]	; 0x2c
   3f21c:	mov	r3, sl
   3f220:	add	r1, r0, r8
   3f224:	ldr	r0, [sl]
   3f228:	sub	r7, r2, r8
   3f22c:	mov	r2, r7
   3f230:	str	r0, [sp, #8]
   3f234:	ldr	r0, [sl, #4]
   3f238:	str	r0, [sp, #4]
   3f23c:	add	r0, sp, #24
   3f240:	bl	327dc <__assert_fail@plt+0x1fd2c>
   3f244:	sub	r1, r0, #1
   3f248:	cmn	r1, #3
   3f24c:	bcs	3f264 <__assert_fail@plt+0x2c7b4>
   3f250:	ldr	r7, [sp, #24]
   3f254:	add	r8, r0, r8
   3f258:	cmp	r8, r9
   3f25c:	blt	3f214 <__assert_fail@plt+0x2c764>
   3f260:	b	3f610 <__assert_fail@plt+0x2cb60>
   3f264:	ldr	r3, [sp, #4]
   3f268:	ldr	r2, [sp, #8]
   3f26c:	cmp	r7, #0
   3f270:	mov	r1, #0
   3f274:	cmpne	r0, #0
   3f278:	beq	3f284 <__assert_fail@plt+0x2c7d4>
   3f27c:	ldr	r0, [r4]
   3f280:	ldrb	r1, [r0, r8]
   3f284:	stm	sl, {r2, r3}
   3f288:	mov	r0, #1
   3f28c:	mov	r7, r1
   3f290:	b	3f254 <__assert_fail@plt+0x2c7a4>
   3f294:	ldr	ip, [r4, #12]
   3f298:	ldr	r0, [r4, #28]
   3f29c:	mov	r2, #0
   3f2a0:	b	3f2b0 <__assert_fail@plt+0x2c800>
   3f2a4:	cmp	r2, r3
   3f2a8:	mov	r0, r3
   3f2ac:	bge	3f2dc <__assert_fail@plt+0x2c82c>
   3f2b0:	add	r1, r2, r0
   3f2b4:	add	r1, r1, r1, lsr #31
   3f2b8:	asr	r1, r1, #1
   3f2bc:	ldr	r7, [ip, r1, lsl #2]
   3f2c0:	mov	r3, r1
   3f2c4:	cmp	r7, r5
   3f2c8:	bgt	3f2a4 <__assert_fail@plt+0x2c7f4>
   3f2cc:	bge	3f2dc <__assert_fail@plt+0x2c82c>
   3f2d0:	add	r2, r1, #1
   3f2d4:	mov	r3, r0
   3f2d8:	b	3f2a4 <__assert_fail@plt+0x2c7f4>
   3f2dc:	cmp	r7, r5
   3f2e0:	mov	r0, #0
   3f2e4:	movwlt	r0, #1
   3f2e8:	add	r7, r1, r0
   3f2ec:	cmp	r7, #0
   3f2f0:	ble	3f32c <__assert_fail@plt+0x2c87c>
   3f2f4:	ldr	r1, [r4, #48]	; 0x30
   3f2f8:	sub	r0, r7, #1
   3f2fc:	cmp	r1, r0
   3f300:	beq	3f7cc <__assert_fail@plt+0x2cd1c>
   3f304:	ldr	r1, [r4, #80]	; 0x50
   3f308:	cmp	r1, #2
   3f30c:	blt	3f414 <__assert_fail@plt+0x2c964>
   3f310:	ldr	r1, [r4, #8]
   3f314:	ldr	r6, [r1, r0, lsl #2]
   3f318:	cmn	r6, #1
   3f31c:	bne	3f444 <__assert_fail@plt+0x2c994>
   3f320:	sub	r0, r0, #1
   3f324:	cmn	r0, #1
   3f328:	bne	3f314 <__assert_fail@plt+0x2c864>
   3f32c:	ldr	r1, [r4, #60]	; 0x3c
   3f330:	b	3f46c <__assert_fail@plt+0x2c9bc>
   3f334:	ldr	r2, [r4, #28]
   3f338:	ldr	r0, [r4, #4]
   3f33c:	add	r1, r0, r5
   3f340:	sub	r2, r2, r5
   3f344:	bl	12474 <memmove@plt>
   3f348:	b	3f064 <__assert_fail@plt+0x2c5b4>
   3f34c:	and	r0, r6, #2
   3f350:	eor	r1, r0, #10
   3f354:	b	3f030 <__assert_fail@plt+0x2c580>
   3f358:	ldrb	r0, [r4, #72]	; 0x48
   3f35c:	cmp	r0, #0
   3f360:	beq	3f688 <__assert_fail@plt+0x2cbd8>
   3f364:	ldr	r6, [r4, #36]	; 0x24
   3f368:	ldr	r5, [r4, #28]
   3f36c:	cmp	r6, r2
   3f370:	movgt	r6, r2
   3f374:	cmp	r5, r6
   3f378:	bge	3f6f4 <__assert_fail@plt+0x2cc44>
   3f37c:	bl	12750 <__ctype_toupper_loc@plt>
   3f380:	ldr	r1, [r4]
   3f384:	ldr	r2, [r4, #64]	; 0x40
   3f388:	add	r1, r1, r9
   3f38c:	cmp	r2, #0
   3f390:	ldrb	r1, [r1, r5]
   3f394:	bne	3f3c0 <__assert_fail@plt+0x2c910>
   3f398:	ldr	r2, [r0]
   3f39c:	ldr	r1, [r2, r1, lsl #2]
   3f3a0:	ldr	r2, [r4, #4]
   3f3a4:	strb	r1, [r2, r5]
   3f3a8:	add	r1, r5, #1
   3f3ac:	cmp	r1, r6
   3f3b0:	bge	3f6f0 <__assert_fail@plt+0x2cc40>
   3f3b4:	ldr	r9, [r4, #24]
   3f3b8:	mov	r5, r1
   3f3bc:	b	3f380 <__assert_fail@plt+0x2c8d0>
   3f3c0:	ldrb	r1, [r2, r1]
   3f3c4:	b	3f398 <__assert_fail@plt+0x2c8e8>
   3f3c8:	ldr	r3, [r4]
   3f3cc:	add	r0, r5, r0
   3f3d0:	ldr	r1, [r4, #64]	; 0x40
   3f3d4:	add	r0, r0, r3
   3f3d8:	cmp	r1, #0
   3f3dc:	ldrb	r0, [r0, #-1]
   3f3e0:	str	r2, [r4, #32]
   3f3e4:	ldrbne	r0, [r1, r0]
   3f3e8:	ldr	r1, [r4, #68]	; 0x44
   3f3ec:	ubfx	r2, r0, #5, #3
   3f3f0:	and	r3, r0, #31
   3f3f4:	ldr	r2, [r1, r2, lsl #2]
   3f3f8:	mov	r1, #1
   3f3fc:	tst	r2, r1, lsl r3
   3f400:	moveq	r1, #0
   3f404:	cmpeq	r0, #10
   3f408:	beq	3f74c <__assert_fail@plt+0x2cc9c>
   3f40c:	str	r1, [r4, #60]	; 0x3c
   3f410:	b	3f07c <__assert_fail@plt+0x2c5cc>
   3f414:	ldr	r1, [r4, #4]
   3f418:	ldr	r2, [r4, #68]	; 0x44
   3f41c:	ldrb	r0, [r1, r0]
   3f420:	ubfx	r1, r0, #5, #3
   3f424:	and	r3, r0, #31
   3f428:	ldr	r2, [r2, r1, lsl #2]
   3f42c:	mov	r1, #1
   3f430:	tst	r2, r1, lsl r3
   3f434:	moveq	r1, #0
   3f438:	cmpeq	r0, #10
   3f43c:	bne	3f46c <__assert_fail@plt+0x2c9bc>
   3f440:	b	3f45c <__assert_fail@plt+0x2c9ac>
   3f444:	ldrb	r0, [r4, #78]	; 0x4e
   3f448:	cmp	r0, #0
   3f44c:	bne	3f82c <__assert_fail@plt+0x2cd7c>
   3f450:	mov	r1, #0
   3f454:	cmp	r6, #10
   3f458:	bne	3f46c <__assert_fail@plt+0x2c9bc>
   3f45c:	ldrb	r0, [r4, #77]	; 0x4d
   3f460:	cmp	r0, #0
   3f464:	movwne	r0, #1
   3f468:	lsl	r1, r0, #1
   3f46c:	str	r1, [r4, #60]	; 0x3c
   3f470:	cmp	r7, r5
   3f474:	ldr	r2, [r4, #28]
   3f478:	bne	3f508 <__assert_fail@plt+0x2ca58>
   3f47c:	cmp	r2, r5
   3f480:	ble	3f508 <__assert_fail@plt+0x2ca58>
   3f484:	ldr	r0, [r4, #12]
   3f488:	ldr	r0, [r0, r5, lsl #2]
   3f48c:	cmp	r0, r5
   3f490:	bne	3f508 <__assert_fail@plt+0x2ca58>
   3f494:	ldr	r0, [r4, #8]
   3f498:	sub	r2, r2, r5
   3f49c:	lsl	r2, r2, #2
   3f4a0:	add	r1, r0, r5, lsl #2
   3f4a4:	bl	12474 <memmove@plt>
   3f4a8:	ldr	r2, [r4, #28]
   3f4ac:	ldr	r0, [r4, #4]
   3f4b0:	add	r1, r0, r5
   3f4b4:	sub	r2, r2, r5
   3f4b8:	bl	12474 <memmove@plt>
   3f4bc:	ldr	r0, [r4, #28]
   3f4c0:	ldr	r1, [r4, #32]
   3f4c4:	sub	r0, r0, r5
   3f4c8:	sub	r1, r1, r5
   3f4cc:	cmp	r0, #1
   3f4d0:	str	r0, [r4, #28]
   3f4d4:	str	r1, [r4, #32]
   3f4d8:	blt	3f07c <__assert_fail@plt+0x2c5cc>
   3f4dc:	ldr	r0, [r4, #12]
   3f4e0:	mov	r2, #0
   3f4e4:	add	r1, r0, r5, lsl #2
   3f4e8:	ldr	r3, [r1, r2, lsl #2]
   3f4ec:	sub	r3, r3, r5
   3f4f0:	str	r3, [r0, r2, lsl #2]
   3f4f4:	add	r2, r2, #1
   3f4f8:	ldr	r3, [r4, #28]
   3f4fc:	cmp	r2, r3
   3f500:	blt	3f4e8 <__assert_fail@plt+0x2ca38>
   3f504:	b	3f07c <__assert_fail@plt+0x2c5cc>
   3f508:	mov	r0, #0
   3f50c:	strb	r0, [r4, #76]	; 0x4c
   3f510:	sub	r0, r5, r9
   3f514:	ldr	r1, [r4, #44]	; 0x2c
   3f518:	ldr	r3, [r4, #52]	; 0x34
   3f51c:	add	r1, r0, r1
   3f520:	add	r0, r0, r3
   3f524:	str	r1, [r4, #48]	; 0x30
   3f528:	sub	r1, r7, #1
   3f52c:	str	r0, [r4, #56]	; 0x38
   3f530:	add	r0, r1, #1
   3f534:	cmp	r0, #1
   3f538:	blt	3f550 <__assert_fail@plt+0x2caa0>
   3f53c:	ldr	r3, [r4, #12]
   3f540:	ldr	r3, [r3, r1, lsl #2]
   3f544:	sub	r1, r1, #1
   3f548:	cmp	r3, r5
   3f54c:	beq	3f530 <__assert_fail@plt+0x2ca80>
   3f550:	cmp	r0, r2
   3f554:	bge	3f578 <__assert_fail@plt+0x2cac8>
   3f558:	ldr	r1, [r4, #8]
   3f55c:	ldr	r3, [r1, r0, lsl #2]
   3f560:	cmn	r3, #1
   3f564:	bne	3f578 <__assert_fail@plt+0x2cac8>
   3f568:	add	r0, r0, #1
   3f56c:	cmp	r2, r0
   3f570:	bne	3f55c <__assert_fail@plt+0x2caac>
   3f574:	b	3f580 <__assert_fail@plt+0x2cad0>
   3f578:	cmp	r0, r2
   3f57c:	bne	3f590 <__assert_fail@plt+0x2cae0>
   3f580:	mov	r0, #0
   3f584:	str	r0, [r4, #28]
   3f588:	str	r0, [r4, #32]
   3f58c:	b	3f07c <__assert_fail@plt+0x2c5cc>
   3f590:	ldr	r1, [r4, #12]
   3f594:	ldr	r0, [r1, r0, lsl #2]
   3f598:	subs	r2, r0, r5
   3f59c:	str	r2, [r4, #28]
   3f5a0:	beq	3f740 <__assert_fail@plt+0x2cc90>
   3f5a4:	cmp	r2, #1
   3f5a8:	blt	3f5cc <__assert_fail@plt+0x2cb1c>
   3f5ac:	ldr	r0, [r4, #8]
   3f5b0:	mov	r1, #0
   3f5b4:	mvn	r3, #0
   3f5b8:	str	r3, [r0, r1, lsl #2]
   3f5bc:	add	r1, r1, #1
   3f5c0:	ldr	r2, [r4, #28]
   3f5c4:	cmp	r1, r2
   3f5c8:	blt	3f5b8 <__assert_fail@plt+0x2cb08>
   3f5cc:	ldr	r0, [r4, #4]
   3f5d0:	mov	r1, #255	; 0xff
   3f5d4:	bl	12834 <memset@plt>
   3f5d8:	ldr	r0, [r4, #28]
   3f5dc:	str	r0, [r4, #32]
   3f5e0:	b	3f07c <__assert_fail@plt+0x2c5cc>
   3f5e4:	mov	r0, r6
   3f5e8:	bl	12810 <iswalnum@plt>
   3f5ec:	mov	r1, #1
   3f5f0:	cmp	r6, #95	; 0x5f
   3f5f4:	beq	3f030 <__assert_fail@plt+0x2c580>
   3f5f8:	cmp	r0, #0
   3f5fc:	beq	3f014 <__assert_fail@plt+0x2c564>
   3f600:	b	3f030 <__assert_fail@plt+0x2c580>
   3f604:	sub	r0, r8, r9
   3f608:	str	r0, [r4, #28]
   3f60c:	b	3f640 <__assert_fail@plt+0x2cb90>
   3f610:	ldr	lr, [sp]
   3f614:	sub	r0, r8, r9
   3f618:	cmn	r7, #1
   3f61c:	str	r0, [r4, #28]
   3f620:	beq	3f640 <__assert_fail@plt+0x2cb90>
   3f624:	ldrb	r0, [r4, #78]	; 0x4e
   3f628:	cmp	r0, #0
   3f62c:	bne	3f84c <__assert_fail@plt+0x2cd9c>
   3f630:	mov	r1, #0
   3f634:	cmp	r7, #10
   3f638:	beq	3f778 <__assert_fail@plt+0x2ccc8>
   3f63c:	b	3f788 <__assert_fail@plt+0x2ccd8>
   3f640:	cmp	lr, #0
   3f644:	ble	3f680 <__assert_fail@plt+0x2cbd0>
   3f648:	ldr	r1, [r4, #48]	; 0x30
   3f64c:	sub	r0, lr, #1
   3f650:	cmp	r1, r0
   3f654:	beq	3f820 <__assert_fail@plt+0x2cd70>
   3f658:	ldr	r1, [r4, #80]	; 0x50
   3f65c:	cmp	r1, #2
   3f660:	blt	3f700 <__assert_fail@plt+0x2cc50>
   3f664:	ldr	r1, [r4, #8]
   3f668:	ldr	r6, [r1, r0, lsl #2]
   3f66c:	cmn	r6, #1
   3f670:	bne	3f760 <__assert_fail@plt+0x2ccb0>
   3f674:	sub	r0, r0, #1
   3f678:	cmn	r0, #1
   3f67c:	bne	3f668 <__assert_fail@plt+0x2cbb8>
   3f680:	ldr	r1, [r4, #60]	; 0x3c
   3f684:	b	3f788 <__assert_fail@plt+0x2ccd8>
   3f688:	ldr	r3, [r4, #64]	; 0x40
   3f68c:	cmp	r3, #0
   3f690:	beq	3f0f8 <__assert_fail@plt+0x2c648>
   3f694:	ldr	r1, [r4, #36]	; 0x24
   3f698:	ldr	r0, [r4, #28]
   3f69c:	cmp	r1, r2
   3f6a0:	movgt	r1, r2
   3f6a4:	cmp	r0, r1
   3f6a8:	bge	3f734 <__assert_fail@plt+0x2cc84>
   3f6ac:	ldr	r7, [r4]
   3f6b0:	add	r2, r0, r9
   3f6b4:	ldr	r6, [r4, #4]
   3f6b8:	ldrb	r2, [r7, r2]
   3f6bc:	ldrb	r2, [r3, r2]
   3f6c0:	strb	r2, [r6, r0]
   3f6c4:	add	r0, r0, #1
   3f6c8:	cmp	r0, r1
   3f6cc:	bge	3f734 <__assert_fail@plt+0x2cc84>
   3f6d0:	ldr	r7, [r4, #24]
   3f6d4:	ldm	r4, {r2, r3}
   3f6d8:	ldr	r6, [r4, #64]	; 0x40
   3f6dc:	add	r2, r2, r7
   3f6e0:	ldrb	r2, [r2, r0]
   3f6e4:	ldrb	r2, [r6, r2]
   3f6e8:	strb	r2, [r3, r0]
   3f6ec:	b	3f6c4 <__assert_fail@plt+0x2cc14>
   3f6f0:	add	r5, r5, #1
   3f6f4:	str	r5, [r4, #28]
   3f6f8:	str	r5, [r4, #32]
   3f6fc:	b	3f0f8 <__assert_fail@plt+0x2c648>
   3f700:	ldr	r1, [r4, #4]
   3f704:	ldr	r2, [r4, #68]	; 0x44
   3f708:	ldrb	r0, [r1, r0]
   3f70c:	ubfx	r1, r0, #5, #3
   3f710:	and	r3, r0, #31
   3f714:	ldr	r2, [r2, r1, lsl #2]
   3f718:	mov	r1, #1
   3f71c:	tst	r2, r1, lsl r3
   3f720:	bne	3f788 <__assert_fail@plt+0x2ccd8>
   3f724:	mov	r1, #0
   3f728:	cmp	r0, #10
   3f72c:	beq	3f778 <__assert_fail@plt+0x2ccc8>
   3f730:	b	3f788 <__assert_fail@plt+0x2ccd8>
   3f734:	str	r0, [r4, #28]
   3f738:	str	r0, [r4, #32]
   3f73c:	b	3f0f8 <__assert_fail@plt+0x2c648>
   3f740:	mov	r0, #0
   3f744:	str	r0, [r4, #32]
   3f748:	b	3f07c <__assert_fail@plt+0x2c5cc>
   3f74c:	ldrb	r0, [r4, #77]	; 0x4d
   3f750:	cmp	r0, #0
   3f754:	movwne	r0, #1
   3f758:	lsl	r1, r0, #1
   3f75c:	b	3f40c <__assert_fail@plt+0x2c95c>
   3f760:	ldrb	r0, [r4, #78]	; 0x4e
   3f764:	cmp	r0, #0
   3f768:	bne	3f8b8 <__assert_fail@plt+0x2ce08>
   3f76c:	mov	r1, #0
   3f770:	cmp	r6, #10
   3f774:	bne	3f788 <__assert_fail@plt+0x2ccd8>
   3f778:	ldrb	r0, [r4, #77]	; 0x4d
   3f77c:	cmp	r0, #0
   3f780:	movwne	r0, #1
   3f784:	lsl	r1, r0, #1
   3f788:	str	r1, [r4, #60]	; 0x3c
   3f78c:	mov	r0, #0
   3f790:	ldr	r2, [r4, #28]
   3f794:	cmp	r2, #0
   3f798:	bne	3f7d8 <__assert_fail@plt+0x2cd28>
   3f79c:	str	r0, [r4, #32]
   3f7a0:	b	3f07c <__assert_fail@plt+0x2c5cc>
   3f7a4:	mov	r2, #0
   3f7a8:	strb	r2, [r4, #76]	; 0x4c
   3f7ac:	sub	r2, r5, r9
   3f7b0:	ldr	r3, [r4, #44]	; 0x2c
   3f7b4:	ldr	r7, [r4, #52]	; 0x34
   3f7b8:	add	r3, r2, r3
   3f7bc:	add	r2, r2, r7
   3f7c0:	str	r3, [r4, #48]	; 0x30
   3f7c4:	str	r2, [r4, #56]	; 0x38
   3f7c8:	b	3f128 <__assert_fail@plt+0x2c678>
   3f7cc:	and	r0, r6, #2
   3f7d0:	eor	r1, r0, #10
   3f7d4:	b	3f46c <__assert_fail@plt+0x2c9bc>
   3f7d8:	cmp	r2, #1
   3f7dc:	blt	3f800 <__assert_fail@plt+0x2cd50>
   3f7e0:	ldr	r0, [r4, #8]
   3f7e4:	mov	r1, #0
   3f7e8:	mvn	r3, #0
   3f7ec:	str	r3, [r0, r1, lsl #2]
   3f7f0:	add	r1, r1, #1
   3f7f4:	ldr	r2, [r4, #28]
   3f7f8:	cmp	r1, r2
   3f7fc:	blt	3f7ec <__assert_fail@plt+0x2cd3c>
   3f800:	ldrb	r0, [r4, #75]	; 0x4b
   3f804:	cmp	r0, #0
   3f808:	beq	3f870 <__assert_fail@plt+0x2cdc0>
   3f80c:	ldr	r0, [r4, #4]
   3f810:	mov	r1, #255	; 0xff
   3f814:	bl	12834 <memset@plt>
   3f818:	ldr	r0, [r4, #28]
   3f81c:	b	3f79c <__assert_fail@plt+0x2ccec>
   3f820:	and	r0, r6, #2
   3f824:	eor	r1, r0, #10
   3f828:	b	3f788 <__assert_fail@plt+0x2ccd8>
   3f82c:	mov	r0, r6
   3f830:	bl	12810 <iswalnum@plt>
   3f834:	mov	r1, #1
   3f838:	cmp	r6, #95	; 0x5f
   3f83c:	beq	3f46c <__assert_fail@plt+0x2c9bc>
   3f840:	cmp	r0, #0
   3f844:	beq	3f450 <__assert_fail@plt+0x2c9a0>
   3f848:	b	3f46c <__assert_fail@plt+0x2c9bc>
   3f84c:	mov	r0, r7
   3f850:	bl	12810 <iswalnum@plt>
   3f854:	mov	r1, #1
   3f858:	cmp	r7, #95	; 0x5f
   3f85c:	beq	3f788 <__assert_fail@plt+0x2ccd8>
   3f860:	cmp	r0, #0
   3f864:	mov	r2, r7
   3f868:	beq	3f630 <__assert_fail@plt+0x2cb80>
   3f86c:	b	3f788 <__assert_fail@plt+0x2ccd8>
   3f870:	mov	r0, r2
   3f874:	str	r2, [r4, #32]
   3f878:	b	3f07c <__assert_fail@plt+0x2c5cc>
   3f87c:	cmp	r2, #1
   3f880:	blt	3f8d8 <__assert_fail@plt+0x2ce28>
   3f884:	cmp	r2, #6
   3f888:	mov	r1, r2
   3f88c:	movge	r1, #6
   3f890:	sub	ip, r1, #1
   3f894:	add	r1, sp, #14
   3f898:	ldrb	r3, [r7, ip]
   3f89c:	cmp	ip, #0
   3f8a0:	ldrb	r3, [r0, r3]
   3f8a4:	strb	r3, [r1, ip]
   3f8a8:	sub	r3, ip, #1
   3f8ac:	mov	ip, r3
   3f8b0:	bgt	3f898 <__assert_fail@plt+0x2cde8>
   3f8b4:	b	3f1a4 <__assert_fail@plt+0x2c6f4>
   3f8b8:	mov	r0, r6
   3f8bc:	bl	12810 <iswalnum@plt>
   3f8c0:	mov	r1, #1
   3f8c4:	cmp	r6, #95	; 0x5f
   3f8c8:	beq	3f788 <__assert_fail@plt+0x2ccd8>
   3f8cc:	cmp	r0, #0
   3f8d0:	beq	3f76c <__assert_fail@plt+0x2ccbc>
   3f8d4:	b	3f788 <__assert_fail@plt+0x2ccd8>
   3f8d8:	add	r1, sp, #14
   3f8dc:	b	3f1a4 <__assert_fail@plt+0x2c6f4>
   3f8e0:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   3f8e4:	add	fp, sp, #24
   3f8e8:	mov	r8, r0
   3f8ec:	ldr	r0, [r0, #124]	; 0x7c
   3f8f0:	cmp	r0, #1
   3f8f4:	blt	3f980 <__assert_fail@plt+0x2ced0>
   3f8f8:	mov	r7, #0
   3f8fc:	b	3f918 <__assert_fail@plt+0x2ce68>
   3f900:	mov	r0, r5
   3f904:	bl	30174 <__assert_fail@plt+0x1d6c4>
   3f908:	ldr	r0, [r8, #124]	; 0x7c
   3f90c:	add	r7, r7, #1
   3f910:	cmp	r7, r0
   3f914:	bge	3f980 <__assert_fail@plt+0x2ced0>
   3f918:	ldr	r0, [r8, #132]	; 0x84
   3f91c:	ldr	r5, [r0, r7, lsl #2]
   3f920:	ldr	r0, [r5, #16]
   3f924:	cmp	r0, #1
   3f928:	blt	3f958 <__assert_fail@plt+0x2cea8>
   3f92c:	mov	r4, #0
   3f930:	ldr	r0, [r5, #20]
   3f934:	ldr	r6, [r0, r4, lsl #2]
   3f938:	ldr	r0, [r6, #16]
   3f93c:	bl	30174 <__assert_fail@plt+0x1d6c4>
   3f940:	mov	r0, r6
   3f944:	bl	30174 <__assert_fail@plt+0x1d6c4>
   3f948:	ldr	r0, [r5, #16]
   3f94c:	add	r4, r4, #1
   3f950:	cmp	r4, r0
   3f954:	blt	3f930 <__assert_fail@plt+0x2ce80>
   3f958:	ldr	r0, [r5, #20]
   3f95c:	bl	30174 <__assert_fail@plt+0x1d6c4>
   3f960:	ldr	r0, [r5, #8]
   3f964:	cmp	r0, #0
   3f968:	beq	3f900 <__assert_fail@plt+0x2ce50>
   3f96c:	ldr	r0, [r0, #8]
   3f970:	bl	30174 <__assert_fail@plt+0x1d6c4>
   3f974:	ldr	r0, [r5, #8]
   3f978:	bl	30174 <__assert_fail@plt+0x1d6c4>
   3f97c:	b	3f900 <__assert_fail@plt+0x2ce50>
   3f980:	mov	r0, #0
   3f984:	str	r0, [r8, #108]	; 0x6c
   3f988:	str	r0, [r8, #124]	; 0x7c
   3f98c:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   3f990:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   3f994:	add	fp, sp, #28
   3f998:	sub	sp, sp, #4
   3f99c:	mov	sl, r0
   3f9a0:	ldr	r0, [r1, #4]
   3f9a4:	cmp	r0, #1
   3f9a8:	blt	3fa78 <__assert_fail@plt+0x2cfc8>
   3f9ac:	ldr	r7, [sl, #84]	; 0x54
   3f9b0:	mov	r8, r2
   3f9b4:	mov	r5, r1
   3f9b8:	mov	r4, #0
   3f9bc:	b	3f9cc <__assert_fail@plt+0x2cf1c>
   3f9c0:	add	r4, r4, #1
   3f9c4:	cmp	r4, r0
   3f9c8:	bge	3fa78 <__assert_fail@plt+0x2cfc8>
   3f9cc:	ldr	r1, [r5, #8]
   3f9d0:	ldr	r6, [r1, r4, lsl #2]
   3f9d4:	ldr	r1, [r7]
   3f9d8:	add	r2, r1, r6, lsl #3
   3f9dc:	ldrb	r2, [r2, #4]
   3f9e0:	cmp	r2, #8
   3f9e4:	bne	3f9c0 <__assert_fail@plt+0x2cf10>
   3f9e8:	ldr	r1, [r1, r6, lsl #3]
   3f9ec:	cmp	r1, #31
   3f9f0:	bgt	3f9c0 <__assert_fail@plt+0x2cf10>
   3f9f4:	ldr	r2, [r7, #80]	; 0x50
   3f9f8:	mov	r3, #1
   3f9fc:	tst	r2, r3, lsl r1
   3fa00:	beq	3f9c0 <__assert_fail@plt+0x2cf10>
   3fa04:	ldr	r0, [sl, #124]	; 0x7c
   3fa08:	ldr	r9, [sl, #128]	; 0x80
   3fa0c:	cmp	r0, r9
   3fa10:	beq	3fa54 <__assert_fail@plt+0x2cfa4>
   3fa14:	mov	r0, #1
   3fa18:	mov	r1, #24
   3fa1c:	bl	2fb8c <__assert_fail@plt+0x1d0dc>
   3fa20:	ldr	r1, [sl, #124]	; 0x7c
   3fa24:	ldr	r2, [sl, #132]	; 0x84
   3fa28:	str	r0, [r2, r1, lsl #2]
   3fa2c:	ldr	r0, [sl, #132]	; 0x84
   3fa30:	ldr	r0, [r0, r1, lsl #2]
   3fa34:	cmp	r0, #0
   3fa38:	beq	3fa84 <__assert_fail@plt+0x2cfd4>
   3fa3c:	add	r1, r1, #1
   3fa40:	str	r6, [r0, #4]
   3fa44:	str	r1, [sl, #124]	; 0x7c
   3fa48:	str	r8, [r0]
   3fa4c:	ldr	r0, [r5, #4]
   3fa50:	b	3f9c0 <__assert_fail@plt+0x2cf10>
   3fa54:	ldr	r0, [sl, #132]	; 0x84
   3fa58:	lsl	r1, r9, #3
   3fa5c:	bl	33500 <__assert_fail@plt+0x20a50>
   3fa60:	cmp	r0, #0
   3fa64:	beq	3fa84 <__assert_fail@plt+0x2cfd4>
   3fa68:	lsl	r1, r9, #1
   3fa6c:	str	r1, [sl, #128]	; 0x80
   3fa70:	str	r0, [sl, #132]	; 0x84
   3fa74:	b	3fa14 <__assert_fail@plt+0x2cf64>
   3fa78:	mov	r0, #0
   3fa7c:	sub	sp, fp, #28
   3fa80:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   3fa84:	mov	r0, #12
   3fa88:	sub	sp, fp, #28
   3fa8c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   3fa90:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   3fa94:	add	fp, sp, #28
   3fa98:	sub	sp, sp, #76	; 0x4c
   3fa9c:	mov	ip, r0
   3faa0:	ldr	r0, [r1, #4]
   3faa4:	cmp	r0, #1
   3faa8:	blt	403d4 <__assert_fail@plt+0x2d924>
   3faac:	ldr	r2, [ip, #84]	; 0x54
   3fab0:	ldr	r0, [ip, #40]	; 0x28
   3fab4:	mov	r3, #0
   3fab8:	str	ip, [sp, #44]	; 0x2c
   3fabc:	str	r1, [sp, #12]
   3fac0:	str	r0, [sp, #52]	; 0x34
   3fac4:	str	r2, [sp, #24]
   3fac8:	b	3fae8 <__assert_fail@plt+0x2d038>
   3facc:	ldr	r1, [sp, #12]
   3fad0:	ldr	r3, [sp, #16]
   3fad4:	ldr	r2, [sp, #24]
   3fad8:	ldr	r0, [r1, #4]
   3fadc:	add	r3, r3, #1
   3fae0:	cmp	r3, r0
   3fae4:	bge	403d4 <__assert_fail@plt+0x2d924>
   3fae8:	ldr	r0, [r1, #8]
   3faec:	str	r3, [sp, #16]
   3faf0:	ldr	r3, [r0, r3, lsl #2]
   3faf4:	ldr	r0, [r2]
   3faf8:	add	r4, r0, r3, lsl #3
   3fafc:	mov	r1, r3
   3fb00:	str	r3, [sp, #48]	; 0x30
   3fb04:	ldr	r5, [r4, #4]!
   3fb08:	uxtb	r0, r5
   3fb0c:	cmp	r0, #4
   3fb10:	bne	3facc <__assert_fail@plt+0x2d01c>
   3fb14:	movw	r0, #65280	; 0xff00
   3fb18:	movt	r0, #3
   3fb1c:	tst	r5, r0
   3fb20:	beq	3fc20 <__assert_fail@plt+0x2d170>
   3fb24:	ldr	r1, [sp, #52]	; 0x34
   3fb28:	cmn	r1, #1
   3fb2c:	ble	3fb68 <__assert_fail@plt+0x2d0b8>
   3fb30:	ldr	r0, [ip, #48]	; 0x30
   3fb34:	cmp	r0, r1
   3fb38:	beq	40394 <__assert_fail@plt+0x2d8e4>
   3fb3c:	ldr	r0, [ip, #80]	; 0x50
   3fb40:	cmp	r0, #2
   3fb44:	blt	3fb70 <__assert_fail@plt+0x2d0c0>
   3fb48:	ldr	r0, [ip, #8]
   3fb4c:	ldr	r1, [sp, #52]	; 0x34
   3fb50:	ldr	r6, [r0, r1, lsl #2]
   3fb54:	cmn	r6, #1
   3fb58:	bne	3fbac <__assert_fail@plt+0x2d0fc>
   3fb5c:	sub	r1, r1, #1
   3fb60:	cmn	r1, #1
   3fb64:	bne	3fb50 <__assert_fail@plt+0x2d0a0>
   3fb68:	ldr	r1, [ip, #60]	; 0x3c
   3fb6c:	b	3fbd4 <__assert_fail@plt+0x2d124>
   3fb70:	ldr	r0, [ip, #4]
   3fb74:	ldr	r2, [sp, #52]	; 0x34
   3fb78:	ldr	r1, [ip, #68]	; 0x44
   3fb7c:	ldrb	r0, [r0, r2]
   3fb80:	ubfx	r2, r0, #5, #3
   3fb84:	and	r7, r0, #31
   3fb88:	ldr	r3, [r1, r2, lsl #2]
   3fb8c:	mov	r1, #1
   3fb90:	mov	r2, #0
   3fb94:	tst	r3, r1, lsl r7
   3fb98:	bne	3fbec <__assert_fail@plt+0x2d13c>
   3fb9c:	mov	r1, #0
   3fba0:	cmp	r0, #10
   3fba4:	beq	3fbc4 <__assert_fail@plt+0x2d114>
   3fba8:	b	3fbd4 <__assert_fail@plt+0x2d124>
   3fbac:	ldrb	r0, [ip, #78]	; 0x4e
   3fbb0:	cmp	r0, #0
   3fbb4:	bne	403a4 <__assert_fail@plt+0x2d8f4>
   3fbb8:	mov	r1, #0
   3fbbc:	cmp	r6, #10
   3fbc0:	bne	3fbd4 <__assert_fail@plt+0x2d124>
   3fbc4:	ldrb	r0, [ip, #77]	; 0x4d
   3fbc8:	cmp	r0, #0
   3fbcc:	movwne	r0, #1
   3fbd0:	lsl	r1, r0, #1
   3fbd4:	and	r0, r1, #1
   3fbd8:	tst	r5, #1024	; 0x400
   3fbdc:	eor	r2, r0, #1
   3fbe0:	beq	3fbec <__assert_fail@plt+0x2d13c>
   3fbe4:	cmp	r0, #0
   3fbe8:	beq	3facc <__assert_fail@plt+0x2d01c>
   3fbec:	ldr	r0, [r4]
   3fbf0:	cmp	r2, #0
   3fbf4:	bne	3fc00 <__assert_fail@plt+0x2d150>
   3fbf8:	ands	r2, r0, #2048	; 0x800
   3fbfc:	bne	3facc <__assert_fail@plt+0x2d01c>
   3fc00:	tst	r1, #2
   3fc04:	bne	3fc10 <__assert_fail@plt+0x2d160>
   3fc08:	ands	r2, r0, #8192	; 0x2000
   3fc0c:	bne	3facc <__assert_fail@plt+0x2d01c>
   3fc10:	tst	r1, #8
   3fc14:	bne	3fc20 <__assert_fail@plt+0x2d170>
   3fc18:	ands	r0, r0, #32768	; 0x8000
   3fc1c:	bne	3facc <__assert_fail@plt+0x2d01c>
   3fc20:	ldr	r2, [ip, #108]	; 0x6c
   3fc24:	ldr	r0, [ip, #84]	; 0x54
   3fc28:	ldr	r9, [ip, #4]
   3fc2c:	cmp	r2, #1
   3fc30:	str	r0, [sp, #36]	; 0x24
   3fc34:	str	r2, [sp, #20]
   3fc38:	blt	3fc80 <__assert_fail@plt+0x2d1d0>
   3fc3c:	ldr	r4, [sp, #52]	; 0x34
   3fc40:	ldr	r1, [ip, #116]	; 0x74
   3fc44:	mov	r0, #0
   3fc48:	mov	r5, #1
   3fc4c:	mov	lr, r4
   3fc50:	add	r3, r2, r0
   3fc54:	add	r3, r3, r3, lsr #31
   3fc58:	asr	r7, r3, #1
   3fc5c:	add	r6, r7, r7, lsl #1
   3fc60:	add	r6, r1, r6, lsl #3
   3fc64:	ldr	r6, [r6, #4]
   3fc68:	cmp	r6, lr
   3fc6c:	addlt	r0, r5, r3, asr #1
   3fc70:	movge	r2, r7
   3fc74:	cmp	r0, r2
   3fc78:	blt	3fc50 <__assert_fail@plt+0x2d1a0>
   3fc7c:	b	3fc8c <__assert_fail@plt+0x2d1dc>
   3fc80:	ldr	r4, [sp, #52]	; 0x34
   3fc84:	mov	r0, #0
   3fc88:	mov	lr, r4
   3fc8c:	ldr	r1, [sp, #20]
   3fc90:	cmp	r0, r1
   3fc94:	bge	3fcd8 <__assert_fail@plt+0x2d228>
   3fc98:	cmn	r0, #1
   3fc9c:	beq	3fcd8 <__assert_fail@plt+0x2d228>
   3fca0:	ldr	r1, [ip, #116]	; 0x74
   3fca4:	add	r0, r0, r0, lsl #1
   3fca8:	add	r0, r1, r0, lsl #3
   3fcac:	ldr	r1, [r0, #4]
   3fcb0:	cmp	r1, lr
   3fcb4:	bne	3fcd8 <__assert_fail@plt+0x2d228>
   3fcb8:	ldr	r1, [r0]
   3fcbc:	ldr	r2, [sp, #48]	; 0x30
   3fcc0:	cmp	r1, r2
   3fcc4:	beq	400e0 <__assert_fail@plt+0x2d630>
   3fcc8:	ldrb	r1, [r0, #20]
   3fccc:	add	r0, r0, #24
   3fcd0:	cmp	r1, #0
   3fcd4:	bne	3fcb8 <__assert_fail@plt+0x2d208>
   3fcd8:	ldr	r0, [ip, #124]	; 0x7c
   3fcdc:	cmp	r0, #1
   3fce0:	ldr	r0, [sp, #20]
   3fce4:	blt	400e4 <__assert_fail@plt+0x2d634>
   3fce8:	ldr	r0, [sp, #36]	; 0x24
   3fcec:	ldr	r1, [sp, #48]	; 0x30
   3fcf0:	mov	r3, #0
   3fcf4:	ldr	r0, [r0]
   3fcf8:	ldr	r2, [r0, r1, lsl #3]
   3fcfc:	str	r2, [sp, #32]
   3fd00:	ldr	r1, [ip, #132]	; 0x84
   3fd04:	str	r3, [sp, #28]
   3fd08:	ldr	r6, [r1, r3, lsl #2]
   3fd0c:	ldr	r1, [r6, #4]
   3fd10:	ldr	r0, [r0, r1, lsl #3]
   3fd14:	cmp	r0, r2
   3fd18:	bne	400b4 <__assert_fail@plt+0x2d604>
   3fd1c:	ldr	r0, [r6, #16]
   3fd20:	ldr	r1, [r6]
   3fd24:	mov	r8, #0
   3fd28:	mov	r7, lr
   3fd2c:	str	r6, [sp, #40]	; 0x28
   3fd30:	cmp	r0, #1
   3fd34:	blt	3fe6c <__assert_fail@plt+0x2d3bc>
   3fd38:	mov	r5, r1
   3fd3c:	ldr	r1, [r6, #20]
   3fd40:	ldr	r4, [r1, r8, lsl #2]
   3fd44:	ldr	r1, [r4, #4]
   3fd48:	sub	sl, r1, r5
   3fd4c:	str	r1, [fp, #-48]	; 0xffffffd0
   3fd50:	cmp	sl, #1
   3fd54:	blt	3fd88 <__assert_fail@plt+0x2d2d8>
   3fd58:	ldr	r1, [ip, #28]
   3fd5c:	add	r3, sl, r7
   3fd60:	cmp	r3, r1
   3fd64:	bgt	3fddc <__assert_fail@plt+0x2d32c>
   3fd68:	add	r0, r9, r7
   3fd6c:	add	r1, r9, r5
   3fd70:	mov	r2, sl
   3fd74:	bl	127a4 <bcmp@plt>
   3fd78:	ldr	ip, [sp, #44]	; 0x2c
   3fd7c:	ldr	lr, [sp, #52]	; 0x34
   3fd80:	cmp	r0, #0
   3fd84:	bne	3fe64 <__assert_fail@plt+0x2d3b4>
   3fd88:	ldr	r3, [sp, #48]	; 0x30
   3fd8c:	mov	r2, r4
   3fd90:	mov	r0, ip
   3fd94:	mov	r1, r6
   3fd98:	str	lr, [sp]
   3fd9c:	mov	r4, ip
   3fda0:	bl	40aa4 <__assert_fail@plt+0x2dff4>
   3fda4:	cmp	r0, #1
   3fda8:	bhi	403e8 <__assert_fail@plt+0x2d938>
   3fdac:	ldr	r1, [fp, #-48]	; 0xffffffd0
   3fdb0:	ldr	r0, [r6, #16]
   3fdb4:	ldr	r9, [r4, #4]
   3fdb8:	mov	ip, r4
   3fdbc:	ldr	r4, [sp, #52]	; 0x34
   3fdc0:	add	r8, r8, #1
   3fdc4:	add	r7, sl, r7
   3fdc8:	cmp	r8, r0
   3fdcc:	mov	r5, r1
   3fdd0:	mov	lr, r4
   3fdd4:	blt	3fd3c <__assert_fail@plt+0x2d28c>
   3fdd8:	b	3fe6c <__assert_fail@plt+0x2d3bc>
   3fddc:	ldr	r2, [ip, #48]	; 0x30
   3fde0:	cmp	r3, r2
   3fde4:	bgt	400a8 <__assert_fail@plt+0x2d5f8>
   3fde8:	ldr	r0, [ip, #36]	; 0x24
   3fdec:	ldr	r6, [ip, #104]	; 0x68
   3fdf0:	cmp	r0, r3
   3fdf4:	cmple	r0, r2
   3fdf8:	blt	3fe08 <__assert_fail@plt+0x2d358>
   3fdfc:	cmp	r1, r3
   3fe00:	cmple	r1, r2
   3fe04:	bge	3fe28 <__assert_fail@plt+0x2d378>
   3fe08:	add	r1, r3, #1
   3fe0c:	mov	r0, ip
   3fe10:	mov	r9, r3
   3fe14:	bl	40410 <__assert_fail@plt+0x2d960>
   3fe18:	ldr	ip, [sp, #44]	; 0x2c
   3fe1c:	mov	r3, r9
   3fe20:	cmp	r0, #0
   3fe24:	bne	403e8 <__assert_fail@plt+0x2d938>
   3fe28:	cmp	r3, r6
   3fe2c:	ble	3fe58 <__assert_fail@plt+0x2d3a8>
   3fe30:	sub	r0, r3, r6
   3fe34:	mov	r1, #0
   3fe38:	lsl	r2, r0, #2
   3fe3c:	ldr	r0, [ip, #100]	; 0x64
   3fe40:	add	r0, r0, r6, lsl #2
   3fe44:	mov	r6, r3
   3fe48:	add	r0, r0, #4
   3fe4c:	bl	12834 <memset@plt>
   3fe50:	ldr	ip, [sp, #44]	; 0x2c
   3fe54:	str	r6, [ip, #104]	; 0x68
   3fe58:	ldr	r9, [ip, #4]
   3fe5c:	ldr	r6, [sp, #40]	; 0x28
   3fe60:	b	3fd68 <__assert_fail@plt+0x2d2b8>
   3fe64:	ldr	r0, [r6, #16]
   3fe68:	mov	r1, r5
   3fe6c:	cmp	r8, r0
   3fe70:	blt	400b4 <__assert_fail@plt+0x2d604>
   3fe74:	cmp	r8, #0
   3fe78:	addne	r1, r1, #1
   3fe7c:	cmp	r1, lr
   3fe80:	ble	3fe9c <__assert_fail@plt+0x2d3ec>
   3fe84:	b	400b4 <__assert_fail@plt+0x2d604>
   3fe88:	ldr	r6, [sp, #40]	; 0x28
   3fe8c:	add	r1, sl, #1
   3fe90:	cmp	sl, lr
   3fe94:	mov	r9, r8
   3fe98:	bge	400b4 <__assert_fail@plt+0x2d604>
   3fe9c:	ldr	r0, [r6]
   3fea0:	mov	sl, r1
   3fea4:	cmp	r1, r0
   3fea8:	ble	3fed4 <__assert_fail@plt+0x2d424>
   3feac:	ldr	r0, [ip, #28]
   3feb0:	cmp	r7, r0
   3feb4:	bge	40038 <__assert_fail@plt+0x2d588>
   3feb8:	add	r5, r7, #1
   3febc:	add	r1, sl, r9
   3fec0:	ldrb	r0, [r9, r7]
   3fec4:	ldrb	r1, [r1, #-1]
   3fec8:	cmp	r0, r1
   3fecc:	beq	3fed8 <__assert_fail@plt+0x2d428>
   3fed0:	b	400b4 <__assert_fail@plt+0x2d604>
   3fed4:	mov	r5, r7
   3fed8:	ldr	r0, [ip, #100]	; 0x64
   3fedc:	mov	r8, r9
   3fee0:	mov	r7, r5
   3fee4:	ldr	r2, [r0, sl, lsl #2]
   3fee8:	cmp	r2, #0
   3feec:	beq	3fe88 <__assert_fail@plt+0x2d3d8>
   3fef0:	ldr	r0, [r2, #8]
   3fef4:	cmp	r0, #1
   3fef8:	blt	3fe88 <__assert_fail@plt+0x2d3d8>
   3fefc:	ldr	r1, [sp, #36]	; 0x24
   3ff00:	ldr	r2, [r2, #12]
   3ff04:	ldr	r4, [sp, #32]
   3ff08:	ldr	r1, [r1]
   3ff0c:	b	3ff1c <__assert_fail@plt+0x2d46c>
   3ff10:	add	r2, r2, #4
   3ff14:	subs	r0, r0, #1
   3ff18:	beq	3fe88 <__assert_fail@plt+0x2d3d8>
   3ff1c:	ldr	r5, [r2]
   3ff20:	add	r3, r1, r5, lsl #3
   3ff24:	ldrb	r3, [r3, #4]
   3ff28:	cmp	r3, #9
   3ff2c:	bne	3ff10 <__assert_fail@plt+0x2d460>
   3ff30:	ldr	r3, [r1, r5, lsl #3]
   3ff34:	cmp	r3, r4
   3ff38:	bne	3ff10 <__assert_fail@plt+0x2d460>
   3ff3c:	cmn	r5, #1
   3ff40:	beq	3fe88 <__assert_fail@plt+0x2d3d8>
   3ff44:	ldr	r1, [r6, #8]
   3ff48:	mov	r4, lr
   3ff4c:	str	r7, [fp, #-48]	; 0xffffffd0
   3ff50:	cmp	r1, #0
   3ff54:	bne	3ff84 <__assert_fail@plt+0x2d4d4>
   3ff58:	ldr	r0, [r6]
   3ff5c:	mov	r9, #12
   3ff60:	sub	r0, sl, r0
   3ff64:	add	r1, r0, #1
   3ff68:	mov	r0, #12
   3ff6c:	bl	2fb8c <__assert_fail@plt+0x1d0dc>
   3ff70:	ldr	ip, [sp, #44]	; 0x2c
   3ff74:	mov	r1, r0
   3ff78:	cmp	r0, #0
   3ff7c:	str	r0, [r6, #8]
   3ff80:	beq	403d8 <__assert_fail@plt+0x2d928>
   3ff84:	ldr	r3, [r6]
   3ff88:	ldr	r2, [r6, #4]
   3ff8c:	mov	r0, #9
   3ff90:	stm	sp, {r5, sl}
   3ff94:	str	r0, [sp, #8]
   3ff98:	mov	r0, ip
   3ff9c:	bl	40c6c <__assert_fail@plt+0x2e1bc>
   3ffa0:	ldr	ip, [sp, #44]	; 0x2c
   3ffa4:	ldr	r7, [fp, #-48]	; 0xffffffd0
   3ffa8:	cmp	r0, #1
   3ffac:	mov	lr, r4
   3ffb0:	beq	3fe88 <__assert_fail@plt+0x2d3d8>
   3ffb4:	mov	r9, r0
   3ffb8:	cmp	r0, #0
   3ffbc:	bne	403d8 <__assert_fail@plt+0x2d928>
   3ffc0:	ldr	r7, [sp, #40]	; 0x28
   3ffc4:	ldr	r1, [r7, #12]
   3ffc8:	ldr	r0, [r7, #16]
   3ffcc:	cmp	r0, r1
   3ffd0:	beq	40080 <__assert_fail@plt+0x2d5d0>
   3ffd4:	mov	r0, #1
   3ffd8:	mov	r1, #20
   3ffdc:	bl	2fb8c <__assert_fail@plt+0x1d0dc>
   3ffe0:	cmp	r0, #0
   3ffe4:	beq	40400 <__assert_fail@plt+0x2d950>
   3ffe8:	mov	r2, r0
   3ffec:	ldr	r0, [r7, #16]
   3fff0:	ldr	r1, [r7, #20]
   3fff4:	ldr	r3, [sp, #48]	; 0x30
   3fff8:	str	r2, [r1, r0, lsl #2]
   3fffc:	stm	r2, {r5, sl}
   40000:	ldr	r5, [sp, #44]	; 0x2c
   40004:	add	r0, r0, #1
   40008:	mov	r1, r7
   4000c:	str	r0, [r7, #16]
   40010:	str	r4, [sp]
   40014:	mov	r0, r5
   40018:	bl	40aa4 <__assert_fail@plt+0x2dff4>
   4001c:	cmp	r0, #1
   40020:	bhi	403e8 <__assert_fail@plt+0x2d938>
   40024:	ldr	r8, [r5, #4]
   40028:	ldr	r7, [fp, #-48]	; 0xffffffd0
   4002c:	mov	ip, r5
   40030:	mov	lr, r4
   40034:	b	3fe88 <__assert_fail@plt+0x2d3d8>
   40038:	ldr	r0, [ip, #48]	; 0x30
   4003c:	cmp	r7, r0
   40040:	bge	400b4 <__assert_fail@plt+0x2d604>
   40044:	add	r5, r7, #1
   40048:	mov	r0, ip
   4004c:	mov	r8, r7
   40050:	mov	r4, ip
   40054:	mov	r1, r5
   40058:	bl	40410 <__assert_fail@plt+0x2d960>
   4005c:	cmp	r0, #0
   40060:	bne	403e8 <__assert_fail@plt+0x2d938>
   40064:	ldr	r9, [r4, #4]
   40068:	mov	ip, r4
   4006c:	ldr	r4, [sp, #52]	; 0x34
   40070:	ldr	r6, [sp, #40]	; 0x28
   40074:	mov	r7, r8
   40078:	mov	lr, r4
   4007c:	b	3febc <__assert_fail@plt+0x2d40c>
   40080:	mov	r1, #1
   40084:	orr	r6, r1, r0, lsl #1
   40088:	ldr	r0, [r7, #20]
   4008c:	lsl	r1, r6, #2
   40090:	bl	33500 <__assert_fail@plt+0x20a50>
   40094:	cmp	r0, #0
   40098:	beq	40400 <__assert_fail@plt+0x2d950>
   4009c:	str	r6, [r7, #12]
   400a0:	str	r0, [r7, #20]
   400a4:	b	3ffd4 <__assert_fail@plt+0x2d524>
   400a8:	mov	r1, r5
   400ac:	cmp	r8, r0
   400b0:	bge	3fe74 <__assert_fail@plt+0x2d3c4>
   400b4:	ldr	r3, [sp, #28]
   400b8:	ldr	r0, [ip, #124]	; 0x7c
   400bc:	add	r3, r3, #1
   400c0:	cmp	r3, r0
   400c4:	bge	400d8 <__assert_fail@plt+0x2d628>
   400c8:	ldr	r0, [sp, #36]	; 0x24
   400cc:	ldr	r2, [sp, #32]
   400d0:	ldr	r0, [r0]
   400d4:	b	3fd00 <__assert_fail@plt+0x2d250>
   400d8:	ldr	r0, [ip, #108]	; 0x6c
   400dc:	b	400e4 <__assert_fail@plt+0x2d634>
   400e0:	ldr	r0, [sp, #20]
   400e4:	ldr	r7, [sp, #20]
   400e8:	mov	r1, #0
   400ec:	str	r1, [fp, #-32]	; 0xffffffe0
   400f0:	cmp	r7, r0
   400f4:	blt	4010c <__assert_fail@plt+0x2d65c>
   400f8:	b	3facc <__assert_fail@plt+0x2d01c>
   400fc:	ldr	r0, [ip, #108]	; 0x6c
   40100:	add	r7, r7, #1
   40104:	cmp	r7, r0
   40108:	bge	3facc <__assert_fail@plt+0x2d01c>
   4010c:	ldr	r0, [ip, #116]	; 0x74
   40110:	add	r1, r7, r7, lsl #1
   40114:	ldr	r3, [sp, #48]	; 0x30
   40118:	ldr	r2, [r0, r1, lsl #3]
   4011c:	cmp	r2, r3
   40120:	bne	400fc <__assert_fail@plt+0x2d64c>
   40124:	add	r0, r0, r1, lsl #3
   40128:	ldr	r2, [sp, #52]	; 0x34
   4012c:	ldr	r1, [r0, #4]
   40130:	cmp	r1, r2
   40134:	bne	400fc <__assert_fail@plt+0x2d64c>
   40138:	str	r7, [sp, #20]
   4013c:	ldr	r4, [r0, #8]
   40140:	ldr	r7, [r0, #12]
   40144:	ldr	r0, [sp, #24]
   40148:	ldr	r8, [r0, #24]
   4014c:	cmp	r7, r4
   40150:	bne	4016c <__assert_fail@plt+0x2d6bc>
   40154:	ldr	r1, [sp, #48]	; 0x30
   40158:	ldr	r0, [r0, #20]
   4015c:	add	r1, r1, r1, lsl #1
   40160:	add	r0, r0, r1, lsl #2
   40164:	ldr	r0, [r0, #8]
   40168:	b	40178 <__assert_fail@plt+0x2d6c8>
   4016c:	ldr	r0, [r0, #12]
   40170:	ldr	r1, [sp, #48]	; 0x30
   40174:	add	r0, r0, r1, lsl #2
   40178:	ldr	r9, [r0]
   4017c:	ldr	r0, [sp, #52]	; 0x34
   40180:	add	r0, r7, r0
   40184:	sub	r5, r0, r4
   40188:	cmp	r5, #0
   4018c:	ble	401c8 <__assert_fail@plt+0x2d718>
   40190:	ldr	r1, [ip, #48]	; 0x30
   40194:	sub	r0, r5, #1
   40198:	cmp	r1, r0
   4019c:	beq	40358 <__assert_fail@plt+0x2d8a8>
   401a0:	ldr	r1, [ip, #80]	; 0x50
   401a4:	cmp	r1, #2
   401a8:	blt	401d0 <__assert_fail@plt+0x2d720>
   401ac:	ldr	r1, [ip, #8]
   401b0:	ldr	r6, [r1, r0, lsl #2]
   401b4:	cmn	r6, #1
   401b8:	bne	40200 <__assert_fail@plt+0x2d750>
   401bc:	sub	r0, r0, #1
   401c0:	cmn	r0, #1
   401c4:	bne	401b0 <__assert_fail@plt+0x2d700>
   401c8:	ldr	sl, [ip, #60]	; 0x3c
   401cc:	b	40228 <__assert_fail@plt+0x2d778>
   401d0:	ldr	r1, [ip, #4]
   401d4:	ldr	r2, [ip, #68]	; 0x44
   401d8:	mov	sl, #1
   401dc:	ldrb	r0, [r1, r0]
   401e0:	ubfx	r1, r0, #5, #3
   401e4:	ldr	r1, [r2, r1, lsl #2]
   401e8:	and	r2, r0, #31
   401ec:	tst	r1, sl, lsl r2
   401f0:	moveq	sl, #0
   401f4:	cmpeq	r0, #10
   401f8:	bne	40228 <__assert_fail@plt+0x2d778>
   401fc:	b	40218 <__assert_fail@plt+0x2d768>
   40200:	ldrb	r0, [ip, #78]	; 0x4e
   40204:	cmp	r0, #0
   40208:	bne	40368 <__assert_fail@plt+0x2d8b8>
   4020c:	mov	sl, #0
   40210:	cmp	r6, #10
   40214:	bne	40228 <__assert_fail@plt+0x2d778>
   40218:	ldrb	r0, [ip, #77]	; 0x4d
   4021c:	cmp	r0, #0
   40220:	movwne	r0, #1
   40224:	lsl	sl, r0, #1
   40228:	ldr	r0, [ip, #100]	; 0x64
   4022c:	ldr	r2, [sp, #52]	; 0x34
   40230:	add	r1, r9, r9, lsl #1
   40234:	ldr	r2, [r0, r2, lsl #2]
   40238:	ldr	r0, [r0, r5, lsl #2]
   4023c:	cmp	r2, #0
   40240:	beq	4024c <__assert_fail@plt+0x2d79c>
   40244:	ldr	r2, [r2, #8]
   40248:	b	40250 <__assert_fail@plt+0x2d7a0>
   4024c:	mov	r2, #0
   40250:	add	r8, r8, r1, lsl #2
   40254:	sub	r6, fp, #44	; 0x2c
   40258:	cmp	r0, #0
   4025c:	str	r2, [fp, #-48]	; 0xffffffd0
   40260:	beq	402b4 <__assert_fail@plt+0x2d804>
   40264:	ldr	r1, [r0, #40]	; 0x28
   40268:	mov	r0, r6
   4026c:	mov	r2, r8
   40270:	bl	4081c <__assert_fail@plt+0x2dd6c>
   40274:	cmp	r0, #0
   40278:	str	r0, [fp, #-32]	; 0xffffffe0
   4027c:	bne	403f0 <__assert_fail@plt+0x2d940>
   40280:	ldr	r1, [sp, #24]
   40284:	sub	r0, fp, #32
   40288:	mov	r2, r6
   4028c:	mov	r3, sl
   40290:	bl	3e8f8 <__assert_fail@plt+0x2be48>
   40294:	ldr	r6, [sp, #44]	; 0x2c
   40298:	ldr	r1, [r6, #100]	; 0x64
   4029c:	str	r0, [r1, r5, lsl #2]
   402a0:	ldr	r0, [fp, #-36]	; 0xffffffdc
   402a4:	bl	30174 <__assert_fail@plt+0x1d6c4>
   402a8:	ldr	r0, [r6, #100]	; 0x64
   402ac:	mov	ip, r6
   402b0:	b	402d8 <__assert_fail@plt+0x2d828>
   402b4:	ldr	r1, [sp, #24]
   402b8:	sub	r0, fp, #32
   402bc:	mov	r2, r8
   402c0:	mov	r3, sl
   402c4:	bl	3e8f8 <__assert_fail@plt+0x2be48>
   402c8:	ldr	ip, [sp, #44]	; 0x2c
   402cc:	ldr	r1, [ip, #100]	; 0x64
   402d0:	str	r0, [r1, r5, lsl #2]
   402d4:	ldr	r0, [ip, #100]	; 0x64
   402d8:	ldr	r1, [r0, r5, lsl #2]
   402dc:	cmp	r1, #0
   402e0:	bne	402f0 <__assert_fail@plt+0x2d840>
   402e4:	ldr	r9, [fp, #-32]	; 0xffffffe0
   402e8:	cmp	r9, #0
   402ec:	bne	403dc <__assert_fail@plt+0x2d92c>
   402f0:	cmp	r7, r4
   402f4:	ldr	r7, [sp, #20]
   402f8:	bne	400fc <__assert_fail@plt+0x2d64c>
   402fc:	ldr	r1, [sp, #52]	; 0x34
   40300:	ldr	r0, [r0, r1, lsl #2]
   40304:	ldr	r1, [fp, #-48]	; 0xffffffd0
   40308:	ldr	r0, [r0, #8]
   4030c:	cmp	r0, r1
   40310:	ble	400fc <__assert_fail@plt+0x2d64c>
   40314:	ldr	r2, [sp, #52]	; 0x34
   40318:	mov	r0, ip
   4031c:	mov	r1, r8
   40320:	mov	r4, ip
   40324:	bl	3f990 <__assert_fail@plt+0x2cee0>
   40328:	cmp	r0, #0
   4032c:	str	r0, [fp, #-32]	; 0xffffffe0
   40330:	bne	40408 <__assert_fail@plt+0x2d958>
   40334:	mov	r0, r4
   40338:	mov	r1, r8
   4033c:	bl	3fa90 <__assert_fail@plt+0x2cfe0>
   40340:	ldr	r7, [sp, #20]
   40344:	cmp	r0, #0
   40348:	mov	ip, r4
   4034c:	str	r0, [fp, #-32]	; 0xffffffe0
   40350:	beq	400fc <__assert_fail@plt+0x2d64c>
   40354:	b	40408 <__assert_fail@plt+0x2d958>
   40358:	ldr	r0, [ip, #88]	; 0x58
   4035c:	and	r0, r0, #2
   40360:	eor	sl, r0, #10
   40364:	b	40228 <__assert_fail@plt+0x2d778>
   40368:	mov	r0, r6
   4036c:	bl	12810 <iswalnum@plt>
   40370:	mov	sl, #1
   40374:	cmp	r6, #95	; 0x5f
   40378:	beq	4038c <__assert_fail@plt+0x2d8dc>
   4037c:	ldr	ip, [sp, #44]	; 0x2c
   40380:	cmp	r0, #0
   40384:	beq	4020c <__assert_fail@plt+0x2d75c>
   40388:	b	40228 <__assert_fail@plt+0x2d778>
   4038c:	ldr	ip, [sp, #44]	; 0x2c
   40390:	b	40228 <__assert_fail@plt+0x2d778>
   40394:	ldr	r0, [ip, #88]	; 0x58
   40398:	and	r0, r0, #2
   4039c:	eor	r1, r0, #10
   403a0:	b	3fbd4 <__assert_fail@plt+0x2d124>
   403a4:	mov	r0, r6
   403a8:	bl	12810 <iswalnum@plt>
   403ac:	mov	r1, #1
   403b0:	mov	r2, #0
   403b4:	cmp	r6, #95	; 0x5f
   403b8:	beq	403cc <__assert_fail@plt+0x2d91c>
   403bc:	ldr	ip, [sp, #44]	; 0x2c
   403c0:	cmp	r0, #0
   403c4:	beq	3fbb8 <__assert_fail@plt+0x2d108>
   403c8:	b	3fbec <__assert_fail@plt+0x2d13c>
   403cc:	ldr	ip, [sp, #44]	; 0x2c
   403d0:	b	3fbec <__assert_fail@plt+0x2d13c>
   403d4:	mov	r9, #0
   403d8:	str	r9, [fp, #-32]	; 0xffffffe0
   403dc:	mov	r0, r9
   403e0:	sub	sp, fp, #28
   403e4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   403e8:	mov	r9, r0
   403ec:	b	403d8 <__assert_fail@plt+0x2d928>
   403f0:	mov	r9, r0
   403f4:	ldr	r0, [fp, #-36]	; 0xffffffdc
   403f8:	bl	30174 <__assert_fail@plt+0x1d6c4>
   403fc:	b	403dc <__assert_fail@plt+0x2d92c>
   40400:	mov	r9, #12
   40404:	b	403d8 <__assert_fail@plt+0x2d928>
   40408:	mov	r9, r0
   4040c:	b	403dc <__assert_fail@plt+0x2d92c>
   40410:	push	{r4, r5, r6, r7, fp, lr}
   40414:	add	fp, sp, #16
   40418:	mov	r4, r0
   4041c:	ldr	r0, [r0, #36]	; 0x24
   40420:	mov	r5, #12
   40424:	cmn	r0, #-536870910	; 0xe0000002
   40428:	bhi	40604 <__assert_fail@plt+0x2db54>
   4042c:	ldr	r6, [r4, #48]	; 0x30
   40430:	ldr	r2, [r4, #80]	; 0x50
   40434:	cmp	r6, r0, lsl #1
   40438:	lslge	r6, r0, #1
   4043c:	cmp	r6, r1
   40440:	movle	r6, r1
   40444:	cmp	r2, #2
   40448:	blt	40490 <__assert_fail@plt+0x2d9e0>
   4044c:	cmn	r6, #-1073741823	; 0xc0000001
   40450:	bhi	40604 <__assert_fail@plt+0x2db54>
   40454:	ldr	r0, [r4, #8]
   40458:	lsl	r7, r6, #2
   4045c:	mov	r1, r7
   40460:	bl	33500 <__assert_fail@plt+0x20a50>
   40464:	cmp	r0, #0
   40468:	beq	40604 <__assert_fail@plt+0x2db54>
   4046c:	str	r0, [r4, #8]
   40470:	ldr	r0, [r4, #12]
   40474:	cmp	r0, #0
   40478:	beq	40490 <__assert_fail@plt+0x2d9e0>
   4047c:	mov	r1, r7
   40480:	bl	33500 <__assert_fail@plt+0x20a50>
   40484:	cmp	r0, #0
   40488:	beq	40604 <__assert_fail@plt+0x2db54>
   4048c:	str	r0, [r4, #12]
   40490:	ldrb	r0, [r4, #75]	; 0x4b
   40494:	cmp	r0, #0
   40498:	beq	404b4 <__assert_fail@plt+0x2da04>
   4049c:	ldr	r0, [r4, #4]
   404a0:	mov	r1, r6
   404a4:	bl	33500 <__assert_fail@plt+0x20a50>
   404a8:	cmp	r0, #0
   404ac:	beq	40604 <__assert_fail@plt+0x2db54>
   404b0:	str	r0, [r4, #4]
   404b4:	str	r6, [r4, #36]	; 0x24
   404b8:	ldr	r0, [r4, #100]	; 0x64
   404bc:	cmp	r0, #0
   404c0:	beq	404dc <__assert_fail@plt+0x2da2c>
   404c4:	mov	r1, #4
   404c8:	add	r1, r1, r6, lsl #2
   404cc:	bl	33500 <__assert_fail@plt+0x20a50>
   404d0:	cmp	r0, #0
   404d4:	beq	40604 <__assert_fail@plt+0x2db54>
   404d8:	str	r0, [r4, #100]	; 0x64
   404dc:	ldrb	r1, [r4, #72]	; 0x48
   404e0:	ldr	r0, [r4, #80]	; 0x50
   404e4:	cmp	r1, #0
   404e8:	beq	40508 <__assert_fail@plt+0x2da58>
   404ec:	cmp	r0, #2
   404f0:	blt	4051c <__assert_fail@plt+0x2da6c>
   404f4:	mov	r0, r4
   404f8:	bl	389a0 <__assert_fail@plt+0x25ef0>
   404fc:	cmp	r0, #0
   40500:	beq	40600 <__assert_fail@plt+0x2db50>
   40504:	pop	{r4, r5, r6, r7, fp, pc}
   40508:	cmp	r0, #2
   4050c:	blt	4058c <__assert_fail@plt+0x2dadc>
   40510:	mov	r0, r4
   40514:	bl	392a0 <__assert_fail@plt+0x267f0>
   40518:	b	40600 <__assert_fail@plt+0x2db50>
   4051c:	ldr	r6, [r4, #36]	; 0x24
   40520:	ldr	r0, [r4, #48]	; 0x30
   40524:	ldr	r5, [r4, #28]
   40528:	cmp	r6, r0
   4052c:	movgt	r6, r0
   40530:	cmp	r5, r6
   40534:	bge	40580 <__assert_fail@plt+0x2dad0>
   40538:	bl	12750 <__ctype_toupper_loc@plt>
   4053c:	ldr	r1, [r4]
   40540:	ldr	r3, [r4, #24]
   40544:	ldr	r2, [r4, #64]	; 0x40
   40548:	add	r1, r1, r3
   4054c:	cmp	r2, #0
   40550:	ldrb	r1, [r1, r5]
   40554:	bne	40578 <__assert_fail@plt+0x2dac8>
   40558:	ldr	r2, [r0]
   4055c:	ldr	r1, [r2, r1, lsl #2]
   40560:	ldr	r2, [r4, #4]
   40564:	strb	r1, [r2, r5]
   40568:	add	r5, r5, #1
   4056c:	cmp	r5, r6
   40570:	blt	4053c <__assert_fail@plt+0x2da8c>
   40574:	b	40580 <__assert_fail@plt+0x2dad0>
   40578:	ldrb	r1, [r2, r1]
   4057c:	b	40558 <__assert_fail@plt+0x2daa8>
   40580:	str	r5, [r4, #28]
   40584:	str	r5, [r4, #32]
   40588:	b	40600 <__assert_fail@plt+0x2db50>
   4058c:	ldr	r2, [r4, #64]	; 0x40
   40590:	cmp	r2, #0
   40594:	beq	40600 <__assert_fail@plt+0x2db50>
   40598:	ldr	r1, [r4, #36]	; 0x24
   4059c:	ldr	r3, [r4, #48]	; 0x30
   405a0:	ldr	r0, [r4, #28]
   405a4:	cmp	r1, r3
   405a8:	movgt	r1, r3
   405ac:	cmp	r0, r1
   405b0:	bge	405f8 <__assert_fail@plt+0x2db48>
   405b4:	ldr	r6, [r4, #24]
   405b8:	ldm	r4, {r3, r7}
   405bc:	add	r6, r6, r0
   405c0:	ldrb	r3, [r3, r6]
   405c4:	ldrb	r2, [r2, r3]
   405c8:	strb	r2, [r7, r0]
   405cc:	add	r0, r0, #1
   405d0:	cmp	r0, r1
   405d4:	bge	405f8 <__assert_fail@plt+0x2db48>
   405d8:	ldr	r7, [r4, #24]
   405dc:	ldm	r4, {r2, r3}
   405e0:	ldr	r6, [r4, #64]	; 0x40
   405e4:	add	r2, r2, r7
   405e8:	ldrb	r2, [r2, r0]
   405ec:	ldrb	r2, [r6, r2]
   405f0:	strb	r2, [r3, r0]
   405f4:	b	405cc <__assert_fail@plt+0x2db1c>
   405f8:	str	r0, [r4, #28]
   405fc:	str	r0, [r4, #32]
   40600:	mov	r5, #0
   40604:	mov	r0, r5
   40608:	pop	{r4, r5, r6, r7, fp, pc}
   4060c:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   40610:	add	fp, sp, #24
   40614:	sub	sp, sp, #16
   40618:	mov	r9, r0
   4061c:	mov	r4, r1
   40620:	ldr	r5, [r1, #40]	; 0x28
   40624:	ldr	r7, [r1, #84]	; 0x54
   40628:	ldr	r0, [r1, #100]	; 0x64
   4062c:	ldr	r1, [r1, #104]	; 0x68
   40630:	mov	r6, r2
   40634:	cmp	r5, r1
   40638:	ble	40648 <__assert_fail@plt+0x2db98>
   4063c:	str	r6, [r0, r5, lsl #2]
   40640:	str	r5, [r4, #104]	; 0x68
   40644:	b	40778 <__assert_fail@plt+0x2dcc8>
   40648:	ldr	r1, [r0, r5, lsl #2]
   4064c:	cmp	r1, #0
   40650:	beq	4068c <__assert_fail@plt+0x2dbdc>
   40654:	ldr	r2, [r1, #40]	; 0x28
   40658:	cmp	r6, #0
   4065c:	beq	40694 <__assert_fail@plt+0x2dbe4>
   40660:	ldr	r8, [r6, #40]	; 0x28
   40664:	mov	r0, sp
   40668:	mov	r1, r8
   4066c:	bl	4081c <__assert_fail@plt+0x2dd6c>
   40670:	cmp	r0, #0
   40674:	str	r0, [r9]
   40678:	bne	407e4 <__assert_fail@plt+0x2dd34>
   4067c:	ldr	r0, [r4, #40]	; 0x28
   40680:	cmp	r0, #0
   40684:	bgt	406b4 <__assert_fail@plt+0x2dc04>
   40688:	b	406ec <__assert_fail@plt+0x2dc3c>
   4068c:	str	r6, [r0, r5, lsl #2]
   40690:	b	40778 <__assert_fail@plt+0x2dcc8>
   40694:	vldr	d16, [r2]
   40698:	ldr	r0, [r2, #8]
   4069c:	mov	r8, #0
   406a0:	str	r0, [sp, #8]
   406a4:	mov	r0, r5
   406a8:	vstr	d16, [sp]
   406ac:	cmp	r0, #0
   406b0:	ble	406ec <__assert_fail@plt+0x2dc3c>
   406b4:	ldr	r1, [r4, #48]	; 0x30
   406b8:	sub	r0, r0, #1
   406bc:	cmp	r1, r0
   406c0:	beq	407ec <__assert_fail@plt+0x2dd3c>
   406c4:	ldr	r1, [r4, #80]	; 0x50
   406c8:	cmp	r1, #2
   406cc:	blt	406f4 <__assert_fail@plt+0x2dc44>
   406d0:	ldr	r1, [r4, #8]
   406d4:	ldr	r6, [r1, r0, lsl #2]
   406d8:	cmn	r6, #1
   406dc:	bne	40724 <__assert_fail@plt+0x2dc74>
   406e0:	sub	r0, r0, #1
   406e4:	cmn	r0, #1
   406e8:	bne	406d4 <__assert_fail@plt+0x2dc24>
   406ec:	ldr	r3, [r4, #60]	; 0x3c
   406f0:	b	4074c <__assert_fail@plt+0x2dc9c>
   406f4:	ldr	r1, [r4, #4]
   406f8:	ldr	r2, [r4, #68]	; 0x44
   406fc:	mov	r3, #1
   40700:	ldrb	r0, [r1, r0]
   40704:	ubfx	r1, r0, #5, #3
   40708:	ldr	r1, [r2, r1, lsl #2]
   4070c:	and	r2, r0, #31
   40710:	tst	r1, r3, lsl r2
   40714:	moveq	r3, #0
   40718:	cmpeq	r0, #10
   4071c:	bne	4074c <__assert_fail@plt+0x2dc9c>
   40720:	b	4073c <__assert_fail@plt+0x2dc8c>
   40724:	ldrb	r0, [r4, #78]	; 0x4e
   40728:	cmp	r0, #0
   4072c:	bne	407fc <__assert_fail@plt+0x2dd4c>
   40730:	mov	r3, #0
   40734:	cmp	r6, #10
   40738:	bne	4074c <__assert_fail@plt+0x2dc9c>
   4073c:	ldrb	r0, [r4, #77]	; 0x4d
   40740:	cmp	r0, #0
   40744:	movwne	r0, #1
   40748:	lsl	r3, r0, #1
   4074c:	mov	r2, sp
   40750:	mov	r0, r9
   40754:	mov	r1, r7
   40758:	bl	3e8f8 <__assert_fail@plt+0x2be48>
   4075c:	mov	r6, r0
   40760:	ldr	r0, [r4, #100]	; 0x64
   40764:	cmp	r8, #0
   40768:	str	r6, [r0, r5, lsl #2]
   4076c:	beq	40778 <__assert_fail@plt+0x2dcc8>
   40770:	ldr	r0, [sp, #8]
   40774:	bl	30174 <__assert_fail@plt+0x1d6c4>
   40778:	cmp	r6, #0
   4077c:	ldrne	r0, [r7, #76]	; 0x4c
   40780:	cmpne	r0, #0
   40784:	bne	40794 <__assert_fail@plt+0x2dce4>
   40788:	mov	r0, r6
   4078c:	sub	sp, fp, #24
   40790:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   40794:	add	r7, r6, #4
   40798:	mov	r0, r4
   4079c:	mov	r2, r5
   407a0:	mov	r1, r7
   407a4:	bl	3f990 <__assert_fail@plt+0x2cee0>
   407a8:	cmp	r0, #0
   407ac:	str	r0, [r9]
   407b0:	bne	407e4 <__assert_fail@plt+0x2dd34>
   407b4:	ldrb	r0, [r6, #52]	; 0x34
   407b8:	tst	r0, #64	; 0x40
   407bc:	beq	40788 <__assert_fail@plt+0x2dcd8>
   407c0:	mov	r0, r4
   407c4:	mov	r1, r7
   407c8:	bl	3fa90 <__assert_fail@plt+0x2cfe0>
   407cc:	str	r0, [r9]
   407d0:	cmp	r0, #0
   407d4:	mov	r6, #0
   407d8:	ldreq	r0, [r4, #100]	; 0x64
   407dc:	ldreq	r6, [r0, r5, lsl #2]
   407e0:	b	40788 <__assert_fail@plt+0x2dcd8>
   407e4:	mov	r6, #0
   407e8:	b	40788 <__assert_fail@plt+0x2dcd8>
   407ec:	ldr	r0, [r4, #88]	; 0x58
   407f0:	and	r0, r0, #2
   407f4:	eor	r3, r0, #10
   407f8:	b	4074c <__assert_fail@plt+0x2dc9c>
   407fc:	mov	r0, r6
   40800:	bl	12810 <iswalnum@plt>
   40804:	mov	r3, #1
   40808:	cmp	r6, #95	; 0x5f
   4080c:	beq	4074c <__assert_fail@plt+0x2dc9c>
   40810:	cmp	r0, #0
   40814:	beq	40730 <__assert_fail@plt+0x2dc80>
   40818:	b	4074c <__assert_fail@plt+0x2dc9c>
   4081c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   40820:	add	fp, sp, #28
   40824:	sub	sp, sp, #20
   40828:	mov	sl, r2
   4082c:	cmp	r1, #0
   40830:	str	r0, [sp, #16]
   40834:	beq	409a8 <__assert_fail@plt+0x2def8>
   40838:	ldr	r0, [r1, #4]
   4083c:	mov	r8, r1
   40840:	cmp	sl, #0
   40844:	beq	40964 <__assert_fail@plt+0x2deb4>
   40848:	cmp	r0, #1
   4084c:	blt	40964 <__assert_fail@plt+0x2deb4>
   40850:	ldr	r1, [sl, #4]
   40854:	cmp	r1, #1
   40858:	blt	40964 <__assert_fail@plt+0x2deb4>
   4085c:	ldr	r4, [sp, #16]
   40860:	add	r0, r1, r0
   40864:	str	r0, [r4]
   40868:	lsl	r0, r0, #2
   4086c:	bl	327ac <__assert_fail@plt+0x1fcfc>
   40870:	cmp	r0, #0
   40874:	str	r0, [r4, #8]
   40878:	beq	40a98 <__assert_fail@plt+0x2dfe8>
   4087c:	ldr	r9, [sl, #4]
   40880:	ldr	lr, [r8, #4]
   40884:	mov	r7, #0
   40888:	mov	r1, #0
   4088c:	cmp	r9, #0
   40890:	movwgt	r1, #1
   40894:	cmp	lr, #1
   40898:	blt	40a1c <__assert_fail@plt+0x2df6c>
   4089c:	mov	r2, #0
   408a0:	mov	ip, #0
   408a4:	str	r2, [sp, #8]
   408a8:	mov	r2, #0
   408ac:	str	r2, [sp, #12]
   408b0:	mov	r2, #0
   408b4:	ldr	r4, [sp, #12]
   408b8:	mov	r7, ip
   408bc:	tst	r1, #1
   408c0:	beq	40a4c <__assert_fail@plt+0x2df9c>
   408c4:	ldr	r1, [sl, #8]
   408c8:	ldr	r5, [r1, r7, lsl #2]
   408cc:	ldr	r1, [r8, #8]
   408d0:	ldr	r3, [r1, r2, lsl #2]
   408d4:	cmp	r3, r5
   408d8:	ble	40900 <__assert_fail@plt+0x2de50>
   408dc:	add	r7, r7, #1
   408e0:	str	r5, [r0, r4, lsl #2]
   408e4:	mov	r1, #0
   408e8:	add	r4, r4, #1
   408ec:	cmp	r9, r7
   408f0:	movwgt	r1, #1
   408f4:	cmp	lr, r2
   408f8:	bgt	408bc <__assert_fail@plt+0x2de0c>
   408fc:	b	40a20 <__assert_fail@plt+0x2df70>
   40900:	str	r3, [r0, r4, lsl #2]
   40904:	ldr	r6, [sp, #8]
   40908:	add	r1, r7, #1
   4090c:	mov	ip, r7
   40910:	add	r2, r2, #1
   40914:	ldr	r9, [sl, #4]
   40918:	ldr	lr, [r8, #4]
   4091c:	moveq	ip, r1
   40920:	str	r1, [sp, #4]
   40924:	mov	r1, #0
   40928:	sub	r6, r6, #1
   4092c:	cmp	r9, ip
   40930:	str	r6, [sp, #8]
   40934:	add	r6, r4, #1
   40938:	movwgt	r1, #1
   4093c:	cmp	lr, r2
   40940:	str	r6, [sp, #12]
   40944:	bgt	408b4 <__assert_fail@plt+0x2de04>
   40948:	ldr	r2, [sp, #4]
   4094c:	cmp	r3, r5
   40950:	add	r4, r4, #1
   40954:	moveq	r7, r2
   40958:	cmp	r1, #0
   4095c:	bne	40a28 <__assert_fail@plt+0x2df78>
   40960:	b	40a74 <__assert_fail@plt+0x2dfc4>
   40964:	cmp	r0, #1
   40968:	blt	409a8 <__assert_fail@plt+0x2def8>
   4096c:	ldr	r1, [sp, #16]
   40970:	str	r0, [r1, #4]
   40974:	ldr	r1, [r8, #4]
   40978:	cmp	r1, #1
   4097c:	blt	40a00 <__assert_fail@plt+0x2df50>
   40980:	ldr	r4, [sp, #16]
   40984:	str	r0, [r4]
   40988:	lsl	r0, r0, #2
   4098c:	bl	327ac <__assert_fail@plt+0x1fcfc>
   40990:	cmp	r0, #0
   40994:	str	r0, [r4, #8]
   40998:	beq	40a88 <__assert_fail@plt+0x2dfd8>
   4099c:	ldr	r2, [r8, #4]
   409a0:	ldr	r1, [r8, #8]
   409a4:	b	409f4 <__assert_fail@plt+0x2df44>
   409a8:	cmp	sl, #0
   409ac:	beq	40a00 <__assert_fail@plt+0x2df50>
   409b0:	ldr	r0, [sl, #4]
   409b4:	cmp	r0, #1
   409b8:	blt	40a00 <__assert_fail@plt+0x2df50>
   409bc:	ldr	r1, [sp, #16]
   409c0:	str	r0, [r1, #4]
   409c4:	ldr	r1, [sl, #4]
   409c8:	cmp	r1, #1
   409cc:	blt	40a00 <__assert_fail@plt+0x2df50>
   409d0:	ldr	r4, [sp, #16]
   409d4:	str	r0, [r4]
   409d8:	lsl	r0, r0, #2
   409dc:	bl	327ac <__assert_fail@plt+0x1fcfc>
   409e0:	cmp	r0, #0
   409e4:	str	r0, [r4, #8]
   409e8:	beq	40a88 <__assert_fail@plt+0x2dfd8>
   409ec:	ldr	r2, [sl, #4]
   409f0:	ldr	r1, [sl, #8]
   409f4:	lsl	r2, r2, #2
   409f8:	bl	124e0 <memcpy@plt>
   409fc:	b	40a7c <__assert_fail@plt+0x2dfcc>
   40a00:	ldr	r1, [sp, #16]
   40a04:	mov	r0, #0
   40a08:	str	r0, [r1]
   40a0c:	str	r0, [r1, #4]
   40a10:	str	r0, [r1, #8]
   40a14:	sub	sp, fp, #28
   40a18:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   40a1c:	mov	r4, #0
   40a20:	cmp	r1, #0
   40a24:	beq	40a74 <__assert_fail@plt+0x2dfc4>
   40a28:	ldr	r1, [sl, #8]
   40a2c:	sub	r2, r9, r7
   40a30:	add	r0, r0, r4, lsl #2
   40a34:	lsl	r2, r2, #2
   40a38:	add	r1, r1, r7, lsl #2
   40a3c:	bl	124e0 <memcpy@plt>
   40a40:	sub	r0, r4, r7
   40a44:	add	r4, r0, r9
   40a48:	b	40a74 <__assert_fail@plt+0x2dfc4>
   40a4c:	ldr	r1, [r8, #8]
   40a50:	add	r0, r0, r4, lsl #2
   40a54:	add	r1, r1, r2, lsl #2
   40a58:	sub	r2, lr, r2
   40a5c:	lsl	r2, r2, #2
   40a60:	bl	124e0 <memcpy@plt>
   40a64:	ldr	r0, [r8, #4]
   40a68:	ldr	r1, [sp, #8]
   40a6c:	add	r0, r0, r1
   40a70:	add	r4, r0, r4
   40a74:	ldr	r0, [sp, #16]
   40a78:	str	r4, [r0, #4]
   40a7c:	mov	r0, #0
   40a80:	sub	sp, fp, #28
   40a84:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   40a88:	ldr	r1, [sp, #16]
   40a8c:	mov	r0, #0
   40a90:	str	r0, [r1]
   40a94:	str	r0, [r1, #4]
   40a98:	mov	r0, #12
   40a9c:	sub	sp, fp, #28
   40aa0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   40aa4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   40aa8:	add	fp, sp, #28
   40aac:	sub	sp, sp, #12
   40ab0:	mov	r6, r2
   40ab4:	mov	r7, r3
   40ab8:	ldr	r2, [r2]
   40abc:	mov	r4, r0
   40ac0:	mov	r0, #8
   40ac4:	mov	r8, r1
   40ac8:	ldr	r9, [fp, #8]
   40acc:	ldr	r3, [r6, #4]
   40ad0:	str	r0, [sp, #8]
   40ad4:	add	r1, r6, #8
   40ad8:	mov	r0, r4
   40adc:	stm	sp, {r7, r9}
   40ae0:	bl	40c6c <__assert_fail@plt+0x2e1bc>
   40ae4:	mov	r5, r0
   40ae8:	cmp	r0, #0
   40aec:	beq	40afc <__assert_fail@plt+0x2e04c>
   40af0:	mov	r0, r5
   40af4:	sub	sp, fp, #28
   40af8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   40afc:	ldr	r0, [r4, #108]	; 0x6c
   40b00:	ldr	r1, [r4, #112]	; 0x70
   40b04:	ldr	sl, [r6, #4]
   40b08:	ldr	r5, [r8]
   40b0c:	cmp	r0, r1
   40b10:	blt	40b60 <__assert_fail@plt+0x2e0b0>
   40b14:	ldr	r0, [r4, #116]	; 0x74
   40b18:	add	r1, r1, r1, lsl #1
   40b1c:	lsl	r1, r1, #4
   40b20:	bl	33500 <__assert_fail@plt+0x20a50>
   40b24:	cmp	r0, #0
   40b28:	beq	40c5c <__assert_fail@plt+0x2e1ac>
   40b2c:	str	r0, [r4, #116]	; 0x74
   40b30:	ldr	r1, [r4, #108]	; 0x6c
   40b34:	ldr	r2, [r4, #112]	; 0x70
   40b38:	add	r1, r1, r1, lsl #1
   40b3c:	add	r0, r0, r1, lsl #3
   40b40:	add	r1, r2, r2, lsl #1
   40b44:	lsl	r2, r1, #3
   40b48:	mov	r1, #0
   40b4c:	bl	12834 <memset@plt>
   40b50:	ldr	r1, [r4, #112]	; 0x70
   40b54:	ldr	r0, [r4, #108]	; 0x6c
   40b58:	lsl	r1, r1, #1
   40b5c:	str	r1, [r4, #112]	; 0x70
   40b60:	ldr	r1, [r4, #116]	; 0x74
   40b64:	cmp	r0, #1
   40b68:	blt	40b88 <__assert_fail@plt+0x2e0d8>
   40b6c:	sub	r2, r0, #1
   40b70:	add	r2, r2, r2, lsl #1
   40b74:	add	r2, r1, r2, lsl #3
   40b78:	ldr	r3, [r2, #4]
   40b7c:	cmp	r3, r9
   40b80:	moveq	r3, #1
   40b84:	strbeq	r3, [r2, #20]
   40b88:	add	r2, r0, r0, lsl #1
   40b8c:	cmp	sl, r5
   40b90:	mov	r3, #0
   40b94:	mov	ip, #0
   40b98:	add	r0, r0, #1
   40b9c:	mvneq	r3, #0
   40ba0:	str	r7, [r1, r2, lsl #3]!
   40ba4:	str	r9, [r1, #4]
   40ba8:	str	r5, [r1, #8]
   40bac:	str	sl, [r1, #12]
   40bb0:	str	r3, [r1, #16]
   40bb4:	str	r0, [r4, #108]	; 0x6c
   40bb8:	strb	ip, [r1, #20]
   40bbc:	sub	r0, sl, r5
   40bc0:	ldr	r1, [r4, #120]	; 0x78
   40bc4:	cmp	r1, r0
   40bc8:	strlt	r0, [r4, #120]	; 0x78
   40bcc:	ldr	r0, [r6, #4]
   40bd0:	ldr	r1, [r8]
   40bd4:	ldr	r7, [r4, #104]	; 0x68
   40bd8:	add	r0, r0, r9
   40bdc:	sub	r6, r0, r1
   40be0:	ldr	r0, [r4, #36]	; 0x24
   40be4:	cmp	r0, r6
   40be8:	bgt	40bf8 <__assert_fail@plt+0x2e148>
   40bec:	ldr	r1, [r4, #48]	; 0x30
   40bf0:	cmp	r0, r1
   40bf4:	blt	40c10 <__assert_fail@plt+0x2e160>
   40bf8:	ldr	r0, [r4, #28]
   40bfc:	cmp	r0, r6
   40c00:	bgt	40c28 <__assert_fail@plt+0x2e178>
   40c04:	ldr	r1, [r4, #48]	; 0x30
   40c08:	cmp	r0, r1
   40c0c:	bge	40c28 <__assert_fail@plt+0x2e178>
   40c10:	add	r1, r6, #1
   40c14:	mov	r0, r4
   40c18:	bl	40410 <__assert_fail@plt+0x2d960>
   40c1c:	mov	r5, r0
   40c20:	cmp	r0, #0
   40c24:	bne	40af0 <__assert_fail@plt+0x2e040>
   40c28:	mov	r5, #0
   40c2c:	cmp	r6, r7
   40c30:	ble	40af0 <__assert_fail@plt+0x2e040>
   40c34:	sub	r0, r6, r7
   40c38:	mov	r1, #0
   40c3c:	mov	r5, #0
   40c40:	lsl	r2, r0, #2
   40c44:	ldr	r0, [r4, #100]	; 0x64
   40c48:	add	r0, r0, r7, lsl #2
   40c4c:	add	r0, r0, #4
   40c50:	bl	12834 <memset@plt>
   40c54:	str	r6, [r4, #104]	; 0x68
   40c58:	b	40af0 <__assert_fail@plt+0x2e040>
   40c5c:	ldr	r0, [r4, #116]	; 0x74
   40c60:	bl	30174 <__assert_fail@plt+0x1d6c4>
   40c64:	mov	r5, #12
   40c68:	b	40af0 <__assert_fail@plt+0x2e040>
   40c6c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   40c70:	add	fp, sp, #28
   40c74:	sub	sp, sp, #84	; 0x54
   40c78:	ldr	r7, [r0, #84]	; 0x54
   40c7c:	mov	ip, r1
   40c80:	mov	r1, #0
   40c84:	mov	lr, r2
   40c88:	mov	r9, r3
   40c8c:	str	r0, [sp, #44]	; 0x2c
   40c90:	str	r1, [fp, #-52]	; 0xffffffcc
   40c94:	ldr	r4, [ip, #4]
   40c98:	ldr	r1, [r7]
   40c9c:	str	r7, [sp, #24]
   40ca0:	ldr	sl, [r1, r2, lsl #3]
   40ca4:	ldr	r1, [r0, #120]	; 0x78
   40ca8:	ldr	r2, [fp, #12]
   40cac:	add	r2, r1, r2
   40cb0:	cmp	r4, r2
   40cb4:	str	sl, [sp, #20]
   40cb8:	ble	415c8 <__assert_fail@plt+0x2eb18>
   40cbc:	ldr	r2, [r0, #100]	; 0x64
   40cc0:	ldr	r5, [ip]
   40cc4:	ldr	r4, [r0, #40]	; 0x28
   40cc8:	ldr	r1, [r0, #88]	; 0x58
   40ccc:	str	r2, [sp, #8]
   40cd0:	ldr	r2, [ip, #8]
   40cd4:	cmp	r5, #0
   40cd8:	str	r4, [sp, #12]
   40cdc:	moveq	r5, r9
   40ce0:	cmp	r5, #0
   40ce4:	str	r2, [r0, #100]	; 0x64
   40ce8:	str	r5, [r0, #40]	; 0x28
   40cec:	ble	41638 <__assert_fail@plt+0x2eb88>
   40cf0:	ldr	r2, [r0, #48]	; 0x30
   40cf4:	sub	r3, r5, #1
   40cf8:	cmp	r2, r3
   40cfc:	beq	41640 <__assert_fail@plt+0x2eb90>
   40d00:	ldr	r1, [r0, #80]	; 0x50
   40d04:	cmp	r1, #2
   40d08:	blt	40d34 <__assert_fail@plt+0x2e284>
   40d0c:	ldr	r1, [r0, #8]
   40d10:	ldr	r6, [r1, r3, lsl #2]
   40d14:	cmn	r6, #1
   40d18:	bne	40d64 <__assert_fail@plt+0x2e2b4>
   40d1c:	sub	r3, r3, #1
   40d20:	cmn	r3, #1
   40d24:	bne	40d10 <__assert_fail@plt+0x2e260>
   40d28:	ldr	r0, [sp, #44]	; 0x2c
   40d2c:	ldr	r8, [r0, #60]	; 0x3c
   40d30:	b	40d94 <__assert_fail@plt+0x2e2e4>
   40d34:	ldr	r1, [r0, #4]
   40d38:	ldr	r2, [r0, #68]	; 0x44
   40d3c:	mov	r8, #1
   40d40:	ldrb	r0, [r1, r3]
   40d44:	ubfx	r1, r0, #5, #3
   40d48:	ldr	r1, [r2, r1, lsl #2]
   40d4c:	and	r2, r0, #31
   40d50:	tst	r1, r8, lsl r2
   40d54:	moveq	r8, #0
   40d58:	cmpeq	r0, #10
   40d5c:	bne	40d94 <__assert_fail@plt+0x2e2e4>
   40d60:	b	40d80 <__assert_fail@plt+0x2e2d0>
   40d64:	ldr	r0, [sp, #44]	; 0x2c
   40d68:	ldrb	r0, [r0, #78]	; 0x4e
   40d6c:	cmp	r0, #0
   40d70:	bne	41674 <__assert_fail@plt+0x2ebc4>
   40d74:	mov	r8, #0
   40d78:	cmp	r6, #10
   40d7c:	bne	40d94 <__assert_fail@plt+0x2e2e4>
   40d80:	ldr	r0, [sp, #44]	; 0x2c
   40d84:	ldrb	r0, [r0, #77]	; 0x4d
   40d88:	cmp	r0, #0
   40d8c:	movwne	r0, #1
   40d90:	lsl	r8, r0, #1
   40d94:	cmp	r5, r9
   40d98:	str	ip, [sp, #16]
   40d9c:	bne	40e60 <__assert_fail@plt+0x2e3b0>
   40da0:	mov	r0, #1
   40da4:	mov	r6, lr
   40da8:	str	r0, [sp, #52]	; 0x34
   40dac:	str	r0, [sp, #48]	; 0x30
   40db0:	mov	r0, #4
   40db4:	bl	327ac <__assert_fail@plt+0x1fcfc>
   40db8:	cmp	r0, #0
   40dbc:	str	r0, [sp, #56]	; 0x38
   40dc0:	beq	4165c <__assert_fail@plt+0x2ebac>
   40dc4:	ldr	r3, [fp, #16]
   40dc8:	str	r6, [r0]
   40dcc:	mov	r0, #0
   40dd0:	add	r1, sp, #48	; 0x30
   40dd4:	mov	r2, sl
   40dd8:	str	r0, [fp, #-52]	; 0xffffffcc
   40ddc:	mov	r0, r7
   40de0:	bl	416b0 <__assert_fail@plt+0x2ec00>
   40de4:	cmp	r0, #0
   40de8:	str	r0, [fp, #-52]	; 0xffffffcc
   40dec:	bne	4164c <__assert_fail@plt+0x2eb9c>
   40df0:	ldr	r0, [sp, #52]	; 0x34
   40df4:	ldr	r9, [sp, #44]	; 0x2c
   40df8:	cmp	r0, #0
   40dfc:	beq	40e28 <__assert_fail@plt+0x2e378>
   40e00:	ldr	r0, [fp, #16]
   40e04:	ldr	r3, [sp, #20]
   40e08:	add	r1, sp, #48	; 0x30
   40e0c:	mov	r2, r5
   40e10:	str	r0, [sp]
   40e14:	mov	r0, r9
   40e18:	bl	417e8 <__assert_fail@plt+0x2ed38>
   40e1c:	cmp	r0, #0
   40e20:	str	r0, [fp, #-52]	; 0xffffffcc
   40e24:	bne	4164c <__assert_fail@plt+0x2eb9c>
   40e28:	ldr	r1, [sp, #24]
   40e2c:	sub	r0, fp, #52	; 0x34
   40e30:	add	r2, sp, #48	; 0x30
   40e34:	mov	r3, r8
   40e38:	bl	3e8f8 <__assert_fail@plt+0x2be48>
   40e3c:	mov	r6, r0
   40e40:	cmp	r0, #0
   40e44:	bne	40e54 <__assert_fail@plt+0x2e3a4>
   40e48:	ldr	r0, [fp, #-52]	; 0xffffffcc
   40e4c:	cmp	r0, #0
   40e50:	bne	415a4 <__assert_fail@plt+0x2eaf4>
   40e54:	ldr	r0, [r9, #100]	; 0x64
   40e58:	str	r6, [r0, r5, lsl #2]
   40e5c:	b	40ef4 <__assert_fail@plt+0x2e444>
   40e60:	ldr	r9, [sp, #44]	; 0x2c
   40e64:	ldr	r0, [r9, #100]	; 0x64
   40e68:	ldr	r6, [r0, r5, lsl #2]
   40e6c:	cmp	r6, #0
   40e70:	beq	40e94 <__assert_fail@plt+0x2e3e4>
   40e74:	ldrb	r0, [r6, #52]	; 0x34
   40e78:	tst	r0, #64	; 0x40
   40e7c:	bne	40ea8 <__assert_fail@plt+0x2e3f8>
   40e80:	mov	r0, #0
   40e84:	str	r0, [sp, #52]	; 0x34
   40e88:	str	r0, [sp, #48]	; 0x30
   40e8c:	str	r0, [sp, #56]	; 0x38
   40e90:	b	40ef4 <__assert_fail@plt+0x2e444>
   40e94:	mov	r6, #0
   40e98:	str	r6, [sp, #52]	; 0x34
   40e9c:	str	r6, [sp, #48]	; 0x30
   40ea0:	str	r6, [sp, #56]	; 0x38
   40ea4:	b	40ef4 <__assert_fail@plt+0x2e444>
   40ea8:	ldr	r0, [r6, #8]
   40eac:	cmp	r0, #1
   40eb0:	str	r0, [sp, #52]	; 0x34
   40eb4:	blt	41568 <__assert_fail@plt+0x2eab8>
   40eb8:	str	r0, [sp, #48]	; 0x30
   40ebc:	lsl	r0, r0, #2
   40ec0:	bl	327ac <__assert_fail@plt+0x1fcfc>
   40ec4:	cmp	r0, #0
   40ec8:	str	r0, [sp, #56]	; 0x38
   40ecc:	beq	4165c <__assert_fail@plt+0x2ebac>
   40ed0:	ldr	r2, [r6, #8]
   40ed4:	ldr	r1, [r6, #12]
   40ed8:	lsl	r2, r2, #2
   40edc:	bl	124e0 <memcpy@plt>
   40ee0:	ldrb	r0, [r6, #52]	; 0x34
   40ee4:	mov	r1, #0
   40ee8:	str	r1, [fp, #-52]	; 0xffffffcc
   40eec:	tst	r0, #64	; 0x40
   40ef0:	bne	40e00 <__assert_fail@plt+0x2e350>
   40ef4:	ldr	r4, [fp, #12]
   40ef8:	cmp	r5, r4
   40efc:	bge	414c0 <__assert_fail@plt+0x2ea10>
   40f00:	ldr	r7, [sp, #24]
   40f04:	ldr	sl, [sp, #20]
   40f08:	ldr	r4, [fp, #16]
   40f0c:	add	r8, sp, #48	; 0x30
   40f10:	mov	r0, #0
   40f14:	str	r6, [sp, #40]	; 0x28
   40f18:	b	40f48 <__assert_fail@plt+0x2e498>
   40f1c:	ldr	r1, [sp, #40]	; 0x28
   40f20:	ldr	r0, [r9, #100]	; 0x64
   40f24:	ldr	r5, [sp, #28]
   40f28:	str	r1, [r0, r5, lsl #2]
   40f2c:	cmp	r1, #0
   40f30:	ldr	r1, [sp, #32]
   40f34:	mov	r0, #0
   40f38:	addeq	r0, r1, #1
   40f3c:	ldr	r1, [fp, #12]
   40f40:	cmp	r5, r1
   40f44:	beq	414bc <__assert_fail@plt+0x2ea0c>
   40f48:	str	r0, [sp, #32]
   40f4c:	ldr	r0, [r9, #120]	; 0x78
   40f50:	ldr	r1, [sp, #32]
   40f54:	cmp	r1, r0
   40f58:	bgt	414c0 <__assert_fail@plt+0x2ea10>
   40f5c:	mov	r0, #0
   40f60:	add	r1, r5, #1
   40f64:	str	r0, [sp, #52]	; 0x34
   40f68:	str	r1, [sp, #28]
   40f6c:	ldr	r0, [r9, #100]	; 0x64
   40f70:	ldr	r0, [r0, r1, lsl #2]
   40f74:	cmp	r0, #0
   40f78:	beq	40f94 <__assert_fail@plt+0x2e4e4>
   40f7c:	add	r1, r0, #4
   40f80:	mov	r0, r8
   40f84:	bl	3e5f8 <__assert_fail@plt+0x2bb48>
   40f88:	cmp	r0, #0
   40f8c:	str	r0, [fp, #-52]	; 0xffffffcc
   40f90:	bne	415a4 <__assert_fail@plt+0x2eaf4>
   40f94:	ldr	r1, [sp, #40]	; 0x28
   40f98:	cmp	r1, #0
   40f9c:	beq	41374 <__assert_fail@plt+0x2e8c4>
   40fa0:	mov	r0, #0
   40fa4:	ldr	r8, [r9, #84]	; 0x54
   40fa8:	str	r0, [fp, #-32]	; 0xffffffe0
   40fac:	str	r0, [fp, #-44]	; 0xffffffd4
   40fb0:	str	r0, [fp, #-48]	; 0xffffffd0
   40fb4:	str	r0, [fp, #-40]	; 0xffffffd8
   40fb8:	ldr	r1, [r1, #20]
   40fbc:	cmp	r1, #1
   40fc0:	blt	41360 <__assert_fail@plt+0x2e8b0>
   40fc4:	ldr	r7, [sp, #40]	; 0x28
   40fc8:	mov	r4, #0
   40fcc:	b	41000 <__assert_fail@plt+0x2e550>
   40fd0:	ldr	r1, [sp, #52]	; 0x34
   40fd4:	cmp	r1, #0
   40fd8:	bne	4117c <__assert_fail@plt+0x2e6cc>
   40fdc:	ldr	r0, [sp, #56]	; 0x38
   40fe0:	str	r6, [r0]
   40fe4:	ldr	r0, [sp, #52]	; 0x34
   40fe8:	add	r0, r0, #1
   40fec:	str	r0, [sp, #52]	; 0x34
   40ff0:	ldr	r0, [r7, #20]
   40ff4:	add	r4, r4, #1
   40ff8:	cmp	r4, r0
   40ffc:	bge	41354 <__assert_fail@plt+0x2e8a4>
   41000:	ldr	r0, [r7, #24]
   41004:	ldr	sl, [r0, r4, lsl #2]
   41008:	ldr	r0, [r8]
   4100c:	add	r1, r0, sl, lsl #3
   41010:	ldrb	r1, [r1, #6]
   41014:	tst	r1, #16
   41018:	beq	41128 <__assert_fail@plt+0x2e678>
   4101c:	mov	r0, r8
   41020:	mov	r1, sl
   41024:	mov	r2, r9
   41028:	mov	r3, r5
   4102c:	bl	421c8 <__assert_fail@plt+0x2f718>
   41030:	mov	r9, r0
   41034:	cmp	r0, #2
   41038:	blt	41114 <__assert_fail@plt+0x2e664>
   4103c:	ldr	r0, [sp, #44]	; 0x2c
   41040:	ldr	r1, [r8, #12]
   41044:	add	r6, r9, r5
   41048:	ldr	r0, [r0, #100]	; 0x64
   4104c:	ldr	r1, [r1, sl, lsl #2]
   41050:	ldr	r0, [r0, r6, lsl #2]
   41054:	str	r1, [sp, #36]	; 0x24
   41058:	mov	r1, #0
   4105c:	str	r1, [fp, #-44]	; 0xffffffd4
   41060:	cmp	r0, #0
   41064:	beq	41080 <__assert_fail@plt+0x2e5d0>
   41068:	add	r1, r0, #4
   4106c:	sub	r0, fp, #48	; 0x30
   41070:	bl	3e5f8 <__assert_fail@plt+0x2bb48>
   41074:	cmp	r0, #0
   41078:	str	r0, [fp, #-32]	; 0xffffffe0
   4107c:	bne	41594 <__assert_fail@plt+0x2eae4>
   41080:	ldr	r2, [fp, #-48]	; 0xffffffd0
   41084:	cmp	r2, #0
   41088:	beq	410b4 <__assert_fail@plt+0x2e604>
   4108c:	ldr	r1, [fp, #-44]	; 0xffffffd4
   41090:	ldr	r7, [sp, #36]	; 0x24
   41094:	cmp	r1, #0
   41098:	bne	41264 <__assert_fail@plt+0x2e7b4>
   4109c:	ldr	r0, [fp, #-40]	; 0xffffffd8
   410a0:	str	r7, [r0]
   410a4:	ldr	r0, [fp, #-44]	; 0xffffffd4
   410a8:	add	r0, r0, #1
   410ac:	str	r0, [fp, #-44]	; 0xffffffd4
   410b0:	b	410dc <__assert_fail@plt+0x2e62c>
   410b4:	mov	r0, #1
   410b8:	str	r0, [fp, #-44]	; 0xffffffd4
   410bc:	str	r0, [fp, #-48]	; 0xffffffd0
   410c0:	mov	r0, #4
   410c4:	bl	327ac <__assert_fail@plt+0x1fcfc>
   410c8:	ldr	r1, [sp, #36]	; 0x24
   410cc:	cmp	r0, #0
   410d0:	str	r0, [fp, #-40]	; 0xffffffd8
   410d4:	beq	415b4 <__assert_fail@plt+0x2eb04>
   410d8:	str	r1, [r0]
   410dc:	sub	r0, fp, #32
   410e0:	mov	r1, r8
   410e4:	sub	r2, fp, #48	; 0x30
   410e8:	bl	41eb0 <__assert_fail@plt+0x2f400>
   410ec:	ldr	r2, [sp, #44]	; 0x2c
   410f0:	ldr	r1, [r2, #100]	; 0x64
   410f4:	str	r0, [r1, r6, lsl #2]
   410f8:	ldr	r0, [r2, #100]	; 0x64
   410fc:	ldr	r0, [r0, r6, lsl #2]
   41100:	cmp	r0, #0
   41104:	bne	41114 <__assert_fail@plt+0x2e664>
   41108:	ldr	r7, [fp, #-32]	; 0xffffffe0
   4110c:	cmp	r7, #0
   41110:	bne	41598 <__assert_fail@plt+0x2eae8>
   41114:	cmp	r9, #0
   41118:	ldr	r9, [sp, #44]	; 0x2c
   4111c:	ldr	r7, [sp, #40]	; 0x28
   41120:	bne	41140 <__assert_fail@plt+0x2e690>
   41124:	ldr	r0, [r8]
   41128:	add	r1, r0, sl, lsl #3
   4112c:	mov	r0, r9
   41130:	mov	r2, r5
   41134:	bl	4252c <__assert_fail@plt+0x2fa7c>
   41138:	cmp	r0, #0
   4113c:	beq	40ff0 <__assert_fail@plt+0x2e540>
   41140:	ldr	r0, [r8, #12]
   41144:	ldr	r2, [sp, #48]	; 0x30
   41148:	ldr	r6, [r0, sl, lsl #2]
   4114c:	cmp	r2, #0
   41150:	bne	40fd0 <__assert_fail@plt+0x2e520>
   41154:	mov	r0, #1
   41158:	str	r0, [sp, #52]	; 0x34
   4115c:	str	r0, [sp, #48]	; 0x30
   41160:	mov	r0, #4
   41164:	bl	327ac <__assert_fail@plt+0x1fcfc>
   41168:	cmp	r0, #0
   4116c:	str	r0, [sp, #56]	; 0x38
   41170:	beq	41580 <__assert_fail@plt+0x2ead0>
   41174:	str	r6, [r0]
   41178:	b	40ff0 <__assert_fail@plt+0x2e540>
   4117c:	cmp	r2, r1
   41180:	bne	411ac <__assert_fail@plt+0x2e6fc>
   41184:	lsl	r0, r2, #1
   41188:	lsl	r1, r2, #3
   4118c:	str	r0, [sp, #48]	; 0x30
   41190:	ldr	r0, [sp, #56]	; 0x38
   41194:	bl	33500 <__assert_fail@plt+0x20a50>
   41198:	cmp	r0, #0
   4119c:	beq	4158c <__assert_fail@plt+0x2eadc>
   411a0:	str	r0, [sp, #56]	; 0x38
   411a4:	ldr	r1, [sp, #52]	; 0x34
   411a8:	b	411b0 <__assert_fail@plt+0x2e700>
   411ac:	ldr	r0, [sp, #56]	; 0x38
   411b0:	ldr	r2, [r0]
   411b4:	cmp	r2, r6
   411b8:	ble	4122c <__assert_fail@plt+0x2e77c>
   411bc:	cmp	r1, #1
   411c0:	blt	4125c <__assert_fail@plt+0x2e7ac>
   411c4:	ands	r7, r1, #3
   411c8:	sub	ip, r1, #1
   411cc:	beq	411f0 <__assert_fail@plt+0x2e740>
   411d0:	add	lr, r0, r1, lsl #2
   411d4:	mov	r3, lr
   411d8:	ldr	r2, [r3, #-4]!
   411dc:	subs	r7, r7, #1
   411e0:	sub	r1, r1, #1
   411e4:	str	r2, [lr]
   411e8:	mov	lr, r3
   411ec:	bne	411d8 <__assert_fail@plt+0x2e728>
   411f0:	cmp	ip, #3
   411f4:	bcc	41220 <__assert_fail@plt+0x2e770>
   411f8:	add	r2, r0, r1, lsl #2
   411fc:	sub	r2, r2, #8
   41200:	sub	lr, r2, #8
   41204:	sub	r1, r1, #4
   41208:	sub	sl, r2, #4
   4120c:	sub	r2, r2, #16
   41210:	ldm	lr, {r3, r7, ip, lr}
   41214:	cmp	r1, #0
   41218:	stm	sl, {r3, r7, ip, lr}
   4121c:	bgt	41200 <__assert_fail@plt+0x2e750>
   41220:	ldr	r7, [sp, #40]	; 0x28
   41224:	mov	r1, #0
   41228:	b	4125c <__assert_fail@plt+0x2e7ac>
   4122c:	add	r2, r0, r1, lsl #2
   41230:	ldr	r3, [r2, #-4]
   41234:	cmp	r3, r6
   41238:	ble	4125c <__assert_fail@plt+0x2e7ac>
   4123c:	sub	r1, r1, #2
   41240:	str	r3, [r2]
   41244:	sub	r1, r1, #1
   41248:	ldr	r3, [r2, #-8]
   4124c:	sub	r2, r2, #4
   41250:	cmp	r3, r6
   41254:	bgt	41240 <__assert_fail@plt+0x2e790>
   41258:	add	r1, r1, #2
   4125c:	str	r6, [r0, r1, lsl #2]
   41260:	b	40fe4 <__assert_fail@plt+0x2e534>
   41264:	cmp	r2, r1
   41268:	bne	41294 <__assert_fail@plt+0x2e7e4>
   4126c:	lsl	r0, r2, #1
   41270:	lsl	r1, r2, #3
   41274:	str	r0, [fp, #-48]	; 0xffffffd0
   41278:	ldr	r0, [fp, #-40]	; 0xffffffd8
   4127c:	bl	33500 <__assert_fail@plt+0x20a50>
   41280:	cmp	r0, #0
   41284:	beq	4158c <__assert_fail@plt+0x2eadc>
   41288:	str	r0, [fp, #-40]	; 0xffffffd8
   4128c:	ldr	r1, [fp, #-44]	; 0xffffffd4
   41290:	b	41298 <__assert_fail@plt+0x2e7e8>
   41294:	ldr	r0, [fp, #-40]	; 0xffffffd8
   41298:	ldr	r2, [r0]
   4129c:	cmp	r2, r7
   412a0:	ble	4131c <__assert_fail@plt+0x2e86c>
   412a4:	cmp	r1, #1
   412a8:	blt	4134c <__assert_fail@plt+0x2e89c>
   412ac:	ands	r3, r1, #3
   412b0:	sub	ip, r1, #1
   412b4:	beq	412d8 <__assert_fail@plt+0x2e828>
   412b8:	add	lr, r0, r1, lsl #2
   412bc:	mov	r7, lr
   412c0:	ldr	r2, [r7, #-4]!
   412c4:	subs	r3, r3, #1
   412c8:	sub	r1, r1, #1
   412cc:	str	r2, [lr]
   412d0:	mov	lr, r7
   412d4:	bne	412c0 <__assert_fail@plt+0x2e810>
   412d8:	cmp	ip, #3
   412dc:	bcc	41310 <__assert_fail@plt+0x2e860>
   412e0:	add	r2, r0, r1, lsl #2
   412e4:	sub	r2, r2, #8
   412e8:	sub	lr, r2, #8
   412ec:	sub	r1, r1, #4
   412f0:	ldm	lr, {r3, r7, ip, lr}
   412f4:	cmp	r1, #0
   412f8:	str	r3, [r2, #-4]
   412fc:	str	r7, [r2]
   41300:	str	ip, [r2, #4]
   41304:	str	lr, [r2, #8]
   41308:	sub	r2, r2, #16
   4130c:	bgt	412e8 <__assert_fail@plt+0x2e838>
   41310:	ldr	r7, [sp, #36]	; 0x24
   41314:	mov	r1, #0
   41318:	b	4134c <__assert_fail@plt+0x2e89c>
   4131c:	add	r2, r0, r1, lsl #2
   41320:	ldr	r3, [r2, #-4]
   41324:	cmp	r3, r7
   41328:	ble	4134c <__assert_fail@plt+0x2e89c>
   4132c:	sub	r1, r1, #2
   41330:	str	r3, [r2]
   41334:	sub	r1, r1, #1
   41338:	ldr	r3, [r2, #-8]
   4133c:	sub	r2, r2, #4
   41340:	cmp	r3, r7
   41344:	bgt	41330 <__assert_fail@plt+0x2e880>
   41348:	add	r1, r1, #2
   4134c:	str	r7, [r0, r1, lsl #2]
   41350:	b	410a4 <__assert_fail@plt+0x2e5f4>
   41354:	ldr	r0, [fp, #-40]	; 0xffffffd8
   41358:	ldr	r7, [sp, #24]
   4135c:	ldr	sl, [sp, #20]
   41360:	bl	30174 <__assert_fail@plt+0x1d6c4>
   41364:	ldr	r4, [fp, #16]
   41368:	mov	r0, #0
   4136c:	add	r8, sp, #48	; 0x30
   41370:	str	r0, [fp, #-52]	; 0xffffffcc
   41374:	ldr	r0, [sp, #52]	; 0x34
   41378:	cmp	r0, #0
   4137c:	beq	413c4 <__assert_fail@plt+0x2e914>
   41380:	mov	r0, r7
   41384:	mov	r1, r8
   41388:	mov	r2, sl
   4138c:	mov	r3, r4
   41390:	bl	416b0 <__assert_fail@plt+0x2ec00>
   41394:	cmp	r0, #0
   41398:	str	r0, [fp, #-52]	; 0xffffffcc
   4139c:	bne	415a4 <__assert_fail@plt+0x2eaf4>
   413a0:	ldr	r2, [sp, #28]
   413a4:	mov	r0, r9
   413a8:	mov	r1, r8
   413ac:	mov	r3, sl
   413b0:	str	r4, [sp]
   413b4:	bl	417e8 <__assert_fail@plt+0x2ed38>
   413b8:	cmp	r0, #0
   413bc:	str	r0, [fp, #-52]	; 0xffffffcc
   413c0:	bne	415a4 <__assert_fail@plt+0x2eaf4>
   413c4:	cmn	r5, #1
   413c8:	ble	41400 <__assert_fail@plt+0x2e950>
   413cc:	ldr	r0, [r9, #48]	; 0x30
   413d0:	cmp	r0, r5
   413d4:	beq	4148c <__assert_fail@plt+0x2e9dc>
   413d8:	ldr	r0, [r9, #80]	; 0x50
   413dc:	cmp	r0, #2
   413e0:	blt	41408 <__assert_fail@plt+0x2e958>
   413e4:	ldr	r0, [r9, #8]
   413e8:	ldr	r6, [r0, r5, lsl #2]
   413ec:	cmn	r6, #1
   413f0:	bne	41438 <__assert_fail@plt+0x2e988>
   413f4:	sub	r5, r5, #1
   413f8:	cmn	r5, #1
   413fc:	bne	413e8 <__assert_fail@plt+0x2e938>
   41400:	ldr	r3, [r9, #60]	; 0x3c
   41404:	b	41460 <__assert_fail@plt+0x2e9b0>
   41408:	ldr	r0, [r9, #4]
   4140c:	ldr	r1, [r9, #68]	; 0x44
   41410:	mov	r3, #1
   41414:	ldrb	r0, [r0, r5]
   41418:	ubfx	r2, r0, #5, #3
   4141c:	ldr	r1, [r1, r2, lsl #2]
   41420:	and	r2, r0, #31
   41424:	tst	r1, r3, lsl r2
   41428:	moveq	r3, #0
   4142c:	cmpeq	r0, #10
   41430:	bne	41460 <__assert_fail@plt+0x2e9b0>
   41434:	b	41450 <__assert_fail@plt+0x2e9a0>
   41438:	ldrb	r0, [r9, #78]	; 0x4e
   4143c:	cmp	r0, #0
   41440:	bne	4149c <__assert_fail@plt+0x2e9ec>
   41444:	mov	r3, #0
   41448:	cmp	r6, #10
   4144c:	bne	41460 <__assert_fail@plt+0x2e9b0>
   41450:	ldrb	r0, [r9, #77]	; 0x4d
   41454:	cmp	r0, #0
   41458:	movwne	r0, #1
   4145c:	lsl	r3, r0, #1
   41460:	sub	r0, fp, #52	; 0x34
   41464:	mov	r1, r7
   41468:	mov	r2, r8
   4146c:	bl	3e8f8 <__assert_fail@plt+0x2be48>
   41470:	cmp	r0, #0
   41474:	str	r0, [sp, #40]	; 0x28
   41478:	bne	40f1c <__assert_fail@plt+0x2e46c>
   4147c:	ldr	r0, [fp, #-52]	; 0xffffffcc
   41480:	cmp	r0, #0
   41484:	beq	40f1c <__assert_fail@plt+0x2e46c>
   41488:	b	415a4 <__assert_fail@plt+0x2eaf4>
   4148c:	ldr	r0, [r9, #88]	; 0x58
   41490:	and	r0, r0, #2
   41494:	eor	r3, r0, #10
   41498:	b	41460 <__assert_fail@plt+0x2e9b0>
   4149c:	mov	r0, r6
   414a0:	bl	12810 <iswalnum@plt>
   414a4:	mov	r3, #1
   414a8:	cmp	r6, #95	; 0x5f
   414ac:	beq	41460 <__assert_fail@plt+0x2e9b0>
   414b0:	cmp	r0, #0
   414b4:	beq	41444 <__assert_fail@plt+0x2e994>
   414b8:	b	41460 <__assert_fail@plt+0x2e9b0>
   414bc:	ldr	r5, [fp, #12]
   414c0:	ldr	r0, [sp, #56]	; 0x38
   414c4:	bl	30174 <__assert_fail@plt+0x1d6c4>
   414c8:	ldr	r0, [r9, #100]	; 0x64
   414cc:	ldr	r1, [fp, #12]
   414d0:	mov	sl, #1
   414d4:	ldr	r1, [r0, r1, lsl #2]
   414d8:	ldr	r0, [sp, #16]
   414dc:	str	r5, [r0]
   414e0:	ldr	r0, [sp, #12]
   414e4:	cmp	r1, #0
   414e8:	addne	r1, r1, #4
   414ec:	str	r0, [r9, #40]	; 0x28
   414f0:	ldr	r0, [sp, #8]
   414f4:	str	r0, [r9, #100]	; 0x64
   414f8:	beq	4155c <__assert_fail@plt+0x2eaac>
   414fc:	ldr	r2, [r1, #4]
   41500:	cmp	r2, #1
   41504:	blt	41558 <__assert_fail@plt+0x2eaa8>
   41508:	ldr	r0, [fp, #8]
   4150c:	ldr	r1, [r1, #8]
   41510:	subs	r2, r2, #1
   41514:	mov	sl, #0
   41518:	mov	r3, #0
   4151c:	beq	41548 <__assert_fail@plt+0x2ea98>
   41520:	mov	r3, #0
   41524:	mov	r7, #1
   41528:	add	r5, r3, r2
   4152c:	lsr	r4, r5, #1
   41530:	ldr	r6, [r1, r4, lsl #2]
   41534:	cmp	r6, r0
   41538:	addlt	r3, r7, r5, lsr #1
   4153c:	movge	r2, r4
   41540:	cmp	r3, r2
   41544:	bcc	41528 <__assert_fail@plt+0x2ea78>
   41548:	ldr	r1, [r1, r3, lsl #2]
   4154c:	cmp	r1, r0
   41550:	movne	sl, #1
   41554:	b	4155c <__assert_fail@plt+0x2eaac>
   41558:	mov	sl, #1
   4155c:	mov	r0, sl
   41560:	sub	sp, fp, #28
   41564:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   41568:	mov	r0, #0
   4156c:	str	r0, [sp, #52]	; 0x34
   41570:	str	r0, [sp, #48]	; 0x30
   41574:	str	r0, [sp, #56]	; 0x38
   41578:	str	r0, [fp, #-52]	; 0xffffffcc
   4157c:	b	40e28 <__assert_fail@plt+0x2e378>
   41580:	mov	r0, #0
   41584:	str	r0, [sp, #48]	; 0x30
   41588:	str	r0, [sp, #52]	; 0x34
   4158c:	mov	r7, #12
   41590:	b	41598 <__assert_fail@plt+0x2eae8>
   41594:	mov	r7, r0
   41598:	ldr	r0, [fp, #-40]	; 0xffffffd8
   4159c:	bl	30174 <__assert_fail@plt+0x1d6c4>
   415a0:	str	r7, [fp, #-52]	; 0xffffffcc
   415a4:	ldr	r0, [sp, #56]	; 0x38
   415a8:	bl	30174 <__assert_fail@plt+0x1d6c4>
   415ac:	ldr	sl, [fp, #-52]	; 0xffffffcc
   415b0:	b	4155c <__assert_fail@plt+0x2eaac>
   415b4:	mov	r0, #0
   415b8:	mov	r7, #12
   415bc:	str	r0, [fp, #-48]	; 0xffffffd0
   415c0:	str	r0, [fp, #-44]	; 0xffffffd4
   415c4:	b	4159c <__assert_fail@plt+0x2eaec>
   415c8:	mvn	r1, #-2147483648	; 0x80000000
   415cc:	mov	sl, #12
   415d0:	sub	r1, r1, r4
   415d4:	cmp	r1, r2
   415d8:	ble	4155c <__assert_fail@plt+0x2eaac>
   415dc:	add	r8, r2, #1
   415e0:	str	lr, [sp, #40]	; 0x28
   415e4:	add	r5, r8, r4
   415e8:	cmn	r5, #-1073741823	; 0xc0000001
   415ec:	bhi	4155c <__assert_fail@plt+0x2eaac>
   415f0:	ldr	r0, [ip, #8]
   415f4:	lsl	r1, r5, #2
   415f8:	mov	r6, ip
   415fc:	bl	33500 <__assert_fail@plt+0x20a50>
   41600:	cmp	r0, #0
   41604:	beq	4155c <__assert_fail@plt+0x2eaac>
   41608:	str	r5, [r6, #4]
   4160c:	str	r0, [r6, #8]
   41610:	add	r0, r0, r4, lsl #2
   41614:	lsl	r2, r8, #2
   41618:	mov	r1, #0
   4161c:	bl	12834 <memset@plt>
   41620:	ldr	r0, [sp, #44]	; 0x2c
   41624:	ldr	r7, [sp, #24]
   41628:	ldr	sl, [sp, #20]
   4162c:	ldr	lr, [sp, #40]	; 0x28
   41630:	mov	ip, r6
   41634:	b	40cbc <__assert_fail@plt+0x2e20c>
   41638:	ldr	r8, [r0, #60]	; 0x3c
   4163c:	b	40d94 <__assert_fail@plt+0x2e2e4>
   41640:	and	r0, r1, #2
   41644:	eor	r8, r0, #10
   41648:	b	40d94 <__assert_fail@plt+0x2e2e4>
   4164c:	mov	sl, r0
   41650:	ldr	r0, [sp, #56]	; 0x38
   41654:	bl	30174 <__assert_fail@plt+0x1d6c4>
   41658:	b	4155c <__assert_fail@plt+0x2eaac>
   4165c:	mov	r0, #0
   41660:	mov	sl, #12
   41664:	str	r0, [sp, #48]	; 0x30
   41668:	str	r0, [sp, #52]	; 0x34
   4166c:	str	sl, [fp, #-52]	; 0xffffffcc
   41670:	b	4155c <__assert_fail@plt+0x2eaac>
   41674:	mov	r0, r6
   41678:	str	lr, [sp, #40]	; 0x28
   4167c:	mov	r4, ip
   41680:	bl	12810 <iswalnum@plt>
   41684:	mov	r8, #1
   41688:	cmp	r6, #95	; 0x5f
   4168c:	beq	416a4 <__assert_fail@plt+0x2ebf4>
   41690:	ldr	lr, [sp, #40]	; 0x28
   41694:	cmp	r0, #0
   41698:	mov	ip, r4
   4169c:	beq	40d74 <__assert_fail@plt+0x2e2c4>
   416a0:	b	40d94 <__assert_fail@plt+0x2e2e4>
   416a4:	ldr	lr, [sp, #40]	; 0x28
   416a8:	mov	ip, r4
   416ac:	b	40d94 <__assert_fail@plt+0x2e2e4>
   416b0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   416b4:	add	fp, sp, #28
   416b8:	sub	sp, sp, #20
   416bc:	str	r0, [sp, #4]
   416c0:	ldr	r0, [r1, #4]
   416c4:	mov	sl, r1
   416c8:	mov	r1, #0
   416cc:	mov	r5, r3
   416d0:	mov	r8, r2
   416d4:	str	r1, [sp, #12]
   416d8:	str	r0, [sp, #8]
   416dc:	lsl	r0, r0, #2
   416e0:	bl	327ac <__assert_fail@plt+0x1fcfc>
   416e4:	cmp	r0, #0
   416e8:	str	r0, [sp, #16]
   416ec:	beq	417e0 <__assert_fail@plt+0x2ed30>
   416f0:	ldr	r0, [sl, #4]
   416f4:	cmp	r0, #1
   416f8:	blt	417a8 <__assert_fail@plt+0x2ecf8>
   416fc:	mov	r9, #0
   41700:	ldr	r0, [sl, #8]
   41704:	ldr	r1, [sp, #4]
   41708:	ldr	r2, [r0, r9, lsl #2]
   4170c:	ldr	r1, [r1, #24]
   41710:	add	r0, r2, r2, lsl #1
   41714:	add	r1, r1, r0, lsl #2
   41718:	ldr	r0, [r1, #4]
   4171c:	cmp	r0, #1
   41720:	blt	41788 <__assert_fail@plt+0x2ecd8>
   41724:	ldr	r7, [sp, #4]
   41728:	ldr	r3, [r1, #8]
   4172c:	ldr	r7, [r7]
   41730:	b	41740 <__assert_fail@plt+0x2ec90>
   41734:	add	r3, r3, #4
   41738:	subs	r0, r0, #1
   4173c:	beq	41788 <__assert_fail@plt+0x2ecd8>
   41740:	ldr	r6, [r3]
   41744:	add	r4, r7, r6, lsl #3
   41748:	ldrb	r4, [r4, #4]
   4174c:	cmp	r4, r5
   41750:	bne	41734 <__assert_fail@plt+0x2ec84>
   41754:	ldr	r4, [r7, r6, lsl #3]
   41758:	cmp	r4, r8
   4175c:	bne	41734 <__assert_fail@plt+0x2ec84>
   41760:	cmn	r6, #1
   41764:	beq	41788 <__assert_fail@plt+0x2ecd8>
   41768:	ldr	r0, [sp, #4]
   4176c:	add	r1, sp, #8
   41770:	mov	r3, r8
   41774:	str	r5, [sp]
   41778:	bl	41d78 <__assert_fail@plt+0x2f2c8>
   4177c:	cmp	r0, #0
   41780:	beq	41798 <__assert_fail@plt+0x2ece8>
   41784:	b	417d0 <__assert_fail@plt+0x2ed20>
   41788:	add	r0, sp, #8
   4178c:	bl	3e5f8 <__assert_fail@plt+0x2bb48>
   41790:	cmp	r0, #0
   41794:	bne	417d0 <__assert_fail@plt+0x2ed20>
   41798:	ldr	r0, [sl, #4]
   4179c:	add	r9, r9, #1
   417a0:	cmp	r9, r0
   417a4:	blt	41700 <__assert_fail@plt+0x2ec50>
   417a8:	ldr	r0, [sl, #8]
   417ac:	bl	30174 <__assert_fail@plt+0x1d6c4>
   417b0:	vldr	d16, [sp, #8]
   417b4:	ldr	r0, [sp, #16]
   417b8:	mov	r7, #0
   417bc:	str	r0, [sl, #8]
   417c0:	vstr	d16, [sl]
   417c4:	mov	r0, r7
   417c8:	sub	sp, fp, #28
   417cc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   417d0:	mov	r7, r0
   417d4:	ldr	r0, [sp, #16]
   417d8:	bl	30174 <__assert_fail@plt+0x1d6c4>
   417dc:	b	417c4 <__assert_fail@plt+0x2ed14>
   417e0:	mov	r7, #12
   417e4:	b	417c4 <__assert_fail@plt+0x2ed14>
   417e8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   417ec:	add	fp, sp, #28
   417f0:	sub	sp, sp, #52	; 0x34
   417f4:	ldr	ip, [r0, #108]	; 0x6c
   417f8:	mov	lr, r1
   417fc:	ldr	r1, [r0, #84]	; 0x54
   41800:	str	r0, [sp, #24]
   41804:	mov	sl, r2
   41808:	mov	r8, #0
   4180c:	mov	r0, #0
   41810:	cmp	ip, #1
   41814:	str	r1, [sp, #28]
   41818:	blt	4185c <__assert_fail@plt+0x2edac>
   4181c:	ldr	r0, [sp, #24]
   41820:	mov	r7, #1
   41824:	mov	r1, ip
   41828:	ldr	r2, [r0, #116]	; 0x74
   4182c:	mov	r0, #0
   41830:	add	r6, r1, r0
   41834:	add	r6, r6, r6, lsr #31
   41838:	asr	r4, r6, #1
   4183c:	add	r5, r4, r4, lsl #1
   41840:	add	r5, r2, r5, lsl #3
   41844:	ldr	r5, [r5, #4]
   41848:	cmp	r5, sl
   4184c:	addlt	r0, r7, r6, asr #1
   41850:	movge	r1, r4
   41854:	cmp	r0, r1
   41858:	blt	41830 <__assert_fail@plt+0x2ed80>
   4185c:	cmp	r0, ip
   41860:	bge	41d64 <__assert_fail@plt+0x2f2b4>
   41864:	cmn	r0, #1
   41868:	beq	41d64 <__assert_fail@plt+0x2f2b4>
   4186c:	ldr	r1, [sp, #24]
   41870:	add	r0, r0, r0, lsl #1
   41874:	str	r0, [sp, #8]
   41878:	ldr	r1, [r1, #116]	; 0x74
   4187c:	add	r0, r1, r0, lsl #3
   41880:	ldr	r0, [r0, #4]
   41884:	cmp	r0, sl
   41888:	bne	41d64 <__assert_fail@plt+0x2f2b4>
   4188c:	str	r3, [sp, #12]
   41890:	mov	r9, #1
   41894:	str	lr, [sp, #16]
   41898:	ldr	r0, [sp, #8]
   4189c:	add	r0, r1, r0, lsl #3
   418a0:	b	41940 <__assert_fail@plt+0x2ee90>
   418a4:	mov	r0, #4
   418a8:	str	r9, [sp, #36]	; 0x24
   418ac:	mov	r4, r1
   418b0:	str	r9, [sp, #32]
   418b4:	bl	327ac <__assert_fail@plt+0x1fcfc>
   418b8:	cmp	r0, #0
   418bc:	str	r0, [sp, #40]	; 0x28
   418c0:	beq	41bd8 <__assert_fail@plt+0x2f128>
   418c4:	str	r4, [r0]
   418c8:	mov	r0, #0
   418cc:	str	r0, [fp, #-32]	; 0xffffffe0
   418d0:	ldr	r1, [sp, #28]
   418d4:	sub	r0, fp, #32
   418d8:	add	r2, sp, #32
   418dc:	bl	41eb0 <__assert_fail@plt+0x2f400>
   418e0:	ldr	r4, [sp, #24]
   418e4:	ldr	r1, [r4, #100]	; 0x64
   418e8:	str	r0, [r1, r7, lsl #2]
   418ec:	ldr	r0, [sp, #40]	; 0x28
   418f0:	bl	30174 <__assert_fail@plt+0x1d6c4>
   418f4:	ldr	r0, [r4, #100]	; 0x64
   418f8:	ldr	r1, [fp, #-32]	; 0xffffffe0
   418fc:	ldr	r0, [r0, r7, lsl #2]
   41900:	cmp	r1, #0
   41904:	mov	r2, r1
   41908:	movwne	r2, #1
   4190c:	clz	r0, r0
   41910:	lsr	r0, r0, #5
   41914:	ands	r0, r0, r2
   41918:	ldreq	r1, [sp, #20]
   4191c:	str	r1, [sp, #20]
   41920:	ldr	lr, [sp, #16]
   41924:	cmp	r0, #0
   41928:	cmpne	r0, #4
   4192c:	bne	41d4c <__assert_fail@plt+0x2f29c>
   41930:	ldrb	r1, [r8, #20]
   41934:	add	r0, r8, #24
   41938:	cmp	r1, #0
   4193c:	beq	41d60 <__assert_fail@plt+0x2f2b0>
   41940:	mov	r8, r0
   41944:	ldr	r0, [lr, #4]
   41948:	cmp	r0, #1
   4194c:	blt	41930 <__assert_fail@plt+0x2ee80>
   41950:	subs	r6, r0, #1
   41954:	ldr	r2, [r8]
   41958:	ldr	r0, [lr, #8]
   4195c:	mov	r3, #0
   41960:	beq	41988 <__assert_fail@plt+0x2eed8>
   41964:	mov	r1, r6
   41968:	add	r7, r3, r1
   4196c:	lsr	r5, r7, #1
   41970:	ldr	r4, [r0, r5, lsl #2]
   41974:	cmp	r4, r2
   41978:	addlt	r3, r9, r7, lsr #1
   4197c:	movge	r1, r5
   41980:	cmp	r3, r1
   41984:	bcc	41968 <__assert_fail@plt+0x2eeb8>
   41988:	ldr	r1, [r0, r3, lsl #2]
   4198c:	cmp	r1, r2
   41990:	bne	41930 <__assert_fail@plt+0x2ee80>
   41994:	ldr	r3, [r8, #12]
   41998:	ldr	r1, [r8, #8]
   4199c:	add	r3, r3, sl
   419a0:	sub	r7, r3, r1
   419a4:	cmp	r7, sl
   419a8:	bne	41a94 <__assert_fail@plt+0x2efe4>
   419ac:	ldr	r1, [sp, #28]
   419b0:	add	r2, r2, r2, lsl #1
   419b4:	cmp	r6, #0
   419b8:	ldr	r1, [r1, #20]
   419bc:	add	r1, r1, r2, lsl #2
   419c0:	mov	r2, #0
   419c4:	ldr	r1, [r1, #8]
   419c8:	ldr	r4, [r1]
   419cc:	beq	419f0 <__assert_fail@plt+0x2ef40>
   419d0:	add	r1, r2, r6
   419d4:	lsr	r3, r1, #1
   419d8:	ldr	r7, [r0, r3, lsl #2]
   419dc:	cmp	r7, r4
   419e0:	addlt	r2, r9, r1, lsr #1
   419e4:	movge	r6, r3
   419e8:	cmp	r2, r6
   419ec:	bcc	419d0 <__assert_fail@plt+0x2ef20>
   419f0:	ldr	r1, [r0, r2, lsl #2]
   419f4:	mov	r0, #4
   419f8:	cmp	r1, r4
   419fc:	beq	41924 <__assert_fail@plt+0x2ee74>
   41a00:	mov	r0, #4
   41a04:	str	r9, [sp, #36]	; 0x24
   41a08:	str	r9, [sp, #32]
   41a0c:	bl	327ac <__assert_fail@plt+0x1fcfc>
   41a10:	cmp	r0, #0
   41a14:	str	r0, [sp, #40]	; 0x28
   41a18:	beq	41bc4 <__assert_fail@plt+0x2f114>
   41a1c:	mov	r6, #0
   41a20:	str	r4, [r0]
   41a24:	ldr	r0, [sp, #28]
   41a28:	ldr	r2, [sp, #12]
   41a2c:	ldr	r3, [fp, #8]
   41a30:	add	r4, sp, #32
   41a34:	str	r6, [fp, #-32]	; 0xffffffe0
   41a38:	mov	r1, r4
   41a3c:	bl	416b0 <__assert_fail@plt+0x2ec00>
   41a40:	ldr	r5, [sp, #16]
   41a44:	mov	r7, r0
   41a48:	mov	r1, r4
   41a4c:	mov	r0, r5
   41a50:	bl	3e5f8 <__assert_fail@plt+0x2bb48>
   41a54:	mov	r4, r0
   41a58:	ldr	r0, [sp, #40]	; 0x28
   41a5c:	bl	30174 <__assert_fail@plt+0x1d6c4>
   41a60:	orr	r0, r7, r6
   41a64:	mov	lr, r5
   41a68:	orrs	r0, r0, r4
   41a6c:	mov	r0, #2
   41a70:	beq	41924 <__assert_fail@plt+0x2ee74>
   41a74:	cmp	r7, #0
   41a78:	mov	r0, #1
   41a7c:	movne	r4, r7
   41a80:	cmp	r6, #0
   41a84:	movne	r4, r6
   41a88:	str	r4, [fp, #-32]	; 0xffffffe0
   41a8c:	str	r4, [sp, #20]
   41a90:	b	41924 <__assert_fail@plt+0x2ee74>
   41a94:	ldr	r0, [sp, #24]
   41a98:	ldr	r0, [r0, #100]	; 0x64
   41a9c:	ldr	r5, [r0, r7, lsl #2]
   41aa0:	ldr	r0, [sp, #28]
   41aa4:	ldr	r0, [r0, #12]
   41aa8:	cmp	r5, #0
   41aac:	ldr	r1, [r0, r2, lsl #2]
   41ab0:	beq	418a4 <__assert_fail@plt+0x2edf4>
   41ab4:	ldr	ip, [r5, #8]
   41ab8:	cmp	ip, #0
   41abc:	ble	41b7c <__assert_fail@plt+0x2f0cc>
   41ac0:	ldr	r0, [r5, #12]
   41ac4:	subs	r3, ip, #1
   41ac8:	mov	r2, #0
   41acc:	str	r7, [sp, #4]
   41ad0:	beq	41af4 <__assert_fail@plt+0x2f044>
   41ad4:	add	r6, r2, r3
   41ad8:	lsr	r7, r6, #1
   41adc:	ldr	r4, [r0, r7, lsl #2]
   41ae0:	cmp	r4, r1
   41ae4:	addlt	r2, r9, r6, lsr #1
   41ae8:	movge	r3, r7
   41aec:	cmp	r2, r3
   41af0:	bcc	41ad4 <__assert_fail@plt+0x2f024>
   41af4:	ldr	r2, [r0, r2, lsl #2]
   41af8:	mov	r0, #4
   41afc:	cmp	r2, r1
   41b00:	beq	41924 <__assert_fail@plt+0x2ee74>
   41b04:	ldr	r7, [sp, #4]
   41b08:	mov	r4, r1
   41b0c:	cmp	ip, #1
   41b10:	str	ip, [sp, #36]	; 0x24
   41b14:	blt	41b84 <__assert_fail@plt+0x2f0d4>
   41b18:	lsl	r0, ip, #2
   41b1c:	str	ip, [sp, #32]
   41b20:	bl	327ac <__assert_fail@plt+0x1fcfc>
   41b24:	cmp	r0, #0
   41b28:	str	r0, [sp, #40]	; 0x28
   41b2c:	beq	41c2c <__assert_fail@plt+0x2f17c>
   41b30:	ldr	r2, [r5, #8]
   41b34:	ldr	r1, [r5, #12]
   41b38:	mov	r5, r0
   41b3c:	lsl	r2, r2, #2
   41b40:	bl	124e0 <memcpy@plt>
   41b44:	ldr	r1, [sp, #32]
   41b48:	mov	r6, #0
   41b4c:	str	r6, [fp, #-32]	; 0xffffffe0
   41b50:	cmp	r1, #0
   41b54:	beq	41b98 <__assert_fail@plt+0x2f0e8>
   41b58:	ldr	r0, [sp, #36]	; 0x24
   41b5c:	cmp	r0, #0
   41b60:	bne	41c40 <__assert_fail@plt+0x2f190>
   41b64:	str	r4, [r5]
   41b68:	str	r9, [sp, #36]	; 0x24
   41b6c:	mov	r6, #0
   41b70:	cmp	r6, #0
   41b74:	beq	418d0 <__assert_fail@plt+0x2ee20>
   41b78:	b	41c04 <__assert_fail@plt+0x2f154>
   41b7c:	mov	r4, r1
   41b80:	str	ip, [sp, #36]	; 0x24
   41b84:	mov	r6, #0
   41b88:	str	r6, [sp, #36]	; 0x24
   41b8c:	str	r6, [sp, #32]
   41b90:	str	r6, [sp, #40]	; 0x28
   41b94:	str	r6, [fp, #-32]	; 0xffffffe0
   41b98:	mov	r0, #4
   41b9c:	str	r9, [sp, #36]	; 0x24
   41ba0:	str	r9, [sp, #32]
   41ba4:	bl	327ac <__assert_fail@plt+0x1fcfc>
   41ba8:	cmp	r0, #0
   41bac:	str	r0, [sp, #40]	; 0x28
   41bb0:	beq	41bf8 <__assert_fail@plt+0x2f148>
   41bb4:	str	r4, [r0]
   41bb8:	cmp	r6, #0
   41bbc:	beq	418d0 <__assert_fail@plt+0x2ee20>
   41bc0:	b	41c04 <__assert_fail@plt+0x2f154>
   41bc4:	mov	r0, #0
   41bc8:	mov	r6, #12
   41bcc:	str	r0, [sp, #32]
   41bd0:	str	r0, [sp, #36]	; 0x24
   41bd4:	b	41a24 <__assert_fail@plt+0x2ef74>
   41bd8:	mov	r0, #0
   41bdc:	mov	r1, #12
   41be0:	str	r0, [sp, #32]
   41be4:	str	r0, [sp, #36]	; 0x24
   41be8:	mov	r0, #12
   41bec:	str	r1, [fp, #-32]	; 0xffffffe0
   41bf0:	str	r0, [sp, #20]
   41bf4:	b	41c24 <__assert_fail@plt+0x2f174>
   41bf8:	mov	r0, #0
   41bfc:	str	r0, [sp, #32]
   41c00:	str	r0, [sp, #36]	; 0x24
   41c04:	clz	r0, r6
   41c08:	lsr	r4, r0, #5
   41c0c:	ldr	r0, [sp, #40]	; 0x28
   41c10:	bl	30174 <__assert_fail@plt+0x1d6c4>
   41c14:	cmp	r4, #0
   41c18:	movwne	r6, #12
   41c1c:	str	r6, [sp, #20]
   41c20:	str	r6, [fp, #-32]	; 0xffffffe0
   41c24:	mov	r0, #1
   41c28:	b	41920 <__assert_fail@plt+0x2ee70>
   41c2c:	mov	r0, #0
   41c30:	mov	r6, #12
   41c34:	str	r0, [sp, #32]
   41c38:	str	r0, [sp, #36]	; 0x24
   41c3c:	b	41b94 <__assert_fail@plt+0x2f0e4>
   41c40:	cmp	r1, r0
   41c44:	bne	41c70 <__assert_fail@plt+0x2f1c0>
   41c48:	lsl	r0, r1, #1
   41c4c:	lsl	r1, r1, #3
   41c50:	str	r0, [sp, #32]
   41c54:	mov	r0, r5
   41c58:	bl	33500 <__assert_fail@plt+0x20a50>
   41c5c:	cmp	r0, #0
   41c60:	beq	41d44 <__assert_fail@plt+0x2f294>
   41c64:	str	r0, [sp, #40]	; 0x28
   41c68:	mov	r5, r0
   41c6c:	ldr	r0, [sp, #36]	; 0x24
   41c70:	ldr	r1, [r5]
   41c74:	cmp	r1, r4
   41c78:	ble	41cec <__assert_fail@plt+0x2f23c>
   41c7c:	cmp	r0, #1
   41c80:	blt	41d20 <__assert_fail@plt+0x2f270>
   41c84:	ands	r2, r0, #3
   41c88:	sub	r1, r0, #1
   41c8c:	beq	41cb0 <__assert_fail@plt+0x2f200>
   41c90:	add	r6, r5, r0, lsl #2
   41c94:	mov	r3, r6
   41c98:	ldr	r7, [r3, #-4]!
   41c9c:	subs	r2, r2, #1
   41ca0:	sub	r0, r0, #1
   41ca4:	str	r7, [r6]
   41ca8:	mov	r6, r3
   41cac:	bne	41c98 <__assert_fail@plt+0x2f1e8>
   41cb0:	cmp	r1, #3
   41cb4:	bcc	41ce4 <__assert_fail@plt+0x2f234>
   41cb8:	add	r1, r5, r0, lsl #2
   41cbc:	sub	r1, r1, #8
   41cc0:	ldr	r6, [r1, #4]
   41cc4:	ldmda	r1, {r2, r3, r7}
   41cc8:	sub	ip, r1, #4
   41ccc:	sub	r0, r0, #4
   41cd0:	cmp	r0, #0
   41cd4:	stm	ip, {r2, r3, r7}
   41cd8:	str	r6, [r1, #8]
   41cdc:	sub	r1, r1, #16
   41ce0:	bgt	41cc0 <__assert_fail@plt+0x2f210>
   41ce4:	mov	r0, #0
   41ce8:	b	41d20 <__assert_fail@plt+0x2f270>
   41cec:	add	r1, r5, r0, lsl #2
   41cf0:	ldr	r2, [r1, #-4]
   41cf4:	cmp	r2, r4
   41cf8:	ble	41d20 <__assert_fail@plt+0x2f270>
   41cfc:	sub	r0, r0, #2
   41d00:	mov	r3, r4
   41d04:	str	r2, [r1]
   41d08:	sub	r0, r0, #1
   41d0c:	ldr	r2, [r1, #-8]
   41d10:	sub	r1, r1, #4
   41d14:	cmp	r2, r3
   41d18:	bgt	41d04 <__assert_fail@plt+0x2f254>
   41d1c:	add	r0, r0, #2
   41d20:	str	r4, [r5, r0, lsl #2]
   41d24:	ldr	r7, [sp, #4]
   41d28:	mov	r6, #0
   41d2c:	ldr	r0, [sp, #36]	; 0x24
   41d30:	add	r0, r0, #1
   41d34:	str	r0, [sp, #36]	; 0x24
   41d38:	cmp	r6, #0
   41d3c:	beq	418d0 <__assert_fail@plt+0x2ee20>
   41d40:	b	41c04 <__assert_fail@plt+0x2f154>
   41d44:	mov	r6, #0
   41d48:	b	41c04 <__assert_fail@plt+0x2f154>
   41d4c:	cmp	r0, #2
   41d50:	bne	41d70 <__assert_fail@plt+0x2f2c0>
   41d54:	ldr	r0, [sp, #24]
   41d58:	ldr	r1, [r0, #116]	; 0x74
   41d5c:	b	41898 <__assert_fail@plt+0x2ede8>
   41d60:	mov	r8, #0
   41d64:	mov	r0, r8
   41d68:	sub	sp, fp, #28
   41d6c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   41d70:	ldr	r8, [sp, #20]
   41d74:	b	41d64 <__assert_fail@plt+0x2f2b4>
   41d78:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   41d7c:	add	fp, sp, #28
   41d80:	sub	sp, sp, #4
   41d84:	ldr	r4, [fp, #8]
   41d88:	mov	r9, r3
   41d8c:	mov	r7, r2
   41d90:	mov	r8, r1
   41d94:	mov	sl, r0
   41d98:	mov	r5, #1
   41d9c:	b	41db4 <__assert_fail@plt+0x2f304>
   41da0:	cmp	r2, #0
   41da4:	beq	41e98 <__assert_fail@plt+0x2f3e8>
   41da8:	add	r0, r0, r7, lsl #2
   41dac:	ldr	r0, [r0, #8]
   41db0:	ldr	r7, [r0]
   41db4:	ldr	r0, [r8, #4]
   41db8:	cmp	r0, #1
   41dbc:	blt	41e04 <__assert_fail@plt+0x2f354>
   41dc0:	subs	r2, r0, #1
   41dc4:	ldr	r0, [r8, #8]
   41dc8:	mov	ip, r4
   41dcc:	mov	r1, #0
   41dd0:	beq	41df4 <__assert_fail@plt+0x2f344>
   41dd4:	add	r3, r1, r2
   41dd8:	lsr	r6, r3, #1
   41ddc:	ldr	r4, [r0, r6, lsl #2]
   41de0:	cmp	r4, r7
   41de4:	addlt	r1, r5, r3, lsr #1
   41de8:	movge	r2, r6
   41dec:	cmp	r1, r2
   41df0:	bcc	41dd4 <__assert_fail@plt+0x2f324>
   41df4:	ldr	r0, [r0, r1, lsl #2]
   41df8:	mov	r4, ip
   41dfc:	cmp	r0, r7
   41e00:	beq	41e98 <__assert_fail@plt+0x2f3e8>
   41e04:	ldr	r0, [sl]
   41e08:	add	r1, r0, r7, lsl #3
   41e0c:	ldrb	r1, [r1, #4]
   41e10:	cmp	r1, r4
   41e14:	bne	41e24 <__assert_fail@plt+0x2f374>
   41e18:	ldr	r0, [r0, r7, lsl #3]
   41e1c:	cmp	r0, r9
   41e20:	beq	41e7c <__assert_fail@plt+0x2f3cc>
   41e24:	mov	r0, r8
   41e28:	mov	r1, r7
   41e2c:	bl	3e784 <__assert_fail@plt+0x2bcd4>
   41e30:	cmp	r0, #0
   41e34:	beq	41ea4 <__assert_fail@plt+0x2f3f4>
   41e38:	ldr	r0, [sl, #20]
   41e3c:	add	r7, r7, r7, lsl #1
   41e40:	add	r1, r0, r7, lsl #2
   41e44:	ldr	r2, [r1, #4]
   41e48:	cmp	r2, #2
   41e4c:	bne	41da0 <__assert_fail@plt+0x2f2f0>
   41e50:	ldr	r0, [r1, #8]
   41e54:	mov	r1, r8
   41e58:	mov	r3, r9
   41e5c:	ldr	r2, [r0, #4]
   41e60:	mov	r0, sl
   41e64:	str	r4, [sp]
   41e68:	bl	41d78 <__assert_fail@plt+0x2f2c8>
   41e6c:	cmp	r0, #0
   41e70:	bne	41e9c <__assert_fail@plt+0x2f3ec>
   41e74:	ldr	r0, [sl, #20]
   41e78:	b	41da8 <__assert_fail@plt+0x2f2f8>
   41e7c:	cmp	r4, #9
   41e80:	bne	41e98 <__assert_fail@plt+0x2f3e8>
   41e84:	mov	r0, r8
   41e88:	mov	r1, r7
   41e8c:	bl	3e784 <__assert_fail@plt+0x2bcd4>
   41e90:	cmp	r0, #0
   41e94:	beq	41ea4 <__assert_fail@plt+0x2f3f4>
   41e98:	mov	r0, #0
   41e9c:	sub	sp, fp, #28
   41ea0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   41ea4:	mov	r0, #12
   41ea8:	sub	sp, fp, #28
   41eac:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   41eb0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   41eb4:	add	fp, sp, #28
   41eb8:	sub	sp, sp, #4
   41ebc:	ldr	r9, [r2, #4]
   41ec0:	cmp	r9, #0
   41ec4:	beq	42188 <__assert_fail@plt+0x2f6d8>
   41ec8:	mov	r6, r2
   41ecc:	mov	r8, r1
   41ed0:	cmp	r9, #1
   41ed4:	mov	r7, r9
   41ed8:	blt	41fc4 <__assert_fail@plt+0x2f514>
   41edc:	ldr	ip, [r6, #8]
   41ee0:	mov	sl, #0
   41ee4:	cmp	r9, #4
   41ee8:	mov	r7, r9
   41eec:	bcc	41fac <__assert_fail@plt+0x2f4fc>
   41ef0:	mov	r3, #0
   41ef4:	bic	sl, r9, #3
   41ef8:	mov	r1, #1
   41efc:	str	r8, [sp]
   41f00:	vdup.32	q8, r3
   41f04:	sub	r4, sl, #4
   41f08:	add	r1, r1, r4, lsr #2
   41f0c:	cmp	r4, #12
   41f10:	and	lr, r1, #3
   41f14:	vmov.32	d16[0], r9
   41f18:	bcc	41f6c <__assert_fail@plt+0x2f4bc>
   41f1c:	sub	r5, r1, lr
   41f20:	mov	r3, #0
   41f24:	mov	r4, #64	; 0x40
   41f28:	mov	r7, ip
   41f2c:	mov	r1, ip
   41f30:	vld1.32	{d18-d19}, [r1], r4
   41f34:	add	r8, r7, #16
   41f38:	add	r2, r7, #32
   41f3c:	subs	r5, r5, #4
   41f40:	add	r3, r3, #16
   41f44:	vld1.32	{d20-d21}, [r8]
   41f48:	vadd.i32	q8, q9, q8
   41f4c:	vld1.32	{d18-d19}, [r2]
   41f50:	add	r2, r7, #48	; 0x30
   41f54:	mov	r7, r1
   41f58:	vadd.i32	q8, q10, q8
   41f5c:	vld1.32	{d20-d21}, [r2]
   41f60:	vadd.i32	q8, q9, q8
   41f64:	vadd.i32	q8, q10, q8
   41f68:	bne	41f30 <__assert_fail@plt+0x2f480>
   41f6c:	cmp	lr, #0
   41f70:	beq	41f8c <__assert_fail@plt+0x2f4dc>
   41f74:	add	r1, ip, r3, lsl #2
   41f78:	rsb	r3, lr, #0
   41f7c:	vld1.32	{d18-d19}, [r1]!
   41f80:	adds	r3, r3, #1
   41f84:	vadd.i32	q8, q9, q8
   41f88:	bcc	41f7c <__assert_fail@plt+0x2f4cc>
   41f8c:	vext.8	q9, q8, q8, #8
   41f90:	ldr	r8, [sp]
   41f94:	cmp	r9, sl
   41f98:	vadd.i32	q8, q8, q9
   41f9c:	vdup.32	q9, d16[1]
   41fa0:	vadd.i32	q8, q8, q9
   41fa4:	vmov.32	r7, d16[0]
   41fa8:	beq	41fc4 <__assert_fail@plt+0x2f514>
   41fac:	add	r1, ip, sl, lsl #2
   41fb0:	sub	r2, r9, sl
   41fb4:	ldr	r3, [r1], #4
   41fb8:	subs	r2, r2, #1
   41fbc:	add	r7, r3, r7
   41fc0:	bne	41fb4 <__assert_fail@plt+0x2f504>
   41fc4:	ldr	r1, [r8, #68]	; 0x44
   41fc8:	ldr	r2, [r8, #32]
   41fcc:	str	r0, [sp]
   41fd0:	and	r1, r1, r7
   41fd4:	add	r3, r1, r1, lsl #1
   41fd8:	ldr	r1, [r2, r3, lsl #2]
   41fdc:	cmp	r1, #1
   41fe0:	blt	4205c <__assert_fail@plt+0x2f5ac>
   41fe4:	add	r2, r2, r3, lsl #2
   41fe8:	sub	ip, r9, #1
   41fec:	mov	r5, #0
   41ff0:	ldr	lr, [r2, #8]
   41ff4:	cmp	r6, #0
   41ff8:	bne	42010 <__assert_fail@plt+0x2f560>
   41ffc:	add	r5, r5, #1
   42000:	cmp	r5, r1
   42004:	bge	4205c <__assert_fail@plt+0x2f5ac>
   42008:	cmp	r6, #0
   4200c:	beq	41ffc <__assert_fail@plt+0x2f54c>
   42010:	ldr	r4, [lr, r5, lsl #2]
   42014:	ldr	r3, [r4]
   42018:	cmp	r7, r3
   4201c:	bne	41ffc <__assert_fail@plt+0x2f54c>
   42020:	ldr	r3, [r4, #8]
   42024:	cmp	r3, r9
   42028:	bne	41ffc <__assert_fail@plt+0x2f54c>
   4202c:	mov	r3, ip
   42030:	add	r0, r3, #1
   42034:	cmp	r0, #1
   42038:	blt	4217c <__assert_fail@plt+0x2f6cc>
   4203c:	ldr	r0, [r6, #8]
   42040:	ldr	r2, [r4, #12]
   42044:	ldr	r0, [r0, r3, lsl #2]
   42048:	ldr	r2, [r2, r3, lsl #2]
   4204c:	sub	r3, r3, #1
   42050:	cmp	r2, r0
   42054:	beq	42030 <__assert_fail@plt+0x2f580>
   42058:	b	41ffc <__assert_fail@plt+0x2f54c>
   4205c:	mov	r0, #56	; 0x38
   42060:	mov	r1, #1
   42064:	bl	2fb8c <__assert_fail@plt+0x1d0dc>
   42068:	cmp	r0, #0
   4206c:	beq	421b4 <__assert_fail@plt+0x2f704>
   42070:	mov	r4, r0
   42074:	ldr	r0, [r6, #4]
   42078:	add	sl, r4, #4
   4207c:	cmp	r0, #1
   42080:	str	r0, [r4, #8]
   42084:	blt	4214c <__assert_fail@plt+0x2f69c>
   42088:	str	r0, [r4, #4]
   4208c:	lsl	r0, r0, #2
   42090:	bl	327ac <__assert_fail@plt+0x1fcfc>
   42094:	cmp	r0, #0
   42098:	str	r0, [r4, #12]
   4209c:	beq	421a0 <__assert_fail@plt+0x2f6f0>
   420a0:	ldmib	r6, {r5, r6}
   420a4:	mov	r1, r6
   420a8:	mov	r9, r8
   420ac:	lsl	r2, r5, #2
   420b0:	bl	124e0 <memcpy@plt>
   420b4:	cmp	r5, #1
   420b8:	str	sl, [r4, #40]	; 0x28
   420bc:	blt	42164 <__assert_fail@plt+0x2f6b4>
   420c0:	movw	ip, #65280	; 0xff00
   420c4:	ldr	sl, [r9]
   420c8:	mov	lr, #32
   420cc:	movt	ip, #3
   420d0:	add	r8, ip, #255	; 0xff
   420d4:	b	420f8 <__assert_fail@plt+0x2f648>
   420d8:	ldr	r0, [r1]
   420dc:	tst	r0, ip
   420e0:	beq	420ec <__assert_fail@plt+0x2f63c>
   420e4:	orr	r0, r3, #128	; 0x80
   420e8:	strb	r0, [r4, #52]	; 0x34
   420ec:	add	r6, r6, #4
   420f0:	subs	r5, r5, #1
   420f4:	beq	42164 <__assert_fail@plt+0x2f6b4>
   420f8:	ldr	r0, [r6]
   420fc:	add	r1, sl, r0, lsl #3
   42100:	ldr	r0, [r1, #4]!
   42104:	and	r3, r0, r8
   42108:	cmp	r3, #1
   4210c:	beq	420ec <__assert_fail@plt+0x2f63c>
   42110:	ldrb	r2, [r4, #52]	; 0x34
   42114:	and	r3, lr, r0, lsr #15
   42118:	uxtb	r0, r0
   4211c:	cmp	r0, #12
   42120:	orr	r3, r2, r3
   42124:	strb	r3, [r4, #52]	; 0x34
   42128:	beq	420e4 <__assert_fail@plt+0x2f634>
   4212c:	cmp	r0, #4
   42130:	beq	42144 <__assert_fail@plt+0x2f694>
   42134:	cmp	r0, #2
   42138:	bne	420d8 <__assert_fail@plt+0x2f628>
   4213c:	orr	r0, r3, #16
   42140:	b	420e8 <__assert_fail@plt+0x2f638>
   42144:	orr	r0, r3, #64	; 0x40
   42148:	b	420e8 <__assert_fail@plt+0x2f638>
   4214c:	mov	r0, #0
   42150:	mov	r9, r8
   42154:	str	r0, [sl]
   42158:	str	r0, [sl, #4]
   4215c:	str	r0, [sl, #8]
   42160:	str	sl, [r4, #40]	; 0x28
   42164:	mov	r0, r9
   42168:	mov	r1, r4
   4216c:	mov	r2, r7
   42170:	bl	3eda8 <__assert_fail@plt+0x2c2f8>
   42174:	cmp	r0, #0
   42178:	bne	42194 <__assert_fail@plt+0x2f6e4>
   4217c:	mov	r0, r4
   42180:	sub	sp, fp, #28
   42184:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   42188:	mov	r4, #0
   4218c:	str	r4, [r0]
   42190:	b	4217c <__assert_fail@plt+0x2f6cc>
   42194:	mov	r0, r4
   42198:	bl	38938 <__assert_fail@plt+0x25e88>
   4219c:	b	421b4 <__assert_fail@plt+0x2f704>
   421a0:	mov	r0, #0
   421a4:	str	r0, [r4, #4]
   421a8:	str	r0, [r4, #8]
   421ac:	mov	r0, r4
   421b0:	bl	30174 <__assert_fail@plt+0x1d6c4>
   421b4:	ldr	r1, [sp]
   421b8:	mov	r0, #12
   421bc:	mov	r4, #0
   421c0:	str	r0, [r1]
   421c4:	b	4217c <__assert_fail@plt+0x2f6cc>
   421c8:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   421cc:	add	fp, sp, #24
   421d0:	ldr	lr, [r0]
   421d4:	add	r7, lr, r1, lsl #3
   421d8:	ldrb	r9, [r7, #4]
   421dc:	cmp	r9, #7
   421e0:	beq	423b8 <__assert_fail@plt+0x2f908>
   421e4:	ldr	ip, [r2, #80]	; 0x50
   421e8:	mov	r6, #1
   421ec:	cmp	ip, #1
   421f0:	beq	42230 <__assert_fail@plt+0x2f780>
   421f4:	ldr	r5, [r2, #28]
   421f8:	add	r7, r3, #1
   421fc:	cmp	r7, r5
   42200:	bge	42230 <__assert_fail@plt+0x2f780>
   42204:	ldr	r6, [r2, #8]
   42208:	sub	r5, r5, r3
   4220c:	add	r7, r6, r3, lsl #2
   42210:	mov	r6, #1
   42214:	ldr	r4, [r7, r6, lsl #2]
   42218:	cmn	r4, #1
   4221c:	bne	42230 <__assert_fail@plt+0x2f780>
   42220:	add	r6, r6, #1
   42224:	cmp	r5, r6
   42228:	bne	42214 <__assert_fail@plt+0x2f764>
   4222c:	mov	r6, r5
   42230:	mov	r8, #0
   42234:	cmp	r9, #5
   42238:	bne	42280 <__assert_fail@plt+0x2f7d0>
   4223c:	cmp	r6, #2
   42240:	blt	423a8 <__assert_fail@plt+0x2f8f8>
   42244:	ldr	r0, [r0, #128]	; 0x80
   42248:	tst	r0, #64	; 0x40
   4224c:	bne	42260 <__assert_fail@plt+0x2f7b0>
   42250:	ldr	r1, [r2, #4]
   42254:	ldrb	r1, [r1, r3]
   42258:	cmp	r1, #10
   4225c:	beq	423a8 <__assert_fail@plt+0x2f8f8>
   42260:	tst	r0, #128	; 0x80
   42264:	beq	423a4 <__assert_fail@plt+0x2f8f4>
   42268:	ldr	r0, [r2, #4]
   4226c:	ldrb	r0, [r0, r3]
   42270:	cmp	r0, #0
   42274:	movne	r8, r6
   42278:	mov	r0, r8
   4227c:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   42280:	cmp	r9, #6
   42284:	bne	423a8 <__assert_fail@plt+0x2f8f8>
   42288:	cmp	r6, #2
   4228c:	blt	423a8 <__assert_fail@plt+0x2f8f8>
   42290:	ldr	r7, [lr, r1, lsl #3]
   42294:	ldr	r0, [r7, #32]
   42298:	cmp	r0, #0
   4229c:	bne	422b8 <__assert_fail@plt+0x2f808>
   422a0:	ldr	r1, [r7, #36]	; 0x24
   422a4:	cmp	r1, #0
   422a8:	bne	422b8 <__assert_fail@plt+0x2f808>
   422ac:	ldr	r1, [r7, #20]
   422b0:	cmp	r1, #0
   422b4:	beq	423b0 <__assert_fail@plt+0x2f900>
   422b8:	cmp	ip, #1
   422bc:	bne	422cc <__assert_fail@plt+0x2f81c>
   422c0:	ldr	r1, [r2, #4]
   422c4:	ldrb	r5, [r1, r3]
   422c8:	b	422d4 <__assert_fail@plt+0x2f824>
   422cc:	ldr	r1, [r2, #8]
   422d0:	ldr	r5, [r1, r3, lsl #2]
   422d4:	ldr	r1, [r7, #20]
   422d8:	cmp	r1, #1
   422dc:	blt	42300 <__assert_fail@plt+0x2f850>
   422e0:	ldr	r2, [r7]
   422e4:	mov	r3, #0
   422e8:	ldr	r4, [r2, r3, lsl #2]
   422ec:	cmp	r5, r4
   422f0:	beq	42378 <__assert_fail@plt+0x2f8c8>
   422f4:	add	r3, r3, #1
   422f8:	cmp	r3, r1
   422fc:	blt	422e8 <__assert_fail@plt+0x2f838>
   42300:	ldr	r1, [r7, #36]	; 0x24
   42304:	cmp	r1, #1
   42308:	blt	4233c <__assert_fail@plt+0x2f88c>
   4230c:	mov	r4, #0
   42310:	ldr	r0, [r7, #12]
   42314:	ldr	r1, [r0, r4, lsl #2]
   42318:	mov	r0, r5
   4231c:	bl	123f0 <iswctype@plt>
   42320:	cmp	r0, #0
   42324:	bne	42378 <__assert_fail@plt+0x2f8c8>
   42328:	ldr	r0, [r7, #36]	; 0x24
   4232c:	add	r4, r4, #1
   42330:	cmp	r4, r0
   42334:	blt	42310 <__assert_fail@plt+0x2f860>
   42338:	ldr	r0, [r7, #32]
   4233c:	cmp	r0, #1
   42340:	blt	42380 <__assert_fail@plt+0x2f8d0>
   42344:	ldr	r1, [r7, #4]
   42348:	mov	r2, #0
   4234c:	b	4235c <__assert_fail@plt+0x2f8ac>
   42350:	add	r2, r2, #1
   42354:	cmp	r2, r0
   42358:	bge	42380 <__assert_fail@plt+0x2f8d0>
   4235c:	ldr	r3, [r1, r2, lsl #2]
   42360:	cmp	r3, r5
   42364:	bhi	42350 <__assert_fail@plt+0x2f8a0>
   42368:	ldr	r3, [r7, #8]
   4236c:	ldr	r3, [r3, r2, lsl #2]
   42370:	cmp	r5, r3
   42374:	bhi	42350 <__assert_fail@plt+0x2f8a0>
   42378:	mov	r0, r6
   4237c:	b	42384 <__assert_fail@plt+0x2f8d4>
   42380:	mov	r0, #0
   42384:	ldrb	r1, [r7, #16]
   42388:	tst	r1, #1
   4238c:	bne	42394 <__assert_fail@plt+0x2f8e4>
   42390:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   42394:	cmp	r0, #0
   42398:	bgt	423a8 <__assert_fail@plt+0x2f8f8>
   4239c:	cmp	r6, #1
   423a0:	movle	r6, #1
   423a4:	mov	r8, r6
   423a8:	mov	r0, r8
   423ac:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   423b0:	mov	r5, #0
   423b4:	b	422d4 <__assert_fail@plt+0x2f824>
   423b8:	ldr	r0, [r2, #4]
   423bc:	mov	r8, #0
   423c0:	ldrb	r6, [r0, r3]
   423c4:	cmp	r6, #194	; 0xc2
   423c8:	bcc	423a8 <__assert_fail@plt+0x2f8f8>
   423cc:	ldr	r2, [r2, #48]	; 0x30
   423d0:	add	r1, r3, #2
   423d4:	cmp	r1, r2
   423d8:	bgt	423a8 <__assert_fail@plt+0x2f8f8>
   423dc:	add	r1, r3, r0
   423e0:	cmp	r6, #223	; 0xdf
   423e4:	ldrb	r7, [r1, #1]
   423e8:	bhi	42410 <__assert_fail@plt+0x2f960>
   423ec:	cmp	r7, #192	; 0xc0
   423f0:	mov	r0, #0
   423f4:	movwcc	r0, #1
   423f8:	lsl	r8, r0, #1
   423fc:	sxtb	r0, r7
   42400:	cmn	r0, #1
   42404:	movwgt	r8, #0
   42408:	mov	r0, r8
   4240c:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   42410:	cmp	r6, #239	; 0xef
   42414:	bhi	42430 <__assert_fail@plt+0x2f980>
   42418:	mov	r0, #3
   4241c:	cmp	r6, #224	; 0xe0
   42420:	bne	4248c <__assert_fail@plt+0x2f9dc>
   42424:	cmp	r7, #160	; 0xa0
   42428:	bcc	423a8 <__assert_fail@plt+0x2f8f8>
   4242c:	b	4248c <__assert_fail@plt+0x2f9dc>
   42430:	cmp	r6, #247	; 0xf7
   42434:	bhi	42450 <__assert_fail@plt+0x2f9a0>
   42438:	mov	r0, #4
   4243c:	cmp	r6, #240	; 0xf0
   42440:	bne	4248c <__assert_fail@plt+0x2f9dc>
   42444:	cmp	r7, #144	; 0x90
   42448:	bcc	423a8 <__assert_fail@plt+0x2f8f8>
   4244c:	b	4248c <__assert_fail@plt+0x2f9dc>
   42450:	cmp	r6, #251	; 0xfb
   42454:	bhi	42470 <__assert_fail@plt+0x2f9c0>
   42458:	mov	r0, #5
   4245c:	cmp	r6, #248	; 0xf8
   42460:	bne	4248c <__assert_fail@plt+0x2f9dc>
   42464:	cmp	r7, #136	; 0x88
   42468:	bcc	423a8 <__assert_fail@plt+0x2f8f8>
   4246c:	b	4248c <__assert_fail@plt+0x2f9dc>
   42470:	cmp	r6, #253	; 0xfd
   42474:	bhi	423a8 <__assert_fail@plt+0x2f8f8>
   42478:	mov	r0, #6
   4247c:	cmp	r6, #252	; 0xfc
   42480:	bne	4248c <__assert_fail@plt+0x2f9dc>
   42484:	cmp	r7, #132	; 0x84
   42488:	bcc	423a8 <__assert_fail@plt+0x2f8f8>
   4248c:	add	r3, r0, r3
   42490:	cmp	r3, r2
   42494:	bgt	423a8 <__assert_fail@plt+0x2f8f8>
   42498:	ldrb	r2, [r1, #1]
   4249c:	sxtb	r3, r2
   424a0:	cmn	r3, #1
   424a4:	bgt	423a8 <__assert_fail@plt+0x2f8f8>
   424a8:	cmp	r2, #191	; 0xbf
   424ac:	bhi	423a8 <__assert_fail@plt+0x2f8f8>
   424b0:	ldrb	r2, [r1, #2]
   424b4:	sxtb	r3, r2
   424b8:	cmn	r3, #1
   424bc:	bgt	423a8 <__assert_fail@plt+0x2f8f8>
   424c0:	cmp	r2, #191	; 0xbf
   424c4:	bhi	423a8 <__assert_fail@plt+0x2f8f8>
   424c8:	cmp	r0, #3
   424cc:	beq	42390 <__assert_fail@plt+0x2f8e0>
   424d0:	ldrb	r2, [r1, #3]
   424d4:	sxtb	r3, r2
   424d8:	cmn	r3, #1
   424dc:	bgt	423a8 <__assert_fail@plt+0x2f8f8>
   424e0:	cmp	r2, #191	; 0xbf
   424e4:	bhi	423a8 <__assert_fail@plt+0x2f8f8>
   424e8:	cmp	r0, #4
   424ec:	beq	42390 <__assert_fail@plt+0x2f8e0>
   424f0:	ldrb	r2, [r1, #4]
   424f4:	sxtb	r3, r2
   424f8:	cmn	r3, #1
   424fc:	bgt	423a8 <__assert_fail@plt+0x2f8f8>
   42500:	cmp	r2, #191	; 0xbf
   42504:	bhi	423a8 <__assert_fail@plt+0x2f8f8>
   42508:	cmp	r0, #5
   4250c:	beq	42390 <__assert_fail@plt+0x2f8e0>
   42510:	ldrsb	r1, [r1, #5]
   42514:	uxtb	r2, r1
   42518:	cmp	r2, #191	; 0xbf
   4251c:	movwhi	r0, #0
   42520:	cmn	r1, #1
   42524:	movwgt	r0, #0
   42528:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   4252c:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   42530:	add	fp, sp, #24
   42534:	ldr	r4, [r1, #4]
   42538:	mov	r6, r0
   4253c:	mvn	r0, #0
   42540:	mov	r8, #0
   42544:	uxtab	r3, r0, r4
   42548:	cmp	r3, #6
   4254c:	bhi	426e8 <__assert_fail@plt+0x2fc38>
   42550:	ldr	r0, [r6, #4]
   42554:	mov	r9, r1
   42558:	ldrb	r1, [r0, r2]
   4255c:	add	r7, pc, #4
   42560:	sxtb	r0, r1
   42564:	ldr	pc, [r7, r3, lsl #2]
   42568:	andeq	r2, r4, r4, lsl #11
   4256c:	andeq	r2, r4, r8, ror #13
   42570:	muleq	r4, r8, r5
   42574:	andeq	r2, r4, r8, ror #13
   42578:	andeq	r2, r4, r0, asr #11
   4257c:	andeq	r2, r4, r8, ror #13
   42580:			; <UNDEFINED> instruction: 0x000425b8
   42584:	ldrb	r3, [r9]
   42588:	uxtb	r7, r0
   4258c:	cmp	r3, r7
   42590:	beq	425f4 <__assert_fail@plt+0x2fb44>
   42594:	b	426e8 <__assert_fail@plt+0x2fc38>
   42598:	ldr	r3, [r9]
   4259c:	ubfx	r7, r1, #5, #3
   425a0:	mov	r5, #1
   425a4:	ldr	r3, [r3, r7, lsl #2]
   425a8:	and	r7, r1, #31
   425ac:	tst	r3, r5, lsl r7
   425b0:	bne	425f4 <__assert_fail@plt+0x2fb44>
   425b4:	b	426e8 <__assert_fail@plt+0x2fc38>
   425b8:	cmp	r0, #0
   425bc:	bmi	426e8 <__assert_fail@plt+0x2fc38>
   425c0:	cmp	r1, #0
   425c4:	beq	425e4 <__assert_fail@plt+0x2fb34>
   425c8:	cmp	r1, #10
   425cc:	bne	425f4 <__assert_fail@plt+0x2fb44>
   425d0:	ldr	r3, [r6, #84]	; 0x54
   425d4:	ldrb	r3, [r3, #128]	; 0x80
   425d8:	tst	r3, #64	; 0x40
   425dc:	beq	426e8 <__assert_fail@plt+0x2fc38>
   425e0:	b	425f4 <__assert_fail@plt+0x2fb44>
   425e4:	ldr	r3, [r6, #84]	; 0x54
   425e8:	ldrb	r3, [r3, #128]	; 0x80
   425ec:	tst	r3, #128	; 0x80
   425f0:	bne	426e8 <__assert_fail@plt+0x2fc38>
   425f4:	movw	r3, #65280	; 0xff00
   425f8:	movt	r3, #3
   425fc:	tst	r4, r3
   42600:	beq	42648 <__assert_fail@plt+0x2fb98>
   42604:	cmn	r2, #1
   42608:	ble	42640 <__assert_fail@plt+0x2fb90>
   4260c:	ldr	r3, [r6, #48]	; 0x30
   42610:	cmp	r3, r2
   42614:	beq	42708 <__assert_fail@plt+0x2fc58>
   42618:	ldr	r3, [r6, #80]	; 0x50
   4261c:	cmp	r3, #2
   42620:	blt	42654 <__assert_fail@plt+0x2fba4>
   42624:	ldr	r0, [r6, #8]
   42628:	ldr	r7, [r0, r2, lsl #2]
   4262c:	cmn	r7, #1
   42630:	bne	42684 <__assert_fail@plt+0x2fbd4>
   42634:	sub	r2, r2, #1
   42638:	cmn	r2, #1
   4263c:	bne	42628 <__assert_fail@plt+0x2fb78>
   42640:	ldr	r1, [r6, #60]	; 0x3c
   42644:	b	426ac <__assert_fail@plt+0x2fbfc>
   42648:	mov	r8, #1
   4264c:	mov	r0, r8
   42650:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   42654:	ldr	r2, [r6, #68]	; 0x44
   42658:	ubfx	r3, r1, #5, #3
   4265c:	and	r7, r1, #31
   42660:	mov	r1, #1
   42664:	ldr	r3, [r2, r3, lsl #2]
   42668:	mov	r2, #0
   4266c:	tst	r3, r1, lsl r7
   42670:	bne	426c4 <__assert_fail@plt+0x2fc14>
   42674:	mov	r1, #0
   42678:	cmp	r0, #10
   4267c:	beq	4269c <__assert_fail@plt+0x2fbec>
   42680:	b	426ac <__assert_fail@plt+0x2fbfc>
   42684:	ldrb	r0, [r6, #78]	; 0x4e
   42688:	cmp	r0, #0
   4268c:	bne	42718 <__assert_fail@plt+0x2fc68>
   42690:	mov	r1, #0
   42694:	cmp	r7, #10
   42698:	bne	426ac <__assert_fail@plt+0x2fbfc>
   4269c:	ldrb	r0, [r6, #77]	; 0x4d
   426a0:	cmp	r0, #0
   426a4:	movwne	r0, #1
   426a8:	lsl	r1, r0, #1
   426ac:	and	r0, r1, #1
   426b0:	tst	r4, #1024	; 0x400
   426b4:	eor	r2, r0, #1
   426b8:	beq	426c4 <__assert_fail@plt+0x2fc14>
   426bc:	cmp	r0, #0
   426c0:	beq	426e8 <__assert_fail@plt+0x2fc38>
   426c4:	ldr	r0, [r9, #4]
   426c8:	cmp	r2, #0
   426cc:	bne	426d8 <__assert_fail@plt+0x2fc28>
   426d0:	ands	r2, r0, #2048	; 0x800
   426d4:	bne	426e8 <__assert_fail@plt+0x2fc38>
   426d8:	tst	r1, #2
   426dc:	bne	426f0 <__assert_fail@plt+0x2fc40>
   426e0:	ands	r2, r0, #8192	; 0x2000
   426e4:	beq	426f0 <__assert_fail@plt+0x2fc40>
   426e8:	mov	r0, r8
   426ec:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   426f0:	uxth	r0, r0
   426f4:	mov	r2, #1
   426f8:	and	r1, r1, #8
   426fc:	eor	r0, r2, r0, lsr #15
   42700:	orr	r0, r0, r1, lsr #3
   42704:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   42708:	ldr	r0, [r6, #88]	; 0x58
   4270c:	and	r0, r0, #2
   42710:	eor	r1, r0, #10
   42714:	b	426ac <__assert_fail@plt+0x2fbfc>
   42718:	mov	r0, r7
   4271c:	bl	12810 <iswalnum@plt>
   42720:	mov	r1, #1
   42724:	mov	r2, #0
   42728:	cmp	r7, #95	; 0x5f
   4272c:	beq	426c4 <__assert_fail@plt+0x2fc14>
   42730:	cmp	r0, #0
   42734:	beq	42690 <__assert_fail@plt+0x2fbe0>
   42738:	b	426c4 <__assert_fail@plt+0x2fc14>
   4273c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   42740:	add	fp, sp, #28
   42744:	sub	sp, sp, #4
   42748:	vpush	{d8-d9}
   4274c:	sub	sp, sp, #2272	; 0x8e0
   42750:	sub	sp, sp, #12288	; 0x3000
   42754:	mov	lr, r0
   42758:	mov	r0, #0
   4275c:	vmov.i32	q4, #0	; 0x00000000
   42760:	mov	r8, r1
   42764:	str	r0, [r1, #44]	; 0x2c
   42768:	str	r0, [r1, #48]	; 0x30
   4276c:	sub	r0, fp, #1024	; 0x400
   42770:	sub	r1, r0, #56	; 0x38
   42774:	mov	r0, r1
   42778:	vst1.64	{d8-d9}, [r0]!
   4277c:	vst1.64	{d8-d9}, [r0]
   42780:	ldr	r0, [r8, #8]
   42784:	cmp	r0, #0
   42788:	ble	4375c <__assert_fail@plt+0x30cac>
   4278c:	add	r0, lr, #96	; 0x60
   42790:	mov	r2, #0
   42794:	mov	r4, #0
   42798:	str	lr, [sp, #140]	; 0x8c
   4279c:	str	r8, [sp, #12]
   427a0:	str	r0, [sp, #4]
   427a4:	add	r0, r0, #16
   427a8:	str	r0, [sp]
   427ac:	add	r0, r1, #16
   427b0:	str	r0, [sp, #8]
   427b4:	b	427dc <__assert_fail@plt+0x2fd2c>
   427b8:	sub	r0, fp, #1024	; 0x400
   427bc:	mov	r4, r6
   427c0:	sub	r0, r0, #56	; 0x38
   427c4:	vst1.64	{d8-d9}, [r0]!
   427c8:	vst1.64	{d8-d9}, [r0]
   427cc:	ldr	r0, [r8, #8]
   427d0:	add	r2, r2, #1
   427d4:	cmp	r2, r0
   427d8:	bge	43184 <__assert_fail@plt+0x306d4>
   427dc:	ldr	r0, [r8, #12]
   427e0:	ldr	r1, [lr]
   427e4:	mov	r6, r4
   427e8:	str	r2, [sp, #24]
   427ec:	ldr	r0, [r0, r2, lsl #2]
   427f0:	add	r5, r1, r0, lsl #3
   427f4:	ldr	sl, [r5, #4]!
   427f8:	uxtb	r3, sl
   427fc:	cmp	r3, #1
   42800:	str	r3, [sp, #64]	; 0x40
   42804:	bne	42884 <__assert_fail@plt+0x2fdd4>
   42808:	ldrb	r2, [r1, r0, lsl #3]
   4280c:	str	r0, [sp, #16]
   42810:	sub	r0, fp, #1024	; 0x400
   42814:	mov	r4, r1
   42818:	sub	r7, r0, #56	; 0x38
   4281c:	mov	r0, #1
   42820:	mov	r1, r7
   42824:	ubfx	r3, r2, #5, #3
   42828:	and	r2, r2, #31
   4282c:	ldr	r7, [r7, r3, lsl #2]
   42830:	orr	r2, r7, r0, lsl r2
   42834:	str	r2, [r1, r3, lsl #2]
   42838:	movw	r2, #65280	; 0xff00
   4283c:	mov	r3, r4
   42840:	movt	r2, #3
   42844:	ands	r2, sl, r2
   42848:	ldr	r2, [sp, #24]
   4284c:	beq	42c90 <__assert_fail@plt+0x301e0>
   42850:	tst	sl, #8192	; 0x2000
   42854:	beq	428e8 <__assert_fail@plt+0x2fe38>
   42858:	ldr	r2, [fp, #-1080]	; 0xfffffbc8
   4285c:	sub	r0, fp, #1024	; 0x400
   42860:	mov	r1, r3
   42864:	sub	r3, r0, #56	; 0x38
   42868:	vst1.64	{d8-d9}, [r3]!
   4286c:	vst1.64	{d8-d9}, [r3]
   42870:	tst	r2, #1024	; 0x400
   42874:	bne	428d8 <__assert_fail@plt+0x2fe28>
   42878:	ldr	r2, [sp, #24]
   4287c:	mov	r4, r6
   42880:	b	427cc <__assert_fail@plt+0x2fd1c>
   42884:	cmp	r3, #7
   42888:	beq	42924 <__assert_fail@plt+0x2fe74>
   4288c:	cmp	r3, #5
   42890:	beq	42978 <__assert_fail@plt+0x2fec8>
   42894:	cmp	r3, #3
   42898:	bne	4317c <__assert_fail@plt+0x306cc>
   4289c:	ldr	r2, [r1, r0, lsl #3]
   428a0:	str	r0, [sp, #16]
   428a4:	sub	r0, fp, #1024	; 0x400
   428a8:	mov	r4, r1
   428ac:	sub	r3, r0, #56	; 0x38
   428b0:	vld1.64	{d16-d17}, [r3]
   428b4:	vld1.32	{d18-d19}, [r2]!
   428b8:	vorr	q8, q8, q9
   428bc:	vst1.64	{d16-d17}, [r3]
   428c0:	vld1.32	{d16-d17}, [r2]
   428c4:	ldr	r2, [sp, #8]
   428c8:	vld1.32	{d18-d19}, [r2]
   428cc:	vorr	q8, q9, q8
   428d0:	vst1.32	{d16-d17}, [r2]
   428d4:	b	42838 <__assert_fail@plt+0x2fd88>
   428d8:	ldr	r2, [sp, #24]
   428dc:	mov	r0, #1024	; 0x400
   428e0:	mov	r3, r1
   428e4:	str	r0, [fp, #-1080]	; 0xfffffbc8
   428e8:	tst	sl, #32768	; 0x8000
   428ec:	bne	427b8 <__assert_fail@plt+0x2fd08>
   428f0:	tst	sl, #1024	; 0x400
   428f4:	beq	42ba8 <__assert_fail@plt+0x300f8>
   428f8:	ldr	r0, [sp, #64]	; 0x40
   428fc:	cmp	r0, #1
   42900:	bne	429c4 <__assert_fail@plt+0x2ff14>
   42904:	ldrb	r2, [r5, #2]
   42908:	tst	r2, #64	; 0x40
   4290c:	bne	429c4 <__assert_fail@plt+0x2ff14>
   42910:	sub	r0, fp, #1024	; 0x400
   42914:	sub	r0, r0, #56	; 0x38
   42918:	vst1.64	{d8-d9}, [r0]!
   4291c:	vst1.64	{d8-d9}, [r0]
   42920:	b	42878 <__assert_fail@plt+0x2fdc8>
   42924:	str	r0, [sp, #16]
   42928:	mvn	r0, #0
   4292c:	mov	r4, r1
   42930:	str	r0, [fp, #-1068]	; 0xfffffbd4
   42934:	str	r0, [fp, #-1072]	; 0xfffffbd0
   42938:	str	r0, [fp, #-1076]	; 0xfffffbcc
   4293c:	str	r0, [fp, #-1080]	; 0xfffffbc8
   42940:	ldr	r3, [lr, #128]	; 0x80
   42944:	and	r2, r3, #128	; 0x80
   42948:	ands	r3, r3, #64	; 0x40
   4294c:	beq	42958 <__assert_fail@plt+0x2fea8>
   42950:	cmp	r2, #0
   42954:	beq	42838 <__assert_fail@plt+0x2fd88>
   42958:	cmp	r3, #0
   4295c:	mvn	r3, #1
   42960:	movweq	r3, #64510	; 0xfbfe
   42964:	movteq	r3, #65535	; 0xffff
   42968:	cmp	r2, #0
   4296c:	mvneq	r3, #1024	; 0x400
   42970:	str	r3, [fp, #-1080]	; 0xfffffbc8
   42974:	b	42838 <__assert_fail@plt+0x2fd88>
   42978:	ldr	r2, [lr, #92]	; 0x5c
   4297c:	mov	r4, r1
   42980:	str	r0, [sp, #16]
   42984:	cmp	r2, #2
   42988:	blt	42a5c <__assert_fail@plt+0x2ffac>
   4298c:	ldr	r2, [lr, #60]	; 0x3c
   42990:	sub	r0, fp, #1024	; 0x400
   42994:	sub	r3, r0, #56	; 0x38
   42998:	vld1.64	{d16-d17}, [r3]
   4299c:	vld1.32	{d18-d19}, [r2]!
   429a0:	vorr	q8, q8, q9
   429a4:	vst1.64	{d16-d17}, [r3]
   429a8:	vld1.32	{d18-d19}, [r2]
   429ac:	ldr	r2, [sp, #8]
   429b0:	vld1.32	{d20-d21}, [r2]
   429b4:	vorr	q9, q10, q9
   429b8:	vst1.32	{d18-d19}, [r2]
   429bc:	vmov.32	r2, d16[0]
   429c0:	b	42a80 <__assert_fail@plt+0x2ffd0>
   429c4:	ldr	r2, [lr, #92]	; 0x5c
   429c8:	mov	r1, r3
   429cc:	cmp	r2, #1
   429d0:	ble	42aac <__assert_fail@plt+0x2fffc>
   429d4:	ldr	r2, [lr, #60]	; 0x3c
   429d8:	ldr	r3, [sp, #4]
   429dc:	sub	r0, fp, #1024	; 0x400
   429e0:	vld1.32	{d16-d17}, [r3]
   429e4:	vld1.32	{d18-d19}, [r2]!
   429e8:	sub	r3, r0, #56	; 0x38
   429ec:	vld1.64	{d20-d21}, [r3]
   429f0:	vorn	q8, q8, q9
   429f4:	vand	q8, q10, q8
   429f8:	vst1.64	{d16-d17}, [r3]
   429fc:	vmov.32	r3, d16[1]
   42a00:	vld1.32	{d18-d19}, [r2]
   42a04:	ldr	r2, [sp]
   42a08:	vld1.32	{d20-d21}, [r2]
   42a0c:	ldr	r2, [sp, #8]
   42a10:	vld1.32	{d22-d23}, [r2]
   42a14:	vorn	q9, q10, q9
   42a18:	vand	q9, q11, q9
   42a1c:	vst1.32	{d18-d19}, [r2]
   42a20:	vmov.32	r2, d16[0]
   42a24:	orr	r2, r3, r2
   42a28:	vmov.32	r3, d17[0]
   42a2c:	orr	r2, r2, r3
   42a30:	vmov.32	r3, d17[1]
   42a34:	orr	r2, r2, r3
   42a38:	vmov.32	r3, d18[0]
   42a3c:	orr	r2, r2, r3
   42a40:	vmov.32	r3, d18[1]
   42a44:	orr	r2, r2, r3
   42a48:	vmov.32	r3, d19[0]
   42a4c:	orr	r2, r2, r3
   42a50:	vmov.32	r3, d19[1]
   42a54:	orr	r2, r2, r3
   42a58:	b	42b98 <__assert_fail@plt+0x300e8>
   42a5c:	mvn	r2, #0
   42a60:	str	r2, [fp, #-1052]	; 0xfffffbe4
   42a64:	str	r2, [fp, #-1056]	; 0xfffffbe0
   42a68:	str	r2, [fp, #-1060]	; 0xfffffbdc
   42a6c:	str	r2, [fp, #-1064]	; 0xfffffbd8
   42a70:	str	r2, [fp, #-1068]	; 0xfffffbd4
   42a74:	str	r2, [fp, #-1072]	; 0xfffffbd0
   42a78:	str	r2, [fp, #-1076]	; 0xfffffbcc
   42a7c:	str	r2, [fp, #-1080]	; 0xfffffbc8
   42a80:	ldr	r3, [lr, #128]	; 0x80
   42a84:	ands	r7, r3, #64	; 0x40
   42a88:	and	r3, r3, #128	; 0x80
   42a8c:	biceq	r2, r2, #1024	; 0x400
   42a90:	beq	42a9c <__assert_fail@plt+0x2ffec>
   42a94:	cmp	r3, #0
   42a98:	beq	42838 <__assert_fail@plt+0x2fd88>
   42a9c:	cmp	r3, #0
   42aa0:	bicne	r2, r2, #1
   42aa4:	str	r2, [fp, #-1080]	; 0xfffffbc8
   42aa8:	b	42838 <__assert_fail@plt+0x2fd88>
   42aac:	ldr	r2, [sp, #140]	; 0x8c
   42ab0:	ldr	r3, [lr, #96]	; 0x60
   42ab4:	str	r1, [sp, #60]	; 0x3c
   42ab8:	ldr	r4, [fp, #-1080]	; 0xfffffbc8
   42abc:	mov	r9, r5
   42ac0:	str	r6, [sp, #152]	; 0x98
   42ac4:	ldr	r5, [fp, #-1076]	; 0xfffffbcc
   42ac8:	ldr	r6, [fp, #-1072]	; 0xfffffbd0
   42acc:	ldr	lr, [r2, #100]	; 0x64
   42ad0:	ldr	r2, [sp, #140]	; 0x8c
   42ad4:	and	r7, r4, r3
   42ad8:	ldr	r3, [sp, #12]
   42adc:	ldr	r1, [r2, #104]	; 0x68
   42ae0:	ldr	r2, [sp, #140]	; 0x8c
   42ae4:	and	lr, r5, lr
   42ae8:	ldr	r0, [r2, #108]	; 0x6c
   42aec:	ldr	r2, [sp, #140]	; 0x8c
   42af0:	and	r1, r6, r1
   42af4:	ldr	ip, [r2, #112]	; 0x70
   42af8:	ldr	r2, [sp, #140]	; 0x8c
   42afc:	ldr	r8, [r2, #116]	; 0x74
   42b00:	ldr	r2, [sp, #140]	; 0x8c
   42b04:	ldr	r2, [r2, #120]	; 0x78
   42b08:	str	r2, [sp, #160]	; 0xa0
   42b0c:	ldr	r2, [sp, #140]	; 0x8c
   42b10:	ldr	r2, [r2, #124]	; 0x7c
   42b14:	str	r2, [sp, #164]	; 0xa4
   42b18:	ldr	r2, [fp, #-1068]	; 0xfffffbd4
   42b1c:	str	r7, [fp, #-1080]	; 0xfffffbc8
   42b20:	str	lr, [fp, #-1076]	; 0xfffffbcc
   42b24:	str	r1, [fp, #-1072]	; 0xfffffbd0
   42b28:	orr	r7, lr, r7
   42b2c:	ldr	lr, [sp, #140]	; 0x8c
   42b30:	orr	r7, r7, r1
   42b34:	ldr	r1, [sp, #60]	; 0x3c
   42b38:	and	r2, r2, r0
   42b3c:	ldr	r0, [sp, #160]	; 0xa0
   42b40:	str	r2, [fp, #-1068]	; 0xfffffbd4
   42b44:	orr	r2, r7, r2
   42b48:	ldr	r6, [fp, #-1064]	; 0xfffffbd8
   42b4c:	and	r6, r6, ip
   42b50:	str	r6, [fp, #-1064]	; 0xfffffbd8
   42b54:	orr	r2, r2, r6
   42b58:	ldr	r6, [sp, #152]	; 0x98
   42b5c:	ldr	r4, [fp, #-1060]	; 0xfffffbdc
   42b60:	and	r4, r4, r8
   42b64:	mov	r8, r3
   42b68:	str	r4, [fp, #-1060]	; 0xfffffbdc
   42b6c:	orr	r2, r2, r4
   42b70:	ldr	r3, [fp, #-1056]	; 0xfffffbe0
   42b74:	and	r3, r3, r0
   42b78:	ldr	r0, [sp, #164]	; 0xa4
   42b7c:	str	r3, [fp, #-1056]	; 0xfffffbe0
   42b80:	orr	r2, r2, r3
   42b84:	ldr	r5, [fp, #-1052]	; 0xfffffbe4
   42b88:	and	r0, r5, r0
   42b8c:	mov	r5, r9
   42b90:	str	r0, [fp, #-1052]	; 0xfffffbe4
   42b94:	orr	r2, r2, r0
   42b98:	cmp	r2, #0
   42b9c:	ldr	r2, [sp, #24]
   42ba0:	mov	r3, r1
   42ba4:	beq	4317c <__assert_fail@plt+0x306cc>
   42ba8:	tst	sl, #2048	; 0x800
   42bac:	beq	42c90 <__assert_fail@plt+0x301e0>
   42bb0:	ldr	r0, [sp, #64]	; 0x40
   42bb4:	cmp	r0, #1
   42bb8:	bne	42bc8 <__assert_fail@plt+0x30118>
   42bbc:	ldrb	r0, [r5, #2]
   42bc0:	tst	r0, #64	; 0x40
   42bc4:	bne	427b8 <__assert_fail@plt+0x2fd08>
   42bc8:	ldr	r0, [lr, #92]	; 0x5c
   42bcc:	cmp	r0, #1
   42bd0:	ble	42c1c <__assert_fail@plt+0x3016c>
   42bd4:	ldr	r0, [lr, #60]	; 0x3c
   42bd8:	ldr	r1, [sp, #4]
   42bdc:	vld1.32	{d16-d17}, [r1]
   42be0:	vld1.32	{d18-d19}, [r0]!
   42be4:	sub	r1, fp, #1024	; 0x400
   42be8:	sub	r1, r1, #56	; 0x38
   42bec:	vld1.64	{d20-d21}, [r1]
   42bf0:	vand	q8, q9, q8
   42bf4:	vbic	q9, q10, q8
   42bf8:	vst1.64	{d18-d19}, [r1]
   42bfc:	ldr	r1, [sp]
   42c00:	vld1.32	{d20-d21}, [r0]
   42c04:	ldr	r0, [sp, #8]
   42c08:	vld1.32	{d16-d17}, [r1]
   42c0c:	vld1.32	{d22-d23}, [r0]
   42c10:	vand	q8, q10, q8
   42c14:	vbic	q8, q11, q8
   42c18:	b	42c4c <__assert_fail@plt+0x3019c>
   42c1c:	ldr	r0, [sp, #4]
   42c20:	vld1.32	{d16-d17}, [r0]
   42c24:	sub	r0, fp, #1024	; 0x400
   42c28:	sub	r0, r0, #56	; 0x38
   42c2c:	vld1.64	{d18-d19}, [r0]
   42c30:	vbic	q9, q9, q8
   42c34:	vst1.64	{d18-d19}, [r0]
   42c38:	ldr	r0, [sp]
   42c3c:	vld1.32	{d16-d17}, [r0]
   42c40:	ldr	r0, [sp, #8]
   42c44:	vld1.32	{d20-d21}, [r0]
   42c48:	vbic	q8, q10, q8
   42c4c:	vst1.32	{d16-d17}, [r0]
   42c50:	vmov.32	r0, d18[0]
   42c54:	vmov.32	r1, d18[1]
   42c58:	orr	r0, r1, r0
   42c5c:	vmov.32	r1, d19[0]
   42c60:	orr	r0, r0, r1
   42c64:	vmov.32	r1, d19[1]
   42c68:	orr	r0, r0, r1
   42c6c:	vmov.32	r1, d16[0]
   42c70:	orr	r0, r0, r1
   42c74:	vmov.32	r1, d16[1]
   42c78:	orr	r0, r0, r1
   42c7c:	vmov.32	r1, d17[0]
   42c80:	orr	r0, r0, r1
   42c84:	vmov.32	r1, d17[1]
   42c88:	orrs	r0, r0, r1
   42c8c:	beq	4317c <__assert_fail@plt+0x306cc>
   42c90:	mov	r4, r6
   42c94:	mov	r5, #0
   42c98:	cmp	r6, #1
   42c9c:	blt	430ec <__assert_fail@plt+0x3063c>
   42ca0:	ldr	r0, [fp, #-1052]	; 0xfffffbe4
   42ca4:	ldr	ip, [fp, #-1056]	; 0xfffffbe0
   42ca8:	ldr	lr, [fp, #-1060]	; 0xfffffbdc
   42cac:	ldr	r8, [fp, #-1072]	; 0xfffffbd0
   42cb0:	ldr	r9, [sp, #64]	; 0x40
   42cb4:	mov	r1, #28
   42cb8:	str	r3, [sp, #60]	; 0x3c
   42cbc:	str	r0, [sp, #148]	; 0x94
   42cc0:	ldr	r0, [fp, #-1064]	; 0xfffffbd8
   42cc4:	str	r0, [sp, #120]	; 0x78
   42cc8:	ldr	r0, [fp, #-1080]	; 0xfffffbc8
   42ccc:	str	r0, [sp, #108]	; 0x6c
   42cd0:	ldr	r0, [fp, #-1076]	; 0xfffffbcc
   42cd4:	str	r0, [sp, #112]	; 0x70
   42cd8:	ldr	r0, [fp, #-1068]	; 0xfffffbd4
   42cdc:	str	r0, [sp, #116]	; 0x74
   42ce0:	sub	r0, fp, #6144	; 0x1800
   42ce4:	sub	r7, r0, #104	; 0x68
   42ce8:	b	42d20 <__assert_fail@plt+0x30270>
   42cec:	ldr	r9, [sp, #64]	; 0x40
   42cf0:	ldr	r7, [sp, #144]	; 0x90
   42cf4:	ldr	ip, [sp, #164]	; 0xa4
   42cf8:	ldr	lr, [sp, #160]	; 0xa0
   42cfc:	ldr	r5, [sp, #136]	; 0x88
   42d00:	ldr	r4, [sp, #152]	; 0x98
   42d04:	ldr	r3, [sp, #60]	; 0x3c
   42d08:	ldr	r8, [sp, #156]	; 0x9c
   42d0c:	add	r1, r1, #32
   42d10:	add	r7, r7, #12
   42d14:	add	r5, r5, #1
   42d18:	cmp	r5, r4
   42d1c:	bge	430ac <__assert_fail@plt+0x305fc>
   42d20:	cmp	r9, #1
   42d24:	str	lr, [sp, #160]	; 0xa0
   42d28:	str	ip, [sp, #164]	; 0xa4
   42d2c:	str	r4, [sp, #152]	; 0x98
   42d30:	str	r5, [sp, #136]	; 0x88
   42d34:	str	r8, [sp, #156]	; 0x9c
   42d38:	bne	42d6c <__assert_fail@plt+0x302bc>
   42d3c:	ldr	r0, [sp, #16]
   42d40:	add	r2, sp, #168	; 0xa8
   42d44:	ldrb	r0, [r3, r0, lsl #3]
   42d48:	mov	r3, r1
   42d4c:	ubfx	r1, r0, #5, #3
   42d50:	and	r0, r0, #31
   42d54:	add	r1, r2, r1, lsl #2
   42d58:	mov	r2, #1
   42d5c:	ldr	r1, [r1, r5, lsl #5]
   42d60:	tst	r1, r2, lsl r0
   42d64:	mov	r1, r3
   42d68:	beq	42cf4 <__assert_fail@plt+0x30244>
   42d6c:	add	r4, sp, #168	; 0xa8
   42d70:	str	r7, [sp, #144]	; 0x90
   42d74:	ldr	ip, [sp, #108]	; 0x6c
   42d78:	ldr	r9, [sp, #112]	; 0x70
   42d7c:	add	sl, r4, r5, lsl #5
   42d80:	ldr	r5, [sp, #116]	; 0x74
   42d84:	add	r7, sl, #8
   42d88:	ldr	r3, [sl, #4]
   42d8c:	ldm	r7, {r0, r6, r7}
   42d90:	str	r6, [sp, #132]	; 0x84
   42d94:	str	r7, [sp, #100]	; 0x64
   42d98:	str	r3, [sp, #128]	; 0x80
   42d9c:	and	r3, r3, r9
   42da0:	and	r2, r0, r8
   42da4:	str	r0, [sp, #124]	; 0x7c
   42da8:	add	r0, r4, r1
   42dac:	str	r3, [sp, #84]	; 0x54
   42db0:	ldr	r4, [r4, r1]
   42db4:	ldr	r8, [sp, #148]	; 0x94
   42db8:	ldr	lr, [r0, #-28]	; 0xffffffe4
   42dbc:	str	r0, [sp, #92]	; 0x5c
   42dc0:	str	r2, [sp, #96]	; 0x60
   42dc4:	and	r0, lr, ip
   42dc8:	str	r0, [sp, #88]	; 0x58
   42dcc:	orr	r0, r3, r0
   42dd0:	ldr	r3, [sl, #20]
   42dd4:	orr	r0, r0, r2
   42dd8:	and	r2, r6, r5
   42ddc:	ldr	r6, [sp, #120]	; 0x78
   42de0:	str	r2, [sp, #80]	; 0x50
   42de4:	orr	r0, r0, r2
   42de8:	and	r2, r7, r6
   42dec:	ldr	r7, [sl, #24]
   42df0:	str	r2, [sp, #76]	; 0x4c
   42df4:	orr	r0, r0, r2
   42df8:	ldr	r2, [sp, #160]	; 0xa0
   42dfc:	and	r2, r3, r2
   42e00:	str	r2, [sp, #72]	; 0x48
   42e04:	orr	r0, r0, r2
   42e08:	ldr	r2, [sp, #164]	; 0xa4
   42e0c:	and	r2, r7, r2
   42e10:	str	r2, [sp, #68]	; 0x44
   42e14:	orr	r0, r0, r2
   42e18:	and	r2, r4, r8
   42e1c:	orrs	r0, r0, r2
   42e20:	beq	42cec <__assert_fail@plt+0x3023c>
   42e24:	bic	r0, ip, lr
   42e28:	str	r2, [sp, #20]
   42e2c:	ldr	r2, [sp, #156]	; 0x9c
   42e30:	ldr	r8, [sp, #100]	; 0x64
   42e34:	str	r1, [sp, #104]	; 0x68
   42e38:	ldr	r1, [sp, #128]	; 0x80
   42e3c:	bic	ip, lr, ip
   42e40:	str	r0, [sp, #56]	; 0x38
   42e44:	ldr	r0, [sp, #128]	; 0x80
   42e48:	bic	lr, r1, r9
   42e4c:	bic	r0, r9, r0
   42e50:	orr	r1, lr, ip
   42e54:	str	r0, [sp, #52]	; 0x34
   42e58:	ldr	r0, [sp, #124]	; 0x7c
   42e5c:	bic	r0, r2, r0
   42e60:	str	r0, [sp, #48]	; 0x30
   42e64:	ldr	r0, [sp, #132]	; 0x84
   42e68:	bic	r0, r5, r0
   42e6c:	str	r0, [sp, #44]	; 0x2c
   42e70:	bic	r0, r6, r8
   42e74:	bic	r6, r8, r6
   42e78:	str	r0, [sp, #40]	; 0x28
   42e7c:	ldr	r0, [sp, #160]	; 0xa0
   42e80:	bic	r0, r0, r3
   42e84:	str	r0, [sp, #36]	; 0x24
   42e88:	ldr	r0, [sp, #164]	; 0xa4
   42e8c:	bic	r0, r0, r7
   42e90:	str	r0, [sp, #32]
   42e94:	ldr	r0, [sp, #148]	; 0x94
   42e98:	bic	r0, r0, r4
   42e9c:	str	r0, [sp, #28]
   42ea0:	ldr	r0, [sp, #124]	; 0x7c
   42ea4:	bic	r0, r0, r2
   42ea8:	mov	r9, r0
   42eac:	orr	r0, r1, r0
   42eb0:	ldr	r1, [sp, #132]	; 0x84
   42eb4:	bic	r1, r1, r5
   42eb8:	orr	r5, r0, r1
   42ebc:	ldr	r0, [sp, #160]	; 0xa0
   42ec0:	orr	r5, r5, r6
   42ec4:	bic	r3, r3, r0
   42ec8:	ldr	r0, [sp, #164]	; 0xa4
   42ecc:	orr	r5, r5, r3
   42ed0:	bic	r7, r7, r0
   42ed4:	ldr	r0, [sp, #148]	; 0x94
   42ed8:	orr	r2, r5, r7
   42edc:	bic	r4, r4, r0
   42ee0:	orrs	r2, r2, r4
   42ee4:	beq	42fc4 <__assert_fail@plt+0x30514>
   42ee8:	ldr	r2, [sp, #152]	; 0x98
   42eec:	add	r5, sp, #168	; 0xa8
   42ef0:	add	r0, r5, r2, lsl #5
   42ef4:	str	ip, [r5, r2, lsl #5]
   42ef8:	str	lr, [r0, #4]
   42efc:	str	r9, [r0, #8]
   42f00:	str	r1, [r0, #12]
   42f04:	str	r6, [r0, #16]
   42f08:	str	r3, [r0, #20]
   42f0c:	str	r7, [r0, #24]
   42f10:	str	r4, [r0, #28]
   42f14:	ldr	r0, [sp, #92]	; 0x5c
   42f18:	ldr	r1, [sp, #88]	; 0x58
   42f1c:	sub	lr, fp, #6144	; 0x1800
   42f20:	mov	r6, r2
   42f24:	str	r1, [r0, #-28]	; 0xffffffe4
   42f28:	ldr	r0, [sp, #84]	; 0x54
   42f2c:	ldr	r1, [sp, #20]
   42f30:	str	r0, [sl, #4]
   42f34:	ldr	r0, [sp, #96]	; 0x60
   42f38:	str	r0, [sl, #8]
   42f3c:	ldr	r0, [sp, #80]	; 0x50
   42f40:	str	r0, [sl, #12]
   42f44:	ldr	r0, [sp, #76]	; 0x4c
   42f48:	str	r0, [sl, #16]
   42f4c:	ldr	r0, [sp, #72]	; 0x48
   42f50:	str	r0, [sl, #20]
   42f54:	ldr	r0, [sp, #68]	; 0x44
   42f58:	str	r0, [sl, #24]
   42f5c:	ldr	r0, [sp, #104]	; 0x68
   42f60:	str	r1, [r5, r0]
   42f64:	add	r0, r2, r2, lsl #1
   42f68:	sub	r1, lr, #104	; 0x68
   42f6c:	add	r4, r1, r0, lsl #2
   42f70:	ldr	r1, [sp, #144]	; 0x90
   42f74:	mov	r5, r4
   42f78:	ldr	r0, [r1, #4]
   42f7c:	str	r0, [r5, #4]!
   42f80:	ldr	r7, [r1, #4]
   42f84:	cmp	r7, #1
   42f88:	blt	42fdc <__assert_fail@plt+0x3052c>
   42f8c:	str	r0, [r4]
   42f90:	lsl	r0, r0, #2
   42f94:	bl	327ac <__assert_fail@plt+0x1fcfc>
   42f98:	ldr	r8, [sp, #36]	; 0x24
   42f9c:	ldr	sl, [sp, #28]
   42fa0:	cmp	r0, #0
   42fa4:	str	r0, [r4, #8]
   42fa8:	beq	436c8 <__assert_fail@plt+0x30c18>
   42fac:	ldr	r1, [sp, #144]	; 0x90
   42fb0:	lsl	r2, r7, #2
   42fb4:	ldr	r1, [r1, #8]
   42fb8:	bl	124e0 <memcpy@plt>
   42fbc:	ldr	r1, [sp, #24]
   42fc0:	b	42ff8 <__assert_fail@plt+0x30548>
   42fc4:	ldr	r4, [sp, #12]
   42fc8:	ldr	r1, [sp, #24]
   42fcc:	ldr	r8, [sp, #36]	; 0x24
   42fd0:	ldr	r5, [sp, #32]
   42fd4:	ldr	sl, [sp, #28]
   42fd8:	b	43008 <__assert_fail@plt+0x30558>
   42fdc:	ldr	r1, [sp, #24]
   42fe0:	ldr	r8, [sp, #36]	; 0x24
   42fe4:	ldr	sl, [sp, #28]
   42fe8:	mov	r0, #0
   42fec:	str	r0, [r4]
   42ff0:	str	r0, [r4, #4]
   42ff4:	str	r0, [r4, #8]
   42ff8:	ldr	r4, [sp, #12]
   42ffc:	ldr	r5, [sp, #32]
   43000:	add	r6, r6, #1
   43004:	str	r6, [sp, #152]	; 0x98
   43008:	ldr	r0, [r4, #12]
   4300c:	ldr	r7, [sp, #144]	; 0x90
   43010:	ldr	r1, [r0, r1, lsl #2]
   43014:	mov	r0, r7
   43018:	bl	3e784 <__assert_fail@plt+0x2bcd4>
   4301c:	ldr	r6, [sp, #40]	; 0x28
   43020:	cmp	r0, #0
   43024:	beq	43688 <__assert_fail@plt+0x30bd8>
   43028:	ldr	r2, [sp, #56]	; 0x38
   4302c:	ldr	r4, [sp, #52]	; 0x34
   43030:	ldr	r3, [sp, #48]	; 0x30
   43034:	ldr	r1, [sp, #44]	; 0x2c
   43038:	ldr	r9, [sp, #64]	; 0x40
   4303c:	mov	ip, r5
   43040:	mov	lr, r8
   43044:	str	sl, [sp, #148]	; 0x94
   43048:	str	r6, [sp, #120]	; 0x78
   4304c:	orr	r0, r4, r2
   43050:	str	r1, [sp, #116]	; 0x74
   43054:	str	r3, [sp, #156]	; 0x9c
   43058:	str	r4, [sp, #112]	; 0x70
   4305c:	str	r2, [sp, #108]	; 0x6c
   43060:	orr	r0, r0, r3
   43064:	orr	r0, r0, r1
   43068:	orr	r0, r0, r6
   4306c:	orr	r0, r0, r8
   43070:	orr	r0, r0, r5
   43074:	orrs	r0, r0, sl
   43078:	mov	r0, r1
   4307c:	ldr	r1, [sp, #104]	; 0x68
   43080:	bne	42cfc <__assert_fail@plt+0x3024c>
   43084:	mov	ip, r5
   43088:	str	r4, [sp, #112]	; 0x70
   4308c:	ldr	r4, [sp, #152]	; 0x98
   43090:	ldr	r5, [sp, #136]	; 0x88
   43094:	mov	lr, r8
   43098:	str	sl, [sp, #148]	; 0x94
   4309c:	str	r6, [sp, #120]	; 0x78
   430a0:	str	r0, [sp, #116]	; 0x74
   430a4:	mov	r8, r3
   430a8:	str	r2, [sp, #108]	; 0x6c
   430ac:	ldr	r0, [sp, #148]	; 0x94
   430b0:	ldr	r2, [sp, #24]
   430b4:	str	r0, [fp, #-1052]	; 0xfffffbe4
   430b8:	ldr	r0, [sp, #120]	; 0x78
   430bc:	str	ip, [fp, #-1056]	; 0xfffffbe0
   430c0:	str	lr, [fp, #-1060]	; 0xfffffbdc
   430c4:	ldr	lr, [sp, #140]	; 0x8c
   430c8:	str	r0, [fp, #-1064]	; 0xfffffbd8
   430cc:	ldr	r0, [sp, #116]	; 0x74
   430d0:	str	r0, [fp, #-1068]	; 0xfffffbd4
   430d4:	ldr	r0, [sp, #112]	; 0x70
   430d8:	str	r8, [fp, #-1072]	; 0xfffffbd0
   430dc:	ldr	r8, [sp, #12]
   430e0:	str	r0, [fp, #-1076]	; 0xfffffbcc
   430e4:	ldr	r0, [sp, #108]	; 0x6c
   430e8:	str	r0, [fp, #-1080]	; 0xfffffbc8
   430ec:	cmp	r5, r4
   430f0:	bne	427cc <__assert_fail@plt+0x2fd1c>
   430f4:	sub	lr, fp, #1024	; 0x400
   430f8:	mov	r1, r8
   430fc:	sub	r7, lr, #56	; 0x38
   43100:	sub	lr, fp, #6144	; 0x1800
   43104:	mov	sl, r1
   43108:	mov	r0, r7
   4310c:	mov	r8, r7
   43110:	vld1.32	{d16-d17}, [r0]!
   43114:	vld1.64	{d18-d19}, [r0]
   43118:	add	r0, sp, #168	; 0xa8
   4311c:	add	r0, r0, r5, lsl #5
   43120:	vst1.32	{d16-d17}, [r0]!
   43124:	vst1.32	{d18-d19}, [r0]
   43128:	ldr	r0, [r1, #12]
   4312c:	mov	r1, #1
   43130:	ldr	r4, [r0, r2, lsl #2]
   43134:	add	r0, r5, r5, lsl #1
   43138:	sub	r2, lr, #104	; 0x68
   4313c:	add	r7, r2, r0, lsl #2
   43140:	str	r1, [r2, r0, lsl #2]
   43144:	mov	r0, #4
   43148:	mov	r6, r7
   4314c:	str	r1, [r6, #4]!
   43150:	bl	327ac <__assert_fail@plt+0x1fcfc>
   43154:	cmp	r0, #0
   43158:	str	r0, [r7, #8]
   4315c:	beq	43738 <__assert_fail@plt+0x30c88>
   43160:	ldr	lr, [sp, #140]	; 0x8c
   43164:	ldr	r2, [sp, #24]
   43168:	str	r4, [r0]
   4316c:	mov	r0, r8
   43170:	add	r4, r5, #1
   43174:	mov	r8, sl
   43178:	b	427c4 <__assert_fail@plt+0x2fd14>
   4317c:	mov	r4, r6
   43180:	b	427cc <__assert_fail@plt+0x2fd1c>
   43184:	cmp	r4, #0
   43188:	ble	43754 <__assert_fail@plt+0x30ca4>
   4318c:	mov	r6, r4
   43190:	mov	r4, #0
   43194:	add	r0, r6, #1
   43198:	str	r4, [fp, #-3136]	; 0xfffff3c0
   4319c:	str	r0, [fp, #-3140]	; 0xfffff3bc
   431a0:	lsl	r0, r0, #2
   431a4:	bl	327ac <__assert_fail@plt+0x1fcfc>
   431a8:	ldr	r1, [sp, #140]	; 0x8c
   431ac:	cmp	r0, #0
   431b0:	str	r0, [fp, #-3132]	; 0xfffff3c4
   431b4:	moveq	r4, #12
   431b8:	cmp	r0, #0
   431bc:	str	r4, [fp, #-56]	; 0xffffffc8
   431c0:	beq	43784 <__assert_fail@plt+0x30cd4>
   431c4:	vmov.i32	q8, #0	; 0x00000000
   431c8:	sub	lr, fp, #3072	; 0xc00
   431cc:	mov	r3, #0
   431d0:	mov	sl, #0
   431d4:	mov	r7, #0
   431d8:	mov	r2, #0
   431dc:	mov	r8, #0
   431e0:	str	r6, [sp, #152]	; 0x98
   431e4:	sub	r0, lr, #104	; 0x68
   431e8:	sub	lr, fp, #3072	; 0xc00
   431ec:	sub	r9, lr, #68	; 0x44
   431f0:	sub	lr, fp, #3072	; 0xc00
   431f4:	vst1.64	{d16-d17}, [r0]!
   431f8:	vst1.64	{d16-d17}, [r0]
   431fc:	sub	r0, lr, #56	; 0x38
   43200:	str	r0, [sp, #124]	; 0x7c
   43204:	mov	r0, #0
   43208:	str	r0, [sp, #144]	; 0x90
   4320c:	mov	r0, #0
   43210:	str	r0, [sp, #148]	; 0x94
   43214:	mov	r0, #0
   43218:	str	r0, [sp, #156]	; 0x9c
   4321c:	mov	r0, #0
   43220:	str	r0, [sp, #160]	; 0xa0
   43224:	mov	r0, #0
   43228:	str	r0, [sp, #164]	; 0xa4
   4322c:	mov	r0, #0
   43230:	str	r0, [sp, #128]	; 0x80
   43234:	b	432f4 <__assert_fail@plt+0x30844>
   43238:	ldrsb	r0, [r7, #52]	; 0x34
   4323c:	cmn	r0, #1
   43240:	ble	433b0 <__assert_fail@plt+0x30900>
   43244:	sub	lr, fp, #3072	; 0xc00
   43248:	sub	r0, lr, #56	; 0x38
   4324c:	sub	lr, fp, #2048	; 0x800
   43250:	str	r7, [r0, r8, lsl #2]
   43254:	sub	r0, lr, #56	; 0x38
   43258:	str	r7, [r0, r8, lsl #2]
   4325c:	add	r0, sp, #168	; 0xa8
   43260:	ldr	r2, [sp, #164]	; 0xa4
   43264:	mov	r1, r0
   43268:	ldr	r0, [r0, r8, lsl #5]
   4326c:	orr	r2, r2, r0
   43270:	add	r0, r1, r8, lsl #5
   43274:	add	r8, r8, #1
   43278:	str	r2, [sp, #164]	; 0xa4
   4327c:	ldr	r2, [r0, #4]
   43280:	ldr	r1, [r0, #8]
   43284:	ldr	r7, [r0, #12]
   43288:	ldr	r5, [r0, #16]
   4328c:	ldr	r4, [r0, #20]
   43290:	ldr	r6, [r0, #24]
   43294:	ldr	r0, [r0, #28]
   43298:	orr	sl, sl, r0
   4329c:	ldr	r0, [sp, #144]	; 0x90
   432a0:	orr	r0, r0, r6
   432a4:	ldr	r6, [sp, #148]	; 0x94
   432a8:	str	r0, [sp, #144]	; 0x90
   432ac:	ldr	r0, [sp, #152]	; 0x98
   432b0:	orr	r6, r6, r4
   432b4:	str	r6, [sp, #148]	; 0x94
   432b8:	ldr	r6, [sp, #156]	; 0x9c
   432bc:	cmp	r8, r0
   432c0:	orr	r6, r6, r5
   432c4:	str	r6, [sp, #156]	; 0x9c
   432c8:	ldr	r6, [sp, #160]	; 0xa0
   432cc:	orr	r6, r6, r7
   432d0:	ldr	r7, [sp, #132]	; 0x84
   432d4:	str	r6, [sp, #160]	; 0xa0
   432d8:	mov	r6, r0
   432dc:	orr	r7, r7, r1
   432e0:	ldr	r1, [sp, #136]	; 0x88
   432e4:	orr	r1, r1, r2
   432e8:	mov	r2, r1
   432ec:	ldr	r1, [sp, #140]	; 0x8c
   432f0:	beq	43484 <__assert_fail@plt+0x309d4>
   432f4:	mov	r0, #0
   432f8:	sub	lr, fp, #6144	; 0x1800
   432fc:	str	r2, [sp, #136]	; 0x88
   43300:	str	r7, [sp, #132]	; 0x84
   43304:	str	r0, [fp, #-3136]	; 0xfffff3c0
   43308:	add	r0, r8, r8, lsl #1
   4330c:	sub	r2, lr, #104	; 0x68
   43310:	add	r0, r2, r0, lsl #2
   43314:	ldr	r7, [r0, #4]
   43318:	cmp	r7, #1
   4331c:	blt	43378 <__assert_fail@plt+0x308c8>
   43320:	ldr	r4, [r0, #8]
   43324:	mov	r5, #0
   43328:	b	43338 <__assert_fail@plt+0x30888>
   4332c:	add	r5, r5, #1
   43330:	cmp	r5, r7
   43334:	bge	43374 <__assert_fail@plt+0x308c4>
   43338:	ldr	r0, [r4, r5, lsl #2]
   4333c:	ldr	r2, [r1, #12]
   43340:	ldr	r0, [r2, r0, lsl #2]
   43344:	cmn	r0, #1
   43348:	beq	4332c <__assert_fail@plt+0x3087c>
   4334c:	ldr	r1, [r1, #24]
   43350:	add	r0, r0, r0, lsl #1
   43354:	add	r1, r1, r0, lsl #2
   43358:	mov	r0, r9
   4335c:	bl	3e5f8 <__assert_fail@plt+0x2bb48>
   43360:	ldr	r1, [sp, #140]	; 0x8c
   43364:	mov	r3, #0
   43368:	cmp	r0, #0
   4336c:	beq	4332c <__assert_fail@plt+0x3087c>
   43370:	b	43618 <__assert_fail@plt+0x30b68>
   43374:	str	r3, [fp, #-56]	; 0xffffffc8
   43378:	sub	r0, fp, #56	; 0x38
   4337c:	mov	r2, r9
   43380:	mov	r3, #0
   43384:	bl	3e8f8 <__assert_fail@plt+0x2be48>
   43388:	ldr	r3, [fp, #-56]	; 0xffffffc8
   4338c:	mov	r7, r0
   43390:	sub	lr, fp, #1024	; 0x400
   43394:	sub	r0, lr, #56	; 0x38
   43398:	cmp	r7, #0
   4339c:	str	r7, [r0, r8, lsl #2]
   433a0:	bne	43238 <__assert_fail@plt+0x30788>
   433a4:	cmp	r3, #0
   433a8:	beq	43238 <__assert_fail@plt+0x30788>
   433ac:	b	43444 <__assert_fail@plt+0x30994>
   433b0:	ldr	r1, [sp, #140]	; 0x8c
   433b4:	sub	r0, fp, #56	; 0x38
   433b8:	mov	r2, r9
   433bc:	mov	r3, #1
   433c0:	bl	3e8f8 <__assert_fail@plt+0x2be48>
   433c4:	sub	lr, fp, #2048	; 0x800
   433c8:	cmp	r0, #0
   433cc:	sub	r1, lr, #56	; 0x38
   433d0:	str	r0, [r1, r8, lsl #2]
   433d4:	bne	433e4 <__assert_fail@plt+0x30934>
   433d8:	ldr	r1, [fp, #-56]	; 0xffffffc8
   433dc:	cmp	r1, #0
   433e0:	bne	43444 <__assert_fail@plt+0x30994>
   433e4:	cmp	r7, r0
   433e8:	beq	43410 <__assert_fail@plt+0x30960>
   433ec:	ldr	r1, [sp, #140]	; 0x8c
   433f0:	ldr	r2, [sp, #128]	; 0x80
   433f4:	ldr	r0, [r1, #92]	; 0x5c
   433f8:	cmp	r0, #1
   433fc:	mov	r0, #0
   43400:	movwgt	r0, #1
   43404:	orr	r2, r2, r0
   43408:	str	r2, [sp, #128]	; 0x80
   4340c:	b	43414 <__assert_fail@plt+0x30964>
   43410:	ldr	r1, [sp, #140]	; 0x8c
   43414:	sub	r0, fp, #56	; 0x38
   43418:	mov	r2, r9
   4341c:	mov	r3, #2
   43420:	bl	3e8f8 <__assert_fail@plt+0x2be48>
   43424:	ldr	r3, [fp, #-56]	; 0xffffffc8
   43428:	sub	lr, fp, #3072	; 0xc00
   4342c:	cmp	r0, #0
   43430:	sub	r1, lr, #56	; 0x38
   43434:	str	r0, [r1, r8, lsl #2]
   43438:	bne	4325c <__assert_fail@plt+0x307ac>
   4343c:	cmp	r3, #0
   43440:	beq	4325c <__assert_fail@plt+0x307ac>
   43444:	ldr	r0, [sp, #144]	; 0x90
   43448:	str	sl, [fp, #-3148]	; 0xfffff3b4
   4344c:	str	r0, [fp, #-3152]	; 0xfffff3b0
   43450:	ldr	r0, [sp, #148]	; 0x94
   43454:	str	r0, [fp, #-3156]	; 0xfffff3ac
   43458:	ldr	r0, [sp, #156]	; 0x9c
   4345c:	str	r0, [fp, #-3160]	; 0xfffff3a8
   43460:	ldr	r0, [sp, #160]	; 0xa0
   43464:	str	r0, [fp, #-3164]	; 0xfffff3a4
   43468:	ldr	r0, [sp, #132]	; 0x84
   4346c:	str	r0, [fp, #-3168]	; 0xfffff3a0
   43470:	ldr	r0, [sp, #136]	; 0x88
   43474:	str	r0, [fp, #-3172]	; 0xfffff39c
   43478:	ldr	r0, [sp, #164]	; 0xa4
   4347c:	str	r0, [fp, #-3176]	; 0xfffff398
   43480:	b	43658 <__assert_fail@plt+0x30ba8>
   43484:	ldr	r0, [sp, #144]	; 0x90
   43488:	str	sl, [fp, #-3148]	; 0xfffff3b4
   4348c:	ldr	r9, [sp, #128]	; 0x80
   43490:	ldr	sl, [sp, #164]	; 0xa4
   43494:	str	r0, [fp, #-3152]	; 0xfffff3b0
   43498:	ldr	r0, [sp, #148]	; 0x94
   4349c:	tst	r9, #1
   434a0:	str	r0, [fp, #-3156]	; 0xfffff3ac
   434a4:	ldr	r0, [sp, #156]	; 0x9c
   434a8:	str	r0, [fp, #-3160]	; 0xfffff3a8
   434ac:	ldr	r0, [sp, #160]	; 0xa0
   434b0:	str	r0, [fp, #-3164]	; 0xfffff3a4
   434b4:	mov	r0, #4
   434b8:	str	r7, [fp, #-3168]	; 0xfffff3a0
   434bc:	str	r2, [fp, #-3172]	; 0xfffff39c
   434c0:	str	sl, [fp, #-3176]	; 0xfffff398
   434c4:	bne	43790 <__assert_fail@plt+0x30ce0>
   434c8:	mov	r1, #256	; 0x100
   434cc:	bl	2fb8c <__assert_fail@plt+0x1d0dc>
   434d0:	ldr	r1, [sp, #12]
   434d4:	cmp	r0, #0
   434d8:	str	r0, [r1, #44]	; 0x2c
   434dc:	beq	43658 <__assert_fail@plt+0x30ba8>
   434e0:	ldr	r4, [sp, #140]	; 0x8c
   434e4:	mov	r1, #0
   434e8:	mov	r3, sl
   434ec:	mov	r2, #0
   434f0:	add	r8, sp, #168	; 0xa8
   434f4:	cmp	r3, #0
   434f8:	bne	43518 <__assert_fail@plt+0x30a68>
   434fc:	b	43590 <__assert_fail@plt+0x30ae0>
   43500:	sub	lr, fp, #3072	; 0xc00
   43504:	add	r8, r8, #4
   43508:	sub	r3, lr, #104	; 0x68
   4350c:	ldr	r3, [r3, r2, lsl #2]
   43510:	cmp	r3, #0
   43514:	beq	43590 <__assert_fail@plt+0x30ae0>
   43518:	add	r7, r4, r2, lsl #2
   4351c:	lsl	r6, r2, #5
   43520:	mov	r5, #1
   43524:	add	ip, r7, #96	; 0x60
   43528:	tst	r3, #1
   4352c:	bne	4354c <__assert_fail@plt+0x30a9c>
   43530:	lsr	r7, r3, #1
   43534:	cmp	r1, r3, lsr #1
   43538:	add	r6, r6, #1
   4353c:	lsl	r5, r5, #1
   43540:	mov	r3, r7
   43544:	bne	43528 <__assert_fail@plt+0x30a78>
   43548:	b	43590 <__assert_fail@plt+0x30ae0>
   4354c:	mov	lr, #0
   43550:	ldr	r7, [r8, lr, lsl #3]
   43554:	add	lr, lr, #4
   43558:	tst	r7, r5
   4355c:	beq	43550 <__assert_fail@plt+0x30aa0>
   43560:	ldr	r7, [ip]
   43564:	sub	r4, fp, #2048	; 0x800
   43568:	tst	r7, r5
   4356c:	sub	r7, r4, #56	; 0x38
   43570:	sub	r4, fp, #1024	; 0x400
   43574:	sub	r4, r4, #56	; 0x38
   43578:	moveq	r7, r4
   4357c:	ldr	r4, [sp, #140]	; 0x8c
   43580:	add	r7, r7, lr
   43584:	ldr	r7, [r7, #-4]
   43588:	str	r7, [r0, r6, lsl #2]
   4358c:	b	43530 <__assert_fail@plt+0x30a80>
   43590:	add	r2, r2, #1
   43594:	cmp	r2, #8
   43598:	bne	43500 <__assert_fail@plt+0x30a50>
   4359c:	ldr	r5, [sp, #152]	; 0x98
   435a0:	tst	sl, #1024	; 0x400
   435a4:	beq	435ec <__assert_fail@plt+0x30b3c>
   435a8:	add	r1, sp, #168	; 0xa8
   435ac:	mov	r2, r5
   435b0:	ldrb	r3, [r1, #1]
   435b4:	tst	r3, #4
   435b8:	bne	435d8 <__assert_fail@plt+0x30b28>
   435bc:	ldr	r3, [sp, #124]	; 0x7c
   435c0:	add	r1, r1, #32
   435c4:	subs	r2, r2, #1
   435c8:	add	r3, r3, #4
   435cc:	str	r3, [sp, #124]	; 0x7c
   435d0:	bne	435b0 <__assert_fail@plt+0x30b00>
   435d4:	b	435ec <__assert_fail@plt+0x30b3c>
   435d8:	ldr	r1, [sp, #124]	; 0x7c
   435dc:	tst	r9, #1
   435e0:	ldr	r1, [r1]
   435e4:	str	r1, [r0, #40]	; 0x28
   435e8:	strne	r1, [r0, #1064]	; 0x428
   435ec:	ldr	r0, [fp, #-3132]	; 0xfffff3c4
   435f0:	bl	30174 <__assert_fail@plt+0x1d6c4>
   435f4:	sub	lr, fp, #6144	; 0x1800
   435f8:	sub	r0, lr, #104	; 0x68
   435fc:	add	r4, r0, #8
   43600:	ldr	r0, [r4], #12
   43604:	bl	30174 <__assert_fail@plt+0x1d6c4>
   43608:	subs	r5, r5, #1
   4360c:	bne	43600 <__assert_fail@plt+0x30b50>
   43610:	mov	r0, #1
   43614:	b	43774 <__assert_fail@plt+0x30cc4>
   43618:	ldr	r1, [sp, #144]	; 0x90
   4361c:	str	sl, [fp, #-3148]	; 0xfffff3b4
   43620:	str	r0, [fp, #-56]	; 0xffffffc8
   43624:	str	r1, [fp, #-3152]	; 0xfffff3b0
   43628:	ldr	r1, [sp, #148]	; 0x94
   4362c:	str	r1, [fp, #-3156]	; 0xfffff3ac
   43630:	ldr	r1, [sp, #156]	; 0x9c
   43634:	str	r1, [fp, #-3160]	; 0xfffff3a8
   43638:	ldr	r1, [sp, #160]	; 0xa0
   4363c:	str	r1, [fp, #-3164]	; 0xfffff3a4
   43640:	ldr	r1, [sp, #132]	; 0x84
   43644:	str	r1, [fp, #-3168]	; 0xfffff3a0
   43648:	ldr	r1, [sp, #136]	; 0x88
   4364c:	str	r1, [fp, #-3172]	; 0xfffff39c
   43650:	ldr	r1, [sp, #164]	; 0xa4
   43654:	str	r1, [fp, #-3176]	; 0xfffff398
   43658:	ldr	r0, [fp, #-3132]	; 0xfffff3c4
   4365c:	bl	30174 <__assert_fail@plt+0x1d6c4>
   43660:	cmp	r6, #1
   43664:	blt	43730 <__assert_fail@plt+0x30c80>
   43668:	sub	lr, fp, #6144	; 0x1800
   4366c:	sub	r0, lr, #104	; 0x68
   43670:	add	r4, r0, #8
   43674:	ldr	r0, [r4], #12
   43678:	bl	30174 <__assert_fail@plt+0x1d6c4>
   4367c:	subs	r6, r6, #1
   43680:	bne	43674 <__assert_fail@plt+0x30bc4>
   43684:	b	43730 <__assert_fail@plt+0x30c80>
   43688:	ldr	r0, [sp, #44]	; 0x2c
   4368c:	str	sl, [fp, #-1052]	; 0xfffffbe4
   43690:	str	r5, [fp, #-1056]	; 0xfffffbe0
   43694:	str	r8, [fp, #-1060]	; 0xfffffbdc
   43698:	str	r6, [fp, #-1064]	; 0xfffffbd8
   4369c:	ldr	r6, [sp, #152]	; 0x98
   436a0:	str	r0, [fp, #-1068]	; 0xfffffbd4
   436a4:	ldr	r0, [sp, #48]	; 0x30
   436a8:	str	r0, [fp, #-1072]	; 0xfffffbd0
   436ac:	ldr	r0, [sp, #52]	; 0x34
   436b0:	str	r0, [fp, #-1076]	; 0xfffffbcc
   436b4:	ldr	r0, [sp, #56]	; 0x38
   436b8:	str	r0, [fp, #-1080]	; 0xfffffbc8
   436bc:	cmp	r6, #1
   436c0:	bge	43714 <__assert_fail@plt+0x30c64>
   436c4:	b	43730 <__assert_fail@plt+0x30c80>
   436c8:	ldr	r0, [sp, #32]
   436cc:	str	sl, [fp, #-1052]	; 0xfffffbe4
   436d0:	str	r0, [fp, #-1056]	; 0xfffffbe0
   436d4:	ldr	r0, [sp, #40]	; 0x28
   436d8:	str	r8, [fp, #-1060]	; 0xfffffbdc
   436dc:	str	r0, [fp, #-1064]	; 0xfffffbd8
   436e0:	ldr	r0, [sp, #44]	; 0x2c
   436e4:	str	r0, [fp, #-1068]	; 0xfffffbd4
   436e8:	ldr	r0, [sp, #48]	; 0x30
   436ec:	str	r0, [fp, #-1072]	; 0xfffffbd0
   436f0:	ldr	r0, [sp, #52]	; 0x34
   436f4:	str	r0, [fp, #-1076]	; 0xfffffbcc
   436f8:	ldr	r0, [sp, #56]	; 0x38
   436fc:	str	r0, [fp, #-1080]	; 0xfffffbc8
   43700:	mov	r0, #0
   43704:	str	r0, [r5]
   43708:	str	r0, [r4]
   4370c:	cmp	r6, #1
   43710:	blt	43730 <__assert_fail@plt+0x30c80>
   43714:	sub	lr, fp, #6144	; 0x1800
   43718:	sub	r0, lr, #104	; 0x68
   4371c:	add	r4, r0, #8
   43720:	ldr	r0, [r4], #12
   43724:	bl	30174 <__assert_fail@plt+0x1d6c4>
   43728:	subs	r6, r6, #1
   4372c:	bne	43720 <__assert_fail@plt+0x30c70>
   43730:	mov	r0, #0
   43734:	b	43774 <__assert_fail@plt+0x30cc4>
   43738:	mov	r0, #0
   4373c:	str	r0, [r6]
   43740:	str	r0, [r7]
   43744:	mov	r6, r5
   43748:	cmp	r6, #1
   4374c:	bge	43714 <__assert_fail@plt+0x30c64>
   43750:	b	43730 <__assert_fail@plt+0x30c80>
   43754:	mov	r0, #0
   43758:	bne	43774 <__assert_fail@plt+0x30cc4>
   4375c:	mov	r0, #4
   43760:	mov	r1, #256	; 0x100
   43764:	bl	2fb8c <__assert_fail@plt+0x1d0dc>
   43768:	cmp	r0, #0
   4376c:	str	r0, [r8, #44]	; 0x2c
   43770:	movwne	r0, #1
   43774:	sub	sp, fp, #48	; 0x30
   43778:	vpop	{d8-d9}
   4377c:	add	sp, sp, #4
   43780:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   43784:	ldr	r0, [fp, #-3132]	; 0xfffff3c4
   43788:	bl	30174 <__assert_fail@plt+0x1d6c4>
   4378c:	b	43668 <__assert_fail@plt+0x30bb8>
   43790:	mov	r1, #512	; 0x200
   43794:	bl	2fb8c <__assert_fail@plt+0x1d0dc>
   43798:	ldr	r1, [sp, #12]
   4379c:	cmp	r0, #0
   437a0:	str	r0, [r1, #48]	; 0x30
   437a4:	beq	43658 <__assert_fail@plt+0x30ba8>
   437a8:	sub	lr, fp, #1024	; 0x400
   437ac:	mov	r3, #0
   437b0:	add	r8, sp, #168	; 0xa8
   437b4:	mov	r5, sl
   437b8:	mov	r6, #0
   437bc:	sub	r1, lr, #56	; 0x38
   437c0:	sub	lr, fp, #2048	; 0x800
   437c4:	sub	ip, r1, #4
   437c8:	sub	r1, lr, #56	; 0x38
   437cc:	sub	lr, r1, #4
   437d0:	cmp	r5, #0
   437d4:	bne	437f4 <__assert_fail@plt+0x30d44>
   437d8:	b	43860 <__assert_fail@plt+0x30db0>
   437dc:	sub	r1, fp, #3072	; 0xc00
   437e0:	add	r8, r8, #4
   437e4:	sub	r1, r1, #104	; 0x68
   437e8:	ldr	r5, [r1, r6, lsl #2]
   437ec:	cmp	r5, #0
   437f0:	beq	43860 <__assert_fail@plt+0x30db0>
   437f4:	lsl	r4, r6, #5
   437f8:	mov	r1, #1
   437fc:	tst	r5, #1
   43800:	bne	43820 <__assert_fail@plt+0x30d70>
   43804:	lsr	r2, r5, #1
   43808:	cmp	r3, r5, lsr #1
   4380c:	add	r4, r4, #1
   43810:	lsl	r1, r1, #1
   43814:	mov	r5, r2
   43818:	bne	437fc <__assert_fail@plt+0x30d4c>
   4381c:	b	43860 <__assert_fail@plt+0x30db0>
   43820:	mov	r2, r8
   43824:	mov	sl, ip
   43828:	mov	r9, lr
   4382c:	ldr	r7, [r2], #32
   43830:	add	sl, sl, #4
   43834:	add	r9, r9, #4
   43838:	tst	r7, r1
   4383c:	beq	4382c <__assert_fail@plt+0x30d7c>
   43840:	ldr	r2, [sl]
   43844:	mov	r7, r0
   43848:	str	r2, [r7, r4, lsl #2]!
   4384c:	ldr	r2, [r9]
   43850:	ldr	r9, [sp, #128]	; 0x80
   43854:	ldr	sl, [sp, #164]	; 0xa4
   43858:	str	r2, [r7, #1024]	; 0x400
   4385c:	b	43804 <__assert_fail@plt+0x30d54>
   43860:	add	r6, r6, #1
   43864:	cmp	r6, #8
   43868:	bne	437dc <__assert_fail@plt+0x30d2c>
   4386c:	b	4359c <__assert_fail@plt+0x30aec>
   43870:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   43874:	add	fp, sp, #28
   43878:	sub	sp, sp, #52	; 0x34
   4387c:	ldr	r7, [r1, #8]
   43880:	ldr	r4, [r1, #12]
   43884:	mov	r5, r0
   43888:	mov	r0, #1
   4388c:	mov	r9, r1
   43890:	str	r0, [sp, #44]	; 0x2c
   43894:	str	r0, [sp, #40]	; 0x28
   43898:	mov	r0, #4
   4389c:	bl	327ac <__assert_fail@plt+0x1fcfc>
   438a0:	cmp	r0, #0
   438a4:	str	r0, [sp, #48]	; 0x30
   438a8:	beq	43cfc <__assert_fail@plt+0x3124c>
   438ac:	str	r7, [r0]
   438b0:	add	r3, sp, #40	; 0x28
   438b4:	mov	r0, r5
   438b8:	mov	r1, r9
   438bc:	mov	r2, r4
   438c0:	str	r5, [sp, #20]
   438c4:	bl	43d18 <__assert_fail@plt+0x31268>
   438c8:	cmp	r0, #0
   438cc:	bne	43cf4 <__assert_fail@plt+0x31244>
   438d0:	add	r0, r9, #16
   438d4:	mov	r5, r4
   438d8:	mov	r1, #0
   438dc:	str	r9, [sp, #12]
   438e0:	str	r0, [sp, #16]
   438e4:	cmp	r5, #1
   438e8:	bge	43918 <__assert_fail@plt+0x30e68>
   438ec:	b	43cb4 <__assert_fail@plt+0x31204>
   438f0:	mov	r0, r7
   438f4:	mov	r1, r9
   438f8:	mov	r2, r5
   438fc:	add	r3, sp, #40	; 0x28
   43900:	bl	43d18 <__assert_fail@plt+0x31268>
   43904:	ldr	r1, [sp, #8]
   43908:	cmp	r0, #0
   4390c:	bne	43cf4 <__assert_fail@plt+0x31244>
   43910:	cmp	r5, #1
   43914:	blt	43cb4 <__assert_fail@plt+0x31204>
   43918:	ldr	r0, [r9]
   4391c:	ldr	r7, [sp, #20]
   43920:	ldr	r2, [r0, r5, lsl #2]
   43924:	cmp	r2, #0
   43928:	mov	r2, #0
   4392c:	addeq	r2, r1, #1
   43930:	ldr	r1, [r7, #120]	; 0x78
   43934:	cmp	r2, r1
   43938:	bgt	43cbc <__assert_fail@plt+0x3120c>
   4393c:	mov	r0, #0
   43940:	str	r5, [sp, #24]
   43944:	sub	r5, r5, #1
   43948:	str	r2, [sp, #8]
   4394c:	str	r0, [sp, #44]	; 0x2c
   43950:	ldr	r0, [r7, #100]	; 0x64
   43954:	ldr	r1, [r0, r5, lsl #2]
   43958:	cmp	r1, #0
   4395c:	beq	438f0 <__assert_fail@plt+0x30e40>
   43960:	ldr	r0, [r1, #20]
   43964:	cmp	r0, #1
   43968:	blt	438f0 <__assert_fail@plt+0x30e40>
   4396c:	ldr	r6, [r7, #84]	; 0x54
   43970:	mov	r8, #0
   43974:	str	r5, [sp, #28]
   43978:	str	r1, [sp, #36]	; 0x24
   4397c:	str	r6, [sp, #32]
   43980:	b	439c4 <__assert_fail@plt+0x30f14>
   43984:	ldr	r2, [sp, #40]	; 0x28
   43988:	cmp	r2, #0
   4398c:	beq	43b84 <__assert_fail@plt+0x310d4>
   43990:	ldr	r1, [sp, #44]	; 0x2c
   43994:	cmp	r1, #0
   43998:	bne	43bac <__assert_fail@plt+0x310fc>
   4399c:	ldr	r0, [sp, #48]	; 0x30
   439a0:	str	sl, [r0]
   439a4:	ldr	r0, [sp, #44]	; 0x2c
   439a8:	add	r0, r0, #1
   439ac:	str	r0, [sp, #44]	; 0x2c
   439b0:	ldr	r1, [sp, #36]	; 0x24
   439b4:	add	r8, r8, #1
   439b8:	ldr	r0, [r1, #20]
   439bc:	cmp	r8, r0
   439c0:	bge	438f0 <__assert_fail@plt+0x30e40>
   439c4:	ldr	r0, [r1, #24]
   439c8:	ldr	sl, [r0, r8, lsl #2]
   439cc:	ldr	r0, [r6]
   439d0:	add	r0, r0, sl, lsl #3
   439d4:	ldrb	r0, [r0, #6]
   439d8:	tst	r0, #16
   439dc:	bne	43a7c <__assert_fail@plt+0x30fcc>
   439e0:	ldr	r0, [r6]
   439e4:	mov	r2, r5
   439e8:	add	r1, r0, sl, lsl #3
   439ec:	mov	r0, r7
   439f0:	bl	4252c <__assert_fail@plt+0x2fa7c>
   439f4:	cmp	r0, #0
   439f8:	beq	439b0 <__assert_fail@plt+0x30f00>
   439fc:	ldr	r0, [r9]
   43a00:	ldr	r1, [sp, #24]
   43a04:	ldr	r0, [r0, r1, lsl #2]
   43a08:	cmp	r0, #0
   43a0c:	beq	439b0 <__assert_fail@plt+0x30f00>
   43a10:	ldr	r2, [r0, #8]
   43a14:	cmp	r2, #1
   43a18:	blt	439b0 <__assert_fail@plt+0x30f00>
   43a1c:	ldr	r1, [r6, #12]
   43a20:	ldr	r0, [r0, #12]
   43a24:	subs	r3, r2, #1
   43a28:	mov	r2, #0
   43a2c:	ldr	r1, [r1, sl, lsl #2]
   43a30:	beq	43a58 <__assert_fail@plt+0x30fa8>
   43a34:	mov	r4, #1
   43a38:	add	r7, r2, r3
   43a3c:	lsr	r6, r7, #1
   43a40:	ldr	r5, [r0, r6, lsl #2]
   43a44:	cmp	r5, r1
   43a48:	addlt	r2, r4, r7, lsr #1
   43a4c:	movge	r3, r6
   43a50:	cmp	r2, r3
   43a54:	bcc	43a38 <__assert_fail@plt+0x30f88>
   43a58:	ldr	r2, [r0, r2, lsl #2]
   43a5c:	ldr	r9, [sp, #12]
   43a60:	ldr	r7, [sp, #20]
   43a64:	ldr	r5, [sp, #28]
   43a68:	ldr	r6, [sp, #32]
   43a6c:	mov	r0, #1
   43a70:	cmp	r2, r1
   43a74:	bne	439b0 <__assert_fail@plt+0x30f00>
   43a78:	b	43b4c <__assert_fail@plt+0x3109c>
   43a7c:	ldr	r4, [r7, #84]	; 0x54
   43a80:	ldr	r6, [r9, #12]
   43a84:	mov	r1, sl
   43a88:	mov	r2, r7
   43a8c:	mov	r3, r5
   43a90:	mov	r0, r4
   43a94:	bl	421c8 <__assert_fail@plt+0x2f718>
   43a98:	cmp	r0, #1
   43a9c:	blt	43ab8 <__assert_fail@plt+0x31008>
   43aa0:	add	r1, r0, r5
   43aa4:	cmp	r1, r6
   43aa8:	ble	43ac8 <__assert_fail@plt+0x31018>
   43aac:	ldr	r5, [sp, #28]
   43ab0:	ldr	r6, [sp, #32]
   43ab4:	b	43b4c <__assert_fail@plt+0x3109c>
   43ab8:	ldr	r6, [sp, #32]
   43abc:	cmp	r0, #0
   43ac0:	bne	43b4c <__assert_fail@plt+0x3109c>
   43ac4:	b	439e0 <__assert_fail@plt+0x30f30>
   43ac8:	ldr	r2, [r9]
   43acc:	ldr	r5, [sp, #28]
   43ad0:	ldr	r6, [sp, #32]
   43ad4:	ldr	r2, [r2, r1, lsl #2]
   43ad8:	cmp	r2, #0
   43adc:	beq	439e0 <__assert_fail@plt+0x30f30>
   43ae0:	ldr	r3, [r2, #8]
   43ae4:	cmp	r3, #1
   43ae8:	blt	439e0 <__assert_fail@plt+0x30f30>
   43aec:	ldr	r1, [r4, #12]
   43af0:	ldr	r2, [r2, #12]
   43af4:	subs	r4, r3, #1
   43af8:	mov	r3, #0
   43afc:	ldr	r1, [r1, sl, lsl #2]
   43b00:	beq	43b28 <__assert_fail@plt+0x31078>
   43b04:	mov	ip, #1
   43b08:	add	r5, r3, r4
   43b0c:	lsr	r6, r5, #1
   43b10:	ldr	r7, [r2, r6, lsl #2]
   43b14:	cmp	r7, r1
   43b18:	addlt	r3, ip, r5, lsr #1
   43b1c:	movge	r4, r6
   43b20:	cmp	r3, r4
   43b24:	bcc	43b08 <__assert_fail@plt+0x31058>
   43b28:	ldr	r9, [sp, #12]
   43b2c:	ldr	r7, [sp, #20]
   43b30:	ldr	r5, [sp, #28]
   43b34:	ldr	r6, [sp, #32]
   43b38:	cmp	r0, #0
   43b3c:	beq	439e0 <__assert_fail@plt+0x30f30>
   43b40:	ldr	r2, [r2, r3, lsl #2]
   43b44:	cmp	r2, r1
   43b48:	bne	439e0 <__assert_fail@plt+0x30f30>
   43b4c:	ldr	r1, [r9, #20]
   43b50:	cmp	r1, #0
   43b54:	beq	43984 <__assert_fail@plt+0x30ed4>
   43b58:	ldr	r1, [r6, #12]
   43b5c:	add	r3, r0, r5
   43b60:	mov	r0, r7
   43b64:	ldr	r2, [r1, sl, lsl #2]
   43b68:	ldr	r1, [sp, #16]
   43b6c:	str	sl, [sp]
   43b70:	str	r5, [sp, #4]
   43b74:	bl	44ebc <__assert_fail@plt+0x3240c>
   43b78:	cmp	r0, #0
   43b7c:	beq	43984 <__assert_fail@plt+0x30ed4>
   43b80:	b	439b0 <__assert_fail@plt+0x30f00>
   43b84:	mov	r0, #1
   43b88:	str	r0, [sp, #44]	; 0x2c
   43b8c:	str	r0, [sp, #40]	; 0x28
   43b90:	mov	r0, #4
   43b94:	bl	327ac <__assert_fail@plt+0x1fcfc>
   43b98:	cmp	r0, #0
   43b9c:	str	r0, [sp, #48]	; 0x30
   43ba0:	beq	43ce0 <__assert_fail@plt+0x31230>
   43ba4:	str	sl, [r0]
   43ba8:	b	439b0 <__assert_fail@plt+0x30f00>
   43bac:	cmp	r2, r1
   43bb0:	bne	43bdc <__assert_fail@plt+0x3112c>
   43bb4:	lsl	r0, r2, #1
   43bb8:	lsl	r1, r2, #3
   43bbc:	str	r0, [sp, #40]	; 0x28
   43bc0:	ldr	r0, [sp, #48]	; 0x30
   43bc4:	bl	33500 <__assert_fail@plt+0x20a50>
   43bc8:	cmp	r0, #0
   43bcc:	beq	43d10 <__assert_fail@plt+0x31260>
   43bd0:	str	r0, [sp, #48]	; 0x30
   43bd4:	ldr	r1, [sp, #44]	; 0x2c
   43bd8:	b	43be0 <__assert_fail@plt+0x31130>
   43bdc:	ldr	r0, [sp, #48]	; 0x30
   43be0:	ldr	r2, [r0]
   43be4:	cmp	r2, sl
   43be8:	ble	43c34 <__assert_fail@plt+0x31184>
   43bec:	cmp	r1, #1
   43bf0:	blt	43cac <__assert_fail@plt+0x311fc>
   43bf4:	ands	r3, r1, #3
   43bf8:	sub	r2, r1, #1
   43bfc:	beq	43c20 <__assert_fail@plt+0x31170>
   43c00:	add	r4, r0, r1, lsl #2
   43c04:	mov	r5, r4
   43c08:	ldr	r7, [r5, #-4]!
   43c0c:	subs	r3, r3, #1
   43c10:	sub	r1, r1, #1
   43c14:	str	r7, [r4]
   43c18:	mov	r4, r5
   43c1c:	bne	43c08 <__assert_fail@plt+0x31158>
   43c20:	cmp	r2, #3
   43c24:	bcs	43c68 <__assert_fail@plt+0x311b8>
   43c28:	ldr	r7, [sp, #20]
   43c2c:	ldr	r5, [sp, #28]
   43c30:	b	43ca8 <__assert_fail@plt+0x311f8>
   43c34:	add	r2, r0, r1, lsl #2
   43c38:	ldr	r3, [r2, #-4]
   43c3c:	cmp	r3, sl
   43c40:	ble	43cac <__assert_fail@plt+0x311fc>
   43c44:	sub	r1, r1, #2
   43c48:	str	r3, [r2]
   43c4c:	sub	r1, r1, #1
   43c50:	ldr	r3, [r2, #-8]
   43c54:	sub	r2, r2, #4
   43c58:	cmp	r3, sl
   43c5c:	bgt	43c48 <__assert_fail@plt+0x31198>
   43c60:	add	r1, r1, #2
   43c64:	b	43cac <__assert_fail@plt+0x311fc>
   43c68:	add	r2, r0, r1, lsl #2
   43c6c:	sub	r2, r2, #8
   43c70:	ldr	r6, [r2]
   43c74:	ldr	r5, [r2, #4]
   43c78:	ldmdb	r2, {r3, r7}
   43c7c:	sub	r1, r1, #4
   43c80:	cmp	r1, #0
   43c84:	stmda	r2, {r3, r7}
   43c88:	str	r6, [r2, #4]
   43c8c:	str	r5, [r2, #8]
   43c90:	sub	r2, r2, #16
   43c94:	bgt	43c70 <__assert_fail@plt+0x311c0>
   43c98:	ldr	r9, [sp, #12]
   43c9c:	ldr	r7, [sp, #20]
   43ca0:	ldr	r5, [sp, #28]
   43ca4:	ldr	r6, [sp, #32]
   43ca8:	mov	r1, #0
   43cac:	str	sl, [r0, r1, lsl #2]
   43cb0:	b	439a4 <__assert_fail@plt+0x30ef4>
   43cb4:	mov	r7, #0
   43cb8:	b	43ccc <__assert_fail@plt+0x3121c>
   43cbc:	lsl	r2, r5, #2
   43cc0:	mov	r1, #0
   43cc4:	mov	r7, #0
   43cc8:	bl	12834 <memset@plt>
   43ccc:	ldr	r0, [sp, #48]	; 0x30
   43cd0:	bl	30174 <__assert_fail@plt+0x1d6c4>
   43cd4:	mov	r0, r7
   43cd8:	sub	sp, fp, #28
   43cdc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   43ce0:	mov	r0, #0
   43ce4:	mov	r7, #12
   43ce8:	str	r0, [sp, #40]	; 0x28
   43cec:	str	r0, [sp, #44]	; 0x2c
   43cf0:	b	43ccc <__assert_fail@plt+0x3121c>
   43cf4:	mov	r7, r0
   43cf8:	b	43ccc <__assert_fail@plt+0x3121c>
   43cfc:	mov	r0, #0
   43d00:	mov	r7, #12
   43d04:	str	r0, [sp, #40]	; 0x28
   43d08:	str	r0, [sp, #44]	; 0x2c
   43d0c:	b	43cd4 <__assert_fail@plt+0x31224>
   43d10:	mov	r7, #12
   43d14:	b	43ccc <__assert_fail@plt+0x3121c>
   43d18:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   43d1c:	add	fp, sp, #28
   43d20:	sub	sp, sp, #132	; 0x84
   43d24:	mov	r6, r0
   43d28:	ldr	r8, [r0, #84]	; 0x54
   43d2c:	mov	r0, #0
   43d30:	mov	sl, r1
   43d34:	mov	r5, r2
   43d38:	str	r2, [sp, #76]	; 0x4c
   43d3c:	str	r0, [fp, #-76]	; 0xffffffb4
   43d40:	str	r6, [sp, #52]	; 0x34
   43d44:	ldr	r1, [r6, #100]	; 0x64
   43d48:	ldr	r7, [r1, r2, lsl #2]
   43d4c:	ldr	r1, [r3, #4]
   43d50:	cmp	r7, #0
   43d54:	mov	r9, r7
   43d58:	addne	r9, r9, #4
   43d5c:	cmp	r1, #0
   43d60:	beq	44124 <__assert_fail@plt+0x31674>
   43d64:	mov	lr, r3
   43d68:	cmp	r7, #0
   43d6c:	beq	4414c <__assert_fail@plt+0x3169c>
   43d70:	mov	r0, #0
   43d74:	mov	r1, r8
   43d78:	mov	r2, lr
   43d7c:	str	r8, [sp, #80]	; 0x50
   43d80:	str	lr, [sp, #60]	; 0x3c
   43d84:	str	r0, [fp, #-72]	; 0xffffffb8
   43d88:	sub	r0, fp, #72	; 0x48
   43d8c:	bl	41eb0 <__assert_fail@plt+0x2f400>
   43d90:	ldr	r8, [fp, #-72]	; 0xffffffb8
   43d94:	cmp	r8, #0
   43d98:	bne	44914 <__assert_fail@plt+0x31e64>
   43d9c:	mov	r5, r0
   43da0:	mov	r4, r0
   43da4:	ldr	r2, [sp, #60]	; 0x3c
   43da8:	ldr	r0, [r5, #28]!
   43dac:	cmp	r0, #0
   43db0:	bne	43e50 <__assert_fail@plt+0x313a0>
   43db4:	ldr	r0, [r2, #4]
   43db8:	mov	r1, #0
   43dbc:	str	r0, [r4, #28]
   43dc0:	lsl	r0, r0, #2
   43dc4:	str	r1, [r4, #32]
   43dc8:	bl	327ac <__assert_fail@plt+0x1fcfc>
   43dcc:	cmp	r0, #0
   43dd0:	mov	r1, #12
   43dd4:	mov	r8, #12
   43dd8:	str	r0, [r4, #36]	; 0x24
   43ddc:	movne	r1, #0
   43de0:	cmp	r0, #0
   43de4:	str	r1, [fp, #-72]	; 0xffffffb8
   43de8:	beq	44914 <__assert_fail@plt+0x31e64>
   43dec:	ldr	r2, [sp, #60]	; 0x3c
   43df0:	ldr	r0, [r2, #4]
   43df4:	cmp	r0, #1
   43df8:	blt	43e50 <__assert_fail@plt+0x313a0>
   43dfc:	str	r9, [sp, #72]	; 0x48
   43e00:	mov	r4, #0
   43e04:	ldr	r0, [r2, #8]
   43e08:	ldr	r1, [sp, #80]	; 0x50
   43e0c:	mov	r9, r2
   43e10:	ldr	r0, [r0, r4, lsl #2]
   43e14:	ldr	r1, [r1, #28]
   43e18:	add	r0, r0, r0, lsl #1
   43e1c:	add	r1, r1, r0, lsl #2
   43e20:	mov	r0, r5
   43e24:	bl	3e5f8 <__assert_fail@plt+0x2bb48>
   43e28:	cmp	r0, #0
   43e2c:	bne	44910 <__assert_fail@plt+0x31e60>
   43e30:	ldr	r0, [r9, #4]
   43e34:	add	r4, r4, #1
   43e38:	mov	r2, r9
   43e3c:	cmp	r4, r0
   43e40:	blt	43e04 <__assert_fail@plt+0x31354>
   43e44:	ldr	r9, [sp, #72]	; 0x48
   43e48:	mov	r0, #0
   43e4c:	str	r0, [fp, #-72]	; 0xffffffb8
   43e50:	mov	r0, r2
   43e54:	mov	r1, r9
   43e58:	mov	r2, r5
   43e5c:	bl	44954 <__assert_fail@plt+0x31ea4>
   43e60:	cmp	r0, #0
   43e64:	str	r0, [fp, #-76]	; 0xffffffb4
   43e68:	bne	44924 <__assert_fail@plt+0x31e74>
   43e6c:	ldr	r0, [sl, #20]
   43e70:	ldr	r5, [sp, #76]	; 0x4c
   43e74:	ldr	lr, [sp, #60]	; 0x3c
   43e78:	ldr	r8, [sp, #80]	; 0x50
   43e7c:	cmp	r0, #0
   43e80:	beq	4414c <__assert_fail@plt+0x3169c>
   43e84:	cmp	r0, #1
   43e88:	str	r7, [sp, #48]	; 0x30
   43e8c:	str	r9, [sp, #72]	; 0x48
   43e90:	blt	44138 <__assert_fail@plt+0x31688>
   43e94:	ldr	r0, [sp, #52]	; 0x34
   43e98:	mov	r9, #0
   43e9c:	str	sl, [sp, #64]	; 0x40
   43ea0:	ldr	r0, [r0, #116]	; 0x74
   43ea4:	str	r0, [sp, #68]	; 0x44
   43ea8:	b	43ec0 <__assert_fail@plt+0x31410>
   43eac:	ldr	sl, [sp, #64]	; 0x40
   43eb0:	add	r9, r9, #1
   43eb4:	ldr	r0, [sl, #20]
   43eb8:	cmp	r9, r0
   43ebc:	bge	44138 <__assert_fail@plt+0x31688>
   43ec0:	ldr	r0, [sl, #24]
   43ec4:	ldr	r1, [sp, #68]	; 0x44
   43ec8:	ldr	r0, [r0, r9, lsl #2]
   43ecc:	add	r0, r0, r0, lsl #1
   43ed0:	add	r1, r1, r0, lsl #3
   43ed4:	ldr	r2, [r1, #8]
   43ed8:	cmp	r2, r5
   43edc:	bge	43eac <__assert_fail@plt+0x313fc>
   43ee0:	ldr	r1, [r1, #4]
   43ee4:	cmp	r1, r5
   43ee8:	blt	43eac <__assert_fail@plt+0x313fc>
   43eec:	ldr	r1, [sp, #68]	; 0x44
   43ef0:	ldr	r2, [r8]
   43ef4:	ldr	r0, [r1, r0, lsl #3]!
   43ef8:	ldr	r1, [r1, #12]
   43efc:	ldr	r4, [r2, r0, lsl #3]
   43f00:	ldr	r0, [lr, #4]
   43f04:	cmp	r1, r5
   43f08:	bne	43f68 <__assert_fail@plt+0x314b8>
   43f0c:	cmp	r0, #1
   43f10:	blt	43eac <__assert_fail@plt+0x313fc>
   43f14:	ldr	r3, [lr, #8]
   43f18:	mvn	sl, #0
   43f1c:	mvn	r1, #0
   43f20:	b	43f3c <__assert_fail@plt+0x3148c>
   43f24:	ldr	r6, [r2, r7, lsl #3]
   43f28:	cmp	r4, r6
   43f2c:	moveq	sl, r7
   43f30:	add	r3, r3, #4
   43f34:	subs	r0, r0, #1
   43f38:	beq	43fd8 <__assert_fail@plt+0x31528>
   43f3c:	ldr	r7, [r3]
   43f40:	add	r6, r2, r7, lsl #3
   43f44:	ldrb	r6, [r6, #4]
   43f48:	cmp	r6, #9
   43f4c:	beq	43f24 <__assert_fail@plt+0x31474>
   43f50:	cmp	r6, #8
   43f54:	bne	43f30 <__assert_fail@plt+0x31480>
   43f58:	ldr	r6, [r2, r7, lsl #3]
   43f5c:	cmp	r4, r6
   43f60:	moveq	r1, r7
   43f64:	b	43f30 <__assert_fail@plt+0x31480>
   43f68:	cmp	r0, #1
   43f6c:	blt	43eac <__assert_fail@plt+0x313fc>
   43f70:	mov	r7, #0
   43f74:	ldr	r1, [lr, #8]
   43f78:	ldr	r1, [r1, r7, lsl #2]
   43f7c:	add	r3, r2, r1, lsl #3
   43f80:	ldrb	r3, [r3, #4]
   43f84:	orr	r3, r3, #1
   43f88:	cmp	r3, #9
   43f8c:	bne	43fc4 <__assert_fail@plt+0x31514>
   43f90:	ldr	r2, [r2, r1, lsl #3]
   43f94:	cmp	r4, r2
   43f98:	bne	43fc4 <__assert_fail@plt+0x31514>
   43f9c:	ldr	r3, [sp, #72]	; 0x48
   43fa0:	mov	r0, r8
   43fa4:	mov	r2, lr
   43fa8:	mov	r6, lr
   43fac:	bl	44b34 <__assert_fail@plt+0x32084>
   43fb0:	cmp	r0, #0
   43fb4:	bne	448d0 <__assert_fail@plt+0x31e20>
   43fb8:	ldr	r0, [r6, #4]
   43fbc:	ldr	r8, [sp, #80]	; 0x50
   43fc0:	mov	lr, r6
   43fc4:	add	r7, r7, #1
   43fc8:	cmp	r7, r0
   43fcc:	bge	43eac <__assert_fail@plt+0x313fc>
   43fd0:	ldr	r2, [r8]
   43fd4:	b	43f74 <__assert_fail@plt+0x314c4>
   43fd8:	cmp	r1, #0
   43fdc:	bmi	43ffc <__assert_fail@plt+0x3154c>
   43fe0:	ldr	r0, [sp, #80]	; 0x50
   43fe4:	ldr	r3, [sp, #72]	; 0x48
   43fe8:	mov	r2, lr
   43fec:	bl	44b34 <__assert_fail@plt+0x32084>
   43ff0:	ldr	lr, [sp, #60]	; 0x3c
   43ff4:	cmp	r0, #0
   43ff8:	bne	448d0 <__assert_fail@plt+0x31e20>
   43ffc:	ldr	r8, [sp, #80]	; 0x50
   44000:	cmp	sl, #0
   44004:	bmi	43eac <__assert_fail@plt+0x313fc>
   44008:	ldr	ip, [lr, #4]
   4400c:	cmp	ip, #1
   44010:	blt	43eac <__assert_fail@plt+0x313fc>
   44014:	mov	r4, #0
   44018:	b	4402c <__assert_fail@plt+0x3157c>
   4401c:	ldr	lr, [sp, #60]	; 0x3c
   44020:	add	r4, r4, #1
   44024:	cmp	r4, ip
   44028:	bge	43eac <__assert_fail@plt+0x313fc>
   4402c:	ldr	r0, [lr, #8]
   44030:	ldr	r1, [r0, r4, lsl #2]
   44034:	ldr	r0, [r8, #28]
   44038:	add	lr, r1, r1, lsl #1
   4403c:	add	r3, r0, lr, lsl #2
   44040:	ldr	r0, [r3, #4]
   44044:	cmp	r0, #1
   44048:	blt	44098 <__assert_fail@plt+0x315e8>
   4404c:	ldr	r3, [r3, #8]
   44050:	mov	r7, #0
   44054:	subs	r0, r0, #1
   44058:	str	ip, [sp, #56]	; 0x38
   4405c:	beq	44084 <__assert_fail@plt+0x315d4>
   44060:	add	r6, r7, r0
   44064:	mov	ip, #1
   44068:	lsr	r5, r6, #1
   4406c:	ldr	r2, [r3, r5, lsl #2]
   44070:	cmp	r2, sl
   44074:	addlt	r7, ip, r6, lsr #1
   44078:	movge	r0, r5
   4407c:	cmp	r7, r0
   44080:	bcc	44060 <__assert_fail@plt+0x315b0>
   44084:	ldr	r0, [r3, r7, lsl #2]
   44088:	ldr	r5, [sp, #76]	; 0x4c
   4408c:	ldr	ip, [sp, #56]	; 0x38
   44090:	cmp	r0, sl
   44094:	beq	4401c <__assert_fail@plt+0x3156c>
   44098:	ldr	r0, [r8, #24]
   4409c:	add	r2, r0, lr, lsl #2
   440a0:	ldr	lr, [sp, #60]	; 0x3c
   440a4:	ldr	r0, [r2, #4]
   440a8:	cmp	r0, #1
   440ac:	blt	440f4 <__assert_fail@plt+0x31644>
   440b0:	ldr	r2, [r2, #8]
   440b4:	mov	r3, #0
   440b8:	subs	r0, r0, #1
   440bc:	beq	440e4 <__assert_fail@plt+0x31634>
   440c0:	add	r7, r3, r0
   440c4:	lsr	r6, r7, #1
   440c8:	ldr	r5, [r2, r6, lsl #2]
   440cc:	cmp	r5, sl
   440d0:	movge	r0, r6
   440d4:	mov	r6, #1
   440d8:	addlt	r3, r6, r7, lsr #1
   440dc:	cmp	r3, r0
   440e0:	bcc	440c0 <__assert_fail@plt+0x31610>
   440e4:	ldr	r0, [r2, r3, lsl #2]
   440e8:	ldr	r5, [sp, #76]	; 0x4c
   440ec:	cmp	r0, sl
   440f0:	beq	44020 <__assert_fail@plt+0x31570>
   440f4:	ldr	r3, [sp, #72]	; 0x48
   440f8:	mov	r0, r8
   440fc:	mov	r2, lr
   44100:	mov	r6, lr
   44104:	bl	44b34 <__assert_fail@plt+0x32084>
   44108:	cmp	r0, #0
   4410c:	bne	448d0 <__assert_fail@plt+0x31e20>
   44110:	ldr	ip, [r6, #4]
   44114:	ldr	r8, [sp, #80]	; 0x50
   44118:	sub	r4, r4, #1
   4411c:	mov	lr, r6
   44120:	b	44020 <__assert_fail@plt+0x31570>
   44124:	ldr	r1, [sl]
   44128:	str	r0, [r1, r5, lsl #2]
   4412c:	cmp	r7, #0
   44130:	bne	44178 <__assert_fail@plt+0x316c8>
   44134:	b	448c0 <__assert_fail@plt+0x31e10>
   44138:	ldr	r6, [sp, #52]	; 0x34
   4413c:	ldr	r9, [sp, #72]	; 0x48
   44140:	ldr	r7, [sp, #48]	; 0x30
   44144:	mov	r0, #0
   44148:	str	r0, [fp, #-76]	; 0xffffffb4
   4414c:	sub	r0, fp, #76	; 0x4c
   44150:	mov	r1, r8
   44154:	mov	r2, lr
   44158:	bl	41eb0 <__assert_fail@plt+0x2f400>
   4415c:	ldr	r1, [sl]
   44160:	str	r0, [r1, r5, lsl #2]
   44164:	ldr	r8, [fp, #-76]	; 0xffffffb4
   44168:	cmp	r8, #0
   4416c:	bne	448c4 <__assert_fail@plt+0x31e14>
   44170:	cmp	r7, #0
   44174:	beq	448c0 <__assert_fail@plt+0x31e10>
   44178:	ldr	r0, [r6, #100]	; 0x64
   4417c:	ldr	r0, [r0, r5, lsl #2]
   44180:	ldrb	r0, [r0, #52]	; 0x34
   44184:	tst	r0, #64	; 0x40
   44188:	beq	448c0 <__assert_fail@plt+0x31e10>
   4418c:	ldr	r0, [r6, #108]	; 0x6c
   44190:	ldr	ip, [r6, #84]	; 0x54
   44194:	cmp	r0, #1
   44198:	blt	448ac <__assert_fail@plt+0x31dfc>
   4419c:	ldr	r1, [r6, #116]	; 0x74
   441a0:	mov	lr, #0
   441a4:	mov	r2, #1
   441a8:	mov	r3, r0
   441ac:	add	r7, r3, lr
   441b0:	add	r7, r7, r7, lsr #31
   441b4:	asr	r6, r7, #1
   441b8:	add	r4, r6, r6, lsl #1
   441bc:	add	r4, r1, r4, lsl #3
   441c0:	ldr	r4, [r4, #4]
   441c4:	cmp	r4, r5
   441c8:	addlt	lr, r2, r7, asr #1
   441cc:	movge	r3, r6
   441d0:	cmp	lr, r3
   441d4:	blt	441ac <__assert_fail@plt+0x316fc>
   441d8:	cmp	lr, r0
   441dc:	bge	448b8 <__assert_fail@plt+0x31e08>
   441e0:	cmn	lr, #1
   441e4:	beq	448b8 <__assert_fail@plt+0x31e08>
   441e8:	ldr	r0, [sp, #52]	; 0x34
   441ec:	add	r1, lr, lr, lsl #1
   441f0:	str	r1, [sp, #28]
   441f4:	ldr	r0, [r0, #116]	; 0x74
   441f8:	add	r0, r0, r1, lsl #3
   441fc:	ldr	r0, [r0, #4]
   44200:	cmp	r0, r5
   44204:	bne	448b8 <__assert_fail@plt+0x31e08>
   44208:	mov	r1, #0
   4420c:	ldr	r4, [sp, #52]	; 0x34
   44210:	str	r1, [fp, #-72]	; 0xffffffb8
   44214:	ldr	r0, [r9, #4]
   44218:	cmp	r0, #0
   4421c:	ble	448dc <__assert_fail@plt+0x31e2c>
   44220:	add	r0, r5, #1
   44224:	mov	r2, #0
   44228:	mov	r3, ip
   4422c:	str	ip, [sp, #80]	; 0x50
   44230:	str	sl, [sp, #64]	; 0x40
   44234:	str	r9, [sp, #72]	; 0x48
   44238:	str	lr, [sp, #56]	; 0x38
   4423c:	str	r0, [sp, #12]
   44240:	sub	r0, fp, #72	; 0x48
   44244:	add	r0, r0, #16
   44248:	str	r0, [sp, #8]
   4424c:	add	r0, sl, #16
   44250:	str	r0, [sp, #36]	; 0x24
   44254:	mov	r0, #0
   44258:	str	r0, [sp, #40]	; 0x28
   4425c:	b	44278 <__assert_fail@plt+0x317c8>
   44260:	ldr	r9, [sp, #72]	; 0x48
   44264:	ldr	r2, [sp, #48]	; 0x30
   44268:	ldr	r0, [r9, #4]
   4426c:	add	r2, r2, #1
   44270:	cmp	r2, r0
   44274:	bge	448e4 <__assert_fail@plt+0x31e34>
   44278:	ldr	r0, [r9, #8]
   4427c:	ldr	r1, [sl, #8]
   44280:	str	r2, [sp, #48]	; 0x30
   44284:	ldr	r7, [r0, r2, lsl #2]
   44288:	ldr	r0, [r3]
   4428c:	add	r0, r0, r7, lsl #3
   44290:	cmp	r7, r1
   44294:	ldrb	r0, [r0, #4]
   44298:	bne	442b4 <__assert_fail@plt+0x31804>
   4429c:	cmp	r0, #4
   442a0:	bne	44260 <__assert_fail@plt+0x317b0>
   442a4:	ldr	r0, [sl, #12]
   442a8:	cmp	r0, r5
   442ac:	bne	442bc <__assert_fail@plt+0x3180c>
   442b0:	b	44260 <__assert_fail@plt+0x317b0>
   442b4:	cmp	r0, #4
   442b8:	bne	44260 <__assert_fail@plt+0x317b0>
   442bc:	ldr	r0, [r4, #116]	; 0x74
   442c0:	ldr	r1, [sp, #28]
   442c4:	mov	r9, lr
   442c8:	str	r7, [sp, #60]	; 0x3c
   442cc:	add	r6, r0, r1, lsl #3
   442d0:	ldr	r0, [r6]
   442d4:	cmp	r0, r7
   442d8:	bne	443c8 <__assert_fail@plt+0x31918>
   442dc:	ldr	r0, [r6, #8]
   442e0:	ldr	r1, [r6, #12]
   442e4:	subs	r0, r1, r0
   442e8:	add	ip, r0, r5
   442ec:	beq	442fc <__assert_fail@plt+0x3184c>
   442f0:	ldr	r1, [r3, #12]
   442f4:	add	r1, r1, r7, lsl #2
   442f8:	b	4430c <__assert_fail@plt+0x3185c>
   442fc:	ldr	r1, [r3, #20]
   44300:	add	r2, r7, r7, lsl #1
   44304:	add	r1, r1, r2, lsl #2
   44308:	ldr	r1, [r1, #8]
   4430c:	ldr	r2, [sl, #12]
   44310:	cmp	ip, r2
   44314:	bgt	443c8 <__assert_fail@plt+0x31918>
   44318:	ldr	r2, [sl]
   4431c:	ldr	r2, [r2, ip, lsl #2]
   44320:	cmp	r2, #0
   44324:	beq	443c8 <__assert_fail@plt+0x31918>
   44328:	ldr	r3, [r2, #8]
   4432c:	cmp	r3, #1
   44330:	blt	443c4 <__assert_fail@plt+0x31914>
   44334:	ldr	r1, [r1]
   44338:	ldr	r2, [r2, #12]
   4433c:	subs	r7, r3, #1
   44340:	mov	r3, #0
   44344:	str	r8, [sp, #68]	; 0x44
   44348:	beq	44370 <__assert_fail@plt+0x318c0>
   4434c:	mov	r8, #1
   44350:	add	r5, r3, r7
   44354:	lsr	r4, r5, #1
   44358:	ldr	r0, [r2, r4, lsl #2]
   4435c:	cmp	r0, r1
   44360:	addlt	r3, r8, r5, lsr #1
   44364:	movge	r7, r4
   44368:	cmp	r3, r7
   4436c:	bcc	44350 <__assert_fail@plt+0x318a0>
   44370:	ldr	r0, [r2, r3, lsl #2]
   44374:	cmp	r0, r1
   44378:	bne	443b4 <__assert_fail@plt+0x31904>
   4437c:	ldr	r4, [sp, #52]	; 0x34
   44380:	ldr	r7, [sp, #60]	; 0x3c
   44384:	ldr	r5, [sp, #76]	; 0x4c
   44388:	stm	sp, {r1, ip}
   4438c:	ldr	r1, [sp, #36]	; 0x24
   44390:	mov	r0, r4
   44394:	mov	r2, r7
   44398:	mov	r3, r5
   4439c:	bl	44ebc <__assert_fail@plt+0x3240c>
   443a0:	ldr	r8, [sp, #68]	; 0x44
   443a4:	cmp	r0, #0
   443a8:	beq	443e4 <__assert_fail@plt+0x31934>
   443ac:	ldr	lr, [sp, #56]	; 0x38
   443b0:	b	443c4 <__assert_fail@plt+0x31914>
   443b4:	ldr	r5, [sp, #76]	; 0x4c
   443b8:	ldr	r4, [sp, #52]	; 0x34
   443bc:	ldr	r8, [sp, #68]	; 0x44
   443c0:	ldr	r7, [sp, #60]	; 0x3c
   443c4:	ldr	r3, [sp, #80]	; 0x50
   443c8:	mov	r0, r6
   443cc:	add	r6, r0, #24
   443d0:	ldrb	r0, [r0, #20]
   443d4:	add	r9, r9, #1
   443d8:	cmp	r0, #0
   443dc:	bne	442d0 <__assert_fail@plt+0x31820>
   443e0:	b	44260 <__assert_fail@plt+0x317b0>
   443e4:	ldr	r0, [sp, #40]	; 0x28
   443e8:	ldr	r6, [sp, #44]	; 0x2c
   443ec:	cmp	r0, #0
   443f0:	beq	44420 <__assert_fail@plt+0x31970>
   443f4:	ldr	r0, [sp, #20]
   443f8:	str	r5, [fp, #-60]	; 0xffffffc4
   443fc:	str	r7, [fp, #-64]	; 0xffffffc0
   44400:	cmp	r0, #0
   44404:	beq	44588 <__assert_fail@plt+0x31ad8>
   44408:	cmp	r6, #0
   4440c:	bne	44894 <__assert_fail@plt+0x31de4>
   44410:	mov	r6, #1
   44414:	str	r9, [r8]
   44418:	str	r8, [sp, #24]
   4441c:	b	4460c <__assert_fail@plt+0x31b5c>
   44420:	add	r0, sl, #12
   44424:	mov	r3, #20
   44428:	sub	r2, fp, #72	; 0x48
   4442c:	vld1.32	{d16-d17}, [r0]
   44430:	mov	r0, sl
   44434:	add	r1, r2, #12
   44438:	vld1.32	{d18-d19}, [r0], r3
   4443c:	vst1.32	{d16-d17}, [r1]
   44440:	mov	r1, r2
   44444:	vst1.64	{d18-d19}, [r1], r3
   44448:	ldr	r6, [r0]
   4444c:	mov	r0, #0
   44450:	cmp	r6, #1
   44454:	str	r6, [r1]
   44458:	blt	44570 <__assert_fail@plt+0x31ac0>
   4445c:	lsl	r0, r6, #2
   44460:	str	r6, [fp, #-56]	; 0xffffffc8
   44464:	bl	327ac <__assert_fail@plt+0x1fcfc>
   44468:	cmp	r0, #0
   4446c:	str	r0, [fp, #-48]	; 0xffffffd0
   44470:	beq	4492c <__assert_fail@plt+0x31e7c>
   44474:	mov	r4, r0
   44478:	ldr	r0, [sl, #20]
   4447c:	ldr	r1, [sl, #24]
   44480:	lsl	r2, r0, #2
   44484:	mov	r0, r4
   44488:	bl	124e0 <memcpy@plt>
   4448c:	str	r5, [fp, #-60]	; 0xffffffc4
   44490:	str	r7, [fp, #-64]	; 0xffffffc0
   44494:	mov	r8, r4
   44498:	lsl	r0, r6, #1
   4449c:	lsl	r1, r6, #3
   444a0:	str	r0, [sp, #20]
   444a4:	str	r0, [fp, #-56]	; 0xffffffc8
   444a8:	mov	r0, r4
   444ac:	bl	33500 <__assert_fail@plt+0x20a50>
   444b0:	cmp	r0, #0
   444b4:	beq	44948 <__assert_fail@plt+0x31e98>
   444b8:	mov	r8, r0
   444bc:	mov	r4, r0
   444c0:	str	r0, [fp, #-48]	; 0xffffffd0
   444c4:	str	r0, [sp, #16]
   444c8:	ldr	r0, [r8]
   444cc:	str	r4, [sp, #24]
   444d0:	cmp	r0, r9
   444d4:	ble	445c8 <__assert_fail@plt+0x31b18>
   444d8:	ldr	r4, [sp, #52]	; 0x34
   444dc:	cmp	r6, #1
   444e0:	mov	r1, r6
   444e4:	blt	44600 <__assert_fail@plt+0x31b50>
   444e8:	ands	r1, r6, #3
   444ec:	sub	r2, r6, #1
   444f0:	mov	ip, r6
   444f4:	mov	r0, r6
   444f8:	beq	44520 <__assert_fail@plt+0x31a70>
   444fc:	add	r7, r8, ip, lsl #2
   44500:	mov	r0, ip
   44504:	mov	r3, r7
   44508:	ldr	r6, [r3, #-4]!
   4450c:	subs	r1, r1, #1
   44510:	sub	r0, r0, #1
   44514:	str	r6, [r7]
   44518:	mov	r7, r3
   4451c:	bne	44508 <__assert_fail@plt+0x31a58>
   44520:	mov	r1, #0
   44524:	cmp	r2, #3
   44528:	bcc	44560 <__assert_fail@plt+0x31ab0>
   4452c:	add	r2, r8, r0, lsl #2
   44530:	sub	r2, r2, #8
   44534:	ldr	r6, [r2]
   44538:	ldr	r5, [r2, #4]
   4453c:	ldmdb	r2, {r3, r7}
   44540:	sub	r0, r0, #4
   44544:	cmp	r0, #0
   44548:	stmda	r2, {r3, r7}
   4454c:	str	r6, [r2, #4]
   44550:	str	r5, [r2, #8]
   44554:	sub	r2, r2, #16
   44558:	bgt	44534 <__assert_fail@plt+0x31a84>
   4455c:	ldr	r5, [sp, #76]	; 0x4c
   44560:	ldr	r4, [sp, #52]	; 0x34
   44564:	ldr	r7, [sp, #60]	; 0x3c
   44568:	mov	r6, ip
   4456c:	b	44600 <__assert_fail@plt+0x31b50>
   44570:	ldr	r1, [sp, #8]
   44574:	str	r0, [r1]
   44578:	str	r0, [r1, #4]
   4457c:	str	r0, [r1, #8]
   44580:	str	r5, [fp, #-60]	; 0xffffffc4
   44584:	str	r7, [fp, #-64]	; 0xffffffc0
   44588:	mov	r0, #1
   4458c:	str	r0, [fp, #-52]	; 0xffffffcc
   44590:	str	r0, [fp, #-56]	; 0xffffffc8
   44594:	mov	r0, #4
   44598:	bl	327ac <__assert_fail@plt+0x1fcfc>
   4459c:	cmp	r0, #0
   445a0:	str	r0, [fp, #-48]	; 0xffffffd0
   445a4:	beq	4492c <__assert_fail@plt+0x31e7c>
   445a8:	str	r9, [r0]
   445ac:	str	r0, [sp, #16]
   445b0:	str	r0, [sp, #68]	; 0x44
   445b4:	str	r0, [sp, #24]
   445b8:	mov	r0, #1
   445bc:	mov	r6, #1
   445c0:	str	r0, [sp, #20]
   445c4:	b	44610 <__assert_fail@plt+0x31b60>
   445c8:	add	r0, r8, r6, lsl #2
   445cc:	ldr	r4, [sp, #52]	; 0x34
   445d0:	mov	r1, r6
   445d4:	ldr	r2, [r0, #-4]
   445d8:	cmp	r2, r9
   445dc:	ble	44600 <__assert_fail@plt+0x31b50>
   445e0:	sub	r1, r6, #2
   445e4:	str	r2, [r0]
   445e8:	sub	r1, r1, #1
   445ec:	ldr	r2, [r0, #-8]
   445f0:	sub	r0, r0, #4
   445f4:	cmp	r2, r9
   445f8:	bgt	445e4 <__assert_fail@plt+0x31b34>
   445fc:	add	r1, r1, #2
   44600:	add	r6, r6, #1
   44604:	str	r9, [r8, r1, lsl #2]
   44608:	str	r8, [sp, #68]	; 0x44
   4460c:	str	r6, [fp, #-52]	; 0xffffffcc
   44610:	ldr	r0, [fp, #-72]	; 0xffffffb8
   44614:	sub	r1, fp, #72	; 0x48
   44618:	str	r6, [sp, #44]	; 0x2c
   4461c:	str	r0, [sp, #40]	; 0x28
   44620:	ldr	r0, [r0, r5, lsl #2]
   44624:	str	r0, [sp, #32]
   44628:	mov	r0, r4
   4462c:	bl	43870 <__assert_fail@plt+0x30dc0>
   44630:	cmp	r0, #0
   44634:	bne	4491c <__assert_fail@plt+0x31e6c>
   44638:	ldr	r6, [sl, #4]
   4463c:	ldr	lr, [sp, #56]	; 0x38
   44640:	cmp	r6, #0
   44644:	beq	446e4 <__assert_fail@plt+0x31c34>
   44648:	cmp	r5, #0
   4464c:	bmi	446d8 <__assert_fail@plt+0x31c28>
   44650:	ldr	sl, [sp, #40]	; 0x28
   44654:	ldr	r7, [sp, #12]
   44658:	b	44670 <__assert_fail@plt+0x31bc0>
   4465c:	str	r0, [r6]
   44660:	add	r6, r6, #4
   44664:	add	sl, sl, #4
   44668:	subs	r7, r7, #1
   4466c:	beq	446d8 <__assert_fail@plt+0x31c28>
   44670:	ldr	r1, [r6]
   44674:	ldr	r0, [sl]
   44678:	cmp	r1, #0
   4467c:	beq	4465c <__assert_fail@plt+0x31bac>
   44680:	cmp	r0, #0
   44684:	beq	44660 <__assert_fail@plt+0x31bb0>
   44688:	sub	r4, fp, #44	; 0x2c
   4468c:	add	r2, r0, #4
   44690:	add	r1, r1, #4
   44694:	mov	r0, r4
   44698:	bl	4081c <__assert_fail@plt+0x2dd6c>
   4469c:	cmp	r0, #0
   446a0:	str	r0, [fp, #-32]	; 0xffffffe0
   446a4:	bne	4491c <__assert_fail@plt+0x31e6c>
   446a8:	ldr	r1, [sp, #80]	; 0x50
   446ac:	sub	r0, fp, #32
   446b0:	mov	r2, r4
   446b4:	bl	41eb0 <__assert_fail@plt+0x2f400>
   446b8:	str	r0, [r6]
   446bc:	ldr	r0, [fp, #-36]	; 0xffffffdc
   446c0:	bl	30174 <__assert_fail@plt+0x1d6c4>
   446c4:	ldr	r8, [fp, #-32]	; 0xffffffe0
   446c8:	ldr	lr, [sp, #56]	; 0x38
   446cc:	cmp	r8, #0
   446d0:	beq	44660 <__assert_fail@plt+0x31bb0>
   446d4:	b	448ec <__assert_fail@plt+0x31e3c>
   446d8:	ldr	sl, [sp, #64]	; 0x40
   446dc:	ldr	r4, [sp, #52]	; 0x34
   446e0:	ldr	r7, [sp, #60]	; 0x3c
   446e4:	ldr	r0, [sp, #40]	; 0x28
   446e8:	ldr	r1, [sp, #32]
   446ec:	str	r1, [r0, r5, lsl #2]
   446f0:	ldr	r0, [sp, #44]	; 0x2c
   446f4:	cmp	r0, #1
   446f8:	blt	447d4 <__assert_fail@plt+0x31d24>
   446fc:	ldr	r8, [sp, #68]	; 0x44
   44700:	subs	r0, r0, #1
   44704:	mov	r1, #0
   44708:	beq	44734 <__assert_fail@plt+0x31c84>
   4470c:	mov	r2, r0
   44710:	mov	r4, #1
   44714:	add	r3, r1, r2
   44718:	lsr	r7, r3, #1
   4471c:	ldr	r6, [r8, r7, lsl #2]
   44720:	cmp	r6, r9
   44724:	addlt	r1, r4, r3, lsr #1
   44728:	movge	r2, r7
   4472c:	cmp	r1, r2
   44730:	bcc	44714 <__assert_fail@plt+0x31c64>
   44734:	ldr	r2, [r8, r1, lsl #2]
   44738:	mov	r7, #1
   4473c:	cmp	r2, r9
   44740:	mov	r2, r1
   44744:	mvnne	r2, #0
   44748:	cmp	r2, #0
   4474c:	bmi	447e0 <__assert_fail@plt+0x31d30>
   44750:	ldr	r3, [sp, #44]	; 0x2c
   44754:	ldr	r4, [sp, #52]	; 0x34
   44758:	cmp	r3, r2
   4475c:	ble	447ec <__assert_fail@plt+0x31d3c>
   44760:	cmp	r0, r2
   44764:	str	r0, [fp, #-52]	; 0xffffffcc
   44768:	ble	447fc <__assert_fail@plt+0x31d4c>
   4476c:	mvn	r2, r1
   44770:	add	r2, r3, r2
   44774:	cmp	r2, #4
   44778:	bcc	44854 <__assert_fail@plt+0x31da4>
   4477c:	bic	lr, r2, #3
   44780:	subs	r3, lr, #4
   44784:	add	r3, r7, r3, lsr #2
   44788:	and	r7, r3, #1
   4478c:	str	r7, [sp, #32]
   44790:	beq	44804 <__assert_fail@plt+0x31d54>
   44794:	sub	r7, r7, r3
   44798:	add	r3, r8, r1, lsl #2
   4479c:	mov	r6, #0
   447a0:	mov	ip, #20
   447a4:	add	r4, r3, #4
   447a8:	adds	r7, r7, #2
   447ac:	add	r6, r6, #8
   447b0:	vld1.32	{d16-d17}, [r4]
   447b4:	mov	r4, r3
   447b8:	vst1.32	{d16-d17}, [r4], ip
   447bc:	vld1.32	{d16-d17}, [r4]
   447c0:	add	r4, r3, #16
   447c4:	add	r3, r3, #32
   447c8:	vst1.32	{d16-d17}, [r4]
   447cc:	bne	447a4 <__assert_fail@plt+0x31cf4>
   447d0:	b	44808 <__assert_fail@plt+0x31d58>
   447d4:	ldr	r3, [sp, #80]	; 0x50
   447d8:	ldr	r8, [sp, #68]	; 0x44
   447dc:	b	44884 <__assert_fail@plt+0x31dd4>
   447e0:	ldr	r0, [sp, #16]
   447e4:	ldr	r4, [sp, #52]	; 0x34
   447e8:	b	447f0 <__assert_fail@plt+0x31d40>
   447ec:	ldr	r0, [sp, #16]
   447f0:	ldr	r7, [sp, #60]	; 0x3c
   447f4:	str	r0, [sp, #24]
   447f8:	b	44880 <__assert_fail@plt+0x31dd0>
   447fc:	ldr	r1, [sp, #16]
   44800:	b	4483c <__assert_fail@plt+0x31d8c>
   44804:	mov	r6, #0
   44808:	ldr	r3, [sp, #32]
   4480c:	cmp	r3, #0
   44810:	beq	44828 <__assert_fail@plt+0x31d78>
   44814:	add	r3, r1, r6
   44818:	add	r3, r8, r3, lsl #2
   4481c:	add	r7, r3, #4
   44820:	vld1.32	{d16-d17}, [r7]
   44824:	vst1.32	{d16-d17}, [r3]
   44828:	cmp	r2, lr
   4482c:	bne	44844 <__assert_fail@plt+0x31d94>
   44830:	ldr	r1, [sp, #16]
   44834:	ldr	r4, [sp, #52]	; 0x34
   44838:	ldr	lr, [sp, #56]	; 0x38
   4483c:	ldr	r7, [sp, #60]	; 0x3c
   44840:	b	44878 <__assert_fail@plt+0x31dc8>
   44844:	add	r1, r1, lr
   44848:	ldr	r4, [sp, #52]	; 0x34
   4484c:	ldr	lr, [sp, #56]	; 0x38
   44850:	ldr	r3, [sp, #44]	; 0x2c
   44854:	ldr	r7, [sp, #60]	; 0x3c
   44858:	sub	r2, r3, #1
   4485c:	add	r3, r8, r1, lsl #2
   44860:	ldr	r3, [r3, #4]
   44864:	str	r3, [r8, r1, lsl #2]
   44868:	add	r1, r1, #1
   4486c:	cmp	r2, r1
   44870:	bne	4485c <__assert_fail@plt+0x31dac>
   44874:	ldr	r1, [sp, #16]
   44878:	str	r0, [sp, #44]	; 0x2c
   4487c:	str	r1, [sp, #24]
   44880:	ldr	r3, [sp, #80]	; 0x50
   44884:	ldr	r0, [r4, #116]	; 0x74
   44888:	add	r1, r9, r9, lsl #1
   4488c:	add	r0, r0, r1, lsl #3
   44890:	b	443cc <__assert_fail@plt+0x3191c>
   44894:	ldr	r0, [sp, #20]
   44898:	ldr	r4, [sp, #24]
   4489c:	cmp	r0, r6
   448a0:	ldr	r0, [sp, #16]
   448a4:	beq	44498 <__assert_fail@plt+0x319e8>
   448a8:	b	444c4 <__assert_fail@plt+0x31a14>
   448ac:	mov	lr, #0
   448b0:	cmp	lr, r0
   448b4:	blt	441e0 <__assert_fail@plt+0x31730>
   448b8:	mov	r0, #0
   448bc:	str	r0, [fp, #-76]	; 0xffffffb4
   448c0:	mov	r8, #0
   448c4:	mov	r0, r8
   448c8:	sub	sp, fp, #28
   448cc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   448d0:	mov	r8, r0
   448d4:	str	r0, [fp, #-76]	; 0xffffffb4
   448d8:	b	448c4 <__assert_fail@plt+0x31e14>
   448dc:	str	r1, [fp, #-76]	; 0xffffffb4
   448e0:	b	448c0 <__assert_fail@plt+0x31e10>
   448e4:	str	r8, [sp, #68]	; 0x44
   448e8:	mov	r8, #0
   448ec:	ldr	r0, [fp, #-72]	; 0xffffffb8
   448f0:	cmp	r0, #0
   448f4:	beq	44900 <__assert_fail@plt+0x31e50>
   448f8:	ldr	r0, [sp, #68]	; 0x44
   448fc:	bl	30174 <__assert_fail@plt+0x1d6c4>
   44900:	cmp	r8, #0
   44904:	str	r8, [fp, #-76]	; 0xffffffb4
   44908:	moveq	r8, #0
   4490c:	b	448c4 <__assert_fail@plt+0x31e14>
   44910:	str	r0, [fp, #-72]	; 0xffffffb8
   44914:	str	r8, [fp, #-76]	; 0xffffffb4
   44918:	b	448c4 <__assert_fail@plt+0x31e14>
   4491c:	mov	r8, r0
   44920:	b	448ec <__assert_fail@plt+0x31e3c>
   44924:	mov	r8, r0
   44928:	b	448c4 <__assert_fail@plt+0x31e14>
   4492c:	mov	r1, #0
   44930:	mov	r0, #0
   44934:	mov	r8, #12
   44938:	str	r1, [fp, #-56]	; 0xffffffc8
   4493c:	str	r0, [sp, #68]	; 0x44
   44940:	str	r1, [fp, #-52]	; 0xffffffcc
   44944:	b	448ec <__assert_fail@plt+0x31e3c>
   44948:	str	r8, [sp, #68]	; 0x44
   4494c:	mov	r8, #12
   44950:	b	448ec <__assert_fail@plt+0x31e3c>
   44954:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   44958:	add	fp, sp, #28
   4495c:	sub	sp, sp, #4
   44960:	mov	r9, r0
   44964:	ldr	r0, [r1, #4]
   44968:	mov	r8, #0
   4496c:	cmp	r0, #0
   44970:	beq	44b20 <__assert_fail@plt+0x32070>
   44974:	mov	r5, r2
   44978:	ldr	r2, [r2, #4]
   4497c:	cmp	r2, #0
   44980:	beq	44b20 <__assert_fail@plt+0x32070>
   44984:	mov	sl, r1
   44988:	ldr	r1, [r9, #4]
   4498c:	ldr	r7, [r9]
   44990:	add	r3, r2, r0
   44994:	add	r6, r1, r3
   44998:	cmp	r6, r7
   4499c:	ble	449cc <__assert_fail@plt+0x31f1c>
   449a0:	ldr	r0, [r9, #8]
   449a4:	add	r4, r7, r3
   449a8:	lsl	r1, r4, #2
   449ac:	bl	33500 <__assert_fail@plt+0x20a50>
   449b0:	cmp	r0, #0
   449b4:	beq	44b2c <__assert_fail@plt+0x3207c>
   449b8:	str	r4, [r9]
   449bc:	str	r0, [r9, #8]
   449c0:	ldr	r1, [r9, #4]
   449c4:	ldr	r2, [r5, #4]
   449c8:	ldr	r0, [sl, #4]
   449cc:	ldr	lr, [r5, #8]
   449d0:	ldr	r4, [sl, #8]
   449d4:	add	r3, r0, r1
   449d8:	sub	r7, r1, #1
   449dc:	add	ip, r3, r2
   449e0:	sub	r0, r0, #1
   449e4:	sub	r3, r2, #1
   449e8:	ldr	r1, [lr, r3, lsl #2]
   449ec:	ldr	r6, [r4, r0, lsl #2]
   449f0:	cmp	r6, r1
   449f4:	beq	44a20 <__assert_fail@plt+0x31f70>
   449f8:	blt	44a10 <__assert_fail@plt+0x31f60>
   449fc:	sub	r6, r0, #1
   44a00:	cmp	r0, #0
   44a04:	mov	r0, r6
   44a08:	bgt	449ec <__assert_fail@plt+0x31f3c>
   44a0c:	b	44a84 <__assert_fail@plt+0x31fd4>
   44a10:	cmp	r2, #2
   44a14:	mov	r2, r3
   44a18:	bge	449e4 <__assert_fail@plt+0x31f34>
   44a1c:	b	44a84 <__assert_fail@plt+0x31fd4>
   44a20:	cmp	r7, #0
   44a24:	bmi	44a60 <__assert_fail@plt+0x31fb0>
   44a28:	ldr	r8, [r9, #8]
   44a2c:	mov	r1, r7
   44a30:	ldr	r7, [r8, r1, lsl #2]
   44a34:	cmp	r7, r6
   44a38:	ble	44a50 <__assert_fail@plt+0x31fa0>
   44a3c:	sub	r7, r1, #1
   44a40:	cmp	r1, #0
   44a44:	mov	r1, r7
   44a48:	bgt	44a30 <__assert_fail@plt+0x31f80>
   44a4c:	b	44a60 <__assert_fail@plt+0x31fb0>
   44a50:	mov	r7, r1
   44a54:	bne	44a60 <__assert_fail@plt+0x31fb0>
   44a58:	mov	r7, r1
   44a5c:	b	44a6c <__assert_fail@plt+0x31fbc>
   44a60:	ldr	r1, [r9, #8]
   44a64:	sub	ip, ip, #1
   44a68:	str	r6, [r1, ip, lsl #2]
   44a6c:	cmp	r0, #1
   44a70:	mov	r8, #0
   44a74:	blt	44a84 <__assert_fail@plt+0x31fd4>
   44a78:	cmp	r2, #2
   44a7c:	mov	r2, r3
   44a80:	bge	449e0 <__assert_fail@plt+0x31f30>
   44a84:	ldr	r2, [r9, #4]
   44a88:	ldr	lr, [sl, #4]
   44a8c:	ldr	r4, [r5, #4]
   44a90:	ldr	r0, [r9, #8]
   44a94:	subs	r1, r2, #1
   44a98:	add	r3, r1, lr
   44a9c:	add	r3, r3, r4
   44aa0:	sub	r7, r3, ip
   44aa4:	add	r6, r7, #1
   44aa8:	add	r5, r6, r2
   44aac:	str	r5, [r9, #4]
   44ab0:	blt	44b10 <__assert_fail@plt+0x32060>
   44ab4:	cmp	r7, #0
   44ab8:	bmi	44b10 <__assert_fail@plt+0x32060>
   44abc:	add	r2, r2, r4
   44ac0:	add	r2, r2, lr
   44ac4:	sub	r2, r2, ip
   44ac8:	add	r7, r0, r2, lsl #2
   44acc:	ldr	r2, [r0, r1, lsl #2]
   44ad0:	ldr	r5, [r0, r3, lsl #2]
   44ad4:	cmp	r5, r2
   44ad8:	bgt	44af4 <__assert_fail@plt+0x32044>
   44adc:	str	r2, [r7, r1, lsl #2]
   44ae0:	sub	r2, r1, #1
   44ae4:	cmp	r1, #0
   44ae8:	mov	r1, r2
   44aec:	bgt	44acc <__assert_fail@plt+0x3201c>
   44af0:	b	44b10 <__assert_fail@plt+0x32060>
   44af4:	str	r5, [r7, r1, lsl #2]
   44af8:	sub	r7, r7, #4
   44afc:	subs	r6, r6, #1
   44b00:	sub	r3, r3, #1
   44b04:	mov	r2, #0
   44b08:	bne	44acc <__assert_fail@plt+0x3201c>
   44b0c:	b	44b14 <__assert_fail@plt+0x32064>
   44b10:	mov	r2, r6
   44b14:	add	r1, r0, ip, lsl #2
   44b18:	lsl	r2, r2, #2
   44b1c:	bl	124e0 <memcpy@plt>
   44b20:	mov	r0, r8
   44b24:	sub	sp, fp, #28
   44b28:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   44b2c:	mov	r8, #12
   44b30:	b	44b20 <__assert_fail@plt+0x32070>
   44b34:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   44b38:	add	fp, sp, #28
   44b3c:	sub	sp, sp, #44	; 0x2c
   44b40:	mov	ip, r0
   44b44:	ldr	r0, [r0, #28]
   44b48:	mov	r8, r2
   44b4c:	add	r2, r1, r1, lsl #1
   44b50:	mov	r4, #0
   44b54:	str	r3, [sp, #4]
   44b58:	str	r4, [sp, #36]	; 0x24
   44b5c:	str	r4, [sp, #32]
   44b60:	str	r4, [sp, #40]	; 0x28
   44b64:	add	r2, r0, r2, lsl #2
   44b68:	mov	r0, r2
   44b6c:	ldr	r7, [r0, #4]!
   44b70:	str	r0, [sp, #28]
   44b74:	cmp	r7, #1
   44b78:	blt	44e90 <__assert_fail@plt+0x323e0>
   44b7c:	add	r4, r2, #8
   44b80:	mov	r9, #0
   44b84:	mov	sl, #1
   44b88:	str	r2, [sp]
   44b8c:	str	r1, [sp, #12]
   44b90:	str	ip, [sp, #8]
   44b94:	str	r4, [sp, #20]
   44b98:	b	44ba8 <__assert_fail@plt+0x320f8>
   44b9c:	add	r9, r9, #1
   44ba0:	cmp	r9, r7
   44ba4:	bge	44d68 <__assert_fail@plt+0x322b8>
   44ba8:	ldr	r3, [r4]
   44bac:	ldr	r0, [r3, r9, lsl #2]
   44bb0:	cmp	r0, r1
   44bb4:	beq	44b9c <__assert_fail@plt+0x320ec>
   44bb8:	ldr	r2, [ip]
   44bbc:	add	r2, r2, r0, lsl #3
   44bc0:	ldrb	r2, [r2, #4]
   44bc4:	tst	r2, #8
   44bc8:	beq	44b9c <__assert_fail@plt+0x320ec>
   44bcc:	ldr	r2, [ip, #20]
   44bd0:	add	r0, r0, r0, lsl #1
   44bd4:	mvn	lr, #0
   44bd8:	str	r7, [sp, #24]
   44bdc:	str	r0, [sp, #16]
   44be0:	add	r0, r2, r0, lsl #2
   44be4:	ldr	r6, [r0, #4]
   44be8:	ldr	r0, [r0, #8]
   44bec:	cmp	r6, #2
   44bf0:	ldr	r5, [r0]
   44bf4:	ldrge	lr, [r0, #4]
   44bf8:	cmp	r7, #1
   44bfc:	blt	44c40 <__assert_fail@plt+0x32190>
   44c00:	mov	r2, #0
   44c04:	subs	r6, r7, #1
   44c08:	beq	44c2c <__assert_fail@plt+0x3217c>
   44c0c:	add	r4, r2, r6
   44c10:	lsr	r7, r4, #1
   44c14:	ldr	r0, [r3, r7, lsl #2]
   44c18:	cmp	r0, r5
   44c1c:	addlt	r2, sl, r4, lsr #1
   44c20:	movge	r6, r7
   44c24:	cmp	r2, r6
   44c28:	bcc	44c0c <__assert_fail@plt+0x3215c>
   44c2c:	ldr	r0, [r3, r2, lsl #2]
   44c30:	ldr	r4, [sp, #20]
   44c34:	ldr	r7, [sp, #24]
   44c38:	cmp	r0, r5
   44c3c:	beq	44c98 <__assert_fail@plt+0x321e8>
   44c40:	ldr	r0, [r8, #4]
   44c44:	cmp	r0, #1
   44c48:	blt	44c98 <__assert_fail@plt+0x321e8>
   44c4c:	ldr	r1, [r8, #8]
   44c50:	subs	r4, r0, #1
   44c54:	mov	r6, #0
   44c58:	beq	44c7c <__assert_fail@plt+0x321cc>
   44c5c:	add	r0, r6, r4
   44c60:	lsr	r7, r0, #1
   44c64:	ldr	ip, [r1, r7, lsl #2]
   44c68:	cmp	ip, r5
   44c6c:	addlt	r6, sl, r0, lsr #1
   44c70:	movge	r4, r7
   44c74:	cmp	r6, r4
   44c78:	bcc	44c5c <__assert_fail@plt+0x321ac>
   44c7c:	ldr	r0, [r1, r6, lsl #2]
   44c80:	ldr	r1, [sp, #12]
   44c84:	ldr	ip, [sp, #8]
   44c88:	ldr	r4, [sp, #20]
   44c8c:	ldr	r7, [sp, #24]
   44c90:	cmp	r0, r5
   44c94:	beq	44d34 <__assert_fail@plt+0x32284>
   44c98:	cmp	lr, #1
   44c9c:	blt	44b9c <__assert_fail@plt+0x320ec>
   44ca0:	cmp	r7, #1
   44ca4:	blt	44ce4 <__assert_fail@plt+0x32234>
   44ca8:	mov	r2, #0
   44cac:	subs	r6, r7, #1
   44cb0:	beq	44cd4 <__assert_fail@plt+0x32224>
   44cb4:	add	r0, r2, r6
   44cb8:	lsr	r7, r0, #1
   44cbc:	ldr	r5, [r3, r7, lsl #2]
   44cc0:	cmp	r5, lr
   44cc4:	addlt	r2, sl, r0, lsr #1
   44cc8:	movge	r6, r7
   44ccc:	cmp	r2, r6
   44cd0:	bcc	44cb4 <__assert_fail@plt+0x32204>
   44cd4:	ldr	r0, [r3, r2, lsl #2]
   44cd8:	ldr	r7, [sp, #24]
   44cdc:	cmp	r0, lr
   44ce0:	beq	44b9c <__assert_fail@plt+0x320ec>
   44ce4:	ldr	r0, [r8, #4]
   44ce8:	cmp	r0, #1
   44cec:	blt	44b9c <__assert_fail@plt+0x320ec>
   44cf0:	ldr	r4, [r8, #8]
   44cf4:	subs	r6, r0, #1
   44cf8:	mov	r3, #0
   44cfc:	beq	44d20 <__assert_fail@plt+0x32270>
   44d00:	add	r0, r3, r6
   44d04:	lsr	r7, r0, #1
   44d08:	ldr	r5, [r4, r7, lsl #2]
   44d0c:	cmp	r5, lr
   44d10:	addlt	r3, sl, r0, lsr #1
   44d14:	movge	r6, r7
   44d18:	cmp	r3, r6
   44d1c:	bcc	44d00 <__assert_fail@plt+0x32250>
   44d20:	ldr	r0, [r4, r3, lsl #2]
   44d24:	ldr	r4, [sp, #20]
   44d28:	ldr	r7, [sp, #24]
   44d2c:	cmp	r0, lr
   44d30:	bne	44b9c <__assert_fail@plt+0x320ec>
   44d34:	ldr	r0, [ip, #28]
   44d38:	ldr	r1, [sp, #16]
   44d3c:	add	r2, r0, r1, lsl #2
   44d40:	ldr	r1, [sp, #4]
   44d44:	add	r0, sp, #32
   44d48:	bl	44954 <__assert_fail@plt+0x31ea4>
   44d4c:	cmp	r0, #0
   44d50:	bne	44eac <__assert_fail@plt+0x323fc>
   44d54:	ldr	r0, [sp, #28]
   44d58:	ldr	r1, [sp, #12]
   44d5c:	ldr	ip, [sp, #8]
   44d60:	ldr	r7, [r0]
   44d64:	b	44b9c <__assert_fail@plt+0x320ec>
   44d68:	ldr	r0, [sp]
   44d6c:	cmp	r7, #0
   44d70:	mov	r4, #0
   44d74:	ble	44e90 <__assert_fail@plt+0x323e0>
   44d78:	ldr	r9, [sp, #36]	; 0x24
   44d7c:	ldr	lr, [r0, #8]
   44d80:	ldr	r0, [sp, #40]	; 0x28
   44d84:	mov	ip, #0
   44d88:	mov	r6, #1
   44d8c:	sub	r1, r9, #1
   44d90:	str	lr, [sp, #20]
   44d94:	str	r9, [sp, #16]
   44d98:	str	r1, [sp, #24]
   44d9c:	b	44db4 <__assert_fail@plt+0x32304>
   44da0:	ldr	r1, [sp, #28]
   44da4:	add	ip, ip, #1
   44da8:	ldr	r1, [r1]
   44dac:	cmp	ip, r1
   44db0:	bge	44e98 <__assert_fail@plt+0x323e8>
   44db4:	ldr	r5, [lr, ip, lsl #2]
   44db8:	cmp	r9, #1
   44dbc:	blt	44dfc <__assert_fail@plt+0x3234c>
   44dc0:	ldr	r2, [sp, #24]
   44dc4:	mov	r1, #0
   44dc8:	cmp	r2, #0
   44dcc:	beq	44df0 <__assert_fail@plt+0x32340>
   44dd0:	add	r3, r1, r2
   44dd4:	lsr	r4, r3, #1
   44dd8:	ldr	r7, [r0, r4, lsl #2]
   44ddc:	cmp	r7, r5
   44de0:	addlt	r1, r6, r3, lsr #1
   44de4:	movge	r2, r4
   44de8:	cmp	r1, r2
   44dec:	bcc	44dd0 <__assert_fail@plt+0x32320>
   44df0:	ldr	r1, [r0, r1, lsl #2]
   44df4:	cmp	r1, r5
   44df8:	beq	44da0 <__assert_fail@plt+0x322f0>
   44dfc:	ldr	r3, [r8, #4]
   44e00:	cmp	r3, #1
   44e04:	blt	44da0 <__assert_fail@plt+0x322f0>
   44e08:	mov	r1, r8
   44e0c:	ldr	r1, [r8, #8]
   44e10:	subs	sl, r3, #1
   44e14:	mov	r2, #0
   44e18:	beq	44e40 <__assert_fail@plt+0x32390>
   44e1c:	mov	r4, sl
   44e20:	add	r7, r2, r4
   44e24:	lsr	lr, r7, #1
   44e28:	ldr	r9, [r1, lr, lsl #2]
   44e2c:	cmp	r9, r5
   44e30:	addlt	r2, r6, r7, lsr #1
   44e34:	movge	r4, lr
   44e38:	cmp	r2, r4
   44e3c:	bcc	44e20 <__assert_fail@plt+0x32370>
   44e40:	ldr	r7, [r1, r2, lsl #2]
   44e44:	ldr	lr, [sp, #20]
   44e48:	ldr	r9, [sp, #16]
   44e4c:	mov	r4, r2
   44e50:	cmp	r7, r5
   44e54:	mvnne	r4, #0
   44e58:	cmp	r4, #0
   44e5c:	bmi	44da0 <__assert_fail@plt+0x322f0>
   44e60:	cmp	r3, r4
   44e64:	strgt	sl, [r8, #4]
   44e68:	cmpgt	sl, r4
   44e6c:	ble	44da0 <__assert_fail@plt+0x322f0>
   44e70:	add	r3, r1, r2, lsl #2
   44e74:	ldr	r3, [r3, #4]
   44e78:	str	r3, [r1, r2, lsl #2]
   44e7c:	add	r2, r2, #1
   44e80:	ldr	r3, [r8, #4]
   44e84:	cmp	r2, r3
   44e88:	blt	44e70 <__assert_fail@plt+0x323c0>
   44e8c:	b	44da0 <__assert_fail@plt+0x322f0>
   44e90:	ldr	r0, [sp, #40]	; 0x28
   44e94:	b	44e9c <__assert_fail@plt+0x323ec>
   44e98:	mov	r4, #0
   44e9c:	bl	30174 <__assert_fail@plt+0x1d6c4>
   44ea0:	mov	r0, r4
   44ea4:	sub	sp, fp, #28
   44ea8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   44eac:	mov	r1, r0
   44eb0:	ldr	r0, [sp, #40]	; 0x28
   44eb4:	mov	r4, r1
   44eb8:	b	44e9c <__assert_fail@plt+0x323ec>
   44ebc:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   44ec0:	add	fp, sp, #28
   44ec4:	sub	sp, sp, #28
   44ec8:	ldr	ip, [r0, #108]	; 0x6c
   44ecc:	str	r1, [sp, #24]
   44ed0:	ldr	r1, [r0, #84]	; 0x54
   44ed4:	mov	r4, r3
   44ed8:	str	r2, [sp, #8]
   44edc:	str	r0, [sp, #16]
   44ee0:	cmp	ip, #1
   44ee4:	str	r1, [sp, #20]
   44ee8:	blt	44f50 <__assert_fail@plt+0x324a0>
   44eec:	ldr	r1, [r0, #116]	; 0x74
   44ef0:	mov	r9, #0
   44ef4:	mov	r2, #1
   44ef8:	mov	r3, ip
   44efc:	add	r7, r3, r9
   44f00:	add	r7, r7, r7, lsr #31
   44f04:	asr	r6, r7, #1
   44f08:	add	r5, r6, r6, lsl #1
   44f0c:	add	r5, r1, r5, lsl #3
   44f10:	ldr	r5, [r5, #4]
   44f14:	cmp	r5, r4
   44f18:	addlt	r9, r2, r7, asr #1
   44f1c:	movge	r3, r6
   44f20:	cmp	r9, r3
   44f24:	blt	44efc <__assert_fail@plt+0x3244c>
   44f28:	cmp	r9, ip
   44f2c:	bge	44f5c <__assert_fail@plt+0x324ac>
   44f30:	ldr	r0, [sp, #16]
   44f34:	add	r2, r9, r9, lsl #1
   44f38:	ldr	r1, [r0, #116]	; 0x74
   44f3c:	add	r1, r1, r2, lsl #3
   44f40:	ldr	r1, [r1, #4]
   44f44:	cmp	r1, r4
   44f48:	mvnne	r9, #0
   44f4c:	b	44f60 <__assert_fail@plt+0x324b0>
   44f50:	mov	r9, #0
   44f54:	cmp	r9, ip
   44f58:	blt	44f30 <__assert_fail@plt+0x32480>
   44f5c:	mvn	r9, #0
   44f60:	ldr	r8, [fp, #12]
   44f64:	cmp	ip, #1
   44f68:	blt	44fb0 <__assert_fail@plt+0x32500>
   44f6c:	ldr	r0, [sp, #16]
   44f70:	mov	r6, #0
   44f74:	mov	r2, #1
   44f78:	mov	r3, ip
   44f7c:	ldr	r1, [r0, #116]	; 0x74
   44f80:	add	r7, r3, r6
   44f84:	add	r7, r7, r7, lsr #31
   44f88:	asr	r5, r7, #1
   44f8c:	add	r0, r5, r5, lsl #1
   44f90:	add	r0, r1, r0, lsl #3
   44f94:	ldr	r0, [r0, #4]
   44f98:	cmp	r0, r8
   44f9c:	addlt	r6, r2, r7, asr #1
   44fa0:	movge	r3, r5
   44fa4:	cmp	r6, r3
   44fa8:	blt	44f80 <__assert_fail@plt+0x324d0>
   44fac:	b	44fb4 <__assert_fail@plt+0x32504>
   44fb0:	mov	r6, #0
   44fb4:	cmp	r6, ip
   44fb8:	ldr	ip, [sp, #16]
   44fbc:	bge	44fdc <__assert_fail@plt+0x3252c>
   44fc0:	ldr	r0, [ip, #116]	; 0x74
   44fc4:	add	r1, r6, r6, lsl #1
   44fc8:	add	r0, r0, r1, lsl #3
   44fcc:	ldr	r0, [r0, #4]
   44fd0:	cmp	r0, r8
   44fd4:	mvnne	r6, #0
   44fd8:	b	44fe0 <__assert_fail@plt+0x32530>
   44fdc:	mvn	r6, #0
   44fe0:	ldr	r0, [sp, #24]
   44fe4:	ldr	r0, [r0, #4]
   44fe8:	cmp	r0, #1
   44fec:	blt	4516c <__assert_fail@plt+0x326bc>
   44ff0:	mov	sl, #0
   44ff4:	str	r4, [sp, #12]
   44ff8:	ldr	r0, [sp, #24]
   44ffc:	ldr	r3, [ip, #116]	; 0x74
   45000:	ldr	r5, [sp, #20]
   45004:	ldr	r0, [r0, #8]
   45008:	ldr	r5, [r5]
   4500c:	ldr	r2, [r0, sl, lsl #2]
   45010:	mov	r0, r3
   45014:	add	r1, r2, r2, lsl #1
   45018:	ldr	r7, [r0, r1, lsl #3]!
   4501c:	ldr	r0, [r0, #8]
   45020:	ldr	r5, [r5, r7, lsl #3]
   45024:	mvn	r7, #0
   45028:	cmp	r0, r4
   4502c:	ble	45038 <__assert_fail@plt+0x32588>
   45030:	mvn	r8, #0
   45034:	b	450c4 <__assert_fail@plt+0x32614>
   45038:	add	r1, r3, r1, lsl #3
   4503c:	mov	r8, #1
   45040:	ldr	r1, [r1, #12]
   45044:	cmp	r1, r4
   45048:	blt	450c4 <__assert_fail@plt+0x32614>
   4504c:	sub	r1, r1, r4
   45050:	cmp	r0, r4
   45054:	mov	lr, r5
   45058:	mov	r4, #1
   4505c:	clz	r1, r1
   45060:	lsr	r5, r1, #5
   45064:	lsl	r1, r5, #1
   45068:	orreq	r1, r4, r5, lsl #1
   4506c:	cmp	r1, #0
   45070:	beq	450b8 <__assert_fail@plt+0x32608>
   45074:	ldr	r3, [sp, #8]
   45078:	mov	r0, ip
   4507c:	mov	r2, lr
   45080:	str	r9, [sp]
   45084:	mov	r5, lr
   45088:	bl	45178 <__assert_fail@plt+0x326c8>
   4508c:	mov	r8, r0
   45090:	ldr	r0, [sp, #24]
   45094:	ldr	ip, [sp, #16]
   45098:	ldr	r4, [sp, #12]
   4509c:	ldr	r0, [r0, #8]
   450a0:	ldr	r3, [ip, #116]	; 0x74
   450a4:	ldr	r2, [r0, sl, lsl #2]
   450a8:	add	r0, r2, r2, lsl #1
   450ac:	add	r0, r3, r0, lsl #3
   450b0:	ldr	r0, [r0, #8]
   450b4:	b	450c4 <__assert_fail@plt+0x32614>
   450b8:	ldr	r4, [sp, #12]
   450bc:	mov	r8, #0
   450c0:	mov	r5, lr
   450c4:	ldr	r1, [fp, #12]
   450c8:	cmp	r0, r1
   450cc:	bgt	45134 <__assert_fail@plt+0x32684>
   450d0:	add	r1, r2, r2, lsl #1
   450d4:	ldr	r2, [fp, #12]
   450d8:	mov	r7, #1
   450dc:	add	r1, r3, r1, lsl #3
   450e0:	ldr	r1, [r1, #12]
   450e4:	cmp	r1, r2
   450e8:	blt	45134 <__assert_fail@plt+0x32684>
   450ec:	ldr	r2, [fp, #12]
   450f0:	sub	r1, r1, r2
   450f4:	mov	r3, r2
   450f8:	clz	r1, r1
   450fc:	cmp	r0, r3
   45100:	mov	r0, #1
   45104:	lsr	r2, r1, #5
   45108:	lsl	r1, r2, #1
   4510c:	orreq	r1, r0, r2, lsl #1
   45110:	cmp	r1, #0
   45114:	beq	45154 <__assert_fail@plt+0x326a4>
   45118:	ldr	r3, [fp, #8]
   4511c:	mov	r0, ip
   45120:	mov	r2, r5
   45124:	str	r6, [sp]
   45128:	bl	45178 <__assert_fail@plt+0x326c8>
   4512c:	ldr	ip, [sp, #16]
   45130:	mov	r7, r0
   45134:	cmp	r7, r8
   45138:	bne	45160 <__assert_fail@plt+0x326b0>
   4513c:	ldr	r0, [sp, #24]
   45140:	add	sl, sl, #1
   45144:	ldr	r0, [r0, #4]
   45148:	cmp	sl, r0
   4514c:	blt	44ff8 <__assert_fail@plt+0x32548>
   45150:	b	4516c <__assert_fail@plt+0x326bc>
   45154:	mov	r7, #0
   45158:	cmp	r7, r8
   4515c:	beq	4513c <__assert_fail@plt+0x3268c>
   45160:	mov	r0, #1
   45164:	sub	sp, fp, #28
   45168:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   4516c:	mov	r0, #0
   45170:	sub	sp, fp, #28
   45174:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   45178:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   4517c:	add	fp, sp, #28
   45180:	sub	sp, sp, #36	; 0x24
   45184:	ldr	r4, [r0, #84]	; 0x54
   45188:	mov	r7, r0
   4518c:	mov	r5, r1
   45190:	add	r1, r3, r3, lsl #1
   45194:	str	r3, [sp, #32]
   45198:	ldr	r0, [r4, #24]
   4519c:	add	r1, r0, r1, lsl #2
   451a0:	mov	lr, r1
   451a4:	ldr	r0, [lr, #4]!
   451a8:	cmp	r0, #1
   451ac:	blt	45358 <__assert_fail@plt+0x328a8>
   451b0:	mov	ip, #1
   451b4:	mov	r6, r2
   451b8:	and	r3, r5, #2
   451bc:	mov	sl, #0
   451c0:	mvn	r2, ip, lsl r2
   451c4:	cmp	r6, #31
   451c8:	str	r3, [sp, #16]
   451cc:	str	r2, [sp, #24]
   451d0:	lsl	r2, ip, r6
   451d4:	and	ip, r5, #1
   451d8:	str	r2, [sp, #28]
   451dc:	mov	r2, #0
   451e0:	movwgt	r2, #1
   451e4:	str	ip, [sp, #12]
   451e8:	orr	r2, r2, r3, lsr #1
   451ec:	add	r3, r1, #8
   451f0:	stmib	sp, {r3, lr}
   451f4:	str	r2, [sp, #20]
   451f8:	b	45218 <__assert_fail@plt+0x32768>
   451fc:	ldr	lr, [sp, #8]
   45200:	ldr	ip, [sp, #12]
   45204:	ldr	r3, [sp, #4]
   45208:	ldr	r0, [lr]
   4520c:	add	sl, sl, #1
   45210:	cmp	sl, r0
   45214:	bge	45358 <__assert_fail@plt+0x328a8>
   45218:	ldr	r1, [r3]
   4521c:	ldr	r9, [r1, sl, lsl #2]
   45220:	ldr	r1, [r4]
   45224:	add	r2, r1, r9, lsl #3
   45228:	ldrb	r2, [r2, #4]
   4522c:	cmp	r2, #9
   45230:	beq	4531c <__assert_fail@plt+0x3286c>
   45234:	cmp	r2, #8
   45238:	beq	45338 <__assert_fail@plt+0x32888>
   4523c:	cmp	r2, #4
   45240:	bne	4520c <__assert_fail@plt+0x3275c>
   45244:	ldr	r1, [fp, #8]
   45248:	cmn	r1, #1
   4524c:	beq	4520c <__assert_fail@plt+0x3275c>
   45250:	ldr	r1, [fp, #8]
   45254:	ldr	r0, [r7, #116]	; 0x74
   45258:	add	r1, r1, r1, lsl #1
   4525c:	add	r0, r0, r1, lsl #3
   45260:	add	r8, r0, #16
   45264:	b	45288 <__assert_fail@plt+0x327d8>
   45268:	ldr	r0, [r8]
   4526c:	ldr	r1, [sp, #24]
   45270:	and	r0, r0, r1
   45274:	str	r0, [r8]
   45278:	ldrb	r0, [r8, #4]
   4527c:	add	r8, r8, #24
   45280:	cmp	r0, #0
   45284:	beq	451fc <__assert_fail@plt+0x3274c>
   45288:	ldr	r0, [r8, #-16]
   4528c:	cmp	r0, r9
   45290:	bne	45278 <__assert_fail@plt+0x327c8>
   45294:	cmp	r6, #31
   45298:	bgt	452ac <__assert_fail@plt+0x327fc>
   4529c:	ldr	r0, [r8]
   452a0:	ldr	r1, [sp, #28]
   452a4:	tst	r0, r1
   452a8:	beq	45278 <__assert_fail@plt+0x327c8>
   452ac:	ldr	r0, [r4, #20]
   452b0:	add	r1, r9, r9, lsl #1
   452b4:	add	r0, r0, r1, lsl #2
   452b8:	ldr	r0, [r0, #8]
   452bc:	ldr	r3, [r0]
   452c0:	ldr	r0, [sp, #32]
   452c4:	cmp	r3, r0
   452c8:	beq	45364 <__assert_fail@plt+0x328b4>
   452cc:	ldr	r0, [fp, #8]
   452d0:	mov	r1, r5
   452d4:	mov	r2, r6
   452d8:	str	r0, [sp]
   452dc:	mov	r0, r7
   452e0:	bl	45178 <__assert_fail@plt+0x326c8>
   452e4:	cmp	r0, #0
   452e8:	beq	45300 <__assert_fail@plt+0x32850>
   452ec:	cmn	r0, #1
   452f0:	beq	45378 <__assert_fail@plt+0x328c8>
   452f4:	cmp	r6, #31
   452f8:	ble	45268 <__assert_fail@plt+0x327b8>
   452fc:	b	45278 <__assert_fail@plt+0x327c8>
   45300:	ldr	r0, [sp, #20]
   45304:	cmp	r0, #0
   45308:	beq	45268 <__assert_fail@plt+0x327b8>
   4530c:	ldr	r0, [sp, #16]
   45310:	cmp	r0, #0
   45314:	beq	45278 <__assert_fail@plt+0x327c8>
   45318:	b	45374 <__assert_fail@plt+0x328c4>
   4531c:	ldr	r2, [sp, #16]
   45320:	cmp	r2, #0
   45324:	beq	4520c <__assert_fail@plt+0x3275c>
   45328:	ldr	r1, [r1, r9, lsl #3]
   4532c:	cmp	r1, r6
   45330:	bne	4520c <__assert_fail@plt+0x3275c>
   45334:	b	45374 <__assert_fail@plt+0x328c4>
   45338:	cmp	ip, #0
   4533c:	beq	4520c <__assert_fail@plt+0x3275c>
   45340:	ldr	r1, [r1, r9, lsl #3]
   45344:	cmp	r1, r6
   45348:	bne	4520c <__assert_fail@plt+0x3275c>
   4534c:	mvn	r0, #0
   45350:	sub	sp, fp, #28
   45354:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   45358:	ubfx	r0, r5, #1, #1
   4535c:	sub	sp, fp, #28
   45360:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   45364:	ldr	r0, [sp, #12]
   45368:	rsb	r0, r0, #0
   4536c:	sub	sp, fp, #28
   45370:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   45374:	mov	r0, #0
   45378:	sub	sp, fp, #28
   4537c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   45380:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   45384:	add	fp, sp, #28
   45388:	sub	sp, sp, #44	; 0x2c
   4538c:	sub	sp, sp, #1024	; 0x400
   45390:	mov	r6, r1
   45394:	ldrb	r1, [r0]
   45398:	mov	r5, r0
   4539c:	cmp	r1, #0
   453a0:	beq	45470 <__assert_fail@plt+0x329c0>
   453a4:	add	r0, sp, #40	; 0x28
   453a8:	mov	r2, #0
   453ac:	add	r8, r0, #16
   453b0:	mov	r0, #1
   453b4:	ldrb	r3, [r6, r2]
   453b8:	cmp	r3, #0
   453bc:	uxtbne	r1, r1
   453c0:	subne	r1, r1, r3
   453c4:	clzne	r1, r1
   453c8:	lsrne	r1, r1, #5
   453cc:	andne	r0, r0, r1
   453d0:	addne	r1, r5, r2
   453d4:	addne	r2, r2, #1
   453d8:	ldrbne	r1, [r1, #1]
   453dc:	cmpne	r1, #0
   453e0:	bne	453b4 <__assert_fail@plt+0x32904>
   453e4:	add	r2, r6, r2
   453e8:	mov	r4, r5
   453ec:	ldrb	r1, [r2]
   453f0:	cmp	r1, #0
   453f4:	movwne	r4, #0
   453f8:	tst	r0, #1
   453fc:	cmpeq	r1, #0
   45400:	bne	45480 <__assert_fail@plt+0x329d0>
   45404:	ldrb	r1, [r6]
   45408:	add	r0, r5, #1
   4540c:	str	r2, [sp, #28]
   45410:	sub	r4, r2, r6
   45414:	bl	127c8 <strchr@plt>
   45418:	cmp	r4, #1
   4541c:	str	r4, [sp, #32]
   45420:	beq	4548c <__assert_fail@plt+0x329dc>
   45424:	ldr	r3, [sp, #28]
   45428:	cmp	r0, #0
   4542c:	mov	r4, r0
   45430:	beq	45480 <__assert_fail@plt+0x329d0>
   45434:	ldr	r1, [sp, #32]
   45438:	str	r0, [sp, #36]	; 0x24
   4543c:	add	r2, r5, r1
   45440:	mov	r5, r1
   45444:	subs	r1, r2, r0
   45448:	sub	sl, r3, r5
   4544c:	movwcc	r1, #1
   45450:	cmp	r5, #31
   45454:	bhi	45494 <__assert_fail@plt+0x329e4>
   45458:	mov	r8, r1
   4545c:	cmp	r5, #3
   45460:	bcs	45590 <__assert_fail@plt+0x32ae0>
   45464:	sub	r7, r5, #1
   45468:	mov	r9, #1
   4546c:	b	45c18 <__assert_fail@plt+0x33168>
   45470:	ldrb	r0, [r6]
   45474:	cmp	r0, #0
   45478:	movne	r5, #0
   4547c:	mov	r4, r5
   45480:	mov	r0, r4
   45484:	sub	sp, fp, #28
   45488:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   4548c:	mov	r4, r0
   45490:	b	45480 <__assert_fail@plt+0x329d0>
   45494:	rsb	r0, r5, #0
   45498:	str	r1, [sp, #16]
   4549c:	mov	r2, #0
   454a0:	mov	r1, #1
   454a4:	mov	ip, #1
   454a8:	mov	r3, #1
   454ac:	str	r0, [sp, #12]
   454b0:	mvn	r0, #0
   454b4:	b	454d0 <__assert_fail@plt+0x32a20>
   454b8:	sub	ip, r1, r0
   454bc:	mov	r3, #1
   454c0:	mov	r2, r1
   454c4:	add	r1, r3, r2
   454c8:	cmp	r1, r5
   454cc:	bcs	45510 <__assert_fail@plt+0x32a60>
   454d0:	add	r4, r0, r3
   454d4:	ldrb	r7, [sl, r1]
   454d8:	ldrb	r4, [sl, r4]
   454dc:	cmp	r7, r4
   454e0:	bcc	454b8 <__assert_fail@plt+0x32a08>
   454e4:	bne	454fc <__assert_fail@plt+0x32a4c>
   454e8:	cmp	r3, ip
   454ec:	addne	r3, r3, #1
   454f0:	addeq	r2, r2, ip
   454f4:	moveq	r3, #1
   454f8:	b	454c4 <__assert_fail@plt+0x32a14>
   454fc:	add	r1, r2, #1
   45500:	mov	r0, r2
   45504:	mov	r3, #1
   45508:	mov	ip, #1
   4550c:	b	454c0 <__assert_fail@plt+0x32a10>
   45510:	cmp	r5, #2
   45514:	bcc	45600 <__assert_fail@plt+0x32b50>
   45518:	mvn	lr, #0
   4551c:	mov	r2, #0
   45520:	mov	r3, #1
   45524:	mov	r9, #1
   45528:	mov	r4, #1
   4552c:	b	45548 <__assert_fail@plt+0x32a98>
   45530:	sub	r9, r3, lr
   45534:	mov	r4, #1
   45538:	mov	r2, r3
   4553c:	add	r3, r4, r2
   45540:	cmp	r3, r5
   45544:	bcs	45608 <__assert_fail@plt+0x32b58>
   45548:	add	r7, lr, r4
   4554c:	ldrb	r1, [sl, r3]
   45550:	ldrb	r7, [sl, r7]
   45554:	cmp	r7, r1
   45558:	bcc	45530 <__assert_fail@plt+0x32a80>
   4555c:	cmp	r1, r7
   45560:	bne	45578 <__assert_fail@plt+0x32ac8>
   45564:	cmp	r4, r9
   45568:	addne	r4, r4, #1
   4556c:	addeq	r2, r2, r9
   45570:	moveq	r4, #1
   45574:	b	4553c <__assert_fail@plt+0x32a8c>
   45578:	add	r1, r2, #1
   4557c:	mov	lr, r2
   45580:	mov	r4, #1
   45584:	mov	r9, #1
   45588:	mov	r2, r1
   4558c:	b	4553c <__assert_fail@plt+0x32a8c>
   45590:	mvn	r1, #0
   45594:	mov	r0, #0
   45598:	mov	r2, #1
   4559c:	mov	ip, #1
   455a0:	mov	r3, #1
   455a4:	b	455c0 <__assert_fail@plt+0x32b10>
   455a8:	sub	ip, r2, r1
   455ac:	mov	r3, #1
   455b0:	mov	r0, r2
   455b4:	add	r2, r3, r0
   455b8:	cmp	r2, r5
   455bc:	bcs	45a0c <__assert_fail@plt+0x32f5c>
   455c0:	add	r4, r1, r3
   455c4:	ldrb	r7, [sl, r2]
   455c8:	ldrb	r4, [sl, r4]
   455cc:	cmp	r7, r4
   455d0:	bcc	455a8 <__assert_fail@plt+0x32af8>
   455d4:	bne	455ec <__assert_fail@plt+0x32b3c>
   455d8:	cmp	r3, ip
   455dc:	addne	r3, r3, #1
   455e0:	addeq	r0, r0, ip
   455e4:	moveq	r3, #1
   455e8:	b	455b4 <__assert_fail@plt+0x32b04>
   455ec:	add	r2, r0, #1
   455f0:	mov	r1, r0
   455f4:	mov	r3, #1
   455f8:	mov	ip, #1
   455fc:	b	455b0 <__assert_fail@plt+0x32b00>
   45600:	mov	r9, #1
   45604:	mvn	lr, #0
   45608:	vdup.32	q8, r5
   4560c:	add	r2, sp, #40	; 0x28
   45610:	add	r1, r8, #976	; 0x3d0
   45614:	vst1.32	{d16-d17}, [r2]
   45618:	vst1.32	{d16-d17}, [r1]
   4561c:	add	r1, r8, #960	; 0x3c0
   45620:	vst1.32	{d16-d17}, [r1]
   45624:	add	r1, r8, #944	; 0x3b0
   45628:	vst1.32	{d16-d17}, [r1]
   4562c:	add	r1, r8, #928	; 0x3a0
   45630:	vst1.32	{d16-d17}, [r1]
   45634:	add	r1, r8, #912	; 0x390
   45638:	vst1.32	{d16-d17}, [r1]
   4563c:	add	r1, r8, #896	; 0x380
   45640:	vst1.32	{d16-d17}, [r1]
   45644:	add	r1, r8, #880	; 0x370
   45648:	vst1.32	{d16-d17}, [r1]
   4564c:	add	r1, r8, #864	; 0x360
   45650:	vst1.32	{d16-d17}, [r1]
   45654:	add	r1, r8, #848	; 0x350
   45658:	vst1.32	{d16-d17}, [r1]
   4565c:	add	r1, r8, #832	; 0x340
   45660:	vst1.32	{d16-d17}, [r1]
   45664:	add	r1, r8, #816	; 0x330
   45668:	vst1.32	{d16-d17}, [r1]
   4566c:	add	r1, r8, #800	; 0x320
   45670:	vst1.32	{d16-d17}, [r1]
   45674:	add	r1, r8, #784	; 0x310
   45678:	vst1.32	{d16-d17}, [r1]
   4567c:	add	r1, r8, #768	; 0x300
   45680:	vst1.32	{d16-d17}, [r1]
   45684:	add	r1, r8, #752	; 0x2f0
   45688:	vst1.32	{d16-d17}, [r1]
   4568c:	add	r1, r8, #736	; 0x2e0
   45690:	vst1.32	{d16-d17}, [r1]
   45694:	add	r1, r8, #720	; 0x2d0
   45698:	vst1.32	{d16-d17}, [r1]
   4569c:	add	r1, r8, #704	; 0x2c0
   456a0:	vst1.32	{d16-d17}, [r1]
   456a4:	add	r1, r8, #688	; 0x2b0
   456a8:	vst1.32	{d16-d17}, [r1]
   456ac:	add	r1, r8, #672	; 0x2a0
   456b0:	vst1.32	{d16-d17}, [r1]
   456b4:	add	r1, r8, #656	; 0x290
   456b8:	vst1.32	{d16-d17}, [r1]
   456bc:	add	r1, r8, #640	; 0x280
   456c0:	vst1.32	{d16-d17}, [r1]
   456c4:	add	r1, r8, #624	; 0x270
   456c8:	vst1.32	{d16-d17}, [r1]
   456cc:	add	r1, r8, #608	; 0x260
   456d0:	vst1.32	{d16-d17}, [r1]
   456d4:	add	r1, r8, #592	; 0x250
   456d8:	vst1.32	{d16-d17}, [r1]
   456dc:	add	r1, r8, #576	; 0x240
   456e0:	vst1.32	{d16-d17}, [r1]
   456e4:	add	r1, r8, #560	; 0x230
   456e8:	vst1.32	{d16-d17}, [r1]
   456ec:	add	r1, r8, #544	; 0x220
   456f0:	vst1.32	{d16-d17}, [r1]
   456f4:	add	r1, r8, #528	; 0x210
   456f8:	vst1.32	{d16-d17}, [r1]
   456fc:	add	r1, r8, #512	; 0x200
   45700:	vst1.32	{d16-d17}, [r1]
   45704:	add	r1, r8, #496	; 0x1f0
   45708:	vst1.32	{d16-d17}, [r1]
   4570c:	add	r1, r8, #480	; 0x1e0
   45710:	vst1.32	{d16-d17}, [r1]
   45714:	add	r1, r8, #464	; 0x1d0
   45718:	vst1.32	{d16-d17}, [r1]
   4571c:	add	r1, r8, #448	; 0x1c0
   45720:	vst1.32	{d16-d17}, [r1]
   45724:	add	r1, r8, #432	; 0x1b0
   45728:	vst1.32	{d16-d17}, [r1]
   4572c:	add	r1, r8, #416	; 0x1a0
   45730:	vst1.32	{d16-d17}, [r1]
   45734:	add	r1, r8, #400	; 0x190
   45738:	vst1.32	{d16-d17}, [r1]
   4573c:	add	r1, r8, #384	; 0x180
   45740:	vst1.32	{d16-d17}, [r1]
   45744:	add	r1, r8, #368	; 0x170
   45748:	vst1.32	{d16-d17}, [r1]
   4574c:	add	r1, r8, #352	; 0x160
   45750:	vst1.32	{d16-d17}, [r1]
   45754:	add	r1, r8, #336	; 0x150
   45758:	vst1.32	{d16-d17}, [r1]
   4575c:	add	r1, r8, #320	; 0x140
   45760:	vst1.32	{d16-d17}, [r1]
   45764:	add	r1, r8, #304	; 0x130
   45768:	vst1.32	{d16-d17}, [r1]
   4576c:	add	r1, r8, #288	; 0x120
   45770:	vst1.32	{d16-d17}, [r1]
   45774:	add	r1, r8, #272	; 0x110
   45778:	vst1.32	{d16-d17}, [r1]
   4577c:	add	r1, r8, #256	; 0x100
   45780:	vst1.32	{d16-d17}, [r1]
   45784:	add	r1, r8, #240	; 0xf0
   45788:	vst1.32	{d16-d17}, [r1]
   4578c:	add	r1, r8, #224	; 0xe0
   45790:	vst1.32	{d16-d17}, [r1]
   45794:	add	r1, r8, #208	; 0xd0
   45798:	vst1.32	{d16-d17}, [r1]
   4579c:	add	r1, r8, #192	; 0xc0
   457a0:	vst1.32	{d16-d17}, [r1]
   457a4:	add	r1, r8, #176	; 0xb0
   457a8:	vst1.32	{d16-d17}, [r1]
   457ac:	add	r1, r8, #160	; 0xa0
   457b0:	vst1.32	{d16-d17}, [r1]
   457b4:	add	r1, r8, #144	; 0x90
   457b8:	vst1.32	{d16-d17}, [r1]
   457bc:	add	r1, r8, #128	; 0x80
   457c0:	vst1.32	{d16-d17}, [r1]
   457c4:	add	r1, r8, #112	; 0x70
   457c8:	vst1.32	{d16-d17}, [r1]
   457cc:	add	r1, r8, #96	; 0x60
   457d0:	vst1.32	{d16-d17}, [r1]
   457d4:	add	r1, r8, #80	; 0x50
   457d8:	vst1.32	{d16-d17}, [r1]
   457dc:	add	r1, r8, #64	; 0x40
   457e0:	vst1.32	{d16-d17}, [r1]
   457e4:	add	r1, r8, #48	; 0x30
   457e8:	vst1.32	{d16-d17}, [r1]
   457ec:	add	r1, r8, #32
   457f0:	vst1.32	{d16-d17}, [r1]
   457f4:	add	r1, r8, #16
   457f8:	vst1.32	{d16-d17}, [r1]
   457fc:	mov	r1, #992	; 0x3e0
   45800:	vst1.32	{d16-d17}, [r8], r1
   45804:	add	r1, r0, #1
   45808:	vst1.32	{d16-d17}, [r8]
   4580c:	add	r8, lr, #1
   45810:	cmp	r8, r1
   45814:	movcc	r9, ip
   45818:	movcc	r8, r1
   4581c:	cmp	r5, #0
   45820:	str	r9, [sp, #24]
   45824:	beq	4589c <__assert_fail@plt+0x32dec>
   45828:	ldr	r3, [sp, #28]
   4582c:	mov	r0, r2
   45830:	mvn	r2, r6
   45834:	and	ip, r5, #1
   45838:	mov	r1, #0
   4583c:	cmn	r2, r3
   45840:	beq	4587c <__assert_fail@plt+0x32dcc>
   45844:	ldr	r1, [sp, #32]
   45848:	sub	r2, r1, ip
   4584c:	sub	r3, r1, #2
   45850:	mov	r1, #0
   45854:	mov	r5, sl
   45858:	add	r4, r3, #1
   4585c:	ldrb	r7, [r5, r1]!
   45860:	add	r1, r1, #2
   45864:	cmp	r2, r1
   45868:	str	r4, [r0, r7, lsl #2]
   4586c:	ldrb	r7, [r5, #1]
   45870:	str	r3, [r0, r7, lsl #2]
   45874:	sub	r3, r3, #2
   45878:	bne	45854 <__assert_fail@plt+0x32da4>
   4587c:	ldr	r5, [sp, #32]
   45880:	ldr	r9, [sp, #24]
   45884:	cmp	ip, #0
   45888:	beq	4589c <__assert_fail@plt+0x32dec>
   4588c:	ldrb	r2, [sl, r1]
   45890:	mvn	r1, r1
   45894:	add	r1, r5, r1
   45898:	str	r1, [r0, r2, lsl #2]
   4589c:	add	r1, sl, r9
   458a0:	mov	r0, sl
   458a4:	mov	r2, r8
   458a8:	bl	127a4 <bcmp@plt>
   458ac:	cmp	r0, #0
   458b0:	str	r8, [sp, #20]
   458b4:	beq	45a8c <__assert_fail@plt+0x32fdc>
   458b8:	ldr	r1, [sp, #16]
   458bc:	ldr	r0, [sp, #36]	; 0x24
   458c0:	mov	r4, #0
   458c4:	add	r0, r0, r1
   458c8:	sub	r2, r5, r1
   458cc:	mov	r1, #0
   458d0:	bl	12894 <memchr@plt>
   458d4:	sub	r1, r5, r8
   458d8:	cmp	r8, r1
   458dc:	movcs	r1, r8
   458e0:	cmp	r5, #0
   458e4:	str	r1, [sp, #8]
   458e8:	beq	45480 <__assert_fail@plt+0x329d0>
   458ec:	ldr	r7, [sp, #36]	; 0x24
   458f0:	cmp	r0, #0
   458f4:	bne	45480 <__assert_fail@plt+0x329d0>
   458f8:	ldr	r2, [sp, #20]
   458fc:	ldr	r3, [sp, #28]
   45900:	mov	r8, #0
   45904:	mov	ip, r5
   45908:	add	r0, r7, r2
   4590c:	str	r0, [sp, #4]
   45910:	ldr	r0, [sp, #12]
   45914:	add	r0, r3, r0
   45918:	add	r1, r0, r2
   4591c:	sub	r0, r6, r3
   45920:	add	r0, r0, r2
   45924:	str	r1, [sp, #28]
   45928:	add	r6, r0, #1
   4592c:	rsb	r0, r2, #1
   45930:	str	r0, [sp, #12]
   45934:	sub	r0, r5, #1
   45938:	str	r6, [sp, #24]
   4593c:	str	r0, [sp, #16]
   45940:	add	r0, ip, r7
   45944:	add	r3, sp, #40	; 0x28
   45948:	ldrb	r2, [r0, #-1]
   4594c:	ldr	r2, [r3, r2, lsl #2]
   45950:	cmp	r2, #0
   45954:	beq	45960 <__assert_fail@plt+0x32eb0>
   45958:	add	r8, r2, r8
   4595c:	b	459d4 <__assert_fail@plt+0x32f24>
   45960:	ldr	r2, [sp, #20]
   45964:	ldr	r3, [sp, #16]
   45968:	cmp	r2, r3
   4596c:	bcs	45998 <__assert_fail@plt+0x32ee8>
   45970:	ldr	r2, [sp, #4]
   45974:	add	r3, r2, r8
   45978:	mov	r2, #0
   4597c:	ldrb	r5, [r3, -r2]
   45980:	ldrb	r4, [r1, -r2]
   45984:	cmp	r4, r5
   45988:	bne	459c4 <__assert_fail@plt+0x32f14>
   4598c:	sub	r2, r2, #1
   45990:	cmp	r6, r2
   45994:	bne	4597c <__assert_fail@plt+0x32ecc>
   45998:	ldr	r2, [sp, #12]
   4599c:	add	r4, r7, r8
   459a0:	cmp	r2, #1
   459a4:	beq	45480 <__assert_fail@plt+0x329d0>
   459a8:	ldrb	r3, [r4, -r2]
   459ac:	ldrb	r5, [sl, -r2]
   459b0:	add	r2, r2, #1
   459b4:	cmp	r5, r3
   459b8:	beq	459a0 <__assert_fail@plt+0x32ef0>
   459bc:	ldr	r2, [sp, #8]
   459c0:	b	459c8 <__assert_fail@plt+0x32f18>
   459c4:	rsb	r2, r2, #0
   459c8:	ldr	r5, [sp, #32]
   459cc:	add	r2, r8, r2
   459d0:	add	r8, r2, #1
   459d4:	add	r9, r8, r5
   459d8:	mov	r1, #0
   459dc:	mov	r4, #0
   459e0:	sub	r2, r9, ip
   459e4:	bl	12894 <memchr@plt>
   459e8:	cmp	r9, #0
   459ec:	beq	45480 <__assert_fail@plt+0x329d0>
   459f0:	ldr	r7, [sp, #36]	; 0x24
   459f4:	ldr	r1, [sp, #28]
   459f8:	ldr	r6, [sp, #24]
   459fc:	cmp	r0, #0
   45a00:	mov	ip, r9
   45a04:	beq	45940 <__assert_fail@plt+0x32e90>
   45a08:	b	45480 <__assert_fail@plt+0x329d0>
   45a0c:	cmp	r5, #2
   45a10:	bcc	45bfc <__assert_fail@plt+0x3314c>
   45a14:	mvn	lr, #0
   45a18:	mov	r2, #0
   45a1c:	mov	r3, #1
   45a20:	mov	r9, #1
   45a24:	mov	r4, #1
   45a28:	b	45a44 <__assert_fail@plt+0x32f94>
   45a2c:	sub	r9, r3, lr
   45a30:	mov	r4, #1
   45a34:	mov	r2, r3
   45a38:	add	r3, r4, r2
   45a3c:	cmp	r3, r5
   45a40:	bcs	45c04 <__assert_fail@plt+0x33154>
   45a44:	add	r7, lr, r4
   45a48:	ldrb	r0, [sl, r3]
   45a4c:	ldrb	r7, [sl, r7]
   45a50:	cmp	r7, r0
   45a54:	bcc	45a2c <__assert_fail@plt+0x32f7c>
   45a58:	cmp	r0, r7
   45a5c:	bne	45a74 <__assert_fail@plt+0x32fc4>
   45a60:	cmp	r4, r9
   45a64:	addne	r4, r4, #1
   45a68:	addeq	r2, r2, r9
   45a6c:	moveq	r4, #1
   45a70:	b	45a38 <__assert_fail@plt+0x32f88>
   45a74:	add	r0, r2, #1
   45a78:	mov	lr, r2
   45a7c:	mov	r4, #1
   45a80:	mov	r9, #1
   45a84:	mov	r2, r0
   45a88:	b	45a38 <__assert_fail@plt+0x32f88>
   45a8c:	ldr	r1, [sp, #16]
   45a90:	ldr	r0, [sp, #36]	; 0x24
   45a94:	mov	r4, #0
   45a98:	add	r0, r0, r1
   45a9c:	sub	r2, r5, r1
   45aa0:	mov	r1, #0
   45aa4:	bl	12894 <memchr@plt>
   45aa8:	cmp	r5, #0
   45aac:	beq	45480 <__assert_fail@plt+0x329d0>
   45ab0:	ldr	r8, [sp, #36]	; 0x24
   45ab4:	cmp	r0, #0
   45ab8:	bne	45480 <__assert_fail@plt+0x329d0>
   45abc:	ldr	r0, [sp, #24]
   45ac0:	sub	lr, r5, #1
   45ac4:	mov	r9, #0
   45ac8:	mov	ip, r5
   45acc:	sub	r0, r5, r0
   45ad0:	str	r0, [sp, #28]
   45ad4:	ldr	r0, [sp, #20]
   45ad8:	sub	r1, r0, #1
   45adc:	rsb	r0, r0, #1
   45ae0:	str	r1, [sp, #16]
   45ae4:	mov	r1, #0
   45ae8:	str	r0, [sp, #12]
   45aec:	add	r0, ip, r8
   45af0:	add	r3, sp, #40	; 0x28
   45af4:	ldrb	r2, [r0, #-1]
   45af8:	ldr	r3, [r3, r2, lsl #2]
   45afc:	cmp	r3, #0
   45b00:	beq	45b28 <__assert_fail@plt+0x33078>
   45b04:	ldr	r2, [sp, #24]
   45b08:	ldr	r7, [sp, #28]
   45b0c:	cmp	r3, r2
   45b10:	mov	r2, r3
   45b14:	movcc	r2, r7
   45b18:	cmp	r9, #0
   45b1c:	mov	r9, #0
   45b20:	moveq	r2, r3
   45b24:	b	45bb0 <__assert_fail@plt+0x33100>
   45b28:	ldr	r2, [sp, #20]
   45b2c:	cmp	r2, r9
   45b30:	movcc	r2, r9
   45b34:	cmp	r2, lr
   45b38:	bcs	45b5c <__assert_fail@plt+0x330ac>
   45b3c:	add	r3, r8, r1
   45b40:	ldrb	r5, [r3, r2]
   45b44:	ldrb	r4, [sl, r2]
   45b48:	cmp	r4, r5
   45b4c:	bne	45ba0 <__assert_fail@plt+0x330f0>
   45b50:	add	r2, r2, #1
   45b54:	cmp	r2, lr
   45b58:	bcc	45b40 <__assert_fail@plt+0x33090>
   45b5c:	ldr	r2, [sp, #16]
   45b60:	add	r4, r8, r1
   45b64:	add	r3, r2, #1
   45b68:	cmp	r9, r3
   45b6c:	bcs	45b84 <__assert_fail@plt+0x330d4>
   45b70:	ldrb	r5, [r4, r2]
   45b74:	ldrb	r7, [sl, r2]
   45b78:	sub	r2, r2, #1
   45b7c:	cmp	r7, r5
   45b80:	beq	45b64 <__assert_fail@plt+0x330b4>
   45b84:	add	r2, r9, #1
   45b88:	ldr	r9, [sp, #28]
   45b8c:	ldr	r5, [sp, #32]
   45b90:	cmp	r3, r2
   45b94:	ldr	r2, [sp, #24]
   45b98:	bcs	45bb0 <__assert_fail@plt+0x33100>
   45b9c:	b	45480 <__assert_fail@plt+0x329d0>
   45ba0:	ldr	r3, [sp, #12]
   45ba4:	ldr	r5, [sp, #32]
   45ba8:	mov	r9, #0
   45bac:	add	r2, r3, r2
   45bb0:	add	r1, r2, r1
   45bb4:	mov	r6, sl
   45bb8:	mov	sl, lr
   45bbc:	mov	r4, #0
   45bc0:	add	r8, r1, r5
   45bc4:	mov	r7, r1
   45bc8:	mov	r1, #0
   45bcc:	sub	r2, r8, ip
   45bd0:	bl	12894 <memchr@plt>
   45bd4:	cmp	r8, #0
   45bd8:	beq	45480 <__assert_fail@plt+0x329d0>
   45bdc:	mov	ip, r8
   45be0:	ldr	r8, [sp, #36]	; 0x24
   45be4:	mov	lr, sl
   45be8:	cmp	r0, #0
   45bec:	mov	sl, r6
   45bf0:	mov	r1, r7
   45bf4:	beq	45aec <__assert_fail@plt+0x3303c>
   45bf8:	b	45480 <__assert_fail@plt+0x329d0>
   45bfc:	mov	r9, #1
   45c00:	mvn	lr, #0
   45c04:	add	r0, r1, #1
   45c08:	add	r7, lr, #1
   45c0c:	cmp	r7, r0
   45c10:	movcc	r9, ip
   45c14:	movcc	r7, r0
   45c18:	add	r1, sl, r9
   45c1c:	mov	r0, sl
   45c20:	mov	r2, r7
   45c24:	bl	127a4 <bcmp@plt>
   45c28:	cmp	r0, #0
   45c2c:	beq	45d34 <__assert_fail@plt+0x33284>
   45c30:	ldr	r0, [sp, #36]	; 0x24
   45c34:	sub	r2, r5, r8
   45c38:	mov	r1, #0
   45c3c:	mov	r4, #0
   45c40:	add	r0, r0, r8
   45c44:	bl	12894 <memchr@plt>
   45c48:	sub	r1, r5, r7
   45c4c:	cmp	r7, r1
   45c50:	movcs	r1, r7
   45c54:	cmp	r5, #0
   45c58:	str	r1, [sp, #24]
   45c5c:	beq	45480 <__assert_fail@plt+0x329d0>
   45c60:	cmp	r0, #0
   45c64:	ldr	r5, [sp, #36]	; 0x24
   45c68:	ldr	r0, [sp, #28]
   45c6c:	bne	45480 <__assert_fail@plt+0x329d0>
   45c70:	add	r1, r5, r7
   45c74:	sub	r0, r0, r7
   45c78:	add	r9, r7, r6
   45c7c:	mov	r8, #0
   45c80:	str	r7, [sp, #12]
   45c84:	str	r1, [sp, #20]
   45c88:	ldr	r1, [sp, #32]
   45c8c:	sub	r6, r0, r6
   45c90:	rsb	r0, r7, #1
   45c94:	str	r0, [sp, #28]
   45c98:	ldr	ip, [sp, #32]
   45c9c:	cmp	ip, r7
   45ca0:	bls	45ccc <__assert_fail@plt+0x3321c>
   45ca4:	ldr	r0, [sp, #20]
   45ca8:	mov	r2, #0
   45cac:	add	r0, r0, r8
   45cb0:	ldrb	r3, [r0, r2]
   45cb4:	ldrb	r7, [r9, r2]
   45cb8:	cmp	r7, r3
   45cbc:	bne	45cf4 <__assert_fail@plt+0x33244>
   45cc0:	add	r2, r2, #1
   45cc4:	cmp	r6, r2
   45cc8:	bne	45cb0 <__assert_fail@plt+0x33200>
   45ccc:	ldr	r0, [sp, #28]
   45cd0:	add	r4, r5, r8
   45cd4:	cmp	r0, #1
   45cd8:	beq	45480 <__assert_fail@plt+0x329d0>
   45cdc:	ldrb	r2, [r4, -r0]
   45ce0:	ldrb	r3, [sl, -r0]
   45ce4:	add	r0, r0, #1
   45ce8:	cmp	r3, r2
   45cec:	beq	45cd4 <__assert_fail@plt+0x33224>
   45cf0:	ldr	r2, [sp, #24]
   45cf4:	add	r2, r8, r2
   45cf8:	add	r0, r5, r1
   45cfc:	mov	r4, #0
   45d00:	add	r8, r2, #1
   45d04:	add	r7, r8, ip
   45d08:	sub	r2, r7, r1
   45d0c:	mov	r1, #0
   45d10:	bl	12894 <memchr@plt>
   45d14:	cmp	r0, #0
   45d18:	bne	45480 <__assert_fail@plt+0x329d0>
   45d1c:	cmp	r7, #0
   45d20:	mov	r1, r7
   45d24:	ldr	r5, [sp, #36]	; 0x24
   45d28:	ldr	r7, [sp, #12]
   45d2c:	bne	45c98 <__assert_fail@plt+0x331e8>
   45d30:	b	45480 <__assert_fail@plt+0x329d0>
   45d34:	ldr	r0, [sp, #36]	; 0x24
   45d38:	sub	r2, r5, r8
   45d3c:	mov	r1, #0
   45d40:	mov	r4, #0
   45d44:	add	r0, r0, r8
   45d48:	bl	12894 <memchr@plt>
   45d4c:	cmp	r5, #0
   45d50:	beq	45480 <__assert_fail@plt+0x329d0>
   45d54:	ldr	ip, [sp, #36]	; 0x24
   45d58:	cmp	r0, #0
   45d5c:	str	r9, [sp, #28]
   45d60:	bne	45480 <__assert_fail@plt+0x329d0>
   45d64:	ldr	r1, [sp, #32]
   45d68:	ldr	r0, [sp, #28]
   45d6c:	ldr	r5, [sp, #32]
   45d70:	mov	r6, #0
   45d74:	mov	r8, #0
   45d78:	sub	r0, r1, r0
   45d7c:	str	r0, [sp, #24]
   45d80:	sub	r0, r7, #1
   45d84:	str	r0, [sp, #20]
   45d88:	rsb	r0, r7, #1
   45d8c:	str	r0, [sp, #16]
   45d90:	cmp	r7, r6
   45d94:	mov	r0, r7
   45d98:	mov	r9, r7
   45d9c:	movcc	r0, r6
   45da0:	cmp	r0, r5
   45da4:	bcs	45dc8 <__assert_fail@plt+0x33318>
   45da8:	add	r2, ip, r8
   45dac:	ldrb	r3, [r2, r0]
   45db0:	ldrb	r7, [sl, r0]
   45db4:	cmp	r7, r3
   45db8:	bne	45e08 <__assert_fail@plt+0x33358>
   45dbc:	add	r0, r0, #1
   45dc0:	cmp	r0, r5
   45dc4:	bcc	45dac <__assert_fail@plt+0x332fc>
   45dc8:	ldr	r0, [sp, #20]
   45dcc:	add	r4, ip, r8
   45dd0:	add	r2, r0, #1
   45dd4:	cmp	r6, r2
   45dd8:	bcs	45df0 <__assert_fail@plt+0x33340>
   45ddc:	ldrb	r3, [r4, r0]
   45de0:	ldrb	r7, [sl, r0]
   45de4:	sub	r0, r0, #1
   45de8:	cmp	r7, r3
   45dec:	beq	45dd0 <__assert_fail@plt+0x33320>
   45df0:	add	r0, r6, #1
   45df4:	ldr	r6, [sp, #24]
   45df8:	cmp	r2, r0
   45dfc:	ldr	r2, [sp, #28]
   45e00:	bcs	45e14 <__assert_fail@plt+0x33364>
   45e04:	b	45480 <__assert_fail@plt+0x329d0>
   45e08:	ldr	r2, [sp, #16]
   45e0c:	mov	r6, #0
   45e10:	add	r2, r2, r0
   45e14:	add	r8, r2, r8
   45e18:	add	r0, ip, r1
   45e1c:	mov	r4, #0
   45e20:	add	r7, r8, r5
   45e24:	sub	r2, r7, r1
   45e28:	mov	r1, #0
   45e2c:	bl	12894 <memchr@plt>
   45e30:	cmp	r7, #0
   45e34:	beq	45480 <__assert_fail@plt+0x329d0>
   45e38:	ldr	ip, [sp, #36]	; 0x24
   45e3c:	mov	r1, r7
   45e40:	cmp	r0, #0
   45e44:	mov	r7, r9
   45e48:	beq	45d90 <__assert_fail@plt+0x332e0>
   45e4c:	b	45480 <__assert_fail@plt+0x329d0>
   45e50:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   45e54:	add	fp, sp, #24
   45e58:	mov	r4, r0
   45e5c:	cmp	r0, #0
   45e60:	beq	45e84 <__assert_fail@plt+0x333d4>
   45e64:	mov	r0, r4
   45e68:	bl	127bc <strlen@plt>
   45e6c:	add	r5, r0, #1
   45e70:	cmp	r5, #58	; 0x3a
   45e74:	bls	45e88 <__assert_fail@plt+0x333d8>
   45e78:	add	r0, r0, #10
   45e7c:	bic	r0, r0, #3
   45e80:	b	45e8c <__assert_fail@plt+0x333dc>
   45e84:	mov	r5, #0
   45e88:	mov	r0, #64	; 0x40
   45e8c:	bl	327ac <__assert_fail@plt+0x1fcfc>
   45e90:	mov	r6, r0
   45e94:	cmp	r0, #0
   45e98:	beq	45ed4 <__assert_fail@plt+0x33424>
   45e9c:	cmp	r4, #0
   45ea0:	mov	r0, r4
   45ea4:	mov	r8, #0
   45ea8:	mov	r7, r6
   45eac:	movwne	r0, #1
   45eb0:	str	r8, [r6]
   45eb4:	strb	r0, [r6, #4]
   45eb8:	strb	r8, [r7, #5]!
   45ebc:	beq	45ed4 <__assert_fail@plt+0x33424>
   45ec0:	mov	r0, r7
   45ec4:	mov	r1, r4
   45ec8:	mov	r2, r5
   45ecc:	bl	124e0 <memcpy@plt>
   45ed0:	strb	r8, [r7, r5]
   45ed4:	mov	r0, r6
   45ed8:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   45edc:	push	{r4, sl, fp, lr}
   45ee0:	add	fp, sp, #8
   45ee4:	cmp	r0, #2
   45ee8:	popcc	{r4, sl, fp, pc}
   45eec:	ldr	r4, [r0]
   45ef0:	bl	30174 <__assert_fail@plt+0x1d6c4>
   45ef4:	cmp	r4, #0
   45ef8:	mov	r0, r4
   45efc:	bne	45eec <__assert_fail@plt+0x3343c>
   45f00:	pop	{r4, sl, fp, pc}
   45f04:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   45f08:	add	fp, sp, #28
   45f0c:	sub	sp, sp, #4
   45f10:	mov	sl, r2
   45f14:	mov	r7, r1
   45f18:	cmp	r0, #0
   45f1c:	beq	45fe4 <__assert_fail@plt+0x33534>
   45f20:	mov	r6, r0
   45f24:	bl	4602c <__assert_fail@plt+0x3357c>
   45f28:	cmp	r0, #0
   45f2c:	beq	45ff8 <__assert_fail@plt+0x33548>
   45f30:	mov	r4, r0
   45f34:	mov	r0, r7
   45f38:	mov	r1, sl
   45f3c:	bl	125ac <localtime_r@plt>
   45f40:	mov	r7, #1
   45f44:	cmp	r0, #0
   45f48:	mov	r9, #1
   45f4c:	beq	45f60 <__assert_fail@plt+0x334b0>
   45f50:	mov	r0, r6
   45f54:	mov	r1, sl
   45f58:	bl	46178 <__assert_fail@plt+0x336c8>
   45f5c:	eor	r9, r0, #1
   45f60:	cmp	r4, #1
   45f64:	beq	45fc8 <__assert_fail@plt+0x33518>
   45f68:	bl	12804 <__errno_location@plt>
   45f6c:	mov	r6, r0
   45f70:	ldr	r8, [r0]
   45f74:	ldrb	r0, [r4, #4]
   45f78:	cmp	r0, #0
   45f7c:	beq	46004 <__assert_fail@plt+0x33554>
   45f80:	movw	r0, #53073	; 0xcf51
   45f84:	add	r1, r4, #5
   45f88:	mov	r2, #1
   45f8c:	movt	r0, #4
   45f90:	bl	127d4 <setenv@plt>
   45f94:	cmp	r0, #0
   45f98:	beq	46018 <__assert_fail@plt+0x33568>
   45f9c:	ldr	r8, [r6]
   45fa0:	mov	r7, #0
   45fa4:	cmp	r4, #2
   45fa8:	bcc	45fc4 <__assert_fail@plt+0x33514>
   45fac:	ldr	r5, [r4]
   45fb0:	mov	r0, r4
   45fb4:	bl	30174 <__assert_fail@plt+0x1d6c4>
   45fb8:	cmp	r5, #0
   45fbc:	mov	r4, r5
   45fc0:	bne	45fac <__assert_fail@plt+0x334fc>
   45fc4:	str	r8, [r6]
   45fc8:	cmp	r7, #0
   45fcc:	moveq	sl, r7
   45fd0:	cmp	r9, #0
   45fd4:	movwne	sl, #0
   45fd8:	mov	r0, sl
   45fdc:	sub	sp, fp, #28
   45fe0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   45fe4:	mov	r0, r7
   45fe8:	mov	r1, sl
   45fec:	sub	sp, fp, #28
   45ff0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   45ff4:	b	123c0 <gmtime_r@plt>
   45ff8:	mov	r0, #0
   45ffc:	sub	sp, fp, #28
   46000:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   46004:	movw	r0, #53073	; 0xcf51
   46008:	movt	r0, #4
   4600c:	bl	12a2c <unsetenv@plt>
   46010:	cmp	r0, #0
   46014:	bne	45f9c <__assert_fail@plt+0x334ec>
   46018:	bl	125f4 <tzset@plt>
   4601c:	mov	r7, #1
   46020:	cmp	r4, #2
   46024:	bcs	45fac <__assert_fail@plt+0x334fc>
   46028:	b	45fc4 <__assert_fail@plt+0x33514>
   4602c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   46030:	add	fp, sp, #28
   46034:	sub	sp, sp, #4
   46038:	mov	r4, r0
   4603c:	movw	r0, #53073	; 0xcf51
   46040:	movt	r0, #4
   46044:	bl	126d8 <getenv@plt>
   46048:	mov	r6, r0
   4604c:	ldrb	r0, [r4, #4]
   46050:	cmp	r6, #0
   46054:	beq	46098 <__assert_fail@plt+0x335e8>
   46058:	cmp	r0, #0
   4605c:	beq	46074 <__assert_fail@plt+0x335c4>
   46060:	add	r0, r4, #5
   46064:	mov	r1, r6
   46068:	bl	123fc <strcmp@plt>
   4606c:	cmp	r0, #0
   46070:	beq	4614c <__assert_fail@plt+0x3369c>
   46074:	mov	r0, r6
   46078:	bl	127bc <strlen@plt>
   4607c:	add	r8, r0, #1
   46080:	mov	r9, #1
   46084:	cmp	r8, #58	; 0x3a
   46088:	bls	460a8 <__assert_fail@plt+0x335f8>
   4608c:	add	r0, r0, #10
   46090:	bic	r0, r0, #3
   46094:	b	460ac <__assert_fail@plt+0x335fc>
   46098:	mov	r9, #0
   4609c:	cmp	r0, #0
   460a0:	mov	r8, #0
   460a4:	beq	4614c <__assert_fail@plt+0x3369c>
   460a8:	mov	r0, #64	; 0x40
   460ac:	bl	327ac <__assert_fail@plt+0x1fcfc>
   460b0:	cmp	r0, #0
   460b4:	beq	46144 <__assert_fail@plt+0x33694>
   460b8:	mov	sl, #0
   460bc:	mov	r7, r0
   460c0:	strb	r9, [r0, #4]
   460c4:	mov	r5, r0
   460c8:	cmp	r9, #0
   460cc:	str	sl, [r0]
   460d0:	strb	sl, [r7, #5]!
   460d4:	beq	460ec <__assert_fail@plt+0x3363c>
   460d8:	mov	r0, r7
   460dc:	mov	r1, r6
   460e0:	mov	r2, r8
   460e4:	bl	124e0 <memcpy@plt>
   460e8:	strb	sl, [r7, r8]
   460ec:	ldrb	r0, [r4, #4]
   460f0:	cmp	r0, #0
   460f4:	beq	46154 <__assert_fail@plt+0x336a4>
   460f8:	movw	r0, #53073	; 0xcf51
   460fc:	add	r1, r4, #5
   46100:	mov	r2, #1
   46104:	movt	r0, #4
   46108:	bl	127d4 <setenv@plt>
   4610c:	cmp	r0, #0
   46110:	beq	46168 <__assert_fail@plt+0x336b8>
   46114:	bl	12804 <__errno_location@plt>
   46118:	ldr	r6, [r0]
   4611c:	mov	r4, r0
   46120:	cmp	r5, #2
   46124:	bcc	46140 <__assert_fail@plt+0x33690>
   46128:	ldr	r7, [r5]
   4612c:	mov	r0, r5
   46130:	bl	30174 <__assert_fail@plt+0x1d6c4>
   46134:	cmp	r7, #0
   46138:	mov	r5, r7
   4613c:	bne	46128 <__assert_fail@plt+0x33678>
   46140:	str	r6, [r4]
   46144:	mov	r5, #0
   46148:	b	4616c <__assert_fail@plt+0x336bc>
   4614c:	mov	r5, #1
   46150:	b	4616c <__assert_fail@plt+0x336bc>
   46154:	movw	r0, #53073	; 0xcf51
   46158:	movt	r0, #4
   4615c:	bl	12a2c <unsetenv@plt>
   46160:	cmp	r0, #0
   46164:	bne	46114 <__assert_fail@plt+0x33664>
   46168:	bl	125f4 <tzset@plt>
   4616c:	mov	r0, r5
   46170:	sub	sp, fp, #28
   46174:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   46178:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   4617c:	add	fp, sp, #28
   46180:	sub	sp, sp, #4
   46184:	ldr	r7, [r1, #40]	; 0x28
   46188:	mov	r8, #1
   4618c:	cmp	r7, #0
   46190:	beq	46230 <__assert_fail@plt+0x33780>
   46194:	mov	r5, r1
   46198:	mov	r6, r0
   4619c:	cmp	r7, r1
   461a0:	bcc	461b0 <__assert_fail@plt+0x33700>
   461a4:	add	r0, r5, #44	; 0x2c
   461a8:	cmp	r7, r0
   461ac:	bcc	46230 <__assert_fail@plt+0x33780>
   461b0:	ldrb	r0, [r7]
   461b4:	cmp	r0, #0
   461b8:	beq	46224 <__assert_fail@plt+0x33774>
   461bc:	add	r4, r6, #5
   461c0:	mov	r0, r4
   461c4:	mov	r1, r7
   461c8:	bl	123fc <strcmp@plt>
   461cc:	cmp	r0, #0
   461d0:	beq	4622c <__assert_fail@plt+0x3377c>
   461d4:	ldrb	r0, [r4]
   461d8:	cmp	r0, #0
   461dc:	bne	461f8 <__assert_fail@plt+0x33748>
   461e0:	add	r0, r6, #5
   461e4:	cmp	r4, r0
   461e8:	bne	4623c <__assert_fail@plt+0x3378c>
   461ec:	ldrb	r0, [r6, #4]
   461f0:	cmp	r0, #0
   461f4:	beq	4623c <__assert_fail@plt+0x3378c>
   461f8:	mov	r0, r4
   461fc:	bl	127bc <strlen@plt>
   46200:	add	r4, r0, r4
   46204:	ldrb	r0, [r4, #1]!
   46208:	cmp	r0, #0
   4620c:	bne	461c0 <__assert_fail@plt+0x33710>
   46210:	ldr	r0, [r6]
   46214:	cmp	r0, #0
   46218:	addne	r4, r0, #5
   4621c:	movne	r6, r0
   46220:	b	461c0 <__assert_fail@plt+0x33710>
   46224:	movw	r4, #38711	; 0x9737
   46228:	movt	r4, #4
   4622c:	str	r4, [r5, #40]	; 0x28
   46230:	mov	r0, r8
   46234:	sub	sp, fp, #28
   46238:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   4623c:	sub	r0, r6, r4
   46240:	add	sl, r0, #64	; 0x40
   46244:	mov	r0, r7
   46248:	bl	127bc <strlen@plt>
   4624c:	add	r9, r0, #1
   46250:	cmp	r9, sl
   46254:	bge	46274 <__assert_fail@plt+0x337c4>
   46258:	mov	r0, r4
   4625c:	mov	r1, r7
   46260:	mov	r2, r9
   46264:	bl	124e0 <memcpy@plt>
   46268:	mov	r0, #0
   4626c:	strb	r0, [r4, r9]
   46270:	b	4622c <__assert_fail@plt+0x3377c>
   46274:	add	r0, r0, #10
   46278:	cmp	r9, #59	; 0x3b
   4627c:	bic	r0, r0, #3
   46280:	movwcc	r0, #64	; 0x40
   46284:	bl	327ac <__assert_fail@plt+0x1fcfc>
   46288:	cmp	r0, #0
   4628c:	beq	462cc <__assert_fail@plt+0x3381c>
   46290:	mov	sl, r0
   46294:	mov	r0, #1
   46298:	mov	r1, r7
   4629c:	mov	r2, r9
   462a0:	strh	r0, [sl, #4]
   462a4:	mov	r0, #0
   462a8:	add	r4, sl, #5
   462ac:	str	r0, [sl]
   462b0:	mov	r0, r4
   462b4:	bl	124e0 <memcpy@plt>
   462b8:	mov	r0, #0
   462bc:	strb	r0, [r4, r9]
   462c0:	str	sl, [r6]
   462c4:	strb	r0, [sl, #4]
   462c8:	b	4622c <__assert_fail@plt+0x3377c>
   462cc:	mov	r8, #0
   462d0:	str	r8, [r6]
   462d4:	b	46230 <__assert_fail@plt+0x33780>
   462d8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   462dc:	add	fp, sp, #28
   462e0:	sub	sp, sp, #52	; 0x34
   462e4:	mov	r4, r1
   462e8:	cmp	r0, #0
   462ec:	beq	463f8 <__assert_fail@plt+0x33948>
   462f0:	mov	r6, r0
   462f4:	bl	4602c <__assert_fail@plt+0x3357c>
   462f8:	cmp	r0, #0
   462fc:	beq	463f0 <__assert_fail@plt+0x33940>
   46300:	mov	r8, r0
   46304:	mov	r0, #32
   46308:	mov	r1, r4
   4630c:	add	r5, sp, #8
   46310:	vld1.32	{d16-d17}, [r1], r0
   46314:	mov	r2, r5
   46318:	vst1.32	{d16-d17}, [r2], r0
   4631c:	ldr	r0, [r4, #16]
   46320:	ldr	r3, [r4, #20]
   46324:	str	r0, [sp, #24]
   46328:	mvn	r0, #0
   4632c:	str	r0, [sp, #36]	; 0x24
   46330:	str	r3, [sp, #28]
   46334:	ldr	r0, [r1]
   46338:	str	r0, [r2]
   4633c:	mov	r0, r5
   46340:	bl	12438 <mktime@plt>
   46344:	mov	r9, r0
   46348:	ldr	r0, [sp, #36]	; 0x24
   4634c:	mov	sl, #1
   46350:	mov	r1, #1
   46354:	cmp	r0, #0
   46358:	bmi	4636c <__assert_fail@plt+0x338bc>
   4635c:	add	r1, sp, #8
   46360:	mov	r0, r6
   46364:	bl	46178 <__assert_fail@plt+0x336c8>
   46368:	eor	r1, r0, #1
   4636c:	cmp	r8, #1
   46370:	beq	463e4 <__assert_fail@plt+0x33934>
   46374:	str	r1, [sp, #4]
   46378:	bl	12804 <__errno_location@plt>
   4637c:	mov	r6, r0
   46380:	ldr	r7, [r0]
   46384:	ldrb	r0, [r8, #4]
   46388:	cmp	r0, #0
   4638c:	beq	46438 <__assert_fail@plt+0x33988>
   46390:	movw	r0, #53073	; 0xcf51
   46394:	add	r1, r8, #5
   46398:	mov	r2, #1
   4639c:	movt	r0, #4
   463a0:	bl	127d4 <setenv@plt>
   463a4:	cmp	r0, #0
   463a8:	beq	4644c <__assert_fail@plt+0x3399c>
   463ac:	ldr	r0, [r6]
   463b0:	mov	sl, #0
   463b4:	str	r0, [sp]
   463b8:	cmp	r8, #2
   463bc:	bcc	463d8 <__assert_fail@plt+0x33928>
   463c0:	ldr	r7, [r8]
   463c4:	mov	r0, r8
   463c8:	bl	30174 <__assert_fail@plt+0x1d6c4>
   463cc:	cmp	r7, #0
   463d0:	mov	r8, r7
   463d4:	bne	463c0 <__assert_fail@plt+0x33910>
   463d8:	ldr	r0, [sp]
   463dc:	ldr	r1, [sp, #4]
   463e0:	str	r0, [r6]
   463e4:	eor	r0, sl, #1
   463e8:	orrs	r0, r1, r0
   463ec:	beq	46408 <__assert_fail@plt+0x33958>
   463f0:	mvn	r9, #0
   463f4:	b	4642c <__assert_fail@plt+0x3397c>
   463f8:	mov	r0, r4
   463fc:	sub	sp, fp, #28
   46400:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   46404:	b	12990 <timegm@plt>
   46408:	mov	r0, #28
   4640c:	add	r1, r5, #16
   46410:	vld1.32	{d16-d17}, [r5], r0
   46414:	vld1.64	{d18-d19}, [r1]
   46418:	add	r1, r4, #16
   4641c:	vld1.32	{d20-d21}, [r5]
   46420:	vst1.32	{d16-d17}, [r4], r0
   46424:	vst1.32	{d18-d19}, [r1]
   46428:	vst1.32	{d20-d21}, [r4]
   4642c:	mov	r0, r9
   46430:	sub	sp, fp, #28
   46434:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   46438:	movw	r0, #53073	; 0xcf51
   4643c:	movt	r0, #4
   46440:	bl	12a2c <unsetenv@plt>
   46444:	cmp	r0, #0
   46448:	bne	463ac <__assert_fail@plt+0x338fc>
   4644c:	str	r7, [sp]
   46450:	bl	125f4 <tzset@plt>
   46454:	mov	sl, #1
   46458:	cmp	r8, #2
   4645c:	bcs	463c0 <__assert_fail@plt+0x33910>
   46460:	b	463d8 <__assert_fail@plt+0x33928>
   46464:	push	{fp, lr}
   46468:	mov	fp, sp
   4646c:	movw	r0, #58608	; 0xe4f0
   46470:	movt	r0, #5
   46474:	ldr	r0, [r0]
   46478:	bl	12780 <exit@plt>
   4647c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   46480:	add	fp, sp, #28
   46484:	sub	sp, sp, #12
   46488:	mov	r4, r3
   4648c:	mov	r6, r2
   46490:	mov	r5, r1
   46494:	mov	sl, r0
   46498:	bl	127bc <strlen@plt>
   4649c:	ldr	r8, [r5]
   464a0:	cmp	r8, #0
   464a4:	beq	46564 <__assert_fail@plt+0x33ab4>
   464a8:	mov	r7, r0
   464ac:	mov	r0, #0
   464b0:	add	r9, r5, #4
   464b4:	mov	r5, #0
   464b8:	str	r6, [sp, #4]
   464bc:	str	r0, [sp]
   464c0:	mvn	r0, #0
   464c4:	str	r0, [sp, #8]
   464c8:	b	464e4 <__assert_fail@plt+0x33a34>
   464cc:	str	r5, [sp, #8]
   464d0:	ldr	r8, [r9, r5, lsl #2]
   464d4:	add	r6, r6, r4
   464d8:	add	r5, r5, #1
   464dc:	cmp	r8, #0
   464e0:	beq	4654c <__assert_fail@plt+0x33a9c>
   464e4:	mov	r0, r8
   464e8:	mov	r1, sl
   464ec:	mov	r2, r7
   464f0:	bl	12a50 <strncmp@plt>
   464f4:	cmp	r0, #0
   464f8:	bne	464d0 <__assert_fail@plt+0x33a20>
   464fc:	mov	r0, r8
   46500:	bl	127bc <strlen@plt>
   46504:	cmp	r0, r7
   46508:	beq	46568 <__assert_fail@plt+0x33ab8>
   4650c:	ldr	r0, [sp, #8]
   46510:	cmn	r0, #1
   46514:	beq	464cc <__assert_fail@plt+0x33a1c>
   46518:	ldr	r0, [sp, #4]
   4651c:	cmp	r0, #0
   46520:	beq	46540 <__assert_fail@plt+0x33a90>
   46524:	ldr	r1, [sp, #8]
   46528:	mov	r2, r4
   4652c:	mla	r0, r1, r4, r0
   46530:	mov	r1, r6
   46534:	bl	127a4 <bcmp@plt>
   46538:	cmp	r0, #0
   4653c:	beq	464d0 <__assert_fail@plt+0x33a20>
   46540:	mov	r0, #1
   46544:	str	r0, [sp]
   46548:	b	464d0 <__assert_fail@plt+0x33a20>
   4654c:	ldr	r0, [sp]
   46550:	tst	r0, #1
   46554:	ldr	r0, [sp, #8]
   46558:	mvnne	r0, #1
   4655c:	sub	sp, fp, #28
   46560:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   46564:	mvn	r5, #0
   46568:	mov	r0, r5
   4656c:	sub	sp, fp, #28
   46570:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   46574:	push	{r4, r5, r6, sl, fp, lr}
   46578:	add	fp, sp, #16
   4657c:	sub	sp, sp, #8
   46580:	mov	r5, r0
   46584:	movw	r0, #55928	; 0xda78
   46588:	mov	r4, r1
   4658c:	movw	r1, #55955	; 0xda93
   46590:	cmn	r2, #1
   46594:	mov	r2, #5
   46598:	movt	r0, #4
   4659c:	movt	r1, #4
   465a0:	moveq	r1, r0
   465a4:	mov	r0, #0
   465a8:	bl	12564 <dcgettext@plt>
   465ac:	mov	r6, r0
   465b0:	mov	r0, #0
   465b4:	mov	r1, #8
   465b8:	mov	r2, r4
   465bc:	bl	2c88c <__assert_fail@plt+0x19ddc>
   465c0:	mov	r4, r0
   465c4:	mov	r0, #1
   465c8:	mov	r1, r5
   465cc:	bl	2ce4c <__assert_fail@plt+0x1a39c>
   465d0:	str	r0, [sp]
   465d4:	mov	r0, #0
   465d8:	mov	r1, #0
   465dc:	mov	r2, r6
   465e0:	mov	r3, r4
   465e4:	bl	1269c <error@plt>
   465e8:	sub	sp, fp, #16
   465ec:	pop	{r4, r5, r6, sl, fp, pc}
   465f0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   465f4:	add	fp, sp, #28
   465f8:	sub	sp, sp, #4
   465fc:	mov	sl, r1
   46600:	movw	r1, #55984	; 0xdab0
   46604:	mov	r4, r2
   46608:	mov	r7, r0
   4660c:	mov	r0, #0
   46610:	mov	r2, #5
   46614:	mov	r8, #0
   46618:	movt	r1, #4
   4661c:	bl	12564 <dcgettext@plt>
   46620:	movw	r1, #58704	; 0xe550
   46624:	movt	r1, #5
   46628:	ldr	r1, [r1]
   4662c:	bl	12a44 <fputs@plt>
   46630:	ldr	r6, [r7]
   46634:	cmp	r6, #0
   46638:	bne	46658 <__assert_fail@plt+0x33ba8>
   4663c:	movw	r0, #58704	; 0xe550
   46640:	movt	r0, #5
   46644:	ldr	r1, [r0]
   46648:	mov	r0, #10
   4664c:	sub	sp, fp, #28
   46650:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   46654:	b	1299c <putc@plt>
   46658:	add	r0, r7, #4
   4665c:	mov	r9, #0
   46660:	mov	r7, #0
   46664:	str	r0, [sp]
   46668:	b	466b0 <__assert_fail@plt+0x33c00>
   4666c:	movw	r0, #58704	; 0xe550
   46670:	movt	r0, #5
   46674:	ldr	r7, [r0]
   46678:	mov	r0, r6
   4667c:	bl	2ce5c <__assert_fail@plt+0x1a3ac>
   46680:	movw	r1, #56005	; 0xdac5
   46684:	mov	r2, r0
   46688:	mov	r0, r7
   4668c:	movt	r1, #4
   46690:	bl	127f8 <fprintf@plt>
   46694:	add	r7, sl, r5
   46698:	ldr	r0, [sp]
   4669c:	add	r8, r8, r4
   466a0:	ldr	r6, [r0, -r9, lsl #2]
   466a4:	sub	r9, r9, #1
   466a8:	cmp	r6, #0
   466ac:	beq	4663c <__assert_fail@plt+0x33b8c>
   466b0:	mov	r5, #0
   466b4:	cmp	r9, #0
   466b8:	beq	4666c <__assert_fail@plt+0x33bbc>
   466bc:	add	r1, sl, r8
   466c0:	mov	r0, r7
   466c4:	mov	r2, r4
   466c8:	bl	127a4 <bcmp@plt>
   466cc:	cmp	r0, #0
   466d0:	mov	r5, r8
   466d4:	bne	4666c <__assert_fail@plt+0x33bbc>
   466d8:	movw	r0, #58704	; 0xe550
   466dc:	movt	r0, #5
   466e0:	ldr	r5, [r0]
   466e4:	mov	r0, r6
   466e8:	bl	2ce5c <__assert_fail@plt+0x1a3ac>
   466ec:	movw	r1, #56013	; 0xdacd
   466f0:	mov	r2, r0
   466f4:	mov	r0, r5
   466f8:	movt	r1, #4
   466fc:	bl	127f8 <fprintf@plt>
   46700:	b	46698 <__assert_fail@plt+0x33be8>
   46704:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   46708:	add	fp, sp, #28
   4670c:	sub	sp, sp, #20
   46710:	mov	r9, r0
   46714:	mov	r0, r1
   46718:	mov	r4, r3
   4671c:	mov	r5, r2
   46720:	mov	r7, r1
   46724:	bl	127bc <strlen@plt>
   46728:	ldr	sl, [r5]
   4672c:	str	r4, [sp, #16]
   46730:	cmp	sl, #0
   46734:	beq	4680c <__assert_fail@plt+0x33d5c>
   46738:	mov	r8, r0
   4673c:	str	r9, [sp, #4]
   46740:	mov	r0, #0
   46744:	str	r5, [sp, #8]
   46748:	add	r9, r5, #4
   4674c:	mvn	r6, #0
   46750:	mov	r5, #0
   46754:	str	r0, [sp, #12]
   46758:	b	46778 <__assert_fail@plt+0x33cc8>
   4675c:	mov	r6, r5
   46760:	ldr	sl, [r9, r5, lsl #2]
   46764:	ldr	r0, [fp, #8]
   46768:	add	r5, r5, #1
   4676c:	add	r4, r4, r0
   46770:	cmp	sl, #0
   46774:	beq	467d8 <__assert_fail@plt+0x33d28>
   46778:	mov	r0, sl
   4677c:	mov	r1, r7
   46780:	mov	r2, r8
   46784:	bl	12a50 <strncmp@plt>
   46788:	cmp	r0, #0
   4678c:	bne	46760 <__assert_fail@plt+0x33cb0>
   46790:	mov	r0, sl
   46794:	bl	127bc <strlen@plt>
   46798:	cmp	r0, r8
   4679c:	beq	46884 <__assert_fail@plt+0x33dd4>
   467a0:	cmn	r6, #1
   467a4:	beq	4675c <__assert_fail@plt+0x33cac>
   467a8:	ldr	r0, [sp, #16]
   467ac:	cmp	r0, #0
   467b0:	beq	467cc <__assert_fail@plt+0x33d1c>
   467b4:	ldr	r2, [fp, #8]
   467b8:	mov	r1, r4
   467bc:	mla	r0, r6, r2, r0
   467c0:	bl	127a4 <bcmp@plt>
   467c4:	cmp	r0, #0
   467c8:	beq	46760 <__assert_fail@plt+0x33cb0>
   467cc:	mov	r0, #1
   467d0:	str	r0, [sp, #12]
   467d4:	b	46760 <__assert_fail@plt+0x33cb0>
   467d8:	ldr	r0, [sp, #12]
   467dc:	ldr	r5, [sp, #8]
   467e0:	ldr	r9, [sp, #4]
   467e4:	movw	r1, #55928	; 0xda78
   467e8:	movt	r1, #4
   467ec:	tst	r0, #1
   467f0:	bne	46800 <__assert_fail@plt+0x33d50>
   467f4:	cmn	r6, #1
   467f8:	bgt	46878 <__assert_fail@plt+0x33dc8>
   467fc:	beq	46814 <__assert_fail@plt+0x33d64>
   46800:	movw	r1, #55955	; 0xda93
   46804:	movt	r1, #4
   46808:	b	46814 <__assert_fail@plt+0x33d64>
   4680c:	movw	r1, #55928	; 0xda78
   46810:	movt	r1, #4
   46814:	ldr	r6, [fp, #12]
   46818:	mov	r0, #0
   4681c:	mov	r2, #5
   46820:	bl	12564 <dcgettext@plt>
   46824:	mov	r4, r0
   46828:	mov	r0, #0
   4682c:	mov	r1, #8
   46830:	mov	r2, r7
   46834:	bl	2c88c <__assert_fail@plt+0x19ddc>
   46838:	mov	r7, r0
   4683c:	mov	r0, #1
   46840:	mov	r1, r9
   46844:	bl	2ce4c <__assert_fail@plt+0x1a39c>
   46848:	str	r0, [sp]
   4684c:	mov	r0, #0
   46850:	mov	r1, #0
   46854:	mov	r2, r4
   46858:	mov	r3, r7
   4685c:	bl	1269c <error@plt>
   46860:	ldr	r1, [sp, #16]
   46864:	ldr	r2, [fp, #8]
   46868:	mov	r0, r5
   4686c:	bl	465f0 <__assert_fail@plt+0x33b40>
   46870:	blx	r6
   46874:	mvn	r6, #0
   46878:	mov	r0, r6
   4687c:	sub	sp, fp, #28
   46880:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   46884:	mov	r6, r5
   46888:	ldr	r5, [sp, #8]
   4688c:	ldr	r9, [sp, #4]
   46890:	movw	r1, #55928	; 0xda78
   46894:	movt	r1, #4
   46898:	cmn	r6, #1
   4689c:	bgt	46878 <__assert_fail@plt+0x33dc8>
   468a0:	b	467fc <__assert_fail@plt+0x33d4c>
   468a4:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   468a8:	add	fp, sp, #24
   468ac:	ldr	r6, [r1]
   468b0:	cmp	r6, #0
   468b4:	beq	46918 <__assert_fail@plt+0x33e68>
   468b8:	mov	r8, r1
   468bc:	mov	r7, r2
   468c0:	mov	r1, r2
   468c4:	mov	r2, r3
   468c8:	mov	r4, r3
   468cc:	mov	r9, r0
   468d0:	bl	127a4 <bcmp@plt>
   468d4:	cmp	r0, #0
   468d8:	beq	46910 <__assert_fail@plt+0x33e60>
   468dc:	add	r7, r7, r4
   468e0:	add	r5, r8, #4
   468e4:	ldr	r6, [r5]
   468e8:	cmp	r6, #0
   468ec:	beq	46918 <__assert_fail@plt+0x33e68>
   468f0:	mov	r0, r9
   468f4:	mov	r1, r7
   468f8:	mov	r2, r4
   468fc:	bl	127a4 <bcmp@plt>
   46900:	add	r7, r7, r4
   46904:	add	r5, r5, #4
   46908:	cmp	r0, #0
   4690c:	bne	468e4 <__assert_fail@plt+0x33e34>
   46910:	mov	r0, r6
   46914:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   46918:	mov	r6, #0
   4691c:	mov	r0, r6
   46920:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   46924:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   46928:	add	fp, sp, #24
   4692c:	sub	sp, sp, #32
   46930:	mov	r5, r0
   46934:	ldrb	r0, [r2]
   46938:	cmp	r0, #0
   4693c:	beq	46a10 <__assert_fail@plt+0x33f60>
   46940:	movw	r9, #60996	; 0xee44
   46944:	mov	r4, r2
   46948:	mov	r6, r1
   4694c:	movt	r9, #5
   46950:	ldr	r0, [r9]
   46954:	cmp	r0, #0
   46958:	bne	469bc <__assert_fail@plt+0x33f0c>
   4695c:	movw	r0, #48961	; 0xbf41
   46960:	movw	r1, #18688	; 0x4900
   46964:	movt	r0, #4
   46968:	movt	r1, #8
   4696c:	bl	126cc <open64@plt>
   46970:	cmn	r0, #1
   46974:	ble	46a28 <__assert_fail@plt+0x33f78>
   46978:	movw	r1, #56018	; 0xdad2
   4697c:	mov	r7, r0
   46980:	mov	r8, sp
   46984:	movt	r1, #4
   46988:	mov	r0, r8
   4698c:	mov	r2, r7
   46990:	bl	1296c <sprintf@plt>
   46994:	mov	r0, r8
   46998:	mov	r1, #0
   4699c:	bl	128ac <access@plt>
   469a0:	cmp	r0, #0
   469a4:	mvn	r1, #0
   469a8:	mov	r0, r7
   469ac:	movweq	r1, #1
   469b0:	str	r1, [r9]
   469b4:	bl	12a68 <close@plt>
   469b8:	ldr	r0, [r9]
   469bc:	mov	r7, #0
   469c0:	cmp	r0, #0
   469c4:	bmi	46a1c <__assert_fail@plt+0x33f6c>
   469c8:	mov	r0, r4
   469cc:	bl	127bc <strlen@plt>
   469d0:	add	r0, r0, #27
   469d4:	cmp	r0, #4032	; 0xfc0
   469d8:	bls	469ec <__assert_fail@plt+0x33f3c>
   469dc:	bl	327ac <__assert_fail@plt+0x1fcfc>
   469e0:	mov	r5, r0
   469e4:	cmp	r0, #0
   469e8:	beq	46a1c <__assert_fail@plt+0x33f6c>
   469ec:	movw	r1, #56041	; 0xdae9
   469f0:	mov	r0, r5
   469f4:	mov	r2, r6
   469f8:	movt	r1, #4
   469fc:	bl	1296c <sprintf@plt>
   46a00:	add	r0, r5, r0
   46a04:	mov	r1, r4
   46a08:	bl	12660 <strcpy@plt>
   46a0c:	b	46a18 <__assert_fail@plt+0x33f68>
   46a10:	mov	r0, #0
   46a14:	strb	r0, [r5]
   46a18:	mov	r7, r5
   46a1c:	mov	r0, r7
   46a20:	sub	sp, fp, #24
   46a24:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   46a28:	mvn	r0, #0
   46a2c:	mov	r7, #0
   46a30:	str	r0, [r9]
   46a34:	b	46a1c <__assert_fail@plt+0x33f6c>
   46a38:	sub	r0, r0, #1
   46a3c:	ldrb	r3, [r0, #1]!
   46a40:	cmp	r3, #47	; 0x2f
   46a44:	beq	46a3c <__assert_fail@plt+0x33f8c>
   46a48:	mov	r2, #0
   46a4c:	mov	r1, r0
   46a50:	b	46a5c <__assert_fail@plt+0x33fac>
   46a54:	ldrb	r3, [r1, #1]!
   46a58:	mov	r2, #1
   46a5c:	uxtb	r3, r3
   46a60:	cmp	r3, #47	; 0x2f
   46a64:	beq	46a54 <__assert_fail@plt+0x33fa4>
   46a68:	cmp	r3, #0
   46a6c:	bxeq	lr
   46a70:	tst	r2, #1
   46a74:	mov	r2, #0
   46a78:	movne	r0, r1
   46a7c:	ldrb	r3, [r1, #1]!
   46a80:	b	46a5c <__assert_fail@plt+0x33fac>
   46a84:	push	{r4, sl, fp, lr}
   46a88:	add	fp, sp, #8
   46a8c:	mov	r4, r0
   46a90:	bl	127bc <strlen@plt>
   46a94:	mov	r1, r0
   46a98:	sub	r2, r4, #1
   46a9c:	mov	r0, r1
   46aa0:	cmp	r1, #2
   46aa4:	bcc	46ab8 <__assert_fail@plt+0x34008>
   46aa8:	ldrb	r3, [r2, r0]
   46aac:	sub	r1, r0, #1
   46ab0:	cmp	r3, #47	; 0x2f
   46ab4:	beq	46a9c <__assert_fail@plt+0x33fec>
   46ab8:	pop	{r4, sl, fp, pc}
   46abc:	push	{r4, r5, r6, sl, fp, lr}
   46ac0:	add	fp, sp, #16
   46ac4:	mov	r4, r0
   46ac8:	bl	12678 <__fpending@plt>
   46acc:	mov	r5, r0
   46ad0:	mov	r0, r4
   46ad4:	bl	124a4 <ferror@plt>
   46ad8:	mov	r6, r0
   46adc:	mov	r0, r4
   46ae0:	bl	128b8 <fclose@plt>
   46ae4:	cmp	r6, #0
   46ae8:	beq	46b0c <__assert_fail@plt+0x3405c>
   46aec:	mvn	r4, #0
   46af0:	cmp	r0, #0
   46af4:	bne	46b38 <__assert_fail@plt+0x34088>
   46af8:	bl	12804 <__errno_location@plt>
   46afc:	mov	r1, #0
   46b00:	str	r1, [r0]
   46b04:	mov	r0, r4
   46b08:	pop	{r4, r5, r6, sl, fp, pc}
   46b0c:	cmp	r0, #0
   46b10:	mov	r4, r0
   46b14:	mvnne	r4, #0
   46b18:	cmp	r5, #0
   46b1c:	bne	46b38 <__assert_fail@plt+0x34088>
   46b20:	cmp	r0, #0
   46b24:	beq	46b38 <__assert_fail@plt+0x34088>
   46b28:	bl	12804 <__errno_location@plt>
   46b2c:	ldr	r0, [r0]
   46b30:	subs	r4, r0, #9
   46b34:	mvnne	r4, #0
   46b38:	mov	r0, r4
   46b3c:	pop	{r4, r5, r6, sl, fp, pc}
   46b40:	movw	r2, #62998	; 0xf616
   46b44:	mov	r1, #0
   46b48:	movt	r2, #149	; 0x95
   46b4c:	str	r1, [r0, #16]
   46b50:	str	r1, [r0, #20]
   46b54:	str	r2, [r0, #24]
   46b58:	bx	lr
   46b5c:	push	{r4, r5, r6, r7, r9, sl, fp, lr}
   46b60:	add	fp, sp, #24
   46b64:	ldr	r2, [r0, #24]
   46b68:	movw	r3, #62998	; 0xf616
   46b6c:	movt	r3, #149	; 0x95
   46b70:	cmp	r2, r3
   46b74:	bne	46c10 <__assert_fail@plt+0x34160>
   46b78:	add	r3, r0, #16
   46b7c:	add	ip, r0, #8
   46b80:	ldrd	r4, [r3]
   46b84:	orrs	r2, r4, r5
   46b88:	beq	46bc4 <__assert_fail@plt+0x34114>
   46b8c:	ldr	r6, [r1, #96]	; 0x60
   46b90:	ldr	r9, [r1, #100]	; 0x64
   46b94:	ldm	r0, {r2, r7}
   46b98:	eor	r7, r9, r7
   46b9c:	eor	r2, r6, r2
   46ba0:	orrs	r2, r2, r7
   46ba4:	bne	46bc4 <__assert_fail@plt+0x34114>
   46ba8:	ldm	ip, {r2, r7}
   46bac:	ldm	r1, {r6, r9}
   46bb0:	eor	r7, r9, r7
   46bb4:	eor	r2, r6, r2
   46bb8:	orrs	r2, r2, r7
   46bbc:	mov	r2, #1
   46bc0:	beq	46bfc <__assert_fail@plt+0x3414c>
   46bc4:	adds	r6, r4, #1
   46bc8:	adc	r7, r5, #0
   46bcc:	and	r2, r6, r4
   46bd0:	strd	r6, [r3]
   46bd4:	and	r3, r7, r5
   46bd8:	orrs	r2, r2, r3
   46bdc:	mov	r2, #0
   46be0:	bne	46bfc <__assert_fail@plt+0x3414c>
   46be4:	orrs	r3, r6, r7
   46be8:	beq	46c04 <__assert_fail@plt+0x34154>
   46bec:	ldrd	r4, [r1]
   46bf0:	strd	r4, [ip]
   46bf4:	ldrd	r4, [r1, #96]	; 0x60
   46bf8:	strd	r4, [r0]
   46bfc:	mov	r0, r2
   46c00:	pop	{r4, r5, r6, r7, r9, sl, fp, pc}
   46c04:	mov	r2, #1
   46c08:	mov	r0, r2
   46c0c:	pop	{r4, r5, r6, r7, r9, sl, fp, pc}
   46c10:	movw	r0, #56059	; 0xdafb
   46c14:	movw	r1, #56083	; 0xdb13
   46c18:	movw	r3, #56097	; 0xdb21
   46c1c:	mov	r2, #60	; 0x3c
   46c20:	movt	r0, #4
   46c24:	movt	r1, #4
   46c28:	movt	r3, #4
   46c2c:	bl	12ab0 <__assert_fail@plt>
   46c30:	push	{r4, r5, r6, r7, fp, lr}
   46c34:	add	fp, sp, #16
   46c38:	mov	r4, r0
   46c3c:	ldr	r0, [r0, #4]
   46c40:	mov	r5, r1
   46c44:	cmp	r0, r1
   46c48:	bcs	46c7c <__assert_fail@plt+0x341cc>
   46c4c:	mov	r6, r3
   46c50:	cmp	r3, #0
   46c54:	beq	46c88 <__assert_fail@plt+0x341d8>
   46c58:	mvn	r0, #0
   46c5c:	udiv	r0, r0, r6
   46c60:	cmp	r0, r5
   46c64:	bcs	46c88 <__assert_fail@plt+0x341d8>
   46c68:	bl	12804 <__errno_location@plt>
   46c6c:	mov	r1, #12
   46c70:	str	r1, [r0]
   46c74:	mov	r0, #0
   46c78:	pop	{r4, r5, r6, r7, fp, pc}
   46c7c:	mov	r0, #1
   46c80:	str	r5, [r4]
   46c84:	pop	{r4, r5, r6, r7, fp, pc}
   46c88:	ldr	r0, [r4, #8]
   46c8c:	mul	r1, r6, r5
   46c90:	cmp	r0, r2
   46c94:	beq	46cac <__assert_fail@plt+0x341fc>
   46c98:	bl	33500 <__assert_fail@plt+0x20a50>
   46c9c:	mov	r7, r0
   46ca0:	cmp	r0, #0
   46ca4:	bne	46cdc <__assert_fail@plt+0x3422c>
   46ca8:	b	46cec <__assert_fail@plt+0x3423c>
   46cac:	mov	r0, r1
   46cb0:	bl	327ac <__assert_fail@plt+0x1fcfc>
   46cb4:	cmp	r0, #0
   46cb8:	beq	46cec <__assert_fail@plt+0x3423c>
   46cbc:	ldr	r1, [r4, #8]
   46cc0:	mov	r7, r0
   46cc4:	cmp	r1, #0
   46cc8:	beq	46cdc <__assert_fail@plt+0x3422c>
   46ccc:	ldr	r0, [r4]
   46cd0:	mul	r2, r0, r6
   46cd4:	mov	r0, r7
   46cd8:	bl	124e0 <memcpy@plt>
   46cdc:	mov	r0, #1
   46ce0:	str	r5, [r4]
   46ce4:	stmib	r4, {r5, r7}
   46ce8:	pop	{r4, r5, r6, r7, fp, pc}
   46cec:	mov	r0, #0
   46cf0:	pop	{r4, r5, r6, r7, fp, pc}
   46cf4:	mov	r1, r0
   46cf8:	mov	r0, #0
   46cfc:	b	124c8 <clock_gettime@plt>
   46d00:	push	{fp, lr}
   46d04:	mov	fp, sp
   46d08:	mov	r1, r0
   46d0c:	mov	r0, #0
   46d10:	bl	124c8 <clock_gettime@plt>
   46d14:	pop	{fp, pc}
   46d18:	push	{r4, sl, fp, lr}
   46d1c:	add	fp, sp, #8
   46d20:	sub	sp, sp, #264	; 0x108
   46d24:	add	r1, sp, #7
   46d28:	movw	r2, #257	; 0x101
   46d2c:	bl	470e4 <__assert_fail@plt+0x34634>
   46d30:	mov	r4, #0
   46d34:	cmp	r0, #0
   46d38:	bne	46d78 <__assert_fail@plt+0x342c8>
   46d3c:	movw	r1, #31974	; 0x7ce6
   46d40:	add	r0, sp, #7
   46d44:	mov	r2, #2
   46d48:	movt	r1, #4
   46d4c:	bl	127a4 <bcmp@plt>
   46d50:	cmp	r0, #0
   46d54:	beq	46d78 <__assert_fail@plt+0x342c8>
   46d58:	movw	r1, #56164	; 0xdb64
   46d5c:	add	r0, sp, #7
   46d60:	mov	r2, #6
   46d64:	movt	r1, #4
   46d68:	bl	127a4 <bcmp@plt>
   46d6c:	cmp	r0, #0
   46d70:	mov	r4, r0
   46d74:	movwne	r4, #1
   46d78:	mov	r0, r4
   46d7c:	sub	sp, fp, #8
   46d80:	pop	{r4, sl, fp, pc}
   46d84:	vdup.32	q8, r1
   46d88:	mov	r2, #0
   46d8c:	str	r2, [r0, #20]
   46d90:	str	r2, [r0, #24]
   46d94:	mov	r2, #1
   46d98:	strb	r2, [r0, #28]
   46d9c:	vst1.32	{d16-d17}, [r0]!
   46da0:	str	r1, [r0]
   46da4:	bx	lr
   46da8:	ldrb	r0, [r0, #28]
   46dac:	bx	lr
   46db0:	push	{fp, lr}
   46db4:	mov	fp, sp
   46db8:	ldrb	r3, [r0, #28]
   46dbc:	ldr	r2, [r0, #20]
   46dc0:	eor	lr, r3, #1
   46dc4:	add	r2, r2, lr
   46dc8:	and	r3, r2, #3
   46dcc:	ldr	ip, [r0, r3, lsl #2]
   46dd0:	str	r1, [r0, r3, lsl #2]
   46dd4:	str	r3, [r0, #20]
   46dd8:	ldr	r1, [r0, #24]
   46ddc:	cmp	r3, r1
   46de0:	addeq	r1, r2, lr
   46de4:	andeq	r1, r1, #3
   46de8:	streq	r1, [r0, #24]
   46dec:	mov	r1, #0
   46df0:	strb	r1, [r0, #28]
   46df4:	mov	r0, ip
   46df8:	pop	{fp, pc}
   46dfc:	push	{fp, lr}
   46e00:	mov	fp, sp
   46e04:	ldrb	r1, [r0, #28]
   46e08:	cmp	r1, #0
   46e0c:	bne	46e48 <__assert_fail@plt+0x34398>
   46e10:	ldr	r3, [r0, #20]
   46e14:	ldr	r2, [r0, #16]
   46e18:	ldr	r1, [r0, r3, lsl #2]
   46e1c:	str	r2, [r0, r3, lsl #2]
   46e20:	ldr	r2, [r0, #20]
   46e24:	ldr	r3, [r0, #24]
   46e28:	cmp	r2, r3
   46e2c:	moveq	r2, #1
   46e30:	strbeq	r2, [r0, #28]
   46e34:	subne	r2, r2, #1
   46e38:	andne	r2, r2, #3
   46e3c:	strne	r2, [r0, #20]
   46e40:	mov	r0, r1
   46e44:	pop	{fp, pc}
   46e48:	bl	12a5c <abort@plt>
   46e4c:	push	{fp, lr}
   46e50:	mov	fp, sp
   46e54:	mov	r0, #14
   46e58:	bl	1293c <nl_langinfo@plt>
   46e5c:	movw	r1, #38711	; 0x9737
   46e60:	cmp	r0, #0
   46e64:	movt	r1, #4
   46e68:	movne	r1, r0
   46e6c:	movw	r0, #56170	; 0xdb6a
   46e70:	ldrb	r2, [r1]
   46e74:	movt	r0, #4
   46e78:	cmp	r2, #0
   46e7c:	movne	r0, r1
   46e80:	pop	{fp, pc}
   46e84:	push	{r4, sl, fp, lr}
   46e88:	add	fp, sp, #8
   46e8c:	mov	r4, #0
   46e90:	adds	r0, r0, #16
   46e94:	adc	r1, r4, #0
   46e98:	rsb	r2, r1, #0
   46e9c:	eors	r2, r2, r1
   46ea0:	movwne	r2, #1
   46ea4:	cmp	r0, #0
   46ea8:	bmi	46ec8 <__assert_fail@plt+0x34418>
   46eac:	cmp	r2, #0
   46eb0:	asreq	r2, r0, #31
   46eb4:	eoreq	r3, r0, r0
   46eb8:	andeq	r2, r2, #1
   46ebc:	eoreq	r1, r1, r2
   46ec0:	orrseq	r1, r3, r1
   46ec4:	beq	46ed0 <__assert_fail@plt+0x34420>
   46ec8:	mov	r0, r4
   46ecc:	pop	{r4, sl, fp, pc}
   46ed0:	bl	126f0 <malloc@plt>
   46ed4:	cmp	r0, #0
   46ed8:	addne	r4, r0, #8
   46edc:	movne	r1, #8
   46ee0:	bfine	r4, r1, #0, #4
   46ee4:	subne	r0, r4, r0
   46ee8:	strbne	r0, [r4, #-1]
   46eec:	mov	r0, r4
   46ef0:	pop	{r4, sl, fp, pc}
   46ef4:	push	{fp, lr}
   46ef8:	mov	fp, sp
   46efc:	tst	r0, #7
   46f00:	bne	46f1c <__assert_fail@plt+0x3446c>
   46f04:	tst	r0, #8
   46f08:	popeq	{fp, pc}
   46f0c:	ldrb	r1, [r0, #-1]
   46f10:	sub	r0, r0, r1
   46f14:	pop	{fp, lr}
   46f18:	b	30174 <__assert_fail@plt+0x1d6c4>
   46f1c:	bl	12a5c <abort@plt>
   46f20:	push	{r4, sl, fp, lr}
   46f24:	add	fp, sp, #8
   46f28:	mov	r4, r0
   46f2c:	bl	1245c <wcwidth@plt>
   46f30:	cmn	r0, #1
   46f34:	popgt	{r4, sl, fp, pc}
   46f38:	mov	r0, r4
   46f3c:	bl	125c4 <iswcntrl@plt>
   46f40:	clz	r0, r0
   46f44:	lsr	r0, r0, #5
   46f48:	pop	{r4, sl, fp, pc}
   46f4c:	push	{r4, r5, r6, sl, fp, lr}
   46f50:	add	fp, sp, #16
   46f54:	mov	r4, r0
   46f58:	mov	r0, r1
   46f5c:	mov	r5, r1
   46f60:	ldr	r1, [r0], #16
   46f64:	cmp	r1, r0
   46f68:	beq	46f74 <__assert_fail@plt+0x344c4>
   46f6c:	mov	r6, r1
   46f70:	b	46f84 <__assert_fail@plt+0x344d4>
   46f74:	ldr	r2, [r5, #4]
   46f78:	add	r6, r4, #16
   46f7c:	mov	r0, r6
   46f80:	bl	124e0 <memcpy@plt>
   46f84:	str	r6, [r4]
   46f88:	ldr	r0, [r5, #4]
   46f8c:	str	r0, [r4, #4]
   46f90:	ldrb	r0, [r5, #8]
   46f94:	strb	r0, [r4, #8]
   46f98:	cmp	r0, #0
   46f9c:	ldrne	r0, [r5, #12]
   46fa0:	strne	r0, [r4, #12]
   46fa4:	pop	{r4, r5, r6, sl, fp, pc}
   46fa8:	movw	r2, #56176	; 0xdb70
   46fac:	ubfx	r1, r0, #5, #3
   46fb0:	and	r0, r0, #31
   46fb4:	movt	r2, #4
   46fb8:	ldr	r1, [r2, r1, lsl #2]
   46fbc:	mov	r2, #1
   46fc0:	and	r0, r1, r2, lsl r0
   46fc4:	cmp	r0, #0
   46fc8:	movwne	r0, #1
   46fcc:	bx	lr
   46fd0:	push	{r4, r5, r6, sl, fp, lr}
   46fd4:	add	fp, sp, #16
   46fd8:	sub	sp, sp, #56	; 0x38
   46fdc:	mov	r5, r0
   46fe0:	bl	12648 <__ctype_get_mb_cur_max@plt>
   46fe4:	cmp	r0, #2
   46fe8:	bcc	47074 <__assert_fail@plt+0x345c4>
   46fec:	mov	r4, #0
   46ff0:	mov	r0, sp
   46ff4:	str	r4, [sp, #8]
   46ff8:	str	r4, [sp, #4]
   46ffc:	strb	r4, [sp, #12]
   47000:	strb	r4, [sp]
   47004:	str	r5, [sp, #16]
   47008:	bl	25e30 <__assert_fail@plt+0x13380>
   4700c:	ldrb	r0, [sp, #24]
   47010:	cmp	r0, #0
   47014:	beq	47024 <__assert_fail@plt+0x34574>
   47018:	ldr	r0, [sp, #28]
   4701c:	cmp	r0, #0
   47020:	beq	47068 <__assert_fail@plt+0x345b8>
   47024:	mov	r6, #0
   47028:	mov	r5, sp
   4702c:	mov	r4, #0
   47030:	strb	r6, [sp, #12]
   47034:	ldr	r0, [sp, #16]
   47038:	ldr	r1, [sp, #20]
   4703c:	add	r0, r0, r1
   47040:	str	r0, [sp, #16]
   47044:	mov	r0, r5
   47048:	bl	25e30 <__assert_fail@plt+0x13380>
   4704c:	ldrb	r1, [sp, #24]
   47050:	ldr	r0, [sp, #28]
   47054:	add	r4, r4, #1
   47058:	cmp	r1, #0
   4705c:	beq	47030 <__assert_fail@plt+0x34580>
   47060:	cmp	r0, #0
   47064:	bne	47030 <__assert_fail@plt+0x34580>
   47068:	mov	r0, r4
   4706c:	sub	sp, fp, #16
   47070:	pop	{r4, r5, r6, sl, fp, pc}
   47074:	mov	r0, r5
   47078:	sub	sp, fp, #16
   4707c:	pop	{r4, r5, r6, sl, fp, lr}
   47080:	b	127bc <strlen@plt>
   47084:	push	{r4, r5, r6, sl, fp, lr}
   47088:	add	fp, sp, #16
   4708c:	orr	r2, r2, #18688	; 0x4900
   47090:	mov	r4, r3
   47094:	orr	r2, r2, #524288	; 0x80000
   47098:	bl	26670 <__assert_fail@plt+0x13bc0>
   4709c:	mov	r5, r0
   470a0:	mov	r0, #0
   470a4:	cmp	r5, #0
   470a8:	bmi	470e0 <__assert_fail@plt+0x34630>
   470ac:	mov	r0, r5
   470b0:	bl	12984 <fdopendir@plt>
   470b4:	cmp	r0, #0
   470b8:	beq	470c4 <__assert_fail@plt+0x34614>
   470bc:	str	r5, [r4]
   470c0:	pop	{r4, r5, r6, sl, fp, pc}
   470c4:	bl	12804 <__errno_location@plt>
   470c8:	ldr	r6, [r0]
   470cc:	mov	r4, r0
   470d0:	mov	r0, r5
   470d4:	bl	12a68 <close@plt>
   470d8:	mov	r0, #0
   470dc:	str	r6, [r4]
   470e0:	pop	{r4, r5, r6, sl, fp, pc}
   470e4:	push	{r4, r5, r6, r7, fp, lr}
   470e8:	add	fp, sp, #16
   470ec:	mov	r4, r1
   470f0:	mov	r1, #0
   470f4:	mov	r6, r2
   470f8:	bl	12900 <setlocale@plt>
   470fc:	cmp	r0, #0
   47100:	beq	47130 <__assert_fail@plt+0x34680>
   47104:	mov	r7, r0
   47108:	bl	127bc <strlen@plt>
   4710c:	cmp	r0, r6
   47110:	bcs	4714c <__assert_fail@plt+0x3469c>
   47114:	add	r2, r0, #1
   47118:	mov	r0, r4
   4711c:	mov	r1, r7
   47120:	bl	124e0 <memcpy@plt>
   47124:	mov	r5, #0
   47128:	mov	r0, r5
   4712c:	pop	{r4, r5, r6, r7, fp, pc}
   47130:	mov	r5, #22
   47134:	cmp	r6, #0
   47138:	beq	47174 <__assert_fail@plt+0x346c4>
   4713c:	mov	r0, #0
   47140:	strb	r0, [r4]
   47144:	mov	r0, r5
   47148:	pop	{r4, r5, r6, r7, fp, pc}
   4714c:	mov	r5, #34	; 0x22
   47150:	cmp	r6, #0
   47154:	beq	47174 <__assert_fail@plt+0x346c4>
   47158:	sub	r6, r6, #1
   4715c:	mov	r0, r4
   47160:	mov	r1, r7
   47164:	mov	r2, r6
   47168:	bl	124e0 <memcpy@plt>
   4716c:	mov	r0, #0
   47170:	strb	r0, [r4, r6]
   47174:	mov	r0, r5
   47178:	pop	{r4, r5, r6, r7, fp, pc}
   4717c:	mov	r1, #0
   47180:	b	12900 <setlocale@plt>
   47184:	eor	r1, r1, #-2147483648	; 0x80000000
   47188:	b	47190 <__assert_fail@plt+0x346e0>
   4718c:	eor	r3, r3, #-2147483648	; 0x80000000
   47190:	push	{r4, r5, lr}
   47194:	lsl	r4, r1, #1
   47198:	lsl	r5, r3, #1
   4719c:	teq	r4, r5
   471a0:	teqeq	r0, r2
   471a4:	orrsne	ip, r4, r0
   471a8:	orrsne	ip, r5, r2
   471ac:	mvnsne	ip, r4, asr #21
   471b0:	mvnsne	ip, r5, asr #21
   471b4:	beq	473a0 <__assert_fail@plt+0x348f0>
   471b8:	lsr	r4, r4, #21
   471bc:	rsbs	r5, r4, r5, lsr #21
   471c0:	rsblt	r5, r5, #0
   471c4:	ble	471e4 <__assert_fail@plt+0x34734>
   471c8:	add	r4, r4, r5
   471cc:	eor	r2, r0, r2
   471d0:	eor	r3, r1, r3
   471d4:	eor	r0, r2, r0
   471d8:	eor	r1, r3, r1
   471dc:	eor	r2, r0, r2
   471e0:	eor	r3, r1, r3
   471e4:	cmp	r5, #54	; 0x36
   471e8:	pophi	{r4, r5, pc}
   471ec:	tst	r1, #-2147483648	; 0x80000000
   471f0:	lsl	r1, r1, #12
   471f4:	mov	ip, #1048576	; 0x100000
   471f8:	orr	r1, ip, r1, lsr #12
   471fc:	beq	47208 <__assert_fail@plt+0x34758>
   47200:	rsbs	r0, r0, #0
   47204:	rsc	r1, r1, #0
   47208:	tst	r3, #-2147483648	; 0x80000000
   4720c:	lsl	r3, r3, #12
   47210:	orr	r3, ip, r3, lsr #12
   47214:	beq	47220 <__assert_fail@plt+0x34770>
   47218:	rsbs	r2, r2, #0
   4721c:	rsc	r3, r3, #0
   47220:	teq	r4, r5
   47224:	beq	47388 <__assert_fail@plt+0x348d8>
   47228:	sub	r4, r4, #1
   4722c:	rsbs	lr, r5, #32
   47230:	blt	4724c <__assert_fail@plt+0x3479c>
   47234:	lsl	ip, r2, lr
   47238:	adds	r0, r0, r2, lsr r5
   4723c:	adc	r1, r1, #0
   47240:	adds	r0, r0, r3, lsl lr
   47244:	adcs	r1, r1, r3, asr r5
   47248:	b	47268 <__assert_fail@plt+0x347b8>
   4724c:	sub	r5, r5, #32
   47250:	add	lr, lr, #32
   47254:	cmp	r2, #1
   47258:	lsl	ip, r3, lr
   4725c:	orrcs	ip, ip, #2
   47260:	adds	r0, r0, r3, asr r5
   47264:	adcs	r1, r1, r3, asr #31
   47268:	and	r5, r1, #-2147483648	; 0x80000000
   4726c:	bpl	4727c <__assert_fail@plt+0x347cc>
   47270:	rsbs	ip, ip, #0
   47274:	rscs	r0, r0, #0
   47278:	rsc	r1, r1, #0
   4727c:	cmp	r1, #1048576	; 0x100000
   47280:	bcc	472c0 <__assert_fail@plt+0x34810>
   47284:	cmp	r1, #2097152	; 0x200000
   47288:	bcc	472a8 <__assert_fail@plt+0x347f8>
   4728c:	lsrs	r1, r1, #1
   47290:	rrxs	r0, r0
   47294:	rrx	ip, ip
   47298:	add	r4, r4, #1
   4729c:	lsl	r2, r4, #21
   472a0:	cmn	r2, #4194304	; 0x400000
   472a4:	bcs	47400 <__assert_fail@plt+0x34950>
   472a8:	cmp	ip, #-2147483648	; 0x80000000
   472ac:	lsrseq	ip, r0, #1
   472b0:	adcs	r0, r0, #0
   472b4:	adc	r1, r1, r4, lsl #20
   472b8:	orr	r1, r1, r5
   472bc:	pop	{r4, r5, pc}
   472c0:	lsls	ip, ip, #1
   472c4:	adcs	r0, r0, r0
   472c8:	adc	r1, r1, r1
   472cc:	tst	r1, #1048576	; 0x100000
   472d0:	sub	r4, r4, #1
   472d4:	bne	472a8 <__assert_fail@plt+0x347f8>
   472d8:	teq	r1, #0
   472dc:	moveq	r1, r0
   472e0:	moveq	r0, #0
   472e4:	clz	r3, r1
   472e8:	addeq	r3, r3, #32
   472ec:	sub	r3, r3, #11
   472f0:	subs	r2, r3, #32
   472f4:	bge	47318 <__assert_fail@plt+0x34868>
   472f8:	adds	r2, r2, #12
   472fc:	ble	47314 <__assert_fail@plt+0x34864>
   47300:	add	ip, r2, #20
   47304:	rsb	r2, r2, #12
   47308:	lsl	r0, r1, ip
   4730c:	lsr	r1, r1, r2
   47310:	b	47328 <__assert_fail@plt+0x34878>
   47314:	add	r2, r2, #20
   47318:	rsble	ip, r2, #32
   4731c:	lsl	r1, r1, r2
   47320:	orrle	r1, r1, r0, lsr ip
   47324:	lslle	r0, r0, r2
   47328:	subs	r4, r4, r3
   4732c:	addge	r1, r1, r4, lsl #20
   47330:	orrge	r1, r1, r5
   47334:	popge	{r4, r5, pc}
   47338:	mvn	r4, r4
   4733c:	subs	r4, r4, #31
   47340:	bge	4737c <__assert_fail@plt+0x348cc>
   47344:	adds	r4, r4, #12
   47348:	bgt	47364 <__assert_fail@plt+0x348b4>
   4734c:	add	r4, r4, #20
   47350:	rsb	r2, r4, #32
   47354:	lsr	r0, r0, r4
   47358:	orr	r0, r0, r1, lsl r2
   4735c:	orr	r1, r5, r1, lsr r4
   47360:	pop	{r4, r5, pc}
   47364:	rsb	r4, r4, #12
   47368:	rsb	r2, r4, #32
   4736c:	lsr	r0, r0, r2
   47370:	orr	r0, r0, r1, lsl r4
   47374:	mov	r1, r5
   47378:	pop	{r4, r5, pc}
   4737c:	lsr	r0, r1, r4
   47380:	mov	r1, r5
   47384:	pop	{r4, r5, pc}
   47388:	teq	r4, #0
   4738c:	eor	r3, r3, #1048576	; 0x100000
   47390:	eoreq	r1, r1, #1048576	; 0x100000
   47394:	addeq	r4, r4, #1
   47398:	subne	r5, r5, #1
   4739c:	b	47228 <__assert_fail@plt+0x34778>
   473a0:	mvns	ip, r4, asr #21
   473a4:	mvnsne	ip, r5, asr #21
   473a8:	beq	47410 <__assert_fail@plt+0x34960>
   473ac:	teq	r4, r5
   473b0:	teqeq	r0, r2
   473b4:	beq	473c8 <__assert_fail@plt+0x34918>
   473b8:	orrs	ip, r4, r0
   473bc:	moveq	r1, r3
   473c0:	moveq	r0, r2
   473c4:	pop	{r4, r5, pc}
   473c8:	teq	r1, r3
   473cc:	movne	r1, #0
   473d0:	movne	r0, #0
   473d4:	popne	{r4, r5, pc}
   473d8:	lsrs	ip, r4, #21
   473dc:	bne	473f0 <__assert_fail@plt+0x34940>
   473e0:	lsls	r0, r0, #1
   473e4:	adcs	r1, r1, r1
   473e8:	orrcs	r1, r1, #-2147483648	; 0x80000000
   473ec:	pop	{r4, r5, pc}
   473f0:	adds	r4, r4, #4194304	; 0x400000
   473f4:	addcc	r1, r1, #1048576	; 0x100000
   473f8:	popcc	{r4, r5, pc}
   473fc:	and	r5, r1, #-2147483648	; 0x80000000
   47400:	orr	r1, r5, #2130706432	; 0x7f000000
   47404:	orr	r1, r1, #15728640	; 0xf00000
   47408:	mov	r0, #0
   4740c:	pop	{r4, r5, pc}
   47410:	mvns	ip, r4, asr #21
   47414:	movne	r1, r3
   47418:	movne	r0, r2
   4741c:	mvnseq	ip, r5, asr #21
   47420:	movne	r3, r1
   47424:	movne	r2, r0
   47428:	orrs	r4, r0, r1, lsl #12
   4742c:	orrseq	r5, r2, r3, lsl #12
   47430:	teqeq	r1, r3
   47434:	orrne	r1, r1, #524288	; 0x80000
   47438:	pop	{r4, r5, pc}
   4743c:	teq	r0, #0
   47440:	moveq	r1, #0
   47444:	bxeq	lr
   47448:	push	{r4, r5, lr}
   4744c:	mov	r4, #1024	; 0x400
   47450:	add	r4, r4, #50	; 0x32
   47454:	mov	r5, #0
   47458:	mov	r1, #0
   4745c:	b	472d8 <__assert_fail@plt+0x34828>
   47460:	teq	r0, #0
   47464:	moveq	r1, #0
   47468:	bxeq	lr
   4746c:	push	{r4, r5, lr}
   47470:	mov	r4, #1024	; 0x400
   47474:	add	r4, r4, #50	; 0x32
   47478:	ands	r5, r0, #-2147483648	; 0x80000000
   4747c:	rsbmi	r0, r0, #0
   47480:	mov	r1, #0
   47484:	b	472d8 <__assert_fail@plt+0x34828>
   47488:	lsls	r2, r0, #1
   4748c:	asr	r1, r2, #3
   47490:	rrx	r1, r1
   47494:	lsl	r0, r2, #28
   47498:	andsne	r3, r2, #-16777216	; 0xff000000
   4749c:	teqne	r3, #-16777216	; 0xff000000
   474a0:	eorne	r1, r1, #939524096	; 0x38000000
   474a4:	bxne	lr
   474a8:	bics	r2, r2, #-16777216	; 0xff000000
   474ac:	bxeq	lr
   474b0:	teq	r3, #-16777216	; 0xff000000
   474b4:	orreq	r1, r1, #524288	; 0x80000
   474b8:	bxeq	lr
   474bc:	push	{r4, r5, lr}
   474c0:	mov	r4, #896	; 0x380
   474c4:	and	r5, r1, #-2147483648	; 0x80000000
   474c8:	bic	r1, r1, #-2147483648	; 0x80000000
   474cc:	b	472d8 <__assert_fail@plt+0x34828>
   474d0:	orrs	r2, r0, r1
   474d4:	bxeq	lr
   474d8:	push	{r4, r5, lr}
   474dc:	mov	r5, #0
   474e0:	b	47500 <__assert_fail@plt+0x34a50>
   474e4:	orrs	r2, r0, r1
   474e8:	bxeq	lr
   474ec:	push	{r4, r5, lr}
   474f0:	ands	r5, r1, #-2147483648	; 0x80000000
   474f4:	bpl	47500 <__assert_fail@plt+0x34a50>
   474f8:	rsbs	r0, r0, #0
   474fc:	rsc	r1, r1, #0
   47500:	mov	r4, #1024	; 0x400
   47504:	add	r4, r4, #50	; 0x32
   47508:	lsrs	ip, r1, #22
   4750c:	beq	4727c <__assert_fail@plt+0x347cc>
   47510:	mov	r2, #3
   47514:	lsrs	ip, ip, #3
   47518:	addne	r2, r2, #3
   4751c:	lsrs	ip, ip, #3
   47520:	addne	r2, r2, #3
   47524:	add	r2, r2, ip, lsr #3
   47528:	rsb	r3, r2, #32
   4752c:	lsl	ip, r0, r3
   47530:	lsr	r0, r0, r2
   47534:	orr	r0, r0, r1, lsl r3
   47538:	lsr	r1, r1, r2
   4753c:	add	r4, r4, r2
   47540:	b	4727c <__assert_fail@plt+0x347cc>
   47544:	cmp	r3, #0
   47548:	cmpeq	r2, #0
   4754c:	bne	47570 <__assert_fail@plt+0x34ac0>
   47550:	cmp	r1, #0
   47554:	movlt	r1, #-2147483648	; 0x80000000
   47558:	movlt	r0, #0
   4755c:	blt	4756c <__assert_fail@plt+0x34abc>
   47560:	cmpeq	r0, #0
   47564:	mvnne	r1, #-2147483648	; 0x80000000
   47568:	mvnne	r0, #0
   4756c:	b	47654 <__assert_fail@plt+0x34ba4>
   47570:	sub	sp, sp, #8
   47574:	push	{sp, lr}
   47578:	cmp	r1, #0
   4757c:	blt	4759c <__assert_fail@plt+0x34aec>
   47580:	cmp	r3, #0
   47584:	blt	475d0 <__assert_fail@plt+0x34b20>
   47588:	bl	476a8 <__assert_fail@plt+0x34bf8>
   4758c:	ldr	lr, [sp, #4]
   47590:	add	sp, sp, #8
   47594:	pop	{r2, r3}
   47598:	bx	lr
   4759c:	rsbs	r0, r0, #0
   475a0:	sbc	r1, r1, r1, lsl #1
   475a4:	cmp	r3, #0
   475a8:	blt	475f4 <__assert_fail@plt+0x34b44>
   475ac:	bl	476a8 <__assert_fail@plt+0x34bf8>
   475b0:	ldr	lr, [sp, #4]
   475b4:	add	sp, sp, #8
   475b8:	pop	{r2, r3}
   475bc:	rsbs	r0, r0, #0
   475c0:	sbc	r1, r1, r1, lsl #1
   475c4:	rsbs	r2, r2, #0
   475c8:	sbc	r3, r3, r3, lsl #1
   475cc:	bx	lr
   475d0:	rsbs	r2, r2, #0
   475d4:	sbc	r3, r3, r3, lsl #1
   475d8:	bl	476a8 <__assert_fail@plt+0x34bf8>
   475dc:	ldr	lr, [sp, #4]
   475e0:	add	sp, sp, #8
   475e4:	pop	{r2, r3}
   475e8:	rsbs	r0, r0, #0
   475ec:	sbc	r1, r1, r1, lsl #1
   475f0:	bx	lr
   475f4:	rsbs	r2, r2, #0
   475f8:	sbc	r3, r3, r3, lsl #1
   475fc:	bl	476a8 <__assert_fail@plt+0x34bf8>
   47600:	ldr	lr, [sp, #4]
   47604:	add	sp, sp, #8
   47608:	pop	{r2, r3}
   4760c:	rsbs	r2, r2, #0
   47610:	sbc	r3, r3, r3, lsl #1
   47614:	bx	lr
   47618:	cmp	r3, #0
   4761c:	cmpeq	r2, #0
   47620:	bne	47638 <__assert_fail@plt+0x34b88>
   47624:	cmp	r1, #0
   47628:	cmpeq	r0, #0
   4762c:	mvnne	r1, #0
   47630:	mvnne	r0, #0
   47634:	b	47654 <__assert_fail@plt+0x34ba4>
   47638:	sub	sp, sp, #8
   4763c:	push	{sp, lr}
   47640:	bl	476a8 <__assert_fail@plt+0x34bf8>
   47644:	ldr	lr, [sp, #4]
   47648:	add	sp, sp, #8
   4764c:	pop	{r2, r3}
   47650:	bx	lr
   47654:	push	{r1, lr}
   47658:	mov	r0, #8
   4765c:	bl	123a8 <raise@plt>
   47660:	pop	{r1, pc}
   47664:	andeq	r0, r0, r0
   47668:	vmov	d6, r0, r1
   4766c:	vldr	d7, [pc, #36]	; 47698 <__assert_fail@plt+0x34be8>
   47670:	vldr	d5, [pc, #40]	; 476a0 <__assert_fail@plt+0x34bf0>
   47674:	vmul.f64	d7, d6, d7
   47678:	vcvt.u32.f64	s14, d7
   4767c:	vcvt.f64.u32	d4, s14
   47680:	vmov	r1, s14
   47684:	vmls.f64	d6, d4, d5
   47688:	vcvt.u32.f64	s15, d6
   4768c:	vmov	r0, s15
   47690:	bx	lr
   47694:	nop			; (mov r0, r0)
   47698:	andeq	r0, r0, r0
   4769c:	ldclcc	0, cr0, [r0]
   476a0:	andeq	r0, r0, r0
   476a4:	mvnsmi	r0, r0
   476a8:	cmp	r1, r3
   476ac:	cmpeq	r0, r2
   476b0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   476b4:	mov	r4, r0
   476b8:	movcc	r0, #0
   476bc:	mov	r5, r1
   476c0:	ldr	lr, [sp, #36]	; 0x24
   476c4:	movcc	r1, r0
   476c8:	bcc	477c4 <__assert_fail@plt+0x34d14>
   476cc:	cmp	r3, #0
   476d0:	clzeq	ip, r2
   476d4:	clzne	ip, r3
   476d8:	addeq	ip, ip, #32
   476dc:	cmp	r5, #0
   476e0:	clzeq	r1, r4
   476e4:	addeq	r1, r1, #32
   476e8:	clzne	r1, r5
   476ec:	sub	ip, ip, r1
   476f0:	sub	sl, ip, #32
   476f4:	lsl	r9, r3, ip
   476f8:	rsb	fp, ip, #32
   476fc:	orr	r9, r9, r2, lsl sl
   47700:	orr	r9, r9, r2, lsr fp
   47704:	lsl	r8, r2, ip
   47708:	cmp	r5, r9
   4770c:	cmpeq	r4, r8
   47710:	movcc	r0, #0
   47714:	movcc	r1, r0
   47718:	bcc	47734 <__assert_fail@plt+0x34c84>
   4771c:	mov	r0, #1
   47720:	subs	r4, r4, r8
   47724:	lsl	r1, r0, sl
   47728:	orr	r1, r1, r0, lsr fp
   4772c:	lsl	r0, r0, ip
   47730:	sbc	r5, r5, r9
   47734:	cmp	ip, #0
   47738:	beq	477c4 <__assert_fail@plt+0x34d14>
   4773c:	lsr	r6, r8, #1
   47740:	orr	r6, r6, r9, lsl #31
   47744:	lsr	r7, r9, #1
   47748:	mov	r2, ip
   4774c:	b	47770 <__assert_fail@plt+0x34cc0>
   47750:	subs	r3, r4, r6
   47754:	sbc	r8, r5, r7
   47758:	adds	r3, r3, r3
   4775c:	adc	r8, r8, r8
   47760:	adds	r4, r3, #1
   47764:	adc	r5, r8, #0
   47768:	subs	r2, r2, #1
   4776c:	beq	4778c <__assert_fail@plt+0x34cdc>
   47770:	cmp	r5, r7
   47774:	cmpeq	r4, r6
   47778:	bcs	47750 <__assert_fail@plt+0x34ca0>
   4777c:	adds	r4, r4, r4
   47780:	adc	r5, r5, r5
   47784:	subs	r2, r2, #1
   47788:	bne	47770 <__assert_fail@plt+0x34cc0>
   4778c:	lsr	r3, r4, ip
   47790:	orr	r3, r3, r5, lsl fp
   47794:	lsr	r2, r5, ip
   47798:	orr	r3, r3, r5, lsr sl
   4779c:	adds	r0, r0, r4
   477a0:	mov	r4, r3
   477a4:	lsl	r3, r2, ip
   477a8:	orr	r3, r3, r4, lsl sl
   477ac:	lsl	ip, r4, ip
   477b0:	orr	r3, r3, r4, lsr fp
   477b4:	adc	r1, r1, r5
   477b8:	subs	r0, r0, ip
   477bc:	mov	r5, r2
   477c0:	sbc	r1, r1, r3
   477c4:	cmp	lr, #0
   477c8:	strdne	r4, [lr]
   477cc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   477d0:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   477d4:	mov	r7, r0
   477d8:	ldr	r6, [pc, #72]	; 47828 <__assert_fail@plt+0x34d78>
   477dc:	ldr	r5, [pc, #72]	; 4782c <__assert_fail@plt+0x34d7c>
   477e0:	add	r6, pc, r6
   477e4:	add	r5, pc, r5
   477e8:	sub	r6, r6, r5
   477ec:	mov	r8, r1
   477f0:	mov	r9, r2
   477f4:	bl	12340 <pthread_mutex_unlock@plt-0x20>
   477f8:	asrs	r6, r6, #2
   477fc:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   47800:	mov	r4, #0
   47804:	add	r4, r4, #1
   47808:	ldr	r3, [r5], #4
   4780c:	mov	r2, r9
   47810:	mov	r1, r8
   47814:	mov	r0, r7
   47818:	blx	r3
   4781c:	cmp	r6, r4
   47820:	bne	47804 <__assert_fail@plt+0x34d54>
   47824:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   47828:	andeq	r6, r1, r4, lsl r7
   4782c:	andeq	r6, r1, ip, lsl #14
   47830:	bx	lr
   47834:	ldr	r3, [pc, #12]	; 47848 <__assert_fail@plt+0x34d98>
   47838:	mov	r1, #0
   4783c:	add	r3, pc, r3
   47840:	ldr	r2, [r3]
   47844:	b	12828 <__cxa_atexit@plt>
   47848:	andeq	r6, r1, r8, asr #20

Disassembly of section .fini:

0004784c <.fini>:
   4784c:	push	{r3, lr}
   47850:	pop	{r3, pc}
