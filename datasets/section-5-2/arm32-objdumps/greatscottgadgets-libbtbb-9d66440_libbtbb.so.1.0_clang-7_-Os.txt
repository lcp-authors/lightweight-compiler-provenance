
../repos/greatscottgadgets-libbtbb-9d66440/lib/src/libbtbb.so.1.0:     file format elf32-littlearm


Disassembly of section .init:

00004534 <.init>:
    4534:	push	{r3, lr}
    4538:	bl	4900 <__assert_fail@plt+0x10>
    453c:	pop	{r3, pc}

Disassembly of section .plt:

00004540 <calloc@plt-0x14>:
    4540:	push	{lr}		; (str lr, [sp, #-4]!)
    4544:	ldr	lr, [pc, #4]	; 4550 <calloc@plt-0x4>
    4548:	add	lr, pc, lr
    454c:	ldr	pc, [lr, #8]!
    4550:			; <UNDEFINED> instruction: 0x00021ab0

00004554 <calloc@plt>:
    4554:	add	ip, pc, #0, 12
    4558:	add	ip, ip, #135168	; 0x21000
    455c:	ldr	pc, [ip, #2736]!	; 0xab0

00004560 <raise@plt>:
    4560:	add	ip, pc, #0, 12
    4564:	add	ip, ip, #135168	; 0x21000
    4568:	ldr	pc, [ip, #2728]!	; 0xaa8

0000456c <gen_hop_pattern@plt>:
    456c:	add	ip, pc, #0, 12
    4570:	add	ip, ip, #135168	; 0x21000
    4574:	ldr	pc, [ip, #2720]!	; 0xaa0

00004578 <__cxa_finalize@plt>:
    4578:	add	ip, pc, #0, 12
    457c:	add	ip, ip, #135168	; 0x21000
    4580:	ldr	pc, [ip, #2712]!	; 0xa98

00004584 <btbb_get_payload_packed@plt>:
    4584:	add	ip, pc, #0, 12
    4588:	add	ip, ip, #135168	; 0x21000
    458c:	ldr	pc, [ip, #2704]!	; 0xa90

00004590 <printf@plt>:
    4590:	add	ip, pc, #0, 12
    4594:	add	ip, ip, #135168	; 0x21000
    4598:	ldr	pc, [ip, #2696]!	; 0xa88

0000459c <fopen@plt>:
    459c:	add	ip, pc, #0, 12
    45a0:	add	ip, ip, #135168	; 0x21000
    45a4:	ldr	pc, [ip, #2688]!	; 0xa80

000045a8 <lell_packet_is_data@plt>:
    45a8:	add	ip, pc, #0, 12
    45ac:	add	ip, ip, #135168	; 0x21000
    45b0:	ldr	pc, [ip, #2680]!	; 0xa78

000045b4 <fflush@plt>:
    45b4:	add	ip, pc, #0, 12
    45b8:	add	ip, ip, #135168	; 0x21000
    45bc:	ldr	pc, [ip, #2672]!	; 0xa70

000045c0 <btbb_packet_set_flag@plt>:
    45c0:	add	ip, pc, #0, 12
    45c4:	add	ip, ip, #135168	; 0x21000
    45c8:	ldr	pc, [ip, #2664]!	; 0xa68

000045cc <pcapng_append_interface_option@plt>:
    45cc:	add	ip, pc, #0, 12
    45d0:	add	ip, ip, #135168	; 0x21000
    45d4:	ldr	pc, [ip, #2656]!	; 0xa60

000045d8 <free@plt>:
    45d8:	add	ip, pc, #0, 12
    45dc:	add	ip, ip, #135168	; 0x21000
    45e0:	ldr	pc, [ip, #2648]!	; 0xa58

000045e4 <btbb_packet_get_modulation@plt>:
    45e4:	add	ip, pc, #0, 12
    45e8:	add	ip, ip, #135168	; 0x21000
    45ec:	ldr	pc, [ip, #2640]!	; 0xa50

000045f0 <btbb_packet_get_ac_errors@plt>:
    45f0:	add	ip, pc, #0, 12
    45f4:	add	ip, ip, #135168	; 0x21000
    45f8:	ldr	pc, [ip, #2632]!	; 0xa48

000045fc <memcpy@plt>:
    45fc:	add	ip, pc, #0, 12
    4600:	add	ip, ip, #135168	; 0x21000
    4604:	ldr	pc, [ip, #2624]!	; 0xa40

00004608 <btbb_uap_from_header@plt>:
    4608:	add	ip, pc, #0, 12
    460c:	add	ip, ip, #135168	; 0x21000
    4610:	ldr	pc, [ip, #2616]!	; 0xa38

00004614 <fhs@plt>:
    4614:	add	ip, pc, #0, 12
    4618:	add	ip, ip, #135168	; 0x21000
    461c:	ldr	pc, [ip, #2608]!	; 0xa30

00004620 <EV4@plt>:
    4620:	add	ip, pc, #0, 12
    4624:	add	ip, ip, #135168	; 0x21000
    4628:	ldr	pc, [ip, #2600]!	; 0xa28

0000462c <memcmp@plt>:
    462c:	add	ip, pc, #0, 12
    4630:	add	ip, ip, #135168	; 0x21000
    4634:	ldr	pc, [ip, #2592]!	; 0xa20

00004638 <lell_pcap_close@plt>:
    4638:	add	ip, pc, #0, 12
    463c:	add	ip, ip, #135168	; 0x21000
    4640:	ldr	pc, [ip, #2584]!	; 0xa18

00004644 <btbb_pcap_open@plt>:
    4644:	add	ip, pc, #0, 12
    4648:	add	ip, ip, #135168	; 0x21000
    464c:	ldr	pc, [ip, #2576]!	; 0xa10

00004650 <btbb_header_present@plt>:
    4650:	add	ip, pc, #0, 12
    4654:	add	ip, ip, #135168	; 0x21000
    4658:	ldr	pc, [ip, #2568]!	; 0xa08

0000465c <pcapng_create@plt>:
    465c:	add	ip, pc, #0, 12
    4660:	add	ip, ip, #135168	; 0x21000
    4664:	ldr	pc, [ip, #2560]!	; 0xa00

00004668 <DM@plt>:
    4668:	add	ip, pc, #0, 12
    466c:	add	ip, ip, #135168	; 0x21000
    4670:	ldr	pc, [ip, #2552]!	; 0x9f8

00004674 <HV@plt>:
    4674:	add	ip, pc, #0, 12
    4678:	add	ip, ip, #135168	; 0x21000
    467c:	ldr	pc, [ip, #2544]!	; 0x9f0

00004680 <perror@plt>:
    4680:	add	ip, pc, #0, 12
    4684:	add	ip, ip, #135168	; 0x21000
    4688:	ldr	pc, [ip, #2536]!	; 0x9e8

0000468c <perm_table_init@plt>:
    468c:	add	ip, pc, #0, 12
    4690:	add	ip, ip, #135168	; 0x21000
    4694:	ldr	pc, [ip, #2528]!	; 0x9e0

00004698 <btbb_packet_set_uap@plt>:
    4698:	add	ip, pc, #0, 12
    469c:	add	ip, ip, #135168	; 0x21000
    46a0:	ldr	pc, [ip, #2520]!	; 0x9d8

000046a4 <fwrite@plt>:
    46a4:	add	ip, pc, #0, 12
    46a8:	add	ip, ip, #135168	; 0x21000
    46ac:	ldr	pc, [ip, #2512]!	; 0x9d0

000046b0 <btbb_pcap_close@plt>:
    46b0:	add	ip, pc, #0, 12
    46b4:	add	ip, ip, #135168	; 0x21000
    46b8:	ldr	pc, [ip, #2504]!	; 0x9c8

000046bc <crc_check@plt>:
    46bc:	add	ip, pc, #0, 12
    46c0:	add	ip, ip, #135168	; 0x21000
    46c4:	ldr	pc, [ip, #2496]!	; 0x9c0

000046c8 <btbb_decode@plt>:
    46c8:	add	ip, pc, #0, 12
    46cc:	add	ip, ip, #135168	; 0x21000
    46d0:	ldr	pc, [ip, #2488]!	; 0x9b8

000046d4 <btbb_winnow@plt>:
    46d4:	add	ip, pc, #0, 12
    46d8:	add	ip, ip, #135168	; 0x21000
    46dc:	ldr	pc, [ip, #2480]!	; 0x9b0

000046e0 <get_hop_pattern@plt>:
    46e0:	add	ip, pc, #0, 12
    46e4:	add	ip, ip, #135168	; 0x21000
    46e8:	ldr	pc, [ip, #2472]!	; 0x9a8

000046ec <puts@plt>:
    46ec:	add	ip, pc, #0, 12
    46f0:	add	ip, ip, #135168	; 0x21000
    46f4:	ldr	pc, [ip, #2464]!	; 0x9a0

000046f8 <malloc@plt>:
    46f8:	add	ip, pc, #0, 12
    46fc:	add	ip, ip, #135168	; 0x21000
    4700:	ldr	pc, [ip, #2456]!	; 0x998

00004704 <try_hop@plt>:
    4704:	add	ip, pc, #0, 12
    4708:	add	ip, ip, #135168	; 0x21000
    470c:	ldr	pc, [ip, #2448]!	; 0x990

00004710 <btbb_packet_new@plt>:
    4710:	add	ip, pc, #0, 12
    4714:	add	ip, ip, #135168	; 0x21000
    4718:	ldr	pc, [ip, #2440]!	; 0x988

0000471c <btbb_pcap_dump@plt>:
    471c:	add	ip, pc, #0, 12
    4720:	add	ip, ip, #135168	; 0x21000
    4724:	ldr	pc, [ip, #2432]!	; 0x980

00004728 <__gmon_start__@plt>:
    4728:	add	ip, pc, #0, 12
    472c:	add	ip, ip, #135168	; 0x21000
    4730:	ldr	pc, [ip, #2424]!	; 0x978

00004734 <open@plt>:
    4734:	add	ip, pc, #0, 12
    4738:	add	ip, ip, #135168	; 0x21000
    473c:	ldr	pc, [ip, #2416]!	; 0x970

00004740 <__ctype_b_loc@plt>:
    4740:	add	ip, pc, #0, 12
    4744:	add	ip, ip, #135168	; 0x21000
    4748:	ldr	pc, [ip, #2408]!	; 0x968

0000474c <exit@plt>:
    474c:	add	ip, pc, #0, 12
    4750:	add	ip, ip, #135168	; 0x21000
    4754:	ldr	pc, [ip, #2400]!	; 0x960

00004758 <btbb_packet_get_payload_length@plt>:
    4758:	add	ip, pc, #0, 12
    475c:	add	ip, ip, #135168	; 0x21000
    4760:	ldr	pc, [ip, #2392]!	; 0x958

00004764 <strlen@plt>:
    4764:	add	ip, pc, #0, 12
    4768:	add	ip, ip, #135168	; 0x21000
    476c:	ldr	pc, [ip, #2384]!	; 0x950

00004770 <btbb_decode_header@plt>:
    4770:	add	ip, pc, #0, 12
    4774:	add	ip, ip, #135168	; 0x21000
    4778:	ldr	pc, [ip, #2376]!	; 0x948

0000477c <mmap@plt>:
    477c:	add	ip, pc, #0, 12
    4780:	add	ip, ip, #135168	; 0x21000
    4784:	ldr	pc, [ip, #2368]!	; 0x940

00004788 <btbb_packet_get_header_packed@plt>:
    4788:	add	ip, pc, #0, 12
    478c:	add	ip, ip, #135168	; 0x21000
    4790:	ldr	pc, [ip, #2360]!	; 0x938

00004794 <lell_get_channel_k@plt>:
    4794:	add	ip, pc, #0, 12
    4798:	add	ip, ip, #135168	; 0x21000
    479c:	ldr	pc, [ip, #2352]!	; 0x930

000047a0 <fprintf@plt>:
    47a0:	add	ip, pc, #0, 12
    47a4:	add	ip, ip, #135168	; 0x21000
    47a8:	ldr	pc, [ip, #2344]!	; 0x928

000047ac <getpagesize@plt>:
    47ac:	add	ip, pc, #0, 12
    47b0:	add	ip, ip, #135168	; 0x21000
    47b4:	ldr	pc, [ip, #2336]!	; 0x920

000047b8 <pcapng_append_packet@plt>:
    47b8:	add	ip, pc, #0, 12
    47bc:	add	ip, ip, #135168	; 0x21000
    47c0:	ldr	pc, [ip, #2328]!	; 0x918

000047c4 <btbb_packet_get_transport@plt>:
    47c4:	add	ip, pc, #0, 12
    47c8:	add	ip, ip, #135168	; 0x21000
    47cc:	ldr	pc, [ip, #2320]!	; 0x910

000047d0 <find_known_lap@plt>:
    47d0:	add	ip, pc, #0, 12
    47d4:	add	ip, ip, #135168	; 0x21000
    47d8:	ldr	pc, [ip, #2312]!	; 0x908

000047dc <address_precalc@plt>:
    47dc:	add	ip, pc, #0, 12
    47e0:	add	ip, ip, #135168	; 0x21000
    47e4:	ldr	pc, [ip, #2304]!	; 0x900

000047e8 <memset@plt>:
    47e8:	add	ip, pc, #0, 12
    47ec:	add	ip, ip, #135168	; 0x21000
    47f0:	ldr	pc, [ip, #2296]!	; 0x8f8

000047f4 <putchar@plt>:
    47f4:	add	ip, pc, #0, 12
    47f8:	add	ip, ip, #135168	; 0x21000
    47fc:	ldr	pc, [ip, #2288]!	; 0x8f0

00004800 <strncpy@plt>:
    4800:	add	ip, pc, #0, 12
    4804:	add	ip, ip, #135168	; 0x21000
    4808:	ldr	pc, [ip, #2280]!	; 0x8e8

0000480c <EV3@plt>:
    480c:	add	ip, pc, #0, 12
    4810:	add	ip, ip, #135168	; 0x21000
    4814:	ldr	pc, [ip, #2272]!	; 0x8e0

00004818 <btbb_packet_get_lap@plt>:
    4818:	add	ip, pc, #0, 12
    481c:	add	ip, ip, #135168	; 0x21000
    4820:	ldr	pc, [ip, #2264]!	; 0x8d8

00004824 <bt_compidtostr@plt>:
    4824:	add	ip, pc, #0, 12
    4828:	add	ip, ip, #135168	; 0x21000
    482c:	ldr	pc, [ip, #2256]!	; 0x8d0

00004830 <write@plt>:
    4830:	add	ip, pc, #0, 12
    4834:	add	ip, ip, #135168	; 0x21000
    4838:	ldr	pc, [ip, #2248]!	; 0x8c8

0000483c <get_piconet@plt>:
    483c:	add	ip, pc, #0, 12
    4840:	add	ip, ip, #135168	; 0x21000
    4844:	ldr	pc, [ip, #2240]!	; 0x8c0

00004848 <perm5@plt>:
    4848:	add	ip, pc, #0, 12
    484c:	add	ip, ip, #135168	; 0x21000
    4850:	ldr	pc, [ip, #2232]!	; 0x8b8

00004854 <fclose@plt>:
    4854:	add	ip, pc, #0, 12
    4858:	add	ip, ip, #135168	; 0x21000
    485c:	ldr	pc, [ip, #2224]!	; 0x8b0

00004860 <EV5@plt>:
    4860:	add	ip, pc, #0, 12
    4864:	add	ip, ip, #135168	; 0x21000
    4868:	ldr	pc, [ip, #2216]!	; 0x8a8

0000486c <munmap@plt>:
    486c:	add	ip, pc, #0, 12
    4870:	add	ip, ip, #135168	; 0x21000
    4874:	ldr	pc, [ip, #2208]!	; 0x8a0

00004878 <DH@plt>:
    4878:	add	ip, pc, #0, 12
    487c:	add	ip, ip, #135168	; 0x21000
    4880:	ldr	pc, [ip, #2200]!	; 0x898

00004884 <btbb_packet_get_channel@plt>:
    4884:	add	ip, pc, #0, 12
    4888:	add	ip, ip, #135168	; 0x21000
    488c:	ldr	pc, [ip, #2192]!	; 0x890

00004890 <precalc@plt>:
    4890:	add	ip, pc, #0, 12
    4894:	add	ip, ip, #135168	; 0x21000
    4898:	ldr	pc, [ip, #2184]!	; 0x888

0000489c <btbb_decode_payload@plt>:
    489c:	add	ip, pc, #0, 12
    48a0:	add	ip, ip, #135168	; 0x21000
    48a4:	ldr	pc, [ip, #2176]!	; 0x880

000048a8 <promiscuous_packet_search@plt>:
    48a8:	add	ip, pc, #0, 12
    48ac:	add	ip, ip, #135168	; 0x21000
    48b0:	ldr	pc, [ip, #2168]!	; 0x878

000048b4 <pcapng_close@plt>:
    48b4:	add	ip, pc, #0, 12
    48b8:	add	ip, ip, #135168	; 0x21000
    48bc:	ldr	pc, [ip, #2160]!	; 0x870

000048c0 <btbb_print_packet@plt>:
    48c0:	add	ip, pc, #0, 12
    48c4:	add	ip, ip, #135168	; 0x21000
    48c8:	ldr	pc, [ip, #2152]!	; 0x868

000048cc <try_clock@plt>:
    48cc:	add	ip, pc, #0, 12
    48d0:	add	ip, ip, #135168	; 0x21000
    48d4:	ldr	pc, [ip, #2144]!	; 0x860

000048d8 <btbb_init_hop_reversal@plt>:
    48d8:	add	ip, pc, #0, 12
    48dc:	add	ip, ip, #135168	; 0x21000
    48e0:	ldr	pc, [ip, #2136]!	; 0x858

000048e4 <close@plt>:
    48e4:	add	ip, pc, #0, 12
    48e8:	add	ip, ip, #135168	; 0x21000
    48ec:	ldr	pc, [ip, #2128]!	; 0x850

000048f0 <__assert_fail@plt>:
    48f0:	add	ip, pc, #0, 12
    48f4:	add	ip, ip, #135168	; 0x21000
    48f8:	ldr	pc, [ip, #2120]!	; 0x848

Disassembly of section .text:

00004900 <btbb_gen_syncword@@Base-0x128>:
    4900:	ldr	r3, [pc, #20]	; 491c <__assert_fail@plt+0x2c>
    4904:	ldr	r2, [pc, #20]	; 4920 <__assert_fail@plt+0x30>
    4908:	add	r3, pc, r3
    490c:	ldr	r2, [r3, r2]
    4910:	cmp	r2, #0
    4914:	bxeq	lr
    4918:	b	4728 <__gmon_start__@plt>
    491c:	strdeq	r1, [r2], -r0
    4920:	andeq	r0, r0, r8, asr r1
    4924:	ldr	r0, [pc, #44]	; 4958 <__assert_fail@plt+0x68>
    4928:	ldr	r3, [pc, #44]	; 495c <__assert_fail@plt+0x6c>
    492c:	add	r0, pc, r0
    4930:	add	r3, pc, r3
    4934:	cmp	r3, r0
    4938:	ldr	r3, [pc, #32]	; 4960 <__assert_fail@plt+0x70>
    493c:	add	r3, pc, r3
    4940:	bxeq	lr
    4944:	ldr	r2, [pc, #24]	; 4964 <__assert_fail@plt+0x74>
    4948:	ldr	r3, [r3, r2]
    494c:	cmp	r3, #0
    4950:	bxeq	lr
    4954:	bx	r3
    4958:	andeq	r1, r2, r8, lsr r8
    495c:	andeq	r1, r2, r4, lsr r8
    4960:			; <UNDEFINED> instruction: 0x000216bc
    4964:	andeq	r0, r0, r8, asr #2
    4968:	ldr	r0, [pc, #56]	; 49a8 <__assert_fail@plt+0xb8>
    496c:	ldr	r3, [pc, #56]	; 49ac <__assert_fail@plt+0xbc>
    4970:	add	r0, pc, r0
    4974:	add	r3, pc, r3
    4978:	sub	r1, r3, r0
    497c:	ldr	r3, [pc, #44]	; 49b0 <__assert_fail@plt+0xc0>
    4980:	asr	r1, r1, #2
    4984:	add	r3, pc, r3
    4988:	add	r1, r1, r1, lsr #31
    498c:	asrs	r1, r1, #1
    4990:	bxeq	lr
    4994:	ldr	r2, [pc, #24]	; 49b4 <__assert_fail@plt+0xc4>
    4998:	ldr	r3, [r3, r2]
    499c:	cmp	r3, #0
    49a0:	bxeq	lr
    49a4:	bx	r3
    49a8:	strdeq	r1, [r2], -r4
    49ac:	strdeq	r1, [r2], -r0
    49b0:	andeq	r1, r2, r4, ror r6
    49b4:	andeq	r0, r0, r0, ror #2
    49b8:	ldr	r3, [pc, #76]	; 4a0c <__assert_fail@plt+0x11c>
    49bc:	ldr	r2, [pc, #76]	; 4a10 <__assert_fail@plt+0x120>
    49c0:	add	r3, pc, r3
    49c4:	add	r2, pc, r2
    49c8:	ldrb	r3, [r3]
    49cc:	cmp	r3, #0
    49d0:	bxne	lr
    49d4:	ldr	r3, [pc, #56]	; 4a14 <__assert_fail@plt+0x124>
    49d8:	push	{r4, lr}
    49dc:	ldr	r3, [r2, r3]
    49e0:	cmp	r3, #0
    49e4:	beq	49f4 <__assert_fail@plt+0x104>
    49e8:	ldr	r3, [pc, #40]	; 4a18 <__assert_fail@plt+0x128>
    49ec:	ldr	r0, [pc, r3]
    49f0:	bl	4578 <__cxa_finalize@plt>
    49f4:	bl	4924 <__assert_fail@plt+0x34>
    49f8:	ldr	r3, [pc, #28]	; 4a1c <__assert_fail@plt+0x12c>
    49fc:	mov	r2, #1
    4a00:	add	r3, pc, r3
    4a04:	strb	r2, [r3]
    4a08:	pop	{r4, pc}
    4a0c:	andeq	r1, r2, r4, lsr #15
    4a10:	andeq	r1, r2, r4, lsr r6
    4a14:	andeq	r0, r0, r4, asr #2
    4a18:	andeq	r1, r2, r0, ror r7
    4a1c:	andeq	r1, r2, r4, ror #14
    4a20:	b	4968 <__assert_fail@plt+0x78>
    4a24:	andeq	r0, r0, r0

00004a28 <btbb_gen_syncword@@Base>:
    4a28:	push	{r4, r5, fp, lr}
    4a2c:	add	fp, sp, #8
    4a30:	ldr	r2, [pc, #60]	; 4a74 <btbb_gen_syncword@@Base+0x4c>
    4a34:	movw	ip, #3710	; 0xe7e
    4a38:	mov	r1, #-1342177278	; 0xb0000002
    4a3c:	mov	r3, #0
    4a40:	mov	lr, #8388608	; 0x800000
    4a44:	movt	ip, #51074	; 0xc782
    4a48:	add	r2, pc, r2
    4a4c:	tst	r0, lr, lsr r3
    4a50:	add	r3, r3, #1
    4a54:	ldrdne	r4, [r2]
    4a58:	add	r2, r2, #8
    4a5c:	eorne	r1, r5, r1
    4a60:	eorne	ip, r4, ip
    4a64:	cmp	r3, #24
    4a68:	moveq	r0, ip
    4a6c:	popeq	{r4, r5, fp, pc}
    4a70:	b	4a4c <btbb_gen_syncword@@Base+0x24>
    4a74:	andeq	r7, r0, r0, ror r2

00004a78 <btbb_get_release@@Base>:
    4a78:	ldr	r0, [pc, #4]	; 4a84 <btbb_get_release@@Base+0xc>
    4a7c:	add	r0, pc, r0
    4a80:	bx	lr
    4a84:	andeq	r9, r0, r0, asr r8

00004a88 <btbb_get_version@@Base>:
    4a88:	ldr	r0, [pc, #4]	; 4a94 <btbb_get_version@@Base+0xc>
    4a8c:	add	r0, pc, r0
    4a90:	bx	lr
    4a94:	andeq	r9, r0, fp, asr #16

00004a98 <btbb_init@@Base>:
    4a98:	push	{r4, r5, r6, sl, fp, lr}
    4a9c:	add	fp, sp, #16
    4aa0:	cmp	r0, #6
    4aa4:	bcs	4af8 <btbb_init@@Base+0x60>
    4aa8:	mov	r5, r0
    4aac:	mov	r4, #0
    4ab0:	cmp	r0, #0
    4ab4:	beq	4af0 <btbb_init@@Base+0x58>
    4ab8:	ldr	r0, [pc, #108]	; 4b2c <btbb_init@@Base+0x94>
    4abc:	ldr	r0, [pc, r0]
    4ac0:	cmp	r0, #0
    4ac4:	bne	4af0 <btbb_init@@Base+0x58>
    4ac8:	mov	r4, #0
    4acc:	mov	r6, #0
    4ad0:	add	r6, r6, #1
    4ad4:	mov	r0, #0
    4ad8:	mov	r1, #0
    4adc:	mov	r2, #0
    4ae0:	mov	r3, r6
    4ae4:	bl	73dc <clock_from_fhs@@Base+0x24>
    4ae8:	cmp	r5, r6
    4aec:	bne	4ad0 <btbb_init@@Base+0x38>
    4af0:	mov	r0, r4
    4af4:	pop	{r4, r5, r6, sl, fp, pc}
    4af8:	ldr	r0, [pc, #32]	; 4b20 <btbb_init@@Base+0x88>
    4afc:	ldr	r0, [pc, r0]
    4b00:	ldr	r0, [r0]
    4b04:	ldr	r1, [pc, #24]	; 4b24 <btbb_init@@Base+0x8c>
    4b08:	ldr	r2, [pc, #24]	; 4b28 <btbb_init@@Base+0x90>
    4b0c:	add	r1, pc, r1
    4b10:	add	r2, pc, r2
    4b14:	bl	47a0 <fprintf@plt>
    4b18:	mvn	r4, #0
    4b1c:	b	4af0 <btbb_init@@Base+0x58>
    4b20:	andeq	r1, r2, r8, asr #12
    4b24:	andeq	r9, r0, pc, asr #15
    4b28:	andeq	r9, r0, fp, ror #15
    4b2c:	andeq	r1, r2, ip, lsr #13

00004b30 <btbb_packet_new@@Base>:
    4b30:	push	{r4, r5, fp, lr}
    4b34:	add	fp, sp, #8
    4b38:	mov	r0, #1
    4b3c:	mov	r1, #5952	; 0x1740
    4b40:	mov	r5, #1
    4b44:	bl	4554 <calloc@plt>
    4b48:	mov	r4, r0
    4b4c:	cmp	r0, #0
    4b50:	beq	4b60 <btbb_packet_new@@Base+0x30>
    4b54:	str	r5, [r4]
    4b58:	mov	r0, r4
    4b5c:	pop	{r4, r5, fp, pc}
    4b60:	ldr	r0, [pc, #28]	; 4b84 <btbb_packet_new@@Base+0x54>
    4b64:	mov	r1, #25
    4b68:	mov	r2, #1
    4b6c:	ldr	r0, [pc, r0]
    4b70:	ldr	r3, [r0]
    4b74:	ldr	r0, [pc, #12]	; 4b88 <btbb_packet_new@@Base+0x58>
    4b78:	add	r0, pc, r0
    4b7c:	bl	46a4 <fwrite@plt>
    4b80:	b	4b58 <btbb_packet_new@@Base+0x28>
    4b84:	ldrdeq	r1, [r2], -r8
    4b88:	andeq	r9, r0, sp, lsl #15

00004b8c <btbb_packet_ref@@Base>:
    4b8c:	ldr	r1, [r0]
    4b90:	add	r1, r1, #1
    4b94:	str	r1, [r0]
    4b98:	bx	lr

00004b9c <btbb_packet_unref@@Base>:
    4b9c:	ldr	r1, [r0]
    4ba0:	subs	r1, r1, #1
    4ba4:	str	r1, [r0]
    4ba8:	bxne	lr
    4bac:	b	45d8 <free@plt>

00004bb0 <btbb_packet_get_lap@@Base>:
    4bb0:	ldr	r0, [r0, #12]
    4bb4:	bx	lr

00004bb8 <btbb_packet_set_uap@@Base>:
    4bb8:	strb	r1, [r0, #9]
    4bbc:	ldr	r1, [r0, #4]
    4bc0:	orr	r1, r1, #4
    4bc4:	str	r1, [r0, #4]
    4bc8:	bx	lr

00004bcc <btbb_packet_set_flag@@Base>:
    4bcc:	push	{fp, lr}
    4bd0:	mov	fp, sp
    4bd4:	ldr	lr, [r0, #4]
    4bd8:	mov	ip, #1
    4bdc:	cmp	r2, #0
    4be0:	orr	r3, lr, ip, lsl r1
    4be4:	biceq	r3, lr, ip, lsl r1
    4be8:	str	r3, [r0, #4]
    4bec:	pop	{fp, pc}

00004bf0 <btbb_packet_get_uap@@Base>:
    4bf0:	ldrb	r0, [r0, #9]
    4bf4:	bx	lr

00004bf8 <btbb_packet_get_nap@@Base>:
    4bf8:	ldrh	r0, [r0, #10]
    4bfc:	bx	lr

00004c00 <btbb_packet_get_clkn@@Base>:
    4c00:	ldr	r0, [r0, #2816]	; 0xb00
    4c04:	bx	lr

00004c08 <btbb_packet_get_channel@@Base>:
    4c08:	ldrb	r0, [r0, #8]
    4c0c:	bx	lr

00004c10 <btbb_packet_set_modulation@@Base>:
    4c10:	strb	r1, [r0, #16]
    4c14:	bx	lr

00004c18 <btbb_packet_get_modulation@@Base>:
    4c18:	ldrb	r0, [r0, #16]
    4c1c:	bx	lr

00004c20 <btbb_packet_set_transport@@Base>:
    4c20:	strb	r1, [r0, #17]
    4c24:	bx	lr

00004c28 <btbb_packet_get_transport@@Base>:
    4c28:	ldrb	r0, [r0, #17]
    4c2c:	bx	lr

00004c30 <btbb_packet_get_ac_errors@@Base>:
    4c30:	ldrb	r0, [r0, #2820]	; 0xb04
    4c34:	bx	lr

00004c38 <promiscuous_packet_search@@Base>:
    4c38:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
    4c3c:	add	fp, sp, #28
    4c40:	sub	sp, sp, #4
    4c44:	vpush	{d8-d9}
    4c48:	sub	sp, sp, #32
    4c4c:	mov	r6, r1
    4c50:	add	r1, r0, #57	; 0x39
    4c54:	mov	r5, #0
    4c58:	mov	r7, #0
    4c5c:	str	r3, [sp, #16]
    4c60:	ldrb	r3, [r1, r7]
    4c64:	orr	r5, r5, r3, lsl r7
    4c68:	add	r7, r7, #1
    4c6c:	cmp	r7, #6
    4c70:	bne	4c60 <promiscuous_packet_search@@Base+0x28>
    4c74:	cmp	r6, #1
    4c78:	blt	4fcc <promiscuous_packet_search@@Base+0x394>
    4c7c:	str	r2, [sp]
    4c80:	vldr	d8, [pc, #880]	; 4ff8 <promiscuous_packet_search@@Base+0x3c0>
    4c84:	lsl	r8, r5, #1
    4c88:	mov	r4, #0
    4c8c:	add	sl, sp, #20
    4c90:	vmov.i32	d9, #2	; 0x00000002
    4c94:	mov	r7, r0
    4c98:	ldr	r3, [pc, #864]	; 5000 <promiscuous_packet_search@@Base+0x3c8>
    4c9c:	str	r6, [sp, #12]
    4ca0:	str	r0, [sp, #8]
    4ca4:	add	r3, pc, r3
    4ca8:	b	4d7c <promiscuous_packet_search@@Base+0x144>
    4cac:	rsb	r6, r0, #0
    4cb0:	ldr	r0, [r5, #40]	; 0x28
    4cb4:	cmp	r0, #8
    4cb8:	bne	4cd4 <promiscuous_packet_search@@Base+0x9c>
    4cbc:	ldr	r0, [r5, #36]	; 0x24
    4cc0:	add	r1, sp, #24
    4cc4:	mov	r2, #8
    4cc8:	bl	462c <memcmp@plt>
    4ccc:	cmp	r0, #0
    4cd0:	beq	4ce8 <promiscuous_packet_search@@Base+0xb0>
    4cd4:	ldr	r0, [r5, #32]
    4cd8:	cmp	r0, #0
    4cdc:	addsne	r5, r0, r6
    4ce0:	bne	4cb0 <promiscuous_packet_search@@Base+0x78>
    4ce4:	b	4f90 <promiscuous_packet_search@@Base+0x358>
    4ce8:	ldrd	r0, [r5, #8]
    4cec:	movw	r2, #21845	; 0x5555
    4cf0:	movw	r3, #13107	; 0x3333
    4cf4:	movt	r2, #21845	; 0x5555
    4cf8:	movt	r3, #13107	; 0x3333
    4cfc:	mov	r6, r2
    4d00:	mov	r5, r3
    4d04:	and	r2, r2, r1, lsr #1
    4d08:	sub	r2, r1, r2
    4d0c:	and	r3, r3, r2, lsr #2
    4d10:	and	r2, r2, r5
    4d14:	add	r2, r2, r3
    4d18:	movw	r3, #3855	; 0xf0f
    4d1c:	movt	r3, #3855	; 0xf0f
    4d20:	add	r2, r2, r2, lsr #4
    4d24:	mov	ip, r3
    4d28:	and	r2, r2, r3
    4d2c:	movw	r3, #257	; 0x101
    4d30:	movt	r3, #257	; 0x101
    4d34:	mov	lr, r3
    4d38:	mul	r2, r2, r3
    4d3c:	and	r3, r6, r0, lsr #1
    4d40:	sub	r0, r0, r3
    4d44:	and	r3, r5, r0, lsr #2
    4d48:	and	r0, r0, r5
    4d4c:	add	r0, r0, r3
    4d50:	add	r0, r0, r0, lsr #4
    4d54:	and	r0, r0, ip
    4d58:	mul	r0, r0, lr
    4d5c:	lsr	r0, r0, #24
    4d60:	add	ip, r0, r2, lsr #24
    4d64:	ldr	r0, [fp, #8]
    4d68:	strb	ip, [r0]
    4d6c:	eor	r0, r1, r9
    4d70:	lsr	r0, r0, #2
    4d74:	str	r0, [sp, #4]
    4d78:	b	4f9c <promiscuous_packet_search@@Base+0x364>
    4d7c:	add	r1, r0, r4
    4d80:	ldrb	r1, [r1, #63]	; 0x3f
    4d84:	lsl	r2, r1, #6
    4d88:	and	r1, r8, #254	; 0xfe
    4d8c:	orr	r8, r2, r1, lsr #1
    4d90:	uxtb	r1, r8
    4d94:	ldrb	r1, [r3, r1]
    4d98:	cmp	r1, #1
    4d9c:	bhi	4fbc <promiscuous_packet_search@@Base+0x384>
    4da0:	vmov.i32	q8, #0	; 0x00000000
    4da4:	mov	r0, #0
    4da8:	vorr	d18, d8, d8
    4dac:	add	r1, r7, r0
    4db0:	vmovl.u32	q11, d18
    4db4:	add	r0, r0, #2
    4db8:	vadd.i32	d18, d18, d9
    4dbc:	ldrh	r1, [r1]
    4dc0:	cmp	r0, #64	; 0x40
    4dc4:	strh	r1, [sp, #20]
    4dc8:	vld1.16	{d19[0]}, [sl :16]
    4dcc:	vmovl.u8	q10, d19
    4dd0:	vmovl.u16	q10, d20
    4dd4:	vmovl.u32	q10, d20
    4dd8:	vshl.u64	q10, q10, q11
    4ddc:	vorr	q8, q10, q8
    4de0:	bne	4dac <promiscuous_packet_search@@Base+0x174>
    4de4:	ldr	r0, [fp, #8]
    4de8:	mov	ip, #0
    4dec:	vorr	d18, d17, d17
    4df0:	movw	lr, #2040	; 0x7f8
    4df4:	vorr	q8, q8, q9
    4df8:	vmov.32	r1, d16[1]
    4dfc:	strb	ip, [r0]
    4e00:	mov	r0, #1016	; 0x3f8
    4e04:	ldr	r3, [pc, #504]	; 5004 <promiscuous_packet_search@@Base+0x3cc>
    4e08:	and	r2, r0, r1, lsr #22
    4e0c:	movw	r0, #36246	; 0x8d96
    4e10:	bic	r1, r1, #-33554432	; 0xfe000000
    4e14:	ldr	r6, [pc, #492]	; 5008 <promiscuous_packet_search@@Base+0x3d0>
    4e18:	movt	r0, #33668	; 0x8384
    4e1c:	add	r3, pc, r3
    4e20:	add	r6, pc, r6
    4e24:	ldr	r2, [r3, r2]!
    4e28:	ldr	r3, [r3, #4]
    4e2c:	orr	r9, r3, r1
    4e30:	eor	r1, r9, r0
    4e34:	ldr	r0, [pc, #464]	; 500c <promiscuous_packet_search@@Base+0x3d4>
    4e38:	uxtb	r3, r1
    4e3c:	and	r5, lr, r1, lsr #5
    4e40:	ldr	r3, [r6, r3, lsl #3]!
    4e44:	add	r0, pc, r0
    4e48:	ldr	r5, [r0, r5]!
    4e4c:	eor	r3, r5, r3
    4e50:	vmov.32	r5, d16[0]
    4e54:	ldr	r0, [r0, #4]
    4e58:	orr	r2, r2, r5
    4e5c:	ldr	r5, [pc, #428]	; 5010 <promiscuous_packet_search@@Base+0x3d8>
    4e60:	eor	r2, r3, r2
    4e64:	and	r3, lr, r1, lsr #13
    4e68:	and	r1, lr, r1, lsr #21
    4e6c:	add	r5, pc, r5
    4e70:	ldr	r3, [r5, r3]!
    4e74:	eor	r2, r2, r3
    4e78:	ldr	r3, [pc, #404]	; 5014 <promiscuous_packet_search@@Base+0x3dc>
    4e7c:	add	r3, pc, r3
    4e80:	ldr	r1, [r3, r1]!
    4e84:	eor	r1, r2, r1
    4e88:	movw	r2, #21756	; 0x54fc
    4e8c:	movt	r2, #48076	; 0xbbcc
    4e90:	eor	r1, r1, r2
    4e94:	ldr	r2, [r6, #4]
    4e98:	eor	r0, r0, r2
    4e9c:	ldr	r2, [r5, #4]
    4ea0:	eor	r0, r0, r2
    4ea4:	ldr	r2, [r3, #4]
    4ea8:	eor	r2, r0, r2
    4eac:	orrs	r0, r1, r2
    4eb0:	lsr	r0, r9, #2
    4eb4:	str	r0, [sp, #4]
    4eb8:	beq	4f9c <promiscuous_packet_search@@Base+0x364>
    4ebc:	str	r1, [sp, #24]
    4ec0:	str	r2, [sp, #28]
    4ec4:	ldr	r0, [pc, #332]	; 5018 <promiscuous_packet_search@@Base+0x3e0>
    4ec8:	ldr	r0, [pc, r0]
    4ecc:	cmp	r0, #0
    4ed0:	beq	4f90 <promiscuous_packet_search@@Base+0x358>
    4ed4:	movw	r3, #47810	; 0xbac2
    4ed8:	ldr	r0, [r0, #16]
    4edc:	movt	r3, #40777	; 0x9f49
    4ee0:	mov	r6, r3
    4ee4:	add	r1, r1, r3
    4ee8:	movw	r3, #31161	; 0x79b9
    4eec:	movt	r3, #40503	; 0x9e37
    4ef0:	add	r3, r2, r3
    4ef4:	add	r2, r2, r6
    4ef8:	sub	r1, r1, r3
    4efc:	movw	r3, #63341	; 0xf76d
    4f00:	movt	r3, #7
    4f04:	eor	r1, r1, r3
    4f08:	movw	r3, #48887	; 0xbef7
    4f0c:	sub	r2, r2, r1
    4f10:	movt	r3, #65261	; 0xfeed
    4f14:	eor	r2, r2, r1, lsl #8
    4f18:	sub	r3, r3, r1
    4f1c:	sub	r3, r3, r2
    4f20:	sub	r1, r1, r2
    4f24:	eor	r3, r3, r2, lsr #13
    4f28:	sub	r1, r1, r3
    4f2c:	sub	r2, r2, r3
    4f30:	eor	r1, r1, r3, lsr #12
    4f34:	sub	r2, r2, r1
    4f38:	sub	r3, r3, r1
    4f3c:	eor	r2, r2, r1, lsl #16
    4f40:	sub	r3, r3, r2
    4f44:	sub	r1, r1, r2
    4f48:	eor	r3, r3, r2, lsr #5
    4f4c:	sub	r1, r1, r3
    4f50:	sub	r2, r2, r3
    4f54:	eor	r1, r1, r3, lsr #3
    4f58:	sub	r2, r2, r1
    4f5c:	eor	r2, r2, r1, lsl #10
    4f60:	sub	r1, r3, r1
    4f64:	sub	r1, r1, r2
    4f68:	eor	r1, r1, r2, lsr #15
    4f6c:	ldm	r0, {r2, r3}
    4f70:	sub	r3, r3, #1
    4f74:	and	r1, r3, r1
    4f78:	add	r1, r1, r1, lsl #1
    4f7c:	ldr	r1, [r2, r1, lsl #2]
    4f80:	cmp	r1, #0
    4f84:	ldrne	r0, [r0, #20]
    4f88:	subsne	r5, r1, r0
    4f8c:	bne	4cac <promiscuous_packet_search@@Base+0x74>
    4f90:	ldr	r0, [fp, #8]
    4f94:	mov	ip, #255	; 0xff
    4f98:	strb	ip, [r0]
    4f9c:	ldr	r6, [sp, #12]
    4fa0:	ldr	r0, [sp, #8]
    4fa4:	ldr	r3, [pc, #112]	; 501c <promiscuous_packet_search@@Base+0x3e4>
    4fa8:	ldr	r1, [sp, #16]
    4fac:	uxtb	r2, ip
    4fb0:	add	r3, pc, r3
    4fb4:	cmp	r2, r1
    4fb8:	ble	4fd4 <promiscuous_packet_search@@Base+0x39c>
    4fbc:	add	r4, r4, #1
    4fc0:	add	r7, r7, #1
    4fc4:	cmp	r4, r6
    4fc8:	blt	4d7c <promiscuous_packet_search@@Base+0x144>
    4fcc:	mvn	r4, #0
    4fd0:	b	4fe4 <promiscuous_packet_search@@Base+0x3ac>
    4fd4:	ldr	r0, [sp, #4]
    4fd8:	ldr	r1, [sp]
    4fdc:	bic	r0, r0, #-16777216	; 0xff000000
    4fe0:	str	r0, [r1]
    4fe4:	mov	r0, r4
    4fe8:	sub	sp, fp, #48	; 0x30
    4fec:	vpop	{d8-d9}
    4ff0:	add	sp, sp, #4
    4ff4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
    4ff8:	andeq	r0, r0, r0
    4ffc:	andeq	r0, r0, r1
    5000:	ldrdeq	r7, [r0], -r4
    5004:	ldrdeq	r6, [r0], -ip
    5008:	ldrdeq	r7, [r0], -r8
    500c:			; <UNDEFINED> instruction: 0x00007bb4
    5010:	andeq	r8, r0, ip, lsl #7
    5014:	andeq	r8, r0, ip, ror fp
    5018:	andeq	r1, r2, r0, lsr #5
    501c:	andeq	r6, r0, r8, asr #27

00005020 <find_known_lap@@Base>:
    5020:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
    5024:	add	fp, sp, #28
    5028:	sub	sp, sp, #12
    502c:	str	r3, [sp]
    5030:	str	r1, [sp, #4]
    5034:	movw	lr, #3710	; 0xe7e
    5038:	mov	ip, #-1342177278	; 0xb0000002
    503c:	mov	r4, #0
    5040:	mov	r6, #8388608	; 0x800000
    5044:	ldr	r5, [pc, #332]	; 5198 <find_known_lap@@Base+0x178>
    5048:	movt	lr, #51074	; 0xc782
    504c:	add	r5, pc, r5
    5050:	tst	r2, r6, lsr r4
    5054:	add	r4, r4, #1
    5058:	ldrne	r8, [r5]
    505c:	ldrne	r7, [r5, #4]
    5060:	add	r5, r5, #8
    5064:	eorne	ip, r7, ip
    5068:	eorne	lr, r8, lr
    506c:	cmp	r4, #24
    5070:	bne	5050 <find_known_lap@@Base+0x30>
    5074:	ldr	r1, [sp, #4]
    5078:	mvn	r5, #0
    507c:	cmp	r1, #1
    5080:	blt	5184 <find_known_lap@@Base+0x164>
    5084:	vldr	d16, [pc, #260]	; 5190 <find_known_lap@@Base+0x170>
    5088:	movw	r2, #13107	; 0x3333
    508c:	movw	sl, #3855	; 0xf0f
    5090:	movw	r7, #257	; 0x101
    5094:	mov	r5, #0
    5098:	add	r6, sp, #8
    509c:	vmov.i32	d17, #2	; 0x00000002
    50a0:	movt	r2, #13107	; 0x3333
    50a4:	movt	sl, #3855	; 0xf0f
    50a8:	movt	r7, #257	; 0x101
    50ac:	vmov.i32	q9, #0	; 0x00000000
    50b0:	mov	r8, #0
    50b4:	vorr	d20, d16, d16
    50b8:	add	r9, r0, r8
    50bc:	vmovl.u32	q12, d20
    50c0:	add	r8, r8, #2
    50c4:	vadd.i32	d20, d20, d17
    50c8:	ldrh	r4, [r9]
    50cc:	cmp	r8, #64	; 0x40
    50d0:	strh	r4, [sp, #8]
    50d4:	vld1.16	{d21[0]}, [r6 :16]
    50d8:	vmovl.u8	q11, d21
    50dc:	vmovl.u16	q11, d22
    50e0:	vmovl.u32	q11, d22
    50e4:	vshl.u64	q11, q11, q12
    50e8:	vorr	q9, q11, q9
    50ec:	bne	50b8 <find_known_lap@@Base+0x98>
    50f0:	vorr	d20, d19, d19
    50f4:	movw	r1, #21845	; 0x5555
    50f8:	vorr	q9, q9, q10
    50fc:	movt	r1, #21845	; 0x5555
    5100:	vmov.32	r4, d18[1]
    5104:	eor	r4, r4, ip
    5108:	and	r3, r1, r4, lsr #1
    510c:	sub	r3, r4, r3
    5110:	and	r4, r2, r3, lsr #2
    5114:	and	r3, r3, r2
    5118:	add	r3, r3, r4
    511c:	vmov.32	r4, d18[0]
    5120:	eor	r4, r4, lr
    5124:	add	r3, r3, r3, lsr #4
    5128:	and	r1, r1, r4, lsr #1
    512c:	and	r3, r3, sl
    5130:	sub	r1, r4, r1
    5134:	mul	r3, r3, r7
    5138:	and	r4, r2, r1, lsr #2
    513c:	and	r1, r1, r2
    5140:	add	r1, r1, r4
    5144:	add	r1, r1, r1, lsr #4
    5148:	and	r1, r1, sl
    514c:	mul	r1, r1, r7
    5150:	lsr	r1, r1, #24
    5154:	add	r1, r1, r3, lsr #24
    5158:	ldr	r3, [fp, #8]
    515c:	strb	r1, [r3]
    5160:	ldr	r3, [sp]
    5164:	cmp	r1, r3
    5168:	ble	5184 <find_known_lap@@Base+0x164>
    516c:	ldr	r1, [sp, #4]
    5170:	add	r5, r5, #1
    5174:	add	r0, r0, #1
    5178:	cmp	r5, r1
    517c:	blt	50ac <find_known_lap@@Base+0x8c>
    5180:	mvn	r5, #0
    5184:	mov	r0, r5
    5188:	sub	sp, fp, #28
    518c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
    5190:	andeq	r0, r0, r0
    5194:	andeq	r0, r0, r1
    5198:	andeq	r6, r0, ip, ror #24

0000519c <btbb_find_ac@@Base>:
    519c:	push	{r4, r5, fp, lr}
    51a0:	add	fp, sp, #8
    51a4:	sub	sp, sp, #16
    51a8:	cmn	r2, #1
    51ac:	str	r2, [sp, #12]
    51b0:	beq	51c4 <btbb_find_ac@@Base+0x28>
    51b4:	add	r5, sp, #11
    51b8:	str	r5, [sp]
    51bc:	bl	47d0 <find_known_lap@plt>
    51c0:	b	51d4 <btbb_find_ac@@Base+0x38>
    51c4:	add	r2, sp, #11
    51c8:	str	r2, [sp]
    51cc:	add	r2, sp, #12
    51d0:	bl	48a8 <promiscuous_packet_search@plt>
    51d4:	mov	r4, r0
    51d8:	cmp	r0, #0
    51dc:	blt	5210 <btbb_find_ac@@Base+0x74>
    51e0:	ldr	r5, [fp, #8]
    51e4:	ldr	r0, [r5]
    51e8:	cmp	r0, #0
    51ec:	bne	51f8 <btbb_find_ac@@Base+0x5c>
    51f0:	bl	4710 <btbb_packet_new@plt>
    51f4:	str	r0, [r5]
    51f8:	ldr	r1, [sp, #12]
    51fc:	ldrb	r2, [sp, #11]
    5200:	mov	r3, #1
    5204:	str	r3, [r0, #4]
    5208:	strb	r2, [r0, #2820]	; 0xb04
    520c:	str	r1, [r0, #12]
    5210:	mov	r0, r4
    5214:	sub	sp, fp, #8
    5218:	pop	{r4, r5, fp, pc}

0000521c <btbb_packet_set_data@@Base>:
    521c:	push	{r4, r5, fp, lr}
    5220:	add	fp, sp, #8
    5224:	ldr	lr, [fp, #8]
    5228:	movw	ip, #3125	; 0xc35
    522c:	cmp	r2, ip
    5230:	movlt	ip, r2
    5234:	cmp	r2, #1
    5238:	blt	525c <btbb_packet_set_data@@Base+0x40>
    523c:	movw	r2, #2824	; 0xb08
    5240:	mov	r4, #0
    5244:	add	r2, r0, r2
    5248:	ldrb	r5, [r1, r4]
    524c:	strb	r5, [r2, r4]
    5250:	add	r4, r4, #1
    5254:	cmp	r4, ip
    5258:	blt	5248 <btbb_packet_set_data@@Base+0x2c>
    525c:	movw	r1, #2822	; 0xb06
    5260:	strh	ip, [r0, r1]
    5264:	lsr	r1, lr, #1
    5268:	strb	r3, [r0, #8]
    526c:	str	r1, [r0, #2816]	; 0xb00
    5270:	pop	{r4, r5, fp, pc}

00005274 <btbb_packet_get_flag@@Base>:
    5274:	ldr	r0, [r0, #4]
    5278:	mov	r2, #1
    527c:	and	r0, r0, r2, lsl r1
    5280:	cmp	r0, #0
    5284:	movwne	r0, #1
    5288:	bx	lr

0000528c <btbb_get_symbols@@Base>:
    528c:	movw	r1, #2824	; 0xb08
    5290:	add	r0, r0, r1
    5294:	bx	lr

00005298 <btbb_packet_get_payload_length@@Base>:
    5298:	ldr	r0, [r0, #64]	; 0x40
    529c:	bx	lr

000052a0 <btbb_get_payload@@Base>:
    52a0:	add	r0, r0, #68	; 0x44
    52a4:	bx	lr

000052a8 <btbb_get_payload_packed@@Base>:
    52a8:	push	{r4, r5, r6, sl, fp, lr}
    52ac:	add	fp, sp, #16
    52b0:	sub	sp, sp, #8
    52b4:	ldr	lr, [r0, #64]	; 0x40
    52b8:	cmp	lr, #1
    52bc:	blt	536c <btbb_get_payload_packed@@Base+0xc4>
    52c0:	add	r5, r0, #68	; 0x44
    52c4:	mov	ip, #0
    52c8:	mov	r6, sp
    52cc:	vmov.i32	q8, #8	; 0x00000008
    52d0:	add	lr, pc, #160	; 0xa0
    52d4:	add	r2, pc, #172	; 0xac
    52d8:	vmov.i32	d18, #0	; 0x00000000
    52dc:	vld1.64	{d20-d21}, [r2]
    52e0:	vld1.64	{d22-d23}, [lr]
    52e4:	mov	r2, #0
    52e8:	mov	r3, r5
    52ec:	ldr	r4, [r3, r2]!
    52f0:	add	r2, r2, #8
    52f4:	cmp	r2, #8
    52f8:	str	r4, [sp]
    52fc:	ldr	r3, [r3, #4]
    5300:	str	r3, [sp, #4]
    5304:	vld1.8	{d19}, [r6 :64]
    5308:	vmovl.u8	q12, d19
    530c:	vmovl.u16	q13, d25
    5310:	vmovl.u16	q12, d24
    5314:	vshl.u32	q13, q13, q10
    5318:	vshl.u32	q12, q12, q11
    531c:	vadd.i32	q11, q11, q8
    5320:	vadd.i32	q10, q10, q8
    5324:	vmovn.i32	d27, q13
    5328:	vmovn.i32	d26, q12
    532c:	vmovn.i16	d19, q13
    5330:	vorr	d18, d18, d19
    5334:	bne	52e8 <btbb_get_payload_packed@@Base+0x40>
    5338:	vext.8	d19, d18, d16, #4
    533c:	add	r2, r1, ip
    5340:	add	ip, ip, #1
    5344:	add	r5, r5, #8
    5348:	vorr	d18, d18, d19
    534c:	vext.8	d19, d18, d16, #2
    5350:	vorr	d18, d18, d19
    5354:	vdup.8	d19, d18[1]
    5358:	vorr	d18, d18, d19
    535c:	vst1.8	{d18[0]}, [r2]
    5360:	ldr	lr, [r0, #64]	; 0x40
    5364:	cmp	ip, lr
    5368:	blt	52d0 <btbb_get_payload_packed@@Base+0x28>
    536c:	mov	r0, lr
    5370:	sub	sp, fp, #16
    5374:	pop	{r4, r5, r6, sl, fp, pc}
    5378:	andeq	r0, r0, r0
    537c:	andeq	r0, r0, r1
    5380:	andeq	r0, r0, r2
    5384:	andeq	r0, r0, r3
    5388:	andeq	r0, r0, r4
    538c:	andeq	r0, r0, r5
    5390:	andeq	r0, r0, r6
    5394:	andeq	r0, r0, r7

00005398 <btbb_packet_get_type@@Base>:
    5398:	ldrb	r0, [r0, #18]
    539c:	bx	lr

000053a0 <btbb_packet_get_lt_addr@@Base>:
    53a0:	ldrb	r0, [r0, #19]
    53a4:	bx	lr

000053a8 <btbb_packet_get_header_flags@@Base>:
    53a8:	ldrb	r0, [r0, #20]
    53ac:	bx	lr

000053b0 <btbb_packet_get_hec@@Base>:
    53b0:	ldrb	r0, [r0, #21]
    53b4:	bx	lr

000053b8 <btbb_packet_get_header_packed@@Base>:
    53b8:	add	r1, r0, #22
    53bc:	mov	r0, #0
    53c0:	mov	r2, #0
    53c4:	ldrb	r3, [r1, r2]
    53c8:	orr	r0, r0, r3, lsl r2
    53cc:	add	r2, r2, #1
    53d0:	cmp	r2, #18
    53d4:	bne	53c4 <btbb_packet_get_header_packed@@Base+0xc>
    53d8:	bx	lr

000053dc <crc_check@@Base>:
    53dc:	push	{r4, sl, fp, lr}
    53e0:	add	fp, sp, #8
    53e4:	mov	r4, r1
    53e8:	mov	r1, r0
    53ec:	ldrb	r0, [r4, #18]
    53f0:	sub	r2, r0, #2
    53f4:	mov	r0, #1
    53f8:	cmp	r2, #13
    53fc:	bhi	54d4 <crc_check@@Base+0xf8>
    5400:	add	r3, pc, #4
    5404:	ldr	r2, [r3, r2, lsl #2]
    5408:	add	pc, r3, r2
    540c:	andeq	r0, r0, r8, asr r0
    5410:	andeq	r0, r0, r8, lsr r0
    5414:	andeq	r0, r0, r8, asr #32
    5418:	andeq	r0, r0, r8, rrx
    541c:	andeq	r0, r0, r8, asr #1
    5420:	andeq	r0, r0, r8, ror r0
    5424:	andeq	r0, r0, r8, lsr r0
    5428:	andeq	r0, r0, r8, asr #1
    542c:	andeq	r0, r0, r8, lsr r0
    5430:	andeq	r0, r0, r8, asr #32
    5434:	andeq	r0, r0, r8, lsl #1
    5438:	muleq	r0, r8, r0
    543c:	andeq	r0, r0, r8, lsr r0
    5440:	andeq	r0, r0, r8, asr #32
    5444:	mov	r0, r1
    5448:	mov	r1, r4
    544c:	bl	4668 <DM@plt>
    5450:	b	54b0 <crc_check@@Base+0xd4>
    5454:	mov	r0, r1
    5458:	mov	r1, r4
    545c:	bl	4878 <DH@plt>
    5460:	b	54b0 <crc_check@@Base+0xd4>
    5464:	mov	r0, r1
    5468:	mov	r1, r4
    546c:	bl	4614 <fhs@plt>
    5470:	b	54b0 <crc_check@@Base+0xd4>
    5474:	mov	r0, r1
    5478:	mov	r1, r4
    547c:	bl	4674 <HV@plt>
    5480:	b	54b0 <crc_check@@Base+0xd4>
    5484:	mov	r0, r1
    5488:	mov	r1, r4
    548c:	bl	480c <EV3@plt>
    5490:	b	54b0 <crc_check@@Base+0xd4>
    5494:	mov	r0, r1
    5498:	mov	r1, r4
    549c:	bl	4620 <EV4@plt>
    54a0:	b	54b0 <crc_check@@Base+0xd4>
    54a4:	mov	r0, r1
    54a8:	mov	r1, r4
    54ac:	bl	4860 <EV5@plt>
    54b0:	cmp	r0, #0
    54b4:	beq	54dc <crc_check@@Base+0x100>
    54b8:	cmp	r0, #2
    54bc:	blt	54d4 <crc_check@@Base+0xf8>
    54c0:	ldrb	r2, [r4, #18]
    54c4:	mov	r1, #1
    54c8:	cmp	r2, #7
    54cc:	cmpne	r2, #13
    54d0:	beq	5500 <crc_check@@Base+0x124>
    54d4:	mov	r1, r0
    54d8:	b	5500 <crc_check@@Base+0x124>
    54dc:	ldrb	r2, [r4, #18]
    54e0:	mov	r1, #1
    54e4:	cmp	r2, #5
    54e8:	bhi	5500 <crc_check@@Base+0x124>
    54ec:	mov	r3, #1
    54f0:	mov	r4, #44	; 0x2c
    54f4:	mov	r0, #0
    54f8:	tst	r4, r3, lsl r2
    54fc:	movne	r1, r0
    5500:	mov	r0, r1
    5504:	pop	{r4, sl, fp, pc}

00005508 <fhs@@Base>:
    5508:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
    550c:	add	fp, sp, #28
    5510:	sub	sp, sp, #20
    5514:	mov	r7, r0
    5518:	mov	r0, #20
    551c:	mov	r8, r1
    5520:	str	r0, [r1, #64]	; 0x40
    5524:	movw	r0, #2822	; 0xb06
    5528:	ldrh	r0, [r1, r0]
    552c:	lsr	r1, r0, #1
    5530:	mov	r0, #1
    5534:	cmp	r1, #181	; 0xb5
    5538:	bcc	56bc <fhs@@Base+0x1b4>
    553c:	movw	r0, #2946	; 0xb82
    5540:	mov	r1, #160	; 0xa0
    5544:	add	r0, r8, r0
    5548:	bl	5f88 <HV@@Base+0x238>
    554c:	mov	r1, r0
    5550:	mov	r0, #0
    5554:	cmp	r1, #0
    5558:	str	r1, [sp, #12]
    555c:	beq	56bc <fhs@@Base+0x1b4>
    5560:	ldr	r0, [r8, #64]	; 0x40
    5564:	cmp	r0, #1
    5568:	str	r0, [sp, #16]
    556c:	blt	55e4 <fhs@@Base+0xdc>
    5570:	ldr	r1, [pc, #332]	; 56c4 <fhs@@Base+0x1bc>
    5574:	and	r0, r7, #63	; 0x3f
    5578:	ldr	r2, [r8, #4]
    557c:	movw	r3, #1033	; 0x409
    5580:	movt	r3, #33026	; 0x8102
    5584:	add	r1, pc, r1
    5588:	and	r2, r2, #1
    558c:	ldrb	r0, [r1, r0]
    5590:	add	r1, r8, #68	; 0x44
    5594:	add	r5, r0, #18
    5598:	ldr	r0, [sp, #16]
    559c:	ldr	ip, [pc, #292]	; 56c8 <fhs@@Base+0x1c0>
    55a0:	ldr	r6, [sp, #12]
    55a4:	lsl	r0, r0, #3
    55a8:	add	ip, pc, ip
    55ac:	smmla	r7, r5, r3, r5
    55b0:	cmp	r2, #0
    55b4:	asr	r4, r7, #6
    55b8:	add	r7, r4, r7, lsr #31
    55bc:	rsb	r7, r7, r7, lsl #7
    55c0:	sub	r5, r5, r7
    55c4:	ldrb	r7, [r6]
    55c8:	add	r6, r6, #1
    55cc:	ldrbne	r4, [ip, r5]
    55d0:	add	r5, r5, #1
    55d4:	eorne	r7, r4, r7
    55d8:	subs	r0, r0, #1
    55dc:	strb	r7, [r1], #1
    55e0:	bne	55ac <fhs@@Base+0xa4>
    55e4:	mov	r0, r8
    55e8:	bl	6190 <HV@@Base+0x440>
    55ec:	cmp	r0, #0
    55f0:	bne	56b0 <fhs@@Base+0x1a8>
    55f4:	ldr	r0, [sp, #16]
    55f8:	movw	r9, #1033	; 0x409
    55fc:	mov	r7, #32
    5600:	movt	r9, #33026	; 0x8102
    5604:	lsl	r0, r0, #3
    5608:	str	r0, [sp, #8]
    560c:	add	r0, r8, #68	; 0x44
    5610:	str	r0, [sp, #4]
    5614:	ldr	sl, [pc, #176]	; 56cc <fhs@@Base+0x1c4>
    5618:	add	sl, pc, sl
    561c:	ldr	r0, [sp, #16]
    5620:	cmp	r0, #1
    5624:	blt	5684 <fhs@@Base+0x17c>
    5628:	ldr	r0, [pc, #160]	; 56d0 <fhs@@Base+0x1c8>
    562c:	ldr	r1, [sp, #12]
    5630:	ldr	r2, [sp, #8]
    5634:	ldr	r3, [sp, #4]
    5638:	add	r0, pc, r0
    563c:	ldrb	r0, [r0, r7]
    5640:	add	r6, r0, #18
    5644:	ldr	r0, [r8, #4]
    5648:	and	r0, r0, #1
    564c:	smmla	r5, r6, r9, r6
    5650:	cmp	r0, #0
    5654:	asr	r4, r5, #6
    5658:	add	r5, r4, r5, lsr #31
    565c:	rsb	r5, r5, r5, lsl #7
    5660:	sub	r6, r6, r5
    5664:	ldrb	r5, [r1]
    5668:	add	r1, r1, #1
    566c:	ldrbne	r4, [sl, r6]
    5670:	add	r6, r6, #1
    5674:	eorne	r5, r4, r5
    5678:	subs	r2, r2, #1
    567c:	strb	r5, [r3], #1
    5680:	bne	564c <fhs@@Base+0x144>
    5684:	mov	r0, r8
    5688:	bl	6190 <HV@@Base+0x440>
    568c:	cmp	r0, #0
    5690:	bne	56b0 <fhs@@Base+0x1a8>
    5694:	add	r7, r7, #1
    5698:	cmp	r7, #63	; 0x3f
    569c:	bls	561c <fhs@@Base+0x114>
    56a0:	ldr	r0, [sp, #12]
    56a4:	bl	45d8 <free@plt>
    56a8:	mov	r0, #0
    56ac:	b	56bc <fhs@@Base+0x1b4>
    56b0:	ldr	r0, [sp, #12]
    56b4:	bl	45d8 <free@plt>
    56b8:	mov	r0, #1000	; 0x3e8
    56bc:	sub	sp, fp, #28
    56c0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
    56c4:	andeq	r8, r0, lr, lsl #28
    56c8:	andeq	r8, r0, r4, ror #24
    56cc:	strdeq	r8, [r0], -r4
    56d0:	andeq	r8, r0, sl, asr sp

000056d4 <DM@@Base>:
    56d4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
    56d8:	add	fp, sp, #28
    56dc:	sub	sp, sp, #12
    56e0:	mov	r8, r0
    56e4:	movw	r0, #2946	; 0xb82
    56e8:	mov	r4, r1
    56ec:	add	sl, r1, r0
    56f0:	movw	r0, #2822	; 0xb06
    56f4:	ldrh	r0, [r1, r0]
    56f8:	ldrb	r1, [r1, #18]
    56fc:	sub	r7, r0, #122	; 0x7a
    5700:	cmp	r1, #9
    5704:	bgt	5730 <DM@@Base+0x5c>
    5708:	mov	r2, #1
    570c:	cmp	r1, #3
    5710:	beq	5748 <DM@@Base+0x74>
    5714:	cmp	r1, #8
    5718:	bne	583c <DM@@Base+0x168>
    571c:	movw	r1, #3026	; 0xbd2
    5720:	sub	r7, r0, #202	; 0xca
    5724:	mov	r9, #12
    5728:	add	sl, r4, r1
    572c:	b	5758 <DM@@Base+0x84>
    5730:	cmp	r1, #10
    5734:	beq	5750 <DM@@Base+0x7c>
    5738:	cmp	r1, #14
    573c:	bne	583c <DM@@Base+0x168>
    5740:	mov	r9, #228	; 0xe4
    5744:	b	5754 <DM@@Base+0x80>
    5748:	mov	r9, #20
    574c:	b	5758 <DM@@Base+0x84>
    5750:	mov	r9, #125	; 0x7d
    5754:	mov	r2, #2
    5758:	mov	r5, #1
    575c:	mov	r0, sl
    5760:	mov	r1, r8
    5764:	mov	r3, r7
    5768:	str	r4, [sp, #4]
    576c:	str	r5, [sp]
    5770:	bl	6310 <HV@@Base+0x5c0>
    5774:	cmp	r0, #0
    5778:	beq	583c <DM@@Base+0x168>
    577c:	ldr	r6, [r4, #64]	; 0x40
    5780:	cmp	r6, r9
    5784:	bgt	5840 <DM@@Base+0x16c>
    5788:	cmp	r7, r6, lsl #3
    578c:	blt	5840 <DM@@Base+0x16c>
    5790:	lsl	r7, r6, #3
    5794:	mov	r0, sl
    5798:	mov	r1, r7
    579c:	bl	5f88 <HV@@Base+0x238>
    57a0:	cmp	r0, #0
    57a4:	mov	r5, #0
    57a8:	beq	5840 <DM@@Base+0x16c>
    57ac:	cmp	r6, #1
    57b0:	blt	5820 <DM@@Base+0x14c>
    57b4:	ldr	r2, [pc, #144]	; 584c <DM@@Base+0x178>
    57b8:	and	r1, r8, #63	; 0x3f
    57bc:	movw	lr, #1033	; 0x409
    57c0:	mov	r5, r0
    57c4:	movt	lr, #33026	; 0x8102
    57c8:	add	r2, pc, r2
    57cc:	ldrb	r1, [r2, r1]
    57d0:	ldr	r2, [r4, #4]
    57d4:	ldr	ip, [pc, #116]	; 5850 <DM@@Base+0x17c>
    57d8:	add	r6, r1, #18
    57dc:	add	r1, r4, #68	; 0x44
    57e0:	and	r8, r2, #1
    57e4:	add	ip, pc, ip
    57e8:	smmla	r3, r6, lr, r6
    57ec:	cmp	r8, #0
    57f0:	asr	r2, r3, #6
    57f4:	add	r2, r2, r3, lsr #31
    57f8:	ldrb	r3, [r5]
    57fc:	add	r5, r5, #1
    5800:	rsb	r2, r2, r2, lsl #7
    5804:	sub	r6, r6, r2
    5808:	ldrbne	r2, [ip, r6]
    580c:	add	r6, r6, #1
    5810:	eorne	r3, r2, r3
    5814:	subs	r7, r7, #1
    5818:	strb	r3, [r1], #1
    581c:	bne	57e8 <DM@@Base+0x114>
    5820:	bl	45d8 <free@plt>
    5824:	mov	r0, r4
    5828:	bl	6190 <HV@@Base+0x440>
    582c:	mov	r5, #10
    5830:	cmp	r0, #0
    5834:	movweq	r5, #2
    5838:	b	5840 <DM@@Base+0x16c>
    583c:	mov	r5, #0
    5840:	mov	r0, r5
    5844:	sub	sp, fp, #28
    5848:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
    584c:	andeq	r8, r0, sl, asr #23
    5850:	andeq	r8, r0, r8, lsr #20

00005854 <DH@@Base>:
    5854:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
    5858:	add	fp, sp, #24
    585c:	sub	sp, sp, #8
    5860:	mov	r8, r0
    5864:	mov	r5, r1
    5868:	movw	r0, #2822	; 0xb06
    586c:	mov	r6, #0
    5870:	ldrh	r1, [r1, r0]
    5874:	ldrb	r0, [r5, #18]
    5878:	cmp	r0, #10
    587c:	bgt	589c <DH@@Base+0x48>
    5880:	mov	r2, #1
    5884:	mov	r4, #30
    5888:	cmp	r0, #4
    588c:	beq	58c0 <DH@@Base+0x6c>
    5890:	cmp	r0, #9
    5894:	beq	58c0 <DH@@Base+0x6c>
    5898:	b	599c <DH@@Base+0x148>
    589c:	cmp	r0, #15
    58a0:	beq	58b8 <DH@@Base+0x64>
    58a4:	cmp	r0, #11
    58a8:	bne	599c <DH@@Base+0x148>
    58ac:	mov	r2, #2
    58b0:	mov	r4, #187	; 0xbb
    58b4:	b	58c0 <DH@@Base+0x6c>
    58b8:	mov	r2, #2
    58bc:	movw	r4, #343	; 0x157
    58c0:	movw	r0, #2946	; 0xb82
    58c4:	sub	r7, r1, #122	; 0x7a
    58c8:	mov	r6, #0
    58cc:	mov	r1, r8
    58d0:	str	r5, [sp, #4]
    58d4:	add	r0, r5, r0
    58d8:	mov	r3, r7
    58dc:	str	r6, [sp]
    58e0:	bl	6310 <HV@@Base+0x5c0>
    58e4:	cmp	r0, #0
    58e8:	beq	599c <DH@@Base+0x148>
    58ec:	ldr	r0, [r5, #64]	; 0x40
    58f0:	mov	r6, #1
    58f4:	cmp	r0, r4
    58f8:	bgt	599c <DH@@Base+0x148>
    58fc:	cmp	r7, r0, lsl #3
    5900:	blt	599c <DH@@Base+0x148>
    5904:	cmp	r0, #1
    5908:	blt	5978 <DH@@Base+0x124>
    590c:	ldr	r2, [pc, #148]	; 59a8 <DH@@Base+0x154>
    5910:	and	r1, r8, #63	; 0x3f
    5914:	lsl	r0, r0, #3
    5918:	mov	r4, r5
    591c:	add	r2, pc, r2
    5920:	ldrb	r1, [r2, r1]
    5924:	movw	r2, #1033	; 0x409
    5928:	movt	r2, #33026	; 0x8102
    592c:	add	r7, r1, #18
    5930:	ldr	r1, [r5, #4]
    5934:	ldr	ip, [pc, #112]	; 59ac <DH@@Base+0x158>
    5938:	and	r1, r1, #1
    593c:	add	ip, pc, ip
    5940:	smmla	r6, r7, r2, r7
    5944:	cmp	r1, #0
    5948:	asr	r3, r6, #6
    594c:	add	r3, r3, r6, lsr #31
    5950:	ldrb	r6, [r4, #2946]	; 0xb82
    5954:	rsb	r3, r3, r3, lsl #7
    5958:	sub	r7, r7, r3
    595c:	ldrbne	r3, [ip, r7]
    5960:	add	r7, r7, #1
    5964:	eorne	r6, r3, r6
    5968:	subs	r0, r0, #1
    596c:	strb	r6, [r4, #68]	; 0x44
    5970:	add	r4, r4, #1
    5974:	bne	5940 <DH@@Base+0xec>
    5978:	ldrb	r0, [r5, #18]
    597c:	mov	r6, #2
    5980:	cmp	r0, #9
    5984:	beq	599c <DH@@Base+0x148>
    5988:	mov	r0, r5
    598c:	bl	6190 <HV@@Base+0x440>
    5990:	mov	r6, #10
    5994:	cmp	r0, #0
    5998:	movweq	r6, #2
    599c:	mov	r0, r6
    59a0:	sub	sp, fp, #24
    59a4:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
    59a8:	andeq	r8, r0, r6, ror sl
    59ac:	ldrdeq	r8, [r0], -r0

000059b0 <EV3@@Base>:
    59b0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
    59b4:	add	fp, sp, #28
    59b8:	sub	sp, sp, #4
    59bc:	mov	r4, r1
    59c0:	mov	r1, #0
    59c4:	movw	r2, #2822	; 0xb06
    59c8:	movw	r6, #1033	; 0x409
    59cc:	and	sl, r0, #63	; 0x3f
    59d0:	str	r1, [r4, #64]	; 0x40
    59d4:	add	ip, r4, #68	; 0x44
    59d8:	movt	r6, #33026	; 0x8102
    59dc:	ldrh	r2, [r4, r2]
    59e0:	ldr	lr, [pc, #220]	; 5ac4 <EV3@@Base+0x114>
    59e4:	ldr	r7, [pc, #220]	; 5ac8 <EV3@@Base+0x118>
    59e8:	sub	r9, r2, #122	; 0x7a
    59ec:	add	lr, pc, lr
    59f0:	add	r7, pc, r7
    59f4:	str	r9, [sp]
    59f8:	add	r0, r1, #1
    59fc:	lsl	r0, r0, #3
    5a00:	cmp	r0, r9
    5a04:	bgt	5ab0 <EV3@@Base+0x100>
    5a08:	lsl	r2, r1, #3
    5a0c:	add	r0, ip, r1, lsl #3
    5a10:	ldrb	r1, [lr, sl]
    5a14:	add	r1, r2, r1
    5a18:	add	r2, r1, #18
    5a1c:	mov	r1, #0
    5a20:	smmla	r3, r2, r6, r2
    5a24:	asr	r5, r3, #6
    5a28:	add	r3, r5, r3, lsr #31
    5a2c:	ldrb	r5, [r4, #4]
    5a30:	sub	r3, r3, r3, lsl #7
    5a34:	add	r2, r2, r3
    5a38:	add	r3, r4, r1
    5a3c:	ldrb	r3, [r3, #2946]	; 0xb82
    5a40:	tst	r5, #1
    5a44:	ldrbne	r5, [r7, r2]
    5a48:	add	r2, r2, #1
    5a4c:	eorne	r3, r5, r3
    5a50:	strb	r3, [r0, r1]
    5a54:	add	r1, r1, #1
    5a58:	cmp	r1, #8
    5a5c:	bne	5a20 <EV3@@Base+0x70>
    5a60:	ldr	r8, [r4, #64]	; 0x40
    5a64:	cmp	r8, #3
    5a68:	blt	5a98 <EV3@@Base+0xe8>
    5a6c:	mov	r0, r4
    5a70:	mov	r9, sl
    5a74:	mov	r5, ip
    5a78:	mov	sl, lr
    5a7c:	bl	6190 <HV@@Base+0x440>
    5a80:	mov	lr, sl
    5a84:	mov	sl, r9
    5a88:	ldr	r9, [sp]
    5a8c:	mov	ip, r5
    5a90:	cmp	r0, #0
    5a94:	bne	5ab8 <EV3@@Base+0x108>
    5a98:	add	r1, r8, #1
    5a9c:	cmp	r8, #31
    5aa0:	str	r1, [r4, #64]	; 0x40
    5aa4:	blt	59f8 <EV3@@Base+0x48>
    5aa8:	mov	r0, #2
    5aac:	b	5abc <EV3@@Base+0x10c>
    5ab0:	mov	r0, #1
    5ab4:	b	5abc <EV3@@Base+0x10c>
    5ab8:	mov	r0, #10
    5abc:	sub	sp, fp, #28
    5ac0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
    5ac4:	andeq	r8, r0, r6, lsr #19
    5ac8:	andeq	r8, r0, ip, lsl r8

00005acc <EV4@@Base>:
    5acc:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
    5ad0:	add	fp, sp, #28
    5ad4:	sub	sp, sp, #20
    5ad8:	mov	r5, r1
    5adc:	mov	r1, #1
    5ae0:	and	r0, r0, #63	; 0x3f
    5ae4:	movw	sl, #1033	; 0x409
    5ae8:	mov	r9, #0
    5aec:	mov	r4, #0
    5af0:	str	r1, [r5, #64]	; 0x40
    5af4:	movw	r1, #2946	; 0xb82
    5af8:	str	r0, [sp, #4]
    5afc:	movt	sl, #33026	; 0x8102
    5b00:	add	r1, r5, r1
    5b04:	str	r1, [sp, #8]
    5b08:	movw	r1, #2822	; 0xb06
    5b0c:	ldrh	r1, [r5, r1]
    5b10:	sub	r1, r1, #122	; 0x7a
    5b14:	str	r1, [sp, #12]
    5b18:	ldr	r8, [pc, #268]	; 5c2c <EV4@@Base+0x160>
    5b1c:	add	r8, pc, r8
    5b20:	ldr	r0, [sp, #12]
    5b24:	add	r6, r4, #15
    5b28:	cmp	r6, r0
    5b2c:	bgt	5c14 <EV4@@Base+0x148>
    5b30:	ldr	r0, [sp, #8]
    5b34:	mov	r1, #10
    5b38:	add	r0, r0, r4
    5b3c:	bl	5f88 <HV@@Base+0x238>
    5b40:	cmp	r0, #0
    5b44:	beq	5c1c <EV4@@Base+0x150>
    5b48:	str	r6, [sp, #16]
    5b4c:	ldr	r2, [sp, #4]
    5b50:	add	r1, r5, r9
    5b54:	ldr	r3, [pc, #212]	; 5c30 <EV4@@Base+0x164>
    5b58:	add	r3, pc, r3
    5b5c:	ldrb	r2, [r3, r2]
    5b60:	mov	r3, #0
    5b64:	add	r2, r9, r2
    5b68:	add	r7, r2, #18
    5b6c:	ldr	r2, [r5, #4]
    5b70:	and	r2, r2, #1
    5b74:	smmla	r4, r7, sl, r7
    5b78:	cmp	r2, #0
    5b7c:	asr	r6, r4, #6
    5b80:	add	r6, r6, r4, lsr #31
    5b84:	ldrb	r4, [r0, -r3]
    5b88:	rsb	r6, r6, r6, lsl #7
    5b8c:	sub	r7, r7, r6
    5b90:	ldrbne	r6, [r8, r7]
    5b94:	add	r7, r7, #1
    5b98:	eorne	r4, r6, r4
    5b9c:	sub	r6, r1, r3
    5ba0:	sub	r3, r3, #1
    5ba4:	cmn	r3, #10
    5ba8:	strb	r4, [r6, #68]	; 0x44
    5bac:	bne	5b74 <EV4@@Base+0xa8>
    5bb0:	bl	45d8 <free@plt>
    5bb4:	ldr	r0, [r5, #64]	; 0x40
    5bb8:	cmp	r9, r0, lsl #3
    5bbc:	blt	5bec <EV4@@Base+0x120>
    5bc0:	add	r4, r0, #1
    5bc4:	lsl	r7, r0, #3
    5bc8:	mov	r0, r5
    5bcc:	bl	6190 <HV@@Base+0x440>
    5bd0:	cmp	r0, #0
    5bd4:	bne	5c08 <EV4@@Base+0x13c>
    5bd8:	add	r7, r7, #8
    5bdc:	str	r4, [r5, #64]	; 0x40
    5be0:	add	r4, r4, #1
    5be4:	cmp	r7, r9
    5be8:	ble	5bc8 <EV4@@Base+0xfc>
    5bec:	ldr	r4, [sp, #16]
    5bf0:	movw	r0, #1470	; 0x5be
    5bf4:	add	r9, r9, #10
    5bf8:	cmp	r4, r0
    5bfc:	bcc	5b20 <EV4@@Base+0x54>
    5c00:	mov	r0, #2
    5c04:	b	5c0c <EV4@@Base+0x140>
    5c08:	mov	r0, #10
    5c0c:	sub	sp, fp, #28
    5c10:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
    5c14:	mov	r0, #1
    5c18:	b	5c0c <EV4@@Base+0x140>
    5c1c:	mov	r0, #0
    5c20:	cmp	r4, #44	; 0x2c
    5c24:	movwhi	r0, #1
    5c28:	b	5c0c <EV4@@Base+0x140>
    5c2c:	strdeq	r8, [r0], -r0
    5c30:	andeq	r8, r0, sl, lsr r8

00005c34 <EV5@@Base>:
    5c34:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
    5c38:	add	fp, sp, #28
    5c3c:	sub	sp, sp, #4
    5c40:	mov	r4, r1
    5c44:	mov	r1, #0
    5c48:	movw	r2, #2822	; 0xb06
    5c4c:	movw	r6, #1033	; 0x409
    5c50:	and	sl, r0, #63	; 0x3f
    5c54:	str	r1, [r4, #64]	; 0x40
    5c58:	add	ip, r4, #68	; 0x44
    5c5c:	movt	r6, #33026	; 0x8102
    5c60:	ldrh	r2, [r4, r2]
    5c64:	ldr	lr, [pc, #220]	; 5d48 <EV5@@Base+0x114>
    5c68:	ldr	r7, [pc, #220]	; 5d4c <EV5@@Base+0x118>
    5c6c:	sub	r9, r2, #122	; 0x7a
    5c70:	add	lr, pc, lr
    5c74:	add	r7, pc, r7
    5c78:	str	r9, [sp]
    5c7c:	add	r0, r1, #1
    5c80:	lsl	r0, r0, #3
    5c84:	cmp	r0, r9
    5c88:	bgt	5d34 <EV5@@Base+0x100>
    5c8c:	lsl	r2, r1, #3
    5c90:	add	r0, ip, r1, lsl #3
    5c94:	ldrb	r1, [lr, sl]
    5c98:	add	r1, r2, r1
    5c9c:	add	r2, r1, #18
    5ca0:	mov	r1, #0
    5ca4:	smmla	r3, r2, r6, r2
    5ca8:	asr	r5, r3, #6
    5cac:	add	r3, r5, r3, lsr #31
    5cb0:	ldrb	r5, [r4, #4]
    5cb4:	sub	r3, r3, r3, lsl #7
    5cb8:	add	r2, r2, r3
    5cbc:	add	r3, r4, r1
    5cc0:	ldrb	r3, [r3, #2946]	; 0xb82
    5cc4:	tst	r5, #1
    5cc8:	ldrbne	r5, [r7, r2]
    5ccc:	add	r2, r2, #1
    5cd0:	eorne	r3, r5, r3
    5cd4:	strb	r3, [r0, r1]
    5cd8:	add	r1, r1, #1
    5cdc:	cmp	r1, #8
    5ce0:	bne	5ca4 <EV5@@Base+0x70>
    5ce4:	ldr	r8, [r4, #64]	; 0x40
    5ce8:	cmp	r8, #3
    5cec:	blt	5d1c <EV5@@Base+0xe8>
    5cf0:	mov	r0, r4
    5cf4:	mov	r9, sl
    5cf8:	mov	r5, ip
    5cfc:	mov	sl, lr
    5d00:	bl	6190 <HV@@Base+0x440>
    5d04:	mov	lr, sl
    5d08:	mov	sl, r9
    5d0c:	ldr	r9, [sp]
    5d10:	mov	ip, r5
    5d14:	cmp	r0, #0
    5d18:	bne	5d3c <EV5@@Base+0x108>
    5d1c:	add	r1, r8, #1
    5d20:	cmp	r8, #181	; 0xb5
    5d24:	str	r1, [r4, #64]	; 0x40
    5d28:	blt	5c7c <EV5@@Base+0x48>
    5d2c:	mov	r0, #2
    5d30:	b	5d40 <EV5@@Base+0x10c>
    5d34:	mov	r0, #1
    5d38:	b	5d40 <EV5@@Base+0x10c>
    5d3c:	mov	r0, #10
    5d40:	sub	sp, fp, #28
    5d44:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
    5d48:	andeq	r8, r0, r2, lsr #14
    5d4c:	muleq	r0, r8, r5

00005d50 <HV@@Base>:
    5d50:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
    5d54:	add	fp, sp, #24
    5d58:	sub	sp, sp, #80	; 0x50
    5d5c:	mov	r6, r0
    5d60:	mov	r0, #0
    5d64:	mov	r5, r1
    5d68:	str	r0, [r1, #40]	; 0x28
    5d6c:	movw	r1, #2822	; 0xb06
    5d70:	ldrh	r1, [r5, r1]
    5d74:	lsr	r1, r1, #1
    5d78:	cmp	r1, #180	; 0xb4
    5d7c:	bhi	5d94 <HV@@Base+0x44>
    5d80:	str	r0, [r5, #64]	; 0x40
    5d84:	mov	r8, #1
    5d88:	mov	r0, r8
    5d8c:	sub	sp, fp, #24
    5d90:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
    5d94:	ldrb	r1, [r5, #18]
    5d98:	mov	r8, #2
    5d9c:	cmp	r1, #7
    5da0:	beq	5e54 <HV@@Base+0x104>
    5da4:	movw	r0, #2946	; 0xb82
    5da8:	cmp	r1, #6
    5dac:	add	r0, r5, r0
    5db0:	beq	5ed4 <HV@@Base+0x184>
    5db4:	cmp	r1, #5
    5db8:	bne	5d88 <HV@@Base+0x38>
    5dbc:	mov	r7, sp
    5dc0:	mov	r2, #80	; 0x50
    5dc4:	mov	r1, r7
    5dc8:	bl	6674 <HV@@Base+0x924>
    5dcc:	cmp	r0, #0
    5dd0:	beq	5f68 <HV@@Base+0x218>
    5dd4:	mov	r0, #10
    5dd8:	movw	r3, #1033	; 0x409
    5ddc:	str	r0, [r5, #64]	; 0x40
    5de0:	movt	r3, #33026	; 0x8102
    5de4:	ldr	r1, [r5, #4]
    5de8:	orr	r0, r1, #128	; 0x80
    5dec:	and	r1, r1, #1
    5df0:	str	r0, [r5, #4]
    5df4:	and	r0, r6, #63	; 0x3f
    5df8:	ldr	r2, [pc, #368]	; 5f70 <HV@@Base+0x220>
    5dfc:	ldr	ip, [pc, #368]	; 5f74 <HV@@Base+0x224>
    5e00:	add	r2, pc, r2
    5e04:	add	ip, pc, ip
    5e08:	ldrb	r0, [r2, r0]
    5e0c:	mov	r2, #0
    5e10:	add	r4, r0, #18
    5e14:	add	r0, r5, #68	; 0x44
    5e18:	smmla	r5, r4, r3, r4
    5e1c:	cmp	r1, #0
    5e20:	asr	r6, r5, #6
    5e24:	add	r6, r6, r5, lsr #31
    5e28:	rsb	r6, r6, r6, lsl #7
    5e2c:	sub	r5, r4, r6
    5e30:	ldrb	r4, [r7, r2]
    5e34:	ldrbne	r6, [ip, r5]
    5e38:	eorne	r4, r6, r4
    5e3c:	strb	r4, [r0, r2]
    5e40:	add	r2, r2, #1
    5e44:	add	r4, r5, #1
    5e48:	cmp	r2, #80	; 0x50
    5e4c:	bne	5e18 <HV@@Base+0xc8>
    5e50:	b	5d88 <HV@@Base+0x38>
    5e54:	mov	r0, #30
    5e58:	str	r0, [r5, #64]	; 0x40
    5e5c:	ldr	r0, [r5, #4]
    5e60:	orr	r1, r0, #128	; 0x80
    5e64:	and	r0, r0, #1
    5e68:	str	r1, [r5, #4]
    5e6c:	and	r1, r6, #63	; 0x3f
    5e70:	ldr	r2, [pc, #264]	; 5f80 <HV@@Base+0x230>
    5e74:	ldr	ip, [pc, #264]	; 5f84 <HV@@Base+0x234>
    5e78:	add	r2, pc, r2
    5e7c:	add	ip, pc, ip
    5e80:	ldrb	r1, [r2, r1]
    5e84:	movw	r2, #1033	; 0x409
    5e88:	movt	r2, #33026	; 0x8102
    5e8c:	add	r7, r1, #18
    5e90:	mov	r1, #0
    5e94:	smmla	r6, r7, r2, r7
    5e98:	cmp	r0, #0
    5e9c:	asr	r4, r6, #6
    5ea0:	add	r6, r4, r6, lsr #31
    5ea4:	rsb	r6, r6, r6, lsl #7
    5ea8:	sub	r7, r7, r6
    5eac:	add	r6, r5, r1
    5eb0:	add	r1, r1, #1
    5eb4:	ldrbne	r3, [ip, r7]
    5eb8:	ldrb	r4, [r6, #2946]	; 0xb82
    5ebc:	add	r7, r7, #1
    5ec0:	eorne	r4, r3, r4
    5ec4:	cmp	r1, #240	; 0xf0
    5ec8:	strb	r4, [r6, #68]	; 0x44
    5ecc:	bne	5e94 <HV@@Base+0x144>
    5ed0:	b	5d88 <HV@@Base+0x38>
    5ed4:	mov	r1, #160	; 0xa0
    5ed8:	bl	5f88 <HV@@Base+0x238>
    5edc:	cmp	r0, #0
    5ee0:	beq	5f68 <HV@@Base+0x218>
    5ee4:	mov	r1, #20
    5ee8:	movw	r7, #1033	; 0x409
    5eec:	str	r1, [r5, #64]	; 0x40
    5ef0:	movt	r7, #33026	; 0x8102
    5ef4:	ldr	r2, [r5, #4]
    5ef8:	orr	r1, r2, #128	; 0x80
    5efc:	and	r2, r2, #1
    5f00:	str	r1, [r5, #4]
    5f04:	and	r1, r6, #63	; 0x3f
    5f08:	ldr	r3, [pc, #104]	; 5f78 <HV@@Base+0x228>
    5f0c:	ldr	ip, [pc, #104]	; 5f7c <HV@@Base+0x22c>
    5f10:	add	r3, pc, r3
    5f14:	add	ip, pc, ip
    5f18:	ldrb	r1, [r3, r1]
    5f1c:	mov	r3, #0
    5f20:	add	r4, r1, #18
    5f24:	add	r1, r5, #68	; 0x44
    5f28:	smmla	r5, r4, r7, r4
    5f2c:	cmp	r2, #0
    5f30:	asr	r6, r5, #6
    5f34:	add	r6, r6, r5, lsr #31
    5f38:	rsb	r6, r6, r6, lsl #7
    5f3c:	sub	r5, r4, r6
    5f40:	ldrb	r4, [r0, r3]
    5f44:	ldrbne	r6, [ip, r5]
    5f48:	eorne	r4, r6, r4
    5f4c:	strb	r4, [r1, r3]
    5f50:	add	r3, r3, #1
    5f54:	add	r4, r5, #1
    5f58:	cmp	r3, #160	; 0xa0
    5f5c:	bne	5f28 <HV@@Base+0x1d8>
    5f60:	bl	45d8 <free@plt>
    5f64:	b	5d88 <HV@@Base+0x38>
    5f68:	mov	r8, #0
    5f6c:	b	5d88 <HV@@Base+0x38>
    5f70:	muleq	r0, r2, r5
    5f74:	andeq	r8, r0, r8, lsl #8
    5f78:	andeq	r8, r0, r2, lsl #9
    5f7c:	strdeq	r8, [r0], -r8	; <UNPREDICTABLE>
    5f80:	andeq	r8, r0, sl, lsl r5
    5f84:	muleq	r0, r0, r3
    5f88:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
    5f8c:	add	fp, sp, #28
    5f90:	sub	sp, sp, #4
    5f94:	mov	r8, r0
    5f98:	movw	r0, #26215	; 0x6667
    5f9c:	mov	r9, r1
    5fa0:	movt	r0, #26214	; 0x6666
    5fa4:	smmul	r0, r1, r0
    5fa8:	lsr	r1, r0, #2
    5fac:	add	r0, r1, r0, lsr #31
    5fb0:	add	r0, r0, r0, lsl #2
    5fb4:	sub	r0, r9, r0, lsl #1
    5fb8:	uxtb	r0, r0
    5fbc:	rsb	r1, r0, #10
    5fc0:	cmp	r0, #0
    5fc4:	addne	r9, r9, r1
    5fc8:	mov	r0, r9
    5fcc:	bl	46f8 <malloc@plt>
    5fd0:	cmp	r9, #1
    5fd4:	blt	6180 <HV@@Base+0x430>
    5fd8:	mov	sl, #0
    5fdc:	mov	r3, #1
    5fe0:	mov	r5, r8
    5fe4:	mov	r2, #0
    5fe8:	rsb	r1, sl, sl, lsl #4
    5fec:	add	r7, sl, sl, lsl #2
    5ff0:	mov	r6, #0
    5ff4:	add	r1, r8, r1
    5ff8:	add	r7, r0, r7, lsl #1
    5ffc:	vld1.8	{d16}, [r1]
    6000:	ldrh	r1, [r1, #8]
    6004:	strh	r1, [r7, #8]
    6008:	mov	r1, #0
    600c:	vst1.8	{d16}, [r7]
    6010:	ldrb	r7, [r5, r1]
    6014:	orr	r6, r6, r7, lsl r1
    6018:	add	r1, r1, #1
    601c:	cmp	r1, #10
    6020:	bne	6010 <HV@@Base+0x2c0>
    6024:	mov	r7, #0
    6028:	mov	r1, #0
    602c:	add	r4, r5, r1
    6030:	ldrb	r4, [r4, #10]
    6034:	orr	r7, r7, r4, lsl r1
    6038:	add	r1, r1, #1
    603c:	cmp	r1, #5
    6040:	bne	602c <HV@@Base+0x2dc>
    6044:	ldr	r1, [pc, #316]	; 6188 <HV@@Base+0x438>
    6048:	uxth	r4, r6
    604c:	mov	r6, #0
    6050:	mov	ip, #0
    6054:	add	r1, pc, r1
    6058:	tst	r4, r3, lsl ip
    605c:	add	ip, ip, #1
    6060:	ldrhne	lr, [r1]
    6064:	add	r1, r1, #2
    6068:	eorne	r6, lr, r6
    606c:	cmp	ip, #10
    6070:	bne	6058 <HV@@Base+0x308>
    6074:	and	r1, r6, #64512	; 0xfc00
    6078:	eor	r1, r7, r1, lsr #10
    607c:	sub	r7, r1, #1
    6080:	and	r7, r7, r1
    6084:	tst	r7, #255	; 0xff
    6088:	beq	6160 <HV@@Base+0x410>
    608c:	mvn	r7, #6
    6090:	uxtab	r1, r7, r1
    6094:	cmp	r1, #24
    6098:	bhi	6178 <HV@@Base+0x428>
    609c:	add	r6, pc, #8
    60a0:	mov	r7, r2
    60a4:	ldr	r1, [r6, r1, lsl #2]
    60a8:	add	pc, r6, r1
    60ac:	andeq	r0, r0, r4, rrx
    60b0:	andeq	r0, r0, ip, asr #1
    60b4:	andeq	r0, r0, ip, asr #1
    60b8:	andeq	r0, r0, ip, asr #1
    60bc:	andeq	r0, r0, r8, lsr #1
    60c0:	andeq	r0, r0, ip, asr #1
    60c4:	andeq	r0, r0, ip, rrx
    60c8:	andeq	r0, r0, r4, ror r0
    60cc:	andeq	r0, r0, ip, asr #1
    60d0:	andeq	r0, r0, ip, asr #1
    60d4:	andeq	r0, r0, ip, asr #1
    60d8:	andeq	r0, r0, ip, asr #1
    60dc:	andeq	r0, r0, ip, ror r0
    60e0:	andeq	r0, r0, ip, asr #1
    60e4:	andeq	r0, r0, r4, lsl #1
    60e8:	andeq	r0, r0, ip, lsl #1
    60ec:	andeq	r0, r0, ip, asr #1
    60f0:	andeq	r0, r0, ip, asr #1
    60f4:	andeq	r0, r0, ip, asr #1
    60f8:	muleq	r0, r4, r0
    60fc:	andeq	r0, r0, ip, asr #1
    6100:	muleq	r0, ip, r0
    6104:	andeq	r0, r0, ip, asr #1
    6108:	andeq	r0, r0, ip, asr #1
    610c:	andeq	r0, r0, r4, lsr #1
    6110:	add	r7, r2, #2
    6114:	b	6154 <HV@@Base+0x404>
    6118:	add	r7, r2, #6
    611c:	b	6154 <HV@@Base+0x404>
    6120:	add	r7, r2, #3
    6124:	b	6154 <HV@@Base+0x404>
    6128:	add	r7, r2, #5
    612c:	b	6154 <HV@@Base+0x404>
    6130:	add	r7, r2, #9
    6134:	b	6154 <HV@@Base+0x404>
    6138:	orr	r7, r2, #1
    613c:	b	6154 <HV@@Base+0x404>
    6140:	add	r7, r2, #7
    6144:	b	6154 <HV@@Base+0x404>
    6148:	add	r7, r2, #4
    614c:	b	6154 <HV@@Base+0x404>
    6150:	add	r7, r2, #8
    6154:	ldrb	r1, [r0, r7]
    6158:	eor	r1, r1, #1
    615c:	strb	r1, [r0, r7]
    6160:	add	r2, r2, #10
    6164:	add	r5, r5, #15
    6168:	add	sl, sl, #1
    616c:	cmp	r2, r9
    6170:	blt	5fe8 <HV@@Base+0x298>
    6174:	b	6180 <HV@@Base+0x430>
    6178:	bl	45d8 <free@plt>
    617c:	mov	r0, #0
    6180:	sub	sp, fp, #28
    6184:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
    6188:	andeq	r8, r0, r4, lsr #3
    618c:	nop	{0}
    6190:	push	{r4, r5, fp, lr}
    6194:	add	fp, sp, #8
    6198:	sub	sp, sp, #8
    619c:	ldrb	r1, [r0, #9]
    61a0:	mov	r2, #2
    61a4:	lsl	r3, r1, #7
    61a8:	and	r2, r2, r1, lsr #5
    61ac:	orr	r3, r3, r1, lsr #7
    61b0:	orr	r2, r3, r2
    61b4:	mov	r3, #4
    61b8:	and	r3, r3, r1, lsr #3
    61bc:	orr	r2, r2, r3
    61c0:	mov	r3, #8
    61c4:	and	r3, r3, r1, lsr #1
    61c8:	orr	r2, r2, r3
    61cc:	and	r3, r1, #8
    61d0:	orr	r2, r2, r3, lsl #1
    61d4:	and	r3, r1, #4
    61d8:	and	r1, r1, #2
    61dc:	orr	r2, r2, r3, lsl #3
    61e0:	mvn	r3, #15
    61e4:	orr	r1, r2, r1, lsl #5
    61e8:	ldr	r2, [r0, #64]	; 0x40
    61ec:	lsl	r1, r1, #8
    61f0:	add	r3, r3, r2, lsl #3
    61f4:	lsl	ip, r2, #3
    61f8:	cmp	r3, #1
    61fc:	blt	6240 <HV@@Base+0x4f0>
    6200:	mov	r4, #0
    6204:	movw	lr, #65534	; 0xfffe
    6208:	mov	r2, #0
    620c:	add	r4, r0, r4
    6210:	and	r5, r1, lr
    6214:	add	r2, r2, #1
    6218:	ldrb	r4, [r4, #68]	; 0x44
    621c:	eor	r1, r1, r4
    6220:	lsl	r4, r1, #15
    6224:	and	r1, r1, #1
    6228:	orr	r4, r4, r5, lsr #1
    622c:	eor	r4, r4, r1, lsl #10
    6230:	eor	r1, r4, r1, lsl #3
    6234:	uxth	r4, r2
    6238:	cmp	r3, r4
    623c:	bgt	620c <HV@@Base+0x4bc>
    6240:	add	r2, pc, #168	; 0xa8
    6244:	add	r3, pc, #180	; 0xb4
    6248:	add	r0, r0, ip
    624c:	vmov.i32	q8, #0	; 0x00000000
    6250:	vmov.i32	q11, #8	; 0x00000008
    6254:	vld1.64	{d18-d19}, [r3]
    6258:	vld1.64	{d20-d21}, [r2]
    625c:	add	r5, r0, #52	; 0x34
    6260:	mov	r2, #0
    6264:	mov	r3, sp
    6268:	mov	r0, r5
    626c:	ldr	r4, [r0, r2]!
    6270:	add	r2, r2, #8
    6274:	cmp	r2, #16
    6278:	str	r4, [sp]
    627c:	ldr	r0, [r0, #4]
    6280:	str	r0, [sp, #4]
    6284:	vld1.8	{d24}, [r3 :64]
    6288:	vmovl.u8	q12, d24
    628c:	vmovl.u16	q13, d25
    6290:	vmovl.u16	q12, d24
    6294:	vshl.u32	q13, q13, q9
    6298:	vshl.u32	q12, q12, q10
    629c:	vadd.i32	q10, q10, q11
    62a0:	vadd.i32	q9, q9, q11
    62a4:	vmovn.i32	d27, q13
    62a8:	vmovn.i32	d26, q12
    62ac:	vorr	q8, q8, q13
    62b0:	bne	6268 <HV@@Base+0x518>
    62b4:	vext.8	q9, q8, q8, #8
    62b8:	uxth	r1, r1
    62bc:	vorr	q8, q8, q9
    62c0:	vext.8	q9, q8, q8, #4
    62c4:	vorr	q8, q8, q9
    62c8:	vdup.16	q9, d16[1]
    62cc:	vorr	q8, q8, q9
    62d0:	vmov.u16	r0, d16[0]
    62d4:	uxth	r0, r0
    62d8:	sub	r0, r1, r0
    62dc:	clz	r0, r0
    62e0:	lsr	r0, r0, #5
    62e4:	sub	sp, fp, #8
    62e8:	pop	{r4, r5, fp, pc}
    62ec:	nop	{0}
    62f0:	andeq	r0, r0, r0
    62f4:	andeq	r0, r0, r1
    62f8:	andeq	r0, r0, r2
    62fc:	andeq	r0, r0, r3
    6300:	andeq	r0, r0, r4
    6304:	andeq	r0, r0, r5
    6308:	andeq	r0, r0, r6
    630c:	andeq	r0, r0, r7
    6310:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
    6314:	add	fp, sp, #24
    6318:	sub	sp, sp, #8
    631c:	mov	r6, r1
    6320:	ldr	r8, [fp, #12]
    6324:	ldr	r1, [fp, #8]
    6328:	mov	r9, r2
    632c:	mov	r5, #0
    6330:	cmp	r2, #2
    6334:	bne	63d4 <HV@@Base+0x684>
    6338:	cmp	r3, #16
    633c:	blt	6638 <HV@@Base+0x8e8>
    6340:	cmp	r1, #0
    6344:	beq	6470 <HV@@Base+0x720>
    6348:	cmp	r3, #30
    634c:	blt	6638 <HV@@Base+0x8e8>
    6350:	mov	r1, #16
    6354:	bl	5f88 <HV@@Base+0x238>
    6358:	cmp	r0, #0
    635c:	beq	6638 <HV@@Base+0x8e8>
    6360:	ldr	r2, [pc, #744]	; 6650 <HV@@Base+0x900>
    6364:	and	r1, r6, #63	; 0x3f
    6368:	movw	r6, #1033	; 0x409
    636c:	mov	r3, #0
    6370:	movt	r6, #33026	; 0x8102
    6374:	add	r2, pc, r2
    6378:	ldrb	r1, [r2, r1]
    637c:	ldr	r2, [r8, #4]
    6380:	ldr	ip, [pc, #716]	; 6654 <HV@@Base+0x904>
    6384:	add	r7, r1, #18
    6388:	add	r1, r8, #44	; 0x2c
    638c:	and	r2, r2, #1
    6390:	add	ip, pc, ip
    6394:	smmla	r4, r7, r6, r7
    6398:	cmp	r2, #0
    639c:	asr	r5, r4, #6
    63a0:	add	r5, r5, r4, lsr #31
    63a4:	ldrb	r4, [r0, r3]
    63a8:	rsb	r5, r5, r5, lsl #7
    63ac:	sub	r7, r7, r5
    63b0:	ldrbne	r5, [ip, r7]
    63b4:	add	r7, r7, #1
    63b8:	eorne	r4, r5, r4
    63bc:	strb	r4, [r1, r3]
    63c0:	add	r3, r3, #1
    63c4:	cmp	r3, #16
    63c8:	bne	6394 <HV@@Base+0x644>
    63cc:	bl	45d8 <free@plt>
    63d0:	b	64dc <HV@@Base+0x78c>
    63d4:	cmp	r3, #8
    63d8:	blt	6638 <HV@@Base+0x8e8>
    63dc:	cmp	r1, #0
    63e0:	beq	6508 <HV@@Base+0x7b8>
    63e4:	cmp	r3, #15
    63e8:	blt	6638 <HV@@Base+0x8e8>
    63ec:	mov	r1, #8
    63f0:	bl	5f88 <HV@@Base+0x238>
    63f4:	cmp	r0, #0
    63f8:	beq	6638 <HV@@Base+0x8e8>
    63fc:	ldr	r2, [pc, #604]	; 6660 <HV@@Base+0x910>
    6400:	and	r1, r6, #63	; 0x3f
    6404:	movw	r6, #1033	; 0x409
    6408:	mov	r3, #0
    640c:	movt	r6, #33026	; 0x8102
    6410:	add	r2, pc, r2
    6414:	ldrb	r1, [r2, r1]
    6418:	ldr	r2, [r8, #4]
    641c:	ldr	ip, [pc, #576]	; 6664 <HV@@Base+0x914>
    6420:	add	r7, r1, #18
    6424:	add	r1, r8, #44	; 0x2c
    6428:	and	r2, r2, #1
    642c:	add	ip, pc, ip
    6430:	smmla	r4, r7, r6, r7
    6434:	cmp	r2, #0
    6438:	asr	r5, r4, #6
    643c:	add	r5, r5, r4, lsr #31
    6440:	ldrb	r4, [r0, r3]
    6444:	rsb	r5, r5, r5, lsl #7
    6448:	sub	r7, r7, r5
    644c:	ldrbne	r5, [ip, r7]
    6450:	add	r7, r7, #1
    6454:	eorne	r4, r5, r4
    6458:	strb	r4, [r1, r3]
    645c:	add	r3, r3, #1
    6460:	cmp	r3, #8
    6464:	bne	6430 <HV@@Base+0x6e0>
    6468:	bl	45d8 <free@plt>
    646c:	b	6574 <HV@@Base+0x824>
    6470:	ldr	r2, [pc, #480]	; 6658 <HV@@Base+0x908>
    6474:	and	r1, r6, #63	; 0x3f
    6478:	movw	r6, #1033	; 0x409
    647c:	mov	r3, #0
    6480:	movt	r6, #33026	; 0x8102
    6484:	add	r2, pc, r2
    6488:	ldrb	r1, [r2, r1]
    648c:	ldr	r2, [r8, #4]
    6490:	ldr	ip, [pc, #452]	; 665c <HV@@Base+0x90c>
    6494:	add	r7, r1, #18
    6498:	add	r1, r8, #44	; 0x2c
    649c:	and	r2, r2, #1
    64a0:	add	ip, pc, ip
    64a4:	smmla	r4, r7, r6, r7
    64a8:	cmp	r2, #0
    64ac:	asr	r5, r4, #6
    64b0:	add	r5, r5, r4, lsr #31
    64b4:	ldrb	r4, [r0, r3]
    64b8:	rsb	r5, r5, r5, lsl #7
    64bc:	sub	r7, r7, r5
    64c0:	ldrbne	r5, [ip, r7]
    64c4:	add	r7, r7, #1
    64c8:	eorne	r4, r5, r4
    64cc:	strb	r4, [r1, r3]
    64d0:	add	r3, r3, #1
    64d4:	cmp	r3, #16
    64d8:	bne	64a4 <HV@@Base+0x754>
    64dc:	add	r1, r8, #47	; 0x2f
    64e0:	mov	r0, #0
    64e4:	mov	r2, #0
    64e8:	ldrb	r3, [r1, r2]
    64ec:	orr	r0, r0, r3, lsl r2
    64f0:	add	r2, r2, #1
    64f4:	cmp	r2, #10
    64f8:	bne	64e8 <HV@@Base+0x798>
    64fc:	mov	r1, #4
    6500:	uxtah	r1, r1, r0
    6504:	b	659c <HV@@Base+0x84c>
    6508:	ldr	r2, [pc, #344]	; 6668 <HV@@Base+0x918>
    650c:	and	r1, r6, #63	; 0x3f
    6510:	movw	r6, #1033	; 0x409
    6514:	mov	r3, #0
    6518:	movt	r6, #33026	; 0x8102
    651c:	add	r2, pc, r2
    6520:	ldrb	r1, [r2, r1]
    6524:	ldr	r2, [r8, #4]
    6528:	ldr	ip, [pc, #316]	; 666c <HV@@Base+0x91c>
    652c:	add	r7, r1, #18
    6530:	add	r1, r8, #44	; 0x2c
    6534:	and	r2, r2, #1
    6538:	add	ip, pc, ip
    653c:	smmla	r4, r7, r6, r7
    6540:	cmp	r2, #0
    6544:	asr	r5, r4, #6
    6548:	add	r5, r5, r4, lsr #31
    654c:	ldrb	r4, [r0, r3]
    6550:	rsb	r5, r5, r5, lsl #7
    6554:	sub	r7, r7, r5
    6558:	ldrbne	r5, [ip, r7]
    655c:	add	r7, r7, #1
    6560:	eorne	r4, r5, r4
    6564:	strb	r4, [r1, r3]
    6568:	add	r3, r3, #1
    656c:	cmp	r3, #8
    6570:	bne	653c <HV@@Base+0x7ec>
    6574:	add	r1, r8, #47	; 0x2f
    6578:	mov	r0, #0
    657c:	mov	r2, #0
    6580:	ldrb	r3, [r1, r2]
    6584:	orr	r0, r0, r3, lsl r2
    6588:	add	r2, r2, #1
    658c:	cmp	r2, #5
    6590:	bne	6580 <HV@@Base+0x830>
    6594:	mov	r1, #3
    6598:	uxtab	r1, r1, r0
    659c:	str	r1, [r8, #64]	; 0x40
    65a0:	vldr	d17, [pc, #160]	; 6648 <HV@@Base+0x8f8>
    65a4:	vmov.i32	d16, #0	; 0x00000000
    65a8:	vmov.i32	d18, #2	; 0x00000002
    65ac:	ldrb	r0, [r8, #18]
    65b0:	sub	r3, r0, #3
    65b4:	mov	r0, #0
    65b8:	uxtb	r2, r3
    65bc:	cmp	r2, #12
    65c0:	mov	r2, #0
    65c4:	sxtbls	r2, r3
    65c8:	ldrls	r3, [pc, #160]	; 6670 <HV@@Base+0x920>
    65cc:	addls	r3, pc, r3
    65d0:	ldrls	r2, [r3, r2, lsl #2]
    65d4:	cmp	r1, r2
    65d8:	movlt	r2, r1
    65dc:	add	r1, r8, #44	; 0x2c
    65e0:	str	r2, [r8, #64]	; 0x40
    65e4:	add	r2, sp, #4
    65e8:	add	r3, r1, r0
    65ec:	add	r0, r0, #2
    65f0:	ldrh	r3, [r3]
    65f4:	cmp	r0, #2
    65f8:	strh	r3, [sp, #4]
    65fc:	vld1.16	{d19[0]}, [r2 :16]
    6600:	vmovl.u8	q10, d19
    6604:	vmovl.u16	q10, d20
    6608:	vshl.u32	d19, d20, d17
    660c:	vadd.i32	d17, d17, d18
    6610:	vorr	d16, d16, d19
    6614:	bne	65e8 <HV@@Base+0x898>
    6618:	vdup.32	d17, d16[1]
    661c:	str	r9, [r8, #40]	; 0x28
    6620:	mov	r5, #1
    6624:	vorr	d16, d16, d17
    6628:	vmov.32	r0, d16[0]
    662c:	strb	r0, [r8, #60]	; 0x3c
    6630:	ldrb	r0, [r8, #46]	; 0x2e
    6634:	strb	r0, [r8, #61]	; 0x3d
    6638:	mov	r0, r5
    663c:	sub	sp, fp, #24
    6640:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
    6644:	nop	{0}
    6648:	andeq	r0, r0, r0
    664c:	andeq	r0, r0, r1
    6650:	andeq	r8, r0, lr, lsl r0
    6654:	andeq	r7, r0, ip, ror lr
    6658:	andeq	r7, r0, lr, lsl #30
    665c:	andeq	r7, r0, ip, ror #26
    6660:	andeq	r7, r0, r2, lsl #31
    6664:	andeq	r7, r0, r0, ror #27
    6668:	andeq	r7, r0, r6, ror lr
    666c:	ldrdeq	r7, [r0], -r4
    6670:	andeq	r7, r0, ip, asr #25
    6674:	push	{r4, r5, r6, r7, fp, lr}
    6678:	add	fp, sp, #16
    667c:	mov	ip, r0
    6680:	mov	r0, #0
    6684:	cmp	r2, #1
    6688:	mov	lr, #0
    668c:	blt	66ec <HV@@Base+0x99c>
    6690:	add	r3, ip, #1
    6694:	mov	lr, #0
    6698:	mov	ip, r2
    669c:	ldrb	r4, [r3, #-1]
    66a0:	ldrb	r6, [r3, #1]
    66a4:	ldrb	r5, [r3]
    66a8:	subs	ip, ip, #1
    66ac:	orr	r7, r6, r4
    66b0:	and	r4, r6, r4
    66b4:	and	r5, r7, r5
    66b8:	orr	r4, r5, r4
    66bc:	strb	r4, [r1], #1
    66c0:	ldrb	r4, [r3, #-1]
    66c4:	ldrb	r5, [r3]
    66c8:	ldrb	r6, [r3, #1]
    66cc:	add	r3, r3, #3
    66d0:	eor	r7, r5, r4
    66d4:	eor	r5, r6, r5
    66d8:	eor	r4, r6, r4
    66dc:	orr	r5, r5, r7
    66e0:	orr	r4, r5, r4
    66e4:	uxtab	lr, lr, r4
    66e8:	bne	669c <HV@@Base+0x94c>
    66ec:	asr	r1, r2, #31
    66f0:	add	r1, r2, r1, lsr #30
    66f4:	cmp	lr, r1, asr #2
    66f8:	movwlt	r0, #1
    66fc:	pop	{r4, r5, r6, r7, fp, pc}

00006700 <try_clock@@Base>:
    6700:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
    6704:	add	fp, sp, #24
    6708:	sub	sp, sp, #56	; 0x38
    670c:	mov	r6, r0
    6710:	movw	r0, #2892	; 0xb4c
    6714:	add	r5, sp, #38	; 0x26
    6718:	mov	r8, r1
    671c:	mov	r2, #18
    6720:	add	r0, r1, r0
    6724:	mov	r1, r5
    6728:	bl	6674 <HV@@Base+0x924>
    672c:	cmp	r0, #0
    6730:	beq	68bc <try_clock@@Base+0x1bc>
    6734:	ldr	r1, [pc, #428]	; 68e8 <try_clock@@Base+0x1e8>
    6738:	and	r0, r6, #63	; 0x3f
    673c:	movw	r2, #1033	; 0x409
    6740:	add	r6, sp, #20
    6744:	movt	r2, #33026	; 0x8102
    6748:	add	r1, pc, r1
    674c:	ldrb	r4, [r1, r0]
    6750:	ldr	r0, [r8, #4]
    6754:	ldr	ip, [pc, #400]	; 68ec <try_clock@@Base+0x1ec>
    6758:	mov	r1, #0
    675c:	and	r0, r0, #1
    6760:	add	ip, pc, ip
    6764:	smmla	r7, r4, r2, r4
    6768:	cmp	r0, #0
    676c:	asr	r3, r7, #6
    6770:	add	r3, r3, r7, lsr #31
    6774:	ldrb	r7, [r5, r1]
    6778:	rsb	r3, r3, r3, lsl #7
    677c:	sub	r4, r4, r3
    6780:	ldrbne	r3, [ip, r4]
    6784:	add	r4, r4, #1
    6788:	eorne	r7, r3, r7
    678c:	strb	r7, [r6, r1]
    6790:	add	r1, r1, #1
    6794:	cmp	r1, #18
    6798:	bne	6764 <try_clock@@Base+0x64>
    679c:	mov	r0, #0
    67a0:	mov	r1, #0
    67a4:	ldrb	r2, [r6, r1]
    67a8:	orr	r0, r0, r2, lsl r1
    67ac:	add	r1, r1, #1
    67b0:	cmp	r1, #10
    67b4:	bne	67a4 <try_clock@@Base+0xa4>
    67b8:	add	r2, pc, #264	; 0x108
    67bc:	add	r3, pc, #276	; 0x114
    67c0:	add	r7, r6, #10
    67c4:	vmov.i32	d16, #0	; 0x00000000
    67c8:	vmov.i32	q11, #8	; 0x00000008
    67cc:	vld1.64	{d18-d19}, [r3]
    67d0:	vld1.64	{d20-d21}, [r2]
    67d4:	mov	r2, #0
    67d8:	add	r3, sp, #8
    67dc:	mov	r1, r7
    67e0:	ldr	r5, [r1, r2]!
    67e4:	add	r2, r2, #8
    67e8:	cmp	r2, #8
    67ec:	str	r5, [sp, #8]
    67f0:	ldr	r1, [r1, #4]
    67f4:	str	r1, [sp, #12]
    67f8:	vld1.8	{d17}, [r3 :64]
    67fc:	vmovl.u8	q12, d17
    6800:	vmovl.u16	q13, d25
    6804:	vmovl.u16	q12, d24
    6808:	vshl.u32	q13, q13, q9
    680c:	vshl.u32	q12, q12, q10
    6810:	vadd.i32	q10, q10, q11
    6814:	vadd.i32	q9, q9, q11
    6818:	vmovn.i32	d27, q13
    681c:	vmovn.i32	d26, q12
    6820:	vmovn.i16	d17, q13
    6824:	vorr	d16, d16, d17
    6828:	bne	67dc <try_clock@@Base+0xdc>
    682c:	vext.8	d17, d16, d16, #4
    6830:	uxth	r0, r0
    6834:	vorr	d16, d16, d17
    6838:	vext.8	d17, d16, d16, #2
    683c:	vorr	d16, d16, d17
    6840:	vdup.8	d17, d16[1]
    6844:	vorr	d16, d16, d17
    6848:	vmov.u8	r1, d16[0]
    684c:	bl	68f0 <try_clock@@Base+0x1f0>
    6850:	add	r1, pc, #112	; 0x70
    6854:	vmov.i32	d16, #0	; 0x00000000
    6858:	mov	r2, #0
    685c:	add	r3, sp, #4
    6860:	vmov.i32	q10, #4	; 0x00000004
    6864:	strb	r0, [r8, #9]
    6868:	vld1.64	{d18-d19}, [r1]
    686c:	add	r1, r6, #3
    6870:	ldr	r7, [r1, r2]
    6874:	add	r2, r2, #4
    6878:	cmp	r2, #4
    687c:	str	r7, [sp, #4]
    6880:	vld1.32	{d17[0]}, [r3 :32]
    6884:	vmovl.u8	q11, d17
    6888:	vmovl.u16	q11, d22
    688c:	vshl.u32	q11, q11, q9
    6890:	vadd.i32	q9, q9, q10
    6894:	vmovn.i32	d17, q11
    6898:	vorr	d16, d16, d17
    689c:	bne	6870 <try_clock@@Base+0x170>
    68a0:	vext.8	d17, d16, d16, #4
    68a4:	vorr	d16, d16, d17
    68a8:	vdup.16	d17, d16[1]
    68ac:	vorr	d16, d16, d17
    68b0:	vmov.u16	r1, d16[0]
    68b4:	strb	r1, [r8, #18]
    68b8:	b	68c0 <try_clock@@Base+0x1c0>
    68bc:	mov	r0, #0
    68c0:	sub	sp, fp, #24
    68c4:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
    68c8:	andeq	r0, r0, r0
    68cc:	andeq	r0, r0, r1
    68d0:	andeq	r0, r0, r2
    68d4:	andeq	r0, r0, r3
    68d8:	andeq	r0, r0, r4
    68dc:	andeq	r0, r0, r5
    68e0:	andeq	r0, r0, r6
    68e4:	andeq	r0, r0, r7
    68e8:	andeq	r7, r0, sl, asr #24
    68ec:	andeq	r7, r0, ip, lsr #21
    68f0:	push	{fp, lr}
    68f4:	mov	fp, sp
    68f8:	mov	r2, #9
    68fc:	mov	ip, #1
    6900:	sxtb	r3, r1
    6904:	and	lr, ip, r0, lsr r2
    6908:	sub	r2, r2, #1
    690c:	cmn	r3, #1
    6910:	eorle	r1, r1, #101	; 0x65
    6914:	cmn	r2, #1
    6918:	uxtb	r1, r1
    691c:	eor	r3, lr, r1, lsr #7
    6920:	orr	r1, r3, r1, lsl #1
    6924:	bne	6900 <try_clock@@Base+0x200>
    6928:	uxtb	r0, r1
    692c:	mov	r2, #2
    6930:	lsl	r3, r1, #7
    6934:	and	r2, r2, r0, lsr #5
    6938:	orr	r3, r3, r0, lsr #7
    693c:	orr	r2, r3, r2
    6940:	mov	r3, #4
    6944:	and	r3, r3, r0, lsr #3
    6948:	orr	r2, r2, r3
    694c:	mov	r3, #8
    6950:	and	r0, r3, r0, lsr #1
    6954:	orr	r0, r2, r0
    6958:	and	r2, r1, #8
    695c:	orr	r0, r0, r2, lsl #1
    6960:	and	r2, r1, #4
    6964:	and	r1, r1, #2
    6968:	orr	r0, r0, r2, lsl #3
    696c:	orr	r0, r0, r1, lsl #5
    6970:	uxtb	r0, r0
    6974:	pop	{fp, pc}

00006978 <btbb_decode_header@@Base>:
    6978:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
    697c:	add	fp, sp, #24
    6980:	sub	sp, sp, #40	; 0x28
    6984:	mov	r8, r0
    6988:	ldrb	r0, [r0, #4]
    698c:	mov	r6, #0
    6990:	tst	r0, #16
    6994:	beq	6b9c <btbb_decode_header@@Base+0x224>
    6998:	movw	r0, #2892	; 0xb4c
    699c:	add	r5, sp, #22
    69a0:	mov	r2, #18
    69a4:	add	r0, r8, r0
    69a8:	mov	r1, r5
    69ac:	bl	6674 <HV@@Base+0x924>
    69b0:	cmp	r0, #0
    69b4:	beq	6b9c <btbb_decode_header@@Base+0x224>
    69b8:	ldr	r0, [r8, #2816]	; 0xb00
    69bc:	ldr	r1, [pc, #516]	; 6bc8 <btbb_decode_header@@Base+0x250>
    69c0:	movw	r2, #1033	; 0x409
    69c4:	add	r7, r8, #22
    69c8:	movt	r2, #33026	; 0x8102
    69cc:	and	r0, r0, #63	; 0x3f
    69d0:	add	r1, pc, r1
    69d4:	ldrb	r6, [r1, r0]
    69d8:	ldr	r0, [r8, #4]
    69dc:	ldr	ip, [pc, #488]	; 6bcc <btbb_decode_header@@Base+0x254>
    69e0:	mov	r1, #0
    69e4:	and	r0, r0, #1
    69e8:	add	ip, pc, ip
    69ec:	smmla	r4, r6, r2, r6
    69f0:	cmp	r0, #0
    69f4:	asr	r3, r4, #6
    69f8:	add	r3, r3, r4, lsr #31
    69fc:	ldrb	r4, [r5, r1]
    6a00:	rsb	r3, r3, r3, lsl #7
    6a04:	sub	r6, r6, r3
    6a08:	ldrbne	r3, [ip, r6]
    6a0c:	add	r6, r6, #1
    6a10:	eorne	r4, r3, r4
    6a14:	strb	r4, [r7, r1]
    6a18:	add	r1, r1, #1
    6a1c:	cmp	r1, #18
    6a20:	bne	69ec <btbb_decode_header@@Base+0x74>
    6a24:	mov	r0, #0
    6a28:	mov	r1, #0
    6a2c:	ldrb	r2, [r7, r1]
    6a30:	orr	r0, r0, r2, lsl r1
    6a34:	add	r1, r1, #1
    6a38:	cmp	r1, #10
    6a3c:	bne	6a2c <btbb_decode_header@@Base+0xb4>
    6a40:	add	r2, pc, #352	; 0x160
    6a44:	add	r3, pc, #364	; 0x16c
    6a48:	add	r6, r8, #32
    6a4c:	vmov.i32	d16, #0	; 0x00000000
    6a50:	vmov.i32	q11, #8	; 0x00000008
    6a54:	vld1.64	{d18-d19}, [r3]
    6a58:	vld1.64	{d20-d21}, [r2]
    6a5c:	mov	r2, #0
    6a60:	add	r3, sp, #8
    6a64:	mov	r1, r6
    6a68:	ldr	r5, [r1, r2]!
    6a6c:	add	r2, r2, #8
    6a70:	cmp	r2, #8
    6a74:	str	r5, [sp, #8]
    6a78:	ldr	r1, [r1, #4]
    6a7c:	str	r1, [sp, #12]
    6a80:	vld1.8	{d17}, [r3 :64]
    6a84:	vmovl.u8	q12, d17
    6a88:	vmovl.u16	q13, d25
    6a8c:	vmovl.u16	q12, d24
    6a90:	vshl.u32	q13, q13, q9
    6a94:	vshl.u32	q12, q12, q10
    6a98:	vadd.i32	q10, q10, q11
    6a9c:	vadd.i32	q9, q9, q11
    6aa0:	vmovn.i32	d27, q13
    6aa4:	vmovn.i32	d26, q12
    6aa8:	vmovn.i16	d17, q13
    6aac:	vorr	d16, d16, d17
    6ab0:	bne	6a64 <btbb_decode_header@@Base+0xec>
    6ab4:	vext.8	d17, d16, d16, #4
    6ab8:	uxth	r0, r0
    6abc:	vorr	d16, d16, d17
    6ac0:	vext.8	d17, d16, d16, #2
    6ac4:	vorr	d16, d16, d17
    6ac8:	vdup.8	d17, d16[1]
    6acc:	vorr	d16, d16, d17
    6ad0:	vmov.u8	r5, d16[0]
    6ad4:	mov	r1, r5
    6ad8:	bl	68f0 <try_clock@@Base+0x1f0>
    6adc:	ldrb	r1, [r8, #9]
    6ae0:	mov	r6, #0
    6ae4:	cmp	r0, r1
    6ae8:	bne	6b9c <btbb_decode_header@@Base+0x224>
    6aec:	mov	r1, #0
    6af0:	mov	r0, #0
    6af4:	ldrb	r2, [r7, r0]
    6af8:	orr	r1, r1, r2, lsl r0
    6afc:	add	r0, r0, #1
    6b00:	cmp	r0, #3
    6b04:	bne	6af4 <btbb_decode_header@@Base+0x17c>
    6b08:	add	r2, pc, #152	; 0x98
    6b0c:	strb	r1, [r8, #19]
    6b10:	add	r0, r8, #25
    6b14:	vmov.i32	d16, #0	; 0x00000000
    6b18:	mov	r1, #0
    6b1c:	vmov.i32	q10, #4	; 0x00000004
    6b20:	vld1.64	{d18-d19}, [r2]
    6b24:	add	r2, sp, #4
    6b28:	ldr	r3, [r0, r1]
    6b2c:	add	r1, r1, #4
    6b30:	cmp	r1, #4
    6b34:	str	r3, [sp, #4]
    6b38:	vld1.32	{d17[0]}, [r2 :32]
    6b3c:	vmovl.u8	q11, d17
    6b40:	vmovl.u16	q11, d22
    6b44:	vshl.u32	q11, q11, q9
    6b48:	vadd.i32	q9, q9, q10
    6b4c:	vmovn.i32	d17, q11
    6b50:	vorr	d16, d16, d17
    6b54:	bne	6b28 <btbb_decode_header@@Base+0x1b0>
    6b58:	vext.8	d17, d16, d16, #4
    6b5c:	add	r1, r8, #29
    6b60:	mov	r2, #0
    6b64:	vorr	d16, d16, d17
    6b68:	vdup.16	d17, d16[1]
    6b6c:	vorr	d16, d16, d17
    6b70:	vmov.u16	r0, d16[0]
    6b74:	strb	r0, [r8, #18]
    6b78:	mov	r0, #0
    6b7c:	ldrb	r3, [r1, r2]
    6b80:	orr	r0, r0, r3, lsl r2
    6b84:	add	r2, r2, #1
    6b88:	cmp	r2, #3
    6b8c:	bne	6b7c <btbb_decode_header@@Base+0x204>
    6b90:	mov	r6, #1
    6b94:	strb	r5, [r8, #21]
    6b98:	strb	r0, [r8, #20]
    6b9c:	mov	r0, r6
    6ba0:	sub	sp, fp, #24
    6ba4:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
    6ba8:	andeq	r0, r0, r0
    6bac:	andeq	r0, r0, r1
    6bb0:	andeq	r0, r0, r2
    6bb4:	andeq	r0, r0, r3
    6bb8:	andeq	r0, r0, r4
    6bbc:	andeq	r0, r0, r5
    6bc0:	andeq	r0, r0, r6
    6bc4:	andeq	r0, r0, r7
    6bc8:	andeq	r7, r0, r2, asr #19
    6bcc:	andeq	r7, r0, r4, lsr #16

00006bd0 <btbb_decode_payload@@Base>:
    6bd0:	push	{r4, sl, fp, lr}
    6bd4:	add	fp, sp, #8
    6bd8:	mov	r4, r0
    6bdc:	mov	r0, #0
    6be0:	str	r0, [r4, #40]	; 0x28
    6be4:	ldrb	r1, [r4, #18]
    6be8:	cmp	r1, #15
    6bec:	bhi	6cbc <btbb_decode_payload@@Base+0xec>
    6bf0:	add	r0, pc, #4
    6bf4:	ldr	r1, [r0, r1, lsl #2]
    6bf8:	add	pc, r0, r1
    6bfc:	andeq	r0, r0, r0, rrx
    6c00:	andeq	r0, r0, r0, rrx
    6c04:	andeq	r0, r0, r0, ror r0
    6c08:	andeq	r0, r0, r0, asr #32
    6c0c:	andeq	r0, r0, r0, asr r0
    6c10:	muleq	r0, r4, r0
    6c14:	muleq	r0, r4, r0
    6c18:	andeq	r0, r0, r0, lsl #1
    6c1c:	andeq	r0, r0, r0, asr #32
    6c20:	andeq	r0, r0, r0, asr r0
    6c24:	andeq	r0, r0, r0, asr #32
    6c28:	andeq	r0, r0, r0, asr r0
    6c2c:	strheq	r0, [r0], -r4
    6c30:	andeq	r0, r0, r4, lsr #1
    6c34:	andeq	r0, r0, r0, asr #32
    6c38:	andeq	r0, r0, r0, asr r0
    6c3c:	ldr	r0, [r4, #2816]	; 0xb00
    6c40:	mov	r1, r4
    6c44:	bl	4668 <DM@plt>
    6c48:	b	6cbc <btbb_decode_payload@@Base+0xec>
    6c4c:	ldr	r0, [r4, #2816]	; 0xb00
    6c50:	mov	r1, r4
    6c54:	bl	4878 <DH@plt>
    6c58:	b	6cbc <btbb_decode_payload@@Base+0xec>
    6c5c:	mov	r0, #0
    6c60:	str	r0, [r4, #64]	; 0x40
    6c64:	mov	r0, #1
    6c68:	b	6cbc <btbb_decode_payload@@Base+0xec>
    6c6c:	ldr	r0, [r4, #2816]	; 0xb00
    6c70:	mov	r1, r4
    6c74:	bl	4614 <fhs@plt>
    6c78:	b	6cbc <btbb_decode_payload@@Base+0xec>
    6c7c:	ldr	r0, [r4, #2816]	; 0xb00
    6c80:	mov	r1, r4
    6c84:	bl	480c <EV3@plt>
    6c88:	cmp	r0, #1
    6c8c:	bgt	6cbc <btbb_decode_payload@@Base+0xec>
    6c90:	ldr	r0, [r4, #2816]	; 0xb00
    6c94:	mov	r1, r4
    6c98:	bl	4674 <HV@plt>
    6c9c:	b	6cbc <btbb_decode_payload@@Base+0xec>
    6ca0:	ldr	r0, [r4, #2816]	; 0xb00
    6ca4:	mov	r1, r4
    6ca8:	bl	4860 <EV5@plt>
    6cac:	b	6cbc <btbb_decode_payload@@Base+0xec>
    6cb0:	ldr	r0, [r4, #2816]	; 0xb00
    6cb4:	mov	r1, r4
    6cb8:	bl	4620 <EV4@plt>
    6cbc:	ldr	r1, [r4, #4]
    6cc0:	orr	r1, r1, #128	; 0x80
    6cc4:	str	r1, [r4, #4]
    6cc8:	pop	{r4, sl, fp, pc}

00006ccc <btbb_decode@@Base>:
    6ccc:	push	{r4, r5, fp, lr}
    6cd0:	add	fp, sp, #8
    6cd4:	mov	r4, r0
    6cd8:	ldr	r0, [r0, #4]
    6cdc:	bic	r0, r0, #128	; 0x80
    6ce0:	str	r0, [r4, #4]
    6ce4:	mov	r0, r4
    6ce8:	bl	4770 <btbb_decode_header@plt>
    6cec:	cmp	r0, #0
    6cf0:	beq	6d2c <btbb_decode@@Base+0x60>
    6cf4:	mov	r0, r4
    6cf8:	bl	489c <btbb_decode_payload@plt>
    6cfc:	mov	r5, r0
    6d00:	cmp	r0, #1
    6d04:	blt	6d30 <btbb_decode@@Base+0x64>
    6d08:	ldr	r0, [r4, #2816]	; 0xb00
    6d0c:	mov	r2, r5
    6d10:	and	r1, r0, #63	; 0x3f
    6d14:	ldr	r0, [pc, #28]	; 6d38 <btbb_decode@@Base+0x6c>
    6d18:	add	r0, pc, r0
    6d1c:	bl	4590 <printf@plt>
    6d20:	mov	r0, r4
    6d24:	bl	48c0 <btbb_print_packet@plt>
    6d28:	b	6d30 <btbb_decode@@Base+0x64>
    6d2c:	mov	r5, #0
    6d30:	mov	r0, r5
    6d34:	pop	{r4, r5, fp, pc}
    6d38:	andeq	r7, r0, r7, lsl #12
    6d3c:	nop	{0}

00006d40 <btbb_print_packet@@Base>:
    6d40:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
    6d44:	add	fp, sp, #24
    6d48:	vpush	{d8-d9}
    6d4c:	sub	sp, sp, #8
    6d50:	mov	r4, r0
    6d54:	ldrb	r0, [r0, #4]
    6d58:	tst	r0, #128	; 0x80
    6d5c:	beq	6ec4 <btbb_print_packet@@Base+0x184>
    6d60:	ldrb	r0, [r4, #18]
    6d64:	ldr	r1, [pc, #388]	; 6ef0 <btbb_print_packet@@Base+0x1b0>
    6d68:	add	r1, pc, r1
    6d6c:	ldr	r1, [r1, r0, lsl #2]
    6d70:	ldr	r0, [pc, #380]	; 6ef4 <btbb_print_packet@@Base+0x1b4>
    6d74:	add	r0, pc, r0
    6d78:	bl	4590 <printf@plt>
    6d7c:	ldr	r0, [r4, #40]	; 0x28
    6d80:	cmp	r0, #0
    6d84:	ble	6dd0 <btbb_print_packet@@Base+0x90>
    6d88:	ldrb	r1, [r4, #19]
    6d8c:	ldr	r0, [pc, #356]	; 6ef8 <btbb_print_packet@@Base+0x1b8>
    6d90:	add	r0, pc, r0
    6d94:	bl	4590 <printf@plt>
    6d98:	ldrb	r1, [r4, #60]	; 0x3c
    6d9c:	ldr	r0, [pc, #344]	; 6efc <btbb_print_packet@@Base+0x1bc>
    6da0:	add	r0, pc, r0
    6da4:	bl	4590 <printf@plt>
    6da8:	ldrb	r1, [r4, #61]	; 0x3d
    6dac:	ldr	r0, [pc, #332]	; 6f00 <btbb_print_packet@@Base+0x1c0>
    6db0:	add	r0, pc, r0
    6db4:	bl	4590 <printf@plt>
    6db8:	mov	r5, r4
    6dbc:	ldr	r1, [r5, #64]!	; 0x40
    6dc0:	ldr	r0, [pc, #316]	; 6f04 <btbb_print_packet@@Base+0x1c4>
    6dc4:	add	r0, pc, r0
    6dc8:	bl	4590 <printf@plt>
    6dcc:	b	6dd4 <btbb_print_packet@@Base+0x94>
    6dd0:	add	r5, r4, #64	; 0x40
    6dd4:	ldr	r0, [r5]
    6dd8:	cmp	r0, #0
    6ddc:	beq	6ec4 <btbb_print_packet@@Base+0x184>
    6de0:	ldr	r0, [pc, #288]	; 6f08 <btbb_print_packet@@Base+0x1c8>
    6de4:	add	r0, pc, r0
    6de8:	bl	4590 <printf@plt>
    6dec:	ldr	r0, [r5]
    6df0:	cmp	r0, #1
    6df4:	blt	6eb0 <btbb_print_packet@@Base+0x170>
    6df8:	ldr	r8, [pc, #268]	; 6f0c <btbb_print_packet@@Base+0x1cc>
    6dfc:	add	r6, r4, #68	; 0x44
    6e00:	mov	r7, #0
    6e04:	mov	r4, sp
    6e08:	vmov.i32	q4, #8	; 0x00000008
    6e0c:	add	r8, pc, r8
    6e10:	add	r0, pc, #184	; 0xb8
    6e14:	add	r1, pc, #196	; 0xc4
    6e18:	vmov.i32	d16, #0	; 0x00000000
    6e1c:	vld1.64	{d20-d21}, [r0]
    6e20:	vld1.64	{d18-d19}, [r1]
    6e24:	mov	r0, #0
    6e28:	mov	r1, r6
    6e2c:	ldr	r2, [r1, r0]!
    6e30:	add	r0, r0, #8
    6e34:	cmp	r0, #8
    6e38:	str	r2, [sp]
    6e3c:	ldr	r1, [r1, #4]
    6e40:	str	r1, [sp, #4]
    6e44:	vld1.8	{d17}, [r4 :64]
    6e48:	vmovl.u8	q11, d17
    6e4c:	vmovl.u16	q12, d23
    6e50:	vmovl.u16	q11, d22
    6e54:	vshl.u32	q12, q12, q9
    6e58:	vshl.u32	q11, q11, q10
    6e5c:	vadd.i32	q10, q10, q4
    6e60:	vadd.i32	q9, q9, q4
    6e64:	vmovn.i32	d25, q12
    6e68:	vmovn.i32	d24, q11
    6e6c:	vmovn.i16	d17, q12
    6e70:	vorr	d16, d16, d17
    6e74:	bne	6e28 <btbb_print_packet@@Base+0xe8>
    6e78:	vext.8	d17, d16, d16, #4
    6e7c:	mov	r0, r8
    6e80:	vorr	d16, d16, d17
    6e84:	vext.8	d17, d16, d16, #2
    6e88:	vorr	d16, d16, d17
    6e8c:	vdup.8	d17, d16[1]
    6e90:	vorr	d16, d16, d17
    6e94:	vmov.u8	r1, d16[0]
    6e98:	bl	4590 <printf@plt>
    6e9c:	ldr	r0, [r5]
    6ea0:	add	r7, r7, #1
    6ea4:	add	r6, r6, #8
    6ea8:	cmp	r7, r0
    6eac:	blt	6e10 <btbb_print_packet@@Base+0xd0>
    6eb0:	mov	r0, #10
    6eb4:	sub	sp, fp, #40	; 0x28
    6eb8:	vpop	{d8-d9}
    6ebc:	pop	{r4, r5, r6, r7, r8, sl, fp, lr}
    6ec0:	b	47f4 <putchar@plt>
    6ec4:	sub	sp, fp, #40	; 0x28
    6ec8:	vpop	{d8-d9}
    6ecc:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
    6ed0:	andeq	r0, r0, r0
    6ed4:	andeq	r0, r0, r1
    6ed8:	andeq	r0, r0, r2
    6edc:	andeq	r0, r0, r3
    6ee0:	andeq	r0, r0, r4
    6ee4:	andeq	r0, r0, r5
    6ee8:	andeq	r0, r0, r6
    6eec:	andeq	r0, r0, r7
    6ef0:	andeq	lr, r1, r0, rrx
    6ef4:	ldrdeq	r7, [r0], -r5
    6ef8:	andeq	r7, r0, r5, asr #11
    6efc:	andeq	r7, r0, r4, asr #11
    6f00:	andeq	r7, r0, r0, asr #11
    6f04:			; <UNDEFINED> instruction: 0x000075b8
    6f08:	andeq	r7, r0, sl, lsr #24
    6f0c:	andeq	r7, r0, fp, lsl #29

00006f10 <tun_format@@Base>:
    6f10:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
    6f14:	add	fp, sp, #24
    6f18:	sub	sp, sp, #16
    6f1c:	ldr	r8, [r0, #64]	; 0x40
    6f20:	mov	r7, r0
    6f24:	add	r0, r8, #9
    6f28:	bl	46f8 <malloc@plt>
    6f2c:	ldr	r1, [r7, #2816]	; 0xb00
    6f30:	mov	r3, #0
    6f34:	lsr	r2, r1, #8
    6f38:	strb	r1, [r0]
    6f3c:	strb	r2, [r0, #1]
    6f40:	lsr	r2, r1, #16
    6f44:	lsr	r1, r1, #24
    6f48:	strb	r2, [r0, #2]
    6f4c:	strb	r1, [r0, #3]
    6f50:	ldrb	r1, [r7, #8]
    6f54:	strb	r1, [r0, #4]
    6f58:	ldr	r1, [r7, #4]
    6f5c:	and	r2, r1, #2
    6f60:	ubfx	r1, r1, #5, #1
    6f64:	orr	r1, r1, r2
    6f68:	add	r2, r7, #22
    6f6c:	strb	r1, [r0, #5]
    6f70:	mov	r1, #0
    6f74:	ldrb	r4, [r2, r3]
    6f78:	orr	r1, r1, r4, lsl r3
    6f7c:	add	r3, r3, #1
    6f80:	cmp	r3, #7
    6f84:	bne	6f74 <tun_format@@Base+0x64>
    6f88:	strb	r1, [r0, #6]
    6f8c:	add	r1, r7, #29
    6f90:	mov	r2, #0
    6f94:	mov	r3, #0
    6f98:	ldrb	r4, [r1, r3]
    6f9c:	orr	r2, r2, r4, lsl r3
    6fa0:	add	r3, r3, #1
    6fa4:	cmp	r3, #3
    6fa8:	bne	6f98 <tun_format@@Base+0x88>
    6fac:	add	r3, pc, #332	; 0x14c
    6fb0:	add	r4, pc, #344	; 0x158
    6fb4:	strb	r2, [r0, #7]
    6fb8:	add	r6, r7, #32
    6fbc:	vmov.i32	d16, #0	; 0x00000000
    6fc0:	mov	r2, #0
    6fc4:	vmov.i32	q11, #8	; 0x00000008
    6fc8:	vld1.64	{d20-d21}, [r3]
    6fcc:	vld1.64	{d18-d19}, [r4]
    6fd0:	add	r3, sp, #8
    6fd4:	mov	r1, r6
    6fd8:	ldr	r4, [r1, r2]!
    6fdc:	add	r2, r2, #8
    6fe0:	cmp	r2, #8
    6fe4:	str	r4, [sp, #8]
    6fe8:	ldr	r1, [r1, #4]
    6fec:	str	r1, [sp, #12]
    6ff0:	vld1.8	{d17}, [r3 :64]
    6ff4:	vmovl.u8	q12, d17
    6ff8:	vmovl.u16	q13, d25
    6ffc:	vmovl.u16	q12, d24
    7000:	vshl.u32	q13, q13, q9
    7004:	vshl.u32	q12, q12, q10
    7008:	vadd.i32	q10, q10, q11
    700c:	vadd.i32	q9, q9, q11
    7010:	vmovn.i32	d27, q13
    7014:	vmovn.i32	d26, q12
    7018:	vmovn.i16	d17, q13
    701c:	vorr	d16, d16, d17
    7020:	bne	6fd4 <tun_format@@Base+0xc4>
    7024:	vext.8	d17, d16, d16, #4
    7028:	cmp	r8, #1
    702c:	add	r1, r0, #8
    7030:	vorr	d16, d16, d17
    7034:	vext.8	d17, d16, d16, #2
    7038:	vorr	d16, d16, d17
    703c:	vdup.8	d17, d16[1]
    7040:	vorr	d16, d16, d17
    7044:	vst1.8	{d16[0]}, [r1]
    7048:	blt	70f8 <tun_format@@Base+0x1e8>
    704c:	add	r5, r7, #68	; 0x44
    7050:	mov	r2, #0
    7054:	mov	r3, sp
    7058:	vmov.i32	q8, #8	; 0x00000008
    705c:	add	r7, pc, #156	; 0x9c
    7060:	add	r6, pc, #168	; 0xa8
    7064:	vmov.i32	d18, #0	; 0x00000000
    7068:	mov	r4, #0
    706c:	vld1.64	{d20-d21}, [r6]
    7070:	vld1.64	{d22-d23}, [r7]
    7074:	mov	r1, r5
    7078:	ldr	r7, [r1, r4]!
    707c:	add	r4, r4, #8
    7080:	cmp	r4, #8
    7084:	str	r7, [sp]
    7088:	ldr	r1, [r1, #4]
    708c:	str	r1, [sp, #4]
    7090:	vld1.8	{d19}, [r3 :64]
    7094:	vmovl.u8	q12, d19
    7098:	vmovl.u16	q13, d25
    709c:	vmovl.u16	q12, d24
    70a0:	vshl.u32	q13, q13, q10
    70a4:	vshl.u32	q12, q12, q11
    70a8:	vadd.i32	q11, q11, q8
    70ac:	vadd.i32	q10, q10, q8
    70b0:	vmovn.i32	d27, q13
    70b4:	vmovn.i32	d26, q12
    70b8:	vmovn.i16	d19, q13
    70bc:	vorr	d18, d18, d19
    70c0:	bne	7074 <tun_format@@Base+0x164>
    70c4:	vext.8	d19, d18, d16, #4
    70c8:	add	r1, r0, r2
    70cc:	add	r2, r2, #1
    70d0:	add	r5, r5, #8
    70d4:	vorr	d18, d18, d19
    70d8:	cmp	r2, r8
    70dc:	add	r1, r1, #9
    70e0:	vext.8	d19, d18, d16, #2
    70e4:	vorr	d18, d18, d19
    70e8:	vdup.8	d19, d18[1]
    70ec:	vorr	d18, d18, d19
    70f0:	vst1.8	{d18[0]}, [r1]
    70f4:	bne	705c <tun_format@@Base+0x14c>
    70f8:	sub	sp, fp, #24
    70fc:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
    7100:	andeq	r0, r0, r0
    7104:	andeq	r0, r0, r1
    7108:	andeq	r0, r0, r2
    710c:	andeq	r0, r0, r3
    7110:	andeq	r0, r0, r4
    7114:	andeq	r0, r0, r5
    7118:	andeq	r0, r0, r6
    711c:	andeq	r0, r0, r7

00007120 <btbb_header_present@@Base>:
    7120:	movw	r1, #2822	; 0xb06
    7124:	ldrh	r2, [r0, r1]
    7128:	mov	r1, #0
    712c:	cmp	r2, #122	; 0x7a
    7130:	bcc	71bc <btbb_header_present@@Base+0x9c>
    7134:	push	{r4, sl, fp, lr}
    7138:	add	fp, sp, #8
    713c:	ldrb	r1, [r0, #2887]	; 0xb47
    7140:	ldrb	ip, [r0, #2888]	; 0xb48
    7144:	ldrb	lr, [r0, #2889]	; 0xb49
    7148:	ldrb	r2, [r0, #2890]	; 0xb4a
    714c:	clz	r3, r1
    7150:	lsr	r3, r3, #5
    7154:	eor	r4, r2, r3
    7158:	eor	r3, ip, r3
    715c:	eor	r2, lr, r1
    7160:	uxtab	r2, r3, r2
    7164:	ldrb	r3, [r0, #2891]	; 0xb4b
    7168:	add	r2, r2, r4
    716c:	eor	r1, r3, r1
    7170:	uxtab	r2, r2, r1
    7174:	mov	r1, #0
    7178:	add	r3, r0, r1
    717c:	add	r1, r1, #3
    7180:	ldrb	ip, [r3, #2892]	; 0xb4c
    7184:	ldrb	r4, [r3, #2893]	; 0xb4d
    7188:	ldrb	r3, [r3, #2894]	; 0xb4e
    718c:	cmp	r1, #54	; 0x36
    7190:	eor	lr, r4, ip
    7194:	eor	r4, r3, r4
    7198:	eor	r3, r3, ip
    719c:	orr	r4, r4, lr
    71a0:	orr	r3, r4, r3
    71a4:	uxtab	r2, r2, r3
    71a8:	bcc	7178 <btbb_header_present@@Base+0x58>
    71ac:	mov	r1, #0
    71b0:	cmp	r2, #5
    71b4:	movwlt	r1, #1
    71b8:	pop	{r4, sl, fp, lr}
    71bc:	mov	r0, r1
    71c0:	bx	lr
    71c4:	nop	{0}

000071c8 <lap_from_fhs@@Base>:
    71c8:	sub	sp, sp, #4
    71cc:	add	r1, pc, #92	; 0x5c
    71d0:	vmov.i32	q8, #0	; 0x00000000
    71d4:	add	r0, r0, #102	; 0x66
    71d8:	mov	r2, sp
    71dc:	vmov.i32	q10, #4	; 0x00000004
    71e0:	vld1.64	{d18-d19}, [r1]
    71e4:	mov	r1, #0
    71e8:	ldr	r3, [r0, r1]
    71ec:	add	r1, r1, #4
    71f0:	cmp	r1, #24
    71f4:	str	r3, [sp]
    71f8:	vld1.32	{d22[0]}, [r2 :32]
    71fc:	vmovl.u8	q11, d22
    7200:	vmovl.u16	q11, d22
    7204:	vshl.u32	q11, q11, q9
    7208:	vadd.i32	q9, q9, q10
    720c:	vorr	q8, q11, q8
    7210:	bne	71e8 <lap_from_fhs@@Base+0x20>
    7214:	vext.8	q9, q8, q8, #8
    7218:	vorr	q8, q8, q9
    721c:	vdup.32	q9, d16[1]
    7220:	vorr	q8, q8, q9
    7224:	vmov.32	r0, d16[0]
    7228:	add	sp, sp, #4
    722c:	bx	lr
    7230:	andeq	r0, r0, r0
    7234:	andeq	r0, r0, r1
    7238:	andeq	r0, r0, r2
    723c:	andeq	r0, r0, r3

00007240 <uap_from_fhs@@Base>:
    7240:	sub	sp, sp, #8
    7244:	add	r1, pc, #148	; 0x94
    7248:	add	r2, pc, #160	; 0xa0
    724c:	add	r0, r0, #132	; 0x84
    7250:	vmov.i32	d16, #0	; 0x00000000
    7254:	mov	ip, sp
    7258:	vmov.i32	q11, #8	; 0x00000008
    725c:	vld1.64	{d20-d21}, [r1]
    7260:	vld1.64	{d18-d19}, [r2]
    7264:	mov	r1, #0
    7268:	mov	r3, r0
    726c:	ldr	r2, [r3, r1]!
    7270:	add	r1, r1, #8
    7274:	cmp	r1, #8
    7278:	str	r2, [sp]
    727c:	ldr	r2, [r3, #4]
    7280:	str	r2, [sp, #4]
    7284:	vld1.8	{d17}, [ip :64]
    7288:	vmovl.u8	q12, d17
    728c:	vmovl.u16	q13, d25
    7290:	vmovl.u16	q12, d24
    7294:	vshl.u32	q13, q13, q9
    7298:	vshl.u32	q12, q12, q10
    729c:	vadd.i32	q10, q10, q11
    72a0:	vadd.i32	q9, q9, q11
    72a4:	vmovn.i32	d27, q13
    72a8:	vmovn.i32	d26, q12
    72ac:	vmovn.i16	d17, q13
    72b0:	vorr	d16, d16, d17
    72b4:	bne	7268 <uap_from_fhs@@Base+0x28>
    72b8:	vext.8	d17, d16, d16, #4
    72bc:	vorr	d16, d16, d17
    72c0:	vext.8	d17, d16, d16, #2
    72c4:	vorr	d16, d16, d17
    72c8:	vdup.8	d17, d16[1]
    72cc:	vorr	d16, d16, d17
    72d0:	vmov.u8	r0, d16[0]
    72d4:	add	sp, sp, #8
    72d8:	bx	lr
    72dc:	nop	{0}
    72e0:	andeq	r0, r0, r0
    72e4:	andeq	r0, r0, r1
    72e8:	andeq	r0, r0, r2
    72ec:	andeq	r0, r0, r3
    72f0:	andeq	r0, r0, r4
    72f4:	andeq	r0, r0, r5
    72f8:	andeq	r0, r0, r6
    72fc:	andeq	r0, r0, r7

00007300 <nap_from_fhs@@Base>:
    7300:	sub	sp, sp, #8
    7304:	add	r1, pc, #140	; 0x8c
    7308:	add	r2, pc, #152	; 0x98
    730c:	add	r0, r0, #140	; 0x8c
    7310:	vmov.i32	q8, #0	; 0x00000000
    7314:	mov	ip, sp
    7318:	vmov.i32	q11, #8	; 0x00000008
    731c:	vld1.64	{d20-d21}, [r1]
    7320:	vld1.64	{d18-d19}, [r2]
    7324:	mov	r1, #0
    7328:	mov	r3, r0
    732c:	ldr	r2, [r3, r1]!
    7330:	add	r1, r1, #8
    7334:	cmp	r1, #16
    7338:	str	r2, [sp]
    733c:	ldr	r2, [r3, #4]
    7340:	str	r2, [sp, #4]
    7344:	vld1.8	{d24}, [ip :64]
    7348:	vmovl.u8	q12, d24
    734c:	vmovl.u16	q13, d25
    7350:	vmovl.u16	q12, d24
    7354:	vshl.u32	q13, q13, q9
    7358:	vshl.u32	q12, q12, q10
    735c:	vadd.i32	q10, q10, q11
    7360:	vadd.i32	q9, q9, q11
    7364:	vmovn.i32	d27, q13
    7368:	vmovn.i32	d26, q12
    736c:	vorr	q8, q8, q13
    7370:	bne	7328 <nap_from_fhs@@Base+0x28>
    7374:	vext.8	q9, q8, q8, #8
    7378:	vorr	q8, q8, q9
    737c:	vext.8	q9, q8, q8, #4
    7380:	vorr	q8, q8, q9
    7384:	vdup.16	q9, d16[1]
    7388:	vorr	q8, q8, q9
    738c:	vmov.u16	r0, d16[0]
    7390:	add	sp, sp, #8
    7394:	bx	lr
    7398:	andeq	r0, r0, r0
    739c:	andeq	r0, r0, r1
    73a0:	andeq	r0, r0, r2
    73a4:	andeq	r0, r0, r3
    73a8:	andeq	r0, r0, r4
    73ac:	andeq	r0, r0, r5
    73b0:	andeq	r0, r0, r6
    73b4:	andeq	r0, r0, r7

000073b8 <clock_from_fhs@@Base>:
    73b8:	add	r1, r0, #183	; 0xb7
    73bc:	mov	r0, #0
    73c0:	mov	r2, #0
    73c4:	ldrb	r3, [r1, r2]
    73c8:	orr	r0, r0, r3, lsl r2
    73cc:	add	r2, r2, #1
    73d0:	cmp	r2, #26
    73d4:	bne	73c4 <clock_from_fhs@@Base+0xc>
    73d8:	bx	lr
    73dc:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
    73e0:	add	fp, sp, #28
    73e4:	sub	sp, sp, #4
    73e8:	vpush	{d8-d9}
    73ec:	sub	sp, sp, #24
    73f0:	cmp	r2, #57	; 0x39
    73f4:	str	r1, [sp, #16]
    73f8:	bgt	7870 <clock_from_fhs@@Base+0x4b8>
    73fc:	sub	r6, r3, #1
    7400:	mov	r8, r0
    7404:	mov	r9, #0
    7408:	vmov.i32	q4, #0	; 0x00000000
    740c:	str	r0, [sp, #12]
    7410:	str	r6, [sp, #8]
    7414:	mov	r7, r2
    7418:	mov	r2, #1
    741c:	sub	r1, r7, #32
    7420:	lsl	r0, r2, r7
    7424:	str	r7, [sp, #20]
    7428:	cmp	r1, #0
    742c:	movwge	r0, #0
    7430:	orr	r4, r0, r8
    7434:	rsb	r0, r7, #32
    7438:	lsr	r0, r2, r0
    743c:	lslge	r0, r2, r1
    7440:	ldr	r1, [sp, #16]
    7444:	cmp	r6, #0
    7448:	orr	r5, r0, r1
    744c:	beq	7468 <clock_from_fhs@@Base+0xb0>
    7450:	add	r2, r7, #1
    7454:	mov	r0, r4
    7458:	mov	r1, r5
    745c:	mov	r3, r6
    7460:	bl	73dc <clock_from_fhs@@Base+0x24>
    7464:	b	7860 <clock_from_fhs@@Base+0x4a8>
    7468:	mov	r0, #48	; 0x30
    746c:	bl	46f8 <malloc@plt>
    7470:	mov	r8, r0
    7474:	str	r5, [r0, #12]
    7478:	str	r9, [r0, #24]
    747c:	mov	r0, #8
    7480:	movw	ip, #2040	; 0x7f8
    7484:	str	r0, [r8, #40]	; 0x28
    7488:	movw	r0, #29288	; 0x7268
    748c:	add	lr, r8, #16
    7490:	ldr	r2, [pc, #1008]	; 7888 <clock_from_fhs@@Base+0x4d0>
    7494:	ldr	r6, [pc, #1008]	; 788c <clock_from_fhs@@Base+0x4d4>
    7498:	movt	r0, #52347	; 0xcc7b
    749c:	str	r4, [r8, #8]
    74a0:	eor	r0, r5, r0
    74a4:	ldr	r5, [pc, #996]	; 7890 <clock_from_fhs@@Base+0x4d8>
    74a8:	uxtb	r3, r0
    74ac:	and	r1, ip, r0, lsr #5
    74b0:	add	r6, pc, r6
    74b4:	add	r2, pc, r2
    74b8:	ldr	r3, [r6, r3, lsl #3]!
    74bc:	ldr	r1, [r2, r1]!
    74c0:	add	r5, pc, r5
    74c4:	eor	r3, r3, r4
    74c8:	eor	r1, r3, r1
    74cc:	and	r3, ip, r0, lsr #13
    74d0:	and	r0, ip, r0, lsr #21
    74d4:	ldr	r3, [r5, r3]!
    74d8:	eor	r1, r1, r3
    74dc:	ldr	r3, [pc, #944]	; 7894 <clock_from_fhs@@Base+0x4dc>
    74e0:	add	r3, pc, r3
    74e4:	ldr	r0, [r3, r0]!
    74e8:	eor	r0, r1, r0
    74ec:	movw	r1, #19995	; 0x4e1b
    74f0:	movt	r1, #65377	; 0xff61
    74f4:	eor	r0, r0, r1
    74f8:	ldr	r1, [r6, #4]
    74fc:	str	r0, [r8]
    7500:	ldr	r0, [r2, #4]
    7504:	eor	r0, r1, r0
    7508:	ldr	r1, [r5, #4]
    750c:	eor	r0, r0, r1
    7510:	ldr	r1, [r3, #4]
    7514:	eor	r0, r0, r1
    7518:	str	r0, [r8, #4]
    751c:	str	r8, [r8, #36]	; 0x24
    7520:	ldr	r0, [pc, #880]	; 7898 <clock_from_fhs@@Base+0x4e0>
    7524:	ldr	r0, [pc, r0]
    7528:	cmp	r0, #0
    752c:	beq	7550 <clock_from_fhs@@Base+0x198>
    7530:	ldr	r4, [r0, #16]!
    7534:	ldr	r1, [r4, #16]
    7538:	str	r8, [r1, #8]
    753c:	ldr	r2, [r4, #20]
    7540:	sub	r1, r1, r2
    7544:	str	r1, [r8, #20]
    7548:	str	lr, [r4, #16]
    754c:	b	75dc <clock_from_fhs@@Base+0x224>
    7550:	ldr	r0, [pc, #836]	; 789c <clock_from_fhs@@Base+0x4e4>
    7554:	mov	r5, lr
    7558:	str	r9, [r8, #20]
    755c:	add	r0, pc, r0
    7560:	str	r8, [r0]
    7564:	mov	r0, #44	; 0x2c
    7568:	bl	46f8 <malloc@plt>
    756c:	cmp	r0, #0
    7570:	str	r0, [r8, #16]
    7574:	beq	7880 <clock_from_fhs@@Base+0x4c8>
    7578:	mov	r4, r0
    757c:	add	r0, r0, #12
    7580:	vst1.32	{d8-d9}, [r0]
    7584:	mov	r0, #32
    7588:	str	r0, [r4, #4]
    758c:	mov	r0, #5
    7590:	str	r0, [r4, #8]
    7594:	add	r0, r4, #28
    7598:	vst1.32	{d8-d9}, [r0]
    759c:	mov	r0, #16
    75a0:	str	r5, [r4, #16]
    75a4:	str	r0, [r4, #20]
    75a8:	mov	r0, #384	; 0x180
    75ac:	bl	46f8 <malloc@plt>
    75b0:	cmp	r0, #0
    75b4:	str	r0, [r4]
    75b8:	beq	7880 <clock_from_fhs@@Base+0x4c8>
    75bc:	mov	r1, #0
    75c0:	mov	r2, #384	; 0x180
    75c4:	bl	47e8 <memset@plt>
    75c8:	movw	r0, #8161	; 0x1fe1
    75cc:	mov	lr, r5
    75d0:	movt	r0, #40977	; 0xa011
    75d4:	str	r0, [r4, #40]	; 0x28
    75d8:	mov	r0, r5
    75dc:	ldr	r1, [r4, #12]
    75e0:	movw	r2, #31161	; 0x79b9
    75e4:	movw	r3, #47810	; 0xbac2
    75e8:	movt	r2, #40503	; 0x9e37
    75ec:	movt	r3, #40777	; 0x9f49
    75f0:	add	r1, r1, #1
    75f4:	str	r1, [r4, #12]
    75f8:	ldrb	r4, [r8, #3]
    75fc:	ldr	r1, [r8, #4]
    7600:	ldrb	r5, [r8, #2]
    7604:	ldrb	r6, [r8, #1]
    7608:	ldrb	ip, [r8]
    760c:	ldr	sl, [r0]
    7610:	add	r2, r1, r2
    7614:	add	r4, r3, r4, lsl #24
    7618:	add	r1, r1, r3
    761c:	movw	r3, #48887	; 0xbef7
    7620:	str	sl, [r8, #16]
    7624:	sub	r2, r4, r2
    7628:	movt	r3, #65261	; 0xfeed
    762c:	add	r2, r2, r5, lsl #16
    7630:	add	r2, r2, r6, lsl #8
    7634:	movw	r6, #63341	; 0xf76d
    7638:	add	r2, r2, ip
    763c:	movt	r6, #7
    7640:	eor	r2, r2, r6
    7644:	sub	r1, r1, r2
    7648:	sub	r3, r3, r2
    764c:	eor	r1, r1, r2, lsl #8
    7650:	sub	r3, r3, r1
    7654:	sub	r2, r2, r1
    7658:	eor	r3, r3, r1, lsr #13
    765c:	sub	r2, r2, r3
    7660:	sub	r1, r1, r3
    7664:	eor	r2, r2, r3, lsr #12
    7668:	sub	r1, r1, r2
    766c:	sub	r3, r3, r2
    7670:	eor	r1, r1, r2, lsl #16
    7674:	sub	r3, r3, r1
    7678:	sub	r2, r2, r1
    767c:	eor	r3, r3, r1, lsr #5
    7680:	sub	r2, r2, r3
    7684:	sub	r1, r1, r3
    7688:	eor	r2, r2, r3, lsr #3
    768c:	sub	r1, r1, r2
    7690:	eor	r1, r1, r2, lsl #10
    7694:	sub	r2, r3, r2
    7698:	sub	r2, r2, r1
    769c:	eor	r1, r2, r1, lsr #15
    76a0:	str	r1, [r8, #44]	; 0x2c
    76a4:	ldr	r2, [r0]
    76a8:	ldm	r2, {r0, r2}
    76ac:	sub	r2, r2, #1
    76b0:	mov	r3, r0
    76b4:	and	r1, r1, r2
    76b8:	add	r2, r1, r1, lsl #1
    76bc:	ldr	r6, [r3, r2, lsl #2]!
    76c0:	add	r0, r0, r2, lsl #2
    76c4:	mov	r2, #10
    76c8:	ldr	r1, [r3, #4]
    76cc:	cmp	r6, #0
    76d0:	add	r1, r1, #1
    76d4:	str	r1, [r3, #4]
    76d8:	str	r9, [r8, #28]
    76dc:	str	r6, [r8, #32]
    76e0:	strne	lr, [r6, #12]
    76e4:	str	lr, [r3]
    76e8:	ldr	r8, [sp, #12]
    76ec:	ldr	r6, [sp, #8]
    76f0:	ldr	r0, [r0, #8]
    76f4:	add	r0, r0, r0, lsl #2
    76f8:	add	r0, r2, r0, lsl #1
    76fc:	cmp	r1, r0
    7700:	bcc	7860 <clock_from_fhs@@Base+0x4a8>
    7704:	ldr	r0, [sl, #36]	; 0x24
    7708:	cmp	r0, #1
    770c:	beq	7860 <clock_from_fhs@@Base+0x4a8>
    7710:	ldr	r0, [sl, #4]
    7714:	str	lr, [sp, #4]
    7718:	add	r0, r0, r0, lsl #1
    771c:	lsl	r0, r0, #3
    7720:	bl	46f8 <malloc@plt>
    7724:	cmp	r0, #0
    7728:	beq	7880 <clock_from_fhs@@Base+0x4c8>
    772c:	mov	r8, r0
    7730:	ldr	r0, [sl, #4]
    7734:	mov	r1, #0
    7738:	add	r0, r0, r0, lsl #1
    773c:	lsl	r2, r0, #3
    7740:	mov	r0, r8
    7744:	bl	47e8 <memset@plt>
    7748:	str	r9, [sl, #28]
    774c:	mvn	r2, #0
    7750:	mov	r6, #1
    7754:	ldm	sl, {r0, ip}
    7758:	ldr	r1, [sl, #8]
    775c:	ldr	r7, [sl, #12]
    7760:	add	r1, r1, #1
    7764:	add	r2, r2, ip, lsl #1
    7768:	lsr	r3, r7, r1
    776c:	tst	r2, r7
    7770:	addne	r3, r6, r7, lsr r1
    7774:	cmp	ip, #0
    7778:	str	r3, [sl, #24]
    777c:	beq	7800 <clock_from_fhs@@Base+0x448>
    7780:	mov	r6, #0
    7784:	mov	lr, #0
    7788:	add	r1, lr, lr, lsl #1
    778c:	ldr	r1, [r0, r1, lsl #2]
    7790:	cmp	r1, #0
    7794:	beq	77f4 <clock_from_fhs@@Base+0x43c>
    7798:	ldr	r5, [r1, #28]
    779c:	ldr	r4, [r1, #16]
    77a0:	and	r5, r5, r2
    77a4:	add	r5, r5, r5, lsl #1
    77a8:	add	r5, r8, r5, lsl #2
    77ac:	ldr	r7, [r5, #4]
    77b0:	add	r9, r7, #1
    77b4:	cmp	r9, r3
    77b8:	str	r9, [r5, #4]
    77bc:	addhi	r6, r6, #1
    77c0:	udivhi	r7, r9, r3
    77c4:	mov	r9, #0
    77c8:	strhi	r6, [sl, #28]
    77cc:	strhi	r7, [r5, #8]
    77d0:	str	r9, [r1, #12]
    77d4:	ldr	r7, [r5]
    77d8:	cmp	r7, #0
    77dc:	str	r7, [r1, #16]
    77e0:	strne	r1, [r7, #12]
    77e4:	str	r1, [r5]
    77e8:	cmp	r4, #0
    77ec:	mov	r1, r4
    77f0:	bne	7798 <clock_from_fhs@@Base+0x3e0>
    77f4:	add	lr, lr, #1
    77f8:	cmp	lr, ip
    77fc:	bne	7788 <clock_from_fhs@@Base+0x3d0>
    7800:	bl	45d8 <free@plt>
    7804:	ldr	r0, [sp, #4]
    7808:	ldr	r0, [r0]
    780c:	str	r8, [r0]
    7810:	ldmib	r0, {r1, r2, r3}
    7814:	ldr	r7, [r0, #28]
    7818:	lsl	r1, r1, #1
    781c:	cmp	r7, r3, lsr #1
    7820:	str	r1, [r0, #4]
    7824:	add	r1, r2, #1
    7828:	str	r1, [r0, #8]
    782c:	bls	7854 <clock_from_fhs@@Base+0x49c>
    7830:	ldr	r1, [r0, #32]
    7834:	ldr	r8, [sp, #12]
    7838:	ldr	r6, [sp, #8]
    783c:	add	r1, r1, #1
    7840:	cmp	r1, #2
    7844:	str	r1, [r0, #32]
    7848:	movcs	r1, #1
    784c:	strcs	r1, [r0, #36]	; 0x24
    7850:	b	7860 <clock_from_fhs@@Base+0x4a8>
    7854:	ldr	r8, [sp, #12]
    7858:	ldr	r6, [sp, #8]
    785c:	str	r9, [r0, #32]
    7860:	ldr	r0, [sp, #20]
    7864:	add	r2, r0, #1
    7868:	cmp	r0, #57	; 0x39
    786c:	blt	7414 <clock_from_fhs@@Base+0x5c>
    7870:	sub	sp, fp, #48	; 0x30
    7874:	vpop	{d8-d9}
    7878:	add	sp, sp, #4
    787c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
    7880:	mvn	r0, #0
    7884:	bl	474c <exit@plt>
    7888:	andeq	r5, r0, r4, asr #10
    788c:	andeq	r4, r0, r8, asr #26
    7890:	andeq	r5, r0, r8, lsr sp
    7894:	andeq	r6, r0, r8, lsl r5
    7898:	andeq	lr, r1, r4, asr #24
    789c:	andeq	lr, r1, ip, lsl #24

000078a0 <count_bits@@Base>:
    78a0:	mov	r1, #0
    78a4:	cmp	r0, #0
    78a8:	beq	78c0 <count_bits@@Base+0x20>
    78ac:	sub	r2, r0, #1
    78b0:	add	r1, r1, #1
    78b4:	and	r0, r2, r0
    78b8:	tst	r0, #255	; 0xff
    78bc:	bne	78ac <count_bits@@Base+0xc>
    78c0:	mov	r0, r1
    78c4:	bx	lr

000078c8 <btbb_piconet_new@@Base>:
    78c8:	push	{r4, sl, fp, lr}
    78cc:	add	fp, sp, #8
    78d0:	mov	r0, #1
    78d4:	movw	r1, #5660	; 0x161c
    78d8:	mov	r4, #1
    78dc:	bl	4554 <calloc@plt>
    78e0:	str	r4, [r0]
    78e4:	pop	{r4, sl, fp, pc}

000078e8 <btbb_piconet_ref@@Base>:
    78e8:	ldr	r1, [r0]
    78ec:	add	r1, r1, #1
    78f0:	str	r1, [r0]
    78f4:	bx	lr

000078f8 <btbb_piconet_unref@@Base>:
    78f8:	ldr	r1, [r0]
    78fc:	subs	r1, r1, #1
    7900:	str	r1, [r0]
    7904:	bxne	lr
    7908:	b	45d8 <free@plt>

0000790c <btbb_init_survey@@Base>:
    790c:	ldr	r0, [pc, #16]	; 7924 <btbb_init_survey@@Base+0x18>
    7910:	mov	r1, #1
    7914:	add	r0, pc, r0
    7918:	strb	r1, [r0]
    791c:	mov	r0, #0
    7920:	bx	lr
    7924:	andeq	lr, r1, ip, asr r8

00007928 <btbb_init_piconet@@Base>:
    7928:	str	r1, [r0, #24]
    792c:	ldr	r1, [r0, #4]
    7930:	orr	r1, r1, #8
    7934:	str	r1, [r0, #4]
    7938:	bx	lr

0000793c <btbb_piconet_set_flag@@Base>:
    793c:	push	{fp, lr}
    7940:	mov	fp, sp
    7944:	ldr	lr, [r0, #4]
    7948:	mov	ip, #1
    794c:	cmp	r2, #0
    7950:	orr	r3, lr, ip, lsl r1
    7954:	biceq	r3, lr, ip, lsl r1
    7958:	str	r3, [r0, #4]
    795c:	pop	{fp, pc}

00007960 <btbb_piconet_get_flag@@Base>:
    7960:	ldr	r0, [r0, #4]
    7964:	mov	r2, #1
    7968:	and	r0, r0, r2, lsl r1
    796c:	cmp	r0, #0
    7970:	movwne	r0, #1
    7974:	bx	lr

00007978 <btbb_piconet_set_uap@@Base>:
    7978:	strb	r1, [r0, #28]
    797c:	ldr	r1, [r0, #4]
    7980:	orr	r1, r1, #4
    7984:	str	r1, [r0, #4]
    7988:	bx	lr

0000798c <btbb_piconet_get_uap@@Base>:
    798c:	ldrb	r0, [r0, #28]
    7990:	bx	lr

00007994 <btbb_piconet_get_lap@@Base>:
    7994:	ldr	r0, [r0, #24]
    7998:	bx	lr

0000799c <btbb_piconet_get_nap@@Base>:
    799c:	ldrh	r0, [r0, #30]
    79a0:	bx	lr

000079a4 <btbb_piconet_get_bdaddr@@Base>:
    79a4:	ldrb	r1, [r0, #28]
    79a8:	ldr	r2, [r0, #24]
    79ac:	orr	r2, r2, r1, lsl #24
    79b0:	ldrh	r1, [r0, #30]
    79b4:	mov	r0, r2
    79b8:	bx	lr

000079bc <btbb_piconet_get_clk_offset@@Base>:
    79bc:	movw	r1, #5648	; 0x1610
    79c0:	ldr	r0, [r0, r1]
    79c4:	bx	lr

000079c8 <btbb_piconet_set_clk_offset@@Base>:
    79c8:	movw	r2, #5648	; 0x1610
    79cc:	str	r1, [r0, r2]
    79d0:	bx	lr

000079d4 <btbb_piconet_set_afh_map@@Base>:
    79d4:	push	{fp, lr}
    79d8:	mov	fp, sp
    79dc:	mov	ip, #0
    79e0:	strb	ip, [r0, #22]
    79e4:	ldrb	r3, [r1, ip]
    79e8:	add	r2, r0, ip
    79ec:	mov	lr, #0
    79f0:	cmp	r3, #0
    79f4:	strb	r3, [r2, #12]
    79f8:	beq	7a14 <btbb_piconet_set_afh_map@@Base+0x40>
    79fc:	mov	lr, #0
    7a00:	sub	r2, r3, #1
    7a04:	add	lr, lr, #1
    7a08:	and	r3, r2, r3
    7a0c:	tst	r3, #255	; 0xff
    7a10:	bne	7a00 <btbb_piconet_set_afh_map@@Base+0x2c>
    7a14:	ldrb	r2, [r0, #22]
    7a18:	add	ip, ip, #1
    7a1c:	cmp	ip, #10
    7a20:	add	r2, r2, lr
    7a24:	strb	r2, [r0, #22]
    7a28:	bne	79e4 <btbb_piconet_set_afh_map@@Base+0x10>
    7a2c:	ldrb	r1, [r0, #4]
    7a30:	tst	r1, #4
    7a34:	popeq	{fp, pc}
    7a38:	pop	{fp, lr}
    7a3c:	b	7a40 <get_hop_pattern@@Base>

00007a40 <get_hop_pattern@@Base>:
    7a40:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
    7a44:	add	fp, sp, #28
    7a48:	sub	sp, sp, #20
    7a4c:	mov	r5, r0
    7a50:	ldrb	r0, [r0, #28]
    7a54:	mov	r3, #128	; 0x80
    7a58:	movw	r9, #63341	; 0xf76d
    7a5c:	movw	r7, #16653	; 0x410d
    7a60:	movw	r4, #47814	; 0xbac6
    7a64:	movw	sl, #48883	; 0xbef3
    7a68:	ldr	r1, [r5, #24]
    7a6c:	ldr	r2, [r5, #4]
    7a70:	movt	r9, #7
    7a74:	movt	r7, #274	; 0x112
    7a78:	movt	r4, #40777	; 0x9f49
    7a7c:	movt	sl, #65261	; 0xfeed
    7a80:	orr	r6, r1, r0, lsl #24
    7a84:	ldrb	r0, [r5, #22]
    7a88:	and	r2, r3, r2, lsr #4
    7a8c:	str	r6, [sp, #8]
    7a90:	orr	r8, r2, r0
    7a94:	str	r8, [sp, #12]
    7a98:	ldr	r0, [pc, #1088]	; 7ee0 <get_hop_pattern@@Base+0x4a0>
    7a9c:	ldr	r0, [pc, r0]
    7aa0:	cmp	r0, #0
    7aa4:	beq	7b74 <get_hop_pattern@@Base+0x134>
    7aa8:	and	r2, r6, #-16777216	; 0xff000000
    7aac:	and	r3, r1, #16711680	; 0xff0000
    7ab0:	ldr	r0, [r0, #12]
    7ab4:	add	r2, r2, r7
    7ab8:	add	r2, r2, r3
    7abc:	and	r3, r1, #65280	; 0xff00
    7ac0:	add	r2, r2, r3
    7ac4:	uxtab	r1, r2, r1
    7ac8:	eor	r1, r1, r9
    7acc:	sub	r2, r4, r1
    7ad0:	sub	r3, sl, r1
    7ad4:	eor	r2, r2, r1, lsl #8
    7ad8:	sub	r3, r3, r2
    7adc:	sub	r1, r1, r2
    7ae0:	eor	r3, r3, r2, lsr #13
    7ae4:	sub	r1, r1, r3
    7ae8:	sub	r2, r2, r3
    7aec:	eor	r1, r1, r3, lsr #12
    7af0:	sub	r2, r2, r1
    7af4:	sub	r3, r3, r1
    7af8:	eor	r2, r2, r1, lsl #16
    7afc:	sub	r3, r3, r2
    7b00:	sub	r1, r1, r2
    7b04:	eor	r3, r3, r2, lsr #5
    7b08:	sub	r1, r1, r3
    7b0c:	sub	r2, r2, r3
    7b10:	eor	r1, r1, r3, lsr #3
    7b14:	sub	r2, r2, r1
    7b18:	eor	r2, r2, r1, lsl #10
    7b1c:	sub	r1, r3, r1
    7b20:	sub	r1, r1, r2
    7b24:	eor	r1, r1, r2, lsr #15
    7b28:	ldm	r0, {r2, r3}
    7b2c:	sub	r3, r3, #1
    7b30:	and	r1, r1, r3
    7b34:	add	r1, r1, r1, lsl #1
    7b38:	ldr	r1, [r2, r1, lsl #2]
    7b3c:	b	7b64 <get_hop_pattern@@Base+0x124>
    7b40:	ldr	r1, [r4, #36]	; 0x24
    7b44:	cmp	r1, #4
    7b48:	bne	7b60 <get_hop_pattern@@Base+0x120>
    7b4c:	ldr	r1, [r4, #32]
    7b50:	ldr	r2, [sp, #8]
    7b54:	ldr	r1, [r1]
    7b58:	cmp	r1, r2
    7b5c:	beq	7ec0 <get_hop_pattern@@Base+0x480>
    7b60:	ldr	r1, [r4, #28]
    7b64:	cmp	r1, #0
    7b68:	ldrne	r2, [r0, #20]
    7b6c:	subsne	r4, r1, r2
    7b70:	bne	7b40 <get_hop_pattern@@Base+0x100>
    7b74:	mov	r0, r5
    7b78:	bl	456c <gen_hop_pattern@plt>
    7b7c:	mov	r0, #48	; 0x30
    7b80:	bl	46f8 <malloc@plt>
    7b84:	mov	r4, r0
    7b88:	ldr	r0, [r5, #372]	; 0x174
    7b8c:	mov	r1, #0
    7b90:	mov	r2, #4
    7b94:	str	r1, [r4, #20]
    7b98:	stm	r4, {r6, r8}
    7b9c:	add	r8, r4, #12
    7ba0:	str	r0, [r4, #8]
    7ba4:	str	r4, [r4, #32]
    7ba8:	str	r2, [r4, #36]	; 0x24
    7bac:	ldr	r0, [pc, #816]	; 7ee4 <get_hop_pattern@@Base+0x4a4>
    7bb0:	ldr	r0, [pc, r0]
    7bb4:	cmp	r0, #0
    7bb8:	beq	7bdc <get_hop_pattern@@Base+0x19c>
    7bbc:	ldr	r5, [r0, #12]!
    7bc0:	ldr	r1, [r5, #16]
    7bc4:	str	r4, [r1, #8]
    7bc8:	ldr	r2, [r5, #20]
    7bcc:	sub	r1, r1, r2
    7bd0:	str	r1, [r4, #16]
    7bd4:	str	r8, [r5, #16]
    7bd8:	b	7c60 <get_hop_pattern@@Base+0x220>
    7bdc:	ldr	r0, [pc, #772]	; 7ee8 <get_hop_pattern@@Base+0x4a8>
    7be0:	str	r1, [r4, #16]
    7be4:	add	r0, pc, r0
    7be8:	str	r4, [r0]
    7bec:	mov	r0, #44	; 0x2c
    7bf0:	bl	46f8 <malloc@plt>
    7bf4:	cmp	r0, #0
    7bf8:	str	r0, [r4, #12]
    7bfc:	beq	7ed8 <get_hop_pattern@@Base+0x498>
    7c00:	mov	r5, r0
    7c04:	vmov.i32	q8, #0	; 0x00000000
    7c08:	add	r0, r0, #12
    7c0c:	mov	r1, #5
    7c10:	vst1.32	{d16-d17}, [r0]
    7c14:	mov	r0, #32
    7c18:	stmib	r5, {r0, r1}
    7c1c:	add	r0, r5, #28
    7c20:	vst1.32	{d16-d17}, [r0]
    7c24:	mov	r0, #12
    7c28:	str	r8, [r5, #16]
    7c2c:	str	r0, [r5, #20]
    7c30:	mov	r0, #384	; 0x180
    7c34:	bl	46f8 <malloc@plt>
    7c38:	cmp	r0, #0
    7c3c:	str	r0, [r5]
    7c40:	beq	7ed8 <get_hop_pattern@@Base+0x498>
    7c44:	mov	r1, #0
    7c48:	mov	r2, #384	; 0x180
    7c4c:	bl	47e8 <memset@plt>
    7c50:	movw	r0, #8161	; 0x1fe1
    7c54:	movt	r0, #40977	; 0xa011
    7c58:	str	r0, [r5, #40]	; 0x28
    7c5c:	mov	r0, r8
    7c60:	ldr	r1, [r5, #12]
    7c64:	add	r1, r1, #1
    7c68:	str	r1, [r5, #12]
    7c6c:	ldr	r5, [r0]
    7c70:	str	r5, [r4, #12]
    7c74:	ldrb	r6, [r4, #3]
    7c78:	ldrb	r3, [r4, #2]
    7c7c:	ldrb	r2, [r4, #1]
    7c80:	ldrb	r1, [r4]
    7c84:	add	r7, r7, r6, lsl #24
    7c88:	mov	r6, #0
    7c8c:	add	r3, r7, r3, lsl #16
    7c90:	add	r2, r3, r2, lsl #8
    7c94:	add	r1, r2, r1
    7c98:	movw	r2, #47814	; 0xbac6
    7c9c:	eor	r1, r1, r9
    7ca0:	movt	r2, #40777	; 0x9f49
    7ca4:	sub	r2, r2, r1
    7ca8:	sub	r3, sl, r1
    7cac:	eor	r2, r2, r1, lsl #8
    7cb0:	sub	r3, r3, r2
    7cb4:	sub	r1, r1, r2
    7cb8:	eor	r3, r3, r2, lsr #13
    7cbc:	sub	r1, r1, r3
    7cc0:	sub	r2, r2, r3
    7cc4:	eor	r1, r1, r3, lsr #12
    7cc8:	sub	r2, r2, r1
    7ccc:	sub	r3, r3, r1
    7cd0:	eor	r2, r2, r1, lsl #16
    7cd4:	sub	r3, r3, r2
    7cd8:	sub	r1, r1, r2
    7cdc:	eor	r3, r3, r2, lsr #5
    7ce0:	sub	r1, r1, r3
    7ce4:	sub	r2, r2, r3
    7ce8:	eor	r1, r1, r3, lsr #3
    7cec:	sub	r2, r2, r1
    7cf0:	eor	r2, r2, r1, lsl #10
    7cf4:	sub	r1, r3, r1
    7cf8:	sub	r1, r1, r2
    7cfc:	eor	r1, r1, r2, lsr #15
    7d00:	str	r1, [r4, #40]	; 0x28
    7d04:	ldr	r2, [r0]
    7d08:	ldm	r2, {r0, r2}
    7d0c:	sub	r2, r2, #1
    7d10:	mov	r3, r0
    7d14:	and	r1, r1, r2
    7d18:	add	r2, r1, r1, lsl #1
    7d1c:	ldr	r7, [r3, r2, lsl #2]!
    7d20:	add	r0, r0, r2, lsl #2
    7d24:	mov	r2, #10
    7d28:	ldr	r1, [r3, #4]
    7d2c:	cmp	r7, #0
    7d30:	add	r1, r1, #1
    7d34:	str	r1, [r3, #4]
    7d38:	str	r6, [r4, #24]
    7d3c:	str	r7, [r4, #28]
    7d40:	strne	r8, [r7, #12]
    7d44:	str	r8, [r3]
    7d48:	ldr	r0, [r0, #8]
    7d4c:	add	r0, r0, r0, lsl #2
    7d50:	add	r0, r2, r0, lsl #1
    7d54:	cmp	r1, r0
    7d58:	bcc	7eb8 <get_hop_pattern@@Base+0x478>
    7d5c:	ldr	r0, [r5, #36]	; 0x24
    7d60:	cmp	r0, #1
    7d64:	beq	7eb8 <get_hop_pattern@@Base+0x478>
    7d68:	ldr	r0, [r5, #4]
    7d6c:	str	r8, [sp]
    7d70:	add	r0, r0, r0, lsl #1
    7d74:	lsl	r0, r0, #3
    7d78:	bl	46f8 <malloc@plt>
    7d7c:	cmp	r0, #0
    7d80:	beq	7ed8 <get_hop_pattern@@Base+0x498>
    7d84:	mov	r9, r0
    7d88:	ldr	r0, [r5, #4]
    7d8c:	mov	r1, #0
    7d90:	mov	sl, #0
    7d94:	add	r0, r0, r0, lsl #1
    7d98:	lsl	r2, r0, #3
    7d9c:	mov	r0, r9
    7da0:	bl	47e8 <memset@plt>
    7da4:	str	sl, [r5, #28]
    7da8:	mvn	r2, #0
    7dac:	mov	r6, #1
    7db0:	ldr	r0, [r5]
    7db4:	str	r0, [sp, #4]
    7db8:	ldmib	r5, {r0, r1, r7}
    7dbc:	add	r1, r1, #1
    7dc0:	add	r2, r2, r0, lsl #1
    7dc4:	lsr	r3, r7, r1
    7dc8:	tst	r2, r7
    7dcc:	addne	r3, r6, r7, lsr r1
    7dd0:	cmp	r0, #0
    7dd4:	str	r3, [r5, #24]
    7dd8:	beq	7e60 <get_hop_pattern@@Base+0x420>
    7ddc:	mov	ip, r5
    7de0:	mov	r6, #0
    7de4:	mov	lr, #0
    7de8:	ldr	r4, [sp, #4]
    7dec:	add	r1, lr, lr, lsl #1
    7df0:	ldr	r5, [r4, r1, lsl #2]
    7df4:	cmp	r5, #0
    7df8:	beq	7e54 <get_hop_pattern@@Base+0x414>
    7dfc:	ldr	r1, [r5, #28]
    7e00:	ldr	r7, [r5, #16]
    7e04:	and	r1, r1, r2
    7e08:	add	r1, r1, r1, lsl #1
    7e0c:	add	r1, r9, r1, lsl #2
    7e10:	ldr	r4, [r1, #4]
    7e14:	add	r8, r4, #1
    7e18:	cmp	r8, r3
    7e1c:	str	r8, [r1, #4]
    7e20:	addhi	r6, r6, #1
    7e24:	udivhi	r4, r8, r3
    7e28:	strhi	r6, [ip, #28]
    7e2c:	strhi	r4, [r1, #8]
    7e30:	str	sl, [r5, #12]
    7e34:	ldr	r4, [r1]
    7e38:	cmp	r4, #0
    7e3c:	str	r4, [r5, #16]
    7e40:	strne	r5, [r4, #12]
    7e44:	str	r5, [r1]
    7e48:	cmp	r7, #0
    7e4c:	mov	r5, r7
    7e50:	bne	7dfc <get_hop_pattern@@Base+0x3bc>
    7e54:	add	lr, lr, #1
    7e58:	cmp	lr, r0
    7e5c:	bne	7de8 <get_hop_pattern@@Base+0x3a8>
    7e60:	ldr	r0, [sp, #4]
    7e64:	bl	45d8 <free@plt>
    7e68:	ldr	r0, [sp]
    7e6c:	ldr	r0, [r0]
    7e70:	str	r9, [r0]
    7e74:	ldmib	r0, {r1, r2, r3}
    7e78:	ldr	r7, [r0, #28]
    7e7c:	lsl	r1, r1, #1
    7e80:	cmp	r7, r3, lsr #1
    7e84:	str	r1, [r0, #4]
    7e88:	add	r1, r2, #1
    7e8c:	str	r1, [r0, #8]
    7e90:	bls	7eb0 <get_hop_pattern@@Base+0x470>
    7e94:	ldr	r1, [r0, #32]
    7e98:	add	r1, r1, #1
    7e9c:	cmp	r1, #2
    7ea0:	str	r1, [r0, #32]
    7ea4:	movcs	r1, #1
    7ea8:	strcs	r1, [r0, #36]	; 0x24
    7eac:	b	7eb8 <get_hop_pattern@@Base+0x478>
    7eb0:	mov	r1, #0
    7eb4:	str	r1, [r0, #32]
    7eb8:	sub	sp, fp, #28
    7ebc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
    7ec0:	ldr	r0, [pc, #36]	; 7eec <get_hop_pattern@@Base+0x4ac>
    7ec4:	add	r0, pc, r0
    7ec8:	bl	46ec <puts@plt>
    7ecc:	ldr	r0, [r4, #8]
    7ed0:	str	r0, [r5, #372]	; 0x174
    7ed4:	b	7eb8 <get_hop_pattern@@Base+0x478>
    7ed8:	mvn	r0, #0
    7edc:	bl	474c <exit@plt>
    7ee0:	ldrdeq	lr, [r1], -r8
    7ee4:	andeq	lr, r1, r4, asr #11
    7ee8:	muleq	r1, r0, r5
    7eec:	andeq	r6, r0, r4, lsl #14

00007ef0 <btbb_piconet_get_afh_map@@Base>:
    7ef0:	add	r0, r0, #12
    7ef4:	bx	lr

00007ef8 <btbb_piconet_set_channel_seen@@Base>:
    7ef8:	push	{fp, lr}
    7efc:	mov	fp, sp
    7f00:	add	r2, r0, r1, lsr #3
    7f04:	and	lr, r1, #7
    7f08:	mov	ip, #1
    7f0c:	mov	r1, #0
    7f10:	ldrb	r3, [r2, #12]!
    7f14:	tst	r3, ip, lsl lr
    7f18:	bne	7f38 <btbb_piconet_set_channel_seen@@Base+0x40>
    7f1c:	lsl	r1, ip, lr
    7f20:	orr	r1, r3, r1
    7f24:	strb	r1, [r2]
    7f28:	ldrb	r1, [r0, #22]
    7f2c:	add	r1, r1, #1
    7f30:	strb	r1, [r0, #22]
    7f34:	mov	r1, #1
    7f38:	mov	r0, r1
    7f3c:	pop	{fp, pc}

00007f40 <btbb_piconet_clear_channel_seen@@Base>:
    7f40:	push	{fp, lr}
    7f44:	mov	fp, sp
    7f48:	mov	lr, r0
    7f4c:	and	ip, r1, #7
    7f50:	mov	r0, #1
    7f54:	add	r1, lr, r1, lsr #3
    7f58:	ldrb	r3, [r1, #12]!
    7f5c:	tst	r3, r0, lsl ip
    7f60:	moveq	r0, #0
    7f64:	popeq	{fp, pc}
    7f68:	lsl	r2, r0, ip
    7f6c:	bic	r2, r3, r2
    7f70:	strb	r2, [r1]
    7f74:	ldrb	r1, [lr, #22]
    7f78:	sub	r1, r1, #1
    7f7c:	strb	r1, [lr, #22]
    7f80:	pop	{fp, pc}

00007f84 <btbb_piconet_get_channel_seen@@Base>:
    7f84:	mov	r2, r0
    7f88:	mov	r0, #1
    7f8c:	cmp	r1, #78	; 0x4e
    7f90:	bxhi	lr
    7f94:	add	r0, r2, r1, lsr #3
    7f98:	and	r1, r1, #7
    7f9c:	mov	r2, #1
    7fa0:	ldrb	r0, [r0, #12]
    7fa4:	and	r0, r0, r2, lsl r1
    7fa8:	cmp	r0, #0
    7fac:	movwne	r0, #1
    7fb0:	bx	lr

00007fb4 <precalc@@Base>:
    7fb4:	push	{r4, r5, r6, sl, fp, lr}
    7fb8:	add	fp, sp, #16
    7fbc:	movw	lr, #29865	; 0x74a9
    7fc0:	mov	r1, #0
    7fc4:	mov	r3, #79	; 0x4f
    7fc8:	mov	ip, #1
    7fcc:	mov	r2, #0
    7fd0:	movt	lr, #53092	; 0xcf64
    7fd4:	lsl	r4, r1, #1
    7fd8:	uxtb	r4, r4
    7fdc:	umull	r5, r6, r4, lr
    7fe0:	lsr	r5, r6, #6
    7fe4:	mls	r4, r5, r3, r4
    7fe8:	ldrb	r5, [r0, #5]
    7fec:	tst	r5, #8
    7ff0:	bne	7ffc <precalc@@Base+0x48>
    7ff4:	mov	r5, r1
    7ff8:	b	801c <precalc@@Base+0x68>
    7ffc:	add	r5, r0, r4, lsr #3
    8000:	and	r6, r4, #7
    8004:	ldrb	r5, [r5, #12]
    8008:	tst	r5, ip, lsl r6
    800c:	beq	8024 <precalc@@Base+0x70>
    8010:	add	r6, r2, #1
    8014:	mov	r5, r2
    8018:	mov	r2, r6
    801c:	add	r5, r0, r5, lsl #2
    8020:	str	r4, [r5, #56]	; 0x38
    8024:	add	r1, r1, #1
    8028:	cmp	r1, #79	; 0x4f
    802c:	popeq	{r4, r5, r6, sl, fp, pc}
    8030:	b	7fd4 <precalc@@Base+0x20>

00008034 <address_precalc@@Base>:
    8034:	push	{r4, r5, fp, lr}
    8038:	add	fp, sp, #8
    803c:	ubfx	r2, r0, #19, #4
    8040:	mov	ip, #8
    8044:	mov	lr, #16
    8048:	and	r4, r0, #1
    804c:	str	r2, [r1, #36]	; 0x24
    8050:	ubfx	r2, r0, #23, #5
    8054:	and	r3, lr, r0, asr #4
    8058:	str	r2, [r1, #44]	; 0x2c
    805c:	ubfx	r2, r0, #10, #9
    8060:	str	r2, [r1, #52]	; 0x34
    8064:	and	r2, ip, r0, asr #3
    8068:	orr	r2, r2, r4
    806c:	orr	r2, r2, r3
    8070:	mov	r3, #4
    8074:	and	r4, r3, r0, asr #2
    8078:	and	r3, r3, r0, asr #3
    807c:	orr	r2, r2, r4
    8080:	mov	r4, #2
    8084:	and	r5, r4, r0, asr #1
    8088:	orr	r2, r2, r5
    808c:	mov	r5, #64	; 0x40
    8090:	str	r2, [r1, #48]	; 0x30
    8094:	mov	r2, #32
    8098:	and	r5, r5, r0, lsr #7
    809c:	and	r2, r2, r0, lsr #6
    80a0:	orr	r2, r5, r2
    80a4:	and	r5, lr, r0, lsr #5
    80a8:	orr	r2, r2, r5
    80ac:	and	r5, ip, r0, asr #4
    80b0:	orr	r2, r2, r5
    80b4:	orr	r2, r2, r3
    80b8:	and	r3, r4, r0, asr #2
    80bc:	orr	r2, r2, r3
    80c0:	mov	r3, #1
    80c4:	and	r0, r3, r0, asr #1
    80c8:	orr	r0, r2, r0
    80cc:	str	r0, [r1, #40]	; 0x28
    80d0:	pop	{r4, r5, fp, pc}

000080d4 <perm5@@Base>:
    80d4:	push	{r4, r5, r6, sl, fp, lr}
    80d8:	add	fp, sp, #16
    80dc:	sub	sp, sp, #76	; 0x4c
    80e0:	mov	r3, #0
    80e4:	mov	ip, #1
    80e8:	mov	lr, sp
    80ec:	and	r4, ip, r2, lsr r3
    80f0:	str	r4, [lr, r3, lsl #2]
    80f4:	add	r3, r3, #1
    80f8:	cmp	r3, #9
    80fc:	bne	80ec <perm5@@Base+0x18>
    8100:	add	r2, lr, #36	; 0x24
    8104:	mov	r3, #0
    8108:	mov	ip, #1
    810c:	and	r4, ip, r1, lsr r3
    8110:	str	r4, [r2, r3, lsl #2]
    8114:	add	r3, r3, #1
    8118:	cmp	r3, #5
    811c:	bne	810c <perm5@@Base+0x38>
    8120:	mov	r2, #0
    8124:	mov	r3, #1
    8128:	sub	r1, fp, #36	; 0x24
    812c:	and	r4, r3, r0, lsr r2
    8130:	str	r4, [r1, r2, lsl #2]
    8134:	add	r2, r2, #1
    8138:	cmp	r2, #5
    813c:	bne	812c <perm5@@Base+0x58>
    8140:	ldr	ip, [pc, #96]	; 81a8 <perm5@@Base+0xd4>
    8144:	ldr	r2, [pc, #96]	; 81ac <perm5@@Base+0xd8>
    8148:	mov	r0, #13
    814c:	add	ip, pc, ip
    8150:	add	r2, pc, r2
    8154:	ldr	r3, [lr, r0, lsl #2]
    8158:	cmp	r3, #0
    815c:	beq	8178 <perm5@@Base+0xa4>
    8160:	ldr	r3, [ip, r0, lsl #2]
    8164:	ldr	r5, [r2, r0, lsl #2]
    8168:	ldr	r4, [r1, r3, lsl #2]
    816c:	ldr	r6, [r1, r5, lsl #2]
    8170:	str	r6, [r1, r3, lsl #2]
    8174:	str	r4, [r1, r5, lsl #2]
    8178:	sub	r0, r0, #1
    817c:	cmn	r0, #1
    8180:	bne	8154 <perm5@@Base+0x80>
    8184:	mov	r0, #0
    8188:	mov	r2, #0
    818c:	ldr	r3, [r1, r2, lsl #2]
    8190:	add	r0, r0, r3, lsl r2
    8194:	add	r2, r2, #1
    8198:	cmp	r2, #5
    819c:	bne	818c <perm5@@Base+0xb8>
    81a0:	sub	sp, fp, #16
    81a4:	pop	{r4, r5, r6, sl, fp, pc}
    81a8:	andeq	r6, r0, r8, lsl #6
    81ac:	andeq	r6, r0, ip, lsr r3

000081b0 <perm_table_init@@Base>:
    81b0:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
    81b4:	add	fp, sp, #24
    81b8:	ldr	r8, [pc, #84]	; 8214 <perm_table_init@@Base+0x64>
    81bc:	mov	r4, #0
    81c0:	ldr	r8, [pc, r8]
    81c4:	mov	r7, r8
    81c8:	mov	r5, #0
    81cc:	mov	r6, #0
    81d0:	mov	r0, r4
    81d4:	mov	r1, r5
    81d8:	mov	r2, r6
    81dc:	bl	4848 <perm5@plt>
    81e0:	strb	r0, [r7, r6]
    81e4:	add	r6, r6, #1
    81e8:	cmp	r6, #512	; 0x200
    81ec:	bne	81d0 <perm_table_init@@Base+0x20>
    81f0:	add	r5, r5, #1
    81f4:	add	r7, r7, #512	; 0x200
    81f8:	cmp	r5, #32
    81fc:	bne	81cc <perm_table_init@@Base+0x1c>
    8200:	add	r4, r4, #1
    8204:	add	r8, r8, #16384	; 0x4000
    8208:	cmp	r4, #32
    820c:	popeq	{r4, r5, r6, r7, r8, sl, fp, pc}
    8210:	b	81c4 <perm_table_init@@Base+0x14>
    8214:	andeq	sp, r1, r8, lsl #31

00008218 <fast_perm@@Base>:
    8218:	push	{r4, r5, r6, r7, fp, lr}
    821c:	add	fp, sp, #16
    8220:	ldr	r7, [pc, #60]	; 8264 <fast_perm@@Base+0x4c>
    8224:	mov	r6, r0
    8228:	mov	r4, r2
    822c:	mov	r5, r1
    8230:	ldr	r7, [pc, r7]
    8234:	ldr	r0, [r7]
    8238:	cmp	r0, #0
    823c:	bne	824c <fast_perm@@Base+0x34>
    8240:	bl	468c <perm_table_init@plt>
    8244:	mov	r0, #1
    8248:	str	r0, [r7]
    824c:	ldr	r0, [pc, #20]	; 8268 <fast_perm@@Base+0x50>
    8250:	ldr	r0, [pc, r0]
    8254:	add	r0, r0, r6, lsl #14
    8258:	add	r0, r0, r5, lsl #9
    825c:	ldrb	r0, [r0, r4]
    8260:	pop	{r4, r5, r6, r7, fp, pc}
    8264:	andeq	sp, r1, ip, lsl pc
    8268:	strdeq	sp, [r1], -r8

0000826c <gen_hop_pattern@@Base>:
    826c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
    8270:	add	fp, sp, #28
    8274:	sub	sp, sp, #68	; 0x44
    8278:	mov	r4, r0
    827c:	ldr	r0, [pc, #720]	; 8554 <gen_hop_pattern@@Base+0x2e8>
    8280:	add	r0, pc, r0
    8284:	bl	46ec <puts@plt>
    8288:	mov	r0, #134217728	; 0x8000000
    828c:	bl	46f8 <malloc@plt>
    8290:	str	r0, [r4, #372]	; 0x174
    8294:	mov	r0, r4
    8298:	bl	4890 <precalc@plt>
    829c:	ldrb	r0, [r4, #28]
    82a0:	ldr	r1, [r4, #24]
    82a4:	orr	r0, r1, r0, lsl #24
    82a8:	mov	r1, r4
    82ac:	bic	r0, r0, #-268435456	; 0xf0000000
    82b0:	bl	47dc <address_precalc@plt>
    82b4:	ldr	r3, [pc, #668]	; 8558 <gen_hop_pattern@@Base+0x2ec>
    82b8:	mov	r7, #0
    82bc:	mov	r5, #0
    82c0:	mov	r1, #0
    82c4:	mov	r2, #0
    82c8:	ldr	r3, [pc, r3]
    82cc:	str	r7, [fp, #-36]	; 0xffffffdc
    82d0:	mov	r7, #0
    82d4:	str	r7, [fp, #-32]	; 0xffffffe0
    82d8:	mov	r7, #0
    82dc:	str	r2, [sp, #4]
    82e0:	str	r5, [sp, #12]
    82e4:	str	r1, [sp, #8]
    82e8:	ldr	r0, [r4, #44]	; 0x2c
    82ec:	str	r7, [sp, #16]
    82f0:	eor	r0, r0, r7
    82f4:	mov	r7, #0
    82f8:	str	r0, [sp, #40]	; 0x28
    82fc:	str	r5, [sp, #24]
    8300:	str	r1, [sp, #20]
    8304:	ldr	r0, [r4, #48]	; 0x30
    8308:	str	r7, [sp, #36]	; 0x24
    830c:	eor	r0, r0, r7
    8310:	mov	r7, r1
    8314:	str	r0, [fp, #-40]	; 0xffffffd8
    8318:	eor	r0, r0, #31
    831c:	str	r0, [fp, #-44]	; 0xffffffd4
    8320:	str	r5, [sp, #32]
    8324:	str	r1, [sp, #28]
    8328:	mov	r1, #0
    832c:	str	r7, [sp, #48]	; 0x30
    8330:	ldr	r0, [r4, #52]	; 0x34
    8334:	str	r1, [sp, #44]	; 0x2c
    8338:	mov	r8, #0
    833c:	ldr	r6, [sp, #40]	; 0x28
    8340:	eor	r9, r0, r1
    8344:	asr	r0, r6, #31
    8348:	ldr	r1, [r4, #36]	; 0x24
    834c:	add	r0, r6, r0, lsr #27
    8350:	bic	r0, r0, #31
    8354:	sub	r0, r6, r0
    8358:	eor	r7, r0, r1
    835c:	ldr	r0, [r3]
    8360:	cmp	r0, #0
    8364:	bne	837c <gen_hop_pattern@@Base+0x110>
    8368:	bl	468c <perm_table_init@plt>
    836c:	ldr	r3, [pc, #488]	; 855c <gen_hop_pattern@@Base+0x2f0>
    8370:	mov	r0, #1
    8374:	ldr	r3, [pc, r3]
    8378:	str	r0, [r3]
    837c:	ldr	r0, [pc, #476]	; 8560 <gen_hop_pattern@@Base+0x2f4>
    8380:	ldr	r0, [pc, r0]
    8384:	ldr	r1, [r4, #40]	; 0x28
    8388:	add	sl, r0, r7, lsl #14
    838c:	ldr	r0, [fp, #-40]	; 0xffffffd8
    8390:	add	r0, sl, r0, lsl #9
    8394:	ldrb	r0, [r0, r9]
    8398:	add	r0, r1, r0
    839c:	ldrb	r1, [r4, #5]
    83a0:	tst	r1, #8
    83a4:	bne	83cc <gen_hop_pattern@@Base+0x160>
    83a8:	ldr	r1, [fp, #-32]	; 0xffffffe0
    83ac:	add	r0, r0, r1
    83b0:	movw	r1, #29865	; 0x74a9
    83b4:	movt	r1, #53092	; 0xcf64
    83b8:	umull	r1, r2, r0, r1
    83bc:	lsr	r1, r2, #6
    83c0:	mov	r2, #79	; 0x4f
    83c4:	mls	r0, r1, r2, r0
    83c8:	b	83e0 <gen_hop_pattern@@Base+0x174>
    83cc:	ldr	r1, [fp, #-36]	; 0xffffffdc
    83d0:	add	r0, r0, r1
    83d4:	ldrb	r1, [r4, #22]
    83d8:	udiv	r2, r0, r1
    83dc:	mls	r0, r2, r1, r0
    83e0:	ldr	r1, [r4, #372]	; 0x174
    83e4:	add	r0, r4, r0, lsl #2
    83e8:	ldr	r0, [r0, #56]	; 0x38
    83ec:	add	r1, r1, r5
    83f0:	strb	r0, [r1, r8]
    83f4:	ldr	r0, [r3]
    83f8:	cmp	r0, #0
    83fc:	bne	8414 <gen_hop_pattern@@Base+0x1a8>
    8400:	bl	468c <perm_table_init@plt>
    8404:	ldr	r3, [pc, #344]	; 8564 <gen_hop_pattern@@Base+0x2f8>
    8408:	mov	r0, #1
    840c:	ldr	r3, [pc, r3]
    8410:	str	r0, [r3]
    8414:	ldr	r0, [fp, #-44]	; 0xffffffd4
    8418:	ldr	r1, [r4, #40]	; 0x28
    841c:	add	r0, sl, r0, lsl #9
    8420:	ldrb	r0, [r0, r9]
    8424:	add	r0, r0, r1
    8428:	ldrb	r1, [r4, #5]
    842c:	add	r0, r0, #32
    8430:	tst	r1, #8
    8434:	bne	845c <gen_hop_pattern@@Base+0x1f0>
    8438:	ldr	r1, [fp, #-32]	; 0xffffffe0
    843c:	add	r0, r0, r1
    8440:	movw	r1, #29865	; 0x74a9
    8444:	movt	r1, #53092	; 0xcf64
    8448:	umull	r1, r2, r0, r1
    844c:	lsr	r1, r2, #6
    8450:	mov	r2, #79	; 0x4f
    8454:	mls	r0, r1, r2, r0
    8458:	b	8470 <gen_hop_pattern@@Base+0x204>
    845c:	ldr	r1, [fp, #-36]	; 0xffffffdc
    8460:	add	r0, r0, r1
    8464:	ldrb	r1, [r4, #22]
    8468:	udiv	r2, r0, r1
    846c:	mls	r0, r2, r1, r0
    8470:	ldr	r1, [r4, #372]	; 0x174
    8474:	add	r0, r4, r0, lsl #2
    8478:	add	r6, r6, #1
    847c:	ldr	r0, [r0, #56]	; 0x38
    8480:	add	r1, r1, r5
    8484:	add	r1, r1, r8
    8488:	add	r8, r8, #2
    848c:	cmp	r8, #64	; 0x40
    8490:	strb	r0, [r1, #1]
    8494:	bne	8344 <gen_hop_pattern@@Base+0xd8>
    8498:	ldr	r7, [sp, #48]	; 0x30
    849c:	movw	r0, #29865	; 0x74a9
    84a0:	add	r5, r5, #64	; 0x40
    84a4:	movt	r0, #53092	; 0xcf64
    84a8:	add	r7, r7, #16
    84ac:	umull	r0, r1, r7, r0
    84b0:	lsr	r0, r1, #6
    84b4:	mov	r1, #79	; 0x4f
    84b8:	mls	r2, r0, r1, r7
    84bc:	ldrb	r0, [r4, #22]
    84c0:	str	r2, [fp, #-32]	; 0xffffffe0
    84c4:	udiv	r1, r2, r0
    84c8:	mls	r0, r1, r0, r2
    84cc:	str	r0, [fp, #-36]	; 0xffffffdc
    84d0:	ldr	r1, [sp, #44]	; 0x2c
    84d4:	add	r1, r1, #1
    84d8:	cmp	r1, #512	; 0x200
    84dc:	bne	832c <gen_hop_pattern@@Base+0xc0>
    84e0:	ldr	r7, [sp, #36]	; 0x24
    84e4:	ldr	r5, [sp, #32]
    84e8:	ldr	r1, [sp, #28]
    84ec:	add	r7, r7, #1
    84f0:	add	r5, r5, #32768	; 0x8000
    84f4:	add	r1, r1, #8192	; 0x2000
    84f8:	cmp	r7, #32
    84fc:	bne	8304 <gen_hop_pattern@@Base+0x98>
    8500:	ldr	r7, [sp, #16]
    8504:	ldr	r5, [sp, #24]
    8508:	ldr	r1, [sp, #20]
    850c:	add	r7, r7, #1
    8510:	add	r5, r5, #1048576	; 0x100000
    8514:	add	r1, r1, #262144	; 0x40000
    8518:	cmp	r7, #32
    851c:	bne	82e8 <gen_hop_pattern@@Base+0x7c>
    8520:	ldr	r2, [sp, #4]
    8524:	ldr	r5, [sp, #12]
    8528:	ldr	r1, [sp, #8]
    852c:	add	r2, r2, #1
    8530:	add	r5, r5, #33554432	; 0x2000000
    8534:	add	r1, r1, #8388608	; 0x800000
    8538:	cmp	r2, #4
    853c:	bne	82d8 <gen_hop_pattern@@Base+0x6c>
    8540:	ldr	r0, [pc, #32]	; 8568 <gen_hop_pattern@@Base+0x2fc>
    8544:	add	r0, pc, r0
    8548:	sub	sp, fp, #28
    854c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
    8550:	b	46ec <puts@plt>
    8554:	andeq	r6, r0, r8, ror r3
    8558:	andeq	sp, r1, r4, lsl #29
    855c:	ldrdeq	sp, [r1], -r8
    8560:	andeq	sp, r1, r8, asr #27
    8564:	andeq	sp, r1, r0, asr #26
    8568:	andeq	r6, r0, r4, ror #1

0000856c <single_hop@@Base>:
    856c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
    8570:	add	fp, sp, #28
    8574:	sub	sp, sp, #4
    8578:	mov	r4, r1
    857c:	mov	r5, r0
    8580:	ldr	r0, [r1, #36]	; 0x24
    8584:	ldr	r1, [r1, #44]	; 0x2c
    8588:	movw	ip, #65520	; 0xfff0
    858c:	ldr	r2, [r4, #48]	; 0x30
    8590:	ldr	r3, [r4, #52]	; 0x34
    8594:	ubfx	r6, r5, #1, #1
    8598:	ldr	r8, [pc, #168]	; 8648 <single_hop@@Base+0xdc>
    859c:	movt	ip, #511	; 0x1ff
    85a0:	rsb	r7, r6, r6, lsl #5
    85a4:	eor	r1, r1, r5, lsr #21
    85a8:	ldr	r8, [pc, r8]
    85ac:	add	r1, r1, r5, lsr #2
    85b0:	eor	r2, r2, r5, lsr #16
    85b4:	and	r1, r1, #31
    85b8:	and	r2, r2, #31
    85bc:	eor	sl, r1, r0
    85c0:	eor	r9, r2, r7
    85c4:	eor	r7, r3, r5, lsr #7
    85c8:	bfc	r7, #9, #23
    85cc:	ldr	r0, [r8]
    85d0:	cmp	r0, #0
    85d4:	bne	85ec <single_hop@@Base+0x80>
    85d8:	bl	468c <perm_table_init@plt>
    85dc:	movw	ip, #65520	; 0xfff0
    85e0:	mov	r0, #1
    85e4:	movt	ip, #511	; 0x1ff
    85e8:	str	r0, [r8]
    85ec:	ldr	r2, [pc, #88]	; 864c <single_hop@@Base+0xe0>
    85f0:	and	r1, ip, r5, lsr #3
    85f4:	lsl	r0, r6, #5
    85f8:	ldr	r2, [pc, r2]
    85fc:	add	r2, r2, sl, lsl #14
    8600:	add	r2, r2, r9, lsl #9
    8604:	ldrb	r3, [r2, r7]
    8608:	ldrb	r7, [r4, #5]
    860c:	mov	r2, #79	; 0x4f
    8610:	tst	r7, #8
    8614:	add	r0, r0, r3
    8618:	ldrbne	r2, [r4, #22]
    861c:	udiv	r7, r1, r2
    8620:	mls	r1, r7, r2, r1
    8624:	add	r0, r0, r1
    8628:	ldr	r1, [r4, #40]	; 0x28
    862c:	add	r0, r0, r1
    8630:	udiv	r1, r0, r2
    8634:	mls	r0, r1, r2, r0
    8638:	add	r0, r4, r0, lsl #2
    863c:	ldrb	r0, [r0, #56]	; 0x38
    8640:	sub	sp, fp, #28
    8644:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
    8648:	andeq	sp, r1, r4, lsr #23
    864c:	andeq	sp, r1, r0, asr fp

00008650 <hop@@Base>:
    8650:	ldr	r1, [r1, #372]	; 0x174
    8654:	ldrb	r0, [r1, r0]
    8658:	bx	lr

0000865c <btbb_init_hop_reversal@@Base>:
    865c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
    8660:	add	fp, sp, #28
    8664:	sub	sp, sp, #4
    8668:	mov	r8, r0
    866c:	mov	r0, r1
    8670:	mov	sl, r1
    8674:	bl	46e0 <get_hop_pattern@plt>
    8678:	movw	r0, #15728	; 0x3d70
    867c:	cmp	r8, #0
    8680:	movt	r0, #10
    8684:	movweq	r0, #15760	; 0x3d90
    8688:	movteq	r0, #3
    868c:	bl	46f8 <malloc@plt>
    8690:	str	r0, [sl, #32]
    8694:	movw	r1, #5648	; 0x1610
    8698:	movw	r2, #5652	; 0x1614
    869c:	movw	r9, #65472	; 0xffc0
    86a0:	movw	ip, #34079	; 0x851f
    86a4:	mov	lr, #25
    86a8:	ldr	r1, [sl, r1]
    86ac:	ldr	r2, [sl, r2]
    86b0:	ldr	r5, [sl, #372]	; 0x174
    86b4:	movt	r9, #2047	; 0x7ff
    86b8:	movt	ip, #20971	; 0x51eb
    86bc:	add	r1, r2, r1
    86c0:	and	r3, r1, #63	; 0x3f
    86c4:	movw	r1, #4648	; 0x1228
    86c8:	ldrb	r2, [sl, r1]
    86cc:	mov	r1, #0
    86d0:	ldr	r6, [sl, #8]
    86d4:	ldrb	r7, [r5, r3]
    86d8:	cmp	r6, #0
    86dc:	addne	r6, r7, #24
    86e0:	umullne	r7, r4, r6, ip
    86e4:	lsrne	r4, r4, #3
    86e8:	mlsne	r4, r4, lr, r6
    86ec:	addne	r7, r4, #26
    86f0:	uxtb	r4, r7
    86f4:	cmp	r4, r2
    86f8:	add	r4, r3, #64	; 0x40
    86fc:	streq	r3, [r0, r1, lsl #2]
    8700:	addeq	r1, r1, #1
    8704:	cmp	r3, r9
    8708:	mov	r3, r4
    870c:	bcc	86d0 <btbb_init_hop_reversal@@Base+0x74>
    8710:	mov	r0, #0
    8714:	movw	r3, #56799	; 0xdddf
    8718:	cmp	r8, #0
    871c:	str	r0, [sl, #388]	; 0x184
    8720:	str	r1, [sl, #376]	; 0x178
    8724:	mov	r0, #8704	; 0x2200
    8728:	movt	r3, #65535	; 0xffff
    872c:	ldr	r2, [sl, #4]
    8730:	movweq	r0, #512	; 0x200
    8734:	and	r2, r2, r3
    8738:	orr	r0, r2, r0
    873c:	str	r0, [sl, #4]
    8740:	ldr	r0, [pc, #16]	; 8758 <btbb_init_hop_reversal@@Base+0xfc>
    8744:	add	r0, pc, r0
    8748:	bl	4590 <printf@plt>
    874c:	ldr	r0, [sl, #376]	; 0x178
    8750:	sub	sp, fp, #28
    8754:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
    8758:	andeq	r5, r0, r0, lsl #27

0000875c <try_hop@@Base>:
    875c:	push	{r4, r5, r6, r7, fp, lr}
    8760:	add	fp, sp, #16
    8764:	ldrb	r6, [r1, #28]
    8768:	mov	r4, r1
    876c:	mov	r5, r0
    8770:	bl	46c8 <btbb_decode@plt>
    8774:	ldr	r7, [r4, #4]
    8778:	tst	r7, #512	; 0x200
    877c:	bne	87c0 <try_hop@@Base+0x64>
    8780:	mov	r0, r5
    8784:	mov	r1, r4
    8788:	bl	4608 <btbb_uap_from_header@plt>
    878c:	tst	r7, #16
    8790:	bne	8810 <try_hop@@Base+0xb4>
    8794:	cmp	r0, #0
    8798:	beq	883c <try_hop@@Base+0xe0>
    879c:	ldrb	r0, [r4, #28]
    87a0:	cmp	r6, r0
    87a4:	bne	8854 <try_hop@@Base+0xf8>
    87a8:	mov	r0, #0
    87ac:	mov	r1, r4
    87b0:	bl	48d8 <btbb_init_hop_reversal@plt>
    87b4:	mov	r0, r4
    87b8:	bl	46d4 <btbb_winnow@plt>
    87bc:	b	883c <try_hop@@Base+0xe0>
    87c0:	movw	r1, #5652	; 0x1614
    87c4:	ldr	r0, [r4, #380]	; 0x17c
    87c8:	ldr	r2, [r5, #2816]	; 0xb00
    87cc:	ldr	r1, [r4, r1]
    87d0:	add	r0, r4, r0, lsl #2
    87d4:	sub	r1, r2, r1
    87d8:	movw	r2, #4648	; 0x1228
    87dc:	str	r1, [r0, #648]	; 0x288
    87e0:	ldr	r0, [r4, #380]	; 0x17c
    87e4:	ldrb	r1, [r5, #8]
    87e8:	add	r0, r4, r0
    87ec:	strb	r1, [r0, r2]
    87f0:	ldr	r0, [r4, #380]	; 0x17c
    87f4:	ldr	r1, [r4, #384]	; 0x180
    87f8:	add	r0, r0, #1
    87fc:	add	r1, r1, #1
    8800:	str	r0, [r4, #380]	; 0x17c
    8804:	mov	r0, r4
    8808:	str	r1, [r4, #384]	; 0x180
    880c:	bl	46d4 <btbb_winnow@plt>
    8810:	ldrb	r0, [r4, #4]
    8814:	tst	r0, #32
    8818:	beq	883c <try_hop@@Base+0xe0>
    881c:	ldr	r0, [pc, #64]	; 8864 <try_hop@@Base+0x108>
    8820:	add	r0, pc, r0
    8824:	bl	46ec <puts@plt>
    8828:	movw	r0, #5648	; 0x1610
    882c:	ldr	r1, [r4, r0]
    8830:	ldr	r0, [pc, #48]	; 8868 <try_hop@@Base+0x10c>
    8834:	add	r0, pc, r0
    8838:	bl	4590 <printf@plt>
    883c:	ldr	r0, [r4, #4]
    8840:	tst	r0, #4
    8844:	orreq	r0, r0, #4
    8848:	strbeq	r6, [r4, #28]
    884c:	streq	r0, [r4, #4]
    8850:	pop	{r4, r5, r6, r7, fp, pc}
    8854:	ldr	r0, [pc, #16]	; 886c <try_hop@@Base+0x110>
    8858:	add	r0, pc, r0
    885c:	bl	46ec <puts@plt>
    8860:	b	883c <try_hop@@Base+0xe0>
    8864:	muleq	r0, r7, sp
    8868:	andeq	r5, r0, pc, lsr #25
    886c:	strdeq	r5, [r0], -r0

00008870 <btbb_winnow@@Base>:
    8870:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
    8874:	add	fp, sp, #28
    8878:	sub	sp, sp, #4
    887c:	mov	r9, r0
    8880:	ldr	r1, [r0, #376]	; 0x178
    8884:	ldr	r2, [r0, #380]	; 0x17c
    8888:	ldr	r0, [r0, #388]	; 0x184
    888c:	cmp	r0, r2
    8890:	bge	89cc <btbb_winnow@@Base+0x15c>
    8894:	cmp	r1, #1
    8898:	blt	89b4 <btbb_winnow@@Base+0x144>
    889c:	mov	r8, #25
    88a0:	add	r2, r9, r0
    88a4:	movw	r3, #4648	; 0x1228
    88a8:	add	r0, r9, r0, lsl #2
    88ac:	ldr	r5, [r9, #372]	; 0x174
    88b0:	mov	r6, #0
    88b4:	mov	r7, #0
    88b8:	ldrb	lr, [r2, r3]
    88bc:	ldr	ip, [r0, #648]	; 0x288
    88c0:	ldr	r3, [r9, #32]
    88c4:	ldr	r0, [r3, r7, lsl #2]
    88c8:	ldr	r2, [r9, #8]
    88cc:	add	r4, r0, ip
    88d0:	cmp	r2, #0
    88d4:	bic	r4, r4, #-134217728	; 0xf8000000
    88d8:	ldrb	r4, [r5, r4]
    88dc:	beq	88fc <btbb_winnow@@Base+0x8c>
    88e0:	add	r2, r4, #24
    88e4:	movw	r4, #34079	; 0x851f
    88e8:	movt	r4, #20971	; 0x51eb
    88ec:	umull	r4, sl, r2, r4
    88f0:	lsr	r4, sl, #3
    88f4:	mls	r2, r4, r8, r2
    88f8:	add	r4, r2, #26
    88fc:	uxtb	r2, r4
    8900:	add	r7, r7, #1
    8904:	cmp	r2, lr
    8908:	streq	r0, [r3, r6, lsl #2]
    890c:	addeq	r6, r6, #1
    8910:	ldreq	r1, [r9, #376]	; 0x178
    8914:	cmp	r7, r1
    8918:	blt	88c4 <btbb_winnow@@Base+0x54>
    891c:	cmp	r6, #0
    8920:	str	r6, [r9, #376]	; 0x178
    8924:	beq	89bc <btbb_winnow@@Base+0x14c>
    8928:	cmp	r6, #1
    892c:	beq	89dc <btbb_winnow@@Base+0x16c>
    8930:	cmp	r6, #2
    8934:	blt	89d0 <btbb_winnow@@Base+0x160>
    8938:	ldr	r1, [r9, #380]	; 0x17c
    893c:	cmp	r1, #1
    8940:	blt	8994 <btbb_winnow@@Base+0x124>
    8944:	ldr	r0, [r9, #388]	; 0x184
    8948:	movw	r3, #4648	; 0x1228
    894c:	sub	r0, r0, #1
    8950:	add	r2, r9, r0
    8954:	ldrb	r2, [r2, r3]
    8958:	cmp	lr, r2
    895c:	bne	8994 <btbb_winnow@@Base+0x124>
    8960:	add	r0, r9, r0, lsl #2
    8964:	ldr	r0, [r0, #648]	; 0x288
    8968:	add	r0, r0, #1
    896c:	cmp	ip, r0
    8970:	ldreq	r0, [r9, #4]
    8974:	andseq	r2, r0, #4096	; 0x1000
    8978:	bne	8994 <btbb_winnow@@Base+0x124>
    897c:	orr	r0, r0, #4096	; 0x1000
    8980:	str	r0, [r9, #4]
    8984:	ldr	r0, [pc, #148]	; 8a20 <btbb_winnow@@Base+0x1b0>
    8988:	add	r0, pc, r0
    898c:	bl	46ec <puts@plt>
    8990:	ldr	r1, [r9, #380]	; 0x17c
    8994:	ldr	r0, [r9, #388]	; 0x184
    8998:	add	r0, r0, #1
    899c:	cmp	r0, r1
    89a0:	str	r0, [r9, #388]	; 0x184
    89a4:	bge	89d0 <btbb_winnow@@Base+0x160>
    89a8:	ldr	r1, [r9, #376]	; 0x178
    89ac:	cmp	r1, #0
    89b0:	bgt	88a0 <btbb_winnow@@Base+0x30>
    89b4:	mov	r0, #0
    89b8:	str	r0, [r9, #376]	; 0x178
    89bc:	mov	r0, r9
    89c0:	bl	8ce4 <btbb_uap_from_header@@Base+0x2c0>
    89c4:	mov	r6, #0
    89c8:	b	89d0 <btbb_winnow@@Base+0x160>
    89cc:	mov	r6, r1
    89d0:	mov	r0, r6
    89d4:	sub	sp, fp, #28
    89d8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
    89dc:	movw	r0, #5652	; 0x1614
    89e0:	ldr	r1, [r3]
    89e4:	ldr	r0, [r9, r0]
    89e8:	sub	r0, r1, r0
    89ec:	movw	r1, #5648	; 0x1610
    89f0:	lsl	r0, r0, #1
    89f4:	str	r0, [r9, r1]
    89f8:	ldr	r1, [r3]
    89fc:	ldr	r0, [pc, #24]	; 8a1c <btbb_winnow@@Base+0x1ac>
    8a00:	add	r0, pc, r0
    8a04:	bl	4590 <printf@plt>
    8a08:	ldr	r0, [r9, #4]
    8a0c:	mov	r6, #1
    8a10:	orr	r0, r0, #32
    8a14:	str	r0, [r9, #4]
    8a18:	b	89d0 <btbb_winnow@@Base+0x160>
    8a1c:	muleq	r0, fp, fp
    8a20:	andeq	r5, r0, r0, ror #25

00008a24 <btbb_uap_from_header@@Base>:
    8a24:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
    8a28:	add	fp, sp, #28
    8a2c:	sub	sp, sp, #12
    8a30:	mov	r5, r0
    8a34:	ldr	r0, [r0, #2816]	; 0xb00
    8a38:	mov	r4, r1
    8a3c:	mov	r2, #1
    8a40:	str	r0, [sp, #8]
    8a44:	ldrb	r0, [r1, #5]
    8a48:	tst	r0, #4
    8a4c:	ldreq	r1, [sp, #8]
    8a50:	movweq	r0, #5652	; 0x1614
    8a54:	streq	r1, [r4, r0]
    8a58:	ldrb	r0, [r5, #8]
    8a5c:	and	r1, r0, #7
    8a60:	add	r0, r4, r0, lsr #3
    8a64:	ldrb	r3, [r0, #12]!
    8a68:	tst	r3, r2, lsl r1
    8a6c:	bne	8a88 <btbb_uap_from_header@@Base+0x64>
    8a70:	lsl	r1, r2, r1
    8a74:	orr	r1, r3, r1
    8a78:	strb	r1, [r0]
    8a7c:	ldrb	r0, [r4, #22]
    8a80:	add	r0, r0, #1
    8a84:	strb	r0, [r4, #22]
    8a88:	ldr	r0, [r4, #380]	; 0x17c
    8a8c:	cmp	r0, #1000	; 0x3e8
    8a90:	bge	8c10 <btbb_uap_from_header@@Base+0x1ec>
    8a94:	movw	r1, #5652	; 0x1614
    8a98:	mov	r2, r4
    8a9c:	add	r0, r4, r0, lsl #2
    8aa0:	mov	r8, #0
    8aa4:	mov	sl, #0
    8aa8:	ldr	r1, [r2, r1]!
    8aac:	str	r2, [sp, #4]
    8ab0:	ldr	r2, [sp, #8]
    8ab4:	sub	r1, r2, r1
    8ab8:	movw	r2, #4648	; 0x1228
    8abc:	str	r1, [r0, #648]	; 0x288
    8ac0:	ldr	r0, [r4, #380]	; 0x17c
    8ac4:	ldrb	r1, [r5, #8]
    8ac8:	add	r0, r4, r0
    8acc:	strb	r1, [r0, r2]
    8ad0:	ldr	r0, [r4, #380]	; 0x17c
    8ad4:	ldr	r1, [r4, #384]	; 0x180
    8ad8:	add	r0, r0, #1
    8adc:	add	r1, r1, #1
    8ae0:	str	r0, [r4, #380]	; 0x17c
    8ae4:	mov	r0, #0
    8ae8:	str	r1, [r4, #384]	; 0x180
    8aec:	str	r0, [sp]
    8af0:	add	r9, r4, r8, lsl #2
    8af4:	ldr	r0, [r9, #392]	; 0x188
    8af8:	cmn	r0, #1
    8afc:	bgt	8b0c <btbb_uap_from_header@@Base+0xe8>
    8b00:	ldr	r2, [r4, #4]
    8b04:	tst	r2, #1024	; 0x400
    8b08:	bne	8ba8 <btbb_uap_from_header@@Base+0x184>
    8b0c:	ldr	r1, [sp, #4]
    8b10:	ldr	r0, [sp, #8]
    8b14:	ldr	r1, [r1]
    8b18:	add	r0, r0, r8
    8b1c:	sub	r0, r0, r1
    8b20:	mov	r1, r5
    8b24:	and	r7, r0, #63	; 0x3f
    8b28:	mov	r0, r7
    8b2c:	bl	48cc <try_clock@plt>
    8b30:	ldr	r2, [r4, #4]
    8b34:	mov	r6, r0
    8b38:	tst	r2, #1024	; 0x400
    8b3c:	beq	8b50 <btbb_uap_from_header@@Base+0x12c>
    8b40:	ldr	r1, [r9, #392]	; 0x188
    8b44:	mvn	r0, #0
    8b48:	cmp	r1, r6
    8b4c:	bne	8b60 <btbb_uap_from_header@@Base+0x13c>
    8b50:	mov	r0, r7
    8b54:	mov	r1, r5
    8b58:	bl	46bc <crc_check@plt>
    8b5c:	ldr	r2, [r4, #4]
    8b60:	ands	r3, r2, #4
    8b64:	beq	8b78 <btbb_uap_from_header@@Base+0x154>
    8b68:	ldrb	r1, [r4, #28]
    8b6c:	cmp	r6, r1
    8b70:	mvn	r1, #0
    8b74:	movne	r0, r1
    8b78:	sub	r1, r0, #1
    8b7c:	cmp	r1, #2
    8b80:	bcc	8b9c <btbb_uap_from_header@@Base+0x178>
    8b84:	add	r0, r0, #1
    8b88:	cmp	r0, #1
    8b8c:	bhi	8c2c <btbb_uap_from_header@@Base+0x208>
    8b90:	mvn	r0, #0
    8b94:	str	r0, [r9, #392]	; 0x188
    8b98:	b	8ba8 <btbb_uap_from_header@@Base+0x184>
    8b9c:	add	sl, sl, #1
    8ba0:	str	r6, [r9, #392]	; 0x188
    8ba4:	str	r8, [sp]
    8ba8:	add	r8, r8, #1
    8bac:	cmp	r8, #64	; 0x40
    8bb0:	bcc	8af0 <btbb_uap_from_header@@Base+0xcc>
    8bb4:	orr	r0, r2, #1024	; 0x400
    8bb8:	mov	r5, #0
    8bbc:	cmp	sl, #0
    8bc0:	str	r0, [r4, #4]
    8bc4:	beq	8c80 <btbb_uap_from_header@@Base+0x25c>
    8bc8:	cmp	sl, #1
    8bcc:	bne	8cc4 <btbb_uap_from_header@@Base+0x2a0>
    8bd0:	ldr	r0, [sp, #4]
    8bd4:	ldr	r5, [sp]
    8bd8:	tst	r2, #4
    8bdc:	ldr	r0, [r0]
    8be0:	sub	r0, r5, r0
    8be4:	and	r1, r0, #63	; 0x3f
    8be8:	movw	r0, #5648	; 0x1610
    8bec:	str	r1, [r4, r0]
    8bf0:	bne	8c8c <btbb_uap_from_header@@Base+0x268>
    8bf4:	add	r5, r4, r5, lsl #2
    8bf8:	ldr	r2, [r4, #384]	; 0x180
    8bfc:	ldr	r1, [r5, #392]!	; 0x188
    8c00:	ldr	r0, [pc, #208]	; 8cd8 <btbb_uap_from_header@@Base+0x2b4>
    8c04:	add	r0, pc, r0
    8c08:	bl	4590 <printf@plt>
    8c0c:	b	8ca4 <btbb_uap_from_header@@Base+0x280>
    8c10:	ldr	r0, [pc, #200]	; 8ce0 <btbb_uap_from_header@@Base+0x2bc>
    8c14:	add	r0, pc, r0
    8c18:	bl	46ec <puts@plt>
    8c1c:	mov	r0, r4
    8c20:	bl	8ce4 <btbb_uap_from_header@@Base+0x2c0>
    8c24:	mov	r5, #0
    8c28:	b	8cc4 <btbb_uap_from_header@@Base+0x2a0>
    8c2c:	ldr	r0, [sp, #4]
    8c30:	cmp	r3, #0
    8c34:	ldr	r0, [r0]
    8c38:	sub	r0, r8, r0
    8c3c:	and	r1, r0, #63	; 0x3f
    8c40:	movw	r0, #5648	; 0x1610
    8c44:	str	r1, [r4, r0]
    8c48:	bne	8c60 <btbb_uap_from_header@@Base+0x23c>
    8c4c:	ldr	r2, [r4, #384]	; 0x180
    8c50:	ldr	r0, [pc, #120]	; 8cd0 <btbb_uap_from_header@@Base+0x2ac>
    8c54:	mov	r1, r6
    8c58:	add	r0, pc, r0
    8c5c:	b	8c6c <btbb_uap_from_header@@Base+0x248>
    8c60:	ldr	r2, [r4, #384]	; 0x180
    8c64:	ldr	r0, [pc, #104]	; 8cd4 <btbb_uap_from_header@@Base+0x2b0>
    8c68:	add	r0, pc, r0
    8c6c:	bl	4590 <printf@plt>
    8c70:	mov	r0, #0
    8c74:	strb	r6, [r4, #28]
    8c78:	str	r0, [r4, #384]	; 0x180
    8c7c:	b	8cb4 <btbb_uap_from_header@@Base+0x290>
    8c80:	mov	r0, r4
    8c84:	bl	8ce4 <btbb_uap_from_header@@Base+0x2c0>
    8c88:	b	8cc4 <btbb_uap_from_header@@Base+0x2a0>
    8c8c:	ldr	r2, [r4, #384]	; 0x180
    8c90:	ldr	r0, [pc, #68]	; 8cdc <btbb_uap_from_header@@Base+0x2b8>
    8c94:	add	r0, pc, r0
    8c98:	bl	4590 <printf@plt>
    8c9c:	add	r0, r4, r5, lsl #2
    8ca0:	add	r5, r0, #392	; 0x188
    8ca4:	ldr	r0, [r5]
    8ca8:	mov	r1, #0
    8cac:	str	r1, [r4, #384]	; 0x180
    8cb0:	strb	r0, [r4, #28]
    8cb4:	ldr	r0, [r4, #4]
    8cb8:	mov	r5, #1
    8cbc:	orr	r0, r0, #20
    8cc0:	str	r0, [r4, #4]
    8cc4:	mov	r0, r5
    8cc8:	sub	sp, fp, #28
    8ccc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
    8cd0:	muleq	r0, pc, r8	; <UNPREDICTABLE>
    8cd4:	andeq	r5, r0, r6, asr #17
    8cd8:	andeq	r5, r0, r0, lsl #18
    8cdc:	andeq	r5, r0, r7, lsr #17
    8ce0:	andeq	r5, r0, r4, lsl #21
    8ce4:	push	{r4, sl, fp, lr}
    8ce8:	add	fp, sp, #8
    8cec:	mov	r4, r0
    8cf0:	ldr	r0, [r0, #4]
    8cf4:	tst	r0, #512	; 0x200
    8cf8:	beq	8d10 <btbb_uap_from_header@@Base+0x2ec>
    8cfc:	ldr	r0, [r4, #32]
    8d00:	bl	45d8 <free@plt>
    8d04:	mov	r0, #0
    8d08:	str	r0, [r4, #372]	; 0x174
    8d0c:	ldr	r0, [r4, #4]
    8d10:	mov	r1, #0
    8d14:	str	r1, [r4, #380]	; 0x17c
    8d18:	movw	r1, #61899	; 0xf1cb
    8d1c:	movt	r1, #65535	; 0xffff
    8d20:	and	r1, r0, r1
    8d24:	lsr	r0, r0, #12
    8d28:	bfi	r1, r0, #11, #1
    8d2c:	str	r1, [r4, #4]
    8d30:	pop	{r4, sl, fp, pc}

00008d34 <btbb_print_afh_map@@Base>:
    8d34:	push	{r4, r5, r6, r7, fp, lr}
    8d38:	add	fp, sp, #16
    8d3c:	sub	sp, sp, #32
    8d40:	ldrb	ip, [r0, #15]
    8d44:	ldrb	lr, [r0, #16]
    8d48:	ldrb	r1, [r0, #12]
    8d4c:	ldrb	r2, [r0, #13]
    8d50:	ldrb	r3, [r0, #14]
    8d54:	ldrb	r4, [r0, #17]
    8d58:	ldrb	r5, [r0, #18]
    8d5c:	ldrb	r6, [r0, #19]
    8d60:	ldrb	r7, [r0, #20]
    8d64:	ldrb	r0, [r0, #21]
    8d68:	stm	sp, {ip, lr}
    8d6c:	add	ip, sp, #8
    8d70:	stm	ip, {r4, r5, r6, r7}
    8d74:	str	r0, [sp, #24]
    8d78:	ldr	r0, [pc, #12]	; 8d8c <btbb_print_afh_map@@Base+0x58>
    8d7c:	add	r0, pc, r0
    8d80:	bl	4590 <printf@plt>
    8d84:	sub	sp, fp, #16
    8d88:	pop	{r4, r5, r6, r7, fp, pc}
    8d8c:	andeq	r5, r0, sl, ror #15

00008d90 <get_piconet@@Base>:
    8d90:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
    8d94:	add	fp, sp, #28
    8d98:	sub	sp, sp, #20
    8d9c:	str	r0, [sp, #16]
    8da0:	movw	sl, #63341	; 0xf76d
    8da4:	movw	r1, #16653	; 0x410d
    8da8:	movw	r2, #47814	; 0xbac6
    8dac:	movw	r8, #48883	; 0xbef3
    8db0:	mov	r6, r0
    8db4:	ldr	r7, [pc, #1132]	; 9228 <get_piconet@@Base+0x498>
    8db8:	movt	sl, #7
    8dbc:	movt	r1, #274	; 0x112
    8dc0:	movt	r2, #40777	; 0x9f49
    8dc4:	movt	r8, #65261	; 0xfeed
    8dc8:	ldr	r7, [pc, r7]
    8dcc:	cmp	r7, #0
    8dd0:	beq	8ea0 <get_piconet@@Base+0x110>
    8dd4:	and	r0, r6, #-16777216	; 0xff000000
    8dd8:	add	r0, r0, r1
    8ddc:	and	r1, r6, #16711680	; 0xff0000
    8de0:	add	r0, r0, r1
    8de4:	and	r1, r6, #65280	; 0xff00
    8de8:	add	r0, r0, r1
    8dec:	uxtab	r0, r0, r6
    8df0:	eor	r0, r0, sl
    8df4:	sub	r1, r2, r0
    8df8:	sub	r2, r8, r0
    8dfc:	eor	r1, r1, r0, lsl #8
    8e00:	sub	r2, r2, r1
    8e04:	sub	r0, r0, r1
    8e08:	eor	r2, r2, r1, lsr #13
    8e0c:	sub	r0, r0, r2
    8e10:	sub	r1, r1, r2
    8e14:	eor	r0, r0, r2, lsr #12
    8e18:	sub	r1, r1, r0
    8e1c:	sub	r2, r2, r0
    8e20:	eor	r1, r1, r0, lsl #16
    8e24:	sub	r2, r2, r1
    8e28:	sub	r0, r0, r1
    8e2c:	eor	r2, r2, r1, lsr #5
    8e30:	sub	r0, r0, r2
    8e34:	sub	r1, r1, r2
    8e38:	eor	r0, r0, r2, lsr #3
    8e3c:	sub	r1, r1, r0
    8e40:	eor	r1, r1, r0, lsl #10
    8e44:	sub	r0, r2, r0
    8e48:	sub	r0, r0, r1
    8e4c:	eor	r1, r0, r1, lsr #15
    8e50:	ldr	r0, [r7, #8]
    8e54:	ldm	r0, {r2, r3}
    8e58:	sub	r3, r3, #1
    8e5c:	and	r1, r1, r3
    8e60:	add	r1, r1, r1, lsl #1
    8e64:	ldr	r1, [r2, r1, lsl #2]
    8e68:	b	8e90 <get_piconet@@Base+0x100>
    8e6c:	ldr	r2, [r1, #32]
    8e70:	cmp	r2, #4
    8e74:	bne	8e8c <get_piconet@@Base+0xfc>
    8e78:	ldr	r2, [r1, #28]
    8e7c:	ldr	r3, [sp, #16]
    8e80:	ldr	r2, [r2]
    8e84:	cmp	r2, r3
    8e88:	beq	9218 <get_piconet@@Base+0x488>
    8e8c:	ldr	r1, [r1, #24]
    8e90:	cmp	r1, #0
    8e94:	ldrne	r2, [r0, #20]
    8e98:	subsne	r1, r1, r2
    8e9c:	bne	8e6c <get_piconet@@Base+0xdc>
    8ea0:	mov	r0, #1
    8ea4:	movw	r1, #5660	; 0x161c
    8ea8:	mov	r5, #1
    8eac:	bl	4554 <calloc@plt>
    8eb0:	mov	r4, r0
    8eb4:	str	r6, [r0, #24]
    8eb8:	mov	r0, #8
    8ebc:	str	r5, [r4]
    8ec0:	str	r0, [r4, #4]
    8ec4:	mov	r0, #40	; 0x28
    8ec8:	bl	46f8 <malloc@plt>
    8ecc:	mov	r5, r0
    8ed0:	str	r6, [r0]
    8ed4:	str	r4, [r0, #4]
    8ed8:	mov	r0, #0
    8edc:	mov	r1, #4
    8ee0:	cmp	r7, #0
    8ee4:	add	r9, r5, #8
    8ee8:	str	r0, [r5, #16]
    8eec:	str	r5, [r5, #28]
    8ef0:	str	r1, [r5, #32]
    8ef4:	beq	8f18 <get_piconet@@Base+0x188>
    8ef8:	ldr	r6, [r7, #8]!
    8efc:	ldr	r0, [r6, #16]
    8f00:	str	r5, [r0, #8]
    8f04:	ldr	r1, [r6, #20]
    8f08:	sub	r0, r0, r1
    8f0c:	str	r0, [r5, #12]
    8f10:	str	r9, [r6, #16]
    8f14:	b	8f9c <get_piconet@@Base+0x20c>
    8f18:	ldr	r1, [pc, #780]	; 922c <get_piconet@@Base+0x49c>
    8f1c:	str	r0, [r5, #12]
    8f20:	mov	r0, #44	; 0x2c
    8f24:	add	r1, pc, r1
    8f28:	str	r5, [r1]
    8f2c:	bl	46f8 <malloc@plt>
    8f30:	cmp	r0, #0
    8f34:	str	r0, [r5, #8]
    8f38:	beq	9220 <get_piconet@@Base+0x490>
    8f3c:	mov	r6, r0
    8f40:	vmov.i32	q8, #0	; 0x00000000
    8f44:	add	r0, r0, #12
    8f48:	mov	r1, #5
    8f4c:	vst1.32	{d16-d17}, [r0]
    8f50:	mov	r0, #32
    8f54:	stmib	r6, {r0, r1}
    8f58:	add	r0, r6, #28
    8f5c:	vst1.32	{d16-d17}, [r0]
    8f60:	mov	r0, #8
    8f64:	str	r9, [r6, #16]
    8f68:	str	r0, [r6, #20]
    8f6c:	mov	r0, #384	; 0x180
    8f70:	bl	46f8 <malloc@plt>
    8f74:	cmp	r0, #0
    8f78:	str	r0, [r6]
    8f7c:	beq	9220 <get_piconet@@Base+0x490>
    8f80:	mov	r1, #0
    8f84:	mov	r2, #384	; 0x180
    8f88:	bl	47e8 <memset@plt>
    8f8c:	movw	r0, #8161	; 0x1fe1
    8f90:	mov	r7, r9
    8f94:	movt	r0, #40977	; 0xa011
    8f98:	str	r0, [r6, #40]	; 0x28
    8f9c:	ldr	r0, [r6, #12]
    8fa0:	add	r0, r0, #1
    8fa4:	str	r0, [r6, #12]
    8fa8:	movw	r6, #16653	; 0x410d
    8fac:	ldr	ip, [r7]
    8fb0:	movt	r6, #274	; 0x112
    8fb4:	str	ip, [r5, #8]
    8fb8:	ldrb	r3, [r5, #3]
    8fbc:	ldrb	r2, [r5, #2]
    8fc0:	ldrb	r1, [r5, #1]
    8fc4:	ldrb	r0, [r5]
    8fc8:	add	r3, r6, r3, lsl #24
    8fcc:	mov	r6, #0
    8fd0:	add	r2, r3, r2, lsl #16
    8fd4:	add	r1, r2, r1, lsl #8
    8fd8:	add	r0, r1, r0
    8fdc:	movw	r1, #47814	; 0xbac6
    8fe0:	eor	r0, r0, sl
    8fe4:	movt	r1, #40777	; 0x9f49
    8fe8:	sub	r1, r1, r0
    8fec:	sub	r2, r8, r0
    8ff0:	eor	r1, r1, r0, lsl #8
    8ff4:	sub	r2, r2, r1
    8ff8:	sub	r0, r0, r1
    8ffc:	eor	r2, r2, r1, lsr #13
    9000:	sub	r0, r0, r2
    9004:	sub	r1, r1, r2
    9008:	eor	r0, r0, r2, lsr #12
    900c:	sub	r1, r1, r0
    9010:	sub	r2, r2, r0
    9014:	eor	r1, r1, r0, lsl #16
    9018:	sub	r2, r2, r1
    901c:	sub	r0, r0, r1
    9020:	eor	r2, r2, r1, lsr #5
    9024:	sub	r0, r0, r2
    9028:	sub	r1, r1, r2
    902c:	eor	r0, r0, r2, lsr #3
    9030:	sub	r1, r1, r0
    9034:	eor	r1, r1, r0, lsl #10
    9038:	sub	r0, r2, r0
    903c:	sub	r0, r0, r1
    9040:	eor	r1, r0, r1, lsr #15
    9044:	str	r1, [r5, #36]	; 0x24
    9048:	ldr	r2, [r7]
    904c:	ldm	r2, {r0, r2}
    9050:	sub	r2, r2, #1
    9054:	mov	r3, r0
    9058:	and	r1, r1, r2
    905c:	add	r2, r1, r1, lsl #1
    9060:	ldr	r7, [r3, r2, lsl #2]!
    9064:	add	r0, r0, r2, lsl #2
    9068:	mov	r2, #10
    906c:	ldr	r1, [r3, #4]
    9070:	cmp	r7, #0
    9074:	add	r1, r1, #1
    9078:	str	r1, [r3, #4]
    907c:	str	r6, [r5, #20]
    9080:	str	r7, [r5, #24]
    9084:	strne	r9, [r7, #12]
    9088:	str	r9, [r3]
    908c:	ldr	r0, [r0, #8]
    9090:	add	r0, r0, r0, lsl #2
    9094:	add	r0, r2, r0, lsl #1
    9098:	cmp	r1, r0
    909c:	bcc	920c <get_piconet@@Base+0x47c>
    90a0:	ldr	r0, [ip, #36]	; 0x24
    90a4:	cmp	r0, #1
    90a8:	beq	920c <get_piconet@@Base+0x47c>
    90ac:	ldr	r0, [ip, #4]
    90b0:	str	r4, [sp, #8]
    90b4:	str	r9, [sp, #4]
    90b8:	mov	r4, ip
    90bc:	add	r0, r0, r0, lsl #1
    90c0:	lsl	r0, r0, #3
    90c4:	bl	46f8 <malloc@plt>
    90c8:	cmp	r0, #0
    90cc:	beq	9220 <get_piconet@@Base+0x490>
    90d0:	mov	r8, r0
    90d4:	ldr	r0, [r4, #4]
    90d8:	mov	r1, #0
    90dc:	mov	r9, #0
    90e0:	add	r0, r0, r0, lsl #1
    90e4:	lsl	r2, r0, #3
    90e8:	mov	r0, r8
    90ec:	bl	47e8 <memset@plt>
    90f0:	str	r9, [r4, #28]
    90f4:	mvn	r2, #0
    90f8:	mov	r6, #1
    90fc:	ldr	r0, [r4]
    9100:	str	r0, [sp, #12]
    9104:	ldmib	r4, {r0, r1, r7}
    9108:	add	r1, r1, #1
    910c:	add	r2, r2, r0, lsl #1
    9110:	lsr	r3, r7, r1
    9114:	tst	r2, r7
    9118:	addne	r3, r6, r7, lsr r1
    911c:	cmp	r0, #0
    9120:	str	r3, [r4, #24]
    9124:	beq	91ac <get_piconet@@Base+0x41c>
    9128:	mov	ip, r4
    912c:	mov	r4, #0
    9130:	mov	lr, #0
    9134:	ldr	r5, [sp, #12]
    9138:	add	r1, lr, lr, lsl #1
    913c:	ldr	r6, [r5, r1, lsl #2]
    9140:	cmp	r6, #0
    9144:	beq	91a0 <get_piconet@@Base+0x410>
    9148:	ldr	r1, [r6, #28]
    914c:	ldr	r7, [r6, #16]
    9150:	and	r1, r1, r2
    9154:	add	r1, r1, r1, lsl #1
    9158:	add	r1, r8, r1, lsl #2
    915c:	ldr	r5, [r1, #4]
    9160:	add	sl, r5, #1
    9164:	cmp	sl, r3
    9168:	str	sl, [r1, #4]
    916c:	addhi	r4, r4, #1
    9170:	udivhi	r5, sl, r3
    9174:	strhi	r4, [ip, #28]
    9178:	strhi	r5, [r1, #8]
    917c:	str	r9, [r6, #12]
    9180:	ldr	r5, [r1]
    9184:	cmp	r5, #0
    9188:	str	r5, [r6, #16]
    918c:	strne	r6, [r5, #12]
    9190:	str	r6, [r1]
    9194:	cmp	r7, #0
    9198:	mov	r6, r7
    919c:	bne	9148 <get_piconet@@Base+0x3b8>
    91a0:	add	lr, lr, #1
    91a4:	cmp	lr, r0
    91a8:	bne	9134 <get_piconet@@Base+0x3a4>
    91ac:	ldr	r0, [sp, #12]
    91b0:	bl	45d8 <free@plt>
    91b4:	ldr	r0, [sp, #4]
    91b8:	ldr	r0, [r0]
    91bc:	str	r8, [r0]
    91c0:	ldmib	r0, {r1, r2, r3}
    91c4:	ldr	r7, [r0, #28]
    91c8:	lsl	r1, r1, #1
    91cc:	cmp	r7, r3, lsr #1
    91d0:	str	r1, [r0, #4]
    91d4:	add	r1, r2, #1
    91d8:	str	r1, [r0, #8]
    91dc:	bls	9200 <get_piconet@@Base+0x470>
    91e0:	ldr	r1, [r0, #32]
    91e4:	ldr	r4, [sp, #8]
    91e8:	add	r1, r1, #1
    91ec:	cmp	r1, #2
    91f0:	str	r1, [r0, #32]
    91f4:	movcs	r1, #1
    91f8:	strcs	r1, [r0, #36]	; 0x24
    91fc:	b	920c <get_piconet@@Base+0x47c>
    9200:	ldr	r4, [sp, #8]
    9204:	mov	r1, #0
    9208:	str	r1, [r0, #32]
    920c:	mov	r0, r4
    9210:	sub	sp, fp, #28
    9214:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
    9218:	ldr	r4, [r1, #4]
    921c:	b	920c <get_piconet@@Base+0x47c>
    9220:	mvn	r0, #0
    9224:	bl	474c <exit@plt>
    9228:			; <UNDEFINED> instruction: 0x0001d3b0
    922c:	andeq	sp, r1, r4, asr r2

00009230 <btbb_next_survey_result@@Base>:
    9230:	push	{r4, sl, fp, lr}
    9234:	add	fp, sp, #8
    9238:	ldr	r0, [pc, #48]	; 9270 <btbb_next_survey_result@@Base+0x40>
    923c:	ldr	r0, [pc, r0]
    9240:	cmp	r0, #0
    9244:	beq	9264 <btbb_next_survey_result@@Base+0x34>
    9248:	ldr	r4, [r0, #4]
    924c:	ldr	r1, [r0, #16]
    9250:	ldr	r2, [pc, #28]	; 9274 <btbb_next_survey_result@@Base+0x44>
    9254:	add	r2, pc, r2
    9258:	str	r1, [r2]
    925c:	bl	45d8 <free@plt>
    9260:	b	9268 <btbb_next_survey_result@@Base+0x38>
    9264:	mov	r4, #0
    9268:	mov	r0, r4
    926c:	pop	{r4, sl, fp, pc}
    9270:	andeq	ip, r1, ip, lsr pc
    9274:	andeq	ip, r1, r4, lsr #30

00009278 <btbb_process_packet@@Base>:
    9278:	push	{r4, r5, r6, sl, fp, lr}
    927c:	add	fp, sp, #16
    9280:	mov	r5, r0
    9284:	ldr	r0, [pc, #376]	; 9404 <btbb_process_packet@@Base+0x18c>
    9288:	add	r0, pc, r0
    928c:	ldrb	r0, [r0]
    9290:	cmp	r0, #1
    9294:	bne	930c <btbb_process_packet@@Base+0x94>
    9298:	mov	r0, r5
    929c:	bl	4818 <btbb_packet_get_lap@plt>
    92a0:	bl	483c <get_piconet@plt>
    92a4:	mov	r6, r0
    92a8:	ldrb	r0, [r5, #8]
    92ac:	mov	r2, #1
    92b0:	and	r1, r0, #7
    92b4:	add	r0, r6, r0, lsr #3
    92b8:	ldrb	r3, [r0, #12]!
    92bc:	tst	r3, r2, lsl r1
    92c0:	bne	92dc <btbb_process_packet@@Base+0x64>
    92c4:	lsl	r1, r2, r1
    92c8:	orr	r1, r3, r1
    92cc:	strb	r1, [r0]
    92d0:	ldrb	r0, [r6, #22]
    92d4:	add	r0, r0, #1
    92d8:	strb	r0, [r6, #22]
    92dc:	mov	r0, r5
    92e0:	bl	4650 <btbb_header_present@plt>
    92e4:	mov	r4, #0
    92e8:	cmp	r0, #0
    92ec:	beq	93fc <btbb_process_packet@@Base+0x184>
    92f0:	ldrb	r0, [r6, #4]
    92f4:	tst	r0, #4
    92f8:	bne	93fc <btbb_process_packet@@Base+0x184>
    92fc:	mov	r0, r5
    9300:	mov	r1, r6
    9304:	bl	4608 <btbb_uap_from_header@plt>
    9308:	b	93fc <btbb_process_packet@@Base+0x184>
    930c:	mov	r6, r1
    9310:	mov	r4, #0
    9314:	cmp	r1, #0
    9318:	beq	93fc <btbb_process_packet@@Base+0x184>
    931c:	ldrb	r0, [r5, #8]
    9320:	mov	r2, #1
    9324:	and	r1, r0, #7
    9328:	add	r0, r6, r0, lsr #3
    932c:	ldrb	r3, [r0, #12]!
    9330:	tst	r3, r2, lsl r1
    9334:	bne	9350 <btbb_process_packet@@Base+0xd8>
    9338:	lsl	r1, r2, r1
    933c:	orr	r1, r3, r1
    9340:	strb	r1, [r0]
    9344:	ldrb	r0, [r6, #22]
    9348:	add	r0, r0, #1
    934c:	strb	r0, [r6, #22]
    9350:	ldrb	r0, [r6, #4]
    9354:	tst	r0, #8
    9358:	beq	93fc <btbb_process_packet@@Base+0x184>
    935c:	mov	r0, r5
    9360:	bl	4650 <btbb_header_present@plt>
    9364:	cmp	r0, #0
    9368:	beq	93fc <btbb_process_packet@@Base+0x184>
    936c:	ldrb	r0, [r6, #5]
    9370:	ldrb	r1, [r6, #28]
    9374:	tst	r0, #64	; 0x40
    9378:	bne	93ac <btbb_process_packet@@Base+0x134>
    937c:	cmp	r1, #0
    9380:	beq	92fc <btbb_process_packet@@Base+0x84>
    9384:	mov	r0, r5
    9388:	mov	r1, r6
    938c:	bl	4704 <try_hop@plt>
    9390:	ldr	r0, [r6, #4]
    9394:	and	r1, r0, #48	; 0x30
    9398:	cmp	r1, #48	; 0x30
    939c:	orreq	r0, r0, #16384	; 0x4000
    93a0:	mvneq	r4, #0
    93a4:	streq	r0, [r6, #4]
    93a8:	b	93fc <btbb_process_packet@@Base+0x184>
    93ac:	mov	r0, r5
    93b0:	bl	4698 <btbb_packet_set_uap@plt>
    93b4:	mov	r0, r5
    93b8:	mov	r1, #4
    93bc:	mov	r2, #1
    93c0:	bl	45c0 <btbb_packet_set_flag@plt>
    93c4:	mov	r0, r5
    93c8:	mov	r1, #5
    93cc:	mov	r2, #1
    93d0:	bl	45c0 <btbb_packet_set_flag@plt>
    93d4:	mov	r0, r5
    93d8:	bl	46c8 <btbb_decode@plt>
    93dc:	cmp	r0, #0
    93e0:	beq	93f0 <btbb_process_packet@@Base+0x178>
    93e4:	mov	r0, r5
    93e8:	bl	48c0 <btbb_print_packet@plt>
    93ec:	b	93fc <btbb_process_packet@@Base+0x184>
    93f0:	ldr	r0, [pc, #16]	; 9408 <btbb_process_packet@@Base+0x190>
    93f4:	add	r0, pc, r0
    93f8:	bl	46ec <puts@plt>
    93fc:	mov	r0, r4
    9400:	pop	{r4, r5, r6, sl, fp, pc}
    9404:	andeq	ip, r1, r8, ror #29
    9408:	ldrdeq	r5, [r0], -r4

0000940c <lell_packet_new@@Base>:
    940c:	push	{r4, sl, fp, lr}
    9410:	add	fp, sp, #8
    9414:	mov	r0, #1
    9418:	mov	r1, #104	; 0x68
    941c:	mov	r4, #1
    9420:	bl	4554 <calloc@plt>
    9424:	str	r4, [r0, #96]	; 0x60
    9428:	pop	{r4, sl, fp, pc}

0000942c <lell_packet_ref@@Base>:
    942c:	ldr	r1, [r0, #96]	; 0x60
    9430:	add	r1, r1, #1
    9434:	str	r1, [r0, #96]	; 0x60
    9438:	bx	lr

0000943c <lell_packet_unref@@Base>:
    943c:	ldr	r1, [r0, #96]	; 0x60
    9440:	subs	r1, r1, #1
    9444:	str	r1, [r0, #96]	; 0x60
    9448:	bxne	lr
    944c:	b	45d8 <free@plt>

00009450 <lell_allocate_and_decode@@Base>:
    9450:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
    9454:	add	fp, sp, #28
    9458:	sub	sp, sp, #4
    945c:	mov	r5, r1
    9460:	mov	r6, r0
    9464:	mov	r0, #1
    9468:	mov	r1, #104	; 0x68
    946c:	mov	r7, r3
    9470:	mov	r4, r2
    9474:	mov	r9, #1
    9478:	bl	4554 <calloc@plt>
    947c:	mov	r1, r6
    9480:	mov	r2, #64	; 0x40
    9484:	str	r9, [r0, #96]	; 0x60
    9488:	mov	r8, r0
    948c:	str	r0, [r7]
    9490:	bl	45fc <memcpy@plt>
    9494:	movw	r0, #2402	; 0x962
    9498:	mov	r1, #37	; 0x25
    949c:	cmp	r5, r0
    94a0:	beq	94f8 <lell_allocate_and_decode@@Base+0xa8>
    94a4:	movw	r1, #2425	; 0x979
    94a8:	cmp	r5, r1
    94ac:	bhi	94c4 <lell_allocate_and_decode@@Base+0x74>
    94b0:	movw	r1, #2404	; 0x964
    94b4:	sub	r1, r5, r1
    94b8:	add	r1, r1, r1, lsr #31
    94bc:	asr	r1, r1, #1
    94c0:	b	94f8 <lell_allocate_and_decode@@Base+0xa8>
    94c4:	movw	r2, #2426	; 0x97a
    94c8:	mov	r1, #38	; 0x26
    94cc:	cmp	r5, r2
    94d0:	beq	94f8 <lell_allocate_and_decode@@Base+0xa8>
    94d4:	lsr	r2, r5, #4
    94d8:	mov	r1, #39	; 0x27
    94dc:	cmp	r2, #154	; 0x9a
    94e0:	bhi	94f8 <lell_allocate_and_decode@@Base+0xa8>
    94e4:	movw	r1, #2428	; 0x97c
    94e8:	mov	r2, #11
    94ec:	sub	r1, r5, r1
    94f0:	add	r1, r1, r1, lsr #31
    94f4:	add	r1, r2, r1, lsr #1
    94f8:	sub	r0, r5, r0
    94fc:	strb	r1, [r8, #68]	; 0x44
    9500:	str	r4, [r8, #76]	; 0x4c
    9504:	movw	ip, #48854	; 0xbed6
    9508:	uxtb	r1, r1
    950c:	add	r0, r0, r0, lsr #31
    9510:	movt	ip, #36489	; 0x8e89
    9514:	cmp	r1, #36	; 0x24
    9518:	lsr	r0, r0, #1
    951c:	strb	r0, [r8, #69]	; 0x45
    9520:	ldrb	r7, [r8]
    9524:	ldrb	r5, [r8, #1]
    9528:	ldrb	r2, [r8, #2]
    952c:	ldrb	r3, [r8, #3]
    9530:	orr	r0, r7, r5, lsl #8
    9534:	orr	r0, r0, r2, lsl #16
    9538:	orr	r0, r0, r3, lsl #24
    953c:	str	r0, [r8, #64]	; 0x40
    9540:	ldrb	r6, [r8, #5]
    9544:	bls	95b4 <lell_allocate_and_decode@@Base+0x164>
    9548:	and	r1, r6, #63	; 0x3f
    954c:	str	r1, [r8, #72]	; 0x48
    9550:	subs	r1, r0, ip
    9554:	clz	r1, r1
    9558:	lsr	r1, r1, #5
    955c:	strb	r1, [r8, #100]	; 0x64
    9560:	ldrb	r1, [r8, #4]
    9564:	and	r2, r1, #15
    9568:	strb	r2, [r8, #80]	; 0x50
    956c:	ubfx	r2, r1, #6, #1
    9570:	lsr	r1, r1, #7
    9574:	str	r2, [r8, #84]	; 0x54
    9578:	str	r1, [r8, #88]	; 0x58
    957c:	mov	r1, #0
    9580:	beq	9928 <lell_allocate_and_decode@@Base+0x4d8>
    9584:	eors	r0, r0, ip
    9588:	beq	95ac <lell_allocate_and_decode@@Base+0x15c>
    958c:	mov	r1, #0
    9590:	mov	r2, r1
    9594:	sub	r1, r0, #1
    9598:	ands	r0, r1, r0
    959c:	add	r1, r2, #1
    95a0:	bne	9590 <lell_allocate_and_decode@@Base+0x140>
    95a4:	tst	r2, #255	; 0xff
    95a8:	beq	9924 <lell_allocate_and_decode@@Base+0x4d4>
    95ac:	mov	r1, #32
    95b0:	b	9928 <lell_allocate_and_decode@@Base+0x4d8>
    95b4:	and	r1, r6, #31
    95b8:	tst	r7, #1
    95bc:	str	r1, [r8, #72]	; 0x48
    95c0:	ldr	lr, [pc, #876]	; 9934 <lell_allocate_and_decode@@Base+0x4e4>
    95c4:	ldr	r4, [pc, #876]	; 9938 <lell_allocate_and_decode@@Base+0x4e8>
    95c8:	add	r4, pc, r4
    95cc:	add	lr, pc, lr
    95d0:	mov	r6, r4
    95d4:	mov	r1, r4
    95d8:	moveq	r6, lr
    95dc:	tst	r7, #128	; 0x80
    95e0:	moveq	r1, lr
    95e4:	ldrb	r6, [r6, r7]
    95e8:	tst	r5, #128	; 0x80
    95ec:	ldrb	r1, [r1, r5]
    95f0:	eor	r5, r7, r5
    95f4:	add	r1, r1, r6
    95f8:	mov	r6, r4
    95fc:	moveq	r6, lr
    9600:	tst	r2, #128	; 0x80
    9604:	ldrb	r6, [r6, r2]
    9608:	eor	r2, r7, r2
    960c:	eor	r7, r7, r3
    9610:	moveq	r4, lr
    9614:	orr	r2, r5, r2
    9618:	mov	r5, #0
    961c:	orr	r2, r2, r7
    9620:	clz	r2, r2
    9624:	lsr	lr, r2, #5
    9628:	ldr	r2, [pc, #780]	; 993c <lell_allocate_and_decode@@Base+0x4ec>
    962c:	add	r1, r1, r6
    9630:	ldrb	r6, [r4, r3]
    9634:	add	r2, pc, r2
    9638:	add	r1, r1, r6
    963c:	ldrb	r3, [r2, r3, lsr #2]
    9640:	subs	r6, r1, #24
    9644:	mov	r1, #0
    9648:	movls	r6, r1
    964c:	eors	r7, r0, ip
    9650:	beq	9678 <lell_allocate_and_decode@@Base+0x228>
    9654:	mov	r2, #0
    9658:	mov	r5, r2
    965c:	sub	r2, r7, #1
    9660:	ands	r7, r2, r7
    9664:	add	r2, r5, #1
    9668:	bne	9658 <lell_allocate_and_decode@@Base+0x208>
    966c:	uxtb	r2, r5
    9670:	clz	r2, r2
    9674:	lsr	r5, r2, #5
    9678:	cmp	r0, ip
    967c:	mov	r2, #1
    9680:	movw	r7, #4095	; 0xfff
    9684:	movw	ip, #3063	; 0xbf7
    9688:	movweq	r2, #2
    968c:	add	r2, r2, lr
    9690:	movw	lr, #3325	; 0xcfd
    9694:	sub	r2, r2, r3
    9698:	add	r2, r2, r6
    969c:	movw	r6, #2035	; 0x7f3
    96a0:	add	r3, r2, r5
    96a4:	b	96bc <lell_allocate_and_decode@@Base+0x26c>
    96a8:	cmp	sl, #1664	; 0x680
    96ac:	beq	9900 <lell_allocate_and_decode@@Base+0x4b0>
    96b0:	cmp	sl, #1920	; 0x780
    96b4:	beq	9900 <lell_allocate_and_decode@@Base+0x4b0>
    96b8:	b	9904 <lell_allocate_and_decode@@Base+0x4b4>
    96bc:	and	sl, r7, r0, lsr r1
    96c0:	cmp	sl, r6
    96c4:	ble	96fc <lell_allocate_and_decode@@Base+0x2ac>
    96c8:	cmp	sl, ip
    96cc:	ble	9724 <lell_allocate_and_decode@@Base+0x2d4>
    96d0:	cmp	sl, #3712	; 0xe80
    96d4:	bge	9780 <lell_allocate_and_decode@@Base+0x330>
    96d8:	cmp	sl, lr
    96dc:	bgt	9834 <lell_allocate_and_decode@@Base+0x3e4>
    96e0:	movw	r4, #3064	; 0xbf8
    96e4:	sub	r5, sl, r4
    96e8:	cmp	r5, #16
    96ec:	bcc	9900 <lell_allocate_and_decode@@Base+0x4b0>
    96f0:	cmp	sl, #3200	; 0xc80
    96f4:	beq	9900 <lell_allocate_and_decode@@Base+0x4b0>
    96f8:	b	9904 <lell_allocate_and_decode@@Base+0x4b4>
    96fc:	cmp	sl, #640	; 0x280
    9700:	bge	9758 <lell_allocate_and_decode@@Base+0x308>
    9704:	cmp	sl, #253	; 0xfd
    9708:	bgt	9808 <lell_allocate_and_decode@@Base+0x3b8>
    970c:	cmp	sl, #32
    9710:	bcc	9900 <lell_allocate_and_decode@@Base+0x4b0>
    9714:	sub	r5, sl, #127	; 0x7f
    9718:	cmp	r5, #2
    971c:	bcc	9900 <lell_allocate_and_decode@@Base+0x4b0>
    9720:	b	9904 <lell_allocate_and_decode@@Base+0x4b4>
    9724:	cmp	sl, #2432	; 0x980
    9728:	bge	97ac <lell_allocate_and_decode@@Base+0x35c>
    972c:	movw	r2, #2036	; 0x7f4
    9730:	sub	r5, sl, r2
    9734:	cmp	r5, #28
    9738:	bcc	9900 <lell_allocate_and_decode@@Base+0x4b0>
    973c:	movw	r4, #2302	; 0x8fe
    9740:	sub	r5, sl, r4
    9744:	cmp	r5, #4
    9748:	bcc	9900 <lell_allocate_and_decode@@Base+0x4b0>
    974c:	cmp	sl, #2176	; 0x880
    9750:	beq	9900 <lell_allocate_and_decode@@Base+0x4b0>
    9754:	b	9904 <lell_allocate_and_decode@@Base+0x4b4>
    9758:	cmp	sl, #1152	; 0x480
    975c:	bge	97d8 <lell_allocate_and_decode@@Base+0x388>
    9760:	cmp	sl, #1016	; 0x3f8
    9764:	blt	9884 <lell_allocate_and_decode@@Base+0x434>
    9768:	sub	r5, sl, #1016	; 0x3f8
    976c:	cmp	r5, #15
    9770:	bhi	9904 <lell_allocate_and_decode@@Base+0x4b4>
    9774:	cmp	r5, #9
    9778:	bne	9900 <lell_allocate_and_decode@@Base+0x4b0>
    977c:	b	9904 <lell_allocate_and_decode@@Base+0x4b4>
    9780:	cmp	sl, #4064	; 0xfe0
    9784:	blt	98a8 <lell_allocate_and_decode@@Base+0x458>
    9788:	sub	r5, sl, #4064	; 0xfe0
    978c:	cmp	r5, #31
    9790:	bhi	9904 <lell_allocate_and_decode@@Base+0x4b4>
    9794:	movw	r2, #1
    9798:	mov	r4, #1
    979c:	movt	r2, #65535	; 0xffff
    97a0:	tst	r2, r4, lsl r5
    97a4:	addne	r3, r3, #1
    97a8:	b	9904 <lell_allocate_and_decode@@Base+0x4b4>
    97ac:	cmp	sl, #2688	; 0xa80
    97b0:	bge	9860 <lell_allocate_and_decode@@Base+0x410>
    97b4:	movw	r4, #2556	; 0x9fc
    97b8:	sub	r5, sl, r4
    97bc:	cmp	r5, #7
    97c0:	bhi	97cc <lell_allocate_and_decode@@Base+0x37c>
    97c4:	cmp	r5, #4
    97c8:	bne	9900 <lell_allocate_and_decode@@Base+0x4b0>
    97cc:	cmp	sl, #2432	; 0x980
    97d0:	beq	9900 <lell_allocate_and_decode@@Base+0x4b0>
    97d4:	b	9904 <lell_allocate_and_decode@@Base+0x4b4>
    97d8:	movw	r4, #1531	; 0x5fb
    97dc:	cmp	sl, r4
    97e0:	ble	98cc <lell_allocate_and_decode@@Base+0x47c>
    97e4:	cmp	sl, #1664	; 0x680
    97e8:	bge	98f0 <lell_allocate_and_decode@@Base+0x4a0>
    97ec:	movw	r4, #1532	; 0x5fc
    97f0:	sub	r5, sl, r4
    97f4:	cmp	r5, #7
    97f8:	bhi	9904 <lell_allocate_and_decode@@Base+0x4b4>
    97fc:	cmp	r5, #4
    9800:	bne	9900 <lell_allocate_and_decode@@Base+0x4b0>
    9804:	b	9904 <lell_allocate_and_decode@@Base+0x4b4>
    9808:	sub	r9, sl, #508	; 0x1fc
    980c:	cmp	r9, #7
    9810:	bhi	981c <lell_allocate_and_decode@@Base+0x3cc>
    9814:	cmp	r9, #4
    9818:	bne	9900 <lell_allocate_and_decode@@Base+0x4b0>
    981c:	sub	r5, sl, #254	; 0xfe
    9820:	cmp	r5, #4
    9824:	bcc	9900 <lell_allocate_and_decode@@Base+0x4b0>
    9828:	cmp	sl, #384	; 0x180
    982c:	beq	9900 <lell_allocate_and_decode@@Base+0x4b0>
    9830:	b	9904 <lell_allocate_and_decode@@Base+0x4b4>
    9834:	movw	r4, #3580	; 0xdfc
    9838:	sub	r5, sl, r4
    983c:	cmp	r5, #8
    9840:	bcc	9900 <lell_allocate_and_decode@@Base+0x4b0>
    9844:	movw	r4, #3326	; 0xcfe
    9848:	sub	r5, sl, r4
    984c:	cmp	r5, #4
    9850:	bcc	9900 <lell_allocate_and_decode@@Base+0x4b0>
    9854:	cmp	sl, #3456	; 0xd80
    9858:	beq	9900 <lell_allocate_and_decode@@Base+0x4b0>
    985c:	b	9904 <lell_allocate_and_decode@@Base+0x4b4>
    9860:	movw	r4, #2814	; 0xafe
    9864:	sub	r5, sl, r4
    9868:	cmp	r5, #4
    986c:	bcc	9900 <lell_allocate_and_decode@@Base+0x4b0>
    9870:	cmp	sl, #2688	; 0xa80
    9874:	beq	9900 <lell_allocate_and_decode@@Base+0x4b0>
    9878:	cmp	sl, #2944	; 0xb80
    987c:	beq	9900 <lell_allocate_and_decode@@Base+0x4b0>
    9880:	b	9904 <lell_allocate_and_decode@@Base+0x4b4>
    9884:	movw	r4, #766	; 0x2fe
    9888:	sub	r5, sl, r4
    988c:	cmp	r5, #4
    9890:	bcc	9900 <lell_allocate_and_decode@@Base+0x4b0>
    9894:	cmp	sl, #640	; 0x280
    9898:	beq	9900 <lell_allocate_and_decode@@Base+0x4b0>
    989c:	cmp	sl, #896	; 0x380
    98a0:	beq	9900 <lell_allocate_and_decode@@Base+0x4b0>
    98a4:	b	9904 <lell_allocate_and_decode@@Base+0x4b4>
    98a8:	movw	r4, #3838	; 0xefe
    98ac:	sub	r5, sl, r4
    98b0:	cmp	r5, #4
    98b4:	bcc	9900 <lell_allocate_and_decode@@Base+0x4b0>
    98b8:	cmp	sl, #3712	; 0xe80
    98bc:	beq	9900 <lell_allocate_and_decode@@Base+0x4b0>
    98c0:	cmp	sl, #3968	; 0xf80
    98c4:	beq	9900 <lell_allocate_and_decode@@Base+0x4b0>
    98c8:	b	9904 <lell_allocate_and_decode@@Base+0x4b4>
    98cc:	movw	r4, #1278	; 0x4fe
    98d0:	sub	r5, sl, r4
    98d4:	cmp	r5, #4
    98d8:	bcc	9900 <lell_allocate_and_decode@@Base+0x4b0>
    98dc:	cmp	sl, #1152	; 0x480
    98e0:	beq	9900 <lell_allocate_and_decode@@Base+0x4b0>
    98e4:	cmp	sl, #1408	; 0x580
    98e8:	beq	9900 <lell_allocate_and_decode@@Base+0x4b0>
    98ec:	b	9904 <lell_allocate_and_decode@@Base+0x4b4>
    98f0:	movw	r4, #1790	; 0x6fe
    98f4:	sub	r5, sl, r4
    98f8:	cmp	r5, #4
    98fc:	bcs	96a8 <lell_allocate_and_decode@@Base+0x258>
    9900:	add	r3, r3, #1
    9904:	add	r1, r1, #4
    9908:	cmp	r1, #21
    990c:	bcc	96bc <lell_allocate_and_decode@@Base+0x26c>
    9910:	clz	r0, r3
    9914:	str	r3, [r8, #92]	; 0x5c
    9918:	lsr	r0, r0, #5
    991c:	strb	r0, [r8, #100]	; 0x64
    9920:	b	992c <lell_allocate_and_decode@@Base+0x4dc>
    9924:	mov	r1, #1
    9928:	str	r1, [r8, #92]	; 0x5c
    992c:	sub	sp, fp, #28
    9930:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
    9934:			; <UNDEFINED> instruction: 0x000058b7
    9938:	andeq	r5, r0, sl, asr r4
    993c:	andeq	r5, r0, pc, asr #18

00009940 <lell_packet_is_data@@Base>:
    9940:	ldrb	r1, [r0, #68]	; 0x44
    9944:	mov	r0, #0
    9948:	cmp	r1, #37	; 0x25
    994c:	movwcc	r0, #1
    9950:	bx	lr

00009954 <lell_get_access_address@@Base>:
    9954:	ldr	r0, [r0, #64]	; 0x40
    9958:	bx	lr

0000995c <lell_get_access_address_offenses@@Base>:
    995c:	ldr	r0, [r0, #92]	; 0x5c
    9960:	bx	lr

00009964 <lell_get_channel_index@@Base>:
    9964:	ldrb	r0, [r0, #68]	; 0x44
    9968:	bx	lr

0000996c <lell_get_channel_k@@Base>:
    996c:	ldrb	r0, [r0, #69]	; 0x45
    9970:	bx	lr

00009974 <lell_get_adv_type_str@@Base>:
    9974:	ldrb	r2, [r0, #68]	; 0x44
    9978:	mov	r1, r0
    997c:	mov	r0, #0
    9980:	cmp	r2, #37	; 0x25
    9984:	bxcc	lr
    9988:	ldrb	r0, [r1, #80]	; 0x50
    998c:	cmp	r0, #6
    9990:	ldrhi	r0, [pc, #20]	; 99ac <lell_get_adv_type_str@@Base+0x38>
    9994:	addhi	r0, pc, r0
    9998:	bxhi	lr
    999c:	ldr	r1, [pc, #12]	; 99b0 <lell_get_adv_type_str@@Base+0x3c>
    99a0:	add	r1, pc, r1
    99a4:	ldr	r0, [r1, r0, lsl #2]
    99a8:	bx	lr
    99ac:	andeq	r4, r0, ip, asr #26
    99b0:	andeq	fp, r1, r8, ror #8

000099b4 <lell_print@@Base>:
    99b4:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
    99b8:	add	fp, sp, #24
    99bc:	mov	r4, r0
    99c0:	ldrb	r0, [r0, #68]	; 0x44
    99c4:	mov	r6, r4
    99c8:	cmp	r0, #36	; 0x24
    99cc:	bls	9a3c <lell_print@@Base+0x88>
    99d0:	ldr	r3, [r6, #72]!	; 0x48
    99d4:	ldrb	r0, [r6, #28]
    99d8:	ldr	r1, [pc, #1256]	; 9ec8 <lell_print@@Base+0x514>
    99dc:	ldr	r2, [pc, #1256]	; 9ecc <lell_print@@Base+0x518>
    99e0:	add	r1, pc, r1
    99e4:	add	r2, pc, r2
    99e8:	tst	r0, #1
    99ec:	moveq	r2, r1
    99f0:	ldr	r1, [r6, #-8]
    99f4:	ldr	r0, [pc, #1236]	; 9ed0 <lell_print@@Base+0x51c>
    99f8:	add	r0, pc, r0
    99fc:	bl	4590 <printf@plt>
    9a00:	ldrb	r1, [r6, #-4]
    9a04:	ldr	r0, [pc, #1224]	; 9ed4 <lell_print@@Base+0x520>
    9a08:	add	r0, pc, r0
    9a0c:	bl	4590 <printf@plt>
    9a10:	ldrb	r0, [r6, #-4]
    9a14:	mov	r1, #0
    9a18:	cmp	r0, #37	; 0x25
    9a1c:	bcc	9af8 <lell_print@@Base+0x144>
    9a20:	ldrb	r0, [r4, #80]	; 0x50
    9a24:	cmp	r0, #6
    9a28:	bhi	9af0 <lell_print@@Base+0x13c>
    9a2c:	ldr	r1, [pc, #1192]	; 9edc <lell_print@@Base+0x528>
    9a30:	add	r1, pc, r1
    9a34:	ldr	r1, [r1, r0, lsl #2]
    9a38:	b	9af8 <lell_print@@Base+0x144>
    9a3c:	ldr	r3, [r6, #72]!	; 0x48
    9a40:	ldrb	r0, [r6, #28]
    9a44:	ldr	r1, [pc, #1112]	; 9ea4 <lell_print@@Base+0x4f0>
    9a48:	ldr	r2, [pc, #1112]	; 9ea8 <lell_print@@Base+0x4f4>
    9a4c:	ldrb	r5, [r6, #-68]	; 0xffffffbc
    9a50:	add	r1, pc, r1
    9a54:	add	r2, pc, r2
    9a58:	tst	r0, #1
    9a5c:	moveq	r2, r1
    9a60:	ldr	r1, [r6, #-8]
    9a64:	ldr	r0, [pc, #1088]	; 9eac <lell_print@@Base+0x4f8>
    9a68:	add	r0, pc, r0
    9a6c:	bl	4590 <printf@plt>
    9a70:	ldrb	r1, [r6, #-4]
    9a74:	ldr	r0, [pc, #1076]	; 9eb0 <lell_print@@Base+0x4fc>
    9a78:	add	r0, pc, r0
    9a7c:	bl	4590 <printf@plt>
    9a80:	ldr	r0, [pc, #1068]	; 9eb4 <lell_print@@Base+0x500>
    9a84:	and	r5, r5, #3
    9a88:	mov	r1, r5
    9a8c:	add	r0, pc, r0
    9a90:	ldr	r2, [r0, r5, lsl #2]
    9a94:	ldr	r0, [pc, #1052]	; 9eb8 <lell_print@@Base+0x504>
    9a98:	add	r0, pc, r0
    9a9c:	bl	4590 <printf@plt>
    9aa0:	ldrb	r0, [r6, #-68]	; 0xffffffbc
    9aa4:	ubfx	r1, r0, #2, #1
    9aa8:	ubfx	r2, r0, #3, #1
    9aac:	ubfx	r3, r0, #4, #1
    9ab0:	ldr	r0, [pc, #1028]	; 9ebc <lell_print@@Base+0x508>
    9ab4:	add	r0, pc, r0
    9ab8:	bl	4590 <printf@plt>
    9abc:	cmp	r5, #3
    9ac0:	bne	9c7c <lell_print@@Base+0x2c8>
    9ac4:	ldrb	r1, [r4, #6]
    9ac8:	ldr	r2, [pc, #1008]	; 9ec0 <lell_print@@Base+0x50c>
    9acc:	cmp	r1, #20
    9ad0:	mov	r0, r1
    9ad4:	add	r2, pc, r2
    9ad8:	movcs	r0, #20
    9adc:	ldr	r2, [r2, r0, lsl #2]
    9ae0:	ldr	r0, [pc, #988]	; 9ec4 <lell_print@@Base+0x510>
    9ae4:	add	r0, pc, r0
    9ae8:	bl	4590 <printf@plt>
    9aec:	b	9c7c <lell_print@@Base+0x2c8>
    9af0:	ldr	r1, [pc, #992]	; 9ed8 <lell_print@@Base+0x524>
    9af4:	add	r1, pc, r1
    9af8:	ldr	r0, [pc, #992]	; 9ee0 <lell_print@@Base+0x52c>
    9afc:	add	r0, pc, r0
    9b00:	bl	4590 <printf@plt>
    9b04:	ldrb	r0, [r4, #80]	; 0x50
    9b08:	cmp	r0, #6
    9b0c:	bhi	9c7c <lell_print@@Base+0x2c8>
    9b10:	add	r1, pc, #4
    9b14:	ldr	r0, [r1, r0, lsl #2]
    9b18:	add	pc, r1, r0
    9b1c:	andeq	r0, r0, ip, lsl r0
    9b20:	andeq	r0, r0, ip, lsl #1
    9b24:	andeq	r0, r0, ip, lsl r0
    9b28:	strheq	r0, [r0], -r4
    9b2c:	andeq	r0, r0, r8, ror #1
    9b30:	andeq	r0, r0, r0, lsl #4
    9b34:	andeq	r0, r0, ip, lsl r0
    9b38:	ldr	r3, [r4, #84]	; 0x54
    9b3c:	ldr	r0, [pc, #928]	; 9ee4 <lell_print@@Base+0x530>
    9b40:	mov	r1, r4
    9b44:	mov	r2, #6
    9b48:	add	r0, pc, r0
    9b4c:	bl	9f64 <lell_print@@Base+0x5b0>
    9b50:	ldr	r0, [r4, #72]	; 0x48
    9b54:	cmp	r0, #7
    9b58:	blt	9c7c <lell_print@@Base+0x2c8>
    9b5c:	ldr	r0, [pc, #900]	; 9ee8 <lell_print@@Base+0x534>
    9b60:	add	r0, pc, r0
    9b64:	bl	4590 <printf@plt>
    9b68:	ldr	r0, [r6]
    9b6c:	cmp	r0, #7
    9b70:	blt	9c64 <lell_print@@Base+0x2b0>
    9b74:	ldr	r8, [pc, #880]	; 9eec <lell_print@@Base+0x538>
    9b78:	add	r7, r4, #12
    9b7c:	mov	r5, #0
    9b80:	add	r8, pc, r8
    9b84:	ldrb	r1, [r7, r5]
    9b88:	mov	r0, r8
    9b8c:	bl	4590 <printf@plt>
    9b90:	ldr	r0, [r6]
    9b94:	add	r5, r5, #1
    9b98:	sub	r0, r0, #6
    9b9c:	cmp	r5, r0
    9ba0:	blt	9b84 <lell_print@@Base+0x1d0>
    9ba4:	b	9c64 <lell_print@@Base+0x2b0>
    9ba8:	ldr	r3, [r4, #84]	; 0x54
    9bac:	ldr	r0, [pc, #828]	; 9ef0 <lell_print@@Base+0x53c>
    9bb0:	mov	r1, r4
    9bb4:	mov	r2, #6
    9bb8:	add	r0, pc, r0
    9bbc:	bl	9f64 <lell_print@@Base+0x5b0>
    9bc0:	ldr	r3, [r4, #88]	; 0x58
    9bc4:	ldr	r0, [pc, #808]	; 9ef4 <lell_print@@Base+0x540>
    9bc8:	add	r0, pc, r0
    9bcc:	b	9bf4 <lell_print@@Base+0x240>
    9bd0:	ldr	r3, [r4, #84]	; 0x54
    9bd4:	ldr	r0, [pc, #796]	; 9ef8 <lell_print@@Base+0x544>
    9bd8:	mov	r1, r4
    9bdc:	mov	r2, #6
    9be0:	add	r0, pc, r0
    9be4:	bl	9f64 <lell_print@@Base+0x5b0>
    9be8:	ldr	r3, [r4, #88]	; 0x58
    9bec:	ldr	r0, [pc, #776]	; 9efc <lell_print@@Base+0x548>
    9bf0:	add	r0, pc, r0
    9bf4:	mov	r1, r4
    9bf8:	mov	r2, #12
    9bfc:	bl	9f64 <lell_print@@Base+0x5b0>
    9c00:	b	9c7c <lell_print@@Base+0x2c8>
    9c04:	ldr	r3, [r4, #84]	; 0x54
    9c08:	ldr	r0, [pc, #752]	; 9f00 <lell_print@@Base+0x54c>
    9c0c:	mov	r1, r4
    9c10:	mov	r2, #6
    9c14:	add	r0, pc, r0
    9c18:	bl	9f64 <lell_print@@Base+0x5b0>
    9c1c:	ldr	r0, [pc, #736]	; 9f04 <lell_print@@Base+0x550>
    9c20:	add	r0, pc, r0
    9c24:	bl	4590 <printf@plt>
    9c28:	ldr	r0, [r4, #72]	; 0x48
    9c2c:	cmp	r0, #7
    9c30:	blt	9c64 <lell_print@@Base+0x2b0>
    9c34:	ldr	r8, [pc, #716]	; 9f08 <lell_print@@Base+0x554>
    9c38:	add	r7, r4, #12
    9c3c:	mov	r5, #0
    9c40:	add	r8, pc, r8
    9c44:	ldrb	r1, [r7, r5]
    9c48:	mov	r0, r8
    9c4c:	bl	4590 <printf@plt>
    9c50:	ldr	r0, [r6]
    9c54:	add	r5, r5, #1
    9c58:	sub	r0, r0, #6
    9c5c:	cmp	r5, r0
    9c60:	blt	9c44 <lell_print@@Base+0x290>
    9c64:	mov	r0, #10
    9c68:	bl	47f4 <putchar@plt>
    9c6c:	ldr	r1, [r4, #72]	; 0x48
    9c70:	add	r0, r4, #12
    9c74:	sub	r1, r1, #6
    9c78:	bl	9fec <lell_print@@Base+0x638>
    9c7c:	mov	r0, #10
    9c80:	bl	47f4 <putchar@plt>
    9c84:	ldr	r0, [pc, #712]	; 9f54 <lell_print@@Base+0x5a0>
    9c88:	add	r0, pc, r0
    9c8c:	bl	4590 <printf@plt>
    9c90:	ldr	r0, [r6]
    9c94:	cmp	r0, #1
    9c98:	blt	9ccc <lell_print@@Base+0x318>
    9c9c:	ldr	r5, [pc, #692]	; 9f58 <lell_print@@Base+0x5a4>
    9ca0:	mov	r7, #6
    9ca4:	add	r5, pc, r5
    9ca8:	ldrb	r1, [r4, r7]
    9cac:	mov	r0, r5
    9cb0:	bl	4590 <printf@plt>
    9cb4:	ldr	r1, [r4, #72]	; 0x48
    9cb8:	add	r0, r7, #1
    9cbc:	add	r1, r1, #5
    9cc0:	cmp	r7, r1
    9cc4:	mov	r7, r0
    9cc8:	blt	9ca8 <lell_print@@Base+0x2f4>
    9ccc:	mov	r0, #10
    9cd0:	bl	47f4 <putchar@plt>
    9cd4:	ldr	r0, [pc, #640]	; 9f5c <lell_print@@Base+0x5a8>
    9cd8:	add	r0, pc, r0
    9cdc:	bl	4590 <printf@plt>
    9ce0:	add	r5, r4, #6
    9ce4:	ldr	r4, [pc, #628]	; 9f60 <lell_print@@Base+0x5ac>
    9ce8:	mov	r7, #0
    9cec:	add	r4, pc, r4
    9cf0:	ldr	r0, [r6]
    9cf4:	add	r0, r5, r0
    9cf8:	ldrb	r1, [r0, -r7]
    9cfc:	mov	r0, r4
    9d00:	bl	4590 <printf@plt>
    9d04:	sub	r7, r7, #1
    9d08:	cmn	r7, #3
    9d0c:	bne	9cf0 <lell_print@@Base+0x33c>
    9d10:	mov	r0, #10
    9d14:	pop	{r4, r5, r6, r7, r8, sl, fp, lr}
    9d18:	b	47f4 <putchar@plt>
    9d1c:	ldr	r3, [r4, #84]	; 0x54
    9d20:	ldr	r0, [pc, #484]	; 9f0c <lell_print@@Base+0x558>
    9d24:	mov	r1, r4
    9d28:	mov	r2, #6
    9d2c:	add	r0, pc, r0
    9d30:	bl	9f64 <lell_print@@Base+0x5b0>
    9d34:	ldr	r3, [r4, #88]	; 0x58
    9d38:	ldr	r0, [pc, #464]	; 9f10 <lell_print@@Base+0x55c>
    9d3c:	mov	r1, r4
    9d40:	mov	r2, #12
    9d44:	add	r0, pc, r0
    9d48:	bl	9f64 <lell_print@@Base+0x5b0>
    9d4c:	ldr	r2, [r4, #18]
    9d50:	ldr	r0, [pc, #444]	; 9f14 <lell_print@@Base+0x560>
    9d54:	ldr	r1, [pc, #444]	; 9f18 <lell_print@@Base+0x564>
    9d58:	add	r0, pc, r0
    9d5c:	add	r1, pc, r1
    9d60:	bl	4590 <printf@plt>
    9d64:	ldrb	r1, [r4, #23]
    9d68:	ldrb	r2, [r4, #24]
    9d6c:	ldrb	r0, [r4, #22]
    9d70:	lsl	r1, r1, #8
    9d74:	orr	r1, r1, r2, lsl #16
    9d78:	orr	r2, r1, r0
    9d7c:	ldr	r0, [pc, #408]	; 9f1c <lell_print@@Base+0x568>
    9d80:	ldr	r1, [pc, #408]	; 9f20 <lell_print@@Base+0x56c>
    9d84:	add	r0, pc, r0
    9d88:	add	r1, pc, r1
    9d8c:	bl	4590 <printf@plt>
    9d90:	ldrb	r2, [r4, #25]
    9d94:	ldr	r0, [pc, #392]	; 9f24 <lell_print@@Base+0x570>
    9d98:	ldr	r1, [pc, #392]	; 9f28 <lell_print@@Base+0x574>
    9d9c:	add	r0, pc, r0
    9da0:	add	r1, pc, r1
    9da4:	mov	r3, r2
    9da8:	bl	4590 <printf@plt>
    9dac:	ldrb	r0, [r4, #26]
    9db0:	ldrb	r1, [r4, #27]
    9db4:	ldr	r5, [pc, #368]	; 9f2c <lell_print@@Base+0x578>
    9db8:	orr	r2, r0, r1, lsl #8
    9dbc:	ldr	r1, [pc, #364]	; 9f30 <lell_print@@Base+0x57c>
    9dc0:	add	r5, pc, r5
    9dc4:	mov	r0, r5
    9dc8:	mov	r3, r2
    9dcc:	add	r1, pc, r1
    9dd0:	bl	4590 <printf@plt>
    9dd4:	ldrb	r0, [r4, #28]
    9dd8:	ldrb	r1, [r4, #29]
    9ddc:	orr	r2, r0, r1, lsl #8
    9de0:	ldr	r1, [pc, #332]	; 9f34 <lell_print@@Base+0x580>
    9de4:	mov	r0, r5
    9de8:	mov	r3, r2
    9dec:	add	r1, pc, r1
    9df0:	bl	4590 <printf@plt>
    9df4:	ldrb	r0, [r4, #30]
    9df8:	ldrb	r1, [r4, #31]
    9dfc:	orr	r2, r0, r1, lsl #8
    9e00:	ldr	r1, [pc, #304]	; 9f38 <lell_print@@Base+0x584>
    9e04:	mov	r0, r5
    9e08:	mov	r3, r2
    9e0c:	add	r1, pc, r1
    9e10:	bl	4590 <printf@plt>
    9e14:	ldrb	r0, [r4, #32]
    9e18:	ldrb	r1, [r4, #33]	; 0x21
    9e1c:	orr	r2, r0, r1, lsl #8
    9e20:	ldr	r1, [pc, #276]	; 9f3c <lell_print@@Base+0x588>
    9e24:	mov	r0, r5
    9e28:	mov	r3, r2
    9e2c:	add	r1, pc, r1
    9e30:	bl	4590 <printf@plt>
    9e34:	ldr	r0, [pc, #260]	; 9f40 <lell_print@@Base+0x58c>
    9e38:	add	r0, pc, r0
    9e3c:	bl	4590 <printf@plt>
    9e40:	ldr	r8, [pc, #252]	; 9f44 <lell_print@@Base+0x590>
    9e44:	add	r7, r4, #34	; 0x22
    9e48:	mov	r5, #0
    9e4c:	add	r8, pc, r8
    9e50:	ldrb	r1, [r7, -r5]
    9e54:	mov	r0, r8
    9e58:	bl	4590 <printf@plt>
    9e5c:	sub	r5, r5, #1
    9e60:	cmn	r5, #5
    9e64:	bne	9e50 <lell_print@@Base+0x49c>
    9e68:	mov	r0, #10
    9e6c:	bl	47f4 <putchar@plt>
    9e70:	ldrb	r0, [r4, #39]	; 0x27
    9e74:	and	r1, r0, #31
    9e78:	ldr	r0, [pc, #200]	; 9f48 <lell_print@@Base+0x594>
    9e7c:	add	r0, pc, r0
    9e80:	bl	4590 <printf@plt>
    9e84:	ldrb	r0, [r4, #39]	; 0x27
    9e88:	lsr	r1, r0, #5
    9e8c:	ldr	r0, [pc, #184]	; 9f4c <lell_print@@Base+0x598>
    9e90:	add	r0, pc, r0
    9e94:	ldr	r2, [r0, r1, lsl #2]
    9e98:	ldr	r0, [pc, #176]	; 9f50 <lell_print@@Base+0x59c>
    9e9c:	add	r0, pc, r0
    9ea0:	b	9ae8 <lell_print@@Base+0x134>
    9ea4:	andeq	r4, r0, r5, lsl sp
    9ea8:	andeq	r4, r0, r3, lsl sp
    9eac:	ldrdeq	r4, [r0], -ip
    9eb0:	strdeq	r4, [r0], -r5
    9eb4:	muleq	r1, r8, r3
    9eb8:	andeq	r4, r0, ip, ror #25
    9ebc:	andeq	r4, r0, r3, ror #25
    9ec0:	andeq	fp, r1, r0, ror #6
    9ec4:	andeq	r4, r0, r9, lsr lr
    9ec8:	andeq	r4, r0, r5, lsl #27
    9ecc:	andeq	r4, r0, r3, lsl #27
    9ed0:	andeq	r4, r0, sl, lsr pc
    9ed4:	andeq	r4, r0, r5, ror #26
    9ed8:	andeq	r4, r0, ip, ror #23
    9edc:	ldrdeq	fp, [r1], -r8
    9ee0:	andeq	r4, r0, sp, asr lr
    9ee4:	andeq	r4, r0, r0, lsr #28
    9ee8:	andeq	r4, r0, r0, lsl lr
    9eec:	andeq	r5, r0, r7, lsl r1
    9ef0:			; <UNDEFINED> instruction: 0x00004db0
    9ef4:			; <UNDEFINED> instruction: 0x00004db5
    9ef8:	andeq	r4, r0, r5, lsr #27
    9efc:	andeq	r4, r0, r8, ror sp
    9f00:	andeq	r4, r0, r4, asr sp
    9f04:	andeq	r4, r0, sp, ror #26
    9f08:	andeq	r5, r0, r7, asr r0
    9f0c:	andeq	r4, r0, r1, asr ip
    9f10:	andeq	r4, r0, r4, lsr #24
    9f14:	andeq	r5, r0, sl, asr #32
    9f18:	andeq	r4, r0, r2, asr #24
    9f1c:	andeq	r5, r0, sl, lsr #32
    9f20:	andeq	r4, r0, lr, lsl ip
    9f24:	andeq	r5, r0, lr, lsl r0
    9f28:	andeq	r4, r0, r0, lsl ip
    9f2c:	andeq	r5, r0, fp
    9f30:	andeq	r4, r0, lr, ror #23
    9f34:	ldrdeq	r4, [r0], -sl
    9f38:	andeq	r4, r0, r5, asr #23
    9f3c:	andeq	r4, r0, pc, lsr #23
    9f40:	andeq	r4, r0, sp, lsr #23
    9f44:	andeq	r4, r0, fp, asr #28
    9f48:	andeq	r4, r0, r2, ror fp
    9f4c:	strdeq	sl, [r1], -r8
    9f50:	andeq	r4, r0, pc, asr fp
    9f54:	andeq	r4, r0, r4, lsl #27
    9f58:	strdeq	r4, [r0], -r3
    9f5c:	andeq	r4, r0, pc, lsr sp
    9f60:	andeq	r4, r0, fp, lsr #31
    9f64:	push	{r4, r5, r6, r7, fp, lr}
    9f68:	add	fp, sp, #16
    9f6c:	add	r6, r1, r2
    9f70:	mov	r4, r3
    9f74:	mov	r3, r0
    9f78:	ldrb	r2, [r6, #5]
    9f7c:	ldr	r0, [pc, #84]	; 9fd8 <lell_print@@Base+0x624>
    9f80:	mov	r1, r3
    9f84:	add	r0, pc, r0
    9f88:	bl	4590 <printf@plt>
    9f8c:	ldr	r5, [pc, #72]	; 9fdc <lell_print@@Base+0x628>
    9f90:	mov	r7, #4
    9f94:	add	r5, pc, r5
    9f98:	ldrb	r1, [r6, r7]
    9f9c:	mov	r0, r5
    9fa0:	bl	4590 <printf@plt>
    9fa4:	sub	r7, r7, #1
    9fa8:	cmn	r7, #1
    9fac:	bne	9f98 <lell_print@@Base+0x5e4>
    9fb0:	ldr	r0, [pc, #40]	; 9fe0 <lell_print@@Base+0x62c>
    9fb4:	ldr	r1, [pc, #40]	; 9fe4 <lell_print@@Base+0x630>
    9fb8:	cmp	r4, #0
    9fbc:	add	r0, pc, r0
    9fc0:	add	r1, pc, r1
    9fc4:	moveq	r1, r0
    9fc8:	ldr	r0, [pc, #24]	; 9fe8 <lell_print@@Base+0x634>
    9fcc:	add	r0, pc, r0
    9fd0:	pop	{r4, r5, r6, r7, fp, lr}
    9fd4:	b	4590 <printf@plt>
    9fd8:	strdeq	r4, [r0], -r0
    9fdc:	andeq	r4, r0, fp, ror #23
    9fe0:	ldrdeq	r4, [r0], -r7
    9fe4:	andeq	r4, r0, ip, asr #23
    9fe8:			; <UNDEFINED> instruction: 0x00004bb9
    9fec:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
    9ff0:	add	fp, sp, #28
    9ff4:	sub	sp, sp, #4
    9ff8:	vpush	{d8}
    9ffc:	sub	sp, sp, #56	; 0x38
    a000:	cmp	r1, #1
    a004:	blt	a620 <lell_print@@Base+0xc6c>
    a008:	mov	r5, r0
    a00c:	add	r0, r0, #2
    a010:	mov	r3, r1
    a014:	vmov.f64	d8, #116	; 0x3fa00000  1.250
    a018:	str	r0, [sp, #8]
    a01c:	add	r0, sp, #40	; 0x28
    a020:	add	r1, r0, #10
    a024:	add	sl, r0, #6
    a028:	add	r9, r0, #4
    a02c:	str	r1, [sp, #20]
    a030:	add	r1, r0, #8
    a034:	add	r0, r5, #4
    a038:	str	r1, [sp, #16]
    a03c:	str	r0, [sp, #4]
    a040:	mov	r0, #0
    a044:	ldr	r7, [pc, #1568]	; a66c <lell_print@@Base+0xcb8>
    a048:	str	r3, [sp, #24]
    a04c:	str	r5, [sp, #32]
    a050:	add	r7, pc, r7
    a054:	ldrb	r8, [r5, r0]
    a058:	add	r1, r0, #1
    a05c:	add	r4, r1, r8
    a060:	cmp	r4, r3
    a064:	bgt	a630 <lell_print@@Base+0xc7c>
    a068:	cmp	r8, #0
    a06c:	beq	a650 <lell_print@@Base+0xc9c>
    a070:	str	r0, [sp, #28]
    a074:	ldrb	r6, [r5, r1]
    a078:	ldr	r0, [pc, #1520]	; a670 <lell_print@@Base+0xcbc>
    a07c:	mov	r1, r6
    a080:	add	r0, pc, r0
    a084:	bl	4590 <printf@plt>
    a088:	sub	r0, r6, #1
    a08c:	str	r4, [sp, #36]	; 0x24
    a090:	cmp	r0, #21
    a094:	bhi	a1a4 <lell_print@@Base+0x7f0>
    a098:	add	r1, pc, #12
    a09c:	ldr	r6, [pc, #1496]	; a67c <lell_print@@Base+0xcc8>
    a0a0:	ldr	r0, [r1, r0, lsl #2]
    a0a4:	add	r6, pc, r6
    a0a8:	add	pc, r1, r0
    a0ac:	andeq	r0, r0, r8, asr r0
    a0b0:	ldrdeq	r0, [r0], -r4
    a0b4:	andeq	r0, r0, r0, ror #3
    a0b8:	muleq	r0, r0, r1
    a0bc:	muleq	r0, r0, r1
    a0c0:	andeq	r0, r0, r0, asr #4
    a0c4:	andeq	r0, r0, ip, asr #4
    a0c8:	muleq	r0, r0, r1
    a0cc:	andeq	r0, r0, r4, ror r2
    a0d0:	ldrdeq	r0, [r0], -r4
    a0d4:	muleq	r0, r0, r1
    a0d8:	muleq	r0, r0, r1
    a0dc:	muleq	r0, r0, r1
    a0e0:	muleq	r0, r0, r1
    a0e4:	muleq	r0, r0, r1
    a0e8:	muleq	r0, r0, r1
    a0ec:	muleq	r0, r0, r1
    a0f0:	andeq	r0, r0, r0, lsl r3
    a0f4:	muleq	r0, r0, r1
    a0f8:	muleq	r0, r0, r1
    a0fc:	muleq	r0, r0, r1
    a100:	muleq	r0, r0, r3
    a104:	str	sl, [sp, #12]
    a108:	ldr	r0, [pc, #1392]	; a680 <lell_print@@Base+0xccc>
    a10c:	add	r0, pc, r0
    a110:	bl	46ec <puts@plt>
    a114:	ldr	r0, [pc, #1384]	; a684 <lell_print@@Base+0xcd0>
    a118:	add	r0, pc, r0
    a11c:	bl	4590 <printf@plt>
    a120:	ldr	r0, [sp, #28]
    a124:	ldr	sl, [pc, #1372]	; a688 <lell_print@@Base+0xcd4>
    a128:	mov	r4, #7
    a12c:	mov	r8, #1
    a130:	add	r6, r0, #2
    a134:	add	sl, pc, sl
    a138:	ldrb	r0, [r5, r6]
    a13c:	and	r1, r0, r8, lsl r4
    a140:	mov	r0, sl
    a144:	cmp	r1, #0
    a148:	movwne	r1, #1
    a14c:	bl	4590 <printf@plt>
    a150:	sub	r4, r4, #1
    a154:	cmn	r4, #1
    a158:	bne	a138 <lell_print@@Base+0x784>
    a15c:	mov	r0, #10
    a160:	bl	47f4 <putchar@plt>
    a164:	ldr	sl, [sp, #12]
    a168:	mov	r4, #0
    a16c:	ldrb	r0, [r5, r6]
    a170:	tst	r0, r8, lsl r4
    a174:	beq	a194 <lell_print@@Base+0x7e0>
    a178:	ldr	r0, [pc, #1292]	; a68c <lell_print@@Base+0xcd8>
    a17c:	add	r0, pc, r0
    a180:	bl	4590 <printf@plt>
    a184:	ldr	r0, [pc, #1284]	; a690 <lell_print@@Base+0xcdc>
    a188:	add	r0, pc, r0
    a18c:	ldr	r0, [r0, r4, lsl #2]
    a190:	bl	46ec <puts@plt>
    a194:	add	r4, r4, #1
    a198:	cmp	r4, #8
    a19c:	bne	a16c <lell_print@@Base+0x7b8>
    a1a0:	b	a4b0 <lell_print@@Base+0xafc>
    a1a4:	cmp	r6, #255	; 0xff
    a1a8:	ldr	r6, [pc, #1220]	; a674 <lell_print@@Base+0xcc0>
    a1ac:	add	r6, pc, r6
    a1b0:	bne	a23c <lell_print@@Base+0x888>
    a1b4:	ldr	r0, [pc, #1332]	; a6f0 <lell_print@@Base+0xd3c>
    a1b8:	add	r0, pc, r0
    a1bc:	bl	46ec <puts@plt>
    a1c0:	ldr	r4, [pc, #1324]	; a6f4 <lell_print@@Base+0xd40>
    a1c4:	add	r4, pc, r4
    a1c8:	mov	r0, r4
    a1cc:	bl	4590 <printf@plt>
    a1d0:	cmp	r8, #3
    a1d4:	bcc	a4bc <lell_print@@Base+0xb08>
    a1d8:	ldr	r1, [sp, #28]
    a1dc:	add	r0, r5, r1
    a1e0:	mov	r5, r1
    a1e4:	ldrh	r0, [r0, #2]
    a1e8:	bl	4824 <bt_compidtostr@plt>
    a1ec:	mov	r1, r0
    a1f0:	ldr	r0, [pc, #1280]	; a6f8 <lell_print@@Base+0xd44>
    a1f4:	add	r0, pc, r0
    a1f8:	bl	4590 <printf@plt>
    a1fc:	mov	r0, r4
    a200:	bl	4590 <printf@plt>
    a204:	ldr	r0, [pc, #1264]	; a6fc <lell_print@@Base+0xd48>
    a208:	add	r0, pc, r0
    a20c:	bl	4590 <printf@plt>
    a210:	cmp	r8, #3
    a214:	beq	a4b0 <lell_print@@Base+0xafc>
    a218:	ldr	r0, [sp, #4]
    a21c:	add	r4, r0, r5
    a220:	sub	r5, r8, #3
    a224:	ldrb	r1, [r4], #1
    a228:	mov	r0, r6
    a22c:	bl	4590 <printf@plt>
    a230:	subs	r5, r5, #1
    a234:	bne	a224 <lell_print@@Base+0x870>
    a238:	b	a4b0 <lell_print@@Base+0xafc>
    a23c:	mov	r0, #10
    a240:	bl	47f4 <putchar@plt>
    a244:	ldr	r0, [pc, #1068]	; a678 <lell_print@@Base+0xcc4>
    a248:	add	r0, pc, r0
    a24c:	bl	4590 <printf@plt>
    a250:	cmp	r8, #2
    a254:	bcc	a4b0 <lell_print@@Base+0xafc>
    a258:	ldr	r0, [sp, #8]
    a25c:	ldr	r1, [sp, #28]
    a260:	sub	r5, r8, #1
    a264:	add	r4, r0, r1
    a268:	ldrb	r1, [r4], #1
    a26c:	mov	r0, r6
    a270:	bl	4590 <printf@plt>
    a274:	subs	r5, r5, #1
    a278:	bne	a268 <lell_print@@Base+0x8b4>
    a27c:	b	a4b0 <lell_print@@Base+0xafc>
    a280:	ldr	r0, [pc, #1036]	; a694 <lell_print@@Base+0xce0>
    a284:	add	r0, pc, r0
    a288:	b	a294 <lell_print@@Base+0x8e0>
    a28c:	ldr	r0, [pc, #1028]	; a698 <lell_print@@Base+0xce4>
    a290:	add	r0, pc, r0
    a294:	bl	46ec <puts@plt>
    a298:	ldr	r2, [pc, #1020]	; a69c <lell_print@@Base+0xce8>
    a29c:	ldr	r1, [sp, #28]
    a2a0:	tst	r8, #1
    a2a4:	add	r2, pc, r2
    a2a8:	beq	a60c <lell_print@@Base+0xc58>
    a2ac:	cmp	r8, #2
    a2b0:	bcc	a60c <lell_print@@Base+0xc58>
    a2b4:	ldr	r0, [sp, #8]
    a2b8:	sub	r4, r8, #1
    a2bc:	mov	r6, #0
    a2c0:	add	r5, r0, r1
    a2c4:	add	r0, r5, r6
    a2c8:	ldrh	r1, [r0]
    a2cc:	mov	r0, r2
    a2d0:	bl	4590 <printf@plt>
    a2d4:	ldr	r2, [pc, #964]	; a6a0 <lell_print@@Base+0xcec>
    a2d8:	add	r6, r6, #2
    a2dc:	cmp	r6, r4
    a2e0:	add	r2, pc, r2
    a2e4:	blt	a2c4 <lell_print@@Base+0x910>
    a2e8:	b	a60c <lell_print@@Base+0xc58>
    a2ec:	ldr	r0, [pc, #944]	; a6a4 <lell_print@@Base+0xcf0>
    a2f0:	add	r0, pc, r0
    a2f4:	b	a300 <lell_print@@Base+0x94c>
    a2f8:	ldr	r0, [pc, #936]	; a6a8 <lell_print@@Base+0xcf4>
    a2fc:	add	r0, pc, r0
    a300:	bl	46ec <puts@plt>
    a304:	sub	r1, r8, #1
    a308:	add	r3, sp, #40	; 0x28
    a30c:	tst	r1, #15
    a310:	beq	a4cc <lell_print@@Base+0xb18>
    a314:	ldr	r0, [pc, #916]	; a6b0 <lell_print@@Base+0xcfc>
    a318:	add	r0, pc, r0
    a31c:	b	a608 <lell_print@@Base+0xc54>
    a320:	ldr	r0, [pc, #908]	; a6b4 <lell_print@@Base+0xd00>
    a324:	add	r0, pc, r0
    a328:	bl	46ec <puts@plt>
    a32c:	ldr	r0, [pc, #900]	; a6b8 <lell_print@@Base+0xd04>
    a330:	add	r0, pc, r0
    a334:	bl	4590 <printf@plt>
    a338:	cmp	r8, #2
    a33c:	bcc	a4b0 <lell_print@@Base+0xafc>
    a340:	ldr	r0, [sp, #8]
    a344:	ldr	r1, [sp, #28]
    a348:	sub	r5, r8, #1
    a34c:	add	r4, r0, r1
    a350:	bl	4740 <__ctype_b_loc@plt>
    a354:	mov	r6, r0
    a358:	ldrb	r0, [r4], #1
    a35c:	ldr	r1, [r6]
    a360:	add	r1, r1, r0, lsl #1
    a364:	ldrh	r1, [r1]
    a368:	tst	r1, #16384	; 0x4000
    a36c:	movweq	r0, #46	; 0x2e
    a370:	bl	47f4 <putchar@plt>
    a374:	subs	r5, r5, #1
    a378:	bne	a358 <lell_print@@Base+0x9a4>
    a37c:	b	a4b0 <lell_print@@Base+0xafc>
    a380:	ldr	r0, [pc, #820]	; a6bc <lell_print@@Base+0xd08>
    a384:	add	r0, pc, r0
    a388:	bl	46ec <puts@plt>
    a38c:	ldr	r0, [pc, #812]	; a6c0 <lell_print@@Base+0xd0c>
    a390:	add	r0, pc, r0
    a394:	bl	4590 <printf@plt>
    a398:	sub	r1, r8, #1
    a39c:	cmp	r1, #1
    a3a0:	bne	a5f4 <lell_print@@Base+0xc40>
    a3a4:	ldr	r0, [sp, #28]
    a3a8:	add	r0, r5, r0
    a3ac:	ldrb	r1, [r0, #2]
    a3b0:	ldr	r0, [pc, #780]	; a6c4 <lell_print@@Base+0xd10>
    a3b4:	add	r0, pc, r0
    a3b8:	b	a608 <lell_print@@Base+0xc54>
    a3bc:	ldr	r0, [pc, #776]	; a6cc <lell_print@@Base+0xd18>
    a3c0:	add	r0, pc, r0
    a3c4:	bl	46ec <puts@plt>
    a3c8:	ldr	r0, [pc, #768]	; a6d0 <lell_print@@Base+0xd1c>
    a3cc:	add	r0, pc, r0
    a3d0:	bl	4590 <printf@plt>
    a3d4:	sub	r1, r8, #1
    a3d8:	cmp	r1, #4
    a3dc:	bne	a600 <lell_print@@Base+0xc4c>
    a3e0:	ldr	r0, [sp, #28]
    a3e4:	add	r4, r5, r0
    a3e8:	ldrb	r0, [r4, #2]
    a3ec:	ldrb	r1, [r4, #3]
    a3f0:	orr	r0, r0, r1, lsl #8
    a3f4:	vmov	s0, r0
    a3f8:	vcvt.f64.s32	d16, s0
    a3fc:	ldr	r0, [pc, #720]	; a6d4 <lell_print@@Base+0xd20>
    a400:	vmul.f64	d16, d16, d8
    a404:	vmov	r2, r3, d16
    a408:	add	r0, pc, r0
    a40c:	bl	4590 <printf@plt>
    a410:	ldrb	r0, [r4, #4]
    a414:	ldrb	r1, [r4, #5]
    a418:	orr	r0, r0, r1, lsl #8
    a41c:	vmov	s0, r0
    a420:	vcvt.f64.s32	d16, s0
    a424:	ldr	r0, [pc, #684]	; a6d8 <lell_print@@Base+0xd24>
    a428:	vmul.f64	d16, d16, d8
    a42c:	vmov	r2, r3, d16
    a430:	add	r0, pc, r0
    a434:	bl	4590 <printf@plt>
    a438:	b	a60c <lell_print@@Base+0xc58>
    a43c:	ldr	r0, [pc, #668]	; a6e0 <lell_print@@Base+0xd2c>
    a440:	add	r0, pc, r0
    a444:	bl	46ec <puts@plt>
    a448:	ldr	r0, [pc, #660]	; a6e4 <lell_print@@Base+0xd30>
    a44c:	add	r0, pc, r0
    a450:	bl	4590 <printf@plt>
    a454:	cmp	r8, #3
    a458:	bcc	a4bc <lell_print@@Base+0xb08>
    a45c:	ldr	r4, [sp, #28]
    a460:	add	r0, r5, r4
    a464:	ldrb	r1, [r0, #2]
    a468:	ldrb	r0, [r0, #3]
    a46c:	orr	r1, r1, r0, lsl #8
    a470:	ldr	r0, [pc, #624]	; a6e8 <lell_print@@Base+0xd34>
    a474:	add	r0, pc, r0
    a478:	bl	4590 <printf@plt>
    a47c:	cmp	r8, #3
    a480:	beq	a4b0 <lell_print@@Base+0xafc>
    a484:	ldr	r0, [pc, #608]	; a6ec <lell_print@@Base+0xd38>
    a488:	add	r0, pc, r0
    a48c:	bl	4590 <printf@plt>
    a490:	ldr	r0, [sp, #4]
    a494:	sub	r5, r8, #3
    a498:	add	r4, r0, r4
    a49c:	ldrb	r1, [r4], #1
    a4a0:	mov	r0, r6
    a4a4:	bl	4590 <printf@plt>
    a4a8:	subs	r5, r5, #1
    a4ac:	bne	a49c <lell_print@@Base+0xae8>
    a4b0:	mov	r0, #10
    a4b4:	bl	47f4 <putchar@plt>
    a4b8:	b	a60c <lell_print@@Base+0xc58>
    a4bc:	ldr	r0, [pc, #572]	; a700 <lell_print@@Base+0xd4c>
    a4c0:	sub	r1, r8, #1
    a4c4:	add	r0, pc, r0
    a4c8:	b	a608 <lell_print@@Base+0xc54>
    a4cc:	ldr	r5, [sp, #32]
    a4d0:	cmp	r8, #2
    a4d4:	bcc	a60c <lell_print@@Base+0xc58>
    a4d8:	ldr	r0, [sp, #28]
    a4dc:	mov	r8, #0
    a4e0:	str	r1, [sp, #12]
    a4e4:	add	r4, r0, #2
    a4e8:	str	r4, [sp, #28]
    a4ec:	add	r0, r4, r8
    a4f0:	and	r6, r8, #15
    a4f4:	ldrb	r0, [r5, r0]
    a4f8:	eor	r2, r6, #15
    a4fc:	cmp	r6, #15
    a500:	strb	r0, [r3, r2]
    a504:	bne	a5e4 <lell_print@@Base+0xc30>
    a508:	ldr	r0, [pc, #412]	; a6ac <lell_print@@Base+0xcf8>
    a50c:	mov	r5, r3
    a510:	add	r0, pc, r0
    a514:	bl	4590 <printf@plt>
    a518:	mov	r4, #0
    a51c:	ldrb	r1, [r5, r4]
    a520:	mov	r0, r7
    a524:	bl	4590 <printf@plt>
    a528:	add	r4, r4, #1
    a52c:	cmp	r4, #4
    a530:	bne	a51c <lell_print@@Base+0xb68>
    a534:	mov	r0, #45	; 0x2d
    a538:	bl	47f4 <putchar@plt>
    a53c:	mov	r4, #0
    a540:	ldrb	r1, [r9, r4]
    a544:	mov	r0, r7
    a548:	bl	4590 <printf@plt>
    a54c:	add	r4, r4, #1
    a550:	cmp	r4, #2
    a554:	bne	a540 <lell_print@@Base+0xb8c>
    a558:	mov	r0, #45	; 0x2d
    a55c:	bl	47f4 <putchar@plt>
    a560:	ldr	r5, [sp, #20]
    a564:	mov	r4, #0
    a568:	ldrb	r1, [sl, r4]
    a56c:	mov	r0, r7
    a570:	bl	4590 <printf@plt>
    a574:	add	r4, r4, #1
    a578:	cmp	r4, #2
    a57c:	bne	a568 <lell_print@@Base+0xbb4>
    a580:	mov	r0, #45	; 0x2d
    a584:	bl	47f4 <putchar@plt>
    a588:	ldr	r6, [sp, #16]
    a58c:	mov	r4, #0
    a590:	ldrb	r1, [r6, r4]
    a594:	mov	r0, r7
    a598:	bl	4590 <printf@plt>
    a59c:	add	r4, r4, #1
    a5a0:	cmp	r4, #2
    a5a4:	bne	a590 <lell_print@@Base+0xbdc>
    a5a8:	mov	r0, #45	; 0x2d
    a5ac:	bl	47f4 <putchar@plt>
    a5b0:	mov	r4, #0
    a5b4:	ldrb	r1, [r5, r4]
    a5b8:	mov	r0, r7
    a5bc:	bl	4590 <printf@plt>
    a5c0:	add	r4, r4, #1
    a5c4:	cmp	r4, #6
    a5c8:	bne	a5b4 <lell_print@@Base+0xc00>
    a5cc:	mov	r0, #10
    a5d0:	bl	47f4 <putchar@plt>
    a5d4:	ldr	r1, [sp, #12]
    a5d8:	ldr	r5, [sp, #32]
    a5dc:	ldr	r4, [sp, #28]
    a5e0:	add	r3, sp, #40	; 0x28
    a5e4:	add	r8, r8, #1
    a5e8:	cmp	r8, r1
    a5ec:	bne	a4ec <lell_print@@Base+0xb38>
    a5f0:	b	a60c <lell_print@@Base+0xc58>
    a5f4:	ldr	r0, [pc, #204]	; a6c8 <lell_print@@Base+0xd14>
    a5f8:	add	r0, pc, r0
    a5fc:	b	a608 <lell_print@@Base+0xc54>
    a600:	ldr	r0, [pc, #212]	; a6dc <lell_print@@Base+0xd28>
    a604:	add	r0, pc, r0
    a608:	bl	4590 <printf@plt>
    a60c:	ldr	r3, [sp, #24]
    a610:	ldr	r0, [sp, #36]	; 0x24
    a614:	ldr	r5, [sp, #32]
    a618:	cmp	r0, r3
    a61c:	blt	a054 <lell_print@@Base+0x6a0>
    a620:	sub	sp, fp, #40	; 0x28
    a624:	vpop	{d8}
    a628:	add	sp, sp, #4
    a62c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
    a630:	ldr	r0, [pc, #204]	; a704 <lell_print@@Base+0xd50>
    a634:	mov	r2, r8
    a638:	add	r0, pc, r0
    a63c:	sub	sp, fp, #40	; 0x28
    a640:	vpop	{d8}
    a644:	add	sp, sp, #4
    a648:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
    a64c:	b	4590 <printf@plt>
    a650:	ldr	r0, [pc, #176]	; a708 <lell_print@@Base+0xd54>
    a654:	add	r0, pc, r0
    a658:	sub	sp, fp, #40	; 0x28
    a65c:	vpop	{d8}
    a660:	add	sp, sp, #4
    a664:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
    a668:	b	46ec <puts@plt>
    a66c:	andeq	r4, r0, r8, asr #24
    a670:	andeq	r4, r0, r4, asr fp
    a674:	andeq	r4, r0, fp, ror #21
    a678:	andeq	r4, r0, r5, lsr #19
    a67c:	strdeq	r4, [r0], -r3
    a680:	andeq	r4, r0, lr, ror #26
    a684:	ldrdeq	r4, [r0], -r5
    a688:			; <UNDEFINED> instruction: 0x00004ab2
    a68c:	andeq	r4, r0, sp, ror #20
    a690:	andeq	sl, r1, r0, lsr #26
    a694:	andeq	r4, r0, r4, asr #28
    a698:	andeq	r4, r0, r8, lsl lr
    a69c:	andeq	r4, r0, r5, asr r9
    a6a0:	andeq	r4, r0, r9, lsl r9
    a6a4:	andeq	r4, r0, r8, lsl #27
    a6a8:	andeq	r4, r0, ip, asr sp
    a6ac:	ldrdeq	r4, [r0], -sp
    a6b0:	strdeq	r4, [r0], -r2
    a6b4:	andeq	r4, r0, r4, lsl sp
    a6b8:			; <UNDEFINED> instruction: 0x000048bd
    a6bc:	muleq	r0, r4, ip
    a6c0:	andeq	r4, r0, sp, asr r8
    a6c4:	andeq	r4, r0, r2, lsl #17
    a6c8:	andeq	r4, r0, r6, asr #12
    a6cc:	andeq	r4, r0, r8, lsr #24
    a6d0:	andeq	r4, r0, r1, lsr #16
    a6d4:	andeq	r4, r0, r6, asr r8
    a6d8:	andeq	r4, r0, r7, lsr r8
    a6dc:	andeq	r4, r0, lr, ror #12
    a6e0:	andeq	r4, r0, sl, lsr #20
    a6e4:	andeq	r4, r0, r1, lsr #15
    a6e8:	andeq	r4, r0, lr, lsl r8
    a6ec:	andeq	r4, r0, r5, lsl r8
    a6f0:	andeq	r4, r0, r0, lsl lr
    a6f4:	andeq	r4, r0, r9, lsr #20
    a6f8:	ldrdeq	r4, [r0], -sl
    a6fc:	muleq	r0, r0, r7
    a700:	andeq	r4, r0, r7, ror #15
    a704:	andeq	r4, r0, r2, ror #10
    a708:	andeq	r4, r0, r4, lsr #21

0000a70c <bt_compidtostr@@Base>:
    a70c:	add	r0, r0, #1
    a710:	movw	r2, #1038	; 0x40e
    a714:	uxth	r1, r0
    a718:	cmp	r1, r2
    a71c:	ldrhi	r0, [pc, #28]	; a740 <bt_compidtostr@@Base+0x34>
    a720:	addhi	r0, pc, r0
    a724:	bxhi	lr
    a728:	ldr	r1, [pc, #12]	; a73c <bt_compidtostr@@Base+0x30>
    a72c:	sxth	r0, r0
    a730:	add	r1, pc, r1
    a734:	ldr	r0, [r1, r0, lsl #2]
    a738:	bx	lr
    a73c:	muleq	r1, r8, r7
    a740:	andeq	r9, r0, r3, lsr #16

0000a744 <btbb_pcap_open@@Base>:
    a744:	push	{r4, sl, fp, lr}
    a748:	add	fp, sp, #8
    a74c:	sub	sp, sp, #24
    a750:	movw	r3, #15437	; 0x3c4d
    a754:	movt	r3, #41394	; 0xa1b2
    a758:	str	r3, [sp]
    a75c:	movw	r3, #2
    a760:	movt	r3, #4
    a764:	str	r3, [sp, #4]
    a768:	mov	r3, #0
    a76c:	str	r3, [sp, #8]
    a770:	str	r3, [sp, #12]
    a774:	str	r2, [sp, #16]
    a778:	str	r1, [sp, #20]
    a77c:	ldr	r1, [pc, #48]	; a7b4 <btbb_pcap_open@@Base+0x70>
    a780:	add	r1, pc, r1
    a784:	bl	459c <fopen@plt>
    a788:	mov	r4, r0
    a78c:	cmp	r0, #0
    a790:	beq	a7a8 <btbb_pcap_open@@Base+0x64>
    a794:	mov	r0, sp
    a798:	mov	r1, #24
    a79c:	mov	r2, #1
    a7a0:	mov	r3, r4
    a7a4:	bl	46a4 <fwrite@plt>
    a7a8:	mov	r0, r4
    a7ac:	sub	sp, fp, #8
    a7b0:	pop	{r4, sl, fp, pc}
    a7b4:	ldrdeq	r9, [r0], -r0

0000a7b8 <btbb_pcap_create_file@@Base>:
    a7b8:	push	{r4, r5, r6, r7, fp, lr}
    a7bc:	add	fp, sp, #16
    a7c0:	mov	r7, r0
    a7c4:	mov	r0, #4
    a7c8:	mov	r6, r1
    a7cc:	bl	46f8 <malloc@plt>
    a7d0:	mov	r4, r0
    a7d4:	cmp	r0, #0
    a7d8:	beq	a808 <btbb_pcap_create_file@@Base+0x50>
    a7dc:	mov	r5, #0
    a7e0:	mov	r0, r7
    a7e4:	mov	r1, #255	; 0xff
    a7e8:	mov	r2, #400	; 0x190
    a7ec:	str	r5, [r4]
    a7f0:	bl	4644 <btbb_pcap_open@plt>
    a7f4:	cmp	r0, #0
    a7f8:	str	r0, [r4]
    a7fc:	beq	a81c <btbb_pcap_create_file@@Base+0x64>
    a800:	str	r4, [r6]
    a804:	b	a814 <btbb_pcap_create_file@@Base+0x5c>
    a808:	mvn	r5, #2
    a80c:	mov	r0, r4
    a810:	bl	46b0 <btbb_pcap_close@plt>
    a814:	mov	r0, r5
    a818:	pop	{r4, r5, r6, r7, fp, pc}
    a81c:	ldr	r0, [pc, #12]	; a830 <btbb_pcap_create_file@@Base+0x78>
    a820:	add	r0, pc, r0
    a824:	bl	4680 <perror@plt>
    a828:	mvn	r5, #1
    a82c:	b	a80c <btbb_pcap_create_file@@Base+0x54>
    a830:	andeq	r9, r0, r2, lsr r7

0000a834 <btbb_pcap_close@@Base>:
    a834:	cmp	r0, #0
    a838:	mvneq	r0, #0
    a83c:	bxeq	lr
    a840:	push	{r4, sl, fp, lr}
    a844:	add	fp, sp, #8
    a848:	mov	r4, r0
    a84c:	ldr	r0, [r0]
    a850:	cmp	r0, #0
    a854:	beq	a85c <btbb_pcap_close@@Base+0x28>
    a858:	bl	4854 <fclose@plt>
    a85c:	mov	r0, r4
    a860:	bl	45d8 <free@plt>
    a864:	mov	r0, #0
    a868:	pop	{r4, sl, fp, pc}

0000a86c <btbb_pcap_dump@@Base>:
    a86c:	push	{r4, r5, r6, sl, fp, lr}
    a870:	add	fp, sp, #16
    a874:	mov	r6, r0
    a878:	mov	r4, r2
    a87c:	mov	r5, r1
    a880:	mov	r0, r1
    a884:	mov	r1, #16
    a888:	mov	r2, #1
    a88c:	mov	r3, r6
    a890:	bl	46a4 <fwrite@plt>
    a894:	ldr	r1, [r5, #8]
    a898:	mov	r0, r4
    a89c:	mov	r2, #1
    a8a0:	mov	r3, r6
    a8a4:	bl	46a4 <fwrite@plt>
    a8a8:	mov	r0, r6
    a8ac:	pop	{r4, r5, r6, sl, fp, lr}
    a8b0:	b	45b4 <fflush@plt>

0000a8b4 <btbb_pcap_append_packet@@Base>:
    a8b4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
    a8b8:	add	fp, sp, #28
    a8bc:	sub	sp, sp, #468	; 0x1d4
    a8c0:	mvn	r5, #0
    a8c4:	cmp	r0, #0
    a8c8:	beq	aa60 <btbb_pcap_append_packet@@Base+0x1ac>
    a8cc:	mov	sl, r0
    a8d0:	ldr	r0, [r0]
    a8d4:	cmp	r0, #0
    a8d8:	beq	aa60 <btbb_pcap_append_packet@@Base+0x1ac>
    a8dc:	ldr	r7, [fp, #24]
    a8e0:	mov	r4, r3
    a8e4:	mov	r9, r2
    a8e8:	mov	r0, r7
    a8ec:	bl	4758 <btbb_packet_get_payload_length@plt>
    a8f0:	mov	r6, r0
    a8f4:	add	r0, r0, #7
    a8f8:	str	sp, [fp, #-476]	; 0xfffffe24
    a8fc:	bic	r0, r0, #7
    a900:	sub	r1, sp, r0
    a904:	mov	sp, r1
    a908:	mov	r0, r7
    a90c:	str	r1, [fp, #-496]	; 0xfffffe10
    a910:	bl	4584 <btbb_get_payload_packed@plt>
    a914:	movw	r2, #51712	; 0xca00
    a918:	mov	r0, r9
    a91c:	mov	r1, r4
    a920:	mov	r3, #0
    a924:	mov	r5, #0
    a928:	movt	r2, #15258	; 0x3b9a
    a92c:	bl	bb44 <lell_pcapng_close@@Base+0xb8>
    a930:	mov	r4, r0
    a934:	mov	r0, r7
    a938:	bl	4884 <btbb_packet_get_channel@plt>
    a93c:	str	r0, [fp, #-480]	; 0xfffffe20
    a940:	mov	r0, r7
    a944:	bl	45f0 <btbb_packet_get_ac_errors@plt>
    a948:	str	r0, [fp, #-484]	; 0xfffffe1c
    a94c:	mov	r0, r7
    a950:	bl	47c4 <btbb_packet_get_transport@plt>
    a954:	str	r0, [fp, #-488]	; 0xfffffe18
    a958:	mov	r0, r7
    a95c:	bl	45e4 <btbb_packet_get_modulation@plt>
    a960:	str	r0, [fp, #-492]	; 0xfffffe14
    a964:	mov	r0, r7
    a968:	bl	4818 <btbb_packet_get_lap@plt>
    a96c:	mov	r8, r0
    a970:	mov	r0, r7
    a974:	bl	4788 <btbb_packet_get_header_packed@plt>
    a978:	movw	r1, #51712	; 0xca00
    a97c:	cmp	r6, #400	; 0x190
    a980:	str	r4, [fp, #-472]	; 0xfffffe28
    a984:	ldr	r2, [fp, #-492]	; 0xfffffe14
    a988:	ldr	r3, [fp, #16]
    a98c:	sub	lr, fp, #256	; 0x100
    a990:	ldr	r7, [fp, #8]
    a994:	movt	r1, #15258	; 0x3b9a
    a998:	movcs	r6, #400	; 0x190
    a99c:	mls	r1, r4, r1, r9
    a9a0:	mov	r4, #3
    a9a4:	str	r1, [fp, #-468]	; 0xfffffe2c
    a9a8:	add	r1, r6, #22
    a9ac:	str	r1, [fp, #-464]	; 0xfffffe30
    a9b0:	str	r1, [fp, #-460]	; 0xfffffe34
    a9b4:	ldr	r1, [fp, #-480]	; 0xfffffe20
    a9b8:	strb	r1, [fp, #-456]	; 0xfffffe38
    a9bc:	ldr	r1, [fp, #-484]	; 0xfffffe1c
    a9c0:	strb	r1, [fp, #-453]	; 0xfffffe3b
    a9c4:	ldr	r1, [fp, #-488]	; 0xfffffe18
    a9c8:	orr	r1, r2, r1, lsl #4
    a9cc:	ldr	r2, [fp, #20]
    a9d0:	strb	r1, [fp, #-452]	; 0xfffffe3c
    a9d4:	sub	r1, lr, #194	; 0xc2
    a9d8:	strb	r5, [fp, #-451]	; 0xfffffe3d
    a9dc:	strh	r5, [r1]
    a9e0:	str	r8, [fp, #-448]	; 0xfffffe40
    a9e4:	mov	r8, r1
    a9e8:	bic	r1, r3, #-16777216	; 0xff000000
    a9ec:	strb	r7, [fp, #-455]	; 0xfffffe39
    a9f0:	orr	r1, r1, r2, lsl #24
    a9f4:	str	r1, [fp, #-444]	; 0xfffffe44
    a9f8:	ldr	r1, [fp, #12]
    a9fc:	cmp	r1, r7
    aa00:	sub	r7, fp, #472	; 0x1d8
    aa04:	strb	r1, [fp, #-454]	; 0xfffffe3a
    aa08:	str	r0, [fp, #-440]	; 0xfffffe48
    aa0c:	movwlt	r4, #7
    aa10:	cmn	r3, #1
    aa14:	orrne	r4, r4, #16
    aa18:	cmp	r2, #255	; 0xff
    aa1c:	orrne	r4, r4, #128	; 0x80
    aa20:	cmp	r6, #0
    aa24:	strh	r4, [r8, #14]
    aa28:	beq	aa48 <btbb_pcap_append_packet@@Base+0x194>
    aa2c:	cmp	r6, #400	; 0x190
    aa30:	bhi	aa6c <btbb_pcap_append_packet@@Base+0x1b8>
    aa34:	ldr	r1, [fp, #-496]	; 0xfffffe10
    aa38:	add	r0, r7, #38	; 0x26
    aa3c:	mov	r2, r6
    aa40:	bl	45fc <memcpy@plt>
    aa44:	orr	r4, r4, #32
    aa48:	strh	r4, [r8, #14]
    aa4c:	add	r2, r7, #16
    aa50:	sub	r1, fp, #472	; 0x1d8
    aa54:	ldr	r0, [sl]
    aa58:	bl	471c <btbb_pcap_dump@plt>
    aa5c:	ldr	sp, [fp, #-476]	; 0xfffffe24
    aa60:	mov	r0, r5
    aa64:	sub	sp, fp, #28
    aa68:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
    aa6c:	ldr	r0, [pc, #24]	; aa8c <btbb_pcap_append_packet@@Base+0x1d8>
    aa70:	ldr	r1, [pc, #24]	; aa90 <btbb_pcap_append_packet@@Base+0x1dc>
    aa74:	ldr	r3, [pc, #24]	; aa94 <btbb_pcap_append_packet@@Base+0x1e0>
    aa78:	mov	r2, #162	; 0xa2
    aa7c:	add	r0, pc, r0
    aa80:	add	r1, pc, r1
    aa84:	add	r3, pc, r3
    aa88:	bl	48f0 <__assert_fail@plt>
    aa8c:	andeq	r9, r0, r2, ror #9
    aa90:	andeq	r9, r0, r3, lsl r5
    aa94:	andeq	r9, r0, r7, asr r5

0000aa98 <lell_pcap_create_file@@Base>:
    aa98:	mov	r2, r1
    aa9c:	mov	r1, #256	; 0x100
    aaa0:	b	aaa4 <lell_pcap_create_file@@Base+0xc>
    aaa4:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
    aaa8:	add	fp, sp, #24
    aaac:	mov	r6, r0
    aab0:	mov	r0, #12
    aab4:	mov	r8, r2
    aab8:	mov	r7, r1
    aabc:	bl	46f8 <malloc@plt>
    aac0:	mov	r5, r0
    aac4:	cmp	r0, #0
    aac8:	beq	ab04 <lell_pcap_create_file@@Base+0x6c>
    aacc:	mov	r4, #0
    aad0:	mov	r0, r6
    aad4:	mov	r1, r7
    aad8:	mov	r2, #400	; 0x190
    aadc:	str	r4, [r5]
    aae0:	str	r4, [r5, #4]
    aae4:	str	r4, [r5, #8]
    aae8:	bl	4644 <btbb_pcap_open@plt>
    aaec:	cmp	r0, #0
    aaf0:	str	r0, [r5]
    aaf4:	beq	ab0c <lell_pcap_create_file@@Base+0x74>
    aaf8:	str	r7, [r5, #4]
    aafc:	str	r5, [r8]
    ab00:	b	ab18 <lell_pcap_create_file@@Base+0x80>
    ab04:	mvn	r4, #2
    ab08:	b	ab10 <lell_pcap_create_file@@Base+0x78>
    ab0c:	mvn	r4, #1
    ab10:	mov	r0, r5
    ab14:	bl	4638 <lell_pcap_close@plt>
    ab18:	mov	r0, r4
    ab1c:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}

0000ab20 <lell_pcap_ppi_create_file@@Base>:
    ab20:	push	{r4, r5, fp, lr}
    ab24:	add	fp, sp, #8
    ab28:	mov	r4, r1
    ab2c:	mov	r1, #192	; 0xc0
    ab30:	mov	r5, r2
    ab34:	bl	aaa4 <lell_pcap_create_file@@Base+0xc>
    ab38:	cmp	r0, #0
    ab3c:	ldreq	r1, [r5]
    ab40:	strbeq	r4, [r1, #8]
    ab44:	pop	{r4, r5, fp, pc}

0000ab48 <lell_pcap_append_packet@@Base>:
    ab48:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
    ab4c:	add	fp, sp, #28
    ab50:	sub	sp, sp, #292	; 0x124
    ab54:	mvn	r4, #0
    ab58:	cmp	r0, #0
    ab5c:	beq	ac3c <lell_pcap_append_packet@@Base+0xf4>
    ab60:	mov	r5, r0
    ab64:	ldr	r0, [r0]
    ab68:	cmp	r0, #0
    ab6c:	beq	ac3c <lell_pcap_append_packet@@Base+0xf4>
    ab70:	ldr	r0, [r5, #4]
    ab74:	cmp	r0, #256	; 0x100
    ab78:	bne	ac3c <lell_pcap_append_packet@@Base+0xf4>
    ab7c:	movw	r9, #51712	; 0xca00
    ab80:	ldr	r8, [fp, #20]
    ab84:	ldr	sl, [fp, #8]
    ab88:	mov	r1, r3
    ab8c:	mov	r7, r2
    ab90:	mov	r0, r2
    ab94:	mov	r3, #0
    ab98:	mov	r4, #0
    ab9c:	movt	r9, #15258	; 0x3b9a
    aba0:	mov	r2, r9
    aba4:	bl	bb44 <lell_pcapng_close@@Base+0xb8>
    aba8:	mov	r6, r0
    abac:	mls	r7, r0, r9, r7
    abb0:	mov	r0, r8
    abb4:	bl	45a8 <lell_packet_is_data@plt>
    abb8:	ldr	r1, [r8, #72]	; 0x48
    abbc:	ldr	r2, [r8, #92]	; 0x5c
    abc0:	ldrb	r3, [r8, #69]	; 0x45
    abc4:	stmib	sp, {r6, r7}
    abc8:	ldr	r6, [fp, #12]
    abcc:	ldr	r7, [fp, #16]
    abd0:	clz	r0, r0
    abd4:	strb	sl, [sp, #21]
    abd8:	lsr	r0, r0, #5
    abdc:	str	r7, [sp, #24]
    abe0:	mov	r7, #35	; 0x23
    abe4:	cmp	r6, sl
    abe8:	strb	r6, [sp, #22]
    abec:	add	r6, sp, #4
    abf0:	movwlt	r7, #39	; 0x27
    abf4:	orr	r0, r7, r0, lsl #4
    abf8:	strh	r0, [sp, #28]
    abfc:	strb	r3, [sp, #20]
    ac00:	strb	r2, [sp, #23]
    ac04:	add	r2, r1, #9
    ac08:	add	r0, r1, #19
    ac0c:	mov	r1, r8
    ac10:	cmp	r2, #255	; 0xff
    ac14:	str	r0, [sp, #12]
    ac18:	movcs	r2, #255	; 0xff
    ac1c:	add	r0, r2, #10
    ac20:	str	r0, [sp, #16]
    ac24:	add	r0, r6, #26
    ac28:	bl	45fc <memcpy@plt>
    ac2c:	ldr	r0, [r5]
    ac30:	add	r2, r6, #16
    ac34:	mov	r1, r6
    ac38:	bl	471c <btbb_pcap_dump@plt>
    ac3c:	mov	r0, r4
    ac40:	sub	sp, fp, #28
    ac44:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}

0000ac48 <lell_pcap_append_ppi_packet@@Base>:
    ac48:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
    ac4c:	add	fp, sp, #28
    ac50:	sub	sp, sp, #300	; 0x12c
    ac54:	mvn	r4, #0
    ac58:	cmp	r0, #0
    ac5c:	beq	ad58 <lell_pcap_append_ppi_packet@@Base+0x110>
    ac60:	mov	r5, r0
    ac64:	ldr	r0, [r0]
    ac68:	cmp	r0, #0
    ac6c:	beq	ad58 <lell_pcap_append_ppi_packet@@Base+0x110>
    ac70:	ldr	r0, [r5, #4]
    ac74:	cmp	r0, #192	; 0xc0
    ac78:	bne	ad58 <lell_pcap_append_ppi_packet@@Base+0x110>
    ac7c:	movw	r9, #51712	; 0xca00
    ac80:	ldr	r8, [fp, #28]
    ac84:	ldr	sl, [fp, #8]
    ac88:	mov	r1, r3
    ac8c:	mov	r7, r2
    ac90:	mov	r0, r2
    ac94:	mov	r3, #0
    ac98:	mov	r4, #0
    ac9c:	movt	r9, #15258	; 0x3b9a
    aca0:	mov	r2, r9
    aca4:	bl	bb44 <lell_pcapng_close@@Base+0xb8>
    aca8:	mov	r6, r0
    acac:	mls	r7, r0, r9, r7
    acb0:	mov	r0, r8
    acb4:	bl	4794 <lell_get_channel_k@plt>
    acb8:	ldr	r1, [r8, #72]	; 0x48
    acbc:	mov	r2, #1572864	; 0x180000
    acc0:	stm	sp, {r6, r7}
    acc4:	mov	r6, sp
    acc8:	str	r2, [sp, #16]
    accc:	mov	r2, #147	; 0x93
    acd0:	str	r2, [sp, #20]
    acd4:	movw	r2, #30006	; 0x7536
    acd8:	movt	r2, #12
    acdc:	str	r2, [sp, #24]
    ace0:	add	r2, r1, #33	; 0x21
    ace4:	str	r2, [sp, #12]
    ace8:	add	r2, r1, #9
    acec:	cmp	r2, #255	; 0xff
    acf0:	movcs	r2, #255	; 0xff
    acf4:	add	r1, r2, #24
    acf8:	str	r1, [sp, #8]
    acfc:	movw	r1, #2402	; 0x962
    ad00:	add	r0, r1, r0, lsl #1
    ad04:	ldrb	r1, [r5, #8]
    ad08:	strh	r0, [sp, #29]
    ad0c:	strb	sl, [sp, #31]
    ad10:	strb	r1, [sp, #28]
    ad14:	ldr	r1, [fp, #16]
    ad18:	ldr	r0, [r8, #76]	; 0x4c
    ad1c:	strb	r1, [sp, #36]	; 0x24
    ad20:	ldr	r1, [fp, #12]
    ad24:	strb	r1, [sp, #37]	; 0x25
    ad28:	ldr	r1, [fp, #20]
    ad2c:	strb	r1, [sp, #38]	; 0x26
    ad30:	ldr	r1, [fp, #24]
    ad34:	strb	r1, [sp, #39]	; 0x27
    ad38:	str	r0, [sp, #32]
    ad3c:	add	r0, r6, #40	; 0x28
    ad40:	mov	r1, r8
    ad44:	bl	45fc <memcpy@plt>
    ad48:	ldr	r0, [r5]
    ad4c:	add	r2, r6, #16
    ad50:	mov	r1, r6
    ad54:	bl	471c <btbb_pcap_dump@plt>
    ad58:	mov	r0, r4
    ad5c:	sub	sp, fp, #28
    ad60:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}

0000ad64 <lell_pcap_close@@Base>:
    ad64:	cmp	r0, #0
    ad68:	mvneq	r0, #0
    ad6c:	bxeq	lr
    ad70:	push	{r4, sl, fp, lr}
    ad74:	add	fp, sp, #8
    ad78:	mov	r4, r0
    ad7c:	ldr	r0, [r0]
    ad80:	cmp	r0, #0
    ad84:	beq	ad8c <lell_pcap_close@@Base+0x28>
    ad88:	bl	4854 <fclose@plt>
    ad8c:	mov	r0, r4
    ad90:	bl	45d8 <free@plt>
    ad94:	mov	r0, #0
    ad98:	pop	{r4, sl, fp, pc}

0000ad9c <pcapng_create@@Base>:
    ad9c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
    ada0:	add	fp, sp, #28
    ada4:	sub	sp, sp, #4
    ada8:	vpush	{d8-d9}
    adac:	sub	sp, sp, #40	; 0x28
    adb0:	mov	r7, r3
    adb4:	mov	r8, r2
    adb8:	mov	r5, r1
    adbc:	mov	r4, r0
    adc0:	vmov.i32	q4, #0	; 0x00000000
    adc4:	add	r6, r0, #4
    adc8:	bl	47ac <getpagesize@plt>
    adcc:	mov	sl, r0
    add0:	mov	r0, #0
    add4:	mov	r1, #194	; 0xc2
    add8:	mov	r2, #432	; 0x1b0
    addc:	vst1.32	{d8-d9}, [r6]
    ade0:	str	r0, [r4, #20]
    ade4:	str	r0, [r4, #24]
    ade8:	mov	r0, r5
    adec:	bl	4734 <open@plt>
    adf0:	mov	r9, #6
    adf4:	cmn	r0, #1
    adf8:	str	r0, [r4]
    adfc:	beq	b1dc <pcapng_create@@Base+0x440>
    ae00:	ldr	r1, [pc, #1008]	; b1f8 <pcapng_create@@Base+0x45c>
    ae04:	add	r1, pc, r1
    ae08:	vld1.64	{d16-d17}, [r1]!
    ae0c:	vldr	d18, [r1]
    ae10:	add	r1, sp, #16
    ae14:	mov	r2, r1
    ae18:	vst1.64	{d16-d17}, [r2]!
    ae1c:	vstr	d18, [r2]
    ae20:	mov	r2, #24
    ae24:	str	r2, [r4, #8]
    ae28:	mov	r2, #24
    ae2c:	bl	4830 <write@plt>
    ae30:	cmn	r0, #1
    ae34:	mov	r5, r0
    ae38:	cmpne	r8, #0
    ae3c:	bne	ae54 <pcapng_create@@Base+0xb8>
    ae40:	ldr	r0, [r4, #8]
    ae44:	cmn	r5, #1
    ae48:	str	r0, [r4, #12]
    ae4c:	bne	af14 <pcapng_create@@Base+0x178>
    ae50:	b	b1dc <pcapng_create@@Base+0x440>
    ae54:	ldrh	r0, [r8]
    ae58:	str	r7, [sp, #8]
    ae5c:	str	sl, [sp, #12]
    ae60:	cmp	r0, #0
    ae64:	beq	af00 <pcapng_create@@Base+0x164>
    ae68:	ldr	r7, [pc, #908]	; b1fc <pcapng_create@@Base+0x460>
    ae6c:	add	r7, pc, r7
    ae70:	ldrh	sl, [r8, #2]
    ae74:	cmp	sl, #0
    ae78:	beq	af00 <pcapng_create@@Base+0x164>
    ae7c:	ldr	r0, [r4]
    ae80:	add	r2, sl, #4
    ae84:	mov	r1, r8
    ae88:	bl	4830 <write@plt>
    ae8c:	movw	r1, #65532	; 0xfffc
    ae90:	mov	r5, r0
    ae94:	add	r0, sl, #3
    ae98:	movt	r1, #1
    ae9c:	and	r9, r0, r1
    aea0:	subs	r0, r9, sl
    aea4:	cmnne	r5, #1
    aea8:	beq	aed8 <pcapng_create@@Base+0x13c>
    aeac:	add	r0, sl, #1
    aeb0:	sub	r6, r0, r9
    aeb4:	ldr	r0, [r4]
    aeb8:	mov	r1, r7
    aebc:	mov	r2, #1
    aec0:	bl	4830 <write@plt>
    aec4:	cmp	r6, #0
    aec8:	mov	r5, r0
    aecc:	addne	r6, r6, #1
    aed0:	cmnne	r5, #1
    aed4:	bne	aeb4 <pcapng_create@@Base+0x118>
    aed8:	ldr	r1, [r4, #8]
    aedc:	add	r0, r9, #4
    aee0:	cmn	r5, #1
    aee4:	add	r1, r1, r0
    aee8:	str	r1, [r4, #8]
    aeec:	beq	b1c8 <pcapng_create@@Base+0x42c>
    aef0:	add	r8, r8, r0
    aef4:	ldrh	r0, [r8]
    aef8:	cmp	r0, #0
    aefc:	bne	ae70 <pcapng_create@@Base+0xd4>
    af00:	ldr	r0, [r4, #8]
    af04:	ldr	sl, [sp, #12]
    af08:	ldr	r7, [sp, #8]
    af0c:	mov	r9, #6
    af10:	str	r0, [r4, #12]
    af14:	add	r1, r7, sl
    af18:	add	r1, r1, r0
    af1c:	add	r1, r1, #3
    af20:	udiv	r1, r1, sl
    af24:	mul	r1, r1, sl
    af28:	subs	r7, r1, r0
    af2c:	str	r1, [r4, #8]
    af30:	cmnne	r5, #1
    af34:	beq	af64 <pcapng_create@@Base+0x1c8>
    af38:	ldr	r6, [pc, #704]	; b200 <pcapng_create@@Base+0x464>
    af3c:	add	r6, pc, r6
    af40:	ldr	r0, [r4]
    af44:	mov	r1, r6
    af48:	mov	r2, #1
    af4c:	bl	4830 <write@plt>
    af50:	mov	r5, r0
    af54:	subs	r7, r7, #1
    af58:	cmnne	r5, #1
    af5c:	bne	af40 <pcapng_create@@Base+0x1a4>
    af60:	ldr	r1, [r4, #8]
    af64:	ldr	r0, [r4]
    af68:	mov	r2, #0
    af6c:	mov	r3, #1
    af70:	stm	sp, {r0, r2}
    af74:	mov	r0, #0
    af78:	mov	r2, #3
    af7c:	bl	477c <mmap@plt>
    af80:	cmn	r5, #1
    af84:	str	r0, [r4, #4]
    af88:	beq	b1dc <pcapng_create@@Base+0x440>
    af8c:	cmn	r0, #1
    af90:	beq	aff8 <pcapng_create@@Base+0x25c>
    af94:	ldr	r0, [fp, #12]
    af98:	ldr	r1, [fp, #8]
    af9c:	mov	r2, #0
    afa0:	mov	r3, #1
    afa4:	str	r2, [sp, #20]
    afa8:	str	r3, [sp, #16]
    afac:	strh	r1, [sp, #24]
    afb0:	strh	r2, [sp, #26]
    afb4:	str	r0, [sp, #28]
    afb8:	mov	r0, #16
    afbc:	add	r1, sp, #16
    afc0:	mov	r2, #16
    afc4:	str	r0, [r4, #20]
    afc8:	ldr	r0, [r4]
    afcc:	bl	4830 <write@plt>
    afd0:	cmn	r0, #1
    afd4:	mov	r5, r0
    afd8:	ldrne	r6, [fp, #16]
    afdc:	cmpne	r6, #0
    afe0:	bne	b000 <pcapng_create@@Base+0x264>
    afe4:	ldr	r0, [r4, #20]
    afe8:	cmn	r5, #1
    afec:	str	r0, [r4, #24]
    aff0:	bne	b0b8 <pcapng_create@@Base+0x31c>
    aff4:	b	b1dc <pcapng_create@@Base+0x440>
    aff8:	mov	r9, #7
    affc:	b	b1dc <pcapng_create@@Base+0x440>
    b000:	ldrh	r0, [r6]
    b004:	str	sl, [sp, #12]
    b008:	cmp	r0, #0
    b00c:	beq	b0a8 <pcapng_create@@Base+0x30c>
    b010:	ldr	sl, [pc, #492]	; b204 <pcapng_create@@Base+0x468>
    b014:	movw	r8, #65532	; 0xfffc
    b018:	movt	r8, #1
    b01c:	add	sl, pc, sl
    b020:	ldrh	r7, [r6, #2]
    b024:	cmp	r7, #0
    b028:	beq	b0a8 <pcapng_create@@Base+0x30c>
    b02c:	ldr	r0, [r4]
    b030:	add	r2, r7, #4
    b034:	mov	r1, r6
    b038:	bl	4830 <write@plt>
    b03c:	mov	r5, r0
    b040:	add	r0, r7, #3
    b044:	and	r9, r0, r8
    b048:	subs	r0, r9, r7
    b04c:	cmnne	r5, #1
    b050:	beq	b080 <pcapng_create@@Base+0x2e4>
    b054:	add	r0, r7, #1
    b058:	sub	r7, r0, r9
    b05c:	ldr	r0, [r4]
    b060:	mov	r1, sl
    b064:	mov	r2, #1
    b068:	bl	4830 <write@plt>
    b06c:	cmp	r7, #0
    b070:	mov	r5, r0
    b074:	addne	r7, r7, #1
    b078:	cmnne	r5, #1
    b07c:	bne	b05c <pcapng_create@@Base+0x2c0>
    b080:	ldr	r1, [r4, #20]
    b084:	add	r0, r9, #4
    b088:	cmn	r5, #1
    b08c:	add	r1, r1, r0
    b090:	str	r1, [r4, #20]
    b094:	beq	b1d0 <pcapng_create@@Base+0x434>
    b098:	add	r6, r6, r0
    b09c:	ldrh	r0, [r6]
    b0a0:	cmp	r0, #0
    b0a4:	bne	b020 <pcapng_create@@Base+0x284>
    b0a8:	ldr	r0, [r4, #20]
    b0ac:	ldr	sl, [sp, #12]
    b0b0:	mov	r9, #6
    b0b4:	str	r0, [r4, #24]
    b0b8:	ldr	r1, [fp, #20]
    b0bc:	add	r1, r1, sl
    b0c0:	add	r1, r1, r0
    b0c4:	add	r1, r1, #3
    b0c8:	udiv	r1, r1, sl
    b0cc:	mul	r1, r1, sl
    b0d0:	subs	r7, r1, r0
    b0d4:	str	r1, [r4, #20]
    b0d8:	beq	b108 <pcapng_create@@Base+0x36c>
    b0dc:	ldr	r6, [pc, #292]	; b208 <pcapng_create@@Base+0x46c>
    b0e0:	add	r6, pc, r6
    b0e4:	ldr	r0, [r4]
    b0e8:	mov	r1, r6
    b0ec:	mov	r2, #1
    b0f0:	bl	4830 <write@plt>
    b0f4:	mov	r5, r0
    b0f8:	subs	r7, r7, #1
    b0fc:	cmnne	r5, #1
    b100:	bne	b0e4 <pcapng_create@@Base+0x348>
    b104:	ldr	r1, [r4, #20]
    b108:	ldr	r0, [r4]
    b10c:	ldr	r2, [r4, #8]
    b110:	mov	r3, #1
    b114:	stm	sp, {r0, r2}
    b118:	mov	r0, #0
    b11c:	mov	r2, #3
    b120:	bl	477c <mmap@plt>
    b124:	cmn	r5, #1
    b128:	str	r0, [r4, #16]
    b12c:	beq	b1dc <pcapng_create@@Base+0x440>
    b130:	cmn	r0, #1
    b134:	mov	r9, #7
    b138:	beq	b1dc <pcapng_create@@Base+0x440>
    b13c:	ldmib	r4, {r0, r1, r2}
    b140:	ldr	r3, [pc, #196]	; b20c <pcapng_create@@Base+0x470>
    b144:	mov	r9, #0
    b148:	sub	r1, r1, r2
    b14c:	add	r3, pc, r3
    b150:	sub	r1, r1, #12
    b154:	strh	r1, [r3, #2]
    b158:	ldr	r1, [pc, #176]	; b210 <pcapng_create@@Base+0x474>
    b15c:	ldr	r1, [pc, r1]
    b160:	str	r1, [r0, r2]
    b164:	ldmib	r4, {r0, r1}
    b168:	bic	r2, r1, #3
    b16c:	str	r1, [r0, #4]
    b170:	add	r0, r0, r2
    b174:	str	r1, [r0, #-4]
    b178:	ldr	r0, [r4, #20]
    b17c:	ldr	r1, [r4, #24]
    b180:	sub	r0, r0, r1
    b184:	sub	r0, r0, #12
    b188:	strh	r0, [r3, #2]
    b18c:	ldr	r0, [r4, #16]
    b190:	ldr	r2, [pc, #124]	; b214 <pcapng_create@@Base+0x478>
    b194:	ldr	r2, [pc, r2]
    b198:	str	r2, [r0, r1]
    b19c:	ldr	r1, [r4, #20]
    b1a0:	ldr	r0, [r4, #16]
    b1a4:	bic	r2, r1, #3
    b1a8:	str	r1, [r0, #4]
    b1ac:	add	r0, r0, r2
    b1b0:	str	r1, [r0, #-4]
    b1b4:	ldr	r0, [r4, #4]
    b1b8:	ldr	r1, [r4, #20]
    b1bc:	str	r9, [r0, #20]
    b1c0:	str	r1, [r0, #16]
    b1c4:	b	b1e4 <pcapng_create@@Base+0x448>
    b1c8:	str	r1, [r4, #12]
    b1cc:	b	b1d8 <pcapng_create@@Base+0x43c>
    b1d0:	ldr	r0, [r4, #20]
    b1d4:	str	r0, [r4, #24]
    b1d8:	mov	r9, #6
    b1dc:	mov	r0, r4
    b1e0:	bl	48b4 <pcapng_close@plt>
    b1e4:	mov	r0, r9
    b1e8:	sub	sp, fp, #48	; 0x30
    b1ec:	vpop	{d8-d9}
    b1f0:	add	sp, sp, #4
    b1f4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
    b1f8:	andeq	r9, r0, r4, lsl r3
    b1fc:	andeq	r9, r0, r4, asr #5
    b200:	strdeq	r9, [r0], -r4
    b204:	andeq	r9, r0, r4, lsl r1
    b208:	andeq	r9, r0, r0, asr r0
    b20c:	andeq	fp, r1, r4, lsl r0
    b210:	andeq	fp, r1, r4
    b214:	andeq	sl, r1, ip, asr #31

0000b218 <pcapng_close@@Base>:
    b218:	push	{r4, sl, fp, lr}
    b21c:	add	fp, sp, #8
    b220:	mov	r4, r0
    b224:	ldr	r0, [r0, #16]
    b228:	add	r1, r0, #1
    b22c:	cmp	r1, #2
    b230:	bcc	b23c <pcapng_close@@Base+0x24>
    b234:	ldr	r1, [r4, #20]
    b238:	bl	486c <munmap@plt>
    b23c:	ldr	r0, [r4, #4]
    b240:	add	r1, r0, #1
    b244:	cmp	r1, #2
    b248:	bcc	b254 <pcapng_close@@Base+0x3c>
    b24c:	ldr	r1, [r4, #8]
    b250:	bl	486c <munmap@plt>
    b254:	ldr	r0, [r4]
    b258:	cmn	r0, #1
    b25c:	beq	b264 <pcapng_close@@Base+0x4c>
    b260:	bl	48e4 <close@plt>
    b264:	mov	r0, #0
    b268:	pop	{r4, sl, fp, pc}

0000b26c <pcapng_append_section_option@@Base>:
    b26c:	push	{r4, r5, fp, lr}
    b270:	add	fp, sp, #8
    b274:	mov	r4, r0
    b278:	mov	r0, #1
    b27c:	cmp	r4, #0
    b280:	ldrne	r2, [r4]
    b284:	cmnne	r2, #1
    b288:	beq	b2b0 <pcapng_append_section_option@@Base+0x44>
    b28c:	ldr	r2, [r4, #4]
    b290:	mov	r0, #5
    b294:	add	r3, r2, #1
    b298:	cmp	r3, #2
    b29c:	popcc	{r4, r5, fp, pc}
    b2a0:	cmp	r1, #0
    b2a4:	ldrne	r3, [r4, #12]
    b2a8:	cmpne	r3, #0
    b2ac:	bne	b2b4 <pcapng_append_section_option@@Base+0x48>
    b2b0:	pop	{r4, r5, fp, pc}
    b2b4:	ldrh	r5, [r1, #2]
    b2b8:	add	r0, r2, r3
    b2bc:	add	r2, r5, #4
    b2c0:	bl	45fc <memcpy@plt>
    b2c4:	movw	r1, #65532	; 0xfffc
    b2c8:	add	r0, r5, #7
    b2cc:	movt	r1, #1
    b2d0:	and	r0, r0, r1
    b2d4:	ldmib	r4, {r1, r2, r3}
    b2d8:	add	r0, r0, r3
    b2dc:	str	r0, [r4, #12]
    b2e0:	sub	r2, r2, r0
    b2e4:	ldr	r3, [pc, #28]	; b308 <pcapng_append_section_option@@Base+0x9c>
    b2e8:	sub	r2, r2, #12
    b2ec:	add	r3, pc, r3
    b2f0:	strh	r2, [r3, #2]
    b2f4:	ldr	r2, [pc, #16]	; b30c <pcapng_append_section_option@@Base+0xa0>
    b2f8:	ldr	r2, [pc, r2]
    b2fc:	str	r2, [r1, r0]
    b300:	mov	r0, #0
    b304:	pop	{r4, r5, fp, pc}
    b308:	andeq	sl, r1, r4, ror lr
    b30c:	andeq	sl, r1, r8, ror #28

0000b310 <pcapng_append_interface_option@@Base>:
    b310:	push	{r4, r5, fp, lr}
    b314:	add	fp, sp, #8
    b318:	mov	r4, r0
    b31c:	mov	r0, #1
    b320:	cmp	r4, #0
    b324:	ldrne	r2, [r4]
    b328:	cmnne	r2, #1
    b32c:	beq	b354 <pcapng_append_interface_option@@Base+0x44>
    b330:	ldr	r2, [r4, #16]
    b334:	mov	r0, #5
    b338:	add	r3, r2, #1
    b33c:	cmp	r3, #2
    b340:	popcc	{r4, r5, fp, pc}
    b344:	cmp	r1, #0
    b348:	ldrne	r3, [r4, #24]
    b34c:	cmpne	r3, #0
    b350:	bne	b358 <pcapng_append_interface_option@@Base+0x48>
    b354:	pop	{r4, r5, fp, pc}
    b358:	ldrh	r5, [r1, #2]
    b35c:	add	r0, r2, r3
    b360:	add	r2, r5, #4
    b364:	bl	45fc <memcpy@plt>
    b368:	movw	r1, #65532	; 0xfffc
    b36c:	add	r0, r5, #7
    b370:	add	r3, r4, #16
    b374:	movt	r1, #1
    b378:	and	r0, r0, r1
    b37c:	ldm	r3, {r1, r2, r3}
    b380:	add	r0, r0, r3
    b384:	str	r0, [r4, #24]
    b388:	sub	r2, r2, r0
    b38c:	ldr	r3, [pc, #28]	; b3b0 <pcapng_append_interface_option@@Base+0xa0>
    b390:	sub	r2, r2, #12
    b394:	add	r3, pc, r3
    b398:	strh	r2, [r3, #2]
    b39c:	ldr	r2, [pc, #16]	; b3b4 <pcapng_append_interface_option@@Base+0xa4>
    b3a0:	ldr	r2, [pc, r2]
    b3a4:	str	r2, [r1, r0]
    b3a8:	mov	r0, #0
    b3ac:	pop	{r4, r5, fp, pc}
    b3b0:	andeq	sl, r1, ip, asr #27
    b3b4:	andeq	sl, r1, r0, asr #27

0000b3b8 <pcapng_append_packet@@Base>:
    b3b8:	push	{r4, r5, fp, lr}
    b3bc:	add	fp, sp, #8
    b3c0:	mov	r4, r0
    b3c4:	mov	r0, #1
    b3c8:	cmp	r4, #0
    b3cc:	ldrne	r2, [r4]
    b3d0:	cmnne	r2, #1
    b3d4:	bne	b3dc <pcapng_append_packet@@Base+0x24>
    b3d8:	pop	{r4, r5, fp, pc}
    b3dc:	ldr	r5, [r1, #4]
    b3e0:	mov	r0, r2
    b3e4:	mov	r2, r5
    b3e8:	bl	4830 <write@plt>
    b3ec:	mov	r1, r0
    b3f0:	mov	r0, #0
    b3f4:	cmn	r1, #1
    b3f8:	popeq	{r4, r5, fp, pc}
    b3fc:	ldr	r1, [r4, #4]
    b400:	ldr	r2, [r1, #16]
    b404:	ldr	r3, [r1, #20]
    b408:	adds	r2, r2, r5
    b40c:	str	r2, [r1, #16]
    b410:	adc	r2, r3, #0
    b414:	str	r2, [r1, #20]
    b418:	pop	{r4, r5, fp, pc}

0000b41c <btbb_pcapng_create_file@@Base>:
    b41c:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
    b420:	add	fp, sp, #24
    b424:	sub	sp, sp, #280	; 0x118
    b428:	mov	r6, r0
    b42c:	mov	r0, #28
    b430:	mov	r8, r2
    b434:	mov	r5, r1
    b438:	bl	46f8 <malloc@plt>
    b43c:	cmp	r0, #0
    b440:	beq	b508 <btbb_pcapng_create_file@@Base+0xec>
    b444:	add	r9, sp, #16
    b448:	mov	r4, r0
    b44c:	mov	r1, #0
    b450:	movw	r2, #258	; 0x102
    b454:	mov	r7, #0
    b458:	orr	r0, r9, #2
    b45c:	bl	47e8 <memset@plt>
    b460:	mov	r0, #3
    b464:	cmp	r5, #0
    b468:	strh	r0, [sp, #16]
    b46c:	beq	b49c <btbb_pcapng_create_file@@Base+0x80>
    b470:	add	r7, r9, #4
    b474:	mov	r1, r5
    b478:	mov	r2, #256	; 0x100
    b47c:	mov	r0, r7
    b480:	bl	4800 <strncpy@plt>
    b484:	mov	r0, #0
    b488:	strb	r0, [sp, #275]	; 0x113
    b48c:	mov	r0, r7
    b490:	bl	4764 <strlen@plt>
    b494:	mov	r7, r9
    b498:	strh	r0, [sp, #18]
    b49c:	bl	47ac <getpagesize@plt>
    b4a0:	mov	r3, r0
    b4a4:	mov	r1, #255	; 0xff
    b4a8:	mov	r0, #400	; 0x190
    b4ac:	str	r1, [sp]
    b4b0:	stmib	sp, {r0, r7}
    b4b4:	str	r3, [sp, #12]
    b4b8:	mov	r0, r4
    b4bc:	mov	r1, r6
    b4c0:	ldr	r2, [pc, #88]	; b520 <btbb_pcapng_create_file@@Base+0x104>
    b4c4:	ldr	r2, [pc, r2]
    b4c8:	bl	465c <pcapng_create@plt>
    b4cc:	mov	r5, r0
    b4d0:	cmp	r0, #0
    b4d4:	bne	b4f8 <btbb_pcapng_create_file@@Base+0xdc>
    b4d8:	mov	r0, r4
    b4dc:	mov	r1, r7
    b4e0:	bl	bab4 <lell_pcapng_close@@Base+0x28>
    b4e4:	cmp	r0, #0
    b4e8:	beq	b510 <btbb_pcapng_create_file@@Base+0xf4>
    b4ec:	mov	r5, r0
    b4f0:	mov	r0, r4
    b4f4:	bl	48b4 <pcapng_close@plt>
    b4f8:	mov	r0, r4
    b4fc:	bl	45d8 <free@plt>
    b500:	rsb	r0, r5, #0
    b504:	b	b518 <btbb_pcapng_create_file@@Base+0xfc>
    b508:	mvn	r0, #4
    b50c:	b	b518 <btbb_pcapng_create_file@@Base+0xfc>
    b510:	str	r4, [r8]
    b514:	mov	r0, #0
    b518:	sub	sp, fp, #24
    b51c:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
    b520:	muleq	r1, r0, ip

0000b524 <btbb_pcapng_append_packet@@Base>:
    b524:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
    b528:	add	fp, sp, #28
    b52c:	sub	sp, sp, #476	; 0x1dc
    b530:	ldr	r4, [fp, #24]
    b534:	str	r0, [fp, #-488]	; 0xfffffe18
    b538:	str	r3, [fp, #-496]	; 0xfffffe10
    b53c:	str	r2, [fp, #-492]	; 0xfffffe14
    b540:	mov	r0, r4
    b544:	bl	4758 <btbb_packet_get_payload_length@plt>
    b548:	mov	r5, r0
    b54c:	add	r0, r0, #7
    b550:	bic	r0, r0, #7
    b554:	sub	r1, sp, r0
    b558:	mov	sp, r1
    b55c:	mov	r0, r4
    b560:	str	r1, [fp, #-500]	; 0xfffffe0c
    b564:	bl	4584 <btbb_get_payload_packed@plt>
    b568:	mov	r0, r4
    b56c:	bl	4884 <btbb_packet_get_channel@plt>
    b570:	mov	r7, r0
    b574:	mov	r0, r4
    b578:	bl	45f0 <btbb_packet_get_ac_errors@plt>
    b57c:	mov	r8, r0
    b580:	mov	r0, r4
    b584:	bl	47c4 <btbb_packet_get_transport@plt>
    b588:	mov	r9, r0
    b58c:	mov	r0, r4
    b590:	bl	45e4 <btbb_packet_get_modulation@plt>
    b594:	mov	sl, r0
    b598:	mov	r0, r4
    b59c:	bl	4818 <btbb_packet_get_lap@plt>
    b5a0:	mov	r6, r0
    b5a4:	mov	r0, r4
    b5a8:	bl	4788 <btbb_packet_get_header_packed@plt>
    b5ac:	mov	r1, #6
    b5b0:	cmp	r5, #400	; 0x190
    b5b4:	ldr	r3, [fp, #20]
    b5b8:	sub	lr, fp, #256	; 0x100
    b5bc:	mov	r4, #3
    b5c0:	str	r1, [fp, #-484]	; 0xfffffe1c
    b5c4:	ldr	r1, [fp, #-496]	; 0xfffffe10
    b5c8:	movge	r5, #400	; 0x190
    b5cc:	str	r1, [fp, #-472]	; 0xfffffe28
    b5d0:	ldr	r1, [fp, #-492]	; 0xfffffe14
    b5d4:	str	r1, [fp, #-468]	; 0xfffffe2c
    b5d8:	add	r1, r5, #22
    b5dc:	str	r1, [fp, #-464]	; 0xfffffe30
    b5e0:	str	r1, [fp, #-460]	; 0xfffffe34
    b5e4:	mov	r1, #0
    b5e8:	strb	r7, [fp, #-456]	; 0xfffffe38
    b5ec:	add	r7, r5, #61	; 0x3d
    b5f0:	str	r1, [fp, #-476]	; 0xfffffe24
    b5f4:	orr	r1, sl, r9, lsl #4
    b5f8:	strb	r8, [fp, #-453]	; 0xfffffe3b
    b5fc:	sub	r8, lr, #194	; 0xc2
    b600:	mov	r9, #0
    b604:	strb	r1, [fp, #-452]	; 0xfffffe3c
    b608:	ldr	r1, [fp, #16]
    b60c:	strb	r9, [fp, #-451]	; 0xfffffe3d
    b610:	strh	r9, [r8]
    b614:	str	r6, [fp, #-448]	; 0xfffffe40
    b618:	bic	r6, r7, #3
    b61c:	str	r6, [fp, #-480]	; 0xfffffe20
    b620:	bic	r2, r1, #-16777216	; 0xff000000
    b624:	orr	r2, r2, r3, lsl #24
    b628:	str	r2, [fp, #-444]	; 0xfffffe44
    b62c:	ldr	r2, [fp, #8]
    b630:	strb	r2, [fp, #-455]	; 0xfffffe39
    b634:	str	r0, [fp, #-440]	; 0xfffffe48
    b638:	ldr	r0, [fp, #12]
    b63c:	cmp	r0, r2
    b640:	strb	r0, [fp, #-454]	; 0xfffffe3a
    b644:	movwlt	r4, #7
    b648:	cmn	r1, #1
    b64c:	orrne	r4, r4, #16
    b650:	cmp	r3, #255	; 0xff
    b654:	orrne	r4, r4, #128	; 0x80
    b658:	cmp	r5, #0
    b65c:	strh	r4, [r8, #14]
    b660:	beq	b684 <btbb_pcapng_append_packet@@Base+0x160>
    b664:	cmp	r5, #400	; 0x190
    b668:	bhi	b6b0 <btbb_pcapng_append_packet@@Base+0x18c>
    b66c:	ldr	r1, [fp, #-500]	; 0xfffffe0c
    b670:	sub	r0, fp, #484	; 0x1e4
    b674:	mov	r2, r5
    b678:	add	r0, r0, #50	; 0x32
    b67c:	bl	45fc <memcpy@plt>
    b680:	orr	r4, r4, #32
    b684:	lsr	r0, r7, #2
    b688:	sub	r1, fp, #484	; 0x1e4
    b68c:	strh	r4, [r8, #14]
    b690:	add	r0, r1, r0, lsl #2
    b694:	str	r9, [r0, #-8]
    b698:	str	r6, [r0, #-4]
    b69c:	ldr	r0, [fp, #-488]	; 0xfffffe18
    b6a0:	bl	47b8 <pcapng_append_packet@plt>
    b6a4:	rsb	r0, r0, #0
    b6a8:	sub	sp, fp, #28
    b6ac:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
    b6b0:	ldr	r0, [pc, #24]	; b6d0 <btbb_pcapng_append_packet@@Base+0x1ac>
    b6b4:	ldr	r1, [pc, #24]	; b6d4 <btbb_pcapng_append_packet@@Base+0x1b0>
    b6b8:	ldr	r3, [pc, #24]	; b6d8 <btbb_pcapng_append_packet@@Base+0x1b4>
    b6bc:	mov	r2, #221	; 0xdd
    b6c0:	add	r0, pc, r0
    b6c4:	add	r1, pc, r1
    b6c8:	add	r3, pc, r3
    b6cc:	bl	48f0 <__assert_fail@plt>
    b6d0:	muleq	r0, lr, r8
    b6d4:	andeq	r8, r0, r5, lsl #21
    b6d8:	andeq	r8, r0, lr, asr #21

0000b6dc <btbb_pcapng_record_bdaddr@@Base>:
    b6dc:	push	{fp, lr}
    b6e0:	mov	fp, sp
    b6e4:	sub	sp, sp, #16
    b6e8:	movw	r1, #54080	; 0xd340
    b6ec:	strb	r2, [sp, #8]
    b6f0:	movt	r1, #12
    b6f4:	str	r1, [sp, #4]
    b6f8:	lsr	r1, r2, #8
    b6fc:	strb	r3, [sp, #12]
    b700:	strb	r1, [sp, #9]
    b704:	lsr	r1, r2, #16
    b708:	strb	r1, [sp, #10]
    b70c:	lsr	r1, r2, #24
    b710:	strb	r1, [sp, #11]
    b714:	lsr	r1, r3, #8
    b718:	strb	r1, [sp, #13]
    b71c:	ldr	r1, [fp, #8]
    b720:	strb	r1, [sp, #14]
    b724:	ldr	r1, [fp, #12]
    b728:	strb	r1, [sp, #15]
    b72c:	add	r1, sp, #4
    b730:	bl	45cc <pcapng_append_interface_option@plt>
    b734:	rsb	r0, r0, #0
    b738:	mov	sp, fp
    b73c:	pop	{fp, pc}

0000b740 <btbb_pcapng_record_btclock@@Base>:
    b740:	push	{fp, lr}
    b744:	mov	fp, sp
    b748:	sub	sp, sp, #24
    b74c:	movw	r1, #54081	; 0xd341
    b750:	movt	r1, #24
    b754:	str	r1, [sp]
    b758:	ldr	r1, [fp, #12]
    b75c:	str	r2, [sp, #12]
    b760:	str	r1, [sp, #8]
    b764:	ldr	r1, [fp, #8]
    b768:	str	r1, [sp, #4]
    b76c:	ldr	r1, [fp, #16]
    b770:	str	r1, [sp, #16]
    b774:	ldr	r1, [fp, #20]
    b778:	str	r1, [sp, #20]
    b77c:	mov	r1, sp
    b780:	bl	45cc <pcapng_append_interface_option@plt>
    b784:	rsb	r0, r0, #0
    b788:	mov	sp, fp
    b78c:	pop	{fp, pc}

0000b790 <btbb_pcapng_close@@Base>:
    b790:	push	{r4, sl, fp, lr}
    b794:	add	fp, sp, #8
    b798:	mov	r4, r0
    b79c:	bl	48b4 <pcapng_close@plt>
    b7a0:	cmp	r4, #0
    b7a4:	beq	b7b0 <btbb_pcapng_close@@Base+0x20>
    b7a8:	mov	r0, r4
    b7ac:	bl	45d8 <free@plt>
    b7b0:	mvn	r0, #0
    b7b4:	pop	{r4, sl, fp, pc}

0000b7b8 <lell_pcapng_create_file@@Base>:
    b7b8:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
    b7bc:	add	fp, sp, #24
    b7c0:	sub	sp, sp, #280	; 0x118
    b7c4:	mov	r6, r0
    b7c8:	mov	r0, #28
    b7cc:	mov	r8, r2
    b7d0:	mov	r5, r1
    b7d4:	bl	46f8 <malloc@plt>
    b7d8:	cmp	r0, #0
    b7dc:	beq	b8a4 <lell_pcapng_create_file@@Base+0xec>
    b7e0:	add	r9, sp, #16
    b7e4:	mov	r4, r0
    b7e8:	mov	r1, #0
    b7ec:	movw	r2, #258	; 0x102
    b7f0:	mov	r7, #0
    b7f4:	orr	r0, r9, #2
    b7f8:	bl	47e8 <memset@plt>
    b7fc:	mov	r0, #3
    b800:	cmp	r5, #0
    b804:	strh	r0, [sp, #16]
    b808:	beq	b838 <lell_pcapng_create_file@@Base+0x80>
    b80c:	add	r7, r9, #4
    b810:	mov	r1, r5
    b814:	mov	r2, #256	; 0x100
    b818:	mov	r0, r7
    b81c:	bl	4800 <strncpy@plt>
    b820:	mov	r0, #0
    b824:	strb	r0, [sp, #275]	; 0x113
    b828:	mov	r0, r7
    b82c:	bl	4764 <strlen@plt>
    b830:	mov	r7, r9
    b834:	strh	r0, [sp, #18]
    b838:	bl	47ac <getpagesize@plt>
    b83c:	mov	r3, r0
    b840:	mov	r1, #256	; 0x100
    b844:	mov	r0, #64	; 0x40
    b848:	str	r1, [sp]
    b84c:	stmib	sp, {r0, r7}
    b850:	str	r3, [sp, #12]
    b854:	mov	r0, r4
    b858:	mov	r1, r6
    b85c:	ldr	r2, [pc, #88]	; b8bc <lell_pcapng_create_file@@Base+0x104>
    b860:	ldr	r2, [pc, r2]
    b864:	bl	465c <pcapng_create@plt>
    b868:	mov	r5, r0
    b86c:	cmp	r0, #0
    b870:	bne	b894 <lell_pcapng_create_file@@Base+0xdc>
    b874:	mov	r0, r4
    b878:	mov	r1, r7
    b87c:	bl	bab4 <lell_pcapng_close@@Base+0x28>
    b880:	cmp	r0, #0
    b884:	beq	b8ac <lell_pcapng_create_file@@Base+0xf4>
    b888:	mov	r5, r0
    b88c:	mov	r0, r4
    b890:	bl	48b4 <pcapng_close@plt>
    b894:	mov	r0, r4
    b898:	bl	45d8 <free@plt>
    b89c:	rsb	r0, r5, #0
    b8a0:	b	b8b4 <lell_pcapng_create_file@@Base+0xfc>
    b8a4:	mvn	r0, #4
    b8a8:	b	b8b4 <lell_pcapng_create_file@@Base+0xfc>
    b8ac:	str	r4, [r8]
    b8b0:	mov	r0, #0
    b8b4:	sub	sp, fp, #24
    b8b8:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
    b8bc:	strdeq	sl, [r1], -r4

0000b8c0 <lell_pcapng_append_packet@@Base>:
    b8c0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
    b8c4:	add	fp, sp, #28
    b8c8:	sub	sp, sp, #372	; 0x174
    b8cc:	ldr	sl, [fp, #20]
    b8d0:	str	r0, [sp, #12]
    b8d4:	mov	r8, r3
    b8d8:	mov	r9, r2
    b8dc:	mov	r0, sl
    b8e0:	bl	45a8 <lell_packet_is_data@plt>
    b8e4:	ldr	r1, [sl, #72]	; 0x48
    b8e8:	add	r2, r1, #9
    b8ec:	cmp	r2, #256	; 0x100
    b8f0:	bcs	ba14 <lell_pcapng_append_packet@@Base+0x154>
    b8f4:	add	r3, r1, #19
    b8f8:	add	r1, r1, #58	; 0x3a
    b8fc:	ldr	lr, [fp, #12]
    b900:	mov	r4, #6
    b904:	ldr	ip, [fp, #16]
    b908:	ldr	r5, [sl, #92]	; 0x5c
    b90c:	ldrb	r7, [sl, #69]	; 0x45
    b910:	clz	r0, r0
    b914:	str	r8, [sp, #4]
    b918:	bic	r6, r1, #3
    b91c:	lsr	r1, r1, #2
    b920:	lsr	r0, r0, #5
    b924:	str	r1, [sp, #8]
    b928:	ldr	r1, [fp, #8]
    b92c:	str	r6, [sp, #20]
    b930:	str	r4, [sp, #16]
    b934:	mov	r4, #0
    b938:	str	r4, [sp, #24]
    b93c:	str	r8, [sp, #28]
    b940:	str	r9, [sp, #32]
    b944:	str	r3, [sp, #36]	; 0x24
    b948:	str	r3, [sp, #40]	; 0x28
    b94c:	mov	r3, #35	; 0x23
    b950:	add	r4, sp, #16
    b954:	cmp	lr, r1
    b958:	strb	r1, [sp, #45]	; 0x2d
    b95c:	strb	lr, [sp, #46]	; 0x2e
    b960:	str	ip, [sp, #48]	; 0x30
    b964:	strb	r7, [sp, #44]	; 0x2c
    b968:	strb	r5, [sp, #47]	; 0x2f
    b96c:	mov	r1, sl
    b970:	mov	r5, sl
    b974:	movwlt	r3, #39	; 0x27
    b978:	orr	r0, r3, r0, lsl #4
    b97c:	strh	r0, [sp, #52]	; 0x34
    b980:	add	r0, r4, #38	; 0x26
    b984:	bl	45fc <memcpy@plt>
    b988:	ldr	r0, [sp, #8]
    b98c:	mov	r1, #0
    b990:	add	r0, r4, r0, lsl #2
    b994:	stmdb	r0, {r1, r6}
    b998:	mov	r1, r4
    b99c:	ldr	sl, [sp, #12]
    b9a0:	mov	r0, sl
    b9a4:	bl	47b8 <pcapng_append_packet@plt>
    b9a8:	rsb	r4, r0, #0
    b9ac:	cmp	r0, #0
    b9b0:	bne	ba08 <lell_pcapng_append_packet@@Base+0x148>
    b9b4:	mov	r0, r5
    b9b8:	bl	45a8 <lell_packet_is_data@plt>
    b9bc:	cmp	r0, #0
    b9c0:	bne	ba08 <lell_pcapng_append_packet@@Base+0x148>
    b9c4:	ldrb	r0, [r5, #80]	; 0x50
    b9c8:	cmp	r0, #5
    b9cc:	bne	ba08 <lell_pcapng_append_packet@@Base+0x148>
    b9d0:	movw	r0, #54144	; 0xd380
    b9d4:	str	r9, [fp, #-76]	; 0xffffffb4
    b9d8:	sub	r6, fp, #80	; 0x50
    b9dc:	mov	r1, r5
    b9e0:	mov	r2, #34	; 0x22
    b9e4:	movt	r0, #46	; 0x2e
    b9e8:	str	r0, [fp, #-80]	; 0xffffffb0
    b9ec:	ldr	r0, [sp, #4]
    b9f0:	str	r0, [fp, #-72]	; 0xffffffb8
    b9f4:	add	r0, r6, #12
    b9f8:	bl	45fc <memcpy@plt>
    b9fc:	mov	r0, sl
    ba00:	mov	r1, r6
    ba04:	bl	45cc <pcapng_append_interface_option@plt>
    ba08:	mov	r0, r4
    ba0c:	sub	sp, fp, #28
    ba10:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
    ba14:	ldr	r0, [pc, #24]	; ba34 <lell_pcapng_append_packet@@Base+0x174>
    ba18:	ldr	r1, [pc, #24]	; ba38 <lell_pcapng_append_packet@@Base+0x178>
    ba1c:	ldr	r3, [pc, #24]	; ba3c <lell_pcapng_append_packet@@Base+0x17c>
    ba20:	movw	r2, #441	; 0x1b9
    ba24:	add	r0, pc, r0
    ba28:	add	r1, pc, r1
    ba2c:	add	r3, pc, r3
    ba30:	bl	48f0 <__assert_fail@plt>
    ba34:	andeq	r8, r0, lr, lsr #17
    ba38:	andeq	r8, r0, r1, lsr #14
    ba3c:			; <UNDEFINED> instruction: 0x000088bf

0000ba40 <lell_pcapng_record_connect_req@@Base>:
    ba40:	push	{r4, r5, fp, lr}
    ba44:	add	fp, sp, #8
    ba48:	sub	sp, sp, #48	; 0x30
    ba4c:	ldr	r1, [fp, #8]
    ba50:	mov	r4, r0
    ba54:	movw	r0, #54144	; 0xd380
    ba58:	mov	r5, sp
    ba5c:	stmib	sp, {r2, r3}
    ba60:	mov	r2, #34	; 0x22
    ba64:	movt	r0, #46	; 0x2e
    ba68:	str	r0, [sp]
    ba6c:	add	r0, r5, #12
    ba70:	bl	45fc <memcpy@plt>
    ba74:	mov	r0, r4
    ba78:	mov	r1, r5
    ba7c:	bl	45cc <pcapng_append_interface_option@plt>
    ba80:	rsb	r0, r0, #0
    ba84:	sub	sp, fp, #8
    ba88:	pop	{r4, r5, fp, pc}

0000ba8c <lell_pcapng_close@@Base>:
    ba8c:	push	{r4, sl, fp, lr}
    ba90:	add	fp, sp, #8
    ba94:	mov	r4, r0
    ba98:	bl	48b4 <pcapng_close@plt>
    ba9c:	cmp	r4, #0
    baa0:	beq	baac <lell_pcapng_close@@Base+0x20>
    baa4:	mov	r0, r4
    baa8:	bl	45d8 <free@plt>
    baac:	mvn	r0, #0
    bab0:	pop	{r4, sl, fp, pc}
    bab4:	cmp	r1, #0
    bab8:	ldrhne	r3, [r1]
    babc:	cmpne	r3, #0
    bac0:	bne	bafc <lell_pcapng_close@@Base+0x70>
    bac4:	push	{fp, lr}
    bac8:	mov	fp, sp
    bacc:	sub	sp, sp, #8
    bad0:	ldr	r1, [pc, #100]	; bb3c <lell_pcapng_close@@Base+0xb0>
    bad4:	add	r1, pc, r1
    bad8:	ldrb	r1, [r1, #4]
    badc:	strb	r1, [sp, #4]
    bae0:	ldr	r1, [pc, #88]	; bb40 <lell_pcapng_close@@Base+0xb4>
    bae4:	ldr	r1, [pc, r1]
    bae8:	str	r1, [sp]
    baec:	mov	r1, sp
    baf0:	bl	45cc <pcapng_append_interface_option@plt>
    baf4:	mov	sp, fp
    baf8:	pop	{fp, pc}
    bafc:	movw	ip, #65532	; 0xfffc
    bb00:	movt	ip, #1
    bb04:	ldrh	r2, [r1, #2]
    bb08:	cmp	r2, #0
    bb0c:	beq	bac4 <lell_pcapng_close@@Base+0x38>
    bb10:	uxth	r3, r3
    bb14:	cmp	r3, #9
    bb18:	moveq	r0, #0
    bb1c:	bxeq	lr
    bb20:	add	r2, r2, #3
    bb24:	and	r2, r2, ip
    bb28:	add	r1, r1, r2
    bb2c:	ldrh	r3, [r1, #4]!
    bb30:	cmp	r3, #0
    bb34:	bne	bb04 <lell_pcapng_close@@Base+0x78>
    bb38:	b	bac4 <lell_pcapng_close@@Base+0x38>
    bb3c:	andeq	r8, r0, r0, ror r6
    bb40:	andeq	r8, r0, r0, ror #12
    bb44:	cmp	r3, #0
    bb48:	cmpeq	r2, #0
    bb4c:	bne	bb64 <lell_pcapng_close@@Base+0xd8>
    bb50:	cmp	r1, #0
    bb54:	cmpeq	r0, #0
    bb58:	mvnne	r1, #0
    bb5c:	mvnne	r0, #0
    bb60:	b	bb80 <lell_pcapng_close@@Base+0xf4>
    bb64:	sub	sp, sp, #8
    bb68:	push	{sp, lr}
    bb6c:	bl	bb90 <lell_pcapng_close@@Base+0x104>
    bb70:	ldr	lr, [sp, #4]
    bb74:	add	sp, sp, #8
    bb78:	pop	{r2, r3}
    bb7c:	bx	lr
    bb80:	push	{r1, lr}
    bb84:	mov	r0, #8
    bb88:	bl	4560 <raise@plt>
    bb8c:	pop	{r1, pc}
    bb90:	cmp	r1, r3
    bb94:	cmpeq	r0, r2
    bb98:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
    bb9c:	mov	r4, r0
    bba0:	movcc	r0, #0
    bba4:	mov	r5, r1
    bba8:	ldr	lr, [sp, #36]	; 0x24
    bbac:	movcc	r1, r0
    bbb0:	bcc	bcac <lell_pcapng_close@@Base+0x220>
    bbb4:	cmp	r3, #0
    bbb8:	clzeq	ip, r2
    bbbc:	clzne	ip, r3
    bbc0:	addeq	ip, ip, #32
    bbc4:	cmp	r5, #0
    bbc8:	clzeq	r1, r4
    bbcc:	addeq	r1, r1, #32
    bbd0:	clzne	r1, r5
    bbd4:	sub	ip, ip, r1
    bbd8:	sub	sl, ip, #32
    bbdc:	lsl	r9, r3, ip
    bbe0:	rsb	fp, ip, #32
    bbe4:	orr	r9, r9, r2, lsl sl
    bbe8:	orr	r9, r9, r2, lsr fp
    bbec:	lsl	r8, r2, ip
    bbf0:	cmp	r5, r9
    bbf4:	cmpeq	r4, r8
    bbf8:	movcc	r0, #0
    bbfc:	movcc	r1, r0
    bc00:	bcc	bc1c <lell_pcapng_close@@Base+0x190>
    bc04:	mov	r0, #1
    bc08:	subs	r4, r4, r8
    bc0c:	lsl	r1, r0, sl
    bc10:	orr	r1, r1, r0, lsr fp
    bc14:	lsl	r0, r0, ip
    bc18:	sbc	r5, r5, r9
    bc1c:	cmp	ip, #0
    bc20:	beq	bcac <lell_pcapng_close@@Base+0x220>
    bc24:	lsr	r6, r8, #1
    bc28:	orr	r6, r6, r9, lsl #31
    bc2c:	lsr	r7, r9, #1
    bc30:	mov	r2, ip
    bc34:	b	bc58 <lell_pcapng_close@@Base+0x1cc>
    bc38:	subs	r3, r4, r6
    bc3c:	sbc	r8, r5, r7
    bc40:	adds	r3, r3, r3
    bc44:	adc	r8, r8, r8
    bc48:	adds	r4, r3, #1
    bc4c:	adc	r5, r8, #0
    bc50:	subs	r2, r2, #1
    bc54:	beq	bc74 <lell_pcapng_close@@Base+0x1e8>
    bc58:	cmp	r5, r7
    bc5c:	cmpeq	r4, r6
    bc60:	bcs	bc38 <lell_pcapng_close@@Base+0x1ac>
    bc64:	adds	r4, r4, r4
    bc68:	adc	r5, r5, r5
    bc6c:	subs	r2, r2, #1
    bc70:	bne	bc58 <lell_pcapng_close@@Base+0x1cc>
    bc74:	lsr	r3, r4, ip
    bc78:	orr	r3, r3, r5, lsl fp
    bc7c:	lsr	r2, r5, ip
    bc80:	orr	r3, r3, r5, lsr sl
    bc84:	adds	r0, r0, r4
    bc88:	mov	r4, r3
    bc8c:	lsl	r3, r2, ip
    bc90:	orr	r3, r3, r4, lsl sl
    bc94:	lsl	ip, r4, ip
    bc98:	orr	r3, r3, r4, lsr fp
    bc9c:	adc	r1, r1, r5
    bca0:	subs	r0, r0, ip
    bca4:	mov	r5, r2
    bca8:	sbc	r1, r1, r3
    bcac:	cmp	lr, #0
    bcb0:	strdne	r4, [lr]
    bcb4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}

Disassembly of section .fini:

0000bcb8 <.fini>:
    bcb8:	push	{r3, lr}
    bcbc:	pop	{r3, pc}
