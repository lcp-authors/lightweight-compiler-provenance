
../repos/coreutils/src/vdir:     file format elf32-littlearm


Disassembly of section .init:

00011b68 <.init>:
   11b68:	push	{r3, lr}
   11b6c:	bl	120dc <__assert_fail@plt+0x50>
   11b70:	pop	{r3, pc}

Disassembly of section .plt:

00011b74 <calloc@plt-0x14>:
   11b74:	push	{lr}		; (str lr, [sp, #-4]!)
   11b78:	ldr	lr, [pc, #4]	; 11b84 <calloc@plt-0x4>
   11b7c:	add	lr, pc, lr
   11b80:	ldr	pc, [lr, #8]!
   11b84:	andeq	ip, r2, ip, ror r4

00011b88 <calloc@plt>:
   11b88:	add	ip, pc, #0, 12
   11b8c:	add	ip, ip, #44, 20	; 0x2c000
   11b90:	ldr	pc, [ip, #1148]!	; 0x47c

00011b94 <fputs_unlocked@plt>:
   11b94:	add	ip, pc, #0, 12
   11b98:	add	ip, ip, #44, 20	; 0x2c000
   11b9c:	ldr	pc, [ip, #1140]!	; 0x474

00011ba0 <cap_to_text@plt>:
   11ba0:	add	ip, pc, #0, 12
   11ba4:	add	ip, ip, #44, 20	; 0x2c000
   11ba8:	ldr	pc, [ip, #1132]!	; 0x46c

00011bac <raise@plt>:
   11bac:	add	ip, pc, #0, 12
   11bb0:	add	ip, ip, #44, 20	; 0x2c000
   11bb4:	ldr	pc, [ip, #1124]!	; 0x464

00011bb8 <gmtime_r@plt>:
   11bb8:	add	ip, pc, #0, 12
   11bbc:	add	ip, ip, #44, 20	; 0x2c000
   11bc0:	ldr	pc, [ip, #1116]!	; 0x45c

00011bc4 <getpwnam@plt>:
   11bc4:	add	ip, pc, #0, 12
   11bc8:	add	ip, ip, #44, 20	; 0x2c000
   11bcc:	ldr	pc, [ip, #1108]!	; 0x454

00011bd0 <strcmp@plt>:
   11bd0:	add	ip, pc, #0, 12
   11bd4:	add	ip, ip, #44, 20	; 0x2c000
   11bd8:	ldr	pc, [ip, #1100]!	; 0x44c

00011bdc <getpwuid@plt>:
   11bdc:	add	ip, pc, #0, 12
   11be0:	add	ip, ip, #44, 20	; 0x2c000
   11be4:	ldr	pc, [ip, #1092]!	; 0x444

00011be8 <mktime@plt>:
   11be8:	add	ip, pc, #0, 12
   11bec:	add	ip, ip, #44, 20	; 0x2c000
   11bf0:	ldr	pc, [ip, #1084]!	; 0x43c

00011bf4 <fflush@plt>:
   11bf4:	add	ip, pc, #0, 12
   11bf8:	add	ip, ip, #44, 20	; 0x2c000
   11bfc:	ldr	pc, [ip, #1076]!	; 0x434

00011c00 <wcwidth@plt>:
   11c00:	add	ip, pc, #0, 12
   11c04:	add	ip, ip, #44, 20	; 0x2c000
   11c08:	ldr	pc, [ip, #1068]!	; 0x42c

00011c0c <sigprocmask@plt>:
   11c0c:	add	ip, pc, #0, 12
   11c10:	add	ip, ip, #44, 20	; 0x2c000
   11c14:	ldr	pc, [ip, #1060]!	; 0x424

00011c18 <_setjmp@plt>:
   11c18:	add	ip, pc, #0, 12
   11c1c:	add	ip, ip, #44, 20	; 0x2c000
   11c20:	ldr	pc, [ip, #1052]!	; 0x41c

00011c24 <memmove@plt>:
   11c24:	add	ip, pc, #0, 12
   11c28:	add	ip, ip, #44, 20	; 0x2c000
   11c2c:	ldr	pc, [ip, #1044]!	; 0x414

00011c30 <free@plt>:
   11c30:	add	ip, pc, #0, 12
   11c34:	add	ip, ip, #44, 20	; 0x2c000
   11c38:	ldr	pc, [ip, #1036]!	; 0x40c

00011c3c <faccessat@plt>:
   11c3c:	add	ip, pc, #0, 12
   11c40:	add	ip, ip, #44, 20	; 0x2c000
   11c44:	ldr	pc, [ip, #1028]!	; 0x404

00011c48 <clock_gettime@plt>:
   11c48:	add	ip, pc, #0, 12
   11c4c:	add	ip, ip, #44, 20	; 0x2c000
   11c50:	ldr	pc, [ip, #1020]!	; 0x3fc

00011c54 <_exit@plt>:
   11c54:	add	ip, pc, #0, 12
   11c58:	add	ip, ip, #44, 20	; 0x2c000
   11c5c:	ldr	pc, [ip, #1012]!	; 0x3f4

00011c60 <memcpy@plt>:
   11c60:	add	ip, pc, #0, 12
   11c64:	add	ip, ip, #44, 20	; 0x2c000
   11c68:	ldr	pc, [ip, #1004]!	; 0x3ec

00011c6c <__strtoull_internal@plt>:
   11c6c:	add	ip, pc, #0, 12
   11c70:	add	ip, ip, #44, 20	; 0x2c000
   11c74:	ldr	pc, [ip, #996]!	; 0x3e4

00011c78 <mbsinit@plt>:
   11c78:	add	ip, pc, #0, 12
   11c7c:	add	ip, ip, #44, 20	; 0x2c000
   11c80:	ldr	pc, [ip, #988]!	; 0x3dc

00011c84 <signal@plt>:
   11c84:	add	ip, pc, #0, 12
   11c88:	add	ip, ip, #44, 20	; 0x2c000
   11c8c:	ldr	pc, [ip, #980]!	; 0x3d4

00011c90 <fwrite_unlocked@plt>:
   11c90:	add	ip, pc, #0, 12
   11c94:	add	ip, ip, #44, 20	; 0x2c000
   11c98:	ldr	pc, [ip, #972]!	; 0x3cc

00011c9c <stpcpy@plt>:
   11c9c:	add	ip, pc, #0, 12
   11ca0:	add	ip, ip, #44, 20	; 0x2c000
   11ca4:	ldr	pc, [ip, #964]!	; 0x3c4

00011ca8 <dcgettext@plt>:
   11ca8:	add	ip, pc, #0, 12
   11cac:	add	ip, ip, #44, 20	; 0x2c000
   11cb0:	ldr	pc, [ip, #956]!	; 0x3bc

00011cb4 <realloc@plt>:
   11cb4:	add	ip, pc, #0, 12
   11cb8:	add	ip, ip, #44, 20	; 0x2c000
   11cbc:	ldr	pc, [ip, #948]!	; 0x3b4

00011cc0 <sigismember@plt>:
   11cc0:	add	ip, pc, #0, 12
   11cc4:	add	ip, ip, #44, 20	; 0x2c000
   11cc8:	ldr	pc, [ip, #940]!	; 0x3ac

00011ccc <fgetfilecon@plt>:
   11ccc:	add	ip, pc, #0, 12
   11cd0:	add	ip, ip, #44, 20	; 0x2c000
   11cd4:	ldr	pc, [ip, #932]!	; 0x3a4

00011cd8 <localtime_r@plt>:
   11cd8:	add	ip, pc, #0, 12
   11cdc:	add	ip, ip, #44, 20	; 0x2c000
   11ce0:	ldr	pc, [ip, #924]!	; 0x39c

00011ce4 <textdomain@plt>:
   11ce4:	add	ip, pc, #0, 12
   11ce8:	add	ip, ip, #44, 20	; 0x2c000
   11cec:	ldr	pc, [ip, #916]!	; 0x394

00011cf0 <iswcntrl@plt>:
   11cf0:	add	ip, pc, #0, 12
   11cf4:	add	ip, ip, #44, 20	; 0x2c000
   11cf8:	ldr	pc, [ip, #908]!	; 0x38c

00011cfc <rawmemchr@plt>:
   11cfc:	add	ip, pc, #0, 12
   11d00:	add	ip, ip, #44, 20	; 0x2c000
   11d04:	ldr	pc, [ip, #900]!	; 0x384

00011d08 <fflush_unlocked@plt>:
   11d08:	add	ip, pc, #0, 12
   11d0c:	add	ip, ip, #44, 20	; 0x2c000
   11d10:	ldr	pc, [ip, #892]!	; 0x37c

00011d14 <iswprint@plt>:
   11d14:	add	ip, pc, #0, 12
   11d18:	add	ip, ip, #44, 20	; 0x2c000
   11d1c:	ldr	pc, [ip, #884]!	; 0x374

00011d20 <tzset@plt>:
   11d20:	add	ip, pc, #0, 12
   11d24:	add	ip, ip, #44, 20	; 0x2c000
   11d28:	ldr	pc, [ip, #876]!	; 0x36c

00011d2c <readlink@plt>:
   11d2c:	add	ip, pc, #0, 12
   11d30:	add	ip, ip, #44, 20	; 0x2c000
   11d34:	ldr	pc, [ip, #868]!	; 0x364

00011d38 <sigaction@plt>:
   11d38:	add	ip, pc, #0, 12
   11d3c:	add	ip, ip, #44, 20	; 0x2c000
   11d40:	ldr	pc, [ip, #860]!	; 0x35c

00011d44 <fwrite@plt>:
   11d44:	add	ip, pc, #0, 12
   11d48:	add	ip, ip, #44, 20	; 0x2c000
   11d4c:	ldr	pc, [ip, #852]!	; 0x354

00011d50 <ioctl@plt>:
   11d50:	add	ip, pc, #0, 12
   11d54:	add	ip, ip, #44, 20	; 0x2c000
   11d58:	ldr	pc, [ip, #844]!	; 0x34c

00011d5c <lseek64@plt>:
   11d5c:	add	ip, pc, #0, 12
   11d60:	add	ip, ip, #44, 20	; 0x2c000
   11d64:	ldr	pc, [ip, #836]!	; 0x344

00011d68 <__ctype_get_mb_cur_max@plt>:
   11d68:	add	ip, pc, #0, 12
   11d6c:	add	ip, ip, #44, 20	; 0x2c000
   11d70:	ldr	pc, [ip, #828]!	; 0x33c

00011d74 <strcpy@plt>:
   11d74:	add	ip, pc, #0, 12
   11d78:	add	ip, ip, #44, 20	; 0x2c000
   11d7c:	ldr	pc, [ip, #820]!	; 0x334

00011d80 <__fpending@plt>:
   11d80:	add	ip, pc, #0, 12
   11d84:	add	ip, ip, #44, 20	; 0x2c000
   11d88:	ldr	pc, [ip, #812]!	; 0x32c

00011d8c <mbrtowc@plt>:
   11d8c:	add	ip, pc, #0, 12
   11d90:	add	ip, ip, #44, 20	; 0x2c000
   11d94:	ldr	pc, [ip, #804]!	; 0x324

00011d98 <wcstombs@plt>:
   11d98:	add	ip, pc, #0, 12
   11d9c:	add	ip, ip, #44, 20	; 0x2c000
   11da0:	ldr	pc, [ip, #796]!	; 0x31c

00011da4 <error@plt>:
   11da4:	add	ip, pc, #0, 12
   11da8:	add	ip, ip, #44, 20	; 0x2c000
   11dac:	ldr	pc, [ip, #788]!	; 0x314

00011db0 <gethostname@plt>:
   11db0:	add	ip, pc, #0, 12
   11db4:	add	ip, ip, #44, 20	; 0x2c000
   11db8:	ldr	pc, [ip, #780]!	; 0x30c

00011dbc <opendir@plt>:
   11dbc:	add	ip, pc, #0, 12
   11dc0:	add	ip, ip, #44, 20	; 0x2c000
   11dc4:	ldr	pc, [ip, #772]!	; 0x304

00011dc8 <fnmatch@plt>:
   11dc8:	add	ip, pc, #0, 12
   11dcc:	add	ip, ip, #44, 20	; 0x2c000
   11dd0:	ldr	pc, [ip, #764]!	; 0x2fc

00011dd4 <strcoll@plt>:
   11dd4:	add	ip, pc, #0, 12
   11dd8:	add	ip, ip, #44, 20	; 0x2c000
   11ddc:	ldr	pc, [ip, #756]!	; 0x2f4

00011de0 <getenv@plt>:
   11de0:	add	ip, pc, #0, 12
   11de4:	add	ip, ip, #44, 20	; 0x2c000
   11de8:	ldr	pc, [ip, #748]!	; 0x2ec

00011dec <lgetfilecon@plt>:
   11dec:	add	ip, pc, #0, 12
   11df0:	add	ip, ip, #44, 20	; 0x2c000
   11df4:	ldr	pc, [ip, #740]!	; 0x2e4

00011df8 <malloc@plt>:
   11df8:	add	ip, pc, #0, 12
   11dfc:	add	ip, ip, #44, 20	; 0x2c000
   11e00:	ldr	pc, [ip, #732]!	; 0x2dc

00011e04 <sigaddset@plt>:
   11e04:	add	ip, pc, #0, 12
   11e08:	add	ip, ip, #44, 20	; 0x2c000
   11e0c:	ldr	pc, [ip, #724]!	; 0x2d4

00011e10 <__libc_start_main@plt>:
   11e10:	add	ip, pc, #0, 12
   11e14:	add	ip, ip, #44, 20	; 0x2c000
   11e18:	ldr	pc, [ip, #716]!	; 0x2cc

00011e1c <strftime@plt>:
   11e1c:	add	ip, pc, #0, 12
   11e20:	add	ip, ip, #44, 20	; 0x2c000
   11e24:	ldr	pc, [ip, #708]!	; 0x2c4

00011e28 <__freading@plt>:
   11e28:	add	ip, pc, #0, 12
   11e2c:	add	ip, ip, #44, 20	; 0x2c000
   11e30:	ldr	pc, [ip, #700]!	; 0x2bc

00011e34 <__ctype_tolower_loc@plt>:
   11e34:	add	ip, pc, #0, 12
   11e38:	add	ip, ip, #44, 20	; 0x2c000
   11e3c:	ldr	pc, [ip, #692]!	; 0x2b4

00011e40 <__ctype_toupper_loc@plt>:
   11e40:	add	ip, pc, #0, 12
   11e44:	add	ip, ip, #44, 20	; 0x2c000
   11e48:	ldr	pc, [ip, #684]!	; 0x2ac

00011e4c <__gmon_start__@plt>:
   11e4c:	add	ip, pc, #0, 12
   11e50:	add	ip, ip, #44, 20	; 0x2c000
   11e54:	ldr	pc, [ip, #676]!	; 0x2a4

00011e58 <getopt_long@plt>:
   11e58:	add	ip, pc, #0, 12
   11e5c:	add	ip, ip, #44, 20	; 0x2c000
   11e60:	ldr	pc, [ip, #668]!	; 0x29c

00011e64 <__ctype_b_loc@plt>:
   11e64:	add	ip, pc, #0, 12
   11e68:	add	ip, ip, #44, 20	; 0x2c000
   11e6c:	ldr	pc, [ip, #660]!	; 0x294

00011e70 <getcwd@plt>:
   11e70:	add	ip, pc, #0, 12
   11e74:	add	ip, ip, #44, 20	; 0x2c000
   11e78:	ldr	pc, [ip, #652]!	; 0x28c

00011e7c <exit@plt>:
   11e7c:	add	ip, pc, #0, 12
   11e80:	add	ip, ip, #44, 20	; 0x2c000
   11e84:	ldr	pc, [ip, #644]!	; 0x284

00011e88 <getfilecon@plt>:
   11e88:	add	ip, pc, #0, 12
   11e8c:	add	ip, ip, #44, 20	; 0x2c000
   11e90:	ldr	pc, [ip, #636]!	; 0x27c

00011e94 <bcmp@plt>:
   11e94:	add	ip, pc, #0, 12
   11e98:	add	ip, ip, #44, 20	; 0x2c000
   11e9c:	ldr	pc, [ip, #628]!	; 0x274

00011ea0 <tcgetpgrp@plt>:
   11ea0:	add	ip, pc, #0, 12
   11ea4:	add	ip, ip, #44, 20	; 0x2c000
   11ea8:	ldr	pc, [ip, #620]!	; 0x26c

00011eac <strlen@plt>:
   11eac:	add	ip, pc, #0, 12
   11eb0:	add	ip, ip, #44, 20	; 0x2c000
   11eb4:	ldr	pc, [ip, #612]!	; 0x264

00011eb8 <strchr@plt>:
   11eb8:	add	ip, pc, #0, 12
   11ebc:	add	ip, ip, #44, 20	; 0x2c000
   11ec0:	ldr	pc, [ip, #604]!	; 0x25c

00011ec4 <setenv@plt>:
   11ec4:	add	ip, pc, #0, 12
   11ec8:	add	ip, ip, #44, 20	; 0x2c000
   11ecc:	ldr	pc, [ip, #596]!	; 0x254

00011ed0 <__errno_location@plt>:
   11ed0:	add	ip, pc, #0, 12
   11ed4:	add	ip, ip, #44, 20	; 0x2c000
   11ed8:	ldr	pc, [ip, #588]!	; 0x24c

00011edc <__sprintf_chk@plt>:
   11edc:	add	ip, pc, #0, 12
   11ee0:	add	ip, ip, #44, 20	; 0x2c000
   11ee4:	ldr	pc, [ip, #580]!	; 0x244

00011ee8 <__cxa_atexit@plt>:
   11ee8:	add	ip, pc, #0, 12
   11eec:	add	ip, ip, #44, 20	; 0x2c000
   11ef0:	ldr	pc, [ip, #572]!	; 0x23c

00011ef4 <memset@plt>:
   11ef4:	add	ip, pc, #0, 12
   11ef8:	add	ip, ip, #44, 20	; 0x2c000
   11efc:	ldr	pc, [ip, #564]!	; 0x234

00011f00 <__printf_chk@plt>:
   11f00:	add	ip, pc, #0, 12
   11f04:	add	ip, ip, #44, 20	; 0x2c000
   11f08:	ldr	pc, [ip, #556]!	; 0x22c

00011f0c <stpncpy@plt>:
   11f0c:	add	ip, pc, #0, 12
   11f10:	add	ip, ip, #44, 20	; 0x2c000
   11f14:	ldr	pc, [ip, #548]!	; 0x224

00011f18 <fileno@plt>:
   11f18:	add	ip, pc, #0, 12
   11f1c:	add	ip, ip, #44, 20	; 0x2c000
   11f20:	ldr	pc, [ip, #540]!	; 0x21c

00011f24 <__fprintf_chk@plt>:
   11f24:	add	ip, pc, #0, 12
   11f28:	add	ip, ip, #44, 20	; 0x2c000
   11f2c:	ldr	pc, [ip, #532]!	; 0x214

00011f30 <fclose@plt>:
   11f30:	add	ip, pc, #0, 12
   11f34:	add	ip, ip, #44, 20	; 0x2c000
   11f38:	ldr	pc, [ip, #524]!	; 0x20c

00011f3c <fseeko64@plt>:
   11f3c:	add	ip, pc, #0, 12
   11f40:	add	ip, ip, #44, 20	; 0x2c000
   11f44:	ldr	pc, [ip, #516]!	; 0x204

00011f48 <statx@plt>:
   11f48:	add	ip, pc, #0, 12
   11f4c:	add	ip, ip, #44, 20	; 0x2c000
   11f50:	ldr	pc, [ip, #508]!	; 0x1fc

00011f54 <__overflow@plt>:
   11f54:	add	ip, pc, #0, 12
   11f58:	add	ip, ip, #44, 20	; 0x2c000
   11f5c:	ldr	pc, [ip, #500]!	; 0x1f4

00011f60 <setlocale@plt>:
   11f60:	add	ip, pc, #0, 12
   11f64:	add	ip, ip, #44, 20	; 0x2c000
   11f68:	ldr	pc, [ip, #492]!	; 0x1ec

00011f6c <sigemptyset@plt>:
   11f6c:	add	ip, pc, #0, 12
   11f70:	add	ip, ip, #44, 20	; 0x2c000
   11f74:	ldr	pc, [ip, #484]!	; 0x1e4

00011f78 <wcswidth@plt>:
   11f78:	add	ip, pc, #0, 12
   11f7c:	add	ip, ip, #44, 20	; 0x2c000
   11f80:	ldr	pc, [ip, #476]!	; 0x1dc

00011f84 <strrchr@plt>:
   11f84:	add	ip, pc, #0, 12
   11f88:	add	ip, ip, #44, 20	; 0x2c000
   11f8c:	ldr	pc, [ip, #468]!	; 0x1d4

00011f90 <cap_get_file@plt>:
   11f90:	add	ip, pc, #0, 12
   11f94:	add	ip, ip, #44, 20	; 0x2c000
   11f98:	ldr	pc, [ip, #460]!	; 0x1cc

00011f9c <nl_langinfo@plt>:
   11f9c:	add	ip, pc, #0, 12
   11fa0:	add	ip, ip, #44, 20	; 0x2c000
   11fa4:	ldr	pc, [ip, #452]!	; 0x1c4

00011fa8 <localeconv@plt>:
   11fa8:	add	ip, pc, #0, 12
   11fac:	add	ip, ip, #44, 20	; 0x2c000
   11fb0:	ldr	pc, [ip, #444]!	; 0x1bc

00011fb4 <mbstowcs@plt>:
   11fb4:	add	ip, pc, #0, 12
   11fb8:	add	ip, ip, #44, 20	; 0x2c000
   11fbc:	ldr	pc, [ip, #436]!	; 0x1b4

00011fc0 <readdir64@plt>:
   11fc0:	add	ip, pc, #0, 12
   11fc4:	add	ip, ip, #44, 20	; 0x2c000
   11fc8:	ldr	pc, [ip, #428]!	; 0x1ac

00011fcc <timegm@plt>:
   11fcc:	add	ip, pc, #0, 12
   11fd0:	add	ip, ip, #44, 20	; 0x2c000
   11fd4:	ldr	pc, [ip, #420]!	; 0x1a4

00011fd8 <cap_free@plt>:
   11fd8:	add	ip, pc, #0, 12
   11fdc:	add	ip, ip, #44, 20	; 0x2c000
   11fe0:	ldr	pc, [ip, #412]!	; 0x19c

00011fe4 <dirfd@plt>:
   11fe4:	add	ip, pc, #0, 12
   11fe8:	add	ip, ip, #44, 20	; 0x2c000
   11fec:	ldr	pc, [ip, #404]!	; 0x194

00011ff0 <freecon@plt>:
   11ff0:	add	ip, pc, #0, 12
   11ff4:	add	ip, ip, #44, 20	; 0x2c000
   11ff8:	ldr	pc, [ip, #396]!	; 0x18c

00011ffc <bindtextdomain@plt>:
   11ffc:	add	ip, pc, #0, 12
   12000:	add	ip, ip, #44, 20	; 0x2c000
   12004:	ldr	pc, [ip, #388]!	; 0x184

00012008 <__xstat64@plt>:
   12008:	add	ip, pc, #0, 12
   1200c:	add	ip, ip, #44, 20	; 0x2c000
   12010:	ldr	pc, [ip, #380]!	; 0x17c

00012014 <isatty@plt>:
   12014:	add	ip, pc, #0, 12
   12018:	add	ip, ip, #44, 20	; 0x2c000
   1201c:	ldr	pc, [ip, #372]!	; 0x174

00012020 <unsetenv@plt>:
   12020:	add	ip, pc, #0, 12
   12024:	add	ip, ip, #44, 20	; 0x2c000
   12028:	ldr	pc, [ip, #364]!	; 0x16c

0001202c <strncmp@plt>:
   1202c:	add	ip, pc, #0, 12
   12030:	add	ip, ip, #44, 20	; 0x2c000
   12034:	ldr	pc, [ip, #356]!	; 0x164

00012038 <abort@plt>:
   12038:	add	ip, pc, #0, 12
   1203c:	add	ip, ip, #44, 20	; 0x2c000
   12040:	ldr	pc, [ip, #348]!	; 0x15c

00012044 <closedir@plt>:
   12044:	add	ip, pc, #0, 12
   12048:	add	ip, ip, #44, 20	; 0x2c000
   1204c:	ldr	pc, [ip, #340]!	; 0x154

00012050 <getgrgid@plt>:
   12050:	add	ip, pc, #0, 12
   12054:	add	ip, ip, #44, 20	; 0x2c000
   12058:	ldr	pc, [ip, #332]!	; 0x14c

0001205c <getgrnam@plt>:
   1205c:	add	ip, pc, #0, 12
   12060:	add	ip, ip, #44, 20	; 0x2c000
   12064:	ldr	pc, [ip, #324]!	; 0x144

00012068 <__snprintf_chk@plt>:
   12068:	add	ip, pc, #0, 12
   1206c:	add	ip, ip, #44, 20	; 0x2c000
   12070:	ldr	pc, [ip, #316]!	; 0x13c

00012074 <strspn@plt>:
   12074:	add	ip, pc, #0, 12
   12078:	add	ip, ip, #44, 20	; 0x2c000
   1207c:	ldr	pc, [ip, #308]!	; 0x134

00012080 <__mempcpy_chk@plt>:
   12080:	add	ip, pc, #0, 12
   12084:	add	ip, ip, #44, 20	; 0x2c000
   12088:	ldr	pc, [ip, #300]!	; 0x12c

0001208c <__assert_fail@plt>:
   1208c:	add	ip, pc, #0, 12
   12090:	add	ip, ip, #44, 20	; 0x2c000
   12094:	ldr	pc, [ip, #292]!	; 0x124

Disassembly of section .text:

000120a0 <_obstack_begin@@Base-0x124c8>:
   120a0:	mov	fp, #0
   120a4:	mov	lr, #0
   120a8:	pop	{r1}		; (ldr r1, [sp], #4)
   120ac:	mov	r2, sp
   120b0:	push	{r2}		; (str r2, [sp, #-4]!)
   120b4:	push	{r0}		; (str r0, [sp, #-4]!)
   120b8:	ldr	ip, [pc, #16]	; 120d0 <__assert_fail@plt+0x44>
   120bc:	push	{ip}		; (str ip, [sp, #-4]!)
   120c0:	ldr	r0, [pc, #12]	; 120d4 <__assert_fail@plt+0x48>
   120c4:	ldr	r3, [pc, #12]	; 120d8 <__assert_fail@plt+0x4c>
   120c8:	bl	11e10 <__libc_start_main@plt>
   120cc:	bl	12038 <abort@plt>
   120d0:	strdeq	r9, [r2], -r0
   120d4:	muleq	r1, r0, r1
   120d8:	muleq	r2, r0, r6
   120dc:	ldr	r3, [pc, #20]	; 120f8 <__assert_fail@plt+0x6c>
   120e0:	ldr	r2, [pc, #20]	; 120fc <__assert_fail@plt+0x70>
   120e4:	add	r3, pc, r3
   120e8:	ldr	r2, [r3, r2]
   120ec:	cmp	r2, #0
   120f0:	bxeq	lr
   120f4:	b	11e4c <__gmon_start__@plt>
   120f8:	andeq	fp, r2, r4, lsl pc
   120fc:			; <UNDEFINED> instruction: 0x000001bc
   12100:	ldr	r0, [pc, #24]	; 12120 <__assert_fail@plt+0x94>
   12104:	ldr	r3, [pc, #24]	; 12124 <__assert_fail@plt+0x98>
   12108:	cmp	r3, r0
   1210c:	bxeq	lr
   12110:	ldr	r3, [pc, #16]	; 12128 <__assert_fail@plt+0x9c>
   12114:	cmp	r3, #0
   12118:	bxeq	lr
   1211c:	bx	r3
   12120:	strdeq	lr, [r3], -r8
   12124:	strdeq	lr, [r3], -r8
   12128:	andeq	r0, r0, r0
   1212c:	ldr	r0, [pc, #36]	; 12158 <__assert_fail@plt+0xcc>
   12130:	ldr	r1, [pc, #36]	; 1215c <__assert_fail@plt+0xd0>
   12134:	sub	r1, r1, r0
   12138:	asr	r1, r1, #2
   1213c:	add	r1, r1, r1, lsr #31
   12140:	asrs	r1, r1, #1
   12144:	bxeq	lr
   12148:	ldr	r3, [pc, #16]	; 12160 <__assert_fail@plt+0xd4>
   1214c:	cmp	r3, #0
   12150:	bxeq	lr
   12154:	bx	r3
   12158:	strdeq	lr, [r3], -r8
   1215c:	strdeq	lr, [r3], -r8
   12160:	andeq	r0, r0, r0
   12164:	push	{r4, lr}
   12168:	ldr	r4, [pc, #24]	; 12188 <__assert_fail@plt+0xfc>
   1216c:	ldrb	r3, [r4]
   12170:	cmp	r3, #0
   12174:	popne	{r4, pc}
   12178:	bl	12100 <__assert_fail@plt+0x74>
   1217c:	mov	r3, #1
   12180:	strb	r3, [r4]
   12184:	pop	{r4, pc}
   12188:	andeq	lr, r3, r4, lsl r3
   1218c:	b	1212c <__assert_fail@plt+0xa0>
   12190:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12194:	add	fp, sp, #28
   12198:	sub	sp, sp, #580	; 0x244
   1219c:	sub	sp, sp, #1024	; 0x400
   121a0:	mov	r7, r0
   121a4:	ldr	r0, [r1]
   121a8:	mov	r5, r1
   121ac:	bl	24964 <_obstack_memory_used@@Base+0x78>
   121b0:	movw	r1, #47938	; 0xbb42
   121b4:	mov	r0, #6
   121b8:	movt	r1, #2
   121bc:	bl	11f60 <setlocale@plt>
   121c0:	movw	r6, #46503	; 0xb5a7
   121c4:	movw	r1, #38684	; 0x971c
   121c8:	movt	r6, #2
   121cc:	movt	r1, #2
   121d0:	mov	r0, r6
   121d4:	bl	11ffc <bindtextdomain@plt>
   121d8:	mov	r0, r6
   121dc:	bl	11ce4 <textdomain@plt>
   121e0:	movw	r0, #58028	; 0xe2ac
   121e4:	mov	r1, #2
   121e8:	movt	r0, #3
   121ec:	str	r1, [r0]
   121f0:	movw	r0, #61204	; 0xef14
   121f4:	movt	r0, #1
   121f8:	bl	296f4 <_obstack_memory_used@@Base+0x4e08>
   121fc:	movw	r0, #58136	; 0xe318
   12200:	movw	r1, #58140	; 0xe31c
   12204:	mov	r2, #0
   12208:	mvn	r6, #0
   1220c:	mvn	r9, #0
   12210:	mvn	r4, #0
   12214:	movt	r0, #3
   12218:	movt	r1, #3
   1221c:	str	r2, [r0]
   12220:	mov	r0, #1
   12224:	strb	r0, [r1]
   12228:	movw	r0, #58144	; 0xe320
   1222c:	mov	r1, #0
   12230:	movt	r0, #3
   12234:	str	r1, [sp, #36]	; 0x24
   12238:	mov	r1, #-2147483648	; 0x80000000
   1223c:	str	r2, [r0]
   12240:	movw	r0, #58148	; 0xe324
   12244:	movt	r0, #3
   12248:	stm	r0, {r1, r6}
   1224c:	mvn	r0, #0
   12250:	mvn	r1, #0
   12254:	str	r0, [sp, #44]	; 0x2c
   12258:	mvn	r0, #0
   1225c:	str	r1, [sp, #48]	; 0x30
   12260:	mov	r1, #0
   12264:	str	r0, [sp, #40]	; 0x28
   12268:	mvn	r0, #0
   1226c:	str	r1, [sp, #52]	; 0x34
   12270:	b	12288 <__assert_fail@plt+0x1fc>
   12274:	movw	r0, #58164	; 0xe334
   12278:	movt	r0, #3
   1227c:	mov	r1, #1
   12280:	strb	r1, [r0]
   12284:	mov	r0, r8
   12288:	movw	r2, #46311	; 0xb4e7
   1228c:	movw	r3, #48736	; 0xbe60
   12290:	mov	r8, r0
   12294:	sub	r0, fp, #36	; 0x24
   12298:	mov	r1, r5
   1229c:	str	r6, [fp, #-36]	; 0xffffffdc
   122a0:	movt	r2, #2
   122a4:	movt	r3, #2
   122a8:	str	r0, [sp]
   122ac:	mov	r0, r7
   122b0:	bl	11e58 <getopt_long@plt>
   122b4:	add	r1, r0, #3
   122b8:	cmp	r1, #276	; 0x114
   122bc:	bhi	153b8 <__assert_fail@plt+0x332c>
   122c0:	add	r2, pc, #4
   122c4:	mov	r0, #7
   122c8:	ldr	pc, [r2, r1, lsl #2]
   122cc:	andeq	r5, r1, r0, asr #7
   122d0:	andeq	r5, r1, ip, lsr r4
   122d4:	andeq	r3, r1, r4
   122d8:			; <UNDEFINED> instruction: 0x000153b8
   122dc:			; <UNDEFINED> instruction: 0x000153b8
   122e0:			; <UNDEFINED> instruction: 0x000153b8
   122e4:			; <UNDEFINED> instruction: 0x000153b8
   122e8:			; <UNDEFINED> instruction: 0x000153b8
   122ec:			; <UNDEFINED> instruction: 0x000153b8
   122f0:			; <UNDEFINED> instruction: 0x000153b8
   122f4:			; <UNDEFINED> instruction: 0x000153b8
   122f8:			; <UNDEFINED> instruction: 0x000153b8
   122fc:			; <UNDEFINED> instruction: 0x000153b8
   12300:			; <UNDEFINED> instruction: 0x000153b8
   12304:			; <UNDEFINED> instruction: 0x000153b8
   12308:			; <UNDEFINED> instruction: 0x000153b8
   1230c:			; <UNDEFINED> instruction: 0x000153b8
   12310:			; <UNDEFINED> instruction: 0x000153b8
   12314:			; <UNDEFINED> instruction: 0x000153b8
   12318:			; <UNDEFINED> instruction: 0x000153b8
   1231c:			; <UNDEFINED> instruction: 0x000153b8
   12320:			; <UNDEFINED> instruction: 0x000153b8
   12324:			; <UNDEFINED> instruction: 0x000153b8
   12328:			; <UNDEFINED> instruction: 0x000153b8
   1232c:			; <UNDEFINED> instruction: 0x000153b8
   12330:			; <UNDEFINED> instruction: 0x000153b8
   12334:			; <UNDEFINED> instruction: 0x000153b8
   12338:			; <UNDEFINED> instruction: 0x000153b8
   1233c:			; <UNDEFINED> instruction: 0x000153b8
   12340:			; <UNDEFINED> instruction: 0x000153b8
   12344:			; <UNDEFINED> instruction: 0x000153b8
   12348:			; <UNDEFINED> instruction: 0x000153b8
   1234c:			; <UNDEFINED> instruction: 0x000153b8
   12350:			; <UNDEFINED> instruction: 0x000153b8
   12354:			; <UNDEFINED> instruction: 0x000153b8
   12358:			; <UNDEFINED> instruction: 0x000153b8
   1235c:			; <UNDEFINED> instruction: 0x000153b8
   12360:			; <UNDEFINED> instruction: 0x000153b8
   12364:			; <UNDEFINED> instruction: 0x000153b8
   12368:			; <UNDEFINED> instruction: 0x000153b8
   1236c:			; <UNDEFINED> instruction: 0x000153b8
   12370:			; <UNDEFINED> instruction: 0x000153b8
   12374:			; <UNDEFINED> instruction: 0x000153b8
   12378:			; <UNDEFINED> instruction: 0x000153b8
   1237c:			; <UNDEFINED> instruction: 0x000153b8
   12380:			; <UNDEFINED> instruction: 0x000153b8
   12384:			; <UNDEFINED> instruction: 0x000153b8
   12388:			; <UNDEFINED> instruction: 0x000153b8
   1238c:			; <UNDEFINED> instruction: 0x000153b8
   12390:			; <UNDEFINED> instruction: 0x000153b8
   12394:			; <UNDEFINED> instruction: 0x000153b8
   12398:			; <UNDEFINED> instruction: 0x000153b8
   1239c:	andeq	r2, r1, r0, lsr #14
   123a0:			; <UNDEFINED> instruction: 0x000153b8
   123a4:			; <UNDEFINED> instruction: 0x000153b8
   123a8:			; <UNDEFINED> instruction: 0x000153b8
   123ac:			; <UNDEFINED> instruction: 0x000153b8
   123b0:			; <UNDEFINED> instruction: 0x000153b8
   123b4:			; <UNDEFINED> instruction: 0x000153b8
   123b8:			; <UNDEFINED> instruction: 0x000153b8
   123bc:			; <UNDEFINED> instruction: 0x000153b8
   123c0:			; <UNDEFINED> instruction: 0x000153b8
   123c4:			; <UNDEFINED> instruction: 0x000153b8
   123c8:			; <UNDEFINED> instruction: 0x000153b8
   123cc:			; <UNDEFINED> instruction: 0x000153b8
   123d0:			; <UNDEFINED> instruction: 0x000153b8
   123d4:			; <UNDEFINED> instruction: 0x000153b8
   123d8:			; <UNDEFINED> instruction: 0x000153b8
   123dc:	strdeq	r2, [r1], -ip
   123e0:			; <UNDEFINED> instruction: 0x00012ab0
   123e4:	andeq	r2, r1, r4, ror #19
   123e8:	ldrdeq	r2, [r1], -r8
   123ec:			; <UNDEFINED> instruction: 0x000153b8
   123f0:	strdeq	r2, [r1], -r8
   123f4:	andeq	r2, r1, r0, asr #23
   123f8:	andeq	r2, r1, ip, lsl #22
   123fc:	andeq	r2, r1, r8, lsl fp
   12400:			; <UNDEFINED> instruction: 0x000153b8
   12404:			; <UNDEFINED> instruction: 0x000153b8
   12408:	andeq	r2, r1, r8, lsl #19
   1240c:			; <UNDEFINED> instruction: 0x000153b8
   12410:	muleq	r1, r0, sp
   12414:			; <UNDEFINED> instruction: 0x000153b8
   12418:			; <UNDEFINED> instruction: 0x000153b8
   1241c:	strdeq	r2, [r1], -r0
   12420:	muleq	r1, r0, ip
   12424:	andeq	r2, r1, r4, lsr #18
   12428:	ldrdeq	r2, [r1], -r0
   1242c:	ldrdeq	r2, [r1], -r8
   12430:			; <UNDEFINED> instruction: 0x000153b8
   12434:			; <UNDEFINED> instruction: 0x000153b8
   12438:	andeq	r2, r1, r0, lsr #16
   1243c:			; <UNDEFINED> instruction: 0x000153b8
   12440:	andeq	r2, r1, r4, ror #16
   12444:			; <UNDEFINED> instruction: 0x000153b8
   12448:			; <UNDEFINED> instruction: 0x000153b8
   1244c:			; <UNDEFINED> instruction: 0x000153b8
   12450:			; <UNDEFINED> instruction: 0x000153b8
   12454:			; <UNDEFINED> instruction: 0x000153b8
   12458:			; <UNDEFINED> instruction: 0x000153b8
   1245c:	andeq	r2, r1, r4, lsr #21
   12460:	andeq	r2, r1, r8, lsl #5
   12464:	andeq	r2, r1, r8, lsr r8
   12468:	andeq	r2, r1, r8, asr #16
   1246c:			; <UNDEFINED> instruction: 0x000153b8
   12470:	muleq	r1, r8, r9
   12474:	andeq	r2, r1, r4, ror #15
   12478:	andeq	r2, r1, r0, lsr #15
   1247c:	andeq	r2, r1, r4, ror #23
   12480:			; <UNDEFINED> instruction: 0x000153b8
   12484:	muleq	r1, r8, sp
   12488:	muleq	r1, r8, lr
   1248c:	andeq	r2, r1, r0, asr fp
   12490:	andeq	r2, r1, ip, asr fp
   12494:	andeq	r2, r1, r0, lsl r9
   12498:	andeq	r2, r1, r4, asr r8
   1249c:	andeq	r2, r1, ip, lsl r9
   124a0:	andeq	r2, r1, r8, lsl #15
   124a4:	andeq	r2, r1, r0, lsr r7
   124a8:	andeq	r2, r1, r0, lsl #28
   124ac:	andeq	r2, r1, r8, ror #28
   124b0:	andeq	r2, r1, r0, lsl #29
   124b4:	andeq	r2, r1, r8, lsr sp
   124b8:	andeq	r2, r1, ip, asr #23
   124bc:			; <UNDEFINED> instruction: 0x000153b8
   124c0:			; <UNDEFINED> instruction: 0x000153b8
   124c4:			; <UNDEFINED> instruction: 0x000153b8
   124c8:			; <UNDEFINED> instruction: 0x000153b8
   124cc:			; <UNDEFINED> instruction: 0x000153b8
   124d0:			; <UNDEFINED> instruction: 0x000153b8
   124d4:			; <UNDEFINED> instruction: 0x000153b8
   124d8:			; <UNDEFINED> instruction: 0x000153b8
   124dc:			; <UNDEFINED> instruction: 0x000153b8
   124e0:			; <UNDEFINED> instruction: 0x000153b8
   124e4:			; <UNDEFINED> instruction: 0x000153b8
   124e8:			; <UNDEFINED> instruction: 0x000153b8
   124ec:			; <UNDEFINED> instruction: 0x000153b8
   124f0:			; <UNDEFINED> instruction: 0x000153b8
   124f4:			; <UNDEFINED> instruction: 0x000153b8
   124f8:			; <UNDEFINED> instruction: 0x000153b8
   124fc:			; <UNDEFINED> instruction: 0x000153b8
   12500:			; <UNDEFINED> instruction: 0x000153b8
   12504:			; <UNDEFINED> instruction: 0x000153b8
   12508:			; <UNDEFINED> instruction: 0x000153b8
   1250c:			; <UNDEFINED> instruction: 0x000153b8
   12510:			; <UNDEFINED> instruction: 0x000153b8
   12514:			; <UNDEFINED> instruction: 0x000153b8
   12518:			; <UNDEFINED> instruction: 0x000153b8
   1251c:			; <UNDEFINED> instruction: 0x000153b8
   12520:			; <UNDEFINED> instruction: 0x000153b8
   12524:			; <UNDEFINED> instruction: 0x000153b8
   12528:			; <UNDEFINED> instruction: 0x000153b8
   1252c:			; <UNDEFINED> instruction: 0x000153b8
   12530:			; <UNDEFINED> instruction: 0x000153b8
   12534:			; <UNDEFINED> instruction: 0x000153b8
   12538:			; <UNDEFINED> instruction: 0x000153b8
   1253c:			; <UNDEFINED> instruction: 0x000153b8
   12540:			; <UNDEFINED> instruction: 0x000153b8
   12544:			; <UNDEFINED> instruction: 0x000153b8
   12548:			; <UNDEFINED> instruction: 0x000153b8
   1254c:			; <UNDEFINED> instruction: 0x000153b8
   12550:			; <UNDEFINED> instruction: 0x000153b8
   12554:			; <UNDEFINED> instruction: 0x000153b8
   12558:			; <UNDEFINED> instruction: 0x000153b8
   1255c:			; <UNDEFINED> instruction: 0x000153b8
   12560:			; <UNDEFINED> instruction: 0x000153b8
   12564:			; <UNDEFINED> instruction: 0x000153b8
   12568:			; <UNDEFINED> instruction: 0x000153b8
   1256c:			; <UNDEFINED> instruction: 0x000153b8
   12570:			; <UNDEFINED> instruction: 0x000153b8
   12574:			; <UNDEFINED> instruction: 0x000153b8
   12578:			; <UNDEFINED> instruction: 0x000153b8
   1257c:			; <UNDEFINED> instruction: 0x000153b8
   12580:			; <UNDEFINED> instruction: 0x000153b8
   12584:			; <UNDEFINED> instruction: 0x000153b8
   12588:			; <UNDEFINED> instruction: 0x000153b8
   1258c:			; <UNDEFINED> instruction: 0x000153b8
   12590:			; <UNDEFINED> instruction: 0x000153b8
   12594:			; <UNDEFINED> instruction: 0x000153b8
   12598:			; <UNDEFINED> instruction: 0x000153b8
   1259c:			; <UNDEFINED> instruction: 0x000153b8
   125a0:			; <UNDEFINED> instruction: 0x000153b8
   125a4:			; <UNDEFINED> instruction: 0x000153b8
   125a8:			; <UNDEFINED> instruction: 0x000153b8
   125ac:			; <UNDEFINED> instruction: 0x000153b8
   125b0:			; <UNDEFINED> instruction: 0x000153b8
   125b4:			; <UNDEFINED> instruction: 0x000153b8
   125b8:			; <UNDEFINED> instruction: 0x000153b8
   125bc:			; <UNDEFINED> instruction: 0x000153b8
   125c0:			; <UNDEFINED> instruction: 0x000153b8
   125c4:			; <UNDEFINED> instruction: 0x000153b8
   125c8:			; <UNDEFINED> instruction: 0x000153b8
   125cc:			; <UNDEFINED> instruction: 0x000153b8
   125d0:			; <UNDEFINED> instruction: 0x000153b8
   125d4:			; <UNDEFINED> instruction: 0x000153b8
   125d8:			; <UNDEFINED> instruction: 0x000153b8
   125dc:			; <UNDEFINED> instruction: 0x000153b8
   125e0:			; <UNDEFINED> instruction: 0x000153b8
   125e4:			; <UNDEFINED> instruction: 0x000153b8
   125e8:			; <UNDEFINED> instruction: 0x000153b8
   125ec:			; <UNDEFINED> instruction: 0x000153b8
   125f0:			; <UNDEFINED> instruction: 0x000153b8
   125f4:			; <UNDEFINED> instruction: 0x000153b8
   125f8:			; <UNDEFINED> instruction: 0x000153b8
   125fc:			; <UNDEFINED> instruction: 0x000153b8
   12600:			; <UNDEFINED> instruction: 0x000153b8
   12604:			; <UNDEFINED> instruction: 0x000153b8
   12608:			; <UNDEFINED> instruction: 0x000153b8
   1260c:			; <UNDEFINED> instruction: 0x000153b8
   12610:			; <UNDEFINED> instruction: 0x000153b8
   12614:			; <UNDEFINED> instruction: 0x000153b8
   12618:			; <UNDEFINED> instruction: 0x000153b8
   1261c:			; <UNDEFINED> instruction: 0x000153b8
   12620:			; <UNDEFINED> instruction: 0x000153b8
   12624:			; <UNDEFINED> instruction: 0x000153b8
   12628:			; <UNDEFINED> instruction: 0x000153b8
   1262c:			; <UNDEFINED> instruction: 0x000153b8
   12630:			; <UNDEFINED> instruction: 0x000153b8
   12634:			; <UNDEFINED> instruction: 0x000153b8
   12638:			; <UNDEFINED> instruction: 0x000153b8
   1263c:			; <UNDEFINED> instruction: 0x000153b8
   12640:			; <UNDEFINED> instruction: 0x000153b8
   12644:			; <UNDEFINED> instruction: 0x000153b8
   12648:			; <UNDEFINED> instruction: 0x000153b8
   1264c:			; <UNDEFINED> instruction: 0x000153b8
   12650:			; <UNDEFINED> instruction: 0x000153b8
   12654:			; <UNDEFINED> instruction: 0x000153b8
   12658:			; <UNDEFINED> instruction: 0x000153b8
   1265c:			; <UNDEFINED> instruction: 0x000153b8
   12660:			; <UNDEFINED> instruction: 0x000153b8
   12664:			; <UNDEFINED> instruction: 0x000153b8
   12668:			; <UNDEFINED> instruction: 0x000153b8
   1266c:			; <UNDEFINED> instruction: 0x000153b8
   12670:			; <UNDEFINED> instruction: 0x000153b8
   12674:			; <UNDEFINED> instruction: 0x000153b8
   12678:			; <UNDEFINED> instruction: 0x000153b8
   1267c:			; <UNDEFINED> instruction: 0x000153b8
   12680:			; <UNDEFINED> instruction: 0x000153b8
   12684:			; <UNDEFINED> instruction: 0x000153b8
   12688:			; <UNDEFINED> instruction: 0x000153b8
   1268c:			; <UNDEFINED> instruction: 0x000153b8
   12690:			; <UNDEFINED> instruction: 0x000153b8
   12694:			; <UNDEFINED> instruction: 0x000153b8
   12698:			; <UNDEFINED> instruction: 0x000153b8
   1269c:			; <UNDEFINED> instruction: 0x000153b8
   126a0:			; <UNDEFINED> instruction: 0x000153b8
   126a4:			; <UNDEFINED> instruction: 0x000153b8
   126a8:			; <UNDEFINED> instruction: 0x000153b8
   126ac:			; <UNDEFINED> instruction: 0x000153b8
   126b0:			; <UNDEFINED> instruction: 0x000153b8
   126b4:			; <UNDEFINED> instruction: 0x000153b8
   126b8:			; <UNDEFINED> instruction: 0x000153b8
   126bc:			; <UNDEFINED> instruction: 0x000153b8
   126c0:			; <UNDEFINED> instruction: 0x000153b8
   126c4:			; <UNDEFINED> instruction: 0x000153b8
   126c8:			; <UNDEFINED> instruction: 0x000153b8
   126cc:			; <UNDEFINED> instruction: 0x000153b8
   126d0:			; <UNDEFINED> instruction: 0x000153b8
   126d4:			; <UNDEFINED> instruction: 0x000153b8
   126d8:	andeq	r2, r1, ip, lsr #16
   126dc:	andeq	r2, r1, r0, lsr r9
   126e0:	strdeq	r2, [r1], -r0
   126e4:			; <UNDEFINED> instruction: 0x00012eb4
   126e8:	muleq	r1, r4, r7
   126ec:	andeq	r2, r1, r0, ror fp
   126f0:	andeq	r2, r1, ip, lsl #29
   126f4:	andeq	r2, r1, r4, ror r2
   126f8:	strdeq	r2, [r1], -r0
   126fc:	andeq	r2, r1, r0, ror r8
   12700:	andeq	r2, r1, r8, lsl pc
   12704:	andeq	r2, r1, r4, asr #29
   12708:	andeq	r2, r1, r4, lsr #29
   1270c:	andeq	r2, r1, ip, lsr r7
   12710:	andeq	r2, r1, r8, lsr #27
   12714:	andeq	r2, r1, ip, lsl #28
   12718:	andeq	r2, r1, r0, ror r7
   1271c:	muleq	r1, ip, ip
   12720:	cmp	r4, #0
   12724:	mov	r0, r8
   12728:	movwne	r4, #1
   1272c:	b	12288 <__assert_fail@plt+0x1fc>
   12730:	movw	r0, #58245	; 0xe385
   12734:	movt	r0, #3
   12738:	b	1227c <__assert_fail@plt+0x1f0>
   1273c:	movw	r0, #58792	; 0xe5a8
   12740:	mov	r1, #0
   12744:	mov	r2, #1
   12748:	movt	r0, #3
   1274c:	str	r2, [r0]
   12750:	str	r1, [r0, #4]
   12754:	movw	r0, #57992	; 0xe288
   12758:	movt	r0, #3
   1275c:	str	r2, [r0]
   12760:	str	r1, [r0, #4]
   12764:	movw	r0, #58784	; 0xe5a0
   12768:	mov	r1, #144	; 0x90
   1276c:	b	127d0 <__assert_fail@plt+0x744>
   12770:	movw	r0, #58128	; 0xe310
   12774:	movt	r0, #3
   12778:	ldr	r0, [r0]
   1277c:	str	r0, [sp, #52]	; 0x34
   12780:	mov	r0, r8
   12784:	b	12288 <__assert_fail@plt+0x1fc>
   12788:	movw	r0, #58803	; 0xe5b3
   1278c:	movt	r0, #3
   12790:	b	1227c <__assert_fail@plt+0x1f0>
   12794:	movw	r0, #58180	; 0xe344
   12798:	movt	r0, #3
   1279c:	b	12e70 <__assert_fail@plt+0xde4>
   127a0:	movw	r0, #58792	; 0xe5a8
   127a4:	mov	r1, #0
   127a8:	mov	r2, #1
   127ac:	movt	r0, #3
   127b0:	str	r2, [r0]
   127b4:	str	r1, [r0, #4]
   127b8:	movw	r0, #57992	; 0xe288
   127bc:	movt	r0, #3
   127c0:	str	r2, [r0]
   127c4:	str	r1, [r0, #4]
   127c8:	movw	r0, #58784	; 0xe5a0
   127cc:	mov	r1, #176	; 0xb0
   127d0:	movt	r0, #3
   127d4:	str	r1, [r0]
   127d8:	movw	r0, #58780	; 0xe59c
   127dc:	movt	r0, #3
   127e0:	b	12e74 <__assert_fail@plt+0xde8>
   127e4:	movw	r0, #58776	; 0xe598
   127e8:	movt	r0, #3
   127ec:	b	12b64 <__assert_fail@plt+0xad8>
   127f0:	mov	r0, #8
   127f4:	bl	27750 <_obstack_memory_used@@Base+0x2e64>
   127f8:	movw	r1, #58128	; 0xe310
   127fc:	movw	r2, #58808	; 0xe5b8
   12800:	movt	r1, #3
   12804:	movt	r2, #3
   12808:	ldr	r1, [r1]
   1280c:	ldr	r3, [r2]
   12810:	str	r0, [r2]
   12814:	stm	r0, {r1, r3}
   12818:	mov	r0, r8
   1281c:	b	12288 <__assert_fail@plt+0x1fc>
   12820:	mov	r9, #1
   12824:	mov	r0, r8
   12828:	b	12288 <__assert_fail@plt+0x1fc>
   1282c:	movw	r0, #58804	; 0xe5b4
   12830:	movt	r0, #3
   12834:	b	1227c <__assert_fail@plt+0x1f0>
   12838:	movw	r0, #58772	; 0xe594
   1283c:	mov	r1, #1
   12840:	movt	r0, #3
   12844:	b	12e74 <__assert_fail@plt+0xde8>
   12848:	movw	r0, #58176	; 0xe340
   1284c:	movt	r0, #3
   12850:	b	1227c <__assert_fail@plt+0x1f0>
   12854:	movw	r0, #58180	; 0xe344
   12858:	mov	r1, #1
   1285c:	movt	r0, #3
   12860:	b	12e74 <__assert_fail@plt+0xde8>
   12864:	movw	r0, #58244	; 0xe384
   12868:	movt	r0, #3
   1286c:	b	1227c <__assert_fail@plt+0x1f0>
   12870:	movw	r0, #58128	; 0xe310
   12874:	mov	sl, r4
   12878:	movt	r0, #3
   1287c:	ldr	r1, [r0]
   12880:	cmp	r1, #0
   12884:	beq	12fb4 <__assert_fail@plt+0xf28>
   12888:	movw	r0, #58024	; 0xe2a8
   1288c:	movw	r6, #49456	; 0xc130
   12890:	mov	r2, #4
   12894:	mov	r4, #1
   12898:	movt	r0, #3
   1289c:	str	r2, [sp]
   128a0:	movw	r2, #49492	; 0xc154
   128a4:	movt	r6, #2
   128a8:	movt	r2, #2
   128ac:	ldr	r0, [r0]
   128b0:	mov	r3, r6
   128b4:	stmib	sp, {r0, r4}
   128b8:	movw	r0, #46453	; 0xb575
   128bc:	movt	r0, #2
   128c0:	bl	1e164 <__assert_fail@plt+0xc0d8>
   128c4:	ldr	r0, [r6, r0, lsl #2]
   128c8:	mvn	r6, #0
   128cc:	cmp	r0, #1
   128d0:	beq	12fc8 <__assert_fail@plt+0xf3c>
   128d4:	cmp	r0, #2
   128d8:	bne	12fc4 <__assert_fail@plt+0xf38>
   128dc:	movw	r4, #58008	; 0xe298
   128e0:	movt	r4, #3
   128e4:	ldrsb	r0, [r4]
   128e8:	cmn	r0, #1
   128ec:	bgt	128fc <__assert_fail@plt+0x870>
   128f0:	mov	r0, #1
   128f4:	bl	12014 <isatty@plt>
   128f8:	strb	r0, [r4]
   128fc:	uxtb	r4, r0
   12900:	tst	r0, #255	; 0xff
   12904:	cmp	r4, #0
   12908:	movwne	r4, #1
   1290c:	b	12fc8 <__assert_fail@plt+0xf3c>
   12910:	movw	r0, #58802	; 0xe5b2
   12914:	movt	r0, #3
   12918:	b	12b64 <__assert_fail@plt+0xad8>
   1291c:	mov	r0, #1
   12920:	b	12ea8 <__assert_fail@plt+0xe1c>
   12924:	mov	r9, #3
   12928:	mov	r0, r8
   1292c:	b	12288 <__assert_fail@plt+0x1fc>
   12930:	movw	r0, #58128	; 0xe310
   12934:	movw	sl, #58792	; 0xe5a8
   12938:	mov	r6, r4
   1293c:	movw	r4, #58780	; 0xe59c
   12940:	movt	r0, #3
   12944:	movt	r4, #3
   12948:	movt	sl, #3
   1294c:	ldr	r0, [r0]
   12950:	mov	r1, r4
   12954:	mov	r2, sl
   12958:	bl	217f0 <__assert_fail@plt+0xf764>
   1295c:	cmp	r0, #0
   12960:	bne	1548c <__assert_fail@plt+0x3400>
   12964:	ldrd	r0, [sl]
   12968:	movw	r2, #57992	; 0xe288
   1296c:	movt	r2, #3
   12970:	strd	r0, [r2]
   12974:	ldr	r0, [r4]
   12978:	movw	r1, #58784	; 0xe5a0
   1297c:	movt	r1, #3
   12980:	str	r0, [r1]
   12984:	b	12d80 <__assert_fail@plt+0xcf4>
   12988:	movw	r0, #58172	; 0xe33c
   1298c:	mov	r1, #4
   12990:	movt	r0, #3
   12994:	b	12e74 <__assert_fail@plt+0xde8>
   12998:	movw	r0, #58156	; 0xe32c
   1299c:	mov	r1, #0
   129a0:	mov	r2, #2
   129a4:	cmp	r4, #0
   129a8:	movt	r0, #3
   129ac:	mvneq	r4, #0
   129b0:	strb	r1, [r0]
   129b4:	movw	r0, #58768	; 0xe590
   129b8:	movt	r0, #3
   129bc:	str	r2, [r0]
   129c0:	movw	r0, #58340	; 0xe3e4
   129c4:	movt	r0, #3
   129c8:	strb	r1, [r0]
   129cc:	movw	r0, #58245	; 0xe385
   129d0:	movt	r0, #3
   129d4:	strb	r1, [r0]
   129d8:	mov	r9, #6
   129dc:	mov	r0, r8
   129e0:	b	12288 <__assert_fail@plt+0x1fc>
   129e4:	mov	r4, #2
   129e8:	mov	r0, r8
   129ec:	b	12288 <__assert_fail@plt+0x1fc>
   129f0:	mov	r0, #5
   129f4:	b	12288 <__assert_fail@plt+0x1fc>
   129f8:	movw	r0, #58128	; 0xe310
   129fc:	movt	r0, #3
   12a00:	ldr	r1, [r0]
   12a04:	cmp	r1, #0
   12a08:	beq	12a94 <__assert_fail@plt+0xa08>
   12a0c:	movw	r0, #58024	; 0xe2a8
   12a10:	movw	r6, #49456	; 0xc130
   12a14:	mov	r3, #4
   12a18:	mov	r2, #1
   12a1c:	movt	r0, #3
   12a20:	str	r3, [sp]
   12a24:	movt	r6, #2
   12a28:	ldr	r0, [r0]
   12a2c:	mov	r3, r6
   12a30:	stmib	sp, {r0, r2}
   12a34:	movw	r0, #46385	; 0xb531
   12a38:	movw	r2, #49492	; 0xc154
   12a3c:	movt	r0, #2
   12a40:	movt	r2, #2
   12a44:	bl	1e164 <__assert_fail@plt+0xc0d8>
   12a48:	ldr	r0, [r6, r0, lsl #2]
   12a4c:	mvn	r6, #0
   12a50:	cmp	r0, #1
   12a54:	beq	12a94 <__assert_fail@plt+0xa08>
   12a58:	cmp	r0, #2
   12a5c:	bne	12fd4 <__assert_fail@plt+0xf48>
   12a60:	mov	r6, r4
   12a64:	movw	r4, #58008	; 0xe298
   12a68:	movt	r4, #3
   12a6c:	ldrsb	r0, [r4]
   12a70:	cmn	r0, #1
   12a74:	bgt	12a84 <__assert_fail@plt+0x9f8>
   12a78:	mov	r0, #1
   12a7c:	bl	12014 <isatty@plt>
   12a80:	strb	r0, [r4]
   12a84:	tst	r0, #255	; 0xff
   12a88:	mov	r4, r6
   12a8c:	beq	12ff8 <__assert_fail@plt+0xf6c>
   12a90:	mvn	r6, #0
   12a94:	movw	r0, #58180	; 0xe344
   12a98:	mov	r1, #3
   12a9c:	movt	r0, #3
   12aa0:	b	12e74 <__assert_fail@plt+0xde8>
   12aa4:	movw	r0, #58768	; 0xe590
   12aa8:	movt	r0, #3
   12aac:	b	12e70 <__assert_fail@plt+0xde4>
   12ab0:	mov	r0, #8
   12ab4:	bl	27750 <_obstack_memory_used@@Base+0x2e64>
   12ab8:	movw	r1, #46382	; 0xb52e
   12abc:	mov	r6, r4
   12ac0:	movw	r4, #58832	; 0xe5d0
   12ac4:	movt	r4, #3
   12ac8:	movt	r1, #2
   12acc:	ldr	r2, [r4]
   12ad0:	stm	r0, {r1, r2}
   12ad4:	str	r0, [r4]
   12ad8:	mov	r0, #8
   12adc:	bl	27750 <_obstack_memory_used@@Base+0x2e64>
   12ae0:	movw	r1, #46381	; 0xb52d
   12ae4:	ldr	r2, [r4]
   12ae8:	str	r0, [r4]
   12aec:	mov	r4, r6
   12af0:	movt	r1, #2
   12af4:	stm	r0, {r1, r2}
   12af8:	b	12df4 <__assert_fail@plt+0xd68>
   12afc:	movw	r0, #58768	; 0xe590
   12b00:	mov	r1, #1
   12b04:	movt	r0, #3
   12b08:	b	12e74 <__assert_fail@plt+0xde8>
   12b0c:	movw	r0, #58172	; 0xe33c
   12b10:	movt	r0, #3
   12b14:	b	12e70 <__assert_fail@plt+0xde4>
   12b18:	movw	r0, #58128	; 0xe310
   12b1c:	mov	r6, r4
   12b20:	movt	r0, #3
   12b24:	ldr	r4, [r0]
   12b28:	mov	r0, #8
   12b2c:	bl	27750 <_obstack_memory_used@@Base+0x2e64>
   12b30:	movw	r1, #58832	; 0xe5d0
   12b34:	str	r4, [r0]
   12b38:	mov	r4, r6
   12b3c:	mvn	r6, #0
   12b40:	movt	r1, #3
   12b44:	ldr	r2, [r1]
   12b48:	str	r2, [r0, #4]
   12b4c:	b	12f70 <__assert_fail@plt+0xee4>
   12b50:	mov	r4, #4
   12b54:	mov	r0, r8
   12b58:	b	12288 <__assert_fail@plt+0x1fc>
   12b5c:	movw	r0, #58801	; 0xe5b1
   12b60:	movt	r0, #3
   12b64:	mov	r1, #1
   12b68:	strb	r1, [r0]
   12b6c:	b	12e98 <__assert_fail@plt+0xe0c>
   12b70:	movw	r0, #58128	; 0xe310
   12b74:	movw	r6, #49644	; 0xc1ec
   12b78:	mov	r3, #4
   12b7c:	mov	r2, #1
   12b80:	movt	r0, #3
   12b84:	str	r3, [sp]
   12b88:	movt	r6, #2
   12b8c:	ldr	r1, [r0]
   12b90:	movw	r0, #58024	; 0xe2a8
   12b94:	mov	r3, r6
   12b98:	movt	r0, #3
   12b9c:	ldr	r0, [r0]
   12ba0:	stmib	sp, {r0, r2}
   12ba4:	movw	r0, #46427	; 0xb55b
   12ba8:	movw	r2, #49672	; 0xc208
   12bac:	movt	r0, #2
   12bb0:	movt	r2, #2
   12bb4:	bl	1e164 <__assert_fail@plt+0xc0d8>
   12bb8:	ldr	r4, [r6, r0, lsl #2]
   12bbc:	b	12df4 <__assert_fail@plt+0xd68>
   12bc0:	movw	r0, #58802	; 0xe5b2
   12bc4:	movt	r0, #3
   12bc8:	b	1227c <__assert_fail@plt+0x1f0>
   12bcc:	mov	r4, #3
   12bd0:	mov	r0, r8
   12bd4:	b	12288 <__assert_fail@plt+0x1fc>
   12bd8:	movw	r0, #58248	; 0xe388
   12bdc:	movt	r0, #3
   12be0:	b	1227c <__assert_fail@plt+0x1f0>
   12be4:	movw	r0, #58800	; 0xe5b0
   12be8:	movt	r0, #3
   12bec:	b	1227c <__assert_fail@plt+0x1f0>
   12bf0:	movw	r0, #58128	; 0xe310
   12bf4:	mov	sl, r4
   12bf8:	movt	r0, #3
   12bfc:	ldr	r1, [r0]
   12c00:	cmp	r1, #0
   12c04:	beq	12fbc <__assert_fail@plt+0xf30>
   12c08:	movw	r0, #58024	; 0xe2a8
   12c0c:	movw	r6, #49456	; 0xc130
   12c10:	mov	r2, #4
   12c14:	mov	r4, #1
   12c18:	movt	r0, #3
   12c1c:	str	r2, [sp]
   12c20:	movw	r2, #49492	; 0xc154
   12c24:	movt	r6, #2
   12c28:	movt	r2, #2
   12c2c:	ldr	r0, [r0]
   12c30:	mov	r3, r6
   12c34:	stmib	sp, {r0, r4}
   12c38:	movw	r0, #46445	; 0xb56d
   12c3c:	movt	r0, #2
   12c40:	bl	1e164 <__assert_fail@plt+0xc0d8>
   12c44:	ldr	r0, [r6, r0, lsl #2]
   12c48:	mvn	r6, #0
   12c4c:	cmp	r0, #1
   12c50:	beq	12fe0 <__assert_fail@plt+0xf54>
   12c54:	cmp	r0, #2
   12c58:	bne	12fdc <__assert_fail@plt+0xf50>
   12c5c:	movw	r4, #58008	; 0xe298
   12c60:	movt	r4, #3
   12c64:	ldrsb	r0, [r4]
   12c68:	cmn	r0, #1
   12c6c:	bgt	12c7c <__assert_fail@plt+0xbf0>
   12c70:	mov	r0, #1
   12c74:	bl	12014 <isatty@plt>
   12c78:	strb	r0, [r4]
   12c7c:	uxtb	r4, r0
   12c80:	tst	r0, #255	; 0xff
   12c84:	cmp	r4, #0
   12c88:	movwne	r4, #1
   12c8c:	b	12fe0 <__assert_fail@plt+0xf54>
   12c90:	movw	r0, #58184	; 0xe348
   12c94:	movt	r0, #3
   12c98:	b	1227c <__assert_fail@plt+0x1f0>
   12c9c:	movw	r1, #58156	; 0xe32c
   12ca0:	mov	r0, #0
   12ca4:	mov	r2, #1
   12ca8:	cmp	r4, #0
   12cac:	movt	r1, #3
   12cb0:	movwne	r4, #1
   12cb4:	strb	r0, [r1]
   12cb8:	movw	r1, #58812	; 0xe5bc
   12cbc:	movt	r1, #3
   12cc0:	strb	r2, [r1]
   12cc4:	mov	r1, #0
   12cc8:	str	r1, [sp, #48]	; 0x30
   12ccc:	b	12288 <__assert_fail@plt+0x1fc>
   12cd0:	movw	r0, #58128	; 0xe310
   12cd4:	movw	r1, #46396	; 0xb53c
   12cd8:	mov	r2, #5
   12cdc:	mov	sl, #0
   12ce0:	movt	r0, #3
   12ce4:	movt	r1, #2
   12ce8:	ldr	r6, [r0]
   12cec:	mov	r0, #0
   12cf0:	bl	11ca8 <dcgettext@plt>
   12cf4:	mvn	r2, #-2147483648	; 0x80000000
   12cf8:	mov	r1, #2
   12cfc:	mov	r3, #0
   12d00:	stm	sp, {r2, sl}
   12d04:	movw	r2, #47938	; 0xbb42
   12d08:	str	r0, [sp, #12]
   12d0c:	str	r1, [sp, #16]
   12d10:	mov	r0, r6
   12d14:	mov	r1, #0
   12d18:	mvn	r6, #0
   12d1c:	movt	r2, #2
   12d20:	str	r2, [sp, #8]
   12d24:	mov	r2, #0
   12d28:	bl	27cd0 <_obstack_memory_used@@Base+0x33e4>
   12d2c:	str	r0, [sp, #40]	; 0x28
   12d30:	mov	r0, r8
   12d34:	b	12288 <__assert_fail@plt+0x1fc>
   12d38:	movw	sl, #58128	; 0xe310
   12d3c:	movw	r1, #47938	; 0xbb42
   12d40:	add	r3, sp, #56	; 0x38
   12d44:	mov	r2, #0
   12d48:	mov	r6, r4
   12d4c:	mov	r4, #0
   12d50:	movt	sl, #3
   12d54:	movt	r1, #2
   12d58:	ldr	r0, [sl]
   12d5c:	str	r1, [sp]
   12d60:	mov	r1, #0
   12d64:	bl	27ff8 <_obstack_memory_used@@Base+0x370c>
   12d68:	cmp	r0, #0
   12d6c:	beq	12f7c <__assert_fail@plt+0xef0>
   12d70:	cmp	r0, #1
   12d74:	bne	154b0 <__assert_fail@plt+0x3424>
   12d78:	mov	r0, #0
   12d7c:	str	r0, [sp, #44]	; 0x2c
   12d80:	mov	r4, r6
   12d84:	mov	r0, r8
   12d88:	mvn	r6, #0
   12d8c:	b	12288 <__assert_fail@plt+0x1fc>
   12d90:	mov	r0, #0
   12d94:	b	12288 <__assert_fail@plt+0x1fc>
   12d98:	mov	r0, #1
   12d9c:	str	r0, [sp, #36]	; 0x24
   12da0:	mov	r0, r8
   12da4:	b	12288 <__assert_fail@plt+0x1fc>
   12da8:	movw	r0, #58128	; 0xe310
   12dac:	movw	r6, #49532	; 0xc17c
   12db0:	mov	r3, #4
   12db4:	mov	r2, #1
   12db8:	movt	r0, #3
   12dbc:	str	r3, [sp]
   12dc0:	movt	r6, #2
   12dc4:	ldr	r1, [r0]
   12dc8:	movw	r0, #58024	; 0xe2a8
   12dcc:	mov	r3, r6
   12dd0:	movt	r0, #3
   12dd4:	ldr	r0, [r0]
   12dd8:	stmib	sp, {r0, r2}
   12ddc:	movw	r0, #46413	; 0xb54d
   12de0:	movw	r2, #49556	; 0xc194
   12de4:	movt	r0, #2
   12de8:	movt	r2, #2
   12dec:	bl	1e164 <__assert_fail@plt+0xc0d8>
   12df0:	ldr	r9, [r6, r0, lsl #2]
   12df4:	mvn	r6, #0
   12df8:	mov	r0, r8
   12dfc:	b	12288 <__assert_fail@plt+0x1fc>
   12e00:	mov	r9, #5
   12e04:	mov	r0, r8
   12e08:	b	12288 <__assert_fail@plt+0x1fc>
   12e0c:	movw	r0, #58128	; 0xe310
   12e10:	movw	r6, #49584	; 0xc1b0
   12e14:	mov	r3, #4
   12e18:	mov	r2, #1
   12e1c:	movt	r0, #3
   12e20:	str	r3, [sp]
   12e24:	movt	r6, #2
   12e28:	ldr	r1, [r0]
   12e2c:	movw	r0, #58024	; 0xe2a8
   12e30:	mov	r3, r6
   12e34:	movt	r0, #3
   12e38:	ldr	r0, [r0]
   12e3c:	stmib	sp, {r0, r2}
   12e40:	movw	r0, #46420	; 0xb554
   12e44:	movw	r2, #49612	; 0xc1cc
   12e48:	movt	r0, #2
   12e4c:	movt	r2, #2
   12e50:	bl	1e164 <__assert_fail@plt+0xc0d8>
   12e54:	ldr	r0, [r6, r0, lsl #2]
   12e58:	movw	r1, #58772	; 0xe594
   12e5c:	mvn	r6, #0
   12e60:	movt	r1, #3
   12e64:	b	12f70 <__assert_fail@plt+0xee4>
   12e68:	movw	r0, #58772	; 0xe594
   12e6c:	movt	r0, #3
   12e70:	mov	r1, #2
   12e74:	str	r1, [r0]
   12e78:	mov	r0, r8
   12e7c:	b	12288 <__assert_fail@plt+0x1fc>
   12e80:	mov	r9, #4
   12e84:	mov	r0, r8
   12e88:	b	12288 <__assert_fail@plt+0x1fc>
   12e8c:	movw	r0, #46436	; 0xb564
   12e90:	movt	r0, #2
   12e94:	str	r0, [sp, #52]	; 0x34
   12e98:	mov	r4, #0
   12e9c:	mov	r0, r8
   12ea0:	b	12288 <__assert_fail@plt+0x1fc>
   12ea4:	mov	r0, #0
   12ea8:	str	r0, [sp, #48]	; 0x30
   12eac:	mov	r0, r8
   12eb0:	b	12288 <__assert_fail@plt+0x1fc>
   12eb4:	movw	r0, #58172	; 0xe33c
   12eb8:	mov	r1, #3
   12ebc:	movt	r0, #3
   12ec0:	b	12e74 <__assert_fail@plt+0xde8>
   12ec4:	movw	r0, #58128	; 0xe310
   12ec8:	movw	r6, #55272	; 0xd7e8
   12ecc:	mov	r3, #4
   12ed0:	mov	r2, #1
   12ed4:	movt	r0, #3
   12ed8:	str	r3, [sp]
   12edc:	movt	r6, #2
   12ee0:	ldr	r1, [r0]
   12ee4:	movw	r0, #58024	; 0xe2a8
   12ee8:	mov	r3, r6
   12eec:	movt	r0, #3
   12ef0:	ldr	r0, [r0]
   12ef4:	stmib	sp, {r0, r2}
   12ef8:	movw	r0, #46483	; 0xb593
   12efc:	movw	r2, #55228	; 0xd7bc
   12f00:	movt	r0, #2
   12f04:	movt	r2, #2
   12f08:	bl	1e164 <__assert_fail@plt+0xc0d8>
   12f0c:	ldr	r0, [r6, r0, lsl #2]
   12f10:	mvn	r6, #0
   12f14:	b	12288 <__assert_fail@plt+0x1fc>
   12f18:	movw	r0, #58128	; 0xe310
   12f1c:	movw	r6, #49704	; 0xc228
   12f20:	mov	r3, #4
   12f24:	mov	r2, #1
   12f28:	movt	r0, #3
   12f2c:	str	r3, [sp]
   12f30:	movt	r6, #2
   12f34:	ldr	r1, [r0]
   12f38:	movw	r0, #58024	; 0xe2a8
   12f3c:	mov	r3, r6
   12f40:	movt	r0, #3
   12f44:	ldr	r0, [r0]
   12f48:	stmib	sp, {r0, r2}
   12f4c:	movw	r0, #46465	; 0xb581
   12f50:	movw	r2, #49720	; 0xc238
   12f54:	movt	r0, #2
   12f58:	movt	r2, #2
   12f5c:	bl	1e164 <__assert_fail@plt+0xc0d8>
   12f60:	ldr	r0, [r6, r0, lsl #2]
   12f64:	movw	r1, #58180	; 0xe344
   12f68:	mvn	r6, #0
   12f6c:	movt	r1, #3
   12f70:	str	r0, [r1]
   12f74:	mov	r0, r8
   12f78:	b	12288 <__assert_fail@plt+0x1fc>
   12f7c:	ldr	r0, [sp, #56]	; 0x38
   12f80:	ldr	r1, [sp, #60]	; 0x3c
   12f84:	subs	r2, r0, #-2147483648	; 0x80000000
   12f88:	sbcs	r1, r1, #0
   12f8c:	movwcc	r4, #1
   12f90:	cmp	r4, #0
   12f94:	movne	r4, r0
   12f98:	mov	r0, r8
   12f9c:	str	r4, [sp, #44]	; 0x2c
   12fa0:	cmn	r4, #1
   12fa4:	mov	r4, r6
   12fa8:	mvn	r6, #0
   12fac:	bgt	12288 <__assert_fail@plt+0x1fc>
   12fb0:	b	154b0 <__assert_fail@plt+0x3424>
   12fb4:	mov	r4, #1
   12fb8:	b	12fc8 <__assert_fail@plt+0xf3c>
   12fbc:	mov	r4, #1
   12fc0:	b	12fe0 <__assert_fail@plt+0xf54>
   12fc4:	mov	r4, #0
   12fc8:	movw	r0, #58340	; 0xe3e4
   12fcc:	movt	r0, #3
   12fd0:	b	12fe8 <__assert_fail@plt+0xf5c>
   12fd4:	mov	r0, r8
   12fd8:	b	12288 <__assert_fail@plt+0x1fc>
   12fdc:	mov	r4, #0
   12fe0:	movw	r0, #58156	; 0xe32c
   12fe4:	movt	r0, #3
   12fe8:	strb	r4, [r0]
   12fec:	mov	r0, r8
   12ff0:	mov	r4, sl
   12ff4:	b	12288 <__assert_fail@plt+0x1fc>
   12ff8:	mov	r0, r8
   12ffc:	mvn	r6, #0
   13000:	b	12288 <__assert_fail@plt+0x1fc>
   13004:	movw	r0, #58792	; 0xe5a8
   13008:	str	r9, [sp, #24]
   1300c:	str	r7, [sp, #28]
   13010:	str	r5, [sp, #32]
   13014:	movt	r0, #3
   13018:	ldrd	r0, [r0]
   1301c:	orrs	r0, r0, r1
   13020:	bne	130a4 <__assert_fail@plt+0x1018>
   13024:	movw	r0, #46549	; 0xb5d5
   13028:	movt	r0, #2
   1302c:	bl	11de0 <getenv@plt>
   13030:	movw	r9, #58780	; 0xe59c
   13034:	movw	r7, #58792	; 0xe5a8
   13038:	mov	r6, r0
   1303c:	movt	r9, #3
   13040:	movt	r7, #3
   13044:	mov	r1, r9
   13048:	mov	r2, r7
   1304c:	bl	217f0 <__assert_fail@plt+0xf764>
   13050:	cmp	r6, #0
   13054:	bne	1306c <__assert_fail@plt+0xfe0>
   13058:	movw	r0, #46552	; 0xb5d8
   1305c:	movt	r0, #2
   13060:	bl	11de0 <getenv@plt>
   13064:	cmp	r0, #0
   13068:	beq	1308c <__assert_fail@plt+0x1000>
   1306c:	ldrd	r0, [r7]
   13070:	movw	r2, #57992	; 0xe288
   13074:	movt	r2, #3
   13078:	strd	r0, [r2]
   1307c:	ldr	r0, [r9]
   13080:	movw	r1, #58784	; 0xe5a0
   13084:	movt	r1, #3
   13088:	str	r0, [r1]
   1308c:	ldr	r0, [sp, #36]	; 0x24
   13090:	tst	r0, #1
   13094:	movne	r1, #0
   13098:	movne	r0, #1024	; 0x400
   1309c:	strdne	r0, [r7]
   130a0:	strne	r1, [r9]
   130a4:	ldr	r7, [sp, #44]	; 0x2c
   130a8:	cmn	r4, #1
   130ac:	bgt	13108 <__assert_fail@plt+0x107c>
   130b0:	movw	r0, #58016	; 0xe2a0
   130b4:	movt	r0, #3
   130b8:	ldr	r0, [r0]
   130bc:	cmp	r0, #1
   130c0:	bne	130f8 <__assert_fail@plt+0x106c>
   130c4:	movw	r4, #58008	; 0xe298
   130c8:	movt	r4, #3
   130cc:	ldrsb	r0, [r4]
   130d0:	cmn	r0, #1
   130d4:	bgt	130e4 <__assert_fail@plt+0x1058>
   130d8:	mov	r0, #1
   130dc:	bl	12014 <isatty@plt>
   130e0:	strb	r0, [r4]
   130e4:	tst	r0, #255	; 0xff
   130e8:	tst	r0, #255	; 0xff
   130ec:	mov	r4, #2
   130f0:	movweq	r4, #1
   130f4:	b	13108 <__assert_fail@plt+0x107c>
   130f8:	sub	r0, r0, #2
   130fc:	clz	r0, r0
   13100:	lsr	r0, r0, #5
   13104:	lsl	r4, r0, #1
   13108:	movw	r0, #58168	; 0xe338
   1310c:	movw	r5, #58156	; 0xe32c
   13110:	movt	r0, #3
   13114:	movt	r5, #3
   13118:	str	r4, [r0]
   1311c:	sub	r0, r4, #2
   13120:	cmp	r0, #3
   13124:	bcc	13140 <__assert_fail@plt+0x10b4>
   13128:	ldrb	r0, [r5]
   1312c:	cmp	r0, #0
   13130:	bne	13140 <__assert_fail@plt+0x10b4>
   13134:	cmn	r7, #1
   13138:	movle	r7, #80	; 0x50
   1313c:	b	13264 <__assert_fail@plt+0x11d8>
   13140:	cmn	r7, #1
   13144:	bgt	13264 <__assert_fail@plt+0x11d8>
   13148:	movw	r4, #58008	; 0xe298
   1314c:	movt	r4, #3
   13150:	ldrsb	r0, [r4]
   13154:	cmn	r0, #1
   13158:	ble	13168 <__assert_fail@plt+0x10dc>
   1315c:	tst	r0, #255	; 0xff
   13160:	bne	1317c <__assert_fail@plt+0x10f0>
   13164:	b	131a0 <__assert_fail@plt+0x1114>
   13168:	mov	r0, #1
   1316c:	bl	12014 <isatty@plt>
   13170:	strb	r0, [r4]
   13174:	tst	r0, #255	; 0xff
   13178:	beq	131a0 <__assert_fail@plt+0x1114>
   1317c:	add	r2, sp, #56	; 0x38
   13180:	mov	r0, #1
   13184:	movw	r1, #21523	; 0x5413
   13188:	bl	11d50 <ioctl@plt>
   1318c:	cmp	r0, #0
   13190:	bmi	131a0 <__assert_fail@plt+0x1114>
   13194:	ldrh	r7, [sp, #58]	; 0x3a
   13198:	cmp	r7, #0
   1319c:	bne	13264 <__assert_fail@plt+0x11d8>
   131a0:	movw	r0, #46563	; 0xb5e3
   131a4:	movt	r0, #2
   131a8:	bl	11de0 <getenv@plt>
   131ac:	cmp	r0, #0
   131b0:	beq	13260 <__assert_fail@plt+0x11d4>
   131b4:	mov	r6, r0
   131b8:	ldrb	r0, [r0]
   131bc:	cmp	r0, #0
   131c0:	beq	13260 <__assert_fail@plt+0x11d4>
   131c4:	movw	r0, #47938	; 0xbb42
   131c8:	add	r3, sp, #56	; 0x38
   131cc:	mov	r1, #0
   131d0:	mov	r2, #0
   131d4:	mov	r7, #0
   131d8:	movt	r0, #2
   131dc:	str	r0, [sp]
   131e0:	mov	r0, r6
   131e4:	bl	27ff8 <_obstack_memory_used@@Base+0x370c>
   131e8:	cmp	r0, #0
   131ec:	beq	13200 <__assert_fail@plt+0x1174>
   131f0:	cmp	r0, #1
   131f4:	bne	13224 <__assert_fail@plt+0x1198>
   131f8:	mov	r7, #0
   131fc:	b	13264 <__assert_fail@plt+0x11d8>
   13200:	ldr	r0, [sp, #56]	; 0x38
   13204:	ldr	r1, [sp, #60]	; 0x3c
   13208:	subs	r2, r0, #-2147483648	; 0x80000000
   1320c:	sbcs	r1, r1, #0
   13210:	movwcc	r7, #1
   13214:	cmp	r7, #0
   13218:	movne	r7, r0
   1321c:	cmn	r7, #1
   13220:	bgt	13264 <__assert_fail@plt+0x11d8>
   13224:	movw	r1, #46571	; 0xb5eb
   13228:	mov	r0, #0
   1322c:	mov	r2, #5
   13230:	movt	r1, #2
   13234:	bl	11ca8 <dcgettext@plt>
   13238:	mov	r7, r0
   1323c:	mov	r0, r6
   13240:	bl	265b8 <_obstack_memory_used@@Base+0x1ccc>
   13244:	movw	r5, #58156	; 0xe32c
   13248:	mov	r3, r0
   1324c:	mov	r0, #0
   13250:	mov	r1, #0
   13254:	mov	r2, r7
   13258:	movt	r5, #3
   1325c:	bl	11da4 <error@plt>
   13260:	mov	r7, #80	; 0x50
   13264:	movw	r0, #43691	; 0xaaab
   13268:	movw	r9, #58816	; 0xe5c0
   1326c:	movt	r0, #43690	; 0xaaaa
   13270:	movt	r9, #3
   13274:	umull	r0, r1, r7, r0
   13278:	mov	r0, #1
   1327c:	str	r7, [r9]
   13280:	lsr	r2, r1, #1
   13284:	add	r3, r2, r2, lsl #1
   13288:	subs	r3, r7, r3
   1328c:	addne	r2, r0, r1, lsr #1
   13290:	movw	r0, #58820	; 0xe5c4
   13294:	movt	r0, #3
   13298:	str	r2, [r0]
   1329c:	movw	r0, #58168	; 0xe338
   132a0:	movt	r0, #3
   132a4:	ldr	r0, [r0]
   132a8:	sub	r0, r0, #2
   132ac:	cmp	r0, #2
   132b0:	bhi	132cc <__assert_fail@plt+0x1240>
   132b4:	ldr	r1, [sp, #40]	; 0x28
   132b8:	cmp	r1, #0
   132bc:	bmi	1354c <__assert_fail@plt+0x14c0>
   132c0:	movw	r0, #58160	; 0xe330
   132c4:	movt	r0, #3
   132c8:	str	r1, [r0]
   132cc:	ldr	r1, [sp, #48]	; 0x30
   132d0:	cmn	r1, #1
   132d4:	bgt	13320 <__assert_fail@plt+0x1294>
   132d8:	movw	r0, #58016	; 0xe2a0
   132dc:	mov	r1, #0
   132e0:	movt	r0, #3
   132e4:	ldr	r0, [r0]
   132e8:	cmp	r0, #1
   132ec:	bne	13320 <__assert_fail@plt+0x1294>
   132f0:	movw	r4, #58008	; 0xe298
   132f4:	movt	r4, #3
   132f8:	ldrsb	r0, [r4]
   132fc:	cmn	r0, #1
   13300:	bgt	13310 <__assert_fail@plt+0x1284>
   13304:	mov	r0, #1
   13308:	bl	12014 <isatty@plt>
   1330c:	strb	r0, [r4]
   13310:	uxtb	r1, r0
   13314:	tst	r0, #255	; 0xff
   13318:	cmp	r1, #0
   1331c:	movwne	r1, #1
   13320:	movw	r0, #58824	; 0xe5c8
   13324:	cmp	r1, #0
   13328:	movt	r0, #3
   1332c:	movwne	r1, #1
   13330:	cmn	r8, #1
   13334:	strb	r1, [r0]
   13338:	ble	134c4 <__assert_fail@plt+0x1438>
   1333c:	mov	r0, #0
   13340:	mov	r1, r8
   13344:	bl	24a7c <_obstack_memory_used@@Base+0x190>
   13348:	mov	r0, #0
   1334c:	mov	r4, #0
   13350:	bl	24a64 <_obstack_memory_used@@Base+0x178>
   13354:	mov	r6, r0
   13358:	movw	r0, #58168	; 0xe338
   1335c:	movt	r0, #3
   13360:	ldr	r0, [r0]
   13364:	cmp	r0, #0
   13368:	beq	13384 <__assert_fail@plt+0x12f8>
   1336c:	orr	r0, r0, #1
   13370:	cmp	r0, #3
   13374:	bne	133a4 <__assert_fail@plt+0x1318>
   13378:	ldr	r0, [r9]
   1337c:	cmp	r0, #0
   13380:	beq	133a4 <__assert_fail@plt+0x1318>
   13384:	orr	r1, r6, #2
   13388:	sub	r0, r6, #6
   1338c:	sub	r1, r1, #3
   13390:	clz	r0, r0
   13394:	clz	r1, r1
   13398:	lsr	r0, r0, #5
   1339c:	lsr	r1, r1, #5
   133a0:	orr	r4, r0, r1
   133a4:	movw	r0, #58825	; 0xe5c9
   133a8:	movt	r0, #3
   133ac:	strb	r4, [r0]
   133b0:	mov	r0, #0
   133b4:	bl	24a28 <_obstack_memory_used@@Base+0x13c>
   133b8:	movw	r7, #58372	; 0xe404
   133bc:	cmp	r6, #7
   133c0:	movt	r7, #3
   133c4:	str	r0, [r7]
   133c8:	bne	133d8 <__assert_fail@plt+0x134c>
   133cc:	mov	r1, #32
   133d0:	mov	r2, #1
   133d4:	bl	24a94 <_obstack_memory_used@@Base+0x1a8>
   133d8:	movw	r0, #58180	; 0xe344
   133dc:	ldr	r6, [sp, #24]
   133e0:	movt	r0, #3
   133e4:	ldr	r0, [r0]
   133e8:	cmp	r0, #2
   133ec:	bcc	1342c <__assert_fail@plt+0x13a0>
   133f0:	sub	r1, r0, #2
   133f4:	cmp	r1, #5
   133f8:	beq	1342c <__assert_fail@plt+0x13a0>
   133fc:	movw	r2, #46700	; 0xb66c
   13400:	movt	r2, #2
   13404:	ldrb	r1, [r2, r1]
   13408:	add	r0, r0, r2
   1340c:	sub	r4, r0, #1
   13410:	ldr	r0, [r7]
   13414:	uxtb	r1, r1
   13418:	mov	r2, #1
   1341c:	bl	24a94 <_obstack_memory_used@@Base+0x1a8>
   13420:	ldrb	r1, [r4], #1
   13424:	cmp	r1, #0
   13428:	bne	13410 <__assert_fail@plt+0x1384>
   1342c:	mov	r0, #0
   13430:	bl	24a28 <_obstack_memory_used@@Base+0x13c>
   13434:	movw	r1, #58828	; 0xe5cc
   13438:	mov	r2, #1
   1343c:	movt	r1, #3
   13440:	str	r0, [r1]
   13444:	mov	r1, #58	; 0x3a
   13448:	bl	24a94 <_obstack_memory_used@@Base+0x1a8>
   1344c:	movw	r0, #58340	; 0xe3e4
   13450:	movw	r3, #58248	; 0xe388
   13454:	movt	r0, #3
   13458:	movt	r3, #3
   1345c:	ldrb	r1, [r0]
   13460:	movw	r0, #58168	; 0xe338
   13464:	movt	r0, #3
   13468:	ldr	r0, [r0]
   1346c:	clz	r2, r0
   13470:	lsr	r2, r2, #5
   13474:	bic	r1, r2, r1
   13478:	ldrb	r2, [r3]
   1347c:	and	r1, r1, r2
   13480:	movw	r2, #58812	; 0xe5bc
   13484:	movt	r2, #3
   13488:	strb	r1, [r3]
   1348c:	mov	r3, #10
   13490:	ldrb	r2, [r2]
   13494:	cmp	r2, #0
   13498:	movwne	r3, #0
   1349c:	cmp	r3, r1
   134a0:	bcc	154ec <__assert_fail@plt+0x3460>
   134a4:	cmn	r6, #1
   134a8:	ble	13518 <__assert_fail@plt+0x148c>
   134ac:	movw	r1, #58240	; 0xe380
   134b0:	cmp	r0, #0
   134b4:	movt	r1, #3
   134b8:	str	r6, [r1]
   134bc:	bne	13aac <__assert_fail@plt+0x1a20>
   134c0:	b	135f4 <__assert_fail@plt+0x1568>
   134c4:	movw	r0, #47446	; 0xb956
   134c8:	movt	r0, #2
   134cc:	bl	11de0 <getenv@plt>
   134d0:	cmp	r0, #0
   134d4:	beq	13774 <__assert_fail@plt+0x16e8>
   134d8:	movw	r7, #55272	; 0xd7e8
   134dc:	movw	r1, #55228	; 0xd7bc
   134e0:	mov	r3, #4
   134e4:	mov	r6, r0
   134e8:	movt	r7, #2
   134ec:	movt	r1, #2
   134f0:	mov	r2, r7
   134f4:	bl	1de58 <__assert_fail@plt+0xbdcc>
   134f8:	cmn	r0, #1
   134fc:	ble	13738 <__assert_fail@plt+0x16ac>
   13500:	ldr	r8, [r7, r0, lsl #2]
   13504:	movw	r5, #58156	; 0xe32c
   13508:	movt	r5, #3
   1350c:	cmn	r8, #1
   13510:	bgt	1333c <__assert_fail@plt+0x12b0>
   13514:	b	13774 <__assert_fail@plt+0x16e8>
   13518:	cmp	r0, #0
   1351c:	beq	135e4 <__assert_fail@plt+0x1558>
   13520:	movw	r0, #58772	; 0xe594
   13524:	mov	r1, #0
   13528:	movt	r0, #3
   1352c:	ldr	r0, [r0]
   13530:	sub	r0, r0, #1
   13534:	cmp	r0, #3
   13538:	movw	r0, #58240	; 0xe380
   1353c:	movt	r0, #3
   13540:	movwcc	r1, #5
   13544:	str	r1, [r0]
   13548:	b	13aac <__assert_fail@plt+0x1a20>
   1354c:	movw	r4, #58160	; 0xe330
   13550:	mov	r0, #8
   13554:	movt	r4, #3
   13558:	str	r0, [r4]
   1355c:	movw	r0, #46630	; 0xb626
   13560:	movt	r0, #2
   13564:	bl	11de0 <getenv@plt>
   13568:	cmp	r0, #0
   1356c:	beq	132cc <__assert_fail@plt+0x1240>
   13570:	mov	r6, r0
   13574:	movw	r0, #47938	; 0xbb42
   13578:	add	r3, sp, #56	; 0x38
   1357c:	mov	r1, #0
   13580:	mov	r2, #0
   13584:	movt	r0, #2
   13588:	str	r0, [sp]
   1358c:	mov	r0, r6
   13590:	bl	27ff8 <_obstack_memory_used@@Base+0x370c>
   13594:	cmp	r0, #0
   13598:	ldreq	r0, [sp, #60]	; 0x3c
   1359c:	cmpeq	r0, #0
   135a0:	beq	137bc <__assert_fail@plt+0x1730>
   135a4:	movw	r1, #46638	; 0xb62e
   135a8:	mov	r0, #0
   135ac:	mov	r2, #5
   135b0:	movt	r1, #2
   135b4:	bl	11ca8 <dcgettext@plt>
   135b8:	mov	r7, r0
   135bc:	mov	r0, r6
   135c0:	bl	265b8 <_obstack_memory_used@@Base+0x1ccc>
   135c4:	movw	r5, #58156	; 0xe32c
   135c8:	mov	r3, r0
   135cc:	mov	r0, #0
   135d0:	mov	r1, #0
   135d4:	mov	r2, r7
   135d8:	movt	r5, #3
   135dc:	bl	11da4 <error@plt>
   135e0:	b	132cc <__assert_fail@plt+0x1240>
   135e4:	movw	r0, #58240	; 0xe380
   135e8:	mov	r1, #0
   135ec:	movt	r0, #3
   135f0:	str	r1, [r0]
   135f4:	ldr	r0, [sp, #52]	; 0x34
   135f8:	cmp	r0, #0
   135fc:	bne	13620 <__assert_fail@plt+0x1594>
   13600:	movw	r0, #46742	; 0xb696
   13604:	movt	r0, #2
   13608:	bl	11de0 <getenv@plt>
   1360c:	movw	r1, #38701	; 0x972d
   13610:	cmp	r0, #0
   13614:	movt	r1, #2
   13618:	movne	r1, r0
   1361c:	str	r1, [sp, #52]	; 0x34
   13620:	ldr	r0, [sp, #52]	; 0x34
   13624:	movw	r1, #49740	; 0xc24c
   13628:	mov	r2, #6
   1362c:	movt	r1, #2
   13630:	bl	1202c <strncmp@plt>
   13634:	cmp	r0, #0
   13638:	bne	13674 <__assert_fail@plt+0x15e8>
   1363c:	movw	r6, #49740	; 0xc24c
   13640:	movt	r6, #2
   13644:	mov	r0, #2
   13648:	bl	1f8e8 <__assert_fail@plt+0xd85c>
   1364c:	cmp	r0, #0
   13650:	beq	13aac <__assert_fail@plt+0x1a20>
   13654:	ldr	r0, [sp, #52]	; 0x34
   13658:	mov	r1, r6
   1365c:	mov	r2, #6
   13660:	add	r0, r0, #6
   13664:	str	r0, [sp, #52]	; 0x34
   13668:	bl	1202c <strncmp@plt>
   1366c:	cmp	r0, #0
   13670:	beq	13644 <__assert_fail@plt+0x15b8>
   13674:	ldr	r0, [sp, #52]	; 0x34
   13678:	movw	r4, #58000	; 0xe290
   1367c:	movt	r4, #3
   13680:	ldrb	r0, [r0]
   13684:	cmp	r0, #43	; 0x2b
   13688:	bne	136e4 <__assert_fail@plt+0x1658>
   1368c:	ldr	r0, [sp, #52]	; 0x34
   13690:	mov	r1, #10
   13694:	add	r8, r0, #1
   13698:	mov	r0, r8
   1369c:	bl	11eb8 <strchr@plt>
   136a0:	cmp	r0, #0
   136a4:	mov	r7, r8
   136a8:	beq	136d0 <__assert_fail@plt+0x1644>
   136ac:	add	r7, r0, #1
   136b0:	mov	r6, r0
   136b4:	mov	r1, #10
   136b8:	mov	r0, r7
   136bc:	bl	11eb8 <strchr@plt>
   136c0:	cmp	r0, #0
   136c4:	bne	155e8 <__assert_fail@plt+0x355c>
   136c8:	mov	r0, #0
   136cc:	strb	r0, [r6]
   136d0:	movw	r5, #58156	; 0xe32c
   136d4:	str	r8, [r4]
   136d8:	str	r7, [r4, #4]
   136dc:	movt	r5, #3
   136e0:	b	13828 <__assert_fail@plt+0x179c>
   136e4:	ldr	r0, [sp, #52]	; 0x34
   136e8:	movw	r1, #49748	; 0xc254
   136ec:	movw	r2, #49768	; 0xc268
   136f0:	mov	r3, #4
   136f4:	movt	r1, #2
   136f8:	movt	r2, #2
   136fc:	bl	1de58 <__assert_fail@plt+0xbdcc>
   13700:	mov	r2, r0
   13704:	cmn	r0, #1
   13708:	ble	15528 <__assert_fail@plt+0x349c>
   1370c:	cmp	r2, #3
   13710:	bhi	13828 <__assert_fail@plt+0x179c>
   13714:	add	r0, pc, #0
   13718:	ldr	pc, [r0, r2, lsl #2]
   1371c:	andeq	r3, r1, ip, lsr #14
   13720:	andeq	r3, r1, r8, lsl r8
   13724:	andeq	r3, r1, r8, asr #15
   13728:	andeq	r3, r1, r0, ror #15
   1372c:	movw	r0, #46885	; 0xb725
   13730:	movt	r0, #2
   13734:	b	13820 <__assert_fail@plt+0x1794>
   13738:	movw	r1, #47460	; 0xb964
   1373c:	mov	r0, #0
   13740:	mov	r2, #5
   13744:	movt	r1, #2
   13748:	bl	11ca8 <dcgettext@plt>
   1374c:	mov	r7, r0
   13750:	mov	r0, r6
   13754:	bl	265b8 <_obstack_memory_used@@Base+0x1ccc>
   13758:	mov	r3, r0
   1375c:	mov	r0, #0
   13760:	mov	r1, #0
   13764:	mov	r2, r7
   13768:	bl	11da4 <error@plt>
   1376c:	movw	r5, #58156	; 0xe32c
   13770:	movt	r5, #3
   13774:	movw	r0, #58016	; 0xe2a0
   13778:	mov	r8, #7
   1377c:	movt	r0, #3
   13780:	ldr	r0, [r0]
   13784:	cmp	r0, #1
   13788:	bne	1333c <__assert_fail@plt+0x12b0>
   1378c:	movw	r4, #58008	; 0xe298
   13790:	movt	r4, #3
   13794:	ldrsb	r0, [r4]
   13798:	cmn	r0, #1
   1379c:	bgt	137ac <__assert_fail@plt+0x1720>
   137a0:	mov	r0, #1
   137a4:	bl	12014 <isatty@plt>
   137a8:	strb	r0, [r4]
   137ac:	tst	r0, #255	; 0xff
   137b0:	beq	13348 <__assert_fail@plt+0x12bc>
   137b4:	mov	r8, #3
   137b8:	b	1333c <__assert_fail@plt+0x12b0>
   137bc:	ldr	r0, [sp, #56]	; 0x38
   137c0:	str	r0, [r4]
   137c4:	b	132cc <__assert_fail@plt+0x1240>
   137c8:	movw	r1, #46924	; 0xb74c
   137cc:	movw	r0, #46912	; 0xb740
   137d0:	movt	r1, #2
   137d4:	movt	r0, #2
   137d8:	str	r1, [r4]
   137dc:	b	13824 <__assert_fail@plt+0x1798>
   137e0:	mov	r0, #2
   137e4:	bl	1f8e8 <__assert_fail@plt+0xd85c>
   137e8:	cmp	r0, #0
   137ec:	beq	13828 <__assert_fail@plt+0x179c>
   137f0:	ldr	r1, [r4]
   137f4:	mov	r0, #0
   137f8:	mov	r2, #2
   137fc:	bl	11ca8 <dcgettext@plt>
   13800:	str	r0, [r4]
   13804:	mov	r0, #0
   13808:	mov	r2, #2
   1380c:	ldr	r1, [r4, #4]
   13810:	bl	11ca8 <dcgettext@plt>
   13814:	b	13824 <__assert_fail@plt+0x1798>
   13818:	movw	r0, #46909	; 0xb73d
   1381c:	movt	r0, #2
   13820:	str	r0, [r4]
   13824:	str	r0, [r4, #4]
   13828:	ldr	r9, [r4]
   1382c:	b	1383c <__assert_fail@plt+0x17b0>
   13830:	cmp	r0, #0
   13834:	beq	1386c <__assert_fail@plt+0x17e0>
   13838:	add	r9, r9, #1
   1383c:	ldrb	r0, [r9]
   13840:	cmp	r0, #37	; 0x25
   13844:	bne	13830 <__assert_fail@plt+0x17a4>
   13848:	mov	r0, r9
   1384c:	ldrb	r1, [r0, #1]!
   13850:	cmp	r1, #37	; 0x25
   13854:	beq	13864 <__assert_fail@plt+0x17d8>
   13858:	cmp	r1, #98	; 0x62
   1385c:	bne	13838 <__assert_fail@plt+0x17ac>
   13860:	b	13870 <__assert_fail@plt+0x17e4>
   13864:	mov	r9, r0
   13868:	b	13838 <__assert_fail@plt+0x17ac>
   1386c:	mov	r9, #0
   13870:	ldr	sl, [r4, #4]
   13874:	b	13888 <__assert_fail@plt+0x17fc>
   13878:	cmp	r0, #0
   1387c:	mov	r0, sl
   13880:	beq	138b4 <__assert_fail@plt+0x1828>
   13884:	add	sl, r0, #1
   13888:	ldrb	r0, [sl]
   1388c:	cmp	r0, #37	; 0x25
   13890:	bne	13878 <__assert_fail@plt+0x17ec>
   13894:	mov	r0, sl
   13898:	ldrb	r1, [r0, #1]!
   1389c:	cmp	r1, #37	; 0x25
   138a0:	beq	13884 <__assert_fail@plt+0x17f8>
   138a4:	cmp	r1, #98	; 0x62
   138a8:	beq	138d0 <__assert_fail@plt+0x1844>
   138ac:	mov	r0, sl
   138b0:	b	13884 <__assert_fail@plt+0x17f8>
   138b4:	cmp	r9, #0
   138b8:	beq	13aac <__assert_fail@plt+0x1a20>
   138bc:	mov	r0, #0
   138c0:	mov	sl, #0
   138c4:	str	r0, [sp, #52]	; 0x34
   138c8:	mov	r0, #1
   138cc:	b	138e0 <__assert_fail@plt+0x1854>
   138d0:	clz	r0, r9
   138d4:	lsr	r0, r0, #5
   138d8:	str	r0, [sp, #52]	; 0x34
   138dc:	mov	r0, #0
   138e0:	str	r0, [sp, #48]	; 0x30
   138e4:	mov	r4, #12
   138e8:	add	r7, sp, #56	; 0x38
   138ec:	mov	r8, #0
   138f0:	mov	r5, #0
   138f4:	movw	r0, #14
   138f8:	str	r4, [fp, #-36]	; 0xffffffdc
   138fc:	movt	r0, #2
   13900:	add	r0, r5, r0
   13904:	bl	11f9c <nl_langinfo@plt>
   13908:	mov	r1, #37	; 0x25
   1390c:	mov	r6, r0
   13910:	bl	11eb8 <strchr@plt>
   13914:	cmp	r0, #0
   13918:	bne	13aa4 <__assert_fail@plt+0x1a18>
   1391c:	bl	11e64 <__ctype_b_loc@plt>
   13920:	ldrb	r1, [r6]
   13924:	ldr	r0, [r0]
   13928:	mov	r2, #128	; 0x80
   1392c:	sub	r3, fp, #36	; 0x24
   13930:	add	r0, r0, r1, lsl #1
   13934:	mov	r1, #0
   13938:	ldrh	r0, [r0]
   1393c:	str	r1, [sp, #4]
   13940:	mov	r1, r7
   13944:	ubfx	r0, r0, #11, #1
   13948:	str	r0, [sp]
   1394c:	mov	r0, r6
   13950:	bl	21e90 <__assert_fail@plt+0xfe04>
   13954:	cmp	r0, #127	; 0x7f
   13958:	bhi	13aa4 <__assert_fail@plt+0x1a18>
   1395c:	ldr	r0, [fp, #-36]	; 0xffffffdc
   13960:	add	r5, r5, #1
   13964:	add	r7, r7, #128	; 0x80
   13968:	cmp	r8, r0
   1396c:	movls	r8, r0
   13970:	cmp	r5, #12
   13974:	bne	138f4 <__assert_fail@plt+0x1868>
   13978:	cmp	r4, r8
   1397c:	mov	r4, r8
   13980:	add	r7, sp, #56	; 0x38
   13984:	bhi	138ec <__assert_fail@plt+0x1860>
   13988:	movw	r4, #58000	; 0xe290
   1398c:	ldr	r5, [sp, #48]	; 0x30
   13990:	mov	r6, #0
   13994:	movt	r4, #3
   13998:	ldr	r8, [r4]
   1399c:	sub	r7, r9, r8
   139a0:	add	r9, r9, #2
   139a4:	ldr	r1, [sp, #52]	; 0x34
   139a8:	movw	r0, #58836	; 0xe5d4
   139ac:	movt	r0, #3
   139b0:	add	r0, r0, r6
   139b4:	cmp	r1, #0
   139b8:	beq	139cc <__assert_fail@plt+0x1940>
   139bc:	movw	r1, #54786	; 0xd602
   139c0:	movt	r1, #2
   139c4:	stm	sp, {r1, r8}
   139c8:	b	139f0 <__assert_fail@plt+0x1964>
   139cc:	cmp	r7, #128	; 0x80
   139d0:	bgt	13aa4 <__assert_fail@plt+0x1a18>
   139d4:	movw	r2, #47556	; 0xb9c4
   139d8:	add	r1, sp, #56	; 0x38
   139dc:	movt	r2, #2
   139e0:	add	r1, r1, r6
   139e4:	stm	sp, {r2, r7, r8}
   139e8:	str	r1, [sp, #12]
   139ec:	str	r9, [sp, #16]
   139f0:	mov	r1, #128	; 0x80
   139f4:	mov	r2, #1
   139f8:	mvn	r3, #0
   139fc:	bl	12068 <__snprintf_chk@plt>
   13a00:	cmp	r0, #128	; 0x80
   13a04:	bcs	13aa4 <__assert_fail@plt+0x1a18>
   13a08:	add	r6, r6, #128	; 0x80
   13a0c:	cmp	r6, #1536	; 0x600
   13a10:	bne	139a4 <__assert_fail@plt+0x1918>
   13a14:	ldr	r7, [r4, #4]
   13a18:	add	r8, sl, #2
   13a1c:	mov	r4, #0
   13a20:	sub	r6, sl, r7
   13a24:	movw	r0, #58836	; 0xe5d4
   13a28:	cmp	r5, #0
   13a2c:	movt	r0, #3
   13a30:	add	r0, r0, r4
   13a34:	add	r0, r0, #1536	; 0x600
   13a38:	beq	13a4c <__assert_fail@plt+0x19c0>
   13a3c:	movw	r1, #54786	; 0xd602
   13a40:	movt	r1, #2
   13a44:	stm	sp, {r1, r7}
   13a48:	b	13a70 <__assert_fail@plt+0x19e4>
   13a4c:	cmp	r6, #128	; 0x80
   13a50:	bgt	13aa4 <__assert_fail@plt+0x1a18>
   13a54:	movw	r2, #47556	; 0xb9c4
   13a58:	add	r1, sp, #56	; 0x38
   13a5c:	movt	r2, #2
   13a60:	add	r1, r1, r4
   13a64:	stm	sp, {r2, r6, r7}
   13a68:	str	r1, [sp, #12]
   13a6c:	str	r8, [sp, #16]
   13a70:	mov	r1, #128	; 0x80
   13a74:	mov	r2, #1
   13a78:	mvn	r3, #0
   13a7c:	bl	12068 <__snprintf_chk@plt>
   13a80:	cmp	r0, #127	; 0x7f
   13a84:	bhi	13aa4 <__assert_fail@plt+0x1a18>
   13a88:	add	r4, r4, #128	; 0x80
   13a8c:	cmp	r4, #1536	; 0x600
   13a90:	bne	13a24 <__assert_fail@plt+0x1998>
   13a94:	movw	r0, #61908	; 0xf1d4
   13a98:	mov	r1, #1
   13a9c:	movt	r0, #3
   13aa0:	strb	r1, [r0]
   13aa4:	movw	r5, #58156	; 0xe32c
   13aa8:	movt	r5, #3
   13aac:	movw	r0, #58112	; 0xe300
   13ab0:	mov	r9, #1
   13ab4:	movt	r0, #3
   13ab8:	ldr	sl, [r0]
   13abc:	ldrb	r0, [r5]
   13ac0:	cmp	r0, #0
   13ac4:	beq	13e98 <__assert_fail@plt+0x1e0c>
   13ac8:	movw	r0, #47565	; 0xb9cd
   13acc:	movt	r0, #2
   13ad0:	bl	11de0 <getenv@plt>
   13ad4:	cmp	r0, #0
   13ad8:	str	r0, [sp, #56]	; 0x38
   13adc:	beq	13d10 <__assert_fail@plt+0x1c84>
   13ae0:	ldrb	r1, [r0]
   13ae4:	cmp	r1, #0
   13ae8:	beq	13d10 <__assert_fail@plt+0x1c84>
   13aec:	mov	r1, #0
   13af0:	mov	r5, #0
   13af4:	strb	r1, [fp, #-38]	; 0xffffffda
   13af8:	movw	r1, #16191	; 0x3f3f
   13afc:	strh	r1, [fp, #-40]	; 0xffffffd8
   13b00:	bl	27c54 <_obstack_memory_used@@Base+0x3368>
   13b04:	movw	r1, #61912	; 0xf1d8
   13b08:	movw	r6, #61916	; 0xf1dc
   13b0c:	str	r0, [fp, #-36]	; 0xffffffdc
   13b10:	sub	r7, fp, #40	; 0x28
   13b14:	movt	r1, #3
   13b18:	movt	r6, #3
   13b1c:	str	r0, [r1]
   13b20:	mov	r0, #1
   13b24:	sub	r0, r0, #1
   13b28:	cmp	r0, #5
   13b2c:	bhi	15488 <__assert_fail@plt+0x33fc>
   13b30:	add	r1, pc, #0
   13b34:	ldr	pc, [r1, r0, lsl #2]
   13b38:	andeq	r3, r1, r0, asr fp
   13b3c:	andeq	r3, r1, ip, asr #23
   13b40:	strdeq	r3, [r1], -r0
   13b44:	andeq	r3, r1, r4, lsl #23
   13b48:	andeq	r5, r1, r8, lsl #9
   13b4c:	andeq	r3, r1, r0, asr #27
   13b50:	ldr	r4, [sp, #56]	; 0x38
   13b54:	ldrb	r0, [r4]
   13b58:	cmp	r0, #42	; 0x2a
   13b5c:	beq	13c58 <__assert_fail@plt+0x1bcc>
   13b60:	cmp	r0, #58	; 0x3a
   13b64:	beq	13c48 <__assert_fail@plt+0x1bbc>
   13b68:	cmp	r0, #0
   13b6c:	beq	13e24 <__assert_fail@plt+0x1d98>
   13b70:	strb	r0, [fp, #-40]	; 0xffffffd8
   13b74:	add	r0, r4, #1
   13b78:	str	r0, [sp, #56]	; 0x38
   13b7c:	mov	r0, #2
   13b80:	b	13b24 <__assert_fail@plt+0x1a98>
   13b84:	ldr	r0, [sp, #56]	; 0x38
   13b88:	add	r1, r0, #1
   13b8c:	str	r1, [sp, #56]	; 0x38
   13b90:	ldrb	r1, [r0]
   13b94:	mov	r0, #6
   13b98:	cmp	r1, #61	; 0x3d
   13b9c:	bne	13b24 <__assert_fail@plt+0x1a98>
   13ba0:	ldr	r0, [fp, #-36]	; 0xffffffdc
   13ba4:	add	r3, r5, #8
   13ba8:	add	r1, sp, #56	; 0x38
   13bac:	mov	r2, #0
   13bb0:	str	r0, [r5, #12]
   13bb4:	sub	r0, fp, #36	; 0x24
   13bb8:	bl	191c4 <__assert_fail@plt+0x7138>
   13bbc:	cmp	r0, #0
   13bc0:	mov	r0, #6
   13bc4:	movwne	r0, #1
   13bc8:	b	13b24 <__assert_fail@plt+0x1a98>
   13bcc:	ldr	r1, [sp, #56]	; 0x38
   13bd0:	mov	r0, #6
   13bd4:	ldrb	r2, [r1]
   13bd8:	cmp	r2, #0
   13bdc:	addne	r0, r1, #1
   13be0:	strbne	r2, [fp, #-39]	; 0xffffffd9
   13be4:	strne	r0, [sp, #56]	; 0x38
   13be8:	movne	r0, #3
   13bec:	b	13b24 <__assert_fail@plt+0x1a98>
   13bf0:	ldr	r0, [sp, #56]	; 0x38
   13bf4:	add	r1, r0, #1
   13bf8:	str	r1, [sp, #56]	; 0x38
   13bfc:	ldrb	r0, [r0]
   13c00:	cmp	r0, #61	; 0x3d
   13c04:	mov	r0, #6
   13c08:	bne	13b24 <__assert_fail@plt+0x1a98>
   13c0c:	movw	r8, #57800	; 0xe1c8
   13c10:	mov	r4, #0
   13c14:	movt	r8, #3
   13c18:	movw	r0, #49784	; 0xc278
   13c1c:	movt	r0, #2
   13c20:	ldr	r1, [r0, -r4, lsl #2]
   13c24:	mov	r0, r7
   13c28:	bl	11bd0 <strcmp@plt>
   13c2c:	cmp	r0, #0
   13c30:	beq	13ca4 <__assert_fail@plt+0x1c18>
   13c34:	sub	r4, r4, #1
   13c38:	add	r8, r8, #8
   13c3c:	cmn	r4, #24
   13c40:	bne	13c18 <__assert_fail@plt+0x1b8c>
   13c44:	b	13ccc <__assert_fail@plt+0x1c40>
   13c48:	add	r0, r4, #1
   13c4c:	str	r0, [sp, #56]	; 0x38
   13c50:	mov	r0, #1
   13c54:	b	13b24 <__assert_fail@plt+0x1a98>
   13c58:	mov	r0, #20
   13c5c:	bl	27750 <_obstack_memory_used@@Base+0x2e64>
   13c60:	mov	r3, r0
   13c64:	ldr	r0, [r6]
   13c68:	add	r1, sp, #56	; 0x38
   13c6c:	mov	r2, #1
   13c70:	str	r3, [r6]
   13c74:	mov	r5, r3
   13c78:	str	r0, [r3, #16]
   13c7c:	add	r0, r4, #1
   13c80:	str	r0, [sp, #56]	; 0x38
   13c84:	ldr	r0, [fp, #-36]	; 0xffffffdc
   13c88:	str	r0, [r3, #4]
   13c8c:	sub	r0, fp, #36	; 0x24
   13c90:	bl	191c4 <__assert_fail@plt+0x7138>
   13c94:	cmp	r0, #0
   13c98:	mov	r0, #6
   13c9c:	movwne	r0, #4
   13ca0:	b	13b24 <__assert_fail@plt+0x1a98>
   13ca4:	ldr	r0, [fp, #-36]	; 0xffffffdc
   13ca8:	add	r1, sp, #56	; 0x38
   13cac:	mov	r2, #0
   13cb0:	mov	r3, r8
   13cb4:	str	r0, [r8, #4]
   13cb8:	sub	r0, fp, #36	; 0x24
   13cbc:	bl	191c4 <__assert_fail@plt+0x7138>
   13cc0:	cmp	r0, #0
   13cc4:	mov	r0, #1
   13cc8:	bne	13b24 <__assert_fail@plt+0x1a98>
   13ccc:	movw	r1, #47588	; 0xb9e4
   13cd0:	mov	r0, #0
   13cd4:	mov	r2, #5
   13cd8:	movt	r1, #2
   13cdc:	bl	11ca8 <dcgettext@plt>
   13ce0:	mov	r4, r6
   13ce4:	mov	r6, r0
   13ce8:	mov	r0, r7
   13cec:	bl	265b8 <_obstack_memory_used@@Base+0x1ccc>
   13cf0:	mov	r3, r0
   13cf4:	mov	r2, r6
   13cf8:	mov	r0, #0
   13cfc:	mov	r1, #0
   13d00:	mov	r6, r4
   13d04:	bl	11da4 <error@plt>
   13d08:	mov	r0, #6
   13d0c:	b	13b24 <__assert_fail@plt+0x1a98>
   13d10:	movw	r0, #47575	; 0xb9d7
   13d14:	movt	r0, #2
   13d18:	bl	11de0 <getenv@plt>
   13d1c:	cmp	r0, #0
   13d20:	beq	13d30 <__assert_fail@plt+0x1ca4>
   13d24:	ldrb	r0, [r0]
   13d28:	cmp	r0, #0
   13d2c:	bne	13e64 <__assert_fail@plt+0x1dd8>
   13d30:	movw	r0, #47580	; 0xb9dc
   13d34:	movt	r0, #2
   13d38:	bl	11de0 <getenv@plt>
   13d3c:	cmp	r0, #0
   13d40:	beq	13e74 <__assert_fail@plt+0x1de8>
   13d44:	mov	r6, r0
   13d48:	ldrb	r0, [r0]
   13d4c:	cmp	r0, #0
   13d50:	beq	13e74 <__assert_fail@plt+0x1de8>
   13d54:	movw	r4, #49884	; 0xc2dc
   13d58:	movw	r8, #47671	; 0xba37
   13d5c:	movw	r5, #4310	; 0x10d6
   13d60:	movt	r4, #2
   13d64:	movt	r8, #2
   13d68:	mov	r7, r4
   13d6c:	b	13d8c <__assert_fail@plt+0x1d00>
   13d70:	mov	r0, r7
   13d74:	bl	11eac <strlen@plt>
   13d78:	add	r0, r0, r7
   13d7c:	add	r7, r0, #1
   13d80:	sub	r0, r7, r4
   13d84:	cmp	r0, r5
   13d88:	bcs	13e74 <__assert_fail@plt+0x1de8>
   13d8c:	mov	r0, r7
   13d90:	mov	r1, r8
   13d94:	mov	r2, #5
   13d98:	bl	1202c <strncmp@plt>
   13d9c:	cmp	r0, #0
   13da0:	bne	13d70 <__assert_fail@plt+0x1ce4>
   13da4:	add	r0, r7, #5
   13da8:	mov	r1, r6
   13dac:	mov	r2, #0
   13db0:	bl	11dc8 <fnmatch@plt>
   13db4:	cmp	r0, #0
   13db8:	bne	13d70 <__assert_fail@plt+0x1ce4>
   13dbc:	b	13e64 <__assert_fail@plt+0x1dd8>
   13dc0:	movw	r1, #47612	; 0xb9fc
   13dc4:	mov	r0, #0
   13dc8:	mov	r2, #5
   13dcc:	mov	r4, #0
   13dd0:	movt	r1, #2
   13dd4:	bl	11ca8 <dcgettext@plt>
   13dd8:	mov	r2, r0
   13ddc:	mov	r0, #0
   13de0:	mov	r1, #0
   13de4:	bl	11da4 <error@plt>
   13de8:	movw	r0, #61912	; 0xf1d8
   13dec:	movt	r0, #3
   13df0:	ldr	r0, [r0]
   13df4:	bl	1f89c <__assert_fail@plt+0xd810>
   13df8:	ldr	r0, [r6]
   13dfc:	cmp	r0, #0
   13e00:	beq	13e18 <__assert_fail@plt+0x1d8c>
   13e04:	ldr	r5, [r0, #16]
   13e08:	bl	1f89c <__assert_fail@plt+0xd810>
   13e0c:	cmp	r5, #0
   13e10:	mov	r0, r5
   13e14:	bne	13e04 <__assert_fail@plt+0x1d78>
   13e18:	movw	r0, #58156	; 0xe32c
   13e1c:	movt	r0, #3
   13e20:	strb	r4, [r0]
   13e24:	movw	r0, #57800	; 0xe1c8
   13e28:	movt	r0, #3
   13e2c:	ldr	r1, [r0, #56]	; 0x38
   13e30:	cmp	r1, #6
   13e34:	bne	13e64 <__assert_fail@plt+0x1dd8>
   13e38:	ldr	r0, [r0, #60]	; 0x3c
   13e3c:	movw	r1, #47664	; 0xba30
   13e40:	mov	r2, #6
   13e44:	movt	r1, #2
   13e48:	bl	1202c <strncmp@plt>
   13e4c:	cmp	r0, #0
   13e50:	bne	13e64 <__assert_fail@plt+0x1dd8>
   13e54:	movw	r0, #58166	; 0xe336
   13e58:	mov	r1, #1
   13e5c:	movt	r0, #3
   13e60:	strb	r1, [r0]
   13e64:	movw	r0, #58156	; 0xe32c
   13e68:	movt	r0, #3
   13e6c:	ldrb	r0, [r0]
   13e70:	b	13e84 <__assert_fail@plt+0x1df8>
   13e74:	movw	r1, #58156	; 0xe32c
   13e78:	mov	r0, #0
   13e7c:	movt	r1, #3
   13e80:	strb	r0, [r1]
   13e84:	cmp	r0, #0
   13e88:	movwne	r0, #58160	; 0xe330
   13e8c:	movne	r9, #0
   13e90:	movtne	r0, #3
   13e94:	strne	r9, [r0]
   13e98:	movw	r6, #58164	; 0xe334
   13e9c:	movt	r6, #3
   13ea0:	ldrb	r0, [r6]
   13ea4:	cmp	r0, #1
   13ea8:	bne	13ebc <__assert_fail@plt+0x1e30>
   13eac:	movw	r0, #58165	; 0xe335
   13eb0:	ldr	r5, [sp, #32]
   13eb4:	ldr	r7, [sp, #28]
   13eb8:	b	13fe8 <__assert_fail@plt+0x1f5c>
   13ebc:	ldr	r5, [sp, #32]
   13ec0:	ldr	r7, [sp, #28]
   13ec4:	cmp	r9, #0
   13ec8:	bne	13ff4 <__assert_fail@plt+0x1f68>
   13ecc:	movw	r4, #57800	; 0xe1c8
   13ed0:	movt	r4, #3
   13ed4:	ldr	r1, [r4, #104]	; 0x68
   13ed8:	cmp	r1, #0
   13edc:	beq	13f1c <__assert_fail@plt+0x1e90>
   13ee0:	ldr	r0, [r4, #108]	; 0x6c
   13ee4:	cmp	r1, #2
   13ee8:	beq	13f04 <__assert_fail@plt+0x1e78>
   13eec:	cmp	r1, #1
   13ef0:	bne	13fe4 <__assert_fail@plt+0x1f58>
   13ef4:	ldrb	r0, [r0]
   13ef8:	cmp	r0, #48	; 0x30
   13efc:	beq	13f1c <__assert_fail@plt+0x1e90>
   13f00:	b	13fe4 <__assert_fail@plt+0x1f58>
   13f04:	movw	r1, #46144	; 0xb440
   13f08:	mov	r2, #2
   13f0c:	movt	r1, #2
   13f10:	bl	1202c <strncmp@plt>
   13f14:	cmp	r0, #0
   13f18:	bne	13fe4 <__assert_fail@plt+0x1f58>
   13f1c:	ldr	r1, [r4, #112]	; 0x70
   13f20:	cmp	r1, #0
   13f24:	beq	13f78 <__assert_fail@plt+0x1eec>
   13f28:	ldr	r0, [r4, #116]	; 0x74
   13f2c:	cmp	r1, #2
   13f30:	beq	13f4c <__assert_fail@plt+0x1ec0>
   13f34:	cmp	r1, #1
   13f38:	bne	13f64 <__assert_fail@plt+0x1ed8>
   13f3c:	ldrb	r0, [r0]
   13f40:	cmp	r0, #48	; 0x30
   13f44:	bne	13f64 <__assert_fail@plt+0x1ed8>
   13f48:	b	13f78 <__assert_fail@plt+0x1eec>
   13f4c:	movw	r1, #46144	; 0xb440
   13f50:	mov	r2, #2
   13f54:	movt	r1, #2
   13f58:	bl	1202c <strncmp@plt>
   13f5c:	cmp	r0, #0
   13f60:	beq	13f78 <__assert_fail@plt+0x1eec>
   13f64:	movw	r0, #58166	; 0xe336
   13f68:	movt	r0, #3
   13f6c:	ldrb	r0, [r0]
   13f70:	cmp	r0, #0
   13f74:	bne	13fe4 <__assert_fail@plt+0x1f58>
   13f78:	ldr	r1, [r4, #96]	; 0x60
   13f7c:	cmp	r1, #0
   13f80:	beq	13ff4 <__assert_fail@plt+0x1f68>
   13f84:	ldr	r2, [r4, #100]	; 0x64
   13f88:	cmp	r1, #2
   13f8c:	beq	13fac <__assert_fail@plt+0x1f20>
   13f90:	mov	r0, #1
   13f94:	cmp	r1, #1
   13f98:	bne	13fc8 <__assert_fail@plt+0x1f3c>
   13f9c:	ldrb	r1, [r2]
   13fa0:	cmp	r1, #48	; 0x30
   13fa4:	bne	13fc8 <__assert_fail@plt+0x1f3c>
   13fa8:	b	13ff4 <__assert_fail@plt+0x1f68>
   13fac:	movw	r1, #46144	; 0xb440
   13fb0:	mov	r0, r2
   13fb4:	mov	r2, #2
   13fb8:	movt	r1, #2
   13fbc:	bl	1202c <strncmp@plt>
   13fc0:	cmp	r0, #0
   13fc4:	movwne	r0, #1
   13fc8:	cmp	r0, #0
   13fcc:	beq	13ff4 <__assert_fail@plt+0x1f68>
   13fd0:	movw	r0, #58168	; 0xe338
   13fd4:	movt	r0, #3
   13fd8:	ldr	r0, [r0]
   13fdc:	cmp	r0, #0
   13fe0:	bne	13ff4 <__assert_fail@plt+0x1f68>
   13fe4:	movw	r0, #58165	; 0xe335
   13fe8:	mov	r1, #1
   13fec:	movt	r0, #3
   13ff0:	strb	r1, [r0]
   13ff4:	movw	r0, #58172	; 0xe33c
   13ff8:	movt	r0, #3
   13ffc:	ldr	r1, [r0]
   14000:	cmp	r1, #0
   14004:	bne	1404c <__assert_fail@plt+0x1fc0>
   14008:	movw	r1, #58168	; 0xe338
   1400c:	mov	r2, #3
   14010:	movt	r1, #3
   14014:	ldr	r1, [r1]
   14018:	cmp	r1, #0
   1401c:	movw	r1, #58180	; 0xe344
   14020:	movt	r1, #3
   14024:	movweq	r2, #1
   14028:	ldr	r1, [r1]
   1402c:	cmp	r1, #3
   14030:	movw	r1, #58176	; 0xe340
   14034:	movt	r1, #3
   14038:	movweq	r2, #1
   1403c:	ldrb	r1, [r1]
   14040:	cmp	r1, #0
   14044:	movwne	r2, #1
   14048:	str	r2, [r0]
   1404c:	movw	r0, #58184	; 0xe348
   14050:	movw	r4, #63644	; 0xf89c
   14054:	movt	r0, #3
   14058:	movt	r4, #1
   1405c:	ldrb	r0, [r0]
   14060:	cmp	r0, #1
   14064:	bne	140c4 <__assert_fail@plt+0x2038>
   14068:	movw	r0, #22148	; 0x5684
   1406c:	movw	r2, #22044	; 0x561c
   14070:	movw	r3, #22076	; 0x563c
   14074:	mov	r1, #0
   14078:	movt	r0, #1
   1407c:	movt	r2, #1
   14080:	movt	r3, #1
   14084:	str	r0, [sp]
   14088:	mov	r0, #30
   1408c:	bl	1fdfc <__assert_fail@plt+0xdd70>
   14090:	movw	r1, #58188	; 0xe34c
   14094:	cmp	r0, #0
   14098:	movt	r1, #3
   1409c:	str	r0, [r1]
   140a0:	beq	15484 <__assert_fail@plt+0x33f8>
   140a4:	movw	r0, #58192	; 0xe350
   140a8:	movw	r3, #36076	; 0x8cec
   140ac:	mov	r1, #0
   140b0:	mov	r2, #0
   140b4:	str	r4, [sp]
   140b8:	movt	r0, #3
   140bc:	movt	r3, #2
   140c0:	bl	24568 <_obstack_begin@@Base>
   140c4:	movw	r0, #38708	; 0x9734
   140c8:	movt	r0, #2
   140cc:	bl	11de0 <getenv@plt>
   140d0:	bl	26a84 <_obstack_memory_used@@Base+0x2198>
   140d4:	movw	r1, #58236	; 0xe37c
   140d8:	movt	r1, #3
   140dc:	str	r0, [r1]
   140e0:	movw	r0, #58168	; 0xe338
   140e4:	movt	r0, #3
   140e8:	ldr	r0, [r0]
   140ec:	cmp	r0, #0
   140f0:	movw	r0, #58246	; 0xe386
   140f4:	movt	r0, #3
   140f8:	beq	14114 <__assert_fail@plt+0x2088>
   140fc:	movw	r1, #58240	; 0xe380
   14100:	movt	r1, #3
   14104:	ldr	r1, [r1]
   14108:	cmp	r1, #5
   1410c:	cmpne	r1, #3
   14110:	bne	14344 <__assert_fail@plt+0x22b8>
   14114:	mov	r1, #1
   14118:	strb	r1, [r0]
   1411c:	mov	r0, #0
   14120:	movw	r1, #58247	; 0xe387
   14124:	and	r0, r0, #1
   14128:	movt	r1, #3
   1412c:	strb	r0, [r1]
   14130:	movw	r0, #58248	; 0xe388
   14134:	movt	r0, #3
   14138:	ldrb	r0, [r0]
   1413c:	cmp	r0, #0
   14140:	beq	14184 <__assert_fail@plt+0x20f8>
   14144:	movw	r6, #36076	; 0x8cec
   14148:	movw	r0, #58252	; 0xe38c
   1414c:	mov	r1, #0
   14150:	mov	r2, #0
   14154:	str	r4, [sp]
   14158:	movt	r6, #2
   1415c:	movt	r0, #3
   14160:	mov	r3, r6
   14164:	bl	24568 <_obstack_begin@@Base>
   14168:	movw	r0, #58296	; 0xe3b8
   1416c:	mov	r1, #0
   14170:	mov	r2, #0
   14174:	mov	r3, r6
   14178:	str	r4, [sp]
   1417c:	movt	r0, #3
   14180:	bl	24568 <_obstack_begin@@Base>
   14184:	movw	r0, #58340	; 0xe3e4
   14188:	movt	r0, #3
   1418c:	ldrb	r0, [r0]
   14190:	cmp	r0, #0
   14194:	beq	14210 <__assert_fail@plt+0x2184>
   14198:	movw	r4, #58376	; 0xe408
   1419c:	mov	r6, #0
   141a0:	movt	r4, #3
   141a4:	b	141c0 <__assert_fail@plt+0x2134>
   141a8:	ldrb	r0, [r4, r6]
   141ac:	orr	r0, r0, r1
   141b0:	strb	r0, [r4, r6]
   141b4:	add	r6, r6, #1
   141b8:	cmp	r6, #256	; 0x100
   141bc:	beq	141f0 <__assert_fail@plt+0x2164>
   141c0:	mov	r0, r6
   141c4:	bl	1e45c <__assert_fail@plt+0xc3d0>
   141c8:	mov	r1, #1
   141cc:	cmp	r0, #0
   141d0:	bne	141a8 <__assert_fail@plt+0x211c>
   141d4:	sub	r0, r6, #45	; 0x2d
   141d8:	cmp	r0, #2
   141dc:	bcc	141a8 <__assert_fail@plt+0x211c>
   141e0:	cmp	r6, #95	; 0x5f
   141e4:	cmpne	r6, #126	; 0x7e
   141e8:	movne	r1, #0
   141ec:	b	141a8 <__assert_fail@plt+0x211c>
   141f0:	bl	27dcc <_obstack_memory_used@@Base+0x34e0>
   141f4:	movw	r1, #47938	; 0xbb42
   141f8:	cmp	r0, #0
   141fc:	movt	r1, #2
   14200:	movne	r1, r0
   14204:	movw	r0, #58344	; 0xe3e8
   14208:	movt	r0, #3
   1420c:	str	r1, [r0]
   14210:	movw	r0, #58348	; 0xe3ec
   14214:	mov	r1, #100	; 0x64
   14218:	movt	r0, #3
   1421c:	str	r1, [r0]
   14220:	mov	r0, #100	; 0x64
   14224:	mov	r1, #152	; 0x98
   14228:	bl	27820 <_obstack_memory_used@@Base+0x2f34>
   1422c:	movw	r1, #58352	; 0xe3f0
   14230:	movw	r9, #58356	; 0xe3f4
   14234:	sub	r8, r7, sl
   14238:	movt	r1, #3
   1423c:	movt	r9, #3
   14240:	cmp	r8, #1
   14244:	str	r0, [r1]
   14248:	movw	r1, #61921	; 0xf1e1
   1424c:	mov	r0, #0
   14250:	movt	r1, #3
   14254:	str	r0, [r9]
   14258:	strb	r0, [r1]
   1425c:	movw	r1, #61928	; 0xf1e8
   14260:	movt	r1, #3
   14264:	strb	r0, [r1]
   14268:	movw	r1, #61932	; 0xf1ec
   1426c:	movt	r1, #3
   14270:	str	r0, [r1]
   14274:	movw	r1, #61936	; 0xf1f0
   14278:	movt	r1, #3
   1427c:	str	r0, [r1]
   14280:	movw	r1, #61940	; 0xf1f4
   14284:	movt	r1, #3
   14288:	str	r0, [r1]
   1428c:	movw	r1, #61944	; 0xf1f8
   14290:	movt	r1, #3
   14294:	str	r0, [r1]
   14298:	movw	r1, #61948	; 0xf1fc
   1429c:	movt	r1, #3
   142a0:	str	r0, [r1]
   142a4:	movw	r1, #61952	; 0xf200
   142a8:	movt	r1, #3
   142ac:	str	r0, [r1]
   142b0:	movw	r1, #61956	; 0xf204
   142b4:	movt	r1, #3
   142b8:	str	r0, [r1]
   142bc:	movw	r1, #61960	; 0xf208
   142c0:	movt	r1, #3
   142c4:	str	r0, [r1]
   142c8:	movw	r1, #61964	; 0xf20c
   142cc:	movt	r1, #3
   142d0:	str	r0, [r1]
   142d4:	movw	r1, #61968	; 0xf210
   142d8:	movt	r1, #3
   142dc:	str	r0, [r1]
   142e0:	blt	14310 <__assert_fail@plt+0x2284>
   142e4:	movw	r6, #47938	; 0xbb42
   142e8:	movt	r6, #2
   142ec:	ldr	r0, [r5, sl, lsl #2]
   142f0:	mov	r1, #0
   142f4:	mov	r2, #1
   142f8:	mov	r3, r6
   142fc:	bl	15688 <__assert_fail@plt+0x35fc>
   14300:	add	sl, sl, #1
   14304:	cmp	sl, r7
   14308:	blt	142ec <__assert_fail@plt+0x2260>
   1430c:	b	143f8 <__assert_fail@plt+0x236c>
   14310:	movw	r0, #58176	; 0xe340
   14314:	movt	r0, #3
   14318:	ldrb	r0, [r0]
   1431c:	cmp	r0, #1
   14320:	bne	143b4 <__assert_fail@plt+0x2328>
   14324:	movw	r0, #54802	; 0xd612
   14328:	movw	r3, #47938	; 0xbb42
   1432c:	mov	r1, #3
   14330:	mov	r2, #1
   14334:	movt	r0, #2
   14338:	movt	r3, #2
   1433c:	bl	15688 <__assert_fail@plt+0x35fc>
   14340:	b	143f8 <__assert_fail@plt+0x236c>
   14344:	movw	r1, #58245	; 0xe385
   14348:	movw	r2, #58244	; 0xe384
   1434c:	movt	r1, #3
   14350:	movt	r2, #3
   14354:	ldrb	r1, [r1]
   14358:	ldrb	r2, [r2]
   1435c:	orr	r1, r2, r1
   14360:	ands	r1, r1, #1
   14364:	strb	r1, [r0]
   14368:	mov	r0, #0
   1436c:	bne	14120 <__assert_fail@plt+0x2094>
   14370:	movw	r0, #58184	; 0xe348
   14374:	movt	r0, #3
   14378:	ldrb	r1, [r0]
   1437c:	mov	r0, #1
   14380:	cmp	r1, #0
   14384:	bne	14120 <__assert_fail@plt+0x2094>
   14388:	movw	r0, #58180	; 0xe344
   1438c:	movw	r1, #58156	; 0xe32c
   14390:	movt	r0, #3
   14394:	movt	r1, #3
   14398:	ldr	r0, [r0]
   1439c:	ldrb	r1, [r1]
   143a0:	orrs	r0, r1, r0
   143a4:	ldrb	r1, [r6]
   143a8:	movwne	r0, #1
   143ac:	orr	r0, r1, r0
   143b0:	b	14120 <__assert_fail@plt+0x2094>
   143b4:	mov	r0, #16
   143b8:	bl	27750 <_obstack_memory_used@@Base+0x2e64>
   143bc:	mov	r4, r0
   143c0:	mov	r0, #0
   143c4:	str	r0, [r4, #4]
   143c8:	movw	r0, #54802	; 0xd612
   143cc:	movt	r0, #2
   143d0:	bl	27c54 <_obstack_memory_used@@Base+0x3368>
   143d4:	mov	r1, #1
   143d8:	strb	r1, [r4, #8]
   143dc:	str	r0, [r4]
   143e0:	movw	r0, #58144	; 0xe320
   143e4:	movt	r0, #3
   143e8:	mov	r1, r0
   143ec:	ldr	r0, [r0]
   143f0:	str	r4, [r1]
   143f4:	str	r0, [r4, #12]
   143f8:	ldr	r0, [r9]
   143fc:	movw	sl, #58188	; 0xe34c
   14400:	movw	r9, #58144	; 0xe320
   14404:	movt	sl, #3
   14408:	movt	r9, #3
   1440c:	mov	r5, sl
   14410:	cmp	r0, #0
   14414:	beq	144ac <__assert_fail@plt+0x2420>
   14418:	bl	16a20 <__assert_fail@plt+0x4994>
   1441c:	movw	r0, #58176	; 0xe340
   14420:	movt	r0, #3
   14424:	ldrb	r0, [r0]
   14428:	cmp	r0, #0
   1442c:	moveq	r0, #0
   14430:	moveq	r1, #1
   14434:	bleq	16e40 <__assert_fail@plt+0x4db4>
   14438:	movw	r0, #58356	; 0xe3f4
   1443c:	movt	r0, #3
   14440:	ldr	r0, [r0]
   14444:	cmp	r0, #0
   14448:	beq	144ac <__assert_fail@plt+0x2420>
   1444c:	bl	17110 <__assert_fail@plt+0x5084>
   14450:	ldr	r6, [r9]
   14454:	movw	r7, #58136	; 0xe318
   14458:	movt	r7, #3
   1445c:	mov	r8, r7
   14460:	cmp	r6, #0
   14464:	beq	15244 <__assert_fail@plt+0x31b8>
   14468:	movw	r0, #58632	; 0xe508
   1446c:	movt	r0, #3
   14470:	ldrd	r2, [r0]
   14474:	adds	r2, r2, #1
   14478:	adc	r3, r3, #0
   1447c:	strd	r2, [r0]
   14480:	movw	r0, #58124	; 0xe30c
   14484:	movt	r0, #3
   14488:	ldr	r0, [r0]
   1448c:	ldr	r1, [r0, #20]
   14490:	ldr	r2, [r0, #24]
   14494:	cmp	r1, r2
   14498:	bcs	15230 <__assert_fail@plt+0x31a4>
   1449c:	add	r2, r1, #1
   144a0:	str	r2, [r0, #20]
   144a4:	mov	r0, #10
   144a8:	b	144e4 <__assert_fail@plt+0x2458>
   144ac:	ldr	r6, [r9]
   144b0:	cmp	r8, #1
   144b4:	bgt	144ec <__assert_fail@plt+0x2460>
   144b8:	cmp	r6, #0
   144bc:	beq	144ec <__assert_fail@plt+0x2460>
   144c0:	ldr	r0, [r6, #12]
   144c4:	movw	r7, #58136	; 0xe318
   144c8:	movt	r7, #3
   144cc:	mov	r8, r7
   144d0:	cmp	r0, #0
   144d4:	bne	14500 <__assert_fail@plt+0x2474>
   144d8:	movw	r1, #58140	; 0xe31c
   144dc:	mov	r0, #0
   144e0:	movt	r1, #3
   144e4:	strb	r0, [r1]
   144e8:	b	14500 <__assert_fail@plt+0x2474>
   144ec:	movw	r7, #58136	; 0xe318
   144f0:	movt	r7, #3
   144f4:	mov	r8, r7
   144f8:	cmp	r6, #0
   144fc:	beq	15244 <__assert_fail@plt+0x31b8>
   14500:	movw	r4, #58192	; 0xe350
   14504:	add	r0, sp, #56	; 0x38
   14508:	movt	r4, #3
   1450c:	add	r1, r0, #1
   14510:	add	r0, r0, #96	; 0x60
   14514:	str	r1, [sp, #28]
   14518:	str	r0, [sp, #32]
   1451c:	b	14580 <__assert_fail@plt+0x24f4>
   14520:	ldr	r0, [r9]
   14524:	movw	r4, #58192	; 0xe350
   14528:	movw	r5, #58188	; 0xe34c
   1452c:	mov	r8, r9
   14530:	movw	r9, #58144	; 0xe320
   14534:	movt	r4, #3
   14538:	movt	r5, #3
   1453c:	movt	r9, #3
   14540:	cmp	r0, #0
   14544:	moveq	r0, #1
   14548:	streq	r0, [r8]
   1454c:	ldr	r0, [r6]
   14550:	bl	1f89c <__assert_fail@plt+0xd810>
   14554:	ldr	r0, [r6, #4]
   14558:	bl	1f89c <__assert_fail@plt+0xd810>
   1455c:	mov	r0, r6
   14560:	bl	1f89c <__assert_fail@plt+0xd810>
   14564:	movw	r0, #58140	; 0xe31c
   14568:	mov	r1, #1
   1456c:	movt	r0, #3
   14570:	strb	r1, [r0]
   14574:	ldr	r6, [r9]
   14578:	cmp	r6, #0
   1457c:	beq	15244 <__assert_fail@plt+0x31b8>
   14580:	ldr	r0, [r6, #12]
   14584:	str	r0, [r9]
   14588:	ldr	r0, [r5]
   1458c:	ldr	r7, [r6]
   14590:	cmp	r0, #0
   14594:	beq	145f4 <__assert_fail@plt+0x2568>
   14598:	cmp	r7, #0
   1459c:	bne	145f4 <__assert_fail@plt+0x2568>
   145a0:	ldr	r2, [r4, #8]
   145a4:	ldr	r1, [r4, #12]
   145a8:	sub	r2, r1, r2
   145ac:	cmp	r2, #15
   145b0:	bls	15444 <__assert_fail@plt+0x33b8>
   145b4:	sub	r1, r1, #16
   145b8:	str	r1, [r4, #12]
   145bc:	vld1.64	{d16-d17}, [r1]
   145c0:	add	r1, sp, #56	; 0x38
   145c4:	vst1.64	{d16-d17}, [r1]
   145c8:	bl	20990 <__assert_fail@plt+0xe904>
   145cc:	cmp	r0, #0
   145d0:	beq	15464 <__assert_fail@plt+0x33d8>
   145d4:	bl	1f89c <__assert_fail@plt+0xd810>
   145d8:	ldr	r0, [r6]
   145dc:	bl	1f89c <__assert_fail@plt+0xd810>
   145e0:	ldr	r0, [r6, #4]
   145e4:	bl	1f89c <__assert_fail@plt+0xd810>
   145e8:	mov	r0, r6
   145ec:	bl	1f89c <__assert_fail@plt+0xd810>
   145f0:	b	14574 <__assert_fail@plt+0x24e8>
   145f4:	ldrb	sl, [r6, #8]
   145f8:	ldr	r4, [r6, #4]
   145fc:	mov	r9, r8
   14600:	bl	11ed0 <__errno_location@plt>
   14604:	mov	r8, r0
   14608:	mov	r0, #0
   1460c:	str	r0, [r8]
   14610:	mov	r0, r7
   14614:	bl	11dbc <opendir@plt>
   14618:	cmp	r0, #0
   1461c:	str	r0, [sp, #44]	; 0x2c
   14620:	beq	14668 <__assert_fail@plt+0x25dc>
   14624:	ldr	r0, [r5]
   14628:	str	sl, [sp, #40]	; 0x28
   1462c:	str	r7, [sp, #52]	; 0x34
   14630:	str	r4, [sp, #48]	; 0x30
   14634:	cmp	r0, #0
   14638:	beq	14884 <__assert_fail@plt+0x27f8>
   1463c:	ldr	r0, [sp, #44]	; 0x2c
   14640:	bl	11fe4 <dirfd@plt>
   14644:	cmp	r0, #0
   14648:	bmi	146d4 <__assert_fail@plt+0x2648>
   1464c:	mov	r1, #256	; 0x100
   14650:	add	r2, sp, #56	; 0x38
   14654:	mov	r3, #4096	; 0x1000
   14658:	str	r1, [sp]
   1465c:	movw	r1, #47938	; 0xbb42
   14660:	movt	r1, #2
   14664:	b	146ec <__assert_fail@plt+0x2660>
   14668:	movw	r1, #47734	; 0xba76
   1466c:	mov	r0, #0
   14670:	mov	r2, #5
   14674:	movt	r1, #2
   14678:	bl	11ca8 <dcgettext@plt>
   1467c:	ldr	r5, [r8]
   14680:	mov	r4, r0
   14684:	mov	r0, #4
   14688:	mov	r1, r7
   1468c:	bl	26090 <_obstack_memory_used@@Base+0x17a4>
   14690:	mov	r3, r0
   14694:	mov	r0, #0
   14698:	mov	r1, r5
   1469c:	mov	r2, r4
   146a0:	bl	11da4 <error@plt>
   146a4:	cmp	sl, #0
   146a8:	beq	14520 <__assert_fail@plt+0x2494>
   146ac:	mov	r0, #2
   146b0:	movw	r4, #58192	; 0xe350
   146b4:	movw	r5, #58188	; 0xe34c
   146b8:	mov	r8, r9
   146bc:	str	r0, [r9]
   146c0:	movw	r9, #58144	; 0xe320
   146c4:	movt	r4, #3
   146c8:	movt	r5, #3
   146cc:	movt	r9, #3
   146d0:	b	1454c <__assert_fail@plt+0x24c0>
   146d4:	ldr	r1, [sp, #52]	; 0x34
   146d8:	mov	r0, #256	; 0x100
   146dc:	add	r2, sp, #56	; 0x38
   146e0:	mov	r3, #0
   146e4:	str	r0, [sp]
   146e8:	mvn	r0, #99	; 0x63
   146ec:	bl	19c40 <__assert_fail@plt+0x7bb4>
   146f0:	movw	r9, #58144	; 0xe320
   146f4:	cmn	r0, #1
   146f8:	movt	r9, #3
   146fc:	ble	147d4 <__assert_fail@plt+0x2748>
   14700:	ldr	r0, [sp, #32]
   14704:	ldr	r7, [sp, #56]	; 0x38
   14708:	ldr	r5, [sp, #60]	; 0x3c
   1470c:	ldr	sl, [r0]
   14710:	ldr	r9, [r0, #4]
   14714:	mov	r0, #16
   14718:	bl	27750 <_obstack_memory_used@@Base+0x2e64>
   1471c:	mov	r4, r0
   14720:	str	sl, [r0]
   14724:	str	r9, [r0, #4]
   14728:	str	r7, [r0, #8]
   1472c:	str	r5, [r0, #12]
   14730:	movw	r0, #58188	; 0xe34c
   14734:	movt	r0, #3
   14738:	mov	r1, r4
   1473c:	ldr	r0, [r0]
   14740:	bl	20950 <__assert_fail@plt+0xe8c4>
   14744:	cmp	r0, #0
   14748:	beq	15484 <__assert_fail@plt+0x33f8>
   1474c:	cmp	r0, r4
   14750:	beq	14840 <__assert_fail@plt+0x27b4>
   14754:	mov	r0, r4
   14758:	bl	1f89c <__assert_fail@plt+0xd810>
   1475c:	movw	r1, #47799	; 0xbab7
   14760:	mov	r0, #0
   14764:	mov	r2, #5
   14768:	movt	r1, #2
   1476c:	bl	11ca8 <dcgettext@plt>
   14770:	ldr	r2, [sp, #52]	; 0x34
   14774:	mov	r4, r0
   14778:	mov	r0, #0
   1477c:	mov	r1, #3
   14780:	bl	2630c <_obstack_memory_used@@Base+0x1a20>
   14784:	mov	r3, r0
   14788:	mov	r0, #0
   1478c:	mov	r1, #0
   14790:	mov	r2, r4
   14794:	bl	11da4 <error@plt>
   14798:	ldr	r0, [sp, #44]	; 0x2c
   1479c:	bl	12044 <closedir@plt>
   147a0:	movw	r7, #58136	; 0xe318
   147a4:	movw	sl, #58188	; 0xe34c
   147a8:	movw	r9, #58144	; 0xe320
   147ac:	movw	r4, #58192	; 0xe350
   147b0:	mov	r0, #2
   147b4:	movt	r7, #3
   147b8:	movt	sl, #3
   147bc:	movt	r9, #3
   147c0:	movt	r4, #3
   147c4:	mov	r8, r7
   147c8:	mov	r5, sl
   147cc:	str	r0, [r7]
   147d0:	b	1454c <__assert_fail@plt+0x24c0>
   147d4:	movw	r1, #47759	; 0xba8f
   147d8:	mov	r0, #0
   147dc:	mov	r2, #5
   147e0:	mov	sl, r5
   147e4:	movt	r1, #2
   147e8:	bl	11ca8 <dcgettext@plt>
   147ec:	ldr	r1, [sp, #52]	; 0x34
   147f0:	ldr	r5, [r8]
   147f4:	mov	r4, r0
   147f8:	mov	r0, #4
   147fc:	bl	26090 <_obstack_memory_used@@Base+0x17a4>
   14800:	mov	r3, r0
   14804:	mov	r0, #0
   14808:	mov	r1, r5
   1480c:	mov	r2, r4
   14810:	bl	11da4 <error@plt>
   14814:	ldr	r1, [sp, #40]	; 0x28
   14818:	movw	r7, #58136	; 0xe318
   1481c:	movw	r4, #58192	; 0xe350
   14820:	mov	r0, #2
   14824:	movt	r7, #3
   14828:	movt	r4, #3
   1482c:	mov	r8, r7
   14830:	cmp	r1, #0
   14834:	beq	14b10 <__assert_fail@plt+0x2a84>
   14838:	str	r0, [r8]
   1483c:	b	14b1c <__assert_fail@plt+0x2a90>
   14840:	movw	r4, #58192	; 0xe350
   14844:	movt	r4, #3
   14848:	ldr	r0, [r4, #12]
   1484c:	ldr	r1, [r4, #16]
   14850:	sub	r1, r1, r0
   14854:	cmp	r1, #15
   14858:	bhi	1486c <__assert_fail@plt+0x27e0>
   1485c:	mov	r0, r4
   14860:	mov	r1, #16
   14864:	bl	246bc <_obstack_newchunk@@Base>
   14868:	ldr	r0, [r4, #12]
   1486c:	add	r1, r0, #16
   14870:	str	r1, [r4, #12]
   14874:	str	sl, [r0]
   14878:	str	r9, [r0, #4]
   1487c:	str	r7, [r0, #8]
   14880:	str	r5, [r0, #12]
   14884:	movw	r7, #58356	; 0xe3f4
   14888:	movw	r9, #58632	; 0xe508
   1488c:	movw	sl, #58124	; 0xe30c
   14890:	movt	r7, #3
   14894:	movt	r9, #3
   14898:	movt	sl, #3
   1489c:	ldr	r0, [r7]
   148a0:	cmp	r0, #0
   148a4:	beq	14904 <__assert_fail@plt+0x2878>
   148a8:	mov	r4, #0
   148ac:	b	148c0 <__assert_fail@plt+0x2834>
   148b0:	ldr	r0, [r7]
   148b4:	add	r4, r4, #1
   148b8:	cmp	r4, r0
   148bc:	bcs	14904 <__assert_fail@plt+0x2878>
   148c0:	movw	r0, #61924	; 0xf1e4
   148c4:	movt	r0, #3
   148c8:	ldr	r0, [r0]
   148cc:	ldr	r5, [r0, r4, lsl #2]
   148d0:	ldr	r0, [r5]
   148d4:	bl	1f89c <__assert_fail@plt+0xd810>
   148d8:	ldr	r0, [r5, #4]
   148dc:	bl	1f89c <__assert_fail@plt+0xd810>
   148e0:	ldr	r0, [r5, #8]
   148e4:	bl	1f89c <__assert_fail@plt+0xd810>
   148e8:	ldr	r0, [r5, #128]	; 0x80
   148ec:	movw	r1, #58009	; 0xe299
   148f0:	movt	r1, #3
   148f4:	cmp	r0, r1
   148f8:	beq	148b0 <__assert_fail@plt+0x2824>
   148fc:	bl	11ff0 <freecon@plt>
   14900:	b	148b0 <__assert_fail@plt+0x2824>
   14904:	movw	r0, #61921	; 0xf1e1
   14908:	mov	r1, #0
   1490c:	movt	r0, #3
   14910:	str	r1, [r7]
   14914:	strb	r1, [r0]
   14918:	movw	r0, #61928	; 0xf1e8
   1491c:	movt	r0, #3
   14920:	strb	r1, [r0]
   14924:	movw	r0, #61932	; 0xf1ec
   14928:	movt	r0, #3
   1492c:	str	r1, [r0]
   14930:	movw	r0, #61936	; 0xf1f0
   14934:	movt	r0, #3
   14938:	str	r1, [r0]
   1493c:	movw	r0, #61940	; 0xf1f4
   14940:	movt	r0, #3
   14944:	str	r1, [r0]
   14948:	movw	r0, #61944	; 0xf1f8
   1494c:	movt	r0, #3
   14950:	str	r1, [r0]
   14954:	movw	r0, #61948	; 0xf1fc
   14958:	movt	r0, #3
   1495c:	str	r1, [r0]
   14960:	movw	r0, #61952	; 0xf200
   14964:	movt	r0, #3
   14968:	str	r1, [r0]
   1496c:	movw	r0, #61956	; 0xf204
   14970:	movt	r0, #3
   14974:	str	r1, [r0]
   14978:	movw	r0, #61960	; 0xf208
   1497c:	movt	r0, #3
   14980:	str	r1, [r0]
   14984:	movw	r0, #61964	; 0xf20c
   14988:	movt	r0, #3
   1498c:	str	r1, [r0]
   14990:	movw	r0, #61968	; 0xf210
   14994:	movt	r0, #3
   14998:	str	r1, [r0]
   1499c:	movw	r0, #58184	; 0xe348
   149a0:	movt	r0, #3
   149a4:	ldrb	r0, [r0]
   149a8:	cmp	r0, #0
   149ac:	bne	149c4 <__assert_fail@plt+0x2938>
   149b0:	movw	r0, #58140	; 0xe31c
   149b4:	movt	r0, #3
   149b8:	ldrb	r0, [r0]
   149bc:	cmp	r0, #0
   149c0:	beq	14be8 <__assert_fail@plt+0x2b5c>
   149c4:	movw	r0, #61920	; 0xf1e0
   149c8:	movt	r0, #3
   149cc:	ldrb	r0, [r0]
   149d0:	cmp	r0, #1
   149d4:	bne	14a0c <__assert_fail@plt+0x2980>
   149d8:	ldrd	r0, [r9]
   149dc:	adds	r0, r0, #1
   149e0:	adc	r1, r1, #0
   149e4:	strd	r0, [r9]
   149e8:	ldr	r0, [sl]
   149ec:	ldr	r1, [r0, #20]
   149f0:	ldr	r2, [r0, #24]
   149f4:	cmp	r1, r2
   149f8:	bcs	15224 <__assert_fail@plt+0x3198>
   149fc:	add	r2, r1, #1
   14a00:	str	r2, [r0, #20]
   14a04:	mov	r0, #10
   14a08:	strb	r0, [r1]
   14a0c:	movw	r1, #61920	; 0xf1e0
   14a10:	mov	r0, #1
   14a14:	movt	r1, #3
   14a18:	strb	r0, [r1]
   14a1c:	movw	r0, #58248	; 0xe388
   14a20:	movt	r0, #3
   14a24:	ldrb	r0, [r0]
   14a28:	cmp	r0, #0
   14a2c:	beq	14a84 <__assert_fail@plt+0x29f8>
   14a30:	ldrd	r0, [r9]
   14a34:	ldr	r4, [sl]
   14a38:	adds	r0, r0, #2
   14a3c:	adc	r1, r1, #0
   14a40:	strd	r0, [r9]
   14a44:	ldr	r0, [r4, #20]
   14a48:	ldr	r1, [r4, #24]
   14a4c:	cmp	r0, r1
   14a50:	bcs	151d4 <__assert_fail@plt+0x3148>
   14a54:	add	r1, r0, #1
   14a58:	str	r1, [r4, #20]
   14a5c:	mov	r1, #32
   14a60:	strb	r1, [r0]
   14a64:	ldr	r0, [r4, #20]
   14a68:	ldr	r1, [r4, #24]
   14a6c:	cmp	r0, r1
   14a70:	bcs	151ec <__assert_fail@plt+0x3160>
   14a74:	add	r1, r0, #1
   14a78:	str	r1, [r4, #20]
   14a7c:	mov	r1, #32
   14a80:	strb	r1, [r0]
   14a84:	movw	r0, #58340	; 0xe3e4
   14a88:	movt	r0, #3
   14a8c:	ldrb	r0, [r0]
   14a90:	cmp	r0, #0
   14a94:	beq	14b44 <__assert_fail@plt+0x2ab8>
   14a98:	ldr	sl, [sp, #52]	; 0x34
   14a9c:	mov	r1, #2
   14aa0:	mov	r0, sl
   14aa4:	bl	1e808 <__assert_fail@plt+0xc77c>
   14aa8:	mov	r4, r0
   14aac:	cmp	r0, #0
   14ab0:	bne	14b4c <__assert_fail@plt+0x2ac0>
   14ab4:	movw	r1, #47840	; 0xbae0
   14ab8:	mov	r0, #0
   14abc:	mov	r2, #5
   14ac0:	movt	r1, #2
   14ac4:	bl	11ca8 <dcgettext@plt>
   14ac8:	ldr	r5, [r8]
   14acc:	mov	r4, r0
   14ad0:	mov	r0, #4
   14ad4:	mov	r1, sl
   14ad8:	bl	26090 <_obstack_memory_used@@Base+0x17a4>
   14adc:	mov	r3, r0
   14ae0:	mov	r0, #0
   14ae4:	mov	r1, r5
   14ae8:	mov	r2, r4
   14aec:	bl	11da4 <error@plt>
   14af0:	ldr	r0, [sp, #40]	; 0x28
   14af4:	cmp	r0, #0
   14af8:	beq	14b2c <__assert_fail@plt+0x2aa0>
   14afc:	movw	r0, #58136	; 0xe318
   14b00:	mov	r1, #2
   14b04:	movt	r0, #3
   14b08:	str	r1, [r0]
   14b0c:	b	14b44 <__assert_fail@plt+0x2ab8>
   14b10:	ldr	r0, [r8]
   14b14:	cmp	r0, #0
   14b18:	beq	151a4 <__assert_fail@plt+0x3118>
   14b1c:	ldr	r0, [sp, #44]	; 0x2c
   14b20:	bl	12044 <closedir@plt>
   14b24:	mov	r5, sl
   14b28:	b	1454c <__assert_fail@plt+0x24c0>
   14b2c:	movw	r1, #58136	; 0xe318
   14b30:	movt	r1, #3
   14b34:	ldr	r0, [r1]
   14b38:	cmp	r0, #0
   14b3c:	moveq	r0, #1
   14b40:	streq	r0, [r1]
   14b44:	ldr	sl, [sp, #52]	; 0x34
   14b48:	mov	r4, #0
   14b4c:	movw	r0, #58828	; 0xe5cc
   14b50:	mvn	r2, #0
   14b54:	mov	r3, #0
   14b58:	movt	r0, #3
   14b5c:	ldr	r1, [r0]
   14b60:	mov	r0, #1
   14b64:	str	r0, [sp]
   14b68:	movw	r0, #58296	; 0xe3b8
   14b6c:	movt	r0, #3
   14b70:	stmib	sp, {r0, r4}
   14b74:	ldr	r0, [sp, #48]	; 0x30
   14b78:	cmp	r0, #0
   14b7c:	moveq	r0, sl
   14b80:	bl	1969c <__assert_fail@plt+0x7610>
   14b84:	mov	r0, r4
   14b88:	bl	1f89c <__assert_fail@plt+0xd810>
   14b8c:	ldrd	r0, [r9]
   14b90:	adds	r0, r0, #2
   14b94:	adc	r1, r1, #0
   14b98:	strd	r0, [r9]
   14b9c:	movw	r0, #58124	; 0xe30c
   14ba0:	movt	r0, #3
   14ba4:	ldr	r4, [r0]
   14ba8:	ldr	r0, [r4, #20]
   14bac:	ldr	r1, [r4, #24]
   14bb0:	cmp	r0, r1
   14bb4:	bcs	151ac <__assert_fail@plt+0x3120>
   14bb8:	add	r1, r0, #1
   14bbc:	str	r1, [r4, #20]
   14bc0:	mov	r1, #58	; 0x3a
   14bc4:	strb	r1, [r0]
   14bc8:	ldr	r0, [r4, #20]
   14bcc:	ldr	r1, [r4, #24]
   14bd0:	cmp	r0, r1
   14bd4:	bcs	151c4 <__assert_fail@plt+0x3138>
   14bd8:	add	r1, r0, #1
   14bdc:	str	r1, [r4, #20]
   14be0:	mov	r1, #10
   14be4:	strb	r1, [r0]
   14be8:	str	r6, [sp, #36]	; 0x24
   14bec:	ldr	r6, [sp, #44]	; 0x2c
   14bf0:	mov	sl, #0
   14bf4:	mov	r0, #0
   14bf8:	str	r0, [sp, #48]	; 0x30
   14bfc:	b	14c0c <__assert_fail@plt+0x2b80>
   14c00:	movw	r7, #58356	; 0xe3f4
   14c04:	movt	r7, #3
   14c08:	bl	19b5c <__assert_fail@plt+0x7ad0>
   14c0c:	mov	r0, #0
   14c10:	str	r0, [r8]
   14c14:	mov	r0, r6
   14c18:	bl	11fc0 <readdir64@plt>
   14c1c:	cmp	r0, #0
   14c20:	beq	14e00 <__assert_fail@plt+0x2d74>
   14c24:	mov	r4, r0
   14c28:	add	r9, r0, #19
   14c2c:	movw	r0, #58768	; 0xe590
   14c30:	movt	r0, #3
   14c34:	ldr	r0, [r0]
   14c38:	cmp	r0, #2
   14c3c:	beq	14cb4 <__assert_fail@plt+0x2c28>
   14c40:	ldrb	r1, [r9]
   14c44:	cmp	r1, #46	; 0x2e
   14c48:	bne	14c74 <__assert_fail@plt+0x2be8>
   14c4c:	cmp	r0, #0
   14c50:	beq	14c00 <__assert_fail@plt+0x2b74>
   14c54:	ldrb	r1, [r4, #20]
   14c58:	cmp	r1, #46	; 0x2e
   14c5c:	mov	r1, #1
   14c60:	movweq	r1, #2
   14c64:	add	r1, r4, r1
   14c68:	ldrb	r1, [r1, #19]
   14c6c:	cmp	r1, #0
   14c70:	beq	14c00 <__assert_fail@plt+0x2b74>
   14c74:	cmp	r0, #0
   14c78:	bne	14cb4 <__assert_fail@plt+0x2c28>
   14c7c:	movw	r0, #58808	; 0xe5b8
   14c80:	movt	r0, #3
   14c84:	ldr	r5, [r0]
   14c88:	cmp	r5, #0
   14c8c:	beq	14cb4 <__assert_fail@plt+0x2c28>
   14c90:	ldr	r0, [r5]
   14c94:	mov	r1, r9
   14c98:	mov	r2, #4
   14c9c:	bl	11dc8 <fnmatch@plt>
   14ca0:	cmp	r0, #0
   14ca4:	beq	14c00 <__assert_fail@plt+0x2b74>
   14ca8:	ldr	r5, [r5, #4]
   14cac:	cmp	r5, #0
   14cb0:	bne	14c90 <__assert_fail@plt+0x2c04>
   14cb4:	movw	r0, #58832	; 0xe5d0
   14cb8:	movt	r0, #3
   14cbc:	ldr	r5, [r0]
   14cc0:	cmp	r5, #0
   14cc4:	beq	14cec <__assert_fail@plt+0x2c60>
   14cc8:	ldr	r0, [r5]
   14ccc:	mov	r1, r9
   14cd0:	mov	r2, #4
   14cd4:	bl	11dc8 <fnmatch@plt>
   14cd8:	cmp	r0, #0
   14cdc:	beq	14c00 <__assert_fail@plt+0x2b74>
   14ce0:	ldr	r5, [r5, #4]
   14ce4:	cmp	r5, #0
   14ce8:	bne	14cc8 <__assert_fail@plt+0x2c3c>
   14cec:	ldrb	r0, [r4, #18]
   14cf0:	mov	r1, #0
   14cf4:	sub	r0, r0, #1
   14cf8:	uxtb	r2, r0
   14cfc:	cmp	r2, #13
   14d00:	bhi	14d14 <__assert_fail@plt+0x2c88>
   14d04:	movw	r1, #54584	; 0xd538
   14d08:	sxtb	r0, r0
   14d0c:	movt	r1, #2
   14d10:	ldr	r1, [r1, r0, lsl #2]
   14d14:	ldr	r3, [sp, #52]	; 0x34
   14d18:	mov	r0, r9
   14d1c:	mov	r2, #0
   14d20:	bl	15688 <__assert_fail@plt+0x35fc>
   14d24:	adds	sl, r0, sl
   14d28:	ldr	r0, [sp, #48]	; 0x30
   14d2c:	adc	r0, r1, r0
   14d30:	mov	r1, r0
   14d34:	movw	r0, #58168	; 0xe338
   14d38:	movt	r0, #3
   14d3c:	str	r1, [sp, #48]	; 0x30
   14d40:	ldr	r0, [r0]
   14d44:	cmp	r0, #1
   14d48:	bne	14c00 <__assert_fail@plt+0x2b74>
   14d4c:	movw	r0, #58240	; 0xe380
   14d50:	movw	r7, #58356	; 0xe3f4
   14d54:	movt	r0, #3
   14d58:	movt	r7, #3
   14d5c:	ldr	r0, [r0]
   14d60:	cmp	r0, #6
   14d64:	bne	14e8c <__assert_fail@plt+0x2e00>
   14d68:	movw	r0, #58245	; 0xe385
   14d6c:	movt	r0, #3
   14d70:	ldrb	r0, [r0]
   14d74:	cmp	r0, #0
   14d78:	bne	14e8c <__assert_fail@plt+0x2e00>
   14d7c:	movw	r0, #58184	; 0xe348
   14d80:	movt	r0, #3
   14d84:	ldrb	r0, [r0]
   14d88:	cmp	r0, #0
   14d8c:	bne	14e8c <__assert_fail@plt+0x2e00>
   14d90:	bl	16a20 <__assert_fail@plt+0x4994>
   14d94:	bl	17110 <__assert_fail@plt+0x5084>
   14d98:	ldr	r0, [r7]
   14d9c:	cmp	r0, #0
   14da0:	beq	14e9c <__assert_fail@plt+0x2e10>
   14da4:	mov	r4, #0
   14da8:	b	14dbc <__assert_fail@plt+0x2d30>
   14dac:	ldr	r0, [r7]
   14db0:	add	r4, r4, #1
   14db4:	cmp	r4, r0
   14db8:	bcs	14e9c <__assert_fail@plt+0x2e10>
   14dbc:	movw	r0, #61924	; 0xf1e4
   14dc0:	movt	r0, #3
   14dc4:	ldr	r0, [r0]
   14dc8:	ldr	r5, [r0, r4, lsl #2]
   14dcc:	ldr	r0, [r5]
   14dd0:	bl	1f89c <__assert_fail@plt+0xd810>
   14dd4:	ldr	r0, [r5, #4]
   14dd8:	bl	1f89c <__assert_fail@plt+0xd810>
   14ddc:	ldr	r0, [r5, #8]
   14de0:	bl	1f89c <__assert_fail@plt+0xd810>
   14de4:	ldr	r0, [r5, #128]	; 0x80
   14de8:	movw	r1, #58009	; 0xe299
   14dec:	movt	r1, #3
   14df0:	cmp	r0, r1
   14df4:	beq	14dac <__assert_fail@plt+0x2d20>
   14df8:	bl	11ff0 <freecon@plt>
   14dfc:	b	14dac <__assert_fail@plt+0x2d20>
   14e00:	ldr	r0, [r8]
   14e04:	ldr	r6, [sp, #40]	; 0x28
   14e08:	cmp	r0, #0
   14e0c:	beq	14f3c <__assert_fail@plt+0x2eb0>
   14e10:	movw	r1, #47864	; 0xbaf8
   14e14:	mov	r0, #0
   14e18:	mov	r2, #5
   14e1c:	movt	r1, #2
   14e20:	bl	11ca8 <dcgettext@plt>
   14e24:	ldr	r1, [sp, #52]	; 0x34
   14e28:	ldr	r5, [r8]
   14e2c:	mov	r4, r0
   14e30:	mov	r0, #4
   14e34:	bl	26090 <_obstack_memory_used@@Base+0x17a4>
   14e38:	mov	r3, r0
   14e3c:	mov	r0, #0
   14e40:	mov	r1, r5
   14e44:	mov	r2, r4
   14e48:	bl	11da4 <error@plt>
   14e4c:	mov	r0, #2
   14e50:	cmp	r6, #0
   14e54:	beq	14e68 <__assert_fail@plt+0x2ddc>
   14e58:	movw	r1, #58136	; 0xe318
   14e5c:	movt	r1, #3
   14e60:	str	r0, [r1]
   14e64:	b	14e7c <__assert_fail@plt+0x2df0>
   14e68:	movw	r0, #58136	; 0xe318
   14e6c:	movt	r0, #3
   14e70:	ldr	r0, [r0]
   14e74:	cmp	r0, #0
   14e78:	beq	14e94 <__assert_fail@plt+0x2e08>
   14e7c:	ldr	r0, [r8]
   14e80:	cmp	r0, #75	; 0x4b
   14e84:	bne	14f3c <__assert_fail@plt+0x2eb0>
   14e88:	ldr	r6, [sp, #44]	; 0x2c
   14e8c:	bl	19b5c <__assert_fail@plt+0x7ad0>
   14e90:	b	14c0c <__assert_fail@plt+0x2b80>
   14e94:	mov	r0, #1
   14e98:	b	14e58 <__assert_fail@plt+0x2dcc>
   14e9c:	movw	r0, #61921	; 0xf1e1
   14ea0:	mov	r1, #0
   14ea4:	movt	r0, #3
   14ea8:	str	r1, [r7]
   14eac:	strb	r1, [r0]
   14eb0:	movw	r0, #61928	; 0xf1e8
   14eb4:	movt	r0, #3
   14eb8:	strb	r1, [r0]
   14ebc:	movw	r0, #61932	; 0xf1ec
   14ec0:	movt	r0, #3
   14ec4:	str	r1, [r0]
   14ec8:	movw	r0, #61936	; 0xf1f0
   14ecc:	movt	r0, #3
   14ed0:	str	r1, [r0]
   14ed4:	movw	r0, #61940	; 0xf1f4
   14ed8:	movt	r0, #3
   14edc:	str	r1, [r0]
   14ee0:	movw	r0, #61944	; 0xf1f8
   14ee4:	movt	r0, #3
   14ee8:	str	r1, [r0]
   14eec:	movw	r0, #61948	; 0xf1fc
   14ef0:	movt	r0, #3
   14ef4:	str	r1, [r0]
   14ef8:	movw	r0, #61952	; 0xf200
   14efc:	movt	r0, #3
   14f00:	str	r1, [r0]
   14f04:	movw	r0, #61956	; 0xf204
   14f08:	movt	r0, #3
   14f0c:	str	r1, [r0]
   14f10:	movw	r0, #61960	; 0xf208
   14f14:	movt	r0, #3
   14f18:	str	r1, [r0]
   14f1c:	movw	r0, #61964	; 0xf20c
   14f20:	movt	r0, #3
   14f24:	str	r1, [r0]
   14f28:	movw	r0, #61968	; 0xf210
   14f2c:	movt	r0, #3
   14f30:	str	r1, [r0]
   14f34:	bl	19b5c <__assert_fail@plt+0x7ad0>
   14f38:	b	14c0c <__assert_fail@plt+0x2b80>
   14f3c:	ldr	r0, [sp, #44]	; 0x2c
   14f40:	bl	12044 <closedir@plt>
   14f44:	cmp	r0, #0
   14f48:	beq	14fb0 <__assert_fail@plt+0x2f24>
   14f4c:	movw	r1, #47885	; 0xbb0d
   14f50:	mov	r0, #0
   14f54:	mov	r2, #5
   14f58:	movt	r1, #2
   14f5c:	bl	11ca8 <dcgettext@plt>
   14f60:	ldr	r1, [sp, #52]	; 0x34
   14f64:	ldr	r5, [r8]
   14f68:	mov	r4, r0
   14f6c:	mov	r0, #4
   14f70:	bl	26090 <_obstack_memory_used@@Base+0x17a4>
   14f74:	mov	r3, r0
   14f78:	mov	r0, #0
   14f7c:	mov	r1, r5
   14f80:	mov	r2, r4
   14f84:	bl	11da4 <error@plt>
   14f88:	movw	r0, #58136	; 0xe318
   14f8c:	cmp	r6, #0
   14f90:	movt	r0, #3
   14f94:	beq	14fa4 <__assert_fail@plt+0x2f18>
   14f98:	mov	r1, #2
   14f9c:	str	r1, [r0]
   14fa0:	b	14fb0 <__assert_fail@plt+0x2f24>
   14fa4:	ldr	r0, [r0]
   14fa8:	cmp	r0, #0
   14fac:	beq	15194 <__assert_fail@plt+0x3108>
   14fb0:	bl	16a20 <__assert_fail@plt+0x4994>
   14fb4:	movw	r0, #58184	; 0xe348
   14fb8:	movt	r0, #3
   14fbc:	ldrb	r0, [r0]
   14fc0:	cmp	r0, #1
   14fc4:	bne	14fd4 <__assert_fail@plt+0x2f48>
   14fc8:	ldr	r0, [sp, #52]	; 0x34
   14fcc:	mov	r1, #0
   14fd0:	bl	16e40 <__assert_fail@plt+0x4db4>
   14fd4:	movw	r0, #58168	; 0xe338
   14fd8:	movw	r4, #58192	; 0xe350
   14fdc:	movt	r0, #3
   14fe0:	movt	r4, #3
   14fe4:	ldr	r0, [r0]
   14fe8:	cmp	r0, #0
   14fec:	beq	15004 <__assert_fail@plt+0x2f78>
   14ff0:	movw	r0, #58245	; 0xe385
   14ff4:	movt	r0, #3
   14ff8:	ldrb	r0, [r0]
   14ffc:	cmp	r0, #1
   15000:	bne	1515c <__assert_fail@plt+0x30d0>
   15004:	movw	r0, #58780	; 0xe59c
   15008:	mov	r2, #512	; 0x200
   1500c:	movt	r0, #3
   15010:	str	r2, [sp]
   15014:	mov	r2, #0
   15018:	str	r2, [sp, #4]
   1501c:	ldr	r2, [sp, #28]
   15020:	ldr	r3, [r0]
   15024:	movw	r0, #58792	; 0xe5a8
   15028:	movt	r0, #3
   1502c:	ldrd	r0, [r0]
   15030:	str	r1, [sp, #12]
   15034:	ldr	r1, [sp, #48]	; 0x30
   15038:	str	r0, [sp, #8]
   1503c:	mov	r0, sl
   15040:	bl	20cf8 <__assert_fail@plt+0xec6c>
   15044:	mov	r4, r0
   15048:	bl	11eac <strlen@plt>
   1504c:	mov	r5, r4
   15050:	mov	r1, #32
   15054:	movw	r8, #58632	; 0xe508
   15058:	movw	r9, #58124	; 0xe30c
   1505c:	strb	r1, [r5, #-1]!
   15060:	movw	r1, #58812	; 0xe5bc
   15064:	movt	r8, #3
   15068:	movt	r9, #3
   1506c:	movt	r1, #3
   15070:	ldrb	r1, [r1]
   15074:	cmp	r1, #0
   15078:	mov	r1, #10
   1507c:	movwne	r1, #0
   15080:	strb	r1, [r4, r0]!
   15084:	movw	r0, #58248	; 0xe388
   15088:	movt	r0, #3
   1508c:	ldrb	r0, [r0]
   15090:	cmp	r0, #0
   15094:	beq	150ec <__assert_fail@plt+0x3060>
   15098:	ldrd	r0, [r8]
   1509c:	ldr	r6, [r9]
   150a0:	adds	r0, r0, #2
   150a4:	adc	r1, r1, #0
   150a8:	strd	r0, [r8]
   150ac:	ldr	r0, [r6, #20]
   150b0:	ldr	r1, [r6, #24]
   150b4:	cmp	r0, r1
   150b8:	bcs	151fc <__assert_fail@plt+0x3170>
   150bc:	add	r1, r0, #1
   150c0:	str	r1, [r6, #20]
   150c4:	mov	r1, #32
   150c8:	strb	r1, [r0]
   150cc:	ldr	r0, [r6, #20]
   150d0:	ldr	r1, [r6, #24]
   150d4:	cmp	r0, r1
   150d8:	bcs	15214 <__assert_fail@plt+0x3188>
   150dc:	add	r1, r0, #1
   150e0:	str	r1, [r6, #20]
   150e4:	mov	r1, #32
   150e8:	strb	r1, [r0]
   150ec:	movw	r1, #47906	; 0xbb22
   150f0:	mov	r0, #0
   150f4:	mov	r2, #5
   150f8:	add	r6, r4, #1
   150fc:	movt	r1, #2
   15100:	bl	11ca8 <dcgettext@plt>
   15104:	mov	r4, r0
   15108:	bl	11eac <strlen@plt>
   1510c:	mov	r2, r0
   15110:	ldrd	r0, [r8]
   15114:	ldr	r3, [r9]
   15118:	adds	r0, r0, r2
   1511c:	adc	r1, r1, #0
   15120:	strd	r0, [r8]
   15124:	mov	r0, r4
   15128:	mov	r1, #1
   1512c:	bl	11c90 <fwrite_unlocked@plt>
   15130:	ldrd	r0, [r8]
   15134:	sub	r2, r6, r5
   15138:	ldr	r3, [r9]
   1513c:	adds	r0, r0, r2
   15140:	adc	r1, r1, #0
   15144:	strd	r0, [r8]
   15148:	mov	r0, r5
   1514c:	mov	r1, #1
   15150:	bl	11c90 <fwrite_unlocked@plt>
   15154:	movw	r4, #58192	; 0xe350
   15158:	movt	r4, #3
   1515c:	ldr	r0, [r7]
   15160:	movw	r7, #58136	; 0xe318
   15164:	movw	sl, #58188	; 0xe34c
   15168:	ldr	r6, [sp, #36]	; 0x24
   1516c:	movw	r9, #58144	; 0xe320
   15170:	movt	r7, #3
   15174:	movt	sl, #3
   15178:	movt	r9, #3
   1517c:	mov	r8, r7
   15180:	mov	r5, sl
   15184:	cmp	r0, #0
   15188:	beq	1454c <__assert_fail@plt+0x24c0>
   1518c:	bl	17110 <__assert_fail@plt+0x5084>
   15190:	b	1454c <__assert_fail@plt+0x24c0>
   15194:	movw	r0, #58136	; 0xe318
   15198:	mov	r1, #1
   1519c:	movt	r0, #3
   151a0:	b	14f9c <__assert_fail@plt+0x2f10>
   151a4:	mov	r0, #1
   151a8:	b	14838 <__assert_fail@plt+0x27ac>
   151ac:	mov	r0, r4
   151b0:	mov	r1, #58	; 0x3a
   151b4:	bl	11f54 <__overflow@plt>
   151b8:	cmn	r0, #1
   151bc:	bne	14bc8 <__assert_fail@plt+0x2b3c>
   151c0:	b	14be8 <__assert_fail@plt+0x2b5c>
   151c4:	mov	r0, r4
   151c8:	mov	r1, #10
   151cc:	bl	11f54 <__overflow@plt>
   151d0:	b	14be8 <__assert_fail@plt+0x2b5c>
   151d4:	mov	r0, r4
   151d8:	mov	r1, #32
   151dc:	bl	11f54 <__overflow@plt>
   151e0:	cmn	r0, #1
   151e4:	bne	14a64 <__assert_fail@plt+0x29d8>
   151e8:	b	14a84 <__assert_fail@plt+0x29f8>
   151ec:	mov	r0, r4
   151f0:	mov	r1, #32
   151f4:	bl	11f54 <__overflow@plt>
   151f8:	b	14a84 <__assert_fail@plt+0x29f8>
   151fc:	mov	r0, r6
   15200:	mov	r1, #32
   15204:	bl	11f54 <__overflow@plt>
   15208:	cmn	r0, #1
   1520c:	bne	150cc <__assert_fail@plt+0x3040>
   15210:	b	150ec <__assert_fail@plt+0x3060>
   15214:	mov	r0, r6
   15218:	mov	r1, #32
   1521c:	bl	11f54 <__overflow@plt>
   15220:	b	150ec <__assert_fail@plt+0x3060>
   15224:	mov	r1, #10
   15228:	bl	11f54 <__overflow@plt>
   1522c:	b	14a0c <__assert_fail@plt+0x2980>
   15230:	mov	r1, #10
   15234:	bl	11f54 <__overflow@plt>
   15238:	ldr	r6, [r9]
   1523c:	cmp	r6, #0
   15240:	bne	14500 <__assert_fail@plt+0x2474>
   15244:	movw	r0, #58156	; 0xe32c
   15248:	mov	r6, r5
   1524c:	movw	r5, #58372	; 0xe404
   15250:	movt	r0, #3
   15254:	movt	r5, #3
   15258:	ldrb	r0, [r0]
   1525c:	cmp	r0, #0
   15260:	beq	15314 <__assert_fail@plt+0x3288>
   15264:	movw	r0, #58360	; 0xe3f8
   15268:	movt	r0, #3
   1526c:	ldrb	r0, [r0]
   15270:	cmp	r0, #1
   15274:	bne	15314 <__assert_fail@plt+0x3288>
   15278:	movw	r4, #57800	; 0xe1c8
   1527c:	movt	r4, #3
   15280:	ldr	r0, [r4]
   15284:	cmp	r0, #2
   15288:	bne	152b0 <__assert_fail@plt+0x3224>
   1528c:	ldr	r0, [r4, #4]
   15290:	movw	r1, #38749	; 0x975d
   15294:	mov	r2, #2
   15298:	movt	r1, #2
   1529c:	bl	11e94 <bcmp@plt>
   152a0:	cmp	r0, #0
   152a4:	ldreq	r0, [r4, #8]
   152a8:	cmpeq	r0, #1
   152ac:	beq	153a4 <__assert_fail@plt+0x3318>
   152b0:	mov	r0, r4
   152b4:	bl	18e3c <__assert_fail@plt+0x6db0>
   152b8:	add	r0, r4, #8
   152bc:	bl	18e3c <__assert_fail@plt+0x6db0>
   152c0:	movw	r0, #58124	; 0xe30c
   152c4:	movt	r0, #3
   152c8:	ldr	r0, [r0]
   152cc:	bl	11d08 <fflush_unlocked@plt>
   152d0:	mov	r0, #0
   152d4:	bl	18ecc <__assert_fail@plt+0x6e40>
   152d8:	movw	r0, #58364	; 0xe3fc
   152dc:	movt	r0, #3
   152e0:	ldr	r4, [r0]
   152e4:	cmp	r4, #0
   152e8:	beq	152fc <__assert_fail@plt+0x3270>
   152ec:	mov	r0, #19
   152f0:	bl	11bac <raise@plt>
   152f4:	subs	r4, r4, #1
   152f8:	bne	152ec <__assert_fail@plt+0x3260>
   152fc:	movw	r0, #58368	; 0xe400
   15300:	movt	r0, #3
   15304:	ldr	r0, [r0]
   15308:	cmp	r0, #0
   1530c:	beq	15314 <__assert_fail@plt+0x3288>
   15310:	bl	11bac <raise@plt>
   15314:	movw	r0, #58248	; 0xe388
   15318:	movt	r0, #3
   1531c:	ldrb	r0, [r0]
   15320:	cmp	r0, #0
   15324:	beq	15374 <__assert_fail@plt+0x32e8>
   15328:	movw	r0, #38752	; 0x9760
   1532c:	movw	r1, #58252	; 0xe38c
   15330:	movt	r0, #2
   15334:	movt	r1, #3
   15338:	bl	187ec <__assert_fail@plt+0x6760>
   1533c:	movw	r0, #38762	; 0x976a
   15340:	movw	r1, #58296	; 0xe3b8
   15344:	movt	r0, #2
   15348:	movt	r1, #3
   1534c:	bl	187ec <__assert_fail@plt+0x6760>
   15350:	ldr	r0, [r5]
   15354:	bl	24a64 <_obstack_memory_used@@Base+0x178>
   15358:	movw	r1, #55228	; 0xd7bc
   1535c:	movt	r1, #2
   15360:	ldr	r2, [r1, r0, lsl #2]
   15364:	movw	r1, #38775	; 0x9777
   15368:	mov	r0, #1
   1536c:	movt	r1, #2
   15370:	bl	11f00 <__printf_chk@plt>
   15374:	ldr	r4, [r6]
   15378:	cmp	r4, #0
   1537c:	beq	15398 <__assert_fail@plt+0x330c>
   15380:	mov	r0, r4
   15384:	bl	1f968 <__assert_fail@plt+0xd8dc>
   15388:	cmp	r0, #0
   1538c:	bne	15510 <__assert_fail@plt+0x3484>
   15390:	mov	r0, r4
   15394:	bl	20100 <__assert_fail@plt+0xe074>
   15398:	ldr	r0, [r8]
   1539c:	sub	sp, fp, #28
   153a0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   153a4:	ldr	r0, [r4, #12]
   153a8:	ldrb	r0, [r0]
   153ac:	cmp	r0, #109	; 0x6d
   153b0:	bne	152b0 <__assert_fail@plt+0x3224>
   153b4:	b	152c0 <__assert_fail@plt+0x3234>
   153b8:	mov	r0, #2
   153bc:	bl	188bc <__assert_fail@plt+0x6830>
   153c0:	movw	r1, #58016	; 0xe2a0
   153c4:	movw	r0, #58020	; 0xe2a4
   153c8:	movw	r6, #46513	; 0xb5b1
   153cc:	movw	r7, #46533	; 0xb5c5
   153d0:	movt	r1, #3
   153d4:	movt	r0, #3
   153d8:	movt	r6, #2
   153dc:	movt	r7, #2
   153e0:	ldr	r2, [r1]
   153e4:	ldr	r3, [r0]
   153e8:	movw	r0, #58124	; 0xe30c
   153ec:	mov	r1, #0
   153f0:	stm	sp, {r6, r7}
   153f4:	movw	r7, #46139	; 0xb43b
   153f8:	movt	r0, #3
   153fc:	str	r1, [sp, #8]
   15400:	movw	r1, #47157	; 0xb835
   15404:	movt	r7, #2
   15408:	movt	r1, #2
   1540c:	ldr	r0, [r0]
   15410:	cmp	r2, #2
   15414:	moveq	r7, r1
   15418:	cmp	r2, #1
   1541c:	movw	r2, #46499	; 0xb5a3
   15420:	movw	r1, #46510	; 0xb5ae
   15424:	movt	r2, #2
   15428:	movt	r1, #2
   1542c:	movne	r1, r7
   15430:	bl	2751c <_obstack_memory_used@@Base+0x2c30>
   15434:	mov	r0, #0
   15438:	bl	11e7c <exit@plt>
   1543c:	mov	r0, #0
   15440:	bl	188bc <__assert_fail@plt+0x6830>
   15444:	movw	r0, #46147	; 0xb443
   15448:	movw	r1, #38717	; 0x973d
   1544c:	movw	r3, #46202	; 0xb47a
   15450:	movw	r2, #1053	; 0x41d
   15454:	movt	r0, #2
   15458:	movt	r1, #2
   1545c:	movt	r3, #2
   15460:	bl	1208c <__assert_fail@plt>
   15464:	movw	r0, #38711	; 0x9737
   15468:	movw	r1, #38717	; 0x973d
   1546c:	movw	r3, #38726	; 0x9746
   15470:	movw	r2, #1805	; 0x70d
   15474:	movt	r0, #2
   15478:	movt	r1, #2
   1547c:	movt	r3, #2
   15480:	bl	1208c <__assert_fail@plt>
   15484:	bl	27c8c <_obstack_memory_used@@Base+0x33a0>
   15488:	bl	12038 <abort@plt>
   1548c:	movw	r1, #58128	; 0xe310
   15490:	movw	r3, #48736	; 0xbe60
   15494:	movt	r1, #3
   15498:	movt	r3, #2
   1549c:	ldr	r2, [r1]
   154a0:	ldr	r1, [fp, #-36]	; 0xffffffdc
   154a4:	str	r2, [sp]
   154a8:	mov	r2, #0
   154ac:	bl	27f34 <_obstack_memory_used@@Base+0x3648>
   154b0:	movw	r1, #46362	; 0xb51a
   154b4:	mov	r0, #0
   154b8:	mov	r2, #5
   154bc:	movt	r1, #2
   154c0:	bl	11ca8 <dcgettext@plt>
   154c4:	mov	r4, r0
   154c8:	ldr	r0, [sl]
   154cc:	bl	265b8 <_obstack_memory_used@@Base+0x1ccc>
   154d0:	movw	r2, #46355	; 0xb513
   154d4:	str	r0, [sp]
   154d8:	mov	r0, #2
   154dc:	mov	r1, #0
   154e0:	mov	r3, r4
   154e4:	movt	r2, #2
   154e8:	bl	11da4 <error@plt>
   154ec:	movw	r1, #46706	; 0xb672
   154f0:	mov	r0, #0
   154f4:	mov	r2, #5
   154f8:	movt	r1, #2
   154fc:	bl	11ca8 <dcgettext@plt>
   15500:	mov	r2, r0
   15504:	mov	r0, #2
   15508:	mov	r1, #0
   1550c:	bl	11da4 <error@plt>
   15510:	movw	r0, #38813	; 0x979d
   15514:	movw	r1, #38717	; 0x973d
   15518:	movw	r3, #38726	; 0x9746
   1551c:	movw	r2, #1857	; 0x741
   15520:	movt	r0, #2
   15524:	b	15478 <__assert_fail@plt+0x33ec>
   15528:	ldr	r1, [sp, #52]	; 0x34
   1552c:	movw	r0, #46782	; 0xb6be
   15530:	movt	r0, #2
   15534:	bl	1dfa4 <__assert_fail@plt+0xbf18>
   15538:	movw	r1, #46793	; 0xb6c9
   1553c:	mov	r0, #0
   15540:	mov	r2, #5
   15544:	movt	r1, #2
   15548:	bl	11ca8 <dcgettext@plt>
   1554c:	movw	r5, #58120	; 0xe308
   15550:	movt	r5, #3
   15554:	ldr	r1, [r5]
   15558:	bl	11b94 <fputs_unlocked@plt>
   1555c:	movw	r4, #46815	; 0xb6df
   15560:	ldr	r0, [r5]
   15564:	movw	r3, #46436	; 0xb564
   15568:	mov	r1, #1
   1556c:	movt	r4, #2
   15570:	movt	r3, #2
   15574:	mov	r2, r4
   15578:	bl	11f24 <__fprintf_chk@plt>
   1557c:	ldr	r0, [r5]
   15580:	movw	r3, #47547	; 0xb9bb
   15584:	mov	r1, #1
   15588:	mov	r2, r4
   1558c:	movt	r3, #2
   15590:	bl	11f24 <__fprintf_chk@plt>
   15594:	ldr	r0, [r5]
   15598:	movw	r3, #47552	; 0xb9c0
   1559c:	mov	r1, #1
   155a0:	mov	r2, r4
   155a4:	movt	r3, #2
   155a8:	bl	11f24 <__fprintf_chk@plt>
   155ac:	ldr	r0, [r5]
   155b0:	movw	r3, #38701	; 0x972d
   155b4:	mov	r1, #1
   155b8:	mov	r2, r4
   155bc:	movt	r3, #2
   155c0:	bl	11f24 <__fprintf_chk@plt>
   155c4:	movw	r1, #46831	; 0xb6ef
   155c8:	mov	r0, #0
   155cc:	mov	r2, #5
   155d0:	movt	r1, #2
   155d4:	bl	11ca8 <dcgettext@plt>
   155d8:	ldr	r1, [r5]
   155dc:	bl	11b94 <fputs_unlocked@plt>
   155e0:	mov	r0, #2
   155e4:	bl	188bc <__assert_fail@plt+0x6830>
   155e8:	movw	r1, #46753	; 0xb6a1
   155ec:	mov	r0, #0
   155f0:	mov	r2, #5
   155f4:	movt	r1, #2
   155f8:	bl	11ca8 <dcgettext@plt>
   155fc:	mov	r4, r0
   15600:	mov	r0, r8
   15604:	bl	265b8 <_obstack_memory_used@@Base+0x1ccc>
   15608:	mov	r3, r0
   1560c:	mov	r0, #2
   15610:	mov	r1, #0
   15614:	mov	r2, r4
   15618:	bl	11da4 <error@plt>
   1561c:	push	{fp, lr}
   15620:	mov	fp, sp
   15624:	mov	r2, r1
   15628:	ldrd	r0, [r0]
   1562c:	mov	r3, #0
   15630:	bl	294d8 <_obstack_memory_used@@Base+0x4bec>
   15634:	mov	r0, r2
   15638:	pop	{fp, pc}
   1563c:	push	{r4, r5, fp, lr}
   15640:	add	fp, sp, #8
   15644:	ldrd	r2, [r1]
   15648:	ldrd	r4, [r0]
   1564c:	eor	r3, r5, r3
   15650:	eor	r2, r4, r2
   15654:	orrs	r2, r2, r3
   15658:	mov	r2, #0
   1565c:	bne	1567c <__assert_fail@plt+0x35f0>
   15660:	ldrd	r2, [r1, #8]
   15664:	ldrd	r0, [r0, #8]
   15668:	eor	r1, r1, r3
   1566c:	eor	r0, r0, r2
   15670:	orr	r0, r0, r1
   15674:	clz	r0, r0
   15678:	lsr	r2, r0, #5
   1567c:	mov	r0, r2
   15680:	pop	{r4, r5, fp, pc}
   15684:	b	1f89c <__assert_fail@plt+0xd810>
   15688:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1568c:	add	fp, sp, #28
   15690:	sub	sp, sp, #716	; 0x2cc
   15694:	movw	r8, #58356	; 0xe3f4
   15698:	movw	r4, #58348	; 0xe3ec
   1569c:	mov	r5, r1
   156a0:	str	r0, [fp, #-732]	; 0xfffffd24
   156a4:	movw	r6, #58352	; 0xe3f0
   156a8:	mov	sl, r3
   156ac:	str	r2, [fp, #-716]	; 0xfffffd34
   156b0:	movt	r8, #3
   156b4:	movt	r4, #3
   156b8:	movt	r6, #3
   156bc:	ldr	r1, [r8]
   156c0:	ldr	r0, [r4]
   156c4:	cmp	r1, r0
   156c8:	bne	156f4 <__assert_fail@plt+0x3668>
   156cc:	ldr	r0, [r6]
   156d0:	mov	r2, #304	; 0x130
   156d4:	bl	27714 <_obstack_memory_used@@Base+0x2e28>
   156d8:	mov	r7, r0
   156dc:	str	r0, [r6]
   156e0:	ldr	r0, [r4]
   156e4:	ldr	r1, [r8]
   156e8:	lsl	r0, r0, #1
   156ec:	str	r0, [r4]
   156f0:	b	156f8 <__assert_fail@plt+0x366c>
   156f4:	ldr	r7, [r6]
   156f8:	mov	r0, #152	; 0x98
   156fc:	str	r1, [fp, #-724]	; 0xfffffd2c
   15700:	mov	r2, #152	; 0x98
   15704:	mla	r4, r1, r0, r7
   15708:	mov	r1, #0
   1570c:	mov	r0, r4
   15710:	bl	11ef4 <memset@plt>
   15714:	mvn	r0, #0
   15718:	mov	r6, r4
   1571c:	str	r4, [fp, #-720]	; 0xfffffd30
   15720:	str	r5, [fp, #-736]	; 0xfffffd20
   15724:	ldr	r8, [fp, #-732]	; 0xfffffd24
   15728:	str	r0, [r6, #144]!	; 0x90
   1572c:	str	r5, [r4, #120]!	; 0x78
   15730:	movw	r5, #61921	; 0xf1e1
   15734:	movt	r5, #3
   15738:	str	r4, [fp, #-740]	; 0xfffffd1c
   1573c:	ldrb	r0, [r5]
   15740:	cmp	r0, #0
   15744:	bne	157cc <__assert_fail@plt+0x3740>
   15748:	movw	r0, #58825	; 0xe5c9
   1574c:	movt	r0, #3
   15750:	ldrb	r0, [r0]
   15754:	cmp	r0, #0
   15758:	beq	157cc <__assert_fail@plt+0x3740>
   1575c:	movw	r0, #58372	; 0xe404
   15760:	movt	r0, #3
   15764:	ldr	r0, [r0]
   15768:	sub	sp, sp, #8
   1576c:	str	r0, [sp]
   15770:	sub	r0, fp, #688	; 0x2b0
   15774:	mov	r1, #2
   15778:	mov	r2, r8
   1577c:	mvn	r3, #0
   15780:	bl	24b28 <_obstack_memory_used@@Base+0x23c>
   15784:	add	sp, sp, #8
   15788:	mov	r4, r0
   1578c:	ldrb	r0, [r8]
   15790:	ldrb	r1, [fp, #-688]	; 0xfffffd50
   15794:	cmp	r0, r1
   15798:	bne	157bc <__assert_fail@plt+0x3730>
   1579c:	mov	r0, r8
   157a0:	bl	11eac <strlen@plt>
   157a4:	subs	r1, r0, r4
   157a8:	movwne	r1, #1
   157ac:	cmp	r0, r4
   157b0:	str	r1, [r6]
   157b4:	bne	157c4 <__assert_fail@plt+0x3738>
   157b8:	b	157cc <__assert_fail@plt+0x3740>
   157bc:	mov	r0, #1
   157c0:	str	r0, [r6]
   157c4:	mov	r0, #1
   157c8:	strb	r0, [r5]
   157cc:	movw	r0, #58340	; 0xe3e4
   157d0:	str	r7, [fp, #-728]	; 0xfffffd28
   157d4:	movw	r7, #58172	; 0xe33c
   157d8:	str	r6, [fp, #-744]	; 0xfffffd18
   157dc:	movt	r0, #3
   157e0:	movt	r7, #3
   157e4:	ldrb	r9, [r0]
   157e8:	movw	r0, #58246	; 0xe386
   157ec:	movt	r0, #3
   157f0:	ldrb	r0, [r0]
   157f4:	orr	r0, r0, r9
   157f8:	tst	r0, #255	; 0xff
   157fc:	ldreq	r0, [fp, #-716]	; 0xfffffd34
   15800:	cmpeq	r0, #0
   15804:	beq	15958 <__assert_fail@plt+0x38cc>
   15808:	ldrb	r0, [r8]
   1580c:	mov	r4, r8
   15810:	cmp	r0, #47	; 0x2f
   15814:	beq	158c0 <__assert_fail@plt+0x3834>
   15818:	ldrb	r5, [sl]
   1581c:	mov	r4, r8
   15820:	cmp	r5, #0
   15824:	beq	158c0 <__assert_fail@plt+0x3834>
   15828:	mov	r0, r8
   1582c:	bl	11eac <strlen@plt>
   15830:	mov	r4, r0
   15834:	mov	r0, sl
   15838:	bl	11eac <strlen@plt>
   1583c:	add	r0, r4, r0
   15840:	add	r0, r0, #9
   15844:	bic	r0, r0, #7
   15848:	sub	r4, sp, r0
   1584c:	mov	sp, r4
   15850:	cmp	r5, #46	; 0x2e
   15854:	bne	15868 <__assert_fail@plt+0x37dc>
   15858:	ldrb	r0, [sl, #1]
   1585c:	cmp	r0, #0
   15860:	mov	r0, r4
   15864:	beq	15898 <__assert_fail@plt+0x380c>
   15868:	mov	r1, sl
   1586c:	mov	r0, r4
   15870:	strb	r5, [r0], #1
   15874:	ldrb	r5, [r1, #1]!
   15878:	cmp	r5, #0
   1587c:	bne	15870 <__assert_fail@plt+0x37e4>
   15880:	cmp	r1, sl
   15884:	bls	15898 <__assert_fail@plt+0x380c>
   15888:	ldrb	r1, [r1, #-1]
   1588c:	cmp	r1, #47	; 0x2f
   15890:	movne	r1, #47	; 0x2f
   15894:	strbne	r1, [r0], #1
   15898:	ldrb	r1, [r8]
   1589c:	cmp	r1, #0
   158a0:	beq	158b8 <__assert_fail@plt+0x382c>
   158a4:	add	r2, r8, #1
   158a8:	strb	r1, [r0], #1
   158ac:	ldrb	r1, [r2], #1
   158b0:	cmp	r1, #0
   158b4:	bne	158a8 <__assert_fail@plt+0x381c>
   158b8:	mov	r1, #0
   158bc:	strb	r1, [r0]
   158c0:	cmp	r9, #0
   158c4:	ldr	r9, [fp, #-728]	; 0xfffffd28
   158c8:	beq	159c4 <__assert_fail@plt+0x3938>
   158cc:	ldr	r1, [fp, #-724]	; 0xfffffd2c
   158d0:	mov	r0, #152	; 0x98
   158d4:	mla	r5, r1, r0, r9
   158d8:	mov	r0, r4
   158dc:	mov	r1, #2
   158e0:	bl	1e808 <__assert_fail@plt+0xc77c>
   158e4:	cmp	r0, #0
   158e8:	str	r0, [r5, #8]
   158ec:	bne	159c4 <__assert_fail@plt+0x3938>
   158f0:	movw	r1, #47840	; 0xbae0
   158f4:	mov	r0, #0
   158f8:	mov	r2, #5
   158fc:	mov	r6, r7
   15900:	movt	r1, #2
   15904:	bl	11ca8 <dcgettext@plt>
   15908:	mov	r7, r0
   1590c:	bl	11ed0 <__errno_location@plt>
   15910:	ldr	r5, [r0]
   15914:	mov	r0, #4
   15918:	mov	r1, r4
   1591c:	bl	26090 <_obstack_memory_used@@Base+0x17a4>
   15920:	mov	r3, r0
   15924:	mov	r0, #0
   15928:	mov	r1, r5
   1592c:	mov	r2, r7
   15930:	bl	11da4 <error@plt>
   15934:	ldr	r0, [fp, #-716]	; 0xfffffd34
   15938:	cmp	r0, #0
   1593c:	movw	r0, #58136	; 0xe318
   15940:	movt	r0, #3
   15944:	beq	159b0 <__assert_fail@plt+0x3924>
   15948:	mov	r1, #2
   1594c:	mov	r7, r6
   15950:	str	r1, [r0]
   15954:	b	159c4 <__assert_fail@plt+0x3938>
   15958:	movw	r0, #58156	; 0xe32c
   1595c:	movt	r0, #3
   15960:	ldrb	r4, [r0]
   15964:	ldr	r0, [fp, #-736]	; 0xfffffd20
   15968:	cmp	r0, #3
   1596c:	bne	16784 <__assert_fail@plt+0x46f8>
   15970:	cmp	r4, #0
   15974:	beq	16784 <__assert_fail@plt+0x46f8>
   15978:	movw	r5, #57800	; 0xe1c8
   1597c:	movt	r5, #3
   15980:	ldr	r1, [r5, #152]	; 0x98
   15984:	cmp	r1, #0
   15988:	beq	15cec <__assert_fail@plt+0x3c60>
   1598c:	ldr	r0, [r5, #156]	; 0x9c
   15990:	cmp	r1, #2
   15994:	beq	15cd4 <__assert_fail@plt+0x3c48>
   15998:	cmp	r1, #1
   1599c:	bne	15808 <__assert_fail@plt+0x377c>
   159a0:	ldrb	r0, [r0]
   159a4:	cmp	r0, #48	; 0x30
   159a8:	bne	15808 <__assert_fail@plt+0x377c>
   159ac:	b	15cec <__assert_fail@plt+0x3c60>
   159b0:	ldr	r1, [r0]
   159b4:	mov	r7, r6
   159b8:	cmp	r1, #0
   159bc:	moveq	r1, #1
   159c0:	streq	r1, [r0]
   159c4:	ldr	r0, [fp, #-720]	; 0xfffffd30
   159c8:	add	sl, r0, #16
   159cc:	ldr	r0, [r7]
   159d0:	sub	r1, r0, #2
   159d4:	cmp	r1, #2
   159d8:	bcs	15a2c <__assert_fail@plt+0x39a0>
   159dc:	ldr	r0, [fp, #-716]	; 0xfffffd34
   159e0:	cmp	r0, #0
   159e4:	beq	15a60 <__assert_fail@plt+0x39d4>
   159e8:	mov	r0, r4
   159ec:	mov	r1, sl
   159f0:	bl	1a420 <__assert_fail@plt+0x8394>
   159f4:	ldr	r1, [r7]
   159f8:	mov	r7, #1
   159fc:	cmp	r1, #2
   15a00:	beq	15a44 <__assert_fail@plt+0x39b8>
   15a04:	cmn	r0, #1
   15a08:	ble	15a50 <__assert_fail@plt+0x39c4>
   15a0c:	ldr	r2, [fp, #-724]	; 0xfffffd2c
   15a10:	mov	r1, #152	; 0x98
   15a14:	mla	r1, r2, r1, r9
   15a18:	ldr	r1, [r1, #32]
   15a1c:	and	r1, r1, #61440	; 0xf000
   15a20:	cmp	r1, #16384	; 0x4000
   15a24:	beq	15a44 <__assert_fail@plt+0x39b8>
   15a28:	b	15a60 <__assert_fail@plt+0x39d4>
   15a2c:	cmp	r0, #4
   15a30:	bne	15a60 <__assert_fail@plt+0x39d4>
   15a34:	mov	r0, r4
   15a38:	mov	r1, sl
   15a3c:	bl	1a420 <__assert_fail@plt+0x8394>
   15a40:	mov	r7, #1
   15a44:	cmp	r0, #0
   15a48:	bne	15b58 <__assert_fail@plt+0x3acc>
   15a4c:	b	15bd8 <__assert_fail@plt+0x3b4c>
   15a50:	bl	11ed0 <__errno_location@plt>
   15a54:	ldr	r0, [r0]
   15a58:	cmp	r0, #2
   15a5c:	bne	15b58 <__assert_fail@plt+0x3acc>
   15a60:	movw	r0, #58800	; 0xe5b0
   15a64:	movt	r0, #3
   15a68:	ldrb	r1, [r0]
   15a6c:	mov	r0, #2
   15a70:	cmp	r1, #0
   15a74:	movw	r1, #58245	; 0xe385
   15a78:	movt	r1, #3
   15a7c:	movwne	r0, #258	; 0x102
   15a80:	ldrb	r1, [r1]
   15a84:	bfi	r0, r1, #10, #1
   15a88:	movw	r1, #58168	; 0xe338
   15a8c:	movt	r1, #3
   15a90:	ldr	r1, [r1]
   15a94:	cmp	r1, #0
   15a98:	bne	15b08 <__assert_fail@plt+0x3a7c>
   15a9c:	movw	r1, #58772	; 0xe594
   15aa0:	movt	r1, #3
   15aa4:	ldr	r1, [r1]
   15aa8:	cmp	r1, #4
   15aac:	bcs	16a10 <__assert_fail@plt+0x4984>
   15ab0:	movw	r2, #54668	; 0xd58c
   15ab4:	movt	r2, #2
   15ab8:	ldr	r1, [r2, r1, lsl #2]
   15abc:	orr	r0, r1, r0
   15ac0:	movw	r1, #58776	; 0xe598
   15ac4:	movt	r1, #3
   15ac8:	ldrb	r1, [r1]
   15acc:	cmp	r1, #1
   15ad0:	bne	15ae8 <__assert_fail@plt+0x3a5c>
   15ad4:	movw	r1, #58804	; 0xe5b4
   15ad8:	movt	r1, #3
   15adc:	ldrb	r1, [r1]
   15ae0:	cmp	r1, #1
   15ae4:	bne	15af0 <__assert_fail@plt+0x3a64>
   15ae8:	orr	r0, r0, #524	; 0x20c
   15aec:	b	15af4 <__assert_fail@plt+0x3a68>
   15af0:	orr	r0, r0, #516	; 0x204
   15af4:	movw	r1, #58802	; 0xe5b2
   15af8:	movt	r1, #3
   15afc:	ldrb	r1, [r1]
   15b00:	cmp	r1, #0
   15b04:	orreq	r0, r0, #16
   15b08:	movw	r1, #58240	; 0xe380
   15b0c:	movt	r1, #3
   15b10:	ldr	r1, [r1]
   15b14:	cmp	r1, #6
   15b18:	bhi	16a10 <__assert_fail@plt+0x4984>
   15b1c:	mov	r2, #1
   15b20:	mov	r3, #87	; 0x57
   15b24:	tst	r3, r2, lsl r1
   15b28:	beq	15c9c <__assert_fail@plt+0x3c10>
   15b2c:	sub	sp, sp, #8
   15b30:	str	r0, [sp]
   15b34:	mvn	r0, #99	; 0x63
   15b38:	mov	r1, r4
   15b3c:	mov	r2, sl
   15b40:	mov	r3, #256	; 0x100
   15b44:	bl	19c40 <__assert_fail@plt+0x7bb4>
   15b48:	add	sp, sp, #8
   15b4c:	mov	r7, #0
   15b50:	cmp	r0, #0
   15b54:	beq	15bd8 <__assert_fail@plt+0x3b4c>
   15b58:	movw	r1, #47946	; 0xbb4a
   15b5c:	mov	r0, #0
   15b60:	mov	r2, #5
   15b64:	mov	r6, #0
   15b68:	movt	r1, #2
   15b6c:	bl	11ca8 <dcgettext@plt>
   15b70:	mov	r5, r0
   15b74:	bl	11ed0 <__errno_location@plt>
   15b78:	ldr	r7, [r0]
   15b7c:	mov	r0, #4
   15b80:	mov	r1, r4
   15b84:	bl	26090 <_obstack_memory_used@@Base+0x17a4>
   15b88:	mov	r3, r0
   15b8c:	mov	r0, #0
   15b90:	mov	r1, r7
   15b94:	mov	r2, r5
   15b98:	bl	11da4 <error@plt>
   15b9c:	ldr	r0, [fp, #-716]	; 0xfffffd34
   15ba0:	cmp	r0, #0
   15ba4:	beq	15c54 <__assert_fail@plt+0x3bc8>
   15ba8:	movw	r0, #58136	; 0xe318
   15bac:	mov	r1, #2
   15bb0:	mov	r5, #0
   15bb4:	movt	r0, #3
   15bb8:	str	r1, [r0]
   15bbc:	ldr	r1, [fp, #-724]	; 0xfffffd2c
   15bc0:	mov	r0, #152	; 0x98
   15bc4:	mla	r0, r1, r0, r9
   15bc8:	movw	r1, #58009	; 0xe299
   15bcc:	movt	r1, #3
   15bd0:	str	r1, [r0, #128]	; 0x80
   15bd4:	b	16a00 <__assert_fail@plt+0x4974>
   15bd8:	ldr	r8, [fp, #-724]	; 0xfffffd2c
   15bdc:	mov	r0, #152	; 0x98
   15be0:	mov	r1, #1
   15be4:	mla	r0, r8, r0, r9
   15be8:	strb	r1, [r0, #132]	; 0x84
   15bec:	ldr	r1, [fp, #-736]	; 0xfffffd20
   15bf0:	cmp	r1, #5
   15bf4:	beq	15c08 <__assert_fail@plt+0x3b7c>
   15bf8:	ldr	r0, [r0, #32]
   15bfc:	and	r0, r0, #61440	; 0xf000
   15c00:	cmp	r0, #32768	; 0x8000
   15c04:	bne	15df4 <__assert_fail@plt+0x3d68>
   15c08:	movw	r0, #58156	; 0xe32c
   15c0c:	movt	r0, #3
   15c10:	ldrb	r0, [r0]
   15c14:	cmp	r0, #0
   15c18:	beq	15df4 <__assert_fail@plt+0x3d68>
   15c1c:	movw	r0, #57800	; 0xe1c8
   15c20:	movt	r0, #3
   15c24:	ldr	r1, [r0, #168]	; 0xa8
   15c28:	cmp	r1, #0
   15c2c:	beq	15df4 <__assert_fail@plt+0x3d68>
   15c30:	ldr	r0, [r0, #172]	; 0xac
   15c34:	cmp	r1, #2
   15c38:	beq	15d1c <__assert_fail@plt+0x3c90>
   15c3c:	cmp	r1, #1
   15c40:	bne	15d34 <__assert_fail@plt+0x3ca8>
   15c44:	ldrb	r0, [r0]
   15c48:	cmp	r0, #48	; 0x30
   15c4c:	bne	15d34 <__assert_fail@plt+0x3ca8>
   15c50:	b	15df4 <__assert_fail@plt+0x3d68>
   15c54:	movw	r0, #58136	; 0xe318
   15c58:	movt	r0, #3
   15c5c:	ldr	r1, [r0]
   15c60:	cmp	r1, #0
   15c64:	moveq	r1, #1
   15c68:	streq	r1, [r0]
   15c6c:	ldr	r1, [fp, #-724]	; 0xfffffd2c
   15c70:	mov	r0, #152	; 0x98
   15c74:	mla	r0, r1, r0, r9
   15c78:	movw	r1, #58009	; 0xe299
   15c7c:	movt	r1, #3
   15c80:	str	r1, [r0, #128]	; 0x80
   15c84:	mov	r0, r8
   15c88:	bl	27c54 <_obstack_memory_used@@Base+0x3368>
   15c8c:	ldr	r1, [fp, #-720]	; 0xfffffd30
   15c90:	mov	r6, #0
   15c94:	mov	r5, #0
   15c98:	b	169e4 <__assert_fail@plt+0x4958>
   15c9c:	cmp	r1, #3
   15ca0:	bne	15cac <__assert_fail@plt+0x3c20>
   15ca4:	orr	r0, r0, #512	; 0x200
   15ca8:	b	15b2c <__assert_fail@plt+0x3aa0>
   15cac:	movw	r1, #58772	; 0xe594
   15cb0:	movt	r1, #3
   15cb4:	ldr	r1, [r1]
   15cb8:	cmp	r1, #4
   15cbc:	bcs	16a10 <__assert_fail@plt+0x4984>
   15cc0:	movw	r2, #54668	; 0xd58c
   15cc4:	movt	r2, #2
   15cc8:	ldr	r1, [r2, r1, lsl #2]
   15ccc:	orr	r0, r1, r0
   15cd0:	b	15b2c <__assert_fail@plt+0x3aa0>
   15cd4:	movw	r1, #46144	; 0xb440
   15cd8:	mov	r2, #2
   15cdc:	movt	r1, #2
   15ce0:	bl	1202c <strncmp@plt>
   15ce4:	cmp	r0, #0
   15ce8:	bne	15808 <__assert_fail@plt+0x377c>
   15cec:	ldr	r1, [r5, #144]	; 0x90
   15cf0:	cmp	r1, #0
   15cf4:	beq	15fa4 <__assert_fail@plt+0x3f18>
   15cf8:	ldr	r0, [r5, #148]	; 0x94
   15cfc:	cmp	r1, #2
   15d00:	beq	15f8c <__assert_fail@plt+0x3f00>
   15d04:	cmp	r1, #1
   15d08:	bne	15808 <__assert_fail@plt+0x377c>
   15d0c:	ldrb	r0, [r0]
   15d10:	cmp	r0, #48	; 0x30
   15d14:	bne	15808 <__assert_fail@plt+0x377c>
   15d18:	b	15fa4 <__assert_fail@plt+0x3f18>
   15d1c:	movw	r1, #46144	; 0xb440
   15d20:	mov	r2, #2
   15d24:	movt	r1, #2
   15d28:	bl	1202c <strncmp@plt>
   15d2c:	cmp	r0, #0
   15d30:	beq	15df4 <__assert_fail@plt+0x3d68>
   15d34:	mov	r0, #152	; 0x98
   15d38:	movw	r1, #61976	; 0xf218
   15d3c:	mla	r6, r8, r0, r9
   15d40:	movt	r1, #3
   15d44:	ldrd	r2, [r1]
   15d48:	ldr	r0, [r6, #16]!
   15d4c:	ldr	r1, [r6, #4]
   15d50:	eor	r0, r0, r2
   15d54:	eor	r1, r1, r3
   15d58:	orrs	r0, r0, r1
   15d5c:	bne	15d74 <__assert_fail@plt+0x3ce8>
   15d60:	bl	11ed0 <__errno_location@plt>
   15d64:	mov	r1, #95	; 0x5f
   15d68:	str	r1, [r0]
   15d6c:	mov	r0, #0
   15d70:	b	15de4 <__assert_fail@plt+0x3d58>
   15d74:	mov	r0, r4
   15d78:	bl	11f90 <cap_get_file@plt>
   15d7c:	cmp	r0, #0
   15d80:	beq	15dbc <__assert_fail@plt+0x3d30>
   15d84:	mov	r1, #0
   15d88:	mov	r5, r0
   15d8c:	bl	11ba0 <cap_to_text@plt>
   15d90:	mov	r9, r0
   15d94:	mov	r0, r5
   15d98:	bl	11fd8 <cap_free@plt>
   15d9c:	cmp	r9, #0
   15da0:	beq	15dbc <__assert_fail@plt+0x3d30>
   15da4:	ldrb	r5, [r9]
   15da8:	mov	r0, r9
   15dac:	bl	11fd8 <cap_free@plt>
   15db0:	mov	r0, #1
   15db4:	cmp	r5, #0
   15db8:	bne	15de4 <__assert_fail@plt+0x3d58>
   15dbc:	bl	11ed0 <__errno_location@plt>
   15dc0:	ldr	r1, [r0]
   15dc4:	mov	r0, #0
   15dc8:	cmp	r1, #22
   15dcc:	cmpne	r1, #95	; 0x5f
   15dd0:	bne	16760 <__assert_fail@plt+0x46d4>
   15dd4:	ldrd	r2, [r6]
   15dd8:	movw	r1, #61976	; 0xf218
   15ddc:	movt	r1, #3
   15de0:	strd	r2, [r1]
   15de4:	ldr	r9, [fp, #-728]	; 0xfffffd28
   15de8:	mov	r1, #152	; 0x98
   15dec:	mla	r1, r8, r1, r9
   15df0:	strb	r0, [r1, #140]	; 0x8c
   15df4:	movw	r0, #58168	; 0xe338
   15df8:	movt	r0, #3
   15dfc:	ldr	r0, [r0]
   15e00:	cmp	r0, #0
   15e04:	beq	15e1c <__assert_fail@plt+0x3d90>
   15e08:	movw	r0, #58244	; 0xe384
   15e0c:	movt	r0, #3
   15e10:	ldrb	r0, [r0]
   15e14:	cmp	r0, #1
   15e18:	bne	16088 <__assert_fail@plt+0x3ffc>
   15e1c:	mov	r0, #152	; 0x98
   15e20:	mla	r0, r8, r0, r9
   15e24:	movw	r9, #61984	; 0xf220
   15e28:	movt	r9, #3
   15e2c:	mov	r6, r0
   15e30:	ldrd	r2, [r9]
   15e34:	ldr	r1, [r6, #16]!
   15e38:	eor	r1, r1, r2
   15e3c:	ldr	r2, [r6, #4]
   15e40:	eor	r2, r2, r3
   15e44:	orrs	r1, r1, r2
   15e48:	bne	15e5c <__assert_fail@plt+0x3dd0>
   15e4c:	bl	11ed0 <__errno_location@plt>
   15e50:	mov	r1, #95	; 0x5f
   15e54:	str	r1, [r0]
   15e58:	b	15ed0 <__assert_fail@plt+0x3e44>
   15e5c:	add	r5, r0, #128	; 0x80
   15e60:	mov	r0, r4
   15e64:	cmp	r7, #0
   15e68:	mov	r1, r5
   15e6c:	beq	15ea4 <__assert_fail@plt+0x3e18>
   15e70:	bl	26888 <_obstack_memory_used@@Base+0x1f9c>
   15e74:	cmn	r0, #1
   15e78:	ble	15eb0 <__assert_fail@plt+0x3e24>
   15e7c:	ldr	r1, [r5]
   15e80:	movw	r0, #47963	; 0xbb5b
   15e84:	movt	r0, #2
   15e88:	bl	11bd0 <strcmp@plt>
   15e8c:	ldr	r9, [fp, #-728]	; 0xfffffd28
   15e90:	cmp	r0, #0
   15e94:	mov	r5, r0
   15e98:	mov	r0, #0
   15e9c:	movwne	r5, #1
   15ea0:	b	15f0c <__assert_fail@plt+0x3e80>
   15ea4:	bl	268fc <_obstack_memory_used@@Base+0x2010>
   15ea8:	cmn	r0, #1
   15eac:	bgt	15e7c <__assert_fail@plt+0x3df0>
   15eb0:	bl	11ed0 <__errno_location@plt>
   15eb4:	ldr	r0, [r0]
   15eb8:	cmp	r0, #22
   15ebc:	cmpne	r0, #95	; 0x5f
   15ec0:	bne	16754 <__assert_fail@plt+0x46c8>
   15ec4:	ldrd	r0, [r6]
   15ec8:	strd	r0, [r9]
   15ecc:	bl	11ed0 <__errno_location@plt>
   15ed0:	ldr	r9, [fp, #-728]	; 0xfffffd28
   15ed4:	mov	r1, #152	; 0x98
   15ed8:	movw	r2, #58009	; 0xe299
   15edc:	movt	r2, #3
   15ee0:	mla	r1, r8, r1, r9
   15ee4:	str	r2, [r1, #128]	; 0x80
   15ee8:	ldr	r0, [r0]
   15eec:	cmp	r0, #95	; 0x5f
   15ef0:	cmpne	r0, #61	; 0x3d
   15ef4:	bne	15f04 <__assert_fail@plt+0x3e78>
   15ef8:	mov	r5, #0
   15efc:	mov	r0, #0
   15f00:	b	15f0c <__assert_fail@plt+0x3e80>
   15f04:	mov	r0, #1
   15f08:	mov	r5, #0
   15f0c:	movw	r1, #58168	; 0xe338
   15f10:	mov	r6, #0
   15f14:	movt	r1, #3
   15f18:	ldr	r1, [r1]
   15f1c:	orrs	r1, r1, r0
   15f20:	mov	r1, #0
   15f24:	bne	16008 <__assert_fail@plt+0x3f7c>
   15f28:	movw	r0, #61992	; 0xf228
   15f2c:	ldrd	r2, [sl]
   15f30:	movt	r0, #3
   15f34:	ldrd	r0, [r0]
   15f38:	eor	r1, r3, r1
   15f3c:	eor	r0, r2, r0
   15f40:	orr	r9, r0, r1
   15f44:	bl	11ed0 <__errno_location@plt>
   15f48:	mov	r7, r0
   15f4c:	cmp	r9, #0
   15f50:	bne	15f68 <__assert_fail@plt+0x3edc>
   15f54:	ldr	r9, [fp, #-728]	; 0xfffffd28
   15f58:	mov	r0, #95	; 0x5f
   15f5c:	str	r0, [r7]
   15f60:	mov	r0, #0
   15f64:	b	15ff8 <__assert_fail@plt+0x3f6c>
   15f68:	mov	r0, #0
   15f6c:	mov	r1, sl
   15f70:	str	r0, [r7]
   15f74:	mov	r0, r4
   15f78:	bl	1f0d8 <__assert_fail@plt+0xd04c>
   15f7c:	cmp	r0, #0
   15f80:	ble	15fd4 <__assert_fail@plt+0x3f48>
   15f84:	ldr	r9, [fp, #-728]	; 0xfffffd28
   15f88:	b	15ff8 <__assert_fail@plt+0x3f6c>
   15f8c:	movw	r1, #46144	; 0xb440
   15f90:	mov	r2, #2
   15f94:	movt	r1, #2
   15f98:	bl	1202c <strncmp@plt>
   15f9c:	cmp	r0, #0
   15fa0:	bne	15808 <__assert_fail@plt+0x377c>
   15fa4:	ldr	r1, [r5, #160]	; 0xa0
   15fa8:	cmp	r1, #0
   15fac:	beq	16784 <__assert_fail@plt+0x46f8>
   15fb0:	ldr	r0, [r5, #164]	; 0xa4
   15fb4:	cmp	r1, #2
   15fb8:	beq	1676c <__assert_fail@plt+0x46e0>
   15fbc:	cmp	r1, #1
   15fc0:	bne	15808 <__assert_fail@plt+0x377c>
   15fc4:	ldrb	r0, [r0]
   15fc8:	cmp	r0, #48	; 0x30
   15fcc:	bne	15808 <__assert_fail@plt+0x377c>
   15fd0:	b	16784 <__assert_fail@plt+0x46f8>
   15fd4:	ldr	r1, [r7]
   15fd8:	ldr	r9, [fp, #-728]	; 0xfffffd28
   15fdc:	cmp	r1, #22
   15fe0:	cmpne	r1, #95	; 0x5f
   15fe4:	bne	1688c <__assert_fail@plt+0x4800>
   15fe8:	ldrd	r2, [sl]
   15fec:	movw	r1, #61992	; 0xf228
   15ff0:	movt	r1, #3
   15ff4:	strd	r2, [r1]
   15ff8:	cmp	r0, #0
   15ffc:	mov	r1, #0
   16000:	lsr	r0, r0, #31
   16004:	movwgt	r1, #1
   16008:	orr	r2, r5, r1
   1600c:	cmp	r2, #1
   16010:	bne	16028 <__assert_fail@plt+0x3f9c>
   16014:	cmp	r1, #0
   16018:	mov	r6, #1
   1601c:	movwne	r6, #2
   16020:	cmp	r5, #0
   16024:	moveq	r6, #2
   16028:	mov	r1, #152	; 0x98
   1602c:	cmp	r6, #0
   16030:	mla	r1, r8, r1, r9
   16034:	str	r6, [r1, #136]	; 0x88
   16038:	movw	r1, #61928	; 0xf1e8
   1603c:	movwne	r6, #1
   16040:	cmp	r0, #0
   16044:	movt	r1, #3
   16048:	ldrb	r2, [r1]
   1604c:	orr	r2, r2, r6
   16050:	strb	r2, [r1]
   16054:	beq	16088 <__assert_fail@plt+0x3ffc>
   16058:	bl	11ed0 <__errno_location@plt>
   1605c:	ldr	r5, [r0]
   16060:	mov	r0, #0
   16064:	mov	r1, #3
   16068:	mov	r2, r4
   1606c:	bl	2630c <_obstack_memory_used@@Base+0x1a20>
   16070:	movw	r2, #54786	; 0xd602
   16074:	mov	r3, r0
   16078:	mov	r0, #0
   1607c:	mov	r1, r5
   16080:	movt	r2, #2
   16084:	bl	11da4 <error@plt>
   16088:	mov	r0, #152	; 0x98
   1608c:	movw	sl, #58168	; 0xe338
   16090:	mla	r5, r8, r0, r9
   16094:	movt	sl, #3
   16098:	ldr	r0, [r5, #32]!
   1609c:	and	r1, r0, #61440	; 0xf000
   160a0:	cmp	r1, #40960	; 0xa000
   160a4:	bne	162e4 <__assert_fail@plt+0x4258>
   160a8:	ldr	r1, [sl]
   160ac:	cmp	r1, #0
   160b0:	beq	160c8 <__assert_fail@plt+0x403c>
   160b4:	movw	r1, #58165	; 0xe335
   160b8:	movt	r1, #3
   160bc:	ldrb	r1, [r1]
   160c0:	cmp	r1, #1
   160c4:	bne	162e4 <__assert_fail@plt+0x4258>
   160c8:	mov	r0, #152	; 0x98
   160cc:	mla	r9, r8, r0, r9
   160d0:	mov	r0, r4
   160d4:	ldr	r1, [r9, #64]	; 0x40
   160d8:	bl	1dd0c <__assert_fail@plt+0xbc80>
   160dc:	mov	r7, r0
   160e0:	str	r0, [r9, #4]!
   160e4:	cmp	r0, #0
   160e8:	bne	1616c <__assert_fail@plt+0x40e0>
   160ec:	movw	r1, #47973	; 0xbb65
   160f0:	mov	r0, #0
   160f4:	mov	r2, #5
   160f8:	movt	r1, #2
   160fc:	bl	11ca8 <dcgettext@plt>
   16100:	mov	r6, r0
   16104:	bl	11ed0 <__errno_location@plt>
   16108:	ldr	r7, [r0]
   1610c:	mov	r0, #4
   16110:	mov	r1, r4
   16114:	bl	26090 <_obstack_memory_used@@Base+0x17a4>
   16118:	mov	r3, r0
   1611c:	mov	r0, #0
   16120:	mov	r1, r7
   16124:	mov	r2, r6
   16128:	bl	11da4 <error@plt>
   1612c:	ldr	r1, [fp, #-716]	; 0xfffffd34
   16130:	mov	r0, #2
   16134:	cmp	r1, #0
   16138:	bne	16154 <__assert_fail@plt+0x40c8>
   1613c:	movw	r0, #58136	; 0xe318
   16140:	movt	r0, #3
   16144:	ldr	r0, [r0]
   16148:	cmp	r0, #0
   1614c:	bne	16160 <__assert_fail@plt+0x40d4>
   16150:	mov	r0, #1
   16154:	movw	r1, #58136	; 0xe318
   16158:	movt	r1, #3
   1615c:	str	r0, [r1]
   16160:	ldr	r7, [r9]
   16164:	cmp	r7, #0
   16168:	beq	162cc <__assert_fail@plt+0x4240>
   1616c:	ldrb	r0, [r7]
   16170:	cmp	r0, #47	; 0x2f
   16174:	beq	161d0 <__assert_fail@plt+0x4144>
   16178:	mov	r0, r4
   1617c:	bl	1effc <__assert_fail@plt+0xcf70>
   16180:	cmp	r0, #0
   16184:	beq	161d0 <__assert_fail@plt+0x4144>
   16188:	mov	r6, r0
   1618c:	mov	r0, r7
   16190:	bl	11eac <strlen@plt>
   16194:	add	r0, r6, r0
   16198:	add	r0, r0, #2
   1619c:	bl	27750 <_obstack_memory_used@@Base+0x2e64>
   161a0:	mov	r8, r0
   161a4:	add	r0, r6, r4
   161a8:	mov	r1, r4
   161ac:	ldrb	r0, [r0, #-1]
   161b0:	cmp	r0, #47	; 0x2f
   161b4:	mov	r0, r8
   161b8:	addne	r6, r6, #1
   161bc:	mov	r2, r6
   161c0:	bl	11f0c <stpncpy@plt>
   161c4:	mov	r1, r7
   161c8:	bl	11c9c <stpcpy@plt>
   161cc:	b	161dc <__assert_fail@plt+0x4150>
   161d0:	mov	r0, r7
   161d4:	bl	27c54 <_obstack_memory_used@@Base+0x3368>
   161d8:	mov	r8, r0
   161dc:	ldr	r0, [fp, #-744]	; 0xfffffd18
   161e0:	ldr	r0, [r0]
   161e4:	cmp	r0, #0
   161e8:	bne	1624c <__assert_fail@plt+0x41c0>
   161ec:	movw	r0, #58372	; 0xe404
   161f0:	ldr	r4, [r9]
   161f4:	movt	r0, #3
   161f8:	ldr	r0, [r0]
   161fc:	sub	sp, sp, #8
   16200:	str	r0, [sp]
   16204:	sub	r0, fp, #688	; 0x2b0
   16208:	mov	r1, #2
   1620c:	mov	r2, r4
   16210:	mvn	r3, #0
   16214:	bl	24b28 <_obstack_memory_used@@Base+0x23c>
   16218:	add	sp, sp, #8
   1621c:	mov	r6, r0
   16220:	ldrb	r0, [r4]
   16224:	ldrb	r1, [fp, #-688]	; 0xfffffd50
   16228:	cmp	r0, r1
   1622c:	bne	16240 <__assert_fail@plt+0x41b4>
   16230:	mov	r0, r4
   16234:	bl	11eac <strlen@plt>
   16238:	cmp	r0, r6
   1623c:	beq	1624c <__assert_fail@plt+0x41c0>
   16240:	ldr	r1, [fp, #-744]	; 0xfffffd18
   16244:	mvn	r0, #0
   16248:	str	r0, [r1]
   1624c:	movw	r0, #58180	; 0xe344
   16250:	movt	r0, #3
   16254:	ldr	r0, [r0]
   16258:	cmp	r0, #1
   1625c:	bhi	16274 <__assert_fail@plt+0x41e8>
   16260:	movw	r0, #58165	; 0xe335
   16264:	movt	r0, #3
   16268:	ldrb	r0, [r0]
   1626c:	cmp	r0, #1
   16270:	bne	162c4 <__assert_fail@plt+0x4238>
   16274:	sub	sp, sp, #8
   16278:	mov	r0, #2
   1627c:	sub	r2, fp, #688	; 0x2b0
   16280:	mov	r1, r8
   16284:	mov	r3, #0
   16288:	str	r0, [sp]
   1628c:	mvn	r0, #99	; 0x63
   16290:	bl	19c40 <__assert_fail@plt+0x7bb4>
   16294:	add	sp, sp, #8
   16298:	ldr	r9, [fp, #-728]	; 0xfffffd28
   1629c:	cmp	r0, #0
   162a0:	bne	162d4 <__assert_fail@plt+0x4248>
   162a4:	ldr	r1, [fp, #-724]	; 0xfffffd2c
   162a8:	mov	r0, #152	; 0x98
   162ac:	mla	r0, r1, r0, r9
   162b0:	mov	r1, #1
   162b4:	strb	r1, [r0, #133]	; 0x85
   162b8:	ldr	r1, [fp, #-672]	; 0xfffffd60
   162bc:	str	r1, [r0, #124]	; 0x7c
   162c0:	b	162d4 <__assert_fail@plt+0x4248>
   162c4:	ldr	r9, [fp, #-728]	; 0xfffffd28
   162c8:	b	162d4 <__assert_fail@plt+0x4248>
   162cc:	ldr	r9, [fp, #-728]	; 0xfffffd28
   162d0:	mov	r8, #0
   162d4:	mov	r0, r8
   162d8:	bl	1f89c <__assert_fail@plt+0xd810>
   162dc:	ldr	r0, [r5]
   162e0:	ldr	r8, [fp, #-724]	; 0xfffffd2c
   162e4:	and	r0, r0, #61440	; 0xf000
   162e8:	str	r5, [fp, #-736]	; 0xfffffd20
   162ec:	cmp	r0, #40960	; 0xa000
   162f0:	beq	16328 <__assert_fail@plt+0x429c>
   162f4:	ldr	r2, [fp, #-740]	; 0xfffffd1c
   162f8:	cmp	r0, #16384	; 0x4000
   162fc:	bne	16334 <__assert_fail@plt+0x42a8>
   16300:	ldr	r0, [fp, #-716]	; 0xfffffd34
   16304:	cmp	r0, #0
   16308:	beq	1633c <__assert_fail@plt+0x42b0>
   1630c:	movw	r0, #58176	; 0xe340
   16310:	movt	r0, #3
   16314:	ldrb	r1, [r0]
   16318:	mov	r0, #9
   1631c:	cmp	r1, #1
   16320:	moveq	r0, #3
   16324:	b	16340 <__assert_fail@plt+0x42b4>
   16328:	ldr	r2, [fp, #-740]	; 0xfffffd1c
   1632c:	mov	r0, #6
   16330:	b	16340 <__assert_fail@plt+0x42b4>
   16334:	mov	r0, #5
   16338:	b	16340 <__assert_fail@plt+0x42b4>
   1633c:	mov	r0, #3
   16340:	str	r0, [r2]
   16344:	mov	r0, #152	; 0x98
   16348:	mla	r0, r8, r0, r9
   1634c:	ldr	r5, [r0, #84]	; 0x54
   16350:	ldr	r0, [r0, #80]	; 0x50
   16354:	str	r0, [fp, #-716]	; 0xfffffd34
   16358:	ldr	r0, [sl]
   1635c:	cmp	r0, #0
   16360:	beq	16378 <__assert_fail@plt+0x42ec>
   16364:	movw	r0, #58245	; 0xe385
   16368:	movt	r0, #3
   1636c:	ldrb	r0, [r0]
   16370:	cmp	r0, #1
   16374:	bne	165ac <__assert_fail@plt+0x4520>
   16378:	movw	r0, #58780	; 0xe59c
   1637c:	movt	r0, #3
   16380:	ldr	r3, [r0]
   16384:	movw	r0, #58792	; 0xe5a8
   16388:	movt	r0, #3
   1638c:	ldrd	r0, [r0]
   16390:	sub	sp, sp, #16
   16394:	str	r0, [sp, #8]
   16398:	ldr	r0, [fp, #-716]	; 0xfffffd34
   1639c:	mov	r2, #0
   163a0:	mov	r7, #512	; 0x200
   163a4:	str	r1, [sp, #12]
   163a8:	mov	r1, r5
   163ac:	str	r2, [sp, #4]
   163b0:	sub	r2, fp, #688	; 0x2b0
   163b4:	str	r7, [sp]
   163b8:	bl	20cf8 <__assert_fail@plt+0xec6c>
   163bc:	add	sp, sp, #16
   163c0:	mov	r1, #0
   163c4:	bl	22318 <__assert_fail@plt+0x1028c>
   163c8:	movw	r1, #61936	; 0xf1f0
   163cc:	movt	r1, #3
   163d0:	ldr	r2, [r1]
   163d4:	cmp	r2, r0
   163d8:	strlt	r0, [r1]
   163dc:	ldr	r0, [sl]
   163e0:	cmp	r0, #0
   163e4:	bne	165ac <__assert_fail@plt+0x4520>
   163e8:	movw	r0, #58776	; 0xe598
   163ec:	movw	r7, #58801	; 0xe5b1
   163f0:	movt	r0, #3
   163f4:	movt	r7, #3
   163f8:	ldrb	r0, [r0]
   163fc:	cmp	r0, #0
   16400:	bne	16484 <__assert_fail@plt+0x43f8>
   16404:	mov	r0, #152	; 0x98
   16408:	mla	r0, r8, r0, r9
   1640c:	ldr	r4, [r0, #40]	; 0x28
   16410:	ldrb	r0, [r7]
   16414:	cmp	r0, #0
   16418:	bne	1643c <__assert_fail@plt+0x43b0>
   1641c:	mov	r0, r4
   16420:	bl	219b0 <__assert_fail@plt+0xf924>
   16424:	cmp	r0, #0
   16428:	beq	1643c <__assert_fail@plt+0x43b0>
   1642c:	mov	r1, #0
   16430:	bl	22318 <__assert_fail@plt+0x1028c>
   16434:	bic	r0, r0, r0, asr #31
   16438:	b	16470 <__assert_fail@plt+0x43e4>
   1643c:	sub	sp, sp, #16
   16440:	mov	r0, #0
   16444:	mov	r1, #0
   16448:	mov	r2, #1
   1644c:	mvn	r3, #0
   16450:	str	r4, [sp, #8]
   16454:	str	r0, [sp, #12]
   16458:	movw	r0, #48002	; 0xbb82
   1645c:	movt	r0, #2
   16460:	str	r0, [sp]
   16464:	mov	r0, #0
   16468:	bl	12068 <__snprintf_chk@plt>
   1646c:	add	sp, sp, #16
   16470:	movw	r1, #61944	; 0xf1f8
   16474:	movt	r1, #3
   16478:	ldr	r2, [r1]
   1647c:	cmp	r2, r0
   16480:	strlt	r0, [r1]
   16484:	movw	r0, #58802	; 0xe5b2
   16488:	movt	r0, #3
   1648c:	ldrb	r0, [r0]
   16490:	cmp	r0, #0
   16494:	bne	16518 <__assert_fail@plt+0x448c>
   16498:	mov	r0, #152	; 0x98
   1649c:	mla	r0, r8, r0, r9
   164a0:	ldr	r4, [r0, #44]	; 0x2c
   164a4:	ldrb	r0, [r7]
   164a8:	cmp	r0, #0
   164ac:	bne	164d0 <__assert_fail@plt+0x4444>
   164b0:	mov	r0, r4
   164b4:	bl	21b60 <__assert_fail@plt+0xfad4>
   164b8:	cmp	r0, #0
   164bc:	beq	164d0 <__assert_fail@plt+0x4444>
   164c0:	mov	r1, #0
   164c4:	bl	22318 <__assert_fail@plt+0x1028c>
   164c8:	bic	r0, r0, r0, asr #31
   164cc:	b	16504 <__assert_fail@plt+0x4478>
   164d0:	sub	sp, sp, #16
   164d4:	mov	r0, #0
   164d8:	mov	r1, #0
   164dc:	mov	r2, #1
   164e0:	mvn	r3, #0
   164e4:	str	r4, [sp, #8]
   164e8:	str	r0, [sp, #12]
   164ec:	movw	r0, #48002	; 0xbb82
   164f0:	movt	r0, #2
   164f4:	str	r0, [sp]
   164f8:	mov	r0, #0
   164fc:	bl	12068 <__snprintf_chk@plt>
   16500:	add	sp, sp, #16
   16504:	movw	r1, #61948	; 0xf1fc
   16508:	movt	r1, #3
   1650c:	ldr	r2, [r1]
   16510:	cmp	r2, r0
   16514:	strlt	r0, [r1]
   16518:	movw	r0, #58804	; 0xe5b4
   1651c:	movt	r0, #3
   16520:	ldrb	r0, [r0]
   16524:	cmp	r0, #1
   16528:	bne	165ac <__assert_fail@plt+0x4520>
   1652c:	mov	r0, #152	; 0x98
   16530:	mla	r0, r8, r0, r9
   16534:	ldr	r4, [r0, #40]	; 0x28
   16538:	ldrb	r0, [r7]
   1653c:	cmp	r0, #0
   16540:	bne	16564 <__assert_fail@plt+0x44d8>
   16544:	mov	r0, r4
   16548:	bl	219b0 <__assert_fail@plt+0xf924>
   1654c:	cmp	r0, #0
   16550:	beq	16564 <__assert_fail@plt+0x44d8>
   16554:	mov	r1, #0
   16558:	bl	22318 <__assert_fail@plt+0x1028c>
   1655c:	bic	r0, r0, r0, asr #31
   16560:	b	16598 <__assert_fail@plt+0x450c>
   16564:	sub	sp, sp, #16
   16568:	mov	r0, #0
   1656c:	mov	r1, #0
   16570:	mov	r2, #1
   16574:	mvn	r3, #0
   16578:	str	r4, [sp, #8]
   1657c:	str	r0, [sp, #12]
   16580:	movw	r0, #48002	; 0xbb82
   16584:	movt	r0, #2
   16588:	str	r0, [sp]
   1658c:	mov	r0, #0
   16590:	bl	12068 <__snprintf_chk@plt>
   16594:	add	sp, sp, #16
   16598:	movw	r1, #61952	; 0xf200
   1659c:	movt	r1, #3
   165a0:	ldr	r2, [r1]
   165a4:	cmp	r2, r0
   165a8:	strlt	r0, [r1]
   165ac:	movw	r0, #58244	; 0xe384
   165b0:	movt	r0, #3
   165b4:	ldrb	r0, [r0]
   165b8:	cmp	r0, #1
   165bc:	bne	165e4 <__assert_fail@plt+0x4558>
   165c0:	mov	r0, #152	; 0x98
   165c4:	mla	r0, r8, r0, r9
   165c8:	ldr	r0, [r0, #128]	; 0x80
   165cc:	bl	11eac <strlen@plt>
   165d0:	movw	r1, #61956	; 0xf204
   165d4:	movt	r1, #3
   165d8:	ldr	r2, [r1]
   165dc:	cmp	r2, r0
   165e0:	strlt	r0, [r1]
   165e4:	ldr	r0, [sl]
   165e8:	cmp	r0, #0
   165ec:	beq	165fc <__assert_fail@plt+0x4570>
   165f0:	ldr	r8, [fp, #-732]	; 0xfffffd24
   165f4:	ldr	r6, [fp, #-716]	; 0xfffffd34
   165f8:	b	16998 <__assert_fail@plt+0x490c>
   165fc:	mov	r0, #152	; 0x98
   16600:	sub	lr, fp, #512	; 0x200
   16604:	mov	r1, #0
   16608:	mla	r0, r8, r0, r9
   1660c:	sub	r2, lr, #197	; 0xc5
   16610:	ldr	r0, [r0, #36]	; 0x24
   16614:	bl	21dd0 <__assert_fail@plt+0xfd44>
   16618:	bl	11eac <strlen@plt>
   1661c:	movw	r1, #61940	; 0xf1f4
   16620:	movt	r1, #3
   16624:	ldr	r2, [r1]
   16628:	cmp	r2, r0
   1662c:	strlt	r0, [r1]
   16630:	ldr	r0, [fp, #-736]	; 0xfffffd20
   16634:	ldr	r0, [r0]
   16638:	and	r0, r0, #45056	; 0xb000
   1663c:	orr	r0, r0, #16384	; 0x4000
   16640:	cmp	r0, #24576	; 0x6000
   16644:	bne	166ec <__assert_fail@plt+0x4660>
   16648:	mov	r0, #152	; 0x98
   1664c:	sub	r2, fp, #688	; 0x2b0
   16650:	mla	r6, r8, r0, r9
   16654:	ldr	r0, [r6, #48]!	; 0x30
   16658:	ldr	r1, [r6, #4]
   1665c:	lsr	r0, r0, #8
   16660:	lsr	r1, r1, #12
   16664:	bfi	r0, r1, #12, #20
   16668:	mov	r1, #0
   1666c:	bl	21dd0 <__assert_fail@plt+0xfd44>
   16670:	bl	11eac <strlen@plt>
   16674:	movw	r4, #61960	; 0xf208
   16678:	movt	r4, #3
   1667c:	ldr	r1, [r4]
   16680:	cmp	r1, r0
   16684:	mov	r1, #0
   16688:	strlt	r0, [r4]
   1668c:	ldrd	r2, [r6]
   16690:	lsr	r0, r2, #12
   16694:	orr	r0, r0, r3, lsl #20
   16698:	bfi	r0, r2, #0, #8
   1669c:	sub	r2, fp, #688	; 0x2b0
   166a0:	bl	21dd0 <__assert_fail@plt+0xfd44>
   166a4:	bl	11eac <strlen@plt>
   166a8:	movw	r2, #61964	; 0xf20c
   166ac:	ldr	r8, [fp, #-732]	; 0xfffffd24
   166b0:	ldr	r6, [fp, #-716]	; 0xfffffd34
   166b4:	movt	r2, #3
   166b8:	ldr	r1, [r2]
   166bc:	cmp	r1, r0
   166c0:	strlt	r0, [r2]
   166c4:	movlt	r1, r0
   166c8:	ldr	r0, [r4]
   166cc:	add	r0, r0, r1
   166d0:	movw	r1, #61968	; 0xf210
   166d4:	movt	r1, #3
   166d8:	add	r0, r0, #2
   166dc:	ldr	r2, [r1]
   166e0:	cmp	r2, r0
   166e4:	strlt	r0, [r1]
   166e8:	b	16998 <__assert_fail@plt+0x490c>
   166ec:	movw	r2, #58784	; 0xe5a0
   166f0:	mov	r0, #152	; 0x98
   166f4:	movt	r2, #3
   166f8:	mla	r0, r8, r0, r9
   166fc:	ldr	r3, [r2]
   16700:	movw	r2, #57992	; 0xe288
   16704:	movt	r2, #3
   16708:	ldrd	r0, [r0, #64]	; 0x40
   1670c:	ldm	r2, {r2, r7}
   16710:	sub	sp, sp, #16
   16714:	mov	r4, #1
   16718:	mov	r6, #0
   1671c:	stm	sp, {r4, r6}
   16720:	str	r2, [sp, #8]
   16724:	sub	r2, fp, #688	; 0x2b0
   16728:	str	r7, [sp, #12]
   1672c:	bl	20cf8 <__assert_fail@plt+0xec6c>
   16730:	add	sp, sp, #16
   16734:	mov	r1, #0
   16738:	bl	22318 <__assert_fail@plt+0x1028c>
   1673c:	movw	r1, #61968	; 0xf210
   16740:	movt	r1, #3
   16744:	ldr	r2, [r1]
   16748:	cmp	r2, r0
   1674c:	strlt	r0, [r1]
   16750:	b	165f0 <__assert_fail@plt+0x4564>
   16754:	cmp	r0, #38	; 0x26
   16758:	beq	15ec4 <__assert_fail@plt+0x3e38>
   1675c:	b	15ecc <__assert_fail@plt+0x3e40>
   16760:	cmp	r1, #38	; 0x26
   16764:	beq	15dd4 <__assert_fail@plt+0x3d48>
   16768:	b	15de4 <__assert_fail@plt+0x3d58>
   1676c:	movw	r1, #46144	; 0xb440
   16770:	mov	r2, #2
   16774:	movt	r1, #2
   16778:	bl	1202c <strncmp@plt>
   1677c:	cmp	r0, #0
   16780:	bne	15808 <__assert_fail@plt+0x377c>
   16784:	movw	r0, #58247	; 0xe387
   16788:	movw	r1, #58800	; 0xe5b0
   1678c:	movt	r0, #3
   16790:	movt	r1, #3
   16794:	ldrb	r0, [r0]
   16798:	ldrb	r1, [r1]
   1679c:	cmp	r0, #0
   167a0:	cmpeq	r1, #0
   167a4:	beq	167fc <__assert_fail@plt+0x4770>
   167a8:	ldr	r2, [fp, #-736]	; 0xfffffd20
   167ac:	cmp	r2, #6
   167b0:	beq	167c0 <__assert_fail@plt+0x4734>
   167b4:	ldr	r2, [fp, #-736]	; 0xfffffd20
   167b8:	cmp	r2, #0
   167bc:	bne	167fc <__assert_fail@plt+0x4770>
   167c0:	ldr	r2, [r7]
   167c4:	cmp	r2, #4
   167c8:	beq	15808 <__assert_fail@plt+0x377c>
   167cc:	movw	r2, #58166	; 0xe336
   167d0:	movt	r2, #3
   167d4:	ldrb	r2, [r2]
   167d8:	cmp	r2, #0
   167dc:	bne	15808 <__assert_fail@plt+0x377c>
   167e0:	movw	r2, #58165	; 0xe335
   167e4:	movt	r2, #3
   167e8:	ldrb	r2, [r2]
   167ec:	orr	r1, r1, r2
   167f0:	tst	r1, #1
   167f4:	beq	16804 <__assert_fail@plt+0x4778>
   167f8:	b	15808 <__assert_fail@plt+0x377c>
   167fc:	cmp	r1, #0
   16800:	bne	15808 <__assert_fail@plt+0x377c>
   16804:	cmp	r0, #0
   16808:	beq	16990 <__assert_fail@plt+0x4904>
   1680c:	ldr	r0, [fp, #-736]	; 0xfffffd20
   16810:	cmp	r0, #0
   16814:	beq	15808 <__assert_fail@plt+0x377c>
   16818:	ldr	r0, [fp, #-716]	; 0xfffffd34
   1681c:	cmp	r0, #0
   16820:	bne	15808 <__assert_fail@plt+0x377c>
   16824:	ldr	r0, [fp, #-736]	; 0xfffffd20
   16828:	mov	r6, #0
   1682c:	mov	r5, #0
   16830:	cmp	r0, #5
   16834:	bne	16998 <__assert_fail@plt+0x490c>
   16838:	movw	r0, #58180	; 0xe344
   1683c:	movt	r0, #3
   16840:	ldr	r0, [r0]
   16844:	cmp	r0, #3
   16848:	beq	15808 <__assert_fail@plt+0x377c>
   1684c:	cmp	r4, #0
   16850:	beq	16990 <__assert_fail@plt+0x4904>
   16854:	movw	r4, #57800	; 0xe1c8
   16858:	movt	r4, #3
   1685c:	ldr	r1, [r4, #112]	; 0x70
   16860:	cmp	r1, #0
   16864:	beq	168b0 <__assert_fail@plt+0x4824>
   16868:	ldr	r0, [r4, #116]	; 0x74
   1686c:	cmp	r1, #2
   16870:	beq	16898 <__assert_fail@plt+0x480c>
   16874:	cmp	r1, #1
   16878:	bne	15808 <__assert_fail@plt+0x377c>
   1687c:	ldrb	r0, [r0]
   16880:	cmp	r0, #48	; 0x30
   16884:	bne	15808 <__assert_fail@plt+0x377c>
   16888:	b	168b0 <__assert_fail@plt+0x4824>
   1688c:	cmp	r1, #38	; 0x26
   16890:	beq	15fe8 <__assert_fail@plt+0x3f5c>
   16894:	b	15ff8 <__assert_fail@plt+0x3f6c>
   16898:	movw	r1, #46144	; 0xb440
   1689c:	mov	r2, #2
   168a0:	movt	r1, #2
   168a4:	bl	1202c <strncmp@plt>
   168a8:	cmp	r0, #0
   168ac:	bne	15808 <__assert_fail@plt+0x377c>
   168b0:	ldr	r1, [r4, #128]	; 0x80
   168b4:	cmp	r1, #0
   168b8:	beq	168f8 <__assert_fail@plt+0x486c>
   168bc:	ldr	r0, [r4, #132]	; 0x84
   168c0:	cmp	r1, #2
   168c4:	beq	168e0 <__assert_fail@plt+0x4854>
   168c8:	cmp	r1, #1
   168cc:	bne	15808 <__assert_fail@plt+0x377c>
   168d0:	ldrb	r0, [r0]
   168d4:	cmp	r0, #48	; 0x30
   168d8:	bne	15808 <__assert_fail@plt+0x377c>
   168dc:	b	168f8 <__assert_fail@plt+0x486c>
   168e0:	movw	r1, #46144	; 0xb440
   168e4:	mov	r2, #2
   168e8:	movt	r1, #2
   168ec:	bl	1202c <strncmp@plt>
   168f0:	cmp	r0, #0
   168f4:	bne	15808 <__assert_fail@plt+0x377c>
   168f8:	ldr	r1, [r4, #136]	; 0x88
   168fc:	cmp	r1, #0
   16900:	beq	16940 <__assert_fail@plt+0x48b4>
   16904:	ldr	r0, [r4, #140]	; 0x8c
   16908:	cmp	r1, #2
   1690c:	beq	16928 <__assert_fail@plt+0x489c>
   16910:	cmp	r1, #1
   16914:	bne	15808 <__assert_fail@plt+0x377c>
   16918:	ldrb	r0, [r0]
   1691c:	cmp	r0, #48	; 0x30
   16920:	bne	15808 <__assert_fail@plt+0x377c>
   16924:	b	16940 <__assert_fail@plt+0x48b4>
   16928:	movw	r1, #46144	; 0xb440
   1692c:	mov	r2, #2
   16930:	movt	r1, #2
   16934:	bl	1202c <strncmp@plt>
   16938:	cmp	r0, #0
   1693c:	bne	15808 <__assert_fail@plt+0x377c>
   16940:	ldr	r1, [r4, #168]	; 0xa8
   16944:	cmp	r1, #0
   16948:	beq	16990 <__assert_fail@plt+0x4904>
   1694c:	ldr	r0, [r4, #172]	; 0xac
   16950:	cmp	r1, #2
   16954:	beq	16978 <__assert_fail@plt+0x48ec>
   16958:	cmp	r1, #1
   1695c:	bne	15808 <__assert_fail@plt+0x377c>
   16960:	ldrb	r0, [r0]
   16964:	mov	r6, #0
   16968:	mov	r5, #0
   1696c:	cmp	r0, #48	; 0x30
   16970:	bne	15808 <__assert_fail@plt+0x377c>
   16974:	b	16998 <__assert_fail@plt+0x490c>
   16978:	movw	r1, #46144	; 0xb440
   1697c:	mov	r2, #2
   16980:	movt	r1, #2
   16984:	bl	1202c <strncmp@plt>
   16988:	cmp	r0, #0
   1698c:	bne	15808 <__assert_fail@plt+0x377c>
   16990:	mov	r6, #0
   16994:	mov	r5, #0
   16998:	movw	r0, #58800	; 0xe5b0
   1699c:	movt	r0, #3
   169a0:	ldrb	r0, [r0]
   169a4:	cmp	r0, #1
   169a8:	bne	169d8 <__assert_fail@plt+0x494c>
   169ac:	ldr	r0, [fp, #-720]	; 0xfffffd30
   169b0:	sub	r2, fp, #688	; 0x2b0
   169b4:	add	r0, r0, #112	; 0x70
   169b8:	ldrd	r0, [r0]
   169bc:	bl	21dd0 <__assert_fail@plt+0xfd44>
   169c0:	bl	11eac <strlen@plt>
   169c4:	movw	r1, #61932	; 0xf1ec
   169c8:	movt	r1, #3
   169cc:	ldr	r2, [r1]
   169d0:	cmp	r2, r0
   169d4:	strlt	r0, [r1]
   169d8:	mov	r0, r8
   169dc:	bl	27c54 <_obstack_memory_used@@Base+0x3368>
   169e0:	ldr	r1, [fp, #-720]	; 0xfffffd30
   169e4:	str	r0, [r1]
   169e8:	movw	r0, #58356	; 0xe3f4
   169ec:	movt	r0, #3
   169f0:	mov	r1, r0
   169f4:	ldr	r0, [r0]
   169f8:	add	r0, r0, #1
   169fc:	str	r0, [r1]
   16a00:	mov	r0, r6
   16a04:	mov	r1, r5
   16a08:	sub	sp, fp, #28
   16a0c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   16a10:	bl	12038 <abort@plt>
   16a14:	nop	{0}
   16a18:	nop	{0}
   16a1c:	nop	{0}
   16a20:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   16a24:	add	fp, sp, #28
   16a28:	sub	sp, sp, #28
   16a2c:	sub	sp, sp, #8192	; 0x2000
   16a30:	movw	r0, #58356	; 0xe3f4
   16a34:	movw	r4, #62000	; 0xf230
   16a38:	movw	r5, #61924	; 0xf1e4
   16a3c:	movt	r0, #3
   16a40:	movt	r4, #3
   16a44:	movt	r5, #3
   16a48:	ldr	r0, [r0]
   16a4c:	ldr	r1, [r4]
   16a50:	add	r2, r0, r0, lsr #1
   16a54:	cmp	r1, r2
   16a58:	bcs	16a8c <__assert_fail@plt+0x4a00>
   16a5c:	ldr	r0, [r5]
   16a60:	bl	1f89c <__assert_fail@plt+0xd810>
   16a64:	movw	r0, #58356	; 0xe3f4
   16a68:	mov	r1, #12
   16a6c:	movt	r0, #3
   16a70:	mov	r6, r0
   16a74:	ldr	r0, [r0]
   16a78:	bl	27820 <_obstack_memory_used@@Base+0x2f34>
   16a7c:	str	r0, [r5]
   16a80:	ldr	r0, [r6]
   16a84:	add	r1, r0, r0, lsl #1
   16a88:	str	r1, [r4]
   16a8c:	cmp	r0, #0
   16a90:	beq	16b78 <__assert_fail@plt+0x4aec>
   16a94:	movw	r1, #58352	; 0xe3f0
   16a98:	ldr	lr, [r5]
   16a9c:	mov	r3, #0
   16aa0:	cmp	r0, #4
   16aa4:	movt	r1, #3
   16aa8:	ldr	r2, [r1]
   16aac:	bcc	16b58 <__assert_fail@plt+0x4acc>
   16ab0:	bic	r3, r0, #3
   16ab4:	mov	r6, #1
   16ab8:	subs	r1, r3, #4
   16abc:	add	r1, r6, r1, lsr #2
   16ac0:	add	r6, pc, #872	; 0x368
   16ac4:	and	ip, r1, #1
   16ac8:	beq	16b24 <__assert_fail@plt+0x4a98>
   16acc:	sub	r5, r1, ip
   16ad0:	add	r1, pc, #856	; 0x358
   16ad4:	vdup.32	q10, r2
   16ad8:	vmov.i32	q9, #152	; 0x00000098
   16adc:	vmov.i32	q12, #8	; 0x00000008
   16ae0:	mov	r6, #0
   16ae4:	mov	r4, #32
   16ae8:	vld1.64	{d16-d17}, [r1 :128]
   16aec:	mov	r1, #608	; 0x260
   16af0:	vdup.32	q11, r1
   16af4:	mov	r1, lr
   16af8:	vorr	q13, q10, q10
   16afc:	add	r7, r1, #16
   16b00:	subs	r5, r5, #2
   16b04:	add	r6, r6, #8
   16b08:	vmla.i32	q13, q8, q9
   16b0c:	vadd.i32	q8, q8, q12
   16b10:	vadd.i32	q14, q13, q11
   16b14:	vst1.32	{d26-d27}, [r1], r4
   16b18:	vst1.32	{d28-d29}, [r7]
   16b1c:	bne	16af8 <__assert_fail@plt+0x4a6c>
   16b20:	b	16b2c <__assert_fail@plt+0x4aa0>
   16b24:	vld1.64	{d16-d17}, [r6 :128]
   16b28:	mov	r6, #0
   16b2c:	movw	r5, #61924	; 0xf1e4
   16b30:	cmp	ip, #0
   16b34:	movt	r5, #3
   16b38:	beq	16b50 <__assert_fail@plt+0x4ac4>
   16b3c:	vdup.32	q10, r2
   16b40:	vmov.i32	q9, #152	; 0x00000098
   16b44:	add	r1, lr, r6, lsl #2
   16b48:	vmla.i32	q10, q8, q9
   16b4c:	vst1.32	{d20-d21}, [r1]
   16b50:	cmp	r0, r3
   16b54:	beq	16b78 <__assert_fail@plt+0x4aec>
   16b58:	mov	r1, #152	; 0x98
   16b5c:	mla	r1, r3, r1, r2
   16b60:	add	r2, lr, r3, lsl #2
   16b64:	sub	r3, r0, r3
   16b68:	str	r1, [r2], #4
   16b6c:	add	r1, r1, #152	; 0x98
   16b70:	subs	r3, r3, #1
   16b74:	bne	16b68 <__assert_fail@plt+0x4adc>
   16b78:	movw	r4, #58240	; 0xe380
   16b7c:	movt	r4, #3
   16b80:	ldr	r1, [r4]
   16b84:	cmp	r1, #2
   16b88:	bne	16b98 <__assert_fail@plt+0x4b0c>
   16b8c:	cmp	r0, #0
   16b90:	bne	16bc8 <__assert_fail@plt+0x4b3c>
   16b94:	b	16c7c <__assert_fail@plt+0x4bf0>
   16b98:	movw	r2, #58816	; 0xe5c0
   16b9c:	movt	r2, #3
   16ba0:	ldr	r2, [r2]
   16ba4:	cmp	r2, #0
   16ba8:	cmpne	r0, #0
   16bac:	beq	16c74 <__assert_fail@plt+0x4be8>
   16bb0:	movw	r2, #58168	; 0xe338
   16bb4:	movt	r2, #3
   16bb8:	ldr	r2, [r2]
   16bbc:	orr	r2, r2, #1
   16bc0:	cmp	r2, #3
   16bc4:	bne	16c74 <__assert_fail@plt+0x4be8>
   16bc8:	mov	r7, #0
   16bcc:	add	r8, sp, #24
   16bd0:	add	r9, sp, #15
   16bd4:	add	sl, sp, #16
   16bd8:	add	r4, sp, #20
   16bdc:	b	16c10 <__assert_fail@plt+0x4b84>
   16be0:	ldrb	r0, [sp, #15]
   16be4:	ldr	r1, [sp, #16]
   16be8:	movw	r5, #61924	; 0xf1e4
   16bec:	movt	r5, #3
   16bf0:	add	r1, r1, r0
   16bf4:	movw	r0, #58356	; 0xe3f4
   16bf8:	movt	r0, #3
   16bfc:	ldr	r0, [r0]
   16c00:	add	r7, r7, #1
   16c04:	str	r1, [r6, #148]	; 0x94
   16c08:	cmp	r7, r0
   16c0c:	bcs	16c68 <__assert_fail@plt+0x4bdc>
   16c10:	ldr	r1, [r5]
   16c14:	ldr	r6, [r1, r7, lsl #2]
   16c18:	ldr	r1, [r6, #148]	; 0x94
   16c1c:	cmp	r1, #0
   16c20:	bne	16c00 <__assert_fail@plt+0x4b74>
   16c24:	movw	r0, #58372	; 0xe404
   16c28:	ldr	r5, [r6]
   16c2c:	ldr	r3, [r6, #144]	; 0x90
   16c30:	str	r8, [sp, #20]
   16c34:	str	sl, [sp]
   16c38:	str	r9, [sp, #4]
   16c3c:	movt	r0, #3
   16c40:	ldr	r2, [r0]
   16c44:	mov	r0, r4
   16c48:	mov	r1, r5
   16c4c:	bl	19dd4 <__assert_fail@plt+0x7d48>
   16c50:	ldr	r0, [sp, #20]
   16c54:	cmp	r0, r8
   16c58:	cmpne	r0, r5
   16c5c:	beq	16be0 <__assert_fail@plt+0x4b54>
   16c60:	bl	1f89c <__assert_fail@plt+0xd810>
   16c64:	b	16be0 <__assert_fail@plt+0x4b54>
   16c68:	movw	r4, #58240	; 0xe380
   16c6c:	movt	r4, #3
   16c70:	ldr	r1, [r4]
   16c74:	cmp	r1, #6
   16c78:	beq	16e08 <__assert_fail@plt+0x4d7c>
   16c7c:	movw	r0, #62008	; 0xf238
   16c80:	movt	r0, #3
   16c84:	bl	11c18 <_setjmp@plt>
   16c88:	cmp	r0, #0
   16c8c:	beq	16d44 <__assert_fail@plt+0x4cb8>
   16c90:	ldr	r9, [r4]
   16c94:	cmp	r9, #4
   16c98:	beq	16e10 <__assert_fail@plt+0x4d84>
   16c9c:	movw	r0, #58356	; 0xe3f4
   16ca0:	mov	r8, #1
   16ca4:	movt	r0, #3
   16ca8:	ldr	r1, [r0]
   16cac:	cmp	r1, #0
   16cb0:	beq	16d5c <__assert_fail@plt+0x4cd0>
   16cb4:	movw	r3, #58352	; 0xe3f0
   16cb8:	ldr	r2, [r5]
   16cbc:	mov	r7, #0
   16cc0:	cmp	r1, #4
   16cc4:	movt	r3, #3
   16cc8:	ldr	lr, [r3]
   16ccc:	bcc	16da0 <__assert_fail@plt+0x4d14>
   16cd0:	bic	r7, r1, #3
   16cd4:	mov	r6, #1
   16cd8:	add	r4, pc, #336	; 0x150
   16cdc:	subs	r3, r7, #4
   16ce0:	add	r3, r6, r3, lsr #2
   16ce4:	and	ip, r3, #1
   16ce8:	beq	16d64 <__assert_fail@plt+0x4cd8>
   16cec:	sub	r6, r3, ip
   16cf0:	add	r3, pc, #312	; 0x138
   16cf4:	vdup.32	q10, lr
   16cf8:	vmov.i32	q9, #152	; 0x00000098
   16cfc:	vmov.i32	q12, #8	; 0x00000008
   16d00:	mov	r4, #0
   16d04:	mov	r5, #32
   16d08:	vld1.64	{d16-d17}, [r3 :128]
   16d0c:	mov	r3, #608	; 0x260
   16d10:	vdup.32	q11, r3
   16d14:	mov	r3, r2
   16d18:	vorr	q13, q10, q10
   16d1c:	add	r0, r3, #16
   16d20:	subs	r6, r6, #2
   16d24:	add	r4, r4, #8
   16d28:	vmla.i32	q13, q8, q9
   16d2c:	vadd.i32	q8, q8, q12
   16d30:	vadd.i32	q14, q13, q11
   16d34:	vst1.32	{d26-d27}, [r3], r5
   16d38:	vst1.32	{d28-d29}, [r0]
   16d3c:	bne	16d18 <__assert_fail@plt+0x4c8c>
   16d40:	b	16d6c <__assert_fail@plt+0x4ce0>
   16d44:	movw	r0, #58356	; 0xe3f4
   16d48:	ldr	r9, [r4]
   16d4c:	mov	r8, #0
   16d50:	movt	r0, #3
   16d54:	ldr	r1, [r0]
   16d58:	b	16dbc <__assert_fail@plt+0x4d30>
   16d5c:	mov	r1, #0
   16d60:	b	16dbc <__assert_fail@plt+0x4d30>
   16d64:	vld1.64	{d16-d17}, [r4 :128]
   16d68:	mov	r4, #0
   16d6c:	movw	r5, #61924	; 0xf1e4
   16d70:	cmp	ip, #0
   16d74:	movt	r5, #3
   16d78:	beq	16d90 <__assert_fail@plt+0x4d04>
   16d7c:	vdup.32	q10, lr
   16d80:	vmov.i32	q9, #152	; 0x00000098
   16d84:	add	r0, r2, r4, lsl #2
   16d88:	vmla.i32	q10, q8, q9
   16d8c:	vst1.32	{d20-d21}, [r0]
   16d90:	cmp	r1, r7
   16d94:	bne	16da0 <__assert_fail@plt+0x4d14>
   16d98:	mov	r8, #1
   16d9c:	b	16dbc <__assert_fail@plt+0x4d30>
   16da0:	mov	r0, #152	; 0x98
   16da4:	mla	r3, r7, r0, lr
   16da8:	str	r3, [r2, r7, lsl #2]
   16dac:	add	r7, r7, #1
   16db0:	add	r3, r3, #152	; 0x98
   16db4:	cmp	r1, r7
   16db8:	bne	16da8 <__assert_fail@plt+0x4d1c>
   16dbc:	movw	r0, #58772	; 0xe594
   16dc0:	cmp	r9, #5
   16dc4:	movw	r2, #58803	; 0xe5b3
   16dc8:	movt	r0, #3
   16dcc:	movt	r2, #3
   16dd0:	ldr	r0, [r0]
   16dd4:	ldrb	r2, [r2]
   16dd8:	addeq	r9, r9, r0
   16ddc:	movw	r0, #54196	; 0xd3b4
   16de0:	movt	r0, #2
   16de4:	add	r0, r0, r9, lsl #5
   16de8:	add	r0, r0, r8, lsl #4
   16dec:	add	r0, r0, r2, lsl #3
   16df0:	movw	r2, #58164	; 0xe334
   16df4:	movt	r2, #3
   16df8:	ldrb	r2, [r2]
   16dfc:	ldr	r2, [r0, r2, lsl #2]
   16e00:	ldr	r0, [r5]
   16e04:	bl	22684 <__assert_fail@plt+0x105f8>
   16e08:	sub	sp, fp, #28
   16e0c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   16e10:	movw	r0, #48007	; 0xbb87
   16e14:	movw	r1, #38717	; 0x973d
   16e18:	movw	r3, #48033	; 0xbba1
   16e1c:	movw	r2, #4102	; 0x1006
   16e20:	movt	r0, #2
   16e24:	movt	r1, #2
   16e28:	movt	r3, #2
   16e2c:	bl	1208c <__assert_fail@plt>
   16e30:	andeq	r0, r0, r0
   16e34:	andeq	r0, r0, r1
   16e38:	andeq	r0, r0, r2
   16e3c:	andeq	r0, r0, r3
   16e40:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   16e44:	add	fp, sp, #28
   16e48:	sub	sp, sp, #12
   16e4c:	cmp	r0, #0
   16e50:	str	r1, [sp, #4]
   16e54:	str	r0, [sp, #8]
   16e58:	beq	16eac <__assert_fail@plt+0x4e20>
   16e5c:	movw	r0, #58188	; 0xe34c
   16e60:	movt	r0, #3
   16e64:	ldr	r0, [r0]
   16e68:	cmp	r0, #0
   16e6c:	beq	16eac <__assert_fail@plt+0x4e20>
   16e70:	mov	r0, #16
   16e74:	bl	27750 <_obstack_memory_used@@Base+0x2e64>
   16e78:	mov	r4, r0
   16e7c:	ldr	r0, [sp, #8]
   16e80:	bl	27c54 <_obstack_memory_used@@Base+0x3368>
   16e84:	mov	r1, #0
   16e88:	strb	r1, [r4, #8]
   16e8c:	str	r1, [r4]
   16e90:	str	r0, [r4, #4]
   16e94:	movw	r0, #58144	; 0xe320
   16e98:	movt	r0, #3
   16e9c:	mov	r1, r0
   16ea0:	ldr	r0, [r0]
   16ea4:	str	r4, [r1]
   16ea8:	str	r0, [r4, #12]
   16eac:	movw	r5, #58356	; 0xe3f4
   16eb0:	mov	sl, #0
   16eb4:	movt	r5, #3
   16eb8:	ldr	r0, [r5]
   16ebc:	cmp	r0, #0
   16ec0:	beq	17104 <__assert_fail@plt+0x5078>
   16ec4:	rsb	r8, r0, #1
   16ec8:	b	16ef8 <__assert_fail@plt+0x4e6c>
   16ecc:	ldrb	r1, [r0, #1]
   16ed0:	cmp	r1, #46	; 0x2e
   16ed4:	mov	r1, #1
   16ed8:	movweq	r1, #2
   16edc:	ldrb	r0, [r0, r1]
   16ee0:	cmp	r0, #0
   16ee4:	cmpne	r0, #47	; 0x2f
   16ee8:	bne	16f3c <__assert_fail@plt+0x4eb0>
   16eec:	add	r8, r8, #1
   16ef0:	cmp	r8, #1
   16ef4:	beq	17064 <__assert_fail@plt+0x4fd8>
   16ef8:	movw	r0, #61924	; 0xf1e4
   16efc:	movt	r0, #3
   16f00:	ldr	r0, [r0]
   16f04:	ldr	r9, [r0, -r8, lsl #2]
   16f08:	ldr	r0, [r9, #120]	; 0x78
   16f0c:	cmp	r0, #9
   16f10:	cmpne	r0, #3
   16f14:	bne	16eec <__assert_fail@plt+0x4e60>
   16f18:	ldr	r0, [sp, #8]
   16f1c:	ldr	r6, [r9]
   16f20:	cmp	r0, #0
   16f24:	beq	16f48 <__assert_fail@plt+0x4ebc>
   16f28:	mov	r0, r6
   16f2c:	bl	1e3d8 <__assert_fail@plt+0xc34c>
   16f30:	ldrb	r1, [r0]
   16f34:	cmp	r1, #46	; 0x2e
   16f38:	beq	16ecc <__assert_fail@plt+0x4e40>
   16f3c:	ldrb	r0, [r6]
   16f40:	cmp	r0, #47	; 0x2f
   16f44:	bne	16fb0 <__assert_fail@plt+0x4f24>
   16f48:	ldr	r5, [r9, #4]
   16f4c:	mov	r0, #16
   16f50:	bl	27750 <_obstack_memory_used@@Base+0x2e64>
   16f54:	mov	r7, r0
   16f58:	mov	r4, #0
   16f5c:	cmp	r5, #0
   16f60:	mov	r0, #0
   16f64:	beq	16f70 <__assert_fail@plt+0x4ee4>
   16f68:	mov	r0, r5
   16f6c:	bl	27c54 <_obstack_memory_used@@Base+0x3368>
   16f70:	cmp	r6, #0
   16f74:	str	r0, [r7, #4]
   16f78:	beq	16f88 <__assert_fail@plt+0x4efc>
   16f7c:	mov	r0, r6
   16f80:	bl	27c54 <_obstack_memory_used@@Base+0x3368>
   16f84:	mov	r4, r0
   16f88:	ldr	r0, [sp, #4]
   16f8c:	strb	r0, [r7, #8]
   16f90:	movw	r0, #58144	; 0xe320
   16f94:	str	r4, [r7]
   16f98:	movt	r0, #3
   16f9c:	mov	r1, r0
   16fa0:	ldr	r0, [r0]
   16fa4:	str	r7, [r1]
   16fa8:	str	r0, [r7, #12]
   16fac:	b	17024 <__assert_fail@plt+0x4f98>
   16fb0:	ldr	r0, [sp, #8]
   16fb4:	mov	r1, r6
   16fb8:	mov	r2, #0
   16fbc:	mov	r4, #0
   16fc0:	bl	1f310 <__assert_fail@plt+0xd284>
   16fc4:	ldr	r5, [r9, #4]
   16fc8:	mov	r6, r0
   16fcc:	mov	r0, #16
   16fd0:	bl	27750 <_obstack_memory_used@@Base+0x2e64>
   16fd4:	mov	r7, r0
   16fd8:	cmp	r5, #0
   16fdc:	beq	16fec <__assert_fail@plt+0x4f60>
   16fe0:	mov	r0, r5
   16fe4:	bl	27c54 <_obstack_memory_used@@Base+0x3368>
   16fe8:	mov	r4, r0
   16fec:	mov	r0, r6
   16ff0:	str	r4, [r7, #4]
   16ff4:	bl	27c54 <_obstack_memory_used@@Base+0x3368>
   16ff8:	ldr	r1, [sp, #4]
   16ffc:	strb	r1, [r7, #8]
   17000:	str	r0, [r7]
   17004:	movw	r0, #58144	; 0xe320
   17008:	movt	r0, #3
   1700c:	mov	r1, r0
   17010:	ldr	r0, [r0]
   17014:	str	r7, [r1]
   17018:	str	r0, [r7, #12]
   1701c:	mov	r0, r6
   17020:	bl	1f89c <__assert_fail@plt+0xd810>
   17024:	ldr	r0, [r9, #120]	; 0x78
   17028:	cmp	r0, #9
   1702c:	bne	16eec <__assert_fail@plt+0x4e60>
   17030:	ldr	r0, [r9]
   17034:	bl	1f89c <__assert_fail@plt+0xd810>
   17038:	ldr	r0, [r9, #4]
   1703c:	bl	1f89c <__assert_fail@plt+0xd810>
   17040:	ldr	r0, [r9, #8]
   17044:	bl	1f89c <__assert_fail@plt+0xd810>
   17048:	ldr	r0, [r9, #128]	; 0x80
   1704c:	movw	r1, #58009	; 0xe299
   17050:	movt	r1, #3
   17054:	cmp	r0, r1
   17058:	beq	16eec <__assert_fail@plt+0x4e60>
   1705c:	bl	11ff0 <freecon@plt>
   17060:	b	16eec <__assert_fail@plt+0x4e60>
   17064:	movw	r5, #58356	; 0xe3f4
   17068:	movt	r5, #3
   1706c:	ldr	r2, [r5]
   17070:	cmp	r2, #0
   17074:	beq	17104 <__assert_fail@plt+0x5078>
   17078:	movw	r0, #61924	; 0xf1e4
   1707c:	and	r1, r2, #1
   17080:	cmp	r2, #1
   17084:	movt	r0, #3
   17088:	ldr	r7, [r0]
   1708c:	bne	170a4 <__assert_fail@plt+0x5018>
   17090:	mov	r2, #0
   17094:	mov	sl, #0
   17098:	cmp	r1, #0
   1709c:	bne	170f0 <__assert_fail@plt+0x5064>
   170a0:	b	17104 <__assert_fail@plt+0x5078>
   170a4:	sub	r3, r2, r1
   170a8:	mov	r2, #0
   170ac:	mov	sl, #0
   170b0:	mov	r0, r7
   170b4:	ldr	r6, [r0, r2, lsl #2]!
   170b8:	add	r2, r2, #2
   170bc:	str	r6, [r7, sl, lsl #2]
   170c0:	ldr	r6, [r6, #120]	; 0x78
   170c4:	ldr	r0, [r0, #4]
   170c8:	cmp	r6, #9
   170cc:	addne	sl, sl, #1
   170d0:	str	r0, [r7, sl, lsl #2]
   170d4:	ldr	r0, [r0, #120]	; 0x78
   170d8:	cmp	r0, #9
   170dc:	addne	sl, sl, #1
   170e0:	cmp	r3, r2
   170e4:	bne	170b0 <__assert_fail@plt+0x5024>
   170e8:	cmp	r1, #0
   170ec:	beq	17104 <__assert_fail@plt+0x5078>
   170f0:	ldr	r0, [r7, r2, lsl #2]
   170f4:	str	r0, [r7, sl, lsl #2]
   170f8:	ldr	r0, [r0, #120]	; 0x78
   170fc:	cmp	r0, #9
   17100:	addne	sl, sl, #1
   17104:	str	sl, [r5]
   17108:	sub	sp, fp, #28
   1710c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   17110:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   17114:	add	fp, sp, #28
   17118:	sub	sp, sp, #700	; 0x2bc
   1711c:	sub	sp, sp, #4096	; 0x1000
   17120:	movw	r0, #58168	; 0xe338
   17124:	movt	r0, #3
   17128:	ldr	r0, [r0]
   1712c:	cmp	r0, #4
   17130:	bhi	1857c <__assert_fail@plt+0x64f0>
   17134:	add	r1, pc, #0
   17138:	ldr	pc, [r1, r0, lsl #2]
   1713c:	andeq	r7, r1, r0, asr r1
   17140:	muleq	r1, ip, r2
   17144:	andeq	r8, r1, r8, lsr #6
   17148:	andeq	r8, r1, r4, lsl #11
   1714c:	muleq	r1, r4, r2
   17150:	movw	r0, #58356	; 0xe3f4
   17154:	movt	r0, #3
   17158:	ldr	r0, [r0]
   1715c:	cmp	r0, #0
   17160:	beq	1857c <__assert_fail@plt+0x64f0>
   17164:	movw	sl, #58632	; 0xe508
   17168:	sub	lr, fp, #1024	; 0x400
   1716c:	mov	r9, #0
   17170:	mov	r5, #0
   17174:	sub	r0, lr, #69	; 0x45
   17178:	movt	sl, #3
   1717c:	add	r0, r0, #1
   17180:	str	r0, [sp, #16]
   17184:	movw	r0, #58156	; 0xe32c
   17188:	movt	r0, #3
   1718c:	ldrb	r0, [r0]
   17190:	cmp	r0, #0
   17194:	beq	17210 <__assert_fail@plt+0x5184>
   17198:	movw	r0, #57800	; 0xe1c8
   1719c:	movt	r0, #3
   171a0:	ldr	r1, [r0, #32]
   171a4:	cmp	r1, #0
   171a8:	beq	17210 <__assert_fail@plt+0x5184>
   171ac:	movw	r0, #57800	; 0xe1c8
   171b0:	cmp	r1, #2
   171b4:	movt	r0, #3
   171b8:	ldr	r0, [r0, #36]	; 0x24
   171bc:	beq	171d8 <__assert_fail@plt+0x514c>
   171c0:	cmp	r1, #1
   171c4:	bne	171f0 <__assert_fail@plt+0x5164>
   171c8:	ldrb	r0, [r0]
   171cc:	cmp	r0, #48	; 0x30
   171d0:	bne	171f0 <__assert_fail@plt+0x5164>
   171d4:	b	17210 <__assert_fail@plt+0x5184>
   171d8:	movw	r1, #46144	; 0xb440
   171dc:	mov	r2, #2
   171e0:	movt	r1, #2
   171e4:	bl	1202c <strncmp@plt>
   171e8:	cmp	r0, #0
   171ec:	beq	17210 <__assert_fail@plt+0x5184>
   171f0:	movw	r4, #57800	; 0xe1c8
   171f4:	movt	r4, #3
   171f8:	mov	r0, r4
   171fc:	bl	18e3c <__assert_fail@plt+0x6db0>
   17200:	add	r0, r4, #32
   17204:	bl	18e3c <__assert_fail@plt+0x6db0>
   17208:	add	r0, r4, #8
   1720c:	bl	18e3c <__assert_fail@plt+0x6db0>
   17210:	movw	r0, #61924	; 0xf1e4
   17214:	movt	r0, #3
   17218:	ldr	r0, [r0]
   1721c:	ldr	r6, [r0, r5, lsl #2]
   17220:	ldrb	r0, [r6, #132]	; 0x84
   17224:	cmp	r0, #0
   17228:	beq	17240 <__assert_fail@plt+0x51b4>
   1722c:	sub	lr, fp, #1024	; 0x400
   17230:	add	r0, r6, #16
   17234:	sub	r1, lr, #69	; 0x45
   17238:	bl	1f308 <__assert_fail@plt+0xd27c>
   1723c:	b	17274 <__assert_fail@plt+0x51e8>
   17240:	ldr	r0, [r6, #120]	; 0x78
   17244:	movw	r1, #48055	; 0xbbb7
   17248:	movt	r1, #2
   1724c:	ldrb	r0, [r1, r0]
   17250:	movw	r1, #16191	; 0x3f3f
   17254:	strb	r0, [fp, #-1093]	; 0xfffffbbb
   17258:	ldr	r0, [sp, #16]
   1725c:	strh	r1, [r0, #8]
   17260:	movw	r1, #16191	; 0x3f3f
   17264:	movt	r1, #16191	; 0x3f3f
   17268:	str	r1, [r0, #4]
   1726c:	str	r1, [r0]
   17270:	strb	r9, [fp, #-1082]	; 0xfffffbc6
   17274:	movw	r0, #61928	; 0xf1e8
   17278:	movt	r0, #3
   1727c:	ldrb	r0, [r0]
   17280:	cmp	r0, #0
   17284:	beq	172a4 <__assert_fail@plt+0x5218>
   17288:	ldr	r0, [r6, #136]	; 0x88
   1728c:	cmp	r0, #1
   17290:	beq	172ac <__assert_fail@plt+0x5220>
   17294:	cmp	r0, #2
   17298:	bne	172b4 <__assert_fail@plt+0x5228>
   1729c:	mov	r0, #43	; 0x2b
   172a0:	b	172b0 <__assert_fail@plt+0x5224>
   172a4:	mov	r0, #0
   172a8:	b	172b0 <__assert_fail@plt+0x5224>
   172ac:	mov	r0, #46	; 0x2e
   172b0:	strb	r0, [fp, #-1083]	; 0xfffffbc5
   172b4:	movw	r0, #58772	; 0xe594
   172b8:	movt	r0, #3
   172bc:	ldr	r0, [r0]
   172c0:	cmp	r0, #3
   172c4:	bhi	187e8 <__assert_fail@plt+0x675c>
   172c8:	add	r2, pc, #8
   172cc:	add	r1, r6, #96	; 0x60
   172d0:	str	r5, [sp, #28]
   172d4:	ldr	pc, [r2, r0, lsl #2]
   172d8:	andeq	r7, r1, r8, ror #5
   172dc:	andeq	r7, r1, r8, lsl r3
   172e0:	strdeq	r7, [r1], -r0
   172e4:	strdeq	r7, [r1], -r8
   172e8:	ldrd	r0, [r1]
   172ec:	b	17320 <__assert_fail@plt+0x5294>
   172f0:	add	r0, r6, #88	; 0x58
   172f4:	b	1731c <__assert_fail@plt+0x5290>
   172f8:	ldrd	r0, [r1]
   172fc:	str	r0, [sp, #80]	; 0x50
   17300:	str	r1, [sp, #84]	; 0x54
   17304:	and	r0, r1, r0
   17308:	mvn	r1, #0
   1730c:	subs	r0, r0, r1
   17310:	movwne	r0, #1
   17314:	b	1732c <__assert_fail@plt+0x52a0>
   17318:	add	r0, r6, #104	; 0x68
   1731c:	ldrd	r0, [r0]
   17320:	str	r0, [sp, #80]	; 0x50
   17324:	str	r1, [sp, #84]	; 0x54
   17328:	mov	r0, #1
   1732c:	str	r0, [sp, #24]
   17330:	movw	r0, #58800	; 0xe5b0
   17334:	add	r5, sp, #88	; 0x58
   17338:	movt	r0, #3
   1733c:	ldrb	r0, [r0]
   17340:	cmp	r0, #1
   17344:	bne	173bc <__assert_fail@plt+0x5330>
   17348:	movw	r0, #61932	; 0xf1ec
   1734c:	movt	r0, #3
   17350:	ldr	r4, [r0]
   17354:	ldrb	r0, [r6, #132]	; 0x84
   17358:	cmp	r0, #0
   1735c:	movw	r0, #47586	; 0xb9e2
   17360:	movt	r0, #2
   17364:	beq	17394 <__assert_fail@plt+0x5308>
   17368:	add	r0, r6, #112	; 0x70
   1736c:	ldr	r2, [r0]
   17370:	ldr	r1, [r0, #4]
   17374:	orrs	r0, r2, r1
   17378:	movw	r0, #47586	; 0xb9e2
   1737c:	movt	r0, #2
   17380:	beq	17394 <__assert_fail@plt+0x5308>
   17384:	sub	lr, fp, #1024	; 0x400
   17388:	mov	r0, r2
   1738c:	sub	r2, lr, #57	; 0x39
   17390:	bl	21dd0 <__assert_fail@plt+0xfd44>
   17394:	movw	r3, #48079	; 0xbbcf
   17398:	str	r4, [sp]
   1739c:	add	r4, sp, #88	; 0x58
   173a0:	str	r0, [sp, #4]
   173a4:	mov	r1, #1
   173a8:	movw	r2, #3643	; 0xe3b
   173ac:	movt	r3, #2
   173b0:	mov	r0, r4
   173b4:	bl	11edc <__sprintf_chk@plt>
   173b8:	add	r5, r4, r0
   173bc:	movw	r0, #58245	; 0xe385
   173c0:	str	r6, [sp, #32]
   173c4:	movt	r0, #3
   173c8:	ldrb	r0, [r0]
   173cc:	cmp	r0, #1
   173d0:	bne	17490 <__assert_fail@plt+0x5404>
   173d4:	mov	r1, r6
   173d8:	movw	r4, #47586	; 0xb9e2
   173dc:	mov	r6, #0
   173e0:	ldrb	r0, [r1, #132]	; 0x84
   173e4:	movt	r4, #2
   173e8:	cmp	r0, #0
   173ec:	beq	17438 <__assert_fail@plt+0x53ac>
   173f0:	add	r0, r1, #80	; 0x50
   173f4:	movw	r1, #58780	; 0xe59c
   173f8:	mov	r4, #512	; 0x200
   173fc:	sub	lr, fp, #1024	; 0x400
   17400:	movt	r1, #3
   17404:	ldm	r0, {r0, r7}
   17408:	ldr	r3, [r1]
   1740c:	movw	r1, #58792	; 0xe5a8
   17410:	movt	r1, #3
   17414:	ldr	r2, [r1]
   17418:	ldr	r1, [r1, #4]
   1741c:	stm	sp, {r4, r6}
   17420:	str	r2, [sp, #8]
   17424:	str	r1, [sp, #12]
   17428:	mov	r1, r7
   1742c:	sub	r2, lr, #57	; 0x39
   17430:	bl	20cf8 <__assert_fail@plt+0xec6c>
   17434:	mov	r4, r0
   17438:	movw	r0, #61936	; 0xf1f0
   1743c:	mov	r1, #0
   17440:	movt	r0, #3
   17444:	ldr	r6, [r0]
   17448:	mov	r0, r4
   1744c:	bl	22318 <__assert_fail@plt+0x1028c>
   17450:	sub	r6, r6, r0
   17454:	cmp	r6, #1
   17458:	blt	17470 <__assert_fail@plt+0x53e4>
   1745c:	mov	r0, r5
   17460:	mov	r1, #32
   17464:	mov	r2, r6
   17468:	bl	11ef4 <memset@plt>
   1746c:	add	r5, r5, r6
   17470:	ldr	r6, [sp, #32]
   17474:	mov	r9, #0
   17478:	ldrb	r0, [r4], #1
   1747c:	strb	r0, [r5], #1
   17480:	cmp	r0, #0
   17484:	bne	17478 <__assert_fail@plt+0x53ec>
   17488:	mov	r0, #32
   1748c:	strb	r0, [r5, #-1]
   17490:	movw	r0, #61940	; 0xf1f4
   17494:	movt	r0, #3
   17498:	ldr	r4, [r0]
   1749c:	ldrb	r0, [r6, #132]	; 0x84
   174a0:	cmp	r0, #0
   174a4:	movw	r0, #47586	; 0xb9e2
   174a8:	movt	r0, #2
   174ac:	beq	174c4 <__assert_fail@plt+0x5438>
   174b0:	ldr	r0, [r6, #36]	; 0x24
   174b4:	sub	lr, fp, #1024	; 0x400
   174b8:	mov	r1, #0
   174bc:	sub	r2, lr, #57	; 0x39
   174c0:	bl	21dd0 <__assert_fail@plt+0xfd44>
   174c4:	movw	r3, #48066	; 0xbbc2
   174c8:	sub	lr, fp, #1024	; 0x400
   174cc:	mvn	r2, #0
   174d0:	sub	r1, lr, #69	; 0x45
   174d4:	movt	r3, #2
   174d8:	stm	sp, {r1, r4}
   174dc:	str	r0, [sp, #8]
   174e0:	mov	r0, r5
   174e4:	mov	r1, #1
   174e8:	bl	11edc <__sprintf_chk@plt>
   174ec:	mov	r4, r0
   174f0:	movw	r0, #58248	; 0xe388
   174f4:	movt	r0, #3
   174f8:	ldrb	r0, [r0]
   174fc:	cmp	r0, #0
   17500:	beq	17560 <__assert_fail@plt+0x54d4>
   17504:	ldrd	r0, [sl]
   17508:	adds	r0, r0, #2
   1750c:	adc	r1, r1, #0
   17510:	strd	r0, [sl]
   17514:	movw	r0, #58124	; 0xe30c
   17518:	movt	r0, #3
   1751c:	ldr	r6, [r0]
   17520:	ldr	r0, [r6, #20]
   17524:	ldr	r1, [r6, #24]
   17528:	cmp	r0, r1
   1752c:	bcs	1820c <__assert_fail@plt+0x6180>
   17530:	add	r1, r0, #1
   17534:	str	r1, [r6, #20]
   17538:	mov	r1, #32
   1753c:	strb	r1, [r0]
   17540:	ldr	r0, [r6, #20]
   17544:	ldr	r1, [r6, #24]
   17548:	cmp	r0, r1
   1754c:	bcs	18224 <__assert_fail@plt+0x6198>
   17550:	add	r1, r0, #1
   17554:	str	r1, [r6, #20]
   17558:	mov	r1, #32
   1755c:	strb	r1, [r0]
   17560:	movw	r0, #58776	; 0xe598
   17564:	add	r5, r5, r4
   17568:	movt	r0, #3
   1756c:	ldrb	r0, [r0]
   17570:	cmp	r0, #1
   17574:	bne	175b4 <__assert_fail@plt+0x5528>
   17578:	movw	r0, #58802	; 0xe5b2
   1757c:	movt	r0, #3
   17580:	ldrb	r0, [r0]
   17584:	cmp	r0, #1
   17588:	bne	175b4 <__assert_fail@plt+0x5528>
   1758c:	movw	r0, #58804	; 0xe5b4
   17590:	movt	r0, #3
   17594:	ldrb	r0, [r0]
   17598:	cmp	r0, #0
   1759c:	bne	175b4 <__assert_fail@plt+0x5528>
   175a0:	movw	r0, #58244	; 0xe384
   175a4:	movt	r0, #3
   175a8:	ldrb	r0, [r0]
   175ac:	cmp	r0, #1
   175b0:	bne	17aac <__assert_fail@plt+0x5a20>
   175b4:	movw	r6, #58124	; 0xe30c
   175b8:	ldr	r4, [sl]
   175bc:	ldr	r1, [sl, #4]
   175c0:	add	r0, sp, #88	; 0x58
   175c4:	movt	r6, #3
   175c8:	sub	r2, r5, r0
   175cc:	ldr	r3, [r6]
   175d0:	adds	r4, r4, r2
   175d4:	adc	r1, r1, #0
   175d8:	str	r4, [sl]
   175dc:	str	r1, [sl, #4]
   175e0:	mov	r1, #1
   175e4:	bl	11c90 <fwrite_unlocked@plt>
   175e8:	movw	r0, #58776	; 0xe598
   175ec:	movt	r0, #3
   175f0:	ldrb	r0, [r0]
   175f4:	cmp	r0, #0
   175f8:	bne	17728 <__assert_fail@plt+0x569c>
   175fc:	movw	r0, #61944	; 0xf1f8
   17600:	movw	r5, #47586	; 0xb9e2
   17604:	movt	r0, #3
   17608:	movt	r5, #2
   1760c:	ldr	r4, [r0]
   17610:	ldr	r0, [sp, #32]
   17614:	ldrb	r0, [r0, #132]	; 0x84
   17618:	cmp	r0, #0
   1761c:	beq	17650 <__assert_fail@plt+0x55c4>
   17620:	ldr	r0, [sp, #32]
   17624:	ldr	r6, [r0, #40]	; 0x28
   17628:	movw	r0, #58801	; 0xe5b1
   1762c:	movt	r0, #3
   17630:	ldrb	r0, [r0]
   17634:	cmp	r0, #0
   17638:	bne	176f8 <__assert_fail@plt+0x566c>
   1763c:	mov	r0, r6
   17640:	bl	219b0 <__assert_fail@plt+0xf924>
   17644:	mov	r5, r0
   17648:	cmp	r0, #0
   1764c:	beq	176f8 <__assert_fail@plt+0x566c>
   17650:	mov	r0, r5
   17654:	mov	r1, #0
   17658:	bl	22318 <__assert_fail@plt+0x1028c>
   1765c:	mov	r6, r0
   17660:	mov	r0, r5
   17664:	bl	11eac <strlen@plt>
   17668:	mov	r2, r0
   1766c:	ldrd	r0, [sl]
   17670:	adds	r0, r0, r2
   17674:	adc	r1, r1, #0
   17678:	strd	r0, [sl]
   1767c:	movw	r0, #58124	; 0xe30c
   17680:	mov	r1, #1
   17684:	movt	r0, #3
   17688:	ldr	r3, [r0]
   1768c:	mov	r0, r5
   17690:	bl	11c90 <fwrite_unlocked@plt>
   17694:	sub	r0, r4, r6
   17698:	movw	r6, #58124	; 0xe30c
   1769c:	mov	r4, #1
   176a0:	mov	r5, #32
   176a4:	cmp	r0, #0
   176a8:	movt	r6, #3
   176ac:	addgt	r4, r0, #1
   176b0:	ldrd	r0, [sl]
   176b4:	adds	r0, r0, #1
   176b8:	adc	r1, r1, #0
   176bc:	strd	r0, [sl]
   176c0:	ldr	r0, [r6]
   176c4:	ldr	r1, [r0, #20]
   176c8:	ldr	r2, [r0, #24]
   176cc:	cmp	r1, r2
   176d0:	bcs	176ec <__assert_fail@plt+0x5660>
   176d4:	add	r2, r1, #1
   176d8:	str	r2, [r0, #20]
   176dc:	strb	r5, [r1]
   176e0:	subs	r4, r4, #1
   176e4:	bne	176b0 <__assert_fail@plt+0x5624>
   176e8:	b	17728 <__assert_fail@plt+0x569c>
   176ec:	mov	r1, #32
   176f0:	bl	11f54 <__overflow@plt>
   176f4:	b	176e0 <__assert_fail@plt+0x5654>
   176f8:	movw	r1, #48084	; 0xbbd4
   176fc:	mov	r0, #1
   17700:	mov	r2, r4
   17704:	stm	sp, {r6, r9}
   17708:	movt	r1, #2
   1770c:	bl	11f00 <__printf_chk@plt>
   17710:	ldrd	r2, [sl]
   17714:	movw	r6, #58124	; 0xe30c
   17718:	movt	r6, #3
   1771c:	adds	r2, r2, r0
   17720:	adc	r3, r3, r0, asr #31
   17724:	strd	r2, [sl]
   17728:	movw	r0, #58802	; 0xe5b2
   1772c:	movt	r0, #3
   17730:	ldrb	r0, [r0]
   17734:	cmp	r0, #0
   17738:	bne	17868 <__assert_fail@plt+0x57dc>
   1773c:	movw	r0, #61948	; 0xf1fc
   17740:	movw	r5, #47586	; 0xb9e2
   17744:	movt	r0, #3
   17748:	movt	r5, #2
   1774c:	ldr	r4, [r0]
   17750:	ldr	r0, [sp, #32]
   17754:	ldrb	r0, [r0, #132]	; 0x84
   17758:	cmp	r0, #0
   1775c:	beq	17790 <__assert_fail@plt+0x5704>
   17760:	ldr	r0, [sp, #32]
   17764:	ldr	r6, [r0, #44]	; 0x2c
   17768:	movw	r0, #58801	; 0xe5b1
   1776c:	movt	r0, #3
   17770:	ldrb	r0, [r0]
   17774:	cmp	r0, #0
   17778:	bne	17838 <__assert_fail@plt+0x57ac>
   1777c:	mov	r0, r6
   17780:	bl	21b60 <__assert_fail@plt+0xfad4>
   17784:	mov	r5, r0
   17788:	cmp	r0, #0
   1778c:	beq	17838 <__assert_fail@plt+0x57ac>
   17790:	mov	r0, r5
   17794:	mov	r1, #0
   17798:	bl	22318 <__assert_fail@plt+0x1028c>
   1779c:	mov	r6, r0
   177a0:	mov	r0, r5
   177a4:	bl	11eac <strlen@plt>
   177a8:	mov	r2, r0
   177ac:	ldrd	r0, [sl]
   177b0:	adds	r0, r0, r2
   177b4:	adc	r1, r1, #0
   177b8:	strd	r0, [sl]
   177bc:	movw	r0, #58124	; 0xe30c
   177c0:	mov	r1, #1
   177c4:	movt	r0, #3
   177c8:	ldr	r3, [r0]
   177cc:	mov	r0, r5
   177d0:	bl	11c90 <fwrite_unlocked@plt>
   177d4:	sub	r0, r4, r6
   177d8:	movw	r6, #58124	; 0xe30c
   177dc:	mov	r4, #1
   177e0:	mov	r5, #32
   177e4:	cmp	r0, #0
   177e8:	movt	r6, #3
   177ec:	addgt	r4, r0, #1
   177f0:	ldrd	r0, [sl]
   177f4:	adds	r0, r0, #1
   177f8:	adc	r1, r1, #0
   177fc:	strd	r0, [sl]
   17800:	ldr	r0, [r6]
   17804:	ldr	r1, [r0, #20]
   17808:	ldr	r2, [r0, #24]
   1780c:	cmp	r1, r2
   17810:	bcs	1782c <__assert_fail@plt+0x57a0>
   17814:	add	r2, r1, #1
   17818:	str	r2, [r0, #20]
   1781c:	strb	r5, [r1]
   17820:	subs	r4, r4, #1
   17824:	bne	177f0 <__assert_fail@plt+0x5764>
   17828:	b	17868 <__assert_fail@plt+0x57dc>
   1782c:	mov	r1, #32
   17830:	bl	11f54 <__overflow@plt>
   17834:	b	17820 <__assert_fail@plt+0x5794>
   17838:	movw	r1, #48084	; 0xbbd4
   1783c:	mov	r0, #1
   17840:	mov	r2, r4
   17844:	stm	sp, {r6, r9}
   17848:	movt	r1, #2
   1784c:	bl	11f00 <__printf_chk@plt>
   17850:	ldrd	r2, [sl]
   17854:	movw	r6, #58124	; 0xe30c
   17858:	movt	r6, #3
   1785c:	adds	r2, r2, r0
   17860:	adc	r3, r3, r0, asr #31
   17864:	strd	r2, [sl]
   17868:	movw	r0, #58804	; 0xe5b4
   1786c:	movt	r0, #3
   17870:	ldrb	r0, [r0]
   17874:	cmp	r0, #1
   17878:	bne	179a8 <__assert_fail@plt+0x591c>
   1787c:	movw	r0, #61952	; 0xf200
   17880:	movw	r5, #47586	; 0xb9e2
   17884:	movt	r0, #3
   17888:	movt	r5, #2
   1788c:	ldr	r4, [r0]
   17890:	ldr	r0, [sp, #32]
   17894:	ldrb	r0, [r0, #132]	; 0x84
   17898:	cmp	r0, #0
   1789c:	beq	178d0 <__assert_fail@plt+0x5844>
   178a0:	ldr	r0, [sp, #32]
   178a4:	ldr	r6, [r0, #40]	; 0x28
   178a8:	movw	r0, #58801	; 0xe5b1
   178ac:	movt	r0, #3
   178b0:	ldrb	r0, [r0]
   178b4:	cmp	r0, #0
   178b8:	bne	17978 <__assert_fail@plt+0x58ec>
   178bc:	mov	r0, r6
   178c0:	bl	219b0 <__assert_fail@plt+0xf924>
   178c4:	mov	r5, r0
   178c8:	cmp	r0, #0
   178cc:	beq	17978 <__assert_fail@plt+0x58ec>
   178d0:	mov	r0, r5
   178d4:	mov	r1, #0
   178d8:	bl	22318 <__assert_fail@plt+0x1028c>
   178dc:	mov	r6, r0
   178e0:	mov	r0, r5
   178e4:	bl	11eac <strlen@plt>
   178e8:	mov	r2, r0
   178ec:	ldrd	r0, [sl]
   178f0:	adds	r0, r0, r2
   178f4:	adc	r1, r1, #0
   178f8:	strd	r0, [sl]
   178fc:	movw	r0, #58124	; 0xe30c
   17900:	mov	r1, #1
   17904:	movt	r0, #3
   17908:	ldr	r3, [r0]
   1790c:	mov	r0, r5
   17910:	bl	11c90 <fwrite_unlocked@plt>
   17914:	sub	r0, r4, r6
   17918:	movw	r6, #58124	; 0xe30c
   1791c:	mov	r4, #1
   17920:	mov	r5, #32
   17924:	cmp	r0, #0
   17928:	movt	r6, #3
   1792c:	addgt	r4, r0, #1
   17930:	ldrd	r0, [sl]
   17934:	adds	r0, r0, #1
   17938:	adc	r1, r1, #0
   1793c:	strd	r0, [sl]
   17940:	ldr	r0, [r6]
   17944:	ldr	r1, [r0, #20]
   17948:	ldr	r2, [r0, #24]
   1794c:	cmp	r1, r2
   17950:	bcs	1796c <__assert_fail@plt+0x58e0>
   17954:	add	r2, r1, #1
   17958:	str	r2, [r0, #20]
   1795c:	strb	r5, [r1]
   17960:	subs	r4, r4, #1
   17964:	bne	17930 <__assert_fail@plt+0x58a4>
   17968:	b	179a8 <__assert_fail@plt+0x591c>
   1796c:	mov	r1, #32
   17970:	bl	11f54 <__overflow@plt>
   17974:	b	17960 <__assert_fail@plt+0x58d4>
   17978:	movw	r1, #48084	; 0xbbd4
   1797c:	mov	r0, #1
   17980:	mov	r2, r4
   17984:	stm	sp, {r6, r9}
   17988:	movt	r1, #2
   1798c:	bl	11f00 <__printf_chk@plt>
   17990:	ldrd	r2, [sl]
   17994:	movw	r6, #58124	; 0xe30c
   17998:	movt	r6, #3
   1799c:	adds	r2, r2, r0
   179a0:	adc	r3, r3, r0, asr #31
   179a4:	strd	r2, [sl]
   179a8:	movw	r0, #58244	; 0xe384
   179ac:	add	r5, sp, #88	; 0x58
   179b0:	movt	r0, #3
   179b4:	ldrb	r0, [r0]
   179b8:	cmp	r0, #1
   179bc:	bne	17aac <__assert_fail@plt+0x5a20>
   179c0:	movw	r0, #61956	; 0xf204
   179c4:	movt	r0, #3
   179c8:	ldr	r4, [r0]
   179cc:	ldr	r0, [sp, #32]
   179d0:	ldr	r5, [r0, #128]	; 0x80
   179d4:	cmp	r5, #0
   179d8:	beq	17a7c <__assert_fail@plt+0x59f0>
   179dc:	mov	r0, r5
   179e0:	mov	r1, #0
   179e4:	bl	22318 <__assert_fail@plt+0x1028c>
   179e8:	mov	r8, r0
   179ec:	mov	r0, r5
   179f0:	bl	11eac <strlen@plt>
   179f4:	mov	r2, r0
   179f8:	ldrd	r0, [sl]
   179fc:	ldr	r3, [r6]
   17a00:	adds	r0, r0, r2
   17a04:	adc	r1, r1, #0
   17a08:	strd	r0, [sl]
   17a0c:	mov	r0, r5
   17a10:	mov	r1, #1
   17a14:	bl	11c90 <fwrite_unlocked@plt>
   17a18:	sub	r0, r4, r8
   17a1c:	movw	r6, #58124	; 0xe30c
   17a20:	mov	r4, #1
   17a24:	mov	r5, #32
   17a28:	cmp	r0, #0
   17a2c:	movt	r6, #3
   17a30:	addgt	r4, r0, #1
   17a34:	ldrd	r0, [sl]
   17a38:	adds	r0, r0, #1
   17a3c:	adc	r1, r1, #0
   17a40:	strd	r0, [sl]
   17a44:	ldr	r0, [r6]
   17a48:	ldr	r1, [r0, #20]
   17a4c:	ldr	r2, [r0, #24]
   17a50:	cmp	r1, r2
   17a54:	bcs	17a70 <__assert_fail@plt+0x59e4>
   17a58:	add	r2, r1, #1
   17a5c:	str	r2, [r0, #20]
   17a60:	strb	r5, [r1]
   17a64:	subs	r4, r4, #1
   17a68:	bne	17a34 <__assert_fail@plt+0x59a8>
   17a6c:	b	17aa8 <__assert_fail@plt+0x5a1c>
   17a70:	mov	r1, #32
   17a74:	bl	11f54 <__overflow@plt>
   17a78:	b	17a64 <__assert_fail@plt+0x59d8>
   17a7c:	movw	r1, #48084	; 0xbbd4
   17a80:	mov	r0, #1
   17a84:	mov	r2, r4
   17a88:	str	r9, [sp]
   17a8c:	str	r9, [sp, #4]
   17a90:	movt	r1, #2
   17a94:	bl	11f00 <__printf_chk@plt>
   17a98:	ldrd	r2, [sl]
   17a9c:	adds	r2, r2, r0
   17aa0:	adc	r3, r3, r0, asr #31
   17aa4:	strd	r2, [sl]
   17aa8:	add	r5, sp, #88	; 0x58
   17aac:	ldr	r4, [sp, #32]
   17ab0:	ldrb	r0, [r4, #132]	; 0x84
   17ab4:	cmp	r0, #0
   17ab8:	beq	17b94 <__assert_fail@plt+0x5b08>
   17abc:	ldr	r0, [r4, #32]
   17ac0:	and	r0, r0, #45056	; 0xb000
   17ac4:	orr	r0, r0, #16384	; 0x4000
   17ac8:	cmp	r0, #24576	; 0x6000
   17acc:	bne	17ba0 <__assert_fail@plt+0x5b14>
   17ad0:	add	r6, r4, #48	; 0x30
   17ad4:	sub	lr, fp, #1024	; 0x400
   17ad8:	ldrd	r0, [r6]
   17adc:	sub	r2, lr, #57	; 0x39
   17ae0:	lsr	r1, r1, #12
   17ae4:	lsr	r0, r0, #8
   17ae8:	bfi	r0, r1, #12, #20
   17aec:	movw	r1, #61960	; 0xf208
   17af0:	movt	r1, #3
   17af4:	ldr	r7, [r1]
   17af8:	movw	r1, #61964	; 0xf20c
   17afc:	movt	r1, #3
   17b00:	ldr	r9, [r1]
   17b04:	movw	r1, #61968	; 0xf210
   17b08:	movt	r1, #3
   17b0c:	ldr	r8, [r1]
   17b10:	mov	r1, #0
   17b14:	bl	21dd0 <__assert_fail@plt+0xfd44>
   17b18:	str	r0, [sp, #20]
   17b1c:	movw	r1, #61964	; 0xf20c
   17b20:	ldrd	r2, [r6]
   17b24:	movt	r1, #3
   17b28:	ldr	r6, [r1]
   17b2c:	mov	r1, #0
   17b30:	lsr	r0, r2, #12
   17b34:	orr	r0, r0, r3, lsl #20
   17b38:	bfi	r0, r2, #0, #8
   17b3c:	sub	r2, fp, #80	; 0x50
   17b40:	bl	21dd0 <__assert_fail@plt+0xfd44>
   17b44:	sub	r1, r8, #2
   17b48:	movw	r3, #48074	; 0xbbca
   17b4c:	sub	r2, r1, r7
   17b50:	movt	r3, #2
   17b54:	sub	r2, r2, r9
   17b58:	cmp	r2, #0
   17b5c:	mvn	r2, #0
   17b60:	subgt	r7, r1, r9
   17b64:	str	r7, [sp]
   17b68:	ldr	r1, [sp, #20]
   17b6c:	stmib	sp, {r1, r6}
   17b70:	str	r0, [sp, #12]
   17b74:	mov	r0, r5
   17b78:	mov	r1, #1
   17b7c:	bl	11edc <__sprintf_chk@plt>
   17b80:	movw	r6, #58124	; 0xe30c
   17b84:	add	r5, r5, r0
   17b88:	mov	r9, #0
   17b8c:	movt	r6, #3
   17b90:	b	17c48 <__assert_fail@plt+0x5bbc>
   17b94:	movw	r4, #47586	; 0xb9e2
   17b98:	movt	r4, #2
   17b9c:	b	17bec <__assert_fail@plt+0x5b60>
   17ba0:	movw	r2, #58784	; 0xe5a0
   17ba4:	add	r0, r4, #64	; 0x40
   17ba8:	mov	r6, #1
   17bac:	sub	lr, fp, #1024	; 0x400
   17bb0:	mov	r9, #0
   17bb4:	movt	r2, #3
   17bb8:	ldrd	r0, [r0]
   17bbc:	ldr	r3, [r2]
   17bc0:	movw	r2, #57992	; 0xe288
   17bc4:	movt	r2, #3
   17bc8:	ldm	r2, {r2, r7}
   17bcc:	str	r6, [sp]
   17bd0:	mov	r6, #0
   17bd4:	str	r7, [sp, #12]
   17bd8:	str	r6, [sp, #4]
   17bdc:	str	r2, [sp, #8]
   17be0:	sub	r2, lr, #57	; 0x39
   17be4:	bl	20cf8 <__assert_fail@plt+0xec6c>
   17be8:	mov	r4, r0
   17bec:	movw	r0, #61968	; 0xf210
   17bf0:	mov	r1, #0
   17bf4:	movt	r0, #3
   17bf8:	ldr	r6, [r0]
   17bfc:	mov	r0, r4
   17c00:	bl	22318 <__assert_fail@plt+0x1028c>
   17c04:	sub	r6, r6, r0
   17c08:	cmp	r6, #1
   17c0c:	blt	17c24 <__assert_fail@plt+0x5b98>
   17c10:	mov	r0, r5
   17c14:	mov	r1, #32
   17c18:	mov	r2, r6
   17c1c:	bl	11ef4 <memset@plt>
   17c20:	add	r5, r5, r6
   17c24:	movw	r6, #58124	; 0xe30c
   17c28:	movt	r6, #3
   17c2c:	ldrb	r0, [r4], #1
   17c30:	strb	r0, [r5], #1
   17c34:	cmp	r0, #0
   17c38:	bne	17c2c <__assert_fail@plt+0x5ba0>
   17c3c:	ldr	r4, [sp, #32]
   17c40:	mov	r0, #32
   17c44:	strb	r0, [r5, #-1]
   17c48:	mov	r0, #1
   17c4c:	strb	r0, [r5]
   17c50:	ldr	r0, [sp, #24]
   17c54:	eor	r8, r0, #1
   17c58:	ldrb	r0, [r4, #132]	; 0x84
   17c5c:	cmp	r0, #0
   17c60:	beq	17dc4 <__assert_fail@plt+0x5d38>
   17c64:	cmp	r8, #0
   17c68:	bne	17dc4 <__assert_fail@plt+0x5d38>
   17c6c:	movw	r0, #58236	; 0xe37c
   17c70:	add	r1, sp, #80	; 0x50
   17c74:	add	r2, sp, #36	; 0x24
   17c78:	movt	r0, #3
   17c7c:	ldr	r0, [r0]
   17c80:	bl	26b38 <_obstack_memory_used@@Base+0x224c>
   17c84:	cmp	r0, #0
   17c88:	beq	17db8 <__assert_fail@plt+0x5d2c>
   17c8c:	movw	r0, #58148	; 0xe324
   17c90:	ldr	r2, [sp, #80]	; 0x50
   17c94:	ldr	ip, [sp, #84]	; 0x54
   17c98:	mov	r7, #0
   17c9c:	mov	r6, #0
   17ca0:	movt	r0, #3
   17ca4:	ldm	r0, {r1, r3}
   17ca8:	cmp	r1, r2
   17cac:	movwgt	r7, #1
   17cb0:	sublt	r7, r7, #1
   17cb4:	cmp	r3, ip
   17cb8:	movwgt	r6, #1
   17cbc:	sublt	r6, r6, #1
   17cc0:	add	r7, r6, r7, lsl #1
   17cc4:	cmn	r7, #1
   17cc8:	bgt	17ce8 <__assert_fail@plt+0x5c5c>
   17ccc:	movw	r4, #58148	; 0xe324
   17cd0:	movt	r4, #3
   17cd4:	mov	r0, r4
   17cd8:	bl	1f8c4 <__assert_fail@plt+0xd838>
   17cdc:	ldr	r2, [sp, #80]	; 0x50
   17ce0:	ldr	ip, [sp, #84]	; 0x54
   17ce4:	ldm	r4, {r1, r3}
   17ce8:	movw	r0, #15700	; 0x3d54
   17cec:	mov	r6, #0
   17cf0:	mov	r4, #0
   17cf4:	movt	r0, #65295	; 0xff0f
   17cf8:	add	r7, r1, r0
   17cfc:	cmp	r7, r2
   17d00:	mov	r7, #0
   17d04:	movwgt	r7, #1
   17d08:	sublt	r7, r7, #1
   17d0c:	cmp	r3, ip
   17d10:	mov	r3, #0
   17d14:	movwlt	r3, #1
   17d18:	movwgt	r6, #1
   17d1c:	sub	r0, r6, r3
   17d20:	add	r0, r0, r7, lsl #1
   17d24:	movw	r7, #58236	; 0xe37c
   17d28:	movt	r7, #3
   17d2c:	cmn	r0, #1
   17d30:	bgt	17d50 <__assert_fail@plt+0x5cc4>
   17d34:	cmp	r2, r1
   17d38:	mov	r0, #0
   17d3c:	sub	r1, r3, r6
   17d40:	movwgt	r0, #1
   17d44:	sublt	r0, r0, #1
   17d48:	add	r0, r1, r0, lsl #1
   17d4c:	lsr	r4, r0, #31
   17d50:	movw	r0, #61908	; 0xf1d4
   17d54:	ldr	r1, [r7]
   17d58:	mov	r9, #0
   17d5c:	movt	r0, #3
   17d60:	ldrb	r0, [r0]
   17d64:	cmp	r0, #1
   17d68:	bne	17d88 <__assert_fail@plt+0x5cfc>
   17d6c:	movw	r2, #58836	; 0xe5d4
   17d70:	add	r0, r4, r4, lsl #1
   17d74:	movt	r2, #3
   17d78:	add	r0, r2, r0, lsl #9
   17d7c:	ldr	r2, [sp, #52]	; 0x34
   17d80:	add	r2, r0, r2, lsl #7
   17d84:	b	17d94 <__assert_fail@plt+0x5d08>
   17d88:	movw	r0, #58000	; 0xe290
   17d8c:	movt	r0, #3
   17d90:	ldr	r2, [r0, r4, lsl #2]
   17d94:	movw	r6, #58124	; 0xe30c
   17d98:	stm	sp, {r1, ip}
   17d9c:	mov	r0, r5
   17da0:	movw	r1, #1001	; 0x3e9
   17da4:	add	r3, sp, #36	; 0x24
   17da8:	movt	r6, #3
   17dac:	bl	22930 <__assert_fail@plt+0x108a4>
   17db0:	cmp	r0, #0
   17db4:	bne	17f08 <__assert_fail@plt+0x5e7c>
   17db8:	ldrb	r0, [r5]
   17dbc:	cmp	r0, #0
   17dc0:	beq	17f04 <__assert_fail@plt+0x5e78>
   17dc4:	movw	r0, #58012	; 0xe29c
   17dc8:	movt	r0, #3
   17dcc:	ldr	r4, [r0]
   17dd0:	cmn	r4, #1
   17dd4:	ble	17e34 <__assert_fail@plt+0x5da8>
   17dd8:	ldr	r0, [sp, #32]
   17ddc:	ldrb	r0, [r0, #132]	; 0x84
   17de0:	clz	r0, r0
   17de4:	lsr	r0, r0, #5
   17de8:	orrs	r0, r0, r8
   17dec:	movw	r0, #47586	; 0xb9e2
   17df0:	movt	r0, #2
   17df4:	bne	17e0c <__assert_fail@plt+0x5d80>
   17df8:	ldr	r0, [sp, #80]	; 0x50
   17dfc:	sub	lr, fp, #1024	; 0x400
   17e00:	sub	r2, lr, #57	; 0x39
   17e04:	asr	r1, r0, #31
   17e08:	bl	21d10 <__assert_fail@plt+0xfc84>
   17e0c:	movw	r3, #48079	; 0xbbcf
   17e10:	str	r0, [sp, #4]
   17e14:	mov	r0, r5
   17e18:	mov	r1, #1
   17e1c:	mvn	r2, #0
   17e20:	str	r4, [sp]
   17e24:	movt	r3, #2
   17e28:	bl	11edc <__sprintf_chk@plt>
   17e2c:	add	r1, r5, r0
   17e30:	b	17f14 <__assert_fail@plt+0x5e88>
   17e34:	movw	r7, #58236	; 0xe37c
   17e38:	sub	r4, fp, #80	; 0x50
   17e3c:	sub	r1, fp, #36	; 0x24
   17e40:	str	r9, [fp, #-36]	; 0xffffffdc
   17e44:	movt	r7, #3
   17e48:	mov	r2, r4
   17e4c:	ldr	r0, [r7]
   17e50:	bl	26b38 <_obstack_memory_used@@Base+0x224c>
   17e54:	cmp	r0, #0
   17e58:	beq	17edc <__assert_fail@plt+0x5e50>
   17e5c:	movw	r0, #58000	; 0xe290
   17e60:	ldr	r3, [fp, #-64]	; 0xffffffc0
   17e64:	ldr	r1, [r7]
   17e68:	sub	lr, fp, #1024	; 0x400
   17e6c:	movt	r0, #3
   17e70:	ldr	r2, [r0]
   17e74:	movw	r0, #61908	; 0xf1d4
   17e78:	movt	r0, #3
   17e7c:	ldrb	r0, [r0]
   17e80:	stm	sp, {r1, r9}
   17e84:	movw	r1, #1001	; 0x3e9
   17e88:	cmp	r0, #0
   17e8c:	movw	r0, #58836	; 0xe5d4
   17e90:	movt	r0, #3
   17e94:	addne	r2, r0, r3, lsl #7
   17e98:	sub	r0, lr, #57	; 0x39
   17e9c:	mov	r3, r4
   17ea0:	bl	22930 <__assert_fail@plt+0x108a4>
   17ea4:	cmp	r0, #0
   17ea8:	beq	17edc <__assert_fail@plt+0x5e50>
   17eac:	sub	lr, fp, #1024	; 0x400
   17eb0:	mov	r1, r0
   17eb4:	mov	r2, #0
   17eb8:	sub	r0, lr, #57	; 0x39
   17ebc:	bl	22340 <__assert_fail@plt+0x102b4>
   17ec0:	mov	r4, r0
   17ec4:	movw	r0, #58012	; 0xe29c
   17ec8:	movt	r0, #3
   17ecc:	str	r4, [r0]
   17ed0:	cmn	r4, #1
   17ed4:	bgt	17dd8 <__assert_fail@plt+0x5d4c>
   17ed8:	b	17ef0 <__assert_fail@plt+0x5e64>
   17edc:	movw	r0, #58012	; 0xe29c
   17ee0:	movt	r0, #3
   17ee4:	ldr	r4, [r0]
   17ee8:	cmn	r4, #1
   17eec:	bgt	17dd8 <__assert_fail@plt+0x5d4c>
   17ef0:	movw	r0, #58012	; 0xe29c
   17ef4:	mov	r4, #0
   17ef8:	movt	r0, #3
   17efc:	str	r4, [r0]
   17f00:	b	17dd8 <__assert_fail@plt+0x5d4c>
   17f04:	mov	r0, #0
   17f08:	mov	r1, #32
   17f0c:	strb	r1, [r5, r0]!
   17f10:	add	r1, r5, #1
   17f14:	add	r0, sp, #88	; 0x58
   17f18:	ldr	r2, [sl]
   17f1c:	ldr	r3, [r6]
   17f20:	sub	r5, r1, r0
   17f24:	ldr	r1, [sl, #4]
   17f28:	adds	r2, r2, r5
   17f2c:	adc	r1, r1, #0
   17f30:	str	r2, [sl]
   17f34:	mov	r2, r5
   17f38:	str	r1, [sl, #4]
   17f3c:	mov	r1, #1
   17f40:	bl	11c90 <fwrite_unlocked@plt>
   17f44:	ldr	r4, [sp, #32]
   17f48:	movw	r2, #58252	; 0xe38c
   17f4c:	mov	r1, #0
   17f50:	mov	r3, r5
   17f54:	movt	r2, #3
   17f58:	mov	r0, r4
   17f5c:	bl	1cf20 <__assert_fail@plt+0xae94>
   17f60:	mov	r6, r0
   17f64:	ldr	r0, [r4, #120]	; 0x78
   17f68:	cmp	r0, #6
   17f6c:	bne	1806c <__assert_fail@plt+0x5fe0>
   17f70:	ldr	r0, [r4, #4]
   17f74:	cmp	r0, #0
   17f78:	beq	180fc <__assert_fail@plt+0x6070>
   17f7c:	ldrd	r0, [sl]
   17f80:	adds	r0, r0, #4
   17f84:	adc	r1, r1, #0
   17f88:	strd	r0, [sl]
   17f8c:	movw	r0, #58124	; 0xe30c
   17f90:	movt	r0, #3
   17f94:	ldr	r4, [r0]
   17f98:	ldr	r0, [r4, #20]
   17f9c:	ldr	r1, [r4, #24]
   17fa0:	cmp	r0, r1
   17fa4:	bcs	18234 <__assert_fail@plt+0x61a8>
   17fa8:	add	r1, r0, #1
   17fac:	str	r1, [r4, #20]
   17fb0:	mov	r1, #32
   17fb4:	strb	r1, [r0]
   17fb8:	ldr	r0, [r4, #20]
   17fbc:	ldr	r1, [r4, #24]
   17fc0:	cmp	r0, r1
   17fc4:	bcs	1824c <__assert_fail@plt+0x61c0>
   17fc8:	add	r1, r0, #1
   17fcc:	str	r1, [r4, #20]
   17fd0:	mov	r1, #45	; 0x2d
   17fd4:	strb	r1, [r0]
   17fd8:	ldr	r0, [r4, #20]
   17fdc:	ldr	r1, [r4, #24]
   17fe0:	cmp	r0, r1
   17fe4:	bcs	18264 <__assert_fail@plt+0x61d8>
   17fe8:	add	r1, r0, #1
   17fec:	str	r1, [r4, #20]
   17ff0:	mov	r1, #62	; 0x3e
   17ff4:	strb	r1, [r0]
   17ff8:	ldr	r0, [r4, #20]
   17ffc:	ldr	r1, [r4, #24]
   18000:	cmp	r0, r1
   18004:	bcs	1827c <__assert_fail@plt+0x61f0>
   18008:	add	r1, r0, #1
   1800c:	str	r1, [r4, #20]
   18010:	mov	r1, #32
   18014:	strb	r1, [r0]
   18018:	add	r0, r5, r6
   1801c:	mov	r1, #1
   18020:	mov	r2, #0
   18024:	add	r3, r0, #4
   18028:	ldr	r0, [sp, #32]
   1802c:	bl	1cf20 <__assert_fail@plt+0xae94>
   18030:	movw	r0, #58180	; 0xe344
   18034:	movt	r0, #3
   18038:	ldr	r1, [r0]
   1803c:	cmp	r1, #0
   18040:	beq	180fc <__assert_fail@plt+0x6070>
   18044:	ldr	r0, [sp, #32]
   18048:	ldr	r2, [r0, #124]	; 0x7c
   1804c:	and	r0, r2, #61440	; 0xf000
   18050:	cmp	r0, #16384	; 0x4000
   18054:	beq	180c0 <__assert_fail@plt+0x6034>
   18058:	cmp	r0, #32768	; 0x8000
   1805c:	bne	181b8 <__assert_fail@plt+0x612c>
   18060:	cmp	r1, #3
   18064:	beq	180b0 <__assert_fail@plt+0x6024>
   18068:	b	180fc <__assert_fail@plt+0x6070>
   1806c:	movw	r1, #58180	; 0xe344
   18070:	movt	r1, #3
   18074:	ldr	r3, [r1]
   18078:	cmp	r3, #0
   1807c:	beq	180fc <__assert_fail@plt+0x6070>
   18080:	ldr	r1, [sp, #32]
   18084:	ldrb	r6, [r1, #132]	; 0x84
   18088:	ldr	r2, [r1, #32]
   1808c:	cmp	r6, #0
   18090:	beq	1816c <__assert_fail@plt+0x60e0>
   18094:	and	r1, r2, #61440	; 0xf000
   18098:	cmp	r1, #16384	; 0x4000
   1809c:	beq	180c0 <__assert_fail@plt+0x6034>
   180a0:	cmp	r1, #32768	; 0x8000
   180a4:	bne	18188 <__assert_fail@plt+0x60fc>
   180a8:	cmp	r3, #3
   180ac:	bne	180fc <__assert_fail@plt+0x6070>
   180b0:	ands	r0, r2, #73	; 0x49
   180b4:	mov	r1, #42	; 0x2a
   180b8:	bne	180c4 <__assert_fail@plt+0x6038>
   180bc:	b	180fc <__assert_fail@plt+0x6070>
   180c0:	mov	r1, #47	; 0x2f
   180c4:	ldm	sl, {r0, r3}
   180c8:	adds	r0, r0, #1
   180cc:	adc	r3, r3, #0
   180d0:	stm	sl, {r0, r3}
   180d4:	movw	r0, #58124	; 0xe30c
   180d8:	movt	r0, #3
   180dc:	ldr	r0, [r0]
   180e0:	ldr	r2, [r0, #20]
   180e4:	ldr	r3, [r0, #24]
   180e8:	cmp	r2, r3
   180ec:	bcs	1828c <__assert_fail@plt+0x6200>
   180f0:	add	r3, r2, #1
   180f4:	str	r3, [r0, #20]
   180f8:	strb	r1, [r2]
   180fc:	ldrd	r0, [sl]
   18100:	adds	r0, r0, #1
   18104:	adc	r1, r1, #0
   18108:	strd	r0, [sl]
   1810c:	movw	r0, #58812	; 0xe5bc
   18110:	mov	r1, #10
   18114:	movt	r0, #3
   18118:	ldrb	r0, [r0]
   1811c:	cmp	r0, #0
   18120:	movw	r0, #58124	; 0xe30c
   18124:	movt	r0, #3
   18128:	movwne	r1, #0
   1812c:	ldr	r0, [r0]
   18130:	ldr	r2, [r0, #20]
   18134:	ldr	r3, [r0, #24]
   18138:	cmp	r2, r3
   1813c:	bcs	18204 <__assert_fail@plt+0x6178>
   18140:	add	r3, r2, #1
   18144:	str	r3, [r0, #20]
   18148:	strb	r1, [r2]
   1814c:	movw	r0, #58356	; 0xe3f4
   18150:	ldr	r5, [sp, #28]
   18154:	movt	r0, #3
   18158:	ldr	r0, [r0]
   1815c:	add	r5, r5, #1
   18160:	cmp	r5, r0
   18164:	bcc	17184 <__assert_fail@plt+0x50f8>
   18168:	b	1857c <__assert_fail@plt+0x64f0>
   1816c:	mov	r1, #47	; 0x2f
   18170:	cmp	r0, #3
   18174:	beq	180c4 <__assert_fail@plt+0x6038>
   18178:	cmp	r0, #5
   1817c:	beq	180fc <__assert_fail@plt+0x6070>
   18180:	cmp	r0, #9
   18184:	beq	180c4 <__assert_fail@plt+0x6038>
   18188:	cmp	r3, #1
   1818c:	beq	180fc <__assert_fail@plt+0x6070>
   18190:	cmp	r6, #0
   18194:	beq	181dc <__assert_fail@plt+0x6150>
   18198:	and	r0, r2, #61440	; 0xf000
   1819c:	cmp	r0, #4096	; 0x1000
   181a0:	beq	181f4 <__assert_fail@plt+0x6168>
   181a4:	cmp	r0, #40960	; 0xa000
   181a8:	beq	181fc <__assert_fail@plt+0x6170>
   181ac:	cmp	r0, #49152	; 0xc000
   181b0:	bne	180fc <__assert_fail@plt+0x6070>
   181b4:	b	181ec <__assert_fail@plt+0x6160>
   181b8:	cmp	r1, #1
   181bc:	beq	180fc <__assert_fail@plt+0x6070>
   181c0:	cmp	r0, #49152	; 0xc000
   181c4:	beq	181ec <__assert_fail@plt+0x6160>
   181c8:	cmp	r0, #40960	; 0xa000
   181cc:	beq	181fc <__assert_fail@plt+0x6170>
   181d0:	cmp	r0, #4096	; 0x1000
   181d4:	bne	180fc <__assert_fail@plt+0x6070>
   181d8:	b	181f4 <__assert_fail@plt+0x6168>
   181dc:	cmp	r0, #1
   181e0:	beq	181f4 <__assert_fail@plt+0x6168>
   181e4:	cmp	r0, #7
   181e8:	bne	180fc <__assert_fail@plt+0x6070>
   181ec:	mov	r1, #61	; 0x3d
   181f0:	b	180c4 <__assert_fail@plt+0x6038>
   181f4:	mov	r1, #124	; 0x7c
   181f8:	b	180c4 <__assert_fail@plt+0x6038>
   181fc:	mov	r1, #64	; 0x40
   18200:	b	180c4 <__assert_fail@plt+0x6038>
   18204:	bl	11f54 <__overflow@plt>
   18208:	b	1814c <__assert_fail@plt+0x60c0>
   1820c:	mov	r0, r6
   18210:	mov	r1, #32
   18214:	bl	11f54 <__overflow@plt>
   18218:	cmn	r0, #1
   1821c:	bne	17540 <__assert_fail@plt+0x54b4>
   18220:	b	17560 <__assert_fail@plt+0x54d4>
   18224:	mov	r0, r6
   18228:	mov	r1, #32
   1822c:	bl	11f54 <__overflow@plt>
   18230:	b	17560 <__assert_fail@plt+0x54d4>
   18234:	mov	r0, r4
   18238:	mov	r1, #32
   1823c:	bl	11f54 <__overflow@plt>
   18240:	cmn	r0, #1
   18244:	bne	17fb8 <__assert_fail@plt+0x5f2c>
   18248:	b	18018 <__assert_fail@plt+0x5f8c>
   1824c:	mov	r0, r4
   18250:	mov	r1, #45	; 0x2d
   18254:	bl	11f54 <__overflow@plt>
   18258:	cmn	r0, #1
   1825c:	bne	17fd8 <__assert_fail@plt+0x5f4c>
   18260:	b	18018 <__assert_fail@plt+0x5f8c>
   18264:	mov	r0, r4
   18268:	mov	r1, #62	; 0x3e
   1826c:	bl	11f54 <__overflow@plt>
   18270:	cmn	r0, #1
   18274:	bne	17ff8 <__assert_fail@plt+0x5f6c>
   18278:	b	18018 <__assert_fail@plt+0x5f8c>
   1827c:	mov	r0, r4
   18280:	mov	r1, #32
   18284:	bl	11f54 <__overflow@plt>
   18288:	b	18018 <__assert_fail@plt+0x5f8c>
   1828c:	bl	11f54 <__overflow@plt>
   18290:	b	180fc <__assert_fail@plt+0x6070>
   18294:	mov	r0, #44	; 0x2c
   18298:	b	18794 <__assert_fail@plt+0x6708>
   1829c:	movw	r8, #58356	; 0xe3f4
   182a0:	movt	r8, #3
   182a4:	ldr	r0, [r8]
   182a8:	cmp	r0, #0
   182ac:	beq	1857c <__assert_fail@plt+0x64f0>
   182b0:	movw	r6, #61924	; 0xf1e4
   182b4:	movw	r7, #58812	; 0xe5bc
   182b8:	movw	r4, #58124	; 0xe30c
   182bc:	mov	r5, #0
   182c0:	movt	r6, #3
   182c4:	movt	r7, #3
   182c8:	movt	r4, #3
   182cc:	ldr	r0, [r6]
   182d0:	mov	r1, #0
   182d4:	ldr	r0, [r0, r5, lsl #2]
   182d8:	bl	1ca5c <__assert_fail@plt+0xa9d0>
   182dc:	ldrb	r0, [r7]
   182e0:	mov	r1, #10
   182e4:	cmp	r0, #0
   182e8:	ldr	r0, [r4]
   182ec:	movwne	r1, #0
   182f0:	ldr	r2, [r0, #20]
   182f4:	ldr	r3, [r0, #24]
   182f8:	cmp	r2, r3
   182fc:	bcs	18320 <__assert_fail@plt+0x6294>
   18300:	add	r3, r2, #1
   18304:	str	r3, [r0, #20]
   18308:	strb	r1, [r2]
   1830c:	ldr	r0, [r8]
   18310:	add	r5, r5, #1
   18314:	cmp	r5, r0
   18318:	bcc	182cc <__assert_fail@plt+0x6240>
   1831c:	b	1857c <__assert_fail@plt+0x64f0>
   18320:	bl	11f54 <__overflow@plt>
   18324:	b	1830c <__assert_fail@plt+0x6280>
   18328:	movw	r0, #58816	; 0xe5c0
   1832c:	movt	r0, #3
   18330:	ldr	r0, [r0]
   18334:	cmp	r0, #0
   18338:	beq	18790 <__assert_fail@plt+0x6704>
   1833c:	mov	r0, #1
   18340:	bl	1d954 <__assert_fail@plt+0xb8c8>
   18344:	movw	r1, #58356	; 0xe3f4
   18348:	movt	r1, #3
   1834c:	ldr	r1, [r1]
   18350:	udiv	r6, r1, r0
   18354:	mls	r1, r6, r0, r1
   18358:	cmp	r1, #0
   1835c:	addne	r6, r6, #1
   18360:	cmp	r6, #0
   18364:	beq	1857c <__assert_fail@plt+0x64f0>
   18368:	movw	r1, #62400	; 0xf3c0
   1836c:	add	r0, r0, r0, lsl #1
   18370:	mov	r7, #0
   18374:	movt	r1, #3
   18378:	ldr	r1, [r1]
   1837c:	add	r0, r1, r0, lsl #2
   18380:	sub	r0, r0, #4
   18384:	str	r0, [sp, #32]
   18388:	str	r6, [sp, #28]
   1838c:	movw	r0, #61924	; 0xf1e4
   18390:	movt	r0, #3
   18394:	ldr	r0, [r0]
   18398:	ldr	r4, [r0, r7, lsl #2]
   1839c:	mov	r0, r4
   183a0:	bl	1d6b8 <__assert_fail@plt+0xb62c>
   183a4:	mov	r5, r0
   183a8:	ldr	r0, [sp, #32]
   183ac:	mov	r1, #0
   183b0:	ldr	r0, [r0]
   183b4:	ldr	r8, [r0]
   183b8:	mov	r0, r4
   183bc:	bl	1ca5c <__assert_fail@plt+0xa9d0>
   183c0:	movw	r0, #58356	; 0xe3f4
   183c4:	add	sl, r7, r6
   183c8:	str	r7, [sp, #24]
   183cc:	movt	r0, #3
   183d0:	ldr	r0, [r0]
   183d4:	cmp	sl, r0
   183d8:	bcs	18520 <__assert_fail@plt+0x6494>
   183dc:	mov	r0, #0
   183e0:	mov	r9, #1
   183e4:	b	18440 <__assert_fail@plt+0x63b4>
   183e8:	movw	r0, #61924	; 0xf1e4
   183ec:	movt	r0, #3
   183f0:	ldr	r0, [r0]
   183f4:	ldr	r6, [r0, sl, lsl #2]
   183f8:	mov	r0, r6
   183fc:	bl	1d6b8 <__assert_fail@plt+0xb62c>
   18400:	mov	r5, r0
   18404:	ldr	r0, [sp, #32]
   18408:	mov	r1, r4
   1840c:	ldr	r0, [r0]
   18410:	ldr	r8, [r0, r9, lsl #2]
   18414:	mov	r0, r6
   18418:	bl	1ca5c <__assert_fail@plt+0xa9d0>
   1841c:	movw	r0, #58356	; 0xe3f4
   18420:	ldr	r6, [sp, #28]
   18424:	add	r9, r9, #1
   18428:	movt	r0, #3
   1842c:	ldr	r0, [r0]
   18430:	add	sl, sl, r6
   18434:	cmp	sl, r0
   18438:	mov	r0, r4
   1843c:	bcs	18520 <__assert_fail@plt+0x6494>
   18440:	movw	r6, #58160	; 0xe330
   18444:	add	r4, r0, r8
   18448:	add	r5, r0, r5
   1844c:	mov	r7, #32
   18450:	mov	ip, #9
   18454:	movt	r6, #3
   18458:	cmp	r5, r4
   1845c:	mov	r8, r6
   18460:	movw	r6, #58124	; 0xe30c
   18464:	movt	r6, #3
   18468:	bcc	184a0 <__assert_fail@plt+0x6414>
   1846c:	b	183e8 <__assert_fail@plt+0x635c>
   18470:	ldr	r0, [r6]
   18474:	ldr	r1, [r0, #20]
   18478:	ldr	r2, [r0, #24]
   1847c:	cmp	r1, r2
   18480:	bcs	184f4 <__assert_fail@plt+0x6468>
   18484:	add	r2, r1, #1
   18488:	str	r2, [r0, #20]
   1848c:	strb	r7, [r1]
   18490:	mov	r0, #1
   18494:	add	r5, r0, r5
   18498:	cmp	r5, r4
   1849c:	bcs	183e8 <__assert_fail@plt+0x635c>
   184a0:	ldr	r1, [r8]
   184a4:	cmp	r1, #0
   184a8:	beq	18470 <__assert_fail@plt+0x63e4>
   184ac:	add	r2, r5, #1
   184b0:	udiv	r0, r4, r1
   184b4:	udiv	r2, r2, r1
   184b8:	cmp	r0, r2
   184bc:	bls	18470 <__assert_fail@plt+0x63e4>
   184c0:	ldr	r0, [r6]
   184c4:	ldr	r2, [r0, #20]
   184c8:	ldr	r3, [r0, #24]
   184cc:	cmp	r2, r3
   184d0:	bcs	18508 <__assert_fail@plt+0x647c>
   184d4:	add	r3, r2, #1
   184d8:	str	r3, [r0, #20]
   184dc:	strb	ip, [r2]
   184e0:	udiv	r0, r5, r1
   184e4:	mul	r0, r0, r1
   184e8:	sub	r0, r0, r5
   184ec:	add	r0, r1, r0
   184f0:	b	18494 <__assert_fail@plt+0x6408>
   184f4:	mov	r1, #32
   184f8:	bl	11f54 <__overflow@plt>
   184fc:	mov	ip, #9
   18500:	mov	r7, #32
   18504:	b	18490 <__assert_fail@plt+0x6404>
   18508:	mov	r1, #9
   1850c:	bl	11f54 <__overflow@plt>
   18510:	ldr	r1, [r8]
   18514:	mov	ip, #9
   18518:	mov	r7, #32
   1851c:	b	184e0 <__assert_fail@plt+0x6454>
   18520:	movw	r0, #58812	; 0xe5bc
   18524:	mov	r1, #10
   18528:	movt	r0, #3
   1852c:	ldrb	r0, [r0]
   18530:	cmp	r0, #0
   18534:	movw	r0, #58124	; 0xe30c
   18538:	movt	r0, #3
   1853c:	movwne	r1, #0
   18540:	ldr	r0, [r0]
   18544:	ldr	r2, [r0, #20]
   18548:	ldr	r3, [r0, #24]
   1854c:	cmp	r2, r3
   18550:	bcs	18574 <__assert_fail@plt+0x64e8>
   18554:	add	r3, r2, #1
   18558:	str	r3, [r0, #20]
   1855c:	strb	r1, [r2]
   18560:	ldr	r7, [sp, #24]
   18564:	add	r7, r7, #1
   18568:	cmp	r7, r6
   1856c:	bcc	1838c <__assert_fail@plt+0x6300>
   18570:	b	1857c <__assert_fail@plt+0x64f0>
   18574:	bl	11f54 <__overflow@plt>
   18578:	b	18560 <__assert_fail@plt+0x64d4>
   1857c:	sub	sp, fp, #28
   18580:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   18584:	movw	r0, #58816	; 0xe5c0
   18588:	movt	r0, #3
   1858c:	ldr	r0, [r0]
   18590:	cmp	r0, #0
   18594:	beq	18790 <__assert_fail@plt+0x6704>
   18598:	mov	r0, #0
   1859c:	mov	r4, #0
   185a0:	bl	1d954 <__assert_fail@plt+0xb8c8>
   185a4:	movw	r1, #62400	; 0xf3c0
   185a8:	str	r0, [sp, #28]
   185ac:	movt	r1, #3
   185b0:	ldr	r2, [r1]
   185b4:	add	r1, r0, r0, lsl #1
   185b8:	movw	r0, #61924	; 0xf1e4
   185bc:	movt	r0, #3
   185c0:	ldr	r0, [r0]
   185c4:	add	r5, r2, r1, lsl #2
   185c8:	ldr	r8, [r0]
   185cc:	mov	r0, r8
   185d0:	bl	1d6b8 <__assert_fail@plt+0xb62c>
   185d4:	mov	r6, r0
   185d8:	ldr	r0, [r5, #-4]!
   185dc:	mov	r1, #0
   185e0:	str	r5, [sp, #24]
   185e4:	ldr	r5, [r0]
   185e8:	mov	r0, r8
   185ec:	bl	1ca5c <__assert_fail@plt+0xa9d0>
   185f0:	movw	r0, #58356	; 0xe3f4
   185f4:	movw	r7, #58124	; 0xe30c
   185f8:	movt	r0, #3
   185fc:	movt	r7, #3
   18600:	ldr	r0, [r0]
   18604:	cmp	r0, #2
   18608:	bcc	187a0 <__assert_fail@plt+0x6714>
   1860c:	movw	r8, #58160	; 0xe330
   18610:	mov	r9, #1
   18614:	mov	sl, #32
   18618:	movt	r8, #3
   1861c:	b	18674 <__assert_fail@plt+0x65e8>
   18620:	mov	r4, r5
   18624:	movw	r0, #61924	; 0xf1e4
   18628:	mov	r1, r4
   1862c:	movt	r0, #3
   18630:	ldr	r0, [r0]
   18634:	ldr	r6, [r0, r9, lsl #2]
   18638:	mov	r0, r6
   1863c:	bl	1ca5c <__assert_fail@plt+0xa9d0>
   18640:	mov	r0, r6
   18644:	bl	1d6b8 <__assert_fail@plt+0xb62c>
   18648:	mov	r6, r0
   1864c:	ldr	r0, [sp, #24]
   18650:	ldr	r1, [sp, #32]
   18654:	add	r9, r9, #1
   18658:	ldr	r0, [r0]
   1865c:	ldr	r5, [r0, r1, lsl #2]
   18660:	movw	r0, #58356	; 0xe3f4
   18664:	movt	r0, #3
   18668:	ldr	r0, [r0]
   1866c:	cmp	r9, r0
   18670:	bcs	187a0 <__assert_fail@plt+0x6714>
   18674:	ldr	r1, [sp, #28]
   18678:	udiv	r0, r9, r1
   1867c:	mls	r0, r0, r1, r9
   18680:	cmp	r0, #0
   18684:	str	r0, [sp, #32]
   18688:	beq	18744 <__assert_fail@plt+0x66b8>
   1868c:	add	r5, r4, r5
   18690:	add	r4, r4, r6
   18694:	cmp	r4, r5
   18698:	bcs	18620 <__assert_fail@plt+0x6594>
   1869c:	mov	r6, #9
   186a0:	b	186d4 <__assert_fail@plt+0x6648>
   186a4:	ldr	r0, [r7]
   186a8:	ldr	r1, [r0, #20]
   186ac:	ldr	r2, [r0, #24]
   186b0:	cmp	r1, r2
   186b4:	bcs	18728 <__assert_fail@plt+0x669c>
   186b8:	add	r2, r1, #1
   186bc:	str	r2, [r0, #20]
   186c0:	strb	sl, [r1]
   186c4:	mov	r0, #1
   186c8:	add	r4, r0, r4
   186cc:	cmp	r4, r5
   186d0:	bcs	18620 <__assert_fail@plt+0x6594>
   186d4:	ldr	r1, [r8]
   186d8:	cmp	r1, #0
   186dc:	beq	186a4 <__assert_fail@plt+0x6618>
   186e0:	add	r2, r4, #1
   186e4:	udiv	r0, r5, r1
   186e8:	udiv	r2, r2, r1
   186ec:	cmp	r0, r2
   186f0:	bls	186a4 <__assert_fail@plt+0x6618>
   186f4:	ldr	r0, [r7]
   186f8:	ldr	r2, [r0, #20]
   186fc:	ldr	r3, [r0, #24]
   18700:	cmp	r2, r3
   18704:	bcs	18734 <__assert_fail@plt+0x66a8>
   18708:	add	r3, r2, #1
   1870c:	str	r3, [r0, #20]
   18710:	strb	r6, [r2]
   18714:	udiv	r0, r4, r1
   18718:	mul	r0, r0, r1
   1871c:	sub	r0, r0, r4
   18720:	add	r0, r1, r0
   18724:	b	186c8 <__assert_fail@plt+0x663c>
   18728:	mov	r1, #32
   1872c:	bl	11f54 <__overflow@plt>
   18730:	b	186c4 <__assert_fail@plt+0x6638>
   18734:	mov	r1, #9
   18738:	bl	11f54 <__overflow@plt>
   1873c:	ldr	r1, [r8]
   18740:	b	18714 <__assert_fail@plt+0x6688>
   18744:	movw	r0, #58812	; 0xe5bc
   18748:	mov	r1, #10
   1874c:	movt	r0, #3
   18750:	ldrb	r0, [r0]
   18754:	cmp	r0, #0
   18758:	ldr	r0, [r7]
   1875c:	movwne	r1, #0
   18760:	ldr	r2, [r0, #20]
   18764:	ldr	r3, [r0, #24]
   18768:	cmp	r2, r3
   1876c:	bcs	18784 <__assert_fail@plt+0x66f8>
   18770:	add	r3, r2, #1
   18774:	mov	r4, #0
   18778:	str	r3, [r0, #20]
   1877c:	strb	r1, [r2]
   18780:	b	18624 <__assert_fail@plt+0x6598>
   18784:	bl	11f54 <__overflow@plt>
   18788:	mov	r4, #0
   1878c:	b	18624 <__assert_fail@plt+0x6598>
   18790:	mov	r0, #32
   18794:	sub	sp, fp, #28
   18798:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1879c:	b	1cd84 <__assert_fail@plt+0xacf8>
   187a0:	movw	r0, #58812	; 0xe5bc
   187a4:	mov	r1, #10
   187a8:	movt	r0, #3
   187ac:	ldrb	r0, [r0]
   187b0:	cmp	r0, #0
   187b4:	ldr	r0, [r7]
   187b8:	movwne	r1, #0
   187bc:	ldr	r2, [r0, #20]
   187c0:	ldr	r3, [r0, #24]
   187c4:	cmp	r2, r3
   187c8:	addcc	r3, r2, #1
   187cc:	strcc	r3, [r0, #20]
   187d0:	strbcc	r1, [r2]
   187d4:	subcc	sp, fp, #28
   187d8:	popcc	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   187dc:	sub	sp, fp, #28
   187e0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   187e4:	b	11f54 <__overflow@plt>
   187e8:	bl	12038 <abort@plt>
   187ec:	push	{r4, r5, r6, r7, fp, lr}
   187f0:	add	fp, sp, #16
   187f4:	ldr	r5, [r1, #8]
   187f8:	ldr	r3, [r1, #12]
   187fc:	mov	r7, #0
   18800:	sub	r2, r3, r5
   18804:	cmp	r7, r2, lsr #3
   18808:	beq	188ac <__assert_fail@plt+0x6820>
   1880c:	cmp	r3, r5
   18810:	bne	18820 <__assert_fail@plt+0x6794>
   18814:	ldrb	r7, [r1, #40]	; 0x28
   18818:	orr	r7, r7, #2
   1881c:	strb	r7, [r1, #40]	; 0x28
   18820:	ldr	r4, [r1, #24]
   18824:	ldr	r6, [r1, #4]
   18828:	ldr	r7, [r1, #16]
   1882c:	add	r3, r4, r3
   18830:	bic	r3, r3, r4
   18834:	sub	r4, r3, r6
   18838:	sub	r6, r7, r6
   1883c:	str	r3, [r1, #12]
   18840:	cmp	r4, r6
   18844:	lsr	r6, r2, #3
   18848:	strhi	r7, [r1, #12]
   1884c:	movhi	r3, r7
   18850:	movw	r7, #58124	; 0xe30c
   18854:	movt	r7, #3
   18858:	str	r3, [r1, #8]
   1885c:	ldr	r1, [r7]
   18860:	bl	11b94 <fputs_unlocked@plt>
   18864:	movw	r4, #46305	; 0xb4e1
   18868:	movt	r4, #2
   1886c:	ldrd	r2, [r5]
   18870:	mov	r0, #1
   18874:	mov	r1, r4
   18878:	bl	11f00 <__printf_chk@plt>
   1887c:	add	r5, r5, #8
   18880:	subs	r6, r6, #1
   18884:	bne	1886c <__assert_fail@plt+0x67e0>
   18888:	ldr	r0, [r7]
   1888c:	ldr	r1, [r0, #20]
   18890:	ldr	r2, [r0, #24]
   18894:	cmp	r1, r2
   18898:	bcs	188b0 <__assert_fail@plt+0x6824>
   1889c:	add	r2, r1, #1
   188a0:	str	r2, [r0, #20]
   188a4:	mov	r0, #10
   188a8:	strb	r0, [r1]
   188ac:	pop	{r4, r5, r6, r7, fp, pc}
   188b0:	mov	r1, #10
   188b4:	pop	{r4, r5, r6, r7, fp, lr}
   188b8:	b	11f54 <__overflow@plt>
   188bc:	push	{fp, lr}
   188c0:	mov	fp, sp
   188c4:	sub	sp, sp, #56	; 0x38
   188c8:	mov	r4, r0
   188cc:	cmp	r0, #0
   188d0:	bne	18df8 <__assert_fail@plt+0x6d6c>
   188d4:	movw	r1, #38893	; 0x97ed
   188d8:	mov	r0, #0
   188dc:	mov	r2, #5
   188e0:	movt	r1, #2
   188e4:	bl	11ca8 <dcgettext@plt>
   188e8:	mov	r1, r0
   188ec:	movw	r0, #62432	; 0xf3e0
   188f0:	movt	r0, #3
   188f4:	ldr	r2, [r0]
   188f8:	mov	r0, #1
   188fc:	bl	11f00 <__printf_chk@plt>
   18900:	movw	r1, #38926	; 0x980e
   18904:	mov	r0, #0
   18908:	mov	r2, #5
   1890c:	movt	r1, #2
   18910:	bl	11ca8 <dcgettext@plt>
   18914:	movw	r7, #58124	; 0xe30c
   18918:	movt	r7, #3
   1891c:	ldr	r1, [r7]
   18920:	bl	11b94 <fputs_unlocked@plt>
   18924:	movw	r1, #48091	; 0xbbdb
   18928:	mov	r0, #0
   1892c:	mov	r2, #5
   18930:	movt	r1, #2
   18934:	bl	11ca8 <dcgettext@plt>
   18938:	ldr	r1, [r7]
   1893c:	bl	11b94 <fputs_unlocked@plt>
   18940:	movw	r1, #39070	; 0x989e
   18944:	mov	r0, #0
   18948:	mov	r2, #5
   1894c:	movt	r1, #2
   18950:	bl	11ca8 <dcgettext@plt>
   18954:	ldr	r1, [r7]
   18958:	bl	11b94 <fputs_unlocked@plt>
   1895c:	movw	r1, #39341	; 0x99ad
   18960:	mov	r0, #0
   18964:	mov	r2, #5
   18968:	movt	r1, #2
   1896c:	bl	11ca8 <dcgettext@plt>
   18970:	ldr	r1, [r7]
   18974:	bl	11b94 <fputs_unlocked@plt>
   18978:	movw	r1, #39497	; 0x9a49
   1897c:	mov	r0, #0
   18980:	mov	r2, #5
   18984:	movt	r1, #2
   18988:	bl	11ca8 <dcgettext@plt>
   1898c:	ldr	r1, [r7]
   18990:	bl	11b94 <fputs_unlocked@plt>
   18994:	movw	r1, #39859	; 0x9bb3
   18998:	mov	r0, #0
   1899c:	mov	r2, #5
   189a0:	movt	r1, #2
   189a4:	bl	11ca8 <dcgettext@plt>
   189a8:	ldr	r1, [r7]
   189ac:	bl	11b94 <fputs_unlocked@plt>
   189b0:	movw	r1, #40134	; 0x9cc6
   189b4:	mov	r0, #0
   189b8:	mov	r2, #5
   189bc:	movt	r1, #2
   189c0:	bl	11ca8 <dcgettext@plt>
   189c4:	ldr	r1, [r7]
   189c8:	bl	11b94 <fputs_unlocked@plt>
   189cc:	movw	r1, #40549	; 0x9e65
   189d0:	mov	r0, #0
   189d4:	mov	r2, #5
   189d8:	movt	r1, #2
   189dc:	bl	11ca8 <dcgettext@plt>
   189e0:	ldr	r1, [r7]
   189e4:	bl	11b94 <fputs_unlocked@plt>
   189e8:	movw	r1, #40610	; 0x9ea2
   189ec:	mov	r0, #0
   189f0:	mov	r2, #5
   189f4:	movt	r1, #2
   189f8:	bl	11ca8 <dcgettext@plt>
   189fc:	ldr	r1, [r7]
   18a00:	bl	11b94 <fputs_unlocked@plt>
   18a04:	movw	r1, #40855	; 0x9f97
   18a08:	mov	r0, #0
   18a0c:	mov	r2, #5
   18a10:	movt	r1, #2
   18a14:	bl	11ca8 <dcgettext@plt>
   18a18:	ldr	r1, [r7]
   18a1c:	bl	11b94 <fputs_unlocked@plt>
   18a20:	movw	r1, #40928	; 0x9fe0
   18a24:	mov	r0, #0
   18a28:	mov	r2, #5
   18a2c:	movt	r1, #2
   18a30:	bl	11ca8 <dcgettext@plt>
   18a34:	ldr	r1, [r7]
   18a38:	bl	11b94 <fputs_unlocked@plt>
   18a3c:	movw	r1, #41078	; 0xa076
   18a40:	mov	r0, #0
   18a44:	mov	r2, #5
   18a48:	movt	r1, #2
   18a4c:	bl	11ca8 <dcgettext@plt>
   18a50:	ldr	r1, [r7]
   18a54:	bl	11b94 <fputs_unlocked@plt>
   18a58:	movw	r1, #41500	; 0xa21c
   18a5c:	mov	r0, #0
   18a60:	mov	r2, #5
   18a64:	movt	r1, #2
   18a68:	bl	11ca8 <dcgettext@plt>
   18a6c:	ldr	r1, [r7]
   18a70:	bl	11b94 <fputs_unlocked@plt>
   18a74:	movw	r1, #41556	; 0xa254
   18a78:	mov	r0, #0
   18a7c:	mov	r2, #5
   18a80:	movt	r1, #2
   18a84:	bl	11ca8 <dcgettext@plt>
   18a88:	ldr	r1, [r7]
   18a8c:	bl	11b94 <fputs_unlocked@plt>
   18a90:	movw	r1, #41910	; 0xa3b6
   18a94:	mov	r0, #0
   18a98:	mov	r2, #5
   18a9c:	movt	r1, #2
   18aa0:	bl	11ca8 <dcgettext@plt>
   18aa4:	ldr	r1, [r7]
   18aa8:	bl	11b94 <fputs_unlocked@plt>
   18aac:	movw	r1, #42065	; 0xa451
   18ab0:	mov	r0, #0
   18ab4:	mov	r2, #5
   18ab8:	movt	r1, #2
   18abc:	bl	11ca8 <dcgettext@plt>
   18ac0:	ldr	r1, [r7]
   18ac4:	bl	11b94 <fputs_unlocked@plt>
   18ac8:	movw	r1, #42424	; 0xa5b8
   18acc:	mov	r0, #0
   18ad0:	mov	r2, #5
   18ad4:	movt	r1, #2
   18ad8:	bl	11ca8 <dcgettext@plt>
   18adc:	ldr	r1, [r7]
   18ae0:	bl	11b94 <fputs_unlocked@plt>
   18ae4:	movw	r1, #42727	; 0xa6e7
   18ae8:	mov	r0, #0
   18aec:	mov	r2, #5
   18af0:	movt	r1, #2
   18af4:	bl	11ca8 <dcgettext@plt>
   18af8:	ldr	r1, [r7]
   18afc:	bl	11b94 <fputs_unlocked@plt>
   18b00:	movw	r1, #43312	; 0xa930
   18b04:	mov	r0, #0
   18b08:	mov	r2, #5
   18b0c:	movt	r1, #2
   18b10:	bl	11ca8 <dcgettext@plt>
   18b14:	ldr	r1, [r7]
   18b18:	bl	11b94 <fputs_unlocked@plt>
   18b1c:	movw	r1, #43509	; 0xa9f5
   18b20:	mov	r0, #0
   18b24:	mov	r2, #5
   18b28:	movt	r1, #2
   18b2c:	bl	11ca8 <dcgettext@plt>
   18b30:	ldr	r1, [r7]
   18b34:	bl	11b94 <fputs_unlocked@plt>
   18b38:	movw	r1, #44150	; 0xac76
   18b3c:	mov	r0, #0
   18b40:	mov	r2, #5
   18b44:	movt	r1, #2
   18b48:	bl	11ca8 <dcgettext@plt>
   18b4c:	ldr	r1, [r7]
   18b50:	bl	11b94 <fputs_unlocked@plt>
   18b54:	movw	r1, #44229	; 0xacc5
   18b58:	mov	r0, #0
   18b5c:	mov	r2, #5
   18b60:	movt	r1, #2
   18b64:	bl	11ca8 <dcgettext@plt>
   18b68:	ldr	r1, [r7]
   18b6c:	bl	11b94 <fputs_unlocked@plt>
   18b70:	movw	r1, #44370	; 0xad52
   18b74:	mov	r0, #0
   18b78:	mov	r2, #5
   18b7c:	movt	r1, #2
   18b80:	bl	11ca8 <dcgettext@plt>
   18b84:	ldr	r1, [r7]
   18b88:	bl	11b94 <fputs_unlocked@plt>
   18b8c:	movw	r1, #44742	; 0xaec6
   18b90:	mov	r0, #0
   18b94:	mov	r2, #5
   18b98:	movt	r1, #2
   18b9c:	bl	11ca8 <dcgettext@plt>
   18ba0:	ldr	r1, [r7]
   18ba4:	bl	11b94 <fputs_unlocked@plt>
   18ba8:	movw	r1, #45150	; 0xb05e
   18bac:	mov	r0, #0
   18bb0:	mov	r2, #5
   18bb4:	movt	r1, #2
   18bb8:	bl	11ca8 <dcgettext@plt>
   18bbc:	ldr	r1, [r7]
   18bc0:	bl	11b94 <fputs_unlocked@plt>
   18bc4:	movw	r1, #45195	; 0xb08b
   18bc8:	mov	r0, #0
   18bcc:	mov	r2, #5
   18bd0:	movt	r1, #2
   18bd4:	bl	11ca8 <dcgettext@plt>
   18bd8:	ldr	r1, [r7]
   18bdc:	bl	11b94 <fputs_unlocked@plt>
   18be0:	movw	r1, #48166	; 0xbc26
   18be4:	mov	r0, #0
   18be8:	mov	r2, #5
   18bec:	movt	r1, #2
   18bf0:	bl	11ca8 <dcgettext@plt>
   18bf4:	ldr	r1, [r7]
   18bf8:	bl	11b94 <fputs_unlocked@plt>
   18bfc:	movw	r1, #45249	; 0xb0c1
   18c00:	mov	r0, #0
   18c04:	mov	r2, #5
   18c08:	movt	r1, #2
   18c0c:	bl	11ca8 <dcgettext@plt>
   18c10:	ldr	r1, [r7]
   18c14:	bl	11b94 <fputs_unlocked@plt>
   18c18:	movw	r1, #45625	; 0xb239
   18c1c:	mov	r0, #0
   18c20:	mov	r2, #5
   18c24:	movt	r1, #2
   18c28:	bl	11ca8 <dcgettext@plt>
   18c2c:	ldr	r1, [r7]
   18c30:	bl	11b94 <fputs_unlocked@plt>
   18c34:	movw	r1, #45701	; 0xb285
   18c38:	mov	r0, #0
   18c3c:	mov	r2, #5
   18c40:	movt	r1, #2
   18c44:	bl	11ca8 <dcgettext@plt>
   18c48:	ldr	r1, [r7]
   18c4c:	bl	11b94 <fputs_unlocked@plt>
   18c50:	movw	r1, #45987	; 0xb3a3
   18c54:	mov	r0, #0
   18c58:	mov	r2, #5
   18c5c:	movt	r1, #2
   18c60:	bl	11ca8 <dcgettext@plt>
   18c64:	ldr	r1, [r7]
   18c68:	bl	11b94 <fputs_unlocked@plt>
   18c6c:	movw	r1, #54528	; 0xd500
   18c70:	mov	r5, #48	; 0x30
   18c74:	movw	r0, #58016	; 0xe2a0
   18c78:	mov	r6, sp
   18c7c:	movt	r1, #2
   18c80:	movt	r0, #3
   18c84:	add	r2, r1, #16
   18c88:	add	r3, r1, #32
   18c8c:	vld1.64	{d16-d17}, [r1], r5
   18c90:	ldr	r0, [r0]
   18c94:	vld1.64	{d20-d21}, [r2]
   18c98:	vldr	d22, [r1]
   18c9c:	add	r1, r6, #16
   18ca0:	vld1.64	{d18-d19}, [r3]
   18ca4:	add	r2, r6, #32
   18ca8:	cmp	r0, #2
   18cac:	vst1.64	{d20-d21}, [r1]
   18cb0:	mov	r1, r6
   18cb4:	vst1.64	{d18-d19}, [r2]
   18cb8:	movw	r2, #46139	; 0xb43b
   18cbc:	vst1.64	{d16-d17}, [r1], r5
   18cc0:	movt	r2, #2
   18cc4:	movw	r5, #46510	; 0xb5ae
   18cc8:	vstr	d22, [r1]
   18ccc:	movw	r1, #47157	; 0xb835
   18cd0:	movt	r5, #2
   18cd4:	movt	r1, #2
   18cd8:	moveq	r2, r1
   18cdc:	movw	r1, #38750	; 0x975e
   18ce0:	cmp	r0, #1
   18ce4:	movt	r1, #2
   18ce8:	movne	r5, r2
   18cec:	mov	r0, r5
   18cf0:	bl	11bd0 <strcmp@plt>
   18cf4:	cmp	r0, #0
   18cf8:	ldrne	r1, [r6, #8]!
   18cfc:	cmpne	r1, #0
   18d00:	bne	18cec <__assert_fail@plt+0x6c60>
   18d04:	movw	r1, #48471	; 0xbd57
   18d08:	ldr	r6, [r6, #4]
   18d0c:	mov	r0, #0
   18d10:	mov	r2, #5
   18d14:	movt	r1, #2
   18d18:	bl	11ca8 <dcgettext@plt>
   18d1c:	movw	r2, #46499	; 0xb5a3
   18d20:	movw	r3, #48494	; 0xbd6e
   18d24:	mov	r1, r0
   18d28:	mov	r0, #1
   18d2c:	movt	r2, #2
   18d30:	movt	r3, #2
   18d34:	bl	11f00 <__printf_chk@plt>
   18d38:	cmp	r6, #0
   18d3c:	mov	r0, #5
   18d40:	mov	r1, #0
   18d44:	moveq	r6, r5
   18d48:	bl	11f60 <setlocale@plt>
   18d4c:	cmp	r0, #0
   18d50:	beq	18d88 <__assert_fail@plt+0x6cfc>
   18d54:	movw	r1, #48534	; 0xbd96
   18d58:	mov	r2, #3
   18d5c:	movt	r1, #2
   18d60:	bl	1202c <strncmp@plt>
   18d64:	cmp	r0, #0
   18d68:	beq	18d88 <__assert_fail@plt+0x6cfc>
   18d6c:	movw	r1, #48538	; 0xbd9a
   18d70:	mov	r0, #0
   18d74:	mov	r2, #5
   18d78:	movt	r1, #2
   18d7c:	bl	11ca8 <dcgettext@plt>
   18d80:	ldr	r1, [r7]
   18d84:	bl	11b94 <fputs_unlocked@plt>
   18d88:	movw	r1, #48609	; 0xbde1
   18d8c:	mov	r0, #0
   18d90:	mov	r2, #5
   18d94:	movt	r1, #2
   18d98:	bl	11ca8 <dcgettext@plt>
   18d9c:	movw	r2, #48494	; 0xbd6e
   18da0:	mov	r1, r0
   18da4:	mov	r0, #1
   18da8:	mov	r3, r5
   18dac:	movt	r2, #2
   18db0:	bl	11f00 <__printf_chk@plt>
   18db4:	movw	r1, #48636	; 0xbdfc
   18db8:	mov	r0, #0
   18dbc:	mov	r2, #5
   18dc0:	movt	r1, #2
   18dc4:	bl	11ca8 <dcgettext@plt>
   18dc8:	mov	r1, r0
   18dcc:	movw	r0, #48404	; 0xbd14
   18dd0:	movw	r3, #47938	; 0xbb42
   18dd4:	cmp	r6, r5
   18dd8:	mov	r2, r6
   18ddc:	movt	r0, #2
   18de0:	movt	r3, #2
   18de4:	moveq	r3, r0
   18de8:	mov	r0, #1
   18dec:	bl	11f00 <__printf_chk@plt>
   18df0:	mov	r0, r4
   18df4:	bl	11e7c <exit@plt>
   18df8:	movw	r0, #58120	; 0xe308
   18dfc:	movw	r1, #38854	; 0x97c6
   18e00:	mov	r2, #5
   18e04:	movt	r0, #3
   18e08:	movt	r1, #2
   18e0c:	ldr	r5, [r0]
   18e10:	mov	r0, #0
   18e14:	bl	11ca8 <dcgettext@plt>
   18e18:	mov	r2, r0
   18e1c:	movw	r0, #62432	; 0xf3e0
   18e20:	mov	r1, #1
   18e24:	movt	r0, #3
   18e28:	ldr	r3, [r0]
   18e2c:	mov	r0, r5
   18e30:	bl	11f24 <__fprintf_chk@plt>
   18e34:	mov	r0, r4
   18e38:	bl	11e7c <exit@plt>
   18e3c:	push	{r4, r5, fp, lr}
   18e40:	add	fp, sp, #8
   18e44:	mov	r4, r0
   18e48:	movw	r0, #58360	; 0xe3f8
   18e4c:	movt	r0, #3
   18e50:	ldrb	r1, [r0]
   18e54:	cmp	r1, #0
   18e58:	bne	18eac <__assert_fail@plt+0x6e20>
   18e5c:	mov	r1, #1
   18e60:	strb	r1, [r0]
   18e64:	mov	r0, #1
   18e68:	bl	11ea0 <tcgetpgrp@plt>
   18e6c:	cmp	r0, #0
   18e70:	movpl	r0, #1
   18e74:	blpl	18ecc <__assert_fail@plt+0x6e40>
   18e78:	movw	r5, #57800	; 0xe1c8
   18e7c:	movt	r5, #3
   18e80:	ldr	r0, [r5, #20]
   18e84:	cmp	r0, #0
   18e88:	beq	18e94 <__assert_fail@plt+0x6e08>
   18e8c:	add	r0, r5, #16
   18e90:	b	18ea8 <__assert_fail@plt+0x6e1c>
   18e94:	mov	r0, r5
   18e98:	bl	18e3c <__assert_fail@plt+0x6db0>
   18e9c:	add	r0, r5, #24
   18ea0:	bl	18e3c <__assert_fail@plt+0x6db0>
   18ea4:	add	r0, r5, #8
   18ea8:	bl	18e3c <__assert_fail@plt+0x6db0>
   18eac:	movw	r0, #58124	; 0xe30c
   18eb0:	ldr	r1, [r4]
   18eb4:	mov	r2, #1
   18eb8:	movt	r0, #3
   18ebc:	ldr	r3, [r0]
   18ec0:	ldr	r0, [r4, #4]
   18ec4:	pop	{r4, r5, fp, lr}
   18ec8:	b	11c90 <fwrite_unlocked@plt>
   18ecc:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   18ed0:	add	fp, sp, #28
   18ed4:	sub	sp, sp, #140	; 0x8c
   18ed8:	cmp	r0, #0
   18edc:	beq	18f40 <__assert_fail@plt+0x6eb4>
   18ee0:	movw	r8, #58640	; 0xe510
   18ee4:	movt	r8, #3
   18ee8:	mov	r0, r8
   18eec:	bl	11f6c <sigemptyset@plt>
   18ef0:	movw	r7, #48688	; 0xbe30
   18ef4:	mov	r5, #0
   18ef8:	mov	r4, sp
   18efc:	movt	r7, #2
   18f00:	b	18f10 <__assert_fail@plt+0x6e84>
   18f04:	sub	r5, r5, #1
   18f08:	cmn	r5, #12
   18f0c:	beq	190f8 <__assert_fail@plt+0x706c>
   18f10:	ldr	r6, [r7, -r5, lsl #2]
   18f14:	mov	r1, #0
   18f18:	mov	r2, r4
   18f1c:	mov	r0, r6
   18f20:	bl	11d38 <sigaction@plt>
   18f24:	ldr	r0, [sp]
   18f28:	cmp	r0, #1
   18f2c:	beq	18f04 <__assert_fail@plt+0x6e78>
   18f30:	mov	r0, r8
   18f34:	mov	r1, r6
   18f38:	bl	11e04 <sigaddset@plt>
   18f3c:	b	18f04 <__assert_fail@plt+0x6e78>
   18f40:	movw	r0, #58640	; 0xe510
   18f44:	mov	r1, #20
   18f48:	movt	r0, #3
   18f4c:	bl	11cc0 <sigismember@plt>
   18f50:	cmp	r0, #0
   18f54:	beq	18f64 <__assert_fail@plt+0x6ed8>
   18f58:	mov	r0, #20
   18f5c:	mov	r1, #0
   18f60:	bl	11c84 <signal@plt>
   18f64:	movw	r0, #58640	; 0xe510
   18f68:	mov	r1, #14
   18f6c:	movt	r0, #3
   18f70:	bl	11cc0 <sigismember@plt>
   18f74:	cmp	r0, #0
   18f78:	beq	18f88 <__assert_fail@plt+0x6efc>
   18f7c:	mov	r0, #14
   18f80:	mov	r1, #0
   18f84:	bl	11c84 <signal@plt>
   18f88:	movw	r0, #58640	; 0xe510
   18f8c:	mov	r1, #1
   18f90:	movt	r0, #3
   18f94:	bl	11cc0 <sigismember@plt>
   18f98:	cmp	r0, #0
   18f9c:	beq	18fac <__assert_fail@plt+0x6f20>
   18fa0:	mov	r0, #1
   18fa4:	mov	r1, #0
   18fa8:	bl	11c84 <signal@plt>
   18fac:	movw	r0, #58640	; 0xe510
   18fb0:	mov	r1, #2
   18fb4:	movt	r0, #3
   18fb8:	bl	11cc0 <sigismember@plt>
   18fbc:	cmp	r0, #0
   18fc0:	beq	18fd0 <__assert_fail@plt+0x6f44>
   18fc4:	mov	r0, #2
   18fc8:	mov	r1, #0
   18fcc:	bl	11c84 <signal@plt>
   18fd0:	movw	r0, #58640	; 0xe510
   18fd4:	mov	r1, #13
   18fd8:	movt	r0, #3
   18fdc:	bl	11cc0 <sigismember@plt>
   18fe0:	cmp	r0, #0
   18fe4:	beq	18ff4 <__assert_fail@plt+0x6f68>
   18fe8:	mov	r0, #13
   18fec:	mov	r1, #0
   18ff0:	bl	11c84 <signal@plt>
   18ff4:	movw	r0, #58640	; 0xe510
   18ff8:	mov	r1, #3
   18ffc:	movt	r0, #3
   19000:	bl	11cc0 <sigismember@plt>
   19004:	cmp	r0, #0
   19008:	beq	19018 <__assert_fail@plt+0x6f8c>
   1900c:	mov	r0, #3
   19010:	mov	r1, #0
   19014:	bl	11c84 <signal@plt>
   19018:	movw	r0, #58640	; 0xe510
   1901c:	mov	r1, #15
   19020:	movt	r0, #3
   19024:	bl	11cc0 <sigismember@plt>
   19028:	cmp	r0, #0
   1902c:	beq	1903c <__assert_fail@plt+0x6fb0>
   19030:	mov	r0, #15
   19034:	mov	r1, #0
   19038:	bl	11c84 <signal@plt>
   1903c:	movw	r0, #58640	; 0xe510
   19040:	mov	r1, #29
   19044:	movt	r0, #3
   19048:	bl	11cc0 <sigismember@plt>
   1904c:	cmp	r0, #0
   19050:	beq	19060 <__assert_fail@plt+0x6fd4>
   19054:	mov	r0, #29
   19058:	mov	r1, #0
   1905c:	bl	11c84 <signal@plt>
   19060:	movw	r0, #58640	; 0xe510
   19064:	mov	r1, #27
   19068:	movt	r0, #3
   1906c:	bl	11cc0 <sigismember@plt>
   19070:	cmp	r0, #0
   19074:	beq	19084 <__assert_fail@plt+0x6ff8>
   19078:	mov	r0, #27
   1907c:	mov	r1, #0
   19080:	bl	11c84 <signal@plt>
   19084:	movw	r0, #58640	; 0xe510
   19088:	mov	r1, #26
   1908c:	movt	r0, #3
   19090:	bl	11cc0 <sigismember@plt>
   19094:	cmp	r0, #0
   19098:	beq	190a8 <__assert_fail@plt+0x701c>
   1909c:	mov	r0, #26
   190a0:	mov	r1, #0
   190a4:	bl	11c84 <signal@plt>
   190a8:	movw	r0, #58640	; 0xe510
   190ac:	mov	r1, #24
   190b0:	movt	r0, #3
   190b4:	bl	11cc0 <sigismember@plt>
   190b8:	cmp	r0, #0
   190bc:	beq	190cc <__assert_fail@plt+0x7040>
   190c0:	mov	r0, #24
   190c4:	mov	r1, #0
   190c8:	bl	11c84 <signal@plt>
   190cc:	movw	r0, #58640	; 0xe510
   190d0:	mov	r1, #25
   190d4:	movt	r0, #3
   190d8:	bl	11cc0 <sigismember@plt>
   190dc:	cmp	r0, #0
   190e0:	beq	19178 <__assert_fail@plt+0x70ec>
   190e4:	mov	r0, #25
   190e8:	mov	r1, #0
   190ec:	sub	sp, fp, #28
   190f0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   190f4:	b	11c84 <signal@plt>
   190f8:	movw	r8, #58640	; 0xe510
   190fc:	add	r0, r4, #4
   19100:	mov	r2, #128	; 0x80
   19104:	movt	r8, #3
   19108:	mov	r1, r8
   1910c:	bl	11c60 <memcpy@plt>
   19110:	movw	r9, #37248	; 0x9180
   19114:	movw	sl, #37292	; 0x91ac
   19118:	mov	r0, #268435456	; 0x10000000
   1911c:	mov	r5, #0
   19120:	movt	r9, #1
   19124:	movt	sl, #1
   19128:	str	r0, [sp, #132]	; 0x84
   1912c:	b	1913c <__assert_fail@plt+0x70b0>
   19130:	sub	r5, r5, #1
   19134:	cmn	r5, #12
   19138:	beq	19178 <__assert_fail@plt+0x70ec>
   1913c:	ldr	r6, [r7, -r5, lsl #2]
   19140:	mov	r0, r8
   19144:	mov	r1, r6
   19148:	bl	11cc0 <sigismember@plt>
   1914c:	cmp	r0, #0
   19150:	beq	19130 <__assert_fail@plt+0x70a4>
   19154:	cmp	r5, #0
   19158:	mov	r0, sl
   1915c:	mov	r1, r4
   19160:	mov	r2, #0
   19164:	moveq	r0, r9
   19168:	str	r0, [sp]
   1916c:	mov	r0, r6
   19170:	bl	11d38 <sigaction@plt>
   19174:	b	19130 <__assert_fail@plt+0x70a4>
   19178:	sub	sp, fp, #28
   1917c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   19180:	movw	r0, #58368	; 0xe400
   19184:	movt	r0, #3
   19188:	ldr	r0, [r0]
   1918c:	cmp	r0, #0
   19190:	bxne	lr
   19194:	movw	r0, #58364	; 0xe3fc
   19198:	movt	r0, #3
   1919c:	ldr	r1, [r0]
   191a0:	add	r1, r1, #1
   191a4:	str	r1, [r0]
   191a8:	bx	lr
   191ac:	movw	r1, #58368	; 0xe400
   191b0:	movt	r1, #3
   191b4:	ldr	r2, [r1]
   191b8:	cmp	r2, #0
   191bc:	streq	r0, [r1]
   191c0:	bx	lr
   191c4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   191c8:	add	fp, sp, #28
   191cc:	sub	sp, sp, #4
   191d0:	ldr	lr, [r0]
   191d4:	ldr	ip, [r1]
   191d8:	mov	r6, #0
   191dc:	mov	r9, #0
   191e0:	mov	r5, #0
   191e4:	cmp	r6, #4
   191e8:	bls	19210 <__assert_fail@plt+0x7184>
   191ec:	b	19698 <__assert_fail@plt+0x760c>
   191f0:	add	r4, r4, r7, lsl #3
   191f4:	add	ip, ip, #1
   191f8:	mov	r6, #2
   191fc:	sub	r5, r4, #48	; 0x30
   19200:	cmp	r6, #5
   19204:	bcs	1967c <__assert_fail@plt+0x75f0>
   19208:	cmp	r6, #4
   1920c:	bhi	19698 <__assert_fail@plt+0x760c>
   19210:	add	r4, pc, #4
   19214:	mov	r7, r5
   19218:	ldr	pc, [r4, r6, lsl #2]
   1921c:	andeq	r9, r1, r0, lsr r2
   19220:	andeq	r9, r1, r8, asr r3
   19224:	andeq	r9, r1, ip, lsl #6
   19228:	andeq	r9, r1, r4, lsr #6
   1922c:	andeq	r9, r1, ip, ror #5
   19230:	ldrb	sl, [ip]
   19234:	mov	r6, #5
   19238:	sub	r5, sl, #58	; 0x3a
   1923c:	cmp	r5, #36	; 0x24
   19240:	bhi	195cc <__assert_fail@plt+0x7540>
   19244:	add	r4, pc, #0
   19248:	ldr	pc, [r4, r5, lsl #2]
   1924c:	andeq	r9, r1, ip, ror r6
   19250:	ldrdeq	r9, [r1], -r4
   19254:	ldrdeq	r9, [r1], -r4
   19258:	andeq	r9, r1, r0, ror #5
   1925c:	ldrdeq	r9, [r1], -r4
   19260:	ldrdeq	r9, [r1], -r4
   19264:	ldrdeq	r9, [r1], -r4
   19268:	ldrdeq	r9, [r1], -r4
   1926c:	ldrdeq	r9, [r1], -r4
   19270:	ldrdeq	r9, [r1], -r4
   19274:	ldrdeq	r9, [r1], -r4
   19278:	ldrdeq	r9, [r1], -r4
   1927c:	ldrdeq	r9, [r1], -r4
   19280:	ldrdeq	r9, [r1], -r4
   19284:	ldrdeq	r9, [r1], -r4
   19288:	ldrdeq	r9, [r1], -r4
   1928c:	ldrdeq	r9, [r1], -r4
   19290:	ldrdeq	r9, [r1], -r4
   19294:	ldrdeq	r9, [r1], -r4
   19298:	ldrdeq	r9, [r1], -r4
   1929c:	ldrdeq	r9, [r1], -r4
   192a0:	ldrdeq	r9, [r1], -r4
   192a4:	ldrdeq	r9, [r1], -r4
   192a8:	ldrdeq	r9, [r1], -r4
   192ac:	ldrdeq	r9, [r1], -r4
   192b0:	ldrdeq	r9, [r1], -r4
   192b4:	ldrdeq	r9, [r1], -r4
   192b8:	ldrdeq	r9, [r1], -r4
   192bc:	ldrdeq	r9, [r1], -r4
   192c0:	ldrdeq	r9, [r1], -r4
   192c4:	ldrdeq	r9, [r1], -r4
   192c8:	ldrdeq	r9, [r1], -r4
   192cc:	ldrdeq	r9, [r1], -r4
   192d0:	ldrdeq	r9, [r1], -r4
   192d4:			; <UNDEFINED> instruction: 0x000195b4
   192d8:	ldrdeq	r9, [r1], -r4
   192dc:	andeq	r9, r1, r0, asr #11
   192e0:	cmp	r2, #0
   192e4:	beq	195d4 <__assert_fail@plt+0x7548>
   192e8:	b	1967c <__assert_fail@plt+0x75f0>
   192ec:	ldrb	r4, [ip]
   192f0:	sub	r5, r4, #64	; 0x40
   192f4:	uxtb	r5, r5
   192f8:	cmp	r5, #62	; 0x3e
   192fc:	bhi	19574 <__assert_fail@plt+0x74e8>
   19300:	and	r4, r4, #31
   19304:	strb	r4, [lr], #1
   19308:	b	195d8 <__assert_fail@plt+0x754c>
   1930c:	ldrb	r4, [ip]
   19310:	and	r5, r4, #248	; 0xf8
   19314:	cmp	r5, #48	; 0x30
   19318:	beq	191f0 <__assert_fail@plt+0x7164>
   1931c:	strb	r7, [lr], #1
   19320:	b	19584 <__assert_fail@plt+0x74f8>
   19324:	ldrb	r4, [ip]
   19328:	sub	r5, r4, #48	; 0x30
   1932c:	cmp	r5, #10
   19330:	bcc	1958c <__assert_fail@plt+0x7500>
   19334:	sub	r5, r4, #65	; 0x41
   19338:	cmp	r5, #6
   1933c:	bcc	19598 <__assert_fail@plt+0x750c>
   19340:	sub	r5, r4, #97	; 0x61
   19344:	cmp	r5, #6
   19348:	bcs	1931c <__assert_fail@plt+0x7290>
   1934c:	add	r4, r4, r7, lsl #4
   19350:	sub	r5, r4, #87	; 0x57
   19354:	b	195a0 <__assert_fail@plt+0x7514>
   19358:	ldrb	r4, [ip]
   1935c:	cmp	r4, #120	; 0x78
   19360:	bhi	195f4 <__assert_fail@plt+0x7568>
   19364:	add	r8, pc, #12
   19368:	mov	sl, #7
   1936c:	mov	r6, #3
   19370:	mov	r5, #0
   19374:	ldr	pc, [r8, r4, lsl #2]
   19378:	strdeq	r9, [r1], -ip
   1937c:	strdeq	r9, [r1], -r4
   19380:	strdeq	r9, [r1], -r4
   19384:	strdeq	r9, [r1], -r4
   19388:	strdeq	r9, [r1], -r4
   1938c:	strdeq	r9, [r1], -r4
   19390:	strdeq	r9, [r1], -r4
   19394:	strdeq	r9, [r1], -r4
   19398:	strdeq	r9, [r1], -r4
   1939c:	strdeq	r9, [r1], -r4
   193a0:	strdeq	r9, [r1], -r4
   193a4:	strdeq	r9, [r1], -r4
   193a8:	strdeq	r9, [r1], -r4
   193ac:	strdeq	r9, [r1], -r4
   193b0:	strdeq	r9, [r1], -r4
   193b4:	strdeq	r9, [r1], -r4
   193b8:	strdeq	r9, [r1], -r4
   193bc:	strdeq	r9, [r1], -r4
   193c0:	strdeq	r9, [r1], -r4
   193c4:	strdeq	r9, [r1], -r4
   193c8:	strdeq	r9, [r1], -r4
   193cc:	strdeq	r9, [r1], -r4
   193d0:	strdeq	r9, [r1], -r4
   193d4:	strdeq	r9, [r1], -r4
   193d8:	strdeq	r9, [r1], -r4
   193dc:	strdeq	r9, [r1], -r4
   193e0:	strdeq	r9, [r1], -r4
   193e4:	strdeq	r9, [r1], -r4
   193e8:	strdeq	r9, [r1], -r4
   193ec:	strdeq	r9, [r1], -r4
   193f0:	strdeq	r9, [r1], -r4
   193f4:	strdeq	r9, [r1], -r4
   193f8:	strdeq	r9, [r1], -r4
   193fc:	strdeq	r9, [r1], -r4
   19400:	strdeq	r9, [r1], -r4
   19404:	strdeq	r9, [r1], -r4
   19408:	strdeq	r9, [r1], -r4
   1940c:	strdeq	r9, [r1], -r4
   19410:	strdeq	r9, [r1], -r4
   19414:	strdeq	r9, [r1], -r4
   19418:	strdeq	r9, [r1], -r4
   1941c:	strdeq	r9, [r1], -r4
   19420:	strdeq	r9, [r1], -r4
   19424:	strdeq	r9, [r1], -r4
   19428:	strdeq	r9, [r1], -r4
   1942c:	strdeq	r9, [r1], -r4
   19430:	strdeq	r9, [r1], -r4
   19434:	strdeq	r9, [r1], -r4
   19438:	andeq	r9, r1, ip, asr r5
   1943c:	andeq	r9, r1, ip, asr r5
   19440:	andeq	r9, r1, ip, asr r5
   19444:	andeq	r9, r1, ip, asr r5
   19448:	andeq	r9, r1, ip, asr r5
   1944c:	andeq	r9, r1, ip, asr r5
   19450:	andeq	r9, r1, ip, asr r5
   19454:	andeq	r9, r1, ip, asr r5
   19458:	strdeq	r9, [r1], -r4
   1945c:	strdeq	r9, [r1], -r4
   19460:	strdeq	r9, [r1], -r4
   19464:	strdeq	r9, [r1], -r4
   19468:	strdeq	r9, [r1], -r4
   1946c:	strdeq	r9, [r1], -r4
   19470:	strdeq	r9, [r1], -r4
   19474:	andeq	r9, r1, r4, asr #12
   19478:	strdeq	r9, [r1], -r4
   1947c:	strdeq	r9, [r1], -r4
   19480:	strdeq	r9, [r1], -r4
   19484:	strdeq	r9, [r1], -r4
   19488:	strdeq	r9, [r1], -r4
   1948c:	strdeq	r9, [r1], -r4
   19490:	strdeq	r9, [r1], -r4
   19494:	strdeq	r9, [r1], -r4
   19498:	strdeq	r9, [r1], -r4
   1949c:	strdeq	r9, [r1], -r4
   194a0:	strdeq	r9, [r1], -r4
   194a4:	strdeq	r9, [r1], -r4
   194a8:	strdeq	r9, [r1], -r4
   194ac:	strdeq	r9, [r1], -r4
   194b0:	strdeq	r9, [r1], -r4
   194b4:	strdeq	r9, [r1], -r4
   194b8:	strdeq	r9, [r1], -r4
   194bc:	strdeq	r9, [r1], -r4
   194c0:	strdeq	r9, [r1], -r4
   194c4:	strdeq	r9, [r1], -r4
   194c8:	strdeq	r9, [r1], -r4
   194cc:	strdeq	r9, [r1], -r4
   194d0:	strdeq	r9, [r1], -r4
   194d4:	strdeq	r9, [r1], -r4
   194d8:	andeq	r9, r1, r8, ror #12
   194dc:	strdeq	r9, [r1], -r4
   194e0:	strdeq	r9, [r1], -r4
   194e4:	strdeq	r9, [r1], -r4
   194e8:	strdeq	r9, [r1], -r4
   194ec:	strdeq	r9, [r1], -r4
   194f0:	strdeq	r9, [r1], -r4
   194f4:	andeq	r9, r1, r4, lsl r6
   194f8:	strdeq	r9, [r1], -r4
   194fc:	andeq	r9, r1, r8, asr r6
   19500:	andeq	r9, r1, ip, lsl r6
   19504:	strdeq	r9, [r1], -r4
   19508:	strdeq	r9, [r1], -r4
   1950c:	andeq	r9, r1, r4, lsr #12
   19510:	andeq	r9, r1, ip, lsr #12
   19514:	strdeq	r9, [r1], -r4
   19518:	strdeq	r9, [r1], -r4
   1951c:	strdeq	r9, [r1], -r4
   19520:	strdeq	r9, [r1], -r4
   19524:	strdeq	r9, [r1], -r4
   19528:	strdeq	r9, [r1], -r4
   1952c:	strdeq	r9, [r1], -r4
   19530:	andeq	r9, r1, r4, lsr r6
   19534:	strdeq	r9, [r1], -r4
   19538:	strdeq	r9, [r1], -r4
   1953c:	strdeq	r9, [r1], -r4
   19540:	andeq	r9, r1, ip, asr #12
   19544:	strdeq	r9, [r1], -r4
   19548:	andeq	r9, r1, ip, lsr r6
   1954c:	strdeq	r9, [r1], -r4
   19550:	andeq	r9, r1, r4, asr r6
   19554:	strdeq	r9, [r1], -r4
   19558:	andeq	r9, r1, r8, ror #12
   1955c:	sub	r5, r4, #48	; 0x30
   19560:	mov	r6, #2
   19564:	add	ip, ip, #1
   19568:	cmp	r6, #5
   1956c:	bcc	19208 <__assert_fail@plt+0x717c>
   19570:	b	1967c <__assert_fail@plt+0x75f0>
   19574:	cmp	r4, #63	; 0x3f
   19578:	bne	19678 <__assert_fail@plt+0x75ec>
   1957c:	mov	r4, #127	; 0x7f
   19580:	strb	r4, [lr], #1
   19584:	add	r9, r9, #1
   19588:	b	195e0 <__assert_fail@plt+0x7554>
   1958c:	add	r4, r4, r7, lsl #4
   19590:	sub	r5, r4, #48	; 0x30
   19594:	b	195a0 <__assert_fail@plt+0x7514>
   19598:	add	r4, r4, r7, lsl #4
   1959c:	sub	r5, r4, #55	; 0x37
   195a0:	add	ip, ip, #1
   195a4:	mov	r6, #3
   195a8:	cmp	r6, #5
   195ac:	bcc	19208 <__assert_fail@plt+0x717c>
   195b0:	b	1967c <__assert_fail@plt+0x75f0>
   195b4:	add	ip, ip, #1
   195b8:	mov	r6, #1
   195bc:	b	195e4 <__assert_fail@plt+0x7558>
   195c0:	add	ip, ip, #1
   195c4:	mov	r6, #4
   195c8:	b	195e4 <__assert_fail@plt+0x7558>
   195cc:	cmp	sl, #0
   195d0:	beq	1967c <__assert_fail@plt+0x75f0>
   195d4:	strb	sl, [lr], #1
   195d8:	add	r9, r9, #1
   195dc:	add	ip, ip, #1
   195e0:	mov	r6, #0
   195e4:	mov	r5, r7
   195e8:	cmp	r6, #5
   195ec:	bcc	19208 <__assert_fail@plt+0x717c>
   195f0:	b	1967c <__assert_fail@plt+0x75f0>
   195f4:	mov	sl, r4
   195f8:	b	19658 <__assert_fail@plt+0x75cc>
   195fc:	mov	r6, #6
   19600:	mov	r5, r7
   19604:	add	ip, ip, #1
   19608:	cmp	r6, #5
   1960c:	bcc	19208 <__assert_fail@plt+0x717c>
   19610:	b	1967c <__assert_fail@plt+0x75f0>
   19614:	mov	sl, #32
   19618:	b	19658 <__assert_fail@plt+0x75cc>
   1961c:	mov	sl, #8
   19620:	b	19658 <__assert_fail@plt+0x75cc>
   19624:	mov	sl, #27
   19628:	b	19658 <__assert_fail@plt+0x75cc>
   1962c:	mov	sl, #12
   19630:	b	19658 <__assert_fail@plt+0x75cc>
   19634:	mov	sl, #10
   19638:	b	19658 <__assert_fail@plt+0x75cc>
   1963c:	mov	sl, #9
   19640:	b	19658 <__assert_fail@plt+0x75cc>
   19644:	mov	sl, #127	; 0x7f
   19648:	b	19658 <__assert_fail@plt+0x75cc>
   1964c:	mov	sl, #13
   19650:	b	19658 <__assert_fail@plt+0x75cc>
   19654:	mov	sl, #11
   19658:	strb	sl, [lr], #1
   1965c:	add	r9, r9, #1
   19660:	mov	r6, #0
   19664:	mov	r5, sl
   19668:	add	ip, ip, #1
   1966c:	cmp	r6, #5
   19670:	bcc	19208 <__assert_fail@plt+0x717c>
   19674:	b	1967c <__assert_fail@plt+0x75f0>
   19678:	mov	r6, #6
   1967c:	str	lr, [r0]
   19680:	subs	r0, r6, #6
   19684:	str	ip, [r1]
   19688:	str	r9, [r3]
   1968c:	movwne	r0, #1
   19690:	sub	sp, fp, #28
   19694:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   19698:	bl	12038 <abort@plt>
   1969c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   196a0:	add	fp, sp, #28
   196a4:	sub	sp, sp, #36	; 0x24
   196a8:	sub	sp, sp, #8192	; 0x2000
   196ac:	mov	r7, r3
   196b0:	mov	r3, r2
   196b4:	mov	r2, r1
   196b8:	mov	r8, r0
   196bc:	add	r0, sp, #27
   196c0:	mov	r1, #0
   196c4:	add	r9, sp, #32
   196c8:	str	r1, [sp]
   196cc:	str	r0, [sp, #4]
   196d0:	add	r0, sp, #28
   196d4:	mov	r1, r8
   196d8:	str	r9, [sp, #28]
   196dc:	bl	19dd4 <__assert_fail@plt+0x7d48>
   196e0:	ldrb	r5, [sp, #27]
   196e4:	mov	r6, r0
   196e8:	movw	sl, #58124	; 0xe30c
   196ec:	movt	sl, #3
   196f0:	cmp	r5, #0
   196f4:	ldrne	r0, [fp, #8]
   196f8:	cmpne	r0, #0
   196fc:	bne	1970c <__assert_fail@plt+0x7680>
   19700:	cmp	r7, #0
   19704:	bne	19754 <__assert_fail@plt+0x76c8>
   19708:	b	197cc <__assert_fail@plt+0x7740>
   1970c:	movw	r0, #58632	; 0xe508
   19710:	movt	r0, #3
   19714:	mov	r2, r0
   19718:	ldrd	r0, [r0]
   1971c:	adds	r0, r0, #1
   19720:	adc	r1, r1, #0
   19724:	strd	r0, [r2]
   19728:	ldr	r0, [sl]
   1972c:	ldr	r1, [r0, #20]
   19730:	ldr	r2, [r0, #24]
   19734:	cmp	r1, r2
   19738:	bcs	19b38 <__assert_fail@plt+0x7aac>
   1973c:	add	r2, r1, #1
   19740:	str	r2, [r0, #20]
   19744:	mov	r0, #32
   19748:	strb	r0, [r1]
   1974c:	cmp	r7, #0
   19750:	beq	197cc <__assert_fail@plt+0x7740>
   19754:	movw	r4, #57800	; 0xe1c8
   19758:	movt	r4, #3
   1975c:	ldr	r1, [r4, #32]
   19760:	cmp	r1, #0
   19764:	beq	197b4 <__assert_fail@plt+0x7728>
   19768:	ldr	r0, [r4, #36]	; 0x24
   1976c:	cmp	r1, #2
   19770:	beq	1978c <__assert_fail@plt+0x7700>
   19774:	cmp	r1, #1
   19778:	bne	197a4 <__assert_fail@plt+0x7718>
   1977c:	ldrb	r0, [r0]
   19780:	cmp	r0, #48	; 0x30
   19784:	bne	197a4 <__assert_fail@plt+0x7718>
   19788:	b	197b4 <__assert_fail@plt+0x7728>
   1978c:	movw	r1, #46144	; 0xb440
   19790:	mov	r2, #2
   19794:	movt	r1, #2
   19798:	bl	1202c <strncmp@plt>
   1979c:	cmp	r0, #0
   197a0:	beq	197b4 <__assert_fail@plt+0x7728>
   197a4:	mov	r0, r4
   197a8:	bl	18e3c <__assert_fail@plt+0x6db0>
   197ac:	add	r0, r4, #8
   197b0:	bl	18e3c <__assert_fail@plt+0x6db0>
   197b4:	mov	r0, r4
   197b8:	bl	18e3c <__assert_fail@plt+0x6db0>
   197bc:	mov	r0, r7
   197c0:	bl	18e3c <__assert_fail@plt+0x6db0>
   197c4:	add	r0, r4, #8
   197c8:	bl	18e3c <__assert_fail@plt+0x6db0>
   197cc:	ldr	r0, [fp, #16]
   197d0:	cmp	r0, #0
   197d4:	beq	199e0 <__assert_fail@plt+0x7954>
   197d8:	movw	r0, #58825	; 0xe5c9
   197dc:	mov	r1, #0
   197e0:	movt	r0, #3
   197e4:	str	r1, [sp, #20]
   197e8:	ldrb	r0, [r0]
   197ec:	cmp	r0, #0
   197f0:	beq	19840 <__assert_fail@plt+0x77b4>
   197f4:	cmp	r5, #0
   197f8:	bne	19840 <__assert_fail@plt+0x77b4>
   197fc:	movw	r0, #61921	; 0xf1e1
   19800:	movt	r0, #3
   19804:	ldrb	r0, [r0]
   19808:	cmp	r0, #0
   1980c:	beq	19840 <__assert_fail@plt+0x77b4>
   19810:	ldr	r0, [sp, #28]
   19814:	ldrb	r1, [r0]
   19818:	ldr	r0, [sl]
   1981c:	ldr	r2, [r0, #20]
   19820:	ldr	r3, [r0, #24]
   19824:	cmp	r2, r3
   19828:	bcs	19b4c <__assert_fail@plt+0x7ac0>
   1982c:	add	r3, r2, #1
   19830:	str	r3, [r0, #20]
   19834:	strb	r1, [r2]
   19838:	mov	r0, #1
   1983c:	str	r0, [sp, #20]
   19840:	movw	r0, #58344	; 0xe3e8
   19844:	str	r6, [sp, #12]
   19848:	str	r8, [sp, #16]
   1984c:	movt	r0, #3
   19850:	ldr	r5, [r0]
   19854:	mov	r0, r5
   19858:	bl	11eac <strlen@plt>
   1985c:	add	r1, r0, #1
   19860:	mov	r0, #3
   19864:	bl	27820 <_obstack_memory_used@@Base+0x2f34>
   19868:	mov	r7, r0
   1986c:	ldrb	r0, [r5]
   19870:	movw	r9, #58376	; 0xe408
   19874:	movt	r9, #3
   19878:	mov	r4, r7
   1987c:	cmp	r0, #0
   19880:	beq	198d8 <__assert_fail@plt+0x784c>
   19884:	add	r6, r5, #1
   19888:	movw	r5, #47939	; 0xbb43
   1988c:	mov	r4, r7
   19890:	movt	r5, #2
   19894:	b	198c0 <__assert_fail@plt+0x7834>
   19898:	str	r1, [sp]
   1989c:	mov	r0, r4
   198a0:	mov	r1, #1
   198a4:	mvn	r2, #0
   198a8:	mov	r3, r5
   198ac:	bl	11edc <__sprintf_chk@plt>
   198b0:	add	r4, r4, r0
   198b4:	ldrb	r0, [r6], #1
   198b8:	cmp	r0, #0
   198bc:	beq	198d8 <__assert_fail@plt+0x784c>
   198c0:	uxtb	r1, r0
   198c4:	ldrb	r2, [r9, r1]
   198c8:	cmp	r2, #0
   198cc:	beq	19898 <__assert_fail@plt+0x780c>
   198d0:	strb	r0, [r4], #1
   198d4:	b	198b4 <__assert_fail@plt+0x7828>
   198d8:	mov	r0, #0
   198dc:	strb	r0, [r4]
   198e0:	ldr	r4, [fp, #16]
   198e4:	mov	r0, r4
   198e8:	bl	11eac <strlen@plt>
   198ec:	add	r1, r0, #1
   198f0:	mov	r0, #3
   198f4:	bl	27820 <_obstack_memory_used@@Base+0x2f34>
   198f8:	mov	r6, r0
   198fc:	ldrb	r0, [r4]
   19900:	mov	r4, r6
   19904:	cmp	r0, #0
   19908:	beq	19978 <__assert_fail@plt+0x78ec>
   1990c:	ldr	r1, [fp, #16]
   19910:	movw	r5, #47939	; 0xbb43
   19914:	mov	r8, #47	; 0x2f
   19918:	mov	r4, r6
   1991c:	movt	r5, #2
   19920:	add	sl, r1, #1
   19924:	b	19938 <__assert_fail@plt+0x78ac>
   19928:	strb	r8, [r4], #1
   1992c:	ldrb	r0, [sl], #1
   19930:	cmp	r0, #0
   19934:	beq	19978 <__assert_fail@plt+0x78ec>
   19938:	uxtb	r1, r0
   1993c:	cmp	r1, #47	; 0x2f
   19940:	beq	19928 <__assert_fail@plt+0x789c>
   19944:	ldrb	r2, [r9, r1]
   19948:	cmp	r2, #0
   1994c:	beq	19958 <__assert_fail@plt+0x78cc>
   19950:	strb	r0, [r4], #1
   19954:	b	1992c <__assert_fail@plt+0x78a0>
   19958:	str	r1, [sp]
   1995c:	mov	r0, r4
   19960:	mov	r1, #1
   19964:	mvn	r2, #0
   19968:	mov	r3, r5
   1996c:	bl	11edc <__sprintf_chk@plt>
   19970:	add	r4, r4, r0
   19974:	b	1992c <__assert_fail@plt+0x78a0>
   19978:	mov	r0, #0
   1997c:	movw	r1, #47938	; 0xbb42
   19980:	movw	r3, #38760	; 0x9768
   19984:	mov	r2, r7
   19988:	str	r6, [sp]
   1998c:	strb	r0, [r4]
   19990:	movt	r1, #2
   19994:	movt	r3, #2
   19998:	ldrb	r0, [r6]
   1999c:	cmp	r0, #47	; 0x2f
   199a0:	mov	r0, #1
   199a4:	moveq	r3, r1
   199a8:	movw	r1, #47912	; 0xbb28
   199ac:	movt	r1, #2
   199b0:	bl	11f00 <__printf_chk@plt>
   199b4:	mov	r0, r7
   199b8:	bl	1f89c <__assert_fail@plt+0xd810>
   199bc:	mov	r0, r6
   199c0:	bl	1f89c <__assert_fail@plt+0xd810>
   199c4:	add	r6, sp, #32
   199c8:	ldr	r8, [sp, #16]
   199cc:	movw	sl, #58124	; 0xe30c
   199d0:	mov	r9, r6
   199d4:	ldr	r6, [sp, #12]
   199d8:	movt	sl, #3
   199dc:	b	199e8 <__assert_fail@plt+0x795c>
   199e0:	mov	r0, #0
   199e4:	str	r0, [sp, #20]
   199e8:	movw	r4, #58248	; 0xe388
   199ec:	ldr	r7, [fp, #12]
   199f0:	movw	r5, #58632	; 0xe508
   199f4:	movt	r4, #3
   199f8:	movt	r5, #3
   199fc:	ldrb	r0, [r4]
   19a00:	cmp	r0, #0
   19a04:	cmpne	r7, #0
   19a08:	beq	19a48 <__assert_fail@plt+0x79bc>
   19a0c:	ldr	r0, [r7, #12]
   19a10:	ldr	r1, [r7, #16]
   19a14:	sub	r1, r1, r0
   19a18:	cmp	r1, #8
   19a1c:	bcs	19a30 <__assert_fail@plt+0x79a4>
   19a20:	mov	r0, r7
   19a24:	mov	r1, #8
   19a28:	bl	246bc <_obstack_newchunk@@Base>
   19a2c:	ldr	r0, [r7, #12]
   19a30:	ldrd	r2, [r5]
   19a34:	str	r3, [r0, #4]
   19a38:	str	r2, [r0]
   19a3c:	ldr	r0, [r7, #12]
   19a40:	add	r0, r0, #8
   19a44:	str	r0, [r7, #12]
   19a48:	ldr	r1, [sp, #20]
   19a4c:	ldr	r0, [sp, #28]
   19a50:	ldr	r3, [sl]
   19a54:	sub	r2, r6, r1, lsl #1
   19a58:	add	r0, r0, r1
   19a5c:	mov	r1, #1
   19a60:	bl	11c90 <fwrite_unlocked@plt>
   19a64:	ldrd	r0, [r5]
   19a68:	ldrb	r2, [r4]
   19a6c:	adds	r0, r0, r6
   19a70:	adc	r1, r1, #0
   19a74:	cmp	r2, #0
   19a78:	cmpne	r7, #0
   19a7c:	strd	r0, [r5]
   19a80:	beq	19ac0 <__assert_fail@plt+0x7a34>
   19a84:	ldr	r2, [r7, #12]
   19a88:	ldr	r3, [r7, #16]
   19a8c:	sub	r3, r3, r2
   19a90:	cmp	r3, #8
   19a94:	bcs	19aac <__assert_fail@plt+0x7a20>
   19a98:	mov	r0, r7
   19a9c:	mov	r1, #8
   19aa0:	bl	246bc <_obstack_newchunk@@Base>
   19aa4:	ldrd	r0, [r5]
   19aa8:	ldr	r2, [r7, #12]
   19aac:	str	r0, [r2]
   19ab0:	str	r1, [r2, #4]
   19ab4:	ldr	r0, [r7, #12]
   19ab8:	add	r0, r0, #8
   19abc:	str	r0, [r7, #12]
   19ac0:	ldr	r0, [fp, #16]
   19ac4:	cmp	r0, #0
   19ac8:	beq	19b14 <__assert_fail@plt+0x7a88>
   19acc:	ldr	r1, [sl]
   19ad0:	movw	r0, #47932	; 0xbb3c
   19ad4:	movt	r0, #2
   19ad8:	bl	11b94 <fputs_unlocked@plt>
   19adc:	ldr	r0, [sp, #20]
   19ae0:	cmp	r0, #0
   19ae4:	beq	19b14 <__assert_fail@plt+0x7a88>
   19ae8:	ldr	r0, [sp, #28]
   19aec:	add	r0, r0, r6
   19af0:	ldrb	r1, [r0, #-1]
   19af4:	ldr	r0, [sl]
   19af8:	ldr	r2, [r0, #20]
   19afc:	ldr	r3, [r0, #24]
   19b00:	cmp	r2, r3
   19b04:	bcs	19b54 <__assert_fail@plt+0x7ac8>
   19b08:	add	r3, r2, #1
   19b0c:	str	r3, [r0, #20]
   19b10:	strb	r1, [r2]
   19b14:	ldr	r0, [sp, #28]
   19b18:	cmp	r0, r9
   19b1c:	cmpne	r0, r8
   19b20:	beq	19b28 <__assert_fail@plt+0x7a9c>
   19b24:	bl	1f89c <__assert_fail@plt+0xd810>
   19b28:	ldrb	r0, [sp, #27]
   19b2c:	add	r0, r6, r0
   19b30:	sub	sp, fp, #28
   19b34:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   19b38:	mov	r1, #32
   19b3c:	bl	11f54 <__overflow@plt>
   19b40:	cmp	r7, #0
   19b44:	bne	19754 <__assert_fail@plt+0x76c8>
   19b48:	b	197cc <__assert_fail@plt+0x7740>
   19b4c:	bl	11f54 <__overflow@plt>
   19b50:	b	19838 <__assert_fail@plt+0x77ac>
   19b54:	bl	11f54 <__overflow@plt>
   19b58:	b	19b14 <__assert_fail@plt+0x7a88>
   19b5c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   19b60:	add	fp, sp, #28
   19b64:	sub	sp, sp, #132	; 0x84
   19b68:	movw	r0, #57800	; 0xe1c8
   19b6c:	movw	r5, #58368	; 0xe400
   19b70:	movw	r6, #58364	; 0xe3fc
   19b74:	movw	r8, #58124	; 0xe30c
   19b78:	movw	sl, #58640	; 0xe510
   19b7c:	add	r7, sp, #4
   19b80:	movt	r0, #3
   19b84:	movt	r5, #3
   19b88:	movt	r6, #3
   19b8c:	movt	r8, #3
   19b90:	movt	sl, #3
   19b94:	add	r9, r0, #8
   19b98:	b	19bc0 <__assert_fail@plt+0x7b34>
   19b9c:	mov	r0, r4
   19ba0:	mov	r1, #0
   19ba4:	bl	11c84 <signal@plt>
   19ba8:	mov	r0, r4
   19bac:	bl	11bac <raise@plt>
   19bb0:	mov	r0, #2
   19bb4:	mov	r1, r7
   19bb8:	mov	r2, #0
   19bbc:	bl	11c0c <sigprocmask@plt>
   19bc0:	ldr	r0, [r5]
   19bc4:	cmp	r0, #0
   19bc8:	bne	19bd8 <__assert_fail@plt+0x7b4c>
   19bcc:	ldr	r0, [r6]
   19bd0:	cmp	r0, #0
   19bd4:	beq	19c38 <__assert_fail@plt+0x7bac>
   19bd8:	movw	r0, #58360	; 0xe3f8
   19bdc:	movt	r0, #3
   19be0:	ldrb	r0, [r0]
   19be4:	cmp	r0, #1
   19be8:	bne	19c00 <__assert_fail@plt+0x7b74>
   19bec:	movw	r0, #57800	; 0xe1c8
   19bf0:	movt	r0, #3
   19bf4:	bl	18e3c <__assert_fail@plt+0x6db0>
   19bf8:	mov	r0, r9
   19bfc:	bl	18e3c <__assert_fail@plt+0x6db0>
   19c00:	ldr	r0, [r8]
   19c04:	bl	11d08 <fflush_unlocked@plt>
   19c08:	mov	r0, #0
   19c0c:	mov	r1, sl
   19c10:	mov	r2, r7
   19c14:	bl	11c0c <sigprocmask@plt>
   19c18:	ldr	r4, [r5]
   19c1c:	ldr	r0, [r6]
   19c20:	cmp	r0, #0
   19c24:	beq	19b9c <__assert_fail@plt+0x7b10>
   19c28:	sub	r0, r0, #1
   19c2c:	mov	r4, #19
   19c30:	str	r0, [r6]
   19c34:	b	19ba8 <__assert_fail@plt+0x7b1c>
   19c38:	sub	sp, fp, #28
   19c3c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   19c40:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   19c44:	add	fp, sp, #28
   19c48:	sub	sp, sp, #292	; 0x124
   19c4c:	mov	r7, r3
   19c50:	ldr	r3, [fp, #8]
   19c54:	mov	r4, r2
   19c58:	add	r5, sp, #32
   19c5c:	mov	r2, r7
   19c60:	str	r5, [sp]
   19c64:	bl	11f48 <statx@plt>
   19c68:	cmp	r0, #0
   19c6c:	bmi	19db4 <__assert_fail@plt+0x7d28>
   19c70:	add	r7, r4, #32
   19c74:	ldr	r8, [sp, #168]	; 0xa8
   19c78:	add	r2, r5, #40	; 0x28
   19c7c:	add	r6, r4, #88	; 0x58
   19c80:	add	r1, r5, #32
   19c84:	add	ip, r5, #96	; 0x60
   19c88:	add	r3, r5, #112	; 0x70
   19c8c:	add	lr, r4, #80	; 0x50
   19c90:	str	r7, [sp, #4]
   19c94:	add	r7, r4, #48	; 0x30
   19c98:	str	r2, [sp, #16]
   19c9c:	add	r2, r5, #48	; 0x30
   19ca0:	str	r6, [sp, #28]
   19ca4:	add	r6, r4, #96	; 0x60
   19ca8:	str	r7, [sp, #8]
   19cac:	add	r7, r4, #64	; 0x40
   19cb0:	str	r2, [sp, #24]
   19cb4:	add	r2, r5, #64	; 0x40
   19cb8:	str	r7, [sp, #12]
   19cbc:	add	r7, r4, #72	; 0x48
   19cc0:	str	r7, [sp, #20]
   19cc4:	ldr	r7, [sp, #172]	; 0xac
   19cc8:	mov	r9, r8
   19ccc:	bfc	r9, #0, #12
   19cd0:	bic	sl, r7, #255	; 0xff
   19cd4:	uxtb	r7, r7
   19cd8:	orr	r9, r9, sl, lsr #20
   19cdc:	bfi	r7, r8, #8, #12
   19ce0:	orr	r8, r7, sl, lsl #12
   19ce4:	strd	r8, [r4]
   19ce8:	ldrd	r8, [r1]
   19cec:	strd	r8, [r6]
   19cf0:	mov	r8, r5
   19cf4:	add	r9, r4, #16
   19cf8:	ldrh	r1, [sp, #60]	; 0x3c
   19cfc:	ldr	r5, [sp, #56]	; 0x38
   19d00:	ldr	r6, [sp, #48]	; 0x30
   19d04:	ldr	r7, [sp, #52]	; 0x34
   19d08:	stm	r9, {r1, r6, r7}
   19d0c:	str	r5, [r4, #28]
   19d10:	ldr	r5, [sp, #164]	; 0xa4
   19d14:	ldr	r1, [sp, #160]	; 0xa0
   19d18:	bic	r6, r5, #255	; 0xff
   19d1c:	uxtb	r5, r5
   19d20:	mov	r7, r1
   19d24:	bfc	r7, #0, #12
   19d28:	bfi	r5, r1, #8, #12
   19d2c:	ldr	r1, [sp, #4]
   19d30:	orr	r7, r7, r6, lsr #20
   19d34:	orr	r6, r5, r6, lsl #12
   19d38:	strd	r6, [r1]
   19d3c:	ldr	r1, [sp, #16]
   19d40:	ldrd	r6, [r1]
   19d44:	ldr	r1, [sp, #8]
   19d48:	strd	r6, [r1]
   19d4c:	ldr	r1, [sp, #36]	; 0x24
   19d50:	str	r1, [r4, #56]	; 0x38
   19d54:	ldr	r1, [sp, #24]
   19d58:	ldrd	r6, [r1]
   19d5c:	ldr	r1, [sp, #12]
   19d60:	strd	r6, [r1]
   19d64:	ldr	r6, [r2]
   19d68:	ldr	r7, [r2, #8]
   19d6c:	ldr	r1, [sp, #20]
   19d70:	strd	r6, [r1]
   19d74:	ldr	r2, [r3]
   19d78:	ldr	r3, [r3, #8]
   19d7c:	strd	r2, [lr]
   19d80:	ldr	r2, [ip]
   19d84:	ldr	r3, [ip, #8]
   19d88:	ldr	r1, [sp, #28]
   19d8c:	strd	r2, [r1]
   19d90:	ldr	r1, [fp, #8]
   19d94:	tst	r1, #2048	; 0x800
   19d98:	beq	19db4 <__assert_fail@plt+0x7d28>
   19d9c:	ldrb	r1, [sp, #33]	; 0x21
   19da0:	tst	r1, #8
   19da4:	bne	19dbc <__assert_fail@plt+0x7d30>
   19da8:	mvn	r1, #0
   19dac:	str	r1, [r4, #80]	; 0x50
   19db0:	str	r1, [r4, #84]	; 0x54
   19db4:	sub	sp, fp, #28
   19db8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   19dbc:	add	r1, r8, #80	; 0x50
   19dc0:	ldr	r2, [r1]
   19dc4:	ldr	r3, [r1, #8]
   19dc8:	strd	r2, [lr]
   19dcc:	sub	sp, fp, #28
   19dd0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   19dd4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   19dd8:	add	fp, sp, #28
   19ddc:	sub	sp, sp, #52	; 0x34
   19de0:	ldr	r7, [r0]
   19de4:	mov	r9, r0
   19de8:	mov	r0, r2
   19dec:	mov	r5, r3
   19df0:	mov	r6, r2
   19df4:	mov	r4, r1
   19df8:	bl	24a64 <_obstack_memory_used@@Base+0x178>
   19dfc:	movw	r1, #58824	; 0xe5c8
   19e00:	movt	r1, #3
   19e04:	ldrb	r1, [r1]
   19e08:	cmp	r1, #0
   19e0c:	beq	19e30 <__assert_fail@plt+0x7da4>
   19e10:	sub	r1, r0, #1
   19e14:	clz	r0, r0
   19e18:	mov	r2, #0
   19e1c:	cmp	r1, #2
   19e20:	lsr	r0, r0, #5
   19e24:	movwcc	r2, #1
   19e28:	orr	r8, r0, r2
   19e2c:	b	19e34 <__assert_fail@plt+0x7da8>
   19e30:	mov	r8, #0
   19e34:	cmp	r5, #0
   19e38:	str	r9, [sp, #32]
   19e3c:	beq	19ebc <__assert_fail@plt+0x7e30>
   19e40:	mov	r0, r7
   19e44:	mov	r1, #8192	; 0x2000
   19e48:	mov	r2, r4
   19e4c:	mvn	r3, #0
   19e50:	str	r6, [sp]
   19e54:	bl	24b28 <_obstack_memory_used@@Base+0x23c>
   19e58:	mov	sl, r0
   19e5c:	cmp	r0, #8192	; 0x2000
   19e60:	bcc	19e88 <__assert_fail@plt+0x7dfc>
   19e64:	add	r7, sl, #1
   19e68:	mov	r0, r7
   19e6c:	bl	27750 <_obstack_memory_used@@Base+0x2e64>
   19e70:	mov	r1, r7
   19e74:	mov	r2, r4
   19e78:	mvn	r3, #0
   19e7c:	str	r6, [sp]
   19e80:	mov	r7, r0
   19e84:	bl	24b28 <_obstack_memory_used@@Base+0x23c>
   19e88:	ldrb	r0, [r7]
   19e8c:	ldrb	r1, [r4]
   19e90:	mov	r5, #1
   19e94:	cmp	r1, r0
   19e98:	bne	19eac <__assert_fail@plt+0x7e20>
   19e9c:	mov	r0, r4
   19ea0:	bl	11eac <strlen@plt>
   19ea4:	subs	r5, r0, sl
   19ea8:	movwne	r5, #1
   19eac:	ldr	r6, [fp, #8]
   19eb0:	cmp	r8, #0
   19eb4:	bne	19f04 <__assert_fail@plt+0x7e78>
   19eb8:	b	1a33c <__assert_fail@plt+0x82b0>
   19ebc:	mov	r0, r4
   19ec0:	bl	11eac <strlen@plt>
   19ec4:	mov	sl, r0
   19ec8:	mov	r5, #0
   19ecc:	cmp	r8, #0
   19ed0:	beq	1a334 <__assert_fail@plt+0x82a8>
   19ed4:	add	r6, sl, #1
   19ed8:	cmp	sl, #8192	; 0x2000
   19edc:	bcc	19eec <__assert_fail@plt+0x7e60>
   19ee0:	mov	r0, r6
   19ee4:	bl	27750 <_obstack_memory_used@@Base+0x2e64>
   19ee8:	mov	r7, r0
   19eec:	mov	r0, r7
   19ef0:	mov	r1, r4
   19ef4:	mov	r2, r6
   19ef8:	bl	11c60 <memcpy@plt>
   19efc:	ldr	r6, [fp, #8]
   19f00:	mov	r5, #0
   19f04:	add	r0, r7, sl
   19f08:	str	r0, [sp, #28]
   19f0c:	bl	11d68 <__ctype_get_mb_cur_max@plt>
   19f10:	cmp	r0, #1
   19f14:	str	r5, [sp, #24]
   19f18:	bls	1a2e8 <__assert_fail@plt+0x825c>
   19f1c:	cmp	sl, #1
   19f20:	blt	1a3ac <__assert_fail@plt+0x8320>
   19f24:	ldr	r3, [sp, #28]
   19f28:	mov	r4, #0
   19f2c:	add	sl, sp, #36	; 0x24
   19f30:	add	r6, sp, #40	; 0x28
   19f34:	mov	r9, #0
   19f38:	mov	r8, r7
   19f3c:	mov	r5, r7
   19f40:	ldrb	r0, [r5]
   19f44:	sub	r1, r0, #32
   19f48:	cmp	r1, #94	; 0x5e
   19f4c:	bhi	1a0ec <__assert_fail@plt+0x8060>
   19f50:	add	r2, pc, #0
   19f54:	ldr	pc, [r2, r1, lsl #2]
   19f58:	ldrdeq	sl, [r1], -r4
   19f5c:	ldrdeq	sl, [r1], -r4
   19f60:	ldrdeq	sl, [r1], -r4
   19f64:	ldrdeq	sl, [r1], -r4
   19f68:	andeq	sl, r1, ip, ror #1
   19f6c:	ldrdeq	sl, [r1], -r4
   19f70:	ldrdeq	sl, [r1], -r4
   19f74:	ldrdeq	sl, [r1], -r4
   19f78:	ldrdeq	sl, [r1], -r4
   19f7c:	ldrdeq	sl, [r1], -r4
   19f80:	ldrdeq	sl, [r1], -r4
   19f84:	ldrdeq	sl, [r1], -r4
   19f88:	ldrdeq	sl, [r1], -r4
   19f8c:	ldrdeq	sl, [r1], -r4
   19f90:	ldrdeq	sl, [r1], -r4
   19f94:	ldrdeq	sl, [r1], -r4
   19f98:	ldrdeq	sl, [r1], -r4
   19f9c:	ldrdeq	sl, [r1], -r4
   19fa0:	ldrdeq	sl, [r1], -r4
   19fa4:	ldrdeq	sl, [r1], -r4
   19fa8:	ldrdeq	sl, [r1], -r4
   19fac:	ldrdeq	sl, [r1], -r4
   19fb0:	ldrdeq	sl, [r1], -r4
   19fb4:	ldrdeq	sl, [r1], -r4
   19fb8:	ldrdeq	sl, [r1], -r4
   19fbc:	ldrdeq	sl, [r1], -r4
   19fc0:	ldrdeq	sl, [r1], -r4
   19fc4:	ldrdeq	sl, [r1], -r4
   19fc8:	ldrdeq	sl, [r1], -r4
   19fcc:	ldrdeq	sl, [r1], -r4
   19fd0:	ldrdeq	sl, [r1], -r4
   19fd4:	ldrdeq	sl, [r1], -r4
   19fd8:	andeq	sl, r1, ip, ror #1
   19fdc:	ldrdeq	sl, [r1], -r4
   19fe0:	ldrdeq	sl, [r1], -r4
   19fe4:	ldrdeq	sl, [r1], -r4
   19fe8:	ldrdeq	sl, [r1], -r4
   19fec:	ldrdeq	sl, [r1], -r4
   19ff0:	ldrdeq	sl, [r1], -r4
   19ff4:	ldrdeq	sl, [r1], -r4
   19ff8:	ldrdeq	sl, [r1], -r4
   19ffc:	ldrdeq	sl, [r1], -r4
   1a000:	ldrdeq	sl, [r1], -r4
   1a004:	ldrdeq	sl, [r1], -r4
   1a008:	ldrdeq	sl, [r1], -r4
   1a00c:	ldrdeq	sl, [r1], -r4
   1a010:	ldrdeq	sl, [r1], -r4
   1a014:	ldrdeq	sl, [r1], -r4
   1a018:	ldrdeq	sl, [r1], -r4
   1a01c:	ldrdeq	sl, [r1], -r4
   1a020:	ldrdeq	sl, [r1], -r4
   1a024:	ldrdeq	sl, [r1], -r4
   1a028:	ldrdeq	sl, [r1], -r4
   1a02c:	ldrdeq	sl, [r1], -r4
   1a030:	ldrdeq	sl, [r1], -r4
   1a034:	ldrdeq	sl, [r1], -r4
   1a038:	ldrdeq	sl, [r1], -r4
   1a03c:	ldrdeq	sl, [r1], -r4
   1a040:	ldrdeq	sl, [r1], -r4
   1a044:	ldrdeq	sl, [r1], -r4
   1a048:	ldrdeq	sl, [r1], -r4
   1a04c:	ldrdeq	sl, [r1], -r4
   1a050:	ldrdeq	sl, [r1], -r4
   1a054:	ldrdeq	sl, [r1], -r4
   1a058:	andeq	sl, r1, ip, ror #1
   1a05c:	ldrdeq	sl, [r1], -r4
   1a060:	ldrdeq	sl, [r1], -r4
   1a064:	ldrdeq	sl, [r1], -r4
   1a068:	ldrdeq	sl, [r1], -r4
   1a06c:	ldrdeq	sl, [r1], -r4
   1a070:	ldrdeq	sl, [r1], -r4
   1a074:	ldrdeq	sl, [r1], -r4
   1a078:	ldrdeq	sl, [r1], -r4
   1a07c:	ldrdeq	sl, [r1], -r4
   1a080:	ldrdeq	sl, [r1], -r4
   1a084:	ldrdeq	sl, [r1], -r4
   1a088:	ldrdeq	sl, [r1], -r4
   1a08c:	ldrdeq	sl, [r1], -r4
   1a090:	ldrdeq	sl, [r1], -r4
   1a094:	ldrdeq	sl, [r1], -r4
   1a098:	ldrdeq	sl, [r1], -r4
   1a09c:	ldrdeq	sl, [r1], -r4
   1a0a0:	ldrdeq	sl, [r1], -r4
   1a0a4:	ldrdeq	sl, [r1], -r4
   1a0a8:	ldrdeq	sl, [r1], -r4
   1a0ac:	ldrdeq	sl, [r1], -r4
   1a0b0:	ldrdeq	sl, [r1], -r4
   1a0b4:	ldrdeq	sl, [r1], -r4
   1a0b8:	ldrdeq	sl, [r1], -r4
   1a0bc:	ldrdeq	sl, [r1], -r4
   1a0c0:	ldrdeq	sl, [r1], -r4
   1a0c4:	ldrdeq	sl, [r1], -r4
   1a0c8:	ldrdeq	sl, [r1], -r4
   1a0cc:	ldrdeq	sl, [r1], -r4
   1a0d0:	ldrdeq	sl, [r1], -r4
   1a0d4:	strb	r0, [r8], #1
   1a0d8:	add	r9, r9, #1
   1a0dc:	add	r5, r5, #1
   1a0e0:	cmp	r5, r3
   1a0e4:	bcc	19f40 <__assert_fail@plt+0x7eb4>
   1a0e8:	b	1a3b4 <__assert_fail@plt+0x8328>
   1a0ec:	str	r4, [sp, #44]	; 0x2c
   1a0f0:	str	r4, [sp, #40]	; 0x28
   1a0f4:	str	r7, [sp, #8]
   1a0f8:	b	1a124 <__assert_fail@plt+0x8098>
   1a0fc:	mov	r0, #63	; 0x3f
   1a100:	add	r5, r5, r4
   1a104:	strb	r0, [r8], #1
   1a108:	mov	r0, #1
   1a10c:	add	r9, r0, r9
   1a110:	mov	r0, r6
   1a114:	bl	11c78 <mbsinit@plt>
   1a118:	ldr	r3, [sp, #28]
   1a11c:	cmp	r0, #0
   1a120:	bne	1a2d8 <__assert_fail@plt+0x824c>
   1a124:	sub	r2, r3, r5
   1a128:	mov	r0, sl
   1a12c:	mov	r1, r5
   1a130:	mov	r3, r6
   1a134:	bl	21e2c <__assert_fail@plt+0xfda0>
   1a138:	cmp	r0, #0
   1a13c:	beq	1a158 <__assert_fail@plt+0x80cc>
   1a140:	mov	r4, r0
   1a144:	cmn	r0, #2
   1a148:	beq	1a2b8 <__assert_fail@plt+0x822c>
   1a14c:	cmn	r4, #1
   1a150:	bne	1a15c <__assert_fail@plt+0x80d0>
   1a154:	b	1a2c4 <__assert_fail@plt+0x8238>
   1a158:	mov	r4, #1
   1a15c:	ldr	r0, [sp, #36]	; 0x24
   1a160:	bl	11c00 <wcwidth@plt>
   1a164:	cmp	r0, #0
   1a168:	bmi	1a0fc <__assert_fail@plt+0x8070>
   1a16c:	cmp	r4, #16
   1a170:	bcc	1a25c <__assert_fail@plt+0x81d0>
   1a174:	add	r1, r5, r4
   1a178:	cmp	r8, r1
   1a17c:	addcc	r1, r8, r4
   1a180:	cmpcc	r5, r1
   1a184:	bcc	1a25c <__assert_fail@plt+0x81d0>
   1a188:	str	r0, [sp, #16]
   1a18c:	bic	r0, r4, #15
   1a190:	mov	r1, #1
   1a194:	mov	r3, #0
   1a198:	sub	r7, r0, #16
   1a19c:	str	r0, [sp, #12]
   1a1a0:	add	r2, r1, r7, lsr #4
   1a1a4:	cmp	r7, #48	; 0x30
   1a1a8:	and	r0, r2, #3
   1a1ac:	str	r0, [sp, #20]
   1a1b0:	mov	r0, #48	; 0x30
   1a1b4:	bcc	1a210 <__assert_fail@plt+0x8184>
   1a1b8:	ldr	r1, [sp, #20]
   1a1bc:	mov	r3, #0
   1a1c0:	sub	r2, r2, r1
   1a1c4:	add	r7, r5, r3
   1a1c8:	add	ip, r8, r3
   1a1cc:	subs	r2, r2, #4
   1a1d0:	add	r3, r3, #64	; 0x40
   1a1d4:	mov	r1, r7
   1a1d8:	mov	lr, ip
   1a1dc:	add	sl, r7, #16
   1a1e0:	add	r6, ip, #16
   1a1e4:	vld1.8	{d16-d17}, [r1], r0
   1a1e8:	vst1.8	{d16-d17}, [lr], r0
   1a1ec:	vld1.8	{d16-d17}, [sl]
   1a1f0:	vst1.8	{d16-d17}, [r6]
   1a1f4:	add	r6, r7, #32
   1a1f8:	add	r7, ip, #32
   1a1fc:	vld1.8	{d16-d17}, [r6]
   1a200:	vst1.8	{d16-d17}, [r7]
   1a204:	vld1.8	{d16-d17}, [r1]
   1a208:	vst1.8	{d16-d17}, [lr]
   1a20c:	bne	1a1c4 <__assert_fail@plt+0x8138>
   1a210:	ldr	r1, [sp, #20]
   1a214:	ldr	r0, [sp, #16]
   1a218:	cmp	r1, #0
   1a21c:	beq	1a23c <__assert_fail@plt+0x81b0>
   1a220:	add	r2, r8, r3
   1a224:	add	r3, r5, r3
   1a228:	rsb	r7, r1, #0
   1a22c:	vld1.8	{d16-d17}, [r3]!
   1a230:	adds	r7, r7, #1
   1a234:	vst1.8	{d16-d17}, [r2]!
   1a238:	bcc	1a22c <__assert_fail@plt+0x81a0>
   1a23c:	ldr	r1, [sp, #12]
   1a240:	ldr	r7, [sp, #8]
   1a244:	add	sl, sp, #36	; 0x24
   1a248:	add	r6, sp, #40	; 0x28
   1a24c:	add	r5, r5, r1
   1a250:	add	r8, r8, r1
   1a254:	subs	r4, r4, r1
   1a258:	beq	1a10c <__assert_fail@plt+0x8080>
   1a25c:	ands	r2, r4, #3
   1a260:	sub	r1, r4, #1
   1a264:	beq	1a27c <__assert_fail@plt+0x81f0>
   1a268:	ldrb	r3, [r5], #1
   1a26c:	subs	r2, r2, #1
   1a270:	sub	r4, r4, #1
   1a274:	strb	r3, [r8], #1
   1a278:	bne	1a268 <__assert_fail@plt+0x81dc>
   1a27c:	cmp	r1, #3
   1a280:	bcc	1a10c <__assert_fail@plt+0x8080>
   1a284:	ldrb	r1, [r5]
   1a288:	subs	r4, r4, #4
   1a28c:	strb	r1, [r8]
   1a290:	ldrb	r1, [r5, #1]
   1a294:	strb	r1, [r8, #1]
   1a298:	ldrb	r1, [r5, #2]
   1a29c:	strb	r1, [r8, #2]
   1a2a0:	ldrb	r1, [r5, #3]
   1a2a4:	add	r5, r5, #4
   1a2a8:	strb	r1, [r8, #3]
   1a2ac:	add	r8, r8, #4
   1a2b0:	bne	1a284 <__assert_fail@plt+0x81f8>
   1a2b4:	b	1a10c <__assert_fail@plt+0x8080>
   1a2b8:	ldr	r3, [sp, #28]
   1a2bc:	mov	r5, r3
   1a2c0:	b	1a2cc <__assert_fail@plt+0x8240>
   1a2c4:	ldr	r3, [sp, #28]
   1a2c8:	add	r5, r5, #1
   1a2cc:	mov	r0, #63	; 0x3f
   1a2d0:	add	r9, r9, #1
   1a2d4:	strb	r0, [r8], #1
   1a2d8:	mov	r4, #0
   1a2dc:	cmp	r5, r3
   1a2e0:	bcc	19f40 <__assert_fail@plt+0x7eb4>
   1a2e4:	b	1a3b4 <__assert_fail@plt+0x8328>
   1a2e8:	cmp	sl, #1
   1a2ec:	blt	1a3c0 <__assert_fail@plt+0x8334>
   1a2f0:	bl	11e64 <__ctype_b_loc@plt>
   1a2f4:	ldr	r4, [sp, #28]
   1a2f8:	mov	r1, #63	; 0x3f
   1a2fc:	mov	ip, r7
   1a300:	mov	r2, r7
   1a304:	ldrb	r3, [r2]
   1a308:	ldr	r7, [r0]
   1a30c:	add	r3, r7, r3, lsl #1
   1a310:	ldrb	r3, [r3, #1]
   1a314:	tst	r3, #64	; 0x40
   1a318:	strbeq	r1, [r2]
   1a31c:	add	r2, r2, #1
   1a320:	cmp	r2, r4
   1a324:	bcc	1a304 <__assert_fail@plt+0x8278>
   1a328:	mov	r9, sl
   1a32c:	mov	r7, ip
   1a330:	b	1a3cc <__assert_fail@plt+0x8340>
   1a334:	ldr	r6, [fp, #8]
   1a338:	mov	r7, r4
   1a33c:	cmp	r6, #0
   1a340:	str	r5, [sp, #24]
   1a344:	beq	1a36c <__assert_fail@plt+0x82e0>
   1a348:	bl	11d68 <__ctype_get_mb_cur_max@plt>
   1a34c:	cmp	r0, #2
   1a350:	bcc	1a370 <__assert_fail@plt+0x82e4>
   1a354:	mov	r0, r7
   1a358:	mov	r1, sl
   1a35c:	mov	r2, #0
   1a360:	bl	22340 <__assert_fail@plt+0x102b4>
   1a364:	mov	r9, r0
   1a368:	b	1a3cc <__assert_fail@plt+0x8340>
   1a36c:	b	1a3cc <__assert_fail@plt+0x8340>
   1a370:	cmp	sl, #1
   1a374:	blt	1a3c8 <__assert_fail@plt+0x833c>
   1a378:	add	r4, r7, sl
   1a37c:	bl	11e64 <__ctype_b_loc@plt>
   1a380:	ldr	r0, [r0]
   1a384:	mov	r9, #0
   1a388:	mov	r1, r7
   1a38c:	ldrb	r2, [r1], #1
   1a390:	cmp	r1, r4
   1a394:	add	r2, r0, r2, lsl #1
   1a398:	ldrh	r2, [r2]
   1a39c:	ubfx	r2, r2, #14, #1
   1a3a0:	add	r9, r9, r2
   1a3a4:	bcc	1a38c <__assert_fail@plt+0x8300>
   1a3a8:	b	1a3cc <__assert_fail@plt+0x8340>
   1a3ac:	mov	r9, #0
   1a3b0:	mov	r8, r7
   1a3b4:	ldr	r6, [fp, #8]
   1a3b8:	sub	sl, r8, r7
   1a3bc:	b	1a3cc <__assert_fail@plt+0x8340>
   1a3c0:	mov	r9, sl
   1a3c4:	b	1a3cc <__assert_fail@plt+0x8340>
   1a3c8:	mov	r9, #0
   1a3cc:	movw	r1, #58825	; 0xe5c9
   1a3d0:	ldr	r0, [fp, #12]
   1a3d4:	movt	r1, #3
   1a3d8:	ldrb	r2, [r1]
   1a3dc:	mov	r1, #0
   1a3e0:	cmp	r2, #0
   1a3e4:	beq	1a400 <__assert_fail@plt+0x8374>
   1a3e8:	movw	r2, #61921	; 0xf1e1
   1a3ec:	movt	r2, #3
   1a3f0:	ldrb	r2, [r2]
   1a3f4:	cmp	r2, #1
   1a3f8:	ldreq	r1, [sp, #24]
   1a3fc:	eoreq	r1, r1, #1
   1a400:	strb	r1, [r0]
   1a404:	ldr	r0, [sp, #32]
   1a408:	cmp	r6, #0
   1a40c:	strne	r9, [r6]
   1a410:	str	r7, [r0]
   1a414:	mov	r0, sl
   1a418:	sub	sp, fp, #28
   1a41c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1a420:	push	{fp, lr}
   1a424:	mov	fp, sp
   1a428:	sub	sp, sp, #8
   1a42c:	mov	lr, r0
   1a430:	movw	r0, #58800	; 0xe5b0
   1a434:	mov	ip, r1
   1a438:	movt	r0, #3
   1a43c:	ldrb	r3, [r0]
   1a440:	mov	r0, #2
   1a444:	cmp	r3, #0
   1a448:	movw	r3, #58245	; 0xe385
   1a44c:	movt	r3, #3
   1a450:	movwne	r0, #258	; 0x102
   1a454:	ldrb	r3, [r3]
   1a458:	bfi	r0, r3, #10, #1
   1a45c:	movw	r3, #58168	; 0xe338
   1a460:	movt	r3, #3
   1a464:	ldr	r3, [r3]
   1a468:	cmp	r3, #0
   1a46c:	bne	1a4dc <__assert_fail@plt+0x8450>
   1a470:	movw	r3, #58772	; 0xe594
   1a474:	movt	r3, #3
   1a478:	ldr	r3, [r3]
   1a47c:	cmp	r3, #4
   1a480:	bcs	1a558 <__assert_fail@plt+0x84cc>
   1a484:	movw	r2, #54668	; 0xd58c
   1a488:	movt	r2, #2
   1a48c:	ldr	r2, [r2, r3, lsl #2]
   1a490:	orr	r0, r2, r0
   1a494:	movw	r2, #58776	; 0xe598
   1a498:	movt	r2, #3
   1a49c:	ldrb	r2, [r2]
   1a4a0:	cmp	r2, #1
   1a4a4:	bne	1a4bc <__assert_fail@plt+0x8430>
   1a4a8:	movw	r2, #58804	; 0xe5b4
   1a4ac:	movt	r2, #3
   1a4b0:	ldrb	r2, [r2]
   1a4b4:	cmp	r2, #1
   1a4b8:	bne	1a4c4 <__assert_fail@plt+0x8438>
   1a4bc:	orr	r0, r0, #524	; 0x20c
   1a4c0:	b	1a4c8 <__assert_fail@plt+0x843c>
   1a4c4:	orr	r0, r0, #516	; 0x204
   1a4c8:	movw	r2, #58802	; 0xe5b2
   1a4cc:	movt	r2, #3
   1a4d0:	ldrb	r2, [r2]
   1a4d4:	cmp	r2, #0
   1a4d8:	orreq	r0, r0, #16
   1a4dc:	movw	r2, #58240	; 0xe380
   1a4e0:	movt	r2, #3
   1a4e4:	ldr	r3, [r2]
   1a4e8:	cmp	r3, #6
   1a4ec:	bhi	1a558 <__assert_fail@plt+0x84cc>
   1a4f0:	mov	r2, #1
   1a4f4:	mov	r1, #87	; 0x57
   1a4f8:	tst	r1, r2, lsl r3
   1a4fc:	beq	1a520 <__assert_fail@plt+0x8494>
   1a500:	str	r0, [sp]
   1a504:	mvn	r0, #99	; 0x63
   1a508:	mov	r1, lr
   1a50c:	mov	r2, ip
   1a510:	mov	r3, #0
   1a514:	bl	19c40 <__assert_fail@plt+0x7bb4>
   1a518:	mov	sp, fp
   1a51c:	pop	{fp, pc}
   1a520:	cmp	r3, #3
   1a524:	bne	1a530 <__assert_fail@plt+0x84a4>
   1a528:	orr	r0, r0, #512	; 0x200
   1a52c:	b	1a500 <__assert_fail@plt+0x8474>
   1a530:	movw	r1, #58772	; 0xe594
   1a534:	movt	r1, #3
   1a538:	ldr	r3, [r1]
   1a53c:	cmp	r3, #4
   1a540:	bcs	1a558 <__assert_fail@plt+0x84cc>
   1a544:	movw	r1, #54668	; 0xd58c
   1a548:	movt	r1, #2
   1a54c:	ldr	r1, [r1, r3, lsl #2]
   1a550:	orr	r0, r1, r0
   1a554:	b	1a500 <__assert_fail@plt+0x8474>
   1a558:	bl	12038 <abort@plt>
   1a55c:	push	{r4, r5, fp, lr}
   1a560:	add	fp, sp, #8
   1a564:	ldr	r4, [r1]
   1a568:	ldr	r5, [r0]
   1a56c:	bl	11ed0 <__errno_location@plt>
   1a570:	mov	r1, #0
   1a574:	str	r1, [r0]
   1a578:	mov	r0, r5
   1a57c:	mov	r1, r4
   1a580:	pop	{r4, r5, fp, lr}
   1a584:	b	11dd4 <strcoll@plt>
   1a588:	push	{r4, r5, fp, lr}
   1a58c:	add	fp, sp, #8
   1a590:	ldr	r5, [r1, #120]	; 0x78
   1a594:	mov	r2, #1
   1a598:	mov	r3, #1
   1a59c:	cmp	r5, #3
   1a5a0:	beq	1a5c4 <__assert_fail@plt+0x8538>
   1a5a4:	cmp	r5, #9
   1a5a8:	mov	r3, #1
   1a5ac:	beq	1a5c4 <__assert_fail@plt+0x8538>
   1a5b0:	ldr	r3, [r1, #124]	; 0x7c
   1a5b4:	and	r3, r3, #61440	; 0xf000
   1a5b8:	sub	r3, r3, #16384	; 0x4000
   1a5bc:	clz	r3, r3
   1a5c0:	lsr	r3, r3, #5
   1a5c4:	ldr	r5, [r0, #120]	; 0x78
   1a5c8:	cmp	r5, #3
   1a5cc:	cmpne	r5, #9
   1a5d0:	beq	1a5e8 <__assert_fail@plt+0x855c>
   1a5d4:	ldr	r2, [r0, #124]	; 0x7c
   1a5d8:	and	r2, r2, #61440	; 0xf000
   1a5dc:	sub	r2, r2, #16384	; 0x4000
   1a5e0:	clz	r2, r2
   1a5e4:	lsr	r2, r2, #5
   1a5e8:	subs	r2, r3, r2
   1a5ec:	movne	r0, r2
   1a5f0:	popne	{r4, r5, fp, pc}
   1a5f4:	ldr	r4, [r1]
   1a5f8:	ldr	r5, [r0]
   1a5fc:	bl	11ed0 <__errno_location@plt>
   1a600:	mov	r1, #0
   1a604:	str	r1, [r0]
   1a608:	mov	r0, r5
   1a60c:	mov	r1, r4
   1a610:	pop	{r4, r5, fp, lr}
   1a614:	b	11dd4 <strcoll@plt>
   1a618:	push	{r4, r5, fp, lr}
   1a61c:	add	fp, sp, #8
   1a620:	ldr	r4, [r0]
   1a624:	ldr	r5, [r1]
   1a628:	bl	11ed0 <__errno_location@plt>
   1a62c:	mov	r1, #0
   1a630:	str	r1, [r0]
   1a634:	mov	r0, r5
   1a638:	mov	r1, r4
   1a63c:	pop	{r4, r5, fp, lr}
   1a640:	b	11dd4 <strcoll@plt>
   1a644:	push	{r4, r5, fp, lr}
   1a648:	add	fp, sp, #8
   1a64c:	ldr	r5, [r1, #120]	; 0x78
   1a650:	mov	r2, #1
   1a654:	mov	r3, #1
   1a658:	cmp	r5, #3
   1a65c:	beq	1a680 <__assert_fail@plt+0x85f4>
   1a660:	cmp	r5, #9
   1a664:	mov	r3, #1
   1a668:	beq	1a680 <__assert_fail@plt+0x85f4>
   1a66c:	ldr	r3, [r1, #124]	; 0x7c
   1a670:	and	r3, r3, #61440	; 0xf000
   1a674:	sub	r3, r3, #16384	; 0x4000
   1a678:	clz	r3, r3
   1a67c:	lsr	r3, r3, #5
   1a680:	ldr	r5, [r0, #120]	; 0x78
   1a684:	cmp	r5, #3
   1a688:	cmpne	r5, #9
   1a68c:	beq	1a6a4 <__assert_fail@plt+0x8618>
   1a690:	ldr	r2, [r0, #124]	; 0x7c
   1a694:	and	r2, r2, #61440	; 0xf000
   1a698:	sub	r2, r2, #16384	; 0x4000
   1a69c:	clz	r2, r2
   1a6a0:	lsr	r2, r2, #5
   1a6a4:	subs	r2, r3, r2
   1a6a8:	movne	r0, r2
   1a6ac:	popne	{r4, r5, fp, pc}
   1a6b0:	ldr	r4, [r0]
   1a6b4:	ldr	r5, [r1]
   1a6b8:	bl	11ed0 <__errno_location@plt>
   1a6bc:	mov	r1, #0
   1a6c0:	str	r1, [r0]
   1a6c4:	mov	r0, r5
   1a6c8:	mov	r1, r4
   1a6cc:	pop	{r4, r5, fp, lr}
   1a6d0:	b	11dd4 <strcoll@plt>
   1a6d4:	ldr	r1, [r1]
   1a6d8:	ldr	r0, [r0]
   1a6dc:	b	11bd0 <strcmp@plt>
   1a6e0:	ldr	r2, [r1, #120]	; 0x78
   1a6e4:	mov	ip, #1
   1a6e8:	mov	r3, #1
   1a6ec:	cmp	r2, #3
   1a6f0:	beq	1a714 <__assert_fail@plt+0x8688>
   1a6f4:	cmp	r2, #9
   1a6f8:	mov	r3, #1
   1a6fc:	beq	1a714 <__assert_fail@plt+0x8688>
   1a700:	ldr	r2, [r1, #124]	; 0x7c
   1a704:	and	r2, r2, #61440	; 0xf000
   1a708:	sub	r2, r2, #16384	; 0x4000
   1a70c:	clz	r2, r2
   1a710:	lsr	r3, r2, #5
   1a714:	ldr	r2, [r0, #120]	; 0x78
   1a718:	cmp	r2, #3
   1a71c:	cmpne	r2, #9
   1a720:	beq	1a738 <__assert_fail@plt+0x86ac>
   1a724:	ldr	r2, [r0, #124]	; 0x7c
   1a728:	and	r2, r2, #61440	; 0xf000
   1a72c:	sub	r2, r2, #16384	; 0x4000
   1a730:	clz	r2, r2
   1a734:	lsr	ip, r2, #5
   1a738:	subs	r2, r3, ip
   1a73c:	movne	r0, r2
   1a740:	bxne	lr
   1a744:	ldr	r1, [r1]
   1a748:	ldr	r0, [r0]
   1a74c:	b	11bd0 <strcmp@plt>
   1a750:	ldr	r2, [r0]
   1a754:	ldr	r0, [r1]
   1a758:	mov	r1, r2
   1a75c:	b	11bd0 <strcmp@plt>
   1a760:	ldr	r2, [r1, #120]	; 0x78
   1a764:	mov	ip, #1
   1a768:	mov	r3, #1
   1a76c:	cmp	r2, #3
   1a770:	beq	1a794 <__assert_fail@plt+0x8708>
   1a774:	cmp	r2, #9
   1a778:	mov	r3, #1
   1a77c:	beq	1a794 <__assert_fail@plt+0x8708>
   1a780:	ldr	r2, [r1, #124]	; 0x7c
   1a784:	and	r2, r2, #61440	; 0xf000
   1a788:	sub	r2, r2, #16384	; 0x4000
   1a78c:	clz	r2, r2
   1a790:	lsr	r3, r2, #5
   1a794:	ldr	r2, [r0, #120]	; 0x78
   1a798:	cmp	r2, #3
   1a79c:	cmpne	r2, #9
   1a7a0:	beq	1a7b8 <__assert_fail@plt+0x872c>
   1a7a4:	ldr	r2, [r0, #124]	; 0x7c
   1a7a8:	and	r2, r2, #61440	; 0xf000
   1a7ac:	sub	r2, r2, #16384	; 0x4000
   1a7b0:	clz	r2, r2
   1a7b4:	lsr	ip, r2, #5
   1a7b8:	subs	r2, r3, ip
   1a7bc:	movne	r0, r2
   1a7c0:	bxne	lr
   1a7c4:	ldr	r2, [r0]
   1a7c8:	ldr	r0, [r1]
   1a7cc:	mov	r1, r2
   1a7d0:	b	11bd0 <strcmp@plt>
   1a7d4:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   1a7d8:	add	fp, sp, #24
   1a7dc:	ldr	r8, [r0]
   1a7e0:	mov	r5, r1
   1a7e4:	mov	r1, #46	; 0x2e
   1a7e8:	mov	r0, r8
   1a7ec:	bl	11f84 <strrchr@plt>
   1a7f0:	ldr	r5, [r5]
   1a7f4:	mov	r7, r0
   1a7f8:	mov	r1, #46	; 0x2e
   1a7fc:	mov	r0, r5
   1a800:	bl	11f84 <strrchr@plt>
   1a804:	mov	r4, r0
   1a808:	bl	11ed0 <__errno_location@plt>
   1a80c:	movw	r1, #47938	; 0xbb42
   1a810:	cmp	r7, #0
   1a814:	mov	r9, #0
   1a818:	mov	r6, r0
   1a81c:	movt	r1, #2
   1a820:	str	r9, [r0]
   1a824:	moveq	r7, r1
   1a828:	cmp	r4, #0
   1a82c:	movne	r1, r4
   1a830:	mov	r0, r7
   1a834:	bl	11dd4 <strcoll@plt>
   1a838:	cmp	r0, #0
   1a83c:	beq	1a844 <__assert_fail@plt+0x87b8>
   1a840:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   1a844:	str	r9, [r6]
   1a848:	mov	r0, r8
   1a84c:	mov	r1, r5
   1a850:	pop	{r4, r5, r6, r7, r8, r9, fp, lr}
   1a854:	b	11dd4 <strcoll@plt>
   1a858:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   1a85c:	add	fp, sp, #24
   1a860:	ldr	r3, [r1, #120]	; 0x78
   1a864:	mov	r4, r1
   1a868:	mov	r1, #1
   1a86c:	mov	r2, #1
   1a870:	cmp	r3, #3
   1a874:	beq	1a898 <__assert_fail@plt+0x880c>
   1a878:	cmp	r3, #9
   1a87c:	mov	r2, #1
   1a880:	beq	1a898 <__assert_fail@plt+0x880c>
   1a884:	ldr	r2, [r4, #124]	; 0x7c
   1a888:	and	r2, r2, #61440	; 0xf000
   1a88c:	sub	r2, r2, #16384	; 0x4000
   1a890:	clz	r2, r2
   1a894:	lsr	r2, r2, #5
   1a898:	ldr	r3, [r0, #120]	; 0x78
   1a89c:	cmp	r3, #3
   1a8a0:	cmpne	r3, #9
   1a8a4:	bne	1a928 <__assert_fail@plt+0x889c>
   1a8a8:	subs	r1, r2, r1
   1a8ac:	bne	1a944 <__assert_fail@plt+0x88b8>
   1a8b0:	ldr	r8, [r0]
   1a8b4:	mov	r1, #46	; 0x2e
   1a8b8:	mov	r0, r8
   1a8bc:	bl	11f84 <strrchr@plt>
   1a8c0:	ldr	r4, [r4]
   1a8c4:	mov	r7, r0
   1a8c8:	mov	r1, #46	; 0x2e
   1a8cc:	mov	r0, r4
   1a8d0:	bl	11f84 <strrchr@plt>
   1a8d4:	mov	r5, r0
   1a8d8:	bl	11ed0 <__errno_location@plt>
   1a8dc:	movw	r1, #47938	; 0xbb42
   1a8e0:	cmp	r7, #0
   1a8e4:	mov	r9, #0
   1a8e8:	mov	r6, r0
   1a8ec:	movt	r1, #2
   1a8f0:	str	r9, [r0]
   1a8f4:	moveq	r7, r1
   1a8f8:	cmp	r5, #0
   1a8fc:	movne	r1, r5
   1a900:	mov	r0, r7
   1a904:	bl	11dd4 <strcoll@plt>
   1a908:	mov	r1, r0
   1a90c:	cmp	r0, #0
   1a910:	bne	1a944 <__assert_fail@plt+0x88b8>
   1a914:	str	r9, [r6]
   1a918:	mov	r0, r8
   1a91c:	mov	r1, r4
   1a920:	pop	{r4, r5, r6, r7, r8, r9, fp, lr}
   1a924:	b	11dd4 <strcoll@plt>
   1a928:	ldr	r1, [r0, #124]	; 0x7c
   1a92c:	and	r1, r1, #61440	; 0xf000
   1a930:	sub	r1, r1, #16384	; 0x4000
   1a934:	clz	r1, r1
   1a938:	lsr	r1, r1, #5
   1a93c:	subs	r1, r2, r1
   1a940:	beq	1a8b0 <__assert_fail@plt+0x8824>
   1a944:	mov	r0, r1
   1a948:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   1a94c:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   1a950:	add	fp, sp, #24
   1a954:	ldr	r8, [r1]
   1a958:	mov	r5, r0
   1a95c:	mov	r1, #46	; 0x2e
   1a960:	mov	r0, r8
   1a964:	bl	11f84 <strrchr@plt>
   1a968:	ldr	r5, [r5]
   1a96c:	mov	r7, r0
   1a970:	mov	r1, #46	; 0x2e
   1a974:	mov	r0, r5
   1a978:	bl	11f84 <strrchr@plt>
   1a97c:	mov	r4, r0
   1a980:	bl	11ed0 <__errno_location@plt>
   1a984:	movw	r1, #47938	; 0xbb42
   1a988:	cmp	r7, #0
   1a98c:	mov	r9, #0
   1a990:	mov	r6, r0
   1a994:	movt	r1, #2
   1a998:	str	r9, [r0]
   1a99c:	moveq	r7, r1
   1a9a0:	cmp	r4, #0
   1a9a4:	movne	r1, r4
   1a9a8:	mov	r0, r7
   1a9ac:	bl	11dd4 <strcoll@plt>
   1a9b0:	cmp	r0, #0
   1a9b4:	beq	1a9bc <__assert_fail@plt+0x8930>
   1a9b8:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   1a9bc:	str	r9, [r6]
   1a9c0:	mov	r0, r8
   1a9c4:	mov	r1, r5
   1a9c8:	pop	{r4, r5, r6, r7, r8, r9, fp, lr}
   1a9cc:	b	11dd4 <strcoll@plt>
   1a9d0:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   1a9d4:	add	fp, sp, #24
   1a9d8:	ldr	r3, [r1, #120]	; 0x78
   1a9dc:	mov	r4, r0
   1a9e0:	mov	r0, #1
   1a9e4:	mov	r2, #1
   1a9e8:	cmp	r3, #3
   1a9ec:	beq	1aa10 <__assert_fail@plt+0x8984>
   1a9f0:	cmp	r3, #9
   1a9f4:	mov	r2, #1
   1a9f8:	beq	1aa10 <__assert_fail@plt+0x8984>
   1a9fc:	ldr	r2, [r1, #124]	; 0x7c
   1aa00:	and	r2, r2, #61440	; 0xf000
   1aa04:	sub	r2, r2, #16384	; 0x4000
   1aa08:	clz	r2, r2
   1aa0c:	lsr	r2, r2, #5
   1aa10:	ldr	r3, [r4, #120]	; 0x78
   1aa14:	cmp	r3, #3
   1aa18:	cmpne	r3, #9
   1aa1c:	bne	1aa9c <__assert_fail@plt+0x8a10>
   1aa20:	subs	r0, r2, r0
   1aa24:	bne	1aab8 <__assert_fail@plt+0x8a2c>
   1aa28:	ldr	r8, [r1]
   1aa2c:	mov	r1, #46	; 0x2e
   1aa30:	mov	r0, r8
   1aa34:	bl	11f84 <strrchr@plt>
   1aa38:	ldr	r4, [r4]
   1aa3c:	mov	r7, r0
   1aa40:	mov	r1, #46	; 0x2e
   1aa44:	mov	r0, r4
   1aa48:	bl	11f84 <strrchr@plt>
   1aa4c:	mov	r5, r0
   1aa50:	bl	11ed0 <__errno_location@plt>
   1aa54:	movw	r1, #47938	; 0xbb42
   1aa58:	cmp	r7, #0
   1aa5c:	mov	r9, #0
   1aa60:	mov	r6, r0
   1aa64:	movt	r1, #2
   1aa68:	str	r9, [r0]
   1aa6c:	moveq	r7, r1
   1aa70:	cmp	r5, #0
   1aa74:	movne	r1, r5
   1aa78:	mov	r0, r7
   1aa7c:	bl	11dd4 <strcoll@plt>
   1aa80:	cmp	r0, #0
   1aa84:	bne	1aab8 <__assert_fail@plt+0x8a2c>
   1aa88:	str	r9, [r6]
   1aa8c:	mov	r0, r8
   1aa90:	mov	r1, r4
   1aa94:	pop	{r4, r5, r6, r7, r8, r9, fp, lr}
   1aa98:	b	11dd4 <strcoll@plt>
   1aa9c:	ldr	r0, [r4, #124]	; 0x7c
   1aaa0:	and	r0, r0, #61440	; 0xf000
   1aaa4:	sub	r0, r0, #16384	; 0x4000
   1aaa8:	clz	r0, r0
   1aaac:	lsr	r0, r0, #5
   1aab0:	subs	r0, r2, r0
   1aab4:	beq	1aa28 <__assert_fail@plt+0x899c>
   1aab8:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   1aabc:	push	{r4, r5, r6, sl, fp, lr}
   1aac0:	add	fp, sp, #16
   1aac4:	ldr	r4, [r0]
   1aac8:	mov	r5, r1
   1aacc:	mov	r1, #46	; 0x2e
   1aad0:	mov	r0, r4
   1aad4:	bl	11f84 <strrchr@plt>
   1aad8:	ldr	r5, [r5]
   1aadc:	mov	r6, r0
   1aae0:	mov	r1, #46	; 0x2e
   1aae4:	mov	r0, r5
   1aae8:	bl	11f84 <strrchr@plt>
   1aaec:	movw	r1, #47938	; 0xbb42
   1aaf0:	cmp	r6, #0
   1aaf4:	movt	r1, #2
   1aaf8:	moveq	r6, r1
   1aafc:	cmp	r0, #0
   1ab00:	movne	r1, r0
   1ab04:	mov	r0, r6
   1ab08:	bl	11bd0 <strcmp@plt>
   1ab0c:	cmp	r0, #0
   1ab10:	popne	{r4, r5, r6, sl, fp, pc}
   1ab14:	mov	r0, r4
   1ab18:	mov	r1, r5
   1ab1c:	pop	{r4, r5, r6, sl, fp, lr}
   1ab20:	b	11bd0 <strcmp@plt>
   1ab24:	push	{r4, r5, r6, sl, fp, lr}
   1ab28:	add	fp, sp, #16
   1ab2c:	ldr	r3, [r1, #120]	; 0x78
   1ab30:	mov	r4, r1
   1ab34:	mov	r1, #1
   1ab38:	mov	r2, #1
   1ab3c:	cmp	r3, #3
   1ab40:	beq	1ab64 <__assert_fail@plt+0x8ad8>
   1ab44:	cmp	r3, #9
   1ab48:	mov	r2, #1
   1ab4c:	beq	1ab64 <__assert_fail@plt+0x8ad8>
   1ab50:	ldr	r2, [r4, #124]	; 0x7c
   1ab54:	and	r2, r2, #61440	; 0xf000
   1ab58:	sub	r2, r2, #16384	; 0x4000
   1ab5c:	clz	r2, r2
   1ab60:	lsr	r2, r2, #5
   1ab64:	ldr	r3, [r0, #120]	; 0x78
   1ab68:	cmp	r3, #3
   1ab6c:	cmpne	r3, #9
   1ab70:	bne	1abdc <__assert_fail@plt+0x8b50>
   1ab74:	subs	r1, r2, r1
   1ab78:	bne	1abf8 <__assert_fail@plt+0x8b6c>
   1ab7c:	ldr	r5, [r0]
   1ab80:	mov	r1, #46	; 0x2e
   1ab84:	mov	r0, r5
   1ab88:	bl	11f84 <strrchr@plt>
   1ab8c:	ldr	r4, [r4]
   1ab90:	mov	r6, r0
   1ab94:	mov	r1, #46	; 0x2e
   1ab98:	mov	r0, r4
   1ab9c:	bl	11f84 <strrchr@plt>
   1aba0:	movw	r1, #47938	; 0xbb42
   1aba4:	cmp	r6, #0
   1aba8:	movt	r1, #2
   1abac:	moveq	r6, r1
   1abb0:	cmp	r0, #0
   1abb4:	movne	r1, r0
   1abb8:	mov	r0, r6
   1abbc:	bl	11bd0 <strcmp@plt>
   1abc0:	mov	r1, r0
   1abc4:	cmp	r0, #0
   1abc8:	bne	1abf8 <__assert_fail@plt+0x8b6c>
   1abcc:	mov	r0, r5
   1abd0:	mov	r1, r4
   1abd4:	pop	{r4, r5, r6, sl, fp, lr}
   1abd8:	b	11bd0 <strcmp@plt>
   1abdc:	ldr	r1, [r0, #124]	; 0x7c
   1abe0:	and	r1, r1, #61440	; 0xf000
   1abe4:	sub	r1, r1, #16384	; 0x4000
   1abe8:	clz	r1, r1
   1abec:	lsr	r1, r1, #5
   1abf0:	subs	r1, r2, r1
   1abf4:	beq	1ab7c <__assert_fail@plt+0x8af0>
   1abf8:	mov	r0, r1
   1abfc:	pop	{r4, r5, r6, sl, fp, pc}
   1ac00:	push	{r4, r5, r6, sl, fp, lr}
   1ac04:	add	fp, sp, #16
   1ac08:	ldr	r4, [r1]
   1ac0c:	mov	r5, r0
   1ac10:	mov	r1, #46	; 0x2e
   1ac14:	mov	r0, r4
   1ac18:	bl	11f84 <strrchr@plt>
   1ac1c:	ldr	r5, [r5]
   1ac20:	mov	r6, r0
   1ac24:	mov	r1, #46	; 0x2e
   1ac28:	mov	r0, r5
   1ac2c:	bl	11f84 <strrchr@plt>
   1ac30:	movw	r1, #47938	; 0xbb42
   1ac34:	cmp	r6, #0
   1ac38:	movt	r1, #2
   1ac3c:	moveq	r6, r1
   1ac40:	cmp	r0, #0
   1ac44:	movne	r1, r0
   1ac48:	mov	r0, r6
   1ac4c:	bl	11bd0 <strcmp@plt>
   1ac50:	cmp	r0, #0
   1ac54:	popne	{r4, r5, r6, sl, fp, pc}
   1ac58:	mov	r0, r4
   1ac5c:	mov	r1, r5
   1ac60:	pop	{r4, r5, r6, sl, fp, lr}
   1ac64:	b	11bd0 <strcmp@plt>
   1ac68:	push	{r4, r5, r6, sl, fp, lr}
   1ac6c:	add	fp, sp, #16
   1ac70:	ldr	r3, [r1, #120]	; 0x78
   1ac74:	mov	r4, r0
   1ac78:	mov	r0, #1
   1ac7c:	mov	r2, #1
   1ac80:	cmp	r3, #3
   1ac84:	beq	1aca8 <__assert_fail@plt+0x8c1c>
   1ac88:	cmp	r3, #9
   1ac8c:	mov	r2, #1
   1ac90:	beq	1aca8 <__assert_fail@plt+0x8c1c>
   1ac94:	ldr	r2, [r1, #124]	; 0x7c
   1ac98:	and	r2, r2, #61440	; 0xf000
   1ac9c:	sub	r2, r2, #16384	; 0x4000
   1aca0:	clz	r2, r2
   1aca4:	lsr	r2, r2, #5
   1aca8:	ldr	r3, [r4, #120]	; 0x78
   1acac:	cmp	r3, #3
   1acb0:	cmpne	r3, #9
   1acb4:	beq	1accc <__assert_fail@plt+0x8c40>
   1acb8:	ldr	r0, [r4, #124]	; 0x7c
   1acbc:	and	r0, r0, #61440	; 0xf000
   1acc0:	sub	r0, r0, #16384	; 0x4000
   1acc4:	clz	r0, r0
   1acc8:	lsr	r0, r0, #5
   1accc:	subs	r0, r2, r0
   1acd0:	popne	{r4, r5, r6, sl, fp, pc}
   1acd4:	ldr	r5, [r1]
   1acd8:	mov	r1, #46	; 0x2e
   1acdc:	mov	r0, r5
   1ace0:	bl	11f84 <strrchr@plt>
   1ace4:	ldr	r4, [r4]
   1ace8:	mov	r6, r0
   1acec:	mov	r1, #46	; 0x2e
   1acf0:	mov	r0, r4
   1acf4:	bl	11f84 <strrchr@plt>
   1acf8:	movw	r1, #47938	; 0xbb42
   1acfc:	cmp	r6, #0
   1ad00:	movt	r1, #2
   1ad04:	moveq	r6, r1
   1ad08:	cmp	r0, #0
   1ad0c:	movne	r1, r0
   1ad10:	mov	r0, r6
   1ad14:	bl	11bd0 <strcmp@plt>
   1ad18:	cmp	r0, #0
   1ad1c:	beq	1ad24 <__assert_fail@plt+0x8c98>
   1ad20:	pop	{r4, r5, r6, sl, fp, pc}
   1ad24:	mov	r0, r5
   1ad28:	mov	r1, r4
   1ad2c:	pop	{r4, r5, r6, sl, fp, lr}
   1ad30:	b	11bd0 <strcmp@plt>
   1ad34:	movw	r2, #51488	; 0xc920
   1ad38:	movt	r2, #1
   1ad3c:	b	1c94c <__assert_fail@plt+0xa8c0>
   1ad40:	ldr	r2, [r1, #120]	; 0x78
   1ad44:	mov	ip, #1
   1ad48:	mov	r3, #1
   1ad4c:	cmp	r2, #3
   1ad50:	beq	1ad74 <__assert_fail@plt+0x8ce8>
   1ad54:	cmp	r2, #9
   1ad58:	mov	r3, #1
   1ad5c:	beq	1ad74 <__assert_fail@plt+0x8ce8>
   1ad60:	ldr	r2, [r1, #124]	; 0x7c
   1ad64:	and	r2, r2, #61440	; 0xf000
   1ad68:	sub	r2, r2, #16384	; 0x4000
   1ad6c:	clz	r2, r2
   1ad70:	lsr	r3, r2, #5
   1ad74:	ldr	r2, [r0, #120]	; 0x78
   1ad78:	cmp	r2, #3
   1ad7c:	cmpne	r2, #9
   1ad80:	beq	1ad98 <__assert_fail@plt+0x8d0c>
   1ad84:	ldr	r2, [r0, #124]	; 0x7c
   1ad88:	and	r2, r2, #61440	; 0xf000
   1ad8c:	sub	r2, r2, #16384	; 0x4000
   1ad90:	clz	r2, r2
   1ad94:	lsr	ip, r2, #5
   1ad98:	subs	r2, r3, ip
   1ad9c:	movne	r0, r2
   1ada0:	bxne	lr
   1ada4:	movw	r2, #51488	; 0xc920
   1ada8:	movt	r2, #1
   1adac:	b	1c94c <__assert_fail@plt+0xa8c0>
   1adb0:	movw	r2, #51488	; 0xc920
   1adb4:	mov	r3, r0
   1adb8:	mov	r0, r1
   1adbc:	movt	r2, #1
   1adc0:	mov	r1, r3
   1adc4:	b	1c94c <__assert_fail@plt+0xa8c0>
   1adc8:	ldr	r3, [r1, #120]	; 0x78
   1adcc:	mov	ip, r0
   1add0:	mov	r0, #1
   1add4:	mov	r2, #1
   1add8:	cmp	r3, #3
   1addc:	beq	1ae00 <__assert_fail@plt+0x8d74>
   1ade0:	cmp	r3, #9
   1ade4:	mov	r2, #1
   1ade8:	beq	1ae00 <__assert_fail@plt+0x8d74>
   1adec:	ldr	r2, [r1, #124]	; 0x7c
   1adf0:	and	r2, r2, #61440	; 0xf000
   1adf4:	sub	r2, r2, #16384	; 0x4000
   1adf8:	clz	r2, r2
   1adfc:	lsr	r2, r2, #5
   1ae00:	ldr	r3, [ip, #120]	; 0x78
   1ae04:	cmp	r3, #3
   1ae08:	cmpne	r3, #9
   1ae0c:	beq	1ae24 <__assert_fail@plt+0x8d98>
   1ae10:	ldr	r0, [ip, #124]	; 0x7c
   1ae14:	and	r0, r0, #61440	; 0xf000
   1ae18:	sub	r0, r0, #16384	; 0x4000
   1ae1c:	clz	r0, r0
   1ae20:	lsr	r0, r0, #5
   1ae24:	subs	r0, r2, r0
   1ae28:	bxne	lr
   1ae2c:	movw	r2, #51488	; 0xc920
   1ae30:	mov	r0, r1
   1ae34:	mov	r1, ip
   1ae38:	movt	r2, #1
   1ae3c:	b	1c94c <__assert_fail@plt+0xa8c0>
   1ae40:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   1ae44:	add	fp, sp, #24
   1ae48:	sub	sp, sp, #24
   1ae4c:	sub	sp, sp, #8192	; 0x2000
   1ae50:	ldr	r7, [r0, #148]	; 0x94
   1ae54:	mov	r5, r1
   1ae58:	mov	r4, r0
   1ae5c:	cmp	r7, #0
   1ae60:	bne	1aebc <__assert_fail@plt+0x8e30>
   1ae64:	movw	r0, #58372	; 0xe404
   1ae68:	ldr	r6, [r4]
   1ae6c:	ldr	r3, [r4, #144]	; 0x90
   1ae70:	sub	r1, fp, #32
   1ae74:	add	r7, sp, #15
   1ae78:	movt	r0, #3
   1ae7c:	str	r1, [sp]
   1ae80:	str	r7, [fp, #-28]	; 0xffffffe4
   1ae84:	ldr	r2, [r0]
   1ae88:	sub	r0, fp, #33	; 0x21
   1ae8c:	str	r0, [sp, #4]
   1ae90:	sub	r0, fp, #28
   1ae94:	mov	r1, r6
   1ae98:	bl	19dd4 <__assert_fail@plt+0x7d48>
   1ae9c:	ldr	r0, [fp, #-28]	; 0xffffffe4
   1aea0:	cmp	r0, r7
   1aea4:	cmpne	r0, r6
   1aea8:	beq	1aeb0 <__assert_fail@plt+0x8e24>
   1aeac:	bl	1f89c <__assert_fail@plt+0xd810>
   1aeb0:	ldrb	r0, [fp, #-33]	; 0xffffffdf
   1aeb4:	ldr	r1, [fp, #-32]	; 0xffffffe0
   1aeb8:	add	r7, r1, r0
   1aebc:	ldr	r0, [r5, #148]	; 0x94
   1aec0:	cmp	r0, #0
   1aec4:	beq	1aed8 <__assert_fail@plt+0x8e4c>
   1aec8:	subs	r0, r7, r0
   1aecc:	beq	1af38 <__assert_fail@plt+0x8eac>
   1aed0:	sub	sp, fp, #24
   1aed4:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   1aed8:	movw	r0, #58372	; 0xe404
   1aedc:	ldr	r6, [r5]
   1aee0:	ldr	r3, [r5, #144]	; 0x90
   1aee4:	sub	r1, fp, #32
   1aee8:	add	r8, sp, #15
   1aeec:	movt	r0, #3
   1aef0:	str	r1, [sp]
   1aef4:	str	r8, [fp, #-28]	; 0xffffffe4
   1aef8:	ldr	r2, [r0]
   1aefc:	sub	r0, fp, #33	; 0x21
   1af00:	str	r0, [sp, #4]
   1af04:	sub	r0, fp, #28
   1af08:	mov	r1, r6
   1af0c:	bl	19dd4 <__assert_fail@plt+0x7d48>
   1af10:	ldr	r0, [fp, #-28]	; 0xffffffe4
   1af14:	cmp	r0, r8
   1af18:	cmpne	r0, r6
   1af1c:	beq	1af24 <__assert_fail@plt+0x8e98>
   1af20:	bl	1f89c <__assert_fail@plt+0xd810>
   1af24:	ldrb	r0, [fp, #-33]	; 0xffffffdf
   1af28:	ldr	r1, [fp, #-32]	; 0xffffffe0
   1af2c:	add	r0, r1, r0
   1af30:	subs	r0, r7, r0
   1af34:	bne	1aed0 <__assert_fail@plt+0x8e44>
   1af38:	ldr	r1, [r5]
   1af3c:	ldr	r0, [r4]
   1af40:	bl	11bd0 <strcmp@plt>
   1af44:	sub	sp, fp, #24
   1af48:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   1af4c:	ldr	r2, [r1, #120]	; 0x78
   1af50:	mov	ip, #1
   1af54:	mov	r3, #1
   1af58:	cmp	r2, #3
   1af5c:	beq	1af80 <__assert_fail@plt+0x8ef4>
   1af60:	cmp	r2, #9
   1af64:	mov	r3, #1
   1af68:	beq	1af80 <__assert_fail@plt+0x8ef4>
   1af6c:	ldr	r2, [r1, #124]	; 0x7c
   1af70:	and	r2, r2, #61440	; 0xf000
   1af74:	sub	r2, r2, #16384	; 0x4000
   1af78:	clz	r2, r2
   1af7c:	lsr	r3, r2, #5
   1af80:	ldr	r2, [r0, #120]	; 0x78
   1af84:	cmp	r2, #3
   1af88:	cmpne	r2, #9
   1af8c:	beq	1afa4 <__assert_fail@plt+0x8f18>
   1af90:	ldr	r2, [r0, #124]	; 0x7c
   1af94:	and	r2, r2, #61440	; 0xf000
   1af98:	sub	r2, r2, #16384	; 0x4000
   1af9c:	clz	r2, r2
   1afa0:	lsr	ip, r2, #5
   1afa4:	subs	r2, r3, ip
   1afa8:	movne	r0, r2
   1afac:	bxne	lr
   1afb0:	b	1ae40 <__assert_fail@plt+0x8db4>
   1afb4:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   1afb8:	add	fp, sp, #24
   1afbc:	sub	sp, sp, #24
   1afc0:	sub	sp, sp, #8192	; 0x2000
   1afc4:	ldr	r7, [r1, #148]	; 0x94
   1afc8:	mov	r4, r1
   1afcc:	mov	r5, r0
   1afd0:	cmp	r7, #0
   1afd4:	bne	1b030 <__assert_fail@plt+0x8fa4>
   1afd8:	movw	r0, #58372	; 0xe404
   1afdc:	ldr	r6, [r4]
   1afe0:	ldr	r3, [r4, #144]	; 0x90
   1afe4:	sub	r1, fp, #32
   1afe8:	add	r7, sp, #15
   1afec:	movt	r0, #3
   1aff0:	str	r1, [sp]
   1aff4:	str	r7, [fp, #-28]	; 0xffffffe4
   1aff8:	ldr	r2, [r0]
   1affc:	sub	r0, fp, #33	; 0x21
   1b000:	str	r0, [sp, #4]
   1b004:	sub	r0, fp, #28
   1b008:	mov	r1, r6
   1b00c:	bl	19dd4 <__assert_fail@plt+0x7d48>
   1b010:	ldr	r0, [fp, #-28]	; 0xffffffe4
   1b014:	cmp	r0, r7
   1b018:	cmpne	r0, r6
   1b01c:	beq	1b024 <__assert_fail@plt+0x8f98>
   1b020:	bl	1f89c <__assert_fail@plt+0xd810>
   1b024:	ldrb	r0, [fp, #-33]	; 0xffffffdf
   1b028:	ldr	r1, [fp, #-32]	; 0xffffffe0
   1b02c:	add	r7, r1, r0
   1b030:	ldr	r0, [r5, #148]	; 0x94
   1b034:	cmp	r0, #0
   1b038:	beq	1b04c <__assert_fail@plt+0x8fc0>
   1b03c:	subs	r0, r7, r0
   1b040:	beq	1b0ac <__assert_fail@plt+0x9020>
   1b044:	sub	sp, fp, #24
   1b048:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   1b04c:	movw	r0, #58372	; 0xe404
   1b050:	ldr	r6, [r5]
   1b054:	ldr	r3, [r5, #144]	; 0x90
   1b058:	sub	r1, fp, #32
   1b05c:	add	r8, sp, #15
   1b060:	movt	r0, #3
   1b064:	str	r1, [sp]
   1b068:	str	r8, [fp, #-28]	; 0xffffffe4
   1b06c:	ldr	r2, [r0]
   1b070:	sub	r0, fp, #33	; 0x21
   1b074:	str	r0, [sp, #4]
   1b078:	sub	r0, fp, #28
   1b07c:	mov	r1, r6
   1b080:	bl	19dd4 <__assert_fail@plt+0x7d48>
   1b084:	ldr	r0, [fp, #-28]	; 0xffffffe4
   1b088:	cmp	r0, r8
   1b08c:	cmpne	r0, r6
   1b090:	beq	1b098 <__assert_fail@plt+0x900c>
   1b094:	bl	1f89c <__assert_fail@plt+0xd810>
   1b098:	ldrb	r0, [fp, #-33]	; 0xffffffdf
   1b09c:	ldr	r1, [fp, #-32]	; 0xffffffe0
   1b0a0:	add	r0, r1, r0
   1b0a4:	subs	r0, r7, r0
   1b0a8:	bne	1b044 <__assert_fail@plt+0x8fb8>
   1b0ac:	ldr	r1, [r5]
   1b0b0:	ldr	r0, [r4]
   1b0b4:	bl	11bd0 <strcmp@plt>
   1b0b8:	sub	sp, fp, #24
   1b0bc:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   1b0c0:	ldr	r2, [r1, #120]	; 0x78
   1b0c4:	mov	ip, #1
   1b0c8:	mov	r3, #1
   1b0cc:	cmp	r2, #3
   1b0d0:	beq	1b0f4 <__assert_fail@plt+0x9068>
   1b0d4:	cmp	r2, #9
   1b0d8:	mov	r3, #1
   1b0dc:	beq	1b0f4 <__assert_fail@plt+0x9068>
   1b0e0:	ldr	r2, [r1, #124]	; 0x7c
   1b0e4:	and	r2, r2, #61440	; 0xf000
   1b0e8:	sub	r2, r2, #16384	; 0x4000
   1b0ec:	clz	r2, r2
   1b0f0:	lsr	r3, r2, #5
   1b0f4:	ldr	r2, [r0, #120]	; 0x78
   1b0f8:	cmp	r2, #3
   1b0fc:	cmpne	r2, #9
   1b100:	beq	1b118 <__assert_fail@plt+0x908c>
   1b104:	ldr	r2, [r0, #124]	; 0x7c
   1b108:	and	r2, r2, #61440	; 0xf000
   1b10c:	sub	r2, r2, #16384	; 0x4000
   1b110:	clz	r2, r2
   1b114:	lsr	ip, r2, #5
   1b118:	subs	r2, r3, ip
   1b11c:	movne	r0, r2
   1b120:	bxne	lr
   1b124:	b	1afb4 <__assert_fail@plt+0x8f28>
   1b128:	push	{r4, r5, r6, r8, r9, sl, fp, lr}
   1b12c:	add	fp, sp, #24
   1b130:	ldrd	r4, [r1, #64]	; 0x40
   1b134:	ldrd	r8, [r0, #64]	; 0x40
   1b138:	mov	r6, #0
   1b13c:	subs	r2, r8, r4
   1b140:	sbcs	r2, r9, r5
   1b144:	mov	r2, #0
   1b148:	movwlt	r2, #1
   1b14c:	subs	r3, r4, r8
   1b150:	sbcs	r3, r5, r9
   1b154:	mvnlt	r2, #0
   1b158:	cmp	r2, #0
   1b15c:	beq	1b168 <__assert_fail@plt+0x90dc>
   1b160:	mov	r0, r2
   1b164:	pop	{r4, r5, r6, r8, r9, sl, fp, pc}
   1b168:	ldr	r4, [r1]
   1b16c:	ldr	r5, [r0]
   1b170:	bl	11ed0 <__errno_location@plt>
   1b174:	str	r6, [r0]
   1b178:	mov	r0, r5
   1b17c:	mov	r1, r4
   1b180:	pop	{r4, r5, r6, r8, r9, sl, fp, lr}
   1b184:	b	11dd4 <strcoll@plt>
   1b188:	push	{r4, r5, r6, r8, r9, sl, fp, lr}
   1b18c:	add	fp, sp, #24
   1b190:	ldr	r6, [r1, #120]	; 0x78
   1b194:	mov	r2, #1
   1b198:	mov	r3, #1
   1b19c:	cmp	r6, #3
   1b1a0:	beq	1b1c4 <__assert_fail@plt+0x9138>
   1b1a4:	cmp	r6, #9
   1b1a8:	mov	r3, #1
   1b1ac:	beq	1b1c4 <__assert_fail@plt+0x9138>
   1b1b0:	ldr	r3, [r1, #124]	; 0x7c
   1b1b4:	and	r3, r3, #61440	; 0xf000
   1b1b8:	sub	r3, r3, #16384	; 0x4000
   1b1bc:	clz	r3, r3
   1b1c0:	lsr	r3, r3, #5
   1b1c4:	ldr	r6, [r0, #120]	; 0x78
   1b1c8:	cmp	r6, #3
   1b1cc:	cmpne	r6, #9
   1b1d0:	bne	1b22c <__assert_fail@plt+0x91a0>
   1b1d4:	subs	r2, r3, r2
   1b1d8:	bne	1b248 <__assert_fail@plt+0x91bc>
   1b1dc:	ldrd	r4, [r1, #64]	; 0x40
   1b1e0:	ldrd	r8, [r0, #64]	; 0x40
   1b1e4:	mov	r6, #0
   1b1e8:	subs	r2, r8, r4
   1b1ec:	sbcs	r2, r9, r5
   1b1f0:	mov	r2, #0
   1b1f4:	movwlt	r2, #1
   1b1f8:	subs	r3, r4, r8
   1b1fc:	sbcs	r3, r5, r9
   1b200:	mvnlt	r2, #0
   1b204:	cmp	r2, #0
   1b208:	bne	1b248 <__assert_fail@plt+0x91bc>
   1b20c:	ldr	r4, [r1]
   1b210:	ldr	r5, [r0]
   1b214:	bl	11ed0 <__errno_location@plt>
   1b218:	str	r6, [r0]
   1b21c:	mov	r0, r5
   1b220:	mov	r1, r4
   1b224:	pop	{r4, r5, r6, r8, r9, sl, fp, lr}
   1b228:	b	11dd4 <strcoll@plt>
   1b22c:	ldr	r2, [r0, #124]	; 0x7c
   1b230:	and	r2, r2, #61440	; 0xf000
   1b234:	sub	r2, r2, #16384	; 0x4000
   1b238:	clz	r2, r2
   1b23c:	lsr	r2, r2, #5
   1b240:	subs	r2, r3, r2
   1b244:	beq	1b1dc <__assert_fail@plt+0x9150>
   1b248:	mov	r0, r2
   1b24c:	pop	{r4, r5, r6, r8, r9, sl, fp, pc}
   1b250:	push	{r4, r5, r6, r8, r9, sl, fp, lr}
   1b254:	add	fp, sp, #24
   1b258:	ldrd	r4, [r0, #64]	; 0x40
   1b25c:	ldrd	r8, [r1, #64]	; 0x40
   1b260:	mov	r6, #0
   1b264:	subs	r2, r8, r4
   1b268:	sbcs	r2, r9, r5
   1b26c:	mov	r2, #0
   1b270:	movwlt	r2, #1
   1b274:	subs	r3, r4, r8
   1b278:	sbcs	r3, r5, r9
   1b27c:	mvnlt	r2, #0
   1b280:	cmp	r2, #0
   1b284:	beq	1b290 <__assert_fail@plt+0x9204>
   1b288:	mov	r0, r2
   1b28c:	pop	{r4, r5, r6, r8, r9, sl, fp, pc}
   1b290:	ldr	r4, [r0]
   1b294:	ldr	r5, [r1]
   1b298:	bl	11ed0 <__errno_location@plt>
   1b29c:	str	r6, [r0]
   1b2a0:	mov	r0, r5
   1b2a4:	mov	r1, r4
   1b2a8:	pop	{r4, r5, r6, r8, r9, sl, fp, lr}
   1b2ac:	b	11dd4 <strcoll@plt>
   1b2b0:	push	{r4, r5, r6, r8, r9, sl, fp, lr}
   1b2b4:	add	fp, sp, #24
   1b2b8:	ldr	r6, [r1, #120]	; 0x78
   1b2bc:	mov	r2, #1
   1b2c0:	mov	r3, #1
   1b2c4:	cmp	r6, #3
   1b2c8:	beq	1b2ec <__assert_fail@plt+0x9260>
   1b2cc:	cmp	r6, #9
   1b2d0:	mov	r3, #1
   1b2d4:	beq	1b2ec <__assert_fail@plt+0x9260>
   1b2d8:	ldr	r3, [r1, #124]	; 0x7c
   1b2dc:	and	r3, r3, #61440	; 0xf000
   1b2e0:	sub	r3, r3, #16384	; 0x4000
   1b2e4:	clz	r3, r3
   1b2e8:	lsr	r3, r3, #5
   1b2ec:	ldr	r6, [r0, #120]	; 0x78
   1b2f0:	cmp	r6, #3
   1b2f4:	cmpne	r6, #9
   1b2f8:	bne	1b354 <__assert_fail@plt+0x92c8>
   1b2fc:	subs	r2, r3, r2
   1b300:	bne	1b370 <__assert_fail@plt+0x92e4>
   1b304:	ldrd	r4, [r0, #64]	; 0x40
   1b308:	ldrd	r8, [r1, #64]	; 0x40
   1b30c:	mov	r6, #0
   1b310:	subs	r2, r8, r4
   1b314:	sbcs	r2, r9, r5
   1b318:	mov	r2, #0
   1b31c:	movwlt	r2, #1
   1b320:	subs	r3, r4, r8
   1b324:	sbcs	r3, r5, r9
   1b328:	mvnlt	r2, #0
   1b32c:	cmp	r2, #0
   1b330:	bne	1b370 <__assert_fail@plt+0x92e4>
   1b334:	ldr	r4, [r0]
   1b338:	ldr	r5, [r1]
   1b33c:	bl	11ed0 <__errno_location@plt>
   1b340:	str	r6, [r0]
   1b344:	mov	r0, r5
   1b348:	mov	r1, r4
   1b34c:	pop	{r4, r5, r6, r8, r9, sl, fp, lr}
   1b350:	b	11dd4 <strcoll@plt>
   1b354:	ldr	r2, [r0, #124]	; 0x7c
   1b358:	and	r2, r2, #61440	; 0xf000
   1b35c:	sub	r2, r2, #16384	; 0x4000
   1b360:	clz	r2, r2
   1b364:	lsr	r2, r2, #5
   1b368:	subs	r2, r3, r2
   1b36c:	beq	1b304 <__assert_fail@plt+0x9278>
   1b370:	mov	r0, r2
   1b374:	pop	{r4, r5, r6, r8, r9, sl, fp, pc}
   1b378:	push	{r4, r5, r6, r7, fp, lr}
   1b37c:	add	fp, sp, #16
   1b380:	ldrd	r4, [r1, #64]	; 0x40
   1b384:	ldrd	r6, [r0, #64]	; 0x40
   1b388:	mov	r2, #0
   1b38c:	subs	r3, r6, r4
   1b390:	sbcs	r3, r7, r5
   1b394:	movwlt	r2, #1
   1b398:	subs	r3, r4, r6
   1b39c:	sbcs	r3, r5, r7
   1b3a0:	mvnlt	r2, #0
   1b3a4:	cmp	r2, #0
   1b3a8:	beq	1b3b4 <__assert_fail@plt+0x9328>
   1b3ac:	mov	r0, r2
   1b3b0:	pop	{r4, r5, r6, r7, fp, pc}
   1b3b4:	ldr	r1, [r1]
   1b3b8:	ldr	r0, [r0]
   1b3bc:	pop	{r4, r5, r6, r7, fp, lr}
   1b3c0:	b	11bd0 <strcmp@plt>
   1b3c4:	push	{r4, r5, r6, r7, fp, lr}
   1b3c8:	add	fp, sp, #16
   1b3cc:	ldr	r2, [r1, #120]	; 0x78
   1b3d0:	mov	ip, #1
   1b3d4:	mov	r3, #1
   1b3d8:	cmp	r2, #3
   1b3dc:	beq	1b400 <__assert_fail@plt+0x9374>
   1b3e0:	cmp	r2, #9
   1b3e4:	mov	r3, #1
   1b3e8:	beq	1b400 <__assert_fail@plt+0x9374>
   1b3ec:	ldr	r2, [r1, #124]	; 0x7c
   1b3f0:	and	r2, r2, #61440	; 0xf000
   1b3f4:	sub	r2, r2, #16384	; 0x4000
   1b3f8:	clz	r2, r2
   1b3fc:	lsr	r3, r2, #5
   1b400:	ldr	r2, [r0, #120]	; 0x78
   1b404:	cmp	r2, #3
   1b408:	cmpne	r2, #9
   1b40c:	bne	1b454 <__assert_fail@plt+0x93c8>
   1b410:	subs	r2, r3, ip
   1b414:	bne	1b470 <__assert_fail@plt+0x93e4>
   1b418:	ldrd	r4, [r1, #64]	; 0x40
   1b41c:	ldrd	r6, [r0, #64]	; 0x40
   1b420:	mov	r2, #0
   1b424:	subs	r3, r6, r4
   1b428:	sbcs	r3, r7, r5
   1b42c:	movwlt	r2, #1
   1b430:	subs	r3, r4, r6
   1b434:	sbcs	r3, r5, r7
   1b438:	mvnlt	r2, #0
   1b43c:	cmp	r2, #0
   1b440:	bne	1b470 <__assert_fail@plt+0x93e4>
   1b444:	ldr	r1, [r1]
   1b448:	ldr	r0, [r0]
   1b44c:	pop	{r4, r5, r6, r7, fp, lr}
   1b450:	b	11bd0 <strcmp@plt>
   1b454:	ldr	r2, [r0, #124]	; 0x7c
   1b458:	and	r2, r2, #61440	; 0xf000
   1b45c:	sub	r2, r2, #16384	; 0x4000
   1b460:	clz	r2, r2
   1b464:	lsr	ip, r2, #5
   1b468:	subs	r2, r3, ip
   1b46c:	beq	1b418 <__assert_fail@plt+0x938c>
   1b470:	mov	r0, r2
   1b474:	pop	{r4, r5, r6, r7, fp, pc}
   1b478:	push	{r4, r5, r6, r7, fp, lr}
   1b47c:	add	fp, sp, #16
   1b480:	ldrd	r4, [r0, #64]	; 0x40
   1b484:	ldrd	r6, [r1, #64]	; 0x40
   1b488:	mov	r2, #0
   1b48c:	subs	r3, r6, r4
   1b490:	sbcs	r3, r7, r5
   1b494:	movwlt	r2, #1
   1b498:	subs	r3, r4, r6
   1b49c:	sbcs	r3, r5, r7
   1b4a0:	mvnlt	r2, #0
   1b4a4:	cmp	r2, #0
   1b4a8:	beq	1b4b4 <__assert_fail@plt+0x9428>
   1b4ac:	mov	r0, r2
   1b4b0:	pop	{r4, r5, r6, r7, fp, pc}
   1b4b4:	ldr	r2, [r0]
   1b4b8:	ldr	r0, [r1]
   1b4bc:	mov	r1, r2
   1b4c0:	pop	{r4, r5, r6, r7, fp, lr}
   1b4c4:	b	11bd0 <strcmp@plt>
   1b4c8:	push	{r4, r5, r6, r7, fp, lr}
   1b4cc:	add	fp, sp, #16
   1b4d0:	ldr	r2, [r1, #120]	; 0x78
   1b4d4:	mov	ip, #1
   1b4d8:	mov	r3, #1
   1b4dc:	cmp	r2, #3
   1b4e0:	beq	1b504 <__assert_fail@plt+0x9478>
   1b4e4:	cmp	r2, #9
   1b4e8:	mov	r3, #1
   1b4ec:	beq	1b504 <__assert_fail@plt+0x9478>
   1b4f0:	ldr	r2, [r1, #124]	; 0x7c
   1b4f4:	and	r2, r2, #61440	; 0xf000
   1b4f8:	sub	r2, r2, #16384	; 0x4000
   1b4fc:	clz	r2, r2
   1b500:	lsr	r3, r2, #5
   1b504:	ldr	r2, [r0, #120]	; 0x78
   1b508:	cmp	r2, #3
   1b50c:	cmpne	r2, #9
   1b510:	bne	1b55c <__assert_fail@plt+0x94d0>
   1b514:	subs	r2, r3, ip
   1b518:	bne	1b578 <__assert_fail@plt+0x94ec>
   1b51c:	ldrd	r4, [r0, #64]	; 0x40
   1b520:	ldrd	r6, [r1, #64]	; 0x40
   1b524:	mov	r2, #0
   1b528:	subs	r3, r6, r4
   1b52c:	sbcs	r3, r7, r5
   1b530:	movwlt	r2, #1
   1b534:	subs	r3, r4, r6
   1b538:	sbcs	r3, r5, r7
   1b53c:	mvnlt	r2, #0
   1b540:	cmp	r2, #0
   1b544:	bne	1b578 <__assert_fail@plt+0x94ec>
   1b548:	ldr	r2, [r0]
   1b54c:	ldr	r0, [r1]
   1b550:	mov	r1, r2
   1b554:	pop	{r4, r5, r6, r7, fp, lr}
   1b558:	b	11bd0 <strcmp@plt>
   1b55c:	ldr	r2, [r0, #124]	; 0x7c
   1b560:	and	r2, r2, #61440	; 0xf000
   1b564:	sub	r2, r2, #16384	; 0x4000
   1b568:	clz	r2, r2
   1b56c:	lsr	ip, r2, #5
   1b570:	subs	r2, r3, ip
   1b574:	beq	1b51c <__assert_fail@plt+0x9490>
   1b578:	mov	r0, r2
   1b57c:	pop	{r4, r5, r6, r7, fp, pc}
   1b580:	ldr	r1, [r1]
   1b584:	ldr	r0, [r0]
   1b588:	b	1f408 <__assert_fail@plt+0xd37c>
   1b58c:	ldr	r2, [r1, #120]	; 0x78
   1b590:	mov	ip, #1
   1b594:	mov	r3, #1
   1b598:	cmp	r2, #3
   1b59c:	beq	1b5c0 <__assert_fail@plt+0x9534>
   1b5a0:	cmp	r2, #9
   1b5a4:	mov	r3, #1
   1b5a8:	beq	1b5c0 <__assert_fail@plt+0x9534>
   1b5ac:	ldr	r2, [r1, #124]	; 0x7c
   1b5b0:	and	r2, r2, #61440	; 0xf000
   1b5b4:	sub	r2, r2, #16384	; 0x4000
   1b5b8:	clz	r2, r2
   1b5bc:	lsr	r3, r2, #5
   1b5c0:	ldr	r2, [r0, #120]	; 0x78
   1b5c4:	cmp	r2, #3
   1b5c8:	cmpne	r2, #9
   1b5cc:	beq	1b5e4 <__assert_fail@plt+0x9558>
   1b5d0:	ldr	r2, [r0, #124]	; 0x7c
   1b5d4:	and	r2, r2, #61440	; 0xf000
   1b5d8:	sub	r2, r2, #16384	; 0x4000
   1b5dc:	clz	r2, r2
   1b5e0:	lsr	ip, r2, #5
   1b5e4:	subs	r2, r3, ip
   1b5e8:	movne	r0, r2
   1b5ec:	bxne	lr
   1b5f0:	ldr	r1, [r1]
   1b5f4:	ldr	r0, [r0]
   1b5f8:	b	1f408 <__assert_fail@plt+0xd37c>
   1b5fc:	ldr	r2, [r0]
   1b600:	ldr	r0, [r1]
   1b604:	mov	r1, r2
   1b608:	b	1f408 <__assert_fail@plt+0xd37c>
   1b60c:	ldr	r2, [r1, #120]	; 0x78
   1b610:	mov	ip, #1
   1b614:	mov	r3, #1
   1b618:	cmp	r2, #3
   1b61c:	beq	1b640 <__assert_fail@plt+0x95b4>
   1b620:	cmp	r2, #9
   1b624:	mov	r3, #1
   1b628:	beq	1b640 <__assert_fail@plt+0x95b4>
   1b62c:	ldr	r2, [r1, #124]	; 0x7c
   1b630:	and	r2, r2, #61440	; 0xf000
   1b634:	sub	r2, r2, #16384	; 0x4000
   1b638:	clz	r2, r2
   1b63c:	lsr	r3, r2, #5
   1b640:	ldr	r2, [r0, #120]	; 0x78
   1b644:	cmp	r2, #3
   1b648:	cmpne	r2, #9
   1b64c:	beq	1b664 <__assert_fail@plt+0x95d8>
   1b650:	ldr	r2, [r0, #124]	; 0x7c
   1b654:	and	r2, r2, #61440	; 0xf000
   1b658:	sub	r2, r2, #16384	; 0x4000
   1b65c:	clz	r2, r2
   1b660:	lsr	ip, r2, #5
   1b664:	subs	r2, r3, ip
   1b668:	movne	r0, r2
   1b66c:	bxne	lr
   1b670:	ldr	r2, [r0]
   1b674:	ldr	r0, [r1]
   1b678:	mov	r1, r2
   1b67c:	b	1f408 <__assert_fail@plt+0xd37c>
   1b680:	push	{r4, r5, r6, sl, fp, lr}
   1b684:	add	fp, sp, #16
   1b688:	ldrd	r2, [r0, #96]	; 0x60
   1b68c:	ldrd	r4, [r1, #96]	; 0x60
   1b690:	mov	r6, #0
   1b694:	cmp	r4, r2
   1b698:	mov	r2, #0
   1b69c:	movwgt	r2, #1
   1b6a0:	sublt	r2, r2, #1
   1b6a4:	cmp	r5, r3
   1b6a8:	mov	r3, #0
   1b6ac:	movwgt	r3, #1
   1b6b0:	sublt	r3, r3, #1
   1b6b4:	add	r2, r3, r2, lsl #1
   1b6b8:	cmp	r2, #0
   1b6bc:	beq	1b6c8 <__assert_fail@plt+0x963c>
   1b6c0:	mov	r0, r2
   1b6c4:	pop	{r4, r5, r6, sl, fp, pc}
   1b6c8:	ldr	r4, [r1]
   1b6cc:	ldr	r5, [r0]
   1b6d0:	bl	11ed0 <__errno_location@plt>
   1b6d4:	str	r6, [r0]
   1b6d8:	mov	r0, r5
   1b6dc:	mov	r1, r4
   1b6e0:	pop	{r4, r5, r6, sl, fp, lr}
   1b6e4:	b	11dd4 <strcoll@plt>
   1b6e8:	push	{r4, r5, r6, sl, fp, lr}
   1b6ec:	add	fp, sp, #16
   1b6f0:	ldr	r6, [r1, #120]	; 0x78
   1b6f4:	mov	r2, #1
   1b6f8:	mov	r3, #1
   1b6fc:	cmp	r6, #3
   1b700:	beq	1b724 <__assert_fail@plt+0x9698>
   1b704:	cmp	r6, #9
   1b708:	mov	r3, #1
   1b70c:	beq	1b724 <__assert_fail@plt+0x9698>
   1b710:	ldr	r3, [r1, #124]	; 0x7c
   1b714:	and	r3, r3, #61440	; 0xf000
   1b718:	sub	r3, r3, #16384	; 0x4000
   1b71c:	clz	r3, r3
   1b720:	lsr	r3, r3, #5
   1b724:	ldr	r6, [r0, #120]	; 0x78
   1b728:	cmp	r6, #3
   1b72c:	cmpne	r6, #9
   1b730:	bne	1b794 <__assert_fail@plt+0x9708>
   1b734:	subs	r2, r3, r2
   1b738:	bne	1b7b0 <__assert_fail@plt+0x9724>
   1b73c:	ldrd	r2, [r0, #96]	; 0x60
   1b740:	ldrd	r4, [r1, #96]	; 0x60
   1b744:	mov	r6, #0
   1b748:	cmp	r4, r2
   1b74c:	mov	r2, #0
   1b750:	movwgt	r2, #1
   1b754:	sublt	r2, r2, #1
   1b758:	cmp	r5, r3
   1b75c:	mov	r3, #0
   1b760:	movwgt	r3, #1
   1b764:	sublt	r3, r3, #1
   1b768:	add	r2, r3, r2, lsl #1
   1b76c:	cmp	r2, #0
   1b770:	bne	1b7b0 <__assert_fail@plt+0x9724>
   1b774:	ldr	r4, [r1]
   1b778:	ldr	r5, [r0]
   1b77c:	bl	11ed0 <__errno_location@plt>
   1b780:	str	r6, [r0]
   1b784:	mov	r0, r5
   1b788:	mov	r1, r4
   1b78c:	pop	{r4, r5, r6, sl, fp, lr}
   1b790:	b	11dd4 <strcoll@plt>
   1b794:	ldr	r2, [r0, #124]	; 0x7c
   1b798:	and	r2, r2, #61440	; 0xf000
   1b79c:	sub	r2, r2, #16384	; 0x4000
   1b7a0:	clz	r2, r2
   1b7a4:	lsr	r2, r2, #5
   1b7a8:	subs	r2, r3, r2
   1b7ac:	beq	1b73c <__assert_fail@plt+0x96b0>
   1b7b0:	mov	r0, r2
   1b7b4:	pop	{r4, r5, r6, sl, fp, pc}
   1b7b8:	push	{r4, r5, r6, sl, fp, lr}
   1b7bc:	add	fp, sp, #16
   1b7c0:	ldrd	r2, [r1, #96]	; 0x60
   1b7c4:	ldrd	r4, [r0, #96]	; 0x60
   1b7c8:	mov	r6, #0
   1b7cc:	cmp	r4, r2
   1b7d0:	mov	r2, #0
   1b7d4:	movwgt	r2, #1
   1b7d8:	sublt	r2, r2, #1
   1b7dc:	cmp	r5, r3
   1b7e0:	mov	r3, #0
   1b7e4:	movwgt	r3, #1
   1b7e8:	sublt	r3, r3, #1
   1b7ec:	add	r2, r3, r2, lsl #1
   1b7f0:	cmp	r2, #0
   1b7f4:	beq	1b800 <__assert_fail@plt+0x9774>
   1b7f8:	mov	r0, r2
   1b7fc:	pop	{r4, r5, r6, sl, fp, pc}
   1b800:	ldr	r4, [r0]
   1b804:	ldr	r5, [r1]
   1b808:	bl	11ed0 <__errno_location@plt>
   1b80c:	str	r6, [r0]
   1b810:	mov	r0, r5
   1b814:	mov	r1, r4
   1b818:	pop	{r4, r5, r6, sl, fp, lr}
   1b81c:	b	11dd4 <strcoll@plt>
   1b820:	push	{r4, r5, r6, sl, fp, lr}
   1b824:	add	fp, sp, #16
   1b828:	ldr	r6, [r1, #120]	; 0x78
   1b82c:	mov	r2, #1
   1b830:	mov	r3, #1
   1b834:	cmp	r6, #3
   1b838:	beq	1b85c <__assert_fail@plt+0x97d0>
   1b83c:	cmp	r6, #9
   1b840:	mov	r3, #1
   1b844:	beq	1b85c <__assert_fail@plt+0x97d0>
   1b848:	ldr	r3, [r1, #124]	; 0x7c
   1b84c:	and	r3, r3, #61440	; 0xf000
   1b850:	sub	r3, r3, #16384	; 0x4000
   1b854:	clz	r3, r3
   1b858:	lsr	r3, r3, #5
   1b85c:	ldr	r6, [r0, #120]	; 0x78
   1b860:	cmp	r6, #3
   1b864:	cmpne	r6, #9
   1b868:	bne	1b8cc <__assert_fail@plt+0x9840>
   1b86c:	subs	r2, r3, r2
   1b870:	bne	1b8e8 <__assert_fail@plt+0x985c>
   1b874:	ldrd	r2, [r1, #96]	; 0x60
   1b878:	ldrd	r4, [r0, #96]	; 0x60
   1b87c:	mov	r6, #0
   1b880:	cmp	r4, r2
   1b884:	mov	r2, #0
   1b888:	movwgt	r2, #1
   1b88c:	sublt	r2, r2, #1
   1b890:	cmp	r5, r3
   1b894:	mov	r3, #0
   1b898:	movwgt	r3, #1
   1b89c:	sublt	r3, r3, #1
   1b8a0:	add	r2, r3, r2, lsl #1
   1b8a4:	cmp	r2, #0
   1b8a8:	bne	1b8e8 <__assert_fail@plt+0x985c>
   1b8ac:	ldr	r4, [r0]
   1b8b0:	ldr	r5, [r1]
   1b8b4:	bl	11ed0 <__errno_location@plt>
   1b8b8:	str	r6, [r0]
   1b8bc:	mov	r0, r5
   1b8c0:	mov	r1, r4
   1b8c4:	pop	{r4, r5, r6, sl, fp, lr}
   1b8c8:	b	11dd4 <strcoll@plt>
   1b8cc:	ldr	r2, [r0, #124]	; 0x7c
   1b8d0:	and	r2, r2, #61440	; 0xf000
   1b8d4:	sub	r2, r2, #16384	; 0x4000
   1b8d8:	clz	r2, r2
   1b8dc:	lsr	r2, r2, #5
   1b8e0:	subs	r2, r3, r2
   1b8e4:	beq	1b874 <__assert_fail@plt+0x97e8>
   1b8e8:	mov	r0, r2
   1b8ec:	pop	{r4, r5, r6, sl, fp, pc}
   1b8f0:	push	{r4, r5, r7, sl, fp, lr}
   1b8f4:	add	fp, sp, #16
   1b8f8:	ldr	r2, [r0, #96]	; 0x60
   1b8fc:	ldrd	r4, [r1, #96]	; 0x60
   1b900:	ldr	r7, [r0, #100]	; 0x64
   1b904:	mov	r3, #0
   1b908:	cmp	r4, r2
   1b90c:	mov	r2, #0
   1b910:	movwgt	r2, #1
   1b914:	sublt	r2, r2, #1
   1b918:	cmp	r5, r7
   1b91c:	movwgt	r3, #1
   1b920:	sublt	r3, r3, #1
   1b924:	add	r2, r3, r2, lsl #1
   1b928:	cmp	r2, #0
   1b92c:	beq	1b938 <__assert_fail@plt+0x98ac>
   1b930:	mov	r0, r2
   1b934:	pop	{r4, r5, r7, sl, fp, pc}
   1b938:	ldr	r1, [r1]
   1b93c:	ldr	r0, [r0]
   1b940:	pop	{r4, r5, r7, sl, fp, lr}
   1b944:	b	11bd0 <strcmp@plt>
   1b948:	push	{r4, r5, r7, sl, fp, lr}
   1b94c:	add	fp, sp, #16
   1b950:	ldr	r2, [r1, #120]	; 0x78
   1b954:	mov	ip, #1
   1b958:	mov	r3, #1
   1b95c:	cmp	r2, #3
   1b960:	beq	1b984 <__assert_fail@plt+0x98f8>
   1b964:	cmp	r2, #9
   1b968:	mov	r3, #1
   1b96c:	beq	1b984 <__assert_fail@plt+0x98f8>
   1b970:	ldr	r2, [r1, #124]	; 0x7c
   1b974:	and	r2, r2, #61440	; 0xf000
   1b978:	sub	r2, r2, #16384	; 0x4000
   1b97c:	clz	r2, r2
   1b980:	lsr	r3, r2, #5
   1b984:	ldr	r2, [r0, #120]	; 0x78
   1b988:	cmp	r2, #3
   1b98c:	cmpne	r2, #9
   1b990:	bne	1b9e4 <__assert_fail@plt+0x9958>
   1b994:	subs	r2, r3, ip
   1b998:	bne	1ba00 <__assert_fail@plt+0x9974>
   1b99c:	ldr	r2, [r0, #96]	; 0x60
   1b9a0:	ldrd	r4, [r1, #96]	; 0x60
   1b9a4:	ldr	r7, [r0, #100]	; 0x64
   1b9a8:	mov	r3, #0
   1b9ac:	cmp	r4, r2
   1b9b0:	mov	r2, #0
   1b9b4:	movwgt	r2, #1
   1b9b8:	sublt	r2, r2, #1
   1b9bc:	cmp	r5, r7
   1b9c0:	movwgt	r3, #1
   1b9c4:	sublt	r3, r3, #1
   1b9c8:	add	r2, r3, r2, lsl #1
   1b9cc:	cmp	r2, #0
   1b9d0:	bne	1ba00 <__assert_fail@plt+0x9974>
   1b9d4:	ldr	r1, [r1]
   1b9d8:	ldr	r0, [r0]
   1b9dc:	pop	{r4, r5, r7, sl, fp, lr}
   1b9e0:	b	11bd0 <strcmp@plt>
   1b9e4:	ldr	r2, [r0, #124]	; 0x7c
   1b9e8:	and	r2, r2, #61440	; 0xf000
   1b9ec:	sub	r2, r2, #16384	; 0x4000
   1b9f0:	clz	r2, r2
   1b9f4:	lsr	ip, r2, #5
   1b9f8:	subs	r2, r3, ip
   1b9fc:	beq	1b99c <__assert_fail@plt+0x9910>
   1ba00:	mov	r0, r2
   1ba04:	pop	{r4, r5, r7, sl, fp, pc}
   1ba08:	push	{r4, r5, r7, sl, fp, lr}
   1ba0c:	add	fp, sp, #16
   1ba10:	ldr	r2, [r1, #96]	; 0x60
   1ba14:	ldrd	r4, [r0, #96]	; 0x60
   1ba18:	ldr	r7, [r1, #100]	; 0x64
   1ba1c:	mov	r3, #0
   1ba20:	cmp	r4, r2
   1ba24:	mov	r2, #0
   1ba28:	movwgt	r2, #1
   1ba2c:	sublt	r2, r2, #1
   1ba30:	cmp	r5, r7
   1ba34:	movwgt	r3, #1
   1ba38:	sublt	r3, r3, #1
   1ba3c:	add	r2, r3, r2, lsl #1
   1ba40:	cmp	r2, #0
   1ba44:	beq	1ba50 <__assert_fail@plt+0x99c4>
   1ba48:	mov	r0, r2
   1ba4c:	pop	{r4, r5, r7, sl, fp, pc}
   1ba50:	ldr	r2, [r0]
   1ba54:	ldr	r0, [r1]
   1ba58:	mov	r1, r2
   1ba5c:	pop	{r4, r5, r7, sl, fp, lr}
   1ba60:	b	11bd0 <strcmp@plt>
   1ba64:	push	{r4, r5, r7, sl, fp, lr}
   1ba68:	add	fp, sp, #16
   1ba6c:	ldr	r2, [r1, #120]	; 0x78
   1ba70:	mov	ip, #1
   1ba74:	mov	r3, #1
   1ba78:	cmp	r2, #3
   1ba7c:	beq	1baa0 <__assert_fail@plt+0x9a14>
   1ba80:	cmp	r2, #9
   1ba84:	mov	r3, #1
   1ba88:	beq	1baa0 <__assert_fail@plt+0x9a14>
   1ba8c:	ldr	r2, [r1, #124]	; 0x7c
   1ba90:	and	r2, r2, #61440	; 0xf000
   1ba94:	sub	r2, r2, #16384	; 0x4000
   1ba98:	clz	r2, r2
   1ba9c:	lsr	r3, r2, #5
   1baa0:	ldr	r2, [r0, #120]	; 0x78
   1baa4:	cmp	r2, #3
   1baa8:	cmpne	r2, #9
   1baac:	bne	1bb04 <__assert_fail@plt+0x9a78>
   1bab0:	subs	r2, r3, ip
   1bab4:	bne	1bb20 <__assert_fail@plt+0x9a94>
   1bab8:	ldr	r2, [r1, #96]	; 0x60
   1babc:	ldrd	r4, [r0, #96]	; 0x60
   1bac0:	ldr	r7, [r1, #100]	; 0x64
   1bac4:	mov	r3, #0
   1bac8:	cmp	r4, r2
   1bacc:	mov	r2, #0
   1bad0:	movwgt	r2, #1
   1bad4:	sublt	r2, r2, #1
   1bad8:	cmp	r5, r7
   1badc:	movwgt	r3, #1
   1bae0:	sublt	r3, r3, #1
   1bae4:	add	r2, r3, r2, lsl #1
   1bae8:	cmp	r2, #0
   1baec:	bne	1bb20 <__assert_fail@plt+0x9a94>
   1baf0:	ldr	r2, [r0]
   1baf4:	ldr	r0, [r1]
   1baf8:	mov	r1, r2
   1bafc:	pop	{r4, r5, r7, sl, fp, lr}
   1bb00:	b	11bd0 <strcmp@plt>
   1bb04:	ldr	r2, [r0, #124]	; 0x7c
   1bb08:	and	r2, r2, #61440	; 0xf000
   1bb0c:	sub	r2, r2, #16384	; 0x4000
   1bb10:	clz	r2, r2
   1bb14:	lsr	ip, r2, #5
   1bb18:	subs	r2, r3, ip
   1bb1c:	beq	1bab8 <__assert_fail@plt+0x9a2c>
   1bb20:	mov	r0, r2
   1bb24:	pop	{r4, r5, r7, sl, fp, pc}
   1bb28:	push	{r4, r5, r6, sl, fp, lr}
   1bb2c:	add	fp, sp, #16
   1bb30:	ldrd	r2, [r0, #104]	; 0x68
   1bb34:	ldrd	r4, [r1, #104]	; 0x68
   1bb38:	mov	r6, #0
   1bb3c:	cmp	r4, r2
   1bb40:	mov	r2, #0
   1bb44:	movwgt	r2, #1
   1bb48:	sublt	r2, r2, #1
   1bb4c:	cmp	r5, r3
   1bb50:	mov	r3, #0
   1bb54:	movwgt	r3, #1
   1bb58:	sublt	r3, r3, #1
   1bb5c:	add	r2, r3, r2, lsl #1
   1bb60:	cmp	r2, #0
   1bb64:	beq	1bb70 <__assert_fail@plt+0x9ae4>
   1bb68:	mov	r0, r2
   1bb6c:	pop	{r4, r5, r6, sl, fp, pc}
   1bb70:	ldr	r4, [r1]
   1bb74:	ldr	r5, [r0]
   1bb78:	bl	11ed0 <__errno_location@plt>
   1bb7c:	str	r6, [r0]
   1bb80:	mov	r0, r5
   1bb84:	mov	r1, r4
   1bb88:	pop	{r4, r5, r6, sl, fp, lr}
   1bb8c:	b	11dd4 <strcoll@plt>
   1bb90:	push	{r4, r5, r6, sl, fp, lr}
   1bb94:	add	fp, sp, #16
   1bb98:	ldr	r6, [r1, #120]	; 0x78
   1bb9c:	mov	r2, #1
   1bba0:	mov	r3, #1
   1bba4:	cmp	r6, #3
   1bba8:	beq	1bbcc <__assert_fail@plt+0x9b40>
   1bbac:	cmp	r6, #9
   1bbb0:	mov	r3, #1
   1bbb4:	beq	1bbcc <__assert_fail@plt+0x9b40>
   1bbb8:	ldr	r3, [r1, #124]	; 0x7c
   1bbbc:	and	r3, r3, #61440	; 0xf000
   1bbc0:	sub	r3, r3, #16384	; 0x4000
   1bbc4:	clz	r3, r3
   1bbc8:	lsr	r3, r3, #5
   1bbcc:	ldr	r6, [r0, #120]	; 0x78
   1bbd0:	cmp	r6, #3
   1bbd4:	cmpne	r6, #9
   1bbd8:	bne	1bc3c <__assert_fail@plt+0x9bb0>
   1bbdc:	subs	r2, r3, r2
   1bbe0:	bne	1bc58 <__assert_fail@plt+0x9bcc>
   1bbe4:	ldrd	r2, [r0, #104]	; 0x68
   1bbe8:	ldrd	r4, [r1, #104]	; 0x68
   1bbec:	mov	r6, #0
   1bbf0:	cmp	r4, r2
   1bbf4:	mov	r2, #0
   1bbf8:	movwgt	r2, #1
   1bbfc:	sublt	r2, r2, #1
   1bc00:	cmp	r5, r3
   1bc04:	mov	r3, #0
   1bc08:	movwgt	r3, #1
   1bc0c:	sublt	r3, r3, #1
   1bc10:	add	r2, r3, r2, lsl #1
   1bc14:	cmp	r2, #0
   1bc18:	bne	1bc58 <__assert_fail@plt+0x9bcc>
   1bc1c:	ldr	r4, [r1]
   1bc20:	ldr	r5, [r0]
   1bc24:	bl	11ed0 <__errno_location@plt>
   1bc28:	str	r6, [r0]
   1bc2c:	mov	r0, r5
   1bc30:	mov	r1, r4
   1bc34:	pop	{r4, r5, r6, sl, fp, lr}
   1bc38:	b	11dd4 <strcoll@plt>
   1bc3c:	ldr	r2, [r0, #124]	; 0x7c
   1bc40:	and	r2, r2, #61440	; 0xf000
   1bc44:	sub	r2, r2, #16384	; 0x4000
   1bc48:	clz	r2, r2
   1bc4c:	lsr	r2, r2, #5
   1bc50:	subs	r2, r3, r2
   1bc54:	beq	1bbe4 <__assert_fail@plt+0x9b58>
   1bc58:	mov	r0, r2
   1bc5c:	pop	{r4, r5, r6, sl, fp, pc}
   1bc60:	push	{r4, r5, r6, sl, fp, lr}
   1bc64:	add	fp, sp, #16
   1bc68:	ldrd	r2, [r1, #104]	; 0x68
   1bc6c:	ldrd	r4, [r0, #104]	; 0x68
   1bc70:	mov	r6, #0
   1bc74:	cmp	r4, r2
   1bc78:	mov	r2, #0
   1bc7c:	movwgt	r2, #1
   1bc80:	sublt	r2, r2, #1
   1bc84:	cmp	r5, r3
   1bc88:	mov	r3, #0
   1bc8c:	movwgt	r3, #1
   1bc90:	sublt	r3, r3, #1
   1bc94:	add	r2, r3, r2, lsl #1
   1bc98:	cmp	r2, #0
   1bc9c:	beq	1bca8 <__assert_fail@plt+0x9c1c>
   1bca0:	mov	r0, r2
   1bca4:	pop	{r4, r5, r6, sl, fp, pc}
   1bca8:	ldr	r4, [r0]
   1bcac:	ldr	r5, [r1]
   1bcb0:	bl	11ed0 <__errno_location@plt>
   1bcb4:	str	r6, [r0]
   1bcb8:	mov	r0, r5
   1bcbc:	mov	r1, r4
   1bcc0:	pop	{r4, r5, r6, sl, fp, lr}
   1bcc4:	b	11dd4 <strcoll@plt>
   1bcc8:	push	{r4, r5, r6, sl, fp, lr}
   1bccc:	add	fp, sp, #16
   1bcd0:	ldr	r6, [r1, #120]	; 0x78
   1bcd4:	mov	r2, #1
   1bcd8:	mov	r3, #1
   1bcdc:	cmp	r6, #3
   1bce0:	beq	1bd04 <__assert_fail@plt+0x9c78>
   1bce4:	cmp	r6, #9
   1bce8:	mov	r3, #1
   1bcec:	beq	1bd04 <__assert_fail@plt+0x9c78>
   1bcf0:	ldr	r3, [r1, #124]	; 0x7c
   1bcf4:	and	r3, r3, #61440	; 0xf000
   1bcf8:	sub	r3, r3, #16384	; 0x4000
   1bcfc:	clz	r3, r3
   1bd00:	lsr	r3, r3, #5
   1bd04:	ldr	r6, [r0, #120]	; 0x78
   1bd08:	cmp	r6, #3
   1bd0c:	cmpne	r6, #9
   1bd10:	bne	1bd74 <__assert_fail@plt+0x9ce8>
   1bd14:	subs	r2, r3, r2
   1bd18:	bne	1bd90 <__assert_fail@plt+0x9d04>
   1bd1c:	ldrd	r2, [r1, #104]	; 0x68
   1bd20:	ldrd	r4, [r0, #104]	; 0x68
   1bd24:	mov	r6, #0
   1bd28:	cmp	r4, r2
   1bd2c:	mov	r2, #0
   1bd30:	movwgt	r2, #1
   1bd34:	sublt	r2, r2, #1
   1bd38:	cmp	r5, r3
   1bd3c:	mov	r3, #0
   1bd40:	movwgt	r3, #1
   1bd44:	sublt	r3, r3, #1
   1bd48:	add	r2, r3, r2, lsl #1
   1bd4c:	cmp	r2, #0
   1bd50:	bne	1bd90 <__assert_fail@plt+0x9d04>
   1bd54:	ldr	r4, [r0]
   1bd58:	ldr	r5, [r1]
   1bd5c:	bl	11ed0 <__errno_location@plt>
   1bd60:	str	r6, [r0]
   1bd64:	mov	r0, r5
   1bd68:	mov	r1, r4
   1bd6c:	pop	{r4, r5, r6, sl, fp, lr}
   1bd70:	b	11dd4 <strcoll@plt>
   1bd74:	ldr	r2, [r0, #124]	; 0x7c
   1bd78:	and	r2, r2, #61440	; 0xf000
   1bd7c:	sub	r2, r2, #16384	; 0x4000
   1bd80:	clz	r2, r2
   1bd84:	lsr	r2, r2, #5
   1bd88:	subs	r2, r3, r2
   1bd8c:	beq	1bd1c <__assert_fail@plt+0x9c90>
   1bd90:	mov	r0, r2
   1bd94:	pop	{r4, r5, r6, sl, fp, pc}
   1bd98:	push	{r4, r5, r7, sl, fp, lr}
   1bd9c:	add	fp, sp, #16
   1bda0:	ldr	r2, [r0, #104]	; 0x68
   1bda4:	ldrd	r4, [r1, #104]	; 0x68
   1bda8:	ldr	r7, [r0, #108]	; 0x6c
   1bdac:	mov	r3, #0
   1bdb0:	cmp	r4, r2
   1bdb4:	mov	r2, #0
   1bdb8:	movwgt	r2, #1
   1bdbc:	sublt	r2, r2, #1
   1bdc0:	cmp	r5, r7
   1bdc4:	movwgt	r3, #1
   1bdc8:	sublt	r3, r3, #1
   1bdcc:	add	r2, r3, r2, lsl #1
   1bdd0:	cmp	r2, #0
   1bdd4:	beq	1bde0 <__assert_fail@plt+0x9d54>
   1bdd8:	mov	r0, r2
   1bddc:	pop	{r4, r5, r7, sl, fp, pc}
   1bde0:	ldr	r1, [r1]
   1bde4:	ldr	r0, [r0]
   1bde8:	pop	{r4, r5, r7, sl, fp, lr}
   1bdec:	b	11bd0 <strcmp@plt>
   1bdf0:	push	{r4, r5, r7, sl, fp, lr}
   1bdf4:	add	fp, sp, #16
   1bdf8:	ldr	r2, [r1, #120]	; 0x78
   1bdfc:	mov	ip, #1
   1be00:	mov	r3, #1
   1be04:	cmp	r2, #3
   1be08:	beq	1be2c <__assert_fail@plt+0x9da0>
   1be0c:	cmp	r2, #9
   1be10:	mov	r3, #1
   1be14:	beq	1be2c <__assert_fail@plt+0x9da0>
   1be18:	ldr	r2, [r1, #124]	; 0x7c
   1be1c:	and	r2, r2, #61440	; 0xf000
   1be20:	sub	r2, r2, #16384	; 0x4000
   1be24:	clz	r2, r2
   1be28:	lsr	r3, r2, #5
   1be2c:	ldr	r2, [r0, #120]	; 0x78
   1be30:	cmp	r2, #3
   1be34:	cmpne	r2, #9
   1be38:	bne	1be8c <__assert_fail@plt+0x9e00>
   1be3c:	subs	r2, r3, ip
   1be40:	bne	1bea8 <__assert_fail@plt+0x9e1c>
   1be44:	ldr	r2, [r0, #104]	; 0x68
   1be48:	ldrd	r4, [r1, #104]	; 0x68
   1be4c:	ldr	r7, [r0, #108]	; 0x6c
   1be50:	mov	r3, #0
   1be54:	cmp	r4, r2
   1be58:	mov	r2, #0
   1be5c:	movwgt	r2, #1
   1be60:	sublt	r2, r2, #1
   1be64:	cmp	r5, r7
   1be68:	movwgt	r3, #1
   1be6c:	sublt	r3, r3, #1
   1be70:	add	r2, r3, r2, lsl #1
   1be74:	cmp	r2, #0
   1be78:	bne	1bea8 <__assert_fail@plt+0x9e1c>
   1be7c:	ldr	r1, [r1]
   1be80:	ldr	r0, [r0]
   1be84:	pop	{r4, r5, r7, sl, fp, lr}
   1be88:	b	11bd0 <strcmp@plt>
   1be8c:	ldr	r2, [r0, #124]	; 0x7c
   1be90:	and	r2, r2, #61440	; 0xf000
   1be94:	sub	r2, r2, #16384	; 0x4000
   1be98:	clz	r2, r2
   1be9c:	lsr	ip, r2, #5
   1bea0:	subs	r2, r3, ip
   1bea4:	beq	1be44 <__assert_fail@plt+0x9db8>
   1bea8:	mov	r0, r2
   1beac:	pop	{r4, r5, r7, sl, fp, pc}
   1beb0:	push	{r4, r5, r7, sl, fp, lr}
   1beb4:	add	fp, sp, #16
   1beb8:	ldr	r2, [r1, #104]	; 0x68
   1bebc:	ldrd	r4, [r0, #104]	; 0x68
   1bec0:	ldr	r7, [r1, #108]	; 0x6c
   1bec4:	mov	r3, #0
   1bec8:	cmp	r4, r2
   1becc:	mov	r2, #0
   1bed0:	movwgt	r2, #1
   1bed4:	sublt	r2, r2, #1
   1bed8:	cmp	r5, r7
   1bedc:	movwgt	r3, #1
   1bee0:	sublt	r3, r3, #1
   1bee4:	add	r2, r3, r2, lsl #1
   1bee8:	cmp	r2, #0
   1beec:	beq	1bef8 <__assert_fail@plt+0x9e6c>
   1bef0:	mov	r0, r2
   1bef4:	pop	{r4, r5, r7, sl, fp, pc}
   1bef8:	ldr	r2, [r0]
   1befc:	ldr	r0, [r1]
   1bf00:	mov	r1, r2
   1bf04:	pop	{r4, r5, r7, sl, fp, lr}
   1bf08:	b	11bd0 <strcmp@plt>
   1bf0c:	push	{r4, r5, r7, sl, fp, lr}
   1bf10:	add	fp, sp, #16
   1bf14:	ldr	r2, [r1, #120]	; 0x78
   1bf18:	mov	ip, #1
   1bf1c:	mov	r3, #1
   1bf20:	cmp	r2, #3
   1bf24:	beq	1bf48 <__assert_fail@plt+0x9ebc>
   1bf28:	cmp	r2, #9
   1bf2c:	mov	r3, #1
   1bf30:	beq	1bf48 <__assert_fail@plt+0x9ebc>
   1bf34:	ldr	r2, [r1, #124]	; 0x7c
   1bf38:	and	r2, r2, #61440	; 0xf000
   1bf3c:	sub	r2, r2, #16384	; 0x4000
   1bf40:	clz	r2, r2
   1bf44:	lsr	r3, r2, #5
   1bf48:	ldr	r2, [r0, #120]	; 0x78
   1bf4c:	cmp	r2, #3
   1bf50:	cmpne	r2, #9
   1bf54:	bne	1bfac <__assert_fail@plt+0x9f20>
   1bf58:	subs	r2, r3, ip
   1bf5c:	bne	1bfc8 <__assert_fail@plt+0x9f3c>
   1bf60:	ldr	r2, [r1, #104]	; 0x68
   1bf64:	ldrd	r4, [r0, #104]	; 0x68
   1bf68:	ldr	r7, [r1, #108]	; 0x6c
   1bf6c:	mov	r3, #0
   1bf70:	cmp	r4, r2
   1bf74:	mov	r2, #0
   1bf78:	movwgt	r2, #1
   1bf7c:	sublt	r2, r2, #1
   1bf80:	cmp	r5, r7
   1bf84:	movwgt	r3, #1
   1bf88:	sublt	r3, r3, #1
   1bf8c:	add	r2, r3, r2, lsl #1
   1bf90:	cmp	r2, #0
   1bf94:	bne	1bfc8 <__assert_fail@plt+0x9f3c>
   1bf98:	ldr	r2, [r0]
   1bf9c:	ldr	r0, [r1]
   1bfa0:	mov	r1, r2
   1bfa4:	pop	{r4, r5, r7, sl, fp, lr}
   1bfa8:	b	11bd0 <strcmp@plt>
   1bfac:	ldr	r2, [r0, #124]	; 0x7c
   1bfb0:	and	r2, r2, #61440	; 0xf000
   1bfb4:	sub	r2, r2, #16384	; 0x4000
   1bfb8:	clz	r2, r2
   1bfbc:	lsr	ip, r2, #5
   1bfc0:	subs	r2, r3, ip
   1bfc4:	beq	1bf60 <__assert_fail@plt+0x9ed4>
   1bfc8:	mov	r0, r2
   1bfcc:	pop	{r4, r5, r7, sl, fp, pc}
   1bfd0:	push	{r4, r5, r6, sl, fp, lr}
   1bfd4:	add	fp, sp, #16
   1bfd8:	ldrd	r2, [r0, #88]	; 0x58
   1bfdc:	ldrd	r4, [r1, #88]	; 0x58
   1bfe0:	mov	r6, #0
   1bfe4:	cmp	r4, r2
   1bfe8:	mov	r2, #0
   1bfec:	movwgt	r2, #1
   1bff0:	sublt	r2, r2, #1
   1bff4:	cmp	r5, r3
   1bff8:	mov	r3, #0
   1bffc:	movwgt	r3, #1
   1c000:	sublt	r3, r3, #1
   1c004:	add	r2, r3, r2, lsl #1
   1c008:	cmp	r2, #0
   1c00c:	beq	1c018 <__assert_fail@plt+0x9f8c>
   1c010:	mov	r0, r2
   1c014:	pop	{r4, r5, r6, sl, fp, pc}
   1c018:	ldr	r4, [r1]
   1c01c:	ldr	r5, [r0]
   1c020:	bl	11ed0 <__errno_location@plt>
   1c024:	str	r6, [r0]
   1c028:	mov	r0, r5
   1c02c:	mov	r1, r4
   1c030:	pop	{r4, r5, r6, sl, fp, lr}
   1c034:	b	11dd4 <strcoll@plt>
   1c038:	push	{r4, r5, r6, sl, fp, lr}
   1c03c:	add	fp, sp, #16
   1c040:	ldr	r6, [r1, #120]	; 0x78
   1c044:	mov	r2, #1
   1c048:	mov	r3, #1
   1c04c:	cmp	r6, #3
   1c050:	beq	1c074 <__assert_fail@plt+0x9fe8>
   1c054:	cmp	r6, #9
   1c058:	mov	r3, #1
   1c05c:	beq	1c074 <__assert_fail@plt+0x9fe8>
   1c060:	ldr	r3, [r1, #124]	; 0x7c
   1c064:	and	r3, r3, #61440	; 0xf000
   1c068:	sub	r3, r3, #16384	; 0x4000
   1c06c:	clz	r3, r3
   1c070:	lsr	r3, r3, #5
   1c074:	ldr	r6, [r0, #120]	; 0x78
   1c078:	cmp	r6, #3
   1c07c:	cmpne	r6, #9
   1c080:	bne	1c0e4 <__assert_fail@plt+0xa058>
   1c084:	subs	r2, r3, r2
   1c088:	bne	1c100 <__assert_fail@plt+0xa074>
   1c08c:	ldrd	r2, [r0, #88]	; 0x58
   1c090:	ldrd	r4, [r1, #88]	; 0x58
   1c094:	mov	r6, #0
   1c098:	cmp	r4, r2
   1c09c:	mov	r2, #0
   1c0a0:	movwgt	r2, #1
   1c0a4:	sublt	r2, r2, #1
   1c0a8:	cmp	r5, r3
   1c0ac:	mov	r3, #0
   1c0b0:	movwgt	r3, #1
   1c0b4:	sublt	r3, r3, #1
   1c0b8:	add	r2, r3, r2, lsl #1
   1c0bc:	cmp	r2, #0
   1c0c0:	bne	1c100 <__assert_fail@plt+0xa074>
   1c0c4:	ldr	r4, [r1]
   1c0c8:	ldr	r5, [r0]
   1c0cc:	bl	11ed0 <__errno_location@plt>
   1c0d0:	str	r6, [r0]
   1c0d4:	mov	r0, r5
   1c0d8:	mov	r1, r4
   1c0dc:	pop	{r4, r5, r6, sl, fp, lr}
   1c0e0:	b	11dd4 <strcoll@plt>
   1c0e4:	ldr	r2, [r0, #124]	; 0x7c
   1c0e8:	and	r2, r2, #61440	; 0xf000
   1c0ec:	sub	r2, r2, #16384	; 0x4000
   1c0f0:	clz	r2, r2
   1c0f4:	lsr	r2, r2, #5
   1c0f8:	subs	r2, r3, r2
   1c0fc:	beq	1c08c <__assert_fail@plt+0xa000>
   1c100:	mov	r0, r2
   1c104:	pop	{r4, r5, r6, sl, fp, pc}
   1c108:	push	{r4, r5, r6, sl, fp, lr}
   1c10c:	add	fp, sp, #16
   1c110:	ldrd	r2, [r1, #88]	; 0x58
   1c114:	ldrd	r4, [r0, #88]	; 0x58
   1c118:	mov	r6, #0
   1c11c:	cmp	r4, r2
   1c120:	mov	r2, #0
   1c124:	movwgt	r2, #1
   1c128:	sublt	r2, r2, #1
   1c12c:	cmp	r5, r3
   1c130:	mov	r3, #0
   1c134:	movwgt	r3, #1
   1c138:	sublt	r3, r3, #1
   1c13c:	add	r2, r3, r2, lsl #1
   1c140:	cmp	r2, #0
   1c144:	beq	1c150 <__assert_fail@plt+0xa0c4>
   1c148:	mov	r0, r2
   1c14c:	pop	{r4, r5, r6, sl, fp, pc}
   1c150:	ldr	r4, [r0]
   1c154:	ldr	r5, [r1]
   1c158:	bl	11ed0 <__errno_location@plt>
   1c15c:	str	r6, [r0]
   1c160:	mov	r0, r5
   1c164:	mov	r1, r4
   1c168:	pop	{r4, r5, r6, sl, fp, lr}
   1c16c:	b	11dd4 <strcoll@plt>
   1c170:	push	{r4, r5, r6, sl, fp, lr}
   1c174:	add	fp, sp, #16
   1c178:	ldr	r6, [r1, #120]	; 0x78
   1c17c:	mov	r2, #1
   1c180:	mov	r3, #1
   1c184:	cmp	r6, #3
   1c188:	beq	1c1ac <__assert_fail@plt+0xa120>
   1c18c:	cmp	r6, #9
   1c190:	mov	r3, #1
   1c194:	beq	1c1ac <__assert_fail@plt+0xa120>
   1c198:	ldr	r3, [r1, #124]	; 0x7c
   1c19c:	and	r3, r3, #61440	; 0xf000
   1c1a0:	sub	r3, r3, #16384	; 0x4000
   1c1a4:	clz	r3, r3
   1c1a8:	lsr	r3, r3, #5
   1c1ac:	ldr	r6, [r0, #120]	; 0x78
   1c1b0:	cmp	r6, #3
   1c1b4:	cmpne	r6, #9
   1c1b8:	bne	1c21c <__assert_fail@plt+0xa190>
   1c1bc:	subs	r2, r3, r2
   1c1c0:	bne	1c238 <__assert_fail@plt+0xa1ac>
   1c1c4:	ldrd	r2, [r1, #88]	; 0x58
   1c1c8:	ldrd	r4, [r0, #88]	; 0x58
   1c1cc:	mov	r6, #0
   1c1d0:	cmp	r4, r2
   1c1d4:	mov	r2, #0
   1c1d8:	movwgt	r2, #1
   1c1dc:	sublt	r2, r2, #1
   1c1e0:	cmp	r5, r3
   1c1e4:	mov	r3, #0
   1c1e8:	movwgt	r3, #1
   1c1ec:	sublt	r3, r3, #1
   1c1f0:	add	r2, r3, r2, lsl #1
   1c1f4:	cmp	r2, #0
   1c1f8:	bne	1c238 <__assert_fail@plt+0xa1ac>
   1c1fc:	ldr	r4, [r0]
   1c200:	ldr	r5, [r1]
   1c204:	bl	11ed0 <__errno_location@plt>
   1c208:	str	r6, [r0]
   1c20c:	mov	r0, r5
   1c210:	mov	r1, r4
   1c214:	pop	{r4, r5, r6, sl, fp, lr}
   1c218:	b	11dd4 <strcoll@plt>
   1c21c:	ldr	r2, [r0, #124]	; 0x7c
   1c220:	and	r2, r2, #61440	; 0xf000
   1c224:	sub	r2, r2, #16384	; 0x4000
   1c228:	clz	r2, r2
   1c22c:	lsr	r2, r2, #5
   1c230:	subs	r2, r3, r2
   1c234:	beq	1c1c4 <__assert_fail@plt+0xa138>
   1c238:	mov	r0, r2
   1c23c:	pop	{r4, r5, r6, sl, fp, pc}
   1c240:	push	{r4, r5, r7, sl, fp, lr}
   1c244:	add	fp, sp, #16
   1c248:	ldr	r2, [r0, #88]	; 0x58
   1c24c:	ldrd	r4, [r1, #88]	; 0x58
   1c250:	ldr	r7, [r0, #92]	; 0x5c
   1c254:	mov	r3, #0
   1c258:	cmp	r4, r2
   1c25c:	mov	r2, #0
   1c260:	movwgt	r2, #1
   1c264:	sublt	r2, r2, #1
   1c268:	cmp	r5, r7
   1c26c:	movwgt	r3, #1
   1c270:	sublt	r3, r3, #1
   1c274:	add	r2, r3, r2, lsl #1
   1c278:	cmp	r2, #0
   1c27c:	beq	1c288 <__assert_fail@plt+0xa1fc>
   1c280:	mov	r0, r2
   1c284:	pop	{r4, r5, r7, sl, fp, pc}
   1c288:	ldr	r1, [r1]
   1c28c:	ldr	r0, [r0]
   1c290:	pop	{r4, r5, r7, sl, fp, lr}
   1c294:	b	11bd0 <strcmp@plt>
   1c298:	push	{r4, r5, r7, sl, fp, lr}
   1c29c:	add	fp, sp, #16
   1c2a0:	ldr	r2, [r1, #120]	; 0x78
   1c2a4:	mov	ip, #1
   1c2a8:	mov	r3, #1
   1c2ac:	cmp	r2, #3
   1c2b0:	beq	1c2d4 <__assert_fail@plt+0xa248>
   1c2b4:	cmp	r2, #9
   1c2b8:	mov	r3, #1
   1c2bc:	beq	1c2d4 <__assert_fail@plt+0xa248>
   1c2c0:	ldr	r2, [r1, #124]	; 0x7c
   1c2c4:	and	r2, r2, #61440	; 0xf000
   1c2c8:	sub	r2, r2, #16384	; 0x4000
   1c2cc:	clz	r2, r2
   1c2d0:	lsr	r3, r2, #5
   1c2d4:	ldr	r2, [r0, #120]	; 0x78
   1c2d8:	cmp	r2, #3
   1c2dc:	cmpne	r2, #9
   1c2e0:	bne	1c334 <__assert_fail@plt+0xa2a8>
   1c2e4:	subs	r2, r3, ip
   1c2e8:	bne	1c350 <__assert_fail@plt+0xa2c4>
   1c2ec:	ldr	r2, [r0, #88]	; 0x58
   1c2f0:	ldrd	r4, [r1, #88]	; 0x58
   1c2f4:	ldr	r7, [r0, #92]	; 0x5c
   1c2f8:	mov	r3, #0
   1c2fc:	cmp	r4, r2
   1c300:	mov	r2, #0
   1c304:	movwgt	r2, #1
   1c308:	sublt	r2, r2, #1
   1c30c:	cmp	r5, r7
   1c310:	movwgt	r3, #1
   1c314:	sublt	r3, r3, #1
   1c318:	add	r2, r3, r2, lsl #1
   1c31c:	cmp	r2, #0
   1c320:	bne	1c350 <__assert_fail@plt+0xa2c4>
   1c324:	ldr	r1, [r1]
   1c328:	ldr	r0, [r0]
   1c32c:	pop	{r4, r5, r7, sl, fp, lr}
   1c330:	b	11bd0 <strcmp@plt>
   1c334:	ldr	r2, [r0, #124]	; 0x7c
   1c338:	and	r2, r2, #61440	; 0xf000
   1c33c:	sub	r2, r2, #16384	; 0x4000
   1c340:	clz	r2, r2
   1c344:	lsr	ip, r2, #5
   1c348:	subs	r2, r3, ip
   1c34c:	beq	1c2ec <__assert_fail@plt+0xa260>
   1c350:	mov	r0, r2
   1c354:	pop	{r4, r5, r7, sl, fp, pc}
   1c358:	push	{r4, r5, r7, sl, fp, lr}
   1c35c:	add	fp, sp, #16
   1c360:	ldr	r2, [r1, #88]	; 0x58
   1c364:	ldrd	r4, [r0, #88]	; 0x58
   1c368:	ldr	r7, [r1, #92]	; 0x5c
   1c36c:	mov	r3, #0
   1c370:	cmp	r4, r2
   1c374:	mov	r2, #0
   1c378:	movwgt	r2, #1
   1c37c:	sublt	r2, r2, #1
   1c380:	cmp	r5, r7
   1c384:	movwgt	r3, #1
   1c388:	sublt	r3, r3, #1
   1c38c:	add	r2, r3, r2, lsl #1
   1c390:	cmp	r2, #0
   1c394:	beq	1c3a0 <__assert_fail@plt+0xa314>
   1c398:	mov	r0, r2
   1c39c:	pop	{r4, r5, r7, sl, fp, pc}
   1c3a0:	ldr	r2, [r0]
   1c3a4:	ldr	r0, [r1]
   1c3a8:	mov	r1, r2
   1c3ac:	pop	{r4, r5, r7, sl, fp, lr}
   1c3b0:	b	11bd0 <strcmp@plt>
   1c3b4:	push	{r4, r5, r7, sl, fp, lr}
   1c3b8:	add	fp, sp, #16
   1c3bc:	ldr	r2, [r1, #120]	; 0x78
   1c3c0:	mov	ip, #1
   1c3c4:	mov	r3, #1
   1c3c8:	cmp	r2, #3
   1c3cc:	beq	1c3f0 <__assert_fail@plt+0xa364>
   1c3d0:	cmp	r2, #9
   1c3d4:	mov	r3, #1
   1c3d8:	beq	1c3f0 <__assert_fail@plt+0xa364>
   1c3dc:	ldr	r2, [r1, #124]	; 0x7c
   1c3e0:	and	r2, r2, #61440	; 0xf000
   1c3e4:	sub	r2, r2, #16384	; 0x4000
   1c3e8:	clz	r2, r2
   1c3ec:	lsr	r3, r2, #5
   1c3f0:	ldr	r2, [r0, #120]	; 0x78
   1c3f4:	cmp	r2, #3
   1c3f8:	cmpne	r2, #9
   1c3fc:	bne	1c454 <__assert_fail@plt+0xa3c8>
   1c400:	subs	r2, r3, ip
   1c404:	bne	1c470 <__assert_fail@plt+0xa3e4>
   1c408:	ldr	r2, [r1, #88]	; 0x58
   1c40c:	ldrd	r4, [r0, #88]	; 0x58
   1c410:	ldr	r7, [r1, #92]	; 0x5c
   1c414:	mov	r3, #0
   1c418:	cmp	r4, r2
   1c41c:	mov	r2, #0
   1c420:	movwgt	r2, #1
   1c424:	sublt	r2, r2, #1
   1c428:	cmp	r5, r7
   1c42c:	movwgt	r3, #1
   1c430:	sublt	r3, r3, #1
   1c434:	add	r2, r3, r2, lsl #1
   1c438:	cmp	r2, #0
   1c43c:	bne	1c470 <__assert_fail@plt+0xa3e4>
   1c440:	ldr	r2, [r0]
   1c444:	ldr	r0, [r1]
   1c448:	mov	r1, r2
   1c44c:	pop	{r4, r5, r7, sl, fp, lr}
   1c450:	b	11bd0 <strcmp@plt>
   1c454:	ldr	r2, [r0, #124]	; 0x7c
   1c458:	and	r2, r2, #61440	; 0xf000
   1c45c:	sub	r2, r2, #16384	; 0x4000
   1c460:	clz	r2, r2
   1c464:	lsr	ip, r2, #5
   1c468:	subs	r2, r3, ip
   1c46c:	beq	1c408 <__assert_fail@plt+0xa37c>
   1c470:	mov	r0, r2
   1c474:	pop	{r4, r5, r7, sl, fp, pc}
   1c478:	push	{r4, r5, r6, sl, fp, lr}
   1c47c:	add	fp, sp, #16
   1c480:	ldrd	r2, [r0, #96]	; 0x60
   1c484:	ldrd	r4, [r1, #96]	; 0x60
   1c488:	mov	r6, #0
   1c48c:	cmp	r4, r2
   1c490:	mov	r2, #0
   1c494:	movwgt	r2, #1
   1c498:	sublt	r2, r2, #1
   1c49c:	cmp	r5, r3
   1c4a0:	mov	r3, #0
   1c4a4:	movwgt	r3, #1
   1c4a8:	sublt	r3, r3, #1
   1c4ac:	add	r2, r3, r2, lsl #1
   1c4b0:	cmp	r2, #0
   1c4b4:	beq	1c4c0 <__assert_fail@plt+0xa434>
   1c4b8:	mov	r0, r2
   1c4bc:	pop	{r4, r5, r6, sl, fp, pc}
   1c4c0:	ldr	r4, [r1]
   1c4c4:	ldr	r5, [r0]
   1c4c8:	bl	11ed0 <__errno_location@plt>
   1c4cc:	str	r6, [r0]
   1c4d0:	mov	r0, r5
   1c4d4:	mov	r1, r4
   1c4d8:	pop	{r4, r5, r6, sl, fp, lr}
   1c4dc:	b	11dd4 <strcoll@plt>
   1c4e0:	push	{r4, r5, r6, sl, fp, lr}
   1c4e4:	add	fp, sp, #16
   1c4e8:	ldr	r6, [r1, #120]	; 0x78
   1c4ec:	mov	r2, #1
   1c4f0:	mov	r3, #1
   1c4f4:	cmp	r6, #3
   1c4f8:	beq	1c51c <__assert_fail@plt+0xa490>
   1c4fc:	cmp	r6, #9
   1c500:	mov	r3, #1
   1c504:	beq	1c51c <__assert_fail@plt+0xa490>
   1c508:	ldr	r3, [r1, #124]	; 0x7c
   1c50c:	and	r3, r3, #61440	; 0xf000
   1c510:	sub	r3, r3, #16384	; 0x4000
   1c514:	clz	r3, r3
   1c518:	lsr	r3, r3, #5
   1c51c:	ldr	r6, [r0, #120]	; 0x78
   1c520:	cmp	r6, #3
   1c524:	cmpne	r6, #9
   1c528:	bne	1c58c <__assert_fail@plt+0xa500>
   1c52c:	subs	r2, r3, r2
   1c530:	bne	1c5a8 <__assert_fail@plt+0xa51c>
   1c534:	ldrd	r2, [r0, #96]	; 0x60
   1c538:	ldrd	r4, [r1, #96]	; 0x60
   1c53c:	mov	r6, #0
   1c540:	cmp	r4, r2
   1c544:	mov	r2, #0
   1c548:	movwgt	r2, #1
   1c54c:	sublt	r2, r2, #1
   1c550:	cmp	r5, r3
   1c554:	mov	r3, #0
   1c558:	movwgt	r3, #1
   1c55c:	sublt	r3, r3, #1
   1c560:	add	r2, r3, r2, lsl #1
   1c564:	cmp	r2, #0
   1c568:	bne	1c5a8 <__assert_fail@plt+0xa51c>
   1c56c:	ldr	r4, [r1]
   1c570:	ldr	r5, [r0]
   1c574:	bl	11ed0 <__errno_location@plt>
   1c578:	str	r6, [r0]
   1c57c:	mov	r0, r5
   1c580:	mov	r1, r4
   1c584:	pop	{r4, r5, r6, sl, fp, lr}
   1c588:	b	11dd4 <strcoll@plt>
   1c58c:	ldr	r2, [r0, #124]	; 0x7c
   1c590:	and	r2, r2, #61440	; 0xf000
   1c594:	sub	r2, r2, #16384	; 0x4000
   1c598:	clz	r2, r2
   1c59c:	lsr	r2, r2, #5
   1c5a0:	subs	r2, r3, r2
   1c5a4:	beq	1c534 <__assert_fail@plt+0xa4a8>
   1c5a8:	mov	r0, r2
   1c5ac:	pop	{r4, r5, r6, sl, fp, pc}
   1c5b0:	push	{r4, r5, r6, sl, fp, lr}
   1c5b4:	add	fp, sp, #16
   1c5b8:	ldrd	r2, [r1, #96]	; 0x60
   1c5bc:	ldrd	r4, [r0, #96]	; 0x60
   1c5c0:	mov	r6, #0
   1c5c4:	cmp	r4, r2
   1c5c8:	mov	r2, #0
   1c5cc:	movwgt	r2, #1
   1c5d0:	sublt	r2, r2, #1
   1c5d4:	cmp	r5, r3
   1c5d8:	mov	r3, #0
   1c5dc:	movwgt	r3, #1
   1c5e0:	sublt	r3, r3, #1
   1c5e4:	add	r2, r3, r2, lsl #1
   1c5e8:	cmp	r2, #0
   1c5ec:	beq	1c5f8 <__assert_fail@plt+0xa56c>
   1c5f0:	mov	r0, r2
   1c5f4:	pop	{r4, r5, r6, sl, fp, pc}
   1c5f8:	ldr	r4, [r0]
   1c5fc:	ldr	r5, [r1]
   1c600:	bl	11ed0 <__errno_location@plt>
   1c604:	str	r6, [r0]
   1c608:	mov	r0, r5
   1c60c:	mov	r1, r4
   1c610:	pop	{r4, r5, r6, sl, fp, lr}
   1c614:	b	11dd4 <strcoll@plt>
   1c618:	push	{r4, r5, r6, sl, fp, lr}
   1c61c:	add	fp, sp, #16
   1c620:	ldr	r6, [r1, #120]	; 0x78
   1c624:	mov	r2, #1
   1c628:	mov	r3, #1
   1c62c:	cmp	r6, #3
   1c630:	beq	1c654 <__assert_fail@plt+0xa5c8>
   1c634:	cmp	r6, #9
   1c638:	mov	r3, #1
   1c63c:	beq	1c654 <__assert_fail@plt+0xa5c8>
   1c640:	ldr	r3, [r1, #124]	; 0x7c
   1c644:	and	r3, r3, #61440	; 0xf000
   1c648:	sub	r3, r3, #16384	; 0x4000
   1c64c:	clz	r3, r3
   1c650:	lsr	r3, r3, #5
   1c654:	ldr	r6, [r0, #120]	; 0x78
   1c658:	cmp	r6, #3
   1c65c:	cmpne	r6, #9
   1c660:	bne	1c6c4 <__assert_fail@plt+0xa638>
   1c664:	subs	r2, r3, r2
   1c668:	bne	1c6e0 <__assert_fail@plt+0xa654>
   1c66c:	ldrd	r2, [r1, #96]	; 0x60
   1c670:	ldrd	r4, [r0, #96]	; 0x60
   1c674:	mov	r6, #0
   1c678:	cmp	r4, r2
   1c67c:	mov	r2, #0
   1c680:	movwgt	r2, #1
   1c684:	sublt	r2, r2, #1
   1c688:	cmp	r5, r3
   1c68c:	mov	r3, #0
   1c690:	movwgt	r3, #1
   1c694:	sublt	r3, r3, #1
   1c698:	add	r2, r3, r2, lsl #1
   1c69c:	cmp	r2, #0
   1c6a0:	bne	1c6e0 <__assert_fail@plt+0xa654>
   1c6a4:	ldr	r4, [r0]
   1c6a8:	ldr	r5, [r1]
   1c6ac:	bl	11ed0 <__errno_location@plt>
   1c6b0:	str	r6, [r0]
   1c6b4:	mov	r0, r5
   1c6b8:	mov	r1, r4
   1c6bc:	pop	{r4, r5, r6, sl, fp, lr}
   1c6c0:	b	11dd4 <strcoll@plt>
   1c6c4:	ldr	r2, [r0, #124]	; 0x7c
   1c6c8:	and	r2, r2, #61440	; 0xf000
   1c6cc:	sub	r2, r2, #16384	; 0x4000
   1c6d0:	clz	r2, r2
   1c6d4:	lsr	r2, r2, #5
   1c6d8:	subs	r2, r3, r2
   1c6dc:	beq	1c66c <__assert_fail@plt+0xa5e0>
   1c6e0:	mov	r0, r2
   1c6e4:	pop	{r4, r5, r6, sl, fp, pc}
   1c6e8:	push	{r4, r5, r7, sl, fp, lr}
   1c6ec:	add	fp, sp, #16
   1c6f0:	ldr	r2, [r0, #96]	; 0x60
   1c6f4:	ldrd	r4, [r1, #96]	; 0x60
   1c6f8:	ldr	r7, [r0, #100]	; 0x64
   1c6fc:	mov	r3, #0
   1c700:	cmp	r4, r2
   1c704:	mov	r2, #0
   1c708:	movwgt	r2, #1
   1c70c:	sublt	r2, r2, #1
   1c710:	cmp	r5, r7
   1c714:	movwgt	r3, #1
   1c718:	sublt	r3, r3, #1
   1c71c:	add	r2, r3, r2, lsl #1
   1c720:	cmp	r2, #0
   1c724:	beq	1c730 <__assert_fail@plt+0xa6a4>
   1c728:	mov	r0, r2
   1c72c:	pop	{r4, r5, r7, sl, fp, pc}
   1c730:	ldr	r1, [r1]
   1c734:	ldr	r0, [r0]
   1c738:	pop	{r4, r5, r7, sl, fp, lr}
   1c73c:	b	11bd0 <strcmp@plt>
   1c740:	push	{r4, r5, r7, sl, fp, lr}
   1c744:	add	fp, sp, #16
   1c748:	ldr	r2, [r1, #120]	; 0x78
   1c74c:	mov	ip, #1
   1c750:	mov	r3, #1
   1c754:	cmp	r2, #3
   1c758:	beq	1c77c <__assert_fail@plt+0xa6f0>
   1c75c:	cmp	r2, #9
   1c760:	mov	r3, #1
   1c764:	beq	1c77c <__assert_fail@plt+0xa6f0>
   1c768:	ldr	r2, [r1, #124]	; 0x7c
   1c76c:	and	r2, r2, #61440	; 0xf000
   1c770:	sub	r2, r2, #16384	; 0x4000
   1c774:	clz	r2, r2
   1c778:	lsr	r3, r2, #5
   1c77c:	ldr	r2, [r0, #120]	; 0x78
   1c780:	cmp	r2, #3
   1c784:	cmpne	r2, #9
   1c788:	bne	1c7dc <__assert_fail@plt+0xa750>
   1c78c:	subs	r2, r3, ip
   1c790:	bne	1c7f8 <__assert_fail@plt+0xa76c>
   1c794:	ldr	r2, [r0, #96]	; 0x60
   1c798:	ldrd	r4, [r1, #96]	; 0x60
   1c79c:	ldr	r7, [r0, #100]	; 0x64
   1c7a0:	mov	r3, #0
   1c7a4:	cmp	r4, r2
   1c7a8:	mov	r2, #0
   1c7ac:	movwgt	r2, #1
   1c7b0:	sublt	r2, r2, #1
   1c7b4:	cmp	r5, r7
   1c7b8:	movwgt	r3, #1
   1c7bc:	sublt	r3, r3, #1
   1c7c0:	add	r2, r3, r2, lsl #1
   1c7c4:	cmp	r2, #0
   1c7c8:	bne	1c7f8 <__assert_fail@plt+0xa76c>
   1c7cc:	ldr	r1, [r1]
   1c7d0:	ldr	r0, [r0]
   1c7d4:	pop	{r4, r5, r7, sl, fp, lr}
   1c7d8:	b	11bd0 <strcmp@plt>
   1c7dc:	ldr	r2, [r0, #124]	; 0x7c
   1c7e0:	and	r2, r2, #61440	; 0xf000
   1c7e4:	sub	r2, r2, #16384	; 0x4000
   1c7e8:	clz	r2, r2
   1c7ec:	lsr	ip, r2, #5
   1c7f0:	subs	r2, r3, ip
   1c7f4:	beq	1c794 <__assert_fail@plt+0xa708>
   1c7f8:	mov	r0, r2
   1c7fc:	pop	{r4, r5, r7, sl, fp, pc}
   1c800:	push	{r4, r5, r7, sl, fp, lr}
   1c804:	add	fp, sp, #16
   1c808:	ldr	r2, [r1, #96]	; 0x60
   1c80c:	ldrd	r4, [r0, #96]	; 0x60
   1c810:	ldr	r7, [r1, #100]	; 0x64
   1c814:	mov	r3, #0
   1c818:	cmp	r4, r2
   1c81c:	mov	r2, #0
   1c820:	movwgt	r2, #1
   1c824:	sublt	r2, r2, #1
   1c828:	cmp	r5, r7
   1c82c:	movwgt	r3, #1
   1c830:	sublt	r3, r3, #1
   1c834:	add	r2, r3, r2, lsl #1
   1c838:	cmp	r2, #0
   1c83c:	beq	1c848 <__assert_fail@plt+0xa7bc>
   1c840:	mov	r0, r2
   1c844:	pop	{r4, r5, r7, sl, fp, pc}
   1c848:	ldr	r2, [r0]
   1c84c:	ldr	r0, [r1]
   1c850:	mov	r1, r2
   1c854:	pop	{r4, r5, r7, sl, fp, lr}
   1c858:	b	11bd0 <strcmp@plt>
   1c85c:	push	{r4, r5, r7, sl, fp, lr}
   1c860:	add	fp, sp, #16
   1c864:	ldr	r2, [r1, #120]	; 0x78
   1c868:	mov	ip, #1
   1c86c:	mov	r3, #1
   1c870:	cmp	r2, #3
   1c874:	beq	1c898 <__assert_fail@plt+0xa80c>
   1c878:	cmp	r2, #9
   1c87c:	mov	r3, #1
   1c880:	beq	1c898 <__assert_fail@plt+0xa80c>
   1c884:	ldr	r2, [r1, #124]	; 0x7c
   1c888:	and	r2, r2, #61440	; 0xf000
   1c88c:	sub	r2, r2, #16384	; 0x4000
   1c890:	clz	r2, r2
   1c894:	lsr	r3, r2, #5
   1c898:	ldr	r2, [r0, #120]	; 0x78
   1c89c:	cmp	r2, #3
   1c8a0:	cmpne	r2, #9
   1c8a4:	bne	1c8fc <__assert_fail@plt+0xa870>
   1c8a8:	subs	r2, r3, ip
   1c8ac:	bne	1c918 <__assert_fail@plt+0xa88c>
   1c8b0:	ldr	r2, [r1, #96]	; 0x60
   1c8b4:	ldrd	r4, [r0, #96]	; 0x60
   1c8b8:	ldr	r7, [r1, #100]	; 0x64
   1c8bc:	mov	r3, #0
   1c8c0:	cmp	r4, r2
   1c8c4:	mov	r2, #0
   1c8c8:	movwgt	r2, #1
   1c8cc:	sublt	r2, r2, #1
   1c8d0:	cmp	r5, r7
   1c8d4:	movwgt	r3, #1
   1c8d8:	sublt	r3, r3, #1
   1c8dc:	add	r2, r3, r2, lsl #1
   1c8e0:	cmp	r2, #0
   1c8e4:	bne	1c918 <__assert_fail@plt+0xa88c>
   1c8e8:	ldr	r2, [r0]
   1c8ec:	ldr	r0, [r1]
   1c8f0:	mov	r1, r2
   1c8f4:	pop	{r4, r5, r7, sl, fp, lr}
   1c8f8:	b	11bd0 <strcmp@plt>
   1c8fc:	ldr	r2, [r0, #124]	; 0x7c
   1c900:	and	r2, r2, #61440	; 0xf000
   1c904:	sub	r2, r2, #16384	; 0x4000
   1c908:	clz	r2, r2
   1c90c:	lsr	ip, r2, #5
   1c910:	subs	r2, r3, ip
   1c914:	beq	1c8b0 <__assert_fail@plt+0xa824>
   1c918:	mov	r0, r2
   1c91c:	pop	{r4, r5, r7, sl, fp, pc}
   1c920:	push	{r4, r5, fp, lr}
   1c924:	add	fp, sp, #8
   1c928:	mov	r4, r1
   1c92c:	mov	r5, r0
   1c930:	bl	11ed0 <__errno_location@plt>
   1c934:	mov	r1, #0
   1c938:	str	r1, [r0]
   1c93c:	mov	r0, r5
   1c940:	mov	r1, r4
   1c944:	pop	{r4, r5, fp, lr}
   1c948:	b	11dd4 <strcoll@plt>
   1c94c:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   1c950:	add	fp, sp, #24
   1c954:	sub	sp, sp, #24
   1c958:	sub	sp, sp, #8192	; 0x2000
   1c95c:	ldr	r4, [r0, #148]	; 0x94
   1c960:	mov	r8, r2
   1c964:	mov	r6, r1
   1c968:	mov	r5, r0
   1c96c:	cmp	r4, #0
   1c970:	bne	1c9cc <__assert_fail@plt+0xa940>
   1c974:	movw	r0, #58372	; 0xe404
   1c978:	ldr	r7, [r5]
   1c97c:	ldr	r3, [r5, #144]	; 0x90
   1c980:	sub	r1, fp, #36	; 0x24
   1c984:	add	r4, sp, #11
   1c988:	movt	r0, #3
   1c98c:	str	r1, [sp]
   1c990:	str	r4, [fp, #-32]	; 0xffffffe0
   1c994:	ldr	r2, [r0]
   1c998:	sub	r0, fp, #37	; 0x25
   1c99c:	str	r0, [sp, #4]
   1c9a0:	sub	r0, fp, #32
   1c9a4:	mov	r1, r7
   1c9a8:	bl	19dd4 <__assert_fail@plt+0x7d48>
   1c9ac:	ldr	r0, [fp, #-32]	; 0xffffffe0
   1c9b0:	cmp	r0, r4
   1c9b4:	cmpne	r0, r7
   1c9b8:	beq	1c9c0 <__assert_fail@plt+0xa934>
   1c9bc:	bl	1f89c <__assert_fail@plt+0xd810>
   1c9c0:	ldrb	r0, [fp, #-37]	; 0xffffffdb
   1c9c4:	ldr	r1, [fp, #-36]	; 0xffffffdc
   1c9c8:	add	r4, r1, r0
   1c9cc:	ldr	r0, [r6, #148]	; 0x94
   1c9d0:	cmp	r0, #0
   1c9d4:	beq	1c9e8 <__assert_fail@plt+0xa95c>
   1c9d8:	subs	r0, r4, r0
   1c9dc:	beq	1ca48 <__assert_fail@plt+0xa9bc>
   1c9e0:	sub	sp, fp, #24
   1c9e4:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   1c9e8:	movw	r0, #58372	; 0xe404
   1c9ec:	ldr	r7, [r6]
   1c9f0:	ldr	r3, [r6, #144]	; 0x90
   1c9f4:	sub	r1, fp, #36	; 0x24
   1c9f8:	add	r9, sp, #11
   1c9fc:	movt	r0, #3
   1ca00:	str	r1, [sp]
   1ca04:	str	r9, [fp, #-32]	; 0xffffffe0
   1ca08:	ldr	r2, [r0]
   1ca0c:	sub	r0, fp, #37	; 0x25
   1ca10:	str	r0, [sp, #4]
   1ca14:	sub	r0, fp, #32
   1ca18:	mov	r1, r7
   1ca1c:	bl	19dd4 <__assert_fail@plt+0x7d48>
   1ca20:	ldr	r0, [fp, #-32]	; 0xffffffe0
   1ca24:	cmp	r0, r9
   1ca28:	cmpne	r0, r7
   1ca2c:	beq	1ca34 <__assert_fail@plt+0xa9a8>
   1ca30:	bl	1f89c <__assert_fail@plt+0xd810>
   1ca34:	ldrb	r0, [fp, #-37]	; 0xffffffdb
   1ca38:	ldr	r1, [fp, #-36]	; 0xffffffdc
   1ca3c:	add	r0, r1, r0
   1ca40:	subs	r0, r4, r0
   1ca44:	bne	1c9e0 <__assert_fail@plt+0xa954>
   1ca48:	ldr	r1, [r6]
   1ca4c:	ldr	r0, [r5]
   1ca50:	blx	r8
   1ca54:	sub	sp, fp, #24
   1ca58:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   1ca5c:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   1ca60:	add	fp, sp, #24
   1ca64:	sub	sp, sp, #672	; 0x2a0
   1ca68:	mov	r4, r0
   1ca6c:	movw	r0, #58156	; 0xe32c
   1ca70:	mov	r8, r1
   1ca74:	movt	r0, #3
   1ca78:	ldrb	r0, [r0]
   1ca7c:	cmp	r0, #0
   1ca80:	beq	1caec <__assert_fail@plt+0xaa60>
   1ca84:	movw	r6, #57800	; 0xe1c8
   1ca88:	movt	r6, #3
   1ca8c:	ldr	r1, [r6, #32]
   1ca90:	cmp	r1, #0
   1ca94:	beq	1caec <__assert_fail@plt+0xaa60>
   1ca98:	ldr	r0, [r6, #36]	; 0x24
   1ca9c:	cmp	r1, #2
   1caa0:	beq	1cabc <__assert_fail@plt+0xaa30>
   1caa4:	cmp	r1, #1
   1caa8:	bne	1cad4 <__assert_fail@plt+0xaa48>
   1caac:	ldrb	r0, [r0]
   1cab0:	cmp	r0, #48	; 0x30
   1cab4:	bne	1cad4 <__assert_fail@plt+0xaa48>
   1cab8:	b	1caec <__assert_fail@plt+0xaa60>
   1cabc:	movw	r1, #46144	; 0xb440
   1cac0:	mov	r2, #2
   1cac4:	movt	r1, #2
   1cac8:	bl	1202c <strncmp@plt>
   1cacc:	cmp	r0, #0
   1cad0:	beq	1caec <__assert_fail@plt+0xaa60>
   1cad4:	mov	r0, r6
   1cad8:	bl	18e3c <__assert_fail@plt+0x6db0>
   1cadc:	add	r0, r6, #32
   1cae0:	bl	18e3c <__assert_fail@plt+0x6db0>
   1cae4:	add	r0, r6, #8
   1cae8:	bl	18e3c <__assert_fail@plt+0x6db0>
   1caec:	movw	r0, #58800	; 0xe5b0
   1caf0:	movt	r0, #3
   1caf4:	ldrb	r0, [r0]
   1caf8:	cmp	r0, #1
   1cafc:	bne	1cb60 <__assert_fail@plt+0xaad4>
   1cb00:	movw	r1, #58168	; 0xe338
   1cb04:	movw	r0, #61932	; 0xf1ec
   1cb08:	movw	r3, #47586	; 0xb9e2
   1cb0c:	movt	r1, #3
   1cb10:	movt	r0, #3
   1cb14:	movt	r3, #2
   1cb18:	ldr	r1, [r1]
   1cb1c:	ldr	r0, [r0]
   1cb20:	subs	r6, r1, #4
   1cb24:	movne	r6, r0
   1cb28:	ldrb	r0, [r4, #132]	; 0x84
   1cb2c:	cmp	r0, #0
   1cb30:	addne	r0, r4, #112	; 0x70
   1cb34:	ldrdne	r0, [r0]
   1cb38:	orrsne	r2, r0, r1
   1cb3c:	beq	1cb4c <__assert_fail@plt+0xaac0>
   1cb40:	add	r2, sp, #20
   1cb44:	bl	21dd0 <__assert_fail@plt+0xfd44>
   1cb48:	mov	r3, r0
   1cb4c:	movw	r1, #48079	; 0xbbcf
   1cb50:	mov	r0, #1
   1cb54:	mov	r2, r6
   1cb58:	movt	r1, #2
   1cb5c:	bl	11f00 <__printf_chk@plt>
   1cb60:	movw	r0, #58245	; 0xe385
   1cb64:	movt	r0, #3
   1cb68:	ldrb	r0, [r0]
   1cb6c:	cmp	r0, #1
   1cb70:	bne	1cc00 <__assert_fail@plt+0xab74>
   1cb74:	movw	r1, #58168	; 0xe338
   1cb78:	movw	r0, #61936	; 0xf1f0
   1cb7c:	movt	r1, #3
   1cb80:	movt	r0, #3
   1cb84:	ldr	r1, [r1]
   1cb88:	ldr	r0, [r0]
   1cb8c:	subs	r6, r1, #4
   1cb90:	movne	r6, r0
   1cb94:	ldrb	r0, [r4, #132]	; 0x84
   1cb98:	cmp	r0, #0
   1cb9c:	beq	1cbe4 <__assert_fail@plt+0xab58>
   1cba0:	movw	r2, #58780	; 0xe59c
   1cba4:	add	r0, r4, #80	; 0x50
   1cba8:	mov	r5, #512	; 0x200
   1cbac:	mov	ip, #0
   1cbb0:	movt	r2, #3
   1cbb4:	ldrd	r0, [r0]
   1cbb8:	stm	sp, {r5, ip}
   1cbbc:	ldr	r3, [r2]
   1cbc0:	movw	r2, #58792	; 0xe5a8
   1cbc4:	movt	r2, #3
   1cbc8:	ldm	r2, {r2, r7}
   1cbcc:	str	r7, [sp, #12]
   1cbd0:	str	r2, [sp, #8]
   1cbd4:	add	r2, sp, #20
   1cbd8:	bl	20cf8 <__assert_fail@plt+0xec6c>
   1cbdc:	mov	r3, r0
   1cbe0:	b	1cbec <__assert_fail@plt+0xab60>
   1cbe4:	movw	r3, #47586	; 0xb9e2
   1cbe8:	movt	r3, #2
   1cbec:	movw	r1, #48079	; 0xbbcf
   1cbf0:	mov	r0, #1
   1cbf4:	mov	r2, r6
   1cbf8:	movt	r1, #2
   1cbfc:	bl	11f00 <__printf_chk@plt>
   1cc00:	movw	r0, #58244	; 0xe384
   1cc04:	movt	r0, #3
   1cc08:	ldrb	r0, [r0]
   1cc0c:	cmp	r0, #1
   1cc10:	bne	1cc48 <__assert_fail@plt+0xabbc>
   1cc14:	movw	r1, #58168	; 0xe338
   1cc18:	movw	r0, #61956	; 0xf204
   1cc1c:	ldr	r3, [r4, #128]	; 0x80
   1cc20:	movt	r1, #3
   1cc24:	movt	r0, #3
   1cc28:	ldr	r1, [r1]
   1cc2c:	ldr	r0, [r0]
   1cc30:	subs	r2, r1, #4
   1cc34:	movw	r1, #48079	; 0xbbcf
   1cc38:	movt	r1, #2
   1cc3c:	movne	r2, r0
   1cc40:	mov	r0, #1
   1cc44:	bl	11f00 <__printf_chk@plt>
   1cc48:	mov	r0, r4
   1cc4c:	mov	r1, #0
   1cc50:	mov	r2, #0
   1cc54:	mov	r3, r8
   1cc58:	bl	1cf20 <__assert_fail@plt+0xae94>
   1cc5c:	movw	r0, #58180	; 0xe344
   1cc60:	movt	r0, #3
   1cc64:	ldr	r2, [r0]
   1cc68:	cmp	r2, #0
   1cc6c:	beq	1cd40 <__assert_fail@plt+0xacb4>
   1cc70:	ldrb	r6, [r4, #132]	; 0x84
   1cc74:	ldr	r3, [r4, #32]
   1cc78:	ldr	r0, [r4, #120]	; 0x78
   1cc7c:	cmp	r6, #0
   1cc80:	beq	1ccb0 <__assert_fail@plt+0xac24>
   1cc84:	and	r1, r3, #61440	; 0xf000
   1cc88:	cmp	r1, #16384	; 0x4000
   1cc8c:	beq	1ccfc <__assert_fail@plt+0xac70>
   1cc90:	cmp	r1, #32768	; 0x8000
   1cc94:	bne	1cccc <__assert_fail@plt+0xac40>
   1cc98:	tst	r3, #73	; 0x49
   1cc9c:	beq	1cd40 <__assert_fail@plt+0xacb4>
   1cca0:	mov	r1, #42	; 0x2a
   1cca4:	cmp	r2, #3
   1cca8:	beq	1cd00 <__assert_fail@plt+0xac74>
   1ccac:	b	1cd40 <__assert_fail@plt+0xacb4>
   1ccb0:	mov	r1, #47	; 0x2f
   1ccb4:	cmp	r0, #3
   1ccb8:	beq	1cd00 <__assert_fail@plt+0xac74>
   1ccbc:	cmp	r0, #5
   1ccc0:	beq	1cd40 <__assert_fail@plt+0xacb4>
   1ccc4:	cmp	r0, #9
   1ccc8:	beq	1cd00 <__assert_fail@plt+0xac74>
   1cccc:	cmp	r2, #1
   1ccd0:	beq	1cd40 <__assert_fail@plt+0xacb4>
   1ccd4:	cmp	r6, #0
   1ccd8:	beq	1cd48 <__assert_fail@plt+0xacbc>
   1ccdc:	and	r0, r3, #61440	; 0xf000
   1cce0:	cmp	r0, #4096	; 0x1000
   1cce4:	beq	1cd60 <__assert_fail@plt+0xacd4>
   1cce8:	cmp	r0, #40960	; 0xa000
   1ccec:	beq	1cd70 <__assert_fail@plt+0xace4>
   1ccf0:	cmp	r0, #49152	; 0xc000
   1ccf4:	bne	1cd40 <__assert_fail@plt+0xacb4>
   1ccf8:	b	1cd68 <__assert_fail@plt+0xacdc>
   1ccfc:	mov	r1, #47	; 0x2f
   1cd00:	movw	r0, #58632	; 0xe508
   1cd04:	movt	r0, #3
   1cd08:	ldrd	r2, [r0]
   1cd0c:	adds	r2, r2, #1
   1cd10:	adc	r3, r3, #0
   1cd14:	strd	r2, [r0]
   1cd18:	movw	r0, #58124	; 0xe30c
   1cd1c:	movt	r0, #3
   1cd20:	ldr	r0, [r0]
   1cd24:	ldr	r2, [r0, #20]
   1cd28:	ldr	r3, [r0, #24]
   1cd2c:	cmp	r2, r3
   1cd30:	bcs	1cd78 <__assert_fail@plt+0xacec>
   1cd34:	add	r3, r2, #1
   1cd38:	str	r3, [r0, #20]
   1cd3c:	strb	r1, [r2]
   1cd40:	sub	sp, fp, #24
   1cd44:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   1cd48:	cmp	r0, #7
   1cd4c:	beq	1cd68 <__assert_fail@plt+0xacdc>
   1cd50:	cmp	r0, #6
   1cd54:	beq	1cd70 <__assert_fail@plt+0xace4>
   1cd58:	cmp	r0, #1
   1cd5c:	bne	1cd40 <__assert_fail@plt+0xacb4>
   1cd60:	mov	r1, #124	; 0x7c
   1cd64:	b	1cd00 <__assert_fail@plt+0xac74>
   1cd68:	mov	r1, #61	; 0x3d
   1cd6c:	b	1cd00 <__assert_fail@plt+0xac74>
   1cd70:	mov	r1, #64	; 0x40
   1cd74:	b	1cd00 <__assert_fail@plt+0xac74>
   1cd78:	bl	11f54 <__overflow@plt>
   1cd7c:	sub	sp, fp, #24
   1cd80:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   1cd84:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1cd88:	add	fp, sp, #28
   1cd8c:	push	{r0}		; (str r0, [sp, #-4]!)
   1cd90:	movw	r0, #58356	; 0xe3f4
   1cd94:	movt	r0, #3
   1cd98:	ldr	r0, [r0]
   1cd9c:	cmp	r0, #0
   1cda0:	beq	1ced0 <__assert_fail@plt+0xae44>
   1cda4:	movw	r9, #58816	; 0xe5c0
   1cda8:	mov	sl, #0
   1cdac:	mov	r7, #0
   1cdb0:	movt	r9, #3
   1cdb4:	b	1cde4 <__assert_fail@plt+0xad58>
   1cdb8:	mov	r8, r7
   1cdbc:	mov	r0, r5
   1cdc0:	mov	r1, r8
   1cdc4:	bl	1ca5c <__assert_fail@plt+0xa9d0>
   1cdc8:	movw	r0, #58356	; 0xe3f4
   1cdcc:	add	sl, sl, #1
   1cdd0:	add	r7, r8, r6
   1cdd4:	movt	r0, #3
   1cdd8:	ldr	r0, [r0]
   1cddc:	cmp	sl, r0
   1cde0:	bcs	1ced0 <__assert_fail@plt+0xae44>
   1cde4:	movw	r0, #61924	; 0xf1e4
   1cde8:	mov	r6, #0
   1cdec:	movt	r0, #3
   1cdf0:	ldr	r0, [r0]
   1cdf4:	ldr	r5, [r0, sl, lsl #2]
   1cdf8:	ldr	r0, [r9]
   1cdfc:	cmp	r0, #0
   1ce00:	beq	1ce10 <__assert_fail@plt+0xad84>
   1ce04:	mov	r0, r5
   1ce08:	bl	1d6b8 <__assert_fail@plt+0xb62c>
   1ce0c:	mov	r6, r0
   1ce10:	cmp	sl, #0
   1ce14:	beq	1cdb8 <__assert_fail@plt+0xad2c>
   1ce18:	ldr	r0, [r9]
   1ce1c:	add	r8, r7, #2
   1ce20:	mov	r4, #32
   1ce24:	cmp	r0, #0
   1ce28:	beq	1ce60 <__assert_fail@plt+0xadd4>
   1ce2c:	mvn	r1, #2
   1ce30:	sub	r1, r1, r6
   1ce34:	cmp	r7, r1
   1ce38:	addls	r1, r8, r6
   1ce3c:	cmpls	r1, r0
   1ce40:	bcc	1ce60 <__assert_fail@plt+0xadd4>
   1ce44:	movw	r0, #58812	; 0xe5bc
   1ce48:	mov	r4, #10
   1ce4c:	mov	r8, #0
   1ce50:	movt	r0, #3
   1ce54:	ldrb	r0, [r0]
   1ce58:	cmp	r0, #0
   1ce5c:	movwne	r4, #0
   1ce60:	movw	r0, #58124	; 0xe30c
   1ce64:	movt	r0, #3
   1ce68:	ldr	r0, [r0]
   1ce6c:	ldr	r1, [r0, #20]
   1ce70:	ldr	r2, [r0, #24]
   1ce74:	cmp	r1, r2
   1ce78:	bcs	1ceb8 <__assert_fail@plt+0xae2c>
   1ce7c:	add	r2, r1, #1
   1ce80:	str	r2, [r0, #20]
   1ce84:	ldr	r0, [sp]
   1ce88:	strb	r0, [r1]
   1ce8c:	movw	r0, #58124	; 0xe30c
   1ce90:	movt	r0, #3
   1ce94:	ldr	r0, [r0]
   1ce98:	ldr	r1, [r0, #20]
   1ce9c:	ldr	r2, [r0, #24]
   1cea0:	cmp	r1, r2
   1cea4:	bcs	1cec4 <__assert_fail@plt+0xae38>
   1cea8:	add	r2, r1, #1
   1ceac:	str	r2, [r0, #20]
   1ceb0:	strb	r4, [r1]
   1ceb4:	b	1cdbc <__assert_fail@plt+0xad30>
   1ceb8:	ldr	r1, [sp]
   1cebc:	bl	11f54 <__overflow@plt>
   1cec0:	b	1ce8c <__assert_fail@plt+0xae00>
   1cec4:	mov	r1, r4
   1cec8:	bl	11f54 <__overflow@plt>
   1cecc:	b	1cdbc <__assert_fail@plt+0xad30>
   1ced0:	movw	r0, #58812	; 0xe5bc
   1ced4:	mov	r1, #10
   1ced8:	movt	r0, #3
   1cedc:	ldrb	r0, [r0]
   1cee0:	cmp	r0, #0
   1cee4:	movw	r0, #58124	; 0xe30c
   1cee8:	movt	r0, #3
   1ceec:	movwne	r1, #0
   1cef0:	ldr	r0, [r0]
   1cef4:	ldr	r2, [r0, #20]
   1cef8:	ldr	r3, [r0, #24]
   1cefc:	cmp	r2, r3
   1cf00:	addcc	r3, r2, #1
   1cf04:	strcc	r3, [r0, #20]
   1cf08:	strbcc	r1, [r2]
   1cf0c:	subcc	sp, fp, #28
   1cf10:	popcc	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1cf14:	sub	sp, fp, #28
   1cf18:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1cf1c:	b	11f54 <__overflow@plt>
   1cf20:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1cf24:	add	fp, sp, #28
   1cf28:	sub	sp, sp, #28
   1cf2c:	cmp	r1, #0
   1cf30:	mov	sl, r0
   1cf34:	movw	r9, #57800	; 0xe1c8
   1cf38:	mov	ip, r3
   1cf3c:	mov	r4, r2
   1cf40:	mov	r7, r1
   1cf44:	addne	r0, r0, #4
   1cf48:	movt	r9, #3
   1cf4c:	ldr	r5, [r0]
   1cf50:	movw	r0, #58156	; 0xe32c
   1cf54:	movt	r0, #3
   1cf58:	ldrb	r0, [r0]
   1cf5c:	cmp	r0, #0
   1cf60:	beq	1d5e4 <__assert_fail@plt+0xb558>
   1cf64:	cmp	r7, #0
   1cf68:	str	r4, [sp, #24]
   1cf6c:	str	r5, [sp, #20]
   1cf70:	beq	1cfc8 <__assert_fail@plt+0xaf3c>
   1cf74:	ldrb	r0, [sl, #133]	; 0x85
   1cf78:	ldr	r3, [sl, #4]
   1cf7c:	ldr	r8, [sl, #124]	; 0x7c
   1cf80:	mov	r6, #0
   1cf84:	cmp	r0, #0
   1cf88:	bne	1cff4 <__assert_fail@plt+0xaf68>
   1cf8c:	ldr	r1, [r9, #96]	; 0x60
   1cf90:	mvn	r6, #0
   1cf94:	cmp	r1, #0
   1cf98:	beq	1cff4 <__assert_fail@plt+0xaf68>
   1cf9c:	ldr	r0, [r9, #100]	; 0x64
   1cfa0:	mov	r5, #12
   1cfa4:	mov	r4, #0
   1cfa8:	cmp	r1, #2
   1cfac:	beq	1d1f0 <__assert_fail@plt+0xb164>
   1cfb0:	cmp	r1, #1
   1cfb4:	bne	1d56c <__assert_fail@plt+0xb4e0>
   1cfb8:	ldrb	r0, [r0]
   1cfbc:	cmp	r0, #48	; 0x30
   1cfc0:	beq	1cff4 <__assert_fail@plt+0xaf68>
   1cfc4:	b	1d56c <__assert_fail@plt+0xb4e0>
   1cfc8:	movw	r0, #58166	; 0xe336
   1cfcc:	ldrb	r6, [sl, #133]	; 0x85
   1cfd0:	mov	r1, #32
   1cfd4:	ldr	r3, [sl]
   1cfd8:	movt	r0, #3
   1cfdc:	ldrb	r0, [r0]
   1cfe0:	cmp	r0, #0
   1cfe4:	movwne	r1, #124	; 0x7c
   1cfe8:	cmp	r6, #0
   1cfec:	movweq	r1, #32
   1cff0:	ldr	r8, [sl, r1]
   1cff4:	ldrb	r0, [sl, #132]	; 0x84
   1cff8:	cmp	r0, #0
   1cffc:	beq	1d060 <__assert_fail@plt+0xafd4>
   1d000:	and	r0, r8, #61440	; 0xf000
   1d004:	mov	r4, #0
   1d008:	sub	r0, r0, #4096	; 0x1000
   1d00c:	lsr	r1, r0, #12
   1d010:	cmp	r1, #11
   1d014:	bhi	1d128 <__assert_fail@plt+0xb09c>
   1d018:	add	r2, pc, #8
   1d01c:	mov	r5, #8
   1d020:	mov	r0, #7
   1d024:	ldr	pc, [r2, r1, lsl #2]
   1d028:	andeq	sp, r1, ip, ror #10
   1d02c:	andeq	sp, r1, r8, asr r0
   1d030:	andeq	sp, r1, r8, lsr #2
   1d034:	andeq	sp, r1, r8, lsr r1
   1d038:	andeq	sp, r1, r8, lsr #2
   1d03c:	andeq	sp, r1, r4, lsr #3
   1d040:	andeq	sp, r1, r8, lsr #2
   1d044:	andeq	sp, r1, ip, lsr #3
   1d048:	andeq	sp, r1, r8, lsr #2
   1d04c:	andeq	sp, r1, r0, lsl #2
   1d050:	andeq	sp, r1, r8, lsr #2
   1d054:	andeq	sp, r1, r8, ror #3
   1d058:	mov	r5, #11
   1d05c:	b	1d56c <__assert_fail@plt+0xb4e0>
   1d060:	ldr	r0, [sl, #120]	; 0x78
   1d064:	cmp	r0, #8
   1d068:	cmpne	r0, #5
   1d06c:	bne	1d0f4 <__assert_fail@plt+0xb068>
   1d070:	mov	r0, r3
   1d074:	mov	r9, ip
   1d078:	mov	r6, r3
   1d07c:	bl	11eac <strlen@plt>
   1d080:	mov	r8, r0
   1d084:	movw	r0, #61916	; 0xf1dc
   1d088:	mov	r5, #5
   1d08c:	movt	r0, #3
   1d090:	ldr	r4, [r0]
   1d094:	cmp	r4, #0
   1d098:	beq	1d0e0 <__assert_fail@plt+0xb054>
   1d09c:	add	r6, r6, r8
   1d0a0:	b	1d0b0 <__assert_fail@plt+0xb024>
   1d0a4:	ldr	r4, [r4, #16]
   1d0a8:	cmp	r4, #0
   1d0ac:	beq	1d0e0 <__assert_fail@plt+0xb054>
   1d0b0:	ldr	r2, [r4]
   1d0b4:	cmp	r2, r8
   1d0b8:	bhi	1d0a4 <__assert_fail@plt+0xb018>
   1d0bc:	ldr	r1, [r4, #4]
   1d0c0:	sub	r0, r6, r2
   1d0c4:	bl	1e780 <__assert_fail@plt+0xc6f4>
   1d0c8:	cmp	r0, #0
   1d0cc:	bne	1d0a4 <__assert_fail@plt+0xb018>
   1d0d0:	mov	ip, r9
   1d0d4:	movw	r9, #57800	; 0xe1c8
   1d0d8:	movt	r9, #3
   1d0dc:	b	1d56c <__assert_fail@plt+0xb4e0>
   1d0e0:	mov	ip, r9
   1d0e4:	movw	r9, #57800	; 0xe1c8
   1d0e8:	mov	r4, #0
   1d0ec:	movt	r9, #3
   1d0f0:	b	1d56c <__assert_fail@plt+0xb4e0>
   1d0f4:	movw	r1, #54484	; 0xd4d4
   1d0f8:	movt	r1, #2
   1d0fc:	ldr	r0, [r1, r0, lsl #2]
   1d100:	mov	r4, #0
   1d104:	cmp	r6, #0
   1d108:	bne	1d130 <__assert_fail@plt+0xb0a4>
   1d10c:	cmp	r0, #7
   1d110:	bne	1d130 <__assert_fail@plt+0xb0a4>
   1d114:	movw	r0, #58166	; 0xe336
   1d118:	movt	r0, #3
   1d11c:	ldrb	r0, [r0]
   1d120:	cmp	r0, #0
   1d124:	beq	1d220 <__assert_fail@plt+0xb194>
   1d128:	mov	r5, #13
   1d12c:	b	1d56c <__assert_fail@plt+0xb4e0>
   1d130:	mov	r5, r0
   1d134:	b	1d56c <__assert_fail@plt+0xb4e0>
   1d138:	and	r6, r8, #512	; 0x200
   1d13c:	mov	r0, #1
   1d140:	ands	r4, r8, #2
   1d144:	str	ip, [sp, #16]
   1d148:	eor	r2, r0, r6, lsr #9
   1d14c:	beq	1d188 <__assert_fail@plt+0xb0fc>
   1d150:	cmp	r2, #0
   1d154:	bne	1d188 <__assert_fail@plt+0xb0fc>
   1d158:	ldr	r1, [r9, #160]	; 0xa0
   1d15c:	cmp	r1, #0
   1d160:	beq	1d188 <__assert_fail@plt+0xb0fc>
   1d164:	ldr	r0, [r9, #164]	; 0xa4
   1d168:	mov	r5, #20
   1d16c:	cmp	r1, #2
   1d170:	beq	1d2cc <__assert_fail@plt+0xb240>
   1d174:	cmp	r1, #1
   1d178:	bne	1d2ec <__assert_fail@plt+0xb260>
   1d17c:	ldrb	r0, [r0]
   1d180:	cmp	r0, #48	; 0x30
   1d184:	bne	1d2ec <__assert_fail@plt+0xb260>
   1d188:	cmp	r4, #0
   1d18c:	bne	1d254 <__assert_fail@plt+0xb1c8>
   1d190:	mov	r5, #6
   1d194:	cmp	r6, #0
   1d198:	mov	r4, #0
   1d19c:	bne	1d39c <__assert_fail@plt+0xb310>
   1d1a0:	b	1d29c <__assert_fail@plt+0xb210>
   1d1a4:	mov	r5, #10
   1d1a8:	b	1d56c <__assert_fail@plt+0xb4e0>
   1d1ac:	tst	r8, #2048	; 0x800
   1d1b0:	beq	1d324 <__assert_fail@plt+0xb298>
   1d1b4:	ldr	r1, [r9, #128]	; 0x80
   1d1b8:	cmp	r1, #0
   1d1bc:	beq	1d324 <__assert_fail@plt+0xb298>
   1d1c0:	ldr	r0, [r9, #132]	; 0x84
   1d1c4:	mov	r5, #16
   1d1c8:	cmp	r1, #2
   1d1cc:	beq	1d2f8 <__assert_fail@plt+0xb26c>
   1d1d0:	cmp	r1, #1
   1d1d4:	bne	1d56c <__assert_fail@plt+0xb4e0>
   1d1d8:	ldrb	r0, [r0]
   1d1dc:	cmp	r0, #48	; 0x30
   1d1e0:	beq	1d324 <__assert_fail@plt+0xb298>
   1d1e4:	b	1d56c <__assert_fail@plt+0xb4e0>
   1d1e8:	mov	r5, #9
   1d1ec:	b	1d56c <__assert_fail@plt+0xb4e0>
   1d1f0:	movw	r1, #46144	; 0xb440
   1d1f4:	mov	r2, #2
   1d1f8:	str	ip, [sp, #16]
   1d1fc:	mov	r4, r3
   1d200:	movt	r1, #2
   1d204:	bl	1202c <strncmp@plt>
   1d208:	ldr	ip, [sp, #16]
   1d20c:	mov	r3, r4
   1d210:	mov	r4, #0
   1d214:	cmp	r0, #0
   1d218:	bne	1d56c <__assert_fail@plt+0xb4e0>
   1d21c:	b	1cff4 <__assert_fail@plt+0xaf68>
   1d220:	ldr	r1, [r9, #104]	; 0x68
   1d224:	mov	r5, #7
   1d228:	cmp	r1, #0
   1d22c:	beq	1d56c <__assert_fail@plt+0xb4e0>
   1d230:	ldr	r0, [r9, #108]	; 0x6c
   1d234:	cmp	r1, #2
   1d238:	beq	1d2a4 <__assert_fail@plt+0xb218>
   1d23c:	cmp	r1, #1
   1d240:	bne	1d128 <__assert_fail@plt+0xb09c>
   1d244:	ldrb	r0, [r0]
   1d248:	cmp	r0, #48	; 0x30
   1d24c:	movne	r5, #13
   1d250:	b	1d56c <__assert_fail@plt+0xb4e0>
   1d254:	ldr	r1, [r9, #152]	; 0x98
   1d258:	mov	r4, #0
   1d25c:	cmp	r1, #0
   1d260:	beq	1d360 <__assert_fail@plt+0xb2d4>
   1d264:	ldr	r0, [r9, #156]	; 0x9c
   1d268:	cmp	r1, #2
   1d26c:	beq	1d370 <__assert_fail@plt+0xb2e4>
   1d270:	mov	r5, #19
   1d274:	cmp	r1, #1
   1d278:	bne	1d29c <__assert_fail@plt+0xb210>
   1d27c:	ldrb	r0, [r0]
   1d280:	mov	r5, #6
   1d284:	cmp	r0, #48	; 0x30
   1d288:	movwne	r5, #19
   1d28c:	subs	r0, r0, #48	; 0x30
   1d290:	movwne	r0, #1
   1d294:	orrs	r0, r0, r2
   1d298:	beq	1d39c <__assert_fail@plt+0xb310>
   1d29c:	ldr	ip, [sp, #16]
   1d2a0:	b	1d56c <__assert_fail@plt+0xb4e0>
   1d2a4:	movw	r1, #46144	; 0xb440
   1d2a8:	mov	r2, #2
   1d2ac:	mov	r4, ip
   1d2b0:	movt	r1, #2
   1d2b4:	bl	1202c <strncmp@plt>
   1d2b8:	mov	ip, r4
   1d2bc:	mov	r4, #0
   1d2c0:	cmp	r0, #0
   1d2c4:	bne	1d128 <__assert_fail@plt+0xb09c>
   1d2c8:	b	1d56c <__assert_fail@plt+0xb4e0>
   1d2cc:	movw	r1, #46144	; 0xb440
   1d2d0:	mov	r8, r2
   1d2d4:	mov	r2, #2
   1d2d8:	movt	r1, #2
   1d2dc:	bl	1202c <strncmp@plt>
   1d2e0:	mov	r2, r8
   1d2e4:	cmp	r0, #0
   1d2e8:	beq	1d188 <__assert_fail@plt+0xb0fc>
   1d2ec:	ldr	ip, [sp, #16]
   1d2f0:	mov	r4, #0
   1d2f4:	b	1d56c <__assert_fail@plt+0xb4e0>
   1d2f8:	movw	r1, #46144	; 0xb440
   1d2fc:	mov	r2, #2
   1d300:	mov	r4, ip
   1d304:	mov	r6, r3
   1d308:	movt	r1, #2
   1d30c:	bl	1202c <strncmp@plt>
   1d310:	mov	ip, r4
   1d314:	mov	r3, r6
   1d318:	mov	r4, #0
   1d31c:	cmp	r0, #0
   1d320:	bne	1d56c <__assert_fail@plt+0xb4e0>
   1d324:	tst	r8, #1024	; 0x400
   1d328:	beq	1d400 <__assert_fail@plt+0xb374>
   1d32c:	ldr	r1, [r9, #136]	; 0x88
   1d330:	cmp	r1, #0
   1d334:	beq	1d400 <__assert_fail@plt+0xb374>
   1d338:	ldr	r0, [r9, #140]	; 0x8c
   1d33c:	mov	r5, #17
   1d340:	cmp	r1, #2
   1d344:	beq	1d3d4 <__assert_fail@plt+0xb348>
   1d348:	cmp	r1, #1
   1d34c:	bne	1d56c <__assert_fail@plt+0xb4e0>
   1d350:	ldrb	r0, [r0]
   1d354:	cmp	r0, #48	; 0x30
   1d358:	beq	1d400 <__assert_fail@plt+0xb374>
   1d35c:	b	1d56c <__assert_fail@plt+0xb4e0>
   1d360:	mov	r5, #6
   1d364:	cmp	r6, #0
   1d368:	beq	1d29c <__assert_fail@plt+0xb210>
   1d36c:	b	1d39c <__assert_fail@plt+0xb310>
   1d370:	movw	r1, #46144	; 0xb440
   1d374:	mov	r6, r2
   1d378:	mov	r2, #2
   1d37c:	movt	r1, #2
   1d380:	bl	1202c <strncmp@plt>
   1d384:	cmp	r0, #0
   1d388:	mov	r5, #6
   1d38c:	movwne	r0, #1
   1d390:	movwne	r5, #19
   1d394:	orrs	r0, r0, r6
   1d398:	bne	1d29c <__assert_fail@plt+0xb210>
   1d39c:	ldr	r1, [r9, #144]	; 0x90
   1d3a0:	ldr	ip, [sp, #16]
   1d3a4:	mov	r5, #6
   1d3a8:	cmp	r1, #0
   1d3ac:	beq	1d56c <__assert_fail@plt+0xb4e0>
   1d3b0:	ldr	r0, [r9, #148]	; 0x94
   1d3b4:	cmp	r1, #2
   1d3b8:	beq	1d4a8 <__assert_fail@plt+0xb41c>
   1d3bc:	cmp	r1, #1
   1d3c0:	bne	1d4cc <__assert_fail@plt+0xb440>
   1d3c4:	ldrb	r0, [r0]
   1d3c8:	cmp	r0, #48	; 0x30
   1d3cc:	movne	r5, #18
   1d3d0:	b	1d56c <__assert_fail@plt+0xb4e0>
   1d3d4:	movw	r1, #46144	; 0xb440
   1d3d8:	mov	r2, #2
   1d3dc:	mov	r4, ip
   1d3e0:	mov	r6, r3
   1d3e4:	movt	r1, #2
   1d3e8:	bl	1202c <strncmp@plt>
   1d3ec:	mov	ip, r4
   1d3f0:	mov	r3, r6
   1d3f4:	mov	r4, #0
   1d3f8:	cmp	r0, #0
   1d3fc:	bne	1d56c <__assert_fail@plt+0xb4e0>
   1d400:	ldr	r1, [r9, #168]	; 0xa8
   1d404:	cmp	r1, #0
   1d408:	beq	1d46c <__assert_fail@plt+0xb3e0>
   1d40c:	ldr	r0, [r9, #172]	; 0xac
   1d410:	cmp	r1, #2
   1d414:	beq	1d430 <__assert_fail@plt+0xb3a4>
   1d418:	cmp	r1, #1
   1d41c:	bne	1d45c <__assert_fail@plt+0xb3d0>
   1d420:	ldrb	r0, [r0]
   1d424:	cmp	r0, #48	; 0x30
   1d428:	bne	1d45c <__assert_fail@plt+0xb3d0>
   1d42c:	b	1d46c <__assert_fail@plt+0xb3e0>
   1d430:	movw	r1, #46144	; 0xb440
   1d434:	mov	r2, #2
   1d438:	mov	r4, ip
   1d43c:	mov	r5, r3
   1d440:	movt	r1, #2
   1d444:	bl	1202c <strncmp@plt>
   1d448:	mov	ip, r4
   1d44c:	mov	r3, r5
   1d450:	mov	r4, #0
   1d454:	cmp	r0, #0
   1d458:	beq	1d46c <__assert_fail@plt+0xb3e0>
   1d45c:	ldrb	r0, [sl, #140]	; 0x8c
   1d460:	mov	r5, #21
   1d464:	cmp	r0, #0
   1d468:	bne	1d56c <__assert_fail@plt+0xb4e0>
   1d46c:	tst	r8, #73	; 0x49
   1d470:	beq	1d500 <__assert_fail@plt+0xb474>
   1d474:	ldr	r1, [r9, #112]	; 0x70
   1d478:	cmp	r1, #0
   1d47c:	beq	1d500 <__assert_fail@plt+0xb474>
   1d480:	ldr	r0, [r9, #116]	; 0x74
   1d484:	mov	r5, #14
   1d488:	cmp	r1, #2
   1d48c:	beq	1d4d4 <__assert_fail@plt+0xb448>
   1d490:	cmp	r1, #1
   1d494:	bne	1d56c <__assert_fail@plt+0xb4e0>
   1d498:	ldrb	r0, [r0]
   1d49c:	cmp	r0, #48	; 0x30
   1d4a0:	beq	1d500 <__assert_fail@plt+0xb474>
   1d4a4:	b	1d56c <__assert_fail@plt+0xb4e0>
   1d4a8:	movw	r1, #46144	; 0xb440
   1d4ac:	mov	r2, #2
   1d4b0:	mov	r4, ip
   1d4b4:	movt	r1, #2
   1d4b8:	bl	1202c <strncmp@plt>
   1d4bc:	mov	ip, r4
   1d4c0:	mov	r4, #0
   1d4c4:	cmp	r0, #0
   1d4c8:	beq	1d56c <__assert_fail@plt+0xb4e0>
   1d4cc:	mov	r5, #18
   1d4d0:	b	1d56c <__assert_fail@plt+0xb4e0>
   1d4d4:	movw	r1, #46144	; 0xb440
   1d4d8:	mov	r2, #2
   1d4dc:	mov	r4, ip
   1d4e0:	mov	r6, r3
   1d4e4:	movt	r1, #2
   1d4e8:	bl	1202c <strncmp@plt>
   1d4ec:	mov	ip, r4
   1d4f0:	mov	r3, r6
   1d4f4:	mov	r4, #0
   1d4f8:	cmp	r0, #0
   1d4fc:	bne	1d56c <__assert_fail@plt+0xb4e0>
   1d500:	ldr	r0, [sl, #36]	; 0x24
   1d504:	cmp	r0, #2
   1d508:	bcc	1d070 <__assert_fail@plt+0xafe4>
   1d50c:	ldr	r1, [r9, #176]	; 0xb0
   1d510:	cmp	r1, #0
   1d514:	beq	1d070 <__assert_fail@plt+0xafe4>
   1d518:	ldr	r0, [r9, #180]	; 0xb4
   1d51c:	mov	r5, #22
   1d520:	cmp	r1, #2
   1d524:	beq	1d540 <__assert_fail@plt+0xb4b4>
   1d528:	cmp	r1, #1
   1d52c:	bne	1d56c <__assert_fail@plt+0xb4e0>
   1d530:	ldrb	r0, [r0]
   1d534:	cmp	r0, #48	; 0x30
   1d538:	beq	1d070 <__assert_fail@plt+0xafe4>
   1d53c:	b	1d56c <__assert_fail@plt+0xb4e0>
   1d540:	movw	r1, #46144	; 0xb440
   1d544:	mov	r2, #2
   1d548:	mov	r4, ip
   1d54c:	mov	r6, r3
   1d550:	movt	r1, #2
   1d554:	bl	1202c <strncmp@plt>
   1d558:	mov	ip, r4
   1d55c:	mov	r3, r6
   1d560:	mov	r4, #0
   1d564:	cmp	r0, #0
   1d568:	beq	1d070 <__assert_fail@plt+0xafe4>
   1d56c:	cmp	r4, #0
   1d570:	add	r3, r4, #8
   1d574:	mov	r6, #1
   1d578:	addeq	r3, r9, r5, lsl #3
   1d57c:	ldr	r0, [r3, #4]
   1d580:	cmp	r0, #0
   1d584:	beq	1d598 <__assert_fail@plt+0xb50c>
   1d588:	ldr	r4, [sp, #24]
   1d58c:	ldr	r5, [sp, #20]
   1d590:	mov	r8, ip
   1d594:	b	1d5f0 <__assert_fail@plt+0xb564>
   1d598:	ldr	r1, [r9, #32]
   1d59c:	ldr	r4, [sp, #24]
   1d5a0:	ldr	r5, [sp, #20]
   1d5a4:	cmp	r1, #0
   1d5a8:	beq	1d5e4 <__assert_fail@plt+0xb558>
   1d5ac:	ldr	r0, [r9, #36]	; 0x24
   1d5b0:	mov	r8, ip
   1d5b4:	cmp	r1, #2
   1d5b8:	beq	1d694 <__assert_fail@plt+0xb608>
   1d5bc:	cmp	r1, #1
   1d5c0:	bne	1d5d8 <__assert_fail@plt+0xb54c>
   1d5c4:	ldrb	r0, [r0]
   1d5c8:	mov	r3, #0
   1d5cc:	mov	r6, #0
   1d5d0:	cmp	r0, #48	; 0x30
   1d5d4:	beq	1d5f0 <__assert_fail@plt+0xb564>
   1d5d8:	mov	r3, #0
   1d5dc:	mov	r6, #1
   1d5e0:	b	1d5f0 <__assert_fail@plt+0xb564>
   1d5e4:	mov	r8, ip
   1d5e8:	mov	r3, #0
   1d5ec:	mov	r6, #0
   1d5f0:	movw	r0, #58372	; 0xe404
   1d5f4:	ldr	r2, [sl, #144]	; 0x90
   1d5f8:	eor	r7, r7, #1
   1d5fc:	movt	r0, #3
   1d600:	ldr	r1, [r0]
   1d604:	ldr	r0, [sl, #8]
   1d608:	str	r7, [sp]
   1d60c:	str	r4, [sp, #4]
   1d610:	str	r0, [sp, #8]
   1d614:	mov	r0, r5
   1d618:	bl	1969c <__assert_fail@plt+0x7610>
   1d61c:	mov	r4, r0
   1d620:	bl	19b5c <__assert_fail@plt+0x7ad0>
   1d624:	cmp	r6, #0
   1d628:	beq	1d688 <__assert_fail@plt+0xb5fc>
   1d62c:	ldr	r0, [r9, #20]
   1d630:	cmp	r0, #0
   1d634:	beq	1d640 <__assert_fail@plt+0xb5b4>
   1d638:	add	r0, r9, #16
   1d63c:	b	1d654 <__assert_fail@plt+0xb5c8>
   1d640:	mov	r0, r9
   1d644:	bl	18e3c <__assert_fail@plt+0x6db0>
   1d648:	add	r0, r9, #24
   1d64c:	bl	18e3c <__assert_fail@plt+0x6db0>
   1d650:	add	r0, r9, #8
   1d654:	bl	18e3c <__assert_fail@plt+0x6db0>
   1d658:	movw	r0, #58816	; 0xe5c0
   1d65c:	movt	r0, #3
   1d660:	ldr	r0, [r0]
   1d664:	cmp	r0, #0
   1d668:	beq	1d688 <__assert_fail@plt+0xb5fc>
   1d66c:	add	r2, r8, r4
   1d670:	udiv	r1, r8, r0
   1d674:	sub	r2, r2, #1
   1d678:	udiv	r0, r2, r0
   1d67c:	cmp	r1, r0
   1d680:	addne	r0, r9, #184	; 0xb8
   1d684:	blne	18e3c <__assert_fail@plt+0x6db0>
   1d688:	mov	r0, r4
   1d68c:	sub	sp, fp, #28
   1d690:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1d694:	movw	r1, #46144	; 0xb440
   1d698:	mov	r2, #2
   1d69c:	movt	r1, #2
   1d6a0:	bl	1202c <strncmp@plt>
   1d6a4:	cmp	r0, #0
   1d6a8:	mov	r6, r0
   1d6ac:	mov	r3, #0
   1d6b0:	movwne	r6, #1
   1d6b4:	b	1d5f0 <__assert_fail@plt+0xb564>
   1d6b8:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   1d6bc:	add	fp, sp, #24
   1d6c0:	sub	sp, sp, #680	; 0x2a8
   1d6c4:	sub	sp, sp, #8192	; 0x2000
   1d6c8:	mov	r4, r0
   1d6cc:	movw	r0, #58800	; 0xe5b0
   1d6d0:	mov	r6, #0
   1d6d4:	movt	r0, #3
   1d6d8:	ldrb	r0, [r0]
   1d6dc:	cmp	r0, #1
   1d6e0:	bne	1d720 <__assert_fail@plt+0xb694>
   1d6e4:	movw	r0, #58168	; 0xe338
   1d6e8:	movt	r0, #3
   1d6ec:	ldr	r0, [r0]
   1d6f0:	cmp	r0, #4
   1d6f4:	bne	1d710 <__assert_fail@plt+0xb684>
   1d6f8:	add	r0, r4, #112	; 0x70
   1d6fc:	add	r2, sp, #19
   1d700:	ldrd	r0, [r0]
   1d704:	bl	21dd0 <__assert_fail@plt+0xfd44>
   1d708:	bl	11eac <strlen@plt>
   1d70c:	b	1d71c <__assert_fail@plt+0xb690>
   1d710:	movw	r0, #61932	; 0xf1ec
   1d714:	movt	r0, #3
   1d718:	ldr	r0, [r0]
   1d71c:	add	r6, r0, #1
   1d720:	movw	r0, #58245	; 0xe385
   1d724:	movt	r0, #3
   1d728:	ldrb	r0, [r0]
   1d72c:	cmp	r0, #1
   1d730:	bne	1d7bc <__assert_fail@plt+0xb730>
   1d734:	movw	r0, #58168	; 0xe338
   1d738:	movt	r0, #3
   1d73c:	ldr	r0, [r0]
   1d740:	cmp	r0, #4
   1d744:	bne	1d798 <__assert_fail@plt+0xb70c>
   1d748:	ldrb	r0, [r4, #132]	; 0x84
   1d74c:	cmp	r0, #0
   1d750:	beq	1d7a8 <__assert_fail@plt+0xb71c>
   1d754:	movw	r2, #58780	; 0xe59c
   1d758:	add	r0, r4, #80	; 0x50
   1d75c:	mov	r1, #512	; 0x200
   1d760:	mov	ip, #0
   1d764:	movt	r2, #3
   1d768:	ldm	r0, {r0, r7}
   1d76c:	stm	sp, {r1, ip}
   1d770:	mov	r1, r7
   1d774:	ldr	r3, [r2]
   1d778:	movw	r2, #58792	; 0xe5a8
   1d77c:	movt	r2, #3
   1d780:	ldm	r2, {r2, r5}
   1d784:	str	r5, [sp, #12]
   1d788:	str	r2, [sp, #8]
   1d78c:	add	r2, sp, #19
   1d790:	bl	20cf8 <__assert_fail@plt+0xec6c>
   1d794:	b	1d7b0 <__assert_fail@plt+0xb724>
   1d798:	movw	r0, #61936	; 0xf1f0
   1d79c:	movt	r0, #3
   1d7a0:	ldr	r0, [r0]
   1d7a4:	b	1d7b4 <__assert_fail@plt+0xb728>
   1d7a8:	movw	r0, #47586	; 0xb9e2
   1d7ac:	movt	r0, #2
   1d7b0:	bl	11eac <strlen@plt>
   1d7b4:	add	r0, r6, r0
   1d7b8:	add	r6, r0, #1
   1d7bc:	movw	r0, #58244	; 0xe384
   1d7c0:	movt	r0, #3
   1d7c4:	ldrb	r0, [r0]
   1d7c8:	cmp	r0, #1
   1d7cc:	bne	1d804 <__assert_fail@plt+0xb778>
   1d7d0:	movw	r0, #58168	; 0xe338
   1d7d4:	movt	r0, #3
   1d7d8:	ldr	r0, [r0]
   1d7dc:	cmp	r0, #4
   1d7e0:	bne	1d7f0 <__assert_fail@plt+0xb764>
   1d7e4:	ldr	r0, [r4, #128]	; 0x80
   1d7e8:	bl	11eac <strlen@plt>
   1d7ec:	b	1d7fc <__assert_fail@plt+0xb770>
   1d7f0:	movw	r0, #61956	; 0xf204
   1d7f4:	movt	r0, #3
   1d7f8:	ldr	r0, [r0]
   1d7fc:	add	r0, r6, r0
   1d800:	add	r6, r0, #1
   1d804:	ldr	r0, [r4, #148]	; 0x94
   1d808:	cmp	r0, #0
   1d80c:	bne	1d86c <__assert_fail@plt+0xb7e0>
   1d810:	movw	r0, #58372	; 0xe404
   1d814:	ldr	r5, [r4]
   1d818:	ldr	r3, [r4, #144]	; 0x90
   1d81c:	add	lr, sp, #512	; 0x200
   1d820:	add	r1, sp, #672	; 0x2a0
   1d824:	add	r7, sp, #680	; 0x2a8
   1d828:	movt	r0, #3
   1d82c:	str	r1, [sp]
   1d830:	str	r7, [sp, #676]	; 0x2a4
   1d834:	ldr	r2, [r0]
   1d838:	add	r0, lr, #159	; 0x9f
   1d83c:	str	r0, [sp, #4]
   1d840:	add	r0, sp, #676	; 0x2a4
   1d844:	mov	r1, r5
   1d848:	bl	19dd4 <__assert_fail@plt+0x7d48>
   1d84c:	ldr	r0, [sp, #676]	; 0x2a4
   1d850:	cmp	r0, r7
   1d854:	cmpne	r0, r5
   1d858:	beq	1d860 <__assert_fail@plt+0xb7d4>
   1d85c:	bl	1f89c <__assert_fail@plt+0xd810>
   1d860:	ldrb	r0, [sp, #671]	; 0x29f
   1d864:	ldr	r1, [sp, #672]	; 0x2a0
   1d868:	add	r0, r1, r0
   1d86c:	movw	r1, #58180	; 0xe344
   1d870:	add	r0, r0, r6
   1d874:	movt	r1, #3
   1d878:	ldr	r3, [r1]
   1d87c:	cmp	r3, #0
   1d880:	beq	1d928 <__assert_fail@plt+0xb89c>
   1d884:	ldrb	r6, [r4, #132]	; 0x84
   1d888:	ldr	r2, [r4, #32]
   1d88c:	ldr	r5, [r4, #120]	; 0x78
   1d890:	cmp	r6, #0
   1d894:	beq	1d8d4 <__assert_fail@plt+0xb848>
   1d898:	and	r1, r2, #61440	; 0xf000
   1d89c:	cmp	r1, #16384	; 0x4000
   1d8a0:	beq	1d920 <__assert_fail@plt+0xb894>
   1d8a4:	cmp	r1, #32768	; 0x8000
   1d8a8:	bne	1d8ec <__assert_fail@plt+0xb860>
   1d8ac:	sub	r1, r3, #3
   1d8b0:	cmp	r6, #0
   1d8b4:	clz	r1, r1
   1d8b8:	movwne	r6, #1
   1d8bc:	ands	r2, r2, #73	; 0x49
   1d8c0:	lsr	r1, r1, #5
   1d8c4:	movwne	r2, #1
   1d8c8:	and	r1, r1, r6
   1d8cc:	and	r1, r1, r2
   1d8d0:	b	1d924 <__assert_fail@plt+0xb898>
   1d8d4:	cmp	r5, #3
   1d8d8:	mov	r1, #1
   1d8dc:	cmpne	r5, #9
   1d8e0:	beq	1d924 <__assert_fail@plt+0xb898>
   1d8e4:	cmp	r5, #5
   1d8e8:	beq	1d8ac <__assert_fail@plt+0xb820>
   1d8ec:	mov	r1, #0
   1d8f0:	cmp	r3, #1
   1d8f4:	beq	1d924 <__assert_fail@plt+0xb898>
   1d8f8:	cmp	r6, #0
   1d8fc:	beq	1d930 <__assert_fail@plt+0xb8a4>
   1d900:	and	r2, r2, #61440	; 0xf000
   1d904:	mov	r1, #1
   1d908:	cmp	r2, #4096	; 0x1000
   1d90c:	cmpne	r2, #40960	; 0xa000
   1d910:	beq	1d924 <__assert_fail@plt+0xb898>
   1d914:	cmp	r2, #49152	; 0xc000
   1d918:	movne	r1, #0
   1d91c:	b	1d924 <__assert_fail@plt+0xb898>
   1d920:	mov	r1, #1
   1d924:	add	r0, r1, r0
   1d928:	sub	sp, fp, #24
   1d92c:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   1d930:	sub	r1, r5, #1
   1d934:	cmp	r1, #7
   1d938:	bcs	1d94c <__assert_fail@plt+0xb8c0>
   1d93c:	movw	r2, #54640	; 0xd570
   1d940:	movt	r2, #2
   1d944:	ldr	r1, [r2, r1, lsl #2]
   1d948:	b	1d924 <__assert_fail@plt+0xb898>
   1d94c:	mov	r1, #0
   1d950:	b	1d924 <__assert_fail@plt+0xb898>
   1d954:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1d958:	add	fp, sp, #28
   1d95c:	push	{r0}		; (str r0, [sp, #-4]!)
   1d960:	movw	r5, #58820	; 0xe5c4
   1d964:	movw	r0, #58356	; 0xe3f4
   1d968:	movw	r8, #62404	; 0xf3c4
   1d96c:	movt	r0, #3
   1d970:	movt	r5, #3
   1d974:	movt	r8, #3
   1d978:	ldr	r0, [r0]
   1d97c:	ldr	r1, [r5]
   1d980:	cmp	r1, r0
   1d984:	mov	sl, r0
   1d988:	movcc	sl, r1
   1d98c:	cmp	r1, #0
   1d990:	moveq	sl, r0
   1d994:	ldr	r0, [r8]
   1d998:	cmp	r0, sl
   1d99c:	bcs	1dad0 <__assert_fail@plt+0xba44>
   1d9a0:	movw	r0, #62400	; 0xf3c0
   1d9a4:	cmp	r1, #0
   1d9a8:	movt	r0, #3
   1d9ac:	ldr	r0, [r0]
   1d9b0:	beq	1d9d4 <__assert_fail@plt+0xb948>
   1d9b4:	lsr	r2, r1, #1
   1d9b8:	cmp	r2, sl
   1d9bc:	bhi	1d9d4 <__assert_fail@plt+0xb948>
   1d9c0:	mov	r2, #12
   1d9c4:	bl	27714 <_obstack_memory_used@@Base+0x2e28>
   1d9c8:	ldr	r7, [r5]
   1d9cc:	movw	r1, #62400	; 0xf3c0
   1d9d0:	b	1d9e8 <__assert_fail@plt+0xb95c>
   1d9d4:	mov	r1, sl
   1d9d8:	mov	r2, #24
   1d9dc:	bl	27714 <_obstack_memory_used@@Base+0x2e28>
   1d9e0:	movw	r1, #62400	; 0xf3c0
   1d9e4:	lsl	r7, sl, #1
   1d9e8:	movt	r1, #3
   1d9ec:	str	r0, [r1]
   1d9f0:	ldr	r1, [r8]
   1d9f4:	add	r0, r7, r1
   1d9f8:	add	r0, r0, #1
   1d9fc:	cmp	r0, r7
   1da00:	bcc	1dd08 <__assert_fail@plt+0xbc7c>
   1da04:	sub	r2, r7, r1
   1da08:	mul	r1, r0, r2
   1da0c:	udiv	r2, r1, r2
   1da10:	cmp	r2, r0
   1da14:	bne	1dd08 <__assert_fail@plt+0xbc7c>
   1da18:	lsr	r0, r1, #1
   1da1c:	mov	r1, #4
   1da20:	bl	27820 <_obstack_memory_used@@Base+0x2f34>
   1da24:	ldr	r1, [r8]
   1da28:	cmp	r7, r1
   1da2c:	bls	1dacc <__assert_fail@plt+0xba40>
   1da30:	mvn	r2, r1
   1da34:	add	r3, r7, r2
   1da38:	sub	r2, r7, r1
   1da3c:	ands	r6, r2, #3
   1da40:	movw	r2, #62400	; 0xf3c0
   1da44:	movt	r2, #3
   1da48:	ldr	r2, [r2]
   1da4c:	beq	1da70 <__assert_fail@plt+0xb9e4>
   1da50:	add	r5, r1, r1, lsl #1
   1da54:	add	r5, r2, r5, lsl #2
   1da58:	add	r5, r5, #8
   1da5c:	add	r1, r1, #1
   1da60:	str	r0, [r5], #12
   1da64:	subs	r6, r6, #1
   1da68:	add	r0, r0, r1, lsl #2
   1da6c:	bne	1da5c <__assert_fail@plt+0xb9d0>
   1da70:	cmp	r3, #3
   1da74:	bcc	1dacc <__assert_fail@plt+0xba40>
   1da78:	add	r3, r1, r1, lsl #1
   1da7c:	add	r1, r1, #4
   1da80:	add	r2, r2, r3, lsl #2
   1da84:	rsb	r3, r7, #0
   1da88:	add	r2, r2, #32
   1da8c:	str	r0, [r2, #-24]	; 0xffffffe8
   1da90:	add	r0, r0, r1, lsl #2
   1da94:	sub	r0, r0, #12
   1da98:	str	r0, [r2, #-12]
   1da9c:	add	r0, r0, r1, lsl #2
   1daa0:	sub	r0, r0, #8
   1daa4:	str	r0, [r2]
   1daa8:	add	r0, r0, r1, lsl #2
   1daac:	sub	r0, r0, #4
   1dab0:	str	r0, [r2, #12]
   1dab4:	add	r0, r0, r1, lsl #2
   1dab8:	add	r1, r1, #4
   1dabc:	add	r2, r2, #48	; 0x30
   1dac0:	add	r6, r3, r1
   1dac4:	cmp	r6, #4
   1dac8:	bne	1da8c <__assert_fail@plt+0xba00>
   1dacc:	str	r7, [r8]
   1dad0:	cmp	sl, #0
   1dad4:	beq	1dbbc <__assert_fail@plt+0xbb30>
   1dad8:	movw	r0, #62400	; 0xf3c0
   1dadc:	mov	r9, #0
   1dae0:	mov	ip, #1
   1dae4:	mov	r2, #3
   1dae8:	vmov.i32	q8, #3	; 0x00000003
   1daec:	mov	r8, #64	; 0x40
   1daf0:	mov	r7, #1
   1daf4:	movt	r0, #3
   1daf8:	ldr	lr, [r0]
   1dafc:	b	1db0c <__assert_fail@plt+0xba80>
   1db00:	add	r7, r7, #1
   1db04:	cmp	r9, sl
   1db08:	beq	1dbbc <__assert_fail@plt+0xbb30>
   1db0c:	add	r1, r9, r9, lsl #1
   1db10:	mov	r3, lr
   1db14:	mov	r0, r9
   1db18:	add	r9, r9, #1
   1db1c:	mov	r5, #0
   1db20:	cmp	r9, #4
   1db24:	strb	ip, [r3, r1, lsl #2]!
   1db28:	add	r1, r9, r9, lsl #1
   1db2c:	str	r1, [r3, #4]
   1db30:	ldr	r6, [r3, #8]
   1db34:	bcc	1dba8 <__assert_fail@plt+0xbb1c>
   1db38:	sub	r4, r0, #3
   1db3c:	mov	r3, #0
   1db40:	add	r1, ip, r4, lsr #2
   1db44:	cmp	r4, #12
   1db48:	and	r0, r1, #3
   1db4c:	bcc	1db84 <__assert_fail@plt+0xbaf8>
   1db50:	sub	r5, r1, r0
   1db54:	mov	r3, #0
   1db58:	mov	r1, r6
   1db5c:	add	r4, r1, #48	; 0x30
   1db60:	subs	r5, r5, #4
   1db64:	add	r3, r3, #16
   1db68:	vst1.32	{d16-d17}, [r4]
   1db6c:	add	r4, r1, #32
   1db70:	vst1.32	{d16-d17}, [r4]
   1db74:	add	r4, r1, #16
   1db78:	vst1.32	{d16-d17}, [r4]
   1db7c:	vst1.32	{d16-d17}, [r1], r8
   1db80:	bne	1db5c <__assert_fail@plt+0xbad0>
   1db84:	bic	r5, r9, #3
   1db88:	cmp	r0, #0
   1db8c:	beq	1dba0 <__assert_fail@plt+0xbb14>
   1db90:	add	r1, r6, r3, lsl #2
   1db94:	vst1.32	{d16-d17}, [r1]!
   1db98:	subs	r0, r0, #1
   1db9c:	bne	1db94 <__assert_fail@plt+0xbb08>
   1dba0:	cmp	r9, r5
   1dba4:	beq	1db00 <__assert_fail@plt+0xba74>
   1dba8:	str	r2, [r6, r5, lsl #2]
   1dbac:	add	r5, r5, #1
   1dbb0:	cmp	r7, r5
   1dbb4:	bne	1dba8 <__assert_fail@plt+0xbb1c>
   1dbb8:	b	1db00 <__assert_fail@plt+0xba74>
   1dbbc:	movw	r0, #58356	; 0xe3f4
   1dbc0:	movt	r0, #3
   1dbc4:	ldr	r0, [r0]
   1dbc8:	cmp	r0, #0
   1dbcc:	beq	1dccc <__assert_fail@plt+0xbc40>
   1dbd0:	movw	r9, #61924	; 0xf1e4
   1dbd4:	mov	r6, #0
   1dbd8:	movt	r9, #3
   1dbdc:	b	1dbf8 <__assert_fail@plt+0xbb6c>
   1dbe0:	movw	r0, #58356	; 0xe3f4
   1dbe4:	movt	r0, #3
   1dbe8:	ldr	lr, [r0]
   1dbec:	add	r6, r6, #1
   1dbf0:	cmp	r6, lr
   1dbf4:	bcs	1dccc <__assert_fail@plt+0xbc40>
   1dbf8:	ldr	r0, [r9]
   1dbfc:	ldr	r0, [r0, r6, lsl #2]
   1dc00:	bl	1d6b8 <__assert_fail@plt+0xb62c>
   1dc04:	cmp	sl, #0
   1dc08:	beq	1dbe0 <__assert_fail@plt+0xbb54>
   1dc0c:	movw	r1, #58816	; 0xe5c0
   1dc10:	mov	r7, #0
   1dc14:	movt	r1, #3
   1dc18:	ldr	ip, [r1]
   1dc1c:	movw	r1, #58356	; 0xe3f4
   1dc20:	movt	r1, #3
   1dc24:	ldr	lr, [r1]
   1dc28:	movw	r1, #62400	; 0xf3c0
   1dc2c:	movt	r1, #3
   1dc30:	ldr	r1, [r1]
   1dc34:	add	r3, r1, #4
   1dc38:	b	1dc4c <__assert_fail@plt+0xbbc0>
   1dc3c:	add	r7, r7, #1
   1dc40:	add	r3, r3, #12
   1dc44:	cmp	sl, r7
   1dc48:	beq	1dbec <__assert_fail@plt+0xbb60>
   1dc4c:	ldrb	r1, [r3, #-4]
   1dc50:	cmp	r1, #0
   1dc54:	beq	1dc3c <__assert_fail@plt+0xbbb0>
   1dc58:	ldr	r1, [sp]
   1dc5c:	cmp	r1, #0
   1dc60:	beq	1dc78 <__assert_fail@plt+0xbbec>
   1dc64:	add	r1, lr, r7
   1dc68:	add	r2, r7, #1
   1dc6c:	udiv	r1, r1, r2
   1dc70:	udiv	r5, r6, r1
   1dc74:	b	1dc84 <__assert_fail@plt+0xbbf8>
   1dc78:	add	r1, r7, #1
   1dc7c:	udiv	r2, r6, r1
   1dc80:	mls	r5, r2, r1, r6
   1dc84:	ldr	r2, [r3, #4]
   1dc88:	cmp	r7, r5
   1dc8c:	mov	r4, r0
   1dc90:	addne	r4, r4, #2
   1dc94:	ldr	r1, [r2, r5, lsl #2]
   1dc98:	cmp	r4, r1
   1dc9c:	bls	1dc3c <__assert_fail@plt+0xbbb0>
   1dca0:	ldr	r8, [r3]
   1dca4:	sub	r1, r4, r1
   1dca8:	add	r1, r1, r8
   1dcac:	str	r1, [r3]
   1dcb0:	str	r4, [r2, r5, lsl #2]
   1dcb4:	ldr	r1, [r3]
   1dcb8:	cmp	r1, ip
   1dcbc:	mov	r1, #0
   1dcc0:	movwcc	r1, #1
   1dcc4:	strb	r1, [r3, #-4]
   1dcc8:	b	1dc3c <__assert_fail@plt+0xbbb0>
   1dccc:	movw	r0, #62400	; 0xf3c0
   1dcd0:	add	r1, sl, sl, lsl #1
   1dcd4:	movt	r0, #3
   1dcd8:	ldr	r0, [r0]
   1dcdc:	add	r0, r0, r1, lsl #2
   1dce0:	sub	r1, r0, #12
   1dce4:	mov	r0, sl
   1dce8:	cmp	sl, #2
   1dcec:	bcc	1dd00 <__assert_fail@plt+0xbc74>
   1dcf0:	ldrb	r2, [r1], #-12
   1dcf4:	sub	sl, r0, #1
   1dcf8:	cmp	r2, #0
   1dcfc:	beq	1dce4 <__assert_fail@plt+0xbc58>
   1dd00:	sub	sp, fp, #28
   1dd04:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1dd08:	bl	27c8c <_obstack_memory_used@@Base+0x33a0>
   1dd0c:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   1dd10:	add	fp, sp, #24
   1dd14:	sub	sp, sp, #128	; 0x80
   1dd18:	mov	r4, r1
   1dd1c:	mov	r8, r0
   1dd20:	cmp	r1, #0
   1dd24:	beq	1dd38 <__assert_fail@plt+0xbcac>
   1dd28:	cmp	r4, #1024	; 0x400
   1dd2c:	movw	r6, #1025	; 0x401
   1dd30:	addls	r6, r4, #1
   1dd34:	b	1dd3c <__assert_fail@plt+0xbcb0>
   1dd38:	mov	r6, #128	; 0x80
   1dd3c:	mov	r9, sp
   1dd40:	cmp	r4, #0
   1dd44:	bne	1dd58 <__assert_fail@plt+0xbccc>
   1dd48:	mov	r5, #0
   1dd4c:	cmp	r6, #128	; 0x80
   1dd50:	mov	r7, r9
   1dd54:	beq	1dd70 <__assert_fail@plt+0xbce4>
   1dd58:	mov	r0, r6
   1dd5c:	bl	28cec <_obstack_memory_used@@Base+0x4400>
   1dd60:	mov	r7, r0
   1dd64:	cmp	r0, #0
   1dd68:	mov	r5, r0
   1dd6c:	beq	1de0c <__assert_fail@plt+0xbd80>
   1dd70:	mov	r0, r8
   1dd74:	mov	r1, r7
   1dd78:	mov	r2, r6
   1dd7c:	bl	11d2c <readlink@plt>
   1dd80:	cmn	r0, #1
   1dd84:	ble	1ddc4 <__assert_fail@plt+0xbd38>
   1dd88:	cmp	r0, r6
   1dd8c:	bcc	1ddd4 <__assert_fail@plt+0xbd48>
   1dd90:	mov	r0, r5
   1dd94:	bl	1f89c <__assert_fail@plt+0xd810>
   1dd98:	cmn	r6, #-1073741823	; 0xc0000001
   1dd9c:	bhi	1dda8 <__assert_fail@plt+0xbd1c>
   1dda0:	lsl	r0, r6, #1
   1dda4:	b	1ddb4 <__assert_fail@plt+0xbd28>
   1dda8:	mvn	r0, #-2147483648	; 0x80000000
   1ddac:	cmn	r6, #-2147483647	; 0x80000001
   1ddb0:	bcs	1de0c <__assert_fail@plt+0xbd80>
   1ddb4:	mov	r6, r0
   1ddb8:	cmp	r4, #0
   1ddbc:	beq	1dd48 <__assert_fail@plt+0xbcbc>
   1ddc0:	b	1dd58 <__assert_fail@plt+0xbccc>
   1ddc4:	mov	r0, r5
   1ddc8:	bl	1f89c <__assert_fail@plt+0xd810>
   1ddcc:	mov	r4, #0
   1ddd0:	b	1de44 <__assert_fail@plt+0xbdb8>
   1ddd4:	mov	r4, #0
   1ddd8:	add	r8, r0, #1
   1dddc:	cmp	r5, #0
   1dde0:	strb	r4, [r7, r0]
   1dde4:	beq	1de20 <__assert_fail@plt+0xbd94>
   1dde8:	cmp	r8, r6
   1ddec:	bcs	1de40 <__assert_fail@plt+0xbdb4>
   1ddf0:	mov	r0, r5
   1ddf4:	mov	r1, r8
   1ddf8:	bl	28d1c <_obstack_memory_used@@Base+0x4430>
   1ddfc:	cmp	r0, #0
   1de00:	mov	r4, r0
   1de04:	moveq	r4, r5
   1de08:	b	1de44 <__assert_fail@plt+0xbdb8>
   1de0c:	bl	11ed0 <__errno_location@plt>
   1de10:	mov	r1, #12
   1de14:	mov	r4, #0
   1de18:	str	r1, [r0]
   1de1c:	b	1de44 <__assert_fail@plt+0xbdb8>
   1de20:	mov	r0, r8
   1de24:	bl	28cec <_obstack_memory_used@@Base+0x4400>
   1de28:	cmp	r0, #0
   1de2c:	beq	1de44 <__assert_fail@plt+0xbdb8>
   1de30:	mov	r1, r7
   1de34:	mov	r2, r8
   1de38:	mov	r5, r0
   1de3c:	bl	11c60 <memcpy@plt>
   1de40:	mov	r4, r5
   1de44:	mov	r0, r4
   1de48:	sub	sp, fp, #24
   1de4c:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   1de50:	mov	r0, #1
   1de54:	b	188bc <__assert_fail@plt+0x6830>
   1de58:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1de5c:	add	fp, sp, #28
   1de60:	sub	sp, sp, #12
   1de64:	mov	r4, r3
   1de68:	mov	r6, r2
   1de6c:	mov	r5, r1
   1de70:	mov	sl, r0
   1de74:	bl	11eac <strlen@plt>
   1de78:	ldr	r8, [r5]
   1de7c:	cmp	r8, #0
   1de80:	beq	1df40 <__assert_fail@plt+0xbeb4>
   1de84:	mov	r7, r0
   1de88:	mov	r0, #0
   1de8c:	add	r9, r5, #4
   1de90:	mov	r5, #0
   1de94:	str	r6, [sp, #4]
   1de98:	str	r0, [sp]
   1de9c:	mvn	r0, #0
   1dea0:	str	r0, [sp, #8]
   1dea4:	b	1dec0 <__assert_fail@plt+0xbe34>
   1dea8:	str	r5, [sp, #8]
   1deac:	ldr	r8, [r9, r5, lsl #2]
   1deb0:	add	r6, r6, r4
   1deb4:	add	r5, r5, #1
   1deb8:	cmp	r8, #0
   1debc:	beq	1df28 <__assert_fail@plt+0xbe9c>
   1dec0:	mov	r0, r8
   1dec4:	mov	r1, sl
   1dec8:	mov	r2, r7
   1decc:	bl	1202c <strncmp@plt>
   1ded0:	cmp	r0, #0
   1ded4:	bne	1deac <__assert_fail@plt+0xbe20>
   1ded8:	mov	r0, r8
   1dedc:	bl	11eac <strlen@plt>
   1dee0:	cmp	r0, r7
   1dee4:	beq	1df44 <__assert_fail@plt+0xbeb8>
   1dee8:	ldr	r0, [sp, #8]
   1deec:	cmn	r0, #1
   1def0:	beq	1dea8 <__assert_fail@plt+0xbe1c>
   1def4:	ldr	r0, [sp, #4]
   1def8:	cmp	r0, #0
   1defc:	beq	1df1c <__assert_fail@plt+0xbe90>
   1df00:	ldr	r1, [sp, #8]
   1df04:	mov	r2, r4
   1df08:	mla	r0, r1, r4, r0
   1df0c:	mov	r1, r6
   1df10:	bl	11e94 <bcmp@plt>
   1df14:	cmp	r0, #0
   1df18:	beq	1deac <__assert_fail@plt+0xbe20>
   1df1c:	mov	r0, #1
   1df20:	str	r0, [sp]
   1df24:	b	1deac <__assert_fail@plt+0xbe20>
   1df28:	ldr	r0, [sp]
   1df2c:	tst	r0, #1
   1df30:	ldr	r0, [sp, #8]
   1df34:	mvnne	r0, #1
   1df38:	sub	sp, fp, #28
   1df3c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1df40:	mvn	r5, #0
   1df44:	mov	r0, r5
   1df48:	sub	sp, fp, #28
   1df4c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1df50:	push	{r4, r5, r6, r7, fp, lr}
   1df54:	add	fp, sp, #16
   1df58:	mov	r5, r0
   1df5c:	ldr	r0, [r1]
   1df60:	mvn	r4, #0
   1df64:	cmp	r0, #0
   1df68:	beq	1df94 <__assert_fail@plt+0xbf08>
   1df6c:	add	r7, r1, #4
   1df70:	mov	r6, #0
   1df74:	mov	r1, r5
   1df78:	bl	11bd0 <strcmp@plt>
   1df7c:	cmp	r0, #0
   1df80:	beq	1df9c <__assert_fail@plt+0xbf10>
   1df84:	ldr	r0, [r7, r6, lsl #2]
   1df88:	add	r6, r6, #1
   1df8c:	cmp	r0, #0
   1df90:	bne	1df74 <__assert_fail@plt+0xbee8>
   1df94:	mov	r0, r4
   1df98:	pop	{r4, r5, r6, r7, fp, pc}
   1df9c:	mov	r0, r6
   1dfa0:	pop	{r4, r5, r6, r7, fp, pc}
   1dfa4:	push	{r4, r5, r6, sl, fp, lr}
   1dfa8:	add	fp, sp, #16
   1dfac:	sub	sp, sp, #8
   1dfb0:	mov	r5, r0
   1dfb4:	movw	r0, #54699	; 0xd5ab
   1dfb8:	mov	r4, r1
   1dfbc:	movw	r1, #54726	; 0xd5c6
   1dfc0:	cmn	r2, #1
   1dfc4:	mov	r2, #5
   1dfc8:	movt	r0, #2
   1dfcc:	movt	r1, #2
   1dfd0:	moveq	r1, r0
   1dfd4:	mov	r0, #0
   1dfd8:	bl	11ca8 <dcgettext@plt>
   1dfdc:	mov	r6, r0
   1dfe0:	mov	r0, #0
   1dfe4:	mov	r1, #8
   1dfe8:	mov	r2, r4
   1dfec:	bl	25fe8 <_obstack_memory_used@@Base+0x16fc>
   1dff0:	mov	r4, r0
   1dff4:	mov	r0, #1
   1dff8:	mov	r1, r5
   1dffc:	bl	265a8 <_obstack_memory_used@@Base+0x1cbc>
   1e000:	str	r0, [sp]
   1e004:	mov	r0, #0
   1e008:	mov	r1, #0
   1e00c:	mov	r2, r6
   1e010:	mov	r3, r4
   1e014:	bl	11da4 <error@plt>
   1e018:	sub	sp, fp, #16
   1e01c:	pop	{r4, r5, r6, sl, fp, pc}
   1e020:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1e024:	add	fp, sp, #28
   1e028:	sub	sp, sp, #4
   1e02c:	mov	sl, r1
   1e030:	movw	r1, #54755	; 0xd5e3
   1e034:	mov	r4, r2
   1e038:	mov	r6, r0
   1e03c:	mov	r0, #0
   1e040:	mov	r2, #5
   1e044:	mov	r8, #0
   1e048:	movt	r1, #2
   1e04c:	bl	11ca8 <dcgettext@plt>
   1e050:	movw	r1, #58120	; 0xe308
   1e054:	movt	r1, #3
   1e058:	ldr	r1, [r1]
   1e05c:	bl	11b94 <fputs_unlocked@plt>
   1e060:	ldr	r7, [r6]
   1e064:	cmp	r7, #0
   1e068:	beq	1e124 <__assert_fail@plt+0xc098>
   1e06c:	add	r0, r6, #4
   1e070:	mov	r9, #0
   1e074:	mov	r6, #0
   1e078:	str	r0, [sp]
   1e07c:	cmp	r9, #0
   1e080:	bne	1e0d8 <__assert_fail@plt+0xc04c>
   1e084:	mov	r5, #0
   1e088:	movw	r0, #58120	; 0xe308
   1e08c:	movt	r0, #3
   1e090:	ldr	r6, [r0]
   1e094:	mov	r0, r7
   1e098:	bl	265b8 <_obstack_memory_used@@Base+0x1ccc>
   1e09c:	movw	r2, #54776	; 0xd5f8
   1e0a0:	mov	r3, r0
   1e0a4:	mov	r0, r6
   1e0a8:	mov	r1, #1
   1e0ac:	movt	r2, #2
   1e0b0:	bl	11f24 <__fprintf_chk@plt>
   1e0b4:	add	r6, sl, r5
   1e0b8:	ldr	r0, [sp]
   1e0bc:	add	r8, r8, r4
   1e0c0:	ldr	r7, [r0, -r9, lsl #2]
   1e0c4:	sub	r9, r9, #1
   1e0c8:	cmp	r7, #0
   1e0cc:	beq	1e124 <__assert_fail@plt+0xc098>
   1e0d0:	cmp	r9, #0
   1e0d4:	beq	1e084 <__assert_fail@plt+0xbff8>
   1e0d8:	add	r1, sl, r8
   1e0dc:	mov	r0, r6
   1e0e0:	mov	r2, r4
   1e0e4:	bl	11e94 <bcmp@plt>
   1e0e8:	cmp	r0, #0
   1e0ec:	mov	r5, r8
   1e0f0:	bne	1e088 <__assert_fail@plt+0xbffc>
   1e0f4:	movw	r0, #58120	; 0xe308
   1e0f8:	movt	r0, #3
   1e0fc:	ldr	r5, [r0]
   1e100:	mov	r0, r7
   1e104:	bl	265b8 <_obstack_memory_used@@Base+0x1ccc>
   1e108:	movw	r2, #54784	; 0xd600
   1e10c:	mov	r3, r0
   1e110:	mov	r0, r5
   1e114:	mov	r1, #1
   1e118:	movt	r2, #2
   1e11c:	bl	11f24 <__fprintf_chk@plt>
   1e120:	b	1e0b8 <__assert_fail@plt+0xc02c>
   1e124:	movw	r0, #58120	; 0xe308
   1e128:	movt	r0, #3
   1e12c:	ldr	r0, [r0]
   1e130:	ldr	r1, [r0, #20]
   1e134:	ldr	r2, [r0, #24]
   1e138:	cmp	r1, r2
   1e13c:	addcc	r2, r1, #1
   1e140:	strcc	r2, [r0, #20]
   1e144:	movcc	r0, #10
   1e148:	strbcc	r0, [r1]
   1e14c:	subcc	sp, fp, #28
   1e150:	popcc	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1e154:	mov	r1, #10
   1e158:	sub	sp, fp, #28
   1e15c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1e160:	b	11f54 <__overflow@plt>
   1e164:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1e168:	add	fp, sp, #28
   1e16c:	sub	sp, sp, #20
   1e170:	mov	r9, r0
   1e174:	ldr	r0, [fp, #16]
   1e178:	mov	r8, r3
   1e17c:	mov	sl, r2
   1e180:	mov	r7, r1
   1e184:	cmp	r0, #0
   1e188:	beq	1e248 <__assert_fail@plt+0xc1bc>
   1e18c:	mov	r0, r7
   1e190:	str	r9, [sp, #8]
   1e194:	str	r8, [sp, #16]
   1e198:	bl	11eac <strlen@plt>
   1e19c:	ldr	r9, [sl]
   1e1a0:	cmp	r9, #0
   1e1a4:	beq	1e2b8 <__assert_fail@plt+0xc22c>
   1e1a8:	str	sl, [sp, #4]
   1e1ac:	add	r8, sl, #4
   1e1b0:	ldr	sl, [sp, #16]
   1e1b4:	mov	r4, r0
   1e1b8:	mov	r0, #0
   1e1bc:	mvn	r6, #0
   1e1c0:	mov	r5, #0
   1e1c4:	str	r0, [sp, #12]
   1e1c8:	b	1e1e8 <__assert_fail@plt+0xc15c>
   1e1cc:	mov	r6, r5
   1e1d0:	ldr	r9, [r8, r5, lsl #2]
   1e1d4:	ldr	r0, [fp, #8]
   1e1d8:	add	r5, r5, #1
   1e1dc:	add	sl, sl, r0
   1e1e0:	cmp	r9, #0
   1e1e4:	beq	1e288 <__assert_fail@plt+0xc1fc>
   1e1e8:	mov	r0, r9
   1e1ec:	mov	r1, r7
   1e1f0:	mov	r2, r4
   1e1f4:	bl	1202c <strncmp@plt>
   1e1f8:	cmp	r0, #0
   1e1fc:	bne	1e1d0 <__assert_fail@plt+0xc144>
   1e200:	mov	r0, r9
   1e204:	bl	11eac <strlen@plt>
   1e208:	cmp	r0, r4
   1e20c:	beq	1e33c <__assert_fail@plt+0xc2b0>
   1e210:	cmn	r6, #1
   1e214:	beq	1e1cc <__assert_fail@plt+0xc140>
   1e218:	ldr	r0, [sp, #16]
   1e21c:	cmp	r0, #0
   1e220:	beq	1e23c <__assert_fail@plt+0xc1b0>
   1e224:	ldr	r2, [fp, #8]
   1e228:	mov	r1, sl
   1e22c:	mla	r0, r6, r2, r0
   1e230:	bl	11e94 <bcmp@plt>
   1e234:	cmp	r0, #0
   1e238:	beq	1e1d0 <__assert_fail@plt+0xc144>
   1e23c:	mov	r0, #1
   1e240:	str	r0, [sp, #12]
   1e244:	b	1e1d0 <__assert_fail@plt+0xc144>
   1e248:	ldr	r0, [sl]
   1e24c:	movw	r4, #54699	; 0xd5ab
   1e250:	movt	r4, #2
   1e254:	cmp	r0, #0
   1e258:	beq	1e2c8 <__assert_fail@plt+0xc23c>
   1e25c:	add	r5, sl, #4
   1e260:	mov	r6, #0
   1e264:	mov	r1, r7
   1e268:	bl	11bd0 <strcmp@plt>
   1e26c:	cmp	r0, #0
   1e270:	beq	1e2a0 <__assert_fail@plt+0xc214>
   1e274:	ldr	r0, [r5, r6, lsl #2]
   1e278:	add	r6, r6, #1
   1e27c:	cmp	r0, #0
   1e280:	bne	1e264 <__assert_fail@plt+0xc1d8>
   1e284:	b	1e2c8 <__assert_fail@plt+0xc23c>
   1e288:	ldr	r0, [sp, #12]
   1e28c:	ldr	r8, [sp, #16]
   1e290:	ldr	sl, [sp, #4]
   1e294:	ldr	r9, [sp, #8]
   1e298:	tst	r0, #1
   1e29c:	bne	1e2ac <__assert_fail@plt+0xc220>
   1e2a0:	cmn	r6, #1
   1e2a4:	bgt	1e330 <__assert_fail@plt+0xc2a4>
   1e2a8:	beq	1e2c0 <__assert_fail@plt+0xc234>
   1e2ac:	movw	r4, #54726	; 0xd5c6
   1e2b0:	movt	r4, #2
   1e2b4:	b	1e2c8 <__assert_fail@plt+0xc23c>
   1e2b8:	ldr	r8, [sp, #16]
   1e2bc:	ldr	r9, [sp, #8]
   1e2c0:	movw	r4, #54699	; 0xd5ab
   1e2c4:	movt	r4, #2
   1e2c8:	ldr	r6, [fp, #12]
   1e2cc:	mov	r0, #0
   1e2d0:	mov	r1, r4
   1e2d4:	mov	r2, #5
   1e2d8:	bl	11ca8 <dcgettext@plt>
   1e2dc:	mov	r4, r0
   1e2e0:	mov	r0, #0
   1e2e4:	mov	r1, #8
   1e2e8:	mov	r2, r7
   1e2ec:	bl	25fe8 <_obstack_memory_used@@Base+0x16fc>
   1e2f0:	mov	r5, r0
   1e2f4:	mov	r0, #1
   1e2f8:	mov	r1, r9
   1e2fc:	bl	265a8 <_obstack_memory_used@@Base+0x1cbc>
   1e300:	str	r0, [sp]
   1e304:	mov	r0, #0
   1e308:	mov	r1, #0
   1e30c:	mov	r2, r4
   1e310:	mov	r3, r5
   1e314:	bl	11da4 <error@plt>
   1e318:	ldr	r2, [fp, #8]
   1e31c:	mov	r0, sl
   1e320:	mov	r1, r8
   1e324:	bl	1e020 <__assert_fail@plt+0xbf94>
   1e328:	blx	r6
   1e32c:	mvn	r6, #0
   1e330:	mov	r0, r6
   1e334:	sub	sp, fp, #28
   1e338:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1e33c:	ldr	r8, [sp, #16]
   1e340:	ldr	sl, [sp, #4]
   1e344:	ldr	r9, [sp, #8]
   1e348:	mov	r6, r5
   1e34c:	cmn	r6, #1
   1e350:	bgt	1e330 <__assert_fail@plt+0xc2a4>
   1e354:	b	1e2a8 <__assert_fail@plt+0xc21c>
   1e358:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   1e35c:	add	fp, sp, #24
   1e360:	ldr	r6, [r1]
   1e364:	cmp	r6, #0
   1e368:	beq	1e3cc <__assert_fail@plt+0xc340>
   1e36c:	mov	r8, r1
   1e370:	mov	r7, r2
   1e374:	mov	r1, r2
   1e378:	mov	r2, r3
   1e37c:	mov	r4, r3
   1e380:	mov	r9, r0
   1e384:	bl	11e94 <bcmp@plt>
   1e388:	cmp	r0, #0
   1e38c:	beq	1e3c4 <__assert_fail@plt+0xc338>
   1e390:	add	r7, r7, r4
   1e394:	add	r5, r8, #4
   1e398:	ldr	r6, [r5]
   1e39c:	cmp	r6, #0
   1e3a0:	beq	1e3cc <__assert_fail@plt+0xc340>
   1e3a4:	mov	r0, r9
   1e3a8:	mov	r1, r7
   1e3ac:	mov	r2, r4
   1e3b0:	bl	11e94 <bcmp@plt>
   1e3b4:	add	r7, r7, r4
   1e3b8:	add	r5, r5, #4
   1e3bc:	cmp	r0, #0
   1e3c0:	bne	1e398 <__assert_fail@plt+0xc30c>
   1e3c4:	mov	r0, r6
   1e3c8:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   1e3cc:	mov	r6, #0
   1e3d0:	mov	r0, r6
   1e3d4:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   1e3d8:	sub	r0, r0, #1
   1e3dc:	ldrb	r3, [r0, #1]!
   1e3e0:	cmp	r3, #47	; 0x2f
   1e3e4:	beq	1e3dc <__assert_fail@plt+0xc350>
   1e3e8:	mov	r2, #0
   1e3ec:	mov	r1, r0
   1e3f0:	b	1e3fc <__assert_fail@plt+0xc370>
   1e3f4:	ldrb	r3, [r1, #1]!
   1e3f8:	mov	r2, #1
   1e3fc:	uxtb	r3, r3
   1e400:	cmp	r3, #47	; 0x2f
   1e404:	beq	1e3f4 <__assert_fail@plt+0xc368>
   1e408:	cmp	r3, #0
   1e40c:	bxeq	lr
   1e410:	tst	r2, #1
   1e414:	mov	r2, #0
   1e418:	movne	r0, r1
   1e41c:	ldrb	r3, [r1, #1]!
   1e420:	b	1e3fc <__assert_fail@plt+0xc370>
   1e424:	push	{r4, sl, fp, lr}
   1e428:	add	fp, sp, #8
   1e42c:	mov	r4, r0
   1e430:	bl	11eac <strlen@plt>
   1e434:	mov	r1, r0
   1e438:	sub	r2, r4, #1
   1e43c:	mov	r0, r1
   1e440:	cmp	r1, #2
   1e444:	bcc	1e458 <__assert_fail@plt+0xc3cc>
   1e448:	ldrb	r3, [r2, r0]
   1e44c:	sub	r1, r0, #1
   1e450:	cmp	r3, #47	; 0x2f
   1e454:	beq	1e43c <__assert_fail@plt+0xc3b0>
   1e458:	pop	{r4, sl, fp, pc}
   1e45c:	sub	r2, r0, #65	; 0x41
   1e460:	mov	r1, r0
   1e464:	mov	r0, #1
   1e468:	cmp	r2, #26
   1e46c:	subcs	r2, r1, #97	; 0x61
   1e470:	cmpcs	r2, #26
   1e474:	bcs	1e47c <__assert_fail@plt+0xc3f0>
   1e478:	bx	lr
   1e47c:	sub	r1, r1, #48	; 0x30
   1e480:	cmp	r1, #10
   1e484:	movcs	r0, #0
   1e488:	bx	lr
   1e48c:	sub	r2, r0, #65	; 0x41
   1e490:	mov	r1, r0
   1e494:	mov	r0, #1
   1e498:	cmp	r2, #26
   1e49c:	subcs	r1, r1, #97	; 0x61
   1e4a0:	cmpcs	r1, #26
   1e4a4:	movcs	r0, #0
   1e4a8:	bx	lr
   1e4ac:	cmp	r0, #128	; 0x80
   1e4b0:	mov	r1, #0
   1e4b4:	movwcc	r1, #1
   1e4b8:	mov	r0, r1
   1e4bc:	bx	lr
   1e4c0:	sub	r1, r0, #9
   1e4c4:	sub	r0, r0, #32
   1e4c8:	clz	r1, r1
   1e4cc:	clz	r0, r0
   1e4d0:	lsr	r1, r1, #5
   1e4d4:	lsr	r0, r0, #5
   1e4d8:	orr	r0, r0, r1
   1e4dc:	bx	lr
   1e4e0:	mov	r1, r0
   1e4e4:	mov	r0, #1
   1e4e8:	cmp	r1, #32
   1e4ec:	bxcc	lr
   1e4f0:	cmp	r1, #127	; 0x7f
   1e4f4:	movne	r0, #0
   1e4f8:	bx	lr
   1e4fc:	sub	r1, r0, #48	; 0x30
   1e500:	mov	r0, #0
   1e504:	cmp	r1, #10
   1e508:	movwcc	r0, #1
   1e50c:	bx	lr
   1e510:	sub	r1, r0, #33	; 0x21
   1e514:	mov	r0, #0
   1e518:	cmp	r1, #94	; 0x5e
   1e51c:	movwcc	r0, #1
   1e520:	bx	lr
   1e524:	sub	r1, r0, #97	; 0x61
   1e528:	mov	r0, #0
   1e52c:	cmp	r1, #26
   1e530:	movwcc	r0, #1
   1e534:	bx	lr
   1e538:	sub	r1, r0, #32
   1e53c:	mov	r0, #0
   1e540:	cmp	r1, #95	; 0x5f
   1e544:	movwcc	r0, #1
   1e548:	bx	lr
   1e54c:	sub	r1, r0, #33	; 0x21
   1e550:	cmp	r1, #93	; 0x5d
   1e554:	bhi	1e6e0 <__assert_fail@plt+0xc654>
   1e558:	add	r2, pc, #4
   1e55c:	mov	r0, #1
   1e560:	ldr	pc, [r2, r1, lsl #2]
   1e564:	ldrdeq	lr, [r1], -ip
   1e568:	ldrdeq	lr, [r1], -ip
   1e56c:	ldrdeq	lr, [r1], -ip
   1e570:	ldrdeq	lr, [r1], -ip
   1e574:	ldrdeq	lr, [r1], -ip
   1e578:	ldrdeq	lr, [r1], -ip
   1e57c:	ldrdeq	lr, [r1], -ip
   1e580:	ldrdeq	lr, [r1], -ip
   1e584:	ldrdeq	lr, [r1], -ip
   1e588:	ldrdeq	lr, [r1], -ip
   1e58c:	ldrdeq	lr, [r1], -ip
   1e590:	ldrdeq	lr, [r1], -ip
   1e594:	ldrdeq	lr, [r1], -ip
   1e598:	ldrdeq	lr, [r1], -ip
   1e59c:	ldrdeq	lr, [r1], -ip
   1e5a0:	andeq	lr, r1, r0, ror #13
   1e5a4:	andeq	lr, r1, r0, ror #13
   1e5a8:	andeq	lr, r1, r0, ror #13
   1e5ac:	andeq	lr, r1, r0, ror #13
   1e5b0:	andeq	lr, r1, r0, ror #13
   1e5b4:	andeq	lr, r1, r0, ror #13
   1e5b8:	andeq	lr, r1, r0, ror #13
   1e5bc:	andeq	lr, r1, r0, ror #13
   1e5c0:	andeq	lr, r1, r0, ror #13
   1e5c4:	andeq	lr, r1, r0, ror #13
   1e5c8:	ldrdeq	lr, [r1], -ip
   1e5cc:	ldrdeq	lr, [r1], -ip
   1e5d0:	ldrdeq	lr, [r1], -ip
   1e5d4:	ldrdeq	lr, [r1], -ip
   1e5d8:	ldrdeq	lr, [r1], -ip
   1e5dc:	ldrdeq	lr, [r1], -ip
   1e5e0:	ldrdeq	lr, [r1], -ip
   1e5e4:	andeq	lr, r1, r0, ror #13
   1e5e8:	andeq	lr, r1, r0, ror #13
   1e5ec:	andeq	lr, r1, r0, ror #13
   1e5f0:	andeq	lr, r1, r0, ror #13
   1e5f4:	andeq	lr, r1, r0, ror #13
   1e5f8:	andeq	lr, r1, r0, ror #13
   1e5fc:	andeq	lr, r1, r0, ror #13
   1e600:	andeq	lr, r1, r0, ror #13
   1e604:	andeq	lr, r1, r0, ror #13
   1e608:	andeq	lr, r1, r0, ror #13
   1e60c:	andeq	lr, r1, r0, ror #13
   1e610:	andeq	lr, r1, r0, ror #13
   1e614:	andeq	lr, r1, r0, ror #13
   1e618:	andeq	lr, r1, r0, ror #13
   1e61c:	andeq	lr, r1, r0, ror #13
   1e620:	andeq	lr, r1, r0, ror #13
   1e624:	andeq	lr, r1, r0, ror #13
   1e628:	andeq	lr, r1, r0, ror #13
   1e62c:	andeq	lr, r1, r0, ror #13
   1e630:	andeq	lr, r1, r0, ror #13
   1e634:	andeq	lr, r1, r0, ror #13
   1e638:	andeq	lr, r1, r0, ror #13
   1e63c:	andeq	lr, r1, r0, ror #13
   1e640:	andeq	lr, r1, r0, ror #13
   1e644:	andeq	lr, r1, r0, ror #13
   1e648:	andeq	lr, r1, r0, ror #13
   1e64c:	ldrdeq	lr, [r1], -ip
   1e650:	ldrdeq	lr, [r1], -ip
   1e654:	ldrdeq	lr, [r1], -ip
   1e658:	ldrdeq	lr, [r1], -ip
   1e65c:	ldrdeq	lr, [r1], -ip
   1e660:	ldrdeq	lr, [r1], -ip
   1e664:	andeq	lr, r1, r0, ror #13
   1e668:	andeq	lr, r1, r0, ror #13
   1e66c:	andeq	lr, r1, r0, ror #13
   1e670:	andeq	lr, r1, r0, ror #13
   1e674:	andeq	lr, r1, r0, ror #13
   1e678:	andeq	lr, r1, r0, ror #13
   1e67c:	andeq	lr, r1, r0, ror #13
   1e680:	andeq	lr, r1, r0, ror #13
   1e684:	andeq	lr, r1, r0, ror #13
   1e688:	andeq	lr, r1, r0, ror #13
   1e68c:	andeq	lr, r1, r0, ror #13
   1e690:	andeq	lr, r1, r0, ror #13
   1e694:	andeq	lr, r1, r0, ror #13
   1e698:	andeq	lr, r1, r0, ror #13
   1e69c:	andeq	lr, r1, r0, ror #13
   1e6a0:	andeq	lr, r1, r0, ror #13
   1e6a4:	andeq	lr, r1, r0, ror #13
   1e6a8:	andeq	lr, r1, r0, ror #13
   1e6ac:	andeq	lr, r1, r0, ror #13
   1e6b0:	andeq	lr, r1, r0, ror #13
   1e6b4:	andeq	lr, r1, r0, ror #13
   1e6b8:	andeq	lr, r1, r0, ror #13
   1e6bc:	andeq	lr, r1, r0, ror #13
   1e6c0:	andeq	lr, r1, r0, ror #13
   1e6c4:	andeq	lr, r1, r0, ror #13
   1e6c8:	andeq	lr, r1, r0, ror #13
   1e6cc:	ldrdeq	lr, [r1], -ip
   1e6d0:	ldrdeq	lr, [r1], -ip
   1e6d4:	ldrdeq	lr, [r1], -ip
   1e6d8:	ldrdeq	lr, [r1], -ip
   1e6dc:	bx	lr
   1e6e0:	mov	r0, #0
   1e6e4:	bx	lr
   1e6e8:	sub	r0, r0, #9
   1e6ec:	cmp	r0, #23
   1e6f0:	movhi	r0, #0
   1e6f4:	bxhi	lr
   1e6f8:	movw	r1, #31
   1e6fc:	bic	r0, r0, #-16777216	; 0xff000000
   1e700:	mov	r2, #1
   1e704:	movt	r1, #128	; 0x80
   1e708:	and	r0, r2, r1, lsr r0
   1e70c:	bx	lr
   1e710:	sub	r1, r0, #65	; 0x41
   1e714:	mov	r0, #0
   1e718:	cmp	r1, #26
   1e71c:	movwcc	r0, #1
   1e720:	bx	lr
   1e724:	sub	r2, r0, #48	; 0x30
   1e728:	mov	r1, r0
   1e72c:	mov	r0, #1
   1e730:	cmp	r2, #22
   1e734:	bhi	1e74c <__assert_fail@plt+0xc6c0>
   1e738:	movw	r3, #1023	; 0x3ff
   1e73c:	mov	ip, #1
   1e740:	movt	r3, #126	; 0x7e
   1e744:	tst	r3, ip, lsl r2
   1e748:	bxne	lr
   1e74c:	sub	r1, r1, #97	; 0x61
   1e750:	cmp	r1, #6
   1e754:	movcs	r0, #0
   1e758:	bxcs	lr
   1e75c:	bx	lr
   1e760:	sub	r1, r0, #65	; 0x41
   1e764:	cmp	r1, #26
   1e768:	addcc	r0, r0, #32
   1e76c:	bx	lr
   1e770:	sub	r1, r0, #97	; 0x61
   1e774:	cmp	r1, #26
   1e778:	subcc	r0, r0, #32
   1e77c:	bx	lr
   1e780:	push	{fp, lr}
   1e784:	mov	fp, sp
   1e788:	cmp	r0, r1
   1e78c:	mov	r3, #0
   1e790:	cmpne	r2, #0
   1e794:	bne	1e7a0 <__assert_fail@plt+0xc714>
   1e798:	mov	r0, r3
   1e79c:	pop	{fp, pc}
   1e7a0:	sub	lr, r2, #1
   1e7a4:	ldrb	r2, [r1]
   1e7a8:	ldrb	ip, [r0]
   1e7ac:	sub	r3, r2, #65	; 0x41
   1e7b0:	cmp	r3, #26
   1e7b4:	sub	r3, ip, #65	; 0x41
   1e7b8:	addcc	r2, r2, #32
   1e7bc:	cmp	r3, #26
   1e7c0:	addcc	ip, ip, #32
   1e7c4:	cmp	lr, #0
   1e7c8:	uxtb	ip, ip
   1e7cc:	beq	1e7f8 <__assert_fail@plt+0xc76c>
   1e7d0:	cmp	ip, #0
   1e7d4:	beq	1e7f4 <__assert_fail@plt+0xc768>
   1e7d8:	uxtb	r3, r2
   1e7dc:	sub	lr, lr, #1
   1e7e0:	add	r1, r1, #1
   1e7e4:	add	r0, r0, #1
   1e7e8:	cmp	ip, r3
   1e7ec:	beq	1e7a4 <__assert_fail@plt+0xc718>
   1e7f0:	b	1e7f8 <__assert_fail@plt+0xc76c>
   1e7f4:	mov	ip, #0
   1e7f8:	uxtb	r0, r2
   1e7fc:	sub	r3, ip, r0
   1e800:	mov	r0, r3
   1e804:	pop	{fp, pc}
   1e808:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1e80c:	add	fp, sp, #28
   1e810:	sub	sp, sp, #180	; 0xb4
   1e814:	sub	sp, sp, #3072	; 0xc00
   1e818:	and	r7, r1, #3
   1e81c:	mov	r8, r0
   1e820:	sub	r0, r7, #1
   1e824:	tst	r7, r0
   1e828:	bne	1e8b4 <__assert_fail@plt+0xc828>
   1e82c:	cmp	r8, #0
   1e830:	beq	1e8b4 <__assert_fail@plt+0xc828>
   1e834:	ldrb	r0, [r8]
   1e838:	cmp	r0, #0
   1e83c:	beq	1e8d0 <__assert_fail@plt+0xc844>
   1e840:	mov	r4, r1
   1e844:	mov	r1, #1024	; 0x400
   1e848:	sub	lr, fp, #1024	; 0x400
   1e84c:	cmp	r0, #47	; 0x2f
   1e850:	str	r1, [fp, #-1060]	; 0xfffffbdc
   1e854:	str	r1, [sp, #52]	; 0x34
   1e858:	str	r1, [sp, #1188]	; 0x4a4
   1e85c:	add	r1, sp, #1184	; 0x4a0
   1e860:	sub	r2, lr, #40	; 0x28
   1e864:	add	r1, r1, #8
   1e868:	add	r2, r2, #8
   1e86c:	str	r1, [sp, #16]
   1e870:	str	r1, [sp, #1184]	; 0x4a0
   1e874:	add	r1, sp, #48	; 0x30
   1e878:	str	r2, [sp, #12]
   1e87c:	str	r2, [fp, #-1064]	; 0xfffffbd8
   1e880:	add	r5, r1, #8
   1e884:	mov	r0, r5
   1e888:	str	r5, [sp, #48]	; 0x30
   1e88c:	str	r5, [sp, #8]
   1e890:	bne	1e8dc <__assert_fail@plt+0xc850>
   1e894:	mov	r1, r8
   1e898:	mov	r2, #0
   1e89c:	mov	r3, #1024	; 0x400
   1e8a0:	bl	12080 <__mempcpy_chk@plt>
   1e8a4:	mov	r6, r0
   1e8a8:	mov	r0, #47	; 0x2f
   1e8ac:	strb	r0, [r6], #1
   1e8b0:	b	1e8fc <__assert_fail@plt+0xc870>
   1e8b4:	bl	11ed0 <__errno_location@plt>
   1e8b8:	mov	r1, #22
   1e8bc:	mov	r4, #0
   1e8c0:	str	r1, [r0]
   1e8c4:	mov	r0, r4
   1e8c8:	sub	sp, fp, #28
   1e8cc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1e8d0:	bl	11ed0 <__errno_location@plt>
   1e8d4:	mov	r1, #2
   1e8d8:	b	1e8bc <__assert_fail@plt+0xc830>
   1e8dc:	mov	r1, #1024	; 0x400
   1e8e0:	bl	11e70 <getcwd@plt>
   1e8e4:	cmp	r0, #0
   1e8e8:	beq	1ee18 <__assert_fail@plt+0xcd8c>
   1e8ec:	mov	r0, r5
   1e8f0:	mov	r1, #0
   1e8f4:	bl	11cfc <rawmemchr@plt>
   1e8f8:	mov	r6, r0
   1e8fc:	ldrb	r0, [r8]
   1e900:	cmp	r0, #0
   1e904:	beq	1eddc <__assert_fail@plt+0xcd50>
   1e908:	and	r1, r4, #4
   1e90c:	add	r9, sp, #48	; 0x30
   1e910:	str	r7, [sp, #32]
   1e914:	str	r1, [sp, #40]	; 0x28
   1e918:	mov	r1, #0
   1e91c:	str	r1, [sp, #24]
   1e920:	mov	r1, #0
   1e924:	str	r1, [sp, #36]	; 0x24
   1e928:	mov	r1, #0
   1e92c:	str	r1, [sp, #20]
   1e930:	b	1e94c <__assert_fail@plt+0xc8c0>
   1e934:	cmp	r0, #0
   1e938:	beq	1ec54 <__assert_fail@plt+0xcbc8>
   1e93c:	mov	r8, sl
   1e940:	ldrb	r0, [r8]
   1e944:	cmp	r0, #0
   1e948:	beq	1ede4 <__assert_fail@plt+0xcd58>
   1e94c:	uxtb	r1, r0
   1e950:	cmp	r1, #47	; 0x2f
   1e954:	bne	1e964 <__assert_fail@plt+0xc8d8>
   1e958:	ldrb	r0, [r8, #1]!
   1e95c:	cmp	r0, #47	; 0x2f
   1e960:	beq	1e958 <__assert_fail@plt+0xc8cc>
   1e964:	mov	r1, r0
   1e968:	mov	sl, r8
   1e96c:	b	1e974 <__assert_fail@plt+0xc8e8>
   1e970:	ldrb	r1, [sl, #1]!
   1e974:	uxtb	r1, r1
   1e978:	cmp	r1, #0
   1e97c:	cmpne	r1, #47	; 0x2f
   1e980:	bne	1e970 <__assert_fail@plt+0xc8e4>
   1e984:	sub	r2, sl, r8
   1e988:	cmp	r2, #1
   1e98c:	beq	1e9a4 <__assert_fail@plt+0xc918>
   1e990:	cmp	r2, #2
   1e994:	beq	1e9b4 <__assert_fail@plt+0xc928>
   1e998:	cmp	r2, #0
   1e99c:	bne	1e9fc <__assert_fail@plt+0xc970>
   1e9a0:	b	1ede4 <__assert_fail@plt+0xcd58>
   1e9a4:	uxtb	r0, r0
   1e9a8:	cmp	r0, #46	; 0x2e
   1e9ac:	bne	1e9fc <__assert_fail@plt+0xc970>
   1e9b0:	b	1e93c <__assert_fail@plt+0xc8b0>
   1e9b4:	uxtb	r0, r0
   1e9b8:	cmp	r0, #46	; 0x2e
   1e9bc:	bne	1e9fc <__assert_fail@plt+0xc970>
   1e9c0:	ldrb	r0, [r8, #1]
   1e9c4:	cmp	r0, #46	; 0x2e
   1e9c8:	bne	1e9fc <__assert_fail@plt+0xc970>
   1e9cc:	add	r0, r5, #1
   1e9d0:	cmp	r6, r0
   1e9d4:	bls	1e93c <__assert_fail@plt+0xc8b0>
   1e9d8:	sub	r0, r6, #1
   1e9dc:	mov	r6, r0
   1e9e0:	cmp	r0, r5
   1e9e4:	bls	1e93c <__assert_fail@plt+0xc8b0>
   1e9e8:	mov	r0, r6
   1e9ec:	ldrb	r1, [r0, #-1]!
   1e9f0:	cmp	r1, #47	; 0x2f
   1e9f4:	bne	1e9dc <__assert_fail@plt+0xc950>
   1e9f8:	b	1e93c <__assert_fail@plt+0xc8b0>
   1e9fc:	ldrb	r0, [r6, #-1]
   1ea00:	add	r4, r2, #2
   1ea04:	str	r2, [sp, #44]	; 0x2c
   1ea08:	cmp	r0, #47	; 0x2f
   1ea0c:	movne	r0, #47	; 0x2f
   1ea10:	strbne	r0, [r6], #1
   1ea14:	ldr	r0, [sp, #52]	; 0x34
   1ea18:	add	r0, r5, r0
   1ea1c:	sub	r0, r0, r6
   1ea20:	cmp	r0, r4
   1ea24:	bcs	1ea5c <__assert_fail@plt+0xc9d0>
   1ea28:	mov	r0, r9
   1ea2c:	bl	267e0 <_obstack_memory_used@@Base+0x1ef4>
   1ea30:	cmp	r0, #0
   1ea34:	beq	1eedc <__assert_fail@plt+0xce50>
   1ea38:	sub	r0, r6, r5
   1ea3c:	ldr	r5, [sp, #48]	; 0x30
   1ea40:	ldr	r1, [sp, #52]	; 0x34
   1ea44:	add	r6, r5, r0
   1ea48:	add	r0, r5, r1
   1ea4c:	sub	r0, r0, r6
   1ea50:	cmp	r0, r4
   1ea54:	bcc	1ea28 <__assert_fail@plt+0xc99c>
   1ea58:	ldr	r2, [sp, #44]	; 0x2c
   1ea5c:	mov	r0, r6
   1ea60:	mov	r1, r8
   1ea64:	mvn	r3, #0
   1ea68:	bl	12080 <__mempcpy_chk@plt>
   1ea6c:	mov	r6, r0
   1ea70:	mov	r0, #0
   1ea74:	strb	r0, [r6]
   1ea78:	ldr	r0, [sp, #40]	; 0x28
   1ea7c:	cmp	r0, #0
   1ea80:	bne	1eae4 <__assert_fail@plt+0xca58>
   1ea84:	ldr	r0, [sp, #1188]	; 0x4a4
   1ea88:	ldr	r7, [sp, #1184]	; 0x4a0
   1ea8c:	sub	r9, r0, #1
   1ea90:	mov	r0, r5
   1ea94:	mov	r1, r7
   1ea98:	mov	r2, r9
   1ea9c:	bl	11d2c <readlink@plt>
   1eaa0:	cmp	r0, r9
   1eaa4:	blt	1eabc <__assert_fail@plt+0xca30>
   1eaa8:	add	r0, sp, #1184	; 0x4a0
   1eaac:	bl	26770 <_obstack_memory_used@@Base+0x1e84>
   1eab0:	cmp	r0, #0
   1eab4:	bne	1ea84 <__assert_fail@plt+0xc9f8>
   1eab8:	b	1eedc <__assert_fail@plt+0xce50>
   1eabc:	mov	r4, r0
   1eac0:	cmp	r0, #0
   1eac4:	add	r9, sp, #48	; 0x30
   1eac8:	bmi	1eae4 <__assert_fail@plt+0xca58>
   1eacc:	ldr	r0, [sp, #24]
   1ead0:	cmp	r0, #19
   1ead4:	bgt	1eb64 <__assert_fail@plt+0xcad8>
   1ead8:	add	r0, r0, #1
   1eadc:	str	r0, [sp, #24]
   1eae0:	b	1ecc4 <__assert_fail@plt+0xcc38>
   1eae4:	ldr	r7, [sp, #32]
   1eae8:	cmp	r7, #2
   1eaec:	beq	1e93c <__assert_fail@plt+0xc8b0>
   1eaf0:	ldrb	r0, [sl]
   1eaf4:	cmp	r0, #47	; 0x2f
   1eaf8:	bne	1ec34 <__assert_fail@plt+0xcba8>
   1eafc:	mov	r2, sl
   1eb00:	mov	r1, r2
   1eb04:	ldrb	r3, [r2, #1]!
   1eb08:	cmp	r3, #47	; 0x2f
   1eb0c:	beq	1eb00 <__assert_fail@plt+0xca74>
   1eb10:	cmp	r3, #46	; 0x2e
   1eb14:	bne	1ec2c <__assert_fail@plt+0xcba0>
   1eb18:	add	r2, r1, #2
   1eb1c:	ldrb	r3, [r2]
   1eb20:	cmp	r3, #47	; 0x2f
   1eb24:	beq	1eb00 <__assert_fail@plt+0xca74>
   1eb28:	cmp	r3, #0
   1eb2c:	beq	1eb48 <__assert_fail@plt+0xcabc>
   1eb30:	cmp	r3, #46	; 0x2e
   1eb34:	bne	1ec34 <__assert_fail@plt+0xcba8>
   1eb38:	ldrb	r1, [r1, #3]
   1eb3c:	cmp	r1, #47	; 0x2f
   1eb40:	cmpne	r1, #0
   1eb44:	bne	1ec34 <__assert_fail@plt+0xcba8>
   1eb48:	mov	r0, #47	; 0x2f
   1eb4c:	mov	r1, r5
   1eb50:	mov	r2, #0
   1eb54:	mov	r3, #512	; 0x200
   1eb58:	strh	r0, [r6]
   1eb5c:	mvn	r0, #99	; 0x63
   1eb60:	b	1ec64 <__assert_fail@plt+0xcbd8>
   1eb64:	ldrb	r0, [r8]
   1eb68:	add	lr, sp, #1024	; 0x400
   1eb6c:	add	r2, lr, #56	; 0x38
   1eb70:	cmp	r0, #0
   1eb74:	beq	1ecc4 <__assert_fail@plt+0xcc38>
   1eb78:	ldr	r9, [sp, #44]	; 0x2c
   1eb7c:	mov	r0, #0
   1eb80:	mov	r1, r5
   1eb84:	strb	r0, [r6, -r9]
   1eb88:	ldrb	r0, [r5]
   1eb8c:	cmp	r0, #0
   1eb90:	movw	r0, #54802	; 0xd612
   1eb94:	movt	r0, #2
   1eb98:	moveq	r1, r0
   1eb9c:	mov	r0, #3
   1eba0:	bl	12008 <__xstat64@plt>
   1eba4:	cmp	r0, #0
   1eba8:	bne	1eeec <__assert_fail@plt+0xce60>
   1ebac:	rsb	r0, r9, #0
   1ebb0:	ldr	r9, [sp, #20]
   1ebb4:	ldrb	r1, [r8]
   1ebb8:	cmp	r9, #0
   1ebbc:	strb	r1, [r6, r0]
   1ebc0:	bne	1ebf8 <__assert_fail@plt+0xcb6c>
   1ebc4:	movw	r0, #3288	; 0xcd8
   1ebc8:	movw	r2, #3128	; 0xc38
   1ebcc:	movw	r3, #3184	; 0xc70
   1ebd0:	mov	r1, #0
   1ebd4:	movt	r0, #2
   1ebd8:	movt	r2, #2
   1ebdc:	movt	r3, #2
   1ebe0:	str	r0, [sp]
   1ebe4:	mov	r0, #7
   1ebe8:	bl	1fdfc <__assert_fail@plt+0xdd70>
   1ebec:	mov	r9, r0
   1ebf0:	cmp	r0, #0
   1ebf4:	beq	1eedc <__assert_fail@plt+0xce50>
   1ebf8:	add	lr, sp, #1024	; 0x400
   1ebfc:	mov	r0, r9
   1ec00:	mov	r1, r8
   1ec04:	add	r2, lr, #56	; 0x38
   1ec08:	bl	1f15c <__assert_fail@plt+0xd0d0>
   1ec0c:	cmp	r0, #0
   1ec10:	str	r9, [sp, #20]
   1ec14:	beq	1ecb0 <__assert_fail@plt+0xcc24>
   1ec18:	ldr	r7, [sp, #32]
   1ec1c:	cmp	r7, #2
   1ec20:	bne	1eee0 <__assert_fail@plt+0xce54>
   1ec24:	mov	r8, sl
   1ec28:	b	1ed98 <__assert_fail@plt+0xcd0c>
   1ec2c:	cmp	r3, #0
   1ec30:	beq	1eb48 <__assert_fail@plt+0xcabc>
   1ec34:	ldr	r1, [sp, #40]	; 0x28
   1ec38:	cmp	r1, #0
   1ec3c:	bne	1e934 <__assert_fail@plt+0xc8a8>
   1ec40:	bl	11ed0 <__errno_location@plt>
   1ec44:	ldr	r0, [r0]
   1ec48:	cmp	r0, #22
   1ec4c:	beq	1e93c <__assert_fail@plt+0xc8b0>
   1ec50:	b	1ec70 <__assert_fail@plt+0xcbe4>
   1ec54:	mvn	r0, #99	; 0x63
   1ec58:	mov	r1, r5
   1ec5c:	mov	r2, #0
   1ec60:	mov	r3, #512	; 0x200
   1ec64:	bl	11c3c <faccessat@plt>
   1ec68:	cmp	r0, #0
   1ec6c:	beq	1e93c <__assert_fail@plt+0xc8b0>
   1ec70:	mov	r4, #1
   1ec74:	cmp	r7, #1
   1ec78:	bne	1ee04 <__assert_fail@plt+0xcd78>
   1ec7c:	bl	11ed0 <__errno_location@plt>
   1ec80:	ldr	r0, [r0]
   1ec84:	cmp	r0, #2
   1ec88:	bne	1ee04 <__assert_fail@plt+0xcd78>
   1ec8c:	movw	r1, #38760	; 0x9768
   1ec90:	mov	r0, sl
   1ec94:	movt	r1, #2
   1ec98:	bl	12074 <strspn@plt>
   1ec9c:	ldrb	r0, [sl, r0]
   1eca0:	mov	r8, sl
   1eca4:	cmp	r0, #0
   1eca8:	beq	1e940 <__assert_fail@plt+0xc8b4>
   1ecac:	b	1ee04 <__assert_fail@plt+0xcd78>
   1ecb0:	add	lr, sp, #1024	; 0x400
   1ecb4:	mov	r0, r9
   1ecb8:	mov	r1, r8
   1ecbc:	add	r2, lr, #56	; 0x38
   1ecc0:	bl	1f0e0 <__assert_fail@plt+0xd054>
   1ecc4:	mov	r0, #0
   1ecc8:	strb	r0, [r7, r4]
   1eccc:	ldr	r0, [sp, #36]	; 0x24
   1ecd0:	ldr	r8, [fp, #-1064]	; 0xfffffbd8
   1ecd4:	tst	r0, #1
   1ecd8:	ldr	r0, [sp, #28]
   1ecdc:	subne	r0, sl, r8
   1ece0:	str	r0, [sp, #28]
   1ece4:	mov	r0, sl
   1ece8:	bl	11eac <strlen@plt>
   1ecec:	mvn	r1, r4
   1ecf0:	cmp	r0, r1
   1ecf4:	bhi	1eedc <__assert_fail@plt+0xce50>
   1ecf8:	str	r0, [sp, #44]	; 0x2c
   1ecfc:	add	r9, r0, r4
   1ed00:	ldr	r0, [fp, #-1060]	; 0xfffffbdc
   1ed04:	cmp	r0, r9
   1ed08:	bhi	1ed30 <__assert_fail@plt+0xcca4>
   1ed0c:	sub	lr, fp, #1024	; 0x400
   1ed10:	sub	r0, lr, #40	; 0x28
   1ed14:	bl	267e0 <_obstack_memory_used@@Base+0x1ef4>
   1ed18:	cmp	r0, #0
   1ed1c:	beq	1eedc <__assert_fail@plt+0xce50>
   1ed20:	ldr	r0, [fp, #-1060]	; 0xfffffbdc
   1ed24:	cmp	r0, r9
   1ed28:	bls	1ed0c <__assert_fail@plt+0xcc80>
   1ed2c:	ldr	r8, [fp, #-1064]	; 0xfffffbd8
   1ed30:	ldr	r0, [sp, #36]	; 0x24
   1ed34:	ldr	r1, [sp, #44]	; 0x2c
   1ed38:	tst	r0, #1
   1ed3c:	ldr	r0, [sp, #28]
   1ed40:	add	r2, r1, #1
   1ed44:	addne	sl, r8, r0
   1ed48:	add	r0, r8, r4
   1ed4c:	mov	r1, sl
   1ed50:	bl	11c24 <memmove@plt>
   1ed54:	mov	r0, r8
   1ed58:	mov	r1, r7
   1ed5c:	mov	r2, r4
   1ed60:	bl	11c60 <memcpy@plt>
   1ed64:	ldrb	r0, [r7]
   1ed68:	cmp	r0, #47	; 0x2f
   1ed6c:	bne	1eda0 <__assert_fail@plt+0xcd14>
   1ed70:	mov	r0, r5
   1ed74:	mov	r1, r7
   1ed78:	mov	r2, #0
   1ed7c:	mvn	r3, #0
   1ed80:	bl	12080 <__mempcpy_chk@plt>
   1ed84:	mov	r6, r0
   1ed88:	mov	r0, #47	; 0x2f
   1ed8c:	strb	r0, [r6], #1
   1ed90:	mov	r0, #1
   1ed94:	str	r0, [sp, #36]	; 0x24
   1ed98:	add	r9, sp, #48	; 0x30
   1ed9c:	b	1e940 <__assert_fail@plt+0xc8b4>
   1eda0:	add	r0, r5, #1
   1eda4:	mov	r1, #1
   1eda8:	add	r9, sp, #48	; 0x30
   1edac:	cmp	r6, r0
   1edb0:	str	r1, [sp, #36]	; 0x24
   1edb4:	bls	1e940 <__assert_fail@plt+0xc8b4>
   1edb8:	sub	r0, r6, #1
   1edbc:	mov	r6, r0
   1edc0:	cmp	r0, r5
   1edc4:	bls	1e940 <__assert_fail@plt+0xc8b4>
   1edc8:	mov	r0, r6
   1edcc:	ldrb	r1, [r0, #-1]!
   1edd0:	cmp	r1, #47	; 0x2f
   1edd4:	bne	1edbc <__assert_fail@plt+0xcd30>
   1edd8:	b	1e940 <__assert_fail@plt+0xc8b4>
   1eddc:	mov	r0, #0
   1ede0:	str	r0, [sp, #20]
   1ede4:	add	r0, r5, #1
   1ede8:	cmp	r6, r0
   1edec:	bls	1ee00 <__assert_fail@plt+0xcd74>
   1edf0:	mov	r0, r6
   1edf4:	ldrb	r1, [r0, #-1]!
   1edf8:	cmp	r1, #47	; 0x2f
   1edfc:	moveq	r6, r0
   1ee00:	mov	r4, #0
   1ee04:	ldr	r0, [sp, #20]
   1ee08:	cmp	r0, #0
   1ee0c:	beq	1ee70 <__assert_fail@plt+0xcde4>
   1ee10:	bl	20100 <__assert_fail@plt+0xe074>
   1ee14:	b	1ee70 <__assert_fail@plt+0xcde4>
   1ee18:	bl	11ed0 <__errno_location@plt>
   1ee1c:	ldr	r5, [sp, #8]
   1ee20:	mov	r6, r0
   1ee24:	add	r9, sp, #48	; 0x30
   1ee28:	ldr	r0, [r6]
   1ee2c:	cmp	r0, #34	; 0x22
   1ee30:	bne	1ee60 <__assert_fail@plt+0xcdd4>
   1ee34:	mov	r0, r9
   1ee38:	bl	26770 <_obstack_memory_used@@Base+0x1e84>
   1ee3c:	cmp	r0, #0
   1ee40:	beq	1eedc <__assert_fail@plt+0xce50>
   1ee44:	ldr	r5, [sp, #48]	; 0x30
   1ee48:	ldr	r1, [sp, #52]	; 0x34
   1ee4c:	mov	r0, r5
   1ee50:	bl	11e70 <getcwd@plt>
   1ee54:	cmp	r0, #0
   1ee58:	beq	1ee28 <__assert_fail@plt+0xcd9c>
   1ee5c:	b	1e8ec <__assert_fail@plt+0xc860>
   1ee60:	cmp	r0, #12
   1ee64:	beq	1eedc <__assert_fail@plt+0xce50>
   1ee68:	mov	r4, #1
   1ee6c:	mov	r6, r5
   1ee70:	ldr	r1, [sp, #12]
   1ee74:	ldr	r0, [fp, #-1064]	; 0xfffffbd8
   1ee78:	ldr	r7, [sp, #16]
   1ee7c:	cmp	r0, r1
   1ee80:	beq	1ee88 <__assert_fail@plt+0xcdfc>
   1ee84:	bl	1f89c <__assert_fail@plt+0xd810>
   1ee88:	ldr	r0, [sp, #1184]	; 0x4a0
   1ee8c:	cmp	r0, r7
   1ee90:	beq	1ee98 <__assert_fail@plt+0xce0c>
   1ee94:	bl	1f89c <__assert_fail@plt+0xd810>
   1ee98:	cmp	r4, #0
   1ee9c:	beq	1eebc <__assert_fail@plt+0xce30>
   1eea0:	ldr	r0, [sp, #48]	; 0x30
   1eea4:	ldr	r1, [sp, #8]
   1eea8:	mov	r4, #0
   1eeac:	cmp	r0, r1
   1eeb0:	beq	1e8c4 <__assert_fail@plt+0xc838>
   1eeb4:	bl	1f89c <__assert_fail@plt+0xd810>
   1eeb8:	b	1e8c4 <__assert_fail@plt+0xc838>
   1eebc:	mov	r0, #0
   1eec0:	strb	r0, [r6], -r5
   1eec4:	add	r0, sp, #48	; 0x30
   1eec8:	add	r1, r6, #1
   1eecc:	bl	26704 <_obstack_memory_used@@Base+0x1e18>
   1eed0:	mov	r4, r0
   1eed4:	cmp	r0, #0
   1eed8:	bne	1e8c4 <__assert_fail@plt+0xc838>
   1eedc:	bl	27c8c <_obstack_memory_used@@Base+0x33a0>
   1eee0:	bl	11ed0 <__errno_location@plt>
   1eee4:	mov	r1, #40	; 0x28
   1eee8:	str	r1, [r0]
   1eeec:	mov	r4, #1
   1eef0:	b	1ee04 <__assert_fail@plt+0xcd78>
   1eef4:	movw	r1, #62408	; 0xf3c8
   1eef8:	movt	r1, #3
   1eefc:	str	r0, [r1]
   1ef00:	bx	lr
   1ef04:	movw	r1, #62412	; 0xf3cc
   1ef08:	movt	r1, #3
   1ef0c:	strb	r0, [r1]
   1ef10:	bx	lr
   1ef14:	push	{r4, r5, r6, sl, fp, lr}
   1ef18:	add	fp, sp, #16
   1ef1c:	sub	sp, sp, #8
   1ef20:	movw	r0, #58124	; 0xe30c
   1ef24:	movt	r0, #3
   1ef28:	ldr	r0, [r0]
   1ef2c:	bl	28d70 <_obstack_memory_used@@Base+0x4484>
   1ef30:	cmp	r0, #0
   1ef34:	beq	1ef5c <__assert_fail@plt+0xced0>
   1ef38:	movw	r0, #62412	; 0xf3cc
   1ef3c:	movt	r0, #3
   1ef40:	ldrb	r0, [r0]
   1ef44:	cmp	r0, #0
   1ef48:	beq	1ef7c <__assert_fail@plt+0xcef0>
   1ef4c:	bl	11ed0 <__errno_location@plt>
   1ef50:	ldr	r0, [r0]
   1ef54:	cmp	r0, #32
   1ef58:	bne	1ef7c <__assert_fail@plt+0xcef0>
   1ef5c:	movw	r0, #58120	; 0xe308
   1ef60:	movt	r0, #3
   1ef64:	ldr	r0, [r0]
   1ef68:	bl	28d70 <_obstack_memory_used@@Base+0x4484>
   1ef6c:	cmp	r0, #0
   1ef70:	subeq	sp, fp, #16
   1ef74:	popeq	{r4, r5, r6, sl, fp, pc}
   1ef78:	b	1efec <__assert_fail@plt+0xcf60>
   1ef7c:	movw	r1, #54789	; 0xd605
   1ef80:	mov	r0, #0
   1ef84:	mov	r2, #5
   1ef88:	movt	r1, #2
   1ef8c:	bl	11ca8 <dcgettext@plt>
   1ef90:	mov	r4, r0
   1ef94:	movw	r0, #62408	; 0xf3c8
   1ef98:	movt	r0, #3
   1ef9c:	ldr	r6, [r0]
   1efa0:	bl	11ed0 <__errno_location@plt>
   1efa4:	ldr	r5, [r0]
   1efa8:	cmp	r6, #0
   1efac:	bne	1efc8 <__assert_fail@plt+0xcf3c>
   1efb0:	movw	r2, #54786	; 0xd602
   1efb4:	mov	r0, #0
   1efb8:	mov	r1, r5
   1efbc:	mov	r3, r4
   1efc0:	movt	r2, #2
   1efc4:	b	1efe8 <__assert_fail@plt+0xcf5c>
   1efc8:	mov	r0, r6
   1efcc:	bl	26230 <_obstack_memory_used@@Base+0x1944>
   1efd0:	movw	r2, #46355	; 0xb513
   1efd4:	mov	r3, r0
   1efd8:	str	r4, [sp]
   1efdc:	mov	r0, #0
   1efe0:	mov	r1, r5
   1efe4:	movt	r2, #2
   1efe8:	bl	11da4 <error@plt>
   1efec:	movw	r0, #58028	; 0xe2ac
   1eff0:	movt	r0, #3
   1eff4:	ldr	r0, [r0]
   1eff8:	bl	11c54 <_exit@plt>
   1effc:	push	{r4, r5, r6, sl, fp, lr}
   1f000:	add	fp, sp, #16
   1f004:	mov	r5, r0
   1f008:	mov	r4, r0
   1f00c:	ldrb	r6, [r5], #-1
   1f010:	bl	1e3d8 <__assert_fail@plt+0xc34c>
   1f014:	sub	r2, r0, r4
   1f018:	sub	r0, r6, #47	; 0x2f
   1f01c:	clz	r0, r0
   1f020:	lsr	r1, r0, #5
   1f024:	mov	r0, r2
   1f028:	cmp	r2, r1
   1f02c:	bls	1f040 <__assert_fail@plt+0xcfb4>
   1f030:	ldrb	r3, [r5, r0]
   1f034:	sub	r2, r0, #1
   1f038:	cmp	r3, #47	; 0x2f
   1f03c:	beq	1f024 <__assert_fail@plt+0xcf98>
   1f040:	pop	{r4, r5, r6, sl, fp, pc}
   1f044:	push	{r4, r5, r6, sl, fp, lr}
   1f048:	add	fp, sp, #16
   1f04c:	mov	r6, r0
   1f050:	mov	r4, r0
   1f054:	ldrb	r5, [r6], #-1
   1f058:	bl	1e3d8 <__assert_fail@plt+0xc34c>
   1f05c:	sub	r1, r0, r4
   1f060:	sub	r0, r5, #47	; 0x2f
   1f064:	clz	r0, r0
   1f068:	lsr	r0, r0, #5
   1f06c:	mov	r5, r1
   1f070:	cmp	r1, r0
   1f074:	bls	1f088 <__assert_fail@plt+0xcffc>
   1f078:	ldrb	r2, [r6, r5]
   1f07c:	sub	r1, r5, #1
   1f080:	cmp	r2, #47	; 0x2f
   1f084:	beq	1f06c <__assert_fail@plt+0xcfe0>
   1f088:	cmp	r5, #0
   1f08c:	mov	r0, r5
   1f090:	addeq	r0, r0, #1
   1f094:	add	r0, r0, #1
   1f098:	bl	28cec <_obstack_memory_used@@Base+0x4400>
   1f09c:	mov	r6, r0
   1f0a0:	cmp	r0, #0
   1f0a4:	beq	1f0d0 <__assert_fail@plt+0xd044>
   1f0a8:	mov	r0, r6
   1f0ac:	mov	r1, r4
   1f0b0:	mov	r2, r5
   1f0b4:	bl	11c60 <memcpy@plt>
   1f0b8:	cmp	r5, #0
   1f0bc:	moveq	r0, #46	; 0x2e
   1f0c0:	moveq	r5, #1
   1f0c4:	strbeq	r0, [r6]
   1f0c8:	mov	r0, #0
   1f0cc:	strb	r0, [r6, r5]
   1f0d0:	mov	r0, r6
   1f0d4:	pop	{r4, r5, r6, sl, fp, pc}
   1f0d8:	mov	r0, #0
   1f0dc:	bx	lr
   1f0e0:	push	{r4, r5, r6, r7, fp, lr}
   1f0e4:	add	fp, sp, #16
   1f0e8:	cmp	r0, #0
   1f0ec:	beq	1f154 <__assert_fail@plt+0xd0c8>
   1f0f0:	mov	r5, r0
   1f0f4:	mov	r0, #24
   1f0f8:	mov	r6, r2
   1f0fc:	mov	r7, r1
   1f100:	bl	27750 <_obstack_memory_used@@Base+0x2e64>
   1f104:	mov	r4, r0
   1f108:	mov	r0, r7
   1f10c:	bl	27c54 <_obstack_memory_used@@Base+0x3368>
   1f110:	str	r0, [r4]
   1f114:	ldrd	r0, [r6, #96]	; 0x60
   1f118:	str	r0, [r4, #8]
   1f11c:	str	r1, [r4, #12]
   1f120:	ldrd	r0, [r6]
   1f124:	str	r1, [r4, #20]
   1f128:	str	r0, [r4, #16]
   1f12c:	mov	r0, r5
   1f130:	mov	r1, r4
   1f134:	bl	20950 <__assert_fail@plt+0xe8c4>
   1f138:	cmp	r0, #0
   1f13c:	beq	1f158 <__assert_fail@plt+0xd0cc>
   1f140:	cmp	r0, r4
   1f144:	beq	1f154 <__assert_fail@plt+0xd0c8>
   1f148:	mov	r0, r4
   1f14c:	pop	{r4, r5, r6, r7, fp, lr}
   1f150:	b	20cd8 <__assert_fail@plt+0xec4c>
   1f154:	pop	{r4, r5, r6, r7, fp, pc}
   1f158:	bl	27c8c <_obstack_memory_used@@Base+0x33a0>
   1f15c:	cmp	r0, #0
   1f160:	moveq	r0, #0
   1f164:	bxeq	lr
   1f168:	push	{r4, r5, fp, lr}
   1f16c:	add	fp, sp, #8
   1f170:	sub	sp, sp, #24
   1f174:	str	r1, [sp]
   1f178:	mov	ip, sp
   1f17c:	mov	r1, sp
   1f180:	ldrd	r4, [r2, #96]	; 0x60
   1f184:	add	r3, ip, #8
   1f188:	add	ip, ip, #16
   1f18c:	strd	r4, [r3]
   1f190:	ldrd	r2, [r2]
   1f194:	strd	r2, [ip]
   1f198:	bl	1fb48 <__assert_fail@plt+0xdabc>
   1f19c:	cmp	r0, #0
   1f1a0:	movwne	r0, #1
   1f1a4:	sub	sp, fp, #8
   1f1a8:	pop	{r4, r5, fp, pc}
   1f1ac:	push	{fp, lr}
   1f1b0:	mov	fp, sp
   1f1b4:	and	r2, r0, #61440	; 0xf000
   1f1b8:	sub	r2, r2, #4096	; 0x1000
   1f1bc:	lsr	r3, r2, #12
   1f1c0:	cmp	r3, #11
   1f1c4:	bhi	1f214 <__assert_fail@plt+0xd188>
   1f1c8:	add	r2, pc, #4
   1f1cc:	mov	ip, #45	; 0x2d
   1f1d0:	ldr	pc, [r2, r3, lsl #2]
   1f1d4:	andeq	pc, r1, r4, lsl #4
   1f1d8:	andeq	pc, r1, ip, lsl #4
   1f1dc:	andeq	pc, r1, r4, lsl r2	; <UNPREDICTABLE>
   1f1e0:	andeq	pc, r1, ip, lsl r2	; <UNPREDICTABLE>
   1f1e4:	andeq	pc, r1, r4, lsl r2	; <UNPREDICTABLE>
   1f1e8:	andeq	pc, r1, r4, lsr r2	; <UNPREDICTABLE>
   1f1ec:	andeq	pc, r1, r4, lsl r2	; <UNPREDICTABLE>
   1f1f0:	andeq	pc, r1, r8, lsr r2	; <UNPREDICTABLE>
   1f1f4:	andeq	pc, r1, r4, lsl r2	; <UNPREDICTABLE>
   1f1f8:	andeq	pc, r1, r4, lsr #4
   1f1fc:	andeq	pc, r1, r4, lsl r2	; <UNPREDICTABLE>
   1f200:	andeq	pc, r1, ip, lsr #4
   1f204:	mov	ip, #112	; 0x70
   1f208:	b	1f238 <__assert_fail@plt+0xd1ac>
   1f20c:	mov	ip, #99	; 0x63
   1f210:	b	1f238 <__assert_fail@plt+0xd1ac>
   1f214:	mov	ip, #63	; 0x3f
   1f218:	b	1f238 <__assert_fail@plt+0xd1ac>
   1f21c:	mov	ip, #100	; 0x64
   1f220:	b	1f238 <__assert_fail@plt+0xd1ac>
   1f224:	mov	ip, #108	; 0x6c
   1f228:	b	1f238 <__assert_fail@plt+0xd1ac>
   1f22c:	mov	ip, #115	; 0x73
   1f230:	b	1f238 <__assert_fail@plt+0xd1ac>
   1f234:	mov	ip, #98	; 0x62
   1f238:	tst	r0, #2
   1f23c:	mov	r3, #119	; 0x77
   1f240:	mov	r2, #32
   1f244:	mov	lr, #45	; 0x2d
   1f248:	movweq	r3, #45	; 0x2d
   1f24c:	tst	r0, #4
   1f250:	strh	r2, [r1, #10]
   1f254:	mov	r2, #114	; 0x72
   1f258:	strb	ip, [r1]
   1f25c:	mov	ip, #119	; 0x77
   1f260:	movweq	r2, #45	; 0x2d
   1f264:	tst	r0, #16
   1f268:	strb	r3, [r1, #8]
   1f26c:	mov	r3, #114	; 0x72
   1f270:	strb	r2, [r1, #7]
   1f274:	mov	r2, #119	; 0x77
   1f278:	movweq	r2, #45	; 0x2d
   1f27c:	tst	r0, #32
   1f280:	strb	r2, [r1, #5]
   1f284:	mov	r2, #114	; 0x72
   1f288:	movweq	r2, #45	; 0x2d
   1f28c:	tst	r0, #128	; 0x80
   1f290:	movweq	ip, #45	; 0x2d
   1f294:	tst	r0, #256	; 0x100
   1f298:	strb	r2, [r1, #4]
   1f29c:	movweq	r3, #45	; 0x2d
   1f2a0:	ands	r2, r0, #1
   1f2a4:	strb	ip, [r1, #2]
   1f2a8:	mov	r2, #84	; 0x54
   1f2ac:	mov	ip, #45	; 0x2d
   1f2b0:	strb	r3, [r1, #1]
   1f2b4:	mov	r3, #45	; 0x2d
   1f2b8:	movwne	r3, #120	; 0x78
   1f2bc:	movwne	r2, #116	; 0x74
   1f2c0:	tst	r0, #512	; 0x200
   1f2c4:	moveq	r2, r3
   1f2c8:	mov	r3, #83	; 0x53
   1f2cc:	strb	r2, [r1, #9]
   1f2d0:	ands	r2, r0, #8
   1f2d4:	mov	r2, #83	; 0x53
   1f2d8:	movwne	lr, #120	; 0x78
   1f2dc:	movwne	r2, #115	; 0x73
   1f2e0:	tst	r0, #1024	; 0x400
   1f2e4:	moveq	r2, lr
   1f2e8:	strb	r2, [r1, #6]
   1f2ec:	ands	r2, r0, #64	; 0x40
   1f2f0:	movwne	ip, #120	; 0x78
   1f2f4:	movwne	r3, #115	; 0x73
   1f2f8:	tst	r0, #2048	; 0x800
   1f2fc:	moveq	r3, ip
   1f300:	strb	r3, [r1, #3]
   1f304:	pop	{fp, pc}
   1f308:	ldr	r0, [r0, #16]
   1f30c:	b	1f1ac <__assert_fail@plt+0xd120>
   1f310:	push	{fp, lr}
   1f314:	mov	fp, sp
   1f318:	bl	1f328 <__assert_fail@plt+0xd29c>
   1f31c:	cmp	r0, #0
   1f320:	popne	{fp, pc}
   1f324:	bl	27c8c <_obstack_memory_used@@Base+0x33a0>
   1f328:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1f32c:	add	fp, sp, #28
   1f330:	push	{r2}		; (str r2, [sp, #-4]!)
   1f334:	mov	sl, r1
   1f338:	mov	r7, r0
   1f33c:	bl	1e3d8 <__assert_fail@plt+0xc34c>
   1f340:	sub	r4, r0, r7
   1f344:	bl	1e424 <__assert_fail@plt+0xc398>
   1f348:	mov	r6, r0
   1f34c:	add	r5, r4, r0
   1f350:	mov	r0, sl
   1f354:	bl	11eac <strlen@plt>
   1f358:	mov	r9, r0
   1f35c:	cmp	r6, #0
   1f360:	beq	1f388 <__assert_fail@plt+0xd2fc>
   1f364:	add	r0, r5, r7
   1f368:	mov	r4, #0
   1f36c:	ldrb	r0, [r0, #-1]
   1f370:	cmp	r0, #47	; 0x2f
   1f374:	beq	1f398 <__assert_fail@plt+0xd30c>
   1f378:	ldrb	r0, [sl]
   1f37c:	subs	r4, r0, #47	; 0x2f
   1f380:	movwne	r4, #47	; 0x2f
   1f384:	b	1f398 <__assert_fail@plt+0xd30c>
   1f388:	ldrb	r0, [sl]
   1f38c:	mov	r4, #0
   1f390:	cmp	r0, #47	; 0x2f
   1f394:	movweq	r4, #46	; 0x2e
   1f398:	uxtb	r8, r4
   1f39c:	add	r0, r9, r5
   1f3a0:	cmp	r8, #0
   1f3a4:	movwne	r8, #1
   1f3a8:	add	r0, r0, r8
   1f3ac:	add	r0, r0, #1
   1f3b0:	bl	28cec <_obstack_memory_used@@Base+0x4400>
   1f3b4:	mov	r6, r0
   1f3b8:	cmp	r0, #0
   1f3bc:	beq	1f3fc <__assert_fail@plt+0xd370>
   1f3c0:	mov	r0, r6
   1f3c4:	mov	r1, r7
   1f3c8:	mov	r2, r5
   1f3cc:	mvn	r3, #0
   1f3d0:	bl	12080 <__mempcpy_chk@plt>
   1f3d4:	ldr	r1, [sp]
   1f3d8:	strb	r4, [r0], r8
   1f3dc:	mov	r2, r9
   1f3e0:	mvn	r3, #0
   1f3e4:	cmp	r1, #0
   1f3e8:	strne	r0, [r1]
   1f3ec:	mov	r1, sl
   1f3f0:	bl	12080 <__mempcpy_chk@plt>
   1f3f4:	mov	r1, #0
   1f3f8:	strb	r1, [r0]
   1f3fc:	mov	r0, r6
   1f400:	sub	sp, fp, #28
   1f404:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1f408:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1f40c:	add	fp, sp, #28
   1f410:	sub	sp, sp, #12
   1f414:	mov	r8, r1
   1f418:	mov	r9, r0
   1f41c:	bl	11bd0 <strcmp@plt>
   1f420:	cmp	r0, #0
   1f424:	beq	1f4c0 <__assert_fail@plt+0xd434>
   1f428:	ldrb	r4, [r9]
   1f42c:	cmp	r4, #0
   1f430:	beq	1f4b4 <__assert_fail@plt+0xd428>
   1f434:	ldrb	r6, [r8]
   1f438:	cmp	r6, #0
   1f43c:	beq	1f874 <__assert_fail@plt+0xd7e8>
   1f440:	mov	sl, r0
   1f444:	movw	r0, #54802	; 0xd612
   1f448:	mov	r1, r9
   1f44c:	movt	r0, #2
   1f450:	bl	11bd0 <strcmp@plt>
   1f454:	cmp	r0, #0
   1f458:	beq	1f4b4 <__assert_fail@plt+0xd428>
   1f45c:	movw	r0, #54802	; 0xd612
   1f460:	mov	r1, r8
   1f464:	movt	r0, #2
   1f468:	bl	11bd0 <strcmp@plt>
   1f46c:	cmp	r0, #0
   1f470:	beq	1f874 <__assert_fail@plt+0xd7e8>
   1f474:	movw	r0, #54801	; 0xd611
   1f478:	mov	r1, r9
   1f47c:	movt	r0, #2
   1f480:	bl	11bd0 <strcmp@plt>
   1f484:	cmp	r0, #0
   1f488:	beq	1f4b4 <__assert_fail@plt+0xd428>
   1f48c:	movw	r0, #54801	; 0xd611
   1f490:	mov	r1, r8
   1f494:	movt	r0, #2
   1f498:	bl	11bd0 <strcmp@plt>
   1f49c:	cmp	r0, #0
   1f4a0:	beq	1f874 <__assert_fail@plt+0xd7e8>
   1f4a4:	cmp	r4, #46	; 0x2e
   1f4a8:	bne	1f4cc <__assert_fail@plt+0xd440>
   1f4ac:	cmp	r6, #46	; 0x2e
   1f4b0:	beq	1f4cc <__assert_fail@plt+0xd440>
   1f4b4:	mvn	r0, #0
   1f4b8:	sub	sp, fp, #28
   1f4bc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1f4c0:	mov	r0, #0
   1f4c4:	sub	sp, fp, #28
   1f4c8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1f4cc:	cmp	r4, #46	; 0x2e
   1f4d0:	bne	1f4fc <__assert_fail@plt+0xd470>
   1f4d4:	mov	r4, #46	; 0x2e
   1f4d8:	cmp	r6, #46	; 0x2e
   1f4dc:	bne	1f504 <__assert_fail@plt+0xd478>
   1f4e0:	ldrb	r4, [r9, #1]!
   1f4e4:	add	r8, r8, #1
   1f4e8:	cmp	r4, #0
   1f4ec:	bne	1f504 <__assert_fail@plt+0xd478>
   1f4f0:	mov	r7, #0
   1f4f4:	mov	r6, r9
   1f4f8:	b	1f594 <__assert_fail@plt+0xd508>
   1f4fc:	cmp	r6, #46	; 0x2e
   1f500:	beq	1f874 <__assert_fail@plt+0xd7e8>
   1f504:	mov	r1, #0
   1f508:	mvn	r5, #64	; 0x40
   1f50c:	mov	r6, r9
   1f510:	mov	r7, #0
   1f514:	tst	r1, #1
   1f518:	beq	1f564 <__assert_fail@plt+0xd4d8>
   1f51c:	b	1f540 <__assert_fail@plt+0xd4b4>
   1f520:	cmp	r7, #0
   1f524:	mov	r1, #1
   1f528:	moveq	r7, r6
   1f52c:	ldrb	r4, [r6, #1]!
   1f530:	cmp	r4, #0
   1f534:	beq	1f594 <__assert_fail@plt+0xd508>
   1f538:	tst	r1, #1
   1f53c:	beq	1f564 <__assert_fail@plt+0xd4d8>
   1f540:	uxtab	r0, r5, r4
   1f544:	mov	r1, #0
   1f548:	cmp	r0, #26
   1f54c:	bcc	1f52c <__assert_fail@plt+0xd4a0>
   1f550:	uxtb	r0, r4
   1f554:	sub	r2, r0, #97	; 0x61
   1f558:	cmp	r2, #26
   1f55c:	bcc	1f52c <__assert_fail@plt+0xd4a0>
   1f560:	b	1f584 <__assert_fail@plt+0xd4f8>
   1f564:	uxtb	r0, r4
   1f568:	cmp	r0, #46	; 0x2e
   1f56c:	beq	1f520 <__assert_fail@plt+0xd494>
   1f570:	bl	1e45c <__assert_fail@plt+0xc3d0>
   1f574:	mov	r1, #0
   1f578:	cmp	r0, #0
   1f57c:	bne	1f52c <__assert_fail@plt+0xd4a0>
   1f580:	ldrb	r0, [r6]
   1f584:	mov	r1, #0
   1f588:	cmp	r0, #126	; 0x7e
   1f58c:	movne	r7, r1
   1f590:	b	1f52c <__assert_fail@plt+0xd4a0>
   1f594:	ldrb	r0, [r8]
   1f598:	str	r7, [sp, #8]
   1f59c:	cmp	r0, #0
   1f5a0:	beq	1f634 <__assert_fail@plt+0xd5a8>
   1f5a4:	mov	r1, #0
   1f5a8:	mvn	r5, #64	; 0x40
   1f5ac:	mov	r4, r8
   1f5b0:	mov	r7, #0
   1f5b4:	tst	r1, #1
   1f5b8:	beq	1f604 <__assert_fail@plt+0xd578>
   1f5bc:	b	1f5e0 <__assert_fail@plt+0xd554>
   1f5c0:	cmp	r7, #0
   1f5c4:	mov	r1, #1
   1f5c8:	moveq	r7, r4
   1f5cc:	ldrb	r0, [r4, #1]!
   1f5d0:	cmp	r0, #0
   1f5d4:	beq	1f63c <__assert_fail@plt+0xd5b0>
   1f5d8:	tst	r1, #1
   1f5dc:	beq	1f604 <__assert_fail@plt+0xd578>
   1f5e0:	uxtab	r2, r5, r0
   1f5e4:	mov	r1, #0
   1f5e8:	cmp	r2, #26
   1f5ec:	bcc	1f5cc <__assert_fail@plt+0xd540>
   1f5f0:	uxtb	r0, r0
   1f5f4:	sub	r2, r0, #97	; 0x61
   1f5f8:	cmp	r2, #26
   1f5fc:	bcc	1f5cc <__assert_fail@plt+0xd540>
   1f600:	b	1f624 <__assert_fail@plt+0xd598>
   1f604:	uxtb	r0, r0
   1f608:	cmp	r0, #46	; 0x2e
   1f60c:	beq	1f5c0 <__assert_fail@plt+0xd534>
   1f610:	bl	1e45c <__assert_fail@plt+0xc3d0>
   1f614:	mov	r1, #0
   1f618:	cmp	r0, #0
   1f61c:	bne	1f5cc <__assert_fail@plt+0xd540>
   1f620:	ldrb	r0, [r4]
   1f624:	mov	r1, #0
   1f628:	cmp	r0, #126	; 0x7e
   1f62c:	movne	r7, r1
   1f630:	b	1f5cc <__assert_fail@plt+0xd540>
   1f634:	mov	r7, #0
   1f638:	mov	r4, r8
   1f63c:	ldr	r1, [sp, #8]
   1f640:	cmp	r7, #0
   1f644:	mov	r0, r4
   1f648:	movne	r0, r7
   1f64c:	sub	lr, r0, r8
   1f650:	mov	r0, r6
   1f654:	cmp	r1, #0
   1f658:	movne	r0, r1
   1f65c:	sub	r2, r0, r9
   1f660:	orrs	r0, r1, r7
   1f664:	beq	1f694 <__assert_fail@plt+0xd608>
   1f668:	cmp	r2, lr
   1f66c:	bne	1f694 <__assert_fail@plt+0xd608>
   1f670:	mov	r0, r9
   1f674:	mov	r1, r8
   1f678:	mov	r5, r2
   1f67c:	bl	1202c <strncmp@plt>
   1f680:	cmp	r0, #0
   1f684:	mov	r2, r5
   1f688:	mov	lr, r5
   1f68c:	subeq	lr, r4, r8
   1f690:	subeq	r2, r6, r9
   1f694:	mov	ip, #0
   1f698:	mov	r6, #0
   1f69c:	cmp	ip, lr
   1f6a0:	cmpcs	r6, r2
   1f6a4:	bcs	1f890 <__assert_fail@plt+0xd804>
   1f6a8:	cmp	r6, r2
   1f6ac:	bcs	1f6c0 <__assert_fail@plt+0xd634>
   1f6b0:	ldrb	r0, [r9, r6]
   1f6b4:	sub	r0, r0, #48	; 0x30
   1f6b8:	cmp	r0, #9
   1f6bc:	bhi	1f6d8 <__assert_fail@plt+0xd64c>
   1f6c0:	cmp	ip, lr
   1f6c4:	bcs	1f7a0 <__assert_fail@plt+0xd714>
   1f6c8:	ldrb	r0, [r8, ip]
   1f6cc:	sub	r0, r0, #48	; 0x30
   1f6d0:	cmp	r0, #10
   1f6d4:	bcc	1f7a0 <__assert_fail@plt+0xd714>
   1f6d8:	mov	r0, #0
   1f6dc:	cmp	r2, r6
   1f6e0:	mov	r1, #0
   1f6e4:	beq	1f734 <__assert_fail@plt+0xd6a8>
   1f6e8:	ldrb	r3, [r9, r6]
   1f6ec:	sub	r1, r3, #48	; 0x30
   1f6f0:	cmp	r1, #10
   1f6f4:	mov	r1, #0
   1f6f8:	bcc	1f734 <__assert_fail@plt+0xd6a8>
   1f6fc:	sub	r1, r3, #65	; 0x41
   1f700:	cmp	r1, #26
   1f704:	bcc	1f730 <__assert_fail@plt+0xd6a4>
   1f708:	sub	r1, r3, #97	; 0x61
   1f70c:	cmp	r1, #26
   1f710:	mov	r1, r3
   1f714:	bcc	1f734 <__assert_fail@plt+0xd6a8>
   1f718:	cmp	r3, #126	; 0x7e
   1f71c:	orr	r1, r3, #256	; 0x100
   1f720:	mvneq	r1, #0
   1f724:	cmp	lr, ip
   1f728:	bne	1f73c <__assert_fail@plt+0xd6b0>
   1f72c:	b	1f784 <__assert_fail@plt+0xd6f8>
   1f730:	mov	r1, r3
   1f734:	cmp	lr, ip
   1f738:	beq	1f784 <__assert_fail@plt+0xd6f8>
   1f73c:	ldrb	r3, [r8, ip]
   1f740:	sub	r7, r3, #48	; 0x30
   1f744:	cmp	r7, #10
   1f748:	bcc	1f784 <__assert_fail@plt+0xd6f8>
   1f74c:	sub	r0, r3, #65	; 0x41
   1f750:	cmp	r0, #26
   1f754:	bcc	1f780 <__assert_fail@plt+0xd6f4>
   1f758:	sub	r0, r3, #97	; 0x61
   1f75c:	cmp	r0, #26
   1f760:	mov	r0, r3
   1f764:	bcc	1f784 <__assert_fail@plt+0xd6f8>
   1f768:	cmp	r3, #126	; 0x7e
   1f76c:	orr	r0, r3, #256	; 0x100
   1f770:	mvneq	r0, #0
   1f774:	cmp	r1, r0
   1f778:	beq	1f78c <__assert_fail@plt+0xd700>
   1f77c:	b	1f880 <__assert_fail@plt+0xd7f4>
   1f780:	mov	r0, r3
   1f784:	cmp	r1, r0
   1f788:	bne	1f880 <__assert_fail@plt+0xd7f4>
   1f78c:	add	ip, ip, #1
   1f790:	add	r6, r6, #1
   1f794:	cmp	r6, r2
   1f798:	bcc	1f6b0 <__assert_fail@plt+0xd624>
   1f79c:	b	1f6c0 <__assert_fail@plt+0xd634>
   1f7a0:	mov	r3, r6
   1f7a4:	ldrb	r4, [r9, r3]
   1f7a8:	add	r3, r3, #1
   1f7ac:	cmp	r4, #48	; 0x30
   1f7b0:	beq	1f7a4 <__assert_fail@plt+0xd718>
   1f7b4:	sub	r6, r3, #1
   1f7b8:	ldrb	r5, [r8, ip]
   1f7bc:	add	ip, ip, #1
   1f7c0:	cmp	r5, #48	; 0x30
   1f7c4:	beq	1f7b8 <__assert_fail@plt+0xd72c>
   1f7c8:	sub	r1, r5, #48	; 0x30
   1f7cc:	sub	r7, r4, #48	; 0x30
   1f7d0:	mov	r0, #0
   1f7d4:	cmp	r1, #10
   1f7d8:	mov	r1, #0
   1f7dc:	movwcc	r1, #1
   1f7e0:	cmp	r7, #9
   1f7e4:	bhi	1f85c <__assert_fail@plt+0xd7d0>
   1f7e8:	add	r0, r8, ip
   1f7ec:	mvn	r6, #0
   1f7f0:	mov	r7, r9
   1f7f4:	str	lr, [sp, #4]
   1f7f8:	str	r0, [sp, #8]
   1f7fc:	mov	r0, #0
   1f800:	tst	r1, #1
   1f804:	beq	1f874 <__assert_fail@plt+0xd7e8>
   1f808:	ldr	r1, [sp, #8]
   1f80c:	cmp	r0, #0
   1f810:	subeq	r0, r4, r5
   1f814:	ldrb	r4, [r7, r3]
   1f818:	add	r7, r7, #1
   1f81c:	add	r1, r1, r6
   1f820:	add	r6, r6, #1
   1f824:	ldrb	r5, [r1, #1]
   1f828:	sub	lr, r4, #48	; 0x30
   1f82c:	sub	r1, r5, #48	; 0x30
   1f830:	cmp	r1, #10
   1f834:	mov	r1, #0
   1f838:	movwcc	r1, #1
   1f83c:	cmp	lr, #10
   1f840:	bcc	1f800 <__assert_fail@plt+0xd774>
   1f844:	ldr	lr, [sp, #4]
   1f848:	add	ip, ip, r6
   1f84c:	add	r6, r3, r6
   1f850:	cmp	r1, #0
   1f854:	beq	1f868 <__assert_fail@plt+0xd7dc>
   1f858:	b	1f4b4 <__assert_fail@plt+0xd428>
   1f85c:	sub	ip, ip, #1
   1f860:	cmp	r1, #0
   1f864:	bne	1f4b4 <__assert_fail@plt+0xd428>
   1f868:	cmp	r0, #0
   1f86c:	beq	1f69c <__assert_fail@plt+0xd610>
   1f870:	b	1f888 <__assert_fail@plt+0xd7fc>
   1f874:	mov	r0, #1
   1f878:	sub	sp, fp, #28
   1f87c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1f880:	subs	r0, r1, r0
   1f884:	moveq	r0, sl
   1f888:	sub	sp, fp, #28
   1f88c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1f890:	mov	r0, sl
   1f894:	sub	sp, fp, #28
   1f898:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1f89c:	push	{r4, r5, r6, sl, fp, lr}
   1f8a0:	add	fp, sp, #16
   1f8a4:	mov	r4, r0
   1f8a8:	bl	11ed0 <__errno_location@plt>
   1f8ac:	ldr	r6, [r0]
   1f8b0:	mov	r5, r0
   1f8b4:	mov	r0, r4
   1f8b8:	bl	11c30 <free@plt>
   1f8bc:	str	r6, [r5]
   1f8c0:	pop	{r4, r5, r6, sl, fp, pc}
   1f8c4:	mov	r1, r0
   1f8c8:	mov	r0, #0
   1f8cc:	b	11c48 <clock_gettime@plt>
   1f8d0:	push	{fp, lr}
   1f8d4:	mov	fp, sp
   1f8d8:	mov	r1, r0
   1f8dc:	mov	r0, #0
   1f8e0:	bl	11c48 <clock_gettime@plt>
   1f8e4:	pop	{fp, pc}
   1f8e8:	push	{r4, sl, fp, lr}
   1f8ec:	add	fp, sp, #8
   1f8f0:	sub	sp, sp, #264	; 0x108
   1f8f4:	add	r1, sp, #7
   1f8f8:	movw	r2, #257	; 0x101
   1f8fc:	bl	269e4 <_obstack_memory_used@@Base+0x20f8>
   1f900:	mov	r4, #0
   1f904:	cmp	r0, #0
   1f908:	bne	1f948 <__assert_fail@plt+0xd8bc>
   1f90c:	movw	r1, #54804	; 0xd614
   1f910:	add	r0, sp, #7
   1f914:	mov	r2, #2
   1f918:	movt	r1, #2
   1f91c:	bl	11e94 <bcmp@plt>
   1f920:	cmp	r0, #0
   1f924:	beq	1f948 <__assert_fail@plt+0xd8bc>
   1f928:	movw	r1, #54806	; 0xd616
   1f92c:	add	r0, sp, #7
   1f930:	mov	r2, #6
   1f934:	movt	r1, #2
   1f938:	bl	11e94 <bcmp@plt>
   1f93c:	cmp	r0, #0
   1f940:	mov	r4, r0
   1f944:	movwne	r4, #1
   1f948:	mov	r0, r4
   1f94c:	sub	sp, fp, #8
   1f950:	pop	{r4, sl, fp, pc}
   1f954:	andeq	r0, r0, r0
   1f958:	ldr	r0, [r0, #8]
   1f95c:	bx	lr
   1f960:	ldr	r0, [r0, #12]
   1f964:	bx	lr
   1f968:	ldr	r0, [r0, #16]
   1f96c:	bx	lr
   1f970:	ldm	r0, {r2, ip}
   1f974:	mov	r0, #0
   1f978:	cmp	r2, ip
   1f97c:	bxcs	lr
   1f980:	mov	r0, #0
   1f984:	b	1f994 <__assert_fail@plt+0xd908>
   1f988:	add	r2, r2, #8
   1f98c:	cmp	r2, ip
   1f990:	bcs	1f9c4 <__assert_fail@plt+0xd938>
   1f994:	ldr	r1, [r2]
   1f998:	cmp	r1, #0
   1f99c:	beq	1f988 <__assert_fail@plt+0xd8fc>
   1f9a0:	mov	r3, #0
   1f9a4:	mov	r1, r2
   1f9a8:	ldr	r1, [r1, #4]
   1f9ac:	add	r3, r3, #1
   1f9b0:	cmp	r1, #0
   1f9b4:	bne	1f9a8 <__assert_fail@plt+0xd91c>
   1f9b8:	cmp	r3, r0
   1f9bc:	movhi	r0, r3
   1f9c0:	b	1f988 <__assert_fail@plt+0xd8fc>
   1f9c4:	bx	lr
   1f9c8:	push	{fp, lr}
   1f9cc:	mov	fp, sp
   1f9d0:	ldm	r0, {r3, ip}
   1f9d4:	mov	lr, #0
   1f9d8:	mov	r1, #0
   1f9dc:	cmp	r3, ip
   1f9e0:	bcs	1fa24 <__assert_fail@plt+0xd998>
   1f9e4:	mov	r1, #0
   1f9e8:	mov	lr, #0
   1f9ec:	b	1f9fc <__assert_fail@plt+0xd970>
   1f9f0:	add	r3, r3, #8
   1f9f4:	cmp	r3, ip
   1f9f8:	bcs	1fa24 <__assert_fail@plt+0xd998>
   1f9fc:	ldr	r2, [r3]
   1fa00:	cmp	r2, #0
   1fa04:	beq	1f9f0 <__assert_fail@plt+0xd964>
   1fa08:	mov	r2, r3
   1fa0c:	ldr	r2, [r2, #4]
   1fa10:	add	r1, r1, #1
   1fa14:	cmp	r2, #0
   1fa18:	bne	1fa0c <__assert_fail@plt+0xd980>
   1fa1c:	add	lr, lr, #1
   1fa20:	b	1f9f0 <__assert_fail@plt+0xd964>
   1fa24:	ldr	r2, [r0, #12]
   1fa28:	cmp	lr, r2
   1fa2c:	bne	1fa44 <__assert_fail@plt+0xd9b8>
   1fa30:	ldr	r2, [r0, #16]
   1fa34:	mov	r0, #1
   1fa38:	cmp	r1, r2
   1fa3c:	movne	r0, #0
   1fa40:	pop	{fp, pc}
   1fa44:	mov	r0, #0
   1fa48:	pop	{fp, pc}
   1fa4c:	nop	{0}
   1fa50:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   1fa54:	add	fp, sp, #24
   1fa58:	sub	sp, sp, #8
   1fa5c:	ldr	r6, [r0]
   1fa60:	ldmib	r0, {r2, r7, r8}
   1fa64:	ldr	r3, [r0, #16]
   1fa68:	mov	r4, r1
   1fa6c:	mov	r5, #0
   1fa70:	cmp	r6, r2
   1fa74:	bcs	1fabc <__assert_fail@plt+0xda30>
   1fa78:	mov	r5, #0
   1fa7c:	b	1fa8c <__assert_fail@plt+0xda00>
   1fa80:	add	r6, r6, #8
   1fa84:	cmp	r6, r2
   1fa88:	bcs	1fabc <__assert_fail@plt+0xda30>
   1fa8c:	ldr	r0, [r6]
   1fa90:	cmp	r0, #0
   1fa94:	beq	1fa80 <__assert_fail@plt+0xd9f4>
   1fa98:	mov	r0, #0
   1fa9c:	mov	r1, r6
   1faa0:	ldr	r1, [r1, #4]
   1faa4:	add	r0, r0, #1
   1faa8:	cmp	r1, #0
   1faac:	bne	1faa0 <__assert_fail@plt+0xda14>
   1fab0:	cmp	r0, r5
   1fab4:	movhi	r5, r0
   1fab8:	b	1fa80 <__assert_fail@plt+0xd9f4>
   1fabc:	movw	r2, #54812	; 0xd61c
   1fac0:	mov	r0, r4
   1fac4:	mov	r1, #1
   1fac8:	movt	r2, #2
   1facc:	bl	11f24 <__fprintf_chk@plt>
   1fad0:	movw	r2, #54836	; 0xd634
   1fad4:	mov	r0, r4
   1fad8:	mov	r1, #1
   1fadc:	mov	r3, r7
   1fae0:	movt	r2, #2
   1fae4:	bl	11f24 <__fprintf_chk@plt>
   1fae8:	vmov	s0, r8
   1faec:	vldr	d16, [pc, #76]	; 1fb40 <__assert_fail@plt+0xdab4>
   1faf0:	movw	r2, #54860	; 0xd64c
   1faf4:	mov	r0, r4
   1faf8:	mov	r1, #1
   1fafc:	mov	r3, r8
   1fb00:	movt	r2, #2
   1fb04:	vcvt.f64.u32	d17, s0
   1fb08:	vmov	s0, r7
   1fb0c:	vcvt.f64.u32	d18, s0
   1fb10:	vmul.f64	d16, d17, d16
   1fb14:	vdiv.f64	d16, d16, d18
   1fb18:	vstr	d16, [sp]
   1fb1c:	bl	11f24 <__fprintf_chk@plt>
   1fb20:	movw	r2, #54893	; 0xd66d
   1fb24:	mov	r0, r4
   1fb28:	mov	r1, #1
   1fb2c:	mov	r3, r5
   1fb30:	movt	r2, #2
   1fb34:	sub	sp, fp, #24
   1fb38:	pop	{r4, r5, r6, r7, r8, sl, fp, lr}
   1fb3c:	b	11f24 <__fprintf_chk@plt>
   1fb40:	andeq	r0, r0, r0
   1fb44:	subsmi	r0, r9, r0
   1fb48:	push	{r4, r5, r6, r7, fp, lr}
   1fb4c:	add	fp, sp, #16
   1fb50:	mov	r4, r1
   1fb54:	ldr	r1, [r0, #8]
   1fb58:	ldr	r2, [r0, #24]
   1fb5c:	mov	r5, r0
   1fb60:	mov	r0, r4
   1fb64:	blx	r2
   1fb68:	ldr	r1, [r5, #8]
   1fb6c:	cmp	r0, r1
   1fb70:	bcs	1fbd8 <__assert_fail@plt+0xdb4c>
   1fb74:	ldr	r7, [r5]
   1fb78:	mov	r6, #0
   1fb7c:	ldr	r1, [r7, r0, lsl #3]!
   1fb80:	cmp	r1, #0
   1fb84:	cmpne	r7, #0
   1fb88:	bne	1fbb8 <__assert_fail@plt+0xdb2c>
   1fb8c:	mov	r0, r6
   1fb90:	pop	{r4, r5, r6, r7, fp, pc}
   1fb94:	ldr	r2, [r5, #28]
   1fb98:	mov	r0, r4
   1fb9c:	blx	r2
   1fba0:	cmp	r0, #0
   1fba4:	bne	1fbcc <__assert_fail@plt+0xdb40>
   1fba8:	ldr	r7, [r7, #4]
   1fbac:	cmp	r7, #0
   1fbb0:	beq	1fb8c <__assert_fail@plt+0xdb00>
   1fbb4:	ldr	r1, [r7]
   1fbb8:	cmp	r1, r4
   1fbbc:	bne	1fb94 <__assert_fail@plt+0xdb08>
   1fbc0:	mov	r6, r4
   1fbc4:	mov	r0, r6
   1fbc8:	pop	{r4, r5, r6, r7, fp, pc}
   1fbcc:	ldr	r6, [r7]
   1fbd0:	mov	r0, r6
   1fbd4:	pop	{r4, r5, r6, r7, fp, pc}
   1fbd8:	bl	12038 <abort@plt>
   1fbdc:	push	{fp, lr}
   1fbe0:	mov	fp, sp
   1fbe4:	ldr	r1, [r0, #16]
   1fbe8:	cmp	r1, #0
   1fbec:	beq	1fc0c <__assert_fail@plt+0xdb80>
   1fbf0:	ldm	r0, {r1, r2}
   1fbf4:	cmp	r1, r2
   1fbf8:	bcs	1fc14 <__assert_fail@plt+0xdb88>
   1fbfc:	ldr	r0, [r1], #8
   1fc00:	cmp	r0, #0
   1fc04:	beq	1fbf4 <__assert_fail@plt+0xdb68>
   1fc08:	pop	{fp, pc}
   1fc0c:	mov	r0, #0
   1fc10:	pop	{fp, pc}
   1fc14:	bl	12038 <abort@plt>
   1fc18:	push	{r4, r5, fp, lr}
   1fc1c:	add	fp, sp, #8
   1fc20:	mov	r5, r1
   1fc24:	ldr	r1, [r0, #8]
   1fc28:	ldr	r2, [r0, #24]
   1fc2c:	mov	r4, r0
   1fc30:	mov	r0, r5
   1fc34:	blx	r2
   1fc38:	ldr	r1, [r4, #8]
   1fc3c:	cmp	r0, r1
   1fc40:	bcs	1fca4 <__assert_fail@plt+0xdc18>
   1fc44:	ldr	r1, [r4]
   1fc48:	add	r2, r1, r0, lsl #3
   1fc4c:	ldr	r3, [r2]
   1fc50:	ldr	r2, [r2, #4]
   1fc54:	cmp	r3, r5
   1fc58:	beq	1fc68 <__assert_fail@plt+0xdbdc>
   1fc5c:	cmp	r2, #0
   1fc60:	bne	1fc4c <__assert_fail@plt+0xdbc0>
   1fc64:	b	1fc78 <__assert_fail@plt+0xdbec>
   1fc68:	cmp	r2, #0
   1fc6c:	beq	1fc78 <__assert_fail@plt+0xdbec>
   1fc70:	ldr	r0, [r2]
   1fc74:	pop	{r4, r5, fp, pc}
   1fc78:	ldr	r2, [r4, #4]
   1fc7c:	add	r0, r1, r0, lsl #3
   1fc80:	add	r1, r0, #8
   1fc84:	cmp	r1, r2
   1fc88:	bcs	1fc9c <__assert_fail@plt+0xdc10>
   1fc8c:	ldr	r0, [r1], #8
   1fc90:	cmp	r0, #0
   1fc94:	beq	1fc84 <__assert_fail@plt+0xdbf8>
   1fc98:	pop	{r4, r5, fp, pc}
   1fc9c:	mov	r0, #0
   1fca0:	pop	{r4, r5, fp, pc}
   1fca4:	bl	12038 <abort@plt>
   1fca8:	push	{r4, r5, fp, lr}
   1fcac:	add	fp, sp, #8
   1fcb0:	ldm	r0, {r5, lr}
   1fcb4:	mov	ip, r0
   1fcb8:	mov	r0, #0
   1fcbc:	cmp	r5, lr
   1fcc0:	popcs	{r4, r5, fp, pc}
   1fcc4:	mov	r0, #0
   1fcc8:	b	1fcdc <__assert_fail@plt+0xdc50>
   1fccc:	ldr	lr, [ip, #4]
   1fcd0:	add	r5, r5, #8
   1fcd4:	cmp	r5, lr
   1fcd8:	bcs	1fd14 <__assert_fail@plt+0xdc88>
   1fcdc:	ldr	r3, [r5]
   1fce0:	cmp	r3, #0
   1fce4:	cmpne	r5, #0
   1fce8:	beq	1fcd0 <__assert_fail@plt+0xdc44>
   1fcec:	mov	r3, r5
   1fcf0:	cmp	r0, r2
   1fcf4:	bcs	1fd14 <__assert_fail@plt+0xdc88>
   1fcf8:	ldr	r4, [r3]
   1fcfc:	str	r4, [r1, r0, lsl #2]
   1fd00:	add	r0, r0, #1
   1fd04:	ldr	r3, [r3, #4]
   1fd08:	cmp	r3, #0
   1fd0c:	bne	1fcf0 <__assert_fail@plt+0xdc64>
   1fd10:	b	1fccc <__assert_fail@plt+0xdc40>
   1fd14:	pop	{r4, r5, fp, pc}
   1fd18:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   1fd1c:	add	fp, sp, #24
   1fd20:	mov	r5, r1
   1fd24:	ldr	r4, [r0]
   1fd28:	ldr	r1, [r0, #4]
   1fd2c:	mov	r6, #0
   1fd30:	cmp	r4, r1
   1fd34:	bcs	1fda0 <__assert_fail@plt+0xdd14>
   1fd38:	mov	r9, r2
   1fd3c:	mov	r8, r0
   1fd40:	mov	r6, #0
   1fd44:	b	1fd58 <__assert_fail@plt+0xdccc>
   1fd48:	ldr	r1, [r8, #4]
   1fd4c:	add	r4, r4, #8
   1fd50:	cmp	r4, r1
   1fd54:	bcs	1fda0 <__assert_fail@plt+0xdd14>
   1fd58:	ldr	r0, [r4]
   1fd5c:	cmp	r0, #0
   1fd60:	cmpne	r4, #0
   1fd64:	beq	1fd4c <__assert_fail@plt+0xdcc0>
   1fd68:	mov	r1, r9
   1fd6c:	blx	r5
   1fd70:	cmp	r0, #0
   1fd74:	beq	1fda0 <__assert_fail@plt+0xdd14>
   1fd78:	mov	r7, r4
   1fd7c:	ldr	r7, [r7, #4]
   1fd80:	add	r6, r6, #1
   1fd84:	cmp	r7, #0
   1fd88:	beq	1fd48 <__assert_fail@plt+0xdcbc>
   1fd8c:	ldr	r0, [r7]
   1fd90:	mov	r1, r9
   1fd94:	blx	r5
   1fd98:	cmp	r0, #0
   1fd9c:	bne	1fd7c <__assert_fail@plt+0xdcf0>
   1fda0:	mov	r0, r6
   1fda4:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   1fda8:	ldrb	r2, [r0]
   1fdac:	cmp	r2, #0
   1fdb0:	moveq	r0, #0
   1fdb4:	bxeq	lr
   1fdb8:	add	r3, r0, #1
   1fdbc:	mov	r0, #0
   1fdc0:	rsb	r0, r0, r0, lsl #5
   1fdc4:	uxtab	r0, r0, r2
   1fdc8:	udiv	r2, r0, r1
   1fdcc:	mls	r0, r2, r1, r0
   1fdd0:	ldrb	r2, [r3], #1
   1fdd4:	cmp	r2, #0
   1fdd8:	bne	1fdc0 <__assert_fail@plt+0xdd34>
   1fddc:	bx	lr
   1fde0:	movw	r1, #54920	; 0xd688
   1fde4:	movt	r1, #2
   1fde8:	vld1.32	{d16-d17}, [r1]!
   1fdec:	ldr	r1, [r1]
   1fdf0:	vst1.32	{d16-d17}, [r0]!
   1fdf4:	str	r1, [r0]
   1fdf8:	bx	lr
   1fdfc:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   1fe00:	add	fp, sp, #24
   1fe04:	movw	r9, #36	; 0x24
   1fe08:	cmp	r3, #0
   1fe0c:	movw	r5, #16
   1fe10:	mov	r6, r0
   1fe14:	mov	r0, #40	; 0x28
   1fe18:	mov	r7, r1
   1fe1c:	movt	r9, #2
   1fe20:	movne	r9, r3
   1fe24:	cmp	r2, #0
   1fe28:	movt	r5, #2
   1fe2c:	movne	r5, r2
   1fe30:	bl	28cec <_obstack_memory_used@@Base+0x4400>
   1fe34:	mov	r8, #0
   1fe38:	cmp	r0, #0
   1fe3c:	beq	1fff8 <__assert_fail@plt+0xdf6c>
   1fe40:	mov	r4, r0
   1fe44:	movw	r0, #54920	; 0xd688
   1fe48:	cmp	r7, #0
   1fe4c:	movt	r0, #2
   1fe50:	moveq	r7, r0
   1fe54:	cmp	r7, r0
   1fe58:	str	r7, [r4, #20]
   1fe5c:	beq	1fed8 <__assert_fail@plt+0xde4c>
   1fe60:	vldr	s2, [pc, #408]	; 20000 <__assert_fail@plt+0xdf74>
   1fe64:	vldr	s0, [r7, #8]
   1fe68:	vcmpe.f32	s0, s2
   1fe6c:	vmrs	APSR_nzcv, fpscr
   1fe70:	ble	1ff84 <__assert_fail@plt+0xdef8>
   1fe74:	vldr	s4, [pc, #392]	; 20004 <__assert_fail@plt+0xdf78>
   1fe78:	vcmpe.f32	s0, s4
   1fe7c:	vmrs	APSR_nzcv, fpscr
   1fe80:	bpl	1ff84 <__assert_fail@plt+0xdef8>
   1fe84:	vldr	s4, [pc, #380]	; 20008 <__assert_fail@plt+0xdf7c>
   1fe88:	vldr	s6, [r7, #12]
   1fe8c:	vcmpe.f32	s6, s4
   1fe90:	vmrs	APSR_nzcv, fpscr
   1fe94:	ble	1ff84 <__assert_fail@plt+0xdef8>
   1fe98:	vldr	s4, [r7]
   1fe9c:	vcmpe.f32	s4, #0.0
   1fea0:	vmrs	APSR_nzcv, fpscr
   1fea4:	blt	1ff84 <__assert_fail@plt+0xdef8>
   1fea8:	vadd.f32	s2, s4, s2
   1feac:	vcmpe.f32	s2, s0
   1feb0:	vmrs	APSR_nzcv, fpscr
   1feb4:	bpl	1ff84 <__assert_fail@plt+0xdef8>
   1feb8:	vldr	s0, [r7, #4]
   1febc:	vmov.f32	s4, #112	; 0x3f800000  1.0
   1fec0:	vcmpe.f32	s0, s4
   1fec4:	vmrs	APSR_nzcv, fpscr
   1fec8:	bhi	1ff84 <__assert_fail@plt+0xdef8>
   1fecc:	vcmpe.f32	s2, s0
   1fed0:	vmrs	APSR_nzcv, fpscr
   1fed4:	bpl	1ff84 <__assert_fail@plt+0xdef8>
   1fed8:	ldrb	r0, [r7, #16]
   1fedc:	cmp	r0, #0
   1fee0:	bne	1ff0c <__assert_fail@plt+0xde80>
   1fee4:	vmov	s2, r6
   1fee8:	vldr	s0, [r7, #8]
   1feec:	vldr	s4, [pc, #280]	; 2000c <__assert_fail@plt+0xdf80>
   1fef0:	vcvt.f32.u32	s2, s2
   1fef4:	vdiv.f32	s2, s2, s0
   1fef8:	vcvt.u32.f32	s0, s2
   1fefc:	vcmpe.f32	s2, s4
   1ff00:	vmrs	APSR_nzcv, fpscr
   1ff04:	bge	1ff94 <__assert_fail@plt+0xdf08>
   1ff08:	vmov	r6, s0
   1ff0c:	cmp	r6, #10
   1ff10:	movls	r6, #10
   1ff14:	orr	r0, r6, #1
   1ff18:	cmn	r0, #1
   1ff1c:	beq	1ff94 <__assert_fail@plt+0xdf08>
   1ff20:	ldr	r6, [fp, #8]
   1ff24:	mov	r1, #3
   1ff28:	cmp	r0, #10
   1ff2c:	bcc	1ff64 <__assert_fail@plt+0xded8>
   1ff30:	mov	r1, #3
   1ff34:	mov	r3, #9
   1ff38:	mov	r2, #12
   1ff3c:	udiv	r7, r0, r1
   1ff40:	mls	r7, r7, r1, r0
   1ff44:	cmp	r7, #0
   1ff48:	beq	1ff64 <__assert_fail@plt+0xded8>
   1ff4c:	add	r3, r3, r2
   1ff50:	add	r2, r2, #8
   1ff54:	add	r1, r1, #2
   1ff58:	add	r3, r3, #4
   1ff5c:	cmp	r3, r0
   1ff60:	bcc	1ff3c <__assert_fail@plt+0xdeb0>
   1ff64:	udiv	r2, r0, r1
   1ff68:	mls	r1, r2, r1, r0
   1ff6c:	cmp	r1, #0
   1ff70:	bne	1ff8c <__assert_fail@plt+0xdf00>
   1ff74:	add	r0, r0, #2
   1ff78:	cmn	r0, #1
   1ff7c:	bne	1ff24 <__assert_fail@plt+0xde98>
   1ff80:	b	1ff94 <__assert_fail@plt+0xdf08>
   1ff84:	str	r0, [r4, #20]
   1ff88:	b	1ff9c <__assert_fail@plt+0xdf10>
   1ff8c:	cmp	r0, #536870912	; 0x20000000
   1ff90:	bcc	1ffac <__assert_fail@plt+0xdf20>
   1ff94:	mov	r0, #0
   1ff98:	str	r0, [r4, #8]
   1ff9c:	mov	r0, r4
   1ffa0:	bl	1f89c <__assert_fail@plt+0xd810>
   1ffa4:	mov	r0, r8
   1ffa8:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   1ffac:	cmp	r0, #0
   1ffb0:	str	r0, [r4, #8]
   1ffb4:	beq	1ff9c <__assert_fail@plt+0xdf10>
   1ffb8:	mov	r1, #8
   1ffbc:	bl	28c98 <_obstack_memory_used@@Base+0x43ac>
   1ffc0:	cmp	r0, #0
   1ffc4:	str	r0, [r4]
   1ffc8:	beq	1ff9c <__assert_fail@plt+0xdf10>
   1ffcc:	mov	r1, #0
   1ffd0:	str	r5, [r4, #24]
   1ffd4:	str	r9, [r4, #28]
   1ffd8:	str	r6, [r4, #32]
   1ffdc:	mov	r8, r4
   1ffe0:	str	r1, [r4, #36]	; 0x24
   1ffe4:	str	r1, [r4, #12]
   1ffe8:	str	r1, [r4, #16]
   1ffec:	ldr	r1, [r4, #8]
   1fff0:	add	r0, r0, r1, lsl #3
   1fff4:	str	r0, [r4, #4]
   1fff8:	mov	r0, r8
   1fffc:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   20000:	stclcc	12, cr12, [ip, #820]	; 0x334
   20004:	svccc	0x00666666
   20008:	svccc	0x008ccccd
   2000c:	svcmi	0x00800000
   20010:	ror	r2, r0, #3
   20014:	udiv	r2, r2, r1
   20018:	mul	r1, r2, r1
   2001c:	rsb	r0, r1, r0, ror #3
   20020:	bx	lr
   20024:	sub	r0, r0, r1
   20028:	clz	r0, r0
   2002c:	lsr	r0, r0, #5
   20030:	bx	lr
   20034:	push	{r4, r5, r6, r7, fp, lr}
   20038:	add	fp, sp, #16
   2003c:	mov	r4, r0
   20040:	ldr	r5, [r0]
   20044:	ldr	r0, [r0, #4]
   20048:	cmp	r5, r0
   2004c:	bcs	200f0 <__assert_fail@plt+0xe064>
   20050:	mov	r6, #0
   20054:	b	20070 <__assert_fail@plt+0xdfe4>
   20058:	str	r6, [r5]
   2005c:	str	r6, [r5, #4]
   20060:	ldr	r0, [r4, #4]
   20064:	add	r5, r5, #8
   20068:	cmp	r5, r0
   2006c:	bcs	200f0 <__assert_fail@plt+0xe064>
   20070:	ldr	r1, [r5]
   20074:	cmp	r1, #0
   20078:	beq	20064 <__assert_fail@plt+0xdfd8>
   2007c:	ldr	r1, [r4, #32]
   20080:	ldr	r7, [r5, #4]
   20084:	cmp	r1, #0
   20088:	mov	r0, r1
   2008c:	movwne	r0, #1
   20090:	cmp	r7, #0
   20094:	bne	200d8 <__assert_fail@plt+0xe04c>
   20098:	cmp	r0, #0
   2009c:	beq	20058 <__assert_fail@plt+0xdfcc>
   200a0:	ldr	r0, [r5]
   200a4:	blx	r1
   200a8:	b	20058 <__assert_fail@plt+0xdfcc>
   200ac:	str	r6, [r7]
   200b0:	cmp	r1, #0
   200b4:	ldr	r2, [r7, #4]
   200b8:	ldr	r0, [r4, #36]	; 0x24
   200bc:	str	r0, [r7, #4]
   200c0:	mov	r0, r1
   200c4:	str	r7, [r4, #36]	; 0x24
   200c8:	movwne	r0, #1
   200cc:	cmp	r2, #0
   200d0:	mov	r7, r2
   200d4:	beq	20098 <__assert_fail@plt+0xe00c>
   200d8:	tst	r0, #1
   200dc:	beq	200ac <__assert_fail@plt+0xe020>
   200e0:	ldr	r0, [r7]
   200e4:	blx	r1
   200e8:	ldr	r1, [r4, #32]
   200ec:	b	200ac <__assert_fail@plt+0xe020>
   200f0:	mov	r0, #0
   200f4:	str	r0, [r4, #12]
   200f8:	str	r0, [r4, #16]
   200fc:	pop	{r4, r5, r6, r7, fp, pc}
   20100:	push	{r4, r5, r6, sl, fp, lr}
   20104:	add	fp, sp, #16
   20108:	mov	r4, r0
   2010c:	ldr	r0, [r0, #32]
   20110:	cmp	r0, #0
   20114:	beq	20188 <__assert_fail@plt+0xe0fc>
   20118:	ldr	r0, [r4, #16]
   2011c:	cmp	r0, #0
   20120:	beq	20188 <__assert_fail@plt+0xe0fc>
   20124:	ldr	r5, [r4]
   20128:	ldr	r1, [r4, #4]
   2012c:	cmp	r5, r1
   20130:	bcc	20148 <__assert_fail@plt+0xe0bc>
   20134:	b	20188 <__assert_fail@plt+0xe0fc>
   20138:	ldr	r1, [r4, #4]
   2013c:	add	r5, r5, #8
   20140:	cmp	r5, r1
   20144:	bcs	20188 <__assert_fail@plt+0xe0fc>
   20148:	ldr	r0, [r5]
   2014c:	cmp	r0, #0
   20150:	cmpne	r5, #0
   20154:	beq	2013c <__assert_fail@plt+0xe0b0>
   20158:	ldr	r1, [r4, #32]
   2015c:	blx	r1
   20160:	ldr	r6, [r5, #4]
   20164:	cmp	r6, #0
   20168:	beq	20138 <__assert_fail@plt+0xe0ac>
   2016c:	ldr	r1, [r4, #32]
   20170:	ldr	r0, [r6]
   20174:	blx	r1
   20178:	ldr	r6, [r6, #4]
   2017c:	cmp	r6, #0
   20180:	bne	2016c <__assert_fail@plt+0xe0e0>
   20184:	b	20138 <__assert_fail@plt+0xe0ac>
   20188:	ldr	r5, [r4]
   2018c:	ldr	r1, [r4, #4]
   20190:	cmp	r5, r1
   20194:	bcc	201a8 <__assert_fail@plt+0xe11c>
   20198:	b	201d0 <__assert_fail@plt+0xe144>
   2019c:	add	r5, r5, #8
   201a0:	cmp	r5, r1
   201a4:	bcs	201d0 <__assert_fail@plt+0xe144>
   201a8:	ldr	r0, [r5, #4]
   201ac:	cmp	r0, #0
   201b0:	beq	2019c <__assert_fail@plt+0xe110>
   201b4:	ldr	r6, [r0, #4]
   201b8:	bl	1f89c <__assert_fail@plt+0xd810>
   201bc:	cmp	r6, #0
   201c0:	mov	r0, r6
   201c4:	bne	201b4 <__assert_fail@plt+0xe128>
   201c8:	ldr	r1, [r4, #4]
   201cc:	b	2019c <__assert_fail@plt+0xe110>
   201d0:	ldr	r0, [r4, #36]	; 0x24
   201d4:	cmp	r0, #0
   201d8:	beq	201f0 <__assert_fail@plt+0xe164>
   201dc:	ldr	r5, [r0, #4]
   201e0:	bl	1f89c <__assert_fail@plt+0xd810>
   201e4:	cmp	r5, #0
   201e8:	mov	r0, r5
   201ec:	bne	201dc <__assert_fail@plt+0xe150>
   201f0:	ldr	r0, [r4]
   201f4:	bl	1f89c <__assert_fail@plt+0xd810>
   201f8:	mov	r0, r4
   201fc:	pop	{r4, r5, r6, sl, fp, lr}
   20200:	b	1f89c <__assert_fail@plt+0xd810>
   20204:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   20208:	add	fp, sp, #28
   2020c:	sub	sp, sp, #44	; 0x2c
   20210:	mov	r7, r0
   20214:	mov	r4, r0
   20218:	ldr	r0, [r7, #20]!
   2021c:	ldrb	r2, [r0, #16]
   20220:	cmp	r2, #0
   20224:	bne	20254 <__assert_fail@plt+0xe1c8>
   20228:	vmov	s2, r1
   2022c:	vldr	s0, [r0, #8]
   20230:	vldr	s4, [pc, #564]	; 2046c <__assert_fail@plt+0xe3e0>
   20234:	mov	r5, #0
   20238:	vcvt.f32.u32	s2, s2
   2023c:	vdiv.f32	s2, s2, s0
   20240:	vcvt.u32.f32	s0, s2
   20244:	vcmpe.f32	s2, s4
   20248:	vmrs	APSR_nzcv, fpscr
   2024c:	bge	2045c <__assert_fail@plt+0xe3d0>
   20250:	vmov	r1, s0
   20254:	cmp	r1, #10
   20258:	mov	r5, #0
   2025c:	movls	r1, #10
   20260:	orr	r6, r1, #1
   20264:	cmn	r6, #1
   20268:	beq	2045c <__assert_fail@plt+0xe3d0>
   2026c:	mov	r0, #3
   20270:	cmp	r6, #10
   20274:	bcc	202ac <__assert_fail@plt+0xe220>
   20278:	mov	r0, #3
   2027c:	mov	r2, #9
   20280:	mov	r1, #12
   20284:	udiv	r3, r6, r0
   20288:	mls	r3, r3, r0, r6
   2028c:	cmp	r3, #0
   20290:	beq	202ac <__assert_fail@plt+0xe220>
   20294:	add	r2, r2, r1
   20298:	add	r1, r1, #8
   2029c:	add	r0, r0, #2
   202a0:	add	r2, r2, #4
   202a4:	cmp	r2, r6
   202a8:	bcc	20284 <__assert_fail@plt+0xe1f8>
   202ac:	udiv	r1, r6, r0
   202b0:	mls	r0, r1, r0, r6
   202b4:	cmp	r0, #0
   202b8:	bne	202cc <__assert_fail@plt+0xe240>
   202bc:	add	r6, r6, #2
   202c0:	cmn	r6, #1
   202c4:	bne	2026c <__assert_fail@plt+0xe1e0>
   202c8:	b	2045c <__assert_fail@plt+0xe3d0>
   202cc:	sub	r0, r6, #1
   202d0:	cmn	r0, #-536870910	; 0xe0000002
   202d4:	bhi	2045c <__assert_fail@plt+0xe3d0>
   202d8:	ldr	r0, [r4, #8]
   202dc:	cmp	r6, r0
   202e0:	bne	202ec <__assert_fail@plt+0xe260>
   202e4:	mov	r5, #1
   202e8:	b	2045c <__assert_fail@plt+0xe3d0>
   202ec:	mov	r0, r6
   202f0:	mov	r1, #8
   202f4:	bl	28c98 <_obstack_memory_used@@Base+0x43ac>
   202f8:	cmp	r0, #0
   202fc:	str	r0, [sp, #4]
   20300:	beq	2045c <__assert_fail@plt+0xe3d0>
   20304:	add	r0, r0, r6, lsl #3
   20308:	mov	r1, #0
   2030c:	add	r5, sp, #4
   20310:	mov	sl, r4
   20314:	mov	r2, #0
   20318:	str	r1, [sp, #20]
   2031c:	str	r1, [sp, #16]
   20320:	str	r6, [sp, #12]
   20324:	mov	r1, r4
   20328:	str	r0, [sp, #8]
   2032c:	add	r0, r5, #20
   20330:	vld1.32	{d16-d17}, [r7]
   20334:	vst1.32	{d16-d17}, [r0]
   20338:	ldr	r0, [sl, #36]!	; 0x24
   2033c:	str	r0, [sp, #40]	; 0x28
   20340:	mov	r0, r5
   20344:	bl	20470 <__assert_fail@plt+0xe3e4>
   20348:	cmp	r0, #0
   2034c:	beq	20374 <__assert_fail@plt+0xe2e8>
   20350:	ldr	r0, [r4]
   20354:	bl	1f89c <__assert_fail@plt+0xd810>
   20358:	mov	r0, #36	; 0x24
   2035c:	vld1.32	{d16-d17}, [r5], r0
   20360:	vst1.32	{d16-d17}, [r4], r0
   20364:	ldr	r0, [r5]
   20368:	mov	r5, #1
   2036c:	str	r0, [r4]
   20370:	b	2045c <__assert_fail@plt+0xe3d0>
   20374:	ldr	r0, [sp, #40]	; 0x28
   20378:	str	r0, [sl]
   2037c:	ldr	r0, [sp, #8]
   20380:	ldr	r8, [sp, #4]
   20384:	cmp	r8, r0
   20388:	str	r0, [sp]
   2038c:	bcs	20438 <__assert_fail@plt+0xe3ac>
   20390:	mov	r9, #0
   20394:	b	203ac <__assert_fail@plt+0xe320>
   20398:	str	r9, [r8, #4]
   2039c:	ldr	r0, [sp]
   203a0:	add	r8, r8, #8
   203a4:	cmp	r8, r0
   203a8:	bcs	20438 <__assert_fail@plt+0xe3ac>
   203ac:	ldr	r0, [r8]
   203b0:	cmp	r0, #0
   203b4:	beq	2039c <__assert_fail@plt+0xe310>
   203b8:	ldr	r6, [r8, #4]
   203bc:	cmp	r6, #0
   203c0:	beq	20398 <__assert_fail@plt+0xe30c>
   203c4:	ldr	r1, [r4, #8]
   203c8:	b	203ec <__assert_fail@plt+0xe360>
   203cc:	add	r0, r3, r0, lsl #3
   203d0:	add	r0, r0, #4
   203d4:	ldr	r3, [r0]
   203d8:	cmp	r2, #0
   203dc:	str	r3, [r6, #4]
   203e0:	str	r6, [r0]
   203e4:	mov	r6, r2
   203e8:	beq	20398 <__assert_fail@plt+0xe30c>
   203ec:	ldr	r5, [r6]
   203f0:	ldr	r2, [r4, #24]
   203f4:	mov	r0, r5
   203f8:	blx	r2
   203fc:	ldr	r1, [r4, #8]
   20400:	cmp	r0, r1
   20404:	bcs	20468 <__assert_fail@plt+0xe3dc>
   20408:	ldr	r3, [r4]
   2040c:	ldr	r2, [r6, #4]
   20410:	ldr	r7, [r3, r0, lsl #3]
   20414:	cmp	r7, #0
   20418:	bne	203cc <__assert_fail@plt+0xe340>
   2041c:	str	r5, [r3, r0, lsl #3]
   20420:	ldr	r0, [r4, #12]
   20424:	add	r0, r0, #1
   20428:	str	r0, [r4, #12]
   2042c:	mov	r0, sl
   20430:	str	r9, [r6]
   20434:	b	203d4 <__assert_fail@plt+0xe348>
   20438:	add	r1, sp, #4
   2043c:	mov	r0, r4
   20440:	mov	r2, #0
   20444:	mov	r5, #0
   20448:	bl	20470 <__assert_fail@plt+0xe3e4>
   2044c:	cmp	r0, #0
   20450:	beq	20468 <__assert_fail@plt+0xe3dc>
   20454:	ldr	r0, [sp, #4]
   20458:	bl	1f89c <__assert_fail@plt+0xd810>
   2045c:	mov	r0, r5
   20460:	sub	sp, fp, #28
   20464:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   20468:	bl	12038 <abort@plt>
   2046c:	svcmi	0x00800000
   20470:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   20474:	add	fp, sp, #28
   20478:	sub	sp, sp, #12
   2047c:	ldr	sl, [r1]
   20480:	str	r1, [sp, #8]
   20484:	ldr	r1, [r1, #4]
   20488:	mov	r7, r0
   2048c:	mov	r0, #1
   20490:	str	r2, [sp, #4]
   20494:	cmp	sl, r1
   20498:	bcs	205f4 <__assert_fail@plt+0xe568>
   2049c:	add	r8, r7, #36	; 0x24
   204a0:	mov	r9, #0
   204a4:	b	204e0 <__assert_fail@plt+0xe454>
   204a8:	str	r4, [r6, r5, lsl #3]
   204ac:	ldr	r0, [r7, #12]
   204b0:	add	r0, r0, #1
   204b4:	str	r0, [r7, #12]
   204b8:	ldr	r1, [sp, #8]
   204bc:	str	r9, [sl]
   204c0:	ldr	r0, [r1, #12]
   204c4:	sub	r0, r0, #1
   204c8:	str	r0, [r1, #12]
   204cc:	ldr	r0, [sp, #8]
   204d0:	add	sl, sl, #8
   204d4:	ldr	r0, [r0, #4]
   204d8:	cmp	sl, r0
   204dc:	bcs	205f0 <__assert_fail@plt+0xe564>
   204e0:	ldr	r4, [sl]
   204e4:	cmp	r4, #0
   204e8:	beq	204cc <__assert_fail@plt+0xe440>
   204ec:	ldr	r5, [sl, #4]
   204f0:	cmp	r5, #0
   204f4:	beq	20570 <__assert_fail@plt+0xe4e4>
   204f8:	ldr	r1, [r7, #8]
   204fc:	b	20530 <__assert_fail@plt+0xe4a4>
   20500:	str	r4, [r3, r0, lsl #3]
   20504:	ldr	r0, [r7, #12]
   20508:	add	r0, r0, #1
   2050c:	str	r0, [r7, #12]
   20510:	mov	r0, r8
   20514:	str	r9, [r5]
   20518:	ldr	r3, [r0]
   2051c:	cmp	r2, #0
   20520:	str	r3, [r5, #4]
   20524:	str	r5, [r0]
   20528:	mov	r5, r2
   2052c:	beq	2056c <__assert_fail@plt+0xe4e0>
   20530:	ldr	r4, [r5]
   20534:	ldr	r2, [r7, #24]
   20538:	mov	r0, r4
   2053c:	blx	r2
   20540:	ldr	r1, [r7, #8]
   20544:	cmp	r0, r1
   20548:	bcs	20608 <__assert_fail@plt+0xe57c>
   2054c:	ldr	r3, [r7]
   20550:	ldr	r2, [r5, #4]
   20554:	ldr	r6, [r3, r0, lsl #3]
   20558:	cmp	r6, #0
   2055c:	beq	20500 <__assert_fail@plt+0xe474>
   20560:	add	r0, r3, r0, lsl #3
   20564:	add	r0, r0, #4
   20568:	b	20518 <__assert_fail@plt+0xe48c>
   2056c:	ldr	r4, [sl]
   20570:	ldr	r0, [sp, #4]
   20574:	str	r9, [sl, #4]
   20578:	cmp	r0, #0
   2057c:	bne	204cc <__assert_fail@plt+0xe440>
   20580:	ldr	r1, [r7, #8]
   20584:	ldr	r2, [r7, #24]
   20588:	mov	r0, r4
   2058c:	blx	r2
   20590:	mov	r5, r0
   20594:	ldr	r0, [r7, #8]
   20598:	cmp	r5, r0
   2059c:	bcs	20608 <__assert_fail@plt+0xe57c>
   205a0:	ldr	r6, [r7]
   205a4:	ldr	r0, [r6, r5, lsl #3]
   205a8:	cmp	r0, #0
   205ac:	beq	204a8 <__assert_fail@plt+0xe41c>
   205b0:	ldr	r0, [r8]
   205b4:	cmp	r0, #0
   205b8:	beq	205c8 <__assert_fail@plt+0xe53c>
   205bc:	ldr	r1, [r0, #4]
   205c0:	str	r1, [r8]
   205c4:	b	205d8 <__assert_fail@plt+0xe54c>
   205c8:	mov	r0, #8
   205cc:	bl	28cec <_obstack_memory_used@@Base+0x4400>
   205d0:	cmp	r0, #0
   205d4:	beq	205fc <__assert_fail@plt+0xe570>
   205d8:	add	r1, r6, r5, lsl #3
   205dc:	str	r4, [r0]
   205e0:	ldr	r2, [r1, #4]
   205e4:	str	r2, [r0, #4]
   205e8:	str	r0, [r1, #4]
   205ec:	b	204b8 <__assert_fail@plt+0xe42c>
   205f0:	mov	r0, #1
   205f4:	sub	sp, fp, #28
   205f8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   205fc:	mov	r0, #0
   20600:	sub	sp, fp, #28
   20604:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   20608:	bl	12038 <abort@plt>
   2060c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   20610:	add	fp, sp, #28
   20614:	sub	sp, sp, #4
   20618:	cmp	r1, #0
   2061c:	beq	20938 <__assert_fail@plt+0xe8ac>
   20620:	mov	r8, r2
   20624:	mov	sl, r1
   20628:	ldr	r1, [r0, #8]
   2062c:	ldr	r2, [r0, #24]
   20630:	mov	r4, r0
   20634:	mov	r0, sl
   20638:	blx	r2
   2063c:	mov	r7, r0
   20640:	ldr	r0, [r4, #8]
   20644:	cmp	r7, r0
   20648:	bcs	20938 <__assert_fail@plt+0xe8ac>
   2064c:	ldr	r5, [r4]
   20650:	mov	r9, r5
   20654:	ldr	r1, [r9, r7, lsl #3]!
   20658:	cmp	r1, #0
   2065c:	beq	206e8 <__assert_fail@plt+0xe65c>
   20660:	cmp	r1, sl
   20664:	beq	20690 <__assert_fail@plt+0xe604>
   20668:	ldr	r2, [r4, #28]
   2066c:	mov	r0, sl
   20670:	blx	r2
   20674:	cmp	r0, #0
   20678:	mov	r6, r9
   2067c:	beq	206a4 <__assert_fail@plt+0xe618>
   20680:	ldr	r0, [r6]
   20684:	cmp	r0, #0
   20688:	bne	20694 <__assert_fail@plt+0xe608>
   2068c:	b	206e8 <__assert_fail@plt+0xe65c>
   20690:	mov	r0, sl
   20694:	cmp	r8, #0
   20698:	mov	r7, #0
   2069c:	strne	r0, [r8]
   206a0:	b	208d4 <__assert_fail@plt+0xe848>
   206a4:	add	r6, r5, r7, lsl #3
   206a8:	ldr	r0, [r6, #4]!
   206ac:	cmp	r0, #0
   206b0:	beq	206e8 <__assert_fail@plt+0xe65c>
   206b4:	ldr	r1, [r0]
   206b8:	cmp	r1, sl
   206bc:	beq	206dc <__assert_fail@plt+0xe650>
   206c0:	ldr	r2, [r4, #28]
   206c4:	mov	r0, sl
   206c8:	blx	r2
   206cc:	ldr	r6, [r6]
   206d0:	cmp	r0, #0
   206d4:	beq	206a8 <__assert_fail@plt+0xe61c>
   206d8:	b	20680 <__assert_fail@plt+0xe5f4>
   206dc:	mov	r0, sl
   206e0:	cmp	r0, #0
   206e4:	bne	20694 <__assert_fail@plt+0xe608>
   206e8:	vldr	s0, [r4, #8]
   206ec:	vldr	s2, [r4, #12]
   206f0:	ldr	r0, [r4, #20]
   206f4:	vcvt.f32.u32	s0, s0
   206f8:	vcvt.f32.u32	s4, s2
   206fc:	vldr	s2, [r0, #8]
   20700:	vmul.f32	s6, s2, s0
   20704:	vcmpe.f32	s6, s4
   20708:	vmrs	APSR_nzcv, fpscr
   2070c:	bpl	20860 <__assert_fail@plt+0xe7d4>
   20710:	movw	r1, #54920	; 0xd688
   20714:	movt	r1, #2
   20718:	cmp	r0, r1
   2071c:	beq	207a8 <__assert_fail@plt+0xe71c>
   20720:	vldr	s6, [pc, #532]	; 2093c <__assert_fail@plt+0xe8b0>
   20724:	vcmpe.f32	s2, s6
   20728:	vmrs	APSR_nzcv, fpscr
   2072c:	ble	20794 <__assert_fail@plt+0xe708>
   20730:	vldr	s8, [pc, #520]	; 20940 <__assert_fail@plt+0xe8b4>
   20734:	vcmpe.f32	s2, s8
   20738:	vmrs	APSR_nzcv, fpscr
   2073c:	bpl	20794 <__assert_fail@plt+0xe708>
   20740:	vldr	s8, [pc, #508]	; 20944 <__assert_fail@plt+0xe8b8>
   20744:	vldr	s10, [r0, #12]
   20748:	vcmpe.f32	s10, s8
   2074c:	vmrs	APSR_nzcv, fpscr
   20750:	ble	20794 <__assert_fail@plt+0xe708>
   20754:	vldr	s8, [r0]
   20758:	vcmpe.f32	s8, #0.0
   2075c:	vmrs	APSR_nzcv, fpscr
   20760:	blt	20794 <__assert_fail@plt+0xe708>
   20764:	vadd.f32	s6, s8, s6
   20768:	vcmpe.f32	s6, s2
   2076c:	vmrs	APSR_nzcv, fpscr
   20770:	bpl	20794 <__assert_fail@plt+0xe708>
   20774:	vldr	s8, [r0, #4]
   20778:	vmov.f32	s10, #112	; 0x3f800000  1.0
   2077c:	vcmpe.f32	s8, s10
   20780:	vmrs	APSR_nzcv, fpscr
   20784:	bhi	20794 <__assert_fail@plt+0xe708>
   20788:	vcmpe.f32	s6, s8
   2078c:	vmrs	APSR_nzcv, fpscr
   20790:	bmi	207ac <__assert_fail@plt+0xe720>
   20794:	vldr	s2, [pc, #428]	; 20948 <__assert_fail@plt+0xe8bc>
   20798:	movw	r0, #54920	; 0xd688
   2079c:	movt	r0, #2
   207a0:	str	r0, [r4, #20]
   207a4:	b	207ac <__assert_fail@plt+0xe720>
   207a8:	mov	r0, r1
   207ac:	vmul.f32	s6, s2, s0
   207b0:	vcmpe.f32	s6, s4
   207b4:	vmrs	APSR_nzcv, fpscr
   207b8:	bpl	20860 <__assert_fail@plt+0xe7d4>
   207bc:	vldr	s4, [r0, #12]
   207c0:	ldrb	r0, [r0, #16]
   207c4:	mvn	r7, #0
   207c8:	cmp	r0, #0
   207cc:	vmul.f32	s0, s4, s0
   207d0:	vldr	s4, [pc, #372]	; 2094c <__assert_fail@plt+0xe8c0>
   207d4:	vmul.f32	s2, s2, s0
   207d8:	vseleq.f32	s0, s2, s0
   207dc:	vcmpe.f32	s0, s4
   207e0:	vmrs	APSR_nzcv, fpscr
   207e4:	bge	208d4 <__assert_fail@plt+0xe848>
   207e8:	vcvt.u32.f32	s0, s0
   207ec:	mov	r0, r4
   207f0:	vmov	r1, s0
   207f4:	bl	20204 <__assert_fail@plt+0xe178>
   207f8:	cmp	r0, #0
   207fc:	beq	208d4 <__assert_fail@plt+0xe848>
   20800:	ldr	r1, [r4, #8]
   20804:	ldr	r2, [r4, #24]
   20808:	mov	r0, sl
   2080c:	blx	r2
   20810:	mov	r7, r0
   20814:	ldr	r0, [r4, #8]
   20818:	cmp	r7, r0
   2081c:	bcs	20938 <__assert_fail@plt+0xe8ac>
   20820:	ldr	r5, [r4]
   20824:	mov	r9, r5
   20828:	ldr	r1, [r9, r7, lsl #3]!
   2082c:	cmp	r1, #0
   20830:	beq	20860 <__assert_fail@plt+0xe7d4>
   20834:	cmp	r1, sl
   20838:	mov	r0, sl
   2083c:	beq	20858 <__assert_fail@plt+0xe7cc>
   20840:	ldr	r2, [r4, #28]
   20844:	mov	r0, sl
   20848:	blx	r2
   2084c:	cmp	r0, #0
   20850:	beq	208e8 <__assert_fail@plt+0xe85c>
   20854:	ldr	r0, [r9]
   20858:	cmp	r0, #0
   2085c:	bne	20938 <__assert_fail@plt+0xe8ac>
   20860:	ldr	r0, [r9]
   20864:	cmp	r0, #0
   20868:	beq	20884 <__assert_fail@plt+0xe7f8>
   2086c:	ldr	r0, [r4, #36]	; 0x24
   20870:	cmp	r0, #0
   20874:	beq	208a4 <__assert_fail@plt+0xe818>
   20878:	ldr	r1, [r0, #4]
   2087c:	str	r1, [r4, #36]	; 0x24
   20880:	b	208b4 <__assert_fail@plt+0xe828>
   20884:	str	sl, [r9]
   20888:	ldr	r0, [r4, #12]
   2088c:	ldr	r1, [r4, #16]
   20890:	add	r0, r0, #1
   20894:	add	r1, r1, #1
   20898:	str	r0, [r4, #12]
   2089c:	str	r1, [r4, #16]
   208a0:	b	208d0 <__assert_fail@plt+0xe844>
   208a4:	mov	r0, #8
   208a8:	bl	28cec <_obstack_memory_used@@Base+0x4400>
   208ac:	cmp	r0, #0
   208b0:	beq	208e0 <__assert_fail@plt+0xe854>
   208b4:	str	sl, [r0]
   208b8:	ldr	r1, [r9, #4]
   208bc:	str	r1, [r0, #4]
   208c0:	str	r0, [r9, #4]
   208c4:	ldr	r0, [r4, #16]
   208c8:	add	r0, r0, #1
   208cc:	str	r0, [r4, #16]
   208d0:	mov	r7, #1
   208d4:	mov	r0, r7
   208d8:	sub	sp, fp, #28
   208dc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   208e0:	mvn	r7, #0
   208e4:	b	208d4 <__assert_fail@plt+0xe848>
   208e8:	add	r6, r5, r7, lsl #3
   208ec:	ldr	r0, [r6, #4]!
   208f0:	cmp	r0, #0
   208f4:	beq	20860 <__assert_fail@plt+0xe7d4>
   208f8:	ldr	r1, [r0]
   208fc:	cmp	r1, sl
   20900:	beq	2092c <__assert_fail@plt+0xe8a0>
   20904:	ldr	r2, [r4, #28]
   20908:	mov	r0, sl
   2090c:	blx	r2
   20910:	ldr	r6, [r6]
   20914:	cmp	r0, #0
   20918:	beq	208ec <__assert_fail@plt+0xe860>
   2091c:	ldr	r0, [r6]
   20920:	cmp	r0, #0
   20924:	beq	20860 <__assert_fail@plt+0xe7d4>
   20928:	b	20938 <__assert_fail@plt+0xe8ac>
   2092c:	mov	r0, sl
   20930:	cmp	r0, #0
   20934:	beq	20860 <__assert_fail@plt+0xe7d4>
   20938:	bl	12038 <abort@plt>
   2093c:	stclcc	12, cr12, [ip, #820]	; 0x334
   20940:	svccc	0x00666666
   20944:	svccc	0x008ccccd
   20948:	svccc	0x004ccccd
   2094c:	svcmi	0x00800000
   20950:	push	{r4, sl, fp, lr}
   20954:	add	fp, sp, #8
   20958:	sub	sp, sp, #8
   2095c:	add	r2, sp, #4
   20960:	mov	r4, r1
   20964:	bl	2060c <__assert_fail@plt+0xe580>
   20968:	cmn	r0, #1
   2096c:	beq	20980 <__assert_fail@plt+0xe8f4>
   20970:	ldr	r1, [sp, #4]
   20974:	cmp	r0, #0
   20978:	moveq	r4, r1
   2097c:	b	20984 <__assert_fail@plt+0xe8f8>
   20980:	mov	r4, #0
   20984:	mov	r0, r4
   20988:	sub	sp, fp, #8
   2098c:	pop	{r4, sl, fp, pc}
   20990:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   20994:	add	fp, sp, #24
   20998:	mov	r9, r1
   2099c:	ldr	r1, [r0, #8]
   209a0:	ldr	r2, [r0, #24]
   209a4:	mov	r5, r0
   209a8:	mov	r0, r9
   209ac:	blx	r2
   209b0:	mov	r7, r0
   209b4:	ldr	r0, [r5, #8]
   209b8:	cmp	r7, r0
   209bc:	bcs	20c20 <__assert_fail@plt+0xeb94>
   209c0:	ldr	r6, [r5]
   209c4:	mov	r8, #0
   209c8:	mov	r4, r6
   209cc:	ldr	r1, [r4, r7, lsl #3]!
   209d0:	cmp	r1, #0
   209d4:	beq	20a88 <__assert_fail@plt+0xe9fc>
   209d8:	cmp	r1, r9
   209dc:	beq	209f8 <__assert_fail@plt+0xe96c>
   209e0:	ldr	r2, [r5, #28]
   209e4:	mov	r0, r9
   209e8:	blx	r2
   209ec:	cmp	r0, #0
   209f0:	beq	20a30 <__assert_fail@plt+0xe9a4>
   209f4:	ldr	r9, [r4]
   209f8:	add	r0, r6, r7, lsl #3
   209fc:	ldr	r0, [r0, #4]
   20a00:	cmp	r0, #0
   20a04:	beq	20a78 <__assert_fail@plt+0xe9ec>
   20a08:	ldm	r0, {r1, r2}
   20a0c:	stm	r4, {r1, r2}
   20a10:	mov	r1, #0
   20a14:	str	r1, [r0]
   20a18:	ldr	r1, [r5, #36]	; 0x24
   20a1c:	str	r1, [r0, #4]
   20a20:	str	r0, [r5, #36]	; 0x24
   20a24:	cmp	r9, #0
   20a28:	bne	20ac0 <__assert_fail@plt+0xea34>
   20a2c:	b	20a88 <__assert_fail@plt+0xe9fc>
   20a30:	add	r7, r6, r7, lsl #3
   20a34:	ldr	r0, [r7, #4]!
   20a38:	cmp	r0, #0
   20a3c:	beq	20a88 <__assert_fail@plt+0xe9fc>
   20a40:	ldr	r1, [r0]
   20a44:	cmp	r1, r9
   20a48:	beq	20a90 <__assert_fail@plt+0xea04>
   20a4c:	ldr	r2, [r5, #28]
   20a50:	mov	r0, r9
   20a54:	blx	r2
   20a58:	ldr	r1, [r7]
   20a5c:	cmp	r0, #0
   20a60:	bne	20a98 <__assert_fail@plt+0xea0c>
   20a64:	ldr	r0, [r1, #4]!
   20a68:	mov	r7, r1
   20a6c:	cmp	r0, #0
   20a70:	bne	20a40 <__assert_fail@plt+0xe9b4>
   20a74:	b	20a88 <__assert_fail@plt+0xe9fc>
   20a78:	mov	r0, #0
   20a7c:	str	r0, [r4]
   20a80:	cmp	r9, #0
   20a84:	bne	20ac0 <__assert_fail@plt+0xea34>
   20a88:	mov	r0, r8
   20a8c:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   20a90:	mov	r1, r0
   20a94:	b	20a9c <__assert_fail@plt+0xea10>
   20a98:	ldr	r9, [r1]
   20a9c:	ldr	r0, [r1, #4]
   20aa0:	str	r0, [r7]
   20aa4:	mov	r0, #0
   20aa8:	str	r0, [r1]
   20aac:	ldr	r0, [r5, #36]	; 0x24
   20ab0:	str	r0, [r1, #4]
   20ab4:	str	r1, [r5, #36]	; 0x24
   20ab8:	cmp	r9, #0
   20abc:	beq	20a88 <__assert_fail@plt+0xe9fc>
   20ac0:	ldr	r0, [r5, #16]
   20ac4:	sub	r0, r0, #1
   20ac8:	str	r0, [r5, #16]
   20acc:	ldr	r0, [r4]
   20ad0:	cmp	r0, #0
   20ad4:	bne	20c14 <__assert_fail@plt+0xeb88>
   20ad8:	ldr	r0, [r5, #12]
   20adc:	vldr	s0, [r5, #8]
   20ae0:	sub	r1, r0, #1
   20ae4:	str	r1, [r5, #12]
   20ae8:	vmov	s2, r1
   20aec:	ldr	r0, [r5, #20]
   20af0:	vcvt.f32.u32	s0, s0
   20af4:	vcvt.f32.u32	s2, s2
   20af8:	vldr	s4, [r0]
   20afc:	vmul.f32	s6, s4, s0
   20b00:	vcmpe.f32	s6, s2
   20b04:	vmrs	APSR_nzcv, fpscr
   20b08:	ble	20c14 <__assert_fail@plt+0xeb88>
   20b0c:	movw	r1, #54920	; 0xd688
   20b10:	movt	r1, #2
   20b14:	cmp	r0, r1
   20b18:	beq	20ba4 <__assert_fail@plt+0xeb18>
   20b1c:	vldr	s8, [pc, #256]	; 20c24 <__assert_fail@plt+0xeb98>
   20b20:	vldr	s6, [r0, #8]
   20b24:	vcmpe.f32	s6, s8
   20b28:	vmrs	APSR_nzcv, fpscr
   20b2c:	ble	20b90 <__assert_fail@plt+0xeb04>
   20b30:	vldr	s10, [pc, #240]	; 20c28 <__assert_fail@plt+0xeb9c>
   20b34:	vcmpe.f32	s6, s10
   20b38:	vmrs	APSR_nzcv, fpscr
   20b3c:	bpl	20b90 <__assert_fail@plt+0xeb04>
   20b40:	vcmpe.f32	s4, #0.0
   20b44:	vmrs	APSR_nzcv, fpscr
   20b48:	blt	20b90 <__assert_fail@plt+0xeb04>
   20b4c:	vldr	s10, [r0, #12]
   20b50:	vldr	s12, [pc, #212]	; 20c2c <__assert_fail@plt+0xeba0>
   20b54:	vcmpe.f32	s10, s12
   20b58:	vmrs	APSR_nzcv, fpscr
   20b5c:	ble	20b90 <__assert_fail@plt+0xeb04>
   20b60:	vadd.f32	s8, s4, s8
   20b64:	vcmpe.f32	s8, s6
   20b68:	vmrs	APSR_nzcv, fpscr
   20b6c:	bpl	20b90 <__assert_fail@plt+0xeb04>
   20b70:	vldr	s6, [r0, #4]
   20b74:	vmov.f32	s10, #112	; 0x3f800000  1.0
   20b78:	vcmpe.f32	s6, s10
   20b7c:	vmrs	APSR_nzcv, fpscr
   20b80:	bhi	20b90 <__assert_fail@plt+0xeb04>
   20b84:	vcmpe.f32	s8, s6
   20b88:	vmrs	APSR_nzcv, fpscr
   20b8c:	bmi	20ba8 <__assert_fail@plt+0xeb1c>
   20b90:	vldr	s4, [pc, #152]	; 20c30 <__assert_fail@plt+0xeba4>
   20b94:	movw	r0, #54920	; 0xd688
   20b98:	movt	r0, #2
   20b9c:	str	r0, [r5, #20]
   20ba0:	b	20ba8 <__assert_fail@plt+0xeb1c>
   20ba4:	mov	r0, r1
   20ba8:	vmul.f32	s4, s4, s0
   20bac:	vcmpe.f32	s4, s2
   20bb0:	vmrs	APSR_nzcv, fpscr
   20bb4:	ble	20c14 <__assert_fail@plt+0xeb88>
   20bb8:	vldr	s2, [r0, #4]
   20bbc:	ldrb	r1, [r0, #16]
   20bc0:	cmp	r1, #0
   20bc4:	vmul.f32	s0, s2, s0
   20bc8:	bne	20bd4 <__assert_fail@plt+0xeb48>
   20bcc:	vldr	s2, [r0, #8]
   20bd0:	vmul.f32	s0, s0, s2
   20bd4:	vcvt.u32.f32	s0, s0
   20bd8:	mov	r0, r5
   20bdc:	vmov	r1, s0
   20be0:	bl	20204 <__assert_fail@plt+0xe178>
   20be4:	cmp	r0, #0
   20be8:	bne	20c14 <__assert_fail@plt+0xeb88>
   20bec:	ldr	r0, [r5, #36]	; 0x24
   20bf0:	cmp	r0, #0
   20bf4:	beq	20c0c <__assert_fail@plt+0xeb80>
   20bf8:	ldr	r4, [r0, #4]
   20bfc:	bl	1f89c <__assert_fail@plt+0xd810>
   20c00:	cmp	r4, #0
   20c04:	mov	r0, r4
   20c08:	bne	20bf8 <__assert_fail@plt+0xeb6c>
   20c0c:	mov	r0, #0
   20c10:	str	r0, [r5, #36]	; 0x24
   20c14:	mov	r8, r9
   20c18:	mov	r0, r8
   20c1c:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   20c20:	bl	12038 <abort@plt>
   20c24:	stclcc	12, cr12, [ip, #820]	; 0x334
   20c28:	svccc	0x00666666
   20c2c:	svccc	0x008ccccd
   20c30:	andeq	r0, r0, r0
   20c34:	b	20990 <__assert_fail@plt+0xe904>
   20c38:	push	{r4, r5, fp, lr}
   20c3c:	add	fp, sp, #8
   20c40:	mov	r5, r0
   20c44:	ldr	r0, [r0]
   20c48:	mov	r4, r1
   20c4c:	bl	28f94 <_obstack_memory_used@@Base+0x46a8>
   20c50:	ldrd	r2, [r5, #8]
   20c54:	eor	r0, r2, r0
   20c58:	mov	r1, r3
   20c5c:	mov	r2, r4
   20c60:	mov	r3, #0
   20c64:	bl	294d8 <_obstack_memory_used@@Base+0x4bec>
   20c68:	mov	r0, r2
   20c6c:	pop	{r4, r5, fp, pc}
   20c70:	push	{r4, r5, fp, lr}
   20c74:	add	fp, sp, #8
   20c78:	mov	lr, r1
   20c7c:	mov	r2, r0
   20c80:	ldr	r3, [r2, #8]!
   20c84:	ldr	ip, [lr, #8]!
   20c88:	ldr	r4, [r2, #4]
   20c8c:	eor	ip, r3, ip
   20c90:	ldr	r3, [lr, #4]
   20c94:	eor	r3, r4, r3
   20c98:	orrs	r3, ip, r3
   20c9c:	mov	ip, #0
   20ca0:	bne	20cd0 <__assert_fail@plt+0xec44>
   20ca4:	ldrd	r4, [lr, #8]
   20ca8:	ldrd	r2, [r2, #8]
   20cac:	eor	r3, r3, r5
   20cb0:	eor	r2, r2, r4
   20cb4:	orrs	r2, r2, r3
   20cb8:	bne	20cd0 <__assert_fail@plt+0xec44>
   20cbc:	ldr	r1, [r1]
   20cc0:	ldr	r0, [r0]
   20cc4:	bl	11bd0 <strcmp@plt>
   20cc8:	clz	r0, r0
   20ccc:	lsr	ip, r0, #5
   20cd0:	mov	r0, ip
   20cd4:	pop	{r4, r5, fp, pc}
   20cd8:	push	{r4, sl, fp, lr}
   20cdc:	add	fp, sp, #8
   20ce0:	mov	r4, r0
   20ce4:	ldr	r0, [r0]
   20ce8:	bl	1f89c <__assert_fail@plt+0xd810>
   20cec:	mov	r0, r4
   20cf0:	pop	{r4, sl, fp, lr}
   20cf4:	b	1f89c <__assert_fail@plt+0xd810>
   20cf8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   20cfc:	add	fp, sp, #28
   20d00:	sub	sp, sp, #4
   20d04:	vpush	{d8-d9}
   20d08:	sub	sp, sp, #104	; 0x68
   20d0c:	mov	r7, r3
   20d10:	mov	r5, r2
   20d14:	mov	r8, r1
   20d18:	mov	sl, r0
   20d1c:	bl	11fa8 <localeconv@plt>
   20d20:	ldr	r6, [r0]
   20d24:	mov	r4, r0
   20d28:	mov	r0, r6
   20d2c:	bl	11eac <strlen@plt>
   20d30:	sub	r1, r0, #1
   20d34:	movw	r2, #54802	; 0xd612
   20d38:	cmp	r1, #16
   20d3c:	movt	r2, #2
   20d40:	movcs	r0, #1
   20d44:	movcc	r2, r6
   20d48:	ldr	r6, [r4, #4]
   20d4c:	str	r0, [sp, #48]	; 0x30
   20d50:	ldr	r0, [r4, #8]
   20d54:	str	r2, [sp, #16]
   20d58:	str	r0, [sp, #24]
   20d5c:	mov	r0, r6
   20d60:	bl	11eac <strlen@plt>
   20d64:	cmp	r0, #17
   20d68:	movw	r0, #647	; 0x287
   20d6c:	movw	r1, #47938	; 0xbb42
   20d70:	str	r5, [sp, #36]	; 0x24
   20d74:	str	r7, [sp, #40]	; 0x28
   20d78:	ldr	r4, [fp, #20]
   20d7c:	add	r0, r5, r0
   20d80:	movt	r1, #2
   20d84:	movcc	r1, r6
   20d88:	ldr	r5, [fp, #16]
   20d8c:	ldr	r6, [fp, #8]
   20d90:	str	r0, [sp, #32]
   20d94:	ands	r0, r7, #32
   20d98:	str	r1, [sp, #20]
   20d9c:	str	r0, [sp, #28]
   20da0:	mov	r0, #1000	; 0x3e8
   20da4:	movwne	r0, #1024	; 0x400
   20da8:	str	r0, [sp, #44]	; 0x2c
   20dac:	and	r0, r7, #3
   20db0:	ldr	r7, [fp, #12]
   20db4:	str	r0, [sp, #52]	; 0x34
   20db8:	subs	r0, r6, r5
   20dbc:	sbcs	r0, r7, r4
   20dc0:	bcs	20eb0 <__assert_fail@plt+0xee24>
   20dc4:	orrs	r0, r6, r7
   20dc8:	beq	21004 <__assert_fail@plt+0xef78>
   20dcc:	ldr	r9, [fp, #16]
   20dd0:	ldr	r5, [fp, #20]
   20dd4:	mov	r2, r6
   20dd8:	mov	r3, r7
   20ddc:	mov	r0, r9
   20de0:	mov	r1, r5
   20de4:	bl	294d8 <_obstack_memory_used@@Base+0x4bec>
   20de8:	mov	r4, r0
   20dec:	mov	r3, r1
   20df0:	umull	r0, r1, r0, r6
   20df4:	mla	r1, r4, r7, r1
   20df8:	mla	r1, r3, r6, r1
   20dfc:	subs	r0, r9, r0
   20e00:	sbc	r1, r5, r1
   20e04:	orrs	r0, r0, r1
   20e08:	bne	21004 <__assert_fail@plt+0xef78>
   20e0c:	mov	r0, sl
   20e10:	mov	r1, r8
   20e14:	mov	r2, r4
   20e18:	mov	r6, r8
   20e1c:	mov	r8, r3
   20e20:	bl	294d8 <_obstack_memory_used@@Base+0x4bec>
   20e24:	mov	r5, r0
   20e28:	mov	r9, r1
   20e2c:	umull	r0, r1, r0, r4
   20e30:	mov	r2, #10
   20e34:	mov	r3, r8
   20e38:	mla	r1, r5, r8, r1
   20e3c:	mla	r1, r9, r4, r1
   20e40:	subs	r0, sl, r0
   20e44:	umull	sl, r0, r0, r2
   20e48:	mov	r2, r4
   20e4c:	sbc	r1, r6, r1
   20e50:	add	r1, r1, r1, lsl #2
   20e54:	add	r7, r0, r1, lsl #1
   20e58:	mov	r0, sl
   20e5c:	mov	r1, r7
   20e60:	bl	294d8 <_obstack_memory_used@@Base+0x4bec>
   20e64:	mov	r6, r0
   20e68:	umull	r0, r2, r0, r4
   20e6c:	mla	r2, r6, r8, r2
   20e70:	mla	r1, r1, r4, r2
   20e74:	mov	r2, #2
   20e78:	subs	r0, sl, r0
   20e7c:	sbc	r1, r7, r1
   20e80:	subs	r3, r4, r0, lsl #1
   20e84:	lsl	r1, r1, #1
   20e88:	orr	r1, r1, r0, lsr #31
   20e8c:	orr	r7, r1, r0, lsl #1
   20e90:	sbcs	r3, r8, r1
   20e94:	movwcc	r2, #3
   20e98:	cmp	r7, #0
   20e9c:	movwne	r7, #1
   20ea0:	rsbs	r0, r4, r0, lsl #1
   20ea4:	sbcs	r0, r1, r8
   20ea8:	movcs	r7, r2
   20eac:	b	20f1c <__assert_fail@plt+0xee90>
   20eb0:	mov	r0, r6
   20eb4:	mov	r1, r7
   20eb8:	mov	r2, r5
   20ebc:	mov	r3, r4
   20ec0:	bl	294d8 <_obstack_memory_used@@Base+0x4bec>
   20ec4:	mov	r2, r0
   20ec8:	mov	r3, r1
   20ecc:	umull	r0, r1, r0, r5
   20ed0:	mla	r1, r2, r4, r1
   20ed4:	mla	r1, r3, r5, r1
   20ed8:	subs	r0, r6, r0
   20edc:	sbc	r1, r7, r1
   20ee0:	orrs	r0, r0, r1
   20ee4:	bne	21004 <__assert_fail@plt+0xef78>
   20ee8:	umull	r5, r0, r2, sl
   20eec:	mov	r4, r8
   20ef0:	mla	r0, r2, r8, r0
   20ef4:	mla	r9, r3, sl, r0
   20ef8:	mov	r0, r5
   20efc:	mov	r1, r9
   20f00:	bl	294d8 <_obstack_memory_used@@Base+0x4bec>
   20f04:	eor	r1, r1, r8
   20f08:	eor	r0, r0, sl
   20f0c:	orrs	r0, r0, r1
   20f10:	bne	21004 <__assert_fail@plt+0xef78>
   20f14:	mov	r7, #0
   20f18:	mov	r6, #0
   20f1c:	ldr	r0, [sp, #40]	; 0x28
   20f20:	ldr	r1, [sp, #32]
   20f24:	ldr	r2, [sp, #44]	; 0x2c
   20f28:	ands	r4, r0, #16
   20f2c:	beq	21278 <__assert_fail@plt+0xf1ec>
   20f30:	subs	r0, r5, r2
   20f34:	mov	r8, #0
   20f38:	sbcs	r0, r9, #0
   20f3c:	bcs	20f50 <__assert_fail@plt+0xeec4>
   20f40:	ldr	r0, [sp, #32]
   20f44:	mov	sl, r5
   20f48:	str	r0, [sp, #12]
   20f4c:	b	21598 <__assert_fail@plt+0xf50c>
   20f50:	ldr	r2, [sp, #44]	; 0x2c
   20f54:	mov	r0, r5
   20f58:	mov	r1, r9
   20f5c:	mov	r3, #0
   20f60:	bl	294d8 <_obstack_memory_used@@Base+0x4bec>
   20f64:	ldr	r2, [sp, #44]	; 0x2c
   20f68:	mov	sl, r0
   20f6c:	mov	r9, r1
   20f70:	mls	r0, r0, r2, r5
   20f74:	add	r0, r0, r0, lsl #2
   20f78:	add	r0, r6, r0, lsl #1
   20f7c:	udiv	r6, r0, r2
   20f80:	mls	r0, r6, r2, r0
   20f84:	lsl	r0, r0, #1
   20f88:	add	r0, r0, r7, lsr #1
   20f8c:	cmp	r0, r2
   20f90:	bcs	20fa4 <__assert_fail@plt+0xef18>
   20f94:	rsb	r1, r7, #0
   20f98:	subs	r7, r0, r1
   20f9c:	movwne	r7, #1
   20fa0:	b	20fb4 <__assert_fail@plt+0xef28>
   20fa4:	add	r0, r0, r7
   20fa8:	mov	r7, #2
   20fac:	cmp	r2, r0
   20fb0:	movwcc	r7, #3
   20fb4:	mov	r0, r8
   20fb8:	add	r0, r8, #1
   20fbc:	mov	r8, r0
   20fc0:	cmp	r0, #7
   20fc4:	bhi	20fd8 <__assert_fail@plt+0xef4c>
   20fc8:	subs	r0, sl, r2
   20fcc:	mov	r5, sl
   20fd0:	sbcs	r0, r9, #0
   20fd4:	bcs	20f50 <__assert_fail@plt+0xeec4>
   20fd8:	rsbs	r0, sl, #9
   20fdc:	rscs	r0, r9, #0
   20fe0:	bcc	214f8 <__assert_fail@plt+0xf46c>
   20fe4:	ldr	r0, [sp, #52]	; 0x34
   20fe8:	cmp	r0, #1
   20fec:	bne	21504 <__assert_fail@plt+0xf478>
   20ff0:	and	r0, r6, #1
   20ff4:	add	r0, r7, r0
   20ff8:	cmp	r0, #2
   20ffc:	bhi	21514 <__assert_fail@plt+0xf488>
   21000:	b	2154c <__assert_fail@plt+0xf4c0>
   21004:	ldr	r9, [fp, #20]
   21008:	ldr	r0, [fp, #16]
   2100c:	mov	r1, r9
   21010:	bl	29390 <_obstack_memory_used@@Base+0x4aa4>
   21014:	vmov	d8, r0, r1
   21018:	mov	r0, sl
   2101c:	mov	r1, r8
   21020:	bl	29390 <_obstack_memory_used@@Base+0x4aa4>
   21024:	mov	r4, r0
   21028:	mov	r5, r1
   2102c:	mov	r0, r6
   21030:	mov	r1, r7
   21034:	bl	29390 <_obstack_memory_used@@Base+0x4aa4>
   21038:	vmov	d16, r0, r1
   2103c:	vmov	d17, r4, r5
   21040:	ldr	r7, [sp, #40]	; 0x28
   21044:	tst	r7, #16
   21048:	vdiv.f64	d16, d16, d8
   2104c:	vmul.f64	d8, d16, d17
   21050:	bne	210d0 <__assert_fail@plt+0xf044>
   21054:	ldr	r6, [sp, #52]	; 0x34
   21058:	cmp	r6, #1
   2105c:	beq	2128c <__assert_fail@plt+0xf200>
   21060:	vldr	d16, [pc, #568]	; 212a0 <__assert_fail@plt+0xf214>
   21064:	ldr	sl, [sp, #36]	; 0x24
   21068:	ldr	r8, [sp, #32]
   2106c:	vcmpe.f64	d8, d16
   21070:	vmrs	APSR_nzcv, fpscr
   21074:	bpl	21294 <__assert_fail@plt+0xf208>
   21078:	vmov	r0, r1, d8
   2107c:	bl	29528 <_obstack_memory_used@@Base+0x4c3c>
   21080:	mov	r4, r0
   21084:	mov	r5, r1
   21088:	mov	r0, #0
   2108c:	cmp	r6, #0
   21090:	mov	r2, #0
   21094:	bne	210bc <__assert_fail@plt+0xf030>
   21098:	mov	r0, r4
   2109c:	mov	r1, r5
   210a0:	bl	29390 <_obstack_memory_used@@Base+0x4aa4>
   210a4:	vmov	d16, r0, r1
   210a8:	mov	r2, #0
   210ac:	mov	r0, #0
   210b0:	vcmp.f64	d8, d16
   210b4:	vmrs	APSR_nzcv, fpscr
   210b8:	movwne	r0, #1
   210bc:	adds	r0, r0, r4
   210c0:	adc	r1, r2, r5
   210c4:	bl	29390 <_obstack_memory_used@@Base+0x4aa4>
   210c8:	vmov	d8, r0, r1
   210cc:	b	21294 <__assert_fail@plt+0xf208>
   210d0:	ldr	r0, [sp, #44]	; 0x2c
   210d4:	mov	r6, #1
   210d8:	vmov	s0, r0
   210dc:	vcvt.f64.u32	d16, s0
   210e0:	vmul.f64	d17, d16, d16
   210e4:	vcmpe.f64	d17, d8
   210e8:	vmrs	APSR_nzcv, fpscr
   210ec:	bls	21100 <__assert_fail@plt+0xf074>
   210f0:	ldr	sl, [sp, #48]	; 0x30
   210f4:	ldr	r8, [sp, #32]
   210f8:	vmov.f64	d17, d16
   210fc:	b	21198 <__assert_fail@plt+0xf10c>
   21100:	vmul.f64	d18, d17, d16
   21104:	ldr	sl, [sp, #48]	; 0x30
   21108:	ldr	r8, [sp, #32]
   2110c:	mov	r6, #2
   21110:	vcmpe.f64	d18, d8
   21114:	vmrs	APSR_nzcv, fpscr
   21118:	bhi	21198 <__assert_fail@plt+0xf10c>
   2111c:	vmul.f64	d19, d18, d16
   21120:	vmov.f64	d17, d18
   21124:	mov	r6, #3
   21128:	vcmpe.f64	d19, d8
   2112c:	vmrs	APSR_nzcv, fpscr
   21130:	bhi	21198 <__assert_fail@plt+0xf10c>
   21134:	vmul.f64	d18, d19, d16
   21138:	vmov.f64	d17, d19
   2113c:	mov	r6, #4
   21140:	vcmpe.f64	d18, d8
   21144:	vmrs	APSR_nzcv, fpscr
   21148:	bhi	21198 <__assert_fail@plt+0xf10c>
   2114c:	vmul.f64	d19, d18, d16
   21150:	vmov.f64	d17, d18
   21154:	mov	r6, #5
   21158:	vcmpe.f64	d19, d8
   2115c:	vmrs	APSR_nzcv, fpscr
   21160:	bhi	21198 <__assert_fail@plt+0xf10c>
   21164:	vmul.f64	d18, d19, d16
   21168:	vmov.f64	d17, d19
   2116c:	mov	r6, #6
   21170:	vcmpe.f64	d18, d8
   21174:	vmrs	APSR_nzcv, fpscr
   21178:	bhi	21198 <__assert_fail@plt+0xf10c>
   2117c:	vmul.f64	d16, d18, d16
   21180:	mov	r6, #7
   21184:	vmov.f64	d17, d18
   21188:	vcmpe.f64	d16, d8
   2118c:	vmrs	APSR_nzcv, fpscr
   21190:	movls	r6, #8
   21194:	vmovls.f64	d17, d16
   21198:	vdiv.f64	d8, d8, d17
   2119c:	ldr	r0, [sp, #52]	; 0x34
   211a0:	cmp	r0, #1
   211a4:	vmov.f64	d16, d8
   211a8:	beq	21218 <__assert_fail@plt+0xf18c>
   211ac:	vldr	d16, [pc, #236]	; 212a0 <__assert_fail@plt+0xf214>
   211b0:	vcmpe.f64	d8, d16
   211b4:	vmov.f64	d16, d8
   211b8:	vmrs	APSR_nzcv, fpscr
   211bc:	bpl	21218 <__assert_fail@plt+0xf18c>
   211c0:	vmov	r0, r1, d8
   211c4:	bl	29528 <_obstack_memory_used@@Base+0x4c3c>
   211c8:	mov	r5, r1
   211cc:	ldr	r1, [sp, #52]	; 0x34
   211d0:	mov	r4, r0
   211d4:	mov	r0, #0
   211d8:	mov	r2, #0
   211dc:	cmp	r1, #0
   211e0:	bne	21208 <__assert_fail@plt+0xf17c>
   211e4:	mov	r0, r4
   211e8:	mov	r1, r5
   211ec:	bl	29390 <_obstack_memory_used@@Base+0x4aa4>
   211f0:	vmov	d16, r0, r1
   211f4:	mov	r2, #0
   211f8:	mov	r0, #0
   211fc:	vcmp.f64	d8, d16
   21200:	vmrs	APSR_nzcv, fpscr
   21204:	movwne	r0, #1
   21208:	adds	r0, r0, r4
   2120c:	adc	r1, r2, r5
   21210:	bl	29390 <_obstack_memory_used@@Base+0x4aa4>
   21214:	vmov	d16, r0, r1
   21218:	ldr	r5, [sp, #36]	; 0x24
   2121c:	movw	r3, #54946	; 0xd6a2
   21220:	mov	r1, #1
   21224:	mvn	r2, #0
   21228:	vstr	d16, [sp]
   2122c:	movt	r3, #2
   21230:	mov	r0, r5
   21234:	bl	11edc <__sprintf_chk@plt>
   21238:	ldr	r1, [sp, #28]
   2123c:	mov	r0, #3
   21240:	cmp	r1, #0
   21244:	movwne	r0, #2
   21248:	add	r4, r0, sl
   2124c:	mov	r0, r5
   21250:	bl	11eac <strlen@plt>
   21254:	cmp	r4, r0
   21258:	bcc	212bc <__assert_fail@plt+0xf230>
   2125c:	ldr	r7, [sp, #40]	; 0x28
   21260:	mov	r2, r0
   21264:	add	r5, sl, #1
   21268:	tst	r7, #8
   2126c:	bne	212a8 <__assert_fail@plt+0xf21c>
   21270:	ldr	sl, [sp, #36]	; 0x24
   21274:	b	2136c <__assert_fail@plt+0xf2e0>
   21278:	mov	r0, r1
   2127c:	mvn	r8, #0
   21280:	str	r1, [sp, #12]
   21284:	mov	sl, r5
   21288:	b	21598 <__assert_fail@plt+0xf50c>
   2128c:	ldr	sl, [sp, #36]	; 0x24
   21290:	ldr	r8, [sp, #32]
   21294:	vstr	d8, [sp]
   21298:	mvn	r6, #0
   2129c:	b	21344 <__assert_fail@plt+0xf2b8>
   212a0:	andeq	r0, r0, r0
   212a4:	mvnsmi	r0, #0
   212a8:	ldr	r0, [sp, #36]	; 0x24
   212ac:	add	r0, r2, r0
   212b0:	ldrb	r0, [r0, #-1]
   212b4:	cmp	r0, #48	; 0x30
   212b8:	bne	214ec <__assert_fail@plt+0xf460>
   212bc:	vmov.f64	d9, #36	; 0x41200000  10.0
   212c0:	ldr	r4, [sp, #52]	; 0x34
   212c4:	vmul.f64	d8, d8, d9
   212c8:	cmp	r4, #1
   212cc:	beq	21334 <__assert_fail@plt+0xf2a8>
   212d0:	vldr	d16, [pc, #-56]	; 212a0 <__assert_fail@plt+0xf214>
   212d4:	vcmpe.f64	d8, d16
   212d8:	vmrs	APSR_nzcv, fpscr
   212dc:	bpl	21334 <__assert_fail@plt+0xf2a8>
   212e0:	vmov	r0, r1, d8
   212e4:	bl	29528 <_obstack_memory_used@@Base+0x4c3c>
   212e8:	mov	sl, r0
   212ec:	mov	r5, r1
   212f0:	mov	r0, #0
   212f4:	cmp	r4, #0
   212f8:	mov	r2, #0
   212fc:	bne	21324 <__assert_fail@plt+0xf298>
   21300:	mov	r0, sl
   21304:	mov	r1, r5
   21308:	bl	29390 <_obstack_memory_used@@Base+0x4aa4>
   2130c:	vmov	d16, r0, r1
   21310:	mov	r2, #0
   21314:	mov	r0, #0
   21318:	vcmp.f64	d8, d16
   2131c:	vmrs	APSR_nzcv, fpscr
   21320:	movwne	r0, #1
   21324:	adds	r0, r0, sl
   21328:	adc	r1, r2, r5
   2132c:	bl	29390 <_obstack_memory_used@@Base+0x4aa4>
   21330:	vmov	d8, r0, r1
   21334:	vdiv.f64	d16, d8, d9
   21338:	ldr	sl, [sp, #36]	; 0x24
   2133c:	ldr	r7, [sp, #40]	; 0x28
   21340:	vstr	d16, [sp]
   21344:	movw	r3, #54940	; 0xd69c
   21348:	mov	r0, sl
   2134c:	mov	r1, #1
   21350:	mvn	r2, #0
   21354:	movt	r3, #2
   21358:	bl	11edc <__sprintf_chk@plt>
   2135c:	mov	r0, sl
   21360:	bl	11eac <strlen@plt>
   21364:	mov	r2, r0
   21368:	mov	r5, #0
   2136c:	sub	r4, r8, r2
   21370:	mov	r1, sl
   21374:	mov	r0, r4
   21378:	bl	11c24 <memmove@plt>
   2137c:	sub	r5, r8, r5
   21380:	tst	r7, #4
   21384:	bne	216a4 <__assert_fail@plt+0xf618>
   21388:	tst	r7, #128	; 0x80
   2138c:	beq	217bc <__assert_fail@plt+0xf730>
   21390:	cmn	r6, #1
   21394:	bgt	21480 <__assert_fail@plt+0xf3f4>
   21398:	ldr	r0, [fp, #16]
   2139c:	mov	r6, #0
   213a0:	subs	r0, r0, #2
   213a4:	sbcs	r0, r9, #0
   213a8:	bcc	21480 <__assert_fail@plt+0xf3f4>
   213ac:	ldr	r0, [sp, #44]	; 0x2c
   213b0:	ldr	r1, [fp, #16]
   213b4:	mov	r6, #1
   213b8:	subs	r0, r0, r1
   213bc:	rscs	r0, r9, #0
   213c0:	bcs	21480 <__assert_fail@plt+0xf3f4>
   213c4:	ldr	r0, [sp, #44]	; 0x2c
   213c8:	ldr	r2, [fp, #16]
   213cc:	mov	r6, #2
   213d0:	umull	r1, r0, r0, r0
   213d4:	subs	r2, r1, r2
   213d8:	sbcs	r2, r0, r9
   213dc:	bcs	21480 <__assert_fail@plt+0xf3f4>
   213e0:	ldr	r3, [sp, #44]	; 0x2c
   213e4:	mov	r6, #3
   213e8:	umull	r1, r2, r1, r3
   213ec:	mla	r2, r0, r3, r2
   213f0:	ldr	r0, [fp, #16]
   213f4:	subs	r0, r1, r0
   213f8:	sbcs	r0, r2, r9
   213fc:	bcs	21480 <__assert_fail@plt+0xf3f4>
   21400:	ldr	r3, [sp, #44]	; 0x2c
   21404:	mov	r6, #4
   21408:	umull	r0, r1, r1, r3
   2140c:	mla	r1, r2, r3, r1
   21410:	ldr	r2, [fp, #16]
   21414:	subs	r2, r0, r2
   21418:	sbcs	r2, r1, r9
   2141c:	bcs	21480 <__assert_fail@plt+0xf3f4>
   21420:	ldr	r3, [sp, #44]	; 0x2c
   21424:	mov	r6, #5
   21428:	umull	r0, r2, r0, r3
   2142c:	mla	r1, r1, r3, r2
   21430:	ldr	r2, [fp, #16]
   21434:	subs	r2, r0, r2
   21438:	sbcs	r2, r1, r9
   2143c:	bcs	21480 <__assert_fail@plt+0xf3f4>
   21440:	ldr	r3, [sp, #44]	; 0x2c
   21444:	mov	r6, #6
   21448:	umull	r0, r2, r0, r3
   2144c:	mla	r1, r1, r3, r2
   21450:	ldr	r2, [fp, #16]
   21454:	subs	r2, r0, r2
   21458:	sbcs	r2, r1, r9
   2145c:	bcs	21480 <__assert_fail@plt+0xf3f4>
   21460:	ldr	r3, [sp, #44]	; 0x2c
   21464:	mov	r6, #7
   21468:	umull	r0, r2, r0, r3
   2146c:	mla	r1, r1, r3, r2
   21470:	ldr	r2, [fp, #16]
   21474:	subs	r0, r0, r2
   21478:	sbcs	r0, r1, r9
   2147c:	movwcc	r6, #8
   21480:	and	r0, r7, #256	; 0x100
   21484:	tst	r7, #64	; 0x40
   21488:	orrsne	r1, r6, r0
   2148c:	movne	r1, #32
   21490:	addne	r8, sl, #648	; 0x288
   21494:	strbne	r1, [sl, #647]	; 0x287
   21498:	cmp	r6, #0
   2149c:	beq	214c4 <__assert_fail@plt+0xf438>
   214a0:	ldr	r1, [sp, #28]
   214a4:	cmp	r1, #0
   214a8:	moveq	r1, #107	; 0x6b
   214ac:	cmpeq	r6, #1
   214b0:	beq	214c0 <__assert_fail@plt+0xf434>
   214b4:	movw	r1, #54996	; 0xd6d4
   214b8:	movt	r1, #2
   214bc:	ldrb	r1, [r1, r6]
   214c0:	strb	r1, [r8], #1
   214c4:	cmp	r0, #0
   214c8:	beq	217bc <__assert_fail@plt+0xf730>
   214cc:	ldr	r0, [sp, #28]
   214d0:	cmp	r0, #0
   214d4:	cmpne	r6, #0
   214d8:	movne	r0, #105	; 0x69
   214dc:	strbne	r0, [r8], #1
   214e0:	mov	r0, #66	; 0x42
   214e4:	strb	r0, [r8], #1
   214e8:	b	217bc <__assert_fail@plt+0xf730>
   214ec:	ldr	sl, [sp, #36]	; 0x24
   214f0:	ldr	r7, [sp, #40]	; 0x28
   214f4:	b	2136c <__assert_fail@plt+0xf2e0>
   214f8:	ldr	r0, [sp, #32]
   214fc:	str	r0, [sp, #12]
   21500:	b	21598 <__assert_fail@plt+0xf50c>
   21504:	cmp	r0, #0
   21508:	bne	2154c <__assert_fail@plt+0xf4c0>
   2150c:	cmp	r7, #0
   21510:	beq	2154c <__assert_fail@plt+0xf4c0>
   21514:	adds	r0, sl, #1
   21518:	add	r6, r6, #1
   2151c:	mov	r7, #0
   21520:	adc	r1, r9, #0
   21524:	cmp	r6, #10
   21528:	bne	2154c <__assert_fail@plt+0xf4c0>
   2152c:	rsbs	r2, r0, #9
   21530:	mov	r6, #0
   21534:	mov	sl, r0
   21538:	mov	r9, r1
   2153c:	mov	r7, #0
   21540:	rscs	r2, r1, #0
   21544:	ldr	r2, [sp, #44]	; 0x2c
   21548:	bcc	217d8 <__assert_fail@plt+0xf74c>
   2154c:	ldr	r0, [sp, #40]	; 0x28
   21550:	tst	r0, #8
   21554:	beq	2156c <__assert_fail@plt+0xf4e0>
   21558:	cmp	r6, #0
   2155c:	bne	2156c <__assert_fail@plt+0xf4e0>
   21560:	ldr	r0, [sp, #32]
   21564:	str	r0, [sp, #12]
   21568:	b	21594 <__assert_fail@plt+0xf508>
   2156c:	ldr	r1, [sp, #36]	; 0x24
   21570:	ldr	r2, [sp, #48]	; 0x30
   21574:	add	r0, r6, #48	; 0x30
   21578:	strb	r0, [r1, #646]!	; 0x286
   2157c:	sub	r0, r1, r2
   21580:	ldr	r1, [sp, #16]
   21584:	str	r0, [sp, #12]
   21588:	bl	11c60 <memcpy@plt>
   2158c:	ldr	r2, [sp, #44]	; 0x2c
   21590:	mov	r7, #0
   21594:	mov	r6, #0
   21598:	ldr	r0, [sp, #52]	; 0x34
   2159c:	cmp	r0, #0
   215a0:	beq	215e0 <__assert_fail@plt+0xf554>
   215a4:	cmp	r0, #1
   215a8:	bne	215d4 <__assert_fail@plt+0xf548>
   215ac:	mov	r0, #0
   215b0:	rsbs	r1, r7, #0
   215b4:	and	r2, sl, #1
   215b8:	eor	r1, r2, r1
   215bc:	sbc	r0, r0, #0
   215c0:	ldr	r2, [sp, #44]	; 0x2c
   215c4:	orrs	r0, r1, r0
   215c8:	addne	r6, r6, #1
   215cc:	cmp	r6, #5
   215d0:	bgt	215ec <__assert_fail@plt+0xf560>
   215d4:	ldr	r7, [sp, #36]	; 0x24
   215d8:	ldr	r5, [sp, #40]	; 0x28
   215dc:	b	21648 <__assert_fail@plt+0xf5bc>
   215e0:	add	r0, r6, r7
   215e4:	cmp	r0, #1
   215e8:	blt	215d4 <__assert_fail@plt+0xf548>
   215ec:	ldr	r7, [sp, #36]	; 0x24
   215f0:	ldr	r5, [sp, #40]	; 0x28
   215f4:	adds	sl, sl, #1
   215f8:	adc	r9, r9, #0
   215fc:	cmp	r8, #7
   21600:	bgt	21648 <__assert_fail@plt+0xf5bc>
   21604:	cmp	r4, #0
   21608:	beq	21648 <__assert_fail@plt+0xf5bc>
   2160c:	eor	r0, sl, r2
   21610:	orrs	r0, r0, r9
   21614:	addeq	r8, r8, #1
   21618:	moveq	r9, #0
   2161c:	moveq	sl, #1
   21620:	tsteq	r5, #8
   21624:	bne	21648 <__assert_fail@plt+0xf5bc>
   21628:	ldr	r0, [sp, #12]
   2162c:	mov	r1, #48	; 0x30
   21630:	ldr	r2, [sp, #48]	; 0x30
   21634:	strb	r1, [r0, #-1]!
   21638:	ldr	r1, [sp, #16]
   2163c:	sub	r0, r0, r2
   21640:	str	r0, [sp, #12]
   21644:	bl	11c60 <memcpy@plt>
   21648:	ldr	r4, [sp, #12]
   2164c:	mov	r0, sl
   21650:	mov	r1, r9
   21654:	mov	r2, #10
   21658:	mov	r3, #0
   2165c:	bl	294d8 <_obstack_memory_used@@Base+0x4bec>
   21660:	add	r2, r0, r0, lsl #2
   21664:	sub	r2, sl, r2, lsl #1
   21668:	orr	r2, r2, #48	; 0x30
   2166c:	strb	r2, [r4, #-1]!
   21670:	rsbs	r2, sl, #9
   21674:	mov	sl, r0
   21678:	rscs	r2, r9, #0
   2167c:	mov	r9, r1
   21680:	bcc	2164c <__assert_fail@plt+0xf5c0>
   21684:	mov	r6, r8
   21688:	mov	sl, r7
   2168c:	mov	r7, r5
   21690:	ldr	r9, [fp, #20]
   21694:	ldr	r8, [sp, #32]
   21698:	ldr	r5, [sp, #12]
   2169c:	tst	r7, #4
   216a0:	beq	21388 <__assert_fail@plt+0xf2fc>
   216a4:	ldr	r9, [sp, #20]
   216a8:	str	r6, [sp, #16]
   216ac:	sub	r7, r5, r4
   216b0:	mov	r0, r9
   216b4:	bl	11eac <strlen@plt>
   216b8:	str	r0, [sp, #52]	; 0x34
   216bc:	add	r0, sp, #56	; 0x38
   216c0:	mov	r1, r4
   216c4:	mov	r2, r7
   216c8:	bl	11c60 <memcpy@plt>
   216cc:	ldr	r6, [sp, #24]
   216d0:	add	r0, sp, #56	; 0x38
   216d4:	ldrb	r8, [r6]
   216d8:	cmp	r8, #255	; 0xff
   216dc:	mov	sl, r8
   216e0:	moveq	sl, r7
   216e4:	cmp	r8, #0
   216e8:	mvneq	sl, #0
   216ec:	cmp	sl, r7
   216f0:	movhi	sl, r7
   216f4:	sub	r4, r5, sl
   216f8:	sub	r5, r7, sl
   216fc:	mov	r2, sl
   21700:	add	r1, r0, r5
   21704:	mov	r0, r4
   21708:	bl	11c60 <memcpy@plt>
   2170c:	cmp	r5, #0
   21710:	beq	217a0 <__assert_fail@plt+0xf714>
   21714:	clz	r0, r8
   21718:	lsr	r8, r0, #5
   2171c:	ldr	r0, [sp, #52]	; 0x34
   21720:	rsb	r0, r0, #0
   21724:	str	r0, [sp, #48]	; 0x30
   21728:	ldr	r0, [sp, #48]	; 0x30
   2172c:	ldr	r2, [sp, #52]	; 0x34
   21730:	mov	r1, r9
   21734:	add	r4, r4, r0
   21738:	mov	r0, r4
   2173c:	bl	11c60 <memcpy@plt>
   21740:	tst	r8, #1
   21744:	add	r0, sp, #56	; 0x38
   21748:	addeq	r6, r6, #1
   2174c:	mov	r8, r6
   21750:	ldrb	r6, [r6]
   21754:	cmp	r6, #255	; 0xff
   21758:	mov	r7, r6
   2175c:	moveq	r7, r5
   21760:	cmp	r6, #0
   21764:	moveq	r7, sl
   21768:	cmp	r5, r7
   2176c:	movcc	r7, r5
   21770:	sub	r5, r5, r7
   21774:	sub	r4, r4, r7
   21778:	mov	r2, r7
   2177c:	add	r1, r0, r5
   21780:	mov	r0, r4
   21784:	bl	11c60 <memcpy@plt>
   21788:	clz	r0, r6
   2178c:	mov	r6, r8
   21790:	cmp	r5, #0
   21794:	mov	sl, r7
   21798:	lsr	r8, r0, #5
   2179c:	bne	21728 <__assert_fail@plt+0xf69c>
   217a0:	ldr	r8, [sp, #32]
   217a4:	ldr	sl, [sp, #36]	; 0x24
   217a8:	ldr	r7, [sp, #40]	; 0x28
   217ac:	ldr	r9, [fp, #20]
   217b0:	ldr	r6, [sp, #16]
   217b4:	tst	r7, #128	; 0x80
   217b8:	bne	21390 <__assert_fail@plt+0xf304>
   217bc:	mov	r0, #0
   217c0:	strb	r0, [r8]
   217c4:	mov	r0, r4
   217c8:	sub	sp, fp, #48	; 0x30
   217cc:	vpop	{d8-d9}
   217d0:	add	sp, sp, #4
   217d4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   217d8:	ldr	r0, [sp, #32]
   217dc:	mov	r7, #0
   217e0:	mov	sl, #10
   217e4:	mov	r9, #0
   217e8:	str	r0, [sp, #12]
   217ec:	b	21598 <__assert_fail@plt+0xf50c>
   217f0:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   217f4:	add	fp, sp, #24
   217f8:	sub	sp, sp, #8
   217fc:	mov	r4, r2
   21800:	mov	r8, r1
   21804:	cmp	r0, #0
   21808:	bne	21834 <__assert_fail@plt+0xf7a8>
   2180c:	movw	r0, #46552	; 0xb5d8
   21810:	movt	r0, #2
   21814:	bl	11de0 <getenv@plt>
   21818:	cmp	r0, #0
   2181c:	bne	21834 <__assert_fail@plt+0xf7a8>
   21820:	movw	r0, #54952	; 0xd6a8
   21824:	movt	r0, #2
   21828:	bl	11de0 <getenv@plt>
   2182c:	cmp	r0, #0
   21830:	beq	21958 <__assert_fail@plt+0xf8cc>
   21834:	mov	r6, r0
   21838:	movw	r7, #55020	; 0xd6ec
   2183c:	movw	r1, #55008	; 0xd6e0
   21840:	mov	r3, #4
   21844:	ldrb	r5, [r6], #1
   21848:	movt	r7, #2
   2184c:	movt	r1, #2
   21850:	mov	r2, r7
   21854:	cmp	r5, #39	; 0x27
   21858:	movne	r6, r0
   2185c:	mov	r0, r6
   21860:	bl	1de58 <__assert_fail@plt+0xbdcc>
   21864:	sub	r1, r5, #39	; 0x27
   21868:	cmp	r0, #0
   2186c:	clz	r1, r1
   21870:	lsr	r1, r1, #5
   21874:	lsl	r5, r1, #2
   21878:	bmi	218a0 <__assert_fail@plt+0xf814>
   2187c:	ldr	r0, [r7, r0, lsl #2]
   21880:	mov	r2, #1
   21884:	mov	r1, #0
   21888:	str	r2, [r4]
   2188c:	str	r1, [r4, #4]
   21890:	orr	r1, r0, r5
   21894:	mov	r0, #0
   21898:	str	r1, [r8]
   2189c:	b	218d0 <__assert_fail@plt+0xf844>
   218a0:	movw	r0, #54962	; 0xd6b2
   218a4:	add	r1, sp, #4
   218a8:	mov	r2, #0
   218ac:	mov	r3, r4
   218b0:	mov	r7, #0
   218b4:	movt	r0, #2
   218b8:	str	r0, [sp]
   218bc:	mov	r0, r6
   218c0:	bl	27ff8 <_obstack_memory_used@@Base+0x370c>
   218c4:	cmp	r0, #0
   218c8:	beq	21914 <__assert_fail@plt+0xf888>
   218cc:	str	r7, [r8]
   218d0:	ldrd	r2, [r4]
   218d4:	orrs	r1, r2, r3
   218d8:	beq	218e4 <__assert_fail@plt+0xf858>
   218dc:	sub	sp, fp, #24
   218e0:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   218e4:	movw	r0, #54980	; 0xd6c4
   218e8:	movt	r0, #2
   218ec:	bl	11de0 <getenv@plt>
   218f0:	cmp	r0, #0
   218f4:	mov	r2, #512	; 0x200
   218f8:	mov	r0, #4
   218fc:	mov	r1, #0
   21900:	movweq	r2, #1024	; 0x400
   21904:	str	r2, [r4]
   21908:	str	r1, [r4, #4]
   2190c:	sub	sp, fp, #24
   21910:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   21914:	ldrb	r0, [r6]
   21918:	sub	r0, r0, #48	; 0x30
   2191c:	uxtb	r0, r0
   21920:	cmp	r0, #10
   21924:	bcc	21950 <__assert_fail@plt+0xf8c4>
   21928:	ldr	r0, [sp, #4]
   2192c:	cmp	r0, r6
   21930:	beq	21980 <__assert_fail@plt+0xf8f4>
   21934:	ldrb	r2, [r6, #1]
   21938:	add	r1, r6, #1
   2193c:	mov	r6, r1
   21940:	sub	r2, r2, #48	; 0x30
   21944:	uxtb	r2, r2
   21948:	cmp	r2, #10
   2194c:	bcs	2192c <__assert_fail@plt+0xf8a0>
   21950:	mov	r1, r5
   21954:	b	21894 <__assert_fail@plt+0xf808>
   21958:	movw	r0, #54980	; 0xd6c4
   2195c:	movt	r0, #2
   21960:	bl	11de0 <getenv@plt>
   21964:	cmp	r0, #0
   21968:	mov	r2, #512	; 0x200
   2196c:	mov	r1, #0
   21970:	movweq	r2, #1024	; 0x400
   21974:	str	r2, [r4]
   21978:	str	r1, [r4, #4]
   2197c:	b	21894 <__assert_fail@plt+0xf808>
   21980:	ldrb	r2, [r0, #-1]
   21984:	orr	r1, r5, #384	; 0x180
   21988:	cmp	r2, #66	; 0x42
   2198c:	mov	r2, r1
   21990:	orrne	r2, r5, #128	; 0x80
   21994:	bne	219a8 <__assert_fail@plt+0xf91c>
   21998:	ldrb	r0, [r0, #-2]
   2199c:	cmp	r0, #105	; 0x69
   219a0:	orreq	r1, r2, #32
   219a4:	b	21894 <__assert_fail@plt+0xf808>
   219a8:	orr	r1, r2, #32
   219ac:	b	21894 <__assert_fail@plt+0xf808>
   219b0:	push	{r4, r5, r6, r7, fp, lr}
   219b4:	add	fp, sp, #16
   219b8:	movw	r7, #62416	; 0xf3d0
   219bc:	mov	r4, r0
   219c0:	movt	r7, #3
   219c4:	ldr	r5, [r7]
   219c8:	cmp	r5, #0
   219cc:	beq	219e8 <__assert_fail@plt+0xf95c>
   219d0:	ldr	r0, [r5]
   219d4:	cmp	r0, r4
   219d8:	beq	21a3c <__assert_fail@plt+0xf9b0>
   219dc:	ldr	r5, [r5, #4]
   219e0:	cmp	r5, #0
   219e4:	bne	219d0 <__assert_fail@plt+0xf944>
   219e8:	mov	r0, r4
   219ec:	bl	11bdc <getpwuid@plt>
   219f0:	cmp	r0, #0
   219f4:	beq	21a00 <__assert_fail@plt+0xf974>
   219f8:	ldr	r6, [r0]
   219fc:	b	21a08 <__assert_fail@plt+0xf97c>
   21a00:	movw	r6, #47938	; 0xbb42
   21a04:	movt	r6, #2
   21a08:	mov	r0, r6
   21a0c:	bl	11eac <strlen@plt>
   21a10:	add	r0, r0, #12
   21a14:	bic	r0, r0, #3
   21a18:	bl	27750 <_obstack_memory_used@@Base+0x2e64>
   21a1c:	mov	r5, r0
   21a20:	str	r4, [r0]
   21a24:	add	r0, r0, #8
   21a28:	mov	r1, r6
   21a2c:	bl	11d74 <strcpy@plt>
   21a30:	ldr	r0, [r7]
   21a34:	str	r5, [r7]
   21a38:	str	r0, [r5, #4]
   21a3c:	ldrb	r0, [r5, #8]!
   21a40:	cmp	r0, #0
   21a44:	moveq	r5, r0
   21a48:	mov	r0, r5
   21a4c:	pop	{r4, r5, r6, r7, fp, pc}
   21a50:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   21a54:	add	fp, sp, #24
   21a58:	movw	r8, #62416	; 0xf3d0
   21a5c:	mov	r4, r0
   21a60:	movt	r8, #3
   21a64:	ldr	r5, [r8]
   21a68:	cmp	r5, #0
   21a6c:	beq	21aac <__assert_fail@plt+0xfa20>
   21a70:	ldrb	r6, [r4]
   21a74:	b	21a84 <__assert_fail@plt+0xf9f8>
   21a78:	ldr	r5, [r5, #4]
   21a7c:	cmp	r5, #0
   21a80:	beq	21aac <__assert_fail@plt+0xfa20>
   21a84:	mov	r0, r5
   21a88:	ldrb	r1, [r0, #8]!
   21a8c:	cmp	r1, r6
   21a90:	bne	21a78 <__assert_fail@plt+0xf9ec>
   21a94:	mov	r1, r4
   21a98:	bl	11bd0 <strcmp@plt>
   21a9c:	cmp	r0, #0
   21aa0:	bne	21a78 <__assert_fail@plt+0xf9ec>
   21aa4:	mov	r0, r5
   21aa8:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   21aac:	movw	r7, #62420	; 0xf3d4
   21ab0:	movt	r7, #3
   21ab4:	ldr	r5, [r7]
   21ab8:	cmp	r5, #0
   21abc:	beq	21af8 <__assert_fail@plt+0xfa6c>
   21ac0:	ldrb	r6, [r4]
   21ac4:	b	21ad4 <__assert_fail@plt+0xfa48>
   21ac8:	ldr	r5, [r5, #4]
   21acc:	cmp	r5, #0
   21ad0:	beq	21af8 <__assert_fail@plt+0xfa6c>
   21ad4:	mov	r0, r5
   21ad8:	ldrb	r1, [r0, #8]!
   21adc:	cmp	r1, r6
   21ae0:	bne	21ac8 <__assert_fail@plt+0xfa3c>
   21ae4:	mov	r1, r4
   21ae8:	bl	11bd0 <strcmp@plt>
   21aec:	cmp	r0, #0
   21af0:	bne	21ac8 <__assert_fail@plt+0xfa3c>
   21af4:	b	21b54 <__assert_fail@plt+0xfac8>
   21af8:	mov	r0, r4
   21afc:	bl	11bc4 <getpwnam@plt>
   21b00:	mov	r6, r0
   21b04:	mov	r0, r4
   21b08:	bl	11eac <strlen@plt>
   21b0c:	add	r0, r0, #12
   21b10:	bic	r0, r0, #3
   21b14:	bl	27750 <_obstack_memory_used@@Base+0x2e64>
   21b18:	mov	r5, r0
   21b1c:	add	r0, r0, #8
   21b20:	mov	r1, r4
   21b24:	bl	11d74 <strcpy@plt>
   21b28:	cmp	r6, #0
   21b2c:	beq	21b48 <__assert_fail@plt+0xfabc>
   21b30:	ldr	r0, [r6, #8]
   21b34:	ldr	r1, [r8]
   21b38:	str	r5, [r8]
   21b3c:	stm	r5, {r0, r1}
   21b40:	mov	r0, r5
   21b44:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   21b48:	ldr	r0, [r7]
   21b4c:	str	r5, [r7]
   21b50:	str	r0, [r5, #4]
   21b54:	mov	r5, #0
   21b58:	mov	r0, r5
   21b5c:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   21b60:	push	{r4, r5, r6, r7, fp, lr}
   21b64:	add	fp, sp, #16
   21b68:	movw	r7, #62424	; 0xf3d8
   21b6c:	mov	r4, r0
   21b70:	movt	r7, #3
   21b74:	ldr	r5, [r7]
   21b78:	cmp	r5, #0
   21b7c:	beq	21b98 <__assert_fail@plt+0xfb0c>
   21b80:	ldr	r0, [r5]
   21b84:	cmp	r0, r4
   21b88:	beq	21bec <__assert_fail@plt+0xfb60>
   21b8c:	ldr	r5, [r5, #4]
   21b90:	cmp	r5, #0
   21b94:	bne	21b80 <__assert_fail@plt+0xfaf4>
   21b98:	mov	r0, r4
   21b9c:	bl	12050 <getgrgid@plt>
   21ba0:	cmp	r0, #0
   21ba4:	beq	21bb0 <__assert_fail@plt+0xfb24>
   21ba8:	ldr	r6, [r0]
   21bac:	b	21bb8 <__assert_fail@plt+0xfb2c>
   21bb0:	movw	r6, #47938	; 0xbb42
   21bb4:	movt	r6, #2
   21bb8:	mov	r0, r6
   21bbc:	bl	11eac <strlen@plt>
   21bc0:	add	r0, r0, #12
   21bc4:	bic	r0, r0, #3
   21bc8:	bl	27750 <_obstack_memory_used@@Base+0x2e64>
   21bcc:	mov	r5, r0
   21bd0:	str	r4, [r0]
   21bd4:	add	r0, r0, #8
   21bd8:	mov	r1, r6
   21bdc:	bl	11d74 <strcpy@plt>
   21be0:	ldr	r0, [r7]
   21be4:	str	r5, [r7]
   21be8:	str	r0, [r5, #4]
   21bec:	ldrb	r0, [r5, #8]!
   21bf0:	cmp	r0, #0
   21bf4:	moveq	r5, r0
   21bf8:	mov	r0, r5
   21bfc:	pop	{r4, r5, r6, r7, fp, pc}
   21c00:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   21c04:	add	fp, sp, #24
   21c08:	movw	r8, #62424	; 0xf3d8
   21c0c:	mov	r4, r0
   21c10:	movt	r8, #3
   21c14:	ldr	r5, [r8]
   21c18:	cmp	r5, #0
   21c1c:	beq	21c5c <__assert_fail@plt+0xfbd0>
   21c20:	ldrb	r6, [r4]
   21c24:	b	21c34 <__assert_fail@plt+0xfba8>
   21c28:	ldr	r5, [r5, #4]
   21c2c:	cmp	r5, #0
   21c30:	beq	21c5c <__assert_fail@plt+0xfbd0>
   21c34:	mov	r0, r5
   21c38:	ldrb	r1, [r0, #8]!
   21c3c:	cmp	r1, r6
   21c40:	bne	21c28 <__assert_fail@plt+0xfb9c>
   21c44:	mov	r1, r4
   21c48:	bl	11bd0 <strcmp@plt>
   21c4c:	cmp	r0, #0
   21c50:	bne	21c28 <__assert_fail@plt+0xfb9c>
   21c54:	mov	r0, r5
   21c58:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   21c5c:	movw	r7, #62428	; 0xf3dc
   21c60:	movt	r7, #3
   21c64:	ldr	r5, [r7]
   21c68:	cmp	r5, #0
   21c6c:	beq	21ca8 <__assert_fail@plt+0xfc1c>
   21c70:	ldrb	r6, [r4]
   21c74:	b	21c84 <__assert_fail@plt+0xfbf8>
   21c78:	ldr	r5, [r5, #4]
   21c7c:	cmp	r5, #0
   21c80:	beq	21ca8 <__assert_fail@plt+0xfc1c>
   21c84:	mov	r0, r5
   21c88:	ldrb	r1, [r0, #8]!
   21c8c:	cmp	r1, r6
   21c90:	bne	21c78 <__assert_fail@plt+0xfbec>
   21c94:	mov	r1, r4
   21c98:	bl	11bd0 <strcmp@plt>
   21c9c:	cmp	r0, #0
   21ca0:	bne	21c78 <__assert_fail@plt+0xfbec>
   21ca4:	b	21d04 <__assert_fail@plt+0xfc78>
   21ca8:	mov	r0, r4
   21cac:	bl	1205c <getgrnam@plt>
   21cb0:	mov	r6, r0
   21cb4:	mov	r0, r4
   21cb8:	bl	11eac <strlen@plt>
   21cbc:	add	r0, r0, #12
   21cc0:	bic	r0, r0, #3
   21cc4:	bl	27750 <_obstack_memory_used@@Base+0x2e64>
   21cc8:	mov	r5, r0
   21ccc:	add	r0, r0, #8
   21cd0:	mov	r1, r4
   21cd4:	bl	11d74 <strcpy@plt>
   21cd8:	cmp	r6, #0
   21cdc:	beq	21cf8 <__assert_fail@plt+0xfc6c>
   21ce0:	ldr	r0, [r6, #8]
   21ce4:	ldr	r1, [r8]
   21ce8:	str	r5, [r8]
   21cec:	stm	r5, {r0, r1}
   21cf0:	mov	r0, r5
   21cf4:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   21cf8:	ldr	r0, [r7]
   21cfc:	str	r5, [r7]
   21d00:	str	r0, [r5, #4]
   21d04:	mov	r5, #0
   21d08:	mov	r0, r5
   21d0c:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   21d10:	push	{r4, r5, r6, sl, fp, lr}
   21d14:	add	fp, sp, #16
   21d18:	mov	r5, r0
   21d1c:	mov	r0, #0
   21d20:	mov	r4, r1
   21d24:	add	r6, r2, #19
   21d28:	cmp	r1, #0
   21d2c:	strb	r0, [r2, #20]
   21d30:	bmi	21d80 <__assert_fail@plt+0xfcf4>
   21d34:	mov	r0, r5
   21d38:	mov	r1, r4
   21d3c:	mov	r2, #10
   21d40:	mov	r3, #0
   21d44:	bl	29404 <_obstack_memory_used@@Base+0x4b18>
   21d48:	add	r2, r0, r0, lsl #2
   21d4c:	sub	r2, r5, r2, lsl #1
   21d50:	add	r2, r2, #48	; 0x30
   21d54:	strb	r2, [r6], #-1
   21d58:	adds	r2, r5, #9
   21d5c:	mov	r5, r0
   21d60:	adc	r3, r4, #0
   21d64:	rsbs	r2, r2, #18
   21d68:	mov	r4, r1
   21d6c:	rscs	r2, r3, #0
   21d70:	bcc	21d34 <__assert_fail@plt+0xfca8>
   21d74:	add	r6, r6, #1
   21d78:	mov	r0, r6
   21d7c:	pop	{r4, r5, r6, sl, fp, pc}
   21d80:	mov	r0, r5
   21d84:	mov	r1, r4
   21d88:	mov	r2, #10
   21d8c:	mov	r3, #0
   21d90:	bl	29404 <_obstack_memory_used@@Base+0x4b18>
   21d94:	add	r2, r0, r0, lsl #2
   21d98:	rsb	r2, r5, r2, lsl #1
   21d9c:	add	r2, r2, #48	; 0x30
   21da0:	strb	r2, [r6], #-1
   21da4:	adds	r2, r5, #9
   21da8:	mov	r5, r0
   21dac:	adc	r3, r4, #0
   21db0:	rsbs	r2, r2, #18
   21db4:	mov	r4, r1
   21db8:	rscs	r2, r3, #0
   21dbc:	bcc	21d80 <__assert_fail@plt+0xfcf4>
   21dc0:	mov	r0, #45	; 0x2d
   21dc4:	strb	r0, [r6]
   21dc8:	mov	r0, r6
   21dcc:	pop	{r4, r5, r6, sl, fp, pc}
   21dd0:	push	{r4, r5, r6, sl, fp, lr}
   21dd4:	add	fp, sp, #16
   21dd8:	mov	r5, r0
   21ddc:	mov	r0, #0
   21de0:	mov	r4, r1
   21de4:	add	r6, r2, #19
   21de8:	strb	r0, [r2, #20]
   21dec:	mov	r0, r5
   21df0:	mov	r1, r4
   21df4:	mov	r2, #10
   21df8:	mov	r3, #0
   21dfc:	bl	294d8 <_obstack_memory_used@@Base+0x4bec>
   21e00:	add	r2, r0, r0, lsl #2
   21e04:	sub	r2, r5, r2, lsl #1
   21e08:	orr	r2, r2, #48	; 0x30
   21e0c:	strb	r2, [r6], #-1
   21e10:	rsbs	r2, r5, #9
   21e14:	mov	r5, r0
   21e18:	rscs	r2, r4, #0
   21e1c:	mov	r4, r1
   21e20:	bcc	21dec <__assert_fail@plt+0xfd60>
   21e24:	add	r0, r6, #1
   21e28:	pop	{r4, r5, r6, sl, fp, pc}
   21e2c:	push	{r4, r5, r6, r7, fp, lr}
   21e30:	add	fp, sp, #16
   21e34:	sub	sp, sp, #8
   21e38:	cmp	r0, #0
   21e3c:	add	r5, sp, #4
   21e40:	mov	r7, r2
   21e44:	mov	r4, r1
   21e48:	movne	r5, r0
   21e4c:	mov	r0, r5
   21e50:	bl	11d8c <mbrtowc@plt>
   21e54:	mov	r6, r0
   21e58:	cmp	r7, #0
   21e5c:	beq	21e84 <__assert_fail@plt+0xfdf8>
   21e60:	cmn	r6, #2
   21e64:	bcc	21e84 <__assert_fail@plt+0xfdf8>
   21e68:	mov	r0, #0
   21e6c:	bl	1f8e8 <__assert_fail@plt+0xd85c>
   21e70:	cmp	r0, #0
   21e74:	bne	21e84 <__assert_fail@plt+0xfdf8>
   21e78:	ldrb	r0, [r4]
   21e7c:	mov	r6, #1
   21e80:	str	r0, [r5]
   21e84:	mov	r0, r6
   21e88:	sub	sp, fp, #16
   21e8c:	pop	{r4, r5, r6, r7, fp, pc}
   21e90:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   21e94:	add	fp, sp, #28
   21e98:	sub	sp, sp, #20
   21e9c:	mov	r4, r3
   21ea0:	str	r2, [sp, #16]
   21ea4:	str	r1, [sp, #12]
   21ea8:	mov	r5, r0
   21eac:	bl	11eac <strlen@plt>
   21eb0:	ldr	r3, [fp, #12]
   21eb4:	mov	r8, r0
   21eb8:	mov	sl, #0
   21ebc:	tst	r3, #2
   21ec0:	bne	21f94 <__assert_fail@plt+0xff08>
   21ec4:	bl	11d68 <__ctype_get_mb_cur_max@plt>
   21ec8:	mov	r6, #0
   21ecc:	cmp	r0, #2
   21ed0:	bcc	21fa4 <__assert_fail@plt+0xff18>
   21ed4:	mov	r0, #0
   21ed8:	mov	r1, r5
   21edc:	mov	r2, #0
   21ee0:	bl	11fb4 <mbstowcs@plt>
   21ee4:	cmn	r0, #1
   21ee8:	beq	2214c <__assert_fail@plt+0x100c0>
   21eec:	add	r9, r0, #1
   21ef0:	mov	r7, r0
   21ef4:	lsl	r0, r9, #2
   21ef8:	bl	28cec <_obstack_memory_used@@Base+0x4400>
   21efc:	cmp	r0, #0
   21f00:	beq	22148 <__assert_fail@plt+0x100bc>
   21f04:	mov	r1, r5
   21f08:	mov	r2, r9
   21f0c:	mov	r6, r0
   21f10:	bl	11fb4 <mbstowcs@plt>
   21f14:	cmp	r0, #0
   21f18:	beq	2216c <__assert_fail@plt+0x100e0>
   21f1c:	str	r5, [sp, #4]
   21f20:	mov	r5, #0
   21f24:	mov	r1, r6
   21f28:	str	r6, [sp]
   21f2c:	str	r5, [r6, r7, lsl #2]
   21f30:	ldr	r0, [r6]
   21f34:	cmp	r0, #0
   21f38:	beq	2217c <__assert_fail@plt+0x100f0>
   21f3c:	add	r6, r1, #4
   21f40:	movw	r7, #65533	; 0xfffd
   21f44:	bl	11d14 <iswprint@plt>
   21f48:	cmp	r0, #0
   21f4c:	streq	r7, [r6, #-4]
   21f50:	moveq	r5, #1
   21f54:	ldr	r0, [r6], #4
   21f58:	cmp	r0, #0
   21f5c:	bne	21f44 <__assert_fail@plt+0xfeb8>
   21f60:	ldr	r6, [sp]
   21f64:	mov	r1, r9
   21f68:	mov	r0, r6
   21f6c:	bl	11f78 <wcswidth@plt>
   21f70:	mov	r7, r0
   21f74:	tst	r5, #1
   21f78:	beq	2218c <__assert_fail@plt+0x10100>
   21f7c:	mov	r0, #0
   21f80:	mov	r1, r6
   21f84:	mov	r2, #0
   21f88:	bl	11d98 <wcstombs@plt>
   21f8c:	ldr	r5, [sp, #4]
   21f90:	b	221a4 <__assert_fail@plt+0x10118>
   21f94:	mov	r6, #0
   21f98:	mov	r2, #0
   21f9c:	mov	r7, r8
   21fa0:	b	21fb0 <__assert_fail@plt+0xff24>
   21fa4:	mov	r2, #0
   21fa8:	mov	r7, r8
   21fac:	ldr	r3, [fp, #12]
   21fb0:	ldr	r0, [r4]
   21fb4:	str	r5, [sp, #4]
   21fb8:	ldr	r5, [fp, #8]
   21fbc:	mov	r1, r7
   21fc0:	str	r6, [sp, #8]
   21fc4:	cmp	r7, r0
   21fc8:	movhi	r1, r0
   21fcc:	movhi	r8, r0
   21fd0:	cmp	r0, r7
   21fd4:	subhi	sl, r0, r1
   21fd8:	cmp	r5, #0
   21fdc:	str	r1, [r4]
   21fe0:	beq	21ff8 <__assert_fail@plt+0xff6c>
   21fe4:	cmp	r5, #1
   21fe8:	bne	22000 <__assert_fail@plt+0xff74>
   21fec:	mov	r9, #0
   21ff0:	mov	r5, sl
   21ff4:	b	2200c <__assert_fail@plt+0xff80>
   21ff8:	mov	r9, sl
   21ffc:	b	2200c <__assert_fail@plt+0xff80>
   22000:	and	r0, sl, #1
   22004:	lsr	r9, sl, #1
   22008:	add	r5, r0, sl, lsr #1
   2200c:	ldr	r0, [sp, #16]
   22010:	ldr	r4, [sp, #12]
   22014:	tst	r3, #8
   22018:	mov	r6, #0
   2201c:	mov	r7, #0
   22020:	moveq	r6, r9
   22024:	tst	r3, #4
   22028:	moveq	r7, r5
   2202c:	cmp	r0, #0
   22030:	beq	22120 <__assert_fail@plt+0x10094>
   22034:	add	r0, r4, r0
   22038:	str	r2, [sp]
   2203c:	sub	sl, r0, #1
   22040:	mov	r0, r4
   22044:	cmp	sl, r4
   22048:	bls	22098 <__assert_fail@plt+0x1000c>
   2204c:	cmp	r7, #0
   22050:	mov	r0, r4
   22054:	beq	22098 <__assert_fail@plt+0x1000c>
   22058:	mvn	r0, r4
   2205c:	sub	r1, r7, #1
   22060:	add	r0, sl, r0
   22064:	cmp	r1, r0
   22068:	movhi	r1, r0
   2206c:	mov	r0, r4
   22070:	add	r2, r1, #1
   22074:	mov	r1, #32
   22078:	bl	11ef4 <memset@plt>
   2207c:	ldr	r1, [sp, #16]
   22080:	sub	r0, r5, #1
   22084:	sub	r1, r1, #2
   22088:	cmp	r0, r1
   2208c:	movcc	r1, r0
   22090:	add	r0, r1, r4
   22094:	add	r0, r0, #1
   22098:	ldr	r1, [sp, #4]
   2209c:	sub	r2, sl, r0
   220a0:	mov	r4, #0
   220a4:	mvn	r3, #0
   220a8:	cmp	r8, r2
   220ac:	strb	r4, [r0]
   220b0:	movcc	r2, r8
   220b4:	bl	12080 <__mempcpy_chk@plt>
   220b8:	mov	r5, r0
   220bc:	cmp	r6, #0
   220c0:	beq	22118 <__assert_fail@plt+0x1008c>
   220c4:	cmp	r5, sl
   220c8:	bcs	22118 <__assert_fail@plt+0x1008c>
   220cc:	mvn	r0, r5
   220d0:	sub	r1, r6, #1
   220d4:	add	r0, sl, r0
   220d8:	cmp	r1, r0
   220dc:	movhi	r1, r0
   220e0:	mov	r0, r5
   220e4:	add	r2, r1, #1
   220e8:	mov	r1, #32
   220ec:	bl	11ef4 <memset@plt>
   220f0:	ldr	r0, [sp, #16]
   220f4:	ldr	r1, [sp, #12]
   220f8:	sub	r0, r0, r5
   220fc:	add	r0, r0, r1
   22100:	sub	r1, r9, #1
   22104:	sub	r0, r0, #2
   22108:	cmp	r1, r0
   2210c:	movhi	r1, r0
   22110:	add	r0, r1, r5
   22114:	add	r5, r0, #1
   22118:	ldr	r2, [sp]
   2211c:	strb	r4, [r5]
   22120:	add	r0, r7, r8
   22124:	add	r9, r0, r6
   22128:	ldr	r6, [sp, #8]
   2212c:	mov	r0, r2
   22130:	bl	1f89c <__assert_fail@plt+0xd810>
   22134:	mov	r0, r6
   22138:	bl	1f89c <__assert_fail@plt+0xd810>
   2213c:	mov	r0, r9
   22140:	sub	sp, fp, #28
   22144:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   22148:	mov	r6, #0
   2214c:	ldr	r3, [fp, #12]
   22150:	mvn	r9, #0
   22154:	mov	r2, #0
   22158:	mov	r7, r8
   2215c:	mov	r0, #0
   22160:	tst	r3, #1
   22164:	bne	21fb0 <__assert_fail@plt+0xff24>
   22168:	b	22130 <__assert_fail@plt+0x100a4>
   2216c:	mov	r2, r6
   22170:	mov	r7, r8
   22174:	mov	r6, #0
   22178:	b	21fac <__assert_fail@plt+0xff20>
   2217c:	mov	r0, r1
   22180:	mov	r1, r9
   22184:	bl	11f78 <wcswidth@plt>
   22188:	mov	r7, r0
   2218c:	ldr	r0, [r4]
   22190:	ldr	r5, [sp, #4]
   22194:	mov	r6, #0
   22198:	cmp	r7, r0
   2219c:	mov	r0, r8
   221a0:	bls	22210 <__assert_fail@plt+0x10184>
   221a4:	add	r6, r0, #1
   221a8:	mov	r0, r6
   221ac:	bl	28cec <_obstack_memory_used@@Base+0x4400>
   221b0:	cmp	r0, #0
   221b4:	beq	22218 <__assert_fail@plt+0x1018c>
   221b8:	ldr	r1, [sp]
   221bc:	str	r0, [sp, #8]
   221c0:	str	r6, [sp, #4]
   221c4:	ldr	r0, [r1]
   221c8:	cmp	r0, #0
   221cc:	beq	22238 <__assert_fail@plt+0x101ac>
   221d0:	ldr	r5, [r4]
   221d4:	mov	r8, #0
   221d8:	movw	r9, #65533	; 0xfffd
   221dc:	mov	r6, r1
   221e0:	bl	11c00 <wcwidth@plt>
   221e4:	cmn	r0, #1
   221e8:	moveq	r0, #1
   221ec:	streq	r9, [r6]
   221f0:	add	r7, r0, r8
   221f4:	cmp	r7, r5
   221f8:	bhi	22244 <__assert_fail@plt+0x101b8>
   221fc:	ldr	r0, [r6, #4]!
   22200:	mov	r8, r7
   22204:	cmp	r0, #0
   22208:	bne	221e0 <__assert_fail@plt+0x10154>
   2220c:	b	22248 <__assert_fail@plt+0x101bc>
   22210:	ldr	r2, [sp]
   22214:	b	21fac <__assert_fail@plt+0xff20>
   22218:	ldr	r3, [fp, #12]
   2221c:	ldr	r2, [sp]
   22220:	mov	r6, #0
   22224:	mvn	r9, #0
   22228:	tst	r3, #1
   2222c:	mov	r0, r2
   22230:	bne	21fb0 <__assert_fail@plt+0xff24>
   22234:	b	22130 <__assert_fail@plt+0x100a4>
   22238:	mov	r6, r1
   2223c:	mov	r7, #0
   22240:	b	22248 <__assert_fail@plt+0x101bc>
   22244:	mov	r7, r8
   22248:	mov	r0, #0
   2224c:	ldr	r5, [sp]
   22250:	ldr	r2, [sp, #4]
   22254:	str	r0, [r6]
   22258:	ldr	r6, [sp, #8]
   2225c:	mov	r1, r5
   22260:	mov	r0, r6
   22264:	bl	11d98 <wcstombs@plt>
   22268:	mov	r2, r5
   2226c:	mov	r8, r0
   22270:	mov	r5, r6
   22274:	b	21fac <__assert_fail@plt+0xff20>
   22278:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2227c:	add	fp, sp, #28
   22280:	sub	sp, sp, #12
   22284:	ldr	r8, [r1]
   22288:	mov	sl, r0
   2228c:	mov	r9, r2
   22290:	mov	r6, r1
   22294:	mov	r7, #0
   22298:	str	r3, [sp, #8]
   2229c:	mov	r0, r8
   222a0:	mov	r5, r8
   222a4:	cmp	r0, r5
   222a8:	bcc	2230c <__assert_fail@plt+0x10280>
   222ac:	add	r5, r0, #1
   222b0:	mov	r0, r7
   222b4:	mov	r1, r5
   222b8:	bl	28d1c <_obstack_memory_used@@Base+0x4430>
   222bc:	cmp	r0, #0
   222c0:	beq	22300 <__assert_fail@plt+0x10274>
   222c4:	mov	r4, r0
   222c8:	ldr	r0, [sp, #8]
   222cc:	str	r8, [r6]
   222d0:	mov	r2, r5
   222d4:	mov	r3, r6
   222d8:	str	r9, [sp]
   222dc:	mov	r1, r4
   222e0:	str	r0, [sp, #4]
   222e4:	mov	r0, sl
   222e8:	bl	21e90 <__assert_fail@plt+0xfe04>
   222ec:	cmn	r0, #1
   222f0:	mov	r7, r4
   222f4:	bne	222a4 <__assert_fail@plt+0x10218>
   222f8:	mov	r0, r4
   222fc:	b	22304 <__assert_fail@plt+0x10278>
   22300:	mov	r0, r7
   22304:	bl	1f89c <__assert_fail@plt+0xd810>
   22308:	mov	r7, #0
   2230c:	mov	r0, r7
   22310:	sub	sp, fp, #28
   22314:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   22318:	push	{r4, r5, fp, lr}
   2231c:	add	fp, sp, #8
   22320:	mov	r4, r1
   22324:	mov	r5, r0
   22328:	bl	11eac <strlen@plt>
   2232c:	mov	r1, r0
   22330:	mov	r0, r5
   22334:	mov	r2, r4
   22338:	pop	{r4, r5, fp, lr}
   2233c:	b	22340 <__assert_fail@plt+0x102b4>
   22340:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   22344:	add	fp, sp, #28
   22348:	sub	sp, sp, #20
   2234c:	mov	r5, r2
   22350:	mov	r6, r1
   22354:	mov	r4, r0
   22358:	add	r7, r0, r1
   2235c:	bl	11d68 <__ctype_get_mb_cur_max@plt>
   22360:	cmp	r0, #1
   22364:	bls	2260c <__assert_fail@plt+0x10580>
   22368:	cmp	r6, #1
   2236c:	blt	22664 <__assert_fail@plt+0x105d8>
   22370:	and	r2, r5, #1
   22374:	and	sl, r5, #2
   22378:	mov	r3, #0
   2237c:	add	r8, sp, #4
   22380:	add	r9, sp, #8
   22384:	mov	r5, #0
   22388:	ldrb	r0, [r4]
   2238c:	sub	r0, r0, #32
   22390:	cmp	r0, #94	; 0x5e
   22394:	bhi	22530 <__assert_fail@plt+0x104a4>
   22398:	add	r1, pc, #0
   2239c:	ldr	pc, [r1, r0, lsl #2]
   223a0:	andeq	r2, r2, ip, lsl r5
   223a4:	andeq	r2, r2, ip, lsl r5
   223a8:	andeq	r2, r2, ip, lsl r5
   223ac:	andeq	r2, r2, ip, lsl r5
   223b0:	andeq	r2, r2, r0, lsr r5
   223b4:	andeq	r2, r2, ip, lsl r5
   223b8:	andeq	r2, r2, ip, lsl r5
   223bc:	andeq	r2, r2, ip, lsl r5
   223c0:	andeq	r2, r2, ip, lsl r5
   223c4:	andeq	r2, r2, ip, lsl r5
   223c8:	andeq	r2, r2, ip, lsl r5
   223cc:	andeq	r2, r2, ip, lsl r5
   223d0:	andeq	r2, r2, ip, lsl r5
   223d4:	andeq	r2, r2, ip, lsl r5
   223d8:	andeq	r2, r2, ip, lsl r5
   223dc:	andeq	r2, r2, ip, lsl r5
   223e0:	andeq	r2, r2, ip, lsl r5
   223e4:	andeq	r2, r2, ip, lsl r5
   223e8:	andeq	r2, r2, ip, lsl r5
   223ec:	andeq	r2, r2, ip, lsl r5
   223f0:	andeq	r2, r2, ip, lsl r5
   223f4:	andeq	r2, r2, ip, lsl r5
   223f8:	andeq	r2, r2, ip, lsl r5
   223fc:	andeq	r2, r2, ip, lsl r5
   22400:	andeq	r2, r2, ip, lsl r5
   22404:	andeq	r2, r2, ip, lsl r5
   22408:	andeq	r2, r2, ip, lsl r5
   2240c:	andeq	r2, r2, ip, lsl r5
   22410:	andeq	r2, r2, ip, lsl r5
   22414:	andeq	r2, r2, ip, lsl r5
   22418:	andeq	r2, r2, ip, lsl r5
   2241c:	andeq	r2, r2, ip, lsl r5
   22420:	andeq	r2, r2, r0, lsr r5
   22424:	andeq	r2, r2, ip, lsl r5
   22428:	andeq	r2, r2, ip, lsl r5
   2242c:	andeq	r2, r2, ip, lsl r5
   22430:	andeq	r2, r2, ip, lsl r5
   22434:	andeq	r2, r2, ip, lsl r5
   22438:	andeq	r2, r2, ip, lsl r5
   2243c:	andeq	r2, r2, ip, lsl r5
   22440:	andeq	r2, r2, ip, lsl r5
   22444:	andeq	r2, r2, ip, lsl r5
   22448:	andeq	r2, r2, ip, lsl r5
   2244c:	andeq	r2, r2, ip, lsl r5
   22450:	andeq	r2, r2, ip, lsl r5
   22454:	andeq	r2, r2, ip, lsl r5
   22458:	andeq	r2, r2, ip, lsl r5
   2245c:	andeq	r2, r2, ip, lsl r5
   22460:	andeq	r2, r2, ip, lsl r5
   22464:	andeq	r2, r2, ip, lsl r5
   22468:	andeq	r2, r2, ip, lsl r5
   2246c:	andeq	r2, r2, ip, lsl r5
   22470:	andeq	r2, r2, ip, lsl r5
   22474:	andeq	r2, r2, ip, lsl r5
   22478:	andeq	r2, r2, ip, lsl r5
   2247c:	andeq	r2, r2, ip, lsl r5
   22480:	andeq	r2, r2, ip, lsl r5
   22484:	andeq	r2, r2, ip, lsl r5
   22488:	andeq	r2, r2, ip, lsl r5
   2248c:	andeq	r2, r2, ip, lsl r5
   22490:	andeq	r2, r2, ip, lsl r5
   22494:	andeq	r2, r2, ip, lsl r5
   22498:	andeq	r2, r2, ip, lsl r5
   2249c:	andeq	r2, r2, ip, lsl r5
   224a0:	andeq	r2, r2, r0, lsr r5
   224a4:	andeq	r2, r2, ip, lsl r5
   224a8:	andeq	r2, r2, ip, lsl r5
   224ac:	andeq	r2, r2, ip, lsl r5
   224b0:	andeq	r2, r2, ip, lsl r5
   224b4:	andeq	r2, r2, ip, lsl r5
   224b8:	andeq	r2, r2, ip, lsl r5
   224bc:	andeq	r2, r2, ip, lsl r5
   224c0:	andeq	r2, r2, ip, lsl r5
   224c4:	andeq	r2, r2, ip, lsl r5
   224c8:	andeq	r2, r2, ip, lsl r5
   224cc:	andeq	r2, r2, ip, lsl r5
   224d0:	andeq	r2, r2, ip, lsl r5
   224d4:	andeq	r2, r2, ip, lsl r5
   224d8:	andeq	r2, r2, ip, lsl r5
   224dc:	andeq	r2, r2, ip, lsl r5
   224e0:	andeq	r2, r2, ip, lsl r5
   224e4:	andeq	r2, r2, ip, lsl r5
   224e8:	andeq	r2, r2, ip, lsl r5
   224ec:	andeq	r2, r2, ip, lsl r5
   224f0:	andeq	r2, r2, ip, lsl r5
   224f4:	andeq	r2, r2, ip, lsl r5
   224f8:	andeq	r2, r2, ip, lsl r5
   224fc:	andeq	r2, r2, ip, lsl r5
   22500:	andeq	r2, r2, ip, lsl r5
   22504:	andeq	r2, r2, ip, lsl r5
   22508:	andeq	r2, r2, ip, lsl r5
   2250c:	andeq	r2, r2, ip, lsl r5
   22510:	andeq	r2, r2, ip, lsl r5
   22514:	andeq	r2, r2, ip, lsl r5
   22518:	andeq	r2, r2, ip, lsl r5
   2251c:	add	r5, r5, #1
   22520:	add	r4, r4, #1
   22524:	cmp	r4, r7
   22528:	bcc	22388 <__assert_fail@plt+0x102fc>
   2252c:	b	22678 <__assert_fail@plt+0x105ec>
   22530:	str	r2, [sp]
   22534:	str	r3, [sp, #12]
   22538:	str	r3, [sp, #8]
   2253c:	b	22568 <__assert_fail@plt+0x104dc>
   22540:	mvn	r1, #-2147483648	; 0x80000000
   22544:	sub	r1, r1, r5
   22548:	cmp	r0, r1
   2254c:	bgt	2266c <__assert_fail@plt+0x105e0>
   22550:	add	r5, r0, r5
   22554:	mov	r0, r9
   22558:	add	r4, r4, r6
   2255c:	bl	11c78 <mbsinit@plt>
   22560:	cmp	r0, #0
   22564:	bne	22600 <__assert_fail@plt+0x10574>
   22568:	sub	r2, r7, r4
   2256c:	mov	r0, r8
   22570:	mov	r1, r4
   22574:	mov	r3, r9
   22578:	bl	21e2c <__assert_fail@plt+0xfda0>
   2257c:	cmp	r0, #0
   22580:	beq	2259c <__assert_fail@plt+0x10510>
   22584:	mov	r6, r0
   22588:	cmn	r0, #2
   2258c:	beq	225d8 <__assert_fail@plt+0x1054c>
   22590:	cmn	r6, #1
   22594:	bne	225a0 <__assert_fail@plt+0x10514>
   22598:	b	225ec <__assert_fail@plt+0x10560>
   2259c:	mov	r6, #1
   225a0:	ldr	r0, [sp, #4]
   225a4:	bl	11c00 <wcwidth@plt>
   225a8:	cmp	r0, #0
   225ac:	bpl	22540 <__assert_fail@plt+0x104b4>
   225b0:	cmp	sl, #0
   225b4:	bne	22674 <__assert_fail@plt+0x105e8>
   225b8:	ldr	r0, [sp, #4]
   225bc:	bl	11cf0 <iswcntrl@plt>
   225c0:	cmp	r0, #0
   225c4:	bne	22554 <__assert_fail@plt+0x104c8>
   225c8:	cmn	r5, #-2147483647	; 0x80000001
   225cc:	beq	2266c <__assert_fail@plt+0x105e0>
   225d0:	add	r5, r5, #1
   225d4:	b	22554 <__assert_fail@plt+0x104c8>
   225d8:	ldr	r0, [sp]
   225dc:	mov	r4, r7
   225e0:	cmp	r0, #0
   225e4:	beq	225fc <__assert_fail@plt+0x10570>
   225e8:	b	22674 <__assert_fail@plt+0x105e8>
   225ec:	ldr	r0, [sp]
   225f0:	cmp	r0, #0
   225f4:	bne	22674 <__assert_fail@plt+0x105e8>
   225f8:	add	r4, r4, #1
   225fc:	add	r5, r5, #1
   22600:	ldr	r2, [sp]
   22604:	mov	r3, #0
   22608:	b	22524 <__assert_fail@plt+0x10498>
   2260c:	cmp	r6, #1
   22610:	blt	22664 <__assert_fail@plt+0x105d8>
   22614:	and	r6, r5, #2
   22618:	bl	11e64 <__ctype_b_loc@plt>
   2261c:	ldr	r0, [r0]
   22620:	mov	r5, #0
   22624:	b	22630 <__assert_fail@plt+0x105a4>
   22628:	cmp	r4, r7
   2262c:	bcs	22678 <__assert_fail@plt+0x105ec>
   22630:	ldrb	r1, [r4], #1
   22634:	add	r1, r0, r1, lsl #1
   22638:	ldrh	r1, [r1]
   2263c:	tst	r1, #16384	; 0x4000
   22640:	bne	22654 <__assert_fail@plt+0x105c8>
   22644:	cmp	r6, #0
   22648:	bne	22674 <__assert_fail@plt+0x105e8>
   2264c:	tst	r1, #2
   22650:	bne	22628 <__assert_fail@plt+0x1059c>
   22654:	cmn	r5, #-2147483647	; 0x80000001
   22658:	beq	2266c <__assert_fail@plt+0x105e0>
   2265c:	add	r5, r5, #1
   22660:	b	22628 <__assert_fail@plt+0x1059c>
   22664:	mov	r5, #0
   22668:	b	22678 <__assert_fail@plt+0x105ec>
   2266c:	mvn	r5, #-2147483648	; 0x80000000
   22670:	b	22678 <__assert_fail@plt+0x105ec>
   22674:	mvn	r5, #0
   22678:	mov	r0, r5
   2267c:	sub	sp, fp, #28
   22680:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   22684:	mov	r3, r2
   22688:	add	r2, r0, r1, lsl #2
   2268c:	b	22690 <__assert_fail@plt+0x10604>
   22690:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   22694:	add	fp, sp, #28
   22698:	sub	sp, sp, #44	; 0x2c
   2269c:	mov	r5, r3
   226a0:	mov	r8, r0
   226a4:	cmp	r1, #2
   226a8:	bhi	226d4 <__assert_fail@plt+0x10648>
   226ac:	bne	226cc <__assert_fail@plt+0x10640>
   226b0:	ldm	r8, {r6, r7}
   226b4:	mov	r1, r7
   226b8:	mov	r0, r6
   226bc:	blx	r5
   226c0:	cmp	r0, #1
   226c4:	strge	r7, [r8]
   226c8:	strge	r6, [r8, #4]
   226cc:	sub	sp, fp, #28
   226d0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   226d4:	lsr	r9, r1, #1
   226d8:	mov	r7, r1
   226dc:	sub	r1, r1, r1, lsr #1
   226e0:	mov	r3, r5
   226e4:	mov	sl, r2
   226e8:	add	r4, r8, r9, lsl #2
   226ec:	mov	r0, r4
   226f0:	bl	22690 <__assert_fail@plt+0x10604>
   226f4:	cmp	r7, #3
   226f8:	str	r8, [sp, #28]
   226fc:	str	r9, [sp, #36]	; 0x24
   22700:	str	sl, [sp, #32]
   22704:	bne	22714 <__assert_fail@plt+0x10688>
   22708:	ldr	r6, [r8]
   2270c:	str	r6, [sl]
   22710:	b	2283c <__assert_fail@plt+0x107b0>
   22714:	str	r4, [sp, #8]
   22718:	lsr	r4, r7, #2
   2271c:	sub	r1, r9, r7, lsr #2
   22720:	mov	r2, sl
   22724:	mov	r3, r5
   22728:	str	r7, [sp, #12]
   2272c:	add	r0, r8, r4, lsl #2
   22730:	bl	22690 <__assert_fail@plt+0x10604>
   22734:	mov	r0, r8
   22738:	mov	r1, r4
   2273c:	mov	r2, sl
   22740:	mov	r3, r5
   22744:	str	r5, [fp, #-32]	; 0xffffffe0
   22748:	bl	22690 <__assert_fail@plt+0x10604>
   2274c:	ldr	r6, [r8, r4, lsl #2]
   22750:	rsb	r0, r9, #1
   22754:	add	r2, r8, #4
   22758:	mov	r1, #0
   2275c:	mov	r3, r4
   22760:	mov	r5, sl
   22764:	str	r4, [sp, #20]
   22768:	str	r0, [sp, #4]
   2276c:	str	r2, [sp]
   22770:	ldr	r8, [r8, r1, lsl #2]
   22774:	add	sl, r2, r3, lsl #2
   22778:	add	r9, r0, r3
   2277c:	mvn	r7, #3
   22780:	mov	r4, #0
   22784:	str	r3, [sp, #16]
   22788:	str	r1, [sp, #24]
   2278c:	ldr	r2, [fp, #-32]	; 0xffffffe0
   22790:	mov	r0, r8
   22794:	mov	r1, r6
   22798:	blx	r2
   2279c:	cmp	r0, #0
   227a0:	ble	227c0 <__assert_fail@plt+0x10734>
   227a4:	adds	r0, r9, r4
   227a8:	str	r6, [r5, r4, lsl #2]
   227ac:	beq	227fc <__assert_fail@plt+0x10770>
   227b0:	ldr	r6, [sl, r4, lsl #2]
   227b4:	sub	r7, r7, #4
   227b8:	add	r4, r4, #1
   227bc:	b	2278c <__assert_fail@plt+0x10700>
   227c0:	ldr	r1, [sp, #24]
   227c4:	ldr	r0, [sp, #20]
   227c8:	mov	r2, r5
   227cc:	str	r8, [r5, r4, lsl #2]
   227d0:	add	r1, r1, #1
   227d4:	cmp	r1, r0
   227d8:	beq	22918 <__assert_fail@plt+0x1088c>
   227dc:	ldr	r3, [sp, #16]
   227e0:	sub	r2, r2, r7
   227e4:	ldr	r8, [sp, #28]
   227e8:	ldr	r0, [sp, #4]
   227ec:	mov	r5, r2
   227f0:	ldr	r2, [sp]
   227f4:	add	r3, r3, r4
   227f8:	b	22770 <__assert_fail@plt+0x106e4>
   227fc:	ldr	r8, [sp, #28]
   22800:	ldr	r9, [sp, #36]	; 0x24
   22804:	ldr	r3, [sp, #24]
   22808:	mov	r2, r5
   2280c:	add	r0, r2, r4, lsl #2
   22810:	ldr	r2, [sp, #20]
   22814:	add	r1, r8, r3, lsl #2
   22818:	add	r0, r0, #4
   2281c:	sub	r2, r2, r3
   22820:	lsl	r2, r2, #2
   22824:	bl	11c60 <memcpy@plt>
   22828:	ldr	r0, [sp, #32]
   2282c:	ldr	r7, [sp, #12]
   22830:	ldr	r4, [sp, #8]
   22834:	ldr	r5, [fp, #-32]	; 0xffffffe0
   22838:	ldr	r6, [r0]
   2283c:	rsb	r0, r7, #1
   22840:	ldr	r7, [r4]
   22844:	mov	r1, #0
   22848:	add	r2, r8, #4
   2284c:	mov	r3, r9
   22850:	str	r1, [fp, #-32]	; 0xffffffe0
   22854:	mov	r1, #0
   22858:	str	r0, [sp, #16]
   2285c:	str	r2, [sp, #12]
   22860:	add	r8, r8, r1, lsl #2
   22864:	add	r4, r2, r3, lsl #2
   22868:	add	sl, r0, r3
   2286c:	mov	r9, #0
   22870:	str	r1, [sp, #20]
   22874:	str	r3, [sp, #24]
   22878:	mov	r0, r6
   2287c:	mov	r1, r7
   22880:	blx	r5
   22884:	cmp	r0, #0
   22888:	ble	228a4 <__assert_fail@plt+0x10818>
   2288c:	adds	r0, sl, r9
   22890:	str	r7, [r8, r9, lsl #2]
   22894:	beq	228ec <__assert_fail@plt+0x10860>
   22898:	ldr	r7, [r4, r9, lsl #2]
   2289c:	add	r9, r9, #1
   228a0:	b	22878 <__assert_fail@plt+0x107ec>
   228a4:	ldr	r1, [fp, #-32]	; 0xffffffe0
   228a8:	ldr	r0, [sp, #36]	; 0x24
   228ac:	str	r6, [r8, r9, lsl #2]
   228b0:	ldr	r8, [sp, #28]
   228b4:	add	r1, r1, #1
   228b8:	cmp	r1, r0
   228bc:	beq	226cc <__assert_fail@plt+0x10640>
   228c0:	ldr	r0, [sp, #32]
   228c4:	ldr	r3, [sp, #24]
   228c8:	str	r1, [fp, #-32]	; 0xffffffe0
   228cc:	ldr	r2, [sp, #12]
   228d0:	ldr	r6, [r0, r1, lsl #2]
   228d4:	ldr	r0, [sp, #20]
   228d8:	add	r3, r3, r9
   228dc:	add	r0, r0, r9
   228e0:	add	r1, r0, #1
   228e4:	ldr	r0, [sp, #16]
   228e8:	b	22860 <__assert_fail@plt+0x107d4>
   228ec:	ldr	r0, [sp, #32]
   228f0:	ldr	r2, [fp, #-32]	; 0xffffffe0
   228f4:	add	r1, r0, r2, lsl #2
   228f8:	ldr	r0, [sp, #36]	; 0x24
   228fc:	sub	r0, r0, r2
   22900:	lsl	r2, r0, #2
   22904:	add	r0, r8, r9, lsl #2
   22908:	add	r0, r0, #4
   2290c:	sub	sp, fp, #28
   22910:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   22914:	b	11c60 <memcpy@plt>
   22918:	ldr	r9, [sp, #36]	; 0x24
   2291c:	ldr	r0, [sp, #16]
   22920:	str	r9, [sp, #20]
   22924:	add	r3, r0, r4
   22928:	ldr	r8, [sp, #28]
   2292c:	b	2280c <__assert_fail@plt+0x10780>
   22930:	push	{fp, lr}
   22934:	mov	fp, sp
   22938:	sub	sp, sp, #24
   2293c:	mvn	ip, #0
   22940:	str	ip, [sp, #8]
   22944:	mov	ip, #0
   22948:	str	ip, [sp, #4]
   2294c:	str	ip, [sp]
   22950:	ldr	ip, [fp, #12]
   22954:	str	ip, [sp, #16]
   22958:	ldr	ip, [fp, #8]
   2295c:	str	ip, [sp, #12]
   22960:	bl	2296c <__assert_fail@plt+0x108e0>
   22964:	mov	sp, fp
   22968:	pop	{fp, pc}
   2296c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   22970:	add	fp, sp, #28
   22974:	sub	sp, sp, #140	; 0x8c
   22978:	sub	sp, sp, #1024	; 0x400
   2297c:	mov	r4, r3
   22980:	mov	r6, r2
   22984:	str	r1, [sp, #104]	; 0x68
   22988:	mov	r8, r0
   2298c:	bl	11ed0 <__errno_location@plt>
   22990:	mov	r2, r4
   22994:	ldrb	r3, [r6]
   22998:	str	r0, [sp, #76]	; 0x4c
   2299c:	ldr	r0, [r0]
   229a0:	movw	r5, #47938	; 0xbb42
   229a4:	ldr	r1, [r2, #8]!
   229a8:	movt	r5, #2
   229ac:	str	r0, [sp, #72]	; 0x48
   229b0:	cmp	r1, #0
   229b4:	mov	r7, r1
   229b8:	movweq	r7, #12
   229bc:	cmp	r1, #12
   229c0:	subgt	r7, r1, #12
   229c4:	ldr	r1, [r2, #32]
   229c8:	cmp	r1, #0
   229cc:	movne	r5, r1
   229d0:	cmp	r3, #0
   229d4:	beq	2451c <__assert_fail@plt+0x12490>
   229d8:	sub	r0, fp, #48	; 0x30
   229dc:	mvn	r1, #13
   229e0:	str	r2, [sp, #60]	; 0x3c
   229e4:	str	r7, [sp, #56]	; 0x38
   229e8:	ldr	r7, [fp, #16]
   229ec:	movw	ip, #52428	; 0xcccc
   229f0:	sub	r9, r5, #2
   229f4:	str	r4, [sp, #88]	; 0x58
   229f8:	mov	lr, #0
   229fc:	str	r5, [sp, #64]	; 0x40
   22a00:	sub	r1, r1, r0
   22a04:	movt	ip, #3276	; 0xccc
   22a08:	str	r9, [sp, #32]
   22a0c:	str	r1, [sp, #44]	; 0x2c
   22a10:	add	r1, sp, #112	; 0x70
   22a14:	add	r1, r1, #1
   22a18:	str	r1, [sp, #48]	; 0x30
   22a1c:	sub	r1, fp, #53	; 0x35
   22a20:	add	r2, r1, #3
   22a24:	add	r1, r1, #2
   22a28:	str	r1, [sp, #84]	; 0x54
   22a2c:	add	r1, r4, #12
   22a30:	mov	r4, #-2147483648	; 0x80000000
   22a34:	str	r2, [sp, #68]	; 0x44
   22a38:	str	r1, [sp, #52]	; 0x34
   22a3c:	sub	r1, r0, #2
   22a40:	str	r1, [sp, #28]
   22a44:	add	r1, r0, #8
   22a48:	str	r1, [sp, #24]
   22a4c:	add	r1, r0, #13
   22a50:	add	r0, r0, #14
   22a54:	str	r0, [sp, #80]	; 0x50
   22a58:	mvn	r0, r0
   22a5c:	str	r1, [sp, #40]	; 0x28
   22a60:	str	r0, [sp, #36]	; 0x24
   22a64:	b	22a80 <__assert_fail@plt+0x109f4>
   22a68:	mov	r8, #0
   22a6c:	add	lr, r5, lr
   22a70:	ldrb	r3, [r6, #1]!
   22a74:	mvn	r7, #0
   22a78:	cmp	r3, #0
   22a7c:	beq	24520 <__assert_fail@plt+0x12494>
   22a80:	uxtb	r1, r3
   22a84:	str	r8, [sp, #108]	; 0x6c
   22a88:	cmp	r1, #37	; 0x25
   22a8c:	bne	22b34 <__assert_fail@plt+0x10aa8>
   22a90:	mov	r0, #0
   22a94:	mov	r9, #0
   22a98:	mov	sl, r6
   22a9c:	str	r0, [sp, #100]	; 0x64
   22aa0:	ldr	r0, [fp, #8]
   22aa4:	mov	r5, r0
   22aa8:	add	r1, sl, #2
   22aac:	add	sl, sl, #1
   22ab0:	b	22ac8 <__assert_fail@plt+0x10a3c>
   22ab4:	cmp	r0, #95	; 0x5f
   22ab8:	bne	22b24 <__assert_fail@plt+0x10a98>
   22abc:	add	r1, r1, #1
   22ac0:	add	sl, sl, #1
   22ac4:	mov	r9, r0
   22ac8:	ldrb	r0, [sl]
   22acc:	sub	r2, r0, #35	; 0x23
   22ad0:	cmp	r2, #13
   22ad4:	bhi	22ab4 <__assert_fail@plt+0x10a28>
   22ad8:	add	r3, pc, #0
   22adc:	ldr	pc, [r3, r2, lsl #2]
   22ae0:	andeq	r2, r2, r8, lsl fp
   22ae4:	andeq	r2, r2, r4, lsr #23
   22ae8:	andeq	r2, r2, r4, lsr #23
   22aec:	andeq	r2, r2, r4, lsr #23
   22af0:	andeq	r2, r2, r4, lsr #23
   22af4:	andeq	r2, r2, r4, lsr #23
   22af8:	andeq	r2, r2, r4, lsr #23
   22afc:	andeq	r2, r2, r4, lsr #23
   22b00:			; <UNDEFINED> instruction: 0x00022abc
   22b04:	andeq	r2, r2, r4, lsr #23
   22b08:			; <UNDEFINED> instruction: 0x00022abc
   22b0c:	andeq	r2, r2, r4, lsr #23
   22b10:	andeq	r2, r2, r4, lsr #23
   22b14:			; <UNDEFINED> instruction: 0x00022abc
   22b18:	mov	r0, #1
   22b1c:	str	r0, [sp, #100]	; 0x64
   22b20:	b	22aa8 <__assert_fail@plt+0x10a1c>
   22b24:	cmp	r0, #94	; 0x5e
   22b28:	bne	22ba4 <__assert_fail@plt+0x10b18>
   22b2c:	mov	r5, #1
   22b30:	b	22aa8 <__assert_fail@plt+0x10a1c>
   22b34:	ldr	r0, [sp, #104]	; 0x68
   22b38:	bic	r1, r7, r7, asr #31
   22b3c:	cmp	r1, #1
   22b40:	mov	r5, r1
   22b44:	movls	r5, #1
   22b48:	sub	r2, r0, lr
   22b4c:	cmp	r5, r2
   22b50:	bcs	24544 <__assert_fail@plt+0x124b8>
   22b54:	ldr	r8, [sp, #108]	; 0x6c
   22b58:	cmp	r8, #0
   22b5c:	beq	22a68 <__assert_fail@plt+0x109dc>
   22b60:	cmp	r1, #2
   22b64:	bcc	22b9c <__assert_fail@plt+0x10b10>
   22b68:	sub	r4, r1, #1
   22b6c:	mov	r0, r8
   22b70:	mov	r1, #32
   22b74:	mov	r7, lr
   22b78:	mov	r2, r4
   22b7c:	bl	11ef4 <memset@plt>
   22b80:	ldr	r8, [sp, #108]	; 0x6c
   22b84:	ldrb	r3, [r6]
   22b88:	movw	ip, #52428	; 0xcccc
   22b8c:	mov	lr, r7
   22b90:	movt	ip, #3276	; 0xccc
   22b94:	add	r8, r8, r4
   22b98:	mov	r4, #-2147483648	; 0x80000000
   22b9c:	strb	r3, [r8], #1
   22ba0:	b	22a6c <__assert_fail@plt+0x109e0>
   22ba4:	sub	r2, r0, #48	; 0x30
   22ba8:	cmp	r2, #9
   22bac:	bhi	22c18 <__assert_fail@plt+0x10b8c>
   22bb0:	mov	r7, #0
   22bb4:	cmn	r7, #1
   22bb8:	bgt	22bf0 <__assert_fail@plt+0x10b64>
   22bbc:	b	22bfc <__assert_fail@plt+0x10b70>
   22bc0:	add	r2, r7, r7, lsl #2
   22bc4:	lsl	r3, r2, #1
   22bc8:	uxtab	r0, r3, r0
   22bcc:	sub	r7, r0, #48	; 0x30
   22bd0:	cmp	r7, r2, lsl #1
   22bd4:	mvnvs	r7, #-2147483648	; 0x80000000
   22bd8:	ldrb	r0, [r1], #1
   22bdc:	sub	r2, r0, #48	; 0x30
   22be0:	cmp	r2, #10
   22be4:	bcs	22c14 <__assert_fail@plt+0x10b88>
   22be8:	cmn	r7, #1
   22bec:	ble	22bfc <__assert_fail@plt+0x10b70>
   22bf0:	cmp	r7, ip
   22bf4:	ble	22bc0 <__assert_fail@plt+0x10b34>
   22bf8:	b	22c0c <__assert_fail@plt+0x10b80>
   22bfc:	beq	22bc0 <__assert_fail@plt+0x10b34>
   22c00:	sdiv	r2, r4, r7
   22c04:	cmp	r2, #10
   22c08:	bge	22bc0 <__assert_fail@plt+0x10b34>
   22c0c:	mvn	r7, #-2147483648	; 0x80000000
   22c10:	b	22bd8 <__assert_fail@plt+0x10b4c>
   22c14:	sub	sl, r1, #1
   22c18:	cmp	r0, #79	; 0x4f
   22c1c:	cmpne	r0, #69	; 0x45
   22c20:	bne	22c2c <__assert_fail@plt+0x10ba0>
   22c24:	ldrb	r1, [sl, #1]!
   22c28:	b	22c34 <__assert_fail@plt+0x10ba8>
   22c2c:	mov	r1, r0
   22c30:	mov	r0, #0
   22c34:	cmp	r1, #122	; 0x7a
   22c38:	str	r5, [sp, #96]	; 0x60
   22c3c:	bhi	23694 <__assert_fail@plt+0x11608>
   22c40:	movw	r8, #26215	; 0x6667
   22c44:	movw	r3, #46918	; 0xb746
   22c48:	add	r2, pc, #16
   22c4c:	mov	r5, #0
   22c50:	mvn	r4, #0
   22c54:	movt	r8, #26214	; 0x6666
   22c58:	movt	r3, #2
   22c5c:	ldr	pc, [r2, r1, lsl #2]
   22c60:	ldrdeq	r2, [r2], -r4
   22c64:	muleq	r2, r4, r6
   22c68:	muleq	r2, r4, r6
   22c6c:	muleq	r2, r4, r6
   22c70:	muleq	r2, r4, r6
   22c74:	muleq	r2, r4, r6
   22c78:	muleq	r2, r4, r6
   22c7c:	muleq	r2, r4, r6
   22c80:	muleq	r2, r4, r6
   22c84:	muleq	r2, r4, r6
   22c88:	muleq	r2, r4, r6
   22c8c:	muleq	r2, r4, r6
   22c90:	muleq	r2, r4, r6
   22c94:	muleq	r2, r4, r6
   22c98:	muleq	r2, r4, r6
   22c9c:	muleq	r2, r4, r6
   22ca0:	muleq	r2, r4, r6
   22ca4:	muleq	r2, r4, r6
   22ca8:	muleq	r2, r4, r6
   22cac:	muleq	r2, r4, r6
   22cb0:	muleq	r2, r4, r6
   22cb4:	muleq	r2, r4, r6
   22cb8:	muleq	r2, r4, r6
   22cbc:	muleq	r2, r4, r6
   22cc0:	muleq	r2, r4, r6
   22cc4:	muleq	r2, r4, r6
   22cc8:	muleq	r2, r4, r6
   22ccc:	muleq	r2, r4, r6
   22cd0:	muleq	r2, r4, r6
   22cd4:	muleq	r2, r4, r6
   22cd8:	muleq	r2, r4, r6
   22cdc:	muleq	r2, r4, r6
   22ce0:	muleq	r2, r4, r6
   22ce4:	muleq	r2, r4, r6
   22ce8:	muleq	r2, r4, r6
   22cec:	muleq	r2, r4, r6
   22cf0:	muleq	r2, r4, r6
   22cf4:	andeq	r2, r2, r8, asr #31
   22cf8:	muleq	r2, r4, r6
   22cfc:	muleq	r2, r4, r6
   22d00:	muleq	r2, r4, r6
   22d04:	muleq	r2, r4, r6
   22d08:	muleq	r2, r4, r6
   22d0c:	muleq	r2, r4, r6
   22d10:	muleq	r2, r4, r6
   22d14:	muleq	r2, r4, r6
   22d18:	muleq	r2, r4, r6
   22d1c:	muleq	r2, r4, r6
   22d20:	muleq	r2, r4, r6
   22d24:	muleq	r2, r4, r6
   22d28:	muleq	r2, r4, r6
   22d2c:	muleq	r2, r4, r6
   22d30:	muleq	r2, r4, r6
   22d34:	muleq	r2, r4, r6
   22d38:	muleq	r2, r4, r6
   22d3c:	muleq	r2, r4, r6
   22d40:	muleq	r2, r4, r6
   22d44:	muleq	r2, r4, r6
   22d48:	ldrdeq	r2, [r2], -ip
   22d4c:	muleq	r2, r4, r6
   22d50:	muleq	r2, r4, r6
   22d54:	muleq	r2, r4, r6
   22d58:	muleq	r2, r4, r6
   22d5c:	muleq	r2, r4, r6
   22d60:	muleq	r2, r4, r6
   22d64:	strdeq	r2, [r2], -r4
   22d68:	andeq	r3, r2, r8, lsl r0
   22d6c:	andeq	r3, r2, ip, lsr r0
   22d70:	andeq	r3, r2, r0, asr r0
   22d74:	muleq	r2, r4, r6
   22d78:	andeq	r3, r2, r4, rrx
   22d7c:	andeq	r2, r2, ip, asr #28
   22d80:	muleq	r2, r0, r0
   22d84:	andeq	r3, r2, r4, lsr #1
   22d88:	muleq	r2, r4, r6
   22d8c:	muleq	r2, r4, r6
   22d90:	muleq	r2, r4, r6
   22d94:	strheq	r3, [r2], -r4
   22d98:	andeq	r3, r2, r8, asr #1
   22d9c:	muleq	r2, r4, r6
   22da0:	andeq	r3, r2, r4, lsr r1
   22da4:	muleq	r2, r4, r6
   22da8:	andeq	r3, r2, r4, ror r1
   22dac:	andeq	r3, r2, r8, asr r1
   22db0:	andeq	r3, r2, ip, ror #2
   22db4:	andeq	r3, r2, ip, lsl r2
   22db8:	andeq	r2, r2, ip, asr #28
   22dbc:	andeq	r3, r2, r8, asr #4
   22dc0:	muleq	r2, r4, r2
   22dc4:	andeq	r3, r2, r8, lsr #5
   22dc8:	andeq	r3, r2, r4, ror #5
   22dcc:	muleq	r2, r4, r6
   22dd0:	muleq	r2, r4, r6
   22dd4:	muleq	r2, r4, r6
   22dd8:	muleq	r2, r4, r6
   22ddc:	muleq	r2, r4, r6
   22de0:	muleq	r2, r4, r6
   22de4:	andeq	r3, r2, r8, asr r3
   22de8:	andeq	r2, r2, r8, lsr #31
   22dec:	andeq	r3, r2, ip, ror r3
   22df0:	muleq	r2, r0, r3
   22df4:	andeq	r3, r2, r4, lsr #7
   22df8:	muleq	r2, r4, r6
   22dfc:	andeq	r2, r2, ip, asr #28
   22e00:	andeq	r2, r2, r8, lsr #31
   22e04:	muleq	r2, r4, r6
   22e08:			; <UNDEFINED> instruction: 0x000233b4
   22e0c:	ldrdeq	r3, [r2], -r0
   22e10:	andeq	r3, r2, r4, ror #7
   22e14:	strdeq	r3, [r2], -ip
   22e18:	andeq	r3, r2, r8, lsr #8
   22e1c:	muleq	r2, r4, r6
   22e20:	andeq	r3, r2, r8, lsr r1
   22e24:	andeq	r3, r2, r4, lsl #9
   22e28:	andeq	r3, r2, r0, ror lr
   22e2c:	andeq	r3, r2, ip, lsr #9
   22e30:	andeq	r3, r2, r0, ror r5
   22e34:	andeq	r3, r2, ip, asr #11
   22e38:	muleq	r2, r4, r6
   22e3c:	andeq	r3, r2, r0, lsl #12
   22e40:	andeq	r3, r2, r8, lsl r6
   22e44:	andeq	r3, r2, ip, lsr #12
   22e48:	andeq	r3, r2, ip, asr #12
   22e4c:	cmp	r0, #69	; 0x45
   22e50:	beq	23694 <__assert_fail@plt+0x11608>
   22e54:	ldr	r2, [sp, #88]	; 0x58
   22e58:	movw	r3, #9363	; 0x2493
   22e5c:	str	lr, [sp, #92]	; 0x5c
   22e60:	movw	r6, #382	; 0x17e
   22e64:	movt	r3, #37449	; 0x9249
   22e68:	ldr	r8, [r2, #24]
   22e6c:	ldr	r5, [r2, #28]
   22e70:	ldr	lr, [r2, #20]
   22e74:	sub	r2, r5, r8
   22e78:	cmp	lr, #0
   22e7c:	add	r2, r2, r6
   22e80:	smmla	r4, r2, r3, r2
   22e84:	asr	r6, r4, #2
   22e88:	add	r4, r6, r4, lsr #31
   22e8c:	rsb	r4, r4, r4, lsl #3
   22e90:	sub	r2, r4, r2
   22e94:	add	r2, r5, r2
   22e98:	add	r4, r2, #3
   22e9c:	mvn	r2, #99	; 0x63
   22ea0:	movwmi	r2, #300	; 0x12c
   22ea4:	add	r2, r2, lr
   22ea8:	cmn	r4, #1
   22eac:	ble	2382c <__assert_fail@plt+0x117a0>
   22eb0:	movw	r6, #365	; 0x16d
   22eb4:	tst	r2, #3
   22eb8:	bne	22f04 <__assert_fail@plt+0x10e78>
   22ebc:	movw	r6, #34079	; 0x851f
   22ec0:	mov	ip, #100	; 0x64
   22ec4:	movt	r6, #20971	; 0x51eb
   22ec8:	smmul	r6, r2, r6
   22ecc:	asr	r3, r6, #5
   22ed0:	add	r3, r3, r6, lsr #31
   22ed4:	mls	ip, r3, ip, r2
   22ed8:	asr	r3, r6, #7
   22edc:	add	r3, r3, r6, lsr #31
   22ee0:	mov	r6, #400	; 0x190
   22ee4:	mls	r2, r3, r6, r2
   22ee8:	movw	r6, #365	; 0x16d
   22eec:	cmp	r2, #0
   22ef0:	movweq	r6, #366	; 0x16e
   22ef4:	cmp	ip, #0
   22ef8:	movw	ip, #52428	; 0xcccc
   22efc:	movt	ip, #3276	; 0xccc
   22f00:	movwne	r6, #366	; 0x16e
   22f04:	add	r2, r8, r6
   22f08:	movw	r3, #382	; 0x17e
   22f0c:	sub	r2, r5, r2
   22f10:	movw	r5, #9363	; 0x2493
   22f14:	movt	r5, #37449	; 0x9249
   22f18:	add	r2, r2, r3
   22f1c:	smmla	r2, r2, r5, r2
   22f20:	asr	r3, r2, #2
   22f24:	add	r2, r3, r2, lsr #31
   22f28:	movw	r3, #379	; 0x17b
   22f2c:	rsb	r2, r2, r2, lsl #3
   22f30:	add	r2, r8, r2
   22f34:	sub	r2, r2, r3
   22f38:	cmn	r2, #1
   22f3c:	movgt	r4, r2
   22f40:	mvn	r2, r2
   22f44:	lsr	r3, r2, #31
   22f48:	cmp	r1, #71	; 0x47
   22f4c:	beq	238b8 <__assert_fail@plt+0x1182c>
   22f50:	cmp	r1, #103	; 0x67
   22f54:	bne	238fc <__assert_fail@plt+0x11870>
   22f58:	movw	r2, #34079	; 0x851f
   22f5c:	movt	r2, #20971	; 0x51eb
   22f60:	smmul	r6, lr, r2
   22f64:	asr	r5, r6, #5
   22f68:	add	r6, r5, r6, lsr #31
   22f6c:	mov	r5, #100	; 0x64
   22f70:	mls	r6, r6, r5, lr
   22f74:	add	r6, r3, r6
   22f78:	smmul	r2, r6, r2
   22f7c:	asr	r4, r2, #5
   22f80:	add	r2, r4, r2, lsr #31
   22f84:	mls	r6, r2, r5, r6
   22f88:	mov	r2, #2
   22f8c:	str	r2, [sp, #100]	; 0x64
   22f90:	mov	r2, #0
   22f94:	cmn	r6, #1
   22f98:	ble	241e4 <__assert_fail@plt+0x12158>
   22f9c:	ldr	lr, [sp, #92]	; 0x5c
   22fa0:	mov	r3, r6
   22fa4:	b	24230 <__assert_fail@plt+0x121a4>
   22fa8:	ldr	r2, [sp, #96]	; 0x60
   22fac:	ldr	r3, [sp, #100]	; 0x64
   22fb0:	mov	r5, #0
   22fb4:	cmp	r0, #69	; 0x45
   22fb8:	orr	r2, r3, r2
   22fbc:	str	r2, [sp, #96]	; 0x60
   22fc0:	beq	23694 <__assert_fail@plt+0x11608>
   22fc4:	b	23e70 <__assert_fail@plt+0x11de4>
   22fc8:	sub	r0, sl, #1
   22fcc:	cmp	r0, r6
   22fd0:	beq	23d70 <__assert_fail@plt+0x11ce4>
   22fd4:	sub	sl, sl, #1
   22fd8:	b	23694 <__assert_fail@plt+0x11608>
   22fdc:	mov	r5, #1
   22fe0:	ldrb	r2, [sl, r5]
   22fe4:	cmp	r2, #58	; 0x3a
   22fe8:	bne	23640 <__assert_fail@plt+0x115b4>
   22fec:	add	r5, r5, #1
   22ff0:	b	22fe0 <__assert_fail@plt+0x10f54>
   22ff4:	cmp	r0, #0
   22ff8:	bne	23694 <__assert_fail@plt+0x11608>
   22ffc:	ldr	r1, [sp, #96]	; 0x60
   23000:	ldr	r2, [sp, #100]	; 0x64
   23004:	mov	r5, #0
   23008:	orr	r1, r2, r1
   2300c:	str	r1, [sp, #96]	; 0x60
   23010:	mov	r1, #65	; 0x41
   23014:	b	23e70 <__assert_fail@plt+0x11de4>
   23018:	cmp	r0, #69	; 0x45
   2301c:	beq	23694 <__assert_fail@plt+0x11608>
   23020:	ldr	r1, [sp, #96]	; 0x60
   23024:	ldr	r2, [sp, #100]	; 0x64
   23028:	mov	r5, #0
   2302c:	orr	r1, r2, r1
   23030:	str	r1, [sp, #96]	; 0x60
   23034:	mov	r1, #66	; 0x42
   23038:	b	23e70 <__assert_fail@plt+0x11de4>
   2303c:	cmp	r0, #69	; 0x45
   23040:	bne	23bd4 <__assert_fail@plt+0x11b48>
   23044:	mov	r5, #0
   23048:	mov	r1, #67	; 0x43
   2304c:	b	23e70 <__assert_fail@plt+0x11de4>
   23050:	cmp	r0, #0
   23054:	bne	23694 <__assert_fail@plt+0x11608>
   23058:	movw	r3, #55028	; 0xd6f4
   2305c:	movt	r3, #2
   23060:	b	23174 <__assert_fail@plt+0x110e8>
   23064:	cmp	r0, #0
   23068:	bne	23694 <__assert_fail@plt+0x11608>
   2306c:	movw	r3, #55037	; 0xd6fd
   23070:	cmp	r9, #0
   23074:	movt	r3, #2
   23078:	bne	24204 <__assert_fail@plt+0x12178>
   2307c:	cmp	r7, #0
   23080:	bpl	24204 <__assert_fail@plt+0x12178>
   23084:	mov	r9, #43	; 0x2b
   23088:	mov	r4, #4
   2308c:	b	23174 <__assert_fail@plt+0x110e8>
   23090:	cmp	r0, #69	; 0x45
   23094:	beq	23694 <__assert_fail@plt+0x11608>
   23098:	ldr	r2, [sp, #60]	; 0x3c
   2309c:	ldr	r3, [r2]
   230a0:	b	23910 <__assert_fail@plt+0x11884>
   230a4:	cmp	r0, #69	; 0x45
   230a8:	beq	23694 <__assert_fail@plt+0x11608>
   230ac:	ldr	r3, [sp, #56]	; 0x38
   230b0:	b	23910 <__assert_fail@plt+0x11884>
   230b4:	cmp	r0, #69	; 0x45
   230b8:	beq	23694 <__assert_fail@plt+0x11608>
   230bc:	ldr	r2, [sp, #88]	; 0x58
   230c0:	ldr	r3, [r2, #4]
   230c4:	b	23910 <__assert_fail@plt+0x11884>
   230c8:	cmp	r0, #69	; 0x45
   230cc:	beq	23694 <__assert_fail@plt+0x11608>
   230d0:	ldr	r1, [fp, #24]
   230d4:	cmp	r7, #1
   230d8:	mov	r4, #9
   230dc:	mov	r0, #8
   230e0:	sub	r6, fp, #48	; 0x30
   230e4:	movwlt	r7, #9
   230e8:	cmp	r7, r4
   230ec:	blt	23114 <__assert_fail@plt+0x11088>
   230f0:	cmp	r4, #2
   230f4:	blt	23c2c <__assert_fail@plt+0x11ba0>
   230f8:	smmul	r2, r1, r8
   230fc:	asr	r3, r2, #2
   23100:	add	r2, r3, r2, lsr #31
   23104:	add	r2, r2, r2, lsl #2
   23108:	sub	r2, r1, r2, lsl #1
   2310c:	cmp	r2, #0
   23110:	bne	23c2c <__assert_fail@plt+0x11ba0>
   23114:	smmul	r1, r1, r8
   23118:	sub	r0, r0, #1
   2311c:	sub	r4, r4, #1
   23120:	asr	r2, r1, #2
   23124:	add	r1, r2, r1, lsr #31
   23128:	cmp	r7, r4
   2312c:	blt	23114 <__assert_fail@plt+0x11088>
   23130:	b	230f0 <__assert_fail@plt+0x11064>
   23134:	mov	r5, #1
   23138:	ldr	r1, [sp, #100]	; 0x64
   2313c:	ldr	r2, [sp, #96]	; 0x60
   23140:	orr	r5, r1, r5
   23144:	eor	r1, r1, #1
   23148:	and	r2, r2, r1
   2314c:	mov	r1, #112	; 0x70
   23150:	str	r2, [sp, #96]	; 0x60
   23154:	b	23e70 <__assert_fail@plt+0x11de4>
   23158:	cmp	r0, #69	; 0x45
   2315c:	beq	23694 <__assert_fail@plt+0x11608>
   23160:	ldr	r2, [sp, #88]	; 0x58
   23164:	ldr	r3, [r2]
   23168:	b	23910 <__assert_fail@plt+0x11884>
   2316c:	movw	r3, #55046	; 0xd706
   23170:	movt	r3, #2
   23174:	ldr	r0, [sp, #96]	; 0x60
   23178:	str	r3, [sp, #100]	; 0x64
   2317c:	mov	r2, r3
   23180:	ldr	r3, [sp, #88]	; 0x58
   23184:	mvn	r1, #0
   23188:	str	lr, [sp, #92]	; 0x5c
   2318c:	and	r6, r0, #1
   23190:	ldr	r0, [fp, #20]
   23194:	stm	sp, {r6, r9}
   23198:	str	r4, [sp, #8]
   2319c:	str	r0, [sp, #12]
   231a0:	ldr	r0, [fp, #24]
   231a4:	str	r0, [sp, #16]
   231a8:	mov	r0, #0
   231ac:	bl	2296c <__assert_fail@plt+0x108e0>
   231b0:	subs	r3, r9, #45	; 0x2d
   231b4:	ldr	lr, [sp, #92]	; 0x5c
   231b8:	ldr	r1, [sp, #104]	; 0x68
   231bc:	mov	r5, r0
   231c0:	movne	r3, r7
   231c4:	cmp	r7, #0
   231c8:	movwmi	r3, #0
   231cc:	cmp	r3, r0
   231d0:	movhi	r5, r3
   231d4:	sub	r7, r1, lr
   231d8:	cmp	r5, r7
   231dc:	bcs	24544 <__assert_fail@plt+0x124b8>
   231e0:	ldr	r2, [sp, #108]	; 0x6c
   231e4:	movw	ip, #52428	; 0xcccc
   231e8:	movt	ip, #3276	; 0xccc
   231ec:	cmp	r2, #0
   231f0:	beq	23818 <__assert_fail@plt+0x1178c>
   231f4:	cmp	r3, r0
   231f8:	str	r0, [sp, #96]	; 0x60
   231fc:	bls	23824 <__assert_fail@plt+0x11798>
   23200:	cmp	r9, #48	; 0x30
   23204:	sub	r8, r3, r0
   23208:	cmpne	r9, #43	; 0x2b
   2320c:	bne	24180 <__assert_fail@plt+0x120f4>
   23210:	mov	r0, r2
   23214:	mov	r1, #48	; 0x30
   23218:	b	24188 <__assert_fail@plt+0x120fc>
   2321c:	cmp	r0, #69	; 0x45
   23220:	beq	23694 <__assert_fail@plt+0x11608>
   23224:	ldr	r3, [sp, #88]	; 0x58
   23228:	ldr	r2, [r3, #24]
   2322c:	ldr	r3, [r3, #28]
   23230:	sub	r2, r3, r2
   23234:	movw	r3, #9363	; 0x2493
   23238:	movt	r3, #37449	; 0x9249
   2323c:	add	r2, r2, #7
   23240:	smmla	r2, r2, r3, r2
   23244:	b	23288 <__assert_fail@plt+0x111fc>
   23248:	cmp	r0, #69	; 0x45
   2324c:	beq	23694 <__assert_fail@plt+0x11608>
   23250:	ldr	r3, [sp, #88]	; 0x58
   23254:	movw	r6, #9363	; 0x2493
   23258:	movt	r6, #37449	; 0x9249
   2325c:	ldr	r2, [r3, #24]
   23260:	ldr	r3, [r3, #28]
   23264:	add	r2, r2, #6
   23268:	smmla	r5, r2, r6, r2
   2326c:	asr	r4, r5, #2
   23270:	add	r5, r4, r5, lsr #31
   23274:	rsb	r5, r5, r5, lsl #3
   23278:	sub	r2, r5, r2
   2327c:	add	r2, r3, r2
   23280:	add	r2, r2, #7
   23284:	smmla	r2, r2, r6, r2
   23288:	asr	r3, r2, #2
   2328c:	add	r3, r3, r2, lsr #31
   23290:	b	23910 <__assert_fail@plt+0x11884>
   23294:	cmp	r0, #79	; 0x4f
   23298:	beq	23694 <__assert_fail@plt+0x11608>
   2329c:	mov	r5, #0
   232a0:	mov	r1, #88	; 0x58
   232a4:	b	23e70 <__assert_fail@plt+0x11de4>
   232a8:	cmp	r0, #69	; 0x45
   232ac:	beq	23e68 <__assert_fail@plt+0x11ddc>
   232b0:	cmp	r0, #79	; 0x4f
   232b4:	beq	23694 <__assert_fail@plt+0x11608>
   232b8:	ldr	r2, [sp, #88]	; 0x58
   232bc:	movw	r6, #63636	; 0xf894
   232c0:	mov	r4, #4
   232c4:	movt	r6, #65535	; 0xffff
   232c8:	ldr	r3, [r2, #20]
   232cc:	mov	r2, #0
   232d0:	cmp	r3, r6
   232d4:	movw	r6, #1900	; 0x76c
   232d8:	movwlt	r2, #1
   232dc:	add	r3, r3, r6
   232e0:	b	23c24 <__assert_fail@plt+0x11b98>
   232e4:	ldr	r0, [sp, #64]	; 0x40
   232e8:	subs	r5, r9, #45	; 0x2d
   232ec:	bicne	r5, r7, r7, asr #31
   232f0:	mov	r7, lr
   232f4:	bl	11eac <strlen@plt>
   232f8:	mov	r4, r0
   232fc:	cmp	r5, r0
   23300:	mov	r6, r0
   23304:	ldr	r0, [sp, #104]	; 0x68
   23308:	movhi	r6, r5
   2330c:	sub	r0, r0, r7
   23310:	cmp	r6, r0
   23314:	bcs	24544 <__assert_fail@plt+0x124b8>
   23318:	ldr	r8, [sp, #108]	; 0x6c
   2331c:	movw	ip, #52428	; 0xcccc
   23320:	mov	lr, r7
   23324:	movt	ip, #3276	; 0xccc
   23328:	cmp	r8, #0
   2332c:	beq	23dd8 <__assert_fail@plt+0x11d4c>
   23330:	cmp	r5, r4
   23334:	bls	240e4 <__assert_fail@plt+0x12058>
   23338:	uxtb	r1, r9
   2333c:	sub	r5, r5, r4
   23340:	cmp	r1, #48	; 0x30
   23344:	cmpne	r1, #43	; 0x2b
   23348:	bne	24340 <__assert_fail@plt+0x122b4>
   2334c:	mov	r0, r8
   23350:	mov	r1, #48	; 0x30
   23354:	b	24348 <__assert_fail@plt+0x122bc>
   23358:	cmp	r0, #0
   2335c:	bne	23694 <__assert_fail@plt+0x11608>
   23360:	ldr	r1, [sp, #96]	; 0x60
   23364:	ldr	r2, [sp, #100]	; 0x64
   23368:	mov	r5, #0
   2336c:	orr	r1, r2, r1
   23370:	str	r1, [sp, #96]	; 0x60
   23374:	mov	r1, #97	; 0x61
   23378:	b	23e70 <__assert_fail@plt+0x11de4>
   2337c:	cmp	r0, #79	; 0x4f
   23380:	beq	23694 <__assert_fail@plt+0x11608>
   23384:	mov	r5, #0
   23388:	mov	r1, #99	; 0x63
   2338c:	b	23e70 <__assert_fail@plt+0x11de4>
   23390:	cmp	r0, #69	; 0x45
   23394:	beq	23694 <__assert_fail@plt+0x11608>
   23398:	ldr	r2, [sp, #52]	; 0x34
   2339c:	ldr	r3, [r2]
   233a0:	b	23910 <__assert_fail@plt+0x11884>
   233a4:	ldr	r2, [sp, #52]	; 0x34
   233a8:	cmp	r0, #69	; 0x45
   233ac:	bne	233dc <__assert_fail@plt+0x11350>
   233b0:	b	23694 <__assert_fail@plt+0x11608>
   233b4:	cmp	r0, #69	; 0x45
   233b8:	beq	23694 <__assert_fail@plt+0x11608>
   233bc:	ldr	r2, [sp, #88]	; 0x58
   233c0:	mov	r4, #3
   233c4:	str	r4, [sp, #100]	; 0x64
   233c8:	ldr	r3, [r2, #28]
   233cc:	b	23414 <__assert_fail@plt+0x11388>
   233d0:	ldr	r2, [sp, #60]	; 0x3c
   233d4:	cmp	r0, #69	; 0x45
   233d8:	beq	23694 <__assert_fail@plt+0x11608>
   233dc:	ldr	r3, [r2]
   233e0:	b	233f0 <__assert_fail@plt+0x11364>
   233e4:	ldr	r3, [sp, #56]	; 0x38
   233e8:	cmp	r0, #69	; 0x45
   233ec:	beq	23694 <__assert_fail@plt+0x11608>
   233f0:	cmp	r9, #0
   233f4:	movweq	r9, #95	; 0x5f
   233f8:	b	23910 <__assert_fail@plt+0x11884>
   233fc:	cmp	r0, #69	; 0x45
   23400:	beq	23694 <__assert_fail@plt+0x11608>
   23404:	ldr	r2, [sp, #88]	; 0x58
   23408:	mov	r4, #2
   2340c:	str	r4, [sp, #100]	; 0x64
   23410:	ldr	r3, [r2, #16]
   23414:	mov	r2, #0
   23418:	cmn	r3, #1
   2341c:	add	r3, r3, #1
   23420:	movwlt	r2, #1
   23424:	b	2391c <__assert_fail@plt+0x11890>
   23428:	subs	r0, r9, #45	; 0x2d
   2342c:	ldr	r1, [sp, #104]	; 0x68
   23430:	bicne	r0, r7, r7, asr #31
   23434:	cmp	r0, #1
   23438:	mov	r5, r0
   2343c:	movls	r5, #1
   23440:	sub	r1, r1, lr
   23444:	cmp	r5, r1
   23448:	bcs	24544 <__assert_fail@plt+0x124b8>
   2344c:	ldr	r8, [sp, #108]	; 0x6c
   23450:	mov	r4, #-2147483648	; 0x80000000
   23454:	cmp	r8, #0
   23458:	beq	23dd0 <__assert_fail@plt+0x11d44>
   2345c:	cmp	r0, #2
   23460:	bcc	2442c <__assert_fail@plt+0x123a0>
   23464:	uxtb	r1, r9
   23468:	sub	r4, r0, #1
   2346c:	cmp	r1, #48	; 0x30
   23470:	cmpne	r1, #43	; 0x2b
   23474:	bne	24400 <__assert_fail@plt+0x12374>
   23478:	mov	r0, r8
   2347c:	mov	r1, #48	; 0x30
   23480:	b	24408 <__assert_fail@plt+0x1237c>
   23484:	ldr	r2, [sp, #88]	; 0x58
   23488:	mov	r3, #11
   2348c:	mov	r4, #1
   23490:	ldr	r2, [r2, #16]
   23494:	mul	r2, r2, r3
   23498:	mov	r3, #1
   2349c:	str	r3, [sp, #100]	; 0x64
   234a0:	add	r3, r4, r2, asr #5
   234a4:	mov	r2, #0
   234a8:	b	2391c <__assert_fail@plt+0x11890>
   234ac:	ldr	r2, [sp, #88]	; 0x58
   234b0:	mov	r0, #28
   234b4:	add	r1, sp, #112	; 0x70
   234b8:	str	lr, [sp, #92]	; 0x5c
   234bc:	mov	r4, r1
   234c0:	mov	r3, r2
   234c4:	add	r2, r2, #16
   234c8:	vld1.32	{d16-d17}, [r3], r0
   234cc:	vld1.32	{d18-d19}, [r2]
   234d0:	add	r2, r1, #16
   234d4:	vld1.32	{d20-d21}, [r3]
   234d8:	vst1.64	{d16-d17}, [r4], r0
   234dc:	mvn	r0, #0
   234e0:	vst1.64	{d18-d19}, [r2]
   234e4:	vst1.32	{d20-d21}, [r4]
   234e8:	str	r0, [r4]
   234ec:	ldr	r0, [fp, #20]
   234f0:	bl	26f0c <_obstack_memory_used@@Base+0x2620>
   234f4:	ldr	r1, [r4]
   234f8:	cmp	r1, #0
   234fc:	bmi	24560 <__assert_fail@plt+0x124d4>
   23500:	ldr	r1, [sp, #40]	; 0x28
   23504:	lsr	r2, r0, #31
   23508:	mov	r3, r0
   2350c:	smmul	r6, r3, r8
   23510:	cmp	r0, #0
   23514:	asr	r5, r6, #2
   23518:	add	r6, r5, r6, lsr #31
   2351c:	add	r5, r6, r6, lsl #2
   23520:	sub	r5, r3, r5, lsl #1
   23524:	add	r3, r3, #9
   23528:	rsbmi	r5, r5, #0
   2352c:	cmp	r3, #18
   23530:	mov	r3, r6
   23534:	add	r5, r5, #48	; 0x30
   23538:	strb	r5, [r1], #-1
   2353c:	bhi	2350c <__assert_fail@plt+0x11480>
   23540:	ldr	lr, [sp, #92]	; 0x5c
   23544:	cmp	r7, #0
   23548:	movw	ip, #52428	; 0xcccc
   2354c:	add	r8, r1, #1
   23550:	mov	r4, #0
   23554:	mov	r6, sl
   23558:	movwmi	r7, #1
   2355c:	cmp	r9, #0
   23560:	movt	ip, #3276	; 0xccc
   23564:	movweq	r9, #48	; 0x30
   23568:	mov	r3, r7
   2356c:	b	239b0 <__assert_fail@plt+0x11924>
   23570:	subs	r0, r9, #45	; 0x2d
   23574:	ldr	r1, [sp, #104]	; 0x68
   23578:	bicne	r0, r7, r7, asr #31
   2357c:	cmp	r0, #1
   23580:	mov	r5, r0
   23584:	movls	r5, #1
   23588:	sub	r1, r1, lr
   2358c:	cmp	r5, r1
   23590:	bcs	24544 <__assert_fail@plt+0x124b8>
   23594:	ldr	r8, [sp, #108]	; 0x6c
   23598:	mov	r4, #-2147483648	; 0x80000000
   2359c:	cmp	r8, #0
   235a0:	beq	23dd0 <__assert_fail@plt+0x11d44>
   235a4:	cmp	r0, #2
   235a8:	bcc	24464 <__assert_fail@plt+0x123d8>
   235ac:	uxtb	r1, r9
   235b0:	sub	r4, r0, #1
   235b4:	cmp	r1, #48	; 0x30
   235b8:	cmpne	r1, #43	; 0x2b
   235bc:	bne	24438 <__assert_fail@plt+0x123ac>
   235c0:	mov	r0, r8
   235c4:	mov	r1, #48	; 0x30
   235c8:	b	24440 <__assert_fail@plt+0x123b4>
   235cc:	ldr	r2, [sp, #88]	; 0x58
   235d0:	movw	r3, #9363	; 0x2493
   235d4:	movt	r3, #37449	; 0x9249
   235d8:	ldr	r2, [r2, #24]
   235dc:	add	r2, r2, #6
   235e0:	smmla	r3, r2, r3, r2
   235e4:	asr	r6, r3, #2
   235e8:	add	r3, r6, r3, lsr #31
   235ec:	rsb	r3, r3, r3, lsl #3
   235f0:	sub	r2, r2, r3
   235f4:	add	r3, r2, #1
   235f8:	mov	r2, #1
   235fc:	b	23914 <__assert_fail@plt+0x11888>
   23600:	cmp	r0, #69	; 0x45
   23604:	beq	23694 <__assert_fail@plt+0x11608>
   23608:	ldr	r2, [sp, #88]	; 0x58
   2360c:	ldr	r3, [r2, #24]
   23610:	mov	r2, #1
   23614:	b	23914 <__assert_fail@plt+0x11888>
   23618:	cmp	r0, #79	; 0x4f
   2361c:	beq	23694 <__assert_fail@plt+0x11608>
   23620:	mov	r5, #0
   23624:	mov	r1, #120	; 0x78
   23628:	b	23e70 <__assert_fail@plt+0x11de4>
   2362c:	cmp	r0, #69	; 0x45
   23630:	bne	23d30 <__assert_fail@plt+0x11ca4>
   23634:	mov	r5, #0
   23638:	mov	r1, #121	; 0x79
   2363c:	b	23e70 <__assert_fail@plt+0x11de4>
   23640:	cmp	r2, #122	; 0x7a
   23644:	bne	23694 <__assert_fail@plt+0x11608>
   23648:	add	sl, sl, r5
   2364c:	ldr	r3, [sp, #88]	; 0x58
   23650:	ldr	r2, [r3, #32]
   23654:	cmp	r2, #0
   23658:	bmi	238ec <__assert_fail@plt+0x11860>
   2365c:	mov	r8, lr
   23660:	ldr	lr, [r3, #36]	; 0x24
   23664:	cmp	lr, #0
   23668:	bmi	23de0 <__assert_fail@plt+0x11d54>
   2366c:	mov	r2, #0
   23670:	bne	23de4 <__assert_fail@plt+0x11d58>
   23674:	ldr	r2, [sp, #64]	; 0x40
   23678:	ldrb	r2, [r2]
   2367c:	sub	r2, r2, #45	; 0x2d
   23680:	clz	r2, r2
   23684:	lsr	r2, r2, #5
   23688:	cmp	r5, #3
   2368c:	bls	23dec <__assert_fail@plt+0x11d60>
   23690:	mov	lr, r8
   23694:	subs	r5, r9, #45	; 0x2d
   23698:	ldr	r0, [sp, #104]	; 0x68
   2369c:	sub	r8, sl, r6
   236a0:	ldr	r3, [sp, #108]	; 0x6c
   236a4:	bicne	r5, r7, r7, asr #31
   236a8:	add	r4, r8, #1
   236ac:	mov	r7, r4
   236b0:	cmp	r5, r4
   236b4:	movhi	r7, r5
   236b8:	sub	r0, r0, lr
   236bc:	cmp	r7, r0
   236c0:	bcs	24544 <__assert_fail@plt+0x124b8>
   236c4:	cmp	r3, #0
   236c8:	beq	236fc <__assert_fail@plt+0x11670>
   236cc:	cmp	r5, r4
   236d0:	mov	r1, r3
   236d4:	bls	23728 <__assert_fail@plt+0x1169c>
   236d8:	uxtb	r0, r9
   236dc:	sub	r2, r5, r4
   236e0:	str	lr, [sp, #92]	; 0x5c
   236e4:	cmp	r0, #48	; 0x30
   236e8:	cmpne	r0, #43	; 0x2b
   236ec:	bne	23704 <__assert_fail@plt+0x11678>
   236f0:	mov	r0, r3
   236f4:	mov	r1, #48	; 0x30
   236f8:	b	2370c <__assert_fail@plt+0x11680>
   236fc:	mov	r8, #0
   23700:	b	23808 <__assert_fail@plt+0x1177c>
   23704:	mov	r0, r3
   23708:	mov	r1, #32
   2370c:	mov	r9, r2
   23710:	bl	11ef4 <memset@plt>
   23714:	ldr	r0, [sp, #108]	; 0x6c
   23718:	ldr	lr, [sp, #92]	; 0x5c
   2371c:	movw	ip, #52428	; 0xcccc
   23720:	movt	ip, #3276	; 0xccc
   23724:	add	r1, r0, r9
   23728:	ldr	r0, [sp, #96]	; 0x60
   2372c:	str	r1, [sp, #100]	; 0x64
   23730:	tst	r0, #1
   23734:	beq	237e0 <__assert_fail@plt+0x11754>
   23738:	cmp	r4, #0
   2373c:	beq	23800 <__assert_fail@plt+0x11774>
   23740:	sub	r0, sl, r6
   23744:	str	lr, [sp, #92]	; 0x5c
   23748:	add	r9, r0, #1
   2374c:	bl	11e40 <__ctype_toupper_loc@plt>
   23750:	tst	r9, #1
   23754:	mov	r1, r4
   23758:	beq	23774 <__assert_fail@plt+0x116e8>
   2375c:	ldrb	r1, [sl]
   23760:	ldr	r2, [r0]
   23764:	ldr	r1, [r2, r1, lsl #2]
   23768:	ldr	r2, [sp, #100]	; 0x64
   2376c:	strb	r1, [r2, r8]
   23770:	mov	r1, r8
   23774:	ldr	lr, [sp, #92]	; 0x5c
   23778:	movw	ip, #52428	; 0xcccc
   2377c:	cmp	sl, r6
   23780:	movt	ip, #3276	; 0xccc
   23784:	beq	23800 <__assert_fail@plt+0x11774>
   23788:	cmp	r5, r9
   2378c:	ldr	r3, [sp, #108]	; 0x6c
   23790:	add	r2, r1, r6
   23794:	movhi	r9, r5
   23798:	add	r2, r2, r9
   2379c:	sub	r2, r2, sl
   237a0:	add	r2, r3, r2
   237a4:	sub	r3, r6, #2
   237a8:	sub	r2, r2, #2
   237ac:	add	r6, r3, r1
   237b0:	ldr	r5, [r0]
   237b4:	ldrb	r6, [r6, #1]
   237b8:	ldr	r6, [r5, r6, lsl #2]
   237bc:	strb	r6, [r2]
   237c0:	ldrb	r6, [r3, r1]
   237c4:	ldr	r5, [r0]
   237c8:	subs	r1, r1, #2
   237cc:	ldr	r6, [r5, r6, lsl #2]
   237d0:	strb	r6, [r2, #-1]
   237d4:	sub	r2, r2, #2
   237d8:	bne	237ac <__assert_fail@plt+0x11720>
   237dc:	b	23800 <__assert_fail@plt+0x11774>
   237e0:	mov	r0, r1
   237e4:	mov	r1, r6
   237e8:	mov	r2, r4
   237ec:	mov	r5, lr
   237f0:	bl	11c60 <memcpy@plt>
   237f4:	movw	ip, #52428	; 0xcccc
   237f8:	mov	lr, r5
   237fc:	movt	ip, #3276	; 0xccc
   23800:	ldr	r0, [sp, #100]	; 0x64
   23804:	add	r8, r0, r4
   23808:	add	lr, r7, lr
   2380c:	mov	r6, sl
   23810:	mov	r4, #-2147483648	; 0x80000000
   23814:	b	22a70 <__assert_fail@plt+0x109e4>
   23818:	mov	r8, #0
   2381c:	mov	r4, #-2147483648	; 0x80000000
   23820:	b	24508 <__assert_fail@plt+0x1247c>
   23824:	ldr	r3, [sp, #88]	; 0x58
   23828:	b	2419c <__assert_fail@plt+0x12110>
   2382c:	sub	r2, r2, #1
   23830:	movw	r4, #365	; 0x16d
   23834:	tst	r2, #3
   23838:	bne	2387c <__assert_fail@plt+0x117f0>
   2383c:	movw	r4, #34079	; 0x851f
   23840:	movt	r4, #20971	; 0x51eb
   23844:	smmul	r4, r2, r4
   23848:	asr	r6, r4, #5
   2384c:	add	r3, r6, r4, lsr #31
   23850:	mov	r6, #100	; 0x64
   23854:	mls	r3, r3, r6, r2
   23858:	asr	r6, r4, #7
   2385c:	add	r4, r6, r4, lsr #31
   23860:	mov	r6, #400	; 0x190
   23864:	mls	r2, r4, r6, r2
   23868:	movw	r4, #365	; 0x16d
   2386c:	cmp	r2, #0
   23870:	movweq	r4, #366	; 0x16e
   23874:	cmp	r3, #0
   23878:	movwne	r4, #366	; 0x16e
   2387c:	add	r2, r4, r5
   23880:	movw	r5, #9363	; 0x2493
   23884:	movw	r4, #382	; 0x17e
   23888:	sub	r3, r4, r8
   2388c:	movt	r5, #37449	; 0x9249
   23890:	add	r2, r3, r2
   23894:	smmla	r2, r2, r5, r2
   23898:	asr	r4, r2, #2
   2389c:	add	r2, r4, r2, lsr #31
   238a0:	rsb	r2, r2, r2, lsl #3
   238a4:	sub	r2, r2, r3
   238a8:	mvn	r3, #0
   238ac:	add	r4, r2, #3
   238b0:	cmp	r1, #71	; 0x47
   238b4:	bne	22f50 <__assert_fail@plt+0x10ec4>
   238b8:	movw	r2, #63636	; 0xf894
   238bc:	movt	r2, #65535	; 0xffff
   238c0:	sub	r6, r2, r3
   238c4:	add	r3, lr, r3
   238c8:	mov	r2, #0
   238cc:	cmp	lr, r6
   238d0:	ldr	lr, [sp, #92]	; 0x5c
   238d4:	movw	r6, #1900	; 0x76c
   238d8:	add	r3, r3, r6
   238dc:	mov	r6, #4
   238e0:	movwlt	r2, #1
   238e4:	str	r6, [sp, #100]	; 0x64
   238e8:	b	24230 <__assert_fail@plt+0x121a4>
   238ec:	ldr	r8, [sp, #108]	; 0x6c
   238f0:	mov	r6, sl
   238f4:	mov	r4, #-2147483648	; 0x80000000
   238f8:	b	22a70 <__assert_fail@plt+0x109e4>
   238fc:	smmla	r2, r4, r5, r4
   23900:	ldr	lr, [sp, #92]	; 0x5c
   23904:	asr	r3, r2, #2
   23908:	add	r2, r3, r2, lsr #31
   2390c:	add	r3, r2, #1
   23910:	mov	r2, #2
   23914:	str	r2, [sp, #100]	; 0x64
   23918:	lsr	r2, r3, #31
   2391c:	cmp	r2, #0
   23920:	mov	r6, #0
   23924:	mov	r4, #0
   23928:	movwne	r2, #1
   2392c:	cmp	r0, #79	; 0x4f
   23930:	moveq	r5, #0
   23934:	cmpeq	r2, #0
   23938:	beq	23e70 <__assert_fail@plt+0x11de4>
   2393c:	ldr	r8, [sp, #80]	; 0x50
   23940:	cmp	r2, #0
   23944:	rsbne	r3, r3, #0
   23948:	tst	r6, #1
   2394c:	asr	r6, r6, #1
   23950:	movne	r0, #58	; 0x3a
   23954:	strbne	r0, [r8, #-1]!
   23958:	movw	r0, #52429	; 0xcccd
   2395c:	cmp	r3, #9
   23960:	movt	r0, #52428	; 0xcccc
   23964:	umull	r0, r1, r3, r0
   23968:	lsr	r0, r1, #3
   2396c:	add	r1, r0, r0, lsl #2
   23970:	sub	r1, r3, r1, lsl #1
   23974:	mov	r3, r0
   23978:	orr	r1, r1, #48	; 0x30
   2397c:	strb	r1, [r8, #-1]!
   23980:	bhi	23948 <__assert_fail@plt+0x118bc>
   23984:	cmp	r6, #0
   23988:	mov	r3, r0
   2398c:	bne	23948 <__assert_fail@plt+0x118bc>
   23990:	cmp	r7, #0
   23994:	ldr	r3, [sp, #100]	; 0x64
   23998:	mov	r6, sl
   2399c:	movpl	r3, r7
   239a0:	cmp	r4, #0
   239a4:	movwne	r4, #43	; 0x2b
   239a8:	cmp	r9, #0
   239ac:	movweq	r9, #48	; 0x30
   239b0:	ldr	r1, [sp, #80]	; 0x50
   239b4:	cmp	r2, #0
   239b8:	mov	r0, r3
   239bc:	movwne	r4, #45	; 0x2d
   239c0:	cmp	r4, #0
   239c4:	subne	r0, r0, #1
   239c8:	sub	sl, r1, r8
   239cc:	sub	r0, r0, sl
   239d0:	cmp	r0, #1
   239d4:	movwlt	r0, #0
   239d8:	subs	r5, r9, #45	; 0x2d
   239dc:	movne	r5, r0
   239e0:	cmp	r4, #0
   239e4:	beq	23a30 <__assert_fail@plt+0x119a4>
   239e8:	ldr	r7, [sp, #108]	; 0x6c
   239ec:	cmp	r9, #95	; 0x5f
   239f0:	bne	23a44 <__assert_fail@plt+0x119b8>
   239f4:	cmp	r7, #0
   239f8:	beq	23a38 <__assert_fail@plt+0x119ac>
   239fc:	mov	r0, r7
   23a00:	mov	r1, #32
   23a04:	mov	r2, r5
   23a08:	str	lr, [sp, #92]	; 0x5c
   23a0c:	str	r3, [sp, #100]	; 0x64
   23a10:	bl	11ef4 <memset@plt>
   23a14:	ldr	r7, [sp, #108]	; 0x6c
   23a18:	ldr	r3, [sp, #100]	; 0x64
   23a1c:	ldr	lr, [sp, #92]	; 0x5c
   23a20:	movw	ip, #52428	; 0xcccc
   23a24:	movt	ip, #3276	; 0xccc
   23a28:	add	r7, r7, r5
   23a2c:	b	23a3c <__assert_fail@plt+0x119b0>
   23a30:	ldr	r7, [sp, #108]	; 0x6c
   23a34:	b	23a68 <__assert_fail@plt+0x119dc>
   23a38:	mov	r7, #0
   23a3c:	sub	r3, r3, r5
   23a40:	add	lr, r5, lr
   23a44:	ldr	r0, [sp, #104]	; 0x68
   23a48:	sub	r0, r0, lr
   23a4c:	cmp	r0, #2
   23a50:	bcc	24544 <__assert_fail@plt+0x124b8>
   23a54:	cmp	r7, #0
   23a58:	sub	r3, r3, #1
   23a5c:	add	lr, lr, #1
   23a60:	strbne	r4, [r7], #1
   23a64:	moveq	r7, #0
   23a68:	subs	r5, r9, #45	; 0x2d
   23a6c:	ldr	r0, [sp, #104]	; 0x68
   23a70:	mov	r4, sl
   23a74:	bicne	r5, r3, r3, asr #31
   23a78:	cmp	r5, sl
   23a7c:	movhi	r4, r5
   23a80:	sub	r0, r0, lr
   23a84:	cmp	r4, r0
   23a88:	bcs	24544 <__assert_fail@plt+0x124b8>
   23a8c:	cmp	r7, #0
   23a90:	beq	23ac0 <__assert_fail@plt+0x11a34>
   23a94:	cmp	r5, sl
   23a98:	mov	r1, r7
   23a9c:	bls	23aec <__assert_fail@plt+0x11a60>
   23aa0:	cmp	r9, #48	; 0x30
   23aa4:	sub	r2, r5, sl
   23aa8:	str	lr, [sp, #92]	; 0x5c
   23aac:	cmpne	r9, #43	; 0x2b
   23ab0:	bne	23acc <__assert_fail@plt+0x11a40>
   23ab4:	mov	r0, r7
   23ab8:	mov	r1, #48	; 0x30
   23abc:	b	23ad4 <__assert_fail@plt+0x11a48>
   23ac0:	mov	r8, #0
   23ac4:	add	lr, r4, lr
   23ac8:	b	23810 <__assert_fail@plt+0x11784>
   23acc:	mov	r0, r7
   23ad0:	mov	r1, #32
   23ad4:	mov	r9, r2
   23ad8:	bl	11ef4 <memset@plt>
   23adc:	ldr	lr, [sp, #92]	; 0x5c
   23ae0:	movw	ip, #52428	; 0xcccc
   23ae4:	add	r1, r7, r9
   23ae8:	movt	ip, #3276	; 0xccc
   23aec:	ldr	r0, [sp, #96]	; 0x60
   23af0:	tst	r0, #1
   23af4:	beq	23ba4 <__assert_fail@plt+0x11b18>
   23af8:	mov	r9, r1
   23afc:	cmp	sl, #0
   23b00:	str	r7, [sp, #108]	; 0x6c
   23b04:	beq	23bc8 <__assert_fail@plt+0x11b3c>
   23b08:	str	lr, [sp, #92]	; 0x5c
   23b0c:	mvn	r7, r8
   23b10:	bl	11e40 <__ctype_toupper_loc@plt>
   23b14:	tst	sl, #1
   23b18:	mov	r1, sl
   23b1c:	beq	23b34 <__assert_fail@plt+0x11aa8>
   23b20:	sub	r1, sl, #1
   23b24:	ldr	r3, [r0]
   23b28:	ldrb	r2, [r8, r1]
   23b2c:	ldr	r2, [r3, r2, lsl #2]
   23b30:	strb	r2, [r9, r1]
   23b34:	ldr	r2, [sp, #44]	; 0x2c
   23b38:	ldr	lr, [sp, #92]	; 0x5c
   23b3c:	movw	ip, #52428	; 0xcccc
   23b40:	movt	ip, #3276	; 0xccc
   23b44:	cmp	r7, r2
   23b48:	beq	23bc8 <__assert_fail@plt+0x11b3c>
   23b4c:	cmp	r5, sl
   23b50:	add	r2, r1, r8
   23b54:	ldr	r3, [sp, #36]	; 0x24
   23b58:	movls	r5, sl
   23b5c:	add	r2, r2, r5
   23b60:	ldr	r5, [sp, #108]	; 0x6c
   23b64:	add	r3, r5, r3
   23b68:	add	r2, r3, r2
   23b6c:	sub	r3, r8, #2
   23b70:	add	r5, r3, r1
   23b74:	ldr	r7, [r0]
   23b78:	ldrb	r5, [r5, #1]
   23b7c:	ldr	r7, [r7, r5, lsl #2]
   23b80:	strb	r7, [r2]
   23b84:	ldrb	r7, [r3, r1]
   23b88:	ldr	r5, [r0]
   23b8c:	subs	r1, r1, #2
   23b90:	ldr	r7, [r5, r7, lsl #2]
   23b94:	strb	r7, [r2, #-1]
   23b98:	sub	r2, r2, #2
   23b9c:	bne	23b70 <__assert_fail@plt+0x11ae4>
   23ba0:	b	23bc8 <__assert_fail@plt+0x11b3c>
   23ba4:	mov	r9, r1
   23ba8:	mov	r0, r1
   23bac:	mov	r1, r8
   23bb0:	mov	r2, sl
   23bb4:	mov	r5, lr
   23bb8:	bl	11c60 <memcpy@plt>
   23bbc:	movw	ip, #52428	; 0xcccc
   23bc0:	mov	lr, r5
   23bc4:	movt	ip, #3276	; 0xccc
   23bc8:	add	r8, r9, sl
   23bcc:	add	lr, r4, lr
   23bd0:	b	23810 <__assert_fail@plt+0x11784>
   23bd4:	ldr	r2, [sp, #88]	; 0x58
   23bd8:	movw	r5, #63636	; 0xf894
   23bdc:	mov	r3, #0
   23be0:	mvn	r4, #98	; 0x62
   23be4:	movt	r5, #65535	; 0xffff
   23be8:	ldr	r6, [r2, #20]
   23bec:	mov	r2, #0
   23bf0:	cmp	r6, r5
   23bf4:	movwge	r3, #1
   23bf8:	cmp	r6, r5
   23bfc:	and	r3, r3, r6, lsr #31
   23c00:	movwlt	r2, #1
   23c04:	smlabb	r3, r3, r4, r6
   23c08:	movw	r4, #34079	; 0x851f
   23c0c:	movt	r4, #20971	; 0x51eb
   23c10:	smmul	r3, r3, r4
   23c14:	asr	r4, r3, #5
   23c18:	add	r3, r4, r3, lsr #31
   23c1c:	mov	r4, #2
   23c20:	add	r3, r3, #19
   23c24:	str	r4, [sp, #100]	; 0x64
   23c28:	b	24230 <__assert_fail@plt+0x121a4>
   23c2c:	cmp	r4, #1
   23c30:	blt	23c64 <__assert_fail@plt+0x11bd8>
   23c34:	smmul	r2, r1, r8
   23c38:	cmp	r0, #0
   23c3c:	asr	r3, r2, #2
   23c40:	add	r2, r3, r2, lsr #31
   23c44:	add	r3, r2, r2, lsl #2
   23c48:	sub	r1, r1, r3, lsl #1
   23c4c:	add	r1, r1, #48	; 0x30
   23c50:	strb	r1, [r6, r0]
   23c54:	sub	r1, r0, #1
   23c58:	mov	r0, r1
   23c5c:	mov	r1, r2
   23c60:	bgt	23c34 <__assert_fail@plt+0x11ba8>
   23c64:	ldr	r0, [sp, #104]	; 0x68
   23c68:	cmp	r9, #0
   23c6c:	movweq	r9, #48	; 0x30
   23c70:	sub	r8, r0, lr
   23c74:	cmp	r4, r8
   23c78:	bcs	24544 <__assert_fail@plt+0x124b8>
   23c7c:	ldr	r0, [sp, #108]	; 0x6c
   23c80:	mov	r2, #0
   23c84:	mov	r5, #0
   23c88:	cmp	r0, #0
   23c8c:	beq	242d4 <__assert_fail@plt+0x12248>
   23c90:	ldr	r1, [sp, #96]	; 0x60
   23c94:	tst	r1, #1
   23c98:	beq	242ac <__assert_fail@plt+0x12220>
   23c9c:	cmp	r4, #0
   23ca0:	beq	242c8 <__assert_fail@plt+0x1223c>
   23ca4:	mov	r5, lr
   23ca8:	bl	11e40 <__ctype_toupper_loc@plt>
   23cac:	tst	r4, #1
   23cb0:	mov	r1, r4
   23cb4:	beq	23cdc <__assert_fail@plt+0x11c50>
   23cb8:	ldr	r1, [sp, #24]
   23cbc:	ldr	r2, [r0]
   23cc0:	add	r1, r1, r4
   23cc4:	ldrb	r1, [r1, #-9]
   23cc8:	ldr	r1, [r2, r1, lsl #2]
   23ccc:	ldr	r2, [sp, #108]	; 0x6c
   23cd0:	add	r2, r2, r4
   23cd4:	strb	r1, [r2, #-1]
   23cd8:	sub	r1, r4, #1
   23cdc:	ldr	r6, [sp, #28]
   23ce0:	movw	ip, #52428	; 0xcccc
   23ce4:	cmp	r4, #1
   23ce8:	mov	lr, r5
   23cec:	movt	ip, #3276	; 0xccc
   23cf0:	beq	242c8 <__assert_fail@plt+0x1223c>
   23cf4:	ldr	r2, [sp, #108]	; 0x6c
   23cf8:	sub	r2, r2, #2
   23cfc:	add	r3, r6, r1
   23d00:	ldr	r5, [r0]
   23d04:	ldrb	r3, [r3, #1]
   23d08:	ldr	r3, [r5, r3, lsl #2]
   23d0c:	add	r5, r2, r1
   23d10:	strb	r3, [r5, #1]
   23d14:	ldrb	r3, [r6, r1]
   23d18:	ldr	r5, [r0]
   23d1c:	ldr	r3, [r5, r3, lsl #2]
   23d20:	strb	r3, [r2, r1]
   23d24:	subs	r1, r1, #2
   23d28:	bne	23cfc <__assert_fail@plt+0x11c70>
   23d2c:	b	242c8 <__assert_fail@plt+0x1223c>
   23d30:	ldr	r2, [sp, #88]	; 0x58
   23d34:	ldr	r6, [r2, #20]
   23d38:	movw	r2, #34079	; 0x851f
   23d3c:	movt	r2, #20971	; 0x51eb
   23d40:	smmul	r2, r6, r2
   23d44:	asr	r3, r2, #5
   23d48:	add	r2, r3, r2, lsr #31
   23d4c:	mov	r3, #100	; 0x64
   23d50:	mls	r5, r2, r3, r6
   23d54:	mov	r2, #0
   23d58:	mov	r3, #2
   23d5c:	cmn	r5, #1
   23d60:	ble	24218 <__assert_fail@plt+0x1218c>
   23d64:	str	r3, [sp, #100]	; 0x64
   23d68:	mov	r3, r5
   23d6c:	b	24230 <__assert_fail@plt+0x121a4>
   23d70:	subs	r0, r9, #45	; 0x2d
   23d74:	ldr	r1, [sp, #104]	; 0x68
   23d78:	bicne	r0, r7, r7, asr #31
   23d7c:	cmp	r0, #1
   23d80:	mov	r5, r0
   23d84:	movls	r5, #1
   23d88:	sub	r1, r1, lr
   23d8c:	cmp	r5, r1
   23d90:	bcs	24544 <__assert_fail@plt+0x124b8>
   23d94:	ldr	r8, [sp, #108]	; 0x6c
   23d98:	mov	r4, #-2147483648	; 0x80000000
   23d9c:	cmp	r8, #0
   23da0:	beq	23dd0 <__assert_fail@plt+0x11d44>
   23da4:	mov	r1, #37	; 0x25
   23da8:	cmp	r0, #2
   23dac:	bcc	24504 <__assert_fail@plt+0x12478>
   23db0:	uxtb	r1, r9
   23db4:	sub	r4, r0, #1
   23db8:	cmp	r1, #48	; 0x30
   23dbc:	cmpne	r1, #43	; 0x2b
   23dc0:	bne	244d4 <__assert_fail@plt+0x12448>
   23dc4:	mov	r0, r8
   23dc8:	mov	r1, #48	; 0x30
   23dcc:	b	244dc <__assert_fail@plt+0x12450>
   23dd0:	mov	r8, #0
   23dd4:	b	24508 <__assert_fail@plt+0x1247c>
   23dd8:	mov	r8, #0
   23ddc:	b	243f0 <__assert_fail@plt+0x12364>
   23de0:	mov	r2, #1
   23de4:	cmp	r5, #3
   23de8:	bhi	23690 <__assert_fail@plt+0x11604>
   23dec:	movw	ip, #34953	; 0x8889
   23df0:	movt	ip, #34952	; 0x8888
   23df4:	smmla	r6, lr, ip, lr
   23df8:	asr	r3, r6, #5
   23dfc:	add	r6, r3, r6, lsr #31
   23e00:	smmla	r3, r6, ip, r6
   23e04:	asr	r4, r3, #5
   23e08:	add	r3, r4, r3, lsr #31
   23e0c:	rsb	r3, r3, r3, lsl #4
   23e10:	sub	ip, r6, r3, lsl #2
   23e14:	movw	r3, #46021	; 0xb3c5
   23e18:	movt	r3, #37282	; 0x91a2
   23e1c:	smmla	r3, lr, r3, lr
   23e20:	asr	r4, r3, #11
   23e24:	add	r3, r4, r3, lsr #31
   23e28:	rsb	r4, r6, r6, lsl #4
   23e2c:	add	r6, pc, #4
   23e30:	sub	r4, lr, r4, lsl #2
   23e34:	ldr	pc, [r6, r5, lsl #2]
   23e38:	andeq	r3, r2, r8, asr #28
   23e3c:	andeq	r4, r2, ip, lsr #9
   23e40:	andeq	r4, r2, r4, lsl #5
   23e44:	andeq	r4, r2, ip, ror r2
   23e48:	mov	r6, #100	; 0x64
   23e4c:	mla	r3, r3, r6, ip
   23e50:	mov	r6, #5
   23e54:	str	r6, [sp, #100]	; 0x64
   23e58:	mov	r4, #1
   23e5c:	mov	r6, #0
   23e60:	mov	lr, r8
   23e64:	b	244c8 <__assert_fail@plt+0x1243c>
   23e68:	mov	r5, #0
   23e6c:	mov	r1, #89	; 0x59
   23e70:	movw	r2, #9504	; 0x2520
   23e74:	cmp	r0, #0
   23e78:	ldr	r3, [sp, #88]	; 0x58
   23e7c:	str	lr, [sp, #92]	; 0x5c
   23e80:	strh	r2, [fp, #-53]	; 0xffffffcb
   23e84:	ldr	r2, [sp, #84]	; 0x54
   23e88:	ldrne	r2, [sp, #68]	; 0x44
   23e8c:	strbne	r0, [fp, #-51]	; 0xffffffcd
   23e90:	mov	r0, #0
   23e94:	strb	r0, [r2, #1]
   23e98:	strb	r1, [r2]
   23e9c:	add	r0, sp, #112	; 0x70
   23ea0:	sub	r2, fp, #53	; 0x35
   23ea4:	mov	r1, #1024	; 0x400
   23ea8:	bl	11e1c <strftime@plt>
   23eac:	cmp	r0, #0
   23eb0:	beq	23f1c <__assert_fail@plt+0x11e90>
   23eb4:	subs	r4, r9, #45	; 0x2d
   23eb8:	mov	r6, r0
   23ebc:	sub	r8, r0, #1
   23ec0:	ldr	lr, [sp, #92]	; 0x5c
   23ec4:	ldr	r0, [sp, #104]	; 0x68
   23ec8:	movne	r4, r7
   23ecc:	cmp	r7, #0
   23ed0:	mov	r7, r8
   23ed4:	movwmi	r4, #0
   23ed8:	cmp	r4, r8
   23edc:	movhi	r7, r4
   23ee0:	sub	r0, r0, lr
   23ee4:	cmp	r7, r0
   23ee8:	bcs	24544 <__assert_fail@plt+0x124b8>
   23eec:	ldr	r0, [sp, #108]	; 0x6c
   23ef0:	cmp	r0, #0
   23ef4:	beq	23f38 <__assert_fail@plt+0x11eac>
   23ef8:	cmp	r4, r8
   23efc:	mov	r1, r0
   23f00:	bls	23f60 <__assert_fail@plt+0x11ed4>
   23f04:	cmp	r9, #48	; 0x30
   23f08:	sub	r2, r4, r8
   23f0c:	cmpne	r9, #43	; 0x2b
   23f10:	bne	23f4c <__assert_fail@plt+0x11ec0>
   23f14:	mov	r1, #48	; 0x30
   23f18:	b	23f50 <__assert_fail@plt+0x11ec4>
   23f1c:	ldr	lr, [sp, #92]	; 0x5c
   23f20:	ldr	r8, [sp, #108]	; 0x6c
   23f24:	movw	ip, #52428	; 0xcccc
   23f28:	mov	r4, #-2147483648	; 0x80000000
   23f2c:	mov	r6, sl
   23f30:	movt	ip, #3276	; 0xccc
   23f34:	b	22a70 <__assert_fail@plt+0x109e4>
   23f38:	movw	ip, #52428	; 0xcccc
   23f3c:	mov	r8, #0
   23f40:	mov	r4, #-2147483648	; 0x80000000
   23f44:	movt	ip, #3276	; 0xccc
   23f48:	b	240d8 <__assert_fail@plt+0x1204c>
   23f4c:	mov	r1, #32
   23f50:	mov	r9, r2
   23f54:	bl	11ef4 <memset@plt>
   23f58:	ldr	r0, [sp, #108]	; 0x6c
   23f5c:	add	r1, r0, r9
   23f60:	tst	r5, #1
   23f64:	str	r1, [sp, #100]	; 0x64
   23f68:	beq	24008 <__assert_fail@plt+0x11f7c>
   23f6c:	movw	ip, #52428	; 0xcccc
   23f70:	cmp	r8, #0
   23f74:	movt	ip, #3276	; 0xccc
   23f78:	beq	240c8 <__assert_fail@plt+0x1203c>
   23f7c:	bl	11e34 <__ctype_tolower_loc@plt>
   23f80:	tst	r8, #1
   23f84:	mov	r1, r8
   23f88:	beq	23fa8 <__assert_fail@plt+0x11f1c>
   23f8c:	add	r1, sp, #112	; 0x70
   23f90:	ldr	r2, [r0]
   23f94:	ldr	r3, [sp, #100]	; 0x64
   23f98:	ldrb	r1, [r1, r8]
   23f9c:	ldr	r2, [r2, r1, lsl #2]
   23fa0:	sub	r1, r6, #2
   23fa4:	strb	r2, [r3, r1]
   23fa8:	ldr	r2, [sp, #108]	; 0x6c
   23fac:	movw	ip, #52428	; 0xcccc
   23fb0:	cmp	r6, #2
   23fb4:	add	lr, sp, #112	; 0x70
   23fb8:	movt	ip, #3276	; 0xccc
   23fbc:	beq	240c8 <__assert_fail@plt+0x1203c>
   23fc0:	cmp	r4, r8
   23fc4:	mov	r3, r2
   23fc8:	movls	r4, r8
   23fcc:	sub	r2, r4, r6
   23fd0:	add	r5, r3, r2
   23fd4:	ldrb	r3, [lr, r1]
   23fd8:	ldr	r6, [r0]
   23fdc:	mov	r2, r5
   23fe0:	ldr	r3, [r6, r3, lsl #2]
   23fe4:	strb	r3, [r2, r1]!
   23fe8:	add	r3, lr, r1
   23fec:	subs	r1, r1, #2
   23ff0:	ldrb	r3, [r3, #-1]
   23ff4:	ldr	r6, [r0]
   23ff8:	ldr	r3, [r6, r3, lsl #2]
   23ffc:	strb	r3, [r2, #-1]
   24000:	bne	23fd4 <__assert_fail@plt+0x11f48>
   24004:	b	240c8 <__assert_fail@plt+0x1203c>
   24008:	ldr	r0, [sp, #96]	; 0x60
   2400c:	tst	r0, #1
   24010:	beq	240b0 <__assert_fail@plt+0x12024>
   24014:	movw	ip, #52428	; 0xcccc
   24018:	cmp	r8, #0
   2401c:	movt	ip, #3276	; 0xccc
   24020:	beq	240c8 <__assert_fail@plt+0x1203c>
   24024:	bl	11e40 <__ctype_toupper_loc@plt>
   24028:	tst	r8, #1
   2402c:	mov	r1, r8
   24030:	beq	24050 <__assert_fail@plt+0x11fc4>
   24034:	add	r1, sp, #112	; 0x70
   24038:	ldr	r2, [r0]
   2403c:	ldr	r3, [sp, #100]	; 0x64
   24040:	ldrb	r1, [r1, r8]
   24044:	ldr	r2, [r2, r1, lsl #2]
   24048:	sub	r1, r6, #2
   2404c:	strb	r2, [r3, r1]
   24050:	ldr	r2, [sp, #108]	; 0x6c
   24054:	movw	ip, #52428	; 0xcccc
   24058:	cmp	r6, #2
   2405c:	add	lr, sp, #112	; 0x70
   24060:	movt	ip, #3276	; 0xccc
   24064:	beq	240c8 <__assert_fail@plt+0x1203c>
   24068:	cmp	r4, r8
   2406c:	mov	r3, r2
   24070:	movls	r4, r8
   24074:	sub	r2, r4, r6
   24078:	add	r5, r3, r2
   2407c:	ldrb	r3, [lr, r1]
   24080:	ldr	r6, [r0]
   24084:	mov	r2, r5
   24088:	ldr	r3, [r6, r3, lsl #2]
   2408c:	strb	r3, [r2, r1]!
   24090:	add	r3, lr, r1
   24094:	subs	r1, r1, #2
   24098:	ldrb	r3, [r3, #-1]
   2409c:	ldr	r6, [r0]
   240a0:	ldr	r3, [r6, r3, lsl #2]
   240a4:	strb	r3, [r2, #-1]
   240a8:	bne	2407c <__assert_fail@plt+0x11ff0>
   240ac:	b	240c8 <__assert_fail@plt+0x1203c>
   240b0:	mov	r0, r1
   240b4:	ldr	r1, [sp, #48]	; 0x30
   240b8:	mov	r2, r8
   240bc:	bl	11c60 <memcpy@plt>
   240c0:	movw	ip, #52428	; 0xcccc
   240c4:	movt	ip, #3276	; 0xccc
   240c8:	ldr	r0, [sp, #100]	; 0x64
   240cc:	ldr	lr, [sp, #92]	; 0x5c
   240d0:	mov	r4, #-2147483648	; 0x80000000
   240d4:	add	r8, r0, r8
   240d8:	add	lr, r7, lr
   240dc:	mov	r6, sl
   240e0:	b	22a70 <__assert_fail@plt+0x109e4>
   240e4:	ldr	r9, [sp, #32]
   240e8:	ldr	r2, [sp, #96]	; 0x60
   240ec:	ldr	r1, [sp, #100]	; 0x64
   240f0:	tst	r1, #1
   240f4:	bne	24378 <__assert_fail@plt+0x122ec>
   240f8:	eor	r1, r1, #1
   240fc:	and	r1, r2, r1
   24100:	tst	r1, #1
   24104:	beq	24320 <__assert_fail@plt+0x12294>
   24108:	cmp	r4, #0
   2410c:	beq	243ec <__assert_fail@plt+0x12360>
   24110:	bl	11e40 <__ctype_toupper_loc@plt>
   24114:	tst	r4, #1
   24118:	mov	r1, r4
   2411c:	beq	24138 <__assert_fail@plt+0x120ac>
   24120:	ldr	r2, [sp, #64]	; 0x40
   24124:	sub	r1, r4, #1
   24128:	ldr	r3, [r0]
   2412c:	ldrb	r2, [r2, r1]
   24130:	ldr	r2, [r3, r2, lsl #2]
   24134:	strb	r2, [r8, r1]
   24138:	movw	ip, #52428	; 0xcccc
   2413c:	cmp	r4, #1
   24140:	mov	lr, r7
   24144:	movt	ip, #3276	; 0xccc
   24148:	beq	243ec <__assert_fail@plt+0x12360>
   2414c:	add	r2, r9, r1
   24150:	ldr	r3, [r0]
   24154:	ldrb	r2, [r2, #1]
   24158:	ldr	r2, [r3, r2, lsl #2]
   2415c:	add	r3, r8, r1
   24160:	strb	r2, [r3, #-1]
   24164:	ldrb	r2, [r9, r1]
   24168:	ldr	r7, [r0]
   2416c:	subs	r1, r1, #2
   24170:	ldr	r2, [r7, r2, lsl #2]
   24174:	strb	r2, [r3, #-2]
   24178:	bne	2414c <__assert_fail@plt+0x120c0>
   2417c:	b	243ec <__assert_fail@plt+0x12360>
   24180:	mov	r0, r2
   24184:	mov	r1, #32
   24188:	mov	r2, r8
   2418c:	bl	11ef4 <memset@plt>
   24190:	ldr	r2, [sp, #108]	; 0x6c
   24194:	ldr	r3, [sp, #88]	; 0x58
   24198:	add	r2, r2, r8
   2419c:	ldr	r0, [fp, #20]
   241a0:	stm	sp, {r6, r9}
   241a4:	mov	r8, r2
   241a8:	mov	r1, r7
   241ac:	str	r4, [sp, #8]
   241b0:	str	r0, [sp, #12]
   241b4:	ldr	r0, [fp, #24]
   241b8:	str	r0, [sp, #16]
   241bc:	mov	r0, r2
   241c0:	ldr	r2, [sp, #100]	; 0x64
   241c4:	bl	2296c <__assert_fail@plt+0x108e0>
   241c8:	ldr	r0, [sp, #96]	; 0x60
   241cc:	ldr	lr, [sp, #92]	; 0x5c
   241d0:	movw	ip, #52428	; 0xcccc
   241d4:	mov	r4, #-2147483648	; 0x80000000
   241d8:	movt	ip, #3276	; 0xccc
   241dc:	add	r8, r8, r0
   241e0:	b	24508 <__assert_fail@plt+0x1247c>
   241e4:	movw	r5, #63636	; 0xf894
   241e8:	movt	r5, #65535	; 0xffff
   241ec:	sub	r5, r5, r3
   241f0:	add	r3, r6, #100	; 0x64
   241f4:	cmp	lr, r5
   241f8:	ldr	lr, [sp, #92]	; 0x5c
   241fc:	rsblt	r3, r6, #0
   24200:	b	24230 <__assert_fail@plt+0x121a4>
   24204:	cmp	r7, #6
   24208:	mov	r0, r7
   2420c:	movle	r0, #6
   24210:	sub	r4, r0, #6
   24214:	b	23174 <__assert_fail@plt+0x110e8>
   24218:	movw	r4, #63636	; 0xf894
   2421c:	str	r3, [sp, #100]	; 0x64
   24220:	add	r3, r5, #100	; 0x64
   24224:	movt	r4, #65535	; 0xffff
   24228:	cmp	r6, r4
   2422c:	rsblt	r3, r5, #0
   24230:	ldr	r6, [fp, #12]
   24234:	cmp	r9, #0
   24238:	mov	r4, #0
   2423c:	moveq	r9, r6
   24240:	mov	r6, #0
   24244:	cmp	r9, #43	; 0x2b
   24248:	bne	2392c <__assert_fail@plt+0x118a0>
   2424c:	ldr	r8, [sp, #100]	; 0x64
   24250:	mov	r4, #0
   24254:	movw	r5, #9999	; 0x270f
   24258:	mov	ip, #0
   2425c:	cmp	r8, r7
   24260:	movwlt	r4, #1
   24264:	cmp	r8, #2
   24268:	movweq	r5, #99	; 0x63
   2426c:	cmp	r5, r3
   24270:	movwcc	ip, #1
   24274:	orr	r4, r4, ip
   24278:	b	244c8 <__assert_fail@plt+0x1243c>
   2427c:	cmp	r4, #0
   24280:	beq	244a4 <__assert_fail@plt+0x12418>
   24284:	movw	r6, #10000	; 0x2710
   24288:	mov	lr, r8
   2428c:	mla	r3, r3, r6, r4
   24290:	mov	r6, #100	; 0x64
   24294:	mov	r4, #1
   24298:	mla	r3, ip, r6, r3
   2429c:	mov	r6, #9
   242a0:	str	r6, [sp, #100]	; 0x64
   242a4:	mov	r6, #20
   242a8:	b	244c8 <__assert_fail@plt+0x1243c>
   242ac:	sub	r1, fp, #48	; 0x30
   242b0:	mov	r2, r4
   242b4:	mov	r5, lr
   242b8:	bl	11c60 <memcpy@plt>
   242bc:	movw	ip, #52428	; 0xcccc
   242c0:	mov	lr, r5
   242c4:	movt	ip, #3276	; 0xccc
   242c8:	ldr	r0, [sp, #108]	; 0x6c
   242cc:	mov	r2, #0
   242d0:	add	r5, r0, r4
   242d4:	cmp	r9, #45	; 0x2d
   242d8:	subne	r0, r7, r4
   242dc:	bicne	r2, r0, r0, asr #31
   242e0:	sub	r0, r8, r4
   242e4:	cmp	r2, r0
   242e8:	bcs	24544 <__assert_fail@plt+0x124b8>
   242ec:	cmp	r5, #0
   242f0:	beq	24318 <__assert_fail@plt+0x1228c>
   242f4:	cmp	r2, #0
   242f8:	beq	24318 <__assert_fail@plt+0x1228c>
   242fc:	uxtb	r0, r9
   24300:	cmp	r0, #48	; 0x30
   24304:	cmpne	r0, #43	; 0x2b
   24308:	bne	24470 <__assert_fail@plt+0x123e4>
   2430c:	mov	r0, r5
   24310:	mov	r1, #48	; 0x30
   24314:	b	24478 <__assert_fail@plt+0x123ec>
   24318:	mov	r8, r5
   2431c:	b	24498 <__assert_fail@plt+0x1240c>
   24320:	ldr	r1, [sp, #64]	; 0x40
   24324:	mov	r0, r8
   24328:	mov	r2, r4
   2432c:	bl	11c60 <memcpy@plt>
   24330:	movw	ip, #52428	; 0xcccc
   24334:	mov	lr, r7
   24338:	movt	ip, #3276	; 0xccc
   2433c:	b	243ec <__assert_fail@plt+0x12360>
   24340:	mov	r0, r8
   24344:	mov	r1, #32
   24348:	mov	r2, r5
   2434c:	bl	11ef4 <memset@plt>
   24350:	ldr	r8, [sp, #108]	; 0x6c
   24354:	ldr	r9, [sp, #32]
   24358:	ldr	r1, [sp, #100]	; 0x64
   2435c:	ldr	r2, [sp, #96]	; 0x60
   24360:	movw	ip, #52428	; 0xcccc
   24364:	mov	lr, r7
   24368:	movt	ip, #3276	; 0xccc
   2436c:	add	r8, r8, r5
   24370:	tst	r1, #1
   24374:	beq	240f8 <__assert_fail@plt+0x1206c>
   24378:	cmp	r4, #0
   2437c:	beq	243ec <__assert_fail@plt+0x12360>
   24380:	bl	11e34 <__ctype_tolower_loc@plt>
   24384:	tst	r4, #1
   24388:	mov	r1, r4
   2438c:	beq	243a8 <__assert_fail@plt+0x1231c>
   24390:	ldr	r2, [sp, #64]	; 0x40
   24394:	sub	r1, r4, #1
   24398:	ldr	r3, [r0]
   2439c:	ldrb	r2, [r2, r1]
   243a0:	ldr	r2, [r3, r2, lsl #2]
   243a4:	strb	r2, [r8, r1]
   243a8:	movw	ip, #52428	; 0xcccc
   243ac:	cmp	r4, #1
   243b0:	mov	lr, r7
   243b4:	movt	ip, #3276	; 0xccc
   243b8:	beq	243ec <__assert_fail@plt+0x12360>
   243bc:	add	r2, r9, r1
   243c0:	ldr	r3, [r0]
   243c4:	ldrb	r2, [r2, #1]
   243c8:	ldr	r2, [r3, r2, lsl #2]
   243cc:	add	r3, r8, r1
   243d0:	strb	r2, [r3, #-1]
   243d4:	ldrb	r2, [r9, r1]
   243d8:	ldr	r7, [r0]
   243dc:	subs	r1, r1, #2
   243e0:	ldr	r2, [r7, r2, lsl #2]
   243e4:	strb	r2, [r3, #-2]
   243e8:	bne	243bc <__assert_fail@plt+0x12330>
   243ec:	add	r8, r8, r4
   243f0:	add	lr, r6, lr
   243f4:	mov	r4, #-2147483648	; 0x80000000
   243f8:	mov	r6, sl
   243fc:	b	22a70 <__assert_fail@plt+0x109e4>
   24400:	mov	r0, r8
   24404:	mov	r1, #32
   24408:	mov	r2, r4
   2440c:	mov	r6, lr
   24410:	bl	11ef4 <memset@plt>
   24414:	ldr	r8, [sp, #108]	; 0x6c
   24418:	movw	ip, #52428	; 0xcccc
   2441c:	mov	lr, r6
   24420:	movt	ip, #3276	; 0xccc
   24424:	add	r8, r8, r4
   24428:	mov	r4, #-2147483648	; 0x80000000
   2442c:	mov	r0, #10
   24430:	strb	r0, [r8], #1
   24434:	b	24508 <__assert_fail@plt+0x1247c>
   24438:	mov	r0, r8
   2443c:	mov	r1, #32
   24440:	mov	r2, r4
   24444:	mov	r6, lr
   24448:	bl	11ef4 <memset@plt>
   2444c:	ldr	r8, [sp, #108]	; 0x6c
   24450:	movw	ip, #52428	; 0xcccc
   24454:	mov	lr, r6
   24458:	movt	ip, #3276	; 0xccc
   2445c:	add	r8, r8, r4
   24460:	mov	r4, #-2147483648	; 0x80000000
   24464:	mov	r0, #9
   24468:	strb	r0, [r8], #1
   2446c:	b	24508 <__assert_fail@plt+0x1247c>
   24470:	mov	r0, r5
   24474:	mov	r1, #32
   24478:	mov	r6, lr
   2447c:	mov	r7, r2
   24480:	bl	11ef4 <memset@plt>
   24484:	movw	ip, #52428	; 0xcccc
   24488:	mov	r2, r7
   2448c:	mov	lr, r6
   24490:	add	r8, r5, r7
   24494:	movt	ip, #3276	; 0xccc
   24498:	add	r0, r2, lr
   2449c:	add	lr, r0, r4
   244a0:	b	2380c <__assert_fail@plt+0x11780>
   244a4:	cmp	ip, #0
   244a8:	beq	24514 <__assert_fail@plt+0x12488>
   244ac:	mov	r6, #100	; 0x64
   244b0:	mov	r4, #1
   244b4:	mov	lr, r8
   244b8:	mla	r3, r3, r6, ip
   244bc:	mov	r6, #6
   244c0:	str	r6, [sp, #100]	; 0x64
   244c4:	mov	r6, #4
   244c8:	movw	ip, #52428	; 0xcccc
   244cc:	movt	ip, #3276	; 0xccc
   244d0:	b	2392c <__assert_fail@plt+0x118a0>
   244d4:	mov	r0, r8
   244d8:	mov	r1, #32
   244dc:	mov	r2, r4
   244e0:	mov	r6, lr
   244e4:	bl	11ef4 <memset@plt>
   244e8:	ldr	r8, [sp, #108]	; 0x6c
   244ec:	ldrb	r1, [sl]
   244f0:	movw	ip, #52428	; 0xcccc
   244f4:	mov	lr, r6
   244f8:	movt	ip, #3276	; 0xccc
   244fc:	add	r8, r8, r4
   24500:	mov	r4, #-2147483648	; 0x80000000
   24504:	strb	r1, [r8], #1
   24508:	add	lr, r5, lr
   2450c:	mov	r6, sl
   24510:	b	22a70 <__assert_fail@plt+0x109e4>
   24514:	mov	r6, #3
   24518:	b	23e54 <__assert_fail@plt+0x11dc8>
   2451c:	mov	lr, #0
   24520:	ldr	r0, [sp, #104]	; 0x68
   24524:	ldr	r1, [sp, #72]	; 0x48
   24528:	cmp	r0, #0
   2452c:	cmpne	r8, #0
   24530:	movne	r0, #0
   24534:	strbne	r0, [r8]
   24538:	ldr	r0, [sp, #76]	; 0x4c
   2453c:	str	r1, [r0]
   24540:	b	24554 <__assert_fail@plt+0x124c8>
   24544:	mov	r0, #34	; 0x22
   24548:	ldr	r1, [sp, #76]	; 0x4c
   2454c:	mov	lr, #0
   24550:	str	r0, [r1]
   24554:	mov	r0, lr
   24558:	sub	sp, fp, #28
   2455c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   24560:	mov	r0, #75	; 0x4b
   24564:	b	24548 <__assert_fail@plt+0x124bc>

00024568 <_obstack_begin@@Base>:
   24568:	push	{r4, r5, r6, sl, fp, lr}
   2456c:	add	fp, sp, #16
   24570:	cmp	r1, #0
   24574:	mov	r4, r0
   24578:	str	r3, [r0, #28]
   2457c:	mov	r5, r2
   24580:	movweq	r1, #4072	; 0xfe8
   24584:	cmp	r2, #0
   24588:	str	r1, [r0]
   2458c:	ldr	r0, [fp, #8]
   24590:	movweq	r5, #8
   24594:	sub	r6, r5, #1
   24598:	str	r0, [r4, #32]
   2459c:	str	r6, [r4, #24]
   245a0:	ldrb	r0, [r4, #40]	; 0x28
   245a4:	and	r0, r0, #254	; 0xfe
   245a8:	strb	r0, [r4, #40]	; 0x28
   245ac:	mov	r0, r1
   245b0:	blx	r3
   245b4:	cmp	r0, #0
   245b8:	str	r0, [r4, #4]
   245bc:	addne	r1, r0, r6
   245c0:	rsbne	r2, r5, #0
   245c4:	addne	r1, r1, #8
   245c8:	andne	r1, r1, r2
   245cc:	strne	r1, [r4, #12]
   245d0:	strne	r1, [r4, #8]
   245d4:	ldrne	r1, [r4]
   245d8:	addne	r1, r0, r1
   245dc:	strne	r1, [r0]
   245e0:	strne	r1, [r4, #16]
   245e4:	movne	r1, #0
   245e8:	strne	r1, [r0, #4]
   245ec:	ldrbne	r0, [r4, #40]	; 0x28
   245f0:	andne	r0, r0, #249	; 0xf9
   245f4:	strbne	r0, [r4, #40]	; 0x28
   245f8:	movne	r0, #1
   245fc:	popne	{r4, r5, r6, sl, fp, pc}
   24600:	movw	r0, #58032	; 0xe2b0
   24604:	movt	r0, #3
   24608:	ldr	r0, [r0]
   2460c:	blx	r0

00024610 <_obstack_begin_1@@Base>:
   24610:	push	{r4, r5, r6, sl, fp, lr}
   24614:	add	fp, sp, #16
   24618:	cmp	r1, #0
   2461c:	mov	r5, r2
   24620:	mov	r4, r0
   24624:	str	r3, [r0, #28]
   24628:	ldr	r2, [fp, #8]
   2462c:	movweq	r1, #4072	; 0xfe8
   24630:	cmp	r5, #0
   24634:	str	r1, [r0]
   24638:	ldr	r0, [fp, #12]
   2463c:	movweq	r5, #8
   24640:	sub	r6, r5, #1
   24644:	str	r0, [r4, #36]	; 0x24
   24648:	str	r2, [r4, #32]
   2464c:	str	r6, [r4, #24]
   24650:	ldrb	r2, [r4, #40]	; 0x28
   24654:	orr	r2, r2, #1
   24658:	strb	r2, [r4, #40]	; 0x28
   2465c:	blx	r3
   24660:	cmp	r0, #0
   24664:	str	r0, [r4, #4]
   24668:	addne	r1, r0, r6
   2466c:	rsbne	r2, r5, #0
   24670:	addne	r1, r1, #8
   24674:	andne	r1, r1, r2
   24678:	strne	r1, [r4, #12]
   2467c:	strne	r1, [r4, #8]
   24680:	ldrne	r1, [r4]
   24684:	addne	r1, r0, r1
   24688:	strne	r1, [r0]
   2468c:	strne	r1, [r4, #16]
   24690:	movne	r1, #0
   24694:	strne	r1, [r0, #4]
   24698:	ldrbne	r0, [r4, #40]	; 0x28
   2469c:	andne	r0, r0, #249	; 0xf9
   246a0:	strbne	r0, [r4, #40]	; 0x28
   246a4:	movne	r0, #1
   246a8:	popne	{r4, r5, r6, sl, fp, pc}
   246ac:	movw	r0, #58032	; 0xe2b0
   246b0:	movt	r0, #3
   246b4:	ldr	r0, [r0]
   246b8:	blx	r0

000246bc <_obstack_newchunk@@Base>:
   246bc:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   246c0:	add	fp, sp, #28
   246c4:	sub	sp, sp, #4
   246c8:	mov	r4, r0
   246cc:	ldr	r2, [r0]
   246d0:	ldr	r0, [r0, #8]
   246d4:	ldr	r3, [r4, #12]
   246d8:	sub	r9, r3, r0
   246dc:	ldr	r0, [r4, #24]
   246e0:	mov	r3, #0
   246e4:	add	r1, r9, r1
   246e8:	adds	r6, r1, r0
   246ec:	adc	r0, r3, #0
   246f0:	mov	r3, #100	; 0x64
   246f4:	add	r3, r3, r9, lsr #3
   246f8:	adds	r7, r3, r6
   246fc:	movcs	r7, r6
   24700:	cmp	r7, r2
   24704:	movcc	r7, r2
   24708:	cmp	r1, r9
   2470c:	bcc	24804 <_obstack_newchunk@@Base+0x148>
   24710:	cmp	r0, #0
   24714:	bne	24804 <_obstack_newchunk@@Base+0x148>
   24718:	ldrb	r0, [r4, #40]	; 0x28
   2471c:	ldr	r8, [r4, #4]
   24720:	tst	r0, #1
   24724:	bne	24738 <_obstack_newchunk@@Base+0x7c>
   24728:	ldr	r1, [r4, #28]
   2472c:	mov	r0, r7
   24730:	blx	r1
   24734:	b	24748 <_obstack_newchunk@@Base+0x8c>
   24738:	ldr	r2, [r4, #28]
   2473c:	ldr	r0, [r4, #36]	; 0x24
   24740:	mov	r1, r7
   24744:	blx	r2
   24748:	mov	r6, r0
   2474c:	cmp	r0, #0
   24750:	beq	24804 <_obstack_newchunk@@Base+0x148>
   24754:	add	r0, r6, r7
   24758:	str	r6, [r4, #4]
   2475c:	str	r8, [r6, #4]
   24760:	mov	r2, r9
   24764:	str	r0, [r4, #16]
   24768:	str	r0, [r6]
   2476c:	ldr	r5, [r4, #24]
   24770:	ldr	sl, [r4, #8]
   24774:	add	r0, r6, r5
   24778:	mov	r1, sl
   2477c:	add	r0, r0, #8
   24780:	bic	r7, r0, r5
   24784:	mov	r0, r7
   24788:	bl	11c60 <memcpy@plt>
   2478c:	ldrb	r0, [r4, #40]	; 0x28
   24790:	tst	r0, #2
   24794:	bne	247e4 <_obstack_newchunk@@Base+0x128>
   24798:	add	r1, r8, r5
   2479c:	mvn	r0, r5
   247a0:	add	r1, r1, #8
   247a4:	and	r0, r1, r0
   247a8:	cmp	sl, r0
   247ac:	bne	247e4 <_obstack_newchunk@@Base+0x128>
   247b0:	ldr	r0, [r8, #4]
   247b4:	str	r0, [r6, #4]
   247b8:	ldrb	r0, [r4, #40]	; 0x28
   247bc:	tst	r0, #1
   247c0:	bne	247d4 <_obstack_newchunk@@Base+0x118>
   247c4:	ldr	r1, [r4, #32]
   247c8:	mov	r0, r8
   247cc:	blx	r1
   247d0:	b	247e4 <_obstack_newchunk@@Base+0x128>
   247d4:	ldr	r2, [r4, #32]
   247d8:	ldr	r0, [r4, #36]	; 0x24
   247dc:	mov	r1, r8
   247e0:	blx	r2
   247e4:	add	r0, r7, r9
   247e8:	str	r7, [r4, #8]
   247ec:	str	r0, [r4, #12]
   247f0:	ldrb	r0, [r4, #40]	; 0x28
   247f4:	and	r0, r0, #253	; 0xfd
   247f8:	strb	r0, [r4, #40]	; 0x28
   247fc:	sub	sp, fp, #28
   24800:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   24804:	movw	r0, #58032	; 0xe2b0
   24808:	movt	r0, #3
   2480c:	ldr	r0, [r0]
   24810:	blx	r0

00024814 <_obstack_allocated_p@@Base>:
   24814:	ldr	r2, [r0, #4]
   24818:	mov	r0, #0
   2481c:	b	24824 <_obstack_allocated_p@@Base+0x10>
   24820:	ldr	r2, [r2, #4]
   24824:	cmp	r2, #0
   24828:	bxeq	lr
   2482c:	cmp	r2, r1
   24830:	bcs	24820 <_obstack_allocated_p@@Base+0xc>
   24834:	ldr	r3, [r2]
   24838:	cmp	r3, r1
   2483c:	bcc	24820 <_obstack_allocated_p@@Base+0xc>
   24840:	mov	r0, #1
   24844:	bx	lr

00024848 <_obstack_free@@Base>:
   24848:	push	{r4, r5, r6, sl, fp, lr}
   2484c:	add	fp, sp, #16
   24850:	mov	r5, r1
   24854:	ldr	r1, [r0, #4]
   24858:	cmp	r1, #0
   2485c:	beq	248c8 <_obstack_free@@Base+0x80>
   24860:	mov	r4, r0
   24864:	cmp	r1, r5
   24868:	bcs	248a8 <_obstack_free@@Base+0x60>
   2486c:	b	2489c <_obstack_free@@Base+0x54>
   24870:	ldr	r2, [r4, #32]
   24874:	mov	r0, r1
   24878:	blx	r2
   2487c:	ldrb	r0, [r4, #40]	; 0x28
   24880:	cmp	r6, #0
   24884:	mov	r1, r6
   24888:	orr	r0, r0, #2
   2488c:	strb	r0, [r4, #40]	; 0x28
   24890:	beq	248c8 <_obstack_free@@Base+0x80>
   24894:	cmp	r1, r5
   24898:	bcs	248a8 <_obstack_free@@Base+0x60>
   2489c:	ldr	r0, [r1]
   248a0:	cmp	r0, r5
   248a4:	bcs	248d4 <_obstack_free@@Base+0x8c>
   248a8:	ldrb	r0, [r4, #40]	; 0x28
   248ac:	ldr	r6, [r1, #4]
   248b0:	tst	r0, #1
   248b4:	beq	24870 <_obstack_free@@Base+0x28>
   248b8:	ldr	r2, [r4, #32]
   248bc:	ldr	r0, [r4, #36]	; 0x24
   248c0:	blx	r2
   248c4:	b	2487c <_obstack_free@@Base+0x34>
   248c8:	cmp	r5, #0
   248cc:	popeq	{r4, r5, r6, sl, fp, pc}
   248d0:	bl	12038 <abort@plt>
   248d4:	str	r5, [r4, #8]
   248d8:	str	r5, [r4, #12]
   248dc:	ldr	r0, [r1]
   248e0:	str	r1, [r4, #4]
   248e4:	str	r0, [r4, #16]
   248e8:	pop	{r4, r5, r6, sl, fp, pc}

000248ec <_obstack_memory_used@@Base>:
   248ec:	ldr	r1, [r0, #4]
   248f0:	mov	r0, #0
   248f4:	b	24908 <_obstack_memory_used@@Base+0x1c>
   248f8:	ldr	r2, [r1]
   248fc:	sub	r0, r0, r1
   24900:	ldr	r1, [r1, #4]
   24904:	add	r0, r0, r2
   24908:	cmp	r1, #0
   2490c:	bxeq	lr
   24910:	b	248f8 <_obstack_memory_used@@Base+0xc>
   24914:	push	{fp, lr}
   24918:	mov	fp, sp
   2491c:	movw	r0, #58120	; 0xe308
   24920:	movw	r1, #55055	; 0xd70f
   24924:	mov	r2, #5
   24928:	movt	r0, #3
   2492c:	movt	r1, #2
   24930:	ldr	r4, [r0]
   24934:	mov	r0, #0
   24938:	bl	11ca8 <dcgettext@plt>
   2493c:	movw	r2, #55320	; 0xd818
   24940:	mov	r3, r0
   24944:	mov	r0, r4
   24948:	mov	r1, #1
   2494c:	movt	r2, #2
   24950:	bl	11f24 <__fprintf_chk@plt>
   24954:	movw	r0, #58028	; 0xe2ac
   24958:	movt	r0, #3
   2495c:	ldr	r0, [r0]
   24960:	bl	11e7c <exit@plt>
   24964:	push	{r4, r5, fp, lr}
   24968:	add	fp, sp, #8
   2496c:	cmp	r0, #0
   24970:	beq	24a04 <_obstack_memory_used@@Base+0x118>
   24974:	mov	r1, #47	; 0x2f
   24978:	mov	r4, r0
   2497c:	bl	11f84 <strrchr@plt>
   24980:	cmp	r0, #0
   24984:	mov	r5, r4
   24988:	addne	r5, r0, #1
   2498c:	sub	r0, r5, r4
   24990:	cmp	r0, #7
   24994:	blt	249e8 <_obstack_memory_used@@Base+0xfc>
   24998:	movw	r1, #55128	; 0xd758
   2499c:	sub	r0, r5, #7
   249a0:	mov	r2, #7
   249a4:	movt	r1, #2
   249a8:	bl	1202c <strncmp@plt>
   249ac:	cmp	r0, #0
   249b0:	bne	249e8 <_obstack_memory_used@@Base+0xfc>
   249b4:	movw	r1, #55136	; 0xd760
   249b8:	mov	r0, r5
   249bc:	mov	r2, #3
   249c0:	movt	r1, #2
   249c4:	bl	1202c <strncmp@plt>
   249c8:	cmp	r0, #0
   249cc:	beq	249d8 <_obstack_memory_used@@Base+0xec>
   249d0:	mov	r4, r5
   249d4:	b	249e8 <_obstack_memory_used@@Base+0xfc>
   249d8:	movw	r0, #58104	; 0xe2f8
   249dc:	add	r4, r5, #3
   249e0:	movt	r0, #3
   249e4:	str	r4, [r0]
   249e8:	movw	r0, #58108	; 0xe2fc
   249ec:	movt	r0, #3
   249f0:	str	r4, [r0]
   249f4:	movw	r0, #62432	; 0xf3e0
   249f8:	movt	r0, #3
   249fc:	str	r4, [r0]
   24a00:	pop	{r4, r5, fp, pc}
   24a04:	movw	r0, #58120	; 0xe308
   24a08:	mov	r1, #55	; 0x37
   24a0c:	mov	r2, #1
   24a10:	movt	r0, #3
   24a14:	ldr	r3, [r0]
   24a18:	movw	r0, #55072	; 0xd720
   24a1c:	movt	r0, #2
   24a20:	bl	11d44 <fwrite@plt>
   24a24:	bl	12038 <abort@plt>
   24a28:	push	{r4, r5, r6, sl, fp, lr}
   24a2c:	add	fp, sp, #16
   24a30:	mov	r4, r0
   24a34:	movw	r0, #62440	; 0xf3e8
   24a38:	movt	r0, #3
   24a3c:	cmp	r4, #0
   24a40:	moveq	r4, r0
   24a44:	bl	11ed0 <__errno_location@plt>
   24a48:	ldr	r6, [r0]
   24a4c:	mov	r5, r0
   24a50:	mov	r0, r4
   24a54:	mov	r1, #48	; 0x30
   24a58:	bl	27bb0 <_obstack_memory_used@@Base+0x32c4>
   24a5c:	str	r6, [r5]
   24a60:	pop	{r4, r5, r6, sl, fp, pc}
   24a64:	movw	r1, #62440	; 0xf3e8
   24a68:	cmp	r0, #0
   24a6c:	movt	r1, #3
   24a70:	movne	r1, r0
   24a74:	ldr	r0, [r1]
   24a78:	bx	lr
   24a7c:	movw	r2, #62440	; 0xf3e8
   24a80:	cmp	r0, #0
   24a84:	movt	r2, #3
   24a88:	movne	r2, r0
   24a8c:	str	r1, [r2]
   24a90:	bx	lr
   24a94:	movw	r3, #62440	; 0xf3e8
   24a98:	cmp	r0, #0
   24a9c:	and	r2, r2, #1
   24aa0:	movt	r3, #3
   24aa4:	movne	r3, r0
   24aa8:	ubfx	r0, r1, #5, #3
   24aac:	and	r1, r1, #31
   24ab0:	add	ip, r3, r0, lsl #2
   24ab4:	mov	r0, #1
   24ab8:	ldr	r3, [ip, #8]
   24abc:	and	r0, r0, r3, lsr r1
   24ac0:	eor	r2, r0, r2
   24ac4:	eor	r1, r3, r2, lsl r1
   24ac8:	str	r1, [ip, #8]
   24acc:	bx	lr
   24ad0:	movw	r2, #62440	; 0xf3e8
   24ad4:	cmp	r0, #0
   24ad8:	movt	r2, #3
   24adc:	movne	r2, r0
   24ae0:	ldr	r0, [r2, #4]
   24ae4:	str	r1, [r2, #4]
   24ae8:	bx	lr
   24aec:	push	{fp, lr}
   24af0:	mov	fp, sp
   24af4:	movw	r3, #62440	; 0xf3e8
   24af8:	cmp	r0, #0
   24afc:	movt	r3, #3
   24b00:	movne	r3, r0
   24b04:	cmp	r1, #0
   24b08:	mov	r0, #10
   24b0c:	cmpne	r2, #0
   24b10:	str	r0, [r3]
   24b14:	bne	24b1c <_obstack_memory_used@@Base+0x230>
   24b18:	bl	12038 <abort@plt>
   24b1c:	str	r1, [r3, #40]	; 0x28
   24b20:	str	r2, [r3, #44]	; 0x2c
   24b24:	pop	{fp, pc}
   24b28:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   24b2c:	add	fp, sp, #28
   24b30:	sub	sp, sp, #20
   24b34:	mov	r7, r0
   24b38:	ldr	r0, [fp, #8]
   24b3c:	movw	r5, #62440	; 0xf3e8
   24b40:	mov	r8, r3
   24b44:	mov	r9, r2
   24b48:	mov	sl, r1
   24b4c:	movt	r5, #3
   24b50:	cmp	r0, #0
   24b54:	movne	r5, r0
   24b58:	bl	11ed0 <__errno_location@plt>
   24b5c:	ldr	r2, [r5, #40]	; 0x28
   24b60:	ldr	r3, [r5, #44]	; 0x2c
   24b64:	mov	r4, r0
   24b68:	ldm	r5, {r0, r1}
   24b6c:	add	r5, r5, #8
   24b70:	ldr	r6, [r4]
   24b74:	stm	sp, {r0, r1, r5}
   24b78:	mov	r0, r7
   24b7c:	mov	r1, sl
   24b80:	str	r2, [sp, #12]
   24b84:	str	r3, [sp, #16]
   24b88:	mov	r2, r9
   24b8c:	mov	r3, r8
   24b90:	bl	24ba0 <_obstack_memory_used@@Base+0x2b4>
   24b94:	str	r6, [r4]
   24b98:	sub	sp, fp, #28
   24b9c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   24ba0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   24ba4:	add	fp, sp, #28
   24ba8:	sub	sp, sp, #156	; 0x9c
   24bac:	mov	r5, r0
   24bb0:	add	r0, r2, #1
   24bb4:	mov	r6, r1
   24bb8:	mov	sl, r3
   24bbc:	str	r2, [fp, #-80]	; 0xffffffb0
   24bc0:	str	r0, [sp, #72]	; 0x48
   24bc4:	ldr	r0, [fp, #12]
   24bc8:	and	r1, r0, #1
   24bcc:	str	r1, [sp, #36]	; 0x24
   24bd0:	and	r1, r0, #4
   24bd4:	str	r1, [sp, #32]
   24bd8:	ubfx	r9, r0, #1, #1
   24bdc:	bl	11d68 <__ctype_get_mb_cur_max@plt>
   24be0:	str	r0, [sp, #40]	; 0x28
   24be4:	ldr	r0, [fp, #24]
   24be8:	ldr	r7, [fp, #8]
   24bec:	mov	r1, #0
   24bf0:	str	r5, [fp, #-84]	; 0xffffffac
   24bf4:	str	r1, [fp, #-56]	; 0xffffffc8
   24bf8:	mov	r1, #0
   24bfc:	str	r1, [sp, #60]	; 0x3c
   24c00:	mov	r1, #1
   24c04:	str	r1, [fp, #-48]	; 0xffffffd0
   24c08:	str	r0, [sp, #80]	; 0x50
   24c0c:	ldr	r0, [fp, #20]
   24c10:	str	r0, [sp, #76]	; 0x4c
   24c14:	mov	r0, #0
   24c18:	str	r0, [sp, #56]	; 0x38
   24c1c:	mov	r0, #0
   24c20:	str	r0, [fp, #-88]	; 0xffffffa8
   24c24:	mov	r0, #0
   24c28:	str	r0, [fp, #-72]	; 0xffffffb8
   24c2c:	mov	r0, #0
   24c30:	cmp	r7, #10
   24c34:	bhi	25bc8 <_obstack_memory_used@@Base+0x12dc>
   24c38:	add	r1, pc, #24
   24c3c:	ldr	ip, [fp, #-80]	; 0xffffffb0
   24c40:	mov	r4, r6
   24c44:	mov	r8, #0
   24c48:	mov	r2, #1
   24c4c:	mov	r3, #0
   24c50:	mov	lr, sl
   24c54:	ldr	pc, [r1, r7, lsl #2]
   24c58:	andeq	r4, r2, ip, lsl sp
   24c5c:	andeq	r4, r2, r0, ror sp
   24c60:	andeq	r4, r2, r0, lsr sp
   24c64:	andeq	r4, r2, r4, lsl sp
   24c68:	andeq	r4, r2, r4, ror #26
   24c6c:	muleq	r2, r8, sp
   24c70:	andeq	r4, r2, r0, asr #26
   24c74:	andeq	r4, r2, ip, lsl lr
   24c78:	andeq	r4, r2, r4, lsl #25
   24c7c:	andeq	r4, r2, r4, lsl #25
   24c80:	andeq	r4, r2, ip, lsr #25
   24c84:	movw	r0, #55210	; 0xd7aa
   24c88:	mov	r1, r7
   24c8c:	movt	r0, #2
   24c90:	bl	265d0 <_obstack_memory_used@@Base+0x1ce4>
   24c94:	str	r0, [sp, #76]	; 0x4c
   24c98:	movw	r0, #56124	; 0xdb3c
   24c9c:	mov	r1, r7
   24ca0:	movt	r0, #2
   24ca4:	bl	265d0 <_obstack_memory_used@@Base+0x1ce4>
   24ca8:	str	r0, [sp, #80]	; 0x50
   24cac:	mov	r8, #0
   24cb0:	tst	r9, #1
   24cb4:	bne	24cec <_obstack_memory_used@@Base+0x400>
   24cb8:	ldr	r0, [sp, #76]	; 0x4c
   24cbc:	ldrb	r0, [r0]
   24cc0:	cmp	r0, #0
   24cc4:	beq	24cec <_obstack_memory_used@@Base+0x400>
   24cc8:	ldr	r1, [sp, #76]	; 0x4c
   24ccc:	mov	r8, #0
   24cd0:	add	r1, r1, #1
   24cd4:	cmp	r8, r4
   24cd8:	strbcc	r0, [r5, r8]
   24cdc:	ldrb	r0, [r1, r8]
   24ce0:	add	r8, r8, #1
   24ce4:	cmp	r0, #0
   24ce8:	bne	24cd4 <_obstack_memory_used@@Base+0x3e8>
   24cec:	ldr	r6, [sp, #80]	; 0x50
   24cf0:	mov	r0, r6
   24cf4:	bl	11eac <strlen@plt>
   24cf8:	ldr	ip, [fp, #-80]	; 0xffffffb0
   24cfc:	str	r0, [fp, #-72]	; 0xffffffb8
   24d00:	str	r6, [fp, #-88]	; 0xffffffa8
   24d04:	mov	r2, #1
   24d08:	mov	r3, r9
   24d0c:	mov	lr, sl
   24d10:	b	24e1c <_obstack_memory_used@@Base+0x530>
   24d14:	mov	r0, #1
   24d18:	b	24d70 <_obstack_memory_used@@Base+0x484>
   24d1c:	mov	r7, #0
   24d20:	mov	r8, #0
   24d24:	mov	r2, r0
   24d28:	mov	r3, #0
   24d2c:	b	24e1c <_obstack_memory_used@@Base+0x530>
   24d30:	tst	r9, #1
   24d34:	bne	24d70 <_obstack_memory_used@@Base+0x484>
   24d38:	mov	r2, r0
   24d3c:	b	24dc8 <_obstack_memory_used@@Base+0x4dc>
   24d40:	mov	r0, #1
   24d44:	mov	r8, #0
   24d48:	mov	r7, #5
   24d4c:	mov	r2, #1
   24d50:	str	r0, [fp, #-72]	; 0xffffffb8
   24d54:	movw	r0, #55208	; 0xd7a8
   24d58:	movt	r0, #2
   24d5c:	str	r0, [fp, #-88]	; 0xffffffa8
   24d60:	b	24d90 <_obstack_memory_used@@Base+0x4a4>
   24d64:	mov	r2, #1
   24d68:	tst	r9, #1
   24d6c:	beq	24dc8 <_obstack_memory_used@@Base+0x4dc>
   24d70:	mov	r1, #1
   24d74:	mov	r8, #0
   24d78:	mov	r7, #2
   24d7c:	mov	r2, r0
   24d80:	str	r1, [fp, #-72]	; 0xffffffb8
   24d84:	movw	r1, #56124	; 0xdb3c
   24d88:	movt	r1, #2
   24d8c:	str	r1, [fp, #-88]	; 0xffffffa8
   24d90:	mov	r3, #1
   24d94:	b	24e1c <_obstack_memory_used@@Base+0x530>
   24d98:	tst	r9, #1
   24d9c:	beq	24dec <_obstack_memory_used@@Base+0x500>
   24da0:	mov	r0, #1
   24da4:	mov	r8, #0
   24da8:	mov	r2, #1
   24dac:	mov	r3, #1
   24db0:	mov	r7, #5
   24db4:	str	r0, [fp, #-72]	; 0xffffffb8
   24db8:	movw	r0, #55208	; 0xd7a8
   24dbc:	movt	r0, #2
   24dc0:	str	r0, [fp, #-88]	; 0xffffffa8
   24dc4:	b	24e1c <_obstack_memory_used@@Base+0x530>
   24dc8:	cmp	r4, #0
   24dcc:	mov	r8, #1
   24dd0:	mov	r3, #0
   24dd4:	mov	r7, #2
   24dd8:	movne	r0, #39	; 0x27
   24ddc:	strbne	r0, [r5]
   24de0:	movw	r0, #56124	; 0xdb3c
   24de4:	movt	r0, #2
   24de8:	b	24e10 <_obstack_memory_used@@Base+0x524>
   24dec:	cmp	r4, #0
   24df0:	mov	r8, #1
   24df4:	mov	r2, #1
   24df8:	mov	r7, #5
   24dfc:	mov	r3, #0
   24e00:	movne	r0, #34	; 0x22
   24e04:	strbne	r0, [r5]
   24e08:	movw	r0, #55208	; 0xd7a8
   24e0c:	movt	r0, #2
   24e10:	str	r0, [fp, #-88]	; 0xffffffa8
   24e14:	mov	r0, #1
   24e18:	str	r0, [fp, #-72]	; 0xffffffb8
   24e1c:	ldr	r0, [fp, #-72]	; 0xffffffb8
   24e20:	eor	r6, r3, #1
   24e24:	str	r7, [fp, #-68]	; 0xffffffbc
   24e28:	str	r3, [fp, #-76]	; 0xffffffb4
   24e2c:	str	r2, [sp, #84]	; 0x54
   24e30:	str	r6, [sp, #92]	; 0x5c
   24e34:	cmp	r0, #0
   24e38:	movwne	r0, #1
   24e3c:	and	r1, r0, r3
   24e40:	and	r1, r2, r1
   24e44:	str	r1, [sp, #48]	; 0x30
   24e48:	sub	r1, r7, #2
   24e4c:	clz	r1, r1
   24e50:	lsr	r1, r1, #5
   24e54:	and	r1, r1, r3
   24e58:	str	r1, [sp, #64]	; 0x40
   24e5c:	subs	r1, r7, #2
   24e60:	mov	r7, #0
   24e64:	movwne	r1, #1
   24e68:	orr	r6, r1, r6
   24e6c:	and	r1, r1, r2
   24e70:	and	r0, r0, r1
   24e74:	str	r6, [sp, #68]	; 0x44
   24e78:	str	r0, [fp, #-60]	; 0xffffffc4
   24e7c:	orr	r0, r1, r3
   24e80:	ldr	r1, [fp, #16]
   24e84:	eor	r0, r0, #1
   24e88:	clz	r1, r1
   24e8c:	lsr	r1, r1, #5
   24e90:	orr	r0, r1, r0
   24e94:	str	r0, [fp, #-64]	; 0xffffffc0
   24e98:	eor	r0, r2, #1
   24e9c:	str	r0, [sp, #52]	; 0x34
   24ea0:	cmn	lr, #1
   24ea4:	beq	24eb4 <_obstack_memory_used@@Base+0x5c8>
   24ea8:	cmp	r7, lr
   24eac:	bne	24ec0 <_obstack_memory_used@@Base+0x5d4>
   24eb0:	b	25a08 <_obstack_memory_used@@Base+0x111c>
   24eb4:	ldrb	r0, [ip, r7]
   24eb8:	cmp	r0, #0
   24ebc:	beq	25a10 <_obstack_memory_used@@Base+0x1124>
   24ec0:	ldr	r0, [fp, #-60]	; 0xffffffc4
   24ec4:	mov	sl, #0
   24ec8:	cmp	r0, #0
   24ecc:	beq	24f04 <_obstack_memory_used@@Base+0x618>
   24ed0:	ldr	r0, [fp, #-72]	; 0xffffffb8
   24ed4:	add	r5, r7, r0
   24ed8:	cmp	r0, #2
   24edc:	bcc	24ef8 <_obstack_memory_used@@Base+0x60c>
   24ee0:	cmn	lr, #1
   24ee4:	bne	24ef8 <_obstack_memory_used@@Base+0x60c>
   24ee8:	mov	r0, ip
   24eec:	bl	11eac <strlen@plt>
   24ef0:	ldr	ip, [fp, #-80]	; 0xffffffb0
   24ef4:	mov	lr, r0
   24ef8:	cmp	r5, lr
   24efc:	bls	24f0c <_obstack_memory_used@@Base+0x620>
   24f00:	ldr	r5, [fp, #-84]	; 0xffffffac
   24f04:	mov	r0, #0
   24f08:	b	24f58 <_obstack_memory_used@@Base+0x66c>
   24f0c:	ldr	r1, [fp, #-88]	; 0xffffffa8
   24f10:	ldr	r2, [fp, #-72]	; 0xffffffb8
   24f14:	add	r0, ip, r7
   24f18:	mov	r6, r4
   24f1c:	mov	r4, lr
   24f20:	bl	11e94 <bcmp@plt>
   24f24:	ldr	r2, [sp, #92]	; 0x5c
   24f28:	cmp	r0, #0
   24f2c:	ldr	r5, [fp, #-84]	; 0xffffffac
   24f30:	mov	r1, r0
   24f34:	movwne	r1, #1
   24f38:	orr	r1, r1, r2
   24f3c:	tst	r1, #1
   24f40:	beq	25a98 <_obstack_memory_used@@Base+0x11ac>
   24f44:	ldr	ip, [fp, #-80]	; 0xffffffb0
   24f48:	clz	r0, r0
   24f4c:	mov	lr, r4
   24f50:	mov	r4, r6
   24f54:	lsr	r0, r0, #5
   24f58:	str	r0, [fp, #-52]	; 0xffffffcc
   24f5c:	ldrb	r6, [ip, r7]
   24f60:	cmp	r6, #126	; 0x7e
   24f64:	bhi	25494 <_obstack_memory_used@@Base+0xba8>
   24f68:	add	r3, pc, #16
   24f6c:	mov	r9, #1
   24f70:	mov	r2, #110	; 0x6e
   24f74:	mov	r0, #97	; 0x61
   24f78:	mov	r1, #0
   24f7c:	ldr	pc, [r3, r6, lsl #2]
   24f80:	strdeq	r5, [r2], -r4
   24f84:	muleq	r2, r4, r4
   24f88:	muleq	r2, r4, r4
   24f8c:	muleq	r2, r4, r4
   24f90:	muleq	r2, r4, r4
   24f94:	muleq	r2, r4, r4
   24f98:	muleq	r2, r4, r4
   24f9c:	andeq	r5, r2, r0, ror r5
   24fa0:	ldrdeq	r5, [r2], -r4
   24fa4:	andeq	r5, r2, ip, asr #5
   24fa8:	andeq	r5, r2, r0, ror #5
   24fac:	strdeq	r5, [r2], -ip
   24fb0:	andeq	r5, r2, r4, asr #5
   24fb4:	ldrdeq	r5, [r2], -ip
   24fb8:	muleq	r2, r4, r4
   24fbc:	muleq	r2, r4, r4
   24fc0:	muleq	r2, r4, r4
   24fc4:	muleq	r2, r4, r4
   24fc8:	muleq	r2, r4, r4
   24fcc:	muleq	r2, r4, r4
   24fd0:	muleq	r2, r4, r4
   24fd4:	muleq	r2, r4, r4
   24fd8:	muleq	r2, r4, r4
   24fdc:	muleq	r2, r4, r4
   24fe0:	muleq	r2, r4, r4
   24fe4:	muleq	r2, r4, r4
   24fe8:	muleq	r2, r4, r4
   24fec:	muleq	r2, r4, r4
   24ff0:	muleq	r2, r4, r4
   24ff4:	muleq	r2, r4, r4
   24ff8:	muleq	r2, r4, r4
   24ffc:	muleq	r2, r4, r4
   25000:	andeq	r5, r2, r8, ror r2
   25004:	andeq	r5, r2, ip, ror r2
   25008:	andeq	r5, r2, ip, ror r2
   2500c:	andeq	r5, r2, r4, ror #4
   25010:	andeq	r5, r2, ip, ror r2
   25014:	andeq	r5, r2, ip, ror r1
   25018:	andeq	r5, r2, ip, ror r2
   2501c:	andeq	r5, r2, r4, lsl #8
   25020:	andeq	r5, r2, ip, ror r2
   25024:	andeq	r5, r2, ip, ror r2
   25028:	andeq	r5, r2, ip, ror r2
   2502c:	andeq	r5, r2, ip, ror r1
   25030:	andeq	r5, r2, ip, ror r1
   25034:	andeq	r5, r2, ip, ror r1
   25038:	andeq	r5, r2, ip, ror r1
   2503c:	andeq	r5, r2, ip, ror r1
   25040:	andeq	r5, r2, ip, ror r1
   25044:	andeq	r5, r2, ip, ror r1
   25048:	andeq	r5, r2, ip, ror r1
   2504c:	andeq	r5, r2, ip, ror r1
   25050:	andeq	r5, r2, ip, ror r1
   25054:	andeq	r5, r2, ip, ror r1
   25058:	andeq	r5, r2, ip, ror r1
   2505c:	andeq	r5, r2, ip, ror r1
   25060:	andeq	r5, r2, ip, ror r1
   25064:	andeq	r5, r2, ip, ror r1
   25068:	andeq	r5, r2, ip, ror r1
   2506c:	andeq	r5, r2, ip, ror r2
   25070:	andeq	r5, r2, ip, ror r2
   25074:	andeq	r5, r2, ip, ror r2
   25078:	andeq	r5, r2, ip, ror r2
   2507c:	andeq	r5, r2, ip, asr #7
   25080:	muleq	r2, r4, r4
   25084:	andeq	r5, r2, ip, ror r1
   25088:	andeq	r5, r2, ip, ror r1
   2508c:	andeq	r5, r2, ip, ror r1
   25090:	andeq	r5, r2, ip, ror r1
   25094:	andeq	r5, r2, ip, ror r1
   25098:	andeq	r5, r2, ip, ror r1
   2509c:	andeq	r5, r2, ip, ror r1
   250a0:	andeq	r5, r2, ip, ror r1
   250a4:	andeq	r5, r2, ip, ror r1
   250a8:	andeq	r5, r2, ip, ror r1
   250ac:	andeq	r5, r2, ip, ror r1
   250b0:	andeq	r5, r2, ip, ror r1
   250b4:	andeq	r5, r2, ip, ror r1
   250b8:	andeq	r5, r2, ip, ror r1
   250bc:	andeq	r5, r2, ip, ror r1
   250c0:	andeq	r5, r2, ip, ror r1
   250c4:	andeq	r5, r2, ip, ror r1
   250c8:	andeq	r5, r2, ip, ror r1
   250cc:	andeq	r5, r2, ip, ror r1
   250d0:	andeq	r5, r2, ip, ror r1
   250d4:	andeq	r5, r2, ip, ror r1
   250d8:	andeq	r5, r2, ip, ror r1
   250dc:	andeq	r5, r2, ip, ror r1
   250e0:	andeq	r5, r2, ip, ror r1
   250e4:	andeq	r5, r2, ip, ror r1
   250e8:	andeq	r5, r2, ip, ror r1
   250ec:	andeq	r5, r2, ip, ror r2
   250f0:	andeq	r5, r2, r4, lsr #5
   250f4:	andeq	r5, r2, ip, ror r1
   250f8:	andeq	r5, r2, ip, ror r2
   250fc:	andeq	r5, r2, ip, ror r1
   25100:	andeq	r5, r2, ip, ror r2
   25104:	andeq	r5, r2, ip, ror r1
   25108:	andeq	r5, r2, ip, ror r1
   2510c:	andeq	r5, r2, ip, ror r1
   25110:	andeq	r5, r2, ip, ror r1
   25114:	andeq	r5, r2, ip, ror r1
   25118:	andeq	r5, r2, ip, ror r1
   2511c:	andeq	r5, r2, ip, ror r1
   25120:	andeq	r5, r2, ip, ror r1
   25124:	andeq	r5, r2, ip, ror r1
   25128:	andeq	r5, r2, ip, ror r1
   2512c:	andeq	r5, r2, ip, ror r1
   25130:	andeq	r5, r2, ip, ror r1
   25134:	andeq	r5, r2, ip, ror r1
   25138:	andeq	r5, r2, ip, ror r1
   2513c:	andeq	r5, r2, ip, ror r1
   25140:	andeq	r5, r2, ip, ror r1
   25144:	andeq	r5, r2, ip, ror r1
   25148:	andeq	r5, r2, ip, ror r1
   2514c:	andeq	r5, r2, ip, ror r1
   25150:	andeq	r5, r2, ip, ror r1
   25154:	andeq	r5, r2, ip, ror r1
   25158:	andeq	r5, r2, ip, ror r1
   2515c:	andeq	r5, r2, ip, ror r1
   25160:	andeq	r5, r2, ip, ror r1
   25164:	andeq	r5, r2, ip, ror r1
   25168:	andeq	r5, r2, ip, ror r1
   2516c:	andeq	r5, r2, r8, lsr r2
   25170:	andeq	r5, r2, ip, ror r2
   25174:	andeq	r5, r2, r8, lsr r2
   25178:	andeq	r5, r2, r4, ror #4
   2517c:	ldr	r0, [fp, #-64]	; 0xffffffc0
   25180:	tst	r0, #1
   25184:	bne	251b0 <_obstack_memory_used@@Base+0x8c4>
   25188:	ldr	r1, [fp, #16]
   2518c:	ubfx	r0, r6, #5, #3
   25190:	mov	r2, #1
   25194:	ldr	r0, [r1, r0, lsl #2]
   25198:	and	r1, r6, #31
   2519c:	tst	r0, r2, lsl r1
   251a0:	beq	251b0 <_obstack_memory_used@@Base+0x8c4>
   251a4:	mov	r0, r6
   251a8:	mov	r1, r9
   251ac:	b	251c4 <_obstack_memory_used@@Base+0x8d8>
   251b0:	ldr	r0, [fp, #-52]	; 0xffffffcc
   251b4:	mov	r1, r9
   251b8:	cmp	r0, #0
   251bc:	mov	r0, r6
   251c0:	beq	25504 <_obstack_memory_used@@Base+0xc18>
   251c4:	ldr	r2, [fp, #-76]	; 0xffffffb4
   251c8:	tst	r2, #1
   251cc:	bne	25ad4 <_obstack_memory_used@@Base+0x11e8>
   251d0:	ldr	r2, [fp, #-68]	; 0xffffffbc
   251d4:	ldr	r3, [fp, #-56]	; 0xffffffc8
   251d8:	subs	r2, r2, #2
   251dc:	movwne	r2, #1
   251e0:	orr	r2, r2, r3
   251e4:	tst	r2, #1
   251e8:	bne	25224 <_obstack_memory_used@@Base+0x938>
   251ec:	cmp	r8, r4
   251f0:	movcc	r2, #39	; 0x27
   251f4:	strbcc	r2, [r5, r8]
   251f8:	add	r2, r8, #1
   251fc:	cmp	r2, r4
   25200:	movcc	r3, #36	; 0x24
   25204:	strbcc	r3, [r5, r2]
   25208:	add	r2, r8, #2
   2520c:	add	r8, r8, #3
   25210:	cmp	r2, r4
   25214:	movcc	r3, #39	; 0x27
   25218:	strbcc	r3, [r5, r2]
   2521c:	mov	r2, #1
   25220:	str	r2, [fp, #-56]	; 0xffffffc8
   25224:	cmp	r8, r4
   25228:	movcc	r2, #92	; 0x5c
   2522c:	strbcc	r2, [r5, r8]
   25230:	add	r8, r8, #1
   25234:	b	25548 <_obstack_memory_used@@Base+0xc5c>
   25238:	cmp	lr, #1
   2523c:	beq	25264 <_obstack_memory_used@@Base+0x978>
   25240:	mov	r9, #0
   25244:	cmn	lr, #1
   25248:	bne	25270 <_obstack_memory_used@@Base+0x984>
   2524c:	ldrb	r0, [ip, #1]
   25250:	cmp	r0, #0
   25254:	beq	25264 <_obstack_memory_used@@Base+0x978>
   25258:	mvn	lr, #0
   2525c:	mov	sl, #0
   25260:	b	2517c <_obstack_memory_used@@Base+0x890>
   25264:	mov	r9, #0
   25268:	cmp	r7, #0
   2526c:	beq	25278 <_obstack_memory_used@@Base+0x98c>
   25270:	mov	sl, #0
   25274:	b	2517c <_obstack_memory_used@@Base+0x890>
   25278:	mov	r1, #1
   2527c:	ldr	r0, [fp, #-68]	; 0xffffffbc
   25280:	cmp	r0, #2
   25284:	bne	2529c <_obstack_memory_used@@Base+0x9b0>
   25288:	ldr	r0, [fp, #-76]	; 0xffffffb4
   2528c:	mov	r9, r1
   25290:	tst	r0, #1
   25294:	beq	2517c <_obstack_memory_used@@Base+0x890>
   25298:	b	25ad4 <_obstack_memory_used@@Base+0x11e8>
   2529c:	mov	r9, r1
   252a0:	b	2517c <_obstack_memory_used@@Base+0x890>
   252a4:	ldr	r0, [fp, #-68]	; 0xffffffbc
   252a8:	cmp	r0, #2
   252ac:	bne	254e8 <_obstack_memory_used@@Base+0xbfc>
   252b0:	ldr	r0, [fp, #-76]	; 0xffffffb4
   252b4:	tst	r0, #1
   252b8:	bne	25ad4 <_obstack_memory_used@@Base+0x11e8>
   252bc:	mov	sl, #0
   252c0:	b	254fc <_obstack_memory_used@@Base+0xc10>
   252c4:	mov	r0, #102	; 0x66
   252c8:	b	25570 <_obstack_memory_used@@Base+0xc84>
   252cc:	mov	r2, #116	; 0x74
   252d0:	b	252e0 <_obstack_memory_used@@Base+0x9f4>
   252d4:	mov	r0, #98	; 0x62
   252d8:	b	25570 <_obstack_memory_used@@Base+0xc84>
   252dc:	mov	r2, #114	; 0x72
   252e0:	ldr	r0, [sp, #68]	; 0x44
   252e4:	tst	r0, #1
   252e8:	mov	r0, r2
   252ec:	bne	25570 <_obstack_memory_used@@Base+0xc84>
   252f0:	b	25ad4 <_obstack_memory_used@@Base+0x11e8>
   252f4:	ldr	r0, [sp, #84]	; 0x54
   252f8:	tst	r0, #1
   252fc:	beq	2558c <_obstack_memory_used@@Base+0xca0>
   25300:	ldr	r0, [fp, #-76]	; 0xffffffb4
   25304:	tst	r0, #1
   25308:	bne	25bc0 <_obstack_memory_used@@Base+0x12d4>
   2530c:	ldr	r0, [fp, #-68]	; 0xffffffbc
   25310:	ldr	r1, [fp, #-56]	; 0xffffffc8
   25314:	subs	r0, r0, #2
   25318:	movwne	r0, #1
   2531c:	orr	r0, r0, r1
   25320:	tst	r0, #1
   25324:	bne	25360 <_obstack_memory_used@@Base+0xa74>
   25328:	cmp	r8, r4
   2532c:	movcc	r0, #39	; 0x27
   25330:	strbcc	r0, [r5, r8]
   25334:	add	r0, r8, #1
   25338:	cmp	r0, r4
   2533c:	movcc	r1, #36	; 0x24
   25340:	strbcc	r1, [r5, r0]
   25344:	add	r0, r8, #2
   25348:	add	r8, r8, #3
   2534c:	cmp	r0, r4
   25350:	movcc	r1, #39	; 0x27
   25354:	strbcc	r1, [r5, r0]
   25358:	mov	r0, #1
   2535c:	str	r0, [fp, #-56]	; 0xffffffc8
   25360:	ldr	r1, [fp, #-68]	; 0xffffffbc
   25364:	cmp	r8, r4
   25368:	mov	r9, #0
   2536c:	mov	sl, #1
   25370:	mov	r6, #48	; 0x30
   25374:	movcc	r0, #92	; 0x5c
   25378:	strbcc	r0, [r5, r8]
   2537c:	add	r0, r8, #1
   25380:	cmp	r1, #2
   25384:	beq	25754 <_obstack_memory_used@@Base+0xe68>
   25388:	add	r1, r7, #1
   2538c:	cmp	r1, lr
   25390:	bcs	25754 <_obstack_memory_used@@Base+0xe68>
   25394:	ldrb	r1, [ip, r1]
   25398:	sub	r1, r1, #48	; 0x30
   2539c:	uxtb	r1, r1
   253a0:	cmp	r1, #9
   253a4:	bhi	25754 <_obstack_memory_used@@Base+0xe68>
   253a8:	cmp	r0, r4
   253ac:	movcc	r1, #48	; 0x30
   253b0:	strbcc	r1, [r5, r0]
   253b4:	add	r0, r8, #2
   253b8:	add	r8, r8, #3
   253bc:	cmp	r0, r4
   253c0:	movcc	r1, #48	; 0x30
   253c4:	strbcc	r1, [r5, r0]
   253c8:	b	2517c <_obstack_memory_used@@Base+0x890>
   253cc:	ldr	r0, [fp, #-68]	; 0xffffffbc
   253d0:	mov	sl, #0
   253d4:	mov	r6, #63	; 0x3f
   253d8:	cmp	r0, #5
   253dc:	beq	2575c <_obstack_memory_used@@Base+0xe70>
   253e0:	cmp	r0, #2
   253e4:	bne	25804 <_obstack_memory_used@@Base+0xf18>
   253e8:	ldr	r0, [fp, #-76]	; 0xffffffb4
   253ec:	mov	r9, #0
   253f0:	tst	r0, #1
   253f4:	beq	2517c <_obstack_memory_used@@Base+0x890>
   253f8:	b	25ad4 <_obstack_memory_used@@Base+0x11e8>
   253fc:	mov	r0, #118	; 0x76
   25400:	b	25570 <_obstack_memory_used@@Base+0xc84>
   25404:	mov	r0, #1
   25408:	mov	r6, #39	; 0x27
   2540c:	str	r0, [sp, #60]	; 0x3c
   25410:	ldr	r0, [fp, #-68]	; 0xffffffbc
   25414:	cmp	r0, #2
   25418:	bne	255a8 <_obstack_memory_used@@Base+0xcbc>
   2541c:	ldr	r0, [fp, #-76]	; 0xffffffb4
   25420:	tst	r0, #1
   25424:	bne	25ad4 <_obstack_memory_used@@Base+0x11e8>
   25428:	ldr	r2, [sp, #56]	; 0x38
   2542c:	clz	r1, r4
   25430:	mov	sl, #0
   25434:	mov	r9, #1
   25438:	lsr	r1, r1, #5
   2543c:	cmp	r2, #0
   25440:	mov	r0, r2
   25444:	movwne	r0, #1
   25448:	orrs	r0, r0, r1
   2544c:	moveq	r2, r4
   25450:	moveq	r4, r0
   25454:	cmp	r8, r4
   25458:	str	r2, [sp, #56]	; 0x38
   2545c:	movcc	r0, #39	; 0x27
   25460:	strbcc	r0, [r5, r8]
   25464:	add	r0, r8, #1
   25468:	cmp	r0, r4
   2546c:	movcc	r1, #92	; 0x5c
   25470:	strbcc	r1, [r5, r0]
   25474:	add	r0, r8, #2
   25478:	add	r8, r8, #3
   2547c:	cmp	r0, r4
   25480:	movcc	r1, #39	; 0x27
   25484:	strbcc	r1, [r5, r0]
   25488:	mov	r0, #0
   2548c:	str	r0, [fp, #-56]	; 0xffffffc8
   25490:	b	2517c <_obstack_memory_used@@Base+0x890>
   25494:	ldr	r0, [sp, #40]	; 0x28
   25498:	str	r4, [sp, #88]	; 0x58
   2549c:	cmp	r0, #1
   254a0:	bne	255b0 <_obstack_memory_used@@Base+0xcc4>
   254a4:	str	lr, [sp, #28]
   254a8:	bl	11e64 <__ctype_b_loc@plt>
   254ac:	ldr	r0, [r0]
   254b0:	ldr	ip, [fp, #-80]	; 0xffffffb0
   254b4:	mov	r2, #1
   254b8:	add	r0, r0, r6, lsl #1
   254bc:	ldrb	r0, [r0, #1]
   254c0:	ubfx	r9, r0, #6, #1
   254c4:	ldr	r0, [sp, #52]	; 0x34
   254c8:	cmp	r2, #1
   254cc:	orr	r0, r9, r0
   254d0:	bhi	2580c <_obstack_memory_used@@Base+0xf20>
   254d4:	tst	r0, #1
   254d8:	beq	2580c <_obstack_memory_used@@Base+0xf20>
   254dc:	ldr	lr, [sp, #28]
   254e0:	ldr	r4, [sp, #88]	; 0x58
   254e4:	b	2517c <_obstack_memory_used@@Base+0x890>
   254e8:	ldr	r1, [sp, #48]	; 0x30
   254ec:	mov	sl, #0
   254f0:	mov	r0, #92	; 0x5c
   254f4:	cmp	r1, #0
   254f8:	beq	25570 <_obstack_memory_used@@Base+0xc84>
   254fc:	mov	r6, #92	; 0x5c
   25500:	mov	r9, #0
   25504:	cmp	sl, #0
   25508:	bne	25540 <_obstack_memory_used@@Base+0xc54>
   2550c:	ldr	r0, [fp, #-56]	; 0xffffffc8
   25510:	tst	r0, #1
   25514:	beq	25540 <_obstack_memory_used@@Base+0xc54>
   25518:	cmp	r8, r4
   2551c:	movcc	r0, #39	; 0x27
   25520:	strbcc	r0, [r5, r8]
   25524:	add	r0, r8, #1
   25528:	add	r8, r8, #2
   2552c:	cmp	r0, r4
   25530:	movcc	r1, #39	; 0x27
   25534:	strbcc	r1, [r5, r0]
   25538:	mov	r0, #0
   2553c:	str	r0, [fp, #-56]	; 0xffffffc8
   25540:	mov	r1, r9
   25544:	mov	r0, r6
   25548:	cmp	r8, r4
   2554c:	strbcc	r0, [r5, r8]
   25550:	ldr	r0, [fp, #-48]	; 0xffffffd0
   25554:	add	r8, r8, #1
   25558:	and	r0, r0, r1
   2555c:	str	r0, [fp, #-48]	; 0xffffffd0
   25560:	add	r7, r7, #1
   25564:	cmn	lr, #1
   25568:	bne	24ea8 <_obstack_memory_used@@Base+0x5bc>
   2556c:	b	24eb4 <_obstack_memory_used@@Base+0x5c8>
   25570:	ldr	r1, [sp, #84]	; 0x54
   25574:	mov	sl, #0
   25578:	mov	r9, #0
   2557c:	tst	r1, #1
   25580:	mov	r1, #0
   25584:	beq	2517c <_obstack_memory_used@@Base+0x890>
   25588:	b	251c4 <_obstack_memory_used@@Base+0x8d8>
   2558c:	ldr	r0, [sp, #36]	; 0x24
   25590:	mov	r6, #0
   25594:	mov	sl, #0
   25598:	mov	r9, #0
   2559c:	cmp	r0, #0
   255a0:	beq	2517c <_obstack_memory_used@@Base+0x890>
   255a4:	b	25560 <_obstack_memory_used@@Base+0xc74>
   255a8:	mov	r9, #1
   255ac:	b	2517c <_obstack_memory_used@@Base+0x890>
   255b0:	mov	r0, #0
   255b4:	cmn	lr, #1
   255b8:	sub	r4, fp, #40	; 0x28
   255bc:	str	r0, [fp, #-36]	; 0xffffffdc
   255c0:	str	r0, [fp, #-40]	; 0xffffffd8
   255c4:	bne	255d8 <_obstack_memory_used@@Base+0xcec>
   255c8:	mov	r0, ip
   255cc:	bl	11eac <strlen@plt>
   255d0:	ldr	ip, [fp, #-80]	; 0xffffffb0
   255d4:	mov	lr, r0
   255d8:	ldr	r0, [sp, #72]	; 0x48
   255dc:	mov	r9, #1
   255e0:	mov	r2, #0
   255e4:	str	lr, [sp, #28]
   255e8:	add	r0, r0, r7
   255ec:	str	r0, [sp, #20]
   255f0:	b	25634 <_obstack_memory_used@@Base+0xd48>
   255f4:	ldr	r5, [sp, #44]	; 0x2c
   255f8:	add	r5, r0, r5
   255fc:	ldr	r0, [fp, #-44]	; 0xffffffd4
   25600:	bl	11d14 <iswprint@plt>
   25604:	cmp	r0, #0
   25608:	sub	r4, fp, #40	; 0x28
   2560c:	movwne	r0, #1
   25610:	and	r9, r9, r0
   25614:	mov	r0, r4
   25618:	bl	11c78 <mbsinit@plt>
   2561c:	mov	r2, r5
   25620:	ldr	lr, [sp, #28]
   25624:	ldr	r5, [fp, #-84]	; 0xffffffac
   25628:	ldr	ip, [fp, #-80]	; 0xffffffb0
   2562c:	cmp	r0, #0
   25630:	bne	254c4 <_obstack_memory_used@@Base+0xbd8>
   25634:	add	r0, r2, r7
   25638:	str	r2, [sp, #44]	; 0x2c
   2563c:	mov	r3, r4
   25640:	add	r1, ip, r0
   25644:	str	r0, [sp, #24]
   25648:	sub	r2, lr, r0
   2564c:	sub	r0, fp, #44	; 0x2c
   25650:	bl	21e2c <__assert_fail@plt+0xfda0>
   25654:	cmp	r0, #0
   25658:	beq	259fc <_obstack_memory_used@@Base+0x1110>
   2565c:	cmn	r0, #1
   25660:	beq	259b8 <_obstack_memory_used@@Base+0x10cc>
   25664:	ldr	lr, [sp, #28]
   25668:	cmn	r0, #2
   2566c:	beq	259c0 <_obstack_memory_used@@Base+0x10d4>
   25670:	ldr	r2, [sp, #64]	; 0x40
   25674:	ldr	r4, [sp, #88]	; 0x58
   25678:	ldr	ip, [sp, #84]	; 0x54
   2567c:	cmp	r0, #2
   25680:	mov	r1, #0
   25684:	movwcc	r1, #1
   25688:	eor	r2, r2, #1
   2568c:	orrs	r1, r2, r1
   25690:	bne	255f4 <_obstack_memory_used@@Base+0xd08>
   25694:	ldr	r1, [sp, #44]	; 0x2c
   25698:	ldr	r2, [sp, #20]
   2569c:	add	r1, r2, r1
   256a0:	sub	r2, r0, #1
   256a4:	b	256b4 <_obstack_memory_used@@Base+0xdc8>
   256a8:	add	r1, r1, #1
   256ac:	subs	r2, r2, #1
   256b0:	beq	255f4 <_obstack_memory_used@@Base+0xd08>
   256b4:	ldrb	r3, [r1]
   256b8:	sub	r3, r3, #91	; 0x5b
   256bc:	cmp	r3, #33	; 0x21
   256c0:	bhi	256a8 <_obstack_memory_used@@Base+0xdbc>
   256c4:	add	r5, pc, #0
   256c8:	ldr	pc, [r5, r3, lsl #2]
   256cc:			; <UNDEFINED> instruction: 0x00025ab0
   256d0:			; <UNDEFINED> instruction: 0x00025ab0
   256d4:	andeq	r5, r2, r8, lsr #13
   256d8:			; <UNDEFINED> instruction: 0x00025ab0
   256dc:	andeq	r5, r2, r8, lsr #13
   256e0:			; <UNDEFINED> instruction: 0x00025ab0
   256e4:	andeq	r5, r2, r8, lsr #13
   256e8:	andeq	r5, r2, r8, lsr #13
   256ec:	andeq	r5, r2, r8, lsr #13
   256f0:	andeq	r5, r2, r8, lsr #13
   256f4:	andeq	r5, r2, r8, lsr #13
   256f8:	andeq	r5, r2, r8, lsr #13
   256fc:	andeq	r5, r2, r8, lsr #13
   25700:	andeq	r5, r2, r8, lsr #13
   25704:	andeq	r5, r2, r8, lsr #13
   25708:	andeq	r5, r2, r8, lsr #13
   2570c:	andeq	r5, r2, r8, lsr #13
   25710:	andeq	r5, r2, r8, lsr #13
   25714:	andeq	r5, r2, r8, lsr #13
   25718:	andeq	r5, r2, r8, lsr #13
   2571c:	andeq	r5, r2, r8, lsr #13
   25720:	andeq	r5, r2, r8, lsr #13
   25724:	andeq	r5, r2, r8, lsr #13
   25728:	andeq	r5, r2, r8, lsr #13
   2572c:	andeq	r5, r2, r8, lsr #13
   25730:	andeq	r5, r2, r8, lsr #13
   25734:	andeq	r5, r2, r8, lsr #13
   25738:	andeq	r5, r2, r8, lsr #13
   2573c:	andeq	r5, r2, r8, lsr #13
   25740:	andeq	r5, r2, r8, lsr #13
   25744:	andeq	r5, r2, r8, lsr #13
   25748:	andeq	r5, r2, r8, lsr #13
   2574c:	andeq	r5, r2, r8, lsr #13
   25750:			; <UNDEFINED> instruction: 0x00025ab0
   25754:	mov	r8, r0
   25758:	b	2517c <_obstack_memory_used@@Base+0x890>
   2575c:	ldr	r0, [sp, #32]
   25760:	cmp	r0, #0
   25764:	beq	25804 <_obstack_memory_used@@Base+0xf18>
   25768:	add	r0, r7, #2
   2576c:	cmp	r0, lr
   25770:	bcs	25804 <_obstack_memory_used@@Base+0xf18>
   25774:	add	r1, r7, ip
   25778:	ldrb	r1, [r1, #1]
   2577c:	cmp	r1, #63	; 0x3f
   25780:	bne	25804 <_obstack_memory_used@@Base+0xf18>
   25784:	ldrb	r9, [ip, r0]
   25788:	sub	r2, r9, #33	; 0x21
   2578c:	cmp	r2, #29
   25790:	bhi	25804 <_obstack_memory_used@@Base+0xf18>
   25794:	movw	r1, #20929	; 0x51c1
   25798:	mov	r3, #1
   2579c:	movt	r1, #14336	; 0x3800
   257a0:	tst	r1, r3, lsl r2
   257a4:	beq	25804 <_obstack_memory_used@@Base+0xf18>
   257a8:	ldr	r1, [fp, #-76]	; 0xffffffb4
   257ac:	tst	r1, #1
   257b0:	bne	25ad4 <_obstack_memory_used@@Base+0x11e8>
   257b4:	cmp	r8, r4
   257b8:	add	r2, r8, #1
   257bc:	mov	r6, r9
   257c0:	mov	r7, r0
   257c4:	mov	r9, #0
   257c8:	movcc	r1, #63	; 0x3f
   257cc:	strbcc	r1, [r5, r8]
   257d0:	cmp	r2, r4
   257d4:	movcc	r1, #34	; 0x22
   257d8:	strbcc	r1, [r5, r2]
   257dc:	add	r2, r8, #2
   257e0:	cmp	r2, r4
   257e4:	movcc	r1, #34	; 0x22
   257e8:	strbcc	r1, [r5, r2]
   257ec:	add	r2, r8, #3
   257f0:	add	r8, r8, #4
   257f4:	cmp	r2, r4
   257f8:	movcc	r1, #63	; 0x3f
   257fc:	strbcc	r1, [r5, r2]
   25800:	b	2517c <_obstack_memory_used@@Base+0x890>
   25804:	mov	r9, #0
   25808:	b	2517c <_obstack_memory_used@@Base+0x890>
   2580c:	ldr	lr, [sp, #28]
   25810:	ldr	r4, [fp, #-56]	; 0xffffffc8
   25814:	add	r1, r2, r7
   25818:	mov	r2, #0
   2581c:	str	r1, [sp, #44]	; 0x2c
   25820:	tst	r0, #1
   25824:	bne	25940 <_obstack_memory_used@@Base+0x1054>
   25828:	ldr	r1, [fp, #-76]	; 0xffffffb4
   2582c:	tst	r1, #1
   25830:	bne	25ad0 <_obstack_memory_used@@Base+0x11e4>
   25834:	ldr	r1, [fp, #-68]	; 0xffffffbc
   25838:	subs	r2, r1, #2
   2583c:	movwne	r2, #1
   25840:	orr	r2, r2, r4
   25844:	tst	r2, #1
   25848:	bne	2588c <_obstack_memory_used@@Base+0xfa0>
   2584c:	ldr	r1, [sp, #88]	; 0x58
   25850:	add	r2, r8, #1
   25854:	mov	r4, #1
   25858:	cmp	r8, r1
   2585c:	movcc	r1, #39	; 0x27
   25860:	strbcc	r1, [r5, r8]
   25864:	ldr	r1, [sp, #88]	; 0x58
   25868:	cmp	r2, r1
   2586c:	movcc	r1, #36	; 0x24
   25870:	strbcc	r1, [r5, r2]
   25874:	ldr	r1, [sp, #88]	; 0x58
   25878:	add	r2, r8, #2
   2587c:	add	r8, r8, #3
   25880:	cmp	r2, r1
   25884:	movcc	r1, #39	; 0x27
   25888:	strbcc	r1, [r5, r2]
   2588c:	ldr	r1, [sp, #88]	; 0x58
   25890:	add	r2, r8, #1
   25894:	cmp	r8, r1
   25898:	movcc	r1, #92	; 0x5c
   2589c:	strbcc	r1, [r5, r8]
   258a0:	ldr	r1, [sp, #88]	; 0x58
   258a4:	cmp	r2, r1
   258a8:	bcs	258bc <_obstack_memory_used@@Base+0xfd0>
   258ac:	uxtb	r3, r6
   258b0:	mov	r1, #48	; 0x30
   258b4:	orr	r3, r1, r3, lsr #6
   258b8:	strb	r3, [r5, r2]
   258bc:	ldr	r1, [sp, #88]	; 0x58
   258c0:	add	r2, r8, #2
   258c4:	add	r8, r8, #3
   258c8:	cmp	r2, r1
   258cc:	lsrcc	r3, r6, #3
   258d0:	movcc	r1, #6
   258d4:	bficc	r3, r1, #3, #29
   258d8:	mov	r1, #6
   258dc:	bfi	r6, r1, #3, #29
   258e0:	strbcc	r3, [r5, r2]
   258e4:	mov	r2, #1
   258e8:	b	25968 <_obstack_memory_used@@Base+0x107c>
   258ec:	ldr	r1, [sp, #88]	; 0x58
   258f0:	ldr	r5, [fp, #-84]	; 0xffffffac
   258f4:	ldr	r4, [sp, #88]	; 0x58
   258f8:	cmp	r8, r1
   258fc:	movcc	r1, #39	; 0x27
   25900:	strbcc	r1, [r5, r8]
   25904:	add	r1, r8, #1
   25908:	add	r8, r8, #2
   2590c:	cmp	r1, r4
   25910:	movcc	r4, #39	; 0x27
   25914:	strbcc	r4, [r5, r1]
   25918:	mov	r4, #0
   2591c:	ldr	r1, [sp, #88]	; 0x58
   25920:	cmp	r8, r1
   25924:	ldr	r1, [sp, #72]	; 0x48
   25928:	strbcc	r6, [r5, r8]
   2592c:	add	r8, r8, #1
   25930:	ldrb	r6, [r1, r7]
   25934:	mov	r7, r3
   25938:	tst	r0, #1
   2593c:	beq	25828 <_obstack_memory_used@@Base+0xf3c>
   25940:	ldr	r1, [fp, #-52]	; 0xffffffcc
   25944:	tst	r1, #1
   25948:	beq	25960 <_obstack_memory_used@@Base+0x1074>
   2594c:	ldr	r1, [sp, #88]	; 0x58
   25950:	cmp	r8, r1
   25954:	movcc	r1, #92	; 0x5c
   25958:	strbcc	r1, [r5, r8]
   2595c:	add	r8, r8, #1
   25960:	mov	r1, #0
   25964:	str	r1, [fp, #-52]	; 0xffffffcc
   25968:	ldr	r1, [sp, #44]	; 0x2c
   2596c:	add	r3, r7, #1
   25970:	and	sl, r2, #1
   25974:	cmp	r1, r3
   25978:	bls	2599c <_obstack_memory_used@@Base+0x10b0>
   2597c:	cmp	sl, #0
   25980:	mvn	r5, r4
   25984:	movwne	sl, #1
   25988:	orr	r5, r5, sl
   2598c:	tst	r5, #1
   25990:	beq	258ec <_obstack_memory_used@@Base+0x1000>
   25994:	ldr	r5, [fp, #-84]	; 0xffffffac
   25998:	b	2591c <_obstack_memory_used@@Base+0x1030>
   2599c:	str	r4, [fp, #-56]	; 0xffffffc8
   259a0:	ldr	r4, [sp, #88]	; 0x58
   259a4:	cmp	sl, #0
   259a8:	movwne	sl, #1
   259ac:	cmp	sl, #0
   259b0:	beq	2550c <_obstack_memory_used@@Base+0xc20>
   259b4:	b	25540 <_obstack_memory_used@@Base+0xc54>
   259b8:	mov	r9, #0
   259bc:	b	259fc <_obstack_memory_used@@Base+0x1110>
   259c0:	ldr	r0, [sp, #24]
   259c4:	mov	r9, #0
   259c8:	cmp	lr, r0
   259cc:	bls	259fc <_obstack_memory_used@@Base+0x1110>
   259d0:	ldr	ip, [fp, #-80]	; 0xffffffb0
   259d4:	ldr	r2, [sp, #44]	; 0x2c
   259d8:	add	r0, ip, r7
   259dc:	ldrb	r1, [r0, r2]
   259e0:	cmp	r1, #0
   259e4:	beq	254c4 <_obstack_memory_used@@Base+0xbd8>
   259e8:	add	r2, r2, #1
   259ec:	add	r1, r7, r2
   259f0:	cmp	r1, lr
   259f4:	bcc	259dc <_obstack_memory_used@@Base+0x10f0>
   259f8:	b	254c4 <_obstack_memory_used@@Base+0xbd8>
   259fc:	ldr	ip, [fp, #-80]	; 0xffffffb0
   25a00:	ldr	r2, [sp, #44]	; 0x2c
   25a04:	b	254c4 <_obstack_memory_used@@Base+0xbd8>
   25a08:	mov	lr, r7
   25a0c:	b	25a14 <_obstack_memory_used@@Base+0x1128>
   25a10:	mvn	lr, #0
   25a14:	ldr	r1, [fp, #-68]	; 0xffffffbc
   25a18:	ldr	r2, [fp, #-76]	; 0xffffffb4
   25a1c:	eor	r0, r1, #2
   25a20:	orr	r0, r0, r8
   25a24:	clz	r0, r0
   25a28:	lsr	r0, r0, #5
   25a2c:	tst	r2, r0
   25a30:	bne	25ad4 <_obstack_memory_used@@Base+0x11e8>
   25a34:	subs	r0, r1, #2
   25a38:	movwne	r0, #1
   25a3c:	orr	r0, r2, r0
   25a40:	tst	r0, #1
   25a44:	ldreq	r0, [sp, #60]	; 0x3c
   25a48:	eoreq	r0, r0, #1
   25a4c:	tsteq	r0, #1
   25a50:	bne	25b68 <_obstack_memory_used@@Base+0x127c>
   25a54:	ldr	r0, [fp, #-48]	; 0xffffffd0
   25a58:	mov	sl, lr
   25a5c:	tst	r0, #1
   25a60:	bne	25b34 <_obstack_memory_used@@Base+0x1248>
   25a64:	ldr	r6, [sp, #56]	; 0x38
   25a68:	mov	r9, #0
   25a6c:	cmp	r6, #0
   25a70:	beq	25b60 <_obstack_memory_used@@Base+0x1274>
   25a74:	ldr	r0, [sp, #84]	; 0x54
   25a78:	mov	r1, #0
   25a7c:	mov	r7, #2
   25a80:	cmp	r4, #0
   25a84:	str	r1, [fp, #-48]	; 0xffffffd0
   25a88:	mov	r1, #0
   25a8c:	str	r1, [fp, #-76]	; 0xffffffb4
   25a90:	beq	24c30 <_obstack_memory_used@@Base+0x344>
   25a94:	b	25b68 <_obstack_memory_used@@Base+0x127c>
   25a98:	ldr	ip, [fp, #-80]	; 0xffffffb0
   25a9c:	ldr	r1, [fp, #12]
   25aa0:	ldr	r2, [fp, #-68]	; 0xffffffbc
   25aa4:	mov	lr, r4
   25aa8:	mov	r4, r6
   25aac:	b	25af4 <_obstack_memory_used@@Base+0x1208>
   25ab0:	tst	ip, #1
   25ab4:	ldr	r5, [fp, #-84]	; 0xffffffac
   25ab8:	ldr	ip, [fp, #-80]	; 0xffffffb0
   25abc:	ldr	r1, [fp, #12]
   25ac0:	mov	r0, #2
   25ac4:	movwne	r0, #4
   25ac8:	mov	r2, r0
   25acc:	b	25af4 <_obstack_memory_used@@Base+0x1208>
   25ad0:	ldr	r4, [sp, #88]	; 0x58
   25ad4:	ldr	r1, [sp, #84]	; 0x54
   25ad8:	mov	r0, #2
   25adc:	tst	r1, #1
   25ae0:	movwne	r0, #4
   25ae4:	ldr	r2, [fp, #-68]	; 0xffffffbc
   25ae8:	ldr	r1, [fp, #12]
   25aec:	cmp	r2, #2
   25af0:	moveq	r2, r0
   25af4:	mov	r0, #0
   25af8:	bic	r1, r1, #2
   25afc:	str	r2, [sp]
   25b00:	mov	r2, ip
   25b04:	mov	r3, lr
   25b08:	str	r0, [sp, #8]
   25b0c:	ldr	r0, [sp, #76]	; 0x4c
   25b10:	str	r1, [sp, #4]
   25b14:	mov	r1, r4
   25b18:	str	r0, [sp, #12]
   25b1c:	ldr	r0, [sp, #80]	; 0x50
   25b20:	str	r0, [sp, #16]
   25b24:	mov	r0, r5
   25b28:	bl	24ba0 <_obstack_memory_used@@Base+0x2b4>
   25b2c:	mov	r8, r0
   25b30:	b	25bb4 <_obstack_memory_used@@Base+0x12c8>
   25b34:	mov	r0, #5
   25b38:	ldr	r1, [sp, #56]	; 0x38
   25b3c:	ldr	r2, [fp, #-80]	; 0xffffffb0
   25b40:	mov	r3, sl
   25b44:	str	r0, [sp]
   25b48:	ldr	r0, [fp, #12]
   25b4c:	str	r0, [sp, #4]
   25b50:	ldr	r0, [fp, #16]
   25b54:	str	r0, [sp, #8]
   25b58:	ldr	r0, [sp, #76]	; 0x4c
   25b5c:	b	25b18 <_obstack_memory_used@@Base+0x122c>
   25b60:	mov	r0, #0
   25b64:	str	r0, [fp, #-76]	; 0xffffffb4
   25b68:	ldr	r1, [fp, #-88]	; 0xffffffa8
   25b6c:	cmp	r1, #0
   25b70:	beq	25ba8 <_obstack_memory_used@@Base+0x12bc>
   25b74:	ldr	r0, [fp, #-76]	; 0xffffffb4
   25b78:	tst	r0, #1
   25b7c:	bne	25ba8 <_obstack_memory_used@@Base+0x12bc>
   25b80:	ldrb	r0, [r1]
   25b84:	cmp	r0, #0
   25b88:	beq	25ba8 <_obstack_memory_used@@Base+0x12bc>
   25b8c:	add	r1, r1, #1
   25b90:	cmp	r8, r4
   25b94:	strbcc	r0, [r5, r8]
   25b98:	add	r8, r8, #1
   25b9c:	ldrb	r0, [r1], #1
   25ba0:	cmp	r0, #0
   25ba4:	bne	25b90 <_obstack_memory_used@@Base+0x12a4>
   25ba8:	cmp	r8, r4
   25bac:	movcc	r0, #0
   25bb0:	strbcc	r0, [r5, r8]
   25bb4:	mov	r0, r8
   25bb8:	sub	sp, fp, #28
   25bbc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   25bc0:	mov	r0, #4
   25bc4:	b	25ae4 <_obstack_memory_used@@Base+0x11f8>
   25bc8:	bl	12038 <abort@plt>
   25bcc:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   25bd0:	add	fp, sp, #28
   25bd4:	sub	sp, sp, #28
   25bd8:	movw	r5, #62440	; 0xf3e8
   25bdc:	cmp	r2, #0
   25be0:	mov	r4, r1
   25be4:	mov	r7, r0
   25be8:	str	r0, [sp, #20]
   25bec:	movt	r5, #3
   25bf0:	movne	r5, r2
   25bf4:	bl	11ed0 <__errno_location@plt>
   25bf8:	mov	sl, r0
   25bfc:	ldr	r2, [r5, #40]	; 0x28
   25c00:	ldr	r3, [r5, #44]	; 0x2c
   25c04:	ldm	r5, {r0, r1}
   25c08:	orr	r8, r1, #1
   25c0c:	add	r9, r5, #8
   25c10:	mov	r1, #0
   25c14:	ldr	r6, [sl]
   25c18:	stm	sp, {r0, r8, r9}
   25c1c:	mov	r0, #0
   25c20:	str	r2, [sp, #12]
   25c24:	str	r3, [sp, #16]
   25c28:	mov	r2, r7
   25c2c:	mov	r3, r4
   25c30:	str	r6, [sp, #24]
   25c34:	mov	r6, r4
   25c38:	bl	24ba0 <_obstack_memory_used@@Base+0x2b4>
   25c3c:	add	r7, r0, #1
   25c40:	mov	r0, r7
   25c44:	bl	27780 <_obstack_memory_used@@Base+0x2e94>
   25c48:	mov	r4, r0
   25c4c:	ldr	r0, [r5]
   25c50:	ldr	r2, [r5, #44]	; 0x2c
   25c54:	ldr	r1, [r5, #40]	; 0x28
   25c58:	mov	r3, r6
   25c5c:	stm	sp, {r0, r8, r9}
   25c60:	str	r2, [sp, #16]
   25c64:	ldr	r2, [sp, #20]
   25c68:	str	r1, [sp, #12]
   25c6c:	mov	r0, r4
   25c70:	mov	r1, r7
   25c74:	bl	24ba0 <_obstack_memory_used@@Base+0x2b4>
   25c78:	ldr	r0, [sp, #24]
   25c7c:	str	r0, [sl]
   25c80:	mov	r0, r4
   25c84:	sub	sp, fp, #28
   25c88:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   25c8c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   25c90:	add	fp, sp, #28
   25c94:	sub	sp, sp, #36	; 0x24
   25c98:	movw	r8, #62440	; 0xf3e8
   25c9c:	cmp	r3, #0
   25ca0:	mov	r4, r2
   25ca4:	str	r2, [sp, #24]
   25ca8:	mov	r5, r1
   25cac:	mov	r6, r0
   25cb0:	str	r0, [sp, #20]
   25cb4:	movt	r8, #3
   25cb8:	movne	r8, r3
   25cbc:	bl	11ed0 <__errno_location@plt>
   25cc0:	str	r0, [sp, #28]
   25cc4:	ldr	r1, [r8, #40]	; 0x28
   25cc8:	ldr	r2, [r8, #44]	; 0x2c
   25ccc:	ldr	r7, [r0]
   25cd0:	cmp	r4, #0
   25cd4:	add	sl, r8, #8
   25cd8:	mov	r0, #0
   25cdc:	ldm	r8, {r3, r9}
   25ce0:	orreq	r9, r9, #1
   25ce4:	stm	sp, {r3, r9, sl}
   25ce8:	str	r1, [sp, #12]
   25cec:	str	r2, [sp, #16]
   25cf0:	mov	r1, #0
   25cf4:	mov	r2, r6
   25cf8:	mov	r3, r5
   25cfc:	str	r7, [sp, #32]
   25d00:	mov	r7, r5
   25d04:	bl	24ba0 <_obstack_memory_used@@Base+0x2b4>
   25d08:	add	r4, r0, #1
   25d0c:	mov	r5, r0
   25d10:	mov	r0, r4
   25d14:	bl	27780 <_obstack_memory_used@@Base+0x2e94>
   25d18:	mov	r6, r0
   25d1c:	ldr	r0, [r8]
   25d20:	ldr	r2, [r8, #44]	; 0x2c
   25d24:	ldr	r1, [r8, #40]	; 0x28
   25d28:	mov	r3, r7
   25d2c:	stm	sp, {r0, r9, sl}
   25d30:	str	r2, [sp, #16]
   25d34:	ldr	r2, [sp, #20]
   25d38:	str	r1, [sp, #12]
   25d3c:	mov	r0, r6
   25d40:	mov	r1, r4
   25d44:	bl	24ba0 <_obstack_memory_used@@Base+0x2b4>
   25d48:	ldr	r0, [sp, #24]
   25d4c:	ldr	r1, [sp, #32]
   25d50:	ldr	r2, [sp, #28]
   25d54:	cmp	r0, #0
   25d58:	str	r1, [r2]
   25d5c:	strne	r5, [r0]
   25d60:	mov	r0, r6
   25d64:	sub	sp, fp, #28
   25d68:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   25d6c:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   25d70:	add	fp, sp, #24
   25d74:	movw	r5, #58044	; 0xe2bc
   25d78:	movw	r8, #58040	; 0xe2b8
   25d7c:	movt	r5, #3
   25d80:	movt	r8, #3
   25d84:	ldr	r0, [r5]
   25d88:	ldr	r4, [r8]
   25d8c:	cmp	r0, #2
   25d90:	blt	25dbc <_obstack_memory_used@@Base+0x14d0>
   25d94:	add	r7, r4, #12
   25d98:	mov	r6, #0
   25d9c:	ldr	r0, [r7, r6, lsl #3]
   25da0:	bl	1f89c <__assert_fail@plt+0xd810>
   25da4:	ldr	r1, [r5]
   25da8:	add	r2, r6, #2
   25dac:	add	r0, r6, #1
   25db0:	mov	r6, r0
   25db4:	cmp	r2, r1
   25db8:	blt	25d9c <_obstack_memory_used@@Base+0x14b0>
   25dbc:	ldr	r0, [r4, #4]
   25dc0:	movw	r9, #62488	; 0xf418
   25dc4:	movw	r7, #58048	; 0xe2c0
   25dc8:	movt	r9, #3
   25dcc:	movt	r7, #3
   25dd0:	cmp	r0, r9
   25dd4:	beq	25de4 <_obstack_memory_used@@Base+0x14f8>
   25dd8:	bl	1f89c <__assert_fail@plt+0xd810>
   25ddc:	mov	r0, #256	; 0x100
   25de0:	stm	r7, {r0, r9}
   25de4:	cmp	r4, r7
   25de8:	beq	25df8 <_obstack_memory_used@@Base+0x150c>
   25dec:	mov	r0, r4
   25df0:	bl	1f89c <__assert_fail@plt+0xd810>
   25df4:	str	r7, [r8]
   25df8:	mov	r0, #1
   25dfc:	str	r0, [r5]
   25e00:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   25e04:	movw	r3, #62440	; 0xf3e8
   25e08:	mvn	r2, #0
   25e0c:	movt	r3, #3
   25e10:	b	25e14 <_obstack_memory_used@@Base+0x1528>
   25e14:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   25e18:	add	fp, sp, #28
   25e1c:	sub	sp, sp, #44	; 0x2c
   25e20:	mov	r7, r3
   25e24:	str	r2, [sp, #36]	; 0x24
   25e28:	str	r1, [sp, #32]
   25e2c:	mov	r5, r0
   25e30:	bl	11ed0 <__errno_location@plt>
   25e34:	cmp	r5, #0
   25e38:	bmi	25fa8 <_obstack_memory_used@@Base+0x16bc>
   25e3c:	cmn	r5, #-2147483647	; 0x80000001
   25e40:	beq	25fa8 <_obstack_memory_used@@Base+0x16bc>
   25e44:	movw	r8, #58044	; 0xe2bc
   25e48:	movw	r4, #58040	; 0xe2b8
   25e4c:	str	r0, [sp, #28]
   25e50:	ldr	r0, [r0]
   25e54:	movt	r8, #3
   25e58:	movt	r4, #3
   25e5c:	ldr	r1, [r8]
   25e60:	ldr	r6, [r4]
   25e64:	str	r0, [sp, #24]
   25e68:	cmp	r1, r5
   25e6c:	ble	25e78 <_obstack_memory_used@@Base+0x158c>
   25e70:	mov	sl, r6
   25e74:	b	25ee4 <_obstack_memory_used@@Base+0x15f8>
   25e78:	movw	r9, #58048	; 0xe2c0
   25e7c:	mov	r0, #8
   25e80:	str	r1, [fp, #-32]	; 0xffffffe0
   25e84:	sub	r1, r5, r1
   25e88:	mvn	r3, #-2147483648	; 0x80000000
   25e8c:	movt	r9, #3
   25e90:	str	r0, [sp]
   25e94:	add	r2, r1, #1
   25e98:	sub	r1, fp, #32
   25e9c:	subs	r0, r6, r9
   25ea0:	movne	r0, r6
   25ea4:	bl	27980 <_obstack_memory_used@@Base+0x3094>
   25ea8:	mov	sl, r0
   25eac:	cmp	r6, r9
   25eb0:	str	r0, [r4]
   25eb4:	bne	25ec0 <_obstack_memory_used@@Base+0x15d4>
   25eb8:	ldrd	r0, [r9]
   25ebc:	stm	sl, {r0, r1}
   25ec0:	ldr	r1, [r8]
   25ec4:	ldr	r2, [fp, #-32]	; 0xffffffe0
   25ec8:	add	r0, sl, r1, lsl #3
   25ecc:	sub	r1, r2, r1
   25ed0:	lsl	r2, r1, #3
   25ed4:	mov	r1, #0
   25ed8:	bl	11ef4 <memset@plt>
   25edc:	ldr	r0, [fp, #-32]	; 0xffffffe0
   25ee0:	str	r0, [r8]
   25ee4:	mov	r9, sl
   25ee8:	ldm	r7, {r0, r1}
   25eec:	orr	r8, r1, #1
   25ef0:	add	r1, r7, #8
   25ef4:	ldr	r2, [r7, #40]	; 0x28
   25ef8:	ldr	r3, [r7, #44]	; 0x2c
   25efc:	ldr	r6, [r9, r5, lsl #3]!
   25f00:	str	r1, [sp, #20]
   25f04:	ldr	r4, [r9, #4]!
   25f08:	stm	sp, {r0, r8}
   25f0c:	add	r0, sp, #8
   25f10:	stm	r0, {r1, r2, r3}
   25f14:	ldr	r2, [sp, #32]
   25f18:	ldr	r3, [sp, #36]	; 0x24
   25f1c:	mov	r1, r6
   25f20:	mov	r0, r4
   25f24:	bl	24ba0 <_obstack_memory_used@@Base+0x2b4>
   25f28:	cmp	r6, r0
   25f2c:	bhi	25f90 <_obstack_memory_used@@Base+0x16a4>
   25f30:	add	r6, r0, #1
   25f34:	movw	r0, #62488	; 0xf418
   25f38:	movt	r0, #3
   25f3c:	str	r6, [sl, r5, lsl #3]
   25f40:	cmp	r4, r0
   25f44:	beq	25f50 <_obstack_memory_used@@Base+0x1664>
   25f48:	mov	r0, r4
   25f4c:	bl	1f89c <__assert_fail@plt+0xd810>
   25f50:	mov	r0, r6
   25f54:	bl	27780 <_obstack_memory_used@@Base+0x2e94>
   25f58:	str	r0, [r9]
   25f5c:	mov	r4, r0
   25f60:	add	r3, sp, #8
   25f64:	ldr	r0, [r7]
   25f68:	ldr	r1, [r7, #40]	; 0x28
   25f6c:	ldr	r2, [r7, #44]	; 0x2c
   25f70:	stm	sp, {r0, r8}
   25f74:	ldr	r0, [sp, #20]
   25f78:	stm	r3, {r0, r1, r2}
   25f7c:	ldr	r2, [sp, #32]
   25f80:	ldr	r3, [sp, #36]	; 0x24
   25f84:	mov	r0, r4
   25f88:	mov	r1, r6
   25f8c:	bl	24ba0 <_obstack_memory_used@@Base+0x2b4>
   25f90:	ldr	r0, [sp, #28]
   25f94:	ldr	r1, [sp, #24]
   25f98:	str	r1, [r0]
   25f9c:	mov	r0, r4
   25fa0:	sub	sp, fp, #28
   25fa4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   25fa8:	bl	12038 <abort@plt>
   25fac:	movw	r3, #62440	; 0xf3e8
   25fb0:	movt	r3, #3
   25fb4:	b	25e14 <_obstack_memory_used@@Base+0x1528>
   25fb8:	movw	r3, #62440	; 0xf3e8
   25fbc:	mov	r1, r0
   25fc0:	mov	r0, #0
   25fc4:	mvn	r2, #0
   25fc8:	movt	r3, #3
   25fcc:	b	25e14 <_obstack_memory_used@@Base+0x1528>
   25fd0:	movw	r3, #62440	; 0xf3e8
   25fd4:	mov	r2, r1
   25fd8:	mov	r1, r0
   25fdc:	mov	r0, #0
   25fe0:	movt	r3, #3
   25fe4:	b	25e14 <_obstack_memory_used@@Base+0x1528>
   25fe8:	push	{fp, lr}
   25fec:	mov	fp, sp
   25ff0:	sub	sp, sp, #48	; 0x30
   25ff4:	vmov.i32	q8, #0	; 0x00000000
   25ff8:	mov	ip, #32
   25ffc:	mov	r3, sp
   26000:	mov	lr, r2
   26004:	cmp	r1, #10
   26008:	add	r2, r3, #16
   2600c:	vst1.64	{d16-d17}, [r3], ip
   26010:	vst1.64	{d16-d17}, [r2]
   26014:	vst1.64	{d16-d17}, [r3]
   26018:	beq	26038 <_obstack_memory_used@@Base+0x174c>
   2601c:	str	r1, [sp]
   26020:	mov	r3, sp
   26024:	mov	r1, lr
   26028:	mvn	r2, #0
   2602c:	bl	25e14 <_obstack_memory_used@@Base+0x1528>
   26030:	mov	sp, fp
   26034:	pop	{fp, pc}
   26038:	bl	12038 <abort@plt>
   2603c:	push	{r4, sl, fp, lr}
   26040:	add	fp, sp, #8
   26044:	sub	sp, sp, #48	; 0x30
   26048:	vmov.i32	q8, #0	; 0x00000000
   2604c:	mov	ip, r3
   26050:	mov	r3, sp
   26054:	mov	lr, #32
   26058:	cmp	r1, #10
   2605c:	add	r4, r3, #16
   26060:	vst1.64	{d16-d17}, [r3], lr
   26064:	vst1.64	{d16-d17}, [r4]
   26068:	vst1.64	{d16-d17}, [r3]
   2606c:	beq	2608c <_obstack_memory_used@@Base+0x17a0>
   26070:	str	r1, [sp]
   26074:	mov	r1, r2
   26078:	mov	r3, sp
   2607c:	mov	r2, ip
   26080:	bl	25e14 <_obstack_memory_used@@Base+0x1528>
   26084:	sub	sp, fp, #8
   26088:	pop	{r4, sl, fp, pc}
   2608c:	bl	12038 <abort@plt>
   26090:	push	{fp, lr}
   26094:	mov	fp, sp
   26098:	sub	sp, sp, #48	; 0x30
   2609c:	vmov.i32	q8, #0	; 0x00000000
   260a0:	mov	r3, sp
   260a4:	mov	ip, #32
   260a8:	cmp	r0, #10
   260ac:	add	r2, r3, #16
   260b0:	vst1.64	{d16-d17}, [r3], ip
   260b4:	vst1.64	{d16-d17}, [r2]
   260b8:	vst1.64	{d16-d17}, [r3]
   260bc:	beq	260dc <_obstack_memory_used@@Base+0x17f0>
   260c0:	str	r0, [sp]
   260c4:	mov	r3, sp
   260c8:	mov	r0, #0
   260cc:	mvn	r2, #0
   260d0:	bl	25e14 <_obstack_memory_used@@Base+0x1528>
   260d4:	mov	sp, fp
   260d8:	pop	{fp, pc}
   260dc:	bl	12038 <abort@plt>
   260e0:	push	{fp, lr}
   260e4:	mov	fp, sp
   260e8:	sub	sp, sp, #48	; 0x30
   260ec:	vmov.i32	q8, #0	; 0x00000000
   260f0:	mov	r3, sp
   260f4:	mov	ip, #32
   260f8:	cmp	r0, #10
   260fc:	add	lr, r3, #16
   26100:	vst1.64	{d16-d17}, [r3], ip
   26104:	vst1.64	{d16-d17}, [lr]
   26108:	vst1.64	{d16-d17}, [r3]
   2610c:	beq	26128 <_obstack_memory_used@@Base+0x183c>
   26110:	str	r0, [sp]
   26114:	mov	r3, sp
   26118:	mov	r0, #0
   2611c:	bl	25e14 <_obstack_memory_used@@Base+0x1528>
   26120:	mov	sp, fp
   26124:	pop	{fp, pc}
   26128:	bl	12038 <abort@plt>
   2612c:	push	{r4, sl, fp, lr}
   26130:	add	fp, sp, #8
   26134:	sub	sp, sp, #48	; 0x30
   26138:	mov	lr, r0
   2613c:	movw	r0, #62440	; 0xf3e8
   26140:	mov	ip, r1
   26144:	mov	r1, #32
   26148:	mov	r4, #1
   2614c:	movt	r0, #3
   26150:	add	r3, r0, #16
   26154:	vld1.64	{d16-d17}, [r0], r1
   26158:	vld1.64	{d20-d21}, [r0]
   2615c:	vld1.64	{d18-d19}, [r3]
   26160:	mov	r3, sp
   26164:	add	r0, r3, #32
   26168:	add	r1, r3, #16
   2616c:	vst1.64	{d20-d21}, [r0]
   26170:	mov	r0, #28
   26174:	vst1.64	{d18-d19}, [r1]
   26178:	mov	r1, r3
   2617c:	and	r0, r0, r2, lsr #3
   26180:	and	r2, r2, #31
   26184:	vst1.64	{d16-d17}, [r1], r0
   26188:	ldr	r0, [r1, #8]
   2618c:	bic	r4, r4, r0, lsr r2
   26190:	eor	r0, r0, r4, lsl r2
   26194:	mov	r2, ip
   26198:	str	r0, [r1, #8]
   2619c:	mov	r0, #0
   261a0:	mov	r1, lr
   261a4:	bl	25e14 <_obstack_memory_used@@Base+0x1528>
   261a8:	sub	sp, fp, #8
   261ac:	pop	{r4, sl, fp, pc}
   261b0:	push	{fp, lr}
   261b4:	mov	fp, sp
   261b8:	sub	sp, sp, #48	; 0x30
   261bc:	mov	ip, r0
   261c0:	movw	r0, #62440	; 0xf3e8
   261c4:	mov	r2, #32
   261c8:	movt	r0, #3
   261cc:	add	r3, r0, #16
   261d0:	vld1.64	{d16-d17}, [r0], r2
   261d4:	vld1.64	{d20-d21}, [r0]
   261d8:	vld1.64	{d18-d19}, [r3]
   261dc:	mov	r3, sp
   261e0:	add	r0, r3, #32
   261e4:	add	r2, r3, #16
   261e8:	vst1.64	{d20-d21}, [r0]
   261ec:	mov	r0, #28
   261f0:	vst1.64	{d18-d19}, [r2]
   261f4:	mov	r2, r3
   261f8:	and	r0, r0, r1, lsr #3
   261fc:	and	r1, r1, #31
   26200:	vst1.64	{d16-d17}, [r2], r0
   26204:	mov	r0, #1
   26208:	ldr	lr, [r2, #8]
   2620c:	bic	r0, r0, lr, lsr r1
   26210:	eor	r0, lr, r0, lsl r1
   26214:	mov	r1, ip
   26218:	str	r0, [r2, #8]
   2621c:	mov	r0, #0
   26220:	mvn	r2, #0
   26224:	bl	25e14 <_obstack_memory_used@@Base+0x1528>
   26228:	mov	sp, fp
   2622c:	pop	{fp, pc}
   26230:	push	{fp, lr}
   26234:	mov	fp, sp
   26238:	sub	sp, sp, #48	; 0x30
   2623c:	mov	r1, r0
   26240:	movw	r0, #62440	; 0xf3e8
   26244:	mov	r3, #32
   26248:	movt	r0, #3
   2624c:	add	r2, r0, #16
   26250:	vld1.64	{d16-d17}, [r0], r3
   26254:	mov	r3, sp
   26258:	vld1.64	{d18-d19}, [r2]
   2625c:	vld1.64	{d20-d21}, [r0]
   26260:	add	r2, r3, #16
   26264:	add	r0, r3, #32
   26268:	vst1.64	{d18-d19}, [r2]
   2626c:	vst1.64	{d20-d21}, [r0]
   26270:	mov	r0, #12
   26274:	mov	r2, r3
   26278:	vst1.64	{d16-d17}, [r2], r0
   2627c:	ldr	r0, [r2]
   26280:	orr	r0, r0, #67108864	; 0x4000000
   26284:	str	r0, [r2]
   26288:	mov	r0, #0
   2628c:	mvn	r2, #0
   26290:	bl	25e14 <_obstack_memory_used@@Base+0x1528>
   26294:	mov	sp, fp
   26298:	pop	{fp, pc}
   2629c:	push	{fp, lr}
   262a0:	mov	fp, sp
   262a4:	sub	sp, sp, #48	; 0x30
   262a8:	mov	ip, r1
   262ac:	mov	r1, r0
   262b0:	movw	r0, #62440	; 0xf3e8
   262b4:	mov	r2, #32
   262b8:	movt	r0, #3
   262bc:	add	r3, r0, #16
   262c0:	vld1.64	{d16-d17}, [r0], r2
   262c4:	vld1.64	{d18-d19}, [r3]
   262c8:	vld1.64	{d20-d21}, [r0]
   262cc:	mov	r3, sp
   262d0:	add	r2, r3, #16
   262d4:	add	r0, r3, #32
   262d8:	vst1.64	{d18-d19}, [r2]
   262dc:	vst1.64	{d20-d21}, [r0]
   262e0:	mov	r0, #12
   262e4:	mov	r2, r3
   262e8:	vst1.64	{d16-d17}, [r2], r0
   262ec:	ldr	r0, [r2]
   262f0:	orr	r0, r0, #67108864	; 0x4000000
   262f4:	str	r0, [r2]
   262f8:	mov	r0, #0
   262fc:	mov	r2, ip
   26300:	bl	25e14 <_obstack_memory_used@@Base+0x1528>
   26304:	mov	sp, fp
   26308:	pop	{fp, pc}
   2630c:	push	{r4, sl, fp, lr}
   26310:	add	fp, sp, #8
   26314:	sub	sp, sp, #96	; 0x60
   26318:	vmov.i32	q8, #0	; 0x00000000
   2631c:	mov	ip, r2
   26320:	mov	r2, sp
   26324:	mov	r4, #28
   26328:	cmp	r1, #10
   2632c:	mov	r3, r2
   26330:	add	lr, r2, #16
   26334:	vst1.64	{d16-d17}, [r3], r4
   26338:	vst1.64	{d16-d17}, [lr]
   2633c:	vst1.32	{d16-d17}, [r3]
   26340:	beq	26390 <_obstack_memory_used@@Base+0x1aa4>
   26344:	vld1.64	{d16-d17}, [r2], r4
   26348:	vld1.64	{d18-d19}, [lr]
   2634c:	add	r3, sp, #48	; 0x30
   26350:	vld1.32	{d20-d21}, [r2]
   26354:	add	r2, r3, #20
   26358:	add	r4, r3, #4
   2635c:	vst1.32	{d18-d19}, [r2]
   26360:	add	r2, r3, #32
   26364:	vst1.32	{d16-d17}, [r4]
   26368:	vst1.32	{d20-d21}, [r2]
   2636c:	str	r1, [sp, #48]	; 0x30
   26370:	mvn	r2, #0
   26374:	ldr	r1, [sp, #60]	; 0x3c
   26378:	orr	r1, r1, #67108864	; 0x4000000
   2637c:	str	r1, [sp, #60]	; 0x3c
   26380:	mov	r1, ip
   26384:	bl	25e14 <_obstack_memory_used@@Base+0x1528>
   26388:	sub	sp, fp, #8
   2638c:	pop	{r4, sl, fp, pc}
   26390:	bl	12038 <abort@plt>
   26394:	push	{r4, r5, r6, sl, fp, lr}
   26398:	add	fp, sp, #16
   2639c:	sub	sp, sp, #48	; 0x30
   263a0:	mov	ip, r3
   263a4:	movw	r3, #62440	; 0xf3e8
   263a8:	mov	r6, #32
   263ac:	cmp	r1, #0
   263b0:	mov	r4, sp
   263b4:	movt	r3, #3
   263b8:	cmpne	r2, #0
   263bc:	add	r5, r4, #16
   263c0:	add	lr, r3, #16
   263c4:	vld1.64	{d16-d17}, [r3], r6
   263c8:	vld1.64	{d18-d19}, [lr]
   263cc:	vld1.64	{d20-d21}, [r3]
   263d0:	mov	r3, #10
   263d4:	vst1.64	{d16-d17}, [r4], r6
   263d8:	vst1.64	{d18-d19}, [r5]
   263dc:	vst1.64	{d20-d21}, [r4]
   263e0:	str	r3, [sp]
   263e4:	bne	263ec <_obstack_memory_used@@Base+0x1b00>
   263e8:	bl	12038 <abort@plt>
   263ec:	str	r2, [sp, #44]	; 0x2c
   263f0:	str	r1, [sp, #40]	; 0x28
   263f4:	mov	r3, sp
   263f8:	mov	r1, ip
   263fc:	mvn	r2, #0
   26400:	bl	25e14 <_obstack_memory_used@@Base+0x1528>
   26404:	sub	sp, fp, #16
   26408:	pop	{r4, r5, r6, sl, fp, pc}
   2640c:	push	{r4, r5, r6, sl, fp, lr}
   26410:	add	fp, sp, #16
   26414:	sub	sp, sp, #48	; 0x30
   26418:	mov	lr, r3
   2641c:	movw	r3, #62440	; 0xf3e8
   26420:	mov	r6, #32
   26424:	cmp	r1, #0
   26428:	mov	r4, sp
   2642c:	movt	r3, #3
   26430:	cmpne	r2, #0
   26434:	add	r5, r4, #16
   26438:	add	ip, r3, #16
   2643c:	vld1.64	{d16-d17}, [r3], r6
   26440:	vld1.64	{d18-d19}, [ip]
   26444:	vld1.64	{d20-d21}, [r3]
   26448:	mov	r3, #10
   2644c:	vst1.64	{d16-d17}, [r4], r6
   26450:	vst1.64	{d18-d19}, [r5]
   26454:	vst1.64	{d20-d21}, [r4]
   26458:	str	r3, [sp]
   2645c:	bne	26464 <_obstack_memory_used@@Base+0x1b78>
   26460:	bl	12038 <abort@plt>
   26464:	ldr	ip, [fp, #8]
   26468:	str	r2, [sp, #44]	; 0x2c
   2646c:	str	r1, [sp, #40]	; 0x28
   26470:	mov	r3, sp
   26474:	mov	r1, lr
   26478:	mov	r2, ip
   2647c:	bl	25e14 <_obstack_memory_used@@Base+0x1528>
   26480:	sub	sp, fp, #16
   26484:	pop	{r4, r5, r6, sl, fp, pc}
   26488:	push	{r4, sl, fp, lr}
   2648c:	add	fp, sp, #8
   26490:	sub	sp, sp, #48	; 0x30
   26494:	movw	r3, #62440	; 0xf3e8
   26498:	mov	lr, #32
   2649c:	mov	ip, r2
   264a0:	cmp	r0, #0
   264a4:	movt	r3, #3
   264a8:	cmpne	r1, #0
   264ac:	add	r2, r3, #16
   264b0:	vld1.64	{d16-d17}, [r3], lr
   264b4:	vld1.64	{d20-d21}, [r3]
   264b8:	vld1.64	{d18-d19}, [r2]
   264bc:	mov	r2, sp
   264c0:	add	r4, r2, #16
   264c4:	vst1.64	{d16-d17}, [r2], lr
   264c8:	vst1.64	{d20-d21}, [r2]
   264cc:	mov	r2, #10
   264d0:	vst1.64	{d18-d19}, [r4]
   264d4:	str	r2, [sp]
   264d8:	bne	264e0 <_obstack_memory_used@@Base+0x1bf4>
   264dc:	bl	12038 <abort@plt>
   264e0:	str	r1, [sp, #44]	; 0x2c
   264e4:	str	r0, [sp, #40]	; 0x28
   264e8:	mov	r3, sp
   264ec:	mov	r0, #0
   264f0:	mov	r1, ip
   264f4:	mvn	r2, #0
   264f8:	bl	25e14 <_obstack_memory_used@@Base+0x1528>
   264fc:	sub	sp, fp, #8
   26500:	pop	{r4, sl, fp, pc}
   26504:	push	{r4, r5, fp, lr}
   26508:	add	fp, sp, #8
   2650c:	sub	sp, sp, #48	; 0x30
   26510:	mov	ip, r3
   26514:	movw	r3, #62440	; 0xf3e8
   26518:	mov	r4, #32
   2651c:	mov	lr, r2
   26520:	cmp	r0, #0
   26524:	movt	r3, #3
   26528:	cmpne	r1, #0
   2652c:	add	r2, r3, #16
   26530:	vld1.64	{d16-d17}, [r3], r4
   26534:	vld1.64	{d20-d21}, [r3]
   26538:	vld1.64	{d18-d19}, [r2]
   2653c:	mov	r2, sp
   26540:	add	r5, r2, #16
   26544:	vst1.64	{d16-d17}, [r2], r4
   26548:	vst1.64	{d20-d21}, [r2]
   2654c:	mov	r2, #10
   26550:	vst1.64	{d18-d19}, [r5]
   26554:	str	r2, [sp]
   26558:	bne	26560 <_obstack_memory_used@@Base+0x1c74>
   2655c:	bl	12038 <abort@plt>
   26560:	str	r1, [sp, #44]	; 0x2c
   26564:	str	r0, [sp, #40]	; 0x28
   26568:	mov	r3, sp
   2656c:	mov	r0, #0
   26570:	mov	r1, lr
   26574:	mov	r2, ip
   26578:	bl	25e14 <_obstack_memory_used@@Base+0x1528>
   2657c:	sub	sp, fp, #8
   26580:	pop	{r4, r5, fp, pc}
   26584:	movw	r3, #58056	; 0xe2c8
   26588:	movt	r3, #3
   2658c:	b	25e14 <_obstack_memory_used@@Base+0x1528>
   26590:	movw	r3, #58056	; 0xe2c8
   26594:	mov	r2, r1
   26598:	mov	r1, r0
   2659c:	mov	r0, #0
   265a0:	movt	r3, #3
   265a4:	b	25e14 <_obstack_memory_used@@Base+0x1528>
   265a8:	movw	r3, #58056	; 0xe2c8
   265ac:	mvn	r2, #0
   265b0:	movt	r3, #3
   265b4:	b	25e14 <_obstack_memory_used@@Base+0x1528>
   265b8:	movw	r3, #58056	; 0xe2c8
   265bc:	mov	r1, r0
   265c0:	mov	r0, #0
   265c4:	mvn	r2, #0
   265c8:	movt	r3, #3
   265cc:	b	25e14 <_obstack_memory_used@@Base+0x1528>
   265d0:	push	{r4, r5, fp, lr}
   265d4:	add	fp, sp, #8
   265d8:	mov	r5, r0
   265dc:	mov	r4, r1
   265e0:	mov	r0, #0
   265e4:	mov	r2, #5
   265e8:	mov	r1, r5
   265ec:	bl	11ca8 <dcgettext@plt>
   265f0:	cmp	r0, r5
   265f4:	popne	{r4, r5, fp, pc}
   265f8:	bl	28fd0 <_obstack_memory_used@@Base+0x46e4>
   265fc:	ldrb	r1, [r0]
   26600:	and	r1, r1, #223	; 0xdf
   26604:	cmp	r1, #71	; 0x47
   26608:	beq	26670 <_obstack_memory_used@@Base+0x1d84>
   2660c:	cmp	r1, #85	; 0x55
   26610:	bne	266c8 <_obstack_memory_used@@Base+0x1ddc>
   26614:	ldrb	r1, [r0, #1]
   26618:	and	r1, r1, #223	; 0xdf
   2661c:	cmp	r1, #84	; 0x54
   26620:	bne	266c8 <_obstack_memory_used@@Base+0x1ddc>
   26624:	ldrb	r1, [r0, #2]
   26628:	and	r1, r1, #223	; 0xdf
   2662c:	cmp	r1, #70	; 0x46
   26630:	bne	266c8 <_obstack_memory_used@@Base+0x1ddc>
   26634:	ldrb	r1, [r0, #3]
   26638:	cmp	r1, #45	; 0x2d
   2663c:	bne	266c8 <_obstack_memory_used@@Base+0x1ddc>
   26640:	ldrb	r1, [r0, #4]
   26644:	cmp	r1, #56	; 0x38
   26648:	bne	266c8 <_obstack_memory_used@@Base+0x1ddc>
   2664c:	ldrb	r0, [r0, #5]
   26650:	cmp	r0, #0
   26654:	bne	266c8 <_obstack_memory_used@@Base+0x1ddc>
   26658:	ldrb	r1, [r5]
   2665c:	movw	r2, #55212	; 0xd7ac
   26660:	movw	r0, #55216	; 0xd7b0
   26664:	movt	r2, #2
   26668:	movt	r0, #2
   2666c:	b	266f8 <_obstack_memory_used@@Base+0x1e0c>
   26670:	ldrb	r1, [r0, #1]
   26674:	and	r1, r1, #223	; 0xdf
   26678:	cmp	r1, #66	; 0x42
   2667c:	bne	266c8 <_obstack_memory_used@@Base+0x1ddc>
   26680:	ldrb	r1, [r0, #2]
   26684:	cmp	r1, #49	; 0x31
   26688:	bne	266c8 <_obstack_memory_used@@Base+0x1ddc>
   2668c:	ldrb	r1, [r0, #3]
   26690:	cmp	r1, #56	; 0x38
   26694:	bne	266c8 <_obstack_memory_used@@Base+0x1ddc>
   26698:	ldrb	r1, [r0, #4]
   2669c:	cmp	r1, #48	; 0x30
   266a0:	bne	266c8 <_obstack_memory_used@@Base+0x1ddc>
   266a4:	ldrb	r1, [r0, #5]
   266a8:	cmp	r1, #51	; 0x33
   266ac:	bne	266c8 <_obstack_memory_used@@Base+0x1ddc>
   266b0:	ldrb	r1, [r0, #6]
   266b4:	cmp	r1, #48	; 0x30
   266b8:	bne	266c8 <_obstack_memory_used@@Base+0x1ddc>
   266bc:	ldrb	r0, [r0, #7]
   266c0:	cmp	r0, #0
   266c4:	beq	266e4 <_obstack_memory_used@@Base+0x1df8>
   266c8:	movw	r1, #55208	; 0xd7a8
   266cc:	movw	r0, #56124	; 0xdb3c
   266d0:	cmp	r4, #9
   266d4:	movt	r1, #2
   266d8:	movt	r0, #2
   266dc:	moveq	r0, r1
   266e0:	pop	{r4, r5, fp, pc}
   266e4:	ldrb	r1, [r5]
   266e8:	movw	r2, #55220	; 0xd7b4
   266ec:	movw	r0, #55224	; 0xd7b8
   266f0:	movt	r2, #2
   266f4:	movt	r0, #2
   266f8:	cmp	r1, #96	; 0x60
   266fc:	moveq	r0, r2
   26700:	pop	{r4, r5, fp, pc}
   26704:	push	{r4, r5, r6, sl, fp, lr}
   26708:	add	fp, sp, #16
   2670c:	ldr	r4, [r0], #8
   26710:	mov	r5, r1
   26714:	cmp	r4, r0
   26718:	beq	2673c <_obstack_memory_used@@Base+0x1e50>
   2671c:	mov	r0, r4
   26720:	mov	r1, r5
   26724:	bl	28d1c <_obstack_memory_used@@Base+0x4430>
   26728:	cmp	r0, #0
   2672c:	mov	r6, r0
   26730:	moveq	r6, r4
   26734:	mov	r0, r6
   26738:	pop	{r4, r5, r6, sl, fp, pc}
   2673c:	mov	r0, r5
   26740:	bl	28cec <_obstack_memory_used@@Base+0x4400>
   26744:	cmp	r0, #0
   26748:	beq	26764 <_obstack_memory_used@@Base+0x1e78>
   2674c:	mov	r1, r4
   26750:	mov	r2, r5
   26754:	mov	r6, r0
   26758:	bl	11c60 <memcpy@plt>
   2675c:	mov	r0, r6
   26760:	pop	{r4, r5, r6, sl, fp, pc}
   26764:	mov	r6, #0
   26768:	mov	r0, r6
   2676c:	pop	{r4, r5, r6, sl, fp, pc}
   26770:	push	{r4, r5, r6, sl, fp, lr}
   26774:	add	fp, sp, #16
   26778:	mov	r4, r0
   2677c:	add	r6, r0, #8
   26780:	ldrd	r0, [r0]
   26784:	lsl	r5, r1, #1
   26788:	cmp	r0, r6
   2678c:	beq	26798 <_obstack_memory_used@@Base+0x1eac>
   26790:	bl	1f89c <__assert_fail@plt+0xd810>
   26794:	ldr	r1, [r4, #4]
   26798:	cmp	r5, r1
   2679c:	bcc	267c0 <_obstack_memory_used@@Base+0x1ed4>
   267a0:	mov	r0, r5
   267a4:	bl	28cec <_obstack_memory_used@@Base+0x4400>
   267a8:	cmp	r0, #0
   267ac:	strne	r0, [r4]
   267b0:	movne	r0, #1
   267b4:	strne	r5, [r4, #4]
   267b8:	popne	{r4, r5, r6, sl, fp, pc}
   267bc:	b	267cc <_obstack_memory_used@@Base+0x1ee0>
   267c0:	bl	11ed0 <__errno_location@plt>
   267c4:	mov	r1, #12
   267c8:	str	r1, [r0]
   267cc:	mov	r0, #0
   267d0:	mov	r5, #1024	; 0x400
   267d4:	str	r6, [r4]
   267d8:	str	r5, [r4, #4]
   267dc:	pop	{r4, r5, r6, sl, fp, pc}
   267e0:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   267e4:	add	fp, sp, #24
   267e8:	ldrd	r8, [r0]
   267ec:	add	r7, r0, #8
   267f0:	mov	r4, r0
   267f4:	lsl	r5, r9, #1
   267f8:	cmp	r8, r7
   267fc:	beq	26828 <_obstack_memory_used@@Base+0x1f3c>
   26800:	cmp	r5, r9
   26804:	bcc	26860 <_obstack_memory_used@@Base+0x1f74>
   26808:	mov	r0, r8
   2680c:	mov	r1, r5
   26810:	bl	28d1c <_obstack_memory_used@@Base+0x4430>
   26814:	mov	r6, r0
   26818:	cmp	r0, #0
   2681c:	bne	26848 <_obstack_memory_used@@Base+0x1f5c>
   26820:	ldr	r8, [r4]
   26824:	b	2686c <_obstack_memory_used@@Base+0x1f80>
   26828:	mov	r0, r5
   2682c:	bl	28cec <_obstack_memory_used@@Base+0x4400>
   26830:	cmp	r0, #0
   26834:	beq	26858 <_obstack_memory_used@@Base+0x1f6c>
   26838:	ldr	r2, [r4, #4]
   2683c:	mov	r1, r8
   26840:	mov	r6, r0
   26844:	bl	11c60 <memcpy@plt>
   26848:	mov	r0, #1
   2684c:	str	r6, [r4]
   26850:	str	r5, [r4, #4]
   26854:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   26858:	mov	r0, #0
   2685c:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   26860:	bl	11ed0 <__errno_location@plt>
   26864:	mov	r1, #12
   26868:	str	r1, [r0]
   2686c:	mov	r0, r8
   26870:	bl	1f89c <__assert_fail@plt+0xd810>
   26874:	mov	r0, #0
   26878:	mov	r5, #1024	; 0x400
   2687c:	str	r7, [r4]
   26880:	str	r5, [r4, #4]
   26884:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   26888:	push	{r4, r5, fp, lr}
   2688c:	add	fp, sp, #8
   26890:	mov	r4, r1
   26894:	bl	11e88 <getfilecon@plt>
   26898:	cmp	r0, #10
   2689c:	beq	268b4 <_obstack_memory_used@@Base+0x1fc8>
   268a0:	cmp	r0, #0
   268a4:	bne	268f8 <_obstack_memory_used@@Base+0x200c>
   268a8:	bl	11ed0 <__errno_location@plt>
   268ac:	mov	r1, #95	; 0x5f
   268b0:	b	268f0 <_obstack_memory_used@@Base+0x2004>
   268b4:	ldr	r5, [r4]
   268b8:	movw	r1, #47963	; 0xbb5b
   268bc:	movt	r1, #2
   268c0:	mov	r0, r5
   268c4:	bl	11bd0 <strcmp@plt>
   268c8:	mov	r1, r0
   268cc:	mov	r0, #10
   268d0:	cmp	r1, #0
   268d4:	popne	{r4, r5, fp, pc}
   268d8:	mov	r0, r5
   268dc:	bl	11ff0 <freecon@plt>
   268e0:	mov	r0, #0
   268e4:	str	r0, [r4]
   268e8:	bl	11ed0 <__errno_location@plt>
   268ec:	mov	r1, #61	; 0x3d
   268f0:	str	r1, [r0]
   268f4:	mvn	r0, #0
   268f8:	pop	{r4, r5, fp, pc}
   268fc:	push	{r4, r5, fp, lr}
   26900:	add	fp, sp, #8
   26904:	mov	r4, r1
   26908:	bl	11dec <lgetfilecon@plt>
   2690c:	cmp	r0, #10
   26910:	beq	26928 <_obstack_memory_used@@Base+0x203c>
   26914:	cmp	r0, #0
   26918:	bne	2696c <_obstack_memory_used@@Base+0x2080>
   2691c:	bl	11ed0 <__errno_location@plt>
   26920:	mov	r1, #95	; 0x5f
   26924:	b	26964 <_obstack_memory_used@@Base+0x2078>
   26928:	ldr	r5, [r4]
   2692c:	movw	r1, #47963	; 0xbb5b
   26930:	movt	r1, #2
   26934:	mov	r0, r5
   26938:	bl	11bd0 <strcmp@plt>
   2693c:	mov	r1, r0
   26940:	mov	r0, #10
   26944:	cmp	r1, #0
   26948:	popne	{r4, r5, fp, pc}
   2694c:	mov	r0, r5
   26950:	bl	11ff0 <freecon@plt>
   26954:	mov	r0, #0
   26958:	str	r0, [r4]
   2695c:	bl	11ed0 <__errno_location@plt>
   26960:	mov	r1, #61	; 0x3d
   26964:	str	r1, [r0]
   26968:	mvn	r0, #0
   2696c:	pop	{r4, r5, fp, pc}
   26970:	push	{r4, r5, fp, lr}
   26974:	add	fp, sp, #8
   26978:	mov	r4, r1
   2697c:	bl	11ccc <fgetfilecon@plt>
   26980:	cmp	r0, #10
   26984:	beq	2699c <_obstack_memory_used@@Base+0x20b0>
   26988:	cmp	r0, #0
   2698c:	bne	269e0 <_obstack_memory_used@@Base+0x20f4>
   26990:	bl	11ed0 <__errno_location@plt>
   26994:	mov	r1, #95	; 0x5f
   26998:	b	269d8 <_obstack_memory_used@@Base+0x20ec>
   2699c:	ldr	r5, [r4]
   269a0:	movw	r1, #47963	; 0xbb5b
   269a4:	movt	r1, #2
   269a8:	mov	r0, r5
   269ac:	bl	11bd0 <strcmp@plt>
   269b0:	mov	r1, r0
   269b4:	mov	r0, #10
   269b8:	cmp	r1, #0
   269bc:	popne	{r4, r5, fp, pc}
   269c0:	mov	r0, r5
   269c4:	bl	11ff0 <freecon@plt>
   269c8:	mov	r0, #0
   269cc:	str	r0, [r4]
   269d0:	bl	11ed0 <__errno_location@plt>
   269d4:	mov	r1, #61	; 0x3d
   269d8:	str	r1, [r0]
   269dc:	mvn	r0, #0
   269e0:	pop	{r4, r5, fp, pc}
   269e4:	push	{r4, r5, r6, r7, fp, lr}
   269e8:	add	fp, sp, #16
   269ec:	mov	r4, r1
   269f0:	mov	r1, #0
   269f4:	mov	r6, r2
   269f8:	bl	11f60 <setlocale@plt>
   269fc:	cmp	r0, #0
   26a00:	beq	26a30 <_obstack_memory_used@@Base+0x2144>
   26a04:	mov	r7, r0
   26a08:	bl	11eac <strlen@plt>
   26a0c:	cmp	r0, r6
   26a10:	bcs	26a4c <_obstack_memory_used@@Base+0x2160>
   26a14:	add	r2, r0, #1
   26a18:	mov	r0, r4
   26a1c:	mov	r1, r7
   26a20:	bl	11c60 <memcpy@plt>
   26a24:	mov	r5, #0
   26a28:	mov	r0, r5
   26a2c:	pop	{r4, r5, r6, r7, fp, pc}
   26a30:	mov	r5, #22
   26a34:	cmp	r6, #0
   26a38:	beq	26a74 <_obstack_memory_used@@Base+0x2188>
   26a3c:	mov	r0, #0
   26a40:	strb	r0, [r4]
   26a44:	mov	r0, r5
   26a48:	pop	{r4, r5, r6, r7, fp, pc}
   26a4c:	mov	r5, #34	; 0x22
   26a50:	cmp	r6, #0
   26a54:	beq	26a74 <_obstack_memory_used@@Base+0x2188>
   26a58:	sub	r6, r6, #1
   26a5c:	mov	r0, r4
   26a60:	mov	r1, r7
   26a64:	mov	r2, r6
   26a68:	bl	11c60 <memcpy@plt>
   26a6c:	mov	r0, #0
   26a70:	strb	r0, [r4, r6]
   26a74:	mov	r0, r5
   26a78:	pop	{r4, r5, r6, r7, fp, pc}
   26a7c:	mov	r1, #0
   26a80:	b	11f60 <setlocale@plt>
   26a84:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   26a88:	add	fp, sp, #24
   26a8c:	mov	r4, r0
   26a90:	cmp	r0, #0
   26a94:	beq	26ab8 <_obstack_memory_used@@Base+0x21cc>
   26a98:	mov	r0, r4
   26a9c:	bl	11eac <strlen@plt>
   26aa0:	add	r5, r0, #1
   26aa4:	cmp	r5, #58	; 0x3a
   26aa8:	bls	26abc <_obstack_memory_used@@Base+0x21d0>
   26aac:	add	r0, r0, #10
   26ab0:	bic	r0, r0, #3
   26ab4:	b	26ac0 <_obstack_memory_used@@Base+0x21d4>
   26ab8:	mov	r5, #0
   26abc:	mov	r0, #64	; 0x40
   26ac0:	bl	28cec <_obstack_memory_used@@Base+0x4400>
   26ac4:	mov	r6, r0
   26ac8:	cmp	r0, #0
   26acc:	beq	26b08 <_obstack_memory_used@@Base+0x221c>
   26ad0:	cmp	r4, #0
   26ad4:	mov	r0, r4
   26ad8:	mov	r8, #0
   26adc:	mov	r7, r6
   26ae0:	movwne	r0, #1
   26ae4:	str	r8, [r6]
   26ae8:	strb	r0, [r6, #4]
   26aec:	strb	r8, [r7, #5]!
   26af0:	beq	26b08 <_obstack_memory_used@@Base+0x221c>
   26af4:	mov	r0, r7
   26af8:	mov	r1, r4
   26afc:	mov	r2, r5
   26b00:	bl	11c60 <memcpy@plt>
   26b04:	strb	r8, [r7, r5]
   26b08:	mov	r0, r6
   26b0c:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   26b10:	push	{r4, sl, fp, lr}
   26b14:	add	fp, sp, #8
   26b18:	cmp	r0, #2
   26b1c:	popcc	{r4, sl, fp, pc}
   26b20:	ldr	r4, [r0]
   26b24:	bl	1f89c <__assert_fail@plt+0xd810>
   26b28:	cmp	r4, #0
   26b2c:	mov	r0, r4
   26b30:	bne	26b20 <_obstack_memory_used@@Base+0x2234>
   26b34:	pop	{r4, sl, fp, pc}
   26b38:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   26b3c:	add	fp, sp, #28
   26b40:	sub	sp, sp, #4
   26b44:	mov	sl, r2
   26b48:	mov	r7, r1
   26b4c:	cmp	r0, #0
   26b50:	beq	26c18 <_obstack_memory_used@@Base+0x232c>
   26b54:	mov	r6, r0
   26b58:	bl	26c60 <_obstack_memory_used@@Base+0x2374>
   26b5c:	cmp	r0, #0
   26b60:	beq	26c2c <_obstack_memory_used@@Base+0x2340>
   26b64:	mov	r4, r0
   26b68:	mov	r0, r7
   26b6c:	mov	r1, sl
   26b70:	bl	11cd8 <localtime_r@plt>
   26b74:	mov	r7, #1
   26b78:	cmp	r0, #0
   26b7c:	mov	r9, #1
   26b80:	beq	26b94 <_obstack_memory_used@@Base+0x22a8>
   26b84:	mov	r0, r6
   26b88:	mov	r1, sl
   26b8c:	bl	26dac <_obstack_memory_used@@Base+0x24c0>
   26b90:	eor	r9, r0, #1
   26b94:	cmp	r4, #1
   26b98:	beq	26bfc <_obstack_memory_used@@Base+0x2310>
   26b9c:	bl	11ed0 <__errno_location@plt>
   26ba0:	mov	r6, r0
   26ba4:	ldr	r8, [r0]
   26ba8:	ldrb	r0, [r4, #4]
   26bac:	cmp	r0, #0
   26bb0:	beq	26c38 <_obstack_memory_used@@Base+0x234c>
   26bb4:	movw	r0, #38708	; 0x9734
   26bb8:	add	r1, r4, #5
   26bbc:	mov	r2, #1
   26bc0:	movt	r0, #2
   26bc4:	bl	11ec4 <setenv@plt>
   26bc8:	cmp	r0, #0
   26bcc:	beq	26c4c <_obstack_memory_used@@Base+0x2360>
   26bd0:	ldr	r8, [r6]
   26bd4:	mov	r7, #0
   26bd8:	cmp	r4, #2
   26bdc:	bcc	26bf8 <_obstack_memory_used@@Base+0x230c>
   26be0:	ldr	r5, [r4]
   26be4:	mov	r0, r4
   26be8:	bl	1f89c <__assert_fail@plt+0xd810>
   26bec:	cmp	r5, #0
   26bf0:	mov	r4, r5
   26bf4:	bne	26be0 <_obstack_memory_used@@Base+0x22f4>
   26bf8:	str	r8, [r6]
   26bfc:	cmp	r7, #0
   26c00:	moveq	sl, r7
   26c04:	cmp	r9, #0
   26c08:	movwne	sl, #0
   26c0c:	mov	r0, sl
   26c10:	sub	sp, fp, #28
   26c14:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   26c18:	mov	r0, r7
   26c1c:	mov	r1, sl
   26c20:	sub	sp, fp, #28
   26c24:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   26c28:	b	11bb8 <gmtime_r@plt>
   26c2c:	mov	r0, #0
   26c30:	sub	sp, fp, #28
   26c34:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   26c38:	movw	r0, #38708	; 0x9734
   26c3c:	movt	r0, #2
   26c40:	bl	12020 <unsetenv@plt>
   26c44:	cmp	r0, #0
   26c48:	bne	26bd0 <_obstack_memory_used@@Base+0x22e4>
   26c4c:	bl	11d20 <tzset@plt>
   26c50:	mov	r7, #1
   26c54:	cmp	r4, #2
   26c58:	bcs	26be0 <_obstack_memory_used@@Base+0x22f4>
   26c5c:	b	26bf8 <_obstack_memory_used@@Base+0x230c>
   26c60:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   26c64:	add	fp, sp, #28
   26c68:	sub	sp, sp, #4
   26c6c:	mov	r4, r0
   26c70:	movw	r0, #38708	; 0x9734
   26c74:	movt	r0, #2
   26c78:	bl	11de0 <getenv@plt>
   26c7c:	mov	r6, r0
   26c80:	ldrb	r0, [r4, #4]
   26c84:	cmp	r6, #0
   26c88:	beq	26ccc <_obstack_memory_used@@Base+0x23e0>
   26c8c:	cmp	r0, #0
   26c90:	beq	26ca8 <_obstack_memory_used@@Base+0x23bc>
   26c94:	add	r0, r4, #5
   26c98:	mov	r1, r6
   26c9c:	bl	11bd0 <strcmp@plt>
   26ca0:	cmp	r0, #0
   26ca4:	beq	26d80 <_obstack_memory_used@@Base+0x2494>
   26ca8:	mov	r0, r6
   26cac:	bl	11eac <strlen@plt>
   26cb0:	add	r8, r0, #1
   26cb4:	mov	r9, #1
   26cb8:	cmp	r8, #58	; 0x3a
   26cbc:	bls	26cdc <_obstack_memory_used@@Base+0x23f0>
   26cc0:	add	r0, r0, #10
   26cc4:	bic	r0, r0, #3
   26cc8:	b	26ce0 <_obstack_memory_used@@Base+0x23f4>
   26ccc:	mov	r9, #0
   26cd0:	cmp	r0, #0
   26cd4:	mov	r8, #0
   26cd8:	beq	26d80 <_obstack_memory_used@@Base+0x2494>
   26cdc:	mov	r0, #64	; 0x40
   26ce0:	bl	28cec <_obstack_memory_used@@Base+0x4400>
   26ce4:	cmp	r0, #0
   26ce8:	beq	26d78 <_obstack_memory_used@@Base+0x248c>
   26cec:	mov	sl, #0
   26cf0:	mov	r7, r0
   26cf4:	strb	r9, [r0, #4]
   26cf8:	mov	r5, r0
   26cfc:	cmp	r9, #0
   26d00:	str	sl, [r0]
   26d04:	strb	sl, [r7, #5]!
   26d08:	beq	26d20 <_obstack_memory_used@@Base+0x2434>
   26d0c:	mov	r0, r7
   26d10:	mov	r1, r6
   26d14:	mov	r2, r8
   26d18:	bl	11c60 <memcpy@plt>
   26d1c:	strb	sl, [r7, r8]
   26d20:	ldrb	r0, [r4, #4]
   26d24:	cmp	r0, #0
   26d28:	beq	26d88 <_obstack_memory_used@@Base+0x249c>
   26d2c:	movw	r0, #38708	; 0x9734
   26d30:	add	r1, r4, #5
   26d34:	mov	r2, #1
   26d38:	movt	r0, #2
   26d3c:	bl	11ec4 <setenv@plt>
   26d40:	cmp	r0, #0
   26d44:	beq	26d9c <_obstack_memory_used@@Base+0x24b0>
   26d48:	bl	11ed0 <__errno_location@plt>
   26d4c:	ldr	r6, [r0]
   26d50:	mov	r4, r0
   26d54:	cmp	r5, #2
   26d58:	bcc	26d74 <_obstack_memory_used@@Base+0x2488>
   26d5c:	ldr	r7, [r5]
   26d60:	mov	r0, r5
   26d64:	bl	1f89c <__assert_fail@plt+0xd810>
   26d68:	cmp	r7, #0
   26d6c:	mov	r5, r7
   26d70:	bne	26d5c <_obstack_memory_used@@Base+0x2470>
   26d74:	str	r6, [r4]
   26d78:	mov	r5, #0
   26d7c:	b	26da0 <_obstack_memory_used@@Base+0x24b4>
   26d80:	mov	r5, #1
   26d84:	b	26da0 <_obstack_memory_used@@Base+0x24b4>
   26d88:	movw	r0, #38708	; 0x9734
   26d8c:	movt	r0, #2
   26d90:	bl	12020 <unsetenv@plt>
   26d94:	cmp	r0, #0
   26d98:	bne	26d48 <_obstack_memory_used@@Base+0x245c>
   26d9c:	bl	11d20 <tzset@plt>
   26da0:	mov	r0, r5
   26da4:	sub	sp, fp, #28
   26da8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   26dac:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   26db0:	add	fp, sp, #28
   26db4:	sub	sp, sp, #4
   26db8:	ldr	r7, [r1, #40]	; 0x28
   26dbc:	mov	r8, #1
   26dc0:	cmp	r7, #0
   26dc4:	beq	26e64 <_obstack_memory_used@@Base+0x2578>
   26dc8:	mov	r5, r1
   26dcc:	mov	r6, r0
   26dd0:	cmp	r7, r1
   26dd4:	bcc	26de4 <_obstack_memory_used@@Base+0x24f8>
   26dd8:	add	r0, r5, #44	; 0x2c
   26ddc:	cmp	r7, r0
   26de0:	bcc	26e64 <_obstack_memory_used@@Base+0x2578>
   26de4:	ldrb	r0, [r7]
   26de8:	cmp	r0, #0
   26dec:	beq	26e58 <_obstack_memory_used@@Base+0x256c>
   26df0:	add	r4, r6, #5
   26df4:	mov	r0, r4
   26df8:	mov	r1, r7
   26dfc:	bl	11bd0 <strcmp@plt>
   26e00:	cmp	r0, #0
   26e04:	beq	26e60 <_obstack_memory_used@@Base+0x2574>
   26e08:	ldrb	r0, [r4]
   26e0c:	cmp	r0, #0
   26e10:	bne	26e2c <_obstack_memory_used@@Base+0x2540>
   26e14:	add	r0, r6, #5
   26e18:	cmp	r4, r0
   26e1c:	bne	26e70 <_obstack_memory_used@@Base+0x2584>
   26e20:	ldrb	r0, [r6, #4]
   26e24:	cmp	r0, #0
   26e28:	beq	26e70 <_obstack_memory_used@@Base+0x2584>
   26e2c:	mov	r0, r4
   26e30:	bl	11eac <strlen@plt>
   26e34:	add	r4, r0, r4
   26e38:	ldrb	r0, [r4, #1]!
   26e3c:	cmp	r0, #0
   26e40:	bne	26df4 <_obstack_memory_used@@Base+0x2508>
   26e44:	ldr	r0, [r6]
   26e48:	cmp	r0, #0
   26e4c:	addne	r4, r0, #5
   26e50:	movne	r6, r0
   26e54:	b	26df4 <_obstack_memory_used@@Base+0x2508>
   26e58:	movw	r4, #47938	; 0xbb42
   26e5c:	movt	r4, #2
   26e60:	str	r4, [r5, #40]	; 0x28
   26e64:	mov	r0, r8
   26e68:	sub	sp, fp, #28
   26e6c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   26e70:	sub	r0, r6, r4
   26e74:	add	sl, r0, #64	; 0x40
   26e78:	mov	r0, r7
   26e7c:	bl	11eac <strlen@plt>
   26e80:	add	r9, r0, #1
   26e84:	cmp	r9, sl
   26e88:	bge	26ea8 <_obstack_memory_used@@Base+0x25bc>
   26e8c:	mov	r0, r4
   26e90:	mov	r1, r7
   26e94:	mov	r2, r9
   26e98:	bl	11c60 <memcpy@plt>
   26e9c:	mov	r0, #0
   26ea0:	strb	r0, [r4, r9]
   26ea4:	b	26e60 <_obstack_memory_used@@Base+0x2574>
   26ea8:	add	r0, r0, #10
   26eac:	cmp	r9, #59	; 0x3b
   26eb0:	bic	r0, r0, #3
   26eb4:	movwcc	r0, #64	; 0x40
   26eb8:	bl	28cec <_obstack_memory_used@@Base+0x4400>
   26ebc:	cmp	r0, #0
   26ec0:	beq	26f00 <_obstack_memory_used@@Base+0x2614>
   26ec4:	mov	sl, r0
   26ec8:	mov	r0, #1
   26ecc:	mov	r1, r7
   26ed0:	mov	r2, r9
   26ed4:	strh	r0, [sl, #4]
   26ed8:	mov	r0, #0
   26edc:	add	r4, sl, #5
   26ee0:	str	r0, [sl]
   26ee4:	mov	r0, r4
   26ee8:	bl	11c60 <memcpy@plt>
   26eec:	mov	r0, #0
   26ef0:	strb	r0, [r4, r9]
   26ef4:	str	sl, [r6]
   26ef8:	strb	r0, [sl, #4]
   26efc:	b	26e60 <_obstack_memory_used@@Base+0x2574>
   26f00:	mov	r8, #0
   26f04:	str	r8, [r6]
   26f08:	b	26e64 <_obstack_memory_used@@Base+0x2578>
   26f0c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   26f10:	add	fp, sp, #28
   26f14:	sub	sp, sp, #52	; 0x34
   26f18:	mov	r4, r1
   26f1c:	cmp	r0, #0
   26f20:	beq	2702c <_obstack_memory_used@@Base+0x2740>
   26f24:	mov	r6, r0
   26f28:	bl	26c60 <_obstack_memory_used@@Base+0x2374>
   26f2c:	cmp	r0, #0
   26f30:	beq	27024 <_obstack_memory_used@@Base+0x2738>
   26f34:	mov	r8, r0
   26f38:	mov	r0, #32
   26f3c:	mov	r1, r4
   26f40:	add	r5, sp, #8
   26f44:	vld1.32	{d16-d17}, [r1], r0
   26f48:	mov	r2, r5
   26f4c:	vst1.32	{d16-d17}, [r2], r0
   26f50:	ldr	r0, [r4, #16]
   26f54:	ldr	r3, [r4, #20]
   26f58:	str	r0, [sp, #24]
   26f5c:	mvn	r0, #0
   26f60:	str	r0, [sp, #36]	; 0x24
   26f64:	str	r3, [sp, #28]
   26f68:	ldr	r0, [r1]
   26f6c:	str	r0, [r2]
   26f70:	mov	r0, r5
   26f74:	bl	11be8 <mktime@plt>
   26f78:	mov	r9, r0
   26f7c:	ldr	r0, [sp, #36]	; 0x24
   26f80:	mov	sl, #1
   26f84:	mov	r1, #1
   26f88:	cmp	r0, #0
   26f8c:	bmi	26fa0 <_obstack_memory_used@@Base+0x26b4>
   26f90:	add	r1, sp, #8
   26f94:	mov	r0, r6
   26f98:	bl	26dac <_obstack_memory_used@@Base+0x24c0>
   26f9c:	eor	r1, r0, #1
   26fa0:	cmp	r8, #1
   26fa4:	beq	27018 <_obstack_memory_used@@Base+0x272c>
   26fa8:	str	r1, [sp, #4]
   26fac:	bl	11ed0 <__errno_location@plt>
   26fb0:	mov	r6, r0
   26fb4:	ldr	r7, [r0]
   26fb8:	ldrb	r0, [r8, #4]
   26fbc:	cmp	r0, #0
   26fc0:	beq	2706c <_obstack_memory_used@@Base+0x2780>
   26fc4:	movw	r0, #38708	; 0x9734
   26fc8:	add	r1, r8, #5
   26fcc:	mov	r2, #1
   26fd0:	movt	r0, #2
   26fd4:	bl	11ec4 <setenv@plt>
   26fd8:	cmp	r0, #0
   26fdc:	beq	27080 <_obstack_memory_used@@Base+0x2794>
   26fe0:	ldr	r0, [r6]
   26fe4:	mov	sl, #0
   26fe8:	str	r0, [sp]
   26fec:	cmp	r8, #2
   26ff0:	bcc	2700c <_obstack_memory_used@@Base+0x2720>
   26ff4:	ldr	r7, [r8]
   26ff8:	mov	r0, r8
   26ffc:	bl	1f89c <__assert_fail@plt+0xd810>
   27000:	cmp	r7, #0
   27004:	mov	r8, r7
   27008:	bne	26ff4 <_obstack_memory_used@@Base+0x2708>
   2700c:	ldr	r0, [sp]
   27010:	ldr	r1, [sp, #4]
   27014:	str	r0, [r6]
   27018:	eor	r0, sl, #1
   2701c:	orrs	r0, r1, r0
   27020:	beq	2703c <_obstack_memory_used@@Base+0x2750>
   27024:	mvn	r9, #0
   27028:	b	27060 <_obstack_memory_used@@Base+0x2774>
   2702c:	mov	r0, r4
   27030:	sub	sp, fp, #28
   27034:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   27038:	b	11fcc <timegm@plt>
   2703c:	mov	r0, #28
   27040:	add	r1, r5, #16
   27044:	vld1.32	{d16-d17}, [r5], r0
   27048:	vld1.64	{d18-d19}, [r1]
   2704c:	add	r1, r4, #16
   27050:	vld1.32	{d20-d21}, [r5]
   27054:	vst1.32	{d16-d17}, [r4], r0
   27058:	vst1.32	{d18-d19}, [r1]
   2705c:	vst1.32	{d20-d21}, [r4]
   27060:	mov	r0, r9
   27064:	sub	sp, fp, #28
   27068:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2706c:	movw	r0, #38708	; 0x9734
   27070:	movt	r0, #2
   27074:	bl	12020 <unsetenv@plt>
   27078:	cmp	r0, #0
   2707c:	bne	26fe0 <_obstack_memory_used@@Base+0x26f4>
   27080:	str	r7, [sp]
   27084:	bl	11d20 <tzset@plt>
   27088:	mov	sl, #1
   2708c:	cmp	r8, #2
   27090:	bcs	26ff4 <_obstack_memory_used@@Base+0x2708>
   27094:	b	2700c <_obstack_memory_used@@Base+0x2720>
   27098:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   2709c:	add	fp, sp, #24
   270a0:	sub	sp, sp, #32
   270a4:	ldr	r6, [fp, #12]
   270a8:	ldr	r7, [fp, #8]
   270ac:	mov	r4, r2
   270b0:	mov	r8, r0
   270b4:	cmp	r1, #0
   270b8:	beq	270e0 <_obstack_memory_used@@Base+0x27f4>
   270bc:	movw	r2, #55312	; 0xd810
   270c0:	mov	r5, r1
   270c4:	str	r3, [sp, #4]
   270c8:	str	r4, [sp]
   270cc:	mov	r0, r8
   270d0:	mov	r1, #1
   270d4:	movt	r2, #2
   270d8:	mov	r3, r5
   270dc:	b	270f8 <_obstack_memory_used@@Base+0x280c>
   270e0:	movw	r2, #55324	; 0xd81c
   270e4:	str	r3, [sp]
   270e8:	mov	r0, r8
   270ec:	mov	r1, #1
   270f0:	mov	r3, r4
   270f4:	movt	r2, #2
   270f8:	bl	11f24 <__fprintf_chk@plt>
   270fc:	movw	r1, #55331	; 0xd823
   27100:	mov	r0, #0
   27104:	mov	r2, #5
   27108:	movt	r1, #2
   2710c:	bl	11ca8 <dcgettext@plt>
   27110:	movw	r2, #56049	; 0xdaf1
   27114:	mov	r3, r0
   27118:	movw	r0, #2022	; 0x7e6
   2711c:	mov	r1, #1
   27120:	movt	r2, #2
   27124:	str	r0, [sp]
   27128:	mov	r0, r8
   2712c:	bl	11f24 <__fprintf_chk@plt>
   27130:	movw	r4, #48685	; 0xbe2d
   27134:	mov	r1, r8
   27138:	movt	r4, #2
   2713c:	mov	r0, r4
   27140:	bl	11b94 <fputs_unlocked@plt>
   27144:	movw	r1, #55335	; 0xd827
   27148:	mov	r0, #0
   2714c:	mov	r2, #5
   27150:	movt	r1, #2
   27154:	bl	11ca8 <dcgettext@plt>
   27158:	movw	r3, #55506	; 0xd8d2
   2715c:	mov	r2, r0
   27160:	mov	r0, r8
   27164:	mov	r1, #1
   27168:	movt	r3, #2
   2716c:	bl	11f24 <__fprintf_chk@plt>
   27170:	mov	r0, r4
   27174:	mov	r1, r8
   27178:	bl	11b94 <fputs_unlocked@plt>
   2717c:	cmp	r6, #9
   27180:	bhi	271bc <_obstack_memory_used@@Base+0x28d0>
   27184:	add	r0, pc, #0
   27188:	ldr	pc, [r0, r6, lsl #2]
   2718c:			; <UNDEFINED> instruction: 0x000271b4
   27190:	andeq	r7, r2, r8, asr #3
   27194:	strdeq	r7, [r2], -r8
   27198:	andeq	r7, r2, r0, lsr #4
   2719c:	andeq	r7, r2, r8, asr #4
   271a0:	andeq	r7, r2, r0, ror r2
   271a4:	muleq	r2, r8, r2
   271a8:	ldrdeq	r7, [r2], -r0
   271ac:	andeq	r7, r2, r0, ror r3
   271b0:	andeq	r7, r2, r8, lsl r3
   271b4:	sub	sp, fp, #24
   271b8:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   271bc:	movw	r1, #55859	; 0xda33
   271c0:	movt	r1, #2
   271c4:	b	27320 <_obstack_memory_used@@Base+0x2a34>
   271c8:	movw	r1, #55540	; 0xd8f4
   271cc:	mov	r0, #0
   271d0:	mov	r2, #5
   271d4:	movt	r1, #2
   271d8:	bl	11ca8 <dcgettext@plt>
   271dc:	ldr	r3, [r7]
   271e0:	mov	r2, r0
   271e4:	mov	r0, r8
   271e8:	mov	r1, #1
   271ec:	sub	sp, fp, #24
   271f0:	pop	{r4, r5, r6, r7, r8, sl, fp, lr}
   271f4:	b	11f24 <__fprintf_chk@plt>
   271f8:	movw	r1, #55556	; 0xd904
   271fc:	mov	r0, #0
   27200:	mov	r2, #5
   27204:	movt	r1, #2
   27208:	bl	11ca8 <dcgettext@plt>
   2720c:	mov	r2, r0
   27210:	ldr	r3, [r7]
   27214:	ldr	r0, [r7, #4]
   27218:	str	r0, [sp]
   2721c:	b	2730c <_obstack_memory_used@@Base+0x2a20>
   27220:	movw	r1, #55579	; 0xd91b
   27224:	mov	r0, #0
   27228:	mov	r2, #5
   2722c:	movt	r1, #2
   27230:	bl	11ca8 <dcgettext@plt>
   27234:	mov	r2, r0
   27238:	ldr	r3, [r7]
   2723c:	ldmib	r7, {r0, r1}
   27240:	stm	sp, {r0, r1}
   27244:	b	2730c <_obstack_memory_used@@Base+0x2a20>
   27248:	movw	r1, #55607	; 0xd937
   2724c:	mov	r0, #0
   27250:	mov	r2, #5
   27254:	movt	r1, #2
   27258:	bl	11ca8 <dcgettext@plt>
   2725c:	ldr	r3, [r7]
   27260:	mov	r2, r0
   27264:	ldmib	r7, {r0, r1, r7}
   27268:	stm	sp, {r0, r1, r7}
   2726c:	b	2730c <_obstack_memory_used@@Base+0x2a20>
   27270:	movw	r1, #55639	; 0xd957
   27274:	mov	r0, #0
   27278:	mov	r2, #5
   2727c:	movt	r1, #2
   27280:	bl	11ca8 <dcgettext@plt>
   27284:	ldr	r3, [r7]
   27288:	mov	r2, r0
   2728c:	ldmib	r7, {r0, r1, r6, r7}
   27290:	stm	sp, {r0, r1, r6, r7}
   27294:	b	2730c <_obstack_memory_used@@Base+0x2a20>
   27298:	movw	r1, #55675	; 0xd97b
   2729c:	mov	r0, #0
   272a0:	mov	r2, #5
   272a4:	movt	r1, #2
   272a8:	bl	11ca8 <dcgettext@plt>
   272ac:	mov	r2, r0
   272b0:	ldr	r3, [r7]
   272b4:	ldmib	r7, {r0, r1, r6}
   272b8:	ldr	r5, [r7, #16]
   272bc:	ldr	r7, [r7, #20]
   272c0:	stm	sp, {r0, r1, r6}
   272c4:	str	r5, [sp, #12]
   272c8:	str	r7, [sp, #16]
   272cc:	b	2730c <_obstack_memory_used@@Base+0x2a20>
   272d0:	movw	r1, #55715	; 0xd9a3
   272d4:	mov	r0, #0
   272d8:	mov	r2, #5
   272dc:	movt	r1, #2
   272e0:	bl	11ca8 <dcgettext@plt>
   272e4:	mov	r2, r0
   272e8:	ldr	r3, [r7]
   272ec:	ldmib	r7, {r0, r1, r6}
   272f0:	ldr	r5, [r7, #16]
   272f4:	ldr	r4, [r7, #20]
   272f8:	ldr	r7, [r7, #24]
   272fc:	stm	sp, {r0, r1, r6}
   27300:	str	r5, [sp, #12]
   27304:	str	r4, [sp, #16]
   27308:	str	r7, [sp, #20]
   2730c:	mov	r0, r8
   27310:	mov	r1, #1
   27314:	b	273c0 <_obstack_memory_used@@Base+0x2ad4>
   27318:	movw	r1, #55807	; 0xd9ff
   2731c:	movt	r1, #2
   27320:	mov	r0, #0
   27324:	mov	r2, #5
   27328:	bl	11ca8 <dcgettext@plt>
   2732c:	mov	ip, r0
   27330:	ldr	r3, [r7]
   27334:	ldr	r0, [r7, #4]
   27338:	ldr	r1, [r7, #8]
   2733c:	ldr	r6, [r7, #12]
   27340:	ldr	r5, [r7, #16]
   27344:	ldr	r4, [r7, #20]
   27348:	ldr	r2, [r7, #24]
   2734c:	ldr	lr, [r7, #28]
   27350:	ldr	r7, [r7, #32]
   27354:	stm	sp, {r0, r1, r6}
   27358:	str	r5, [sp, #12]
   2735c:	str	r4, [sp, #16]
   27360:	str	r2, [sp, #20]
   27364:	str	lr, [sp, #24]
   27368:	str	r7, [sp, #28]
   2736c:	b	273b4 <_obstack_memory_used@@Base+0x2ac8>
   27370:	movw	r1, #55759	; 0xd9cf
   27374:	mov	r0, #0
   27378:	mov	r2, #5
   2737c:	movt	r1, #2
   27380:	bl	11ca8 <dcgettext@plt>
   27384:	mov	ip, r0
   27388:	ldr	r3, [r7]
   2738c:	ldmib	r7, {r0, r1, r6}
   27390:	ldr	r5, [r7, #16]
   27394:	ldr	r4, [r7, #20]
   27398:	ldr	r2, [r7, #24]
   2739c:	ldr	r7, [r7, #28]
   273a0:	stm	sp, {r0, r1, r6}
   273a4:	str	r5, [sp, #12]
   273a8:	str	r4, [sp, #16]
   273ac:	str	r2, [sp, #20]
   273b0:	str	r7, [sp, #24]
   273b4:	mov	r0, r8
   273b8:	mov	r1, #1
   273bc:	mov	r2, ip
   273c0:	bl	11f24 <__fprintf_chk@plt>
   273c4:	sub	sp, fp, #24
   273c8:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   273cc:	push	{r4, sl, fp, lr}
   273d0:	add	fp, sp, #8
   273d4:	sub	sp, sp, #8
   273d8:	ldr	ip, [fp, #8]
   273dc:	mov	lr, #0
   273e0:	ldr	r4, [ip, lr, lsl #2]
   273e4:	add	lr, lr, #1
   273e8:	cmp	r4, #0
   273ec:	bne	273e0 <_obstack_memory_used@@Base+0x2af4>
   273f0:	sub	r4, lr, #1
   273f4:	str	ip, [sp]
   273f8:	str	r4, [sp, #4]
   273fc:	bl	27098 <_obstack_memory_used@@Base+0x27ac>
   27400:	sub	sp, fp, #8
   27404:	pop	{r4, sl, fp, pc}
   27408:	push	{fp, lr}
   2740c:	mov	fp, sp
   27410:	sub	sp, sp, #48	; 0x30
   27414:	ldr	ip, [fp, #8]
   27418:	ldr	lr, [ip]
   2741c:	cmp	lr, #0
   27420:	str	lr, [sp, #8]
   27424:	beq	274c0 <_obstack_memory_used@@Base+0x2bd4>
   27428:	ldr	lr, [ip, #4]
   2742c:	cmp	lr, #0
   27430:	str	lr, [sp, #12]
   27434:	beq	274c8 <_obstack_memory_used@@Base+0x2bdc>
   27438:	ldr	lr, [ip, #8]
   2743c:	cmp	lr, #0
   27440:	str	lr, [sp, #16]
   27444:	beq	274d0 <_obstack_memory_used@@Base+0x2be4>
   27448:	ldr	lr, [ip, #12]
   2744c:	cmp	lr, #0
   27450:	str	lr, [sp, #20]
   27454:	beq	274d8 <_obstack_memory_used@@Base+0x2bec>
   27458:	ldr	lr, [ip, #16]
   2745c:	cmp	lr, #0
   27460:	str	lr, [sp, #24]
   27464:	beq	274e0 <_obstack_memory_used@@Base+0x2bf4>
   27468:	ldr	lr, [ip, #20]
   2746c:	cmp	lr, #0
   27470:	str	lr, [sp, #28]
   27474:	beq	274e8 <_obstack_memory_used@@Base+0x2bfc>
   27478:	ldr	lr, [ip, #24]
   2747c:	cmp	lr, #0
   27480:	str	lr, [sp, #32]
   27484:	beq	274f0 <_obstack_memory_used@@Base+0x2c04>
   27488:	ldr	lr, [ip, #28]
   2748c:	cmp	lr, #0
   27490:	str	lr, [sp, #36]	; 0x24
   27494:	beq	274f8 <_obstack_memory_used@@Base+0x2c0c>
   27498:	ldr	lr, [ip, #32]
   2749c:	cmp	lr, #0
   274a0:	str	lr, [sp, #40]	; 0x28
   274a4:	beq	27500 <_obstack_memory_used@@Base+0x2c14>
   274a8:	ldr	lr, [ip, #36]	; 0x24
   274ac:	mov	ip, #10
   274b0:	cmp	lr, #0
   274b4:	str	lr, [sp, #44]	; 0x2c
   274b8:	movweq	ip, #9
   274bc:	b	27504 <_obstack_memory_used@@Base+0x2c18>
   274c0:	mov	ip, #0
   274c4:	b	27504 <_obstack_memory_used@@Base+0x2c18>
   274c8:	mov	ip, #1
   274cc:	b	27504 <_obstack_memory_used@@Base+0x2c18>
   274d0:	mov	ip, #2
   274d4:	b	27504 <_obstack_memory_used@@Base+0x2c18>
   274d8:	mov	ip, #3
   274dc:	b	27504 <_obstack_memory_used@@Base+0x2c18>
   274e0:	mov	ip, #4
   274e4:	b	27504 <_obstack_memory_used@@Base+0x2c18>
   274e8:	mov	ip, #5
   274ec:	b	27504 <_obstack_memory_used@@Base+0x2c18>
   274f0:	mov	ip, #6
   274f4:	b	27504 <_obstack_memory_used@@Base+0x2c18>
   274f8:	mov	ip, #7
   274fc:	b	27504 <_obstack_memory_used@@Base+0x2c18>
   27500:	mov	ip, #8
   27504:	add	lr, sp, #8
   27508:	str	ip, [sp, #4]
   2750c:	str	lr, [sp]
   27510:	bl	27098 <_obstack_memory_used@@Base+0x27ac>
   27514:	mov	sp, fp
   27518:	pop	{fp, pc}
   2751c:	push	{fp, lr}
   27520:	mov	fp, sp
   27524:	sub	sp, sp, #56	; 0x38
   27528:	add	ip, fp, #8
   2752c:	str	ip, [sp, #12]
   27530:	ldr	lr, [fp, #8]
   27534:	cmp	lr, #0
   27538:	str	lr, [sp, #16]
   2753c:	beq	275d8 <_obstack_memory_used@@Base+0x2cec>
   27540:	ldr	lr, [ip, #4]
   27544:	cmp	lr, #0
   27548:	str	lr, [sp, #20]
   2754c:	beq	275e0 <_obstack_memory_used@@Base+0x2cf4>
   27550:	ldr	lr, [ip, #8]
   27554:	cmp	lr, #0
   27558:	str	lr, [sp, #24]
   2755c:	beq	275e8 <_obstack_memory_used@@Base+0x2cfc>
   27560:	ldr	lr, [ip, #12]
   27564:	cmp	lr, #0
   27568:	str	lr, [sp, #28]
   2756c:	beq	275f0 <_obstack_memory_used@@Base+0x2d04>
   27570:	ldr	lr, [ip, #16]
   27574:	cmp	lr, #0
   27578:	str	lr, [sp, #32]
   2757c:	beq	275f8 <_obstack_memory_used@@Base+0x2d0c>
   27580:	ldr	lr, [ip, #20]
   27584:	cmp	lr, #0
   27588:	str	lr, [sp, #36]	; 0x24
   2758c:	beq	27600 <_obstack_memory_used@@Base+0x2d14>
   27590:	ldr	lr, [ip, #24]
   27594:	cmp	lr, #0
   27598:	str	lr, [sp, #40]	; 0x28
   2759c:	beq	27608 <_obstack_memory_used@@Base+0x2d1c>
   275a0:	ldr	lr, [ip, #28]
   275a4:	cmp	lr, #0
   275a8:	str	lr, [sp, #44]	; 0x2c
   275ac:	beq	27610 <_obstack_memory_used@@Base+0x2d24>
   275b0:	ldr	lr, [ip, #32]
   275b4:	cmp	lr, #0
   275b8:	str	lr, [sp, #48]	; 0x30
   275bc:	beq	27618 <_obstack_memory_used@@Base+0x2d2c>
   275c0:	ldr	lr, [ip, #36]	; 0x24
   275c4:	mov	ip, #10
   275c8:	cmp	lr, #0
   275cc:	str	lr, [sp, #52]	; 0x34
   275d0:	movweq	ip, #9
   275d4:	b	2761c <_obstack_memory_used@@Base+0x2d30>
   275d8:	mov	ip, #0
   275dc:	b	2761c <_obstack_memory_used@@Base+0x2d30>
   275e0:	mov	ip, #1
   275e4:	b	2761c <_obstack_memory_used@@Base+0x2d30>
   275e8:	mov	ip, #2
   275ec:	b	2761c <_obstack_memory_used@@Base+0x2d30>
   275f0:	mov	ip, #3
   275f4:	b	2761c <_obstack_memory_used@@Base+0x2d30>
   275f8:	mov	ip, #4
   275fc:	b	2761c <_obstack_memory_used@@Base+0x2d30>
   27600:	mov	ip, #5
   27604:	b	2761c <_obstack_memory_used@@Base+0x2d30>
   27608:	mov	ip, #6
   2760c:	b	2761c <_obstack_memory_used@@Base+0x2d30>
   27610:	mov	ip, #7
   27614:	b	2761c <_obstack_memory_used@@Base+0x2d30>
   27618:	mov	ip, #8
   2761c:	add	lr, sp, #16
   27620:	str	ip, [sp, #4]
   27624:	str	lr, [sp]
   27628:	bl	27098 <_obstack_memory_used@@Base+0x27ac>
   2762c:	mov	sp, fp
   27630:	pop	{fp, pc}
   27634:	push	{fp, lr}
   27638:	mov	fp, sp
   2763c:	movw	r0, #58124	; 0xe30c
   27640:	movt	r0, #3
   27644:	ldr	r1, [r0]
   27648:	movw	r0, #48685	; 0xbe2d
   2764c:	movt	r0, #2
   27650:	bl	11b94 <fputs_unlocked@plt>
   27654:	movw	r1, #55919	; 0xda6f
   27658:	mov	r0, #0
   2765c:	mov	r2, #5
   27660:	movt	r1, #2
   27664:	bl	11ca8 <dcgettext@plt>
   27668:	movw	r2, #55939	; 0xda83
   2766c:	mov	r1, r0
   27670:	mov	r0, #1
   27674:	movt	r2, #2
   27678:	bl	11f00 <__printf_chk@plt>
   2767c:	movw	r1, #55961	; 0xda99
   27680:	mov	r0, #0
   27684:	mov	r2, #5
   27688:	movt	r1, #2
   2768c:	bl	11ca8 <dcgettext@plt>
   27690:	movw	r2, #46499	; 0xb5a3
   27694:	movw	r3, #48494	; 0xbd6e
   27698:	mov	r1, r0
   2769c:	mov	r0, #1
   276a0:	movt	r2, #2
   276a4:	movt	r3, #2
   276a8:	bl	11f00 <__printf_chk@plt>
   276ac:	movw	r1, #55981	; 0xdaad
   276b0:	mov	r0, #0
   276b4:	mov	r2, #5
   276b8:	movt	r1, #2
   276bc:	bl	11ca8 <dcgettext@plt>
   276c0:	movw	r2, #56020	; 0xdad4
   276c4:	mov	r1, r0
   276c8:	mov	r0, #1
   276cc:	movt	r2, #2
   276d0:	pop	{fp, lr}
   276d4:	b	11f00 <__printf_chk@plt>
   276d8:	push	{r4, r5, r6, sl, fp, lr}
   276dc:	add	fp, sp, #16
   276e0:	mov	r4, r2
   276e4:	mov	r5, r1
   276e8:	mov	r6, r0
   276ec:	bl	29008 <_obstack_memory_used@@Base+0x471c>
   276f0:	cmp	r0, #0
   276f4:	popne	{r4, r5, r6, sl, fp, pc}
   276f8:	cmp	r6, #0
   276fc:	beq	27710 <_obstack_memory_used@@Base+0x2e24>
   27700:	cmp	r5, #0
   27704:	cmpne	r4, #0
   27708:	bne	27710 <_obstack_memory_used@@Base+0x2e24>
   2770c:	pop	{r4, r5, r6, sl, fp, pc}
   27710:	bl	27c8c <_obstack_memory_used@@Base+0x33a0>
   27714:	push	{r4, r5, r6, sl, fp, lr}
   27718:	add	fp, sp, #16
   2771c:	mov	r4, r2
   27720:	mov	r5, r1
   27724:	mov	r6, r0
   27728:	bl	29008 <_obstack_memory_used@@Base+0x471c>
   2772c:	cmp	r0, #0
   27730:	popne	{r4, r5, r6, sl, fp, pc}
   27734:	cmp	r6, #0
   27738:	beq	2774c <_obstack_memory_used@@Base+0x2e60>
   2773c:	cmp	r5, #0
   27740:	cmpne	r4, #0
   27744:	bne	2774c <_obstack_memory_used@@Base+0x2e60>
   27748:	pop	{r4, r5, r6, sl, fp, pc}
   2774c:	bl	27c8c <_obstack_memory_used@@Base+0x33a0>
   27750:	push	{fp, lr}
   27754:	mov	fp, sp
   27758:	bl	28cec <_obstack_memory_used@@Base+0x4400>
   2775c:	cmp	r0, #0
   27760:	popne	{fp, pc}
   27764:	bl	27c8c <_obstack_memory_used@@Base+0x33a0>
   27768:	push	{fp, lr}
   2776c:	mov	fp, sp
   27770:	bl	28cec <_obstack_memory_used@@Base+0x4400>
   27774:	cmp	r0, #0
   27778:	popne	{fp, pc}
   2777c:	bl	27c8c <_obstack_memory_used@@Base+0x33a0>
   27780:	push	{fp, lr}
   27784:	mov	fp, sp
   27788:	bl	28cec <_obstack_memory_used@@Base+0x4400>
   2778c:	cmp	r0, #0
   27790:	popne	{fp, pc}
   27794:	bl	27c8c <_obstack_memory_used@@Base+0x33a0>
   27798:	push	{r4, r5, fp, lr}
   2779c:	add	fp, sp, #8
   277a0:	mov	r4, r1
   277a4:	mov	r5, r0
   277a8:	bl	28d1c <_obstack_memory_used@@Base+0x4430>
   277ac:	cmp	r0, #0
   277b0:	popne	{r4, r5, fp, pc}
   277b4:	cmp	r5, #0
   277b8:	beq	277c8 <_obstack_memory_used@@Base+0x2edc>
   277bc:	cmp	r4, #0
   277c0:	bne	277c8 <_obstack_memory_used@@Base+0x2edc>
   277c4:	pop	{r4, r5, fp, pc}
   277c8:	bl	27c8c <_obstack_memory_used@@Base+0x33a0>
   277cc:	push	{fp, lr}
   277d0:	mov	fp, sp
   277d4:	cmp	r1, #0
   277d8:	orreq	r1, r1, #1
   277dc:	bl	28d1c <_obstack_memory_used@@Base+0x4430>
   277e0:	cmp	r0, #0
   277e4:	popne	{fp, pc}
   277e8:	bl	27c8c <_obstack_memory_used@@Base+0x33a0>
   277ec:	push	{fp, lr}
   277f0:	mov	fp, sp
   277f4:	clz	r3, r2
   277f8:	lsr	ip, r3, #5
   277fc:	clz	r3, r1
   27800:	lsr	r3, r3, #5
   27804:	orrs	r3, r3, ip
   27808:	movwne	r1, #1
   2780c:	movwne	r2, #1
   27810:	bl	29008 <_obstack_memory_used@@Base+0x471c>
   27814:	cmp	r0, #0
   27818:	popne	{fp, pc}
   2781c:	bl	27c8c <_obstack_memory_used@@Base+0x33a0>
   27820:	push	{fp, lr}
   27824:	mov	fp, sp
   27828:	mov	r2, r1
   2782c:	mov	r1, r0
   27830:	mov	r0, #0
   27834:	bl	29008 <_obstack_memory_used@@Base+0x471c>
   27838:	cmp	r0, #0
   2783c:	popne	{fp, pc}
   27840:	bl	27c8c <_obstack_memory_used@@Base+0x33a0>
   27844:	push	{fp, lr}
   27848:	mov	fp, sp
   2784c:	mov	r2, r1
   27850:	mov	r1, r0
   27854:	clz	r0, r2
   27858:	clz	r3, r1
   2785c:	lsr	r0, r0, #5
   27860:	lsr	r3, r3, #5
   27864:	orrs	r0, r3, r0
   27868:	mov	r0, #0
   2786c:	movwne	r1, #1
   27870:	movwne	r2, #1
   27874:	bl	29008 <_obstack_memory_used@@Base+0x471c>
   27878:	cmp	r0, #0
   2787c:	popne	{fp, pc}
   27880:	bl	27c8c <_obstack_memory_used@@Base+0x33a0>
   27884:	push	{r4, r5, r6, sl, fp, lr}
   27888:	add	fp, sp, #16
   2788c:	ldr	r5, [r1]
   27890:	mov	r4, r1
   27894:	mov	r6, r0
   27898:	cmp	r0, #0
   2789c:	beq	278b4 <_obstack_memory_used@@Base+0x2fc8>
   278a0:	mov	r0, #1
   278a4:	add	r0, r0, r5, lsr #1
   278a8:	adds	r5, r5, r0
   278ac:	bcc	278bc <_obstack_memory_used@@Base+0x2fd0>
   278b0:	b	278f8 <_obstack_memory_used@@Base+0x300c>
   278b4:	cmp	r5, #0
   278b8:	movweq	r5, #64	; 0x40
   278bc:	mov	r0, r6
   278c0:	mov	r1, r5
   278c4:	mov	r2, #1
   278c8:	bl	29008 <_obstack_memory_used@@Base+0x471c>
   278cc:	cmp	r5, #0
   278d0:	mov	r1, r5
   278d4:	movwne	r1, #1
   278d8:	cmp	r0, #0
   278dc:	bne	278f0 <_obstack_memory_used@@Base+0x3004>
   278e0:	clz	r2, r6
   278e4:	lsr	r2, r2, #5
   278e8:	orrs	r1, r2, r1
   278ec:	bne	278f8 <_obstack_memory_used@@Base+0x300c>
   278f0:	str	r5, [r4]
   278f4:	pop	{r4, r5, r6, sl, fp, pc}
   278f8:	bl	27c8c <_obstack_memory_used@@Base+0x33a0>
   278fc:	push	{r4, r5, r6, r7, fp, lr}
   27900:	add	fp, sp, #16
   27904:	ldr	r5, [r1]
   27908:	mov	r6, r2
   2790c:	mov	r4, r1
   27910:	mov	r7, r0
   27914:	cmp	r0, #0
   27918:	beq	27930 <_obstack_memory_used@@Base+0x3044>
   2791c:	mov	r0, #1
   27920:	add	r0, r0, r5, lsr #1
   27924:	adds	r5, r5, r0
   27928:	bcc	27948 <_obstack_memory_used@@Base+0x305c>
   2792c:	b	2797c <_obstack_memory_used@@Base+0x3090>
   27930:	cmp	r5, #0
   27934:	bne	27948 <_obstack_memory_used@@Base+0x305c>
   27938:	mov	r0, #64	; 0x40
   2793c:	cmp	r6, #64	; 0x40
   27940:	udiv	r5, r0, r6
   27944:	addhi	r5, r5, #1
   27948:	mov	r0, r7
   2794c:	mov	r1, r5
   27950:	mov	r2, r6
   27954:	bl	29008 <_obstack_memory_used@@Base+0x471c>
   27958:	cmp	r0, #0
   2795c:	bne	27974 <_obstack_memory_used@@Base+0x3088>
   27960:	cmp	r7, #0
   27964:	beq	2797c <_obstack_memory_used@@Base+0x3090>
   27968:	cmp	r6, #0
   2796c:	cmpne	r5, #0
   27970:	bne	2797c <_obstack_memory_used@@Base+0x3090>
   27974:	str	r5, [r4]
   27978:	pop	{r4, r5, r6, r7, fp, pc}
   2797c:	bl	27c8c <_obstack_memory_used@@Base+0x33a0>
   27980:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   27984:	add	fp, sp, #24
   27988:	mov	r8, r1
   2798c:	ldr	r1, [r1]
   27990:	mov	r5, r0
   27994:	add	r0, r1, r1, asr #1
   27998:	cmp	r0, r1
   2799c:	mvnvs	r0, #-2147483648	; 0x80000000
   279a0:	cmp	r0, r3
   279a4:	mov	r7, r0
   279a8:	movgt	r7, r3
   279ac:	cmn	r3, #1
   279b0:	movle	r7, r0
   279b4:	ldr	r0, [fp, #8]
   279b8:	cmn	r0, #1
   279bc:	ble	279e4 <_obstack_memory_used@@Base+0x30f8>
   279c0:	cmp	r0, #0
   279c4:	beq	27a38 <_obstack_memory_used@@Base+0x314c>
   279c8:	cmn	r7, #1
   279cc:	ble	27a0c <_obstack_memory_used@@Base+0x3120>
   279d0:	mvn	r4, #-2147483648	; 0x80000000
   279d4:	udiv	r6, r4, r0
   279d8:	cmp	r6, r7
   279dc:	bge	27a38 <_obstack_memory_used@@Base+0x314c>
   279e0:	b	27a48 <_obstack_memory_used@@Base+0x315c>
   279e4:	cmn	r7, #1
   279e8:	ble	27a28 <_obstack_memory_used@@Base+0x313c>
   279ec:	cmn	r0, #1
   279f0:	beq	27a38 <_obstack_memory_used@@Base+0x314c>
   279f4:	mov	r6, #-2147483648	; 0x80000000
   279f8:	mvn	r4, #-2147483648	; 0x80000000
   279fc:	sdiv	r6, r6, r0
   27a00:	cmp	r6, r7
   27a04:	bge	27a38 <_obstack_memory_used@@Base+0x314c>
   27a08:	b	27a48 <_obstack_memory_used@@Base+0x315c>
   27a0c:	beq	27a38 <_obstack_memory_used@@Base+0x314c>
   27a10:	mov	r6, #-2147483648	; 0x80000000
   27a14:	mvn	r4, #-2147483648	; 0x80000000
   27a18:	sdiv	r6, r6, r7
   27a1c:	cmp	r6, r0
   27a20:	bge	27a38 <_obstack_memory_used@@Base+0x314c>
   27a24:	b	27a48 <_obstack_memory_used@@Base+0x315c>
   27a28:	mvn	r4, #-2147483648	; 0x80000000
   27a2c:	sdiv	r6, r4, r0
   27a30:	cmp	r7, r6
   27a34:	blt	27a48 <_obstack_memory_used@@Base+0x315c>
   27a38:	mul	r6, r7, r0
   27a3c:	mov	r4, #64	; 0x40
   27a40:	cmp	r6, #63	; 0x3f
   27a44:	bgt	27a50 <_obstack_memory_used@@Base+0x3164>
   27a48:	sdiv	r7, r4, r0
   27a4c:	mul	r6, r7, r0
   27a50:	cmp	r5, #0
   27a54:	moveq	r4, #0
   27a58:	streq	r4, [r8]
   27a5c:	sub	r4, r7, r1
   27a60:	cmp	r4, r2
   27a64:	bge	27b10 <_obstack_memory_used@@Base+0x3224>
   27a68:	add	r7, r1, r2
   27a6c:	mov	r6, #0
   27a70:	mov	r2, #0
   27a74:	cmp	r7, r3
   27a78:	movwgt	r6, #1
   27a7c:	cmn	r3, #1
   27a80:	movwgt	r2, #1
   27a84:	cmp	r7, r1
   27a88:	bvs	27b44 <_obstack_memory_used@@Base+0x3258>
   27a8c:	ands	r1, r2, r6
   27a90:	bne	27b44 <_obstack_memory_used@@Base+0x3258>
   27a94:	cmn	r0, #1
   27a98:	ble	27ac0 <_obstack_memory_used@@Base+0x31d4>
   27a9c:	cmp	r0, #0
   27aa0:	beq	27b0c <_obstack_memory_used@@Base+0x3220>
   27aa4:	cmn	r7, #1
   27aa8:	ble	27ae4 <_obstack_memory_used@@Base+0x31f8>
   27aac:	mvn	r1, #-2147483648	; 0x80000000
   27ab0:	udiv	r1, r1, r0
   27ab4:	cmp	r1, r7
   27ab8:	bge	27b0c <_obstack_memory_used@@Base+0x3220>
   27abc:	b	27b44 <_obstack_memory_used@@Base+0x3258>
   27ac0:	cmn	r7, #1
   27ac4:	ble	27afc <_obstack_memory_used@@Base+0x3210>
   27ac8:	cmn	r0, #1
   27acc:	beq	27b0c <_obstack_memory_used@@Base+0x3220>
   27ad0:	mov	r1, #-2147483648	; 0x80000000
   27ad4:	sdiv	r1, r1, r0
   27ad8:	cmp	r1, r7
   27adc:	bge	27b0c <_obstack_memory_used@@Base+0x3220>
   27ae0:	b	27b44 <_obstack_memory_used@@Base+0x3258>
   27ae4:	beq	27b0c <_obstack_memory_used@@Base+0x3220>
   27ae8:	mov	r1, #-2147483648	; 0x80000000
   27aec:	sdiv	r1, r1, r7
   27af0:	cmp	r1, r0
   27af4:	bge	27b0c <_obstack_memory_used@@Base+0x3220>
   27af8:	b	27b44 <_obstack_memory_used@@Base+0x3258>
   27afc:	mvn	r1, #-2147483648	; 0x80000000
   27b00:	sdiv	r1, r1, r0
   27b04:	cmp	r7, r1
   27b08:	blt	27b44 <_obstack_memory_used@@Base+0x3258>
   27b0c:	mul	r6, r7, r0
   27b10:	mov	r0, r5
   27b14:	mov	r1, r6
   27b18:	bl	28d1c <_obstack_memory_used@@Base+0x4430>
   27b1c:	cmp	r6, #0
   27b20:	movwne	r6, #1
   27b24:	cmp	r0, #0
   27b28:	bne	27b3c <_obstack_memory_used@@Base+0x3250>
   27b2c:	clz	r1, r5
   27b30:	lsr	r1, r1, #5
   27b34:	orrs	r1, r1, r6
   27b38:	bne	27b44 <_obstack_memory_used@@Base+0x3258>
   27b3c:	str	r7, [r8]
   27b40:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   27b44:	bl	27c8c <_obstack_memory_used@@Base+0x33a0>
   27b48:	push	{fp, lr}
   27b4c:	mov	fp, sp
   27b50:	mov	r1, #1
   27b54:	bl	28c98 <_obstack_memory_used@@Base+0x43ac>
   27b58:	cmp	r0, #0
   27b5c:	popne	{fp, pc}
   27b60:	bl	27c8c <_obstack_memory_used@@Base+0x33a0>
   27b64:	push	{fp, lr}
   27b68:	mov	fp, sp
   27b6c:	bl	28c98 <_obstack_memory_used@@Base+0x43ac>
   27b70:	cmp	r0, #0
   27b74:	popne	{fp, pc}
   27b78:	bl	27c8c <_obstack_memory_used@@Base+0x33a0>
   27b7c:	push	{fp, lr}
   27b80:	mov	fp, sp
   27b84:	mov	r1, #1
   27b88:	bl	28c98 <_obstack_memory_used@@Base+0x43ac>
   27b8c:	cmp	r0, #0
   27b90:	popne	{fp, pc}
   27b94:	bl	27c8c <_obstack_memory_used@@Base+0x33a0>
   27b98:	push	{fp, lr}
   27b9c:	mov	fp, sp
   27ba0:	bl	28c98 <_obstack_memory_used@@Base+0x43ac>
   27ba4:	cmp	r0, #0
   27ba8:	popne	{fp, pc}
   27bac:	bl	27c8c <_obstack_memory_used@@Base+0x33a0>
   27bb0:	push	{r4, r5, fp, lr}
   27bb4:	add	fp, sp, #8
   27bb8:	mov	r5, r0
   27bbc:	mov	r0, r1
   27bc0:	mov	r4, r1
   27bc4:	bl	28cec <_obstack_memory_used@@Base+0x4400>
   27bc8:	cmp	r0, #0
   27bcc:	beq	27be0 <_obstack_memory_used@@Base+0x32f4>
   27bd0:	mov	r1, r5
   27bd4:	mov	r2, r4
   27bd8:	pop	{r4, r5, fp, lr}
   27bdc:	b	11c60 <memcpy@plt>
   27be0:	bl	27c8c <_obstack_memory_used@@Base+0x33a0>
   27be4:	push	{r4, r5, fp, lr}
   27be8:	add	fp, sp, #8
   27bec:	mov	r5, r0
   27bf0:	mov	r0, r1
   27bf4:	mov	r4, r1
   27bf8:	bl	28cec <_obstack_memory_used@@Base+0x4400>
   27bfc:	cmp	r0, #0
   27c00:	beq	27c14 <_obstack_memory_used@@Base+0x3328>
   27c04:	mov	r1, r5
   27c08:	mov	r2, r4
   27c0c:	pop	{r4, r5, fp, lr}
   27c10:	b	11c60 <memcpy@plt>
   27c14:	bl	27c8c <_obstack_memory_used@@Base+0x33a0>
   27c18:	push	{r4, r5, fp, lr}
   27c1c:	add	fp, sp, #8
   27c20:	mov	r5, r0
   27c24:	add	r0, r1, #1
   27c28:	mov	r4, r1
   27c2c:	bl	28cec <_obstack_memory_used@@Base+0x4400>
   27c30:	cmp	r0, #0
   27c34:	beq	27c50 <_obstack_memory_used@@Base+0x3364>
   27c38:	mov	r1, #0
   27c3c:	mov	r2, r4
   27c40:	strb	r1, [r0, r4]
   27c44:	mov	r1, r5
   27c48:	pop	{r4, r5, fp, lr}
   27c4c:	b	11c60 <memcpy@plt>
   27c50:	bl	27c8c <_obstack_memory_used@@Base+0x33a0>
   27c54:	push	{r4, r5, fp, lr}
   27c58:	add	fp, sp, #8
   27c5c:	mov	r4, r0
   27c60:	bl	11eac <strlen@plt>
   27c64:	add	r5, r0, #1
   27c68:	mov	r0, r5
   27c6c:	bl	28cec <_obstack_memory_used@@Base+0x4400>
   27c70:	cmp	r0, #0
   27c74:	beq	27c88 <_obstack_memory_used@@Base+0x339c>
   27c78:	mov	r1, r4
   27c7c:	mov	r2, r5
   27c80:	pop	{r4, r5, fp, lr}
   27c84:	b	11c60 <memcpy@plt>
   27c88:	bl	27c8c <_obstack_memory_used@@Base+0x33a0>
   27c8c:	push	{fp, lr}
   27c90:	mov	fp, sp
   27c94:	movw	r0, #58028	; 0xe2ac
   27c98:	movw	r1, #55055	; 0xd70f
   27c9c:	mov	r2, #5
   27ca0:	movt	r0, #3
   27ca4:	movt	r1, #2
   27ca8:	ldr	r4, [r0]
   27cac:	mov	r0, #0
   27cb0:	bl	11ca8 <dcgettext@plt>
   27cb4:	movw	r2, #54786	; 0xd602
   27cb8:	mov	r3, r0
   27cbc:	mov	r0, r4
   27cc0:	mov	r1, #0
   27cc4:	movt	r2, #2
   27cc8:	bl	11da4 <error@plt>
   27ccc:	bl	12038 <abort@plt>
   27cd0:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   27cd4:	add	fp, sp, #24
   27cd8:	sub	sp, sp, #16
   27cdc:	mov	r8, r0
   27ce0:	ldr	r0, [fp, #16]
   27ce4:	mov	r5, r3
   27ce8:	mov	r6, r2
   27cec:	mov	r2, r1
   27cf0:	add	r3, sp, #8
   27cf4:	mov	r1, #0
   27cf8:	str	r0, [sp]
   27cfc:	mov	r0, r8
   27d00:	bl	27ff8 <_obstack_memory_used@@Base+0x370c>
   27d04:	cmp	r0, #0
   27d08:	bne	27d94 <_obstack_memory_used@@Base+0x34a8>
   27d0c:	ldr	r4, [sp, #8]
   27d10:	ldr	r7, [sp, #12]
   27d14:	subs	r0, r4, r6
   27d18:	sbcs	r0, r7, r5
   27d1c:	bcc	27d40 <_obstack_memory_used@@Base+0x3454>
   27d20:	ldr	r1, [fp, #8]
   27d24:	ldr	r0, [fp, #12]
   27d28:	subs	r1, r1, r4
   27d2c:	sbcs	r0, r0, r7
   27d30:	movcs	r0, r4
   27d34:	movcs	r1, r7
   27d38:	subcs	sp, fp, #24
   27d3c:	popcs	{r4, r5, r6, r7, r8, sl, fp, pc}
   27d40:	bl	11ed0 <__errno_location@plt>
   27d44:	subs	r1, r4, #1073741824	; 0x40000000
   27d48:	sbcs	r1, r7, #0
   27d4c:	movcc	r1, #34	; 0x22
   27d50:	movcs	r1, #75	; 0x4b
   27d54:	str	r1, [r0]
   27d58:	ldr	r6, [r0]
   27d5c:	ldr	r4, [fp, #24]
   27d60:	ldr	r5, [fp, #20]
   27d64:	mov	r0, r8
   27d68:	bl	265b8 <_obstack_memory_used@@Base+0x1ccc>
   27d6c:	subs	r1, r6, #22
   27d70:	movw	r2, #46355	; 0xb513
   27d74:	str	r0, [sp]
   27d78:	mov	r3, r5
   27d7c:	movne	r1, r6
   27d80:	cmp	r4, #0
   27d84:	movt	r2, #2
   27d88:	movweq	r4, #1
   27d8c:	mov	r0, r4
   27d90:	bl	11da4 <error@plt>
   27d94:	cmp	r0, #1
   27d98:	beq	27db0 <_obstack_memory_used@@Base+0x34c4>
   27d9c:	cmp	r0, #3
   27da0:	bne	27dbc <_obstack_memory_used@@Base+0x34d0>
   27da4:	bl	11ed0 <__errno_location@plt>
   27da8:	mov	r1, #0
   27dac:	b	27d54 <_obstack_memory_used@@Base+0x3468>
   27db0:	bl	11ed0 <__errno_location@plt>
   27db4:	mov	r1, #75	; 0x4b
   27db8:	b	27d54 <_obstack_memory_used@@Base+0x3468>
   27dbc:	bl	11ed0 <__errno_location@plt>
   27dc0:	b	27d58 <_obstack_memory_used@@Base+0x346c>
   27dc4:	mov	r1, #10
   27dc8:	b	27cd0 <_obstack_memory_used@@Base+0x33e4>
   27dcc:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   27dd0:	add	fp, sp, #28
   27dd4:	sub	sp, sp, #108	; 0x6c
   27dd8:	mov	r5, #100	; 0x64
   27ddc:	mov	r9, #0
   27de0:	add	r7, sp, #8
   27de4:	str	r5, [sp, #4]
   27de8:	bl	11ed0 <__errno_location@plt>
   27dec:	mov	r4, r0
   27df0:	mov	sl, #1
   27df4:	add	r8, sp, #4
   27df8:	mov	r6, #0
   27dfc:	sub	r5, r5, #1
   27e00:	mov	r0, r7
   27e04:	mov	r1, r5
   27e08:	strb	r9, [r7, r5]
   27e0c:	str	r9, [r4]
   27e10:	bl	11db0 <gethostname@plt>
   27e14:	cmp	r0, #0
   27e18:	bne	27e34 <_obstack_memory_used@@Base+0x3548>
   27e1c:	mov	r0, r7
   27e20:	bl	11eac <strlen@plt>
   27e24:	add	r1, r0, #1
   27e28:	cmp	r1, r5
   27e2c:	blt	27f1c <_obstack_memory_used@@Base+0x3630>
   27e30:	str	r9, [r4]
   27e34:	mov	r0, r6
   27e38:	bl	1f89c <__assert_fail@plt+0xd810>
   27e3c:	ldr	r0, [r4]
   27e40:	cmp	r0, #36	; 0x24
   27e44:	bhi	27f0c <_obstack_memory_used@@Base+0x3620>
   27e48:	add	r1, pc, #0
   27e4c:	ldr	pc, [r1, r0, lsl #2]
   27e50:	andeq	r7, r2, r4, ror #29
   27e54:	andeq	r7, r2, ip, lsl #30
   27e58:	andeq	r7, r2, ip, lsl #30
   27e5c:	andeq	r7, r2, ip, lsl #30
   27e60:	andeq	r7, r2, ip, lsl #30
   27e64:	andeq	r7, r2, ip, lsl #30
   27e68:	andeq	r7, r2, ip, lsl #30
   27e6c:	andeq	r7, r2, ip, lsl #30
   27e70:	andeq	r7, r2, ip, lsl #30
   27e74:	andeq	r7, r2, ip, lsl #30
   27e78:	andeq	r7, r2, ip, lsl #30
   27e7c:	andeq	r7, r2, ip, lsl #30
   27e80:	andeq	r7, r2, r4, ror #29
   27e84:	andeq	r7, r2, ip, lsl #30
   27e88:	andeq	r7, r2, ip, lsl #30
   27e8c:	andeq	r7, r2, ip, lsl #30
   27e90:	andeq	r7, r2, ip, lsl #30
   27e94:	andeq	r7, r2, ip, lsl #30
   27e98:	andeq	r7, r2, ip, lsl #30
   27e9c:	andeq	r7, r2, ip, lsl #30
   27ea0:	andeq	r7, r2, ip, lsl #30
   27ea4:	andeq	r7, r2, ip, lsl #30
   27ea8:	andeq	r7, r2, r4, ror #29
   27eac:	andeq	r7, r2, ip, lsl #30
   27eb0:	andeq	r7, r2, ip, lsl #30
   27eb4:	andeq	r7, r2, ip, lsl #30
   27eb8:	andeq	r7, r2, ip, lsl #30
   27ebc:	andeq	r7, r2, ip, lsl #30
   27ec0:	andeq	r7, r2, ip, lsl #30
   27ec4:	andeq	r7, r2, ip, lsl #30
   27ec8:	andeq	r7, r2, ip, lsl #30
   27ecc:	andeq	r7, r2, ip, lsl #30
   27ed0:	andeq	r7, r2, ip, lsl #30
   27ed4:	andeq	r7, r2, ip, lsl #30
   27ed8:	andeq	r7, r2, ip, lsl #30
   27edc:	andeq	r7, r2, ip, lsl #30
   27ee0:	andeq	r7, r2, r4, ror #29
   27ee4:	mov	r0, #0
   27ee8:	mov	r1, r8
   27eec:	mov	r2, #1
   27ef0:	mvn	r3, #0
   27ef4:	str	sl, [sp]
   27ef8:	bl	27980 <_obstack_memory_used@@Base+0x3094>
   27efc:	ldr	r5, [sp, #4]
   27f00:	mov	r6, r0
   27f04:	mov	r7, r0
   27f08:	b	27dfc <_obstack_memory_used@@Base+0x3510>
   27f0c:	mov	r6, #0
   27f10:	mov	r0, r6
   27f14:	sub	sp, fp, #28
   27f18:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   27f1c:	cmp	r6, #0
   27f20:	bne	27f10 <_obstack_memory_used@@Base+0x3624>
   27f24:	mov	r0, r7
   27f28:	bl	27be4 <_obstack_memory_used@@Base+0x32f8>
   27f2c:	mov	r6, r0
   27f30:	b	27f10 <_obstack_memory_used@@Base+0x3624>
   27f34:	push	{fp, lr}
   27f38:	mov	fp, sp
   27f3c:	sub	sp, sp, #8
   27f40:	movw	ip, #58028	; 0xe2ac
   27f44:	movt	ip, #3
   27f48:	ldr	ip, [ip]
   27f4c:	str	ip, [sp, #4]
   27f50:	ldr	ip, [fp, #8]
   27f54:	str	ip, [sp]
   27f58:	bl	27f60 <_obstack_memory_used@@Base+0x3674>
   27f5c:	bl	12038 <abort@plt>
   27f60:	push	{r4, r5, r6, r7, fp, lr}
   27f64:	add	fp, sp, #16
   27f68:	sub	sp, sp, #16
   27f6c:	sub	r0, r0, #1
   27f70:	cmp	r0, #4
   27f74:	bcs	27ff4 <_obstack_memory_used@@Base+0x3708>
   27f78:	mov	r5, r1
   27f7c:	movw	r1, #56192	; 0xdb80
   27f80:	ldr	r4, [fp, #12]
   27f84:	ldr	r6, [fp, #8]
   27f88:	movt	r1, #2
   27f8c:	cmn	r5, #1
   27f90:	ldr	r1, [r1, r0, lsl #2]
   27f94:	ble	27fa8 <_obstack_memory_used@@Base+0x36bc>
   27f98:	ldr	r7, [r3, r5, lsl #4]
   27f9c:	movw	r5, #56096	; 0xdb20
   27fa0:	movt	r5, #2
   27fa4:	b	27fc4 <_obstack_memory_used@@Base+0x36d8>
   27fa8:	mov	r0, #0
   27fac:	add	r7, sp, #14
   27fb0:	strb	r0, [sp, #15]
   27fb4:	movw	r0, #56096	; 0xdb20
   27fb8:	strb	r2, [sp, #14]
   27fbc:	movt	r0, #2
   27fc0:	sub	r5, r0, r5
   27fc4:	mov	r0, #0
   27fc8:	mov	r2, #5
   27fcc:	bl	11ca8 <dcgettext@plt>
   27fd0:	mov	r2, r0
   27fd4:	mov	r0, r4
   27fd8:	mov	r1, #0
   27fdc:	mov	r3, r5
   27fe0:	str	r7, [sp]
   27fe4:	str	r6, [sp, #4]
   27fe8:	bl	11da4 <error@plt>
   27fec:	sub	sp, fp, #16
   27ff0:	pop	{r4, r5, r6, r7, fp, pc}
   27ff4:	bl	12038 <abort@plt>
   27ff8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   27ffc:	add	fp, sp, #28
   28000:	sub	sp, sp, #44	; 0x2c
   28004:	cmp	r2, #37	; 0x25
   28008:	bcs	28c78 <_obstack_memory_used@@Base+0x438c>
   2800c:	ldr	sl, [fp, #8]
   28010:	mov	r6, r2
   28014:	mov	r7, r1
   28018:	mov	r4, r0
   2801c:	str	r3, [sp, #36]	; 0x24
   28020:	bl	11ed0 <__errno_location@plt>
   28024:	mov	r5, r0
   28028:	mov	r0, #0
   2802c:	str	r0, [r5]
   28030:	bl	11e64 <__ctype_b_loc@plt>
   28034:	ldr	r1, [r0]
   28038:	mov	r2, r4
   2803c:	ldrb	r0, [r2], #1
   28040:	add	r3, r1, r0, lsl #1
   28044:	ldrb	r3, [r3, #1]
   28048:	tst	r3, #32
   2804c:	bne	2803c <_obstack_memory_used@@Base+0x3750>
   28050:	cmp	r7, #0
   28054:	sub	r9, fp, #32
   28058:	mov	r8, #4
   2805c:	movne	r9, r7
   28060:	cmp	r0, #45	; 0x2d
   28064:	beq	28c6c <_obstack_memory_used@@Base+0x4380>
   28068:	mov	r0, r4
   2806c:	mov	r1, r9
   28070:	mov	r2, r6
   28074:	mov	r3, #0
   28078:	bl	11c6c <__strtoull_internal@plt>
   2807c:	mov	r7, r1
   28080:	ldr	r1, [r9]
   28084:	cmp	r1, r4
   28088:	beq	280b4 <_obstack_memory_used@@Base+0x37c8>
   2808c:	mov	r6, r0
   28090:	ldr	r0, [r5]
   28094:	cmp	r0, #0
   28098:	beq	280f0 <_obstack_memory_used@@Base+0x3804>
   2809c:	cmp	r0, #34	; 0x22
   280a0:	bne	28c6c <_obstack_memory_used@@Base+0x4380>
   280a4:	mov	r8, #1
   280a8:	cmp	sl, #0
   280ac:	bne	280fc <_obstack_memory_used@@Base+0x3810>
   280b0:	b	28c64 <_obstack_memory_used@@Base+0x4378>
   280b4:	cmp	sl, #0
   280b8:	beq	28c6c <_obstack_memory_used@@Base+0x4380>
   280bc:	mov	r5, r1
   280c0:	ldrb	r1, [r4]
   280c4:	cmp	r1, #0
   280c8:	beq	28c6c <_obstack_memory_used@@Base+0x4380>
   280cc:	mov	r0, sl
   280d0:	bl	11eb8 <strchr@plt>
   280d4:	cmp	r0, #0
   280d8:	beq	28c6c <_obstack_memory_used@@Base+0x4380>
   280dc:	mov	r1, r5
   280e0:	mov	r8, #0
   280e4:	mov	r6, #1
   280e8:	mov	r7, #0
   280ec:	b	280fc <_obstack_memory_used@@Base+0x3810>
   280f0:	mov	r8, r0
   280f4:	cmp	sl, #0
   280f8:	beq	28c64 <_obstack_memory_used@@Base+0x4378>
   280fc:	ldrb	r4, [r1]
   28100:	cmp	r4, #0
   28104:	beq	28c64 <_obstack_memory_used@@Base+0x4378>
   28108:	str	r1, [sp, #32]
   2810c:	mov	r0, sl
   28110:	mov	r1, r4
   28114:	bl	11eb8 <strchr@plt>
   28118:	cmp	r0, #0
   2811c:	beq	283e4 <_obstack_memory_used@@Base+0x3af8>
   28120:	sub	r0, r4, #69	; 0x45
   28124:	mov	r1, #1
   28128:	mov	r3, #0
   2812c:	mov	r5, #1024	; 0x400
   28130:	cmp	r0, #47	; 0x2f
   28134:	str	r1, [sp, #28]
   28138:	bhi	2823c <_obstack_memory_used@@Base+0x3950>
   2813c:	add	r1, pc, #0
   28140:	ldr	pc, [r1, r0, lsl #2]
   28144:	andeq	r8, r2, r4, lsl #4
   28148:	andeq	r8, r2, ip, lsr r2
   2814c:	andeq	r8, r2, r4, lsl #4
   28150:	andeq	r8, r2, ip, lsr r2
   28154:	andeq	r8, r2, ip, lsr r2
   28158:	andeq	r8, r2, ip, lsr r2
   2815c:	andeq	r8, r2, r4, lsl #4
   28160:	andeq	r8, r2, ip, lsr r2
   28164:	andeq	r8, r2, r4, lsl #4
   28168:	andeq	r8, r2, ip, lsr r2
   2816c:	andeq	r8, r2, ip, lsr r2
   28170:	andeq	r8, r2, r4, lsl #4
   28174:	andeq	r8, r2, ip, lsr r2
   28178:	andeq	r8, r2, ip, lsr r2
   2817c:	andeq	r8, r2, ip, lsr r2
   28180:	andeq	r8, r2, r4, lsl #4
   28184:	andeq	r8, r2, ip, lsr r2
   28188:	andeq	r8, r2, ip, lsr r2
   2818c:	andeq	r8, r2, ip, lsr r2
   28190:	andeq	r8, r2, ip, lsr r2
   28194:	andeq	r8, r2, r4, lsl #4
   28198:	andeq	r8, r2, r4, lsl #4
   2819c:	andeq	r8, r2, ip, lsr r2
   281a0:	andeq	r8, r2, ip, lsr r2
   281a4:	andeq	r8, r2, ip, lsr r2
   281a8:	andeq	r8, r2, ip, lsr r2
   281ac:	andeq	r8, r2, ip, lsr r2
   281b0:	andeq	r8, r2, ip, lsr r2
   281b4:	andeq	r8, r2, ip, lsr r2
   281b8:	andeq	r8, r2, ip, lsr r2
   281bc:	andeq	r8, r2, ip, lsr r2
   281c0:	andeq	r8, r2, ip, lsr r2
   281c4:	andeq	r8, r2, ip, lsr r2
   281c8:	andeq	r8, r2, ip, lsr r2
   281cc:	andeq	r8, r2, r4, lsl #4
   281d0:	andeq	r8, r2, ip, lsr r2
   281d4:	andeq	r8, r2, ip, lsr r2
   281d8:	andeq	r8, r2, ip, lsr r2
   281dc:	andeq	r8, r2, r4, lsl #4
   281e0:	andeq	r8, r2, ip, lsr r2
   281e4:	andeq	r8, r2, r4, lsl #4
   281e8:	andeq	r8, r2, ip, lsr r2
   281ec:	andeq	r8, r2, ip, lsr r2
   281f0:	andeq	r8, r2, ip, lsr r2
   281f4:	andeq	r8, r2, ip, lsr r2
   281f8:	andeq	r8, r2, ip, lsr r2
   281fc:	andeq	r8, r2, ip, lsr r2
   28200:	andeq	r8, r2, r4, lsl #4
   28204:	mov	r0, sl
   28208:	mov	r1, #48	; 0x30
   2820c:	bl	11eb8 <strchr@plt>
   28210:	cmp	r0, #0
   28214:	beq	28238 <_obstack_memory_used@@Base+0x394c>
   28218:	ldr	r1, [sp, #32]
   2821c:	ldrb	r0, [r1, #1]
   28220:	cmp	r0, #66	; 0x42
   28224:	cmpne	r0, #68	; 0x44
   28228:	bne	283f0 <_obstack_memory_used@@Base+0x3b04>
   2822c:	mov	r5, #1000	; 0x3e8
   28230:	mov	r0, #2
   28234:	str	r0, [sp, #28]
   28238:	mov	r3, #0
   2823c:	sub	r0, r4, #66	; 0x42
   28240:	cmp	r0, #53	; 0x35
   28244:	bhi	283e4 <_obstack_memory_used@@Base+0x3af8>
   28248:	add	r1, pc, #0
   2824c:	ldr	pc, [r1, r0, lsl #2]
   28250:	andeq	r8, r2, ip, ror #14
   28254:	andeq	r8, r2, r4, ror #7
   28258:	andeq	r8, r2, r4, ror #7
   2825c:	muleq	r2, r4, r7
   28260:	andeq	r8, r2, r4, ror #7
   28264:	andeq	r8, r2, r8, lsr #6
   28268:	andeq	r8, r2, r4, ror #7
   2826c:	andeq	r8, r2, r4, ror #7
   28270:	andeq	r8, r2, r4, ror #7
   28274:	andeq	r8, r2, r4, lsl r4
   28278:	andeq	r8, r2, r4, ror #7
   2827c:	andeq	r8, r2, ip, asr r4
   28280:	andeq	r8, r2, r4, ror #7
   28284:	andeq	r8, r2, r4, ror #7
   28288:	andeq	r8, r2, ip, ror #17
   2828c:	andeq	r8, r2, r4, ror #7
   28290:	andeq	r8, r2, r4, ror #7
   28294:	andeq	r8, r2, r4, ror #7
   28298:	andeq	r8, r2, r8, ror #9
   2829c:	andeq	r8, r2, r4, ror #7
   282a0:	andeq	r8, r2, r4, ror #7
   282a4:	andeq	r8, r2, r4, ror #7
   282a8:	andeq	r8, r2, r4, ror #7
   282ac:	andeq	r8, r2, r4, lsl sl
   282b0:	ldrdeq	r8, [r2], -r0
   282b4:	andeq	r8, r2, r4, ror #7
   282b8:	andeq	r8, r2, r4, ror #7
   282bc:	andeq	r8, r2, r4, ror #7
   282c0:	andeq	r8, r2, r4, ror #7
   282c4:	andeq	r8, r2, r4, ror #7
   282c8:	andeq	r8, r2, r4, ror #7
   282cc:	andeq	r8, r2, r4, ror #7
   282d0:	andeq	r8, r2, ip, ror #23
   282d4:	andeq	r8, r2, r4, asr #24
   282d8:	andeq	r8, r2, r4, ror #7
   282dc:	andeq	r8, r2, r4, ror #7
   282e0:	andeq	r8, r2, r4, ror #7
   282e4:	andeq	r8, r2, r8, lsr #6
   282e8:	andeq	r8, r2, r4, ror #7
   282ec:	andeq	r8, r2, r4, ror #7
   282f0:	andeq	r8, r2, r4, ror #7
   282f4:	andeq	r8, r2, r4, lsl r4
   282f8:	andeq	r8, r2, r4, ror #7
   282fc:	andeq	r8, r2, ip, asr r4
   28300:	andeq	r8, r2, r4, ror #7
   28304:	andeq	r8, r2, r4, ror #7
   28308:	andeq	r8, r2, r4, ror #7
   2830c:	andeq	r8, r2, r4, ror #7
   28310:	andeq	r8, r2, r4, ror #7
   28314:	andeq	r8, r2, r4, ror #7
   28318:	andeq	r8, r2, r8, ror #9
   2831c:	andeq	r8, r2, r4, ror #7
   28320:	andeq	r8, r2, r4, ror #7
   28324:	andeq	r8, r2, r0, lsr #24
   28328:	mvn	r0, #0
   2832c:	mvn	r1, #0
   28330:	mov	r2, r5
   28334:	mov	sl, r3
   28338:	bl	294d8 <_obstack_memory_used@@Base+0x4bec>
   2833c:	subs	r3, r0, r6
   28340:	umull	r4, r2, r6, r5
   28344:	mov	lr, #0
   28348:	str	r1, [sp, #20]
   2834c:	sbcs	r3, r1, r7
   28350:	movwcc	lr, #1
   28354:	mla	ip, r6, sl, r2
   28358:	mov	r2, r1
   2835c:	mov	r2, #0
   28360:	cmp	lr, #0
   28364:	mla	r7, r7, r5, ip
   28368:	mvnne	r4, #0
   2836c:	mvnne	r7, #0
   28370:	subs	r6, r0, r4
   28374:	sbcs	r6, r1, r7
   28378:	umull	r3, r6, r4, r5
   2837c:	movwcc	r2, #1
   28380:	cmp	r2, #0
   28384:	mvnne	r3, #0
   28388:	cmp	r2, #0
   2838c:	str	r6, [sp, #16]
   28390:	umull	r6, ip, r3, r5
   28394:	mla	r1, r3, sl, ip
   28398:	ldr	ip, [sp, #16]
   2839c:	str	r1, [sp, #12]
   283a0:	mla	r4, r4, sl, ip
   283a4:	mla	r4, r7, r5, r4
   283a8:	mvnne	r4, #0
   283ac:	subs	r0, r0, r3
   283b0:	ldr	r0, [sp, #20]
   283b4:	ldr	r7, [sp, #12]
   283b8:	sbcs	r0, r0, r4
   283bc:	mov	r0, #0
   283c0:	mla	r7, r4, r5, r7
   283c4:	movwcc	r0, #1
   283c8:	cmp	r0, #0
   283cc:	mov	r1, r0
   283d0:	orr	r0, lr, r2
   283d4:	mvnne	r7, #0
   283d8:	mvnne	r6, #0
   283dc:	orr	r3, r0, r1
   283e0:	b	28c44 <_obstack_memory_used@@Base+0x4358>
   283e4:	ldr	r0, [sp, #36]	; 0x24
   283e8:	orr	r8, r8, #2
   283ec:	b	28c68 <_obstack_memory_used@@Base+0x437c>
   283f0:	cmp	r0, #105	; 0x69
   283f4:	mov	r3, #0
   283f8:	bne	2823c <_obstack_memory_used@@Base+0x3950>
   283fc:	ldrb	r0, [r1, #2]
   28400:	mov	r1, #1
   28404:	cmp	r0, #66	; 0x42
   28408:	movweq	r1, #3
   2840c:	str	r1, [sp, #28]
   28410:	b	2823c <_obstack_memory_used@@Base+0x3950>
   28414:	mvn	r0, #0
   28418:	mvn	r1, #0
   2841c:	mov	r2, r5
   28420:	mov	r4, r3
   28424:	bl	294d8 <_obstack_memory_used@@Base+0x4bec>
   28428:	subs	r0, r0, r6
   2842c:	mov	r2, #0
   28430:	sbcs	r0, r1, r7
   28434:	umull	r0, r1, r6, r5
   28438:	movwcc	r2, #1
   2843c:	cmp	r2, #0
   28440:	mla	r1, r6, r4, r1
   28444:	mov	r3, r2
   28448:	mvnne	r0, #0
   2844c:	mla	r7, r7, r5, r1
   28450:	mvnne	r7, #0
   28454:	mov	r6, r0
   28458:	b	28c44 <_obstack_memory_used@@Base+0x4358>
   2845c:	mvn	r0, #0
   28460:	mvn	r1, #0
   28464:	mov	r2, r5
   28468:	str	r3, [sp, #24]
   2846c:	bl	294d8 <_obstack_memory_used@@Base+0x4bec>
   28470:	subs	r3, r0, r6
   28474:	mov	ip, r0
   28478:	umull	r4, r0, r6, r5
   2847c:	mov	sl, #0
   28480:	sbcs	r3, r1, r7
   28484:	mov	r3, #0
   28488:	movwcc	r3, #1
   2848c:	cmp	r3, #0
   28490:	str	r0, [sp, #20]
   28494:	ldr	r0, [sp, #24]
   28498:	mvnne	r4, #0
   2849c:	cmp	r3, #0
   284a0:	umull	lr, r2, r4, r5
   284a4:	mla	r2, r4, r0, r2
   284a8:	str	r2, [sp, #16]
   284ac:	ldr	r2, [sp, #20]
   284b0:	mla	r6, r6, r0, r2
   284b4:	ldr	r0, [sp, #16]
   284b8:	mla	r6, r7, r5, r6
   284bc:	mvnne	r6, #0
   284c0:	mla	r7, r6, r5, r0
   284c4:	subs	r0, ip, r4
   284c8:	sbcs	r0, r1, r6
   284cc:	movwcc	sl, #1
   284d0:	cmp	sl, #0
   284d4:	orr	r3, r3, sl
   284d8:	mvnne	lr, #0
   284dc:	mvnne	r7, #0
   284e0:	mov	r6, lr
   284e4:	b	28c44 <_obstack_memory_used@@Base+0x4358>
   284e8:	mvn	r0, #0
   284ec:	mvn	r1, #0
   284f0:	mov	r2, r5
   284f4:	mov	sl, r3
   284f8:	bl	294d8 <_obstack_memory_used@@Base+0x4bec>
   284fc:	subs	r3, r0, r6
   28500:	mov	ip, r1
   28504:	umull	r2, lr, r6, r5
   28508:	str	r0, [sp, #20]
   2850c:	sbcs	r3, r1, r7
   28510:	mov	r1, #0
   28514:	str	ip, [sp, #16]
   28518:	movwcc	r1, #1
   2851c:	mla	r6, r6, sl, lr
   28520:	mov	lr, #0
   28524:	cmp	r1, #0
   28528:	mla	r7, r7, r5, r6
   2852c:	mvnne	r2, #0
   28530:	cmp	r1, #0
   28534:	umull	r3, r4, r2, r5
   28538:	mvnne	r7, #0
   2853c:	mla	r4, r2, sl, r4
   28540:	subs	r2, r0, r2
   28544:	sbcs	r2, ip, r7
   28548:	mla	r4, r7, r5, r4
   2854c:	mov	r2, #0
   28550:	movwcc	lr, #1
   28554:	cmp	lr, #0
   28558:	mvnne	r3, #0
   2855c:	mvnne	r4, #0
   28560:	subs	r7, r0, r3
   28564:	mov	r0, r5
   28568:	sbcs	r7, ip, r4
   2856c:	umull	r5, r7, r3, r5
   28570:	movwcc	r2, #1
   28574:	cmp	r2, #0
   28578:	mla	r3, r3, sl, r7
   2857c:	mvnne	r5, #0
   28580:	cmp	r2, #0
   28584:	mla	r3, r4, r0, r3
   28588:	umull	r6, ip, r5, r0
   2858c:	mvnne	r3, #0
   28590:	mla	ip, r5, sl, ip
   28594:	mla	r7, r3, r0, ip
   28598:	ldr	r0, [sp, #20]
   2859c:	subs	r0, r0, r5
   285a0:	ldr	r0, [sp, #16]
   285a4:	sbcs	r0, r0, r3
   285a8:	mov	r0, #0
   285ac:	movwcc	r0, #1
   285b0:	cmp	r0, #0
   285b4:	mov	r3, r0
   285b8:	orr	r0, r1, lr
   285bc:	orr	r0, r0, r2
   285c0:	mvnne	r7, #0
   285c4:	mvnne	r6, #0
   285c8:	orr	r3, r0, r3
   285cc:	b	28c44 <_obstack_memory_used@@Base+0x4358>
   285d0:	mvn	r0, #0
   285d4:	mvn	r1, #0
   285d8:	mov	r2, r5
   285dc:	mov	r4, r3
   285e0:	str	r3, [sp, #24]
   285e4:	bl	294d8 <_obstack_memory_used@@Base+0x4bec>
   285e8:	umull	r3, r2, r6, r5
   285ec:	mla	r2, r6, r4, r2
   285f0:	subs	r6, r0, r6
   285f4:	sbcs	r6, r1, r7
   285f8:	mov	r6, #0
   285fc:	mla	ip, r7, r5, r2
   28600:	ldr	r2, [sp, #24]
   28604:	movwcc	r6, #1
   28608:	cmp	r6, #0
   2860c:	str	r6, [sp, #20]
   28610:	mov	r6, #0
   28614:	mvnne	r3, #0
   28618:	mvnne	ip, #0
   2861c:	subs	r4, r0, r3
   28620:	umull	r7, lr, r3, r5
   28624:	sbcs	r4, r1, ip
   28628:	movwcc	r6, #1
   2862c:	mla	r3, r3, r2, lr
   28630:	cmp	r6, #0
   28634:	str	r6, [sp, #16]
   28638:	mvnne	r7, #0
   2863c:	cmp	r6, #0
   28640:	umull	sl, r4, r7, r5
   28644:	mla	r4, r7, r2, r4
   28648:	mla	r2, ip, r5, r3
   2864c:	mvnne	r2, #0
   28650:	subs	r3, r0, r7
   28654:	mov	ip, #0
   28658:	mla	r6, r2, r5, r4
   2865c:	sbcs	r2, r1, r2
   28660:	mov	r4, r0
   28664:	mov	r0, #0
   28668:	movwcc	r0, #1
   2866c:	mov	r3, r4
   28670:	cmp	r0, #0
   28674:	str	r0, [sp, #12]
   28678:	mov	r0, r1
   2867c:	str	r3, [sp, #4]
   28680:	mvnne	sl, #0
   28684:	mvnne	r6, #0
   28688:	str	r0, [sp, #8]
   2868c:	subs	r2, r4, sl
   28690:	ldr	r4, [sp, #24]
   28694:	sbcs	r2, r1, r6
   28698:	umull	r7, r2, sl, r5
   2869c:	movwcc	ip, #1
   286a0:	cmp	ip, #0
   286a4:	mvnne	r7, #0
   286a8:	mla	r2, sl, r4, r2
   286ac:	cmp	ip, #0
   286b0:	mov	sl, #0
   286b4:	umull	r1, lr, r7, r5
   286b8:	mla	r2, r6, r5, r2
   286bc:	mvnne	r2, #0
   286c0:	subs	r6, r3, r7
   286c4:	mla	lr, r7, r4, lr
   286c8:	mla	lr, r2, r5, lr
   286cc:	sbcs	r2, r0, r2
   286d0:	mov	r2, #0
   286d4:	movwcc	sl, #1
   286d8:	cmp	sl, #0
   286dc:	mvnne	r1, #0
   286e0:	mvnne	lr, #0
   286e4:	subs	r6, r3, r1
   286e8:	ldr	r3, [sp, #24]
   286ec:	sbcs	r6, r0, lr
   286f0:	umull	r0, r7, r1, r5
   286f4:	movwcc	r2, #1
   286f8:	cmp	r2, #0
   286fc:	mvnne	r0, #0
   28700:	mla	r1, r1, r3, r7
   28704:	cmp	r2, #0
   28708:	umull	r6, r4, r0, r5
   2870c:	mla	r1, lr, r5, r1
   28710:	mvnne	r1, #0
   28714:	mla	r4, r0, r3, r4
   28718:	ldr	r3, [sp, #4]
   2871c:	mla	r7, r1, r5, r4
   28720:	ldr	r5, [sp, #16]
   28724:	subs	r0, r3, r0
   28728:	ldr	r0, [sp, #8]
   2872c:	sbcs	r0, r0, r1
   28730:	mov	r0, #0
   28734:	movwcc	r0, #1
   28738:	cmp	r0, #0
   2873c:	mov	r1, r0
   28740:	ldr	r0, [sp, #20]
   28744:	mvnne	r7, #0
   28748:	mvnne	r6, #0
   2874c:	orr	r0, r0, r5
   28750:	ldr	r5, [sp, #12]
   28754:	orr	r0, r0, r5
   28758:	orr	r0, r0, ip
   2875c:	orr	r0, r0, sl
   28760:	orr	r0, r0, r2
   28764:	orr	r0, r0, r1
   28768:	b	28be4 <_obstack_memory_used@@Base+0x42f8>
   2876c:	mov	r1, #0
   28770:	lsl	r2, r7, #10
   28774:	lsl	r0, r6, #10
   28778:	lsr	r3, r7, #22
   2877c:	cmp	r1, r7, lsr #22
   28780:	orr	r2, r2, r6, lsr #22
   28784:	mvnne	r0, #0
   28788:	movwne	r3, #1
   2878c:	cmp	r1, r7, lsr #22
   28790:	b	28c10 <_obstack_memory_used@@Base+0x4324>
   28794:	mvn	r0, #0
   28798:	mvn	r1, #0
   2879c:	mov	r2, r5
   287a0:	mov	sl, r3
   287a4:	bl	294d8 <_obstack_memory_used@@Base+0x4bec>
   287a8:	subs	r2, r0, r6
   287ac:	mov	ip, r0
   287b0:	mov	r0, #0
   287b4:	sbcs	r2, r1, r7
   287b8:	umull	r4, r2, r6, r5
   287bc:	movwcc	r0, #1
   287c0:	cmp	r0, #0
   287c4:	mla	r2, r6, sl, r2
   287c8:	str	r0, [sp, #20]
   287cc:	mvnne	r4, #0
   287d0:	cmp	r0, #0
   287d4:	mla	r2, r7, r5, r2
   287d8:	mov	r0, #0
   287dc:	umull	lr, r3, r4, r5
   287e0:	mvnne	r2, #0
   287e4:	mla	r3, r4, sl, r3
   287e8:	mla	r6, r2, r5, r3
   287ec:	subs	r3, ip, r4
   287f0:	mov	r3, r1
   287f4:	sbcs	r2, r1, r2
   287f8:	str	r3, [sp, #8]
   287fc:	movwcc	r0, #1
   28800:	cmp	r0, #0
   28804:	str	r0, [sp, #16]
   28808:	mov	r0, ip
   2880c:	mvnne	lr, #0
   28810:	mvnne	r6, #0
   28814:	str	r0, [sp, #12]
   28818:	subs	r2, ip, lr
   2881c:	umull	r7, r4, lr, r5
   28820:	sbcs	r2, r1, r6
   28824:	mov	r2, #0
   28828:	movwcc	r2, #1
   2882c:	mla	r4, lr, sl, r4
   28830:	cmp	r2, #0
   28834:	mla	r6, r6, r5, r4
   28838:	mov	r4, #0
   2883c:	mvnne	r7, #0
   28840:	cmp	r2, #0
   28844:	umull	r1, ip, r7, r5
   28848:	mvnne	r6, #0
   2884c:	mla	ip, r7, sl, ip
   28850:	subs	r7, r0, r7
   28854:	sbcs	r7, r3, r6
   28858:	mla	lr, r6, r5, ip
   2885c:	mov	ip, #0
   28860:	movwcc	ip, #1
   28864:	cmp	ip, #0
   28868:	mvnne	r1, #0
   2886c:	mvnne	lr, #0
   28870:	subs	r7, r0, r1
   28874:	sbcs	r7, r3, lr
   28878:	umull	r0, r7, r1, r5
   2887c:	movwcc	r4, #1
   28880:	cmp	r4, #0
   28884:	mla	r1, r1, sl, r7
   28888:	mvnne	r0, #0
   2888c:	cmp	r4, #0
   28890:	mla	r1, lr, r5, r1
   28894:	umull	r6, r3, r0, r5
   28898:	mvnne	r1, #0
   2889c:	mla	r3, r0, sl, r3
   288a0:	mla	r7, r1, r5, r3
   288a4:	ldr	r3, [sp, #12]
   288a8:	subs	r0, r3, r0
   288ac:	ldr	r0, [sp, #8]
   288b0:	ldr	r3, [sp, #16]
   288b4:	sbcs	r0, r0, r1
   288b8:	mov	r0, #0
   288bc:	movwcc	r0, #1
   288c0:	cmp	r0, #0
   288c4:	mov	r1, r0
   288c8:	ldr	r0, [sp, #20]
   288cc:	mvnne	r7, #0
   288d0:	mvnne	r6, #0
   288d4:	orr	r0, r0, r3
   288d8:	orr	r0, r0, r2
   288dc:	orr	r0, r0, ip
   288e0:	orr	r0, r0, r4
   288e4:	orr	r3, r0, r1
   288e8:	b	28c44 <_obstack_memory_used@@Base+0x4358>
   288ec:	mvn	r0, #0
   288f0:	mvn	r1, #0
   288f4:	mov	r2, r5
   288f8:	mov	sl, r3
   288fc:	bl	294d8 <_obstack_memory_used@@Base+0x4bec>
   28900:	umull	r3, r2, r6, r5
   28904:	mov	lr, r1
   28908:	mov	r1, r0
   2890c:	mla	r2, r6, sl, r2
   28910:	subs	r6, r0, r6
   28914:	mov	r0, #0
   28918:	sbcs	r6, lr, r7
   2891c:	mla	r2, r7, r5, r2
   28920:	movwcc	r0, #1
   28924:	cmp	r0, #0
   28928:	str	r0, [sp, #20]
   2892c:	mov	r0, r1
   28930:	mvnne	r3, #0
   28934:	mvnne	r2, #0
   28938:	str	r0, [sp, #16]
   2893c:	subs	r4, r1, r3
   28940:	umull	r7, ip, r3, r5
   28944:	sbcs	r4, lr, r2
   28948:	mov	r4, #0
   2894c:	movwcc	r4, #1
   28950:	mla	r3, r3, sl, ip
   28954:	mov	ip, #0
   28958:	cmp	r4, #0
   2895c:	mla	r2, r2, r5, r3
   28960:	mvnne	r7, #0
   28964:	cmp	r4, #0
   28968:	umull	r1, r6, r7, r5
   2896c:	mvnne	r2, #0
   28970:	mla	r6, r7, sl, r6
   28974:	mla	r3, r2, r5, r6
   28978:	subs	r6, r0, r7
   2897c:	sbcs	r2, lr, r2
   28980:	mov	r2, #0
   28984:	movwcc	ip, #1
   28988:	cmp	ip, #0
   2898c:	mvnne	r1, #0
   28990:	mvnne	r3, #0
   28994:	subs	r6, r0, r1
   28998:	sbcs	r6, lr, r3
   2899c:	umull	r0, r6, r1, r5
   289a0:	movwcc	r2, #1
   289a4:	cmp	r2, #0
   289a8:	mvnne	r0, #0
   289ac:	cmp	r2, #0
   289b0:	str	r6, [sp, #12]
   289b4:	umull	r6, r7, r0, r5
   289b8:	mla	r7, r0, sl, r7
   289bc:	str	r7, [sp, #8]
   289c0:	ldr	r7, [sp, #12]
   289c4:	mla	r1, r1, sl, r7
   289c8:	mla	r1, r3, r5, r1
   289cc:	ldr	r3, [sp, #8]
   289d0:	mvnne	r1, #0
   289d4:	mla	r7, r1, r5, r3
   289d8:	ldr	r3, [sp, #16]
   289dc:	subs	r0, r3, r0
   289e0:	sbcs	r0, lr, r1
   289e4:	mov	r0, #0
   289e8:	movwcc	r0, #1
   289ec:	cmp	r0, #0
   289f0:	mov	r1, r0
   289f4:	ldr	r0, [sp, #20]
   289f8:	mvnne	r7, #0
   289fc:	mvnne	r6, #0
   28a00:	orr	r0, r0, r4
   28a04:	orr	r0, r0, ip
   28a08:	orr	r0, r0, r2
   28a0c:	orr	r3, r0, r1
   28a10:	b	28c44 <_obstack_memory_used@@Base+0x4358>
   28a14:	mvn	r0, #0
   28a18:	mvn	r1, #0
   28a1c:	mov	r2, r5
   28a20:	mov	sl, r3
   28a24:	bl	294d8 <_obstack_memory_used@@Base+0x4bec>
   28a28:	mov	lr, r0
   28a2c:	subs	r0, r0, r6
   28a30:	mov	r2, #0
   28a34:	mov	ip, r1
   28a38:	str	sl, [sp, #24]
   28a3c:	sbcs	r0, r1, r7
   28a40:	umull	r3, r1, r6, r5
   28a44:	str	lr, [sp, #4]
   28a48:	movwcc	r2, #1
   28a4c:	cmp	r2, #0
   28a50:	mla	r6, r6, sl, r1
   28a54:	mov	r1, #0
   28a58:	str	r2, [sp, #20]
   28a5c:	mvnne	r3, #0
   28a60:	cmp	r2, #0
   28a64:	mla	r7, r7, r5, r6
   28a68:	mov	r2, #0
   28a6c:	umull	r0, r4, r3, r5
   28a70:	mvnne	r7, #0
   28a74:	mla	r4, r3, sl, r4
   28a78:	subs	r3, lr, r3
   28a7c:	sbcs	r3, ip, r7
   28a80:	mla	r4, r7, r5, r4
   28a84:	movwcc	r1, #1
   28a88:	cmp	r1, #0
   28a8c:	str	r1, [sp, #16]
   28a90:	mvnne	r0, #0
   28a94:	mvnne	r4, #0
   28a98:	subs	r3, lr, r0
   28a9c:	sbcs	r3, ip, r4
   28aa0:	umull	r6, r3, r0, r5
   28aa4:	movwcc	r2, #1
   28aa8:	cmp	r2, #0
   28aac:	mla	r0, r0, sl, r3
   28ab0:	str	r2, [sp, #12]
   28ab4:	mvnne	r6, #0
   28ab8:	cmp	r2, #0
   28abc:	mla	r0, r4, r5, r0
   28ac0:	ldr	r4, [sp, #24]
   28ac4:	umull	r1, r7, r6, r5
   28ac8:	mvnne	r0, #0
   28acc:	subs	r3, lr, r6
   28ad0:	mov	r3, ip
   28ad4:	str	r3, [sp]
   28ad8:	mla	r7, r6, sl, r7
   28adc:	mla	r7, r0, r5, r7
   28ae0:	sbcs	r0, ip, r0
   28ae4:	mov	r0, #0
   28ae8:	movwcc	r0, #1
   28aec:	cmp	r0, #0
   28af0:	str	r0, [sp, #8]
   28af4:	mvnne	r1, #0
   28af8:	mvnne	r7, #0
   28afc:	subs	r0, lr, r1
   28b00:	sbcs	r0, ip, r7
   28b04:	mov	ip, #0
   28b08:	umull	r6, r0, r1, r5
   28b0c:	movwcc	ip, #1
   28b10:	cmp	ip, #0
   28b14:	mla	r1, r1, r4, r0
   28b18:	mov	r0, lr
   28b1c:	mvnne	r6, #0
   28b20:	cmp	ip, #0
   28b24:	mla	r1, r7, r5, r1
   28b28:	umull	r2, sl, r6, r5
   28b2c:	mvnne	r1, #0
   28b30:	mla	sl, r6, r4, sl
   28b34:	subs	r6, lr, r6
   28b38:	mov	lr, #0
   28b3c:	mla	r7, r1, r5, sl
   28b40:	sbcs	r1, r3, r1
   28b44:	ldr	r1, [sp, #24]
   28b48:	movwcc	lr, #1
   28b4c:	cmp	lr, #0
   28b50:	mvnne	r2, #0
   28b54:	mvnne	r7, #0
   28b58:	subs	r6, r0, r2
   28b5c:	umull	r0, sl, r2, r5
   28b60:	sbcs	r6, r3, r7
   28b64:	mov	r3, #0
   28b68:	movwcc	r3, #1
   28b6c:	mla	r2, r2, r1, sl
   28b70:	cmp	r3, #0
   28b74:	mla	r2, r7, r5, r2
   28b78:	mvnne	r0, #0
   28b7c:	cmp	r3, #0
   28b80:	umull	r6, r4, r0, r5
   28b84:	mvnne	r2, #0
   28b88:	mla	r4, r0, r1, r4
   28b8c:	ldr	r1, [sp, #4]
   28b90:	mla	r7, r2, r5, r4
   28b94:	ldr	r5, [sp, #16]
   28b98:	subs	r0, r1, r0
   28b9c:	ldr	r0, [sp]
   28ba0:	sbcs	r0, r0, r2
   28ba4:	mov	r0, #0
   28ba8:	movwcc	r0, #1
   28bac:	cmp	r0, #0
   28bb0:	mov	r2, r0
   28bb4:	ldr	r0, [sp, #20]
   28bb8:	mvnne	r7, #0
   28bbc:	mvnne	r6, #0
   28bc0:	orr	r0, r0, r5
   28bc4:	ldr	r5, [sp, #12]
   28bc8:	orr	r0, r0, r5
   28bcc:	ldr	r5, [sp, #8]
   28bd0:	orr	r0, r0, r5
   28bd4:	orr	r0, r0, ip
   28bd8:	orr	r0, r0, lr
   28bdc:	orr	r0, r0, r3
   28be0:	orr	r0, r0, r2
   28be4:	and	r3, r0, #1
   28be8:	b	28c44 <_obstack_memory_used@@Base+0x4358>
   28bec:	mov	r1, #0
   28bf0:	lsl	r2, r7, #9
   28bf4:	lsl	r0, r6, #9
   28bf8:	lsr	r3, r7, #23
   28bfc:	cmp	r1, r7, lsr #23
   28c00:	orr	r2, r2, r6, lsr #23
   28c04:	mvnne	r0, #0
   28c08:	movwne	r3, #1
   28c0c:	cmp	r1, r7, lsr #23
   28c10:	mvnne	r2, #0
   28c14:	mov	r6, r0
   28c18:	mov	r7, r2
   28c1c:	b	28c44 <_obstack_memory_used@@Base+0x4358>
   28c20:	lsl	r1, r7, #1
   28c24:	cmp	r7, #0
   28c28:	lsl	r0, r6, #1
   28c2c:	lsr	r3, r7, #31
   28c30:	orr	r1, r1, r6, lsr #31
   28c34:	mvnmi	r0, #0
   28c38:	mvnmi	r1, #0
   28c3c:	mov	r6, r0
   28c40:	mov	r7, r1
   28c44:	ldr	r1, [sp, #32]
   28c48:	ldr	r2, [sp, #28]
   28c4c:	orr	r8, r3, r8
   28c50:	add	r0, r1, r2
   28c54:	str	r0, [r9]
   28c58:	ldrb	r0, [r1, r2]
   28c5c:	cmp	r0, #0
   28c60:	orrne	r8, r8, #2
   28c64:	ldr	r0, [sp, #36]	; 0x24
   28c68:	strd	r6, [r0]
   28c6c:	mov	r0, r8
   28c70:	sub	sp, fp, #28
   28c74:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   28c78:	movw	r0, #56208	; 0xdb90
   28c7c:	movw	r1, #56246	; 0xdbb6
   28c80:	movw	r3, #56262	; 0xdbc6
   28c84:	mov	r2, #85	; 0x55
   28c88:	movt	r0, #2
   28c8c:	movt	r1, #2
   28c90:	movt	r3, #2
   28c94:	bl	1208c <__assert_fail@plt>
   28c98:	clz	r2, r1
   28c9c:	clz	r3, r0
   28ca0:	lsr	r2, r2, #5
   28ca4:	lsr	r3, r3, #5
   28ca8:	orrs	r2, r3, r2
   28cac:	movwne	r1, #1
   28cb0:	movwne	r0, #1
   28cb4:	cmp	r1, #0
   28cb8:	beq	28ce8 <_obstack_memory_used@@Base+0x43fc>
   28cbc:	mvn	r2, #-2147483648	; 0x80000000
   28cc0:	udiv	r2, r2, r1
   28cc4:	cmp	r2, r0
   28cc8:	bcs	28ce8 <_obstack_memory_used@@Base+0x43fc>
   28ccc:	push	{fp, lr}
   28cd0:	mov	fp, sp
   28cd4:	bl	11ed0 <__errno_location@plt>
   28cd8:	mov	r1, #12
   28cdc:	str	r1, [r0]
   28ce0:	mov	r0, #0
   28ce4:	pop	{fp, pc}
   28ce8:	b	11b88 <calloc@plt>
   28cec:	cmp	r0, #0
   28cf0:	movweq	r0, #1
   28cf4:	cmn	r0, #1
   28cf8:	ble	28d00 <_obstack_memory_used@@Base+0x4414>
   28cfc:	b	11df8 <malloc@plt>
   28d00:	push	{fp, lr}
   28d04:	mov	fp, sp
   28d08:	bl	11ed0 <__errno_location@plt>
   28d0c:	mov	r1, #12
   28d10:	str	r1, [r0]
   28d14:	mov	r0, #0
   28d18:	pop	{fp, pc}
   28d1c:	push	{fp, lr}
   28d20:	mov	fp, sp
   28d24:	cmp	r0, #0
   28d28:	beq	28d44 <_obstack_memory_used@@Base+0x4458>
   28d2c:	cmp	r1, #0
   28d30:	beq	28d50 <_obstack_memory_used@@Base+0x4464>
   28d34:	cmn	r1, #1
   28d38:	ble	28d5c <_obstack_memory_used@@Base+0x4470>
   28d3c:	pop	{fp, lr}
   28d40:	b	11cb4 <realloc@plt>
   28d44:	mov	r0, r1
   28d48:	pop	{fp, lr}
   28d4c:	b	28cec <_obstack_memory_used@@Base+0x4400>
   28d50:	bl	1f89c <__assert_fail@plt+0xd810>
   28d54:	mov	r0, #0
   28d58:	pop	{fp, pc}
   28d5c:	bl	11ed0 <__errno_location@plt>
   28d60:	mov	r1, #12
   28d64:	str	r1, [r0]
   28d68:	mov	r0, #0
   28d6c:	pop	{fp, pc}
   28d70:	push	{r4, r5, r6, sl, fp, lr}
   28d74:	add	fp, sp, #16
   28d78:	mov	r4, r0
   28d7c:	bl	11d80 <__fpending@plt>
   28d80:	ldr	r6, [r4]
   28d84:	mov	r5, r0
   28d88:	mov	r0, r4
   28d8c:	bl	28df4 <_obstack_memory_used@@Base+0x4508>
   28d90:	tst	r6, #32
   28d94:	bne	28dcc <_obstack_memory_used@@Base+0x44e0>
   28d98:	cmp	r0, #0
   28d9c:	mov	r4, r0
   28da0:	mvnne	r4, #0
   28da4:	cmp	r5, #0
   28da8:	bne	28dd8 <_obstack_memory_used@@Base+0x44ec>
   28dac:	cmp	r0, #0
   28db0:	beq	28dd8 <_obstack_memory_used@@Base+0x44ec>
   28db4:	bl	11ed0 <__errno_location@plt>
   28db8:	ldr	r0, [r0]
   28dbc:	subs	r4, r0, #9
   28dc0:	mvnne	r4, #0
   28dc4:	mov	r0, r4
   28dc8:	pop	{r4, r5, r6, sl, fp, pc}
   28dcc:	mvn	r4, #0
   28dd0:	cmp	r0, #0
   28dd4:	beq	28de0 <_obstack_memory_used@@Base+0x44f4>
   28dd8:	mov	r0, r4
   28ddc:	pop	{r4, r5, r6, sl, fp, pc}
   28de0:	bl	11ed0 <__errno_location@plt>
   28de4:	mov	r1, #0
   28de8:	str	r1, [r0]
   28dec:	mov	r0, r4
   28df0:	pop	{r4, r5, r6, sl, fp, pc}
   28df4:	push	{r4, r5, r6, sl, fp, lr}
   28df8:	add	fp, sp, #16
   28dfc:	sub	sp, sp, #8
   28e00:	mov	r4, r0
   28e04:	bl	11f18 <fileno@plt>
   28e08:	cmn	r0, #1
   28e0c:	ble	28e80 <_obstack_memory_used@@Base+0x4594>
   28e10:	mov	r0, r4
   28e14:	bl	11e28 <__freading@plt>
   28e18:	cmp	r0, #0
   28e1c:	beq	28e48 <_obstack_memory_used@@Base+0x455c>
   28e20:	mov	r0, r4
   28e24:	bl	11f18 <fileno@plt>
   28e28:	mov	r1, #1
   28e2c:	mov	r2, #0
   28e30:	mov	r3, #0
   28e34:	str	r1, [sp]
   28e38:	bl	11d5c <lseek64@plt>
   28e3c:	and	r0, r0, r1
   28e40:	cmn	r0, #1
   28e44:	beq	28e80 <_obstack_memory_used@@Base+0x4594>
   28e48:	mov	r0, r4
   28e4c:	bl	28e90 <_obstack_memory_used@@Base+0x45a4>
   28e50:	cmp	r0, #0
   28e54:	beq	28e80 <_obstack_memory_used@@Base+0x4594>
   28e58:	bl	11ed0 <__errno_location@plt>
   28e5c:	ldr	r6, [r0]
   28e60:	mov	r5, r0
   28e64:	mov	r0, r4
   28e68:	bl	11f30 <fclose@plt>
   28e6c:	cmp	r6, #0
   28e70:	strne	r6, [r5]
   28e74:	mvnne	r0, #0
   28e78:	sub	sp, fp, #16
   28e7c:	pop	{r4, r5, r6, sl, fp, pc}
   28e80:	mov	r0, r4
   28e84:	sub	sp, fp, #16
   28e88:	pop	{r4, r5, r6, sl, fp, lr}
   28e8c:	b	11f30 <fclose@plt>
   28e90:	push	{r4, sl, fp, lr}
   28e94:	add	fp, sp, #8
   28e98:	sub	sp, sp, #8
   28e9c:	mov	r4, r0
   28ea0:	cmp	r0, #0
   28ea4:	beq	28edc <_obstack_memory_used@@Base+0x45f0>
   28ea8:	mov	r0, r4
   28eac:	bl	11e28 <__freading@plt>
   28eb0:	cmp	r0, #0
   28eb4:	beq	28edc <_obstack_memory_used@@Base+0x45f0>
   28eb8:	ldrb	r0, [r4, #1]
   28ebc:	tst	r0, #1
   28ec0:	beq	28edc <_obstack_memory_used@@Base+0x45f0>
   28ec4:	mov	r0, #1
   28ec8:	mov	r2, #0
   28ecc:	mov	r3, #0
   28ed0:	str	r0, [sp]
   28ed4:	mov	r0, r4
   28ed8:	bl	28eec <_obstack_memory_used@@Base+0x4600>
   28edc:	mov	r0, r4
   28ee0:	sub	sp, fp, #8
   28ee4:	pop	{r4, sl, fp, lr}
   28ee8:	b	11bf4 <fflush@plt>
   28eec:	push	{r4, r5, r6, r7, fp, lr}
   28ef0:	add	fp, sp, #16
   28ef4:	sub	sp, sp, #8
   28ef8:	mov	r4, r0
   28efc:	ldr	r0, [r0, #4]
   28f00:	mov	r5, r3
   28f04:	mov	r6, r2
   28f08:	ldr	r1, [r4, #8]
   28f0c:	cmp	r1, r0
   28f10:	bne	28f2c <_obstack_memory_used@@Base+0x4640>
   28f14:	ldrd	r0, [r4, #16]
   28f18:	cmp	r1, r0
   28f1c:	bne	28f2c <_obstack_memory_used@@Base+0x4640>
   28f20:	ldr	r0, [r4, #36]	; 0x24
   28f24:	cmp	r0, #0
   28f28:	beq	28f44 <_obstack_memory_used@@Base+0x4658>
   28f2c:	mov	r0, r4
   28f30:	mov	r2, r6
   28f34:	mov	r3, r5
   28f38:	sub	sp, fp, #16
   28f3c:	pop	{r4, r5, r6, r7, fp, lr}
   28f40:	b	11f3c <fseeko64@plt>
   28f44:	ldr	r7, [fp, #8]
   28f48:	mov	r0, r4
   28f4c:	bl	11f18 <fileno@plt>
   28f50:	mov	r2, r6
   28f54:	mov	r3, r5
   28f58:	str	r7, [sp]
   28f5c:	bl	11d5c <lseek64@plt>
   28f60:	and	r2, r0, r1
   28f64:	cmn	r2, #1
   28f68:	beq	28f88 <_obstack_memory_used@@Base+0x469c>
   28f6c:	strd	r0, [r4, #80]	; 0x50
   28f70:	ldr	r0, [r4]
   28f74:	bic	r0, r0, #16
   28f78:	str	r0, [r4]
   28f7c:	mov	r0, #0
   28f80:	sub	sp, fp, #16
   28f84:	pop	{r4, r5, r6, r7, fp, pc}
   28f88:	mvn	r0, #0
   28f8c:	sub	sp, fp, #16
   28f90:	pop	{r4, r5, r6, r7, fp, pc}
   28f94:	ldrb	r2, [r0]
   28f98:	cmp	r2, #0
   28f9c:	beq	28fc0 <_obstack_memory_used@@Base+0x46d4>
   28fa0:	add	r3, r0, #1
   28fa4:	mov	r0, #0
   28fa8:	ror	r0, r0, #23
   28fac:	uxtab	r0, r0, r2
   28fb0:	ldrb	r2, [r3], #1
   28fb4:	cmp	r2, #0
   28fb8:	bne	28fa8 <_obstack_memory_used@@Base+0x46bc>
   28fbc:	b	28fc4 <_obstack_memory_used@@Base+0x46d8>
   28fc0:	mov	r0, #0
   28fc4:	udiv	r2, r0, r1
   28fc8:	mls	r0, r2, r1, r0
   28fcc:	bx	lr
   28fd0:	push	{fp, lr}
   28fd4:	mov	fp, sp
   28fd8:	mov	r0, #14
   28fdc:	bl	11f9c <nl_langinfo@plt>
   28fe0:	movw	r1, #47938	; 0xbb42
   28fe4:	cmp	r0, #0
   28fe8:	movt	r1, #2
   28fec:	movne	r1, r0
   28ff0:	movw	r0, #56341	; 0xdc15
   28ff4:	ldrb	r2, [r1]
   28ff8:	movt	r0, #2
   28ffc:	cmp	r2, #0
   29000:	movne	r0, r1
   29004:	pop	{fp, pc}
   29008:	cmp	r2, #0
   2900c:	beq	2903c <_obstack_memory_used@@Base+0x4750>
   29010:	mvn	r3, #0
   29014:	udiv	r3, r3, r2
   29018:	cmp	r3, r1
   2901c:	bcs	2903c <_obstack_memory_used@@Base+0x4750>
   29020:	push	{fp, lr}
   29024:	mov	fp, sp
   29028:	bl	11ed0 <__errno_location@plt>
   2902c:	mov	r1, #12
   29030:	str	r1, [r0]
   29034:	mov	r0, #0
   29038:	pop	{fp, pc}
   2903c:	mul	r1, r2, r1
   29040:	b	28d1c <_obstack_memory_used@@Base+0x4430>
   29044:	eor	r1, r1, #-2147483648	; 0x80000000
   29048:	b	29050 <_obstack_memory_used@@Base+0x4764>
   2904c:	eor	r3, r3, #-2147483648	; 0x80000000
   29050:	push	{r4, r5, lr}
   29054:	lsl	r4, r1, #1
   29058:	lsl	r5, r3, #1
   2905c:	teq	r4, r5
   29060:	teqeq	r0, r2
   29064:	orrsne	ip, r4, r0
   29068:	orrsne	ip, r5, r2
   2906c:	mvnsne	ip, r4, asr #21
   29070:	mvnsne	ip, r5, asr #21
   29074:	beq	29260 <_obstack_memory_used@@Base+0x4974>
   29078:	lsr	r4, r4, #21
   2907c:	rsbs	r5, r4, r5, lsr #21
   29080:	rsblt	r5, r5, #0
   29084:	ble	290a4 <_obstack_memory_used@@Base+0x47b8>
   29088:	add	r4, r4, r5
   2908c:	eor	r2, r0, r2
   29090:	eor	r3, r1, r3
   29094:	eor	r0, r2, r0
   29098:	eor	r1, r3, r1
   2909c:	eor	r2, r0, r2
   290a0:	eor	r3, r1, r3
   290a4:	cmp	r5, #54	; 0x36
   290a8:	pophi	{r4, r5, pc}
   290ac:	tst	r1, #-2147483648	; 0x80000000
   290b0:	lsl	r1, r1, #12
   290b4:	mov	ip, #1048576	; 0x100000
   290b8:	orr	r1, ip, r1, lsr #12
   290bc:	beq	290c8 <_obstack_memory_used@@Base+0x47dc>
   290c0:	rsbs	r0, r0, #0
   290c4:	rsc	r1, r1, #0
   290c8:	tst	r3, #-2147483648	; 0x80000000
   290cc:	lsl	r3, r3, #12
   290d0:	orr	r3, ip, r3, lsr #12
   290d4:	beq	290e0 <_obstack_memory_used@@Base+0x47f4>
   290d8:	rsbs	r2, r2, #0
   290dc:	rsc	r3, r3, #0
   290e0:	teq	r4, r5
   290e4:	beq	29248 <_obstack_memory_used@@Base+0x495c>
   290e8:	sub	r4, r4, #1
   290ec:	rsbs	lr, r5, #32
   290f0:	blt	2910c <_obstack_memory_used@@Base+0x4820>
   290f4:	lsl	ip, r2, lr
   290f8:	adds	r0, r0, r2, lsr r5
   290fc:	adc	r1, r1, #0
   29100:	adds	r0, r0, r3, lsl lr
   29104:	adcs	r1, r1, r3, asr r5
   29108:	b	29128 <_obstack_memory_used@@Base+0x483c>
   2910c:	sub	r5, r5, #32
   29110:	add	lr, lr, #32
   29114:	cmp	r2, #1
   29118:	lsl	ip, r3, lr
   2911c:	orrcs	ip, ip, #2
   29120:	adds	r0, r0, r3, asr r5
   29124:	adcs	r1, r1, r3, asr #31
   29128:	and	r5, r1, #-2147483648	; 0x80000000
   2912c:	bpl	2913c <_obstack_memory_used@@Base+0x4850>
   29130:	rsbs	ip, ip, #0
   29134:	rscs	r0, r0, #0
   29138:	rsc	r1, r1, #0
   2913c:	cmp	r1, #1048576	; 0x100000
   29140:	bcc	29180 <_obstack_memory_used@@Base+0x4894>
   29144:	cmp	r1, #2097152	; 0x200000
   29148:	bcc	29168 <_obstack_memory_used@@Base+0x487c>
   2914c:	lsrs	r1, r1, #1
   29150:	rrxs	r0, r0
   29154:	rrx	ip, ip
   29158:	add	r4, r4, #1
   2915c:	lsl	r2, r4, #21
   29160:	cmn	r2, #4194304	; 0x400000
   29164:	bcs	292c0 <_obstack_memory_used@@Base+0x49d4>
   29168:	cmp	ip, #-2147483648	; 0x80000000
   2916c:	lsrseq	ip, r0, #1
   29170:	adcs	r0, r0, #0
   29174:	adc	r1, r1, r4, lsl #20
   29178:	orr	r1, r1, r5
   2917c:	pop	{r4, r5, pc}
   29180:	lsls	ip, ip, #1
   29184:	adcs	r0, r0, r0
   29188:	adc	r1, r1, r1
   2918c:	tst	r1, #1048576	; 0x100000
   29190:	sub	r4, r4, #1
   29194:	bne	29168 <_obstack_memory_used@@Base+0x487c>
   29198:	teq	r1, #0
   2919c:	moveq	r1, r0
   291a0:	moveq	r0, #0
   291a4:	clz	r3, r1
   291a8:	addeq	r3, r3, #32
   291ac:	sub	r3, r3, #11
   291b0:	subs	r2, r3, #32
   291b4:	bge	291d8 <_obstack_memory_used@@Base+0x48ec>
   291b8:	adds	r2, r2, #12
   291bc:	ble	291d4 <_obstack_memory_used@@Base+0x48e8>
   291c0:	add	ip, r2, #20
   291c4:	rsb	r2, r2, #12
   291c8:	lsl	r0, r1, ip
   291cc:	lsr	r1, r1, r2
   291d0:	b	291e8 <_obstack_memory_used@@Base+0x48fc>
   291d4:	add	r2, r2, #20
   291d8:	rsble	ip, r2, #32
   291dc:	lsl	r1, r1, r2
   291e0:	orrle	r1, r1, r0, lsr ip
   291e4:	lslle	r0, r0, r2
   291e8:	subs	r4, r4, r3
   291ec:	addge	r1, r1, r4, lsl #20
   291f0:	orrge	r1, r1, r5
   291f4:	popge	{r4, r5, pc}
   291f8:	mvn	r4, r4
   291fc:	subs	r4, r4, #31
   29200:	bge	2923c <_obstack_memory_used@@Base+0x4950>
   29204:	adds	r4, r4, #12
   29208:	bgt	29224 <_obstack_memory_used@@Base+0x4938>
   2920c:	add	r4, r4, #20
   29210:	rsb	r2, r4, #32
   29214:	lsr	r0, r0, r4
   29218:	orr	r0, r0, r1, lsl r2
   2921c:	orr	r1, r5, r1, lsr r4
   29220:	pop	{r4, r5, pc}
   29224:	rsb	r4, r4, #12
   29228:	rsb	r2, r4, #32
   2922c:	lsr	r0, r0, r2
   29230:	orr	r0, r0, r1, lsl r4
   29234:	mov	r1, r5
   29238:	pop	{r4, r5, pc}
   2923c:	lsr	r0, r1, r4
   29240:	mov	r1, r5
   29244:	pop	{r4, r5, pc}
   29248:	teq	r4, #0
   2924c:	eor	r3, r3, #1048576	; 0x100000
   29250:	eoreq	r1, r1, #1048576	; 0x100000
   29254:	addeq	r4, r4, #1
   29258:	subne	r5, r5, #1
   2925c:	b	290e8 <_obstack_memory_used@@Base+0x47fc>
   29260:	mvns	ip, r4, asr #21
   29264:	mvnsne	ip, r5, asr #21
   29268:	beq	292d0 <_obstack_memory_used@@Base+0x49e4>
   2926c:	teq	r4, r5
   29270:	teqeq	r0, r2
   29274:	beq	29288 <_obstack_memory_used@@Base+0x499c>
   29278:	orrs	ip, r4, r0
   2927c:	moveq	r1, r3
   29280:	moveq	r0, r2
   29284:	pop	{r4, r5, pc}
   29288:	teq	r1, r3
   2928c:	movne	r1, #0
   29290:	movne	r0, #0
   29294:	popne	{r4, r5, pc}
   29298:	lsrs	ip, r4, #21
   2929c:	bne	292b0 <_obstack_memory_used@@Base+0x49c4>
   292a0:	lsls	r0, r0, #1
   292a4:	adcs	r1, r1, r1
   292a8:	orrcs	r1, r1, #-2147483648	; 0x80000000
   292ac:	pop	{r4, r5, pc}
   292b0:	adds	r4, r4, #4194304	; 0x400000
   292b4:	addcc	r1, r1, #1048576	; 0x100000
   292b8:	popcc	{r4, r5, pc}
   292bc:	and	r5, r1, #-2147483648	; 0x80000000
   292c0:	orr	r1, r5, #2130706432	; 0x7f000000
   292c4:	orr	r1, r1, #15728640	; 0xf00000
   292c8:	mov	r0, #0
   292cc:	pop	{r4, r5, pc}
   292d0:	mvns	ip, r4, asr #21
   292d4:	movne	r1, r3
   292d8:	movne	r0, r2
   292dc:	mvnseq	ip, r5, asr #21
   292e0:	movne	r3, r1
   292e4:	movne	r2, r0
   292e8:	orrs	r4, r0, r1, lsl #12
   292ec:	orrseq	r5, r2, r3, lsl #12
   292f0:	teqeq	r1, r3
   292f4:	orrne	r1, r1, #524288	; 0x80000
   292f8:	pop	{r4, r5, pc}
   292fc:	teq	r0, #0
   29300:	moveq	r1, #0
   29304:	bxeq	lr
   29308:	push	{r4, r5, lr}
   2930c:	mov	r4, #1024	; 0x400
   29310:	add	r4, r4, #50	; 0x32
   29314:	mov	r5, #0
   29318:	mov	r1, #0
   2931c:	b	29198 <_obstack_memory_used@@Base+0x48ac>
   29320:	teq	r0, #0
   29324:	moveq	r1, #0
   29328:	bxeq	lr
   2932c:	push	{r4, r5, lr}
   29330:	mov	r4, #1024	; 0x400
   29334:	add	r4, r4, #50	; 0x32
   29338:	ands	r5, r0, #-2147483648	; 0x80000000
   2933c:	rsbmi	r0, r0, #0
   29340:	mov	r1, #0
   29344:	b	29198 <_obstack_memory_used@@Base+0x48ac>
   29348:	lsls	r2, r0, #1
   2934c:	asr	r1, r2, #3
   29350:	rrx	r1, r1
   29354:	lsl	r0, r2, #28
   29358:	andsne	r3, r2, #-16777216	; 0xff000000
   2935c:	teqne	r3, #-16777216	; 0xff000000
   29360:	eorne	r1, r1, #939524096	; 0x38000000
   29364:	bxne	lr
   29368:	bics	r2, r2, #-16777216	; 0xff000000
   2936c:	bxeq	lr
   29370:	teq	r3, #-16777216	; 0xff000000
   29374:	orreq	r1, r1, #524288	; 0x80000
   29378:	bxeq	lr
   2937c:	push	{r4, r5, lr}
   29380:	mov	r4, #896	; 0x380
   29384:	and	r5, r1, #-2147483648	; 0x80000000
   29388:	bic	r1, r1, #-2147483648	; 0x80000000
   2938c:	b	29198 <_obstack_memory_used@@Base+0x48ac>
   29390:	orrs	r2, r0, r1
   29394:	bxeq	lr
   29398:	push	{r4, r5, lr}
   2939c:	mov	r5, #0
   293a0:	b	293c0 <_obstack_memory_used@@Base+0x4ad4>
   293a4:	orrs	r2, r0, r1
   293a8:	bxeq	lr
   293ac:	push	{r4, r5, lr}
   293b0:	ands	r5, r1, #-2147483648	; 0x80000000
   293b4:	bpl	293c0 <_obstack_memory_used@@Base+0x4ad4>
   293b8:	rsbs	r0, r0, #0
   293bc:	rsc	r1, r1, #0
   293c0:	mov	r4, #1024	; 0x400
   293c4:	add	r4, r4, #50	; 0x32
   293c8:	lsrs	ip, r1, #22
   293cc:	beq	2913c <_obstack_memory_used@@Base+0x4850>
   293d0:	mov	r2, #3
   293d4:	lsrs	ip, ip, #3
   293d8:	addne	r2, r2, #3
   293dc:	lsrs	ip, ip, #3
   293e0:	addne	r2, r2, #3
   293e4:	add	r2, r2, ip, lsr #3
   293e8:	rsb	r3, r2, #32
   293ec:	lsl	ip, r0, r3
   293f0:	lsr	r0, r0, r2
   293f4:	orr	r0, r0, r1, lsl r3
   293f8:	lsr	r1, r1, r2
   293fc:	add	r4, r4, r2
   29400:	b	2913c <_obstack_memory_used@@Base+0x4850>
   29404:	cmp	r3, #0
   29408:	cmpeq	r2, #0
   2940c:	bne	29430 <_obstack_memory_used@@Base+0x4b44>
   29410:	cmp	r1, #0
   29414:	movlt	r1, #-2147483648	; 0x80000000
   29418:	movlt	r0, #0
   2941c:	blt	2942c <_obstack_memory_used@@Base+0x4b40>
   29420:	cmpeq	r0, #0
   29424:	mvnne	r1, #-2147483648	; 0x80000000
   29428:	mvnne	r0, #0
   2942c:	b	29514 <_obstack_memory_used@@Base+0x4c28>
   29430:	sub	sp, sp, #8
   29434:	push	{sp, lr}
   29438:	cmp	r1, #0
   2943c:	blt	2945c <_obstack_memory_used@@Base+0x4b70>
   29440:	cmp	r3, #0
   29444:	blt	29490 <_obstack_memory_used@@Base+0x4ba4>
   29448:	bl	29568 <_obstack_memory_used@@Base+0x4c7c>
   2944c:	ldr	lr, [sp, #4]
   29450:	add	sp, sp, #8
   29454:	pop	{r2, r3}
   29458:	bx	lr
   2945c:	rsbs	r0, r0, #0
   29460:	sbc	r1, r1, r1, lsl #1
   29464:	cmp	r3, #0
   29468:	blt	294b4 <_obstack_memory_used@@Base+0x4bc8>
   2946c:	bl	29568 <_obstack_memory_used@@Base+0x4c7c>
   29470:	ldr	lr, [sp, #4]
   29474:	add	sp, sp, #8
   29478:	pop	{r2, r3}
   2947c:	rsbs	r0, r0, #0
   29480:	sbc	r1, r1, r1, lsl #1
   29484:	rsbs	r2, r2, #0
   29488:	sbc	r3, r3, r3, lsl #1
   2948c:	bx	lr
   29490:	rsbs	r2, r2, #0
   29494:	sbc	r3, r3, r3, lsl #1
   29498:	bl	29568 <_obstack_memory_used@@Base+0x4c7c>
   2949c:	ldr	lr, [sp, #4]
   294a0:	add	sp, sp, #8
   294a4:	pop	{r2, r3}
   294a8:	rsbs	r0, r0, #0
   294ac:	sbc	r1, r1, r1, lsl #1
   294b0:	bx	lr
   294b4:	rsbs	r2, r2, #0
   294b8:	sbc	r3, r3, r3, lsl #1
   294bc:	bl	29568 <_obstack_memory_used@@Base+0x4c7c>
   294c0:	ldr	lr, [sp, #4]
   294c4:	add	sp, sp, #8
   294c8:	pop	{r2, r3}
   294cc:	rsbs	r2, r2, #0
   294d0:	sbc	r3, r3, r3, lsl #1
   294d4:	bx	lr
   294d8:	cmp	r3, #0
   294dc:	cmpeq	r2, #0
   294e0:	bne	294f8 <_obstack_memory_used@@Base+0x4c0c>
   294e4:	cmp	r1, #0
   294e8:	cmpeq	r0, #0
   294ec:	mvnne	r1, #0
   294f0:	mvnne	r0, #0
   294f4:	b	29514 <_obstack_memory_used@@Base+0x4c28>
   294f8:	sub	sp, sp, #8
   294fc:	push	{sp, lr}
   29500:	bl	29568 <_obstack_memory_used@@Base+0x4c7c>
   29504:	ldr	lr, [sp, #4]
   29508:	add	sp, sp, #8
   2950c:	pop	{r2, r3}
   29510:	bx	lr
   29514:	push	{r1, lr}
   29518:	mov	r0, #8
   2951c:	bl	11bac <raise@plt>
   29520:	pop	{r1, pc}
   29524:	andeq	r0, r0, r0
   29528:	vmov	d6, r0, r1
   2952c:	vldr	d7, [pc, #36]	; 29558 <_obstack_memory_used@@Base+0x4c6c>
   29530:	vldr	d5, [pc, #40]	; 29560 <_obstack_memory_used@@Base+0x4c74>
   29534:	vmul.f64	d7, d6, d7
   29538:	vcvt.u32.f64	s14, d7
   2953c:	vcvt.f64.u32	d4, s14
   29540:	vmov	r1, s14
   29544:	vmls.f64	d6, d4, d5
   29548:	vcvt.u32.f64	s15, d6
   2954c:	vmov	r0, s15
   29550:	bx	lr
   29554:	nop			; (mov r0, r0)
   29558:	andeq	r0, r0, r0
   2955c:	ldclcc	0, cr0, [r0]
   29560:	andeq	r0, r0, r0
   29564:	mvnsmi	r0, r0
   29568:	cmp	r1, r3
   2956c:	cmpeq	r0, r2
   29570:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   29574:	mov	r4, r0
   29578:	movcc	r0, #0
   2957c:	mov	r5, r1
   29580:	ldr	lr, [sp, #36]	; 0x24
   29584:	movcc	r1, r0
   29588:	bcc	29684 <_obstack_memory_used@@Base+0x4d98>
   2958c:	cmp	r3, #0
   29590:	clzeq	ip, r2
   29594:	clzne	ip, r3
   29598:	addeq	ip, ip, #32
   2959c:	cmp	r5, #0
   295a0:	clzeq	r1, r4
   295a4:	addeq	r1, r1, #32
   295a8:	clzne	r1, r5
   295ac:	sub	ip, ip, r1
   295b0:	sub	sl, ip, #32
   295b4:	lsl	r9, r3, ip
   295b8:	rsb	fp, ip, #32
   295bc:	orr	r9, r9, r2, lsl sl
   295c0:	orr	r9, r9, r2, lsr fp
   295c4:	lsl	r8, r2, ip
   295c8:	cmp	r5, r9
   295cc:	cmpeq	r4, r8
   295d0:	movcc	r0, #0
   295d4:	movcc	r1, r0
   295d8:	bcc	295f4 <_obstack_memory_used@@Base+0x4d08>
   295dc:	mov	r0, #1
   295e0:	subs	r4, r4, r8
   295e4:	lsl	r1, r0, sl
   295e8:	orr	r1, r1, r0, lsr fp
   295ec:	lsl	r0, r0, ip
   295f0:	sbc	r5, r5, r9
   295f4:	cmp	ip, #0
   295f8:	beq	29684 <_obstack_memory_used@@Base+0x4d98>
   295fc:	lsr	r6, r8, #1
   29600:	orr	r6, r6, r9, lsl #31
   29604:	lsr	r7, r9, #1
   29608:	mov	r2, ip
   2960c:	b	29630 <_obstack_memory_used@@Base+0x4d44>
   29610:	subs	r3, r4, r6
   29614:	sbc	r8, r5, r7
   29618:	adds	r3, r3, r3
   2961c:	adc	r8, r8, r8
   29620:	adds	r4, r3, #1
   29624:	adc	r5, r8, #0
   29628:	subs	r2, r2, #1
   2962c:	beq	2964c <_obstack_memory_used@@Base+0x4d60>
   29630:	cmp	r5, r7
   29634:	cmpeq	r4, r6
   29638:	bcs	29610 <_obstack_memory_used@@Base+0x4d24>
   2963c:	adds	r4, r4, r4
   29640:	adc	r5, r5, r5
   29644:	subs	r2, r2, #1
   29648:	bne	29630 <_obstack_memory_used@@Base+0x4d44>
   2964c:	lsr	r3, r4, ip
   29650:	orr	r3, r3, r5, lsl fp
   29654:	lsr	r2, r5, ip
   29658:	orr	r3, r3, r5, lsr sl
   2965c:	adds	r0, r0, r4
   29660:	mov	r4, r3
   29664:	lsl	r3, r2, ip
   29668:	orr	r3, r3, r4, lsl sl
   2966c:	lsl	ip, r4, ip
   29670:	orr	r3, r3, r4, lsr fp
   29674:	adc	r1, r1, r5
   29678:	subs	r0, r0, ip
   2967c:	mov	r5, r2
   29680:	sbc	r1, r1, r3
   29684:	cmp	lr, #0
   29688:	strdne	r4, [lr]
   2968c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   29690:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   29694:	mov	r7, r0
   29698:	ldr	r6, [pc, #72]	; 296e8 <_obstack_memory_used@@Base+0x4dfc>
   2969c:	ldr	r5, [pc, #72]	; 296ec <_obstack_memory_used@@Base+0x4e00>
   296a0:	add	r6, pc, r6
   296a4:	add	r5, pc, r5
   296a8:	sub	r6, r6, r5
   296ac:	mov	r8, r1
   296b0:	mov	r9, r2
   296b4:	bl	11b68 <calloc@plt-0x20>
   296b8:	asrs	r6, r6, #2
   296bc:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   296c0:	mov	r4, #0
   296c4:	add	r4, r4, #1
   296c8:	ldr	r3, [r5], #4
   296cc:	mov	r2, r9
   296d0:	mov	r1, r8
   296d4:	mov	r0, r7
   296d8:	blx	r3
   296dc:	cmp	r6, r4
   296e0:	bne	296c4 <_obstack_memory_used@@Base+0x4dd8>
   296e4:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   296e8:	andeq	r4, r1, r4, asr r8
   296ec:	andeq	r4, r1, ip, asr #16
   296f0:	bx	lr
   296f4:	ldr	r3, [pc, #12]	; 29708 <_obstack_memory_used@@Base+0x4e1c>
   296f8:	mov	r1, #0
   296fc:	add	r3, pc, r3
   29700:	ldr	r2, [r3]
   29704:	b	11ee8 <__cxa_atexit@plt>
   29708:	andeq	r4, r1, r0, asr #21

Disassembly of section .fini:

0002970c <.fini>:
   2970c:	push	{r3, lr}
   29710:	pop	{r3, pc}
