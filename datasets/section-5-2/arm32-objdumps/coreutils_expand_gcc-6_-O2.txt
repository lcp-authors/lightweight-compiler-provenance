
../repos/coreutils/src/expand:     file format elf32-littlearm


Disassembly of section .init:

00010c1c <.init>:
   10c1c:	push	{r3, lr}
   10c20:	bl	11270 <__assert_fail@plt+0x3e8>
   10c24:	pop	{r3, pc}

Disassembly of section .plt:

00010c28 <calloc@plt-0x14>:
   10c28:	push	{lr}		; (str lr, [sp, #-4]!)
   10c2c:	ldr	lr, [pc, #4]	; 10c38 <calloc@plt-0x4>
   10c30:	add	lr, pc, lr
   10c34:	ldr	pc, [lr, #8]!
   10c38:	andeq	r6, r1, r8, asr #7

00010c3c <calloc@plt>:
   10c3c:	add	ip, pc, #0, 12
   10c40:	add	ip, ip, #90112	; 0x16000
   10c44:	ldr	pc, [ip, #968]!	; 0x3c8

00010c48 <fputs_unlocked@plt>:
   10c48:	add	ip, pc, #0, 12
   10c4c:	add	ip, ip, #90112	; 0x16000
   10c50:	ldr	pc, [ip, #960]!	; 0x3c0

00010c54 <raise@plt>:
   10c54:	add	ip, pc, #0, 12
   10c58:	add	ip, ip, #90112	; 0x16000
   10c5c:	ldr	pc, [ip, #952]!	; 0x3b8

00010c60 <strcmp@plt>:
   10c60:	add	ip, pc, #0, 12
   10c64:	add	ip, ip, #90112	; 0x16000
   10c68:	ldr	pc, [ip, #944]!	; 0x3b0

00010c6c <posix_fadvise64@plt>:
   10c6c:	add	ip, pc, #0, 12
   10c70:	add	ip, ip, #90112	; 0x16000
   10c74:	ldr	pc, [ip, #936]!	; 0x3a8

00010c78 <fflush@plt>:
   10c78:	add	ip, pc, #0, 12
   10c7c:	add	ip, ip, #90112	; 0x16000
   10c80:	ldr	pc, [ip, #928]!	; 0x3a0

00010c84 <free@plt>:
   10c84:	add	ip, pc, #0, 12
   10c88:	add	ip, ip, #90112	; 0x16000
   10c8c:	ldr	pc, [ip, #920]!	; 0x398

00010c90 <_exit@plt>:
   10c90:	add	ip, pc, #0, 12
   10c94:	add	ip, ip, #90112	; 0x16000
   10c98:	ldr	pc, [ip, #912]!	; 0x390

00010c9c <memcpy@plt>:
   10c9c:	add	ip, pc, #0, 12
   10ca0:	add	ip, ip, #90112	; 0x16000
   10ca4:	ldr	pc, [ip, #904]!	; 0x388

00010ca8 <mbsinit@plt>:
   10ca8:	add	ip, pc, #0, 12
   10cac:	add	ip, ip, #90112	; 0x16000
   10cb0:	ldr	pc, [ip, #896]!	; 0x380

00010cb4 <memcmp@plt>:
   10cb4:	add	ip, pc, #0, 12
   10cb8:	add	ip, ip, #90112	; 0x16000
   10cbc:	ldr	pc, [ip, #888]!	; 0x378

00010cc0 <fputc_unlocked@plt>:
   10cc0:	add	ip, pc, #0, 12
   10cc4:	add	ip, ip, #90112	; 0x16000
   10cc8:	ldr	pc, [ip, #880]!	; 0x370

00010ccc <dcgettext@plt>:
   10ccc:	add	ip, pc, #0, 12
   10cd0:	add	ip, ip, #90112	; 0x16000
   10cd4:	ldr	pc, [ip, #872]!	; 0x368

00010cd8 <realloc@plt>:
   10cd8:	add	ip, pc, #0, 12
   10cdc:	add	ip, ip, #90112	; 0x16000
   10ce0:	ldr	pc, [ip, #864]!	; 0x360

00010ce4 <textdomain@plt>:
   10ce4:	add	ip, pc, #0, 12
   10ce8:	add	ip, ip, #90112	; 0x16000
   10cec:	ldr	pc, [ip, #856]!	; 0x358

00010cf0 <iswprint@plt>:
   10cf0:	add	ip, pc, #0, 12
   10cf4:	add	ip, ip, #90112	; 0x16000
   10cf8:	ldr	pc, [ip, #848]!	; 0x350

00010cfc <fwrite@plt>:
   10cfc:	add	ip, pc, #0, 12
   10d00:	add	ip, ip, #90112	; 0x16000
   10d04:	ldr	pc, [ip, #840]!	; 0x348

00010d08 <lseek64@plt>:
   10d08:	add	ip, pc, #0, 12
   10d0c:	add	ip, ip, #90112	; 0x16000
   10d10:	ldr	pc, [ip, #832]!	; 0x340

00010d14 <__ctype_get_mb_cur_max@plt>:
   10d14:	add	ip, pc, #0, 12
   10d18:	add	ip, ip, #90112	; 0x16000
   10d1c:	ldr	pc, [ip, #824]!	; 0x338

00010d20 <__fpending@plt>:
   10d20:	add	ip, pc, #0, 12
   10d24:	add	ip, ip, #90112	; 0x16000
   10d28:	ldr	pc, [ip, #816]!	; 0x330

00010d2c <mbrtowc@plt>:
   10d2c:	add	ip, pc, #0, 12
   10d30:	add	ip, ip, #90112	; 0x16000
   10d34:	ldr	pc, [ip, #808]!	; 0x328

00010d38 <error@plt>:
   10d38:	add	ip, pc, #0, 12
   10d3c:	add	ip, ip, #90112	; 0x16000
   10d40:	ldr	pc, [ip, #800]!	; 0x320

00010d44 <malloc@plt>:
   10d44:	add	ip, pc, #0, 12
   10d48:	add	ip, ip, #90112	; 0x16000
   10d4c:	ldr	pc, [ip, #792]!	; 0x318

00010d50 <__libc_start_main@plt>:
   10d50:	add	ip, pc, #0, 12
   10d54:	add	ip, ip, #90112	; 0x16000
   10d58:	ldr	pc, [ip, #784]!	; 0x310

00010d5c <__freading@plt>:
   10d5c:	add	ip, pc, #0, 12
   10d60:	add	ip, ip, #90112	; 0x16000
   10d64:	ldr	pc, [ip, #776]!	; 0x308

00010d68 <__gmon_start__@plt>:
   10d68:	add	ip, pc, #0, 12
   10d6c:	add	ip, ip, #90112	; 0x16000
   10d70:	ldr	pc, [ip, #768]!	; 0x300

00010d74 <getopt_long@plt>:
   10d74:	add	ip, pc, #0, 12
   10d78:	add	ip, ip, #90112	; 0x16000
   10d7c:	ldr	pc, [ip, #760]!	; 0x2f8

00010d80 <__ctype_b_loc@plt>:
   10d80:	add	ip, pc, #0, 12
   10d84:	add	ip, ip, #90112	; 0x16000
   10d88:	ldr	pc, [ip, #752]!	; 0x2f0

00010d8c <exit@plt>:
   10d8c:	add	ip, pc, #0, 12
   10d90:	add	ip, ip, #90112	; 0x16000
   10d94:	ldr	pc, [ip, #744]!	; 0x2e8

00010d98 <strlen@plt>:
   10d98:	add	ip, pc, #0, 12
   10d9c:	add	ip, ip, #90112	; 0x16000
   10da0:	ldr	pc, [ip, #736]!	; 0x2e0

00010da4 <__errno_location@plt>:
   10da4:	add	ip, pc, #0, 12
   10da8:	add	ip, ip, #90112	; 0x16000
   10dac:	ldr	pc, [ip, #728]!	; 0x2d8

00010db0 <__cxa_atexit@plt>:
   10db0:	add	ip, pc, #0, 12
   10db4:	add	ip, ip, #90112	; 0x16000
   10db8:	ldr	pc, [ip, #720]!	; 0x2d0

00010dbc <memset@plt>:
   10dbc:	add	ip, pc, #0, 12
   10dc0:	add	ip, ip, #90112	; 0x16000
   10dc4:	ldr	pc, [ip, #712]!	; 0x2c8

00010dc8 <__printf_chk@plt>:
   10dc8:	add	ip, pc, #0, 12
   10dcc:	add	ip, ip, #90112	; 0x16000
   10dd0:	ldr	pc, [ip, #704]!	; 0x2c0

00010dd4 <fileno@plt>:
   10dd4:	add	ip, pc, #0, 12
   10dd8:	add	ip, ip, #90112	; 0x16000
   10ddc:	ldr	pc, [ip, #696]!	; 0x2b8

00010de0 <__fprintf_chk@plt>:
   10de0:	add	ip, pc, #0, 12
   10de4:	add	ip, ip, #90112	; 0x16000
   10de8:	ldr	pc, [ip, #688]!	; 0x2b0

00010dec <fclose@plt>:
   10dec:	add	ip, pc, #0, 12
   10df0:	add	ip, ip, #90112	; 0x16000
   10df4:	ldr	pc, [ip, #680]!	; 0x2a8

00010df8 <fseeko64@plt>:
   10df8:	add	ip, pc, #0, 12
   10dfc:	add	ip, ip, #90112	; 0x16000
   10e00:	ldr	pc, [ip, #672]!	; 0x2a0

00010e04 <__uflow@plt>:
   10e04:	add	ip, pc, #0, 12
   10e08:	add	ip, ip, #90112	; 0x16000
   10e0c:	ldr	pc, [ip, #664]!	; 0x298

00010e10 <__overflow@plt>:
   10e10:	add	ip, pc, #0, 12
   10e14:	add	ip, ip, #90112	; 0x16000
   10e18:	ldr	pc, [ip, #656]!	; 0x290

00010e1c <setlocale@plt>:
   10e1c:	add	ip, pc, #0, 12
   10e20:	add	ip, ip, #90112	; 0x16000
   10e24:	ldr	pc, [ip, #648]!	; 0x288

00010e28 <strrchr@plt>:
   10e28:	add	ip, pc, #0, 12
   10e2c:	add	ip, ip, #90112	; 0x16000
   10e30:	ldr	pc, [ip, #640]!	; 0x280

00010e34 <nl_langinfo@plt>:
   10e34:	add	ip, pc, #0, 12
   10e38:	add	ip, ip, #90112	; 0x16000
   10e3c:	ldr	pc, [ip, #632]!	; 0x278

00010e40 <clearerr_unlocked@plt>:
   10e40:	add	ip, pc, #0, 12
   10e44:	add	ip, ip, #90112	; 0x16000
   10e48:	ldr	pc, [ip, #624]!	; 0x270

00010e4c <fopen64@plt>:
   10e4c:	add	ip, pc, #0, 12
   10e50:	add	ip, ip, #90112	; 0x16000
   10e54:	ldr	pc, [ip, #616]!	; 0x268

00010e58 <bindtextdomain@plt>:
   10e58:	add	ip, pc, #0, 12
   10e5c:	add	ip, ip, #90112	; 0x16000
   10e60:	ldr	pc, [ip, #608]!	; 0x260

00010e64 <strncmp@plt>:
   10e64:	add	ip, pc, #0, 12
   10e68:	add	ip, ip, #90112	; 0x16000
   10e6c:	ldr	pc, [ip, #600]!	; 0x258

00010e70 <abort@plt>:
   10e70:	add	ip, pc, #0, 12
   10e74:	add	ip, ip, #90112	; 0x16000
   10e78:	ldr	pc, [ip, #592]!	; 0x250

00010e7c <strspn@plt>:
   10e7c:	add	ip, pc, #0, 12
   10e80:	add	ip, ip, #90112	; 0x16000
   10e84:	ldr	pc, [ip, #584]!	; 0x248

00010e88 <__assert_fail@plt>:
   10e88:	add	ip, pc, #0, 12
   10e8c:	add	ip, ip, #90112	; 0x16000
   10e90:	ldr	pc, [ip, #576]!	; 0x240

Disassembly of section .text:

00010e98 <.text>:
   10e98:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   10e9c:	mov	r6, r0
   10ea0:	sub	sp, sp, #20
   10ea4:	ldr	r0, [r1]
   10ea8:	mov	r4, r1
   10eac:	bl	12310 <__assert_fail@plt+0x1488>
   10eb0:	ldr	r1, [pc, #824]	; 111f0 <__assert_fail@plt+0x368>
   10eb4:	mov	r0, #6
   10eb8:	bl	10e1c <setlocale@plt>
   10ebc:	ldr	r1, [pc, #816]	; 111f4 <__assert_fail@plt+0x36c>
   10ec0:	ldr	r0, [pc, #816]	; 111f8 <__assert_fail@plt+0x370>
   10ec4:	bl	10e58 <bindtextdomain@plt>
   10ec8:	ldr	r8, [pc, #812]	; 111fc <__assert_fail@plt+0x374>
   10ecc:	ldr	r0, [pc, #804]	; 111f8 <__assert_fail@plt+0x370>
   10ed0:	ldr	r7, [pc, #808]	; 11200 <__assert_fail@plt+0x378>
   10ed4:	ldr	r9, [pc, #808]	; 11204 <__assert_fail@plt+0x37c>
   10ed8:	bl	10ce4 <textdomain@plt>
   10edc:	mov	r5, #0
   10ee0:	ldr	r0, [pc, #800]	; 11208 <__assert_fail@plt+0x380>
   10ee4:	bl	155c8 <__assert_fail@plt+0x4740>
   10ee8:	mov	r3, #1
   10eec:	strb	r3, [r8]
   10ef0:	mov	r3, r7
   10ef4:	str	r5, [sp]
   10ef8:	ldr	r2, [pc, #780]	; 1120c <__assert_fail@plt+0x384>
   10efc:	mov	r1, r4
   10f00:	mov	r0, r6
   10f04:	bl	10d74 <getopt_long@plt>
   10f08:	cmn	r0, #1
   10f0c:	mov	r3, r0
   10f10:	beq	10fb8 <__assert_fail@plt+0x130>
   10f14:	cmp	r3, #57	; 0x39
   10f18:	bgt	10f3c <__assert_fail@plt+0xb4>
   10f1c:	cmp	r3, #48	; 0x30
   10f20:	bge	10f98 <__assert_fail@plt+0x110>
   10f24:	cmn	r3, #3
   10f28:	beq	10f68 <__assert_fail@plt+0xe0>
   10f2c:	cmn	r3, #2
   10f30:	bne	10f60 <__assert_fail@plt+0xd8>
   10f34:	mov	r0, #0
   10f38:	bl	1135c <__assert_fail@plt+0x4d4>
   10f3c:	cmp	r3, #105	; 0x69
   10f40:	beq	10f58 <__assert_fail@plt+0xd0>
   10f44:	cmp	r3, #116	; 0x74
   10f48:	bne	10f60 <__assert_fail@plt+0xd8>
   10f4c:	ldr	r0, [r9]
   10f50:	bl	1181c <__assert_fail@plt+0x994>
   10f54:	b	10ef0 <__assert_fail@plt+0x68>
   10f58:	strb	r5, [r8]
   10f5c:	b	10ef0 <__assert_fail@plt+0x68>
   10f60:	mov	r0, #1
   10f64:	bl	1135c <__assert_fail@plt+0x4d4>
   10f68:	ldr	r1, [pc, #672]	; 11210 <__assert_fail@plt+0x388>
   10f6c:	ldr	r3, [pc, #672]	; 11214 <__assert_fail@plt+0x38c>
   10f70:	ldr	r2, [pc, #672]	; 11218 <__assert_fail@plt+0x390>
   10f74:	str	r5, [sp, #4]
   10f78:	ldr	r0, [r1]
   10f7c:	ldr	r3, [r3]
   10f80:	ldr	r1, [pc, #660]	; 1121c <__assert_fail@plt+0x394>
   10f84:	str	r2, [sp]
   10f88:	ldr	r2, [pc, #656]	; 11220 <__assert_fail@plt+0x398>
   10f8c:	bl	1460c <__assert_fail@plt+0x3784>
   10f90:	mov	r0, #0
   10f94:	bl	10d8c <exit@plt>
   10f98:	ldr	r2, [r9]
   10f9c:	cmp	r2, #0
   10fa0:	subne	r0, r2, #1
   10fa4:	addeq	r0, sp, #12
   10fa8:	strbeq	r3, [sp, #12]
   10fac:	strbeq	r2, [sp, #13]
   10fb0:	bl	1181c <__assert_fail@plt+0x994>
   10fb4:	b	10ef0 <__assert_fail@plt+0x68>
   10fb8:	bl	11b2c <__assert_fail@plt+0xca4>
   10fbc:	ldr	r3, [pc, #608]	; 11224 <__assert_fail@plt+0x39c>
   10fc0:	ldr	r0, [r3]
   10fc4:	cmp	r6, r0
   10fc8:	addgt	r0, r4, r0, lsl #2
   10fcc:	movle	r0, #0
   10fd0:	bl	11d7c <__assert_fail@plt+0xef4>
   10fd4:	mov	r0, #0
   10fd8:	bl	11da4 <__assert_fail@plt+0xf1c>
   10fdc:	subs	r6, r0, #0
   10fe0:	beq	110f8 <__assert_fail@plt+0x270>
   10fe4:	ldr	r7, [pc, #548]	; 11210 <__assert_fail@plt+0x388>
   10fe8:	mov	r3, #0
   10fec:	mov	r4, #0
   10ff0:	mov	r5, #0
   10ff4:	mov	sl, #1
   10ff8:	mov	r9, #32
   10ffc:	str	r3, [sp, #12]
   11000:	b	11064 <__assert_fail@plt+0x1dc>
   11004:	adds	r4, r4, #1
   11008:	adc	r5, r5, #0
   1100c:	orrs	r3, r4, r5
   11010:	beq	111d0 <__assert_fail@plt+0x348>
   11014:	ldrb	sl, [r8]
   11018:	cmp	sl, #0
   1101c:	bne	11034 <__assert_fail@plt+0x1ac>
   11020:	bl	10d80 <__ctype_b_loc@plt>
   11024:	lsl	r3, fp, #1
   11028:	ldr	r2, [r0]
   1102c:	ldrh	r2, [r2, r3]
   11030:	and	sl, r2, #1
   11034:	cmp	fp, #0
   11038:	blt	110f8 <__assert_fail@plt+0x270>
   1103c:	ldr	r0, [r7]
   11040:	ldr	r3, [r0, #20]
   11044:	ldr	r1, [r0, #24]
   11048:	cmp	r3, r1
   1104c:	addcc	r1, r3, #1
   11050:	strcc	r1, [r0, #20]
   11054:	strbcc	fp, [r3]
   11058:	bcs	1110c <__assert_fail@plt+0x284>
   1105c:	cmp	fp, #10
   11060:	beq	10fe8 <__assert_fail@plt+0x160>
   11064:	ldr	r3, [r6, #4]
   11068:	ldr	r1, [r6, #8]
   1106c:	cmp	r3, r1
   11070:	bcs	110d0 <__assert_fail@plt+0x248>
   11074:	add	r1, r3, #1
   11078:	str	r1, [r6, #4]
   1107c:	ldrb	fp, [r3]
   11080:	cmp	sl, #0
   11084:	beq	1103c <__assert_fail@plt+0x1b4>
   11088:	cmp	fp, #9
   1108c:	beq	11144 <__assert_fail@plt+0x2bc>
   11090:	cmp	fp, #8
   11094:	bne	11004 <__assert_fail@plt+0x17c>
   11098:	orrs	r3, r4, r5
   1109c:	ldr	r1, [sp, #12]
   110a0:	movne	r2, #1
   110a4:	moveq	r2, #0
   110a8:	mov	r3, #0
   110ac:	cmp	r1, r3
   110b0:	subne	r1, r1, #1
   110b4:	subs	r4, r4, r2
   110b8:	sbc	r5, r5, r3
   110bc:	str	r1, [sp, #12]
   110c0:	ldrb	sl, [r8]
   110c4:	cmp	sl, #0
   110c8:	bne	1103c <__assert_fail@plt+0x1b4>
   110cc:	b	11020 <__assert_fail@plt+0x198>
   110d0:	mov	r0, r6
   110d4:	bl	10e04 <__uflow@plt>
   110d8:	subs	fp, r0, #0
   110dc:	bge	11080 <__assert_fail@plt+0x1f8>
   110e0:	mov	r0, r6
   110e4:	bl	11da4 <__assert_fail@plt+0xf1c>
   110e8:	subs	r6, r0, #0
   110ec:	bne	11064 <__assert_fail@plt+0x1dc>
   110f0:	cmp	sl, #0
   110f4:	bne	11090 <__assert_fail@plt+0x208>
   110f8:	bl	11f44 <__assert_fail@plt+0x10bc>
   110fc:	ldr	r3, [pc, #292]	; 11228 <__assert_fail@plt+0x3a0>
   11100:	ldr	r0, [r3]
   11104:	add	sp, sp, #20
   11108:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1110c:	uxtb	r1, fp
   11110:	bl	10e10 <__overflow@plt>
   11114:	cmp	r0, #0
   11118:	bge	1105c <__assert_fail@plt+0x1d4>
   1111c:	bl	10da4 <__errno_location@plt>
   11120:	mov	r2, #5
   11124:	ldr	r1, [pc, #256]	; 1122c <__assert_fail@plt+0x3a4>
   11128:	ldr	r4, [r0]
   1112c:	mov	r0, #0
   11130:	bl	10ccc <dcgettext@plt>
   11134:	mov	r1, r4
   11138:	mov	r2, r0
   1113c:	mov	r0, #1
   11140:	bl	10d38 <error@plt>
   11144:	add	r3, sp, #11
   11148:	add	r2, sp, #12
   1114c:	mov	r0, r4
   11150:	mov	r1, r5
   11154:	bl	11c68 <__assert_fail@plt+0xde0>
   11158:	mov	fp, r1
   1115c:	ldrb	r1, [sp, #11]
   11160:	mov	sl, r0
   11164:	cmp	r1, #0
   11168:	beq	11174 <__assert_fail@plt+0x2ec>
   1116c:	adds	sl, r4, #1
   11170:	adc	fp, r5, #0
   11174:	cmp	r5, fp
   11178:	cmpeq	r4, sl
   1117c:	bhi	111d0 <__assert_fail@plt+0x348>
   11180:	adds	r4, r4, #1
   11184:	adc	r5, r5, #0
   11188:	cmp	fp, r5
   1118c:	cmpeq	sl, r4
   11190:	bls	111c8 <__assert_fail@plt+0x340>
   11194:	ldr	r0, [r7]
   11198:	ldr	r1, [r0, #20]
   1119c:	ldr	ip, [r0, #24]
   111a0:	cmp	r1, ip
   111a4:	addcc	ip, r1, #1
   111a8:	strcc	ip, [r0, #20]
   111ac:	strbcc	r9, [r1]
   111b0:	bcc	11180 <__assert_fail@plt+0x2f8>
   111b4:	mov	r1, r9
   111b8:	bl	10e10 <__overflow@plt>
   111bc:	cmp	r0, #0
   111c0:	bge	11180 <__assert_fail@plt+0x2f8>
   111c4:	b	1111c <__assert_fail@plt+0x294>
   111c8:	mov	fp, r9
   111cc:	b	110c0 <__assert_fail@plt+0x238>
   111d0:	mov	r2, #5
   111d4:	ldr	r1, [pc, #84]	; 11230 <__assert_fail@plt+0x3a8>
   111d8:	mov	r0, #0
   111dc:	bl	10ccc <dcgettext@plt>
   111e0:	mov	r1, #0
   111e4:	mov	r2, r0
   111e8:	mov	r0, #1
   111ec:	bl	10d38 <error@plt>
   111f0:	andeq	r5, r1, r8, ror #13
   111f4:	andeq	r5, r1, r8, ror r9
   111f8:	ldrdeq	r5, [r1], -r0
   111fc:	muleq	r2, r0, r1
   11200:	andeq	r5, r1, r4, lsr #12
   11204:	andeq	r7, r2, r0, asr r1
   11208:	strdeq	r1, [r1], -r4
   1120c:	andeq	r5, r1, r4, ror r6
   11210:	andeq	r7, r2, ip, asr #2
   11214:	andeq	r7, r2, r8, ror #1
   11218:	muleq	r1, r0, r9
   1121c:	muleq	r1, r8, r6
   11220:	andeq	r5, r1, ip, asr #17
   11224:	andeq	r7, r2, r8, lsr r1
   11228:	andeq	r7, r2, ip, lsl #3
   1122c:			; <UNDEFINED> instruction: 0x000159b8
   11230:	andeq	r5, r1, r0, lsr #19
   11234:	mov	fp, #0
   11238:	mov	lr, #0
   1123c:	pop	{r1}		; (ldr r1, [sp], #4)
   11240:	mov	r2, sp
   11244:	push	{r2}		; (str r2, [sp, #-4]!)
   11248:	push	{r0}		; (str r0, [sp, #-4]!)
   1124c:	ldr	ip, [pc, #16]	; 11264 <__assert_fail@plt+0x3dc>
   11250:	push	{ip}		; (str ip, [sp, #-4]!)
   11254:	ldr	r0, [pc, #12]	; 11268 <__assert_fail@plt+0x3e0>
   11258:	ldr	r3, [pc, #12]	; 1126c <__assert_fail@plt+0x3e4>
   1125c:	bl	10d50 <__libc_start_main@plt>
   11260:	bl	10e70 <abort@plt>
   11264:	andeq	r5, r1, r4, asr #11
   11268:	muleq	r1, r8, lr
   1126c:	andeq	r5, r1, r4, ror #10
   11270:	ldr	r3, [pc, #20]	; 1128c <__assert_fail@plt+0x404>
   11274:	ldr	r2, [pc, #20]	; 11290 <__assert_fail@plt+0x408>
   11278:	add	r3, pc, r3
   1127c:	ldr	r2, [r3, r2]
   11280:	cmp	r2, #0
   11284:	bxeq	lr
   11288:	b	10d68 <__gmon_start__@plt>
   1128c:	andeq	r5, r1, r0, lsl #27
   11290:	ldrdeq	r0, [r0], -r4
   11294:	ldr	r3, [pc, #28]	; 112b8 <__assert_fail@plt+0x430>
   11298:	ldr	r0, [pc, #28]	; 112bc <__assert_fail@plt+0x434>
   1129c:	sub	r3, r3, r0
   112a0:	cmp	r3, #6
   112a4:	bxls	lr
   112a8:	ldr	r3, [pc, #16]	; 112c0 <__assert_fail@plt+0x438>
   112ac:	cmp	r3, #0
   112b0:	bxeq	lr
   112b4:	bx	r3
   112b8:	andeq	r7, r2, r3, lsr r1
   112bc:	andeq	r7, r2, r0, lsr r1
   112c0:	andeq	r0, r0, r0
   112c4:	ldr	r1, [pc, #36]	; 112f0 <__assert_fail@plt+0x468>
   112c8:	ldr	r0, [pc, #36]	; 112f4 <__assert_fail@plt+0x46c>
   112cc:	sub	r1, r1, r0
   112d0:	asr	r1, r1, #2
   112d4:	add	r1, r1, r1, lsr #31
   112d8:	asrs	r1, r1, #1
   112dc:	bxeq	lr
   112e0:	ldr	r3, [pc, #16]	; 112f8 <__assert_fail@plt+0x470>
   112e4:	cmp	r3, #0
   112e8:	bxeq	lr
   112ec:	bx	r3
   112f0:	andeq	r7, r2, r0, lsr r1
   112f4:	andeq	r7, r2, r0, lsr r1
   112f8:	andeq	r0, r0, r0
   112fc:	push	{r4, lr}
   11300:	ldr	r4, [pc, #24]	; 11320 <__assert_fail@plt+0x498>
   11304:	ldrb	r3, [r4]
   11308:	cmp	r3, #0
   1130c:	popne	{r4, pc}
   11310:	bl	11294 <__assert_fail@plt+0x40c>
   11314:	mov	r3, #1
   11318:	strb	r3, [r4]
   1131c:	pop	{r4, pc}
   11320:	andeq	r7, r2, r4, asr r1
   11324:	ldr	r0, [pc, #40]	; 11354 <__assert_fail@plt+0x4cc>
   11328:	ldr	r3, [r0]
   1132c:	cmp	r3, #0
   11330:	bne	11338 <__assert_fail@plt+0x4b0>
   11334:	b	112c4 <__assert_fail@plt+0x43c>
   11338:	ldr	r3, [pc, #24]	; 11358 <__assert_fail@plt+0x4d0>
   1133c:	cmp	r3, #0
   11340:	beq	11334 <__assert_fail@plt+0x4ac>
   11344:	push	{r4, lr}
   11348:	blx	r3
   1134c:	pop	{r4, lr}
   11350:	b	112c4 <__assert_fail@plt+0x43c>
   11354:	andeq	r6, r2, r4, lsl pc
   11358:	andeq	r0, r0, r0
   1135c:	subs	r6, r0, #0
   11360:	push	{r7, lr}
   11364:	sub	sp, sp, #56	; 0x38
   11368:	beq	113a4 <__assert_fail@plt+0x51c>
   1136c:	ldr	r3, [pc, #688]	; 11624 <__assert_fail@plt+0x79c>
   11370:	mov	r2, #5
   11374:	ldr	r1, [pc, #684]	; 11628 <__assert_fail@plt+0x7a0>
   11378:	mov	r0, #0
   1137c:	ldr	r4, [r3]
   11380:	bl	10ccc <dcgettext@plt>
   11384:	ldr	r3, [pc, #672]	; 1162c <__assert_fail@plt+0x7a4>
   11388:	mov	r1, #1
   1138c:	ldr	r3, [r3]
   11390:	mov	r2, r0
   11394:	mov	r0, r4
   11398:	bl	10de0 <__fprintf_chk@plt>
   1139c:	mov	r0, r6
   113a0:	bl	10d8c <exit@plt>
   113a4:	mov	r2, #5
   113a8:	ldr	r1, [pc, #640]	; 11630 <__assert_fail@plt+0x7a8>
   113ac:	bl	10ccc <dcgettext@plt>
   113b0:	ldr	r3, [pc, #628]	; 1162c <__assert_fail@plt+0x7a4>
   113b4:	ldr	r7, [pc, #632]	; 11634 <__assert_fail@plt+0x7ac>
   113b8:	ldr	r4, [pc, #632]	; 11638 <__assert_fail@plt+0x7b0>
   113bc:	ldr	r2, [r3]
   113c0:	mov	r1, r0
   113c4:	mov	r0, #1
   113c8:	bl	10dc8 <__printf_chk@plt>
   113cc:	mov	r2, #5
   113d0:	ldr	r1, [pc, #612]	; 1163c <__assert_fail@plt+0x7b4>
   113d4:	mov	r0, r6
   113d8:	bl	10ccc <dcgettext@plt>
   113dc:	ldr	r1, [r7]
   113e0:	bl	10c48 <fputs_unlocked@plt>
   113e4:	mov	r2, #5
   113e8:	ldr	r1, [pc, #592]	; 11640 <__assert_fail@plt+0x7b8>
   113ec:	mov	r0, r6
   113f0:	bl	10ccc <dcgettext@plt>
   113f4:	ldr	r1, [r7]
   113f8:	bl	10c48 <fputs_unlocked@plt>
   113fc:	mov	r2, #5
   11400:	ldr	r1, [pc, #572]	; 11644 <__assert_fail@plt+0x7bc>
   11404:	mov	r0, r6
   11408:	bl	10ccc <dcgettext@plt>
   1140c:	ldr	r1, [r7]
   11410:	bl	10c48 <fputs_unlocked@plt>
   11414:	mov	r2, #5
   11418:	ldr	r1, [pc, #552]	; 11648 <__assert_fail@plt+0x7c0>
   1141c:	mov	r0, r6
   11420:	bl	10ccc <dcgettext@plt>
   11424:	ldr	r1, [r7]
   11428:	bl	10c48 <fputs_unlocked@plt>
   1142c:	bl	11f8c <__assert_fail@plt+0x1104>
   11430:	mov	r2, #5
   11434:	ldr	r1, [pc, #528]	; 1164c <__assert_fail@plt+0x7c4>
   11438:	mov	r0, r6
   1143c:	bl	10ccc <dcgettext@plt>
   11440:	ldr	r1, [r7]
   11444:	bl	10c48 <fputs_unlocked@plt>
   11448:	mov	r2, #5
   1144c:	ldr	r1, [pc, #508]	; 11650 <__assert_fail@plt+0x7c8>
   11450:	mov	r0, r6
   11454:	bl	10ccc <dcgettext@plt>
   11458:	ldr	r1, [r7]
   1145c:	bl	10c48 <fputs_unlocked@plt>
   11460:	ldm	r4!, {r0, r1, r2, r3}
   11464:	mov	lr, sp
   11468:	stmia	lr!, {r0, r1, r2, r3}
   1146c:	ldm	r4!, {r0, r1, r2, r3}
   11470:	ldr	ip, [sp]
   11474:	stmia	lr!, {r0, r1, r2, r3}
   11478:	cmp	ip, #0
   1147c:	ldm	r4!, {r0, r1, r2, r3}
   11480:	stmia	lr!, {r0, r1, r2, r3}
   11484:	ldm	r4, {r0, r1}
   11488:	moveq	r4, sp
   1148c:	stm	lr, {r0, r1}
   11490:	beq	114c0 <__assert_fail@plt+0x638>
   11494:	ldr	r5, [pc, #440]	; 11654 <__assert_fail@plt+0x7cc>
   11498:	mov	r4, sp
   1149c:	b	114ac <__assert_fail@plt+0x624>
   114a0:	ldr	ip, [r4, #8]!
   114a4:	cmp	ip, #0
   114a8:	beq	114c0 <__assert_fail@plt+0x638>
   114ac:	mov	r1, ip
   114b0:	mov	r0, r5
   114b4:	bl	10c60 <strcmp@plt>
   114b8:	cmp	r0, #0
   114bc:	bne	114a0 <__assert_fail@plt+0x618>
   114c0:	ldr	r4, [r4, #4]
   114c4:	mov	r2, #5
   114c8:	cmp	r4, #0
   114cc:	ldr	r1, [pc, #388]	; 11658 <__assert_fail@plt+0x7d0>
   114d0:	beq	11578 <__assert_fail@plt+0x6f0>
   114d4:	mov	r0, #0
   114d8:	bl	10ccc <dcgettext@plt>
   114dc:	ldr	r3, [pc, #376]	; 1165c <__assert_fail@plt+0x7d4>
   114e0:	ldr	r2, [pc, #376]	; 11660 <__assert_fail@plt+0x7d8>
   114e4:	mov	r1, r0
   114e8:	mov	r0, #1
   114ec:	bl	10dc8 <__printf_chk@plt>
   114f0:	mov	r1, #0
   114f4:	mov	r0, #5
   114f8:	bl	10e1c <setlocale@plt>
   114fc:	cmp	r0, #0
   11500:	ldreq	r5, [pc, #332]	; 11654 <__assert_fail@plt+0x7cc>
   11504:	beq	11520 <__assert_fail@plt+0x698>
   11508:	mov	r2, #3
   1150c:	ldr	r1, [pc, #336]	; 11664 <__assert_fail@plt+0x7dc>
   11510:	bl	10e64 <strncmp@plt>
   11514:	ldr	r5, [pc, #312]	; 11654 <__assert_fail@plt+0x7cc>
   11518:	cmp	r0, #0
   1151c:	bne	11608 <__assert_fail@plt+0x780>
   11520:	mov	r2, #5
   11524:	ldr	r1, [pc, #316]	; 11668 <__assert_fail@plt+0x7e0>
   11528:	mov	r0, #0
   1152c:	bl	10ccc <dcgettext@plt>
   11530:	ldr	r3, [pc, #284]	; 11654 <__assert_fail@plt+0x7cc>
   11534:	ldr	r2, [pc, #288]	; 1165c <__assert_fail@plt+0x7d4>
   11538:	mov	r1, r0
   1153c:	mov	r0, #1
   11540:	bl	10dc8 <__printf_chk@plt>
   11544:	mov	r2, #5
   11548:	ldr	r1, [pc, #284]	; 1166c <__assert_fail@plt+0x7e4>
   1154c:	mov	r0, #0
   11550:	bl	10ccc <dcgettext@plt>
   11554:	ldr	r2, [pc, #276]	; 11670 <__assert_fail@plt+0x7e8>
   11558:	cmp	r4, r5
   1155c:	ldr	r3, [pc, #272]	; 11674 <__assert_fail@plt+0x7ec>
   11560:	movne	r3, r2
   11564:	mov	r1, r0
   11568:	mov	r2, r4
   1156c:	mov	r0, #1
   11570:	bl	10dc8 <__printf_chk@plt>
   11574:	b	1139c <__assert_fail@plt+0x514>
   11578:	mov	r0, r4
   1157c:	bl	10ccc <dcgettext@plt>
   11580:	ldr	r3, [pc, #212]	; 1165c <__assert_fail@plt+0x7d4>
   11584:	ldr	r2, [pc, #212]	; 11660 <__assert_fail@plt+0x7d8>
   11588:	mov	r1, r0
   1158c:	mov	r0, #1
   11590:	bl	10dc8 <__printf_chk@plt>
   11594:	mov	r1, r4
   11598:	mov	r0, #5
   1159c:	bl	10e1c <setlocale@plt>
   115a0:	cmp	r0, #0
   115a4:	beq	115bc <__assert_fail@plt+0x734>
   115a8:	mov	r2, #3
   115ac:	ldr	r1, [pc, #176]	; 11664 <__assert_fail@plt+0x7dc>
   115b0:	bl	10e64 <strncmp@plt>
   115b4:	cmp	r0, #0
   115b8:	bne	11600 <__assert_fail@plt+0x778>
   115bc:	mov	r2, #5
   115c0:	ldr	r1, [pc, #160]	; 11668 <__assert_fail@plt+0x7e0>
   115c4:	mov	r0, #0
   115c8:	bl	10ccc <dcgettext@plt>
   115cc:	ldr	r3, [pc, #128]	; 11654 <__assert_fail@plt+0x7cc>
   115d0:	ldr	r2, [pc, #132]	; 1165c <__assert_fail@plt+0x7d4>
   115d4:	mov	r4, r3
   115d8:	mov	r1, r0
   115dc:	mov	r0, #1
   115e0:	bl	10dc8 <__printf_chk@plt>
   115e4:	ldr	r1, [pc, #128]	; 1166c <__assert_fail@plt+0x7e4>
   115e8:	mov	r2, #5
   115ec:	mov	r0, #0
   115f0:	bl	10ccc <dcgettext@plt>
   115f4:	ldr	r3, [pc, #120]	; 11674 <__assert_fail@plt+0x7ec>
   115f8:	mov	r1, r0
   115fc:	b	11568 <__assert_fail@plt+0x6e0>
   11600:	ldr	r5, [pc, #76]	; 11654 <__assert_fail@plt+0x7cc>
   11604:	mov	r4, r5
   11608:	mov	r2, #5
   1160c:	ldr	r1, [pc, #100]	; 11678 <__assert_fail@plt+0x7f0>
   11610:	mov	r0, #0
   11614:	bl	10ccc <dcgettext@plt>
   11618:	ldr	r1, [r7]
   1161c:	bl	10c48 <fputs_unlocked@plt>
   11620:	b	11520 <__assert_fail@plt+0x698>
   11624:	andeq	r7, r2, r0, asr #2
   11628:	andeq	r5, r1, r0, lsr #13
   1162c:	muleq	r2, ip, r1
   11630:	andeq	r5, r1, r8, asr #13
   11634:	andeq	r7, r2, ip, asr #2
   11638:	andeq	r5, r1, ip, ror #11
   1163c:	andeq	r5, r1, ip, ror #13
   11640:	andeq	r5, r1, r0, lsr r7
   11644:	andeq	r5, r1, r8, ror #14
   11648:			; <UNDEFINED> instruction: 0x000157b4
   1164c:	andeq	r5, r1, r4, lsr #16
   11650:	andeq	r5, r1, r4, asr r8
   11654:	muleq	r1, r8, r6
   11658:	andeq	r5, r1, ip, lsl #17
   1165c:	andeq	r5, r1, r4, lsr #17
   11660:	andeq	r5, r1, ip, asr #17
   11664:	ldrdeq	r5, [r1], -ip
   11668:	andeq	r5, r1, r8, lsr #18
   1166c:	andeq	r5, r1, r4, asr #18
   11670:	andeq	r5, r1, r8, ror #13
   11674:	andeq	r5, r1, ip, asr #19
   11678:	andeq	r5, r1, r0, ror #17
   1167c:	andeq	r0, r0, r0
   11680:	push	{r4, r6, r7, lr}
   11684:	mov	r6, r0
   11688:	ldr	r4, [pc, #60]	; 116cc <__assert_fail@plt+0x844>
   1168c:	mov	r7, r1
   11690:	ldrd	r2, [r4]
   11694:	orrs	r3, r2, r3
   11698:	moveq	r0, #1
   1169c:	beq	116c4 <__assert_fail@plt+0x83c>
   116a0:	mov	r2, #5
   116a4:	ldr	r1, [pc, #36]	; 116d0 <__assert_fail@plt+0x848>
   116a8:	mov	r0, #0
   116ac:	bl	10ccc <dcgettext@plt>
   116b0:	mov	r1, #0
   116b4:	mov	r2, r0
   116b8:	mov	r0, r1
   116bc:	bl	10d38 <error@plt>
   116c0:	mov	r0, #0
   116c4:	strd	r6, [r4]
   116c8:	pop	{r4, r6, r7, pc}
   116cc:	andeq	r7, r2, r8, asr r1
   116d0:	andeq	r5, r1, ip, asr sl
   116d4:	push	{r4, r6, r7, lr}
   116d8:	mov	r6, r0
   116dc:	ldr	r4, [pc, #60]	; 11720 <__assert_fail@plt+0x898>
   116e0:	mov	r7, r1
   116e4:	ldrd	r2, [r4, #8]
   116e8:	orrs	r3, r2, r3
   116ec:	moveq	r0, #1
   116f0:	beq	11718 <__assert_fail@plt+0x890>
   116f4:	mov	r2, #5
   116f8:	ldr	r1, [pc, #36]	; 11724 <__assert_fail@plt+0x89c>
   116fc:	mov	r0, #0
   11700:	bl	10ccc <dcgettext@plt>
   11704:	mov	r1, #0
   11708:	mov	r2, r0
   1170c:	mov	r0, r1
   11710:	bl	10d38 <error@plt>
   11714:	mov	r0, #0
   11718:	strd	r6, [r4, #8]
   1171c:	pop	{r4, r6, r7, pc}
   11720:	andeq	r7, r2, r8, asr r1
   11724:	andeq	r5, r1, ip, lsl #21
   11728:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   1172c:	mov	r6, r0
   11730:	ldr	r8, [pc, #216]	; 11810 <__assert_fail@plt+0x988>
   11734:	mov	r7, r1
   11738:	ldr	r3, [r8, #16]
   1173c:	cmp	r3, #0
   11740:	beq	117b0 <__assert_fail@plt+0x928>
   11744:	ldr	r2, [r8, #20]
   11748:	add	r1, r2, r3, lsl #3
   1174c:	ldrd	r4, [r1, #-8]
   11750:	cmp	r5, r7
   11754:	cmpeq	r4, r0
   11758:	movhi	r4, #0
   1175c:	movhi	r5, #0
   11760:	bls	117b8 <__assert_fail@plt+0x930>
   11764:	ldr	r1, [r8, #24]
   11768:	cmp	r3, r1
   1176c:	beq	117d0 <__assert_fail@plt+0x948>
   11770:	ldr	sl, [r8, #28]
   11774:	mov	fp, #0
   11778:	cmp	r5, fp
   1177c:	lsl	r1, r3, #3
   11780:	cmpeq	r4, sl
   11784:	add	r3, r3, #1
   11788:	strd	r6, [r2, r1]
   1178c:	str	r3, [r8, #16]
   11790:	popls	{r4, r5, r6, r7, r8, sl, fp, pc}
   11794:	mov	r3, #0
   11798:	mvn	r2, #0
   1179c:	cmp	r5, r3
   117a0:	cmpeq	r4, r2
   117a4:	bhi	117f0 <__assert_fail@plt+0x968>
   117a8:	str	r4, [r8, #28]
   117ac:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   117b0:	mov	r4, #0
   117b4:	mov	r5, #0
   117b8:	ldr	r1, [r8, #24]
   117bc:	subs	r4, r6, r4
   117c0:	sbc	r5, r7, r5
   117c4:	cmp	r3, r1
   117c8:	ldr	r2, [r8, #20]
   117cc:	bne	11770 <__assert_fail@plt+0x8e8>
   117d0:	mov	r0, r2
   117d4:	ldr	r1, [pc, #56]	; 11814 <__assert_fail@plt+0x98c>
   117d8:	mov	r2, #8
   117dc:	bl	14810 <__assert_fail@plt+0x3988>
   117e0:	ldr	r3, [r8, #16]
   117e4:	mov	r2, r0
   117e8:	str	r0, [r8, #20]
   117ec:	b	11770 <__assert_fail@plt+0x8e8>
   117f0:	mov	r2, #5
   117f4:	ldr	r1, [pc, #28]	; 11818 <__assert_fail@plt+0x990>
   117f8:	mov	r0, #0
   117fc:	bl	10ccc <dcgettext@plt>
   11800:	mov	r1, #0
   11804:	mov	r2, r0
   11808:	mov	r0, #1
   1180c:	bl	10d38 <error@plt>
   11810:	andeq	r7, r2, r8, asr r1
   11814:	andeq	r7, r2, r0, ror r1
   11818:			; <UNDEFINED> instruction: 0x00015abc
   1181c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   11820:	sub	sp, sp, #20
   11824:	ldrb	fp, [r0]
   11828:	cmp	fp, #0
   1182c:	beq	11988 <__assert_fail@plt+0xb00>
   11830:	mov	r8, #0
   11834:	mov	r3, #0
   11838:	mov	r2, #0
   1183c:	mov	r4, r0
   11840:	mov	sl, r8
   11844:	mov	r9, r8
   11848:	mov	r6, r8
   1184c:	mov	r7, r8
   11850:	strd	r2, [sp]
   11854:	mov	r3, #1
   11858:	str	r3, [sp, #12]
   1185c:	cmp	fp, #44	; 0x2c
   11860:	beq	11990 <__assert_fail@plt+0xb08>
   11864:	bl	10d80 <__ctype_b_loc@plt>
   11868:	lsl	r2, fp, #1
   1186c:	ldr	r1, [r0]
   11870:	ldrh	r5, [r1, r2]
   11874:	ands	r5, r5, #1
   11878:	bne	11990 <__assert_fail@plt+0xb08>
   1187c:	cmp	fp, #47	; 0x2f
   11880:	beq	119e0 <__assert_fail@plt+0xb58>
   11884:	cmp	fp, #43	; 0x2b
   11888:	beq	11a5c <__assert_fail@plt+0xbd4>
   1188c:	sub	ip, fp, #48	; 0x30
   11890:	cmp	ip, #9
   11894:	bhi	11ad0 <__assert_fail@plt+0xc48>
   11898:	cmp	r6, #0
   1189c:	beq	11a44 <__assert_fail@plt+0xbbc>
   118a0:	ldrd	r0, [sp]
   118a4:	add	r3, pc, #612	; 0x264
   118a8:	ldrd	r2, [r3]
   118ac:	cmp	r1, r3
   118b0:	cmpeq	r0, r2
   118b4:	bhi	118e0 <__assert_fail@plt+0xa58>
   118b8:	mov	r2, #10
   118bc:	ldr	r3, [sp, #4]
   118c0:	umull	r0, r1, r0, r2
   118c4:	mla	r1, r2, r3, r1
   118c8:	ldrd	r2, [sp]
   118cc:	adds	r0, r0, ip
   118d0:	adc	r1, r1, ip, asr #31
   118d4:	cmp	r1, r3
   118d8:	cmpeq	r0, r2
   118dc:	bcs	11b08 <__assert_fail@plt+0xc80>
   118e0:	ldr	r1, [pc, #560]	; 11b18 <__assert_fail@plt+0xc90>
   118e4:	mov	r0, r8
   118e8:	bl	10e7c <strspn@plt>
   118ec:	mov	r1, r0
   118f0:	mov	r4, r0
   118f4:	mov	r0, r8
   118f8:	bl	14bf8 <__assert_fail@plt+0x3d70>
   118fc:	mov	r2, #5
   11900:	ldr	r1, [pc, #532]	; 11b1c <__assert_fail@plt+0xc94>
   11904:	sub	r4, r4, #1
   11908:	add	r4, r8, r4
   1190c:	add	r4, r4, #1
   11910:	mov	r5, r0
   11914:	mov	r0, r7
   11918:	bl	10ccc <dcgettext@plt>
   1191c:	mov	fp, r0
   11920:	mov	r0, r5
   11924:	bl	141d0 <__assert_fail@plt+0x3348>
   11928:	mov	r2, fp
   1192c:	mov	r1, r7
   11930:	mov	r3, r0
   11934:	mov	r0, #0
   11938:	bl	10d38 <error@plt>
   1193c:	mov	r0, r5
   11940:	bl	12218 <__assert_fail@plt+0x1390>
   11944:	ldrb	fp, [r4]
   11948:	str	r7, [sp, #12]
   1194c:	cmp	fp, #0
   11950:	bne	1185c <__assert_fail@plt+0x9d4>
   11954:	ldr	r3, [sp, #12]
   11958:	tst	r6, r3
   1195c:	beq	1197c <__assert_fail@plt+0xaf4>
   11960:	cmp	r9, #0
   11964:	ldrd	r0, [sp]
   11968:	bne	11ab8 <__assert_fail@plt+0xc30>
   1196c:	cmp	sl, #0
   11970:	beq	11aac <__assert_fail@plt+0xc24>
   11974:	bl	116d4 <__assert_fail@plt+0x84c>
   11978:	str	r0, [sp, #12]
   1197c:	ldr	r3, [sp, #12]
   11980:	cmp	r3, #0
   11984:	beq	11a3c <__assert_fail@plt+0xbb4>
   11988:	add	sp, sp, #20
   1198c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   11990:	cmp	r6, #0
   11994:	beq	119bc <__assert_fail@plt+0xb34>
   11998:	cmp	r9, #0
   1199c:	ldrd	r0, [sp]
   119a0:	bne	11a30 <__assert_fail@plt+0xba8>
   119a4:	cmp	sl, #0
   119a8:	beq	119d0 <__assert_fail@plt+0xb48>
   119ac:	bl	116d4 <__assert_fail@plt+0x84c>
   119b0:	subs	sl, r0, #0
   119b4:	beq	11a3c <__assert_fail@plt+0xbb4>
   119b8:	mov	r6, r7
   119bc:	ldrb	fp, [r4, #1]
   119c0:	add	r4, r4, #1
   119c4:	cmp	fp, #0
   119c8:	bne	1185c <__assert_fail@plt+0x9d4>
   119cc:	b	11954 <__assert_fail@plt+0xacc>
   119d0:	bl	11728 <__assert_fail@plt+0x8a0>
   119d4:	mov	r9, r7
   119d8:	mov	r6, sl
   119dc:	b	119bc <__assert_fail@plt+0xb34>
   119e0:	cmp	r6, #0
   119e4:	moveq	sl, r7
   119e8:	moveq	r9, #1
   119ec:	beq	119bc <__assert_fail@plt+0xb34>
   119f0:	mov	r2, #5
   119f4:	ldr	r1, [pc, #292]	; 11b20 <__assert_fail@plt+0xc98>
   119f8:	mov	r0, r7
   119fc:	bl	10ccc <dcgettext@plt>
   11a00:	mov	sl, r5
   11a04:	mov	r9, r0
   11a08:	mov	r0, r4
   11a0c:	bl	141d0 <__assert_fail@plt+0x3348>
   11a10:	mov	r2, r9
   11a14:	mov	r1, r7
   11a18:	mov	r9, r6
   11a1c:	mov	r3, r0
   11a20:	mov	r0, r5
   11a24:	bl	10d38 <error@plt>
   11a28:	str	r7, [sp, #12]
   11a2c:	b	119bc <__assert_fail@plt+0xb34>
   11a30:	bl	11680 <__assert_fail@plt+0x7f8>
   11a34:	subs	r9, r0, #0
   11a38:	bne	119b8 <__assert_fail@plt+0xb30>
   11a3c:	mov	r0, #1
   11a40:	bl	10d8c <exit@plt>
   11a44:	mov	r0, ip
   11a48:	asr	r1, ip, #31
   11a4c:	mov	r8, r4
   11a50:	strd	r0, [sp]
   11a54:	mov	r6, #1
   11a58:	b	119bc <__assert_fail@plt+0xb34>
   11a5c:	cmp	r6, #0
   11a60:	moveq	r9, r7
   11a64:	moveq	sl, #1
   11a68:	beq	119bc <__assert_fail@plt+0xb34>
   11a6c:	mov	r2, #5
   11a70:	ldr	r1, [pc, #172]	; 11b24 <__assert_fail@plt+0xc9c>
   11a74:	mov	r0, r7
   11a78:	bl	10ccc <dcgettext@plt>
   11a7c:	mov	sl, r6
   11a80:	mov	r9, r0
   11a84:	mov	r0, r4
   11a88:	bl	141d0 <__assert_fail@plt+0x3348>
   11a8c:	mov	r2, r9
   11a90:	mov	r1, r7
   11a94:	mov	r9, r5
   11a98:	mov	r3, r0
   11a9c:	mov	r0, r5
   11aa0:	bl	10d38 <error@plt>
   11aa4:	str	r7, [sp, #12]
   11aa8:	b	119bc <__assert_fail@plt+0xb34>
   11aac:	add	sp, sp, #20
   11ab0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   11ab4:	b	11728 <__assert_fail@plt+0x8a0>
   11ab8:	bl	11680 <__assert_fail@plt+0x7f8>
   11abc:	str	r0, [sp, #12]
   11ac0:	ldr	r3, [sp, #12]
   11ac4:	cmp	r3, #0
   11ac8:	bne	11988 <__assert_fail@plt+0xb00>
   11acc:	b	11a3c <__assert_fail@plt+0xbb4>
   11ad0:	mov	r2, #5
   11ad4:	ldr	r1, [pc, #76]	; 11b28 <__assert_fail@plt+0xca0>
   11ad8:	mov	r0, r5
   11adc:	bl	10ccc <dcgettext@plt>
   11ae0:	mov	r6, r0
   11ae4:	mov	r0, r4
   11ae8:	bl	141d0 <__assert_fail@plt+0x3348>
   11aec:	mov	r2, r6
   11af0:	mov	r1, r5
   11af4:	mov	r3, r0
   11af8:	mov	r0, r5
   11afc:	bl	10d38 <error@plt>
   11b00:	mov	r0, #1
   11b04:	bl	10d8c <exit@plt>
   11b08:	strd	r0, [sp]
   11b0c:	b	119bc <__assert_fail@plt+0xb34>
   11b10:	ldmibls	r9, {r0, r3, r4, r7, r8, fp, ip, pc}
   11b14:	ldmibne	r9, {r0, r3, r4, r7, r8, fp, ip, pc}
   11b18:	andeq	r5, r1, r8, asr fp
   11b1c:	andeq	r5, r1, r4, ror #22
   11b20:	ldrdeq	r5, [r1], -r4
   11b24:	andeq	r5, r1, r0, lsl #22
   11b28:	andeq	r5, r1, ip, lsr #22
   11b2c:	ldr	ip, [pc, #292]	; 11c58 <__assert_fail@plt+0xdd0>
   11b30:	push	{r4, r5, r6, r7, r8, lr}
   11b34:	ldr	lr, [ip, #16]
   11b38:	ldr	r0, [ip, #20]
   11b3c:	cmp	lr, #0
   11b40:	beq	11bd8 <__assert_fail@plt+0xd50>
   11b44:	ldrd	r6, [r0]
   11b48:	orrs	r3, r6, r7
   11b4c:	mov	r4, r6
   11b50:	mov	r5, r7
   11b54:	movne	r1, #0
   11b58:	bne	11b80 <__assert_fail@plt+0xcf8>
   11b5c:	b	11c20 <__assert_fail@plt+0xd98>
   11b60:	ldrd	r2, [r0, #8]!
   11b64:	orrs	r8, r2, r3
   11b68:	beq	11c20 <__assert_fail@plt+0xd98>
   11b6c:	cmp	r3, r5
   11b70:	cmpeq	r2, r4
   11b74:	bls	11c40 <__assert_fail@plt+0xdb8>
   11b78:	mov	r4, r2
   11b7c:	mov	r5, r3
   11b80:	add	r1, r1, #1
   11b84:	cmp	lr, r1
   11b88:	bne	11b60 <__assert_fail@plt+0xcd8>
   11b8c:	ldrd	r0, [ip, #8]
   11b90:	orrs	r3, r0, r1
   11b94:	beq	11ba4 <__assert_fail@plt+0xd1c>
   11b98:	ldrd	r2, [ip]
   11b9c:	orrs	r3, r2, r3
   11ba0:	bne	11c4c <__assert_fail@plt+0xdc4>
   11ba4:	cmp	lr, #1
   11ba8:	beq	11bbc <__assert_fail@plt+0xd34>
   11bac:	mov	r2, #0
   11bb0:	mov	r3, #0
   11bb4:	strd	r2, [ip, #32]
   11bb8:	pop	{r4, r5, r6, r7, r8, pc}
   11bbc:	ldrd	r2, [ip]
   11bc0:	orr	r2, r2, r0
   11bc4:	orr	r3, r3, r1
   11bc8:	orrs	r3, r2, r3
   11bcc:	bne	11bac <__assert_fail@plt+0xd24>
   11bd0:	strd	r6, [ip, #32]
   11bd4:	pop	{r4, r5, r6, r7, r8, pc}
   11bd8:	ldrd	r2, [ip, #8]
   11bdc:	orrs	r1, r2, r3
   11be0:	beq	11c04 <__assert_fail@plt+0xd7c>
   11be4:	ldrd	r0, [ip]
   11be8:	orrs	r1, r0, r1
   11bec:	bne	11c4c <__assert_fail@plt+0xdc4>
   11bf0:	mov	r1, r2
   11bf4:	mov	r3, #0
   11bf8:	str	r1, [ip, #28]
   11bfc:	strd	r2, [ip, #32]
   11c00:	pop	{r4, r5, r6, r7, r8, pc}
   11c04:	ldrd	r2, [ip]
   11c08:	orrs	r1, r2, r3
   11c0c:	bne	11bf0 <__assert_fail@plt+0xd68>
   11c10:	mov	r2, #8
   11c14:	mov	r3, #0
   11c18:	mov	r1, #8
   11c1c:	b	11bf8 <__assert_fail@plt+0xd70>
   11c20:	ldr	r1, [pc, #52]	; 11c5c <__assert_fail@plt+0xdd4>
   11c24:	mov	r2, #5
   11c28:	mov	r0, #0
   11c2c:	bl	10ccc <dcgettext@plt>
   11c30:	mov	r1, #0
   11c34:	mov	r2, r0
   11c38:	mov	r0, #1
   11c3c:	bl	10d38 <error@plt>
   11c40:	mov	r2, #5
   11c44:	ldr	r1, [pc, #20]	; 11c60 <__assert_fail@plt+0xdd8>
   11c48:	b	11c28 <__assert_fail@plt+0xda0>
   11c4c:	mov	r2, #5
   11c50:	ldr	r1, [pc, #12]	; 11c64 <__assert_fail@plt+0xddc>
   11c54:	b	11c28 <__assert_fail@plt+0xda0>
   11c58:	andeq	r7, r2, r8, asr r1
   11c5c:	andeq	r5, r1, r0, lsl #23
   11c60:	muleq	r1, r8, fp
   11c64:			; <UNDEFINED> instruction: 0x00015bb4
   11c68:	push	{r4, r5, r6, r7, r8, lr}
   11c6c:	mov	ip, #0
   11c70:	ldr	lr, [pc, #256]	; 11d78 <__assert_fail@plt+0xef0>
   11c74:	strb	ip, [r3]
   11c78:	mov	r6, r0
   11c7c:	ldrd	r4, [lr, #32]
   11c80:	mov	r7, r1
   11c84:	orrs	ip, r4, r5
   11c88:	bne	11d3c <__assert_fail@plt+0xeb4>
   11c8c:	ldr	r1, [r2]
   11c90:	ldr	ip, [lr, #16]
   11c94:	cmp	ip, r1
   11c98:	bls	11ce0 <__assert_fail@plt+0xe58>
   11c9c:	ldr	r5, [lr, #20]
   11ca0:	lsl	r4, r1, #3
   11ca4:	add	r0, r5, r4
   11ca8:	add	r4, r5, r4
   11cac:	ldrd	r4, [r4]
   11cb0:	cmp	r7, r5
   11cb4:	cmpeq	r6, r4
   11cb8:	bcs	11cd0 <__assert_fail@plt+0xe48>
   11cbc:	b	11d30 <__assert_fail@plt+0xea8>
   11cc0:	ldrd	r4, [r0, #8]!
   11cc4:	cmp	r7, r5
   11cc8:	cmpeq	r6, r4
   11ccc:	bcc	11d5c <__assert_fail@plt+0xed4>
   11cd0:	add	r1, r1, #1
   11cd4:	cmp	r1, ip
   11cd8:	bne	11cc0 <__assert_fail@plt+0xe38>
   11cdc:	str	ip, [r2]
   11ce0:	ldrd	r4, [lr]
   11ce4:	orrs	r2, r4, r5
   11ce8:	bne	11d64 <__assert_fail@plt+0xedc>
   11cec:	ldrd	r4, [lr, #8]
   11cf0:	orrs	r2, r4, r5
   11cf4:	moveq	r2, #1
   11cf8:	strbeq	r2, [r3]
   11cfc:	beq	11d30 <__assert_fail@plt+0xea8>
   11d00:	ldr	r1, [lr, #20]
   11d04:	mov	r2, r4
   11d08:	add	ip, r1, ip, lsl #3
   11d0c:	adds	r4, r4, r6
   11d10:	ldrd	r0, [ip, #-8]
   11d14:	mov	r3, r5
   11d18:	adc	r5, r5, r7
   11d1c:	subs	r0, r6, r0
   11d20:	sbc	r1, r7, r1
   11d24:	bl	153f0 <__assert_fail@plt+0x4568>
   11d28:	subs	r4, r4, r2
   11d2c:	sbc	r5, r5, r3
   11d30:	mov	r0, r4
   11d34:	mov	r1, r5
   11d38:	pop	{r4, r5, r6, r7, r8, pc}
   11d3c:	mov	r2, r4
   11d40:	mov	r3, r5
   11d44:	adds	r4, r4, r6
   11d48:	adc	r5, r5, r7
   11d4c:	bl	153f0 <__assert_fail@plt+0x4568>
   11d50:	subs	r4, r4, r2
   11d54:	sbc	r5, r5, r3
   11d58:	b	11d30 <__assert_fail@plt+0xea8>
   11d5c:	str	r1, [r2]
   11d60:	b	11d30 <__assert_fail@plt+0xea8>
   11d64:	mov	r2, r4
   11d68:	mov	r3, r5
   11d6c:	mov	r0, r6
   11d70:	mov	r1, r7
   11d74:	b	11d44 <__assert_fail@plt+0xebc>
   11d78:	andeq	r7, r2, r8, asr r1
   11d7c:	ldr	r3, [pc, #24]	; 11d9c <__assert_fail@plt+0xf14>
   11d80:	cmp	r0, #0
   11d84:	mov	r2, #0
   11d88:	strb	r2, [r3, #40]	; 0x28
   11d8c:	ldreq	r2, [pc, #12]	; 11da0 <__assert_fail@plt+0xf18>
   11d90:	strne	r0, [r3, #44]	; 0x2c
   11d94:	streq	r2, [r3, #44]	; 0x2c
   11d98:	bx	lr
   11d9c:	andeq	r7, r2, r8, asr r1
   11da0:	andeq	r7, r2, r0, ror #1
   11da4:	push	{r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   11da8:	subs	r6, r0, #0
   11dac:	ldr	r5, [pc, #368]	; 11f24 <__assert_fail@plt+0x109c>
   11db0:	beq	11e30 <__assert_fail@plt+0xfa8>
   11db4:	ldr	r7, [r5, #48]	; 0x30
   11db8:	cmp	r7, #0
   11dbc:	beq	11f10 <__assert_fail@plt+0x1088>
   11dc0:	bl	10da4 <__errno_location@plt>
   11dc4:	ldr	r3, [r6]
   11dc8:	ldr	r1, [pc, #344]	; 11f28 <__assert_fail@plt+0x10a0>
   11dcc:	tst	r3, #32
   11dd0:	ldr	r4, [r0]
   11dd4:	mov	r8, r0
   11dd8:	mov	r0, r7
   11ddc:	moveq	r4, #0
   11de0:	bl	10c60 <strcmp@plt>
   11de4:	cmp	r0, #0
   11de8:	mov	r0, r6
   11dec:	beq	11f08 <__assert_fail@plt+0x1080>
   11df0:	bl	12118 <__assert_fail@plt+0x1290>
   11df4:	cmp	r0, #0
   11df8:	ldrne	r4, [r8]
   11dfc:	cmp	r4, #0
   11e00:	beq	11e30 <__assert_fail@plt+0xfa8>
   11e04:	ldr	r2, [r5, #48]	; 0x30
   11e08:	mov	r1, #3
   11e0c:	mov	r0, #0
   11e10:	bl	1404c <__assert_fail@plt+0x31c4>
   11e14:	mov	r1, r4
   11e18:	ldr	r2, [pc, #268]	; 11f2c <__assert_fail@plt+0x10a4>
   11e1c:	mov	r3, r0
   11e20:	mov	r0, #0
   11e24:	bl	10d38 <error@plt>
   11e28:	mov	r3, #1
   11e2c:	str	r3, [r5, #52]	; 0x34
   11e30:	ldr	r3, [r5, #44]	; 0x2c
   11e34:	add	r2, r3, #4
   11e38:	ldr	r6, [r3]
   11e3c:	str	r2, [r5, #44]	; 0x2c
   11e40:	cmp	r6, #0
   11e44:	beq	11efc <__assert_fail@plt+0x1074>
   11e48:	ldr	r8, [pc, #216]	; 11f28 <__assert_fail@plt+0x10a0>
   11e4c:	ldr	fp, [pc, #220]	; 11f30 <__assert_fail@plt+0x10a8>
   11e50:	ldr	sl, [pc, #212]	; 11f2c <__assert_fail@plt+0x10a4>
   11e54:	mov	r7, #1
   11e58:	mov	r9, #3
   11e5c:	b	11eb8 <__assert_fail@plt+0x1030>
   11e60:	ldr	r4, [fp]
   11e64:	strb	r7, [r5, #40]	; 0x28
   11e68:	cmp	r4, #0
   11e6c:	bne	11ee4 <__assert_fail@plt+0x105c>
   11e70:	bl	10da4 <__errno_location@plt>
   11e74:	mov	r2, r6
   11e78:	mov	r1, r9
   11e7c:	ldr	r6, [r0]
   11e80:	mov	r0, r4
   11e84:	bl	1404c <__assert_fail@plt+0x31c4>
   11e88:	mov	r2, sl
   11e8c:	mov	r1, r6
   11e90:	mov	r3, r0
   11e94:	mov	r0, r4
   11e98:	bl	10d38 <error@plt>
   11e9c:	ldr	r3, [r5, #44]	; 0x2c
   11ea0:	str	r7, [r5, #52]	; 0x34
   11ea4:	add	r2, r3, #4
   11ea8:	ldr	r6, [r3]
   11eac:	str	r2, [r5, #44]	; 0x2c
   11eb0:	cmp	r6, #0
   11eb4:	beq	11efc <__assert_fail@plt+0x1074>
   11eb8:	mov	r1, r8
   11ebc:	mov	r0, r6
   11ec0:	bl	10c60 <strcmp@plt>
   11ec4:	cmp	r0, #0
   11ec8:	beq	11e60 <__assert_fail@plt+0xfd8>
   11ecc:	ldr	r1, [pc, #96]	; 11f34 <__assert_fail@plt+0x10ac>
   11ed0:	mov	r0, r6
   11ed4:	bl	10e4c <fopen64@plt>
   11ed8:	mov	r4, r0
   11edc:	cmp	r4, #0
   11ee0:	beq	11e70 <__assert_fail@plt+0xfe8>
   11ee4:	mov	r0, r4
   11ee8:	mov	r1, #2
   11eec:	str	r6, [r5, #48]	; 0x30
   11ef0:	bl	120e4 <__assert_fail@plt+0x125c>
   11ef4:	mov	r0, r4
   11ef8:	pop	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   11efc:	mov	r4, #0
   11f00:	mov	r0, r4
   11f04:	pop	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   11f08:	bl	10e40 <clearerr_unlocked@plt>
   11f0c:	b	11dfc <__assert_fail@plt+0xf74>
   11f10:	ldr	r3, [pc, #32]	; 11f38 <__assert_fail@plt+0x10b0>
   11f14:	mov	r2, #340	; 0x154
   11f18:	ldr	r1, [pc, #28]	; 11f3c <__assert_fail@plt+0x10b4>
   11f1c:	ldr	r0, [pc, #28]	; 11f40 <__assert_fail@plt+0x10b8>
   11f20:	bl	10e88 <__assert_fail@plt>
   11f24:	andeq	r7, r2, r8, asr r1
   11f28:	andeq	r5, r1, r4, lsl #24
   11f2c:	andeq	r5, r1, r4, asr fp
   11f30:	andeq	r7, r2, r8, asr #2
   11f34:	andeq	r5, r1, r8, lsl #24
   11f38:	andeq	r5, r1, r0, asr sl
   11f3c:	andeq	r5, r1, r4, ror #23
   11f40:	strdeq	r5, [r1], -r8
   11f44:	ldr	r3, [pc, #52]	; 11f80 <__assert_fail@plt+0x10f8>
   11f48:	ldrb	r3, [r3, #40]	; 0x28
   11f4c:	cmp	r3, #0
   11f50:	bxeq	lr
   11f54:	ldr	r3, [pc, #40]	; 11f84 <__assert_fail@plt+0x10fc>
   11f58:	push	{r4, lr}
   11f5c:	ldr	r0, [r3]
   11f60:	bl	12118 <__assert_fail@plt+0x1290>
   11f64:	cmp	r0, #0
   11f68:	popeq	{r4, pc}
   11f6c:	bl	10da4 <__errno_location@plt>
   11f70:	ldr	r2, [pc, #16]	; 11f88 <__assert_fail@plt+0x1100>
   11f74:	ldr	r1, [r0]
   11f78:	mov	r0, #1
   11f7c:	bl	10d38 <error@plt>
   11f80:	andeq	r7, r2, r8, asr r1
   11f84:	andeq	r7, r2, r8, asr #2
   11f88:	andeq	r5, r1, r4, lsl #24
   11f8c:	push	{r4, lr}
   11f90:	mov	r2, #5
   11f94:	ldr	r4, [pc, #44]	; 11fc8 <__assert_fail@plt+0x1140>
   11f98:	ldr	r1, [pc, #44]	; 11fcc <__assert_fail@plt+0x1144>
   11f9c:	mov	r0, #0
   11fa0:	bl	10ccc <dcgettext@plt>
   11fa4:	ldr	r1, [r4]
   11fa8:	bl	10c48 <fputs_unlocked@plt>
   11fac:	ldr	r1, [pc, #28]	; 11fd0 <__assert_fail@plt+0x1148>
   11fb0:	mov	r2, #5
   11fb4:	mov	r0, #0
   11fb8:	bl	10ccc <dcgettext@plt>
   11fbc:	ldr	r1, [r4]
   11fc0:	pop	{r4, lr}
   11fc4:	b	10c48 <fputs_unlocked@plt>
   11fc8:	andeq	r7, r2, ip, asr #2
   11fcc:	andeq	r5, r1, ip, lsl #24
   11fd0:	andeq	r5, r1, ip, asr #24
   11fd4:	ldr	r3, [pc, #4]	; 11fe0 <__assert_fail@plt+0x1158>
   11fd8:	str	r0, [r3]
   11fdc:	bx	lr
   11fe0:	muleq	r2, r4, r1
   11fe4:	ldr	r3, [pc, #4]	; 11ff0 <__assert_fail@plt+0x1168>
   11fe8:	strb	r0, [r3, #4]
   11fec:	bx	lr
   11ff0:	muleq	r2, r4, r1
   11ff4:	ldr	r3, [pc, #192]	; 120bc <__assert_fail@plt+0x1234>
   11ff8:	push	{r4, r5, r6, lr}
   11ffc:	sub	sp, sp, #8
   12000:	ldr	r0, [r3]
   12004:	bl	14d60 <__assert_fail@plt+0x3ed8>
   12008:	cmp	r0, #0
   1200c:	beq	12030 <__assert_fail@plt+0x11a8>
   12010:	ldr	r4, [pc, #168]	; 120c0 <__assert_fail@plt+0x1238>
   12014:	ldrb	r3, [r4, #4]
   12018:	cmp	r3, #0
   1201c:	beq	1204c <__assert_fail@plt+0x11c4>
   12020:	bl	10da4 <__errno_location@plt>
   12024:	ldr	r3, [r0]
   12028:	cmp	r3, #32
   1202c:	bne	1204c <__assert_fail@plt+0x11c4>
   12030:	ldr	r3, [pc, #140]	; 120c4 <__assert_fail@plt+0x123c>
   12034:	ldr	r0, [r3]
   12038:	bl	14d60 <__assert_fail@plt+0x3ed8>
   1203c:	cmp	r0, #0
   12040:	bne	12094 <__assert_fail@plt+0x120c>
   12044:	add	sp, sp, #8
   12048:	pop	{r4, r5, r6, pc}
   1204c:	mov	r2, #5
   12050:	ldr	r1, [pc, #112]	; 120c8 <__assert_fail@plt+0x1240>
   12054:	mov	r0, #0
   12058:	bl	10ccc <dcgettext@plt>
   1205c:	ldr	r4, [r4]
   12060:	cmp	r4, #0
   12064:	mov	r5, r0
   12068:	beq	120a0 <__assert_fail@plt+0x1218>
   1206c:	bl	10da4 <__errno_location@plt>
   12070:	ldr	r6, [r0]
   12074:	mov	r0, r4
   12078:	bl	14038 <__assert_fail@plt+0x31b0>
   1207c:	mov	r1, r6
   12080:	str	r5, [sp]
   12084:	ldr	r2, [pc, #64]	; 120cc <__assert_fail@plt+0x1244>
   12088:	mov	r3, r0
   1208c:	mov	r0, #0
   12090:	bl	10d38 <error@plt>
   12094:	ldr	r3, [pc, #52]	; 120d0 <__assert_fail@plt+0x1248>
   12098:	ldr	r0, [r3]
   1209c:	bl	10c90 <_exit@plt>
   120a0:	bl	10da4 <__errno_location@plt>
   120a4:	mov	r3, r5
   120a8:	ldr	r2, [pc, #36]	; 120d4 <__assert_fail@plt+0x124c>
   120ac:	ldr	r1, [r0]
   120b0:	mov	r0, r4
   120b4:	bl	10d38 <error@plt>
   120b8:	b	12094 <__assert_fail@plt+0x120c>
   120bc:	andeq	r7, r2, ip, asr #2
   120c0:	muleq	r2, r4, r1
   120c4:	andeq	r7, r2, r0, asr #2
   120c8:			; <UNDEFINED> instruction: 0x000159b8
   120cc:	andeq	r5, r1, ip, asr #27
   120d0:	andeq	r7, r2, ip, ror #1
   120d4:	andeq	r5, r1, r4, asr fp
   120d8:	push	{r4, r5}
   120dc:	pop	{r4, r5}
   120e0:	b	10c6c <posix_fadvise64@plt>
   120e4:	cmp	r0, #0
   120e8:	bxeq	lr
   120ec:	push	{r4, lr}
   120f0:	sub	sp, sp, #16
   120f4:	mov	r4, r1
   120f8:	bl	10dd4 <fileno@plt>
   120fc:	mov	r2, #0
   12100:	mov	r3, #0
   12104:	str	r4, [sp, #8]
   12108:	strd	r2, [sp]
   1210c:	bl	10c6c <posix_fadvise64@plt>
   12110:	add	sp, sp, #16
   12114:	pop	{r4, pc}
   12118:	push	{r4, r5, lr}
   1211c:	sub	sp, sp, #12
   12120:	mov	r4, r0
   12124:	bl	10dd4 <fileno@plt>
   12128:	cmp	r0, #0
   1212c:	mov	r0, r4
   12130:	blt	121ac <__assert_fail@plt+0x1324>
   12134:	bl	10d5c <__freading@plt>
   12138:	cmp	r0, #0
   1213c:	bne	12178 <__assert_fail@plt+0x12f0>
   12140:	mov	r0, r4
   12144:	bl	121b8 <__assert_fail@plt+0x1330>
   12148:	cmp	r0, #0
   1214c:	beq	121a8 <__assert_fail@plt+0x1320>
   12150:	bl	10da4 <__errno_location@plt>
   12154:	mov	r5, r0
   12158:	mov	r0, r4
   1215c:	ldr	r4, [r5]
   12160:	bl	10dec <fclose@plt>
   12164:	cmp	r4, #0
   12168:	mvnne	r0, #0
   1216c:	strne	r4, [r5]
   12170:	add	sp, sp, #12
   12174:	pop	{r4, r5, pc}
   12178:	mov	r0, r4
   1217c:	bl	10dd4 <fileno@plt>
   12180:	mov	r3, #1
   12184:	str	r3, [sp]
   12188:	mov	r2, #0
   1218c:	mov	r3, #0
   12190:	bl	10d08 <lseek64@plt>
   12194:	mvn	r3, #0
   12198:	mvn	r2, #0
   1219c:	cmp	r1, r3
   121a0:	cmpeq	r0, r2
   121a4:	bne	12140 <__assert_fail@plt+0x12b8>
   121a8:	mov	r0, r4
   121ac:	add	sp, sp, #12
   121b0:	pop	{r4, r5, lr}
   121b4:	b	10dec <fclose@plt>
   121b8:	push	{r4, lr}
   121bc:	subs	r4, r0, #0
   121c0:	sub	sp, sp, #8
   121c4:	beq	121e0 <__assert_fail@plt+0x1358>
   121c8:	bl	10d5c <__freading@plt>
   121cc:	cmp	r0, #0
   121d0:	beq	121e0 <__assert_fail@plt+0x1358>
   121d4:	ldr	r3, [r4]
   121d8:	tst	r3, #256	; 0x100
   121dc:	bne	121f0 <__assert_fail@plt+0x1368>
   121e0:	mov	r0, r4
   121e4:	add	sp, sp, #8
   121e8:	pop	{r4, lr}
   121ec:	b	10c78 <fflush@plt>
   121f0:	mov	r3, #1
   121f4:	str	r3, [sp]
   121f8:	mov	r2, #0
   121fc:	mov	r3, #0
   12200:	mov	r0, r4
   12204:	bl	12270 <__assert_fail@plt+0x13e8>
   12208:	mov	r0, r4
   1220c:	add	sp, sp, #8
   12210:	pop	{r4, lr}
   12214:	b	10c78 <fflush@plt>
   12218:	push	{r4, r5, lr}
   1221c:	sub	sp, sp, #12
   12220:	mov	r5, r0
   12224:	bl	10da4 <__errno_location@plt>
   12228:	mov	r2, #0
   1222c:	mov	r4, r0
   12230:	ldr	r3, [r0]
   12234:	str	r2, [r4]
   12238:	mov	r0, r5
   1223c:	str	r3, [sp]
   12240:	str	r3, [sp, #4]
   12244:	bl	10c84 <free@plt>
   12248:	ldr	r3, [r4]
   1224c:	add	r2, sp, #8
   12250:	cmp	r3, #0
   12254:	moveq	r3, #4
   12258:	movne	r3, #0
   1225c:	add	r3, r2, r3
   12260:	ldr	r3, [r3, #-8]
   12264:	str	r3, [r4]
   12268:	add	sp, sp, #12
   1226c:	pop	{r4, r5, pc}
   12270:	push	{r4, r5, r6, r7, r8, lr}
   12274:	sub	sp, sp, #8
   12278:	ldmib	r0, {ip, lr}
   1227c:	mov	r4, r0
   12280:	ldr	r5, [sp, #32]
   12284:	cmp	lr, ip
   12288:	beq	122a0 <__assert_fail@plt+0x1418>
   1228c:	str	r5, [sp, #32]
   12290:	mov	r0, r4
   12294:	add	sp, sp, #8
   12298:	pop	{r4, r5, r6, r7, r8, lr}
   1229c:	b	10df8 <fseeko64@plt>
   122a0:	ldr	lr, [r0, #20]
   122a4:	ldr	ip, [r0, #16]
   122a8:	cmp	lr, ip
   122ac:	bne	1228c <__assert_fail@plt+0x1404>
   122b0:	ldr	r8, [r0, #36]	; 0x24
   122b4:	cmp	r8, #0
   122b8:	bne	1228c <__assert_fail@plt+0x1404>
   122bc:	mov	r6, r2
   122c0:	mov	r7, r3
   122c4:	bl	10dd4 <fileno@plt>
   122c8:	mov	r2, r6
   122cc:	mov	r3, r7
   122d0:	str	r5, [sp]
   122d4:	bl	10d08 <lseek64@plt>
   122d8:	mvn	r3, #0
   122dc:	mvn	r2, #0
   122e0:	cmp	r1, r3
   122e4:	cmpeq	r0, r2
   122e8:	beq	12308 <__assert_fail@plt+0x1480>
   122ec:	ldr	r3, [r4]
   122f0:	strd	r0, [r4, #80]	; 0x50
   122f4:	mov	r0, r8
   122f8:	bic	r3, r3, #16
   122fc:	str	r3, [r4]
   12300:	add	sp, sp, #8
   12304:	pop	{r4, r5, r6, r7, r8, pc}
   12308:	mvn	r0, #0
   1230c:	b	12300 <__assert_fail@plt+0x1478>
   12310:	push	{r4, r5, r6, lr}
   12314:	subs	r4, r0, #0
   12318:	beq	1238c <__assert_fail@plt+0x1504>
   1231c:	mov	r1, #47	; 0x2f
   12320:	bl	10e28 <strrchr@plt>
   12324:	subs	r5, r0, #0
   12328:	beq	12378 <__assert_fail@plt+0x14f0>
   1232c:	add	r6, r5, #1
   12330:	sub	r3, r6, r4
   12334:	cmp	r3, #6
   12338:	ble	12378 <__assert_fail@plt+0x14f0>
   1233c:	mov	r2, #7
   12340:	ldr	r1, [pc, #96]	; 123a8 <__assert_fail@plt+0x1520>
   12344:	sub	r0, r5, #6
   12348:	bl	10e64 <strncmp@plt>
   1234c:	cmp	r0, #0
   12350:	bne	12378 <__assert_fail@plt+0x14f0>
   12354:	mov	r2, #3
   12358:	ldr	r1, [pc, #76]	; 123ac <__assert_fail@plt+0x1524>
   1235c:	mov	r0, r6
   12360:	bl	10e64 <strncmp@plt>
   12364:	cmp	r0, #0
   12368:	movne	r4, r6
   1236c:	ldreq	r3, [pc, #60]	; 123b0 <__assert_fail@plt+0x1528>
   12370:	addeq	r4, r5, #4
   12374:	streq	r4, [r3]
   12378:	ldr	r2, [pc, #52]	; 123b4 <__assert_fail@plt+0x152c>
   1237c:	ldr	r3, [pc, #52]	; 123b8 <__assert_fail@plt+0x1530>
   12380:	str	r4, [r2]
   12384:	str	r4, [r3]
   12388:	pop	{r4, r5, r6, pc}
   1238c:	ldr	r3, [pc, #40]	; 123bc <__assert_fail@plt+0x1534>
   12390:	mov	r2, #55	; 0x37
   12394:	mov	r1, #1
   12398:	ldr	r3, [r3]
   1239c:	ldr	r0, [pc, #28]	; 123c0 <__assert_fail@plt+0x1538>
   123a0:	bl	10cfc <fwrite@plt>
   123a4:	bl	10e70 <abort@plt>
   123a8:	andeq	r5, r1, ip, lsl #28
   123ac:	andeq	r5, r1, r4, lsl lr
   123b0:	andeq	r7, r2, r0, lsr r1
   123b4:	muleq	r2, ip, r1
   123b8:	andeq	r7, r2, r4, lsr r1
   123bc:	andeq	r7, r2, r0, asr #2
   123c0:	ldrdeq	r5, [r1], -r4
   123c4:	push	{r4, r5, r6, lr}
   123c8:	mov	r2, #48	; 0x30
   123cc:	mov	r4, r1
   123d0:	mov	r1, #0
   123d4:	mov	r5, r0
   123d8:	bl	10dbc <memset@plt>
   123dc:	cmp	r4, #10
   123e0:	beq	123f0 <__assert_fail@plt+0x1568>
   123e4:	str	r4, [r5]
   123e8:	mov	r0, r5
   123ec:	pop	{r4, r5, r6, pc}
   123f0:	bl	10e70 <abort@plt>
   123f4:	push	{r4, r5, r6, lr}
   123f8:	mov	r4, r0
   123fc:	mov	r5, r1
   12400:	bl	14ddc <__assert_fail@plt+0x3f54>
   12404:	ldrb	r3, [r0]
   12408:	bic	r3, r3, #32
   1240c:	cmp	r3, #85	; 0x55
   12410:	bne	12470 <__assert_fail@plt+0x15e8>
   12414:	ldrb	r3, [r0, #1]
   12418:	bic	r3, r3, #32
   1241c:	cmp	r3, #84	; 0x54
   12420:	bne	124ac <__assert_fail@plt+0x1624>
   12424:	ldrb	r3, [r0, #2]
   12428:	bic	r3, r3, #32
   1242c:	cmp	r3, #70	; 0x46
   12430:	bne	124ac <__assert_fail@plt+0x1624>
   12434:	ldrb	r3, [r0, #3]
   12438:	cmp	r3, #45	; 0x2d
   1243c:	bne	124ac <__assert_fail@plt+0x1624>
   12440:	ldrb	r3, [r0, #4]
   12444:	cmp	r3, #56	; 0x38
   12448:	bne	124ac <__assert_fail@plt+0x1624>
   1244c:	ldrb	r3, [r0, #5]
   12450:	cmp	r3, #0
   12454:	bne	124ac <__assert_fail@plt+0x1624>
   12458:	ldrb	r2, [r4]
   1245c:	ldr	r3, [pc, #152]	; 124fc <__assert_fail@plt+0x1674>
   12460:	ldr	r0, [pc, #152]	; 12500 <__assert_fail@plt+0x1678>
   12464:	cmp	r2, #96	; 0x60
   12468:	movne	r0, r3
   1246c:	pop	{r4, r5, r6, pc}
   12470:	cmp	r3, #71	; 0x47
   12474:	bne	124ac <__assert_fail@plt+0x1624>
   12478:	ldrb	r3, [r0, #1]
   1247c:	bic	r3, r3, #32
   12480:	cmp	r3, #66	; 0x42
   12484:	bne	124ac <__assert_fail@plt+0x1624>
   12488:	ldrb	r3, [r0, #2]
   1248c:	cmp	r3, #49	; 0x31
   12490:	bne	124ac <__assert_fail@plt+0x1624>
   12494:	ldrb	r3, [r0, #3]
   12498:	cmp	r3, #56	; 0x38
   1249c:	bne	124ac <__assert_fail@plt+0x1624>
   124a0:	ldrb	r3, [r0, #4]
   124a4:	cmp	r3, #48	; 0x30
   124a8:	beq	124c0 <__assert_fail@plt+0x1638>
   124ac:	ldr	r3, [pc, #80]	; 12504 <__assert_fail@plt+0x167c>
   124b0:	cmp	r5, #9
   124b4:	ldr	r0, [pc, #76]	; 12508 <__assert_fail@plt+0x1680>
   124b8:	movne	r0, r3
   124bc:	pop	{r4, r5, r6, pc}
   124c0:	ldrb	r3, [r0, #5]
   124c4:	cmp	r3, #51	; 0x33
   124c8:	bne	124ac <__assert_fail@plt+0x1624>
   124cc:	ldrb	r3, [r0, #6]
   124d0:	cmp	r3, #48	; 0x30
   124d4:	bne	124ac <__assert_fail@plt+0x1624>
   124d8:	ldrb	r3, [r0, #7]
   124dc:	cmp	r3, #0
   124e0:	bne	124ac <__assert_fail@plt+0x1624>
   124e4:	ldrb	r2, [r4]
   124e8:	ldr	r3, [pc, #28]	; 1250c <__assert_fail@plt+0x1684>
   124ec:	ldr	r0, [pc, #28]	; 12510 <__assert_fail@plt+0x1688>
   124f0:	cmp	r2, #96	; 0x60
   124f4:	movne	r0, r3
   124f8:	pop	{r4, r5, r6, pc}
   124fc:	andeq	r5, r1, r0, ror lr
   12500:	andeq	r5, r1, ip, ror #28
   12504:	andeq	r5, r1, r0, lsl #29
   12508:	andeq	r5, r1, ip, ror lr
   1250c:	andeq	r5, r1, r8, ror lr
   12510:	andeq	r5, r1, r4, ror lr
   12514:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12518:	sub	sp, sp, #116	; 0x74
   1251c:	mov	sl, r0
   12520:	str	r3, [sp, #24]
   12524:	mov	r3, #1
   12528:	mov	r8, r1
   1252c:	str	r2, [sp, #56]	; 0x38
   12530:	str	r3, [sp, #36]	; 0x24
   12534:	bl	10d14 <__ctype_get_mb_cur_max@plt>
   12538:	ldr	r3, [sp, #156]	; 0x9c
   1253c:	mov	fp, r8
   12540:	mov	r2, #0
   12544:	lsr	r3, r3, #1
   12548:	and	r3, r3, #1
   1254c:	str	r2, [sp, #68]	; 0x44
   12550:	str	r3, [sp, #28]
   12554:	str	r2, [sp, #40]	; 0x28
   12558:	str	r2, [sp, #44]	; 0x2c
   1255c:	str	r2, [sp, #52]	; 0x34
   12560:	str	r2, [sp, #64]	; 0x40
   12564:	str	r2, [sp, #72]	; 0x48
   12568:	str	sl, [sp, #32]
   1256c:	str	r0, [sp, #76]	; 0x4c
   12570:	ldr	r3, [sp, #152]	; 0x98
   12574:	cmp	r3, #10
   12578:	ldrls	pc, [pc, r3, lsl #2]
   1257c:	b	1373c <__assert_fail@plt+0x28b4>
   12580:	andeq	r2, r1, ip, lsr #11
   12584:	muleq	r1, r4, r8
   12588:			; <UNDEFINED> instruction: 0x000128b8
   1258c:	ldrdeq	r2, [r1], -ip
   12590:	andeq	r2, r1, r8, lsl #20
   12594:	ldrdeq	r2, [r1], -ip
   12598:			; <UNDEFINED> instruction: 0x000129b4
   1259c:	strdeq	r2, [r1], -r0
   125a0:	andeq	r2, r1, r8, lsl #18
   125a4:	andeq	r2, r1, r8, lsl #18
   125a8:	andeq	r2, r1, r8, lsl #18
   125ac:	mov	r3, #0
   125b0:	mov	r7, r3
   125b4:	str	r3, [sp, #28]
   125b8:	ldr	r3, [sp, #44]	; 0x2c
   125bc:	mov	sl, #0
   125c0:	eor	r3, r3, #1
   125c4:	str	r3, [sp, #60]	; 0x3c
   125c8:	ldr	r3, [sp, #24]
   125cc:	cmn	r3, #1
   125d0:	beq	12b34 <__assert_fail@plt+0x1cac>
   125d4:	ldr	r3, [sp, #24]
   125d8:	subs	r5, r3, sl
   125dc:	movne	r5, #1
   125e0:	cmp	r5, #0
   125e4:	beq	12b4c <__assert_fail@plt+0x1cc4>
   125e8:	ldr	r3, [sp, #152]	; 0x98
   125ec:	ldr	r8, [sp, #44]	; 0x2c
   125f0:	cmp	r3, #2
   125f4:	moveq	r8, #0
   125f8:	andne	r8, r8, #1
   125fc:	ldr	r3, [sp, #52]	; 0x34
   12600:	adds	r9, r3, #0
   12604:	movne	r9, #1
   12608:	ands	r6, r9, r8
   1260c:	beq	12fb4 <__assert_fail@plt+0x212c>
   12610:	ldr	r2, [sp, #52]	; 0x34
   12614:	ldr	r1, [sp, #24]
   12618:	cmp	r2, #1
   1261c:	mov	r3, r2
   12620:	movls	r3, #0
   12624:	movhi	r3, #1
   12628:	cmn	r1, #1
   1262c:	movne	r3, #0
   12630:	cmp	r3, #0
   12634:	add	r4, sl, r2
   12638:	beq	12648 <__assert_fail@plt+0x17c0>
   1263c:	ldr	r0, [sp, #56]	; 0x38
   12640:	bl	10d98 <strlen@plt>
   12644:	str	r0, [sp, #24]
   12648:	ldr	r3, [sp, #24]
   1264c:	cmp	r3, r4
   12650:	ldr	r3, [sp, #56]	; 0x38
   12654:	add	r3, r3, sl
   12658:	str	r3, [sp, #48]	; 0x30
   1265c:	bcc	12fc0 <__assert_fail@plt+0x2138>
   12660:	mov	r0, r3
   12664:	ldr	r2, [sp, #52]	; 0x34
   12668:	ldr	r1, [sp, #64]	; 0x40
   1266c:	bl	10cb4 <memcmp@plt>
   12670:	cmp	r0, #0
   12674:	bne	12fc0 <__assert_fail@plt+0x2138>
   12678:	ldr	r3, [sp, #28]
   1267c:	cmp	r3, #0
   12680:	bne	1383c <__assert_fail@plt+0x29b4>
   12684:	ldr	r3, [sp, #48]	; 0x30
   12688:	ldrb	r4, [r3]
   1268c:	cmp	r4, #126	; 0x7e
   12690:	ldrls	pc, [pc, r4, lsl #2]
   12694:	b	12f54 <__assert_fail@plt+0x20cc>
   12698:	andeq	r2, r1, r8, ror sp
   1269c:	andeq	r2, r1, r4, asr pc
   126a0:	andeq	r2, r1, r4, asr pc
   126a4:	andeq	r2, r1, r4, asr pc
   126a8:	andeq	r2, r1, r4, asr pc
   126ac:	andeq	r2, r1, r4, asr pc
   126b0:	andeq	r2, r1, r4, asr pc
   126b4:	andeq	r2, r1, ip, asr sp
   126b8:	andeq	r2, r1, r0, asr #26
   126bc:	andeq	r2, r1, ip, lsr pc
   126c0:	andeq	r2, r1, r0, lsr #25
   126c4:	andeq	r2, r1, r4, lsl #25
   126c8:	andeq	r2, r1, r8, lsl pc
   126cc:	strdeq	r2, [r1], -r4
   126d0:	andeq	r2, r1, r4, asr pc
   126d4:	andeq	r2, r1, r4, asr pc
   126d8:	andeq	r2, r1, r4, asr pc
   126dc:	andeq	r2, r1, r4, asr pc
   126e0:	andeq	r2, r1, r4, asr pc
   126e4:	andeq	r2, r1, r4, asr pc
   126e8:	andeq	r2, r1, r4, asr pc
   126ec:	andeq	r2, r1, r4, asr pc
   126f0:	andeq	r2, r1, r4, asr pc
   126f4:	andeq	r2, r1, r4, asr pc
   126f8:	andeq	r2, r1, r4, asr pc
   126fc:	andeq	r2, r1, r4, asr pc
   12700:	andeq	r2, r1, r4, asr pc
   12704:	andeq	r2, r1, r4, asr pc
   12708:	andeq	r2, r1, r4, asr pc
   1270c:	andeq	r2, r1, r4, asr pc
   12710:	andeq	r2, r1, r4, asr pc
   12714:	andeq	r2, r1, r4, asr pc
   12718:	andeq	r2, r1, r4, lsr pc
   1271c:	andeq	r2, r1, r8, ror #28
   12720:	andeq	r2, r1, r8, ror #28
   12724:	andeq	r2, r1, r8, ror sl
   12728:	andeq	r2, r1, r8, ror #28
   1272c:	andeq	r2, r1, r0, lsl #30
   12730:	andeq	r2, r1, r8, ror #28
   12734:	ldrdeq	r2, [r1], -r4
   12738:	andeq	r2, r1, r8, ror #28
   1273c:	andeq	r2, r1, r8, ror #28
   12740:	andeq	r2, r1, r8, ror #28
   12744:	andeq	r2, r1, r0, lsl #30
   12748:	andeq	r2, r1, r0, lsl #30
   1274c:	andeq	r2, r1, r0, lsl #30
   12750:	andeq	r2, r1, r0, lsl #30
   12754:	andeq	r2, r1, r0, lsl #30
   12758:	andeq	r2, r1, r0, lsl #30
   1275c:	andeq	r2, r1, r0, lsl #30
   12760:	andeq	r2, r1, r0, lsl #30
   12764:	andeq	r2, r1, r0, lsl #30
   12768:	andeq	r2, r1, r0, lsl #30
   1276c:	andeq	r2, r1, r0, lsl #30
   12770:	andeq	r2, r1, r0, lsl #30
   12774:	andeq	r2, r1, r0, lsl #30
   12778:	andeq	r2, r1, r0, lsl #30
   1277c:	andeq	r2, r1, r0, lsl #30
   12780:	andeq	r2, r1, r0, lsl #30
   12784:	andeq	r2, r1, r8, ror #28
   12788:	andeq	r2, r1, r8, ror #28
   1278c:	andeq	r2, r1, r8, ror #28
   12790:	andeq	r2, r1, r8, ror #28
   12794:	andeq	r2, r1, r4, lsr #29
   12798:	andeq	r2, r1, r4, asr pc
   1279c:	andeq	r2, r1, r0, lsl #30
   127a0:	andeq	r2, r1, r0, lsl #30
   127a4:	andeq	r2, r1, r0, lsl #30
   127a8:	andeq	r2, r1, r0, lsl #30
   127ac:	andeq	r2, r1, r0, lsl #30
   127b0:	andeq	r2, r1, r0, lsl #30
   127b4:	andeq	r2, r1, r0, lsl #30
   127b8:	andeq	r2, r1, r0, lsl #30
   127bc:	andeq	r2, r1, r0, lsl #30
   127c0:	andeq	r2, r1, r0, lsl #30
   127c4:	andeq	r2, r1, r0, lsl #30
   127c8:	andeq	r2, r1, r0, lsl #30
   127cc:	andeq	r2, r1, r0, lsl #30
   127d0:	andeq	r2, r1, r0, lsl #30
   127d4:	andeq	r2, r1, r0, lsl #30
   127d8:	andeq	r2, r1, r0, lsl #30
   127dc:	andeq	r2, r1, r0, lsl #30
   127e0:	andeq	r2, r1, r0, lsl #30
   127e4:	andeq	r2, r1, r0, lsl #30
   127e8:	andeq	r2, r1, r0, lsl #30
   127ec:	andeq	r2, r1, r0, lsl #30
   127f0:	andeq	r2, r1, r0, lsl #30
   127f4:	andeq	r2, r1, r0, lsl #30
   127f8:	andeq	r2, r1, r0, lsl #30
   127fc:	andeq	r2, r1, r0, lsl #30
   12800:	andeq	r2, r1, r0, lsl #30
   12804:	andeq	r2, r1, r8, ror #28
   12808:	andeq	r2, r1, r4, asr #23
   1280c:	andeq	r2, r1, r0, lsl #30
   12810:	andeq	r2, r1, r8, ror #28
   12814:	andeq	r2, r1, r0, lsl #30
   12818:	andeq	r2, r1, r8, ror #28
   1281c:	andeq	r2, r1, r0, lsl #30
   12820:	andeq	r2, r1, r0, lsl #30
   12824:	andeq	r2, r1, r0, lsl #30
   12828:	andeq	r2, r1, r0, lsl #30
   1282c:	andeq	r2, r1, r0, lsl #30
   12830:	andeq	r2, r1, r0, lsl #30
   12834:	andeq	r2, r1, r0, lsl #30
   12838:	andeq	r2, r1, r0, lsl #30
   1283c:	andeq	r2, r1, r0, lsl #30
   12840:	andeq	r2, r1, r0, lsl #30
   12844:	andeq	r2, r1, r0, lsl #30
   12848:	andeq	r2, r1, r0, lsl #30
   1284c:	andeq	r2, r1, r0, lsl #30
   12850:	andeq	r2, r1, r0, lsl #30
   12854:	andeq	r2, r1, r0, lsl #30
   12858:	andeq	r2, r1, r0, lsl #30
   1285c:	andeq	r2, r1, r0, lsl #30
   12860:	andeq	r2, r1, r0, lsl #30
   12864:	andeq	r2, r1, r0, lsl #30
   12868:	andeq	r2, r1, r0, lsl #30
   1286c:	andeq	r2, r1, r0, lsl #30
   12870:	andeq	r2, r1, r0, lsl #30
   12874:	andeq	r2, r1, r0, lsl #30
   12878:	andeq	r2, r1, r0, lsl #30
   1287c:	andeq	r2, r1, r0, lsl #30
   12880:	andeq	r2, r1, r0, lsl #30
   12884:	andeq	r2, r1, r8, asr sl
   12888:	andeq	r2, r1, r8, ror #28
   1288c:	andeq	r2, r1, r8, asr sl
   12890:	andeq	r2, r1, r8, ror sl
   12894:	mov	r3, #1
   12898:	str	r3, [sp, #28]
   1289c:	str	r3, [sp, #52]	; 0x34
   128a0:	ldr	r3, [pc, #4000]	; 13848 <__assert_fail@plt+0x29c0>
   128a4:	mov	r7, #0
   128a8:	str	r3, [sp, #64]	; 0x40
   128ac:	mov	r3, #2
   128b0:	str	r3, [sp, #152]	; 0x98
   128b4:	b	125b8 <__assert_fail@plt+0x1730>
   128b8:	ldr	r3, [sp, #28]
   128bc:	cmp	r3, #0
   128c0:	beq	12a1c <__assert_fail@plt+0x1b94>
   128c4:	mov	r3, #1
   128c8:	str	r3, [sp, #52]	; 0x34
   128cc:	ldr	r3, [pc, #3956]	; 13848 <__assert_fail@plt+0x29c0>
   128d0:	mov	r7, #0
   128d4:	str	r3, [sp, #64]	; 0x40
   128d8:	b	125b8 <__assert_fail@plt+0x1730>
   128dc:	mov	r3, #1
   128e0:	str	r3, [sp, #44]	; 0x2c
   128e4:	str	r3, [sp, #52]	; 0x34
   128e8:	str	r3, [sp, #28]
   128ec:	b	128a0 <__assert_fail@plt+0x1a18>
   128f0:	mov	r3, #0
   128f4:	str	r3, [sp, #28]
   128f8:	mov	r3, #1
   128fc:	str	r3, [sp, #44]	; 0x2c
   12900:	mov	r7, #0
   12904:	b	125b8 <__assert_fail@plt+0x1730>
   12908:	ldr	r3, [sp, #152]	; 0x98
   1290c:	cmp	r3, #10
   12910:	beq	12954 <__assert_fail@plt+0x1acc>
   12914:	mov	r2, #5
   12918:	ldr	r1, [pc, #3884]	; 1384c <__assert_fail@plt+0x29c4>
   1291c:	mov	r0, #0
   12920:	bl	10ccc <dcgettext@plt>
   12924:	ldr	r2, [pc, #3872]	; 1384c <__assert_fail@plt+0x29c4>
   12928:	cmp	r0, r2
   1292c:	str	r0, [sp, #164]	; 0xa4
   12930:	beq	13938 <__assert_fail@plt+0x2ab0>
   12934:	mov	r2, #5
   12938:	ldr	r1, [pc, #3848]	; 13848 <__assert_fail@plt+0x29c0>
   1293c:	mov	r0, #0
   12940:	bl	10ccc <dcgettext@plt>
   12944:	ldr	r2, [pc, #3836]	; 13848 <__assert_fail@plt+0x29c0>
   12948:	cmp	r0, r2
   1294c:	str	r0, [sp, #168]	; 0xa8
   12950:	beq	13928 <__assert_fail@plt+0x2aa0>
   12954:	ldr	r7, [sp, #28]
   12958:	cmp	r7, #0
   1295c:	movne	r7, #0
   12960:	bne	12994 <__assert_fail@plt+0x1b0c>
   12964:	ldr	r3, [sp, #164]	; 0xa4
   12968:	ldrb	r3, [r3]
   1296c:	cmp	r3, #0
   12970:	beq	13948 <__assert_fail@plt+0x2ac0>
   12974:	ldr	r2, [sp, #164]	; 0xa4
   12978:	ldr	r1, [sp, #32]
   1297c:	cmp	fp, r7
   12980:	strbhi	r3, [r1, r7]
   12984:	ldrb	r3, [r2, #1]!
   12988:	add	r7, r7, #1
   1298c:	cmp	r3, #0
   12990:	bne	1297c <__assert_fail@plt+0x1af4>
   12994:	ldr	r0, [sp, #168]	; 0xa8
   12998:	bl	10d98 <strlen@plt>
   1299c:	ldr	r3, [sp, #168]	; 0xa8
   129a0:	str	r3, [sp, #64]	; 0x40
   129a4:	mov	r3, #1
   129a8:	str	r3, [sp, #44]	; 0x2c
   129ac:	str	r0, [sp, #52]	; 0x34
   129b0:	b	125b8 <__assert_fail@plt+0x1730>
   129b4:	mov	r3, #1
   129b8:	str	r3, [sp, #44]	; 0x2c
   129bc:	str	r3, [sp, #52]	; 0x34
   129c0:	str	r3, [sp, #28]
   129c4:	ldr	r3, [pc, #3716]	; 13850 <__assert_fail@plt+0x29c8>
   129c8:	mov	r7, #0
   129cc:	str	r3, [sp, #64]	; 0x40
   129d0:	mov	r3, #5
   129d4:	str	r3, [sp, #152]	; 0x98
   129d8:	b	125b8 <__assert_fail@plt+0x1730>
   129dc:	ldr	r3, [sp, #28]
   129e0:	cmp	r3, #0
   129e4:	beq	136e4 <__assert_fail@plt+0x285c>
   129e8:	ldr	r3, [sp, #28]
   129ec:	mov	r7, #0
   129f0:	str	r3, [sp, #44]	; 0x2c
   129f4:	mov	r3, #1
   129f8:	str	r3, [sp, #52]	; 0x34
   129fc:	ldr	r3, [pc, #3660]	; 13850 <__assert_fail@plt+0x29c8>
   12a00:	str	r3, [sp, #64]	; 0x40
   12a04:	b	125b8 <__assert_fail@plt+0x1730>
   12a08:	ldr	r3, [sp, #28]
   12a0c:	cmp	r3, #0
   12a10:	mov	r3, #1
   12a14:	streq	r3, [sp, #44]	; 0x2c
   12a18:	bne	1289c <__assert_fail@plt+0x1a14>
   12a1c:	cmp	fp, #0
   12a20:	beq	13714 <__assert_fail@plt+0x288c>
   12a24:	ldr	r3, [sp, #32]
   12a28:	mov	r2, #39	; 0x27
   12a2c:	mov	r7, #1
   12a30:	strb	r2, [r3]
   12a34:	mov	r3, #0
   12a38:	str	r3, [sp, #28]
   12a3c:	mov	r3, #1
   12a40:	str	r3, [sp, #52]	; 0x34
   12a44:	ldr	r3, [pc, #3580]	; 13848 <__assert_fail@plt+0x29c0>
   12a48:	str	r3, [sp, #64]	; 0x40
   12a4c:	mov	r3, #2
   12a50:	str	r3, [sp, #152]	; 0x98
   12a54:	b	125b8 <__assert_fail@plt+0x1730>
   12a58:	ldr	r3, [sp, #24]
   12a5c:	cmn	r3, #1
   12a60:	beq	13678 <__assert_fail@plt+0x27f0>
   12a64:	ldr	r3, [sp, #24]
   12a68:	subs	r3, r3, #1
   12a6c:	movne	r3, #1
   12a70:	cmp	r3, #0
   12a74:	bne	12a80 <__assert_fail@plt+0x1bf8>
   12a78:	cmp	sl, #0
   12a7c:	beq	12e6c <__assert_fail@plt+0x1fe4>
   12a80:	ldr	r3, [sp, #152]	; 0x98
   12a84:	mov	r5, #0
   12a88:	sub	r2, r3, #2
   12a8c:	mov	r8, r5
   12a90:	clz	r2, r2
   12a94:	lsr	r2, r2, #5
   12a98:	ldr	r3, [sp, #60]	; 0x3c
   12a9c:	ldr	r1, [sp, #28]
   12aa0:	orr	r3, r2, r3
   12aa4:	eor	r3, r3, #1
   12aa8:	orr	r3, r1, r3
   12aac:	tst	r3, #255	; 0xff
   12ab0:	bne	131dc <__assert_fail@plt+0x2354>
   12ab4:	cmp	r6, #0
   12ab8:	bne	12c08 <__assert_fail@plt+0x1d80>
   12abc:	ldr	r3, [sp, #40]	; 0x28
   12ac0:	eor	r8, r8, #1
   12ac4:	and	r8, r8, r3
   12ac8:	add	sl, sl, #1
   12acc:	uxtb	r6, r8
   12ad0:	cmp	r6, #0
   12ad4:	beq	12b08 <__assert_fail@plt+0x1c80>
   12ad8:	cmp	fp, r7
   12adc:	movhi	r2, #39	; 0x27
   12ae0:	ldrhi	r3, [sp, #32]
   12ae4:	strbhi	r2, [r3, r7]
   12ae8:	add	r3, r7, #1
   12aec:	cmp	fp, r3
   12af0:	movhi	r1, #39	; 0x27
   12af4:	ldrhi	r2, [sp, #32]
   12af8:	add	r7, r7, #2
   12afc:	strbhi	r1, [r2, r3]
   12b00:	mov	r3, #0
   12b04:	str	r3, [sp, #40]	; 0x28
   12b08:	cmp	r7, fp
   12b0c:	ldrcc	r3, [sp, #32]
   12b10:	strbcc	r4, [r3, r7]
   12b14:	ldr	r3, [sp, #36]	; 0x24
   12b18:	cmp	r5, #0
   12b1c:	moveq	r3, #0
   12b20:	str	r3, [sp, #36]	; 0x24
   12b24:	ldr	r3, [sp, #24]
   12b28:	add	r7, r7, #1
   12b2c:	cmn	r3, #1
   12b30:	bne	125d4 <__assert_fail@plt+0x174c>
   12b34:	ldr	r3, [sp, #56]	; 0x38
   12b38:	ldrb	r5, [r3, sl]
   12b3c:	adds	r5, r5, #0
   12b40:	movne	r5, #1
   12b44:	cmp	r5, #0
   12b48:	bne	125e8 <__assert_fail@plt+0x1760>
   12b4c:	ldr	r3, [sp, #152]	; 0x98
   12b50:	ldr	r1, [sp, #28]
   12b54:	sub	r3, r3, #2
   12b58:	clz	r3, r3
   12b5c:	lsr	r3, r3, #5
   12b60:	and	r9, r1, r3
   12b64:	cmp	r7, #0
   12b68:	movne	r2, #0
   12b6c:	andeq	r2, r9, #1
   12b70:	cmp	r2, #0
   12b74:	bne	13550 <__assert_fail@plt+0x26c8>
   12b78:	eor	r2, r1, #1
   12b7c:	ands	r3, r3, r2
   12b80:	beq	13a0c <__assert_fail@plt+0x2b84>
   12b84:	ldr	r2, [sp, #68]	; 0x44
   12b88:	cmp	r2, #0
   12b8c:	beq	139f8 <__assert_fail@plt+0x2b70>
   12b90:	ldr	r3, [sp, #36]	; 0x24
   12b94:	cmp	r3, #0
   12b98:	bne	139b0 <__assert_fail@plt+0x2b28>
   12b9c:	ldr	r2, [sp, #72]	; 0x48
   12ba0:	clz	r3, fp
   12ba4:	cmp	r2, #0
   12ba8:	lsr	r3, r3, #5
   12bac:	moveq	r3, #0
   12bb0:	cmp	r3, #0
   12bb4:	beq	13950 <__assert_fail@plt+0x2ac8>
   12bb8:	str	r3, [sp, #68]	; 0x44
   12bbc:	ldr	fp, [sp, #72]	; 0x48
   12bc0:	b	12570 <__assert_fail@plt+0x16e8>
   12bc4:	ldr	r3, [sp, #152]	; 0x98
   12bc8:	cmp	r3, #2
   12bcc:	beq	13220 <__assert_fail@plt+0x2398>
   12bd0:	ldr	r3, [sp, #44]	; 0x2c
   12bd4:	ldr	r2, [sp, #28]
   12bd8:	and	r2, r3, r2
   12bdc:	ands	r2, r9, r2
   12be0:	bne	1322c <__assert_fail@plt+0x23a4>
   12be4:	mov	r4, #92	; 0x5c
   12be8:	mov	r3, r4
   12bec:	ldr	r1, [sp, #44]	; 0x2c
   12bf0:	cmp	r1, #0
   12bf4:	moveq	r5, #0
   12bf8:	moveq	r8, r1
   12bfc:	beq	12a98 <__assert_fail@plt+0x1c10>
   12c00:	mov	r4, r3
   12c04:	mov	r5, #0
   12c08:	ldr	r3, [sp, #28]
   12c0c:	cmp	r3, #0
   12c10:	bne	13214 <__assert_fail@plt+0x238c>
   12c14:	ldr	r3, [sp, #40]	; 0x28
   12c18:	eor	r9, r3, #1
   12c1c:	and	r9, r9, r2
   12c20:	ands	r9, r9, #255	; 0xff
   12c24:	beq	12c68 <__assert_fail@plt+0x1de0>
   12c28:	cmp	fp, r7
   12c2c:	movhi	r2, #39	; 0x27
   12c30:	ldrhi	r3, [sp, #32]
   12c34:	str	r9, [sp, #40]	; 0x28
   12c38:	strbhi	r2, [r3, r7]
   12c3c:	add	r3, r7, #1
   12c40:	cmp	fp, r3
   12c44:	movhi	r1, #36	; 0x24
   12c48:	ldrhi	r2, [sp, #32]
   12c4c:	strbhi	r1, [r2, r3]
   12c50:	add	r3, r7, #2
   12c54:	cmp	fp, r3
   12c58:	add	r7, r7, #3
   12c5c:	ldrhi	r2, [sp, #32]
   12c60:	movhi	r1, #39	; 0x27
   12c64:	strbhi	r1, [r2, r3]
   12c68:	cmp	fp, r7
   12c6c:	movhi	r2, #92	; 0x5c
   12c70:	ldrhi	r3, [sp, #32]
   12c74:	add	sl, sl, #1
   12c78:	strbhi	r2, [r3, r7]
   12c7c:	add	r7, r7, #1
   12c80:	b	12b08 <__assert_fail@plt+0x1c80>
   12c84:	ldr	r3, [sp, #152]	; 0x98
   12c88:	mov	r4, #11
   12c8c:	sub	r2, r3, #2
   12c90:	mov	r3, #118	; 0x76
   12c94:	clz	r2, r2
   12c98:	lsr	r2, r2, #5
   12c9c:	b	12bec <__assert_fail@plt+0x1d64>
   12ca0:	mov	r4, #10
   12ca4:	mov	r3, #110	; 0x6e
   12ca8:	ldr	r2, [sp, #152]	; 0x98
   12cac:	ldr	r1, [sp, #28]
   12cb0:	sub	r2, r2, #2
   12cb4:	clz	r2, r2
   12cb8:	lsr	r2, r2, #5
   12cbc:	ands	r1, r1, r2
   12cc0:	beq	12bec <__assert_fail@plt+0x1d64>
   12cc4:	ldr	sl, [sp, #32]
   12cc8:	mov	r8, fp
   12ccc:	mov	r2, r1
   12cd0:	mov	r3, #2
   12cd4:	str	r3, [sp, #152]	; 0x98
   12cd8:	ldr	r9, [sp, #44]	; 0x2c
   12cdc:	ldr	r3, [sp, #152]	; 0x98
   12ce0:	and	r9, r9, r2
   12ce4:	tst	r9, #255	; 0xff
   12ce8:	movne	r3, #4
   12cec:	str	r3, [sp, #152]	; 0x98
   12cf0:	ldr	r3, [sp, #156]	; 0x9c
   12cf4:	mov	ip, #0
   12cf8:	bic	r3, r3, #2
   12cfc:	str	r3, [sp, #4]
   12d00:	ldr	r3, [sp, #168]	; 0xa8
   12d04:	ldr	r2, [sp, #56]	; 0x38
   12d08:	str	r3, [sp, #16]
   12d0c:	ldr	r3, [sp, #164]	; 0xa4
   12d10:	mov	r1, r8
   12d14:	str	r3, [sp, #12]
   12d18:	ldr	r3, [sp, #152]	; 0x98
   12d1c:	mov	r0, sl
   12d20:	str	r3, [sp]
   12d24:	str	ip, [sp, #8]
   12d28:	ldr	r3, [sp, #24]
   12d2c:	bl	12514 <__assert_fail@plt+0x168c>
   12d30:	mov	fp, r0
   12d34:	mov	r0, fp
   12d38:	add	sp, sp, #116	; 0x74
   12d3c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12d40:	ldr	r3, [sp, #152]	; 0x98
   12d44:	mov	r4, #8
   12d48:	sub	r2, r3, #2
   12d4c:	mov	r3, #98	; 0x62
   12d50:	clz	r2, r2
   12d54:	lsr	r2, r2, #5
   12d58:	b	12bec <__assert_fail@plt+0x1d64>
   12d5c:	ldr	r3, [sp, #152]	; 0x98
   12d60:	mov	r4, #7
   12d64:	sub	r2, r3, #2
   12d68:	mov	r3, #97	; 0x61
   12d6c:	clz	r2, r2
   12d70:	lsr	r2, r2, #5
   12d74:	b	12bec <__assert_fail@plt+0x1d64>
   12d78:	ldr	r3, [sp, #44]	; 0x2c
   12d7c:	cmp	r3, #0
   12d80:	beq	13564 <__assert_fail@plt+0x26dc>
   12d84:	ldr	r3, [sp, #28]
   12d88:	cmp	r3, #0
   12d8c:	bne	1383c <__assert_fail@plt+0x29b4>
   12d90:	ldr	r3, [sp, #152]	; 0x98
   12d94:	sub	r2, r3, #2
   12d98:	ldr	r3, [sp, #40]	; 0x28
   12d9c:	clz	r2, r2
   12da0:	eor	r3, r3, #1
   12da4:	lsr	r2, r2, #5
   12da8:	ands	r3, r2, r3
   12dac:	moveq	r1, r7
   12db0:	beq	12df4 <__assert_fail@plt+0x1f6c>
   12db4:	cmp	fp, r7
   12db8:	movhi	r0, #39	; 0x27
   12dbc:	ldrhi	r1, [sp, #32]
   12dc0:	str	r3, [sp, #40]	; 0x28
   12dc4:	strbhi	r0, [r1, r7]
   12dc8:	add	r1, r7, #1
   12dcc:	cmp	fp, r1
   12dd0:	movhi	ip, #36	; 0x24
   12dd4:	ldrhi	r0, [sp, #32]
   12dd8:	strbhi	ip, [r0, r1]
   12ddc:	add	r1, r7, #2
   12de0:	cmp	fp, r1
   12de4:	movhi	ip, #39	; 0x27
   12de8:	ldrhi	r0, [sp, #32]
   12dec:	strbhi	ip, [r0, r1]
   12df0:	add	r1, r7, #3
   12df4:	cmp	fp, r1
   12df8:	movhi	r0, #92	; 0x5c
   12dfc:	ldrhi	r3, [sp, #32]
   12e00:	add	r7, r1, #1
   12e04:	strbhi	r0, [r3, r1]
   12e08:	cmp	r8, #0
   12e0c:	beq	13750 <__assert_fail@plt+0x28c8>
   12e10:	ldr	r0, [sp, #24]
   12e14:	add	r3, sl, #1
   12e18:	cmp	r3, r0
   12e1c:	bcs	1368c <__assert_fail@plt+0x2804>
   12e20:	ldr	r0, [sp, #56]	; 0x38
   12e24:	ldrb	r3, [r0, r3]
   12e28:	sub	r3, r3, #48	; 0x30
   12e2c:	cmp	r3, #9
   12e30:	bhi	1368c <__assert_fail@plt+0x2804>
   12e34:	cmp	fp, r7
   12e38:	movhi	r3, #48	; 0x30
   12e3c:	ldrhi	r0, [sp, #32]
   12e40:	ldr	r5, [sp, #28]
   12e44:	mov	r4, #48	; 0x30
   12e48:	strbhi	r3, [r0, r7]
   12e4c:	add	r3, r1, #2
   12e50:	cmp	fp, r3
   12e54:	movhi	r0, #48	; 0x30
   12e58:	ldrhi	ip, [sp, #32]
   12e5c:	add	r7, r1, #3
   12e60:	strbhi	r0, [ip, r3]
   12e64:	b	12a98 <__assert_fail@plt+0x1c10>
   12e68:	mov	r5, #0
   12e6c:	ldr	r3, [sp, #152]	; 0x98
   12e70:	sub	r2, r3, #2
   12e74:	ldr	r3, [sp, #28]
   12e78:	clz	r2, r2
   12e7c:	lsr	r2, r2, #5
   12e80:	ands	r8, r3, r2
   12e84:	beq	12a98 <__assert_fail@plt+0x1c10>
   12e88:	mov	r3, r8
   12e8c:	mov	r2, r3
   12e90:	mov	r3, #2
   12e94:	ldr	sl, [sp, #32]
   12e98:	mov	r8, fp
   12e9c:	str	r3, [sp, #152]	; 0x98
   12ea0:	b	12cd8 <__assert_fail@plt+0x1e50>
   12ea4:	ldr	r3, [sp, #152]	; 0x98
   12ea8:	cmp	r3, #2
   12eac:	beq	135d0 <__assert_fail@plt+0x2748>
   12eb0:	cmp	r3, #5
   12eb4:	beq	13590 <__assert_fail@plt+0x2708>
   12eb8:	mov	r5, #0
   12ebc:	sub	r2, r3, #2
   12ec0:	mov	r8, r5
   12ec4:	clz	r2, r2
   12ec8:	mov	r4, #63	; 0x3f
   12ecc:	lsr	r2, r2, #5
   12ed0:	b	12a98 <__assert_fail@plt+0x1c10>
   12ed4:	ldr	r3, [sp, #152]	; 0x98
   12ed8:	cmp	r3, #2
   12edc:	beq	135f0 <__assert_fail@plt+0x2768>
   12ee0:	mov	r2, #0
   12ee4:	str	r5, [sp, #68]	; 0x44
   12ee8:	mov	r8, r2
   12eec:	mov	r4, #39	; 0x27
   12ef0:	b	12a98 <__assert_fail@plt+0x1c10>
   12ef4:	mov	r4, #13
   12ef8:	mov	r3, #114	; 0x72
   12efc:	b	12ca8 <__assert_fail@plt+0x1e20>
   12f00:	ldr	r3, [sp, #152]	; 0x98
   12f04:	mov	r8, #0
   12f08:	sub	r2, r3, #2
   12f0c:	clz	r2, r2
   12f10:	lsr	r2, r2, #5
   12f14:	b	12a98 <__assert_fail@plt+0x1c10>
   12f18:	ldr	r3, [sp, #152]	; 0x98
   12f1c:	mov	r4, #12
   12f20:	sub	r2, r3, #2
   12f24:	mov	r3, #102	; 0x66
   12f28:	clz	r2, r2
   12f2c:	lsr	r2, r2, #5
   12f30:	b	12bec <__assert_fail@plt+0x1d64>
   12f34:	mov	r5, r6
   12f38:	b	12e6c <__assert_fail@plt+0x1fe4>
   12f3c:	ldr	r3, [sp, #152]	; 0x98
   12f40:	sub	r2, r3, #2
   12f44:	mov	r3, #116	; 0x74
   12f48:	clz	r2, r2
   12f4c:	lsr	r2, r2, #5
   12f50:	b	12bec <__assert_fail@plt+0x1d64>
   12f54:	ldr	r8, [sp, #76]	; 0x4c
   12f58:	cmp	r8, #1
   12f5c:	bne	1340c <__assert_fail@plt+0x2584>
   12f60:	bl	10d80 <__ctype_b_loc@plt>
   12f64:	sxth	r3, r4
   12f68:	mov	ip, r8
   12f6c:	lsl	r3, r3, #1
   12f70:	ldr	r2, [r0]
   12f74:	ldrh	r3, [r2, r3]
   12f78:	and	r3, r3, #16384	; 0x4000
   12f7c:	cmp	r3, #0
   12f80:	movne	r5, #1
   12f84:	moveq	r5, #0
   12f88:	moveq	r3, #1
   12f8c:	movne	r3, #0
   12f90:	ldr	r2, [sp, #44]	; 0x2c
   12f94:	and	r3, r3, r2
   12f98:	ands	r8, r3, #255	; 0xff
   12f9c:	bne	132a0 <__assert_fail@plt+0x2418>
   12fa0:	ldr	r3, [sp, #152]	; 0x98
   12fa4:	sub	r2, r3, #2
   12fa8:	clz	r2, r2
   12fac:	lsr	r2, r2, #5
   12fb0:	b	12a98 <__assert_fail@plt+0x1c10>
   12fb4:	ldr	r3, [sp, #56]	; 0x38
   12fb8:	add	r3, r3, sl
   12fbc:	str	r3, [sp, #48]	; 0x30
   12fc0:	ldr	r3, [sp, #48]	; 0x30
   12fc4:	mov	r6, #0
   12fc8:	ldrb	r4, [r3]
   12fcc:	cmp	r4, #126	; 0x7e
   12fd0:	ldrls	pc, [pc, r4, lsl #2]
   12fd4:	b	12f54 <__assert_fail@plt+0x20cc>
   12fd8:	andeq	r2, r1, r8, ror sp
   12fdc:	andeq	r2, r1, r4, asr pc
   12fe0:	andeq	r2, r1, r4, asr pc
   12fe4:	andeq	r2, r1, r4, asr pc
   12fe8:	andeq	r2, r1, r4, asr pc
   12fec:	andeq	r2, r1, r4, asr pc
   12ff0:	andeq	r2, r1, r4, asr pc
   12ff4:	andeq	r2, r1, ip, asr sp
   12ff8:	andeq	r2, r1, r0, asr #26
   12ffc:	ldrdeq	r3, [r1], -r4
   13000:	andeq	r2, r1, r0, lsr #25
   13004:	andeq	r2, r1, r4, lsl #25
   13008:	andeq	r2, r1, r8, lsl pc
   1300c:	strdeq	r2, [r1], -r4
   13010:	andeq	r2, r1, r4, asr pc
   13014:	andeq	r2, r1, r4, asr pc
   13018:	andeq	r2, r1, r4, asr pc
   1301c:	andeq	r2, r1, r4, asr pc
   13020:	andeq	r2, r1, r4, asr pc
   13024:	andeq	r2, r1, r4, asr pc
   13028:	andeq	r2, r1, r4, asr pc
   1302c:	andeq	r2, r1, r4, asr pc
   13030:	andeq	r2, r1, r4, asr pc
   13034:	andeq	r2, r1, r4, asr pc
   13038:	andeq	r2, r1, r4, asr pc
   1303c:	andeq	r2, r1, r4, asr pc
   13040:	andeq	r2, r1, r4, asr pc
   13044:	andeq	r2, r1, r4, asr pc
   13048:	andeq	r2, r1, r4, asr pc
   1304c:	andeq	r2, r1, r4, asr pc
   13050:	andeq	r2, r1, r4, asr pc
   13054:	andeq	r2, r1, r4, asr pc
   13058:	andeq	r2, r1, ip, ror #28
   1305c:	andeq	r2, r1, r8, ror #28
   13060:	andeq	r2, r1, r8, ror #28
   13064:	andeq	r2, r1, r8, ror sl
   13068:	andeq	r2, r1, r8, ror #28
   1306c:	andeq	r2, r1, r0, lsl #30
   13070:	andeq	r2, r1, r8, ror #28
   13074:	ldrdeq	r2, [r1], -r4
   13078:	andeq	r2, r1, r8, ror #28
   1307c:	andeq	r2, r1, r8, ror #28
   13080:	andeq	r2, r1, r8, ror #28
   13084:	andeq	r2, r1, r0, lsl #30
   13088:	andeq	r2, r1, r0, lsl #30
   1308c:	andeq	r2, r1, r0, lsl #30
   13090:	andeq	r2, r1, r0, lsl #30
   13094:	andeq	r2, r1, r0, lsl #30
   13098:	andeq	r2, r1, r0, lsl #30
   1309c:	andeq	r2, r1, r0, lsl #30
   130a0:	andeq	r2, r1, r0, lsl #30
   130a4:	andeq	r2, r1, r0, lsl #30
   130a8:	andeq	r2, r1, r0, lsl #30
   130ac:	andeq	r2, r1, r0, lsl #30
   130b0:	andeq	r2, r1, r0, lsl #30
   130b4:	andeq	r2, r1, r0, lsl #30
   130b8:	andeq	r2, r1, r0, lsl #30
   130bc:	andeq	r2, r1, r0, lsl #30
   130c0:	andeq	r2, r1, r0, lsl #30
   130c4:	andeq	r2, r1, r8, ror #28
   130c8:	andeq	r2, r1, r8, ror #28
   130cc:	andeq	r2, r1, r8, ror #28
   130d0:	andeq	r2, r1, r8, ror #28
   130d4:	andeq	r2, r1, r4, lsr #29
   130d8:	andeq	r2, r1, r4, asr pc
   130dc:	andeq	r2, r1, r0, lsl #30
   130e0:	andeq	r2, r1, r0, lsl #30
   130e4:	andeq	r2, r1, r0, lsl #30
   130e8:	andeq	r2, r1, r0, lsl #30
   130ec:	andeq	r2, r1, r0, lsl #30
   130f0:	andeq	r2, r1, r0, lsl #30
   130f4:	andeq	r2, r1, r0, lsl #30
   130f8:	andeq	r2, r1, r0, lsl #30
   130fc:	andeq	r2, r1, r0, lsl #30
   13100:	andeq	r2, r1, r0, lsl #30
   13104:	andeq	r2, r1, r0, lsl #30
   13108:	andeq	r2, r1, r0, lsl #30
   1310c:	andeq	r2, r1, r0, lsl #30
   13110:	andeq	r2, r1, r0, lsl #30
   13114:	andeq	r2, r1, r0, lsl #30
   13118:	andeq	r2, r1, r0, lsl #30
   1311c:	andeq	r2, r1, r0, lsl #30
   13120:	andeq	r2, r1, r0, lsl #30
   13124:	andeq	r2, r1, r0, lsl #30
   13128:	andeq	r2, r1, r0, lsl #30
   1312c:	andeq	r2, r1, r0, lsl #30
   13130:	andeq	r2, r1, r0, lsl #30
   13134:	andeq	r2, r1, r0, lsl #30
   13138:	andeq	r2, r1, r0, lsl #30
   1313c:	andeq	r2, r1, r0, lsl #30
   13140:	andeq	r2, r1, r0, lsl #30
   13144:	andeq	r2, r1, r8, ror #28
   13148:	andeq	r2, r1, r4, asr #23
   1314c:	andeq	r2, r1, r0, lsl #30
   13150:	andeq	r2, r1, r8, ror #28
   13154:	andeq	r2, r1, r0, lsl #30
   13158:	andeq	r2, r1, r8, ror #28
   1315c:	andeq	r2, r1, r0, lsl #30
   13160:	andeq	r2, r1, r0, lsl #30
   13164:	andeq	r2, r1, r0, lsl #30
   13168:	andeq	r2, r1, r0, lsl #30
   1316c:	andeq	r2, r1, r0, lsl #30
   13170:	andeq	r2, r1, r0, lsl #30
   13174:	andeq	r2, r1, r0, lsl #30
   13178:	andeq	r2, r1, r0, lsl #30
   1317c:	andeq	r2, r1, r0, lsl #30
   13180:	andeq	r2, r1, r0, lsl #30
   13184:	andeq	r2, r1, r0, lsl #30
   13188:	andeq	r2, r1, r0, lsl #30
   1318c:	andeq	r2, r1, r0, lsl #30
   13190:	andeq	r2, r1, r0, lsl #30
   13194:	andeq	r2, r1, r0, lsl #30
   13198:	andeq	r2, r1, r0, lsl #30
   1319c:	andeq	r2, r1, r0, lsl #30
   131a0:	andeq	r2, r1, r0, lsl #30
   131a4:	andeq	r2, r1, r0, lsl #30
   131a8:	andeq	r2, r1, r0, lsl #30
   131ac:	andeq	r2, r1, r0, lsl #30
   131b0:	andeq	r2, r1, r0, lsl #30
   131b4:	andeq	r2, r1, r0, lsl #30
   131b8:	andeq	r2, r1, r0, lsl #30
   131bc:	andeq	r2, r1, r0, lsl #30
   131c0:	andeq	r2, r1, r0, lsl #30
   131c4:	andeq	r2, r1, r8, asr sl
   131c8:	andeq	r2, r1, r8, ror #28
   131cc:	andeq	r2, r1, r8, asr sl
   131d0:	andeq	r2, r1, r8, ror sl
   131d4:	mov	r3, #116	; 0x74
   131d8:	b	12ca8 <__assert_fail@plt+0x1e20>
   131dc:	ldr	r3, [sp, #160]	; 0xa0
   131e0:	cmp	r3, #0
   131e4:	beq	12ab4 <__assert_fail@plt+0x1c2c>
   131e8:	lsr	r3, r4, #5
   131ec:	ldr	r0, [sp, #160]	; 0xa0
   131f0:	uxtb	r3, r3
   131f4:	and	r1, r4, #31
   131f8:	ldr	r0, [r0, r3, lsl #2]
   131fc:	lsr	r3, r0, r1
   13200:	tst	r3, #1
   13204:	beq	12ab4 <__assert_fail@plt+0x1c2c>
   13208:	ldr	r3, [sp, #28]
   1320c:	cmp	r3, #0
   13210:	beq	12c14 <__assert_fail@plt+0x1d8c>
   13214:	ldr	sl, [sp, #32]
   13218:	mov	r8, fp
   1321c:	b	12cd8 <__assert_fail@plt+0x1e50>
   13220:	ldr	r3, [sp, #28]
   13224:	cmp	r3, #0
   13228:	bne	1377c <__assert_fail@plt+0x28f4>
   1322c:	add	sl, sl, #1
   13230:	ldr	r6, [sp, #40]	; 0x28
   13234:	mov	r5, #0
   13238:	mov	r4, #92	; 0x5c
   1323c:	b	12ad0 <__assert_fail@plt+0x1c48>
   13240:	cmp	r9, r8
   13244:	bne	134b4 <__assert_fail@plt+0x262c>
   13248:	ldr	r0, [sp, #100]	; 0x64
   1324c:	bl	10cf0 <iswprint@plt>
   13250:	add	r5, r5, r4
   13254:	cmp	r0, #0
   13258:	add	r0, sp, #104	; 0x68
   1325c:	moveq	r6, #0
   13260:	bl	10ca8 <mbsinit@plt>
   13264:	cmp	r0, #0
   13268:	beq	13448 <__assert_fail@plt+0x25c0>
   1326c:	mov	r2, r6
   13270:	mov	ip, r5
   13274:	eor	r5, r2, #1
   13278:	ldr	r4, [sp, #80]	; 0x50
   1327c:	ldr	r6, [sp, #84]	; 0x54
   13280:	ldr	r7, [sp, #88]	; 0x58
   13284:	uxtb	r5, r5
   13288:	cmp	ip, #1
   1328c:	bls	1378c <__assert_fail@plt+0x2904>
   13290:	ldr	r3, [sp, #44]	; 0x2c
   13294:	and	r8, r3, r5
   13298:	mov	r5, r2
   1329c:	uxtb	r8, r8
   132a0:	add	r2, sl, ip
   132a4:	ldr	r0, [sp, #48]	; 0x30
   132a8:	mov	r1, #0
   132ac:	str	r5, [sp, #48]	; 0x30
   132b0:	ldr	r9, [sp, #28]
   132b4:	ldr	ip, [sp, #40]	; 0x28
   132b8:	ldr	r3, [sp, #32]
   132bc:	ldr	r5, [sp, #152]	; 0x98
   132c0:	b	1337c <__assert_fail@plt+0x24f4>
   132c4:	cmp	r9, #0
   132c8:	bne	136a0 <__assert_fail@plt+0x2818>
   132cc:	eor	r1, ip, #1
   132d0:	cmp	r5, #2
   132d4:	movne	r1, #0
   132d8:	andeq	r1, r1, #1
   132dc:	cmp	r1, #0
   132e0:	beq	13318 <__assert_fail@plt+0x2490>
   132e4:	cmp	fp, r7
   132e8:	movhi	ip, #39	; 0x27
   132ec:	strbhi	ip, [r3, r7]
   132f0:	add	ip, r7, #1
   132f4:	cmp	fp, ip
   132f8:	movhi	lr, #36	; 0x24
   132fc:	strbhi	lr, [r3, ip]
   13300:	add	ip, r7, #2
   13304:	cmp	fp, ip
   13308:	movhi	lr, #39	; 0x27
   1330c:	strbhi	lr, [r3, ip]
   13310:	add	r7, r7, #3
   13314:	mov	ip, r1
   13318:	cmp	fp, r7
   1331c:	movhi	r1, #92	; 0x5c
   13320:	strbhi	r1, [r3, r7]
   13324:	add	r1, r7, #1
   13328:	cmp	fp, r1
   1332c:	lsrhi	lr, r4, #6
   13330:	addhi	lr, lr, #48	; 0x30
   13334:	strbhi	lr, [r3, r1]
   13338:	add	lr, r7, #2
   1333c:	cmp	fp, lr
   13340:	lsrhi	r1, r4, #3
   13344:	andhi	r1, r1, #7
   13348:	addhi	r1, r1, #48	; 0x30
   1334c:	add	sl, sl, #1
   13350:	strbhi	r1, [r3, lr]
   13354:	and	r4, r4, #7
   13358:	cmp	r2, sl
   1335c:	add	r4, r4, #48	; 0x30
   13360:	add	r7, r7, #3
   13364:	bls	136c4 <__assert_fail@plt+0x283c>
   13368:	mov	r1, r8
   1336c:	cmp	fp, r7
   13370:	strbhi	r4, [r3, r7]
   13374:	ldrb	r4, [r0, #1]!
   13378:	add	r7, r7, #1
   1337c:	cmp	r8, #0
   13380:	bne	132c4 <__assert_fail@plt+0x243c>
   13384:	cmp	r6, #0
   13388:	bne	133d8 <__assert_fail@plt+0x2550>
   1338c:	eor	r6, r1, #1
   13390:	and	r6, r6, ip
   13394:	add	sl, sl, #1
   13398:	cmp	r2, sl
   1339c:	uxtb	r6, r6
   133a0:	bls	13400 <__assert_fail@plt+0x2578>
   133a4:	cmp	r6, #0
   133a8:	beq	1336c <__assert_fail@plt+0x24e4>
   133ac:	cmp	fp, r7
   133b0:	movhi	ip, #39	; 0x27
   133b4:	strbhi	ip, [r3, r7]
   133b8:	add	ip, r7, #1
   133bc:	cmp	fp, ip
   133c0:	movhi	lr, #39	; 0x27
   133c4:	strbhi	lr, [r3, ip]
   133c8:	add	r7, r7, #2
   133cc:	mov	r6, r8
   133d0:	mov	ip, r8
   133d4:	b	1336c <__assert_fail@plt+0x24e4>
   133d8:	cmp	fp, r7
   133dc:	eor	r6, r1, #1
   133e0:	movhi	lr, #92	; 0x5c
   133e4:	and	r6, r6, ip
   133e8:	add	sl, sl, #1
   133ec:	strbhi	lr, [r3, r7]
   133f0:	cmp	r2, sl
   133f4:	add	r7, r7, #1
   133f8:	uxtb	r6, r6
   133fc:	bhi	133a4 <__assert_fail@plt+0x251c>
   13400:	str	ip, [sp, #40]	; 0x28
   13404:	ldr	r5, [sp, #48]	; 0x30
   13408:	b	12ad0 <__assert_fail@plt+0x1c48>
   1340c:	ldr	r3, [sp, #24]
   13410:	cmn	r3, #1
   13414:	mov	r3, #0
   13418:	str	r3, [sp, #104]	; 0x68
   1341c:	str	r3, [sp, #108]	; 0x6c
   13420:	beq	13740 <__assert_fail@plt+0x28b8>
   13424:	mov	r2, r5
   13428:	mov	r3, #0
   1342c:	str	r7, [sp, #88]	; 0x58
   13430:	ldr	r7, [sp, #152]	; 0x98
   13434:	str	r5, [sp, #92]	; 0x5c
   13438:	str	r6, [sp, #84]	; 0x54
   1343c:	mov	r5, r3
   13440:	mov	r6, r2
   13444:	str	r4, [sp, #80]	; 0x50
   13448:	ldr	r3, [sp, #56]	; 0x38
   1344c:	add	r9, sl, r5
   13450:	add	r8, r3, r9
   13454:	ldr	r3, [sp, #24]
   13458:	mov	r1, r8
   1345c:	sub	r2, r3, r9
   13460:	add	r0, sp, #100	; 0x64
   13464:	add	r3, sp, #104	; 0x68
   13468:	bl	14e10 <__assert_fail@plt+0x3f88>
   1346c:	subs	r4, r0, #0
   13470:	beq	13818 <__assert_fail@plt+0x2990>
   13474:	cmn	r4, #1
   13478:	beq	137f8 <__assert_fail@plt+0x2970>
   1347c:	cmn	r4, #2
   13480:	beq	13798 <__assert_fail@plt+0x2910>
   13484:	ldr	r2, [sp, #28]
   13488:	cmp	r7, #2
   1348c:	movne	r2, #0
   13490:	andeq	r2, r2, #1
   13494:	cmp	r2, #0
   13498:	beq	13248 <__assert_fail@plt+0x23c0>
   1349c:	cmp	r4, #1
   134a0:	beq	13248 <__assert_fail@plt+0x23c0>
   134a4:	sub	r3, r4, #1
   134a8:	add	r9, r3, r9
   134ac:	ldr	r3, [sp, #56]	; 0x38
   134b0:	add	r9, r3, r9
   134b4:	ldrb	r3, [r8, #1]!
   134b8:	sub	r3, r3, #91	; 0x5b
   134bc:	cmp	r3, #33	; 0x21
   134c0:	ldrls	pc, [pc, r3, lsl #2]
   134c4:	b	13240 <__assert_fail@plt+0x23b8>
   134c8:	andeq	r3, r1, r0, asr r5
   134cc:	andeq	r3, r1, r0, asr r5
   134d0:	andeq	r3, r1, r0, asr #4
   134d4:	andeq	r3, r1, r0, asr r5
   134d8:	andeq	r3, r1, r0, asr #4
   134dc:	andeq	r3, r1, r0, asr r5
   134e0:	andeq	r3, r1, r0, asr #4
   134e4:	andeq	r3, r1, r0, asr #4
   134e8:	andeq	r3, r1, r0, asr #4
   134ec:	andeq	r3, r1, r0, asr #4
   134f0:	andeq	r3, r1, r0, asr #4
   134f4:	andeq	r3, r1, r0, asr #4
   134f8:	andeq	r3, r1, r0, asr #4
   134fc:	andeq	r3, r1, r0, asr #4
   13500:	andeq	r3, r1, r0, asr #4
   13504:	andeq	r3, r1, r0, asr #4
   13508:	andeq	r3, r1, r0, asr #4
   1350c:	andeq	r3, r1, r0, asr #4
   13510:	andeq	r3, r1, r0, asr #4
   13514:	andeq	r3, r1, r0, asr #4
   13518:	andeq	r3, r1, r0, asr #4
   1351c:	andeq	r3, r1, r0, asr #4
   13520:	andeq	r3, r1, r0, asr #4
   13524:	andeq	r3, r1, r0, asr #4
   13528:	andeq	r3, r1, r0, asr #4
   1352c:	andeq	r3, r1, r0, asr #4
   13530:	andeq	r3, r1, r0, asr #4
   13534:	andeq	r3, r1, r0, asr #4
   13538:	andeq	r3, r1, r0, asr #4
   1353c:	andeq	r3, r1, r0, asr #4
   13540:	andeq	r3, r1, r0, asr #4
   13544:	andeq	r3, r1, r0, asr #4
   13548:	andeq	r3, r1, r0, asr #4
   1354c:	andeq	r3, r1, r0, asr r5
   13550:	mov	r3, #2
   13554:	ldr	sl, [sp, #32]
   13558:	mov	r8, fp
   1355c:	str	r3, [sp, #152]	; 0x98
   13560:	b	12cd8 <__assert_fail@plt+0x1e50>
   13564:	ldr	r3, [sp, #156]	; 0x9c
   13568:	tst	r3, #1
   1356c:	bne	13698 <__assert_fail@plt+0x2810>
   13570:	ldr	r3, [sp, #152]	; 0x98
   13574:	ldr	r4, [sp, #44]	; 0x2c
   13578:	sub	r2, r3, #2
   1357c:	mov	r5, #0
   13580:	clz	r2, r2
   13584:	mov	r8, r4
   13588:	lsr	r2, r2, #5
   1358c:	b	12a98 <__assert_fail@plt+0x1c10>
   13590:	ldr	r3, [sp, #156]	; 0x9c
   13594:	ands	r9, r3, #4
   13598:	beq	136d0 <__assert_fail@plt+0x2848>
   1359c:	ldr	r2, [sp, #24]
   135a0:	add	r3, sl, #2
   135a4:	cmp	r3, r2
   135a8:	bcs	135bc <__assert_fail@plt+0x2734>
   135ac:	ldr	r2, [sp, #48]	; 0x30
   135b0:	ldrb	r4, [r2, #1]
   135b4:	cmp	r4, #63	; 0x3f
   135b8:	beq	13858 <__assert_fail@plt+0x29d0>
   135bc:	mov	r2, #0
   135c0:	mov	r8, r2
   135c4:	mov	r5, r2
   135c8:	mov	r4, #63	; 0x3f
   135cc:	b	12a98 <__assert_fail@plt+0x1c10>
   135d0:	ldr	r3, [sp, #28]
   135d4:	cmp	r3, #0
   135d8:	bne	138fc <__assert_fail@plt+0x2a74>
   135dc:	mov	r2, r5
   135e0:	mov	r8, r3
   135e4:	mov	r5, #0
   135e8:	mov	r4, #63	; 0x3f
   135ec:	b	12a98 <__assert_fail@plt+0x1c10>
   135f0:	ldr	r3, [sp, #28]
   135f4:	cmp	r3, #0
   135f8:	bne	138fc <__assert_fail@plt+0x2a74>
   135fc:	ldr	r2, [sp, #72]	; 0x48
   13600:	adds	r3, fp, #0
   13604:	movne	r3, #1
   13608:	cmp	r2, #0
   1360c:	movne	r3, #0
   13610:	cmp	r3, #0
   13614:	strne	fp, [sp, #72]	; 0x48
   13618:	movne	fp, #0
   1361c:	bne	13658 <__assert_fail@plt+0x27d0>
   13620:	cmp	fp, r7
   13624:	movhi	r2, #39	; 0x27
   13628:	ldrhi	r3, [sp, #32]
   1362c:	strbhi	r2, [r3, r7]
   13630:	add	r3, r7, #1
   13634:	cmp	fp, r3
   13638:	movhi	r1, #92	; 0x5c
   1363c:	ldrhi	r2, [sp, #32]
   13640:	strbhi	r1, [r2, r3]
   13644:	add	r3, r7, #2
   13648:	cmp	fp, r3
   1364c:	movhi	r1, #39	; 0x27
   13650:	ldrhi	r2, [sp, #32]
   13654:	strbhi	r1, [r2, r3]
   13658:	ldr	r3, [sp, #28]
   1365c:	add	r7, r7, #3
   13660:	mov	r2, r5
   13664:	mov	r8, r3
   13668:	str	r5, [sp, #68]	; 0x44
   1366c:	str	r3, [sp, #40]	; 0x28
   13670:	mov	r4, #39	; 0x27
   13674:	b	12a98 <__assert_fail@plt+0x1c10>
   13678:	ldr	r3, [sp, #56]	; 0x38
   1367c:	ldrb	r3, [r3, #1]
   13680:	adds	r3, r3, #0
   13684:	movne	r3, #1
   13688:	b	12a70 <__assert_fail@plt+0x1be8>
   1368c:	ldr	r5, [sp, #28]
   13690:	mov	r4, #48	; 0x30
   13694:	b	12a98 <__assert_fail@plt+0x1c10>
   13698:	add	sl, sl, #1
   1369c:	b	125c8 <__assert_fail@plt+0x1740>
   136a0:	mov	sl, r3
   136a4:	ldr	r3, [sp, #28]
   136a8:	mov	r8, fp
   136ac:	str	r3, [sp, #44]	; 0x2c
   136b0:	ldr	r3, [sp, #152]	; 0x98
   136b4:	sub	r2, r3, #2
   136b8:	clz	r2, r2
   136bc:	lsr	r2, r2, #5
   136c0:	b	12cd8 <__assert_fail@plt+0x1e50>
   136c4:	str	ip, [sp, #40]	; 0x28
   136c8:	ldr	r5, [sp, #48]	; 0x30
   136cc:	b	12b08 <__assert_fail@plt+0x1c80>
   136d0:	mov	r2, r9
   136d4:	mov	r8, r9
   136d8:	mov	r5, #0
   136dc:	mov	r4, #63	; 0x3f
   136e0:	b	12a98 <__assert_fail@plt+0x1c10>
   136e4:	cmp	fp, #0
   136e8:	beq	13760 <__assert_fail@plt+0x28d8>
   136ec:	ldr	r1, [sp, #32]
   136f0:	mov	r3, #34	; 0x22
   136f4:	mov	r2, #1
   136f8:	strb	r3, [r1]
   136fc:	ldr	r3, [pc, #332]	; 13850 <__assert_fail@plt+0x29c8>
   13700:	str	r2, [sp, #52]	; 0x34
   13704:	mov	r7, r2
   13708:	str	r2, [sp, #44]	; 0x2c
   1370c:	str	r3, [sp, #64]	; 0x40
   13710:	b	125b8 <__assert_fail@plt+0x1730>
   13714:	ldr	r3, [pc, #300]	; 13848 <__assert_fail@plt+0x29c0>
   13718:	str	r3, [sp, #64]	; 0x40
   1371c:	mov	r3, #0
   13720:	str	r3, [sp, #28]
   13724:	mov	r3, #1
   13728:	str	r3, [sp, #52]	; 0x34
   1372c:	mov	r7, r3
   13730:	mov	r3, #2
   13734:	str	r3, [sp, #152]	; 0x98
   13738:	b	125b8 <__assert_fail@plt+0x1730>
   1373c:	bl	10e70 <abort@plt>
   13740:	ldr	r0, [sp, #56]	; 0x38
   13744:	bl	10d98 <strlen@plt>
   13748:	str	r0, [sp, #24]
   1374c:	b	13424 <__assert_fail@plt+0x259c>
   13750:	mov	r5, r8
   13754:	mov	r4, #48	; 0x30
   13758:	ldr	r8, [sp, #44]	; 0x2c
   1375c:	b	12a98 <__assert_fail@plt+0x1c10>
   13760:	mov	r3, #1
   13764:	str	r3, [sp, #52]	; 0x34
   13768:	mov	r7, r3
   1376c:	str	r3, [sp, #44]	; 0x2c
   13770:	ldr	r3, [pc, #216]	; 13850 <__assert_fail@plt+0x29c8>
   13774:	str	r3, [sp, #64]	; 0x40
   13778:	b	125b8 <__assert_fail@plt+0x1730>
   1377c:	ldr	sl, [sp, #32]
   13780:	mov	r8, fp
   13784:	mov	r2, r3
   13788:	b	12cd8 <__assert_fail@plt+0x1e50>
   1378c:	mov	r3, r5
   13790:	mov	r5, r2
   13794:	b	12f90 <__assert_fail@plt+0x2108>
   13798:	ldr	r1, [sp, #24]
   1379c:	mov	r2, r5
   137a0:	cmp	r1, r9
   137a4:	mov	ip, r5
   137a8:	ldr	r4, [sp, #80]	; 0x50
   137ac:	ldr	r5, [sp, #92]	; 0x5c
   137b0:	ldr	r6, [sp, #84]	; 0x54
   137b4:	ldr	r7, [sp, #88]	; 0x58
   137b8:	bls	137ec <__assert_fail@plt+0x2964>
   137bc:	ldrb	r3, [r8]
   137c0:	cmp	r3, #0
   137c4:	bne	137d8 <__assert_fail@plt+0x2950>
   137c8:	b	137f0 <__assert_fail@plt+0x2968>
   137cc:	ldrb	r3, [r8, #1]!
   137d0:	cmp	r3, #0
   137d4:	beq	138f0 <__assert_fail@plt+0x2a68>
   137d8:	add	r2, r2, #1
   137dc:	add	r3, sl, r2
   137e0:	cmp	r1, r3
   137e4:	bhi	137cc <__assert_fail@plt+0x2944>
   137e8:	mov	ip, r2
   137ec:	mov	r3, #0
   137f0:	mov	r2, r3
   137f4:	b	13288 <__assert_fail@plt+0x2400>
   137f8:	mov	r3, #0
   137fc:	mov	ip, r5
   13800:	ldr	r4, [sp, #80]	; 0x50
   13804:	ldr	r5, [sp, #92]	; 0x5c
   13808:	ldr	r6, [sp, #84]	; 0x54
   1380c:	ldr	r7, [sp, #88]	; 0x58
   13810:	mov	r2, r3
   13814:	b	13288 <__assert_fail@plt+0x2400>
   13818:	mov	r3, r6
   1381c:	mov	ip, r5
   13820:	eor	r5, r3, #1
   13824:	mov	r2, r6
   13828:	ldr	r4, [sp, #80]	; 0x50
   1382c:	ldr	r6, [sp, #84]	; 0x54
   13830:	ldr	r7, [sp, #88]	; 0x58
   13834:	uxtb	r5, r5
   13838:	b	13288 <__assert_fail@plt+0x2400>
   1383c:	ldr	sl, [sp, #32]
   13840:	mov	r8, fp
   13844:	b	136ac <__assert_fail@plt+0x2824>
   13848:	andeq	r5, r1, r0, lsl #29
   1384c:	andeq	r5, r1, r4, lsl #29
   13850:	andeq	r5, r1, ip, ror lr
   13854:	stmdacc	r0, {r0, r6, r7, r8, ip, lr}
   13858:	ldr	r2, [sp, #56]	; 0x38
   1385c:	ldrb	r1, [r2, r3]
   13860:	sub	r2, r1, #33	; 0x21
   13864:	uxtb	r2, r2
   13868:	cmp	r2, #29
   1386c:	bhi	1390c <__assert_fail@plt+0x2a84>
   13870:	ldr	r0, [pc, #-36]	; 13854 <__assert_fail@plt+0x29cc>
   13874:	mov	ip, #1
   13878:	ands	r2, r0, ip, lsl r2
   1387c:	beq	1391c <__assert_fail@plt+0x2a94>
   13880:	ldr	r2, [sp, #28]
   13884:	cmp	r2, #0
   13888:	bne	13a1c <__assert_fail@plt+0x2b94>
   1388c:	cmp	fp, r7
   13890:	ldr	r8, [sp, #28]
   13894:	ldrhi	r2, [sp, #32]
   13898:	mov	sl, r3
   1389c:	mov	r5, r8
   138a0:	strbhi	r4, [r2, r7]
   138a4:	add	r2, r7, #1
   138a8:	cmp	fp, r2
   138ac:	movhi	r0, #34	; 0x22
   138b0:	ldrhi	ip, [sp, #32]
   138b4:	mov	r4, r1
   138b8:	strbhi	r0, [ip, r2]
   138bc:	add	r2, r7, #2
   138c0:	cmp	fp, r2
   138c4:	movhi	r0, #34	; 0x22
   138c8:	ldrhi	ip, [sp, #32]
   138cc:	strbhi	r0, [ip, r2]
   138d0:	add	r2, r7, #3
   138d4:	cmp	fp, r2
   138d8:	movhi	r0, #63	; 0x3f
   138dc:	ldrhi	ip, [sp, #32]
   138e0:	add	r7, r7, #4
   138e4:	strbhi	r0, [ip, r2]
   138e8:	mov	r2, r8
   138ec:	b	12a98 <__assert_fail@plt+0x1c10>
   138f0:	mov	ip, r2
   138f4:	mov	r2, r3
   138f8:	b	13288 <__assert_fail@plt+0x2400>
   138fc:	ldr	sl, [sp, #32]
   13900:	mov	r8, fp
   13904:	ldr	r2, [sp, #28]
   13908:	b	12cd8 <__assert_fail@plt+0x1e50>
   1390c:	mov	r2, #0
   13910:	mov	r8, r2
   13914:	mov	r5, r2
   13918:	b	12a98 <__assert_fail@plt+0x1c10>
   1391c:	mov	r8, r2
   13920:	mov	r5, #0
   13924:	b	12a98 <__assert_fail@plt+0x1c10>
   13928:	ldr	r1, [sp, #152]	; 0x98
   1392c:	bl	123f4 <__assert_fail@plt+0x156c>
   13930:	str	r0, [sp, #168]	; 0xa8
   13934:	b	12954 <__assert_fail@plt+0x1acc>
   13938:	ldr	r1, [sp, #152]	; 0x98
   1393c:	bl	123f4 <__assert_fail@plt+0x156c>
   13940:	str	r0, [sp, #164]	; 0xa4
   13944:	b	12934 <__assert_fail@plt+0x1aac>
   13948:	ldr	r7, [sp, #28]
   1394c:	b	12994 <__assert_fail@plt+0x1b0c>
   13950:	ldr	sl, [sp, #32]
   13954:	ldr	r2, [sp, #68]	; 0x44
   13958:	mov	r8, fp
   1395c:	mov	fp, r7
   13960:	ldr	r3, [sp, #64]	; 0x40
   13964:	cmp	r3, #0
   13968:	moveq	r2, #0
   1396c:	andne	r2, r2, #1
   13970:	cmp	r2, #0
   13974:	beq	139a0 <__assert_fail@plt+0x2b18>
   13978:	mov	r2, r3
   1397c:	ldrb	r3, [r3]
   13980:	cmp	r3, #0
   13984:	beq	139a0 <__assert_fail@plt+0x2b18>
   13988:	cmp	r8, fp
   1398c:	strbhi	r3, [sl, fp]
   13990:	ldrb	r3, [r2, #1]!
   13994:	add	fp, fp, #1
   13998:	cmp	r3, #0
   1399c:	bne	13988 <__assert_fail@plt+0x2b00>
   139a0:	cmp	r8, fp
   139a4:	movhi	r3, #0
   139a8:	strbhi	r3, [sl, fp]
   139ac:	b	12d34 <__assert_fail@plt+0x1eac>
   139b0:	ldr	r3, [sp, #168]	; 0xa8
   139b4:	ldr	sl, [sp, #32]
   139b8:	str	r3, [sp, #16]
   139bc:	ldr	r3, [sp, #164]	; 0xa4
   139c0:	mov	ip, #5
   139c4:	str	r3, [sp, #12]
   139c8:	ldr	r3, [sp, #160]	; 0xa0
   139cc:	ldr	r2, [sp, #56]	; 0x38
   139d0:	str	r3, [sp, #8]
   139d4:	ldr	r3, [sp, #156]	; 0x9c
   139d8:	ldr	r1, [sp, #72]	; 0x48
   139dc:	str	r3, [sp, #4]
   139e0:	mov	r0, sl
   139e4:	ldr	r3, [sp, #24]
   139e8:	str	ip, [sp]
   139ec:	bl	12514 <__assert_fail@plt+0x168c>
   139f0:	mov	fp, r0
   139f4:	b	12d34 <__assert_fail@plt+0x1eac>
   139f8:	mov	r8, fp
   139fc:	ldr	sl, [sp, #32]
   13a00:	mov	fp, r7
   13a04:	mov	r2, r3
   13a08:	b	13960 <__assert_fail@plt+0x2ad8>
   13a0c:	mov	r8, fp
   13a10:	ldr	sl, [sp, #32]
   13a14:	mov	fp, r7
   13a18:	b	13960 <__assert_fail@plt+0x2ad8>
   13a1c:	ldr	sl, [sp, #32]
   13a20:	mov	r8, fp
   13a24:	b	12cf0 <__assert_fail@plt+0x1e68>
   13a28:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13a2c:	sub	sp, sp, #52	; 0x34
   13a30:	mov	r4, r0
   13a34:	mov	r5, r3
   13a38:	mov	sl, r1
   13a3c:	mov	fp, r2
   13a40:	bl	10da4 <__errno_location@plt>
   13a44:	ldr	r7, [pc, #412]	; 13be8 <__assert_fail@plt+0x2d60>
   13a48:	cmn	r4, #-2147483647	; 0x80000001
   13a4c:	ldr	r6, [r7]
   13a50:	mov	r8, r0
   13a54:	movne	r0, #0
   13a58:	moveq	r0, #1
   13a5c:	ldr	r3, [r8]
   13a60:	orrs	r0, r0, r4, lsr #31
   13a64:	str	r3, [sp, #24]
   13a68:	bne	13be4 <__assert_fail@plt+0x2d5c>
   13a6c:	ldr	r2, [r7, #4]
   13a70:	cmp	r4, r2
   13a74:	blt	13ad4 <__assert_fail@plt+0x2c4c>
   13a78:	add	r9, r7, #8
   13a7c:	cmp	r6, r9
   13a80:	str	r2, [sp, #44]	; 0x2c
   13a84:	beq	13bb4 <__assert_fail@plt+0x2d2c>
   13a88:	mov	r3, #8
   13a8c:	sub	r2, r4, r2
   13a90:	mov	r0, r6
   13a94:	str	r3, [sp]
   13a98:	add	r2, r2, #1
   13a9c:	mvn	r3, #-2147483648	; 0x80000000
   13aa0:	add	r1, sp, #44	; 0x2c
   13aa4:	bl	14894 <__assert_fail@plt+0x3a0c>
   13aa8:	mov	r6, r0
   13aac:	str	r0, [r7]
   13ab0:	ldr	r0, [r7, #4]
   13ab4:	ldr	r2, [sp, #44]	; 0x2c
   13ab8:	mov	r1, #0
   13abc:	sub	r2, r2, r0
   13ac0:	add	r0, r6, r0, lsl #3
   13ac4:	lsl	r2, r2, #3
   13ac8:	bl	10dbc <memset@plt>
   13acc:	ldr	r3, [sp, #44]	; 0x2c
   13ad0:	str	r3, [r7, #4]
   13ad4:	add	r3, r6, r4, lsl #3
   13ad8:	ldr	r1, [r5, #4]
   13adc:	ldr	r7, [r3, #4]
   13ae0:	ldr	r9, [r6, r4, lsl #3]
   13ae4:	ldr	r2, [r5, #40]	; 0x28
   13ae8:	ldr	ip, [r5, #44]	; 0x2c
   13aec:	add	r0, r5, #8
   13af0:	str	r3, [sp, #28]
   13af4:	ldr	r3, [r5]
   13af8:	orr	r1, r1, #1
   13afc:	mov	lr, r0
   13b00:	str	r1, [sp, #32]
   13b04:	str	r0, [sp, #36]	; 0x24
   13b08:	str	r1, [sp, #4]
   13b0c:	str	r2, [sp, #12]
   13b10:	str	r3, [sp]
   13b14:	mov	r0, r7
   13b18:	mov	r1, r9
   13b1c:	str	ip, [sp, #16]
   13b20:	str	lr, [sp, #8]
   13b24:	mov	r3, fp
   13b28:	mov	r2, sl
   13b2c:	bl	12514 <__assert_fail@plt+0x168c>
   13b30:	cmp	r9, r0
   13b34:	bhi	13ba0 <__assert_fail@plt+0x2d18>
   13b38:	ldr	r3, [pc, #172]	; 13bec <__assert_fail@plt+0x2d64>
   13b3c:	add	r9, r0, #1
   13b40:	cmp	r7, r3
   13b44:	str	r9, [r6, r4, lsl #3]
   13b48:	beq	13b54 <__assert_fail@plt+0x2ccc>
   13b4c:	mov	r0, r7
   13b50:	bl	12218 <__assert_fail@plt+0x1390>
   13b54:	mov	r0, r9
   13b58:	bl	14730 <__assert_fail@plt+0x38a8>
   13b5c:	ldr	lr, [sp, #28]
   13b60:	ldr	ip, [r5, #44]	; 0x2c
   13b64:	ldr	r4, [r5, #40]	; 0x28
   13b68:	mov	r3, fp
   13b6c:	mov	r2, sl
   13b70:	mov	r1, r9
   13b74:	str	r0, [lr, #4]
   13b78:	ldr	lr, [r5]
   13b7c:	ldr	r5, [sp, #36]	; 0x24
   13b80:	str	ip, [sp, #16]
   13b84:	str	r5, [sp, #8]
   13b88:	ldr	r5, [sp, #32]
   13b8c:	str	r4, [sp, #12]
   13b90:	str	r5, [sp, #4]
   13b94:	str	lr, [sp]
   13b98:	mov	r7, r0
   13b9c:	bl	12514 <__assert_fail@plt+0x168c>
   13ba0:	ldr	r3, [sp, #24]
   13ba4:	mov	r0, r7
   13ba8:	str	r3, [r8]
   13bac:	add	sp, sp, #52	; 0x34
   13bb0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13bb4:	mov	r3, #8
   13bb8:	sub	r2, r4, r2
   13bbc:	str	r3, [sp]
   13bc0:	add	r1, sp, #44	; 0x2c
   13bc4:	add	r2, r2, #1
   13bc8:	mvn	r3, #-2147483648	; 0x80000000
   13bcc:	bl	14894 <__assert_fail@plt+0x3a0c>
   13bd0:	mov	r6, r0
   13bd4:	ldm	r9, {r0, r1}
   13bd8:	str	r6, [r7]
   13bdc:	stm	r6, {r0, r1}
   13be0:	b	13ab0 <__assert_fail@plt+0x2c28>
   13be4:	bl	10e70 <abort@plt>
   13be8:	strdeq	r7, [r2], -r0
   13bec:	andeq	r7, r2, r0, lsr #3
   13bf0:	push	{r4, r5, r6, lr}
   13bf4:	mov	r5, r0
   13bf8:	bl	10da4 <__errno_location@plt>
   13bfc:	cmp	r5, #0
   13c00:	mov	r1, #48	; 0x30
   13c04:	mov	r4, r0
   13c08:	ldr	r0, [pc, #16]	; 13c20 <__assert_fail@plt+0x2d98>
   13c0c:	ldr	r6, [r4]
   13c10:	movne	r0, r5
   13c14:	bl	14b90 <__assert_fail@plt+0x3d08>
   13c18:	str	r6, [r4]
   13c1c:	pop	{r4, r5, r6, pc}
   13c20:	andeq	r7, r2, r0, lsr #5
   13c24:	ldr	r3, [pc, #12]	; 13c38 <__assert_fail@plt+0x2db0>
   13c28:	cmp	r0, #0
   13c2c:	moveq	r0, r3
   13c30:	ldr	r0, [r0]
   13c34:	bx	lr
   13c38:	andeq	r7, r2, r0, lsr #5
   13c3c:	ldr	r3, [pc, #12]	; 13c50 <__assert_fail@plt+0x2dc8>
   13c40:	cmp	r0, #0
   13c44:	moveq	r0, r3
   13c48:	str	r1, [r0]
   13c4c:	bx	lr
   13c50:	andeq	r7, r2, r0, lsr #5
   13c54:	ldr	r3, [pc, #52]	; 13c90 <__assert_fail@plt+0x2e08>
   13c58:	cmp	r0, #0
   13c5c:	moveq	r0, r3
   13c60:	add	r3, r0, #8
   13c64:	push	{lr}		; (str lr, [sp, #-4]!)
   13c68:	lsr	lr, r1, #5
   13c6c:	and	r1, r1, #31
   13c70:	ldr	ip, [r3, lr, lsl #2]
   13c74:	lsr	r0, ip, r1
   13c78:	eor	r2, r2, r0
   13c7c:	and	r2, r2, #1
   13c80:	and	r0, r0, #1
   13c84:	eor	r1, ip, r2, lsl r1
   13c88:	str	r1, [r3, lr, lsl #2]
   13c8c:	pop	{pc}		; (ldr pc, [sp], #4)
   13c90:	andeq	r7, r2, r0, lsr #5
   13c94:	ldr	r3, [pc, #16]	; 13cac <__assert_fail@plt+0x2e24>
   13c98:	cmp	r0, #0
   13c9c:	movne	r3, r0
   13ca0:	ldr	r0, [r3, #4]
   13ca4:	str	r1, [r3, #4]
   13ca8:	bx	lr
   13cac:	andeq	r7, r2, r0, lsr #5
   13cb0:	ldr	r3, [pc, #44]	; 13ce4 <__assert_fail@plt+0x2e5c>
   13cb4:	cmp	r0, #0
   13cb8:	moveq	r0, r3
   13cbc:	mov	ip, #10
   13cc0:	cmp	r2, #0
   13cc4:	cmpne	r1, #0
   13cc8:	str	ip, [r0]
   13ccc:	beq	13cdc <__assert_fail@plt+0x2e54>
   13cd0:	str	r1, [r0, #40]	; 0x28
   13cd4:	str	r2, [r0, #44]	; 0x2c
   13cd8:	bx	lr
   13cdc:	push	{r4, lr}
   13ce0:	bl	10e70 <abort@plt>
   13ce4:	andeq	r7, r2, r0, lsr #5
   13ce8:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   13cec:	sub	sp, sp, #24
   13cf0:	ldr	ip, [pc, #108]	; 13d64 <__assert_fail@plt+0x2edc>
   13cf4:	ldr	r4, [sp, #56]	; 0x38
   13cf8:	mov	r9, r2
   13cfc:	cmp	r4, #0
   13d00:	moveq	r4, ip
   13d04:	mov	sl, r3
   13d08:	mov	r7, r0
   13d0c:	mov	r8, r1
   13d10:	bl	10da4 <__errno_location@plt>
   13d14:	ldr	r3, [r4, #44]	; 0x2c
   13d18:	mov	r1, r8
   13d1c:	ldr	r6, [r0]
   13d20:	str	r3, [sp, #16]
   13d24:	ldr	r2, [r4, #40]	; 0x28
   13d28:	add	r3, r4, #8
   13d2c:	str	r3, [sp, #8]
   13d30:	str	r2, [sp, #12]
   13d34:	ldr	r2, [r4, #4]
   13d38:	mov	r5, r0
   13d3c:	str	r2, [sp, #4]
   13d40:	ldr	ip, [r4]
   13d44:	mov	r3, sl
   13d48:	mov	r2, r9
   13d4c:	mov	r0, r7
   13d50:	str	ip, [sp]
   13d54:	bl	12514 <__assert_fail@plt+0x168c>
   13d58:	str	r6, [r5]
   13d5c:	add	sp, sp, #24
   13d60:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   13d64:	andeq	r7, r2, r0, lsr #5
   13d68:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13d6c:	cmp	r3, #0
   13d70:	sub	sp, sp, #44	; 0x2c
   13d74:	ldr	r4, [pc, #192]	; 13e3c <__assert_fail@plt+0x2fb4>
   13d78:	mov	r6, r2
   13d7c:	movne	r4, r3
   13d80:	mov	r9, r1
   13d84:	mov	r8, r0
   13d88:	bl	10da4 <__errno_location@plt>
   13d8c:	ldr	r3, [r4, #44]	; 0x2c
   13d90:	ldr	r5, [r4, #4]
   13d94:	add	sl, r4, #8
   13d98:	cmp	r6, #0
   13d9c:	orreq	r5, r5, #1
   13da0:	mov	r1, #0
   13da4:	ldr	r2, [r0]
   13da8:	str	r3, [sp, #16]
   13dac:	ldr	r3, [r4, #40]	; 0x28
   13db0:	stmib	sp, {r5, sl}
   13db4:	str	r3, [sp, #12]
   13db8:	ldr	r3, [r4]
   13dbc:	mov	r7, r0
   13dc0:	str	r2, [sp, #28]
   13dc4:	str	r3, [sp]
   13dc8:	mov	r2, r8
   13dcc:	mov	r3, r9
   13dd0:	mov	r0, r1
   13dd4:	bl	12514 <__assert_fail@plt+0x168c>
   13dd8:	add	r1, r0, #1
   13ddc:	mov	fp, r0
   13de0:	mov	r0, r1
   13de4:	str	r1, [sp, #36]	; 0x24
   13de8:	bl	14730 <__assert_fail@plt+0x38a8>
   13dec:	ldr	r3, [r4, #44]	; 0x2c
   13df0:	mov	r2, r8
   13df4:	str	r3, [sp, #16]
   13df8:	ldr	r3, [r4, #40]	; 0x28
   13dfc:	str	r5, [sp, #4]
   13e00:	str	r3, [sp, #12]
   13e04:	str	sl, [sp, #8]
   13e08:	ldr	ip, [r4]
   13e0c:	ldr	r1, [sp, #36]	; 0x24
   13e10:	mov	r3, r9
   13e14:	str	ip, [sp]
   13e18:	str	r0, [sp, #32]
   13e1c:	bl	12514 <__assert_fail@plt+0x168c>
   13e20:	ldr	r2, [sp, #28]
   13e24:	cmp	r6, #0
   13e28:	str	r2, [r7]
   13e2c:	ldr	r0, [sp, #32]
   13e30:	strne	fp, [r6]
   13e34:	add	sp, sp, #44	; 0x2c
   13e38:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13e3c:	andeq	r7, r2, r0, lsr #5
   13e40:	mov	r3, r2
   13e44:	mov	r2, #0
   13e48:	b	13d68 <__assert_fail@plt+0x2ee0>
   13e4c:	push	{r4, r5, r6, r7, r8, lr}
   13e50:	ldr	r6, [pc, #116]	; 13ecc <__assert_fail@plt+0x3044>
   13e54:	ldr	r3, [r6, #4]
   13e58:	ldr	r7, [r6]
   13e5c:	cmp	r3, #1
   13e60:	movgt	r5, r7
   13e64:	movgt	r4, #1
   13e68:	ble	13e88 <__assert_fail@plt+0x3000>
   13e6c:	ldr	r0, [r5, #12]
   13e70:	bl	12218 <__assert_fail@plt+0x1390>
   13e74:	ldr	r3, [r6, #4]
   13e78:	add	r4, r4, #1
   13e7c:	cmp	r3, r4
   13e80:	add	r5, r5, #8
   13e84:	bgt	13e6c <__assert_fail@plt+0x2fe4>
   13e88:	ldr	r0, [r7, #4]
   13e8c:	ldr	r4, [pc, #60]	; 13ed0 <__assert_fail@plt+0x3048>
   13e90:	cmp	r0, r4
   13e94:	beq	13ea8 <__assert_fail@plt+0x3020>
   13e98:	bl	12218 <__assert_fail@plt+0x1390>
   13e9c:	mov	r3, #256	; 0x100
   13ea0:	str	r4, [r6, #12]
   13ea4:	str	r3, [r6, #8]
   13ea8:	ldr	r4, [pc, #36]	; 13ed4 <__assert_fail@plt+0x304c>
   13eac:	cmp	r7, r4
   13eb0:	beq	13ec0 <__assert_fail@plt+0x3038>
   13eb4:	mov	r0, r7
   13eb8:	bl	12218 <__assert_fail@plt+0x1390>
   13ebc:	str	r4, [r6]
   13ec0:	mov	r3, #1
   13ec4:	str	r3, [r6, #4]
   13ec8:	pop	{r4, r5, r6, r7, r8, pc}
   13ecc:	strdeq	r7, [r2], -r0
   13ed0:	andeq	r7, r2, r0, lsr #3
   13ed4:	strdeq	r7, [r2], -r8
   13ed8:	ldr	r3, [pc, #4]	; 13ee4 <__assert_fail@plt+0x305c>
   13edc:	mvn	r2, #0
   13ee0:	b	13a28 <__assert_fail@plt+0x2ba0>
   13ee4:	andeq	r7, r2, r0, lsr #5
   13ee8:	ldr	r3, [pc]	; 13ef0 <__assert_fail@plt+0x3068>
   13eec:	b	13a28 <__assert_fail@plt+0x2ba0>
   13ef0:	andeq	r7, r2, r0, lsr #5
   13ef4:	mov	r1, r0
   13ef8:	ldr	r3, [pc, #8]	; 13f08 <__assert_fail@plt+0x3080>
   13efc:	mvn	r2, #0
   13f00:	mov	r0, #0
   13f04:	b	13a28 <__assert_fail@plt+0x2ba0>
   13f08:	andeq	r7, r2, r0, lsr #5
   13f0c:	mov	r2, r1
   13f10:	ldr	r3, [pc, #8]	; 13f20 <__assert_fail@plt+0x3098>
   13f14:	mov	r1, r0
   13f18:	mov	r0, #0
   13f1c:	b	13a28 <__assert_fail@plt+0x2ba0>
   13f20:	andeq	r7, r2, r0, lsr #5
   13f24:	push	{r4, r5, lr}
   13f28:	sub	sp, sp, #52	; 0x34
   13f2c:	mov	r5, r2
   13f30:	mov	r4, r0
   13f34:	mov	r0, sp
   13f38:	bl	123c4 <__assert_fail@plt+0x153c>
   13f3c:	mov	r3, sp
   13f40:	mov	r1, r5
   13f44:	mov	r0, r4
   13f48:	mvn	r2, #0
   13f4c:	bl	13a28 <__assert_fail@plt+0x2ba0>
   13f50:	add	sp, sp, #52	; 0x34
   13f54:	pop	{r4, r5, pc}
   13f58:	push	{r4, r5, r6, lr}
   13f5c:	sub	sp, sp, #48	; 0x30
   13f60:	mov	r5, r2
   13f64:	mov	r6, r3
   13f68:	mov	r4, r0
   13f6c:	mov	r0, sp
   13f70:	bl	123c4 <__assert_fail@plt+0x153c>
   13f74:	mov	r3, sp
   13f78:	mov	r2, r6
   13f7c:	mov	r1, r5
   13f80:	mov	r0, r4
   13f84:	bl	13a28 <__assert_fail@plt+0x2ba0>
   13f88:	add	sp, sp, #48	; 0x30
   13f8c:	pop	{r4, r5, r6, pc}
   13f90:	mov	r2, r1
   13f94:	mov	r1, r0
   13f98:	mov	r0, #0
   13f9c:	b	13f24 <__assert_fail@plt+0x309c>
   13fa0:	mov	r3, r2
   13fa4:	mov	r2, r1
   13fa8:	mov	r1, r0
   13fac:	mov	r0, #0
   13fb0:	b	13f58 <__assert_fail@plt+0x30d0>
   13fb4:	push	{r4, r5, r6, r7, r8, lr}
   13fb8:	mov	r7, r0
   13fbc:	ldr	lr, [pc, #100]	; 14028 <__assert_fail@plt+0x31a0>
   13fc0:	mov	r8, r1
   13fc4:	mov	r4, r2
   13fc8:	ldm	lr!, {r0, r1, r2, r3}
   13fcc:	sub	sp, sp, #48	; 0x30
   13fd0:	mov	ip, sp
   13fd4:	lsr	r5, r4, #5
   13fd8:	stmia	ip!, {r0, r1, r2, r3}
   13fdc:	add	r6, sp, #8
   13fe0:	ldm	lr!, {r0, r1, r2, r3}
   13fe4:	and	r4, r4, #31
   13fe8:	stmia	ip!, {r0, r1, r2, r3}
   13fec:	ldm	lr, {r0, r1, r2, r3}
   13ff0:	stm	ip, {r0, r1, r2, r3}
   13ff4:	mov	r2, r8
   13ff8:	ldr	lr, [r6, r5, lsl #2]
   13ffc:	mov	r1, r7
   14000:	mov	r3, sp
   14004:	lsr	ip, lr, r4
   14008:	eor	ip, ip, #1
   1400c:	and	ip, ip, #1
   14010:	mov	r0, #0
   14014:	eor	r4, lr, ip, lsl r4
   14018:	str	r4, [r6, r5, lsl #2]
   1401c:	bl	13a28 <__assert_fail@plt+0x2ba0>
   14020:	add	sp, sp, #48	; 0x30
   14024:	pop	{r4, r5, r6, r7, r8, pc}
   14028:	andeq	r7, r2, r0, lsr #5
   1402c:	mov	r2, r1
   14030:	mvn	r1, #0
   14034:	b	13fb4 <__assert_fail@plt+0x312c>
   14038:	mov	r2, #58	; 0x3a
   1403c:	mvn	r1, #0
   14040:	b	13fb4 <__assert_fail@plt+0x312c>
   14044:	mov	r2, #58	; 0x3a
   14048:	b	13fb4 <__assert_fail@plt+0x312c>
   1404c:	push	{r4, r5, r6, r7, lr}
   14050:	sub	sp, sp, #100	; 0x64
   14054:	mov	r6, r0
   14058:	mov	r0, sp
   1405c:	mov	r7, r2
   14060:	bl	123c4 <__assert_fail@plt+0x153c>
   14064:	mov	ip, sp
   14068:	add	lr, sp, #48	; 0x30
   1406c:	ldm	ip!, {r0, r1, r2, r3}
   14070:	stmia	lr!, {r0, r1, r2, r3}
   14074:	ldm	ip!, {r0, r1, r2, r3}
   14078:	ldr	r5, [sp, #60]	; 0x3c
   1407c:	stmia	lr!, {r0, r1, r2, r3}
   14080:	mvn	r4, r5
   14084:	ldm	ip, {r0, r1, r2, r3}
   14088:	and	ip, r4, #67108864	; 0x4000000
   1408c:	eor	ip, ip, r5
   14090:	str	ip, [sp, #60]	; 0x3c
   14094:	stm	lr, {r0, r1, r2, r3}
   14098:	mov	r1, r7
   1409c:	mov	r0, r6
   140a0:	add	r3, sp, #48	; 0x30
   140a4:	mvn	r2, #0
   140a8:	bl	13a28 <__assert_fail@plt+0x2ba0>
   140ac:	add	sp, sp, #100	; 0x64
   140b0:	pop	{r4, r5, r6, r7, pc}
   140b4:	push	{r4, r5, r6, r7, r8, lr}
   140b8:	mov	r5, r1
   140bc:	ldr	lr, [pc, #100]	; 14128 <__assert_fail@plt+0x32a0>
   140c0:	mov	r4, r2
   140c4:	mov	r7, r0
   140c8:	mov	r8, r3
   140cc:	ldm	lr!, {r0, r1, r2, r3}
   140d0:	sub	sp, sp, #48	; 0x30
   140d4:	mov	ip, sp
   140d8:	mov	r6, #10
   140dc:	stmia	ip!, {r0, r1, r2, r3}
   140e0:	cmp	r4, #0
   140e4:	cmpne	r5, #0
   140e8:	ldm	lr!, {r0, r1, r2, r3}
   140ec:	str	r6, [sp]
   140f0:	stmia	ip!, {r0, r1, r2, r3}
   140f4:	ldm	lr, {r0, r1, r2, r3}
   140f8:	stm	ip, {r0, r1, r2, r3}
   140fc:	beq	14124 <__assert_fail@plt+0x329c>
   14100:	mov	r3, sp
   14104:	mov	r1, r8
   14108:	mov	r0, r7
   1410c:	ldr	r2, [sp, #72]	; 0x48
   14110:	str	r5, [sp, #40]	; 0x28
   14114:	str	r4, [sp, #44]	; 0x2c
   14118:	bl	13a28 <__assert_fail@plt+0x2ba0>
   1411c:	add	sp, sp, #48	; 0x30
   14120:	pop	{r4, r5, r6, r7, r8, pc}
   14124:	bl	10e70 <abort@plt>
   14128:	andeq	r7, r2, r0, lsr #5
   1412c:	push	{lr}		; (str lr, [sp, #-4]!)
   14130:	sub	sp, sp, #12
   14134:	mvn	ip, #0
   14138:	str	ip, [sp]
   1413c:	bl	140b4 <__assert_fail@plt+0x322c>
   14140:	add	sp, sp, #12
   14144:	pop	{pc}		; (ldr pc, [sp], #4)
   14148:	push	{lr}		; (str lr, [sp, #-4]!)
   1414c:	sub	sp, sp, #12
   14150:	mvn	ip, #0
   14154:	mov	r3, r2
   14158:	str	ip, [sp]
   1415c:	mov	r2, r1
   14160:	mov	r1, r0
   14164:	mov	r0, #0
   14168:	bl	140b4 <__assert_fail@plt+0x322c>
   1416c:	add	sp, sp, #12
   14170:	pop	{pc}		; (ldr pc, [sp], #4)
   14174:	push	{lr}		; (str lr, [sp, #-4]!)
   14178:	sub	sp, sp, #12
   1417c:	str	r3, [sp]
   14180:	mov	r3, r2
   14184:	mov	r2, r1
   14188:	mov	r1, r0
   1418c:	mov	r0, #0
   14190:	bl	140b4 <__assert_fail@plt+0x322c>
   14194:	add	sp, sp, #12
   14198:	pop	{pc}		; (ldr pc, [sp], #4)
   1419c:	ldr	r3, [pc]	; 141a4 <__assert_fail@plt+0x331c>
   141a0:	b	13a28 <__assert_fail@plt+0x2ba0>
   141a4:	andeq	r7, r2, r0, lsl #2
   141a8:	mov	r2, r1
   141ac:	ldr	r3, [pc, #8]	; 141bc <__assert_fail@plt+0x3334>
   141b0:	mov	r1, r0
   141b4:	mov	r0, #0
   141b8:	b	13a28 <__assert_fail@plt+0x2ba0>
   141bc:	andeq	r7, r2, r0, lsl #2
   141c0:	ldr	r3, [pc, #4]	; 141cc <__assert_fail@plt+0x3344>
   141c4:	mvn	r2, #0
   141c8:	b	13a28 <__assert_fail@plt+0x2ba0>
   141cc:	andeq	r7, r2, r0, lsl #2
   141d0:	mov	r1, r0
   141d4:	ldr	r3, [pc, #8]	; 141e4 <__assert_fail@plt+0x335c>
   141d8:	mvn	r2, #0
   141dc:	mov	r0, #0
   141e0:	b	13a28 <__assert_fail@plt+0x2ba0>
   141e4:	andeq	r7, r2, r0, lsl #2
   141e8:	push	{r4, r5, r6, lr}
   141ec:	sub	sp, sp, #32
   141f0:	cmp	r1, #0
   141f4:	mov	r4, r0
   141f8:	ldr	r5, [sp, #48]	; 0x30
   141fc:	ldr	r6, [sp, #52]	; 0x34
   14200:	beq	14518 <__assert_fail@plt+0x3690>
   14204:	stm	sp, {r2, r3}
   14208:	mov	r3, r1
   1420c:	ldr	r2, [pc, #808]	; 1453c <__assert_fail@plt+0x36b4>
   14210:	mov	r1, #1
   14214:	bl	10de0 <__fprintf_chk@plt>
   14218:	mov	r2, #5
   1421c:	ldr	r1, [pc, #796]	; 14540 <__assert_fail@plt+0x36b8>
   14220:	mov	r0, #0
   14224:	bl	10ccc <dcgettext@plt>
   14228:	ldr	r3, [pc, #788]	; 14544 <__assert_fail@plt+0x36bc>
   1422c:	ldr	r2, [pc, #788]	; 14548 <__assert_fail@plt+0x36c0>
   14230:	str	r3, [sp]
   14234:	mov	r1, #1
   14238:	mov	r3, r0
   1423c:	mov	r0, r4
   14240:	bl	10de0 <__fprintf_chk@plt>
   14244:	mov	r1, r4
   14248:	mov	r0, #10
   1424c:	bl	10cc0 <fputc_unlocked@plt>
   14250:	mov	r2, #5
   14254:	ldr	r1, [pc, #752]	; 1454c <__assert_fail@plt+0x36c4>
   14258:	mov	r0, #0
   1425c:	bl	10ccc <dcgettext@plt>
   14260:	mov	r1, #1
   14264:	ldr	r3, [pc, #740]	; 14550 <__assert_fail@plt+0x36c8>
   14268:	mov	r2, r0
   1426c:	mov	r0, r4
   14270:	bl	10de0 <__fprintf_chk@plt>
   14274:	mov	r1, r4
   14278:	mov	r0, #10
   1427c:	bl	10cc0 <fputc_unlocked@plt>
   14280:	cmp	r6, #9
   14284:	ldrls	pc, [pc, r6, lsl #2]
   14288:	b	14530 <__assert_fail@plt+0x36a8>
   1428c:	andeq	r4, r1, r0, lsl r3
   14290:	andeq	r4, r1, r8, lsl r3
   14294:	andeq	r4, r1, r4, asr #6
   14298:	andeq	r4, r1, r8, ror r3
   1429c:			; <UNDEFINED> instruction: 0x000143b4
   142a0:	strdeq	r4, [r1], -r0
   142a4:	andeq	r4, r1, ip, lsr #8
   142a8:	andeq	r4, r1, r0, ror r4
   142ac:	andeq	r4, r1, r0, asr #9
   142b0:			; <UNDEFINED> instruction: 0x000142b4
   142b4:	ldr	r1, [pc, #664]	; 14554 <__assert_fail@plt+0x36cc>
   142b8:	mov	r2, #5
   142bc:	mov	r0, #0
   142c0:	bl	10ccc <dcgettext@plt>
   142c4:	ldr	ip, [r5, #32]
   142c8:	ldr	r1, [r5, #28]
   142cc:	ldr	r2, [r5, #24]
   142d0:	ldr	r3, [r5]
   142d4:	ldr	r6, [r5, #20]
   142d8:	str	ip, [sp, #28]
   142dc:	ldr	lr, [r5, #16]
   142e0:	str	r1, [sp, #24]
   142e4:	ldr	ip, [r5, #12]
   142e8:	str	r2, [sp, #20]
   142ec:	ldr	r1, [r5, #8]
   142f0:	ldr	r2, [r5, #4]
   142f4:	str	r6, [sp, #16]
   142f8:	stmib	sp, {r1, ip, lr}
   142fc:	mov	r1, #1
   14300:	str	r2, [sp]
   14304:	mov	r2, r0
   14308:	mov	r0, r4
   1430c:	bl	10de0 <__fprintf_chk@plt>
   14310:	add	sp, sp, #32
   14314:	pop	{r4, r5, r6, pc}
   14318:	mov	r2, #5
   1431c:	ldr	r1, [pc, #564]	; 14558 <__assert_fail@plt+0x36d0>
   14320:	mov	r0, #0
   14324:	bl	10ccc <dcgettext@plt>
   14328:	ldr	r3, [r5]
   1432c:	mov	r1, #1
   14330:	mov	r2, r0
   14334:	mov	r0, r4
   14338:	add	sp, sp, #32
   1433c:	pop	{r4, r5, r6, lr}
   14340:	b	10de0 <__fprintf_chk@plt>
   14344:	mov	r2, #5
   14348:	ldr	r1, [pc, #524]	; 1455c <__assert_fail@plt+0x36d4>
   1434c:	mov	r0, #0
   14350:	bl	10ccc <dcgettext@plt>
   14354:	ldr	r2, [r5, #4]
   14358:	ldr	r3, [r5]
   1435c:	mov	r1, #1
   14360:	str	r2, [sp, #48]	; 0x30
   14364:	mov	r2, r0
   14368:	mov	r0, r4
   1436c:	add	sp, sp, #32
   14370:	pop	{r4, r5, r6, lr}
   14374:	b	10de0 <__fprintf_chk@plt>
   14378:	mov	r2, #5
   1437c:	ldr	r1, [pc, #476]	; 14560 <__assert_fail@plt+0x36d8>
   14380:	mov	r0, #0
   14384:	bl	10ccc <dcgettext@plt>
   14388:	ldr	r1, [r5, #8]
   1438c:	ldr	r2, [r5, #4]
   14390:	ldr	r3, [r5]
   14394:	str	r1, [sp, #52]	; 0x34
   14398:	str	r2, [sp, #48]	; 0x30
   1439c:	mov	r1, #1
   143a0:	mov	r2, r0
   143a4:	mov	r0, r4
   143a8:	add	sp, sp, #32
   143ac:	pop	{r4, r5, r6, lr}
   143b0:	b	10de0 <__fprintf_chk@plt>
   143b4:	mov	r2, #5
   143b8:	ldr	r1, [pc, #420]	; 14564 <__assert_fail@plt+0x36dc>
   143bc:	mov	r0, #0
   143c0:	bl	10ccc <dcgettext@plt>
   143c4:	ldr	r1, [r5, #8]
   143c8:	ldr	ip, [r5, #12]
   143cc:	ldr	r2, [r5, #4]
   143d0:	ldr	r3, [r5]
   143d4:	stmib	sp, {r1, ip}
   143d8:	str	r2, [sp]
   143dc:	mov	r1, #1
   143e0:	mov	r2, r0
   143e4:	mov	r0, r4
   143e8:	bl	10de0 <__fprintf_chk@plt>
   143ec:	b	14310 <__assert_fail@plt+0x3488>
   143f0:	mov	r2, #5
   143f4:	ldr	r1, [pc, #364]	; 14568 <__assert_fail@plt+0x36e0>
   143f8:	mov	r0, #0
   143fc:	bl	10ccc <dcgettext@plt>
   14400:	add	r1, r5, #8
   14404:	ldr	r2, [r5, #4]
   14408:	ldm	r1, {r1, ip, lr}
   1440c:	ldr	r3, [r5]
   14410:	str	r2, [sp]
   14414:	stmib	sp, {r1, ip, lr}
   14418:	mov	r1, #1
   1441c:	mov	r2, r0
   14420:	mov	r0, r4
   14424:	bl	10de0 <__fprintf_chk@plt>
   14428:	b	14310 <__assert_fail@plt+0x3488>
   1442c:	mov	r2, #5
   14430:	ldr	r1, [pc, #308]	; 1456c <__assert_fail@plt+0x36e4>
   14434:	mov	r0, #0
   14438:	bl	10ccc <dcgettext@plt>
   1443c:	add	r1, r5, #8
   14440:	ldr	r2, [r5, #4]
   14444:	ldm	r1, {r1, ip, lr}
   14448:	ldr	r6, [r5, #20]
   1444c:	ldr	r3, [r5]
   14450:	stmib	sp, {r1, ip, lr}
   14454:	mov	r1, #1
   14458:	str	r2, [sp]
   1445c:	str	r6, [sp, #16]
   14460:	mov	r2, r0
   14464:	mov	r0, r4
   14468:	bl	10de0 <__fprintf_chk@plt>
   1446c:	b	14310 <__assert_fail@plt+0x3488>
   14470:	mov	r2, #5
   14474:	ldr	r1, [pc, #244]	; 14570 <__assert_fail@plt+0x36e8>
   14478:	mov	r0, #0
   1447c:	bl	10ccc <dcgettext@plt>
   14480:	ldr	r2, [r5, #24]
   14484:	ldr	r3, [r5]
   14488:	ldr	r6, [r5, #20]
   1448c:	ldr	lr, [r5, #16]
   14490:	ldr	ip, [r5, #12]
   14494:	str	r2, [sp, #20]
   14498:	ldr	r1, [r5, #8]
   1449c:	ldr	r2, [r5, #4]
   144a0:	str	r6, [sp, #16]
   144a4:	stmib	sp, {r1, ip, lr}
   144a8:	mov	r1, #1
   144ac:	str	r2, [sp]
   144b0:	mov	r2, r0
   144b4:	mov	r0, r4
   144b8:	bl	10de0 <__fprintf_chk@plt>
   144bc:	b	14310 <__assert_fail@plt+0x3488>
   144c0:	mov	r2, #5
   144c4:	ldr	r1, [pc, #168]	; 14574 <__assert_fail@plt+0x36ec>
   144c8:	mov	r0, #0
   144cc:	bl	10ccc <dcgettext@plt>
   144d0:	ldr	r1, [r5, #28]
   144d4:	ldr	r2, [r5, #24]
   144d8:	ldr	r3, [r5]
   144dc:	ldr	r6, [r5, #20]
   144e0:	ldr	lr, [r5, #16]
   144e4:	str	r1, [sp, #24]
   144e8:	ldr	ip, [r5, #12]
   144ec:	str	r2, [sp, #20]
   144f0:	ldr	r1, [r5, #8]
   144f4:	ldr	r2, [r5, #4]
   144f8:	str	r6, [sp, #16]
   144fc:	stmib	sp, {r1, ip, lr}
   14500:	mov	r1, #1
   14504:	str	r2, [sp]
   14508:	mov	r2, r0
   1450c:	mov	r0, r4
   14510:	bl	10de0 <__fprintf_chk@plt>
   14514:	b	14310 <__assert_fail@plt+0x3488>
   14518:	str	r3, [sp]
   1451c:	mov	r1, #1
   14520:	mov	r3, r2
   14524:	ldr	r2, [pc, #76]	; 14578 <__assert_fail@plt+0x36f0>
   14528:	bl	10de0 <__fprintf_chk@plt>
   1452c:	b	14218 <__assert_fail@plt+0x3390>
   14530:	mov	r2, #5
   14534:	ldr	r1, [pc, #64]	; 1457c <__assert_fail@plt+0x36f4>
   14538:	b	142bc <__assert_fail@plt+0x3434>
   1453c:	strdeq	r5, [r1], -r0
   14540:	andeq	r5, r1, r4, lsl #30
   14544:	andeq	r0, r0, r6, ror #15
   14548:	ldrdeq	r6, [r1], -ip
   1454c:	andeq	r5, r1, r8, lsl #30
   14550:			; <UNDEFINED> instruction: 0x00015fb4
   14554:	andeq	r6, r1, r4, ror #1
   14558:	ldrdeq	r5, [r1], -r8
   1455c:	andeq	r5, r1, r8, ror #31
   14560:	andeq	r6, r1, r0
   14564:	andeq	r6, r1, ip, lsl r0
   14568:	andeq	r6, r1, ip, lsr r0
   1456c:	andeq	r6, r1, r0, rrx
   14570:	andeq	r6, r1, r8, lsl #1
   14574:	strheq	r6, [r1], -r4
   14578:	strdeq	r5, [r1], -ip
   1457c:	andeq	r6, r1, r8, lsl r1
   14580:	push	{r4, r5, lr}
   14584:	sub	sp, sp, #12
   14588:	ldr	r5, [sp, #24]
   1458c:	ldr	ip, [r5]
   14590:	cmp	ip, #0
   14594:	beq	145b0 <__assert_fail@plt+0x3728>
   14598:	mov	lr, r5
   1459c:	mov	ip, #0
   145a0:	ldr	r4, [lr, #4]!
   145a4:	add	ip, ip, #1
   145a8:	cmp	r4, #0
   145ac:	bne	145a0 <__assert_fail@plt+0x3718>
   145b0:	stm	sp, {r5, ip}
   145b4:	bl	141e8 <__assert_fail@plt+0x3360>
   145b8:	add	sp, sp, #12
   145bc:	pop	{r4, r5, pc}
   145c0:	push	{r4, r5, lr}
   145c4:	sub	sp, sp, #52	; 0x34
   145c8:	add	r5, sp, #4
   145cc:	ldr	r4, [sp, #64]	; 0x40
   145d0:	mov	ip, #0
   145d4:	sub	r4, r4, #4
   145d8:	ldr	lr, [r4, #4]!
   145dc:	cmp	lr, #0
   145e0:	str	lr, [r5, #4]!
   145e4:	beq	145f4 <__assert_fail@plt+0x376c>
   145e8:	add	ip, ip, #1
   145ec:	cmp	ip, #10
   145f0:	bne	145d8 <__assert_fail@plt+0x3750>
   145f4:	add	lr, sp, #8
   145f8:	str	ip, [sp, #4]
   145fc:	str	lr, [sp]
   14600:	bl	141e8 <__assert_fail@plt+0x3360>
   14604:	add	sp, sp, #52	; 0x34
   14608:	pop	{r4, r5, pc}
   1460c:	push	{r3}		; (str r3, [sp, #-4]!)
   14610:	push	{r4, lr}
   14614:	sub	sp, sp, #60	; 0x3c
   14618:	add	lr, sp, #56	; 0x38
   1461c:	add	r3, sp, #72	; 0x48
   14620:	str	r3, [lr, #-44]!	; 0xffffffd4
   14624:	add	r4, sp, #68	; 0x44
   14628:	mov	r3, #0
   1462c:	ldr	ip, [r4, #4]!
   14630:	cmp	ip, #0
   14634:	str	ip, [lr, #4]!
   14638:	beq	14648 <__assert_fail@plt+0x37c0>
   1463c:	add	r3, r3, #1
   14640:	cmp	r3, #10
   14644:	bne	1462c <__assert_fail@plt+0x37a4>
   14648:	add	ip, sp, #16
   1464c:	str	r3, [sp, #4]
   14650:	str	ip, [sp]
   14654:	ldr	r3, [sp, #68]	; 0x44
   14658:	bl	141e8 <__assert_fail@plt+0x3360>
   1465c:	add	sp, sp, #60	; 0x3c
   14660:	pop	{r4, lr}
   14664:	add	sp, sp, #4
   14668:	bx	lr
   1466c:	ldr	r3, [pc, #116]	; 146e8 <__assert_fail@plt+0x3860>
   14670:	push	{r4, lr}
   14674:	mov	r0, #10
   14678:	ldr	r1, [r3]
   1467c:	bl	10cc0 <fputc_unlocked@plt>
   14680:	mov	r2, #5
   14684:	ldr	r1, [pc, #96]	; 146ec <__assert_fail@plt+0x3864>
   14688:	mov	r0, #0
   1468c:	bl	10ccc <dcgettext@plt>
   14690:	ldr	r2, [pc, #88]	; 146f0 <__assert_fail@plt+0x3868>
   14694:	mov	r1, r0
   14698:	mov	r0, #1
   1469c:	bl	10dc8 <__printf_chk@plt>
   146a0:	mov	r2, #5
   146a4:	ldr	r1, [pc, #72]	; 146f4 <__assert_fail@plt+0x386c>
   146a8:	mov	r0, #0
   146ac:	bl	10ccc <dcgettext@plt>
   146b0:	ldr	r3, [pc, #64]	; 146f8 <__assert_fail@plt+0x3870>
   146b4:	ldr	r2, [pc, #64]	; 146fc <__assert_fail@plt+0x3874>
   146b8:	mov	r1, r0
   146bc:	mov	r0, #1
   146c0:	bl	10dc8 <__printf_chk@plt>
   146c4:	mov	r2, #5
   146c8:	ldr	r1, [pc, #48]	; 14700 <__assert_fail@plt+0x3878>
   146cc:	mov	r0, #0
   146d0:	bl	10ccc <dcgettext@plt>
   146d4:	ldr	r2, [pc, #40]	; 14704 <__assert_fail@plt+0x387c>
   146d8:	pop	{r4, lr}
   146dc:	mov	r1, r0
   146e0:	mov	r0, #1
   146e4:	b	10dc8 <__printf_chk@plt>
   146e8:	andeq	r7, r2, ip, asr #2
   146ec:	andeq	r6, r1, r4, asr r1
   146f0:	andeq	r6, r1, r8, ror #2
   146f4:	andeq	r6, r1, r0, lsl #3
   146f8:	andeq	r5, r1, r4, lsr #17
   146fc:	andeq	r5, r1, ip, asr #17
   14700:	muleq	r1, r4, r1
   14704:			; <UNDEFINED> instruction: 0x000161bc
   14708:	push	{r4, lr}
   1470c:	bl	14cd8 <__assert_fail@plt+0x3e50>
   14710:	cmp	r0, #0
   14714:	popne	{r4, pc}
   14718:	bl	14c50 <__assert_fail@plt+0x3dc8>
   1471c:	push	{r4, lr}
   14720:	bl	14cd8 <__assert_fail@plt+0x3e50>
   14724:	cmp	r0, #0
   14728:	popne	{r4, pc}
   1472c:	bl	14c50 <__assert_fail@plt+0x3dc8>
   14730:	push	{r4, lr}
   14734:	bl	14cd8 <__assert_fail@plt+0x3e50>
   14738:	cmp	r0, #0
   1473c:	popne	{r4, pc}
   14740:	bl	14c50 <__assert_fail@plt+0x3dc8>
   14744:	push	{r4, r5, r6, lr}
   14748:	mov	r5, r0
   1474c:	mov	r4, r1
   14750:	bl	14d04 <__assert_fail@plt+0x3e7c>
   14754:	cmp	r0, #0
   14758:	popne	{r4, r5, r6, pc}
   1475c:	adds	r4, r4, #0
   14760:	movne	r4, #1
   14764:	cmp	r5, #0
   14768:	orreq	r4, r4, #1
   1476c:	cmp	r4, #0
   14770:	popeq	{r4, r5, r6, pc}
   14774:	bl	14c50 <__assert_fail@plt+0x3dc8>
   14778:	push	{r4, lr}
   1477c:	cmp	r1, #0
   14780:	orreq	r1, r1, #1
   14784:	bl	14d04 <__assert_fail@plt+0x3e7c>
   14788:	cmp	r0, #0
   1478c:	popne	{r4, pc}
   14790:	bl	14c50 <__assert_fail@plt+0x3dc8>
   14794:	push	{r4, r5, r6, lr}
   14798:	mov	r6, r0
   1479c:	mov	r5, r1
   147a0:	mov	r4, r2
   147a4:	bl	14e64 <__assert_fail@plt+0x3fdc>
   147a8:	cmp	r0, #0
   147ac:	popne	{r4, r5, r6, pc}
   147b0:	cmp	r6, #0
   147b4:	beq	147c4 <__assert_fail@plt+0x393c>
   147b8:	cmp	r5, #0
   147bc:	cmpne	r4, #0
   147c0:	popeq	{r4, r5, r6, pc}
   147c4:	bl	14c50 <__assert_fail@plt+0x3dc8>
   147c8:	b	14794 <__assert_fail@plt+0x390c>
   147cc:	cmp	r2, #0
   147d0:	cmpne	r1, #0
   147d4:	moveq	r2, #1
   147d8:	moveq	r1, r2
   147dc:	push	{r4, lr}
   147e0:	bl	14e64 <__assert_fail@plt+0x3fdc>
   147e4:	cmp	r0, #0
   147e8:	popne	{r4, pc}
   147ec:	bl	14c50 <__assert_fail@plt+0x3dc8>
   147f0:	mov	r2, r1
   147f4:	mov	r1, r0
   147f8:	mov	r0, #0
   147fc:	b	14794 <__assert_fail@plt+0x390c>
   14800:	mov	r2, r1
   14804:	mov	r1, r0
   14808:	mov	r0, #0
   1480c:	b	147cc <__assert_fail@plt+0x3944>
   14810:	push	{r4, r5, r6, lr}
   14814:	subs	r6, r0, #0
   14818:	sub	sp, sp, #8
   1481c:	mov	r5, r1
   14820:	ldr	r4, [r1]
   14824:	beq	14860 <__assert_fail@plt+0x39d8>
   14828:	lsr	r1, r4, #1
   1482c:	add	r3, r1, #1
   14830:	mvn	r3, r3
   14834:	cmp	r4, r3
   14838:	bhi	1485c <__assert_fail@plt+0x39d4>
   1483c:	add	r4, r4, #1
   14840:	add	r4, r4, r1
   14844:	mov	r0, r6
   14848:	mov	r1, r4
   1484c:	bl	14794 <__assert_fail@plt+0x390c>
   14850:	str	r4, [r5]
   14854:	add	sp, sp, #8
   14858:	pop	{r4, r5, r6, pc}
   1485c:	bl	14c50 <__assert_fail@plt+0x3dc8>
   14860:	cmp	r4, #0
   14864:	bne	14844 <__assert_fail@plt+0x39bc>
   14868:	mov	r1, r2
   1486c:	mov	r0, #64	; 0x40
   14870:	str	r2, [sp, #4]
   14874:	bl	14fa4 <__assert_fail@plt+0x411c>
   14878:	ldr	r2, [sp, #4]
   1487c:	cmp	r0, #0
   14880:	movne	r4, r0
   14884:	addeq	r4, r0, #1
   14888:	b	14844 <__assert_fail@plt+0x39bc>
   1488c:	mov	r2, #1
   14890:	b	14810 <__assert_fail@plt+0x3988>
   14894:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   14898:	sub	sp, sp, #12
   1489c:	ldr	r6, [r1]
   148a0:	mov	sl, r1
   148a4:	mov	r9, r0
   148a8:	asrs	r4, r6, #1
   148ac:	mov	r5, r2
   148b0:	mov	fp, r3
   148b4:	ldr	r7, [sp, #48]	; 0x30
   148b8:	bmi	14a24 <__assert_fail@plt+0x3b9c>
   148bc:	mvn	r3, #-2147483648	; 0x80000000
   148c0:	sub	r3, r3, r4
   148c4:	cmp	r6, r3
   148c8:	movle	r3, #0
   148cc:	movgt	r3, #1
   148d0:	mvn	r8, fp
   148d4:	cmp	r3, #0
   148d8:	addeq	r4, r4, r6
   148dc:	mvnne	r4, #-2147483648	; 0x80000000
   148e0:	lsr	r8, r8, #31
   148e4:	cmp	fp, r4
   148e8:	movge	r3, #0
   148ec:	andlt	r3, r8, #1
   148f0:	cmp	r3, #0
   148f4:	beq	149dc <__assert_fail@plt+0x3b54>
   148f8:	cmp	r7, #0
   148fc:	blt	14aac <__assert_fail@plt+0x3c24>
   14900:	bne	14aa4 <__assert_fail@plt+0x3c1c>
   14904:	mov	r2, #64	; 0x40
   14908:	mov	r1, r7
   1490c:	mov	r0, r2
   14910:	str	r2, [sp, #4]
   14914:	bl	151b0 <__assert_fail@plt+0x4328>
   14918:	ldr	r2, [sp, #4]
   1491c:	mov	r1, r7
   14920:	mov	r4, r0
   14924:	mov	r0, r2
   14928:	bl	153d0 <__assert_fail@plt+0x4548>
   1492c:	ldr	r2, [sp, #4]
   14930:	sub	r1, r2, r1
   14934:	cmp	r9, #0
   14938:	sub	r3, r4, r6
   1493c:	streq	r9, [sl]
   14940:	cmp	r3, r5
   14944:	bge	149c8 <__assert_fail@plt+0x3b40>
   14948:	cmp	r5, #0
   1494c:	blt	14a38 <__assert_fail@plt+0x3bb0>
   14950:	cmp	r6, #0
   14954:	blt	14974 <__assert_fail@plt+0x3aec>
   14958:	mvn	r3, #-2147483648	; 0x80000000
   1495c:	sub	r3, r3, r5
   14960:	cmp	r6, r3
   14964:	movle	r3, #0
   14968:	movgt	r3, #1
   1496c:	cmp	r3, #0
   14970:	bne	14b34 <__assert_fail@plt+0x3cac>
   14974:	add	r5, r6, r5
   14978:	cmp	fp, r5
   1497c:	movge	r8, #0
   14980:	andlt	r8, r8, #1
   14984:	cmp	r8, #0
   14988:	mov	r4, r5
   1498c:	bne	14b34 <__assert_fail@plt+0x3cac>
   14990:	cmp	r7, #0
   14994:	blt	14a4c <__assert_fail@plt+0x3bc4>
   14998:	beq	149c4 <__assert_fail@plt+0x3b3c>
   1499c:	cmp	r5, #0
   149a0:	blt	14af4 <__assert_fail@plt+0x3c6c>
   149a4:	mov	r1, r7
   149a8:	mvn	r0, #-2147483648	; 0x80000000
   149ac:	bl	151b0 <__assert_fail@plt+0x4328>
   149b0:	cmp	r5, r0
   149b4:	movle	r0, #0
   149b8:	movgt	r0, #1
   149bc:	cmp	r0, #0
   149c0:	bne	14b34 <__assert_fail@plt+0x3cac>
   149c4:	mul	r1, r5, r7
   149c8:	mov	r0, r9
   149cc:	bl	14744 <__assert_fail@plt+0x38bc>
   149d0:	str	r4, [sl]
   149d4:	add	sp, sp, #12
   149d8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   149dc:	cmp	r7, #0
   149e0:	blt	14a78 <__assert_fail@plt+0x3bf0>
   149e4:	beq	14904 <__assert_fail@plt+0x3a7c>
   149e8:	cmp	r4, #0
   149ec:	blt	14ab4 <__assert_fail@plt+0x3c2c>
   149f0:	mov	r1, r7
   149f4:	mvn	r0, #-2147483648	; 0x80000000
   149f8:	bl	151b0 <__assert_fail@plt+0x4328>
   149fc:	cmp	r0, r4
   14a00:	movge	r0, #0
   14a04:	movlt	r0, #1
   14a08:	cmp	r0, #0
   14a0c:	mvnne	r2, #-2147483648	; 0x80000000
   14a10:	bne	14908 <__assert_fail@plt+0x3a80>
   14a14:	mul	r1, r7, r4
   14a18:	cmp	r1, #63	; 0x3f
   14a1c:	bgt	14934 <__assert_fail@plt+0x3aac>
   14a20:	b	14904 <__assert_fail@plt+0x3a7c>
   14a24:	rsb	r3, r4, #-2147483648	; 0x80000000
   14a28:	cmp	r6, r3
   14a2c:	movge	r3, #0
   14a30:	movlt	r3, #1
   14a34:	b	148d0 <__assert_fail@plt+0x3a48>
   14a38:	rsb	r3, r5, #-2147483648	; 0x80000000
   14a3c:	cmp	r6, r3
   14a40:	movge	r3, #0
   14a44:	movlt	r3, #1
   14a48:	b	1496c <__assert_fail@plt+0x3ae4>
   14a4c:	cmp	r5, #0
   14a50:	blt	14ad8 <__assert_fail@plt+0x3c50>
   14a54:	cmn	r7, #1
   14a58:	beq	149c4 <__assert_fail@plt+0x3b3c>
   14a5c:	mov	r1, r7
   14a60:	mov	r0, #-2147483648	; 0x80000000
   14a64:	bl	151b0 <__assert_fail@plt+0x4328>
   14a68:	cmp	r5, r0
   14a6c:	movle	r0, #0
   14a70:	movgt	r0, #1
   14a74:	b	149bc <__assert_fail@plt+0x3b34>
   14a78:	cmp	r4, #0
   14a7c:	blt	14b18 <__assert_fail@plt+0x3c90>
   14a80:	cmn	r7, #1
   14a84:	beq	14a14 <__assert_fail@plt+0x3b8c>
   14a88:	mov	r1, r7
   14a8c:	mov	r0, #-2147483648	; 0x80000000
   14a90:	bl	151b0 <__assert_fail@plt+0x4328>
   14a94:	cmp	r0, r4
   14a98:	movge	r0, #0
   14a9c:	movlt	r0, #1
   14aa0:	b	14a08 <__assert_fail@plt+0x3b80>
   14aa4:	mov	r4, fp
   14aa8:	b	149f0 <__assert_fail@plt+0x3b68>
   14aac:	mov	r4, fp
   14ab0:	b	14a80 <__assert_fail@plt+0x3bf8>
   14ab4:	cmn	r4, #1
   14ab8:	beq	14a14 <__assert_fail@plt+0x3b8c>
   14abc:	mov	r1, r4
   14ac0:	mov	r0, #-2147483648	; 0x80000000
   14ac4:	bl	151b0 <__assert_fail@plt+0x4328>
   14ac8:	cmp	r7, r0
   14acc:	movle	r0, #0
   14ad0:	movgt	r0, #1
   14ad4:	b	14a08 <__assert_fail@plt+0x3b80>
   14ad8:	mov	r1, r7
   14adc:	mvn	r0, #-2147483648	; 0x80000000
   14ae0:	bl	151b0 <__assert_fail@plt+0x4328>
   14ae4:	cmp	r5, r0
   14ae8:	movge	r0, #0
   14aec:	movlt	r0, #1
   14af0:	b	149bc <__assert_fail@plt+0x3b34>
   14af4:	cmn	r5, #1
   14af8:	beq	149c4 <__assert_fail@plt+0x3b3c>
   14afc:	mov	r1, r5
   14b00:	mov	r0, #-2147483648	; 0x80000000
   14b04:	bl	151b0 <__assert_fail@plt+0x4328>
   14b08:	cmp	r7, r0
   14b0c:	movle	r0, #0
   14b10:	movgt	r0, #1
   14b14:	b	149bc <__assert_fail@plt+0x3b34>
   14b18:	mov	r1, r7
   14b1c:	mvn	r0, #-2147483648	; 0x80000000
   14b20:	bl	151b0 <__assert_fail@plt+0x4328>
   14b24:	cmp	r0, r4
   14b28:	movle	r0, #0
   14b2c:	movgt	r0, #1
   14b30:	b	14a08 <__assert_fail@plt+0x3b80>
   14b34:	bl	14c50 <__assert_fail@plt+0x3dc8>
   14b38:	push	{r4, lr}
   14b3c:	mov	r1, #1
   14b40:	bl	14c90 <__assert_fail@plt+0x3e08>
   14b44:	cmp	r0, #0
   14b48:	popne	{r4, pc}
   14b4c:	bl	14c50 <__assert_fail@plt+0x3dc8>
   14b50:	push	{r4, lr}
   14b54:	mov	r1, #1
   14b58:	bl	14c90 <__assert_fail@plt+0x3e08>
   14b5c:	cmp	r0, #0
   14b60:	popne	{r4, pc}
   14b64:	bl	14c50 <__assert_fail@plt+0x3dc8>
   14b68:	push	{r4, lr}
   14b6c:	bl	14c90 <__assert_fail@plt+0x3e08>
   14b70:	cmp	r0, #0
   14b74:	popne	{r4, pc}
   14b78:	bl	14c50 <__assert_fail@plt+0x3dc8>
   14b7c:	push	{r4, lr}
   14b80:	bl	14c90 <__assert_fail@plt+0x3e08>
   14b84:	cmp	r0, #0
   14b88:	popne	{r4, pc}
   14b8c:	bl	14c50 <__assert_fail@plt+0x3dc8>
   14b90:	push	{r4, r5, r6, lr}
   14b94:	mov	r6, r0
   14b98:	mov	r0, r1
   14b9c:	mov	r4, r1
   14ba0:	bl	14cd8 <__assert_fail@plt+0x3e50>
   14ba4:	subs	r5, r0, #0
   14ba8:	beq	14bc0 <__assert_fail@plt+0x3d38>
   14bac:	mov	r2, r4
   14bb0:	mov	r1, r6
   14bb4:	bl	10c9c <memcpy@plt>
   14bb8:	mov	r0, r5
   14bbc:	pop	{r4, r5, r6, pc}
   14bc0:	bl	14c50 <__assert_fail@plt+0x3dc8>
   14bc4:	push	{r4, r5, r6, lr}
   14bc8:	mov	r6, r0
   14bcc:	mov	r0, r1
   14bd0:	mov	r4, r1
   14bd4:	bl	14cd8 <__assert_fail@plt+0x3e50>
   14bd8:	subs	r5, r0, #0
   14bdc:	beq	14bf4 <__assert_fail@plt+0x3d6c>
   14be0:	mov	r2, r4
   14be4:	mov	r1, r6
   14be8:	bl	10c9c <memcpy@plt>
   14bec:	mov	r0, r5
   14bf0:	pop	{r4, r5, r6, pc}
   14bf4:	bl	14c50 <__assert_fail@plt+0x3dc8>
   14bf8:	push	{r4, r5, r6, lr}
   14bfc:	mov	r6, r0
   14c00:	add	r0, r1, #1
   14c04:	mov	r4, r1
   14c08:	bl	14cd8 <__assert_fail@plt+0x3e50>
   14c0c:	subs	r5, r0, #0
   14c10:	beq	14c30 <__assert_fail@plt+0x3da8>
   14c14:	mov	r3, #0
   14c18:	mov	r1, r6
   14c1c:	strb	r3, [r5, r4]
   14c20:	mov	r2, r4
   14c24:	bl	10c9c <memcpy@plt>
   14c28:	mov	r0, r5
   14c2c:	pop	{r4, r5, r6, pc}
   14c30:	bl	14c50 <__assert_fail@plt+0x3dc8>
   14c34:	push	{r4, lr}
   14c38:	mov	r4, r0
   14c3c:	bl	10d98 <strlen@plt>
   14c40:	add	r1, r0, #1
   14c44:	mov	r0, r4
   14c48:	pop	{r4, lr}
   14c4c:	b	14b90 <__assert_fail@plt+0x3d08>
   14c50:	ldr	r3, [pc, #44]	; 14c84 <__assert_fail@plt+0x3dfc>
   14c54:	push	{r4, lr}
   14c58:	mov	r2, #5
   14c5c:	ldr	r1, [pc, #36]	; 14c88 <__assert_fail@plt+0x3e00>
   14c60:	mov	r0, #0
   14c64:	ldr	r4, [r3]
   14c68:	bl	10ccc <dcgettext@plt>
   14c6c:	ldr	r2, [pc, #24]	; 14c8c <__assert_fail@plt+0x3e04>
   14c70:	mov	r1, #0
   14c74:	mov	r3, r0
   14c78:	mov	r0, r4
   14c7c:	bl	10d38 <error@plt>
   14c80:	bl	10e70 <abort@plt>
   14c84:	andeq	r7, r2, ip, ror #1
   14c88:	andeq	r6, r1, ip, lsl #4
   14c8c:	andeq	r5, r1, r4, asr fp
   14c90:	cmp	r1, #0
   14c94:	cmpne	r0, #0
   14c98:	moveq	r1, #1
   14c9c:	moveq	r0, r1
   14ca0:	umull	r2, r3, r0, r1
   14ca4:	adds	r3, r3, #0
   14ca8:	movne	r3, #1
   14cac:	cmp	r2, #0
   14cb0:	blt	14cc0 <__assert_fail@plt+0x3e38>
   14cb4:	cmp	r3, #0
   14cb8:	bne	14cc0 <__assert_fail@plt+0x3e38>
   14cbc:	b	10c3c <calloc@plt>
   14cc0:	push	{r4, lr}
   14cc4:	bl	10da4 <__errno_location@plt>
   14cc8:	mov	r3, #12
   14ccc:	str	r3, [r0]
   14cd0:	mov	r0, #0
   14cd4:	pop	{r4, pc}
   14cd8:	cmp	r0, #0
   14cdc:	moveq	r0, #1
   14ce0:	cmp	r0, #0
   14ce4:	blt	14cec <__assert_fail@plt+0x3e64>
   14ce8:	b	10d44 <malloc@plt>
   14cec:	push	{r4, lr}
   14cf0:	bl	10da4 <__errno_location@plt>
   14cf4:	mov	r3, #12
   14cf8:	str	r3, [r0]
   14cfc:	mov	r0, #0
   14d00:	pop	{r4, pc}
   14d04:	cmp	r0, #0
   14d08:	beq	14d2c <__assert_fail@plt+0x3ea4>
   14d0c:	cmp	r1, #0
   14d10:	push	{lr}		; (str lr, [sp, #-4]!)
   14d14:	sub	sp, sp, #12
   14d18:	beq	14d34 <__assert_fail@plt+0x3eac>
   14d1c:	blt	14d4c <__assert_fail@plt+0x3ec4>
   14d20:	add	sp, sp, #12
   14d24:	pop	{lr}		; (ldr lr, [sp], #4)
   14d28:	b	10cd8 <realloc@plt>
   14d2c:	mov	r0, r1
   14d30:	b	14cd8 <__assert_fail@plt+0x3e50>
   14d34:	str	r1, [sp, #4]
   14d38:	bl	12218 <__assert_fail@plt+0x1390>
   14d3c:	ldr	r3, [sp, #4]
   14d40:	mov	r0, r3
   14d44:	add	sp, sp, #12
   14d48:	pop	{pc}		; (ldr pc, [sp], #4)
   14d4c:	bl	10da4 <__errno_location@plt>
   14d50:	mov	r2, #12
   14d54:	mov	r3, #0
   14d58:	str	r2, [r0]
   14d5c:	b	14d40 <__assert_fail@plt+0x3eb8>
   14d60:	push	{r4, r5, r6, lr}
   14d64:	mov	r4, r0
   14d68:	bl	10d20 <__fpending@plt>
   14d6c:	ldr	r5, [r4]
   14d70:	and	r5, r5, #32
   14d74:	mov	r6, r0
   14d78:	mov	r0, r4
   14d7c:	bl	12118 <__assert_fail@plt+0x1290>
   14d80:	cmp	r5, #0
   14d84:	mov	r4, r0
   14d88:	bne	14da8 <__assert_fail@plt+0x3f20>
   14d8c:	cmp	r0, #0
   14d90:	beq	14da0 <__assert_fail@plt+0x3f18>
   14d94:	cmp	r6, #0
   14d98:	beq	14dc4 <__assert_fail@plt+0x3f3c>
   14d9c:	mvn	r4, #0
   14da0:	mov	r0, r4
   14da4:	pop	{r4, r5, r6, pc}
   14da8:	cmp	r0, #0
   14dac:	bne	14d9c <__assert_fail@plt+0x3f14>
   14db0:	bl	10da4 <__errno_location@plt>
   14db4:	str	r4, [r0]
   14db8:	mvn	r4, #0
   14dbc:	mov	r0, r4
   14dc0:	pop	{r4, r5, r6, pc}
   14dc4:	bl	10da4 <__errno_location@plt>
   14dc8:	ldr	r4, [r0]
   14dcc:	subs	r4, r4, #9
   14dd0:	mvnne	r4, #0
   14dd4:	mov	r0, r4
   14dd8:	pop	{r4, r5, r6, pc}
   14ddc:	push	{r4, lr}
   14de0:	mov	r0, #14
   14de4:	bl	10e34 <nl_langinfo@plt>
   14de8:	cmp	r0, #0
   14dec:	beq	14e04 <__assert_fail@plt+0x3f7c>
   14df0:	ldrb	r2, [r0]
   14df4:	ldr	r3, [pc, #16]	; 14e0c <__assert_fail@plt+0x3f84>
   14df8:	cmp	r2, #0
   14dfc:	moveq	r0, r3
   14e00:	pop	{r4, pc}
   14e04:	ldr	r0, [pc]	; 14e0c <__assert_fail@plt+0x3f84>
   14e08:	pop	{r4, pc}
   14e0c:	andeq	r6, r1, r0, lsr #4
   14e10:	push	{r4, r5, r6, r7, lr}
   14e14:	subs	r6, r0, #0
   14e18:	sub	sp, sp, #12
   14e1c:	addeq	r6, sp, #4
   14e20:	mov	r0, r6
   14e24:	mov	r5, r2
   14e28:	mov	r7, r1
   14e2c:	bl	10d2c <mbrtowc@plt>
   14e30:	cmp	r5, #0
   14e34:	cmnne	r0, #3
   14e38:	mov	r4, r0
   14e3c:	bls	14e58 <__assert_fail@plt+0x3fd0>
   14e40:	mov	r0, #0
   14e44:	bl	14eb0 <__assert_fail@plt+0x4028>
   14e48:	cmp	r0, #0
   14e4c:	moveq	r4, #1
   14e50:	ldrbeq	r3, [r7]
   14e54:	streq	r3, [r6]
   14e58:	mov	r0, r4
   14e5c:	add	sp, sp, #12
   14e60:	pop	{r4, r5, r6, r7, pc}
   14e64:	push	{r4, r5, r6, lr}
   14e68:	subs	r4, r2, #0
   14e6c:	mov	r6, r0
   14e70:	mov	r5, r1
   14e74:	beq	14ea0 <__assert_fail@plt+0x4018>
   14e78:	mov	r1, r4
   14e7c:	mvn	r0, #0
   14e80:	bl	14fa4 <__assert_fail@plt+0x411c>
   14e84:	cmp	r0, r5
   14e88:	bcs	14ea0 <__assert_fail@plt+0x4018>
   14e8c:	bl	10da4 <__errno_location@plt>
   14e90:	mov	r3, #12
   14e94:	str	r3, [r0]
   14e98:	mov	r0, #0
   14e9c:	pop	{r4, r5, r6, pc}
   14ea0:	mul	r1, r5, r4
   14ea4:	mov	r0, r6
   14ea8:	pop	{r4, r5, r6, lr}
   14eac:	b	14d04 <__assert_fail@plt+0x3e7c>
   14eb0:	push	{lr}		; (str lr, [sp, #-4]!)
   14eb4:	sub	sp, sp, #268	; 0x10c
   14eb8:	add	r1, sp, #4
   14ebc:	ldr	r2, [pc, #60]	; 14f00 <__assert_fail@plt+0x4078>
   14ec0:	bl	14f0c <__assert_fail@plt+0x4084>
   14ec4:	cmp	r0, #0
   14ec8:	movne	r0, #0
   14ecc:	bne	14ef8 <__assert_fail@plt+0x4070>
   14ed0:	ldr	r1, [pc, #44]	; 14f04 <__assert_fail@plt+0x407c>
   14ed4:	add	r0, sp, #4
   14ed8:	bl	10c60 <strcmp@plt>
   14edc:	cmp	r0, #0
   14ee0:	beq	14ef8 <__assert_fail@plt+0x4070>
   14ee4:	add	r0, sp, #4
   14ee8:	ldr	r1, [pc, #24]	; 14f08 <__assert_fail@plt+0x4080>
   14eec:	bl	10c60 <strcmp@plt>
   14ef0:	adds	r0, r0, #0
   14ef4:	movne	r0, #1
   14ef8:	add	sp, sp, #268	; 0x10c
   14efc:	pop	{pc}		; (ldr pc, [sp], #4)
   14f00:	andeq	r0, r0, r1, lsl #2
   14f04:	andeq	r6, r1, r8, lsr #4
   14f08:	andeq	r6, r1, ip, lsr #4
   14f0c:	push	{r4, r5, r6, lr}
   14f10:	mov	r5, r1
   14f14:	mov	r1, #0
   14f18:	mov	r4, r2
   14f1c:	bl	10e1c <setlocale@plt>
   14f20:	subs	r6, r0, #0
   14f24:	beq	14f80 <__assert_fail@plt+0x40f8>
   14f28:	bl	10d98 <strlen@plt>
   14f2c:	cmp	r4, r0
   14f30:	bhi	14f68 <__assert_fail@plt+0x40e0>
   14f34:	cmp	r4, #0
   14f38:	bne	14f44 <__assert_fail@plt+0x40bc>
   14f3c:	mov	r0, #34	; 0x22
   14f40:	pop	{r4, r5, r6, pc}
   14f44:	sub	r4, r4, #1
   14f48:	mov	r1, r6
   14f4c:	mov	r2, r4
   14f50:	mov	r0, r5
   14f54:	bl	10c9c <memcpy@plt>
   14f58:	mov	r3, #0
   14f5c:	strb	r3, [r5, r4]
   14f60:	mov	r0, #34	; 0x22
   14f64:	pop	{r4, r5, r6, pc}
   14f68:	add	r2, r0, #1
   14f6c:	mov	r1, r6
   14f70:	mov	r0, r5
   14f74:	bl	10c9c <memcpy@plt>
   14f78:	mov	r0, #0
   14f7c:	pop	{r4, r5, r6, pc}
   14f80:	cmp	r4, #0
   14f84:	beq	14f94 <__assert_fail@plt+0x410c>
   14f88:	strb	r6, [r5]
   14f8c:	mov	r0, #22
   14f90:	pop	{r4, r5, r6, pc}
   14f94:	mov	r0, #22
   14f98:	pop	{r4, r5, r6, pc}
   14f9c:	mov	r1, #0
   14fa0:	b	10e1c <setlocale@plt>
   14fa4:	subs	r2, r1, #1
   14fa8:	bxeq	lr
   14fac:	bcc	15184 <__assert_fail@plt+0x42fc>
   14fb0:	cmp	r0, r1
   14fb4:	bls	15168 <__assert_fail@plt+0x42e0>
   14fb8:	tst	r1, r2
   14fbc:	beq	15174 <__assert_fail@plt+0x42ec>
   14fc0:	clz	r3, r0
   14fc4:	clz	r2, r1
   14fc8:	sub	r3, r2, r3
   14fcc:	rsbs	r3, r3, #31
   14fd0:	addne	r3, r3, r3, lsl #1
   14fd4:	mov	r2, #0
   14fd8:	addne	pc, pc, r3, lsl #2
   14fdc:	nop			; (mov r0, r0)
   14fe0:	cmp	r0, r1, lsl #31
   14fe4:	adc	r2, r2, r2
   14fe8:	subcs	r0, r0, r1, lsl #31
   14fec:	cmp	r0, r1, lsl #30
   14ff0:	adc	r2, r2, r2
   14ff4:	subcs	r0, r0, r1, lsl #30
   14ff8:	cmp	r0, r1, lsl #29
   14ffc:	adc	r2, r2, r2
   15000:	subcs	r0, r0, r1, lsl #29
   15004:	cmp	r0, r1, lsl #28
   15008:	adc	r2, r2, r2
   1500c:	subcs	r0, r0, r1, lsl #28
   15010:	cmp	r0, r1, lsl #27
   15014:	adc	r2, r2, r2
   15018:	subcs	r0, r0, r1, lsl #27
   1501c:	cmp	r0, r1, lsl #26
   15020:	adc	r2, r2, r2
   15024:	subcs	r0, r0, r1, lsl #26
   15028:	cmp	r0, r1, lsl #25
   1502c:	adc	r2, r2, r2
   15030:	subcs	r0, r0, r1, lsl #25
   15034:	cmp	r0, r1, lsl #24
   15038:	adc	r2, r2, r2
   1503c:	subcs	r0, r0, r1, lsl #24
   15040:	cmp	r0, r1, lsl #23
   15044:	adc	r2, r2, r2
   15048:	subcs	r0, r0, r1, lsl #23
   1504c:	cmp	r0, r1, lsl #22
   15050:	adc	r2, r2, r2
   15054:	subcs	r0, r0, r1, lsl #22
   15058:	cmp	r0, r1, lsl #21
   1505c:	adc	r2, r2, r2
   15060:	subcs	r0, r0, r1, lsl #21
   15064:	cmp	r0, r1, lsl #20
   15068:	adc	r2, r2, r2
   1506c:	subcs	r0, r0, r1, lsl #20
   15070:	cmp	r0, r1, lsl #19
   15074:	adc	r2, r2, r2
   15078:	subcs	r0, r0, r1, lsl #19
   1507c:	cmp	r0, r1, lsl #18
   15080:	adc	r2, r2, r2
   15084:	subcs	r0, r0, r1, lsl #18
   15088:	cmp	r0, r1, lsl #17
   1508c:	adc	r2, r2, r2
   15090:	subcs	r0, r0, r1, lsl #17
   15094:	cmp	r0, r1, lsl #16
   15098:	adc	r2, r2, r2
   1509c:	subcs	r0, r0, r1, lsl #16
   150a0:	cmp	r0, r1, lsl #15
   150a4:	adc	r2, r2, r2
   150a8:	subcs	r0, r0, r1, lsl #15
   150ac:	cmp	r0, r1, lsl #14
   150b0:	adc	r2, r2, r2
   150b4:	subcs	r0, r0, r1, lsl #14
   150b8:	cmp	r0, r1, lsl #13
   150bc:	adc	r2, r2, r2
   150c0:	subcs	r0, r0, r1, lsl #13
   150c4:	cmp	r0, r1, lsl #12
   150c8:	adc	r2, r2, r2
   150cc:	subcs	r0, r0, r1, lsl #12
   150d0:	cmp	r0, r1, lsl #11
   150d4:	adc	r2, r2, r2
   150d8:	subcs	r0, r0, r1, lsl #11
   150dc:	cmp	r0, r1, lsl #10
   150e0:	adc	r2, r2, r2
   150e4:	subcs	r0, r0, r1, lsl #10
   150e8:	cmp	r0, r1, lsl #9
   150ec:	adc	r2, r2, r2
   150f0:	subcs	r0, r0, r1, lsl #9
   150f4:	cmp	r0, r1, lsl #8
   150f8:	adc	r2, r2, r2
   150fc:	subcs	r0, r0, r1, lsl #8
   15100:	cmp	r0, r1, lsl #7
   15104:	adc	r2, r2, r2
   15108:	subcs	r0, r0, r1, lsl #7
   1510c:	cmp	r0, r1, lsl #6
   15110:	adc	r2, r2, r2
   15114:	subcs	r0, r0, r1, lsl #6
   15118:	cmp	r0, r1, lsl #5
   1511c:	adc	r2, r2, r2
   15120:	subcs	r0, r0, r1, lsl #5
   15124:	cmp	r0, r1, lsl #4
   15128:	adc	r2, r2, r2
   1512c:	subcs	r0, r0, r1, lsl #4
   15130:	cmp	r0, r1, lsl #3
   15134:	adc	r2, r2, r2
   15138:	subcs	r0, r0, r1, lsl #3
   1513c:	cmp	r0, r1, lsl #2
   15140:	adc	r2, r2, r2
   15144:	subcs	r0, r0, r1, lsl #2
   15148:	cmp	r0, r1, lsl #1
   1514c:	adc	r2, r2, r2
   15150:	subcs	r0, r0, r1, lsl #1
   15154:	cmp	r0, r1
   15158:	adc	r2, r2, r2
   1515c:	subcs	r0, r0, r1
   15160:	mov	r0, r2
   15164:	bx	lr
   15168:	moveq	r0, #1
   1516c:	movne	r0, #0
   15170:	bx	lr
   15174:	clz	r2, r1
   15178:	rsb	r2, r2, #31
   1517c:	lsr	r0, r0, r2
   15180:	bx	lr
   15184:	cmp	r0, #0
   15188:	mvnne	r0, #0
   1518c:	b	1542c <__assert_fail@plt+0x45a4>
   15190:	cmp	r1, #0
   15194:	beq	15184 <__assert_fail@plt+0x42fc>
   15198:	push	{r0, r1, lr}
   1519c:	bl	14fa4 <__assert_fail@plt+0x411c>
   151a0:	pop	{r1, r2, lr}
   151a4:	mul	r3, r2, r0
   151a8:	sub	r1, r1, r3
   151ac:	bx	lr
   151b0:	cmp	r1, #0
   151b4:	beq	153c0 <__assert_fail@plt+0x4538>
   151b8:	eor	ip, r0, r1
   151bc:	rsbmi	r1, r1, #0
   151c0:	subs	r2, r1, #1
   151c4:	beq	1538c <__assert_fail@plt+0x4504>
   151c8:	movs	r3, r0
   151cc:	rsbmi	r3, r0, #0
   151d0:	cmp	r3, r1
   151d4:	bls	15398 <__assert_fail@plt+0x4510>
   151d8:	tst	r1, r2
   151dc:	beq	153a8 <__assert_fail@plt+0x4520>
   151e0:	clz	r2, r3
   151e4:	clz	r0, r1
   151e8:	sub	r2, r0, r2
   151ec:	rsbs	r2, r2, #31
   151f0:	addne	r2, r2, r2, lsl #1
   151f4:	mov	r0, #0
   151f8:	addne	pc, pc, r2, lsl #2
   151fc:	nop			; (mov r0, r0)
   15200:	cmp	r3, r1, lsl #31
   15204:	adc	r0, r0, r0
   15208:	subcs	r3, r3, r1, lsl #31
   1520c:	cmp	r3, r1, lsl #30
   15210:	adc	r0, r0, r0
   15214:	subcs	r3, r3, r1, lsl #30
   15218:	cmp	r3, r1, lsl #29
   1521c:	adc	r0, r0, r0
   15220:	subcs	r3, r3, r1, lsl #29
   15224:	cmp	r3, r1, lsl #28
   15228:	adc	r0, r0, r0
   1522c:	subcs	r3, r3, r1, lsl #28
   15230:	cmp	r3, r1, lsl #27
   15234:	adc	r0, r0, r0
   15238:	subcs	r3, r3, r1, lsl #27
   1523c:	cmp	r3, r1, lsl #26
   15240:	adc	r0, r0, r0
   15244:	subcs	r3, r3, r1, lsl #26
   15248:	cmp	r3, r1, lsl #25
   1524c:	adc	r0, r0, r0
   15250:	subcs	r3, r3, r1, lsl #25
   15254:	cmp	r3, r1, lsl #24
   15258:	adc	r0, r0, r0
   1525c:	subcs	r3, r3, r1, lsl #24
   15260:	cmp	r3, r1, lsl #23
   15264:	adc	r0, r0, r0
   15268:	subcs	r3, r3, r1, lsl #23
   1526c:	cmp	r3, r1, lsl #22
   15270:	adc	r0, r0, r0
   15274:	subcs	r3, r3, r1, lsl #22
   15278:	cmp	r3, r1, lsl #21
   1527c:	adc	r0, r0, r0
   15280:	subcs	r3, r3, r1, lsl #21
   15284:	cmp	r3, r1, lsl #20
   15288:	adc	r0, r0, r0
   1528c:	subcs	r3, r3, r1, lsl #20
   15290:	cmp	r3, r1, lsl #19
   15294:	adc	r0, r0, r0
   15298:	subcs	r3, r3, r1, lsl #19
   1529c:	cmp	r3, r1, lsl #18
   152a0:	adc	r0, r0, r0
   152a4:	subcs	r3, r3, r1, lsl #18
   152a8:	cmp	r3, r1, lsl #17
   152ac:	adc	r0, r0, r0
   152b0:	subcs	r3, r3, r1, lsl #17
   152b4:	cmp	r3, r1, lsl #16
   152b8:	adc	r0, r0, r0
   152bc:	subcs	r3, r3, r1, lsl #16
   152c0:	cmp	r3, r1, lsl #15
   152c4:	adc	r0, r0, r0
   152c8:	subcs	r3, r3, r1, lsl #15
   152cc:	cmp	r3, r1, lsl #14
   152d0:	adc	r0, r0, r0
   152d4:	subcs	r3, r3, r1, lsl #14
   152d8:	cmp	r3, r1, lsl #13
   152dc:	adc	r0, r0, r0
   152e0:	subcs	r3, r3, r1, lsl #13
   152e4:	cmp	r3, r1, lsl #12
   152e8:	adc	r0, r0, r0
   152ec:	subcs	r3, r3, r1, lsl #12
   152f0:	cmp	r3, r1, lsl #11
   152f4:	adc	r0, r0, r0
   152f8:	subcs	r3, r3, r1, lsl #11
   152fc:	cmp	r3, r1, lsl #10
   15300:	adc	r0, r0, r0
   15304:	subcs	r3, r3, r1, lsl #10
   15308:	cmp	r3, r1, lsl #9
   1530c:	adc	r0, r0, r0
   15310:	subcs	r3, r3, r1, lsl #9
   15314:	cmp	r3, r1, lsl #8
   15318:	adc	r0, r0, r0
   1531c:	subcs	r3, r3, r1, lsl #8
   15320:	cmp	r3, r1, lsl #7
   15324:	adc	r0, r0, r0
   15328:	subcs	r3, r3, r1, lsl #7
   1532c:	cmp	r3, r1, lsl #6
   15330:	adc	r0, r0, r0
   15334:	subcs	r3, r3, r1, lsl #6
   15338:	cmp	r3, r1, lsl #5
   1533c:	adc	r0, r0, r0
   15340:	subcs	r3, r3, r1, lsl #5
   15344:	cmp	r3, r1, lsl #4
   15348:	adc	r0, r0, r0
   1534c:	subcs	r3, r3, r1, lsl #4
   15350:	cmp	r3, r1, lsl #3
   15354:	adc	r0, r0, r0
   15358:	subcs	r3, r3, r1, lsl #3
   1535c:	cmp	r3, r1, lsl #2
   15360:	adc	r0, r0, r0
   15364:	subcs	r3, r3, r1, lsl #2
   15368:	cmp	r3, r1, lsl #1
   1536c:	adc	r0, r0, r0
   15370:	subcs	r3, r3, r1, lsl #1
   15374:	cmp	r3, r1
   15378:	adc	r0, r0, r0
   1537c:	subcs	r3, r3, r1
   15380:	cmp	ip, #0
   15384:	rsbmi	r0, r0, #0
   15388:	bx	lr
   1538c:	teq	ip, r0
   15390:	rsbmi	r0, r0, #0
   15394:	bx	lr
   15398:	movcc	r0, #0
   1539c:	asreq	r0, ip, #31
   153a0:	orreq	r0, r0, #1
   153a4:	bx	lr
   153a8:	clz	r2, r1
   153ac:	rsb	r2, r2, #31
   153b0:	cmp	ip, #0
   153b4:	lsr	r0, r3, r2
   153b8:	rsbmi	r0, r0, #0
   153bc:	bx	lr
   153c0:	cmp	r0, #0
   153c4:	mvngt	r0, #-2147483648	; 0x80000000
   153c8:	movlt	r0, #-2147483648	; 0x80000000
   153cc:	b	1542c <__assert_fail@plt+0x45a4>
   153d0:	cmp	r1, #0
   153d4:	beq	153c0 <__assert_fail@plt+0x4538>
   153d8:	push	{r0, r1, lr}
   153dc:	bl	151b8 <__assert_fail@plt+0x4330>
   153e0:	pop	{r1, r2, lr}
   153e4:	mul	r3, r2, r0
   153e8:	sub	r1, r1, r3
   153ec:	bx	lr
   153f0:	cmp	r3, #0
   153f4:	cmpeq	r2, #0
   153f8:	bne	15410 <__assert_fail@plt+0x4588>
   153fc:	cmp	r1, #0
   15400:	cmpeq	r0, #0
   15404:	mvnne	r1, #0
   15408:	mvnne	r0, #0
   1540c:	b	1542c <__assert_fail@plt+0x45a4>
   15410:	sub	sp, sp, #8
   15414:	push	{sp, lr}
   15418:	bl	1543c <__assert_fail@plt+0x45b4>
   1541c:	ldr	lr, [sp, #4]
   15420:	add	sp, sp, #8
   15424:	pop	{r2, r3}
   15428:	bx	lr
   1542c:	push	{r1, lr}
   15430:	mov	r0, #8
   15434:	bl	10c54 <raise@plt>
   15438:	pop	{r1, pc}
   1543c:	cmp	r1, r3
   15440:	push	{r4, r5, r6, r7, r8, r9, lr}
   15444:	cmpeq	r0, r2
   15448:	mov	r4, r0
   1544c:	mov	r5, r1
   15450:	ldr	r9, [sp, #28]
   15454:	movcc	r0, #0
   15458:	movcc	r1, #0
   1545c:	bcc	15554 <__assert_fail@plt+0x46cc>
   15460:	cmp	r3, #0
   15464:	clzeq	ip, r2
   15468:	clzne	ip, r3
   1546c:	addeq	ip, ip, #32
   15470:	cmp	r5, #0
   15474:	clzeq	r1, r4
   15478:	addeq	r1, r1, #32
   1547c:	clzne	r1, r5
   15480:	sub	ip, ip, r1
   15484:	sub	lr, ip, #32
   15488:	lsl	r7, r3, ip
   1548c:	rsb	r8, ip, #32
   15490:	orr	r7, r7, r2, lsl lr
   15494:	orr	r7, r7, r2, lsr r8
   15498:	lsl	r6, r2, ip
   1549c:	cmp	r5, r7
   154a0:	cmpeq	r4, r6
   154a4:	movcc	r0, #0
   154a8:	movcc	r1, #0
   154ac:	bcc	154c8 <__assert_fail@plt+0x4640>
   154b0:	mov	r3, #1
   154b4:	subs	r4, r4, r6
   154b8:	lsl	r1, r3, lr
   154bc:	lsl	r0, r3, ip
   154c0:	orr	r1, r1, r3, lsr r8
   154c4:	sbc	r5, r5, r7
   154c8:	cmp	ip, #0
   154cc:	beq	15554 <__assert_fail@plt+0x46cc>
   154d0:	lsrs	r3, r7, #1
   154d4:	rrx	r2, r6
   154d8:	mov	r6, ip
   154dc:	b	15500 <__assert_fail@plt+0x4678>
   154e0:	subs	r4, r4, r2
   154e4:	sbc	r5, r5, r3
   154e8:	adds	r4, r4, r4
   154ec:	adc	r5, r5, r5
   154f0:	adds	r4, r4, #1
   154f4:	adc	r5, r5, #0
   154f8:	subs	r6, r6, #1
   154fc:	beq	1551c <__assert_fail@plt+0x4694>
   15500:	cmp	r5, r3
   15504:	cmpeq	r4, r2
   15508:	bcs	154e0 <__assert_fail@plt+0x4658>
   1550c:	adds	r4, r4, r4
   15510:	adc	r5, r5, r5
   15514:	subs	r6, r6, #1
   15518:	bne	15500 <__assert_fail@plt+0x4678>
   1551c:	lsr	r6, r4, ip
   15520:	lsr	r7, r5, ip
   15524:	orr	r6, r6, r5, lsl r8
   15528:	adds	r2, r0, r4
   1552c:	orr	r6, r6, r5, lsr lr
   15530:	adc	r3, r1, r5
   15534:	lsl	r1, r7, ip
   15538:	orr	r1, r1, r6, lsl lr
   1553c:	lsl	r0, r6, ip
   15540:	orr	r1, r1, r6, lsr r8
   15544:	subs	r0, r2, r0
   15548:	mov	r4, r6
   1554c:	mov	r5, r7
   15550:	sbc	r1, r3, r1
   15554:	cmp	r9, #0
   15558:	popeq	{r4, r5, r6, r7, r8, r9, pc}
   1555c:	strd	r4, [r9]
   15560:	pop	{r4, r5, r6, r7, r8, r9, pc}
   15564:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   15568:	mov	r7, r0
   1556c:	ldr	r6, [pc, #72]	; 155bc <__assert_fail@plt+0x4734>
   15570:	ldr	r5, [pc, #72]	; 155c0 <__assert_fail@plt+0x4738>
   15574:	add	r6, pc, r6
   15578:	add	r5, pc, r5
   1557c:	sub	r6, r6, r5
   15580:	mov	r8, r1
   15584:	mov	r9, r2
   15588:	bl	10c1c <calloc@plt-0x20>
   1558c:	asrs	r6, r6, #2
   15590:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   15594:	mov	r4, #0
   15598:	add	r4, r4, #1
   1559c:	ldr	r3, [r5], #4
   155a0:	mov	r2, r9
   155a4:	mov	r1, r8
   155a8:	mov	r0, r7
   155ac:	blx	r3
   155b0:	cmp	r6, r4
   155b4:	bne	15598 <__assert_fail@plt+0x4710>
   155b8:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   155bc:	muleq	r1, r4, r9
   155c0:	andeq	r1, r1, ip, lsl #19
   155c4:	bx	lr
   155c8:	ldr	r3, [pc, #12]	; 155dc <__assert_fail@plt+0x4754>
   155cc:	mov	r1, #0
   155d0:	add	r3, pc, r3
   155d4:	ldr	r2, [r3]
   155d8:	b	10db0 <__cxa_atexit@plt>
   155dc:	andeq	r1, r1, r4, lsl #22

Disassembly of section .fini:

000155e0 <.fini>:
   155e0:	push	{r3, lr}
   155e4:	pop	{r3, pc}
